
raspbian-preinstalled/find:     file format elf32-littlearm


Disassembly of section .init:

00012020 <.init>:
   12020:	push	{r3, lr}
   12024:	bl	12a3c <__assert_fail@plt+0x2a0>
   12028:	pop	{r3, pc}

Disassembly of section .plt:

0001202c <pthread_mutex_unlock@plt-0x14>:
   1202c:	push	{lr}		; (str lr, [sp, #-4]!)
   12030:	ldr	lr, [pc, #4]	; 1203c <pthread_mutex_unlock@plt-0x4>
   12034:	add	lr, pc, lr
   12038:	ldr	pc, [lr, #8]!
   1203c:	andeq	r9, r4, r8, lsr sp

00012040 <pthread_mutex_unlock@plt>:
   12040:	add	ip, pc, #0, 12
   12044:	add	ip, ip, #299008	; 0x49000
   12048:	ldr	pc, [ip, #3384]!	; 0xd38

0001204c <fdopen@plt>:
   1204c:	add	ip, pc, #0, 12
   12050:	add	ip, ip, #299008	; 0x49000
   12054:	ldr	pc, [ip, #3376]!	; 0xd30

00012058 <fstatfs64@plt>:
   12058:	add	ip, pc, #0, 12
   1205c:	add	ip, ip, #299008	; 0x49000
   12060:	ldr	pc, [ip, #3368]!	; 0xd28

00012064 <calloc@plt>:
   12064:	add	ip, pc, #0, 12
   12068:	add	ip, ip, #299008	; 0x49000
   1206c:	ldr	pc, [ip, #3360]!	; 0xd20

00012070 <endgrent@plt>:
   12070:	add	ip, pc, #0, 12
   12074:	add	ip, ip, #299008	; 0x49000
   12078:	ldr	pc, [ip, #3352]!	; 0xd18

0001207c <wctype@plt>:
   1207c:	add	ip, pc, #0, 12
   12080:	add	ip, ip, #299008	; 0x49000
   12084:	ldr	pc, [ip, #3344]!	; 0xd10

00012088 <raise@plt>:
   12088:	add	ip, pc, #0, 12
   1208c:	add	ip, ip, #299008	; 0x49000
   12090:	ldr	pc, [ip, #3336]!	; 0xd08

00012094 <wcrtomb@plt>:
   12094:	add	ip, pc, #0, 12
   12098:	add	ip, ip, #299008	; 0x49000
   1209c:	ldr	pc, [ip, #3328]!	; 0xd00

000120a0 <gmtime_r@plt>:
   120a0:	add	ip, pc, #0, 12
   120a4:	add	ip, ip, #299008	; 0x49000
   120a8:	ldr	pc, [ip, #3320]!	; 0xcf8

000120ac <__getdelim@plt>:
   120ac:	add	ip, pc, #0, 12
   120b0:	add	ip, ip, #299008	; 0x49000
   120b4:	ldr	pc, [ip, #3312]!	; 0xcf0

000120b8 <getpwnam@plt>:
   120b8:	add	ip, pc, #0, 12
   120bc:	add	ip, ip, #299008	; 0x49000
   120c0:	ldr	pc, [ip, #3304]!	; 0xce8

000120c4 <is_selinux_enabled@plt>:
   120c4:	add	ip, pc, #0, 12
   120c8:	add	ip, ip, #299008	; 0x49000
   120cc:	ldr	pc, [ip, #3296]!	; 0xce0

000120d0 <iswctype@plt>:
   120d0:	add	ip, pc, #0, 12
   120d4:	add	ip, ip, #299008	; 0x49000
   120d8:	ldr	pc, [ip, #3288]!	; 0xcd8

000120dc <strcmp@plt>:
   120dc:	add	ip, pc, #0, 12
   120e0:	add	ip, ip, #299008	; 0x49000
   120e4:	ldr	pc, [ip, #3280]!	; 0xcd0

000120e8 <strtol@plt>:
   120e8:	add	ip, pc, #0, 12
   120ec:	add	ip, ip, #299008	; 0x49000
   120f0:	ldr	pc, [ip, #3272]!	; 0xcc8

000120f4 <getpwuid@plt>:
   120f4:	add	ip, pc, #0, 12
   120f8:	add	ip, ip, #299008	; 0x49000
   120fc:	ldr	pc, [ip, #3264]!	; 0xcc0

00012100 <pthread_mutex_destroy@plt>:
   12100:	add	ip, pc, #0, 12
   12104:	add	ip, ip, #299008	; 0x49000
   12108:	ldr	pc, [ip, #3256]!	; 0xcb8

0001210c <mktime@plt>:
   1210c:	add	ip, pc, #0, 12
   12110:	add	ip, ip, #299008	; 0x49000
   12114:	ldr	pc, [ip, #3248]!	; 0xcb0

00012118 <fflush@plt>:
   12118:	add	ip, pc, #0, 12
   1211c:	add	ip, ip, #299008	; 0x49000
   12120:	ldr	pc, [ip, #3240]!	; 0xca8

00012124 <unlinkat@plt>:
   12124:	add	ip, pc, #0, 12
   12128:	add	ip, ip, #299008	; 0x49000
   1212c:	ldr	pc, [ip, #3232]!	; 0xca0

00012130 <wcwidth@plt>:
   12130:	add	ip, pc, #0, 12
   12134:	add	ip, ip, #299008	; 0x49000
   12138:	ldr	pc, [ip, #3224]!	; 0xc98

0001213c <lsetfilecon@plt>:
   1213c:	add	ip, pc, #0, 12
   12140:	add	ip, ip, #299008	; 0x49000
   12144:	ldr	pc, [ip, #3216]!	; 0xc90

00012148 <memmove@plt>:
   12148:	add	ip, pc, #0, 12
   1214c:	add	ip, ip, #299008	; 0x49000
   12150:	ldr	pc, [ip, #3208]!	; 0xc88

00012154 <free@plt>:
   12154:	add	ip, pc, #0, 12
   12158:	add	ip, ip, #299008	; 0x49000
   1215c:	ldr	pc, [ip, #3200]!	; 0xc80

00012160 <pthread_mutex_lock@plt>:
   12160:	add	ip, pc, #0, 12
   12164:	add	ip, ip, #299008	; 0x49000
   12168:	ldr	pc, [ip, #3192]!	; 0xc78

0001216c <faccessat@plt>:
   1216c:	add	ip, pc, #0, 12
   12170:	add	ip, ip, #299008	; 0x49000
   12174:	ldr	pc, [ip, #3184]!	; 0xc70

00012178 <ferror@plt>:
   12178:	add	ip, pc, #0, 12
   1217c:	add	ip, ip, #299008	; 0x49000
   12180:	ldr	pc, [ip, #3176]!	; 0xc68

00012184 <strndup@plt>:
   12184:	add	ip, pc, #0, 12
   12188:	add	ip, ip, #299008	; 0x49000
   1218c:	ldr	pc, [ip, #3168]!	; 0xc60

00012190 <clock_gettime@plt>:
   12190:	add	ip, pc, #0, 12
   12194:	add	ip, ip, #299008	; 0x49000
   12198:	ldr	pc, [ip, #3160]!	; 0xc58

0001219c <_exit@plt>:
   1219c:	add	ip, pc, #0, 12
   121a0:	add	ip, ip, #299008	; 0x49000
   121a4:	ldr	pc, [ip, #3152]!	; 0xc50

000121a8 <memcpy@plt>:
   121a8:	add	ip, pc, #0, 12
   121ac:	add	ip, ip, #299008	; 0x49000
   121b0:	ldr	pc, [ip, #3144]!	; 0xc48

000121b4 <execvp@plt>:
   121b4:	add	ip, pc, #0, 12
   121b8:	add	ip, ip, #299008	; 0x49000
   121bc:	ldr	pc, [ip, #3136]!	; 0xc40

000121c0 <pthread_mutex_init@plt>:
   121c0:	add	ip, pc, #0, 12
   121c4:	add	ip, ip, #299008	; 0x49000
   121c8:	ldr	pc, [ip, #3128]!	; 0xc38

000121cc <__strtoull_internal@plt>:
   121cc:	add	ip, pc, #0, 12
   121d0:	add	ip, ip, #299008	; 0x49000
   121d4:	ldr	pc, [ip, #3120]!	; 0xc30

000121d8 <towlower@plt>:
   121d8:	add	ip, pc, #0, 12
   121dc:	add	ip, ip, #299008	; 0x49000
   121e0:	ldr	pc, [ip, #3112]!	; 0xc28

000121e4 <mbsinit@plt>:
   121e4:	add	ip, pc, #0, 12
   121e8:	add	ip, ip, #299008	; 0x49000
   121ec:	ldr	pc, [ip, #3104]!	; 0xc20

000121f0 <signal@plt>:
   121f0:	add	ip, pc, #0, 12
   121f4:	add	ip, ip, #299008	; 0x49000
   121f8:	ldr	pc, [ip, #3096]!	; 0xc18

000121fc <time@plt>:
   121fc:	add	ip, pc, #0, 12
   12200:	add	ip, ip, #299008	; 0x49000
   12204:	ldr	pc, [ip, #3088]!	; 0xc10

00012208 <memcmp@plt>:
   12208:	add	ip, pc, #0, 12
   1220c:	add	ip, ip, #299008	; 0x49000
   12210:	ldr	pc, [ip, #3080]!	; 0xc08

00012214 <uname@plt>:
   12214:	add	ip, pc, #0, 12
   12218:	add	ip, ip, #299008	; 0x49000
   1221c:	ldr	pc, [ip, #3072]!	; 0xc00

00012220 <ctime@plt>:
   12220:	add	ip, pc, #0, 12
   12224:	add	ip, ip, #299008	; 0x49000
   12228:	ldr	pc, [ip, #3064]!	; 0xbf8

0001222c <dcgettext@plt>:
   1222c:	add	ip, pc, #0, 12
   12230:	add	ip, ip, #299008	; 0x49000
   12234:	ldr	pc, [ip, #3056]!	; 0xbf0

00012238 <strdup@plt>:
   12238:	add	ip, pc, #0, 12
   1223c:	add	ip, ip, #299008	; 0x49000
   12240:	ldr	pc, [ip, #3048]!	; 0xbe8

00012244 <__stack_chk_fail@plt>:
   12244:	add	ip, pc, #0, 12
   12248:	add	ip, ip, #299008	; 0x49000
   1224c:	ldr	pc, [ip, #3040]!	; 0xbe0

00012250 <sysconf@plt>:
   12250:	add	ip, pc, #0, 12
   12254:	add	ip, ip, #299008	; 0x49000
   12258:	ldr	pc, [ip, #3032]!	; 0xbd8

0001225c <getrlimit64@plt>:
   1225c:	add	ip, pc, #0, 12
   12260:	add	ip, ip, #299008	; 0x49000
   12264:	ldr	pc, [ip, #3024]!	; 0xbd0

00012268 <realloc@plt>:
   12268:	add	ip, pc, #0, 12
   1226c:	add	ip, ip, #299008	; 0x49000
   12270:	ldr	pc, [ip, #3016]!	; 0xbc8

00012274 <fgetfilecon@plt>:
   12274:	add	ip, pc, #0, 12
   12278:	add	ip, ip, #299008	; 0x49000
   1227c:	ldr	pc, [ip, #3008]!	; 0xbc0

00012280 <localtime_r@plt>:
   12280:	add	ip, pc, #0, 12
   12284:	add	ip, ip, #299008	; 0x49000
   12288:	ldr	pc, [ip, #3000]!	; 0xbb8

0001228c <textdomain@plt>:
   1228c:	add	ip, pc, #0, 12
   12290:	add	ip, ip, #299008	; 0x49000
   12294:	ldr	pc, [ip, #2992]!	; 0xbb0

00012298 <iswcntrl@plt>:
   12298:	add	ip, pc, #0, 12
   1229c:	add	ip, ip, #299008	; 0x49000
   122a0:	ldr	pc, [ip, #2984]!	; 0xba8

000122a4 <chdir@plt>:
   122a4:	add	ip, pc, #0, 12
   122a8:	add	ip, ip, #299008	; 0x49000
   122ac:	ldr	pc, [ip, #2976]!	; 0xba0

000122b0 <__fxstatat64@plt>:
   122b0:	add	ip, pc, #0, 12
   122b4:	add	ip, ip, #299008	; 0x49000
   122b8:	ldr	pc, [ip, #2968]!	; 0xb98

000122bc <iswprint@plt>:
   122bc:	add	ip, pc, #0, 12
   122c0:	add	ip, ip, #299008	; 0x49000
   122c4:	ldr	pc, [ip, #2960]!	; 0xb90

000122c8 <tzset@plt>:
   122c8:	add	ip, pc, #0, 12
   122cc:	add	ip, ip, #299008	; 0x49000
   122d0:	ldr	pc, [ip, #2952]!	; 0xb88

000122d4 <__fxstat64@plt>:
   122d4:	add	ip, pc, #0, 12
   122d8:	add	ip, ip, #299008	; 0x49000
   122dc:	ldr	pc, [ip, #2944]!	; 0xb80

000122e0 <__poll_chk@plt>:
   122e0:	add	ip, pc, #0, 12
   122e4:	add	ip, ip, #299008	; 0x49000
   122e8:	ldr	pc, [ip, #2936]!	; 0xb78

000122ec <__memcpy_chk@plt>:
   122ec:	add	ip, pc, #0, 12
   122f0:	add	ip, ip, #299008	; 0x49000
   122f4:	ldr	pc, [ip, #2928]!	; 0xb70

000122f8 <fwrite@plt>:
   122f8:	add	ip, pc, #0, 12
   122fc:	add	ip, ip, #299008	; 0x49000
   12300:	ldr	pc, [ip, #2920]!	; 0xb68

00012304 <strcat@plt>:
   12304:	add	ip, pc, #0, 12
   12308:	add	ip, ip, #299008	; 0x49000
   1230c:	ldr	pc, [ip, #2912]!	; 0xb60

00012310 <lseek64@plt>:
   12310:	add	ip, pc, #0, 12
   12314:	add	ip, ip, #299008	; 0x49000
   12318:	ldr	pc, [ip, #2904]!	; 0xb58

0001231c <__stpcpy_chk@plt>:
   1231c:	add	ip, pc, #0, 12
   12320:	add	ip, ip, #299008	; 0x49000
   12324:	ldr	pc, [ip, #2896]!	; 0xb50

00012328 <waitpid@plt>:
   12328:	add	ip, pc, #0, 12
   1232c:	add	ip, ip, #299008	; 0x49000
   12330:	ldr	pc, [ip, #2888]!	; 0xb48

00012334 <__ctype_get_mb_cur_max@plt>:
   12334:	add	ip, pc, #0, 12
   12338:	add	ip, ip, #299008	; 0x49000
   1233c:	ldr	pc, [ip, #2880]!	; 0xb40

00012340 <hasmntopt@plt>:
   12340:	add	ip, pc, #0, 12
   12344:	add	ip, ip, #299008	; 0x49000
   12348:	ldr	pc, [ip, #2872]!	; 0xb38

0001234c <strcpy@plt>:
   1234c:	add	ip, pc, #0, 12
   12350:	add	ip, ip, #299008	; 0x49000
   12354:	ldr	pc, [ip, #2864]!	; 0xb30

00012358 <gettimeofday@plt>:
   12358:	add	ip, pc, #0, 12
   1235c:	add	ip, ip, #299008	; 0x49000
   12360:	ldr	pc, [ip, #2856]!	; 0xb28

00012364 <__fpending@plt>:
   12364:	add	ip, pc, #0, 12
   12368:	add	ip, ip, #299008	; 0x49000
   1236c:	ldr	pc, [ip, #2848]!	; 0xb20

00012370 <mbrtowc@plt>:
   12370:	add	ip, pc, #0, 12
   12374:	add	ip, ip, #299008	; 0x49000
   12378:	ldr	pc, [ip, #2840]!	; 0xb18

0001237c <strtok_r@plt>:
   1237c:	add	ip, pc, #0, 12
   12380:	add	ip, ip, #299008	; 0x49000
   12384:	ldr	pc, [ip, #2832]!	; 0xb10

00012388 <error@plt>:
   12388:	add	ip, pc, #0, 12
   1238c:	add	ip, ip, #299008	; 0x49000
   12390:	ldr	pc, [ip, #2824]!	; 0xb08

00012394 <getmntent@plt>:
   12394:	add	ip, pc, #0, 12
   12398:	add	ip, ip, #299008	; 0x49000
   1239c:	ldr	pc, [ip, #2816]!	; 0xb00

000123a0 <opendir@plt>:
   123a0:	add	ip, pc, #0, 12
   123a4:	add	ip, ip, #299008	; 0x49000
   123a8:	ldr	pc, [ip, #2808]!	; 0xaf8

000123ac <fnmatch@plt>:
   123ac:	add	ip, pc, #0, 12
   123b0:	add	ip, ip, #299008	; 0x49000
   123b4:	ldr	pc, [ip, #2800]!	; 0xaf0

000123b8 <open64@plt>:
   123b8:	add	ip, pc, #0, 12
   123bc:	add	ip, ip, #299008	; 0x49000
   123c0:	ldr	pc, [ip, #2792]!	; 0xae8

000123c4 <getenv@plt>:
   123c4:	add	ip, pc, #0, 12
   123c8:	add	ip, ip, #299008	; 0x49000
   123cc:	ldr	pc, [ip, #2784]!	; 0xae0

000123d0 <lgetfilecon@plt>:
   123d0:	add	ip, pc, #0, 12
   123d4:	add	ip, ip, #299008	; 0x49000
   123d8:	ldr	pc, [ip, #2776]!	; 0xad8

000123dc <malloc@plt>:
   123dc:	add	ip, pc, #0, 12
   123e0:	add	ip, ip, #299008	; 0x49000
   123e4:	ldr	pc, [ip, #2768]!	; 0xad0

000123e8 <__libc_start_main@plt>:
   123e8:	add	ip, pc, #0, 12
   123ec:	add	ip, ip, #299008	; 0x49000
   123f0:	ldr	pc, [ip, #2760]!	; 0xac8

000123f4 <readlinkat@plt>:
   123f4:	add	ip, pc, #0, 12
   123f8:	add	ip, ip, #299008	; 0x49000
   123fc:	ldr	pc, [ip, #2752]!	; 0xac0

00012400 <strftime@plt>:
   12400:	add	ip, pc, #0, 12
   12404:	add	ip, ip, #299008	; 0x49000
   12408:	ldr	pc, [ip, #2744]!	; 0xab8

0001240c <__vfprintf_chk@plt>:
   1240c:	add	ip, pc, #0, 12
   12410:	add	ip, ip, #299008	; 0x49000
   12414:	ldr	pc, [ip, #2736]!	; 0xab0

00012418 <__freading@plt>:
   12418:	add	ip, pc, #0, 12
   1241c:	add	ip, ip, #299008	; 0x49000
   12420:	ldr	pc, [ip, #2728]!	; 0xaa8

00012424 <localtime@plt>:
   12424:	add	ip, pc, #0, 12
   12428:	add	ip, ip, #299008	; 0x49000
   1242c:	ldr	pc, [ip, #2720]!	; 0xaa0

00012430 <__ctype_tolower_loc@plt>:
   12430:	add	ip, pc, #0, 12
   12434:	add	ip, ip, #299008	; 0x49000
   12438:	ldr	pc, [ip, #2712]!	; 0xa98

0001243c <modf@plt>:
   1243c:	add	ip, pc, #0, 12
   12440:	add	ip, ip, #299008	; 0x49000
   12444:	ldr	pc, [ip, #2704]!	; 0xa90

00012448 <__ctype_toupper_loc@plt>:
   12448:	add	ip, pc, #0, 12
   1244c:	add	ip, ip, #299008	; 0x49000
   12450:	ldr	pc, [ip, #2696]!	; 0xa88

00012454 <__gmon_start__@plt>:
   12454:	add	ip, pc, #0, 12
   12458:	add	ip, ip, #299008	; 0x49000
   1245c:	ldr	pc, [ip, #2688]!	; 0xa80

00012460 <__ctype_b_loc@plt>:
   12460:	add	ip, pc, #0, 12
   12464:	add	ip, ip, #299008	; 0x49000
   12468:	ldr	pc, [ip, #2680]!	; 0xa78

0001246c <getcwd@plt>:
   1246c:	add	ip, pc, #0, 12
   12470:	add	ip, ip, #299008	; 0x49000
   12474:	ldr	pc, [ip, #2672]!	; 0xa70

00012478 <exit@plt>:
   12478:	add	ip, pc, #0, 12
   1247c:	add	ip, ip, #299008	; 0x49000
   12480:	ldr	pc, [ip, #2664]!	; 0xa68

00012484 <getfilecon@plt>:
   12484:	add	ip, pc, #0, 12
   12488:	add	ip, ip, #299008	; 0x49000
   1248c:	ldr	pc, [ip, #2656]!	; 0xa60

00012490 <strtoul@plt>:
   12490:	add	ip, pc, #0, 12
   12494:	add	ip, ip, #299008	; 0x49000
   12498:	ldr	pc, [ip, #2648]!	; 0xa58

0001249c <strlen@plt>:
   1249c:	add	ip, pc, #0, 12
   124a0:	add	ip, ip, #299008	; 0x49000
   124a4:	ldr	pc, [ip, #2640]!	; 0xa50

000124a8 <strchr@plt>:
   124a8:	add	ip, pc, #0, 12
   124ac:	add	ip, ip, #299008	; 0x49000
   124b0:	ldr	pc, [ip, #2632]!	; 0xa48

000124b4 <setenv@plt>:
   124b4:	add	ip, pc, #0, 12
   124b8:	add	ip, ip, #299008	; 0x49000
   124bc:	ldr	pc, [ip, #2624]!	; 0xa40

000124c0 <openat64@plt>:
   124c0:	add	ip, pc, #0, 12
   124c4:	add	ip, ip, #299008	; 0x49000
   124c8:	ldr	pc, [ip, #2616]!	; 0xa38

000124cc <memrchr@plt>:
   124cc:	add	ip, pc, #0, 12
   124d0:	add	ip, ip, #299008	; 0x49000
   124d4:	ldr	pc, [ip, #2608]!	; 0xa30

000124d8 <__errno_location@plt>:
   124d8:	add	ip, pc, #0, 12
   124dc:	add	ip, ip, #299008	; 0x49000
   124e0:	ldr	pc, [ip, #2600]!	; 0xa28

000124e4 <iswalnum@plt>:
   124e4:	add	ip, pc, #0, 12
   124e8:	add	ip, ip, #299008	; 0x49000
   124ec:	ldr	pc, [ip, #2592]!	; 0xa20

000124f0 <__sprintf_chk@plt>:
   124f0:	add	ip, pc, #0, 12
   124f4:	add	ip, ip, #299008	; 0x49000
   124f8:	ldr	pc, [ip, #2584]!	; 0xa18

000124fc <snprintf@plt>:
   124fc:	add	ip, pc, #0, 12
   12500:	add	ip, ip, #299008	; 0x49000
   12504:	ldr	pc, [ip, #2576]!	; 0xa10

00012508 <__cxa_atexit@plt>:
   12508:	add	ip, pc, #0, 12
   1250c:	add	ip, ip, #299008	; 0x49000
   12510:	ldr	pc, [ip, #2568]!	; 0xa08

00012514 <memset@plt>:
   12514:	add	ip, pc, #0, 12
   12518:	add	ip, ip, #299008	; 0x49000
   1251c:	ldr	pc, [ip, #2560]!	; 0xa00

00012520 <putchar@plt>:
   12520:	add	ip, pc, #0, 12
   12524:	add	ip, ip, #299008	; 0x49000
   12528:	ldr	pc, [ip, #2552]!	; 0x9f8

0001252c <strncpy@plt>:
   1252c:	add	ip, pc, #0, 12
   12530:	add	ip, ip, #299008	; 0x49000
   12534:	ldr	pc, [ip, #2544]!	; 0x9f0

00012538 <pthread_mutexattr_gettype@plt>:
   12538:	add	ip, pc, #0, 12
   1253c:	add	ip, ip, #299008	; 0x49000
   12540:	ldr	pc, [ip, #2536]!	; 0x9e8

00012544 <btowc@plt>:
   12544:	add	ip, pc, #0, 12
   12548:	add	ip, ip, #299008	; 0x49000
   1254c:	ldr	pc, [ip, #2528]!	; 0x9e0

00012550 <__printf_chk@plt>:
   12550:	add	ip, pc, #0, 12
   12554:	add	ip, ip, #299008	; 0x49000
   12558:	ldr	pc, [ip, #2520]!	; 0x9d8

0001255c <strtod@plt>:
   1255c:	add	ip, pc, #0, 12
   12560:	add	ip, ip, #299008	; 0x49000
   12564:	ldr	pc, [ip, #2512]!	; 0x9d0

00012568 <fileno@plt>:
   12568:	add	ip, pc, #0, 12
   1256c:	add	ip, ip, #299008	; 0x49000
   12570:	ldr	pc, [ip, #2504]!	; 0x9c8

00012574 <difftime@plt>:
   12574:	add	ip, pc, #0, 12
   12578:	add	ip, ip, #299008	; 0x49000
   1257c:	ldr	pc, [ip, #2496]!	; 0x9c0

00012580 <__fprintf_chk@plt>:
   12580:	add	ip, pc, #0, 12
   12584:	add	ip, ip, #299008	; 0x49000
   12588:	ldr	pc, [ip, #2488]!	; 0x9b8

0001258c <memchr@plt>:
   1258c:	add	ip, pc, #0, 12
   12590:	add	ip, ip, #299008	; 0x49000
   12594:	ldr	pc, [ip, #2480]!	; 0x9b0

00012598 <setfilecon@plt>:
   12598:	add	ip, pc, #0, 12
   1259c:	add	ip, ip, #299008	; 0x49000
   125a0:	ldr	pc, [ip, #2472]!	; 0x9a8

000125a4 <access@plt>:
   125a4:	add	ip, pc, #0, 12
   125a8:	add	ip, ip, #299008	; 0x49000
   125ac:	ldr	pc, [ip, #2464]!	; 0x9a0

000125b0 <fclose@plt>:
   125b0:	add	ip, pc, #0, 12
   125b4:	add	ip, ip, #299008	; 0x49000
   125b8:	ldr	pc, [ip, #2456]!	; 0x998

000125bc <strnlen@plt>:
   125bc:	add	ip, pc, #0, 12
   125c0:	add	ip, ip, #299008	; 0x49000
   125c4:	ldr	pc, [ip, #2448]!	; 0x990

000125c8 <fseeko64@plt>:
   125c8:	add	ip, pc, #0, 12
   125cc:	add	ip, ip, #299008	; 0x49000
   125d0:	ldr	pc, [ip, #2440]!	; 0x988

000125d4 <endmntent@plt>:
   125d4:	add	ip, pc, #0, 12
   125d8:	add	ip, ip, #299008	; 0x49000
   125dc:	ldr	pc, [ip, #2432]!	; 0x980

000125e0 <fcntl64@plt>:
   125e0:	add	ip, pc, #0, 12
   125e4:	add	ip, ip, #299008	; 0x49000
   125e8:	ldr	pc, [ip, #2424]!	; 0x978

000125ec <rpmatch@plt>:
   125ec:	add	ip, pc, #0, 12
   125f0:	add	ip, ip, #299008	; 0x49000
   125f4:	ldr	pc, [ip, #2416]!	; 0x970

000125f8 <setlocale@plt>:
   125f8:	add	ip, pc, #0, 12
   125fc:	add	ip, ip, #299008	; 0x49000
   12600:	ldr	pc, [ip, #2408]!	; 0x968

00012604 <fork@plt>:
   12604:	add	ip, pc, #0, 12
   12608:	add	ip, ip, #299008	; 0x49000
   1260c:	ldr	pc, [ip, #2400]!	; 0x960

00012610 <endpwent@plt>:
   12610:	add	ip, pc, #0, 12
   12614:	add	ip, ip, #299008	; 0x49000
   12618:	ldr	pc, [ip, #2392]!	; 0x958

0001261c <strrchr@plt>:
   1261c:	add	ip, pc, #0, 12
   12620:	add	ip, ip, #299008	; 0x49000
   12624:	ldr	pc, [ip, #2384]!	; 0x950

00012628 <nl_langinfo@plt>:
   12628:	add	ip, pc, #0, 12
   1262c:	add	ip, ip, #299008	; 0x49000
   12630:	ldr	pc, [ip, #2376]!	; 0x948

00012634 <fputc@plt>:
   12634:	add	ip, pc, #0, 12
   12638:	add	ip, ip, #299008	; 0x49000
   1263c:	ldr	pc, [ip, #2368]!	; 0x940

00012640 <sscanf@plt>:
   12640:	add	ip, pc, #0, 12
   12644:	add	ip, ip, #299008	; 0x49000
   12648:	ldr	pc, [ip, #2360]!	; 0x938

0001264c <localeconv@plt>:
   1264c:	add	ip, pc, #0, 12
   12650:	add	ip, ip, #299008	; 0x49000
   12654:	ldr	pc, [ip, #2352]!	; 0x930

00012658 <sprintf@plt>:
   12658:	add	ip, pc, #0, 12
   1265c:	add	ip, ip, #299008	; 0x49000
   12660:	ldr	pc, [ip, #2344]!	; 0x928

00012664 <readdir64@plt>:
   12664:	add	ip, pc, #0, 12
   12668:	add	ip, ip, #299008	; 0x49000
   1266c:	ldr	pc, [ip, #2336]!	; 0x920

00012670 <fdopendir@plt>:
   12670:	add	ip, pc, #0, 12
   12674:	add	ip, ip, #299008	; 0x49000
   12678:	ldr	pc, [ip, #2328]!	; 0x918

0001267c <timegm@plt>:
   1267c:	add	ip, pc, #0, 12
   12680:	add	ip, ip, #299008	; 0x49000
   12684:	ldr	pc, [ip, #2320]!	; 0x910

00012688 <putc@plt>:
   12688:	add	ip, pc, #0, 12
   1268c:	add	ip, ip, #299008	; 0x49000
   12690:	ldr	pc, [ip, #2312]!	; 0x908

00012694 <dirfd@plt>:
   12694:	add	ip, pc, #0, 12
   12698:	add	ip, ip, #299008	; 0x49000
   1269c:	ldr	pc, [ip, #2304]!	; 0x900

000126a0 <fchdir@plt>:
   126a0:	add	ip, pc, #0, 12
   126a4:	add	ip, ip, #299008	; 0x49000
   126a8:	ldr	pc, [ip, #2296]!	; 0x8f8

000126ac <fopen64@plt>:
   126ac:	add	ip, pc, #0, 12
   126b0:	add	ip, ip, #299008	; 0x49000
   126b4:	ldr	pc, [ip, #2288]!	; 0x8f0

000126b8 <qsort@plt>:
   126b8:	add	ip, pc, #0, 12
   126bc:	add	ip, ip, #299008	; 0x49000
   126c0:	ldr	pc, [ip, #2280]!	; 0x8e8

000126c4 <freecon@plt>:
   126c4:	add	ip, pc, #0, 12
   126c8:	add	ip, ip, #299008	; 0x49000
   126cc:	ldr	pc, [ip, #2272]!	; 0x8e0

000126d0 <strpbrk@plt>:
   126d0:	add	ip, pc, #0, 12
   126d4:	add	ip, ip, #299008	; 0x49000
   126d8:	ldr	pc, [ip, #2264]!	; 0x8d8

000126dc <setmntent@plt>:
   126dc:	add	ip, pc, #0, 12
   126e0:	add	ip, ip, #299008	; 0x49000
   126e4:	ldr	pc, [ip, #2256]!	; 0x8d0

000126e8 <bindtextdomain@plt>:
   126e8:	add	ip, pc, #0, 12
   126ec:	add	ip, ip, #299008	; 0x49000
   126f0:	ldr	pc, [ip, #2248]!	; 0x8c8

000126f4 <__xstat64@plt>:
   126f4:	add	ip, pc, #0, 12
   126f8:	add	ip, ip, #299008	; 0x49000
   126fc:	ldr	pc, [ip, #2240]!	; 0x8c0

00012700 <isatty@plt>:
   12700:	add	ip, pc, #0, 12
   12704:	add	ip, ip, #299008	; 0x49000
   12708:	ldr	pc, [ip, #2232]!	; 0x8b8

0001270c <unsetenv@plt>:
   1270c:	add	ip, pc, #0, 12
   12710:	add	ip, ip, #299008	; 0x49000
   12714:	ldr	pc, [ip, #2224]!	; 0x8b0

00012718 <towupper@plt>:
   12718:	add	ip, pc, #0, 12
   1271c:	add	ip, ip, #299008	; 0x49000
   12720:	ldr	pc, [ip, #2216]!	; 0x8a8

00012724 <fputs@plt>:
   12724:	add	ip, pc, #0, 12
   12728:	add	ip, ip, #299008	; 0x49000
   1272c:	ldr	pc, [ip, #2208]!	; 0x8a0

00012730 <strncmp@plt>:
   12730:	add	ip, pc, #0, 12
   12734:	add	ip, ip, #299008	; 0x49000
   12738:	ldr	pc, [ip, #2200]!	; 0x898

0001273c <abort@plt>:
   1273c:	add	ip, pc, #0, 12
   12740:	add	ip, ip, #299008	; 0x49000
   12744:	ldr	pc, [ip, #2192]!	; 0x890

00012748 <close@plt>:
   12748:	add	ip, pc, #0, 12
   1274c:	add	ip, ip, #299008	; 0x49000
   12750:	ldr	pc, [ip, #2184]!	; 0x888

00012754 <__lxstat64@plt>:
   12754:	add	ip, pc, #0, 12
   12758:	add	ip, ip, #299008	; 0x49000
   1275c:	ldr	pc, [ip, #2176]!	; 0x880

00012760 <closedir@plt>:
   12760:	add	ip, pc, #0, 12
   12764:	add	ip, ip, #299008	; 0x49000
   12768:	ldr	pc, [ip, #2168]!	; 0x878

0001276c <getgrgid@plt>:
   1276c:	add	ip, pc, #0, 12
   12770:	add	ip, ip, #299008	; 0x49000
   12774:	ldr	pc, [ip, #2160]!	; 0x870

00012778 <getgrnam@plt>:
   12778:	add	ip, pc, #0, 12
   1277c:	add	ip, ip, #299008	; 0x49000
   12780:	ldr	pc, [ip, #2152]!	; 0x868

00012784 <__snprintf_chk@plt>:
   12784:	add	ip, pc, #0, 12
   12788:	add	ip, ip, #299008	; 0x49000
   1278c:	ldr	pc, [ip, #2144]!	; 0x860

00012790 <strspn@plt>:
   12790:	add	ip, pc, #0, 12
   12794:	add	ip, ip, #299008	; 0x49000
   12798:	ldr	pc, [ip, #2136]!	; 0x858

0001279c <__assert_fail@plt>:
   1279c:	add	ip, pc, #0, 12
   127a0:	add	ip, ip, #299008	; 0x49000
   127a4:	ldr	pc, [ip, #2128]!	; 0x850

Disassembly of section .text:

000127a8 <fts_open@@Base-0x1e65c>:
   127a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127ac:	sub	sp, sp, #20
   127b0:	ldr	r3, [r1]
   127b4:	ldr	r7, [pc, #520]	; 129c4 <__assert_fail@plt+0x228>
   127b8:	cmp	r3, #0
   127bc:	ldr	r5, [pc, #516]	; 129c8 <__assert_fail@plt+0x22c>
   127c0:	ldr	r2, [r7]
   127c4:	mov	r9, r0
   127c8:	movne	r0, r3
   127cc:	ldreq	r0, [pc, #504]	; 129cc <__assert_fail@plt+0x230>
   127d0:	mov	sl, r1
   127d4:	str	r2, [sp, #12]
   127d8:	bl	2b624 <__assert_fail@plt+0x18e88>
   127dc:	bl	17ea0 <__assert_fail@plt+0x5704>
   127e0:	mov	r3, #0
   127e4:	mvn	r2, #99	; 0x63
   127e8:	str	r2, [r5, #16]
   127ec:	strb	r3, [r5, #40]	; 0x28
   127f0:	str	r3, [r5, #28]
   127f4:	strb	r3, [r5, #32]
   127f8:	bl	17f34 <__assert_fail@plt+0x5798>
   127fc:	cmp	r0, #0
   12800:	bne	12924 <__assert_fail@plt+0x188>
   12804:	ldr	r0, [pc, #452]	; 129d0 <__assert_fail@plt+0x234>
   12808:	bl	18d3c <__assert_fail@plt+0x65a0>
   1280c:	cmp	r0, #0
   12810:	mov	r4, r0
   12814:	str	r0, [r5, #36]	; 0x24
   12818:	beq	12970 <__assert_fail@plt+0x1d4>
   1281c:	ldr	r8, [pc, #432]	; 129d4 <__assert_fail@plt+0x238>
   12820:	mov	r0, r8
   12824:	bl	189c0 <__assert_fail@plt+0x6224>
   12828:	ldr	r1, [pc, #424]	; 129d8 <__assert_fail@plt+0x23c>
   1282c:	mov	r0, #6
   12830:	bl	125f8 <setlocale@plt>
   12834:	ldr	r1, [pc, #416]	; 129dc <__assert_fail@plt+0x240>
   12838:	ldr	r0, [pc, #416]	; 129e0 <__assert_fail@plt+0x244>
   1283c:	bl	126e8 <bindtextdomain@plt>
   12840:	ldr	r0, [pc, #408]	; 129e0 <__assert_fail@plt+0x244>
   12844:	bl	1228c <textdomain@plt>
   12848:	ldr	r0, [pc, #404]	; 129e4 <__assert_fail@plt+0x248>
   1284c:	bl	43fe4 <fts_children@@Base+0x12548>
   12850:	subs	r6, r0, #0
   12854:	bne	1299c <__assert_fail@plt+0x200>
   12858:	mov	r1, sl
   1285c:	mov	r0, r9
   12860:	bl	18550 <__assert_fail@plt+0x5db4>
   12864:	ldr	r3, [r8, #44]	; 0x2c
   12868:	tst	r3, #2
   1286c:	ldrne	r2, [pc, #372]	; 129e8 <__assert_fail@plt+0x24c>
   12870:	strne	r2, [r8, #52]	; 0x34
   12874:	tst	r3, #128	; 0x80
   12878:	mov	r4, r0
   1287c:	bne	1292c <__assert_fail@plt+0x190>
   12880:	mov	r2, r4
   12884:	mov	r1, sl
   12888:	mov	r0, r9
   1288c:	bl	16fa4 <__assert_fail@plt+0x4808>
   12890:	sub	r8, r9, r4
   12894:	cmp	r8, #0
   12898:	subgt	r4, r4, #-1073741823	; 0xc0000001
   1289c:	movgt	fp, #1
   128a0:	addgt	r4, sl, r4, lsl #2
   128a4:	str	r0, [sp, #4]
   128a8:	bgt	128e0 <__assert_fail@plt+0x144>
   128ac:	b	12954 <__assert_fail@plt+0x1b8>
   128b0:	ldr	sl, [r4]
   128b4:	mov	r0, sl
   128b8:	bl	1249c <strlen@plt>
   128bc:	str	r0, [r5, #20]
   128c0:	mov	r0, sl
   128c4:	bl	12bf4 <__assert_fail@plt+0x458>
   128c8:	cmp	r0, #0
   128cc:	beq	12908 <__assert_fail@plt+0x16c>
   128d0:	add	r6, r6, #1
   128d4:	cmp	r8, r6
   128d8:	mov	fp, r9
   128dc:	beq	128fc <__assert_fail@plt+0x160>
   128e0:	mov	r1, #1
   128e4:	ldr	r0, [r4, #4]!
   128e8:	bl	184cc <__assert_fail@plt+0x5d30>
   128ec:	subs	r9, r0, #0
   128f0:	beq	128b0 <__assert_fail@plt+0x114>
   128f4:	cmp	fp, #0
   128f8:	bne	12954 <__assert_fail@plt+0x1b8>
   128fc:	ldr	r0, [sp, #4]
   12900:	bl	14d38 <__assert_fail@plt+0x259c>
   12904:	bl	17f50 <__assert_fail@plt+0x57b4>
   12908:	ldr	r2, [sp, #12]
   1290c:	ldr	r3, [r7]
   12910:	ldr	r0, [r5, #28]
   12914:	cmp	r2, r3
   12918:	bne	12998 <__assert_fail@plt+0x1fc>
   1291c:	add	sp, sp, #20
   12920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12924:	bl	1ffb4 <__assert_fail@plt+0xd818>
   12928:	b	12804 <__assert_fail@plt+0x68>
   1292c:	ldr	r3, [pc, #184]	; 129ec <__assert_fail@plt+0x250>
   12930:	ldr	r0, [pc, #184]	; 129f0 <__assert_fail@plt+0x254>
   12934:	ldr	r8, [r3]
   12938:	bl	12220 <ctime@plt>
   1293c:	ldr	r2, [pc, #176]	; 129f4 <__assert_fail@plt+0x258>
   12940:	mov	r1, #1
   12944:	mov	r3, r0
   12948:	mov	r0, r8
   1294c:	bl	12580 <__fprintf_chk@plt>
   12950:	b	12880 <__assert_fail@plt+0xe4>
   12954:	mov	r3, #46	; 0x2e
   12958:	add	r0, sp, #8
   1295c:	strh	r3, [sp, #8]
   12960:	bl	12bf4 <__assert_fail@plt+0x458>
   12964:	cmp	r0, #0
   12968:	beq	12908 <__assert_fail@plt+0x16c>
   1296c:	b	128fc <__assert_fail@plt+0x160>
   12970:	bl	124d8 <__errno_location@plt>
   12974:	mov	r2, #5
   12978:	ldr	r1, [pc, #120]	; 129f8 <__assert_fail@plt+0x25c>
   1297c:	ldr	r5, [r0]
   12980:	mov	r0, r4
   12984:	bl	1222c <dcgettext@plt>
   12988:	mov	r1, r5
   1298c:	mov	r2, r0
   12990:	mov	r0, #1
   12994:	bl	12388 <error@plt>
   12998:	bl	12244 <__stack_chk_fail@plt>
   1299c:	bl	124d8 <__errno_location@plt>
   129a0:	mov	r2, #5
   129a4:	ldr	r1, [pc, #80]	; 129fc <__assert_fail@plt+0x260>
   129a8:	ldr	r4, [r0]
   129ac:	mov	r0, #0
   129b0:	bl	1222c <dcgettext@plt>
   129b4:	mov	r1, r4
   129b8:	mov	r2, r0
   129bc:	mov	r0, #1
   129c0:	bl	12388 <error@plt>
   129c4:	andeq	fp, r5, r0, ror #24
   129c8:	andeq	ip, r5, r0, lsr lr
   129cc:	andeq	r4, r4, ip, ror #6
   129d0:	andeq	r4, r4, r4, ror r3
   129d4:	andeq	ip, r5, ip, asr lr
   129d8:	andeq	r8, r4, r0, lsr r6
   129dc:	andeq	r4, r4, r4, lsr #7
   129e0:	andeq	r8, r4, r8, asr #5
   129e4:	andeq	r1, r2, r8, asr r5
   129e8:	muleq	r1, r4, r2
   129ec:	andeq	ip, r5, r8, lsr r5
   129f0:	andeq	ip, r5, r8, ror lr
   129f4:	ldrdeq	r4, [r4], -ip
   129f8:	andeq	r4, r4, r8, ror r3
   129fc:			; <UNDEFINED> instruction: 0x000443b8
   12a00:	mov	fp, #0
   12a04:	mov	lr, #0
   12a08:	pop	{r1}		; (ldr r1, [sp], #4)
   12a0c:	mov	r2, sp
   12a10:	push	{r2}		; (str r2, [sp, #-4]!)
   12a14:	push	{r0}		; (str r0, [sp, #-4]!)
   12a18:	ldr	ip, [pc, #16]	; 12a30 <__assert_fail@plt+0x294>
   12a1c:	push	{ip}		; (str ip, [sp, #-4]!)
   12a20:	ldr	r0, [pc, #12]	; 12a34 <__assert_fail@plt+0x298>
   12a24:	ldr	r3, [pc, #12]	; 12a38 <__assert_fail@plt+0x29c>
   12a28:	bl	123e8 <__libc_start_main@plt>
   12a2c:	bl	1273c <abort@plt>
   12a30:	andeq	r3, r4, r0, ror #31
   12a34:	andeq	r2, r1, r8, lsr #15
   12a38:	andeq	r3, r4, r0, lsl #31
   12a3c:	ldr	r3, [pc, #20]	; 12a58 <__assert_fail@plt+0x2bc>
   12a40:	ldr	r2, [pc, #20]	; 12a5c <__assert_fail@plt+0x2c0>
   12a44:	add	r3, pc, r3
   12a48:	ldr	r2, [r3, r2]
   12a4c:	cmp	r2, #0
   12a50:	bxeq	lr
   12a54:	b	12454 <__gmon_start__@plt>
   12a58:	andeq	r9, r4, r8, lsr #6
   12a5c:	andeq	r0, r0, r4, lsl #5
   12a60:	ldr	r0, [pc, #24]	; 12a80 <__assert_fail@plt+0x2e4>
   12a64:	ldr	r3, [pc, #24]	; 12a84 <__assert_fail@plt+0x2e8>
   12a68:	cmp	r3, r0
   12a6c:	bxeq	lr
   12a70:	ldr	r3, [pc, #16]	; 12a88 <__assert_fail@plt+0x2ec>
   12a74:	cmp	r3, #0
   12a78:	bxeq	lr
   12a7c:	bx	r3
   12a80:	andeq	ip, r5, r8, lsr #10
   12a84:	andeq	ip, r5, r8, lsr #10
   12a88:	andeq	r0, r0, r0
   12a8c:	ldr	r0, [pc, #36]	; 12ab8 <__assert_fail@plt+0x31c>
   12a90:	ldr	r1, [pc, #36]	; 12abc <__assert_fail@plt+0x320>
   12a94:	sub	r1, r1, r0
   12a98:	asr	r1, r1, #2
   12a9c:	add	r1, r1, r1, lsr #31
   12aa0:	asrs	r1, r1, #1
   12aa4:	bxeq	lr
   12aa8:	ldr	r3, [pc, #16]	; 12ac0 <__assert_fail@plt+0x324>
   12aac:	cmp	r3, #0
   12ab0:	bxeq	lr
   12ab4:	bx	r3
   12ab8:	andeq	ip, r5, r8, lsr #10
   12abc:	andeq	ip, r5, r8, lsr #10
   12ac0:	andeq	r0, r0, r0
   12ac4:	push	{r4, lr}
   12ac8:	ldr	r4, [pc, #24]	; 12ae8 <__assert_fail@plt+0x34c>
   12acc:	ldrb	r3, [r4]
   12ad0:	cmp	r3, #0
   12ad4:	popne	{r4, pc}
   12ad8:	bl	12a60 <__assert_fail@plt+0x2c4>
   12adc:	mov	r3, #1
   12ae0:	strb	r3, [r4]
   12ae4:	pop	{r4, pc}
   12ae8:	andeq	ip, r5, r8, asr #10
   12aec:	b	12a8c <__assert_fail@plt+0x2f0>
   12af0:	push	{r4, lr}
   12af4:	sub	sp, sp, #112	; 0x70
   12af8:	ldr	r4, [pc, #76]	; 12b4c <__assert_fail@plt+0x3b0>
   12afc:	ldr	r3, [pc, #76]	; 12b50 <__assert_fail@plt+0x3b4>
   12b00:	mov	r1, sp
   12b04:	ldr	r2, [r4]
   12b08:	ldr	r3, [r3, #52]	; 0x34
   12b0c:	str	r2, [sp, #108]	; 0x6c
   12b10:	blx	r3
   12b14:	cmp	r0, #0
   12b18:	beq	12b30 <__assert_fail@plt+0x394>
   12b1c:	bl	124d8 <__errno_location@plt>
   12b20:	ldr	r0, [r0]
   12b24:	sub	r0, r0, #40	; 0x28
   12b28:	clz	r0, r0
   12b2c:	lsr	r0, r0, #5
   12b30:	ldr	r2, [sp, #108]	; 0x6c
   12b34:	ldr	r3, [r4]
   12b38:	cmp	r2, r3
   12b3c:	bne	12b48 <__assert_fail@plt+0x3ac>
   12b40:	add	sp, sp, #112	; 0x70
   12b44:	pop	{r4, pc}
   12b48:	bl	12244 <__stack_chk_fail@plt>
   12b4c:	andeq	fp, r5, r0, ror #24
   12b50:	andeq	ip, r5, ip, asr lr
   12b54:	push	{r4, lr}
   12b58:	ldr	r4, [pc, #88]	; 12bb8 <__assert_fail@plt+0x41c>
   12b5c:	ldr	r2, [r4]
   12b60:	tst	r2, #512	; 0x200
   12b64:	popeq	{r4, pc}
   12b68:	cmn	r0, #100	; 0x64
   12b6c:	cmpne	r0, #0
   12b70:	blt	12ba4 <__assert_fail@plt+0x408>
   12b74:	ldr	r1, [r4, #4]
   12b78:	ldr	r2, [pc, #60]	; 12bbc <__assert_fail@plt+0x420>
   12b7c:	cmp	r1, #0
   12b80:	str	r0, [r2, #16]
   12b84:	popge	{r4, pc}
   12b88:	cmn	r0, #100	; 0x64
   12b8c:	beq	12b9c <__assert_fail@plt+0x400>
   12b90:	bl	21528 <__assert_fail@plt+0xed8c>
   12b94:	str	r0, [r4, #4]
   12b98:	pop	{r4, pc}
   12b9c:	str	r0, [r4, #4]
   12ba0:	pop	{r4, pc}
   12ba4:	ldr	r3, [pc, #20]	; 12bc0 <__assert_fail@plt+0x424>
   12ba8:	mov	r2, #104	; 0x68
   12bac:	ldr	r1, [pc, #16]	; 12bc4 <__assert_fail@plt+0x428>
   12bb0:	ldr	r0, [pc, #16]	; 12bc8 <__assert_fail@plt+0x42c>
   12bb4:	bl	1279c <__assert_fail@plt>
   12bb8:	andeq	ip, r5, r8
   12bbc:	andeq	ip, r5, r0, lsr lr
   12bc0:	andeq	r4, r4, r8
   12bc4:	andeq	r4, r4, r0, rrx
   12bc8:	andeq	r4, r4, ip, rrx
   12bcc:	push	{r4, lr}
   12bd0:	ldr	r4, [pc, #24]	; 12bf0 <__assert_fail@plt+0x454>
   12bd4:	ldr	r0, [r4, #4]
   12bd8:	cmp	r0, #0
   12bdc:	poplt	{r4, pc}
   12be0:	bl	12748 <close@plt>
   12be4:	mvn	r3, #0
   12be8:	str	r3, [r4, #4]
   12bec:	pop	{r4, pc}
   12bf0:	andeq	ip, r5, r8
   12bf4:	ldr	r3, [pc, #2332]	; 13518 <__assert_fail@plt+0xd7c>
   12bf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bfc:	sub	sp, sp, #180	; 0xb4
   12c00:	ldr	r3, [r3]
   12c04:	mov	r4, r0
   12c08:	str	r3, [sp, #172]	; 0xac
   12c0c:	str	r0, [sp, #44]	; 0x2c
   12c10:	bl	1249c <strlen@plt>
   12c14:	ldr	fp, [pc, #2304]	; 1351c <__assert_fail@plt+0xd80>
   12c18:	ldr	sl, [pc, #2304]	; 13520 <__assert_fail@plt+0xd84>
   12c1c:	ldr	r8, [pc, #2304]	; 13524 <__assert_fail@plt+0xd88>
   12c20:	str	r0, [fp, #20]
   12c24:	mvn	r0, #99	; 0x63
   12c28:	bl	12b54 <__assert_fail@plt+0x3b8>
   12c2c:	ldr	r3, [sl, #48]	; 0x30
   12c30:	mov	r2, #0
   12c34:	cmp	r3, #1
   12c38:	str	r4, [sp, #164]	; 0xa4
   12c3c:	str	r2, [sp, #168]	; 0xa8
   12c40:	ldr	r1, [r8]
   12c44:	beq	13400 <__assert_fail@plt+0xc64>
   12c48:	cmp	r3, r2
   12c4c:	beq	133f4 <__assert_fail@plt+0xc58>
   12c50:	cmp	r3, #2
   12c54:	orreq	r1, r1, #17
   12c58:	streq	r1, [r8]
   12c5c:	ldrb	r3, [sl, #13]
   12c60:	mov	r2, #0
   12c64:	add	r0, sp, #164	; 0xa4
   12c68:	cmp	r3, #0
   12c6c:	orrne	r1, r1, #64	; 0x40
   12c70:	strne	r1, [r8]
   12c74:	bl	30e04 <fts_open@@Base>
   12c78:	mov	r4, r0
   12c7c:	str	r0, [sp, #24]
   12c80:	bl	124d8 <__errno_location@plt>
   12c84:	cmp	r4, #0
   12c88:	movne	r7, #-2147483648	; 0x80000000
   12c8c:	str	r0, [sp, #32]
   12c90:	beq	13494 <__assert_fail@plt+0xcf8>
   12c94:	ldr	r3, [sp, #32]
   12c98:	mov	r5, #0
   12c9c:	ldr	r0, [sp, #24]
   12ca0:	str	r5, [r3]
   12ca4:	bl	31320 <fts_read@@Base>
   12ca8:	subs	r9, r0, #0
   12cac:	beq	13100 <__assert_fail@plt+0x964>
   12cb0:	ldrb	r6, [fp, #32]
   12cb4:	ldr	r3, [r9, #48]	; 0x30
   12cb8:	ldr	r2, [sl, #44]	; 0x2c
   12cbc:	cmp	r6, #0
   12cc0:	str	r3, [sp, #28]
   12cc4:	beq	12ce8 <__assert_fail@plt+0x54c>
   12cc8:	cmp	r7, r3
   12ccc:	beq	12ce8 <__assert_fail@plt+0x54c>
   12cd0:	tst	r2, #32
   12cd4:	bne	13254 <__assert_fail@plt+0xab8>
   12cd8:	bl	17e74 <__assert_fail@plt+0x56d8>
   12cdc:	ldr	r2, [sl, #44]	; 0x2c
   12ce0:	ldr	r3, [r9, #48]	; 0x30
   12ce4:	str	r3, [sp, #28]
   12ce8:	ldr	r3, [r9, #88]	; 0x58
   12cec:	mov	r0, #0
   12cf0:	str	r3, [fp, #8]
   12cf4:	subs	r3, r3, r0
   12cf8:	movne	r3, #1
   12cfc:	tst	r2, #4
   12d00:	strb	r3, [fp, #5]
   12d04:	strb	r0, [fp, #40]	; 0x28
   12d08:	strb	r0, [fp, #4]
   12d0c:	bne	12fc8 <__assert_fail@plt+0x82c>
   12d10:	ldrh	r3, [r9, #60]	; 0x3c
   12d14:	cmp	r3, #6
   12d18:	beq	12d3c <__assert_fail@plt+0x5a0>
   12d1c:	ldr	r2, [r9, #48]	; 0x30
   12d20:	ldr	r1, [r8, #8]
   12d24:	clz	r3, r2
   12d28:	lsr	r3, r3, #5
   12d2c:	cmp	r2, r1
   12d30:	orrgt	r3, r3, #1
   12d34:	cmp	r3, #0
   12d38:	beq	12d4c <__assert_fail@plt+0x5b0>
   12d3c:	ldr	r3, [r8]
   12d40:	tst	r3, #512	; 0x200
   12d44:	beq	12d4c <__assert_fail@plt+0x5b0>
   12d48:	bl	12bcc <__assert_fail@plt+0x430>
   12d4c:	ldr	r3, [sp, #24]
   12d50:	ldr	r0, [r3, #32]
   12d54:	bl	12b54 <__assert_fail@plt+0x3b8>
   12d58:	ldrh	r1, [r9, #60]	; 0x3c
   12d5c:	ldrd	r2, [r9, #168]	; 0xa8
   12d60:	ldr	r0, [r9, #48]	; 0x30
   12d64:	cmp	r1, #7
   12d68:	strd	r2, [sp, #152]	; 0x98
   12d6c:	str	r0, [r8, #8]
   12d70:	beq	1307c <__assert_fail@plt+0x8e0>
   12d74:	cmp	r1, #4
   12d78:	beq	1305c <__assert_fail@plt+0x8c0>
   12d7c:	cmp	r1, #2
   12d80:	beq	131d0 <__assert_fail@plt+0xa34>
   12d84:	cmp	r1, #13
   12d88:	beq	130e0 <__assert_fail@plt+0x944>
   12d8c:	cmp	r1, #10
   12d90:	beq	130b8 <__assert_fail@plt+0x91c>
   12d94:	sub	r3, r1, #10
   12d98:	cmp	r3, #1
   12d9c:	bls	12ed4 <__assert_fail@plt+0x738>
   12da0:	add	r3, sp, #56	; 0x38
   12da4:	ldr	ip, [pc, #1916]	; 13528 <__assert_fail@plt+0xd8c>
   12da8:	mov	r0, r3
   12dac:	mov	r2, #104	; 0x68
   12db0:	add	r1, r9, #72	; 0x48
   12db4:	strh	ip, [fp, #4]
   12db8:	bl	121a8 <memcpy@plt>
   12dbc:	ldr	r4, [sp, #72]	; 0x48
   12dc0:	cmp	r4, #0
   12dc4:	str	r4, [sp, #52]	; 0x34
   12dc8:	str	r4, [fp, #8]
   12dcc:	mov	r3, r0
   12dd0:	beq	13140 <__assert_fail@plt+0x9a4>
   12dd4:	ldr	r2, [r9, #48]	; 0x30
   12dd8:	str	r2, [fp]
   12ddc:	mov	r2, #0
   12de0:	ldr	r1, [r9, #28]
   12de4:	add	r0, sp, #52	; 0x34
   12de8:	str	r2, [sp]
   12dec:	add	r2, r9, #176	; 0xb0
   12df0:	bl	1838c <__assert_fail@plt+0x5bf0>
   12df4:	cmp	r0, #0
   12df8:	beq	12ecc <__assert_fail@plt+0x730>
   12dfc:	ldr	r3, [sp, #52]	; 0x34
   12e00:	ldrh	r1, [r9, #60]	; 0x3c
   12e04:	and	r3, r3, #61440	; 0xf000
   12e08:	cmp	r3, #16384	; 0x4000
   12e0c:	bne	12f0c <__assert_fail@plt+0x770>
   12e10:	cmp	r1, #11
   12e14:	beq	1339c <__assert_fail@plt+0xc00>
   12e18:	ldr	r3, [sl, #4]
   12e1c:	mov	r7, #1
   12e20:	cmp	r3, #0
   12e24:	blt	12e34 <__assert_fail@plt+0x698>
   12e28:	ldr	r2, [r9, #48]	; 0x30
   12e2c:	cmp	r2, r3
   12e30:	bge	131a4 <__assert_fail@plt+0xa08>
   12e34:	mov	r4, #0
   12e38:	ldr	r3, [sl, #44]	; 0x2c
   12e3c:	cmp	r1, #1
   12e40:	and	r3, r3, #4
   12e44:	beq	130a0 <__assert_fail@plt+0x904>
   12e48:	cmp	r1, #6
   12e4c:	bne	12e5c <__assert_fail@plt+0x6c0>
   12e50:	ldrb	r2, [sl]
   12e54:	cmp	r2, #0
   12e58:	bne	1308c <__assert_fail@plt+0x8f0>
   12e5c:	ldr	r0, [r9, #48]	; 0x30
   12e60:	ldr	r2, [sl, #8]
   12e64:	cmp	r0, r2
   12e68:	blt	12f50 <__assert_fail@plt+0x7b4>
   12e6c:	cmp	r3, #0
   12e70:	bne	12f5c <__assert_fail@plt+0x7c0>
   12e74:	cmp	r4, #0
   12e78:	bne	12ec4 <__assert_fail@plt+0x728>
   12e7c:	ldr	r3, [sp, #24]
   12e80:	sub	r1, r1, #10
   12e84:	ldr	r2, [r9, #24]
   12e88:	ldr	r3, [r3, #32]
   12e8c:	cmp	r1, #1
   12e90:	movls	r1, #0
   12e94:	movhi	r1, #1
   12e98:	strd	r2, [fp, #12]
   12e9c:	strb	r1, [fp, #4]
   12ea0:	bl	15e48 <__assert_fail@plt+0x36ac>
   12ea4:	add	r1, sp, #56	; 0x38
   12ea8:	mov	r2, r0
   12eac:	ldr	r0, [r9, #28]
   12eb0:	bl	18b50 <__assert_fail@plt+0x63b4>
   12eb4:	ldrb	r3, [fp, #24]
   12eb8:	cmp	r3, #0
   12ebc:	bne	13368 <__assert_fail@plt+0xbcc>
   12ec0:	ldrh	r1, [r9, #60]	; 0x3c
   12ec4:	cmp	r1, #6
   12ec8:	beq	13094 <__assert_fail@plt+0x8f8>
   12ecc:	ldr	r7, [sp, #28]
   12ed0:	b	12c94 <__assert_fail@plt+0x4f8>
   12ed4:	ldrb	r3, [fp, #4]
   12ed8:	cmp	r3, #0
   12edc:	bne	134fc <__assert_fail@plt+0xd60>
   12ee0:	cmp	r1, #11
   12ee4:	ldr	r3, [fp, #8]
   12ee8:	beq	12ef4 <__assert_fail@plt+0x758>
   12eec:	cmp	r3, #0
   12ef0:	bne	134e4 <__assert_fail@plt+0xd48>
   12ef4:	str	r3, [sp, #52]	; 0x34
   12ef8:	ldr	r2, [r9, #48]	; 0x30
   12efc:	cmp	r3, #0
   12f00:	str	r2, [fp]
   12f04:	bne	13510 <__assert_fail@plt+0xd74>
   12f08:	ldrh	r1, [r9, #60]	; 0x3c
   12f0c:	sub	r4, r1, #1
   12f10:	cmp	r1, #6
   12f14:	cmpne	r4, #1
   12f18:	movls	r4, #1
   12f1c:	movhi	r4, #0
   12f20:	bls	12e10 <__assert_fail@plt+0x674>
   12f24:	ldr	r3, [sl, #4]
   12f28:	cmp	r3, #0
   12f2c:	movge	r7, r4
   12f30:	bge	12e28 <__assert_fail@plt+0x68c>
   12f34:	ldr	r0, [r9, #48]	; 0x30
   12f38:	ldr	r2, [sl, #8]
   12f3c:	ldr	r3, [sl, #44]	; 0x2c
   12f40:	cmp	r0, r2
   12f44:	mov	r7, r4
   12f48:	and	r3, r3, #4
   12f4c:	bge	12e6c <__assert_fail@plt+0x6d0>
   12f50:	cmp	r3, #0
   12f54:	beq	12ec4 <__assert_fail@plt+0x728>
   12f58:	mov	r4, #1
   12f5c:	ldr	r3, [pc, #1480]	; 1352c <__assert_fail@plt+0xd90>
   12f60:	ldr	r2, [r9, #28]
   12f64:	ldr	r1, [sl, #72]	; 0x48
   12f68:	mov	r0, #0
   12f6c:	ldr	r5, [r3]
   12f70:	bl	2d52c <__assert_fail@plt+0x1ad90>
   12f74:	ldrh	r3, [r9, #60]	; 0x3c
   12f78:	sub	r2, r3, #1
   12f7c:	cmp	r2, #13
   12f80:	mov	r6, r0
   12f84:	bhi	1337c <__assert_fail@plt+0xbe0>
   12f88:	ldr	r3, [pc, #1440]	; 13530 <__assert_fail@plt+0xd94>
   12f8c:	add	r3, r3, r2, lsl #2
   12f90:	ldr	r3, [r3, #12]
   12f94:	ldrb	r1, [fp, #5]
   12f98:	ldrb	r2, [fp, #4]
   12f9c:	stm	sp, {r3, r7}
   12fa0:	str	r1, [sp, #16]
   12fa4:	str	r2, [sp, #12]
   12fa8:	mov	r1, #1
   12fac:	str	r4, [sp, #8]
   12fb0:	mov	r3, r6
   12fb4:	mov	r0, r5
   12fb8:	ldr	r2, [pc, #1396]	; 13534 <__assert_fail@plt+0xd98>
   12fbc:	bl	12580 <__fprintf_chk@plt>
   12fc0:	ldrh	r1, [r9, #60]	; 0x3c
   12fc4:	b	12e74 <__assert_fail@plt+0x6d8>
   12fc8:	ldr	r3, [pc, #1372]	; 1352c <__assert_fail@plt+0xd90>
   12fcc:	ldr	r2, [r9, #28]
   12fd0:	ldr	r1, [sl, #72]	; 0x48
   12fd4:	ldr	r4, [r3]
   12fd8:	bl	2d52c <__assert_fail@plt+0x1ad90>
   12fdc:	ldrh	r3, [r9, #60]	; 0x3c
   12fe0:	sub	r2, r3, #1
   12fe4:	cmp	r2, #13
   12fe8:	mov	r5, r0
   12fec:	bhi	13180 <__assert_fail@plt+0x9e4>
   12ff0:	ldr	r3, [pc, #1336]	; 13530 <__assert_fail@plt+0xd94>
   12ff4:	add	r3, r3, r2, lsl #2
   12ff8:	ldr	r3, [r3, #12]
   12ffc:	str	r3, [sp, #40]	; 0x28
   13000:	ldr	r2, [r9, #28]
   13004:	ldr	r1, [sl, #72]	; 0x48
   13008:	mov	r0, #1
   1300c:	ldr	r6, [r9, #48]	; 0x30
   13010:	ldr	r7, [r8, #8]
   13014:	bl	2d52c <__assert_fail@plt+0x1ad90>
   13018:	ldr	r2, [r9, #24]
   1301c:	ldr	r1, [sl, #72]	; 0x48
   13020:	str	r0, [sp, #36]	; 0x24
   13024:	mov	r0, #2
   13028:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1302c:	ldr	r3, [sp, #36]	; 0x24
   13030:	strd	r6, [sp, #4]
   13034:	str	r3, [sp, #12]
   13038:	ldr	r3, [sp, #40]	; 0x28
   1303c:	ldr	r2, [pc, #1268]	; 13538 <__assert_fail@plt+0xd9c>
   13040:	str	r3, [sp]
   13044:	mov	r1, #1
   13048:	mov	r3, r5
   1304c:	str	r0, [sp, #16]
   13050:	mov	r0, r4
   13054:	bl	12580 <__fprintf_chk@plt>
   13058:	b	12d10 <__assert_fail@plt+0x574>
   1305c:	ldr	r1, [r9, #28]
   13060:	ldr	r0, [r9, #32]
   13064:	bl	18c20 <__assert_fail@plt+0x6484>
   13068:	ldrb	r3, [sl]
   1306c:	cmp	r3, #0
   13070:	bne	12ecc <__assert_fail@plt+0x730>
   13074:	ldrh	r1, [r9, #60]	; 0x3c
   13078:	b	12d94 <__assert_fail@plt+0x5f8>
   1307c:	ldr	r1, [r9, #28]
   13080:	ldr	r0, [r9, #32]
   13084:	bl	18c20 <__assert_fail@plt+0x6484>
   13088:	b	12ecc <__assert_fail@plt+0x730>
   1308c:	cmp	r3, #0
   13090:	bne	12f58 <__assert_fail@plt+0x7bc>
   13094:	mov	r3, #0
   13098:	strb	r3, [fp, #24]
   1309c:	b	12ecc <__assert_fail@plt+0x730>
   130a0:	ldrb	r2, [sl]
   130a4:	cmp	r2, #0
   130a8:	bne	12e5c <__assert_fail@plt+0x6c0>
   130ac:	cmp	r3, #0
   130b0:	beq	12ecc <__assert_fail@plt+0x730>
   130b4:	b	12f58 <__assert_fail@plt+0x7bc>
   130b8:	cmp	r0, #0
   130bc:	beq	1307c <__assert_fail@plt+0x8e0>
   130c0:	ldr	r0, [r9, #24]
   130c4:	bl	12af0 <__assert_fail@plt+0x354>
   130c8:	ldr	r1, [r9, #28]
   130cc:	cmp	r0, #0
   130d0:	bne	1335c <__assert_fail@plt+0xbc0>
   130d4:	ldr	r0, [r9, #32]
   130d8:	bl	18c20 <__assert_fail@plt+0x6484>
   130dc:	b	13074 <__assert_fail@plt+0x8d8>
   130e0:	ldr	r0, [r9, #24]
   130e4:	bl	12af0 <__assert_fail@plt+0x354>
   130e8:	cmp	r0, #0
   130ec:	beq	13074 <__assert_fail@plt+0x8d8>
   130f0:	ldr	r1, [r9, #28]
   130f4:	mov	r0, #40	; 0x28
   130f8:	bl	18c20 <__assert_fail@plt+0x6484>
   130fc:	b	12ecc <__assert_fail@plt+0x730>
   13100:	ldr	r3, [sp, #32]
   13104:	ldr	r4, [r3]
   13108:	cmp	r4, r5
   1310c:	bne	133c8 <__assert_fail@plt+0xc2c>
   13110:	ldr	r0, [sp, #24]
   13114:	bl	311a0 <fts_close@@Base>
   13118:	cmp	r0, #0
   1311c:	moveq	r0, #1
   13120:	bne	13458 <__assert_fail@plt+0xcbc>
   13124:	ldr	r3, [pc, #1004]	; 13518 <__assert_fail@plt+0xd7c>
   13128:	ldr	r2, [sp, #172]	; 0xac
   1312c:	ldr	r3, [r3]
   13130:	cmp	r2, r3
   13134:	bne	134f8 <__assert_fail@plt+0xd5c>
   13138:	add	sp, sp, #180	; 0xb4
   1313c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13140:	mov	r2, #5
   13144:	ldr	r1, [pc, #1008]	; 1353c <__assert_fail@plt+0xda0>
   13148:	mov	r0, r4
   1314c:	bl	1222c <dcgettext@plt>
   13150:	ldr	r2, [r9, #28]
   13154:	ldr	r1, [sl, #72]	; 0x48
   13158:	mov	r5, r0
   1315c:	mov	r0, r4
   13160:	bl	2d52c <__assert_fail@plt+0x1ad90>
   13164:	mov	r2, r5
   13168:	mov	r1, r4
   1316c:	mov	r3, r0
   13170:	mov	r0, r4
   13174:	bl	12388 <error@plt>
   13178:	ldr	r3, [sp, #52]	; 0x34
   1317c:	b	12ef8 <__assert_fail@plt+0x75c>
   13180:	str	r3, [sp]
   13184:	mov	r2, #14
   13188:	ldr	r3, [pc, #944]	; 13540 <__assert_fail@plt+0xda4>
   1318c:	mov	r1, #1
   13190:	ldr	r0, [pc, #940]	; 13544 <__assert_fail@plt+0xda8>
   13194:	bl	124f0 <__sprintf_chk@plt>
   13198:	ldr	r3, [pc, #932]	; 13544 <__assert_fail@plt+0xda8>
   1319c:	str	r3, [sp, #40]	; 0x28
   131a0:	b	13000 <__assert_fail@plt+0x864>
   131a4:	mov	r1, r9
   131a8:	mov	r2, #4
   131ac:	ldr	r0, [sp, #24]
   131b0:	bl	31a68 <fts_set@@Base>
   131b4:	ldr	r4, [r9, #48]	; 0x30
   131b8:	ldr	r3, [sl, #4]
   131bc:	ldrh	r1, [r9, #60]	; 0x3c
   131c0:	cmp	r4, r3
   131c4:	movle	r4, #0
   131c8:	movgt	r4, #1
   131cc:	b	12e38 <__assert_fail@plt+0x69c>
   131d0:	ldr	r3, [r9, #88]	; 0x58
   131d4:	mov	r2, #5
   131d8:	and	r3, r3, #61440	; 0xf000
   131dc:	cmp	r3, #40960	; 0xa000
   131e0:	beq	1340c <__assert_fail@plt+0xc70>
   131e4:	ldr	r1, [pc, #860]	; 13548 <__assert_fail@plt+0xdac>
   131e8:	mov	r0, #0
   131ec:	bl	1222c <dcgettext@plt>
   131f0:	ldr	r1, [r9, #28]
   131f4:	mov	r7, r0
   131f8:	mov	r0, #0
   131fc:	bl	18bf4 <__assert_fail@plt+0x6458>
   13200:	ldr	r3, [r9]
   13204:	ldr	r1, [sl, #72]	; 0x48
   13208:	ldr	r4, [r3, #40]	; 0x28
   1320c:	cmp	r4, #0
   13210:	mov	r6, r0
   13214:	beq	13448 <__assert_fail@plt+0xcac>
   13218:	ldr	r5, [r3, #28]
   1321c:	mov	r3, #0
   13220:	mov	r2, r5
   13224:	ldrb	r9, [r5, r4]
   13228:	mov	r0, #1
   1322c:	strb	r3, [r5, r4]
   13230:	bl	2d52c <__assert_fail@plt+0x1ad90>
   13234:	strb	r9, [r5, r4]
   13238:	mov	r1, #0
   1323c:	str	r0, [sp]
   13240:	mov	r3, r6
   13244:	mov	r2, r7
   13248:	mov	r0, r1
   1324c:	bl	12388 <error@plt>
   13250:	b	1343c <__assert_fail@plt+0xca0>
   13254:	ldr	r3, [pc, #720]	; 1352c <__assert_fail@plt+0xd90>
   13258:	ldr	r7, [r3]
   1325c:	bl	15e48 <__assert_fail@plt+0x36ac>
   13260:	mov	r3, r7
   13264:	mov	r2, #21
   13268:	mov	r1, #1
   1326c:	mov	r4, r0
   13270:	ldr	r0, [pc, #724]	; 1354c <__assert_fail@plt+0xdb0>
   13274:	bl	122f8 <fwrite@plt>
   13278:	cmp	r4, #0
   1327c:	bne	13324 <__assert_fail@plt+0xb88>
   13280:	mov	r3, r7
   13284:	mov	r2, #6
   13288:	mov	r1, #1
   1328c:	ldr	r0, [pc, #700]	; 13550 <__assert_fail@plt+0xdb4>
   13290:	bl	122f8 <fwrite@plt>
   13294:	b	12cd8 <__assert_fail@plt+0x53c>
   13298:	ldr	r3, [pc, #692]	; 13554 <__assert_fail@plt+0xdb8>
   1329c:	ldr	r2, [pc, #692]	; 13558 <__assert_fail@plt+0xdbc>
   132a0:	mov	r1, #1
   132a4:	mov	r0, r7
   132a8:	bl	12580 <__fprintf_chk@plt>
   132ac:	ldrb	r3, [r4, #40]	; 0x28
   132b0:	cmp	r3, #0
   132b4:	bne	133b0 <__assert_fail@plt+0xc14>
   132b8:	ldr	r3, [r4, #88]	; 0x58
   132bc:	mov	r5, #0
   132c0:	ldr	r2, [pc, #660]	; 1355c <__assert_fail@plt+0xdc0>
   132c4:	stm	sp, {r3, r5}
   132c8:	mov	r1, #1
   132cc:	mov	r0, r7
   132d0:	bl	12580 <__fprintf_chk@plt>
   132d4:	ldr	r3, [r4, #88]	; 0x58
   132d8:	cmp	r3, r5
   132dc:	beq	13308 <__assert_fail@plt+0xb6c>
   132e0:	ldr	r3, [r4, #92]	; 0x5c
   132e4:	ldr	r2, [pc, #620]	; 13558 <__assert_fail@plt+0xdbc>
   132e8:	mov	r1, #1
   132ec:	ldr	r3, [r3, r5, lsl #2]
   132f0:	mov	r0, r7
   132f4:	bl	12580 <__fprintf_chk@plt>
   132f8:	ldr	r3, [r4, #88]	; 0x58
   132fc:	add	r5, r5, #1
   13300:	cmp	r5, r3
   13304:	bcc	132e0 <__assert_fail@plt+0xb44>
   13308:	mov	r1, r7
   1330c:	mov	r0, #10
   13310:	bl	12634 <fputc@plt>
   13314:	ldr	r4, [r4, #152]	; 0x98
   13318:	mov	r5, r6
   1331c:	cmp	r4, #0
   13320:	beq	13350 <__assert_fail@plt+0xbb4>
   13324:	ldr	r3, [r4]
   13328:	ldr	r2, [pc, #560]	; 13560 <__assert_fail@plt+0xdc4>
   1332c:	cmp	r3, r2
   13330:	beq	13298 <__assert_fail@plt+0xafc>
   13334:	ldr	r2, [pc, #552]	; 13564 <__assert_fail@plt+0xdc8>
   13338:	cmp	r3, r2
   1333c:	ldreq	r3, [pc, #548]	; 13568 <__assert_fail@plt+0xdcc>
   13340:	beq	1329c <__assert_fail@plt+0xb00>
   13344:	ldr	r4, [r4, #152]	; 0x98
   13348:	cmp	r4, #0
   1334c:	bne	13324 <__assert_fail@plt+0xb88>
   13350:	cmp	r5, #0
   13354:	bne	12cd8 <__assert_fail@plt+0x53c>
   13358:	b	13280 <__assert_fail@plt+0xae4>
   1335c:	mov	r0, #40	; 0x28
   13360:	bl	18c20 <__assert_fail@plt+0x6484>
   13364:	b	12ecc <__assert_fail@plt+0x730>
   13368:	mov	r2, #4
   1336c:	mov	r1, r9
   13370:	ldr	r0, [sp, #24]
   13374:	bl	31a68 <fts_set@@Base>
   13378:	b	12ec0 <__assert_fail@plt+0x724>
   1337c:	str	r3, [sp]
   13380:	mov	r2, #14
   13384:	ldr	r3, [pc, #436]	; 13540 <__assert_fail@plt+0xda4>
   13388:	mov	r1, #1
   1338c:	ldr	r0, [pc, #432]	; 13544 <__assert_fail@plt+0xda8>
   13390:	bl	124f0 <__sprintf_chk@plt>
   13394:	ldr	r3, [pc, #424]	; 13544 <__assert_fail@plt+0xda8>
   13398:	b	12f94 <__assert_fail@plt+0x7f8>
   1339c:	mov	r1, r9
   133a0:	mov	r2, #1
   133a4:	ldr	r0, [sp, #24]
   133a8:	bl	31a68 <fts_set@@Base>
   133ac:	b	12ecc <__assert_fail@plt+0x730>
   133b0:	mov	r3, r7
   133b4:	mov	r2, #9
   133b8:	mov	r1, #1
   133bc:	ldr	r0, [pc, #424]	; 1356c <__assert_fail@plt+0xdd0>
   133c0:	bl	122f8 <fwrite@plt>
   133c4:	b	132b8 <__assert_fail@plt+0xb1c>
   133c8:	ldr	r1, [sp, #44]	; 0x2c
   133cc:	bl	18bf4 <__assert_fail@plt+0x6458>
   133d0:	mov	r1, r4
   133d4:	ldr	r2, [pc, #404]	; 13570 <__assert_fail@plt+0xdd4>
   133d8:	mov	r3, r0
   133dc:	mov	r0, r9
   133e0:	bl	12388 <error@plt>
   133e4:	mov	r0, #1
   133e8:	bl	18c08 <__assert_fail@plt+0x646c>
   133ec:	mov	r0, r9
   133f0:	b	13124 <__assert_fail@plt+0x988>
   133f4:	orr	r1, r1, #16
   133f8:	str	r1, [r8]
   133fc:	b	12c5c <__assert_fail@plt+0x4c0>
   13400:	orr	r1, r1, #3
   13404:	str	r1, [r8]
   13408:	b	12c5c <__assert_fail@plt+0x4c0>
   1340c:	ldr	r1, [pc, #352]	; 13574 <__assert_fail@plt+0xdd8>
   13410:	mov	r0, #0
   13414:	bl	1222c <dcgettext@plt>
   13418:	ldr	r1, [r9, #28]
   1341c:	mov	r4, r0
   13420:	mov	r0, #0
   13424:	bl	18bf4 <__assert_fail@plt+0x6458>
   13428:	mov	r1, #0
   1342c:	mov	r2, r4
   13430:	mov	r3, r0
   13434:	mov	r0, r1
   13438:	bl	12388 <error@plt>
   1343c:	mov	r0, #1
   13440:	bl	18c08 <__assert_fail@plt+0x646c>
   13444:	b	12ecc <__assert_fail@plt+0x730>
   13448:	ldr	r2, [pc, #296]	; 13578 <__assert_fail@plt+0xddc>
   1344c:	mov	r0, #1
   13450:	bl	2d52c <__assert_fail@plt+0x1ad90>
   13454:	b	13238 <__assert_fail@plt+0xa9c>
   13458:	ldr	r3, [sp, #32]
   1345c:	mov	r2, #5
   13460:	ldr	r1, [pc, #276]	; 1357c <__assert_fail@plt+0xde0>
   13464:	mov	r0, r4
   13468:	ldr	r5, [r3]
   1346c:	bl	1222c <dcgettext@plt>
   13470:	ldr	r3, [sp, #44]	; 0x2c
   13474:	mov	r1, r5
   13478:	mov	r2, r0
   1347c:	mov	r0, r4
   13480:	bl	12388 <error@plt>
   13484:	mov	r0, #1
   13488:	bl	18c08 <__assert_fail@plt+0x646c>
   1348c:	mov	r0, r4
   13490:	b	13124 <__assert_fail@plt+0x988>
   13494:	ldr	r6, [sp, #24]
   13498:	ldr	r3, [sp, #32]
   1349c:	mov	r2, #5
   134a0:	ldr	r1, [pc, #216]	; 13580 <__assert_fail@plt+0xde4>
   134a4:	mov	r0, r6
   134a8:	ldr	r4, [r3]
   134ac:	bl	1222c <dcgettext@plt>
   134b0:	ldr	r1, [sp, #44]	; 0x2c
   134b4:	mov	r5, r0
   134b8:	mov	r0, r6
   134bc:	bl	18bf4 <__assert_fail@plt+0x6458>
   134c0:	mov	r2, r5
   134c4:	mov	r1, r4
   134c8:	mov	r3, r0
   134cc:	mov	r0, r6
   134d0:	bl	12388 <error@plt>
   134d4:	mov	r0, #1
   134d8:	bl	18c08 <__assert_fail@plt+0x646c>
   134dc:	mov	r0, #1
   134e0:	b	13124 <__assert_fail@plt+0x988>
   134e4:	ldr	r3, [pc, #152]	; 13584 <__assert_fail@plt+0xde8>
   134e8:	ldr	r2, [pc, #152]	; 13588 <__assert_fail@plt+0xdec>
   134ec:	ldr	r1, [pc, #152]	; 1358c <__assert_fail@plt+0xdf0>
   134f0:	ldr	r0, [pc, #152]	; 13590 <__assert_fail@plt+0xdf4>
   134f4:	bl	1279c <__assert_fail@plt>
   134f8:	bl	12244 <__stack_chk_fail@plt>
   134fc:	ldr	r3, [pc, #128]	; 13584 <__assert_fail@plt+0xde8>
   13500:	mov	r2, #424	; 0x1a8
   13504:	ldr	r1, [pc, #128]	; 1358c <__assert_fail@plt+0xdf0>
   13508:	ldr	r0, [pc, #132]	; 13594 <__assert_fail@plt+0xdf8>
   1350c:	bl	1279c <__assert_fail@plt>
   13510:	add	r3, sp, #56	; 0x38
   13514:	b	12ddc <__assert_fail@plt+0x640>
   13518:	andeq	fp, r5, r0, ror #24
   1351c:	andeq	ip, r5, r0, lsr lr
   13520:	andeq	ip, r5, ip, asr lr
   13524:	andeq	ip, r5, r8
   13528:	andeq	r0, r0, r1, lsl #2
   1352c:	andeq	ip, r5, r8, lsr r5
   13530:	andeq	r4, r4, r8
   13534:	muleq	r4, ip, r2
   13538:	strdeq	r4, [r4], -ip
   1353c:	andeq	r4, r4, r0, ror r2
   13540:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   13544:	andeq	ip, r5, ip, asr #10
   13548:	andeq	r4, r4, r0, ror #3
   1354c:	strheq	r4, [r4], -r8
   13550:	ldrdeq	r4, [r4], -r0
   13554:	muleq	r4, r0, r0
   13558:	ldrdeq	r4, [r4], -r8
   1355c:	andeq	r4, r4, r8, ror #1
   13560:			; <UNDEFINED> instruction: 0x00013bb0
   13564:	ldrdeq	r4, [r1], -ip
   13568:	muleq	r4, ip, r0
   1356c:	ldrdeq	r4, [r4], -ip
   13570:	strdeq	r4, [r4], -r8
   13574:	andeq	r4, r4, r4, ror #2
   13578:	andeq	r8, r4, r0, lsr r6
   1357c:	andeq	r4, r4, r4, lsr r3
   13580:	andeq	r4, r4, r4, lsr #1
   13584:	andeq	r4, r4, ip, asr #32
   13588:	andeq	r0, r0, r9, lsr #3
   1358c:	andeq	r4, r4, r0, rrx
   13590:	andeq	r4, r4, r0, asr #4
   13594:	andeq	r4, r4, ip, lsr #4
   13598:	ldr	r3, [pc, #12]	; 135ac <__assert_fail@plt+0xe10>
   1359c:	ldr	r3, [r3]
   135a0:	str	r3, [r0]
   135a4:	mov	r0, #1
   135a8:	bx	lr
   135ac:	andeq	ip, r5, r8
   135b0:	mov	r0, #1
   135b4:	bx	lr
   135b8:	mov	r0, #0
   135bc:	bx	lr
   135c0:	ldr	r0, [r2, #40]	; 0x28
   135c4:	ldr	r3, [r1, #28]
   135c8:	sub	r0, r0, r3
   135cc:	clz	r0, r0
   135d0:	lsr	r0, r0, #5
   135d4:	bx	lr
   135d8:	push	{r4, r6, r7, lr}
   135dc:	mov	r4, r2
   135e0:	ldr	r2, [r2, #44]	; 0x2c
   135e4:	ldrd	r0, [r1, #48]	; 0x30
   135e8:	asr	r3, r2, #31
   135ec:	bl	43cf4 <fts_children@@Base+0x12258>
   135f0:	ldr	ip, [r4, #40]	; 0x28
   135f4:	orrs	r3, r2, r3
   135f8:	movne	r3, #1
   135fc:	moveq	r3, #0
   13600:	adds	r6, r0, r3
   13604:	adc	r7, r1, #0
   13608:	cmp	ip, #1
   1360c:	beq	13640 <__assert_fail@plt+0xea4>
   13610:	cmp	ip, #0
   13614:	beq	13658 <__assert_fail@plt+0xebc>
   13618:	cmp	ip, #2
   1361c:	bne	13638 <__assert_fail@plt+0xe9c>
   13620:	ldrd	r2, [r4, #48]	; 0x30
   13624:	cmp	r3, r7
   13628:	cmpeq	r2, r6
   1362c:	moveq	r0, #1
   13630:	movne	r0, #0
   13634:	pop	{r4, r6, r7, pc}
   13638:	mov	r0, #0
   1363c:	pop	{r4, r6, r7, pc}
   13640:	ldrd	r2, [r4, #48]	; 0x30
   13644:	cmp	r3, r7
   13648:	cmpeq	r2, r6
   1364c:	movhi	r0, #1
   13650:	movls	r0, #0
   13654:	pop	{r4, r6, r7, pc}
   13658:	ldrd	r2, [r4, #48]	; 0x30
   1365c:	cmp	r3, r7
   13660:	cmpeq	r2, r6
   13664:	movcc	r0, #1
   13668:	movcs	r0, #0
   1366c:	pop	{r4, r6, r7, pc}
   13670:	ldr	r0, [r2, #40]	; 0x28
   13674:	ldr	r3, [r1, #24]
   13678:	sub	r0, r0, r3
   1367c:	clz	r0, r0
   13680:	lsr	r0, r0, #5
   13684:	bx	lr
   13688:	push	{r4, r5, lr}
   1368c:	sub	sp, sp, #20
   13690:	add	lr, sp, #16
   13694:	mov	ip, sp
   13698:	stmdb	lr, {r0, r1}
   1369c:	ldr	r0, [sp, #8]
   136a0:	ldr	r4, [sp, #12]
   136a4:	stm	ip, {r2, r3}
   136a8:	cmp	r0, r2
   136ac:	cmpeq	r3, r4
   136b0:	moveq	r0, #0
   136b4:	beq	136e8 <__assert_fail@plt+0xf4c>
   136b8:	mov	r1, r2
   136bc:	mov	r5, r3
   136c0:	bl	12574 <difftime@plt>
   136c4:	sub	r4, r4, r5
   136c8:	vldr	d6, [pc, #32]	; 136f0 <__assert_fail@plt+0xf54>
   136cc:	vmov	s15, r4
   136d0:	vcvt.f64.s32	d7, s15
   136d4:	vmla.f64	d0, d7, d6
   136d8:	vcmpe.f64	d0, #0.0
   136dc:	vmrs	APSR_nzcv, fpscr
   136e0:	mvnmi	r0, #0
   136e4:	movpl	r0, #1
   136e8:	add	sp, sp, #20
   136ec:	pop	{r4, r5, pc}
   136f0:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   136f4:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   136f8:	push	{r4, r5, lr}
   136fc:	mov	r4, r2
   13700:	sub	sp, sp, #12
   13704:	ldr	ip, [r4, #44]	; 0x2c
   13708:	mov	r2, sp
   1370c:	cmp	ip, #1
   13710:	stm	r2, {r0, r1}
   13714:	beq	137a8 <__assert_fail@plt+0x100c>
   13718:	cmp	ip, #0
   1371c:	beq	13784 <__assert_fail@plt+0xfe8>
   13720:	cmp	ip, #2
   13724:	bne	137c4 <__assert_fail@plt+0x1028>
   13728:	ldr	r0, [sp]
   1372c:	ldr	r1, [r4, #48]	; 0x30
   13730:	mov	r5, r3
   13734:	bl	12574 <difftime@plt>
   13738:	ldr	r2, [sp, #4]
   1373c:	ldr	r3, [r4, #52]	; 0x34
   13740:	vldr	d6, [pc, #144]	; 137d8 <__assert_fail@plt+0x103c>
   13744:	sub	r2, r2, r3
   13748:	vmov	s15, r2
   1374c:	vcvt.f64.s32	d7, s15
   13750:	vmla.f64	d0, d7, d6
   13754:	vcmpe.f64	d0, #0.0
   13758:	vmrs	APSR_nzcv, fpscr
   1375c:	movle	r0, #0
   13760:	ble	1377c <__assert_fail@plt+0xfe0>
   13764:	vmov	s15, r5
   13768:	vcvt.f64.s32	d7, s15
   1376c:	vcmpe.f64	d7, d0
   13770:	vmrs	APSR_nzcv, fpscr
   13774:	movge	r0, #1
   13778:	movlt	r0, #0
   1377c:	add	sp, sp, #12
   13780:	pop	{r4, r5, pc}
   13784:	add	r4, r4, #48	; 0x30
   13788:	ldm	r2, {r0, r1}
   1378c:	ldm	r4, {r2, r3}
   13790:	bl	13688 <__assert_fail@plt+0xeec>
   13794:	cmp	r0, #0
   13798:	movle	r0, #0
   1379c:	movgt	r0, #1
   137a0:	add	sp, sp, #12
   137a4:	pop	{r4, r5, pc}
   137a8:	add	r4, r4, #48	; 0x30
   137ac:	ldm	r2, {r0, r1}
   137b0:	ldm	r4, {r2, r3}
   137b4:	bl	13688 <__assert_fail@plt+0xeec>
   137b8:	lsr	r0, r0, #31
   137bc:	add	sp, sp, #12
   137c0:	pop	{r4, r5, pc}
   137c4:	ldr	r3, [pc, #20]	; 137e0 <__assert_fail@plt+0x1044>
   137c8:	mov	r2, #206	; 0xce
   137cc:	ldr	r1, [pc, #16]	; 137e4 <__assert_fail@plt+0x1048>
   137d0:	ldr	r0, [pc, #16]	; 137e8 <__assert_fail@plt+0x104c>
   137d4:	bl	1279c <__assert_fail@plt>
   137d8:	stmda	r6!, {r0, r2, r4, r7, r9, sl, ip, lr, pc}
   137dc:	cdpcc	14, 1, cr2, cr1, cr11, {0}
   137e0:	andeq	r4, r4, r0, ror r4
   137e4:	andeq	r4, r4, ip, ror #9
   137e8:	andeq	r4, r4, ip, lsr #11
   137ec:	add	r1, r1, #72	; 0x48
   137f0:	sub	sp, sp, #8
   137f4:	ldm	r1, {r0, r1}
   137f8:	mov	ip, sp
   137fc:	mov	r3, #60	; 0x3c
   13800:	stm	ip, {r0, r1}
   13804:	add	sp, sp, #8
   13808:	b	136f8 <__assert_fail@plt+0xf5c>
   1380c:	add	r1, r1, #72	; 0x48
   13810:	sub	sp, sp, #8
   13814:	ldm	r1, {r0, r1}
   13818:	mov	ip, sp
   1381c:	ldr	r3, [pc, #8]	; 1382c <__assert_fail@plt+0x1090>
   13820:	stm	ip, {r0, r1}
   13824:	add	sp, sp, #8
   13828:	b	136f8 <__assert_fail@plt+0xf5c>
   1382c:	andeq	r5, r1, r0, lsl #3
   13830:	add	r1, r1, #88	; 0x58
   13834:	sub	sp, sp, #8
   13838:	ldm	r1, {r0, r1}
   1383c:	mov	ip, sp
   13840:	mov	r3, #60	; 0x3c
   13844:	stm	ip, {r0, r1}
   13848:	add	sp, sp, #8
   1384c:	b	136f8 <__assert_fail@plt+0xf5c>
   13850:	add	r1, r1, #88	; 0x58
   13854:	sub	sp, sp, #8
   13858:	ldm	r1, {r0, r1}
   1385c:	mov	ip, sp
   13860:	ldr	r3, [pc, #8]	; 13870 <__assert_fail@plt+0x10d4>
   13864:	stm	ip, {r0, r1}
   13868:	add	sp, sp, #8
   1386c:	b	136f8 <__assert_fail@plt+0xf5c>
   13870:	andeq	r5, r1, r0, lsl #3
   13874:	add	r1, r1, #80	; 0x50
   13878:	sub	sp, sp, #8
   1387c:	ldm	r1, {r0, r1}
   13880:	mov	ip, sp
   13884:	mov	r3, #60	; 0x3c
   13888:	stm	ip, {r0, r1}
   1388c:	add	sp, sp, #8
   13890:	b	136f8 <__assert_fail@plt+0xf5c>
   13894:	add	r1, r1, #80	; 0x50
   13898:	sub	sp, sp, #8
   1389c:	ldm	r1, {r0, r1}
   138a0:	mov	ip, sp
   138a4:	ldr	r3, [pc, #8]	; 138b4 <__assert_fail@plt+0x1118>
   138a8:	stm	ip, {r0, r1}
   138ac:	add	sp, sp, #8
   138b0:	b	136f8 <__assert_fail@plt+0xf5c>
   138b4:	andeq	r5, r1, r0, lsl #3
   138b8:	ldr	r3, [r1, #76]	; 0x4c
   138bc:	ldr	ip, [r1, #92]	; 0x5c
   138c0:	ldr	r0, [r1, #72]	; 0x48
   138c4:	subs	r3, r3, ip
   138c8:	ldr	r1, [r1, #88]	; 0x58
   138cc:	addmi	r3, r3, #998244352	; 0x3b800000
   138d0:	addmi	r3, r3, #1753088	; 0x1ac000
   138d4:	sub	r1, r0, r1
   138d8:	sub	sp, sp, #8
   138dc:	addmi	r3, r3, #2560	; 0xa00
   138e0:	submi	r1, r1, #1
   138e4:	stm	sp, {r1, r3}
   138e8:	add	r3, sp, #8
   138ec:	ldmdb	r3, {r0, r1}
   138f0:	ldr	r3, [pc, #4]	; 138fc <__assert_fail@plt+0x1160>
   138f4:	add	sp, sp, #8
   138f8:	b	136f8 <__assert_fail@plt+0xf5c>
   138fc:	andeq	r5, r1, r0, lsl #3
   13900:	push	{r4, r5, r6, lr}
   13904:	mov	r4, r2
   13908:	ldr	r2, [r2, #156]	; 0x9c
   1390c:	mov	r5, r0
   13910:	cmp	r2, #0
   13914:	mov	r6, r1
   13918:	beq	13920 <__assert_fail@plt+0x1184>
   1391c:	bl	18b50 <__assert_fail@plt+0x63b4>
   13920:	ldr	r2, [r4, #160]	; 0xa0
   13924:	mov	r1, r6
   13928:	mov	r0, r5
   1392c:	pop	{r4, r5, r6, lr}
   13930:	b	18b50 <__assert_fail@plt+0x63b4>
   13934:	push	{r4, lr}
   13938:	ldr	r2, [r2, #160]	; 0xa0
   1393c:	bl	18b50 <__assert_fail@plt+0x63b4>
   13940:	eor	r0, r0, #1
   13944:	uxtb	r0, r0
   13948:	pop	{r4, pc}
   1394c:	ldr	r3, [r2, #44]	; 0x2c
   13950:	push	{r4, r5, lr}
   13954:	cmp	r3, #0
   13958:	sub	sp, sp, #12
   1395c:	bne	13a44 <__assert_fail@plt+0x12a8>
   13960:	ldr	r3, [r2, #40]	; 0x28
   13964:	mov	ip, r1
   13968:	cmp	r3, #4
   1396c:	ldrls	pc, [pc, r3, lsl #2]
   13970:	b	13a58 <__assert_fail@plt+0x12bc>
   13974:	andeq	r3, r1, r0, asr #19
   13978:	ldrdeq	r3, [r1], -r8
   1397c:	andeq	r3, r1, ip, lsl sl
   13980:	andeq	r3, r1, r8, lsl #19
   13984:	andeq	r3, r1, r0, lsr sl
   13988:	ldr	r3, [r1, #84]	; 0x54
   1398c:	mov	lr, sp
   13990:	ldr	r1, [r1, #80]	; 0x50
   13994:	str	r1, [sp]
   13998:	add	r2, r2, #48	; 0x30
   1399c:	str	r3, [sp, #4]
   139a0:	ldm	r2, {r2, r3}
   139a4:	ldm	lr, {r0, r1}
   139a8:	bl	13688 <__assert_fail@plt+0xeec>
   139ac:	cmp	r0, #0
   139b0:	movle	r0, #0
   139b4:	movgt	r0, #1
   139b8:	add	sp, sp, #12
   139bc:	pop	{r4, r5, pc}
   139c0:	add	r3, r1, #72	; 0x48
   139c4:	mov	lr, sp
   139c8:	ldm	r3, {r0, r1}
   139cc:	ldr	r3, [ip, #76]	; 0x4c
   139d0:	stm	lr, {r0, r1}
   139d4:	b	13998 <__assert_fail@plt+0x11fc>
   139d8:	mov	r4, r0
   139dc:	mov	r2, #5
   139e0:	ldr	r1, [pc, #132]	; 13a6c <__assert_fail@plt+0x12d0>
   139e4:	mov	r0, #0
   139e8:	bl	1222c <dcgettext@plt>
   139ec:	mov	r1, r4
   139f0:	mov	r5, r0
   139f4:	mov	r0, #0
   139f8:	bl	18bf4 <__assert_fail@plt+0x6458>
   139fc:	mov	r1, #0
   13a00:	mov	r2, r5
   13a04:	mov	r3, r0
   13a08:	mov	r0, r1
   13a0c:	bl	12388 <error@plt>
   13a10:	mov	r0, #0
   13a14:	add	sp, sp, #12
   13a18:	pop	{r4, r5, pc}
   13a1c:	ldr	r1, [r1, #88]	; 0x58
   13a20:	ldr	r3, [ip, #92]	; 0x5c
   13a24:	str	r1, [sp]
   13a28:	mov	lr, sp
   13a2c:	b	13998 <__assert_fail@plt+0x11fc>
   13a30:	ldr	r3, [pc, #56]	; 13a70 <__assert_fail@plt+0x12d4>
   13a34:	ldr	r2, [pc, #56]	; 13a74 <__assert_fail@plt+0x12d8>
   13a38:	ldr	r1, [pc, #56]	; 13a78 <__assert_fail@plt+0x12dc>
   13a3c:	ldr	r0, [pc, #56]	; 13a7c <__assert_fail@plt+0x12e0>
   13a40:	bl	1279c <__assert_fail@plt>
   13a44:	ldr	r3, [pc, #36]	; 13a70 <__assert_fail@plt+0x12d4>
   13a48:	ldr	r2, [pc, #48]	; 13a80 <__assert_fail@plt+0x12e4>
   13a4c:	ldr	r1, [pc, #36]	; 13a78 <__assert_fail@plt+0x12dc>
   13a50:	ldr	r0, [pc, #44]	; 13a84 <__assert_fail@plt+0x12e8>
   13a54:	bl	1279c <__assert_fail@plt>
   13a58:	ldr	r3, [pc, #16]	; 13a70 <__assert_fail@plt+0x12d4>
   13a5c:	ldr	r2, [pc, #36]	; 13a88 <__assert_fail@plt+0x12ec>
   13a60:	ldr	r1, [pc, #16]	; 13a78 <__assert_fail@plt+0x12dc>
   13a64:	ldr	r0, [pc, #32]	; 13a8c <__assert_fail@plt+0x12f0>
   13a68:	bl	1279c <__assert_fail@plt>
   13a6c:	andeq	r4, r4, r4, asr r5
   13a70:	andeq	r4, r4, r0, lsl #9
   13a74:	andeq	r0, r0, r2, asr #5
   13a78:	andeq	r4, r4, ip, ror #9
   13a7c:	andeq	r4, r4, r8, lsr #10
   13a80:			; <UNDEFINED> instruction: 0x000002bd
   13a84:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   13a88:	andeq	r0, r0, r1, ror #5
   13a8c:	andeq	r4, r4, ip, lsl r5
   13a90:	push	{r4, r5, r6, r7, r8, lr}
   13a94:	mov	r7, r0
   13a98:	ldr	r4, [pc, #252]	; 13b9c <__assert_fail@plt+0x1400>
   13a9c:	mov	r5, r1
   13aa0:	ldr	r1, [pc, #248]	; 13ba0 <__assert_fail@plt+0x1404>
   13aa4:	ldr	r6, [r4, #12]
   13aa8:	mov	r0, r6
   13aac:	bl	120dc <strcmp@plt>
   13ab0:	cmp	r0, #0
   13ab4:	beq	13b58 <__assert_fail@plt+0x13bc>
   13ab8:	ldrb	r2, [r4, #4]
   13abc:	cmp	r2, #0
   13ac0:	moveq	r5, r2
   13ac4:	beq	13adc <__assert_fail@plt+0x1340>
   13ac8:	ldr	r3, [r5, #16]
   13acc:	and	r3, r3, #61440	; 0xf000
   13ad0:	cmp	r3, #16384	; 0x4000
   13ad4:	movne	r5, #0
   13ad8:	moveq	r5, #512	; 0x200
   13adc:	mov	r1, r6
   13ae0:	mov	r2, r5
   13ae4:	ldr	r0, [r4, #16]
   13ae8:	bl	12124 <unlinkat@plt>
   13aec:	cmp	r0, #0
   13af0:	beq	13b58 <__assert_fail@plt+0x13bc>
   13af4:	bl	124d8 <__errno_location@plt>
   13af8:	ldr	r6, [r0]
   13afc:	mov	r8, r0
   13b00:	cmp	r6, #2
   13b04:	beq	13b80 <__assert_fail@plt+0x13e4>
   13b08:	cmp	r6, #21
   13b0c:	cmpeq	r5, #0
   13b10:	beq	13b60 <__assert_fail@plt+0x13c4>
   13b14:	mov	r2, #5
   13b18:	ldr	r1, [pc, #132]	; 13ba4 <__assert_fail@plt+0x1408>
   13b1c:	mov	r0, #0
   13b20:	bl	1222c <dcgettext@plt>
   13b24:	mov	r1, r7
   13b28:	mov	r5, r0
   13b2c:	mov	r0, #0
   13b30:	bl	18bf4 <__assert_fail@plt+0x6458>
   13b34:	mov	r2, r5
   13b38:	mov	r1, r6
   13b3c:	mov	r3, r0
   13b40:	mov	r0, #0
   13b44:	bl	12388 <error@plt>
   13b48:	mov	r3, #1
   13b4c:	mov	r0, #0
   13b50:	str	r3, [r4, #28]
   13b54:	pop	{r4, r5, r6, r7, r8, pc}
   13b58:	mov	r0, #1
   13b5c:	pop	{r4, r5, r6, r7, r8, pc}
   13b60:	mov	r2, #512	; 0x200
   13b64:	ldr	r1, [r4, #12]
   13b68:	ldr	r0, [r4, #16]
   13b6c:	bl	12124 <unlinkat@plt>
   13b70:	cmp	r0, #0
   13b74:	beq	13b58 <__assert_fail@plt+0x13bc>
   13b78:	ldr	r6, [r8]
   13b7c:	b	13b14 <__assert_fail@plt+0x1378>
   13b80:	ldr	r3, [pc, #32]	; 13ba8 <__assert_fail@plt+0x140c>
   13b84:	ldrb	r0, [r3, #14]
   13b88:	cmp	r0, #0
   13b8c:	beq	13b14 <__assert_fail@plt+0x1378>
   13b90:	mov	r3, #0
   13b94:	str	r3, [r8]
   13b98:	pop	{r4, r5, r6, r7, r8, pc}
   13b9c:	andeq	ip, r5, r0, lsr lr
   13ba0:	andeq	r7, r4, r8, ror r8
   13ba4:	andeq	r4, r4, r4, lsl #11
   13ba8:	andeq	ip, r5, ip, asr lr
   13bac:	b	14ff0 <__assert_fail@plt+0x2854>
   13bb0:	ldr	r3, [pc, #4]	; 13bbc <__assert_fail@plt+0x1420>
   13bb4:	ldr	r0, [r3, #12]
   13bb8:	b	14ff0 <__assert_fail@plt+0x2854>
   13bbc:	andeq	ip, r5, r0, lsr lr
   13bc0:	push	{lr}		; (str lr, [sp, #-4]!)
   13bc4:	mov	r3, r2
   13bc8:	sub	sp, sp, #12
   13bcc:	str	r0, [sp]
   13bd0:	ldr	r1, [r3, #56]	; 0x38
   13bd4:	ldrb	r2, [r2, #52]	; 0x34
   13bd8:	ldr	r0, [r3, #44]	; 0x2c
   13bdc:	ldr	r3, [pc, #12]	; 13bf0 <__assert_fail@plt+0x1454>
   13be0:	bl	20b84 <__assert_fail@plt+0xe3e8>
   13be4:	mov	r0, #1
   13be8:	add	sp, sp, #12
   13bec:	pop	{pc}		; (ldr pc, [sp], #4)
   13bf0:			; <UNDEFINED> instruction: 0x0004a2b0
   13bf4:	b	13bc0 <__assert_fail@plt+0x1424>
   13bf8:	push	{r4, lr}
   13bfc:	ldr	r4, [r2, #44]	; 0x2c
   13c00:	mov	r1, r4
   13c04:	bl	12724 <fputs@plt>
   13c08:	mov	r1, r4
   13c0c:	mov	r0, #0
   13c10:	bl	12688 <putc@plt>
   13c14:	mov	r0, #1
   13c18:	pop	{r4, pc}
   13c1c:	b	13bf8 <__assert_fail@plt+0x145c>
   13c20:	mov	r3, r1
   13c24:	push	{r4, lr}
   13c28:	mov	r4, r2
   13c2c:	mov	r1, r0
   13c30:	mov	r0, r3
   13c34:	bl	1acec <__assert_fail@plt+0x8550>
   13c38:	ldr	r1, [r4, #40]	; 0x28
   13c3c:	bl	120dc <strcmp@plt>
   13c40:	clz	r0, r0
   13c44:	lsr	r0, r0, #5
   13c48:	pop	{r4, pc}
   13c4c:	ldr	r3, [r2, #40]	; 0x28
   13c50:	mov	r1, r0
   13c54:	push	{r4, lr}
   13c58:	mov	r2, #16
   13c5c:	mov	r0, r3
   13c60:	bl	123ac <fnmatch@plt>
   13c64:	clz	r0, r0
   13c68:	lsr	r0, r0, #5
   13c6c:	pop	{r4, pc}
   13c70:	ldr	r3, [r2, #40]	; 0x28
   13c74:	mov	r1, r0
   13c78:	push	{r4, lr}
   13c7c:	mov	r2, #0
   13c80:	mov	r0, r3
   13c84:	bl	123ac <fnmatch@plt>
   13c88:	clz	r0, r0
   13c8c:	lsr	r0, r0, #5
   13c90:	pop	{r4, pc}
   13c94:	push	{r4, r5, r6, lr}
   13c98:	ldr	r5, [r2, #40]	; 0x28
   13c9c:	bl	216b8 <__assert_fail@plt+0xef1c>
   13ca0:	mov	r4, r0
   13ca4:	bl	2186c <__assert_fail@plt+0xf0d0>
   13ca8:	mov	r1, r4
   13cac:	mov	r2, #16
   13cb0:	mov	r0, r5
   13cb4:	bl	123ac <fnmatch@plt>
   13cb8:	mov	r5, r0
   13cbc:	mov	r0, r4
   13cc0:	bl	12154 <free@plt>
   13cc4:	clz	r0, r5
   13cc8:	lsr	r0, r0, #5
   13ccc:	pop	{r4, r5, r6, pc}
   13cd0:	push	{r4, lr}
   13cd4:	ldr	r0, [r1, #28]
   13cd8:	bl	1276c <getgrgid@plt>
   13cdc:	clz	r0, r0
   13ce0:	lsr	r0, r0, #5
   13ce4:	pop	{r4, pc}
   13ce8:	push	{r4, lr}
   13cec:	ldr	r0, [r1, #24]
   13cf0:	bl	120f4 <getpwuid@plt>
   13cf4:	clz	r0, r0
   13cf8:	lsr	r0, r0, #5
   13cfc:	pop	{r4, pc}
   13d00:	ldr	r3, [r1, #16]
   13d04:	ldr	r0, [r2, #40]	; 0x28
   13d08:	and	r1, r3, #61440	; 0xf000
   13d0c:	cmp	r1, #16384	; 0x4000
   13d10:	moveq	r1, #44	; 0x2c
   13d14:	movne	r1, #40	; 0x28
   13d18:	add	r2, r2, r1
   13d1c:	cmp	r0, #1
   13d20:	ldr	r2, [r2, #4]
   13d24:	beq	13d60 <__assert_fail@plt+0x15c4>
   13d28:	cmp	r0, #0
   13d2c:	bne	13d40 <__assert_fail@plt+0x15a4>
   13d30:	bics	r3, r2, r3
   13d34:	moveq	r0, #1
   13d38:	movne	r0, #0
   13d3c:	bx	lr
   13d40:	cmp	r0, #2
   13d44:	bne	13d78 <__assert_fail@plt+0x15dc>
   13d48:	lsl	r0, r3, #20
   13d4c:	lsr	r0, r0, #20
   13d50:	sub	r0, r0, r2
   13d54:	clz	r0, r0
   13d58:	lsr	r0, r0, #5
   13d5c:	bx	lr
   13d60:	cmp	r2, #0
   13d64:	bxeq	lr
   13d68:	tst	r3, r2
   13d6c:	movne	r0, #1
   13d70:	moveq	r0, #0
   13d74:	bx	lr
   13d78:	push	{r4, lr}
   13d7c:	bl	1273c <abort@plt>
   13d80:	ldr	r0, [pc, #32]	; 13da8 <__assert_fail@plt+0x160c>
   13d84:	push	{r4, lr}
   13d88:	mov	r3, #0
   13d8c:	ldr	r1, [r0, #12]
   13d90:	mov	r2, #1
   13d94:	ldr	r0, [r0, #16]
   13d98:	bl	1216c <faccessat@plt>
   13d9c:	clz	r0, r0
   13da0:	lsr	r0, r0, #5
   13da4:	pop	{r4, pc}
   13da8:	andeq	ip, r5, r0, lsr lr
   13dac:	ldr	r0, [pc, #32]	; 13dd4 <__assert_fail@plt+0x1638>
   13db0:	push	{r4, lr}
   13db4:	mov	r3, #0
   13db8:	ldr	r1, [r0, #12]
   13dbc:	mov	r2, #4
   13dc0:	ldr	r0, [r0, #16]
   13dc4:	bl	1216c <faccessat@plt>
   13dc8:	clz	r0, r0
   13dcc:	lsr	r0, r0, #5
   13dd0:	pop	{r4, pc}
   13dd4:	andeq	ip, r5, r0, lsr lr
   13dd8:	ldr	r0, [pc, #32]	; 13e00 <__assert_fail@plt+0x1664>
   13ddc:	push	{r4, lr}
   13de0:	mov	r3, #0
   13de4:	ldr	r1, [r0, #12]
   13de8:	mov	r2, #2
   13dec:	ldr	r0, [r0, #16]
   13df0:	bl	1216c <faccessat@plt>
   13df4:	clz	r0, r0
   13df8:	lsr	r0, r0, #5
   13dfc:	pop	{r4, pc}
   13e00:	andeq	ip, r5, r0, lsr lr
   13e04:	push	{r4, lr}
   13e08:	bl	17f50 <__assert_fail@plt+0x57b4>
   13e0c:	ldr	r3, [pc, #4]	; 13e18 <__assert_fail@plt+0x167c>
   13e10:	ldr	r0, [r3, #28]
   13e14:	bl	12478 <exit@plt>
   13e18:	andeq	ip, r5, r0, lsr lr
   13e1c:	push	{r4, r5, r6, lr}
   13e20:	sub	sp, sp, #8
   13e24:	mov	r5, r2
   13e28:	mov	r6, r0
   13e2c:	bl	1249c <strlen@plt>
   13e30:	mov	r3, #0
   13e34:	mov	r1, r6
   13e38:	mov	r4, r0
   13e3c:	mov	r2, r4
   13e40:	ldr	r0, [r5, #40]	; 0x28
   13e44:	str	r3, [sp]
   13e48:	bl	3fa3c <fts_children@@Base+0xdfa0>
   13e4c:	sub	r0, r0, r4
   13e50:	clz	r0, r0
   13e54:	lsr	r0, r0, #5
   13e58:	add	sp, sp, #8
   13e5c:	pop	{r4, r5, r6, pc}
   13e60:	ldr	r3, [r2, #40]	; 0x28
   13e64:	cmp	r3, #1
   13e68:	beq	13ea8 <__assert_fail@plt+0x170c>
   13e6c:	cmp	r3, #0
   13e70:	beq	13ecc <__assert_fail@plt+0x1730>
   13e74:	cmp	r3, #2
   13e78:	bne	13ea0 <__assert_fail@plt+0x1704>
   13e7c:	ldr	r3, [r1, #28]
   13e80:	ldrd	r0, [r2, #48]	; 0x30
   13e84:	mov	r2, r3
   13e88:	mov	r3, #0
   13e8c:	cmp	r1, r3
   13e90:	cmpeq	r0, r2
   13e94:	moveq	r0, #1
   13e98:	movne	r0, #0
   13e9c:	bx	lr
   13ea0:	mov	r0, #0
   13ea4:	bx	lr
   13ea8:	ldr	r3, [r1, #28]
   13eac:	ldrd	r0, [r2, #48]	; 0x30
   13eb0:	mov	r2, r3
   13eb4:	mov	r3, #0
   13eb8:	cmp	r3, r1
   13ebc:	cmpeq	r2, r0
   13ec0:	movcc	r0, #1
   13ec4:	movcs	r0, #0
   13ec8:	bx	lr
   13ecc:	ldr	r3, [r1, #28]
   13ed0:	ldrd	r0, [r2, #48]	; 0x30
   13ed4:	mov	r2, r3
   13ed8:	mov	r3, #0
   13edc:	cmp	r3, r1
   13ee0:	cmpeq	r2, r0
   13ee4:	movhi	r0, #1
   13ee8:	movls	r0, #0
   13eec:	bx	lr
   13ef0:	ldr	r3, [r2, #40]	; 0x28
   13ef4:	cmp	r3, #1
   13ef8:	beq	13f38 <__assert_fail@plt+0x179c>
   13efc:	cmp	r3, #0
   13f00:	beq	13f5c <__assert_fail@plt+0x17c0>
   13f04:	cmp	r3, #2
   13f08:	bne	13f30 <__assert_fail@plt+0x1794>
   13f0c:	ldr	r3, [r1, #20]
   13f10:	ldrd	r0, [r2, #48]	; 0x30
   13f14:	mov	r2, r3
   13f18:	mov	r3, #0
   13f1c:	cmp	r1, r3
   13f20:	cmpeq	r0, r2
   13f24:	moveq	r0, #1
   13f28:	movne	r0, #0
   13f2c:	bx	lr
   13f30:	mov	r0, #0
   13f34:	bx	lr
   13f38:	ldr	r3, [r1, #20]
   13f3c:	ldrd	r0, [r2, #48]	; 0x30
   13f40:	mov	r2, r3
   13f44:	mov	r3, #0
   13f48:	cmp	r3, r1
   13f4c:	cmpeq	r2, r0
   13f50:	movcc	r0, #1
   13f54:	movcs	r0, #0
   13f58:	bx	lr
   13f5c:	ldr	r3, [r1, #20]
   13f60:	ldrd	r0, [r2, #48]	; 0x30
   13f64:	mov	r2, r3
   13f68:	mov	r3, #0
   13f6c:	cmp	r3, r1
   13f70:	cmpeq	r2, r0
   13f74:	movhi	r0, #1
   13f78:	movls	r0, #0
   13f7c:	bx	lr
   13f80:	ldr	r3, [r2, #40]	; 0x28
   13f84:	cmp	r3, #1
   13f88:	beq	13fc8 <__assert_fail@plt+0x182c>
   13f8c:	cmp	r3, #0
   13f90:	beq	13fec <__assert_fail@plt+0x1850>
   13f94:	cmp	r3, #2
   13f98:	bne	13fc0 <__assert_fail@plt+0x1824>
   13f9c:	ldr	r3, [r1, #24]
   13fa0:	ldrd	r0, [r2, #48]	; 0x30
   13fa4:	mov	r2, r3
   13fa8:	mov	r3, #0
   13fac:	cmp	r1, r3
   13fb0:	cmpeq	r0, r2
   13fb4:	moveq	r0, #1
   13fb8:	movne	r0, #0
   13fbc:	bx	lr
   13fc0:	mov	r0, #0
   13fc4:	bx	lr
   13fc8:	ldr	r3, [r1, #24]
   13fcc:	ldrd	r0, [r2, #48]	; 0x30
   13fd0:	mov	r2, r3
   13fd4:	mov	r3, #0
   13fd8:	cmp	r3, r1
   13fdc:	cmpeq	r2, r0
   13fe0:	movcc	r0, #1
   13fe4:	movcs	r0, #0
   13fe8:	bx	lr
   13fec:	ldr	r3, [r1, #24]
   13ff0:	ldrd	r0, [r2, #48]	; 0x30
   13ff4:	mov	r2, r3
   13ff8:	mov	r3, #0
   13ffc:	cmp	r3, r1
   14000:	cmpeq	r2, r0
   14004:	movhi	r0, #1
   14008:	movls	r0, #0
   1400c:	bx	lr
   14010:	ldrd	r0, [r1, #96]	; 0x60
   14014:	orrs	r3, r0, r1
   14018:	beq	14088 <__assert_fail@plt+0x18ec>
   1401c:	ldr	r3, [r2, #40]	; 0x28
   14020:	cmp	r3, #1
   14024:	beq	14070 <__assert_fail@plt+0x18d4>
   14028:	cmp	r3, #0
   1402c:	beq	14058 <__assert_fail@plt+0x18bc>
   14030:	cmp	r3, #2
   14034:	beq	14040 <__assert_fail@plt+0x18a4>
   14038:	mov	r0, #0
   1403c:	bx	lr
   14040:	ldrd	r2, [r2, #48]	; 0x30
   14044:	cmp	r3, r1
   14048:	cmpeq	r2, r0
   1404c:	moveq	r0, #1
   14050:	movne	r0, #0
   14054:	bx	lr
   14058:	ldrd	r2, [r2, #48]	; 0x30
   1405c:	cmp	r1, r3
   14060:	cmpeq	r0, r2
   14064:	movhi	r0, #1
   14068:	movls	r0, #0
   1406c:	bx	lr
   14070:	ldrd	r2, [r2, #48]	; 0x30
   14074:	cmp	r1, r3
   14078:	cmpeq	r0, r2
   1407c:	movcc	r0, #1
   14080:	movcs	r0, #0
   14084:	bx	lr
   14088:	push	{r4, lr}
   1408c:	ldr	r3, [pc, #12]	; 140a0 <__assert_fail@plt+0x1904>
   14090:	ldr	r2, [pc, #12]	; 140a4 <__assert_fail@plt+0x1908>
   14094:	ldr	r1, [pc, #12]	; 140a8 <__assert_fail@plt+0x190c>
   14098:	ldr	r0, [pc, #12]	; 140ac <__assert_fail@plt+0x1910>
   1409c:	bl	1279c <__assert_fail@plt>
   140a0:	muleq	r4, r0, r4
   140a4:	andeq	r0, r0, r9, lsr r2
   140a8:	andeq	r4, r4, ip, ror #9
   140ac:	muleq	r4, r8, r5
   140b0:	ldr	r3, [pc, #84]	; 1410c <__assert_fail@plt+0x1970>
   140b4:	ldrb	r3, [r3]
   140b8:	cmp	r3, #0
   140bc:	beq	140ec <__assert_fail@plt+0x1950>
   140c0:	ldr	r2, [pc, #72]	; 14110 <__assert_fail@plt+0x1974>
   140c4:	ldrb	r3, [r2, #4]
   140c8:	cmp	r3, #0
   140cc:	beq	140f4 <__assert_fail@plt+0x1958>
   140d0:	cmp	r1, #0
   140d4:	beq	140ec <__assert_fail@plt+0x1950>
   140d8:	ldr	r3, [r1, #16]
   140dc:	and	r3, r3, #61440	; 0xf000
   140e0:	cmp	r3, #16384	; 0x4000
   140e4:	moveq	r3, #1
   140e8:	strbeq	r3, [r2, #24]
   140ec:	mov	r0, #1
   140f0:	bx	lr
   140f4:	push	{r4, lr}
   140f8:	ldr	r3, [pc, #20]	; 14114 <__assert_fail@plt+0x1978>
   140fc:	ldr	r2, [pc, #20]	; 14118 <__assert_fail@plt+0x197c>
   14100:	ldr	r1, [pc, #20]	; 1411c <__assert_fail@plt+0x1980>
   14104:	ldr	r0, [pc, #20]	; 14120 <__assert_fail@plt+0x1984>
   14108:	bl	1279c <__assert_fail@plt>
   1410c:	andeq	ip, r5, ip, asr lr
   14110:	andeq	ip, r5, r0, lsr lr
   14114:	muleq	r4, ip, r4
   14118:	muleq	r0, fp, r3
   1411c:	andeq	r4, r4, ip, ror #9
   14120:			; <UNDEFINED> instruction: 0x000445b0
   14124:	ldr	r3, [pc, #216]	; 14204 <__assert_fail@plt+0x1a68>
   14128:	ldrb	r0, [r3, #5]
   1412c:	cmp	r0, #0
   14130:	beq	141ec <__assert_fail@plt+0x1a50>
   14134:	ldr	r0, [r3, #8]
   14138:	cmp	r0, #0
   1413c:	bxeq	lr
   14140:	ldrb	r3, [r3, #4]
   14144:	cmp	r3, #0
   14148:	ldrne	r0, [r1, #16]
   1414c:	and	r0, r0, #61440	; 0xf000
   14150:	cmp	r0, #24576	; 0x6000
   14154:	beq	141e4 <__assert_fail@plt+0x1a48>
   14158:	bhi	1417c <__assert_fail@plt+0x19e0>
   1415c:	cmp	r0, #8192	; 0x2000
   14160:	beq	141d4 <__assert_fail@plt+0x1a38>
   14164:	cmp	r0, #16384	; 0x4000
   14168:	beq	141b4 <__assert_fail@plt+0x1a18>
   1416c:	cmp	r0, #4096	; 0x1000
   14170:	beq	141a4 <__assert_fail@plt+0x1a08>
   14174:	mov	r0, #0
   14178:	bx	lr
   1417c:	cmp	r0, #40960	; 0xa000
   14180:	beq	141dc <__assert_fail@plt+0x1a40>
   14184:	cmp	r0, #49152	; 0xc000
   14188:	beq	141c4 <__assert_fail@plt+0x1a28>
   1418c:	cmp	r0, #32768	; 0x8000
   14190:	moveq	r3, #3
   14194:	bne	14174 <__assert_fail@plt+0x19d8>
   14198:	add	r2, r2, r3
   1419c:	ldrb	r0, [r2, #40]	; 0x28
   141a0:	bx	lr
   141a4:	mov	r3, #5
   141a8:	add	r2, r2, r3
   141ac:	ldrb	r0, [r2, #40]	; 0x28
   141b0:	bx	lr
   141b4:	mov	r3, #2
   141b8:	add	r2, r2, r3
   141bc:	ldrb	r0, [r2, #40]	; 0x28
   141c0:	bx	lr
   141c4:	mov	r3, #6
   141c8:	add	r2, r2, r3
   141cc:	ldrb	r0, [r2, #40]	; 0x28
   141d0:	bx	lr
   141d4:	mov	r3, #1
   141d8:	b	14198 <__assert_fail@plt+0x19fc>
   141dc:	mov	r3, #4
   141e0:	b	14198 <__assert_fail@plt+0x19fc>
   141e4:	mov	r3, #0
   141e8:	b	14198 <__assert_fail@plt+0x19fc>
   141ec:	push	{r4, lr}
   141f0:	ldr	r3, [pc, #16]	; 14208 <__assert_fail@plt+0x1a6c>
   141f4:	ldr	r2, [pc, #16]	; 1420c <__assert_fail@plt+0x1a70>
   141f8:	ldr	r1, [pc, #16]	; 14210 <__assert_fail@plt+0x1a74>
   141fc:	ldr	r0, [pc, #16]	; 14214 <__assert_fail@plt+0x1a78>
   14200:	bl	1279c <__assert_fail@plt>
   14204:	andeq	ip, r5, r0, lsr lr
   14208:	andeq	r4, r4, r8, lsr #9
   1420c:	andeq	r0, r0, r7, lsl r4
   14210:	andeq	r4, r4, ip, ror #9
   14214:	andeq	r4, r4, r0, asr #11
   14218:	ldr	r3, [r2, #44]	; 0x2c
   1421c:	push	{lr}		; (str lr, [sp, #-4]!)
   14220:	cmp	r3, #0
   14224:	sub	sp, sp, #12
   14228:	bne	1425c <__assert_fail@plt+0x1ac0>
   1422c:	add	r1, r1, #72	; 0x48
   14230:	add	r2, r2, #48	; 0x30
   14234:	ldm	r1, {r0, r1}
   14238:	mov	ip, sp
   1423c:	ldm	r2, {r2, r3}
   14240:	stm	ip, {r0, r1}
   14244:	bl	13688 <__assert_fail@plt+0xeec>
   14248:	cmp	r0, #0
   1424c:	movle	r0, #0
   14250:	movgt	r0, #1
   14254:	add	sp, sp, #12
   14258:	pop	{pc}		; (ldr pc, [sp], #4)
   1425c:	ldr	r3, [pc, #12]	; 14270 <__assert_fail@plt+0x1ad4>
   14260:	mov	r2, #234	; 0xea
   14264:	ldr	r1, [pc, #8]	; 14274 <__assert_fail@plt+0x1ad8>
   14268:	ldr	r0, [pc, #8]	; 14278 <__assert_fail@plt+0x1adc>
   1426c:	bl	1279c <__assert_fail@plt>
   14270:			; <UNDEFINED> instruction: 0x000444b4
   14274:	andeq	r4, r4, ip, ror #9
   14278:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   1427c:	ldr	r3, [r2, #44]	; 0x2c
   14280:	push	{lr}		; (str lr, [sp, #-4]!)
   14284:	cmp	r3, #0
   14288:	sub	sp, sp, #12
   1428c:	bne	142c0 <__assert_fail@plt+0x1b24>
   14290:	add	r1, r1, #88	; 0x58
   14294:	add	r2, r2, #48	; 0x30
   14298:	ldm	r1, {r0, r1}
   1429c:	mov	ip, sp
   142a0:	ldm	r2, {r2, r3}
   142a4:	stm	ip, {r0, r1}
   142a8:	bl	13688 <__assert_fail@plt+0xeec>
   142ac:	cmp	r0, #0
   142b0:	movle	r0, #0
   142b4:	movgt	r0, #1
   142b8:	add	sp, sp, #12
   142bc:	pop	{pc}		; (ldr pc, [sp], #4)
   142c0:	ldr	r3, [pc, #12]	; 142d4 <__assert_fail@plt+0x1b38>
   142c4:	ldr	r2, [pc, #12]	; 142d8 <__assert_fail@plt+0x1b3c>
   142c8:	ldr	r1, [pc, #12]	; 142dc <__assert_fail@plt+0x1b40>
   142cc:	ldr	r0, [pc, #12]	; 142e0 <__assert_fail@plt+0x1b44>
   142d0:	bl	1279c <__assert_fail@plt>
   142d4:	andeq	r4, r4, r0, asr #9
   142d8:	andeq	r0, r0, fp, lsl #2
   142dc:	andeq	r4, r4, ip, ror #9
   142e0:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   142e4:	ldr	r3, [r2, #44]	; 0x2c
   142e8:	push	{lr}		; (str lr, [sp, #-4]!)
   142ec:	cmp	r3, #0
   142f0:	sub	sp, sp, #12
   142f4:	bne	14328 <__assert_fail@plt+0x1b8c>
   142f8:	add	r1, r1, #80	; 0x50
   142fc:	add	r2, r2, #48	; 0x30
   14300:	ldm	r1, {r0, r1}
   14304:	mov	ip, sp
   14308:	ldm	r2, {r2, r3}
   1430c:	stm	ip, {r0, r1}
   14310:	bl	13688 <__assert_fail@plt+0xeec>
   14314:	cmp	r0, #0
   14318:	movle	r0, #0
   1431c:	movgt	r0, #1
   14320:	add	sp, sp, #12
   14324:	pop	{pc}		; (ldr pc, [sp], #4)
   14328:	ldr	r3, [pc, #12]	; 1433c <__assert_fail@plt+0x1ba0>
   1432c:	ldr	r2, [pc, #12]	; 14340 <__assert_fail@plt+0x1ba4>
   14330:	ldr	r1, [pc, #12]	; 14344 <__assert_fail@plt+0x1ba8>
   14334:	ldr	r0, [pc, #12]	; 14348 <__assert_fail@plt+0x1bac>
   14338:	bl	1279c <__assert_fail@plt>
   1433c:	andeq	r4, r4, ip, asr #9
   14340:			; <UNDEFINED> instruction: 0x000002b3
   14344:	andeq	r4, r4, ip, ror #9
   14348:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   1434c:	push	{r4, r5, r6, lr}
   14350:	mov	r4, r2
   14354:	ldr	r2, [r2, #156]	; 0x9c
   14358:	mov	r5, r0
   1435c:	cmp	r2, #0
   14360:	mov	r6, r1
   14364:	beq	14374 <__assert_fail@plt+0x1bd8>
   14368:	bl	18b50 <__assert_fail@plt+0x63b4>
   1436c:	cmp	r0, #0
   14370:	popne	{r4, r5, r6, pc}
   14374:	ldr	r2, [r4, #160]	; 0xa0
   14378:	mov	r1, r6
   1437c:	mov	r0, r5
   14380:	pop	{r4, r5, r6, lr}
   14384:	b	18b50 <__assert_fail@plt+0x63b4>
   14388:	ldr	r3, [r1, #16]
   1438c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14390:	and	r3, r3, #61440	; 0xf000
   14394:	cmp	r3, #16384	; 0x4000
   14398:	beq	143c0 <__assert_fail@plt+0x1c24>
   1439c:	cmp	r3, #32768	; 0x8000
   143a0:	movne	r4, #0
   143a4:	bne	143b8 <__assert_fail@plt+0x1c1c>
   143a8:	ldrd	r2, [r1, #48]	; 0x30
   143ac:	orrs	r3, r2, r3
   143b0:	moveq	r4, #1
   143b4:	movne	r4, #0
   143b8:	mov	r0, r4
   143bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   143c0:	mov	r5, r0
   143c4:	bl	124d8 <__errno_location@plt>
   143c8:	ldr	r7, [pc, #352]	; 14530 <__assert_fail@plt+0x1d94>
   143cc:	mov	r4, #0
   143d0:	ldr	r2, [pc, #348]	; 14534 <__assert_fail@plt+0x1d98>
   143d4:	ldr	r1, [r7, #12]
   143d8:	str	r4, [r0]
   143dc:	mov	r8, r0
   143e0:	ldr	r0, [r7, #16]
   143e4:	bl	124c0 <openat64@plt>
   143e8:	subs	r9, r0, #0
   143ec:	blt	14488 <__assert_fail@plt+0x1cec>
   143f0:	bl	12670 <fdopendir@plt>
   143f4:	subs	r6, r0, #0
   143f8:	strne	r4, [r8]
   143fc:	beq	144f8 <__assert_fail@plt+0x1d5c>
   14400:	bl	12664 <readdir64@plt>
   14404:	subs	r3, r0, #0
   14408:	beq	144b8 <__assert_fail@plt+0x1d1c>
   1440c:	ldrb	r2, [r3, #19]
   14410:	cmp	r2, #46	; 0x2e
   14414:	bne	14434 <__assert_fail@plt+0x1c98>
   14418:	ldrb	r2, [r3, #20]
   1441c:	mov	r0, r6
   14420:	cmp	r2, #0
   14424:	beq	14400 <__assert_fail@plt+0x1c64>
   14428:	ldrh	r3, [r3, #20]
   1442c:	cmp	r3, #46	; 0x2e
   14430:	beq	14400 <__assert_fail@plt+0x1c64>
   14434:	mov	r4, #0
   14438:	ldr	r9, [r8]
   1443c:	cmp	r9, #0
   14440:	bne	144c0 <__assert_fail@plt+0x1d24>
   14444:	mov	r0, r6
   14448:	bl	12760 <closedir@plt>
   1444c:	cmp	r0, #0
   14450:	beq	143b8 <__assert_fail@plt+0x1c1c>
   14454:	mov	r1, r5
   14458:	mov	r0, r9
   1445c:	ldr	r4, [r8]
   14460:	bl	18bf4 <__assert_fail@plt+0x6458>
   14464:	mov	r1, r4
   14468:	ldr	r2, [pc, #200]	; 14538 <__assert_fail@plt+0x1d9c>
   1446c:	mov	r4, r9
   14470:	mov	r3, r0
   14474:	mov	r0, r9
   14478:	bl	12388 <error@plt>
   1447c:	mov	r3, #1
   14480:	str	r3, [r7, #28]
   14484:	b	143b8 <__assert_fail@plt+0x1c1c>
   14488:	mov	r1, r5
   1448c:	mov	r0, r4
   14490:	ldr	r6, [r8]
   14494:	bl	18bf4 <__assert_fail@plt+0x6458>
   14498:	mov	r1, r6
   1449c:	ldr	r2, [pc, #148]	; 14538 <__assert_fail@plt+0x1d9c>
   144a0:	mov	r3, r0
   144a4:	mov	r0, r4
   144a8:	bl	12388 <error@plt>
   144ac:	mov	r3, #1
   144b0:	str	r3, [r7, #28]
   144b4:	b	143b8 <__assert_fail@plt+0x1c1c>
   144b8:	mov	r4, #1
   144bc:	b	14438 <__assert_fail@plt+0x1c9c>
   144c0:	mov	r1, r5
   144c4:	mov	r0, #0
   144c8:	bl	18bf4 <__assert_fail@plt+0x6458>
   144cc:	mov	r1, r9
   144d0:	ldr	r2, [pc, #96]	; 14538 <__assert_fail@plt+0x1d9c>
   144d4:	mov	r4, #0
   144d8:	mov	r3, r0
   144dc:	mov	r0, #0
   144e0:	bl	12388 <error@plt>
   144e4:	mov	r3, #1
   144e8:	mov	r0, r6
   144ec:	str	r3, [r7, #28]
   144f0:	bl	12760 <closedir@plt>
   144f4:	b	143b8 <__assert_fail@plt+0x1c1c>
   144f8:	mov	r1, r5
   144fc:	ldr	r4, [r8]
   14500:	bl	18bf4 <__assert_fail@plt+0x6458>
   14504:	mov	r1, r4
   14508:	ldr	r2, [pc, #40]	; 14538 <__assert_fail@plt+0x1d9c>
   1450c:	mov	r4, r6
   14510:	mov	r3, r0
   14514:	mov	r0, r6
   14518:	bl	12388 <error@plt>
   1451c:	mov	r3, #1
   14520:	mov	r0, r9
   14524:	str	r3, [r7, #28]
   14528:	bl	12748 <close@plt>
   1452c:	b	143b8 <__assert_fail@plt+0x1c1c>
   14530:	andeq	ip, r5, r0, lsr lr
   14534:	andeq	r4, sl, r0, lsl #18
   14538:	andeq	r8, r4, r8, asr #11
   1453c:	push	{r4, r5, r6, r7, r8, lr}
   14540:	mov	r8, r0
   14544:	ldr	r5, [pc, #104]	; 145b4 <__assert_fail@plt+0x1e18>
   14548:	mov	r4, r1
   1454c:	mov	r7, r2
   14550:	ldr	r0, [r5, #16]
   14554:	ldr	r1, [r5, #12]
   14558:	bl	212cc <__assert_fail@plt+0xeb30>
   1455c:	subs	r6, r0, #0
   14560:	beq	14594 <__assert_fail@plt+0x1df8>
   14564:	cmp	r7, #0
   14568:	ldr	r0, [r4]
   1456c:	movne	r2, #16
   14570:	moveq	r2, #0
   14574:	mov	r1, r6
   14578:	bl	123ac <fnmatch@plt>
   1457c:	clz	r4, r0
   14580:	lsr	r4, r4, #5
   14584:	mov	r0, r6
   14588:	bl	12154 <free@plt>
   1458c:	mov	r0, r4
   14590:	pop	{r4, r5, r6, r7, r8, pc}
   14594:	bl	124d8 <__errno_location@plt>
   14598:	mov	r1, r8
   1459c:	mov	r4, r6
   145a0:	ldr	r0, [r0]
   145a4:	bl	18c20 <__assert_fail@plt+0x6484>
   145a8:	mov	r3, #1
   145ac:	str	r3, [r5, #28]
   145b0:	b	14584 <__assert_fail@plt+0x1de8>
   145b4:	andeq	ip, r5, r0, lsr lr
   145b8:	ldr	r3, [r1, #16]
   145bc:	and	r3, r3, #61440	; 0xf000
   145c0:	cmp	r3, #40960	; 0xa000
   145c4:	beq	145d0 <__assert_fail@plt+0x1e34>
   145c8:	mov	r0, #0
   145cc:	bx	lr
   145d0:	add	r1, r2, #40	; 0x28
   145d4:	mov	r2, #1
   145d8:	b	1453c <__assert_fail@plt+0x1da0>
   145dc:	ldr	r3, [r1, #16]
   145e0:	and	r3, r3, #61440	; 0xf000
   145e4:	cmp	r3, #40960	; 0xa000
   145e8:	beq	145f4 <__assert_fail@plt+0x1e58>
   145ec:	mov	r0, #0
   145f0:	bx	lr
   145f4:	add	r1, r2, #40	; 0x28
   145f8:	mov	r2, #0
   145fc:	b	1453c <__assert_fail@plt+0x1da0>
   14600:	ldr	r3, [pc, #136]	; 14690 <__assert_fail@plt+0x1ef4>
   14604:	push	{r4, r5, r6, r7, lr}
   14608:	mov	r6, r0
   1460c:	ldr	r4, [pc, #128]	; 14694 <__assert_fail@plt+0x1ef8>
   14610:	sub	sp, sp, #12
   14614:	ldr	r0, [r3]
   14618:	mov	r7, r1
   1461c:	bl	2f858 <__assert_fail@plt+0x1d0bc>
   14620:	mov	r2, #5
   14624:	ldr	r1, [pc, #108]	; 14698 <__assert_fail@plt+0x1efc>
   14628:	mov	r0, #0
   1462c:	ldr	r5, [r4]
   14630:	bl	1222c <dcgettext@plt>
   14634:	str	r7, [sp]
   14638:	mov	r3, r6
   1463c:	mov	r1, #1
   14640:	mov	r2, r0
   14644:	mov	r0, r5
   14648:	bl	12580 <__fprintf_chk@plt>
   1464c:	cmp	r0, #0
   14650:	blt	14668 <__assert_fail@plt+0x1ecc>
   14654:	ldr	r0, [r4]
   14658:	bl	2f858 <__assert_fail@plt+0x1d0bc>
   1465c:	add	sp, sp, #12
   14660:	pop	{r4, r5, r6, r7, lr}
   14664:	b	2f2c0 <__assert_fail@plt+0x1cb24>
   14668:	bl	124d8 <__errno_location@plt>
   1466c:	mov	r2, #5
   14670:	ldr	r1, [pc, #36]	; 1469c <__assert_fail@plt+0x1f00>
   14674:	ldr	r4, [r0]
   14678:	mov	r0, #0
   1467c:	bl	1222c <dcgettext@plt>
   14680:	mov	r1, r4
   14684:	mov	r2, r0
   14688:	mov	r0, #1
   1468c:	bl	12388 <error@plt>
   14690:	andeq	ip, r5, r4, asr #10
   14694:	andeq	ip, r5, r8, lsr r5
   14698:	ldrdeq	r4, [r4], -r0
   1469c:	andeq	r4, r4, r4, ror #11
   146a0:	ldr	r3, [r2, #132]	; 0x84
   146a4:	push	{r4, r5, r6, lr}
   146a8:	mov	r4, r0
   146ac:	mov	r6, r1
   146b0:	mov	r1, r0
   146b4:	ldr	r0, [r3]
   146b8:	mov	r5, r2
   146bc:	bl	14600 <__assert_fail@plt+0x1e64>
   146c0:	cmp	r0, #0
   146c4:	popeq	{r4, r5, r6, pc}
   146c8:	mov	r2, r5
   146cc:	mov	r1, r6
   146d0:	mov	r0, r4
   146d4:	pop	{r4, r5, r6, lr}
   146d8:	b	14ff0 <__assert_fail@plt+0x2854>
   146dc:	ldr	r3, [r2, #132]	; 0x84
   146e0:	push	{r4, r5, r6, lr}
   146e4:	mov	r5, r1
   146e8:	mov	r1, r0
   146ec:	ldr	r0, [r3]
   146f0:	mov	r4, r2
   146f4:	bl	14600 <__assert_fail@plt+0x1e64>
   146f8:	cmp	r0, #0
   146fc:	popeq	{r4, r5, r6, pc}
   14700:	ldr	r3, [pc, #16]	; 14718 <__assert_fail@plt+0x1f7c>
   14704:	mov	r2, r4
   14708:	mov	r1, r5
   1470c:	ldr	r0, [r3, #12]
   14710:	pop	{r4, r5, r6, lr}
   14714:	b	14ff0 <__assert_fail@plt+0x2854>
   14718:	andeq	ip, r5, r0, lsr lr
   1471c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14720:	ldrd	r6, [r1, #96]	; 0x60
   14724:	orrs	r3, r6, r7
   14728:	beq	14744 <__assert_fail@plt+0x1fa8>
   1472c:	ldrd	r4, [r2, #40]	; 0x28
   14730:	cmp	r7, r5
   14734:	cmpeq	r6, r4
   14738:	beq	14744 <__assert_fail@plt+0x1fa8>
   1473c:	mov	r0, #0
   14740:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14744:	ldr	r3, [pc, #72]	; 14794 <__assert_fail@plt+0x1ff8>
   14748:	mov	r5, r2
   1474c:	mov	r4, r1
   14750:	mov	r2, r1
   14754:	ldr	r1, [r3, #12]
   14758:	bl	17ba8 <__assert_fail@plt+0x540c>
   1475c:	cmp	r0, #0
   14760:	bne	1473c <__assert_fail@plt+0x1fa0>
   14764:	ldrd	r8, [r4, #96]	; 0x60
   14768:	ldrd	r6, [r5, #40]	; 0x28
   1476c:	cmp	r9, r7
   14770:	cmpeq	r8, r6
   14774:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   14778:	ldrd	r0, [r4]
   1477c:	ldrd	r2, [r5, #48]	; 0x30
   14780:	cmp	r1, r3
   14784:	cmpeq	r0, r2
   14788:	moveq	r0, #1
   1478c:	movne	r0, #0
   14790:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14794:	andeq	ip, r5, r0, lsr lr
   14798:	push	{r4, r5, r6, r7, r8, r9, lr}
   1479c:	sub	sp, sp, #116	; 0x74
   147a0:	ldr	r5, [pc, #212]	; 1487c <__assert_fail@plt+0x20e0>
   147a4:	mov	r9, r1
   147a8:	mov	r8, r2
   147ac:	ldr	r3, [r5]
   147b0:	mov	r7, r0
   147b4:	str	r3, [sp, #108]	; 0x6c
   147b8:	bl	18358 <__assert_fail@plt+0x5bbc>
   147bc:	ldr	r6, [pc, #188]	; 14880 <__assert_fail@plt+0x20e4>
   147c0:	ldr	r3, [pc, #188]	; 14884 <__assert_fail@plt+0x20e8>
   147c4:	ldr	r4, [pc, #188]	; 14888 <__assert_fail@plt+0x20ec>
   147c8:	cmp	r0, #0
   147cc:	mov	r0, sp
   147d0:	moveq	r4, r3
   147d4:	bl	17ba4 <__assert_fail@plt+0x5408>
   147d8:	mov	r1, sp
   147dc:	ldr	r0, [r6, #12]
   147e0:	blx	r4
   147e4:	cmp	r0, #0
   147e8:	beq	14850 <__assert_fail@plt+0x20b4>
   147ec:	bl	18358 <__assert_fail@plt+0x5bbc>
   147f0:	mov	r4, r0
   147f4:	bl	124d8 <__errno_location@plt>
   147f8:	cmp	r4, #0
   147fc:	ldr	r4, [r0]
   14800:	beq	1480c <__assert_fail@plt+0x2070>
   14804:	cmp	r4, #2
   14808:	beq	14864 <__assert_fail@plt+0x20c8>
   1480c:	mov	r1, r7
   14810:	mov	r0, #0
   14814:	bl	18bf4 <__assert_fail@plt+0x6458>
   14818:	mov	r1, r4
   1481c:	ldr	r2, [pc, #104]	; 1488c <__assert_fail@plt+0x20f0>
   14820:	mov	r3, r0
   14824:	mov	r0, #0
   14828:	bl	12388 <error@plt>
   1482c:	mov	r0, #0
   14830:	mov	r3, #1
   14834:	str	r3, [r6, #28]
   14838:	ldr	r2, [sp, #108]	; 0x6c
   1483c:	ldr	r3, [r5]
   14840:	cmp	r2, r3
   14844:	bne	14878 <__assert_fail@plt+0x20dc>
   14848:	add	sp, sp, #116	; 0x74
   1484c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14850:	mov	r2, r8
   14854:	mov	r1, sp
   14858:	mov	r0, r7
   1485c:	bl	14124 <__assert_fail@plt+0x1988>
   14860:	b	14838 <__assert_fail@plt+0x209c>
   14864:	mov	r2, r8
   14868:	mov	r1, r9
   1486c:	mov	r0, r7
   14870:	bl	14124 <__assert_fail@plt+0x1988>
   14874:	b	14838 <__assert_fail@plt+0x209c>
   14878:	bl	12244 <__stack_chk_fail@plt>
   1487c:	andeq	fp, r5, r0, ror #24
   14880:	andeq	ip, r5, r0, lsr lr
   14884:	andeq	r8, r1, ip, lsl #3
   14888:	andeq	r8, r1, ip, lsr #4
   1488c:	andeq	r8, r4, r8, asr #11
   14890:	push	{r4, r5, r6, r7, r8, lr}
   14894:	sub	sp, sp, #8
   14898:	ldr	r5, [pc, #180]	; 14954 <__assert_fail@plt+0x21b8>
   1489c:	ldr	r3, [pc, #180]	; 14958 <__assert_fail@plt+0x21bc>
   148a0:	ldr	lr, [pc, #180]	; 1495c <__assert_fail@plt+0x21c0>
   148a4:	ldr	ip, [r5]
   148a8:	ldr	r1, [r3, #12]
   148ac:	mov	r6, r0
   148b0:	mov	r4, r2
   148b4:	ldr	r0, [r3, #16]
   148b8:	mov	r2, sp
   148bc:	ldr	r3, [lr, #64]	; 0x40
   148c0:	str	ip, [sp, #4]
   148c4:	blx	r3
   148c8:	cmp	r0, #0
   148cc:	blt	1490c <__assert_fail@plt+0x2170>
   148d0:	ldr	r0, [r4, #40]	; 0x28
   148d4:	mov	r2, #0
   148d8:	ldr	r1, [sp]
   148dc:	bl	123ac <fnmatch@plt>
   148e0:	clz	r4, r0
   148e4:	ldr	r0, [sp]
   148e8:	lsr	r4, r4, #5
   148ec:	bl	126c4 <freecon@plt>
   148f0:	ldr	r2, [sp, #4]
   148f4:	ldr	r3, [r5]
   148f8:	mov	r0, r4
   148fc:	cmp	r2, r3
   14900:	bne	14950 <__assert_fail@plt+0x21b4>
   14904:	add	sp, sp, #8
   14908:	pop	{r4, r5, r6, r7, r8, pc}
   1490c:	bl	124d8 <__errno_location@plt>
   14910:	mov	r4, #0
   14914:	mov	r2, #5
   14918:	ldr	r1, [pc, #64]	; 14960 <__assert_fail@plt+0x21c4>
   1491c:	ldr	r7, [r0]
   14920:	mov	r0, r4
   14924:	bl	1222c <dcgettext@plt>
   14928:	mov	r1, r6
   1492c:	mov	r8, r0
   14930:	mov	r0, r4
   14934:	bl	18bf4 <__assert_fail@plt+0x6458>
   14938:	mov	r2, r8
   1493c:	mov	r1, r7
   14940:	mov	r3, r0
   14944:	mov	r0, r4
   14948:	bl	12388 <error@plt>
   1494c:	b	148f0 <__assert_fail@plt+0x2154>
   14950:	bl	12244 <__stack_chk_fail@plt>
   14954:	andeq	fp, r5, r0, ror #24
   14958:	andeq	ip, r5, r0, lsr lr
   1495c:	andeq	ip, r5, ip, asr lr
   14960:	andeq	r4, r4, r4, lsl #12
   14964:	push	{r4, r5, lr}
   14968:	mov	r4, r1
   1496c:	sub	sp, sp, #12
   14970:	ldr	r1, [r1, #156]	; 0x9c
   14974:	mov	r5, r0
   14978:	bl	14aa0 <__assert_fail@plt+0x2304>
   1497c:	ldrb	ip, [r4, #19]
   14980:	ldrb	r3, [r4, #20]
   14984:	ldr	r2, [pc, #236]	; 14a78 <__assert_fail@plt+0x22dc>
   14988:	cmp	ip, #0
   1498c:	ldrb	ip, [r4, #18]
   14990:	ldr	r0, [pc, #228]	; 14a7c <__assert_fail@plt+0x22e0>
   14994:	ldr	r1, [pc, #228]	; 14a80 <__assert_fail@plt+0x22e4>
   14998:	moveq	r0, r2
   1499c:	cmp	r3, #0
   149a0:	moveq	r1, r2
   149a4:	cmp	ip, #0
   149a8:	ldr	r3, [pc, #212]	; 14a84 <__assert_fail@plt+0x22e8>
   149ac:	strd	r0, [sp]
   149b0:	moveq	r3, r2
   149b4:	mov	r1, #1
   149b8:	ldr	r2, [pc, #200]	; 14a88 <__assert_fail@plt+0x22ec>
   149bc:	mov	r0, r5
   149c0:	bl	12580 <__fprintf_chk@plt>
   149c4:	mov	r1, r4
   149c8:	mov	r0, r5
   149cc:	bl	15e08 <__assert_fail@plt+0x366c>
   149d0:	vldr	s14, [r4, #28]
   149d4:	mov	r0, r5
   149d8:	ldr	r2, [pc, #172]	; 14a8c <__assert_fail@plt+0x22f0>
   149dc:	mov	r1, #1
   149e0:	vcvt.f64.f32	d7, s14
   149e4:	vstr	d7, [sp]
   149e8:	bl	12580 <__fprintf_chk@plt>
   149ec:	ldr	r3, [pc, #156]	; 14a90 <__assert_fail@plt+0x22f4>
   149f0:	ldr	r3, [r3, #44]	; 0x2c
   149f4:	tst	r3, #64	; 0x40
   149f8:	bne	14a10 <__assert_fail@plt+0x2274>
   149fc:	ldr	r1, [r4, #160]	; 0xa0
   14a00:	mov	r0, r5
   14a04:	add	sp, sp, #12
   14a08:	pop	{r4, r5, lr}
   14a0c:	b	14aa0 <__assert_fail@plt+0x2304>
   14a10:	ldrd	r2, [r4, #164]	; 0xa4
   14a14:	mov	r1, #1
   14a18:	mov	r0, r5
   14a1c:	str	r2, [sp]
   14a20:	ldr	r2, [pc, #108]	; 14a94 <__assert_fail@plt+0x22f8>
   14a24:	bl	12580 <__fprintf_chk@plt>
   14a28:	ldr	r3, [r4, #164]	; 0xa4
   14a2c:	cmp	r3, #0
   14a30:	beq	14a60 <__assert_fail@plt+0x22c4>
   14a34:	vldr	s13, [r4, #168]	; 0xa8
   14a38:	vmov	s15, r3
   14a3c:	ldr	r2, [pc, #84]	; 14a98 <__assert_fail@plt+0x22fc>
   14a40:	mov	r1, #1
   14a44:	vcvt.f64.u32	d6, s13
   14a48:	vcvt.f64.u32	d7, s15
   14a4c:	mov	r0, r5
   14a50:	vdiv.f64	d5, d6, d7
   14a54:	vstr	d5, [sp]
   14a58:	bl	12580 <__fprintf_chk@plt>
   14a5c:	b	149fc <__assert_fail@plt+0x2260>
   14a60:	mov	r3, r5
   14a64:	mov	r2, #4
   14a68:	mov	r1, #1
   14a6c:	ldr	r0, [pc, #40]	; 14a9c <__assert_fail@plt+0x2300>
   14a70:	bl	122f8 <fwrite@plt>
   14a74:	b	149fc <__assert_fail@plt+0x2260>
   14a78:	andeq	r8, r4, r0, lsr r6
   14a7c:	andeq	r4, r4, ip, lsr #12
   14a80:	andeq	r4, r4, ip, lsr r6
   14a84:	andeq	r4, r4, ip, lsl r6
   14a88:	andeq	r4, r4, ip, asr #12
   14a8c:	andeq	r4, r4, r4, asr r6
   14a90:	andeq	ip, r5, ip, asr lr
   14a94:	andeq	r4, r4, r0, ror r6
   14a98:	andeq	r4, r4, ip, lsl #13
   14a9c:	muleq	r4, r4, r6
   14aa0:	push	{r4, r5, r6, lr}
   14aa4:	subs	r4, r1, #0
   14aa8:	popeq	{r4, r5, r6, pc}
   14aac:	mov	r5, r0
   14ab0:	ldr	r3, [r4]
   14ab4:	ldr	r0, [pc, #152]	; 14b54 <__assert_fail@plt+0x23b8>
   14ab8:	ldr	r1, [pc, #152]	; 14b58 <__assert_fail@plt+0x23bc>
   14abc:	ldr	r2, [r4, #156]	; 0x9c
   14ac0:	cmp	r3, r1
   14ac4:	cmpne	r3, r0
   14ac8:	beq	14af0 <__assert_fail@plt+0x2354>
   14acc:	b	14b30 <__assert_fail@plt+0x2394>
   14ad0:	ldr	r4, [r4, #160]	; 0xa0
   14ad4:	cmp	r4, #0
   14ad8:	popeq	{r4, r5, r6, pc}
   14adc:	ldr	r3, [r4]
   14ae0:	ldr	r2, [r4, #156]	; 0x9c
   14ae4:	cmp	r3, r1
   14ae8:	cmpne	r3, r0
   14aec:	bne	14b30 <__assert_fail@plt+0x2394>
   14af0:	cmp	r2, #0
   14af4:	beq	14ad0 <__assert_fail@plt+0x2334>
   14af8:	mov	r3, r5
   14afc:	mov	r2, #3
   14b00:	mov	r1, #1
   14b04:	ldr	r0, [pc, #80]	; 14b5c <__assert_fail@plt+0x23c0>
   14b08:	bl	122f8 <fwrite@plt>
   14b0c:	mov	r1, r4
   14b10:	mov	r0, r5
   14b14:	bl	14964 <__assert_fail@plt+0x21c8>
   14b18:	mov	r3, r5
   14b1c:	mov	r2, #3
   14b20:	mov	r1, #1
   14b24:	ldr	r0, [pc, #52]	; 14b60 <__assert_fail@plt+0x23c4>
   14b28:	pop	{r4, r5, r6, lr}
   14b2c:	b	122f8 <fwrite@plt>
   14b30:	cmp	r2, #0
   14b34:	bne	14af8 <__assert_fail@plt+0x235c>
   14b38:	ldr	r3, [r4, #160]	; 0xa0
   14b3c:	cmp	r3, #0
   14b40:	bne	14af8 <__assert_fail@plt+0x235c>
   14b44:	mov	r1, r4
   14b48:	mov	r0, r5
   14b4c:	pop	{r4, r5, r6, lr}
   14b50:	b	14964 <__assert_fail@plt+0x21c8>
   14b54:	andeq	r4, r1, ip, asr #6
   14b58:	andeq	r4, r1, r4, ror fp
   14b5c:	muleq	r4, ip, r6
   14b60:	andeq	r4, r4, r0, lsr #13
   14b64:	mov	r0, #1
   14b68:	bx	lr
   14b6c:	mov	r0, #1
   14b70:	bx	lr
   14b74:	push	{r4, r5, r6, lr}
   14b78:	mov	r4, r2
   14b7c:	ldr	r2, [r2, #156]	; 0x9c
   14b80:	mov	r5, r0
   14b84:	cmp	r2, #0
   14b88:	mov	r6, r1
   14b8c:	beq	14b9c <__assert_fail@plt+0x2400>
   14b90:	bl	18b50 <__assert_fail@plt+0x63b4>
   14b94:	cmp	r0, #0
   14b98:	popeq	{r4, r5, r6, pc}
   14b9c:	ldr	r2, [r4, #160]	; 0xa0
   14ba0:	mov	r1, r6
   14ba4:	mov	r0, r5
   14ba8:	pop	{r4, r5, r6, lr}
   14bac:	b	18b50 <__assert_fail@plt+0x63b4>
   14bb0:	push	{r4, r5, r6, lr}
   14bb4:	ldr	r5, [r2, #40]	; 0x28
   14bb8:	bl	216b8 <__assert_fail@plt+0xef1c>
   14bbc:	mov	r4, r0
   14bc0:	bl	2186c <__assert_fail@plt+0xf0d0>
   14bc4:	mov	r1, r4
   14bc8:	mov	r2, #0
   14bcc:	mov	r0, r5
   14bd0:	bl	123ac <fnmatch@plt>
   14bd4:	mov	r5, r0
   14bd8:	mov	r0, r4
   14bdc:	bl	12154 <free@plt>
   14be0:	clz	r0, r5
   14be4:	lsr	r0, r0, #5
   14be8:	pop	{r4, r5, r6, pc}
   14bec:	push	{r4, r5, lr}
   14bf0:	sub	sp, sp, #20
   14bf4:	ldrb	r5, [r2, #32]
   14bf8:	ldr	lr, [pc, #56]	; 14c38 <__assert_fail@plt+0x249c>
   14bfc:	ldr	ip, [pc, #56]	; 14c3c <__assert_fail@plt+0x24a0>
   14c00:	ldr	r4, [r2, #44]	; 0x2c
   14c04:	mov	r3, r1
   14c08:	str	r5, [sp, #8]
   14c0c:	ldr	r1, [lr, #40]	; 0x28
   14c10:	ldr	r2, [lr, #20]
   14c14:	str	r1, [sp, #4]
   14c18:	str	r2, [sp]
   14c1c:	str	r4, [sp, #12]
   14c20:	ldr	r2, [ip, #12]
   14c24:	ldr	r1, [ip, #16]
   14c28:	bl	20460 <__assert_fail@plt+0xdcc4>
   14c2c:	mov	r0, #1
   14c30:	add	sp, sp, #20
   14c34:	pop	{r4, r5, pc}
   14c38:	andeq	ip, r5, ip, asr lr
   14c3c:	andeq	ip, r5, r0, lsr lr
   14c40:	b	14bec <__assert_fail@plt+0x2450>
   14c44:	push	{r4, r5, r6, r7, r8, lr}
   14c48:	sub	sp, sp, #264	; 0x108
   14c4c:	ldr	r8, [pc, #208]	; 14d24 <__assert_fail@plt+0x2588>
   14c50:	subs	r5, r1, #0
   14c54:	mov	r6, r0
   14c58:	ldr	r3, [r8]
   14c5c:	str	r3, [sp, #260]	; 0x104
   14c60:	beq	14cf4 <__assert_fail@plt+0x2558>
   14c64:	ldr	r7, [pc, #188]	; 14d28 <__assert_fail@plt+0x258c>
   14c68:	add	r4, sp, #4
   14c6c:	ldr	r3, [r5, #4]
   14c70:	cmp	r3, #0
   14c74:	beq	14cd8 <__assert_fail@plt+0x253c>
   14c78:	mov	r1, r3
   14c7c:	mov	r2, #256	; 0x100
   14c80:	mov	r0, r4
   14c84:	bl	1231c <__stpcpy_chk@plt>
   14c88:	sub	r3, r0, r4
   14c8c:	subs	r3, r3, #1
   14c90:	bcc	14cc8 <__assert_fail@plt+0x252c>
   14c94:	ldrb	r1, [r4, r3]
   14c98:	add	r2, r4, r3
   14c9c:	cmp	r1, #9
   14ca0:	cmpne	r1, #32
   14ca4:	beq	14cc0 <__assert_fail@plt+0x2524>
   14ca8:	b	14ccc <__assert_fail@plt+0x2530>
   14cac:	ldrb	r1, [r2, #-1]!
   14cb0:	cmp	r1, #9
   14cb4:	cmpne	r1, #32
   14cb8:	bne	14d18 <__assert_fail@plt+0x257c>
   14cbc:	mov	r3, r0
   14cc0:	subs	r0, r3, #1
   14cc4:	bcs	14cac <__assert_fail@plt+0x2510>
   14cc8:	mov	r0, r4
   14ccc:	mov	r3, r4
   14cd0:	mov	r2, #0
   14cd4:	strb	r2, [r0]
   14cd8:	mov	r2, r7
   14cdc:	mov	r1, #1
   14ce0:	mov	r0, r6
   14ce4:	bl	12580 <__fprintf_chk@plt>
   14ce8:	ldr	r5, [r5, #152]	; 0x98
   14cec:	cmp	r5, #0
   14cf0:	bne	14c6c <__assert_fail@plt+0x24d0>
   14cf4:	mov	r1, r6
   14cf8:	mov	r0, #10
   14cfc:	bl	12634 <fputc@plt>
   14d00:	ldr	r2, [sp, #260]	; 0x104
   14d04:	ldr	r3, [r8]
   14d08:	cmp	r2, r3
   14d0c:	bne	14d20 <__assert_fail@plt+0x2584>
   14d10:	add	sp, sp, #264	; 0x108
   14d14:	pop	{r4, r5, r6, r7, r8, pc}
   14d18:	add	r0, r4, r3
   14d1c:	b	14ccc <__assert_fail@plt+0x2530>
   14d20:	bl	12244 <__stack_chk_fail@plt>
   14d24:	andeq	fp, r5, r0, ror #24
   14d28:	andeq	r4, r4, r4, lsr #13
   14d2c:	cmp	r1, #0
   14d30:	bxeq	lr
   14d34:	b	14964 <__assert_fail@plt+0x21c8>
   14d38:	ldr	r3, [pc, #80]	; 14d90 <__assert_fail@plt+0x25f4>
   14d3c:	ldr	r3, [r3, #44]	; 0x2c
   14d40:	tst	r3, #64	; 0x40
   14d44:	bxeq	lr
   14d48:	push	{r4, r5, r6, lr}
   14d4c:	mov	r2, #42	; 0x2a
   14d50:	ldr	r5, [pc, #60]	; 14d94 <__assert_fail@plt+0x25f8>
   14d54:	mov	r4, r0
   14d58:	mov	r1, #1
   14d5c:	ldr	r3, [r5]
   14d60:	ldr	r0, [pc, #48]	; 14d98 <__assert_fail@plt+0x25fc>
   14d64:	bl	122f8 <fwrite@plt>
   14d68:	cmp	r4, #0
   14d6c:	ldr	r0, [r5]
   14d70:	beq	14d80 <__assert_fail@plt+0x25e4>
   14d74:	mov	r1, r4
   14d78:	bl	14964 <__assert_fail@plt+0x21c8>
   14d7c:	ldr	r0, [r5]
   14d80:	mov	r1, r0
   14d84:	pop	{r4, r5, r6, lr}
   14d88:	mov	r0, #10
   14d8c:	b	12634 <fputc@plt>
   14d90:	andeq	ip, r5, ip, asr lr
   14d94:	andeq	ip, r5, r8, lsr r5
   14d98:	andeq	r4, r4, ip, lsr #13
   14d9c:	cmp	r0, #0
   14da0:	bxeq	lr
   14da4:	ldr	r2, [r0]
   14da8:	push	{r4, lr}
   14dac:	cmp	r2, #0
   14db0:	beq	14ed4 <__assert_fail@plt+0x2738>
   14db4:	ldr	r3, [r0, #172]	; 0xac
   14db8:	cmp	r3, #0
   14dbc:	beq	14ec0 <__assert_fail@plt+0x2724>
   14dc0:	ldr	r1, [r3, #12]
   14dc4:	cmp	r1, #0
   14dc8:	cmpne	r2, r1
   14dcc:	bne	14e5c <__assert_fail@plt+0x26c0>
   14dd0:	ldr	lr, [pc, #352]	; 14f38 <__assert_fail@plt+0x279c>
   14dd4:	ldr	ip, [pc, #352]	; 14f3c <__assert_fail@plt+0x27a0>
   14dd8:	ldr	r3, [r3]
   14ddc:	cmp	r3, #6
   14de0:	ldrls	pc, [pc, r3, lsl #2]
   14de4:	b	14e28 <__assert_fail@plt+0x268c>
   14de8:	andeq	r4, r1, r0, ror lr
   14dec:	muleq	r1, r4, lr
   14df0:	andeq	r4, r1, r0, ror lr
   14df4:	muleq	r1, r4, lr
   14df8:	muleq	r1, r4, lr
   14dfc:	muleq	r1, r4, lr
   14e00:	andeq	r4, r1, r4, lsl #28
   14e04:	ldrb	r3, [r0, #16]
   14e08:	cmp	r3, #0
   14e0c:	beq	14f10 <__assert_fail@plt+0x2774>
   14e10:	cmp	r2, lr
   14e14:	cmpne	r2, ip
   14e18:	beq	14e28 <__assert_fail@plt+0x268c>
   14e1c:	ldrb	r3, [r0, #17]
   14e20:	cmp	r3, #0
   14e24:	beq	14f24 <__assert_fail@plt+0x2788>
   14e28:	ldr	r0, [r0, #152]	; 0x98
   14e2c:	cmp	r0, #0
   14e30:	popeq	{r4, pc}
   14e34:	ldr	r2, [r0]
   14e38:	cmp	r2, #0
   14e3c:	beq	14ed4 <__assert_fail@plt+0x2738>
   14e40:	ldr	r3, [r0, #172]	; 0xac
   14e44:	cmp	r3, #0
   14e48:	beq	14ec0 <__assert_fail@plt+0x2724>
   14e4c:	ldr	r1, [r3, #12]
   14e50:	cmp	r1, #0
   14e54:	cmpne	r2, r1
   14e58:	beq	14dd8 <__assert_fail@plt+0x263c>
   14e5c:	ldr	r3, [pc, #220]	; 14f40 <__assert_fail@plt+0x27a4>
   14e60:	ldr	r2, [pc, #220]	; 14f44 <__assert_fail@plt+0x27a8>
   14e64:	ldr	r1, [pc, #220]	; 14f48 <__assert_fail@plt+0x27ac>
   14e68:	ldr	r0, [pc, #220]	; 14f4c <__assert_fail@plt+0x27b0>
   14e6c:	bl	1279c <__assert_fail@plt>
   14e70:	cmp	r3, #0
   14e74:	beq	14efc <__assert_fail@plt+0x2760>
   14e78:	cmp	r3, #2
   14e7c:	bne	14e28 <__assert_fail@plt+0x268c>
   14e80:	ldr	r3, [pc, #184]	; 14f40 <__assert_fail@plt+0x27a4>
   14e84:	ldr	r2, [pc, #196]	; 14f50 <__assert_fail@plt+0x27b4>
   14e88:	ldr	r1, [pc, #184]	; 14f48 <__assert_fail@plt+0x27ac>
   14e8c:	ldr	r0, [pc, #192]	; 14f54 <__assert_fail@plt+0x27b8>
   14e90:	bl	1279c <__assert_fail@plt>
   14e94:	ldrb	r3, [r0, #17]
   14e98:	cmp	r3, #0
   14e9c:	bne	14ee8 <__assert_fail@plt+0x274c>
   14ea0:	ldrb	r3, [r0, #16]
   14ea4:	cmp	r3, #0
   14ea8:	beq	14e28 <__assert_fail@plt+0x268c>
   14eac:	ldr	r3, [pc, #140]	; 14f40 <__assert_fail@plt+0x27a4>
   14eb0:	ldr	r2, [pc, #160]	; 14f58 <__assert_fail@plt+0x27bc>
   14eb4:	ldr	r1, [pc, #140]	; 14f48 <__assert_fail@plt+0x27ac>
   14eb8:	ldr	r0, [pc, #156]	; 14f5c <__assert_fail@plt+0x27c0>
   14ebc:	bl	1279c <__assert_fail@plt>
   14ec0:	ldr	r3, [pc, #120]	; 14f40 <__assert_fail@plt+0x27a4>
   14ec4:	ldr	r2, [pc, #148]	; 14f60 <__assert_fail@plt+0x27c4>
   14ec8:	ldr	r1, [pc, #120]	; 14f48 <__assert_fail@plt+0x27ac>
   14ecc:	ldr	r0, [pc, #144]	; 14f64 <__assert_fail@plt+0x27c8>
   14ed0:	bl	1279c <__assert_fail@plt>
   14ed4:	ldr	r3, [pc, #100]	; 14f40 <__assert_fail@plt+0x27a4>
   14ed8:	mov	r2, #1376	; 0x560
   14edc:	ldr	r1, [pc, #100]	; 14f48 <__assert_fail@plt+0x27ac>
   14ee0:	ldr	r0, [pc, #128]	; 14f68 <__assert_fail@plt+0x27cc>
   14ee4:	bl	1279c <__assert_fail@plt>
   14ee8:	ldr	r3, [pc, #80]	; 14f40 <__assert_fail@plt+0x27a4>
   14eec:	ldr	r2, [pc, #120]	; 14f6c <__assert_fail@plt+0x27d0>
   14ef0:	ldr	r1, [pc, #80]	; 14f48 <__assert_fail@plt+0x27ac>
   14ef4:	ldr	r0, [pc, #116]	; 14f70 <__assert_fail@plt+0x27d4>
   14ef8:	bl	1279c <__assert_fail@plt>
   14efc:	ldr	r3, [pc, #60]	; 14f40 <__assert_fail@plt+0x27a4>
   14f00:	ldr	r2, [pc, #108]	; 14f74 <__assert_fail@plt+0x27d8>
   14f04:	ldr	r1, [pc, #60]	; 14f48 <__assert_fail@plt+0x27ac>
   14f08:	ldr	r0, [pc, #104]	; 14f78 <__assert_fail@plt+0x27dc>
   14f0c:	bl	1279c <__assert_fail@plt>
   14f10:	ldr	r3, [pc, #40]	; 14f40 <__assert_fail@plt+0x27a4>
   14f14:	ldr	r2, [pc, #96]	; 14f7c <__assert_fail@plt+0x27e0>
   14f18:	ldr	r1, [pc, #40]	; 14f48 <__assert_fail@plt+0x27ac>
   14f1c:	ldr	r0, [pc, #92]	; 14f80 <__assert_fail@plt+0x27e4>
   14f20:	bl	1279c <__assert_fail@plt>
   14f24:	ldr	r3, [pc, #20]	; 14f40 <__assert_fail@plt+0x27a4>
   14f28:	ldr	r2, [pc, #84]	; 14f84 <__assert_fail@plt+0x27e8>
   14f2c:	ldr	r1, [pc, #20]	; 14f48 <__assert_fail@plt+0x27ac>
   14f30:	ldr	r0, [pc, #80]	; 14f88 <__assert_fail@plt+0x27ec>
   14f34:	bl	1279c <__assert_fail@plt>
   14f38:	strheq	r4, [r1], -r0
   14f3c:	andeq	r3, r1, r4, lsl #28
   14f40:	ldrdeq	r4, [r4], -r8
   14f44:	andeq	r0, r0, ip, ror #10
   14f48:	andeq	r4, r4, ip, ror #9
   14f4c:	andeq	r4, r4, r8, lsl #14
   14f50:	andeq	r0, r0, sp, ror r5
   14f54:	andeq	r4, r4, r8, asr r7
   14f58:	muleq	r0, r6, r5
   14f5c:	andeq	r4, r4, r4, asr #15
   14f60:	andeq	r0, r0, r3, ror #10
   14f64:	strdeq	r4, [r4], -r0
   14f68:	ldrdeq	r4, [r4], -r8
   14f6c:	muleq	r0, r5, r5
   14f70:	andeq	r4, r4, ip, lsr #15
   14f74:	andeq	r0, r0, ip, ror r5
   14f78:	andeq	r4, r4, r4, lsr r7
   14f7c:	andeq	r0, r0, r1, lsl #11
   14f80:	andeq	r4, r4, r8, lsl #15
   14f84:	andeq	r0, r0, r7, lsl #11
   14f88:	muleq	r4, r8, r7
   14f8c:	push	{r4, r5, r6, r7, r8, lr}
   14f90:	mov	r6, r0
   14f94:	mov	r0, #8
   14f98:	mov	r7, r1
   14f9c:	mov	r8, r2
   14fa0:	bl	2df04 <__assert_fail@plt+0x1b768>
   14fa4:	mov	r4, #0
   14fa8:	mov	r1, r8
   14fac:	mov	r2, r4
   14fb0:	mov	r5, r0
   14fb4:	str	r0, [r6]
   14fb8:	mov	r0, r7
   14fbc:	str	r4, [r5, #4]
   14fc0:	bl	124c0 <openat64@plt>
   14fc4:	ldr	r3, [r6]
   14fc8:	str	r0, [r5]
   14fcc:	ldr	r0, [r3]
   14fd0:	cmp	r0, r4
   14fd4:	blt	14fe8 <__assert_fail@plt+0x284c>
   14fd8:	mov	r1, #1
   14fdc:	bl	214c4 <__assert_fail@plt+0xed28>
   14fe0:	mov	r0, #1
   14fe4:	pop	{r4, r5, r6, r7, r8, pc}
   14fe8:	mov	r0, r4
   14fec:	pop	{r4, r5, r6, r7, r8, pc}
   14ff0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ff4:	mov	r6, r0
   14ff8:	sub	sp, sp, #44	; 0x2c
   14ffc:	ldr	r0, [r2]
   15000:	mov	r5, r2
   15004:	bl	18bd0 <__assert_fail@plt+0x6434>
   15008:	subs	r3, r0, #0
   1500c:	str	r3, [sp, #32]
   15010:	bne	15194 <__assert_fail@plt+0x29f8>
   15014:	ldr	r3, [pc, #652]	; 152a8 <__assert_fail@plt+0x2b0c>
   15018:	ldr	r2, [r5, #144]	; 0x90
   1501c:	ldr	r3, [r3]
   15020:	cmp	r2, r3
   15024:	bne	15258 <__assert_fail@plt+0x2abc>
   15028:	ldr	r3, [sp, #32]
   1502c:	mov	r9, r3
   15030:	str	r3, [sp, #28]
   15034:	str	r3, [sp, #36]	; 0x24
   15038:	ldrb	r4, [r5, #40]	; 0x28
   1503c:	add	r8, r5, #44	; 0x2c
   15040:	add	r7, r5, #88	; 0x58
   15044:	cmp	r4, #0
   15048:	bne	1512c <__assert_fail@plt+0x2990>
   1504c:	ldr	r3, [r5, #136]	; 0x88
   15050:	cmp	r3, #0
   15054:	ble	150b4 <__assert_fail@plt+0x2918>
   15058:	ldr	r3, [r5, #132]	; 0x84
   1505c:	ldr	sl, [r3, r4, lsl #2]
   15060:	add	r4, r4, #1
   15064:	mov	r0, sl
   15068:	bl	1249c <strlen@plt>
   1506c:	mov	fp, r0
   15070:	mov	r0, r6
   15074:	bl	1249c <strlen@plt>
   15078:	mov	r1, #0
   1507c:	str	r1, [sp, #16]
   15080:	ldr	r1, [sp, #28]
   15084:	mov	r3, fp
   15088:	str	r1, [sp]
   1508c:	mov	r2, sl
   15090:	str	r6, [sp, #8]
   15094:	str	r9, [sp, #4]
   15098:	mov	r1, r7
   1509c:	str	r0, [sp, #12]
   150a0:	mov	r0, r8
   150a4:	bl	1f220 <__assert_fail@plt+0xca84>
   150a8:	ldr	r3, [r5, #136]	; 0x88
   150ac:	cmp	r3, r4
   150b0:	bgt	15058 <__assert_fail@plt+0x28bc>
   150b4:	mov	r1, r7
   150b8:	mov	r0, r8
   150bc:	bl	1f3d8 <__assert_fail@plt+0xcc3c>
   150c0:	ldr	r3, [r5, #148]	; 0x94
   150c4:	and	r2, r3, #127	; 0x7f
   150c8:	lsl	r3, r3, #16
   150cc:	orrs	r3, r2, r3, lsr #24
   150d0:	ldr	r3, [sp, #32]
   150d4:	moveq	r4, #1
   150d8:	movne	r4, #0
   150dc:	cmp	r3, #0
   150e0:	bne	150fc <__assert_fail@plt+0x2960>
   150e4:	ldr	r3, [sp, #36]	; 0x24
   150e8:	cmp	r3, #0
   150ec:	bne	15180 <__assert_fail@plt+0x29e4>
   150f0:	mov	r0, r4
   150f4:	add	sp, sp, #44	; 0x2c
   150f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   150fc:	ldr	r0, [r5, #144]	; 0x90
   15100:	bl	2d910 <__assert_fail@plt+0x1b174>
   15104:	ldr	r3, [sp, #36]	; 0x24
   15108:	cmp	r3, #0
   1510c:	strne	r4, [sp, #32]
   15110:	beq	150f0 <__assert_fail@plt+0x2954>
   15114:	ldr	r0, [sp, #36]	; 0x24
   15118:	bl	12154 <free@plt>
   1511c:	ldr	r4, [sp, #32]
   15120:	mov	r0, r4
   15124:	add	sp, sp, #44	; 0x2c
   15128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1512c:	mov	r0, r6
   15130:	bl	1249c <strlen@plt>
   15134:	ldr	r2, [sp, #28]
   15138:	mov	r3, #0
   1513c:	str	r2, [sp]
   15140:	str	r3, [sp, #8]
   15144:	str	r9, [sp, #4]
   15148:	mov	r2, r6
   1514c:	mov	r1, r7
   15150:	add	r3, r0, #1
   15154:	mov	r0, r8
   15158:	bl	1ef84 <__assert_fail@plt+0xc7e8>
   1515c:	ldr	r3, [r5, #116]	; 0x74
   15160:	cmp	r3, #0
   15164:	bne	15220 <__assert_fail@plt+0x2a84>
   15168:	ldr	r3, [sp, #36]	; 0x24
   1516c:	cmp	r3, #0
   15170:	beq	150f0 <__assert_fail@plt+0x2954>
   15174:	ldr	r3, [sp, #32]
   15178:	cmp	r3, #0
   1517c:	bne	15114 <__assert_fail@plt+0x2978>
   15180:	ldr	r3, [pc, #292]	; 152ac <__assert_fail@plt+0x2b10>
   15184:	mov	r2, #207	; 0xcf
   15188:	ldr	r1, [pc, #288]	; 152b0 <__assert_fail@plt+0x2b14>
   1518c:	ldr	r0, [pc, #288]	; 152b4 <__assert_fail@plt+0x2b18>
   15190:	bl	1279c <__assert_fail@plt>
   15194:	ldr	r7, [pc, #284]	; 152b8 <__assert_fail@plt+0x2b1c>
   15198:	ldr	r3, [r5, #116]	; 0x74
   1519c:	cmp	r3, #0
   151a0:	ldr	r4, [r7, #12]
   151a4:	bne	151f4 <__assert_fail@plt+0x2a58>
   151a8:	mov	r1, #47	; 0x2f
   151ac:	mov	r0, r4
   151b0:	bl	124a8 <strchr@plt>
   151b4:	add	r8, r5, #144	; 0x90
   151b8:	cmp	r0, #0
   151bc:	beq	15240 <__assert_fail@plt+0x2aa4>
   151c0:	mov	r0, r4
   151c4:	bl	21774 <__assert_fail@plt+0xefd8>
   151c8:	ldr	r1, [r7, #16]
   151cc:	mov	r4, r0
   151d0:	mov	r2, r0
   151d4:	mov	r0, r8
   151d8:	bl	14f8c <__assert_fail@plt+0x27f0>
   151dc:	mov	r8, r0
   151e0:	mov	r0, r4
   151e4:	bl	12154 <free@plt>
   151e8:	cmp	r8, #0
   151ec:	beq	1526c <__assert_fail@plt+0x2ad0>
   151f0:	ldr	r4, [r7, #12]
   151f4:	mov	r0, r4
   151f8:	bl	216b8 <__assert_fail@plt+0xef1c>
   151fc:	ldrb	r3, [r0]
   15200:	str	r0, [sp, #36]	; 0x24
   15204:	mov	r6, r0
   15208:	cmp	r3, #47	; 0x2f
   1520c:	beq	15230 <__assert_fail@plt+0x2a94>
   15210:	ldr	r3, [pc, #164]	; 152bc <__assert_fail@plt+0x2b20>
   15214:	mov	r9, #2
   15218:	str	r3, [sp, #28]
   1521c:	b	15038 <__assert_fail@plt+0x289c>
   15220:	ldr	r3, [pc, #144]	; 152b8 <__assert_fail@plt+0x2b1c>
   15224:	mov	r2, #1
   15228:	strb	r2, [r3, #32]
   1522c:	b	15168 <__assert_fail@plt+0x29cc>
   15230:	mov	r9, #0
   15234:	str	r9, [sp, #28]
   15238:	ldr	r6, [sp, #36]	; 0x24
   1523c:	b	15038 <__assert_fail@plt+0x289c>
   15240:	mov	r0, r8
   15244:	ldr	r2, [pc, #116]	; 152c0 <__assert_fail@plt+0x2b24>
   15248:	ldr	r1, [r7, #16]
   1524c:	bl	14f8c <__assert_fail@plt+0x27f0>
   15250:	mov	r8, r0
   15254:	b	151e8 <__assert_fail@plt+0x2a4c>
   15258:	ldr	r3, [pc, #76]	; 152ac <__assert_fail@plt+0x2b10>
   1525c:	mov	r2, #147	; 0x93
   15260:	ldr	r1, [pc, #72]	; 152b0 <__assert_fail@plt+0x2b14>
   15264:	ldr	r0, [pc, #88]	; 152c4 <__assert_fail@plt+0x2b28>
   15268:	bl	1279c <__assert_fail@plt>
   1526c:	bl	124d8 <__errno_location@plt>
   15270:	mov	r2, #5
   15274:	ldr	r1, [pc, #76]	; 152c8 <__assert_fail@plt+0x2b2c>
   15278:	ldr	r4, [r0]
   1527c:	mov	r0, r8
   15280:	bl	1222c <dcgettext@plt>
   15284:	mov	r1, r6
   15288:	mov	r5, r0
   1528c:	mov	r0, r8
   15290:	bl	18bf4 <__assert_fail@plt+0x6458>
   15294:	mov	r2, r5
   15298:	mov	r1, r4
   1529c:	mov	r3, r0
   152a0:	mov	r0, #1
   152a4:	bl	12388 <error@plt>
   152a8:	andeq	ip, r5, ip, asr r5
   152ac:	muleq	r4, ip, sl
   152b0:	strdeq	r4, [r4], -ip
   152b4:	andeq	r4, r4, r8, lsr #22
   152b8:	andeq	ip, r5, r0, lsr lr
   152bc:			; <UNDEFINED> instruction: 0x00044ab4
   152c0:	andeq	r7, r4, r8, ror r8
   152c4:	andeq	r4, r4, r4, lsl #22
   152c8:			; <UNDEFINED> instruction: 0x00044ab8
   152cc:	push	{r4, r5, r6, r7, r8, r9, lr}
   152d0:	sub	sp, sp, #28
   152d4:	ldr	r8, [pc, #852]	; 15630 <__assert_fail@plt+0x2e94>
   152d8:	ldr	r0, [pc, #852]	; 15634 <__assert_fail@plt+0x2e98>
   152dc:	mov	r7, r1
   152e0:	ldr	r2, [r8]
   152e4:	ldr	r0, [r0]
   152e8:	str	r2, [sp, #20]
   152ec:	mov	r9, r3
   152f0:	bl	2f858 <__assert_fail@plt+0x1d0bc>
   152f4:	ldr	r3, [pc, #828]	; 15638 <__assert_fail@plt+0x2e9c>
   152f8:	ldr	r0, [r3]
   152fc:	bl	2f858 <__assert_fail@plt+0x1d0bc>
   15300:	ldr	r3, [pc, #820]	; 1563c <__assert_fail@plt+0x2ea0>
   15304:	ldr	r2, [r3]
   15308:	cmp	r2, #0
   1530c:	bne	15400 <__assert_fail@plt+0x2c64>
   15310:	bl	12604 <fork@plt>
   15314:	cmn	r0, #1
   15318:	mov	r5, r0
   1531c:	beq	155f0 <__assert_fail@plt+0x2e54>
   15320:	cmp	r0, #0
   15324:	bne	153a4 <__assert_fail@plt+0x2c08>
   15328:	ldr	r4, [r7, #104]	; 0x68
   1532c:	cmp	r4, #0
   15330:	beq	1561c <__assert_fail@plt+0x2e80>
   15334:	bl	124d8 <__errno_location@plt>
   15338:	ldrb	r3, [r7, #100]	; 0x64
   1533c:	cmp	r3, #0
   15340:	mov	r6, r0
   15344:	bne	154f8 <__assert_fail@plt+0x2d5c>
   15348:	mov	r0, r4
   1534c:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   15350:	cmp	r0, #0
   15354:	bne	15564 <__assert_fail@plt+0x2dc8>
   15358:	bl	17f34 <__assert_fail@plt+0x5798>
   1535c:	cmp	r0, #0
   15360:	bne	15474 <__assert_fail@plt+0x2cd8>
   15364:	mov	r0, r9
   15368:	bl	1f8b4 <__assert_fail@plt+0xd118>
   1536c:	cmp	r0, #0
   15370:	beq	1547c <__assert_fail@plt+0x2ce0>
   15374:	mov	r4, #7
   15378:	str	r4, [r6]
   1537c:	ldr	r1, [r9]
   15380:	mov	r0, #0
   15384:	bl	18bf4 <__assert_fail@plt+0x6458>
   15388:	mov	r1, r4
   1538c:	ldr	r2, [pc, #684]	; 15640 <__assert_fail@plt+0x2ea4>
   15390:	mov	r3, r0
   15394:	mov	r0, #0
   15398:	bl	12388 <error@plt>
   1539c:	mov	r0, #1
   153a0:	bl	1219c <_exit@plt>
   153a4:	add	r6, r7, #108	; 0x6c
   153a8:	b	153bc <__assert_fail@plt+0x2c20>
   153ac:	bl	124d8 <__errno_location@plt>
   153b0:	ldr	r4, [r0]
   153b4:	cmp	r4, #4
   153b8:	bne	15418 <__assert_fail@plt+0x2c7c>
   153bc:	mov	r2, #0
   153c0:	mov	r1, r6
   153c4:	mov	r0, r5
   153c8:	bl	12328 <waitpid@plt>
   153cc:	cmn	r0, #1
   153d0:	beq	153ac <__assert_fail@plt+0x2c10>
   153d4:	ldr	r2, [r7, #108]	; 0x6c
   153d8:	and	r3, r2, #127	; 0x7f
   153dc:	add	r3, r3, #1
   153e0:	sxtb	r3, r3
   153e4:	cmp	r3, #1
   153e8:	bgt	15490 <__assert_fail@plt+0x2cf4>
   153ec:	asr	r2, r2, #8
   153f0:	tst	r2, #255	; 0xff
   153f4:	bne	154d8 <__assert_fail@plt+0x2d3c>
   153f8:	mov	r0, #1
   153fc:	b	1545c <__assert_fail@plt+0x2cc0>
   15400:	mov	r2, #0
   15404:	mov	r1, r2
   15408:	mov	r0, #17
   1540c:	str	r2, [r3]
   15410:	bl	121f0 <signal@plt>
   15414:	b	15310 <__assert_fail@plt+0x2b74>
   15418:	mov	r2, #5
   1541c:	ldr	r1, [pc, #544]	; 15644 <__assert_fail@plt+0x2ea8>
   15420:	mov	r0, #0
   15424:	bl	1222c <dcgettext@plt>
   15428:	ldr	r1, [r9]
   1542c:	mov	r5, r0
   15430:	mov	r0, #0
   15434:	bl	18bf4 <__assert_fail@plt+0x6458>
   15438:	mov	r2, r5
   1543c:	mov	r1, r4
   15440:	mov	r3, r0
   15444:	mov	r0, #0
   15448:	bl	12388 <error@plt>
   1544c:	ldr	r3, [pc, #500]	; 15648 <__assert_fail@plt+0x2eac>
   15450:	mov	r0, #0
   15454:	mov	r2, #1
   15458:	str	r2, [r3, #28]
   1545c:	ldr	r2, [sp, #20]
   15460:	ldr	r3, [r8]
   15464:	cmp	r2, r3
   15468:	bne	15618 <__assert_fail@plt+0x2e7c>
   1546c:	add	sp, sp, #28
   15470:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15474:	bl	20140 <__assert_fail@plt+0xd9a4>
   15478:	b	15364 <__assert_fail@plt+0x2bc8>
   1547c:	mov	r1, r9
   15480:	ldr	r0, [r9]
   15484:	bl	121b4 <execvp@plt>
   15488:	ldr	r4, [r6]
   1548c:	b	1537c <__assert_fail@plt+0x2be0>
   15490:	mov	r2, #5
   15494:	ldr	r1, [pc, #432]	; 1564c <__assert_fail@plt+0x2eb0>
   15498:	mov	r0, #0
   1549c:	bl	1222c <dcgettext@plt>
   154a0:	ldr	r3, [pc, #424]	; 15650 <__assert_fail@plt+0x2eb4>
   154a4:	ldr	r2, [r9]
   154a8:	ldr	r1, [r3, #72]	; 0x48
   154ac:	mov	r4, r0
   154b0:	mov	r0, #0
   154b4:	bl	2d52c <__assert_fail@plt+0x1ad90>
   154b8:	ldr	r3, [r7, #108]	; 0x6c
   154bc:	mov	r1, #0
   154c0:	and	r3, r3, #127	; 0x7f
   154c4:	str	r3, [sp]
   154c8:	mov	r2, r4
   154cc:	mov	r3, r0
   154d0:	mov	r0, r1
   154d4:	bl	12388 <error@plt>
   154d8:	ldrb	r3, [r7]
   154dc:	cmp	r3, #0
   154e0:	beq	153f8 <__assert_fail@plt+0x2c5c>
   154e4:	ldr	r2, [pc, #348]	; 15648 <__assert_fail@plt+0x2eac>
   154e8:	mov	r3, #1
   154ec:	mov	r0, r3
   154f0:	str	r3, [r2, #28]
   154f4:	b	1545c <__assert_fail@plt+0x2cc0>
   154f8:	ldr	r2, [pc, #340]	; 15654 <__assert_fail@plt+0x2eb8>
   154fc:	add	r3, sp, #8
   15500:	ldm	r2, {r0, r1, r2}
   15504:	stmia	r3!, {r0, r1}
   15508:	mov	r0, r5
   1550c:	strh	r2, [r3]
   15510:	bl	12748 <close@plt>
   15514:	cmp	r0, #0
   15518:	blt	155b8 <__assert_fail@plt+0x2e1c>
   1551c:	mov	r1, #131072	; 0x20000
   15520:	add	r0, sp, #8
   15524:	bl	123b8 <open64@plt>
   15528:	cmp	r0, #0
   1552c:	bge	15348 <__assert_fail@plt+0x2bac>
   15530:	add	r1, sp, #8
   15534:	mov	r0, r5
   15538:	ldr	r7, [r6]
   1553c:	bl	18bf4 <__assert_fail@plt+0x6458>
   15540:	mov	r1, r7
   15544:	ldr	r2, [pc, #244]	; 15640 <__assert_fail@plt+0x2ea4>
   15548:	mov	r3, r0
   1554c:	mov	r0, r5
   15550:	bl	12388 <error@plt>
   15554:	mov	r0, r4
   15558:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   1555c:	cmp	r0, #0
   15560:	beq	15358 <__assert_fail@plt+0x2bbc>
   15564:	mov	r2, #5
   15568:	ldr	r1, [pc, #232]	; 15658 <__assert_fail@plt+0x2ebc>
   1556c:	mov	r0, #0
   15570:	ldr	r5, [r6]
   15574:	bl	1222c <dcgettext@plt>
   15578:	ldr	r3, [r4]
   1557c:	cmp	r3, #0
   15580:	mov	r2, r0
   15584:	blt	155a4 <__assert_fail@plt+0x2e08>
   15588:	ldr	r3, [pc, #204]	; 1565c <__assert_fail@plt+0x2ec0>
   1558c:	mov	r1, r3
   15590:	str	r1, [sp]
   15594:	mov	r0, #0
   15598:	mov	r1, r5
   1559c:	bl	12388 <error@plt>
   155a0:	b	1539c <__assert_fail@plt+0x2c00>
   155a4:	ldr	r1, [r4, #4]
   155a8:	cmp	r1, #0
   155ac:	ldrne	r3, [pc, #172]	; 15660 <__assert_fail@plt+0x2ec4>
   155b0:	bne	15590 <__assert_fail@plt+0x2df4>
   155b4:	b	15588 <__assert_fail@plt+0x2dec>
   155b8:	mov	r2, #5
   155bc:	ldr	r1, [pc, #160]	; 15664 <__assert_fail@plt+0x2ec8>
   155c0:	mov	r0, r5
   155c4:	ldr	r7, [r6]
   155c8:	bl	1222c <dcgettext@plt>
   155cc:	mov	r1, r7
   155d0:	mov	r2, r0
   155d4:	mov	r0, r5
   155d8:	bl	12388 <error@plt>
   155dc:	mov	r0, r4
   155e0:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   155e4:	cmp	r0, #0
   155e8:	beq	1539c <__assert_fail@plt+0x2c00>
   155ec:	b	15564 <__assert_fail@plt+0x2dc8>
   155f0:	bl	124d8 <__errno_location@plt>
   155f4:	mov	r2, #5
   155f8:	ldr	r1, [pc, #104]	; 15668 <__assert_fail@plt+0x2ecc>
   155fc:	ldr	r4, [r0]
   15600:	mov	r0, #0
   15604:	bl	1222c <dcgettext@plt>
   15608:	mov	r1, r4
   1560c:	mov	r2, r0
   15610:	mov	r0, #1
   15614:	bl	12388 <error@plt>
   15618:	bl	12244 <__stack_chk_fail@plt>
   1561c:	ldr	r3, [pc, #72]	; 1566c <__assert_fail@plt+0x2ed0>
   15620:	ldr	r2, [pc, #72]	; 15670 <__assert_fail@plt+0x2ed4>
   15624:	ldr	r1, [pc, #72]	; 15674 <__assert_fail@plt+0x2ed8>
   15628:	ldr	r0, [pc, #72]	; 15678 <__assert_fail@plt+0x2edc>
   1562c:	bl	1279c <__assert_fail@plt>
   15630:	andeq	fp, r5, r0, ror #24
   15634:	andeq	ip, r5, r4, asr #10
   15638:	andeq	ip, r5, r8, lsr r5
   1563c:	andeq	ip, r5, ip, ror #3
   15640:	andeq	r8, r4, r8, asr #11
   15644:	muleq	r4, r4, fp
   15648:	andeq	ip, r5, r0, lsr lr
   1564c:	andeq	r4, r4, ip, lsr #23
   15650:	andeq	ip, r5, ip, asr lr
   15654:	andeq	r4, r4, r8, asr #23
   15658:	andeq	r4, r4, r8, asr fp
   1565c:	andeq	r8, r4, r0, lsr r6
   15660:	andeq	r6, r4, r0, lsr lr
   15664:	andeq	r4, r4, r8, ror fp
   15668:	andeq	r4, r4, r0, lsr fp
   1566c:	andeq	r4, r4, ip, lsr #21
   15670:	andeq	r0, r0, r3, lsr r1
   15674:	strdeq	r4, [r4], -ip
   15678:	andeq	r4, r4, ip, lsr fp
   1567c:	push	{r4, lr}
   15680:	mov	r4, r0
   15684:	cmp	r4, #0
   15688:	beq	156b0 <__assert_fail@plt+0x2f14>
   1568c:	ldrb	r0, [r4, #16]
   15690:	cmp	r0, #0
   15694:	popne	{r4, pc}
   15698:	ldr	r0, [r4, #156]	; 0x9c
   1569c:	bl	1567c <__assert_fail@plt+0x2ee0>
   156a0:	cmp	r0, #0
   156a4:	popne	{r4, pc}
   156a8:	ldr	r4, [r4, #160]	; 0xa0
   156ac:	b	15684 <__assert_fail@plt+0x2ee8>
   156b0:	mov	r0, r4
   156b4:	pop	{r4, pc}
   156b8:	push	{r4, lr}
   156bc:	sub	sp, sp, #16
   156c0:	ldr	r4, [pc, #64]	; 15708 <__assert_fail@plt+0x2f6c>
   156c4:	ldr	r0, [r0]
   156c8:	ldr	ip, [r1]
   156cc:	ldr	r3, [r4]
   156d0:	mov	r2, #4
   156d4:	str	r0, [sp, #4]
   156d8:	add	r1, sp, #8
   156dc:	add	r0, sp, r2
   156e0:	str	r3, [sp, #12]
   156e4:	str	ip, [sp, #8]
   156e8:	bl	12208 <memcmp@plt>
   156ec:	ldr	r2, [sp, #12]
   156f0:	ldr	r3, [r4]
   156f4:	cmp	r2, r3
   156f8:	bne	15704 <__assert_fail@plt+0x2f68>
   156fc:	add	sp, sp, #16
   15700:	pop	{r4, pc}
   15704:	bl	12244 <__stack_chk_fail@plt>
   15708:	andeq	fp, r5, r0, ror #24
   1570c:	push	{r4, r5, r6, lr}
   15710:	mov	r5, r0
   15714:	mov	r0, #176	; 0xb0
   15718:	mov	r4, r1
   1571c:	mov	r6, r2
   15720:	bl	2e0c0 <__assert_fail@plt+0x1b924>
   15724:	mov	r2, #3
   15728:	mov	r3, #0
   1572c:	cmp	r4, #2
   15730:	str	r4, [r0, #12]
   15734:	str	r2, [r0, #8]
   15738:	str	r3, [r0, #24]
   1573c:	beq	1575c <__assert_fail@plt+0x2fc0>
   15740:	cmp	r4, r2
   15744:	beq	157b8 <__assert_fail@plt+0x301c>
   15748:	cmp	r4, #1
   1574c:	beq	1579c <__assert_fail@plt+0x3000>
   15750:	str	r5, [r0, #160]	; 0xa0
   15754:	str	r0, [r6]
   15758:	pop	{r4, r5, r6, pc}
   1575c:	vldr	s15, [r5, #28]
   15760:	vldr	s14, [pc, #100]	; 157cc <__assert_fail@plt+0x3030>
   15764:	ldr	r2, [pc, #104]	; 157d4 <__assert_fail@plt+0x3038>
   15768:	ldr	r3, [pc, #104]	; 157d8 <__assert_fail@plt+0x303c>
   1576c:	vcmpe.f32	s15, s14
   15770:	str	r2, [r0]
   15774:	str	r3, [r0, #4]
   15778:	vmrs	APSR_nzcv, fpscr
   1577c:	vmovgt.f32	s15, s14
   15780:	bgt	15794 <__assert_fail@plt+0x2ff8>
   15784:	vcmp.f32	s15, #0.0
   15788:	vldr	s14, [pc, #64]	; 157d0 <__assert_fail@plt+0x3034>
   1578c:	vmrs	APSR_nzcv, fpscr
   15790:	vmovmi.f32	s15, s14
   15794:	vstr	s15, [r0, #28]
   15798:	b	15750 <__assert_fail@plt+0x2fb4>
   1579c:	ldr	r1, [pc, #56]	; 157dc <__assert_fail@plt+0x3040>
   157a0:	ldr	r3, [pc, #56]	; 157e0 <__assert_fail@plt+0x3044>
   157a4:	mov	r2, #1065353216	; 0x3f800000
   157a8:	str	r1, [r0]
   157ac:	str	r2, [r0, #28]
   157b0:	str	r3, [r0, #4]
   157b4:	b	15750 <__assert_fail@plt+0x2fb4>
   157b8:	vldr	s15, [r5, #28]
   157bc:	vldr	s14, [pc, #8]	; 157cc <__assert_fail@plt+0x3030>
   157c0:	ldr	r2, [pc, #28]	; 157e4 <__assert_fail@plt+0x3048>
   157c4:	ldr	r3, [pc, #28]	; 157e8 <__assert_fail@plt+0x304c>
   157c8:	b	1576c <__assert_fail@plt+0x2fd0>
   157cc:	svccc	0x00800000
   157d0:	andeq	r0, r0, r0
   157d4:	andeq	r4, r1, ip, asr #6
   157d8:	andeq	r4, r4, r0, asr #25
   157dc:	andeq	r3, r1, r0, lsl #18
   157e0:			; <UNDEFINED> instruction: 0x00044cbc
   157e4:	andeq	r4, r1, r4, ror fp
   157e8:	andeq	r4, r4, r4, asr #25
   157ec:	cmp	r1, #0
   157f0:	push	{r4, lr}
   157f4:	mov	r4, r0
   157f8:	beq	15820 <__assert_fail@plt+0x3084>
   157fc:	ldr	r3, [r0, #8]
   15800:	cmp	r3, #3
   15804:	beq	15820 <__assert_fail@plt+0x3084>
   15808:	b	1584c <__assert_fail@plt+0x30b0>
   1580c:	mov	r1, #0
   15810:	bl	157ec <__assert_fail@plt+0x3050>
   15814:	ldr	r4, [r4, #160]	; 0xa0
   15818:	cmp	r4, #0
   1581c:	popeq	{r4, pc}
   15820:	ldr	r0, [r4, #156]	; 0x9c
   15824:	cmp	r0, #0
   15828:	beq	15814 <__assert_fail@plt+0x3078>
   1582c:	ldr	r3, [r0, #8]
   15830:	cmp	r3, #3
   15834:	beq	1580c <__assert_fail@plt+0x3070>
   15838:	ldr	r3, [pc, #32]	; 15860 <__assert_fail@plt+0x30c4>
   1583c:	ldr	r2, [pc, #32]	; 15864 <__assert_fail@plt+0x30c8>
   15840:	ldr	r1, [pc, #32]	; 15868 <__assert_fail@plt+0x30cc>
   15844:	ldr	r0, [pc, #32]	; 1586c <__assert_fail@plt+0x30d0>
   15848:	bl	1279c <__assert_fail@plt>
   1584c:	ldr	r3, [pc, #12]	; 15860 <__assert_fail@plt+0x30c4>
   15850:	mov	r2, #1216	; 0x4c0
   15854:	ldr	r1, [pc, #12]	; 15868 <__assert_fail@plt+0x30cc>
   15858:	ldr	r0, [pc, #16]	; 15870 <__assert_fail@plt+0x30d4>
   1585c:	bl	1279c <__assert_fail@plt>
   15860:	ldrdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   15864:	andeq	r0, r0, r5, asr #9
   15868:	andeq	r4, r4, r8, asr #25
   1586c:	andeq	r4, r4, r4, ror #25
   15870:	ldrdeq	r4, [r4], -r0
   15874:	push	{r4, r5, r6, r7, r8, lr}
   15878:	ldr	r4, [r0]
   1587c:	cmp	r4, #0
   15880:	beq	15a04 <__assert_fail@plt+0x3268>
   15884:	mov	r7, r2
   15888:	ldr	r2, [r4, #8]
   1588c:	mov	r5, r0
   15890:	mov	r6, r1
   15894:	cmp	r2, #5
   15898:	ldrls	pc, [pc, r2, lsl #2]
   1589c:	b	15ae0 <__assert_fail@plt+0x3344>
   158a0:	andeq	r5, r1, r4, lsl #20
   158a4:	muleq	r1, r4, r9
   158a8:	andeq	r5, r1, r0, ror r9
   158ac:	andeq	r5, r1, r8, asr sl
   158b0:	strdeq	r5, [r1], -r4
   158b4:			; <UNDEFINED> instruction: 0x000158b8
   158b8:	ldr	r3, [r3]
   158bc:	ldrb	r4, [r4, #33]	; 0x21
   158c0:	sub	r3, r3, #2
   158c4:	cmp	r3, #1
   158c8:	bls	159a0 <__assert_fail@plt+0x3204>
   158cc:	cmp	r4, #0
   158d0:	bne	159a8 <__assert_fail@plt+0x320c>
   158d4:	ldr	r1, [pc, #528]	; 15aec <__assert_fail@plt+0x3350>
   158d8:	mov	r2, #5
   158dc:	mov	r0, #0
   158e0:	bl	1222c <dcgettext@plt>
   158e4:	mov	r1, #0
   158e8:	mov	r2, r0
   158ec:	mov	r0, #1
   158f0:	bl	12388 <error@plt>
   158f4:	ldr	r3, [r4, #152]	; 0x98
   158f8:	cmp	r3, #0
   158fc:	beq	15a7c <__assert_fail@plt+0x32e0>
   15900:	ldrb	r7, [r3, #33]	; 0x21
   15904:	cmp	r7, #0
   15908:	bne	15a7c <__assert_fail@plt+0x32e0>
   1590c:	ldr	r2, [r3, #8]
   15910:	str	r3, [r0]
   15914:	cmp	r2, #5
   15918:	ldreq	r1, [pc, #464]	; 15af0 <__assert_fail@plt+0x3354>
   1591c:	beq	158dc <__assert_fail@plt+0x3140>
   15920:	add	r3, r4, #8
   15924:	add	r2, r4, #4
   15928:	mov	r1, r7
   1592c:	bl	15874 <__assert_fail@plt+0x30d8>
   15930:	ldr	r3, [r5]
   15934:	cmp	r3, #0
   15938:	mov	r4, r0
   1593c:	beq	15a88 <__assert_fail@plt+0x32ec>
   15940:	ldr	r2, [r3, #8]
   15944:	cmp	r2, #5
   15948:	ldreq	r2, [r3, #152]	; 0x98
   1594c:	streq	r2, [r5]
   15950:	bne	15a88 <__assert_fail@plt+0x32ec>
   15954:	cmp	r2, #0
   15958:	beq	15968 <__assert_fail@plt+0x31cc>
   1595c:	ldr	r3, [r2, #12]
   15960:	cmp	r3, r6
   15964:	bgt	159cc <__assert_fail@plt+0x3230>
   15968:	mov	r0, r4
   1596c:	pop	{r4, r5, r6, r7, r8, pc}
   15970:	ldr	r2, [r4, #152]	; 0x98
   15974:	add	r3, r4, #8
   15978:	str	r2, [r0]
   1597c:	mov	r1, #4
   15980:	add	r2, r4, #4
   15984:	bl	15874 <__assert_fail@plt+0x30d8>
   15988:	str	r0, [r4, #160]	; 0xa0
   1598c:	ldr	r2, [r5]
   15990:	b	15954 <__assert_fail@plt+0x31b8>
   15994:	ldr	r2, [r4, #152]	; 0x98
   15998:	str	r2, [r0]
   1599c:	b	15954 <__assert_fail@plt+0x31b8>
   159a0:	cmp	r4, #0
   159a4:	beq	15a94 <__assert_fail@plt+0x32f8>
   159a8:	mov	r2, #5
   159ac:	ldr	r1, [pc, #320]	; 15af4 <__assert_fail@plt+0x3358>
   159b0:	mov	r0, #0
   159b4:	bl	1222c <dcgettext@plt>
   159b8:	ldr	r3, [r7]
   159bc:	mov	r1, #0
   159c0:	mov	r2, r0
   159c4:	mov	r0, #1
   159c8:	bl	12388 <error@plt>
   159cc:	ldr	r3, [r2, #8]
   159d0:	cmp	r3, #5
   159d4:	beq	15a04 <__assert_fail@plt+0x3268>
   159d8:	cmp	r3, #5
   159dc:	ldrls	pc, [pc, r3, lsl #2]
   159e0:	b	15ab8 <__assert_fail@plt+0x331c>
   159e4:	andeq	r5, r1, r4, lsl #20
   159e8:	andeq	r5, r1, r4, lsl #20
   159ec:	andeq	r5, r1, r4, lsl #20
   159f0:	andeq	r5, r1, r0, lsl sl
   159f4:	andeq	r5, r1, r4, lsl #20
   159f8:	strdeq	r5, [r1], -ip
   159fc:	cmp	r4, #0
   15a00:	bne	15968 <__assert_fail@plt+0x31cc>
   15a04:	mov	r2, #5
   15a08:	ldr	r1, [pc, #232]	; 15af8 <__assert_fail@plt+0x335c>
   15a0c:	b	158dc <__assert_fail@plt+0x3140>
   15a10:	str	r4, [r2, #156]	; 0x9c
   15a14:	ldr	r4, [r5]
   15a18:	add	r3, r2, #8
   15a1c:	add	r2, r2, #4
   15a20:	ldr	r0, [r4, #152]	; 0x98
   15a24:	ldrsh	r1, [r4, #12]
   15a28:	str	r0, [r5]
   15a2c:	mov	r0, r5
   15a30:	bl	15874 <__assert_fail@plt+0x30d8>
   15a34:	str	r0, [r4, #160]	; 0xa0
   15a38:	ldr	r2, [r5]
   15a3c:	cmp	r2, #0
   15a40:	beq	15968 <__assert_fail@plt+0x31cc>
   15a44:	ldr	r3, [r2, #12]
   15a48:	cmp	r6, r3
   15a4c:	bge	15968 <__assert_fail@plt+0x31cc>
   15a50:	ldr	r3, [r2, #8]
   15a54:	b	159d8 <__assert_fail@plt+0x323c>
   15a58:	ldr	r1, [pc, #156]	; 15afc <__assert_fail@plt+0x3360>
   15a5c:	mov	r2, #5
   15a60:	mov	r0, #0
   15a64:	bl	1222c <dcgettext@plt>
   15a68:	ldr	r3, [r4, #4]
   15a6c:	mov	r1, #0
   15a70:	mov	r2, r0
   15a74:	mov	r0, #1
   15a78:	bl	12388 <error@plt>
   15a7c:	mov	r2, #5
   15a80:	ldr	r1, [pc, #120]	; 15b00 <__assert_fail@plt+0x3364>
   15a84:	b	15a60 <__assert_fail@plt+0x32c4>
   15a88:	mov	r2, #5
   15a8c:	ldr	r1, [pc, #112]	; 15b04 <__assert_fail@plt+0x3368>
   15a90:	b	158dc <__assert_fail@plt+0x3140>
   15a94:	mov	r2, #5
   15a98:	ldr	r1, [pc, #104]	; 15b08 <__assert_fail@plt+0x336c>
   15a9c:	mov	r0, r4
   15aa0:	bl	1222c <dcgettext@plt>
   15aa4:	ldr	r3, [r7]
   15aa8:	mov	r1, r4
   15aac:	mov	r2, r0
   15ab0:	mov	r0, #1
   15ab4:	bl	12388 <error@plt>
   15ab8:	mov	r2, #5
   15abc:	ldr	r1, [pc, #72]	; 15b0c <__assert_fail@plt+0x3370>
   15ac0:	mov	r0, #0
   15ac4:	bl	1222c <dcgettext@plt>
   15ac8:	ldr	r3, [r5]
   15acc:	mov	r1, #0
   15ad0:	ldr	r3, [r3, #8]
   15ad4:	mov	r2, r0
   15ad8:	mov	r0, #1
   15adc:	bl	12388 <error@plt>
   15ae0:	mov	r2, #5
   15ae4:	ldr	r1, [pc, #36]	; 15b10 <__assert_fail@plt+0x3374>
   15ae8:	b	158dc <__assert_fail@plt+0x3140>
   15aec:			; <UNDEFINED> instruction: 0x00044dbc
   15af0:	andeq	r4, r4, r8, asr lr
   15af4:	muleq	r4, r8, sp
   15af8:	andeq	r4, r4, r4, lsl #26
   15afc:	andeq	r4, r4, r8, lsl sp
   15b00:	andeq	r4, r4, r8, ror #27
   15b04:	muleq	r4, r0, lr
   15b08:	andeq	r4, r4, ip, ror #26
   15b0c:	andeq	r4, r4, r8, lsl #30
   15b10:	andeq	r4, r4, r4, ror #29
   15b14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b18:	sub	sp, sp, #20
   15b1c:	ldr	r7, [pc, #476]	; 15d00 <__assert_fail@plt+0x3564>
   15b20:	subs	r5, r0, #0
   15b24:	ldr	r3, [r7]
   15b28:	str	r3, [sp, #12]
   15b2c:	beq	15b7c <__assert_fail@plt+0x33e0>
   15b30:	ldr	r0, [r5, #160]	; 0xa0
   15b34:	bl	15b14 <__assert_fail@plt+0x3378>
   15b38:	ldr	r0, [r5, #156]	; 0x9c
   15b3c:	bl	15b14 <__assert_fail@plt+0x3378>
   15b40:	ldrb	r3, [r5, #18]
   15b44:	cmp	r3, #0
   15b48:	movne	r8, #3
   15b4c:	beq	15b94 <__assert_fail@plt+0x33f8>
   15b50:	ldr	r3, [r5]
   15b54:	ldr	r1, [pc, #424]	; 15d04 <__assert_fail@plt+0x3568>
   15b58:	ldr	r2, [pc, #424]	; 15d08 <__assert_fail@plt+0x356c>
   15b5c:	cmp	r3, r2
   15b60:	cmpne	r3, r1
   15b64:	bne	15bb8 <__assert_fail@plt+0x341c>
   15b68:	ldrb	r3, [r5, #40]	; 0x28
   15b6c:	cmp	r3, #0
   15b70:	movne	r8, #7
   15b74:	moveq	r8, #8
   15b78:	str	r8, [r5, #24]
   15b7c:	ldr	r2, [sp, #12]
   15b80:	ldr	r3, [r7]
   15b84:	cmp	r2, r3
   15b88:	bne	15cd8 <__assert_fail@plt+0x353c>
   15b8c:	add	sp, sp, #20
   15b90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b94:	ldrb	r3, [r5, #20]
   15b98:	cmp	r3, #0
   15b9c:	movne	r8, #1
   15ba0:	bne	15b50 <__assert_fail@plt+0x33b4>
   15ba4:	ldrb	r3, [r5, #19]
   15ba8:	cmp	r3, #0
   15bac:	movne	r8, #2
   15bb0:	moveq	r8, #0
   15bb4:	b	15b50 <__assert_fail@plt+0x33b4>
   15bb8:	ldr	r2, [pc, #332]	; 15d0c <__assert_fail@plt+0x3570>
   15bbc:	cmp	r3, r2
   15bc0:	ldreq	r3, [r5, #24]
   15bc4:	beq	15c40 <__assert_fail@plt+0x34a4>
   15bc8:	ldr	sl, [pc, #320]	; 15d10 <__assert_fail@plt+0x3574>
   15bcc:	ldr	r2, [sl]
   15bd0:	cmp	r2, #0
   15bd4:	beq	15c74 <__assert_fail@plt+0x34d8>
   15bd8:	ldr	r9, [pc, #308]	; 15d14 <__assert_fail@plt+0x3578>
   15bdc:	mov	sl, #59	; 0x3b
   15be0:	mov	r6, #0
   15be4:	str	r3, [sp, #4]
   15be8:	add	r4, r6, sl
   15bec:	add	r0, sp, #4
   15bf0:	lsr	r4, r4, #1
   15bf4:	add	fp, r9, r4, lsl #3
   15bf8:	mov	r1, fp
   15bfc:	bl	156b8 <__assert_fail@plt+0x2f1c>
   15c00:	cmp	r0, #0
   15c04:	blt	15c4c <__assert_fail@plt+0x34b0>
   15c08:	beq	15c5c <__assert_fail@plt+0x34c0>
   15c0c:	add	r6, r4, #1
   15c10:	cmp	r6, sl
   15c14:	bcc	15be8 <__assert_fail@plt+0x344c>
   15c18:	mov	r2, #5
   15c1c:	ldr	r1, [pc, #244]	; 15d18 <__assert_fail@plt+0x357c>
   15c20:	mov	r0, #0
   15c24:	bl	1222c <dcgettext@plt>
   15c28:	mov	r1, #0
   15c2c:	ldr	r3, [r5, #4]
   15c30:	mov	r2, r0
   15c34:	mov	r0, r1
   15c38:	bl	12388 <error@plt>
   15c3c:	mov	r3, #10
   15c40:	cmp	r8, r3
   15c44:	movcc	r8, r3
   15c48:	b	15b78 <__assert_fail@plt+0x33dc>
   15c4c:	cmp	r6, r4
   15c50:	bcs	15c18 <__assert_fail@plt+0x347c>
   15c54:	mov	sl, r4
   15c58:	b	15be8 <__assert_fail@plt+0x344c>
   15c5c:	cmp	fp, #0
   15c60:	beq	15c18 <__assert_fail@plt+0x347c>
   15c64:	ldr	r3, [fp, #4]
   15c68:	cmp	r8, r3
   15c6c:	movcc	r8, r3
   15c70:	b	15b78 <__assert_fail@plt+0x33dc>
   15c74:	ldr	r3, [pc, #160]	; 15d1c <__assert_fail@plt+0x3580>
   15c78:	mov	r2, #8
   15c7c:	mov	r1, #59	; 0x3b
   15c80:	ldr	r0, [pc, #140]	; 15d14 <__assert_fail@plt+0x3578>
   15c84:	bl	126b8 <qsort@plt>
   15c88:	ldr	r4, [pc, #144]	; 15d20 <__assert_fail@plt+0x3584>
   15c8c:	add	r9, r4, #464	; 0x1d0
   15c90:	sub	r6, r4, #8
   15c94:	mov	r1, r6
   15c98:	mov	r0, r4
   15c9c:	bl	156b8 <__assert_fail@plt+0x2f1c>
   15ca0:	cmp	r0, #0
   15ca4:	blt	15cf0 <__assert_fail@plt+0x3554>
   15ca8:	mov	r0, r6
   15cac:	mov	r1, r4
   15cb0:	bl	156b8 <__assert_fail@plt+0x2f1c>
   15cb4:	cmp	r0, #0
   15cb8:	bgt	15cdc <__assert_fail@plt+0x3540>
   15cbc:	add	r4, r4, #8
   15cc0:	cmp	r9, r4
   15cc4:	bne	15c90 <__assert_fail@plt+0x34f4>
   15cc8:	mov	r3, #1
   15ccc:	str	r3, [sl]
   15cd0:	ldr	r3, [r5]
   15cd4:	b	15bd8 <__assert_fail@plt+0x343c>
   15cd8:	bl	12244 <__stack_chk_fail@plt>
   15cdc:	ldr	r3, [pc, #64]	; 15d24 <__assert_fail@plt+0x3588>
   15ce0:	ldr	r2, [pc, #64]	; 15d28 <__assert_fail@plt+0x358c>
   15ce4:	ldr	r1, [pc, #64]	; 15d2c <__assert_fail@plt+0x3590>
   15ce8:	ldr	r0, [pc, #64]	; 15d30 <__assert_fail@plt+0x3594>
   15cec:	bl	1279c <__assert_fail@plt>
   15cf0:	ldr	r2, [pc, #60]	; 15d34 <__assert_fail@plt+0x3598>
   15cf4:	mov	r1, #0
   15cf8:	mov	r0, #1
   15cfc:	bl	12388 <error@plt>
   15d00:	andeq	fp, r5, r0, ror #24
   15d04:	andeq	r3, r1, ip, lsr #23
   15d08:			; <UNDEFINED> instruction: 0x00013bb0
   15d0c:	strdeq	sl, [r1], -r8
   15d10:	andeq	ip, r5, r0, ror #10
   15d14:	strdeq	ip, [r5], -r0
   15d18:	andeq	r4, r4, ip, lsr pc
   15d1c:			; <UNDEFINED> instruction: 0x000156b8
   15d20:	strdeq	ip, [r5], -r8
   15d24:	andeq	r4, r4, r8, ror #23
   15d28:	andeq	r0, r0, r7, ror #7
   15d2c:	andeq	r4, r4, r8, asr #25
   15d30:	andeq	r4, r4, r0, lsr pc
   15d34:	andeq	r4, r4, ip, lsr #31
   15d38:	push	{r4, r5, r6, lr}
   15d3c:	mov	r5, r0
   15d40:	ldr	r0, [r0, #156]	; 0x9c
   15d44:	cmp	r0, #0
   15d48:	moveq	r4, r0
   15d4c:	beq	15d58 <__assert_fail@plt+0x35bc>
   15d50:	bl	15d38 <__assert_fail@plt+0x359c>
   15d54:	mov	r4, r0
   15d58:	ldr	r0, [r5, #160]	; 0xa0
   15d5c:	cmp	r0, #0
   15d60:	beq	15d68 <__assert_fail@plt+0x35cc>
   15d64:	bl	15d38 <__assert_fail@plt+0x359c>
   15d68:	ldr	r3, [r5, #24]
   15d6c:	cmp	r4, r3
   15d70:	movcs	r3, r4
   15d74:	cmp	r3, r0
   15d78:	movcs	r0, r3
   15d7c:	pop	{r4, r5, r6, pc}
   15d80:	push	{r4, r5, r6, r7, r8, lr}
   15d84:	cmp	r1, #0
   15d88:	ldr	r5, [pc, #112]	; 15e00 <__assert_fail@plt+0x3664>
   15d8c:	moveq	r6, #0
   15d90:	movne	r6, #16
   15d94:	ldr	r3, [r5, #4]
   15d98:	cmp	r3, #0
   15d9c:	beq	15de8 <__assert_fail@plt+0x364c>
   15da0:	mov	r7, r0
   15da4:	mov	r4, #0
   15da8:	b	15db8 <__assert_fail@plt+0x361c>
   15dac:	ldr	r3, [r5, #4]
   15db0:	cmp	r3, r4
   15db4:	bls	15de0 <__assert_fail@plt+0x3644>
   15db8:	ldr	r3, [r5, #8]
   15dbc:	mov	r2, r6
   15dc0:	mov	r0, r7
   15dc4:	ldr	r1, [r3, r4, lsl #2]
   15dc8:	bl	123ac <fnmatch@plt>
   15dcc:	add	r4, r4, #1
   15dd0:	cmp	r0, #0
   15dd4:	bne	15dac <__assert_fail@plt+0x3610>
   15dd8:	mov	r0, #1
   15ddc:	pop	{r4, r5, r6, r7, r8, pc}
   15de0:	mov	r0, #0
   15de4:	pop	{r4, r5, r6, r7, r8, pc}
   15de8:	mov	r2, r6
   15dec:	ldr	r1, [pc, #16]	; 15e04 <__assert_fail@plt+0x3668>
   15df0:	bl	123ac <fnmatch@plt>
   15df4:	clz	r0, r0
   15df8:	lsr	r0, r0, #5
   15dfc:	pop	{r4, r5, r6, r7, r8, pc}
   15e00:	andeq	ip, r5, r0, ror #10
   15e04:	andeq	r7, r4, r8, ror r8
   15e08:	ldr	r2, [r1, #36]	; 0x24
   15e0c:	ldr	r3, [r1, #4]
   15e10:	cmp	r2, #0
   15e14:	beq	15e38 <__assert_fail@plt+0x369c>
   15e18:	push	{lr}		; (str lr, [sp, #-4]!)
   15e1c:	sub	sp, sp, #12
   15e20:	mov	r1, #1
   15e24:	str	r2, [sp]
   15e28:	ldr	r2, [pc, #20]	; 15e44 <__assert_fail@plt+0x36a8>
   15e2c:	bl	12580 <__fprintf_chk@plt>
   15e30:	add	sp, sp, #12
   15e34:	pop	{pc}		; (ldr pc, [sp], #4)
   15e38:	mov	r1, r0
   15e3c:	mov	r0, r3
   15e40:	b	12724 <fputs@plt>
   15e44:	ldrdeq	r4, [r4], -r0
   15e48:	ldr	r3, [pc, #4]	; 15e54 <__assert_fail@plt+0x36b8>
   15e4c:	ldr	r0, [r3, #12]
   15e50:	bx	lr
   15e54:	andeq	ip, r5, r0, ror #10
   15e58:	push	{r4, lr}
   15e5c:	subs	r4, r0, #0
   15e60:	beq	15fec <__assert_fail@plt+0x3850>
   15e64:	ldr	r0, [r4, #160]	; 0xa0
   15e68:	cmp	r0, #0
   15e6c:	beq	15e74 <__assert_fail@plt+0x36d8>
   15e70:	bl	15e58 <__assert_fail@plt+0x36bc>
   15e74:	ldr	r0, [r4, #156]	; 0x9c
   15e78:	cmp	r0, #0
   15e7c:	beq	15e84 <__assert_fail@plt+0x36e8>
   15e80:	bl	15e58 <__assert_fail@plt+0x36bc>
   15e84:	ldr	r3, [r4, #8]
   15e88:	cmp	r3, #5
   15e8c:	beq	15fd8 <__assert_fail@plt+0x383c>
   15e90:	cmp	r3, #4
   15e94:	beq	16000 <__assert_fail@plt+0x3864>
   15e98:	cmp	r3, #3
   15e9c:	ldrls	pc, [pc, r3, lsl #2]
   15ea0:	b	1608c <__assert_fail@plt+0x38f0>
   15ea4:	andeq	r5, r1, ip, lsr #30
   15ea8:	andeq	r5, r1, ip, asr #30
   15eac:	andeq	r5, r1, r8, ror pc
   15eb0:			; <UNDEFINED> instruction: 0x00015eb4
   15eb4:	ldr	r3, [r4]
   15eb8:	ldr	r2, [pc, #488]	; 160a8 <__assert_fail@plt+0x390c>
   15ebc:	cmp	r3, r2
   15ec0:	beq	15fac <__assert_fail@plt+0x3810>
   15ec4:	ldr	r2, [pc, #480]	; 160ac <__assert_fail@plt+0x3910>
   15ec8:	cmp	r3, r2
   15ecc:	beq	15fd0 <__assert_fail@plt+0x3834>
   15ed0:	ldr	r2, [pc, #472]	; 160b0 <__assert_fail@plt+0x3914>
   15ed4:	cmp	r3, r2
   15ed8:	bne	16078 <__assert_fail@plt+0x38dc>
   15edc:	ldr	r3, [r4, #160]	; 0xa0
   15ee0:	cmp	r3, #0
   15ee4:	vldrne	s15, [r3, #28]
   15ee8:	ldr	r3, [r4, #156]	; 0x9c
   15eec:	vldreq	s15, [pc, #428]	; 160a0 <__assert_fail@plt+0x3904>
   15ef0:	cmp	r3, #0
   15ef4:	vldrne	s0, [r3, #28]
   15ef8:	vldreq	s0, [pc, #416]	; 160a0 <__assert_fail@plt+0x3904>
   15efc:	vadd.f32	s0, s0, s15
   15f00:	vldr	s15, [pc, #408]	; 160a0 <__assert_fail@plt+0x3904>
   15f04:	vcmpe.f32	s0, s15
   15f08:	vmrs	APSR_nzcv, fpscr
   15f0c:	vmovgt.f32	s0, s15
   15f10:	bgt	15f24 <__assert_fail@plt+0x3788>
   15f14:	vcmp.f32	s0, #0.0
   15f18:	vldr	s15, [pc, #388]	; 160a4 <__assert_fail@plt+0x3908>
   15f1c:	vmrs	APSR_nzcv, fpscr
   15f20:	vmovmi.f32	s0, s15
   15f24:	vstr	s0, [r4, #28]
   15f28:	pop	{r4, pc}
   15f2c:	ldr	r3, [r4, #160]	; 0xa0
   15f30:	cmp	r3, #0
   15f34:	bne	16064 <__assert_fail@plt+0x38c8>
   15f38:	ldr	r3, [r4, #156]	; 0x9c
   15f3c:	cmp	r3, #0
   15f40:	bne	16050 <__assert_fail@plt+0x38b4>
   15f44:	vldr	s0, [r4, #28]
   15f48:	pop	{r4, pc}
   15f4c:	ldr	r3, [r4, #160]	; 0xa0
   15f50:	cmp	r3, #0
   15f54:	bne	1603c <__assert_fail@plt+0x38a0>
   15f58:	ldr	r3, [r4, #156]	; 0x9c
   15f5c:	cmp	r3, #0
   15f60:	beq	15f44 <__assert_fail@plt+0x37a8>
   15f64:	ldr	r3, [pc, #328]	; 160b4 <__assert_fail@plt+0x3918>
   15f68:	ldr	r2, [pc, #328]	; 160b8 <__assert_fail@plt+0x391c>
   15f6c:	ldr	r1, [pc, #328]	; 160bc <__assert_fail@plt+0x3920>
   15f70:	ldr	r0, [pc, #328]	; 160c0 <__assert_fail@plt+0x3924>
   15f74:	bl	1279c <__assert_fail@plt>
   15f78:	ldr	r3, [pc, #324]	; 160c4 <__assert_fail@plt+0x3928>
   15f7c:	ldr	r2, [r4]
   15f80:	cmp	r2, r3
   15f84:	bne	16028 <__assert_fail@plt+0x388c>
   15f88:	ldr	r3, [r4, #156]	; 0x9c
   15f8c:	cmp	r3, #0
   15f90:	bne	16014 <__assert_fail@plt+0x3878>
   15f94:	ldr	r3, [r4, #160]	; 0xa0
   15f98:	vldr	s0, [pc, #256]	; 160a0 <__assert_fail@plt+0x3904>
   15f9c:	vldr	s15, [r3, #28]
   15fa0:	vsub.f32	s0, s0, s15
   15fa4:	vstr	s0, [r4, #28]
   15fa8:	pop	{r4, pc}
   15fac:	ldr	r3, [r4, #160]	; 0xa0
   15fb0:	cmp	r3, #0
   15fb4:	vldrne	s0, [r3, #28]
   15fb8:	ldr	r3, [r4, #156]	; 0x9c
   15fbc:	vldreq	s0, [pc, #220]	; 160a0 <__assert_fail@plt+0x3904>
   15fc0:	cmp	r3, #0
   15fc4:	vldrne	s15, [r3, #28]
   15fc8:	vmulne.f32	s0, s0, s15
   15fcc:	b	15f00 <__assert_fail@plt+0x3764>
   15fd0:	vldr	s0, [pc, #200]	; 160a0 <__assert_fail@plt+0x3904>
   15fd4:	b	15f24 <__assert_fail@plt+0x3788>
   15fd8:	ldr	r3, [pc, #212]	; 160b4 <__assert_fail@plt+0x3918>
   15fdc:	ldr	r2, [pc, #228]	; 160c8 <__assert_fail@plt+0x392c>
   15fe0:	ldr	r1, [pc, #212]	; 160bc <__assert_fail@plt+0x3920>
   15fe4:	ldr	r0, [pc, #224]	; 160cc <__assert_fail@plt+0x3930>
   15fe8:	bl	1279c <__assert_fail@plt>
   15fec:	ldr	r3, [pc, #192]	; 160b4 <__assert_fail@plt+0x3918>
   15ff0:	ldr	r2, [pc, #216]	; 160d0 <__assert_fail@plt+0x3934>
   15ff4:	ldr	r1, [pc, #192]	; 160bc <__assert_fail@plt+0x3920>
   15ff8:	ldr	r0, [pc, #212]	; 160d4 <__assert_fail@plt+0x3938>
   15ffc:	bl	1279c <__assert_fail@plt>
   16000:	ldr	r3, [pc, #172]	; 160b4 <__assert_fail@plt+0x3918>
   16004:	ldr	r2, [pc, #204]	; 160d8 <__assert_fail@plt+0x393c>
   16008:	ldr	r1, [pc, #172]	; 160bc <__assert_fail@plt+0x3920>
   1600c:	ldr	r0, [pc, #200]	; 160dc <__assert_fail@plt+0x3940>
   16010:	bl	1279c <__assert_fail@plt>
   16014:	ldr	r3, [pc, #152]	; 160b4 <__assert_fail@plt+0x3918>
   16018:	ldr	r2, [pc, #192]	; 160e0 <__assert_fail@plt+0x3944>
   1601c:	ldr	r1, [pc, #152]	; 160bc <__assert_fail@plt+0x3920>
   16020:	ldr	r0, [pc, #152]	; 160c0 <__assert_fail@plt+0x3924>
   16024:	bl	1279c <__assert_fail@plt>
   16028:	ldr	r3, [pc, #132]	; 160b4 <__assert_fail@plt+0x3918>
   1602c:	ldr	r2, [pc, #176]	; 160e4 <__assert_fail@plt+0x3948>
   16030:	ldr	r1, [pc, #132]	; 160bc <__assert_fail@plt+0x3920>
   16034:	ldr	r0, [pc, #172]	; 160e8 <__assert_fail@plt+0x394c>
   16038:	bl	1279c <__assert_fail@plt>
   1603c:	ldr	r3, [pc, #112]	; 160b4 <__assert_fail@plt+0x3918>
   16040:	ldr	r2, [pc, #164]	; 160ec <__assert_fail@plt+0x3950>
   16044:	ldr	r1, [pc, #112]	; 160bc <__assert_fail@plt+0x3920>
   16048:	ldr	r0, [pc, #160]	; 160f0 <__assert_fail@plt+0x3954>
   1604c:	bl	1279c <__assert_fail@plt>
   16050:	ldr	r3, [pc, #92]	; 160b4 <__assert_fail@plt+0x3918>
   16054:	ldr	r2, [pc, #152]	; 160f4 <__assert_fail@plt+0x3958>
   16058:	ldr	r1, [pc, #92]	; 160bc <__assert_fail@plt+0x3920>
   1605c:	ldr	r0, [pc, #92]	; 160c0 <__assert_fail@plt+0x3924>
   16060:	bl	1279c <__assert_fail@plt>
   16064:	ldr	r3, [pc, #72]	; 160b4 <__assert_fail@plt+0x3918>
   16068:	ldr	r2, [pc, #136]	; 160f8 <__assert_fail@plt+0x395c>
   1606c:	ldr	r1, [pc, #72]	; 160bc <__assert_fail@plt+0x3920>
   16070:	ldr	r0, [pc, #120]	; 160f0 <__assert_fail@plt+0x3954>
   16074:	bl	1279c <__assert_fail@plt>
   16078:	ldr	r3, [pc, #52]	; 160b4 <__assert_fail@plt+0x3918>
   1607c:	ldr	r2, [pc, #120]	; 160fc <__assert_fail@plt+0x3960>
   16080:	ldr	r1, [pc, #52]	; 160bc <__assert_fail@plt+0x3920>
   16084:	ldr	r0, [pc, #116]	; 16100 <__assert_fail@plt+0x3964>
   16088:	bl	1279c <__assert_fail@plt>
   1608c:	ldr	r3, [pc, #32]	; 160b4 <__assert_fail@plt+0x3918>
   16090:	ldr	r2, [pc, #108]	; 16104 <__assert_fail@plt+0x3968>
   16094:	ldr	r1, [pc, #32]	; 160bc <__assert_fail@plt+0x3920>
   16098:	ldr	r0, [pc, #96]	; 16100 <__assert_fail@plt+0x3964>
   1609c:	bl	1279c <__assert_fail@plt>
   160a0:	svccc	0x00800000
   160a4:	andeq	r0, r0, r0
   160a8:	andeq	r4, r1, r4, ror fp
   160ac:	andeq	r3, r1, r0, lsl #18
   160b0:	andeq	r4, r1, ip, asr #6
   160b4:	strdeq	r4, [r4], -r8
   160b8:	andeq	r0, r0, r9, lsl #9
   160bc:	andeq	r4, r4, r8, asr #25
   160c0:	andeq	r5, r4, r0, lsr r0
   160c4:	andeq	r3, r1, r4, lsr r9
   160c8:	andeq	r0, r0, sp, ror r4
   160cc:	andeq	r4, r4, r4, ror #31
   160d0:	andeq	r0, r0, r6, ror r4
   160d4:	ldrdeq	r4, [r4], -r8
   160d8:	andeq	r0, r0, lr, ror r4
   160dc:	andeq	r5, r4, r0
   160e0:	andeq	r0, r0, pc, lsl #9
   160e4:	andeq	r0, r0, lr, lsl #9
   160e8:	andeq	r5, r4, r8, asr #32
   160ec:	andeq	r0, r0, r8, lsl #9
   160f0:	andeq	r5, r4, r8, lsl r0
   160f4:	andeq	r0, r0, r4, lsl #9
   160f8:	andeq	r0, r0, r3, lsl #9
   160fc:	andeq	r0, r0, r6, lsr #9
   16100:	andeq	r4, r4, ip, lsr #11
   16104:			; <UNDEFINED> instruction: 0x000004b2
   16108:	ldr	r3, [r0]
   1610c:	push	{r4, lr}
   16110:	cmp	r3, #0
   16114:	beq	16194 <__assert_fail@plt+0x39f8>
   16118:	cmp	r3, #2
   1611c:	beq	161a8 <__assert_fail@plt+0x3a0c>
   16120:	mov	r4, r0
   16124:	mov	r0, #176	; 0xb0
   16128:	bl	2e0c0 <__assert_fail@plt+0x1b924>
   1612c:	ldr	r3, [pc, #136]	; 161bc <__assert_fail@plt+0x3a20>
   16130:	ldr	ip, [pc, #136]	; 161c0 <__assert_fail@plt+0x3a24>
   16134:	ldr	r1, [pc, #136]	; 161c4 <__assert_fail@plt+0x3a28>
   16138:	ldr	r2, [r3, #16]
   1613c:	mov	lr, #1065353216	; 0x3f800000
   16140:	cmp	r2, #0
   16144:	ldrne	r2, [r3, #20]
   16148:	streq	r0, [r3, #16]
   1614c:	streq	r0, [r3, #20]
   16150:	strne	r0, [r3, #20]
   16154:	ldr	r3, [pc, #108]	; 161c8 <__assert_fail@plt+0x3a2c>
   16158:	strne	r0, [r2, #152]	; 0x98
   1615c:	str	r4, [r0, #172]	; 0xac
   16160:	ldrb	r2, [r3, #15]
   16164:	mov	r3, #0
   16168:	str	lr, [r0, #28]
   1616c:	strb	r2, [r0, #32]
   16170:	mov	r2, #10
   16174:	strh	ip, [r0, #18]
   16178:	str	r1, [r0, #36]	; 0x24
   1617c:	str	r3, [r0, #8]
   16180:	str	r3, [r0, #12]
   16184:	str	r3, [r0, #168]	; 0xa8
   16188:	str	r3, [r0, #164]	; 0xa4
   1618c:	str	r2, [r0, #24]
   16190:	pop	{r4, pc}
   16194:	ldr	r3, [pc, #48]	; 161cc <__assert_fail@plt+0x3a30>
   16198:	ldr	r2, [pc, #48]	; 161d0 <__assert_fail@plt+0x3a34>
   1619c:	ldr	r1, [pc, #48]	; 161d4 <__assert_fail@plt+0x3a38>
   161a0:	ldr	r0, [pc, #48]	; 161d8 <__assert_fail@plt+0x3a3c>
   161a4:	bl	1279c <__assert_fail@plt>
   161a8:	ldr	r3, [pc, #28]	; 161cc <__assert_fail@plt+0x3a30>
   161ac:	mov	r2, #1472	; 0x5c0
   161b0:	ldr	r1, [pc, #28]	; 161d4 <__assert_fail@plt+0x3a38>
   161b4:	ldr	r0, [pc, #32]	; 161dc <__assert_fail@plt+0x3a40>
   161b8:	bl	1279c <__assert_fail@plt>
   161bc:	andeq	ip, r5, r0, ror #10
   161c0:	andeq	r0, r0, r1, lsl #2
   161c4:	andeq	r5, r4, r8, lsr #1
   161c8:	andeq	ip, r5, ip, asr lr
   161cc:	andeq	r4, r4, r0, lsl ip
   161d0:			; <UNDEFINED> instruction: 0x000005bf
   161d4:	andeq	r4, r4, r8, asr #25
   161d8:	andeq	r5, r4, r4, rrx
   161dc:	andeq	r5, r4, r0, lsl #1
   161e0:	push	{r4, lr}
   161e4:	bl	16108 <__assert_fail@plt+0x396c>
   161e8:	cmp	r0, #0
   161ec:	movne	r3, #0
   161f0:	strne	r3, [r0, #36]	; 0x24
   161f4:	pop	{r4, pc}
   161f8:	push	{r4, r5, r6, lr}
   161fc:	mov	r5, r0
   16200:	ldr	r4, [pc, #200]	; 162d0 <__assert_fail@plt+0x3b34>
   16204:	mov	r6, r1
   16208:	ldr	r0, [r4, #24]
   1620c:	cmp	r0, #0
   16210:	beq	16288 <__assert_fail@plt+0x3aec>
   16214:	ldr	r3, [r4, #20]
   16218:	cmp	r3, #0
   1621c:	beq	1623c <__assert_fail@plt+0x3aa0>
   16220:	ldr	r4, [r3, #8]
   16224:	cmp	r4, #1
   16228:	beq	16250 <__assert_fail@plt+0x3ab4>
   1622c:	cmp	r4, #0
   16230:	beq	162b0 <__assert_fail@plt+0x3b14>
   16234:	cmp	r4, #5
   16238:	beq	16250 <__assert_fail@plt+0x3ab4>
   1623c:	mov	r0, r5
   16240:	bl	16108 <__assert_fail@plt+0x396c>
   16244:	str	r6, [r0, #36]	; 0x24
   16248:	str	r5, [r0, #172]	; 0xac
   1624c:	pop	{r4, r5, r6, pc}
   16250:	bl	16108 <__assert_fail@plt+0x396c>
   16254:	ldr	r2, [pc, #120]	; 162d4 <__assert_fail@plt+0x3b38>
   16258:	ldr	r1, [pc, #120]	; 162d8 <__assert_fail@plt+0x3b3c>
   1625c:	mov	r3, #0
   16260:	str	r2, [r0]
   16264:	mov	r2, #3
   16268:	str	r1, [r0, #4]
   1626c:	str	r3, [r0, #36]	; 0x24
   16270:	str	r3, [r0, #40]	; 0x28
   16274:	str	r3, [r0, #16]
   16278:	strb	r3, [r0, #20]
   1627c:	str	r2, [r0, #8]
   16280:	str	r2, [r0, #12]
   16284:	b	1623c <__assert_fail@plt+0x3aa0>
   16288:	ldr	r0, [pc, #76]	; 162dc <__assert_fail@plt+0x3b40>
   1628c:	bl	1ec08 <__assert_fail@plt+0xc46c>
   16290:	cmp	r0, #0
   16294:	str	r0, [r4, #24]
   16298:	bne	16214 <__assert_fail@plt+0x3a78>
   1629c:	ldr	r3, [pc, #60]	; 162e0 <__assert_fail@plt+0x3b44>
   162a0:	ldr	r2, [pc, #60]	; 162e4 <__assert_fail@plt+0x3b48>
   162a4:	ldr	r1, [pc, #60]	; 162e8 <__assert_fail@plt+0x3b4c>
   162a8:	ldr	r0, [pc, #60]	; 162ec <__assert_fail@plt+0x3b50>
   162ac:	bl	1279c <__assert_fail@plt>
   162b0:	mov	r2, #5
   162b4:	ldr	r1, [pc, #52]	; 162f0 <__assert_fail@plt+0x3b54>
   162b8:	mov	r0, r4
   162bc:	bl	1222c <dcgettext@plt>
   162c0:	mov	r1, r4
   162c4:	mov	r2, r0
   162c8:	mov	r0, #1
   162cc:	bl	12388 <error@plt>
   162d0:	andeq	ip, r5, r0, ror #10
   162d4:	andeq	r4, r1, r4, ror fp
   162d8:	andeq	r4, r4, r4, asr #25
   162dc:	andeq	r5, r4, r8, asr #1
   162e0:	andeq	r4, r4, r0, lsr #24
   162e4:	andeq	r0, r0, sl, ror #11
   162e8:	andeq	r4, r4, r8, asr #25
   162ec:	andeq	r5, r4, ip, asr #1
   162f0:	andeq	r5, r4, r0, ror #1
   162f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162f8:	subs	r8, r1, #0
   162fc:	sub	sp, sp, #20
   16300:	beq	1658c <__assert_fail@plt+0x3df0>
   16304:	ldr	r3, [pc, #844]	; 16658 <__assert_fail@plt+0x3ebc>
   16308:	ldr	r7, [pc, #844]	; 1665c <__assert_fail@plt+0x3ec0>
   1630c:	ldr	fp, [pc, #844]	; 16660 <__assert_fail@plt+0x3ec4>
   16310:	ldr	sl, [pc, #844]	; 16664 <__assert_fail@plt+0x3ec8>
   16314:	mov	r4, r0
   16318:	mov	r5, r2
   1631c:	add	r9, r3, #472	; 0x1d8
   16320:	cmp	r5, #0
   16324:	movgt	r6, #0
   16328:	ble	1634c <__assert_fail@plt+0x3bb0>
   1632c:	add	r6, r6, #1
   16330:	mov	r3, r4
   16334:	mov	r2, #4
   16338:	mov	r1, #1
   1633c:	mov	r0, r7
   16340:	bl	122f8 <fwrite@plt>
   16344:	cmp	r6, r5
   16348:	bne	1632c <__assert_fail@plt+0x3b90>
   1634c:	mov	r3, r4
   16350:	mov	r2, #6
   16354:	mov	r1, #1
   16358:	mov	r0, fp
   1635c:	bl	122f8 <fwrite@plt>
   16360:	mov	r0, r4
   16364:	mov	r1, r8
   16368:	bl	15e08 <__assert_fail@plt+0x366c>
   1636c:	ldrsh	r0, [r8, #8]
   16370:	cmp	r0, #0
   16374:	beq	1661c <__assert_fail@plt+0x3e80>
   16378:	ldr	r2, [pc, #744]	; 16668 <__assert_fail@plt+0x3ecc>
   1637c:	mov	r3, #1
   16380:	mov	r1, #0
   16384:	b	1638c <__assert_fail@plt+0x3bf0>
   16388:	ldrsh	r3, [r2, #-8]
   1638c:	cmn	r3, #1
   16390:	cmpne	r0, r3
   16394:	add	r1, r1, #1
   16398:	add	r2, r2, #8
   1639c:	bne	16388 <__assert_fail@plt+0x3bec>
   163a0:	add	r1, sl, r1, lsl #3
   163a4:	ldr	r3, [r1, #100]	; 0x64
   163a8:	ldrsh	ip, [r8, #12]
   163ac:	cmp	ip, #0
   163b0:	beq	16614 <__assert_fail@plt+0x3e78>
   163b4:	ldr	r1, [pc, #688]	; 1666c <__assert_fail@plt+0x3ed0>
   163b8:	mov	r2, #1
   163bc:	mov	r0, #0
   163c0:	b	163c8 <__assert_fail@plt+0x3c2c>
   163c4:	ldrsh	r2, [r1, #-8]
   163c8:	cmn	r2, #1
   163cc:	cmpne	ip, r2
   163d0:	add	r0, r0, #1
   163d4:	add	r1, r1, #8
   163d8:	bne	163c4 <__assert_fail@plt+0x3c28>
   163dc:	add	r0, sl, r0, lsl #3
   163e0:	ldr	r2, [r0, #156]	; 0x9c
   163e4:	str	r2, [sp]
   163e8:	mov	r1, #1
   163ec:	ldr	r2, [pc, #636]	; 16670 <__assert_fail@plt+0x3ed4>
   163f0:	mov	r0, r4
   163f4:	bl	12580 <__fprintf_chk@plt>
   163f8:	ldr	r1, [r8, #24]
   163fc:	mov	r3, #0
   16400:	ldr	r2, [r9, r3, lsl #3]
   16404:	cmp	r1, r2
   16408:	beq	16594 <__assert_fail@plt+0x3df8>
   1640c:	add	r3, r3, #1
   16410:	cmp	r3, #11
   16414:	bne	16400 <__assert_fail@plt+0x3c64>
   16418:	ldr	r3, [pc, #596]	; 16674 <__assert_fail@plt+0x3ed8>
   1641c:	vldr	s14, [r8, #28]
   16420:	ldrb	r0, [r8, #16]
   16424:	ldr	r1, [pc, #588]	; 16678 <__assert_fail@plt+0x3edc>
   16428:	ldr	r2, [pc, #588]	; 1667c <__assert_fail@plt+0x3ee0>
   1642c:	vcvt.f64.f32	d7, s14
   16430:	cmp	r0, #0
   16434:	moveq	r2, r1
   16438:	str	r2, [sp, #8]
   1643c:	mov	r1, #1
   16440:	ldr	r2, [pc, #568]	; 16680 <__assert_fail@plt+0x3ee4>
   16444:	mov	r0, r4
   16448:	vstr	d7, [sp]
   1644c:	bl	12580 <__fprintf_chk@plt>
   16450:	ldrh	r3, [r8, #18]
   16454:	cmp	r3, #0
   16458:	bne	16468 <__assert_fail@plt+0x3ccc>
   1645c:	ldrb	r3, [r8, #20]
   16460:	cmp	r3, #0
   16464:	beq	164c8 <__assert_fail@plt+0x3d2c>
   16468:	mov	r3, r4
   1646c:	mov	r2, #6
   16470:	mov	r1, #1
   16474:	ldr	r0, [pc, #520]	; 16684 <__assert_fail@plt+0x3ee8>
   16478:	bl	122f8 <fwrite@plt>
   1647c:	ldrb	r3, [r8, #18]
   16480:	cmp	r3, #0
   16484:	bne	165dc <__assert_fail@plt+0x3e40>
   16488:	ldrb	r3, [r8, #20]
   1648c:	cmp	r3, #0
   16490:	beq	165c8 <__assert_fail@plt+0x3e2c>
   16494:	ldr	r3, [pc, #480]	; 1667c <__assert_fail@plt+0x3ee0>
   16498:	ldr	r2, [pc, #488]	; 16688 <__assert_fail@plt+0x3eec>
   1649c:	mov	r1, #1
   164a0:	mov	r0, r4
   164a4:	bl	12580 <__fprintf_chk@plt>
   164a8:	ldrb	r3, [r8, #19]
   164ac:	cmp	r3, #0
   164b0:	beq	164c8 <__assert_fail@plt+0x3d2c>
   164b4:	ldr	r3, [pc, #464]	; 1668c <__assert_fail@plt+0x3ef0>
   164b8:	ldr	r2, [pc, #464]	; 16690 <__assert_fail@plt+0x3ef4>
   164bc:	mov	r1, #1
   164c0:	mov	r0, r4
   164c4:	bl	12580 <__fprintf_chk@plt>
   164c8:	mov	r1, r4
   164cc:	mov	r0, #10
   164d0:	bl	12634 <fputc@plt>
   164d4:	cmp	r5, #0
   164d8:	movgt	r6, #0
   164dc:	ble	16500 <__assert_fail@plt+0x3d64>
   164e0:	add	r6, r6, #1
   164e4:	mov	r3, r4
   164e8:	mov	r2, #4
   164ec:	mov	r1, #1
   164f0:	mov	r0, r7
   164f4:	bl	122f8 <fwrite@plt>
   164f8:	cmp	r6, r5
   164fc:	bne	164e0 <__assert_fail@plt+0x3d44>
   16500:	ldr	r3, [r8, #156]	; 0x9c
   16504:	cmp	r3, #0
   16508:	beq	165a4 <__assert_fail@plt+0x3e08>
   1650c:	mov	r2, #6
   16510:	mov	r1, #1
   16514:	mov	r3, r4
   16518:	ldr	r0, [pc, #372]	; 16694 <__assert_fail@plt+0x3ef8>
   1651c:	bl	122f8 <fwrite@plt>
   16520:	add	r2, r5, #1
   16524:	ldr	r1, [r8, #156]	; 0x9c
   16528:	mov	r0, r4
   1652c:	bl	162f4 <__assert_fail@plt+0x3b58>
   16530:	cmp	r5, #0
   16534:	movgt	r6, #0
   16538:	ble	1655c <__assert_fail@plt+0x3dc0>
   1653c:	add	r6, r6, #1
   16540:	mov	r3, r4
   16544:	mov	r2, #4
   16548:	mov	r1, #1
   1654c:	mov	r0, r7
   16550:	bl	122f8 <fwrite@plt>
   16554:	cmp	r6, r5
   16558:	bne	1653c <__assert_fail@plt+0x3da0>
   1655c:	ldr	r3, [r8, #160]	; 0xa0
   16560:	cmp	r3, #0
   16564:	beq	16624 <__assert_fail@plt+0x3e88>
   16568:	mov	r3, r4
   1656c:	mov	r2, #7
   16570:	mov	r1, #1
   16574:	ldr	r0, [pc, #284]	; 16698 <__assert_fail@plt+0x3efc>
   16578:	bl	122f8 <fwrite@plt>
   1657c:	ldr	r8, [r8, #160]	; 0xa0
   16580:	add	r5, r5, #1
   16584:	cmp	r8, #0
   16588:	bne	16320 <__assert_fail@plt+0x3b84>
   1658c:	add	sp, sp, #20
   16590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16594:	ldr	r2, [pc, #188]	; 16658 <__assert_fail@plt+0x3ebc>
   16598:	add	r3, r2, r3, lsl #3
   1659c:	ldr	r3, [r3, #476]	; 0x1dc
   165a0:	b	1641c <__assert_fail@plt+0x3c80>
   165a4:	ldr	r3, [r8, #160]	; 0xa0
   165a8:	cmp	r3, #0
   165ac:	mov	r3, r4
   165b0:	beq	16640 <__assert_fail@plt+0x3ea4>
   165b4:	mov	r2, #9
   165b8:	mov	r1, #1
   165bc:	ldr	r0, [pc, #216]	; 1669c <__assert_fail@plt+0x3f00>
   165c0:	bl	122f8 <fwrite@plt>
   165c4:	b	16530 <__assert_fail@plt+0x3d94>
   165c8:	ldrb	r3, [r8, #19]
   165cc:	cmp	r3, #0
   165d0:	beq	164c8 <__assert_fail@plt+0x3d2c>
   165d4:	ldr	r3, [pc, #160]	; 1667c <__assert_fail@plt+0x3ee0>
   165d8:	b	164b8 <__assert_fail@plt+0x3d1c>
   165dc:	mov	r3, r4
   165e0:	mov	r2, #4
   165e4:	mov	r1, #1
   165e8:	ldr	r0, [pc, #176]	; 166a0 <__assert_fail@plt+0x3f04>
   165ec:	bl	122f8 <fwrite@plt>
   165f0:	ldrb	r3, [r8, #20]
   165f4:	cmp	r3, #0
   165f8:	bne	1660c <__assert_fail@plt+0x3e70>
   165fc:	ldrb	r3, [r8, #19]
   16600:	cmp	r3, #0
   16604:	beq	164c8 <__assert_fail@plt+0x3d2c>
   16608:	b	164b4 <__assert_fail@plt+0x3d18>
   1660c:	ldr	r3, [pc, #120]	; 1668c <__assert_fail@plt+0x3ef0>
   16610:	b	16498 <__assert_fail@plt+0x3cfc>
   16614:	ldr	r2, [pc, #136]	; 166a4 <__assert_fail@plt+0x3f08>
   16618:	b	163e4 <__assert_fail@plt+0x3c48>
   1661c:	ldr	r3, [pc, #128]	; 166a4 <__assert_fail@plt+0x3f08>
   16620:	b	163a8 <__assert_fail@plt+0x3c0c>
   16624:	mov	r3, r4
   16628:	mov	r2, #10
   1662c:	mov	r1, #1
   16630:	ldr	r0, [pc, #112]	; 166a8 <__assert_fail@plt+0x3f0c>
   16634:	add	sp, sp, #20
   16638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1663c:	b	122f8 <fwrite@plt>
   16640:	mov	r2, #13
   16644:	mov	r1, #1
   16648:	ldr	r0, [pc, #92]	; 166ac <__assert_fail@plt+0x3f10>
   1664c:	add	sp, sp, #20
   16650:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16654:	b	122f8 <fwrite@plt>
   16658:	strdeq	ip, [r5], -r0
   1665c:	andeq	r4, r4, r4, lsr #19
   16660:	andeq	r5, r4, ip, lsl r1
   16664:	ldrdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   16668:	andeq	r4, r4, r4, asr #24
   1666c:	andeq	r4, r4, ip, ror ip
   16670:	andeq	r5, r4, r4, lsr #2
   16674:	andeq	r5, r4, r0, lsl r1
   16678:	andeq	r5, r4, r8, lsl r1
   1667c:	andeq	r8, r4, r0, lsr r6
   16680:	andeq	r5, r4, r8, lsr r1
   16684:	andeq	r5, r4, r8, ror #2
   16688:	andeq	r5, r4, r0, ror r1
   1668c:			; <UNDEFINED> instruction: 0x00044cbc
   16690:	andeq	r5, r4, r8, ror r1
   16694:	muleq	r4, r0, r1
   16698:	andeq	r5, r4, r4, lsr #3
   1669c:	muleq	r4, r8, r1
   166a0:	andeq	r4, r4, r8, lsr r2
   166a4:	andeq	r5, r4, ip, lsl #2
   166a8:	andeq	r5, r4, ip, lsr #3
   166ac:	andeq	r5, r4, r0, lsl #3
   166b0:	ldr	r3, [r0]
   166b4:	cmp	r3, #0
   166b8:	bxeq	lr
   166bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   166c0:	mov	r7, r1
   166c4:	ldr	r8, [pc, #360]	; 16834 <__assert_fail@plt+0x4098>
   166c8:	mov	r6, r0
   166cc:	ldr	r2, [r8, #44]	; 0x2c
   166d0:	tst	r2, #8
   166d4:	bne	167d8 <__assert_fail@plt+0x403c>
   166d8:	mov	r0, r3
   166dc:	bl	15e58 <__assert_fail@plt+0x36bc>
   166e0:	ldr	r3, [r6]
   166e4:	mov	r5, #0
   166e8:	cmp	r3, #0
   166ec:	mov	r4, r5
   166f0:	mov	sl, r5
   166f4:	beq	16780 <__assert_fail@plt+0x3fe4>
   166f8:	ldr	r0, [r3, #156]	; 0x9c
   166fc:	cmp	r4, #0
   16700:	str	r0, [r6]
   16704:	str	sl, [r3, #156]	; 0x9c
   16708:	beq	16760 <__assert_fail@plt+0x3fc4>
   1670c:	ldr	lr, [r3, #160]	; 0xa0
   16710:	mov	r2, r4
   16714:	ldr	r9, [lr, #24]
   16718:	ldr	ip, [r2, #160]	; 0xa0
   1671c:	ldr	r1, [ip, #24]
   16720:	cmp	r1, r9
   16724:	bne	167b0 <__assert_fail@plt+0x4014>
   16728:	vldr	s14, [ip, #28]
   1672c:	vldr	s15, [lr, #28]
   16730:	ldr	r1, [r2, #12]
   16734:	vcmp.f32	s14, s15
   16738:	vmrs	APSR_nzcv, fpscr
   1673c:	beq	167b4 <__assert_fail@plt+0x4018>
   16740:	cmp	r1, #2
   16744:	vcmpe.f32	s14, s15
   16748:	beq	167cc <__assert_fail@plt+0x4030>
   1674c:	vmrs	APSR_nzcv, fpscr
   16750:	bpl	167b4 <__assert_fail@plt+0x4018>
   16754:	ldr	r2, [r2, #156]	; 0x9c
   16758:	cmp	r2, #0
   1675c:	bne	16718 <__assert_fail@plt+0x3f7c>
   16760:	cmp	r5, #0
   16764:	moveq	r5, r3
   16768:	str	r4, [r3, #156]	; 0x9c
   1676c:	moveq	r4, r5
   16770:	movne	r4, r3
   16774:	mov	r3, r0
   16778:	cmp	r3, #0
   1677c:	bne	166f8 <__assert_fail@plt+0x3f5c>
   16780:	ldr	r3, [r8, #44]	; 0x2c
   16784:	tst	r3, #8
   16788:	bne	16808 <__assert_fail@plt+0x406c>
   1678c:	mov	r0, r4
   16790:	bl	15e58 <__assert_fail@plt+0x36bc>
   16794:	ldr	r2, [r7]
   16798:	mov	r3, #0
   1679c:	str	r2, [r5, #156]	; 0x9c
   167a0:	str	r4, [r7]
   167a4:	str	r3, [r6, #4]
   167a8:	str	r3, [r6]
   167ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   167b0:	bcc	16754 <__assert_fail@plt+0x3fb8>
   167b4:	ldr	r1, [r2, #156]	; 0x9c
   167b8:	cmp	r1, #0
   167bc:	str	r1, [r3, #156]	; 0x9c
   167c0:	moveq	r5, r3
   167c4:	str	r3, [r2, #156]	; 0x9c
   167c8:	b	16774 <__assert_fail@plt+0x3fd8>
   167cc:	vmrs	APSR_nzcv, fpscr
   167d0:	bmi	167b4 <__assert_fail@plt+0x4018>
   167d4:	b	16754 <__assert_fail@plt+0x3fb8>
   167d8:	ldr	r4, [pc, #88]	; 16838 <__assert_fail@plt+0x409c>
   167dc:	ldr	r3, [pc, #88]	; 1683c <__assert_fail@plt+0x40a0>
   167e0:	ldr	r2, [pc, #88]	; 16840 <__assert_fail@plt+0x40a4>
   167e4:	mov	r1, #1
   167e8:	ldr	r0, [r4]
   167ec:	bl	12580 <__fprintf_chk@plt>
   167f0:	ldr	r0, [r4]
   167f4:	mov	r2, #2
   167f8:	ldr	r1, [r6]
   167fc:	bl	162f4 <__assert_fail@plt+0x3b58>
   16800:	ldr	r3, [r6]
   16804:	b	166d8 <__assert_fail@plt+0x3f3c>
   16808:	ldr	r8, [pc, #40]	; 16838 <__assert_fail@plt+0x409c>
   1680c:	ldr	r3, [pc, #48]	; 16844 <__assert_fail@plt+0x40a8>
   16810:	ldr	r2, [pc, #40]	; 16840 <__assert_fail@plt+0x40a4>
   16814:	ldr	r0, [r8]
   16818:	mov	r1, #1
   1681c:	bl	12580 <__fprintf_chk@plt>
   16820:	ldr	r0, [r8]
   16824:	mov	r2, #2
   16828:	mov	r1, r4
   1682c:	bl	162f4 <__assert_fail@plt+0x3b58>
   16830:	b	1678c <__assert_fail@plt+0x3ff0>
   16834:	andeq	ip, r5, ip, asr lr
   16838:	andeq	ip, r5, r8, lsr r5
   1683c:			; <UNDEFINED> instruction: 0x000451b8
   16840:	ldrdeq	r5, [r4], -r4
   16844:	ldrdeq	r5, [r4], -ip
   16848:	push	{r4, r5, r6, r7, r8, lr}
   1684c:	mov	r5, r3
   16850:	ldr	r6, [pc, #76]	; 168a4 <__assert_fail@plt+0x4108>
   16854:	ldr	r3, [pc, #76]	; 168a8 <__assert_fail@plt+0x410c>
   16858:	mov	r7, r2
   1685c:	mov	r4, r0
   16860:	mov	r0, r1
   16864:	mov	r1, r5
   16868:	str	r3, [r6, #28]
   1686c:	bl	166b0 <__assert_fail@plt+0x3f14>
   16870:	mov	r0, r7
   16874:	ldr	r3, [r6, #28]
   16878:	mov	r1, r5
   1687c:	blx	r3
   16880:	add	r7, r4, #88	; 0x58
   16884:	mov	r0, r4
   16888:	ldr	r3, [r6, #28]
   1688c:	mov	r1, r5
   16890:	add	r4, r4, #8
   16894:	blx	r3
   16898:	cmp	r4, r7
   1689c:	bne	16884 <__assert_fail@plt+0x40e8>
   168a0:	pop	{r4, r5, r6, r7, r8, pc}
   168a4:	andeq	ip, r5, r0, ror #10
   168a8:			; <UNDEFINED> instruction: 0x000166b0
   168ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168b0:	mov	r2, #0
   168b4:	ldr	r8, [pc, #1084]	; 16cf8 <__assert_fail@plt+0x455c>
   168b8:	ldr	r4, [r0]
   168bc:	sub	sp, sp, #116	; 0x74
   168c0:	ldr	r3, [r8]
   168c4:	cmp	r4, r2
   168c8:	str	r3, [sp, #108]	; 0x6c
   168cc:	str	r2, [sp, #4]
   168d0:	str	r2, [sp, #8]
   168d4:	str	r2, [sp, #12]
   168d8:	str	r2, [sp, #16]
   168dc:	beq	16c10 <__assert_fail@plt+0x4474>
   168e0:	mov	r5, r0
   168e4:	add	r3, sp, #20
   168e8:	add	r1, sp, #108	; 0x6c
   168ec:	str	r2, [r3, #4]
   168f0:	str	r2, [r3], #8
   168f4:	cmp	r3, r1
   168f8:	bne	168ec <__assert_fail@plt+0x4150>
   168fc:	ldr	r0, [r4, #156]	; 0x9c
   16900:	cmp	r0, #0
   16904:	beq	16c28 <__assert_fail@plt+0x448c>
   16908:	mov	r2, r4
   1690c:	b	16918 <__assert_fail@plt+0x417c>
   16910:	mov	r2, r0
   16914:	mov	r0, r3
   16918:	ldr	r3, [r0, #156]	; 0x9c
   1691c:	ldr	r1, [r2, #12]
   16920:	cmp	r3, #0
   16924:	bne	16910 <__assert_fail@plt+0x4174>
   16928:	add	r2, r2, #156	; 0x9c
   1692c:	ldr	r3, [r0, #8]
   16930:	ldr	r9, [pc, #964]	; 16cfc <__assert_fail@plt+0x4560>
   16934:	cmp	r3, #3
   16938:	bne	16aa0 <__assert_fail@plt+0x4304>
   1693c:	ldr	r3, [r9, #44]	; 0x2c
   16940:	tst	r3, #9
   16944:	bne	16b98 <__assert_fail@plt+0x43fc>
   16948:	ldr	r3, [r4, #8]
   1694c:	cmp	r3, #3
   16950:	ldreq	r6, [r4, #12]
   16954:	movne	r6, #0
   16958:	ldr	sl, [pc, #928]	; 16d00 <__assert_fail@plt+0x4564>
   1695c:	mov	r7, #0
   16960:	ldr	r3, [r4, #8]
   16964:	cmp	r3, #3
   16968:	beq	16ac4 <__assert_fail@plt+0x4328>
   1696c:	ldr	fp, [r4, #160]	; 0xa0
   16970:	ldr	r3, [fp, #8]
   16974:	cmp	r3, #3
   16978:	ldrls	pc, [pc, r3, lsl #2]
   1697c:	b	16cd8 <__assert_fail@plt+0x453c>
   16980:	andeq	r6, r1, r4, lsr #20
   16984:	andeq	r6, r1, r4, lsr #20
   16988:	andeq	r6, r1, ip, ror #19
   1698c:	muleq	r1, r0, r9
   16990:	add	r0, r4, #160	; 0xa0
   16994:	bl	168ac <__assert_fail@plt+0x4110>
   16998:	ldr	r3, [r4, #160]	; 0xa0
   1699c:	strb	r0, [fp, #16]
   169a0:	ldrb	r3, [r3, #16]
   169a4:	cmp	r3, #0
   169a8:	bne	16a08 <__assert_fail@plt+0x426c>
   169ac:	add	r5, r4, #156	; 0x9c
   169b0:	ldr	r4, [r5]
   169b4:	cmp	r4, #0
   169b8:	bne	16960 <__assert_fail@plt+0x41c4>
   169bc:	mov	r3, r5
   169c0:	add	r0, sp, #20
   169c4:	add	r2, sp, #4
   169c8:	add	r1, sp, #12
   169cc:	bl	16848 <__assert_fail@plt+0x40ac>
   169d0:	ldr	r2, [sp, #108]	; 0x6c
   169d4:	ldr	r3, [r8]
   169d8:	mov	r0, r7
   169dc:	cmp	r2, r3
   169e0:	bne	16cd4 <__assert_fail@plt+0x4538>
   169e4:	add	sp, sp, #116	; 0x74
   169e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169ec:	add	r0, fp, #160	; 0xa0
   169f0:	bl	168ac <__assert_fail@plt+0x4110>
   169f4:	ldr	r3, [r4, #160]	; 0xa0
   169f8:	strb	r0, [fp, #16]
   169fc:	ldrb	r3, [r3, #16]
   16a00:	cmp	r3, #0
   16a04:	beq	169ac <__assert_fail@plt+0x4210>
   16a08:	mov	r3, r5
   16a0c:	add	r2, sp, #4
   16a10:	add	r1, sp, #12
   16a14:	add	r0, sp, #20
   16a18:	bl	16848 <__assert_fail@plt+0x40ac>
   16a1c:	mov	r7, #1
   16a20:	b	169ac <__assert_fail@plt+0x4210>
   16a24:	cmp	r6, #1
   16a28:	ldrb	r3, [fp, #16]
   16a2c:	beq	169a4 <__assert_fail@plt+0x4208>
   16a30:	cmp	r3, #0
   16a34:	bne	16a08 <__assert_fail@plt+0x426c>
   16a38:	ldr	r3, [pc, #708]	; 16d04 <__assert_fail@plt+0x4568>
   16a3c:	ldr	r2, [fp]
   16a40:	ldr	r1, [pc, #704]	; 16d08 <__assert_fail@plt+0x456c>
   16a44:	cmp	r2, r3
   16a48:	cmpne	r2, sl
   16a4c:	moveq	r3, #1
   16a50:	movne	r3, #0
   16a54:	cmp	r2, r1
   16a58:	orreq	r3, r3, #1
   16a5c:	ldr	r1, [pc, #680]	; 16d0c <__assert_fail@plt+0x4570>
   16a60:	cmp	r2, r1
   16a64:	orreq	r3, r3, #1
   16a68:	cmp	r3, #0
   16a6c:	beq	16ae8 <__assert_fail@plt+0x434c>
   16a70:	ldr	r3, [r9, #44]	; 0x2c
   16a74:	tst	r3, #8
   16a78:	bne	16bd4 <__assert_fail@plt+0x4438>
   16a7c:	ldr	r3, [r4, #156]	; 0x9c
   16a80:	str	r3, [r5]
   16a84:	ldr	r2, [sp, #16]
   16a88:	ldr	r3, [sp, #12]
   16a8c:	cmp	r2, #0
   16a90:	str	r3, [r4, #156]	; 0x9c
   16a94:	str	r4, [sp, #12]
   16a98:	streq	r4, [sp, #16]
   16a9c:	b	169b0 <__assert_fail@plt+0x4214>
   16aa0:	bl	1570c <__assert_fail@plt+0x2f70>
   16aa4:	ldr	r3, [r9, #44]	; 0x2c
   16aa8:	tst	r3, #9
   16aac:	bne	16b98 <__assert_fail@plt+0x43fc>
   16ab0:	ldr	r4, [r5]
   16ab4:	cmp	r4, #0
   16ab8:	bne	16948 <__assert_fail@plt+0x41ac>
   16abc:	mov	r7, r4
   16ac0:	b	169bc <__assert_fail@plt+0x4220>
   16ac4:	ldr	r3, [r4, #12]
   16ac8:	cmp	r3, r6
   16acc:	beq	1696c <__assert_fail@plt+0x41d0>
   16ad0:	mov	r0, r4
   16ad4:	mov	r2, r5
   16ad8:	mov	r1, r6
   16adc:	bl	1570c <__assert_fail@plt+0x2f70>
   16ae0:	mov	r4, r0
   16ae4:	b	1696c <__assert_fail@plt+0x41d0>
   16ae8:	ldr	r1, [pc, #544]	; 16d10 <__assert_fail@plt+0x4574>
   16aec:	ldr	r0, [pc, #544]	; 16d14 <__assert_fail@plt+0x4578>
   16af0:	ldrh	r3, [r9, #68]	; 0x44
   16af4:	cmp	r2, r0
   16af8:	cmpne	r2, r1
   16afc:	moveq	r1, #1
   16b00:	movne	r1, #0
   16b04:	ldr	ip, [pc, #524]	; 16d18 <__assert_fail@plt+0x457c>
   16b08:	cmp	r3, #0
   16b0c:	moveq	r1, #1
   16b10:	ldr	r0, [pc, #516]	; 16d1c <__assert_fail@plt+0x4580>
   16b14:	cmp	r2, ip
   16b18:	orreq	r1, r1, #1
   16b1c:	cmp	r2, r0
   16b20:	orreq	r1, r1, #1
   16b24:	cmp	r1, #0
   16b28:	beq	16bc4 <__assert_fail@plt+0x4428>
   16b2c:	ldr	r1, [pc, #492]	; 16d20 <__assert_fail@plt+0x4584>
   16b30:	cmp	r2, r1
   16b34:	beq	16c38 <__assert_fail@plt+0x449c>
   16b38:	cmp	r3, #1
   16b3c:	bls	169ac <__assert_fail@plt+0x4210>
   16b40:	ldr	r2, [fp, #24]
   16b44:	sub	r1, r2, #1
   16b48:	cmp	r1, #1
   16b4c:	bls	16c18 <__assert_fail@plt+0x447c>
   16b50:	cmp	r3, #2
   16b54:	beq	169ac <__assert_fail@plt+0x4210>
   16b58:	ldr	r1, [r9, #44]	; 0x2c
   16b5c:	tst	r1, #8
   16b60:	bne	16c5c <__assert_fail@plt+0x44c0>
   16b64:	ldr	r1, [r4, #156]	; 0x9c
   16b68:	add	r3, sp, #112	; 0x70
   16b6c:	str	r1, [r5]
   16b70:	add	r1, sp, #20
   16b74:	add	r3, r3, r2, lsl #3
   16b78:	ldr	r1, [r1, r2, lsl #3]
   16b7c:	str	r1, [r4, #156]	; 0x9c
   16b80:	add	r1, sp, #20
   16b84:	str	r4, [r1, r2, lsl #3]
   16b88:	ldr	r2, [r3, #-88]	; 0xffffffa8
   16b8c:	cmp	r2, #0
   16b90:	streq	r4, [r3, #-88]	; 0xffffffa8
   16b94:	b	169b0 <__assert_fail@plt+0x4214>
   16b98:	ldr	r4, [pc, #388]	; 16d24 <__assert_fail@plt+0x4588>
   16b9c:	mov	r2, #22
   16ba0:	mov	r1, #1
   16ba4:	ldr	r3, [r4]
   16ba8:	ldr	r0, [pc, #376]	; 16d28 <__assert_fail@plt+0x458c>
   16bac:	bl	122f8 <fwrite@plt>
   16bb0:	ldr	r0, [r4]
   16bb4:	mov	r2, #0
   16bb8:	ldr	r1, [r5]
   16bbc:	bl	162f4 <__assert_fail@plt+0x3b58>
   16bc0:	b	16ab0 <__assert_fail@plt+0x4314>
   16bc4:	ldr	r1, [fp, #24]
   16bc8:	cmp	r1, #0
   16bcc:	bne	16b2c <__assert_fail@plt+0x4390>
   16bd0:	b	16a70 <__assert_fail@plt+0x42d4>
   16bd4:	ldr	fp, [pc, #328]	; 16d24 <__assert_fail@plt+0x4588>
   16bd8:	ldrh	r3, [r9, #68]	; 0x44
   16bdc:	ldr	r2, [pc, #328]	; 16d2c <__assert_fail@plt+0x4590>
   16be0:	ldr	r0, [fp]
   16be4:	mov	r1, #1
   16be8:	bl	12580 <__fprintf_chk@plt>
   16bec:	ldr	r0, [fp]
   16bf0:	ldr	r1, [r4, #160]	; 0xa0
   16bf4:	bl	15e08 <__assert_fail@plt+0x366c>
   16bf8:	ldr	r3, [fp]
   16bfc:	mov	r2, #16
   16c00:	mov	r1, #1
   16c04:	ldr	r0, [pc, #292]	; 16d30 <__assert_fail@plt+0x4594>
   16c08:	bl	122f8 <fwrite@plt>
   16c0c:	b	16a7c <__assert_fail@plt+0x42e0>
   16c10:	mov	r7, r4
   16c14:	b	169d0 <__assert_fail@plt+0x4234>
   16c18:	ldrb	r1, [fp, #18]
   16c1c:	cmp	r1, #0
   16c20:	beq	16b58 <__assert_fail@plt+0x43bc>
   16c24:	b	16b50 <__assert_fail@plt+0x43b4>
   16c28:	mov	r2, r5
   16c2c:	mov	r0, r4
   16c30:	mov	r1, #3
   16c34:	b	1692c <__assert_fail@plt+0x4190>
   16c38:	ldr	r3, [r4, #156]	; 0x9c
   16c3c:	str	r3, [r5]
   16c40:	ldr	r2, [sp, #8]
   16c44:	ldr	r3, [sp, #4]
   16c48:	cmp	r2, #0
   16c4c:	str	r3, [r4, #156]	; 0x9c
   16c50:	str	r4, [sp, #4]
   16c54:	streq	r4, [sp, #8]
   16c58:	b	169b0 <__assert_fail@plt+0x4214>
   16c5c:	ldr	fp, [pc, #192]	; 16d24 <__assert_fail@plt+0x4588>
   16c60:	ldr	r2, [pc, #204]	; 16d34 <__assert_fail@plt+0x4598>
   16c64:	mov	r1, #1
   16c68:	ldr	r0, [fp]
   16c6c:	bl	12580 <__fprintf_chk@plt>
   16c70:	ldr	r0, [fp]
   16c74:	ldr	r1, [r4, #160]	; 0xa0
   16c78:	bl	15e08 <__assert_fail@plt+0x366c>
   16c7c:	ldr	r2, [r4, #160]	; 0xa0
   16c80:	ldr	r0, [fp]
   16c84:	mov	r3, #0
   16c88:	ldr	r1, [r2, #24]
   16c8c:	ldr	r2, [pc, #164]	; 16d38 <__assert_fail@plt+0x459c>
   16c90:	ldr	r2, [r2, r3, lsl #3]
   16c94:	cmp	r1, r2
   16c98:	beq	16cc4 <__assert_fail@plt+0x4528>
   16c9c:	add	r3, r3, #1
   16ca0:	cmp	r3, #11
   16ca4:	bne	16c8c <__assert_fail@plt+0x44f0>
   16ca8:	ldr	r3, [pc, #140]	; 16d3c <__assert_fail@plt+0x45a0>
   16cac:	ldr	r2, [pc, #140]	; 16d40 <__assert_fail@plt+0x45a4>
   16cb0:	mov	r1, #1
   16cb4:	bl	12580 <__fprintf_chk@plt>
   16cb8:	ldr	r3, [r4, #160]	; 0xa0
   16cbc:	ldr	r2, [r3, #24]
   16cc0:	b	16b64 <__assert_fail@plt+0x43c8>
   16cc4:	ldr	r2, [pc, #120]	; 16d44 <__assert_fail@plt+0x45a8>
   16cc8:	add	r3, r2, r3, lsl #3
   16ccc:	ldr	r3, [r3, #476]	; 0x1dc
   16cd0:	b	16cac <__assert_fail@plt+0x4510>
   16cd4:	bl	12244 <__stack_chk_fail@plt>
   16cd8:	mov	r2, #5
   16cdc:	ldr	r1, [pc, #100]	; 16d48 <__assert_fail@plt+0x45ac>
   16ce0:	mov	r0, #0
   16ce4:	bl	1222c <dcgettext@plt>
   16ce8:	mov	r1, #0
   16cec:	mov	r2, r0
   16cf0:	mov	r0, #1
   16cf4:	bl	12388 <error@plt>
   16cf8:	andeq	fp, r5, r0, ror #24
   16cfc:	andeq	ip, r5, ip, asr lr
   16d00:			; <UNDEFINED> instruction: 0x00014bb0
   16d04:	andeq	r3, r1, r0, ror ip
   16d08:	muleq	r1, r4, ip
   16d0c:	andeq	r3, r1, ip, asr #24
   16d10:	andeq	r4, r1, r4, ror fp
   16d14:	andeq	r3, r1, r4, lsr r9
   16d18:	andeq	r3, r1, r0, lsl #18
   16d1c:	andeq	r4, r1, ip, asr #6
   16d20:	andeq	r3, r1, ip, lsl lr
   16d24:	andeq	ip, r5, r8, lsr r5
   16d28:	strdeq	r5, [r4], -r8
   16d2c:	andeq	r5, r4, r0, lsl r2
   16d30:	andeq	r5, r4, r4, lsr r2
   16d34:	andeq	r5, r4, r8, asr #4
   16d38:	andeq	ip, r5, r8, asr #7
   16d3c:	andeq	r5, r4, r0, lsl r1
   16d40:	andeq	r5, r4, r8, ror #4
   16d44:	strdeq	ip, [r5], -r0
   16d48:	andeq	r4, r4, r4, ror #29
   16d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16d50:	vpush	{d8}
   16d54:	subs	r4, r0, #0
   16d58:	sub	sp, sp, #20
   16d5c:	beq	16db0 <__assert_fail@plt+0x4614>
   16d60:	ldr	r9, [pc, #508]	; 16f64 <__assert_fail@plt+0x47c8>
   16d64:	ldr	r6, [pc, #508]	; 16f68 <__assert_fail@plt+0x47cc>
   16d68:	ldr	sl, [pc, #508]	; 16f6c <__assert_fail@plt+0x47d0>
   16d6c:	ldr	r5, [pc, #508]	; 16f70 <__assert_fail@plt+0x47d4>
   16d70:	ldr	r3, [r4, #8]
   16d74:	ldr	r2, [r9, #44]	; 0x2c
   16d78:	cmp	r3, #3
   16d7c:	and	r2, r2, #8
   16d80:	beq	16de4 <__assert_fail@plt+0x4648>
   16d84:	mov	r3, r6
   16d88:	cmp	r2, #0
   16d8c:	bne	16dc0 <__assert_fail@plt+0x4624>
   16d90:	ldr	r0, [r4, #156]	; 0x9c
   16d94:	bl	16d4c <__assert_fail@plt+0x45b0>
   16d98:	cmp	r0, #0
   16d9c:	bne	16d70 <__assert_fail@plt+0x45d4>
   16da0:	ldr	r0, [r4, #160]	; 0xa0
   16da4:	bl	16d4c <__assert_fail@plt+0x45b0>
   16da8:	cmp	r0, #0
   16dac:	bne	16d70 <__assert_fail@plt+0x45d4>
   16db0:	mov	r0, #0
   16db4:	add	sp, sp, #20
   16db8:	vpop	{d8}
   16dbc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dc0:	ldr	r2, [pc, #428]	; 16f74 <__assert_fail@plt+0x47d8>
   16dc4:	mov	r1, #1
   16dc8:	ldr	r0, [r5]
   16dcc:	bl	12580 <__fprintf_chk@plt>
   16dd0:	mov	r2, #0
   16dd4:	mov	r1, r4
   16dd8:	ldr	r0, [r5]
   16ddc:	bl	162f4 <__assert_fail@plt+0x3b58>
   16de0:	b	16d90 <__assert_fail@plt+0x45f4>
   16de4:	ldr	r3, [r4, #156]	; 0x9c
   16de8:	cmp	r3, #0
   16dec:	beq	16ed0 <__assert_fail@plt+0x4734>
   16df0:	ldr	r1, [r4, #160]	; 0xa0
   16df4:	cmp	r1, #0
   16df8:	beq	16ed0 <__assert_fail@plt+0x4734>
   16dfc:	ldr	r1, [r3, #160]	; 0xa0
   16e00:	cmp	r1, #0
   16e04:	beq	16e9c <__assert_fail@plt+0x4700>
   16e08:	ldr	r7, [pc, #360]	; 16f78 <__assert_fail@plt+0x47dc>
   16e0c:	mov	r0, r1
   16e10:	bl	1567c <__assert_fail@plt+0x2ee0>
   16e14:	cmp	r0, #0
   16e18:	ldrne	r3, [pc, #348]	; 16f7c <__assert_fail@plt+0x47e0>
   16e1c:	bne	16d88 <__assert_fail@plt+0x45ec>
   16e20:	ldr	r8, [r4, #160]	; 0xa0
   16e24:	mov	r0, r8
   16e28:	bl	1567c <__assert_fail@plt+0x2ee0>
   16e2c:	cmp	r0, #0
   16e30:	ldrne	r3, [pc, #328]	; 16f80 <__assert_fail@plt+0x47e4>
   16e34:	bne	16d88 <__assert_fail@plt+0x45ec>
   16e38:	mov	r0, r1
   16e3c:	bl	15d38 <__assert_fail@plt+0x359c>
   16e40:	mov	fp, r0
   16e44:	subs	r0, r8, #0
   16e48:	beq	16e50 <__assert_fail@plt+0x46b4>
   16e4c:	bl	15d38 <__assert_fail@plt+0x359c>
   16e50:	cmp	fp, r0
   16e54:	ldrlt	r3, [pc, #296]	; 16f84 <__assert_fail@plt+0x47e8>
   16e58:	blt	16d88 <__assert_fail@plt+0x45ec>
   16e5c:	beq	16ea4 <__assert_fail@plt+0x4708>
   16e60:	cmp	r2, #0
   16e64:	bne	16ed8 <__assert_fail@plt+0x473c>
   16e68:	ldr	r3, [r4, #156]	; 0x9c
   16e6c:	ldr	ip, [r4, #8]
   16e70:	ldr	r0, [r4, #160]	; 0xa0
   16e74:	ldr	r1, [r3, #160]	; 0xa0
   16e78:	cmp	ip, #3
   16e7c:	str	r0, [r3, #160]	; 0xa0
   16e80:	str	r1, [r4, #160]	; 0xa0
   16e84:	bne	16d84 <__assert_fail@plt+0x45e8>
   16e88:	cmp	r1, #0
   16e8c:	beq	16ed0 <__assert_fail@plt+0x4734>
   16e90:	ldr	r1, [r3, #160]	; 0xa0
   16e94:	cmp	r1, #0
   16e98:	bne	16e0c <__assert_fail@plt+0x4670>
   16e9c:	ldr	r3, [pc, #228]	; 16f88 <__assert_fail@plt+0x47ec>
   16ea0:	b	16d88 <__assert_fail@plt+0x45ec>
   16ea4:	cmp	r2, #0
   16ea8:	vldr	s17, [r1, #28]
   16eac:	vldr	s16, [r8, #28]
   16eb0:	bne	16f08 <__assert_fail@plt+0x476c>
   16eb4:	ldr	r3, [r4]
   16eb8:	cmp	r3, sl
   16ebc:	beq	16f3c <__assert_fail@plt+0x47a0>
   16ec0:	cmp	r3, r7
   16ec4:	beq	16f50 <__assert_fail@plt+0x47b4>
   16ec8:	ldr	r3, [pc, #188]	; 16f8c <__assert_fail@plt+0x47f0>
   16ecc:	b	16d88 <__assert_fail@plt+0x45ec>
   16ed0:	ldr	r3, [pc, #184]	; 16f90 <__assert_fail@plt+0x47f4>
   16ed4:	b	16d88 <__assert_fail@plt+0x45ec>
   16ed8:	ldr	r3, [r5]
   16edc:	mov	r2, #24
   16ee0:	mov	r1, #1
   16ee4:	ldr	r0, [pc, #168]	; 16f94 <__assert_fail@plt+0x47f8>
   16ee8:	bl	122f8 <fwrite@plt>
   16eec:	mov	r2, #0
   16ef0:	mov	r1, r4
   16ef4:	ldr	r0, [r5]
   16ef8:	bl	162f4 <__assert_fail@plt+0x3b58>
   16efc:	ldr	r2, [r9, #44]	; 0x2c
   16f00:	and	r2, r2, #8
   16f04:	b	16e68 <__assert_fail@plt+0x46cc>
   16f08:	vcvt.f64.f32	d6, s16
   16f0c:	vcvt.f64.f32	d7, s17
   16f10:	ldr	r2, [pc, #128]	; 16f98 <__assert_fail@plt+0x47fc>
   16f14:	mov	r1, #1
   16f18:	ldr	r0, [r5]
   16f1c:	vstr	d6, [sp, #8]
   16f20:	vstr	d7, [sp]
   16f24:	bl	12580 <__fprintf_chk@plt>
   16f28:	ldr	r3, [r4]
   16f2c:	ldr	r2, [r9, #44]	; 0x2c
   16f30:	cmp	r3, sl
   16f34:	and	r2, r2, #8
   16f38:	bne	16ec0 <__assert_fail@plt+0x4724>
   16f3c:	vcmpe.f32	s17, s16
   16f40:	vmrs	APSR_nzcv, fpscr
   16f44:	bgt	16e60 <__assert_fail@plt+0x46c4>
   16f48:	ldr	r3, [pc, #76]	; 16f9c <__assert_fail@plt+0x4800>
   16f4c:	b	16d88 <__assert_fail@plt+0x45ec>
   16f50:	vcmpe.f32	s17, s16
   16f54:	vmrs	APSR_nzcv, fpscr
   16f58:	bmi	16e60 <__assert_fail@plt+0x46c4>
   16f5c:	ldr	r3, [pc, #60]	; 16fa0 <__assert_fail@plt+0x4804>
   16f60:	b	16d88 <__assert_fail@plt+0x45ec>
   16f64:	andeq	ip, r5, ip, asr lr
   16f68:			; <UNDEFINED> instruction: 0x000452b0
   16f6c:	andeq	r4, r1, ip, asr #6
   16f70:	andeq	ip, r5, r8, lsr r5
   16f74:	andeq	r5, r4, r0, asr #7
   16f78:	andeq	r4, r1, r4, ror fp
   16f7c:	andeq	r5, r4, r8, asr #5
   16f80:	andeq	r5, r4, ip, lsl #6
   16f84:	strdeq	r5, [r4], -ip
   16f88:	andeq	r5, r4, r8, ror r2
   16f8c:	andeq	r5, r4, r8, ror #5
   16f90:	muleq	r4, r8, r2
   16f94:	andeq	r5, r4, r4, lsr #7
   16f98:	andeq	r5, r4, r8, lsl #7
   16f9c:	andeq	r5, r4, ip, lsr #6
   16fa0:	andeq	r5, r4, r8, asr r3
   16fa4:	ldr	r3, [pc, #1492]	; 17580 <__assert_fail@plt+0x4de4>
   16fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fac:	mov	r4, r1
   16fb0:	ldr	r6, [pc, #1484]	; 17584 <__assert_fail@plt+0x4de8>
   16fb4:	sub	sp, sp, #44	; 0x2c
   16fb8:	add	r1, r1, r2, lsl #2
   16fbc:	ldr	r3, [r3]
   16fc0:	str	r1, [r6, #8]
   16fc4:	cmp	r2, r0
   16fc8:	mov	r1, #0
   16fcc:	str	r2, [sp, #32]
   16fd0:	str	r0, [sp, #20]
   16fd4:	str	r1, [r6, #16]
   16fd8:	str	r3, [sp, #36]	; 0x24
   16fdc:	blt	17008 <__assert_fail@plt+0x486c>
   16fe0:	b	1701c <__assert_fail@plt+0x4880>
   16fe4:	ldr	r2, [sp, #32]
   16fe8:	ldr	r3, [r6, #4]
   16fec:	ldr	r1, [sp, #20]
   16ff0:	add	r2, r2, #1
   16ff4:	add	r3, r3, #1
   16ff8:	cmp	r2, r1
   16ffc:	str	r2, [sp, #32]
   17000:	str	r3, [r6, #4]
   17004:	bge	1701c <__assert_fail@plt+0x4880>
   17008:	ldr	r0, [r4, r2, lsl #2]
   1700c:	mov	r1, #1
   17010:	bl	184cc <__assert_fail@plt+0x5d30>
   17014:	cmp	r0, #0
   17018:	beq	16fe4 <__assert_fail@plt+0x4848>
   1701c:	ldr	r5, [pc, #1380]	; 17588 <__assert_fail@plt+0x4dec>
   17020:	mov	r0, r5
   17024:	bl	1ec08 <__assert_fail@plt+0xc46c>
   17028:	mov	r7, r0
   1702c:	ldr	r0, [pc, #1368]	; 1758c <__assert_fail@plt+0x4df0>
   17030:	bl	1ec08 <__assert_fail@plt+0xc46c>
   17034:	str	r0, [sp, #16]
   17038:	ldr	r0, [pc, #1360]	; 17590 <__assert_fail@plt+0x4df4>
   1703c:	bl	1ec08 <__assert_fail@plt+0xc46c>
   17040:	cmp	r7, #0
   17044:	str	r0, [sp, #12]
   17048:	beq	1754c <__assert_fail@plt+0x4db0>
   1704c:	ldr	r3, [sp, #16]
   17050:	cmp	r3, #0
   17054:	beq	17538 <__assert_fail@plt+0x4d9c>
   17058:	ldr	r3, [sp, #12]
   1705c:	cmp	r3, #0
   17060:	beq	17524 <__assert_fail@plt+0x4d88>
   17064:	add	r2, sp, #20
   17068:	mov	r1, r4
   1706c:	mov	r0, r7
   17070:	bl	1d044 <__assert_fail@plt+0xa8a8>
   17074:	ldr	r3, [r6, #16]
   17078:	ldr	r2, [r6, #20]
   1707c:	mov	r1, #1
   17080:	mov	r0, r4
   17084:	str	r5, [r2, #4]
   17088:	strb	r1, [r3, #33]	; 0x21
   1708c:	ldr	r1, [sp, #20]
   17090:	bl	1ebf0 <__assert_fail@plt+0xc454>
   17094:	ldr	r0, [r6, #20]
   17098:	bl	14d9c <__assert_fail@plt+0x2600>
   1709c:	ldr	r3, [sp, #32]
   170a0:	ldr	r1, [sp, #20]
   170a4:	cmp	r3, r1
   170a8:	bge	171a0 <__assert_fail@plt+0x4a04>
   170ac:	ldr	r9, [pc, #1248]	; 17594 <__assert_fail@plt+0x4df8>
   170b0:	mov	r8, #0
   170b4:	b	170f0 <__assert_fail@plt+0x4954>
   170b8:	ldr	r3, [sp, #32]
   170bc:	ldr	r0, [r6, #20]
   170c0:	cmp	r3, fp
   170c4:	moveq	r3, #0
   170c8:	str	r7, [r0, #4]
   170cc:	ldrne	r3, [r4, fp, lsl #2]
   170d0:	str	r3, [r0, #36]	; 0x24
   170d4:	bl	14d9c <__assert_fail@plt+0x2600>
   170d8:	ldr	r0, [r6, #16]
   170dc:	bl	14d9c <__assert_fail@plt+0x2600>
   170e0:	ldr	r3, [sp, #32]
   170e4:	ldr	r1, [sp, #20]
   170e8:	cmp	r3, r1
   170ec:	bge	171a0 <__assert_fail@plt+0x4a04>
   170f0:	ldr	r0, [r4, r3, lsl #2]
   170f4:	mov	r1, #0
   170f8:	strb	r8, [r9, #40]	; 0x28
   170fc:	bl	184cc <__assert_fail@plt+0x5d30>
   17100:	subs	r5, r0, #0
   17104:	beq	174a8 <__assert_fail@plt+0x4d0c>
   17108:	ldr	r3, [sp, #32]
   1710c:	ldr	r7, [r4, r3, lsl #2]
   17110:	mov	r0, r7
   17114:	bl	1ec08 <__assert_fail@plt+0xc46c>
   17118:	subs	r5, r0, #0
   1711c:	beq	17488 <__assert_fail@plt+0x4cec>
   17120:	ldr	r3, [r5]
   17124:	ldr	fp, [sp, #32]
   17128:	cmp	r3, #4
   1712c:	addne	fp, fp, #1
   17130:	strne	fp, [sp, #32]
   17134:	ldr	r3, [r5, #8]
   17138:	add	r2, sp, #32
   1713c:	mov	r1, r4
   17140:	mov	r0, r5
   17144:	blx	r3
   17148:	subs	sl, r0, #0
   1714c:	bne	170b8 <__assert_fail@plt+0x491c>
   17150:	ldr	r1, [sp, #32]
   17154:	ldr	r6, [r4, r1, lsl #2]
   17158:	cmp	r6, #0
   1715c:	beq	17560 <__assert_fail@plt+0x4dc4>
   17160:	ldr	r2, [r5]
   17164:	cmp	r2, #4
   17168:	cmpeq	r1, fp
   1716c:	moveq	r5, #1
   17170:	movne	r5, #0
   17174:	mov	r2, #5
   17178:	beq	173e4 <__assert_fail@plt+0x4c48>
   1717c:	ldr	r1, [pc, #1044]	; 17598 <__assert_fail@plt+0x4dfc>
   17180:	bl	1222c <dcgettext@plt>
   17184:	ldr	r3, [sp, #32]
   17188:	str	r7, [sp]
   1718c:	mov	r1, r5
   17190:	ldr	r3, [r4, r3, lsl #2]
   17194:	mov	r2, r0
   17198:	mov	r0, #1
   1719c:	bl	12388 <error@plt>
   171a0:	ldr	r3, [r6, #16]
   171a4:	ldr	r2, [r6, #20]
   171a8:	mov	r0, r4
   171ac:	bl	1ec04 <__assert_fail@plt+0xc468>
   171b0:	ldr	r2, [r6, #16]
   171b4:	ldr	r3, [r2, #152]	; 0x98
   171b8:	cmp	r3, #0
   171bc:	beq	17384 <__assert_fail@plt+0x4be8>
   171c0:	mov	r0, r3
   171c4:	bl	1848c <__assert_fail@plt+0x5cf0>
   171c8:	cmp	r0, #0
   171cc:	beq	172bc <__assert_fail@plt+0x4b20>
   171d0:	add	r2, sp, #20
   171d4:	mov	r1, r4
   171d8:	ldr	r0, [sp, #16]
   171dc:	bl	1ce40 <__assert_fail@plt+0xa6a4>
   171e0:	ldr	r0, [r6, #20]
   171e4:	ldr	r3, [pc, #928]	; 1758c <__assert_fail@plt+0x4df0>
   171e8:	mov	r5, #1
   171ec:	str	r3, [r0, #4]
   171f0:	strb	r5, [r0, #33]	; 0x21
   171f4:	bl	14d9c <__assert_fail@plt+0x2600>
   171f8:	add	r2, sp, #20
   171fc:	mov	r1, r4
   17200:	ldr	r0, [sp, #12]
   17204:	bl	1c314 <__assert_fail@plt+0x9b78>
   17208:	ldr	r3, [r6, #20]
   1720c:	ldr	r2, [pc, #904]	; 1759c <__assert_fail@plt+0x4e00>
   17210:	mov	r0, r3
   17214:	strb	r5, [r3, #33]	; 0x21
   17218:	str	r2, [r3, #4]
   1721c:	bl	14d9c <__assert_fail@plt+0x2600>
   17220:	ldr	r0, [r6, #16]
   17224:	bl	14d9c <__assert_fail@plt+0x2600>
   17228:	ldr	r5, [pc, #880]	; 175a0 <__assert_fail@plt+0x4e04>
   1722c:	ldr	r3, [r5, #44]	; 0x2c
   17230:	tst	r3, #9
   17234:	bne	172ec <__assert_fail@plt+0x4b50>
   17238:	ldr	r0, [r6, #16]
   1723c:	bl	1eac0 <__assert_fail@plt+0xc324>
   17240:	ldr	r0, [r6, #16]
   17244:	bl	14d9c <__assert_fail@plt+0x2600>
   17248:	ldr	ip, [r6, #16]
   1724c:	mov	r3, #8
   17250:	mov	r2, #4
   17254:	mov	r1, #0
   17258:	add	r0, sp, #28
   1725c:	str	ip, [sp, #28]
   17260:	bl	15874 <__assert_fail@plt+0x30d8>
   17264:	str	r0, [r6, #12]
   17268:	bl	15e58 <__assert_fail@plt+0x36bc>
   1726c:	ldr	r4, [sp, #28]
   17270:	cmp	r4, #0
   17274:	beq	17314 <__assert_fail@plt+0x4b78>
   17278:	ldr	r3, [pc, #804]	; 175a4 <__assert_fail@plt+0x4e08>
   1727c:	ldr	r2, [r4]
   17280:	cmp	r2, r3
   17284:	beq	17514 <__assert_fail@plt+0x4d78>
   17288:	ldr	r4, [r4, #4]
   1728c:	mov	r2, #5
   17290:	cmp	r4, #0
   17294:	beq	173c8 <__assert_fail@plt+0x4c2c>
   17298:	ldr	r1, [pc, #776]	; 175a8 <__assert_fail@plt+0x4e0c>
   1729c:	mov	r0, #0
   172a0:	bl	1222c <dcgettext@plt>
   172a4:	ldr	r3, [sp, #28]
   172a8:	mov	r1, #0
   172ac:	ldr	r3, [r3, #4]
   172b0:	mov	r2, r0
   172b4:	mov	r0, #1
   172b8:	bl	12388 <error@plt>
   172bc:	ldr	r3, [r6, #16]
   172c0:	ldr	r5, [pc, #728]	; 175a0 <__assert_fail@plt+0x4e04>
   172c4:	str	r3, [sp, #28]
   172c8:	ldr	r3, [r3, #152]	; 0x98
   172cc:	mov	r0, r3
   172d0:	str	r3, [r6, #16]
   172d4:	bl	14d9c <__assert_fail@plt+0x2600>
   172d8:	ldr	r0, [sp, #28]
   172dc:	bl	12154 <free@plt>
   172e0:	ldr	r3, [r5, #44]	; 0x2c
   172e4:	tst	r3, #9
   172e8:	beq	17238 <__assert_fail@plt+0x4a9c>
   172ec:	ldr	r4, [pc, #696]	; 175ac <__assert_fail@plt+0x4e10>
   172f0:	mov	r2, #16
   172f4:	mov	r1, #1
   172f8:	ldr	r3, [r4]
   172fc:	ldr	r0, [pc, #684]	; 175b0 <__assert_fail@plt+0x4e14>
   17300:	bl	122f8 <fwrite@plt>
   17304:	ldr	r0, [r4]
   17308:	ldr	r1, [r6, #16]
   1730c:	bl	14c44 <__assert_fail@plt+0x24a8>
   17310:	b	17238 <__assert_fail@plt+0x4a9c>
   17314:	ldr	r3, [r5, #44]	; 0x2c
   17318:	tst	r3, #9
   1731c:	bne	17400 <__assert_fail@plt+0x4c64>
   17320:	ldr	r0, [r6, #12]
   17324:	bl	15b14 <__assert_fail@plt+0x3378>
   17328:	ldr	r0, [pc, #644]	; 175b4 <__assert_fail@plt+0x4e18>
   1732c:	bl	168ac <__assert_fail@plt+0x4110>
   17330:	ldr	r4, [r6, #12]
   17334:	mov	r1, #1
   17338:	mov	r0, r4
   1733c:	bl	157ec <__assert_fail@plt+0x3050>
   17340:	mov	r0, r4
   17344:	bl	16d4c <__assert_fail@plt+0x45b0>
   17348:	ldr	r4, [r6, #12]
   1734c:	mov	r1, #1
   17350:	mov	r0, r4
   17354:	bl	157ec <__assert_fail@plt+0x3050>
   17358:	ldr	r3, [r5, #44]	; 0x2c
   1735c:	tst	r3, #9
   17360:	bne	1742c <__assert_fail@plt+0x4c90>
   17364:	ldr	r3, [pc, #532]	; 17580 <__assert_fail@plt+0x4de4>
   17368:	ldr	r2, [sp, #36]	; 0x24
   1736c:	mov	r0, r4
   17370:	ldr	r3, [r3]
   17374:	cmp	r2, r3
   17378:	bne	17520 <__assert_fail@plt+0x4d84>
   1737c:	add	sp, sp, #44	; 0x2c
   17380:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17384:	mov	r0, r2
   17388:	str	r3, [r6, #20]
   1738c:	str	r3, [r6, #16]
   17390:	str	r2, [sp, #28]
   17394:	bl	12154 <free@plt>
   17398:	add	r2, sp, #20
   1739c:	mov	r1, r4
   173a0:	ldr	r0, [sp, #12]
   173a4:	bl	1c314 <__assert_fail@plt+0x9b78>
   173a8:	ldr	r3, [r6, #20]
   173ac:	ldr	r2, [pc, #488]	; 1759c <__assert_fail@plt+0x4e00>
   173b0:	mov	r0, r3
   173b4:	str	r2, [r3, #4]
   173b8:	bl	14d9c <__assert_fail@plt+0x2600>
   173bc:	ldr	r0, [r6, #16]
   173c0:	bl	14d9c <__assert_fail@plt+0x2600>
   173c4:	b	17228 <__assert_fail@plt+0x4a8c>
   173c8:	ldr	r1, [pc, #488]	; 175b8 <__assert_fail@plt+0x4e1c>
   173cc:	mov	r0, #0
   173d0:	bl	1222c <dcgettext@plt>
   173d4:	mov	r1, #0
   173d8:	mov	r2, r0
   173dc:	mov	r0, #1
   173e0:	bl	12388 <error@plt>
   173e4:	ldr	r1, [pc, #464]	; 175bc <__assert_fail@plt+0x4e20>
   173e8:	bl	1222c <dcgettext@plt>
   173ec:	mov	r3, r7
   173f0:	mov	r1, sl
   173f4:	mov	r2, r0
   173f8:	mov	r0, #1
   173fc:	bl	12388 <error@plt>
   17400:	ldr	r7, [pc, #420]	; 175ac <__assert_fail@plt+0x4e10>
   17404:	mov	r2, #11
   17408:	mov	r1, #1
   1740c:	ldr	r3, [r7]
   17410:	ldr	r0, [pc, #424]	; 175c0 <__assert_fail@plt+0x4e24>
   17414:	bl	122f8 <fwrite@plt>
   17418:	mov	r2, r4
   1741c:	ldr	r0, [r7]
   17420:	ldr	r1, [r6, #12]
   17424:	bl	162f4 <__assert_fail@plt+0x3b58>
   17428:	b	17320 <__assert_fail@plt+0x4b84>
   1742c:	ldr	r4, [pc, #376]	; 175ac <__assert_fail@plt+0x4e10>
   17430:	mov	r2, #21
   17434:	mov	r1, #1
   17438:	ldr	r3, [r4]
   1743c:	ldr	r0, [pc, #384]	; 175c4 <__assert_fail@plt+0x4e28>
   17440:	bl	122f8 <fwrite@plt>
   17444:	ldr	r0, [r4]
   17448:	mov	r2, #0
   1744c:	ldr	r1, [r6, #12]
   17450:	bl	162f4 <__assert_fail@plt+0x3b58>
   17454:	ldr	r3, [r4]
   17458:	mov	r2, #24
   1745c:	mov	r1, #1
   17460:	ldr	r0, [pc, #352]	; 175c8 <__assert_fail@plt+0x4e2c>
   17464:	bl	122f8 <fwrite@plt>
   17468:	ldr	r0, [r4]
   1746c:	ldr	r1, [r6, #12]
   17470:	bl	14d2c <__assert_fail@plt+0x2590>
   17474:	ldr	r1, [r4]
   17478:	mov	r0, #10
   1747c:	bl	12634 <fputc@plt>
   17480:	ldr	r4, [r6, #12]
   17484:	b	17364 <__assert_fail@plt+0x4bc8>
   17488:	mov	r2, #5
   1748c:	ldr	r1, [pc, #312]	; 175cc <__assert_fail@plt+0x4e30>
   17490:	bl	1222c <dcgettext@plt>
   17494:	mov	r3, r7
   17498:	mov	r1, r5
   1749c:	mov	r2, r0
   174a0:	mov	r0, #1
   174a4:	bl	12388 <error@plt>
   174a8:	mov	r2, #5
   174ac:	ldr	r1, [pc, #284]	; 175d0 <__assert_fail@plt+0x4e34>
   174b0:	bl	1222c <dcgettext@plt>
   174b4:	ldr	r3, [sp, #32]
   174b8:	mov	r1, r5
   174bc:	ldr	r3, [r4, r3, lsl #2]
   174c0:	mov	r2, r0
   174c4:	mov	r0, r5
   174c8:	bl	12388 <error@plt>
   174cc:	ldr	r3, [sp, #32]
   174d0:	mov	r1, r5
   174d4:	ldr	r0, [r4, r3, lsl #2]
   174d8:	bl	125a4 <access@plt>
   174dc:	subs	r4, r0, #0
   174e0:	beq	174ec <__assert_fail@plt+0x4d50>
   174e4:	mov	r0, #1
   174e8:	bl	12478 <exit@plt>
   174ec:	mov	r2, #5
   174f0:	ldr	r1, [pc, #220]	; 175d4 <__assert_fail@plt+0x4e38>
   174f4:	bl	1222c <dcgettext@plt>
   174f8:	ldr	r3, [r6, #20]
   174fc:	mov	r1, r4
   17500:	ldr	r3, [r3, #4]
   17504:	mov	r2, r0
   17508:	mov	r0, r4
   1750c:	bl	12388 <error@plt>
   17510:	b	174e4 <__assert_fail@plt+0x4d48>
   17514:	mov	r2, #5
   17518:	ldr	r1, [pc, #184]	; 175d8 <__assert_fail@plt+0x4e3c>
   1751c:	b	173cc <__assert_fail@plt+0x4c30>
   17520:	bl	12244 <__stack_chk_fail@plt>
   17524:	ldr	r3, [pc, #176]	; 175dc <__assert_fail@plt+0x4e40>
   17528:	ldr	r2, [pc, #176]	; 175e0 <__assert_fail@plt+0x4e44>
   1752c:	ldr	r1, [pc, #176]	; 175e4 <__assert_fail@plt+0x4e48>
   17530:	ldr	r0, [pc, #176]	; 175e8 <__assert_fail@plt+0x4e4c>
   17534:	bl	1279c <__assert_fail@plt>
   17538:	ldr	r3, [pc, #156]	; 175dc <__assert_fail@plt+0x4e40>
   1753c:	ldr	r2, [pc, #168]	; 175ec <__assert_fail@plt+0x4e50>
   17540:	ldr	r1, [pc, #156]	; 175e4 <__assert_fail@plt+0x4e48>
   17544:	ldr	r0, [pc, #164]	; 175f0 <__assert_fail@plt+0x4e54>
   17548:	bl	1279c <__assert_fail@plt>
   1754c:	ldr	r3, [pc, #136]	; 175dc <__assert_fail@plt+0x4e40>
   17550:	ldr	r2, [pc, #156]	; 175f4 <__assert_fail@plt+0x4e58>
   17554:	ldr	r1, [pc, #136]	; 175e4 <__assert_fail@plt+0x4e48>
   17558:	ldr	r0, [pc, #152]	; 175f8 <__assert_fail@plt+0x4e5c>
   1755c:	bl	1279c <__assert_fail@plt>
   17560:	mov	r2, #5
   17564:	ldr	r1, [pc, #144]	; 175fc <__assert_fail@plt+0x4e60>
   17568:	bl	1222c <dcgettext@plt>
   1756c:	mov	r3, r7
   17570:	mov	r1, r6
   17574:	mov	r2, r0
   17578:	mov	r0, #1
   1757c:	bl	12388 <error@plt>
   17580:	andeq	fp, r5, r0, ror #24
   17584:	andeq	ip, r5, r0, ror #10
   17588:	andeq	r5, r4, r4, ror #7
   1758c:	andeq	r6, r4, r4, lsr r3
   17590:	andeq	r5, r4, r8, ror #7
   17594:	andeq	ip, r5, r0, lsr lr
   17598:			; <UNDEFINED> instruction: 0x000454b0
   1759c:	andeq	r5, r4, ip, ror #9
   175a0:	andeq	ip, r5, ip, asr lr
   175a4:			; <UNDEFINED> instruction: 0x000135b0
   175a8:	andeq	r5, r4, r8, lsl #10
   175ac:	andeq	ip, r5, r8, lsr r5
   175b0:	strdeq	r5, [r4], -r4
   175b4:	andeq	ip, r5, ip, ror #10
   175b8:	andeq	r5, r4, r8, lsr #10
   175bc:	muleq	r4, r8, r4
   175c0:	andeq	r5, r4, r4, asr #10
   175c4:	andeq	r5, r4, r0, asr r5
   175c8:	andeq	r5, r4, r8, ror #10
   175cc:	andeq	r5, r4, r0, lsl #9
   175d0:	andeq	r5, r4, ip, lsr #8
   175d4:	andeq	r5, r4, r0, asr r4
   175d8:	ldrdeq	r4, [r4], -r0
   175dc:	andeq	r4, r4, r4, lsr #25
   175e0:	andeq	r0, r0, sl, ror #9
   175e4:	andeq	r4, r4, r8, asr #25
   175e8:	andeq	r5, r4, r8, lsl r4
   175ec:	andeq	r0, r0, r9, ror #9
   175f0:	andeq	r5, r4, r4, lsl #8
   175f4:	andeq	r0, r0, r8, ror #9
   175f8:	strdeq	r5, [r4], -r0
   175fc:	ldrdeq	r5, [r4], -r0
   17600:	push	{r4, r5, r6, lr}
   17604:	mov	r4, r0
   17608:	mov	r5, r1
   1760c:	ldr	r3, [r4, #156]	; 0x9c
   17610:	mov	r1, r5
   17614:	subs	r0, r3, #0
   17618:	beq	17620 <__assert_fail@plt+0x4e84>
   1761c:	bl	17600 <__assert_fail@plt+0x4e64>
   17620:	mov	r0, r4
   17624:	blx	r5
   17628:	ldr	r4, [r4, #160]	; 0xa0
   1762c:	cmp	r4, #0
   17630:	bne	1760c <__assert_fail@plt+0x4e70>
   17634:	pop	{r4, r5, r6, pc}
   17638:	ldr	r3, [pc, #60]	; 1767c <__assert_fail@plt+0x4ee0>
   1763c:	ldr	r2, [r0]
   17640:	ldr	r1, [pc, #56]	; 17680 <__assert_fail@plt+0x4ee4>
   17644:	ldr	ip, [pc, #56]	; 17684 <__assert_fail@plt+0x4ee8>
   17648:	cmp	r2, r1
   1764c:	cmpne	r2, r3
   17650:	moveq	r3, #1
   17654:	movne	r3, #0
   17658:	ldr	r1, [pc, #40]	; 17688 <__assert_fail@plt+0x4eec>
   1765c:	cmp	r2, ip
   17660:	orreq	r3, r3, #1
   17664:	cmp	r2, r1
   17668:	orreq	r3, r3, #1
   1766c:	cmp	r3, #0
   17670:	movne	r3, #0
   17674:	strne	r3, [r0, #44]	; 0x2c
   17678:	bx	lr
   1767c:	andeq	r3, r1, r0, asr #23
   17680:	strdeq	sl, [r1], -r8
   17684:	andeq	r4, r1, ip, ror #23
   17688:	strdeq	r3, [r1], -r8
   1768c:	subs	ip, r2, #0
   17690:	push	{r4, r5, r6, lr}
   17694:	mov	r5, r0
   17698:	mov	r6, r1
   1769c:	beq	176f0 <__assert_fail@plt+0x4f54>
   176a0:	ldr	r4, [pc, #136]	; 17730 <__assert_fail@plt+0x4f94>
   176a4:	ldrb	r0, [r4, #40]	; 0x28
   176a8:	cmp	r0, #0
   176ac:	bne	176e4 <__assert_fail@plt+0x4f48>
   176b0:	ldr	r1, [pc, #124]	; 17734 <__assert_fail@plt+0x4f98>
   176b4:	mov	r2, r3
   176b8:	ldr	r1, [r1, #72]	; 0x48
   176bc:	bl	2d52c <__assert_fail@plt+0x1ad90>
   176c0:	mov	r1, r6
   176c4:	ldr	r2, [pc, #108]	; 17738 <__assert_fail@plt+0x4f9c>
   176c8:	mov	r3, r0
   176cc:	mov	r0, r5
   176d0:	bl	12388 <error@plt>
   176d4:	ldr	r3, [r4, #28]
   176d8:	cmp	r3, #0
   176dc:	movle	r3, #1
   176e0:	strle	r3, [r4, #28]
   176e4:	mov	r3, #1
   176e8:	strb	r3, [r4, #40]	; 0x28
   176ec:	pop	{r4, r5, r6, pc}
   176f0:	ldr	r1, [pc, #60]	; 17734 <__assert_fail@plt+0x4f98>
   176f4:	mov	r2, r3
   176f8:	mov	r0, ip
   176fc:	ldr	r1, [r1, #72]	; 0x48
   17700:	bl	2d52c <__assert_fail@plt+0x1ad90>
   17704:	ldr	r2, [pc, #44]	; 17738 <__assert_fail@plt+0x4f9c>
   17708:	mov	r1, r6
   1770c:	mov	r3, r0
   17710:	mov	r0, r5
   17714:	bl	12388 <error@plt>
   17718:	ldr	r3, [pc, #16]	; 17730 <__assert_fail@plt+0x4f94>
   1771c:	ldr	r2, [r3, #28]
   17720:	cmp	r2, #0
   17724:	movle	r2, #1
   17728:	strle	r2, [r3, #28]
   1772c:	pop	{r4, r5, r6, pc}
   17730:	andeq	ip, r5, r0, lsr lr
   17734:	andeq	ip, r5, ip, asr lr
   17738:	andeq	r8, r4, r8, asr #11
   1773c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17740:	subs	r4, r0, #0
   17744:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   17748:	ldr	r7, [pc, #176]	; 17800 <__assert_fail@plt+0x5064>
   1774c:	ldrb	r3, [r7, #32]
   17750:	cmp	r3, #0
   17754:	beq	177ec <__assert_fail@plt+0x5050>
   17758:	ldr	r6, [pc, #164]	; 17804 <__assert_fail@plt+0x5068>
   1775c:	ldr	r5, [pc, #164]	; 17808 <__assert_fail@plt+0x506c>
   17760:	ldr	r9, [pc, #164]	; 1780c <__assert_fail@plt+0x5070>
   17764:	ldr	r8, [pc, #164]	; 17810 <__assert_fail@plt+0x5074>
   17768:	mov	sl, #0
   1776c:	b	17788 <__assert_fail@plt+0x4fec>
   17770:	ldr	r4, [r4, #160]	; 0xa0
   17774:	cmp	r4, #0
   17778:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1777c:	ldrb	r3, [r7, #32]
   17780:	cmp	r3, #0
   17784:	beq	177ec <__assert_fail@plt+0x5050>
   17788:	ldr	r0, [r4, #156]	; 0x9c
   1778c:	bl	1773c <__assert_fail@plt+0x4fa0>
   17790:	ldr	r3, [r4]
   17794:	cmp	r3, r5
   17798:	cmpne	r3, r6
   1779c:	bne	17770 <__assert_fail@plt+0x4fd4>
   177a0:	ldrb	r3, [r4, #40]	; 0x28
   177a4:	cmp	r3, #0
   177a8:	beq	17770 <__assert_fail@plt+0x4fd4>
   177ac:	ldr	r3, [r4, #116]	; 0x74
   177b0:	cmp	r3, #0
   177b4:	beq	17770 <__assert_fail@plt+0x4fd4>
   177b8:	add	r2, r4, #40	; 0x28
   177bc:	mov	r1, r9
   177c0:	ldr	r0, [r4, #144]	; 0x90
   177c4:	bl	1f934 <__assert_fail@plt+0xd198>
   177c8:	ldr	r0, [r4, #144]	; 0x90
   177cc:	ldr	r3, [r8]
   177d0:	cmp	r0, r3
   177d4:	beq	17770 <__assert_fail@plt+0x4fd4>
   177d8:	bl	2d910 <__assert_fail@plt+0x1b174>
   177dc:	ldr	r0, [r4, #144]	; 0x90
   177e0:	bl	12154 <free@plt>
   177e4:	str	sl, [r4, #144]	; 0x90
   177e8:	b	17770 <__assert_fail@plt+0x4fd4>
   177ec:	ldr	r3, [pc, #32]	; 17814 <__assert_fail@plt+0x5078>
   177f0:	mov	r2, #412	; 0x19c
   177f4:	ldr	r1, [pc, #28]	; 17818 <__assert_fail@plt+0x507c>
   177f8:	ldr	r0, [pc, #28]	; 1781c <__assert_fail@plt+0x5080>
   177fc:	bl	1279c <__assert_fail@plt>
   17800:	andeq	ip, r5, r0, lsr lr
   17804:			; <UNDEFINED> instruction: 0x00013bb0
   17808:	ldrdeq	r4, [r1], -ip
   1780c:	andeq	r7, r1, r0, lsr #16
   17810:	andeq	ip, r5, ip, asr r5
   17814:	andeq	r5, r4, r0, ror #12
   17818:	andeq	r5, r4, r8, asr #14
   1781c:	andeq	r5, r4, r0, asr r7
   17820:	add	r1, r0, #48	; 0x30
   17824:	push	{r4, lr}
   17828:	add	r0, r0, #4
   1782c:	bl	1f3d8 <__assert_fail@plt+0xcc3c>
   17830:	mov	r0, #0
   17834:	pop	{r4, pc}
   17838:	push	{r4, r5, r6, lr}
   1783c:	subs	r4, r0, #0
   17840:	popeq	{r4, r5, r6, pc}
   17844:	ldr	r5, [pc, #72]	; 17894 <__assert_fail@plt+0x50f8>
   17848:	ldr	r0, [r4, #156]	; 0x9c
   1784c:	bl	17838 <__assert_fail@plt+0x509c>
   17850:	ldr	r3, [r4]
   17854:	cmp	r3, r5
   17858:	beq	1786c <__assert_fail@plt+0x50d0>
   1785c:	ldr	r4, [r4, #160]	; 0xa0
   17860:	cmp	r4, #0
   17864:	bne	17848 <__assert_fail@plt+0x50ac>
   17868:	pop	{r4, r5, r6, pc}
   1786c:	ldrb	r3, [r4, #40]	; 0x28
   17870:	cmp	r3, #0
   17874:	beq	1785c <__assert_fail@plt+0x50c0>
   17878:	ldr	r3, [r4, #116]	; 0x74
   1787c:	cmp	r3, #0
   17880:	beq	1785c <__assert_fail@plt+0x50c0>
   17884:	add	r1, r4, #88	; 0x58
   17888:	add	r0, r4, #44	; 0x2c
   1788c:	bl	1f3d8 <__assert_fail@plt+0xcc3c>
   17890:	b	1785c <__assert_fail@plt+0x50c0>
   17894:	andeq	r3, r1, ip, lsr #23
   17898:	ldr	r3, [pc, #92]	; 178fc <__assert_fail@plt+0x5160>
   1789c:	push	{r4, r5, lr}
   178a0:	mov	r4, r0
   178a4:	ldr	r3, [r3, #44]	; 0x2c
   178a8:	sub	sp, sp, #12
   178ac:	tst	r3, #2
   178b0:	mov	r5, r1
   178b4:	bne	178e0 <__assert_fail@plt+0x5144>
   178b8:	ldr	r1, [pc, #64]	; 17900 <__assert_fail@plt+0x5164>
   178bc:	mov	r0, #256	; 0x100
   178c0:	mov	r3, r5
   178c4:	ldr	r1, [r1, #16]
   178c8:	mov	r2, r4
   178cc:	str	r0, [sp]
   178d0:	mov	r0, #3
   178d4:	bl	122b0 <__fxstatat64@plt>
   178d8:	add	sp, sp, #12
   178dc:	pop	{r4, r5, pc}
   178e0:	ldr	r1, [pc, #28]	; 17904 <__assert_fail@plt+0x5168>
   178e4:	mov	r3, r0
   178e8:	ldr	r2, [pc, #24]	; 17908 <__assert_fail@plt+0x516c>
   178ec:	ldr	r0, [r1]
   178f0:	mov	r1, #1
   178f4:	bl	12580 <__fprintf_chk@plt>
   178f8:	b	178b8 <__assert_fail@plt+0x511c>
   178fc:	andeq	ip, r5, ip, asr lr
   17900:	andeq	ip, r5, r0, lsr lr
   17904:	andeq	ip, r5, r8, lsr r5
   17908:	andeq	r5, r4, ip, ror #14
   1790c:	push	{r4, r5, r6, lr}
   17910:	mov	r4, r1
   17914:	mov	r1, r2
   17918:	mov	r5, r0
   1791c:	bl	161f8 <__assert_fail@plt+0x3a5c>
   17920:	ldr	ip, [r5, #4]
   17924:	mov	r2, #0
   17928:	mov	r1, #1
   1792c:	stm	r0, {r4, ip}
   17930:	str	r1, [r0, #8]
   17934:	str	r2, [r0, #40]	; 0x28
   17938:	str	r2, [r0, #12]
   1793c:	pop	{r4, r5, r6, pc}
   17940:	push	{r4, r5, r6, lr}
   17944:	ldr	r4, [r0, #12]
   17948:	cmp	r4, #0
   1794c:	beq	17978 <__assert_fail@plt+0x51dc>
   17950:	mov	r5, r0
   17954:	bl	161f8 <__assert_fail@plt+0x3a5c>
   17958:	ldr	ip, [r5, #4]
   1795c:	mov	r2, #0
   17960:	mov	r1, #1
   17964:	stm	r0, {r4, ip}
   17968:	str	r1, [r0, #8]
   1796c:	str	r2, [r0, #40]	; 0x28
   17970:	str	r2, [r0, #12]
   17974:	pop	{r4, r5, r6, pc}
   17978:	ldr	r3, [pc, #12]	; 1798c <__assert_fail@plt+0x51f0>
   1797c:	mov	r2, #123	; 0x7b
   17980:	ldr	r1, [pc, #8]	; 17990 <__assert_fail@plt+0x51f4>
   17984:	ldr	r0, [pc, #8]	; 17994 <__assert_fail@plt+0x51f8>
   17988:	bl	1279c <__assert_fail@plt>
   1798c:	andeq	r5, r4, r0, lsl #13
   17990:	andeq	r5, r4, r8, asr #14
   17994:	andeq	r5, r4, r8, lsr #15
   17998:	mov	r1, #0
   1799c:	b	17940 <__assert_fail@plt+0x51a4>
   179a0:	subs	r4, r0, #0
   179a4:	push	{r7, fp, lr}
   179a8:	sub	sp, sp, #12
   179ac:	beq	179e8 <__assert_fail@plt+0x524c>
   179b0:	ldr	r3, [pc, #420]	; 17b5c <__assert_fail@plt+0x53c0>
   179b4:	mov	r2, #5
   179b8:	ldr	r1, [pc, #416]	; 17b60 <__assert_fail@plt+0x53c4>
   179bc:	mov	r0, #0
   179c0:	ldr	r5, [r3]
   179c4:	bl	1222c <dcgettext@plt>
   179c8:	ldr	r3, [pc, #404]	; 17b64 <__assert_fail@plt+0x53c8>
   179cc:	mov	r1, #1
   179d0:	ldr	r3, [r3]
   179d4:	mov	r2, r0
   179d8:	mov	r0, r5
   179dc:	bl	12580 <__fprintf_chk@plt>
   179e0:	mov	r0, r4
   179e4:	bl	12478 <exit@plt>
   179e8:	ldr	r5, [pc, #376]	; 17b68 <__assert_fail@plt+0x53cc>
   179ec:	mov	r2, #5
   179f0:	ldr	r1, [pc, #372]	; 17b6c <__assert_fail@plt+0x53d0>
   179f4:	ldr	fp, [r5]
   179f8:	bl	1222c <dcgettext@plt>
   179fc:	ldr	r8, [pc, #352]	; 17b64 <__assert_fail@plt+0x53c8>
   17a00:	mov	r1, #1
   17a04:	ldr	r6, [pc, #356]	; 17b70 <__assert_fail@plt+0x53d4>
   17a08:	ldr	r3, [r8]
   17a0c:	ldr	sl, [pc, #352]	; 17b74 <__assert_fail@plt+0x53d8>
   17a10:	ldr	r7, [pc, #352]	; 17b78 <__assert_fail@plt+0x53dc>
   17a14:	ldr	r9, [pc, #352]	; 17b7c <__assert_fail@plt+0x53e0>
   17a18:	mov	r2, r0
   17a1c:	mov	r0, fp
   17a20:	bl	12580 <__fprintf_chk@plt>
   17a24:	mov	r2, #5
   17a28:	ldr	r1, [pc, #336]	; 17b80 <__assert_fail@plt+0x53e4>
   17a2c:	mov	r0, r4
   17a30:	bl	1222c <dcgettext@plt>
   17a34:	ldr	r1, [r5]
   17a38:	bl	12724 <fputs@plt>
   17a3c:	mov	r2, #5
   17a40:	ldr	r1, [pc, #316]	; 17b84 <__assert_fail@plt+0x53e8>
   17a44:	mov	r0, r4
   17a48:	bl	1222c <dcgettext@plt>
   17a4c:	ldr	r1, [r5]
   17a50:	bl	12724 <fputs@plt>
   17a54:	mov	r2, #5
   17a58:	ldr	r1, [pc, #296]	; 17b88 <__assert_fail@plt+0x53ec>
   17a5c:	mov	r0, r4
   17a60:	bl	1222c <dcgettext@plt>
   17a64:	ldr	r1, [r5]
   17a68:	bl	12724 <fputs@plt>
   17a6c:	mov	r2, #5
   17a70:	ldr	r1, [pc, #276]	; 17b8c <__assert_fail@plt+0x53f0>
   17a74:	mov	r0, r4
   17a78:	bl	1222c <dcgettext@plt>
   17a7c:	ldr	r1, [r5]
   17a80:	bl	12724 <fputs@plt>
   17a84:	mov	r2, #5
   17a88:	ldr	r1, [pc, #256]	; 17b90 <__assert_fail@plt+0x53f4>
   17a8c:	mov	r0, r4
   17a90:	bl	1222c <dcgettext@plt>
   17a94:	ldr	r1, [r5]
   17a98:	bl	12724 <fputs@plt>
   17a9c:	mov	r2, #5
   17aa0:	ldr	r1, [pc, #236]	; 17b94 <__assert_fail@plt+0x53f8>
   17aa4:	mov	r0, r4
   17aa8:	bl	1222c <dcgettext@plt>
   17aac:	ldr	r1, [r5]
   17ab0:	bl	12724 <fputs@plt>
   17ab4:	mov	r2, #5
   17ab8:	ldr	r1, [pc, #216]	; 17b98 <__assert_fail@plt+0x53fc>
   17abc:	mov	r0, r4
   17ac0:	bl	1222c <dcgettext@plt>
   17ac4:	ldr	r1, [r5]
   17ac8:	bl	12724 <fputs@plt>
   17acc:	mov	r2, #5
   17ad0:	ldr	r1, [pc, #196]	; 17b9c <__assert_fail@plt+0x5400>
   17ad4:	mov	r0, r4
   17ad8:	bl	1222c <dcgettext@plt>
   17adc:	ldr	r1, [r5]
   17ae0:	bl	12724 <fputs@plt>
   17ae4:	b	17b04 <__assert_fail@plt+0x5368>
   17ae8:	mov	r3, r9
   17aec:	mov	r2, r7
   17af0:	mov	r1, #1
   17af4:	bl	12580 <__fprintf_chk@plt>
   17af8:	cmp	r4, #9
   17afc:	beq	17b30 <__assert_fail@plt+0x5394>
   17b00:	add	r6, r6, #12
   17b04:	ldr	r3, [r6]
   17b08:	cmp	r4, #0
   17b0c:	ldr	r0, [r5]
   17b10:	add	r4, r4, #1
   17b14:	str	r3, [sp]
   17b18:	bne	17ae8 <__assert_fail@plt+0x534c>
   17b1c:	mov	r3, sl
   17b20:	mov	r2, r7
   17b24:	mov	r1, #1
   17b28:	bl	12580 <__fprintf_chk@plt>
   17b2c:	b	17b00 <__assert_fail@plt+0x5364>
   17b30:	mov	r2, #5
   17b34:	ldr	r1, [pc, #100]	; 17ba0 <__assert_fail@plt+0x5404>
   17b38:	mov	r0, #0
   17b3c:	bl	1222c <dcgettext@plt>
   17b40:	ldr	r1, [r5]
   17b44:	bl	12724 <fputs@plt>
   17b48:	ldr	r1, [r8]
   17b4c:	ldr	r0, [r5]
   17b50:	bl	21260 <__assert_fail@plt+0xeac4>
   17b54:	mov	r0, #0
   17b58:	bl	12478 <exit@plt>
   17b5c:	andeq	ip, r5, r8, lsr r5
   17b60:	andeq	r5, r4, r4, asr #15
   17b64:	strdeq	ip, [r5], -r4
   17b68:	andeq	ip, r5, r4, asr #10
   17b6c:	andeq	r5, r4, ip, ror #15
   17b70:	muleq	r4, r0, r6
   17b74:	andeq	r8, r4, r0, lsr r6
   17b78:	andeq	r5, r4, r4, ror #28
   17b7c:	ldrdeq	r5, [r4], -r8
   17b80:	andeq	r5, r4, r8, lsr r8
   17b84:	andeq	r5, r4, r4, asr #17
   17b88:	muleq	r4, r4, r9
   17b8c:	andeq	r5, r4, r0, lsr #21
   17b90:	andeq	r5, r4, ip, asr #23
   17b94:	andeq	r5, r4, r8, lsr #25
   17b98:	andeq	r5, r4, r0, asr #25
   17b9c:			; <UNDEFINED> instruction: 0x00045dbc
   17ba0:	ldrdeq	r5, [r4], -ip
   17ba4:	bx	lr
   17ba8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17bac:	ldr	r4, [pc, #224]	; 17c94 <__assert_fail@plt+0x54f8>
   17bb0:	ldrb	r3, [r4, #4]
   17bb4:	cmp	r3, #0
   17bb8:	bne	17c40 <__assert_fail@plt+0x54a4>
   17bbc:	ldr	r8, [pc, #212]	; 17c98 <__assert_fail@plt+0x54fc>
   17bc0:	mov	r7, r1
   17bc4:	mov	r6, r0
   17bc8:	mov	r1, r2
   17bcc:	mov	r0, r7
   17bd0:	ldr	r3, [r8, #52]	; 0x34
   17bd4:	mov	r5, r2
   17bd8:	blx	r3
   17bdc:	cmp	r0, #0
   17be0:	bne	17c58 <__assert_fail@plt+0x54bc>
   17be4:	ldr	r6, [r5, #16]
   17be8:	cmp	r6, #0
   17bec:	bne	17c44 <__assert_fail@plt+0x54a8>
   17bf0:	mov	r2, #5
   17bf4:	ldr	r1, [pc, #160]	; 17c9c <__assert_fail@plt+0x5500>
   17bf8:	bl	1222c <dcgettext@plt>
   17bfc:	mov	r2, r7
   17c00:	ldr	r1, [r8, #72]	; 0x48
   17c04:	mov	r9, r0
   17c08:	mov	r0, r6
   17c0c:	bl	2d52c <__assert_fail@plt+0x1ad90>
   17c10:	mov	r1, r6
   17c14:	mov	r2, r9
   17c18:	mov	r3, r0
   17c1c:	mov	r0, r6
   17c20:	bl	12388 <error@plt>
   17c24:	ldr	r3, [r4, #28]
   17c28:	cmp	r3, #0
   17c2c:	movle	r3, #1
   17c30:	ldrle	r6, [r5, #16]
   17c34:	ldrgt	r6, [r5, #16]
   17c38:	strle	r3, [r4, #28]
   17c3c:	b	17c44 <__assert_fail@plt+0x54a8>
   17c40:	ldr	r6, [r2, #16]
   17c44:	ldr	r3, [pc, #84]	; 17ca0 <__assert_fail@plt+0x5504>
   17c48:	str	r6, [r4, #8]
   17c4c:	strh	r3, [r4, #4]
   17c50:	mov	r0, #0
   17c54:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c58:	bl	124d8 <__errno_location@plt>
   17c5c:	ldrb	r3, [r8, #14]
   17c60:	cmp	r3, #0
   17c64:	ldr	r1, [r0]
   17c68:	beq	17c74 <__assert_fail@plt+0x54d8>
   17c6c:	cmp	r1, #2
   17c70:	beq	17c8c <__assert_fail@plt+0x54f0>
   17c74:	mov	r3, r6
   17c78:	mov	r2, #1
   17c7c:	mov	r0, #0
   17c80:	bl	1768c <__assert_fail@plt+0x4ef0>
   17c84:	mvn	r0, #0
   17c88:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c8c:	mvn	r0, #0
   17c90:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17c94:	andeq	ip, r5, r0, lsr lr
   17c98:	andeq	ip, r5, ip, asr lr
   17c9c:	andeq	r4, r4, r0, ror r2
   17ca0:	andeq	r0, r0, r1, lsl #2
   17ca4:	ldrb	r3, [r2, #18]
   17ca8:	push	{r4, r5, r6, lr}
   17cac:	cmp	r3, #0
   17cb0:	ldrne	r6, [pc, #220]	; 17d94 <__assert_fail@plt+0x55f8>
   17cb4:	bne	17cd4 <__assert_fail@plt+0x5538>
   17cb8:	ldrb	r3, [r2, #19]
   17cbc:	cmp	r3, #0
   17cc0:	beq	17d1c <__assert_fail@plt+0x5580>
   17cc4:	ldr	r6, [pc, #200]	; 17d94 <__assert_fail@plt+0x55f8>
   17cc8:	ldrb	r3, [r6, #5]
   17ccc:	cmp	r3, #0
   17cd0:	bne	17d1c <__assert_fail@plt+0x5580>
   17cd4:	mov	r5, r1
   17cd8:	mov	r4, r2
   17cdc:	mov	r2, r1
   17ce0:	ldr	r1, [r6, #12]
   17ce4:	bl	17ba8 <__assert_fail@plt+0x540c>
   17ce8:	cmp	r0, #0
   17cec:	bne	17d8c <__assert_fail@plt+0x55f0>
   17cf0:	ldrb	r3, [r4, #19]
   17cf4:	cmp	r3, #0
   17cf8:	bne	17d58 <__assert_fail@plt+0x55bc>
   17cfc:	ldrb	r3, [r4, #20]
   17d00:	cmp	r3, #0
   17d04:	beq	17d14 <__assert_fail@plt+0x5578>
   17d08:	ldrd	r2, [r5, #96]	; 0x60
   17d0c:	orrs	r3, r2, r3
   17d10:	beq	17d78 <__assert_fail@plt+0x55dc>
   17d14:	mov	r0, #0
   17d18:	pop	{r4, r5, r6, pc}
   17d1c:	ldrb	r3, [r2, #20]
   17d20:	cmp	r3, #0
   17d24:	beq	17d14 <__assert_fail@plt+0x5578>
   17d28:	ldrd	r4, [r1, #96]	; 0x60
   17d2c:	ldr	r6, [pc, #96]	; 17d94 <__assert_fail@plt+0x55f8>
   17d30:	orrs	r3, r4, r5
   17d34:	beq	17cd4 <__assert_fail@plt+0x5538>
   17d38:	ldrb	r3, [r6, #5]
   17d3c:	cmp	r3, #0
   17d40:	beq	17cd4 <__assert_fail@plt+0x5538>
   17d44:	ldr	r3, [r1, #16]
   17d48:	and	r3, r3, #61440	; 0xf000
   17d4c:	cmp	r3, #16384	; 0x4000
   17d50:	bne	17d14 <__assert_fail@plt+0x5578>
   17d54:	b	17cd4 <__assert_fail@plt+0x5538>
   17d58:	ldrb	r3, [r6, #5]
   17d5c:	cmp	r3, #0
   17d60:	bne	17cfc <__assert_fail@plt+0x5560>
   17d64:	ldr	r3, [pc, #44]	; 17d98 <__assert_fail@plt+0x55fc>
   17d68:	ldr	r2, [pc, #44]	; 17d9c <__assert_fail@plt+0x5600>
   17d6c:	ldr	r1, [pc, #44]	; 17da0 <__assert_fail@plt+0x5604>
   17d70:	ldr	r0, [pc, #44]	; 17da4 <__assert_fail@plt+0x5608>
   17d74:	bl	1279c <__assert_fail@plt>
   17d78:	ldr	r3, [pc, #24]	; 17d98 <__assert_fail@plt+0x55fc>
   17d7c:	ldr	r2, [pc, #36]	; 17da8 <__assert_fail@plt+0x560c>
   17d80:	ldr	r1, [pc, #24]	; 17da0 <__assert_fail@plt+0x5604>
   17d84:	ldr	r0, [pc, #32]	; 17dac <__assert_fail@plt+0x5610>
   17d88:	bl	1279c <__assert_fail@plt>
   17d8c:	mvn	r0, #0
   17d90:	pop	{r4, r5, r6, pc}
   17d94:	andeq	ip, r5, r0, lsr lr
   17d98:	strdeq	r5, [r4], -ip
   17d9c:	andeq	r0, r0, r6, asr #2
   17da0:	andeq	r5, r4, r8, asr #14
   17da4:	andeq	r4, r4, r0, asr #11
   17da8:	andeq	r0, r0, sl, asr #2
   17dac:	andeq	r5, r4, r0, lsr #28
   17db0:	push	{r4, lr}
   17db4:	vpush	{d8}
   17db8:	ldr	r4, [pc, #168]	; 17e68 <__assert_fail@plt+0x56cc>
   17dbc:	sub	sp, sp, #400	; 0x190
   17dc0:	ldr	r3, [r4]
   17dc4:	add	r0, sp, #4
   17dc8:	str	r3, [sp, #396]	; 0x18c
   17dcc:	bl	12214 <uname@plt>
   17dd0:	subs	r1, r0, #0
   17dd4:	bne	17e0c <__assert_fail@plt+0x5670>
   17dd8:	add	r0, sp, #134	; 0x86
   17ddc:	bl	1255c <strtod@plt>
   17de0:	add	r1, sp, #4
   17de4:	ldr	r0, [pc, #128]	; 17e6c <__assert_fail@plt+0x56d0>
   17de8:	vcvt.f32.f64	s16, d0
   17dec:	bl	120dc <strcmp@plt>
   17df0:	cmp	r0, #0
   17df4:	beq	17e2c <__assert_fail@plt+0x5690>
   17df8:	add	r1, sp, #4
   17dfc:	ldr	r0, [pc, #108]	; 17e70 <__assert_fail@plt+0x56d4>
   17e00:	bl	120dc <strcmp@plt>
   17e04:	cmp	r0, #0
   17e08:	beq	17e44 <__assert_fail@plt+0x56a8>
   17e0c:	mov	r0, #1
   17e10:	ldr	r2, [sp, #396]	; 0x18c
   17e14:	ldr	r3, [r4]
   17e18:	cmp	r2, r3
   17e1c:	bne	17e5c <__assert_fail@plt+0x56c0>
   17e20:	add	sp, sp, #400	; 0x190
   17e24:	vpop	{d8}
   17e28:	pop	{r4, pc}
   17e2c:	vldr	s15, [pc, #44]	; 17e60 <__assert_fail@plt+0x56c4>
   17e30:	vcmpe.f32	s16, s15
   17e34:	vmrs	APSR_nzcv, fpscr
   17e38:	movge	r0, #1
   17e3c:	movlt	r0, #0
   17e40:	b	17e10 <__assert_fail@plt+0x5674>
   17e44:	vldr	s15, [pc, #24]	; 17e64 <__assert_fail@plt+0x56c8>
   17e48:	vcmpe.f32	s16, s15
   17e4c:	vmrs	APSR_nzcv, fpscr
   17e50:	movge	r0, #1
   17e54:	movlt	r0, #0
   17e58:	b	17e10 <__assert_fail@plt+0x5674>
   17e5c:	bl	12244 <__stack_chk_fail@plt>
   17e60:	andmi	ip, ip, sp, asr #25
   17e64:	submi	r6, r6, r6, ror #12
   17e68:	andeq	fp, r5, r0, ror #24
   17e6c:	andeq	r5, r4, ip, lsr #28
   17e70:	andeq	r5, r4, r4, lsr lr
   17e74:	push	{r4, lr}
   17e78:	ldr	r4, [pc, #28]	; 17e9c <__assert_fail@plt+0x5700>
   17e7c:	ldrb	r3, [r4, #32]
   17e80:	cmp	r3, #0
   17e84:	popeq	{r4, pc}
   17e88:	bl	15e48 <__assert_fail@plt+0x36ac>
   17e8c:	bl	1773c <__assert_fail@plt+0x4fa0>
   17e90:	mov	r3, #0
   17e94:	strb	r3, [r4, #32]
   17e98:	pop	{r4, pc}
   17e9c:	andeq	ip, r5, r0, lsr lr
   17ea0:	push	{r4, r5, lr}
   17ea4:	mov	r0, #8
   17ea8:	sub	sp, sp, #12
   17eac:	bl	2df04 <__assert_fail@plt+0x1b768>
   17eb0:	ldr	r4, [pc, #108]	; 17f24 <__assert_fail@plt+0x5788>
   17eb4:	str	r0, [r4]
   17eb8:	bl	2d8a0 <__assert_fail@plt+0x1b104>
   17ebc:	cmp	r0, #0
   17ec0:	bne	17ecc <__assert_fail@plt+0x5730>
   17ec4:	add	sp, sp, #12
   17ec8:	pop	{r4, r5, pc}
   17ecc:	bl	124d8 <__errno_location@plt>
   17ed0:	mov	r2, #5
   17ed4:	ldr	r1, [pc, #76]	; 17f28 <__assert_fail@plt+0x578c>
   17ed8:	ldr	r5, [r0]
   17edc:	mov	r0, #0
   17ee0:	bl	1222c <dcgettext@plt>
   17ee4:	ldr	r3, [r4]
   17ee8:	ldr	r1, [r3]
   17eec:	cmp	r1, #0
   17ef0:	mov	r2, r0
   17ef4:	blt	17f10 <__assert_fail@plt+0x5774>
   17ef8:	ldr	r3, [pc, #44]	; 17f2c <__assert_fail@plt+0x5790>
   17efc:	mov	r1, r3
   17f00:	str	r1, [sp]
   17f04:	mov	r0, #1
   17f08:	mov	r1, r5
   17f0c:	bl	12388 <error@plt>
   17f10:	ldr	r1, [r3, #4]
   17f14:	cmp	r1, #0
   17f18:	ldrne	r3, [pc, #16]	; 17f30 <__assert_fail@plt+0x5794>
   17f1c:	bne	17f00 <__assert_fail@plt+0x5764>
   17f20:	b	17ef8 <__assert_fail@plt+0x575c>
   17f24:	andeq	ip, r5, ip, asr r5
   17f28:	andeq	r5, r4, ip, lsr lr
   17f2c:	andeq	r8, r4, r0, lsr r6
   17f30:	andeq	r6, r4, r0, lsr lr
   17f34:	push	{r4, lr}
   17f38:	ldr	r0, [pc, #12]	; 17f4c <__assert_fail@plt+0x57b0>
   17f3c:	bl	123c4 <getenv@plt>
   17f40:	adds	r0, r0, #0
   17f44:	movne	r0, #1
   17f48:	pop	{r4, pc}
   17f4c:	andeq	r5, r4, ip, ror #28
   17f50:	push	{r4, r5, lr}
   17f54:	sub	sp, sp, #12
   17f58:	bl	15e48 <__assert_fail@plt+0x36ac>
   17f5c:	subs	r5, r0, #0
   17f60:	beq	17fec <__assert_fail@plt+0x5850>
   17f64:	ldr	r4, [pc, #292]	; 18090 <__assert_fail@plt+0x58f4>
   17f68:	ldr	r1, [pc, #292]	; 18094 <__assert_fail@plt+0x58f8>
   17f6c:	bl	17600 <__assert_fail@plt+0x4e64>
   17f70:	ldrb	r3, [r4, #32]
   17f74:	cmp	r3, #0
   17f78:	bne	1801c <__assert_fail@plt+0x5880>
   17f7c:	ldr	r0, [r4, #36]	; 0x24
   17f80:	bl	18de4 <__assert_fail@plt+0x6648>
   17f84:	mov	r0, r5
   17f88:	ldr	r1, [pc, #264]	; 18098 <__assert_fail@plt+0x58fc>
   17f8c:	bl	17600 <__assert_fail@plt+0x4e64>
   17f90:	ldr	r4, [pc, #260]	; 1809c <__assert_fail@plt+0x5900>
   17f94:	ldr	r0, [r4]
   17f98:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   17f9c:	subs	r5, r0, #0
   17fa0:	bne	18030 <__assert_fail@plt+0x5894>
   17fa4:	ldr	r0, [r4]
   17fa8:	bl	2d910 <__assert_fail@plt+0x1b174>
   17fac:	ldr	r0, [r4]
   17fb0:	bl	12154 <free@plt>
   17fb4:	ldr	r0, [pc, #228]	; 180a0 <__assert_fail@plt+0x5904>
   17fb8:	str	r5, [r4]
   17fbc:	bl	123c4 <getenv@plt>
   17fc0:	cmp	r0, #0
   17fc4:	beq	17fd0 <__assert_fail@plt+0x5834>
   17fc8:	bl	20140 <__assert_fail@plt+0xd9a4>
   17fcc:	bl	2011c <__assert_fail@plt+0xd980>
   17fd0:	ldr	r3, [pc, #204]	; 180a4 <__assert_fail@plt+0x5908>
   17fd4:	ldr	r0, [r3]
   17fd8:	bl	2f858 <__assert_fail@plt+0x1d0bc>
   17fdc:	cmn	r0, #1
   17fe0:	beq	17ffc <__assert_fail@plt+0x5860>
   17fe4:	add	sp, sp, #12
   17fe8:	pop	{r4, r5, pc}
   17fec:	ldr	r3, [pc, #156]	; 18090 <__assert_fail@plt+0x58f4>
   17ff0:	ldr	r0, [r3, #36]	; 0x24
   17ff4:	bl	18de4 <__assert_fail@plt+0x6648>
   17ff8:	b	17f90 <__assert_fail@plt+0x57f4>
   17ffc:	bl	124d8 <__errno_location@plt>
   18000:	mov	r2, #0
   18004:	ldr	r3, [pc, #156]	; 180a8 <__assert_fail@plt+0x590c>
   18008:	ldr	r1, [r0]
   1800c:	mov	r0, r2
   18010:	add	sp, sp, #12
   18014:	pop	{r4, r5, lr}
   18018:	b	1768c <__assert_fail@plt+0x4ef0>
   1801c:	bl	15e48 <__assert_fail@plt+0x36ac>
   18020:	bl	1773c <__assert_fail@plt+0x4fa0>
   18024:	mov	r3, #0
   18028:	strb	r3, [r4, #32]
   1802c:	b	17f7c <__assert_fail@plt+0x57e0>
   18030:	bl	124d8 <__errno_location@plt>
   18034:	mov	r2, #5
   18038:	ldr	r1, [pc, #108]	; 180ac <__assert_fail@plt+0x5910>
   1803c:	ldr	r5, [r0]
   18040:	mov	r0, #0
   18044:	bl	1222c <dcgettext@plt>
   18048:	ldr	r3, [r4]
   1804c:	ldr	r1, [r3]
   18050:	cmp	r1, #0
   18054:	mov	r2, r0
   18058:	blt	1807c <__assert_fail@plt+0x58e0>
   1805c:	ldr	r3, [pc, #76]	; 180b0 <__assert_fail@plt+0x5914>
   18060:	mov	r1, r3
   18064:	str	r1, [sp]
   18068:	mov	r0, #0
   1806c:	mov	r1, r5
   18070:	bl	12388 <error@plt>
   18074:	mov	r0, #1
   18078:	bl	1219c <_exit@plt>
   1807c:	ldr	r1, [r3, #4]
   18080:	cmp	r1, #0
   18084:	ldrne	r3, [pc, #40]	; 180b4 <__assert_fail@plt+0x5918>
   18088:	bne	18064 <__assert_fail@plt+0x58c8>
   1808c:	b	1805c <__assert_fail@plt+0x58c0>
   18090:	andeq	ip, r5, r0, lsr lr
   18094:	andeq	r7, r1, r8, lsr r8
   18098:	andeq	r7, r1, r8, lsr r6
   1809c:	andeq	ip, r5, ip, asr r5
   180a0:	andeq	r5, r4, ip, ror #28
   180a4:	andeq	ip, r5, r4, asr #10
   180a8:			; <UNDEFINED> instruction: 0x00045eb8
   180ac:	andeq	r5, r4, r8, lsl #29
   180b0:	andeq	r8, r4, r0, lsr r6
   180b4:	andeq	r6, r4, r0, lsr lr
   180b8:	ldr	r3, [pc, #184]	; 18178 <__assert_fail@plt+0x59dc>
   180bc:	push	{r4, r5, r6, lr}
   180c0:	mov	r5, r1
   180c4:	ldr	r1, [r3, #16]
   180c8:	sub	sp, sp, #8
   180cc:	cmn	r1, #100	; 0x64
   180d0:	cmpne	r1, #0
   180d4:	blt	18164 <__assert_fail@plt+0x59c8>
   180d8:	ldr	r3, [r3]
   180dc:	mov	r4, r0
   180e0:	cmp	r3, #0
   180e4:	bne	1813c <__assert_fail@plt+0x59a0>
   180e8:	str	r3, [sp]
   180ec:	mov	r2, r0
   180f0:	mov	r3, r5
   180f4:	mov	r0, #3
   180f8:	bl	122b0 <__fxstatat64@plt>
   180fc:	subs	r6, r0, #0
   18100:	bne	18110 <__assert_fail@plt+0x5974>
   18104:	mov	r0, r6
   18108:	add	sp, sp, #8
   1810c:	pop	{r4, r5, r6, pc}
   18110:	bl	124d8 <__errno_location@plt>
   18114:	ldr	r3, [r0]
   18118:	cmp	r3, #2
   1811c:	beq	18128 <__assert_fail@plt+0x598c>
   18120:	cmp	r3, #20
   18124:	bne	18104 <__assert_fail@plt+0x5968>
   18128:	mov	r1, r5
   1812c:	mov	r0, r4
   18130:	add	sp, sp, #8
   18134:	pop	{r4, r5, r6, lr}
   18138:	b	17898 <__assert_fail@plt+0x50fc>
   1813c:	mov	r0, #256	; 0x100
   18140:	str	r0, [sp]
   18144:	mov	r3, r5
   18148:	mov	r2, r4
   1814c:	mov	r0, #3
   18150:	bl	122b0 <__fxstatat64@plt>
   18154:	mov	r6, r0
   18158:	mov	r0, r6
   1815c:	add	sp, sp, #8
   18160:	pop	{r4, r5, r6, pc}
   18164:	ldr	r3, [pc, #16]	; 1817c <__assert_fail@plt+0x59e0>
   18168:	ldr	r2, [pc, #16]	; 18180 <__assert_fail@plt+0x59e4>
   1816c:	ldr	r1, [pc, #16]	; 18184 <__assert_fail@plt+0x59e8>
   18170:	ldr	r0, [pc, #16]	; 18188 <__assert_fail@plt+0x59ec>
   18174:	bl	1279c <__assert_fail@plt>
   18178:	andeq	ip, r5, r0, lsr lr
   1817c:	andeq	r5, r4, r8, lsl #14
   18180:	andeq	r0, r0, r9, ror r2
   18184:	andeq	r5, r4, r8, asr #14
   18188:	andeq	r5, r4, r8, asr #29
   1818c:	ldr	r3, [pc, #136]	; 1821c <__assert_fail@plt+0x5a80>
   18190:	push	{r4, r5, r6, lr}
   18194:	mov	r5, r1
   18198:	ldr	r1, [r3, #16]
   1819c:	sub	sp, sp, #8
   181a0:	cmn	r1, #100	; 0x64
   181a4:	cmpne	r1, #0
   181a8:	blt	18208 <__assert_fail@plt+0x5a6c>
   181ac:	mov	r3, #0
   181b0:	str	r3, [sp]
   181b4:	mov	r2, r0
   181b8:	mov	r4, r0
   181bc:	mov	r3, r5
   181c0:	mov	r0, #3
   181c4:	bl	122b0 <__fxstatat64@plt>
   181c8:	subs	r6, r0, #0
   181cc:	bne	181dc <__assert_fail@plt+0x5a40>
   181d0:	mov	r0, r6
   181d4:	add	sp, sp, #8
   181d8:	pop	{r4, r5, r6, pc}
   181dc:	bl	124d8 <__errno_location@plt>
   181e0:	ldr	r3, [r0]
   181e4:	cmp	r3, #2
   181e8:	beq	181f4 <__assert_fail@plt+0x5a58>
   181ec:	cmp	r3, #20
   181f0:	bne	181d0 <__assert_fail@plt+0x5a34>
   181f4:	mov	r1, r5
   181f8:	mov	r0, r4
   181fc:	add	sp, sp, #8
   18200:	pop	{r4, r5, r6, lr}
   18204:	b	17898 <__assert_fail@plt+0x50fc>
   18208:	ldr	r3, [pc, #16]	; 18220 <__assert_fail@plt+0x5a84>
   1820c:	mov	r2, #664	; 0x298
   18210:	ldr	r1, [pc, #12]	; 18224 <__assert_fail@plt+0x5a88>
   18214:	ldr	r0, [pc, #12]	; 18228 <__assert_fail@plt+0x5a8c>
   18218:	bl	1279c <__assert_fail@plt>
   1821c:	andeq	ip, r5, r0, lsr lr
   18220:	andeq	r5, r4, r8, lsl r7
   18224:	andeq	r5, r4, r8, asr #14
   18228:	andeq	r5, r4, r8, asr #29
   1822c:	ldr	ip, [pc, #76]	; 18280 <__assert_fail@plt+0x5ae4>
   18230:	push	{lr}		; (str lr, [sp, #-4]!)
   18234:	sub	sp, sp, #12
   18238:	ldr	ip, [ip, #16]
   1823c:	cmn	ip, #100	; 0x64
   18240:	cmpne	ip, #0
   18244:	blt	1826c <__assert_fail@plt+0x5ad0>
   18248:	mov	lr, #256	; 0x100
   1824c:	mov	r3, r1
   18250:	mov	r2, r0
   18254:	mov	r1, ip
   18258:	str	lr, [sp]
   1825c:	mov	r0, #3
   18260:	bl	122b0 <__fxstatat64@plt>
   18264:	add	sp, sp, #12
   18268:	pop	{pc}		; (ldr pc, [sp], #4)
   1826c:	ldr	r3, [pc, #16]	; 18284 <__assert_fail@plt+0x5ae8>
   18270:	ldr	r2, [pc, #16]	; 18288 <__assert_fail@plt+0x5aec>
   18274:	ldr	r1, [pc, #16]	; 1828c <__assert_fail@plt+0x5af0>
   18278:	ldr	r0, [pc, #16]	; 18290 <__assert_fail@plt+0x5af4>
   1827c:	bl	1279c <__assert_fail@plt>
   18280:	andeq	ip, r5, r0, lsr lr
   18284:	andeq	r5, r4, r8, lsr #14
   18288:	andeq	r0, r0, r9, lsr #5
   1828c:	andeq	r5, r4, r8, asr #14
   18290:	andeq	r5, r4, r0, ror #29
   18294:	ldr	ip, [pc, #156]	; 18338 <__assert_fail@plt+0x5b9c>
   18298:	push	{r4, r5, r6, lr}
   1829c:	mov	r4, r0
   182a0:	ldr	r3, [ip]
   182a4:	ldr	r0, [ip, #4]
   182a8:	ldr	lr, [pc, #140]	; 1833c <__assert_fail@plt+0x5ba0>
   182ac:	adds	r2, r3, #1
   182b0:	mov	r5, r1
   182b4:	adc	r1, r0, #0
   182b8:	mov	r3, r4
   182bc:	str	r2, [ip]
   182c0:	str	r1, [ip, #4]
   182c4:	ldr	r0, [lr]
   182c8:	ldr	r2, [pc, #112]	; 18340 <__assert_fail@plt+0x5ba4>
   182cc:	mov	r1, #1
   182d0:	bl	12580 <__fprintf_chk@plt>
   182d4:	ldr	r3, [pc, #104]	; 18344 <__assert_fail@plt+0x5ba8>
   182d8:	ldr	r3, [r3, #48]	; 0x30
   182dc:	cmp	r3, #1
   182e0:	beq	18304 <__assert_fail@plt+0x5b68>
   182e4:	cmp	r3, #0
   182e8:	beq	18314 <__assert_fail@plt+0x5b78>
   182ec:	cmp	r3, #2
   182f0:	bne	18324 <__assert_fail@plt+0x5b88>
   182f4:	mov	r1, r5
   182f8:	mov	r0, r4
   182fc:	pop	{r4, r5, r6, lr}
   18300:	b	180b8 <__assert_fail@plt+0x591c>
   18304:	mov	r1, r5
   18308:	mov	r0, r4
   1830c:	pop	{r4, r5, r6, lr}
   18310:	b	1818c <__assert_fail@plt+0x59f0>
   18314:	mov	r1, r5
   18318:	mov	r0, r4
   1831c:	pop	{r4, r5, r6, lr}
   18320:	b	1822c <__assert_fail@plt+0x5a90>
   18324:	ldr	r3, [pc, #28]	; 18348 <__assert_fail@plt+0x5bac>
   18328:	ldr	r2, [pc, #28]	; 1834c <__assert_fail@plt+0x5bb0>
   1832c:	ldr	r1, [pc, #28]	; 18350 <__assert_fail@plt+0x5bb4>
   18330:	ldr	r0, [pc, #28]	; 18354 <__assert_fail@plt+0x5bb8>
   18334:	bl	1279c <__assert_fail@plt>
   18338:	andeq	ip, r5, r0, lsl #11
   1833c:	andeq	ip, r5, r8, lsr r5
   18340:	andeq	r5, r4, r8, lsl pc
   18344:	andeq	ip, r5, ip, asr lr
   18348:	andeq	r5, r4, r8, lsr r7
   1834c:	andeq	r0, r0, r1, asr #5
   18350:	andeq	r5, r4, r8, asr #14
   18354:	andeq	r4, r4, ip, lsr #11
   18358:	ldr	r3, [pc, #36]	; 18384 <__assert_fail@plt+0x5be8>
   1835c:	ldr	r0, [r3, #48]	; 0x30
   18360:	cmp	r0, #1
   18364:	bxeq	lr
   18368:	cmp	r0, #2
   1836c:	ldreq	r3, [pc, #20]	; 18388 <__assert_fail@plt+0x5bec>
   18370:	ldreq	r0, [r3]
   18374:	clzeq	r0, r0
   18378:	lsreq	r0, r0, #5
   1837c:	movne	r0, #0
   18380:	bx	lr
   18384:	andeq	ip, r5, ip, asr lr
   18388:	andeq	ip, r5, r0, lsr lr
   1838c:	push	{r4, r5, r6, lr}
   18390:	mov	r4, r0
   18394:	mov	r5, r3
   18398:	ldr	lr, [r4]
   1839c:	mov	r0, r1
   183a0:	cmp	lr, #0
   183a4:	ldrb	ip, [sp, #16]
   183a8:	beq	183d0 <__assert_fail@plt+0x5c34>
   183ac:	and	r3, lr, #61440	; 0xf000
   183b0:	cmp	r3, #40960	; 0xa000
   183b4:	beq	183ec <__assert_fail@plt+0x5c50>
   183b8:	ldr	r3, [pc, #196]	; 18484 <__assert_fail@plt+0x5ce8>
   183bc:	mov	r0, #1
   183c0:	str	lr, [r3, #8]
   183c4:	str	lr, [r5, #16]
   183c8:	strb	r0, [r3, #5]
   183cc:	pop	{r4, r5, r6, pc}
   183d0:	cmp	ip, #0
   183d4:	beq	18448 <__assert_fail@plt+0x5cac>
   183d8:	ldr	r3, [pc, #164]	; 18484 <__assert_fail@plt+0x5ce8>
   183dc:	mov	r0, ip
   183e0:	strh	lr, [r3, #4]
   183e4:	str	lr, [r3, #8]
   183e8:	pop	{r4, r5, r6, pc}
   183ec:	ldr	r3, [pc, #148]	; 18488 <__assert_fail@plt+0x5cec>
   183f0:	ldr	r3, [r3, #48]	; 0x30
   183f4:	cmp	r3, #1
   183f8:	beq	18414 <__assert_fail@plt+0x5c78>
   183fc:	cmp	r3, #2
   18400:	ldr	r3, [pc, #124]	; 18484 <__assert_fail@plt+0x5ce8>
   18404:	bne	183bc <__assert_fail@plt+0x5c20>
   18408:	ldr	r1, [r3]
   1840c:	cmp	r1, #0
   18410:	bne	183bc <__assert_fail@plt+0x5c20>
   18414:	mov	r1, r2
   18418:	mov	r2, r5
   1841c:	bl	17ba8 <__assert_fail@plt+0x540c>
   18420:	cmp	r0, #0
   18424:	bne	1847c <__assert_fail@plt+0x5ce0>
   18428:	ldr	r3, [pc, #84]	; 18484 <__assert_fail@plt+0x5ce8>
   1842c:	ldr	r1, [r5, #16]
   18430:	mov	r2, #1
   18434:	str	r1, [r3, #8]
   18438:	mov	r0, r2
   1843c:	str	r1, [r4]
   18440:	strb	r2, [r3, #5]
   18444:	pop	{r4, r5, r6, pc}
   18448:	mov	r1, r2
   1844c:	mov	r2, r3
   18450:	bl	17ba8 <__assert_fail@plt+0x540c>
   18454:	cmp	r0, #0
   18458:	bne	1847c <__assert_fail@plt+0x5ce0>
   1845c:	ldr	r3, [pc, #32]	; 18484 <__assert_fail@plt+0x5ce8>
   18460:	ldr	r1, [r5, #16]
   18464:	mov	r2, #1
   18468:	str	r1, [r4]
   1846c:	mov	r0, r2
   18470:	str	r1, [r3, #8]
   18474:	strb	r2, [r3, #5]
   18478:	pop	{r4, r5, r6, pc}
   1847c:	mov	r0, #0
   18480:	pop	{r4, r5, r6, pc}
   18484:	andeq	ip, r5, r0, lsr lr
   18488:	andeq	ip, r5, ip, asr lr
   1848c:	subs	r3, r0, #0
   18490:	beq	184bc <__assert_fail@plt+0x5d20>
   18494:	ldrb	r0, [r3, #17]
   18498:	cmp	r0, #0
   1849c:	beq	184b0 <__assert_fail@plt+0x5d14>
   184a0:	b	184c4 <__assert_fail@plt+0x5d28>
   184a4:	ldrb	r2, [r3, #17]
   184a8:	cmp	r2, #0
   184ac:	bxne	lr
   184b0:	ldr	r3, [r3, #152]	; 0x98
   184b4:	cmp	r3, #0
   184b8:	bne	184a4 <__assert_fail@plt+0x5d08>
   184bc:	mov	r0, #1
   184c0:	bx	lr
   184c4:	mov	r0, #0
   184c8:	bx	lr
   184cc:	ldrb	r3, [r0]
   184d0:	sub	r3, r3, #33	; 0x21
   184d4:	cmp	r3, #12
   184d8:	ldrls	pc, [pc, r3, lsl #2]
   184dc:	b	18530 <__assert_fail@plt+0x5d94>
   184e0:	andeq	r8, r1, r8, lsr r5
   184e4:	andeq	r8, r1, r0, lsr r5
   184e8:	andeq	r8, r1, r0, lsr r5
   184ec:	andeq	r8, r1, r0, lsr r5
   184f0:	andeq	r8, r1, r0, lsr r5
   184f4:	andeq	r8, r1, r0, lsr r5
   184f8:	andeq	r8, r1, r0, lsr r5
   184fc:	andeq	r8, r1, r8, lsr r5
   18500:	andeq	r8, r1, r4, lsr #10
   18504:	andeq	r8, r1, r0, lsr r5
   18508:	andeq	r8, r1, r0, lsr r5
   1850c:	andeq	r8, r1, r4, lsr #10
   18510:	andeq	r8, r1, r4, lsl r5
   18514:	ldrb	r0, [r0, #1]
   18518:	adds	r0, r0, #0
   1851c:	movne	r0, #1
   18520:	bx	lr
   18524:	ldrb	r3, [r0, #1]
   18528:	cmp	r3, #0
   1852c:	beq	18548 <__assert_fail@plt+0x5dac>
   18530:	mov	r0, #0
   18534:	bx	lr
   18538:	ldrb	r0, [r0, #1]
   1853c:	clz	r0, r0
   18540:	lsr	r0, r0, #5
   18544:	bx	lr
   18548:	eor	r0, r1, #1
   1854c:	bx	lr
   18550:	ldr	r3, [pc, #1036]	; 18964 <__assert_fail@plt+0x61c8>
   18554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18558:	sub	sp, sp, #44	; 0x2c
   1855c:	ldr	r3, [r3]
   18560:	cmp	r0, #1
   18564:	str	r0, [sp, #16]
   18568:	str	r1, [sp, #12]
   1856c:	str	r3, [sp, #36]	; 0x24
   18570:	ble	188b0 <__assert_fail@plt+0x6114>
   18574:	ldr	r9, [pc, #1004]	; 18968 <__assert_fail@plt+0x61cc>
   18578:	mov	r4, #1
   1857c:	ldr	r3, [sp, #12]
   18580:	ldr	r0, [pc, #996]	; 1896c <__assert_fail@plt+0x61d0>
   18584:	lsl	r6, r4, #2
   18588:	ldr	r5, [r3, r4, lsl #2]
   1858c:	mov	r1, r5
   18590:	bl	120dc <strcmp@plt>
   18594:	cmp	r0, #0
   18598:	beq	18720 <__assert_fail@plt+0x5f84>
   1859c:	mov	r1, r5
   185a0:	ldr	r0, [pc, #968]	; 18970 <__assert_fail@plt+0x61d4>
   185a4:	bl	120dc <strcmp@plt>
   185a8:	cmp	r0, #0
   185ac:	beq	1872c <__assert_fail@plt+0x5f90>
   185b0:	mov	r1, r5
   185b4:	ldr	r0, [pc, #952]	; 18974 <__assert_fail@plt+0x61d8>
   185b8:	bl	120dc <strcmp@plt>
   185bc:	cmp	r0, #0
   185c0:	beq	18738 <__assert_fail@plt+0x5f9c>
   185c4:	mov	r1, r5
   185c8:	ldr	r0, [pc, #936]	; 18978 <__assert_fail@plt+0x61dc>
   185cc:	bl	120dc <strcmp@plt>
   185d0:	cmp	r0, #0
   185d4:	beq	188a8 <__assert_fail@plt+0x610c>
   185d8:	mov	r1, r5
   185dc:	ldr	r0, [pc, #920]	; 1897c <__assert_fail@plt+0x61e0>
   185e0:	bl	120dc <strcmp@plt>
   185e4:	subs	r7, r0, #0
   185e8:	bne	18740 <__assert_fail@plt+0x5fa4>
   185ec:	ldr	r3, [sp, #16]
   185f0:	add	r4, r4, #1
   185f4:	cmp	r4, r3
   185f8:	bge	18930 <__assert_fail@plt+0x6194>
   185fc:	ldr	r3, [sp, #12]
   18600:	add	r2, sp, #28
   18604:	add	r6, r3, r6
   18608:	add	r1, sp, #32
   1860c:	ldr	fp, [r6, #4]
   18610:	mov	r3, #44	; 0x2c
   18614:	mov	r0, fp
   18618:	str	r7, [sp, #28]
   1861c:	strh	r3, [sp, #32]
   18620:	bl	1237c <strtok_r@plt>
   18624:	subs	r5, r0, #0
   18628:	beq	18884 <__assert_fail@plt+0x60e8>
   1862c:	ldr	r8, [pc, #844]	; 18980 <__assert_fail@plt+0x61e4>
   18630:	ldr	r7, [pc, #844]	; 18984 <__assert_fail@plt+0x61e8>
   18634:	str	r4, [sp, #20]
   18638:	ldr	r6, [pc, #832]	; 18980 <__assert_fail@plt+0x61e4>
   1863c:	mov	r4, r8
   18640:	mov	r0, r9
   18644:	mov	sl, #0
   18648:	b	18650 <__assert_fail@plt+0x5eb4>
   1864c:	ldr	r0, [r4, #-12]
   18650:	mov	r1, r5
   18654:	bl	120dc <strcmp@plt>
   18658:	cmp	r0, #0
   1865c:	beq	18700 <__assert_fail@plt+0x5f64>
   18660:	add	sl, sl, #1
   18664:	cmp	sl, #9
   18668:	add	r4, r4, #12
   1866c:	bne	1864c <__assert_fail@plt+0x5eb0>
   18670:	mov	r2, #5
   18674:	ldr	r1, [pc, #780]	; 18988 <__assert_fail@plt+0x61ec>
   18678:	mov	r0, #0
   1867c:	bl	1222c <dcgettext@plt>
   18680:	mov	r2, fp
   18684:	ldr	r1, [r7, #72]	; 0x48
   18688:	mov	r5, r0
   1868c:	mov	r0, #0
   18690:	bl	2d52c <__assert_fail@plt+0x1ad90>
   18694:	mov	r1, #0
   18698:	mov	r2, r5
   1869c:	mov	r3, r0
   186a0:	mov	r0, r1
   186a4:	bl	12388 <error@plt>
   186a8:	add	r2, sp, #28
   186ac:	add	r1, sp, #32
   186b0:	mov	r0, #0
   186b4:	bl	1237c <strtok_r@plt>
   186b8:	subs	r5, r0, #0
   186bc:	bne	18638 <__assert_fail@plt+0x5e9c>
   186c0:	ldr	r3, [r7, #44]	; 0x2c
   186c4:	ldr	r4, [sp, #20]
   186c8:	tst	r3, #16
   186cc:	bne	18828 <__assert_fail@plt+0x608c>
   186d0:	ldr	r3, [sp, #16]
   186d4:	add	r4, r4, #1
   186d8:	cmp	r3, r4
   186dc:	bgt	1857c <__assert_fail@plt+0x5de0>
   186e0:	ldr	r3, [pc, #636]	; 18964 <__assert_fail@plt+0x61c8>
   186e4:	ldr	r2, [sp, #36]	; 0x24
   186e8:	mov	r0, r4
   186ec:	ldr	r3, [r3]
   186f0:	cmp	r2, r3
   186f4:	bne	18960 <__assert_fail@plt+0x61c4>
   186f8:	add	sp, sp, #44	; 0x2c
   186fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18700:	ldr	r2, [pc, #644]	; 1898c <__assert_fail@plt+0x61f0>
   18704:	add	sl, sl, sl, lsl #1
   18708:	ldr	r3, [r7, #44]	; 0x2c
   1870c:	add	sl, r2, sl, lsl #2
   18710:	ldr	r2, [sl, #52]	; 0x34
   18714:	orr	r3, r3, r2
   18718:	str	r3, [r7, #44]	; 0x2c
   1871c:	b	186a8 <__assert_fail@plt+0x5f0c>
   18720:	mov	r0, #2
   18724:	bl	1eb44 <__assert_fail@plt+0xc3a8>
   18728:	b	186d0 <__assert_fail@plt+0x5f34>
   1872c:	mov	r0, #1
   18730:	bl	1eb44 <__assert_fail@plt+0xc3a8>
   18734:	b	186d0 <__assert_fail@plt+0x5f34>
   18738:	bl	1eb44 <__assert_fail@plt+0xc3a8>
   1873c:	b	186d0 <__assert_fail@plt+0x5f34>
   18740:	mov	r2, #2
   18744:	mov	r1, r5
   18748:	ldr	r0, [pc, #576]	; 18990 <__assert_fail@plt+0x61f4>
   1874c:	bl	12730 <strncmp@plt>
   18750:	subs	r7, r0, #0
   18754:	bne	186e0 <__assert_fail@plt+0x5f44>
   18758:	ldrb	r6, [r5, #2]
   1875c:	add	r5, r5, #2
   18760:	cmp	r6, #0
   18764:	beq	18954 <__assert_fail@plt+0x61b8>
   18768:	bl	12460 <__ctype_b_loc@plt>
   1876c:	lsl	r6, r6, #1
   18770:	ldr	r3, [r0]
   18774:	ldrh	r3, [r3, r6]
   18778:	ands	r3, r3, #2048	; 0x800
   1877c:	beq	18920 <__assert_fail@plt+0x6184>
   18780:	bl	124d8 <__errno_location@plt>
   18784:	mov	r2, #10
   18788:	add	r1, sp, #28
   1878c:	ldr	r8, [r0]
   18790:	mov	r6, r0
   18794:	str	r7, [r0]
   18798:	mov	r0, r5
   1879c:	bl	12490 <strtoul@plt>
   187a0:	ldr	r3, [sp, #28]
   187a4:	cmp	r0, #0
   187a8:	bne	187d0 <__assert_fail@plt+0x6034>
   187ac:	cmp	r5, r3
   187b0:	beq	18900 <__assert_fail@plt+0x6164>
   187b4:	ldrb	r3, [r3]
   187b8:	cmp	r3, #0
   187bc:	bne	188dc <__assert_fail@plt+0x6140>
   187c0:	ldr	r7, [pc, #444]	; 18984 <__assert_fail@plt+0x61e8>
   187c4:	strh	r0, [r7, #68]	; 0x44
   187c8:	str	r8, [r6]
   187cc:	b	186d0 <__assert_fail@plt+0x5f34>
   187d0:	ldrb	r3, [r3]
   187d4:	cmp	r3, #0
   187d8:	bne	188dc <__assert_fail@plt+0x6140>
   187dc:	cmn	r0, #1
   187e0:	bne	18818 <__assert_fail@plt+0x607c>
   187e4:	ldr	r4, [r6]
   187e8:	mov	sl, r0
   187ec:	cmp	r4, #0
   187f0:	bne	188b8 <__assert_fail@plt+0x611c>
   187f4:	mov	r2, #5
   187f8:	ldr	r1, [pc, #404]	; 18994 <__assert_fail@plt+0x61f8>
   187fc:	mov	r0, #0
   18800:	bl	1222c <dcgettext@plt>
   18804:	mov	r3, sl
   18808:	mov	r1, #0
   1880c:	mov	r2, r0
   18810:	mov	r0, #1
   18814:	bl	12388 <error@plt>
   18818:	cmp	r0, #65536	; 0x10000
   1881c:	bcc	187c0 <__assert_fail@plt+0x6024>
   18820:	mov	sl, r0
   18824:	b	187f4 <__assert_fail@plt+0x6058>
   18828:	ldr	r4, [pc, #360]	; 18998 <__assert_fail@plt+0x61fc>
   1882c:	mov	r2, #5
   18830:	ldr	r1, [pc, #356]	; 1899c <__assert_fail@plt+0x6200>
   18834:	bl	1222c <dcgettext@plt>
   18838:	ldr	r1, [r4]
   1883c:	bl	12724 <fputs@plt>
   18840:	ldr	r7, [pc, #344]	; 189a0 <__assert_fail@plt+0x6204>
   18844:	ldr	r2, [pc, #344]	; 189a4 <__assert_fail@plt+0x6208>
   18848:	ldr	r3, [pc, #280]	; 18968 <__assert_fail@plt+0x61cc>
   1884c:	ldr	r5, [pc, #340]	; 189a8 <__assert_fail@plt+0x620c>
   18850:	b	1885c <__assert_fail@plt+0x60c0>
   18854:	ldr	r3, [r6, #-12]
   18858:	ldr	r2, [r6, #-4]
   1885c:	str	r2, [sp]
   18860:	add	r6, r6, #12
   18864:	mov	r2, r5
   18868:	mov	r1, #1
   1886c:	ldr	r0, [r4]
   18870:	bl	12580 <__fprintf_chk@plt>
   18874:	cmp	r6, r7
   18878:	bne	18854 <__assert_fail@plt+0x60b8>
   1887c:	mov	r0, #0
   18880:	bl	12478 <exit@plt>
   18884:	mov	r2, #5
   18888:	ldr	r1, [pc, #284]	; 189ac <__assert_fail@plt+0x6210>
   1888c:	bl	1222c <dcgettext@plt>
   18890:	mov	r1, r5
   18894:	mov	r2, r0
   18898:	mov	r0, r5
   1889c:	bl	12388 <error@plt>
   188a0:	mov	r0, #1
   188a4:	bl	179a0 <__assert_fail@plt+0x5204>
   188a8:	add	r4, r4, #1
   188ac:	b	186e0 <__assert_fail@plt+0x5f44>
   188b0:	mov	r4, #1
   188b4:	b	186e0 <__assert_fail@plt+0x5f44>
   188b8:	mov	r2, #5
   188bc:	ldr	r1, [pc, #236]	; 189b0 <__assert_fail@plt+0x6214>
   188c0:	mov	r0, #0
   188c4:	bl	1222c <dcgettext@plt>
   188c8:	mov	r3, r5
   188cc:	mov	r1, r4
   188d0:	mov	r2, r0
   188d4:	mov	r0, #1
   188d8:	bl	12388 <error@plt>
   188dc:	mov	r2, #5
   188e0:	ldr	r1, [pc, #200]	; 189b0 <__assert_fail@plt+0x6214>
   188e4:	mov	r0, #0
   188e8:	bl	1222c <dcgettext@plt>
   188ec:	mov	r3, r5
   188f0:	mov	r1, #0
   188f4:	mov	r2, r0
   188f8:	mov	r0, #1
   188fc:	bl	12388 <error@plt>
   18900:	ldr	r1, [pc, #172]	; 189b4 <__assert_fail@plt+0x6218>
   18904:	mov	r2, #5
   18908:	mov	r0, #0
   1890c:	bl	1222c <dcgettext@plt>
   18910:	mov	r1, #0
   18914:	mov	r2, r0
   18918:	mov	r0, #1
   1891c:	bl	12388 <error@plt>
   18920:	mov	r2, #5
   18924:	ldr	r1, [pc, #136]	; 189b4 <__assert_fail@plt+0x6218>
   18928:	mov	r0, r3
   1892c:	b	1890c <__assert_fail@plt+0x6170>
   18930:	mov	r2, #5
   18934:	ldr	r1, [pc, #124]	; 189b8 <__assert_fail@plt+0x621c>
   18938:	bl	1222c <dcgettext@plt>
   1893c:	mov	r1, r7
   18940:	mov	r2, r0
   18944:	mov	r0, r7
   18948:	bl	12388 <error@plt>
   1894c:	mov	r0, #1
   18950:	bl	179a0 <__assert_fail@plt+0x5204>
   18954:	mov	r2, #5
   18958:	ldr	r1, [pc, #92]	; 189bc <__assert_fail@plt+0x6220>
   1895c:	b	1890c <__assert_fail@plt+0x6170>
   18960:	bl	12244 <__stack_chk_fail@plt>
   18964:	andeq	fp, r5, r0, ror #24
   18968:	andeq	r5, r4, ip, lsr #30
   1896c:	andeq	r5, r4, ip, ror pc
   18970:	andeq	r5, r4, r0, lsl #31
   18974:	andeq	r5, r4, r4, lsl #31
   18978:	andeq	r5, r4, r8, lsl #31
   1897c:	andeq	r5, r4, ip, lsl #31
   18980:	muleq	r4, ip, r6
   18984:	andeq	ip, r5, ip, asr lr
   18988:	andeq	r6, r4, ip, ror #1
   1898c:	andeq	r5, r4, r0, ror #12
   18990:	andeq	r5, r4, r8, ror #31
   18994:	andeq	r6, r4, r4, lsl #1
   18998:	andeq	ip, r5, r4, asr #10
   1899c:			; <UNDEFINED> instruction: 0x00045dbc
   189a0:	andeq	r5, r4, r8, lsl #14
   189a4:	andeq	r5, r4, r4, lsr pc
   189a8:	ldrdeq	r5, [r4], -ip
   189ac:			; <UNDEFINED> instruction: 0x00045fb8
   189b0:	andeq	r6, r4, r4, rrx
   189b4:	andeq	r6, r4, ip, lsr #32
   189b8:	muleq	r4, r0, pc	; <UNPREDICTABLE>
   189bc:	andeq	r5, r4, ip, ror #31
   189c0:	push	{r4, r5, r6, lr}
   189c4:	sub	sp, sp, #16
   189c8:	ldr	r6, [pc, #352]	; 18b30 <__assert_fail@plt+0x6394>
   189cc:	mov	r4, r0
   189d0:	ldr	r0, [pc, #348]	; 18b34 <__assert_fail@plt+0x6398>
   189d4:	ldr	r3, [r6]
   189d8:	mov	r5, #0
   189dc:	str	r3, [sp, #12]
   189e0:	bl	123c4 <getenv@plt>
   189e4:	subs	r0, r0, r5
   189e8:	movne	r0, #1
   189ec:	strb	r0, [r4, #17]
   189f0:	bl	17db0 <__assert_fail@plt+0x5614>
   189f4:	str	r5, [r4, #60]	; 0x3c
   189f8:	strb	r0, [r4, #56]	; 0x38
   189fc:	mov	r0, r5
   18a00:	bl	12700 <isatty@plt>
   18a04:	mov	r2, #1
   18a08:	strh	r2, [r4]
   18a0c:	mov	r1, #0
   18a10:	cmp	r0, #0
   18a14:	movne	r3, #1
   18a18:	strbne	r3, [r4, #16]
   18a1c:	ldrb	r3, [r4, #17]
   18a20:	strbeq	r0, [r4, #16]
   18a24:	strbeq	r0, [r4, #15]
   18a28:	strbne	r5, [r4, #15]
   18a2c:	cmp	r3, #0
   18a30:	movne	r3, #0
   18a34:	strbne	r3, [r4, #16]
   18a38:	mvn	r3, #0
   18a3c:	str	r3, [r4, #8]
   18a40:	str	r3, [r4, #4]
   18a44:	add	r0, sp, #4
   18a48:	bl	12358 <gettimeofday@plt>
   18a4c:	cmp	r0, #0
   18a50:	bne	18ae4 <__assert_fail@plt+0x6348>
   18a54:	ldmib	sp, {r0, r3}
   18a58:	rsb	r2, r3, r3, lsl #5
   18a5c:	add	r3, r3, r2, lsl #2
   18a60:	lsl	r3, r3, #3
   18a64:	ldrb	r1, [r4, #17]
   18a68:	sub	r2, r0, #86016	; 0x15000
   18a6c:	sub	r2, r2, #384	; 0x180
   18a70:	cmp	r1, #0
   18a74:	mov	r5, #0
   18a78:	movne	r1, #512	; 0x200
   18a7c:	moveq	r1, #1024	; 0x400
   18a80:	str	r2, [r4, #28]
   18a84:	mov	r2, #2
   18a88:	str	r0, [r4, #20]
   18a8c:	str	r3, [r4, #24]
   18a90:	str	r3, [r4, #32]
   18a94:	str	r1, [r4, #40]	; 0x28
   18a98:	strb	r5, [r4, #36]	; 0x24
   18a9c:	strb	r5, [r4, #13]
   18aa0:	strb	r5, [r4, #14]
   18aa4:	str	r5, [r4, #44]	; 0x2c
   18aa8:	strh	r2, [r4, #68]	; 0x44
   18aac:	ldr	r0, [pc, #132]	; 18b38 <__assert_fail@plt+0x639c>
   18ab0:	bl	123c4 <getenv@plt>
   18ab4:	subs	r3, r0, #0
   18ab8:	bne	18b10 <__assert_fail@plt+0x6374>
   18abc:	strb	r3, [r4, #12]
   18ac0:	bl	1eb44 <__assert_fail@plt+0xc3a8>
   18ac4:	ldr	r1, [sp, #12]
   18ac8:	ldr	r2, [r6]
   18acc:	mov	r3, #8
   18ad0:	cmp	r1, r2
   18ad4:	str	r3, [r4, #72]	; 0x48
   18ad8:	bne	18b0c <__assert_fail@plt+0x6370>
   18adc:	add	sp, sp, #16
   18ae0:	pop	{r4, r5, r6, pc}
   18ae4:	mov	r0, #0
   18ae8:	bl	121fc <time@plt>
   18aec:	cmn	r0, #1
   18af0:	movne	r3, #0
   18af4:	bne	18a64 <__assert_fail@plt+0x62c8>
   18af8:	ldr	r3, [pc, #60]	; 18b3c <__assert_fail@plt+0x63a0>
   18afc:	ldr	r2, [pc, #60]	; 18b40 <__assert_fail@plt+0x63a4>
   18b00:	ldr	r1, [pc, #60]	; 18b44 <__assert_fail@plt+0x63a8>
   18b04:	ldr	r0, [pc, #60]	; 18b48 <__assert_fail@plt+0x63ac>
   18b08:	bl	1279c <__assert_fail@plt>
   18b0c:	bl	12244 <__stack_chk_fail@plt>
   18b10:	mov	r2, #5
   18b14:	ldr	r1, [pc, #48]	; 18b4c <__assert_fail@plt+0x63b0>
   18b18:	mov	r0, r5
   18b1c:	bl	1222c <dcgettext@plt>
   18b20:	mov	r1, r5
   18b24:	mov	r2, r0
   18b28:	mov	r0, #1
   18b2c:	bl	12388 <error@plt>
   18b30:	andeq	fp, r5, r0, ror #24
   18b34:	andeq	r6, r4, r0, lsl r1
   18b38:	andeq	r6, r4, r0, lsr r1
   18b3c:	andeq	r5, r4, r4, asr #14
   18b40:	andeq	r0, r0, lr, ror #7
   18b44:	andeq	r5, r4, r8, asr #14
   18b48:	andeq	r6, r4, r0, lsr #2
   18b4c:	andeq	r6, r4, r0, asr #2
   18b50:	push	{r4, r5, r6, lr}
   18b54:	mov	r4, r2
   18b58:	ldrh	r2, [r2, #18]
   18b5c:	ldr	r3, [r4, #164]	; 0xa4
   18b60:	mov	r5, r0
   18b64:	add	r3, r3, #1
   18b68:	cmp	r2, #0
   18b6c:	mov	r6, r1
   18b70:	str	r3, [r4, #164]	; 0xa4
   18b74:	bne	18b84 <__assert_fail@plt+0x63e8>
   18b78:	ldrb	r3, [r4, #20]
   18b7c:	cmp	r3, #0
   18b80:	beq	18b9c <__assert_fail@plt+0x6400>
   18b84:	mov	r2, r4
   18b88:	mov	r1, r6
   18b8c:	mov	r0, r5
   18b90:	bl	17ca4 <__assert_fail@plt+0x5508>
   18b94:	cmp	r0, #0
   18b98:	bne	18bc8 <__assert_fail@plt+0x642c>
   18b9c:	mov	r1, r6
   18ba0:	mov	r0, r5
   18ba4:	ldr	r3, [r4]
   18ba8:	mov	r2, r4
   18bac:	blx	r3
   18bb0:	cmp	r0, #0
   18bb4:	beq	18bc8 <__assert_fail@plt+0x642c>
   18bb8:	ldr	r3, [r4, #168]	; 0xa8
   18bbc:	add	r3, r3, #1
   18bc0:	str	r3, [r4, #168]	; 0xa8
   18bc4:	pop	{r4, r5, r6, pc}
   18bc8:	mov	r0, #0
   18bcc:	pop	{r4, r5, r6, pc}
   18bd0:	ldr	r2, [pc, #20]	; 18bec <__assert_fail@plt+0x6450>
   18bd4:	ldr	r3, [pc, #20]	; 18bf0 <__assert_fail@plt+0x6454>
   18bd8:	cmp	r3, r0
   18bdc:	cmpne	r2, r0
   18be0:	moveq	r0, #1
   18be4:	movne	r0, #0
   18be8:	bx	lr
   18bec:	ldrdeq	r4, [r1], -ip
   18bf0:			; <UNDEFINED> instruction: 0x00013bb0
   18bf4:	ldr	r3, [pc, #8]	; 18c04 <__assert_fail@plt+0x6468>
   18bf8:	mov	r2, r1
   18bfc:	ldr	r1, [r3, #72]	; 0x48
   18c00:	b	2d52c <__assert_fail@plt+0x1ad90>
   18c04:	andeq	ip, r5, ip, asr lr
   18c08:	ldr	r3, [pc, #12]	; 18c1c <__assert_fail@plt+0x6480>
   18c0c:	ldr	r2, [r3, #28]
   18c10:	cmp	r2, r0
   18c14:	strlt	r0, [r3, #28]
   18c18:	bx	lr
   18c1c:	andeq	ip, r5, r0, lsr lr
   18c20:	mov	r3, r1
   18c24:	mov	r2, #1
   18c28:	mov	r1, r0
   18c2c:	mov	r0, #0
   18c30:	b	1768c <__assert_fail@plt+0x4ef0>
   18c34:	mov	r2, #1
   18c38:	mov	r3, r1
   18c3c:	push	{r4, lr}
   18c40:	mov	r1, r0
   18c44:	mov	r0, r2
   18c48:	bl	1768c <__assert_fail@plt+0x4ef0>
   18c4c:	bl	1273c <abort@plt>
   18c50:	mov	r2, #0
   18c54:	mov	r3, r1
   18c58:	mov	r1, r0
   18c5c:	mov	r0, r2
   18c60:	b	1768c <__assert_fail@plt+0x4ef0>
   18c64:	push	{r4, lr}
   18c68:	mov	ip, #0
   18c6c:	ldr	lr, [pc, #24]	; 18c8c <__assert_fail@plt+0x64f0>
   18c70:	mov	r3, r1
   18c74:	mov	r2, ip
   18c78:	mov	r1, r0
   18c7c:	mov	r0, #1
   18c80:	strb	ip, [lr, #40]	; 0x28
   18c84:	bl	1768c <__assert_fail@plt+0x4ef0>
   18c88:	bl	1273c <abort@plt>
   18c8c:	andeq	ip, r5, r0, lsr lr
   18c90:	ldrd	r2, [r1, #8]
   18c94:	push	{r4, r5}
   18c98:	ldrd	r4, [r0, #8]
   18c9c:	cmp	r5, r3
   18ca0:	cmpeq	r4, r2
   18ca4:	movne	r0, #0
   18ca8:	bne	18cc4 <__assert_fail@plt+0x6528>
   18cac:	ldrd	r4, [r0]
   18cb0:	ldrd	r2, [r1]
   18cb4:	cmp	r5, r3
   18cb8:	cmpeq	r4, r2
   18cbc:	moveq	r0, #1
   18cc0:	movne	r0, #0
   18cc4:	pop	{r4, r5}
   18cc8:	bx	lr
   18ccc:	mov	r2, r1
   18cd0:	ldmib	r0, {r1, ip}
   18cd4:	ldr	r3, [r0, #12]
   18cd8:	push	{r4, lr}
   18cdc:	eor	r1, r1, r3
   18ce0:	ldr	lr, [r0]
   18ce4:	mov	r3, #0
   18ce8:	eor	r0, lr, ip
   18cec:	bl	43dc8 <fts_children@@Base+0x1232c>
   18cf0:	mov	r0, r2
   18cf4:	pop	{r4, pc}
   18cf8:	push	{r4, lr}
   18cfc:	mov	r4, r0
   18d00:	ldr	r0, [r0, #20]
   18d04:	cmp	r0, #0
   18d08:	beq	18d18 <__assert_fail@plt+0x657c>
   18d0c:	bl	125b0 <fclose@plt>
   18d10:	cmp	r0, #0
   18d14:	bne	18d2c <__assert_fail@plt+0x6590>
   18d18:	ldr	r0, [r4, #16]
   18d1c:	bl	12154 <free@plt>
   18d20:	mov	r0, r4
   18d24:	pop	{r4, lr}
   18d28:	b	12154 <free@plt>
   18d2c:	bl	124d8 <__errno_location@plt>
   18d30:	ldr	r1, [r4, #16]
   18d34:	ldr	r0, [r0]
   18d38:	bl	18c64 <__assert_fail@plt+0x64c8>
   18d3c:	push	{r4, r5, lr}
   18d40:	mov	r5, r0
   18d44:	sub	sp, sp, #12
   18d48:	mov	r0, #8
   18d4c:	bl	123dc <malloc@plt>
   18d50:	subs	r4, r0, #0
   18d54:	beq	18d9c <__assert_fail@plt+0x6600>
   18d58:	mov	r0, r5
   18d5c:	bl	12238 <strdup@plt>
   18d60:	cmp	r0, #0
   18d64:	mov	r5, r0
   18d68:	str	r0, [r4]
   18d6c:	beq	18da8 <__assert_fail@plt+0x660c>
   18d70:	ldr	r2, [pc, #96]	; 18dd8 <__assert_fail@plt+0x663c>
   18d74:	ldr	r3, [pc, #96]	; 18ddc <__assert_fail@plt+0x6640>
   18d78:	str	r2, [sp]
   18d7c:	mov	r1, #0
   18d80:	ldr	r2, [pc, #88]	; 18de0 <__assert_fail@plt+0x6644>
   18d84:	mov	r0, #11
   18d88:	bl	22428 <__assert_fail@plt+0xfc8c>
   18d8c:	cmp	r0, #0
   18d90:	mov	r5, r0
   18d94:	str	r0, [r4, #4]
   18d98:	beq	18dc0 <__assert_fail@plt+0x6624>
   18d9c:	mov	r0, r4
   18da0:	add	sp, sp, #12
   18da4:	pop	{r4, r5, pc}
   18da8:	mov	r0, r4
   18dac:	bl	12154 <free@plt>
   18db0:	mov	r4, r5
   18db4:	mov	r0, r4
   18db8:	add	sp, sp, #12
   18dbc:	pop	{r4, r5, pc}
   18dc0:	ldr	r0, [r4]
   18dc4:	bl	12154 <free@plt>
   18dc8:	mov	r0, r4
   18dcc:	bl	12154 <free@plt>
   18dd0:	mov	r4, r5
   18dd4:	b	18d9c <__assert_fail@plt+0x6600>
   18dd8:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   18ddc:	muleq	r1, r0, ip
   18de0:	andeq	r8, r1, ip, asr #25
   18de4:	push	{r4, lr}
   18de8:	mov	r4, r0
   18dec:	ldr	r0, [r0]
   18df0:	bl	12154 <free@plt>
   18df4:	ldr	r0, [r4, #4]
   18df8:	pop	{r4, lr}
   18dfc:	b	22628 <__assert_fail@plt+0xfe8c>
   18e00:	push	{r4, r5, r6, r7, r8, lr}
   18e04:	sub	sp, sp, #112	; 0x70
   18e08:	ldr	r5, [pc, #332]	; 18f5c <__assert_fail@plt+0x67c0>
   18e0c:	mov	r7, r0
   18e10:	mov	r0, #24
   18e14:	ldr	r3, [r5]
   18e18:	mov	r6, r1
   18e1c:	str	r3, [sp, #108]	; 0x6c
   18e20:	bl	123dc <malloc@plt>
   18e24:	subs	r4, r0, #0
   18e28:	beq	18ebc <__assert_fail@plt+0x6720>
   18e2c:	mov	r0, r6
   18e30:	bl	12238 <strdup@plt>
   18e34:	cmp	r0, #0
   18e38:	mov	r8, r0
   18e3c:	str	r0, [r4, #16]
   18e40:	beq	18f04 <__assert_fail@plt+0x6768>
   18e44:	mov	r0, r6
   18e48:	ldr	r1, [r7]
   18e4c:	bl	21a5c <__assert_fail@plt+0xf2c0>
   18e50:	cmp	r0, #0
   18e54:	mov	r6, r0
   18e58:	str	r0, [r4, #20]
   18e5c:	beq	18f14 <__assert_fail@plt+0x6778>
   18e60:	bl	12568 <fileno@plt>
   18e64:	subs	r6, r0, #0
   18e68:	blt	18f48 <__assert_fail@plt+0x67ac>
   18e6c:	mov	r1, #1
   18e70:	bl	214c4 <__assert_fail@plt+0xed28>
   18e74:	mov	r1, r6
   18e78:	mov	r2, sp
   18e7c:	mov	r0, #3
   18e80:	bl	122d4 <__fxstat64@plt>
   18e84:	cmp	r0, #0
   18e88:	blt	18ef4 <__assert_fail@plt+0x6758>
   18e8c:	ldrd	r0, [sp]
   18e90:	ldrd	r2, [sp, #96]	; 0x60
   18e94:	strd	r0, [r4]
   18e98:	strd	r2, [r4, #8]
   18e9c:	mov	r1, r4
   18ea0:	ldr	r0, [r7, #4]
   18ea4:	bl	22170 <__assert_fail@plt+0xf9d4>
   18ea8:	subs	r6, r0, #0
   18eac:	beq	18ed8 <__assert_fail@plt+0x673c>
   18eb0:	mov	r0, r4
   18eb4:	bl	18cf8 <__assert_fail@plt+0x655c>
   18eb8:	ldr	r4, [r6, #20]
   18ebc:	ldr	r2, [sp, #108]	; 0x6c
   18ec0:	ldr	r3, [r5]
   18ec4:	mov	r0, r4
   18ec8:	cmp	r2, r3
   18ecc:	bne	18f44 <__assert_fail@plt+0x67a8>
   18ed0:	add	sp, sp, #112	; 0x70
   18ed4:	pop	{r4, r5, r6, r7, r8, pc}
   18ed8:	ldr	r0, [r7, #4]
   18edc:	mov	r1, r4
   18ee0:	bl	22a54 <__assert_fail@plt+0x102b8>
   18ee4:	subs	r6, r0, #0
   18ee8:	beq	18f24 <__assert_fail@plt+0x6788>
   18eec:	ldr	r4, [r4, #20]
   18ef0:	b	18ebc <__assert_fail@plt+0x6720>
   18ef4:	mov	r0, r4
   18ef8:	bl	18cf8 <__assert_fail@plt+0x655c>
   18efc:	mov	r4, #0
   18f00:	b	18ebc <__assert_fail@plt+0x6720>
   18f04:	mov	r0, r4
   18f08:	bl	12154 <free@plt>
   18f0c:	mov	r4, r8
   18f10:	b	18ebc <__assert_fail@plt+0x6720>
   18f14:	mov	r0, r4
   18f18:	bl	12154 <free@plt>
   18f1c:	mov	r4, r6
   18f20:	b	18ebc <__assert_fail@plt+0x6720>
   18f24:	bl	124d8 <__errno_location@plt>
   18f28:	mov	r7, r0
   18f2c:	mov	r0, r4
   18f30:	ldr	r8, [r7]
   18f34:	mov	r4, r6
   18f38:	bl	18cf8 <__assert_fail@plt+0x655c>
   18f3c:	str	r8, [r7]
   18f40:	b	18ebc <__assert_fail@plt+0x6720>
   18f44:	bl	12244 <__stack_chk_fail@plt>
   18f48:	ldr	r3, [pc, #16]	; 18f60 <__assert_fail@plt+0x67c4>
   18f4c:	mov	r2, #166	; 0xa6
   18f50:	ldr	r1, [pc, #12]	; 18f64 <__assert_fail@plt+0x67c8>
   18f54:	ldr	r0, [pc, #12]	; 18f68 <__assert_fail@plt+0x67cc>
   18f58:	bl	1279c <__assert_fail@plt>
   18f5c:	andeq	fp, r5, r0, ror #24
   18f60:	andeq	r6, r4, r0, ror #6
   18f64:	andeq	r6, r4, r0, ror r3
   18f68:	andeq	r6, r4, ip, ror r3
   18f6c:	andeq	r0, r0, r0
   18f70:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18f74:	sub	sp, sp, #164	; 0xa4
   18f78:	ldr	r9, [pc, #1368]	; 194d8 <__assert_fail@plt+0x6d3c>
   18f7c:	add	r5, sp, #56	; 0x38
   18f80:	cmp	r2, #43	; 0x2b
   18f84:	ldr	r3, [r9]
   18f88:	stm	r5, {r0, r1}
   18f8c:	str	r3, [sp, #156]	; 0x9c
   18f90:	beq	19238 <__assert_fail@plt+0x6a9c>
   18f94:	mov	r4, r2
   18f98:	mov	r1, #37	; 0x25
   18f9c:	mov	r2, #0
   18fa0:	sub	r3, r4, #64	; 0x40
   18fa4:	strb	r4, [sp, #113]	; 0x71
   18fa8:	strb	r1, [sp, #112]	; 0x70
   18fac:	strb	r2, [sp, #114]	; 0x72
   18fb0:	cmp	r3, #24
   18fb4:	ldrls	pc, [pc, r3, lsl #2]
   18fb8:	b	19124 <__assert_fail@plt+0x6988>
   18fbc:	andeq	r9, r1, r0, lsr #32
   18fc0:	andeq	r9, r1, r4, lsr #2
   18fc4:	andeq	r9, r1, r4, lsr #2
   18fc8:	andeq	r9, r1, r4, lsr #2
   18fcc:	andeq	r9, r1, r4, lsr #2
   18fd0:	andeq	r9, r1, r4, lsr #2
   18fd4:	andeq	r9, r1, r4, lsr #2
   18fd8:	andeq	r9, r1, r4, lsr #2
   18fdc:	andeq	r9, r1, r4, lsr #2
   18fe0:	andeq	r9, r1, r4, lsr #2
   18fe4:	andeq	r9, r1, r4, lsr #2
   18fe8:	andeq	r9, r1, r4, lsr #2
   18fec:	andeq	r9, r1, r4, lsr #2
   18ff0:	andeq	r9, r1, r4, lsr #2
   18ff4:	andeq	r9, r1, r4, lsr #2
   18ff8:	andeq	r9, r1, r4, lsr #2
   18ffc:	andeq	r9, r1, r4, lsr #2
   19000:	andeq	r9, r1, r4, lsr #2
   19004:	andeq	r9, r1, r4, lsr #2
   19008:	andeq	r9, r1, r0, lsr #32
   1900c:	andeq	r9, r1, r0, lsr #32
   19010:	andeq	r9, r1, r4, lsr #2
   19014:	andeq	r9, r1, r4, lsr #2
   19018:	andeq	r9, r1, r4, lsr #2
   1901c:	andeq	r9, r1, r0, lsr #32
   19020:	ldr	r1, [sp, #60]	; 0x3c
   19024:	ldr	r2, [pc, #1200]	; 194dc <__assert_fail@plt+0x6d40>
   19028:	mov	r3, #32
   1902c:	str	r1, [sp, #4]
   19030:	str	r2, [sp]
   19034:	mov	r1, r3
   19038:	mov	r2, #1
   1903c:	add	r0, sp, #124	; 0x7c
   19040:	bl	12784 <__snprintf_chk@plt>
   19044:	mov	r3, #1
   19048:	cmp	r4, #64	; 0x40
   1904c:	str	r3, [sp, #24]
   19050:	str	r0, [sp, #28]
   19054:	bne	1913c <__assert_fail@plt+0x69a0>
   19058:	ldr	r0, [sp, #56]	; 0x38
   1905c:	cmp	r0, #0
   19060:	asr	r1, r0, #31
   19064:	bge	19070 <__assert_fail@plt+0x68d4>
   19068:	rsbs	r0, r0, #0
   1906c:	rsc	r1, r1, #0
   19070:	ldr	r4, [pc, #1128]	; 194e0 <__assert_fail@plt+0x6d44>
   19074:	mov	r6, #1
   19078:	mov	r7, #0
   1907c:	add	r2, r4, #1
   19080:	strd	r6, [sp, #8]
   19084:	strd	r6, [sp]
   19088:	mov	r3, #0
   1908c:	bl	22bd8 <__assert_fail@plt+0x1043c>
   19090:	cmp	r0, r4
   19094:	mov	r5, r0
   19098:	bls	1949c <__assert_fail@plt+0x6d00>
   1909c:	add	r3, r4, #788	; 0x314
   190a0:	add	r3, r3, #3
   190a4:	cmp	r0, r3
   190a8:	bcs	19488 <__assert_fail@plt+0x6cec>
   190ac:	ldr	r3, [sp, #56]	; 0x38
   190b0:	cmp	r3, #0
   190b4:	movlt	r3, #45	; 0x2d
   190b8:	strblt	r3, [r0, #-1]
   190bc:	ldr	r3, [sp, #24]
   190c0:	sublt	r5, r0, #1
   190c4:	cmp	r3, #0
   190c8:	beq	19108 <__assert_fail@plt+0x696c>
   190cc:	mov	r0, r5
   190d0:	bl	1249c <strlen@plt>
   190d4:	sub	r4, r5, r4
   190d8:	ldr	r3, [pc, #1028]	; 194e4 <__assert_fail@plt+0x6d48>
   190dc:	add	r4, r4, r0
   190e0:	cmp	r4, r3
   190e4:	bhi	194b0 <__assert_fail@plt+0x6d14>
   190e8:	add	r0, sp, #124	; 0x7c
   190ec:	sub	r4, r3, r4
   190f0:	bl	1249c <strlen@plt>
   190f4:	cmp	r0, r4
   190f8:	bcs	19424 <__assert_fail@plt+0x6c88>
   190fc:	add	r1, sp, #124	; 0x7c
   19100:	mov	r0, r5
   19104:	bl	12304 <strcat@plt>
   19108:	ldr	r2, [sp, #156]	; 0x9c
   1910c:	ldr	r3, [r9]
   19110:	mov	r0, r5
   19114:	cmp	r2, r3
   19118:	bne	19484 <__assert_fail@plt+0x6ce8>
   1911c:	add	sp, sp, #164	; 0xa4
   19120:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19124:	mov	r3, #0
   19128:	cmp	r4, #64	; 0x40
   1912c:	str	r3, [sp, #24]
   19130:	strb	r3, [sp, #124]	; 0x7c
   19134:	str	r3, [sp, #28]
   19138:	beq	19058 <__assert_fail@plt+0x68bc>
   1913c:	mov	r0, r5
   19140:	bl	12424 <localtime@plt>
   19144:	subs	r6, r0, #0
   19148:	beq	19058 <__assert_fail@plt+0x68bc>
   1914c:	add	r0, sp, #112	; 0x70
   19150:	bl	1249c <strlen@plt>
   19154:	mov	r4, r0
   19158:	add	r0, r0, #2
   1915c:	bl	2df04 <__assert_fail@plt+0x1b768>
   19160:	mov	r3, #95	; 0x5f
   19164:	add	r2, r4, #1
   19168:	add	r1, sp, #112	; 0x70
   1916c:	str	r0, [sp, #36]	; 0x24
   19170:	strb	r3, [r0], #1
   19174:	bl	121a8 <memcpy@plt>
   19178:	mov	lr, r6
   1917c:	add	ip, sp, #68	; 0x44
   19180:	ldm	lr!, {r0, r1, r2, r3}
   19184:	stmia	ip!, {r0, r1, r2, r3}
   19188:	ldm	lr!, {r0, r1, r2, r3}
   1918c:	ldr	r4, [sp, #68]	; 0x44
   19190:	cmp	r4, #10
   19194:	stmia	ip!, {r0, r1, r2, r3}
   19198:	subgt	r3, r4, #11
   1919c:	addle	r3, r4, #11
   191a0:	ldr	r4, [pc, #832]	; 194e8 <__assert_fail@plt+0x6d4c>
   191a4:	ldm	lr, {r0, r1, r2}
   191a8:	ldr	r5, [r4]
   191ac:	str	r3, [sp, #68]	; 0x44
   191b0:	cmp	r5, #0
   191b4:	stm	ip, {r0, r1, r2}
   191b8:	beq	19468 <__assert_fail@plt+0x6ccc>
   191bc:	ldr	r7, [pc, #808]	; 194ec <__assert_fail@plt+0x6d50>
   191c0:	ldr	r8, [sp, #36]	; 0x24
   191c4:	b	191f0 <__assert_fail@plt+0x6a54>
   191c8:	cmp	r3, r7
   191cc:	bhi	1922c <__assert_fail@plt+0x6a90>
   191d0:	add	r2, r3, #1
   191d4:	add	r3, r2, r3, lsr #1
   191d8:	mov	r0, r5
   191dc:	mov	r1, r3
   191e0:	str	r3, [r4, #4]
   191e4:	bl	2df60 <__assert_fail@plt+0x1b7c4>
   191e8:	mov	r5, r0
   191ec:	str	r0, [r4]
   191f0:	mov	r3, r6
   191f4:	mov	r2, r8
   191f8:	ldr	r1, [r4, #4]
   191fc:	mov	r0, r5
   19200:	bl	12400 <strftime@plt>
   19204:	ldr	r3, [r4, #4]
   19208:	cmp	r0, #0
   1920c:	beq	19218 <__assert_fail@plt+0x6a7c>
   19210:	cmp	r0, r3
   19214:	bcc	1927c <__assert_fail@plt+0x6ae0>
   19218:	cmp	r5, #0
   1921c:	bne	191c8 <__assert_fail@plt+0x6a2c>
   19220:	cmp	r3, #0
   19224:	beq	19230 <__assert_fail@plt+0x6a94>
   19228:	bge	191d8 <__assert_fail@plt+0x6a3c>
   1922c:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   19230:	mov	r3, #64	; 0x40
   19234:	b	191d8 <__assert_fail@plt+0x6a3c>
   19238:	ldr	r3, [pc, #688]	; 194f0 <__assert_fail@plt+0x6d54>
   1923c:	ldr	lr, [sp, #60]	; 0x3c
   19240:	add	ip, sp, #112	; 0x70
   19244:	ldm	r3, {r0, r1, r2}
   19248:	mov	r3, #32
   1924c:	str	lr, [sp, #4]
   19250:	ldr	lr, [pc, #644]	; 194dc <__assert_fail@plt+0x6d40>
   19254:	stm	ip, {r0, r1, r2}
   19258:	mov	r1, r3
   1925c:	str	lr, [sp]
   19260:	mov	r2, #1
   19264:	add	r0, sp, #124	; 0x7c
   19268:	bl	12784 <__snprintf_chk@plt>
   1926c:	mov	r3, #1
   19270:	str	r3, [sp, #24]
   19274:	str	r0, [sp, #28]
   19278:	b	1913c <__assert_fail@plt+0x69a0>
   1927c:	ldr	r3, [sp, #28]
   19280:	mov	sl, r0
   19284:	add	r3, r3, #1
   19288:	add	r3, r3, r0
   1928c:	mov	r1, r3
   19290:	mov	r0, r5
   19294:	str	r3, [sp, #52]	; 0x34
   19298:	mov	r5, r3
   1929c:	bl	2df60 <__assert_fail@plt+0x1b7c4>
   192a0:	mov	r3, r5
   192a4:	stm	r4, {r0, r3}
   192a8:	mov	r0, r5
   192ac:	bl	2df04 <__assert_fail@plt+0x1b768>
   192b0:	ldr	r2, [sp, #36]	; 0x24
   192b4:	add	r3, sp, #68	; 0x44
   192b8:	ldr	r1, [r4, #4]
   192bc:	mov	r6, r0
   192c0:	str	r0, [sp, #44]	; 0x2c
   192c4:	bl	12400 <strftime@plt>
   192c8:	ldr	r2, [r4]
   192cc:	str	r2, [sp, #40]	; 0x28
   192d0:	ldrb	r5, [r2]
   192d4:	cmp	r5, #0
   192d8:	beq	19404 <__assert_fail@plt+0x6c68>
   192dc:	ldrb	r4, [r6]
   192e0:	mov	r3, r6
   192e4:	cmp	r4, #0
   192e8:	beq	19404 <__assert_fail@plt+0x6c68>
   192ec:	mov	r6, #0
   192f0:	add	r8, r3, #1
   192f4:	mvn	r3, r3
   192f8:	str	sl, [sp, #48]	; 0x30
   192fc:	mov	fp, r6
   19300:	str	r3, [sp, #32]
   19304:	mov	sl, r6
   19308:	b	19334 <__assert_fail@plt+0x6b98>
   1930c:	sub	r7, r7, fp
   19310:	cmp	r7, r6
   19314:	bne	19404 <__assert_fail@plt+0x6c68>
   19318:	add	r6, r6, #1
   1931c:	ldrb	r5, [r2, #1]!
   19320:	ldrb	r4, [r8], #1
   19324:	cmp	r5, #0
   19328:	beq	1938c <__assert_fail@plt+0x6bf0>
   1932c:	cmp	r4, #0
   19330:	beq	19404 <__assert_fail@plt+0x6c68>
   19334:	ldr	r3, [sp, #32]
   19338:	cmp	r4, r5
   1933c:	add	r7, r3, r8
   19340:	beq	1931c <__assert_fail@plt+0x6b80>
   19344:	str	r2, [sp, #20]
   19348:	bl	12460 <__ctype_b_loc@plt>
   1934c:	lsl	r5, r5, #1
   19350:	ldr	r0, [r0]
   19354:	ldrh	ip, [r0, r5]
   19358:	tst	ip, #2048	; 0x800
   1935c:	beq	19404 <__assert_fail@plt+0x6c68>
   19360:	lsl	r4, r4, #1
   19364:	ldrh	r0, [r0, r4]
   19368:	tst	r0, #2048	; 0x800
   1936c:	beq	19404 <__assert_fail@plt+0x6c68>
   19370:	cmp	sl, #0
   19374:	ldr	r2, [sp, #20]
   19378:	bne	1930c <__assert_fail@plt+0x6b70>
   1937c:	mov	r6, #1
   19380:	mov	fp, r7
   19384:	mov	sl, r6
   19388:	b	1931c <__assert_fail@plt+0x6b80>
   1938c:	cmp	r6, #2
   19390:	cmpeq	r4, #0
   19394:	ldr	sl, [sp, #48]	; 0x30
   19398:	bne	19404 <__assert_fail@plt+0x6c68>
   1939c:	bl	12460 <__ctype_b_loc@plt>
   193a0:	ldr	r2, [sp, #40]	; 0x28
   193a4:	add	r3, fp, #2
   193a8:	add	r4, r2, r3
   193ac:	ldrb	r2, [r2, r3]
   193b0:	lsl	r2, r2, #1
   193b4:	ldr	r1, [r0]
   193b8:	ldrh	r2, [r1, r2]
   193bc:	tst	r2, #2048	; 0x800
   193c0:	bne	19404 <__assert_fail@plt+0x6c68>
   193c4:	ldr	r1, [sp, #28]
   193c8:	add	sl, sl, #1
   193cc:	ldr	r0, [sp, #52]	; 0x34
   193d0:	add	r2, r1, sl
   193d4:	cmp	r0, r2
   193d8:	sub	r2, sl, r3
   193dc:	add	r3, r1, r3
   193e0:	bne	194c4 <__assert_fail@plt+0x6d28>
   193e4:	ldr	r1, [sp, #40]	; 0x28
   193e8:	add	r0, r1, r3
   193ec:	mov	r1, r4
   193f0:	bl	12148 <memmove@plt>
   193f4:	ldr	r2, [sp, #28]
   193f8:	mov	r0, r4
   193fc:	add	r1, sp, #124	; 0x7c
   19400:	bl	121a8 <memcpy@plt>
   19404:	ldr	r0, [sp, #36]	; 0x24
   19408:	bl	12154 <free@plt>
   1940c:	ldr	r0, [sp, #44]	; 0x2c
   19410:	bl	12154 <free@plt>
   19414:	ldr	r3, [sp, #40]	; 0x28
   19418:	adds	r5, r3, #1
   1941c:	bne	19108 <__assert_fail@plt+0x696c>
   19420:	b	19058 <__assert_fail@plt+0x68bc>
   19424:	mov	r1, #0
   19428:	add	r3, sp, #124	; 0x7c
   1942c:	mov	r0, r1
   19430:	str	r3, [sp, #4]
   19434:	ldr	r2, [pc, #184]	; 194f4 <__assert_fail@plt+0x6d58>
   19438:	ldr	r3, [sp, #28]
   1943c:	str	r4, [sp]
   19440:	bl	12388 <error@plt>
   19444:	add	r0, sp, #124	; 0x7c
   19448:	bl	1249c <strlen@plt>
   1944c:	cmp	r0, r4
   19450:	bcc	190fc <__assert_fail@plt+0x6960>
   19454:	ldr	r3, [pc, #156]	; 194f8 <__assert_fail@plt+0x6d5c>
   19458:	ldr	r2, [pc, #156]	; 194fc <__assert_fail@plt+0x6d60>
   1945c:	ldr	r1, [pc, #156]	; 19500 <__assert_fail@plt+0x6d64>
   19460:	ldr	r0, [pc, #156]	; 19504 <__assert_fail@plt+0x6d68>
   19464:	bl	1279c <__assert_fail@plt>
   19468:	mov	r3, #1
   1946c:	mov	r0, r3
   19470:	str	r3, [r4, #4]
   19474:	bl	2df04 <__assert_fail@plt+0x1b768>
   19478:	mov	r5, r0
   1947c:	str	r0, [r4]
   19480:	b	191bc <__assert_fail@plt+0x6a20>
   19484:	bl	12244 <__stack_chk_fail@plt>
   19488:	ldr	r3, [pc, #104]	; 194f8 <__assert_fail@plt+0x6d5c>
   1948c:	ldr	r2, [pc, #116]	; 19508 <__assert_fail@plt+0x6d6c>
   19490:	ldr	r1, [pc, #104]	; 19500 <__assert_fail@plt+0x6d64>
   19494:	ldr	r0, [pc, #112]	; 1950c <__assert_fail@plt+0x6d70>
   19498:	bl	1279c <__assert_fail@plt>
   1949c:	ldr	r3, [pc, #84]	; 194f8 <__assert_fail@plt+0x6d5c>
   194a0:	mov	r2, #696	; 0x2b8
   194a4:	ldr	r1, [pc, #84]	; 19500 <__assert_fail@plt+0x6d64>
   194a8:	ldr	r0, [pc, #96]	; 19510 <__assert_fail@plt+0x6d74>
   194ac:	bl	1279c <__assert_fail@plt>
   194b0:	ldr	r3, [pc, #64]	; 194f8 <__assert_fail@plt+0x6d5c>
   194b4:	ldr	r2, [pc, #88]	; 19514 <__assert_fail@plt+0x6d78>
   194b8:	ldr	r1, [pc, #64]	; 19500 <__assert_fail@plt+0x6d64>
   194bc:	ldr	r0, [pc, #84]	; 19518 <__assert_fail@plt+0x6d7c>
   194c0:	bl	1279c <__assert_fail@plt>
   194c4:	ldr	r3, [pc, #80]	; 1951c <__assert_fail@plt+0x6d80>
   194c8:	mov	r2, #548	; 0x224
   194cc:	ldr	r1, [pc, #44]	; 19500 <__assert_fail@plt+0x6d64>
   194d0:	ldr	r0, [pc, #72]	; 19520 <__assert_fail@plt+0x6d84>
   194d4:	bl	1279c <__assert_fail@plt>
   194d8:	andeq	fp, r5, r0, ror #24
   194dc:	andeq	r6, r4, r8, lsr r4
   194e0:	muleq	r5, r0, r5
   194e4:	andeq	r0, r0, r6, lsl r3
   194e8:	andeq	ip, r5, r8, lsl #11
   194ec:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   194f0:	andeq	r6, r4, r0, lsl #10
   194f4:			; <UNDEFINED> instruction: 0x000464b4
   194f8:	muleq	r4, r4, r3
   194fc:	andeq	r0, r0, pc, asr #5
   19500:	andeq	r6, r4, r0, asr #8
   19504:	andeq	r6, r4, r4, ror #9
   19508:			; <UNDEFINED> instruction: 0x000002b9
   1950c:	andeq	r6, r4, r4, lsl #9
   19510:	andeq	r6, r4, ip, ror r4
   19514:	andeq	r0, r0, r6, asr #5
   19518:	andeq	r6, r4, r0, lsr #9
   1951c:	andeq	r6, r4, r4, lsl #7
   19520:	andeq	r6, r4, r8, asr #8
   19524:	push	{r4, r5, lr}
   19528:	sub	sp, sp, #52	; 0x34
   1952c:	add	r4, sp, #40	; 0x28
   19530:	stm	r4, {r0, r1}
   19534:	mov	r0, r4
   19538:	bl	12424 <localtime@plt>
   1953c:	cmp	r0, #0
   19540:	beq	19608 <__assert_fail@plt+0x6e6c>
   19544:	ldr	ip, [r0, #24]
   19548:	cmp	ip, #0
   1954c:	blt	19618 <__assert_fail@plt+0x6e7c>
   19550:	cmp	ip, #6
   19554:	bgt	196b8 <__assert_fail@plt+0x6f1c>
   19558:	ldr	r3, [r0, #16]
   1955c:	cmp	r3, #0
   19560:	blt	196a4 <__assert_fail@plt+0x6f08>
   19564:	cmp	r3, #11
   19568:	bgt	19690 <__assert_fail@plt+0x6ef4>
   1956c:	ldr	lr, [r0, #8]
   19570:	cmp	lr, #0
   19574:	blt	1967c <__assert_fail@plt+0x6ee0>
   19578:	cmp	lr, #23
   1957c:	bgt	19668 <__assert_fail@plt+0x6ecc>
   19580:	ldr	r4, [r0, #4]
   19584:	cmp	r4, #59	; 0x3b
   19588:	bgt	19654 <__assert_fail@plt+0x6eb8>
   1958c:	ldr	r5, [r0]
   19590:	cmp	r5, #61	; 0x3d
   19594:	bgt	19640 <__assert_fail@plt+0x6ea4>
   19598:	ldr	r1, [pc, #300]	; 196cc <__assert_fail@plt+0x6f30>
   1959c:	ldr	r2, [r0, #20]
   195a0:	add	r3, r1, r3, lsl #2
   195a4:	add	r1, r1, ip, lsl #2
   195a8:	ldr	ip, [sp, #44]	; 0x2c
   195ac:	add	r2, r2, #1888	; 0x760
   195b0:	str	ip, [sp, #28]
   195b4:	ldr	r1, [r1, #92]	; 0x5c
   195b8:	ldr	ip, [r3, #44]	; 0x2c
   195bc:	add	r2, r2, #12
   195c0:	str	r2, [sp, #32]
   195c4:	strd	r4, [sp, #20]
   195c8:	str	lr, [sp, #16]
   195cc:	ldr	r2, [pc, #252]	; 196d0 <__assert_fail@plt+0x6f34>
   195d0:	ldr	r0, [r0, #12]
   195d4:	mov	r3, #1024	; 0x400
   195d8:	str	r0, [sp, #12]
   195dc:	stmib	sp, {r1, ip}
   195e0:	str	r2, [sp]
   195e4:	mov	r1, r3
   195e8:	mov	r2, #1
   195ec:	ldr	r0, [pc, #224]	; 196d4 <__assert_fail@plt+0x6f38>
   195f0:	bl	12784 <__snprintf_chk@plt>
   195f4:	cmp	r0, #1024	; 0x400
   195f8:	ldrlt	r0, [pc, #212]	; 196d4 <__assert_fail@plt+0x6f38>
   195fc:	bge	1962c <__assert_fail@plt+0x6e90>
   19600:	add	sp, sp, #52	; 0x34
   19604:	pop	{r4, r5, pc}
   19608:	mov	r2, #64	; 0x40
   1960c:	ldm	r4, {r0, r1}
   19610:	bl	18f70 <__assert_fail@plt+0x67d4>
   19614:	b	19600 <__assert_fail@plt+0x6e64>
   19618:	ldr	r3, [pc, #184]	; 196d8 <__assert_fail@plt+0x6f3c>
   1961c:	mov	r2, #748	; 0x2ec
   19620:	ldr	r1, [pc, #180]	; 196dc <__assert_fail@plt+0x6f40>
   19624:	ldr	r0, [pc, #180]	; 196e0 <__assert_fail@plt+0x6f44>
   19628:	bl	1279c <__assert_fail@plt>
   1962c:	ldr	r3, [pc, #164]	; 196d8 <__assert_fail@plt+0x6f3c>
   19630:	ldr	r2, [pc, #172]	; 196e4 <__assert_fail@plt+0x6f48>
   19634:	ldr	r1, [pc, #160]	; 196dc <__assert_fail@plt+0x6f40>
   19638:	ldr	r0, [pc, #168]	; 196e8 <__assert_fail@plt+0x6f4c>
   1963c:	bl	1279c <__assert_fail@plt>
   19640:	ldr	r3, [pc, #144]	; 196d8 <__assert_fail@plt+0x6f3c>
   19644:	ldr	r2, [pc, #160]	; 196ec <__assert_fail@plt+0x6f50>
   19648:	ldr	r1, [pc, #140]	; 196dc <__assert_fail@plt+0x6f40>
   1964c:	ldr	r0, [pc, #156]	; 196f0 <__assert_fail@plt+0x6f54>
   19650:	bl	1279c <__assert_fail@plt>
   19654:	ldr	r3, [pc, #124]	; 196d8 <__assert_fail@plt+0x6f3c>
   19658:	ldr	r2, [pc, #148]	; 196f4 <__assert_fail@plt+0x6f58>
   1965c:	ldr	r1, [pc, #120]	; 196dc <__assert_fail@plt+0x6f40>
   19660:	ldr	r0, [pc, #144]	; 196f8 <__assert_fail@plt+0x6f5c>
   19664:	bl	1279c <__assert_fail@plt>
   19668:	ldr	r3, [pc, #104]	; 196d8 <__assert_fail@plt+0x6f3c>
   1966c:	ldr	r2, [pc, #136]	; 196fc <__assert_fail@plt+0x6f60>
   19670:	ldr	r1, [pc, #100]	; 196dc <__assert_fail@plt+0x6f40>
   19674:	ldr	r0, [pc, #132]	; 19700 <__assert_fail@plt+0x6f64>
   19678:	bl	1279c <__assert_fail@plt>
   1967c:	ldr	r3, [pc, #84]	; 196d8 <__assert_fail@plt+0x6f3c>
   19680:	mov	r2, #752	; 0x2f0
   19684:	ldr	r1, [pc, #80]	; 196dc <__assert_fail@plt+0x6f40>
   19688:	ldr	r0, [pc, #116]	; 19704 <__assert_fail@plt+0x6f68>
   1968c:	bl	1279c <__assert_fail@plt>
   19690:	ldr	r3, [pc, #64]	; 196d8 <__assert_fail@plt+0x6f3c>
   19694:	ldr	r2, [pc, #108]	; 19708 <__assert_fail@plt+0x6f6c>
   19698:	ldr	r1, [pc, #60]	; 196dc <__assert_fail@plt+0x6f40>
   1969c:	ldr	r0, [pc, #104]	; 1970c <__assert_fail@plt+0x6f70>
   196a0:	bl	1279c <__assert_fail@plt>
   196a4:	ldr	r3, [pc, #44]	; 196d8 <__assert_fail@plt+0x6f3c>
   196a8:	ldr	r2, [pc, #96]	; 19710 <__assert_fail@plt+0x6f74>
   196ac:	ldr	r1, [pc, #40]	; 196dc <__assert_fail@plt+0x6f40>
   196b0:	ldr	r0, [pc, #92]	; 19714 <__assert_fail@plt+0x6f78>
   196b4:	bl	1279c <__assert_fail@plt>
   196b8:	ldr	r3, [pc, #24]	; 196d8 <__assert_fail@plt+0x6f3c>
   196bc:	ldr	r2, [pc, #84]	; 19718 <__assert_fail@plt+0x6f7c>
   196c0:	ldr	r1, [pc, #20]	; 196dc <__assert_fail@plt+0x6f40>
   196c4:	ldr	r0, [pc, #80]	; 1971c <__assert_fail@plt+0x6f80>
   196c8:	bl	1279c <__assert_fail@plt>
   196cc:	andeq	r6, r4, r4, lsl #7
   196d0:	andeq	r6, r4, ip, lsr #11
   196d4:	andeq	ip, r5, r8, lsr #17
   196d8:	andeq	r6, r4, r0, lsr #7
   196dc:	andeq	r6, r4, r0, asr #8
   196e0:	andeq	r6, r4, ip, lsl #10
   196e4:	andeq	r0, r0, r1, lsl #6
   196e8:	ldrdeq	r6, [r4], -r4
   196ec:	strdeq	r0, [r0], -r3
   196f0:	muleq	r4, r8, r5
   196f4:	strdeq	r0, [r0], -r2
   196f8:	andeq	r6, r4, r4, lsl #11
   196fc:	strdeq	r0, [r0], -r1
   19700:	andeq	r6, r4, r0, ror r5
   19704:	andeq	r6, r4, ip, asr r5
   19708:	andeq	r0, r0, pc, ror #5
   1970c:	andeq	r6, r4, r8, asr #10
   19710:	andeq	r0, r0, lr, ror #5
   19714:	andeq	r6, r4, r4, lsr r5
   19718:	andeq	r0, r0, sp, ror #5
   1971c:	andeq	r6, r4, r0, lsr #10
   19720:	push	{r1, r2, r3}
   19724:	push	{r4, r5, lr}
   19728:	sub	sp, sp, #8
   1972c:	ldr	r4, [pc, #100]	; 19798 <__assert_fail@plt+0x6ffc>
   19730:	add	ip, sp, #24
   19734:	mov	r5, r0
   19738:	ldr	r1, [r4]
   1973c:	ldr	r0, [r0, #4]
   19740:	str	r1, [sp, #4]
   19744:	mov	r3, ip
   19748:	ldr	r2, [sp, #20]
   1974c:	mov	r1, #1
   19750:	str	ip, [sp]
   19754:	bl	1240c <__vfprintf_chk@plt>
   19758:	cmp	r0, #0
   1975c:	blt	19780 <__assert_fail@plt+0x6fe4>
   19760:	ldr	r2, [sp, #4]
   19764:	ldr	r3, [r4]
   19768:	cmp	r2, r3
   1976c:	bne	19794 <__assert_fail@plt+0x6ff8>
   19770:	add	sp, sp, #8
   19774:	pop	{r4, r5, lr}
   19778:	add	sp, sp, #12
   1977c:	bx	lr
   19780:	bl	124d8 <__errno_location@plt>
   19784:	ldr	r1, [r5, #8]
   19788:	ldr	r0, [r0]
   1978c:	bl	18c50 <__assert_fail@plt+0x64b4>
   19790:	b	19760 <__assert_fail@plt+0x6fc4>
   19794:	bl	12244 <__stack_chk_fail@plt>
   19798:	andeq	fp, r5, r0, ror #24
   1979c:	cmp	r0, #32768	; 0x8000
   197a0:	beq	197e4 <__assert_fail@plt+0x7048>
   197a4:	cmp	r0, #16384	; 0x4000
   197a8:	beq	197f4 <__assert_fail@plt+0x7058>
   197ac:	cmp	r0, #40960	; 0xa000
   197b0:	beq	197ec <__assert_fail@plt+0x7050>
   197b4:	cmp	r0, #49152	; 0xc000
   197b8:	beq	197fc <__assert_fail@plt+0x7060>
   197bc:	cmp	r0, #24576	; 0x6000
   197c0:	beq	19804 <__assert_fail@plt+0x7068>
   197c4:	cmp	r0, #8192	; 0x2000
   197c8:	beq	1980c <__assert_fail@plt+0x7070>
   197cc:	ldr	r3, [pc, #64]	; 19814 <__assert_fail@plt+0x7078>
   197d0:	ldr	r2, [pc, #64]	; 19818 <__assert_fail@plt+0x707c>
   197d4:	cmp	r0, #4096	; 0x1000
   197d8:	movne	r0, r3
   197dc:	moveq	r0, r2
   197e0:	bx	lr
   197e4:	ldr	r0, [pc, #48]	; 1981c <__assert_fail@plt+0x7080>
   197e8:	bx	lr
   197ec:	ldr	r0, [pc, #44]	; 19820 <__assert_fail@plt+0x7084>
   197f0:	bx	lr
   197f4:	ldr	r0, [pc, #40]	; 19824 <__assert_fail@plt+0x7088>
   197f8:	bx	lr
   197fc:	ldr	r0, [pc, #36]	; 19828 <__assert_fail@plt+0x708c>
   19800:	bx	lr
   19804:	ldr	r0, [pc, #32]	; 1982c <__assert_fail@plt+0x7090>
   19808:	bx	lr
   1980c:	ldr	r0, [pc, #28]	; 19830 <__assert_fail@plt+0x7094>
   19810:	bx	lr
   19814:	andeq	r6, r4, r8, ror #11
   19818:	andeq	r4, r4, r0, ror #31
   1981c:	andeq	r8, r4, r0, ror r6
   19820:	andeq	r4, r4, ip, lsr #22
   19824:	andeq	r9, r4, ip, lsr #5
   19828:	andeq	r7, r4, r0, lsr #21
   1982c:	muleq	r4, r0, r7
   19830:	andeq	sl, r4, r8, lsl #14
   19834:	push	{r4, lr}
   19838:	sub	sp, sp, #8
   1983c:	mov	r3, r1
   19840:	str	r2, [sp]
   19844:	mov	r4, r0
   19848:	ldrb	r2, [r0, #12]
   1984c:	ldr	r1, [r0, #16]
   19850:	ldr	r0, [r0, #4]
   19854:	bl	20b84 <__assert_fail@plt+0xe3e8>
   19858:	cmp	r0, #0
   1985c:	blt	19868 <__assert_fail@plt+0x70cc>
   19860:	add	sp, sp, #8
   19864:	pop	{r4, pc}
   19868:	bl	124d8 <__errno_location@plt>
   1986c:	ldr	r1, [r4, #8]
   19870:	ldr	r0, [r0]
   19874:	add	sp, sp, #8
   19878:	pop	{r4, lr}
   1987c:	b	18c50 <__assert_fail@plt+0x64b4>
   19880:	push	{r4, lr}
   19884:	mov	r4, r0
   19888:	bl	124d8 <__errno_location@plt>
   1988c:	ldr	r1, [r4]
   19890:	pop	{r4, lr}
   19894:	ldr	r0, [r0]
   19898:	b	18c50 <__assert_fail@plt+0x64b4>
   1989c:	push	{r4, r5, r6, r7, r8, r9, lr}
   198a0:	vpush	{d8}
   198a4:	ldr	r5, [pc, #2332]	; 1a1c8 <__assert_fail@plt+0x7a2c>
   198a8:	mov	r4, r1
   198ac:	ldr	r1, [r1]
   198b0:	sub	sp, sp, #796	; 0x31c
   198b4:	mov	r6, r0
   198b8:	ldr	r0, [r5]
   198bc:	cmp	r1, #1
   198c0:	str	r0, [sp, #788]	; 0x314
   198c4:	beq	19bb4 <__assert_fail@plt+0x7418>
   198c8:	cmp	r1, #0
   198cc:	beq	19b88 <__assert_fail@plt+0x73ec>
   198d0:	cmp	r1, #2
   198d4:	bne	19b6c <__assert_fail@plt+0x73d0>
   198d8:	mov	r7, r3
   198dc:	ldrb	r3, [r4, #4]
   198e0:	mov	r8, r2
   198e4:	cmp	r3, #121	; 0x79
   198e8:	ldrls	pc, [pc, r3, lsl #2]
   198ec:	b	19b6c <__assert_fail@plt+0x73d0>
   198f0:	andeq	sl, r1, ip, ror r0
   198f4:	andeq	r9, r1, ip, ror #22
   198f8:	andeq	r9, r1, ip, ror #22
   198fc:	andeq	r9, r1, ip, ror #22
   19900:	andeq	r9, r1, ip, ror #22
   19904:	andeq	r9, r1, ip, ror #22
   19908:	andeq	r9, r1, ip, ror #22
   1990c:	andeq	r9, r1, ip, ror #22
   19910:	andeq	r9, r1, ip, ror #22
   19914:	andeq	r9, r1, ip, ror #22
   19918:	andeq	r9, r1, ip, ror #22
   1991c:	andeq	r9, r1, ip, ror #22
   19920:	andeq	r9, r1, ip, ror #22
   19924:	andeq	r9, r1, ip, ror #22
   19928:	andeq	r9, r1, ip, ror #22
   1992c:	andeq	r9, r1, ip, ror #22
   19930:	andeq	r9, r1, ip, ror #22
   19934:	andeq	r9, r1, ip, ror #22
   19938:	andeq	r9, r1, ip, ror #22
   1993c:	andeq	r9, r1, ip, ror #22
   19940:	andeq	r9, r1, ip, ror #22
   19944:	andeq	r9, r1, ip, ror #22
   19948:	andeq	r9, r1, ip, ror #22
   1994c:	andeq	r9, r1, ip, ror #22
   19950:	andeq	r9, r1, ip, ror #22
   19954:	andeq	r9, r1, ip, ror #22
   19958:	andeq	r9, r1, ip, ror #22
   1995c:	andeq	r9, r1, ip, ror #22
   19960:	andeq	r9, r1, ip, ror #22
   19964:	andeq	r9, r1, ip, ror #22
   19968:	andeq	r9, r1, ip, ror #22
   1996c:	andeq	r9, r1, ip, ror #22
   19970:	andeq	r9, r1, ip, ror #22
   19974:	andeq	r9, r1, ip, ror #22
   19978:	andeq	r9, r1, ip, ror #22
   1997c:	andeq	r9, r1, ip, ror #22
   19980:	andeq	r9, r1, ip, ror #22
   19984:	andeq	r9, r1, r8, lsl #23
   19988:	andeq	r9, r1, ip, ror #22
   1998c:	andeq	r9, r1, ip, ror #22
   19990:	andeq	r9, r1, ip, ror #22
   19994:	andeq	r9, r1, ip, ror #22
   19998:	andeq	r9, r1, ip, ror #22
   1999c:	andeq	r9, r1, ip, ror #22
   199a0:	andeq	r9, r1, ip, ror #22
   199a4:	andeq	r9, r1, ip, ror #22
   199a8:	andeq	r9, r1, ip, ror #22
   199ac:	andeq	r9, r1, ip, ror #22
   199b0:	andeq	r9, r1, ip, ror #22
   199b4:	andeq	r9, r1, ip, ror #22
   199b8:	andeq	r9, r1, ip, ror #22
   199bc:	andeq	r9, r1, ip, ror #22
   199c0:	andeq	r9, r1, ip, ror #22
   199c4:	andeq	r9, r1, ip, ror #22
   199c8:	andeq	r9, r1, ip, ror #22
   199cc:	andeq	r9, r1, ip, ror #22
   199d0:	andeq	r9, r1, ip, ror #22
   199d4:	andeq	r9, r1, ip, ror #22
   199d8:	andeq	r9, r1, ip, ror #22
   199dc:	andeq	r9, r1, ip, ror #22
   199e0:	andeq	r9, r1, ip, ror #22
   199e4:	andeq	r9, r1, ip, ror #22
   199e8:	andeq	r9, r1, ip, ror #22
   199ec:	andeq	r9, r1, ip, ror #22
   199f0:	andeq	r9, r1, ip, ror #22
   199f4:	andeq	r9, r1, ip, ror #22
   199f8:	andeq	r9, r1, ip, ror #22
   199fc:	andeq	r9, r1, ip, ror #22
   19a00:	andeq	r9, r1, r4, asr pc
   19a04:	andeq	r9, r1, ip, ror #22
   19a08:	andeq	r9, r1, ip, ror #27
   19a0c:	andeq	r9, r1, r0, lsl ip
   19a10:	strdeq	r9, [r1], -ip
   19a14:	andeq	r9, r1, ip, ror #22
   19a18:	andeq	r9, r1, ip, ror #22
   19a1c:	andeq	r9, r1, ip, ror #22
   19a20:	andeq	r9, r1, ip, ror #22
   19a24:	andeq	r9, r1, ip, lsr #29
   19a28:	andeq	r9, r1, ip, ror #22
   19a2c:	andeq	r9, r1, ip, ror #22
   19a30:			; <UNDEFINED> instruction: 0x00019fbc
   19a34:	andeq	r9, r1, ip, ror #22
   19a38:	andeq	r9, r1, ip, ror #22
   19a3c:	andeq	r9, r1, r8, ror pc
   19a40:	andeq	r9, r1, ip, ror #22
   19a44:	andeq	r9, r1, ip, asr #24
   19a48:	andeq	r9, r1, ip, ror #22
   19a4c:	andeq	r9, r1, ip, ror #22
   19a50:	andeq	r9, r1, ip, ror #22
   19a54:	ldrdeq	r9, [r1], -r8
   19a58:	andeq	sl, r1, ip, lsr r0
   19a5c:	andeq	r9, r1, ip, ror #22
   19a60:	andeq	r9, r1, ip, ror #22
   19a64:	andeq	r9, r1, ip, ror #22
   19a68:	andeq	r9, r1, ip, ror #22
   19a6c:	andeq	r9, r1, ip, ror #22
   19a70:	andeq	r9, r1, ip, ror #22
   19a74:	strdeq	r9, [r1], -r0
   19a78:	andeq	r9, r1, r0, lsr pc
   19a7c:	andeq	r9, r1, r4, lsr #30
   19a80:	andeq	r9, r1, ip, lsl #30
   19a84:	andeq	r9, r1, ip, ror #22
   19a88:	andeq	r9, r1, r8, lsr #25
   19a8c:	andeq	r9, r1, r0, lsl #24
   19a90:	andeq	r9, r1, r8, asr sp
   19a94:	andeq	r9, r1, r4, lsr sp
   19a98:	andeq	r9, r1, ip, ror #22
   19a9c:	andeq	r9, r1, r8, lsl #26
   19aa0:	andeq	r9, r1, ip, ror lr
   19aa4:	andeq	r9, r1, r0, ror #28
   19aa8:	andeq	r9, r1, r4, ror #29
   19aac:	andeq	r9, r1, ip, ror #22
   19ab0:	ldrdeq	r9, [r1], -r4
   19ab4:	andeq	r9, r1, ip, ror #22
   19ab8:	andeq	r9, r1, ip, ror #22
   19abc:	andeq	r9, r1, ip, lsr lr
   19ac0:	andeq	r9, r1, r0, lsl lr
   19ac4:	andeq	r9, r1, r4, ror ip
   19ac8:	andeq	r9, r1, ip, ror #22
   19acc:	andeq	r9, r1, ip, ror #22
   19ad0:	andeq	r9, r1, ip, ror #22
   19ad4:	andeq	r9, r1, r8, ror #25
   19ad8:	ldr	r0, [r7, #16]
   19adc:	and	r0, r0, #61440	; 0xf000
   19ae0:	cmp	r0, #40960	; 0xa000
   19ae4:	bne	19cf0 <__assert_fail@plt+0x7554>
   19ae8:	ldr	r3, [pc, #1756]	; 1a1cc <__assert_fail@plt+0x7a30>
   19aec:	mov	r2, #0
   19af0:	str	r2, [sp]
   19af4:	mov	r0, #3
   19af8:	ldr	r2, [r3, #12]
   19afc:	ldr	r1, [r3, #16]
   19b00:	add	r3, sp, #32
   19b04:	bl	122b0 <__fxstatat64@plt>
   19b08:	cmp	r0, #0
   19b0c:	beq	1a164 <__assert_fail@plt+0x79c8>
   19b10:	bl	124d8 <__errno_location@plt>
   19b14:	ldr	r1, [r4, #8]
   19b18:	ldr	r3, [r0]
   19b1c:	mov	r7, r0
   19b20:	cmp	r3, #20
   19b24:	cmpne	r3, #2
   19b28:	mov	r0, r6
   19b2c:	moveq	r4, #1
   19b30:	movne	r4, #0
   19b34:	beq	1a16c <__assert_fail@plt+0x79d0>
   19b38:	cmp	r3, #40	; 0x28
   19b3c:	beq	1a198 <__assert_fail@plt+0x79fc>
   19b40:	ldr	r2, [pc, #1672]	; 1a1d0 <__assert_fail@plt+0x7a34>
   19b44:	bl	19720 <__assert_fail@plt+0x6f84>
   19b48:	mov	r1, r8
   19b4c:	mov	r0, r4
   19b50:	ldr	r6, [r7]
   19b54:	bl	18bf4 <__assert_fail@plt+0x6458>
   19b58:	mov	r1, r6
   19b5c:	ldr	r2, [pc, #1648]	; 1a1d4 <__assert_fail@plt+0x7a38>
   19b60:	mov	r3, r0
   19b64:	mov	r0, r4
   19b68:	bl	12388 <error@plt>
   19b6c:	ldr	r2, [sp, #788]	; 0x314
   19b70:	ldr	r3, [r5]
   19b74:	cmp	r2, r3
   19b78:	bne	1a194 <__assert_fail@plt+0x79f8>
   19b7c:	add	sp, sp, #796	; 0x31c
   19b80:	vpop	{d8}
   19b84:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19b88:	ldr	r7, [r4, #12]
   19b8c:	ldr	r0, [r4, #8]
   19b90:	mov	r2, r7
   19b94:	ldr	r3, [r6, #4]
   19b98:	mov	r1, #1
   19b9c:	bl	122f8 <fwrite@plt>
   19ba0:	cmp	r7, r0
   19ba4:	bls	19b6c <__assert_fail@plt+0x73d0>
   19ba8:	add	r0, r6, #8
   19bac:	bl	19880 <__assert_fail@plt+0x70e4>
   19bb0:	b	19b6c <__assert_fail@plt+0x73d0>
   19bb4:	ldr	r7, [r4, #12]
   19bb8:	ldr	r0, [r4, #8]
   19bbc:	mov	r2, r7
   19bc0:	ldr	r3, [r6, #4]
   19bc4:	bl	122f8 <fwrite@plt>
   19bc8:	cmp	r7, r0
   19bcc:	bhi	19bf4 <__assert_fail@plt+0x7458>
   19bd0:	ldr	r0, [r6, #4]
   19bd4:	bl	2f858 <__assert_fail@plt+0x1d0bc>
   19bd8:	cmp	r0, #0
   19bdc:	beq	19b6c <__assert_fail@plt+0x73d0>
   19be0:	bl	124d8 <__errno_location@plt>
   19be4:	ldr	r1, [r6, #8]
   19be8:	ldr	r0, [r0]
   19bec:	bl	18c50 <__assert_fail@plt+0x64b4>
   19bf0:	b	19b6c <__assert_fail@plt+0x73d0>
   19bf4:	add	r0, r6, #8
   19bf8:	bl	19880 <__assert_fail@plt+0x70e4>
   19bfc:	b	19bd0 <__assert_fail@plt+0x7434>
   19c00:	ldr	r0, [r7, #28]
   19c04:	bl	1276c <getgrgid@plt>
   19c08:	subs	r3, r0, #0
   19c0c:	bne	19c84 <__assert_fail@plt+0x74e8>
   19c10:	mov	r3, #0
   19c14:	mov	r8, #1
   19c18:	mov	r9, #0
   19c1c:	mov	r1, r3
   19c20:	add	r2, sp, #136	; 0x88
   19c24:	ldr	r4, [r4, #8]
   19c28:	ldr	r0, [r7, #28]
   19c2c:	strd	r8, [sp, #8]
   19c30:	strd	r8, [sp]
   19c34:	bl	22bd8 <__assert_fail@plt+0x1043c>
   19c38:	mov	r1, r4
   19c3c:	mov	r2, r0
   19c40:	mov	r0, r6
   19c44:	bl	19720 <__assert_fail@plt+0x6f84>
   19c48:	b	19b6c <__assert_fail@plt+0x73d0>
   19c4c:	mov	r8, #1
   19c50:	mov	r9, #0
   19c54:	mov	r3, #0
   19c58:	ldr	r4, [r4, #8]
   19c5c:	ldr	r0, [r7, #24]
   19c60:	mov	r1, r3
   19c64:	strd	r8, [sp, #8]
   19c68:	strd	r8, [sp]
   19c6c:	add	r2, sp, #136	; 0x88
   19c70:	b	19c34 <__assert_fail@plt+0x7498>
   19c74:	ldr	r0, [r7, #24]
   19c78:	bl	120f4 <getpwuid@plt>
   19c7c:	subs	r3, r0, #0
   19c80:	beq	19c4c <__assert_fail@plt+0x74b0>
   19c84:	ldr	r1, [r4, #8]
   19c88:	ldr	r2, [r4, #12]
   19c8c:	mov	ip, #115	; 0x73
   19c90:	mov	r0, r6
   19c94:	strb	ip, [r1, r2]
   19c98:	ldr	r2, [r3]
   19c9c:	ldr	r1, [r4, #8]
   19ca0:	bl	19720 <__assert_fail@plt+0x6f84>
   19ca4:	b	19b6c <__assert_fail@plt+0x73d0>
   19ca8:	mov	r0, r2
   19cac:	bl	216b8 <__assert_fail@plt+0xef1c>
   19cb0:	ldr	r1, [r4, #8]
   19cb4:	mov	r7, r0
   19cb8:	mov	r2, r0
   19cbc:	mov	r0, r6
   19cc0:	bl	19834 <__assert_fail@plt+0x7098>
   19cc4:	ldr	r2, [sp, #788]	; 0x314
   19cc8:	ldr	r3, [r5]
   19ccc:	cmp	r2, r3
   19cd0:	bne	1a194 <__assert_fail@plt+0x79f8>
   19cd4:	mov	r0, r7
   19cd8:	add	sp, sp, #796	; 0x31c
   19cdc:	vpop	{d8}
   19ce0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   19ce4:	b	12154 <free@plt>
   19ce8:	ldr	r0, [r7, #16]
   19cec:	and	r0, r0, #61440	; 0xf000
   19cf0:	bl	1979c <__assert_fail@plt+0x7000>
   19cf4:	ldr	r1, [r4, #8]
   19cf8:	mov	r2, r0
   19cfc:	mov	r0, r6
   19d00:	bl	19720 <__assert_fail@plt+0x6f84>
   19d04:	b	19b6c <__assert_fail@plt+0x73d0>
   19d08:	mov	r0, #1024	; 0x400
   19d0c:	mov	r1, #0
   19d10:	mov	r2, #512	; 0x200
   19d14:	mov	r3, #0
   19d18:	ldr	r4, [r4, #8]
   19d1c:	strd	r2, [sp]
   19d20:	strd	r0, [sp, #8]
   19d24:	mov	r3, #0
   19d28:	add	r2, sp, #136	; 0x88
   19d2c:	ldrd	r0, [r7, #64]	; 0x40
   19d30:	b	19c34 <__assert_fail@plt+0x7498>
   19d34:	mov	r2, #1
   19d38:	mov	r3, #0
   19d3c:	ldr	r4, [r4, #8]
   19d40:	strd	r2, [sp, #8]
   19d44:	strd	r2, [sp]
   19d48:	mov	r3, #0
   19d4c:	add	r2, sp, #136	; 0x88
   19d50:	ldrd	r0, [r7, #96]	; 0x60
   19d54:	b	19c34 <__assert_fail@plt+0x7498>
   19d58:	mov	r0, r2
   19d5c:	bl	12238 <strdup@plt>
   19d60:	mov	r7, r0
   19d64:	bl	1249c <strlen@plt>
   19d68:	sub	r0, r0, #1
   19d6c:	adds	r2, r7, r0
   19d70:	bcs	19dc0 <__assert_fail@plt+0x7624>
   19d74:	ldrb	r3, [r7, r0]
   19d78:	cmp	r3, #47	; 0x2f
   19d7c:	bne	19da8 <__assert_fail@plt+0x760c>
   19d80:	sub	r3, r2, #1
   19d84:	sub	r0, r7, #1
   19d88:	b	19d9c <__assert_fail@plt+0x7600>
   19d8c:	ldrb	r1, [r2]
   19d90:	sub	r3, r3, #1
   19d94:	cmp	r1, #47	; 0x2f
   19d98:	bne	19da8 <__assert_fail@plt+0x760c>
   19d9c:	cmp	r0, r3
   19da0:	mov	r2, r3
   19da4:	bne	19d8c <__assert_fail@plt+0x75f0>
   19da8:	cmp	r7, r2
   19dac:	bcs	19dc0 <__assert_fail@plt+0x7624>
   19db0:	ldrb	r3, [r2, #1]
   19db4:	cmp	r3, #47	; 0x2f
   19db8:	moveq	r3, #0
   19dbc:	strbeq	r3, [r2, #1]
   19dc0:	mov	r1, #47	; 0x2f
   19dc4:	mov	r0, r7
   19dc8:	bl	1261c <strrchr@plt>
   19dcc:	ldr	r1, [r4, #8]
   19dd0:	subs	r3, r0, #0
   19dd4:	beq	1a154 <__assert_fail@plt+0x79b8>
   19dd8:	mov	r2, #0
   19ddc:	strb	r2, [r3]
   19de0:	mov	r0, r6
   19de4:	mov	r2, r7
   19de8:	b	19cc0 <__assert_fail@plt+0x7524>
   19dec:	mov	r1, r2
   19df0:	mov	r0, r7
   19df4:	ldr	r4, [r4, #8]
   19df8:	bl	1acec <__assert_fail@plt+0x8550>
   19dfc:	mov	r1, r4
   19e00:	mov	r2, r0
   19e04:	mov	r0, r6
   19e08:	bl	19834 <__assert_fail@plt+0x7098>
   19e0c:	b	19b6c <__assert_fail@plt+0x73d0>
   19e10:	add	r7, r7, #80	; 0x50
   19e14:	add	r3, sp, #32
   19e18:	ldm	r7, {r0, r1}
   19e1c:	ldr	r4, [r4, #8]
   19e20:	stm	r3, {r0, r1}
   19e24:	bl	19524 <__assert_fail@plt+0x6d88>
   19e28:	mov	r1, r4
   19e2c:	mov	r2, r0
   19e30:	mov	r0, r6
   19e34:	bl	19720 <__assert_fail@plt+0x6f84>
   19e38:	b	19b6c <__assert_fail@plt+0x73d0>
   19e3c:	mov	r2, #1
   19e40:	mov	r3, #0
   19e44:	ldr	r4, [r4, #8]
   19e48:	strd	r2, [sp, #8]
   19e4c:	strd	r2, [sp]
   19e50:	mov	r3, #0
   19e54:	add	r2, sp, #136	; 0x88
   19e58:	ldrd	r0, [r7, #48]	; 0x30
   19e5c:	b	19c34 <__assert_fail@plt+0x7498>
   19e60:	ldr	r2, [r7, #16]
   19e64:	ldr	r1, [r4, #8]
   19e68:	mov	r0, r6
   19e6c:	lsl	r2, r2, #20
   19e70:	lsr	r2, r2, #20
   19e74:	bl	19720 <__assert_fail@plt+0x6f84>
   19e78:	b	19b6c <__assert_fail@plt+0x73d0>
   19e7c:	ldr	r3, [r7, #16]
   19e80:	and	r3, r3, #61440	; 0xf000
   19e84:	cmp	r3, #40960	; 0xa000
   19e88:	beq	1a0f8 <__assert_fail@plt+0x795c>
   19e8c:	ldr	r1, [r4, #8]
   19e90:	mov	r0, r6
   19e94:	ldr	r2, [pc, #828]	; 1a1d8 <__assert_fail@plt+0x7a3c>
   19e98:	bl	19834 <__assert_fail@plt+0x7098>
   19e9c:	mov	r7, #0
   19ea0:	mov	r0, r7
   19ea4:	bl	12154 <free@plt>
   19ea8:	b	19b6c <__assert_fail@plt+0x73d0>
   19eac:	mov	r0, r7
   19eb0:	add	r1, sp, #136	; 0x88
   19eb4:	bl	21a54 <__assert_fail@plt+0xf2b8>
   19eb8:	mov	r3, #0
   19ebc:	add	r2, sp, #136	; 0x88
   19ec0:	ldr	r1, [r4, #8]
   19ec4:	mov	r0, r6
   19ec8:	strb	r3, [sp, #146]	; 0x92
   19ecc:	bl	19720 <__assert_fail@plt+0x6f84>
   19ed0:	b	19b6c <__assert_fail@plt+0x73d0>
   19ed4:	ldr	r1, [r4, #8]
   19ed8:	mov	r0, r6
   19edc:	bl	19834 <__assert_fail@plt+0x7098>
   19ee0:	b	19b6c <__assert_fail@plt+0x73d0>
   19ee4:	mov	r8, #1
   19ee8:	mov	r9, #0
   19eec:	mov	r3, #0
   19ef0:	ldr	r4, [r4, #8]
   19ef4:	ldr	r0, [r7, #20]
   19ef8:	mov	r1, r3
   19efc:	strd	r8, [sp, #8]
   19f00:	strd	r8, [sp]
   19f04:	add	r2, sp, #136	; 0x88
   19f08:	b	19c34 <__assert_fail@plt+0x7498>
   19f0c:	ldr	r3, [pc, #696]	; 1a1cc <__assert_fail@plt+0x7a30>
   19f10:	ldr	r1, [r4, #8]
   19f14:	mov	r0, r6
   19f18:	ldr	r2, [r3]
   19f1c:	bl	19720 <__assert_fail@plt+0x6f84>
   19f20:	b	19b6c <__assert_fail@plt+0x73d0>
   19f24:	add	r7, r7, #88	; 0x58
   19f28:	add	r3, sp, #24
   19f2c:	b	19e18 <__assert_fail@plt+0x767c>
   19f30:	mov	r2, #512	; 0x200
   19f34:	mov	r3, #0
   19f38:	ldr	r4, [r4, #8]
   19f3c:	strd	r2, [sp, #8]
   19f40:	strd	r2, [sp]
   19f44:	mov	r3, #0
   19f48:	add	r2, sp, #136	; 0x88
   19f4c:	ldrd	r0, [r7, #64]	; 0x40
   19f50:	b	19c34 <__assert_fail@plt+0x7498>
   19f54:	mov	r2, #1
   19f58:	mov	r3, #0
   19f5c:	ldr	r4, [r4, #8]
   19f60:	strd	r2, [sp, #8]
   19f64:	strd	r2, [sp]
   19f68:	mov	r3, #0
   19f6c:	add	r2, sp, #136	; 0x88
   19f70:	ldrd	r0, [r7]
   19f74:	b	19c34 <__assert_fail@plt+0x7498>
   19f78:	ldrd	r8, [r7, #48]	; 0x30
   19f7c:	ldr	r4, [r4, #8]
   19f80:	ldrd	r0, [r7, #64]	; 0x40
   19f84:	orrs	r3, r8, r9
   19f88:	bne	1a124 <__assert_fail@plt+0x7988>
   19f8c:	orrs	r3, r0, r1
   19f90:	beq	1a14c <__assert_fail@plt+0x79b0>
   19f94:	vldr	d7, [pc, #524]	; 1a1a8 <__assert_fail@plt+0x7a0c>
   19f98:	vldr	d6, [pc, #528]	; 1a1b0 <__assert_fail@plt+0x7a14>
   19f9c:	cmp	r0, #0
   19fa0:	sbcs	r3, r1, #0
   19fa4:	vmovge.f64	d7, d6
   19fa8:	mov	r1, r4
   19fac:	mov	r0, r6
   19fb0:	vmov	r2, r3, d7
   19fb4:	bl	19720 <__assert_fail@plt+0x6f84>
   19fb8:	b	19b6c <__assert_fail@plt+0x73d0>
   19fbc:	ldr	r3, [pc, #520]	; 1a1cc <__assert_fail@plt+0x7a30>
   19fc0:	ldr	r2, [r3]
   19fc4:	cmp	r2, #0
   19fc8:	ble	1a0a0 <__assert_fail@plt+0x7904>
   19fcc:	ldr	r3, [r3, #20]
   19fd0:	add	r2, r8, r3
   19fd4:	ldrb	r3, [r8, r3]
   19fd8:	cmp	r3, #47	; 0x2f
   19fdc:	addeq	r2, r2, #1
   19fe0:	ldr	r1, [r4, #8]
   19fe4:	mov	r0, r6
   19fe8:	bl	19834 <__assert_fail@plt+0x7098>
   19fec:	b	19b6c <__assert_fail@plt+0x73d0>
   19ff0:	add	r7, r7, #72	; 0x48
   19ff4:	add	r3, sp, #16
   19ff8:	b	19e18 <__assert_fail@plt+0x767c>
   19ffc:	ldr	r9, [pc, #456]	; 1a1cc <__assert_fail@plt+0x7a30>
   1a000:	ldr	r0, [r9, #20]
   1a004:	add	r0, r0, #1
   1a008:	bl	2df04 <__assert_fail@plt+0x1b768>
   1a00c:	ldr	r9, [r9, #20]
   1a010:	mov	r1, r8
   1a014:	mov	r2, r9
   1a018:	mov	r7, r0
   1a01c:	bl	121a8 <memcpy@plt>
   1a020:	mov	r3, #0
   1a024:	ldr	r1, [r4, #8]
   1a028:	mov	r0, r6
   1a02c:	mov	r2, r7
   1a030:	strb	r3, [r7, r9]
   1a034:	bl	19720 <__assert_fail@plt+0x6f84>
   1a038:	b	19cc4 <__assert_fail@plt+0x7528>
   1a03c:	ldr	r7, [pc, #392]	; 1a1cc <__assert_fail@plt+0x7a30>
   1a040:	ldr	r3, [pc, #404]	; 1a1dc <__assert_fail@plt+0x7a40>
   1a044:	add	r2, sp, #32
   1a048:	ldr	r1, [r7, #12]
   1a04c:	ldr	r0, [r7, #16]
   1a050:	ldr	r3, [r3, #64]	; 0x40
   1a054:	blx	r3
   1a058:	ldr	r1, [r4, #8]
   1a05c:	cmp	r0, #0
   1a060:	mov	r0, r6
   1a064:	blt	1a0a8 <__assert_fail@plt+0x790c>
   1a068:	ldr	r2, [sp, #32]
   1a06c:	bl	19720 <__assert_fail@plt+0x6f84>
   1a070:	ldr	r0, [sp, #32]
   1a074:	bl	126c4 <freecon@plt>
   1a078:	b	19b6c <__assert_fail@plt+0x73d0>
   1a07c:	mov	r2, #5
   1a080:	ldr	r1, [pc, #344]	; 1a1e0 <__assert_fail@plt+0x7a44>
   1a084:	mov	r0, #0
   1a088:	bl	1222c <dcgettext@plt>
   1a08c:	ldr	r3, [pc, #336]	; 1a1e4 <__assert_fail@plt+0x7a48>
   1a090:	mov	r1, #0
   1a094:	mov	r2, r0
   1a098:	mov	r0, #1
   1a09c:	bl	12388 <error@plt>
   1a0a0:	ldr	r2, [pc, #304]	; 1a1d8 <__assert_fail@plt+0x7a3c>
   1a0a4:	b	19fe0 <__assert_fail@plt+0x7844>
   1a0a8:	ldr	r2, [pc, #296]	; 1a1d8 <__assert_fail@plt+0x7a3c>
   1a0ac:	bl	19720 <__assert_fail@plt+0x6f84>
   1a0b0:	bl	124d8 <__errno_location@plt>
   1a0b4:	mov	r2, #5
   1a0b8:	ldr	r1, [pc, #296]	; 1a1e8 <__assert_fail@plt+0x7a4c>
   1a0bc:	ldr	r4, [r0]
   1a0c0:	mov	r0, #0
   1a0c4:	bl	1222c <dcgettext@plt>
   1a0c8:	mov	r1, r8
   1a0cc:	mov	r6, r0
   1a0d0:	mov	r0, #0
   1a0d4:	bl	18bf4 <__assert_fail@plt+0x6458>
   1a0d8:	mov	r2, r6
   1a0dc:	mov	r1, r4
   1a0e0:	mov	r3, r0
   1a0e4:	mov	r0, #0
   1a0e8:	bl	12388 <error@plt>
   1a0ec:	mov	r3, #1
   1a0f0:	str	r3, [r7, #28]
   1a0f4:	b	19b6c <__assert_fail@plt+0x73d0>
   1a0f8:	ldr	r9, [pc, #204]	; 1a1cc <__assert_fail@plt+0x7a30>
   1a0fc:	ldr	r1, [r9, #12]
   1a100:	ldr	r0, [r9, #16]
   1a104:	bl	212cc <__assert_fail@plt+0xeb30>
   1a108:	subs	r7, r0, #0
   1a10c:	beq	1a178 <__assert_fail@plt+0x79dc>
   1a110:	ldr	r1, [r4, #8]
   1a114:	mov	r0, r6
   1a118:	mov	r2, r7
   1a11c:	bl	19834 <__assert_fail@plt+0x7098>
   1a120:	b	19ea0 <__assert_fail@plt+0x7704>
   1a124:	bl	43c94 <fts_children@@Base+0x121f8>
   1a128:	vldr	d8, [pc, #136]	; 1a1b8 <__assert_fail@plt+0x7a1c>
   1a12c:	vmov	d7, r0, r1
   1a130:	mov	r0, r8
   1a134:	mov	r1, r9
   1a138:	vmul.f64	d8, d7, d8
   1a13c:	bl	43c94 <fts_children@@Base+0x121f8>
   1a140:	vmov	d7, r0, r1
   1a144:	vdiv.f64	d7, d8, d7
   1a148:	b	19fa8 <__assert_fail@plt+0x780c>
   1a14c:	vldr	d7, [pc, #108]	; 1a1c0 <__assert_fail@plt+0x7a24>
   1a150:	b	19fa8 <__assert_fail@plt+0x780c>
   1a154:	mov	r0, r6
   1a158:	ldr	r2, [pc, #140]	; 1a1ec <__assert_fail@plt+0x7a50>
   1a15c:	bl	19834 <__assert_fail@plt+0x7098>
   1a160:	b	19cc4 <__assert_fail@plt+0x7528>
   1a164:	ldr	r0, [sp, #48]	; 0x30
   1a168:	b	19cec <__assert_fail@plt+0x7550>
   1a16c:	ldr	r2, [pc, #124]	; 1a1f0 <__assert_fail@plt+0x7a54>
   1a170:	bl	19720 <__assert_fail@plt+0x6f84>
   1a174:	b	19b6c <__assert_fail@plt+0x73d0>
   1a178:	bl	124d8 <__errno_location@plt>
   1a17c:	mov	r1, r8
   1a180:	ldr	r0, [r0]
   1a184:	bl	18c20 <__assert_fail@plt+0x6484>
   1a188:	mov	r3, #1
   1a18c:	str	r3, [r9, #28]
   1a190:	b	19e8c <__assert_fail@plt+0x76f0>
   1a194:	bl	12244 <__stack_chk_fail@plt>
   1a198:	ldr	r2, [pc, #84]	; 1a1f4 <__assert_fail@plt+0x7a58>
   1a19c:	bl	19720 <__assert_fail@plt+0x6f84>
   1a1a0:	b	19b6c <__assert_fail@plt+0x73d0>
   1a1a4:	nop			; (mov r0, r0)
   1a1a8:	andeq	r0, r0, r0
   1a1ac:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   1a1b0:	andeq	r0, r0, r0
   1a1b4:	svcvc	0x00f00000	; IMB
   1a1b8:	andeq	r0, r0, r0
   1a1bc:	addmi	r0, r0, r0
   1a1c0:	andeq	r0, r0, r0
   1a1c4:	svccc	0x00f00000	; IMB
   1a1c8:	andeq	fp, r5, r0, ror #24
   1a1cc:	andeq	ip, r5, r0, lsr lr
   1a1d0:	andeq	r7, r4, r8, asr #20
   1a1d4:	andeq	r8, r4, r8, asr #11
   1a1d8:	andeq	r8, r4, r0, lsr r6
   1a1dc:	andeq	ip, r5, ip, asr lr
   1a1e0:	andeq	r6, r4, ip, ror #11
   1a1e4:	andeq	r6, r4, r0, lsl r6
   1a1e8:	andeq	r4, r4, r4, lsl #12
   1a1ec:	andeq	r7, r4, r8, ror r8
   1a1f0:	andeq	r5, r4, ip, ror r0
   1a1f4:	andeq	sl, r4, r8, asr #1
   1a1f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a1fc:	sub	sp, sp, #12
   1a200:	ldr	r4, [r2, #40]	; 0x28
   1a204:	cmp	r4, #0
   1a208:	beq	1a2d8 <__assert_fail@plt+0x7b3c>
   1a20c:	ldr	sl, [pc, #340]	; 1a368 <__assert_fail@plt+0x7bcc>
   1a210:	add	r6, r2, #40	; 0x28
   1a214:	mov	r5, r1
   1a218:	mov	r7, r0
   1a21c:	mov	r8, sp
   1a220:	mvn	r9, #0
   1a224:	ldr	r3, [r4]
   1a228:	cmp	r3, #2
   1a22c:	bne	1a33c <__assert_fail@plt+0x7ba0>
   1a230:	ldrb	r2, [r4, #5]
   1a234:	cmp	r2, #0
   1a238:	beq	1a33c <__assert_fail@plt+0x7ba0>
   1a23c:	ldrb	r3, [r4, #4]
   1a240:	sub	r3, r3, #65	; 0x41
   1a244:	cmp	r3, #19
   1a248:	ldrls	pc, [pc, r3, lsl #2]
   1a24c:	b	1a354 <__assert_fail@plt+0x7bb8>
   1a250:	andeq	sl, r1, r4, lsr #6
   1a254:	strdeq	sl, [r1], -r8
   1a258:	andeq	sl, r1, r4, ror #5
   1a25c:	andeq	sl, r1, r4, asr r3
   1a260:	andeq	sl, r1, r4, asr r3
   1a264:	andeq	sl, r1, r4, asr r3
   1a268:	andeq	sl, r1, r4, asr r3
   1a26c:	andeq	sl, r1, r4, asr r3
   1a270:	andeq	sl, r1, r4, asr r3
   1a274:	andeq	sl, r1, r4, asr r3
   1a278:	andeq	sl, r1, r4, asr r3
   1a27c:	andeq	sl, r1, r4, asr r3
   1a280:	andeq	sl, r1, r4, asr r3
   1a284:	andeq	sl, r1, r4, asr r3
   1a288:	andeq	sl, r1, r4, asr r3
   1a28c:	andeq	sl, r1, r4, asr r3
   1a290:	andeq	sl, r1, r4, asr r3
   1a294:	andeq	sl, r1, r4, asr r3
   1a298:	andeq	sl, r1, r4, asr r3
   1a29c:	andeq	sl, r1, r0, lsr #5
   1a2a0:	ldr	r3, [r5, #84]	; 0x54
   1a2a4:	ldr	fp, [r4, #8]
   1a2a8:	ldr	r1, [r5, #80]	; 0x50
   1a2ac:	str	r1, [sp]
   1a2b0:	str	r3, [sp, #4]
   1a2b4:	ldm	r8, {r0, r1}
   1a2b8:	bl	18f70 <__assert_fail@plt+0x67d4>
   1a2bc:	mov	r1, fp
   1a2c0:	mov	r2, r0
   1a2c4:	mov	r0, r6
   1a2c8:	bl	19720 <__assert_fail@plt+0x6f84>
   1a2cc:	ldr	r4, [r4, #16]
   1a2d0:	cmp	r4, #0
   1a2d4:	bne	1a224 <__assert_fail@plt+0x7a88>
   1a2d8:	mov	r0, #1
   1a2dc:	add	sp, sp, #12
   1a2e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2e4:	ldr	r1, [r5, #88]	; 0x58
   1a2e8:	ldr	r3, [r5, #92]	; 0x5c
   1a2ec:	str	r1, [sp]
   1a2f0:	ldr	fp, [r4, #8]
   1a2f4:	b	1a2b0 <__assert_fail@plt+0x7b14>
   1a2f8:	cmp	r2, #64	; 0x40
   1a2fc:	str	r9, [sp]
   1a300:	str	r9, [sp, #4]
   1a304:	ldr	fp, [r4, #8]
   1a308:	mvneq	r3, #0
   1a30c:	beq	1a2b0 <__assert_fail@plt+0x7b14>
   1a310:	mov	r1, fp
   1a314:	mov	r2, sl
   1a318:	mov	r0, r6
   1a31c:	bl	19720 <__assert_fail@plt+0x6f84>
   1a320:	b	1a2cc <__assert_fail@plt+0x7b30>
   1a324:	add	r1, r5, #72	; 0x48
   1a328:	ldr	r3, [r5, #76]	; 0x4c
   1a32c:	ldm	r1, {r0, r1}
   1a330:	ldr	fp, [r4, #8]
   1a334:	stm	r8, {r0, r1}
   1a338:	b	1a2b0 <__assert_fail@plt+0x7b14>
   1a33c:	mov	r3, r5
   1a340:	mov	r2, r7
   1a344:	mov	r1, r4
   1a348:	mov	r0, r6
   1a34c:	bl	1989c <__assert_fail@plt+0x7100>
   1a350:	b	1a2cc <__assert_fail@plt+0x7b30>
   1a354:	ldr	r3, [pc, #16]	; 1a36c <__assert_fail@plt+0x7bd0>
   1a358:	ldr	r2, [pc, #16]	; 1a370 <__assert_fail@plt+0x7bd4>
   1a35c:	ldr	r1, [pc, #16]	; 1a374 <__assert_fail@plt+0x7bd8>
   1a360:	ldr	r0, [pc, #16]	; 1a378 <__assert_fail@plt+0x7bdc>
   1a364:	bl	1279c <__assert_fail@plt>
   1a368:	andeq	r8, r4, r0, lsr r6
   1a36c:	strdeq	r6, [r4], -ip
   1a370:	andeq	r0, r0, r7, lsl r5
   1a374:	andeq	r6, r4, r0, asr #8
   1a378:	andeq	r4, r4, ip, lsr #11
   1a37c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a380:	ldrb	r5, [sp, #40]	; 0x28
   1a384:	ldrb	r8, [sp, #44]	; 0x2c
   1a388:	ldr	r9, [sp, #48]	; 0x30
   1a38c:	cmp	r5, #123	; 0x7b
   1a390:	beq	1a6d4 <__assert_fail@plt+0x7f38>
   1a394:	cmp	r5, #91	; 0x5b
   1a398:	beq	1a6c0 <__assert_fail@plt+0x7f24>
   1a39c:	cmp	r5, #40	; 0x28
   1a3a0:	beq	1a6e8 <__assert_fail@plt+0x7f4c>
   1a3a4:	mov	r7, r0
   1a3a8:	mov	r0, #20
   1a3ac:	mov	r6, r2
   1a3b0:	mov	sl, r3
   1a3b4:	mov	fp, r1
   1a3b8:	bl	2df04 <__assert_fail@plt+0x1b768>
   1a3bc:	mov	r3, #0
   1a3c0:	mov	r4, r0
   1a3c4:	str	r0, [r7]
   1a3c8:	add	r0, r6, #2
   1a3cc:	str	r3, [r4, #16]
   1a3d0:	str	sl, [r4]
   1a3d4:	strb	r5, [r4, #4]
   1a3d8:	strb	r8, [r4, #5]
   1a3dc:	str	r6, [r4, #12]
   1a3e0:	bl	2df04 <__assert_fail@plt+0x1b768>
   1a3e4:	mov	r2, r6
   1a3e8:	mov	r1, fp
   1a3ec:	str	r0, [r4, #8]
   1a3f0:	bl	1252c <strncpy@plt>
   1a3f4:	cmp	sl, #1
   1a3f8:	mov	r3, r0
   1a3fc:	add	r2, r0, r6
   1a400:	bls	1a570 <__assert_fail@plt+0x7dd4>
   1a404:	cmp	sl, #2
   1a408:	bne	1a710 <__assert_fail@plt+0x7f74>
   1a40c:	sub	r5, r5, #37	; 0x25
   1a410:	cmp	r5, #84	; 0x54
   1a414:	ldrls	pc, [pc, r5, lsl #2]
   1a418:	b	1a6b8 <__assert_fail@plt+0x7f1c>
   1a41c:	andeq	sl, r1, ip, lsl #13
   1a420:			; <UNDEFINED> instruction: 0x0001a6b8
   1a424:			; <UNDEFINED> instruction: 0x0001a6b8
   1a428:			; <UNDEFINED> instruction: 0x0001a6b8
   1a42c:			; <UNDEFINED> instruction: 0x0001a6b8
   1a430:			; <UNDEFINED> instruction: 0x0001a6b8
   1a434:			; <UNDEFINED> instruction: 0x0001a6b8
   1a438:			; <UNDEFINED> instruction: 0x0001a6b8
   1a43c:			; <UNDEFINED> instruction: 0x0001a6b8
   1a440:			; <UNDEFINED> instruction: 0x0001a6b8
   1a444:			; <UNDEFINED> instruction: 0x0001a6b8
   1a448:			; <UNDEFINED> instruction: 0x0001a6b8
   1a44c:			; <UNDEFINED> instruction: 0x0001a6b8
   1a450:			; <UNDEFINED> instruction: 0x0001a6b8
   1a454:			; <UNDEFINED> instruction: 0x0001a6b8
   1a458:			; <UNDEFINED> instruction: 0x0001a6b8
   1a45c:			; <UNDEFINED> instruction: 0x0001a6b8
   1a460:			; <UNDEFINED> instruction: 0x0001a6b8
   1a464:			; <UNDEFINED> instruction: 0x0001a6b8
   1a468:			; <UNDEFINED> instruction: 0x0001a6b8
   1a46c:			; <UNDEFINED> instruction: 0x0001a6b8
   1a470:			; <UNDEFINED> instruction: 0x0001a6b8
   1a474:			; <UNDEFINED> instruction: 0x0001a6b8
   1a478:			; <UNDEFINED> instruction: 0x0001a6b8
   1a47c:			; <UNDEFINED> instruction: 0x0001a6b8
   1a480:			; <UNDEFINED> instruction: 0x0001a6b8
   1a484:			; <UNDEFINED> instruction: 0x0001a6b8
   1a488:			; <UNDEFINED> instruction: 0x0001a6b8
   1a48c:			; <UNDEFINED> instruction: 0x0001a5b0
   1a490:			; <UNDEFINED> instruction: 0x0001a5b0
   1a494:			; <UNDEFINED> instruction: 0x0001a5b0
   1a498:			; <UNDEFINED> instruction: 0x0001a5b0
   1a49c:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4a0:			; <UNDEFINED> instruction: 0x0001a5b0
   1a4a4:			; <UNDEFINED> instruction: 0x0001a5b0
   1a4a8:	muleq	r1, r0, r5
   1a4ac:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4b0:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4b4:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4b8:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4bc:			; <UNDEFINED> instruction: 0x0001a5b0
   1a4c0:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4c4:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4c8:	muleq	r1, r0, r5
   1a4cc:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4d0:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4d4:	strdeq	sl, [r1], -ip
   1a4d8:			; <UNDEFINED> instruction: 0x0001a5b0
   1a4dc:			; <UNDEFINED> instruction: 0x0001a5b0
   1a4e0:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4e4:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4e8:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4ec:	andeq	sl, r1, r0, ror r6
   1a4f0:	andeq	sl, r1, ip, asr r6
   1a4f4:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4f8:			; <UNDEFINED> instruction: 0x0001a6b8
   1a4fc:			; <UNDEFINED> instruction: 0x0001a6b8
   1a500:			; <UNDEFINED> instruction: 0x0001a6b8
   1a504:			; <UNDEFINED> instruction: 0x0001a6b8
   1a508:			; <UNDEFINED> instruction: 0x0001a6b8
   1a50c:			; <UNDEFINED> instruction: 0x0001a5b0
   1a510:			; <UNDEFINED> instruction: 0x0001a5b0
   1a514:			; <UNDEFINED> instruction: 0x0001a5b0
   1a518:	andeq	sl, r1, ip, asr #12
   1a51c:			; <UNDEFINED> instruction: 0x0001a6b8
   1a520:	muleq	r1, r0, r5
   1a524:			; <UNDEFINED> instruction: 0x0001a5b0
   1a528:	muleq	r1, r0, r5
   1a52c:	andeq	sl, r1, r4, lsr r6
   1a530:			; <UNDEFINED> instruction: 0x0001a6b8
   1a534:			; <UNDEFINED> instruction: 0x0001a5b0
   1a538:	muleq	r1, ip, r6
   1a53c:	andeq	sl, r1, r8, lsl r6
   1a540:			; <UNDEFINED> instruction: 0x0001a5b0
   1a544:			; <UNDEFINED> instruction: 0x0001a6b8
   1a548:	muleq	r1, r0, r5
   1a54c:			; <UNDEFINED> instruction: 0x0001a6b8
   1a550:			; <UNDEFINED> instruction: 0x0001a6b8
   1a554:			; <UNDEFINED> instruction: 0x0001a5b0
   1a558:			; <UNDEFINED> instruction: 0x0001a5b0
   1a55c:			; <UNDEFINED> instruction: 0x0001a5b0
   1a560:			; <UNDEFINED> instruction: 0x0001a6b8
   1a564:			; <UNDEFINED> instruction: 0x0001a6b8
   1a568:			; <UNDEFINED> instruction: 0x0001a6b8
   1a56c:	andeq	sl, r1, r0, ror #11
   1a570:	cmp	r5, #0
   1a574:	bne	1a6fc <__assert_fail@plt+0x7f60>
   1a578:	cmp	r8, #0
   1a57c:	bne	1a724 <__assert_fail@plt+0x7f88>
   1a580:	ldr	r0, [r7]
   1a584:	strb	r8, [r3, r6]
   1a588:	add	r0, r0, #16
   1a58c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a590:	add	r2, r2, #1
   1a594:	mov	r1, #115	; 0x73
   1a598:	strb	r1, [r0, r6]
   1a59c:	mov	r3, #0
   1a5a0:	strb	r3, [r2]
   1a5a4:	ldr	r0, [r7]
   1a5a8:	add	r0, r0, #16
   1a5ac:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5b0:	mov	r0, #1
   1a5b4:	mov	r1, #115	; 0x73
   1a5b8:	strb	r1, [r3, r6]
   1a5bc:	add	r2, r2, r0
   1a5c0:	mov	r1, #3
   1a5c4:	strb	r0, [r9, #18]
   1a5c8:	ldr	r0, [r9, #24]
   1a5cc:	mov	r3, #0
   1a5d0:	cmp	r0, r1
   1a5d4:	strb	r3, [r2]
   1a5d8:	strcc	r1, [r9, #24]
   1a5dc:	b	1a5a4 <__assert_fail@plt+0x7e08>
   1a5e0:	mov	r0, #1
   1a5e4:	mov	r1, #115	; 0x73
   1a5e8:	strb	r1, [r3, r6]
   1a5ec:	add	r2, r2, r0
   1a5f0:	strb	r0, [r9, #19]
   1a5f4:	mov	r1, #2
   1a5f8:	b	1a5c8 <__assert_fail@plt+0x7e2c>
   1a5fc:	mov	r0, #1
   1a600:	mov	r1, #103	; 0x67
   1a604:	strb	r1, [r3, r6]
   1a608:	add	r2, r2, r0
   1a60c:	strb	r0, [r9, #18]
   1a610:	mov	r1, #3
   1a614:	b	1a5c8 <__assert_fail@plt+0x7e2c>
   1a618:	mov	r1, #1
   1a61c:	mov	r0, #111	; 0x6f
   1a620:	add	r2, r2, r1
   1a624:	strb	r1, [r9, #18]
   1a628:	strb	r0, [r3, r6]
   1a62c:	mov	r1, #3
   1a630:	b	1a5c8 <__assert_fail@plt+0x7e2c>
   1a634:	mov	r1, #1
   1a638:	mov	r0, #115	; 0x73
   1a63c:	add	r2, r2, r1
   1a640:	strb	r1, [r9, #20]
   1a644:	strb	r0, [r3, r6]
   1a648:	b	1a5c8 <__assert_fail@plt+0x7e2c>
   1a64c:	mov	r1, #100	; 0x64
   1a650:	add	r2, r2, #1
   1a654:	strb	r1, [r0, r6]
   1a658:	b	1a59c <__assert_fail@plt+0x7e00>
   1a65c:	mov	r1, #115	; 0x73
   1a660:	strb	r1, [r0, r6]
   1a664:	add	r2, r2, #1
   1a668:	mov	r1, #5
   1a66c:	b	1a5c8 <__assert_fail@plt+0x7e2c>
   1a670:	mov	r0, #1
   1a674:	mov	r1, #115	; 0x73
   1a678:	strb	r1, [r3, r6]
   1a67c:	add	r2, r2, r0
   1a680:	strb	r0, [r9, #18]
   1a684:	mov	r1, #2
   1a688:	b	1a5c8 <__assert_fail@plt+0x7e2c>
   1a68c:	mov	r1, #37	; 0x25
   1a690:	add	r2, r2, #1
   1a694:	strb	r1, [r0, r6]
   1a698:	b	1a59c <__assert_fail@plt+0x7e00>
   1a69c:	mov	r0, #1
   1a6a0:	mov	r1, #115	; 0x73
   1a6a4:	strb	r1, [r3, r6]
   1a6a8:	add	r2, r2, r0
   1a6ac:	strb	r0, [r9, #18]
   1a6b0:	mov	r1, #4
   1a6b4:	b	1a5c8 <__assert_fail@plt+0x7e2c>
   1a6b8:	mov	r1, #0
   1a6bc:	b	1a5c8 <__assert_fail@plt+0x7e2c>
   1a6c0:	ldr	r3, [pc, #112]	; 1a738 <__assert_fail@plt+0x7f9c>
   1a6c4:	mov	r2, #78	; 0x4e
   1a6c8:	ldr	r1, [pc, #108]	; 1a73c <__assert_fail@plt+0x7fa0>
   1a6cc:	ldr	r0, [pc, #108]	; 1a740 <__assert_fail@plt+0x7fa4>
   1a6d0:	bl	1279c <__assert_fail@plt>
   1a6d4:	ldr	r3, [pc, #92]	; 1a738 <__assert_fail@plt+0x7f9c>
   1a6d8:	mov	r2, #77	; 0x4d
   1a6dc:	ldr	r1, [pc, #88]	; 1a73c <__assert_fail@plt+0x7fa0>
   1a6e0:	ldr	r0, [pc, #92]	; 1a744 <__assert_fail@plt+0x7fa8>
   1a6e4:	bl	1279c <__assert_fail@plt>
   1a6e8:	ldr	r3, [pc, #72]	; 1a738 <__assert_fail@plt+0x7f9c>
   1a6ec:	mov	r2, #79	; 0x4f
   1a6f0:	ldr	r1, [pc, #68]	; 1a73c <__assert_fail@plt+0x7fa0>
   1a6f4:	ldr	r0, [pc, #76]	; 1a748 <__assert_fail@plt+0x7fac>
   1a6f8:	bl	1279c <__assert_fail@plt>
   1a6fc:	ldr	r3, [pc, #52]	; 1a738 <__assert_fail@plt+0x7f9c>
   1a700:	mov	r2, #96	; 0x60
   1a704:	ldr	r1, [pc, #48]	; 1a73c <__assert_fail@plt+0x7fa0>
   1a708:	ldr	r0, [pc, #60]	; 1a74c <__assert_fail@plt+0x7fb0>
   1a70c:	bl	1279c <__assert_fail@plt>
   1a710:	ldr	r3, [pc, #32]	; 1a738 <__assert_fail@plt+0x7f9c>
   1a714:	mov	r2, #104	; 0x68
   1a718:	ldr	r1, [pc, #28]	; 1a73c <__assert_fail@plt+0x7fa0>
   1a71c:	ldr	r0, [pc, #44]	; 1a750 <__assert_fail@plt+0x7fb4>
   1a720:	bl	1279c <__assert_fail@plt>
   1a724:	ldr	r3, [pc, #12]	; 1a738 <__assert_fail@plt+0x7f9c>
   1a728:	mov	r2, #97	; 0x61
   1a72c:	ldr	r1, [pc, #8]	; 1a73c <__assert_fail@plt+0x7fa0>
   1a730:	ldr	r0, [pc, #28]	; 1a754 <__assert_fail@plt+0x7fb8>
   1a734:	bl	1279c <__assert_fail@plt>
   1a738:	andeq	r6, r4, ip, lsl #8
   1a73c:	andeq	r6, r4, r0, asr #8
   1a740:	andeq	r6, r4, r8, lsr #12
   1a744:	andeq	r6, r4, r4, lsl r6
   1a748:	andeq	r6, r4, ip, lsr r6
   1a74c:	andeq	r6, r4, r0, asr r6
   1a750:	andeq	r6, r4, ip, ror r6
   1a754:	andeq	r6, r4, r4, ror #12
   1a758:	mov	r3, r1
   1a75c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a760:	mov	r4, r0
   1a764:	sub	sp, sp, #28
   1a768:	ldr	r1, [pc, #1160]	; 1abf8 <__assert_fail@plt+0x845c>
   1a76c:	mov	r0, r3
   1a770:	mov	r5, r2
   1a774:	bl	1790c <__assert_fail@plt+0x5170>
   1a778:	mov	ip, r4
   1a77c:	ldr	r6, [pc, #1144]	; 1abfc <__assert_fail@plt+0x8460>
   1a780:	mov	r4, #0
   1a784:	mov	r7, r0
   1a788:	add	lr, r0, #40	; 0x28
   1a78c:	str	r0, [sp, #20]
   1a790:	ldm	ip!, {r0, r1, r2, r3}
   1a794:	stmia	lr!, {r0, r1, r2, r3}
   1a798:	ldr	r3, [ip]
   1a79c:	str	r3, [lr]
   1a7a0:	str	r6, [r7, #16]
   1a7a4:	str	r4, [r7, #24]
   1a7a8:	str	r4, [r7, #40]	; 0x28
   1a7ac:	ldrb	r3, [r5]
   1a7b0:	cmp	r3, r4
   1a7b4:	beq	1a898 <__assert_fail@plt+0x80fc>
   1a7b8:	add	sl, r7, #40	; 0x28
   1a7bc:	ldr	r9, [pc, #1084]	; 1ac00 <__assert_fail@plt+0x8464>
   1a7c0:	mov	r8, r5
   1a7c4:	b	1a7e0 <__assert_fail@plt+0x8044>
   1a7c8:	cmp	r3, #37	; 0x25
   1a7cc:	beq	1a8e0 <__assert_fail@plt+0x8144>
   1a7d0:	add	r5, r5, #1
   1a7d4:	mov	r3, r4
   1a7d8:	cmp	r3, #0
   1a7dc:	beq	1a890 <__assert_fail@plt+0x80f4>
   1a7e0:	cmp	r3, #92	; 0x5c
   1a7e4:	ldrb	r4, [r5, #1]
   1a7e8:	bne	1a7c8 <__assert_fail@plt+0x802c>
   1a7ec:	cmp	r4, #99	; 0x63
   1a7f0:	beq	1ab60 <__assert_fail@plt+0x83c4>
   1a7f4:	cmp	r4, #0
   1a7f8:	add	r6, r5, #1
   1a7fc:	beq	1a9e0 <__assert_fail@plt+0x8244>
   1a800:	sub	r3, r4, #48	; 0x30
   1a804:	uxtb	r2, r3
   1a808:	cmp	r2, #7
   1a80c:	movls	r0, #0
   1a810:	movls	r2, r6
   1a814:	movls	r1, r0
   1a818:	bls	1a8a4 <__assert_fail@plt+0x8108>
   1a81c:	sub	r4, r4, #92	; 0x5c
   1a820:	uxtb	r4, r4
   1a824:	cmp	r4, #26
   1a828:	bhi	1aa08 <__assert_fail@plt+0x826c>
   1a82c:	ldr	r3, [pc, #976]	; 1ac04 <__assert_fail@plt+0x8468>
   1a830:	add	r4, r3, r4
   1a834:	ldrb	r3, [r4, #152]	; 0x98
   1a838:	cmp	r3, #0
   1a83c:	beq	1aa08 <__assert_fail@plt+0x826c>
   1a840:	mov	r2, r5
   1a844:	mov	fp, r6
   1a848:	strb	r3, [r2], #2
   1a84c:	mov	r6, r2
   1a850:	ldr	r1, [sp, #20]
   1a854:	mov	r3, #0
   1a858:	sub	r2, r5, r8
   1a85c:	str	r1, [sp, #8]
   1a860:	mov	r0, sl
   1a864:	mov	r1, r8
   1a868:	str	r3, [sp, #4]
   1a86c:	str	r3, [sp]
   1a870:	add	r2, r2, #1
   1a874:	bl	1a37c <__assert_fail@plt+0x7be0>
   1a878:	ldrb	r3, [fp, #1]
   1a87c:	mov	r5, r6
   1a880:	mov	r8, r6
   1a884:	cmp	r3, #0
   1a888:	mov	sl, r0
   1a88c:	bne	1a7e0 <__assert_fail@plt+0x8044>
   1a890:	cmp	r8, r5
   1a894:	bcc	1ab34 <__assert_fail@plt+0x8398>
   1a898:	mov	r0, #1
   1a89c:	add	sp, sp, #28
   1a8a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a8a4:	uxtb	r3, r3
   1a8a8:	cmp	r3, #7
   1a8ac:	mov	fp, r2
   1a8b0:	add	r3, r0, #1
   1a8b4:	bhi	1aad8 <__assert_fail@plt+0x833c>
   1a8b8:	add	r1, r4, r1, lsl #3
   1a8bc:	add	r2, r2, #1
   1a8c0:	cmp	r3, #3
   1a8c4:	sub	r1, r1, #48	; 0x30
   1a8c8:	mov	r6, r2
   1a8cc:	beq	1aae0 <__assert_fail@plt+0x8344>
   1a8d0:	ldrb	r4, [r2]
   1a8d4:	mov	r0, r3
   1a8d8:	sub	r3, r4, #48	; 0x30
   1a8dc:	b	1a8a4 <__assert_fail@plt+0x8108>
   1a8e0:	cmp	r4, #0
   1a8e4:	beq	1abb0 <__assert_fail@plt+0x8414>
   1a8e8:	cmp	r4, #37	; 0x25
   1a8ec:	beq	1aa38 <__assert_fail@plt+0x829c>
   1a8f0:	add	r7, r5, #2
   1a8f4:	mvn	r6, r5
   1a8f8:	b	1a914 <__assert_fail@plt+0x8178>
   1a8fc:	mov	r1, r4
   1a900:	mov	r0, r9
   1a904:	bl	124a8 <strchr@plt>
   1a908:	cmp	r0, #0
   1a90c:	beq	1a920 <__assert_fail@plt+0x8184>
   1a910:	ldrb	r4, [r7], #1
   1a914:	cmp	r4, #0
   1a918:	add	fp, r6, r7
   1a91c:	bne	1a8fc <__assert_fail@plt+0x8160>
   1a920:	bl	12460 <__ctype_b_loc@plt>
   1a924:	add	r3, fp, #1
   1a928:	add	r3, r5, r3
   1a92c:	ldr	r0, [r0]
   1a930:	b	1a938 <__assert_fail@plt+0x819c>
   1a934:	ldrb	r4, [r3], #1
   1a938:	lsl	r2, r4, #1
   1a93c:	add	r1, r6, r3
   1a940:	ldrh	r2, [r0, r2]
   1a944:	tst	r2, #2048	; 0x800
   1a948:	bne	1a934 <__assert_fail@plt+0x8198>
   1a94c:	cmp	r4, #46	; 0x2e
   1a950:	addne	r6, r5, r1
   1a954:	beq	1aae8 <__assert_fail@plt+0x834c>
   1a958:	mov	r1, r4
   1a95c:	ldr	r0, [pc, #676]	; 1ac08 <__assert_fail@plt+0x846c>
   1a960:	bl	124a8 <strchr@plt>
   1a964:	cmp	r0, #0
   1a968:	beq	1aa74 <__assert_fail@plt+0x82d8>
   1a96c:	cmp	r4, #0
   1a970:	bne	1ab28 <__assert_fail@plt+0x838c>
   1a974:	mov	r1, r4
   1a978:	ldr	r0, [pc, #652]	; 1ac0c <__assert_fail@plt+0x8470>
   1a97c:	bl	124a8 <strchr@plt>
   1a980:	subs	r4, r0, #0
   1a984:	bne	1abd4 <__assert_fail@plt+0x8438>
   1a988:	mov	r2, #5
   1a98c:	ldr	r1, [pc, #636]	; 1ac10 <__assert_fail@plt+0x8474>
   1a990:	bl	1222c <dcgettext@plt>
   1a994:	mov	r5, r6
   1a998:	mov	r1, r4
   1a99c:	ldrb	r3, [r5], #1
   1a9a0:	mov	r2, r0
   1a9a4:	mov	r0, r4
   1a9a8:	bl	12388 <error@plt>
   1a9ac:	ldr	r2, [sp, #20]
   1a9b0:	mov	r3, #0
   1a9b4:	str	r2, [sp, #8]
   1a9b8:	mov	r0, sl
   1a9bc:	str	r3, [sp, #4]
   1a9c0:	str	r3, [sp]
   1a9c4:	sub	r2, r5, r8
   1a9c8:	mov	r1, r8
   1a9cc:	bl	1a37c <__assert_fail@plt+0x7be0>
   1a9d0:	mov	sl, r0
   1a9d4:	ldrb	r3, [r6, #1]
   1a9d8:	mov	r8, r5
   1a9dc:	b	1a7d8 <__assert_fail@plt+0x803c>
   1a9e0:	mov	r2, #5
   1a9e4:	ldr	r1, [pc, #552]	; 1ac14 <__assert_fail@plt+0x8478>
   1a9e8:	mov	r0, r4
   1a9ec:	bl	1222c <dcgettext@plt>
   1a9f0:	mov	r1, r4
   1a9f4:	mov	fp, r5
   1a9f8:	mov	r2, r0
   1a9fc:	mov	r0, r4
   1aa00:	bl	12388 <error@plt>
   1aa04:	b	1a850 <__assert_fail@plt+0x80b4>
   1aa08:	mov	r2, #5
   1aa0c:	ldr	r1, [pc, #516]	; 1ac18 <__assert_fail@plt+0x847c>
   1aa10:	mov	r0, #0
   1aa14:	bl	1222c <dcgettext@plt>
   1aa18:	mov	r1, #0
   1aa1c:	ldrb	r3, [r5, #1]
   1aa20:	add	r5, r5, #2
   1aa24:	mov	r2, r0
   1aa28:	mov	r0, r1
   1aa2c:	bl	12388 <error@plt>
   1aa30:	ldrb	r3, [r5]
   1aa34:	b	1a7d8 <__assert_fail@plt+0x803c>
   1aa38:	add	r2, r5, #1
   1aa3c:	mov	r6, r2
   1aa40:	mov	r3, #0
   1aa44:	ldr	r1, [sp, #20]
   1aa48:	str	r3, [sp, #4]
   1aa4c:	str	r1, [sp, #8]
   1aa50:	mov	r0, sl
   1aa54:	str	r4, [sp]
   1aa58:	sub	r2, r2, r8
   1aa5c:	mov	r1, r8
   1aa60:	mov	r3, #2
   1aa64:	bl	1a37c <__assert_fail@plt+0x7be0>
   1aa68:	add	r5, r6, #1
   1aa6c:	mov	sl, r0
   1aa70:	b	1a9d4 <__assert_fail@plt+0x8238>
   1aa74:	mov	r1, r4
   1aa78:	ldr	r0, [pc, #412]	; 1ac1c <__assert_fail@plt+0x8480>
   1aa7c:	bl	124a8 <strchr@plt>
   1aa80:	cmp	r0, #0
   1aa84:	beq	1a974 <__assert_fail@plt+0x81d8>
   1aa88:	ldrb	r3, [r6, #1]
   1aa8c:	add	r5, r6, #1
   1aa90:	cmp	r3, #0
   1aa94:	movne	r2, r6
   1aa98:	movne	r6, r5
   1aa9c:	bne	1aa44 <__assert_fail@plt+0x82a8>
   1aaa0:	mov	r1, r4
   1aaa4:	ldr	r0, [pc, #352]	; 1ac0c <__assert_fail@plt+0x8470>
   1aaa8:	bl	124a8 <strchr@plt>
   1aaac:	subs	r4, r0, #0
   1aab0:	bne	1abd4 <__assert_fail@plt+0x8438>
   1aab4:	mov	r2, #5
   1aab8:	ldr	r1, [pc, #352]	; 1ac20 <__assert_fail@plt+0x8484>
   1aabc:	bl	1222c <dcgettext@plt>
   1aac0:	ldrb	r3, [r6]
   1aac4:	mov	r1, r4
   1aac8:	mov	r2, r0
   1aacc:	mov	r0, r4
   1aad0:	bl	12388 <error@plt>
   1aad4:	b	1a9ac <__assert_fail@plt+0x8210>
   1aad8:	mov	r6, r2
   1aadc:	add	fp, r5, r0
   1aae0:	strb	r1, [r5]
   1aae4:	b	1a850 <__assert_fail@plt+0x80b4>
   1aae8:	add	r3, r1, #1
   1aaec:	add	r6, r5, r3
   1aaf0:	ldrb	r4, [r5, r3]
   1aaf4:	lsl	r3, r4, #1
   1aaf8:	ldrh	r3, [r0, r3]
   1aafc:	tst	r3, #2048	; 0x800
   1ab00:	beq	1a958 <__assert_fail@plt+0x81bc>
   1ab04:	add	r1, r1, #2
   1ab08:	add	r5, r5, r1
   1ab0c:	mov	r6, r5
   1ab10:	ldrb	r4, [r5], #1
   1ab14:	lsl	r3, r4, #1
   1ab18:	ldrh	r3, [r0, r3]
   1ab1c:	tst	r3, #2048	; 0x800
   1ab20:	bne	1ab0c <__assert_fail@plt+0x8370>
   1ab24:	b	1a958 <__assert_fail@plt+0x81bc>
   1ab28:	mov	r2, r6
   1ab2c:	mov	r3, #0
   1ab30:	b	1aa44 <__assert_fail@plt+0x82a8>
   1ab34:	ldr	r2, [sp, #20]
   1ab38:	str	r3, [sp, #4]
   1ab3c:	str	r2, [sp, #8]
   1ab40:	str	r3, [sp]
   1ab44:	sub	r2, r5, r8
   1ab48:	mov	r1, r8
   1ab4c:	mov	r0, sl
   1ab50:	bl	1a37c <__assert_fail@plt+0x7be0>
   1ab54:	mov	r0, #1
   1ab58:	add	sp, sp, #28
   1ab5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab60:	ldr	r4, [sp, #20]
   1ab64:	mov	r3, #0
   1ab68:	str	r3, [sp, #4]
   1ab6c:	str	r3, [sp]
   1ab70:	str	r4, [sp, #8]
   1ab74:	mov	r3, #1
   1ab78:	sub	r2, r5, r8
   1ab7c:	mov	r1, r8
   1ab80:	mov	r0, sl
   1ab84:	bl	1a37c <__assert_fail@plt+0x7be0>
   1ab88:	ldrb	r3, [r4, #18]
   1ab8c:	cmp	r3, #0
   1ab90:	beq	1a898 <__assert_fail@plt+0x80fc>
   1ab94:	ldr	r3, [r4, #24]
   1ab98:	mov	r0, #1
   1ab9c:	cmp	r3, #2
   1aba0:	movls	r3, #3
   1aba4:	strls	r3, [r4, #24]
   1aba8:	add	sp, sp, #28
   1abac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1abb0:	mov	r2, #5
   1abb4:	ldr	r1, [pc, #104]	; 1ac24 <__assert_fail@plt+0x8488>
   1abb8:	mov	r0, r4
   1abbc:	bl	1222c <dcgettext@plt>
   1abc0:	mov	r3, r5
   1abc4:	mov	r1, r4
   1abc8:	mov	r2, r0
   1abcc:	mov	r0, #1
   1abd0:	bl	12388 <error@plt>
   1abd4:	mov	r2, #5
   1abd8:	ldr	r1, [pc, #72]	; 1ac28 <__assert_fail@plt+0x848c>
   1abdc:	mov	r0, #0
   1abe0:	bl	1222c <dcgettext@plt>
   1abe4:	ldrb	r3, [r6]
   1abe8:	mov	r1, #0
   1abec:	mov	r2, r0
   1abf0:	mov	r0, #1
   1abf4:	bl	12388 <error@plt>
   1abf8:	strdeq	sl, [r1], -r8
   1abfc:	andeq	r0, r0, r1, lsl #2
   1ac00:	andeq	r6, r4, r4, ror #13
   1ac04:	andeq	r6, r4, r4, lsl #7
   1ac08:	andeq	r6, r4, ip, ror #13
   1ac0c:	andeq	r6, r4, r0, lsr #15
   1ac10:	andeq	r6, r4, r4, lsr #15
   1ac14:	muleq	r4, r0, r6
   1ac18:	andeq	r6, r4, r0, asr #13
   1ac1c:	andeq	r6, r4, ip, lsl #14
   1ac20:	andeq	r6, r4, r4, asr r7
   1ac24:	andeq	r6, r4, ip, ror #11
   1ac28:	andeq	r6, r4, r4, lsl r7
   1ac2c:	push	{r4, r5, r6, lr}
   1ac30:	mov	r6, r0
   1ac34:	ldr	r5, [pc, #64]	; 1ac7c <__assert_fail@plt+0x84e0>
   1ac38:	ldr	r0, [r5]
   1ac3c:	cmp	r0, #0
   1ac40:	beq	1ac68 <__assert_fail@plt+0x84cc>
   1ac44:	ldrb	r3, [r5, #4]
   1ac48:	eor	r3, r3, #1
   1ac4c:	tst	r6, r3
   1ac50:	popeq	{r4, r5, r6, pc}
   1ac54:	ldr	r4, [r0, #28]
   1ac58:	bl	31d04 <fts_children@@Base+0x268>
   1ac5c:	subs	r0, r4, #0
   1ac60:	bne	1ac54 <__assert_fail@plt+0x84b8>
   1ac64:	str	r0, [r5]
   1ac68:	mov	r0, r6
   1ac6c:	bl	31d50 <fts_children@@Base+0x2b4>
   1ac70:	strb	r6, [r5, #4]
   1ac74:	str	r0, [r5]
   1ac78:	pop	{r4, r5, r6, pc}
   1ac7c:	andeq	ip, r5, r8, lsr #25
   1ac80:	push	{r4, r5, r6, lr}
   1ac84:	sub	sp, sp, #112	; 0x70
   1ac88:	ldr	r4, [pc, #84]	; 1ace4 <__assert_fail@plt+0x8548>
   1ac8c:	mov	r5, r0
   1ac90:	mov	r0, sp
   1ac94:	ldr	r3, [r4]
   1ac98:	mov	r6, r1
   1ac9c:	str	r3, [sp, #108]	; 0x6c
   1aca0:	bl	17ba4 <__assert_fail@plt+0x5408>
   1aca4:	ldr	r3, [pc, #60]	; 1ace8 <__assert_fail@plt+0x854c>
   1aca8:	mov	r1, sp
   1acac:	ldr	r0, [r5]
   1acb0:	ldr	r3, [r3, #52]	; 0x34
   1acb4:	blx	r3
   1acb8:	cmp	r0, #0
   1acbc:	mvnne	r0, #0
   1acc0:	ldrdeq	r2, [sp]
   1acc4:	strdeq	r2, [r6]
   1acc8:	ldr	r2, [sp, #108]	; 0x6c
   1accc:	ldr	r3, [r4]
   1acd0:	cmp	r2, r3
   1acd4:	bne	1ace0 <__assert_fail@plt+0x8544>
   1acd8:	add	sp, sp, #112	; 0x70
   1acdc:	pop	{r4, r5, r6, pc}
   1ace0:	bl	12244 <__stack_chk_fail@plt>
   1ace4:	andeq	fp, r5, r0, ror #24
   1ace8:	andeq	ip, r5, ip, asr lr
   1acec:	push	{r4, r5, r6, r7, r8, sl, fp, lr}
   1acf0:	mov	r8, r0
   1acf4:	ldr	r5, [pc, #284]	; 1ae18 <__assert_fail@plt+0x867c>
   1acf8:	ldr	r0, [r5, #8]
   1acfc:	cmp	r0, #0
   1ad00:	beq	1ad28 <__assert_fail@plt+0x858c>
   1ad04:	ldrb	r3, [r5, #12]
   1ad08:	cmp	r3, #0
   1ad0c:	beq	1ad24 <__assert_fail@plt+0x8588>
   1ad10:	ldrd	r6, [r8]
   1ad14:	ldrd	r2, [r5, #16]
   1ad18:	cmp	r7, r3
   1ad1c:	cmpeq	r6, r2
   1ad20:	popeq	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ad24:	bl	12154 <free@plt>
   1ad28:	ldrd	r2, [r8]
   1ad2c:	mov	r0, #1
   1ad30:	strd	r2, [r5, #16]
   1ad34:	bl	1ac2c <__assert_fail@plt+0x8490>
   1ad38:	subs	r4, r0, #0
   1ad3c:	beq	1adfc <__assert_fail@plt+0x8660>
   1ad40:	ldr	r6, [pc, #212]	; 1ae1c <__assert_fail@plt+0x8680>
   1ad44:	mov	r7, #0
   1ad48:	mvn	sl, #0
   1ad4c:	mvn	fp, #0
   1ad50:	b	1ad70 <__assert_fail@plt+0x85d4>
   1ad54:	ldrd	r2, [r8]
   1ad58:	cmp	r3, r1
   1ad5c:	cmpeq	r2, r0
   1ad60:	moveq	r7, r4
   1ad64:	ldr	r4, [r4, #28]
   1ad68:	cmp	r4, #0
   1ad6c:	beq	1adb0 <__assert_fail@plt+0x8614>
   1ad70:	mov	r1, r6
   1ad74:	ldr	r0, [r4, #12]
   1ad78:	bl	120dc <strcmp@plt>
   1ad7c:	cmp	r0, #0
   1ad80:	beq	1ad64 <__assert_fail@plt+0x85c8>
   1ad84:	ldrd	r0, [r4, #16]
   1ad88:	cmp	r1, fp
   1ad8c:	cmpeq	r0, sl
   1ad90:	bne	1ad54 <__assert_fail@plt+0x85b8>
   1ad94:	add	r1, r4, #16
   1ad98:	add	r0, r4, #4
   1ad9c:	bl	1ac80 <__assert_fail@plt+0x84e4>
   1ada0:	cmp	r0, #0
   1ada4:	bne	1ad64 <__assert_fail@plt+0x85c8>
   1ada8:	ldrd	r0, [r4, #16]
   1adac:	b	1ad54 <__assert_fail@plt+0x85b8>
   1adb0:	cmp	r7, #0
   1adb4:	strbeq	r7, [r5, #12]
   1adb8:	beq	1ade0 <__assert_fail@plt+0x8644>
   1adbc:	ldr	r0, [r7, #12]
   1adc0:	bl	2e130 <__assert_fail@plt+0x1b994>
   1adc4:	cmp	r0, #0
   1adc8:	movne	r3, #1
   1adcc:	moveq	r3, #0
   1add0:	strb	r3, [r5, #12]
   1add4:	beq	1ade0 <__assert_fail@plt+0x8644>
   1add8:	str	r0, [r5, #8]
   1addc:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1ade0:	mov	r2, #5
   1ade4:	ldr	r1, [pc, #52]	; 1ae20 <__assert_fail@plt+0x8684>
   1ade8:	mov	r0, #0
   1adec:	bl	1222c <dcgettext@plt>
   1adf0:	bl	2e130 <__assert_fail@plt+0x1b994>
   1adf4:	str	r0, [r5, #8]
   1adf8:	pop	{r4, r5, r6, r7, r8, sl, fp, pc}
   1adfc:	mov	r2, #5
   1ae00:	ldr	r1, [pc, #28]	; 1ae24 <__assert_fail@plt+0x8688>
   1ae04:	bl	1222c <dcgettext@plt>
   1ae08:	mov	r1, r4
   1ae0c:	mov	r2, r0
   1ae10:	mov	r0, #1
   1ae14:	bl	12388 <error@plt>
   1ae18:	andeq	ip, r5, r8, lsr #25
   1ae1c:	andeq	r6, r4, r8, asr #16
   1ae20:	andeq	r5, r4, r0, lsl r1
   1ae24:	andeq	r6, r4, r0, lsr #16
   1ae28:	push	{r4, r5, r6, lr}
   1ae2c:	mov	r1, r0
   1ae30:	mov	r5, r0
   1ae34:	ldr	r0, [pc, #72]	; 1ae84 <__assert_fail@plt+0x86e8>
   1ae38:	bl	120dc <strcmp@plt>
   1ae3c:	cmp	r0, #0
   1ae40:	bne	1ae4c <__assert_fail@plt+0x86b0>
   1ae44:	mov	r0, #1
   1ae48:	pop	{r4, r5, r6, pc}
   1ae4c:	mov	r0, #0
   1ae50:	bl	1ac2c <__assert_fail@plt+0x8490>
   1ae54:	subs	r4, r0, #0
   1ae58:	beq	1ae44 <__assert_fail@plt+0x86a8>
   1ae5c:	ldr	r1, [r4, #12]
   1ae60:	mov	r0, r5
   1ae64:	bl	120dc <strcmp@plt>
   1ae68:	cmp	r0, #0
   1ae6c:	beq	1ae44 <__assert_fail@plt+0x86a8>
   1ae70:	ldr	r4, [r4, #28]
   1ae74:	cmp	r4, #0
   1ae78:	bne	1ae5c <__assert_fail@plt+0x86c0>
   1ae7c:	mov	r0, r4
   1ae80:	pop	{r4, r5, r6, pc}
   1ae84:	andeq	r6, r4, r0, asr r8
   1ae88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ae8c:	sub	sp, sp, #20
   1ae90:	ldr	r7, [pc, #256]	; 1af98 <__assert_fail@plt+0x87fc>
   1ae94:	mov	r9, #0
   1ae98:	str	r0, [sp, #4]
   1ae9c:	ldr	r3, [r7]
   1aea0:	mov	r0, r9
   1aea4:	str	r3, [sp, #12]
   1aea8:	str	r9, [sp, #8]
   1aeac:	bl	31d50 <fts_children@@Base+0x2b4>
   1aeb0:	subs	r8, r0, #0
   1aeb4:	beq	1af8c <__assert_fail@plt+0x87f0>
   1aeb8:	mov	sl, r9
   1aebc:	mov	r4, r8
   1aec0:	b	1aef8 <__assert_fail@plt+0x875c>
   1aec4:	ldrd	r2, [r4, #16]
   1aec8:	mvn	r1, #0
   1aecc:	mvn	r0, #0
   1aed0:	cmp	r3, r1
   1aed4:	cmpeq	r2, r0
   1aed8:	beq	1af6c <__assert_fail@plt+0x87d0>
   1aedc:	add	r5, fp, r5
   1aee0:	mov	sl, r6
   1aee4:	mov	r9, fp
   1aee8:	strd	r2, [r5, #-8]
   1aeec:	ldr	r4, [r4, #28]
   1aef0:	cmp	r4, #0
   1aef4:	beq	1af30 <__assert_fail@plt+0x8794>
   1aef8:	add	r6, sl, #1
   1aefc:	add	r2, sp, #8
   1af00:	lsl	r5, r6, #3
   1af04:	mov	r1, r5
   1af08:	mov	r0, r9
   1af0c:	bl	1fb14 <__assert_fail@plt+0xd378>
   1af10:	subs	fp, r0, #0
   1af14:	bne	1aec4 <__assert_fail@plt+0x8728>
   1af18:	mov	r0, r9
   1af1c:	bl	12154 <free@plt>
   1af20:	ldr	r4, [r4, #28]
   1af24:	mov	r9, fp
   1af28:	cmp	r4, #0
   1af2c:	bne	1aef8 <__assert_fail@plt+0x875c>
   1af30:	mov	r0, r8
   1af34:	ldr	r4, [r0, #28]
   1af38:	bl	31d04 <fts_children@@Base+0x268>
   1af3c:	subs	r0, r4, #0
   1af40:	bne	1af34 <__assert_fail@plt+0x8798>
   1af44:	cmp	fp, #0
   1af48:	ldrne	r3, [sp, #4]
   1af4c:	strne	sl, [r3]
   1af50:	ldr	r2, [sp, #12]
   1af54:	ldr	r3, [r7]
   1af58:	mov	r0, r9
   1af5c:	cmp	r2, r3
   1af60:	bne	1af94 <__assert_fail@plt+0x87f8>
   1af64:	add	sp, sp, #20
   1af68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1af6c:	add	r1, r4, #16
   1af70:	add	r0, r4, #4
   1af74:	bl	1ac80 <__assert_fail@plt+0x84e4>
   1af78:	cmp	r0, #0
   1af7c:	movne	r9, fp
   1af80:	bne	1aeec <__assert_fail@plt+0x8750>
   1af84:	ldrd	r2, [r4, #16]
   1af88:	b	1aedc <__assert_fail@plt+0x8740>
   1af8c:	mov	r9, r8
   1af90:	b	1af50 <__assert_fail@plt+0x87b4>
   1af94:	bl	12244 <__stack_chk_fail@plt>
   1af98:	andeq	fp, r5, r0, ror #24
   1af9c:	andeq	r0, r0, r0
   1afa0:	b	3fd40 <fts_children@@Base+0xe2a4>
   1afa4:	ldr	r3, [pc, #244]	; 1b0a0 <__assert_fail@plt+0x8904>
   1afa8:	push	{lr}		; (str lr, [sp, #-4]!)
   1afac:	sub	sp, sp, #12
   1afb0:	ldr	r3, [r3]
   1afb4:	ldr	r0, [pc, #232]	; 1b0a4 <__assert_fail@plt+0x8908>
   1afb8:	str	r3, [sp, #4]
   1afbc:	bl	2021c <__assert_fail@plt+0xda80>
   1afc0:	mov	r2, #5
   1afc4:	ldr	r1, [pc, #220]	; 1b0a8 <__assert_fail@plt+0x890c>
   1afc8:	mov	r0, #0
   1afcc:	bl	1222c <dcgettext@plt>
   1afd0:	ldr	r4, [pc, #212]	; 1b0ac <__assert_fail@plt+0x8910>
   1afd4:	mov	r1, r0
   1afd8:	mov	r0, #1
   1afdc:	bl	12550 <__printf_chk@plt>
   1afe0:	ldr	r1, [pc, #200]	; 1b0b0 <__assert_fail@plt+0x8914>
   1afe4:	mov	r0, #1
   1afe8:	bl	12550 <__printf_chk@plt>
   1afec:	ldrb	r0, [r4, #56]	; 0x38
   1aff0:	ldr	r3, [pc, #188]	; 1b0b4 <__assert_fail@plt+0x8918>
   1aff4:	ldr	r2, [pc, #188]	; 1b0b8 <__assert_fail@plt+0x891c>
   1aff8:	cmp	r0, #0
   1affc:	moveq	r2, r3
   1b000:	ldr	r1, [pc, #180]	; 1b0bc <__assert_fail@plt+0x8920>
   1b004:	mov	r0, #1
   1b008:	bl	12550 <__printf_chk@plt>
   1b00c:	ldr	r1, [pc, #172]	; 1b0c0 <__assert_fail@plt+0x8924>
   1b010:	mov	r0, #1
   1b014:	bl	12550 <__printf_chk@plt>
   1b018:	bl	120c4 <is_selinux_enabled@plt>
   1b01c:	cmp	r0, #0
   1b020:	ble	1b030 <__assert_fail@plt+0x8894>
   1b024:	ldr	r1, [pc, #152]	; 1b0c4 <__assert_fail@plt+0x8928>
   1b028:	mov	r0, #1
   1b02c:	bl	12550 <__printf_chk@plt>
   1b030:	mov	r3, #0
   1b034:	mov	r0, sp
   1b038:	str	r3, [sp]
   1b03c:	bl	13598 <__assert_fail@plt+0xdfc>
   1b040:	cmp	r0, #0
   1b044:	bne	1b068 <__assert_fail@plt+0x88cc>
   1b048:	ldrh	r2, [r4, #68]	; 0x44
   1b04c:	ldr	r1, [pc, #116]	; 1b0c8 <__assert_fail@plt+0x892c>
   1b050:	mov	r0, #1
   1b054:	bl	12550 <__printf_chk@plt>
   1b058:	mov	r0, #10
   1b05c:	bl	12520 <putchar@plt>
   1b060:	mov	r0, #0
   1b064:	bl	12478 <exit@plt>
   1b068:	ldr	r1, [pc, #92]	; 1b0cc <__assert_fail@plt+0x8930>
   1b06c:	mov	r0, #1
   1b070:	bl	12550 <__printf_chk@plt>
   1b074:	ldr	r3, [sp]
   1b078:	tst	r3, #512	; 0x200
   1b07c:	bne	1b090 <__assert_fail@plt+0x88f4>
   1b080:	ldr	r1, [pc, #72]	; 1b0d0 <__assert_fail@plt+0x8934>
   1b084:	mov	r0, #1
   1b088:	bl	12550 <__printf_chk@plt>
   1b08c:	b	1b048 <__assert_fail@plt+0x88ac>
   1b090:	ldr	r1, [pc, #60]	; 1b0d4 <__assert_fail@plt+0x8938>
   1b094:	mov	r0, #1
   1b098:	bl	12550 <__printf_chk@plt>
   1b09c:	b	1b080 <__assert_fail@plt+0x88e4>
   1b0a0:	andeq	fp, r5, r0, ror #24
   1b0a4:	andeq	r4, r4, ip, ror #6
   1b0a8:	andeq	r6, r4, r0, lsr #28
   1b0ac:	andeq	ip, r5, ip, asr lr
   1b0b0:	andeq	r6, r4, r4, lsr lr
   1b0b4:	andeq	r6, r4, r4, lsl lr
   1b0b8:	andeq	r6, r4, ip, lsl #28
   1b0bc:	andeq	r6, r4, ip, lsr lr
   1b0c0:	andeq	r6, r4, ip, asr #28
   1b0c4:	andeq	r6, r4, r0, ror #28
   1b0c8:	andeq	r6, r4, r0, lsl #29
   1b0cc:	andeq	r6, r4, ip, ror #28
   1b0d0:	andeq	r6, r4, ip, lsl #29
   1b0d4:	andeq	r6, r4, r4, ror lr
   1b0d8:	push	{r4, lr}
   1b0dc:	mov	r0, #0
   1b0e0:	bl	179a0 <__assert_fail@plt+0x5204>
   1b0e4:	push	{r4, lr}
   1b0e8:	bl	17998 <__assert_fail@plt+0x51fc>
   1b0ec:	mov	r2, #1065353216	; 0x3f800000
   1b0f0:	mov	r1, #0
   1b0f4:	mov	r3, r0
   1b0f8:	strh	r1, [r0, #18]
   1b0fc:	mov	r0, #1
   1b100:	str	r2, [r3, #28]
   1b104:	pop	{r4, pc}
   1b108:	push	{r4, lr}
   1b10c:	bl	17998 <__assert_fail@plt+0x51fc>
   1b110:	mov	r2, #1065353216	; 0x3f800000
   1b114:	mov	r3, r0
   1b118:	mov	r0, #1
   1b11c:	str	r0, [r3, #16]
   1b120:	str	r2, [r3, #28]
   1b124:	pop	{r4, pc}
   1b128:	push	{r4, lr}
   1b12c:	bl	17998 <__assert_fail@plt+0x51fc>
   1b130:	ldr	r3, [pc, #24]	; 1b150 <__assert_fail@plt+0x89b4>
   1b134:	ldrb	r3, [r3]
   1b138:	cmp	r3, #0
   1b13c:	strheq	r3, [r0, #18]
   1b140:	mov	r3, #1
   1b144:	strh	r3, [r0, #16]
   1b148:	mov	r0, r3
   1b14c:	pop	{r4, pc}
   1b150:	andeq	ip, r5, ip, asr lr
   1b154:	push	{r4, lr}
   1b158:	bl	17998 <__assert_fail@plt+0x51fc>
   1b15c:	ldr	r3, [pc, #8]	; 1b16c <__assert_fail@plt+0x89d0>
   1b160:	str	r3, [r0, #28]
   1b164:	mov	r0, #1
   1b168:	pop	{r4, pc}
   1b16c:	bcc	fe0dfb30 <stdout@@GLIBC_2.4+0xfe0835ec>
   1b170:	push	{r4, lr}
   1b174:	bl	17998 <__assert_fail@plt+0x51fc>
   1b178:	ldr	r2, [pc, #48]	; 1b1b0 <__assert_fail@plt+0x8a14>
   1b17c:	vldr	s14, [pc, #36]	; 1b1a8 <__assert_fail@plt+0x8a0c>
   1b180:	vldr	s15, [pc, #36]	; 1b1ac <__assert_fail@plt+0x8a10>
   1b184:	ldr	r1, [r0]
   1b188:	mov	r3, r0
   1b18c:	cmp	r1, r2
   1b190:	mov	r2, #0
   1b194:	vmovne.f32	s15, s14
   1b198:	str	r2, [r0, #16]
   1b19c:	mov	r0, #1
   1b1a0:	vstr	s15, [r3, #28]
   1b1a4:	pop	{r4, pc}
   1b1a8:	svccc	0x00666666
   1b1ac:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1b1b0:	andeq	r3, r1, r0, lsl #27
   1b1b4:	push	{r4, lr}
   1b1b8:	bl	17998 <__assert_fail@plt+0x51fc>
   1b1bc:	ldr	r3, [pc, #8]	; 1b1cc <__assert_fail@plt+0x8a30>
   1b1c0:	str	r3, [r0, #28]
   1b1c4:	mov	r0, #1
   1b1c8:	pop	{r4, pc}
   1b1cc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1b1d0:	push	{r4, lr}
   1b1d4:	bl	17998 <__assert_fail@plt+0x51fc>
   1b1d8:	ldr	r3, [pc, #28]	; 1b1fc <__assert_fail@plt+0x8a60>
   1b1dc:	ldr	ip, [pc, #28]	; 1b200 <__assert_fail@plt+0x8a64>
   1b1e0:	mov	r1, #1065353216	; 0x3f800000
   1b1e4:	mov	r2, #0
   1b1e8:	strb	r2, [r3]
   1b1ec:	str	ip, [r0, #16]
   1b1f0:	str	r1, [r0, #28]
   1b1f4:	mov	r0, #1
   1b1f8:	pop	{r4, pc}
   1b1fc:	andeq	ip, r5, ip, asr lr
   1b200:	andeq	r0, r0, r1, lsl #2
   1b204:	push	{r4, r5, r6, r7, r8, lr}
   1b208:	sub	sp, sp, #8
   1b20c:	ldr	r5, [pc, #756]	; 1b508 <__assert_fail@plt+0x8d6c>
   1b210:	ldr	ip, [pc, #756]	; 1b50c <__assert_fail@plt+0x8d70>
   1b214:	cmp	r3, r5
   1b218:	ldr	r6, [pc, #752]	; 1b510 <__assert_fail@plt+0x8d74>
   1b21c:	movne	r6, ip
   1b220:	subs	r4, r0, #0
   1b224:	beq	1b3ac <__assert_fail@plt+0x8c10>
   1b228:	ldr	ip, [r1]
   1b22c:	ldr	r7, [r4, ip, lsl #2]
   1b230:	cmp	r7, #0
   1b234:	beq	1b44c <__assert_fail@plt+0x8cb0>
   1b238:	add	ip, ip, #1
   1b23c:	str	ip, [r1]
   1b240:	ldrb	r8, [r7]
   1b244:	mov	r0, r2
   1b248:	mov	r4, r3
   1b24c:	cmp	r8, #0
   1b250:	beq	1b4c8 <__assert_fail@plt+0x8d2c>
   1b254:	mov	r1, r3
   1b258:	mov	r2, r7
   1b25c:	bl	1790c <__assert_fail@plt+0x5170>
   1b260:	cmp	r4, r5
   1b264:	mov	r3, #0
   1b268:	str	r3, [r0, #28]
   1b26c:	movne	r3, #256	; 0x100
   1b270:	moveq	r3, #1
   1b274:	strhne	r3, [r0, #18]
   1b278:	strheq	r3, [r0, #18]
   1b27c:	ldrb	r5, [r7]
   1b280:	cmp	r5, #0
   1b284:	beq	1b43c <__assert_fail@plt+0x8ca0>
   1b288:	vldr	s7, [pc, #604]	; 1b4ec <__assert_fail@plt+0x8d50>
   1b28c:	vldr	s9, [pc, #604]	; 1b4f0 <__assert_fail@plt+0x8d54>
   1b290:	vldr	s10, [pc, #604]	; 1b4f4 <__assert_fail@plt+0x8d58>
   1b294:	vldr	s11, [pc, #604]	; 1b4f8 <__assert_fail@plt+0x8d5c>
   1b298:	vldr	s12, [pc, #604]	; 1b4fc <__assert_fail@plt+0x8d60>
   1b29c:	vldr	s13, [pc, #604]	; 1b500 <__assert_fail@plt+0x8d64>
   1b2a0:	vldr	s8, [pc, #604]	; 1b504 <__assert_fail@plt+0x8d68>
   1b2a4:	sub	r5, r5, #68	; 0x44
   1b2a8:	cmp	r5, #47	; 0x2f
   1b2ac:	ldrls	pc, [pc, r5, lsl #2]
   1b2b0:	b	1b488 <__assert_fail@plt+0x8cec>
   1b2b4:	andeq	fp, r1, ip, asr r4
   1b2b8:	andeq	fp, r1, r8, lsl #9
   1b2bc:	andeq	fp, r1, r8, lsl #9
   1b2c0:	andeq	fp, r1, r8, lsl #9
   1b2c4:	andeq	fp, r1, r8, lsl #9
   1b2c8:	andeq	fp, r1, r8, lsl #9
   1b2cc:	andeq	fp, r1, r8, lsl #9
   1b2d0:	andeq	fp, r1, r8, lsl #9
   1b2d4:	andeq	fp, r1, r8, lsl #9
   1b2d8:	andeq	fp, r1, r8, lsl #9
   1b2dc:	andeq	fp, r1, r8, lsl #9
   1b2e0:	andeq	fp, r1, r8, lsl #9
   1b2e4:	andeq	fp, r1, r8, lsl #9
   1b2e8:	andeq	fp, r1, r8, lsl #9
   1b2ec:	andeq	fp, r1, r8, lsl #9
   1b2f0:	andeq	fp, r1, r8, lsl #9
   1b2f4:	andeq	fp, r1, r8, lsl #9
   1b2f8:	andeq	fp, r1, r8, lsl #9
   1b2fc:	andeq	fp, r1, r8, lsl #9
   1b300:	andeq	fp, r1, r8, lsl #9
   1b304:	andeq	fp, r1, r8, lsl #9
   1b308:	andeq	fp, r1, r8, lsl #9
   1b30c:	andeq	fp, r1, r8, lsl #9
   1b310:	andeq	fp, r1, r8, lsl #9
   1b314:	andeq	fp, r1, r8, lsl #9
   1b318:	andeq	fp, r1, r8, lsl #9
   1b31c:	andeq	fp, r1, r8, lsl #9
   1b320:	andeq	fp, r1, r8, lsl #9
   1b324:	andeq	fp, r1, r8, lsl #9
   1b328:	andeq	fp, r1, r8, lsl #9
   1b32c:	andeq	fp, r1, r4, ror r3
   1b330:	strdeq	fp, [r1], -r4
   1b334:	andeq	fp, r1, r8, ror #7
   1b338:	andeq	fp, r1, r8, lsl #9
   1b33c:	ldrdeq	fp, [r1], -ip
   1b340:	andeq	fp, r1, r8, lsl #9
   1b344:	andeq	fp, r1, r8, lsl #9
   1b348:	andeq	fp, r1, r8, lsl #9
   1b34c:	andeq	fp, r1, r8, lsl #9
   1b350:	andeq	fp, r1, r8, lsl #9
   1b354:	ldrdeq	fp, [r1], -r0
   1b358:	andeq	fp, r1, r8, lsl #9
   1b35c:	andeq	fp, r1, r8, lsl #9
   1b360:	andeq	fp, r1, r8, lsl #9
   1b364:	andeq	fp, r1, r4, asr #7
   1b368:	andeq	fp, r1, r8, lsl #9
   1b36c:	andeq	fp, r1, r8, lsl #9
   1b370:			; <UNDEFINED> instruction: 0x0001b3b8
   1b374:	vmov.f32	s14, s9
   1b378:	mov	r3, #0
   1b37c:	add	r3, r0, r3
   1b380:	ldrb	r5, [r3, #40]	; 0x28
   1b384:	cmp	r5, #0
   1b388:	bne	1b494 <__assert_fail@plt+0x8cf8>
   1b38c:	vldr	s15, [r0, #28]
   1b390:	mov	r4, #1
   1b394:	vadd.f32	s15, s15, s14
   1b398:	vstr	s15, [r0, #28]
   1b39c:	strb	r4, [r3, #40]	; 0x28
   1b3a0:	ldrb	r3, [r7, #1]
   1b3a4:	cmp	r3, #0
   1b3a8:	bne	1b400 <__assert_fail@plt+0x8c64>
   1b3ac:	mov	r0, r4
   1b3b0:	add	sp, sp, #8
   1b3b4:	pop	{r4, r5, r6, r7, r8, pc}
   1b3b8:	vmov.f32	s14, s10
   1b3bc:	mov	r3, #6
   1b3c0:	b	1b37c <__assert_fail@plt+0x8be0>
   1b3c4:	vmov.f32	s14, s11
   1b3c8:	mov	r3, #5
   1b3cc:	b	1b37c <__assert_fail@plt+0x8be0>
   1b3d0:	vmov.f32	s14, s12
   1b3d4:	mov	r3, #4
   1b3d8:	b	1b37c <__assert_fail@plt+0x8be0>
   1b3dc:	vmov.f32	s14, s13
   1b3e0:	mov	r3, #3
   1b3e4:	b	1b37c <__assert_fail@plt+0x8be0>
   1b3e8:	vmov.f32	s14, s7
   1b3ec:	mov	r3, #2
   1b3f0:	b	1b37c <__assert_fail@plt+0x8be0>
   1b3f4:	vmov.f32	s14, s8
   1b3f8:	mov	r3, #1
   1b3fc:	b	1b37c <__assert_fail@plt+0x8be0>
   1b400:	cmp	r3, #44	; 0x2c
   1b404:	bne	1b4bc <__assert_fail@plt+0x8d20>
   1b408:	ldrb	r5, [r7, #2]
   1b40c:	add	r7, r7, #2
   1b410:	cmp	r5, #0
   1b414:	bne	1b2a4 <__assert_fail@plt+0x8b08>
   1b418:	ldr	r1, [pc, #244]	; 1b514 <__assert_fail@plt+0x8d78>
   1b41c:	mov	r2, #5
   1b420:	mov	r0, r5
   1b424:	bl	1222c <dcgettext@plt>
   1b428:	mov	r3, r6
   1b42c:	mov	r1, r5
   1b430:	mov	r2, r0
   1b434:	mov	r0, r4
   1b438:	bl	12388 <error@plt>
   1b43c:	mov	r4, #1
   1b440:	mov	r0, r4
   1b444:	add	sp, sp, #8
   1b448:	pop	{r4, r5, r6, r7, r8, pc}
   1b44c:	mov	r4, r7
   1b450:	mov	r0, r4
   1b454:	add	sp, sp, #8
   1b458:	pop	{r4, r5, r6, r7, r8, pc}
   1b45c:	ldr	r1, [pc, #180]	; 1b518 <__assert_fail@plt+0x8d7c>
   1b460:	mov	r2, #5
   1b464:	mov	r0, #0
   1b468:	bl	1222c <dcgettext@plt>
   1b46c:	ldrb	r2, [r7]
   1b470:	mov	r3, r6
   1b474:	mov	r1, #0
   1b478:	str	r2, [sp]
   1b47c:	mov	r2, r0
   1b480:	mov	r0, #1
   1b484:	bl	12388 <error@plt>
   1b488:	mov	r2, #5
   1b48c:	ldr	r1, [pc, #136]	; 1b51c <__assert_fail@plt+0x8d80>
   1b490:	b	1b464 <__assert_fail@plt+0x8cc8>
   1b494:	mov	r2, #5
   1b498:	ldr	r1, [pc, #128]	; 1b520 <__assert_fail@plt+0x8d84>
   1b49c:	mov	r0, #0
   1b4a0:	bl	1222c <dcgettext@plt>
   1b4a4:	ldrb	r3, [r7]
   1b4a8:	mov	r1, #0
   1b4ac:	str	r6, [sp]
   1b4b0:	mov	r2, r0
   1b4b4:	mov	r0, #1
   1b4b8:	bl	12388 <error@plt>
   1b4bc:	mov	r2, #5
   1b4c0:	ldr	r1, [pc, #92]	; 1b524 <__assert_fail@plt+0x8d88>
   1b4c4:	b	1b420 <__assert_fail@plt+0x8c84>
   1b4c8:	mov	r2, #5
   1b4cc:	ldr	r1, [pc, #84]	; 1b528 <__assert_fail@plt+0x8d8c>
   1b4d0:	mov	r0, r8
   1b4d4:	bl	1222c <dcgettext@plt>
   1b4d8:	mov	r3, r6
   1b4dc:	mov	r1, r8
   1b4e0:	mov	r2, r0
   1b4e4:	mov	r0, #1
   1b4e8:	bl	12388 <error@plt>
   1b4ec:	ldccc	3, cr13, [ip, #364]!	; 0x16c
   1b4f0:	bcc	1a4d7a8 <stdout@@GLIBC_2.4+0x19f1264>
   1b4f4:			; <UNDEFINED> instruction: 0x378560fd
   1b4f8:	usatcc	r7, #29, lr, asr #16
   1b4fc:	cfldr64cc	mvdx12, [lr], #436	; 0x1b4
   1b500:	svccc	0x00600000
   1b504:	stmibcc	r8!, {r2, r4, r5, r6, r9, lr}^
   1b508:	muleq	r1, r8, r7
   1b50c:	muleq	r4, r8, lr
   1b510:	muleq	r4, r0, lr
   1b514:	andeq	r6, r4, r4, asr #31
   1b518:	ldrdeq	r6, [r4], -r4
   1b51c:	andeq	r6, r4, ip, lsr pc
   1b520:	andeq	r6, r4, r8, asr pc
   1b524:	muleq	r4, r0, pc	; <UNPREDICTABLE>
   1b528:	andeq	r6, r4, r0, lsr #29
   1b52c:	mov	r3, r1
   1b530:	mov	ip, r2
   1b534:	mov	r1, ip
   1b538:	mov	r2, r0
   1b53c:	mov	r0, r3
   1b540:	ldr	r3, [pc]	; 1b548 <__assert_fail@plt+0x8dac>
   1b544:	b	1b204 <__assert_fail@plt+0x8a68>
   1b548:	muleq	r1, r8, r7
   1b54c:	mov	r3, r1
   1b550:	mov	ip, r2
   1b554:	mov	r1, ip
   1b558:	mov	r2, r0
   1b55c:	mov	r0, r3
   1b560:	ldr	r3, [pc]	; 1b568 <__assert_fail@plt+0x8dcc>
   1b564:	b	1b204 <__assert_fail@plt+0x8a68>
   1b568:	andeq	r4, r1, r4, lsr #2
   1b56c:	cmp	r1, #0
   1b570:	beq	1b66c <__assert_fail@plt+0x8ed0>
   1b574:	ldr	r3, [r2]
   1b578:	push	{r4, r5, r6, lr}
   1b57c:	ldr	r4, [r1, r3, lsl #2]
   1b580:	cmp	r4, #0
   1b584:	beq	1b648 <__assert_fail@plt+0x8eac>
   1b588:	add	r3, r3, #1
   1b58c:	str	r3, [r2]
   1b590:	mov	r5, r0
   1b594:	mov	r0, r4
   1b598:	bl	120b8 <getpwnam@plt>
   1b59c:	mov	r6, r0
   1b5a0:	bl	12610 <endpwent@plt>
   1b5a4:	cmp	r6, #0
   1b5a8:	beq	1b5e0 <__assert_fail@plt+0x8e44>
   1b5ac:	ldr	r6, [r6, #8]
   1b5b0:	mov	r1, r4
   1b5b4:	mov	r0, r5
   1b5b8:	bl	17940 <__assert_fail@plt+0x51a4>
   1b5bc:	vldr	s14, [pc, #200]	; 1b68c <__assert_fail@plt+0x8ef0>
   1b5c0:	vldr	s15, [pc, #200]	; 1b690 <__assert_fail@plt+0x8ef4>
   1b5c4:	cmp	r6, #100	; 0x64
   1b5c8:	vmovcs.f32	s15, s14
   1b5cc:	mov	r3, r0
   1b5d0:	str	r6, [r0, #40]	; 0x28
   1b5d4:	mov	r0, #1
   1b5d8:	vstr	s15, [r3, #28]
   1b5dc:	pop	{r4, r5, r6, pc}
   1b5e0:	ldr	r1, [pc, #172]	; 1b694 <__assert_fail@plt+0x8ef8>
   1b5e4:	mov	r0, r4
   1b5e8:	bl	12790 <strspn@plt>
   1b5ec:	cmp	r0, #0
   1b5f0:	beq	1b600 <__assert_fail@plt+0x8e64>
   1b5f4:	ldrb	r3, [r4, r0]
   1b5f8:	cmp	r3, #0
   1b5fc:	beq	1b674 <__assert_fail@plt+0x8ed8>
   1b600:	ldrb	r5, [r4]
   1b604:	mov	r2, #5
   1b608:	cmp	r5, #0
   1b60c:	beq	1b650 <__assert_fail@plt+0x8eb4>
   1b610:	ldr	r1, [pc, #128]	; 1b698 <__assert_fail@plt+0x8efc>
   1b614:	mov	r0, #0
   1b618:	bl	1222c <dcgettext@plt>
   1b61c:	ldr	r3, [pc, #120]	; 1b69c <__assert_fail@plt+0x8f00>
   1b620:	mov	r2, r4
   1b624:	ldr	r1, [r3, #72]	; 0x48
   1b628:	mov	r5, r0
   1b62c:	mov	r0, #0
   1b630:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1b634:	mov	r2, r5
   1b638:	mov	r1, #0
   1b63c:	mov	r3, r0
   1b640:	mov	r0, #1
   1b644:	bl	12388 <error@plt>
   1b648:	mov	r0, r4
   1b64c:	pop	{r4, r5, r6, pc}
   1b650:	ldr	r1, [pc, #72]	; 1b6a0 <__assert_fail@plt+0x8f04>
   1b654:	mov	r0, r5
   1b658:	bl	1222c <dcgettext@plt>
   1b65c:	mov	r1, r5
   1b660:	mov	r2, r0
   1b664:	mov	r0, #1
   1b668:	bl	12388 <error@plt>
   1b66c:	mov	r0, r1
   1b670:	bx	lr
   1b674:	ldr	r3, [pc, #32]	; 1b69c <__assert_fail@plt+0x8f00>
   1b678:	mov	r0, r4
   1b67c:	ldr	r1, [r3, #72]	; 0x48
   1b680:	bl	21094 <__assert_fail@plt+0xe8f8>
   1b684:	mov	r6, r0
   1b688:	b	1b5b0 <__assert_fail@plt+0x8e14>
   1b68c:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1b690:	svccc	0x007d70a4
   1b694:	andeq	r7, r4, r4, lsl r0
   1b698:	andeq	r7, r4, r0, lsr #32
   1b69c:	andeq	ip, r5, ip, asr lr
   1b6a0:	andeq	r7, r4, r4, asr #32
   1b6a4:	push	{r4, lr}
   1b6a8:	mov	r1, #0
   1b6ac:	bl	17940 <__assert_fail@plt+0x51a4>
   1b6b0:	ldr	r3, [pc, #8]	; 1b6c0 <__assert_fail@plt+0x8f24>
   1b6b4:	str	r3, [r0, #28]
   1b6b8:	mov	r0, #1
   1b6bc:	pop	{r4, pc}
   1b6c0:	ldmcc	r1, {r0, r1, r2, r4, r8, r9, sl, ip, sp, pc}^
   1b6c4:	push	{r4, r5, r6, lr}
   1b6c8:	subs	r4, r1, #0
   1b6cc:	beq	1b71c <__assert_fail@plt+0x8f80>
   1b6d0:	ldr	r3, [r2]
   1b6d4:	ldr	r4, [r4, r3, lsl #2]
   1b6d8:	cmp	r4, #0
   1b6dc:	beq	1b71c <__assert_fail@plt+0x8f80>
   1b6e0:	add	r3, r3, #1
   1b6e4:	mov	r1, r4
   1b6e8:	str	r3, [r2]
   1b6ec:	bl	17940 <__assert_fail@plt+0x51a4>
   1b6f0:	ldr	r1, [pc, #52]	; 1b72c <__assert_fail@plt+0x8f90>
   1b6f4:	str	r4, [r0, #40]	; 0x28
   1b6f8:	mov	r5, r0
   1b6fc:	mov	r0, r4
   1b700:	bl	126d0 <strpbrk@plt>
   1b704:	vldr	s15, [pc, #24]	; 1b724 <__assert_fail@plt+0x8f88>
   1b708:	vldr	s14, [pc, #24]	; 1b728 <__assert_fail@plt+0x8f8c>
   1b70c:	mov	r4, #1
   1b710:	cmp	r0, #0
   1b714:	vmoveq.f32	s15, s14
   1b718:	vstr	s15, [r5, #28]
   1b71c:	mov	r0, r4
   1b720:	pop	{r4, r5, r6, pc}
   1b724:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1b728:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1b72c:	andeq	r7, r4, r0, ror r0
   1b730:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b734:	vpush	{d8}
   1b738:	ldr	r7, [pc, #368]	; 1b8b0 <__assert_fail@plt+0x9114>
   1b73c:	mov	r5, r0
   1b740:	mov	r6, r1
   1b744:	ldrb	r0, [r0]
   1b748:	sub	sp, sp, #32
   1b74c:	mov	ip, sp
   1b750:	ldr	lr, [r7]
   1b754:	cmp	r0, #43	; 0x2b
   1b758:	vmov.f64	d8, d0
   1b75c:	str	lr, [sp, #28]
   1b760:	stm	ip, {r2, r3}
   1b764:	ldr	r9, [sp, #72]	; 0x48
   1b768:	mov	r8, r2
   1b76c:	mov	r4, r3
   1b770:	beq	1b85c <__assert_fail@plt+0x90c0>
   1b774:	cmp	r0, #45	; 0x2d
   1b778:	beq	1b86c <__assert_fail@plt+0x90d0>
   1b77c:	mov	r3, #2
   1b780:	str	r3, [r1, #4]
   1b784:	ldr	r3, [pc, #296]	; 1b8b4 <__assert_fail@plt+0x9118>
   1b788:	add	r2, sp, #8
   1b78c:	mov	r1, #0
   1b790:	mov	r0, r5
   1b794:	bl	2e1a0 <__assert_fail@plt+0x1ba04>
   1b798:	subs	sl, r0, #0
   1b79c:	bne	1b7c0 <__assert_fail@plt+0x9024>
   1b7a0:	ldr	r2, [sp, #28]
   1b7a4:	ldr	r3, [r7]
   1b7a8:	mov	r0, sl
   1b7ac:	cmp	r2, r3
   1b7b0:	bne	1b87c <__assert_fail@plt+0x90e0>
   1b7b4:	add	sp, sp, #32
   1b7b8:	vpop	{d8}
   1b7bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b7c0:	vldr	d0, [sp, #8]
   1b7c4:	add	r0, sp, #16
   1b7c8:	vmul.f64	d0, d8, d0
   1b7cc:	bl	1243c <modf@plt>
   1b7d0:	vldr	d7, [pc, #208]	; 1b8a8 <__assert_fail@plt+0x910c>
   1b7d4:	vmul.f64	d0, d0, d7
   1b7d8:	vcmpe.f64	d0, d7
   1b7dc:	vmrs	APSR_nzcv, fpscr
   1b7e0:	bpl	1b880 <__assert_fail@plt+0x90e4>
   1b7e4:	vmov	s15, r8
   1b7e8:	vcvt.f64.s32	d6, s15
   1b7ec:	vldr	d7, [sp, #16]
   1b7f0:	vcmpe.f64	d7, #0.0
   1b7f4:	vsub.f64	d6, d6, d7
   1b7f8:	vmrs	APSR_nzcv, fpscr
   1b7fc:	movmi	r2, #1
   1b800:	movpl	r2, #0
   1b804:	vcvt.s32.f64	s15, d6
   1b808:	vmov	r3, s15
   1b80c:	vstr	s15, [r6, #8]
   1b810:	cmp	r3, r8
   1b814:	movle	r8, #0
   1b818:	movgt	r8, #1
   1b81c:	cmp	r8, r2
   1b820:	bne	1b894 <__assert_fail@plt+0x90f8>
   1b824:	vmov	s15, r4
   1b828:	vcvt.f64.s32	d7, s15
   1b82c:	vcmpe.f64	d7, d0
   1b830:	vsub.f64	d7, d7, d0
   1b834:	vmrs	APSR_nzcv, fpscr
   1b838:	ldrmi	r2, [pc, #120]	; 1b8b8 <__assert_fail@plt+0x911c>
   1b83c:	vcvt.s32.f64	s14, d7
   1b840:	submi	r3, r3, #1
   1b844:	strmi	r3, [r6, #8]
   1b848:	vmovmi	r1, s14
   1b84c:	vstrpl	s14, [r6, #12]
   1b850:	addmi	r2, r1, r2
   1b854:	strmi	r2, [r6, #12]
   1b858:	b	1b7a0 <__assert_fail@plt+0x9004>
   1b85c:	mov	r3, #1
   1b860:	add	r5, r5, r3
   1b864:	str	r3, [r1, #4]
   1b868:	b	1b784 <__assert_fail@plt+0x8fe8>
   1b86c:	mov	r3, #0
   1b870:	add	r5, r5, #1
   1b874:	str	r3, [r1, #4]
   1b878:	b	1b784 <__assert_fail@plt+0x8fe8>
   1b87c:	bl	12244 <__stack_chk_fail@plt>
   1b880:	ldr	r3, [pc, #52]	; 1b8bc <__assert_fail@plt+0x9120>
   1b884:	ldr	r2, [pc, #52]	; 1b8c0 <__assert_fail@plt+0x9124>
   1b888:	ldr	r1, [pc, #52]	; 1b8c4 <__assert_fail@plt+0x9128>
   1b88c:	ldr	r0, [pc, #52]	; 1b8c8 <__assert_fail@plt+0x912c>
   1b890:	bl	1279c <__assert_fail@plt>
   1b894:	mov	r3, r5
   1b898:	mov	r2, r9
   1b89c:	mov	r1, #0
   1b8a0:	mov	r0, #1
   1b8a4:	bl	12388 <error@plt>
   1b8a8:	andeq	r0, r0, r0
   1b8ac:	bicmi	ip, sp, r5, ror #26
   1b8b0:	andeq	fp, r5, r0, ror #24
   1b8b4:	andeq	r2, r1, ip, asr r5
   1b8b8:	blcc	fe6ce0c0 <stdout@@GLIBC_2.4+0xfe671b7c>
   1b8bc:	andeq	r6, r4, r4, asr r8
   1b8c0:	andeq	r0, r0, r8, asr #24
   1b8c4:	andeq	r7, r4, r4, ror r0
   1b8c8:	andeq	r7, r4, r0, lsl #1
   1b8cc:	push	{r4, lr}
   1b8d0:	sub	sp, sp, #16
   1b8d4:	ldr	r4, [pc, #132]	; 1b960 <__assert_fail@plt+0x91c4>
   1b8d8:	cmp	r0, #0
   1b8dc:	ldr	ip, [r4]
   1b8e0:	str	ip, [sp, #12]
   1b8e4:	beq	1b928 <__assert_fail@plt+0x918c>
   1b8e8:	ldrb	r3, [r0]
   1b8ec:	cmp	r3, #43	; 0x2b
   1b8f0:	beq	1b94c <__assert_fail@plt+0x91b0>
   1b8f4:	cmp	r3, #45	; 0x2d
   1b8f8:	bne	1b940 <__assert_fail@plt+0x91a4>
   1b8fc:	mov	r3, #1
   1b900:	add	r0, r0, r3
   1b904:	str	r3, [r2]
   1b908:	ldr	r2, [pc, #84]	; 1b964 <__assert_fail@plt+0x91c8>
   1b90c:	mov	r3, r1
   1b910:	str	r2, [sp]
   1b914:	add	r1, sp, #8
   1b918:	mov	r2, #10
   1b91c:	bl	2e8b8 <__assert_fail@plt+0x1c11c>
   1b920:	clz	r0, r0
   1b924:	lsr	r0, r0, #5
   1b928:	ldr	r2, [sp, #12]
   1b92c:	ldr	r3, [r4]
   1b930:	cmp	r2, r3
   1b934:	bne	1b95c <__assert_fail@plt+0x91c0>
   1b938:	add	sp, sp, #16
   1b93c:	pop	{r4, pc}
   1b940:	mov	r3, #2
   1b944:	str	r3, [r2]
   1b948:	b	1b908 <__assert_fail@plt+0x916c>
   1b94c:	mov	r3, #0
   1b950:	add	r0, r0, #1
   1b954:	str	r3, [r2]
   1b958:	b	1b908 <__assert_fail@plt+0x916c>
   1b95c:	bl	12244 <__stack_chk_fail@plt>
   1b960:	andeq	fp, r5, r0, ror #24
   1b964:	andeq	r8, r4, r0, lsr r6
   1b968:	push	{r4, r5, r6, r7, r8, lr}
   1b96c:	sub	sp, sp, #32
   1b970:	ldr	r5, [pc, #292]	; 1ba9c <__assert_fail@plt+0x9300>
   1b974:	subs	r4, r0, #0
   1b978:	ldr	r3, [r5]
   1b97c:	str	r3, [sp, #28]
   1b980:	beq	1b9bc <__assert_fail@plt+0x9220>
   1b984:	ldr	r3, [r1]
   1b988:	ldr	r4, [r4, r3, lsl #2]
   1b98c:	cmp	r4, #0
   1b990:	beq	1b9bc <__assert_fail@plt+0x9220>
   1b994:	add	r3, r3, #1
   1b998:	str	r3, [r1]
   1b99c:	mov	r0, r4
   1b9a0:	mov	r6, r2
   1b9a4:	add	r1, sp, #16
   1b9a8:	add	r2, sp, #12
   1b9ac:	bl	1b8cc <__assert_fail@plt+0x9130>
   1b9b0:	cmp	r0, #0
   1b9b4:	moveq	r4, r0
   1b9b8:	bne	1b9d8 <__assert_fail@plt+0x923c>
   1b9bc:	ldr	r2, [sp, #28]
   1b9c0:	ldr	r3, [r5]
   1b9c4:	mov	r0, r4
   1b9c8:	cmp	r2, r3
   1b9cc:	bne	1ba98 <__assert_fail@plt+0x92fc>
   1b9d0:	add	sp, sp, #32
   1b9d4:	pop	{r4, r5, r6, r7, r8, pc}
   1b9d8:	mov	r1, r4
   1b9dc:	mov	r0, r6
   1b9e0:	bl	17940 <__assert_fail@plt+0x51a4>
   1b9e4:	ldr	r1, [pc, #180]	; 1baa0 <__assert_fail@plt+0x9304>
   1b9e8:	ldrd	r2, [sp, #16]
   1b9ec:	ldr	r1, [r1, #44]	; 0x2c
   1b9f0:	tst	r1, #1
   1b9f4:	mov	r4, r0
   1b9f8:	ldr	r0, [sp, #12]
   1b9fc:	strd	r2, [r4, #48]	; 0x30
   1ba00:	str	r0, [r4, #40]	; 0x28
   1ba04:	beq	1b9bc <__assert_fail@plt+0x9220>
   1ba08:	ldr	r8, [pc, #148]	; 1baa4 <__assert_fail@plt+0x9308>
   1ba0c:	ldr	r2, [pc, #148]	; 1baa8 <__assert_fail@plt+0x930c>
   1ba10:	ldr	r3, [r4, #4]
   1ba14:	ldr	r0, [r8]
   1ba18:	mov	r1, #1
   1ba1c:	bl	12580 <__fprintf_chk@plt>
   1ba20:	ldr	r2, [sp, #12]
   1ba24:	ldr	r0, [r8]
   1ba28:	cmp	r2, #0
   1ba2c:	beq	1ba58 <__assert_fail@plt+0x92bc>
   1ba30:	cmp	r2, #1
   1ba34:	beq	1ba8c <__assert_fail@plt+0x92f0>
   1ba38:	ldr	ip, [pc, #108]	; 1baac <__assert_fail@plt+0x9310>
   1ba3c:	ldr	r1, [pc, #108]	; 1bab0 <__assert_fail@plt+0x9314>
   1ba40:	cmp	r2, #2
   1ba44:	ldr	r3, [pc, #104]	; 1bab4 <__assert_fail@plt+0x9318>
   1ba48:	ldr	r2, [pc, #104]	; 1bab8 <__assert_fail@plt+0x931c>
   1ba4c:	moveq	r3, ip
   1ba50:	movne	r2, r1
   1ba54:	b	1ba60 <__assert_fail@plt+0x92c4>
   1ba58:	ldr	r3, [pc, #92]	; 1babc <__assert_fail@plt+0x9320>
   1ba5c:	ldr	r2, [pc, #92]	; 1bac0 <__assert_fail@plt+0x9324>
   1ba60:	str	r2, [sp]
   1ba64:	mov	r1, #1
   1ba68:	ldr	r2, [pc, #84]	; 1bac4 <__assert_fail@plt+0x9328>
   1ba6c:	bl	12580 <__fprintf_chk@plt>
   1ba70:	ldrd	r6, [r4, #48]	; 0x30
   1ba74:	ldr	r0, [r8]
   1ba78:	ldr	r2, [pc, #72]	; 1bac8 <__assert_fail@plt+0x932c>
   1ba7c:	strd	r6, [sp]
   1ba80:	mov	r1, #1
   1ba84:	bl	12580 <__fprintf_chk@plt>
   1ba88:	b	1b9bc <__assert_fail@plt+0x9220>
   1ba8c:	ldr	r3, [pc, #56]	; 1bacc <__assert_fail@plt+0x9330>
   1ba90:	ldr	r2, [pc, #56]	; 1bad0 <__assert_fail@plt+0x9334>
   1ba94:	b	1ba60 <__assert_fail@plt+0x92c4>
   1ba98:	bl	12244 <__stack_chk_fail@plt>
   1ba9c:	andeq	fp, r5, r0, ror #24
   1baa0:	andeq	ip, r5, ip, asr lr
   1baa4:	andeq	ip, r5, r8, lsr r5
   1baa8:	strheq	r7, [r4], -r4
   1baac:	andeq	r7, r4, ip, lsr #1
   1bab0:	andeq	r7, r4, r8, lsr #1
   1bab4:	andeq	r7, r4, r8, asr #20
   1bab8:	strheq	r7, [r4], -r0
   1babc:	muleq	r4, ip, r0
   1bac0:	andeq	r7, r4, r0, lsr #1
   1bac4:	andeq	r7, r4, r4, asr #1
   1bac8:	ldrdeq	r7, [r4], -ip
   1bacc:	andeq	r9, r4, r8, lsl r6
   1bad0:	andeq	r7, r4, r4, lsr #1
   1bad4:	mov	r3, r1
   1bad8:	push	{r4, lr}
   1badc:	mov	r4, r2
   1bae0:	mov	r1, r4
   1bae4:	mov	r2, r0
   1bae8:	mov	r0, r3
   1baec:	bl	1b968 <__assert_fail@plt+0x91cc>
   1baf0:	subs	r3, r0, #0
   1baf4:	beq	1bb34 <__assert_fail@plt+0x9398>
   1baf8:	ldrd	r0, [r3, #48]	; 0x30
   1bafc:	cmp	r1, #0
   1bb00:	cmpeq	r0, #1
   1bb04:	beq	1bb24 <__assert_fail@plt+0x9388>
   1bb08:	cmp	r1, #0
   1bb0c:	cmpeq	r0, #2
   1bb10:	mov	r0, #1
   1bb14:	ldreq	r2, [pc, #44]	; 1bb48 <__assert_fail@plt+0x93ac>
   1bb18:	ldrne	r2, [pc, #44]	; 1bb4c <__assert_fail@plt+0x93b0>
   1bb1c:	str	r2, [r3, #28]
   1bb20:	pop	{r4, pc}
   1bb24:	ldr	r2, [pc, #36]	; 1bb50 <__assert_fail@plt+0x93b4>
   1bb28:	mov	r0, #1
   1bb2c:	str	r2, [r3, #28]
   1bb30:	pop	{r4, pc}
   1bb34:	ldr	r2, [r4]
   1bb38:	mov	r0, r3
   1bb3c:	sub	r2, r2, #1
   1bb40:	str	r2, [r4]
   1bb44:	pop	{r4, pc}
   1bb48:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1bb4c:	bcc	fe0e0510 <stdout@@GLIBC_2.4+0xfe083fcc>
   1bb50:	svccc	0x007d70a4
   1bb54:	mov	r3, r1
   1bb58:	push	{r4, lr}
   1bb5c:	mov	r4, r2
   1bb60:	mov	r1, r4
   1bb64:	mov	r2, r0
   1bb68:	mov	r0, r3
   1bb6c:	bl	1b968 <__assert_fail@plt+0x91cc>
   1bb70:	subs	r3, r0, #0
   1bb74:	movne	r0, #1
   1bb78:	ldreq	r2, [r4]
   1bb7c:	ldrne	r2, [pc, #28]	; 1bba0 <__assert_fail@plt+0x9404>
   1bb80:	movne	r1, #0
   1bb84:	subeq	r2, r2, #1
   1bb88:	strhne	r1, [r3, #18]
   1bb8c:	strne	r2, [r3, #28]
   1bb90:	strbne	r0, [r3, #20]
   1bb94:	moveq	r0, r3
   1bb98:	streq	r2, [r4]
   1bb9c:	pop	{r4, pc}
   1bba0:	strcc	r3, [r6, #1981]	; 0x7bd
   1bba4:	mov	r3, r1
   1bba8:	push	{r4, lr}
   1bbac:	mov	r4, r2
   1bbb0:	mov	r1, r4
   1bbb4:	mov	r2, r0
   1bbb8:	mov	r0, r3
   1bbbc:	bl	1b968 <__assert_fail@plt+0x91cc>
   1bbc0:	subs	r3, r0, #0
   1bbc4:	beq	1bbec <__assert_fail@plt+0x9450>
   1bbc8:	ldrd	r0, [r3, #48]	; 0x30
   1bbcc:	vldr	s14, [pc, #44]	; 1bc00 <__assert_fail@plt+0x9464>
   1bbd0:	vldr	s15, [pc, #44]	; 1bc04 <__assert_fail@plt+0x9468>
   1bbd4:	cmp	r1, #0
   1bbd8:	cmpeq	r0, #100	; 0x64
   1bbdc:	mov	r0, #1
   1bbe0:	vmovcs.f32	s15, s14
   1bbe4:	vstr	s15, [r3, #28]
   1bbe8:	pop	{r4, pc}
   1bbec:	ldr	r2, [r4]
   1bbf0:	mov	r0, r3
   1bbf4:	sub	r2, r2, #1
   1bbf8:	str	r2, [r4]
   1bbfc:	pop	{r4, pc}
   1bc00:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1bc04:	svccc	0x007d70a4
   1bc08:	b	1bba4 <__assert_fail@plt+0x9408>
   1bc0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bc10:	sub	sp, sp, #36	; 0x24
   1bc14:	ldr	r7, [pc, #816]	; 1bf4c <__assert_fail@plt+0x97b0>
   1bc18:	subs	r5, r1, #0
   1bc1c:	ldr	r3, [r7]
   1bc20:	str	r3, [sp, #28]
   1bc24:	beq	1be1c <__assert_fail@plt+0x9680>
   1bc28:	ldr	r3, [r2]
   1bc2c:	mov	r6, r2
   1bc30:	ldr	r4, [r5, r3, lsl #2]
   1bc34:	cmp	r4, #0
   1bc38:	beq	1bea8 <__assert_fail@plt+0x970c>
   1bc3c:	mov	r9, r0
   1bc40:	mov	r0, r4
   1bc44:	bl	1249c <strlen@plt>
   1bc48:	subs	r8, r0, #0
   1bc4c:	beq	1bf28 <__assert_fail@plt+0x978c>
   1bc50:	sub	r8, r8, #1
   1bc54:	ldrb	fp, [r4, r8]
   1bc58:	sub	r3, fp, #48	; 0x30
   1bc5c:	cmp	r3, #71	; 0x47
   1bc60:	ldrls	pc, [pc, r3, lsl #2]
   1bc64:	b	1bec8 <__assert_fail@plt+0x972c>
   1bc68:	andeq	fp, r1, r8, lsr lr
   1bc6c:	andeq	fp, r1, r8, lsr lr
   1bc70:	andeq	fp, r1, r8, lsr lr
   1bc74:	andeq	fp, r1, r8, lsr lr
   1bc78:	andeq	fp, r1, r8, lsr lr
   1bc7c:	andeq	fp, r1, r8, lsr lr
   1bc80:	andeq	fp, r1, r8, lsr lr
   1bc84:	andeq	fp, r1, r8, lsr lr
   1bc88:	andeq	fp, r1, r8, lsr lr
   1bc8c:	andeq	fp, r1, r8, lsr lr
   1bc90:	andeq	fp, r1, r8, asr #29
   1bc94:	andeq	fp, r1, r8, asr #29
   1bc98:	andeq	fp, r1, r8, asr #29
   1bc9c:	andeq	fp, r1, r8, asr #29
   1bca0:	andeq	fp, r1, r8, asr #29
   1bca4:	andeq	fp, r1, r8, asr #29
   1bca8:	andeq	fp, r1, r8, asr #29
   1bcac:	andeq	fp, r1, r8, asr #29
   1bcb0:	andeq	fp, r1, r8, asr #29
   1bcb4:	andeq	fp, r1, r8, asr #29
   1bcb8:	andeq	fp, r1, r8, asr #29
   1bcbc:	andeq	fp, r1, r8, asr #29
   1bcc0:	andeq	fp, r1, r8, asr #29
   1bcc4:	andeq	fp, r1, r4, lsl #29
   1bcc8:	andeq	fp, r1, r8, asr #29
   1bccc:	andeq	fp, r1, r8, asr #29
   1bcd0:	andeq	fp, r1, r8, asr #29
   1bcd4:	andeq	fp, r1, r8, asr #29
   1bcd8:	andeq	fp, r1, r8, asr #29
   1bcdc:	andeq	fp, r1, r4, asr #28
   1bce0:	andeq	fp, r1, r8, asr #29
   1bce4:	andeq	fp, r1, r8, asr #29
   1bce8:	andeq	fp, r1, r8, asr #29
   1bcec:	andeq	fp, r1, r8, asr #29
   1bcf0:	andeq	fp, r1, r8, asr #29
   1bcf4:	andeq	fp, r1, r8, asr #29
   1bcf8:	andeq	fp, r1, r8, asr #29
   1bcfc:	andeq	fp, r1, r8, asr #29
   1bd00:	andeq	fp, r1, r8, asr #29
   1bd04:	andeq	fp, r1, r8, asr #29
   1bd08:	andeq	fp, r1, r8, asr #29
   1bd0c:	andeq	fp, r1, r8, asr #29
   1bd10:	andeq	fp, r1, r8, asr #29
   1bd14:	andeq	fp, r1, r8, asr #29
   1bd18:	andeq	fp, r1, r8, asr #29
   1bd1c:	andeq	fp, r1, r8, asr #29
   1bd20:	andeq	fp, r1, r8, asr #29
   1bd24:	andeq	fp, r1, r8, asr #29
   1bd28:	andeq	fp, r1, r8, asr #29
   1bd2c:	andeq	fp, r1, r8, asr #29
   1bd30:	andeq	fp, r1, r4, asr lr
   1bd34:	andeq	fp, r1, r4, ror #28
   1bd38:	andeq	fp, r1, r8, asr #29
   1bd3c:	andeq	fp, r1, r8, asr #29
   1bd40:	andeq	fp, r1, r8, asr #29
   1bd44:	andeq	fp, r1, r8, asr #29
   1bd48:	andeq	fp, r1, r8, asr #29
   1bd4c:	andeq	fp, r1, r8, asr #29
   1bd50:	andeq	fp, r1, r8, asr #29
   1bd54:	andeq	fp, r1, r4, ror lr
   1bd58:	andeq	fp, r1, r8, asr #29
   1bd5c:	andeq	fp, r1, r8, asr #29
   1bd60:	andeq	fp, r1, r8, asr #29
   1bd64:	andeq	fp, r1, r8, asr #29
   1bd68:	andeq	fp, r1, r8, asr #29
   1bd6c:	andeq	fp, r1, r8, asr #29
   1bd70:	andeq	fp, r1, r8, asr #29
   1bd74:	andeq	fp, r1, r8, asr #29
   1bd78:	andeq	fp, r1, r8, asr #29
   1bd7c:	andeq	fp, r1, r8, asr #29
   1bd80:	andeq	fp, r1, r8, asr #29
   1bd84:	andeq	fp, r1, r8, lsl #27
   1bd88:	mov	sl, #2
   1bd8c:	mov	r3, #0
   1bd90:	strb	r3, [r4, r8]
   1bd94:	add	r2, sp, #12
   1bd98:	add	r1, sp, #16
   1bd9c:	mov	r0, r4
   1bda0:	bl	1b8cc <__assert_fail@plt+0x9130>
   1bda4:	subs	r5, r0, #0
   1bda8:	beq	1bef8 <__assert_fail@plt+0x975c>
   1bdac:	mov	r1, r4
   1bdb0:	mov	r0, r9
   1bdb4:	bl	17940 <__assert_fail@plt+0x51a4>
   1bdb8:	ldr	r2, [sp, #12]
   1bdbc:	ldr	r1, [sp, #16]
   1bdc0:	ldr	r3, [sp, #20]
   1bdc4:	mov	ip, #1
   1bdc8:	cmp	r2, #0
   1bdcc:	str	sl, [r0, #44]	; 0x2c
   1bdd0:	strh	ip, [r0, #18]
   1bdd4:	str	r2, [r0, #40]	; 0x28
   1bdd8:	str	r1, [r0, #48]	; 0x30
   1bddc:	str	r3, [r0, #52]	; 0x34
   1bde0:	bne	1be94 <__assert_fail@plt+0x96f8>
   1bde4:	mul	ip, sl, r3
   1bde8:	vldr	s15, [pc, #340]	; 1bf44 <__assert_fail@plt+0x97a8>
   1bdec:	asr	r9, sl, #31
   1bdf0:	umull	sl, fp, sl, r1
   1bdf4:	vldr	s14, [pc, #332]	; 1bf48 <__assert_fail@plt+0x97ac>
   1bdf8:	mla	r1, r1, r9, ip
   1bdfc:	add	fp, r1, fp
   1be00:	cmp	fp, #0
   1be04:	cmpeq	sl, #20480	; 0x5000
   1be08:	vmovls.f32	s15, s14
   1be0c:	vstr	s15, [r0, #28]
   1be10:	ldr	r3, [r6]
   1be14:	add	r3, r3, #1
   1be18:	str	r3, [r6]
   1be1c:	ldr	r2, [sp, #28]
   1be20:	ldr	r3, [r7]
   1be24:	mov	r0, r5
   1be28:	cmp	r2, r3
   1be2c:	bne	1bef4 <__assert_fail@plt+0x9758>
   1be30:	add	sp, sp, #36	; 0x24
   1be34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1be38:	mov	sl, #512	; 0x200
   1be3c:	mov	fp, #0
   1be40:	b	1bd94 <__assert_fail@plt+0x95f8>
   1be44:	mov	r3, #0
   1be48:	strb	r3, [r4, r8]
   1be4c:	mov	sl, #1048576	; 0x100000
   1be50:	b	1bd94 <__assert_fail@plt+0x95f8>
   1be54:	mov	r3, #0
   1be58:	strb	r3, [r4, r8]
   1be5c:	mov	sl, #512	; 0x200
   1be60:	b	1bd94 <__assert_fail@plt+0x95f8>
   1be64:	mov	r3, #0
   1be68:	strb	r3, [r4, r8]
   1be6c:	mov	sl, #1
   1be70:	b	1bd94 <__assert_fail@plt+0x95f8>
   1be74:	mov	r3, #0
   1be78:	strb	r3, [r4, r8]
   1be7c:	mov	sl, #1024	; 0x400
   1be80:	b	1bd94 <__assert_fail@plt+0x95f8>
   1be84:	mov	r3, #0
   1be88:	strb	r3, [r4, r8]
   1be8c:	mov	sl, #1073741824	; 0x40000000
   1be90:	b	1bd94 <__assert_fail@plt+0x95f8>
   1be94:	cmp	r2, #1
   1be98:	beq	1beb0 <__assert_fail@plt+0x9714>
   1be9c:	ldr	r3, [pc, #172]	; 1bf50 <__assert_fail@plt+0x97b4>
   1bea0:	str	r3, [r0, #28]
   1bea4:	b	1be10 <__assert_fail@plt+0x9674>
   1bea8:	mov	r5, r4
   1beac:	b	1be1c <__assert_fail@plt+0x9680>
   1beb0:	mul	ip, sl, r3
   1beb4:	vldr	s15, [pc, #140]	; 1bf48 <__assert_fail@plt+0x97ac>
   1beb8:	asr	r9, sl, #31
   1bebc:	vldr	s14, [pc, #128]	; 1bf44 <__assert_fail@plt+0x97a8>
   1bec0:	umull	sl, fp, sl, r1
   1bec4:	b	1bdf8 <__assert_fail@plt+0x965c>
   1bec8:	mov	r2, #5
   1becc:	ldr	r1, [pc, #128]	; 1bf54 <__assert_fail@plt+0x97b8>
   1bed0:	mov	r0, #0
   1bed4:	bl	1222c <dcgettext@plt>
   1bed8:	ldr	r3, [r6]
   1bedc:	mov	r1, #0
   1bee0:	ldr	r3, [r5, r3, lsl #2]
   1bee4:	ldrb	r3, [r3, r8]
   1bee8:	mov	r2, r0
   1beec:	mov	r0, #1
   1bef0:	bl	12388 <error@plt>
   1bef4:	bl	12244 <__stack_chk_fail@plt>
   1bef8:	mov	r2, #5
   1befc:	ldr	r1, [pc, #84]	; 1bf58 <__assert_fail@plt+0x97bc>
   1bf00:	strb	fp, [sp, #24]
   1bf04:	strb	r5, [sp, #25]
   1bf08:	bl	1222c <dcgettext@plt>
   1bf0c:	add	r2, sp, #24
   1bf10:	str	r2, [sp]
   1bf14:	mov	r3, r4
   1bf18:	mov	r1, r5
   1bf1c:	mov	r2, r0
   1bf20:	mov	r0, #1
   1bf24:	bl	12388 <error@plt>
   1bf28:	mov	r2, #5
   1bf2c:	ldr	r1, [pc, #40]	; 1bf5c <__assert_fail@plt+0x97c0>
   1bf30:	bl	1222c <dcgettext@plt>
   1bf34:	mov	r1, r8
   1bf38:	mov	r2, r0
   1bf3c:	mov	r0, #1
   1bf40:	bl	12388 <error@plt>
   1bf44:	stclcc	12, cr12, [ip, #820]	; 0x334
   1bf48:	svccc	0x00666666
   1bf4c:	andeq	fp, r5, r0, ror #24
   1bf50:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1bf54:	andeq	r7, r4, r4, lsl #2
   1bf58:	andeq	r7, r4, ip, lsl r1
   1bf5c:	andeq	r7, r4, r4, ror #1
   1bf60:	cmp	r0, #0
   1bf64:	beq	1bfb8 <__assert_fail@plt+0x981c>
   1bf68:	ldr	ip, [r1]
   1bf6c:	push	{r4, lr}
   1bf70:	ldr	r4, [r0, ip, lsl #2]
   1bf74:	cmp	r4, #0
   1bf78:	beq	1bfac <__assert_fail@plt+0x9810>
   1bf7c:	ldr	lr, [pc, #80]	; 1bfd4 <__assert_fail@plt+0x9838>
   1bf80:	add	ip, ip, #1
   1bf84:	str	ip, [r1]
   1bf88:	mov	r0, r4
   1bf8c:	str	r4, [r3]
   1bf90:	mov	r1, r2
   1bf94:	ldr	r3, [lr, #52]	; 0x34
   1bf98:	blx	r3
   1bf9c:	cmp	r0, #0
   1bfa0:	bne	1bfc4 <__assert_fail@plt+0x9828>
   1bfa4:	mov	r0, #1
   1bfa8:	pop	{r4, pc}
   1bfac:	mov	r0, #0
   1bfb0:	str	r0, [r3]
   1bfb4:	pop	{r4, pc}
   1bfb8:	mov	r0, #0
   1bfbc:	str	r0, [r3]
   1bfc0:	bx	lr
   1bfc4:	bl	124d8 <__errno_location@plt>
   1bfc8:	mov	r1, r4
   1bfcc:	ldr	r0, [r0]
   1bfd0:	bl	18c34 <__assert_fail@plt+0x6498>
   1bfd4:	andeq	ip, r5, ip, asr lr
   1bfd8:	push	{r4, r5, r6, r7, r8, lr}
   1bfdc:	sub	sp, sp, #224	; 0xe0
   1bfe0:	ldr	r4, [pc, #420]	; 1c18c <__assert_fail@plt+0x99f0>
   1bfe4:	mov	r5, r1
   1bfe8:	mov	r7, r2
   1bfec:	ldr	r3, [r4]
   1bff0:	mov	r6, r0
   1bff4:	add	r0, sp, #8
   1bff8:	str	r3, [sp, #220]	; 0xdc
   1bffc:	bl	17ba4 <__assert_fail@plt+0x5408>
   1c000:	mov	r0, r5
   1c004:	mov	r1, r7
   1c008:	add	r2, sp, #8
   1c00c:	add	r3, sp, #4
   1c010:	bl	1bf60 <__assert_fail@plt+0x97c4>
   1c014:	subs	r5, r0, #0
   1c018:	bne	1c038 <__assert_fail@plt+0x989c>
   1c01c:	ldr	r2, [sp, #220]	; 0xdc
   1c020:	ldr	r3, [r4]
   1c024:	mov	r0, r5
   1c028:	cmp	r2, r3
   1c02c:	bne	1c178 <__assert_fail@plt+0x99dc>
   1c030:	add	sp, sp, #224	; 0xe0
   1c034:	pop	{r4, r5, r6, r7, r8, pc}
   1c038:	ldr	r8, [pc, #336]	; 1c190 <__assert_fail@plt+0x99f4>
   1c03c:	add	r0, sp, #112	; 0x70
   1c040:	bl	17ba4 <__assert_fail@plt+0x5408>
   1c044:	ldr	r3, [r8, #48]	; 0x30
   1c048:	cmp	r3, #0
   1c04c:	bne	1c168 <__assert_fail@plt+0x99cc>
   1c050:	ldrb	r1, [r8, #56]	; 0x38
   1c054:	cmp	r1, #0
   1c058:	bne	1c0b0 <__assert_fail@plt+0x9914>
   1c05c:	ldr	r3, [sp, #24]
   1c060:	and	r3, r3, #61440	; 0xf000
   1c064:	cmp	r3, #40960	; 0xa000
   1c068:	beq	1c170 <__assert_fail@plt+0x99d4>
   1c06c:	ldr	r0, [sp, #4]
   1c070:	bl	20030 <__assert_fail@plt+0xd894>
   1c074:	subs	r7, r0, #0
   1c078:	bge	1c0c4 <__assert_fail@plt+0x9928>
   1c07c:	mov	r0, r6
   1c080:	ldr	r1, [sp, #4]
   1c084:	bl	17940 <__assert_fail@plt+0x51a4>
   1c088:	ldrd	r2, [sp, #104]	; 0x68
   1c08c:	ldr	ip, [pc, #256]	; 1c194 <__assert_fail@plt+0x99f8>
   1c090:	mov	r1, #1
   1c094:	str	r7, [r0, #56]	; 0x38
   1c098:	ldrd	r6, [sp, #8]
   1c09c:	str	ip, [r0, #28]
   1c0a0:	strd	r2, [r0, #40]	; 0x28
   1c0a4:	strh	r1, [r0, #18]
   1c0a8:	strd	r6, [r0, #48]	; 0x30
   1c0ac:	b	1c01c <__assert_fail@plt+0x9880>
   1c0b0:	mov	r1, #32768	; 0x8000
   1c0b4:	ldr	r0, [sp, #4]
   1c0b8:	bl	20030 <__assert_fail@plt+0xd894>
   1c0bc:	subs	r7, r0, #0
   1c0c0:	blt	1c07c <__assert_fail@plt+0x98e0>
   1c0c4:	add	r2, sp, #112	; 0x70
   1c0c8:	mov	r1, r7
   1c0cc:	mov	r0, #3
   1c0d0:	bl	122d4 <__fxstat64@plt>
   1c0d4:	cmp	r0, #0
   1c0d8:	bne	1c17c <__assert_fail@plt+0x99e0>
   1c0dc:	ldr	r3, [r8, #52]	; 0x34
   1c0e0:	add	r1, sp, #8
   1c0e4:	ldr	r0, [sp, #4]
   1c0e8:	blx	r3
   1c0ec:	cmp	r0, #0
   1c0f0:	bne	1c17c <__assert_fail@plt+0x99e0>
   1c0f4:	ldr	r3, [r8, #48]	; 0x30
   1c0f8:	cmp	r3, #0
   1c0fc:	bne	1c154 <__assert_fail@plt+0x99b8>
   1c100:	ldrb	r3, [r8, #56]	; 0x38
   1c104:	cmp	r3, #0
   1c108:	bne	1c154 <__assert_fail@plt+0x99b8>
   1c10c:	ldr	r3, [sp, #24]
   1c110:	and	r3, r3, #61440	; 0xf000
   1c114:	cmp	r3, #40960	; 0xa000
   1c118:	beq	1c144 <__assert_fail@plt+0x99a8>
   1c11c:	ldrd	r0, [sp, #8]
   1c120:	ldrd	r2, [sp, #112]	; 0x70
   1c124:	cmp	r1, r3
   1c128:	cmpeq	r0, r2
   1c12c:	bne	1c144 <__assert_fail@plt+0x99a8>
   1c130:	ldrd	r0, [sp, #104]	; 0x68
   1c134:	ldrd	r2, [sp, #208]	; 0xd0
   1c138:	cmp	r1, r3
   1c13c:	cmpeq	r0, r2
   1c140:	beq	1c07c <__assert_fail@plt+0x98e0>
   1c144:	mov	r0, r7
   1c148:	bl	12748 <close@plt>
   1c14c:	mvn	r7, #0
   1c150:	b	1c07c <__assert_fail@plt+0x98e0>
   1c154:	add	r1, sp, #112	; 0x70
   1c158:	add	r0, sp, #8
   1c15c:	mov	r2, #104	; 0x68
   1c160:	bl	121a8 <memcpy@plt>
   1c164:	b	1c07c <__assert_fail@plt+0x98e0>
   1c168:	mov	r1, #0
   1c16c:	b	1c06c <__assert_fail@plt+0x98d0>
   1c170:	mvn	r7, #1
   1c174:	b	1c07c <__assert_fail@plt+0x98e0>
   1c178:	bl	12244 <__stack_chk_fail@plt>
   1c17c:	bl	124d8 <__errno_location@plt>
   1c180:	ldr	r1, [sp, #4]
   1c184:	ldr	r0, [r0]
   1c188:	bl	18c34 <__assert_fail@plt+0x6498>
   1c18c:	andeq	fp, r5, r0, ror #24
   1c190:	andeq	ip, r5, ip, asr lr
   1c194:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c198:	mov	r3, #0
   1c19c:	push	{r4, r5, r6, lr}
   1c1a0:	mov	r5, r0
   1c1a4:	str	r3, [r1]
   1c1a8:	mov	r0, r3
   1c1ac:	mov	r4, r1
   1c1b0:	bl	2d1fc <__assert_fail@plt+0x1aa60>
   1c1b4:	ldr	r1, [pc, #176]	; 1c26c <__assert_fail@plt+0x9ad0>
   1c1b8:	str	r0, [r4, #16]
   1c1bc:	mov	r0, r5
   1c1c0:	bl	120dc <strcmp@plt>
   1c1c4:	cmp	r0, #0
   1c1c8:	beq	1c24c <__assert_fail@plt+0x9ab0>
   1c1cc:	ldr	r1, [pc, #156]	; 1c270 <__assert_fail@plt+0x9ad4>
   1c1d0:	mov	r0, r5
   1c1d4:	bl	120dc <strcmp@plt>
   1c1d8:	cmp	r0, #0
   1c1dc:	beq	1c228 <__assert_fail@plt+0x9a8c>
   1c1e0:	ldr	r3, [pc, #140]	; 1c274 <__assert_fail@plt+0x9ad8>
   1c1e4:	mov	r1, r5
   1c1e8:	ldr	r0, [r3, #36]	; 0x24
   1c1ec:	bl	18e00 <__assert_fail@plt+0x6664>
   1c1f0:	mov	r3, r0
   1c1f4:	cmp	r0, #0
   1c1f8:	stmib	r4, {r3, r5}
   1c1fc:	beq	1c25c <__assert_fail@plt+0x9ac0>
   1c200:	mov	r0, r3
   1c204:	bl	12568 <fileno@plt>
   1c208:	cmn	r0, #1
   1c20c:	moveq	r0, #0
   1c210:	beq	1c220 <__assert_fail@plt+0x9a84>
   1c214:	bl	12700 <isatty@plt>
   1c218:	adds	r0, r0, #0
   1c21c:	movne	r0, #1
   1c220:	strb	r0, [r4, #12]
   1c224:	pop	{r4, r5, r6, pc}
   1c228:	ldr	r3, [pc, #72]	; 1c278 <__assert_fail@plt+0x9adc>
   1c22c:	ldr	r1, [pc, #72]	; 1c27c <__assert_fail@plt+0x9ae0>
   1c230:	mov	r2, #5
   1c234:	ldr	r3, [r3]
   1c238:	str	r3, [r4, #4]
   1c23c:	bl	1222c <dcgettext@plt>
   1c240:	ldr	r3, [r4, #4]
   1c244:	str	r0, [r4, #8]
   1c248:	b	1c200 <__assert_fail@plt+0x9a64>
   1c24c:	ldr	r3, [pc, #44]	; 1c280 <__assert_fail@plt+0x9ae4>
   1c250:	mov	r2, #5
   1c254:	ldr	r1, [pc, #40]	; 1c284 <__assert_fail@plt+0x9ae8>
   1c258:	b	1c234 <__assert_fail@plt+0x9a98>
   1c25c:	bl	124d8 <__errno_location@plt>
   1c260:	mov	r1, r5
   1c264:	ldr	r0, [r0]
   1c268:	bl	18c64 <__assert_fail@plt+0x64c8>
   1c26c:	andeq	r7, r4, r0, asr #2
   1c270:	andeq	r7, r4, ip, asr r1
   1c274:	andeq	ip, r5, r0, lsr lr
   1c278:	andeq	ip, r5, r4, asr #10
   1c27c:			; <UNDEFINED> instruction: 0x00045eb8
   1c280:	andeq	ip, r5, r8, lsr r5
   1c284:	andeq	r7, r4, ip, asr #2
   1c288:	push	{r4, r5, r6, r7, r8, lr}
   1c28c:	sub	sp, sp, #24
   1c290:	ldr	r5, [pc, #116]	; 1c30c <__assert_fail@plt+0x9b70>
   1c294:	cmp	r1, #0
   1c298:	moveq	r0, r1
   1c29c:	ldr	r3, [r5]
   1c2a0:	str	r3, [sp, #20]
   1c2a4:	beq	1c2f0 <__assert_fail@plt+0x9b54>
   1c2a8:	ldr	r7, [r2]
   1c2ac:	mov	r6, r2
   1c2b0:	ldr	r4, [r1, r7, lsl #2]
   1c2b4:	cmp	r4, #0
   1c2b8:	moveq	r0, r4
   1c2bc:	beq	1c2f0 <__assert_fail@plt+0x9b54>
   1c2c0:	add	r3, r7, #1
   1c2c4:	str	r3, [r2]
   1c2c8:	mov	r8, r0
   1c2cc:	mov	r1, sp
   1c2d0:	ldr	r0, [pc, #56]	; 1c310 <__assert_fail@plt+0x9b74>
   1c2d4:	bl	1c198 <__assert_fail@plt+0x99fc>
   1c2d8:	mov	r2, r4
   1c2dc:	mov	r1, r8
   1c2e0:	mov	r0, sp
   1c2e4:	bl	1a758 <__assert_fail@plt+0x7fbc>
   1c2e8:	cmp	r0, #0
   1c2ec:	streq	r7, [r6]
   1c2f0:	ldr	r2, [sp, #20]
   1c2f4:	ldr	r3, [r5]
   1c2f8:	cmp	r2, r3
   1c2fc:	bne	1c308 <__assert_fail@plt+0x9b6c>
   1c300:	add	sp, sp, #24
   1c304:	pop	{r4, r5, r6, r7, r8, pc}
   1c308:	bl	12244 <__stack_chk_fail@plt>
   1c30c:	andeq	fp, r5, r0, ror #24
   1c310:	andeq	r7, r4, ip, asr r1
   1c314:	push	{r4, lr}
   1c318:	bl	17998 <__assert_fail@plt+0x51fc>
   1c31c:	ldr	r3, [pc, #20]	; 1c338 <__assert_fail@plt+0x9b9c>
   1c320:	add	r1, r0, #40	; 0x28
   1c324:	str	r3, [r0, #16]
   1c328:	ldr	r0, [pc, #12]	; 1c33c <__assert_fail@plt+0x9ba0>
   1c32c:	bl	1c198 <__assert_fail@plt+0x99fc>
   1c330:	mov	r0, #1
   1c334:	pop	{r4, pc}
   1c338:	andeq	r0, r0, r1, lsl #2
   1c33c:	andeq	r7, r4, ip, asr r1
   1c340:	push	{r4, r5, r6, lr}
   1c344:	mov	r5, r1
   1c348:	bl	17940 <__assert_fail@plt+0x51a4>
   1c34c:	cmp	r5, #0
   1c350:	mov	r4, r0
   1c354:	addne	r1, r4, #40	; 0x28
   1c358:	movne	r0, r5
   1c35c:	ldreq	r0, [pc, #28]	; 1c380 <__assert_fail@plt+0x9be4>
   1c360:	addeq	r1, r4, #40	; 0x28
   1c364:	bl	1c198 <__assert_fail@plt+0x99fc>
   1c368:	ldr	r2, [pc, #20]	; 1c384 <__assert_fail@plt+0x9be8>
   1c36c:	mov	r3, #1065353216	; 0x3f800000
   1c370:	mov	r0, #1
   1c374:	str	r2, [r4, #16]
   1c378:	str	r3, [r4, #28]
   1c37c:	pop	{r4, r5, r6, pc}
   1c380:	andeq	r7, r4, ip, asr r1
   1c384:	andeq	r0, r0, r1, lsl #2
   1c388:	mov	r1, #0
   1c38c:	b	1c340 <__assert_fail@plt+0x9ba4>
   1c390:	cmp	r1, #0
   1c394:	beq	1c3d0 <__assert_fail@plt+0x9c34>
   1c398:	ldr	r3, [r2]
   1c39c:	ldr	r1, [r1, r3, lsl #2]
   1c3a0:	cmp	r1, #0
   1c3a4:	beq	1c3d0 <__assert_fail@plt+0x9c34>
   1c3a8:	add	r3, r3, #1
   1c3ac:	str	r3, [r2]
   1c3b0:	push	{r4, lr}
   1c3b4:	mov	r4, r2
   1c3b8:	bl	1c340 <__assert_fail@plt+0x9ba4>
   1c3bc:	cmp	r0, #0
   1c3c0:	ldreq	r3, [r4]
   1c3c4:	subeq	r3, r3, #1
   1c3c8:	streq	r3, [r4]
   1c3cc:	pop	{r4, pc}
   1c3d0:	mov	r0, r1
   1c3d4:	bx	lr
   1c3d8:	cmp	r1, #0
   1c3dc:	beq	1c430 <__assert_fail@plt+0x9c94>
   1c3e0:	ldr	r3, [r2]
   1c3e4:	push	{r4, r5, r6, lr}
   1c3e8:	ldr	r4, [r1, r3, lsl #2]
   1c3ec:	cmp	r4, #0
   1c3f0:	beq	1c428 <__assert_fail@plt+0x9c8c>
   1c3f4:	add	r3, r3, #1
   1c3f8:	str	r3, [r2]
   1c3fc:	bl	17998 <__assert_fail@plt+0x51fc>
   1c400:	mov	r5, r0
   1c404:	add	r1, r0, #40	; 0x28
   1c408:	mov	r0, r4
   1c40c:	bl	1c198 <__assert_fail@plt+0x99fc>
   1c410:	ldr	r2, [pc, #32]	; 1c438 <__assert_fail@plt+0x9c9c>
   1c414:	mov	r3, #1065353216	; 0x3f800000
   1c418:	mov	r0, #1
   1c41c:	strh	r2, [r5, #16]
   1c420:	str	r3, [r5, #28]
   1c424:	pop	{r4, r5, r6, pc}
   1c428:	mov	r0, r4
   1c42c:	pop	{r4, r5, r6, pc}
   1c430:	mov	r0, r1
   1c434:	bx	lr
   1c438:	andeq	r0, r0, r1, lsl #2
   1c43c:	push	{r4, r5, r6, r7, r8, lr}
   1c440:	sub	sp, sp, #24
   1c444:	ldr	r6, [pc, #144]	; 1c4dc <__assert_fail@plt+0x9d40>
   1c448:	cmp	r1, #0
   1c44c:	mov	r5, r2
   1c450:	ldr	r3, [r6]
   1c454:	ldr	r4, [r2]
   1c458:	str	r3, [sp, #20]
   1c45c:	beq	1c4b8 <__assert_fail@plt+0x9d1c>
   1c460:	mov	r8, r0
   1c464:	ldr	r0, [r1, r4, lsl #2]
   1c468:	lsl	r3, r4, #2
   1c46c:	cmp	r0, #0
   1c470:	beq	1c4b8 <__assert_fail@plt+0x9d1c>
   1c474:	add	r1, r1, r3
   1c478:	add	r3, r4, #1
   1c47c:	ldr	r7, [r1, #4]
   1c480:	str	r3, [r2]
   1c484:	cmp	r7, #0
   1c488:	beq	1c4b8 <__assert_fail@plt+0x9d1c>
   1c48c:	add	r4, r4, #2
   1c490:	str	r4, [r2]
   1c494:	mov	r1, sp
   1c498:	bl	1c198 <__assert_fail@plt+0x99fc>
   1c49c:	mov	r0, sp
   1c4a0:	mov	r2, r7
   1c4a4:	mov	r1, r8
   1c4a8:	ldr	r4, [r5]
   1c4ac:	bl	1a758 <__assert_fail@plt+0x7fbc>
   1c4b0:	cmp	r0, #0
   1c4b4:	bne	1c4c0 <__assert_fail@plt+0x9d24>
   1c4b8:	mov	r0, #0
   1c4bc:	str	r4, [r5]
   1c4c0:	ldr	r2, [sp, #20]
   1c4c4:	ldr	r3, [r6]
   1c4c8:	cmp	r2, r3
   1c4cc:	bne	1c4d8 <__assert_fail@plt+0x9d3c>
   1c4d0:	add	sp, sp, #24
   1c4d4:	pop	{r4, r5, r6, r7, r8, pc}
   1c4d8:	bl	12244 <__stack_chk_fail@plt>
   1c4dc:	andeq	fp, r5, r0, ror #24
   1c4e0:	cmp	r1, #0
   1c4e4:	beq	1c53c <__assert_fail@plt+0x9da0>
   1c4e8:	ldr	r3, [r2]
   1c4ec:	push	{r4, r5, r6, lr}
   1c4f0:	ldr	r4, [r1, r3, lsl #2]
   1c4f4:	cmp	r4, #0
   1c4f8:	beq	1c534 <__assert_fail@plt+0x9d98>
   1c4fc:	add	r3, r3, #1
   1c500:	str	r3, [r2]
   1c504:	mov	r1, r4
   1c508:	bl	17940 <__assert_fail@plt+0x51a4>
   1c50c:	mov	r5, r0
   1c510:	add	r1, r0, #40	; 0x28
   1c514:	mov	r0, r4
   1c518:	bl	1c198 <__assert_fail@plt+0x99fc>
   1c51c:	ldr	r2, [pc, #32]	; 1c544 <__assert_fail@plt+0x9da8>
   1c520:	mov	r3, #1065353216	; 0x3f800000
   1c524:	mov	r0, #1
   1c528:	str	r2, [r5, #16]
   1c52c:	str	r3, [r5, #28]
   1c530:	pop	{r4, r5, r6, pc}
   1c534:	mov	r0, r4
   1c538:	pop	{r4, r5, r6, pc}
   1c53c:	mov	r0, r1
   1c540:	bx	lr
   1c544:	andeq	r0, r0, r1, lsl #2
   1c548:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c54c:	vpush	{d8}
   1c550:	ldr	r6, [pc, #448]	; 1c718 <__assert_fail@plt+0x9f7c>
   1c554:	subs	r4, r1, #0
   1c558:	sub	sp, sp, #28
   1c55c:	ldr	r3, [r6]
   1c560:	str	r3, [sp, #20]
   1c564:	beq	1c658 <__assert_fail@plt+0x9ebc>
   1c568:	ldr	r3, [r2]
   1c56c:	ldr	r4, [r4, r3, lsl #2]
   1c570:	cmp	r4, #0
   1c574:	beq	1c658 <__assert_fail@plt+0x9ebc>
   1c578:	add	r3, r3, #1
   1c57c:	str	r3, [r2]
   1c580:	ldrb	r3, [r4]
   1c584:	mov	r8, r0
   1c588:	cmp	r3, #45	; 0x2d
   1c58c:	beq	1c688 <__assert_fail@plt+0x9eec>
   1c590:	cmp	r3, #47	; 0x2f
   1c594:	beq	1c678 <__assert_fail@plt+0x9edc>
   1c598:	vldr	s16, [pc, #360]	; 1c708 <__assert_fail@plt+0x9f6c>
   1c59c:	mov	r0, r4
   1c5a0:	mov	r9, #2
   1c5a4:	bl	25328 <__assert_fail@plt+0x12b8c>
   1c5a8:	subs	sl, r0, #0
   1c5ac:	beq	1c6cc <__assert_fail@plt+0x9f30>
   1c5b0:	ldrb	r3, [r4]
   1c5b4:	cmp	r3, #43	; 0x2b
   1c5b8:	bne	1c5cc <__assert_fail@plt+0x9e30>
   1c5bc:	ldrb	r3, [r4, #1]
   1c5c0:	sub	r3, r3, #48	; 0x30
   1c5c4:	cmp	r3, #7
   1c5c8:	bls	1c6cc <__assert_fail@plt+0x9f30>
   1c5cc:	mov	r5, #0
   1c5d0:	mov	r2, r5
   1c5d4:	mov	r1, r5
   1c5d8:	mov	r3, sl
   1c5dc:	str	r5, [sp]
   1c5e0:	mov	r0, r5
   1c5e4:	bl	25754 <__assert_fail@plt+0x12fb8>
   1c5e8:	mov	r3, sl
   1c5ec:	mov	r2, r5
   1c5f0:	mov	r1, #1
   1c5f4:	str	r5, [sp]
   1c5f8:	mov	r7, r0
   1c5fc:	mov	r0, r5
   1c600:	str	r7, [sp, #12]
   1c604:	bl	25754 <__assert_fail@plt+0x12fb8>
   1c608:	mov	fp, r0
   1c60c:	mov	r0, sl
   1c610:	str	fp, [sp, #16]
   1c614:	bl	12154 <free@plt>
   1c618:	ldrb	r3, [r4]
   1c61c:	orr	r7, r7, fp
   1c620:	cmp	r3, #47	; 0x2f
   1c624:	cmpeq	r7, r5
   1c628:	beq	1c698 <__assert_fail@plt+0x9efc>
   1c62c:	mov	r1, r4
   1c630:	mov	r0, r8
   1c634:	bl	17940 <__assert_fail@plt+0x51a4>
   1c638:	add	r2, sp, #12
   1c63c:	mov	r4, #1
   1c640:	mov	r3, r0
   1c644:	vstr	s16, [r0, #28]
   1c648:	ldm	r2!, {r0, r1}
   1c64c:	str	r9, [r3, #40]	; 0x28
   1c650:	str	r0, [r3, #44]	; 0x2c
   1c654:	str	r1, [r3, #48]	; 0x30
   1c658:	ldr	r2, [sp, #20]
   1c65c:	ldr	r3, [r6]
   1c660:	mov	r0, r4
   1c664:	cmp	r2, r3
   1c668:	bne	1c6c8 <__assert_fail@plt+0x9f2c>
   1c66c:	add	sp, sp, #28
   1c670:	vpop	{d8}
   1c674:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c678:	vldr	s16, [pc, #140]	; 1c70c <__assert_fail@plt+0x9f70>
   1c67c:	add	r0, r4, #1
   1c680:	mov	r9, #1
   1c684:	b	1c5a4 <__assert_fail@plt+0x9e08>
   1c688:	add	r0, r4, #1
   1c68c:	mov	r9, #0
   1c690:	vldr	s16, [pc, #120]	; 1c710 <__assert_fail@plt+0x9f74>
   1c694:	b	1c5a4 <__assert_fail@plt+0x9e08>
   1c698:	mov	r2, #5
   1c69c:	ldr	r1, [pc, #120]	; 1c71c <__assert_fail@plt+0x9f80>
   1c6a0:	mov	r0, r5
   1c6a4:	bl	1222c <dcgettext@plt>
   1c6a8:	mov	r3, r4
   1c6ac:	mov	r1, r5
   1c6b0:	vldr	s16, [pc, #92]	; 1c714 <__assert_fail@plt+0x9f78>
   1c6b4:	mov	r9, r5
   1c6b8:	mov	r2, r0
   1c6bc:	mov	r0, r5
   1c6c0:	bl	12388 <error@plt>
   1c6c4:	b	1c62c <__assert_fail@plt+0x9e90>
   1c6c8:	bl	12244 <__stack_chk_fail@plt>
   1c6cc:	mov	r2, #5
   1c6d0:	ldr	r1, [pc, #72]	; 1c720 <__assert_fail@plt+0x9f84>
   1c6d4:	mov	r0, #0
   1c6d8:	bl	1222c <dcgettext@plt>
   1c6dc:	ldr	r3, [pc, #64]	; 1c724 <__assert_fail@plt+0x9f88>
   1c6e0:	mov	r2, r4
   1c6e4:	ldr	r1, [r3, #72]	; 0x48
   1c6e8:	mov	r5, r0
   1c6ec:	mov	r0, #0
   1c6f0:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1c6f4:	mov	r2, r5
   1c6f8:	mov	r1, #0
   1c6fc:	mov	r3, r0
   1c700:	mov	r0, #1
   1c704:	bl	12388 <error@plt>
   1c708:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1c70c:			; <UNDEFINED> instruction: 0x3e99999a
   1c710:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1c714:	svccc	0x007fa440
   1c718:	andeq	fp, r5, r0, ror #24
   1c71c:	andeq	r7, r4, r8, ror r1
   1c720:	andeq	r7, r4, r8, ror #2
   1c724:	andeq	ip, r5, ip, asr lr
   1c728:	subs	ip, r2, #0
   1c72c:	ldr	r2, [pc, #1448]	; 1ccdc <__assert_fail@plt+0xa540>
   1c730:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c734:	sub	sp, sp, #84	; 0x54
   1c738:	ldr	r2, [r2]
   1c73c:	str	ip, [sp, #32]
   1c740:	str	r3, [sp, #36]	; 0x24
   1c744:	str	r2, [sp, #76]	; 0x4c
   1c748:	beq	1ca90 <__assert_fail@plt+0xa2f4>
   1c74c:	ldr	r3, [r3]
   1c750:	ldr	r6, [ip, r3, lsl #2]
   1c754:	cmp	r6, #0
   1c758:	beq	1cab0 <__assert_fail@plt+0xa314>
   1c75c:	ldr	r8, [r1, #12]
   1c760:	ldr	r2, [pc, #1400]	; 1cce0 <__assert_fail@plt+0xa544>
   1c764:	mov	r7, r0
   1c768:	mov	r0, r1
   1c76c:	mov	r1, r8
   1c770:	bl	1790c <__assert_fail@plt+0x5170>
   1c774:	ldr	sl, [pc, #1384]	; 1cce4 <__assert_fail@plt+0xa548>
   1c778:	ldr	r3, [pc, #1384]	; 1cce8 <__assert_fail@plt+0xa54c>
   1c77c:	ldr	r2, [pc, #1384]	; 1ccec <__assert_fail@plt+0xa550>
   1c780:	cmp	r8, r3
   1c784:	cmpne	r8, sl
   1c788:	movne	r3, #1
   1c78c:	moveq	r3, #0
   1c790:	str	r3, [sp, #20]
   1c794:	mov	r3, #0
   1c798:	str	r2, [r0, #16]
   1c79c:	str	r0, [sp, #28]
   1c7a0:	mov	r2, r0
   1c7a4:	str	r3, [r0, #144]	; 0x90
   1c7a8:	bne	1c884 <__assert_fail@plt+0xa0e8>
   1c7ac:	ldr	r3, [pc, #1340]	; 1ccf0 <__assert_fail@plt+0xa554>
   1c7b0:	ldr	r1, [pc, #1328]	; 1cce8 <__assert_fail@plt+0xa54c>
   1c7b4:	mov	r2, r3
   1c7b8:	cmp	r8, r2
   1c7bc:	cmpne	r8, r1
   1c7c0:	ldr	r2, [sp, #28]
   1c7c4:	str	r3, [sp, #24]
   1c7c8:	mov	r3, #1
   1c7cc:	strb	r3, [r2, #140]	; 0x8c
   1c7d0:	bne	1c898 <__assert_fail@plt+0xa0fc>
   1c7d4:	ldr	r3, [pc, #1304]	; 1ccf4 <__assert_fail@plt+0xa558>
   1c7d8:	mov	r2, #0
   1c7dc:	ldr	r0, [pc, #1300]	; 1ccf8 <__assert_fail@plt+0xa55c>
   1c7e0:	strb	r2, [r3, #14]
   1c7e4:	bl	123c4 <getenv@plt>
   1c7e8:	subs	r4, r0, #0
   1c7ec:	beq	1c8b0 <__assert_fail@plt+0xa114>
   1c7f0:	add	r5, sp, #52	; 0x34
   1c7f4:	add	r3, sp, #48	; 0x30
   1c7f8:	str	r5, [sp]
   1c7fc:	mov	r2, #1
   1c800:	ldr	r1, [pc, #1268]	; 1ccfc <__assert_fail@plt+0xa560>
   1c804:	bl	211c4 <__assert_fail@plt+0xea28>
   1c808:	ldr	r6, [pc, #1260]	; 1ccfc <__assert_fail@plt+0xa560>
   1c80c:	b	1c838 <__assert_fail@plt+0xa09c>
   1c810:	cmp	r3, #47	; 0x2f
   1c814:	bne	1cc48 <__assert_fail@plt+0xa4ac>
   1c818:	str	r5, [sp]
   1c81c:	add	r3, sp, #48	; 0x30
   1c820:	mov	r2, #0
   1c824:	mov	r1, r6
   1c828:	mov	r0, r4
   1c82c:	bl	211c4 <__assert_fail@plt+0xea28>
   1c830:	cmp	r0, #0
   1c834:	beq	1c8b0 <__assert_fail@plt+0xa114>
   1c838:	ldr	r1, [sp, #52]	; 0x34
   1c83c:	cmp	r1, #0
   1c840:	beq	1c860 <__assert_fail@plt+0xa0c4>
   1c844:	ldr	r3, [sp, #48]	; 0x30
   1c848:	cmp	r1, #1
   1c84c:	add	r0, r4, r3
   1c850:	ldrb	r3, [r4, r3]
   1c854:	bne	1c810 <__assert_fail@plt+0xa074>
   1c858:	cmp	r3, #46	; 0x2e
   1c85c:	bne	1c810 <__assert_fail@plt+0xa074>
   1c860:	mov	r2, #5
   1c864:	ldr	r1, [pc, #1172]	; 1cd00 <__assert_fail@plt+0xa564>
   1c868:	mov	r0, #0
   1c86c:	bl	1222c <dcgettext@plt>
   1c870:	mov	r3, r7
   1c874:	mov	r1, #0
   1c878:	mov	r2, r0
   1c87c:	mov	r0, #1
   1c880:	bl	12388 <error@plt>
   1c884:	ldr	r1, [pc, #1124]	; 1ccf0 <__assert_fail@plt+0xa554>
   1c888:	strb	r3, [r0, #140]	; 0x8c
   1c88c:	cmp	r8, r1
   1c890:	str	r1, [sp, #24]
   1c894:	beq	1c7d4 <__assert_fail@plt+0xa038>
   1c898:	ldr	r3, [pc, #1124]	; 1cd04 <__assert_fail@plt+0xa568>
   1c89c:	ldr	r3, [r3]
   1c8a0:	cmp	r3, #0
   1c8a4:	ldrne	r2, [sp, #28]
   1c8a8:	strne	r3, [r2, #144]	; 0x90
   1c8ac:	beq	1ccc8 <__assert_fail@plt+0xa52c>
   1c8b0:	ldr	r3, [sp, #28]
   1c8b4:	mov	r9, #0
   1c8b8:	strb	r9, [r3, #40]	; 0x28
   1c8bc:	ldr	r3, [sp, #36]	; 0x24
   1c8c0:	ldr	r4, [r3]
   1c8c4:	ldr	r3, [sp, #32]
   1c8c8:	str	r4, [sp, #40]	; 0x28
   1c8cc:	lsl	r2, r4, #2
   1c8d0:	ldr	sl, [r3, r4, lsl #2]
   1c8d4:	str	r2, [sp, #44]	; 0x2c
   1c8d8:	cmp	sl, r9
   1c8dc:	add	r5, r3, r2
   1c8e0:	beq	1ca7c <__assert_fail@plt+0xa2e0>
   1c8e4:	mov	r6, r9
   1c8e8:	mov	r0, r9
   1c8ec:	mov	fp, r5
   1c8f0:	ldr	r7, [pc, #1040]	; 1cd08 <__assert_fail@plt+0xa56c>
   1c8f4:	b	1c960 <__assert_fail@plt+0xa1c4>
   1c8f8:	ldr	r3, [sp, #20]
   1c8fc:	cmp	r1, #43	; 0x2b
   1c900:	movne	r3, #0
   1c904:	andeq	r3, r3, #1
   1c908:	cmp	r3, #0
   1c90c:	bne	1ca58 <__assert_fail@plt+0xa2bc>
   1c910:	mov	r1, r7
   1c914:	mov	r0, sl
   1c918:	bl	244f0 <__assert_fail@plt+0x11d54>
   1c91c:	cmp	r0, #0
   1c920:	beq	1c94c <__assert_fail@plt+0xa1b0>
   1c924:	cmp	r4, #0
   1c928:	add	r6, r6, #1
   1c92c:	bne	1c944 <__assert_fail@plt+0xa1a8>
   1c930:	ldr	r3, [pc, #944]	; 1cce8 <__assert_fail@plt+0xa54c>
   1c934:	ldr	r2, [sp, #24]
   1c938:	cmp	r8, r2
   1c93c:	cmpne	r8, r3
   1c940:	beq	1cc28 <__assert_fail@plt+0xa48c>
   1c944:	mov	r9, sl
   1c948:	mov	r0, #1
   1c94c:	ldr	sl, [fp, #4]!
   1c950:	add	r4, r4, #1
   1c954:	cmp	sl, #0
   1c958:	add	r5, r5, #4
   1c95c:	beq	1ca80 <__assert_fail@plt+0xa2e4>
   1c960:	ldrb	r1, [sl]
   1c964:	cmp	r1, #59	; 0x3b
   1c968:	bne	1c8f8 <__assert_fail@plt+0xa15c>
   1c96c:	ldrb	r1, [sl, #1]
   1c970:	cmp	r1, #0
   1c974:	bne	1c910 <__assert_fail@plt+0xa174>
   1c978:	ldr	r3, [sp, #40]	; 0x28
   1c97c:	cmp	r3, r4
   1c980:	beq	1ca80 <__assert_fail@plt+0xa2e4>
   1c984:	ldr	r3, [r5]
   1c988:	cmp	r3, #0
   1c98c:	beq	1ca80 <__assert_fail@plt+0xa2e4>
   1c990:	ldr	r3, [sp, #28]
   1c994:	ldrb	r3, [r3, #40]	; 0x28
   1c998:	cmp	r3, #0
   1c99c:	beq	1cab8 <__assert_fail@plt+0xa31c>
   1c9a0:	ldr	r1, [sp, #24]
   1c9a4:	ldr	r2, [pc, #864]	; 1cd0c <__assert_fail@plt+0xa570>
   1c9a8:	ldr	r3, [pc, #864]	; 1cd10 <__assert_fail@plt+0xa574>
   1c9ac:	cmp	r8, r1
   1c9b0:	moveq	r8, r2
   1c9b4:	movne	r8, r3
   1c9b8:	cmp	r6, #1
   1c9bc:	bgt	1cc98 <__assert_fail@plt+0xa4fc>
   1c9c0:	mov	r0, r9
   1c9c4:	bl	1249c <strlen@plt>
   1c9c8:	cmp	r0, #2
   1c9cc:	beq	1cab8 <__assert_fail@plt+0xa31c>
   1c9d0:	ldr	r2, [pc, #828]	; 1cd14 <__assert_fail@plt+0xa578>
   1c9d4:	mov	r3, #19
   1c9d8:	mov	r1, r3
   1c9dc:	stm	sp, {r2, r8}
   1c9e0:	add	r0, sp, #56	; 0x38
   1c9e4:	mov	r2, #1
   1c9e8:	bl	12784 <__snprintf_chk@plt>
   1c9ec:	mov	r2, #5
   1c9f0:	ldr	r1, [pc, #800]	; 1cd18 <__assert_fail@plt+0xa57c>
   1c9f4:	mov	r0, #0
   1c9f8:	bl	1222c <dcgettext@plt>
   1c9fc:	ldr	r4, [pc, #752]	; 1ccf4 <__assert_fail@plt+0xa558>
   1ca00:	add	r2, sp, #56	; 0x38
   1ca04:	ldr	r1, [r4, #72]	; 0x48
   1ca08:	mov	r5, r0
   1ca0c:	mov	r0, #0
   1ca10:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1ca14:	ldr	r1, [r4, #72]	; 0x48
   1ca18:	ldr	r2, [pc, #744]	; 1cd08 <__assert_fail@plt+0xa56c>
   1ca1c:	mov	r6, r0
   1ca20:	mov	r0, #1
   1ca24:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1ca28:	mov	r2, r9
   1ca2c:	ldr	r1, [r4, #72]	; 0x48
   1ca30:	mov	r7, r0
   1ca34:	mov	r0, #2
   1ca38:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1ca3c:	str	r7, [sp]
   1ca40:	mov	r3, r6
   1ca44:	mov	r2, r5
   1ca48:	mov	r1, #0
   1ca4c:	str	r0, [sp, #4]
   1ca50:	mov	r0, #1
   1ca54:	bl	12388 <error@plt>
   1ca58:	ldrb	r1, [sl, #1]
   1ca5c:	cmp	r1, #0
   1ca60:	movne	r0, #0
   1ca64:	cmp	r0, #0
   1ca68:	beq	1c910 <__assert_fail@plt+0xa174>
   1ca6c:	ldr	r2, [sp, #28]
   1ca70:	mov	r3, #1
   1ca74:	strb	r3, [r2, #40]	; 0x28
   1ca78:	b	1c978 <__assert_fail@plt+0xa1dc>
   1ca7c:	ldr	r4, [sp, #40]	; 0x28
   1ca80:	ldr	r3, [sp, #36]	; 0x24
   1ca84:	ldr	r0, [sp, #28]
   1ca88:	str	r4, [r3]
   1ca8c:	bl	12154 <free@plt>
   1ca90:	mov	r0, #0
   1ca94:	ldr	r3, [pc, #576]	; 1ccdc <__assert_fail@plt+0xa540>
   1ca98:	ldr	r2, [sp, #76]	; 0x4c
   1ca9c:	ldr	r3, [r3]
   1caa0:	cmp	r2, r3
   1caa4:	bne	1cc94 <__assert_fail@plt+0xa4f8>
   1caa8:	add	sp, sp, #84	; 0x54
   1caac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cab0:	mov	r0, r6
   1cab4:	b	1ca94 <__assert_fail@plt+0xa2f8>
   1cab8:	ldr	r6, [sp, #28]
   1cabc:	mov	r1, #2048	; 0x800
   1cac0:	add	r8, r6, #44	; 0x2c
   1cac4:	mov	r0, r8
   1cac8:	bl	1f728 <__assert_fail@plt+0xcf8c>
   1cacc:	add	r6, r6, #40	; 0x28
   1cad0:	sub	r0, r0, #1
   1cad4:	cmp	r0, #1
   1cad8:	bls	1ccbc <__assert_fail@plt+0xa520>
   1cadc:	mov	r0, r8
   1cae0:	bl	1f7f0 <__assert_fail@plt+0xd054>
   1cae4:	ldr	r1, [sp, #28]
   1cae8:	ldr	r2, [pc, #556]	; 1cd1c <__assert_fail@plt+0xa580>
   1caec:	ldr	sl, [sp, #40]	; 0x28
   1caf0:	ldrb	r3, [r1, #40]	; 0x28
   1caf4:	sub	r0, r4, sl
   1caf8:	str	r2, [r1, #76]	; 0x4c
   1cafc:	cmp	r3, #0
   1cb00:	add	r9, r1, #88	; 0x58
   1cb04:	beq	1cbb0 <__assert_fail@plt+0xa414>
   1cb08:	mov	r7, #0
   1cb0c:	sub	r0, r0, #1
   1cb10:	str	r0, [r1, #72]	; 0x48
   1cb14:	str	r7, [r1, #132]	; 0x84
   1cb18:	str	r7, [r1, #68]	; 0x44
   1cb1c:	str	r7, [r1, #64]	; 0x40
   1cb20:	str	r7, [r1, #80]	; 0x50
   1cb24:	str	r7, [r1, #84]	; 0x54
   1cb28:	mov	r2, r6
   1cb2c:	mov	r1, r9
   1cb30:	mov	r0, r8
   1cb34:	bl	1f810 <__assert_fail@plt+0xd074>
   1cb38:	sub	r3, r4, #1
   1cb3c:	cmp	sl, r3
   1cb40:	bge	1cb94 <__assert_fail@plt+0xa3f8>
   1cb44:	ldr	r3, [sp, #44]	; 0x2c
   1cb48:	sub	r6, r3, #4
   1cb4c:	ldr	r3, [sp, #32]
   1cb50:	sub	sl, r3, #8
   1cb54:	add	r6, r3, r6
   1cb58:	add	sl, sl, r4, lsl #2
   1cb5c:	ldr	fp, [r6, #4]!
   1cb60:	mov	r0, fp
   1cb64:	bl	1249c <strlen@plt>
   1cb68:	mov	r3, #1
   1cb6c:	str	r3, [sp, #8]
   1cb70:	mov	r2, fp
   1cb74:	str	r7, [sp, #4]
   1cb78:	str	r7, [sp]
   1cb7c:	mov	r1, r9
   1cb80:	add	r3, r0, r3
   1cb84:	mov	r0, r8
   1cb88:	bl	1ef84 <__assert_fail@plt+0xc7e8>
   1cb8c:	cmp	r6, sl
   1cb90:	bne	1cb5c <__assert_fail@plt+0xa3c0>
   1cb94:	ldr	r3, [r5]
   1cb98:	mov	r0, #1
   1cb9c:	cmp	r3, #0
   1cba0:	ldr	r3, [sp, #36]	; 0x24
   1cba4:	addne	r4, r4, #1
   1cba8:	str	r4, [r3]
   1cbac:	b	1ca94 <__assert_fail@plt+0xa2f8>
   1cbb0:	ldr	r7, [sp, #28]
   1cbb4:	ldr	r2, [pc, #332]	; 1cd08 <__assert_fail@plt+0xa56c>
   1cbb8:	str	r3, [r7, #80]	; 0x50
   1cbbc:	str	r3, [r7, #84]	; 0x54
   1cbc0:	mov	r3, #2
   1cbc4:	str	r0, [r7, #136]	; 0x88
   1cbc8:	str	r2, [r7, #68]	; 0x44
   1cbcc:	lsl	r0, r0, r3
   1cbd0:	str	r3, [r7, #64]	; 0x40
   1cbd4:	bl	2df04 <__assert_fail@plt+0x1b768>
   1cbd8:	mov	r1, r9
   1cbdc:	mov	r2, r6
   1cbe0:	str	r0, [r7, #132]	; 0x84
   1cbe4:	mov	r0, r8
   1cbe8:	bl	1f810 <__assert_fail@plt+0xd074>
   1cbec:	ldr	r1, [r7, #136]	; 0x88
   1cbf0:	cmp	r1, #0
   1cbf4:	ble	1cb94 <__assert_fail@plt+0xa3f8>
   1cbf8:	ldr	r2, [sp, #44]	; 0x2c
   1cbfc:	ldr	r3, [r7, #132]	; 0x84
   1cc00:	sub	r6, r2, #4
   1cc04:	ldr	r2, [sp, #32]
   1cc08:	sub	r3, r3, #4
   1cc0c:	add	r1, r3, r1, lsl #2
   1cc10:	add	r6, r2, r6
   1cc14:	ldr	r2, [r6, #4]!
   1cc18:	str	r2, [r3, #4]!
   1cc1c:	cmp	r3, r1
   1cc20:	bne	1cc14 <__assert_fail@plt+0xa478>
   1cc24:	b	1cb94 <__assert_fail@plt+0xa3f8>
   1cc28:	ldr	r1, [pc, #240]	; 1cd20 <__assert_fail@plt+0xa584>
   1cc2c:	mov	r2, #5
   1cc30:	mov	r0, #0
   1cc34:	bl	1222c <dcgettext@plt>
   1cc38:	mov	r1, #0
   1cc3c:	mov	r2, r0
   1cc40:	mov	r0, #1
   1cc44:	bl	12388 <error@plt>
   1cc48:	bl	12184 <strndup@plt>
   1cc4c:	mov	r2, #5
   1cc50:	ldr	r1, [pc, #204]	; 1cd24 <__assert_fail@plt+0xa588>
   1cc54:	mov	r5, r0
   1cc58:	mov	r0, #0
   1cc5c:	bl	1222c <dcgettext@plt>
   1cc60:	cmp	r5, #0
   1cc64:	ldreq	r5, [sp, #48]	; 0x30
   1cc68:	addeq	r5, r4, r5
   1cc6c:	mov	r1, r5
   1cc70:	mov	r6, r0
   1cc74:	mov	r0, #0
   1cc78:	bl	18bf4 <__assert_fail@plt+0x6458>
   1cc7c:	str	r7, [sp]
   1cc80:	mov	r2, r6
   1cc84:	mov	r1, #0
   1cc88:	mov	r3, r0
   1cc8c:	mov	r0, #1
   1cc90:	bl	12388 <error@plt>
   1cc94:	bl	12244 <__stack_chk_fail@plt>
   1cc98:	mov	r2, #5
   1cc9c:	ldr	r1, [pc, #132]	; 1cd28 <__assert_fail@plt+0xa58c>
   1cca0:	mov	r0, #0
   1cca4:	bl	1222c <dcgettext@plt>
   1cca8:	mov	r3, r8
   1ccac:	mov	r1, #0
   1ccb0:	mov	r2, r0
   1ccb4:	mov	r0, #1
   1ccb8:	bl	12388 <error@plt>
   1ccbc:	mov	r2, #5
   1ccc0:	ldr	r1, [pc, #100]	; 1cd2c <__assert_fail@plt+0xa590>
   1ccc4:	b	1cc30 <__assert_fail@plt+0xa494>
   1ccc8:	ldr	r3, [pc, #96]	; 1cd30 <__assert_fail@plt+0xa594>
   1cccc:	ldr	r2, [pc, #96]	; 1cd34 <__assert_fail@plt+0xa598>
   1ccd0:	ldr	r1, [pc, #96]	; 1cd38 <__assert_fail@plt+0xa59c>
   1ccd4:	ldr	r0, [pc, #96]	; 1cd3c <__assert_fail@plt+0xa5a0>
   1ccd8:	bl	1279c <__assert_fail@plt>
   1ccdc:	andeq	fp, r5, r0, ror #24
   1cce0:	andeq	r7, r4, ip, asr r2
   1cce4:	andeq	r4, r1, r0, lsr #13
   1cce8:	ldrdeq	r4, [r1], -ip
   1ccec:	andeq	r0, r0, r1, lsl #2
   1ccf0:			; <UNDEFINED> instruction: 0x00013bb0
   1ccf4:	andeq	ip, r5, ip, asr lr
   1ccf8:	andeq	r7, r4, r0, lsl r4
   1ccfc:	andeq	r4, r4, ip, asr #1
   1cd00:	andeq	r7, r4, r4, ror r2
   1cd04:	andeq	ip, r5, ip, asr r5
   1cd08:	andeq	r7, r4, ip, lsr #8
   1cd0c:	muleq	r4, ip, sp
   1cd10:	andeq	r8, r4, r0, lsr r6
   1cd14:	ldrdeq	r7, [r4], -ip
   1cd18:	strdeq	r7, [r4], -r0
   1cd1c:	andeq	r5, r1, ip, asr #5
   1cd20:	andeq	r7, r4, r0, lsr r4
   1cd24:	andeq	r7, r4, r0, ror r3
   1cd28:	andeq	r7, r4, r4, lsr #9
   1cd2c:	andeq	r7, r4, ip, lsr #10
   1cd30:	andeq	r6, r4, ip, ror #16
   1cd34:	andeq	r0, r0, r4, ror fp
   1cd38:	andeq	r7, r4, r4, ror r0
   1cd3c:	andeq	r7, r4, r8, lsl r4
   1cd40:	mov	r3, r2
   1cd44:	mov	r2, r1
   1cd48:	mov	r1, r0
   1cd4c:	ldr	r0, [pc]	; 1cd54 <__assert_fail@plt+0xa5b8>
   1cd50:	b	1c728 <__assert_fail@plt+0x9f8c>
   1cd54:	muleq	r4, ip, r0
   1cd58:	mov	r3, r2
   1cd5c:	mov	r2, r1
   1cd60:	mov	r1, r0
   1cd64:	ldr	r0, [pc]	; 1cd6c <__assert_fail@plt+0xa5d0>
   1cd68:	b	1c728 <__assert_fail@plt+0x9f8c>
   1cd6c:	andeq	r7, r4, r8, asr r5
   1cd70:	mov	r3, r2
   1cd74:	mov	r2, r1
   1cd78:	mov	r1, r0
   1cd7c:	ldr	r0, [pc]	; 1cd84 <__assert_fail@plt+0xa5e8>
   1cd80:	b	1c728 <__assert_fail@plt+0x9f8c>
   1cd84:	muleq	r4, r0, r0
   1cd88:	mov	r3, r2
   1cd8c:	mov	r2, r1
   1cd90:	mov	r1, r0
   1cd94:	ldr	r0, [pc]	; 1cd9c <__assert_fail@plt+0xa600>
   1cd98:	b	1c728 <__assert_fail@plt+0x9f8c>
   1cd9c:	andeq	r7, r4, ip, asr r5
   1cda0:	push	{r4, lr}
   1cda4:	bl	161e0 <__assert_fail@plt+0x3a44>
   1cda8:	ldr	ip, [pc, #32]	; 1cdd0 <__assert_fail@plt+0xa634>
   1cdac:	mov	r1, #3
   1cdb0:	mov	r2, #2
   1cdb4:	mov	r3, #0
   1cdb8:	str	ip, [r0]
   1cdbc:	str	r1, [r0, #8]
   1cdc0:	str	r2, [r0, #12]
   1cdc4:	strh	r3, [r0, #18]
   1cdc8:	mov	r0, #1
   1cdcc:	pop	{r4, pc}
   1cdd0:	andeq	r4, r1, ip, asr #6
   1cdd4:	push	{r4, lr}
   1cdd8:	bl	161e0 <__assert_fail@plt+0x3a44>
   1cddc:	ldr	r1, [pc, #28]	; 1ce00 <__assert_fail@plt+0xa664>
   1cde0:	mov	r3, #3
   1cde4:	mov	r2, #0
   1cde8:	str	r1, [r0]
   1cdec:	strh	r2, [r0, #18]
   1cdf0:	str	r3, [r0, #8]
   1cdf4:	str	r3, [r0, #12]
   1cdf8:	mov	r0, #1
   1cdfc:	pop	{r4, pc}
   1ce00:	andeq	r4, r1, r4, ror fp
   1ce04:	push	{r4, lr}
   1ce08:	bl	161e0 <__assert_fail@plt+0x3a44>
   1ce0c:	ldr	lr, [pc, #40]	; 1ce3c <__assert_fail@plt+0xa6a0>
   1ce10:	mov	r2, #1065353216	; 0x3f800000
   1ce14:	mov	ip, #3
   1ce18:	mov	r1, #0
   1ce1c:	mov	r3, r0
   1ce20:	mov	r0, #1
   1ce24:	str	lr, [r3]
   1ce28:	str	ip, [r3, #8]
   1ce2c:	strh	r1, [r3, #18]
   1ce30:	str	r2, [r3, #28]
   1ce34:	str	r0, [r3, #12]
   1ce38:	pop	{r4, pc}
   1ce3c:	andeq	r3, r1, r0, lsl #18
   1ce40:	push	{r4, lr}
   1ce44:	bl	161e0 <__assert_fail@plt+0x3a44>
   1ce48:	mov	r3, #0
   1ce4c:	ldr	r1, [pc, #20]	; 1ce68 <__assert_fail@plt+0xa6cc>
   1ce50:	mov	r2, #5
   1ce54:	str	r1, [r0]
   1ce58:	strd	r2, [r0, #8]
   1ce5c:	strh	r3, [r0, #18]
   1ce60:	mov	r0, #1
   1ce64:	pop	{r4, pc}
   1ce68:			; <UNDEFINED> instruction: 0x000135b0
   1ce6c:	cmp	r1, #0
   1ce70:	beq	1cf7c <__assert_fail@plt+0xa7e0>
   1ce74:	ldr	r3, [r2]
   1ce78:	push	{r4, r5, r6, r7, r8, lr}
   1ce7c:	sub	sp, sp, #8
   1ce80:	ldr	r4, [r1, r3, lsl #2]
   1ce84:	cmp	r4, #0
   1ce88:	beq	1cf2c <__assert_fail@plt+0xa790>
   1ce8c:	add	r3, r3, #1
   1ce90:	str	r3, [r2]
   1ce94:	mov	r5, r0
   1ce98:	mov	r0, r4
   1ce9c:	bl	12778 <getgrnam@plt>
   1cea0:	mov	r6, r0
   1cea4:	bl	12070 <endgrent@plt>
   1cea8:	cmp	r6, #0
   1ceac:	beq	1cef0 <__assert_fail@plt+0xa754>
   1ceb0:	ldr	r6, [r6, #8]
   1ceb4:	mov	r1, r4
   1ceb8:	mov	r0, r5
   1cebc:	bl	17940 <__assert_fail@plt+0x51a4>
   1cec0:	vldr	s14, [pc, #296]	; 1cff0 <__assert_fail@plt+0xa854>
   1cec4:	vldr	s15, [pc, #296]	; 1cff4 <__assert_fail@plt+0xa858>
   1cec8:	mov	r3, r0
   1cecc:	ldrd	r0, [r0, #48]	; 0x30
   1ced0:	str	r6, [r3, #40]	; 0x28
   1ced4:	cmp	r1, #0
   1ced8:	cmpeq	r0, #100	; 0x64
   1cedc:	mov	r0, #1
   1cee0:	vmovcs.f32	s15, s14
   1cee4:	vstr	s15, [r3, #28]
   1cee8:	add	sp, sp, #8
   1ceec:	pop	{r4, r5, r6, r7, r8, pc}
   1cef0:	ldr	r1, [pc, #256]	; 1cff8 <__assert_fail@plt+0xa85c>
   1cef4:	mov	r0, r4
   1cef8:	bl	12790 <strspn@plt>
   1cefc:	subs	r7, r0, #0
   1cf00:	beq	1cf38 <__assert_fail@plt+0xa79c>
   1cf04:	ldrb	r3, [r4, r7]
   1cf08:	add	r7, r4, r7
   1cf0c:	cmp	r3, #0
   1cf10:	bne	1cf9c <__assert_fail@plt+0xa800>
   1cf14:	ldr	r3, [pc, #224]	; 1cffc <__assert_fail@plt+0xa860>
   1cf18:	mov	r0, r4
   1cf1c:	ldr	r1, [r3, #72]	; 0x48
   1cf20:	bl	21094 <__assert_fail@plt+0xe8f8>
   1cf24:	mov	r6, r0
   1cf28:	b	1ceb4 <__assert_fail@plt+0xa718>
   1cf2c:	mov	r0, r4
   1cf30:	add	sp, sp, #8
   1cf34:	pop	{r4, r5, r6, r7, r8, pc}
   1cf38:	ldrb	r5, [r4]
   1cf3c:	mov	r2, #5
   1cf40:	cmp	r5, #0
   1cf44:	beq	1cf84 <__assert_fail@plt+0xa7e8>
   1cf48:	ldr	r1, [pc, #176]	; 1d000 <__assert_fail@plt+0xa864>
   1cf4c:	bl	1222c <dcgettext@plt>
   1cf50:	ldr	r3, [pc, #164]	; 1cffc <__assert_fail@plt+0xa860>
   1cf54:	mov	r2, r4
   1cf58:	ldr	r1, [r3, #72]	; 0x48
   1cf5c:	mov	r5, r0
   1cf60:	mov	r0, r7
   1cf64:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1cf68:	mov	r2, r5
   1cf6c:	mov	r1, r7
   1cf70:	mov	r3, r0
   1cf74:	mov	r0, #1
   1cf78:	bl	12388 <error@plt>
   1cf7c:	mov	r0, r1
   1cf80:	bx	lr
   1cf84:	ldr	r1, [pc, #120]	; 1d004 <__assert_fail@plt+0xa868>
   1cf88:	bl	1222c <dcgettext@plt>
   1cf8c:	mov	r1, r5
   1cf90:	mov	r2, r0
   1cf94:	mov	r0, #1
   1cf98:	bl	12388 <error@plt>
   1cf9c:	mov	r2, #5
   1cfa0:	ldr	r1, [pc, #96]	; 1d008 <__assert_fail@plt+0xa86c>
   1cfa4:	mov	r0, r6
   1cfa8:	bl	1222c <dcgettext@plt>
   1cfac:	ldr	r5, [pc, #72]	; 1cffc <__assert_fail@plt+0xa860>
   1cfb0:	mov	r2, r4
   1cfb4:	ldr	r1, [r5, #72]	; 0x48
   1cfb8:	mov	r8, r0
   1cfbc:	mov	r0, r6
   1cfc0:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1cfc4:	mov	r2, r7
   1cfc8:	ldr	r1, [r5, #72]	; 0x48
   1cfcc:	mov	r4, r0
   1cfd0:	mov	r0, #1
   1cfd4:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1cfd8:	mov	r3, r4
   1cfdc:	mov	r2, r8
   1cfe0:	mov	r1, r6
   1cfe4:	str	r0, [sp]
   1cfe8:	mov	r0, #1
   1cfec:	bl	12388 <error@plt>
   1cff0:	cdpcc	12, 4, cr12, cr12, cr13, {6}
   1cff4:	svccc	0x007d70a4
   1cff8:	andeq	r7, r4, r4, lsl r0
   1cffc:	andeq	ip, r5, ip, asr lr
   1d000:	andeq	r7, r4, r4, ror #11
   1d004:	andeq	r7, r4, ip, lsl #12
   1d008:	andeq	r7, r4, r4, ror #10
   1d00c:	push	{r4, lr}
   1d010:	mov	r1, #0
   1d014:	bl	161f8 <__assert_fail@plt+0x3a5c>
   1d018:	ldr	ip, [pc, #32]	; 1d040 <__assert_fail@plt+0xa8a4>
   1d01c:	mov	r1, #2
   1d020:	mov	r2, #4
   1d024:	mov	r3, #0
   1d028:	str	ip, [r0]
   1d02c:	str	r1, [r0, #8]
   1d030:	str	r2, [r0, #12]
   1d034:	strh	r3, [r0, #18]
   1d038:	mov	r0, #1
   1d03c:	pop	{r4, pc}
   1d040:	andeq	r3, r1, r4, lsr r9
   1d044:	push	{r4, lr}
   1d048:	mov	r1, #0
   1d04c:	bl	161f8 <__assert_fail@plt+0x3a5c>
   1d050:	mov	r3, #0
   1d054:	ldr	r1, [pc, #20]	; 1d070 <__assert_fail@plt+0xa8d4>
   1d058:	mov	r2, #4
   1d05c:	str	r1, [r0]
   1d060:	strd	r2, [r0, #8]
   1d064:	strh	r3, [r0, #18]
   1d068:	mov	r0, #1
   1d06c:	pop	{r4, pc}
   1d070:	andeq	r4, r1, r4, ror #22
   1d074:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d078:	sub	sp, sp, #132	; 0x84
   1d07c:	ldr	r5, [pc, #1120]	; 1d4e4 <__assert_fail@plt+0xad48>
   1d080:	subs	r8, r1, #0
   1d084:	ldr	r3, [r5]
   1d088:	str	r3, [sp, #124]	; 0x7c
   1d08c:	beq	1d29c <__assert_fail@plt+0xab00>
   1d090:	ldr	r6, [r2]
   1d094:	mov	r7, r2
   1d098:	ldr	r4, [r8, r6, lsl #2]
   1d09c:	lsl	r9, r6, #2
   1d0a0:	cmp	r4, #0
   1d0a4:	beq	1d2a0 <__assert_fail@plt+0xab04>
   1d0a8:	mov	sl, r0
   1d0ac:	mov	r0, r4
   1d0b0:	bl	1249c <strlen@plt>
   1d0b4:	cmp	r0, #8
   1d0b8:	bne	1d29c <__assert_fail@plt+0xab00>
   1d0bc:	ldr	r3, [pc, #1060]	; 1d4e8 <__assert_fail@plt+0xad4c>
   1d0c0:	mov	r2, #6
   1d0c4:	ldm	r3, {r0, r1}
   1d0c8:	str	r0, [sp, #116]	; 0x74
   1d0cc:	strh	r1, [sp, #120]	; 0x78
   1d0d0:	ldr	r0, [pc, #1044]	; 1d4ec <__assert_fail@plt+0xad50>
   1d0d4:	mov	r1, r4
   1d0d8:	bl	12730 <strncmp@plt>
   1d0dc:	subs	r3, r0, #0
   1d0e0:	str	r3, [sp, #4]
   1d0e4:	bne	1d42c <__assert_fail@plt+0xac90>
   1d0e8:	ldrb	r3, [r4, #6]
   1d0ec:	ldrb	fp, [r4, #7]
   1d0f0:	cmp	fp, #66	; 0x42
   1d0f4:	cmpne	r3, #66	; 0x42
   1d0f8:	moveq	r4, #1
   1d0fc:	movne	r4, #0
   1d100:	beq	1d33c <__assert_fail@plt+0xaba0>
   1d104:	cmp	r3, #116	; 0x74
   1d108:	beq	1d2a0 <__assert_fail@plt+0xab04>
   1d10c:	add	r0, sp, #116	; 0x74
   1d110:	mov	r1, r3
   1d114:	str	r3, [sp, #4]
   1d118:	bl	124a8 <strchr@plt>
   1d11c:	cmp	r0, #0
   1d120:	beq	1d2a0 <__assert_fail@plt+0xab04>
   1d124:	mov	r1, fp
   1d128:	add	r0, sp, #116	; 0x74
   1d12c:	bl	124a8 <strchr@plt>
   1d130:	cmp	r0, #0
   1d134:	beq	1d2a0 <__assert_fail@plt+0xab04>
   1d138:	add	r9, r8, r9
   1d13c:	add	r6, r6, #1
   1d140:	ldr	r4, [r9, #4]
   1d144:	ldr	r3, [sp, #4]
   1d148:	cmp	r4, #0
   1d14c:	beq	1d3ec <__assert_fail@plt+0xac50>
   1d150:	mov	r1, r4
   1d154:	str	r6, [r7]
   1d158:	mov	r0, sl
   1d15c:	str	r3, [sp, #4]
   1d160:	bl	17940 <__assert_fail@plt+0x51a4>
   1d164:	ldr	r3, [sp, #4]
   1d168:	cmp	r3, #97	; 0x61
   1d16c:	mov	r4, r0
   1d170:	beq	1d3b0 <__assert_fail@plt+0xac14>
   1d174:	bls	1d304 <__assert_fail@plt+0xab68>
   1d178:	cmp	r3, #99	; 0x63
   1d17c:	beq	1d3a4 <__assert_fail@plt+0xac08>
   1d180:	cmp	r3, #109	; 0x6d
   1d184:	moveq	r3, #3
   1d188:	streq	r3, [r0, #40]	; 0x28
   1d18c:	bne	1d314 <__assert_fail@plt+0xab78>
   1d190:	cmp	fp, #116	; 0x74
   1d194:	beq	1d374 <__assert_fail@plt+0xabd8>
   1d198:	add	r0, sp, #8
   1d19c:	bl	17ba4 <__assert_fail@plt+0x5408>
   1d1a0:	ldr	r6, [pc, #840]	; 1d4f0 <__assert_fail@plt+0xad54>
   1d1a4:	ldr	r0, [r7]
   1d1a8:	add	r1, sp, #8
   1d1ac:	ldr	r3, [r6, #52]	; 0x34
   1d1b0:	ldr	r0, [r8, r0, lsl #2]
   1d1b4:	blx	r3
   1d1b8:	subs	r9, r0, #0
   1d1bc:	bne	1d468 <__assert_fail@plt+0xaccc>
   1d1c0:	cmp	fp, #97	; 0x61
   1d1c4:	beq	1d3c4 <__assert_fail@plt+0xac28>
   1d1c8:	bls	1d2bc <__assert_fail@plt+0xab20>
   1d1cc:	cmp	fp, #99	; 0x63
   1d1d0:	beq	1d360 <__assert_fail@plt+0xabc4>
   1d1d4:	cmp	fp, #109	; 0x6d
   1d1d8:	bne	1d47c <__assert_fail@plt+0xace0>
   1d1dc:	ldr	r1, [sp, #88]	; 0x58
   1d1e0:	ldr	r3, [sp, #92]	; 0x5c
   1d1e4:	str	r1, [r4, #48]	; 0x30
   1d1e8:	str	r3, [r4, #52]	; 0x34
   1d1ec:	ldr	r3, [r6, #28]
   1d1f0:	ldr	r2, [pc, #764]	; 1d4f4 <__assert_fail@plt+0xad58>
   1d1f4:	sub	r3, r3, r1
   1d1f8:	vldr	s14, [pc, #716]	; 1d4cc <__assert_fail@plt+0xad30>
   1d1fc:	smull	r1, r2, r2, r3
   1d200:	add	r2, r2, r3
   1d204:	asr	r3, r3, #31
   1d208:	rsb	r3, r3, r2, asr #16
   1d20c:	mov	r2, #0
   1d210:	vmov	s15, r3
   1d214:	str	r2, [r4, #44]	; 0x2c
   1d218:	vcvt.f32.s32	s15, s15
   1d21c:	vcmpe.f32	s15, s14
   1d220:	vmrs	APSR_nzcv, fpscr
   1d224:	bmi	1d39c <__assert_fail@plt+0xac00>
   1d228:	vldr	s14, [pc, #672]	; 1d4d0 <__assert_fail@plt+0xad34>
   1d22c:	vcmpe.f32	s15, s14
   1d230:	vmrs	APSR_nzcv, fpscr
   1d234:	bmi	1d3bc <__assert_fail@plt+0xac20>
   1d238:	vldr	s12, [pc, #660]	; 1d4d4 <__assert_fail@plt+0xad38>
   1d23c:	vldr	s14, [pc, #660]	; 1d4d8 <__assert_fail@plt+0xad3c>
   1d240:	vldr	s13, [pc, #660]	; 1d4dc <__assert_fail@plt+0xad40>
   1d244:	vcmpe.f32	s15, s12
   1d248:	vmrs	APSR_nzcv, fpscr
   1d24c:	vmovle.f32	s15, s13
   1d250:	vmovgt.f32	s15, s14
   1d254:	ldr	r3, [r7]
   1d258:	ldr	r2, [r4]
   1d25c:	add	r3, r3, #1
   1d260:	cmp	r2, #0
   1d264:	vstr	s15, [r4, #28]
   1d268:	str	r3, [r7]
   1d26c:	beq	1d454 <__assert_fail@plt+0xacb8>
   1d270:	ldr	r3, [pc, #640]	; 1d4f8 <__assert_fail@plt+0xad5c>
   1d274:	cmp	r2, r3
   1d278:	bne	1d440 <__assert_fail@plt+0xaca4>
   1d27c:	ldrb	r4, [r4, #18]
   1d280:	cmp	r4, #0
   1d284:	bne	1d2a0 <__assert_fail@plt+0xab04>
   1d288:	ldr	r3, [pc, #620]	; 1d4fc <__assert_fail@plt+0xad60>
   1d28c:	ldr	r2, [pc, #620]	; 1d500 <__assert_fail@plt+0xad64>
   1d290:	ldr	r1, [pc, #620]	; 1d504 <__assert_fail@plt+0xad68>
   1d294:	ldr	r0, [pc, #620]	; 1d508 <__assert_fail@plt+0xad6c>
   1d298:	bl	1279c <__assert_fail@plt>
   1d29c:	mov	r4, #0
   1d2a0:	ldr	r2, [sp, #124]	; 0x7c
   1d2a4:	ldr	r3, [r5]
   1d2a8:	mov	r0, r4
   1d2ac:	cmp	r2, r3
   1d2b0:	bne	1d3e8 <__assert_fail@plt+0xac4c>
   1d2b4:	add	sp, sp, #132	; 0x84
   1d2b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d2bc:	cmp	fp, #66	; 0x42
   1d2c0:	bne	1d47c <__assert_fail@plt+0xace0>
   1d2c4:	mvn	r3, #0
   1d2c8:	str	r3, [r4, #48]	; 0x30
   1d2cc:	str	r3, [r4, #52]	; 0x34
   1d2d0:	mov	r2, #5
   1d2d4:	ldr	r1, [pc, #560]	; 1d50c <__assert_fail@plt+0xad70>
   1d2d8:	bl	1222c <dcgettext@plt>
   1d2dc:	ldr	r3, [r7]
   1d2e0:	ldr	r1, [r8, r3, lsl #2]
   1d2e4:	mov	r4, r0
   1d2e8:	mov	r0, r9
   1d2ec:	bl	18bf4 <__assert_fail@plt+0x6458>
   1d2f0:	mov	r2, r4
   1d2f4:	mov	r1, r9
   1d2f8:	mov	r3, r0
   1d2fc:	mov	r0, #1
   1d300:	bl	12388 <error@plt>
   1d304:	cmp	r3, #66	; 0x42
   1d308:	moveq	r3, #1
   1d30c:	streq	r3, [r0, #40]	; 0x28
   1d310:	beq	1d190 <__assert_fail@plt+0xa9f4>
   1d314:	mov	r1, r3
   1d318:	add	r0, sp, #116	; 0x74
   1d31c:	bl	124a8 <strchr@plt>
   1d320:	ldr	r3, [pc, #468]	; 1d4fc <__assert_fail@plt+0xad60>
   1d324:	cmp	r0, #0
   1d328:	beq	1d3d8 <__assert_fail@plt+0xac3c>
   1d32c:	ldr	r2, [pc, #476]	; 1d510 <__assert_fail@plt+0xad74>
   1d330:	ldr	r1, [pc, #460]	; 1d504 <__assert_fail@plt+0xad68>
   1d334:	ldr	r0, [pc, #472]	; 1d514 <__assert_fail@plt+0xad78>
   1d338:	bl	1279c <__assert_fail@plt>
   1d33c:	mov	r2, #5
   1d340:	ldr	r1, [pc, #464]	; 1d518 <__assert_fail@plt+0xad7c>
   1d344:	bl	1222c <dcgettext@plt>
   1d348:	ldr	r4, [sp, #4]
   1d34c:	mov	r1, r4
   1d350:	mov	r2, r0
   1d354:	mov	r0, r4
   1d358:	bl	12388 <error@plt>
   1d35c:	b	1d2a0 <__assert_fail@plt+0xab04>
   1d360:	ldr	r1, [sp, #96]	; 0x60
   1d364:	ldr	r3, [sp, #100]	; 0x64
   1d368:	str	r1, [r4, #48]	; 0x30
   1d36c:	str	r3, [r4, #52]	; 0x34
   1d370:	b	1d1ec <__assert_fail@plt+0xaa50>
   1d374:	ldr	r3, [r7]
   1d378:	ldr	r2, [pc, #412]	; 1d51c <__assert_fail@plt+0xad80>
   1d37c:	add	r0, r4, #48	; 0x30
   1d380:	ldr	r1, [r8, r3, lsl #2]
   1d384:	bl	2b5c0 <__assert_fail@plt+0x18e24>
   1d388:	subs	r6, r0, #0
   1d38c:	beq	1d490 <__assert_fail@plt+0xacf4>
   1d390:	ldr	r1, [r4, #48]	; 0x30
   1d394:	ldr	r6, [pc, #340]	; 1d4f0 <__assert_fail@plt+0xad54>
   1d398:	b	1d1ec <__assert_fail@plt+0xaa50>
   1d39c:	vldr	s15, [pc, #316]	; 1d4e0 <__assert_fail@plt+0xad44>
   1d3a0:	b	1d254 <__assert_fail@plt+0xaab8>
   1d3a4:	mov	r3, #2
   1d3a8:	str	r3, [r0, #40]	; 0x28
   1d3ac:	b	1d190 <__assert_fail@plt+0xa9f4>
   1d3b0:	mov	r3, #0
   1d3b4:	str	r3, [r0, #40]	; 0x28
   1d3b8:	b	1d190 <__assert_fail@plt+0xa9f4>
   1d3bc:	vldr	s15, [pc, #276]	; 1d4d8 <__assert_fail@plt+0xad3c>
   1d3c0:	b	1d254 <__assert_fail@plt+0xaab8>
   1d3c4:	ldr	r1, [sp, #80]	; 0x50
   1d3c8:	ldr	r3, [sp, #84]	; 0x54
   1d3cc:	str	r1, [r4, #48]	; 0x30
   1d3d0:	str	r3, [r4, #52]	; 0x34
   1d3d4:	b	1d1ec <__assert_fail@plt+0xaa50>
   1d3d8:	mov	r2, #1600	; 0x640
   1d3dc:	ldr	r1, [pc, #288]	; 1d504 <__assert_fail@plt+0xad68>
   1d3e0:	ldr	r0, [pc, #312]	; 1d520 <__assert_fail@plt+0xad84>
   1d3e4:	bl	1279c <__assert_fail@plt>
   1d3e8:	bl	12244 <__stack_chk_fail@plt>
   1d3ec:	mov	r2, #5
   1d3f0:	ldr	r1, [pc, #300]	; 1d524 <__assert_fail@plt+0xad88>
   1d3f4:	mov	r0, r4
   1d3f8:	bl	1222c <dcgettext@plt>
   1d3fc:	ldr	r3, [pc, #236]	; 1d4f0 <__assert_fail@plt+0xad54>
   1d400:	ldr	r2, [r7]
   1d404:	ldr	r1, [r3, #72]	; 0x48
   1d408:	ldr	r2, [r8, r2, lsl #2]
   1d40c:	mov	r5, r0
   1d410:	mov	r0, r4
   1d414:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1d418:	mov	r2, r5
   1d41c:	mov	r1, r4
   1d420:	mov	r3, r0
   1d424:	mov	r0, #1
   1d428:	bl	12388 <error@plt>
   1d42c:	ldr	r3, [pc, #200]	; 1d4fc <__assert_fail@plt+0xad60>
   1d430:	ldr	r2, [pc, #240]	; 1d528 <__assert_fail@plt+0xad8c>
   1d434:	ldr	r1, [pc, #200]	; 1d504 <__assert_fail@plt+0xad68>
   1d438:	ldr	r0, [pc, #236]	; 1d52c <__assert_fail@plt+0xad90>
   1d43c:	bl	1279c <__assert_fail@plt>
   1d440:	ldr	r3, [pc, #180]	; 1d4fc <__assert_fail@plt+0xad60>
   1d444:	ldr	r2, [pc, #228]	; 1d530 <__assert_fail@plt+0xad94>
   1d448:	ldr	r1, [pc, #180]	; 1d504 <__assert_fail@plt+0xad68>
   1d44c:	ldr	r0, [pc, #224]	; 1d534 <__assert_fail@plt+0xad98>
   1d450:	bl	1279c <__assert_fail@plt>
   1d454:	ldr	r3, [pc, #160]	; 1d4fc <__assert_fail@plt+0xad60>
   1d458:	ldr	r2, [pc, #216]	; 1d538 <__assert_fail@plt+0xad9c>
   1d45c:	ldr	r1, [pc, #160]	; 1d504 <__assert_fail@plt+0xad68>
   1d460:	ldr	r0, [pc, #212]	; 1d53c <__assert_fail@plt+0xada0>
   1d464:	bl	1279c <__assert_fail@plt>
   1d468:	bl	124d8 <__errno_location@plt>
   1d46c:	ldr	r3, [r7]
   1d470:	ldr	r1, [r8, r3, lsl #2]
   1d474:	ldr	r0, [r0]
   1d478:	bl	18c34 <__assert_fail@plt+0x6498>
   1d47c:	ldr	r3, [pc, #188]	; 1d540 <__assert_fail@plt+0xada4>
   1d480:	ldr	r2, [pc, #188]	; 1d544 <__assert_fail@plt+0xada8>
   1d484:	ldr	r1, [pc, #120]	; 1d504 <__assert_fail@plt+0xad68>
   1d488:	ldr	r0, [pc, #132]	; 1d514 <__assert_fail@plt+0xad78>
   1d48c:	bl	1279c <__assert_fail@plt>
   1d490:	mov	r2, #5
   1d494:	ldr	r1, [pc, #172]	; 1d548 <__assert_fail@plt+0xadac>
   1d498:	bl	1222c <dcgettext@plt>
   1d49c:	ldr	r3, [pc, #76]	; 1d4f0 <__assert_fail@plt+0xad54>
   1d4a0:	ldr	r2, [r7]
   1d4a4:	ldr	r1, [r3, #72]	; 0x48
   1d4a8:	ldr	r2, [r8, r2, lsl #2]
   1d4ac:	mov	r4, r0
   1d4b0:	mov	r0, r6
   1d4b4:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1d4b8:	mov	r2, r4
   1d4bc:	mov	r1, r6
   1d4c0:	mov	r3, r0
   1d4c4:	mov	r0, #1
   1d4c8:	bl	12388 <error@plt>
   1d4cc:	stclcc	12, cr12, [ip, #820]	; 0x334
   1d4d0:	svccc	0x00800000
   1d4d4:	sbcmi	r0, r8, #0
   1d4d8:			; <UNDEFINED> instruction: 0x3e99999a
   1d4dc:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1d4e0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1d4e4:	andeq	fp, r5, r0, ror #24
   1d4e8:	andeq	r7, r4, ip, lsr #15
   1d4ec:	andeq	r7, r4, r4, asr #12
   1d4f0:	andeq	ip, r5, ip, asr lr
   1d4f4:	eorgt	r4, lr, #29360128	; 0x1c00000
   1d4f8:	andeq	r3, r1, ip, asr #18
   1d4fc:	andeq	r6, r4, ip, ror r8
   1d500:	andeq	r0, r0, r6, ror #12
   1d504:	andeq	r7, r4, r4, ror r0
   1d508:	muleq	r4, r8, r7
   1d50c:	andeq	r7, r4, r4, lsr r7
   1d510:	andeq	r0, r0, r1, asr #12
   1d514:	andeq	r4, r4, ip, lsr #11
   1d518:	andeq	r7, r4, r8, ror r6
   1d51c:	andeq	ip, r5, r0, ror lr
   1d520:	andeq	r7, r4, r0, ror #13
   1d524:	andeq	r7, r4, r0, asr #13
   1d528:	andeq	r0, r0, r8, lsl #12
   1d52c:	andeq	r7, r4, ip, asr #12
   1d530:	andeq	r0, r0, r5, ror #12
   1d534:	andeq	r7, r4, r4, ror r7
   1d538:	andeq	r0, r0, r4, ror #12
   1d53c:	andeq	r7, r4, r8, asr r7
   1d540:	andeq	r6, r4, ip, lsl #17
   1d544:	strdeq	r0, [r0], -r1
   1d548:	strdeq	r7, [r4], -r8
   1d54c:	push	{r4, r5, r6, r7, r8, lr}
   1d550:	mov	r5, r3
   1d554:	mov	r6, r0
   1d558:	mov	r4, r1
   1d55c:	mov	r7, r2
   1d560:	bl	124d8 <__errno_location@plt>
   1d564:	ldr	r3, [r0]
   1d568:	cmp	r3, #2
   1d56c:	beq	1d580 <__assert_fail@plt+0xade4>
   1d570:	cmp	r3, #20
   1d574:	beq	1d580 <__assert_fail@plt+0xade4>
   1d578:	mov	r0, r5
   1d57c:	pop	{r4, r5, r6, r7, r8, pc}
   1d580:	ldr	r3, [pc, #56]	; 1d5c0 <__assert_fail@plt+0xae24>
   1d584:	ldr	r3, [r3, #44]	; 0x2c
   1d588:	tst	r3, #2
   1d58c:	bne	1d5a4 <__assert_fail@plt+0xae08>
   1d590:	mov	r2, r7
   1d594:	mov	r1, r4
   1d598:	mov	r0, r6
   1d59c:	pop	{r4, r5, r6, r7, r8, lr}
   1d5a0:	b	3fd40 <fts_children@@Base+0xe2a4>
   1d5a4:	ldr	r1, [pc, #24]	; 1d5c4 <__assert_fail@plt+0xae28>
   1d5a8:	mov	r3, r4
   1d5ac:	ldr	r2, [pc, #20]	; 1d5c8 <__assert_fail@plt+0xae2c>
   1d5b0:	ldr	r0, [r1]
   1d5b4:	mov	r1, #1
   1d5b8:	bl	12580 <__fprintf_chk@plt>
   1d5bc:	b	1d590 <__assert_fail@plt+0xadf4>
   1d5c0:	andeq	ip, r5, ip, asr lr
   1d5c4:	andeq	ip, r5, r8, lsr r5
   1d5c8:			; <UNDEFINED> instruction: 0x000477b4
   1d5cc:	push	{r4, r5, r6, lr}
   1d5d0:	mov	r4, r0
   1d5d4:	mov	r5, r1
   1d5d8:	mov	r6, r2
   1d5dc:	bl	3fb64 <fts_children@@Base+0xe0c8>
   1d5e0:	subs	r3, r0, #0
   1d5e4:	popeq	{r4, r5, r6, pc}
   1d5e8:	mov	r2, r6
   1d5ec:	mov	r1, r5
   1d5f0:	mov	r0, r4
   1d5f4:	pop	{r4, r5, r6, lr}
   1d5f8:	b	1d54c <__assert_fail@plt+0xadb0>
   1d5fc:	push	{r4, r5, r6, lr}
   1d600:	ldr	lr, [pc, #60]	; 1d644 <__assert_fail@plt+0xaea8>
   1d604:	ldr	r4, [lr]
   1d608:	cmp	r4, #0
   1d60c:	bne	1d63c <__assert_fail@plt+0xaea0>
   1d610:	mov	r5, r1
   1d614:	mov	r6, r2
   1d618:	mov	r4, r0
   1d61c:	bl	3fb64 <fts_children@@Base+0xe0c8>
   1d620:	subs	r3, r0, #0
   1d624:	popeq	{r4, r5, r6, pc}
   1d628:	mov	r2, r6
   1d62c:	mov	r1, r5
   1d630:	mov	r0, r4
   1d634:	pop	{r4, r5, r6, lr}
   1d638:	b	1d54c <__assert_fail@plt+0xadb0>
   1d63c:	pop	{r4, r5, r6, lr}
   1d640:	b	3fd40 <fts_children@@Base+0xe2a4>
   1d644:	andeq	ip, r5, r0, lsr lr
   1d648:	ldr	ip, [pc, #104]	; 1d6b8 <__assert_fail@plt+0xaf1c>
   1d64c:	push	{r4, lr}
   1d650:	ldr	r0, [ip]
   1d654:	cmp	r0, #0
   1d658:	beq	1d67c <__assert_fail@plt+0xaee0>
   1d65c:	bl	17998 <__assert_fail@plt+0x51fc>
   1d660:	mov	r2, #1065353216	; 0x3f800000
   1d664:	mov	r1, #0
   1d668:	mov	r3, r0
   1d66c:	strh	r1, [r0, #18]
   1d670:	mov	r0, #1
   1d674:	str	r2, [r3, #28]
   1d678:	pop	{r4, pc}
   1d67c:	ldr	lr, [pc, #56]	; 1d6bc <__assert_fail@plt+0xaf20>
   1d680:	ldr	r0, [pc, #56]	; 1d6c0 <__assert_fail@plt+0xaf24>
   1d684:	mov	r3, lr
   1d688:	mov	r2, #0
   1d68c:	b	1d694 <__assert_fail@plt+0xaef8>
   1d690:	ldr	r0, [r3, #20]
   1d694:	cmp	r0, #0
   1d698:	add	r2, r2, #1
   1d69c:	beq	1d65c <__assert_fail@plt+0xaec0>
   1d6a0:	ldr	r1, [r3, #16]!
   1d6a4:	cmp	r1, #1
   1d6a8:	bne	1d690 <__assert_fail@plt+0xaef4>
   1d6ac:	add	r0, lr, r2, lsl #4
   1d6b0:	str	r0, [ip]
   1d6b4:	b	1d65c <__assert_fail@plt+0xaec0>
   1d6b8:	andeq	ip, r5, r0, asr #25
   1d6bc:	muleq	r4, ip, r8
   1d6c0:	andeq	r7, r4, r4, lsl #16
   1d6c4:	ldr	r3, [pc, #8]	; 1d6d4 <__assert_fail@plt+0xaf38>
   1d6c8:	mov	r2, #1
   1d6cc:	strb	r2, [r3, #16]
   1d6d0:	b	1d648 <__assert_fail@plt+0xaeac>
   1d6d4:	andeq	ip, r5, ip, asr lr
   1d6d8:	ldr	r3, [pc, #8]	; 1d6e8 <__assert_fail@plt+0xaf4c>
   1d6dc:	mov	r2, #0
   1d6e0:	strb	r2, [r3, #16]
   1d6e4:	b	1d648 <__assert_fail@plt+0xaeac>
   1d6e8:	andeq	ip, r5, ip, asr lr
   1d6ec:	ldr	r3, [pc, #8]	; 1d6fc <__assert_fail@plt+0xaf60>
   1d6f0:	mov	r2, #0
   1d6f4:	strb	r2, [r3, #14]
   1d6f8:	b	1d648 <__assert_fail@plt+0xaeac>
   1d6fc:	andeq	ip, r5, ip, asr lr
   1d700:	ldr	r3, [pc, #8]	; 1d710 <__assert_fail@plt+0xaf74>
   1d704:	mov	r2, #1
   1d708:	strb	r2, [r3, #12]
   1d70c:	b	1d648 <__assert_fail@plt+0xaeac>
   1d710:	andeq	ip, r5, ip, asr lr
   1d714:	ldr	r3, [pc, #8]	; 1d724 <__assert_fail@plt+0xaf88>
   1d718:	mov	r2, #1
   1d71c:	strb	r2, [r3, #13]
   1d720:	b	1d648 <__assert_fail@plt+0xaeac>
   1d724:	andeq	ip, r5, ip, asr lr
   1d728:	ldr	r3, [pc, #8]	; 1d738 <__assert_fail@plt+0xaf9c>
   1d72c:	mov	r2, #1
   1d730:	strb	r2, [r3, #14]
   1d734:	b	1d648 <__assert_fail@plt+0xaeac>
   1d738:	andeq	ip, r5, ip, asr lr
   1d73c:	ldr	r3, [pc, #8]	; 1d74c <__assert_fail@plt+0xafb0>
   1d740:	mov	r2, #256	; 0x100
   1d744:	strh	r2, [r3]
   1d748:	b	1d648 <__assert_fail@plt+0xaeac>
   1d74c:	andeq	ip, r5, ip, asr lr
   1d750:	push	{r4, r5, r6, lr}
   1d754:	ldr	r4, [pc, #84]	; 1d7b0 <__assert_fail@plt+0xb014>
   1d758:	ldrb	r5, [r4, #17]
   1d75c:	cmp	r5, #0
   1d760:	bne	1d770 <__assert_fail@plt+0xafd4>
   1d764:	ldrb	r3, [r4, #16]
   1d768:	cmp	r3, #0
   1d76c:	bne	1d780 <__assert_fail@plt+0xafe4>
   1d770:	mov	r3, #256	; 0x100
   1d774:	strh	r3, [r4]
   1d778:	pop	{r4, r5, r6, lr}
   1d77c:	b	1d648 <__assert_fail@plt+0xaeac>
   1d780:	mov	r2, #5
   1d784:	ldr	r1, [pc, #40]	; 1d7b4 <__assert_fail@plt+0xb018>
   1d788:	mov	r0, r5
   1d78c:	bl	1222c <dcgettext@plt>
   1d790:	mov	r1, r5
   1d794:	mov	r2, r0
   1d798:	mov	r0, r5
   1d79c:	bl	12388 <error@plt>
   1d7a0:	mov	r3, #256	; 0x100
   1d7a4:	strh	r3, [r4]
   1d7a8:	pop	{r4, r5, r6, lr}
   1d7ac:	b	1d648 <__assert_fail@plt+0xaeac>
   1d7b0:	andeq	ip, r5, ip, asr lr
   1d7b4:	andeq	r7, r4, r8, lsl #16
   1d7b8:	cmp	r1, #0
   1d7bc:	beq	1d7f0 <__assert_fail@plt+0xb054>
   1d7c0:	ldr	r3, [r2]
   1d7c4:	ldr	r0, [r1, r3, lsl #2]
   1d7c8:	cmp	r0, #0
   1d7cc:	beq	1d7f0 <__assert_fail@plt+0xb054>
   1d7d0:	add	r3, r3, #1
   1d7d4:	push	{r4, lr}
   1d7d8:	str	r3, [r2]
   1d7dc:	bl	20e98 <__assert_fail@plt+0xe6fc>
   1d7e0:	ldr	r3, [pc, #16]	; 1d7f8 <__assert_fail@plt+0xb05c>
   1d7e4:	pop	{r4, lr}
   1d7e8:	str	r0, [r3, #60]	; 0x3c
   1d7ec:	b	1d648 <__assert_fail@plt+0xaeac>
   1d7f0:	mov	r0, #0
   1d7f4:	bx	lr
   1d7f8:	andeq	ip, r5, ip, asr lr
   1d7fc:	ldr	r3, [pc, #48]	; 1d834 <__assert_fail@plt+0xb098>
   1d800:	ldr	r2, [r3, #44]	; 0x2c
   1d804:	tst	r2, #2
   1d808:	moveq	r2, #1
   1d80c:	ldrne	r2, [pc, #36]	; 1d838 <__assert_fail@plt+0xb09c>
   1d810:	ldreq	r0, [pc, #36]	; 1d83c <__assert_fail@plt+0xb0a0>
   1d814:	ldreq	r1, [pc, #36]	; 1d840 <__assert_fail@plt+0xb0a4>
   1d818:	strne	r2, [r3, #52]	; 0x34
   1d81c:	strbeq	r2, [r3, #12]
   1d820:	mov	r2, #1
   1d824:	streq	r0, [r3, #52]	; 0x34
   1d828:	streq	r1, [r3, #64]	; 0x40
   1d82c:	str	r2, [r3, #48]	; 0x30
   1d830:	b	1d648 <__assert_fail@plt+0xaeac>
   1d834:	andeq	ip, r5, ip, asr lr
   1d838:	muleq	r1, r4, r2
   1d83c:	andeq	r8, r1, ip, lsl #3
   1d840:	andeq	sp, r1, ip, asr #11
   1d844:	push	{r4, lr}
   1d848:	ldr	r4, [pc, #128]	; 1d8d0 <__assert_fail@plt+0xb134>
   1d84c:	ldrb	r2, [r4, #4]
   1d850:	cmp	r2, #0
   1d854:	beq	1d860 <__assert_fail@plt+0xb0c4>
   1d858:	mov	r0, #1
   1d85c:	pop	{r4, pc}
   1d860:	ldr	r1, [pc, #108]	; 1d8d4 <__assert_fail@plt+0xb138>
   1d864:	mov	r0, r1
   1d868:	bl	123ac <fnmatch@plt>
   1d86c:	subs	r2, r0, #0
   1d870:	bne	1d8b0 <__assert_fail@plt+0xb114>
   1d874:	ldr	r1, [pc, #88]	; 1d8d4 <__assert_fail@plt+0xb138>
   1d878:	ldr	r0, [pc, #88]	; 1d8d8 <__assert_fail@plt+0xb13c>
   1d87c:	bl	123ac <fnmatch@plt>
   1d880:	cmp	r0, #0
   1d884:	beq	1d8b0 <__assert_fail@plt+0xb114>
   1d888:	mov	r2, #16
   1d88c:	ldr	r1, [pc, #64]	; 1d8d4 <__assert_fail@plt+0xb138>
   1d890:	ldr	r0, [pc, #64]	; 1d8d8 <__assert_fail@plt+0xb13c>
   1d894:	bl	123ac <fnmatch@plt>
   1d898:	cmp	r0, #0
   1d89c:	bne	1d8b0 <__assert_fail@plt+0xb114>
   1d8a0:	mov	r3, #1
   1d8a4:	strb	r3, [r4, #4]
   1d8a8:	mov	r0, #1
   1d8ac:	pop	{r4, pc}
   1d8b0:	mov	r2, #5
   1d8b4:	ldr	r1, [pc, #32]	; 1d8dc <__assert_fail@plt+0xb140>
   1d8b8:	mov	r0, #0
   1d8bc:	bl	1222c <dcgettext@plt>
   1d8c0:	mov	r1, #0
   1d8c4:	mov	r2, r0
   1d8c8:	mov	r0, #1
   1d8cc:	bl	12388 <error@plt>
   1d8d0:	andeq	ip, r5, r0, asr #25
   1d8d4:	andeq	r7, r4, ip, ror r8
   1d8d8:			; <UNDEFINED> instruction: 0x000478b8
   1d8dc:	andeq	r7, r4, r0, lsl #17
   1d8e0:	push	{r4, r5, r6, r7, lr}
   1d8e4:	mov	r4, r1
   1d8e8:	sub	sp, sp, #12
   1d8ec:	mov	r6, r0
   1d8f0:	mov	r5, r2
   1d8f4:	mov	r7, r3
   1d8f8:	bl	1d844 <__assert_fail@plt+0xb0a8>
   1d8fc:	cmp	r4, #0
   1d900:	beq	1d978 <__assert_fail@plt+0xb1dc>
   1d904:	ldr	r3, [r5]
   1d908:	ldr	r4, [r4, r3, lsl #2]
   1d90c:	cmp	r4, #0
   1d910:	beq	1d978 <__assert_fail@plt+0xb1dc>
   1d914:	add	r3, r3, #1
   1d918:	str	r3, [r5]
   1d91c:	mov	r2, r4
   1d920:	ldr	r1, [sp, #32]
   1d924:	mov	r0, r6
   1d928:	bl	1790c <__assert_fail@plt+0x5170>
   1d92c:	mov	r3, #0
   1d930:	ldr	r1, [pc, #204]	; 1da04 <__assert_fail@plt+0xb268>
   1d934:	strh	r3, [r0, #18]
   1d938:	mov	r5, r0
   1d93c:	str	r4, [r0, #40]	; 0x28
   1d940:	mov	r0, r4
   1d944:	bl	126d0 <strpbrk@plt>
   1d948:	vldr	s15, [pc, #172]	; 1d9fc <__assert_fail@plt+0xb260>
   1d94c:	vldr	s14, [pc, #172]	; 1da00 <__assert_fail@plt+0xb264>
   1d950:	ldr	r3, [pc, #176]	; 1da08 <__assert_fail@plt+0xb26c>
   1d954:	ldrb	r3, [r3, #17]
   1d958:	cmp	r0, #0
   1d95c:	vmoveq.f32	s15, s14
   1d960:	cmp	r3, #0
   1d964:	vstr	s15, [r5, #28]
   1d968:	beq	1d984 <__assert_fail@plt+0xb1e8>
   1d96c:	mov	r0, #1
   1d970:	add	sp, sp, #12
   1d974:	pop	{r4, r5, r6, r7, pc}
   1d978:	mov	r0, r4
   1d97c:	add	sp, sp, #12
   1d980:	pop	{r4, r5, r6, r7, pc}
   1d984:	mov	r1, #47	; 0x2f
   1d988:	mov	r0, r4
   1d98c:	bl	1261c <strrchr@plt>
   1d990:	cmp	r0, #0
   1d994:	beq	1d96c <__assert_fail@plt+0xb1d0>
   1d998:	ldrb	r3, [r0, #1]
   1d99c:	cmp	r3, #0
   1d9a0:	bne	1d96c <__assert_fail@plt+0xb1d0>
   1d9a4:	ldr	r3, [sp, #32]
   1d9a8:	ldr	r1, [pc, #92]	; 1da0c <__assert_fail@plt+0xb270>
   1d9ac:	mov	r0, r4
   1d9b0:	sub	r1, r3, r1
   1d9b4:	clz	r1, r1
   1d9b8:	lsr	r1, r1, #5
   1d9bc:	bl	15d80 <__assert_fail@plt+0x35e4>
   1d9c0:	subs	r6, r0, #0
   1d9c4:	bne	1d96c <__assert_fail@plt+0xb1d0>
   1d9c8:	mov	r2, #5
   1d9cc:	ldr	r1, [pc, #60]	; 1da10 <__assert_fail@plt+0xb274>
   1d9d0:	bl	1222c <dcgettext@plt>
   1d9d4:	mov	r3, r7
   1d9d8:	str	r4, [sp]
   1d9dc:	mov	r1, r6
   1d9e0:	mov	r2, r0
   1d9e4:	mov	r0, r6
   1d9e8:	bl	12388 <error@plt>
   1d9ec:	ldr	r3, [pc, #32]	; 1da14 <__assert_fail@plt+0xb278>
   1d9f0:	mov	r0, #1
   1d9f4:	str	r3, [r5, #28]
   1d9f8:	b	1d970 <__assert_fail@plt+0xb1d4>
   1d9fc:	svccc	0x004ccccd
   1da00:	stclcc	12, cr12, [ip, #820]	; 0x334
   1da04:	andeq	r7, r4, r0, ror r0
   1da08:	andeq	ip, r5, ip, asr lr
   1da0c:	andeq	r3, r1, ip, asr #24
   1da10:			; <UNDEFINED> instruction: 0x000478bc
   1da14:	eorcc	ip, fp, #30464	; 0x7700
   1da18:	push	{lr}		; (str lr, [sp, #-4]!)
   1da1c:	sub	sp, sp, #12
   1da20:	ldr	ip, [pc, #16]	; 1da38 <__assert_fail@plt+0xb29c>
   1da24:	ldr	r3, [pc, #16]	; 1da3c <__assert_fail@plt+0xb2a0>
   1da28:	str	ip, [sp]
   1da2c:	bl	1d8e0 <__assert_fail@plt+0xb144>
   1da30:	add	sp, sp, #12
   1da34:	pop	{pc}		; (ldr pc, [sp], #4)
   1da38:	andeq	r3, r1, r0, ror ip
   1da3c:	strdeq	r7, [r4], -ip
   1da40:	push	{lr}		; (str lr, [sp, #-4]!)
   1da44:	sub	sp, sp, #12
   1da48:	ldr	ip, [pc, #16]	; 1da60 <__assert_fail@plt+0xb2c4>
   1da4c:	ldr	r3, [pc, #16]	; 1da64 <__assert_fail@plt+0xb2c8>
   1da50:	str	ip, [sp]
   1da54:	bl	1d8e0 <__assert_fail@plt+0xb144>
   1da58:	add	sp, sp, #12
   1da5c:	pop	{pc}		; (ldr pc, [sp], #4)
   1da60:	andeq	r3, r1, r0, ror ip
   1da64:	andeq	r7, r4, r8, lsl #18
   1da68:	push	{lr}		; (str lr, [sp, #-4]!)
   1da6c:	sub	sp, sp, #12
   1da70:	ldr	ip, [pc, #16]	; 1da88 <__assert_fail@plt+0xb2ec>
   1da74:	ldr	r3, [pc, #16]	; 1da8c <__assert_fail@plt+0xb2f0>
   1da78:	str	ip, [sp]
   1da7c:	bl	1d8e0 <__assert_fail@plt+0xb144>
   1da80:	add	sp, sp, #12
   1da84:	pop	{pc}		; (ldr pc, [sp], #4)
   1da88:	andeq	r3, r1, ip, asr #24
   1da8c:	andeq	r7, r4, r0, lsl r9
   1da90:	push	{lr}		; (str lr, [sp, #-4]!)
   1da94:	sub	sp, sp, #12
   1da98:	ldr	ip, [pc, #16]	; 1dab0 <__assert_fail@plt+0xb314>
   1da9c:	ldr	r3, [pc, #16]	; 1dab4 <__assert_fail@plt+0xb318>
   1daa0:	str	ip, [sp]
   1daa4:	bl	1d8e0 <__assert_fail@plt+0xb144>
   1daa8:	add	sp, sp, #12
   1daac:	pop	{pc}		; (ldr pc, [sp], #4)
   1dab0:	andeq	r3, r1, ip, asr #24
   1dab4:	andeq	r7, r4, ip, lsl r9
   1dab8:	push	{r4, r5, r6, lr}
   1dabc:	mov	r4, r1
   1dac0:	mov	r6, r0
   1dac4:	mov	r5, r2
   1dac8:	bl	1d844 <__assert_fail@plt+0xb0a8>
   1dacc:	cmp	r4, #0
   1dad0:	beq	1db24 <__assert_fail@plt+0xb388>
   1dad4:	ldr	r3, [r5]
   1dad8:	ldr	r4, [r4, r3, lsl #2]
   1dadc:	cmp	r4, #0
   1dae0:	beq	1db24 <__assert_fail@plt+0xb388>
   1dae4:	add	r3, r3, #1
   1dae8:	str	r3, [r5]
   1daec:	mov	r1, r4
   1daf0:	mov	r0, r6
   1daf4:	bl	17940 <__assert_fail@plt+0x51a4>
   1daf8:	ldr	r1, [pc, #52]	; 1db34 <__assert_fail@plt+0xb398>
   1dafc:	str	r4, [r0, #40]	; 0x28
   1db00:	mov	r5, r0
   1db04:	mov	r0, r4
   1db08:	bl	126d0 <strpbrk@plt>
   1db0c:	vldr	s15, [pc, #24]	; 1db2c <__assert_fail@plt+0xb390>
   1db10:	vldr	s14, [pc, #24]	; 1db30 <__assert_fail@plt+0xb394>
   1db14:	mov	r4, #1
   1db18:	cmp	r0, #0
   1db1c:	vmoveq.f32	s15, s14
   1db20:	vstr	s15, [r5, #28]
   1db24:	mov	r0, r4
   1db28:	pop	{r4, r5, r6, pc}
   1db2c:	stccc	7, cr13, [r3, #44]!	; 0x2c
   1db30:	stccc	7, cr13, [r3], #-44	; 0xffffffd4
   1db34:	andeq	r7, r4, r0, ror r0
   1db38:	cmp	r0, #0
   1db3c:	ldr	r3, [r1]
   1db40:	beq	1dbcc <__assert_fail@plt+0xb430>
   1db44:	push	{r4, r5, r6, r7, lr}
   1db48:	lsl	lr, r3, #2
   1db4c:	ldr	r5, [r0, r3, lsl #2]
   1db50:	sub	sp, sp, #12
   1db54:	cmp	r5, #0
   1db58:	beq	1dbc0 <__assert_fail@plt+0xb424>
   1db5c:	mov	ip, r1
   1db60:	add	r0, r0, lr
   1db64:	add	r3, r3, #1
   1db68:	ldr	r7, [r0, #-4]
   1db6c:	ldr	r1, [pc, #156]	; 1dc10 <__assert_fail@plt+0xb474>
   1db70:	str	r3, [ip]
   1db74:	mov	r0, r5
   1db78:	mov	r4, r2
   1db7c:	bl	12790 <strspn@plt>
   1db80:	cmp	r0, #0
   1db84:	ldrle	r6, [pc, #136]	; 1dc14 <__assert_fail@plt+0xb478>
   1db88:	ble	1dbd4 <__assert_fail@plt+0xb438>
   1db8c:	ldrb	r3, [r5, r0]
   1db90:	ldr	r6, [pc, #124]	; 1dc14 <__assert_fail@plt+0xb478>
   1db94:	cmp	r3, #0
   1db98:	bne	1dbd4 <__assert_fail@plt+0xb438>
   1db9c:	mov	r0, r5
   1dba0:	ldr	r1, [r6, #72]	; 0x48
   1dba4:	bl	21094 <__assert_fail@plt+0xe8f8>
   1dba8:	cmp	r0, #0
   1dbac:	str	r0, [r4]
   1dbb0:	blt	1dbd4 <__assert_fail@plt+0xb438>
   1dbb4:	add	sp, sp, #12
   1dbb8:	pop	{r4, r5, r6, r7, lr}
   1dbbc:	b	1d648 <__assert_fail@plt+0xaeac>
   1dbc0:	mov	r0, #0
   1dbc4:	add	sp, sp, #12
   1dbc8:	pop	{r4, r5, r6, r7, pc}
   1dbcc:	mov	r0, #0
   1dbd0:	bx	lr
   1dbd4:	mov	r2, #5
   1dbd8:	ldr	r1, [pc, #56]	; 1dc18 <__assert_fail@plt+0xb47c>
   1dbdc:	mov	r0, #0
   1dbe0:	bl	1222c <dcgettext@plt>
   1dbe4:	mov	r2, r5
   1dbe8:	ldr	r1, [r6, #72]	; 0x48
   1dbec:	mov	r4, r0
   1dbf0:	mov	r0, #0
   1dbf4:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1dbf8:	mov	r2, r4
   1dbfc:	mov	r3, r7
   1dc00:	mov	r1, #0
   1dc04:	str	r0, [sp]
   1dc08:	mov	r0, #1
   1dc0c:	bl	12388 <error@plt>
   1dc10:	andeq	r7, r4, r4, lsl r0
   1dc14:	andeq	ip, r5, ip, asr lr
   1dc18:	andeq	r7, r4, r4, lsr #18
   1dc1c:	mov	r0, r1
   1dc20:	mov	r1, r2
   1dc24:	ldr	r2, [pc]	; 1dc2c <__assert_fail@plt+0xb490>
   1dc28:	b	1db38 <__assert_fail@plt+0xb39c>
   1dc2c:	andeq	ip, r5, r4, ror #28
   1dc30:	mov	r0, r1
   1dc34:	mov	r1, r2
   1dc38:	ldr	r2, [pc]	; 1dc40 <__assert_fail@plt+0xb4a4>
   1dc3c:	b	1db38 <__assert_fail@plt+0xb39c>
   1dc40:	andeq	ip, r5, r0, ror #28
   1dc44:	push	{r4, r5, r6, lr}
   1dc48:	subs	r4, r1, #0
   1dc4c:	beq	1dcb8 <__assert_fail@plt+0xb51c>
   1dc50:	ldr	r3, [r2]
   1dc54:	ldr	r3, [r4, r3, lsl #2]
   1dc58:	cmp	r3, #0
   1dc5c:	beq	1dcb0 <__assert_fail@plt+0xb514>
   1dc60:	mov	r6, r2
   1dc64:	mov	r5, r0
   1dc68:	bl	120c4 <is_selinux_enabled@plt>
   1dc6c:	cmp	r0, #0
   1dc70:	ble	1dcc0 <__assert_fail@plt+0xb524>
   1dc74:	mov	r0, r5
   1dc78:	mov	r1, #0
   1dc7c:	bl	17940 <__assert_fail@plt+0x51a4>
   1dc80:	ldr	r3, [r6]
   1dc84:	ldr	r2, [pc, #84]	; 1dce0 <__assert_fail@plt+0xb544>
   1dc88:	mov	r1, #0
   1dc8c:	ldr	r3, [r4, r3, lsl #2]
   1dc90:	str	r3, [r0, #40]	; 0x28
   1dc94:	ldr	r3, [r6]
   1dc98:	strb	r1, [r0, #18]
   1dc9c:	add	r3, r3, #1
   1dca0:	str	r2, [r0, #28]
   1dca4:	str	r3, [r6]
   1dca8:	mov	r0, #1
   1dcac:	pop	{r4, r5, r6, pc}
   1dcb0:	mov	r0, r3
   1dcb4:	pop	{r4, r5, r6, pc}
   1dcb8:	mov	r0, r4
   1dcbc:	pop	{r4, r5, r6, pc}
   1dcc0:	mov	r2, #5
   1dcc4:	ldr	r1, [pc, #24]	; 1dce4 <__assert_fail@plt+0xb548>
   1dcc8:	mov	r0, #0
   1dccc:	bl	1222c <dcgettext@plt>
   1dcd0:	mov	r1, #0
   1dcd4:	mov	r2, r0
   1dcd8:	mov	r0, #1
   1dcdc:	bl	12388 <error@plt>
   1dce0:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1dce4:	andeq	r7, r4, r4, ror #18
   1dce8:	ldr	r3, [pc, #160]	; 1dd90 <__assert_fail@plt+0xb5f4>
   1dcec:	push	{r4, r5, r6, r7, r8, lr}
   1dcf0:	sub	sp, sp, #8
   1dcf4:	ldrb	r4, [r3, #17]
   1dcf8:	cmp	r4, #0
   1dcfc:	bne	1dd84 <__assert_fail@plt+0xb5e8>
   1dd00:	ldrb	r3, [r3, #16]
   1dd04:	cmp	r3, #0
   1dd08:	beq	1dd84 <__assert_fail@plt+0xb5e8>
   1dd0c:	mov	r5, r1
   1dd10:	mov	r6, r0
   1dd14:	mov	r1, #47	; 0x2f
   1dd18:	mov	r0, r2
   1dd1c:	bl	124a8 <strchr@plt>
   1dd20:	cmp	r0, #0
   1dd24:	beq	1dd84 <__assert_fail@plt+0xb5e8>
   1dd28:	mov	r2, #5
   1dd2c:	ldr	r1, [pc, #96]	; 1dd94 <__assert_fail@plt+0xb5f8>
   1dd30:	mov	r0, r4
   1dd34:	bl	1222c <dcgettext@plt>
   1dd38:	mov	r1, r6
   1dd3c:	mov	r7, r0
   1dd40:	mov	r0, r4
   1dd44:	bl	18bf4 <__assert_fail@plt+0x6458>
   1dd48:	ldr	r1, [pc, #72]	; 1dd98 <__assert_fail@plt+0xb5fc>
   1dd4c:	mov	r6, r0
   1dd50:	mov	r0, #1
   1dd54:	bl	18bf4 <__assert_fail@plt+0x6458>
   1dd58:	mov	r1, r5
   1dd5c:	mov	r8, r0
   1dd60:	mov	r0, #2
   1dd64:	bl	18bf4 <__assert_fail@plt+0x6458>
   1dd68:	str	r8, [sp]
   1dd6c:	mov	r3, r6
   1dd70:	mov	r2, r7
   1dd74:	mov	r1, r4
   1dd78:	str	r0, [sp, #4]
   1dd7c:	mov	r0, r4
   1dd80:	bl	12388 <error@plt>
   1dd84:	mov	r0, #1
   1dd88:	add	sp, sp, #8
   1dd8c:	pop	{r4, r5, r6, r7, r8, pc}
   1dd90:	andeq	ip, r5, ip, asr lr
   1dd94:	muleq	r4, r8, r9
   1dd98:	andeq	sl, r4, ip, ror #24
   1dd9c:	push	{r4, r5, r6, r7, r8, lr}
   1dda0:	subs	r4, r1, #0
   1dda4:	beq	1ddec <__assert_fail@plt+0xb650>
   1dda8:	ldr	r7, [r2]
   1ddac:	ldr	r6, [r4, r7, lsl #2]
   1ddb0:	cmp	r6, #0
   1ddb4:	moveq	r4, r6
   1ddb8:	beq	1ddec <__assert_fail@plt+0xb650>
   1ddbc:	add	r3, r7, #1
   1ddc0:	str	r3, [r2]
   1ddc4:	mov	r5, r2
   1ddc8:	mov	r8, r0
   1ddcc:	bl	1d844 <__assert_fail@plt+0xb0a8>
   1ddd0:	mov	r2, r6
   1ddd4:	ldr	r1, [pc, #100]	; 1de40 <__assert_fail@plt+0xb6a4>
   1ddd8:	ldr	r0, [pc, #100]	; 1de44 <__assert_fail@plt+0xb6a8>
   1dddc:	bl	1dce8 <__assert_fail@plt+0xb54c>
   1dde0:	subs	r4, r0, #0
   1dde4:	streq	r7, [r5]
   1dde8:	bne	1ddf4 <__assert_fail@plt+0xb658>
   1ddec:	mov	r0, r4
   1ddf0:	pop	{r4, r5, r6, r7, r8, pc}
   1ddf4:	mov	r1, r6
   1ddf8:	mov	r0, r8
   1ddfc:	bl	17940 <__assert_fail@plt+0x51a4>
   1de00:	mov	r3, #0
   1de04:	ldr	r1, [pc, #60]	; 1de48 <__assert_fail@plt+0xb6ac>
   1de08:	mov	r5, r0
   1de0c:	str	r6, [r0, #40]	; 0x28
   1de10:	mov	r0, r6
   1de14:	strh	r3, [r5, #18]
   1de18:	bl	126d0 <strpbrk@plt>
   1de1c:	vldr	s14, [pc, #20]	; 1de38 <__assert_fail@plt+0xb69c>
   1de20:	vldr	s15, [pc, #20]	; 1de3c <__assert_fail@plt+0xb6a0>
   1de24:	cmp	r0, #0
   1de28:	mov	r0, r4
   1de2c:	vmoveq.f32	s15, s14
   1de30:	vstr	s15, [r5, #28]
   1de34:	pop	{r4, r5, r6, r7, r8, pc}
   1de38:	stclcc	12, cr12, [ip, #820]	; 0x334
   1de3c:	svccc	0x004ccccd
   1de40:	andeq	r7, r4, ip, asr #20
   1de44:	andeq	r7, r4, r8, asr sl
   1de48:	andeq	r7, r4, r0, ror r0
   1de4c:	push	{r4, r5, r6, lr}
   1de50:	mov	r4, r1
   1de54:	mov	r6, r0
   1de58:	mov	r5, r2
   1de5c:	bl	1d844 <__assert_fail@plt+0xb0a8>
   1de60:	cmp	r4, #0
   1de64:	beq	1de98 <__assert_fail@plt+0xb6fc>
   1de68:	ldr	r3, [r5]
   1de6c:	ldr	r4, [r4, r3, lsl #2]
   1de70:	cmp	r4, #0
   1de74:	beq	1de98 <__assert_fail@plt+0xb6fc>
   1de78:	add	r3, r3, #1
   1de7c:	str	r3, [r5]
   1de80:	mov	r2, r4
   1de84:	ldr	r1, [pc, #100]	; 1def0 <__assert_fail@plt+0xb754>
   1de88:	ldr	r0, [pc, #100]	; 1def4 <__assert_fail@plt+0xb758>
   1de8c:	bl	1dce8 <__assert_fail@plt+0xb54c>
   1de90:	subs	r5, r0, #0
   1de94:	bne	1dea4 <__assert_fail@plt+0xb708>
   1de98:	mov	r5, #0
   1de9c:	mov	r0, r5
   1dea0:	pop	{r4, r5, r6, pc}
   1dea4:	mov	r1, r4
   1dea8:	mov	r0, r6
   1deac:	bl	17940 <__assert_fail@plt+0x51a4>
   1deb0:	mov	r3, #0
   1deb4:	ldr	r1, [pc, #60]	; 1def8 <__assert_fail@plt+0xb75c>
   1deb8:	mov	r6, r0
   1debc:	str	r4, [r0, #40]	; 0x28
   1dec0:	mov	r0, r4
   1dec4:	strh	r3, [r6, #18]
   1dec8:	bl	126d0 <strpbrk@plt>
   1decc:	vldr	s14, [pc, #20]	; 1dee8 <__assert_fail@plt+0xb74c>
   1ded0:	vldr	s15, [pc, #20]	; 1deec <__assert_fail@plt+0xb750>
   1ded4:	cmp	r0, #0
   1ded8:	mov	r0, r5
   1dedc:	vmoveq.f32	s15, s14
   1dee0:	vstr	s15, [r6, #28]
   1dee4:	pop	{r4, r5, r6, pc}
   1dee8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1deec:	svccc	0x004ccccd
   1def0:	andeq	r7, r4, r0, ror #20
   1def4:	andeq	r7, r4, ip, ror #20
   1def8:	andeq	r7, r4, r0, ror r0
   1defc:	push	{r4, lr}
   1df00:	ldr	r4, [pc, #144]	; 1df98 <__assert_fail@plt+0xb7fc>
   1df04:	ldrb	r3, [r4, #36]	; 0x24
   1df08:	cmp	r3, #0
   1df0c:	beq	1df18 <__assert_fail@plt+0xb77c>
   1df10:	mov	r0, #1
   1df14:	pop	{r4, pc}
   1df18:	ldr	r2, [r4, #28]
   1df1c:	add	r0, r4, #28
   1df20:	add	r2, r2, #86016	; 0x15000
   1df24:	add	r2, r2, #384	; 0x180
   1df28:	strd	r2, [r4, #28]
   1df2c:	bl	12424 <localtime@plt>
   1df30:	ldr	ip, [r4, #28]
   1df34:	cmp	r0, #0
   1df38:	beq	1df70 <__assert_fail@plt+0xb7d4>
   1df3c:	ldr	r1, [r0, #8]
   1df40:	ldrd	r2, [r0]
   1df44:	rsb	r1, r1, r1, lsl #4
   1df48:	rsb	r3, r3, r3, lsl #4
   1df4c:	rsb	r1, r1, r1, lsl #4
   1df50:	add	r3, r2, r3, lsl #2
   1df54:	add	r3, r3, r1, lsl #4
   1df58:	sub	r3, ip, r3
   1df5c:	mov	r2, #1
   1df60:	str	r3, [r4, #28]
   1df64:	strb	r2, [r4, #36]	; 0x24
   1df68:	mov	r0, #1
   1df6c:	pop	{r4, pc}
   1df70:	ldr	r2, [pc, #36]	; 1df9c <__assert_fail@plt+0xb800>
   1df74:	asr	r3, ip, #31
   1df78:	smull	r1, r2, r2, ip
   1df7c:	add	r2, r2, ip
   1df80:	rsb	r3, r3, r2, asr #16
   1df84:	add	r3, r3, r3, lsl #1
   1df88:	rsb	r3, r3, r3, lsl #4
   1df8c:	rsb	r3, r3, r3, lsl #4
   1df90:	sub	r3, ip, r3, lsl #7
   1df94:	b	1df58 <__assert_fail@plt+0xb7bc>
   1df98:	andeq	ip, r5, ip, asr lr
   1df9c:	eorgt	r4, lr, #29360128	; 0x1c00000
   1dfa0:	cmp	r0, #0
   1dfa4:	bxeq	lr
   1dfa8:	ldr	ip, [r1]
   1dfac:	push	{r4, r5, r6, r7, r8, lr}
   1dfb0:	sub	sp, sp, #8
   1dfb4:	ldr	r4, [r0, ip, lsl #2]
   1dfb8:	cmp	r4, #0
   1dfbc:	beq	1e088 <__assert_fail@plt+0xb8ec>
   1dfc0:	add	ip, ip, #1
   1dfc4:	str	ip, [r1]
   1dfc8:	mov	r0, r2
   1dfcc:	ldr	r1, [pc, #240]	; 1e0c4 <__assert_fail@plt+0xb928>
   1dfd0:	mov	r2, r4
   1dfd4:	mov	r6, r3
   1dfd8:	bl	1790c <__assert_fail@plt+0x5170>
   1dfdc:	mov	r7, #0
   1dfe0:	mov	r8, r0
   1dfe4:	strh	r7, [r0, #18]
   1dfe8:	mov	r0, #32
   1dfec:	bl	2df04 <__assert_fail@plt+0x1b768>
   1dff0:	mov	r3, #100	; 0x64
   1dff4:	mov	r5, r0
   1dff8:	str	r0, [r8, #40]	; 0x28
   1dffc:	str	r3, [r5, #4]
   1e000:	mov	r0, r3
   1e004:	bl	2df04 <__assert_fail@plt+0x1b768>
   1e008:	str	r7, [r5, #16]
   1e00c:	str	r0, [r5]
   1e010:	mov	r0, r6
   1e014:	bl	3f1bc <fts_children@@Base+0xd720>
   1e018:	str	r6, [r5, #12]
   1e01c:	str	r7, [r5, #20]
   1e020:	mov	r0, r4
   1e024:	bl	1249c <strlen@plt>
   1e028:	mov	r2, r5
   1e02c:	mov	r1, r0
   1e030:	mov	r0, r4
   1e034:	bl	3f14c <fts_children@@Base+0xd6b0>
   1e038:	subs	r5, r0, #0
   1e03c:	bne	1e094 <__assert_fail@plt+0xb8f8>
   1e040:	ldr	r1, [pc, #128]	; 1e0c8 <__assert_fail@plt+0xb92c>
   1e044:	mov	r0, r4
   1e048:	bl	126d0 <strpbrk@plt>
   1e04c:	cmp	r0, #0
   1e050:	beq	1e068 <__assert_fail@plt+0xb8cc>
   1e054:	vldr	s15, [pc, #96]	; 1e0bc <__assert_fail@plt+0xb920>
   1e058:	mov	r0, #1
   1e05c:	vstr	s15, [r8, #28]
   1e060:	add	sp, sp, #8
   1e064:	pop	{r4, r5, r6, r7, r8, pc}
   1e068:	mov	r0, r4
   1e06c:	mov	r1, #46	; 0x2e
   1e070:	bl	124a8 <strchr@plt>
   1e074:	vldr	s15, [pc, #64]	; 1e0bc <__assert_fail@plt+0xb920>
   1e078:	vldr	s14, [pc, #64]	; 1e0c0 <__assert_fail@plt+0xb924>
   1e07c:	cmp	r0, #0
   1e080:	vmoveq.f32	s15, s14
   1e084:	b	1e058 <__assert_fail@plt+0xb8bc>
   1e088:	mov	r0, r4
   1e08c:	add	sp, sp, #8
   1e090:	pop	{r4, r5, r6, r7, r8, pc}
   1e094:	mov	r2, #5
   1e098:	ldr	r1, [pc, #44]	; 1e0cc <__assert_fail@plt+0xb930>
   1e09c:	mov	r0, r7
   1e0a0:	bl	1222c <dcgettext@plt>
   1e0a4:	str	r5, [sp]
   1e0a8:	mov	r3, r4
   1e0ac:	mov	r1, r7
   1e0b0:	mov	r2, r0
   1e0b4:	mov	r0, #1
   1e0b8:	bl	12388 <error@plt>
   1e0bc:	svccc	0x004ccccd
   1e0c0:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e0c4:	andeq	r3, r1, ip, lsl lr
   1e0c8:	andeq	r7, r4, r0, ror r0
   1e0cc:	andeq	r7, r4, r4, ror sl
   1e0d0:	ldr	r3, [pc, #32]	; 1e0f8 <__assert_fail@plt+0xb95c>
   1e0d4:	push	{lr}		; (str lr, [sp, #-4]!)
   1e0d8:	mov	ip, r1
   1e0dc:	mov	lr, r2
   1e0e0:	mov	r1, lr
   1e0e4:	mov	r2, r0
   1e0e8:	ldr	r3, [r3, #60]	; 0x3c
   1e0ec:	mov	r0, ip
   1e0f0:	pop	{lr}		; (ldr lr, [sp], #4)
   1e0f4:	b	1dfa0 <__assert_fail@plt+0xb804>
   1e0f8:	andeq	ip, r5, ip, asr lr
   1e0fc:	ldr	r3, [pc, #24]	; 1e11c <__assert_fail@plt+0xb980>
   1e100:	mov	ip, r1
   1e104:	mov	r1, r2
   1e108:	ldr	r3, [r3, #60]	; 0x3c
   1e10c:	mov	r2, r0
   1e110:	orr	r3, r3, #4194304	; 0x400000
   1e114:	mov	r0, ip
   1e118:	b	1dfa0 <__assert_fail@plt+0xb804>
   1e11c:	andeq	ip, r5, ip, asr lr
   1e120:	push	{r4, lr}
   1e124:	bl	17998 <__assert_fail@plt+0x51fc>
   1e128:	mov	r4, r0
   1e12c:	add	r1, r0, #40	; 0x28
   1e130:	ldr	r0, [pc, #24]	; 1e150 <__assert_fail@plt+0xb9b4>
   1e134:	bl	1c198 <__assert_fail@plt+0x99fc>
   1e138:	ldr	r2, [pc, #20]	; 1e154 <__assert_fail@plt+0xb9b8>
   1e13c:	mov	r3, #1065353216	; 0x3f800000
   1e140:	mov	r0, #1
   1e144:	strh	r2, [r4, #16]
   1e148:	str	r3, [r4, #28]
   1e14c:	pop	{r4, pc}
   1e150:	andeq	r7, r4, ip, asr r1
   1e154:	andeq	r0, r0, r1, lsl #2
   1e158:	push	{r4, r5, r6, r7, r8, lr}
   1e15c:	sub	sp, sp, #40	; 0x28
   1e160:	ldr	r6, [pc, #344]	; 1e2c0 <__assert_fail@plt+0xbb24>
   1e164:	subs	r4, r1, #0
   1e168:	ldr	r3, [r6]
   1e16c:	str	r3, [sp, #36]	; 0x24
   1e170:	beq	1e244 <__assert_fail@plt+0xbaa8>
   1e174:	ldr	r3, [r2]
   1e178:	ldr	r7, [r4, r3, lsl #2]
   1e17c:	cmp	r7, #0
   1e180:	beq	1e260 <__assert_fail@plt+0xbac4>
   1e184:	add	r1, sp, #12
   1e188:	ldr	ip, [pc, #308]	; 1e2c4 <__assert_fail@plt+0xbb28>
   1e18c:	add	r3, r3, #1
   1e190:	mov	r8, r0
   1e194:	add	r5, sp, #20
   1e198:	mov	r0, #0
   1e19c:	str	r3, [r2]
   1e1a0:	str	r0, [sp, #12]
   1e1a4:	str	r0, [sp, #16]
   1e1a8:	str	ip, [sp]
   1e1ac:	vldr	d0, [pc, #236]	; 1e2a0 <__assert_fail@plt+0xbb04>
   1e1b0:	ldm	r1, {r2, r3}
   1e1b4:	mov	r0, r7
   1e1b8:	mov	r1, r5
   1e1bc:	bl	1b730 <__assert_fail@plt+0x8f94>
   1e1c0:	subs	r4, r0, #0
   1e1c4:	beq	1e27c <__assert_fail@plt+0xbae0>
   1e1c8:	mov	r1, r7
   1e1cc:	mov	r0, r8
   1e1d0:	bl	17940 <__assert_fail@plt+0x51a4>
   1e1d4:	ldr	r1, [sp, #28]
   1e1d8:	ldr	r2, [pc, #232]	; 1e2c8 <__assert_fail@plt+0xbb2c>
   1e1dc:	vldr	s14, [pc, #196]	; 1e2a8 <__assert_fail@plt+0xbb0c>
   1e1e0:	asr	r3, r1, #31
   1e1e4:	mov	lr, r0
   1e1e8:	smull	r0, r2, r2, r1
   1e1ec:	add	r2, r2, r1
   1e1f0:	add	ip, lr, #40	; 0x28
   1e1f4:	rsb	r3, r3, r2, asr #16
   1e1f8:	vmov	s15, r3
   1e1fc:	ldm	r5, {r0, r1, r2, r3}
   1e200:	vcvt.f32.s32	s15, s15
   1e204:	stm	ip, {r0, r1, r2, r3}
   1e208:	vcmpe.f32	s15, s14
   1e20c:	vmrs	APSR_nzcv, fpscr
   1e210:	bmi	1e268 <__assert_fail@plt+0xbacc>
   1e214:	vldr	s14, [pc, #144]	; 1e2ac <__assert_fail@plt+0xbb10>
   1e218:	vcmpe.f32	s15, s14
   1e21c:	vmrs	APSR_nzcv, fpscr
   1e220:	bmi	1e270 <__assert_fail@plt+0xbad4>
   1e224:	vldr	s12, [pc, #132]	; 1e2b0 <__assert_fail@plt+0xbb14>
   1e228:	vldr	s14, [pc, #132]	; 1e2b4 <__assert_fail@plt+0xbb18>
   1e22c:	vldr	s13, [pc, #132]	; 1e2b8 <__assert_fail@plt+0xbb1c>
   1e230:	vcmpe.f32	s15, s12
   1e234:	vmrs	APSR_nzcv, fpscr
   1e238:	vmovle.f32	s15, s13
   1e23c:	vmovgt.f32	s15, s14
   1e240:	vstr	s15, [lr, #28]
   1e244:	ldr	r2, [sp, #36]	; 0x24
   1e248:	ldr	r3, [r6]
   1e24c:	mov	r0, r4
   1e250:	cmp	r2, r3
   1e254:	bne	1e278 <__assert_fail@plt+0xbadc>
   1e258:	add	sp, sp, #40	; 0x28
   1e25c:	pop	{r4, r5, r6, r7, r8, pc}
   1e260:	mov	r4, r7
   1e264:	b	1e244 <__assert_fail@plt+0xbaa8>
   1e268:	vldr	s15, [pc, #76]	; 1e2bc <__assert_fail@plt+0xbb20>
   1e26c:	b	1e240 <__assert_fail@plt+0xbaa4>
   1e270:	vldr	s15, [pc, #60]	; 1e2b4 <__assert_fail@plt+0xbb18>
   1e274:	b	1e240 <__assert_fail@plt+0xbaa4>
   1e278:	bl	12244 <__stack_chk_fail@plt>
   1e27c:	mov	r2, #5
   1e280:	ldr	r1, [pc, #68]	; 1e2cc <__assert_fail@plt+0xbb30>
   1e284:	bl	1222c <dcgettext@plt>
   1e288:	mov	r3, r7
   1e28c:	mov	r1, r4
   1e290:	mov	r2, r0
   1e294:	mov	r0, #1
   1e298:	bl	12388 <error@plt>
   1e29c:	nop			; (mov r0, r0)
   1e2a0:	andeq	r0, r0, r0
   1e2a4:	rscsmi	r1, r5, r0, lsl #16
   1e2a8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e2ac:	svccc	0x00800000
   1e2b0:	sbcmi	r0, r8, #0
   1e2b4:			; <UNDEFINED> instruction: 0x3e99999a
   1e2b8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e2bc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e2c0:	andeq	fp, r5, r0, ror #24
   1e2c4:	andeq	r7, r4, r4, lsr #21
   1e2c8:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e2cc:	andeq	r7, r4, r8, ror #21
   1e2d0:	push	{r4, r5, r6, r7, lr}
   1e2d4:	sub	sp, sp, #124	; 0x7c
   1e2d8:	ldr	r4, [pc, #272]	; 1e3f0 <__assert_fail@plt+0xbc54>
   1e2dc:	mov	r5, r1
   1e2e0:	mov	r6, r2
   1e2e4:	ldr	r3, [r4]
   1e2e8:	mov	r7, r0
   1e2ec:	add	r0, sp, #8
   1e2f0:	str	r3, [sp, #116]	; 0x74
   1e2f4:	bl	17ba4 <__assert_fail@plt+0x5408>
   1e2f8:	mov	r0, r5
   1e2fc:	add	r2, sp, #8
   1e300:	mov	r1, r6
   1e304:	add	r3, sp, #4
   1e308:	bl	1bf60 <__assert_fail@plt+0x97c4>
   1e30c:	subs	r5, r0, #0
   1e310:	bne	1e330 <__assert_fail@plt+0xbb94>
   1e314:	ldr	r2, [sp, #116]	; 0x74
   1e318:	ldr	r3, [r4]
   1e31c:	mov	r0, r5
   1e320:	cmp	r2, r3
   1e324:	bne	1e3d4 <__assert_fail@plt+0xbc38>
   1e328:	add	sp, sp, #124	; 0x7c
   1e32c:	pop	{r4, r5, r6, r7, pc}
   1e330:	ldr	r1, [sp, #4]
   1e334:	mov	r0, r7
   1e338:	bl	17940 <__assert_fail@plt+0x51a4>
   1e33c:	ldr	r3, [pc, #176]	; 1e3f4 <__assert_fail@plt+0xbc58>
   1e340:	ldr	r1, [sp, #88]	; 0x58
   1e344:	ldr	r2, [pc, #172]	; 1e3f8 <__assert_fail@plt+0xbc5c>
   1e348:	ldr	r3, [r3, #28]
   1e34c:	vldr	s14, [pc, #132]	; 1e3d8 <__assert_fail@plt+0xbc3c>
   1e350:	sub	r3, r3, r1
   1e354:	ldr	ip, [sp, #92]	; 0x5c
   1e358:	smull	lr, r2, r2, r3
   1e35c:	add	r2, r2, r3
   1e360:	asr	r3, r3, #31
   1e364:	rsb	r3, r3, r2, asr #16
   1e368:	mov	r2, #3
   1e36c:	vmov	s15, r3
   1e370:	mov	r3, #0
   1e374:	vcvt.f32.s32	s15, s15
   1e378:	vcmpe.f32	s15, s14
   1e37c:	vmrs	APSR_nzcv, fpscr
   1e380:	str	ip, [r0, #52]	; 0x34
   1e384:	str	r1, [r0, #48]	; 0x30
   1e388:	strd	r2, [r0, #40]	; 0x28
   1e38c:	bmi	1e3c4 <__assert_fail@plt+0xbc28>
   1e390:	vldr	s14, [pc, #68]	; 1e3dc <__assert_fail@plt+0xbc40>
   1e394:	vcmpe.f32	s15, s14
   1e398:	vmrs	APSR_nzcv, fpscr
   1e39c:	bmi	1e3cc <__assert_fail@plt+0xbc30>
   1e3a0:	vldr	s12, [pc, #56]	; 1e3e0 <__assert_fail@plt+0xbc44>
   1e3a4:	vldr	s14, [pc, #56]	; 1e3e4 <__assert_fail@plt+0xbc48>
   1e3a8:	vldr	s13, [pc, #56]	; 1e3e8 <__assert_fail@plt+0xbc4c>
   1e3ac:	vcmpe.f32	s15, s12
   1e3b0:	vmrs	APSR_nzcv, fpscr
   1e3b4:	vmovle.f32	s15, s13
   1e3b8:	vmovgt.f32	s15, s14
   1e3bc:	vstr	s15, [r0, #28]
   1e3c0:	b	1e314 <__assert_fail@plt+0xbb78>
   1e3c4:	vldr	s15, [pc, #32]	; 1e3ec <__assert_fail@plt+0xbc50>
   1e3c8:	b	1e3bc <__assert_fail@plt+0xbc20>
   1e3cc:	vldr	s15, [pc, #16]	; 1e3e4 <__assert_fail@plt+0xbc48>
   1e3d0:	b	1e3bc <__assert_fail@plt+0xbc20>
   1e3d4:	bl	12244 <__stack_chk_fail@plt>
   1e3d8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e3dc:	svccc	0x00800000
   1e3e0:	sbcmi	r0, r8, #0
   1e3e4:			; <UNDEFINED> instruction: 0x3e99999a
   1e3e8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e3ec:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e3f0:	andeq	fp, r5, r0, ror #24
   1e3f4:	andeq	ip, r5, ip, asr lr
   1e3f8:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e3fc:	push	{r4, r5, r6, r7, lr}
   1e400:	sub	sp, sp, #124	; 0x7c
   1e404:	ldr	r4, [pc, #272]	; 1e51c <__assert_fail@plt+0xbd80>
   1e408:	mov	r5, r1
   1e40c:	mov	r6, r2
   1e410:	ldr	r3, [r4]
   1e414:	mov	r7, r0
   1e418:	add	r0, sp, #8
   1e41c:	str	r3, [sp, #116]	; 0x74
   1e420:	bl	17ba4 <__assert_fail@plt+0x5408>
   1e424:	mov	r0, r5
   1e428:	add	r2, sp, #8
   1e42c:	mov	r1, r6
   1e430:	add	r3, sp, #4
   1e434:	bl	1bf60 <__assert_fail@plt+0x97c4>
   1e438:	subs	r5, r0, #0
   1e43c:	bne	1e45c <__assert_fail@plt+0xbcc0>
   1e440:	ldr	r2, [sp, #116]	; 0x74
   1e444:	ldr	r3, [r4]
   1e448:	mov	r0, r5
   1e44c:	cmp	r2, r3
   1e450:	bne	1e500 <__assert_fail@plt+0xbd64>
   1e454:	add	sp, sp, #124	; 0x7c
   1e458:	pop	{r4, r5, r6, r7, pc}
   1e45c:	ldr	r1, [sp, #4]
   1e460:	mov	r0, r7
   1e464:	bl	17940 <__assert_fail@plt+0x51a4>
   1e468:	ldr	r3, [pc, #176]	; 1e520 <__assert_fail@plt+0xbd84>
   1e46c:	ldr	r1, [sp, #88]	; 0x58
   1e470:	ldr	r2, [pc, #172]	; 1e524 <__assert_fail@plt+0xbd88>
   1e474:	ldr	r3, [r3, #28]
   1e478:	vldr	s14, [pc, #132]	; 1e504 <__assert_fail@plt+0xbd68>
   1e47c:	sub	r3, r3, r1
   1e480:	ldr	ip, [sp, #92]	; 0x5c
   1e484:	smull	lr, r2, r2, r3
   1e488:	add	r2, r2, r3
   1e48c:	asr	r3, r3, #31
   1e490:	rsb	r3, r3, r2, asr #16
   1e494:	vmov	s15, r3
   1e498:	mov	r3, #0
   1e49c:	vcvt.f32.s32	s15, s15
   1e4a0:	vcmpe.f32	s15, s14
   1e4a4:	vmrs	APSR_nzcv, fpscr
   1e4a8:	str	ip, [r0, #52]	; 0x34
   1e4ac:	str	r1, [r0, #48]	; 0x30
   1e4b0:	str	r3, [r0, #40]	; 0x28
   1e4b4:	str	r3, [r0, #44]	; 0x2c
   1e4b8:	bmi	1e4f0 <__assert_fail@plt+0xbd54>
   1e4bc:	vldr	s14, [pc, #68]	; 1e508 <__assert_fail@plt+0xbd6c>
   1e4c0:	vcmpe.f32	s15, s14
   1e4c4:	vmrs	APSR_nzcv, fpscr
   1e4c8:	bmi	1e4f8 <__assert_fail@plt+0xbd5c>
   1e4cc:	vldr	s12, [pc, #56]	; 1e50c <__assert_fail@plt+0xbd70>
   1e4d0:	vldr	s14, [pc, #56]	; 1e510 <__assert_fail@plt+0xbd74>
   1e4d4:	vldr	s13, [pc, #56]	; 1e514 <__assert_fail@plt+0xbd78>
   1e4d8:	vcmpe.f32	s15, s12
   1e4dc:	vmrs	APSR_nzcv, fpscr
   1e4e0:	vmovle.f32	s15, s13
   1e4e4:	vmovgt.f32	s15, s14
   1e4e8:	vstr	s15, [r0, #28]
   1e4ec:	b	1e440 <__assert_fail@plt+0xbca4>
   1e4f0:	vldr	s15, [pc, #32]	; 1e518 <__assert_fail@plt+0xbd7c>
   1e4f4:	b	1e4e8 <__assert_fail@plt+0xbd4c>
   1e4f8:	vldr	s15, [pc, #16]	; 1e510 <__assert_fail@plt+0xbd74>
   1e4fc:	b	1e4e8 <__assert_fail@plt+0xbd4c>
   1e500:	bl	12244 <__stack_chk_fail@plt>
   1e504:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e508:	svccc	0x00800000
   1e50c:	sbcmi	r0, r8, #0
   1e510:			; <UNDEFINED> instruction: 0x3e99999a
   1e514:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e518:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e51c:	andeq	fp, r5, r0, ror #24
   1e520:	andeq	ip, r5, ip, asr lr
   1e524:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e528:	push	{r4, r5, r6, r7, lr}
   1e52c:	sub	sp, sp, #124	; 0x7c
   1e530:	ldr	r4, [pc, #276]	; 1e64c <__assert_fail@plt+0xbeb0>
   1e534:	mov	r5, r1
   1e538:	mov	r6, r2
   1e53c:	ldr	r3, [r4]
   1e540:	mov	r7, r0
   1e544:	add	r0, sp, #8
   1e548:	str	r3, [sp, #116]	; 0x74
   1e54c:	bl	17ba4 <__assert_fail@plt+0x5408>
   1e550:	mov	r0, r5
   1e554:	add	r2, sp, #8
   1e558:	mov	r1, r6
   1e55c:	add	r3, sp, #4
   1e560:	bl	1bf60 <__assert_fail@plt+0x97c4>
   1e564:	subs	r5, r0, #0
   1e568:	bne	1e588 <__assert_fail@plt+0xbdec>
   1e56c:	ldr	r2, [sp, #116]	; 0x74
   1e570:	ldr	r3, [r4]
   1e574:	mov	r0, r5
   1e578:	cmp	r2, r3
   1e57c:	bne	1e630 <__assert_fail@plt+0xbe94>
   1e580:	add	sp, sp, #124	; 0x7c
   1e584:	pop	{r4, r5, r6, r7, pc}
   1e588:	ldr	r1, [sp, #4]
   1e58c:	mov	r0, r7
   1e590:	bl	17940 <__assert_fail@plt+0x51a4>
   1e594:	ldr	r3, [pc, #180]	; 1e650 <__assert_fail@plt+0xbeb4>
   1e598:	ldr	r1, [sp, #88]	; 0x58
   1e59c:	ldr	r2, [pc, #176]	; 1e654 <__assert_fail@plt+0xbeb8>
   1e5a0:	ldr	r3, [r3, #28]
   1e5a4:	vldr	s14, [pc, #136]	; 1e634 <__assert_fail@plt+0xbe98>
   1e5a8:	sub	r3, r3, r1
   1e5ac:	mov	ip, #2
   1e5b0:	smull	lr, r2, r2, r3
   1e5b4:	add	r2, r2, r3
   1e5b8:	asr	r3, r3, #31
   1e5bc:	rsb	r3, r3, r2, asr #16
   1e5c0:	ldr	r2, [sp, #92]	; 0x5c
   1e5c4:	vmov	s15, r3
   1e5c8:	mov	r3, #0
   1e5cc:	vcvt.f32.s32	s15, s15
   1e5d0:	vcmpe.f32	s15, s14
   1e5d4:	vmrs	APSR_nzcv, fpscr
   1e5d8:	str	ip, [r0, #40]	; 0x28
   1e5dc:	str	r2, [r0, #52]	; 0x34
   1e5e0:	str	r1, [r0, #48]	; 0x30
   1e5e4:	str	r3, [r0, #44]	; 0x2c
   1e5e8:	bmi	1e620 <__assert_fail@plt+0xbe84>
   1e5ec:	vldr	s14, [pc, #68]	; 1e638 <__assert_fail@plt+0xbe9c>
   1e5f0:	vcmpe.f32	s15, s14
   1e5f4:	vmrs	APSR_nzcv, fpscr
   1e5f8:	bmi	1e628 <__assert_fail@plt+0xbe8c>
   1e5fc:	vldr	s12, [pc, #56]	; 1e63c <__assert_fail@plt+0xbea0>
   1e600:	vldr	s14, [pc, #56]	; 1e640 <__assert_fail@plt+0xbea4>
   1e604:	vldr	s13, [pc, #56]	; 1e644 <__assert_fail@plt+0xbea8>
   1e608:	vcmpe.f32	s15, s12
   1e60c:	vmrs	APSR_nzcv, fpscr
   1e610:	vmovle.f32	s15, s13
   1e614:	vmovgt.f32	s15, s14
   1e618:	vstr	s15, [r0, #28]
   1e61c:	b	1e56c <__assert_fail@plt+0xbdd0>
   1e620:	vldr	s15, [pc, #32]	; 1e648 <__assert_fail@plt+0xbeac>
   1e624:	b	1e618 <__assert_fail@plt+0xbe7c>
   1e628:	vldr	s15, [pc, #16]	; 1e640 <__assert_fail@plt+0xbea4>
   1e62c:	b	1e618 <__assert_fail@plt+0xbe7c>
   1e630:	bl	12244 <__stack_chk_fail@plt>
   1e634:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e638:	svccc	0x00800000
   1e63c:	sbcmi	r0, r8, #0
   1e640:			; <UNDEFINED> instruction: 0x3e99999a
   1e644:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e648:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e64c:	andeq	fp, r5, r0, ror #24
   1e650:	andeq	ip, r5, ip, asr lr
   1e654:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e65c:	sub	sp, sp, #52	; 0x34
   1e660:	ldr	r6, [pc, #632]	; 1e8e0 <__assert_fail@plt+0xc144>
   1e664:	mov	r4, r1
   1e668:	mov	fp, r0
   1e66c:	ldr	r3, [r6]
   1e670:	mov	r9, r2
   1e674:	ldr	r1, [pc, #616]	; 1e8e4 <__assert_fail@plt+0xc148>
   1e678:	mov	r2, #5
   1e67c:	mov	r0, #0
   1e680:	str	r3, [sp, #44]	; 0x2c
   1e684:	bl	1222c <dcgettext@plt>
   1e688:	cmp	r4, #0
   1e68c:	beq	1e708 <__assert_fail@plt+0xbf6c>
   1e690:	ldr	sl, [r9]
   1e694:	ldr	r5, [r4, sl, lsl #2]
   1e698:	cmp	r5, #0
   1e69c:	moveq	r4, r5
   1e6a0:	beq	1e708 <__assert_fail@plt+0xbf6c>
   1e6a4:	ldr	r7, [pc, #572]	; 1e8e8 <__assert_fail@plt+0xc14c>
   1e6a8:	add	r2, sl, #1
   1e6ac:	add	r3, r7, #28
   1e6b0:	str	r2, [r9]
   1e6b4:	ldrb	r2, [r5]
   1e6b8:	mov	ip, r0
   1e6bc:	ldm	r3, {r0, r1}
   1e6c0:	cmp	r2, #45	; 0x2d
   1e6c4:	add	r3, sp, #20
   1e6c8:	mov	r2, r0
   1e6cc:	addeq	r2, r0, #86016	; 0x15000
   1e6d0:	addeq	r2, r2, #380	; 0x17c
   1e6d4:	addeq	r2, r2, #3
   1e6d8:	add	r8, sp, #28
   1e6dc:	stm	r3, {r0, r1}
   1e6e0:	vldr	d0, [pc, #472]	; 1e8c0 <__assert_fail@plt+0xc124>
   1e6e4:	str	r2, [sp, #20]
   1e6e8:	str	ip, [sp]
   1e6ec:	mov	r1, r8
   1e6f0:	ldm	r3, {r2, r3}
   1e6f4:	mov	r0, r5
   1e6f8:	bl	1b730 <__assert_fail@plt+0x8f94>
   1e6fc:	subs	r4, r0, #0
   1e700:	streq	sl, [r9]
   1e704:	bne	1e724 <__assert_fail@plt+0xbf88>
   1e708:	ldr	r2, [sp, #44]	; 0x2c
   1e70c:	ldr	r3, [r6]
   1e710:	mov	r0, r4
   1e714:	cmp	r2, r3
   1e718:	bne	1e8b8 <__assert_fail@plt+0xc11c>
   1e71c:	add	sp, sp, #52	; 0x34
   1e720:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e724:	mov	r1, r5
   1e728:	mov	r0, fp
   1e72c:	bl	17940 <__assert_fail@plt+0x51a4>
   1e730:	ldr	r3, [sp, #36]	; 0x24
   1e734:	ldr	ip, [r7, #28]
   1e738:	ldr	lr, [pc, #428]	; 1e8ec <__assert_fail@plt+0xc150>
   1e73c:	sub	ip, ip, r3
   1e740:	vldr	s14, [pc, #384]	; 1e8c8 <__assert_fail@plt+0xc12c>
   1e744:	smull	r3, lr, lr, ip
   1e748:	add	lr, lr, ip
   1e74c:	asr	ip, ip, #31
   1e750:	rsb	ip, ip, lr, asr #16
   1e754:	vmov	s15, ip
   1e758:	vcvt.f32.s32	s15, s15
   1e75c:	vcmpe.f32	s15, s14
   1e760:	vmrs	APSR_nzcv, fpscr
   1e764:	mov	r5, r0
   1e768:	ldm	r8, {r0, r1, r2, r3}
   1e76c:	add	lr, r5, #40	; 0x28
   1e770:	stm	lr, {r0, r1, r2, r3}
   1e774:	bmi	1e80c <__assert_fail@plt+0xc070>
   1e778:	vldr	s14, [pc, #332]	; 1e8cc <__assert_fail@plt+0xc130>
   1e77c:	vcmpe.f32	s15, s14
   1e780:	vmrs	APSR_nzcv, fpscr
   1e784:	bmi	1e804 <__assert_fail@plt+0xc068>
   1e788:	vldr	s12, [pc, #320]	; 1e8d0 <__assert_fail@plt+0xc134>
   1e78c:	vldr	s14, [pc, #320]	; 1e8d4 <__assert_fail@plt+0xc138>
   1e790:	vldr	s13, [pc, #320]	; 1e8d8 <__assert_fail@plt+0xc13c>
   1e794:	vcmpe.f32	s15, s12
   1e798:	vmrs	APSR_nzcv, fpscr
   1e79c:	vmovle.f32	s15, s13
   1e7a0:	vmovgt.f32	s15, s14
   1e7a4:	ldr	r3, [r7, #44]	; 0x2c
   1e7a8:	vstr	s15, [r5, #28]
   1e7ac:	tst	r3, #1
   1e7b0:	beq	1e708 <__assert_fail@plt+0xbf6c>
   1e7b4:	ldr	r8, [pc, #308]	; 1e8f0 <__assert_fail@plt+0xc154>
   1e7b8:	ldr	r2, [pc, #308]	; 1e8f4 <__assert_fail@plt+0xc158>
   1e7bc:	ldr	r3, [r5, #4]
   1e7c0:	ldr	r0, [r8]
   1e7c4:	mov	r1, #1
   1e7c8:	bl	12580 <__fprintf_chk@plt>
   1e7cc:	ldr	r2, [sp, #32]
   1e7d0:	ldr	r0, [r8]
   1e7d4:	cmp	r2, #0
   1e7d8:	beq	1e814 <__assert_fail@plt+0xc078>
   1e7dc:	cmp	r2, #1
   1e7e0:	beq	1e8ac <__assert_fail@plt+0xc110>
   1e7e4:	ldr	ip, [pc, #268]	; 1e8f8 <__assert_fail@plt+0xc15c>
   1e7e8:	ldr	r1, [pc, #268]	; 1e8fc <__assert_fail@plt+0xc160>
   1e7ec:	cmp	r2, #2
   1e7f0:	ldr	r3, [pc, #264]	; 1e900 <__assert_fail@plt+0xc164>
   1e7f4:	ldr	r2, [pc, #264]	; 1e904 <__assert_fail@plt+0xc168>
   1e7f8:	moveq	r3, ip
   1e7fc:	movne	r2, r1
   1e800:	b	1e81c <__assert_fail@plt+0xc080>
   1e804:	vldr	s15, [pc, #200]	; 1e8d4 <__assert_fail@plt+0xc138>
   1e808:	b	1e7a4 <__assert_fail@plt+0xc008>
   1e80c:	vldr	s15, [pc, #200]	; 1e8dc <__assert_fail@plt+0xc140>
   1e810:	b	1e7a4 <__assert_fail@plt+0xc008>
   1e814:	ldr	r3, [pc, #236]	; 1e908 <__assert_fail@plt+0xc16c>
   1e818:	ldr	r2, [pc, #236]	; 1e90c <__assert_fail@plt+0xc170>
   1e81c:	mov	r1, #1
   1e820:	str	r2, [sp]
   1e824:	ldr	r2, [pc, #228]	; 1e910 <__assert_fail@plt+0xc174>
   1e828:	bl	12580 <__fprintf_chk@plt>
   1e82c:	ldr	r7, [r5, #48]	; 0x30
   1e830:	add	r0, sp, #16
   1e834:	ldr	r9, [r8]
   1e838:	str	r7, [sp, #16]
   1e83c:	bl	12220 <ctime@plt>
   1e840:	asr	r3, r7, #31
   1e844:	mov	r2, r7
   1e848:	mov	r1, #1
   1e84c:	strd	r2, [sp]
   1e850:	ldr	r2, [pc, #188]	; 1e914 <__assert_fail@plt+0xc178>
   1e854:	str	r0, [sp, #8]
   1e858:	mov	r0, r9
   1e85c:	bl	12580 <__fprintf_chk@plt>
   1e860:	ldr	r3, [sp, #32]
   1e864:	cmp	r3, #2
   1e868:	bne	1e708 <__assert_fail@plt+0xbf6c>
   1e86c:	ldr	r2, [r5, #48]	; 0x30
   1e870:	add	r0, sp, #16
   1e874:	add	r5, r2, #86016	; 0x15000
   1e878:	add	r5, r5, #384	; 0x180
   1e87c:	ldr	r7, [r8]
   1e880:	str	r5, [sp, #16]
   1e884:	bl	12220 <ctime@plt>
   1e888:	mov	r2, r5
   1e88c:	asr	r3, r5, #31
   1e890:	mov	r1, #1
   1e894:	strd	r2, [sp]
   1e898:	ldr	r2, [pc, #120]	; 1e918 <__assert_fail@plt+0xc17c>
   1e89c:	str	r0, [sp, #8]
   1e8a0:	mov	r0, r7
   1e8a4:	bl	12580 <__fprintf_chk@plt>
   1e8a8:	b	1e708 <__assert_fail@plt+0xbf6c>
   1e8ac:	ldr	r3, [pc, #104]	; 1e91c <__assert_fail@plt+0xc180>
   1e8b0:	ldr	r2, [pc, #104]	; 1e920 <__assert_fail@plt+0xc184>
   1e8b4:	b	1e81c <__assert_fail@plt+0xc080>
   1e8b8:	bl	12244 <__stack_chk_fail@plt>
   1e8bc:	nop			; (mov r0, r0)
   1e8c0:	andeq	r0, r0, r0
   1e8c4:	rscsmi	r1, r5, r0, lsl #16
   1e8c8:	stclcc	12, cr12, [ip, #820]	; 0x334
   1e8cc:	svccc	0x00800000
   1e8d0:	sbcmi	r0, r8, #0
   1e8d4:			; <UNDEFINED> instruction: 0x3e99999a
   1e8d8:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1e8dc:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1e8e0:	andeq	fp, r5, r0, ror #24
   1e8e4:	andeq	r7, r4, r4, lsr #21
   1e8e8:	andeq	ip, r5, ip, asr lr
   1e8ec:	eorgt	r4, lr, #29360128	; 0x1c00000
   1e8f0:	andeq	ip, r5, r8, lsr r5
   1e8f4:	strheq	r7, [r4], -r4
   1e8f8:	andeq	r7, r4, ip, lsr #1
   1e8fc:	andeq	r7, r4, r8, lsr #1
   1e900:	andeq	r7, r4, r8, asr #20
   1e904:	andeq	r7, r4, r8, lsl #22
   1e908:	muleq	r4, ip, r0
   1e90c:	andeq	r7, r4, r0, lsr #1
   1e910:	andeq	r7, r4, r4, asr #1
   1e914:	andeq	r7, r4, r0, lsr #22
   1e918:	andeq	r7, r4, ip, lsl #22
   1e91c:	andeq	r9, r4, r8, lsl r6
   1e920:	andeq	r7, r4, r4, lsr #1
   1e924:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e928:	mov	fp, r0
   1e92c:	ldr	r5, [pc, #356]	; 1ea98 <__assert_fail@plt+0xc2fc>
   1e930:	sub	sp, sp, #44	; 0x2c
   1e934:	subs	r4, r1, #0
   1e938:	ldr	r0, [r5]
   1e93c:	str	r0, [sp, #36]	; 0x24
   1e940:	beq	1e9bc <__assert_fail@plt+0xc220>
   1e944:	ldr	r7, [r2]
   1e948:	mov	r6, r2
   1e94c:	ldr	r8, [r4, r7, lsl #2]
   1e950:	cmp	r8, #0
   1e954:	moveq	r4, r8
   1e958:	beq	1e9bc <__assert_fail@plt+0xc220>
   1e95c:	ldr	r9, [pc, #312]	; 1ea9c <__assert_fail@plt+0xc300>
   1e960:	mov	ip, r3
   1e964:	add	r1, r9, #28
   1e968:	ldr	r3, [r9, #28]
   1e96c:	ldm	r1, {r0, r1}
   1e970:	add	r2, sp, #12
   1e974:	ldr	lr, [pc, #292]	; 1eaa0 <__assert_fail@plt+0xc304>
   1e978:	add	r3, r3, #86016	; 0x15000
   1e97c:	stm	r2, {r0, r1}
   1e980:	add	r3, r3, #384	; 0x180
   1e984:	add	r1, r7, #1
   1e988:	add	sl, sp, #20
   1e98c:	str	lr, [sp]
   1e990:	str	r3, [sp, #12]
   1e994:	str	r1, [r6]
   1e998:	ldm	r2, {r2, r3}
   1e99c:	mov	r1, sl
   1e9a0:	vldr	d0, [pc, #208]	; 1ea78 <__assert_fail@plt+0xc2dc>
   1e9a4:	mov	r0, r8
   1e9a8:	str	ip, [sp, #20]
   1e9ac:	bl	1b730 <__assert_fail@plt+0x8f94>
   1e9b0:	subs	r4, r0, #0
   1e9b4:	streq	r7, [r6]
   1e9b8:	bne	1e9d8 <__assert_fail@plt+0xc23c>
   1e9bc:	ldr	r2, [sp, #36]	; 0x24
   1e9c0:	ldr	r3, [r5]
   1e9c4:	mov	r0, r4
   1e9c8:	cmp	r2, r3
   1e9cc:	bne	1ea70 <__assert_fail@plt+0xc2d4>
   1e9d0:	add	sp, sp, #44	; 0x2c
   1e9d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e9d8:	mov	r1, r8
   1e9dc:	mov	r0, fp
   1e9e0:	bl	17940 <__assert_fail@plt+0x51a4>
   1e9e4:	ldr	r3, [sp, #28]
   1e9e8:	ldr	ip, [r9, #28]
   1e9ec:	ldr	lr, [pc, #176]	; 1eaa4 <__assert_fail@plt+0xc308>
   1e9f0:	sub	ip, ip, r3
   1e9f4:	vldr	s14, [pc, #132]	; 1ea80 <__assert_fail@plt+0xc2e4>
   1e9f8:	smull	r3, lr, lr, ip
   1e9fc:	add	lr, lr, ip
   1ea00:	asr	ip, ip, #31
   1ea04:	rsb	ip, ip, lr, asr #16
   1ea08:	vmov	s15, ip
   1ea0c:	vcvt.f32.s32	s15, s15
   1ea10:	vcmpe.f32	s15, s14
   1ea14:	vmrs	APSR_nzcv, fpscr
   1ea18:	mov	r6, r0
   1ea1c:	ldm	sl, {r0, r1, r2, r3}
   1ea20:	add	lr, r6, #40	; 0x28
   1ea24:	stm	lr, {r0, r1, r2, r3}
   1ea28:	bmi	1ea60 <__assert_fail@plt+0xc2c4>
   1ea2c:	vldr	s14, [pc, #80]	; 1ea84 <__assert_fail@plt+0xc2e8>
   1ea30:	vcmpe.f32	s15, s14
   1ea34:	vmrs	APSR_nzcv, fpscr
   1ea38:	bmi	1ea68 <__assert_fail@plt+0xc2cc>
   1ea3c:	vldr	s12, [pc, #68]	; 1ea88 <__assert_fail@plt+0xc2ec>
   1ea40:	vldr	s14, [pc, #68]	; 1ea8c <__assert_fail@plt+0xc2f0>
   1ea44:	vldr	s13, [pc, #68]	; 1ea90 <__assert_fail@plt+0xc2f4>
   1ea48:	vcmpe.f32	s15, s12
   1ea4c:	vmrs	APSR_nzcv, fpscr
   1ea50:	vmovle.f32	s15, s13
   1ea54:	vmovgt.f32	s15, s14
   1ea58:	vstr	s15, [r6, #28]
   1ea5c:	b	1e9bc <__assert_fail@plt+0xc220>
   1ea60:	vldr	s15, [pc, #44]	; 1ea94 <__assert_fail@plt+0xc2f8>
   1ea64:	b	1ea58 <__assert_fail@plt+0xc2bc>
   1ea68:	vldr	s15, [pc, #28]	; 1ea8c <__assert_fail@plt+0xc2f0>
   1ea6c:	b	1ea58 <__assert_fail@plt+0xc2bc>
   1ea70:	bl	12244 <__stack_chk_fail@plt>
   1ea74:	nop			; (mov r0, r0)
   1ea78:	andeq	r0, r0, r0
   1ea7c:	submi	r0, lr, r0
   1ea80:	stclcc	12, cr12, [ip, #820]	; 0x334
   1ea84:	svccc	0x00800000
   1ea88:	sbcmi	r0, r8, #0
   1ea8c:			; <UNDEFINED> instruction: 0x3e99999a
   1ea90:	mcrcc	14, 6, sl, cr7, cr4, {0}
   1ea94:	stccc	7, cr13, [r3], #-40	; 0xffffffd8
   1ea98:	andeq	fp, r5, r0, ror #24
   1ea9c:	andeq	ip, r5, ip, asr lr
   1eaa0:	andeq	r7, r4, r8, lsr #22
   1eaa4:	eorgt	r4, lr, #29360128	; 0x1c00000
   1eaa8:	mov	r3, #3
   1eaac:	b	1e924 <__assert_fail@plt+0xc188>
   1eab0:	mov	r3, #2
   1eab4:	b	1e924 <__assert_fail@plt+0xc188>
   1eab8:	mov	r3, #0
   1eabc:	b	1e924 <__assert_fail@plt+0xc188>
   1eac0:	push	{r4, lr}
   1eac4:	subs	r4, r0, #0
   1eac8:	popeq	{r4, pc}
   1eacc:	ldr	r1, [pc, #96]	; 1eb34 <__assert_fail@plt+0xc398>
   1ead0:	ldr	r0, [pc, #96]	; 1eb38 <__assert_fail@plt+0xc39c>
   1ead4:	mov	r2, #0
   1ead8:	ldr	r3, [r4]
   1eadc:	cmp	r3, r1
   1eae0:	orreq	r2, r2, #1
   1eae4:	beq	1eaf0 <__assert_fail@plt+0xc354>
   1eae8:	cmp	r3, r0
   1eaec:	orreq	r2, r2, #2
   1eaf0:	ldr	r4, [r4, #152]	; 0x98
   1eaf4:	cmp	r4, #0
   1eaf8:	bne	1ead8 <__assert_fail@plt+0xc33c>
   1eafc:	cmp	r2, #3
   1eb00:	popne	{r4, pc}
   1eb04:	ldr	r3, [pc, #48]	; 1eb3c <__assert_fail@plt+0xc3a0>
   1eb08:	ldrb	r3, [r3, #1]
   1eb0c:	cmp	r3, #0
   1eb10:	popne	{r4, pc}
   1eb14:	mov	r2, #5
   1eb18:	ldr	r1, [pc, #32]	; 1eb40 <__assert_fail@plt+0xc3a4>
   1eb1c:	mov	r0, r4
   1eb20:	bl	1222c <dcgettext@plt>
   1eb24:	mov	r1, r4
   1eb28:	mov	r2, r0
   1eb2c:	mov	r0, #1
   1eb30:	bl	12388 <error@plt>
   1eb34:	muleq	r1, r0, sl
   1eb38:	strheq	r4, [r1], -r0
   1eb3c:	andeq	ip, r5, ip, asr lr
   1eb40:	andeq	r7, r4, r0, ror fp
   1eb44:	ldr	r3, [pc, #132]	; 1ebd0 <__assert_fail@plt+0xc434>
   1eb48:	ldr	r2, [r3, #44]	; 0x2c
   1eb4c:	tst	r2, #2
   1eb50:	beq	1eb64 <__assert_fail@plt+0xc3c8>
   1eb54:	ldr	r2, [pc, #120]	; 1ebd4 <__assert_fail@plt+0xc438>
   1eb58:	str	r2, [r3, #52]	; 0x34
   1eb5c:	str	r0, [r3, #48]	; 0x30
   1eb60:	bx	lr
   1eb64:	cmp	r0, #1
   1eb68:	beq	1eb9c <__assert_fail@plt+0xc400>
   1eb6c:	cmp	r0, #0
   1eb70:	beq	1ebb8 <__assert_fail@plt+0xc41c>
   1eb74:	cmp	r0, #2
   1eb78:	bne	1eb5c <__assert_fail@plt+0xc3c0>
   1eb7c:	ldr	ip, [pc, #84]	; 1ebd8 <__assert_fail@plt+0xc43c>
   1eb80:	ldr	r1, [pc, #84]	; 1ebdc <__assert_fail@plt+0xc440>
   1eb84:	mov	r2, #1
   1eb88:	str	ip, [r3, #52]	; 0x34
   1eb8c:	str	r1, [r3, #64]	; 0x40
   1eb90:	strb	r2, [r3, #12]
   1eb94:	str	r0, [r3, #48]	; 0x30
   1eb98:	bx	lr
   1eb9c:	ldr	r1, [pc, #60]	; 1ebe0 <__assert_fail@plt+0xc444>
   1eba0:	ldr	r2, [pc, #60]	; 1ebe4 <__assert_fail@plt+0xc448>
   1eba4:	strb	r0, [r3, #12]
   1eba8:	str	r1, [r3, #52]	; 0x34
   1ebac:	str	r2, [r3, #64]	; 0x40
   1ebb0:	str	r0, [r3, #48]	; 0x30
   1ebb4:	bx	lr
   1ebb8:	ldr	r1, [pc, #40]	; 1ebe8 <__assert_fail@plt+0xc44c>
   1ebbc:	ldr	r2, [pc, #40]	; 1ebec <__assert_fail@plt+0xc450>
   1ebc0:	str	r1, [r3, #52]	; 0x34
   1ebc4:	str	r2, [r3, #64]	; 0x40
   1ebc8:	str	r0, [r3, #48]	; 0x30
   1ebcc:	bx	lr
   1ebd0:	andeq	ip, r5, ip, asr lr
   1ebd4:	muleq	r1, r4, r2
   1ebd8:	strheq	r8, [r1], -r8	; <UNPREDICTABLE>
   1ebdc:	strdeq	sp, [r1], -ip
   1ebe0:	andeq	r8, r1, ip, lsl #3
   1ebe4:	andeq	sp, r1, ip, asr #11
   1ebe8:	andeq	r8, r1, ip, lsr #4
   1ebec:	andeq	sl, r1, r0, lsr #31
   1ebf0:	ldr	r3, [pc, #8]	; 1ec00 <__assert_fail@plt+0xc464>
   1ebf4:	mov	r2, #0
   1ebf8:	str	r2, [r3, #8]
   1ebfc:	bx	lr
   1ec00:	andeq	ip, r5, r0, asr #25
   1ec04:	bx	lr
   1ec08:	push	{r4, r5, r6, r7, r8, lr}
   1ec0c:	mov	r1, r0
   1ec10:	sub	sp, sp, #8
   1ec14:	mov	r8, r0
   1ec18:	mov	r2, #6
   1ec1c:	ldr	r0, [pc, #292]	; 1ed48 <__assert_fail@plt+0xc5ac>
   1ec20:	bl	12730 <strncmp@plt>
   1ec24:	cmp	r0, #0
   1ec28:	bne	1ec3c <__assert_fail@plt+0xc4a0>
   1ec2c:	mov	r0, r8
   1ec30:	bl	1249c <strlen@plt>
   1ec34:	cmp	r0, #8
   1ec38:	beq	1ed24 <__assert_fail@plt+0xc588>
   1ec3c:	ldrb	r3, [r8]
   1ec40:	ldr	r4, [pc, #260]	; 1ed4c <__assert_fail@plt+0xc5b0>
   1ec44:	ldr	r6, [pc, #260]	; 1ed50 <__assert_fail@plt+0xc5b4>
   1ec48:	cmp	r3, #45	; 0x2d
   1ec4c:	addeq	r7, r8, #1
   1ec50:	movne	r7, r8
   1ec54:	mov	r5, #0
   1ec58:	b	1ec70 <__assert_fail@plt+0xc4d4>
   1ec5c:	add	r5, r5, #1
   1ec60:	add	r3, r6, r5, lsl #4
   1ec64:	ldr	r4, [r3, #4]
   1ec68:	cmp	r4, #0
   1ec6c:	beq	1ed04 <__assert_fail@plt+0xc568>
   1ec70:	mov	r0, r4
   1ec74:	mov	r1, r7
   1ec78:	bl	120dc <strcmp@plt>
   1ec7c:	subs	r3, r0, #0
   1ec80:	bne	1ec5c <__assert_fail@plt+0xc4c0>
   1ec84:	ldr	r2, [pc, #200]	; 1ed54 <__assert_fail@plt+0xc5b8>
   1ec88:	lsl	r4, r5, #4
   1ec8c:	add	r2, r2, r4
   1ec90:	add	r4, r6, r4
   1ec94:	ldr	r2, [r2, #72]	; 0x48
   1ec98:	cmp	r2, #2
   1ec9c:	beq	1ed04 <__assert_fail@plt+0xc568>
   1eca0:	cmp	r2, #1
   1eca4:	beq	1ed40 <__assert_fail@plt+0xc5a4>
   1eca8:	ldr	r5, [pc, #168]	; 1ed58 <__assert_fail@plt+0xc5bc>
   1ecac:	cmp	r2, #0
   1ecb0:	ldr	r3, [r5, #8]
   1ecb4:	bne	1ed10 <__assert_fail@plt+0xc574>
   1ecb8:	cmp	r3, #0
   1ecbc:	beq	1ed04 <__assert_fail@plt+0xc568>
   1ecc0:	ldr	r3, [pc, #148]	; 1ed5c <__assert_fail@plt+0xc5c0>
   1ecc4:	ldrb	r6, [r3, #17]
   1ecc8:	cmp	r6, #0
   1eccc:	bne	1ed04 <__assert_fail@plt+0xc568>
   1ecd0:	ldrb	r3, [r3, #16]
   1ecd4:	cmp	r3, #0
   1ecd8:	beq	1ed04 <__assert_fail@plt+0xc568>
   1ecdc:	mov	r2, #5
   1ece0:	ldr	r1, [pc, #120]	; 1ed60 <__assert_fail@plt+0xc5c4>
   1ece4:	bl	1222c <dcgettext@plt>
   1ece8:	ldr	r3, [r5, #8]
   1ecec:	mov	r1, r6
   1ecf0:	stm	sp, {r3, r8}
   1ecf4:	mov	r3, r8
   1ecf8:	mov	r2, r0
   1ecfc:	mov	r0, r6
   1ed00:	bl	12388 <error@plt>
   1ed04:	mov	r0, r4
   1ed08:	add	sp, sp, #8
   1ed0c:	pop	{r4, r5, r6, r7, r8, pc}
   1ed10:	cmp	r3, #0
   1ed14:	mov	r0, r4
   1ed18:	streq	r8, [r5, #8]
   1ed1c:	add	sp, sp, #8
   1ed20:	pop	{r4, r5, r6, r7, r8, pc}
   1ed24:	ldr	r3, [pc, #44]	; 1ed58 <__assert_fail@plt+0xc5bc>
   1ed28:	ldr	r2, [r3, #8]
   1ed2c:	cmp	r2, #0
   1ed30:	ldrne	r4, [pc, #44]	; 1ed64 <__assert_fail@plt+0xc5c8>
   1ed34:	streq	r8, [r3, #8]
   1ed38:	ldreq	r4, [pc, #36]	; 1ed64 <__assert_fail@plt+0xc5c8>
   1ed3c:	b	1ed04 <__assert_fail@plt+0xc568>
   1ed40:	mov	r4, r3
   1ed44:	b	1ed04 <__assert_fail@plt+0xc568>
   1ed48:	andeq	r7, r4, r4, asr #12
   1ed4c:	andeq	r4, r4, ip, lsr #30
   1ed50:	muleq	r4, ip, r8
   1ed54:	andeq	r6, r4, r4, asr r8
   1ed58:	andeq	ip, r5, r0, asr #25
   1ed5c:	andeq	ip, r5, ip, asr lr
   1ed60:	andeq	r7, r4, ip, lsl ip
   1ed64:	strdeq	r6, [r4], -ip
   1ed68:	push	{r4, lr}
   1ed6c:	ldr	r0, [pc, #32]	; 1ed94 <__assert_fail@plt+0xc5f8>
   1ed70:	bl	1ec08 <__assert_fail@plt+0xc46c>
   1ed74:	bl	17998 <__assert_fail@plt+0x51fc>
   1ed78:	mov	r2, #0
   1ed7c:	mov	r1, #0
   1ed80:	mov	r3, r0
   1ed84:	str	r1, [r0, #16]
   1ed88:	mov	r0, #1
   1ed8c:	str	r2, [r3, #28]
   1ed90:	pop	{r4, pc}
   1ed94:	andeq	r7, r4, r4, lsl #26
   1ed98:	b	1ed68 <__assert_fail@plt+0xc5cc>
   1ed9c:	push	{r4, r5, r6, r7, lr}
   1eda0:	sub	sp, sp, #116	; 0x74
   1eda4:	ldr	r5, [pc, #268]	; 1eeb8 <__assert_fail@plt+0xc71c>
   1eda8:	cmp	r1, #0
   1edac:	moveq	r0, r1
   1edb0:	ldr	r3, [r5]
   1edb4:	str	r3, [sp, #108]	; 0x6c
   1edb8:	beq	1ee0c <__assert_fail@plt+0xc670>
   1edbc:	ldr	r3, [r2]
   1edc0:	ldr	r4, [r1, r3, lsl #2]
   1edc4:	cmp	r4, #0
   1edc8:	moveq	r0, r4
   1edcc:	beq	1ee0c <__assert_fail@plt+0xc670>
   1edd0:	ldr	r7, [pc, #228]	; 1eebc <__assert_fail@plt+0xc720>
   1edd4:	add	r3, r3, #1
   1edd8:	str	r3, [r2]
   1eddc:	ldrh	r3, [r7, #68]	; 0x44
   1ede0:	mov	r6, r0
   1ede4:	cmp	r3, #1
   1ede8:	bls	1ee24 <__assert_fail@plt+0xc688>
   1edec:	mov	r0, r4
   1edf0:	bl	1ae28 <__assert_fail@plt+0x868c>
   1edf4:	cmp	r0, #0
   1edf8:	bne	1ee24 <__assert_fail@plt+0xc688>
   1edfc:	ldr	r3, [r7, #44]	; 0x2c
   1ee00:	tst	r3, #8
   1ee04:	bne	1ee60 <__assert_fail@plt+0xc6c4>
   1ee08:	bl	1ed68 <__assert_fail@plt+0xc5cc>
   1ee0c:	ldr	r2, [sp, #108]	; 0x6c
   1ee10:	ldr	r3, [r5]
   1ee14:	cmp	r2, r3
   1ee18:	bne	1eea8 <__assert_fail@plt+0xc70c>
   1ee1c:	add	sp, sp, #116	; 0x74
   1ee20:	pop	{r4, r5, r6, r7, pc}
   1ee24:	mov	r0, r6
   1ee28:	mov	r1, r4
   1ee2c:	bl	17940 <__assert_fail@plt+0x51a4>
   1ee30:	mov	r2, sp
   1ee34:	ldr	r1, [pc, #132]	; 1eec0 <__assert_fail@plt+0xc724>
   1ee38:	str	r4, [r0, #40]	; 0x28
   1ee3c:	mov	r6, r0
   1ee40:	mov	r0, #3
   1ee44:	bl	126f4 <__xstat64@plt>
   1ee48:	cmp	r0, #0
   1ee4c:	beq	1ee7c <__assert_fail@plt+0xc6e0>
   1ee50:	vldr	s15, [pc, #84]	; 1eeac <__assert_fail@plt+0xc710>
   1ee54:	vstr	s15, [r6, #28]
   1ee58:	mov	r0, #1
   1ee5c:	b	1ee0c <__assert_fail@plt+0xc670>
   1ee60:	ldr	r1, [pc, #92]	; 1eec4 <__assert_fail@plt+0xc728>
   1ee64:	mov	r3, r4
   1ee68:	ldr	r2, [pc, #88]	; 1eec8 <__assert_fail@plt+0xc72c>
   1ee6c:	ldr	r0, [r1]
   1ee70:	mov	r1, #1
   1ee74:	bl	12580 <__fprintf_chk@plt>
   1ee78:	b	1ee08 <__assert_fail@plt+0xc66c>
   1ee7c:	ldr	r1, [pc, #60]	; 1eec0 <__assert_fail@plt+0xc724>
   1ee80:	mov	r0, sp
   1ee84:	bl	1acec <__assert_fail@plt+0x8550>
   1ee88:	mov	r1, r0
   1ee8c:	mov	r0, r4
   1ee90:	bl	120dc <strcmp@plt>
   1ee94:	vldr	s15, [pc, #20]	; 1eeb0 <__assert_fail@plt+0xc714>
   1ee98:	vldr	s14, [pc, #20]	; 1eeb4 <__assert_fail@plt+0xc718>
   1ee9c:	cmp	r0, #0
   1eea0:	vmovne.f32	s15, s14
   1eea4:	b	1ee54 <__assert_fail@plt+0xc6b8>
   1eea8:	bl	12244 <__stack_chk_fail@plt>
   1eeac:	svccc	0x00800000
   1eeb0:	svccc	0x00333333
   1eeb4:			; <UNDEFINED> instruction: 0x3e99999a
   1eeb8:	andeq	fp, r5, r0, ror #24
   1eebc:	andeq	ip, r5, ip, asr lr
   1eec0:	andeq	sl, r4, ip, ror #24
   1eec4:	andeq	ip, r5, r8, lsr r5
   1eec8:	andeq	r7, r4, ip, lsl #26
   1eecc:	mov	r0, #0
   1eed0:	bx	lr
   1eed4:	push	{r4, r5, r6, r7, lr}
   1eed8:	sub	sp, sp, #28
   1eedc:	ldr	r4, [pc, #152]	; 1ef7c <__assert_fail@plt+0xc7e0>
   1eee0:	mov	r5, r1
   1eee4:	mov	r7, r0
   1eee8:	ldr	r3, [r4]
   1eeec:	str	r3, [sp, #20]
   1eef0:	bl	123c4 <getenv@plt>
   1eef4:	subs	r3, r0, #0
   1eef8:	beq	1ef44 <__assert_fail@plt+0xc7a8>
   1eefc:	mov	r6, #0
   1ef00:	str	r6, [sp]
   1ef04:	add	r3, sp, #16
   1ef08:	mov	r2, #10
   1ef0c:	add	r1, sp, #12
   1ef10:	bl	2e26c <__assert_fail@plt+0x1bad0>
   1ef14:	cmp	r0, r6
   1ef18:	bne	1ef50 <__assert_fail@plt+0xc7b4>
   1ef1c:	ldr	r0, [sp, #16]
   1ef20:	cmp	r0, r5
   1ef24:	movcs	r0, #0
   1ef28:	movcc	r0, #1
   1ef2c:	ldr	r2, [sp, #20]
   1ef30:	ldr	r3, [r4]
   1ef34:	cmp	r2, r3
   1ef38:	bne	1ef4c <__assert_fail@plt+0xc7b0>
   1ef3c:	add	sp, sp, #28
   1ef40:	pop	{r4, r5, r6, r7, pc}
   1ef44:	mov	r0, r3
   1ef48:	b	1ef2c <__assert_fail@plt+0xc790>
   1ef4c:	bl	12244 <__stack_chk_fail@plt>
   1ef50:	bl	124d8 <__errno_location@plt>
   1ef54:	mov	r2, #5
   1ef58:	ldr	r1, [pc, #32]	; 1ef80 <__assert_fail@plt+0xc7e4>
   1ef5c:	ldr	r4, [r0]
   1ef60:	mov	r0, r6
   1ef64:	bl	1222c <dcgettext@plt>
   1ef68:	mov	r3, r7
   1ef6c:	mov	r1, r4
   1ef70:	mov	r2, r0
   1ef74:	mov	r0, #1
   1ef78:	bl	12388 <error@plt>
   1ef7c:	andeq	fp, r5, r0, ror #24
   1ef80:	muleq	r4, r4, pc	; <UNPREDICTABLE>
   1ef84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ef88:	subs	r9, r2, #0
   1ef8c:	ldr	r8, [sp, #36]	; 0x24
   1ef90:	ldr	r6, [sp, #40]	; 0x28
   1ef94:	beq	1f1c4 <__assert_fail@plt+0xca28>
   1ef98:	ldr	sl, [pc, #612]	; 1f204 <__assert_fail@plt+0xca68>
   1ef9c:	mov	r5, r0
   1efa0:	cmp	r9, sl
   1efa4:	mov	r4, r1
   1efa8:	mov	r7, r3
   1efac:	beq	1f054 <__assert_fail@plt+0xc8b8>
   1efb0:	ldr	r3, [r1, #16]
   1efb4:	add	r2, r7, r8
   1efb8:	ldr	r1, [r0, #12]
   1efbc:	add	r2, r2, r3
   1efc0:	cmp	r2, r1
   1efc4:	bls	1f13c <__assert_fail@plt+0xc9a0>
   1efc8:	cmp	r6, #0
   1efcc:	bne	1f1d8 <__assert_fail@plt+0xca3c>
   1efd0:	ldr	r2, [r4]
   1efd4:	ldr	r3, [r0, #28]
   1efd8:	cmp	r2, r3
   1efdc:	beq	1f1d8 <__assert_fail@plt+0xca3c>
   1efe0:	ldr	r3, [r0, #24]
   1efe4:	cmp	r3, #0
   1efe8:	bne	1f1f8 <__assert_fail@plt+0xca5c>
   1efec:	ldr	r3, [r0]
   1eff0:	cmp	r3, #0
   1eff4:	beq	1f010 <__assert_fail@plt+0xc874>
   1eff8:	ldr	r3, [r0, #36]	; 0x24
   1effc:	cmp	r3, #0
   1f000:	bne	1f1f8 <__assert_fail@plt+0xca5c>
   1f004:	ldr	r3, [r0, #40]	; 0x28
   1f008:	cmp	r3, #0
   1f00c:	bne	1f1f8 <__assert_fail@plt+0xca5c>
   1f010:	mov	r1, r4
   1f014:	mov	r0, r5
   1f018:	bl	1f3d8 <__assert_fail@plt+0xcc3c>
   1f01c:	ldr	r2, [r4]
   1f020:	ldr	r3, [r5, #40]	; 0x28
   1f024:	cmp	r3, #0
   1f028:	beq	1f03c <__assert_fail@plt+0xc8a0>
   1f02c:	ldr	r1, [r5, #28]
   1f030:	sub	r1, r2, r1
   1f034:	cmp	r3, r1
   1f038:	beq	1f048 <__assert_fail@plt+0xc8ac>
   1f03c:	ldr	r3, [r5, #16]
   1f040:	cmp	r3, r2
   1f044:	bne	1f05c <__assert_fail@plt+0xc8c0>
   1f048:	mov	r1, r4
   1f04c:	mov	r0, r5
   1f050:	bl	1f3d8 <__assert_fail@plt+0xcc3c>
   1f054:	cmp	r6, #0
   1f058:	bne	1f064 <__assert_fail@plt+0xc8c8>
   1f05c:	mov	r3, #1
   1f060:	str	r3, [r4, #28]
   1f064:	ldrd	r0, [r4, #4]
   1f068:	ldr	r3, [r4]
   1f06c:	cmp	r3, r1
   1f070:	bcs	1f168 <__assert_fail@plt+0xc9cc>
   1f074:	cmp	r9, sl
   1f078:	add	r2, r3, #1
   1f07c:	moveq	r1, #0
   1f080:	streq	r2, [r4]
   1f084:	add	ip, r0, r3, lsl #2
   1f088:	streq	r1, [r0, r3, lsl #2]
   1f08c:	beq	1f128 <__assert_fail@plt+0xc98c>
   1f090:	ldr	r3, [r4, #16]
   1f094:	ldr	r1, [r4, #12]
   1f098:	ldr	r0, [sp, #32]
   1f09c:	add	r1, r1, r3
   1f0a0:	cmp	r0, #0
   1f0a4:	str	r2, [r4]
   1f0a8:	str	r1, [ip]
   1f0ac:	beq	1f0cc <__assert_fail@plt+0xc930>
   1f0b0:	ldr	r0, [r4, #12]
   1f0b4:	ldr	r1, [sp, #32]
   1f0b8:	add	r0, r0, r3
   1f0bc:	bl	1234c <strcpy@plt>
   1f0c0:	ldr	r3, [r4, #16]
   1f0c4:	add	r3, r8, r3
   1f0c8:	str	r3, [r4, #16]
   1f0cc:	ldr	r0, [r4, #12]
   1f0d0:	mov	r1, r9
   1f0d4:	add	r0, r0, r3
   1f0d8:	bl	1234c <strcpy@plt>
   1f0dc:	ldr	r3, [r4, #16]
   1f0e0:	cmp	r6, #0
   1f0e4:	add	r7, r7, r3
   1f0e8:	str	r7, [r4, #16]
   1f0ec:	ldr	r3, [r4]
   1f0f0:	bne	1f18c <__assert_fail@plt+0xc9f0>
   1f0f4:	ldr	r2, [r5, #40]	; 0x28
   1f0f8:	cmp	r2, #0
   1f0fc:	beq	1f110 <__assert_fail@plt+0xc974>
   1f100:	ldr	r1, [r5, #28]
   1f104:	sub	r1, r3, r1
   1f108:	cmp	r2, r1
   1f10c:	beq	1f11c <__assert_fail@plt+0xc980>
   1f110:	ldr	r2, [r5, #16]
   1f114:	cmp	r3, r2
   1f118:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f11c:	mov	r0, r5
   1f120:	mov	r1, r4
   1f124:	bl	1f3d8 <__assert_fail@plt+0xcc3c>
   1f128:	cmp	r6, #0
   1f12c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f130:	ldr	r7, [r4, #16]
   1f134:	str	r7, [r4, #20]
   1f138:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f13c:	cmp	r6, #0
   1f140:	ldr	r2, [r4]
   1f144:	beq	1f020 <__assert_fail@plt+0xc884>
   1f148:	ldr	r1, [r0, #16]
   1f14c:	cmp	r2, r1
   1f150:	beq	1f048 <__assert_fail@plt+0xc8ac>
   1f154:	ldrd	r0, [r4, #4]
   1f158:	cmp	r2, r1
   1f15c:	addcc	ip, r0, r2, lsl #2
   1f160:	addcc	r2, r2, #1
   1f164:	bcc	1f094 <__assert_fail@plt+0xc8f8>
   1f168:	cmp	r0, #0
   1f16c:	beq	1f1a8 <__assert_fail@plt+0xca0c>
   1f170:	lsl	r3, r1, #1
   1f174:	str	r3, [r4, #8]
   1f178:	lsl	r1, r1, #3
   1f17c:	bl	2df60 <__assert_fail@plt+0x1b7c4>
   1f180:	ldr	r3, [r4]
   1f184:	str	r0, [r4, #4]
   1f188:	b	1f074 <__assert_fail@plt+0xc8d8>
   1f18c:	ldr	r2, [r5, #16]
   1f190:	cmp	r3, r2
   1f194:	bne	1f134 <__assert_fail@plt+0xc998>
   1f198:	mov	r0, r5
   1f19c:	mov	r1, r4
   1f1a0:	bl	1f3d8 <__assert_fail@plt+0xcc3c>
   1f1a4:	b	1f128 <__assert_fail@plt+0xc98c>
   1f1a8:	mov	r3, #64	; 0x40
   1f1ac:	str	r3, [r4, #8]
   1f1b0:	mov	r0, #256	; 0x100
   1f1b4:	bl	2df04 <__assert_fail@plt+0x1b768>
   1f1b8:	ldr	r3, [r4]
   1f1bc:	str	r0, [r4, #4]
   1f1c0:	b	1f074 <__assert_fail@plt+0xc8d8>
   1f1c4:	ldr	r3, [pc, #60]	; 1f208 <__assert_fail@plt+0xca6c>
   1f1c8:	ldr	r2, [pc, #60]	; 1f20c <__assert_fail@plt+0xca70>
   1f1cc:	ldr	r1, [pc, #60]	; 1f210 <__assert_fail@plt+0xca74>
   1f1d0:	ldr	r0, [pc, #60]	; 1f214 <__assert_fail@plt+0xca78>
   1f1d4:	bl	1279c <__assert_fail@plt>
   1f1d8:	ldr	r1, [pc, #56]	; 1f218 <__assert_fail@plt+0xca7c>
   1f1dc:	mov	r2, #5
   1f1e0:	mov	r0, #0
   1f1e4:	bl	1222c <dcgettext@plt>
   1f1e8:	mov	r1, #0
   1f1ec:	mov	r2, r0
   1f1f0:	mov	r0, #1
   1f1f4:	bl	12388 <error@plt>
   1f1f8:	mov	r2, #5
   1f1fc:	ldr	r1, [pc, #24]	; 1f21c <__assert_fail@plt+0xca80>
   1f200:	b	1f1e0 <__assert_fail@plt+0xca44>
   1f204:	andeq	r7, r4, ip, ror #31
   1f208:	andeq	r7, r4, ip, asr #30
   1f20c:	andeq	r0, r0, r5, asr r1
   1f210:	ldrdeq	r7, [r4], -r4
   1f214:	andeq	r7, r4, r0, ror #31
   1f218:	strdeq	r7, [r4], -r8
   1f21c:	andeq	r8, r4, r4, lsr r0
   1f220:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f224:	sub	sp, sp, #36	; 0x24
   1f228:	mov	r7, r3
   1f22c:	ldr	r3, [sp, #72]	; 0x48
   1f230:	ldr	r5, [pc, #408]	; 1f3d0 <__assert_fail@plt+0xcc34>
   1f234:	str	r3, [sp, #8]
   1f238:	ldr	r3, [sp, #76]	; 0x4c
   1f23c:	str	r1, [sp, #24]
   1f240:	str	r3, [sp, #16]
   1f244:	ldr	r3, [sp, #80]	; 0x50
   1f248:	ldr	r1, [r5]
   1f24c:	str	r3, [sp, #12]
   1f250:	ldr	r3, [sp, #84]	; 0x54
   1f254:	mov	r9, r0
   1f258:	str	r3, [sp, #4]
   1f25c:	ldr	r0, [r0, #12]
   1f260:	ldr	r3, [sp, #88]	; 0x58
   1f264:	cmp	r1, #0
   1f268:	str	r1, [sp, #20]
   1f26c:	mov	r4, r2
   1f270:	sub	r6, r0, #1
   1f274:	str	r3, [sp, #28]
   1f278:	beq	1f3bc <__assert_fail@plt+0xcc20>
   1f27c:	ldr	r3, [sp, #4]
   1f280:	ldr	r2, [sp, #16]
   1f284:	ldr	r5, [sp, #20]
   1f288:	add	sl, r3, r2
   1f28c:	b	1f30c <__assert_fail@plt+0xcb70>
   1f290:	sub	fp, r8, r4
   1f294:	cmp	r6, fp
   1f298:	bls	1f390 <__assert_fail@plt+0xcbf4>
   1f29c:	mov	r0, r5
   1f2a0:	mov	r1, r4
   1f2a4:	sub	r6, r6, fp
   1f2a8:	mov	r2, fp
   1f2ac:	bl	1252c <strncpy@plt>
   1f2b0:	cmp	sl, r6
   1f2b4:	add	r5, r5, fp
   1f2b8:	bcs	1f38c <__assert_fail@plt+0xcbf0>
   1f2bc:	ldr	r1, [sp, #8]
   1f2c0:	sub	r6, r6, sl
   1f2c4:	cmp	r1, #0
   1f2c8:	beq	1f2dc <__assert_fail@plt+0xcb40>
   1f2cc:	mov	r0, r5
   1f2d0:	bl	1234c <strcpy@plt>
   1f2d4:	ldr	r3, [sp, #16]
   1f2d8:	add	r5, r5, r3
   1f2dc:	mov	r0, r5
   1f2e0:	ldr	r1, [sp, #12]
   1f2e4:	bl	1234c <strcpy@plt>
   1f2e8:	ldr	r4, [r9, #20]
   1f2ec:	ldr	r3, [sp, #4]
   1f2f0:	sub	r7, r7, r4
   1f2f4:	add	r4, r8, r4
   1f2f8:	add	r5, r5, r3
   1f2fc:	ldrb	r3, [r4]
   1f300:	sub	r7, r7, fp
   1f304:	cmp	r3, #0
   1f308:	beq	1f354 <__assert_fail@plt+0xcbb8>
   1f30c:	ldr	r1, [r9, #24]
   1f310:	mov	r0, r4
   1f314:	bl	244f0 <__assert_fail@plt+0x11d54>
   1f318:	subs	r8, r0, #0
   1f31c:	bne	1f290 <__assert_fail@plt+0xcaf4>
   1f320:	cmp	r7, r6
   1f324:	bcs	1f390 <__assert_fail@plt+0xcbf4>
   1f328:	mov	r1, r4
   1f32c:	add	r4, r4, r7
   1f330:	mov	r0, r5
   1f334:	mov	r2, r7
   1f338:	bl	1252c <strncpy@plt>
   1f33c:	ldrb	r3, [r4]
   1f340:	sub	r6, r6, r7
   1f344:	add	r5, r5, r7
   1f348:	cmp	r3, #0
   1f34c:	mov	r7, r8
   1f350:	bne	1f30c <__assert_fail@plt+0xcb70>
   1f354:	mov	r2, #0
   1f358:	strb	r2, [r5], #1
   1f35c:	ldr	ip, [sp, #20]
   1f360:	str	r2, [sp, #76]	; 0x4c
   1f364:	str	r2, [sp, #72]	; 0x48
   1f368:	ldr	r2, [sp, #28]
   1f36c:	ldr	r1, [sp, #24]
   1f370:	str	r2, [sp, #80]	; 0x50
   1f374:	mov	r0, r9
   1f378:	sub	r3, r5, ip
   1f37c:	mov	r2, ip
   1f380:	add	sp, sp, #36	; 0x24
   1f384:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f388:	b	1ef84 <__assert_fail@plt+0xc7e8>
   1f38c:	mov	r4, r8
   1f390:	ldrb	r3, [r4]
   1f394:	cmp	r3, #0
   1f398:	beq	1f354 <__assert_fail@plt+0xcbb8>
   1f39c:	mov	r2, #5
   1f3a0:	ldr	r1, [pc, #44]	; 1f3d4 <__assert_fail@plt+0xcc38>
   1f3a4:	mov	r0, #0
   1f3a8:	bl	1222c <dcgettext@plt>
   1f3ac:	mov	r1, #0
   1f3b0:	mov	r2, r0
   1f3b4:	mov	r0, #1
   1f3b8:	bl	12388 <error@plt>
   1f3bc:	add	r0, r0, #1
   1f3c0:	bl	2df04 <__assert_fail@plt+0x1b768>
   1f3c4:	str	r0, [sp, #20]
   1f3c8:	str	r0, [r5]
   1f3cc:	b	1f27c <__assert_fail@plt+0xcae0>
   1f3d0:	andeq	ip, r5, ip, asr #25
   1f3d4:	andeq	r8, r4, ip, asr #32
   1f3d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f3dc:	sub	sp, sp, #20
   1f3e0:	mov	r3, #0
   1f3e4:	mov	r7, r1
   1f3e8:	str	r3, [sp, #8]
   1f3ec:	str	r3, [sp, #4]
   1f3f0:	str	r3, [sp]
   1f3f4:	ldr	r2, [pc, #668]	; 1f698 <__assert_fail@plt+0xcefc>
   1f3f8:	mov	r9, r0
   1f3fc:	bl	1ef84 <__assert_fail@plt+0xc7e8>
   1f400:	ldr	r0, [r7]
   1f404:	cmp	r0, #0
   1f408:	beq	1f684 <__assert_fail@plt+0xcee8>
   1f40c:	ldr	r3, [r7, #4]
   1f410:	sub	r0, r0, #-1073741823	; 0xc0000001
   1f414:	ldr	sl, [r3, r0, lsl #2]
   1f418:	lsl	r0, r0, #2
   1f41c:	cmp	sl, #0
   1f420:	bne	1f670 <__assert_fail@plt+0xced4>
   1f424:	add	r0, r0, #8
   1f428:	bl	2df04 <__assert_fail@plt+0x1b768>
   1f42c:	ldr	r1, [r7]
   1f430:	ldr	r4, [r9, #28]
   1f434:	mov	fp, sl
   1f438:	mov	r5, r1
   1f43c:	mov	r8, r0
   1f440:	cmp	r4, #0
   1f444:	beq	1f638 <__assert_fail@plt+0xce9c>
   1f448:	ldr	r3, [r7, #4]
   1f44c:	sub	r2, r8, #4
   1f450:	sub	r3, r3, #4
   1f454:	add	ip, r3, r4, lsl #2
   1f458:	ldr	r0, [r3, #4]!
   1f45c:	cmp	ip, r3
   1f460:	str	r0, [r2, #4]!
   1f464:	bne	1f458 <__assert_fail@plt+0xccbc>
   1f468:	add	ip, sl, r4
   1f46c:	cmp	r5, r4
   1f470:	movls	r3, #0
   1f474:	movhi	r3, #1
   1f478:	cmp	ip, r1
   1f47c:	movcs	r3, #0
   1f480:	cmp	r3, #0
   1f484:	moveq	r6, r4
   1f488:	beq	1f4dc <__assert_fail@plt+0xcd40>
   1f48c:	sub	r0, ip, #-1073741823	; 0xc0000001
   1f490:	ldr	r2, [r7, #4]
   1f494:	sub	r3, r4, #-1073741823	; 0xc0000001
   1f498:	add	r0, r2, r0, lsl #2
   1f49c:	add	r3, r8, r3, lsl #2
   1f4a0:	mov	r6, r4
   1f4a4:	add	r6, r6, #1
   1f4a8:	add	r2, r6, ip
   1f4ac:	sub	lr, r2, r4
   1f4b0:	cmp	lr, r1
   1f4b4:	movcs	r2, #0
   1f4b8:	movcc	r2, #1
   1f4bc:	cmp	r5, r6
   1f4c0:	movls	r2, #0
   1f4c4:	ldr	lr, [r0, #4]!
   1f4c8:	cmp	r2, #0
   1f4cc:	str	lr, [r3, #4]!
   1f4d0:	bne	1f4a4 <__assert_fail@plt+0xcd08>
   1f4d4:	cmp	r6, r4
   1f4d8:	bcc	1f640 <__assert_fail@plt+0xcea4>
   1f4dc:	ldr	r4, [r9, #32]
   1f4e0:	str	fp, [r8, r6, lsl #2]
   1f4e4:	mov	r3, r8
   1f4e8:	mov	r2, r6
   1f4ec:	ldr	r1, [r7, #24]
   1f4f0:	mov	r0, r9
   1f4f4:	blx	r4
   1f4f8:	subs	r4, r0, #0
   1f4fc:	bne	1f5bc <__assert_fail@plt+0xce20>
   1f500:	ldr	r2, [r9, #28]
   1f504:	add	ip, r2, #1
   1f508:	cmp	ip, r5
   1f50c:	bcs	1f654 <__assert_fail@plt+0xceb8>
   1f510:	ldr	r1, [r7, #40]	; 0x28
   1f514:	clz	r3, r1
   1f518:	lsr	r3, r3, #5
   1f51c:	cmp	r5, r1
   1f520:	orrcc	r3, r3, #1
   1f524:	cmp	r3, #0
   1f528:	ldr	r3, [r7, #36]	; 0x24
   1f52c:	strne	r5, [r7, #40]	; 0x28
   1f530:	moveq	r4, r2
   1f534:	ldrne	r4, [r9, #28]
   1f538:	cmp	r3, #0
   1f53c:	beq	1f5b4 <__assert_fail@plt+0xce18>
   1f540:	ldr	r1, [r7, #40]	; 0x28
   1f544:	cmp	r3, r1
   1f548:	bcs	1f5b4 <__assert_fail@plt+0xce18>
   1f54c:	sub	r3, r1, r3
   1f550:	cmp	r3, #1
   1f554:	subne	r5, r5, r3, lsr #1
   1f558:	subeq	r5, r5, #1
   1f55c:	cmp	r2, #0
   1f560:	beq	1f570 <__assert_fail@plt+0xcdd4>
   1f564:	cmp	ip, r5
   1f568:	bcc	1f578 <__assert_fail@plt+0xcddc>
   1f56c:	mov	r5, ip
   1f570:	cmp	r5, #0
   1f574:	moveq	r5, #1
   1f578:	ldr	r1, [r7]
   1f57c:	add	r3, sl, #1
   1f580:	sub	r2, r1, r4
   1f584:	cmp	r3, r2
   1f588:	bcc	1f440 <__assert_fail@plt+0xcca4>
   1f58c:	mov	r0, r8
   1f590:	bl	12154 <free@plt>
   1f594:	ldr	r1, [r7, #20]
   1f598:	mov	r2, #0
   1f59c:	mvn	r3, #0
   1f5a0:	str	r4, [r7]
   1f5a4:	str	r1, [r7, #16]
   1f5a8:	strd	r2, [r7, #28]
   1f5ac:	add	sp, sp, #20
   1f5b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f5b4:	lsr	r5, r5, #1
   1f5b8:	b	1f55c <__assert_fail@plt+0xcdc0>
   1f5bc:	ldr	r2, [r7, #36]	; 0x24
   1f5c0:	ldr	r3, [r9, #28]
   1f5c4:	cmp	r5, r2
   1f5c8:	movhi	r2, r5
   1f5cc:	strhi	r5, [r7, #36]	; 0x24
   1f5d0:	movls	r4, r3
   1f5d4:	ldrhi	r4, [r9, #28]
   1f5d8:	cmp	r2, #0
   1f5dc:	beq	1f624 <__assert_fail@plt+0xce88>
   1f5e0:	ldr	r1, [r7, #40]	; 0x28
   1f5e4:	cmp	r1, r2
   1f5e8:	bls	1f624 <__assert_fail@plt+0xce88>
   1f5ec:	sub	r2, r1, r2
   1f5f0:	cmp	r2, #1
   1f5f4:	addne	r5, r5, r2, lsr #1
   1f5f8:	addeq	r5, r5, #1
   1f5fc:	cmp	r3, #0
   1f600:	beq	1f610 <__assert_fail@plt+0xce74>
   1f604:	add	r3, r3, #1
   1f608:	cmp	r5, r3
   1f60c:	movcc	r5, r3
   1f610:	cmp	r5, #0
   1f614:	moveq	r5, #1
   1f618:	add	sl, sl, r6
   1f61c:	sub	sl, sl, r4
   1f620:	b	1f578 <__assert_fail@plt+0xcddc>
   1f624:	cmn	r5, #1
   1f628:	addne	r5, r5, #1
   1f62c:	cmp	r3, #0
   1f630:	bne	1f604 <__assert_fail@plt+0xce68>
   1f634:	b	1f618 <__assert_fail@plt+0xce7c>
   1f638:	mov	ip, sl
   1f63c:	b	1f46c <__assert_fail@plt+0xccd0>
   1f640:	ldr	r3, [pc, #84]	; 1f69c <__assert_fail@plt+0xcf00>
   1f644:	mov	r2, #242	; 0xf2
   1f648:	ldr	r1, [pc, #80]	; 1f6a0 <__assert_fail@plt+0xcf04>
   1f64c:	ldr	r0, [pc, #80]	; 1f6a4 <__assert_fail@plt+0xcf08>
   1f650:	bl	1279c <__assert_fail@plt>
   1f654:	mov	r2, #5
   1f658:	ldr	r1, [pc, #72]	; 1f6a8 <__assert_fail@plt+0xcf0c>
   1f65c:	bl	1222c <dcgettext@plt>
   1f660:	mov	r1, r4
   1f664:	mov	r2, r0
   1f668:	mov	r0, #1
   1f66c:	bl	12388 <error@plt>
   1f670:	ldr	r3, [pc, #52]	; 1f6ac <__assert_fail@plt+0xcf10>
   1f674:	ldr	r2, [pc, #52]	; 1f6b0 <__assert_fail@plt+0xcf14>
   1f678:	ldr	r1, [pc, #32]	; 1f6a0 <__assert_fail@plt+0xcf04>
   1f67c:	ldr	r0, [pc, #48]	; 1f6b4 <__assert_fail@plt+0xcf18>
   1f680:	bl	1279c <__assert_fail@plt>
   1f684:	ldr	r3, [pc, #32]	; 1f6ac <__assert_fail@plt+0xcf10>
   1f688:	ldr	r2, [pc, #40]	; 1f6b8 <__assert_fail@plt+0xcf1c>
   1f68c:	ldr	r1, [pc, #12]	; 1f6a0 <__assert_fail@plt+0xcf04>
   1f690:	ldr	r0, [pc, #36]	; 1f6bc <__assert_fail@plt+0xcf20>
   1f694:	bl	1279c <__assert_fail@plt>
   1f698:	andeq	r7, r4, ip, ror #31
   1f69c:	andeq	r7, r4, r4, ror #30
   1f6a0:	ldrdeq	r7, [r4], -r4
   1f6a4:	andeq	r8, r4, r0, lsr #1
   1f6a8:	andeq	r8, r4, r0, asr #1
   1f6ac:	andeq	r7, r4, r8, asr pc
   1f6b0:	andeq	r0, r0, r6, lsl #2
   1f6b4:	andeq	r8, r4, r4, ror r0
   1f6b8:	andeq	r0, r0, r5, lsl #2
   1f6bc:	andeq	r8, r4, r0, rrx
   1f6c0:	push	{r4, lr}
   1f6c4:	mov	r0, #0
   1f6c8:	bl	12250 <sysconf@plt>
   1f6cc:	cmp	r0, #0
   1f6d0:	mvnle	r0, #-2147483648	; 0x80000000
   1f6d4:	pop	{r4, pc}
   1f6d8:	ldr	r3, [pc, #68]	; 1f724 <__assert_fail@plt+0xcf88>
   1f6dc:	push	{r4, r5, r6, lr}
   1f6e0:	ldr	r4, [r3]
   1f6e4:	ldr	r3, [r4]
   1f6e8:	cmp	r3, #0
   1f6ec:	beq	1f718 <__assert_fail@plt+0xcf7c>
   1f6f0:	mov	r5, #0
   1f6f4:	mov	r0, r3
   1f6f8:	bl	1249c <strlen@plt>
   1f6fc:	ldr	r3, [r4, #4]!
   1f700:	cmp	r3, #0
   1f704:	add	r0, r0, #1
   1f708:	add	r5, r5, r0
   1f70c:	bne	1f6f4 <__assert_fail@plt+0xcf58>
   1f710:	mov	r0, r5
   1f714:	pop	{r4, r5, r6, pc}
   1f718:	mov	r5, r3
   1f71c:	mov	r0, r5
   1f720:	pop	{r4, r5, r6, pc}
   1f724:	andeq	ip, r5, ip, lsr #10
   1f728:	push	{r4, r5, r6, lr}
   1f72c:	mov	r4, r0
   1f730:	mov	r6, r1
   1f734:	bl	1f6d8 <__assert_fail@plt+0xcf3c>
   1f738:	mov	r3, #4096	; 0x1000
   1f73c:	str	r3, [r4, #8]
   1f740:	mov	r5, r0
   1f744:	mov	r0, #0
   1f748:	bl	12250 <sysconf@plt>
   1f74c:	mov	r2, #0
   1f750:	str	r2, [r4]
   1f754:	cmp	r0, #0
   1f758:	mvnle	r0, #-2147483648	; 0x80000000
   1f75c:	cmp	r5, r0
   1f760:	str	r0, [r4, #4]
   1f764:	bhi	1f7b8 <__assert_fail@plt+0xd01c>
   1f768:	add	r5, r5, r6
   1f76c:	cmp	r5, r0
   1f770:	bcs	1f7c0 <__assert_fail@plt+0xd024>
   1f774:	sub	r3, r0, r5
   1f778:	str	r3, [r4, #4]
   1f77c:	lsr	r1, r3, #2
   1f780:	sub	r1, r1, #2
   1f784:	cmp	r1, r2
   1f788:	str	r1, [r4, #16]
   1f78c:	beq	1f7c8 <__assert_fail@plt+0xd02c>
   1f790:	ldr	r1, [pc, #68]	; 1f7dc <__assert_fail@plt+0xd040>
   1f794:	str	r2, [r4, #20]
   1f798:	str	r2, [r4, #24]
   1f79c:	str	r2, [r4, #28]
   1f7a0:	str	r2, [r4, #36]	; 0x24
   1f7a4:	str	r2, [r4, #40]	; 0x28
   1f7a8:	str	r3, [r4, #12]
   1f7ac:	mov	r0, r2
   1f7b0:	str	r1, [r4, #32]
   1f7b4:	pop	{r4, r5, r6, pc}
   1f7b8:	mov	r0, #1
   1f7bc:	pop	{r4, r5, r6, pc}
   1f7c0:	mov	r0, #2
   1f7c4:	pop	{r4, r5, r6, pc}
   1f7c8:	ldr	r3, [pc, #16]	; 1f7e0 <__assert_fail@plt+0xd044>
   1f7cc:	ldr	r2, [pc, #16]	; 1f7e4 <__assert_fail@plt+0xd048>
   1f7d0:	ldr	r1, [pc, #16]	; 1f7e8 <__assert_fail@plt+0xd04c>
   1f7d4:	ldr	r0, [pc, #16]	; 1f7ec <__assert_fail@plt+0xd050>
   1f7d8:	bl	1279c <__assert_fail@plt>
   1f7dc:	andeq	lr, r1, ip, asr #29
   1f7e0:	andeq	r7, r4, r0, ror pc
   1f7e4:	andeq	r0, r0, r6, lsl #4
   1f7e8:	ldrdeq	r7, [r4], -r4
   1f7ec:	strdeq	r8, [r4], -r4
   1f7f0:	ldr	r3, [r0, #4]
   1f7f4:	cmp	r3, #131072	; 0x20000
   1f7f8:	bcc	1f808 <__assert_fail@plt+0xd06c>
   1f7fc:	ldr	r3, [r0, #8]
   1f800:	cmp	r3, #131072	; 0x20000
   1f804:	movls	r3, #131072	; 0x20000
   1f808:	str	r3, [r0, #12]
   1f80c:	bx	lr
   1f810:	ldr	r0, [r0, #12]
   1f814:	ldr	r3, [pc, #104]	; 1f884 <__assert_fail@plt+0xd0e8>
   1f818:	push	{r4, r5, r6, lr}
   1f81c:	cmp	r0, r3
   1f820:	mov	r5, #0
   1f824:	str	r5, [r1]
   1f828:	str	r5, [r1, #16]
   1f82c:	str	r5, [r1, #4]
   1f830:	str	r5, [r1, #8]
   1f834:	str	r5, [r1, #36]	; 0x24
   1f838:	str	r5, [r1, #40]	; 0x28
   1f83c:	bhi	1f870 <__assert_fail@plt+0xd0d4>
   1f840:	add	r0, r0, #1
   1f844:	mov	r4, r1
   1f848:	mov	r6, r2
   1f84c:	bl	2df04 <__assert_fail@plt+0x1b768>
   1f850:	mvn	r3, #0
   1f854:	str	r5, [r4, #20]
   1f858:	str	r5, [r4, #16]
   1f85c:	str	r5, [r4, #28]
   1f860:	str	r6, [r4, #24]
   1f864:	str	r3, [r4, #32]
   1f868:	str	r0, [r4, #12]
   1f86c:	pop	{r4, r5, r6, pc}
   1f870:	ldr	r3, [pc, #16]	; 1f888 <__assert_fail@plt+0xd0ec>
   1f874:	mov	r2, #572	; 0x23c
   1f878:	ldr	r1, [pc, #12]	; 1f88c <__assert_fail@plt+0xd0f0>
   1f87c:	ldr	r0, [pc, #12]	; 1f890 <__assert_fail@plt+0xd0f4>
   1f880:	bl	1279c <__assert_fail@plt>
   1f884:	svcvc	0x00fff7ff
   1f888:	andeq	r7, r4, r4, lsl #31
   1f88c:	ldrdeq	r7, [r4], -r4
   1f890:	andeq	r8, r4, ip, lsl #2
   1f894:	ldr	ip, [r0, #28]
   1f898:	mov	r2, #0
   1f89c:	ldr	r0, [r1, #20]
   1f8a0:	mvn	r3, #0
   1f8a4:	str	ip, [r1]
   1f8a8:	str	r0, [r1, #16]
   1f8ac:	strd	r2, [r1, #28]
   1f8b0:	bx	lr
   1f8b4:	ldr	r3, [r0]
   1f8b8:	push	{r4, r5, r6, lr}
   1f8bc:	cmp	r3, #0
   1f8c0:	beq	1f920 <__assert_fail@plt+0xd184>
   1f8c4:	mov	r4, #0
   1f8c8:	mov	r5, r0
   1f8cc:	mov	r6, r4
   1f8d0:	mov	r0, r3
   1f8d4:	bl	1249c <strlen@plt>
   1f8d8:	ldr	r3, [r5, #4]!
   1f8dc:	add	r4, r4, #1
   1f8e0:	cmp	r3, #0
   1f8e4:	add	r6, r6, r0
   1f8e8:	bne	1f8d0 <__assert_fail@plt+0xd134>
   1f8ec:	mov	r1, r4
   1f8f0:	ldr	r0, [pc, #52]	; 1f92c <__assert_fail@plt+0xd190>
   1f8f4:	bl	1eed4 <__assert_fail@plt+0xc738>
   1f8f8:	cmp	r0, #0
   1f8fc:	beq	1f908 <__assert_fail@plt+0xd16c>
   1f900:	mov	r0, #1
   1f904:	pop	{r4, r5, r6, pc}
   1f908:	mov	r1, r6
   1f90c:	ldr	r0, [pc, #28]	; 1f930 <__assert_fail@plt+0xd194>
   1f910:	bl	1eed4 <__assert_fail@plt+0xc738>
   1f914:	adds	r0, r0, #0
   1f918:	movne	r0, #1
   1f91c:	pop	{r4, r5, r6, pc}
   1f920:	mov	r4, r3
   1f924:	mov	r6, r3
   1f928:	b	1f8ec <__assert_fail@plt+0xd150>
   1f92c:	andeq	r8, r4, r0, lsr r1
   1f930:	andeq	r8, r4, r8, asr r1
   1f934:	push	{r4, r5, r6, r7, lr}
   1f938:	sub	sp, sp, #20
   1f93c:	ldr	r4, [pc, #192]	; 1fa04 <__assert_fail@plt+0xd268>
   1f940:	mov	r7, r0
   1f944:	add	r0, sp, #4
   1f948:	ldr	r3, [r4]
   1f94c:	mov	r5, r1
   1f950:	mov	r6, r2
   1f954:	str	r3, [sp, #12]
   1f958:	bl	2d8a0 <__assert_fail@plt+0x1b104>
   1f95c:	cmp	r0, #0
   1f960:	bne	1f9f4 <__assert_fail@plt+0xd258>
   1f964:	mov	r0, r7
   1f968:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   1f96c:	cmp	r0, #0
   1f970:	bne	1f9e8 <__assert_fail@plt+0xd24c>
   1f974:	mov	r0, r6
   1f978:	blx	r5
   1f97c:	subs	r5, r0, #0
   1f980:	blt	1f9b8 <__assert_fail@plt+0xd21c>
   1f984:	add	r0, sp, #4
   1f988:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   1f98c:	cmp	r0, #0
   1f990:	bne	1f9e8 <__assert_fail@plt+0xd24c>
   1f994:	add	r0, sp, #4
   1f998:	bl	2d910 <__assert_fail@plt+0x1b174>
   1f99c:	ldr	r2, [sp, #12]
   1f9a0:	ldr	r3, [r4]
   1f9a4:	mov	r0, r5
   1f9a8:	cmp	r2, r3
   1f9ac:	bne	1fa00 <__assert_fail@plt+0xd264>
   1f9b0:	add	sp, sp, #20
   1f9b4:	pop	{r4, r5, r6, r7, pc}
   1f9b8:	bl	124d8 <__errno_location@plt>
   1f9bc:	mov	r6, r0
   1f9c0:	add	r0, sp, #4
   1f9c4:	ldr	r7, [r6]
   1f9c8:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   1f9cc:	cmp	r0, #0
   1f9d0:	bne	1f9e8 <__assert_fail@plt+0xd24c>
   1f9d4:	add	r0, sp, #4
   1f9d8:	bl	2d910 <__assert_fail@plt+0x1b174>
   1f9dc:	cmp	r7, #0
   1f9e0:	strne	r7, [r6]
   1f9e4:	b	1f99c <__assert_fail@plt+0xd200>
   1f9e8:	bl	124d8 <__errno_location@plt>
   1f9ec:	ldr	r0, [r0]
   1f9f0:	bl	258f4 <__assert_fail@plt+0x13158>
   1f9f4:	bl	124d8 <__errno_location@plt>
   1f9f8:	ldr	r0, [r0]
   1f9fc:	bl	258b8 <__assert_fail@plt+0x1311c>
   1fa00:	bl	12244 <__stack_chk_fail@plt>
   1fa04:	andeq	fp, r5, r0, ror #24
   1fa08:	push	{r4, r5, r6, r7, lr}
   1fa0c:	sub	sp, sp, #20
   1fa10:	ldr	r4, [pc, #248]	; 1fb10 <__assert_fail@plt+0xd374>
   1fa14:	cmn	r0, #100	; 0x64
   1fa18:	mov	r6, r1
   1fa1c:	ldr	r3, [r4]
   1fa20:	mov	r7, r2
   1fa24:	str	r3, [sp, #12]
   1fa28:	beq	1fac4 <__assert_fail@plt+0xd328>
   1fa2c:	mov	r5, r0
   1fa30:	add	r0, sp, #4
   1fa34:	bl	2d8a0 <__assert_fail@plt+0x1b104>
   1fa38:	cmp	r0, #0
   1fa3c:	bne	1faf8 <__assert_fail@plt+0xd35c>
   1fa40:	mov	r0, r5
   1fa44:	bl	126a0 <fchdir@plt>
   1fa48:	cmp	r0, #0
   1fa4c:	bne	1fad4 <__assert_fail@plt+0xd338>
   1fa50:	mov	r0, r7
   1fa54:	blx	r6
   1fa58:	subs	r5, r0, #0
   1fa5c:	blt	1fa94 <__assert_fail@plt+0xd2f8>
   1fa60:	add	r0, sp, #4
   1fa64:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   1fa68:	cmp	r0, #0
   1fa6c:	bne	1fb04 <__assert_fail@plt+0xd368>
   1fa70:	add	r0, sp, #4
   1fa74:	bl	2d910 <__assert_fail@plt+0x1b174>
   1fa78:	ldr	r2, [sp, #12]
   1fa7c:	ldr	r3, [r4]
   1fa80:	mov	r0, r5
   1fa84:	cmp	r2, r3
   1fa88:	bne	1faf4 <__assert_fail@plt+0xd358>
   1fa8c:	add	sp, sp, #20
   1fa90:	pop	{r4, r5, r6, r7, pc}
   1fa94:	bl	124d8 <__errno_location@plt>
   1fa98:	mov	r6, r0
   1fa9c:	add	r0, sp, #4
   1faa0:	ldr	r7, [r6]
   1faa4:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   1faa8:	cmp	r0, #0
   1faac:	bne	1fb04 <__assert_fail@plt+0xd368>
   1fab0:	add	r0, sp, #4
   1fab4:	bl	2d910 <__assert_fail@plt+0x1b174>
   1fab8:	cmp	r7, #0
   1fabc:	strne	r7, [r6]
   1fac0:	b	1fa78 <__assert_fail@plt+0xd2dc>
   1fac4:	mov	r0, r2
   1fac8:	blx	r1
   1facc:	mov	r5, r0
   1fad0:	b	1fa78 <__assert_fail@plt+0xd2dc>
   1fad4:	bl	124d8 <__errno_location@plt>
   1fad8:	mvn	r5, #0
   1fadc:	mov	r6, r0
   1fae0:	add	r0, sp, #4
   1fae4:	ldr	r7, [r6]
   1fae8:	bl	2d910 <__assert_fail@plt+0x1b174>
   1faec:	str	r7, [r6]
   1faf0:	b	1fa78 <__assert_fail@plt+0xd2dc>
   1faf4:	bl	12244 <__stack_chk_fail@plt>
   1faf8:	bl	124d8 <__errno_location@plt>
   1fafc:	ldr	r0, [r0]
   1fb00:	bl	258b8 <__assert_fail@plt+0x1311c>
   1fb04:	bl	124d8 <__errno_location@plt>
   1fb08:	ldr	r0, [r0]
   1fb0c:	bl	258f4 <__assert_fail@plt+0x13158>
   1fb10:	andeq	fp, r5, r0, ror #24
   1fb14:	push	{r4, r5, r6, r7, r8, lr}
   1fb18:	mov	r4, r1
   1fb1c:	mov	r5, r0
   1fb20:	mov	r6, r2
   1fb24:	bl	124d8 <__errno_location@plt>
   1fb28:	cmp	r4, #0
   1fb2c:	ldr	r8, [r0]
   1fb30:	beq	1fbfc <__assert_fail@plt+0xd460>
   1fb34:	ldr	r1, [r6]
   1fb38:	mov	r7, r0
   1fb3c:	cmp	r1, #0
   1fb40:	beq	1fb9c <__assert_fail@plt+0xd400>
   1fb44:	cmp	r1, r4
   1fb48:	bcs	1fbc4 <__assert_fail@plt+0xd428>
   1fb4c:	lsl	r0, r1, #1
   1fb50:	cmp	r1, r0
   1fb54:	bls	1fb6c <__assert_fail@plt+0xd3d0>
   1fb58:	b	1fbd8 <__assert_fail@plt+0xd43c>
   1fb5c:	lsl	r3, r0, #1
   1fb60:	cmp	r0, r3
   1fb64:	bhi	1fbb0 <__assert_fail@plt+0xd414>
   1fb68:	mov	r0, r3
   1fb6c:	cmp	r0, r4
   1fb70:	bcc	1fb5c <__assert_fail@plt+0xd3c0>
   1fb74:	cmp	r1, #0
   1fb78:	bne	1fbbc <__assert_fail@plt+0xd420>
   1fb7c:	cmp	r5, #0
   1fb80:	bne	1fc10 <__assert_fail@plt+0xd474>
   1fb84:	str	r0, [r6]
   1fb88:	bl	123dc <malloc@plt>
   1fb8c:	cmp	r0, #0
   1fb90:	beq	1fbd0 <__assert_fail@plt+0xd434>
   1fb94:	str	r8, [r7]
   1fb98:	pop	{r4, r5, r6, r7, r8, pc}
   1fb9c:	cmp	r4, #16
   1fba0:	movls	r0, #16
   1fba4:	bls	1fb7c <__assert_fail@plt+0xd3e0>
   1fba8:	mov	r0, #32
   1fbac:	b	1fb6c <__assert_fail@plt+0xd3d0>
   1fbb0:	cmp	r1, #0
   1fbb4:	mov	r0, r4
   1fbb8:	beq	1fb7c <__assert_fail@plt+0xd3e0>
   1fbbc:	cmp	r1, r0
   1fbc0:	bne	1fbdc <__assert_fail@plt+0xd440>
   1fbc4:	mov	r0, r5
   1fbc8:	cmp	r0, #0
   1fbcc:	bne	1fb94 <__assert_fail@plt+0xd3f8>
   1fbd0:	mov	r0, #0
   1fbd4:	pop	{r4, r5, r6, r7, r8, pc}
   1fbd8:	mov	r0, r4
   1fbdc:	str	r0, [r6]
   1fbe0:	mov	r1, r0
   1fbe4:	mov	r0, r5
   1fbe8:	bl	12268 <realloc@plt>
   1fbec:	cmp	r0, #0
   1fbf0:	beq	1fbd0 <__assert_fail@plt+0xd434>
   1fbf4:	str	r8, [r7]
   1fbf8:	pop	{r4, r5, r6, r7, r8, pc}
   1fbfc:	ldr	r3, [pc, #32]	; 1fc24 <__assert_fail@plt+0xd488>
   1fc00:	mov	r2, #71	; 0x47
   1fc04:	ldr	r1, [pc, #28]	; 1fc28 <__assert_fail@plt+0xd48c>
   1fc08:	ldr	r0, [pc, #28]	; 1fc2c <__assert_fail@plt+0xd490>
   1fc0c:	bl	1279c <__assert_fail@plt>
   1fc10:	ldr	r3, [pc, #12]	; 1fc24 <__assert_fail@plt+0xd488>
   1fc14:	mov	r2, #79	; 0x4f
   1fc18:	ldr	r1, [pc, #8]	; 1fc28 <__assert_fail@plt+0xd48c>
   1fc1c:	ldr	r0, [pc, #12]	; 1fc30 <__assert_fail@plt+0xd494>
   1fc20:	bl	1279c <__assert_fail@plt>
   1fc24:	andeq	r8, r4, r0, lsl #3
   1fc28:	andeq	r8, r4, ip, lsl #3
   1fc2c:	muleq	r4, r8, r1
   1fc30:	andeq	r8, r4, r4, lsr #3
   1fc34:	push	{r4, lr}
   1fc38:	mov	r4, r0
   1fc3c:	bl	1fb14 <__assert_fail@plt+0xd378>
   1fc40:	cmp	r0, #0
   1fc44:	popne	{r4, pc}
   1fc48:	mov	r0, r4
   1fc4c:	bl	12154 <free@plt>
   1fc50:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   1fc54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fc58:	ldr	r0, [pc, #200]	; 1fd28 <__assert_fail@plt+0xd58c>
   1fc5c:	bl	21630 <__assert_fail@plt+0xee94>
   1fc60:	subs	r6, r0, #0
   1fc64:	beq	1fd1c <__assert_fail@plt+0xd580>
   1fc68:	bl	124d8 <__errno_location@plt>
   1fc6c:	mov	r9, #0
   1fc70:	mov	r8, r9
   1fc74:	mvn	r5, #0
   1fc78:	mov	r7, r0
   1fc7c:	str	r8, [r7]
   1fc80:	mov	r0, r6
   1fc84:	bl	12664 <readdir64@plt>
   1fc88:	mov	r1, #0
   1fc8c:	subs	r4, r0, #0
   1fc90:	beq	1fcd0 <__assert_fail@plt+0xd534>
   1fc94:	ldrb	r3, [r4, #19]
   1fc98:	add	r0, r4, #19
   1fc9c:	cmp	r3, #46	; 0x2e
   1fca0:	bne	1fcbc <__assert_fail@plt+0xd520>
   1fca4:	ldrb	r3, [r4, #20]
   1fca8:	cmp	r3, #0
   1fcac:	beq	1fc7c <__assert_fail@plt+0xd4e0>
   1fcb0:	ldrh	r3, [r4, #20]
   1fcb4:	cmp	r3, #46	; 0x2e
   1fcb8:	beq	1fc7c <__assert_fail@plt+0xd4e0>
   1fcbc:	bl	21094 <__assert_fail@plt+0xe8f8>
   1fcc0:	mov	r9, #1
   1fcc4:	cmp	r5, r0
   1fcc8:	movlt	r5, r0
   1fccc:	b	1fc7c <__assert_fail@plt+0xd4e0>
   1fcd0:	ldr	r7, [r7]
   1fcd4:	cmp	r7, r1
   1fcd8:	bne	1fcf4 <__assert_fail@plt+0xd558>
   1fcdc:	mov	r0, r6
   1fce0:	bl	12760 <closedir@plt>
   1fce4:	cmp	r9, #0
   1fce8:	beq	1fd1c <__assert_fail@plt+0xd580>
   1fcec:	mov	r0, r5
   1fcf0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fcf4:	ldr	r2, [pc, #44]	; 1fd28 <__assert_fail@plt+0xd58c>
   1fcf8:	mov	r1, #8
   1fcfc:	bl	2d52c <__assert_fail@plt+0x1ad90>
   1fd00:	mov	r1, r7
   1fd04:	ldr	r2, [pc, #32]	; 1fd2c <__assert_fail@plt+0xd590>
   1fd08:	mov	r3, r0
   1fd0c:	mov	r0, r4
   1fd10:	bl	12388 <error@plt>
   1fd14:	mov	r0, r6
   1fd18:	bl	12760 <closedir@plt>
   1fd1c:	mvn	r5, #0
   1fd20:	mov	r0, r5
   1fd24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fd28:	ldrdeq	r8, [r4], -r4
   1fd2c:	andeq	r8, r4, r8, asr #11
   1fd30:	push	{r4, r5, r6, lr}
   1fd34:	mov	r4, r1
   1fd38:	mov	r1, #1
   1fd3c:	mov	r6, r0
   1fd40:	bl	2f650 <__assert_fail@plt+0x1ceb4>
   1fd44:	ands	r5, r0, #1
   1fd48:	movne	r5, #0
   1fd4c:	bne	1fd88 <__assert_fail@plt+0xd5ec>
   1fd50:	ldr	r1, [r4, #4]
   1fd54:	add	r2, r4, #8
   1fd58:	add	r1, r1, #1
   1fd5c:	ldr	r0, [r4]
   1fd60:	lsl	r1, r1, #2
   1fd64:	bl	1fb14 <__assert_fail@plt+0xd378>
   1fd68:	cmp	r0, #0
   1fd6c:	strne	r0, [r4]
   1fd70:	ldrne	r3, [r4, #4]
   1fd74:	mvneq	r5, #0
   1fd78:	strne	r6, [r0, r3, lsl #2]
   1fd7c:	ldrne	r3, [r4, #4]
   1fd80:	addne	r3, r3, #1
   1fd84:	strne	r3, [r4, #4]
   1fd88:	mov	r0, r5
   1fd8c:	pop	{r4, r5, r6, pc}
   1fd90:	push	{r4, r5, r6, lr}
   1fd94:	mov	r4, r1
   1fd98:	mov	r1, #1
   1fd9c:	mov	r5, r0
   1fda0:	bl	2f650 <__assert_fail@plt+0x1ceb4>
   1fda4:	tst	r0, #1
   1fda8:	bne	1fe04 <__assert_fail@plt+0xd668>
   1fdac:	ldmib	r4, {r0, r3}
   1fdb0:	cmp	r3, r0
   1fdb4:	bcs	1fdf0 <__assert_fail@plt+0xd654>
   1fdb8:	ldr	r1, [r4]
   1fdbc:	add	r2, r1, r3, lsl #2
   1fdc0:	ldr	r1, [r1, r3, lsl #2]
   1fdc4:	cmp	r1, r5
   1fdc8:	bge	1fdfc <__assert_fail@plt+0xd660>
   1fdcc:	add	r3, r3, #1
   1fdd0:	b	1fde4 <__assert_fail@plt+0xd648>
   1fdd4:	ldr	r1, [r2, #4]!
   1fdd8:	add	r3, r3, #1
   1fddc:	cmp	r5, r1
   1fde0:	ble	1fdfc <__assert_fail@plt+0xd660>
   1fde4:	cmp	r0, r3
   1fde8:	str	r3, [r4, #8]
   1fdec:	bne	1fdd4 <__assert_fail@plt+0xd638>
   1fdf0:	mvn	r0, #0
   1fdf4:	str	r5, [r4, #12]
   1fdf8:	pop	{r4, r5, r6, pc}
   1fdfc:	cmp	r5, r1
   1fe00:	bne	1fdf0 <__assert_fail@plt+0xd654>
   1fe04:	mov	r0, #0
   1fe08:	pop	{r4, r5, r6, pc}
   1fe0c:	push	{r4, r5, lr}
   1fe10:	sub	sp, sp, #28
   1fe14:	ldr	r5, [pc, #100]	; 1fe80 <__assert_fail@plt+0xd6e4>
   1fe18:	mov	r0, #4
   1fe1c:	ldr	r3, [r5]
   1fe20:	str	r3, [sp, #20]
   1fe24:	bl	12250 <sysconf@plt>
   1fe28:	mov	r1, sp
   1fe2c:	cmn	r0, #1
   1fe30:	movne	r4, r0
   1fe34:	mov	r0, #7
   1fe38:	moveq	r4, #20
   1fe3c:	bl	1225c <getrlimit64@plt>
   1fe40:	cmp	r0, #0
   1fe44:	bne	1fe60 <__assert_fail@plt+0xd6c4>
   1fe48:	ldrd	r2, [sp]
   1fe4c:	mvn	r1, #0
   1fe50:	mvn	r0, #0
   1fe54:	cmp	r3, r1
   1fe58:	cmpeq	r2, r0
   1fe5c:	movne	r4, r2
   1fe60:	ldr	r2, [sp, #20]
   1fe64:	ldr	r3, [r5]
   1fe68:	mov	r0, r4
   1fe6c:	cmp	r2, r3
   1fe70:	bne	1fe7c <__assert_fail@plt+0xd6e0>
   1fe74:	add	sp, sp, #28
   1fe78:	pop	{r4, r5, pc}
   1fe7c:	bl	12244 <__stack_chk_fail@plt>
   1fe80:	andeq	fp, r5, r0, ror #24
   1fe84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fe88:	sub	sp, sp, #532	; 0x214
   1fe8c:	subs	r3, r0, #0
   1fe90:	str	r3, [sp, #4]
   1fe94:	ldr	r3, [pc, #276]	; 1ffb0 <__assert_fail@plt+0xd814>
   1fe98:	ldr	r3, [r3]
   1fe9c:	str	r3, [sp, #524]	; 0x20c
   1fea0:	ble	1ff5c <__assert_fail@plt+0xd7c0>
   1fea4:	mov	r5, #0
   1fea8:	mov	r8, r1
   1feac:	mov	r9, r2
   1feb0:	mov	r7, r5
   1feb4:	mov	r6, #5
   1feb8:	ldr	r3, [sp, #4]
   1febc:	sub	r3, r3, r5
   1fec0:	cmp	r3, #64	; 0x40
   1fec4:	movlt	r4, r3
   1fec8:	movge	r4, #64	; 0x40
   1fecc:	cmp	r3, #0
   1fed0:	ble	1ff7c <__assert_fail@plt+0xd7e0>
   1fed4:	add	r2, sp, #12
   1fed8:	mov	r3, #0
   1fedc:	add	r1, r5, r3
   1fee0:	add	r3, r3, #1
   1fee4:	cmp	r3, r4
   1fee8:	strh	r6, [r2, #4]
   1feec:	strh	r7, [r2, #6]
   1fef0:	str	r1, [r2], #8
   1fef4:	blt	1fedc <__assert_fail@plt+0xd740>
   1fef8:	mov	r3, #512	; 0x200
   1fefc:	mov	r2, #0
   1ff00:	mov	r1, r4
   1ff04:	add	r0, sp, #12
   1ff08:	bl	122e0 <__poll_chk@plt>
   1ff0c:	cmn	r0, #1
   1ff10:	beq	1ff60 <__assert_fail@plt+0xd7c4>
   1ff14:	add	sl, sp, #12
   1ff18:	mov	fp, #0
   1ff1c:	ldrsh	r1, [sl, #6]
   1ff20:	cmp	r1, #32
   1ff24:	beq	1ff3c <__assert_fail@plt+0xd7a0>
   1ff28:	mov	r1, r9
   1ff2c:	ldr	r0, [sl]
   1ff30:	blx	r8
   1ff34:	cmp	r0, #0
   1ff38:	bne	1ff60 <__assert_fail@plt+0xd7c4>
   1ff3c:	add	fp, fp, #1
   1ff40:	cmp	fp, r4
   1ff44:	add	sl, sl, #8
   1ff48:	blt	1ff1c <__assert_fail@plt+0xd780>
   1ff4c:	ldr	r3, [sp, #4]
   1ff50:	add	r5, r5, r4
   1ff54:	cmp	r3, r5
   1ff58:	bgt	1feb8 <__assert_fail@plt+0xd71c>
   1ff5c:	mov	r0, #0
   1ff60:	ldr	r3, [pc, #72]	; 1ffb0 <__assert_fail@plt+0xd814>
   1ff64:	ldr	r2, [sp, #524]	; 0x20c
   1ff68:	ldr	r3, [r3]
   1ff6c:	cmp	r2, r3
   1ff70:	bne	1ffac <__assert_fail@plt+0xd810>
   1ff74:	add	sp, sp, #532	; 0x214
   1ff78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ff7c:	mov	r3, #512	; 0x200
   1ff80:	mov	r2, #0
   1ff84:	mov	r1, r4
   1ff88:	add	r0, sp, #12
   1ff8c:	bl	122e0 <__poll_chk@plt>
   1ff90:	cmn	r0, #1
   1ff94:	beq	1ff60 <__assert_fail@plt+0xd7c4>
   1ff98:	ldr	r3, [sp, #4]
   1ff9c:	add	r5, r5, r4
   1ffa0:	cmp	r3, r5
   1ffa4:	bgt	1feb8 <__assert_fail@plt+0xd71c>
   1ffa8:	b	1ff5c <__assert_fail@plt+0xd7c0>
   1ffac:	bl	12244 <__stack_chk_fail@plt>
   1ffb0:	andeq	fp, r5, r0, ror #24
   1ffb4:	push	{r4, lr}
   1ffb8:	sub	sp, sp, #16
   1ffbc:	ldr	r4, [pc, #96]	; 20024 <__assert_fail@plt+0xd888>
   1ffc0:	ldr	r3, [r4]
   1ffc4:	str	r3, [sp, #12]
   1ffc8:	bl	1fc54 <__assert_fail@plt+0xd4b8>
   1ffcc:	cmp	r0, #0
   1ffd0:	bge	1ffd8 <__assert_fail@plt+0xd83c>
   1ffd4:	bl	1fe0c <__assert_fail@plt+0xd670>
   1ffd8:	cmn	r0, #-2147483647	; 0x80000001
   1ffdc:	mov	r3, #0
   1ffe0:	addne	r0, r0, #1
   1ffe4:	mov	r2, sp
   1ffe8:	ldr	r1, [pc, #56]	; 20028 <__assert_fail@plt+0xd88c>
   1ffec:	str	r3, [sp]
   1fff0:	str	r3, [sp, #8]
   1fff4:	str	r3, [sp, #4]
   1fff8:	bl	1fe84 <__assert_fail@plt+0xd6e8>
   1fffc:	ldr	ip, [sp, #12]
   20000:	ldr	r3, [pc, #36]	; 2002c <__assert_fail@plt+0xd890>
   20004:	ldr	r0, [r4]
   20008:	ldm	sp, {r1, r2}
   2000c:	cmp	ip, r0
   20010:	stm	r3, {r1, r2}
   20014:	bne	20020 <__assert_fail@plt+0xd884>
   20018:	add	sp, sp, #16
   2001c:	pop	{r4, pc}
   20020:	bl	12244 <__stack_chk_fail@plt>
   20024:	andeq	fp, r5, r0, ror #24
   20028:	andeq	pc, r1, r0, lsr sp	; <UNPREDICTABLE>
   2002c:	ldrdeq	ip, [r5], -r0
   20030:	push	{r1, r2, r3}
   20034:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   20038:	sub	sp, sp, #12
   2003c:	ldr	r7, [pc, #204]	; 20110 <__assert_fail@plt+0xd974>
   20040:	ldr	r6, [pc, #204]	; 20114 <__assert_fail@plt+0xd978>
   20044:	ldr	r4, [sp, #44]	; 0x2c
   20048:	ldr	r3, [r7]
   2004c:	ldrb	r8, [r6, #8]
   20050:	ands	r5, r4, #64	; 0x40
   20054:	str	r3, [sp, #4]
   20058:	addne	r3, sp, #48	; 0x30
   2005c:	strne	r3, [sp]
   20060:	ldrne	r5, [sp, #48]	; 0x30
   20064:	cmp	r8, #0
   20068:	mov	r9, r0
   2006c:	beq	200b8 <__assert_fail@plt+0xd91c>
   20070:	orr	r1, r4, #524288	; 0x80000
   20074:	mov	r2, r5
   20078:	mov	r0, r9
   2007c:	bl	218a4 <__assert_fail@plt+0xf108>
   20080:	subs	r4, r0, #0
   20084:	blt	20094 <__assert_fail@plt+0xd8f8>
   20088:	ldrb	r3, [r6, #9]
   2008c:	cmp	r3, #0
   20090:	beq	200dc <__assert_fail@plt+0xd940>
   20094:	ldr	r2, [sp, #4]
   20098:	ldr	r3, [r7]
   2009c:	mov	r0, r4
   200a0:	cmp	r2, r3
   200a4:	bne	2010c <__assert_fail@plt+0xd970>
   200a8:	add	sp, sp, #12
   200ac:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   200b0:	add	sp, sp, #12
   200b4:	bx	lr
   200b8:	mov	r1, #524288	; 0x80000
   200bc:	ldr	r0, [pc, #84]	; 20118 <__assert_fail@plt+0xd97c>
   200c0:	bl	218a4 <__assert_fail@plt+0xf108>
   200c4:	subs	sl, r0, #0
   200c8:	bge	200e8 <__assert_fail@plt+0xd94c>
   200cc:	mov	r3, #1
   200d0:	strb	r8, [r6, #9]
   200d4:	strb	r3, [r6, #8]
   200d8:	b	20070 <__assert_fail@plt+0xd8d4>
   200dc:	mov	r1, #1
   200e0:	bl	214c4 <__assert_fail@plt+0xed28>
   200e4:	b	20094 <__assert_fail@plt+0xd8f8>
   200e8:	mov	r1, #1
   200ec:	bl	2f650 <__assert_fail@plt+0x1ceb4>
   200f0:	and	r8, r0, #1
   200f4:	mov	r0, sl
   200f8:	bl	12748 <close@plt>
   200fc:	mov	r3, #1
   20100:	strb	r8, [r6, #9]
   20104:	strb	r3, [r6, #8]
   20108:	b	20070 <__assert_fail@plt+0xd8d4>
   2010c:	bl	12244 <__stack_chk_fail@plt>
   20110:	andeq	fp, r5, r0, ror #24
   20114:	ldrdeq	ip, [r5], -r0
   20118:	andeq	sl, r4, ip, ror #24
   2011c:	push	{r4, lr}
   20120:	ldr	r4, [pc, #20]	; 2013c <__assert_fail@plt+0xd9a0>
   20124:	ldr	r0, [r4]
   20128:	bl	12154 <free@plt>
   2012c:	mov	r3, #0
   20130:	str	r3, [r4]
   20134:	str	r3, [r4, #4]
   20138:	pop	{r4, pc}
   2013c:	ldrdeq	ip, [r5], -r0
   20140:	push	{r4, r5, r6, r7, lr}
   20144:	sub	sp, sp, #28
   20148:	ldr	r4, [pc, #172]	; 201fc <__assert_fail@plt+0xda60>
   2014c:	ldr	r3, [pc, #172]	; 20200 <__assert_fail@plt+0xda64>
   20150:	ldr	r2, [r4]
   20154:	ldr	r7, [r3]
   20158:	str	r2, [sp, #20]
   2015c:	ldr	r6, [r3, #4]
   20160:	bl	1fc54 <__assert_fail@plt+0xd4b8>
   20164:	cmp	r0, #0
   20168:	bge	20170 <__assert_fail@plt+0xd9d4>
   2016c:	bl	1fe0c <__assert_fail@plt+0xd670>
   20170:	cmn	r0, #-2147483647	; 0x80000001
   20174:	addne	r0, r0, #1
   20178:	mov	r5, #0
   2017c:	mvn	r3, #0
   20180:	add	r2, sp, #4
   20184:	ldr	r1, [pc, #120]	; 20204 <__assert_fail@plt+0xda68>
   20188:	str	r6, [sp, #8]
   2018c:	str	r7, [sp, #4]
   20190:	str	r5, [sp, #12]
   20194:	str	r3, [sp, #16]
   20198:	bl	1fe84 <__assert_fail@plt+0xd6e8>
   2019c:	ldr	r6, [sp, #16]
   201a0:	cmp	r6, r5
   201a4:	bge	201c0 <__assert_fail@plt+0xda24>
   201a8:	ldr	r2, [sp, #20]
   201ac:	ldr	r3, [r4]
   201b0:	cmp	r2, r3
   201b4:	bne	201f8 <__assert_fail@plt+0xda5c>
   201b8:	add	sp, sp, #28
   201bc:	pop	{r4, r5, r6, r7, pc}
   201c0:	mov	r2, #5
   201c4:	ldr	r1, [pc, #60]	; 20208 <__assert_fail@plt+0xda6c>
   201c8:	mov	r0, r5
   201cc:	bl	1222c <dcgettext@plt>
   201d0:	mov	r3, r6
   201d4:	mov	r1, r5
   201d8:	mov	r2, r0
   201dc:	mov	r0, r5
   201e0:	bl	12388 <error@plt>
   201e4:	ldr	r3, [pc, #32]	; 2020c <__assert_fail@plt+0xda70>
   201e8:	ldr	r2, [pc, #32]	; 20210 <__assert_fail@plt+0xda74>
   201ec:	ldr	r1, [pc, #32]	; 20214 <__assert_fail@plt+0xda78>
   201f0:	ldr	r0, [pc, #32]	; 20218 <__assert_fail@plt+0xda7c>
   201f4:	bl	1279c <__assert_fail@plt>
   201f8:	bl	12244 <__stack_chk_fail@plt>
   201fc:	andeq	fp, r5, r0, ror #24
   20200:	ldrdeq	ip, [r5], -r0
   20204:	muleq	r1, r0, sp
   20208:	andeq	r8, r4, r4, ror #3
   2020c:			; <UNDEFINED> instruction: 0x000481b8
   20210:	andeq	r0, r0, r1, lsl #3
   20214:	andeq	r8, r4, ip, ror r2
   20218:	andeq	r8, r4, r8, lsl #5
   2021c:	ldr	r3, [pc, #136]	; 202ac <__assert_fail@plt+0xdb10>
   20220:	push	{r4, r5, r6, r7, r8, lr}
   20224:	mov	r5, r0
   20228:	sub	sp, sp, #16
   2022c:	ldr	r0, [r3]
   20230:	bl	2f858 <__assert_fail@plt+0x1d0bc>
   20234:	ldr	ip, [pc, #116]	; 202b0 <__assert_fail@plt+0xdb14>
   20238:	ldr	r3, [pc, #116]	; 202b4 <__assert_fail@plt+0xdb18>
   2023c:	mov	r2, #5
   20240:	ldr	r1, [pc, #112]	; 202b8 <__assert_fail@plt+0xdb1c>
   20244:	mov	r0, #0
   20248:	ldr	r4, [ip]
   2024c:	ldr	r7, [r3]
   20250:	bl	1222c <dcgettext@plt>
   20254:	mov	r2, #5
   20258:	ldr	r1, [pc, #92]	; 202bc <__assert_fail@plt+0xdb20>
   2025c:	mov	r8, r0
   20260:	mov	r0, #0
   20264:	bl	1222c <dcgettext@plt>
   20268:	mov	r2, #5
   2026c:	ldr	r1, [pc, #76]	; 202c0 <__assert_fail@plt+0xdb24>
   20270:	mov	r6, r0
   20274:	mov	r0, #0
   20278:	bl	1222c <dcgettext@plt>
   2027c:	mov	r2, #0
   20280:	str	r2, [sp, #12]
   20284:	str	r8, [sp]
   20288:	mov	r3, r7
   2028c:	str	r6, [sp, #4]
   20290:	mov	r1, r5
   20294:	ldr	r2, [pc, #40]	; 202c4 <__assert_fail@plt+0xdb28>
   20298:	str	r0, [sp, #8]
   2029c:	mov	r0, r4
   202a0:	bl	2de00 <__assert_fail@plt+0x1b664>
   202a4:	add	sp, sp, #16
   202a8:	pop	{r4, r5, r6, r7, r8, pc}
   202ac:	andeq	ip, r5, r8, lsr r5
   202b0:	andeq	ip, r5, r4, asr #10
   202b4:	andeq	ip, r5, r0, lsr #8
   202b8:	muleq	r4, r4, r2
   202bc:	andeq	r8, r4, r4, lsr #5
   202c0:			; <UNDEFINED> instruction: 0x000482b4
   202c4:	andeq	r8, r4, r4, asr #5
   202c8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   202cc:	mov	r4, r0
   202d0:	mov	r5, r1
   202d4:	ldr	sl, [pc, #352]	; 2043c <__assert_fail@plt+0xdca0>
   202d8:	ldr	fp, [pc, #352]	; 20440 <__assert_fail@plt+0xdca4>
   202dc:	ldr	r9, [pc, #352]	; 20444 <__assert_fail@plt+0xdca8>
   202e0:	ldr	r8, [pc, #352]	; 20448 <__assert_fail@plt+0xdcac>
   202e4:	ldr	r7, [pc, #352]	; 2044c <__assert_fail@plt+0xdcb0>
   202e8:	ldr	r6, [pc, #352]	; 20450 <__assert_fail@plt+0xdcb4>
   202ec:	b	20310 <__assert_fail@plt+0xdb74>
   202f0:	cmp	r3, #92	; 0x5c
   202f4:	bne	20390 <__assert_fail@plt+0xdbf4>
   202f8:	mov	r2, r7
   202fc:	mov	r1, #1
   20300:	mov	r0, r5
   20304:	bl	12580 <__fprintf_chk@plt>
   20308:	cmp	r0, #0
   2030c:	blt	20354 <__assert_fail@plt+0xdbb8>
   20310:	ldrb	r3, [r4], #1
   20314:	cmp	r3, #0
   20318:	beq	203bc <__assert_fail@plt+0xdc20>
   2031c:	cmp	r3, #12
   20320:	beq	20414 <__assert_fail@plt+0xdc78>
   20324:	bls	20378 <__assert_fail@plt+0xdbdc>
   20328:	cmp	r3, #32
   2032c:	beq	20400 <__assert_fail@plt+0xdc64>
   20330:	bls	2035c <__assert_fail@plt+0xdbc0>
   20334:	cmp	r3, #34	; 0x22
   20338:	bne	202f0 <__assert_fail@plt+0xdb54>
   2033c:	mov	r2, r8
   20340:	mov	r1, #1
   20344:	mov	r0, r5
   20348:	bl	12580 <__fprintf_chk@plt>
   2034c:	cmp	r0, #0
   20350:	bge	20310 <__assert_fail@plt+0xdb74>
   20354:	mov	r0, #0
   20358:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2035c:	cmp	r3, #13
   20360:	bne	20390 <__assert_fail@plt+0xdbf4>
   20364:	mov	r2, r6
   20368:	mov	r1, #1
   2036c:	mov	r0, r5
   20370:	bl	12580 <__fprintf_chk@plt>
   20374:	b	20308 <__assert_fail@plt+0xdb6c>
   20378:	cmp	r3, #9
   2037c:	beq	203ec <__assert_fail@plt+0xdc50>
   20380:	cmp	r3, #10
   20384:	beq	203d8 <__assert_fail@plt+0xdc3c>
   20388:	cmp	r3, #8
   2038c:	beq	203c4 <__assert_fail@plt+0xdc28>
   20390:	sub	r2, r3, #33	; 0x21
   20394:	cmp	r2, #93	; 0x5d
   20398:	bhi	20428 <__assert_fail@plt+0xdc8c>
   2039c:	mov	r0, r3
   203a0:	mov	r1, r5
   203a4:	bl	12688 <putc@plt>
   203a8:	cmn	r0, #1
   203ac:	beq	20354 <__assert_fail@plt+0xdbb8>
   203b0:	ldrb	r3, [r4], #1
   203b4:	cmp	r3, #0
   203b8:	bne	2031c <__assert_fail@plt+0xdb80>
   203bc:	mov	r0, #1
   203c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   203c4:	ldr	r2, [pc, #136]	; 20454 <__assert_fail@plt+0xdcb8>
   203c8:	mov	r1, #1
   203cc:	mov	r0, r5
   203d0:	bl	12580 <__fprintf_chk@plt>
   203d4:	b	20308 <__assert_fail@plt+0xdb6c>
   203d8:	ldr	r2, [pc, #120]	; 20458 <__assert_fail@plt+0xdcbc>
   203dc:	mov	r1, #1
   203e0:	mov	r0, r5
   203e4:	bl	12580 <__fprintf_chk@plt>
   203e8:	b	20308 <__assert_fail@plt+0xdb6c>
   203ec:	ldr	r2, [pc, #104]	; 2045c <__assert_fail@plt+0xdcc0>
   203f0:	mov	r1, #1
   203f4:	mov	r0, r5
   203f8:	bl	12580 <__fprintf_chk@plt>
   203fc:	b	20308 <__assert_fail@plt+0xdb6c>
   20400:	mov	r2, r9
   20404:	mov	r1, #1
   20408:	mov	r0, r5
   2040c:	bl	12580 <__fprintf_chk@plt>
   20410:	b	20308 <__assert_fail@plt+0xdb6c>
   20414:	mov	r2, sl
   20418:	mov	r1, #1
   2041c:	mov	r0, r5
   20420:	bl	12580 <__fprintf_chk@plt>
   20424:	b	20308 <__assert_fail@plt+0xdb6c>
   20428:	mov	r2, fp
   2042c:	mov	r1, #1
   20430:	mov	r0, r5
   20434:	bl	12580 <__fprintf_chk@plt>
   20438:	b	20308 <__assert_fail@plt+0xdb6c>
   2043c:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   20440:	andeq	r8, r4, r4, lsl #6
   20444:	strdeq	r8, [r4], -ip
   20448:	andeq	r8, r4, r0, lsl #6
   2044c:	andeq	r8, r4, r4, ror #5
   20450:	strdeq	r8, [r4], -r0
   20454:	andeq	r8, r4, ip, ror #5
   20458:	andeq	r8, r4, r8, ror #5
   2045c:	strdeq	r8, [r4], -r4
   20460:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20464:	mov	r5, r3
   20468:	ldr	r7, [pc, #1700]	; 20b14 <__assert_fail@plt+0xe378>
   2046c:	add	fp, sp, #32
   20470:	sub	sp, sp, #972	; 0x3cc
   20474:	ldr	r3, [r7]
   20478:	str	r0, [fp, #-968]	; 0xfffffc38
   2047c:	str	r1, [fp, #-972]	; 0xfffffc34
   20480:	ldr	r0, [r5, #16]
   20484:	sub	r1, fp, #960	; 0x3c0
   20488:	str	r2, [fp, #-984]	; 0xfffffc28
   2048c:	str	r3, [fp, #-40]	; 0xffffffd8
   20490:	ldr	r6, [fp, #16]
   20494:	ldr	r4, [pc, #1660]	; 20b18 <__assert_fail@plt+0xe37c>
   20498:	bl	21900 <__assert_fail@plt+0xf164>
   2049c:	mov	r2, #1
   204a0:	mov	r3, #0
   204a4:	ldrd	r0, [r5, #96]	; 0x60
   204a8:	strd	r2, [sp, #8]
   204ac:	strd	r2, [sp]
   204b0:	sub	r2, fp, #692	; 0x2b4
   204b4:	mov	r3, #0
   204b8:	ldr	r8, [r4]
   204bc:	bl	22bd8 <__assert_fail@plt+0x1043c>
   204c0:	mov	r3, r8
   204c4:	ldr	r2, [pc, #1616]	; 20b1c <__assert_fail@plt+0xe380>
   204c8:	mov	r1, #1
   204cc:	str	r0, [sp]
   204d0:	mov	r0, r6
   204d4:	bl	12580 <__fprintf_chk@plt>
   204d8:	cmp	r0, #0
   204dc:	blt	207f4 <__assert_fail@plt+0xe058>
   204e0:	ldr	r3, [r4]
   204e4:	mov	r1, r6
   204e8:	cmp	r3, r0
   204ec:	strlt	r0, [r4]
   204f0:	mov	r0, #32
   204f4:	bl	12688 <putc@plt>
   204f8:	ldr	r2, [fp, #8]
   204fc:	mov	r8, r2
   20500:	asr	r3, r2, #31
   20504:	mov	r9, r3
   20508:	sub	r3, fp, #980	; 0x3d4
   2050c:	mov	r2, #512	; 0x200
   20510:	strd	r8, [r3]
   20514:	mov	r3, #0
   20518:	strd	r8, [sp, #8]
   2051c:	strd	r2, [sp]
   20520:	mov	r3, #0
   20524:	sub	r2, fp, #692	; 0x2b4
   20528:	ldr	r9, [r4, #4]
   2052c:	cmn	r0, #1
   20530:	ldrd	r0, [r5, #64]	; 0x40
   20534:	movne	r8, r3
   20538:	moveq	sl, r3
   2053c:	moveq	r8, #150	; 0x96
   20540:	movne	sl, #1
   20544:	bl	22bd8 <__assert_fail@plt+0x1043c>
   20548:	mov	r3, r9
   2054c:	ldr	r2, [pc, #1480]	; 20b1c <__assert_fail@plt+0xe380>
   20550:	mov	r1, #1
   20554:	str	r0, [sp]
   20558:	mov	r0, r6
   2055c:	bl	12580 <__fprintf_chk@plt>
   20560:	cmp	r0, #0
   20564:	blt	20824 <__assert_fail@plt+0xe088>
   20568:	ldr	r3, [r4, #4]
   2056c:	cmp	r3, r0
   20570:	strlt	r0, [r4, #4]
   20574:	cmp	sl, #0
   20578:	beq	207f8 <__assert_fail@plt+0xe05c>
   2057c:	mov	r1, r6
   20580:	mov	r0, #32
   20584:	bl	12688 <putc@plt>
   20588:	cmn	r0, #1
   2058c:	beq	20864 <__assert_fail@plt+0xe0c8>
   20590:	sub	r0, fp, #960	; 0x3c0
   20594:	mov	r1, r6
   20598:	bl	12724 <fputs@plt>
   2059c:	cmp	r0, #0
   205a0:	blt	20a30 <__assert_fail@plt+0xe294>
   205a4:	ldr	r2, [r5, #20]
   205a8:	ldr	r3, [r4, #8]
   205ac:	mov	r1, #1
   205b0:	str	r2, [sp]
   205b4:	mov	r0, r6
   205b8:	ldr	r2, [pc, #1376]	; 20b20 <__assert_fail@plt+0xe384>
   205bc:	bl	12580 <__fprintf_chk@plt>
   205c0:	cmp	r0, #0
   205c4:	blt	20a38 <__assert_fail@plt+0xe29c>
   205c8:	ldr	r3, [r4, #8]
   205cc:	mov	r1, r6
   205d0:	cmp	r3, r0
   205d4:	strlt	r0, [r4, #8]
   205d8:	mov	r0, #32
   205dc:	bl	12688 <putc@plt>
   205e0:	ldr	r0, [r5, #24]
   205e4:	bl	23790 <__assert_fail@plt+0x10ff4>
   205e8:	subs	r8, r0, #0
   205ec:	beq	20874 <__assert_fail@plt+0xe0d8>
   205f0:	mov	r1, #0
   205f4:	bl	25304 <__assert_fail@plt+0x12b68>
   205f8:	ldr	r3, [r4, #12]
   205fc:	ldr	r2, [pc, #1312]	; 20b24 <__assert_fail@plt+0xe388>
   20600:	mov	r1, #1
   20604:	cmp	r3, r0
   20608:	strlt	r0, [r4, #12]
   2060c:	movlt	r3, r0
   20610:	str	r8, [sp]
   20614:	mov	r0, r6
   20618:	bl	12580 <__fprintf_chk@plt>
   2061c:	cmp	r0, #0
   20620:	blt	2086c <__assert_fail@plt+0xe0d0>
   20624:	ldr	r0, [r5, #28]
   20628:	bl	23934 <__assert_fail@plt+0x11198>
   2062c:	subs	r8, r0, #0
   20630:	beq	20984 <__assert_fail@plt+0xe1e8>
   20634:	mov	r1, #0
   20638:	bl	25304 <__assert_fail@plt+0x12b68>
   2063c:	ldr	r3, [r4, #16]
   20640:	ldr	r2, [pc, #1244]	; 20b24 <__assert_fail@plt+0xe388>
   20644:	mov	r1, #1
   20648:	cmp	r3, r0
   2064c:	strlt	r0, [r4, #16]
   20650:	movlt	r3, r0
   20654:	str	r8, [sp]
   20658:	mov	r0, r6
   2065c:	bl	12580 <__fprintf_chk@plt>
   20660:	cmp	r0, #0
   20664:	movlt	r8, #500	; 0x1f4
   20668:	blt	207f8 <__assert_fail@plt+0xe05c>
   2066c:	ldr	r3, [r5, #16]
   20670:	and	r3, r3, #45056	; 0xb000
   20674:	cmp	r3, #8192	; 0x2000
   20678:	beq	208d4 <__assert_fail@plt+0xe138>
   2067c:	ldr	r3, [fp, #8]
   20680:	cmp	r3, #0
   20684:	movge	r2, #1
   20688:	movge	r3, #0
   2068c:	subge	r1, fp, #980	; 0x3d4
   20690:	strdge	r2, [r1]
   20694:	sub	r1, fp, #980	; 0x3d4
   20698:	mov	r2, #1
   2069c:	ldrd	r0, [r1]
   206a0:	mov	r3, #0
   206a4:	strd	r0, [sp, #8]
   206a8:	strd	r2, [sp]
   206ac:	mov	r3, #0
   206b0:	sub	r2, fp, #692	; 0x2b4
   206b4:	ldrd	r0, [r5, #48]	; 0x30
   206b8:	ldr	r8, [r4, #28]
   206bc:	bl	22bd8 <__assert_fail@plt+0x1043c>
   206c0:	mov	r3, r8
   206c4:	ldr	r2, [pc, #1104]	; 20b1c <__assert_fail@plt+0xe380>
   206c8:	mov	r1, #1
   206cc:	str	r0, [sp]
   206d0:	mov	r0, r6
   206d4:	bl	12580 <__fprintf_chk@plt>
   206d8:	cmp	r0, #0
   206dc:	blt	209d4 <__assert_fail@plt+0xe238>
   206e0:	ldr	r3, [r4, #28]
   206e4:	cmp	r3, r0
   206e8:	strlt	r0, [r4, #28]
   206ec:	mov	r1, r6
   206f0:	mov	r0, #32
   206f4:	bl	12688 <putc@plt>
   206f8:	cmn	r0, #1
   206fc:	beq	20a40 <__assert_fail@plt+0xe2a4>
   20700:	add	r0, r5, #80	; 0x50
   20704:	bl	12424 <localtime@plt>
   20708:	subs	sl, r0, #0
   2070c:	beq	209dc <__assert_fail@plt+0xe240>
   20710:	ldr	r3, [fp, #4]
   20714:	ldr	r2, [r5, #80]	; 0x50
   20718:	sub	r3, r3, #15532032	; 0xed0000
   2071c:	sub	r3, r3, #19968	; 0x4e00
   20720:	cmp	r3, r2
   20724:	ldr	r9, [pc, #1020]	; 20b28 <__assert_fail@plt+0xe38c>
   20728:	ble	2084c <__assert_fail@plt+0xe0b0>
   2072c:	mov	r4, #256	; 0x100
   20730:	sub	r8, fp, #948	; 0x3b4
   20734:	b	2074c <__assert_fail@plt+0xdfb0>
   20738:	lsl	r4, r4, #1
   2073c:	add	r3, r4, #7
   20740:	bic	r3, r3, #7
   20744:	sub	sp, sp, r3
   20748:	add	r8, sp, #16
   2074c:	mov	r3, sl
   20750:	mov	r2, r9
   20754:	mov	r1, r4
   20758:	mov	r0, r8
   2075c:	bl	12400 <strftime@plt>
   20760:	cmp	r0, #0
   20764:	beq	20738 <__assert_fail@plt+0xdf9c>
   20768:	mov	r3, r8
   2076c:	ldr	r2, [pc, #952]	; 20b2c <__assert_fail@plt+0xe390>
   20770:	mov	r1, #1
   20774:	mov	r0, r6
   20778:	bl	12580 <__fprintf_chk@plt>
   2077c:	cmp	r0, #0
   20780:	movlt	r8, #900	; 0x384
   20784:	blt	207f8 <__assert_fail@plt+0xe05c>
   20788:	ldr	r3, [fp, #12]
   2078c:	cmp	r3, #0
   20790:	bne	2082c <__assert_fail@plt+0xe090>
   20794:	mov	r1, r6
   20798:	ldr	r0, [fp, #-968]	; 0xfffffc38
   2079c:	bl	202c8 <__assert_fail@plt+0xdb2c>
   207a0:	cmp	r0, #0
   207a4:	moveq	r8, #1200	; 0x4b0
   207a8:	beq	207f8 <__assert_fail@plt+0xe05c>
   207ac:	ldr	r3, [r5, #16]
   207b0:	and	r3, r3, #61440	; 0xf000
   207b4:	cmp	r3, #40960	; 0xa000
   207b8:	bne	208a8 <__assert_fail@plt+0xe10c>
   207bc:	ldr	r1, [fp, #-984]	; 0xfffffc28
   207c0:	ldr	r0, [fp, #-972]	; 0xfffffc34
   207c4:	bl	212cc <__assert_fail@plt+0xeb30>
   207c8:	subs	r4, r0, #0
   207cc:	beq	20adc <__assert_fail@plt+0xe340>
   207d0:	mov	r1, r6
   207d4:	ldr	r0, [pc, #852]	; 20b30 <__assert_fail@plt+0xe394>
   207d8:	bl	12724 <fputs@plt>
   207dc:	cmp	r0, #0
   207e0:	bge	20a50 <__assert_fail@plt+0xe2b4>
   207e4:	mov	r0, r4
   207e8:	bl	12154 <free@plt>
   207ec:	ldr	r8, [pc, #832]	; 20b34 <__assert_fail@plt+0xe398>
   207f0:	b	207f8 <__assert_fail@plt+0xe05c>
   207f4:	mov	r8, #100	; 0x64
   207f8:	bl	124d8 <__errno_location@plt>
   207fc:	mov	r2, #5
   20800:	ldr	r1, [pc, #816]	; 20b38 <__assert_fail@plt+0xe39c>
   20804:	ldr	r4, [r0]
   20808:	mov	r0, #0
   2080c:	bl	1222c <dcgettext@plt>
   20810:	mov	r3, r8
   20814:	mov	r1, r4
   20818:	mov	r2, r0
   2081c:	mov	r0, #1
   20820:	bl	12388 <error@plt>
   20824:	mov	r8, #200	; 0xc8
   20828:	b	207f8 <__assert_fail@plt+0xe05c>
   2082c:	ldr	r3, [fp, #-968]	; 0xfffffc38
   20830:	ldr	r2, [pc, #772]	; 20b3c <__assert_fail@plt+0xe3a0>
   20834:	mov	r1, #1
   20838:	mov	r0, r6
   2083c:	bl	12580 <__fprintf_chk@plt>
   20840:	mvn	r0, r0
   20844:	lsr	r0, r0, #31
   20848:	b	207a0 <__assert_fail@plt+0xe004>
   2084c:	ldr	r1, [fp, #4]
   20850:	ldr	r3, [pc, #744]	; 20b40 <__assert_fail@plt+0xe3a4>
   20854:	add	r1, r1, #3600	; 0xe10
   20858:	cmp	r2, r1
   2085c:	movle	r9, r3
   20860:	b	2072c <__assert_fail@plt+0xdf90>
   20864:	mov	r8, #250	; 0xfa
   20868:	b	207f8 <__assert_fail@plt+0xe05c>
   2086c:	mov	r8, #400	; 0x190
   20870:	b	207f8 <__assert_fail@plt+0xe05c>
   20874:	ldr	r3, [r5, #24]
   20878:	ldr	r2, [pc, #708]	; 20b44 <__assert_fail@plt+0xe3a8>
   2087c:	mov	r1, #1
   20880:	mov	r0, r6
   20884:	bl	12580 <__fprintf_chk@plt>
   20888:	ldr	r3, [r4, #12]
   2088c:	cmp	r3, r0
   20890:	strlt	r0, [r4, #12]
   20894:	cmp	r0, #0
   20898:	bgt	20624 <__assert_fail@plt+0xde88>
   2089c:	ldr	r8, [pc, #676]	; 20b48 <__assert_fail@plt+0xe3ac>
   208a0:	b	207f8 <__assert_fail@plt+0xe05c>
   208a4:	bl	12154 <free@plt>
   208a8:	mov	r1, r6
   208ac:	mov	r0, #10
   208b0:	bl	12688 <putc@plt>
   208b4:	cmn	r0, #1
   208b8:	beq	20a48 <__assert_fail@plt+0xe2ac>
   208bc:	ldr	r2, [fp, #-40]	; 0xffffffd8
   208c0:	ldr	r3, [r7]
   208c4:	cmp	r2, r3
   208c8:	bne	20b10 <__assert_fail@plt+0xe374>
   208cc:	sub	sp, fp, #32
   208d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   208d4:	ldr	r1, [r5, #32]
   208d8:	ldr	r2, [r5, #36]	; 0x24
   208dc:	ldr	r3, [r4, #20]
   208e0:	lsl	r1, r1, #12
   208e4:	bic	r2, r2, #4080	; 0xff0
   208e8:	bic	r2, r2, #15
   208ec:	orr	r2, r2, r1, lsr #20
   208f0:	str	r2, [sp]
   208f4:	mov	r1, #1
   208f8:	ldr	r2, [pc, #544]	; 20b20 <__assert_fail@plt+0xe384>
   208fc:	mov	r0, r6
   20900:	bl	12580 <__fprintf_chk@plt>
   20904:	cmp	r0, #0
   20908:	movlt	r8, #600	; 0x258
   2090c:	blt	207f8 <__assert_fail@plt+0xe05c>
   20910:	ldr	r3, [r4, #20]
   20914:	ldr	r2, [pc, #560]	; 20b4c <__assert_fail@plt+0xe3b0>
   20918:	cmp	r0, r3
   2091c:	strgt	r0, [r4, #20]
   20920:	mov	r1, #1
   20924:	mov	r0, r6
   20928:	bl	12580 <__fprintf_chk@plt>
   2092c:	cmp	r0, #0
   20930:	blt	20af8 <__assert_fail@plt+0xe35c>
   20934:	ldr	r1, [r5, #32]
   20938:	ldr	r0, [r5, #36]	; 0x24
   2093c:	ldr	r3, [r4, #24]
   20940:	lsr	r2, r1, #12
   20944:	orr	r2, r2, r0, lsl #20
   20948:	uxtb	r1, r1
   2094c:	bic	r2, r2, #255	; 0xff
   20950:	orr	r2, r2, r1
   20954:	str	r2, [sp]
   20958:	mov	r1, #1
   2095c:	ldr	r2, [pc, #444]	; 20b20 <__assert_fail@plt+0xe384>
   20960:	mov	r0, r6
   20964:	bl	12580 <__fprintf_chk@plt>
   20968:	cmp	r0, #0
   2096c:	ldrlt	r8, [pc, #476]	; 20b50 <__assert_fail@plt+0xe3b4>
   20970:	blt	207f8 <__assert_fail@plt+0xe05c>
   20974:	ldr	r3, [r4, #24]
   20978:	cmp	r0, r3
   2097c:	strgt	r0, [r4, #24]
   20980:	b	206ec <__assert_fail@plt+0xdf50>
   20984:	ldr	r2, [r5, #28]
   20988:	ldr	r3, [r4, #16]
   2098c:	mov	r1, #1
   20990:	str	r2, [sp]
   20994:	mov	r0, r6
   20998:	ldr	r2, [pc, #436]	; 20b54 <__assert_fail@plt+0xe3b8>
   2099c:	bl	12580 <__fprintf_chk@plt>
   209a0:	ldr	r3, [r4, #16]
   209a4:	cmp	r3, r0
   209a8:	strlt	r0, [r4, #16]
   209ac:	cmp	r0, #0
   209b0:	ldrlt	r8, [pc, #416]	; 20b58 <__assert_fail@plt+0xe3bc>
   209b4:	blt	207f8 <__assert_fail@plt+0xe05c>
   209b8:	mov	r1, r6
   209bc:	mov	r0, #32
   209c0:	bl	12688 <putc@plt>
   209c4:	cmn	r0, #1
   209c8:	bne	2066c <__assert_fail@plt+0xded0>
   209cc:	ldr	r8, [pc, #392]	; 20b5c <__assert_fail@plt+0xe3c0>
   209d0:	b	207f8 <__assert_fail@plt+0xe05c>
   209d4:	mov	r8, #800	; 0x320
   209d8:	b	207f8 <__assert_fail@plt+0xe05c>
   209dc:	ldr	r0, [r5, #80]	; 0x50
   209e0:	mov	r8, #1
   209e4:	cmp	r0, #0
   209e8:	mov	r9, #0
   209ec:	mov	r3, sl
   209f0:	sub	r2, fp, #692	; 0x2b4
   209f4:	asr	r1, r0, #31
   209f8:	blt	20a90 <__assert_fail@plt+0xe2f4>
   209fc:	strd	r8, [sp, #8]
   20a00:	strd	r8, [sp]
   20a04:	bl	22bd8 <__assert_fail@plt+0x1043c>
   20a08:	mov	r3, #12
   20a0c:	ldr	r2, [pc, #332]	; 20b60 <__assert_fail@plt+0xe3c4>
   20a10:	mov	r1, #1
   20a14:	str	r0, [sp]
   20a18:	mov	r0, r6
   20a1c:	bl	12580 <__fprintf_chk@plt>
   20a20:	cmp	r0, #0
   20a24:	bge	20788 <__assert_fail@plt+0xdfec>
   20a28:	ldr	r8, [pc, #308]	; 20b64 <__assert_fail@plt+0xe3c8>
   20a2c:	b	207f8 <__assert_fail@plt+0xe05c>
   20a30:	ldr	r8, [pc, #304]	; 20b68 <__assert_fail@plt+0xe3cc>
   20a34:	b	207f8 <__assert_fail@plt+0xe05c>
   20a38:	mov	r8, #300	; 0x12c
   20a3c:	b	207f8 <__assert_fail@plt+0xe05c>
   20a40:	ldr	r8, [pc, #292]	; 20b6c <__assert_fail@plt+0xe3d0>
   20a44:	b	207f8 <__assert_fail@plt+0xe05c>
   20a48:	ldr	r8, [pc, #288]	; 20b70 <__assert_fail@plt+0xe3d4>
   20a4c:	b	207f8 <__assert_fail@plt+0xe05c>
   20a50:	ldr	r3, [fp, #12]
   20a54:	cmp	r3, #0
   20a58:	beq	20b00 <__assert_fail@plt+0xe364>
   20a5c:	mov	r3, r4
   20a60:	ldr	r2, [pc, #212]	; 20b3c <__assert_fail@plt+0xe3a0>
   20a64:	mov	r1, #1
   20a68:	mov	r0, r6
   20a6c:	bl	12580 <__fprintf_chk@plt>
   20a70:	mvn	r0, r0
   20a74:	lsr	r0, r0, #31
   20a78:	cmp	r0, #0
   20a7c:	mov	r0, r4
   20a80:	bne	208a4 <__assert_fail@plt+0xe108>
   20a84:	bl	12154 <free@plt>
   20a88:	ldr	r8, [pc, #228]	; 20b74 <__assert_fail@plt+0xe3d8>
   20a8c:	b	207f8 <__assert_fail@plt+0xe05c>
   20a90:	rsbs	r0, r0, #0
   20a94:	rsc	r1, r1, #0
   20a98:	strd	r8, [sp, #8]
   20a9c:	strd	r8, [sp]
   20aa0:	bl	22bd8 <__assert_fail@plt+0x1043c>
   20aa4:	mov	r4, r0
   20aa8:	bl	1249c <strlen@plt>
   20aac:	ldr	r3, [pc, #196]	; 20b78 <__assert_fail@plt+0xe3dc>
   20ab0:	ldr	r2, [pc, #196]	; 20b7c <__assert_fail@plt+0xe3e0>
   20ab4:	mov	r1, #1
   20ab8:	stm	sp, {r3, r4}
   20abc:	rsb	r3, r0, #12
   20ac0:	mov	r0, r6
   20ac4:	bic	r3, r3, r3, asr #31
   20ac8:	bl	12580 <__fprintf_chk@plt>
   20acc:	cmp	r0, #0
   20ad0:	bge	20788 <__assert_fail@plt+0xdfec>
   20ad4:	mov	r8, #1000	; 0x3e8
   20ad8:	b	207f8 <__assert_fail@plt+0xe05c>
   20adc:	bl	124d8 <__errno_location@plt>
   20ae0:	ldr	r3, [fp, #-968]	; 0xfffffc38
   20ae4:	ldr	r2, [pc, #80]	; 20b3c <__assert_fail@plt+0xe3a0>
   20ae8:	ldr	r1, [r0]
   20aec:	mov	r0, r4
   20af0:	bl	12388 <error@plt>
   20af4:	b	208a8 <__assert_fail@plt+0xe10c>
   20af8:	ldr	r8, [pc, #128]	; 20b80 <__assert_fail@plt+0xe3e4>
   20afc:	b	207f8 <__assert_fail@plt+0xe05c>
   20b00:	mov	r1, r6
   20b04:	mov	r0, r4
   20b08:	bl	202c8 <__assert_fail@plt+0xdb2c>
   20b0c:	b	20a78 <__assert_fail@plt+0xe2dc>
   20b10:	bl	12244 <__stack_chk_fail@plt>
   20b14:	andeq	fp, r5, r0, ror #24
   20b18:	andeq	ip, r5, r4, lsr #8
   20b1c:	andeq	r8, r4, r4, lsr #6
   20b20:	andeq	r8, r4, r8, lsr r3
   20b24:	andeq	r8, r4, r4, lsl #7
   20b28:	andeq	r8, r4, ip, lsl #6
   20b2c:	ldrdeq	r4, [r4], -r8
   20b30:	andeq	r8, r4, r4, asr r3
   20b34:	andeq	r0, r0, r4, lsl r5
   20b38:	andeq	r8, r4, ip, asr r3
   20b3c:	andeq	r8, r4, r8, asr #11
   20b40:	andeq	r8, r4, r8, lsl r3
   20b44:	andeq	r8, r4, r8, lsr #6
   20b48:	andeq	r0, r0, r2, asr #3
   20b4c:	ldrdeq	r5, [r4], -r8
   20b50:	andeq	r0, r0, sl, lsl #5
   20b54:	andeq	r8, r4, r0, lsr r3
   20b58:	andeq	r0, r0, r6, lsr #4
   20b5c:	andeq	r0, r0, sp, lsl #4
   20b60:	andeq	r8, r4, ip, asr #6
   20b64:	andeq	r0, r0, ip, asr #8
   20b68:	andeq	r0, r0, r3, lsl r1
   20b6c:	andeq	r0, r0, r2, asr r3
   20b70:	andeq	r0, r0, r8, ror r5
   20b74:	andeq	r0, r0, r6, asr #10
   20b78:	andeq	r8, r4, r8, asr #6
   20b7c:	andeq	r8, r4, r0, asr #6
   20b80:	andeq	r0, r0, r1, ror r2
   20b84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20b88:	sub	sp, sp, #8192	; 0x2000
   20b8c:	ldr	r4, [pc, #296]	; 20cbc <__assert_fail@plt+0xe520>
   20b90:	sub	sp, sp, #20
   20b94:	mov	r6, r3
   20b98:	add	r3, sp, #8192	; 0x2000
   20b9c:	add	r3, r3, #12
   20ba0:	cmp	r2, #0
   20ba4:	ldr	r2, [r4]
   20ba8:	str	r2, [r3]
   20bac:	add	r3, sp, #8192	; 0x2000
   20bb0:	add	r3, r3, #56	; 0x38
   20bb4:	ldr	r5, [r3]
   20bb8:	beq	20ca0 <__assert_fail@plt+0xe504>
   20bbc:	str	r1, [sp]
   20bc0:	mov	r7, r1
   20bc4:	mov	r9, r0
   20bc8:	mvn	r3, #0
   20bcc:	add	r0, sp, #12
   20bd0:	mov	r2, r5
   20bd4:	mov	r1, #8192	; 0x2000
   20bd8:	bl	2d2f4 <__assert_fail@plt+0x1ab58>
   20bdc:	cmp	r0, #8192	; 0x2000
   20be0:	mov	r8, r0
   20be4:	bcs	20c40 <__assert_fail@plt+0xe4a4>
   20be8:	mov	r1, r0
   20bec:	add	r0, sp, #12
   20bf0:	bl	20cc0 <__assert_fail@plt+0xe524>
   20bf4:	add	r3, sp, #12
   20bf8:	mov	ip, #0
   20bfc:	mov	r2, r6
   20c00:	mov	r1, r0
   20c04:	mov	r0, r9
   20c08:	strb	ip, [r3, r1]
   20c0c:	mov	r1, #1
   20c10:	bl	12580 <__fprintf_chk@plt>
   20c14:	mov	r5, r0
   20c18:	add	r3, sp, #8192	; 0x2000
   20c1c:	add	r3, r3, #12
   20c20:	ldr	r2, [r3]
   20c24:	ldr	r3, [r4]
   20c28:	mov	r0, r5
   20c2c:	cmp	r2, r3
   20c30:	bne	20cb8 <__assert_fail@plt+0xe51c>
   20c34:	add	sp, sp, #8192	; 0x2000
   20c38:	add	sp, sp, #20
   20c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20c40:	add	fp, r0, #1
   20c44:	mov	r0, fp
   20c48:	bl	2df04 <__assert_fail@plt+0x1b768>
   20c4c:	mov	r2, r5
   20c50:	mov	r1, fp
   20c54:	mvn	r3, #0
   20c58:	str	r7, [sp]
   20c5c:	mov	sl, r0
   20c60:	bl	2d2f4 <__assert_fail@plt+0x1ab58>
   20c64:	mov	r1, r8
   20c68:	mov	r0, sl
   20c6c:	bl	20cc0 <__assert_fail@plt+0xe524>
   20c70:	mov	lr, #0
   20c74:	mov	r2, r6
   20c78:	mov	r3, sl
   20c7c:	mov	r1, #1
   20c80:	mov	ip, r0
   20c84:	mov	r0, r9
   20c88:	strb	lr, [sl, ip]
   20c8c:	bl	12580 <__fprintf_chk@plt>
   20c90:	mov	r5, r0
   20c94:	mov	r0, sl
   20c98:	bl	12154 <free@plt>
   20c9c:	b	20c18 <__assert_fail@plt+0xe47c>
   20ca0:	mov	r3, r5
   20ca4:	mov	r2, r6
   20ca8:	mov	r1, #1
   20cac:	bl	12580 <__fprintf_chk@plt>
   20cb0:	mov	r5, r0
   20cb4:	b	20c18 <__assert_fail@plt+0xe47c>
   20cb8:	bl	12244 <__stack_chk_fail@plt>
   20cbc:	andeq	fp, r5, r0, ror #24
   20cc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cc4:	sub	sp, sp, #20
   20cc8:	ldr	fp, [pc, #452]	; 20e94 <__assert_fail@plt+0xe6f8>
   20ccc:	mov	r9, r0
   20cd0:	mov	r6, r1
   20cd4:	ldr	r3, [fp]
   20cd8:	add	r8, r0, r1
   20cdc:	str	r3, [sp, #12]
   20ce0:	bl	12334 <__ctype_get_mb_cur_max@plt>
   20ce4:	cmp	r0, #1
   20ce8:	bls	20e48 <__assert_fail@plt+0xe6ac>
   20cec:	cmp	r9, r8
   20cf0:	bcs	20e88 <__assert_fail@plt+0xe6ec>
   20cf4:	mov	r6, r9
   20cf8:	mov	r4, r9
   20cfc:	mov	sl, #63	; 0x3f
   20d00:	b	20d2c <__assert_fail@plt+0xe590>
   20d04:	cmp	r3, #37	; 0x25
   20d08:	bcs	20d18 <__assert_fail@plt+0xe57c>
   20d0c:	sub	r2, r3, #32
   20d10:	cmp	r2, #3
   20d14:	bhi	20d58 <__assert_fail@plt+0xe5bc>
   20d18:	strb	r3, [r6]
   20d1c:	add	r4, r4, #1
   20d20:	mov	r6, r7
   20d24:	cmp	r4, r8
   20d28:	bcs	20e10 <__assert_fail@plt+0xe674>
   20d2c:	ldrb	r3, [r4]
   20d30:	add	r7, r6, #1
   20d34:	cmp	r3, #63	; 0x3f
   20d38:	bls	20d04 <__assert_fail@plt+0xe568>
   20d3c:	cmp	r3, #65	; 0x41
   20d40:	bcc	20d58 <__assert_fail@plt+0xe5bc>
   20d44:	cmp	r3, #95	; 0x5f
   20d48:	bls	20d18 <__assert_fail@plt+0xe57c>
   20d4c:	sub	r2, r3, #97	; 0x61
   20d50:	cmp	r2, #29
   20d54:	bls	20d18 <__assert_fail@plt+0xe57c>
   20d58:	mov	r3, #0
   20d5c:	str	r3, [sp, #4]
   20d60:	str	r3, [sp, #8]
   20d64:	b	20d98 <__assert_fail@plt+0xe5fc>
   20d68:	bl	12130 <wcwidth@plt>
   20d6c:	cmp	r0, #0
   20d70:	addlt	r5, r4, r5
   20d74:	bge	20df0 <__assert_fail@plt+0xe654>
   20d78:	strb	sl, [r6]
   20d7c:	mov	r4, r5
   20d80:	mov	r6, r7
   20d84:	add	r0, sp, #4
   20d88:	bl	121e4 <mbsinit@plt>
   20d8c:	cmp	r0, #0
   20d90:	bne	20d24 <__assert_fail@plt+0xe588>
   20d94:	add	r7, r6, #1
   20d98:	add	r3, sp, #4
   20d9c:	sub	r2, r8, r4
   20da0:	mov	r1, r4
   20da4:	mov	r0, sp
   20da8:	bl	31be8 <fts_children@@Base+0x14c>
   20dac:	cmn	r0, #1
   20db0:	mov	r5, r0
   20db4:	beq	20e2c <__assert_fail@plt+0xe690>
   20db8:	cmn	r0, #2
   20dbc:	beq	20e3c <__assert_fail@plt+0xe6a0>
   20dc0:	cmp	r0, #0
   20dc4:	ldr	r0, [sp]
   20dc8:	bne	20d68 <__assert_fail@plt+0xe5cc>
   20dcc:	bl	12130 <wcwidth@plt>
   20dd0:	add	r5, r4, #1
   20dd4:	cmp	r0, #0
   20dd8:	blt	20d78 <__assert_fail@plt+0xe5dc>
   20ddc:	ldrb	r3, [r4]
   20de0:	mov	r4, r5
   20de4:	strb	r3, [r6]
   20de8:	mov	r6, r7
   20dec:	b	20d84 <__assert_fail@plt+0xe5e8>
   20df0:	sub	r3, r6, #1
   20df4:	add	r1, r4, r5
   20df8:	ldrb	r2, [r4], #1
   20dfc:	cmp	r1, r4
   20e00:	strb	r2, [r3, #1]!
   20e04:	bne	20df8 <__assert_fail@plt+0xe65c>
   20e08:	add	r6, r6, r5
   20e0c:	b	20d84 <__assert_fail@plt+0xe5e8>
   20e10:	sub	r0, r6, r9
   20e14:	ldr	r2, [sp, #12]
   20e18:	ldr	r3, [fp]
   20e1c:	cmp	r2, r3
   20e20:	bne	20e90 <__assert_fail@plt+0xe6f4>
   20e24:	add	sp, sp, #20
   20e28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e2c:	add	r4, r4, #1
   20e30:	strb	sl, [r6]
   20e34:	mov	r6, r7
   20e38:	b	20d24 <__assert_fail@plt+0xe588>
   20e3c:	strb	sl, [r6]
   20e40:	mov	r4, r8
   20e44:	b	20e34 <__assert_fail@plt+0xe698>
   20e48:	cmp	r9, r8
   20e4c:	bcs	20e80 <__assert_fail@plt+0xe6e4>
   20e50:	bl	12460 <__ctype_b_loc@plt>
   20e54:	sub	r9, r9, #1
   20e58:	sub	r8, r8, #1
   20e5c:	mov	r1, #63	; 0x3f
   20e60:	ldrb	r3, [r9, #1]!
   20e64:	ldr	r2, [r0]
   20e68:	lsl	r3, r3, #1
   20e6c:	ldrh	r3, [r2, r3]
   20e70:	tst	r3, #16384	; 0x4000
   20e74:	strbeq	r1, [r9]
   20e78:	cmp	r8, r9
   20e7c:	bne	20e60 <__assert_fail@plt+0xe6c4>
   20e80:	mov	r0, r6
   20e84:	b	20e14 <__assert_fail@plt+0xe678>
   20e88:	mov	r0, #0
   20e8c:	b	20e14 <__assert_fail@plt+0xe678>
   20e90:	bl	12244 <__stack_chk_fail@plt>
   20e94:	andeq	fp, r5, r0, ror #24
   20e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e9c:	mov	r9, #0
   20ea0:	ldr	r5, [pc, #276]	; 20fbc <__assert_fail@plt+0xe820>
   20ea4:	sub	sp, sp, #12
   20ea8:	mov	r8, r0
   20eac:	mov	sl, r5
   20eb0:	mov	r6, r5
   20eb4:	mov	r4, r9
   20eb8:	ldr	r7, [r6]
   20ebc:	mov	r1, r8
   20ec0:	mov	r0, r7
   20ec4:	bl	120dc <strcmp@plt>
   20ec8:	cmp	r0, #0
   20ecc:	beq	20fa8 <__assert_fail@plt+0xe80c>
   20ed0:	mov	r0, r7
   20ed4:	bl	2d888 <__assert_fail@plt+0x1b0ec>
   20ed8:	bl	1249c <strlen@plt>
   20edc:	add	r4, r4, #1
   20ee0:	cmp	r4, #13
   20ee4:	add	r6, r6, #12
   20ee8:	add	r0, r0, #2
   20eec:	add	r9, r9, r0
   20ef0:	bne	20eb8 <__assert_fail@plt+0xe71c>
   20ef4:	add	r0, r9, #1
   20ef8:	bl	2df04 <__assert_fail@plt+0x1b768>
   20efc:	mov	r4, #0
   20f00:	ldr	sl, [pc, #184]	; 20fc0 <__assert_fail@plt+0xe824>
   20f04:	ldr	r9, [pc, #184]	; 20fc4 <__assert_fail@plt+0xe828>
   20f08:	mov	fp, r0
   20f0c:	mov	r6, r0
   20f10:	b	20f34 <__assert_fail@plt+0xe798>
   20f14:	bl	2d888 <__assert_fail@plt+0x1b0ec>
   20f18:	mov	r1, r9
   20f1c:	mov	r2, r0
   20f20:	mov	r0, r6
   20f24:	bl	12658 <sprintf@plt>
   20f28:	add	r6, r6, r0
   20f2c:	add	r4, r4, #1
   20f30:	add	r5, r5, #12
   20f34:	cmp	r4, #0
   20f38:	ldr	r0, [r5]
   20f3c:	beq	20f14 <__assert_fail@plt+0xe778>
   20f40:	ldrh	r2, [sl]
   20f44:	ldrb	r3, [sl, #2]
   20f48:	mov	r7, r6
   20f4c:	strh	r2, [r6]
   20f50:	strb	r3, [r7, #2]!
   20f54:	bl	2d888 <__assert_fail@plt+0x1b0ec>
   20f58:	mov	r1, r9
   20f5c:	mov	r2, r0
   20f60:	mov	r0, r7
   20f64:	bl	12658 <sprintf@plt>
   20f68:	cmp	r4, #12
   20f6c:	add	r6, r7, r0
   20f70:	bne	20f2c <__assert_fail@plt+0xe790>
   20f74:	mov	r2, #5
   20f78:	ldr	r1, [pc, #72]	; 20fc8 <__assert_fail@plt+0xe82c>
   20f7c:	mov	r0, #0
   20f80:	bl	1222c <dcgettext@plt>
   20f84:	mov	r4, r0
   20f88:	mov	r0, r8
   20f8c:	bl	2d888 <__assert_fail@plt+0x1b0ec>
   20f90:	mov	r2, r4
   20f94:	str	fp, [sp]
   20f98:	mov	r1, #0
   20f9c:	mov	r3, r0
   20fa0:	mov	r0, #1
   20fa4:	bl	12388 <error@plt>
   20fa8:	add	r4, r4, r4, lsl #1
   20fac:	add	r4, sl, r4, lsl #2
   20fb0:	ldr	r0, [r4, #8]
   20fb4:	add	sp, sp, #12
   20fb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20fbc:	andeq	ip, r5, r4, asr #8
   20fc0:	ldrdeq	r5, [r4], -r8
   20fc4:	andeq	r8, r4, r8, asr #11
   20fc8:	andeq	r8, r4, ip, lsl #7
   20fcc:	cmp	r0, #12
   20fd0:	addls	r0, r0, r0, lsl #1
   20fd4:	ldrls	r3, [pc, #8]	; 20fe4 <__assert_fail@plt+0xe848>
   20fd8:	ldrls	r0, [r3, r0, lsl #2]
   20fdc:	movhi	r0, #0
   20fe0:	bx	lr
   20fe4:	andeq	ip, r5, r4, asr #8
   20fe8:	cmp	r0, #12
   20fec:	addls	r0, r0, r0, lsl #1
   20ff0:	ldrls	r3, [pc, #12]	; 21004 <__assert_fail@plt+0xe868>
   20ff4:	addls	r0, r3, r0, lsl #2
   20ff8:	ldrls	r0, [r0, #8]
   20ffc:	mvnhi	r0, #0
   21000:	bx	lr
   21004:	andeq	ip, r5, r4, asr #8
   21008:	cmp	r0, #12
   2100c:	addls	r0, r0, r0, lsl #1
   21010:	ldrls	r3, [pc, #12]	; 21024 <__assert_fail@plt+0xe888>
   21014:	addls	r0, r3, r0, lsl #2
   21018:	ldrls	r0, [r0, #4]
   2101c:	movhi	r0, #0
   21020:	bx	lr
   21024:	andeq	ip, r5, r4, asr #8
   21028:	cmp	r0, #12
   2102c:	bhi	21088 <__assert_fail@plt+0xe8ec>
   21030:	ldr	r3, [pc, #88]	; 21090 <__assert_fail@plt+0xe8f4>
   21034:	add	r2, r0, r0, lsl #1
   21038:	cmp	r0, #0
   2103c:	add	r2, r3, r2, lsl #2
   21040:	push	{lr}		; (str lr, [sp, #-4]!)
   21044:	ldr	lr, [r2, #8]
   21048:	beq	21078 <__assert_fail@plt+0xe8dc>
   2104c:	mov	r2, #0
   21050:	ldr	ip, [r3, #4]
   21054:	tst	r1, ip
   21058:	beq	21068 <__assert_fail@plt+0xe8cc>
   2105c:	ldr	ip, [r3, #8]
   21060:	cmp	ip, lr
   21064:	beq	21080 <__assert_fail@plt+0xe8e4>
   21068:	add	r2, r2, #1
   2106c:	cmp	r0, r2
   21070:	add	r3, r3, #12
   21074:	bne	21050 <__assert_fail@plt+0xe8b4>
   21078:	mvn	r0, #0
   2107c:	pop	{pc}		; (ldr pc, [sp], #4)
   21080:	mov	r0, r2
   21084:	pop	{pc}		; (ldr pc, [sp], #4)
   21088:	mvn	r0, #0
   2108c:	bx	lr
   21090:	andeq	ip, r5, r4, asr #8
   21094:	push	{r4, r5, r6, r7, r8, r9, lr}
   21098:	sub	sp, sp, #20
   2109c:	ldr	r6, [pc, #272]	; 211b4 <__assert_fail@plt+0xea18>
   210a0:	mov	r4, r0
   210a4:	mov	r8, r1
   210a8:	ldr	r3, [r6]
   210ac:	mov	r7, #0
   210b0:	str	r3, [sp, #12]
   210b4:	bl	124d8 <__errno_location@plt>
   210b8:	mov	r2, #10
   210bc:	add	r1, sp, #8
   210c0:	str	r7, [r0]
   210c4:	mov	r5, r0
   210c8:	mov	r0, r4
   210cc:	bl	120e8 <strtol@plt>
   210d0:	sub	r3, r0, #-2147483647	; 0x80000001
   210d4:	cmn	r3, #3
   210d8:	bls	210f0 <__assert_fail@plt+0xe954>
   210dc:	ldr	r1, [r5]
   210e0:	ldr	r2, [pc, #208]	; 211b8 <__assert_fail@plt+0xea1c>
   210e4:	mov	r3, r4
   210e8:	mov	r0, #1
   210ec:	bl	12388 <error@plt>
   210f0:	ldr	r3, [sp, #8]
   210f4:	ldrb	r9, [r3]
   210f8:	cmp	r9, #0
   210fc:	bne	21120 <__assert_fail@plt+0xe984>
   21100:	cmp	r4, r3
   21104:	beq	21174 <__assert_fail@plt+0xe9d8>
   21108:	ldr	r2, [sp, #12]
   2110c:	ldr	r3, [r6]
   21110:	cmp	r2, r3
   21114:	bne	211b0 <__assert_fail@plt+0xea14>
   21118:	add	sp, sp, #20
   2111c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21120:	mov	r2, #5
   21124:	ldr	r1, [pc, #144]	; 211bc <__assert_fail@plt+0xea20>
   21128:	mov	r0, r7
   2112c:	ldr	r5, [r5]
   21130:	bl	1222c <dcgettext@plt>
   21134:	ldr	r2, [sp, #8]
   21138:	mov	r1, r8
   2113c:	mov	r6, r0
   21140:	mov	r0, r7
   21144:	bl	2d52c <__assert_fail@plt+0x1ad90>
   21148:	mov	r2, r4
   2114c:	mov	r1, r8
   21150:	mov	r7, r0
   21154:	mov	r0, #1
   21158:	bl	2d52c <__assert_fail@plt+0x1ad90>
   2115c:	mov	r3, r7
   21160:	mov	r2, r6
   21164:	mov	r1, r5
   21168:	str	r0, [sp]
   2116c:	mov	r0, #1
   21170:	bl	12388 <error@plt>
   21174:	mov	r2, #5
   21178:	ldr	r1, [pc, #64]	; 211c0 <__assert_fail@plt+0xea24>
   2117c:	mov	r0, r9
   21180:	ldr	r5, [r5]
   21184:	bl	1222c <dcgettext@plt>
   21188:	mov	r2, r4
   2118c:	mov	r1, r8
   21190:	mov	r6, r0
   21194:	mov	r0, r9
   21198:	bl	2d52c <__assert_fail@plt+0x1ad90>
   2119c:	mov	r2, r6
   211a0:	mov	r1, r5
   211a4:	mov	r3, r0
   211a8:	mov	r0, #1
   211ac:	b	210ec <__assert_fail@plt+0xe950>
   211b0:	bl	12244 <__stack_chk_fail@plt>
   211b4:	andeq	fp, r5, r0, ror #24
   211b8:	andeq	r8, r4, r8, asr #11
   211bc:	andeq	r8, r4, r4, asr #8
   211c0:	andeq	r8, r4, r0, ror #8
   211c4:	push	{r4, r5, r6, lr}
   211c8:	cmp	r2, #0
   211cc:	ldr	r5, [sp, #16]
   211d0:	beq	21220 <__assert_fail@plt+0xea84>
   211d4:	mov	r2, #0
   211d8:	str	r2, [r3]
   211dc:	str	r2, [r5]
   211e0:	ldr	r4, [r3]
   211e4:	ldrb	r3, [r1]
   211e8:	add	r4, r0, r4
   211ec:	cmp	r3, #0
   211f0:	bne	21208 <__assert_fail@plt+0xea6c>
   211f4:	mov	r0, r4
   211f8:	bl	1249c <strlen@plt>
   211fc:	str	r0, [r5]
   21200:	mov	r0, #1
   21204:	pop	{r4, r5, r6, pc}
   21208:	mov	r0, r4
   2120c:	bl	126d0 <strpbrk@plt>
   21210:	cmp	r0, #0
   21214:	subne	r0, r0, r4
   21218:	bne	211fc <__assert_fail@plt+0xea60>
   2121c:	b	211f4 <__assert_fail@plt+0xea58>
   21220:	ldr	r2, [r5]
   21224:	ldr	r4, [r3]
   21228:	add	r4, r4, r2
   2122c:	str	r4, [r3]
   21230:	ldrb	r2, [r0, r4]
   21234:	cmp	r2, #0
   21238:	beq	21258 <__assert_fail@plt+0xeabc>
   2123c:	add	r4, r4, #1
   21240:	str	r4, [r3]
   21244:	ldrb	r3, [r1]
   21248:	add	r4, r0, r4
   2124c:	cmp	r3, #0
   21250:	beq	211f4 <__assert_fail@plt+0xea58>
   21254:	b	21208 <__assert_fail@plt+0xea6c>
   21258:	mov	r0, r2
   2125c:	pop	{r4, r5, r6, pc}
   21260:	push	{r4, r5, lr}
   21264:	mov	r2, #5
   21268:	sub	sp, sp, #20
   2126c:	mov	r4, r0
   21270:	mov	r5, r1
   21274:	mov	r0, #0
   21278:	ldr	r1, [pc, #56]	; 212b8 <__assert_fail@plt+0xeb1c>
   2127c:	bl	1222c <dcgettext@plt>
   21280:	ldr	r1, [pc, #52]	; 212bc <__assert_fail@plt+0xeb20>
   21284:	ldr	r2, [pc, #52]	; 212c0 <__assert_fail@plt+0xeb24>
   21288:	ldr	r3, [pc, #52]	; 212c4 <__assert_fail@plt+0xeb28>
   2128c:	str	r1, [sp, #12]
   21290:	str	r2, [sp, #8]
   21294:	str	r3, [sp, #4]
   21298:	str	r5, [sp]
   2129c:	ldr	r3, [pc, #36]	; 212c8 <__assert_fail@plt+0xeb2c>
   212a0:	mov	r1, #1
   212a4:	mov	r2, r0
   212a8:	mov	r0, r4
   212ac:	bl	12580 <__fprintf_chk@plt>
   212b0:	add	sp, sp, #20
   212b4:	pop	{r4, r5, pc}
   212b8:	andeq	r8, r4, r8, ror r4
   212bc:	andeq	r8, r4, r0, ror r5
   212c0:	andeq	r8, r4, r8, lsl #11
   212c4:	andeq	r8, r4, r4, asr #5
   212c8:	andeq	r8, r4, r8, asr #10
   212cc:	push	{lr}		; (str lr, [sp, #-4]!)
   212d0:	sub	sp, sp, #12
   212d4:	ldr	r2, [pc, #24]	; 212f4 <__assert_fail@plt+0xeb58>
   212d8:	mov	r3, #0
   212dc:	str	r2, [sp, #4]
   212e0:	str	r3, [sp]
   212e4:	mov	r2, r3
   212e8:	bl	212f8 <__assert_fail@plt+0xeb5c>
   212ec:	add	sp, sp, #12
   212f0:	pop	{pc}		; (ldr pc, [sp], #4)
   212f4:	strdeq	r2, [r1], -r4
   212f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   212fc:	sub	sp, sp, #1040	; 0x410
   21300:	sub	sp, sp, #4
   21304:	ldr	ip, [pc, #432]	; 214bc <__assert_fail@plt+0xed20>
   21308:	ldr	r6, [sp, #1080]	; 0x438
   2130c:	ldr	lr, [pc, #428]	; 214c0 <__assert_fail@plt+0xed24>
   21310:	cmp	r6, #0
   21314:	ldr	ip, [ip]
   21318:	moveq	r6, lr
   2131c:	subs	r4, r3, #0
   21320:	addeq	r7, sp, #12
   21324:	movne	r7, r2
   21328:	mov	r8, r0
   2132c:	mov	r9, r1
   21330:	str	ip, [sp, #1036]	; 0x40c
   21334:	ldr	sl, [sp, #1084]	; 0x43c
   21338:	moveq	r4, #1024	; 0x400
   2133c:	mov	r5, r7
   21340:	b	2138c <__assert_fail@plt+0xebf0>
   21344:	cmp	r4, fp
   21348:	bhi	21438 <__assert_fail@plt+0xec9c>
   2134c:	cmp	r7, r5
   21350:	beq	21360 <__assert_fail@plt+0xebc4>
   21354:	mov	r0, r5
   21358:	ldr	r3, [r6, #8]
   2135c:	blx	r3
   21360:	cmp	r4, #1073741824	; 0x40000000
   21364:	lslls	r4, r4, #1
   21368:	bls	21378 <__assert_fail@plt+0xebdc>
   2136c:	cmp	r4, #0
   21370:	blt	214a4 <__assert_fail@plt+0xed08>
   21374:	mov	r4, #-2147483648	; 0x80000000
   21378:	ldr	r3, [r6]
   2137c:	mov	r0, r4
   21380:	blx	r3
   21384:	subs	r5, r0, #0
   21388:	beq	213f0 <__assert_fail@plt+0xec54>
   2138c:	mov	r3, r4
   21390:	mov	r2, r5
   21394:	mov	r1, r9
   21398:	mov	r0, r8
   2139c:	blx	sl
   213a0:	subs	fp, r0, #0
   213a4:	bge	21344 <__assert_fail@plt+0xeba8>
   213a8:	bl	124d8 <__errno_location@plt>
   213ac:	ldr	r1, [r0]
   213b0:	cmp	r1, #34	; 0x22
   213b4:	beq	21344 <__assert_fail@plt+0xeba8>
   213b8:	cmp	r7, r5
   213bc:	str	r1, [sp, #4]
   213c0:	str	r0, [sp]
   213c4:	moveq	r5, #0
   213c8:	beq	21414 <__assert_fail@plt+0xec78>
   213cc:	mov	r0, r5
   213d0:	ldr	r2, [r6, #8]
   213d4:	blx	r2
   213d8:	ldr	r3, [sp]
   213dc:	ldr	r1, [sp, #4]
   213e0:	mov	r5, #0
   213e4:	str	r1, [r3]
   213e8:	b	21414 <__assert_fail@plt+0xec78>
   213ec:	mov	r4, r8
   213f0:	ldr	r3, [r6, #12]
   213f4:	cmp	r3, #0
   213f8:	beq	21404 <__assert_fail@plt+0xec68>
   213fc:	mov	r0, r4
   21400:	blx	r3
   21404:	bl	124d8 <__errno_location@plt>
   21408:	mov	r5, #0
   2140c:	mov	r3, #12
   21410:	str	r3, [r0]
   21414:	ldr	r3, [pc, #160]	; 214bc <__assert_fail@plt+0xed20>
   21418:	ldr	r2, [sp, #1036]	; 0x40c
   2141c:	mov	r0, r5
   21420:	ldr	r3, [r3]
   21424:	cmp	r2, r3
   21428:	bne	214b8 <__assert_fail@plt+0xed1c>
   2142c:	add	sp, sp, #1040	; 0x410
   21430:	add	sp, sp, #4
   21434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21438:	add	r9, sp, #12
   2143c:	mov	r3, #0
   21440:	cmp	r5, r9
   21444:	strb	r3, [r5, fp]
   21448:	add	r8, fp, #1
   2144c:	beq	21480 <__assert_fail@plt+0xece4>
   21450:	cmp	r7, r5
   21454:	cmpne	r4, r8
   21458:	bls	21414 <__assert_fail@plt+0xec78>
   2145c:	ldr	r3, [r6, #4]
   21460:	cmp	r3, #0
   21464:	beq	21414 <__assert_fail@plt+0xec78>
   21468:	mov	r0, r5
   2146c:	mov	r1, r8
   21470:	blx	r3
   21474:	cmp	r0, #0
   21478:	movne	r5, r0
   2147c:	b	21414 <__assert_fail@plt+0xec78>
   21480:	ldr	r3, [r6]
   21484:	mov	r0, r8
   21488:	blx	r3
   2148c:	subs	r5, r0, #0
   21490:	beq	213ec <__assert_fail@plt+0xec50>
   21494:	mov	r2, r8
   21498:	mov	r1, r9
   2149c:	bl	121a8 <memcpy@plt>
   214a0:	b	21414 <__assert_fail@plt+0xec78>
   214a4:	bl	124d8 <__errno_location@plt>
   214a8:	mov	r3, #36	; 0x24
   214ac:	mov	r5, #0
   214b0:	str	r3, [r0]
   214b4:	b	21414 <__assert_fail@plt+0xec78>
   214b8:	bl	12244 <__stack_chk_fail@plt>
   214bc:	andeq	fp, r5, r0, ror #24
   214c0:	andeq	sl, r4, r0, lsr #22
   214c4:	push	{r4, r5, r6, lr}
   214c8:	mov	r2, #0
   214cc:	mov	r4, r1
   214d0:	mov	r1, #1
   214d4:	mov	r5, r0
   214d8:	bl	2f650 <__assert_fail@plt+0x1ceb4>
   214dc:	cmp	r0, #0
   214e0:	blt	21520 <__assert_fail@plt+0xed84>
   214e4:	cmp	r4, #0
   214e8:	orrne	r2, r0, #1
   214ec:	biceq	r2, r0, #1
   214f0:	cmp	r2, r0
   214f4:	beq	21518 <__assert_fail@plt+0xed7c>
   214f8:	mov	r0, r5
   214fc:	mov	r1, #2
   21500:	bl	2f650 <__assert_fail@plt+0x1ceb4>
   21504:	cmn	r0, #1
   21508:	movne	r0, #0
   2150c:	moveq	r0, #1
   21510:	rsb	r0, r0, #0
   21514:	pop	{r4, r5, r6, pc}
   21518:	mov	r0, #0
   2151c:	pop	{r4, r5, r6, pc}
   21520:	mvn	r0, #0
   21524:	pop	{r4, r5, r6, pc}
   21528:	mov	r2, #0
   2152c:	ldr	r1, [pc]	; 21534 <__assert_fail@plt+0xed98>
   21530:	b	2f650 <__assert_fail@plt+0x1ceb4>
   21534:	andeq	r0, r0, r6, lsl #8
   21538:	ldr	r3, [pc, #4]	; 21544 <__assert_fail@plt+0xeda8>
   2153c:	str	r0, [r3]
   21540:	bx	lr
   21544:	ldrdeq	ip, [r5], -ip	; <UNPREDICTABLE>
   21548:	ldr	r3, [pc, #4]	; 21554 <__assert_fail@plt+0xedb8>
   2154c:	strb	r0, [r3, #4]
   21550:	bx	lr
   21554:	ldrdeq	ip, [r5], -ip	; <UNPREDICTABLE>
   21558:	ldr	r3, [pc, #180]	; 21614 <__assert_fail@plt+0xee78>
   2155c:	push	{r4, r5, r6, lr}
   21560:	sub	sp, sp, #8
   21564:	ldr	r0, [r3]
   21568:	bl	41448 <fts_children@@Base+0xf9ac>
   2156c:	cmp	r0, #0
   21570:	beq	21598 <__assert_fail@plt+0xedfc>
   21574:	bl	124d8 <__errno_location@plt>
   21578:	ldr	r5, [pc, #152]	; 21618 <__assert_fail@plt+0xee7c>
   2157c:	ldrb	r3, [r5, #4]
   21580:	cmp	r3, #0
   21584:	mov	r4, r0
   21588:	beq	215b4 <__assert_fail@plt+0xee18>
   2158c:	ldr	r3, [r0]
   21590:	cmp	r3, #32
   21594:	bne	215b4 <__assert_fail@plt+0xee18>
   21598:	ldr	r3, [pc, #124]	; 2161c <__assert_fail@plt+0xee80>
   2159c:	ldr	r0, [r3]
   215a0:	bl	41448 <fts_children@@Base+0xf9ac>
   215a4:	cmp	r0, #0
   215a8:	bne	215f4 <__assert_fail@plt+0xee58>
   215ac:	add	sp, sp, #8
   215b0:	pop	{r4, r5, r6, pc}
   215b4:	mov	r2, #5
   215b8:	ldr	r1, [pc, #96]	; 21620 <__assert_fail@plt+0xee84>
   215bc:	mov	r0, #0
   215c0:	bl	1222c <dcgettext@plt>
   215c4:	mov	r6, r0
   215c8:	ldr	r0, [r5]
   215cc:	cmp	r0, #0
   215d0:	beq	21600 <__assert_fail@plt+0xee64>
   215d4:	ldr	r4, [r4]
   215d8:	bl	2d6a8 <__assert_fail@plt+0x1af0c>
   215dc:	mov	r1, r4
   215e0:	str	r6, [sp]
   215e4:	ldr	r2, [pc, #56]	; 21624 <__assert_fail@plt+0xee88>
   215e8:	mov	r3, r0
   215ec:	mov	r0, #0
   215f0:	bl	12388 <error@plt>
   215f4:	ldr	r3, [pc, #44]	; 21628 <__assert_fail@plt+0xee8c>
   215f8:	ldr	r0, [r3]
   215fc:	bl	1219c <_exit@plt>
   21600:	mov	r3, r6
   21604:	ldr	r1, [r4]
   21608:	ldr	r2, [pc, #28]	; 2162c <__assert_fail@plt+0xee90>
   2160c:	bl	12388 <error@plt>
   21610:	b	215f4 <__assert_fail@plt+0xee58>
   21614:	andeq	ip, r5, r4, asr #10
   21618:	ldrdeq	ip, [r5], -ip	; <UNPREDICTABLE>
   2161c:	andeq	ip, r5, r8, lsr r5
   21620:			; <UNDEFINED> instruction: 0x000485b8
   21624:	andeq	r8, r4, r4, asr #11
   21628:	andeq	ip, r5, r0, ror #9
   2162c:	andeq	r8, r4, r8, asr #11
   21630:	push	{r4, r5, r6, r7, r8, lr}
   21634:	bl	123a0 <opendir@plt>
   21638:	subs	r4, r0, #0
   2163c:	beq	2164c <__assert_fail@plt+0xeeb0>
   21640:	bl	12694 <dirfd@plt>
   21644:	cmp	r0, #2
   21648:	bls	21654 <__assert_fail@plt+0xeeb8>
   2164c:	mov	r0, r4
   21650:	pop	{r4, r5, r6, r7, r8, pc}
   21654:	mov	r2, #3
   21658:	ldr	r1, [pc, #84]	; 216b4 <__assert_fail@plt+0xef18>
   2165c:	bl	2f650 <__assert_fail@plt+0x1ceb4>
   21660:	mov	r6, r0
   21664:	bl	124d8 <__errno_location@plt>
   21668:	cmp	r6, #0
   2166c:	mov	r5, r0
   21670:	bge	21694 <__assert_fail@plt+0xeef8>
   21674:	ldr	r7, [r0]
   21678:	mov	r8, #0
   2167c:	mov	r0, r4
   21680:	mov	r4, r8
   21684:	bl	12760 <closedir@plt>
   21688:	str	r7, [r5]
   2168c:	mov	r0, r4
   21690:	pop	{r4, r5, r6, r7, r8, pc}
   21694:	mov	r0, r6
   21698:	bl	12670 <fdopendir@plt>
   2169c:	ldr	r7, [r5]
   216a0:	subs	r8, r0, #0
   216a4:	bne	2167c <__assert_fail@plt+0xeee0>
   216a8:	mov	r0, r6
   216ac:	bl	12748 <close@plt>
   216b0:	b	2167c <__assert_fail@plt+0xeee0>
   216b4:	andeq	r0, r0, r6, lsl #8
   216b8:	push	{r4, r5, r6, lr}
   216bc:	mov	r5, r0
   216c0:	bl	217cc <__assert_fail@plt+0xf030>
   216c4:	ldrb	r3, [r0]
   216c8:	cmp	r3, #0
   216cc:	beq	216f4 <__assert_fail@plt+0xef58>
   216d0:	mov	r4, r0
   216d4:	bl	2181c <__assert_fail@plt+0xf080>
   216d8:	ldrb	r3, [r4, r0]
   216dc:	mov	r1, r0
   216e0:	cmp	r3, #47	; 0x2f
   216e4:	addeq	r1, r0, #1
   216e8:	mov	r0, r4
   216ec:	pop	{r4, r5, r6, lr}
   216f0:	b	2e18c <__assert_fail@plt+0x1b9f0>
   216f4:	mov	r0, r5
   216f8:	bl	2181c <__assert_fail@plt+0xf080>
   216fc:	mov	r1, r0
   21700:	mov	r0, r5
   21704:	pop	{r4, r5, r6, lr}
   21708:	b	2e18c <__assert_fail@plt+0x1b9f0>
   2170c:	push	{r4, r5, r6, lr}
   21710:	mov	r4, r0
   21714:	ldrb	ip, [r0]
   21718:	sub	r5, ip, #47	; 0x2f
   2171c:	bl	217cc <__assert_fail@plt+0xf030>
   21720:	clz	r5, r5
   21724:	lsr	r5, r5, #5
   21728:	sub	r0, r0, r4
   2172c:	cmp	r0, r5
   21730:	popls	{r4, r5, r6, pc}
   21734:	add	r3, r4, r0
   21738:	ldrb	r3, [r3, #-1]
   2173c:	cmp	r3, #47	; 0x2f
   21740:	popne	{r4, r5, r6, pc}
   21744:	sub	r0, r0, #2
   21748:	sub	ip, r4, #1
   2174c:	add	r3, r4, r0
   21750:	add	ip, ip, r5
   21754:	rsb	r2, r4, #1
   21758:	cmp	r3, ip
   2175c:	add	r0, r2, r3
   21760:	popeq	{r4, r5, r6, pc}
   21764:	ldrb	r1, [r3], #-1
   21768:	cmp	r1, #47	; 0x2f
   2176c:	beq	21758 <__assert_fail@plt+0xefbc>
   21770:	pop	{r4, r5, r6, pc}
   21774:	push	{r4, r5, r6, lr}
   21778:	mov	r6, r0
   2177c:	bl	2170c <__assert_fail@plt+0xef70>
   21780:	add	r3, r0, #1
   21784:	mov	r4, r0
   21788:	cmp	r0, #0
   2178c:	movne	r0, r3
   21790:	addeq	r0, r3, #1
   21794:	bl	123dc <malloc@plt>
   21798:	subs	r5, r0, #0
   2179c:	beq	217c4 <__assert_fail@plt+0xf028>
   217a0:	mov	r2, r4
   217a4:	mov	r1, r6
   217a8:	bl	121a8 <memcpy@plt>
   217ac:	cmp	r4, #0
   217b0:	moveq	r3, #46	; 0x2e
   217b4:	moveq	r4, #1
   217b8:	strbeq	r3, [r5]
   217bc:	mov	r3, #0
   217c0:	strb	r3, [r5, r4]
   217c4:	mov	r0, r5
   217c8:	pop	{r4, r5, r6, pc}
   217cc:	ldrb	r3, [r0]
   217d0:	cmp	r3, #47	; 0x2f
   217d4:	bne	217e4 <__assert_fail@plt+0xf048>
   217d8:	ldrb	r3, [r0, #1]!
   217dc:	cmp	r3, #47	; 0x2f
   217e0:	beq	217d8 <__assert_fail@plt+0xf03c>
   217e4:	cmp	r3, #0
   217e8:	bxeq	lr
   217ec:	mov	r2, r0
   217f0:	mov	r1, #0
   217f4:	cmp	r3, #47	; 0x2f
   217f8:	moveq	r1, #1
   217fc:	beq	2180c <__assert_fail@plt+0xf070>
   21800:	cmp	r1, #0
   21804:	movne	r0, r2
   21808:	movne	r1, #0
   2180c:	ldrb	r3, [r2, #1]!
   21810:	cmp	r3, #0
   21814:	bne	217f4 <__assert_fail@plt+0xf058>
   21818:	bx	lr
   2181c:	push	{r4, lr}
   21820:	mov	r4, r0
   21824:	bl	1249c <strlen@plt>
   21828:	cmp	r0, #1
   2182c:	popls	{r4, pc}
   21830:	add	r2, r4, r0
   21834:	mov	r3, r0
   21838:	ldrb	r2, [r2, #-1]
   2183c:	cmp	r2, #47	; 0x2f
   21840:	subeq	r3, r0, #2
   21844:	addeq	r3, r4, r3
   21848:	rsbeq	r1, r4, #1
   2184c:	popne	{r4, pc}
   21850:	cmp	r3, r4
   21854:	add	r0, r1, r3
   21858:	popeq	{r4, pc}
   2185c:	ldrb	r2, [r3], #-1
   21860:	cmp	r2, #47	; 0x2f
   21864:	popne	{r4, pc}
   21868:	b	21850 <__assert_fail@plt+0xf0b4>
   2186c:	push	{r4, lr}
   21870:	mov	r4, r0
   21874:	bl	217cc <__assert_fail@plt+0xf030>
   21878:	ldrb	r3, [r0]
   2187c:	cmp	r3, #0
   21880:	movne	r4, r0
   21884:	mov	r0, r4
   21888:	bl	2181c <__assert_fail@plt+0xf080>
   2188c:	mov	r2, #0
   21890:	ldrb	r3, [r4, r0]
   21894:	strb	r2, [r4, r0]
   21898:	subs	r0, r3, r2
   2189c:	movne	r0, #1
   218a0:	pop	{r4, pc}
   218a4:	push	{r1, r2, r3}
   218a8:	push	{r4, lr}
   218ac:	sub	sp, sp, #12
   218b0:	ldr	r4, [pc, #68]	; 218fc <__assert_fail@plt+0xf160>
   218b4:	ldr	r1, [sp, #20]
   218b8:	ldr	r3, [r4]
   218bc:	ands	r2, r1, #64	; 0x40
   218c0:	str	r3, [sp, #4]
   218c4:	ldrne	r2, [sp, #24]
   218c8:	addne	r3, sp, #24
   218cc:	strne	r3, [sp]
   218d0:	bl	123b8 <open64@plt>
   218d4:	bl	2d96c <__assert_fail@plt+0x1b1d0>
   218d8:	ldr	r2, [sp, #4]
   218dc:	ldr	r3, [r4]
   218e0:	cmp	r2, r3
   218e4:	bne	218f8 <__assert_fail@plt+0xf15c>
   218e8:	add	sp, sp, #12
   218ec:	pop	{r4, lr}
   218f0:	add	sp, sp, #12
   218f4:	bx	lr
   218f8:	bl	12244 <__stack_chk_fail@plt>
   218fc:	andeq	fp, r5, r0, ror #24
   21900:	and	r3, r0, #61440	; 0xf000
   21904:	cmp	r3, #32768	; 0x8000
   21908:	moveq	ip, #45	; 0x2d
   2190c:	beq	21958 <__assert_fail@plt+0xf1bc>
   21910:	cmp	r3, #16384	; 0x4000
   21914:	moveq	ip, #100	; 0x64
   21918:	beq	21958 <__assert_fail@plt+0xf1bc>
   2191c:	cmp	r3, #24576	; 0x6000
   21920:	moveq	ip, #98	; 0x62
   21924:	beq	21958 <__assert_fail@plt+0xf1bc>
   21928:	cmp	r3, #8192	; 0x2000
   2192c:	moveq	ip, #99	; 0x63
   21930:	beq	21958 <__assert_fail@plt+0xf1bc>
   21934:	cmp	r3, #40960	; 0xa000
   21938:	moveq	ip, #108	; 0x6c
   2193c:	beq	21958 <__assert_fail@plt+0xf1bc>
   21940:	cmp	r3, #4096	; 0x1000
   21944:	moveq	ip, #112	; 0x70
   21948:	beq	21958 <__assert_fail@plt+0xf1bc>
   2194c:	cmp	r3, #49152	; 0xc000
   21950:	moveq	ip, #115	; 0x73
   21954:	movne	ip, #63	; 0x3f
   21958:	tst	r0, #256	; 0x100
   2195c:	movne	r2, #114	; 0x72
   21960:	moveq	r2, #45	; 0x2d
   21964:	tst	r0, #128	; 0x80
   21968:	movne	r3, #119	; 0x77
   2196c:	moveq	r3, #45	; 0x2d
   21970:	tst	r0, #2048	; 0x800
   21974:	strb	r3, [r1, #2]
   21978:	strb	ip, [r1]
   2197c:	strb	r2, [r1, #1]
   21980:	and	r3, r0, #64	; 0x40
   21984:	beq	21a24 <__assert_fail@plt+0xf288>
   21988:	cmp	r3, #0
   2198c:	movne	ip, #115	; 0x73
   21990:	moveq	ip, #83	; 0x53
   21994:	tst	r0, #32
   21998:	movne	r2, #114	; 0x72
   2199c:	moveq	r2, #45	; 0x2d
   219a0:	tst	r0, #16
   219a4:	movne	r3, #119	; 0x77
   219a8:	moveq	r3, #45	; 0x2d
   219ac:	tst	r0, #1024	; 0x400
   219b0:	strb	r3, [r1, #5]
   219b4:	strb	ip, [r1, #3]
   219b8:	strb	r2, [r1, #4]
   219bc:	and	r3, r0, #8
   219c0:	beq	21a34 <__assert_fail@plt+0xf298>
   219c4:	cmp	r3, #0
   219c8:	movne	ip, #115	; 0x73
   219cc:	moveq	ip, #83	; 0x53
   219d0:	tst	r0, #4
   219d4:	movne	r2, #114	; 0x72
   219d8:	moveq	r2, #45	; 0x2d
   219dc:	tst	r0, #2
   219e0:	movne	r3, #119	; 0x77
   219e4:	moveq	r3, #45	; 0x2d
   219e8:	tst	r0, #512	; 0x200
   219ec:	strb	ip, [r1, #6]
   219f0:	strb	r2, [r1, #7]
   219f4:	strb	r3, [r1, #8]
   219f8:	and	r0, r0, #1
   219fc:	beq	21a44 <__assert_fail@plt+0xf2a8>
   21a00:	cmp	r0, #0
   21a04:	movne	r0, #116	; 0x74
   21a08:	moveq	r0, #84	; 0x54
   21a0c:	mov	r2, #32
   21a10:	mov	r3, #0
   21a14:	strb	r0, [r1, #9]
   21a18:	strb	r2, [r1, #10]
   21a1c:	strb	r3, [r1, #11]
   21a20:	bx	lr
   21a24:	cmp	r3, #0
   21a28:	movne	ip, #120	; 0x78
   21a2c:	moveq	ip, #45	; 0x2d
   21a30:	b	21994 <__assert_fail@plt+0xf1f8>
   21a34:	cmp	r3, #0
   21a38:	movne	ip, #120	; 0x78
   21a3c:	moveq	ip, #45	; 0x2d
   21a40:	b	219d0 <__assert_fail@plt+0xf234>
   21a44:	cmp	r0, #0
   21a48:	movne	r0, #120	; 0x78
   21a4c:	moveq	r0, #45	; 0x2d
   21a50:	b	21a0c <__assert_fail@plt+0xf270>
   21a54:	ldr	r0, [r0, #16]
   21a58:	b	21900 <__assert_fail@plt+0xf164>
   21a5c:	push	{r4, r5, r6, lr}
   21a60:	mov	r5, r1
   21a64:	bl	126ac <fopen64@plt>
   21a68:	subs	r4, r0, #0
   21a6c:	beq	21a7c <__assert_fail@plt+0xf2e0>
   21a70:	bl	12568 <fileno@plt>
   21a74:	cmp	r0, #2
   21a78:	bls	21a84 <__assert_fail@plt+0xf2e8>
   21a7c:	mov	r0, r4
   21a80:	pop	{r4, r5, r6, pc}
   21a84:	bl	2d960 <__assert_fail@plt+0x1b1c4>
   21a88:	subs	r6, r0, #0
   21a8c:	blt	21ad4 <__assert_fail@plt+0xf338>
   21a90:	mov	r0, r4
   21a94:	bl	125b0 <fclose@plt>
   21a98:	cmp	r0, #0
   21a9c:	bne	21ab4 <__assert_fail@plt+0xf318>
   21aa0:	mov	r1, r5
   21aa4:	mov	r0, r6
   21aa8:	bl	1204c <fdopen@plt>
   21aac:	subs	r4, r0, #0
   21ab0:	bne	21a7c <__assert_fail@plt+0xf2e0>
   21ab4:	bl	124d8 <__errno_location@plt>
   21ab8:	mov	r4, #0
   21abc:	mov	r5, r0
   21ac0:	mov	r0, r6
   21ac4:	ldr	r6, [r5]
   21ac8:	bl	12748 <close@plt>
   21acc:	str	r6, [r5]
   21ad0:	b	21a7c <__assert_fail@plt+0xf2e0>
   21ad4:	bl	124d8 <__errno_location@plt>
   21ad8:	mov	r5, r0
   21adc:	mov	r0, r4
   21ae0:	ldr	r6, [r5]
   21ae4:	mov	r4, #0
   21ae8:	bl	125b0 <fclose@plt>
   21aec:	str	r6, [r5]
   21af0:	b	21a7c <__assert_fail@plt+0xf2e0>
   21af4:	andeq	r0, r0, r0
   21af8:	cmp	r0, #10
   21afc:	movcc	r0, #10
   21b00:	push	{r4, r5, r6, r7, r8, lr}
   21b04:	orr	r7, r0, #1
   21b08:	cmn	r7, #1
   21b0c:	beq	21b84 <__assert_fail@plt+0xf3e8>
   21b10:	ldr	r8, [pc, #116]	; 21b8c <__assert_fail@plt+0xf3f0>
   21b14:	umull	r2, r3, r8, r7
   21b18:	cmp	r7, #9
   21b1c:	lsr	r3, r3, #1
   21b20:	add	r3, r3, r3, lsl #1
   21b24:	sub	r3, r7, r3
   21b28:	bls	21b70 <__assert_fail@plt+0xf3d4>
   21b2c:	cmp	r3, #0
   21b30:	beq	21b78 <__assert_fail@plt+0xf3dc>
   21b34:	mov	r6, #16
   21b38:	mov	r5, #9
   21b3c:	mov	r4, #3
   21b40:	b	21b50 <__assert_fail@plt+0xf3b4>
   21b44:	cmp	r1, #0
   21b48:	add	r6, r6, #8
   21b4c:	beq	21b78 <__assert_fail@plt+0xf3dc>
   21b50:	add	r4, r4, #2
   21b54:	mov	r1, r4
   21b58:	mov	r0, r7
   21b5c:	bl	436d4 <fts_children@@Base+0x11c38>
   21b60:	add	r5, r5, r6
   21b64:	cmp	r5, r7
   21b68:	mov	r3, r1
   21b6c:	bcc	21b44 <__assert_fail@plt+0xf3a8>
   21b70:	cmp	r3, #0
   21b74:	bne	21b84 <__assert_fail@plt+0xf3e8>
   21b78:	add	r7, r7, #2
   21b7c:	cmn	r7, #1
   21b80:	bne	21b14 <__assert_fail@plt+0xf378>
   21b84:	mov	r0, r7
   21b88:	pop	{r4, r5, r6, r7, r8, pc}
   21b8c:	bge	feacc640 <stdout@@GLIBC_2.4+0xfea700fc>
   21b90:	push	{r4, lr}
   21b94:	ror	r0, r0, #3
   21b98:	bl	436d4 <fts_children@@Base+0x11c38>
   21b9c:	mov	r0, r1
   21ba0:	pop	{r4, pc}
   21ba4:	sub	r0, r1, r0
   21ba8:	clz	r0, r0
   21bac:	lsr	r0, r0, #5
   21bb0:	bx	lr
   21bb4:	push	{r4, lr}
   21bb8:	mov	r4, r0
   21bbc:	mov	r0, r1
   21bc0:	ldr	r3, [r4, #24]
   21bc4:	ldr	r1, [r4, #8]
   21bc8:	blx	r3
   21bcc:	ldr	r3, [r4, #8]
   21bd0:	cmp	r3, r0
   21bd4:	bls	21be4 <__assert_fail@plt+0xf448>
   21bd8:	ldr	r3, [r4]
   21bdc:	add	r0, r3, r0, lsl #3
   21be0:	pop	{r4, pc}
   21be4:	bl	1273c <abort@plt>
   21be8:	push	{r4, r5, r6, r7, r8, lr}
   21bec:	mov	r8, r2
   21bf0:	mov	r5, r1
   21bf4:	mov	r7, r3
   21bf8:	mov	r6, r0
   21bfc:	bl	21bb4 <__assert_fail@plt+0xf418>
   21c00:	str	r0, [r8]
   21c04:	ldr	r1, [r0]
   21c08:	cmp	r1, #0
   21c0c:	beq	21cf4 <__assert_fail@plt+0xf558>
   21c10:	cmp	r1, r5
   21c14:	mov	r4, r0
   21c18:	beq	21cb8 <__assert_fail@plt+0xf51c>
   21c1c:	ldr	r3, [r6, #28]
   21c20:	mov	r0, r5
   21c24:	blx	r3
   21c28:	cmp	r0, #0
   21c2c:	ldrne	r3, [r4]
   21c30:	bne	21cbc <__assert_fail@plt+0xf520>
   21c34:	ldr	r2, [r4, #4]
   21c38:	cmp	r2, #0
   21c3c:	beq	21cf4 <__assert_fail@plt+0xf558>
   21c40:	ldr	r3, [r2]
   21c44:	cmp	r5, r3
   21c48:	bne	21c6c <__assert_fail@plt+0xf4d0>
   21c4c:	b	21c8c <__assert_fail@plt+0xf4f0>
   21c50:	ldr	r4, [r4, #4]
   21c54:	ldr	r2, [r4, #4]
   21c58:	cmp	r2, #0
   21c5c:	beq	21cf4 <__assert_fail@plt+0xf558>
   21c60:	ldr	r3, [r2]
   21c64:	cmp	r3, r5
   21c68:	beq	21c8c <__assert_fail@plt+0xf4f0>
   21c6c:	mov	r1, r3
   21c70:	mov	r0, r5
   21c74:	ldr	r3, [r6, #28]
   21c78:	blx	r3
   21c7c:	cmp	r0, #0
   21c80:	beq	21c50 <__assert_fail@plt+0xf4b4>
   21c84:	ldr	r2, [r4, #4]
   21c88:	ldr	r3, [r2]
   21c8c:	cmp	r7, #0
   21c90:	beq	21cec <__assert_fail@plt+0xf550>
   21c94:	ldr	r0, [r2, #4]
   21c98:	mov	r1, #0
   21c9c:	str	r0, [r4, #4]
   21ca0:	str	r1, [r2]
   21ca4:	ldr	r1, [r6, #36]	; 0x24
   21ca8:	mov	r0, r3
   21cac:	str	r1, [r2, #4]
   21cb0:	str	r2, [r6, #36]	; 0x24
   21cb4:	pop	{r4, r5, r6, r7, r8, pc}
   21cb8:	mov	r3, r1
   21cbc:	cmp	r7, #0
   21cc0:	beq	21cec <__assert_fail@plt+0xf550>
   21cc4:	ldr	r2, [r4, #4]
   21cc8:	cmp	r2, #0
   21ccc:	movne	ip, #0
   21cd0:	ldmne	r2, {r0, r1}
   21cd4:	streq	r2, [r4]
   21cd8:	stmne	r4, {r0, r1}
   21cdc:	strne	ip, [r2]
   21ce0:	ldrne	r1, [r6, #36]	; 0x24
   21ce4:	strne	r1, [r2, #4]
   21ce8:	strne	r2, [r6, #36]	; 0x24
   21cec:	mov	r0, r3
   21cf0:	pop	{r4, r5, r6, r7, r8, pc}
   21cf4:	mov	r3, #0
   21cf8:	mov	r0, r3
   21cfc:	pop	{r4, r5, r6, r7, r8, pc}
   21d00:	ldr	r2, [pc, #164]	; 21dac <__assert_fail@plt+0xf610>
   21d04:	ldr	r3, [r0]
   21d08:	cmp	r3, r2
   21d0c:	beq	21d94 <__assert_fail@plt+0xf5f8>
   21d10:	vldr	s15, [r3, #8]
   21d14:	vldr	s14, [pc, #128]	; 21d9c <__assert_fail@plt+0xf600>
   21d18:	vcmpe.f32	s15, s14
   21d1c:	vmrs	APSR_nzcv, fpscr
   21d20:	ble	21d88 <__assert_fail@plt+0xf5ec>
   21d24:	vldr	s13, [pc, #116]	; 21da0 <__assert_fail@plt+0xf604>
   21d28:	vcmpe.f32	s15, s13
   21d2c:	vmrs	APSR_nzcv, fpscr
   21d30:	bpl	21d88 <__assert_fail@plt+0xf5ec>
   21d34:	vldr	s13, [pc, #104]	; 21da4 <__assert_fail@plt+0xf608>
   21d38:	vldr	s12, [r3, #12]
   21d3c:	vcmpe.f32	s12, s13
   21d40:	vmrs	APSR_nzcv, fpscr
   21d44:	ble	21d88 <__assert_fail@plt+0xf5ec>
   21d48:	vldr	s13, [r3]
   21d4c:	vcmpe.f32	s13, #0.0
   21d50:	vmrs	APSR_nzcv, fpscr
   21d54:	blt	21d88 <__assert_fail@plt+0xf5ec>
   21d58:	vadd.f32	s14, s13, s14
   21d5c:	vldr	s13, [r3, #4]
   21d60:	vcmpe.f32	s14, s13
   21d64:	vmrs	APSR_nzcv, fpscr
   21d68:	bpl	21d88 <__assert_fail@plt+0xf5ec>
   21d6c:	vldr	s12, [pc, #52]	; 21da8 <__assert_fail@plt+0xf60c>
   21d70:	vcmpe.f32	s13, s12
   21d74:	vmrs	APSR_nzcv, fpscr
   21d78:	bhi	21d88 <__assert_fail@plt+0xf5ec>
   21d7c:	vcmpe.f32	s15, s14
   21d80:	vmrs	APSR_nzcv, fpscr
   21d84:	bgt	21d94 <__assert_fail@plt+0xf5f8>
   21d88:	str	r2, [r0]
   21d8c:	mov	r0, #0
   21d90:	bx	lr
   21d94:	mov	r0, #1
   21d98:	bx	lr
   21d9c:	stclcc	12, cr12, [ip, #820]	; 0x334
   21da0:	svccc	0x00666666
   21da4:	svccc	0x008ccccd
   21da8:	svccc	0x00800000
   21dac:	andeq	r8, r4, ip, asr #11
   21db0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21db4:	ldr	r3, [r1, #4]
   21db8:	ldr	r6, [r1]
   21dbc:	cmp	r6, r3
   21dc0:	bcs	21e88 <__assert_fail@plt+0xf6ec>
   21dc4:	mov	r8, r2
   21dc8:	mov	r5, r0
   21dcc:	mov	r7, r1
   21dd0:	add	r6, r6, #8
   21dd4:	mov	r9, #0
   21dd8:	b	21de8 <__assert_fail@plt+0xf64c>
   21ddc:	cmp	r3, r6
   21de0:	add	r6, r6, #8
   21de4:	bls	21e88 <__assert_fail@plt+0xf6ec>
   21de8:	ldr	sl, [r6, #-8]
   21dec:	cmp	sl, #0
   21df0:	beq	21ddc <__assert_fail@plt+0xf640>
   21df4:	ldr	r4, [r6, #-4]
   21df8:	cmp	r4, #0
   21dfc:	bne	21e1c <__assert_fail@plt+0xf680>
   21e00:	b	21e6c <__assert_fail@plt+0xf6d0>
   21e04:	ldr	r2, [r0, #4]
   21e08:	cmp	r3, #0
   21e0c:	str	r2, [r4, #4]
   21e10:	str	r4, [r0, #4]
   21e14:	mov	r4, r3
   21e18:	beq	21e68 <__assert_fail@plt+0xf6cc>
   21e1c:	ldr	sl, [r4]
   21e20:	mov	r0, r5
   21e24:	mov	r1, sl
   21e28:	bl	21bb4 <__assert_fail@plt+0xf418>
   21e2c:	ldr	r3, [r4, #4]
   21e30:	ldr	r2, [r0]
   21e34:	cmp	r2, #0
   21e38:	bne	21e04 <__assert_fail@plt+0xf668>
   21e3c:	ldr	r1, [r5, #12]
   21e40:	str	sl, [r0]
   21e44:	add	r1, r1, #1
   21e48:	str	r1, [r5, #12]
   21e4c:	str	r2, [r4]
   21e50:	ldr	r2, [r5, #36]	; 0x24
   21e54:	cmp	r3, #0
   21e58:	str	r2, [r4, #4]
   21e5c:	str	r4, [r5, #36]	; 0x24
   21e60:	mov	r4, r3
   21e64:	bne	21e1c <__assert_fail@plt+0xf680>
   21e68:	ldr	sl, [r6, #-8]
   21e6c:	cmp	r8, #0
   21e70:	str	r9, [r6, #-4]
   21e74:	beq	21e90 <__assert_fail@plt+0xf6f4>
   21e78:	ldr	r3, [r7, #4]
   21e7c:	cmp	r3, r6
   21e80:	add	r6, r6, #8
   21e84:	bhi	21de8 <__assert_fail@plt+0xf64c>
   21e88:	mov	r0, #1
   21e8c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21e90:	mov	r1, sl
   21e94:	mov	r0, r5
   21e98:	bl	21bb4 <__assert_fail@plt+0xf418>
   21e9c:	ldr	r3, [r0]
   21ea0:	mov	r4, r0
   21ea4:	cmp	r3, #0
   21ea8:	beq	21ee8 <__assert_fail@plt+0xf74c>
   21eac:	ldr	r0, [r5, #36]	; 0x24
   21eb0:	cmp	r0, #0
   21eb4:	beq	21efc <__assert_fail@plt+0xf760>
   21eb8:	ldr	r3, [r0, #4]
   21ebc:	str	r3, [r5, #36]	; 0x24
   21ec0:	ldr	r3, [r4, #4]
   21ec4:	str	sl, [r0]
   21ec8:	str	r3, [r0, #4]
   21ecc:	str	r0, [r4, #4]
   21ed0:	ldr	r2, [r7, #12]
   21ed4:	str	r9, [r6, #-8]
   21ed8:	sub	r2, r2, #1
   21edc:	ldr	r3, [r7, #4]
   21ee0:	str	r2, [r7, #12]
   21ee4:	b	21ddc <__assert_fail@plt+0xf640>
   21ee8:	ldr	r3, [r5, #12]
   21eec:	str	sl, [r0]
   21ef0:	add	r3, r3, #1
   21ef4:	str	r3, [r5, #12]
   21ef8:	b	21ed0 <__assert_fail@plt+0xf734>
   21efc:	mov	r0, #8
   21f00:	bl	123dc <malloc@plt>
   21f04:	cmp	r0, #0
   21f08:	bne	21ec0 <__assert_fail@plt+0xf724>
   21f0c:	mov	r0, r8
   21f10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21f14:	ldr	r0, [r0, #8]
   21f18:	bx	lr
   21f1c:	ldr	r0, [r0, #12]
   21f20:	bx	lr
   21f24:	ldr	r0, [r0, #16]
   21f28:	bx	lr
   21f2c:	ldm	r0, {r1, r3}
   21f30:	cmp	r1, r3
   21f34:	bcs	21f9c <__assert_fail@plt+0xf800>
   21f38:	sub	ip, r3, #1
   21f3c:	sub	ip, ip, r1
   21f40:	add	r3, r1, #16
   21f44:	bic	ip, ip, #7
   21f48:	add	ip, ip, r3
   21f4c:	add	r1, r1, #8
   21f50:	mov	r0, #0
   21f54:	b	21f64 <__assert_fail@plt+0xf7c8>
   21f58:	add	r1, r1, #8
   21f5c:	cmp	r1, ip
   21f60:	bxeq	lr
   21f64:	ldr	r3, [r1, #-8]
   21f68:	cmp	r3, #0
   21f6c:	beq	21f58 <__assert_fail@plt+0xf7bc>
   21f70:	ldr	r3, [r1, #-4]
   21f74:	mov	r2, #1
   21f78:	cmp	r3, #0
   21f7c:	beq	21f90 <__assert_fail@plt+0xf7f4>
   21f80:	ldr	r3, [r3, #4]
   21f84:	add	r2, r2, #1
   21f88:	cmp	r3, #0
   21f8c:	bne	21f80 <__assert_fail@plt+0xf7e4>
   21f90:	cmp	r0, r2
   21f94:	movcc	r0, r2
   21f98:	b	21f58 <__assert_fail@plt+0xf7bc>
   21f9c:	mov	r0, #0
   21fa0:	bx	lr
   21fa4:	ldm	r0, {r1, r3}
   21fa8:	push	{lr}		; (str lr, [sp, #-4]!)
   21fac:	cmp	r1, r3
   21fb0:	bcs	22040 <__assert_fail@plt+0xf8a4>
   21fb4:	sub	ip, r3, #1
   21fb8:	sub	ip, ip, r1
   21fbc:	add	r3, r1, #16
   21fc0:	bic	ip, ip, #7
   21fc4:	mov	r2, #0
   21fc8:	add	ip, ip, r3
   21fcc:	add	r1, r1, #8
   21fd0:	mov	lr, r2
   21fd4:	b	21fe4 <__assert_fail@plt+0xf848>
   21fd8:	add	r1, r1, #8
   21fdc:	cmp	r1, ip
   21fe0:	beq	22020 <__assert_fail@plt+0xf884>
   21fe4:	ldr	r3, [r1, #-8]
   21fe8:	cmp	r3, #0
   21fec:	beq	21fd8 <__assert_fail@plt+0xf83c>
   21ff0:	ldr	r3, [r1, #-4]
   21ff4:	add	lr, lr, #1
   21ff8:	cmp	r3, #0
   21ffc:	add	r2, r2, #1
   22000:	beq	21fd8 <__assert_fail@plt+0xf83c>
   22004:	ldr	r3, [r3, #4]
   22008:	add	r2, r2, #1
   2200c:	cmp	r3, #0
   22010:	bne	22004 <__assert_fail@plt+0xf868>
   22014:	add	r1, r1, #8
   22018:	cmp	r1, ip
   2201c:	bne	21fe4 <__assert_fail@plt+0xf848>
   22020:	ldr	r3, [r0, #12]
   22024:	cmp	r3, lr
   22028:	ldreq	r0, [r0, #16]
   2202c:	subeq	r0, r0, r2
   22030:	clzeq	r0, r0
   22034:	lsreq	r0, r0, #5
   22038:	movne	r0, #0
   2203c:	pop	{pc}		; (ldr pc, [sp], #4)
   22040:	mov	r2, #0
   22044:	mov	lr, r2
   22048:	b	22020 <__assert_fail@plt+0xf884>
   2204c:	push	{r4, r5, r6, r7, lr}
   22050:	mov	r4, r1
   22054:	ldr	r2, [r0]
   22058:	ldr	r1, [r0, #4]
   2205c:	sub	sp, sp, #12
   22060:	cmp	r2, r1
   22064:	ldr	r3, [r0, #16]
   22068:	ldrd	r6, [r0, #8]
   2206c:	bcs	22150 <__assert_fail@plt+0xf9b4>
   22070:	sub	ip, r1, #1
   22074:	sub	ip, ip, r2
   22078:	bic	ip, ip, #7
   2207c:	add	r1, r2, #16
   22080:	add	ip, ip, r1
   22084:	add	r0, r2, #8
   22088:	mov	r5, #0
   2208c:	b	2209c <__assert_fail@plt+0xf900>
   22090:	add	r0, r0, #8
   22094:	cmp	r0, ip
   22098:	beq	220dc <__assert_fail@plt+0xf940>
   2209c:	ldr	r2, [r0, #-8]
   220a0:	cmp	r2, #0
   220a4:	beq	22090 <__assert_fail@plt+0xf8f4>
   220a8:	ldr	r2, [r0, #-4]
   220ac:	mov	r1, #1
   220b0:	cmp	r2, #0
   220b4:	beq	220c8 <__assert_fail@plt+0xf92c>
   220b8:	ldr	r2, [r2, #4]
   220bc:	add	r1, r1, #1
   220c0:	cmp	r2, #0
   220c4:	bne	220b8 <__assert_fail@plt+0xf91c>
   220c8:	cmp	r5, r1
   220cc:	add	r0, r0, #8
   220d0:	movcc	r5, r1
   220d4:	cmp	r0, ip
   220d8:	bne	2209c <__assert_fail@plt+0xf900>
   220dc:	ldr	r2, [pc, #124]	; 22160 <__assert_fail@plt+0xf9c4>
   220e0:	mov	r1, #1
   220e4:	mov	r0, r4
   220e8:	bl	12580 <__fprintf_chk@plt>
   220ec:	mov	r3, r6
   220f0:	ldr	r2, [pc, #108]	; 22164 <__assert_fail@plt+0xf9c8>
   220f4:	mov	r1, #1
   220f8:	mov	r0, r4
   220fc:	bl	12580 <__fprintf_chk@plt>
   22100:	vmov	s15, r7
   22104:	vldr	d5, [pc, #76]	; 22158 <__assert_fail@plt+0xf9bc>
   22108:	mov	r3, r7
   2210c:	ldr	r2, [pc, #84]	; 22168 <__assert_fail@plt+0xf9cc>
   22110:	vcvt.f64.u32	d6, s15
   22114:	vmov	s15, r6
   22118:	mov	r1, #1
   2211c:	mov	r0, r4
   22120:	vcvt.f64.u32	d7, s15
   22124:	vmul.f64	d6, d6, d5
   22128:	vdiv.f64	d5, d6, d7
   2212c:	vstr	d5, [sp]
   22130:	bl	12580 <__fprintf_chk@plt>
   22134:	mov	r3, r5
   22138:	mov	r0, r4
   2213c:	ldr	r2, [pc, #40]	; 2216c <__assert_fail@plt+0xf9d0>
   22140:	mov	r1, #1
   22144:	add	sp, sp, #12
   22148:	pop	{r4, r5, r6, r7, lr}
   2214c:	b	12580 <__fprintf_chk@plt>
   22150:	mov	r5, #0
   22154:	b	220dc <__assert_fail@plt+0xf940>
   22158:	andeq	r0, r0, r0
   2215c:	subsmi	r0, r9, r0
   22160:	andeq	r8, r4, r0, ror #11
   22164:	strdeq	r8, [r4], -r8	; <UNPREDICTABLE>
   22168:	andeq	r8, r4, r0, lsl r6
   2216c:	andeq	r8, r4, r4, lsr r6
   22170:	push	{r4, r5, r6, lr}
   22174:	mov	r6, r0
   22178:	mov	r5, r1
   2217c:	bl	21bb4 <__assert_fail@plt+0xf418>
   22180:	ldr	r3, [r0]
   22184:	cmp	r3, #0
   22188:	beq	221c4 <__assert_fail@plt+0xfa28>
   2218c:	mov	r4, r0
   22190:	b	22198 <__assert_fail@plt+0xf9fc>
   22194:	ldr	r3, [r4]
   22198:	cmp	r3, r5
   2219c:	mov	r1, r3
   221a0:	mov	r0, r5
   221a4:	beq	221d0 <__assert_fail@plt+0xfa34>
   221a8:	ldr	r3, [r6, #28]
   221ac:	blx	r3
   221b0:	cmp	r0, #0
   221b4:	bne	221cc <__assert_fail@plt+0xfa30>
   221b8:	ldr	r4, [r4, #4]
   221bc:	cmp	r4, #0
   221c0:	bne	22194 <__assert_fail@plt+0xf9f8>
   221c4:	mov	r0, #0
   221c8:	pop	{r4, r5, r6, pc}
   221cc:	ldr	r5, [r4]
   221d0:	mov	r0, r5
   221d4:	pop	{r4, r5, r6, pc}
   221d8:	ldr	r3, [r0, #16]
   221dc:	cmp	r3, #0
   221e0:	beq	22230 <__assert_fail@plt+0xfa94>
   221e4:	ldr	r3, [r0]
   221e8:	ldr	r2, [r0, #4]
   221ec:	cmp	r3, r2
   221f0:	bcs	22228 <__assert_fail@plt+0xfa8c>
   221f4:	ldr	r0, [r3]
   221f8:	cmp	r0, #0
   221fc:	bxne	lr
   22200:	sub	r2, r2, #1
   22204:	sub	r2, r2, r3
   22208:	bic	r2, r2, #7
   2220c:	add	r2, r3, r2
   22210:	b	22220 <__assert_fail@plt+0xfa84>
   22214:	ldr	r0, [r3, #8]!
   22218:	cmp	r0, #0
   2221c:	bxne	lr
   22220:	cmp	r3, r2
   22224:	bne	22214 <__assert_fail@plt+0xfa78>
   22228:	push	{r4, lr}
   2222c:	bl	1273c <abort@plt>
   22230:	mov	r0, r3
   22234:	bx	lr
   22238:	push	{r4, r5, r6, lr}
   2223c:	mov	r5, r0
   22240:	mov	r4, r1
   22244:	bl	21bb4 <__assert_fail@plt+0xf418>
   22248:	mov	r2, r0
   2224c:	mov	r3, r0
   22250:	b	2225c <__assert_fail@plt+0xfac0>
   22254:	cmp	r3, #0
   22258:	beq	22270 <__assert_fail@plt+0xfad4>
   2225c:	ldm	r3, {r1, r3}
   22260:	cmp	r1, r4
   22264:	bne	22254 <__assert_fail@plt+0xfab8>
   22268:	cmp	r3, #0
   2226c:	bne	22298 <__assert_fail@plt+0xfafc>
   22270:	ldr	r3, [r5, #4]
   22274:	b	22284 <__assert_fail@plt+0xfae8>
   22278:	ldr	r0, [r2]
   2227c:	cmp	r0, #0
   22280:	popne	{r4, r5, r6, pc}
   22284:	add	r2, r2, #8
   22288:	cmp	r3, r2
   2228c:	bhi	22278 <__assert_fail@plt+0xfadc>
   22290:	mov	r0, #0
   22294:	pop	{r4, r5, r6, pc}
   22298:	ldr	r0, [r3]
   2229c:	pop	{r4, r5, r6, pc}
   222a0:	push	{r4, r5, lr}
   222a4:	ldm	r0, {r5, lr}
   222a8:	cmp	lr, r5
   222ac:	bls	22330 <__assert_fail@plt+0xfb94>
   222b0:	mov	ip, #0
   222b4:	ldr	r3, [r5]
   222b8:	cmp	r3, #0
   222bc:	bne	222d8 <__assert_fail@plt+0xfb3c>
   222c0:	add	r5, r5, #8
   222c4:	cmp	lr, r5
   222c8:	bhi	222b4 <__assert_fail@plt+0xfb18>
   222cc:	mov	r2, ip
   222d0:	mov	r0, r2
   222d4:	pop	{r4, r5, pc}
   222d8:	cmp	r2, ip
   222dc:	bls	222cc <__assert_fail@plt+0xfb30>
   222e0:	str	r3, [r1, ip, lsl #2]
   222e4:	ldr	r3, [r5, #4]
   222e8:	add	r4, ip, #1
   222ec:	cmp	r3, #0
   222f0:	add	lr, r1, ip, lsl #2
   222f4:	beq	22324 <__assert_fail@plt+0xfb88>
   222f8:	mov	ip, r4
   222fc:	cmp	r2, ip
   22300:	beq	222d0 <__assert_fail@plt+0xfb34>
   22304:	ldr	r4, [r3]
   22308:	add	ip, ip, #1
   2230c:	str	r4, [lr, #4]!
   22310:	ldr	r3, [r3, #4]
   22314:	cmp	r3, #0
   22318:	bne	222fc <__assert_fail@plt+0xfb60>
   2231c:	ldr	lr, [r0, #4]
   22320:	b	222c0 <__assert_fail@plt+0xfb24>
   22324:	ldr	lr, [r0, #4]
   22328:	mov	ip, r4
   2232c:	b	222c0 <__assert_fail@plt+0xfb24>
   22330:	mov	r2, #0
   22334:	b	222d0 <__assert_fail@plt+0xfb34>
   22338:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2233c:	ldr	r3, [r0, #4]
   22340:	ldr	r8, [r0]
   22344:	cmp	r3, r8
   22348:	bls	223b0 <__assert_fail@plt+0xfc14>
   2234c:	mov	r7, r2
   22350:	mov	r6, r1
   22354:	mov	r9, r0
   22358:	mov	r5, #0
   2235c:	ldr	r0, [r8]
   22360:	cmp	r0, #0
   22364:	bne	2237c <__assert_fail@plt+0xfbe0>
   22368:	add	r8, r8, #8
   2236c:	cmp	r3, r8
   22370:	bhi	2235c <__assert_fail@plt+0xfbc0>
   22374:	mov	r0, r5
   22378:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2237c:	mov	r4, r8
   22380:	b	22388 <__assert_fail@plt+0xfbec>
   22384:	ldr	r0, [r4]
   22388:	mov	r1, r7
   2238c:	blx	r6
   22390:	cmp	r0, #0
   22394:	beq	22374 <__assert_fail@plt+0xfbd8>
   22398:	ldr	r4, [r4, #4]
   2239c:	add	r5, r5, #1
   223a0:	cmp	r4, #0
   223a4:	bne	22384 <__assert_fail@plt+0xfbe8>
   223a8:	ldr	r3, [r9, #4]
   223ac:	b	22368 <__assert_fail@plt+0xfbcc>
   223b0:	mov	r5, #0
   223b4:	b	22374 <__assert_fail@plt+0xfbd8>
   223b8:	push	{r4, r5, r6, lr}
   223bc:	mov	r4, r0
   223c0:	ldrb	r0, [r0]
   223c4:	cmp	r0, #0
   223c8:	beq	223f8 <__assert_fail@plt+0xfc5c>
   223cc:	mov	r5, r1
   223d0:	mov	r1, #0
   223d4:	rsb	r1, r1, r1, lsl #5
   223d8:	add	r0, r1, r0
   223dc:	mov	r1, r5
   223e0:	bl	436d4 <fts_children@@Base+0x11c38>
   223e4:	ldrb	r0, [r4, #1]!
   223e8:	cmp	r0, #0
   223ec:	bne	223d4 <__assert_fail@plt+0xfc38>
   223f0:	mov	r0, r1
   223f4:	pop	{r4, r5, r6, pc}
   223f8:	mov	r1, r0
   223fc:	mov	r0, r1
   22400:	pop	{r4, r5, r6, pc}
   22404:	push	{lr}		; (str lr, [sp, #-4]!)
   22408:	mov	ip, r0
   2240c:	ldr	lr, [pc, #16]	; 22424 <__assert_fail@plt+0xfc88>
   22410:	ldm	lr!, {r0, r1, r2, r3}
   22414:	ldr	lr, [lr]
   22418:	stmia	ip!, {r0, r1, r2, r3}
   2241c:	str	lr, [ip]
   22420:	pop	{pc}		; (ldr pc, [sp], #4)
   22424:	andeq	r8, r4, ip, asr #11
   22428:	push	{r4, r5, r6, r7, r8, lr}
   2242c:	sub	sp, sp, #8
   22430:	cmp	r2, #0
   22434:	ldr	ip, [pc, #300]	; 22568 <__assert_fail@plt+0xfdcc>
   22438:	str	r0, [sp, #4]
   2243c:	ldr	r5, [pc, #296]	; 2256c <__assert_fail@plt+0xfdd0>
   22440:	mov	r0, #40	; 0x28
   22444:	movne	r5, r2
   22448:	cmp	r3, #0
   2244c:	movne	r8, r3
   22450:	moveq	r8, ip
   22454:	mov	r6, r1
   22458:	bl	123dc <malloc@plt>
   2245c:	subs	r4, r0, #0
   22460:	beq	2252c <__assert_fail@plt+0xfd90>
   22464:	cmp	r6, #0
   22468:	add	r0, r4, #20
   2246c:	beq	22508 <__assert_fail@plt+0xfd6c>
   22470:	str	r6, [r4, #20]
   22474:	bl	21d00 <__assert_fail@plt+0xf564>
   22478:	cmp	r0, #0
   2247c:	beq	22520 <__assert_fail@plt+0xfd84>
   22480:	ldrb	r3, [r6, #16]
   22484:	cmp	r3, #0
   22488:	vldreq	s13, [r6, #8]
   2248c:	beq	22538 <__assert_fail@plt+0xfd9c>
   22490:	ldr	r0, [sp, #4]
   22494:	bl	21af8 <__assert_fail@plt+0xf35c>
   22498:	lsrs	r3, r0, #30
   2249c:	movne	r7, #1
   224a0:	moveq	r7, #0
   224a4:	tst	r0, #536870912	; 0x20000000
   224a8:	mov	r6, r0
   224ac:	bne	22520 <__assert_fail@plt+0xfd84>
   224b0:	cmp	r7, #0
   224b4:	bne	22520 <__assert_fail@plt+0xfd84>
   224b8:	cmp	r0, #0
   224bc:	str	r0, [r4, #8]
   224c0:	beq	22520 <__assert_fail@plt+0xfd84>
   224c4:	mov	r1, #8
   224c8:	bl	12064 <calloc@plt>
   224cc:	cmp	r0, #0
   224d0:	str	r0, [r4]
   224d4:	beq	22520 <__assert_fail@plt+0xfd84>
   224d8:	ldr	r3, [sp, #32]
   224dc:	add	r0, r0, r6, lsl #3
   224e0:	str	r0, [r4, #4]
   224e4:	str	r7, [r4, #12]
   224e8:	mov	r0, r4
   224ec:	str	r7, [r4, #16]
   224f0:	str	r5, [r4, #24]
   224f4:	str	r8, [r4, #28]
   224f8:	str	r3, [r4, #32]
   224fc:	str	r7, [r4, #36]	; 0x24
   22500:	add	sp, sp, #8
   22504:	pop	{r4, r5, r6, r7, r8, pc}
   22508:	ldr	r3, [pc, #96]	; 22570 <__assert_fail@plt+0xfdd4>
   2250c:	str	r3, [r4, #20]
   22510:	bl	21d00 <__assert_fail@plt+0xf564>
   22514:	cmp	r0, #0
   22518:	vldrne	s13, [pc, #64]	; 22560 <__assert_fail@plt+0xfdc4>
   2251c:	bne	22538 <__assert_fail@plt+0xfd9c>
   22520:	mov	r0, r4
   22524:	bl	12154 <free@plt>
   22528:	mov	r4, #0
   2252c:	mov	r0, r4
   22530:	add	sp, sp, #8
   22534:	pop	{r4, r5, r6, r7, r8, pc}
   22538:	vldr	s15, [sp, #4]
   2253c:	vldr	s14, [pc, #32]	; 22564 <__assert_fail@plt+0xfdc8>
   22540:	vcvt.f32.u32	s12, s15
   22544:	vdiv.f32	s15, s12, s13
   22548:	vcmpe.f32	s15, s14
   2254c:	vmrs	APSR_nzcv, fpscr
   22550:	bge	22520 <__assert_fail@plt+0xfd84>
   22554:	vcvt.u32.f32	s15, s15
   22558:	vstr	s15, [sp, #4]
   2255c:	b	22490 <__assert_fail@plt+0xfcf4>
   22560:	svccc	0x004ccccd
   22564:	svcmi	0x00800000
   22568:	andeq	r1, r2, r4, lsr #23
   2256c:	muleq	r2, r0, fp
   22570:	andeq	r8, r4, ip, asr #11
   22574:	push	{r4, r5, r6, r7, r8, lr}
   22578:	mov	r5, r0
   2257c:	ldr	r6, [r0]
   22580:	ldr	r2, [r0, #4]
   22584:	cmp	r6, r2
   22588:	addcc	r6, r6, #8
   2258c:	movcc	r7, #0
   22590:	bcc	225a4 <__assert_fail@plt+0xfe08>
   22594:	b	22618 <__assert_fail@plt+0xfe7c>
   22598:	cmp	r2, r6
   2259c:	add	r6, r6, #8
   225a0:	bls	22618 <__assert_fail@plt+0xfe7c>
   225a4:	ldr	r3, [r6, #-8]
   225a8:	cmp	r3, #0
   225ac:	beq	22598 <__assert_fail@plt+0xfdfc>
   225b0:	ldr	r4, [r6, #-4]
   225b4:	ldr	r2, [r5, #32]
   225b8:	cmp	r4, #0
   225bc:	beq	225f0 <__assert_fail@plt+0xfe54>
   225c0:	cmp	r2, #0
   225c4:	beq	225d4 <__assert_fail@plt+0xfe38>
   225c8:	ldr	r0, [r4]
   225cc:	blx	r2
   225d0:	ldr	r2, [r5, #32]
   225d4:	ldr	r3, [r4, #4]
   225d8:	ldr	r1, [r5, #36]	; 0x24
   225dc:	str	r7, [r4]
   225e0:	str	r1, [r4, #4]
   225e4:	str	r4, [r5, #36]	; 0x24
   225e8:	subs	r4, r3, #0
   225ec:	bne	225c0 <__assert_fail@plt+0xfe24>
   225f0:	cmp	r2, #0
   225f4:	beq	22600 <__assert_fail@plt+0xfe64>
   225f8:	ldr	r0, [r6, #-8]
   225fc:	blx	r2
   22600:	str	r7, [r6, #-8]
   22604:	str	r7, [r6, #-4]
   22608:	ldr	r2, [r5, #4]
   2260c:	cmp	r2, r6
   22610:	add	r6, r6, #8
   22614:	bhi	225a4 <__assert_fail@plt+0xfe08>
   22618:	mov	r3, #0
   2261c:	str	r3, [r5, #12]
   22620:	str	r3, [r5, #16]
   22624:	pop	{r4, r5, r6, r7, r8, pc}
   22628:	ldr	r3, [r0, #32]
   2262c:	push	{r4, r5, r6, lr}
   22630:	cmp	r3, #0
   22634:	mov	r6, r0
   22638:	ldr	r5, [r0]
   2263c:	ldr	r3, [r0, #4]
   22640:	beq	226a8 <__assert_fail@plt+0xff0c>
   22644:	ldr	r2, [r0, #16]
   22648:	cmp	r2, #0
   2264c:	beq	226a8 <__assert_fail@plt+0xff0c>
   22650:	cmp	r5, r3
   22654:	bcc	22668 <__assert_fail@plt+0xfecc>
   22658:	b	226dc <__assert_fail@plt+0xff40>
   2265c:	add	r5, r5, #8
   22660:	cmp	r3, r5
   22664:	bls	226a4 <__assert_fail@plt+0xff08>
   22668:	ldr	r0, [r5]
   2266c:	cmp	r0, #0
   22670:	beq	2265c <__assert_fail@plt+0xfec0>
   22674:	mov	r4, r5
   22678:	b	22680 <__assert_fail@plt+0xfee4>
   2267c:	ldr	r0, [r4]
   22680:	ldr	r3, [r6, #32]
   22684:	blx	r3
   22688:	ldr	r4, [r4, #4]
   2268c:	cmp	r4, #0
   22690:	bne	2267c <__assert_fail@plt+0xfee0>
   22694:	ldr	r3, [r6, #4]
   22698:	add	r5, r5, #8
   2269c:	cmp	r3, r5
   226a0:	bhi	22668 <__assert_fail@plt+0xfecc>
   226a4:	ldr	r5, [r6]
   226a8:	cmp	r5, r3
   226ac:	bcs	226dc <__assert_fail@plt+0xff40>
   226b0:	ldr	r0, [r5, #4]
   226b4:	cmp	r0, #0
   226b8:	beq	226d0 <__assert_fail@plt+0xff34>
   226bc:	ldr	r4, [r0, #4]
   226c0:	bl	12154 <free@plt>
   226c4:	subs	r0, r4, #0
   226c8:	bne	226bc <__assert_fail@plt+0xff20>
   226cc:	ldr	r3, [r6, #4]
   226d0:	add	r5, r5, #8
   226d4:	cmp	r3, r5
   226d8:	bhi	226b0 <__assert_fail@plt+0xff14>
   226dc:	ldr	r0, [r6, #36]	; 0x24
   226e0:	cmp	r0, #0
   226e4:	beq	226f8 <__assert_fail@plt+0xff5c>
   226e8:	ldr	r4, [r0, #4]
   226ec:	bl	12154 <free@plt>
   226f0:	subs	r0, r4, #0
   226f4:	bne	226e8 <__assert_fail@plt+0xff4c>
   226f8:	ldr	r0, [r6]
   226fc:	bl	12154 <free@plt>
   22700:	mov	r0, r6
   22704:	pop	{r4, r5, r6, lr}
   22708:	b	12154 <free@plt>
   2270c:	push	{r4, r5, r6, r7, r8, lr}
   22710:	sub	sp, sp, #56	; 0x38
   22714:	ldr	r8, [r0, #20]
   22718:	ldr	r7, [pc, #392]	; 228a8 <__assert_fail@plt+0x1010c>
   2271c:	mov	r6, r0
   22720:	ldrb	r3, [r8, #16]
   22724:	ldr	r2, [r7]
   22728:	str	r1, [sp, #4]
   2272c:	cmp	r3, #0
   22730:	str	r2, [sp, #52]	; 0x34
   22734:	bne	22760 <__assert_fail@plt+0xffc4>
   22738:	vmov	s15, r1
   2273c:	vldr	s13, [r8, #8]
   22740:	vldr	s14, [pc, #348]	; 228a4 <__assert_fail@plt+0x10108>
   22744:	vcvt.f32.u32	s12, s15
   22748:	vdiv.f32	s15, s12, s13
   2274c:	vcmpe.f32	s15, s14
   22750:	vmrs	APSR_nzcv, fpscr
   22754:	vcvtlt.u32.f32	s15, s15
   22758:	vstrlt	s15, [sp, #4]
   2275c:	bge	22790 <__assert_fail@plt+0xfff4>
   22760:	ldr	r0, [sp, #4]
   22764:	bl	21af8 <__assert_fail@plt+0xf35c>
   22768:	lsrs	r3, r0, #30
   2276c:	movne	r4, #1
   22770:	moveq	r4, #0
   22774:	tst	r0, #536870912	; 0x20000000
   22778:	movne	r4, #1
   2277c:	cmp	r0, #0
   22780:	moveq	r4, #1
   22784:	cmp	r4, #0
   22788:	mov	r5, r0
   2278c:	beq	227b0 <__assert_fail@plt+0x10014>
   22790:	mov	r4, #0
   22794:	ldr	r2, [sp, #52]	; 0x34
   22798:	ldr	r3, [r7]
   2279c:	mov	r0, r4
   227a0:	cmp	r2, r3
   227a4:	bne	2289c <__assert_fail@plt+0x10100>
   227a8:	add	sp, sp, #56	; 0x38
   227ac:	pop	{r4, r5, r6, r7, r8, pc}
   227b0:	ldr	r3, [r6, #8]
   227b4:	cmp	r3, r0
   227b8:	beq	22864 <__assert_fail@plt+0x100c8>
   227bc:	mov	r1, #8
   227c0:	bl	12064 <calloc@plt>
   227c4:	cmp	r0, #0
   227c8:	str	r0, [sp, #12]
   227cc:	beq	22790 <__assert_fail@plt+0xfff4>
   227d0:	add	r0, r0, r5, lsl #3
   227d4:	ldr	r1, [r6, #32]
   227d8:	str	r0, [sp, #16]
   227dc:	ldr	r0, [r6, #28]
   227e0:	ldr	ip, [r6, #24]
   227e4:	ldr	r3, [r6, #36]	; 0x24
   227e8:	mov	r2, r4
   227ec:	str	r0, [sp, #40]	; 0x28
   227f0:	str	r1, [sp, #44]	; 0x2c
   227f4:	add	r0, sp, #12
   227f8:	mov	r1, r6
   227fc:	str	r4, [sp, #24]
   22800:	str	r4, [sp, #28]
   22804:	str	r5, [sp, #20]
   22808:	str	r8, [sp, #32]
   2280c:	str	ip, [sp, #36]	; 0x24
   22810:	str	r3, [sp, #48]	; 0x30
   22814:	bl	21db0 <__assert_fail@plt+0xf614>
   22818:	subs	r4, r0, #0
   2281c:	bne	2286c <__assert_fail@plt+0x100d0>
   22820:	ldr	r3, [sp, #48]	; 0x30
   22824:	mov	r2, #1
   22828:	str	r3, [r6, #36]	; 0x24
   2282c:	add	r1, sp, #12
   22830:	mov	r0, r6
   22834:	bl	21db0 <__assert_fail@plt+0xf614>
   22838:	cmp	r0, #0
   2283c:	beq	228a0 <__assert_fail@plt+0x10104>
   22840:	add	r1, sp, #12
   22844:	mov	r0, r6
   22848:	mov	r2, r4
   2284c:	bl	21db0 <__assert_fail@plt+0xf614>
   22850:	cmp	r0, #0
   22854:	beq	228a0 <__assert_fail@plt+0x10104>
   22858:	ldr	r0, [sp, #12]
   2285c:	bl	12154 <free@plt>
   22860:	b	22794 <__assert_fail@plt+0xfff8>
   22864:	mov	r4, #1
   22868:	b	22794 <__assert_fail@plt+0xfff8>
   2286c:	ldr	r0, [r6]
   22870:	bl	12154 <free@plt>
   22874:	ldrd	r2, [sp, #12]
   22878:	ldr	r1, [sp, #20]
   2287c:	str	r2, [r6]
   22880:	str	r3, [r6, #4]
   22884:	ldr	r2, [sp, #24]
   22888:	ldr	r3, [sp, #48]	; 0x30
   2288c:	str	r1, [r6, #8]
   22890:	str	r2, [r6, #12]
   22894:	str	r3, [r6, #36]	; 0x24
   22898:	b	22794 <__assert_fail@plt+0xfff8>
   2289c:	bl	12244 <__stack_chk_fail@plt>
   228a0:	bl	1273c <abort@plt>
   228a4:	svcmi	0x00800000
   228a8:	andeq	fp, r5, r0, ror #24
   228ac:	push	{r4, r5, r6, r7, lr}
   228b0:	sub	sp, sp, #12
   228b4:	ldr	r6, [pc, #404]	; 22a50 <__assert_fail@plt+0x102b4>
   228b8:	subs	r7, r1, #0
   228bc:	ldr	r3, [r6]
   228c0:	str	r3, [sp, #4]
   228c4:	beq	22a44 <__assert_fail@plt+0x102a8>
   228c8:	mov	r5, r2
   228cc:	mov	r3, #0
   228d0:	mov	r2, sp
   228d4:	mov	r4, r0
   228d8:	bl	21be8 <__assert_fail@plt+0xf44c>
   228dc:	cmp	r0, #0
   228e0:	beq	2290c <__assert_fail@plt+0x10170>
   228e4:	cmp	r5, #0
   228e8:	moveq	r0, r5
   228ec:	strne	r0, [r5]
   228f0:	movne	r0, #0
   228f4:	ldr	r2, [sp, #4]
   228f8:	ldr	r3, [r6]
   228fc:	cmp	r2, r3
   22900:	bne	22a48 <__assert_fail@plt+0x102ac>
   22904:	add	sp, sp, #12
   22908:	pop	{r4, r5, r6, r7, pc}
   2290c:	vldr	s15, [r4, #8]
   22910:	ldr	r3, [r4, #20]
   22914:	vldr	s14, [r4, #12]
   22918:	vcvt.f32.u32	s15, s15
   2291c:	vldr	s13, [r3, #8]
   22920:	vcvt.f32.u32	s14, s14
   22924:	vmul.f32	s15, s15, s13
   22928:	vcmpe.f32	s14, s15
   2292c:	vmrs	APSR_nzcv, fpscr
   22930:	bgt	2297c <__assert_fail@plt+0x101e0>
   22934:	ldr	r5, [sp]
   22938:	ldr	r3, [r5]
   2293c:	cmp	r3, #0
   22940:	beq	229d8 <__assert_fail@plt+0x1023c>
   22944:	ldr	r0, [r4, #36]	; 0x24
   22948:	cmp	r0, #0
   2294c:	beq	229fc <__assert_fail@plt+0x10260>
   22950:	ldr	r3, [r0, #4]
   22954:	str	r3, [r4, #36]	; 0x24
   22958:	ldr	r3, [r4, #16]
   2295c:	ldr	r2, [r5, #4]
   22960:	add	r3, r3, #1
   22964:	str	r7, [r0]
   22968:	str	r2, [r0, #4]
   2296c:	str	r0, [r5, #4]
   22970:	mov	r0, #1
   22974:	str	r3, [r4, #16]
   22978:	b	228f4 <__assert_fail@plt+0x10158>
   2297c:	add	r0, r4, #20
   22980:	bl	21d00 <__assert_fail@plt+0xf564>
   22984:	vldr	s15, [r4, #8]
   22988:	ldr	r3, [r4, #20]
   2298c:	vldr	s14, [r4, #12]
   22990:	vcvt.f32.u32	s15, s15
   22994:	vldr	s13, [r3, #8]
   22998:	vcvt.f32.u32	s14, s14
   2299c:	vmul.f32	s12, s13, s15
   229a0:	vcmpe.f32	s14, s12
   229a4:	vmrs	APSR_nzcv, fpscr
   229a8:	ble	22934 <__assert_fail@plt+0x10198>
   229ac:	vldr	s14, [r3, #12]
   229b0:	ldrb	r3, [r3, #16]
   229b4:	vmul.f32	s15, s15, s14
   229b8:	cmp	r3, #0
   229bc:	vldr	s14, [pc, #136]	; 22a4c <__assert_fail@plt+0x102b0>
   229c0:	vmuleq.f32	s15, s15, s13
   229c4:	vcmpe.f32	s15, s14
   229c8:	vmrs	APSR_nzcv, fpscr
   229cc:	blt	22a10 <__assert_fail@plt+0x10274>
   229d0:	mvn	r0, #0
   229d4:	b	228f4 <__assert_fail@plt+0x10158>
   229d8:	ldr	r2, [r4, #16]
   229dc:	ldr	r3, [r4, #12]
   229e0:	add	r2, r2, #1
   229e4:	add	r3, r3, #1
   229e8:	str	r7, [r5]
   229ec:	mov	r0, #1
   229f0:	str	r2, [r4, #16]
   229f4:	str	r3, [r4, #12]
   229f8:	b	228f4 <__assert_fail@plt+0x10158>
   229fc:	mov	r0, #8
   22a00:	bl	123dc <malloc@plt>
   22a04:	cmp	r0, #0
   22a08:	beq	229d0 <__assert_fail@plt+0x10234>
   22a0c:	b	22958 <__assert_fail@plt+0x101bc>
   22a10:	vcvt.u32.f32	s15, s15
   22a14:	mov	r0, r4
   22a18:	vmov	r1, s15
   22a1c:	bl	2270c <__assert_fail@plt+0xff70>
   22a20:	cmp	r0, #0
   22a24:	beq	229d0 <__assert_fail@plt+0x10234>
   22a28:	mov	r2, sp
   22a2c:	mov	r3, #0
   22a30:	mov	r1, r7
   22a34:	mov	r0, r4
   22a38:	bl	21be8 <__assert_fail@plt+0xf44c>
   22a3c:	cmp	r0, #0
   22a40:	beq	22934 <__assert_fail@plt+0x10198>
   22a44:	bl	1273c <abort@plt>
   22a48:	bl	12244 <__stack_chk_fail@plt>
   22a4c:	svcmi	0x00800000
   22a50:	andeq	fp, r5, r0, ror #24
   22a54:	push	{r4, r5, lr}
   22a58:	sub	sp, sp, #12
   22a5c:	ldr	r5, [pc, #68]	; 22aa8 <__assert_fail@plt+0x1030c>
   22a60:	mov	r2, sp
   22a64:	mov	r4, r1
   22a68:	ldr	r3, [r5]
   22a6c:	str	r3, [sp, #4]
   22a70:	bl	228ac <__assert_fail@plt+0x10110>
   22a74:	cmn	r0, #1
   22a78:	moveq	r0, #0
   22a7c:	beq	22a8c <__assert_fail@plt+0x102f0>
   22a80:	cmp	r0, #0
   22a84:	movne	r0, r4
   22a88:	ldreq	r0, [sp]
   22a8c:	ldr	r2, [sp, #4]
   22a90:	ldr	r3, [r5]
   22a94:	cmp	r2, r3
   22a98:	bne	22aa4 <__assert_fail@plt+0x10308>
   22a9c:	add	sp, sp, #12
   22aa0:	pop	{r4, r5, pc}
   22aa4:	bl	12244 <__stack_chk_fail@plt>
   22aa8:	andeq	fp, r5, r0, ror #24
   22aac:	push	{r4, r5, r6, r7, lr}
   22ab0:	sub	sp, sp, #12
   22ab4:	ldr	r5, [pc, #276]	; 22bd0 <__assert_fail@plt+0x10434>
   22ab8:	mov	r3, #1
   22abc:	mov	r2, sp
   22ac0:	ldr	ip, [r5]
   22ac4:	mov	r4, r0
   22ac8:	str	ip, [sp, #4]
   22acc:	bl	21be8 <__assert_fail@plt+0xf44c>
   22ad0:	subs	r6, r0, #0
   22ad4:	beq	22af4 <__assert_fail@plt+0x10358>
   22ad8:	ldr	r2, [sp]
   22adc:	ldr	r3, [r4, #16]
   22ae0:	ldr	r2, [r2]
   22ae4:	sub	r3, r3, #1
   22ae8:	cmp	r2, #0
   22aec:	str	r3, [r4, #16]
   22af0:	beq	22b10 <__assert_fail@plt+0x10374>
   22af4:	ldr	r2, [sp, #4]
   22af8:	ldr	r3, [r5]
   22afc:	mov	r0, r6
   22b00:	cmp	r2, r3
   22b04:	bne	22bcc <__assert_fail@plt+0x10430>
   22b08:	add	sp, sp, #12
   22b0c:	pop	{r4, r5, r6, r7, pc}
   22b10:	vldr	s15, [r4, #8]
   22b14:	ldr	r3, [r4, #12]
   22b18:	ldr	r2, [r4, #20]
   22b1c:	sub	r3, r3, #1
   22b20:	vcvt.f32.u32	s14, s15
   22b24:	vldr	s13, [r2]
   22b28:	vmov	s15, r3
   22b2c:	str	r3, [r4, #12]
   22b30:	vcvt.f32.u32	s15, s15
   22b34:	vmul.f32	s14, s14, s13
   22b38:	vcmpe.f32	s15, s14
   22b3c:	vmrs	APSR_nzcv, fpscr
   22b40:	bpl	22af4 <__assert_fail@plt+0x10358>
   22b44:	add	r0, r4, #20
   22b48:	bl	21d00 <__assert_fail@plt+0xf564>
   22b4c:	vldr	s15, [r4, #8]
   22b50:	ldr	r3, [r4, #20]
   22b54:	vldr	s13, [r4, #12]
   22b58:	vcvt.f32.u32	s15, s15
   22b5c:	vldr	s14, [r3]
   22b60:	vcvt.f32.u32	s13, s13
   22b64:	vmul.f32	s14, s15, s14
   22b68:	vcmpe.f32	s13, s14
   22b6c:	vmrs	APSR_nzcv, fpscr
   22b70:	bpl	22af4 <__assert_fail@plt+0x10358>
   22b74:	vldr	s14, [r3, #4]
   22b78:	ldrb	r2, [r3, #16]
   22b7c:	mov	r0, r4
   22b80:	vmul.f32	s15, s15, s14
   22b84:	cmp	r2, #0
   22b88:	vldreq	s14, [r3, #8]
   22b8c:	vmuleq.f32	s15, s15, s14
   22b90:	vcvt.u32.f32	s15, s15
   22b94:	vmov	r1, s15
   22b98:	bl	2270c <__assert_fail@plt+0xff70>
   22b9c:	cmp	r0, #0
   22ba0:	bne	22af4 <__assert_fail@plt+0x10358>
   22ba4:	ldr	r0, [r4, #36]	; 0x24
   22ba8:	cmp	r0, #0
   22bac:	beq	22bc0 <__assert_fail@plt+0x10424>
   22bb0:	ldr	r7, [r0, #4]
   22bb4:	bl	12154 <free@plt>
   22bb8:	subs	r0, r7, #0
   22bbc:	bne	22bb0 <__assert_fail@plt+0x10414>
   22bc0:	mov	r3, #0
   22bc4:	str	r3, [r4, #36]	; 0x24
   22bc8:	b	22af4 <__assert_fail@plt+0x10358>
   22bcc:	bl	12244 <__stack_chk_fail@plt>
   22bd0:	andeq	fp, r5, r0, ror #24
   22bd4:	andeq	r0, r0, r0
   22bd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22bdc:	vpush	{d8-d9}
   22be0:	mov	r8, r3
   22be4:	ands	r3, r3, #32
   22be8:	mov	r5, r2
   22bec:	sub	sp, sp, #124	; 0x7c
   22bf0:	mov	r7, r1
   22bf4:	str	r3, [sp, #32]
   22bf8:	ldr	r3, [pc, #1360]	; 23150 <__assert_fail@plt+0x109b4>
   22bfc:	str	r2, [sp, #24]
   22c00:	movne	r2, #1024	; 0x400
   22c04:	ldr	r3, [r3]
   22c08:	moveq	r2, #1000	; 0x3e8
   22c0c:	str	r2, [sp, #28]
   22c10:	str	r3, [sp, #116]	; 0x74
   22c14:	mov	r6, r0
   22c18:	bl	1264c <localeconv@plt>
   22c1c:	add	r3, r5, #644	; 0x284
   22c20:	str	r3, [sp, #48]	; 0x30
   22c24:	add	r3, r3, #3
   22c28:	str	r3, [sp, #12]
   22c2c:	ldr	r2, [r0]
   22c30:	mov	r4, r0
   22c34:	mov	r0, r2
   22c38:	mov	r5, r2
   22c3c:	bl	1249c <strlen@plt>
   22c40:	ldr	r9, [r4, #4]
   22c44:	ldr	r3, [pc, #1288]	; 23154 <__assert_fail@plt+0x109b8>
   22c48:	sub	r2, r0, #1
   22c4c:	cmp	r2, #16
   22c50:	movcc	r3, r5
   22c54:	mov	fp, r0
   22c58:	mov	r0, r9
   22c5c:	movcs	fp, #1
   22c60:	str	r3, [sp, #36]	; 0x24
   22c64:	bl	1249c <strlen@plt>
   22c68:	ldr	r3, [pc, #1256]	; 23158 <__assert_fail@plt+0x109bc>
   22c6c:	and	r2, r8, #3
   22c70:	str	r2, [sp, #16]
   22c74:	ldr	sl, [r4, #8]
   22c78:	cmp	r0, #16
   22c7c:	movhi	r9, r3
   22c80:	ldrd	r0, [sp, #176]	; 0xb0
   22c84:	ldrd	r2, [sp, #184]	; 0xb8
   22c88:	cmp	r3, r1
   22c8c:	cmpeq	r2, r0
   22c90:	bhi	22f28 <__assert_fail@plt+0x1078c>
   22c94:	bl	43dc8 <fts_children@@Base+0x1232c>
   22c98:	orrs	r3, r2, r3
   22c9c:	bne	22cd0 <__assert_fail@plt+0x10534>
   22ca0:	mul	r2, r0, r7
   22ca4:	umull	r4, r5, r0, r6
   22ca8:	mla	r2, r6, r1, r2
   22cac:	mov	r3, r1
   22cb0:	add	r5, r2, r5
   22cb4:	mov	r1, r5
   22cb8:	mov	r2, r0
   22cbc:	mov	r0, r4
   22cc0:	bl	43dc8 <fts_children@@Base+0x1232c>
   22cc4:	cmp	r1, r7
   22cc8:	cmpeq	r0, r6
   22ccc:	beq	2328c <__assert_fail@plt+0x10af0>
   22cd0:	ldrd	r0, [sp, #176]	; 0xb0
   22cd4:	bl	43c80 <fts_children@@Base+0x121e4>
   22cd8:	vmov	d9, r0, r1
   22cdc:	ldrd	r0, [sp, #184]	; 0xb8
   22ce0:	bl	43c80 <fts_children@@Base+0x121e4>
   22ce4:	vmov	d7, r0, r1
   22ce8:	mov	r0, r6
   22cec:	mov	r1, r7
   22cf0:	vdiv.f64	d8, d9, d7
   22cf4:	bl	43c80 <fts_children@@Base+0x121e4>
   22cf8:	tst	r8, #16
   22cfc:	vmov	d7, r0, r1
   22d00:	vmul.f64	d8, d8, d7
   22d04:	beq	22e70 <__assert_fail@plt+0x106d4>
   22d08:	vldr	s15, [sp, #28]
   22d0c:	mov	r6, #0
   22d10:	vcvt.f64.s32	d6, s15
   22d14:	vmov.f64	d7, d6
   22d18:	vmov.f64	d5, d7
   22d1c:	vmul.f64	d7, d7, d6
   22d20:	add	r6, r6, #1
   22d24:	vcmpe.f64	d7, d8
   22d28:	vmrs	APSR_nzcv, fpscr
   22d2c:	bhi	22d38 <__assert_fail@plt+0x1059c>
   22d30:	cmp	r6, #8
   22d34:	bne	22d18 <__assert_fail@plt+0x1057c>
   22d38:	ldr	r3, [sp, #32]
   22d3c:	clz	r4, r3
   22d40:	ldr	r3, [sp, #16]
   22d44:	lsr	r4, r4, #5
   22d48:	add	fp, fp, #1
   22d4c:	add	r4, r4, #1
   22d50:	cmp	r3, #1
   22d54:	vdiv.f64	d9, d8, d5
   22d58:	add	r4, r4, fp
   22d5c:	beq	23348 <__assert_fail@plt+0x10bac>
   22d60:	vldr	d7, [pc, #984]	; 23140 <__assert_fail@plt+0x109a4>
   22d64:	vcmpe.f64	d9, d7
   22d68:	vmrs	APSR_nzcv, fpscr
   22d6c:	vmovpl.f64	d7, d9
   22d70:	bpl	22db4 <__assert_fail@plt+0x10618>
   22d74:	vmov	r0, r1, d9
   22d78:	bl	43e18 <fts_children@@Base+0x1237c>
   22d7c:	mov	r5, r0
   22d80:	mov	r7, r1
   22d84:	bl	43c80 <fts_children@@Base+0x121e4>
   22d88:	ldr	r3, [sp, #16]
   22d8c:	cmp	r3, #0
   22d90:	vmov	d7, r0, r1
   22d94:	bne	22db4 <__assert_fail@plt+0x10618>
   22d98:	vcmp.f64	d9, d7
   22d9c:	vmrs	APSR_nzcv, fpscr
   22da0:	beq	22db4 <__assert_fail@plt+0x10618>
   22da4:	adds	r0, r5, #1
   22da8:	adc	r1, r7, #0
   22dac:	bl	43c80 <fts_children@@Base+0x121e4>
   22db0:	vmov	d7, r0, r1
   22db4:	ldr	r5, [sp, #24]
   22db8:	vstr	d7, [sp]
   22dbc:	ldr	r3, [pc, #928]	; 23164 <__assert_fail@plt+0x109c8>
   22dc0:	mvn	r2, #0
   22dc4:	mov	r1, #1
   22dc8:	mov	r0, r5
   22dcc:	bl	124f0 <__sprintf_chk@plt>
   22dd0:	mov	r0, r5
   22dd4:	bl	1249c <strlen@plt>
   22dd8:	cmp	r0, r4
   22ddc:	bls	23224 <__assert_fail@plt+0x10a88>
   22de0:	vldr	d7, [pc, #864]	; 23148 <__assert_fail@plt+0x109ac>
   22de4:	vmul.f64	d9, d9, d7
   22de8:	vldr	d7, [pc, #848]	; 23140 <__assert_fail@plt+0x109a4>
   22dec:	vcmpe.f64	d9, d7
   22df0:	vmrs	APSR_nzcv, fpscr
   22df4:	bpl	22e3c <__assert_fail@plt+0x106a0>
   22df8:	vmov	r0, r1, d9
   22dfc:	bl	43e18 <fts_children@@Base+0x1237c>
   22e00:	mov	r4, r0
   22e04:	mov	r5, r1
   22e08:	bl	43c80 <fts_children@@Base+0x121e4>
   22e0c:	ldr	r3, [sp, #16]
   22e10:	cmp	r3, #0
   22e14:	vmov	d7, r0, r1
   22e18:	bne	22e38 <__assert_fail@plt+0x1069c>
   22e1c:	vcmp.f64	d9, d7
   22e20:	vmrs	APSR_nzcv, fpscr
   22e24:	beq	22e38 <__assert_fail@plt+0x1069c>
   22e28:	adds	r0, r4, #1
   22e2c:	adc	r1, r5, #0
   22e30:	bl	43c80 <fts_children@@Base+0x121e4>
   22e34:	vmov	d7, r0, r1
   22e38:	vmov.f64	d9, d7
   22e3c:	vldr	d6, [pc, #772]	; 23148 <__assert_fail@plt+0x109ac>
   22e40:	ldr	r4, [sp, #24]
   22e44:	ldr	r3, [pc, #784]	; 2315c <__assert_fail@plt+0x109c0>
   22e48:	mvn	r2, #0
   22e4c:	vdiv.f64	d7, d9, d6
   22e50:	mov	r1, #1
   22e54:	mov	r0, r4
   22e58:	vstr	d7, [sp]
   22e5c:	bl	124f0 <__sprintf_chk@plt>
   22e60:	mov	r0, r4
   22e64:	bl	1249c <strlen@plt>
   22e68:	mov	r7, r0
   22e6c:	b	22eb8 <__assert_fail@plt+0x1071c>
   22e70:	and	r6, r8, #3
   22e74:	cmp	r6, #1
   22e78:	beq	22e8c <__assert_fail@plt+0x106f0>
   22e7c:	vldr	d7, [pc, #700]	; 23140 <__assert_fail@plt+0x109a4>
   22e80:	vcmpe.f64	d8, d7
   22e84:	vmrs	APSR_nzcv, fpscr
   22e88:	bmi	23248 <__assert_fail@plt+0x10aac>
   22e8c:	ldr	r4, [sp, #24]
   22e90:	ldr	r3, [pc, #708]	; 2315c <__assert_fail@plt+0x109c0>
   22e94:	mvn	r2, #0
   22e98:	mov	r1, #1
   22e9c:	vstr	d8, [sp]
   22ea0:	mov	r0, r4
   22ea4:	bl	124f0 <__sprintf_chk@plt>
   22ea8:	mov	r0, r4
   22eac:	bl	1249c <strlen@plt>
   22eb0:	mvn	r6, #0
   22eb4:	mov	r7, r0
   22eb8:	ldr	r3, [sp, #12]
   22ebc:	mov	r2, r0
   22ec0:	sub	fp, r3, r0
   22ec4:	mov	r0, fp
   22ec8:	ldr	r1, [sp, #24]
   22ecc:	add	r7, fp, r7
   22ed0:	bl	12148 <memmove@plt>
   22ed4:	tst	r8, #4
   22ed8:	bne	23098 <__assert_fail@plt+0x108fc>
   22edc:	tst	r8, #128	; 0x80
   22ee0:	beq	22ef8 <__assert_fail@plt+0x1075c>
   22ee4:	cmn	r6, #1
   22ee8:	beq	23168 <__assert_fail@plt+0x109cc>
   22eec:	and	r3, r8, #256	; 0x100
   22ef0:	orrs	r2, r3, r6
   22ef4:	bne	233d0 <__assert_fail@plt+0x10c34>
   22ef8:	ldr	r2, [sp, #12]
   22efc:	mov	r3, #0
   22f00:	mov	r0, fp
   22f04:	strb	r3, [r2]
   22f08:	ldr	r3, [pc, #576]	; 23150 <__assert_fail@plt+0x109b4>
   22f0c:	ldr	r2, [sp, #116]	; 0x74
   22f10:	ldr	r3, [r3]
   22f14:	cmp	r2, r3
   22f18:	bne	2359c <__assert_fail@plt+0x10e00>
   22f1c:	add	sp, sp, #124	; 0x7c
   22f20:	vpop	{d8-d9}
   22f24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f28:	ldrd	r2, [sp, #176]	; 0xb0
   22f2c:	orrs	r3, r2, r3
   22f30:	beq	22cd0 <__assert_fail@plt+0x10534>
   22f34:	ldrd	r2, [sp, #176]	; 0xb0
   22f38:	ldrd	r0, [sp, #184]	; 0xb8
   22f3c:	bl	43dc8 <fts_children@@Base+0x1232c>
   22f40:	orrs	r3, r2, r3
   22f44:	mov	r4, r0
   22f48:	mov	r5, r1
   22f4c:	bne	22cd0 <__assert_fail@plt+0x10534>
   22f50:	mov	r0, r6
   22f54:	mov	r1, r7
   22f58:	mov	r2, r4
   22f5c:	mov	r3, r5
   22f60:	bl	43dc8 <fts_children@@Base+0x1232c>
   22f64:	strd	r0, [sp, #52]	; 0x34
   22f68:	lsl	r0, r2, #2
   22f6c:	lsl	r1, r3, #2
   22f70:	adds	r0, r0, r2
   22f74:	orr	r1, r1, r2, lsr #30
   22f78:	adc	r1, r1, r3
   22f7c:	adds	r0, r0, r0
   22f80:	adc	r1, r1, r1
   22f84:	mov	r2, r4
   22f88:	mov	r3, r5
   22f8c:	bl	43dc8 <fts_children@@Base+0x1232c>
   22f90:	adds	r1, r2, r2
   22f94:	adc	r3, r3, r3
   22f98:	str	r3, [sp, #44]	; 0x2c
   22f9c:	str	r1, [sp, #40]	; 0x28
   22fa0:	ldrd	r6, [sp, #40]	; 0x28
   22fa4:	mov	r3, r5
   22fa8:	mov	lr, r0
   22fac:	cmp	r5, r7
   22fb0:	cmpeq	r4, r6
   22fb4:	ldrd	r4, [sp, #52]	; 0x34
   22fb8:	bls	233bc <__assert_fail@plt+0x10c20>
   22fbc:	mov	r3, r6
   22fc0:	orrs	r3, r3, r7
   22fc4:	movne	r3, #1
   22fc8:	moveq	r3, #0
   22fcc:	mov	ip, r3
   22fd0:	ands	r3, r8, #16
   22fd4:	str	r3, [sp, #52]	; 0x34
   22fd8:	beq	232a4 <__assert_fail@plt+0x10b08>
   22fdc:	ldr	r1, [sp, #28]
   22fe0:	mov	r3, #0
   22fe4:	mov	r2, r1
   22fe8:	cmp	r3, r5
   22fec:	cmpeq	r1, r4
   22ff0:	strd	r2, [sp, #40]	; 0x28
   22ff4:	mov	r6, #0
   22ff8:	bhi	232a8 <__assert_fail@plt+0x10b0c>
   22ffc:	str	r9, [sp, #56]	; 0x38
   23000:	str	r8, [sp, #68]	; 0x44
   23004:	mov	r7, ip
   23008:	str	fp, [sp, #60]	; 0x3c
   2300c:	mov	r9, r1
   23010:	str	sl, [sp, #64]	; 0x40
   23014:	mov	r8, lr
   23018:	b	23040 <__assert_fail@plt+0x108a4>
   2301c:	adds	r7, r7, #0
   23020:	movne	r7, #1
   23024:	ldrd	r2, [sp, #40]	; 0x28
   23028:	add	r6, r6, #1
   2302c:	cmp	r3, fp
   23030:	cmpeq	r2, sl
   23034:	bhi	23440 <__assert_fail@plt+0x10ca4>
   23038:	cmp	r6, #8
   2303c:	beq	23408 <__assert_fail@plt+0x10c6c>
   23040:	mov	r0, r4
   23044:	mov	r1, r5
   23048:	ldrd	r2, [sp, #40]	; 0x28
   2304c:	bl	43dc8 <fts_children@@Base+0x1232c>
   23050:	add	r2, r2, r2, lsl #2
   23054:	mov	sl, r0
   23058:	mov	fp, r1
   2305c:	add	r0, r8, r2, lsl #1
   23060:	mov	r1, r9
   23064:	bl	436d4 <fts_children@@Base+0x11c38>
   23068:	asr	r3, r7, #1
   2306c:	mov	r4, sl
   23070:	mov	r5, fp
   23074:	add	r1, r3, r1, lsl #1
   23078:	cmp	r9, r1
   2307c:	mov	r8, r0
   23080:	add	r7, r7, r1
   23084:	bhi	2301c <__assert_fail@plt+0x10880>
   23088:	cmp	r9, r7
   2308c:	movcc	r7, #3
   23090:	movcs	r7, #2
   23094:	b	23024 <__assert_fail@plt+0x10888>
   23098:	mov	r0, r9
   2309c:	bl	1249c <strlen@plt>
   230a0:	sub	r4, r7, fp
   230a4:	add	r3, sp, #72	; 0x48
   230a8:	mov	r1, fp
   230ac:	mov	r2, r4
   230b0:	mvn	r5, #0
   230b4:	str	r0, [sp, #16]
   230b8:	mov	r0, r3
   230bc:	mov	r3, #41	; 0x29
   230c0:	bl	122ec <__memcpy_chk@plt>
   230c4:	ldr	fp, [sp, #16]
   230c8:	ldrb	r3, [sl]
   230cc:	cmp	r3, #0
   230d0:	beq	230e4 <__assert_fail@plt+0x10948>
   230d4:	cmp	r3, #255	; 0xff
   230d8:	movne	r5, r3
   230dc:	moveq	r5, r4
   230e0:	add	sl, sl, #1
   230e4:	cmp	r5, r4
   230e8:	bls	23104 <__assert_fail@plt+0x10968>
   230ec:	sub	fp, r7, r4
   230f0:	mov	r2, r4
   230f4:	add	r1, sp, #72	; 0x48
   230f8:	mov	r0, fp
   230fc:	bl	121a8 <memcpy@plt>
   23100:	b	22edc <__assert_fail@plt+0x10740>
   23104:	sub	r4, r4, r5
   23108:	add	r3, sp, #72	; 0x48
   2310c:	sub	r7, r7, r5
   23110:	add	r1, r3, r4
   23114:	mov	r0, r7
   23118:	mov	r2, r5
   2311c:	bl	121a8 <memcpy@plt>
   23120:	cmp	r4, #0
   23124:	beq	235a0 <__assert_fail@plt+0x10e04>
   23128:	sub	r7, r7, fp
   2312c:	mov	r0, r7
   23130:	mov	r2, fp
   23134:	mov	r1, r9
   23138:	bl	121a8 <memcpy@plt>
   2313c:	b	230c8 <__assert_fail@plt+0x1092c>
   23140:	andeq	r0, r0, r0
   23144:	mvnsmi	r0, #0
   23148:	andeq	r0, r0, r0
   2314c:	eormi	r0, r4, r0
   23150:	andeq	fp, r5, r0, ror #24
   23154:	andeq	r7, r4, r8, ror r8
   23158:	andeq	r8, r4, r0, lsr r6
   2315c:	andeq	r8, r4, ip, ror #12
   23160:	andeq	r8, r4, ip, asr #12
   23164:	andeq	r8, r4, r4, ror r6
   23168:	ldrd	r2, [sp, #184]	; 0xb8
   2316c:	cmp	r3, #0
   23170:	cmpeq	r2, #1
   23174:	bls	23400 <__assert_fail@plt+0x10c64>
   23178:	ldr	r1, [sp, #28]
   2317c:	ldrd	r4, [sp, #184]	; 0xb8
   23180:	mov	r6, #1
   23184:	mov	r2, #1
   23188:	mov	r3, #0
   2318c:	mul	r0, r1, r3
   23190:	umull	r2, r3, r2, r1
   23194:	add	r3, r0, r3
   23198:	cmp	r5, r3
   2319c:	cmpeq	r4, r2
   231a0:	bls	231b0 <__assert_fail@plt+0x10a14>
   231a4:	add	r6, r6, #1
   231a8:	cmp	r6, #8
   231ac:	bne	2318c <__assert_fail@plt+0x109f0>
   231b0:	tst	r8, #64	; 0x40
   231b4:	and	r3, r8, #256	; 0x100
   231b8:	beq	231d8 <__assert_fail@plt+0x10a3c>
   231bc:	ldr	r1, [sp, #24]
   231c0:	add	r2, r1, #648	; 0x288
   231c4:	str	r2, [sp, #12]
   231c8:	mov	r2, #32
   231cc:	strb	r2, [r1, #647]	; 0x287
   231d0:	cmp	r6, #0
   231d4:	beq	235a8 <__assert_fail@plt+0x10e0c>
   231d8:	ldr	r0, [sp, #32]
   231dc:	cmp	r6, #1
   231e0:	cmpeq	r0, #0
   231e4:	beq	23424 <__assert_fail@plt+0x10c88>
   231e8:	ldr	r1, [pc, #-144]	; 23160 <__assert_fail@plt+0x109c4>
   231ec:	cmp	r3, #0
   231f0:	ldr	r2, [sp, #12]
   231f4:	ldrb	r3, [r1, r6]
   231f8:	strb	r3, [r2], #1
   231fc:	beq	23438 <__assert_fail@plt+0x10c9c>
   23200:	cmp	r0, #0
   23204:	movne	r3, #105	; 0x69
   23208:	ldrne	r2, [sp, #12]
   2320c:	strbne	r3, [r2, #1]
   23210:	addne	r2, r2, #2
   23214:	mov	r3, #66	; 0x42
   23218:	strb	r3, [r2], #1
   2321c:	str	r2, [sp, #12]
   23220:	b	22ef8 <__assert_fail@plt+0x1075c>
   23224:	tst	r8, #8
   23228:	beq	23240 <__assert_fail@plt+0x10aa4>
   2322c:	ldr	r3, [sp, #24]
   23230:	add	r3, r3, r0
   23234:	ldrb	r3, [r3, #-1]
   23238:	cmp	r3, #48	; 0x30
   2323c:	beq	234f8 <__assert_fail@plt+0x10d5c>
   23240:	sub	r7, r0, fp
   23244:	b	22eb8 <__assert_fail@plt+0x1071c>
   23248:	vmov	r0, r1, d8
   2324c:	bl	43e18 <fts_children@@Base+0x1237c>
   23250:	mov	r4, r0
   23254:	mov	r5, r1
   23258:	bl	43c80 <fts_children@@Base+0x121e4>
   2325c:	cmp	r6, #0
   23260:	vmov	d7, r0, r1
   23264:	bne	23284 <__assert_fail@plt+0x10ae8>
   23268:	vcmp.f64	d8, d7
   2326c:	vmrs	APSR_nzcv, fpscr
   23270:	beq	23284 <__assert_fail@plt+0x10ae8>
   23274:	adds	r0, r4, #1
   23278:	adc	r1, r5, #0
   2327c:	bl	43c80 <fts_children@@Base+0x121e4>
   23280:	vmov	d7, r0, r1
   23284:	vmov.f64	d8, d7
   23288:	b	22e8c <__assert_fail@plt+0x106f0>
   2328c:	mov	r3, #0
   23290:	mov	ip, r3
   23294:	mov	lr, r3
   23298:	ands	r3, r8, #16
   2329c:	str	r3, [sp, #52]	; 0x34
   232a0:	bne	22fdc <__assert_fail@plt+0x10840>
   232a4:	mvn	r6, #0
   232a8:	ldr	r3, [sp, #16]
   232ac:	cmp	r3, #1
   232b0:	ldrne	r7, [sp, #12]
   232b4:	beq	23380 <__assert_fail@plt+0x10be4>
   232b8:	ldr	r3, [sp, #16]
   232bc:	cmp	r3, #0
   232c0:	bne	232f8 <__assert_fail@plt+0x10b5c>
   232c4:	add	r3, lr, ip
   232c8:	cmp	r3, #0
   232cc:	ble	232f8 <__assert_fail@plt+0x10b5c>
   232d0:	ldr	r3, [sp, #52]	; 0x34
   232d4:	adds	r4, r4, #1
   232d8:	adc	r5, r5, #0
   232dc:	cmp	r3, #0
   232e0:	beq	232f8 <__assert_fail@plt+0x10b5c>
   232e4:	ldr	r2, [sp, #28]
   232e8:	mov	r3, #0
   232ec:	cmp	r3, r5
   232f0:	cmpeq	r2, r4
   232f4:	beq	233dc <__assert_fail@plt+0x10c40>
   232f8:	mov	fp, r7
   232fc:	b	23308 <__assert_fail@plt+0x10b6c>
   23300:	mov	r4, r0
   23304:	mov	r5, r1
   23308:	mov	r2, #10
   2330c:	mov	r3, #0
   23310:	mov	r0, r4
   23314:	mov	r1, r5
   23318:	bl	43dc8 <fts_children@@Base+0x1232c>
   2331c:	mov	r0, r4
   23320:	mov	r1, r5
   23324:	mov	r3, #0
   23328:	add	r2, r2, #48	; 0x30
   2332c:	strb	r2, [fp, #-1]!
   23330:	mov	r2, #10
   23334:	bl	43dc8 <fts_children@@Base+0x1232c>
   23338:	cmp	r5, #0
   2333c:	cmpeq	r4, #9
   23340:	bhi	23300 <__assert_fail@plt+0x10b64>
   23344:	b	22ed4 <__assert_fail@plt+0x10738>
   23348:	ldr	r5, [sp, #24]
   2334c:	ldr	r3, [pc, #-496]	; 23164 <__assert_fail@plt+0x109c8>
   23350:	mvn	r2, #0
   23354:	ldr	r1, [sp, #16]
   23358:	vstr	d9, [sp]
   2335c:	mov	r0, r5
   23360:	bl	124f0 <__sprintf_chk@plt>
   23364:	mov	r0, r5
   23368:	bl	1249c <strlen@plt>
   2336c:	cmp	r0, r4
   23370:	bls	23224 <__assert_fail@plt+0x10a88>
   23374:	vldr	d7, [pc, #572]	; 235b8 <__assert_fail@plt+0x10e1c>
   23378:	vmul.f64	d9, d9, d7
   2337c:	b	22e3c <__assert_fail@plt+0x106a0>
   23380:	and	r3, r4, #1
   23384:	str	r3, [sp, #16]
   23388:	mov	r3, #0
   2338c:	str	r3, [sp, #20]
   23390:	ldrd	r2, [sp, #16]
   23394:	ldr	r7, [sp, #12]
   23398:	adds	r2, r2, ip
   2339c:	adc	r3, r3, ip, asr #31
   233a0:	orr	r2, r2, r3
   233a4:	mov	r3, lr
   233a8:	cmp	r2, #0
   233ac:	addne	r3, r3, #1
   233b0:	cmp	r3, #5
   233b4:	bgt	232d0 <__assert_fail@plt+0x10b34>
   233b8:	b	232f8 <__assert_fail@plt+0x10b5c>
   233bc:	movcs	r3, #2
   233c0:	movcs	ip, r3
   233c4:	movcc	r3, #3
   233c8:	movcc	ip, r3
   233cc:	b	22fd0 <__assert_fail@plt+0x10834>
   233d0:	tst	r8, #64	; 0x40
   233d4:	beq	231d0 <__assert_fail@plt+0x10a34>
   233d8:	b	231bc <__assert_fail@plt+0x10a20>
   233dc:	cmp	r6, #8
   233e0:	beq	232f8 <__assert_fail@plt+0x10b5c>
   233e4:	tst	r8, #8
   233e8:	add	r6, r6, #1
   233ec:	beq	23568 <__assert_fail@plt+0x10dcc>
   233f0:	mov	r3, #49	; 0x31
   233f4:	strb	r3, [r7, #-1]
   233f8:	sub	fp, r7, #1
   233fc:	b	22ed4 <__assert_fail@plt+0x10738>
   23400:	mov	r6, #0
   23404:	b	22eec <__assert_fail@plt+0x10750>
   23408:	mov	lr, r8
   2340c:	ldr	r9, [sp, #56]	; 0x38
   23410:	mov	ip, r7
   23414:	ldr	fp, [sp, #60]	; 0x3c
   23418:	ldr	sl, [sp, #64]	; 0x40
   2341c:	ldr	r8, [sp, #68]	; 0x44
   23420:	b	232a8 <__assert_fail@plt+0x10b0c>
   23424:	ldr	r2, [sp, #12]
   23428:	cmp	r3, #0
   2342c:	mov	r3, #107	; 0x6b
   23430:	strb	r3, [r2], #1
   23434:	bne	23214 <__assert_fail@plt+0x10a78>
   23438:	str	r2, [sp, #12]
   2343c:	b	22ef8 <__assert_fail@plt+0x1075c>
   23440:	mov	r3, fp
   23444:	mov	r2, sl
   23448:	cmp	r3, #0
   2344c:	cmpeq	r2, #9
   23450:	mov	lr, r8
   23454:	ldr	r9, [sp, #56]	; 0x38
   23458:	mov	ip, r7
   2345c:	strd	r2, [sp, #40]	; 0x28
   23460:	ldr	fp, [sp, #60]	; 0x3c
   23464:	ldr	sl, [sp, #64]	; 0x40
   23468:	ldr	r8, [sp, #68]	; 0x44
   2346c:	bhi	232a8 <__assert_fail@plt+0x10b0c>
   23470:	ldr	r3, [sp, #16]
   23474:	cmp	r3, #1
   23478:	beq	23524 <__assert_fail@plt+0x10d88>
   2347c:	ldr	r2, [sp, #16]
   23480:	adds	r3, r7, #0
   23484:	movne	r3, #1
   23488:	cmp	r2, #0
   2348c:	movne	r3, #0
   23490:	cmp	r3, #0
   23494:	bne	23510 <__assert_fail@plt+0x10d74>
   23498:	cmp	r0, #0
   2349c:	addne	r3, r0, #48	; 0x30
   234a0:	uxtbne	r3, r3
   234a4:	bne	234b4 <__assert_fail@plt+0x10d18>
   234a8:	tst	r8, #8
   234ac:	bne	2353c <__assert_fail@plt+0x10da0>
   234b0:	mov	r3, #48	; 0x30
   234b4:	ldr	r2, [sp, #48]	; 0x30
   234b8:	ldr	r1, [sp, #36]	; 0x24
   234bc:	add	r7, r2, #2
   234c0:	ldr	r2, [sp, #24]
   234c4:	sub	r7, r7, fp
   234c8:	mov	r0, r7
   234cc:	strb	r3, [r2, #646]	; 0x286
   234d0:	mov	r2, fp
   234d4:	bl	121a8 <memcpy@plt>
   234d8:	mov	r3, #0
   234dc:	mov	ip, r3
   234e0:	ldr	r3, [sp, #16]
   234e4:	cmp	r3, #1
   234e8:	beq	232f8 <__assert_fail@plt+0x10b5c>
   234ec:	mov	r3, #0
   234f0:	mov	lr, r3
   234f4:	b	232b8 <__assert_fail@plt+0x10b1c>
   234f8:	vldr	d7, [pc, #184]	; 235b8 <__assert_fail@plt+0x10e1c>
   234fc:	ldr	r3, [sp, #16]
   23500:	cmp	r3, #1
   23504:	vmul.f64	d9, d9, d7
   23508:	bne	22de8 <__assert_fail@plt+0x1064c>
   2350c:	b	22e3c <__assert_fail@plt+0x106a0>
   23510:	cmp	r0, #9
   23514:	beq	23544 <__assert_fail@plt+0x10da8>
   23518:	add	r3, r0, #49	; 0x31
   2351c:	uxtb	r3, r3
   23520:	b	234b4 <__assert_fail@plt+0x10d18>
   23524:	and	r3, r0, #1
   23528:	add	r3, r3, r7
   2352c:	cmp	r3, #2
   23530:	movle	r3, #0
   23534:	movgt	r3, #1
   23538:	b	23490 <__assert_fail@plt+0x10cf4>
   2353c:	ldr	r7, [sp, #12]
   23540:	b	234e0 <__assert_fail@plt+0x10d44>
   23544:	ldrd	r2, [sp, #40]	; 0x28
   23548:	adds	r4, r2, #1
   2354c:	adc	r5, r3, #0
   23550:	cmp	r5, #0
   23554:	cmpeq	r4, #10
   23558:	beq	2358c <__assert_fail@plt+0x10df0>
   2355c:	mov	r3, #0
   23560:	mov	ip, r3
   23564:	b	234a8 <__assert_fail@plt+0x10d0c>
   23568:	mov	r2, #48	; 0x30
   2356c:	mvn	r3, fp
   23570:	strb	r2, [r7, #-1]
   23574:	add	r7, r7, r3
   23578:	ldr	r1, [sp, #36]	; 0x24
   2357c:	mov	r2, fp
   23580:	mov	r0, r7
   23584:	bl	121a8 <memcpy@plt>
   23588:	b	233f0 <__assert_fail@plt+0x10c54>
   2358c:	mov	r3, #0
   23590:	ldr	r7, [sp, #12]
   23594:	mov	ip, r3
   23598:	b	234e0 <__assert_fail@plt+0x10d44>
   2359c:	bl	12244 <__stack_chk_fail@plt>
   235a0:	mov	fp, r7
   235a4:	b	22edc <__assert_fail@plt+0x10740>
   235a8:	cmp	r3, #0
   235ac:	ldrne	r2, [sp, #12]
   235b0:	bne	23214 <__assert_fail@plt+0x10a78>
   235b4:	b	22ef8 <__assert_fail@plt+0x1075c>
   235b8:	andeq	r0, r0, r0
   235bc:	eormi	r0, r4, r0
   235c0:	push	{r4, r5, r6, r7, r8, r9, lr}
   235c4:	sub	sp, sp, #20
   235c8:	ldr	r6, [pc, #424]	; 23778 <__assert_fail@plt+0x10fdc>
   235cc:	subs	r4, r0, #0
   235d0:	mov	r9, r1
   235d4:	ldr	r3, [r6]
   235d8:	mov	r7, r2
   235dc:	str	r3, [sp, #12]
   235e0:	beq	236f0 <__assert_fail@plt+0x10f54>
   235e4:	ldrb	r3, [r4]
   235e8:	ldr	r5, [pc, #396]	; 2377c <__assert_fail@plt+0x10fe0>
   235ec:	cmp	r3, #39	; 0x27
   235f0:	addeq	r4, r4, #1
   235f4:	mov	r3, #4
   235f8:	add	r2, r5, #12
   235fc:	add	r1, r5, #20
   23600:	mov	r0, r4
   23604:	moveq	r8, #4
   23608:	movne	r8, #0
   2360c:	bl	41150 <fts_children@@Base+0xf6b4>
   23610:	cmp	r0, #0
   23614:	blt	23650 <__assert_fail@plt+0x10eb4>
   23618:	add	r5, r5, r0, lsl #2
   2361c:	mov	r2, #1
   23620:	ldr	r1, [r5, #12]
   23624:	mov	r3, #0
   23628:	mov	r0, #0
   2362c:	orr	r8, r8, r1
   23630:	strd	r2, [r7]
   23634:	str	r8, [r9]
   23638:	ldr	r2, [sp, #12]
   2363c:	ldr	r3, [r6]
   23640:	cmp	r2, r3
   23644:	bne	23774 <__assert_fail@plt+0x10fd8>
   23648:	add	sp, sp, #20
   2364c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23650:	ldr	r2, [pc, #296]	; 23780 <__assert_fail@plt+0x10fe4>
   23654:	mov	r3, r7
   23658:	str	r2, [sp]
   2365c:	add	r1, sp, #8
   23660:	mov	r2, #0
   23664:	mov	r0, r4
   23668:	bl	2e8b8 <__assert_fail@plt+0x1c11c>
   2366c:	cmp	r0, #0
   23670:	bne	236b8 <__assert_fail@plt+0x10f1c>
   23674:	ldrb	r3, [r4]
   23678:	sub	r3, r3, #48	; 0x30
   2367c:	cmp	r3, #9
   23680:	bls	236ac <__assert_fail@plt+0x10f10>
   23684:	ldr	r2, [sp, #8]
   23688:	cmp	r4, r2
   2368c:	bne	2369c <__assert_fail@plt+0x10f00>
   23690:	b	23748 <__assert_fail@plt+0x10fac>
   23694:	cmp	r2, r4
   23698:	beq	23748 <__assert_fail@plt+0x10fac>
   2369c:	ldrb	r3, [r4, #1]!
   236a0:	sub	r3, r3, #48	; 0x30
   236a4:	cmp	r3, #9
   236a8:	bhi	23694 <__assert_fail@plt+0x10ef8>
   236ac:	ldrd	r2, [r7]
   236b0:	str	r8, [r9]
   236b4:	b	236c4 <__assert_fail@plt+0x10f28>
   236b8:	mov	r3, #0
   236bc:	str	r3, [r9]
   236c0:	ldrd	r2, [r7]
   236c4:	orrs	r3, r2, r3
   236c8:	bne	23638 <__assert_fail@plt+0x10e9c>
   236cc:	ldr	r0, [pc, #176]	; 23784 <__assert_fail@plt+0x10fe8>
   236d0:	bl	123c4 <getenv@plt>
   236d4:	mov	r3, #0
   236d8:	cmp	r0, #0
   236dc:	moveq	r2, #1024	; 0x400
   236e0:	movne	r2, #512	; 0x200
   236e4:	mov	r0, #4
   236e8:	strd	r2, [r7]
   236ec:	b	23638 <__assert_fail@plt+0x10e9c>
   236f0:	ldr	r0, [pc, #144]	; 23788 <__assert_fail@plt+0x10fec>
   236f4:	bl	123c4 <getenv@plt>
   236f8:	subs	r4, r0, #0
   236fc:	bne	235e4 <__assert_fail@plt+0x10e48>
   23700:	ldr	r0, [pc, #132]	; 2378c <__assert_fail@plt+0x10ff0>
   23704:	bl	123c4 <getenv@plt>
   23708:	subs	r4, r0, #0
   2370c:	bne	235e4 <__assert_fail@plt+0x10e48>
   23710:	ldr	r0, [pc, #108]	; 23784 <__assert_fail@plt+0x10fe8>
   23714:	bl	123c4 <getenv@plt>
   23718:	subs	r3, r0, #0
   2371c:	moveq	r4, #1024	; 0x400
   23720:	moveq	r5, #0
   23724:	movne	r2, #512	; 0x200
   23728:	movne	r3, #0
   2372c:	strdeq	r4, [r7]
   23730:	strdne	r2, [r7]
   23734:	moveq	r0, r3
   23738:	streq	r3, [r9]
   2373c:	movne	r0, r4
   23740:	strne	r4, [r9]
   23744:	b	23638 <__assert_fail@plt+0x10e9c>
   23748:	ldrb	r3, [r2, #-1]
   2374c:	cmp	r3, #66	; 0x42
   23750:	orrne	r8, r8, #128	; 0x80
   23754:	beq	23760 <__assert_fail@plt+0x10fc4>
   23758:	orr	r8, r8, #32
   2375c:	b	236ac <__assert_fail@plt+0x10f10>
   23760:	ldrb	r3, [r2, #-2]
   23764:	orr	r8, r8, #384	; 0x180
   23768:	cmp	r3, #105	; 0x69
   2376c:	bne	236ac <__assert_fail@plt+0x10f10>
   23770:	b	23758 <__assert_fail@plt+0x10fbc>
   23774:	bl	12244 <__stack_chk_fail@plt>
   23778:	andeq	fp, r5, r0, ror #24
   2377c:	andeq	r8, r4, ip, asr #12
   23780:	muleq	r4, r4, r6
   23784:	andeq	r6, r4, r0, lsl r1
   23788:	andeq	r8, r4, ip, ror r6
   2378c:	andeq	r8, r4, r8, lsl #13
   23790:	push	{r4, r5, r6, r7, r8, lr}
   23794:	ldr	r6, [pc, #144]	; 2382c <__assert_fail@plt+0x11090>
   23798:	ldr	r4, [r6]
   2379c:	cmp	r4, #0
   237a0:	beq	237cc <__assert_fail@plt+0x11030>
   237a4:	ldr	r3, [r4]
   237a8:	cmp	r0, r3
   237ac:	bne	237c0 <__assert_fail@plt+0x11024>
   237b0:	b	23810 <__assert_fail@plt+0x11074>
   237b4:	ldr	r3, [r4]
   237b8:	cmp	r3, r0
   237bc:	beq	23810 <__assert_fail@plt+0x11074>
   237c0:	ldr	r4, [r4, #4]
   237c4:	cmp	r4, #0
   237c8:	bne	237b4 <__assert_fail@plt+0x11018>
   237cc:	mov	r5, r0
   237d0:	bl	120f4 <getpwuid@plt>
   237d4:	cmp	r0, #0
   237d8:	beq	23820 <__assert_fail@plt+0x11084>
   237dc:	ldr	r7, [r0]
   237e0:	mov	r0, r7
   237e4:	bl	1249c <strlen@plt>
   237e8:	add	r0, r0, #12
   237ec:	bic	r0, r0, #3
   237f0:	bl	2df04 <__assert_fail@plt+0x1b768>
   237f4:	mov	r1, r7
   237f8:	mov	r4, r0
   237fc:	str	r5, [r0], #8
   23800:	bl	1234c <strcpy@plt>
   23804:	ldr	r3, [r6]
   23808:	str	r4, [r6]
   2380c:	str	r3, [r4, #4]
   23810:	ldrb	r0, [r4, #8]
   23814:	cmp	r0, #0
   23818:	addne	r0, r4, #8
   2381c:	pop	{r4, r5, r6, r7, r8, pc}
   23820:	mov	r0, #12
   23824:	ldr	r7, [pc, #4]	; 23830 <__assert_fail@plt+0x11094>
   23828:	b	237f0 <__assert_fail@plt+0x11054>
   2382c:	andeq	ip, r5, r4, ror #25
   23830:	andeq	r8, r4, r0, lsr r6
   23834:	push	{r4, r5, r6, r7, r8, lr}
   23838:	mov	r5, r0
   2383c:	ldr	r6, [pc, #236]	; 23930 <__assert_fail@plt+0x11194>
   23840:	ldr	r4, [r6]
   23844:	cmp	r4, #0
   23848:	beq	23888 <__assert_fail@plt+0x110ec>
   2384c:	ldrb	r7, [r0]
   23850:	b	23860 <__assert_fail@plt+0x110c4>
   23854:	ldr	r4, [r4, #4]
   23858:	cmp	r4, #0
   2385c:	beq	23888 <__assert_fail@plt+0x110ec>
   23860:	ldrb	r3, [r4, #8]
   23864:	cmp	r3, r7
   23868:	bne	23854 <__assert_fail@plt+0x110b8>
   2386c:	mov	r1, r5
   23870:	add	r0, r4, #8
   23874:	bl	120dc <strcmp@plt>
   23878:	cmp	r0, #0
   2387c:	bne	23854 <__assert_fail@plt+0x110b8>
   23880:	mov	r0, r4
   23884:	pop	{r4, r5, r6, r7, r8, pc}
   23888:	ldr	r4, [r6, #4]
   2388c:	cmp	r4, #0
   23890:	beq	238d4 <__assert_fail@plt+0x11138>
   23894:	ldrb	r7, [r5]
   23898:	b	238a8 <__assert_fail@plt+0x1110c>
   2389c:	ldr	r4, [r4, #4]
   238a0:	cmp	r4, #0
   238a4:	beq	238d4 <__assert_fail@plt+0x11138>
   238a8:	ldrb	r3, [r4, #8]
   238ac:	cmp	r3, r7
   238b0:	bne	2389c <__assert_fail@plt+0x11100>
   238b4:	mov	r1, r5
   238b8:	add	r0, r4, #8
   238bc:	bl	120dc <strcmp@plt>
   238c0:	cmp	r0, #0
   238c4:	bne	2389c <__assert_fail@plt+0x11100>
   238c8:	mov	r4, r0
   238cc:	mov	r0, r4
   238d0:	pop	{r4, r5, r6, r7, r8, pc}
   238d4:	mov	r0, r5
   238d8:	bl	120b8 <getpwnam@plt>
   238dc:	mov	r4, r0
   238e0:	mov	r0, r5
   238e4:	bl	1249c <strlen@plt>
   238e8:	add	r0, r0, #12
   238ec:	bic	r0, r0, #3
   238f0:	bl	2df04 <__assert_fail@plt+0x1b768>
   238f4:	mov	r1, r5
   238f8:	mov	r7, r0
   238fc:	add	r0, r0, #8
   23900:	bl	1234c <strcpy@plt>
   23904:	cmp	r4, #0
   23908:	ldrne	r2, [r4, #8]
   2390c:	ldrne	r3, [r6]
   23910:	ldreq	r3, [r6, #4]
   23914:	movne	r4, r7
   23918:	strne	r7, [r6]
   2391c:	streq	r7, [r6, #4]
   23920:	mov	r0, r4
   23924:	strdne	r2, [r7]
   23928:	streq	r3, [r7, #4]
   2392c:	pop	{r4, r5, r6, r7, r8, pc}
   23930:	andeq	ip, r5, r4, ror #25
   23934:	push	{r4, r5, r6, r7, r8, lr}
   23938:	ldr	r6, [pc, #144]	; 239d0 <__assert_fail@plt+0x11234>
   2393c:	ldr	r4, [r6, #8]
   23940:	cmp	r4, #0
   23944:	beq	23970 <__assert_fail@plt+0x111d4>
   23948:	ldr	r3, [r4]
   2394c:	cmp	r0, r3
   23950:	bne	23964 <__assert_fail@plt+0x111c8>
   23954:	b	239b4 <__assert_fail@plt+0x11218>
   23958:	ldr	r3, [r4]
   2395c:	cmp	r3, r0
   23960:	beq	239b4 <__assert_fail@plt+0x11218>
   23964:	ldr	r4, [r4, #4]
   23968:	cmp	r4, #0
   2396c:	bne	23958 <__assert_fail@plt+0x111bc>
   23970:	mov	r5, r0
   23974:	bl	1276c <getgrgid@plt>
   23978:	cmp	r0, #0
   2397c:	beq	239c4 <__assert_fail@plt+0x11228>
   23980:	ldr	r7, [r0]
   23984:	mov	r0, r7
   23988:	bl	1249c <strlen@plt>
   2398c:	add	r0, r0, #12
   23990:	bic	r0, r0, #3
   23994:	bl	2df04 <__assert_fail@plt+0x1b768>
   23998:	mov	r1, r7
   2399c:	mov	r4, r0
   239a0:	str	r5, [r0], #8
   239a4:	bl	1234c <strcpy@plt>
   239a8:	ldr	r3, [r6, #8]
   239ac:	str	r4, [r6, #8]
   239b0:	str	r3, [r4, #4]
   239b4:	ldrb	r0, [r4, #8]
   239b8:	cmp	r0, #0
   239bc:	addne	r0, r4, #8
   239c0:	pop	{r4, r5, r6, r7, r8, pc}
   239c4:	mov	r0, #12
   239c8:	ldr	r7, [pc, #4]	; 239d4 <__assert_fail@plt+0x11238>
   239cc:	b	23994 <__assert_fail@plt+0x111f8>
   239d0:	andeq	ip, r5, r4, ror #25
   239d4:	andeq	r8, r4, r0, lsr r6
   239d8:	push	{r4, r5, r6, r7, r8, lr}
   239dc:	mov	r5, r0
   239e0:	ldr	r6, [pc, #236]	; 23ad4 <__assert_fail@plt+0x11338>
   239e4:	ldr	r4, [r6, #8]
   239e8:	cmp	r4, #0
   239ec:	beq	23a2c <__assert_fail@plt+0x11290>
   239f0:	ldrb	r7, [r0]
   239f4:	b	23a04 <__assert_fail@plt+0x11268>
   239f8:	ldr	r4, [r4, #4]
   239fc:	cmp	r4, #0
   23a00:	beq	23a2c <__assert_fail@plt+0x11290>
   23a04:	ldrb	r3, [r4, #8]
   23a08:	cmp	r3, r7
   23a0c:	bne	239f8 <__assert_fail@plt+0x1125c>
   23a10:	mov	r1, r5
   23a14:	add	r0, r4, #8
   23a18:	bl	120dc <strcmp@plt>
   23a1c:	cmp	r0, #0
   23a20:	bne	239f8 <__assert_fail@plt+0x1125c>
   23a24:	mov	r0, r4
   23a28:	pop	{r4, r5, r6, r7, r8, pc}
   23a2c:	ldr	r4, [r6, #12]
   23a30:	cmp	r4, #0
   23a34:	beq	23a78 <__assert_fail@plt+0x112dc>
   23a38:	ldrb	r7, [r5]
   23a3c:	b	23a4c <__assert_fail@plt+0x112b0>
   23a40:	ldr	r4, [r4, #4]
   23a44:	cmp	r4, #0
   23a48:	beq	23a78 <__assert_fail@plt+0x112dc>
   23a4c:	ldrb	r3, [r4, #8]
   23a50:	cmp	r3, r7
   23a54:	bne	23a40 <__assert_fail@plt+0x112a4>
   23a58:	mov	r1, r5
   23a5c:	add	r0, r4, #8
   23a60:	bl	120dc <strcmp@plt>
   23a64:	cmp	r0, #0
   23a68:	bne	23a40 <__assert_fail@plt+0x112a4>
   23a6c:	mov	r4, r0
   23a70:	mov	r0, r4
   23a74:	pop	{r4, r5, r6, r7, r8, pc}
   23a78:	mov	r0, r5
   23a7c:	bl	12778 <getgrnam@plt>
   23a80:	mov	r4, r0
   23a84:	mov	r0, r5
   23a88:	bl	1249c <strlen@plt>
   23a8c:	add	r0, r0, #12
   23a90:	bic	r0, r0, #3
   23a94:	bl	2df04 <__assert_fail@plt+0x1b768>
   23a98:	mov	r1, r5
   23a9c:	mov	r7, r0
   23aa0:	add	r0, r0, #8
   23aa4:	bl	1234c <strcpy@plt>
   23aa8:	cmp	r4, #0
   23aac:	ldrne	r2, [r4, #8]
   23ab0:	ldrne	r3, [r6, #8]
   23ab4:	ldreq	r3, [r6, #12]
   23ab8:	movne	r4, r7
   23abc:	strne	r7, [r6, #8]
   23ac0:	streq	r7, [r6, #12]
   23ac4:	mov	r0, r4
   23ac8:	strdne	r2, [r7]
   23acc:	streq	r3, [r7, #4]
   23ad0:	pop	{r4, r5, r6, r7, r8, pc}
   23ad4:	andeq	ip, r5, r4, ror #25
   23ad8:	push	{r4, r5, r6, r7, r8, fp, lr}
   23adc:	mov	r7, r2
   23ae0:	ldr	r6, [pc, #368]	; 23c58 <__assert_fail@plt+0x114bc>
   23ae4:	add	fp, sp, #24
   23ae8:	lsrs	r2, r7, #30
   23aec:	sub	sp, sp, #12
   23af0:	ldr	lr, [r6]
   23af4:	movne	ip, #1
   23af8:	moveq	ip, #0
   23afc:	lsls	r2, r7, #2
   23b00:	str	lr, [fp, #-32]	; 0xffffffe0
   23b04:	bmi	23c18 <__assert_fail@plt+0x1147c>
   23b08:	cmp	ip, #0
   23b0c:	bne	23c18 <__assert_fail@plt+0x1147c>
   23b10:	cmp	r2, #4016	; 0xfb0
   23b14:	mov	r5, r0
   23b18:	mov	r4, r1
   23b1c:	mov	r8, r3
   23b20:	bhi	23c08 <__assert_fail@plt+0x1146c>
   23b24:	add	r3, r2, #22
   23b28:	bic	r3, r3, #7
   23b2c:	sub	sp, sp, r3
   23b30:	add	r0, sp, #15
   23b34:	bic	r0, r0, #15
   23b38:	cmp	r0, #0
   23b3c:	beq	23c18 <__assert_fail@plt+0x1147c>
   23b40:	cmp	r7, #2
   23b44:	mov	r3, #1
   23b48:	str	r3, [r0, #4]
   23b4c:	movhi	r1, r4
   23b50:	movhi	ip, #0
   23b54:	movhi	r3, #2
   23b58:	bls	23ba0 <__assert_fail@plt+0x11404>
   23b5c:	ldrb	r2, [r1, #1]!
   23b60:	ldrb	lr, [r4, ip]
   23b64:	cmp	lr, r2
   23b68:	bne	23b84 <__assert_fail@plt+0x113e8>
   23b6c:	b	23c3c <__assert_fail@plt+0x114a0>
   23b70:	ldr	lr, [r0, ip, lsl #2]
   23b74:	sub	ip, ip, lr
   23b78:	ldrb	lr, [r4, ip]
   23b7c:	cmp	lr, r2
   23b80:	beq	23c3c <__assert_fail@plt+0x114a0>
   23b84:	cmp	ip, #0
   23b88:	bne	23b70 <__assert_fail@plt+0x113d4>
   23b8c:	mov	ip, #0
   23b90:	str	r3, [r0, r3, lsl #2]
   23b94:	add	r3, r3, #1
   23b98:	cmp	r7, r3
   23b9c:	bne	23b5c <__assert_fail@plt+0x113c0>
   23ba0:	mov	r3, #0
   23ba4:	str	r3, [r8]
   23ba8:	ldrb	r2, [r5]
   23bac:	mov	r1, r5
   23bb0:	cmp	r2, #0
   23bb4:	beq	23be8 <__assert_fail@plt+0x1144c>
   23bb8:	ldrb	ip, [r4, r3]
   23bbc:	cmp	ip, r2
   23bc0:	beq	23c20 <__assert_fail@plt+0x11484>
   23bc4:	cmp	r3, #0
   23bc8:	addeq	r5, r5, #1
   23bcc:	ldrbeq	r2, [r1, #1]
   23bd0:	ldrne	ip, [r0, r3, lsl #2]
   23bd4:	addeq	r1, r1, #1
   23bd8:	addne	r5, r5, ip
   23bdc:	subne	r3, r3, ip
   23be0:	cmp	r2, #0
   23be4:	bne	23bb8 <__assert_fail@plt+0x1141c>
   23be8:	bl	41794 <fts_children@@Base+0xfcf8>
   23bec:	mov	r0, #1
   23bf0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   23bf4:	ldr	r3, [r6]
   23bf8:	cmp	r2, r3
   23bfc:	bne	23c54 <__assert_fail@plt+0x114b8>
   23c00:	sub	sp, fp, #24
   23c04:	pop	{r4, r5, r6, r7, r8, fp, pc}
   23c08:	mov	r0, r2
   23c0c:	bl	41758 <fts_children@@Base+0xfcbc>
   23c10:	cmp	r0, #0
   23c14:	bne	23b40 <__assert_fail@plt+0x113a4>
   23c18:	mov	r0, #0
   23c1c:	b	23bf0 <__assert_fail@plt+0x11454>
   23c20:	add	r3, r3, #1
   23c24:	cmp	r7, r3
   23c28:	add	ip, r1, #1
   23c2c:	beq	23c4c <__assert_fail@plt+0x114b0>
   23c30:	ldrb	r2, [r1, #1]
   23c34:	mov	r1, ip
   23c38:	b	23bb0 <__assert_fail@plt+0x11414>
   23c3c:	add	ip, ip, #1
   23c40:	sub	r2, r3, ip
   23c44:	str	r2, [r0, r3, lsl #2]
   23c48:	b	23b94 <__assert_fail@plt+0x113f8>
   23c4c:	str	r5, [r8]
   23c50:	b	23be8 <__assert_fail@plt+0x1144c>
   23c54:	bl	12244 <__stack_chk_fail@plt>
   23c58:	andeq	fp, r5, r0, ror #24
   23c5c:	push	{r4, lr}
   23c60:	mov	r2, #179	; 0xb3
   23c64:	ldr	r3, [pc, #8]	; 23c74 <__assert_fail@plt+0x114d8>
   23c68:	ldr	r1, [pc, #8]	; 23c78 <__assert_fail@plt+0x114dc>
   23c6c:	ldr	r0, [pc, #8]	; 23c7c <__assert_fail@plt+0x114e0>
   23c70:	bl	1279c <__assert_fail@plt>
   23c74:			; <UNDEFINED> instruction: 0x000486bc
   23c78:	ldrdeq	r8, [r4], -r0
   23c7c:	ldrdeq	r8, [r4], -ip
   23c80:	ldr	r3, [pc, #2124]	; 244d4 <__assert_fail@plt+0x11d38>
   23c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c88:	add	fp, sp, #32
   23c8c:	sub	sp, sp, #196	; 0xc4
   23c90:	ldr	r3, [r3]
   23c94:	str	r0, [fp, #-220]	; 0xffffff24
   23c98:	mov	r0, r1
   23c9c:	mov	r7, r1
   23ca0:	str	r2, [fp, #-224]	; 0xffffff20
   23ca4:	str	r3, [fp, #-40]	; 0xffffffd8
   23ca8:	bl	41858 <fts_children@@Base+0xfdbc>
   23cac:	mov	r2, #44	; 0x2c
   23cb0:	str	r0, [fp, #-216]	; 0xffffff28
   23cb4:	umull	r0, r1, r0, r2
   23cb8:	adds	r3, r1, #0
   23cbc:	movne	r3, #1
   23cc0:	cmp	r0, #0
   23cc4:	blt	24084 <__assert_fail@plt+0x118e8>
   23cc8:	cmp	r3, #0
   23ccc:	bne	24084 <__assert_fail@plt+0x118e8>
   23cd0:	ldr	r3, [fp, #-216]	; 0xffffff28
   23cd4:	lsl	r4, r3, #2
   23cd8:	add	r0, r4, r3
   23cdc:	add	r0, r3, r0, lsl #1
   23ce0:	lsl	r0, r0, #2
   23ce4:	cmp	r0, #4016	; 0xfb0
   23ce8:	bhi	240a4 <__assert_fail@plt+0x11908>
   23cec:	add	r3, r0, #22
   23cf0:	bic	r3, r3, #7
   23cf4:	sub	sp, sp, r3
   23cf8:	add	r8, sp, #15
   23cfc:	bic	r8, r8, #15
   23d00:	cmp	r8, #0
   23d04:	beq	24084 <__assert_fail@plt+0x118e8>
   23d08:	ldr	r3, [fp, #-216]	; 0xffffff28
   23d0c:	mov	r5, #0
   23d10:	add	r4, r4, r3
   23d14:	str	r7, [fp, #-192]	; 0xffffff40
   23d18:	add	r9, r8, r4, lsl #3
   23d1c:	str	r5, [fp, #-200]	; 0xffffff38
   23d20:	strb	r5, [fp, #-208]	; 0xffffff30
   23d24:	str	r5, [fp, #-204]	; 0xffffff34
   23d28:	strb	r5, [fp, #-196]	; 0xffffff3c
   23d2c:	add	r4, r8, #16
   23d30:	ldr	r6, [pc, #1952]	; 244d8 <__assert_fail@plt+0x11d3c>
   23d34:	b	23db8 <__assert_fail@plt+0x1161c>
   23d38:	ldrb	r3, [r7]
   23d3c:	and	r2, r3, #31
   23d40:	lsr	r3, r3, #5
   23d44:	ldr	r3, [r6, r3, lsl #2]
   23d48:	lsr	r3, r3, r2
   23d4c:	tst	r3, #1
   23d50:	beq	240b0 <__assert_fail@plt+0x11914>
   23d54:	mov	r3, #1
   23d58:	str	r3, [fp, #-188]	; 0xffffff44
   23d5c:	ldrb	r7, [r7]
   23d60:	strb	r3, [fp, #-184]	; 0xffffff48
   23d64:	strb	r3, [fp, #-196]	; 0xffffff3c
   23d68:	str	r7, [fp, #-180]	; 0xffffff4c
   23d6c:	cmp	r7, #0
   23d70:	beq	23e2c <__assert_fail@plt+0x11690>
   23d74:	mov	r3, #1
   23d78:	ldr	r1, [fp, #-192]	; 0xffffff40
   23d7c:	sub	r2, fp, #176	; 0xb0
   23d80:	cmp	r1, r2
   23d84:	ldr	r2, [fp, #-188]	; 0xffffff44
   23d88:	strne	r1, [r4, #-16]
   23d8c:	beq	240cc <__assert_fail@plt+0x11930>
   23d90:	cmp	r3, #0
   23d94:	str	r2, [r4, #-12]
   23d98:	strb	r3, [r4, #-8]
   23d9c:	ldrne	r3, [fp, #-180]	; 0xffffff4c
   23da0:	ldr	r7, [fp, #-192]	; 0xffffff40
   23da4:	strne	r3, [r4, #-4]
   23da8:	add	r4, r4, #40	; 0x28
   23dac:	add	r7, r7, r2
   23db0:	strb	r5, [fp, #-196]	; 0xffffff3c
   23db4:	str	r7, [fp, #-192]	; 0xffffff40
   23db8:	ldrb	r3, [fp, #-208]	; 0xffffff30
   23dbc:	cmp	r3, #0
   23dc0:	beq	23d38 <__assert_fail@plt+0x1159c>
   23dc4:	bl	12334 <__ctype_get_mb_cur_max@plt>
   23dc8:	mov	r1, r0
   23dcc:	mov	r0, r7
   23dd0:	bl	2d934 <__assert_fail@plt+0x1b198>
   23dd4:	sub	r3, fp, #204	; 0xcc
   23dd8:	mov	r1, r7
   23ddc:	mov	r2, r0
   23de0:	sub	r0, fp, #180	; 0xb4
   23de4:	bl	31be8 <fts_children@@Base+0x14c>
   23de8:	cmn	r0, #1
   23dec:	str	r0, [fp, #-188]	; 0xffffff44
   23df0:	beq	240e4 <__assert_fail@plt+0x11948>
   23df4:	cmn	r0, #2
   23df8:	beq	240fc <__assert_fail@plt+0x11960>
   23dfc:	cmp	r0, #0
   23e00:	beq	2411c <__assert_fail@plt+0x11980>
   23e04:	ldr	r7, [fp, #-180]	; 0xffffff4c
   23e08:	mov	sl, #1
   23e0c:	sub	r0, fp, #204	; 0xcc
   23e10:	strb	sl, [fp, #-184]	; 0xffffff48
   23e14:	bl	121e4 <mbsinit@plt>
   23e18:	strb	sl, [fp, #-196]	; 0xffffff3c
   23e1c:	cmp	r0, #0
   23e20:	strbne	r5, [fp, #-208]	; 0xffffff30
   23e24:	cmp	r7, #0
   23e28:	bne	23d74 <__assert_fail@plt+0x115d8>
   23e2c:	ldr	r3, [fp, #-216]	; 0xffffff28
   23e30:	cmp	r3, #2
   23e34:	mov	r3, #1
   23e38:	str	r3, [r9, #4]
   23e3c:	bls	23ee0 <__assert_fail@plt+0x11744>
   23e40:	mov	sl, #2
   23e44:	mov	r4, r7
   23e48:	str	r7, [fp, #-228]	; 0xffffff1c
   23e4c:	mov	r7, sl
   23e50:	ldr	sl, [fp, #-216]	; 0xffffff28
   23e54:	mov	r5, r8
   23e58:	ldrb	r6, [r5, #48]	; 0x30
   23e5c:	b	23e8c <__assert_fail@plt+0x116f0>
   23e60:	ldrb	r2, [r3, #8]
   23e64:	cmp	r2, #0
   23e68:	beq	23e9c <__assert_fail@plt+0x11700>
   23e6c:	ldr	r3, [r3, #12]
   23e70:	ldr	r2, [r5, #52]	; 0x34
   23e74:	cmp	r2, r3
   23e78:	beq	23ec0 <__assert_fail@plt+0x11724>
   23e7c:	cmp	r4, #0
   23e80:	beq	243f8 <__assert_fail@plt+0x11c5c>
   23e84:	ldr	r3, [r9, r4, lsl #2]
   23e88:	sub	r4, r4, r3
   23e8c:	add	r3, r4, r4, lsl #2
   23e90:	cmp	r6, #0
   23e94:	add	r3, r8, r3, lsl #3
   23e98:	bne	23e60 <__assert_fail@plt+0x116c4>
   23e9c:	ldr	r2, [r5, #44]	; 0x2c
   23ea0:	ldr	r1, [r3, #4]
   23ea4:	cmp	r2, r1
   23ea8:	bne	23e7c <__assert_fail@plt+0x116e0>
   23eac:	ldr	r1, [r3]
   23eb0:	ldr	r0, [r5, #40]	; 0x28
   23eb4:	bl	12208 <memcmp@plt>
   23eb8:	cmp	r0, #0
   23ebc:	bne	23e7c <__assert_fail@plt+0x116e0>
   23ec0:	add	r4, r4, #1
   23ec4:	sub	r2, r7, r4
   23ec8:	str	r2, [r9, r7, lsl #2]
   23ecc:	add	r7, r7, #1
   23ed0:	cmp	sl, r7
   23ed4:	add	r5, r5, #40	; 0x28
   23ed8:	bne	23e58 <__assert_fail@plt+0x116bc>
   23edc:	ldr	r7, [fp, #-228]	; 0xffffff1c
   23ee0:	ldr	r2, [fp, #-220]	; 0xffffff24
   23ee4:	ldr	sl, [pc, #1516]	; 244d8 <__assert_fail@plt+0x11d3c>
   23ee8:	str	r2, [fp, #-136]	; 0xffffff78
   23eec:	str	r2, [fp, #-80]	; 0xffffffb0
   23ef0:	ldr	r2, [fp, #-224]	; 0xffffff20
   23ef4:	mov	r6, #1
   23ef8:	mov	r3, #0
   23efc:	str	r3, [fp, #-144]	; 0xffffff70
   23f00:	str	r3, [r2]
   23f04:	strb	r3, [fp, #-152]	; 0xffffff68
   23f08:	str	r3, [fp, #-148]	; 0xffffff6c
   23f0c:	strb	r3, [fp, #-140]	; 0xffffff74
   23f10:	strb	r3, [fp, #-96]	; 0xffffffa0
   23f14:	str	r3, [fp, #-92]	; 0xffffffa4
   23f18:	strb	r3, [fp, #-84]	; 0xffffffac
   23f1c:	str	r3, [fp, #-88]	; 0xffffffa8
   23f20:	cmp	r3, #0
   23f24:	ldreq	r5, [fp, #-80]	; 0xffffffb0
   23f28:	beq	23fdc <__assert_fail@plt+0x11840>
   23f2c:	ldrb	r3, [fp, #-72]	; 0xffffffb8
   23f30:	cmp	r3, #0
   23f34:	ldrne	r4, [fp, #-68]	; 0xffffffbc
   23f38:	bne	24018 <__assert_fail@plt+0x1187c>
   23f3c:	add	r3, r7, r7, lsl #2
   23f40:	add	r3, r8, r3, lsl #3
   23f44:	ldr	r2, [r3, #4]
   23f48:	ldr	r4, [fp, #-76]	; 0xffffffb4
   23f4c:	cmp	r2, r4
   23f50:	beq	241c0 <__assert_fail@plt+0x11a24>
   23f54:	cmp	r7, #0
   23f58:	bne	241e4 <__assert_fail@plt+0x11a48>
   23f5c:	ldrb	r3, [fp, #-140]	; 0xffffff74
   23f60:	cmp	r3, #0
   23f64:	bne	24440 <__assert_fail@plt+0x11ca4>
   23f68:	ldrb	r3, [fp, #-152]	; 0xffffff68
   23f6c:	ldr	r4, [fp, #-136]	; 0xffffff78
   23f70:	cmp	r3, #0
   23f74:	bne	24390 <__assert_fail@plt+0x11bf4>
   23f78:	ldrb	r3, [r4]
   23f7c:	and	r2, r3, #31
   23f80:	lsr	r3, r3, #5
   23f84:	ldr	r3, [sl, r3, lsl #2]
   23f88:	lsr	r3, r3, r2
   23f8c:	tst	r3, #1
   23f90:	beq	2437c <__assert_fail@plt+0x11be0>
   23f94:	str	r6, [fp, #-132]	; 0xffffff7c
   23f98:	ldrb	r4, [r4]
   23f9c:	strb	r6, [fp, #-128]	; 0xffffff80
   23fa0:	strb	r6, [fp, #-140]	; 0xffffff74
   23fa4:	str	r4, [fp, #-124]	; 0xffffff84
   23fa8:	cmp	r4, #0
   23fac:	beq	2427c <__assert_fail@plt+0x11ae0>
   23fb0:	ldr	r4, [fp, #-136]	; 0xffffff78
   23fb4:	ldr	r3, [fp, #-132]	; 0xffffff7c
   23fb8:	ldr	r5, [fp, #-80]	; 0xffffffb0
   23fbc:	add	r4, r4, r3
   23fc0:	ldr	r3, [fp, #-76]	; 0xffffffb4
   23fc4:	str	r4, [fp, #-136]	; 0xffffff78
   23fc8:	add	r5, r5, r3
   23fcc:	mov	r3, #0
   23fd0:	str	r5, [fp, #-80]	; 0xffffffb0
   23fd4:	strb	r3, [fp, #-140]	; 0xffffff74
   23fd8:	strb	r3, [fp, #-84]	; 0xffffffac
   23fdc:	ldrb	r3, [fp, #-96]	; 0xffffffa0
   23fe0:	cmp	r3, #0
   23fe4:	bne	24158 <__assert_fail@plt+0x119bc>
   23fe8:	ldrb	r3, [r5]
   23fec:	and	r2, r3, #31
   23ff0:	lsr	r3, r3, #5
   23ff4:	ldr	r3, [sl, r3, lsl #2]
   23ff8:	lsr	r3, r3, r2
   23ffc:	tst	r3, #1
   24000:	beq	24144 <__assert_fail@plt+0x119a8>
   24004:	str	r6, [fp, #-76]	; 0xffffffb4
   24008:	ldrb	r4, [r5]
   2400c:	strb	r6, [fp, #-72]	; 0xffffffb8
   24010:	strb	r6, [fp, #-84]	; 0xffffffac
   24014:	str	r4, [fp, #-68]	; 0xffffffbc
   24018:	cmp	r4, #0
   2401c:	beq	24074 <__assert_fail@plt+0x118d8>
   24020:	add	r3, r7, r7, lsl #2
   24024:	add	r3, r8, r3, lsl #3
   24028:	ldrb	r2, [r3, #8]
   2402c:	cmp	r2, #0
   24030:	beq	23f44 <__assert_fail@plt+0x117a8>
   24034:	ldr	r3, [r3, #12]
   24038:	cmp	r3, r4
   2403c:	bne	23f54 <__assert_fail@plt+0x117b8>
   24040:	ldr	r4, [fp, #-76]	; 0xffffffb4
   24044:	ldr	r5, [fp, #-80]	; 0xffffffb0
   24048:	ldr	r3, [fp, #-216]	; 0xffffff28
   2404c:	add	r7, r7, #1
   24050:	cmp	r3, r7
   24054:	add	r5, r5, r4
   24058:	mov	r3, #0
   2405c:	str	r5, [fp, #-80]	; 0xffffffb0
   24060:	strb	r3, [fp, #-84]	; 0xffffffac
   24064:	bne	23fdc <__assert_fail@plt+0x11840>
   24068:	ldr	r2, [fp, #-224]	; 0xffffff20
   2406c:	ldr	r3, [fp, #-136]	; 0xffffff78
   24070:	str	r3, [r2]
   24074:	mov	r0, r8
   24078:	bl	41794 <fts_children@@Base+0xfcf8>
   2407c:	mov	r0, #1
   24080:	b	24088 <__assert_fail@plt+0x118ec>
   24084:	mov	r0, #0
   24088:	ldr	r3, [pc, #1092]	; 244d4 <__assert_fail@plt+0x11d38>
   2408c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   24090:	ldr	r3, [r3]
   24094:	cmp	r2, r3
   24098:	bne	244d0 <__assert_fail@plt+0x11d34>
   2409c:	sub	sp, fp, #32
   240a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   240a4:	bl	41758 <fts_children@@Base+0xfcbc>
   240a8:	mov	r8, r0
   240ac:	b	23d00 <__assert_fail@plt+0x11564>
   240b0:	sub	r0, fp, #204	; 0xcc
   240b4:	bl	121e4 <mbsinit@plt>
   240b8:	cmp	r0, #0
   240bc:	beq	244a8 <__assert_fail@plt+0x11d0c>
   240c0:	mov	r3, #1
   240c4:	strb	r3, [fp, #-208]	; 0xffffff30
   240c8:	b	23dc4 <__assert_fail@plt+0x11628>
   240cc:	mov	r0, r4
   240d0:	bl	121a8 <memcpy@plt>
   240d4:	str	r4, [r4, #-16]
   240d8:	ldrb	r3, [fp, #-184]	; 0xffffff48
   240dc:	ldr	r2, [fp, #-188]	; 0xffffff44
   240e0:	b	23d90 <__assert_fail@plt+0x115f4>
   240e4:	mov	r3, #1
   240e8:	str	r3, [fp, #-188]	; 0xffffff44
   240ec:	strb	r3, [fp, #-196]	; 0xffffff3c
   240f0:	strb	r5, [fp, #-184]	; 0xffffff48
   240f4:	mov	r3, #0
   240f8:	b	23d78 <__assert_fail@plt+0x115dc>
   240fc:	ldr	r0, [fp, #-192]	; 0xffffff40
   24100:	bl	1249c <strlen@plt>
   24104:	mov	r3, #1
   24108:	strb	r3, [fp, #-196]	; 0xffffff3c
   2410c:	strb	r5, [fp, #-184]	; 0xffffff48
   24110:	mov	r3, #0
   24114:	str	r0, [fp, #-188]	; 0xffffff44
   24118:	b	23d78 <__assert_fail@plt+0x115dc>
   2411c:	ldr	r3, [fp, #-192]	; 0xffffff40
   24120:	mov	r2, #1
   24124:	str	r2, [fp, #-188]	; 0xffffff44
   24128:	ldrb	r3, [r3]
   2412c:	cmp	r3, #0
   24130:	bne	244bc <__assert_fail@plt+0x11d20>
   24134:	ldr	r7, [fp, #-180]	; 0xffffff4c
   24138:	cmp	r7, #0
   2413c:	beq	23e08 <__assert_fail@plt+0x1166c>
   24140:	bl	23c5c <__assert_fail@plt+0x114c0>
   24144:	sub	r0, fp, #92	; 0x5c
   24148:	bl	121e4 <mbsinit@plt>
   2414c:	cmp	r0, #0
   24150:	beq	244a8 <__assert_fail@plt+0x11d0c>
   24154:	strb	r6, [fp, #-96]	; 0xffffffa0
   24158:	bl	12334 <__ctype_get_mb_cur_max@plt>
   2415c:	mov	r1, r0
   24160:	mov	r0, r5
   24164:	bl	2d934 <__assert_fail@plt+0x1b198>
   24168:	sub	r3, fp, #92	; 0x5c
   2416c:	mov	r1, r5
   24170:	mov	r2, r0
   24174:	sub	r0, fp, #68	; 0x44
   24178:	bl	31be8 <fts_children@@Base+0x14c>
   2417c:	cmn	r0, #1
   24180:	str	r0, [fp, #-76]	; 0xffffffb4
   24184:	beq	24368 <__assert_fail@plt+0x11bcc>
   24188:	cmn	r0, #2
   2418c:	beq	24400 <__assert_fail@plt+0x11c64>
   24190:	cmp	r0, #0
   24194:	beq	2441c <__assert_fail@plt+0x11c80>
   24198:	ldr	r4, [fp, #-68]	; 0xffffffbc
   2419c:	sub	r0, fp, #92	; 0x5c
   241a0:	strb	r6, [fp, #-72]	; 0xffffffb8
   241a4:	bl	121e4 <mbsinit@plt>
   241a8:	cmp	r0, #0
   241ac:	movne	r3, #0
   241b0:	strbeq	r6, [fp, #-84]	; 0xffffffac
   241b4:	strbne	r6, [fp, #-84]	; 0xffffffac
   241b8:	strbne	r3, [fp, #-96]	; 0xffffffa0
   241bc:	b	24018 <__assert_fail@plt+0x1187c>
   241c0:	ldr	r5, [fp, #-80]	; 0xffffffb0
   241c4:	ldr	r0, [r3]
   241c8:	mov	r1, r5
   241cc:	mov	r2, r4
   241d0:	bl	12208 <memcmp@plt>
   241d4:	cmp	r0, #0
   241d8:	beq	24048 <__assert_fail@plt+0x118ac>
   241dc:	cmp	r7, #0
   241e0:	beq	23f5c <__assert_fail@plt+0x117c0>
   241e4:	ldr	r5, [r9, r7, lsl #2]
   241e8:	sub	r3, r7, r5
   241ec:	cmp	r5, #0
   241f0:	str	r3, [fp, #-220]	; 0xffffff24
   241f4:	beq	24360 <__assert_fail@plt+0x11bc4>
   241f8:	ldrb	r3, [fp, #-140]	; 0xffffff74
   241fc:	cmp	r3, #0
   24200:	ldreq	r4, [fp, #-136]	; 0xffffff78
   24204:	beq	24238 <__assert_fail@plt+0x11a9c>
   24208:	ldrb	r3, [fp, #-128]	; 0xffffff80
   2420c:	cmp	r3, #0
   24210:	ldrne	r4, [fp, #-124]	; 0xffffff84
   24214:	bne	24274 <__assert_fail@plt+0x11ad8>
   24218:	ldr	r4, [fp, #-136]	; 0xffffff78
   2421c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   24220:	subs	r5, r5, #1
   24224:	add	r4, r4, r3
   24228:	mov	r3, #0
   2422c:	str	r4, [fp, #-136]	; 0xffffff78
   24230:	strb	r3, [fp, #-140]	; 0xffffff74
   24234:	beq	2435c <__assert_fail@plt+0x11bc0>
   24238:	ldrb	r3, [fp, #-152]	; 0xffffff68
   2423c:	cmp	r3, #0
   24240:	bne	24294 <__assert_fail@plt+0x11af8>
   24244:	ldrb	r3, [r4]
   24248:	and	r2, r3, #31
   2424c:	lsr	r3, r3, #5
   24250:	ldr	r3, [sl, r3, lsl #2]
   24254:	lsr	r3, r3, r2
   24258:	tst	r3, #1
   2425c:	beq	24280 <__assert_fail@plt+0x11ae4>
   24260:	str	r6, [fp, #-132]	; 0xffffff7c
   24264:	ldrb	r4, [r4]
   24268:	strb	r6, [fp, #-128]	; 0xffffff80
   2426c:	strb	r6, [fp, #-140]	; 0xffffff74
   24270:	str	r4, [fp, #-124]	; 0xffffff84
   24274:	cmp	r4, #0
   24278:	bne	24218 <__assert_fail@plt+0x11a7c>
   2427c:	bl	1273c <abort@plt>
   24280:	sub	r0, fp, #148	; 0x94
   24284:	bl	121e4 <mbsinit@plt>
   24288:	cmp	r0, #0
   2428c:	beq	244a8 <__assert_fail@plt+0x11d0c>
   24290:	strb	r6, [fp, #-152]	; 0xffffff68
   24294:	bl	12334 <__ctype_get_mb_cur_max@plt>
   24298:	mov	r1, r0
   2429c:	mov	r0, r4
   242a0:	bl	2d934 <__assert_fail@plt+0x1b198>
   242a4:	sub	r3, fp, #148	; 0x94
   242a8:	mov	r1, r4
   242ac:	mov	r2, r0
   242b0:	sub	r0, fp, #124	; 0x7c
   242b4:	bl	31be8 <fts_children@@Base+0x14c>
   242b8:	cmn	r0, #1
   242bc:	str	r0, [fp, #-132]	; 0xffffff7c
   242c0:	beq	242fc <__assert_fail@plt+0x11b60>
   242c4:	cmn	r0, #2
   242c8:	beq	2430c <__assert_fail@plt+0x11b70>
   242cc:	cmp	r0, #0
   242d0:	beq	24328 <__assert_fail@plt+0x11b8c>
   242d4:	ldr	r4, [fp, #-124]	; 0xffffff84
   242d8:	sub	r0, fp, #148	; 0x94
   242dc:	strb	r6, [fp, #-128]	; 0xffffff80
   242e0:	bl	121e4 <mbsinit@plt>
   242e4:	cmp	r0, #0
   242e8:	movne	r3, #0
   242ec:	strbeq	r6, [fp, #-140]	; 0xffffff74
   242f0:	strbne	r6, [fp, #-140]	; 0xffffff74
   242f4:	strbne	r3, [fp, #-152]	; 0xffffff68
   242f8:	b	24274 <__assert_fail@plt+0x11ad8>
   242fc:	mov	r3, #0
   24300:	str	r6, [fp, #-132]	; 0xffffff7c
   24304:	strb	r3, [fp, #-128]	; 0xffffff80
   24308:	b	24218 <__assert_fail@plt+0x11a7c>
   2430c:	ldr	r4, [fp, #-136]	; 0xffffff78
   24310:	mov	r0, r4
   24314:	bl	1249c <strlen@plt>
   24318:	mov	r3, #0
   2431c:	strb	r3, [fp, #-128]	; 0xffffff80
   24320:	str	r0, [fp, #-132]	; 0xffffff7c
   24324:	b	2421c <__assert_fail@plt+0x11a80>
   24328:	ldr	r4, [fp, #-136]	; 0xffffff78
   2432c:	str	r6, [fp, #-132]	; 0xffffff7c
   24330:	ldrb	r3, [r4]
   24334:	cmp	r3, #0
   24338:	bne	244bc <__assert_fail@plt+0x11d20>
   2433c:	ldr	r4, [fp, #-124]	; 0xffffff84
   24340:	cmp	r4, #0
   24344:	beq	242d8 <__assert_fail@plt+0x11b3c>
   24348:	ldr	r3, [pc, #396]	; 244dc <__assert_fail@plt+0x11d40>
   2434c:	mov	r2, #179	; 0xb3
   24350:	ldr	r1, [pc, #392]	; 244e0 <__assert_fail@plt+0x11d44>
   24354:	ldr	r0, [pc, #392]	; 244e4 <__assert_fail@plt+0x11d48>
   24358:	bl	1279c <__assert_fail@plt>
   2435c:	ldr	r7, [fp, #-220]	; 0xffffff24
   24360:	ldrb	r3, [fp, #-84]	; 0xffffffac
   24364:	b	23f20 <__assert_fail@plt+0x11784>
   24368:	mov	r3, #0
   2436c:	str	r6, [fp, #-76]	; 0xffffffb4
   24370:	strb	r6, [fp, #-84]	; 0xffffffac
   24374:	strb	r3, [fp, #-72]	; 0xffffffb8
   24378:	b	23f3c <__assert_fail@plt+0x117a0>
   2437c:	sub	r0, fp, #148	; 0x94
   24380:	bl	121e4 <mbsinit@plt>
   24384:	cmp	r0, #0
   24388:	beq	244a8 <__assert_fail@plt+0x11d0c>
   2438c:	strb	r6, [fp, #-152]	; 0xffffff68
   24390:	bl	12334 <__ctype_get_mb_cur_max@plt>
   24394:	mov	r1, r0
   24398:	mov	r0, r4
   2439c:	bl	2d934 <__assert_fail@plt+0x1b198>
   243a0:	sub	r3, fp, #148	; 0x94
   243a4:	mov	r1, r4
   243a8:	mov	r2, r0
   243ac:	sub	r0, fp, #124	; 0x7c
   243b0:	bl	31be8 <fts_children@@Base+0x14c>
   243b4:	cmn	r0, #1
   243b8:	str	r0, [fp, #-132]	; 0xffffff7c
   243bc:	beq	24454 <__assert_fail@plt+0x11cb8>
   243c0:	cmn	r0, #2
   243c4:	beq	24468 <__assert_fail@plt+0x11ccc>
   243c8:	cmp	r0, #0
   243cc:	beq	24484 <__assert_fail@plt+0x11ce8>
   243d0:	ldr	r4, [fp, #-124]	; 0xffffff84
   243d4:	sub	r0, fp, #148	; 0x94
   243d8:	strb	r6, [fp, #-128]	; 0xffffff80
   243dc:	bl	121e4 <mbsinit@plt>
   243e0:	cmp	r0, #0
   243e4:	movne	r3, #0
   243e8:	strbeq	r6, [fp, #-140]	; 0xffffff74
   243ec:	strbne	r6, [fp, #-140]	; 0xffffff74
   243f0:	strbne	r3, [fp, #-152]	; 0xffffff68
   243f4:	b	23fa8 <__assert_fail@plt+0x1180c>
   243f8:	str	r7, [r9, r7, lsl #2]
   243fc:	b	23ecc <__assert_fail@plt+0x11730>
   24400:	ldr	r0, [fp, #-80]	; 0xffffffb0
   24404:	bl	1249c <strlen@plt>
   24408:	mov	r3, #0
   2440c:	strb	r6, [fp, #-84]	; 0xffffffac
   24410:	strb	r3, [fp, #-72]	; 0xffffffb8
   24414:	str	r0, [fp, #-76]	; 0xffffffb4
   24418:	b	23f3c <__assert_fail@plt+0x117a0>
   2441c:	ldr	r5, [fp, #-80]	; 0xffffffb0
   24420:	str	r6, [fp, #-76]	; 0xffffffb4
   24424:	ldrb	r3, [r5]
   24428:	cmp	r3, #0
   2442c:	bne	244bc <__assert_fail@plt+0x11d20>
   24430:	ldr	r4, [fp, #-68]	; 0xffffffbc
   24434:	cmp	r4, #0
   24438:	beq	2419c <__assert_fail@plt+0x11a00>
   2443c:	b	24140 <__assert_fail@plt+0x119a4>
   24440:	ldrb	r3, [fp, #-128]	; 0xffffff80
   24444:	cmp	r3, #0
   24448:	ldrne	r4, [fp, #-124]	; 0xffffff84
   2444c:	beq	23fb0 <__assert_fail@plt+0x11814>
   24450:	b	23fa8 <__assert_fail@plt+0x1180c>
   24454:	mov	r3, #0
   24458:	str	r6, [fp, #-132]	; 0xffffff7c
   2445c:	strb	r3, [fp, #-128]	; 0xffffff80
   24460:	ldr	r4, [fp, #-136]	; 0xffffff78
   24464:	b	23fb4 <__assert_fail@plt+0x11818>
   24468:	ldr	r4, [fp, #-136]	; 0xffffff78
   2446c:	mov	r0, r4
   24470:	bl	1249c <strlen@plt>
   24474:	mov	r3, #0
   24478:	strb	r3, [fp, #-128]	; 0xffffff80
   2447c:	str	r0, [fp, #-132]	; 0xffffff7c
   24480:	b	23fb4 <__assert_fail@plt+0x11818>
   24484:	ldr	r4, [fp, #-136]	; 0xffffff78
   24488:	str	r6, [fp, #-132]	; 0xffffff7c
   2448c:	ldrb	r3, [r4]
   24490:	cmp	r3, #0
   24494:	bne	244bc <__assert_fail@plt+0x11d20>
   24498:	ldr	r4, [fp, #-124]	; 0xffffff84
   2449c:	cmp	r4, #0
   244a0:	beq	243d4 <__assert_fail@plt+0x11c38>
   244a4:	b	24140 <__assert_fail@plt+0x119a4>
   244a8:	ldr	r3, [pc, #44]	; 244dc <__assert_fail@plt+0x11d40>
   244ac:	mov	r2, #150	; 0x96
   244b0:	ldr	r1, [pc, #40]	; 244e0 <__assert_fail@plt+0x11d44>
   244b4:	ldr	r0, [pc, #44]	; 244e8 <__assert_fail@plt+0x11d4c>
   244b8:	bl	1279c <__assert_fail@plt>
   244bc:	ldr	r3, [pc, #24]	; 244dc <__assert_fail@plt+0x11d40>
   244c0:	mov	r2, #178	; 0xb2
   244c4:	ldr	r1, [pc, #20]	; 244e0 <__assert_fail@plt+0x11d44>
   244c8:	ldr	r0, [pc, #28]	; 244ec <__assert_fail@plt+0x11d50>
   244cc:	bl	1279c <__assert_fail@plt>
   244d0:	bl	12244 <__stack_chk_fail@plt>
   244d4:	andeq	fp, r5, r0, ror #24
   244d8:	ldrdeq	sl, [r4], -r8
   244dc:			; <UNDEFINED> instruction: 0x000486bc
   244e0:	ldrdeq	r8, [r4], -r0
   244e4:	ldrdeq	r8, [r4], -ip
   244e8:	strdeq	r8, [r4], -r0
   244ec:	andeq	r8, r4, r8, lsl #14
   244f0:	ldr	r3, [pc, #3108]	; 2511c <__assert_fail@plt+0x12980>
   244f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   244f8:	sub	sp, sp, #308	; 0x134
   244fc:	ldr	r3, [r3]
   24500:	str	r0, [sp, #4]
   24504:	mov	fp, r1
   24508:	str	r3, [sp, #300]	; 0x12c
   2450c:	bl	12334 <__ctype_get_mb_cur_max@plt>
   24510:	cmp	r0, #1
   24514:	bhi	24740 <__assert_fail@plt+0x11fa4>
   24518:	ldrb	r7, [fp]
   2451c:	cmp	r7, #0
   24520:	beq	246bc <__assert_fail@plt+0x11f20>
   24524:	ldr	r3, [sp, #4]
   24528:	ldrb	r8, [r3]
   2452c:	add	r3, fp, #1
   24530:	str	r3, [sp, #8]
   24534:	cmp	r8, #0
   24538:	beq	24738 <__assert_fail@plt+0x11f9c>
   2453c:	ldr	sl, [sp, #4]
   24540:	mov	r5, #0
   24544:	mov	ip, r5
   24548:	str	r5, [sp]
   2454c:	mov	r9, fp
   24550:	mov	lr, #1
   24554:	mov	r6, sl
   24558:	b	245bc <__assert_fail@plt+0x11e20>
   2455c:	cmp	r9, #0
   24560:	str	r3, [sp, #4]
   24564:	beq	2458c <__assert_fail@plt+0x11df0>
   24568:	ldr	r3, [sp]
   2456c:	mov	r0, r9
   24570:	sub	r1, r4, r3
   24574:	bl	125bc <strnlen@plt>
   24578:	ldr	r3, [sp, #4]
   2457c:	ldrb	r2, [r9, r0]!
   24580:	cmp	r2, #0
   24584:	bne	24e6c <__assert_fail@plt+0x126d0>
   24588:	str	r4, [sp]
   2458c:	mov	r0, fp
   24590:	bl	1249c <strlen@plt>
   24594:	add	r3, sp, #16
   24598:	mov	r1, fp
   2459c:	mov	r2, r0
   245a0:	mov	r0, r6
   245a4:	bl	23ad8 <__assert_fail@plt+0x1133c>
   245a8:	subs	lr, r0, #0
   245ac:	bne	250a8 <__assert_fail@plt+0x1290c>
   245b0:	ldrb	r8, [sl, r5]
   245b4:	mov	r9, lr
   245b8:	mov	ip, r4
   245bc:	add	r5, r5, #1
   245c0:	mov	r0, r6
   245c4:	cmp	r7, r8
   245c8:	add	r6, r5, sl
   245cc:	mov	r1, r6
   245d0:	add	r4, ip, #1
   245d4:	beq	246dc <__assert_fail@plt+0x11f40>
   245d8:	ldrb	r8, [sl, r5]
   245dc:	cmp	r8, #0
   245e0:	beq	24738 <__assert_fail@plt+0x11f9c>
   245e4:	cmp	r5, #9
   245e8:	movls	r3, #0
   245ec:	andhi	r3, lr, #1
   245f0:	cmp	r3, #0
   245f4:	beq	245b8 <__assert_fail@plt+0x11e1c>
   245f8:	add	r2, r5, r5, lsl #2
   245fc:	cmp	r4, r2
   24600:	bcs	2455c <__assert_fail@plt+0x11dc0>
   24604:	mov	lr, r3
   24608:	b	245b8 <__assert_fail@plt+0x11e1c>
   2460c:	add	r0, sp, #24
   24610:	bl	121e4 <mbsinit@plt>
   24614:	cmp	r0, #0
   24618:	beq	250f0 <__assert_fail@plt+0x12954>
   2461c:	mov	r5, #1
   24620:	strb	r5, [sp, #20]
   24624:	bl	12334 <__ctype_get_mb_cur_max@plt>
   24628:	mov	r1, r0
   2462c:	mov	r0, fp
   24630:	bl	2d934 <__assert_fail@plt+0x1b198>
   24634:	add	r3, sp, #24
   24638:	mov	r1, fp
   2463c:	mov	r2, r0
   24640:	add	r0, sp, #48	; 0x30
   24644:	bl	31be8 <fts_children@@Base+0x14c>
   24648:	cmn	r0, #1
   2464c:	str	r0, [sp, #40]	; 0x28
   24650:	strbeq	r4, [sp, #44]	; 0x2c
   24654:	streq	r5, [sp, #40]	; 0x28
   24658:	strbeq	r5, [sp, #32]
   2465c:	beq	247a8 <__assert_fail@plt+0x1200c>
   24660:	cmn	r0, #2
   24664:	beq	24794 <__assert_fail@plt+0x11ff8>
   24668:	cmp	r0, #0
   2466c:	bne	25088 <__assert_fail@plt+0x128ec>
   24670:	ldr	r3, [sp, #36]	; 0x24
   24674:	str	r5, [sp, #40]	; 0x28
   24678:	ldrb	r3, [r3]
   2467c:	cmp	r3, #0
   24680:	bne	25104 <__assert_fail@plt+0x12968>
   24684:	ldr	r4, [sp, #48]	; 0x30
   24688:	cmp	r4, #0
   2468c:	bne	250d0 <__assert_fail@plt+0x12934>
   24690:	mov	r5, #1
   24694:	add	r0, sp, #24
   24698:	strb	r5, [sp, #44]	; 0x2c
   2469c:	bl	121e4 <mbsinit@plt>
   246a0:	cmp	r0, #0
   246a4:	movne	r3, #0
   246a8:	strbeq	r5, [sp, #32]
   246ac:	strbne	r5, [sp, #32]
   246b0:	strbne	r3, [sp, #20]
   246b4:	cmp	r4, #0
   246b8:	bne	247a8 <__assert_fail@plt+0x1200c>
   246bc:	ldr	r0, [sp, #4]
   246c0:	ldr	r3, [pc, #2644]	; 2511c <__assert_fail@plt+0x12980>
   246c4:	ldr	r2, [sp, #300]	; 0x12c
   246c8:	ldr	r3, [r3]
   246cc:	cmp	r2, r3
   246d0:	bne	25118 <__assert_fail@plt+0x1297c>
   246d4:	add	sp, sp, #308	; 0x134
   246d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   246dc:	ldrb	r3, [fp, #1]
   246e0:	cmp	r3, #0
   246e4:	beq	246c0 <__assert_fail@plt+0x11f24>
   246e8:	ldrb	r8, [sl, r5]
   246ec:	cmp	r8, #0
   246f0:	beq	24738 <__assert_fail@plt+0x11f9c>
   246f4:	cmp	r3, r8
   246f8:	add	r4, ip, #2
   246fc:	bne	245e4 <__assert_fail@plt+0x11e48>
   24700:	ldr	r3, [sp, #8]
   24704:	add	r3, r3, #1
   24708:	b	24720 <__assert_fail@plt+0x11f84>
   2470c:	add	r3, r3, #1
   24710:	cmp	r2, r4
   24714:	sub	r4, r3, fp
   24718:	add	r4, r4, ip
   2471c:	bne	245e4 <__assert_fail@plt+0x11e48>
   24720:	ldrb	r2, [r3]
   24724:	cmp	r2, #0
   24728:	beq	246c0 <__assert_fail@plt+0x11f24>
   2472c:	ldrb	r4, [r1, #1]!
   24730:	cmp	r4, #0
   24734:	bne	2470c <__assert_fail@plt+0x11f70>
   24738:	mov	r0, #0
   2473c:	b	246c0 <__assert_fail@plt+0x11f24>
   24740:	ldrb	r1, [fp]
   24744:	ldr	r8, [pc, #2516]	; 25120 <__assert_fail@plt+0x12984>
   24748:	str	fp, [sp, #36]	; 0x24
   2474c:	and	r0, r1, #31
   24750:	lsr	r3, r1, #5
   24754:	ldr	r2, [r8, r3, lsl #2]
   24758:	mov	r3, #0
   2475c:	str	r3, [sp, #28]
   24760:	lsr	r2, r2, r0
   24764:	ands	r4, r2, #1
   24768:	strb	r3, [sp, #20]
   2476c:	str	r3, [sp, #24]
   24770:	strb	r3, [sp, #32]
   24774:	beq	2460c <__assert_fail@plt+0x11e70>
   24778:	mov	r3, #1
   2477c:	str	r1, [sp, #48]	; 0x30
   24780:	mov	r4, r1
   24784:	str	r3, [sp, #40]	; 0x28
   24788:	strb	r3, [sp, #44]	; 0x2c
   2478c:	strb	r3, [sp, #32]
   24790:	b	246b4 <__assert_fail@plt+0x11f18>
   24794:	ldr	r0, [sp, #36]	; 0x24
   24798:	bl	1249c <strlen@plt>
   2479c:	strb	r4, [sp, #44]	; 0x2c
   247a0:	strb	r5, [sp, #32]
   247a4:	str	r0, [sp, #40]	; 0x28
   247a8:	mov	r3, #0
   247ac:	str	r3, [sp, #12]
   247b0:	mov	r6, r3
   247b4:	mov	r7, r3
   247b8:	str	fp, [sp, #92]	; 0x5c
   247bc:	strb	r3, [sp, #76]	; 0x4c
   247c0:	str	r3, [sp, #80]	; 0x50
   247c4:	strb	r3, [sp, #88]	; 0x58
   247c8:	strb	r3, [sp, #132]	; 0x84
   247cc:	str	r3, [sp, #136]	; 0x88
   247d0:	strb	r3, [sp, #144]	; 0x90
   247d4:	str	r3, [sp, #84]	; 0x54
   247d8:	str	r3, [sp, #140]	; 0x8c
   247dc:	str	fp, [sp, #8]
   247e0:	mov	fp, r3
   247e4:	ldrb	r3, [sp, #132]	; 0x84
   247e8:	mov	r1, #1
   247ec:	str	r1, [sp]
   247f0:	mov	r4, r1
   247f4:	mov	r9, r1
   247f8:	ldr	r1, [sp, #4]
   247fc:	cmp	r3, #0
   24800:	mov	r5, r1
   24804:	str	r1, [sp, #148]	; 0x94
   24808:	bne	24ae8 <__assert_fail@plt+0x1234c>
   2480c:	ldrb	r3, [r5]
   24810:	and	r2, r3, #31
   24814:	lsr	r3, r3, #5
   24818:	ldr	r3, [r8, r3, lsl #2]
   2481c:	lsr	r3, r3, r2
   24820:	tst	r3, #1
   24824:	beq	24e18 <__assert_fail@plt+0x1267c>
   24828:	str	r9, [sp, #152]	; 0x98
   2482c:	ldrb	r5, [r5]
   24830:	strb	r4, [sp, #156]	; 0x9c
   24834:	strb	r4, [sp, #144]	; 0x90
   24838:	str	r5, [sp, #160]	; 0xa0
   2483c:	cmp	r5, #0
   24840:	beq	24738 <__assert_fail@plt+0x11f9c>
   24844:	ldr	r3, [sp]
   24848:	cmp	fp, #9
   2484c:	movls	r3, #0
   24850:	andhi	r3, r3, #1
   24854:	cmp	r3, #0
   24858:	addeq	r6, r6, #1
   2485c:	beq	24874 <__assert_fail@plt+0x120d8>
   24860:	add	r2, fp, fp, lsl #2
   24864:	cmp	r6, r2
   24868:	addcc	r6, r6, #1
   2486c:	strcc	r3, [sp]
   24870:	bcs	24ca0 <__assert_fail@plt+0x12504>
   24874:	ldrb	r3, [sp, #44]	; 0x2c
   24878:	cmp	r3, #0
   2487c:	beq	24c30 <__assert_fail@plt+0x12494>
   24880:	ldr	r2, [sp, #160]	; 0xa0
   24884:	ldr	r3, [sp, #48]	; 0x30
   24888:	cmp	r2, r3
   2488c:	bne	24ac4 <__assert_fail@plt+0x12328>
   24890:	add	lr, sp, #132	; 0x84
   24894:	add	ip, sp, #188	; 0xbc
   24898:	ldm	lr!, {r0, r1, r2, r3}
   2489c:	stmia	ip!, {r0, r1, r2, r3}
   248a0:	ldm	lr!, {r0, r1, r2, r3}
   248a4:	strb	r7, [sp, #200]	; 0xc8
   248a8:	stmia	ip!, {r0, r1, r2, r3}
   248ac:	ldm	lr!, {r0, r1, r2, r3}
   248b0:	ldr	r5, [sp, #204]	; 0xcc
   248b4:	stmia	ip!, {r0, r1, r2, r3}
   248b8:	ldm	lr, {r0, r1}
   248bc:	ldr	r3, [sp, #208]	; 0xd0
   248c0:	add	r5, r5, r3
   248c4:	stm	ip, {r0, r1}
   248c8:	str	r5, [sp, #204]	; 0xcc
   248cc:	ldr	r3, [sp, #8]
   248d0:	strb	r7, [sp, #244]	; 0xf4
   248d4:	str	r3, [sp, #260]	; 0x104
   248d8:	ldrb	r3, [r3]
   248dc:	str	r7, [sp, #248]	; 0xf8
   248e0:	strb	r7, [sp, #256]	; 0x100
   248e4:	and	r2, r3, #31
   248e8:	lsr	r1, r3, #5
   248ec:	str	r7, [sp, #252]	; 0xfc
   248f0:	ldr	sl, [r8, r1, lsl #2]
   248f4:	lsr	sl, sl, r2
   248f8:	ands	sl, sl, #1
   248fc:	beq	24f0c <__assert_fail@plt+0x12770>
   24900:	mov	r5, r3
   24904:	cmp	r5, #0
   24908:	str	r9, [sp, #264]	; 0x108
   2490c:	str	r3, [sp, #272]	; 0x110
   24910:	strb	r4, [sp, #268]	; 0x10c
   24914:	strb	r4, [sp, #256]	; 0x100
   24918:	beq	24f88 <__assert_fail@plt+0x127ec>
   2491c:	ldr	r5, [sp, #260]	; 0x104
   24920:	ldr	r3, [sp, #264]	; 0x108
   24924:	add	r6, r6, #1
   24928:	add	r5, r5, r3
   2492c:	strb	r7, [sp, #256]	; 0x100
   24930:	str	r5, [sp, #260]	; 0x104
   24934:	b	24a1c <__assert_fail@plt+0x12280>
   24938:	ldrb	r3, [r5]
   2493c:	and	r2, r3, #31
   24940:	lsr	r3, r3, #5
   24944:	ldr	r3, [r8, r3, lsl #2]
   24948:	lsr	r3, r3, r2
   2494c:	tst	r3, #1
   24950:	beq	24c14 <__assert_fail@plt+0x12478>
   24954:	str	r9, [sp, #264]	; 0x108
   24958:	ldrb	r5, [r5]
   2495c:	strb	r4, [sp, #268]	; 0x10c
   24960:	strb	r4, [sp, #256]	; 0x100
   24964:	cmp	r5, #0
   24968:	str	r5, [sp, #272]	; 0x110
   2496c:	beq	24a98 <__assert_fail@plt+0x122fc>
   24970:	ldrb	r3, [sp, #200]	; 0xc8
   24974:	cmp	r3, #0
   24978:	bne	24bdc <__assert_fail@plt+0x12440>
   2497c:	ldrb	r3, [sp, #188]	; 0xbc
   24980:	ldr	r5, [sp, #204]	; 0xcc
   24984:	cmp	r3, #0
   24988:	addne	sl, sp, #192	; 0xc0
   2498c:	bne	24b70 <__assert_fail@plt+0x123d4>
   24990:	ldrb	r3, [r5]
   24994:	and	r2, r3, #31
   24998:	lsr	r3, r3, #5
   2499c:	ldr	r3, [r8, r3, lsl #2]
   249a0:	lsr	r3, r3, r2
   249a4:	tst	r3, #1
   249a8:	beq	24b58 <__assert_fail@plt+0x123bc>
   249ac:	str	r9, [sp, #208]	; 0xd0
   249b0:	ldrb	r0, [r5]
   249b4:	strb	r4, [sp, #212]	; 0xd4
   249b8:	strb	r4, [sp, #200]	; 0xc8
   249bc:	mov	r5, r0
   249c0:	str	r0, [sp, #216]	; 0xd8
   249c4:	cmp	r5, #0
   249c8:	beq	24738 <__assert_fail@plt+0x11f9c>
   249cc:	ldrb	r3, [sp, #268]	; 0x10c
   249d0:	cmp	r3, #0
   249d4:	beq	24ab4 <__assert_fail@plt+0x12318>
   249d8:	ldr	r0, [sp, #272]	; 0x110
   249dc:	subs	r0, r0, r5
   249e0:	movne	r0, #1
   249e4:	cmp	r0, #0
   249e8:	add	r1, r6, #1
   249ec:	bne	24ac4 <__assert_fail@plt+0x12328>
   249f0:	ldr	r3, [sp, #204]	; 0xcc
   249f4:	ldr	r2, [sp, #208]	; 0xd0
   249f8:	ldr	r5, [sp, #260]	; 0x104
   249fc:	add	r3, r3, r2
   24a00:	ldr	r2, [sp, #264]	; 0x108
   24a04:	mov	r6, r1
   24a08:	add	r5, r5, r2
   24a0c:	strb	r0, [sp, #200]	; 0xc8
   24a10:	strb	r0, [sp, #256]	; 0x100
   24a14:	str	r3, [sp, #204]	; 0xcc
   24a18:	str	r5, [sp, #260]	; 0x104
   24a1c:	ldrb	r3, [sp, #244]	; 0xf4
   24a20:	cmp	r3, #0
   24a24:	beq	24938 <__assert_fail@plt+0x1219c>
   24a28:	bl	12334 <__ctype_get_mb_cur_max@plt>
   24a2c:	mov	r1, r0
   24a30:	mov	r0, r5
   24a34:	bl	2d934 <__assert_fail@plt+0x1b198>
   24a38:	add	r3, sp, #248	; 0xf8
   24a3c:	mov	r1, r5
   24a40:	mov	r2, r0
   24a44:	add	r0, sp, #272	; 0x110
   24a48:	bl	31be8 <fts_children@@Base+0x14c>
   24a4c:	cmn	r0, #1
   24a50:	str	r0, [sp, #264]	; 0x108
   24a54:	strbeq	r7, [sp, #268]	; 0x10c
   24a58:	streq	r9, [sp, #264]	; 0x108
   24a5c:	strbeq	r4, [sp, #256]	; 0x100
   24a60:	beq	24970 <__assert_fail@plt+0x121d4>
   24a64:	cmn	r0, #2
   24a68:	beq	24d94 <__assert_fail@plt+0x125f8>
   24a6c:	cmp	r0, #0
   24a70:	beq	24dac <__assert_fail@plt+0x12610>
   24a74:	ldr	r5, [sp, #272]	; 0x110
   24a78:	add	r0, sp, #248	; 0xf8
   24a7c:	strb	r4, [sp, #268]	; 0x10c
   24a80:	bl	121e4 <mbsinit@plt>
   24a84:	strb	r4, [sp, #256]	; 0x100
   24a88:	cmp	r0, #0
   24a8c:	strbne	r7, [sp, #244]	; 0xf4
   24a90:	cmp	r5, #0
   24a94:	bne	24970 <__assert_fail@plt+0x121d4>
   24a98:	ldr	r0, [sp, #148]	; 0x94
   24a9c:	b	246c0 <__assert_fail@plt+0x11f24>
   24aa0:	ldr	r0, [sp, #204]	; 0xcc
   24aa4:	bl	1249c <strlen@plt>
   24aa8:	strb	r7, [sp, #212]	; 0xd4
   24aac:	strb	r4, [sp, #200]	; 0xc8
   24ab0:	str	r0, [sp, #208]	; 0xd0
   24ab4:	ldr	r2, [sp, #208]	; 0xd0
   24ab8:	ldr	r3, [sp, #264]	; 0x108
   24abc:	cmp	r2, r3
   24ac0:	beq	24bfc <__assert_fail@plt+0x12460>
   24ac4:	ldr	r5, [sp, #148]	; 0x94
   24ac8:	ldr	sl, [sp, #152]	; 0x98
   24acc:	ldrb	r3, [sp, #132]	; 0x84
   24ad0:	add	r5, r5, sl
   24ad4:	str	r5, [sp, #148]	; 0x94
   24ad8:	cmp	r3, #0
   24adc:	strb	r7, [sp, #144]	; 0x90
   24ae0:	add	fp, fp, #1
   24ae4:	beq	2480c <__assert_fail@plt+0x12070>
   24ae8:	bl	12334 <__ctype_get_mb_cur_max@plt>
   24aec:	mov	r1, r0
   24af0:	mov	r0, r5
   24af4:	bl	2d934 <__assert_fail@plt+0x1b198>
   24af8:	add	r3, sp, #136	; 0x88
   24afc:	mov	r1, r5
   24b00:	mov	r2, r0
   24b04:	add	r0, sp, #160	; 0xa0
   24b08:	bl	31be8 <fts_children@@Base+0x14c>
   24b0c:	cmn	r0, #1
   24b10:	str	r0, [sp, #152]	; 0x98
   24b14:	strbeq	r7, [sp, #156]	; 0x9c
   24b18:	streq	r9, [sp, #152]	; 0x98
   24b1c:	strbeq	r4, [sp, #144]	; 0x90
   24b20:	beq	24c74 <__assert_fail@plt+0x124d8>
   24b24:	cmn	r0, #2
   24b28:	beq	24c60 <__assert_fail@plt+0x124c4>
   24b2c:	cmp	r0, #0
   24b30:	bne	24e78 <__assert_fail@plt+0x126dc>
   24b34:	ldr	r5, [sp, #148]	; 0x94
   24b38:	str	r9, [sp, #152]	; 0x98
   24b3c:	ldrb	r3, [r5]
   24b40:	cmp	r3, #0
   24b44:	bne	25104 <__assert_fail@plt+0x12968>
   24b48:	ldr	r5, [sp, #160]	; 0xa0
   24b4c:	cmp	r5, #0
   24b50:	beq	24e7c <__assert_fail@plt+0x126e0>
   24b54:	b	250d0 <__assert_fail@plt+0x12934>
   24b58:	add	sl, sp, #192	; 0xc0
   24b5c:	mov	r0, sl
   24b60:	bl	121e4 <mbsinit@plt>
   24b64:	cmp	r0, #0
   24b68:	beq	250f0 <__assert_fail@plt+0x12954>
   24b6c:	strb	r4, [sp, #188]	; 0xbc
   24b70:	bl	12334 <__ctype_get_mb_cur_max@plt>
   24b74:	mov	r1, r0
   24b78:	mov	r0, r5
   24b7c:	bl	2d934 <__assert_fail@plt+0x1b198>
   24b80:	mov	r3, sl
   24b84:	mov	r1, r5
   24b88:	mov	r2, r0
   24b8c:	add	r0, sp, #216	; 0xd8
   24b90:	bl	31be8 <fts_children@@Base+0x14c>
   24b94:	cmn	r0, #1
   24b98:	str	r0, [sp, #208]	; 0xd0
   24b9c:	strbeq	r7, [sp, #212]	; 0xd4
   24ba0:	streq	r9, [sp, #208]	; 0xd0
   24ba4:	strbeq	r4, [sp, #200]	; 0xc8
   24ba8:	beq	24ab4 <__assert_fail@plt+0x12318>
   24bac:	cmn	r0, #2
   24bb0:	beq	24aa0 <__assert_fail@plt+0x12304>
   24bb4:	cmp	r0, #0
   24bb8:	beq	24dd0 <__assert_fail@plt+0x12634>
   24bbc:	ldr	r5, [sp, #216]	; 0xd8
   24bc0:	mov	r0, sl
   24bc4:	strb	r4, [sp, #212]	; 0xd4
   24bc8:	bl	121e4 <mbsinit@plt>
   24bcc:	strb	r4, [sp, #200]	; 0xc8
   24bd0:	cmp	r0, #0
   24bd4:	strbne	r7, [sp, #188]	; 0xbc
   24bd8:	b	249c4 <__assert_fail@plt+0x12228>
   24bdc:	ldrb	r3, [sp, #212]	; 0xd4
   24be0:	cmp	r3, #0
   24be4:	ldrne	r5, [sp, #216]	; 0xd8
   24be8:	bne	249c4 <__assert_fail@plt+0x12228>
   24bec:	ldr	r2, [sp, #208]	; 0xd0
   24bf0:	ldr	r3, [sp, #264]	; 0x108
   24bf4:	cmp	r2, r3
   24bf8:	bne	24ac4 <__assert_fail@plt+0x12328>
   24bfc:	ldr	r1, [sp, #260]	; 0x104
   24c00:	ldr	r0, [sp, #204]	; 0xcc
   24c04:	bl	12208 <memcmp@plt>
   24c08:	adds	r0, r0, #0
   24c0c:	movne	r0, #1
   24c10:	b	249e4 <__assert_fail@plt+0x12248>
   24c14:	add	r0, sp, #248	; 0xf8
   24c18:	bl	121e4 <mbsinit@plt>
   24c1c:	cmp	r0, #0
   24c20:	beq	250f0 <__assert_fail@plt+0x12954>
   24c24:	strb	r4, [sp, #244]	; 0xf4
   24c28:	b	24a28 <__assert_fail@plt+0x1228c>
   24c2c:	add	r6, r6, #1
   24c30:	ldr	sl, [sp, #152]	; 0x98
   24c34:	ldr	r3, [sp, #40]	; 0x28
   24c38:	ldr	r5, [sp, #148]	; 0x94
   24c3c:	cmp	sl, r3
   24c40:	bne	24acc <__assert_fail@plt+0x12330>
   24c44:	mov	r2, sl
   24c48:	mov	r0, r5
   24c4c:	ldr	r1, [sp, #36]	; 0x24
   24c50:	bl	12208 <memcmp@plt>
   24c54:	cmp	r0, #0
   24c58:	bne	24acc <__assert_fail@plt+0x12330>
   24c5c:	b	24890 <__assert_fail@plt+0x120f4>
   24c60:	ldr	r0, [sp, #148]	; 0x94
   24c64:	bl	1249c <strlen@plt>
   24c68:	strb	r7, [sp, #156]	; 0x9c
   24c6c:	strb	r4, [sp, #144]	; 0x90
   24c70:	str	r0, [sp, #152]	; 0x98
   24c74:	ldr	r3, [sp]
   24c78:	cmp	fp, #9
   24c7c:	movls	r3, #0
   24c80:	andhi	r3, r3, #1
   24c84:	cmp	r3, #0
   24c88:	beq	24c2c <__assert_fail@plt+0x12490>
   24c8c:	add	r2, fp, fp, lsl #2
   24c90:	cmp	r6, r2
   24c94:	addcc	r6, r6, #1
   24c98:	strcc	r3, [sp]
   24c9c:	bcc	24c30 <__assert_fail@plt+0x12494>
   24ca0:	ldr	r3, [sp, #12]
   24ca4:	subs	sl, r6, r3
   24ca8:	ldrb	r3, [sp, #88]	; 0x58
   24cac:	beq	250d4 <__assert_fail@plt+0x12938>
   24cb0:	cmp	r3, #0
   24cb4:	ldreq	r5, [sp, #92]	; 0x5c
   24cb8:	beq	24d28 <__assert_fail@plt+0x1258c>
   24cbc:	ldrb	r3, [sp, #100]	; 0x64
   24cc0:	cmp	r3, #0
   24cc4:	ldrne	r5, [sp, #104]	; 0x68
   24cc8:	beq	24d08 <__assert_fail@plt+0x1256c>
   24ccc:	b	24d00 <__assert_fail@plt+0x12564>
   24cd0:	ldrb	r3, [r5]
   24cd4:	and	r2, r3, #31
   24cd8:	lsr	r3, r3, #5
   24cdc:	ldr	r3, [r8, r3, lsl #2]
   24ce0:	lsr	r3, r3, r2
   24ce4:	tst	r3, #1
   24ce8:	beq	24df4 <__assert_fail@plt+0x12658>
   24cec:	str	r9, [sp, #96]	; 0x60
   24cf0:	ldrb	r5, [r5]
   24cf4:	strb	r4, [sp, #100]	; 0x64
   24cf8:	strb	r4, [sp, #88]	; 0x58
   24cfc:	str	r5, [sp, #104]	; 0x68
   24d00:	cmp	r5, #0
   24d04:	beq	25020 <__assert_fail@plt+0x12884>
   24d08:	ldr	r5, [sp, #92]	; 0x5c
   24d0c:	ldr	r3, [sp, #96]	; 0x60
   24d10:	subs	sl, sl, #1
   24d14:	add	r5, r5, r3
   24d18:	strb	r7, [sp, #88]	; 0x58
   24d1c:	str	r5, [sp, #92]	; 0x5c
   24d20:	str	r5, [sp]
   24d24:	beq	24ea0 <__assert_fail@plt+0x12704>
   24d28:	ldrb	r3, [sp, #76]	; 0x4c
   24d2c:	cmp	r3, #0
   24d30:	beq	24cd0 <__assert_fail@plt+0x12534>
   24d34:	bl	12334 <__ctype_get_mb_cur_max@plt>
   24d38:	mov	r1, r0
   24d3c:	mov	r0, r5
   24d40:	bl	2d934 <__assert_fail@plt+0x1b198>
   24d44:	add	r3, sp, #80	; 0x50
   24d48:	mov	r1, r5
   24d4c:	mov	r2, r0
   24d50:	add	r0, sp, #104	; 0x68
   24d54:	bl	31be8 <fts_children@@Base+0x14c>
   24d58:	cmn	r0, #1
   24d5c:	str	r0, [sp, #96]	; 0x60
   24d60:	beq	24e0c <__assert_fail@plt+0x12670>
   24d64:	cmn	r0, #2
   24d68:	beq	24e30 <__assert_fail@plt+0x12694>
   24d6c:	cmp	r0, #0
   24d70:	beq	24e48 <__assert_fail@plt+0x126ac>
   24d74:	ldr	r5, [sp, #104]	; 0x68
   24d78:	add	r0, sp, #80	; 0x50
   24d7c:	strb	r4, [sp, #100]	; 0x64
   24d80:	bl	121e4 <mbsinit@plt>
   24d84:	strb	r4, [sp, #88]	; 0x58
   24d88:	cmp	r0, #0
   24d8c:	strbne	r7, [sp, #76]	; 0x4c
   24d90:	b	24d00 <__assert_fail@plt+0x12564>
   24d94:	ldr	r0, [sp, #260]	; 0x104
   24d98:	bl	1249c <strlen@plt>
   24d9c:	strb	r7, [sp, #268]	; 0x10c
   24da0:	strb	r4, [sp, #256]	; 0x100
   24da4:	str	r0, [sp, #264]	; 0x108
   24da8:	b	24970 <__assert_fail@plt+0x121d4>
   24dac:	ldr	r3, [sp, #260]	; 0x104
   24db0:	str	r9, [sp, #264]	; 0x108
   24db4:	ldrb	r3, [r3]
   24db8:	cmp	r3, #0
   24dbc:	bne	25104 <__assert_fail@plt+0x12968>
   24dc0:	ldr	r5, [sp, #272]	; 0x110
   24dc4:	cmp	r5, #0
   24dc8:	beq	24a78 <__assert_fail@plt+0x122dc>
   24dcc:	b	250d0 <__assert_fail@plt+0x12934>
   24dd0:	ldr	r3, [sp, #204]	; 0xcc
   24dd4:	str	r9, [sp, #208]	; 0xd0
   24dd8:	ldrb	r3, [r3]
   24ddc:	cmp	r3, #0
   24de0:	bne	25104 <__assert_fail@plt+0x12968>
   24de4:	ldr	r5, [sp, #216]	; 0xd8
   24de8:	cmp	r5, #0
   24dec:	beq	24bc0 <__assert_fail@plt+0x12424>
   24df0:	b	250d0 <__assert_fail@plt+0x12934>
   24df4:	add	r0, sp, #80	; 0x50
   24df8:	bl	121e4 <mbsinit@plt>
   24dfc:	cmp	r0, #0
   24e00:	beq	250f0 <__assert_fail@plt+0x12954>
   24e04:	strb	r4, [sp, #76]	; 0x4c
   24e08:	b	24d34 <__assert_fail@plt+0x12598>
   24e0c:	str	r9, [sp, #96]	; 0x60
   24e10:	strb	r7, [sp, #100]	; 0x64
   24e14:	b	24d08 <__assert_fail@plt+0x1256c>
   24e18:	add	r0, sp, #136	; 0x88
   24e1c:	bl	121e4 <mbsinit@plt>
   24e20:	cmp	r0, #0
   24e24:	beq	250f0 <__assert_fail@plt+0x12954>
   24e28:	strb	r4, [sp, #132]	; 0x84
   24e2c:	b	24ae8 <__assert_fail@plt+0x1234c>
   24e30:	ldr	r5, [sp, #92]	; 0x5c
   24e34:	mov	r0, r5
   24e38:	bl	1249c <strlen@plt>
   24e3c:	strb	r7, [sp, #100]	; 0x64
   24e40:	str	r0, [sp, #96]	; 0x60
   24e44:	b	24d0c <__assert_fail@plt+0x12570>
   24e48:	ldr	r5, [sp, #92]	; 0x5c
   24e4c:	str	r9, [sp, #96]	; 0x60
   24e50:	ldrb	r3, [r5]
   24e54:	cmp	r3, #0
   24e58:	bne	25104 <__assert_fail@plt+0x12968>
   24e5c:	ldr	r5, [sp, #104]	; 0x68
   24e60:	cmp	r5, #0
   24e64:	beq	24d78 <__assert_fail@plt+0x125dc>
   24e68:	b	250d0 <__assert_fail@plt+0x12934>
   24e6c:	mov	lr, r3
   24e70:	str	r4, [sp]
   24e74:	b	245b8 <__assert_fail@plt+0x11e1c>
   24e78:	ldr	r5, [sp, #160]	; 0xa0
   24e7c:	add	r0, sp, #136	; 0x88
   24e80:	strb	r4, [sp, #156]	; 0x9c
   24e84:	bl	121e4 <mbsinit@plt>
   24e88:	strb	r4, [sp, #144]	; 0x90
   24e8c:	cmp	r0, #0
   24e90:	strbne	r7, [sp, #132]	; 0x84
   24e94:	b	2483c <__assert_fail@plt+0x120a0>
   24e98:	ldr	r3, [sp, #92]	; 0x5c
   24e9c:	str	r3, [sp]
   24ea0:	ldrb	r3, [sp, #76]	; 0x4c
   24ea4:	cmp	r3, #0
   24ea8:	bne	24fa0 <__assert_fail@plt+0x12804>
   24eac:	ldr	r1, [sp]
   24eb0:	ldrb	r3, [r1]
   24eb4:	and	r2, r3, #31
   24eb8:	lsr	r3, r3, #5
   24ebc:	ldr	r3, [r8, r3, lsl #2]
   24ec0:	lsr	r3, r3, r2
   24ec4:	tst	r3, #1
   24ec8:	beq	24f8c <__assert_fail@plt+0x127f0>
   24ecc:	str	r9, [sp, #96]	; 0x60
   24ed0:	ldrb	r5, [r1]
   24ed4:	strb	r4, [sp, #100]	; 0x64
   24ed8:	strb	r4, [sp, #88]	; 0x58
   24edc:	str	r5, [sp, #104]	; 0x68
   24ee0:	cmp	r5, #0
   24ee4:	beq	2502c <__assert_fail@plt+0x12890>
   24ee8:	ldrb	r3, [sp, #156]	; 0x9c
   24eec:	mov	r2, #1
   24ef0:	str	r2, [sp]
   24ef4:	cmp	r3, #0
   24ef8:	add	r3, r6, #1
   24efc:	str	r6, [sp, #12]
   24f00:	mov	r6, r3
   24f04:	bne	24874 <__assert_fail@plt+0x120d8>
   24f08:	b	24c30 <__assert_fail@plt+0x12494>
   24f0c:	add	r0, sp, #248	; 0xf8
   24f10:	bl	121e4 <mbsinit@plt>
   24f14:	cmp	r0, #0
   24f18:	beq	250f0 <__assert_fail@plt+0x12954>
   24f1c:	strb	r4, [sp, #244]	; 0xf4
   24f20:	bl	12334 <__ctype_get_mb_cur_max@plt>
   24f24:	ldr	r5, [sp, #8]
   24f28:	mov	r1, r0
   24f2c:	mov	r0, r5
   24f30:	bl	2d934 <__assert_fail@plt+0x1b198>
   24f34:	add	r3, sp, #248	; 0xf8
   24f38:	mov	r1, r5
   24f3c:	mov	r2, r0
   24f40:	add	r0, sp, #272	; 0x110
   24f44:	bl	31be8 <fts_children@@Base+0x14c>
   24f48:	cmn	r0, #1
   24f4c:	str	r0, [sp, #264]	; 0x108
   24f50:	beq	25010 <__assert_fail@plt+0x12874>
   24f54:	cmn	r0, #2
   24f58:	beq	2504c <__assert_fail@plt+0x128b0>
   24f5c:	cmp	r0, #0
   24f60:	beq	25064 <__assert_fail@plt+0x128c8>
   24f64:	ldr	r5, [sp, #272]	; 0x110
   24f68:	add	r0, sp, #248	; 0xf8
   24f6c:	strb	r4, [sp, #268]	; 0x10c
   24f70:	bl	121e4 <mbsinit@plt>
   24f74:	strb	r4, [sp, #256]	; 0x100
   24f78:	cmp	r0, #0
   24f7c:	strbne	r7, [sp, #244]	; 0xf4
   24f80:	cmp	r5, #0
   24f84:	bne	2491c <__assert_fail@plt+0x12180>
   24f88:	bl	1273c <abort@plt>
   24f8c:	add	r0, sp, #80	; 0x50
   24f90:	bl	121e4 <mbsinit@plt>
   24f94:	cmp	r0, #0
   24f98:	beq	250f0 <__assert_fail@plt+0x12954>
   24f9c:	strb	r4, [sp, #76]	; 0x4c
   24fa0:	bl	12334 <__ctype_get_mb_cur_max@plt>
   24fa4:	ldr	r5, [sp]
   24fa8:	mov	r1, r0
   24fac:	mov	r0, r5
   24fb0:	bl	2d934 <__assert_fail@plt+0x1b198>
   24fb4:	add	r3, sp, #80	; 0x50
   24fb8:	mov	r1, r5
   24fbc:	mov	r2, r0
   24fc0:	add	r0, sp, #104	; 0x68
   24fc4:	bl	31be8 <fts_children@@Base+0x14c>
   24fc8:	cmn	r0, #1
   24fcc:	str	r0, [sp, #96]	; 0x60
   24fd0:	strbeq	r7, [sp, #100]	; 0x64
   24fd4:	streq	r9, [sp, #96]	; 0x60
   24fd8:	strbeq	r4, [sp, #88]	; 0x58
   24fdc:	beq	24ee8 <__assert_fail@plt+0x1274c>
   24fe0:	cmn	r0, #2
   24fe4:	beq	25090 <__assert_fail@plt+0x128f4>
   24fe8:	cmp	r0, #0
   24fec:	beq	250b0 <__assert_fail@plt+0x12914>
   24ff0:	ldr	r5, [sp, #104]	; 0x68
   24ff4:	add	r0, sp, #80	; 0x50
   24ff8:	strb	r4, [sp, #100]	; 0x64
   24ffc:	bl	121e4 <mbsinit@plt>
   25000:	strb	r4, [sp, #88]	; 0x58
   25004:	cmp	r0, #0
   25008:	strbne	r7, [sp, #76]	; 0x4c
   2500c:	b	24ee0 <__assert_fail@plt+0x12744>
   25010:	str	r9, [sp, #264]	; 0x108
   25014:	strb	sl, [sp, #268]	; 0x10c
   25018:	ldr	r5, [sp, #260]	; 0x104
   2501c:	b	24920 <__assert_fail@plt+0x12184>
   25020:	ldrb	r3, [sp, #88]	; 0x58
   25024:	cmp	r3, #0
   25028:	beq	24e98 <__assert_fail@plt+0x126fc>
   2502c:	add	r2, sp, #16
   25030:	ldrd	r0, [sp, #4]
   25034:	bl	23c80 <__assert_fail@plt+0x114e4>
   25038:	subs	r3, r0, #0
   2503c:	str	r3, [sp]
   25040:	bne	250a8 <__assert_fail@plt+0x1290c>
   25044:	ldrb	r3, [sp, #156]	; 0x9c
   25048:	b	24ef4 <__assert_fail@plt+0x12758>
   2504c:	ldr	r5, [sp, #260]	; 0x104
   25050:	mov	r0, r5
   25054:	bl	1249c <strlen@plt>
   25058:	strb	sl, [sp, #268]	; 0x10c
   2505c:	str	r0, [sp, #264]	; 0x108
   25060:	b	24920 <__assert_fail@plt+0x12184>
   25064:	ldr	r5, [sp, #260]	; 0x104
   25068:	str	r9, [sp, #264]	; 0x108
   2506c:	ldrb	r3, [r5]
   25070:	cmp	r3, #0
   25074:	bne	25104 <__assert_fail@plt+0x12968>
   25078:	ldr	r5, [sp, #272]	; 0x110
   2507c:	cmp	r5, #0
   25080:	beq	24f68 <__assert_fail@plt+0x127cc>
   25084:	b	250d0 <__assert_fail@plt+0x12934>
   25088:	ldr	r4, [sp, #48]	; 0x30
   2508c:	b	24690 <__assert_fail@plt+0x11ef4>
   25090:	ldr	r0, [sp, #92]	; 0x5c
   25094:	bl	1249c <strlen@plt>
   25098:	strb	r7, [sp, #100]	; 0x64
   2509c:	strb	r4, [sp, #88]	; 0x58
   250a0:	str	r0, [sp, #96]	; 0x60
   250a4:	b	24ee8 <__assert_fail@plt+0x1274c>
   250a8:	ldr	r0, [sp, #16]
   250ac:	b	246c0 <__assert_fail@plt+0x11f24>
   250b0:	ldr	r5, [sp, #92]	; 0x5c
   250b4:	str	r9, [sp, #96]	; 0x60
   250b8:	ldrb	r3, [r5]
   250bc:	cmp	r3, #0
   250c0:	bne	25104 <__assert_fail@plt+0x12968>
   250c4:	ldr	r5, [sp, #104]	; 0x68
   250c8:	cmp	r5, #0
   250cc:	beq	24ff4 <__assert_fail@plt+0x12858>
   250d0:	bl	23c5c <__assert_fail@plt+0x114c0>
   250d4:	cmp	r3, #0
   250d8:	beq	24e98 <__assert_fail@plt+0x126fc>
   250dc:	ldrb	r3, [sp, #100]	; 0x64
   250e0:	cmp	r3, #0
   250e4:	ldrne	r5, [sp, #104]	; 0x68
   250e8:	beq	24ee8 <__assert_fail@plt+0x1274c>
   250ec:	b	24ee0 <__assert_fail@plt+0x12744>
   250f0:	ldr	r3, [pc, #44]	; 25124 <__assert_fail@plt+0x12988>
   250f4:	mov	r2, #150	; 0x96
   250f8:	ldr	r1, [pc, #40]	; 25128 <__assert_fail@plt+0x1298c>
   250fc:	ldr	r0, [pc, #40]	; 2512c <__assert_fail@plt+0x12990>
   25100:	bl	1279c <__assert_fail@plt>
   25104:	ldr	r3, [pc, #24]	; 25124 <__assert_fail@plt+0x12988>
   25108:	mov	r2, #178	; 0xb2
   2510c:	ldr	r1, [pc, #20]	; 25128 <__assert_fail@plt+0x1298c>
   25110:	ldr	r0, [pc, #24]	; 25130 <__assert_fail@plt+0x12994>
   25114:	bl	1279c <__assert_fail@plt>
   25118:	bl	12244 <__stack_chk_fail@plt>
   2511c:	andeq	fp, r5, r0, ror #24
   25120:	ldrdeq	sl, [r4], -r8
   25124:			; <UNDEFINED> instruction: 0x000486bc
   25128:	ldrdeq	r8, [r4], -r0
   2512c:	strdeq	r8, [r4], -r0
   25130:	andeq	r8, r4, r8, lsl #14
   25134:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25138:	sub	sp, sp, #20
   2513c:	ldr	sl, [pc, #444]	; 25300 <__assert_fail@plt+0x12b64>
   25140:	mov	r4, r0
   25144:	add	r7, r0, r1
   25148:	ldr	r3, [sl]
   2514c:	mov	r9, r2
   25150:	str	r3, [sp, #12]
   25154:	bl	12334 <__ctype_get_mb_cur_max@plt>
   25158:	cmp	r0, #1
   2515c:	bls	25288 <__assert_fail@plt+0x12aec>
   25160:	cmp	r4, r7
   25164:	mov	r6, #0
   25168:	bcs	2526c <__assert_fail@plt+0x12ad0>
   2516c:	and	r8, r9, #2
   25170:	b	25198 <__assert_fail@plt+0x129fc>
   25174:	cmp	r3, #37	; 0x25
   25178:	bcs	25188 <__assert_fail@plt+0x129ec>
   2517c:	sub	r3, r3, #32
   25180:	cmp	r3, #3
   25184:	bhi	251c0 <__assert_fail@plt+0x12a24>
   25188:	add	r4, r4, #1
   2518c:	add	r6, r6, #1
   25190:	cmp	r4, r7
   25194:	bcs	2526c <__assert_fail@plt+0x12ad0>
   25198:	ldrb	r3, [r4]
   2519c:	cmp	r3, #63	; 0x3f
   251a0:	bls	25174 <__assert_fail@plt+0x129d8>
   251a4:	cmp	r3, #65	; 0x41
   251a8:	bcc	251c0 <__assert_fail@plt+0x12a24>
   251ac:	cmp	r3, #95	; 0x5f
   251b0:	bls	25188 <__assert_fail@plt+0x129ec>
   251b4:	sub	r3, r3, #97	; 0x61
   251b8:	cmp	r3, #29
   251bc:	bls	25188 <__assert_fail@plt+0x129ec>
   251c0:	mov	r3, #0
   251c4:	mvn	fp, #-2147483648	; 0x80000000
   251c8:	str	r3, [sp, #4]
   251cc:	str	r3, [sp, #8]
   251d0:	b	251f8 <__assert_fail@plt+0x12a5c>
   251d4:	sub	r3, fp, r6
   251d8:	cmp	r3, r0
   251dc:	blt	252f4 <__assert_fail@plt+0x12b58>
   251e0:	add	r6, r6, r0
   251e4:	add	r0, sp, #4
   251e8:	bl	121e4 <mbsinit@plt>
   251ec:	add	r4, r4, r5
   251f0:	cmp	r0, #0
   251f4:	bne	25190 <__assert_fail@plt+0x129f4>
   251f8:	add	r3, sp, #4
   251fc:	sub	r2, r7, r4
   25200:	mov	r1, r4
   25204:	mov	r0, sp
   25208:	bl	31be8 <fts_children@@Base+0x14c>
   2520c:	cmn	r0, #1
   25210:	mov	r5, r0
   25214:	beq	25260 <__assert_fail@plt+0x12ac4>
   25218:	cmn	r0, #2
   2521c:	beq	252e0 <__assert_fail@plt+0x12b44>
   25220:	cmp	r0, #0
   25224:	ldr	r0, [sp]
   25228:	moveq	r5, #1
   2522c:	bl	12130 <wcwidth@plt>
   25230:	cmp	r0, #0
   25234:	bge	251d4 <__assert_fail@plt+0x12a38>
   25238:	cmp	r8, #0
   2523c:	bne	25268 <__assert_fail@plt+0x12acc>
   25240:	ldr	r0, [sp]
   25244:	bl	12298 <iswcntrl@plt>
   25248:	cmp	r0, #0
   2524c:	bne	251e4 <__assert_fail@plt+0x12a48>
   25250:	cmn	r6, #-2147483647	; 0x80000001
   25254:	beq	252f4 <__assert_fail@plt+0x12b58>
   25258:	add	r6, r6, #1
   2525c:	b	251e4 <__assert_fail@plt+0x12a48>
   25260:	tst	r9, #1
   25264:	beq	25188 <__assert_fail@plt+0x129ec>
   25268:	mvn	r6, #0
   2526c:	ldr	r2, [sp, #12]
   25270:	ldr	r3, [sl]
   25274:	mov	r0, r6
   25278:	cmp	r2, r3
   2527c:	bne	252fc <__assert_fail@plt+0x12b60>
   25280:	add	sp, sp, #20
   25284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25288:	cmp	r4, r7
   2528c:	movcs	r6, #0
   25290:	bcs	2526c <__assert_fail@plt+0x12ad0>
   25294:	bl	12460 <__ctype_b_loc@plt>
   25298:	mov	r6, #0
   2529c:	and	r9, r9, #2
   252a0:	ldr	r2, [r0]
   252a4:	ldrb	r3, [r4], #1
   252a8:	lsl	r3, r3, #1
   252ac:	ldrh	r3, [r2, r3]
   252b0:	tst	r3, #16384	; 0x4000
   252b4:	bne	252c8 <__assert_fail@plt+0x12b2c>
   252b8:	cmp	r9, #0
   252bc:	bne	25268 <__assert_fail@plt+0x12acc>
   252c0:	tst	r3, #2
   252c4:	bne	252d4 <__assert_fail@plt+0x12b38>
   252c8:	cmn	r6, #-2147483647	; 0x80000001
   252cc:	beq	2526c <__assert_fail@plt+0x12ad0>
   252d0:	add	r6, r6, #1
   252d4:	cmp	r7, r4
   252d8:	bne	252a4 <__assert_fail@plt+0x12b08>
   252dc:	b	2526c <__assert_fail@plt+0x12ad0>
   252e0:	tst	r9, #1
   252e4:	bne	25268 <__assert_fail@plt+0x12acc>
   252e8:	add	r6, r6, #1
   252ec:	mov	r4, r7
   252f0:	b	25190 <__assert_fail@plt+0x129f4>
   252f4:	mvn	r6, #-2147483648	; 0x80000000
   252f8:	b	2526c <__assert_fail@plt+0x12ad0>
   252fc:	bl	12244 <__stack_chk_fail@plt>
   25300:	andeq	fp, r5, r0, ror #24
   25304:	push	{r4, r5, r6, lr}
   25308:	mov	r5, r1
   2530c:	mov	r4, r0
   25310:	bl	1249c <strlen@plt>
   25314:	mov	r2, r5
   25318:	mov	r1, r0
   2531c:	mov	r0, r4
   25320:	pop	{r4, r5, r6, lr}
   25324:	b	25134 <__assert_fail@plt+0x12998>
   25328:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2532c:	mov	r4, r0
   25330:	ldrb	r3, [r0]
   25334:	sub	r2, r3, #48	; 0x30
   25338:	cmp	r2, #7
   2533c:	bls	253e8 <__assert_fail@plt+0x12c4c>
   25340:	cmp	r3, #0
   25344:	moveq	r0, #16
   25348:	beq	25394 <__assert_fail@plt+0x12bf8>
   2534c:	mov	r2, r4
   25350:	mov	r0, #1
   25354:	and	r1, r3, #239	; 0xef
   25358:	cmp	r3, #43	; 0x2b
   2535c:	cmpne	r1, #45	; 0x2d
   25360:	ldrb	r3, [r2, #1]!
   25364:	moveq	r1, #1
   25368:	movne	r1, #0
   2536c:	cmp	r3, #0
   25370:	add	r0, r0, r1
   25374:	bne	25354 <__assert_fail@plt+0x12bb8>
   25378:	lsrs	r3, r0, #28
   2537c:	movne	r3, #1
   25380:	moveq	r3, #0
   25384:	lsls	r0, r0, #4
   25388:	bmi	256c0 <__assert_fail@plt+0x12f24>
   2538c:	cmp	r3, #0
   25390:	bne	256c0 <__assert_fail@plt+0x12f24>
   25394:	ldr	r9, [pc, #808]	; 256c4 <__assert_fail@plt+0x12f28>
   25398:	ldr	sl, [pc, #808]	; 256c8 <__assert_fail@plt+0x12f2c>
   2539c:	ldr	r6, [pc, #808]	; 256cc <__assert_fail@plt+0x12f30>
   253a0:	bl	2df04 <__assert_fail@plt+0x1b768>
   253a4:	mov	lr, #0
   253a8:	mov	r5, #0
   253ac:	ldrb	ip, [r4]
   253b0:	mov	r2, r4
   253b4:	add	r4, r4, #1
   253b8:	cmp	ip, #97	; 0x61
   253bc:	beq	25630 <__assert_fail@plt+0x12e94>
   253c0:	bls	25424 <__assert_fail@plt+0x12c88>
   253c4:	cmp	ip, #111	; 0x6f
   253c8:	beq	25648 <__assert_fail@plt+0x12eac>
   253cc:	cmp	ip, #117	; 0x75
   253d0:	beq	25640 <__assert_fail@plt+0x12ea4>
   253d4:	cmp	ip, #103	; 0x67
   253d8:	beq	25638 <__assert_fail@plt+0x12e9c>
   253dc:	bl	12154 <free@plt>
   253e0:	mov	r0, #0
   253e4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   253e8:	ldr	ip, [pc, #732]	; 256cc <__assert_fail@plt+0x12f30>
   253ec:	add	r1, r0, #1
   253f0:	mov	r5, #0
   253f4:	b	25408 <__assert_fail@plt+0x12c6c>
   253f8:	ldrb	r3, [r1], #1
   253fc:	sub	r0, r3, #48	; 0x30
   25400:	cmp	r0, #7
   25404:	bhi	25650 <__assert_fail@plt+0x12eb4>
   25408:	add	r5, r3, r5, lsl #3
   2540c:	sub	r5, r5, #48	; 0x30
   25410:	cmp	r5, ip
   25414:	mov	r2, r1
   25418:	bls	253f8 <__assert_fail@plt+0x12c5c>
   2541c:	mov	r0, #0
   25420:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25424:	cmp	ip, #45	; 0x2d
   25428:	beq	2543c <__assert_fail@plt+0x12ca0>
   2542c:	cmp	ip, #61	; 0x3d
   25430:	beq	2543c <__assert_fail@plt+0x12ca0>
   25434:	cmp	ip, #43	; 0x2b
   25438:	bne	253dc <__assert_fail@plt+0x12c40>
   2543c:	add	r7, lr, #1
   25440:	mov	r8, #3
   25444:	add	lr, r0, lr, lsl #4
   25448:	b	2549c <__assert_fail@plt+0x12d00>
   2544c:	cmp	r3, #117	; 0x75
   25450:	addeq	r3, r2, #2
   25454:	moveq	r1, #448	; 0x1c0
   25458:	bne	25538 <__assert_fail@plt+0x12d9c>
   2545c:	strb	ip, [lr]
   25460:	ldrb	ip, [r2, #2]
   25464:	mov	r2, r3
   25468:	strb	r8, [lr, #1]
   2546c:	str	r5, [lr, #4]
   25470:	str	r1, [lr, #8]
   25474:	cmp	r5, #0
   25478:	andne	r1, r1, r5
   2547c:	and	r3, ip, #239	; 0xef
   25480:	cmp	ip, #43	; 0x2b
   25484:	cmpne	r3, #45	; 0x2d
   25488:	str	r1, [lr, #12]
   2548c:	add	r3, r7, #1
   25490:	add	lr, lr, #16
   25494:	bne	2569c <__assert_fail@plt+0x12f00>
   25498:	mov	r7, r3
   2549c:	ldrb	r3, [r2, #1]
   254a0:	add	r4, r2, #1
   254a4:	cmp	r3, #103	; 0x67
   254a8:	beq	25624 <__assert_fail@plt+0x12e88>
   254ac:	bls	254c4 <__assert_fail@plt+0x12d28>
   254b0:	cmp	r3, #111	; 0x6f
   254b4:	bne	2544c <__assert_fail@plt+0x12cb0>
   254b8:	add	r3, r2, #2
   254bc:	mov	r1, #7
   254c0:	b	2545c <__assert_fail@plt+0x12cc0>
   254c4:	sub	r1, r3, #48	; 0x30
   254c8:	cmp	r1, #7
   254cc:	addls	r4, r2, #2
   254d0:	movls	r1, #0
   254d4:	bhi	25538 <__assert_fail@plt+0x12d9c>
   254d8:	add	r1, r3, r1, lsl #3
   254dc:	sub	r1, r1, #48	; 0x30
   254e0:	cmp	r1, r6
   254e4:	mov	r2, r4
   254e8:	bhi	253dc <__assert_fail@plt+0x12c40>
   254ec:	ldrb	r3, [r4]
   254f0:	add	r4, r4, #1
   254f4:	sub	fp, r3, #48	; 0x30
   254f8:	cmp	fp, #7
   254fc:	bls	254d8 <__assert_fail@plt+0x12d3c>
   25500:	cmp	r5, #0
   25504:	bne	253dc <__assert_fail@plt+0x12c40>
   25508:	cmp	r3, #0
   2550c:	cmpne	r3, #44	; 0x2c
   25510:	bne	253dc <__assert_fail@plt+0x12c40>
   25514:	ldr	r5, [pc, #432]	; 256cc <__assert_fail@plt+0x12f30>
   25518:	strb	ip, [lr]
   2551c:	mov	ip, #1
   25520:	strb	ip, [lr, #1]
   25524:	str	r1, [lr, #8]
   25528:	str	r6, [lr, #4]
   2552c:	mov	ip, r3
   25530:	mov	r1, r5
   25534:	b	2547c <__assert_fail@plt+0x12ce0>
   25538:	mov	fp, #1
   2553c:	mov	r1, #0
   25540:	sub	r2, r3, #88	; 0x58
   25544:	cmp	r2, #32
   25548:	ldrls	pc, [pc, r2, lsl #2]
   2554c:	b	25608 <__assert_fail@plt+0x12e6c>
   25550:	ldrdeq	r5, [r2], -r4
   25554:	andeq	r5, r2, r8, lsl #12
   25558:	andeq	r5, r2, r8, lsl #12
   2555c:	andeq	r5, r2, r8, lsl #12
   25560:	andeq	r5, r2, r8, lsl #12
   25564:	andeq	r5, r2, r8, lsl #12
   25568:	andeq	r5, r2, r8, lsl #12
   2556c:	andeq	r5, r2, r8, lsl #12
   25570:	andeq	r5, r2, r8, lsl #12
   25574:	andeq	r5, r2, r8, lsl #12
   25578:	andeq	r5, r2, r8, lsl #12
   2557c:	andeq	r5, r2, r8, lsl #12
   25580:	andeq	r5, r2, r8, lsl #12
   25584:	andeq	r5, r2, r8, lsl #12
   25588:	andeq	r5, r2, r8, lsl #12
   2558c:	andeq	r5, r2, r8, lsl #12
   25590:	andeq	r5, r2, r8, lsl #12
   25594:	andeq	r5, r2, r8, lsl #12
   25598:	andeq	r5, r2, r8, lsl #12
   2559c:	andeq	r5, r2, r8, lsl #12
   255a0:	andeq	r5, r2, r8, lsl #12
   255a4:	andeq	r5, r2, r8, lsl #12
   255a8:	andeq	r5, r2, r8, lsl #12
   255ac:	andeq	r5, r2, r8, lsl #12
   255b0:	andeq	r5, r2, r8, lsl #12
   255b4:	andeq	r5, r2, r8, lsl #12
   255b8:	andeq	r5, r2, r0, lsl #12
   255bc:	strdeq	r5, [r2], -r8
   255c0:	strdeq	r5, [r2], -r0
   255c4:	andeq	r5, r2, r8, lsl #12
   255c8:	andeq	r5, r2, r8, lsl #12
   255cc:	andeq	r5, r2, r8, ror #11
   255d0:	andeq	r5, r2, r0, ror #11
   255d4:	mov	fp, #2
   255d8:	ldrb	r3, [r4, #1]!
   255dc:	b	25540 <__assert_fail@plt+0x12da4>
   255e0:	orr	r1, r1, #73	; 0x49
   255e4:	b	255d8 <__assert_fail@plt+0x12e3c>
   255e8:	orr	r1, r1, #146	; 0x92
   255ec:	b	255d8 <__assert_fail@plt+0x12e3c>
   255f0:	orr	r1, r1, #512	; 0x200
   255f4:	b	255d8 <__assert_fail@plt+0x12e3c>
   255f8:	orr	r1, r1, #3072	; 0xc00
   255fc:	b	255d8 <__assert_fail@plt+0x12e3c>
   25600:	orr	r1, r1, #292	; 0x124
   25604:	b	255d8 <__assert_fail@plt+0x12e3c>
   25608:	strb	ip, [lr]
   2560c:	mov	r2, r4
   25610:	mov	ip, r3
   25614:	strb	fp, [lr, #1]
   25618:	str	r5, [lr, #4]
   2561c:	str	r1, [lr, #8]
   25620:	b	25474 <__assert_fail@plt+0x12cd8>
   25624:	add	r3, r2, #2
   25628:	mov	r1, #56	; 0x38
   2562c:	b	2545c <__assert_fail@plt+0x12cc0>
   25630:	ldr	r5, [pc, #148]	; 256cc <__assert_fail@plt+0x12f30>
   25634:	b	253ac <__assert_fail@plt+0x12c10>
   25638:	orr	r5, r5, sl
   2563c:	b	253ac <__assert_fail@plt+0x12c10>
   25640:	orr	r5, r5, #2496	; 0x9c0
   25644:	b	253ac <__assert_fail@plt+0x12c10>
   25648:	orr	r5, r5, r9
   2564c:	b	253ac <__assert_fail@plt+0x12c10>
   25650:	cmp	r3, #0
   25654:	bne	2541c <__assert_fail@plt+0x12c80>
   25658:	sub	r2, r2, r4
   2565c:	cmp	r2, #4
   25660:	andle	r4, r5, #3072	; 0xc00
   25664:	mov	r0, #32
   25668:	mvnle	r4, r4, lsr #10
   2566c:	ldrgt	r4, [pc, #88]	; 256cc <__assert_fail@plt+0x12f30>
   25670:	mvnle	r4, r4, lsl #10
   25674:	bl	2df04 <__assert_fail@plt+0x1b768>
   25678:	ldr	r1, [pc, #80]	; 256d0 <__assert_fail@plt+0x12f34>
   2567c:	ldr	r2, [pc, #72]	; 256cc <__assert_fail@plt+0x12f30>
   25680:	mov	r3, #0
   25684:	str	r5, [r0, #8]
   25688:	str	r4, [r0, #12]
   2568c:	strh	r1, [r0]
   25690:	str	r2, [r0, #4]
   25694:	strb	r3, [r0, #17]
   25698:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2569c:	cmp	ip, #44	; 0x2c
   256a0:	addeq	r4, r2, #1
   256a4:	moveq	lr, r7
   256a8:	beq	253a8 <__assert_fail@plt+0x12c0c>
   256ac:	cmp	ip, #0
   256b0:	bne	253dc <__assert_fail@plt+0x12c40>
   256b4:	add	r7, r0, r7, lsl #4
   256b8:	strb	ip, [r7, #1]
   256bc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   256c0:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   256c4:	andeq	r0, r0, r7, lsl #4
   256c8:	andeq	r0, r0, r8, lsr r4
   256cc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   256d0:	andeq	r0, r0, sp, lsr r1
   256d4:	push	{r4, r5, r6, lr}
   256d8:	sub	sp, sp, #112	; 0x70
   256dc:	ldr	r4, [pc, #100]	; 25748 <__assert_fail@plt+0x12fac>
   256e0:	mov	r1, r0
   256e4:	mov	r2, sp
   256e8:	ldr	r3, [r4]
   256ec:	mov	r0, #3
   256f0:	str	r3, [sp, #108]	; 0x6c
   256f4:	bl	126f4 <__xstat64@plt>
   256f8:	subs	r5, r0, #0
   256fc:	movne	r0, #0
   25700:	bne	2572c <__assert_fail@plt+0x12f90>
   25704:	mov	r0, #32
   25708:	ldr	r6, [sp, #16]
   2570c:	bl	2df04 <__assert_fail@plt+0x1b768>
   25710:	ldr	r3, [pc, #52]	; 2574c <__assert_fail@plt+0x12fb0>
   25714:	ldr	r2, [pc, #52]	; 25750 <__assert_fail@plt+0x12fb4>
   25718:	str	r6, [r0, #8]
   2571c:	strb	r5, [r0, #17]
   25720:	strh	r2, [r0]
   25724:	str	r3, [r0, #4]
   25728:	str	r3, [r0, #12]
   2572c:	ldr	r2, [sp, #108]	; 0x6c
   25730:	ldr	r3, [r4]
   25734:	cmp	r2, r3
   25738:	bne	25744 <__assert_fail@plt+0x12fa8>
   2573c:	add	sp, sp, #112	; 0x70
   25740:	pop	{r4, r5, r6, pc}
   25744:	bl	12244 <__stack_chk_fail@plt>
   25748:	andeq	fp, r5, r0, ror #24
   2574c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   25750:	andeq	r0, r0, sp, lsr r1
   25754:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   25758:	ldrb	r4, [r3, #1]
   2575c:	ldr	r8, [pc, #336]	; 258b4 <__assert_fail@plt+0x13118>
   25760:	ldr	sl, [sp, #32]
   25764:	cmp	r4, #0
   25768:	and	r0, r0, r8
   2576c:	beq	258ac <__assert_fail@plt+0x13110>
   25770:	add	r3, r3, #16
   25774:	mvn	r2, r2
   25778:	mov	r7, #0
   2577c:	mvn	r9, #3072	; 0xc00
   25780:	b	257fc <__assert_fail@plt+0x13060>
   25784:	cmp	r4, #2
   25788:	mvn	lr, #0
   2578c:	beq	2589c <__assert_fail@plt+0x13100>
   25790:	mov	r6, r1
   25794:	cmp	r4, #3
   25798:	bne	257c0 <__assert_fail@plt+0x13024>
   2579c:	and	ip, ip, r0
   257a0:	tst	ip, #292	; 0x124
   257a4:	movne	r4, #292	; 0x124
   257a8:	moveq	r4, #0
   257ac:	tst	ip, #146	; 0x92
   257b0:	orrne	r4, r4, #146	; 0x92
   257b4:	tst	ip, #73	; 0x49
   257b8:	orrne	r4, r4, #73	; 0x49
   257bc:	orr	ip, r4, ip
   257c0:	cmp	r5, #0
   257c4:	and	ip, ip, lr
   257c8:	ldrb	r4, [r3, #-16]
   257cc:	bne	25838 <__assert_fail@plt+0x1309c>
   257d0:	cmp	r4, #45	; 0x2d
   257d4:	and	ip, ip, r2
   257d8:	beq	25884 <__assert_fail@plt+0x130e8>
   257dc:	cmp	r4, #61	; 0x3d
   257e0:	beq	25858 <__assert_fail@plt+0x130bc>
   257e4:	cmp	r4, #43	; 0x2b
   257e8:	beq	25890 <__assert_fail@plt+0x130f4>
   257ec:	add	r3, r3, #16
   257f0:	ldrb	r4, [r3, #-15]
   257f4:	cmp	r4, #0
   257f8:	beq	25878 <__assert_fail@plt+0x130dc>
   257fc:	cmp	r1, #0
   25800:	ldr	r5, [r3, #-12]
   25804:	ldr	ip, [r3, #-8]
   25808:	beq	25784 <__assert_fail@plt+0x12fe8>
   2580c:	ldr	lr, [r3, #-4]
   25810:	cmp	r4, #2
   25814:	mvn	r6, lr
   25818:	and	r6, r6, #3072	; 0xc00
   2581c:	orr	lr, lr, r9
   25820:	bne	25794 <__assert_fail@plt+0x12ff8>
   25824:	orr	ip, ip, #73	; 0x49
   25828:	cmp	r5, #0
   2582c:	and	ip, ip, lr
   25830:	ldrb	r4, [r3, #-16]
   25834:	beq	257d0 <__assert_fail@plt+0x13034>
   25838:	cmp	r4, #45	; 0x2d
   2583c:	and	ip, ip, r5
   25840:	beq	25884 <__assert_fail@plt+0x130e8>
   25844:	cmp	r4, #61	; 0x3d
   25848:	bne	257e4 <__assert_fail@plt+0x13048>
   2584c:	mvn	r5, r5
   25850:	orr	r6, r6, r5
   25854:	mvn	lr, r6
   25858:	add	r3, r3, #16
   2585c:	ldrb	r4, [r3, #-15]
   25860:	and	lr, lr, r8
   25864:	and	r0, r0, r6
   25868:	cmp	r4, #0
   2586c:	orr	r7, r7, lr
   25870:	orr	r0, r0, ip
   25874:	bne	257fc <__assert_fail@plt+0x13060>
   25878:	cmp	sl, #0
   2587c:	strne	r7, [sl]
   25880:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   25884:	orr	r7, r7, ip
   25888:	bic	r0, r0, ip
   2588c:	b	257ec <__assert_fail@plt+0x13050>
   25890:	orr	r7, r7, ip
   25894:	orr	r0, r0, ip
   25898:	b	257ec <__assert_fail@plt+0x13050>
   2589c:	ands	r6, r0, #73	; 0x49
   258a0:	beq	257c0 <__assert_fail@plt+0x13024>
   258a4:	mov	r6, r1
   258a8:	b	25824 <__assert_fail@plt+0x13088>
   258ac:	mov	r7, r4
   258b0:	b	25878 <__assert_fail@plt+0x130dc>
   258b4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   258b8:	ldr	r3, [pc, #44]	; 258ec <__assert_fail@plt+0x13150>
   258bc:	push	{r4, lr}
   258c0:	mov	r5, r0
   258c4:	mov	r2, #5
   258c8:	ldr	r1, [pc, #32]	; 258f0 <__assert_fail@plt+0x13154>
   258cc:	mov	r0, #0
   258d0:	ldr	r4, [r3]
   258d4:	bl	1222c <dcgettext@plt>
   258d8:	mov	r1, r5
   258dc:	mov	r2, r0
   258e0:	mov	r0, r4
   258e4:	bl	12388 <error@plt>
   258e8:	bl	1273c <abort@plt>
   258ec:	andeq	ip, r5, r0, ror #9
   258f0:	andeq	r8, r4, r0, lsr #14
   258f4:	ldr	r3, [pc, #44]	; 25928 <__assert_fail@plt+0x1318c>
   258f8:	push	{r4, lr}
   258fc:	mov	r5, r0
   25900:	mov	r2, #5
   25904:	ldr	r1, [pc, #32]	; 2592c <__assert_fail@plt+0x13190>
   25908:	mov	r0, #0
   2590c:	ldr	r4, [r3]
   25910:	bl	1222c <dcgettext@plt>
   25914:	mov	r1, r5
   25918:	mov	r2, r0
   2591c:	mov	r0, r4
   25920:	bl	12388 <error@plt>
   25924:	bl	1273c <abort@plt>
   25928:	andeq	ip, r5, r0, ror #9
   2592c:	andeq	r8, r4, ip, asr #14
   25930:	sub	sp, sp, #8
   25934:	push	{r4, r5, r6, r7, r8, lr}
   25938:	mov	r4, r0
   2593c:	ldr	r0, [r0, #156]	; 0x9c
   25940:	add	r1, sp, #24
   25944:	cmp	r0, #0
   25948:	stm	r1, {r2, r3}
   2594c:	ldrd	r6, [sp, #32]
   25950:	ldr	r5, [sp, #40]	; 0x28
   25954:	beq	259a4 <__assert_fail@plt+0x13208>
   25958:	ldr	r3, [r4, #48]	; 0x30
   2595c:	cmp	r3, #0
   25960:	bne	259a4 <__assert_fail@plt+0x13208>
   25964:	ldrb	r3, [r4, #153]	; 0x99
   25968:	cmp	r3, #0
   2596c:	bne	259a4 <__assert_fail@plt+0x13208>
   25970:	ldr	r3, [r4, #172]	; 0xac
   25974:	cmp	r5, #2
   25978:	cmple	r3, #0
   2597c:	beq	25a80 <__assert_fail@plt+0x132e4>
   25980:	mov	ip, r1
   25984:	add	lr, r4, #32
   25988:	ldm	ip!, {r0, r1, r2, r3}
   2598c:	mov	r5, #1
   25990:	strb	r5, [r4, #180]	; 0xb4
   25994:	stmia	lr!, {r0, r1, r2, r3}
   25998:	ldm	ip, {r0, r1}
   2599c:	stm	lr, {r0, r1}
   259a0:	b	25a10 <__assert_fail@plt+0x13274>
   259a4:	cmp	r5, #4
   259a8:	ble	25a1c <__assert_fail@plt+0x13280>
   259ac:	add	r0, r0, #1
   259b0:	str	r0, [r4, #156]	; 0x9c
   259b4:	mov	r2, #100	; 0x64
   259b8:	mov	r3, #0
   259bc:	mov	r0, r6
   259c0:	mov	r1, r7
   259c4:	bl	43cf4 <fts_children@@Base+0x12258>
   259c8:	mov	r0, r6
   259cc:	mov	r1, r7
   259d0:	sub	r5, r5, #4
   259d4:	strd	r2, [r4, #64]	; 0x40
   259d8:	mov	r2, #100	; 0x64
   259dc:	mov	r3, #0
   259e0:	bl	43cf4 <fts_children@@Base+0x12258>
   259e4:	mov	r2, #100	; 0x64
   259e8:	mov	r3, #0
   259ec:	bl	43cf4 <fts_children@@Base+0x12258>
   259f0:	mov	r0, r6
   259f4:	mov	r1, r7
   259f8:	strd	r2, [r4, #56]	; 0x38
   259fc:	ldr	r2, [pc, #152]	; 25a9c <__assert_fail@plt+0x13300>
   25a00:	mov	r3, #0
   25a04:	bl	43cf4 <fts_children@@Base+0x12258>
   25a08:	str	r5, [r4, #48]	; 0x30
   25a0c:	strd	r0, [r4, #40]	; 0x28
   25a10:	pop	{r4, r5, r6, r7, r8, lr}
   25a14:	add	sp, sp, #8
   25a18:	bx	lr
   25a1c:	ldr	r3, [r4, #172]	; 0xac
   25a20:	cmp	r5, #2
   25a24:	add	r3, r3, #1
   25a28:	str	r3, [r4, #172]	; 0xac
   25a2c:	ble	25a88 <__assert_fail@plt+0x132ec>
   25a30:	mov	r2, #100	; 0x64
   25a34:	mov	r3, #0
   25a38:	mov	r0, r6
   25a3c:	mov	r1, r7
   25a40:	bl	43cf4 <fts_children@@Base+0x12258>
   25a44:	mov	r2, #100	; 0x64
   25a48:	mov	r3, #0
   25a4c:	strd	r0, [r4, #72]	; 0x48
   25a50:	mov	r0, r6
   25a54:	mov	r1, r7
   25a58:	bl	43cf4 <fts_children@@Base+0x12258>
   25a5c:	strd	r2, [r4, #80]	; 0x50
   25a60:	mov	r3, #0
   25a64:	mov	r2, #2
   25a68:	str	r3, [r4, #88]	; 0x58
   25a6c:	str	r3, [r4, #92]	; 0x5c
   25a70:	str	r2, [r4, #28]
   25a74:	pop	{r4, r5, r6, r7, r8, lr}
   25a78:	add	sp, sp, #8
   25a7c:	bx	lr
   25a80:	mov	r3, #1
   25a84:	str	r3, [r4, #172]	; 0xac
   25a88:	mov	r2, #0
   25a8c:	mov	r3, #0
   25a90:	strd	r6, [r4, #72]	; 0x48
   25a94:	strd	r2, [r4, #80]	; 0x50
   25a98:	b	25a60 <__assert_fail@plt+0x132c4>
   25a9c:	andeq	r2, r0, r0, lsl r7
   25aa0:	ldr	r3, [r1, #24]
   25aa4:	cmp	r3, #0
   25aa8:	blt	25b18 <__assert_fail@plt+0x1337c>
   25aac:	ldr	r3, [r0]
   25ab0:	ldr	r2, [r1]
   25ab4:	ldr	ip, [r0, #4]
   25ab8:	push	{r4, lr}
   25abc:	eor	r3, r3, r2
   25ac0:	ldr	lr, [r1, #4]
   25ac4:	ldr	r2, [r0, #8]
   25ac8:	ldr	r4, [r1, #8]
   25acc:	eor	ip, ip, lr
   25ad0:	eor	r2, r2, r4
   25ad4:	ldr	lr, [r0, #12]
   25ad8:	ldr	r4, [r1, #12]
   25adc:	orr	r3, r3, ip
   25ae0:	eor	lr, lr, r4
   25ae4:	ldr	ip, [r0, #16]
   25ae8:	ldr	r4, [r1, #16]
   25aec:	orr	r3, r3, r2
   25af0:	ldr	r1, [r1, #20]
   25af4:	ldr	r2, [r0, #20]
   25af8:	orr	r3, r3, lr
   25afc:	eor	ip, ip, r4
   25b00:	orr	r3, r3, ip
   25b04:	eor	r2, r2, r1
   25b08:	orrs	r3, r3, r2
   25b0c:	moveq	r0, #1
   25b10:	movne	r0, #0
   25b14:	pop	{r4, pc}
   25b18:	mov	r0, #0
   25b1c:	bx	lr
   25b20:	push	{r4, r5, r6, lr}
   25b24:	subs	r5, r0, #0
   25b28:	ldr	r4, [pc, #248]	; 25c28 <__assert_fail@plt+0x1348c>
   25b2c:	mov	r6, r1
   25b30:	sub	sp, sp, #8
   25b34:	smull	r3, r4, r4, r5
   25b38:	ldr	r3, [pc, #236]	; 25c2c <__assert_fail@plt+0x13490>
   25b3c:	add	r2, r4, r5
   25b40:	asr	r4, r5, #31
   25b44:	rsb	r4, r4, r2, asr #11
   25b48:	movlt	r1, #45	; 0x2d
   25b4c:	eor	r2, r4, r4, asr #31
   25b50:	sub	r2, r2, r4, asr #31
   25b54:	rsb	r4, r4, r4, lsl #4
   25b58:	movge	r1, #43	; 0x2b
   25b5c:	rsb	r4, r4, r4, lsl #4
   25b60:	stm	sp, {r1, r2}
   25b64:	mov	r0, r6
   25b68:	mvn	r2, #0
   25b6c:	mov	r1, #1
   25b70:	bl	124f0 <__sprintf_chk@plt>
   25b74:	subs	r4, r5, r4, lsl #4
   25b78:	beq	25be8 <__assert_fail@plt+0x1344c>
   25b7c:	cmp	r4, #0
   25b80:	ldr	r3, [pc, #168]	; 25c30 <__assert_fail@plt+0x13494>
   25b84:	rsblt	r4, r4, #0
   25b88:	ldr	lr, [pc, #164]	; 25c34 <__assert_fail@plt+0x13498>
   25b8c:	umull	r2, r3, r3, r4
   25b90:	ldr	r1, [pc, #160]	; 25c38 <__assert_fail@plt+0x1349c>
   25b94:	add	r5, r6, r0
   25b98:	lsr	r3, r3, #5
   25b9c:	mov	r2, r3
   25ba0:	umull	r3, r1, r1, r4
   25ba4:	umull	r3, ip, lr, r2
   25ba8:	rsb	r3, r2, r2, lsl #4
   25bac:	lsr	ip, ip, #3
   25bb0:	lsr	r1, r1, #6
   25bb4:	add	ip, ip, ip, lsl #2
   25bb8:	subs	r3, r4, r3, lsl #2
   25bbc:	sub	r2, r2, ip, lsl #1
   25bc0:	add	r2, r2, #48	; 0x30
   25bc4:	add	r1, r1, #48	; 0x30
   25bc8:	mov	ip, #58	; 0x3a
   25bcc:	strb	ip, [r6, r0]
   25bd0:	strb	r2, [r5, #2]
   25bd4:	strb	r1, [r5, #1]
   25bd8:	addeq	r2, r5, #3
   25bdc:	bne	25bf4 <__assert_fail@plt+0x13458>
   25be0:	mov	r3, #0
   25be4:	strb	r3, [r2]
   25be8:	mov	r0, r6
   25bec:	add	sp, sp, #8
   25bf0:	pop	{r4, r5, r6, pc}
   25bf4:	umull	r2, lr, lr, r3
   25bf8:	strb	ip, [r5, #3]
   25bfc:	add	r2, r5, #6
   25c00:	lsr	lr, lr, #3
   25c04:	add	r1, lr, lr, lsl #2
   25c08:	add	lr, lr, #48	; 0x30
   25c0c:	sub	r3, r3, r1, lsl #1
   25c10:	add	r3, r3, #48	; 0x30
   25c14:	strb	r3, [r5, #5]
   25c18:	mov	r3, #0
   25c1c:	strb	lr, [r5, #4]
   25c20:	strb	r3, [r2]
   25c24:	b	25be8 <__assert_fail@plt+0x1344c>
   25c28:			; <UNDEFINED> instruction: 0x91a2b3c5
   25c2c:	muleq	r4, ip, r2
   25c30:	stmhi	r8, {r0, r3, r7, fp, pc}
   25c34:	stclgt	12, cr12, [ip], {205}	; 0xcd
   25c38:	blne	13c6314 <stdout@@GLIBC_2.4+0x1369dd0>
   25c3c:	ldr	r2, [pc, #104]	; 25cac <__assert_fail@plt+0x13510>
   25c40:	push	{r4, lr}
   25c44:	mov	r4, r1
   25c48:	smull	r2, ip, r2, r0
   25c4c:	ldr	lr, [pc, #92]	; 25cb0 <__assert_fail@plt+0x13514>
   25c50:	asr	r2, r0, #31
   25c54:	rsb	r2, r2, ip, asr #5
   25c58:	add	ip, r2, #19
   25c5c:	add	r2, r2, r2, lsl #2
   25c60:	eor	r1, ip, ip, asr #31
   25c64:	add	r2, r2, r2, lsl #2
   25c68:	sub	sp, sp, #8
   25c6c:	sub	r2, r0, r2, lsl #2
   25c70:	cmp	r2, #0
   25c74:	rsblt	r2, r2, #0
   25c78:	sub	r1, r1, ip, asr #31
   25c7c:	ldr	r3, [pc, #48]	; 25cb4 <__assert_fail@plt+0x13518>
   25c80:	stm	sp, {r1, r2}
   25c84:	cmp	r0, r3
   25c88:	movlt	r3, lr
   25c8c:	addge	r3, lr, #1
   25c90:	mvn	r2, #0
   25c94:	mov	r0, r4
   25c98:	mov	r1, #1
   25c9c:	bl	124f0 <__sprintf_chk@plt>
   25ca0:	mov	r0, r4
   25ca4:	add	sp, sp, #8
   25ca8:	pop	{r4, pc}
   25cac:	mvnpl	r8, pc, lsl r5
   25cb0:	andeq	r9, r4, r4, lsr #5
   25cb4:			; <UNDEFINED> instruction: 0xfffff894
   25cb8:	push	{r0, r1, r2, r3}
   25cbc:	mov	r2, #6
   25cc0:	push	{r4, r5, r6, lr}
   25cc4:	sub	sp, sp, #8
   25cc8:	ldr	r4, [pc, #92]	; 25d2c <__assert_fail@plt+0x13590>
   25ccc:	ldr	r5, [pc, #92]	; 25d30 <__assert_fail@plt+0x13594>
   25cd0:	ldr	r6, [sp, #24]
   25cd4:	ldr	ip, [r4]
   25cd8:	ldr	r3, [r5]
   25cdc:	mov	r1, #1
   25ce0:	ldr	r0, [pc, #76]	; 25d34 <__assert_fail@plt+0x13598>
   25ce4:	str	ip, [sp, #4]
   25ce8:	bl	122f8 <fwrite@plt>
   25cec:	add	ip, sp, #28
   25cf0:	mov	r2, r6
   25cf4:	mov	r3, ip
   25cf8:	ldr	r0, [r5]
   25cfc:	mov	r1, #1
   25d00:	str	ip, [sp]
   25d04:	bl	1240c <__vfprintf_chk@plt>
   25d08:	ldr	r2, [sp, #4]
   25d0c:	ldr	r3, [r4]
   25d10:	cmp	r2, r3
   25d14:	bne	25d28 <__assert_fail@plt+0x1358c>
   25d18:	add	sp, sp, #8
   25d1c:	pop	{r4, r5, r6, lr}
   25d20:	add	sp, sp, #16
   25d24:	bx	lr
   25d28:	bl	12244 <__stack_chk_fail@plt>
   25d2c:	andeq	fp, r5, r0, ror #24
   25d30:	andeq	ip, r5, r8, lsr r5
   25d34:			; <UNDEFINED> instruction: 0x000492b0
   25d38:	push	{r4, lr}
   25d3c:	sub	sp, sp, #16
   25d40:	ldr	r4, [pc, #44]	; 25d74 <__assert_fail@plt+0x135d8>
   25d44:	ldr	r1, [sp, #24]
   25d48:	ldr	lr, [pc, #40]	; 25d78 <__assert_fail@plt+0x135dc>
   25d4c:	eor	ip, r0, #1
   25d50:	strd	r2, [sp]
   25d54:	str	r1, [sp, #8]
   25d58:	ldr	r0, [r4]
   25d5c:	add	r2, lr, ip
   25d60:	mov	r1, #1
   25d64:	bl	12580 <__fprintf_chk@plt>
   25d68:	mov	r0, #1
   25d6c:	add	sp, sp, #16
   25d70:	pop	{r4, pc}
   25d74:	andeq	ip, r5, r8, lsr r5
   25d78:			; <UNDEFINED> instruction: 0x000492b8
   25d7c:	push	{r4, r5, r6, r7, r8, lr}
   25d80:	mov	r7, r0
   25d84:	ldr	r5, [pc, #172]	; 25e38 <__assert_fail@plt+0x1369c>
   25d88:	ldr	r3, [pc, #172]	; 25e3c <__assert_fail@plt+0x136a0>
   25d8c:	mov	r6, r1
   25d90:	b	25da0 <__assert_fail@plt+0x13604>
   25d94:	ldr	r3, [r5, #12]!
   25d98:	cmp	r3, #0
   25d9c:	beq	25dc0 <__assert_fail@plt+0x13624>
   25da0:	mov	r1, r3
   25da4:	mov	r0, r6
   25da8:	bl	120dc <strcmp@plt>
   25dac:	mov	r4, r5
   25db0:	cmp	r0, #0
   25db4:	bne	25d94 <__assert_fail@plt+0x135f8>
   25db8:	mov	r0, r4
   25dbc:	pop	{r4, r5, r6, r7, r8, pc}
   25dc0:	ldr	r1, [r7, #192]	; 0xc0
   25dc4:	cmp	r1, #0
   25dc8:	beq	25df8 <__assert_fail@plt+0x1365c>
   25dcc:	add	r7, r7, #192	; 0xc0
   25dd0:	b	25de0 <__assert_fail@plt+0x13644>
   25dd4:	ldr	r1, [r7, #12]!
   25dd8:	cmp	r1, #0
   25ddc:	beq	25df8 <__assert_fail@plt+0x1365c>
   25de0:	mov	r0, r6
   25de4:	bl	120dc <strcmp@plt>
   25de8:	mov	r4, r7
   25dec:	cmp	r0, #0
   25df0:	bne	25dd4 <__assert_fail@plt+0x13638>
   25df4:	b	25db8 <__assert_fail@plt+0x1361c>
   25df8:	ldr	r3, [pc, #64]	; 25e40 <__assert_fail@plt+0x136a4>
   25dfc:	ldr	r1, [pc, #64]	; 25e44 <__assert_fail@plt+0x136a8>
   25e00:	b	25e10 <__assert_fail@plt+0x13674>
   25e04:	ldr	r1, [r4, #12]
   25e08:	cmp	r1, #0
   25e0c:	beq	25e2c <__assert_fail@plt+0x13690>
   25e10:	mov	r0, r6
   25e14:	mov	r4, r3
   25e18:	bl	120dc <strcmp@plt>
   25e1c:	add	r3, r4, #12
   25e20:	cmp	r0, #0
   25e24:	bne	25e04 <__assert_fail@plt+0x13668>
   25e28:	b	25db8 <__assert_fail@plt+0x1361c>
   25e2c:	mov	r4, r1
   25e30:	mov	r0, r4
   25e34:	pop	{r4, r5, r6, r7, r8, pc}
   25e38:	andeq	r8, r4, ip, ror r7
   25e3c:	andeq	r9, r4, r4, asr #5
   25e40:	andeq	r8, r4, ip, lsr #15
   25e44:	andeq	r9, r4, r8, asr #5
   25e48:	push	{r4, r5, lr}
   25e4c:	mov	r2, #5
   25e50:	sub	sp, sp, #12
   25e54:	mov	r5, r0
   25e58:	mov	r4, r1
   25e5c:	mov	r0, #0
   25e60:	ldr	r1, [pc, #336]	; 25fb8 <__assert_fail@plt+0x1381c>
   25e64:	bl	1222c <dcgettext@plt>
   25e68:	mov	r1, r5
   25e6c:	bl	25cb8 <__assert_fail@plt+0x1351c>
   25e70:	ldrd	r2, [r4, #96]	; 0x60
   25e74:	orrs	r1, r2, r3
   25e78:	bne	25f88 <__assert_fail@plt+0x137ec>
   25e7c:	ldrd	r2, [r4, #104]	; 0x68
   25e80:	orrs	r1, r2, r3
   25e84:	beq	25f2c <__assert_fail@plt+0x13790>
   25e88:	mov	r0, #0
   25e8c:	ldr	r1, [pc, #296]	; 25fbc <__assert_fail@plt+0x13820>
   25e90:	str	r1, [sp]
   25e94:	bl	25d38 <__assert_fail@plt+0x1359c>
   25e98:	ldrd	r2, [r4, #112]	; 0x70
   25e9c:	orrs	r1, r2, r3
   25ea0:	beq	25eb0 <__assert_fail@plt+0x13714>
   25ea4:	ldr	r1, [pc, #276]	; 25fc0 <__assert_fail@plt+0x13824>
   25ea8:	str	r1, [sp]
   25eac:	bl	25d38 <__assert_fail@plt+0x1359c>
   25eb0:	ldrd	r2, [r4, #120]	; 0x78
   25eb4:	orrs	r1, r2, r3
   25eb8:	beq	25ec8 <__assert_fail@plt+0x1372c>
   25ebc:	ldr	r1, [pc, #256]	; 25fc4 <__assert_fail@plt+0x13828>
   25ec0:	str	r1, [sp]
   25ec4:	bl	25d38 <__assert_fail@plt+0x1359c>
   25ec8:	ldrd	r2, [r4, #128]	; 0x80
   25ecc:	orrs	r1, r2, r3
   25ed0:	beq	25ee0 <__assert_fail@plt+0x13744>
   25ed4:	ldr	r1, [pc, #236]	; 25fc8 <__assert_fail@plt+0x1382c>
   25ed8:	str	r1, [sp]
   25edc:	bl	25d38 <__assert_fail@plt+0x1359c>
   25ee0:	ldrd	r2, [r4, #136]	; 0x88
   25ee4:	orrs	r1, r2, r3
   25ee8:	beq	25ef8 <__assert_fail@plt+0x1375c>
   25eec:	ldr	r1, [pc, #216]	; 25fcc <__assert_fail@plt+0x13830>
   25ef0:	str	r1, [sp]
   25ef4:	bl	25d38 <__assert_fail@plt+0x1359c>
   25ef8:	ldr	r2, [r4, #144]	; 0x90
   25efc:	asr	r3, r2, #31
   25f00:	orrs	r1, r2, r3
   25f04:	beq	25f14 <__assert_fail@plt+0x13778>
   25f08:	ldr	r1, [pc, #192]	; 25fd0 <__assert_fail@plt+0x13834>
   25f0c:	str	r1, [sp]
   25f10:	bl	25d38 <__assert_fail@plt+0x1359c>
   25f14:	ldr	r3, [pc, #184]	; 25fd4 <__assert_fail@plt+0x13838>
   25f18:	mov	r0, #10
   25f1c:	ldr	r1, [r3]
   25f20:	add	sp, sp, #12
   25f24:	pop	{r4, r5, lr}
   25f28:	b	12634 <fputc@plt>
   25f2c:	ldrd	r2, [r4, #112]	; 0x70
   25f30:	orrs	r1, r2, r3
   25f34:	bne	25fa8 <__assert_fail@plt+0x1380c>
   25f38:	ldrd	r2, [r4, #120]	; 0x78
   25f3c:	orrs	r1, r2, r3
   25f40:	bne	25fb0 <__assert_fail@plt+0x13814>
   25f44:	ldrd	r0, [r4, #128]	; 0x80
   25f48:	orrs	r1, r0, r1
   25f4c:	bne	25fb0 <__assert_fail@plt+0x13814>
   25f50:	ldrd	r0, [r4, #136]	; 0x88
   25f54:	orrs	r1, r0, r1
   25f58:	bne	25fb0 <__assert_fail@plt+0x13814>
   25f5c:	ldr	r0, [r4, #144]	; 0x90
   25f60:	cmp	r0, #0
   25f64:	bne	25fb0 <__assert_fail@plt+0x13814>
   25f68:	mov	r2, #5
   25f6c:	ldr	r1, [pc, #100]	; 25fd8 <__assert_fail@plt+0x1383c>
   25f70:	bl	1222c <dcgettext@plt>
   25f74:	ldr	r3, [pc, #88]	; 25fd4 <__assert_fail@plt+0x13838>
   25f78:	ldr	r1, [r3]
   25f7c:	add	sp, sp, #12
   25f80:	pop	{r4, r5, lr}
   25f84:	b	12724 <fputs@plt>
   25f88:	ldr	r1, [pc, #76]	; 25fdc <__assert_fail@plt+0x13840>
   25f8c:	mov	r0, #0
   25f90:	str	r1, [sp]
   25f94:	bl	25d38 <__assert_fail@plt+0x1359c>
   25f98:	ldrd	r2, [r4, #104]	; 0x68
   25f9c:	orrs	r1, r2, r3
   25fa0:	beq	25e98 <__assert_fail@plt+0x136fc>
   25fa4:	b	25e8c <__assert_fail@plt+0x136f0>
   25fa8:	mov	r0, #0
   25fac:	b	25ea4 <__assert_fail@plt+0x13708>
   25fb0:	mov	r0, #0
   25fb4:	b	25eb4 <__assert_fail@plt+0x13718>
   25fb8:	andeq	r9, r4, ip, asr #5
   25fbc:	strdeq	r9, [r4], -r8
   25fc0:	andeq	r9, r4, r4, lsl #6
   25fc4:	andeq	r9, r4, ip, lsl #6
   25fc8:	andeq	r9, r4, r4, lsl r3
   25fcc:	andeq	r7, r4, r0, ror #21
   25fd0:	andeq	r9, r4, ip, lsl r3
   25fd4:	andeq	ip, r5, r8, lsr r5
   25fd8:	andeq	r9, r4, r0, ror #5
   25fdc:	strdeq	r9, [r4], -r0
   25fe0:	push	{r4, r5, r6, r7, lr}
   25fe4:	sub	sp, sp, #44	; 0x2c
   25fe8:	ldr	r5, [pc, #172]	; 2609c <__assert_fail@plt+0x13900>
   25fec:	mov	r4, r2
   25ff0:	mov	r2, #0
   25ff4:	ldr	ip, [r5]
   25ff8:	mov	r3, r0
   25ffc:	mov	r6, r1
   26000:	str	r2, [sp, #4]
   26004:	str	r2, [sp]
   26008:	mov	r0, r4
   2600c:	ldr	r2, [pc, #140]	; 260a0 <__assert_fail@plt+0x13904>
   26010:	mov	r1, #100	; 0x64
   26014:	str	ip, [sp, #36]	; 0x24
   26018:	bl	431fc <fts_children@@Base+0x11760>
   2601c:	cmp	r0, #99	; 0x63
   26020:	movgt	r3, #0
   26024:	movle	r3, #1
   26028:	cmp	r6, #0
   2602c:	moveq	r3, #0
   26030:	cmp	r3, #0
   26034:	beq	26044 <__assert_fail@plt+0x138a8>
   26038:	ldr	r3, [r6, #176]	; 0xb0
   2603c:	cmp	r3, #0
   26040:	bne	26060 <__assert_fail@plt+0x138c4>
   26044:	ldr	r2, [sp, #36]	; 0x24
   26048:	ldr	r3, [r5]
   2604c:	mov	r0, r4
   26050:	cmp	r2, r3
   26054:	bne	26098 <__assert_fail@plt+0x138fc>
   26058:	add	sp, sp, #44	; 0x2c
   2605c:	pop	{r4, r5, r6, r7, pc}
   26060:	mov	r7, r0
   26064:	add	r1, sp, #8
   26068:	ldr	r0, [r6, #24]
   2606c:	bl	25b20 <__assert_fail@plt+0x13384>
   26070:	ldr	r3, [pc, #44]	; 260a4 <__assert_fail@plt+0x13908>
   26074:	add	ip, r4, r7
   26078:	str	r3, [sp]
   2607c:	rsb	r1, r7, #100	; 0x64
   26080:	mvn	r3, #0
   26084:	mov	r2, #1
   26088:	str	r0, [sp, #4]
   2608c:	mov	r0, ip
   26090:	bl	12784 <__snprintf_chk@plt>
   26094:	b	26044 <__assert_fail@plt+0x138a8>
   26098:	bl	12244 <__stack_chk_fail@plt>
   2609c:	andeq	fp, r5, r0, ror #24
   260a0:	andeq	r9, r4, r8, lsr #6
   260a4:	andeq	r9, r4, r4, asr #6
   260a8:	push	{r4, r5, r6, r7, lr}
   260ac:	mov	r5, r1
   260b0:	ldrb	r1, [r0, #188]	; 0xbc
   260b4:	sub	sp, sp, #20
   260b8:	mov	r4, r0
   260bc:	cmp	r1, #0
   260c0:	beq	26164 <__assert_fail@plt+0x139c8>
   260c4:	ldr	r1, [r0, #8]
   260c8:	ldr	r0, [r0, #12]
   260cc:	adds	r6, r1, #1
   260d0:	adc	r7, r0, #0
   260d4:	cmp	r7, #0
   260d8:	cmpeq	r6, #13
   260dc:	bhi	26128 <__assert_fail@plt+0x1398c>
   260e0:	add	r1, r6, r6, lsl #2
   260e4:	ldr	r3, [pc, #196]	; 261b0 <__assert_fail@plt+0x13a14>
   260e8:	add	r2, r6, r1, lsl #1
   260ec:	add	r3, r3, r2
   260f0:	mov	r1, #100	; 0x64
   260f4:	ldr	r2, [pc, #184]	; 261b4 <__assert_fail@plt+0x13a18>
   260f8:	mov	r0, r5
   260fc:	bl	124fc <snprintf@plt>
   26100:	ldr	r3, [r4, #16]
   26104:	cmp	r3, #6
   26108:	bhi	26158 <__assert_fail@plt+0x139bc>
   2610c:	cmp	r0, #99	; 0x63
   26110:	bhi	26158 <__assert_fail@plt+0x139bc>
   26114:	clz	r2, r0
   26118:	add	lr, r5, r0
   2611c:	lsr	r2, r2, #5
   26120:	rsb	r1, r0, #100	; 0x64
   26124:	b	26180 <__assert_fail@plt+0x139e4>
   26128:	ldr	r3, [pc, #136]	; 261b8 <__assert_fail@plt+0x13a1c>
   2612c:	str	r1, [sp, #8]
   26130:	str	r0, [sp, #12]
   26134:	str	r3, [sp]
   26138:	mov	r2, #1
   2613c:	mvn	r3, #0
   26140:	mov	r1, #100	; 0x64
   26144:	mov	r0, r5
   26148:	bl	12784 <__snprintf_chk@plt>
   2614c:	ldr	r3, [r4, #16]
   26150:	cmp	r3, #6
   26154:	bls	26114 <__assert_fail@plt+0x13978>
   26158:	mov	r0, r5
   2615c:	add	sp, sp, #20
   26160:	pop	{r4, r5, r6, r7, pc}
   26164:	strb	r1, [r5]
   26168:	ldr	r3, [r0, #16]
   2616c:	cmp	r3, #6
   26170:	bhi	26158 <__assert_fail@plt+0x139bc>
   26174:	mov	lr, r5
   26178:	mov	r1, #100	; 0x64
   2617c:	mov	r2, #1
   26180:	ldr	ip, [pc, #52]	; 261bc <__assert_fail@plt+0x13a20>
   26184:	ldr	r0, [pc, #52]	; 261c0 <__assert_fail@plt+0x13a24>
   26188:	add	r3, ip, r3, lsl #2
   2618c:	add	r2, r2, r0
   26190:	mov	r0, lr
   26194:	strd	r2, [sp]
   26198:	mvn	r3, #0
   2619c:	mov	r2, #1
   261a0:	bl	12784 <__snprintf_chk@plt>
   261a4:	mov	r0, r5
   261a8:	add	sp, sp, #20
   261ac:	pop	{r4, r5, r6, r7, pc}
   261b0:	andeq	r8, r4, ip, ror #19
   261b4:	andeq	r8, r4, r8, asr #11
   261b8:	andeq	r9, r4, ip, asr #6
   261bc:	andeq	r8, r4, r8, lsl #21
   261c0:	andeq	sl, r4, r8, lsl #23
   261c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   261c8:	sub	sp, sp, #132	; 0x84
   261cc:	ldr	r6, [pc, #964]	; 26598 <__assert_fail@plt+0x13dfc>
   261d0:	mov	r5, r0
   261d4:	mov	r4, r1
   261d8:	ldr	r3, [r6]
   261dc:	mov	r2, #5
   261e0:	ldr	r1, [pc, #948]	; 2659c <__assert_fail@plt+0x13e00>
   261e4:	mov	r0, #0
   261e8:	str	r3, [sp, #124]	; 0x7c
   261ec:	bl	1222c <dcgettext@plt>
   261f0:	mov	r1, r5
   261f4:	bl	25cb8 <__assert_fail@plt+0x1351c>
   261f8:	ldr	r3, [r4, #156]	; 0x9c
   261fc:	cmp	r3, #0
   26200:	bne	263e8 <__assert_fail@plt+0x13c4c>
   26204:	ldrb	r1, [r4, #180]	; 0xb4
   26208:	ldrb	r2, [r4, #187]	; 0xbb
   2620c:	ldr	r5, [pc, #908]	; 265a0 <__assert_fail@plt+0x13e04>
   26210:	cmp	r1, r2
   26214:	ldr	r7, [r5]
   26218:	beq	26254 <__assert_fail@plt+0x13ab8>
   2621c:	mov	r2, #5
   26220:	ldr	r1, [pc, #892]	; 265a4 <__assert_fail@plt+0x13e08>
   26224:	mov	r0, #0
   26228:	bl	1222c <dcgettext@plt>
   2622c:	ldrd	r2, [r4, #40]	; 0x28
   26230:	mov	r1, #1
   26234:	strd	r2, [sp]
   26238:	mov	r2, r0
   2623c:	mov	r0, r7
   26240:	bl	12580 <__fprintf_chk@plt>
   26244:	ldrb	r2, [r4, #180]	; 0xb4
   26248:	ldr	r7, [r5]
   2624c:	mov	r3, #1
   26250:	strb	r2, [r4, #187]	; 0xbb
   26254:	ldr	r2, [r4, #172]	; 0xac
   26258:	cmp	r2, #0
   2625c:	beq	2626c <__assert_fail@plt+0x13ad0>
   26260:	ldrb	r2, [r4, #185]	; 0xb9
   26264:	cmp	r2, #0
   26268:	beq	26414 <__assert_fail@plt+0x13c78>
   2626c:	ldr	r2, [r4, #160]	; 0xa0
   26270:	cmp	r2, #0
   26274:	beq	262dc <__assert_fail@plt+0x13b40>
   26278:	ldrb	r2, [r4, #183]	; 0xb7
   2627c:	cmp	r2, #0
   26280:	bne	262dc <__assert_fail@plt+0x13b40>
   26284:	cmp	r3, #0
   26288:	bne	26484 <__assert_fail@plt+0x13ce8>
   2628c:	mov	r2, #5
   26290:	ldr	r1, [pc, #784]	; 265a8 <__assert_fail@plt+0x13e0c>
   26294:	mov	r0, #0
   26298:	bl	1222c <dcgettext@plt>
   2629c:	add	r1, sp, #24
   262a0:	mov	sl, r0
   262a4:	mov	r0, r4
   262a8:	bl	260a8 <__assert_fail@plt+0x1390c>
   262ac:	ldrd	r8, [r4, #8]
   262b0:	ldr	r3, [r4, #16]
   262b4:	mov	r2, sl
   262b8:	str	r3, [sp, #8]
   262bc:	strd	r8, [sp]
   262c0:	mov	r1, #1
   262c4:	mov	r3, r0
   262c8:	mov	r0, r7
   262cc:	bl	12580 <__fprintf_chk@plt>
   262d0:	ldr	r7, [r5]
   262d4:	mov	r3, #1
   262d8:	strb	r3, [r4, #183]	; 0xb7
   262dc:	ldr	r2, [r4, #164]	; 0xa4
   262e0:	cmp	r2, #0
   262e4:	beq	26368 <__assert_fail@plt+0x13bcc>
   262e8:	ldrb	r2, [r4, #184]	; 0xb8
   262ec:	cmp	r2, #0
   262f0:	bne	26368 <__assert_fail@plt+0x13bcc>
   262f4:	ldr	ip, [r4, #168]	; 0xa8
   262f8:	ldr	r0, [pc, #684]	; 265ac <__assert_fail@plt+0x13e10>
   262fc:	ldr	r1, [pc, #684]	; 265b0 <__assert_fail@plt+0x13e14>
   26300:	cmp	ip, #0
   26304:	ldr	r2, [pc, #680]	; 265b4 <__assert_fail@plt+0x13e18>
   26308:	moveq	r1, r0
   2630c:	eor	r3, r3, #1
   26310:	add	r2, r2, r3
   26314:	str	r1, [sp]
   26318:	mov	r0, r7
   2631c:	ldr	r3, [r4, #20]
   26320:	mov	r1, #1
   26324:	bl	12580 <__fprintf_chk@plt>
   26328:	ldr	r2, [r4, #176]	; 0xb0
   2632c:	mov	r3, #1
   26330:	cmp	r2, #0
   26334:	strb	r3, [r4, #184]	; 0xb8
   26338:	bne	26498 <__assert_fail@plt+0x13cfc>
   2633c:	ldrb	r3, [r4, #152]	; 0x98
   26340:	ldr	r7, [r5]
   26344:	cmp	r3, #0
   26348:	beq	263c4 <__assert_fail@plt+0x13c28>
   2634c:	ldr	r8, [r4, #88]	; 0x58
   26350:	asr	r9, r8, #31
   26354:	mov	r1, r7
   26358:	mov	r0, #32
   2635c:	bl	12634 <fputc@plt>
   26360:	ldr	r7, [r5]
   26364:	b	2639c <__assert_fail@plt+0x13c00>
   26368:	ldr	r2, [r4, #176]	; 0xb0
   2636c:	cmp	r2, #0
   26370:	beq	26380 <__assert_fail@plt+0x13be4>
   26374:	ldrb	r2, [r4, #186]	; 0xba
   26378:	cmp	r2, #0
   2637c:	beq	264b8 <__assert_fail@plt+0x13d1c>
   26380:	ldrb	r2, [r4, #152]	; 0x98
   26384:	cmp	r2, #0
   26388:	beq	263c4 <__assert_fail@plt+0x13c28>
   2638c:	ldr	r8, [r4, #88]	; 0x58
   26390:	cmp	r3, #0
   26394:	asr	r9, r8, #31
   26398:	bne	26354 <__assert_fail@plt+0x13bb8>
   2639c:	mov	r2, #5
   263a0:	ldr	r1, [pc, #528]	; 265b8 <__assert_fail@plt+0x13e1c>
   263a4:	mov	r0, #0
   263a8:	bl	1222c <dcgettext@plt>
   263ac:	strd	r8, [sp]
   263b0:	mov	r1, #1
   263b4:	mov	r2, r0
   263b8:	mov	r0, r7
   263bc:	bl	12580 <__fprintf_chk@plt>
   263c0:	ldr	r7, [r5]
   263c4:	mov	r1, r7
   263c8:	mov	r0, #10
   263cc:	bl	12634 <fputc@plt>
   263d0:	ldr	r2, [sp, #124]	; 0x7c
   263d4:	ldr	r3, [r6]
   263d8:	cmp	r2, r3
   263dc:	bne	26594 <__assert_fail@plt+0x13df8>
   263e0:	add	sp, sp, #132	; 0x84
   263e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   263e8:	ldrb	r3, [r4, #182]	; 0xb6
   263ec:	ldr	r5, [pc, #428]	; 265a0 <__assert_fail@plt+0x13e04>
   263f0:	cmp	r3, #0
   263f4:	ldr	r7, [r5]
   263f8:	beq	26508 <__assert_fail@plt+0x13d6c>
   263fc:	ldrb	r3, [r4, #187]	; 0xbb
   26400:	ldrb	r2, [r4, #180]	; 0xb4
   26404:	cmp	r2, r3
   26408:	moveq	r3, #0
   2640c:	bne	2621c <__assert_fail@plt+0x13a80>
   26410:	b	26254 <__assert_fail@plt+0x13ab8>
   26414:	ldrd	r8, [r4, #80]	; 0x50
   26418:	ldr	sl, [r4, #88]	; 0x58
   2641c:	ldr	r2, [pc, #408]	; 265bc <__assert_fail@plt+0x13e20>
   26420:	strd	r8, [sp, #8]
   26424:	ldrd	r8, [r4, #72]	; 0x48
   26428:	asr	fp, sl, #31
   2642c:	eor	r3, r3, #1
   26430:	add	r2, r2, r3
   26434:	mov	r0, r7
   26438:	strd	sl, [sp, #16]
   2643c:	mov	r1, #1
   26440:	strd	r8, [sp]
   26444:	bl	12580 <__fprintf_chk@plt>
   26448:	ldr	r3, [r4, #92]	; 0x5c
   2644c:	cmp	r3, #0
   26450:	bne	26560 <__assert_fail@plt+0x13dc4>
   26454:	ldr	r1, [r4, #28]
   26458:	ldr	r7, [r5]
   2645c:	cmp	r1, #1
   26460:	beq	2657c <__assert_fail@plt+0x13de0>
   26464:	ldr	r2, [r4, #160]	; 0xa0
   26468:	mov	r3, #1
   2646c:	cmp	r2, #0
   26470:	strb	r3, [r4, #185]	; 0xb9
   26474:	beq	262dc <__assert_fail@plt+0x13b40>
   26478:	ldrb	r3, [r4, #183]	; 0xb7
   2647c:	cmp	r3, #0
   26480:	bne	262dc <__assert_fail@plt+0x13b40>
   26484:	mov	r1, r7
   26488:	mov	r0, #32
   2648c:	bl	12634 <fputc@plt>
   26490:	ldr	r7, [r5]
   26494:	b	2628c <__assert_fail@plt+0x13af0>
   26498:	ldrb	r3, [r4, #186]	; 0xba
   2649c:	ldr	r7, [r5]
   264a0:	cmp	r3, #0
   264a4:	beq	26574 <__assert_fail@plt+0x13dd8>
   264a8:	ldrb	r3, [r4, #152]	; 0x98
   264ac:	cmp	r3, #0
   264b0:	beq	263c4 <__assert_fail@plt+0x13c28>
   264b4:	b	2634c <__assert_fail@plt+0x13bb0>
   264b8:	ldr	r8, [pc, #256]	; 265c0 <__assert_fail@plt+0x13e24>
   264bc:	eor	r3, r3, #1
   264c0:	add	r8, r3, r8
   264c4:	add	r1, sp, #24
   264c8:	ldr	r0, [r4, #24]
   264cc:	bl	25b20 <__assert_fail@plt+0x13384>
   264d0:	mov	r2, r8
   264d4:	mov	r1, #1
   264d8:	mov	r3, r0
   264dc:	mov	r0, r7
   264e0:	bl	12580 <__fprintf_chk@plt>
   264e4:	ldrb	r3, [r4, #152]	; 0x98
   264e8:	mov	r2, #1
   264ec:	strb	r2, [r4, #186]	; 0xba
   264f0:	cmp	r3, #0
   264f4:	beq	263c0 <__assert_fail@plt+0x13c24>
   264f8:	ldr	r8, [r4, #88]	; 0x58
   264fc:	ldr	r7, [r5]
   26500:	asr	r9, r8, #31
   26504:	b	26354 <__assert_fail@plt+0x13bb8>
   26508:	ldrd	r2, [r4, #64]	; 0x40
   2650c:	ldrd	r8, [r4, #56]	; 0x38
   26510:	mov	r0, r7
   26514:	strd	r2, [sp, #16]
   26518:	ldrd	sl, [r4, #40]	; 0x28
   2651c:	ldr	r2, [pc, #160]	; 265c4 <__assert_fail@plt+0x13e28>
   26520:	mov	r1, #1
   26524:	strd	r8, [sp, #8]
   26528:	strd	sl, [sp]
   2652c:	bl	12580 <__fprintf_chk@plt>
   26530:	ldrb	r1, [r4, #180]	; 0xb4
   26534:	ldrb	r2, [r4, #187]	; 0xbb
   26538:	mov	r3, #1
   2653c:	strb	r3, [r4, #182]	; 0xb6
   26540:	cmp	r1, r2
   26544:	ldreq	r7, [r5]
   26548:	beq	26254 <__assert_fail@plt+0x13ab8>
   2654c:	ldr	r1, [r5]
   26550:	mov	r0, #32
   26554:	bl	12634 <fputc@plt>
   26558:	ldr	r7, [r5]
   2655c:	b	2621c <__assert_fail@plt+0x13a80>
   26560:	ldr	r2, [pc, #96]	; 265c8 <__assert_fail@plt+0x13e2c>
   26564:	mov	r1, #1
   26568:	ldr	r0, [r5]
   2656c:	bl	12580 <__fprintf_chk@plt>
   26570:	b	26454 <__assert_fail@plt+0x13cb8>
   26574:	ldr	r8, [pc, #68]	; 265c0 <__assert_fail@plt+0x13e24>
   26578:	b	264c4 <__assert_fail@plt+0x13d28>
   2657c:	mov	r3, r7
   26580:	mov	r2, #2
   26584:	ldr	r0, [pc, #64]	; 265cc <__assert_fail@plt+0x13e30>
   26588:	bl	122f8 <fwrite@plt>
   2658c:	ldr	r7, [r5]
   26590:	b	26464 <__assert_fail@plt+0x13cc8>
   26594:	bl	12244 <__stack_chk_fail@plt>
   26598:	andeq	fp, r5, r0, ror #24
   2659c:	andeq	r9, r4, ip, asr #5
   265a0:	andeq	ip, r5, r8, lsr r5
   265a4:	andeq	r9, r4, r4, lsl #7
   265a8:			; <UNDEFINED> instruction: 0x000493b8
   265ac:	andeq	r8, r4, r0, lsr r6
   265b0:	andeq	r9, r4, r4, asr r3
   265b4:	ldrdeq	r9, [r4], -r8
   265b8:	andeq	r9, r4, r4, ror #7
   265bc:	muleq	r4, r4, r3
   265c0:	andeq	r9, r4, ip, asr r3
   265c4:	andeq	r9, r4, r4, ror #6
   265c8:	andeq	r9, r4, ip, lsr #7
   265cc:			; <UNDEFINED> instruction: 0x000493b4
   265d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   265d4:	sub	sp, sp, #1552	; 0x610
   265d8:	ldr	r2, [pc, #4032]	; 275a0 <__assert_fail@plt+0x14e04>
   265dc:	sub	sp, sp, #4
   265e0:	add	r6, sp, #368	; 0x170
   265e4:	mov	r8, #38	; 0x26
   265e8:	mov	r3, #0
   265ec:	mov	r5, r8
   265f0:	ldr	r2, [r2]
   265f4:	mov	r7, r3
   265f8:	str	r3, [sp, #104]	; 0x68
   265fc:	strh	r3, [r6]
   26600:	cmn	r5, #93	; 0x5d
   26604:	mvn	r3, #1
   26608:	str	r0, [sp, #36]	; 0x24
   2660c:	str	r2, [sp, #1548]	; 0x60c
   26610:	mov	sl, r6
   26614:	add	r9, sp, #408	; 0x198
   26618:	str	r3, [sp, #16]
   2661c:	ldr	fp, [pc, #3968]	; 275a4 <__assert_fail@plt+0x14e08>
   26620:	mov	r4, r5
   26624:	beq	26714 <__assert_fail@plt+0x13f78>
   26628:	ldr	r3, [sp, #16]
   2662c:	cmn	r3, #2
   26630:	beq	269d4 <__assert_fail@plt+0x14238>
   26634:	ldr	r2, [sp, #16]
   26638:	cmp	r2, #0
   2663c:	ble	269bc <__assert_fail@plt+0x14220>
   26640:	ldr	r3, [pc, #3936]	; 275a8 <__assert_fail@plt+0x14e0c>
   26644:	cmp	r2, r3
   26648:	ble	26c4c <__assert_fail@plt+0x144b0>
   2664c:	add	r4, r5, #2
   26650:	mov	r3, #2
   26654:	cmp	r4, #112	; 0x70
   26658:	bhi	26714 <__assert_fail@plt+0x13f78>
   2665c:	add	r4, fp, r4
   26660:	add	r2, r4, #2256	; 0x8d0
   26664:	ldrsb	r2, [r2, #4]
   26668:	cmp	r2, r3
   2666c:	bne	26714 <__assert_fail@plt+0x13f78>
   26670:	ldrb	r7, [r4, #2376]	; 0x948
   26674:	cmp	r7, #0
   26678:	beq	26e04 <__assert_fail@plt+0x14668>
   2667c:	ldr	r3, [sp, #104]	; 0x68
   26680:	add	lr, sp, #256	; 0x100
   26684:	cmp	r3, #0
   26688:	subne	r3, r3, #1
   2668c:	strne	r3, [sp, #104]	; 0x68
   26690:	ldr	r3, [sp, #108]	; 0x6c
   26694:	add	r9, r9, #56	; 0x38
   26698:	str	r3, [sp, #272]	; 0x110
   2669c:	ldr	r3, [sp, #112]	; 0x70
   266a0:	mov	ip, r9
   266a4:	str	r3, [sp, #264]	; 0x108
   266a8:	ldr	r3, [sp, #116]	; 0x74
   266ac:	mvn	r4, #1
   266b0:	str	r3, [sp, #268]	; 0x10c
   266b4:	ldm	lr!, {r0, r1, r2, r3}
   266b8:	str	sl, [sp, #24]
   266bc:	str	r4, [sp, #16]
   266c0:	stmia	ip!, {r0, r1, r2, r3}
   266c4:	ldm	lr!, {r0, r1, r2, r3}
   266c8:	stmia	ip!, {r0, r1, r2, r3}
   266cc:	ldm	lr!, {r0, r1, r2, r3}
   266d0:	stmia	ip!, {r0, r1, r2, r3}
   266d4:	ldm	lr, {r0, r1}
   266d8:	stm	ip, {r0, r1}
   266dc:	ldr	r2, [sp, #24]
   266e0:	add	r3, r6, #38	; 0x26
   266e4:	add	sl, r2, #2
   266e8:	cmp	sl, r3
   266ec:	strh	r7, [r2, #2]
   266f0:	bcs	28bf0 <__assert_fail@plt+0x16454>
   266f4:	cmp	r7, #12
   266f8:	beq	28bf8 <__assert_fail@plt+0x1645c>
   266fc:	add	r3, fp, r7
   26700:	add	r3, r3, #808	; 0x328
   26704:	ldrsb	r5, [r3]
   26708:	cmn	r5, #93	; 0x5d
   2670c:	mov	r4, r5
   26710:	bne	26628 <__assert_fail@plt+0x13e8c>
   26714:	add	r3, fp, r7
   26718:	ldrb	r5, [r3, #2492]	; 0x9bc
   2671c:	cmp	r5, #0
   26720:	bne	267b4 <__assert_fail@plt+0x14018>
   26724:	ldr	r3, [sp, #104]	; 0x68
   26728:	cmp	r3, #3
   2672c:	bne	26780 <__assert_fail@plt+0x13fe4>
   26730:	ldr	r3, [sp, #16]
   26734:	cmp	r3, #0
   26738:	bgt	269c8 <__assert_fail@plt+0x1422c>
   2673c:	bne	26780 <__assert_fail@plt+0x13fe4>
   26740:	mov	r0, #1
   26744:	ldr	r3, [pc, #3668]	; 275a0 <__assert_fail@plt+0x14e04>
   26748:	ldr	r2, [sp, #1548]	; 0x60c
   2674c:	ldr	r3, [r3]
   26750:	cmp	r2, r3
   26754:	bne	29480 <__assert_fail@plt+0x16ce4>
   26758:	add	sp, sp, #1552	; 0x610
   2675c:	add	sp, sp, #4
   26760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26764:	ldrb	r7, [r3, #2376]	; 0x948
   26768:	cmp	r7, #0
   2676c:	bne	26c9c <__assert_fail@plt+0x14500>
   26770:	cmp	sl, r6
   26774:	beq	26740 <__assert_fail@plt+0x13fa4>
   26778:	ldrsh	r7, [sl, #-2]!
   2677c:	sub	r9, r9, #56	; 0x38
   26780:	add	r7, fp, r7
   26784:	add	r7, r7, #808	; 0x328
   26788:	ldrsb	r3, [r7]
   2678c:	cmn	r3, #93	; 0x5d
   26790:	beq	26770 <__assert_fail@plt+0x13fd4>
   26794:	add	r3, r3, #1
   26798:	cmp	r3, #112	; 0x70
   2679c:	bhi	26770 <__assert_fail@plt+0x13fd4>
   267a0:	add	r3, fp, r3
   267a4:	ldrb	r2, [r3, #2260]	; 0x8d4
   267a8:	cmp	r2, #1
   267ac:	bne	26770 <__assert_fail@plt+0x13fd4>
   267b0:	b	26764 <__assert_fail@plt+0x13fc8>
   267b4:	add	r3, fp, r5
   267b8:	add	r8, sp, #320	; 0x140
   267bc:	ldrb	r3, [r3, #2608]	; 0xa30
   267c0:	sub	r2, r8, #8
   267c4:	str	r2, [sp, #92]	; 0x5c
   267c8:	rsb	r4, r3, #1
   267cc:	str	r3, [sp, #24]
   267d0:	rsb	r4, r4, r4, lsl #3
   267d4:	mov	ip, r2
   267d8:	add	r4, r9, r4, lsl #3
   267dc:	mov	lr, r4
   267e0:	ldr	r3, [r4, #8]
   267e4:	ldr	r7, [r4, #16]
   267e8:	str	r3, [sp, #84]	; 0x54
   267ec:	ldm	lr!, {r0, r1, r2, r3}
   267f0:	str	r7, [sp, #76]	; 0x4c
   267f4:	sub	r7, r5, #4
   267f8:	stmia	ip!, {r0, r1, r2, r3}
   267fc:	str	r3, [sp, #88]	; 0x58
   26800:	ldm	lr!, {r0, r1, r2, r3}
   26804:	stmia	ip!, {r0, r1, r2, r3}
   26808:	ldm	lr!, {r0, r1, r2, r3}
   2680c:	stmia	ip!, {r0, r1, r2, r3}
   26810:	ldm	lr, {r0, r1}
   26814:	ldr	r3, [r4, #20]
   26818:	str	r3, [sp, #80]	; 0x50
   2681c:	ldr	r3, [r4, #24]
   26820:	stm	ip, {r0, r1}
   26824:	str	r3, [sp, #68]	; 0x44
   26828:	ldr	r3, [r4, #28]
   2682c:	str	r3, [sp, #72]	; 0x48
   26830:	ldr	r3, [r4, #32]
   26834:	str	r3, [sp, #64]	; 0x40
   26838:	ldr	r3, [r4, #36]	; 0x24
   2683c:	str	r3, [sp, #56]	; 0x38
   26840:	ldrd	r2, [r4, #40]	; 0x28
   26844:	strd	r2, [sp, #48]	; 0x30
   26848:	ldr	r3, [r4, #48]	; 0x30
   2684c:	str	r3, [sp, #40]	; 0x28
   26850:	cmp	r7, #87	; 0x57
   26854:	ldrls	pc, [pc, r7, lsl #2]
   26858:	b	2954c <__assert_fail@plt+0x16db0>
   2685c:	andeq	r7, r2, r8, ror #7
   26860:	andeq	r9, r2, ip, asr #10
   26864:	andeq	r9, r2, ip, asr #10
   26868:	andeq	r8, r2, r0, lsr #12
   2686c:	strdeq	r8, [r2], -r8	; <UNPREDICTABLE>
   26870:	andeq	r7, r2, r8, asr ip
   26874:	andeq	r7, r2, r0, lsr ip
   26878:	andeq	r7, r2, r8, lsl #24
   2687c:	andeq	r7, r2, r0, ror #23
   26880:	ldrdeq	r7, [r2], -r4
   26884:	muleq	r2, r4, fp
   26888:	andeq	r7, r2, r4, asr fp
   2688c:	andeq	r9, r2, ip, asr #10
   26890:	andeq	r9, r2, ip, asr #10
   26894:	andeq	r7, r2, ip, lsl #22
   26898:	andeq	r7, r2, r0, ror #26
   2689c:	andeq	r7, r2, r4, lsl sp
   268a0:	andeq	r9, r2, ip, asr #10
   268a4:	andeq	r7, r2, ip, ror sl
   268a8:	andeq	r7, r2, r8, lsr sl
   268ac:	strdeq	r7, [r2], -r4
   268b0:	andeq	r9, r2, ip, asr #10
   268b4:	andeq	r9, r2, ip, asr #10
   268b8:	andeq	r7, r2, r4, lsr #18
   268bc:	andeq	r7, r2, r0, lsl #18
   268c0:	andeq	r7, r2, ip, asr #17
   268c4:	andeq	r7, r2, r8, lsr #17
   268c8:	andeq	r7, r2, r0, lsl #17
   268cc:	andeq	r7, r2, r0, lsl pc
   268d0:	andeq	r7, r2, ip, lsr #27
   268d4:	andeq	r8, r2, r8, lsl #10
   268d8:	andeq	r8, r2, r4, asr #8
   268dc:	andeq	r8, r2, r8, lsl r4
   268e0:	andeq	r8, r2, r4, ror #7
   268e4:			; <UNDEFINED> instruction: 0x000283b0
   268e8:	andeq	r8, r2, ip, asr #9
   268ec:	andeq	r8, r2, r8, lsr #21
   268f0:	andeq	r8, r2, r8, ror sl
   268f4:	andeq	r8, r2, ip, lsl #20
   268f8:	ldrdeq	r8, [r2], -ip
   268fc:	andeq	r8, r2, r8, ror #18
   26900:	andeq	r8, r2, r8, lsr r9
   26904:	andeq	r8, r2, r4, lsl #18
   26908:	ldrdeq	r8, [r2], -r4
   2690c:	andeq	r8, r2, ip, lsl #17
   26910:	andeq	r9, r2, ip, asr #10
   26914:	andeq	r8, r2, r0, lsl r8
   26918:	andeq	r8, r2, r4, ror r6
   2691c:	andeq	r6, r2, ip, lsr #31
   26920:	andeq	r6, r2, ip, lsr #31
   26924:	andeq	r7, r2, r4, lsr #27
   26928:	andeq	r7, r2, r0, ror #25
   2692c:	andeq	r7, r2, r0, lsl #25
   26930:	muleq	r2, ip, r3
   26934:	andeq	r7, r2, ip, asr #6
   26938:	andeq	r7, r2, r4, ror #12
   2693c:	andeq	r7, r2, r4, ror #11
   26940:	andeq	r7, r2, r4, ror #3
   26944:	andeq	r7, r2, r4, lsl #3
   26948:	andeq	r7, r2, r0, lsr r8
   2694c:	andeq	r7, r2, r0, ror #15
   26950:	andeq	r7, r2, r8, ror #5
   26954:	andeq	r7, r2, r0, lsl #5
   26958:	andeq	r7, r2, r0, lsr r7
   2695c:	andeq	r7, r2, r8, asr #13
   26960:	andeq	r7, r2, r0, lsl #15
   26964:	andeq	r7, r2, r4, asr #21
   26968:	andeq	r7, r2, r4, ror #1
   2696c:	andeq	r7, r2, r4, ror #1
   26970:	andeq	r8, r2, ip, ror #8
   26974:	andeq	r9, r2, ip, asr #10
   26978:	andeq	r8, r2, r4, asr r3
   2697c:	andeq	r8, r2, r4, lsl #6
   26980:	andeq	r8, r2, r8, ror #4
   26984:	andeq	r8, r2, r8, lsl r2
   26988:			; <UNDEFINED> instruction: 0x000281b0
   2698c:	andeq	r8, r2, r4, asr r1
   26990:	strdeq	r8, [r2], -r4
   26994:	andeq	r9, r2, ip, asr #10
   26998:	andeq	r9, r2, ip, asr #10
   2699c:	andeq	r9, r2, ip, asr #10
   269a0:	muleq	r2, ip, r0
   269a4:	andeq	r9, r2, ip, asr #10
   269a8:	andeq	r8, r2, r4, asr #32
   269ac:	andeq	r8, r2, r0, lsl r0
   269b0:	andeq	r7, r2, r8, asr #8
   269b4:	andeq	r8, r2, r4, asr r6
   269b8:			; <UNDEFINED> instruction: 0x00028ab4
   269bc:	mov	r3, #0
   269c0:	str	r3, [sp, #16]
   269c4:	b	26654 <__assert_fail@plt+0x13eb8>
   269c8:	mvn	r3, #1
   269cc:	str	r3, [sp, #16]
   269d0:	b	26780 <__assert_fail@plt+0x13fe4>
   269d4:	ldr	r0, [sp, #36]	; 0x24
   269d8:	ldr	r2, [r0]
   269dc:	ldrb	r3, [r2]
   269e0:	cmp	r3, #9
   269e4:	bcc	26a0c <__assert_fail@plt+0x14270>
   269e8:	cmp	r3, #13
   269ec:	bls	269f8 <__assert_fail@plt+0x1425c>
   269f0:	cmp	r3, #32
   269f4:	bne	26a0c <__assert_fail@plt+0x14270>
   269f8:	add	r2, r2, #1
   269fc:	str	r2, [r0]
   26a00:	ldrb	r3, [r2]
   26a04:	cmp	r3, #9
   26a08:	bcs	269e8 <__assert_fail@plt+0x1424c>
   26a0c:	sub	ip, r3, #48	; 0x30
   26a10:	sub	r1, r3, #43	; 0x2b
   26a14:	cmp	ip, #9
   26a18:	and	r1, r1, #253	; 0xfd
   26a1c:	bls	26a94 <__assert_fail@plt+0x142f8>
   26a20:	cmp	r1, #0
   26a24:	beq	26c8c <__assert_fail@plt+0x144f0>
   26a28:	cmp	r3, #65	; 0x41
   26a2c:	bcc	26a44 <__assert_fail@plt+0x142a8>
   26a30:	cmp	r3, #90	; 0x5a
   26a34:	bls	26d24 <__assert_fail@plt+0x14588>
   26a38:	sub	r1, r3, #97	; 0x61
   26a3c:	cmp	r1, #25
   26a40:	bls	26d24 <__assert_fail@plt+0x14588>
   26a44:	cmp	r3, #40	; 0x28
   26a48:	bne	29230 <__assert_fail@plt+0x16a94>
   26a4c:	mov	ip, #0
   26a50:	b	26a58 <__assert_fail@plt+0x142bc>
   26a54:	mov	r2, r1
   26a58:	add	r1, r2, #1
   26a5c:	str	r1, [r0]
   26a60:	ldrb	r3, [r1, #-1]
   26a64:	cmp	r3, #0
   26a68:	beq	269c0 <__assert_fail@plt+0x14224>
   26a6c:	cmp	r3, #40	; 0x28
   26a70:	addeq	ip, ip, #1
   26a74:	beq	26a80 <__assert_fail@plt+0x142e4>
   26a78:	cmp	r3, #41	; 0x29
   26a7c:	subeq	ip, ip, #1
   26a80:	cmp	ip, #0
   26a84:	bne	26a54 <__assert_fail@plt+0x142b8>
   26a88:	ldrb	r3, [r2, #1]
   26a8c:	mov	r2, r1
   26a90:	b	269e0 <__assert_fail@plt+0x14244>
   26a94:	cmp	r1, #0
   26a98:	sub	lr, r3, #45	; 0x2d
   26a9c:	clz	lr, lr
   26aa0:	lsr	lr, lr, #5
   26aa4:	bne	28c58 <__assert_fail@plt+0x164bc>
   26aa8:	cmp	lr, #0
   26aac:	moveq	r8, #1
   26ab0:	mvnne	r8, #0
   26ab4:	add	r2, r2, #1
   26ab8:	str	r2, [r0]
   26abc:	ldrb	r3, [r2]
   26ac0:	cmp	r3, #9
   26ac4:	bcc	26ad8 <__assert_fail@plt+0x1433c>
   26ac8:	cmp	r3, #13
   26acc:	bls	26ab4 <__assert_fail@plt+0x14318>
   26ad0:	cmp	r3, #32
   26ad4:	beq	26ab4 <__assert_fail@plt+0x14318>
   26ad8:	sub	ip, r3, #48	; 0x30
   26adc:	cmp	ip, #9
   26ae0:	bhi	269e0 <__assert_fail@plt+0x14244>
   26ae4:	mov	r0, #0
   26ae8:	mov	r1, #0
   26aec:	mov	r4, r2
   26af0:	strd	r0, [sp, #16]
   26af4:	str	sl, [sp, #48]	; 0x30
   26af8:	str	r2, [sp, #40]	; 0x28
   26afc:	str	fp, [sp, #64]	; 0x40
   26b00:	cmn	r8, #1
   26b04:	rsbeq	ip, r3, #48	; 0x30
   26b08:	ldrd	r2, [sp, #16]
   26b0c:	asr	r1, ip, #31
   26b10:	adds	sl, r2, ip
   26b14:	adcs	fp, r3, r1
   26b18:	movvs	lr, #1
   26b1c:	movvc	lr, #0
   26b20:	bvs	28bd8 <__assert_fail@plt+0x1643c>
   26b24:	ldrb	r3, [r4, #1]
   26b28:	add	r1, r4, #1
   26b2c:	str	r1, [sp, #24]
   26b30:	sub	ip, r3, #48	; 0x30
   26b34:	cmp	ip, #9
   26b38:	bls	26c60 <__assert_fail@plt+0x144c4>
   26b3c:	and	r3, r3, #253	; 0xfd
   26b40:	cmp	r3, #44	; 0x2c
   26b44:	ldr	r2, [sp, #40]	; 0x28
   26b48:	strd	sl, [sp, #40]	; 0x28
   26b4c:	ldr	sl, [sp, #48]	; 0x30
   26b50:	ldr	fp, [sp, #64]	; 0x40
   26b54:	bne	26cdc <__assert_fail@plt+0x14540>
   26b58:	ldrb	r3, [r4, #2]
   26b5c:	sub	ip, r3, #48	; 0x30
   26b60:	cmp	ip, #9
   26b64:	bhi	26cdc <__assert_fail@plt+0x14540>
   26b68:	ldrd	r2, [sp, #40]	; 0x28
   26b6c:	adds	r1, r2, #-2147483648	; 0x80000000
   26b70:	adc	r3, r3, #0
   26b74:	str	r3, [sp, #124]	; 0x7c
   26b78:	str	r1, [sp, #120]	; 0x78
   26b7c:	ldrd	r0, [sp, #120]	; 0x78
   26b80:	mov	r3, #0
   26b84:	mvn	r2, #0
   26b88:	cmp	r1, r3
   26b8c:	cmpeq	r0, r2
   26b90:	bhi	28b88 <__assert_fail@plt+0x163ec>
   26b94:	ldrb	r0, [r4, #3]
   26b98:	mov	r3, ip
   26b9c:	add	r4, r4, #3
   26ba0:	sub	r2, r0, #48	; 0x30
   26ba4:	mov	r1, #8
   26ba8:	cmp	r2, #9
   26bac:	add	r3, r3, r3, lsl #2
   26bb0:	ldrbls	r0, [r4, #1]
   26bb4:	lsl	r3, r3, #1
   26bb8:	mov	ip, r2
   26bbc:	addls	r3, r3, r2
   26bc0:	subls	r2, r0, #48	; 0x30
   26bc4:	addls	r4, r4, #1
   26bc8:	movls	ip, r2
   26bcc:	subs	r1, r1, #1
   26bd0:	bne	26ba8 <__assert_fail@plt+0x1440c>
   26bd4:	cmn	r8, #1
   26bd8:	beq	2714c <__assert_fail@plt+0x149b0>
   26bdc:	cmp	ip, #9
   26be0:	bhi	26bf4 <__assert_fail@plt+0x14458>
   26be4:	ldrb	r2, [r4, #1]!
   26be8:	sub	r2, r2, #48	; 0x30
   26bec:	cmp	r2, #9
   26bf0:	bls	26be4 <__assert_fail@plt+0x14448>
   26bf4:	adds	r2, r3, #0
   26bf8:	movne	r2, #1
   26bfc:	ands	r2, r2, r8, lsr #31
   26c00:	bne	28ba0 <__assert_fail@plt+0x16404>
   26c04:	str	r3, [sp, #260]	; 0x104
   26c08:	ldr	r3, [sp, #36]	; 0x24
   26c0c:	cmp	r8, #0
   26c10:	ldr	r2, [pc, #2448]	; 275a8 <__assert_fail@plt+0x14e0c>
   26c14:	ldr	r1, [sp, #40]	; 0x28
   26c18:	movne	r2, #276	; 0x114
   26c1c:	str	r4, [r3]
   26c20:	str	r1, [sp, #256]	; 0x100
   26c24:	moveq	r3, #22
   26c28:	movne	r3, #21
   26c2c:	str	r2, [sp, #16]
   26c30:	b	26c58 <__assert_fail@plt+0x144bc>
   26c34:	ldr	r3, [pc, #2416]	; 275ac <__assert_fail@plt+0x14e10>
   26c38:	mov	r2, #0
   26c3c:	str	r3, [sp, #16]
   26c40:	add	r1, sp, #256	; 0x100
   26c44:	mov	r3, #0
   26c48:	strd	r2, [r1]
   26c4c:	ldr	r3, [sp, #16]
   26c50:	add	r3, fp, r3
   26c54:	ldrb	r3, [r3, #1980]	; 0x7bc
   26c58:	add	r4, r5, r3
   26c5c:	b	26654 <__assert_fail@plt+0x13eb8>
   26c60:	cmp	fp, sl, asr #31
   26c64:	bne	26f4c <__assert_fail@plt+0x147b0>
   26c68:	mov	r2, #10
   26c6c:	smull	sl, fp, sl, r2
   26c70:	mov	r0, sl
   26c74:	mov	r1, fp
   26c78:	cmp	lr, #0
   26c7c:	strd	r0, [sp, #16]
   26c80:	bne	28bd8 <__assert_fail@plt+0x1643c>
   26c84:	ldr	r4, [sp, #24]
   26c88:	b	26b00 <__assert_fail@plt+0x14364>
   26c8c:	sub	lr, r3, #45	; 0x2d
   26c90:	clz	lr, lr
   26c94:	lsr	lr, lr, #5
   26c98:	b	26aa8 <__assert_fail@plt+0x1430c>
   26c9c:	ldr	r3, [sp, #108]	; 0x6c
   26ca0:	add	lr, sp, #256	; 0x100
   26ca4:	str	r3, [sp, #272]	; 0x110
   26ca8:	ldr	r3, [sp, #112]	; 0x70
   26cac:	add	r9, r9, #56	; 0x38
   26cb0:	str	r3, [sp, #264]	; 0x108
   26cb4:	ldr	r3, [sp, #116]	; 0x74
   26cb8:	mov	ip, r9
   26cbc:	str	r3, [sp, #268]	; 0x10c
   26cc0:	ldm	lr!, {r0, r1, r2, r3}
   26cc4:	mov	r4, #3
   26cc8:	str	sl, [sp, #24]
   26ccc:	str	r4, [sp, #104]	; 0x68
   26cd0:	stmia	ip!, {r0, r1, r2, r3}
   26cd4:	ldm	lr!, {r0, r1, r2, r3}
   26cd8:	b	266c8 <__assert_fail@plt+0x13f2c>
   26cdc:	lsr	r0, r8, #31
   26ce0:	strb	r0, [sp, #256]	; 0x100
   26ce4:	ldr	r0, [sp, #24]
   26ce8:	ldr	r1, [pc, #2240]	; 275b0 <__assert_fail@plt+0x14e14>
   26cec:	sub	r2, r0, r2
   26cf0:	str	r2, [sp, #108]	; 0x6c
   26cf4:	ldr	r2, [sp, #36]	; 0x24
   26cf8:	cmp	r8, #0
   26cfc:	ldr	r3, [pc, #2224]	; 275b4 <__assert_fail@plt+0x14e18>
   26d00:	str	r0, [r2]
   26d04:	movne	r3, r1
   26d08:	ldrd	r0, [sp, #40]	; 0x28
   26d0c:	str	r3, [sp, #16]
   26d10:	movne	r3, #19
   26d14:	moveq	r3, #20
   26d18:	str	r0, [sp, #112]	; 0x70
   26d1c:	str	r1, [sp, #116]	; 0x74
   26d20:	b	26c58 <__assert_fail@plt+0x144bc>
   26d24:	add	ip, sp, #1536	; 0x600
   26d28:	add	r1, sp, #1520	; 0x5f0
   26d2c:	add	ip, ip, #11
   26d30:	add	r1, r1, #8
   26d34:	str	r1, [sp, #16]
   26d38:	cmp	r1, ip
   26d3c:	strbcc	r3, [r1], #1
   26d40:	ldr	r3, [sp, #36]	; 0x24
   26d44:	add	r2, r2, #1
   26d48:	str	r2, [r3]
   26d4c:	ldrb	r3, [r2]
   26d50:	cmp	r3, #65	; 0x41
   26d54:	bcc	26d6c <__assert_fail@plt+0x145d0>
   26d58:	cmp	r3, #90	; 0x5a
   26d5c:	bls	26d38 <__assert_fail@plt+0x1459c>
   26d60:	sub	r0, r3, #97	; 0x61
   26d64:	cmp	r0, #25
   26d68:	bls	26d38 <__assert_fail@plt+0x1459c>
   26d6c:	cmp	r3, #46	; 0x2e
   26d70:	beq	26d38 <__assert_fail@plt+0x1459c>
   26d74:	mov	r3, #0
   26d78:	strb	r3, [r1]
   26d7c:	ldrb	r3, [sp, #1528]	; 0x5f8
   26d80:	cmp	r3, #0
   26d84:	ldrne	r2, [sp, #16]
   26d88:	beq	26dac <__assert_fail@plt+0x14610>
   26d8c:	sub	r1, r3, #97	; 0x61
   26d90:	cmp	r1, #25
   26d94:	subls	r3, r3, #32
   26d98:	uxtbls	r3, r3
   26d9c:	strb	r3, [r2]
   26da0:	ldrb	r3, [r2, #1]!
   26da4:	cmp	r3, #0
   26da8:	bne	26d8c <__assert_fail@plt+0x145f0>
   26dac:	ldr	r8, [pc, #2052]	; 275b8 <__assert_fail@plt+0x14e1c>
   26db0:	str	r4, [sp, #24]
   26db4:	ldr	r1, [pc, #2048]	; 275bc <__assert_fail@plt+0x14e20>
   26db8:	mov	r4, r8
   26dbc:	ldr	r8, [sp, #16]
   26dc0:	b	26dd0 <__assert_fail@plt+0x14634>
   26dc4:	ldr	r1, [r4, #12]!
   26dc8:	cmp	r1, #0
   26dcc:	beq	28ae4 <__assert_fail@plt+0x16348>
   26dd0:	mov	r0, r8
   26dd4:	bl	120dc <strcmp@plt>
   26dd8:	cmp	r0, #0
   26ddc:	bne	26dc4 <__assert_fail@plt+0x14628>
   26de0:	mov	r8, r4
   26de4:	ldr	r4, [sp, #24]
   26de8:	ldr	r2, [r8, #8]
   26dec:	ldr	r3, [r8, #4]
   26df0:	str	r3, [sp, #16]
   26df4:	asr	r3, r2, #31
   26df8:	add	r1, sp, #256	; 0x100
   26dfc:	strd	r2, [r1]
   26e00:	b	26634 <__assert_fail@plt+0x13e98>
   26e04:	add	lr, r9, #56	; 0x38
   26e08:	add	r8, sp, #320	; 0x140
   26e0c:	ldm	lr!, {r0, r1, r2, r3}
   26e10:	sub	ip, r8, #8
   26e14:	ldr	r4, [r9, #64]	; 0x40
   26e18:	str	ip, [sp, #92]	; 0x5c
   26e1c:	stmia	ip!, {r0, r1, r2, r3}
   26e20:	ldm	lr!, {r0, r1, r2, r3}
   26e24:	str	r4, [sp, #84]	; 0x54
   26e28:	ldr	r4, [r9, #68]	; 0x44
   26e2c:	stmia	ip!, {r0, r1, r2, r3}
   26e30:	str	r4, [sp, #88]	; 0x58
   26e34:	ldm	lr!, {r0, r1, r2, r3}
   26e38:	ldr	r4, [r9, #72]	; 0x48
   26e3c:	str	sl, [sp, #24]
   26e40:	str	r4, [sp, #76]	; 0x4c
   26e44:	ldr	r4, [r9, #76]	; 0x4c
   26e48:	str	r9, [sp, #96]	; 0x60
   26e4c:	str	r4, [sp, #80]	; 0x50
   26e50:	stmia	ip!, {r0, r1, r2, r3}
   26e54:	mvn	sl, #27
   26e58:	ldr	r3, [r9, #80]	; 0x50
   26e5c:	ldm	lr, {r0, r1}
   26e60:	str	r3, [sp, #68]	; 0x44
   26e64:	ldr	r3, [r9, #84]	; 0x54
   26e68:	stm	ip, {r0, r1}
   26e6c:	str	r3, [sp, #72]	; 0x48
   26e70:	ldr	r3, [r9, #88]	; 0x58
   26e74:	str	r3, [sp, #64]	; 0x40
   26e78:	ldr	r3, [r9, #92]	; 0x5c
   26e7c:	str	r3, [sp, #56]	; 0x38
   26e80:	ldrd	r2, [r9, #96]	; 0x60
   26e84:	strd	r2, [sp, #48]	; 0x30
   26e88:	ldr	r3, [r9, #104]	; 0x68
   26e8c:	str	r3, [sp, #40]	; 0x28
   26e90:	ldr	r3, [sp, #84]	; 0x54
   26e94:	ldr	ip, [sp, #92]	; 0x5c
   26e98:	str	r3, [r8]
   26e9c:	ldr	r3, [sp, #88]	; 0x58
   26ea0:	ldr	lr, [sp, #96]	; 0x60
   26ea4:	str	r3, [r8, #4]
   26ea8:	ldr	r3, [sp, #76]	; 0x4c
   26eac:	add	r9, lr, #56	; 0x38
   26eb0:	str	r3, [r8, #8]
   26eb4:	ldr	r3, [sp, #80]	; 0x50
   26eb8:	mov	lr, r9
   26ebc:	str	r3, [r8, #12]
   26ec0:	ldr	r3, [sp, #68]	; 0x44
   26ec4:	str	r3, [r8, #16]
   26ec8:	ldr	r3, [sp, #72]	; 0x48
   26ecc:	str	r3, [r8, #20]
   26ed0:	ldr	r3, [sp, #64]	; 0x40
   26ed4:	str	r3, [r8, #24]
   26ed8:	ldr	r3, [sp, #56]	; 0x38
   26edc:	str	r3, [r8, #28]
   26ee0:	ldrd	r2, [sp, #48]	; 0x30
   26ee4:	strd	r2, [r8, #32]
   26ee8:	ldr	r3, [sp, #40]	; 0x28
   26eec:	str	r3, [sp, #360]	; 0x168
   26ef0:	ldm	ip!, {r0, r1, r2, r3}
   26ef4:	stmia	lr!, {r0, r1, r2, r3}
   26ef8:	ldm	ip!, {r0, r1, r2, r3}
   26efc:	stmia	lr!, {r0, r1, r2, r3}
   26f00:	ldm	ip!, {r0, r1, r2, r3}
   26f04:	stmia	lr!, {r0, r1, r2, r3}
   26f08:	ldr	r3, [sp, #24]
   26f0c:	ldm	ip, {r0, r1}
   26f10:	ldrsh	r3, [r3]
   26f14:	stm	lr, {r0, r1}
   26f18:	add	r7, r3, r7
   26f1c:	cmp	r7, #112	; 0x70
   26f20:	bhi	26f3c <__assert_fail@plt+0x147a0>
   26f24:	add	r7, fp, r7
   26f28:	add	r2, r7, #2256	; 0x8d0
   26f2c:	ldrsb	r2, [r2, #4]
   26f30:	cmp	r2, r3
   26f34:	ldrbeq	r7, [r7, #2376]	; 0x948
   26f38:	beq	266dc <__assert_fail@plt+0x13f40>
   26f3c:	add	sl, fp, sl
   26f40:	add	sl, sl, #2816	; 0xb00
   26f44:	ldrsb	r7, [sl, #4]
   26f48:	b	266dc <__assert_fail@plt+0x13f40>
   26f4c:	mov	r2, #10
   26f50:	cmp	fp, #0
   26f54:	umull	r0, r1, sl, r2
   26f58:	strd	r0, [sp, #56]	; 0x38
   26f5c:	umull	r0, r1, r2, fp
   26f60:	strd	r0, [sp, #16]
   26f64:	bge	26f84 <__assert_fail@plt+0x147e8>
   26f68:	ldr	r2, [sp, #16]
   26f6c:	mov	r1, #10
   26f70:	subs	r2, r2, lr
   26f74:	str	r2, [sp, #16]
   26f78:	ldr	r2, [sp, #20]
   26f7c:	sbc	r2, r2, r1
   26f80:	str	r2, [sp, #20]
   26f84:	ldr	r2, [sp, #16]
   26f88:	ldr	r1, [sp, #60]	; 0x3c
   26f8c:	mov	r0, #0
   26f90:	adds	r1, r2, r1
   26f94:	ldr	r2, [sp, #20]
   26f98:	adc	r0, r2, r0
   26f9c:	cmp	r0, r1, asr #31
   26fa0:	bne	29648 <__assert_fail@plt+0x16eac>
   26fa4:	ldr	r0, [sp, #56]	; 0x38
   26fa8:	b	26c78 <__assert_fail@plt+0x144dc>
   26fac:	ldr	lr, [sp, #36]	; 0x24
   26fb0:	ldrd	r4, [r9, #40]	; 0x28
   26fb4:	ldr	r1, [r9, #48]	; 0x30
   26fb8:	ldrd	r2, [lr, #136]	; 0x88
   26fbc:	ldr	r0, [lr, #144]	; 0x90
   26fc0:	mov	ip, lr
   26fc4:	strd	r2, [sp, #24]
   26fc8:	ldrd	r2, [lr, #128]	; 0x80
   26fcc:	adds	r1, r0, r1
   26fd0:	movvs	ip, #1
   26fd4:	strd	r2, [sp, #96]	; 0x60
   26fd8:	ldrd	r2, [lr, #120]	; 0x78
   26fdc:	movvc	ip, #0
   26fe0:	str	r1, [lr, #144]	; 0x90
   26fe4:	strd	r2, [sp, #152]	; 0x98
   26fe8:	ldrd	r2, [sp, #24]
   26fec:	adds	r0, r2, r4
   26ff0:	adcs	r1, r3, r5
   26ff4:	ldrd	r4, [sp, #96]	; 0x60
   26ff8:	strd	r0, [lr, #136]	; 0x88
   26ffc:	ldrd	r0, [r9, #32]
   27000:	movvs	r7, #1
   27004:	movvc	r7, #0
   27008:	adds	r2, r4, r0
   2700c:	adcs	r3, r5, r1
   27010:	ldrd	r0, [lr, #112]	; 0x70
   27014:	ldrd	r4, [sp, #152]	; 0x98
   27018:	orr	r7, ip, r7
   2701c:	strd	r0, [sp, #24]
   27020:	ldrd	r0, [r9, #24]
   27024:	mov	ip, lr
   27028:	strd	r2, [lr, #128]	; 0x80
   2702c:	movvs	lr, #1
   27030:	movvc	lr, #0
   27034:	adds	r2, r4, r0
   27038:	adcs	r3, r5, r1
   2703c:	ldrd	r4, [ip, #104]	; 0x68
   27040:	ldrd	r0, [sp, #24]
   27044:	orr	lr, r7, lr
   27048:	strd	r4, [sp, #96]	; 0x60
   2704c:	ldrd	r4, [r9, #16]
   27050:	movvs	r7, #1
   27054:	movvc	r7, #0
   27058:	strd	r2, [ip, #120]	; 0x78
   2705c:	adds	r2, r0, r4
   27060:	adcs	r3, r1, r5
   27064:	ldrd	r4, [sp, #96]	; 0x60
   27068:	ldrd	r0, [r9, #8]
   2706c:	orr	lr, lr, r7
   27070:	strd	r2, [ip, #112]	; 0x70
   27074:	movvs	r7, #1
   27078:	movvc	r7, #0
   2707c:	adds	r2, r4, r0
   27080:	adcs	r3, r5, r1
   27084:	ldrd	r0, [r9]
   27088:	ldrd	r4, [ip, #96]	; 0x60
   2708c:	orr	lr, lr, r7
   27090:	strd	r2, [sp, #24]
   27094:	movvs	r7, #1
   27098:	movvc	r7, #0
   2709c:	adds	r4, r4, r0
   270a0:	adcs	r5, r5, r1
   270a4:	ldrd	r2, [sp, #24]
   270a8:	orrvc	r1, lr, r7
   270ac:	movvs	r1, #1
   270b0:	cmp	r1, #0
   270b4:	strd	r2, [ip, #104]	; 0x68
   270b8:	strd	r4, [ip, #96]	; 0x60
   270bc:	bne	26740 <__assert_fail@plt+0x13fa4>
   270c0:	sub	r2, r9, #56	; 0x38
   270c4:	mov	r3, #1
   270c8:	str	r2, [sp, #96]	; 0x60
   270cc:	sub	r2, sl, #2
   270d0:	str	r2, [sp, #24]
   270d4:	strb	r3, [ip, #153]	; 0x99
   270d8:	mov	sl, #16
   270dc:	mvn	r7, #92	; 0x5c
   270e0:	b	26e90 <__assert_fail@plt+0x146f4>
   270e4:	mov	r2, #56	; 0x38
   270e8:	mov	r1, #0
   270ec:	ldr	r0, [sp, #92]	; 0x5c
   270f0:	bl	12514 <memset@plt>
   270f4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   270f8:	sub	r1, sl, #4
   270fc:	mov	r0, r3
   27100:	str	r1, [sp, #24]
   27104:	asr	r1, r3, #31
   27108:	ldr	r3, [r9, #-52]	; 0xffffffcc
   2710c:	mov	r2, #0
   27110:	str	r3, [sp, #40]	; 0x28
   27114:	sub	r3, r9, #112	; 0x70
   27118:	str	r2, [sp, #64]	; 0x40
   2711c:	str	r2, [sp, #56]	; 0x38
   27120:	strd	r0, [sp, #48]	; 0x30
   27124:	str	r2, [sp, #68]	; 0x44
   27128:	str	r2, [sp, #76]	; 0x4c
   2712c:	str	r2, [sp, #84]	; 0x54
   27130:	str	r2, [sp, #72]	; 0x48
   27134:	str	r2, [sp, #80]	; 0x50
   27138:	str	r2, [sp, #88]	; 0x58
   2713c:	str	r3, [sp, #96]	; 0x60
   27140:	mov	sl, #17
   27144:	mvn	r7, #92	; 0x5c
   27148:	b	26e90 <__assert_fail@plt+0x146f4>
   2714c:	cmp	r2, #9
   27150:	bhi	28b98 <__assert_fail@plt+0x163fc>
   27154:	cmp	r0, #48	; 0x30
   27158:	bne	27174 <__assert_fail@plt+0x149d8>
   2715c:	ldrb	r2, [r4, #1]!
   27160:	sub	r1, r2, #48	; 0x30
   27164:	cmp	r1, #9
   27168:	bhi	28b98 <__assert_fail@plt+0x163fc>
   2716c:	cmp	r2, #48	; 0x30
   27170:	beq	2715c <__assert_fail@plt+0x149c0>
   27174:	ldrb	ip, [r4]
   27178:	add	r3, r3, #1
   2717c:	sub	ip, ip, #48	; 0x30
   27180:	b	26bdc <__assert_fail@plt+0x14440>
   27184:	mov	r2, #56	; 0x38
   27188:	mov	r1, #0
   2718c:	ldr	r0, [sp, #92]	; 0x5c
   27190:	bl	12514 <memset@plt>
   27194:	mov	r1, r9
   27198:	mov	r0, #0
   2719c:	ldrd	r2, [r1], #-56	; 0xffffffc8
   271a0:	sub	ip, sl, #2
   271a4:	str	ip, [sp, #24]
   271a8:	str	r1, [sp, #96]	; 0x60
   271ac:	mov	r1, #0
   271b0:	strd	r2, [sp, #76]	; 0x4c
   271b4:	mov	r3, #0
   271b8:	strd	r0, [sp, #48]	; 0x30
   271bc:	str	r0, [sp, #64]	; 0x40
   271c0:	str	r1, [sp, #56]	; 0x38
   271c4:	str	r0, [sp, #68]	; 0x44
   271c8:	str	r1, [sp, #72]	; 0x48
   271cc:	str	r0, [sp, #84]	; 0x54
   271d0:	str	r1, [sp, #88]	; 0x58
   271d4:	mov	sl, #17
   271d8:	mvn	r7, #92	; 0x5c
   271dc:	str	r3, [sp, #40]	; 0x28
   271e0:	b	26e90 <__assert_fail@plt+0x146f4>
   271e4:	mov	r2, #56	; 0x38
   271e8:	mov	r1, #0
   271ec:	ldr	r0, [sp, #92]	; 0x5c
   271f0:	bl	12514 <memset@plt>
   271f4:	ldr	r0, [r9, #-48]	; 0xffffffd0
   271f8:	ldr	r2, [r9, #-44]	; 0xffffffd4
   271fc:	ldr	r3, [r9]
   27200:	mov	r1, #0
   27204:	cmp	r2, r0, asr #31
   27208:	str	r1, [sp, #40]	; 0x28
   2720c:	ldr	ip, [r9, #4]
   27210:	asr	r1, r3, #31
   27214:	bne	291f0 <__assert_fail@plt+0x16a54>
   27218:	cmp	r1, ip
   2721c:	bne	29180 <__assert_fail@plt+0x169e4>
   27220:	smull	r2, r3, r0, r3
   27224:	strd	r2, [sp, #136]	; 0x88
   27228:	ldrd	r0, [sp, #136]	; 0x88
   2722c:	ldr	r3, [sp, #40]	; 0x28
   27230:	cmp	r3, #0
   27234:	str	r0, [sp, #76]	; 0x4c
   27238:	str	r1, [sp, #80]	; 0x50
   2723c:	bne	26740 <__assert_fail@plt+0x13fa4>
   27240:	sub	r2, r9, #112	; 0x70
   27244:	mov	r0, #0
   27248:	mov	r1, #0
   2724c:	str	r2, [sp, #96]	; 0x60
   27250:	sub	r2, sl, #4
   27254:	strd	r0, [sp, #48]	; 0x30
   27258:	str	r2, [sp, #24]
   2725c:	str	r0, [sp, #64]	; 0x40
   27260:	str	r1, [sp, #56]	; 0x38
   27264:	str	r0, [sp, #68]	; 0x44
   27268:	str	r1, [sp, #72]	; 0x48
   2726c:	str	r0, [sp, #84]	; 0x54
   27270:	str	r1, [sp, #88]	; 0x58
   27274:	mov	sl, #17
   27278:	mvn	r7, #92	; 0x5c
   2727c:	b	26e90 <__assert_fail@plt+0x146f4>
   27280:	mov	r4, #0
   27284:	mov	r5, #0
   27288:	sub	r3, sl, #4
   2728c:	mov	r2, #56	; 0x38
   27290:	mov	r1, #0
   27294:	ldr	r0, [sp, #92]	; 0x5c
   27298:	str	r3, [sp, #24]
   2729c:	strd	r4, [sp, #48]	; 0x30
   272a0:	bl	12514 <memset@plt>
   272a4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   272a8:	str	r4, [sp, #68]	; 0x44
   272ac:	str	r3, [sp, #64]	; 0x40
   272b0:	ldr	r3, [r9, #-52]	; 0xffffffcc
   272b4:	str	r5, [sp, #72]	; 0x48
   272b8:	str	r4, [sp, #76]	; 0x4c
   272bc:	str	r5, [sp, #80]	; 0x50
   272c0:	str	r4, [sp, #84]	; 0x54
   272c4:	str	r5, [sp, #88]	; 0x58
   272c8:	str	r3, [sp, #56]	; 0x38
   272cc:	sub	r3, r9, #112	; 0x70
   272d0:	str	r3, [sp, #96]	; 0x60
   272d4:	mov	r3, #0
   272d8:	mov	sl, #17
   272dc:	mvn	r7, #92	; 0x5c
   272e0:	str	r3, [sp, #40]	; 0x28
   272e4:	b	26e90 <__assert_fail@plt+0x146f4>
   272e8:	mov	r4, #0
   272ec:	mov	r5, #0
   272f0:	sub	r3, r9, #56	; 0x38
   272f4:	str	r3, [sp, #96]	; 0x60
   272f8:	mov	r2, #56	; 0x38
   272fc:	sub	r3, sl, #2
   27300:	mov	r1, #0
   27304:	ldr	r0, [sp, #92]	; 0x5c
   27308:	strd	r4, [sp, #48]	; 0x30
   2730c:	str	r3, [sp, #24]
   27310:	bl	12514 <memset@plt>
   27314:	str	r4, [sp, #64]	; 0x40
   27318:	str	r5, [sp, #56]	; 0x38
   2731c:	str	r4, [sp, #76]	; 0x4c
   27320:	str	r5, [sp, #80]	; 0x50
   27324:	str	r4, [sp, #84]	; 0x54
   27328:	str	r5, [sp, #88]	; 0x58
   2732c:	mov	r4, #1
   27330:	mov	r5, #0
   27334:	mov	r3, #0
   27338:	mov	sl, #17
   2733c:	mvn	r7, #92	; 0x5c
   27340:	str	r3, [sp, #40]	; 0x28
   27344:	strd	r4, [sp, #68]	; 0x44
   27348:	b	26e90 <__assert_fail@plt+0x146f4>
   2734c:	mov	r4, #0
   27350:	mov	r5, #0
   27354:	sub	r3, sl, #4
   27358:	mov	r2, #56	; 0x38
   2735c:	mov	r1, #0
   27360:	ldr	r0, [sp, #92]	; 0x5c
   27364:	str	r3, [sp, #24]
   27368:	strd	r4, [sp, #48]	; 0x30
   2736c:	bl	12514 <memset@plt>
   27370:	ldr	r3, [r9, #-48]	; 0xffffffd0
   27374:	str	r4, [sp, #64]	; 0x40
   27378:	str	r3, [sp, #84]	; 0x54
   2737c:	ldr	r3, [r9, #-44]	; 0xffffffd4
   27380:	str	r5, [sp, #56]	; 0x38
   27384:	str	r4, [sp, #68]	; 0x44
   27388:	str	r5, [sp, #72]	; 0x48
   2738c:	str	r4, [sp, #76]	; 0x4c
   27390:	str	r5, [sp, #80]	; 0x50
   27394:	str	r3, [sp, #88]	; 0x58
   27398:	b	272cc <__assert_fail@plt+0x14b30>
   2739c:	mov	r4, #0
   273a0:	mov	r5, #0
   273a4:	sub	r3, sl, #4
   273a8:	mov	r2, #56	; 0x38
   273ac:	mov	r1, #0
   273b0:	ldr	r0, [sp, #92]	; 0x5c
   273b4:	str	r3, [sp, #24]
   273b8:	strd	r4, [sp, #48]	; 0x30
   273bc:	bl	12514 <memset@plt>
   273c0:	ldr	r3, [r9, #-56]	; 0xffffffc8
   273c4:	str	r4, [sp, #64]	; 0x40
   273c8:	str	r3, [sp, #84]	; 0x54
   273cc:	str	r5, [sp, #56]	; 0x38
   273d0:	str	r4, [sp, #68]	; 0x44
   273d4:	str	r5, [sp, #72]	; 0x48
   273d8:	str	r4, [sp, #76]	; 0x4c
   273dc:	str	r5, [sp, #80]	; 0x50
   273e0:	ldr	r3, [r9, #-52]	; 0xffffffcc
   273e4:	b	27394 <__assert_fail@plt+0x14bf8>
   273e8:	ldr	r4, [sp, #36]	; 0x24
   273ec:	ldm	r9, {r0, r1}
   273f0:	add	r3, r4, #88	; 0x58
   273f4:	mov	ip, #1
   273f8:	stm	r3, {r0, r1}
   273fc:	mov	r2, #5
   27400:	ldr	r1, [pc, #440]	; 275c0 <__assert_fail@plt+0x14e24>
   27404:	strb	ip, [r4, #152]	; 0x98
   27408:	mov	r0, #0
   2740c:	bl	1222c <dcgettext@plt>
   27410:	ldrb	r3, [r4, #181]	; 0xb5
   27414:	sub	r2, sl, #4
   27418:	str	r2, [sp, #24]
   2741c:	cmp	r3, #0
   27420:	sub	r2, r9, #112	; 0x70
   27424:	mov	r1, r4
   27428:	str	r2, [sp, #96]	; 0x60
   2742c:	moveq	sl, #2
   27430:	mvneq	r7, #92	; 0x5c
   27434:	beq	26e90 <__assert_fail@plt+0x146f4>
   27438:	bl	261c4 <__assert_fail@plt+0x13a28>
   2743c:	mvn	r7, #92	; 0x5c
   27440:	mov	sl, #2
   27444:	b	26e90 <__assert_fail@plt+0x146f4>
   27448:	sub	r3, r9, #48	; 0x30
   2744c:	ldr	r4, [sp, #36]	; 0x24
   27450:	ldm	r3, {r0, r1, r2, r3}
   27454:	sub	ip, r9, #56	; 0x38
   27458:	stm	sp, {r0, r1, r2, r3}
   2745c:	mov	r0, r4
   27460:	ldm	ip, {r2, r3}
   27464:	bl	25930 <__assert_fail@plt+0x13194>
   27468:	mov	lr, r4
   2746c:	ldr	r0, [r4, #144]	; 0x90
   27470:	ldrd	r2, [lr, #136]	; 0x88
   27474:	mov	ip, r4
   27478:	ldr	r1, [r9, #48]	; 0x30
   2747c:	strd	r2, [sp, #24]
   27480:	ldrd	r2, [lr, #128]	; 0x80
   27484:	ldrd	r4, [r9, #40]	; 0x28
   27488:	adds	r1, r0, r1
   2748c:	strd	r2, [sp, #96]	; 0x60
   27490:	ldrd	r2, [lr, #120]	; 0x78
   27494:	movvs	ip, #1
   27498:	movvc	ip, #0
   2749c:	strd	r2, [sp, #152]	; 0x98
   274a0:	ldrd	r2, [sp, #24]
   274a4:	str	r1, [lr, #144]	; 0x90
   274a8:	adds	r0, r2, r4
   274ac:	adcs	r1, r3, r5
   274b0:	ldrd	r4, [sp, #96]	; 0x60
   274b4:	strd	r0, [lr, #136]	; 0x88
   274b8:	ldrd	r0, [r9, #32]
   274bc:	movvs	r7, #1
   274c0:	movvc	r7, #0
   274c4:	adds	r2, r4, r0
   274c8:	adcs	r3, r5, r1
   274cc:	ldrd	r0, [lr, #112]	; 0x70
   274d0:	ldrd	r4, [sp, #152]	; 0x98
   274d4:	orr	r7, ip, r7
   274d8:	strd	r0, [sp, #24]
   274dc:	ldrd	r0, [r9, #24]
   274e0:	mov	ip, lr
   274e4:	strd	r2, [lr, #128]	; 0x80
   274e8:	movvs	lr, #1
   274ec:	movvc	lr, #0
   274f0:	adds	r2, r4, r0
   274f4:	adcs	r3, r5, r1
   274f8:	ldrd	r4, [ip, #104]	; 0x68
   274fc:	ldrd	r0, [sp, #24]
   27500:	orr	lr, r7, lr
   27504:	strd	r4, [sp, #96]	; 0x60
   27508:	ldrd	r4, [r9, #16]
   2750c:	movvs	r7, #1
   27510:	movvc	r7, #0
   27514:	strd	r2, [ip, #120]	; 0x78
   27518:	adds	r2, r0, r4
   2751c:	adcs	r3, r1, r5
   27520:	ldrd	r4, [sp, #96]	; 0x60
   27524:	ldrd	r0, [r9, #8]
   27528:	orr	lr, lr, r7
   2752c:	strd	r2, [ip, #112]	; 0x70
   27530:	movvs	r7, #1
   27534:	movvc	r7, #0
   27538:	adds	r2, r4, r0
   2753c:	adcs	r3, r5, r1
   27540:	ldrd	r0, [r9]
   27544:	ldrd	r4, [ip, #96]	; 0x60
   27548:	orr	lr, lr, r7
   2754c:	strd	r2, [sp, #24]
   27550:	movvs	r7, #1
   27554:	movvc	r7, #0
   27558:	adds	r4, r4, r0
   2755c:	adcs	r5, r5, r1
   27560:	ldrd	r2, [sp, #24]
   27564:	orrvc	r1, lr, r7
   27568:	movvs	r1, #1
   2756c:	cmp	r1, #0
   27570:	strd	r2, [ip, #104]	; 0x68
   27574:	strd	r4, [ip, #96]	; 0x60
   27578:	bne	26740 <__assert_fail@plt+0x13fa4>
   2757c:	sub	r2, r9, #112	; 0x70
   27580:	mov	r3, #1
   27584:	str	r2, [sp, #96]	; 0x60
   27588:	sub	r2, sl, #4
   2758c:	str	r2, [sp, #24]
   27590:	strb	r3, [ip, #153]	; 0x99
   27594:	mov	sl, #24
   27598:	mvn	r7, #92	; 0x5c
   2759c:	b	26e90 <__assert_fail@plt+0x146f4>
   275a0:	andeq	fp, r5, r0, ror #24
   275a4:	andeq	r8, r4, ip, ror r7
   275a8:	andeq	r0, r0, r5, lsl r1
   275ac:	andeq	r0, r0, r3, lsl #2
   275b0:	andeq	r0, r0, r2, lsl r1
   275b4:	andeq	r0, r0, r3, lsl r1
   275b8:	andeq	r8, r4, r8, lsl fp
   275bc:	strdeq	r9, [r4], -ip
   275c0:	andeq	r9, r4, ip, lsr r4
   275c4:	andeq	r9, r4, r8, lsl #9
   275c8:	andeq	r9, r4, r0, lsl #9
   275cc:	andeq	r9, r4, r0, ror r4
   275d0:	andeq	r9, r4, r8, ror #8
   275d4:	muleq	r4, r4, r9
   275d8:	andeq	r9, r4, ip, asr r4
   275dc:	andeq	r6, r0, r0, ror r2
   275e0:	andeq	r9, r4, r4, ror r4
   275e4:	mov	r2, #56	; 0x38
   275e8:	mov	r1, #0
   275ec:	ldr	r0, [sp, #92]	; 0x5c
   275f0:	bl	12514 <memset@plt>
   275f4:	ldr	r4, [r9, #-56]	; 0xffffffc8
   275f8:	ldr	r7, [r9, #-52]	; 0xffffffcc
   275fc:	ldr	r3, [r9]
   27600:	mov	r2, #0
   27604:	cmp	r7, r4, asr #31
   27608:	str	r2, [sp, #48]	; 0x30
   2760c:	ldr	ip, [r9, #4]
   27610:	asr	r2, r3, #31
   27614:	bne	29210 <__assert_fail@plt+0x16a74>
   27618:	cmp	r2, ip
   2761c:	bne	29074 <__assert_fail@plt+0x168d8>
   27620:	smull	r2, r3, r4, r3
   27624:	strd	r2, [sp, #128]	; 0x80
   27628:	ldrd	r0, [sp, #128]	; 0x80
   2762c:	ldr	r3, [sp, #48]	; 0x30
   27630:	cmp	r3, #0
   27634:	str	r0, [sp, #76]	; 0x4c
   27638:	str	r1, [sp, #80]	; 0x50
   2763c:	bne	26740 <__assert_fail@plt+0x13fa4>
   27640:	sub	r2, r9, #112	; 0x70
   27644:	mov	r0, #0
   27648:	mov	r1, #0
   2764c:	str	r2, [sp, #96]	; 0x60
   27650:	sub	r2, sl, #4
   27654:	strd	r0, [sp, #48]	; 0x30
   27658:	str	r2, [sp, #24]
   2765c:	str	r3, [sp, #40]	; 0x28
   27660:	b	2725c <__assert_fail@plt+0x14ac0>
   27664:	mov	r4, #0
   27668:	mov	r5, #0
   2766c:	sub	r3, r9, #56	; 0x38
   27670:	str	r3, [sp, #96]	; 0x60
   27674:	mov	r2, #56	; 0x38
   27678:	sub	r3, sl, #2
   2767c:	mov	r1, #0
   27680:	ldr	r0, [sp, #92]	; 0x5c
   27684:	strd	r4, [sp, #48]	; 0x30
   27688:	str	r3, [sp, #24]
   2768c:	bl	12514 <memset@plt>
   27690:	str	r4, [sp, #64]	; 0x40
   27694:	str	r5, [sp, #56]	; 0x38
   27698:	str	r4, [sp, #68]	; 0x44
   2769c:	str	r5, [sp, #72]	; 0x48
   276a0:	str	r4, [sp, #76]	; 0x4c
   276a4:	str	r5, [sp, #80]	; 0x50
   276a8:	mov	r4, #1
   276ac:	mov	r5, #0
   276b0:	mov	r3, #0
   276b4:	mov	sl, #17
   276b8:	mvn	r7, #92	; 0x5c
   276bc:	str	r3, [sp, #40]	; 0x28
   276c0:	strd	r4, [sp, #84]	; 0x54
   276c4:	b	26e90 <__assert_fail@plt+0x146f4>
   276c8:	mov	r4, #0
   276cc:	mov	r5, #0
   276d0:	sub	r3, r9, #56	; 0x38
   276d4:	str	r3, [sp, #96]	; 0x60
   276d8:	mov	r2, #56	; 0x38
   276dc:	sub	r3, sl, #2
   276e0:	mov	r1, #0
   276e4:	ldr	r0, [sp, #92]	; 0x5c
   276e8:	str	r3, [sp, #24]
   276ec:	strd	r4, [sp, #48]	; 0x30
   276f0:	bl	12514 <memset@plt>
   276f4:	mov	r3, #0
   276f8:	str	r3, [sp, #40]	; 0x28
   276fc:	mov	r3, #1
   27700:	str	r3, [sp, #64]	; 0x40
   27704:	mov	r3, #0
   27708:	str	r4, [sp, #68]	; 0x44
   2770c:	str	r5, [sp, #72]	; 0x48
   27710:	str	r4, [sp, #76]	; 0x4c
   27714:	str	r5, [sp, #80]	; 0x50
   27718:	str	r4, [sp, #84]	; 0x54
   2771c:	str	r5, [sp, #88]	; 0x58
   27720:	mov	sl, #17
   27724:	mvn	r7, #92	; 0x5c
   27728:	str	r3, [sp, #56]	; 0x38
   2772c:	b	26e90 <__assert_fail@plt+0x146f4>
   27730:	mov	r4, #0
   27734:	mov	r5, #0
   27738:	sub	r3, sl, #4
   2773c:	mov	r2, #56	; 0x38
   27740:	mov	r1, #0
   27744:	ldr	r0, [sp, #92]	; 0x5c
   27748:	str	r3, [sp, #24]
   2774c:	strd	r4, [sp, #48]	; 0x30
   27750:	bl	12514 <memset@plt>
   27754:	ldr	r3, [r9, #-48]	; 0xffffffd0
   27758:	str	r4, [sp, #68]	; 0x44
   2775c:	str	r3, [sp, #64]	; 0x40
   27760:	ldr	r3, [r9, #-44]	; 0xffffffd4
   27764:	str	r5, [sp, #72]	; 0x48
   27768:	str	r4, [sp, #76]	; 0x4c
   2776c:	str	r5, [sp, #80]	; 0x50
   27770:	str	r4, [sp, #84]	; 0x54
   27774:	str	r5, [sp, #88]	; 0x58
   27778:	str	r3, [sp, #56]	; 0x38
   2777c:	b	272cc <__assert_fail@plt+0x14b30>
   27780:	mov	r1, #0
   27784:	sub	r3, sl, #4
   27788:	mov	r2, #56	; 0x38
   2778c:	ldr	r0, [sp, #92]	; 0x5c
   27790:	mov	r4, r1
   27794:	str	r3, [sp, #24]
   27798:	str	r1, [sp, #64]	; 0x40
   2779c:	mov	r5, r1
   277a0:	str	r1, [sp, #56]	; 0x38
   277a4:	bl	12514 <memset@plt>
   277a8:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   277ac:	str	r4, [sp, #68]	; 0x44
   277b0:	str	r4, [sp, #76]	; 0x4c
   277b4:	str	r4, [sp, #84]	; 0x54
   277b8:	str	r4, [sp, #72]	; 0x48
   277bc:	str	r4, [sp, #80]	; 0x50
   277c0:	str	r4, [sp, #88]	; 0x58
   277c4:	strd	r2, [sp, #48]	; 0x30
   277c8:	sub	r3, r9, #112	; 0x70
   277cc:	str	r3, [sp, #96]	; 0x60
   277d0:	mov	sl, #17
   277d4:	mvn	r7, #92	; 0x5c
   277d8:	str	r5, [sp, #40]	; 0x28
   277dc:	b	26e90 <__assert_fail@plt+0x146f4>
   277e0:	mov	r4, #0
   277e4:	mov	r5, #0
   277e8:	sub	r3, sl, #4
   277ec:	mov	r2, #56	; 0x38
   277f0:	mov	r1, #0
   277f4:	ldr	r0, [sp, #92]	; 0x5c
   277f8:	str	r3, [sp, #24]
   277fc:	strd	r4, [sp, #48]	; 0x30
   27800:	bl	12514 <memset@plt>
   27804:	ldr	r3, [r9, #-48]	; 0xffffffd0
   27808:	str	r4, [sp, #64]	; 0x40
   2780c:	str	r3, [sp, #68]	; 0x44
   27810:	ldr	r3, [r9, #-44]	; 0xffffffd4
   27814:	str	r5, [sp, #56]	; 0x38
   27818:	str	r4, [sp, #76]	; 0x4c
   2781c:	str	r5, [sp, #80]	; 0x50
   27820:	str	r4, [sp, #84]	; 0x54
   27824:	str	r5, [sp, #88]	; 0x58
   27828:	str	r3, [sp, #72]	; 0x48
   2782c:	b	272cc <__assert_fail@plt+0x14b30>
   27830:	mov	r4, #0
   27834:	mov	r5, #0
   27838:	sub	r3, sl, #4
   2783c:	mov	r2, #56	; 0x38
   27840:	mov	r1, #0
   27844:	ldr	r0, [sp, #92]	; 0x5c
   27848:	str	r3, [sp, #24]
   2784c:	strd	r4, [sp, #48]	; 0x30
   27850:	bl	12514 <memset@plt>
   27854:	ldr	r3, [r9, #-56]	; 0xffffffc8
   27858:	str	r4, [sp, #64]	; 0x40
   2785c:	str	r3, [sp, #68]	; 0x44
   27860:	ldr	r3, [r9, #-52]	; 0xffffffcc
   27864:	str	r5, [sp, #56]	; 0x38
   27868:	str	r4, [sp, #76]	; 0x4c
   2786c:	str	r5, [sp, #80]	; 0x50
   27870:	str	r4, [sp, #84]	; 0x54
   27874:	str	r5, [sp, #88]	; 0x58
   27878:	str	r3, [sp, #72]	; 0x48
   2787c:	b	272cc <__assert_fail@plt+0x14b30>
   27880:	sub	r2, r9, #56	; 0x38
   27884:	str	r2, [sp, #96]	; 0x60
   27888:	sub	r2, sl, #2
   2788c:	str	r2, [sp, #24]
   27890:	ldr	r2, [sp, #36]	; 0x24
   27894:	ldr	r3, [pc, #-704]	; 275dc <__assert_fail@plt+0x14e40>
   27898:	mov	sl, #12
   2789c:	str	r3, [r2, #24]
   278a0:	mvn	r7, #92	; 0x5c
   278a4:	b	26e90 <__assert_fail@plt+0x146f4>
   278a8:	sub	r3, sl, #2
   278ac:	ldr	r2, [sp, #36]	; 0x24
   278b0:	str	r3, [sp, #24]
   278b4:	ldr	r3, [r9], #-56	; 0xffffffc8
   278b8:	mov	sl, #12
   278bc:	str	r9, [sp, #96]	; 0x60
   278c0:	str	r3, [r2, #24]
   278c4:	mvn	r7, #92	; 0x5c
   278c8:	b	26e90 <__assert_fail@plt+0x146f4>
   278cc:	ldr	r1, [sp, #36]	; 0x24
   278d0:	mov	r2, #1
   278d4:	sub	r0, r9, #112	; 0x70
   278d8:	ldr	r3, [r1, #168]	; 0xa8
   278dc:	str	r0, [sp, #96]	; 0x60
   278e0:	add	r3, r3, r2
   278e4:	sub	r0, sl, #4
   278e8:	str	r0, [sp, #24]
   278ec:	str	r3, [r1, #168]	; 0xa8
   278f0:	str	r2, [r1, #20]
   278f4:	mov	sl, #11
   278f8:	mvn	r7, #92	; 0x5c
   278fc:	b	26e90 <__assert_fail@plt+0x146f4>
   27900:	sub	r3, sl, #2
   27904:	ldr	r2, [sp, #36]	; 0x24
   27908:	str	r3, [sp, #24]
   2790c:	ldr	r3, [r9], #-56	; 0xffffffc8
   27910:	mov	sl, #11
   27914:	str	r9, [sp, #96]	; 0x60
   27918:	str	r3, [r2, #20]
   2791c:	mvn	r7, #92	; 0x5c
   27920:	b	26e90 <__assert_fail@plt+0x146f4>
   27924:	ldr	r1, [sp, #36]	; 0x24
   27928:	ldr	r2, [r9, #-40]	; 0xffffffd8
   2792c:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   27930:	ldr	r3, [r1, #176]	; 0xb0
   27934:	cmp	r2, #2
   27938:	add	r3, r3, #1
   2793c:	str	r3, [r1, #176]	; 0xb0
   27940:	ldrd	r2, [r9]
   27944:	strd	r2, [sp, #96]	; 0x60
   27948:	bgt	28cc0 <__assert_fail@plt+0x16524>
   2794c:	cmp	r2, #0
   27950:	sbcs	r3, r3, #0
   27954:	blt	28fb4 <__assert_fail@plt+0x16818>
   27958:	cmp	r5, r4, asr #31
   2795c:	mov	lr, #0
   27960:	bne	293a4 <__assert_fail@plt+0x16c08>
   27964:	mov	r3, #60	; 0x3c
   27968:	smull	r4, r5, r4, r3
   2796c:	mov	r2, r4
   27970:	mov	r3, r5
   27974:	ldrb	ip, [r9, #-56]	; 0xffffffc8
   27978:	mov	r1, r3
   2797c:	ldrd	r4, [sp, #96]	; 0x60
   27980:	cmp	ip, #0
   27984:	beq	28f6c <__assert_fail@plt+0x167d0>
   27988:	subs	r2, r2, r4
   2798c:	sbcs	r3, r3, r5
   27990:	mov	r1, #0
   27994:	mov	r0, r2
   27998:	movvs	r1, #1
   2799c:	mov	r5, r3
   279a0:	orrs	r3, lr, r1
   279a4:	bne	26740 <__assert_fail@plt+0x13fa4>
   279a8:	adds	r3, r0, #1440	; 0x5a0
   279ac:	str	r3, [sp, #224]	; 0xe0
   279b0:	adc	r3, r5, #0
   279b4:	str	r3, [sp, #228]	; 0xe4
   279b8:	ldrd	r2, [sp, #224]	; 0xe0
   279bc:	cmp	r3, #0
   279c0:	cmpeq	r2, #2880	; 0xb40
   279c4:	bhi	26740 <__assert_fail@plt+0x13fa4>
   279c8:	rsb	r2, r0, r0, lsl #4
   279cc:	sub	r3, r9, #112	; 0x70
   279d0:	str	r3, [sp, #96]	; 0x60
   279d4:	lsl	r3, r2, #2
   279d8:	ldr	r2, [sp, #36]	; 0x24
   279dc:	mvn	r7, #26
   279e0:	str	r3, [r2, #24]
   279e4:	sub	r3, sl, #4
   279e8:	str	r3, [sp, #24]
   279ec:	mov	sl, #10
   279f0:	b	26e90 <__assert_fail@plt+0x146f4>
   279f4:	sub	ip, sl, #12
   279f8:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   279fc:	str	ip, [sp, #24]
   27a00:	ldr	ip, [sp, #36]	; 0x24
   27a04:	sub	r3, r9, #272	; 0x110
   27a08:	mov	sl, #8
   27a0c:	ldrd	r2, [r3]
   27a10:	strd	r0, [ip, #88]	; 0x58
   27a14:	ldrd	r0, [r9, #-160]	; 0xffffff60
   27a18:	strd	r2, [ip, #72]	; 0x48
   27a1c:	mov	r3, #2
   27a20:	strd	r0, [ip, #80]	; 0x50
   27a24:	sub	r1, r9, #336	; 0x150
   27a28:	str	r1, [sp, #96]	; 0x60
   27a2c:	str	r3, [ip, #28]
   27a30:	mov	r7, #20
   27a34:	b	26e90 <__assert_fail@plt+0x146f4>
   27a38:	sub	ip, sl, #8
   27a3c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   27a40:	ldrd	r0, [r9, #-160]	; 0xffffff60
   27a44:	str	ip, [sp, #24]
   27a48:	ldr	ip, [sp, #36]	; 0x24
   27a4c:	mov	sl, #8
   27a50:	mov	r7, #20
   27a54:	strd	r2, [ip, #80]	; 0x50
   27a58:	strd	r0, [ip, #72]	; 0x48
   27a5c:	mov	r3, #0
   27a60:	mov	r2, #2
   27a64:	sub	r1, r9, #224	; 0xe0
   27a68:	str	r1, [sp, #96]	; 0x60
   27a6c:	str	r3, [ip, #88]	; 0x58
   27a70:	str	r3, [ip, #92]	; 0x5c
   27a74:	str	r2, [ip, #28]
   27a78:	b	26e90 <__assert_fail@plt+0x146f4>
   27a7c:	ldr	r0, [sp, #36]	; 0x24
   27a80:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   27a84:	mov	r4, #0
   27a88:	mov	r5, #0
   27a8c:	mov	r1, #0
   27a90:	sub	ip, sl, #4
   27a94:	strd	r2, [r0, #72]	; 0x48
   27a98:	mov	r3, #2
   27a9c:	sub	r2, r9, #112	; 0x70
   27aa0:	strd	r4, [r0, #80]	; 0x50
   27aa4:	str	ip, [sp, #24]
   27aa8:	str	r2, [sp, #96]	; 0x60
   27aac:	str	r1, [r0, #88]	; 0x58
   27ab0:	str	r1, [r0, #92]	; 0x5c
   27ab4:	str	r3, [r0, #28]
   27ab8:	mov	sl, #8
   27abc:	mov	r7, #20
   27ac0:	b	26e90 <__assert_fail@plt+0x146f4>
   27ac4:	mov	r1, #0
   27ac8:	mov	r4, r1
   27acc:	sub	r3, sl, #4
   27ad0:	mov	r2, #56	; 0x38
   27ad4:	ldr	r0, [sp, #92]	; 0x5c
   27ad8:	str	r3, [sp, #24]
   27adc:	str	r1, [sp, #64]	; 0x40
   27ae0:	mov	r5, r1
   27ae4:	str	r1, [sp, #56]	; 0x38
   27ae8:	bl	12514 <memset@plt>
   27aec:	str	r4, [sp, #68]	; 0x44
   27af0:	str	r4, [sp, #76]	; 0x4c
   27af4:	str	r4, [sp, #84]	; 0x54
   27af8:	str	r4, [sp, #72]	; 0x48
   27afc:	str	r4, [sp, #80]	; 0x50
   27b00:	str	r4, [sp, #88]	; 0x58
   27b04:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   27b08:	b	277c4 <__assert_fail@plt+0x15028>
   27b0c:	mov	r3, r9
   27b10:	ldr	r0, [sp, #36]	; 0x24
   27b14:	ldr	r1, [r3], #-112	; 0xffffff90
   27b18:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   27b1c:	str	r3, [sp, #96]	; 0x60
   27b20:	mov	r2, #0
   27b24:	mov	r3, #0
   27b28:	str	r1, [r0, #28]
   27b2c:	strd	r2, [r0, #80]	; 0x50
   27b30:	mov	r1, #0
   27b34:	sub	r3, sl, #4
   27b38:	str	r3, [sp, #24]
   27b3c:	strd	r4, [r0, #72]	; 0x48
   27b40:	str	r1, [r0, #88]	; 0x58
   27b44:	str	r1, [r0, #92]	; 0x5c
   27b48:	mov	sl, #7
   27b4c:	mvn	r7, #92	; 0x5c
   27b50:	b	26e90 <__assert_fail@plt+0x146f4>
   27b54:	ldr	r1, [pc, #-1432]	; 275c4 <__assert_fail@plt+0x14e28>
   27b58:	mov	r2, #5
   27b5c:	mov	r0, #0
   27b60:	bl	1222c <dcgettext@plt>
   27b64:	ldr	r1, [sp, #36]	; 0x24
   27b68:	sub	r2, r9, #56	; 0x38
   27b6c:	str	r2, [sp, #96]	; 0x60
   27b70:	ldrb	r3, [r1, #181]	; 0xb5
   27b74:	sub	r2, sl, #2
   27b78:	str	r2, [sp, #24]
   27b7c:	cmp	r3, #0
   27b80:	beq	28ad8 <__assert_fail@plt+0x1633c>
   27b84:	bl	25e48 <__assert_fail@plt+0x136ac>
   27b88:	mvn	r7, #92	; 0x5c
   27b8c:	mov	sl, #4
   27b90:	b	26e90 <__assert_fail@plt+0x146f4>
   27b94:	ldr	r1, [pc, #-1492]	; 275c8 <__assert_fail@plt+0x14e2c>
   27b98:	mov	r2, #5
   27b9c:	mov	r0, #0
   27ba0:	bl	1222c <dcgettext@plt>
   27ba4:	ldr	r1, [sp, #36]	; 0x24
   27ba8:	ldrb	r3, [r1, #181]	; 0xb5
   27bac:	sub	r2, r9, #56	; 0x38
   27bb0:	str	r2, [sp, #96]	; 0x60
   27bb4:	cmp	r3, #0
   27bb8:	sub	r2, sl, #2
   27bbc:	str	r2, [sp, #24]
   27bc0:	beq	28ad8 <__assert_fail@plt+0x1633c>
   27bc4:	bl	261c4 <__assert_fail@plt+0x13a28>
   27bc8:	mvn	r7, #92	; 0x5c
   27bcc:	mov	sl, #4
   27bd0:	b	26e90 <__assert_fail@plt+0x146f4>
   27bd4:	mov	r2, #5
   27bd8:	ldr	r1, [pc, #-1536]	; 275e0 <__assert_fail@plt+0x14e44>
   27bdc:	b	27b5c <__assert_fail@plt+0x153c0>
   27be0:	ldr	r4, [sp, #36]	; 0x24
   27be4:	ldr	r1, [pc, #-1568]	; 275cc <__assert_fail@plt+0x14e30>
   27be8:	mov	r2, #5
   27bec:	ldr	r3, [r4, #160]	; 0xa0
   27bf0:	mov	r0, #0
   27bf4:	add	r3, r3, #1
   27bf8:	str	r3, [r4, #160]	; 0xa0
   27bfc:	bl	1222c <dcgettext@plt>
   27c00:	mov	r1, r4
   27c04:	b	27ba8 <__assert_fail@plt+0x1540c>
   27c08:	ldr	r4, [sp, #36]	; 0x24
   27c0c:	ldr	r1, [pc, #-1604]	; 275d0 <__assert_fail@plt+0x14e34>
   27c10:	mov	r2, #5
   27c14:	ldr	r3, [r4, #156]	; 0x9c
   27c18:	mov	r0, #0
   27c1c:	add	r3, r3, #1
   27c20:	str	r3, [r4, #156]	; 0x9c
   27c24:	bl	1222c <dcgettext@plt>
   27c28:	mov	r1, r4
   27c2c:	b	27ba8 <__assert_fail@plt+0x1540c>
   27c30:	ldr	r4, [sp, #36]	; 0x24
   27c34:	ldr	r1, [pc, #-1640]	; 275d4 <__assert_fail@plt+0x14e38>
   27c38:	mov	r2, #5
   27c3c:	ldr	r3, [r4, #176]	; 0xb0
   27c40:	mov	r0, #0
   27c44:	add	r3, r3, #1
   27c48:	str	r3, [r4, #176]	; 0xb0
   27c4c:	bl	1222c <dcgettext@plt>
   27c50:	mov	r1, r4
   27c54:	b	27ba8 <__assert_fail@plt+0x1540c>
   27c58:	ldr	r4, [sp, #36]	; 0x24
   27c5c:	ldr	r1, [pc, #-1676]	; 275d8 <__assert_fail@plt+0x14e3c>
   27c60:	mov	r2, #5
   27c64:	ldr	r3, [r4, #164]	; 0xa4
   27c68:	mov	r0, #0
   27c6c:	add	r3, r3, #1
   27c70:	str	r3, [r4, #164]	; 0xa4
   27c74:	bl	1222c <dcgettext@plt>
   27c78:	mov	r1, r4
   27c7c:	b	27ba8 <__assert_fail@plt+0x1540c>
   27c80:	sub	r2, r9, #56	; 0x38
   27c84:	mov	r0, #1
   27c88:	mov	r1, #0
   27c8c:	mov	r4, #0
   27c90:	mov	r5, #0
   27c94:	mov	r3, #0
   27c98:	str	r2, [sp, #96]	; 0x60
   27c9c:	sub	r2, sl, #2
   27ca0:	strd	r4, [sp, #48]	; 0x30
   27ca4:	str	r2, [sp, #24]
   27ca8:	strd	r0, [r8, #-8]
   27cac:	str	r3, [sp, #364]	; 0x16c
   27cb0:	str	r3, [sp, #40]	; 0x28
   27cb4:	str	r4, [sp, #64]	; 0x40
   27cb8:	str	r5, [sp, #56]	; 0x38
   27cbc:	str	r4, [sp, #68]	; 0x44
   27cc0:	str	r5, [sp, #72]	; 0x48
   27cc4:	str	r4, [sp, #76]	; 0x4c
   27cc8:	str	r5, [sp, #80]	; 0x50
   27ccc:	str	r4, [sp, #84]	; 0x54
   27cd0:	str	r5, [sp, #88]	; 0x58
   27cd4:	mov	sl, #17
   27cd8:	mvn	r7, #92	; 0x5c
   27cdc:	b	26e90 <__assert_fail@plt+0x146f4>
   27ce0:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   27ce4:	mov	r4, #0
   27ce8:	mov	r5, #0
   27cec:	mov	r1, #0
   27cf0:	sub	r0, sl, #4
   27cf4:	strd	r2, [r8, #-8]
   27cf8:	sub	r3, r9, #112	; 0x70
   27cfc:	strd	r4, [sp, #48]	; 0x30
   27d00:	str	r0, [sp, #24]
   27d04:	str	r3, [sp, #96]	; 0x60
   27d08:	str	r1, [sp, #364]	; 0x16c
   27d0c:	str	r1, [sp, #40]	; 0x28
   27d10:	b	27cb4 <__assert_fail@plt+0x15518>
   27d14:	sub	r3, r9, #272	; 0x110
   27d18:	mov	lr, r9
   27d1c:	ldrd	r4, [r3]
   27d20:	ldrd	r2, [r9, #-160]	; 0xffffff60
   27d24:	ldr	ip, [sp, #36]	; 0x24
   27d28:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   27d2c:	strd	r2, [sp, #152]	; 0x98
   27d30:	sub	r3, sl, #12
   27d34:	str	r3, [sp, #24]
   27d38:	ldr	r3, [lr], #-336	; 0xfffffeb0
   27d3c:	strd	r4, [ip, #72]	; 0x48
   27d40:	str	r3, [ip, #28]
   27d44:	ldrd	r2, [sp, #152]	; 0x98
   27d48:	str	lr, [sp, #96]	; 0x60
   27d4c:	strd	r0, [ip, #88]	; 0x58
   27d50:	strd	r2, [ip, #80]	; 0x50
   27d54:	mov	sl, #7
   27d58:	mvn	r7, #92	; 0x5c
   27d5c:	b	26e90 <__assert_fail@plt+0x146f4>
   27d60:	mov	r1, r9
   27d64:	sub	lr, sl, #8
   27d68:	ldr	ip, [r1], #-224	; 0xffffff20
   27d6c:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   27d70:	str	lr, [sp, #24]
   27d74:	ldr	lr, [sp, #36]	; 0x24
   27d78:	str	r1, [sp, #96]	; 0x60
   27d7c:	ldrd	r0, [r9, #-160]	; 0xffffff60
   27d80:	strd	r2, [lr, #80]	; 0x50
   27d84:	mov	r3, #0
   27d88:	str	ip, [lr, #28]
   27d8c:	strd	r0, [lr, #72]	; 0x48
   27d90:	str	r3, [lr, #88]	; 0x58
   27d94:	str	r3, [lr, #92]	; 0x5c
   27d98:	mov	sl, #7
   27d9c:	mvn	r7, #92	; 0x5c
   27da0:	b	26e90 <__assert_fail@plt+0x146f4>
   27da4:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   27da8:	b	27ce4 <__assert_fail@plt+0x15548>
   27dac:	ldr	lr, [sp, #36]	; 0x24
   27db0:	ldrd	r4, [r9, #40]	; 0x28
   27db4:	ldr	r1, [r9, #48]	; 0x30
   27db8:	ldrd	r2, [lr, #136]	; 0x88
   27dbc:	ldr	r0, [lr, #144]	; 0x90
   27dc0:	strd	r2, [sp, #24]
   27dc4:	ldrd	r2, [lr, #128]	; 0x80
   27dc8:	adds	r1, r0, r1
   27dcc:	movvs	ip, #1
   27dd0:	strd	r2, [sp, #96]	; 0x60
   27dd4:	ldrd	r2, [lr, #120]	; 0x78
   27dd8:	movvc	ip, #0
   27ddc:	str	r1, [lr, #144]	; 0x90
   27de0:	strd	r2, [sp, #152]	; 0x98
   27de4:	ldrd	r2, [sp, #24]
   27de8:	adds	r0, r2, r4
   27dec:	adcs	r1, r3, r5
   27df0:	ldrd	r4, [sp, #96]	; 0x60
   27df4:	strd	r0, [lr, #136]	; 0x88
   27df8:	ldrd	r0, [r9, #32]
   27dfc:	movvs	r7, #1
   27e00:	movvc	r7, #0
   27e04:	adds	r2, r4, r0
   27e08:	adcs	r3, r5, r1
   27e0c:	ldrd	r0, [lr, #112]	; 0x70
   27e10:	ldrd	r4, [sp, #152]	; 0x98
   27e14:	orr	ip, ip, r7
   27e18:	strd	r0, [sp, #24]
   27e1c:	ldrd	r0, [r9, #24]
   27e20:	movvs	r7, #1
   27e24:	movvc	r7, #0
   27e28:	strd	r2, [lr, #128]	; 0x80
   27e2c:	adds	r2, r4, r0
   27e30:	adcs	r3, r5, r1
   27e34:	ldrd	r4, [lr, #104]	; 0x68
   27e38:	ldrd	r0, [sp, #24]
   27e3c:	orr	ip, ip, r7
   27e40:	strd	r4, [sp, #96]	; 0x60
   27e44:	ldrd	r4, [r9, #16]
   27e48:	movvs	r7, #1
   27e4c:	movvc	r7, #0
   27e50:	strd	r2, [lr, #120]	; 0x78
   27e54:	adds	r2, r0, r4
   27e58:	adcs	r3, r1, r5
   27e5c:	ldrd	r4, [sp, #96]	; 0x60
   27e60:	ldrd	r0, [r9, #8]
   27e64:	orr	ip, ip, r7
   27e68:	strd	r2, [lr, #112]	; 0x70
   27e6c:	movvs	r7, #1
   27e70:	movvc	r7, #0
   27e74:	adds	r2, r4, r0
   27e78:	adcs	r3, r5, r1
   27e7c:	ldrd	r0, [r9]
   27e80:	ldrd	r4, [lr, #96]	; 0x60
   27e84:	orr	r7, ip, r7
   27e88:	movvs	ip, #1
   27e8c:	movvc	ip, #0
   27e90:	adds	r4, r4, r0
   27e94:	adcs	r5, r5, r1
   27e98:	ldr	r1, [pc, #-2244]	; 275dc <__assert_fail@plt+0x14e40>
   27e9c:	orrvc	r0, r7, ip
   27ea0:	movvs	r0, #1
   27ea4:	strd	r2, [sp, #24]
   27ea8:	ldrd	r2, [sp, #24]
   27eac:	cmp	r0, #0
   27eb0:	strd	r4, [lr, #96]	; 0x60
   27eb4:	strd	r2, [lr, #104]	; 0x68
   27eb8:	str	r1, [lr, #24]
   27ebc:	bne	26740 <__assert_fail@plt+0x13fa4>
   27ec0:	mov	r3, #1
   27ec4:	mov	r4, lr
   27ec8:	strb	r3, [lr, #153]	; 0x99
   27ecc:	mov	r2, #5
   27ed0:	ldr	r1, [pc, #-2296]	; 275e0 <__assert_fail@plt+0x14e44>
   27ed4:	bl	1222c <dcgettext@plt>
   27ed8:	ldrb	r3, [r4, #181]	; 0xb5
   27edc:	sub	r2, sl, #4
   27ee0:	str	r2, [sp, #24]
   27ee4:	cmp	r3, #0
   27ee8:	sub	r2, r9, #112	; 0x70
   27eec:	mov	r1, r4
   27ef0:	str	r2, [sp, #96]	; 0x60
   27ef4:	moveq	sl, #12
   27ef8:	mvneq	r7, #92	; 0x5c
   27efc:	beq	26e90 <__assert_fail@plt+0x146f4>
   27f00:	bl	25e48 <__assert_fail@plt+0x136ac>
   27f04:	mvn	r7, #92	; 0x5c
   27f08:	mov	sl, #12
   27f0c:	b	26e90 <__assert_fail@plt+0x146f4>
   27f10:	ldr	lr, [sp, #36]	; 0x24
   27f14:	ldrd	r4, [r9, #40]	; 0x28
   27f18:	ldr	r1, [r9, #48]	; 0x30
   27f1c:	ldrd	r2, [lr, #136]	; 0x88
   27f20:	ldr	r0, [lr, #144]	; 0x90
   27f24:	strd	r2, [sp, #24]
   27f28:	ldrd	r2, [lr, #128]	; 0x80
   27f2c:	adds	r1, r0, r1
   27f30:	movvs	ip, #1
   27f34:	strd	r2, [sp, #96]	; 0x60
   27f38:	ldrd	r2, [lr, #120]	; 0x78
   27f3c:	movvc	ip, #0
   27f40:	str	r1, [lr, #144]	; 0x90
   27f44:	strd	r2, [sp, #152]	; 0x98
   27f48:	ldrd	r2, [sp, #24]
   27f4c:	adds	r0, r2, r4
   27f50:	adcs	r1, r3, r5
   27f54:	ldrd	r4, [sp, #96]	; 0x60
   27f58:	strd	r0, [lr, #136]	; 0x88
   27f5c:	ldrd	r0, [r9, #32]
   27f60:	movvs	r7, #1
   27f64:	movvc	r7, #0
   27f68:	adds	r2, r4, r0
   27f6c:	adcs	r3, r5, r1
   27f70:	ldrd	r0, [lr, #112]	; 0x70
   27f74:	ldrd	r4, [sp, #152]	; 0x98
   27f78:	orr	ip, ip, r7
   27f7c:	strd	r0, [sp, #24]
   27f80:	ldrd	r0, [r9, #24]
   27f84:	movvs	r7, #1
   27f88:	movvc	r7, #0
   27f8c:	strd	r2, [lr, #128]	; 0x80
   27f90:	adds	r2, r4, r0
   27f94:	adcs	r3, r5, r1
   27f98:	ldrd	r4, [lr, #104]	; 0x68
   27f9c:	ldrd	r0, [sp, #24]
   27fa0:	orr	ip, ip, r7
   27fa4:	strd	r4, [sp, #96]	; 0x60
   27fa8:	ldrd	r4, [r9, #16]
   27fac:	movvs	r7, #1
   27fb0:	movvc	r7, #0
   27fb4:	strd	r2, [lr, #120]	; 0x78
   27fb8:	adds	r2, r0, r4
   27fbc:	adcs	r3, r1, r5
   27fc0:	ldrd	r4, [sp, #96]	; 0x60
   27fc4:	ldrd	r0, [r9, #8]
   27fc8:	orr	ip, ip, r7
   27fcc:	strd	r2, [lr, #112]	; 0x70
   27fd0:	movvs	r7, #1
   27fd4:	movvc	r7, #0
   27fd8:	adds	r2, r4, r0
   27fdc:	adcs	r3, r5, r1
   27fe0:	ldrd	r0, [r9]
   27fe4:	ldrd	r4, [lr, #96]	; 0x60
   27fe8:	orr	r7, ip, r7
   27fec:	movvs	ip, #1
   27ff0:	movvc	ip, #0
   27ff4:	adds	r4, r4, r0
   27ff8:	adcs	r5, r5, r1
   27ffc:	strd	r2, [sp, #24]
   28000:	orrvc	r0, r7, ip
   28004:	movvs	r0, #1
   28008:	ldr	r1, [r9, #-56]	; 0xffffffc8
   2800c:	b	27ea8 <__assert_fail@plt+0x1570c>
   28010:	add	r3, r9, #8
   28014:	sub	r2, sl, #2
   28018:	str	r2, [sp, #24]
   2801c:	ldm	r3, {r0, r1, r2, r3}
   28020:	sub	ip, r9, #56	; 0x38
   28024:	str	ip, [sp, #96]	; 0x60
   28028:	mvn	r7, #92	; 0x5c
   2802c:	stm	sp, {r0, r1, r2, r3}
   28030:	mov	sl, #23
   28034:	ldr	r0, [sp, #36]	; 0x24
   28038:	ldm	r9, {r2, r3}
   2803c:	bl	25930 <__assert_fail@plt+0x13194>
   28040:	b	26e90 <__assert_fail@plt+0x146f4>
   28044:	ldr	r3, [r9, #8]
   28048:	ldr	r2, [r9, #12]
   2804c:	adds	r1, r3, #-2147483648	; 0x80000000
   28050:	adc	r2, r2, #0
   28054:	str	r1, [sp, #248]	; 0xf8
   28058:	str	r2, [sp, #252]	; 0xfc
   2805c:	ldrd	r4, [sp, #248]	; 0xf8
   28060:	mov	r1, #0
   28064:	mvn	r0, #0
   28068:	cmp	r5, r1
   2806c:	cmpeq	r4, r0
   28070:	bhi	26740 <__assert_fail@plt+0x13fa4>
   28074:	str	r3, [sp, #312]	; 0x138
   28078:	sub	r3, r9, #56	; 0x38
   2807c:	mov	r2, #0
   28080:	str	r3, [sp, #96]	; 0x60
   28084:	sub	r3, sl, #2
   28088:	str	r3, [sp, #24]
   2808c:	str	r2, [sp, #316]	; 0x13c
   28090:	mov	sl, #22
   28094:	mvn	r7, #91	; 0x5b
   28098:	b	26e90 <__assert_fail@plt+0x146f4>
   2809c:	ldr	r3, [r9, #8]
   280a0:	ldr	r2, [r9, #12]
   280a4:	adds	r1, r3, #-2147483648	; 0x80000000
   280a8:	adc	r2, r2, #0
   280ac:	str	r1, [sp, #240]	; 0xf0
   280b0:	str	r2, [sp, #244]	; 0xf4
   280b4:	ldrd	r4, [sp, #240]	; 0xf0
   280b8:	mov	r1, #0
   280bc:	mvn	r0, #0
   280c0:	cmp	r5, r1
   280c4:	cmpeq	r4, r0
   280c8:	bhi	26740 <__assert_fail@plt+0x13fa4>
   280cc:	str	r3, [sp, #312]	; 0x138
   280d0:	sub	r3, r9, #56	; 0x38
   280d4:	mov	r2, #0
   280d8:	str	r3, [sp, #96]	; 0x60
   280dc:	sub	r3, sl, #2
   280e0:	str	r3, [sp, #24]
   280e4:	str	r2, [sp, #316]	; 0x13c
   280e8:	mov	sl, #21
   280ec:	mvn	r7, #92	; 0x5c
   280f0:	b	26e90 <__assert_fail@plt+0x146f4>
   280f4:	mov	r2, #56	; 0x38
   280f8:	mov	r1, #0
   280fc:	ldr	r0, [sp, #92]	; 0x5c
   28100:	bl	12514 <memset@plt>
   28104:	mov	r1, r9
   28108:	mov	r0, #0
   2810c:	ldrd	r2, [r1], #-56	; 0xffffffc8
   28110:	sub	ip, sl, #2
   28114:	str	ip, [sp, #24]
   28118:	str	r1, [sp, #96]	; 0x60
   2811c:	mov	r1, #0
   28120:	strd	r2, [sp, #76]	; 0x4c
   28124:	mov	r3, #0
   28128:	strd	r0, [sp, #48]	; 0x30
   2812c:	str	r0, [sp, #64]	; 0x40
   28130:	str	r1, [sp, #56]	; 0x38
   28134:	str	r0, [sp, #68]	; 0x44
   28138:	str	r1, [sp, #72]	; 0x48
   2813c:	str	r0, [sp, #84]	; 0x54
   28140:	str	r1, [sp, #88]	; 0x58
   28144:	mov	sl, #19
   28148:	mvn	r7, #92	; 0x5c
   2814c:	str	r3, [sp, #40]	; 0x28
   28150:	b	26e90 <__assert_fail@plt+0x146f4>
   28154:	mov	r1, #0
   28158:	sub	r3, sl, #4
   2815c:	mov	r2, #56	; 0x38
   28160:	ldr	r0, [sp, #92]	; 0x5c
   28164:	mov	r4, r1
   28168:	str	r3, [sp, #24]
   2816c:	str	r1, [sp, #64]	; 0x40
   28170:	str	r1, [sp, #56]	; 0x38
   28174:	bl	12514 <memset@plt>
   28178:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2817c:	str	r4, [sp, #68]	; 0x44
   28180:	str	r4, [sp, #76]	; 0x4c
   28184:	strd	r2, [sp, #48]	; 0x30
   28188:	sub	r3, r9, #112	; 0x70
   2818c:	str	r4, [sp, #84]	; 0x54
   28190:	str	r4, [sp, #72]	; 0x48
   28194:	str	r4, [sp, #80]	; 0x50
   28198:	str	r4, [sp, #88]	; 0x58
   2819c:	str	r3, [sp, #96]	; 0x60
   281a0:	mov	sl, #18
   281a4:	mov	r7, #60	; 0x3c
   281a8:	str	r4, [sp, #40]	; 0x28
   281ac:	b	26e90 <__assert_fail@plt+0x146f4>
   281b0:	mov	r4, #0
   281b4:	mov	r5, #0
   281b8:	sub	r3, sl, #4
   281bc:	mov	r2, #56	; 0x38
   281c0:	mov	r1, #0
   281c4:	ldr	r0, [sp, #92]	; 0x5c
   281c8:	str	r3, [sp, #24]
   281cc:	strd	r4, [sp, #48]	; 0x30
   281d0:	bl	12514 <memset@plt>
   281d4:	ldr	r3, [r9, #-48]	; 0xffffffd0
   281d8:	str	r4, [sp, #68]	; 0x44
   281dc:	str	r3, [sp, #64]	; 0x40
   281e0:	ldr	r3, [r9, #-44]	; 0xffffffd4
   281e4:	str	r5, [sp, #72]	; 0x48
   281e8:	str	r4, [sp, #76]	; 0x4c
   281ec:	str	r5, [sp, #80]	; 0x50
   281f0:	str	r4, [sp, #84]	; 0x54
   281f4:	str	r5, [sp, #88]	; 0x58
   281f8:	str	r3, [sp, #56]	; 0x38
   281fc:	sub	r3, r9, #112	; 0x70
   28200:	str	r3, [sp, #96]	; 0x60
   28204:	mov	r3, #0
   28208:	mov	sl, #18
   2820c:	mov	r7, #60	; 0x3c
   28210:	str	r3, [sp, #40]	; 0x28
   28214:	b	26e90 <__assert_fail@plt+0x146f4>
   28218:	mov	r4, #0
   2821c:	mov	r5, #0
   28220:	sub	r3, sl, #4
   28224:	mov	r2, #56	; 0x38
   28228:	mov	r1, #0
   2822c:	ldr	r0, [sp, #92]	; 0x5c
   28230:	str	r3, [sp, #24]
   28234:	strd	r4, [sp, #48]	; 0x30
   28238:	bl	12514 <memset@plt>
   2823c:	ldr	r3, [r9, #-48]	; 0xffffffd0
   28240:	str	r4, [sp, #64]	; 0x40
   28244:	str	r3, [sp, #68]	; 0x44
   28248:	ldr	r3, [r9, #-44]	; 0xffffffd4
   2824c:	str	r5, [sp, #56]	; 0x38
   28250:	str	r4, [sp, #76]	; 0x4c
   28254:	str	r5, [sp, #80]	; 0x50
   28258:	str	r4, [sp, #84]	; 0x54
   2825c:	str	r5, [sp, #88]	; 0x58
   28260:	str	r3, [sp, #72]	; 0x48
   28264:	b	281fc <__assert_fail@plt+0x15a60>
   28268:	mov	r2, #56	; 0x38
   2826c:	mov	r1, #0
   28270:	ldr	r0, [sp, #92]	; 0x5c
   28274:	bl	12514 <memset@plt>
   28278:	ldr	r0, [r9, #-48]	; 0xffffffd0
   2827c:	ldr	r2, [r9, #-44]	; 0xffffffd4
   28280:	ldr	r3, [r9]
   28284:	mov	r1, #0
   28288:	cmp	r2, r0, asr #31
   2828c:	str	r1, [sp, #40]	; 0x28
   28290:	ldr	ip, [r9, #4]
   28294:	asr	r1, r3, #31
   28298:	bne	29054 <__assert_fail@plt+0x168b8>
   2829c:	cmp	r1, ip
   282a0:	bne	28fe4 <__assert_fail@plt+0x16848>
   282a4:	smull	r2, r3, r0, r3
   282a8:	strd	r2, [sp, #144]	; 0x90
   282ac:	ldrd	r0, [sp, #144]	; 0x90
   282b0:	ldr	r3, [sp, #40]	; 0x28
   282b4:	cmp	r3, #0
   282b8:	str	r0, [sp, #76]	; 0x4c
   282bc:	str	r1, [sp, #80]	; 0x50
   282c0:	bne	26740 <__assert_fail@plt+0x13fa4>
   282c4:	mov	r0, #0
   282c8:	mov	r1, #0
   282cc:	sub	r2, r9, #112	; 0x70
   282d0:	str	r2, [sp, #96]	; 0x60
   282d4:	sub	r2, sl, #4
   282d8:	strd	r0, [sp, #48]	; 0x30
   282dc:	str	r2, [sp, #24]
   282e0:	str	r0, [sp, #64]	; 0x40
   282e4:	str	r1, [sp, #56]	; 0x38
   282e8:	str	r0, [sp, #68]	; 0x44
   282ec:	str	r1, [sp, #72]	; 0x48
   282f0:	str	r0, [sp, #84]	; 0x54
   282f4:	str	r1, [sp, #88]	; 0x58
   282f8:	mov	sl, #18
   282fc:	mov	r7, #60	; 0x3c
   28300:	b	26e90 <__assert_fail@plt+0x146f4>
   28304:	mov	r4, #0
   28308:	mov	r5, #0
   2830c:	sub	r3, sl, #4
   28310:	mov	r2, #56	; 0x38
   28314:	mov	r1, #0
   28318:	ldr	r0, [sp, #92]	; 0x5c
   2831c:	str	r3, [sp, #24]
   28320:	strd	r4, [sp, #48]	; 0x30
   28324:	bl	12514 <memset@plt>
   28328:	ldr	r3, [r9, #-48]	; 0xffffffd0
   2832c:	str	r4, [sp, #64]	; 0x40
   28330:	str	r3, [sp, #84]	; 0x54
   28334:	ldr	r3, [r9, #-44]	; 0xffffffd4
   28338:	str	r5, [sp, #56]	; 0x38
   2833c:	str	r4, [sp, #68]	; 0x44
   28340:	str	r5, [sp, #72]	; 0x48
   28344:	str	r4, [sp, #76]	; 0x4c
   28348:	str	r5, [sp, #80]	; 0x50
   2834c:	str	r3, [sp, #88]	; 0x58
   28350:	b	281fc <__assert_fail@plt+0x15a60>
   28354:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   28358:	mov	r4, #0
   2835c:	mov	r5, #0
   28360:	mov	r1, #0
   28364:	sub	r0, sl, #4
   28368:	strd	r2, [r8, #-8]
   2836c:	sub	r3, r9, #112	; 0x70
   28370:	strd	r4, [sp, #48]	; 0x30
   28374:	str	r0, [sp, #24]
   28378:	str	r3, [sp, #96]	; 0x60
   2837c:	str	r1, [sp, #364]	; 0x16c
   28380:	str	r1, [sp, #40]	; 0x28
   28384:	str	r4, [sp, #64]	; 0x40
   28388:	str	r5, [sp, #56]	; 0x38
   2838c:	str	r4, [sp, #68]	; 0x44
   28390:	str	r5, [sp, #72]	; 0x48
   28394:	str	r4, [sp, #76]	; 0x4c
   28398:	str	r5, [sp, #80]	; 0x50
   2839c:	str	r4, [sp, #84]	; 0x54
   283a0:	str	r5, [sp, #88]	; 0x58
   283a4:	mov	sl, #18
   283a8:	mov	r7, #60	; 0x3c
   283ac:	b	26e90 <__assert_fail@plt+0x146f4>
   283b0:	ldr	r2, [sp, #36]	; 0x24
   283b4:	ldr	r3, [r9, #-56]	; 0xffffffc8
   283b8:	mov	r1, #0
   283bc:	mov	r0, #0
   283c0:	str	r3, [r2, #16]
   283c4:	strd	r0, [r2, #8]
   283c8:	sub	r3, r9, #112	; 0x70
   283cc:	sub	r1, sl, #4
   283d0:	str	r1, [sp, #24]
   283d4:	str	r3, [sp, #96]	; 0x60
   283d8:	mov	sl, #13
   283dc:	mvn	r7, #92	; 0x5c
   283e0:	b	26e90 <__assert_fail@plt+0x146f4>
   283e4:	ldr	r1, [sp, #36]	; 0x24
   283e8:	mov	r2, #0
   283ec:	mov	r3, #0
   283f0:	mvn	r7, #92	; 0x5c
   283f4:	strd	r2, [r1, #8]
   283f8:	mov	r2, r9
   283fc:	ldr	r3, [r2], #-56	; 0xffffffc8
   28400:	str	r2, [sp, #96]	; 0x60
   28404:	sub	r2, sl, #2
   28408:	str	r2, [sp, #24]
   2840c:	str	r3, [r1, #16]
   28410:	mov	sl, #13
   28414:	b	26e90 <__assert_fail@plt+0x146f4>
   28418:	sub	r2, sl, #4
   2841c:	ldr	r3, [r9, #-56]	; 0xffffffc8
   28420:	str	r2, [sp, #24]
   28424:	ldr	r2, [sp, #36]	; 0x24
   28428:	add	r3, r3, #3600	; 0xe10
   2842c:	mov	sl, #12
   28430:	str	r3, [r2, #24]
   28434:	sub	r3, r9, #112	; 0x70
   28438:	str	r3, [sp, #96]	; 0x60
   2843c:	mvn	r7, #92	; 0x5c
   28440:	b	26e90 <__assert_fail@plt+0x146f4>
   28444:	sub	r3, sl, #2
   28448:	str	r3, [sp, #24]
   2844c:	ldr	r2, [sp, #36]	; 0x24
   28450:	ldr	r3, [r9], #-56	; 0xffffffc8
   28454:	mov	sl, #12
   28458:	add	r3, r3, #3600	; 0xe10
   2845c:	str	r9, [sp, #96]	; 0x60
   28460:	str	r3, [r2, #24]
   28464:	mvn	r7, #92	; 0x5c
   28468:	b	26e90 <__assert_fail@plt+0x146f4>
   2846c:	sub	r3, r9, #56	; 0x38
   28470:	mov	r1, #0
   28474:	mov	r2, #56	; 0x38
   28478:	str	r3, [sp, #96]	; 0x60
   2847c:	ldr	r0, [sp, #92]	; 0x5c
   28480:	sub	r3, sl, #2
   28484:	mov	r4, r1
   28488:	str	r3, [sp, #24]
   2848c:	str	r1, [sp, #64]	; 0x40
   28490:	str	r1, [sp, #56]	; 0x38
   28494:	bl	12514 <memset@plt>
   28498:	mov	r2, #1
   2849c:	mov	r3, #0
   284a0:	str	r4, [sp, #68]	; 0x44
   284a4:	str	r4, [sp, #76]	; 0x4c
   284a8:	str	r4, [sp, #84]	; 0x54
   284ac:	str	r4, [sp, #72]	; 0x48
   284b0:	str	r4, [sp, #80]	; 0x50
   284b4:	str	r4, [sp, #88]	; 0x58
   284b8:	mov	sl, #17
   284bc:	mvn	r7, #92	; 0x5c
   284c0:	str	r4, [sp, #40]	; 0x28
   284c4:	strd	r2, [sp, #48]	; 0x30
   284c8:	b	26e90 <__assert_fail@plt+0x146f4>
   284cc:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   284d0:	mov	r1, r9
   284d4:	mov	r0, r1
   284d8:	mvn	r7, #92	; 0x5c
   284dc:	ldr	r1, [r0], #-112	; 0xffffff90
   284e0:	str	r0, [sp, #96]	; 0x60
   284e4:	sub	r0, sl, #4
   284e8:	str	r0, [sp, #24]
   284ec:	ldr	r0, [sp, #36]	; 0x24
   284f0:	mov	sl, #13
   284f4:	str	r1, [r0, #16]
   284f8:	mov	r1, #1
   284fc:	strd	r2, [r0, #8]
   28500:	strb	r1, [r0, #188]	; 0xbc
   28504:	b	26e90 <__assert_fail@plt+0x146f4>
   28508:	ldr	r3, [r9, #-40]	; 0xffffffd8
   2850c:	ldrd	r0, [r9]
   28510:	cmp	r3, #2
   28514:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   28518:	strd	r0, [sp, #96]	; 0x60
   2851c:	bgt	28d94 <__assert_fail@plt+0x165f8>
   28520:	cmp	r0, #0
   28524:	sbcs	r3, r1, #0
   28528:	blt	28f88 <__assert_fail@plt+0x167ec>
   2852c:	cmp	r5, r4, asr #31
   28530:	mov	lr, #0
   28534:	bne	29348 <__assert_fail@plt+0x16bac>
   28538:	mov	r3, #60	; 0x3c
   2853c:	smull	r4, r5, r4, r3
   28540:	mov	r2, r4
   28544:	mov	r3, r5
   28548:	ldrb	ip, [r9, #-56]	; 0xffffffc8
   2854c:	mov	r1, r3
   28550:	ldrd	r4, [sp, #96]	; 0x60
   28554:	cmp	ip, #0
   28558:	beq	28f50 <__assert_fail@plt+0x167b4>
   2855c:	subs	r2, r2, r4
   28560:	sbcs	r3, r3, r5
   28564:	mov	r1, #0
   28568:	mov	r0, r2
   2856c:	movvs	r1, #1
   28570:	mov	r5, r3
   28574:	orrs	r3, lr, r1
   28578:	bne	26740 <__assert_fail@plt+0x13fa4>
   2857c:	adds	r3, r0, #1440	; 0x5a0
   28580:	str	r3, [sp, #232]	; 0xe8
   28584:	adc	r3, r5, #0
   28588:	str	r3, [sp, #236]	; 0xec
   2858c:	ldrd	r2, [sp, #232]	; 0xe8
   28590:	cmp	r3, #0
   28594:	cmpeq	r2, #2880	; 0xb40
   28598:	bhi	26740 <__assert_fail@plt+0x13fa4>
   2859c:	rsb	r2, r0, r0, lsl #4
   285a0:	ldrd	r4, [r9, #-112]	; 0xffffff90
   285a4:	lsl	r2, r2, #2
   285a8:	adds	r0, r2, r4
   285ac:	asr	r3, r2, #31
   285b0:	adcs	r1, r3, r5
   285b4:	asr	r3, r0, #31
   285b8:	movvs	ip, #1
   285bc:	movvc	ip, #0
   285c0:	cmp	r1, r3
   285c4:	cmpeq	r0, r0
   285c8:	ldr	r3, [sp, #36]	; 0x24
   285cc:	movne	ip, #1
   285d0:	cmp	ip, #0
   285d4:	str	r0, [r3, #24]
   285d8:	bne	26740 <__assert_fail@plt+0x13fa4>
   285dc:	sub	r3, r9, #168	; 0xa8
   285e0:	str	r3, [sp, #96]	; 0x60
   285e4:	sub	r3, sl, #6
   285e8:	str	r3, [sp, #24]
   285ec:	mov	sl, #12
   285f0:	mvn	r7, #92	; 0x5c
   285f4:	b	26e90 <__assert_fail@plt+0x146f4>
   285f8:	ldr	r4, [sp, #36]	; 0x24
   285fc:	ldr	r1, [pc, #4072]	; 295ec <__assert_fail@plt+0x16e50>
   28600:	mov	r2, #5
   28604:	ldr	r3, [r4, #172]	; 0xac
   28608:	mov	r0, #0
   2860c:	add	r3, r3, #1
   28610:	str	r3, [r4, #172]	; 0xac
   28614:	bl	1222c <dcgettext@plt>
   28618:	mov	r1, r4
   2861c:	b	27ba8 <__assert_fail@plt+0x1540c>
   28620:	ldr	r4, [sp, #36]	; 0x24
   28624:	ldr	r1, [pc, #4036]	; 295f0 <__assert_fail@plt+0x16e54>
   28628:	mov	r0, #0
   2862c:	ldr	r2, [r4, #172]	; 0xac
   28630:	ldr	r3, [r4, #156]	; 0x9c
   28634:	add	r2, r2, #1
   28638:	add	r3, r3, #1
   2863c:	str	r2, [r4, #172]	; 0xac
   28640:	str	r3, [r4, #156]	; 0x9c
   28644:	mov	r2, #5
   28648:	bl	1222c <dcgettext@plt>
   2864c:	mov	r1, r4
   28650:	b	27ba8 <__assert_fail@plt+0x1540c>
   28654:	mvn	r2, #0
   28658:	mvn	r3, #0
   2865c:	str	sl, [sp, #24]
   28660:	str	r9, [sp, #96]	; 0x60
   28664:	strd	r2, [r8, #-8]
   28668:	mov	sl, #25
   2866c:	mov	r7, #43	; 0x2b
   28670:	b	26e90 <__assert_fail@plt+0x146f4>
   28674:	ldr	ip, [sp, #36]	; 0x24
   28678:	ldrd	r0, [r9, #-56]	; 0xffffffc8
   2867c:	ldr	r3, [r9]
   28680:	ldrd	r4, [r9, #-16]
   28684:	strd	r0, [sp, #24]
   28688:	ldrd	r0, [ip, #136]	; 0x88
   2868c:	cmp	r3, #0
   28690:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   28694:	strd	r0, [sp, #176]	; 0xb0
   28698:	ldrd	r0, [ip, #128]	; 0x80
   2869c:	strd	r2, [sp, #96]	; 0x60
   286a0:	ldrd	r2, [r9, #-40]	; 0xffffffd8
   286a4:	strd	r0, [sp, #184]	; 0xb8
   286a8:	ldrd	r0, [ip, #120]	; 0x78
   286ac:	strd	r2, [sp, #152]	; 0x98
   286b0:	ldrd	r2, [r9, #-32]	; 0xffffffe0
   286b4:	strd	r0, [sp, #192]	; 0xc0
   286b8:	ldrd	r0, [ip, #112]	; 0x70
   286bc:	strd	r2, [sp, #160]	; 0xa0
   286c0:	ldrd	r2, [r9, #-24]	; 0xffffffe8
   286c4:	strd	r0, [sp, #200]	; 0xc8
   286c8:	ldrd	r0, [ip, #104]	; 0x68
   286cc:	strd	r2, [sp, #168]	; 0xa8
   286d0:	ldr	r2, [r9, #-8]
   286d4:	strd	r0, [sp, #208]	; 0xd0
   286d8:	ldrd	r0, [ip, #96]	; 0x60
   286dc:	ldr	r3, [ip, #144]	; 0x90
   286e0:	strd	r0, [sp, #216]	; 0xd8
   286e4:	blt	28e08 <__assert_fail@plt+0x1666c>
   286e8:	adds	ip, r3, r2
   286ec:	ldrd	r2, [sp, #176]	; 0xb0
   286f0:	movvs	lr, #1
   286f4:	movvc	lr, #0
   286f8:	adds	r0, r2, r4
   286fc:	adcs	r1, r3, r5
   28700:	ldrd	r4, [sp, #184]	; 0xb8
   28704:	strd	r0, [sp, #176]	; 0xb0
   28708:	ldrd	r0, [sp, #168]	; 0xa8
   2870c:	movvs	r7, #1
   28710:	movvc	r7, #0
   28714:	adds	r2, r4, r0
   28718:	adcs	r3, r5, r1
   2871c:	ldrd	r0, [sp, #192]	; 0xc0
   28720:	strd	r2, [sp, #168]	; 0xa8
   28724:	ldrd	r2, [sp, #160]	; 0xa0
   28728:	orr	lr, lr, r7
   2872c:	movvs	r7, #1
   28730:	movvc	r7, #0
   28734:	adds	r4, r0, r2
   28738:	adcs	r5, r1, r3
   2873c:	ldrd	r2, [sp, #152]	; 0x98
   28740:	strd	r4, [sp, #160]	; 0xa0
   28744:	ldrd	r4, [sp, #200]	; 0xc8
   28748:	orr	lr, lr, r7
   2874c:	movvs	r7, #1
   28750:	movvc	r7, #0
   28754:	adds	r0, r4, r2
   28758:	adcs	r1, r5, r3
   2875c:	ldrd	r2, [sp, #96]	; 0x60
   28760:	strd	r0, [sp, #152]	; 0x98
   28764:	ldrd	r0, [sp, #208]	; 0xd0
   28768:	orr	lr, lr, r7
   2876c:	movvs	r7, #1
   28770:	movvc	r7, #0
   28774:	adds	r4, r0, r2
   28778:	adcs	r5, r1, r3
   2877c:	ldrd	r2, [sp, #24]
   28780:	strd	r4, [sp, #96]	; 0x60
   28784:	ldrd	r4, [sp, #216]	; 0xd8
   28788:	orr	lr, lr, r7
   2878c:	movvs	r7, #1
   28790:	movvc	r7, #0
   28794:	adds	r0, r4, r2
   28798:	adcs	r1, r5, r3
   2879c:	ldr	r3, [sp, #36]	; 0x24
   287a0:	strd	r0, [sp, #24]
   287a4:	ldrd	r0, [sp, #176]	; 0xb0
   287a8:	ldrd	r4, [sp, #96]	; 0x60
   287ac:	orrvc	r2, lr, r7
   287b0:	movvs	r2, #1
   287b4:	strd	r0, [r3, #136]	; 0x88
   287b8:	ldrd	r0, [sp, #168]	; 0xa8
   287bc:	str	ip, [r3, #144]	; 0x90
   287c0:	strd	r4, [r3, #104]	; 0x68
   287c4:	strd	r0, [r3, #128]	; 0x80
   287c8:	ldrd	r0, [sp, #160]	; 0xa0
   287cc:	strd	r0, [r3, #120]	; 0x78
   287d0:	ldrd	r0, [sp, #152]	; 0x98
   287d4:	strd	r0, [r3, #112]	; 0x70
   287d8:	ldrd	r0, [sp, #24]
   287dc:	strd	r0, [r3, #96]	; 0x60
   287e0:	cmp	r2, #0
   287e4:	bne	26740 <__assert_fail@plt+0x13fa4>
   287e8:	sub	r2, r9, #112	; 0x70
   287ec:	str	r2, [sp, #96]	; 0x60
   287f0:	sub	r2, sl, #4
   287f4:	str	r2, [sp, #24]
   287f8:	ldr	r2, [sp, #36]	; 0x24
   287fc:	mov	r3, #1
   28800:	mov	sl, #16
   28804:	strb	r3, [r2, #153]	; 0x99
   28808:	mvn	r7, #92	; 0x5c
   2880c:	b	26e90 <__assert_fail@plt+0x146f4>
   28810:	ldr	r3, [sp, #36]	; 0x24
   28814:	sub	r7, r9, #112	; 0x70
   28818:	add	lr, r3, #32
   2881c:	ldm	r7!, {r0, r1, r2, r3}
   28820:	mov	ip, #0
   28824:	ldrd	r4, [r9, #-48]	; 0xffffffd0
   28828:	stmia	lr!, {r0, r1, r2, r3}
   2882c:	rsbs	r4, r4, #0
   28830:	ldm	r7, {r0, r1}
   28834:	rscs	r5, r5, #0
   28838:	ldr	r3, [sp, #36]	; 0x24
   2883c:	movvs	ip, #1
   28840:	stm	lr, {r0, r1}
   28844:	subs	r1, ip, #0
   28848:	strd	r4, [r3, #56]	; 0x38
   2884c:	bne	26740 <__assert_fail@plt+0x13fa4>
   28850:	ldrd	r2, [r9, #8]
   28854:	rsbs	r2, r2, #0
   28858:	rscs	r3, r3, #0
   2885c:	movvs	r1, #1
   28860:	cmp	r1, #0
   28864:	ldr	r1, [sp, #36]	; 0x24
   28868:	strd	r2, [r1, #64]	; 0x40
   2886c:	bne	26740 <__assert_fail@plt+0x13fa4>
   28870:	sub	r3, r9, #168	; 0xa8
   28874:	str	r3, [sp, #96]	; 0x60
   28878:	sub	r3, sl, #6
   2887c:	str	r3, [sp, #24]
   28880:	mov	sl, #15
   28884:	mvn	r7, #92	; 0x5c
   28888:	b	26e90 <__assert_fail@plt+0x146f4>
   2888c:	ldrd	r4, [r9, #-104]	; 0xffffff98
   28890:	ldr	r7, [sp, #36]	; 0x24
   28894:	mov	lr, r9
   28898:	add	ip, r7, #32
   2889c:	ldm	lr!, {r0, r1, r2, r3}
   288a0:	sub	sl, sl, #6
   288a4:	strd	r4, [r7, #64]	; 0x40
   288a8:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   288ac:	sub	r9, r9, #168	; 0xa8
   288b0:	str	sl, [sp, #24]
   288b4:	str	r9, [sp, #96]	; 0x60
   288b8:	strd	r4, [r7, #56]	; 0x38
   288bc:	stmia	ip!, {r0, r1, r2, r3}
   288c0:	mov	sl, #14
   288c4:	ldm	lr, {r0, r1}
   288c8:	mvn	r7, #92	; 0x5c
   288cc:	stm	ip, {r0, r1}
   288d0:	b	26e90 <__assert_fail@plt+0x146f4>
   288d4:	mov	ip, r9
   288d8:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   288dc:	ldrd	r0, [ip], #-112	; 0xffffff90
   288e0:	mvn	r7, #92	; 0x5c
   288e4:	str	ip, [sp, #96]	; 0x60
   288e8:	sub	ip, sl, #4
   288ec:	str	ip, [sp, #24]
   288f0:	ldr	ip, [sp, #36]	; 0x24
   288f4:	mov	sl, #14
   288f8:	strd	r2, [ip, #64]	; 0x40
   288fc:	strd	r0, [ip, #56]	; 0x38
   28900:	b	26e90 <__assert_fail@plt+0x146f4>
   28904:	ldrd	r4, [r9, #-168]	; 0xffffff58
   28908:	ldr	r7, [sp, #36]	; 0x24
   2890c:	mov	lr, r9
   28910:	sub	sl, sl, #8
   28914:	strd	r4, [r7, #56]	; 0x38
   28918:	ldrd	r4, [r9, #-104]	; 0xffffff98
   2891c:	sub	r9, r9, #224	; 0xe0
   28920:	ldm	lr!, {r0, r1, r2, r3}
   28924:	add	ip, r7, #32
   28928:	str	sl, [sp, #24]
   2892c:	str	r9, [sp, #96]	; 0x60
   28930:	strd	r4, [r7, #64]	; 0x40
   28934:	b	288bc <__assert_fail@plt+0x16120>
   28938:	sub	ip, sl, #4
   2893c:	ldrd	r2, [r9, #-56]	; 0xffffffc8
   28940:	str	ip, [sp, #24]
   28944:	ldr	ip, [sp, #36]	; 0x24
   28948:	ldrd	r0, [r9, #8]
   2894c:	mov	sl, #14
   28950:	strd	r2, [ip, #56]	; 0x38
   28954:	sub	r3, r9, #112	; 0x70
   28958:	strd	r0, [ip, #64]	; 0x40
   2895c:	str	r3, [sp, #96]	; 0x60
   28960:	mvn	r7, #92	; 0x5c
   28964:	b	26e90 <__assert_fail@plt+0x146f4>
   28968:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   2896c:	ldr	r0, [sp, #36]	; 0x24
   28970:	ldrd	r4, [r9, #-112]	; 0xffffff90
   28974:	rsbs	r2, r2, #0
   28978:	rscs	r3, r3, #0
   2897c:	strd	r4, [r0, #56]	; 0x38
   28980:	ldr	r0, [sp, #36]	; 0x24
   28984:	mov	r1, #0
   28988:	movvs	r1, #1
   2898c:	cmp	r1, #0
   28990:	strd	r2, [r0, #64]	; 0x40
   28994:	bne	26740 <__assert_fail@plt+0x13fa4>
   28998:	ldrd	r2, [r9, #8]
   2899c:	rsbs	r2, r2, #0
   289a0:	rscs	r3, r3, #0
   289a4:	bvs	28a04 <__assert_fail@plt+0x16268>
   289a8:	cmp	r1, #0
   289ac:	ldr	r1, [sp, #36]	; 0x24
   289b0:	strd	r2, [r1, #40]	; 0x28
   289b4:	bne	26740 <__assert_fail@plt+0x13fa4>
   289b8:	ldr	r3, [r9, #16]
   289bc:	sub	r2, sl, #6
   289c0:	str	r3, [r1, #48]	; 0x30
   289c4:	sub	r3, r9, #168	; 0xa8
   289c8:	str	r2, [sp, #24]
   289cc:	str	r3, [sp, #96]	; 0x60
   289d0:	mov	sl, #14
   289d4:	mvn	r7, #92	; 0x5c
   289d8:	b	26e90 <__assert_fail@plt+0x146f4>
   289dc:	ldrd	r2, [r9, #8]
   289e0:	ldrd	r0, [r9, #-104]	; 0xffffff98
   289e4:	ldr	ip, [sp, #36]	; 0x24
   289e8:	ldrd	r4, [r9, #-56]	; 0xffffffc8
   289ec:	rsbs	r2, r2, #0
   289f0:	rscs	r3, r3, #0
   289f4:	strd	r0, [ip, #64]	; 0x40
   289f8:	strd	r4, [ip, #56]	; 0x38
   289fc:	mov	r1, #0
   28a00:	bvc	289a8 <__assert_fail@plt+0x1620c>
   28a04:	mov	r1, #1
   28a08:	b	289a8 <__assert_fail@plt+0x1620c>
   28a0c:	ldr	r4, [r9, #-208]	; 0xffffff30
   28a10:	ldr	r3, [sp, #36]	; 0x24
   28a14:	cmp	r4, #3
   28a18:	ldrb	r3, [r3, #181]	; 0xb5
   28a1c:	ble	28d34 <__assert_fail@plt+0x16598>
   28a20:	cmp	r3, #0
   28a24:	bne	28fc0 <__assert_fail@plt+0x16824>
   28a28:	sub	lr, r9, #224	; 0xe0
   28a2c:	ldr	r7, [sp, #36]	; 0x24
   28a30:	ldm	lr!, {r0, r1, r2, r3}
   28a34:	add	ip, r7, #32
   28a38:	sub	r4, sl, #10
   28a3c:	str	r4, [sp, #24]
   28a40:	stmia	ip!, {r0, r1, r2, r3}
   28a44:	sub	r3, r9, #280	; 0x118
   28a48:	ldm	lr, {r0, r1}
   28a4c:	ldrd	r4, [r9, #-104]	; 0xffffff98
   28a50:	str	r3, [sp, #96]	; 0x60
   28a54:	ldrd	r2, [r9, #8]
   28a58:	stm	ip, {r0, r1}
   28a5c:	mov	r0, r4
   28a60:	mov	r1, r5
   28a64:	strd	r2, [r7, #64]	; 0x40
   28a68:	strd	r0, [r7, #56]	; 0x38
   28a6c:	mov	sl, #14
   28a70:	mvn	r7, #92	; 0x5c
   28a74:	b	26e90 <__assert_fail@plt+0x146f4>
   28a78:	sub	ip, sl, #6
   28a7c:	ldrd	r2, [r9, #-104]	; 0xffffff98
   28a80:	str	ip, [sp, #24]
   28a84:	ldr	ip, [sp, #36]	; 0x24
   28a88:	ldrd	r0, [r9, #8]
   28a8c:	mov	sl, #14
   28a90:	strd	r2, [ip, #56]	; 0x38
   28a94:	sub	r3, r9, #168	; 0xa8
   28a98:	strd	r0, [ip, #64]	; 0x40
   28a9c:	str	r3, [sp, #96]	; 0x60
   28aa0:	mvn	r7, #92	; 0x5c
   28aa4:	b	26e90 <__assert_fail@plt+0x146f4>
   28aa8:	mov	r1, r9
   28aac:	ldrd	r2, [r9, #-48]	; 0xffffffd0
   28ab0:	b	284d4 <__assert_fail@plt+0x15d38>
   28ab4:	ldrd	r2, [r9, #8]
   28ab8:	sub	r1, sl, #4
   28abc:	str	r1, [sp, #24]
   28ac0:	sub	r1, r9, #112	; 0x70
   28ac4:	str	r1, [sp, #96]	; 0x60
   28ac8:	strd	r2, [r8, #-8]
   28acc:	mov	sl, #25
   28ad0:	mov	r7, #43	; 0x2b
   28ad4:	b	26e90 <__assert_fail@plt+0x146f4>
   28ad8:	mov	sl, #4
   28adc:	mvn	r7, #92	; 0x5c
   28ae0:	b	26e90 <__assert_fail@plt+0x146f4>
   28ae4:	ldr	r0, [sp, #16]
   28ae8:	str	r1, [sp, #40]	; 0x28
   28aec:	bl	1249c <strlen@plt>
   28af0:	ldr	r4, [sp, #24]
   28af4:	cmp	r0, #3
   28af8:	mov	r3, r0
   28afc:	str	r0, [sp, #24]
   28b00:	moveq	r3, #1
   28b04:	beq	28b24 <__assert_fail@plt+0x16388>
   28b08:	cmp	r3, #4
   28b0c:	ldr	r1, [sp, #40]	; 0x28
   28b10:	ldrbeq	r3, [sp, #1531]	; 0x5fb
   28b14:	movne	r3, r1
   28b18:	subeq	r3, r3, #46	; 0x2e
   28b1c:	clzeq	r3, r3
   28b20:	lsreq	r3, r3, #5
   28b24:	ldr	r8, [pc, #2760]	; 295f4 <__assert_fail@plt+0x16e58>
   28b28:	str	r7, [sp, #40]	; 0x28
   28b2c:	str	r4, [sp, #48]	; 0x30
   28b30:	ldr	r1, [pc, #2752]	; 295f8 <__assert_fail@plt+0x16e5c>
   28b34:	mov	r4, r8
   28b38:	mov	r7, r3
   28b3c:	ldr	r8, [sp, #16]
   28b40:	b	28b6c <__assert_fail@plt+0x163d0>
   28b44:	mov	r2, #3
   28b48:	mov	r0, r8
   28b4c:	bl	12730 <strncmp@plt>
   28b50:	clz	r0, r0
   28b54:	lsr	r0, r0, #5
   28b58:	cmp	r0, #0
   28b5c:	bne	28c38 <__assert_fail@plt+0x1649c>
   28b60:	ldr	r1, [r4, #12]!
   28b64:	cmp	r1, #0
   28b68:	beq	28c00 <__assert_fail@plt+0x16464>
   28b6c:	cmp	r7, #0
   28b70:	bne	28b44 <__assert_fail@plt+0x163a8>
   28b74:	mov	r0, r8
   28b78:	bl	120dc <strcmp@plt>
   28b7c:	clz	r0, r0
   28b80:	lsr	r0, r0, #5
   28b84:	b	28b58 <__assert_fail@plt+0x163bc>
   28b88:	mov	r2, #63	; 0x3f
   28b8c:	mov	r3, #2
   28b90:	str	r2, [sp, #16]
   28b94:	b	26c58 <__assert_fail@plt+0x144bc>
   28b98:	cmp	r3, #0
   28b9c:	beq	29528 <__assert_fail@plt+0x16d8c>
   28ba0:	ldrd	r0, [sp, #40]	; 0x28
   28ba4:	cmp	r0, #-2147483648	; 0x80000000
   28ba8:	beq	28b88 <__assert_fail@plt+0x163ec>
   28bac:	ldr	r2, [pc, #2632]	; 295fc <__assert_fail@plt+0x16e60>
   28bb0:	sub	r1, r0, #1
   28bb4:	sub	r2, r2, r3
   28bb8:	ldr	r3, [sp, #36]	; 0x24
   28bbc:	str	r2, [sp, #260]	; 0x104
   28bc0:	mov	r2, #276	; 0x114
   28bc4:	str	r4, [r3]
   28bc8:	str	r1, [sp, #256]	; 0x100
   28bcc:	mov	r3, #21
   28bd0:	str	r2, [sp, #16]
   28bd4:	b	26c58 <__assert_fail@plt+0x144bc>
   28bd8:	mov	r2, #63	; 0x3f
   28bdc:	ldr	sl, [sp, #48]	; 0x30
   28be0:	ldr	fp, [sp, #64]	; 0x40
   28be4:	mov	r3, #2
   28be8:	str	r2, [sp, #16]
   28bec:	b	26c58 <__assert_fail@plt+0x144bc>
   28bf0:	mov	r0, #2
   28bf4:	b	26744 <__assert_fail@plt+0x13fa8>
   28bf8:	mov	r0, #0
   28bfc:	b	26744 <__assert_fail@plt+0x13fa8>
   28c00:	ldr	r7, [sp, #40]	; 0x28
   28c04:	ldr	r1, [sp, #16]
   28c08:	str	r0, [sp, #40]	; 0x28
   28c0c:	ldr	r0, [sp, #36]	; 0x24
   28c10:	bl	25d7c <__assert_fail@plt+0x135e0>
   28c14:	ldr	r4, [sp, #48]	; 0x30
   28c18:	ldr	r3, [sp, #40]	; 0x28
   28c1c:	cmp	r0, #0
   28c20:	beq	28c60 <__assert_fail@plt+0x164c4>
   28c24:	ldr	r2, [r0, #8]
   28c28:	ldr	r3, [r0, #4]
   28c2c:	str	r3, [sp, #16]
   28c30:	asr	r3, r2, #31
   28c34:	b	26df8 <__assert_fail@plt+0x1465c>
   28c38:	ldr	r7, [sp, #40]	; 0x28
   28c3c:	mov	r8, r4
   28c40:	ldr	r4, [sp, #48]	; 0x30
   28c44:	ldr	r2, [r8, #8]
   28c48:	ldr	r3, [r8, #4]
   28c4c:	str	r3, [sp, #16]
   28c50:	asr	r3, r2, #31
   28c54:	b	26df8 <__assert_fail@plt+0x1465c>
   28c58:	mov	r8, #0
   28c5c:	b	26ae4 <__assert_fail@plt+0x14348>
   28c60:	ldr	r1, [pc, #2456]	; 29600 <__assert_fail@plt+0x16e64>
   28c64:	ldr	r0, [sp, #16]
   28c68:	str	r3, [sp, #40]	; 0x28
   28c6c:	bl	120dc <strcmp@plt>
   28c70:	ldr	r3, [sp, #40]	; 0x28
   28c74:	cmp	r0, #0
   28c78:	beq	26c34 <__assert_fail@plt+0x14498>
   28c7c:	ldr	r2, [pc, #2432]	; 29604 <__assert_fail@plt+0x16e68>
   28c80:	str	r4, [sp, #48]	; 0x30
   28c84:	mov	r8, r5
   28c88:	str	r2, [sp, #40]	; 0x28
   28c8c:	ldr	r1, [pc, #2420]	; 29608 <__assert_fail@plt+0x16e6c>
   28c90:	mov	r4, r2
   28c94:	mov	r5, r3
   28c98:	b	28ca8 <__assert_fail@plt+0x1650c>
   28c9c:	ldr	r1, [r4, #12]!
   28ca0:	cmp	r1, #0
   28ca4:	beq	29110 <__assert_fail@plt+0x16974>
   28ca8:	ldr	r0, [sp, #16]
   28cac:	bl	120dc <strcmp@plt>
   28cb0:	cmp	r0, #0
   28cb4:	bne	28c9c <__assert_fail@plt+0x16500>
   28cb8:	mov	r5, r8
   28cbc:	b	28c3c <__assert_fail@plt+0x164a0>
   28cc0:	ldrd	r2, [sp, #96]	; 0x60
   28cc4:	cmp	r2, #0
   28cc8:	sbcs	r3, r3, #0
   28ccc:	bge	27958 <__assert_fail@plt+0x151bc>
   28cd0:	mov	r2, #100	; 0x64
   28cd4:	mov	r3, #0
   28cd8:	mov	r0, r4
   28cdc:	mov	r1, r5
   28ce0:	bl	43cf4 <fts_children@@Base+0x12258>
   28ce4:	mov	r2, #100	; 0x64
   28ce8:	mov	r3, #0
   28cec:	mov	lr, r0
   28cf0:	mov	ip, r1
   28cf4:	mov	r0, r4
   28cf8:	mov	r1, r5
   28cfc:	mov	r4, lr
   28d00:	mov	r5, ip
   28d04:	bl	43cf4 <fts_children@@Base+0x12258>
   28d08:	lsl	r1, r5, #4
   28d0c:	lsl	r0, r4, #4
   28d10:	orr	r1, r1, r4, lsr #28
   28d14:	subs	r4, r0, r4
   28d18:	sbc	r5, r1, r5
   28d1c:	lsl	r1, r4, #2
   28d20:	lsl	r5, r5, #2
   28d24:	orr	r5, r5, r4, lsr #30
   28d28:	adds	r0, r1, r2
   28d2c:	adc	r5, r5, r3
   28d30:	b	279a8 <__assert_fail@plt+0x1520c>
   28d34:	cmp	r3, #0
   28d38:	ldrd	r2, [r9, #-216]	; 0xffffff28
   28d3c:	mov	r4, r2
   28d40:	mov	r5, r3
   28d44:	bne	28f94 <__assert_fail@plt+0x167f8>
   28d48:	sub	ip, sl, #10
   28d4c:	str	ip, [sp, #24]
   28d50:	ldr	ip, [sp, #36]	; 0x24
   28d54:	mov	lr, r9
   28d58:	mov	sl, #14
   28d5c:	strd	r4, [ip, #56]	; 0x38
   28d60:	ldm	lr!, {r0, r1, r2, r3}
   28d64:	mov	r4, ip
   28d68:	mov	r7, r4
   28d6c:	ldrd	r4, [r9, #-104]	; 0xffffff98
   28d70:	add	ip, ip, #32
   28d74:	strd	r4, [r7, #64]	; 0x40
   28d78:	stmia	ip!, {r0, r1, r2, r3}
   28d7c:	sub	r3, r9, #280	; 0x118
   28d80:	ldm	lr, {r0, r1}
   28d84:	str	r3, [sp, #96]	; 0x60
   28d88:	mvn	r7, #92	; 0x5c
   28d8c:	stm	ip, {r0, r1}
   28d90:	b	26e90 <__assert_fail@plt+0x146f4>
   28d94:	ldrd	r2, [sp, #96]	; 0x60
   28d98:	cmp	r2, #0
   28d9c:	sbcs	r3, r3, #0
   28da0:	bge	2852c <__assert_fail@plt+0x15d90>
   28da4:	mov	r2, #100	; 0x64
   28da8:	mov	r3, #0
   28dac:	mov	r0, r4
   28db0:	mov	r1, r5
   28db4:	bl	43cf4 <fts_children@@Base+0x12258>
   28db8:	mov	r2, #100	; 0x64
   28dbc:	mov	r3, #0
   28dc0:	mov	lr, r0
   28dc4:	mov	ip, r1
   28dc8:	mov	r0, r4
   28dcc:	mov	r1, r5
   28dd0:	mov	r4, lr
   28dd4:	mov	r5, ip
   28dd8:	bl	43cf4 <fts_children@@Base+0x12258>
   28ddc:	lsl	r1, r5, #4
   28de0:	lsl	r0, r4, #4
   28de4:	orr	r1, r1, r4, lsr #28
   28de8:	subs	r4, r0, r4
   28dec:	sbc	r5, r1, r5
   28df0:	lsl	r1, r4, #2
   28df4:	lsl	r5, r5, #2
   28df8:	orr	r5, r5, r4, lsr #30
   28dfc:	adds	r0, r1, r2
   28e00:	adc	r5, r5, r3
   28e04:	b	2857c <__assert_fail@plt+0x15de0>
   28e08:	subs	ip, r3, r2
   28e0c:	ldrd	r2, [sp, #176]	; 0xb0
   28e10:	mov	r7, #0
   28e14:	movvs	r7, #1
   28e18:	subs	r0, r2, r4
   28e1c:	sbcs	r1, r3, r5
   28e20:	ldr	r3, [sp, #36]	; 0x24
   28e24:	ldrd	r4, [sp, #184]	; 0xb8
   28e28:	strd	r0, [sp, #176]	; 0xb0
   28e2c:	str	ip, [r3, #144]	; 0x90
   28e30:	ldrd	r2, [sp, #168]	; 0xa8
   28e34:	mov	lr, #0
   28e38:	movvs	lr, #1
   28e3c:	subs	r0, r4, r2
   28e40:	sbcs	r1, r5, r3
   28e44:	ldrd	r2, [sp, #176]	; 0xb0
   28e48:	strd	r0, [sp, #168]	; 0xa8
   28e4c:	ldr	r1, [sp, #36]	; 0x24
   28e50:	mov	ip, #0
   28e54:	movvs	ip, #1
   28e58:	strd	r2, [r1, #136]	; 0x88
   28e5c:	ldrd	r0, [sp, #160]	; 0xa0
   28e60:	ldrd	r2, [sp, #192]	; 0xc0
   28e64:	subs	r4, r2, r0
   28e68:	sbcs	r5, r3, r1
   28e6c:	ldrd	r0, [sp, #168]	; 0xa8
   28e70:	ldr	r3, [sp, #36]	; 0x24
   28e74:	strd	r4, [sp, #176]	; 0xb0
   28e78:	ldrd	r4, [sp, #200]	; 0xc8
   28e7c:	strd	r0, [r3, #128]	; 0x80
   28e80:	ldrd	r0, [sp, #152]	; 0x98
   28e84:	mov	r3, #0
   28e88:	str	r3, [sp, #160]	; 0xa0
   28e8c:	movvs	r3, #1
   28e90:	strvs	r3, [sp, #160]	; 0xa0
   28e94:	subs	r2, r4, r0
   28e98:	sbcs	r3, r5, r1
   28e9c:	ldrd	r0, [sp, #176]	; 0xb0
   28ea0:	strd	r2, [sp, #168]	; 0xa8
   28ea4:	ldr	r3, [sp, #36]	; 0x24
   28ea8:	ldrd	r4, [sp, #96]	; 0x60
   28eac:	strd	r0, [r3, #120]	; 0x78
   28eb0:	ldrd	r0, [sp, #208]	; 0xd0
   28eb4:	mov	r3, #0
   28eb8:	str	r3, [sp, #152]	; 0x98
   28ebc:	movvs	r3, #1
   28ec0:	strvs	r3, [sp, #152]	; 0x98
   28ec4:	subs	r2, r0, r4
   28ec8:	sbcs	r3, r1, r5
   28ecc:	ldr	r1, [sp, #36]	; 0x24
   28ed0:	strd	r2, [sp, #176]	; 0xb0
   28ed4:	ldrd	r2, [sp, #168]	; 0xa8
   28ed8:	strd	r2, [r1, #112]	; 0x70
   28edc:	mov	r3, #0
   28ee0:	str	r3, [sp, #96]	; 0x60
   28ee4:	ldrd	r4, [sp, #216]	; 0xd8
   28ee8:	ldrd	r0, [sp, #24]
   28eec:	movvs	r3, #1
   28ef0:	strvs	r3, [sp, #96]	; 0x60
   28ef4:	subs	r2, r4, r0
   28ef8:	sbcs	r3, r5, r1
   28efc:	mov	r4, r2
   28f00:	mov	r5, r3
   28f04:	ldr	r1, [sp, #36]	; 0x24
   28f08:	ldrd	r2, [sp, #176]	; 0xb0
   28f0c:	mov	r0, r4
   28f10:	strd	r2, [r1, #104]	; 0x68
   28f14:	orr	r3, r7, lr
   28f18:	orr	ip, r3, ip
   28f1c:	ldr	r3, [sp, #160]	; 0xa0
   28f20:	ldr	r1, [sp, #152]	; 0x98
   28f24:	orr	r3, ip, r3
   28f28:	orr	r3, r3, r1
   28f2c:	ldr	r1, [sp, #96]	; 0x60
   28f30:	mov	r2, #0
   28f34:	orr	r3, r3, r1
   28f38:	movvs	r2, #1
   28f3c:	orr	r2, r3, r2
   28f40:	ldr	r3, [sp, #36]	; 0x24
   28f44:	mov	r1, r5
   28f48:	strd	r0, [r3, #96]	; 0x60
   28f4c:	b	287e0 <__assert_fail@plt+0x16044>
   28f50:	adds	r2, r2, r4
   28f54:	adcs	r3, r3, r5
   28f58:	mov	r0, r2
   28f5c:	mov	r5, r3
   28f60:	movvs	r1, #1
   28f64:	movvc	r1, #0
   28f68:	b	28574 <__assert_fail@plt+0x15dd8>
   28f6c:	adds	r2, r2, r4
   28f70:	adcs	r3, r3, r5
   28f74:	mov	r0, r2
   28f78:	mov	r5, r3
   28f7c:	movvs	r1, #1
   28f80:	movvc	r1, #0
   28f84:	b	279a0 <__assert_fail@plt+0x15204>
   28f88:	mov	r2, #0
   28f8c:	mov	r3, r2
   28f90:	b	28ddc <__assert_fail@plt+0x16640>
   28f94:	mov	r2, #5
   28f98:	ldr	r1, [pc, #1644]	; 2960c <__assert_fail@plt+0x16e70>
   28f9c:	mov	r0, #0
   28fa0:	bl	1222c <dcgettext@plt>
   28fa4:	mov	r2, r4
   28fa8:	mov	r3, r5
   28fac:	bl	25cb8 <__assert_fail@plt+0x1351c>
   28fb0:	b	28d48 <__assert_fail@plt+0x165ac>
   28fb4:	mov	r2, #0
   28fb8:	mov	r3, r2
   28fbc:	b	28d08 <__assert_fail@plt+0x1656c>
   28fc0:	asr	r5, r4, #31
   28fc4:	mov	r2, #5
   28fc8:	ldr	r1, [pc, #1600]	; 29610 <__assert_fail@plt+0x16e74>
   28fcc:	mov	r0, #0
   28fd0:	bl	1222c <dcgettext@plt>
   28fd4:	ldrd	r2, [r9, #-216]	; 0xffffff28
   28fd8:	strd	r4, [sp]
   28fdc:	bl	25cb8 <__assert_fail@plt+0x1351c>
   28fe0:	b	28a28 <__assert_fail@plt+0x1628c>
   28fe4:	ldr	r1, [r9, #4]
   28fe8:	ldr	r7, [r9]
   28fec:	str	r1, [sp, #48]	; 0x30
   28ff0:	mov	lr, ip
   28ff4:	mov	r1, r0
   28ff8:	umull	r4, r5, r0, r3
   28ffc:	cmp	lr, #0
   29000:	strd	r4, [sp, #24]
   29004:	umull	r4, r5, r1, lr
   29008:	bge	29018 <__assert_fail@plt+0x1687c>
   2900c:	mov	lr, #0
   29010:	subs	r4, r4, lr
   29014:	sbc	r5, r5, r1
   29018:	cmp	r1, #0
   2901c:	bge	2902c <__assert_fail@plt+0x16890>
   29020:	ldr	r1, [sp, #48]	; 0x30
   29024:	subs	r4, r4, r7
   29028:	sbc	r5, r5, r1
   2902c:	ldr	r1, [sp, #28]
   29030:	mov	lr, #0
   29034:	adds	r1, r4, r1
   29038:	adc	lr, r5, lr
   2903c:	cmp	lr, r1, asr #31
   29040:	bne	29670 <__assert_fail@plt+0x16ed4>
   29044:	ldr	r3, [sp, #24]
   29048:	str	r1, [sp, #148]	; 0x94
   2904c:	str	r3, [sp, #144]	; 0x90
   29050:	b	282ac <__assert_fail@plt+0x15b10>
   29054:	cmp	r1, ip
   29058:	bne	294c8 <__assert_fail@plt+0x16d2c>
   2905c:	ldr	r1, [r9, #-44]	; 0xffffffd4
   29060:	ldr	r7, [r9, #-48]	; 0xffffffd0
   29064:	str	r1, [sp, #48]	; 0x30
   29068:	mov	lr, r2
   2906c:	mov	r1, r3
   29070:	b	28ff8 <__assert_fail@plt+0x1685c>
   29074:	ldr	r2, [r9, #4]
   29078:	ldr	r5, [r9]
   2907c:	str	r2, [sp, #64]	; 0x40
   29080:	mov	lr, ip
   29084:	mov	r2, r4
   29088:	umull	r0, r1, r4, r3
   2908c:	cmp	lr, #0
   29090:	strd	r0, [sp, #40]	; 0x28
   29094:	umull	r0, r1, r2, lr
   29098:	strd	r0, [sp, #24]
   2909c:	bge	290bc <__assert_fail@plt+0x16920>
   290a0:	mov	lr, #0
   290a4:	subs	r1, r0, lr
   290a8:	str	r1, [sp, #24]
   290ac:	ldr	r1, [sp, #28]
   290b0:	mov	lr, r2
   290b4:	sbc	r1, r1, r2
   290b8:	str	r1, [sp, #28]
   290bc:	cmp	r2, #0
   290c0:	bge	290e0 <__assert_fail@plt+0x16944>
   290c4:	ldr	r2, [sp, #24]
   290c8:	ldr	r1, [sp, #28]
   290cc:	subs	r2, r2, r5
   290d0:	str	r2, [sp, #24]
   290d4:	ldr	r2, [sp, #64]	; 0x40
   290d8:	sbc	r2, r1, r2
   290dc:	str	r2, [sp, #28]
   290e0:	ldr	r1, [sp, #24]
   290e4:	ldr	r2, [sp, #44]	; 0x2c
   290e8:	mov	r0, #0
   290ec:	adds	r2, r1, r2
   290f0:	ldr	r1, [sp, #28]
   290f4:	adc	r0, r1, r0
   290f8:	cmp	r0, r2, asr #31
   290fc:	bne	29460 <__assert_fail@plt+0x16cc4>
   29100:	ldr	r3, [sp, #40]	; 0x28
   29104:	str	r2, [sp, #132]	; 0x84
   29108:	str	r3, [sp, #128]	; 0x80
   2910c:	b	27628 <__assert_fail@plt+0x14e8c>
   29110:	ldr	r2, [sp, #24]
   29114:	ldr	r0, [sp, #16]
   29118:	sub	r2, r2, #1
   2911c:	mov	r3, r5
   29120:	mov	r5, r8
   29124:	add	r8, r0, r2
   29128:	ldrb	r0, [r0, r2]
   2912c:	ldr	r4, [sp, #48]	; 0x30
   29130:	cmp	r0, #83	; 0x53
   29134:	beq	29254 <__assert_fail@plt+0x16ab8>
   29138:	str	r5, [sp, #40]	; 0x28
   2913c:	ldr	r8, [pc, #1232]	; 29614 <__assert_fail@plt+0x16e78>
   29140:	ldr	r1, [pc, #1232]	; 29618 <__assert_fail@plt+0x16e7c>
   29144:	mov	r5, r3
   29148:	b	29158 <__assert_fail@plt+0x169bc>
   2914c:	ldr	r1, [r8, #12]!
   29150:	cmp	r1, #0
   29154:	beq	292b0 <__assert_fail@plt+0x16b14>
   29158:	ldr	r0, [sp, #16]
   2915c:	bl	120dc <strcmp@plt>
   29160:	cmp	r0, #0
   29164:	bne	2914c <__assert_fail@plt+0x169b0>
   29168:	ldr	r2, [r8, #8]
   2916c:	ldr	r3, [r8, #4]
   29170:	ldr	r5, [sp, #40]	; 0x28
   29174:	str	r3, [sp, #16]
   29178:	asr	r3, r2, #31
   2917c:	b	26df8 <__assert_fail@plt+0x1465c>
   29180:	ldr	r1, [r9, #4]
   29184:	ldr	r7, [r9]
   29188:	str	r1, [sp, #48]	; 0x30
   2918c:	mov	lr, ip
   29190:	mov	r1, r0
   29194:	umull	r4, r5, r0, r3
   29198:	cmp	lr, #0
   2919c:	strd	r4, [sp, #24]
   291a0:	umull	r4, r5, r1, lr
   291a4:	bge	291b4 <__assert_fail@plt+0x16a18>
   291a8:	mov	lr, #0
   291ac:	subs	r4, r4, lr
   291b0:	sbc	r5, r5, r1
   291b4:	cmp	r1, #0
   291b8:	bge	291c8 <__assert_fail@plt+0x16a2c>
   291bc:	ldr	r1, [sp, #48]	; 0x30
   291c0:	subs	r4, r4, r7
   291c4:	sbc	r5, r5, r1
   291c8:	ldr	r1, [sp, #28]
   291cc:	mov	lr, #0
   291d0:	adds	r1, r4, r1
   291d4:	adc	lr, r5, lr
   291d8:	cmp	lr, r1, asr #31
   291dc:	bne	29440 <__assert_fail@plt+0x16ca4>
   291e0:	ldr	r3, [sp, #24]
   291e4:	str	r1, [sp, #140]	; 0x8c
   291e8:	str	r3, [sp, #136]	; 0x88
   291ec:	b	27228 <__assert_fail@plt+0x14a8c>
   291f0:	cmp	r1, ip
   291f4:	bne	29688 <__assert_fail@plt+0x16eec>
   291f8:	ldr	r1, [r9, #-44]	; 0xffffffd4
   291fc:	ldr	r7, [r9, #-48]	; 0xffffffd0
   29200:	str	r1, [sp, #48]	; 0x30
   29204:	mov	lr, r2
   29208:	mov	r1, r3
   2920c:	b	29194 <__assert_fail@plt+0x169f8>
   29210:	cmp	r2, ip
   29214:	bne	29484 <__assert_fail@plt+0x16ce8>
   29218:	ldr	r2, [r9, #-52]	; 0xffffffcc
   2921c:	ldr	r5, [r9, #-56]	; 0xffffffc8
   29220:	str	r2, [sp, #64]	; 0x40
   29224:	mov	lr, r7
   29228:	mov	r2, r3
   2922c:	b	29088 <__assert_fail@plt+0x168ec>
   29230:	ldr	r1, [sp, #36]	; 0x24
   29234:	add	r3, r2, #1
   29238:	str	r3, [r1]
   2923c:	ldrb	r3, [r2]
   29240:	cmp	r3, #0
   29244:	str	r3, [sp, #16]
   29248:	ldreq	r3, [sp, #16]
   2924c:	bne	26c50 <__assert_fail@plt+0x144b4>
   29250:	b	26654 <__assert_fail@plt+0x13eb8>
   29254:	ldr	ip, [sp, #16]
   29258:	ldr	r0, [pc, #936]	; 29608 <__assert_fail@plt+0x16e6c>
   2925c:	str	r5, [sp, #48]	; 0x30
   29260:	strb	r1, [ip, r2]
   29264:	mov	r5, r3
   29268:	mov	r1, r0
   2926c:	b	29284 <__assert_fail@plt+0x16ae8>
   29270:	ldr	r3, [sp, #40]	; 0x28
   29274:	ldr	r1, [r3, #12]!
   29278:	cmp	r1, #0
   2927c:	str	r3, [sp, #40]	; 0x28
   29280:	beq	29400 <__assert_fail@plt+0x16c64>
   29284:	ldr	r0, [sp, #16]
   29288:	bl	120dc <strcmp@plt>
   2928c:	cmp	r0, #0
   29290:	bne	29270 <__assert_fail@plt+0x16ad4>
   29294:	ldr	r3, [sp, #40]	; 0x28
   29298:	ldr	r5, [sp, #48]	; 0x30
   2929c:	ldr	r2, [r3, #8]
   292a0:	ldr	r3, [r3, #4]
   292a4:	str	r3, [sp, #16]
   292a8:	asr	r3, r2, #31
   292ac:	b	26df8 <__assert_fail@plt+0x1465c>
   292b0:	ldr	r2, [sp, #24]
   292b4:	mov	r3, r5
   292b8:	cmp	r2, #1
   292bc:	ldr	r5, [sp, #40]	; 0x28
   292c0:	ldrb	r2, [sp, #1528]	; 0x5f8
   292c4:	beq	29580 <__assert_fail@plt+0x16de4>
   292c8:	cmp	r2, #0
   292cc:	ldrne	r1, [sp, #16]
   292d0:	movne	r0, r1
   292d4:	beq	29310 <__assert_fail@plt+0x16b74>
   292d8:	cmp	r2, #46	; 0x2e
   292dc:	ldrb	r2, [r0, #1]!
   292e0:	addne	r1, r1, #1
   292e4:	moveq	r3, #1
   292e8:	cmp	r2, #0
   292ec:	strb	r2, [r1]
   292f0:	bne	292d8 <__assert_fail@plt+0x16b3c>
   292f4:	cmp	r3, #0
   292f8:	beq	29310 <__assert_fail@plt+0x16b74>
   292fc:	ldr	r1, [sp, #16]
   29300:	ldr	r0, [sp, #36]	; 0x24
   29304:	bl	25d7c <__assert_fail@plt+0x135e0>
   29308:	cmp	r0, #0
   2930c:	bne	28c24 <__assert_fail@plt+0x16488>
   29310:	ldr	r3, [sp, #36]	; 0x24
   29314:	ldrb	r3, [r3, #181]	; 0xb5
   29318:	cmp	r3, #0
   2931c:	beq	28b88 <__assert_fail@plt+0x163ec>
   29320:	mov	r2, #5
   29324:	ldr	r1, [pc, #752]	; 2961c <__assert_fail@plt+0x16e80>
   29328:	mov	r0, #0
   2932c:	bl	1222c <dcgettext@plt>
   29330:	ldr	r1, [sp, #16]
   29334:	bl	25cb8 <__assert_fail@plt+0x1351c>
   29338:	mov	r3, #63	; 0x3f
   2933c:	str	r3, [sp, #16]
   29340:	mov	r3, #2
   29344:	b	26c58 <__assert_fail@plt+0x144bc>
   29348:	mov	r1, #60	; 0x3c
   2934c:	cmp	r5, #0
   29350:	umull	r2, r3, r4, r1
   29354:	strd	r2, [sp, #152]	; 0x98
   29358:	umull	r2, r3, r1, r5
   2935c:	strd	r2, [sp, #24]
   29360:	bge	29378 <__assert_fail@plt+0x16bdc>
   29364:	subs	r3, r2, lr
   29368:	str	r3, [sp, #24]
   2936c:	ldr	r3, [sp, #28]
   29370:	sbc	r3, r3, r1
   29374:	str	r3, [sp, #28]
   29378:	ldr	r3, [sp, #24]
   2937c:	ldr	r1, [sp, #156]	; 0x9c
   29380:	mov	r2, #0
   29384:	adds	r1, r3, r1
   29388:	ldr	r3, [sp, #28]
   2938c:	adc	r3, r3, r2
   29390:	cmp	r3, r1, asr #31
   29394:	bne	295c0 <__assert_fail@plt+0x16e24>
   29398:	ldr	r2, [sp, #152]	; 0x98
   2939c:	mov	r3, r1
   293a0:	b	28548 <__assert_fail@plt+0x15dac>
   293a4:	mov	r1, #60	; 0x3c
   293a8:	cmp	r5, #0
   293ac:	umull	r2, r3, r4, r1
   293b0:	strd	r2, [sp, #152]	; 0x98
   293b4:	umull	r2, r3, r1, r5
   293b8:	strd	r2, [sp, #24]
   293bc:	bge	293d4 <__assert_fail@plt+0x16c38>
   293c0:	subs	r3, r2, lr
   293c4:	str	r3, [sp, #24]
   293c8:	ldr	r3, [sp, #28]
   293cc:	sbc	r3, r3, r1
   293d0:	str	r3, [sp, #28]
   293d4:	ldr	r3, [sp, #24]
   293d8:	ldr	r1, [sp, #156]	; 0x9c
   293dc:	mov	r2, #0
   293e0:	adds	r1, r3, r1
   293e4:	ldr	r3, [sp, #28]
   293e8:	adc	r3, r3, r2
   293ec:	cmp	r3, r1, asr #31
   293f0:	bne	29414 <__assert_fail@plt+0x16c78>
   293f4:	ldr	r2, [sp, #152]	; 0x98
   293f8:	mov	r3, r1
   293fc:	b	27974 <__assert_fail@plt+0x151d8>
   29400:	mov	r2, #83	; 0x53
   29404:	mov	r3, r5
   29408:	strb	r2, [r8]
   2940c:	ldr	r5, [sp, #48]	; 0x30
   29410:	b	29138 <__assert_fail@plt+0x1699c>
   29414:	lsl	r3, r5, #4
   29418:	lsl	r2, r4, #4
   2941c:	subs	r2, r2, r4
   29420:	orr	r3, r3, r4, lsr #28
   29424:	sbc	r3, r3, r5
   29428:	lsl	r1, r2, #2
   2942c:	lsl	r3, r3, #2
   29430:	orr	r3, r3, r2, lsr #30
   29434:	mov	lr, #1
   29438:	mov	r2, r1
   2943c:	b	27974 <__assert_fail@plt+0x151d8>
   29440:	mul	ip, r0, ip
   29444:	umull	r0, r1, r0, r3
   29448:	mla	r3, r3, r2, ip
   2944c:	add	r1, r3, r1
   29450:	strd	r0, [sp, #136]	; 0x88
   29454:	mov	r3, #1
   29458:	str	r3, [sp, #40]	; 0x28
   2945c:	b	27228 <__assert_fail@plt+0x14a8c>
   29460:	mul	ip, r4, ip
   29464:	umull	r4, r5, r4, r3
   29468:	mla	r3, r3, r7, ip
   2946c:	add	r5, r3, r5
   29470:	strd	r4, [sp, #128]	; 0x80
   29474:	mov	r3, #1
   29478:	str	r3, [sp, #48]	; 0x30
   2947c:	b	27628 <__assert_fail@plt+0x14e8c>
   29480:	bl	12244 <__stack_chk_fail@plt>
   29484:	mul	r2, r4, ip
   29488:	umull	r4, r5, r4, r3
   2948c:	mla	r2, r3, r7, r2
   29490:	add	r3, r7, #1
   29494:	add	r5, r2, r5
   29498:	cmp	r3, #1
   2949c:	strd	r4, [sp, #128]	; 0x80
   294a0:	bhi	29474 <__assert_fail@plt+0x16cd8>
   294a4:	add	r3, ip, #1
   294a8:	cmp	r3, #1
   294ac:	bhi	29474 <__assert_fail@plt+0x16cd8>
   294b0:	cmp	r7, ip
   294b4:	bne	296cc <__assert_fail@plt+0x16f30>
   294b8:	cmp	r4, #1
   294bc:	sbcs	r3, r5, #0
   294c0:	bge	27628 <__assert_fail@plt+0x14e8c>
   294c4:	b	29474 <__assert_fail@plt+0x16cd8>
   294c8:	mul	r1, r0, ip
   294cc:	umull	r4, r5, r0, r3
   294d0:	mla	r1, r3, r2, r1
   294d4:	add	r3, r2, #1
   294d8:	add	r5, r1, r5
   294dc:	cmp	r3, #1
   294e0:	strd	r4, [sp, #144]	; 0x90
   294e4:	bhi	29508 <__assert_fail@plt+0x16d6c>
   294e8:	add	r3, ip, #1
   294ec:	cmp	r3, #1
   294f0:	bhi	29508 <__assert_fail@plt+0x16d6c>
   294f4:	cmp	r2, ip
   294f8:	bne	29514 <__assert_fail@plt+0x16d78>
   294fc:	cmp	r4, #1
   29500:	sbcs	r3, r5, #0
   29504:	bge	282ac <__assert_fail@plt+0x15b10>
   29508:	mov	r3, #1
   2950c:	str	r3, [sp, #40]	; 0x28
   29510:	b	282ac <__assert_fail@plt+0x15b10>
   29514:	ldrd	r2, [sp, #144]	; 0x90
   29518:	cmp	r2, #0
   2951c:	sbcs	r3, r3, #0
   29520:	blt	282ac <__assert_fail@plt+0x15b10>
   29524:	b	29508 <__assert_fail@plt+0x16d6c>
   29528:	ldr	r2, [sp, #40]	; 0x28
   2952c:	str	r3, [sp, #260]	; 0x104
   29530:	ldr	r3, [sp, #36]	; 0x24
   29534:	str	r2, [sp, #256]	; 0x100
   29538:	mov	r2, #276	; 0x114
   2953c:	str	r4, [r3]
   29540:	str	r2, [sp, #16]
   29544:	mov	r3, #21
   29548:	b	26c58 <__assert_fail@plt+0x144bc>
   2954c:	add	r5, fp, r5
   29550:	ldrsh	r2, [sp, #24]
   29554:	ldrb	r3, [r5, #2700]	; 0xa8c
   29558:	sub	r1, sl, r2, lsl #1
   2955c:	sub	sl, r3, #28
   29560:	rsb	r2, r2, r2, lsl #3
   29564:	add	r3, fp, sl
   29568:	add	r3, r3, #2784	; 0xae0
   2956c:	sub	r2, r9, r2, lsl #3
   29570:	str	r1, [sp, #24]
   29574:	str	r2, [sp, #96]	; 0x60
   29578:	ldrsb	r7, [r3, #8]
   2957c:	b	26e90 <__assert_fail@plt+0x146f4>
   29580:	cmp	r2, #65	; 0x41
   29584:	ldrne	r1, [pc, #148]	; 29620 <__assert_fail@plt+0x16e84>
   29588:	beq	2962c <__assert_fail@plt+0x16e90>
   2958c:	ldr	ip, [r1, #12]
   29590:	mov	r0, r1
   29594:	cmp	ip, #0
   29598:	beq	292c8 <__assert_fail@plt+0x16b2c>
   2959c:	ldrb	ip, [ip]
   295a0:	add	r1, r1, #12
   295a4:	cmp	ip, r2
   295a8:	bne	2958c <__assert_fail@plt+0x16df0>
   295ac:	ldr	r2, [r0, #20]
   295b0:	ldr	r3, [r0, #16]
   295b4:	str	r3, [sp, #16]
   295b8:	asr	r3, r2, #31
   295bc:	b	26df8 <__assert_fail@plt+0x1465c>
   295c0:	lsl	r3, r5, #4
   295c4:	lsl	r2, r4, #4
   295c8:	subs	r2, r2, r4
   295cc:	orr	r3, r3, r4, lsr #28
   295d0:	sbc	r3, r3, r5
   295d4:	lsl	r1, r2, #2
   295d8:	lsl	r3, r3, #2
   295dc:	orr	r3, r3, r2, lsr #30
   295e0:	mov	lr, #1
   295e4:	mov	r2, r1
   295e8:	b	28548 <__assert_fail@plt+0x15dac>
   295ec:	andeq	r9, r4, r4, asr r4
   295f0:	andeq	r9, r4, r0, asr r4
   295f4:	andeq	r8, r4, r4, asr fp
   295f8:	andeq	r9, r4, r0, lsl #8
   295fc:	blcc	fe6dbe04 <stdout@@GLIBC_2.4+0xfe67f8c0>
   29600:	andeq	r9, r4, ip, lsl r4
   29604:	andeq	r8, r4, r0, lsl #25
   29608:	andeq	r9, r4, r8, lsl #8
   2960c:	andeq	r9, r4, ip, asr #9
   29610:	muleq	r4, r0, r4
   29614:	andeq	r8, r4, r4, lsl #26
   29618:	andeq	r9, r4, r0, lsl r4
   2961c:	andeq	r9, r4, r0, lsr #8
   29620:	andeq	r8, r4, r0, lsl #28
   29624:	andeq	r0, r0, r1, lsl r1
   29628:			; <UNDEFINED> instruction: 0xfffff1f0
   2962c:	ldr	r1, [pc, #-16]	; 29624 <__assert_fail@plt+0x16e88>
   29630:	ldr	r2, [pc, #-16]	; 29628 <__assert_fail@plt+0x16e8c>
   29634:	mvn	r3, #0
   29638:	str	r1, [sp, #16]
   2963c:	add	r1, sp, #256	; 0x100
   29640:	strd	r2, [r1]
   29644:	b	26c4c <__assert_fail@plt+0x144b0>
   29648:	lsl	r1, sl, #2
   2964c:	lsl	lr, fp, #2
   29650:	adds	r0, r1, sl
   29654:	orr	lr, lr, sl, lsr #30
   29658:	adc	lr, lr, fp
   2965c:	adds	r0, r0, r0
   29660:	adc	lr, lr, lr
   29664:	mov	r1, lr
   29668:	mov	lr, #1
   2966c:	b	26c78 <__assert_fail@plt+0x144dc>
   29670:	mul	ip, r0, ip
   29674:	umull	r0, r1, r0, r3
   29678:	mla	ip, r3, r2, ip
   2967c:	add	r1, ip, r1
   29680:	strd	r0, [sp, #144]	; 0x90
   29684:	b	29508 <__assert_fail@plt+0x16d6c>
   29688:	mul	r1, r0, ip
   2968c:	umull	r4, r5, r0, r3
   29690:	mla	r1, r3, r2, r1
   29694:	add	r3, r2, #1
   29698:	add	r5, r1, r5
   2969c:	cmp	r3, #1
   296a0:	strd	r4, [sp, #136]	; 0x88
   296a4:	bhi	29454 <__assert_fail@plt+0x16cb8>
   296a8:	add	r3, ip, #1
   296ac:	cmp	r3, #1
   296b0:	bhi	29454 <__assert_fail@plt+0x16cb8>
   296b4:	cmp	r2, ip
   296b8:	bne	296e0 <__assert_fail@plt+0x16f44>
   296bc:	cmp	r4, #1
   296c0:	sbcs	r3, r5, #0
   296c4:	bge	27228 <__assert_fail@plt+0x14a8c>
   296c8:	b	29454 <__assert_fail@plt+0x16cb8>
   296cc:	ldrd	r2, [sp, #128]	; 0x80
   296d0:	cmp	r2, #0
   296d4:	sbcs	r3, r3, #0
   296d8:	blt	27628 <__assert_fail@plt+0x14e8c>
   296dc:	b	29474 <__assert_fail@plt+0x16cd8>
   296e0:	ldrd	r2, [sp, #136]	; 0x88
   296e4:	cmp	r2, #0
   296e8:	sbcs	r3, r3, #0
   296ec:	blt	27228 <__assert_fail@plt+0x14a8c>
   296f0:	b	29454 <__assert_fail@plt+0x16cb8>
   296f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   296f8:	sub	sp, sp, #1004	; 0x3ec
   296fc:	mov	ip, r1
   29700:	str	r1, [sp, #48]	; 0x30
   29704:	ldr	r1, [pc, #1364]	; 29c60 <__assert_fail@plt+0x174c4>
   29708:	str	r0, [sp, #68]	; 0x44
   2970c:	mov	r0, ip
   29710:	ldr	r1, [r1]
   29714:	mov	r7, r2
   29718:	mov	r5, r3
   2971c:	str	r1, [sp, #996]	; 0x3e4
   29720:	bl	1249c <strlen@plt>
   29724:	ldr	r3, [sp, #1040]	; 0x410
   29728:	cmp	r7, #0
   2972c:	str	r3, [sp, #56]	; 0x38
   29730:	ldr	r3, [sp, #1044]	; 0x414
   29734:	str	r3, [sp, #64]	; 0x40
   29738:	str	r0, [sp, #72]	; 0x48
   2973c:	beq	2a248 <__assert_fail@plt+0x17aac>
   29740:	ldr	fp, [r7]
   29744:	ldr	r6, [r7, #4]
   29748:	ldr	r2, [sp, #48]	; 0x30
   2974c:	mov	r4, r2
   29750:	ldrb	r3, [r2], #1
   29754:	cmp	r3, #9
   29758:	bcc	2976c <__assert_fail@plt+0x16fd0>
   2975c:	cmp	r3, #13
   29760:	bls	2974c <__assert_fail@plt+0x16fb0>
   29764:	cmp	r3, #32
   29768:	beq	2974c <__assert_fail@plt+0x16fb0>
   2976c:	mov	r2, #56	; 0x38
   29770:	mov	r1, #0
   29774:	add	r0, sp, #360	; 0x168
   29778:	bl	12514 <memset@plt>
   2977c:	mov	r2, #4
   29780:	ldr	r1, [pc, #1244]	; 29c64 <__assert_fail@plt+0x174c8>
   29784:	mov	r0, r4
   29788:	bl	12730 <strncmp@plt>
   2978c:	cmp	r0, #0
   29790:	bne	297ec <__assert_fail@plt+0x17050>
   29794:	ldrb	r8, [r4, #4]
   29798:	add	r9, r4, #4
   2979c:	cmp	r8, #0
   297a0:	beq	297ec <__assert_fail@plt+0x17050>
   297a4:	mov	r3, r9
   297a8:	mov	r2, r8
   297ac:	mov	r0, #1
   297b0:	b	297d0 <__assert_fail@plt+0x17034>
   297b4:	cmp	r2, #34	; 0x22
   297b8:	beq	29d14 <__assert_fail@plt+0x17578>
   297bc:	ldrb	r2, [r3, #1]
   297c0:	add	r0, r0, #1
   297c4:	add	r3, r3, #1
   297c8:	cmp	r2, #0
   297cc:	beq	297ec <__assert_fail@plt+0x17050>
   297d0:	cmp	r2, #92	; 0x5c
   297d4:	bne	297b4 <__assert_fail@plt+0x17018>
   297d8:	ldrb	r2, [r3, #1]
   297dc:	add	r3, r3, #1
   297e0:	cmp	r2, #92	; 0x5c
   297e4:	cmpne	r2, #34	; 0x22
   297e8:	beq	297bc <__assert_fail@plt+0x17020>
   297ec:	mov	r1, r7
   297f0:	ldr	r7, [sp, #56]	; 0x38
   297f4:	add	r2, sp, #228	; 0xe4
   297f8:	mov	r0, r7
   297fc:	bl	40f54 <fts_children@@Base+0xf4b8>
   29800:	cmp	r0, #0
   29804:	beq	2a258 <__assert_fail@plt+0x17abc>
   29808:	mov	r3, #0
   2980c:	str	r7, [sp, #44]	; 0x2c
   29810:	str	r3, [sp, #60]	; 0x3c
   29814:	add	r7, sp, #360	; 0x168
   29818:	mov	ip, r7
   2981c:	ldr	r8, [sp, #244]	; 0xf4
   29820:	ldm	ip!, {r0, r1, r2, r3}
   29824:	add	lr, sp, #512	; 0x200
   29828:	add	r8, r8, #1
   2982c:	and	r5, r5, #1
   29830:	stmia	lr!, {r0, r1, r2, r3}
   29834:	add	sl, sp, #424	; 0x1a8
   29838:	ldrb	r2, [r4]
   2983c:	str	ip, [sp, #32]
   29840:	strb	r5, [sp, #597]	; 0x255
   29844:	ldr	r5, [sp, #32]
   29848:	asr	r9, r8, #31
   2984c:	ldr	r3, [pc, #1044]	; 29c68 <__assert_fail@plt+0x174cc>
   29850:	cmp	r2, #0
   29854:	ldr	ip, [sp, #248]	; 0xf8
   29858:	moveq	r4, r3
   2985c:	strd	r8, [sl, #48]	; 0x30
   29860:	ldm	r5!, {r0, r1, r2, r3}
   29864:	mov	r9, #0
   29868:	ldr	r8, [pc, #1152]	; 29cf0 <__assert_fail@plt+0x17554>
   2986c:	str	r6, [sp, #508]	; 0x1fc
   29870:	adds	r6, r8, ip
   29874:	adc	r7, r9, ip, asr #31
   29878:	str	r5, [sp, #32]
   2987c:	str	r4, [sp, #416]	; 0x1a0
   29880:	mov	r5, r7
   29884:	mov	r4, r6
   29888:	ldr	r8, [sp, #236]	; 0xec
   2988c:	strd	r4, [sl, #32]
   29890:	ldr	r4, [sp, #240]	; 0xf0
   29894:	asr	r9, r8, #31
   29898:	ldr	r6, [sp, #228]	; 0xe4
   2989c:	asr	r5, r4, #31
   298a0:	strd	r8, [sl, #64]	; 0x40
   298a4:	strd	r4, [sl, #56]	; 0x38
   298a8:	ldr	r4, [sp, #232]	; 0xe8
   298ac:	ldr	r8, [sp, #260]	; 0x104
   298b0:	str	r6, [sp, #504]	; 0x1f8
   298b4:	asr	r5, r4, #31
   298b8:	mov	ip, #0
   298bc:	strd	r4, [sl, #72]	; 0x48
   298c0:	mov	r4, #2
   298c4:	str	r8, [sp, #172]	; 0xac
   298c8:	str	r4, [sp, #444]	; 0x1bc
   298cc:	ldr	r4, [sp, #32]
   298d0:	stmia	lr!, {r0, r1, r2, r3}
   298d4:	add	r6, fp, #7733248	; 0x760000
   298d8:	ldm	r4!, {r0, r1, r2, r3}
   298dc:	add	r9, fp, #30932992	; 0x1d80000
   298e0:	str	r8, [sp, #616]	; 0x268
   298e4:	str	ip, [sp, #464]	; 0x1d0
   298e8:	str	r4, [sp, #32]
   298ec:	stmia	lr!, {r0, r1, r2, r3}
   298f0:	add	r6, r6, #42752	; 0xa700
   298f4:	ldr	r3, [sp, #32]
   298f8:	add	r5, pc, #856	; 0x358
   298fc:	ldrd	r4, [r5]
   29900:	str	ip, [sp, #572]	; 0x23c
   29904:	ldm	r3, {r0, r1}
   29908:	adds	r2, r4, fp
   2990c:	adc	r3, r5, fp, asr #31
   29910:	stm	lr, {r0, r1}
   29914:	add	r1, sp, #568	; 0x238
   29918:	mov	r5, r3
   2991c:	str	ip, [sp, #576]	; 0x240
   29920:	ldr	r3, [sp, #268]	; 0x10c
   29924:	str	ip, [sp, #588]	; 0x24c
   29928:	str	ip, [sp, #580]	; 0x244
   2992c:	str	ip, [sp, #584]	; 0x248
   29930:	str	ip, [sp, #592]	; 0x250
   29934:	strb	ip, [sp, #596]	; 0x254
   29938:	strb	ip, [sp, #604]	; 0x25c
   2993c:	str	ip, [sp, #620]	; 0x26c
   29940:	ldr	r7, [pc, #804]	; 29c6c <__assert_fail@plt+0x174d0>
   29944:	str	ip, [sp, #600]	; 0x258
   29948:	strh	ip, [r1]
   2994c:	ldr	r8, [sp, #44]	; 0x2c
   29950:	add	r1, sp, #596	; 0x254
   29954:	mov	r4, r2
   29958:	add	r1, r1, #2
   2995c:	ldr	r2, [pc, #928]	; 29d04 <__assert_fail@plt+0x17568>
   29960:	add	r9, r9, #171008	; 0x29c00
   29964:	mov	fp, ip
   29968:	strh	ip, [r1]
   2996c:	str	r3, [sp, #608]	; 0x260
   29970:	str	r2, [sp, #612]	; 0x264
   29974:	mov	r3, #0
   29978:	mvn	r2, #0
   2997c:	cmp	r5, r3
   29980:	cmpeq	r4, r2
   29984:	bhi	299d8 <__assert_fail@plt+0x1723c>
   29988:	add	r2, sp, #316	; 0x13c
   2998c:	add	r1, sp, #272	; 0x110
   29990:	mov	r0, r8
   29994:	str	r6, [sp, #272]	; 0x110
   29998:	bl	40f54 <fts_children@@Base+0xf4b8>
   2999c:	cmp	r0, #0
   299a0:	beq	299c0 <__assert_fail@plt+0x17224>
   299a4:	ldr	r3, [sp, #356]	; 0x164
   299a8:	cmp	r3, #0
   299ac:	beq	299c0 <__assert_fail@plt+0x17224>
   299b0:	ldr	r2, [sp, #348]	; 0x15c
   299b4:	ldr	r1, [sp, #616]	; 0x268
   299b8:	cmp	r2, r1
   299bc:	bne	2a46c <__assert_fail@plt+0x17cd0>
   299c0:	add	r6, r6, #7733248	; 0x760000
   299c4:	adds	r4, r4, r7
   299c8:	add	r6, r6, #42752	; 0xa700
   299cc:	adc	r5, r5, fp
   299d0:	cmp	r9, r6
   299d4:	bne	29974 <__assert_fail@plt+0x171d8>
   299d8:	ldr	r0, [sp, #608]	; 0x260
   299dc:	cmp	r0, #0
   299e0:	beq	29a04 <__assert_fail@plt+0x17268>
   299e4:	ldr	r1, [sp, #620]	; 0x26c
   299e8:	cmp	r1, #0
   299ec:	beq	29a04 <__assert_fail@plt+0x17268>
   299f0:	bl	120dc <strcmp@plt>
   299f4:	cmp	r0, #0
   299f8:	mvneq	r3, #0
   299fc:	streq	r0, [sp, #620]	; 0x26c
   29a00:	streq	r3, [sp, #616]	; 0x268
   29a04:	add	r0, sp, #416	; 0x1a0
   29a08:	bl	265d0 <__assert_fail@plt+0x13e34>
   29a0c:	subs	r5, r0, #0
   29a10:	bne	29c10 <__assert_fail@plt+0x17474>
   29a14:	ldrb	r4, [sp, #597]	; 0x255
   29a18:	cmp	r4, #0
   29a1c:	bne	29dbc <__assert_fail@plt+0x17620>
   29a20:	ldrb	r6, [sp, #568]	; 0x238
   29a24:	cmp	r6, #0
   29a28:	beq	29b8c <__assert_fail@plt+0x173f0>
   29a2c:	add	r3, sp, #504	; 0x1f8
   29a30:	ldm	r3, {r0, r1}
   29a34:	ldr	r3, [sp, #68]	; 0x44
   29a38:	stm	r3, {r0, r1}
   29a3c:	cmp	r4, #0
   29a40:	moveq	r6, #1
   29a44:	beq	29b50 <__assert_fail@plt+0x173b4>
   29a48:	ldr	r3, [sp, #64]	; 0x40
   29a4c:	cmp	r3, #0
   29a50:	beq	2a488 <__assert_fail@plt+0x17cec>
   29a54:	ldr	r1, [pc, #652]	; 29ce8 <__assert_fail@plt+0x1754c>
   29a58:	ldr	r0, [sp, #64]	; 0x40
   29a5c:	bl	120dc <strcmp@plt>
   29a60:	mov	r2, #5
   29a64:	cmp	r0, #0
   29a68:	bne	2a31c <__assert_fail@plt+0x17b80>
   29a6c:	ldr	r1, [pc, #508]	; 29c70 <__assert_fail@plt+0x174d4>
   29a70:	bl	1222c <dcgettext@plt>
   29a74:	bl	25cb8 <__assert_fail@plt+0x1351c>
   29a78:	ldr	r8, [sp, #68]	; 0x44
   29a7c:	ldr	r1, [pc, #496]	; 29c74 <__assert_fail@plt+0x174d8>
   29a80:	mov	r2, #5
   29a84:	ldr	r6, [r8]
   29a88:	ldr	r5, [r8, #4]
   29a8c:	mov	r0, #0
   29a90:	asr	r7, r6, #31
   29a94:	bl	1222c <dcgettext@plt>
   29a98:	mov	r2, r6
   29a9c:	mov	r3, r7
   29aa0:	str	r5, [sp]
   29aa4:	bl	25cb8 <__assert_fail@plt+0x1351c>
   29aa8:	add	r1, sp, #272	; 0x110
   29aac:	mov	r0, r8
   29ab0:	bl	120a0 <gmtime_r@plt>
   29ab4:	cmp	r0, #0
   29ab8:	beq	29aec <__assert_fail@plt+0x17350>
   29abc:	mov	r2, #5
   29ac0:	ldr	r1, [pc, #432]	; 29c78 <__assert_fail@plt+0x174dc>
   29ac4:	mov	r0, #0
   29ac8:	bl	1222c <dcgettext@plt>
   29acc:	mov	r1, #0
   29ad0:	add	r2, sp, #696	; 0x2b8
   29ad4:	mov	r5, r0
   29ad8:	add	r0, sp, #272	; 0x110
   29adc:	bl	25fe0 <__assert_fail@plt+0x13844>
   29ae0:	mov	r1, r0
   29ae4:	mov	r0, r5
   29ae8:	bl	25cb8 <__assert_fail@plt+0x1351c>
   29aec:	ldr	r1, [sp, #68]	; 0x44
   29af0:	add	r2, sp, #316	; 0x13c
   29af4:	ldr	r0, [sp, #44]	; 0x2c
   29af8:	bl	40f54 <fts_children@@Base+0xf4b8>
   29afc:	cmp	r0, #0
   29b00:	beq	29b4c <__assert_fail@plt+0x173b0>
   29b04:	mov	r2, #5
   29b08:	ldr	r1, [pc, #364]	; 29c7c <__assert_fail@plt+0x174e0>
   29b0c:	mov	r0, #0
   29b10:	ldr	r7, [sp, #352]	; 0x160
   29b14:	bl	1222c <dcgettext@plt>
   29b18:	add	r2, sp, #696	; 0x2b8
   29b1c:	mov	r1, #0
   29b20:	mov	r5, r0
   29b24:	add	r0, sp, #316	; 0x13c
   29b28:	bl	25fe0 <__assert_fail@plt+0x13844>
   29b2c:	add	r1, sp, #668	; 0x29c
   29b30:	mov	r6, r0
   29b34:	mov	r0, r7
   29b38:	bl	25b20 <__assert_fail@plt+0x13384>
   29b3c:	mov	r1, r6
   29b40:	mov	r2, r0
   29b44:	mov	r0, r5
   29b48:	bl	25cb8 <__assert_fail@plt+0x1351c>
   29b4c:	mov	r6, r4
   29b50:	ldr	r0, [sp, #44]	; 0x2c
   29b54:	ldr	r3, [sp, #56]	; 0x38
   29b58:	cmp	r0, r3
   29b5c:	beq	29b64 <__assert_fail@plt+0x173c8>
   29b60:	bl	40f48 <fts_children@@Base+0xf4ac>
   29b64:	ldr	r0, [sp, #60]	; 0x3c
   29b68:	bl	12154 <free@plt>
   29b6c:	ldr	r3, [pc, #236]	; 29c60 <__assert_fail@plt+0x174c4>
   29b70:	ldr	r2, [sp, #996]	; 0x3e4
   29b74:	mov	r0, r6
   29b78:	ldr	r3, [r3]
   29b7c:	cmp	r2, r3
   29b80:	bne	2b4d4 <__assert_fail@plt+0x18d38>
   29b84:	add	sp, sp, #1004	; 0x3ec
   29b88:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29b8c:	ldr	r0, [sp, #588]	; 0x24c
   29b90:	ldr	r1, [sp, #572]	; 0x23c
   29b94:	ldr	ip, [sp, #576]	; 0x240
   29b98:	orr	r3, r0, r1
   29b9c:	orr	r3, r3, ip
   29ba0:	ldr	lr, [sp, #584]	; 0x248
   29ba4:	ldr	r2, [sp, #580]	; 0x244
   29ba8:	ldr	ip, [sp, #592]	; 0x250
   29bac:	orr	r3, r3, lr
   29bb0:	add	r2, r2, ip
   29bb4:	orr	r3, r3, r2
   29bb8:	cmp	r3, #1
   29bbc:	ble	29e30 <__assert_fail@plt+0x17694>
   29bc0:	cmp	r4, #0
   29bc4:	beq	29b50 <__assert_fail@plt+0x173b4>
   29bc8:	cmp	r0, #1
   29bcc:	bgt	2a334 <__assert_fail@plt+0x17b98>
   29bd0:	cmp	r1, #1
   29bd4:	bgt	2a35c <__assert_fail@plt+0x17bc0>
   29bd8:	ldr	r3, [sp, #576]	; 0x240
   29bdc:	cmp	r3, #1
   29be0:	bgt	2a350 <__assert_fail@plt+0x17bb4>
   29be4:	ldr	r3, [sp, #584]	; 0x248
   29be8:	cmp	r3, #1
   29bec:	bgt	2a344 <__assert_fail@plt+0x17ba8>
   29bf0:	ldr	r3, [sp, #580]	; 0x244
   29bf4:	ldr	r2, [sp, #592]	; 0x250
   29bf8:	add	r3, r3, r2
   29bfc:	cmp	r3, #1
   29c00:	ble	29b50 <__assert_fail@plt+0x173b4>
   29c04:	ldr	r0, [pc, #116]	; 29c80 <__assert_fail@plt+0x174e4>
   29c08:	bl	25cb8 <__assert_fail@plt+0x1351c>
   29c0c:	b	29b50 <__assert_fail@plt+0x173b4>
   29c10:	ldrb	r6, [sp, #597]	; 0x255
   29c14:	cmp	r6, #0
   29c18:	beq	29b50 <__assert_fail@plt+0x173b4>
   29c1c:	ldr	r1, [sp, #72]	; 0x48
   29c20:	ldr	r3, [sp, #48]	; 0x30
   29c24:	ldr	r2, [sp, #416]	; 0x1a0
   29c28:	add	r3, r3, r1
   29c2c:	cmp	r2, r3
   29c30:	mov	r0, #0
   29c34:	ldrcs	r1, [pc, #72]	; 29c84 <__assert_fail@plt+0x174e8>
   29c38:	ldrcc	r1, [pc, #72]	; 29c88 <__assert_fail@plt+0x174ec>
   29c3c:	mov	r2, #5
   29c40:	bl	1222c <dcgettext@plt>
   29c44:	ldr	r1, [sp, #416]	; 0x1a0
   29c48:	bl	25cb8 <__assert_fail@plt+0x1351c>
   29c4c:	mov	r6, #0
   29c50:	b	29b50 <__assert_fail@plt+0x173b4>
   29c54:	nop			; (mov r0, r0)
   29c58:	rsbshi	sl, r6, r0, lsl #14
   29c5c:	andeq	r0, r0, r0
   29c60:	andeq	fp, r5, r0, ror #24
   29c64:	andeq	r9, r4, ip, lsl r5
   29c68:	andeq	r4, r4, ip, lsr #11
   29c6c:	rsbseq	sl, r6, r0, lsl #14
   29c70:	andeq	r9, r4, r8, lsr #28
   29c74:	andeq	r9, r4, ip, ror #28
   29c78:	muleq	r4, r0, lr
   29c7c:	andeq	r9, r4, r4, lsr #29
   29c80:	andeq	r9, r4, r4, asr #13
   29c84:	andeq	r9, r4, r4, lsr #10
   29c88:	andeq	r9, r4, ip, lsr r5
   29c8c:	andeq	r9, r4, r4, ror #10
   29c90:	andeq	ip, r5, r8, lsr r5
   29c94:	andeq	r9, r4, ip, lsr #11
   29c98:	andeq	r9, r4, ip, lsr r8
   29c9c:	andeq	r9, r4, r0, ror #16
   29ca0:	andeq	r9, r4, r0, lsl #17
   29ca4:	andeq	r8, r4, r0, lsr r6
   29ca8:	andeq	r5, r4, r8, lsl #31
   29cac:	andeq	r9, r4, r0, lsr #17
   29cb0:			; <UNDEFINED> instruction: 0x0004a2b0
   29cb4:	ldrdeq	r9, [r4], -ip
   29cb8:	andeq	r9, r4, r0, asr r9
   29cbc:	andeq	r9, r4, r4, ror r9
   29cc0:	andeq	r9, r4, r8, lsl #19
   29cc4:	muleq	r4, ip, r9
   29cc8:	andeq	r9, r4, r8, ror r5
   29ccc:	andeq	r9, r4, ip, lsl r6
   29cd0:	andeq	r9, r4, r4, lsr #12
   29cd4:	andeq	r9, r4, r4, asr #28
   29cd8:	andeq	r9, r4, ip, lsr #12
   29cdc:	muleq	r4, r8, r6
   29ce0:	andeq	r9, r4, r4, ror r6
   29ce4:	andeq	r9, r4, r0, asr r6
   29ce8:	andeq	r9, r4, r4, asr #11
   29cec:	andeq	r9, r4, ip, asr #11
   29cf0:	andeq	r0, r0, ip, ror #14
   29cf4:	andeq	r9, r4, ip, ror #13
   29cf8:	andeq	r9, r4, r8, lsr r7
   29cfc:			; <UNDEFINED> instruction: 0xfffff894
   29d00:	muleq	r4, r4, r5
   29d04:	andeq	r0, r0, sp, lsl #2
   29d08:	andeq	r9, r4, ip, lsl #28
   29d0c:	andeq	r5, r0, r8, asr r8
   29d10:	subls	r2, r9, #-1828716544	; 0x93000000
   29d14:	cmp	r0, #100	; 0x64
   29d18:	bgt	2a22c <__assert_fail@plt+0x17a90>
   29d1c:	add	r3, sp, #796	; 0x31c
   29d20:	str	r3, [sp, #64]	; 0x40
   29d24:	mov	r3, #0
   29d28:	str	r3, [sp, #60]	; 0x3c
   29d2c:	cmp	r8, #34	; 0x22
   29d30:	ldr	r2, [sp, #64]	; 0x40
   29d34:	beq	29d60 <__assert_fail@plt+0x175c4>
   29d38:	sub	r8, r8, #92	; 0x5c
   29d3c:	clz	r8, r8
   29d40:	lsr	r8, r8, #5
   29d44:	add	r3, r9, r8
   29d48:	ldrb	r1, [r9, r8]
   29d4c:	ldrb	r8, [r3, #1]
   29d50:	add	r9, r3, #1
   29d54:	strb	r1, [r2], #1
   29d58:	cmp	r8, #34	; 0x22
   29d5c:	bne	29d38 <__assert_fail@plt+0x1759c>
   29d60:	mov	r3, #0
   29d64:	strb	r3, [r2]
   29d68:	ldr	r0, [sp, #64]	; 0x40
   29d6c:	bl	40cd0 <fts_children@@Base+0xf234>
   29d70:	subs	r3, r0, #0
   29d74:	str	r3, [sp, #44]	; 0x2c
   29d78:	beq	2a464 <__assert_fail@plt+0x17cc8>
   29d7c:	add	r9, r9, #1
   29d80:	mov	r4, r9
   29d84:	ldrb	r3, [r9], #1
   29d88:	cmp	r3, #9
   29d8c:	bcc	29da0 <__assert_fail@plt+0x17604>
   29d90:	cmp	r3, #13
   29d94:	bls	29d80 <__assert_fail@plt+0x175e4>
   29d98:	cmp	r3, #32
   29d9c:	beq	29d80 <__assert_fail@plt+0x175e4>
   29da0:	mov	r1, r7
   29da4:	add	r2, sp, #228	; 0xe4
   29da8:	ldr	r0, [sp, #44]	; 0x2c
   29dac:	bl	40f54 <fts_children@@Base+0xf4b8>
   29db0:	cmp	r0, #0
   29db4:	bne	29814 <__assert_fail@plt+0x17078>
   29db8:	b	29c4c <__assert_fail@plt+0x174b0>
   29dbc:	mov	r2, #5
   29dc0:	ldr	r1, [pc, #-316]	; 29c8c <__assert_fail@plt+0x174f0>
   29dc4:	bl	1222c <dcgettext@plt>
   29dc8:	bl	25cb8 <__assert_fail@plt+0x1351c>
   29dcc:	ldrb	r0, [sp, #568]	; 0x238
   29dd0:	ldr	r4, [pc, #-328]	; 29c90 <__assert_fail@plt+0x174f4>
   29dd4:	cmp	r0, #0
   29dd8:	bne	2a268 <__assert_fail@plt+0x17acc>
   29ddc:	ldr	r6, [sp, #592]	; 0x250
   29de0:	ldr	r5, [r4]
   29de4:	cmp	r6, #0
   29de8:	bne	2a458 <__assert_fail@plt+0x17cbc>
   29dec:	ldr	r7, [sp, #64]	; 0x40
   29df0:	cmp	r7, #0
   29df4:	beq	2aa3c <__assert_fail@plt+0x182a0>
   29df8:	ldr	r3, [sp, #56]	; 0x38
   29dfc:	ldr	r2, [sp, #44]	; 0x2c
   29e00:	cmp	r3, r2
   29e04:	beq	2a37c <__assert_fail@plt+0x17be0>
   29e08:	mov	r0, r6
   29e0c:	mov	r2, #5
   29e10:	ldr	r1, [pc, #-388]	; 29c94 <__assert_fail@plt+0x174f8>
   29e14:	bl	1222c <dcgettext@plt>
   29e18:	mov	r3, r7
   29e1c:	mov	r1, #1
   29e20:	mov	r2, r0
   29e24:	mov	r0, r5
   29e28:	bl	12580 <__fprintf_chk@plt>
   29e2c:	b	2a28c <__assert_fail@plt+0x17af0>
   29e30:	ldrd	r8, [sl, #32]
   29e34:	cmp	r8, #0
   29e38:	sbcs	r3, r9, #0
   29e3c:	blt	2a424 <__assert_fail@plt+0x17c88>
   29e40:	ldr	r3, [sp, #464]	; 0x1d0
   29e44:	cmp	r3, #2
   29e48:	beq	2a39c <__assert_fail@plt+0x17c00>
   29e4c:	ldr	r3, [pc, #-344]	; 29cfc <__assert_fail@plt+0x17560>
   29e50:	ldr	r2, [pc, #-360]	; 29cf0 <__assert_fail@plt+0x17554>
   29e54:	adds	r3, r8, r3
   29e58:	str	r3, [sp, #80]	; 0x50
   29e5c:	mvn	r1, #0
   29e60:	mov	r3, #0
   29e64:	adc	r1, r9, r1
   29e68:	cmp	r9, r3
   29e6c:	str	r1, [sp, #84]	; 0x54
   29e70:	cmpeq	r8, r2
   29e74:	mov	ip, #0
   29e78:	ldrd	r2, [sp, #80]	; 0x50
   29e7c:	bcs	2a368 <__assert_fail@plt+0x17bcc>
   29e80:	cmp	r2, #0
   29e84:	sbcs	r3, r3, #0
   29e88:	bge	2a374 <__assert_fail@plt+0x17bd8>
   29e8c:	ldrd	r0, [sp, #80]	; 0x50
   29e90:	asr	r3, r0, #31
   29e94:	cmp	r1, r3
   29e98:	cmpeq	r0, r0
   29e9c:	movne	ip, #1
   29ea0:	and	r7, ip, #1
   29ea4:	str	r0, [sp, #160]	; 0xa0
   29ea8:	cmp	r7, #0
   29eac:	bne	2a3f8 <__assert_fail@plt+0x17c5c>
   29eb0:	ldrd	r2, [sl, #48]	; 0x30
   29eb4:	mvn	r4, #0
   29eb8:	mvn	r5, #0
   29ebc:	adds	r0, r2, r4
   29ec0:	adcs	r1, r3, r5
   29ec4:	asr	r3, r0, #31
   29ec8:	movvs	lr, #1
   29ecc:	movvc	lr, #0
   29ed0:	cmp	r1, r3
   29ed4:	cmpeq	r0, r0
   29ed8:	movne	lr, #1
   29edc:	cmp	lr, #0
   29ee0:	ldrb	ip, [sp, #597]	; 0x255
   29ee4:	str	r0, [sp, #156]	; 0x9c
   29ee8:	mov	lr, r0
   29eec:	bne	2a404 <__assert_fail@plt+0x17c68>
   29ef0:	ldrd	r4, [sl, #56]	; 0x38
   29ef4:	asr	r1, r4, #31
   29ef8:	cmp	r5, r1
   29efc:	cmpeq	r4, r4
   29f00:	movne	r3, #1
   29f04:	moveq	r3, #0
   29f08:	str	r4, [sp, #152]	; 0x98
   29f0c:	str	r3, [sp, #32]
   29f10:	bne	2a404 <__assert_fail@plt+0x17c68>
   29f14:	ldr	r0, [sp, #588]	; 0x24c
   29f18:	cmp	r0, #0
   29f1c:	bne	2a9b8 <__assert_fail@plt+0x1821c>
   29f20:	ldrb	r3, [sp, #569]	; 0x239
   29f24:	cmp	r3, #0
   29f28:	beq	2abcc <__assert_fail@plt+0x18430>
   29f2c:	ldr	r3, [sp, #572]	; 0x23c
   29f30:	cmp	r3, #0
   29f34:	bne	2abcc <__assert_fail@plt+0x18430>
   29f38:	ldr	r2, [sp, #576]	; 0x240
   29f3c:	cmp	r2, #0
   29f40:	beq	2a9b8 <__assert_fail@plt+0x1821c>
   29f44:	cmp	ip, #0
   29f48:	str	r7, [sp, #140]	; 0x8c
   29f4c:	str	r7, [sp, #144]	; 0x90
   29f50:	str	r7, [sp, #148]	; 0x94
   29f54:	str	r7, [sp, #508]	; 0x1fc
   29f58:	bne	2abf0 <__assert_fail@plt+0x18454>
   29f5c:	mov	ip, r7
   29f60:	mov	r5, r7
   29f64:	mvn	r2, #0
   29f68:	str	r2, [sp, #172]	; 0xac
   29f6c:	ldr	r2, [sp, #580]	; 0x244
   29f70:	ldr	r9, [sp, #160]	; 0xa0
   29f74:	cmp	r2, #0
   29f78:	str	r5, [sp, #188]	; 0xbc
   29f7c:	ldrne	r2, [sp, #436]	; 0x1b4
   29f80:	ldreq	r2, [sp, #172]	; 0xac
   29f84:	add	r1, sp, #140	; 0x8c
   29f88:	mvn	r5, #0
   29f8c:	ldr	r0, [sp, #44]	; 0x2c
   29f90:	strne	r2, [sp, #172]	; 0xac
   29f94:	str	r3, [sp, #184]	; 0xb8
   29f98:	str	ip, [sp, #192]	; 0xc0
   29f9c:	str	lr, [sp, #200]	; 0xc8
   29fa0:	str	r2, [sp, #216]	; 0xd8
   29fa4:	str	r4, [sp, #196]	; 0xc4
   29fa8:	str	r9, [sp, #204]	; 0xcc
   29fac:	str	r5, [sp, #164]	; 0xa4
   29fb0:	bl	40ff0 <fts_children@@Base+0xf554>
   29fb4:	add	r1, sp, #140	; 0x8c
   29fb8:	mov	fp, r0
   29fbc:	add	r0, sp, #184	; 0xb8
   29fc0:	bl	25aa0 <__assert_fail@plt+0x13304>
   29fc4:	cmp	r0, #0
   29fc8:	bne	2a540 <__assert_fail@plt+0x17da4>
   29fcc:	ldr	r9, [sp, #592]	; 0x250
   29fd0:	cmp	r9, #0
   29fd4:	bne	2a4a0 <__assert_fail@plt+0x17d04>
   29fd8:	ldr	r3, [sp, #184]	; 0xb8
   29fdc:	ldr	r2, [sp, #140]	; 0x8c
   29fe0:	ldr	r1, [sp, #188]	; 0xbc
   29fe4:	ldr	r0, [sp, #144]	; 0x90
   29fe8:	str	r3, [sp, #72]	; 0x48
   29fec:	cmp	r3, r2
   29ff0:	cmpeq	r1, r0
   29ff4:	ldr	r3, [sp, #148]	; 0x94
   29ff8:	str	r2, [sp, #80]	; 0x50
   29ffc:	ldr	ip, [sp, #192]	; 0xc0
   2a000:	ldr	r2, [sp, #160]	; 0xa0
   2a004:	str	r3, [sp, #64]	; 0x40
   2a008:	ldr	r3, [sp, #200]	; 0xc8
   2a00c:	str	r2, [sp, #68]	; 0x44
   2a010:	str	r3, [sp, #48]	; 0x30
   2a014:	str	r1, [sp, #88]	; 0x58
   2a018:	str	r0, [sp, #96]	; 0x60
   2a01c:	mov	r8, ip
   2a020:	ldr	sl, [sp, #196]	; 0xc4
   2a024:	ldr	fp, [sp, #152]	; 0x98
   2a028:	ldr	r7, [sp, #156]	; 0x9c
   2a02c:	ldr	r3, [sp, #204]	; 0xcc
   2a030:	ldrb	r2, [sp, #597]	; 0x255
   2a034:	bne	2b11c <__assert_fail@plt+0x18980>
   2a038:	ldr	ip, [sp, #64]	; 0x40
   2a03c:	sub	r1, sl, fp
   2a040:	cmp	r8, ip
   2a044:	clz	r1, r1
   2a048:	lsr	r1, r1, #5
   2a04c:	moveq	r1, #0
   2a050:	cmp	r1, #0
   2a054:	beq	2b11c <__assert_fail@plt+0x18980>
   2a058:	ldr	r1, [sp, #48]	; 0x30
   2a05c:	ldr	r0, [sp, #68]	; 0x44
   2a060:	cmp	r1, r7
   2a064:	cmpeq	r3, r0
   2a068:	bne	2b11c <__assert_fail@plt+0x18980>
   2a06c:	cmp	r2, #0
   2a070:	beq	29b50 <__assert_fail@plt+0x173b4>
   2a074:	mov	r2, #5
   2a078:	ldr	r1, [pc, #-1000]	; 29c98 <__assert_fail@plt+0x174fc>
   2a07c:	mov	r0, #0
   2a080:	bl	1222c <dcgettext@plt>
   2a084:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a088:	mov	r2, #5
   2a08c:	ldr	r1, [pc, #-1016]	; 29c9c <__assert_fail@plt+0x17500>
   2a090:	mov	r0, #0
   2a094:	bl	1222c <dcgettext@plt>
   2a098:	add	r4, sp, #896	; 0x380
   2a09c:	mov	r2, r4
   2a0a0:	add	r1, sp, #416	; 0x1a0
   2a0a4:	mov	r5, r0
   2a0a8:	add	r0, sp, #184	; 0xb8
   2a0ac:	bl	25fe0 <__assert_fail@plt+0x13844>
   2a0b0:	mov	r1, r0
   2a0b4:	mov	r0, r5
   2a0b8:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a0bc:	mov	r2, #5
   2a0c0:	ldr	r1, [pc, #-1064]	; 29ca0 <__assert_fail@plt+0x17504>
   2a0c4:	mov	r0, #0
   2a0c8:	bl	1222c <dcgettext@plt>
   2a0cc:	mov	r2, r4
   2a0d0:	add	r1, sp, #416	; 0x1a0
   2a0d4:	mov	r5, r0
   2a0d8:	add	r0, sp, #140	; 0x8c
   2a0dc:	bl	25fe0 <__assert_fail@plt+0x13844>
   2a0e0:	mov	r1, r0
   2a0e4:	mov	r0, r5
   2a0e8:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a0ec:	ldr	r1, [pc, #-1104]	; 29ca4 <__assert_fail@plt+0x17508>
   2a0f0:	ldr	ip, [pc, #-1104]	; 29ca8 <__assert_fail@plt+0x1750c>
   2a0f4:	mov	r0, r1
   2a0f8:	mov	r2, r1
   2a0fc:	mov	r3, #1
   2a100:	str	r3, [sp, #32]
   2a104:	ldr	lr, [sp, #96]	; 0x60
   2a108:	str	ip, [sp, #16]
   2a10c:	ldr	ip, [sp, #88]	; 0x58
   2a110:	ldr	r5, [pc, #-1140]	; 29ca4 <__assert_fail@plt+0x17508>
   2a114:	cmp	ip, lr
   2a118:	ldr	r3, [pc, #-1144]	; 29ca8 <__assert_fail@plt+0x1750c>
   2a11c:	ldr	r8, [sp, #72]	; 0x48
   2a120:	ldr	ip, [sp, #80]	; 0x50
   2a124:	movne	lr, r3
   2a128:	moveq	lr, r5
   2a12c:	str	r2, [sp, #12]
   2a130:	cmp	r8, ip
   2a134:	ldr	r2, [pc, #-1168]	; 29cac <__assert_fail@plt+0x17510>
   2a138:	movne	r5, r3
   2a13c:	mov	r3, #100	; 0x64
   2a140:	str	r0, [sp, #8]
   2a144:	str	r1, [sp, #4]
   2a148:	str	r2, [sp]
   2a14c:	mov	r1, r3
   2a150:	str	lr, [sp, #20]
   2a154:	str	r5, [sp, #24]
   2a158:	mov	r2, #1
   2a15c:	mov	r0, r4
   2a160:	bl	12784 <__snprintf_chk@plt>
   2a164:	ldrb	r3, [sp, #947]	; 0x3b3
   2a168:	cmp	r3, #32
   2a16c:	bne	2b4d8 <__assert_fail@plt+0x18d3c>
   2a170:	add	r2, sp, #944	; 0x3b0
   2a174:	ldr	r8, [sp, #32]
   2a178:	add	r2, r2, #3
   2a17c:	mov	r3, #51	; 0x33
   2a180:	ldrb	r0, [r2, #-1]!
   2a184:	sub	r1, r3, #1
   2a188:	cmp	r0, #32
   2a18c:	bne	2a198 <__assert_fail@plt+0x179fc>
   2a190:	subs	r3, r1, #0
   2a194:	bne	2a180 <__assert_fail@plt+0x179e4>
   2a198:	str	r8, [sp, #32]
   2a19c:	add	r2, sp, #1000	; 0x3e8
   2a1a0:	add	r3, r2, r3
   2a1a4:	mov	r1, r4
   2a1a8:	ldr	r0, [pc, #-1280]	; 29cb0 <__assert_fail@plt+0x17514>
   2a1ac:	mov	r4, #0
   2a1b0:	strb	r4, [r3, #-104]	; 0xffffff98
   2a1b4:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a1b8:	mov	r2, #5
   2a1bc:	ldr	r1, [pc, #-1296]	; 29cb4 <__assert_fail@plt+0x17518>
   2a1c0:	mov	r0, r4
   2a1c4:	bl	1222c <dcgettext@plt>
   2a1c8:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a1cc:	ldr	r3, [sp, #32]
   2a1d0:	cmp	r3, r4
   2a1d4:	bne	2b4bc <__assert_fail@plt+0x18d20>
   2a1d8:	ldr	r3, [sp, #48]	; 0x30
   2a1dc:	cmp	sl, fp
   2a1e0:	cmpne	r3, r7
   2a1e4:	bne	2b4a4 <__assert_fail@plt+0x18d08>
   2a1e8:	mov	r2, #5
   2a1ec:	ldr	r1, [pc, #-1340]	; 29cb8 <__assert_fail@plt+0x1751c>
   2a1f0:	mov	r0, #0
   2a1f4:	bl	1222c <dcgettext@plt>
   2a1f8:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a1fc:	cmp	r9, #0
   2a200:	movne	r2, #5
   2a204:	ldrne	r1, [pc, #-1360]	; 29cbc <__assert_fail@plt+0x17520>
   2a208:	ldreq	r1, [pc, #-1360]	; 29cc0 <__assert_fail@plt+0x17524>
   2a20c:	movne	r0, #0
   2a210:	moveq	r0, r9
   2a214:	moveq	r2, #5
   2a218:	bl	1222c <dcgettext@plt>
   2a21c:	mov	r1, r0
   2a220:	ldr	r0, [pc, #-1380]	; 29cc4 <__assert_fail@plt+0x17528>
   2a224:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a228:	b	29b50 <__assert_fail@plt+0x173b4>
   2a22c:	bl	123dc <malloc@plt>
   2a230:	subs	r3, r0, #0
   2a234:	str	r3, [sp, #60]	; 0x3c
   2a238:	beq	2a258 <__assert_fail@plt+0x17abc>
   2a23c:	ldr	r3, [sp, #60]	; 0x3c
   2a240:	str	r3, [sp, #64]	; 0x40
   2a244:	b	29d2c <__assert_fail@plt+0x17590>
   2a248:	add	r0, sp, #132	; 0x84
   2a24c:	bl	415b8 <fts_children@@Base+0xfb1c>
   2a250:	add	r7, sp, #132	; 0x84
   2a254:	b	29740 <__assert_fail@plt+0x16fa4>
   2a258:	mov	r3, #0
   2a25c:	str	r3, [sp, #60]	; 0x3c
   2a260:	mov	r6, r3
   2a264:	b	29b64 <__assert_fail@plt+0x173c8>
   2a268:	mov	r0, r5
   2a26c:	ldr	r1, [pc, #-1452]	; 29cc8 <__assert_fail@plt+0x1752c>
   2a270:	ldr	r5, [r4]
   2a274:	mov	r2, #5
   2a278:	bl	1222c <dcgettext@plt>
   2a27c:	mov	r1, #1
   2a280:	mov	r2, r0
   2a284:	mov	r0, r5
   2a288:	bl	12580 <__fprintf_chk@plt>
   2a28c:	ldr	r2, [sp, #580]	; 0x244
   2a290:	ldr	r3, [sp, #592]	; 0x250
   2a294:	cmp	r2, #0
   2a298:	ldr	r5, [r4]
   2a29c:	beq	2a2d0 <__assert_fail@plt+0x17b34>
   2a2a0:	cmp	r3, #0
   2a2a4:	bne	2a2d8 <__assert_fail@plt+0x17b3c>
   2a2a8:	ldr	r3, [sp, #436]	; 0x1b4
   2a2ac:	cmp	r3, #0
   2a2b0:	ble	2a2fc <__assert_fail@plt+0x17b60>
   2a2b4:	mov	r3, r5
   2a2b8:	mov	r2, #5
   2a2bc:	mov	r1, #1
   2a2c0:	ldr	r0, [pc, #-1532]	; 29ccc <__assert_fail@plt+0x17530>
   2a2c4:	bl	122f8 <fwrite@plt>
   2a2c8:	ldr	r3, [sp, #592]	; 0x250
   2a2cc:	ldr	r5, [r4]
   2a2d0:	cmp	r3, #0
   2a2d4:	beq	2a2fc <__assert_fail@plt+0x17b60>
   2a2d8:	add	r1, sp, #668	; 0x29c
   2a2dc:	ldr	r0, [sp, #440]	; 0x1b8
   2a2e0:	bl	25b20 <__assert_fail@plt+0x13384>
   2a2e4:	ldr	r2, [pc, #-1564]	; 29cd0 <__assert_fail@plt+0x17534>
   2a2e8:	mov	r1, #1
   2a2ec:	mov	r3, r0
   2a2f0:	mov	r0, r5
   2a2f4:	bl	12580 <__fprintf_chk@plt>
   2a2f8:	ldr	r5, [r4]
   2a2fc:	mov	r1, r5
   2a300:	mov	r0, #10
   2a304:	bl	12634 <fputc@plt>
   2a308:	ldrb	r6, [sp, #568]	; 0x238
   2a30c:	ldrb	r4, [sp, #597]	; 0x255
   2a310:	cmp	r6, #0
   2a314:	beq	29b8c <__assert_fail@plt+0x173f0>
   2a318:	b	29a2c <__assert_fail@plt+0x17290>
   2a31c:	ldr	r1, [pc, #-1616]	; 29cd4 <__assert_fail@plt+0x17538>
   2a320:	mov	r0, #0
   2a324:	bl	1222c <dcgettext@plt>
   2a328:	ldr	r1, [sp, #64]	; 0x40
   2a32c:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a330:	b	29a78 <__assert_fail@plt+0x172dc>
   2a334:	ldr	r0, [pc, #-1636]	; 29cd8 <__assert_fail@plt+0x1753c>
   2a338:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a33c:	ldr	r1, [sp, #572]	; 0x23c
   2a340:	b	29bd0 <__assert_fail@plt+0x17434>
   2a344:	ldr	r0, [pc, #-1648]	; 29cdc <__assert_fail@plt+0x17540>
   2a348:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a34c:	b	29bf0 <__assert_fail@plt+0x17454>
   2a350:	ldr	r0, [pc, #-1656]	; 29ce0 <__assert_fail@plt+0x17544>
   2a354:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a358:	b	29be4 <__assert_fail@plt+0x17448>
   2a35c:	ldr	r0, [pc, #-1664]	; 29ce4 <__assert_fail@plt+0x17548>
   2a360:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a364:	b	29bd8 <__assert_fail@plt+0x1743c>
   2a368:	cmp	r2, #0
   2a36c:	sbcs	r3, r3, #0
   2a370:	bge	29e8c <__assert_fail@plt+0x176f0>
   2a374:	mov	ip, #1
   2a378:	b	29e8c <__assert_fail@plt+0x176f0>
   2a37c:	ldr	r1, [pc, #-1692]	; 29ce8 <__assert_fail@plt+0x1754c>
   2a380:	ldr	r0, [sp, #64]	; 0x40
   2a384:	bl	120dc <strcmp@plt>
   2a388:	cmp	r0, #0
   2a38c:	bne	2aa14 <__assert_fail@plt+0x18278>
   2a390:	mov	r2, #5
   2a394:	ldr	r1, [pc, #-1712]	; 29cec <__assert_fail@plt+0x17550>
   2a398:	b	2a278 <__assert_fail@plt+0x17adc>
   2a39c:	cmp	r8, #69	; 0x45
   2a3a0:	sbcs	r3, r9, #0
   2a3a4:	movlt	r7, #2000	; 0x7d0
   2a3a8:	ldrge	r7, [pc, #-1728]	; 29cf0 <__assert_fail@plt+0x17554>
   2a3ac:	mov	r5, #0
   2a3b0:	adds	r7, r8, r7
   2a3b4:	adc	r5, r9, r5
   2a3b8:	cmp	r4, #0
   2a3bc:	moveq	r8, r7
   2a3c0:	moveq	r9, r5
   2a3c4:	beq	29e4c <__assert_fail@plt+0x176b0>
   2a3c8:	mov	r2, #5
   2a3cc:	ldr	r1, [pc, #-1760]	; 29cf4 <__assert_fail@plt+0x17558>
   2a3d0:	mov	r0, #0
   2a3d4:	bl	1222c <dcgettext@plt>
   2a3d8:	mov	r2, r8
   2a3dc:	mov	r3, r9
   2a3e0:	str	r7, [sp]
   2a3e4:	str	r5, [sp, #4]
   2a3e8:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a3ec:	mov	r8, r7
   2a3f0:	mov	r9, r5
   2a3f4:	b	29e4c <__assert_fail@plt+0x176b0>
   2a3f8:	cmp	r4, #0
   2a3fc:	bne	2aa4c <__assert_fail@plt+0x182b0>
   2a400:	ldrb	ip, [sp, #597]	; 0x255
   2a404:	cmp	ip, #0
   2a408:	beq	29b50 <__assert_fail@plt+0x173b4>
   2a40c:	mov	r2, #5
   2a410:	ldr	r1, [pc, #-1824]	; 29cf8 <__assert_fail@plt+0x1755c>
   2a414:	mov	r0, #0
   2a418:	bl	1222c <dcgettext@plt>
   2a41c:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a420:	b	29b50 <__assert_fail@plt+0x173b4>
   2a424:	ldr	r0, [pc, #-1840]	; 29cfc <__assert_fail@plt+0x17560>
   2a428:	mvn	r1, #0
   2a42c:	subs	r2, r0, r8
   2a430:	sbcs	r3, r1, r9
   2a434:	asr	r1, r2, #31
   2a438:	mov	ip, r6
   2a43c:	movvs	ip, #1
   2a440:	cmp	r3, r1
   2a444:	cmpeq	r2, r2
   2a448:	movne	ip, #1
   2a44c:	str	r2, [sp, #160]	; 0xa0
   2a450:	and	r7, ip, #1
   2a454:	b	29ea8 <__assert_fail@plt+0x1770c>
   2a458:	mov	r2, #5
   2a45c:	ldr	r1, [pc, #-1892]	; 29d00 <__assert_fail@plt+0x17564>
   2a460:	b	2a278 <__assert_fail@plt+0x17adc>
   2a464:	ldr	r6, [sp, #44]	; 0x2c
   2a468:	b	29b64 <__assert_fail@plt+0x173c8>
   2a46c:	ldr	r1, [pc, #-1904]	; 29d04 <__assert_fail@plt+0x17568>
   2a470:	str	r3, [sp, #620]	; 0x26c
   2a474:	mov	r3, #0
   2a478:	str	r2, [sp, #628]	; 0x274
   2a47c:	str	r1, [sp, #624]	; 0x270
   2a480:	str	r3, [sp, #632]	; 0x278
   2a484:	b	299d8 <__assert_fail@plt+0x1723c>
   2a488:	mov	r0, r3
   2a48c:	mov	r2, #5
   2a490:	ldr	r1, [pc, #-1936]	; 29d08 <__assert_fail@plt+0x1756c>
   2a494:	bl	1222c <dcgettext@plt>
   2a498:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2a49c:	b	29a78 <__assert_fail@plt+0x172dc>
   2a4a0:	ldr	r2, [pc, #-1948]	; 29d0c <__assert_fail@plt+0x17570>
   2a4a4:	add	r0, sp, #896	; 0x380
   2a4a8:	add	r1, sp, #896	; 0x380
   2a4ac:	mov	r3, #88	; 0x58
   2a4b0:	strh	r2, [r0]
   2a4b4:	add	r1, r1, #3
   2a4b8:	ldr	r0, [sp, #440]	; 0x1b8
   2a4bc:	strb	r3, [sp, #898]	; 0x382
   2a4c0:	bl	25b20 <__assert_fail@plt+0x13384>
   2a4c4:	add	r0, sp, #896	; 0x380
   2a4c8:	bl	40cd0 <fts_children@@Base+0xf234>
   2a4cc:	subs	r3, r0, #0
   2a4d0:	mov	r8, r3
   2a4d4:	beq	2b2ec <__assert_fail@plt+0x18b50>
   2a4d8:	ldr	r3, [sp, #184]	; 0xb8
   2a4dc:	ldr	r1, [sp, #188]	; 0xbc
   2a4e0:	ldr	r2, [sp, #192]	; 0xc0
   2a4e4:	str	r3, [sp, #140]	; 0x8c
   2a4e8:	ldr	r3, [sp, #196]	; 0xc4
   2a4ec:	str	r1, [sp, #144]	; 0x90
   2a4f0:	ldr	r1, [sp, #200]	; 0xc8
   2a4f4:	str	r2, [sp, #148]	; 0x94
   2a4f8:	str	r3, [sp, #152]	; 0x98
   2a4fc:	ldr	r2, [sp, #204]	; 0xcc
   2a500:	ldr	r3, [sp, #216]	; 0xd8
   2a504:	str	r1, [sp, #156]	; 0x9c
   2a508:	add	r1, sp, #140	; 0x8c
   2a50c:	str	r2, [sp, #160]	; 0xa0
   2a510:	str	r3, [sp, #172]	; 0xac
   2a514:	str	r5, [sp, #164]	; 0xa4
   2a518:	bl	40ff0 <fts_children@@Base+0xf554>
   2a51c:	add	r1, sp, #140	; 0x8c
   2a520:	mov	fp, r0
   2a524:	add	r0, sp, #184	; 0xb8
   2a528:	bl	25aa0 <__assert_fail@plt+0x13304>
   2a52c:	mov	r4, r0
   2a530:	mov	r0, r8
   2a534:	bl	40f48 <fts_children@@Base+0xf4ac>
   2a538:	cmp	r4, #0
   2a53c:	beq	29fd8 <__assert_fail@plt+0x1783c>
   2a540:	ldr	r3, [sp, #576]	; 0x240
   2a544:	cmp	r3, #0
   2a548:	beq	2aab0 <__assert_fail@plt+0x18314>
   2a54c:	ldr	r3, [sp, #572]	; 0x23c
   2a550:	cmp	r3, #0
   2a554:	bne	2afbc <__assert_fail@plt+0x18820>
   2a558:	ldrd	r4, [sl]
   2a55c:	cmp	r4, #1
   2a560:	sbcs	r3, r5, #0
   2a564:	strd	r4, [sp, #32]
   2a568:	blt	2a590 <__assert_fail@plt+0x17df4>
   2a56c:	ldr	r0, [sp, #164]	; 0xa4
   2a570:	ldr	r1, [sp, #432]	; 0x1b0
   2a574:	cmp	r0, r1
   2a578:	beq	2a590 <__assert_fail@plt+0x17df4>
   2a57c:	subs	r3, r4, #1
   2a580:	str	r3, [sp, #32]
   2a584:	ldr	r3, [sp, #36]	; 0x24
   2a588:	sbc	r3, r3, #0
   2a58c:	str	r3, [sp, #36]	; 0x24
   2a590:	ldrd	r0, [sp, #32]
   2a594:	mov	r4, #0
   2a598:	cmp	r1, r0, asr #31
   2a59c:	bne	2b298 <__assert_fail@plt+0x18afc>
   2a5a0:	mov	r3, #7
   2a5a4:	smull	r2, r3, r0, r3
   2a5a8:	mov	r8, r2
   2a5ac:	mov	r0, r3
   2a5b0:	cmp	r4, #0
   2a5b4:	mov	r3, r0
   2a5b8:	bne	2affc <__assert_fail@plt+0x18860>
   2a5bc:	ldr	ip, [sp, #164]	; 0xa4
   2a5c0:	ldr	r0, [sp, #432]	; 0x1b0
   2a5c4:	ldr	r1, [pc, #-2236]	; 29d10 <__assert_fail@plt+0x17574>
   2a5c8:	sub	r0, r0, ip
   2a5cc:	add	r0, r0, #7
   2a5d0:	smull	ip, r1, r1, r0
   2a5d4:	add	ip, r1, r0
   2a5d8:	asr	r1, r0, #31
   2a5dc:	rsb	r1, r1, ip, asr #2
   2a5e0:	rsb	r1, r1, r1, lsl #3
   2a5e4:	sub	r0, r0, r1
   2a5e8:	adds	r4, r0, r8
   2a5ec:	asr	r1, r0, #31
   2a5f0:	adcs	r5, r1, r3
   2a5f4:	bvs	2affc <__assert_fail@plt+0x18860>
   2a5f8:	ldr	r2, [sp, #152]	; 0x98
   2a5fc:	adds	r0, r4, r2
   2a600:	asr	r3, r2, #31
   2a604:	adcs	r1, r5, r3
   2a608:	asr	r3, r0, #31
   2a60c:	movvs	r4, #1
   2a610:	movvc	r4, #0
   2a614:	cmp	r1, r3
   2a618:	cmpeq	r0, r0
   2a61c:	movne	r4, #1
   2a620:	cmp	r4, #0
   2a624:	str	r0, [sp, #152]	; 0x98
   2a628:	bne	2affc <__assert_fail@plt+0x18860>
   2a62c:	mvn	r3, #0
   2a630:	add	r1, sp, #140	; 0x8c
   2a634:	ldr	r0, [sp, #44]	; 0x2c
   2a638:	str	r3, [sp, #172]	; 0xac
   2a63c:	bl	40ff0 <fts_children@@Base+0xf554>
   2a640:	cmn	r0, #1
   2a644:	mov	fp, r0
   2a648:	beq	2affc <__assert_fail@plt+0x18860>
   2a64c:	ldrb	r8, [sp, #597]	; 0x255
   2a650:	cmp	r8, #0
   2a654:	bne	2aa6c <__assert_fail@plt+0x182d0>
   2a658:	ldrd	r2, [sl, #88]	; 0x58
   2a65c:	ldr	r1, [sl, #104]	; 0x68
   2a660:	ldr	ip, [sl, #108]	; 0x6c
   2a664:	strd	r2, [sp, #32]
   2a668:	ldrd	r2, [sl, #96]	; 0x60
   2a66c:	ldr	r0, [sp, #32]
   2a670:	orr	r0, r2, r0
   2a674:	orr	r1, r0, r1
   2a678:	mov	r4, r1
   2a67c:	ldr	r1, [sp, #36]	; 0x24
   2a680:	mov	r0, r4
   2a684:	orr	r1, r3, r1
   2a688:	orr	r1, r1, ip
   2a68c:	orrs	r1, r0, r1
   2a690:	beq	2ae10 <__assert_fail@plt+0x18674>
   2a694:	ldrd	r4, [sp, #32]
   2a698:	ldr	r0, [sp, #160]	; 0xa0
   2a69c:	adds	r8, r0, r4
   2a6a0:	asr	r1, r0, #31
   2a6a4:	adcs	r9, r1, r5
   2a6a8:	asr	r1, r8, #31
   2a6ac:	movvs	ip, #1
   2a6b0:	movvc	ip, #0
   2a6b4:	cmp	r9, r1
   2a6b8:	cmpeq	r8, r8
   2a6bc:	bne	29b50 <__assert_fail@plt+0x173b4>
   2a6c0:	cmp	ip, #0
   2a6c4:	moveq	r5, r8
   2a6c8:	bne	29b50 <__assert_fail@plt+0x173b4>
   2a6cc:	ldr	r0, [sp, #156]	; 0x9c
   2a6d0:	adds	r8, r0, r2
   2a6d4:	asr	r1, r0, #31
   2a6d8:	adcs	r9, r1, r3
   2a6dc:	asr	r1, r8, #31
   2a6e0:	movvs	r3, #1
   2a6e4:	movvc	r3, #0
   2a6e8:	cmp	r9, r1
   2a6ec:	cmpeq	r8, r8
   2a6f0:	strd	r8, [sp, #32]
   2a6f4:	bne	2af90 <__assert_fail@plt+0x187f4>
   2a6f8:	cmp	r3, #0
   2a6fc:	bne	2af90 <__assert_fail@plt+0x187f4>
   2a700:	ldrd	r2, [sl, #104]	; 0x68
   2a704:	ldr	r0, [sp, #152]	; 0x98
   2a708:	adds	r8, r0, r2
   2a70c:	asr	r1, r0, #31
   2a710:	adcs	r9, r1, r3
   2a714:	asr	r3, r8, #31
   2a718:	mov	r0, r8
   2a71c:	mov	r1, r9
   2a720:	movvs	r4, #1
   2a724:	movvc	r4, #0
   2a728:	cmp	r9, r3
   2a72c:	cmpeq	r8, r8
   2a730:	strd	r0, [sp, #48]	; 0x30
   2a734:	bne	2af90 <__assert_fail@plt+0x187f4>
   2a738:	cmp	r4, #0
   2a73c:	bne	2af90 <__assert_fail@plt+0x187f4>
   2a740:	ldr	r0, [sp, #32]
   2a744:	ldr	r3, [sp, #192]	; 0xc0
   2a748:	ldr	r1, [sp, #188]	; 0xbc
   2a74c:	str	r0, [sp, #156]	; 0x9c
   2a750:	ldr	r0, [sp, #48]	; 0x30
   2a754:	ldr	r2, [sp, #184]	; 0xb8
   2a758:	str	r3, [sp, #148]	; 0x94
   2a75c:	ldr	r3, [sp, #216]	; 0xd8
   2a760:	str	r0, [sp, #152]	; 0x98
   2a764:	str	r1, [sp, #144]	; 0x90
   2a768:	ldr	r0, [sp, #44]	; 0x2c
   2a76c:	add	r1, sp, #140	; 0x8c
   2a770:	str	r5, [sp, #160]	; 0xa0
   2a774:	str	r2, [sp, #140]	; 0x8c
   2a778:	str	r3, [sp, #172]	; 0xac
   2a77c:	bl	40ff0 <fts_children@@Base+0xf554>
   2a780:	cmn	r0, #1
   2a784:	mov	fp, r0
   2a788:	beq	2b464 <__assert_fail@plt+0x18cc8>
   2a78c:	ldrb	r8, [sp, #597]	; 0x255
   2a790:	cmp	r8, #0
   2a794:	mov	r7, r8
   2a798:	bne	2acc8 <__assert_fail@plt+0x1852c>
   2a79c:	ldr	r3, [sp, #592]	; 0x250
   2a7a0:	cmp	r3, #0
   2a7a4:	beq	2a7f8 <__assert_fail@plt+0x1805c>
   2a7a8:	ldr	r2, [sp, #440]	; 0x1b8
   2a7ac:	ldr	r1, [sp, #176]	; 0xb0
   2a7b0:	asr	r5, r2, #31
   2a7b4:	subs	r2, r1, r2
   2a7b8:	rsc	r3, r5, r1, asr #31
   2a7bc:	adds	r4, r2, r0
   2a7c0:	adc	r5, r3, r0, asr #31
   2a7c4:	adds	r3, r4, #-2147483648	; 0x80000000
   2a7c8:	str	r3, [sp, #120]	; 0x78
   2a7cc:	adc	r3, r5, #0
   2a7d0:	str	r3, [sp, #124]	; 0x7c
   2a7d4:	ldrd	r2, [sp, #120]	; 0x78
   2a7d8:	mov	r1, #0
   2a7dc:	mvn	r0, #0
   2a7e0:	cmp	r3, r1
   2a7e4:	cmpeq	r2, r0
   2a7e8:	bhi	29b50 <__assert_fail@plt+0x173b4>
   2a7ec:	mov	fp, r4
   2a7f0:	cmp	r7, #0
   2a7f4:	bne	2b064 <__assert_fail@plt+0x188c8>
   2a7f8:	ldr	r7, [sl, #112]	; 0x70
   2a7fc:	ldr	r9, [sl, #116]	; 0x74
   2a800:	mov	ip, #0
   2a804:	cmp	r9, r7, asr #31
   2a808:	bne	2b414 <__assert_fail@plt+0x18c78>
   2a80c:	mov	r2, #3600	; 0xe10
   2a810:	smull	r2, r3, r7, r2
   2a814:	mov	r4, r2
   2a818:	cmp	ip, #0
   2a81c:	mov	r0, r4
   2a820:	bne	29b50 <__assert_fail@plt+0x173b4>
   2a824:	adds	r2, fp, r0
   2a828:	asr	r5, fp, #31
   2a82c:	adcs	r3, r5, r3
   2a830:	strd	r2, [sp, #80]	; 0x50
   2a834:	movvs	r3, #1
   2a838:	movvc	r3, #0
   2a83c:	str	r3, [sp, #48]	; 0x30
   2a840:	bvs	29b50 <__assert_fail@plt+0x173b4>
   2a844:	ldr	fp, [sl, #120]	; 0x78
   2a848:	ldr	r3, [sl, #124]	; 0x7c
   2a84c:	mov	ip, #0
   2a850:	cmp	r3, fp, asr #31
   2a854:	str	r3, [sp, #72]	; 0x48
   2a858:	bne	2b398 <__assert_fail@plt+0x18bfc>
   2a85c:	mov	r2, #60	; 0x3c
   2a860:	smull	r2, r3, fp, r2
   2a864:	mov	r4, r2
   2a868:	mov	r1, r3
   2a86c:	cmp	ip, #0
   2a870:	mov	r2, r4
   2a874:	bne	2b0ec <__assert_fail@plt+0x18950>
   2a878:	ldrd	r4, [sp, #80]	; 0x50
   2a87c:	adds	r0, r4, r2
   2a880:	adcs	r1, r5, r1
   2a884:	bvs	2b0ec <__assert_fail@plt+0x18950>
   2a888:	ldrd	r2, [sl, #128]	; 0x80
   2a88c:	adds	r4, r0, r2
   2a890:	adcs	r5, r1, r3
   2a894:	strd	r2, [sp, #80]	; 0x50
   2a898:	strd	r4, [sp, #96]	; 0x60
   2a89c:	bvs	2b0ec <__assert_fail@plt+0x18950>
   2a8a0:	ldr	r3, [sp, #560]	; 0x230
   2a8a4:	mov	r1, r3
   2a8a8:	mov	r4, r1
   2a8ac:	asr	r5, r1, #31
   2a8b0:	str	r3, [sp, #104]	; 0x68
   2a8b4:	ldr	r3, [sp, #508]	; 0x1fc
   2a8b8:	strd	r4, [sp, #32]
   2a8bc:	adds	r4, r1, r3
   2a8c0:	adc	r5, r5, r3, asr #31
   2a8c4:	mov	r0, r4
   2a8c8:	mov	r1, r5
   2a8cc:	add	r3, pc, #828	; 0x33c
   2a8d0:	ldrd	r2, [r3]
   2a8d4:	strd	r4, [sp, #88]	; 0x58
   2a8d8:	bl	43cf4 <fts_children@@Base+0x12258>
   2a8dc:	ldr	r4, [pc, #820]	; 2ac18 <__assert_fail@plt+0x1847c>
   2a8e0:	mov	r5, #0
   2a8e4:	adds	r0, r2, r4
   2a8e8:	adc	r1, r3, r5
   2a8ec:	mov	r2, r4
   2a8f0:	mov	r3, r5
   2a8f4:	bl	43cf4 <fts_children@@Base+0x12258>
   2a8f8:	mov	r0, r2
   2a8fc:	str	r2, [sp, #120]	; 0x78
   2a900:	mov	r1, r3
   2a904:	mov	r2, r4
   2a908:	mov	r3, r5
   2a90c:	ldrd	r4, [sp, #88]	; 0x58
   2a910:	subs	r0, r4, r0
   2a914:	sbc	r1, r5, r1
   2a918:	bl	43cf4 <fts_children@@Base+0x12258>
   2a91c:	ldrd	r2, [sp, #96]	; 0x60
   2a920:	asr	r1, r0, #31
   2a924:	adds	r4, r2, r0
   2a928:	adcs	r5, r3, r1
   2a92c:	movvs	r3, #1
   2a930:	movvc	r3, #0
   2a934:	mov	lr, r3
   2a938:	bvs	2b0ec <__assert_fail@plt+0x18950>
   2a93c:	adds	r3, r4, #-2147483648	; 0x80000000
   2a940:	str	r3, [sp, #112]	; 0x70
   2a944:	adc	r3, r5, #0
   2a948:	str	r3, [sp, #116]	; 0x74
   2a94c:	ldrd	r0, [sp, #112]	; 0x70
   2a950:	mov	r3, #0
   2a954:	mvn	r2, #0
   2a958:	cmp	r1, r3
   2a95c:	cmpeq	r0, r2
   2a960:	bhi	2b0ec <__assert_fail@plt+0x18950>
   2a964:	ldr	r3, [sp, #48]	; 0x30
   2a968:	ldr	r2, [sp, #120]	; 0x78
   2a96c:	cmp	r3, #0
   2a970:	ldr	r3, [sp, #68]	; 0x44
   2a974:	str	r4, [r3]
   2a978:	str	r2, [r3, #4]
   2a97c:	beq	2a9b0 <__assert_fail@plt+0x18214>
   2a980:	orr	r3, fp, r7
   2a984:	ldrd	r6, [sp, #80]	; 0x50
   2a988:	ldr	r2, [sp, #72]	; 0x48
   2a98c:	ldr	ip, [sp, #104]	; 0x68
   2a990:	orr	r3, r3, r6
   2a994:	orr	r0, r3, ip
   2a998:	orr	r2, r2, r9
   2a99c:	ldr	r3, [sp, #36]	; 0x24
   2a9a0:	orr	r2, r2, r7
   2a9a4:	orr	r1, r2, r3
   2a9a8:	orrs	r3, r0, r1
   2a9ac:	bne	2b4e0 <__assert_fail@plt+0x18d44>
   2a9b0:	mov	r4, r8
   2a9b4:	b	29a3c <__assert_fail@plt+0x172a0>
   2a9b8:	ldr	r1, [sp, #444]	; 0x1bc
   2a9bc:	ldrd	r2, [sl, #64]	; 0x40
   2a9c0:	cmp	r1, #0
   2a9c4:	beq	2af2c <__assert_fail@plt+0x18790>
   2a9c8:	cmp	r1, #1
   2a9cc:	beq	2aee4 <__assert_fail@plt+0x18748>
   2a9d0:	cmp	r3, #0
   2a9d4:	cmpeq	r2, #23
   2a9d8:	bhi	2b264 <__assert_fail@plt+0x18ac8>
   2a9dc:	str	r2, [sp, #148]	; 0x94
   2a9e0:	ldr	r5, [sl, #72]	; 0x48
   2a9e4:	ldr	r3, [sp, #504]	; 0x1f8
   2a9e8:	cmp	ip, #0
   2a9ec:	str	r5, [sp, #144]	; 0x90
   2a9f0:	str	r3, [sp, #140]	; 0x8c
   2a9f4:	bne	2ae84 <__assert_fail@plt+0x186e8>
   2a9f8:	ldr	ip, [sp, #148]	; 0x94
   2a9fc:	ldr	r2, [sp, #572]	; 0x23c
   2aa00:	ldr	r1, [sp, #576]	; 0x240
   2aa04:	orr	r2, r2, r1
   2aa08:	orrs	r2, r2, r0
   2aa0c:	beq	29f6c <__assert_fail@plt+0x177d0>
   2aa10:	b	29f64 <__assert_fail@plt+0x177c8>
   2aa14:	mov	r0, r6
   2aa18:	mov	r2, #5
   2aa1c:	ldr	r1, [pc, #504]	; 2ac1c <__assert_fail@plt+0x18480>
   2aa20:	bl	1222c <dcgettext@plt>
   2aa24:	ldr	r3, [sp, #64]	; 0x40
   2aa28:	mov	r1, #1
   2aa2c:	mov	r2, r0
   2aa30:	mov	r0, r5
   2aa34:	bl	12580 <__fprintf_chk@plt>
   2aa38:	b	2a28c <__assert_fail@plt+0x17af0>
   2aa3c:	mov	r2, #5
   2aa40:	ldr	r1, [pc, #472]	; 2ac20 <__assert_fail@plt+0x18484>
   2aa44:	ldr	r0, [sp, #64]	; 0x40
   2aa48:	b	2a278 <__assert_fail@plt+0x17adc>
   2aa4c:	mov	r2, #5
   2aa50:	ldr	r1, [pc, #460]	; 2ac24 <__assert_fail@plt+0x18488>
   2aa54:	mov	r0, #0
   2aa58:	bl	1222c <dcgettext@plt>
   2aa5c:	mov	r2, r8
   2aa60:	mov	r3, r9
   2aa64:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2aa68:	b	2a400 <__assert_fail@plt+0x17c64>
   2aa6c:	mov	r2, #5
   2aa70:	mov	r0, r4
   2aa74:	ldr	r1, [pc, #428]	; 2ac28 <__assert_fail@plt+0x1848c>
   2aa78:	bl	1222c <dcgettext@plt>
   2aa7c:	add	r1, sp, #896	; 0x380
   2aa80:	mov	r4, r0
   2aa84:	add	r0, sp, #416	; 0x1a0
   2aa88:	bl	260a8 <__assert_fail@plt+0x1390c>
   2aa8c:	add	r2, sp, #696	; 0x2b8
   2aa90:	add	r1, sp, #416	; 0x1a0
   2aa94:	mov	r5, r0
   2aa98:	add	r0, sp, #140	; 0x8c
   2aa9c:	bl	25fe0 <__assert_fail@plt+0x13844>
   2aaa0:	mov	r1, r5
   2aaa4:	mov	r2, r0
   2aaa8:	mov	r0, r4
   2aaac:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2aab0:	ldrb	r8, [sp, #597]	; 0x255
   2aab4:	cmp	r8, #0
   2aab8:	beq	2a658 <__assert_fail@plt+0x17ebc>
   2aabc:	ldr	r3, [sp, #572]	; 0x23c
   2aac0:	ldr	r0, [sp, #576]	; 0x240
   2aac4:	cmp	r3, #0
   2aac8:	bne	2b110 <__assert_fail@plt+0x18974>
   2aacc:	cmp	r0, #0
   2aad0:	beq	2b1e8 <__assert_fail@plt+0x18a4c>
   2aad4:	add	r4, sp, #696	; 0x2b8
   2aad8:	mov	r2, #5
   2aadc:	ldr	r1, [pc, #328]	; 2ac2c <__assert_fail@plt+0x18490>
   2aae0:	mov	r0, #0
   2aae4:	bl	1222c <dcgettext@plt>
   2aae8:	mov	r2, r4
   2aaec:	add	r1, sp, #416	; 0x1a0
   2aaf0:	mov	r5, r0
   2aaf4:	add	r0, sp, #140	; 0x8c
   2aaf8:	bl	25fe0 <__assert_fail@plt+0x13844>
   2aafc:	mov	r1, r0
   2ab00:	mov	r0, r5
   2ab04:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2ab08:	ldrd	r4, [sl, #88]	; 0x58
   2ab0c:	ldrd	r2, [sl, #96]	; 0x60
   2ab10:	ldrd	r8, [sl, #104]	; 0x68
   2ab14:	strd	r4, [sp, #32]
   2ab18:	orr	r0, r4, r2
   2ab1c:	orr	ip, r0, r8
   2ab20:	strd	r8, [sp, #48]	; 0x30
   2ab24:	mov	r4, ip
   2ab28:	ldr	ip, [sp, #52]	; 0x34
   2ab2c:	orr	r1, r5, r3
   2ab30:	orr	ip, r1, ip
   2ab34:	ldrb	r8, [sp, #597]	; 0x255
   2ab38:	mov	r5, ip
   2ab3c:	orrs	ip, r4, r5
   2ab40:	mov	r7, r8
   2ab44:	beq	2ae10 <__assert_fail@plt+0x18674>
   2ab48:	cmp	r8, #0
   2ab4c:	beq	2a694 <__assert_fail@plt+0x17ef8>
   2ab50:	orrs	r3, r0, r1
   2ab54:	beq	2b274 <__assert_fail@plt+0x18ad8>
   2ab58:	ldr	r3, [sp, #152]	; 0x98
   2ab5c:	cmp	r3, #15
   2ab60:	beq	2ab80 <__assert_fail@plt+0x183e4>
   2ab64:	mov	r2, #5
   2ab68:	ldr	r1, [pc, #192]	; 2ac30 <__assert_fail@plt+0x18494>
   2ab6c:	mov	r0, #0
   2ab70:	bl	1222c <dcgettext@plt>
   2ab74:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2ab78:	ldrd	r2, [sl, #104]	; 0x68
   2ab7c:	strd	r2, [sp, #48]	; 0x30
   2ab80:	ldrd	r2, [sp, #48]	; 0x30
   2ab84:	orrs	r3, r2, r3
   2ab88:	bne	2b274 <__assert_fail@plt+0x18ad8>
   2ab8c:	ldrd	r4, [sl, #88]	; 0x58
   2ab90:	ldr	r2, [sp, #160]	; 0xa0
   2ab94:	adds	r0, r2, r4
   2ab98:	asr	r3, r2, #31
   2ab9c:	adcs	r1, r3, r5
   2aba0:	asr	r3, r0, #31
   2aba4:	movvs	ip, #1
   2aba8:	movvc	ip, #0
   2abac:	cmp	r1, r3
   2abb0:	cmpeq	r0, r0
   2abb4:	bne	2af90 <__assert_fail@plt+0x187f4>
   2abb8:	cmp	ip, #0
   2abbc:	bne	2af90 <__assert_fail@plt+0x187f4>
   2abc0:	ldrd	r2, [sl, #96]	; 0x60
   2abc4:	mov	r5, r0
   2abc8:	b	2a6cc <__assert_fail@plt+0x17f30>
   2abcc:	mov	r3, #0
   2abd0:	cmp	ip, #0
   2abd4:	str	r3, [sp, #140]	; 0x8c
   2abd8:	str	r3, [sp, #144]	; 0x90
   2abdc:	str	r3, [sp, #148]	; 0x94
   2abe0:	str	r3, [sp, #508]	; 0x1fc
   2abe4:	moveq	r5, ip
   2abe8:	moveq	r3, ip
   2abec:	beq	2a9fc <__assert_fail@plt+0x18260>
   2abf0:	ldr	r0, [pc, #60]	; 2ac34 <__assert_fail@plt+0x18498>
   2abf4:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2abf8:	add	r3, sp, #140	; 0x8c
   2abfc:	ldr	r0, [sp, #588]	; 0x24c
   2ac00:	ldm	r3, {r3, r5, ip}
   2ac04:	ldr	r4, [sp, #152]	; 0x98
   2ac08:	ldr	lr, [sp, #156]	; 0x9c
   2ac0c:	b	2a9fc <__assert_fail@plt+0x18260>
   2ac10:	blcc	fe6dd418 <stdout@@GLIBC_2.4+0xfe680ed4>
   2ac14:	andeq	r0, r0, r0
   2ac18:	blcc	fe6dd420 <stdout@@GLIBC_2.4+0xfe680edc>
   2ac1c:	strdeq	r9, [r4], -r0
   2ac20:	andeq	r9, r4, ip, lsl #12
   2ac24:	andeq	r9, r4, r8, lsl r7
   2ac28:	strdeq	r9, [r4], -r8
   2ac2c:	muleq	r4, r8, sl
   2ac30:			; <UNDEFINED> instruction: 0x00049ab4
   2ac34:	andeq	r9, r4, r8, ror #15
   2ac38:	andeq	r9, r4, r4, asr #23
   2ac3c:	andeq	r9, r4, r4, lsl #24
   2ac40:	andeq	r9, r4, r0, lsr #24
   2ac44:	andeq	r9, r4, r0, ror #24
   2ac48:	muleq	r4, ip, ip
   2ac4c:	andeq	r9, r4, r0, asr #25
   2ac50:	andeq	r9, r4, r4, ror #25
   2ac54:	andeq	r9, r4, ip, ror r7
   2ac58:	andeq	r9, r4, ip, lsr #15
   2ac5c:	ldrdeq	r9, [r4], -r8
   2ac60:			; <UNDEFINED> instruction: 0x000493b4
   2ac64:	andeq	r9, r4, r0, lsl r5
   2ac68:	andeq	r9, r4, r0, ror #14
   2ac6c:	andeq	r9, r4, r0, ror #22
   2ac70:	andeq	r0, r0, r7, ror r8
   2ac74:	andeq	r9, r4, r0, ror fp
   2ac78:	andeq	r9, r4, ip, asr sl
   2ac7c:	andeq	r9, r4, r8, lsr #19
   2ac80:	andeq	r9, r4, r0, lsl sp
   2ac84:	andeq	r9, r4, ip, lsr #26
   2ac88:	andeq	r9, r4, ip, lsr r8
   2ac8c:	andeq	r9, r4, r0, ror #16
   2ac90:	andeq	r9, r4, r0, lsl #17
   2ac94:	andeq	r5, r4, r8, lsl #31
   2ac98:	andeq	r9, r4, r4, lsl r5
   2ac9c:	andeq	r9, r4, r8, lsl sl
   2aca0:	andeq	r9, r4, r4, asr #20
   2aca4:	andeq	r8, r4, r0, lsr r6
   2aca8:	andeq	r9, r4, r8, lsl fp
   2acac:	andeq	r9, r4, ip, lsl r8
   2acb0:	andeq	r9, r4, r4, lsl #23
   2acb4:	andeq	r9, r4, r8, lsr #18
   2acb8:	strdeq	r9, [r4], -r4
   2acbc:	andeq	r9, r4, ip, asr sp
   2acc0:	andeq	r9, r4, r8, lsr #27
   2acc4:	andeq	r9, r4, ip, asr #27
   2acc8:	ldr	r1, [pc, #-152]	; 2ac38 <__assert_fail@plt+0x1849c>
   2accc:	mov	r2, #5
   2acd0:	mov	r0, r4
   2acd4:	bl	1222c <dcgettext@plt>
   2acd8:	ldrd	r2, [sl, #104]	; 0x68
   2acdc:	ldrd	r8, [sl, #96]	; 0x60
   2ace0:	strd	r2, [sp, #8]
   2ace4:	strd	r8, [sp]
   2ace8:	ldrd	r2, [sl, #88]	; 0x58
   2acec:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2acf0:	mov	r2, #5
   2acf4:	ldr	r1, [pc, #-192]	; 2ac3c <__assert_fail@plt+0x184a0>
   2acf8:	mov	r0, r4
   2acfc:	bl	1222c <dcgettext@plt>
   2ad00:	add	r2, sp, #696	; 0x2b8
   2ad04:	add	r1, sp, #416	; 0x1a0
   2ad08:	mov	r7, r0
   2ad0c:	add	r0, sp, #140	; 0x8c
   2ad10:	bl	25fe0 <__assert_fail@plt+0x13844>
   2ad14:	mov	r1, r0
   2ad18:	mov	r0, r7
   2ad1c:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2ad20:	ldr	r3, [sp, #216]	; 0xd8
   2ad24:	cmn	r3, #1
   2ad28:	beq	2ad4c <__assert_fail@plt+0x185b0>
   2ad2c:	ldr	r2, [sp, #172]	; 0xac
   2ad30:	cmp	r3, r2
   2ad34:	beq	2ad4c <__assert_fail@plt+0x185b0>
   2ad38:	mov	r2, #5
   2ad3c:	ldr	r1, [pc, #-260]	; 2ac40 <__assert_fail@plt+0x184a4>
   2ad40:	mov	r0, r4
   2ad44:	bl	1222c <dcgettext@plt>
   2ad48:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2ad4c:	ldrd	r2, [sl, #104]	; 0x68
   2ad50:	orrs	r3, r2, r3
   2ad54:	bne	2ae08 <__assert_fail@plt+0x1866c>
   2ad58:	ldr	r3, [sp, #152]	; 0x98
   2ad5c:	ldr	r2, [sp, #48]	; 0x30
   2ad60:	cmp	r2, r3
   2ad64:	bne	2ad84 <__assert_fail@plt+0x185e8>
   2ad68:	ldrd	r2, [sl, #96]	; 0x60
   2ad6c:	orrs	r3, r2, r3
   2ad70:	bne	2ae08 <__assert_fail@plt+0x1866c>
   2ad74:	ldr	r3, [sp, #156]	; 0x9c
   2ad78:	ldr	r2, [sp, #32]
   2ad7c:	cmp	r2, r3
   2ad80:	beq	2ae08 <__assert_fail@plt+0x1866c>
   2ad84:	mov	r2, #5
   2ad88:	ldr	r1, [pc, #-332]	; 2ac44 <__assert_fail@plt+0x184a8>
   2ad8c:	mov	r0, #0
   2ad90:	bl	1222c <dcgettext@plt>
   2ad94:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2ad98:	mov	r2, #5
   2ad9c:	ldr	r1, [pc, #-348]	; 2ac48 <__assert_fail@plt+0x184ac>
   2ada0:	mov	r0, #0
   2ada4:	bl	1222c <dcgettext@plt>
   2ada8:	add	r1, sp, #652	; 0x28c
   2adac:	mov	r4, r0
   2adb0:	mov	r0, r5
   2adb4:	bl	25c3c <__assert_fail@plt+0x134a0>
   2adb8:	ldr	r2, [sp, #32]
   2adbc:	ldr	r3, [sp, #48]	; 0x30
   2adc0:	add	r2, r2, #1
   2adc4:	mov	r1, r0
   2adc8:	mov	r0, r4
   2adcc:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2add0:	mov	r2, #5
   2add4:	ldr	r1, [pc, #-400]	; 2ac4c <__assert_fail@plt+0x184b0>
   2add8:	mov	r0, #0
   2addc:	bl	1222c <dcgettext@plt>
   2ade0:	add	r1, sp, #652	; 0x28c
   2ade4:	mov	r4, r0
   2ade8:	ldr	r0, [sp, #160]	; 0xa0
   2adec:	bl	25c3c <__assert_fail@plt+0x134a0>
   2adf0:	ldr	r2, [sp, #156]	; 0x9c
   2adf4:	ldr	r3, [sp, #152]	; 0x98
   2adf8:	add	r2, r2, #1
   2adfc:	mov	r1, r0
   2ae00:	mov	r0, r4
   2ae04:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2ae08:	ldrb	r8, [sp, #597]	; 0x255
   2ae0c:	mov	r7, r8
   2ae10:	ldr	r3, [sp, #592]	; 0x250
   2ae14:	cmp	r3, #0
   2ae18:	beq	2a7f0 <__assert_fail@plt+0x18054>
   2ae1c:	ldr	r2, [sp, #440]	; 0x1b8
   2ae20:	ldr	r1, [sp, #176]	; 0xb0
   2ae24:	mvn	r0, #0
   2ae28:	asr	r5, r2, #31
   2ae2c:	subs	r2, r1, r2
   2ae30:	rsc	r3, r5, r1, asr #31
   2ae34:	adds	r4, r2, fp
   2ae38:	adc	r5, r3, fp, asr #31
   2ae3c:	adds	r3, r4, #-2147483648	; 0x80000000
   2ae40:	str	r3, [sp, #104]	; 0x68
   2ae44:	adc	r3, r5, #0
   2ae48:	str	r3, [sp, #108]	; 0x6c
   2ae4c:	ldrd	r2, [sp, #104]	; 0x68
   2ae50:	mov	r1, #0
   2ae54:	cmp	r3, r1
   2ae58:	cmpeq	r2, r0
   2ae5c:	bls	2a7ec <__assert_fail@plt+0x18050>
   2ae60:	cmp	r7, #0
   2ae64:	beq	29b50 <__assert_fail@plt+0x173b4>
   2ae68:	mov	r2, #5
   2ae6c:	ldr	r1, [pc, #-548]	; 2ac50 <__assert_fail@plt+0x184b4>
   2ae70:	mov	r0, #0
   2ae74:	bl	1222c <dcgettext@plt>
   2ae78:	ldr	r1, [sp, #440]	; 0x1b8
   2ae7c:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2ae80:	b	29b50 <__assert_fail@plt+0x173b4>
   2ae84:	cmp	r0, #0
   2ae88:	movne	r0, #0
   2ae8c:	ldrne	r1, [pc, #-576]	; 2ac54 <__assert_fail@plt+0x184b8>
   2ae90:	ldreq	r1, [pc, #-576]	; 2ac58 <__assert_fail@plt+0x184bc>
   2ae94:	mov	r2, #5
   2ae98:	bl	1222c <dcgettext@plt>
   2ae9c:	ldr	ip, [sp, #140]	; 0x8c
   2aea0:	ldr	r2, [pc, #-588]	; 2ac5c <__assert_fail@plt+0x184c0>
   2aea4:	add	r4, sp, #696	; 0x2b8
   2aea8:	mov	r3, #100	; 0x64
   2aeac:	str	r2, [sp]
   2aeb0:	str	ip, [sp, #12]
   2aeb4:	mov	r2, #1
   2aeb8:	mov	r5, r0
   2aebc:	ldrd	r0, [sp, #144]	; 0x90
   2aec0:	str	r0, [sp, #8]
   2aec4:	str	r1, [sp, #4]
   2aec8:	mov	r0, r4
   2aecc:	mov	r1, r3
   2aed0:	bl	12784 <__snprintf_chk@plt>
   2aed4:	mov	r1, r4
   2aed8:	mov	r0, r5
   2aedc:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2aee0:	b	2abf8 <__assert_fail@plt+0x1845c>
   2aee4:	subs	r1, r2, #1
   2aee8:	str	r1, [sp, #96]	; 0x60
   2aeec:	sbc	r1, r3, #0
   2aef0:	str	r1, [sp, #100]	; 0x64
   2aef4:	ldrd	r8, [sp, #96]	; 0x60
   2aef8:	cmp	r9, #0
   2aefc:	cmpeq	r8, #10
   2af00:	addls	r2, r2, #12
   2af04:	bls	2a9dc <__assert_fail@plt+0x18240>
   2af08:	cmp	r3, #0
   2af0c:	cmpeq	r2, #12
   2af10:	mvnne	r3, #0
   2af14:	strne	r3, [sp, #148]	; 0x94
   2af18:	ldrne	r4, [pc, #-704]	; 2ac60 <__assert_fail@plt+0x184c4>
   2af1c:	bne	2af68 <__assert_fail@plt+0x187cc>
   2af20:	mov	r3, #12
   2af24:	str	r3, [sp, #148]	; 0x94
   2af28:	b	2a9e0 <__assert_fail@plt+0x18244>
   2af2c:	subs	r5, r2, #1
   2af30:	str	r5, [sp, #88]	; 0x58
   2af34:	sbc	r5, r3, #0
   2af38:	str	r5, [sp, #92]	; 0x5c
   2af3c:	ldrd	r8, [sp, #88]	; 0x58
   2af40:	cmp	r9, #0
   2af44:	cmpeq	r8, #10
   2af48:	bls	2a9dc <__assert_fail@plt+0x18240>
   2af4c:	cmp	r3, #0
   2af50:	cmpeq	r2, #12
   2af54:	streq	r1, [sp, #148]	; 0x94
   2af58:	beq	2a9e0 <__assert_fail@plt+0x18244>
   2af5c:	ldr	r4, [pc, #-768]	; 2ac64 <__assert_fail@plt+0x184c8>
   2af60:	mvn	r3, #0
   2af64:	str	r3, [sp, #148]	; 0x94
   2af68:	cmp	ip, #0
   2af6c:	beq	29b50 <__assert_fail@plt+0x173b4>
   2af70:	mov	r2, #5
   2af74:	ldr	r1, [pc, #-788]	; 2ac68 <__assert_fail@plt+0x184cc>
   2af78:	mov	r0, #0
   2af7c:	bl	1222c <dcgettext@plt>
   2af80:	str	r4, [sp]
   2af84:	ldrd	r2, [sl, #64]	; 0x40
   2af88:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2af8c:	b	29b50 <__assert_fail@plt+0x173b4>
   2af90:	ldrb	r3, [sp, #597]	; 0x255
   2af94:	cmp	r3, #0
   2af98:	beq	29b50 <__assert_fail@plt+0x173b4>
   2af9c:	mov	r2, #5
   2afa0:	ldr	r1, [pc, #-828]	; 2ac6c <__assert_fail@plt+0x184d0>
   2afa4:	mov	r0, #0
   2afa8:	bl	1222c <dcgettext@plt>
   2afac:	ldr	r2, [pc, #-836]	; 2ac70 <__assert_fail@plt+0x184d4>
   2afb0:	ldr	r1, [pc, #-836]	; 2ac74 <__assert_fail@plt+0x184d8>
   2afb4:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2afb8:	b	29b50 <__assert_fail@plt+0x173b4>
   2afbc:	ldrb	r8, [sp, #597]	; 0x255
   2afc0:	cmp	r8, #0
   2afc4:	beq	2a658 <__assert_fail@plt+0x17ebc>
   2afc8:	add	r4, sp, #696	; 0x2b8
   2afcc:	mov	r2, #5
   2afd0:	ldr	r1, [pc, #-864]	; 2ac78 <__assert_fail@plt+0x184dc>
   2afd4:	mov	r0, #0
   2afd8:	bl	1222c <dcgettext@plt>
   2afdc:	add	r1, sp, #896	; 0x380
   2afe0:	mov	r5, r0
   2afe4:	add	r0, sp, #416	; 0x1a0
   2afe8:	bl	260a8 <__assert_fail@plt+0x1390c>
   2afec:	mov	r1, r0
   2aff0:	mov	r0, r5
   2aff4:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2aff8:	b	2aad8 <__assert_fail@plt+0x1833c>
   2affc:	ldrb	r3, [sp, #597]	; 0x255
   2b000:	cmp	r3, #0
   2b004:	beq	29b50 <__assert_fail@plt+0x173b4>
   2b008:	mov	r2, #5
   2b00c:	ldr	r1, [pc, #-920]	; 2ac7c <__assert_fail@plt+0x184e0>
   2b010:	mov	r0, #0
   2b014:	bl	1222c <dcgettext@plt>
   2b018:	add	r1, sp, #896	; 0x380
   2b01c:	mov	r7, r0
   2b020:	add	r0, sp, #416	; 0x1a0
   2b024:	bl	260a8 <__assert_fail@plt+0x1390c>
   2b028:	add	r1, sp, #416	; 0x1a0
   2b02c:	add	r2, sp, #696	; 0x2b8
   2b030:	ldrd	r4, [sl]
   2b034:	ldr	r9, [sp, #432]	; 0x1b0
   2b038:	mov	r8, r0
   2b03c:	add	r0, sp, #140	; 0x8c
   2b040:	bl	25fe0 <__assert_fail@plt+0x13844>
   2b044:	str	r9, [sp]
   2b048:	mov	r2, r4
   2b04c:	mov	r3, r5
   2b050:	mov	r1, r8
   2b054:	str	r0, [sp, #4]
   2b058:	mov	r0, r7
   2b05c:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b060:	b	29b50 <__assert_fail@plt+0x173b4>
   2b064:	mov	r2, #5
   2b068:	ldr	r1, [pc, #-1008]	; 2ac80 <__assert_fail@plt+0x184e4>
   2b06c:	mov	r0, #0
   2b070:	bl	1222c <dcgettext@plt>
   2b074:	add	r1, sp, #416	; 0x1a0
   2b078:	add	r2, sp, #696	; 0x2b8
   2b07c:	mov	r4, r0
   2b080:	add	r0, sp, #140	; 0x8c
   2b084:	bl	25fe0 <__assert_fail@plt+0x13844>
   2b088:	mov	r2, fp
   2b08c:	asr	r3, fp, #31
   2b090:	strd	r2, [sp, #72]	; 0x48
   2b094:	mov	r1, r0
   2b098:	mov	r0, r4
   2b09c:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b0a0:	ldr	r7, [sl, #112]	; 0x70
   2b0a4:	ldr	r9, [sl, #116]	; 0x74
   2b0a8:	ldrb	r8, [sp, #597]	; 0x255
   2b0ac:	cmp	r9, r7, asr #31
   2b0b0:	mov	ip, #0
   2b0b4:	str	r8, [sp, #48]	; 0x30
   2b0b8:	bne	2b310 <__assert_fail@plt+0x18b74>
   2b0bc:	mov	r2, #3600	; 0xe10
   2b0c0:	smull	r2, r3, r7, r2
   2b0c4:	mov	r4, r2
   2b0c8:	mov	r1, r3
   2b0cc:	cmp	ip, #0
   2b0d0:	mov	r2, r4
   2b0d4:	bne	2b0ec <__assert_fail@plt+0x18950>
   2b0d8:	ldrd	r4, [sp, #72]	; 0x48
   2b0dc:	adds	r0, r4, r2
   2b0e0:	adcs	r1, r5, r1
   2b0e4:	strd	r0, [sp, #80]	; 0x50
   2b0e8:	bvc	2a844 <__assert_fail@plt+0x180a8>
   2b0ec:	ldr	r3, [sp, #48]	; 0x30
   2b0f0:	cmp	r3, #0
   2b0f4:	beq	29b50 <__assert_fail@plt+0x173b4>
   2b0f8:	mov	r2, #5
   2b0fc:	ldr	r1, [pc, #-1152]	; 2ac84 <__assert_fail@plt+0x184e8>
   2b100:	mov	r0, #0
   2b104:	bl	1222c <dcgettext@plt>
   2b108:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b10c:	b	29b50 <__assert_fail@plt+0x173b4>
   2b110:	cmp	r0, #0
   2b114:	beq	2aad4 <__assert_fail@plt+0x18338>
   2b118:	b	2afc8 <__assert_fail@plt+0x1882c>
   2b11c:	cmp	r2, #0
   2b120:	str	r3, [sp, #104]	; 0x68
   2b124:	beq	29b50 <__assert_fail@plt+0x173b4>
   2b128:	mov	r2, #5
   2b12c:	ldr	r1, [pc, #-1196]	; 2ac88 <__assert_fail@plt+0x184ec>
   2b130:	mov	r0, #0
   2b134:	bl	1222c <dcgettext@plt>
   2b138:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b13c:	mov	r2, #5
   2b140:	ldr	r1, [pc, #-1212]	; 2ac8c <__assert_fail@plt+0x184f0>
   2b144:	mov	r0, #0
   2b148:	bl	1222c <dcgettext@plt>
   2b14c:	add	r4, sp, #896	; 0x380
   2b150:	mov	r2, r4
   2b154:	add	r1, sp, #416	; 0x1a0
   2b158:	mov	r5, r0
   2b15c:	add	r0, sp, #184	; 0xb8
   2b160:	bl	25fe0 <__assert_fail@plt+0x13844>
   2b164:	mov	r1, r0
   2b168:	mov	r0, r5
   2b16c:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b170:	mov	r2, #5
   2b174:	ldr	r1, [pc, #-1260]	; 2ac90 <__assert_fail@plt+0x184f4>
   2b178:	mov	r0, #0
   2b17c:	bl	1222c <dcgettext@plt>
   2b180:	mov	r2, r4
   2b184:	add	r1, sp, #416	; 0x1a0
   2b188:	mov	r5, r0
   2b18c:	add	r0, sp, #140	; 0x8c
   2b190:	bl	25fe0 <__assert_fail@plt+0x13844>
   2b194:	mov	r1, r0
   2b198:	mov	r0, r5
   2b19c:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b1a0:	ldr	r0, [sp, #68]	; 0x44
   2b1a4:	ldr	r3, [sp, #104]	; 0x68
   2b1a8:	ldr	r2, [pc, #-1292]	; 2aca4 <__assert_fail@plt+0x18508>
   2b1ac:	cmp	r3, r0
   2b1b0:	ldr	r0, [sp, #64]	; 0x40
   2b1b4:	ldr	lr, [pc, #-1320]	; 2ac94 <__assert_fail@plt+0x184f8>
   2b1b8:	ldr	r3, [sp, #48]	; 0x30
   2b1bc:	ldr	r1, [pc, #-1324]	; 2ac98 <__assert_fail@plt+0x184fc>
   2b1c0:	moveq	r1, r2
   2b1c4:	cmp	r8, r0
   2b1c8:	moveq	ip, r2
   2b1cc:	movne	ip, lr
   2b1d0:	cmp	r3, r7
   2b1d4:	moveq	r0, r2
   2b1d8:	movne	r0, lr
   2b1dc:	cmp	sl, fp
   2b1e0:	movne	r2, lr
   2b1e4:	b	2a104 <__assert_fail@plt+0x17968>
   2b1e8:	mov	r2, #5
   2b1ec:	ldr	r1, [pc, #-1368]	; 2ac9c <__assert_fail@plt+0x18500>
   2b1f0:	bl	1222c <dcgettext@plt>
   2b1f4:	add	r1, sp, #652	; 0x28c
   2b1f8:	add	r4, sp, #696	; 0x2b8
   2b1fc:	mov	r5, r0
   2b200:	ldr	r0, [sp, #160]	; 0xa0
   2b204:	bl	25c3c <__assert_fail@plt+0x134a0>
   2b208:	ldr	r2, [sp, #156]	; 0x9c
   2b20c:	ldr	ip, [sp, #152]	; 0x98
   2b210:	ldr	r1, [pc, #-1400]	; 2aca0 <__assert_fail@plt+0x18504>
   2b214:	mov	r3, #100	; 0x64
   2b218:	add	r2, r2, #1
   2b21c:	str	r2, [sp, #8]
   2b220:	str	ip, [sp, #12]
   2b224:	str	r1, [sp]
   2b228:	mov	r2, #1
   2b22c:	mov	r1, r3
   2b230:	str	r0, [sp, #4]
   2b234:	mov	r0, r4
   2b238:	bl	12784 <__snprintf_chk@plt>
   2b23c:	mov	r1, r4
   2b240:	mov	r0, r5
   2b244:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b248:	ldr	r3, [sp, #576]	; 0x240
   2b24c:	cmp	r3, #0
   2b250:	beq	2aad8 <__assert_fail@plt+0x1833c>
   2b254:	ldr	r3, [sp, #572]	; 0x23c
   2b258:	cmp	r3, #0
   2b25c:	bne	2afcc <__assert_fail@plt+0x18830>
   2b260:	b	2aad8 <__assert_fail@plt+0x1833c>
   2b264:	mvn	r3, #0
   2b268:	ldr	r4, [pc, #-1484]	; 2aca4 <__assert_fail@plt+0x18508>
   2b26c:	str	r3, [sp, #148]	; 0x94
   2b270:	b	2af68 <__assert_fail@plt+0x187cc>
   2b274:	ldr	r3, [sp, #148]	; 0x94
   2b278:	cmp	r3, #12
   2b27c:	beq	2ab8c <__assert_fail@plt+0x183f0>
   2b280:	mov	r2, #5
   2b284:	ldr	r1, [pc, #-1508]	; 2aca8 <__assert_fail@plt+0x1850c>
   2b288:	mov	r0, #0
   2b28c:	bl	1222c <dcgettext@plt>
   2b290:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b294:	b	2ab8c <__assert_fail@plt+0x183f0>
   2b298:	ldrd	r2, [sp, #32]
   2b29c:	mov	ip, #7
   2b2a0:	cmp	r3, #0
   2b2a4:	umull	r8, r9, r2, ip
   2b2a8:	umull	r2, r3, ip, r3
   2b2ac:	bge	2b2b8 <__assert_fail@plt+0x18b1c>
   2b2b0:	subs	r2, r2, r4
   2b2b4:	sbc	r3, r3, ip
   2b2b8:	adds	r0, r2, r9
   2b2bc:	mov	ip, #0
   2b2c0:	adc	r1, r3, ip
   2b2c4:	cmp	r1, r0, asr #31
   2b2c8:	beq	2a5b0 <__assert_fail@plt+0x17e14>
   2b2cc:	ldrd	r2, [sp, #32]
   2b2d0:	mov	r4, #1
   2b2d4:	lsl	r0, r3, #3
   2b2d8:	lsl	r1, r2, #3
   2b2dc:	orr	r0, r0, r2, lsr #29
   2b2e0:	subs	r8, r1, r2
   2b2e4:	sbc	r0, r0, r3
   2b2e8:	b	2a5b0 <__assert_fail@plt+0x17e14>
   2b2ec:	ldrb	r3, [sp, #597]	; 0x255
   2b2f0:	cmp	r3, #0
   2b2f4:	beq	29b50 <__assert_fail@plt+0x173b4>
   2b2f8:	mov	r2, #5
   2b2fc:	ldr	r1, [pc, #-1624]	; 2acac <__assert_fail@plt+0x18510>
   2b300:	bl	1222c <dcgettext@plt>
   2b304:	add	r1, sp, #896	; 0x380
   2b308:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b30c:	b	29b50 <__assert_fail@plt+0x173b4>
   2b310:	mov	r1, #3600	; 0xe10
   2b314:	cmp	r9, #0
   2b318:	umull	r2, r3, r1, r9
   2b31c:	umull	r4, r5, r7, r1
   2b320:	strd	r2, [sp, #32]
   2b324:	bge	2b33c <__assert_fail@plt+0x18ba0>
   2b328:	subs	r3, r2, ip
   2b32c:	str	r3, [sp, #32]
   2b330:	ldr	r3, [sp, #36]	; 0x24
   2b334:	sbc	r3, r3, r1
   2b338:	str	r3, [sp, #36]	; 0x24
   2b33c:	ldr	r3, [sp, #32]
   2b340:	mov	r2, #0
   2b344:	adds	r1, r3, r5
   2b348:	ldr	r3, [sp, #36]	; 0x24
   2b34c:	adc	r3, r3, r2
   2b350:	cmp	r3, r1, asr #31
   2b354:	beq	2b0cc <__assert_fail@plt+0x18930>
   2b358:	lsl	r3, r9, #3
   2b35c:	lsl	r2, r7, #3
   2b360:	subs	r2, r2, r7
   2b364:	orr	r3, r3, r7, lsr #29
   2b368:	sbc	r3, r3, r9
   2b36c:	lsl	r1, r2, #5
   2b370:	lsl	r3, r3, #5
   2b374:	orr	r3, r3, r2, lsr #27
   2b378:	adds	r2, r1, r7
   2b37c:	adc	r1, r3, r9
   2b380:	lsl	r3, r2, #4
   2b384:	lsl	r1, r1, #4
   2b388:	orr	r1, r1, r2, lsr #28
   2b38c:	mov	r4, r3
   2b390:	mov	ip, #1
   2b394:	b	2b0cc <__assert_fail@plt+0x18930>
   2b398:	ldr	r3, [sp, #72]	; 0x48
   2b39c:	mov	r1, #60	; 0x3c
   2b3a0:	cmp	r3, #0
   2b3a4:	umull	r2, r3, r1, r3
   2b3a8:	umull	r4, r5, fp, r1
   2b3ac:	strd	r2, [sp, #32]
   2b3b0:	bge	2b3c8 <__assert_fail@plt+0x18c2c>
   2b3b4:	subs	r3, r2, ip
   2b3b8:	str	r3, [sp, #32]
   2b3bc:	ldr	r3, [sp, #36]	; 0x24
   2b3c0:	sbc	r3, r3, r1
   2b3c4:	str	r3, [sp, #36]	; 0x24
   2b3c8:	ldr	r3, [sp, #32]
   2b3cc:	mov	r2, #0
   2b3d0:	adds	r1, r3, r5
   2b3d4:	ldr	r3, [sp, #36]	; 0x24
   2b3d8:	adc	r3, r3, r2
   2b3dc:	cmp	r3, r1, asr #31
   2b3e0:	beq	2a86c <__assert_fail@plt+0x180d0>
   2b3e4:	ldr	r3, [sp, #72]	; 0x48
   2b3e8:	lsl	r4, fp, #4
   2b3ec:	subs	r4, r4, fp
   2b3f0:	lsl	r1, r3, #4
   2b3f4:	orr	r1, r1, fp, lsr #28
   2b3f8:	sbc	r1, r1, r3
   2b3fc:	lsl	r3, r4, #2
   2b400:	lsl	r1, r1, #2
   2b404:	orr	r1, r1, r4, lsr #30
   2b408:	mov	ip, #1
   2b40c:	mov	r4, r3
   2b410:	b	2a86c <__assert_fail@plt+0x180d0>
   2b414:	mov	r1, #3600	; 0xe10
   2b418:	cmp	r9, #0
   2b41c:	umull	r2, r3, r1, r9
   2b420:	umull	r4, r5, r7, r1
   2b424:	strd	r2, [sp, #32]
   2b428:	bge	2b440 <__assert_fail@plt+0x18ca4>
   2b42c:	subs	r3, r2, ip
   2b430:	str	r3, [sp, #32]
   2b434:	ldr	r3, [sp, #36]	; 0x24
   2b438:	sbc	r3, r3, r1
   2b43c:	str	r3, [sp, #36]	; 0x24
   2b440:	ldr	r3, [sp, #32]
   2b444:	mov	r1, #0
   2b448:	adds	r2, r3, r5
   2b44c:	ldr	r3, [sp, #36]	; 0x24
   2b450:	adc	r3, r3, r1
   2b454:	cmp	r3, r2, asr #31
   2b458:	bne	2b580 <__assert_fail@plt+0x18de4>
   2b45c:	mov	r3, r2
   2b460:	b	2a818 <__assert_fail@plt+0x1807c>
   2b464:	ldrb	r3, [sp, #597]	; 0x255
   2b468:	cmp	r3, #0
   2b46c:	beq	29b50 <__assert_fail@plt+0x173b4>
   2b470:	mov	r0, r4
   2b474:	mov	r2, #5
   2b478:	ldr	r1, [pc, #-2000]	; 2acb0 <__assert_fail@plt+0x18514>
   2b47c:	bl	1222c <dcgettext@plt>
   2b480:	add	r1, sp, #416	; 0x1a0
   2b484:	add	r2, sp, #696	; 0x2b8
   2b488:	mov	r4, r0
   2b48c:	add	r0, sp, #140	; 0x8c
   2b490:	bl	25fe0 <__assert_fail@plt+0x13844>
   2b494:	mov	r1, r0
   2b498:	mov	r0, r4
   2b49c:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b4a0:	b	29b50 <__assert_fail@plt+0x173b4>
   2b4a4:	mov	r2, #5
   2b4a8:	ldr	r1, [pc, #-2044]	; 2acb4 <__assert_fail@plt+0x18518>
   2b4ac:	mov	r0, #0
   2b4b0:	bl	1222c <dcgettext@plt>
   2b4b4:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b4b8:	b	2a1e8 <__assert_fail@plt+0x17a4c>
   2b4bc:	mov	r2, #5
   2b4c0:	ldr	r1, [pc, #-2064]	; 2acb8 <__assert_fail@plt+0x1851c>
   2b4c4:	mov	r0, r4
   2b4c8:	bl	1222c <dcgettext@plt>
   2b4cc:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b4d0:	b	2a1d8 <__assert_fail@plt+0x17a3c>
   2b4d4:	bl	12244 <__stack_chk_fail@plt>
   2b4d8:	mov	r3, #52	; 0x34
   2b4dc:	b	2a19c <__assert_fail@plt+0x17a00>
   2b4e0:	mov	r0, lr
   2b4e4:	ldr	r1, [pc, #-2096]	; 2acbc <__assert_fail@plt+0x18520>
   2b4e8:	mov	r2, #5
   2b4ec:	mov	r8, lr
   2b4f0:	bl	1222c <dcgettext@plt>
   2b4f4:	ldrd	r2, [sl, #128]	; 0x80
   2b4f8:	ldrd	r6, [sl, #120]	; 0x78
   2b4fc:	strd	r2, [sp, #8]
   2b500:	ldr	r3, [sp, #560]	; 0x230
   2b504:	strd	r6, [sp]
   2b508:	str	r3, [sp, #16]
   2b50c:	ldrd	r2, [sl, #112]	; 0x70
   2b510:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b514:	mov	r2, #5
   2b518:	ldr	r1, [pc, #-2144]	; 2acc0 <__assert_fail@plt+0x18524>
   2b51c:	mov	r0, r8
   2b520:	bl	1222c <dcgettext@plt>
   2b524:	mov	r3, r5
   2b528:	mov	r2, r4
   2b52c:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b530:	ldr	r3, [sp, #172]	; 0xac
   2b534:	cmn	r3, #1
   2b538:	beq	2b578 <__assert_fail@plt+0x18ddc>
   2b53c:	add	r2, sp, #316	; 0x13c
   2b540:	ldr	r1, [sp, #68]	; 0x44
   2b544:	ldr	r0, [sp, #44]	; 0x2c
   2b548:	bl	40f54 <fts_children@@Base+0xf4b8>
   2b54c:	cmp	r0, #0
   2b550:	beq	2b578 <__assert_fail@plt+0x18ddc>
   2b554:	ldr	r2, [sp, #172]	; 0xac
   2b558:	ldr	r3, [sp, #348]	; 0x15c
   2b55c:	cmp	r2, r3
   2b560:	beq	2b578 <__assert_fail@plt+0x18ddc>
   2b564:	mov	r2, #5
   2b568:	ldr	r1, [pc, #-2220]	; 2acc4 <__assert_fail@plt+0x18528>
   2b56c:	mov	r0, #0
   2b570:	bl	1222c <dcgettext@plt>
   2b574:	bl	25cb8 <__assert_fail@plt+0x1351c>
   2b578:	ldrb	r8, [sp, #597]	; 0x255
   2b57c:	b	2a9b0 <__assert_fail@plt+0x18214>
   2b580:	lsl	r3, r9, #3
   2b584:	lsl	r2, r7, #3
   2b588:	subs	r2, r2, r7
   2b58c:	orr	r3, r3, r7, lsr #29
   2b590:	sbc	r3, r3, r9
   2b594:	lsl	r1, r2, #5
   2b598:	lsl	r3, r3, #5
   2b59c:	orr	r3, r3, r2, lsr #27
   2b5a0:	adds	r2, r1, r7
   2b5a4:	adc	r3, r3, r9
   2b5a8:	lsl	r1, r2, #4
   2b5ac:	lsl	r3, r3, #4
   2b5b0:	orr	r3, r3, r2, lsr #28
   2b5b4:	mov	r4, r1
   2b5b8:	mov	ip, #1
   2b5bc:	b	2a818 <__assert_fail@plt+0x1807c>
   2b5c0:	push	{r4, r5, r6, r7, r8, lr}
   2b5c4:	mov	r5, r0
   2b5c8:	sub	sp, sp, #8
   2b5cc:	ldr	r0, [pc, #76]	; 2b620 <__assert_fail@plt+0x18e84>
   2b5d0:	mov	r6, r1
   2b5d4:	mov	r7, r2
   2b5d8:	bl	123c4 <getenv@plt>
   2b5dc:	mov	r8, r0
   2b5e0:	bl	40cd0 <fts_children@@Base+0xf234>
   2b5e4:	subs	r4, r0, #0
   2b5e8:	moveq	r5, r4
   2b5ec:	beq	2b614 <__assert_fail@plt+0x18e78>
   2b5f0:	mov	r0, r5
   2b5f4:	stm	sp, {r4, r8}
   2b5f8:	mov	r2, r7
   2b5fc:	mov	r1, r6
   2b600:	mov	r3, #0
   2b604:	bl	296f4 <__assert_fail@plt+0x16f58>
   2b608:	mov	r5, r0
   2b60c:	mov	r0, r4
   2b610:	bl	40f48 <fts_children@@Base+0xf4ac>
   2b614:	mov	r0, r5
   2b618:	add	sp, sp, #8
   2b61c:	pop	{r4, r5, r6, r7, r8, pc}
   2b620:			; <UNDEFINED> instruction: 0x00049eb8
   2b624:	push	{r4, r5, r6, lr}
   2b628:	subs	r4, r0, #0
   2b62c:	beq	2b6a0 <__assert_fail@plt+0x18f04>
   2b630:	mov	r1, #47	; 0x2f
   2b634:	bl	1261c <strrchr@plt>
   2b638:	subs	r5, r0, #0
   2b63c:	beq	2b68c <__assert_fail@plt+0x18ef0>
   2b640:	add	r6, r5, #1
   2b644:	sub	r3, r6, r4
   2b648:	cmp	r3, #6
   2b64c:	ble	2b68c <__assert_fail@plt+0x18ef0>
   2b650:	mov	r2, #7
   2b654:	ldr	r1, [pc, #96]	; 2b6bc <__assert_fail@plt+0x18f20>
   2b658:	sub	r0, r5, #6
   2b65c:	bl	12730 <strncmp@plt>
   2b660:	cmp	r0, #0
   2b664:	bne	2b68c <__assert_fail@plt+0x18ef0>
   2b668:	mov	r2, #3
   2b66c:	ldr	r1, [pc, #76]	; 2b6c0 <__assert_fail@plt+0x18f24>
   2b670:	mov	r0, r6
   2b674:	bl	12730 <strncmp@plt>
   2b678:	cmp	r0, #0
   2b67c:	movne	r4, r6
   2b680:	ldreq	r3, [pc, #60]	; 2b6c4 <__assert_fail@plt+0x18f28>
   2b684:	addeq	r4, r5, #4
   2b688:	streq	r4, [r3]
   2b68c:	ldr	r2, [pc, #52]	; 2b6c8 <__assert_fail@plt+0x18f2c>
   2b690:	ldr	r3, [pc, #52]	; 2b6cc <__assert_fail@plt+0x18f30>
   2b694:	str	r4, [r2]
   2b698:	str	r4, [r3]
   2b69c:	pop	{r4, r5, r6, pc}
   2b6a0:	ldr	r3, [pc, #40]	; 2b6d0 <__assert_fail@plt+0x18f34>
   2b6a4:	mov	r2, #55	; 0x37
   2b6a8:	mov	r1, #1
   2b6ac:	ldr	r3, [r3]
   2b6b0:	ldr	r0, [pc, #28]	; 2b6d4 <__assert_fail@plt+0x18f38>
   2b6b4:	bl	122f8 <fwrite@plt>
   2b6b8:	bl	1273c <abort@plt>
   2b6bc:	andeq	sl, r4, ip, asr #3
   2b6c0:	ldrdeq	sl, [r4], -r4
   2b6c4:	andeq	ip, r5, r8, lsr #10
   2b6c8:	strdeq	ip, [r5], -r4
   2b6cc:	andeq	ip, r5, r0, lsr r5
   2b6d0:	andeq	ip, r5, r8, lsr r5
   2b6d4:	muleq	r4, r4, r1
   2b6d8:	push	{r4, lr}
   2b6dc:	mov	r2, #48	; 0x30
   2b6e0:	mov	r4, r1
   2b6e4:	mov	r1, #0
   2b6e8:	bl	12514 <memset@plt>
   2b6ec:	cmp	r4, #10
   2b6f0:	beq	2b6fc <__assert_fail@plt+0x18f60>
   2b6f4:	str	r4, [r0]
   2b6f8:	pop	{r4, pc}
   2b6fc:	bl	1273c <abort@plt>
   2b700:	push	{r4, r5, r6, lr}
   2b704:	mov	r2, #5
   2b708:	mov	r5, r0
   2b70c:	mov	r6, r1
   2b710:	mov	r1, r0
   2b714:	mov	r0, #0
   2b718:	bl	1222c <dcgettext@plt>
   2b71c:	cmp	r5, r0
   2b720:	mov	r4, r0
   2b724:	beq	2b730 <__assert_fail@plt+0x18f94>
   2b728:	mov	r0, r4
   2b72c:	pop	{r4, r5, r6, pc}
   2b730:	bl	41724 <fts_children@@Base+0xfc88>
   2b734:	ldrb	r3, [r0]
   2b738:	bic	r3, r3, #32
   2b73c:	cmp	r3, #85	; 0x55
   2b740:	bne	2b7a0 <__assert_fail@plt+0x19004>
   2b744:	ldrb	r3, [r0, #1]
   2b748:	bic	r3, r3, #32
   2b74c:	cmp	r3, #84	; 0x54
   2b750:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b754:	ldrb	r3, [r0, #2]
   2b758:	bic	r3, r3, #32
   2b75c:	cmp	r3, #70	; 0x46
   2b760:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b764:	ldrb	r3, [r0, #3]
   2b768:	cmp	r3, #45	; 0x2d
   2b76c:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b770:	ldrb	r3, [r0, #4]
   2b774:	cmp	r3, #56	; 0x38
   2b778:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b77c:	ldrb	r3, [r0, #5]
   2b780:	cmp	r3, #0
   2b784:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b788:	ldrb	r2, [r4]
   2b78c:	ldr	r3, [pc, #156]	; 2b830 <__assert_fail@plt+0x19094>
   2b790:	ldr	r4, [pc, #156]	; 2b834 <__assert_fail@plt+0x19098>
   2b794:	cmp	r2, #96	; 0x60
   2b798:	movne	r4, r3
   2b79c:	b	2b728 <__assert_fail@plt+0x18f8c>
   2b7a0:	cmp	r3, #71	; 0x47
   2b7a4:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b7a8:	ldrb	r3, [r0, #1]
   2b7ac:	bic	r3, r3, #32
   2b7b0:	cmp	r3, #66	; 0x42
   2b7b4:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b7b8:	ldrb	r3, [r0, #2]
   2b7bc:	cmp	r3, #49	; 0x31
   2b7c0:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b7c4:	ldrb	r3, [r0, #3]
   2b7c8:	cmp	r3, #56	; 0x38
   2b7cc:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b7d0:	ldrb	r3, [r0, #4]
   2b7d4:	cmp	r3, #48	; 0x30
   2b7d8:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b7dc:	ldrb	r3, [r0, #5]
   2b7e0:	cmp	r3, #51	; 0x33
   2b7e4:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b7e8:	ldrb	r3, [r0, #6]
   2b7ec:	cmp	r3, #48	; 0x30
   2b7f0:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b7f4:	ldrb	r3, [r0, #7]
   2b7f8:	cmp	r3, #0
   2b7fc:	bne	2b818 <__assert_fail@plt+0x1907c>
   2b800:	ldrb	r2, [r4]
   2b804:	ldr	r3, [pc, #44]	; 2b838 <__assert_fail@plt+0x1909c>
   2b808:	ldr	r4, [pc, #44]	; 2b83c <__assert_fail@plt+0x190a0>
   2b80c:	cmp	r2, #96	; 0x60
   2b810:	movne	r4, r3
   2b814:	b	2b728 <__assert_fail@plt+0x18f8c>
   2b818:	ldr	r3, [pc, #32]	; 2b840 <__assert_fail@plt+0x190a4>
   2b81c:	ldr	r4, [pc, #32]	; 2b844 <__assert_fail@plt+0x190a8>
   2b820:	cmp	r6, #9
   2b824:	movne	r4, r3
   2b828:	mov	r0, r4
   2b82c:	pop	{r4, r5, r6, pc}
   2b830:	andeq	sl, r4, r0, lsr r2
   2b834:	andeq	sl, r4, ip, lsr r2
   2b838:	andeq	sl, r4, r4, lsr r2
   2b83c:	andeq	sl, r4, r8, lsr r2
   2b840:	andeq	r4, r4, r4, ror #27
   2b844:	andeq	sl, r4, ip, lsr #4
   2b848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b84c:	sub	sp, sp, #124	; 0x7c
   2b850:	ldr	ip, [pc, #3576]	; 2c650 <__assert_fail@plt+0x19eb4>
   2b854:	str	r3, [sp, #24]
   2b858:	ldr	r3, [sp, #168]	; 0xa8
   2b85c:	ldr	ip, [ip]
   2b860:	str	r3, [sp, #56]	; 0x38
   2b864:	ldr	r3, [sp, #172]	; 0xac
   2b868:	ldr	r8, [sp, #160]	; 0xa0
   2b86c:	str	r3, [sp, #80]	; 0x50
   2b870:	ldr	r3, [sp, #176]	; 0xb0
   2b874:	mov	fp, r0
   2b878:	str	r3, [sp, #76]	; 0x4c
   2b87c:	mov	sl, r1
   2b880:	str	r2, [sp, #36]	; 0x24
   2b884:	str	ip, [sp, #116]	; 0x74
   2b888:	bl	12334 <__ctype_get_mb_cur_max@plt>
   2b88c:	ldr	r3, [sp, #164]	; 0xa4
   2b890:	ands	r4, r3, #2
   2b894:	movne	r3, #1
   2b898:	moveq	r3, #0
   2b89c:	str	r3, [sp, #32]
   2b8a0:	str	r0, [sp, #64]	; 0x40
   2b8a4:	cmp	r8, #10
   2b8a8:	ldrls	pc, [pc, r8, lsl #2]
   2b8ac:	b	2d05c <__assert_fail@plt+0x1a8c0>
   2b8b0:	andeq	fp, r2, r4, lsr #25
   2b8b4:	andeq	fp, r2, ip, lsr sp
   2b8b8:	andeq	ip, r2, ip, lsr r3
   2b8bc:	andeq	fp, r2, ip, asr sp
   2b8c0:	andeq	fp, r2, r0, lsl ip
   2b8c4:	andeq	fp, r2, r8, asr ip
   2b8c8:	ldrdeq	fp, [r2], -r4
   2b8cc:	andeq	fp, r2, ip, lsl #26
   2b8d0:	ldrdeq	fp, [r2], -ip
   2b8d4:	ldrdeq	fp, [r2], -ip
   2b8d8:	ldrdeq	fp, [r2], -ip
   2b8dc:	cmp	r8, #10
   2b8e0:	beq	2b904 <__assert_fail@plt+0x19168>
   2b8e4:	mov	r1, r8
   2b8e8:	ldr	r0, [pc, #3428]	; 2c654 <__assert_fail@plt+0x19eb8>
   2b8ec:	bl	2b700 <__assert_fail@plt+0x18f64>
   2b8f0:	mov	r1, r8
   2b8f4:	str	r0, [sp, #80]	; 0x50
   2b8f8:	ldr	r0, [pc, #3420]	; 2c65c <__assert_fail@plt+0x19ec0>
   2b8fc:	bl	2b700 <__assert_fail@plt+0x18f64>
   2b900:	str	r0, [sp, #76]	; 0x4c
   2b904:	cmp	r4, #0
   2b908:	movne	r4, #0
   2b90c:	beq	2cd1c <__assert_fail@plt+0x1a580>
   2b910:	ldr	r7, [sp, #76]	; 0x4c
   2b914:	mov	r5, #0
   2b918:	mov	r6, #1
   2b91c:	mov	r0, r7
   2b920:	str	r6, [sp, #40]	; 0x28
   2b924:	str	r5, [sp, #68]	; 0x44
   2b928:	bl	1249c <strlen@plt>
   2b92c:	str	r6, [sp, #28]
   2b930:	str	r5, [sp, #44]	; 0x2c
   2b934:	str	r5, [sp, #72]	; 0x48
   2b938:	str	r7, [sp, #60]	; 0x3c
   2b93c:	str	r0, [sp, #52]	; 0x34
   2b940:	str	r8, [sp, #160]	; 0xa0
   2b944:	mov	r8, fp
   2b948:	ldr	fp, [sp, #160]	; 0xa0
   2b94c:	mov	r9, #0
   2b950:	ldr	r3, [sp, #24]
   2b954:	cmn	r3, #1
   2b958:	beq	2bec0 <__assert_fail@plt+0x19724>
   2b95c:	ldr	r3, [sp, #24]
   2b960:	subs	r6, r3, r9
   2b964:	movne	r6, #1
   2b968:	cmp	r6, #0
   2b96c:	beq	2bed8 <__assert_fail@plt+0x1973c>
   2b970:	ldr	r7, [sp, #28]
   2b974:	ldr	r0, [sp, #36]	; 0x24
   2b978:	cmp	fp, #2
   2b97c:	moveq	r7, #0
   2b980:	andne	r7, r7, #1
   2b984:	add	r3, r0, r9
   2b988:	cmp	r7, #0
   2b98c:	str	r3, [sp, #48]	; 0x30
   2b990:	beq	2c37c <__assert_fail@plt+0x19be0>
   2b994:	ldr	r2, [sp, #52]	; 0x34
   2b998:	cmp	r2, #0
   2b99c:	beq	2c660 <__assert_fail@plt+0x19ec4>
   2b9a0:	ldr	r1, [sp, #24]
   2b9a4:	cmp	r2, #1
   2b9a8:	mov	r3, r2
   2b9ac:	movls	r3, #0
   2b9b0:	movhi	r3, #1
   2b9b4:	cmn	r1, #1
   2b9b8:	movne	r3, #0
   2b9bc:	cmp	r3, #0
   2b9c0:	add	r5, r9, r2
   2b9c4:	beq	2b9d0 <__assert_fail@plt+0x19234>
   2b9c8:	bl	1249c <strlen@plt>
   2b9cc:	str	r0, [sp, #24]
   2b9d0:	ldr	r3, [sp, #24]
   2b9d4:	cmp	r5, r3
   2b9d8:	bhi	2c660 <__assert_fail@plt+0x19ec4>
   2b9dc:	ldr	r2, [sp, #52]	; 0x34
   2b9e0:	ldr	r1, [sp, #60]	; 0x3c
   2b9e4:	ldr	r0, [sp, #48]	; 0x30
   2b9e8:	bl	12208 <memcmp@plt>
   2b9ec:	cmp	r0, #0
   2b9f0:	bne	2c660 <__assert_fail@plt+0x19ec4>
   2b9f4:	ldr	r3, [sp, #32]
   2b9f8:	cmp	r3, #0
   2b9fc:	bne	2cf1c <__assert_fail@plt+0x1a780>
   2ba00:	ldr	r3, [sp, #48]	; 0x30
   2ba04:	ldrb	r5, [r3]
   2ba08:	cmp	r5, #126	; 0x7e
   2ba0c:	ldrls	pc, [pc, r5, lsl #2]
   2ba10:	b	2c2e0 <__assert_fail@plt+0x19b44>
   2ba14:	andeq	ip, r2, ip, asr #3
   2ba18:	andeq	ip, r2, r0, ror #5
   2ba1c:	andeq	ip, r2, r0, ror #5
   2ba20:	andeq	ip, r2, r0, ror #5
   2ba24:	andeq	ip, r2, r0, ror #5
   2ba28:	andeq	ip, r2, r0, ror #5
   2ba2c:	andeq	ip, r2, r0, ror #5
   2ba30:	muleq	r2, r8, r2
   2ba34:	andeq	ip, r2, r8, lsl #5
   2ba38:	andeq	ip, r2, r8, lsl #3
   2ba3c:	andeq	ip, r2, r0, asr r1
   2ba40:	andeq	ip, r2, r8, lsr #3
   2ba44:	muleq	r2, r0, r1
   2ba48:	andeq	ip, r2, r0, asr #1
   2ba4c:	andeq	ip, r2, r0, ror #5
   2ba50:	andeq	ip, r2, r0, ror #5
   2ba54:	andeq	ip, r2, r0, ror #5
   2ba58:	andeq	ip, r2, r0, ror #5
   2ba5c:	andeq	ip, r2, r0, ror #5
   2ba60:	andeq	ip, r2, r0, ror #5
   2ba64:	andeq	ip, r2, r0, ror #5
   2ba68:	andeq	ip, r2, r0, ror #5
   2ba6c:	andeq	ip, r2, r0, ror #5
   2ba70:	andeq	ip, r2, r0, ror #5
   2ba74:	andeq	ip, r2, r0, ror #5
   2ba78:	andeq	ip, r2, r0, ror #5
   2ba7c:	andeq	ip, r2, r0, ror #5
   2ba80:	andeq	ip, r2, r0, ror #5
   2ba84:	andeq	ip, r2, r0, ror #5
   2ba88:	andeq	ip, r2, r0, ror #5
   2ba8c:	andeq	ip, r2, r0, ror #5
   2ba90:	andeq	ip, r2, r0, ror #5
   2ba94:	andeq	ip, r2, r0, lsr #5
   2ba98:			; <UNDEFINED> instruction: 0x0002c1b4
   2ba9c:			; <UNDEFINED> instruction: 0x0002c1b4
   2baa0:			; <UNDEFINED> instruction: 0x0002c2b8
   2baa4:			; <UNDEFINED> instruction: 0x0002c1b4
   2baa8:	ldrdeq	ip, [r2], -r4
   2baac:			; <UNDEFINED> instruction: 0x0002c1b4
   2bab0:	strdeq	fp, [r2], -r4
   2bab4:			; <UNDEFINED> instruction: 0x0002c1b4
   2bab8:			; <UNDEFINED> instruction: 0x0002c1b4
   2babc:			; <UNDEFINED> instruction: 0x0002c1b4
   2bac0:	ldrdeq	ip, [r2], -r4
   2bac4:	ldrdeq	ip, [r2], -r4
   2bac8:	ldrdeq	ip, [r2], -r4
   2bacc:	ldrdeq	ip, [r2], -r4
   2bad0:	ldrdeq	ip, [r2], -r4
   2bad4:	ldrdeq	ip, [r2], -r4
   2bad8:	ldrdeq	ip, [r2], -r4
   2badc:	ldrdeq	ip, [r2], -r4
   2bae0:	ldrdeq	ip, [r2], -r4
   2bae4:	ldrdeq	ip, [r2], -r4
   2bae8:	ldrdeq	ip, [r2], -r4
   2baec:	ldrdeq	ip, [r2], -r4
   2baf0:	ldrdeq	ip, [r2], -r4
   2baf4:	ldrdeq	ip, [r2], -r4
   2baf8:	ldrdeq	ip, [r2], -r4
   2bafc:	ldrdeq	ip, [r2], -r4
   2bb00:			; <UNDEFINED> instruction: 0x0002c1b4
   2bb04:			; <UNDEFINED> instruction: 0x0002c1b4
   2bb08:			; <UNDEFINED> instruction: 0x0002c1b4
   2bb0c:			; <UNDEFINED> instruction: 0x0002c1b4
   2bb10:	andeq	fp, r2, r8, asr #31
   2bb14:	andeq	ip, r2, r0, ror #5
   2bb18:	ldrdeq	ip, [r2], -r4
   2bb1c:	ldrdeq	ip, [r2], -r4
   2bb20:	ldrdeq	ip, [r2], -r4
   2bb24:	ldrdeq	ip, [r2], -r4
   2bb28:	ldrdeq	ip, [r2], -r4
   2bb2c:	ldrdeq	ip, [r2], -r4
   2bb30:	ldrdeq	ip, [r2], -r4
   2bb34:	ldrdeq	ip, [r2], -r4
   2bb38:	ldrdeq	ip, [r2], -r4
   2bb3c:	ldrdeq	ip, [r2], -r4
   2bb40:	ldrdeq	ip, [r2], -r4
   2bb44:	ldrdeq	ip, [r2], -r4
   2bb48:	ldrdeq	ip, [r2], -r4
   2bb4c:	ldrdeq	ip, [r2], -r4
   2bb50:	ldrdeq	ip, [r2], -r4
   2bb54:	ldrdeq	ip, [r2], -r4
   2bb58:	ldrdeq	ip, [r2], -r4
   2bb5c:	ldrdeq	ip, [r2], -r4
   2bb60:	ldrdeq	ip, [r2], -r4
   2bb64:	ldrdeq	ip, [r2], -r4
   2bb68:	ldrdeq	ip, [r2], -r4
   2bb6c:	ldrdeq	ip, [r2], -r4
   2bb70:	ldrdeq	ip, [r2], -r4
   2bb74:	ldrdeq	ip, [r2], -r4
   2bb78:	ldrdeq	ip, [r2], -r4
   2bb7c:	ldrdeq	ip, [r2], -r4
   2bb80:			; <UNDEFINED> instruction: 0x0002c1b4
   2bb84:	andeq	fp, r2, r0, lsl #31
   2bb88:	ldrdeq	ip, [r2], -r4
   2bb8c:			; <UNDEFINED> instruction: 0x0002c1b4
   2bb90:	ldrdeq	ip, [r2], -r4
   2bb94:			; <UNDEFINED> instruction: 0x0002c1b4
   2bb98:	ldrdeq	ip, [r2], -r4
   2bb9c:	ldrdeq	ip, [r2], -r4
   2bba0:	ldrdeq	ip, [r2], -r4
   2bba4:	ldrdeq	ip, [r2], -r4
   2bba8:	ldrdeq	ip, [r2], -r4
   2bbac:	ldrdeq	ip, [r2], -r4
   2bbb0:	ldrdeq	ip, [r2], -r4
   2bbb4:	ldrdeq	ip, [r2], -r4
   2bbb8:	ldrdeq	ip, [r2], -r4
   2bbbc:	ldrdeq	ip, [r2], -r4
   2bbc0:	ldrdeq	ip, [r2], -r4
   2bbc4:	ldrdeq	ip, [r2], -r4
   2bbc8:	ldrdeq	ip, [r2], -r4
   2bbcc:	ldrdeq	ip, [r2], -r4
   2bbd0:	ldrdeq	ip, [r2], -r4
   2bbd4:	ldrdeq	ip, [r2], -r4
   2bbd8:	ldrdeq	ip, [r2], -r4
   2bbdc:	ldrdeq	ip, [r2], -r4
   2bbe0:	ldrdeq	ip, [r2], -r4
   2bbe4:	ldrdeq	ip, [r2], -r4
   2bbe8:	ldrdeq	ip, [r2], -r4
   2bbec:	ldrdeq	ip, [r2], -r4
   2bbf0:	ldrdeq	ip, [r2], -r4
   2bbf4:	ldrdeq	ip, [r2], -r4
   2bbf8:	ldrdeq	ip, [r2], -r4
   2bbfc:	ldrdeq	ip, [r2], -r4
   2bc00:	muleq	r2, r8, sp
   2bc04:			; <UNDEFINED> instruction: 0x0002c1b4
   2bc08:	muleq	r2, r8, sp
   2bc0c:			; <UNDEFINED> instruction: 0x0002c2b8
   2bc10:	cmp	r4, #0
   2bc14:	moveq	r3, #1
   2bc18:	streq	r3, [sp, #28]
   2bc1c:	beq	2c348 <__assert_fail@plt+0x19bac>
   2bc20:	mov	r3, #0
   2bc24:	mov	r4, r3
   2bc28:	mov	r2, #1
   2bc2c:	str	r2, [sp, #40]	; 0x28
   2bc30:	str	r3, [sp, #68]	; 0x44
   2bc34:	str	r2, [sp, #32]
   2bc38:	str	r2, [sp, #52]	; 0x34
   2bc3c:	ldr	r3, [pc, #2584]	; 2c65c <__assert_fail@plt+0x19ec0>
   2bc40:	str	r4, [sp, #44]	; 0x2c
   2bc44:	str	r4, [sp, #72]	; 0x48
   2bc48:	str	r4, [sp, #28]
   2bc4c:	str	r3, [sp, #60]	; 0x3c
   2bc50:	mov	r8, #2
   2bc54:	b	2b940 <__assert_fail@plt+0x191a4>
   2bc58:	cmp	r4, #0
   2bc5c:	bne	2cee8 <__assert_fail@plt+0x1a74c>
   2bc60:	cmp	sl, #0
   2bc64:	beq	2cca8 <__assert_fail@plt+0x1a50c>
   2bc68:	mov	r3, #34	; 0x22
   2bc6c:	strb	r3, [fp]
   2bc70:	ldr	r3, [pc, #2528]	; 2c658 <__assert_fail@plt+0x19ebc>
   2bc74:	mov	r1, r4
   2bc78:	mov	r2, #1
   2bc7c:	str	r4, [sp, #68]	; 0x44
   2bc80:	str	r2, [sp, #40]	; 0x28
   2bc84:	mov	r4, r2
   2bc88:	str	r1, [sp, #44]	; 0x2c
   2bc8c:	str	r1, [sp, #72]	; 0x48
   2bc90:	str	r1, [sp, #32]
   2bc94:	str	r2, [sp, #28]
   2bc98:	str	r2, [sp, #52]	; 0x34
   2bc9c:	str	r3, [sp, #60]	; 0x3c
   2bca0:	b	2b940 <__assert_fail@plt+0x191a4>
   2bca4:	mov	r3, #0
   2bca8:	str	r3, [sp, #68]	; 0x44
   2bcac:	str	r3, [sp, #44]	; 0x2c
   2bcb0:	str	r3, [sp, #32]
   2bcb4:	str	r3, [sp, #28]
   2bcb8:	str	r3, [sp, #60]	; 0x3c
   2bcbc:	mov	r3, #1
   2bcc0:	str	r8, [sp, #72]	; 0x48
   2bcc4:	str	r8, [sp, #52]	; 0x34
   2bcc8:	mov	r4, r8
   2bccc:	str	r3, [sp, #40]	; 0x28
   2bcd0:	b	2b940 <__assert_fail@plt+0x191a4>
   2bcd4:	mov	r3, #1
   2bcd8:	str	r3, [sp, #40]	; 0x28
   2bcdc:	str	r3, [sp, #32]
   2bce0:	str	r3, [sp, #28]
   2bce4:	str	r3, [sp, #52]	; 0x34
   2bce8:	ldr	r3, [pc, #2408]	; 2c658 <__assert_fail@plt+0x19ebc>
   2bcec:	mov	r2, #0
   2bcf0:	mov	r4, r2
   2bcf4:	str	r2, [sp, #68]	; 0x44
   2bcf8:	str	r2, [sp, #44]	; 0x2c
   2bcfc:	str	r2, [sp, #72]	; 0x48
   2bd00:	str	r3, [sp, #60]	; 0x3c
   2bd04:	mov	r8, #5
   2bd08:	b	2b940 <__assert_fail@plt+0x191a4>
   2bd0c:	mov	r3, #0
   2bd10:	mov	r2, #1
   2bd14:	str	r2, [sp, #40]	; 0x28
   2bd18:	mov	r4, r3
   2bd1c:	str	r3, [sp, #68]	; 0x44
   2bd20:	str	r2, [sp, #28]
   2bd24:	str	r3, [sp, #44]	; 0x2c
   2bd28:	str	r3, [sp, #72]	; 0x48
   2bd2c:	str	r3, [sp, #32]
   2bd30:	str	r3, [sp, #52]	; 0x34
   2bd34:	str	r3, [sp, #60]	; 0x3c
   2bd38:	b	2b940 <__assert_fail@plt+0x191a4>
   2bd3c:	mov	r2, #1
   2bd40:	mov	r3, #0
   2bd44:	str	r2, [sp, #40]	; 0x28
   2bd48:	mov	r4, r3
   2bd4c:	str	r3, [sp, #68]	; 0x44
   2bd50:	str	r8, [sp, #52]	; 0x34
   2bd54:	str	r2, [sp, #32]
   2bd58:	b	2bc3c <__assert_fail@plt+0x194a0>
   2bd5c:	mov	r3, #1
   2bd60:	str	r3, [sp, #40]	; 0x28
   2bd64:	str	r3, [sp, #32]
   2bd68:	str	r3, [sp, #28]
   2bd6c:	str	r3, [sp, #52]	; 0x34
   2bd70:	ldr	r3, [pc, #2276]	; 2c65c <__assert_fail@plt+0x19ec0>
   2bd74:	mov	r2, #0
   2bd78:	mov	r4, r2
   2bd7c:	str	r2, [sp, #68]	; 0x44
   2bd80:	str	r2, [sp, #44]	; 0x2c
   2bd84:	str	r2, [sp, #72]	; 0x48
   2bd88:	str	r3, [sp, #60]	; 0x3c
   2bd8c:	mov	r8, #2
   2bd90:	b	2b940 <__assert_fail@plt+0x191a4>
   2bd94:	mov	r7, #0
   2bd98:	ldr	r3, [sp, #24]
   2bd9c:	cmn	r3, #1
   2bda0:	beq	2c8dc <__assert_fail@plt+0x1a140>
   2bda4:	ldr	r3, [sp, #24]
   2bda8:	subs	r3, r3, #1
   2bdac:	movne	r3, #1
   2bdb0:	cmp	r3, #0
   2bdb4:	sub	r2, fp, #2
   2bdb8:	clz	r2, r2
   2bdbc:	lsr	r2, r2, #5
   2bdc0:	bne	2bfbc <__assert_fail@plt+0x19820>
   2bdc4:	cmp	r9, #0
   2bdc8:	bne	2bfbc <__assert_fail@plt+0x19820>
   2bdcc:	ldr	r3, [sp, #32]
   2bdd0:	tst	r3, r2
   2bdd4:	bne	2c0dc <__assert_fail@plt+0x19940>
   2bdd8:	ldr	r3, [sp, #28]
   2bddc:	eor	r3, r3, #1
   2bde0:	orr	r3, r2, r3
   2bde4:	ldr	r2, [sp, #32]
   2bde8:	eor	r3, r3, #1
   2bdec:	orrs	r3, r2, r3
   2bdf0:	beq	2be20 <__assert_fail@plt+0x19684>
   2bdf4:	mov	r3, #0
   2bdf8:	ldr	r1, [sp, #56]	; 0x38
   2bdfc:	cmp	r1, #0
   2be00:	beq	2be20 <__assert_fail@plt+0x19684>
   2be04:	lsr	r2, r5, #5
   2be08:	and	r0, r5, #31
   2be0c:	uxtb	r2, r2
   2be10:	ldr	r1, [r1, r2, lsl #2]
   2be14:	lsr	r2, r1, r0
   2be18:	tst	r2, #1
   2be1c:	bne	2be28 <__assert_fail@plt+0x1968c>
   2be20:	cmp	r7, #0
   2be24:	beq	2c078 <__assert_fail@plt+0x198dc>
   2be28:	sub	r2, fp, #2
   2be2c:	clz	r2, r2
   2be30:	lsr	r2, r2, #5
   2be34:	ldr	r3, [sp, #32]
   2be38:	cmp	r3, #0
   2be3c:	bne	2c168 <__assert_fail@plt+0x199cc>
   2be40:	ldr	r3, [sp, #44]	; 0x2c
   2be44:	eor	r3, r3, #1
   2be48:	ands	r3, r2, r3
   2be4c:	beq	2be84 <__assert_fail@plt+0x196e8>
   2be50:	cmp	sl, r4
   2be54:	movhi	r2, #39	; 0x27
   2be58:	strbhi	r2, [r8, r4]
   2be5c:	add	r2, r4, #1
   2be60:	cmp	r2, sl
   2be64:	movcc	r1, #36	; 0x24
   2be68:	strbcc	r1, [r8, r2]
   2be6c:	add	r2, r4, #2
   2be70:	cmp	r2, sl
   2be74:	add	r4, r4, #3
   2be78:	movcc	r1, #39	; 0x27
   2be7c:	strbcc	r1, [r8, r2]
   2be80:	str	r3, [sp, #44]	; 0x2c
   2be84:	cmp	r4, sl
   2be88:	movcc	r3, #92	; 0x5c
   2be8c:	strbcc	r3, [r8, r4]
   2be90:	add	r9, r9, #1
   2be94:	add	r4, r4, #1
   2be98:	cmp	r4, sl
   2be9c:	ldr	r3, [sp, #40]	; 0x28
   2bea0:	strbcc	r5, [r8, r4]
   2bea4:	cmp	r6, #0
   2bea8:	moveq	r3, #0
   2beac:	str	r3, [sp, #40]	; 0x28
   2beb0:	ldr	r3, [sp, #24]
   2beb4:	add	r4, r4, #1
   2beb8:	cmn	r3, #1
   2bebc:	bne	2b95c <__assert_fail@plt+0x191c0>
   2bec0:	ldr	r3, [sp, #36]	; 0x24
   2bec4:	ldrb	r6, [r3, r9]
   2bec8:	adds	r6, r6, #0
   2becc:	movne	r6, #1
   2bed0:	cmp	r6, #0
   2bed4:	bne	2b970 <__assert_fail@plt+0x191d4>
   2bed8:	str	fp, [sp, #160]	; 0xa0
   2bedc:	mov	fp, r8
   2bee0:	ldr	r8, [sp, #160]	; 0xa0
   2bee4:	ldr	r1, [sp, #32]
   2bee8:	cmp	r4, #0
   2beec:	sub	r2, r8, #2
   2bef0:	clz	r2, r2
   2bef4:	lsr	r2, r2, #5
   2bef8:	andeq	r3, r2, r1
   2befc:	movne	r3, #0
   2bf00:	cmp	r3, #0
   2bf04:	bne	2cff0 <__assert_fail@plt+0x1a854>
   2bf08:	eor	r3, r1, #1
   2bf0c:	ands	r2, r2, r3
   2bf10:	beq	2cf2c <__assert_fail@plt+0x1a790>
   2bf14:	ldr	r3, [sp, #68]	; 0x44
   2bf18:	cmp	r3, #0
   2bf1c:	beq	2cf30 <__assert_fail@plt+0x1a794>
   2bf20:	ldr	r3, [sp, #40]	; 0x28
   2bf24:	cmp	r3, #0
   2bf28:	bne	2cfac <__assert_fail@plt+0x1a810>
   2bf2c:	ldr	r3, [sp, #72]	; 0x48
   2bf30:	adds	r3, r3, #0
   2bf34:	movne	r3, #1
   2bf38:	cmp	sl, #0
   2bf3c:	movne	r3, #0
   2bf40:	cmp	r3, #0
   2bf44:	ldreq	r2, [sp, #68]	; 0x44
   2bf48:	beq	2cf30 <__assert_fail@plt+0x1a794>
   2bf4c:	ldr	sl, [sp, #72]	; 0x48
   2bf50:	str	r3, [sp, #68]	; 0x44
   2bf54:	ldr	r3, [pc, #1792]	; 2c65c <__assert_fail@plt+0x19ec0>
   2bf58:	mov	r2, #39	; 0x27
   2bf5c:	mov	r4, #1
   2bf60:	str	r3, [sp, #60]	; 0x3c
   2bf64:	mov	r3, #0
   2bf68:	strb	r2, [fp]
   2bf6c:	str	r4, [sp, #52]	; 0x34
   2bf70:	mov	r8, #2
   2bf74:	str	r3, [sp, #32]
   2bf78:	b	2b940 <__assert_fail@plt+0x191a4>
   2bf7c:	mov	r7, #0
   2bf80:	cmp	fp, #2
   2bf84:	beq	2c8bc <__assert_fail@plt+0x1a120>
   2bf88:	ldr	r3, [sp, #52]	; 0x34
   2bf8c:	ldr	r2, [sp, #28]
   2bf90:	ldr	r1, [sp, #32]
   2bf94:	cmp	r3, #0
   2bf98:	andne	r2, r2, r1
   2bf9c:	moveq	r2, #0
   2bfa0:	cmp	r2, #0
   2bfa4:	moveq	r5, #92	; 0x5c
   2bfa8:	moveq	r3, r5
   2bfac:	bne	2c8c8 <__assert_fail@plt+0x1a12c>
   2bfb0:	ldr	r1, [sp, #28]
   2bfb4:	cmp	r1, #0
   2bfb8:	bne	2d038 <__assert_fail@plt+0x1a89c>
   2bfbc:	mov	r6, #0
   2bfc0:	b	2bdd8 <__assert_fail@plt+0x1963c>
   2bfc4:	mov	r7, #0
   2bfc8:	cmp	fp, #2
   2bfcc:	beq	2c92c <__assert_fail@plt+0x1a190>
   2bfd0:	cmp	fp, #5
   2bfd4:	beq	2c8f0 <__assert_fail@plt+0x1a154>
   2bfd8:	sub	r2, fp, #2
   2bfdc:	mov	r6, #0
   2bfe0:	clz	r2, r2
   2bfe4:	mov	r5, #63	; 0x3f
   2bfe8:	lsr	r2, r2, #5
   2bfec:	b	2bdd8 <__assert_fail@plt+0x1963c>
   2bff0:	mov	r7, #0
   2bff4:	cmp	fp, #2
   2bff8:	strne	r6, [sp, #68]	; 0x44
   2bffc:	movne	r2, #0
   2c000:	movne	r5, #39	; 0x27
   2c004:	bne	2bdd8 <__assert_fail@plt+0x1963c>
   2c008:	ldr	r3, [sp, #32]
   2c00c:	cmp	r3, #0
   2c010:	bne	2cd0c <__assert_fail@plt+0x1a570>
   2c014:	cmp	sl, #0
   2c018:	ldr	r3, [sp, #72]	; 0x48
   2c01c:	clz	r3, r3
   2c020:	lsr	r3, r3, #5
   2c024:	moveq	r3, #0
   2c028:	cmp	r3, #0
   2c02c:	bne	2cc40 <__assert_fail@plt+0x1a4a4>
   2c030:	cmp	sl, r4
   2c034:	movhi	r3, #39	; 0x27
   2c038:	strbhi	r3, [r8, r4]
   2c03c:	add	r3, r4, #1
   2c040:	cmp	sl, r3
   2c044:	movhi	r2, #92	; 0x5c
   2c048:	strbhi	r2, [r8, r3]
   2c04c:	add	r3, r4, #2
   2c050:	cmp	sl, r3
   2c054:	movhi	r2, #39	; 0x27
   2c058:	strbhi	r2, [r8, r3]
   2c05c:	mov	r3, #0
   2c060:	cmp	r7, #0
   2c064:	add	r4, r4, #3
   2c068:	str	r3, [sp, #44]	; 0x2c
   2c06c:	str	r6, [sp, #68]	; 0x44
   2c070:	mov	r5, #39	; 0x27
   2c074:	bne	2be28 <__assert_fail@plt+0x1968c>
   2c078:	ldr	r2, [sp, #44]	; 0x2c
   2c07c:	eor	r3, r3, #1
   2c080:	and	r3, r3, r2
   2c084:	add	r9, r9, #1
   2c088:	uxtb	r3, r3
   2c08c:	cmp	r3, #0
   2c090:	beq	2be98 <__assert_fail@plt+0x196fc>
   2c094:	cmp	sl, r4
   2c098:	movhi	r3, #39	; 0x27
   2c09c:	strbhi	r3, [r8, r4]
   2c0a0:	add	r3, r4, #1
   2c0a4:	cmp	sl, r3
   2c0a8:	movhi	r2, #39	; 0x27
   2c0ac:	strbhi	r2, [r8, r3]
   2c0b0:	mov	r3, #0
   2c0b4:	add	r4, r4, #2
   2c0b8:	str	r3, [sp, #44]	; 0x2c
   2c0bc:	b	2be98 <__assert_fail@plt+0x196fc>
   2c0c0:	mov	r3, #114	; 0x72
   2c0c4:	ldr	r1, [sp, #32]
   2c0c8:	sub	r2, fp, #2
   2c0cc:	clz	r2, r2
   2c0d0:	lsr	r2, r2, #5
   2c0d4:	tst	r2, r1
   2c0d8:	beq	2bfb0 <__assert_fail@plt+0x19814>
   2c0dc:	mov	fp, r8
   2c0e0:	mov	r8, #2
   2c0e4:	ldr	r3, [sp, #28]
   2c0e8:	cmp	r3, #0
   2c0ec:	movne	r8, #4
   2c0f0:	ldr	r3, [sp, #164]	; 0xa4
   2c0f4:	mov	ip, #0
   2c0f8:	bic	r3, r3, #2
   2c0fc:	str	r3, [sp, #4]
   2c100:	ldr	r3, [sp, #76]	; 0x4c
   2c104:	str	r8, [sp]
   2c108:	str	r3, [sp, #16]
   2c10c:	ldr	r3, [sp, #80]	; 0x50
   2c110:	ldr	r2, [sp, #36]	; 0x24
   2c114:	str	r3, [sp, #12]
   2c118:	mov	r1, sl
   2c11c:	ldr	r3, [sp, #24]
   2c120:	mov	r0, fp
   2c124:	str	ip, [sp, #8]
   2c128:	bl	2b848 <__assert_fail@plt+0x190ac>
   2c12c:	mov	r4, r0
   2c130:	ldr	r3, [pc, #1304]	; 2c650 <__assert_fail@plt+0x19eb4>
   2c134:	ldr	r2, [sp, #116]	; 0x74
   2c138:	mov	r0, r4
   2c13c:	ldr	r3, [r3]
   2c140:	cmp	r2, r3
   2c144:	bne	2d034 <__assert_fail@plt+0x1a898>
   2c148:	add	sp, sp, #124	; 0x7c
   2c14c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c150:	mov	r5, #110	; 0x6e
   2c154:	ldr	r3, [sp, #32]
   2c158:	mov	r2, #0
   2c15c:	cmp	r3, #0
   2c160:	mov	r6, r2
   2c164:	beq	2be40 <__assert_fail@plt+0x196a4>
   2c168:	str	fp, [sp, #160]	; 0xa0
   2c16c:	mov	fp, r8
   2c170:	ldr	r8, [sp, #160]	; 0xa0
   2c174:	mov	r3, r2
   2c178:	ldr	r2, [sp, #28]
   2c17c:	and	r2, r2, r3
   2c180:	str	r2, [sp, #28]
   2c184:	b	2c0e4 <__assert_fail@plt+0x19948>
   2c188:	mov	r5, #116	; 0x74
   2c18c:	b	2c154 <__assert_fail@plt+0x199b8>
   2c190:	mov	r5, #102	; 0x66
   2c194:	ldr	r3, [sp, #32]
   2c198:	cmp	r3, #0
   2c19c:	bne	2cd48 <__assert_fail@plt+0x1a5ac>
   2c1a0:	mov	r6, #0
   2c1a4:	b	2be84 <__assert_fail@plt+0x196e8>
   2c1a8:	mov	r5, #118	; 0x76
   2c1ac:	b	2c194 <__assert_fail@plt+0x199f8>
   2c1b0:	mov	r7, #0
   2c1b4:	mov	r6, #0
   2c1b8:	b	2bdf4 <__assert_fail@plt+0x19658>
   2c1bc:	ldr	r3, [sp, #32]
   2c1c0:	cmp	r3, #0
   2c1c4:	bne	2cf8c <__assert_fail@plt+0x1a7f0>
   2c1c8:	mov	r7, r3
   2c1cc:	ldr	r3, [sp, #44]	; 0x2c
   2c1d0:	sub	r2, fp, #2
   2c1d4:	eor	r3, r3, #1
   2c1d8:	clz	r2, r2
   2c1dc:	lsr	r2, r2, #5
   2c1e0:	ands	r3, r2, r3
   2c1e4:	beq	2cc2c <__assert_fail@plt+0x1a490>
   2c1e8:	cmp	sl, r4
   2c1ec:	movhi	r1, #39	; 0x27
   2c1f0:	strbhi	r1, [r8, r4]
   2c1f4:	add	r1, r4, #1
   2c1f8:	cmp	sl, r1
   2c1fc:	movhi	r0, #36	; 0x24
   2c200:	strbhi	r0, [r8, r1]
   2c204:	add	r1, r4, #2
   2c208:	cmp	sl, r1
   2c20c:	movhi	r0, #39	; 0x27
   2c210:	strbhi	r0, [r8, r1]
   2c214:	add	r1, r4, #3
   2c218:	cmp	sl, r1
   2c21c:	bls	2cc8c <__assert_fail@plt+0x1a4f0>
   2c220:	mov	r4, r1
   2c224:	mov	r1, #92	; 0x5c
   2c228:	strb	r1, [r8, r4]
   2c22c:	mov	r1, r4
   2c230:	str	r3, [sp, #44]	; 0x2c
   2c234:	cmp	fp, #2
   2c238:	add	r4, r4, #1
   2c23c:	beq	2ccd4 <__assert_fail@plt+0x1a538>
   2c240:	ldr	r0, [sp, #24]
   2c244:	add	r3, r9, #1
   2c248:	cmp	r3, r0
   2c24c:	bcs	2c264 <__assert_fail@plt+0x19ac8>
   2c250:	ldr	r0, [sp, #36]	; 0x24
   2c254:	ldrb	r3, [r0, r3]
   2c258:	sub	r3, r3, #48	; 0x30
   2c25c:	cmp	r3, #9
   2c260:	bls	2cce4 <__assert_fail@plt+0x1a548>
   2c264:	mov	r5, #48	; 0x30
   2c268:	ldr	r3, [sp, #28]
   2c26c:	eor	r3, r3, #1
   2c270:	orrs	r2, r2, r3
   2c274:	mov	r3, r6
   2c278:	moveq	r6, r2
   2c27c:	beq	2bdf8 <__assert_fail@plt+0x1965c>
   2c280:	mov	r6, #0
   2c284:	b	2be20 <__assert_fail@plt+0x19684>
   2c288:	mov	r2, #0
   2c28c:	mov	r6, r2
   2c290:	mov	r5, #98	; 0x62
   2c294:	b	2be40 <__assert_fail@plt+0x196a4>
   2c298:	mov	r5, #97	; 0x61
   2c29c:	b	2c1a0 <__assert_fail@plt+0x19a04>
   2c2a0:	mov	r3, r7
   2c2a4:	mov	r6, r7
   2c2a8:	mov	r2, #0
   2c2ac:	mov	r7, r3
   2c2b0:	mov	r5, #32
   2c2b4:	b	2bdd8 <__assert_fail@plt+0x1963c>
   2c2b8:	cmp	r9, #0
   2c2bc:	mov	r3, r7
   2c2c0:	bne	2c888 <__assert_fail@plt+0x1a0ec>
   2c2c4:	mov	r6, r7
   2c2c8:	mov	r2, r9
   2c2cc:	mov	r7, r3
   2c2d0:	b	2bdd8 <__assert_fail@plt+0x1963c>
   2c2d4:	mov	r6, r7
   2c2d8:	b	2bdf4 <__assert_fail@plt+0x19658>
   2c2dc:	mov	r7, #0
   2c2e0:	ldr	r3, [sp, #64]	; 0x40
   2c2e4:	cmp	r3, #1
   2c2e8:	bne	2c944 <__assert_fail@plt+0x1a1a8>
   2c2ec:	bl	12460 <__ctype_b_loc@plt>
   2c2f0:	ldr	r2, [sp, #64]	; 0x40
   2c2f4:	sxth	r3, r5
   2c2f8:	mov	ip, r2
   2c2fc:	lsl	r3, r3, #1
   2c300:	ldr	r2, [r0]
   2c304:	ldrh	r3, [r2, r3]
   2c308:	and	r3, r3, #16384	; 0x4000
   2c30c:	cmp	r3, #0
   2c310:	ldr	r3, [sp, #28]
   2c314:	movne	r6, #1
   2c318:	moveq	r6, #0
   2c31c:	movne	r2, #0
   2c320:	andeq	r2, r3, #1
   2c324:	cmp	r2, #0
   2c328:	bne	2cc54 <__assert_fail@plt+0x1a4b8>
   2c32c:	sub	r2, fp, #2
   2c330:	clz	r2, r2
   2c334:	lsr	r2, r2, #5
   2c338:	b	2bdd8 <__assert_fail@plt+0x1963c>
   2c33c:	cmp	r4, #0
   2c340:	bne	2d000 <__assert_fail@plt+0x1a864>
   2c344:	str	r4, [sp, #28]
   2c348:	cmp	sl, #0
   2c34c:	bne	2d044 <__assert_fail@plt+0x1a8a8>
   2c350:	ldr	r3, [pc, #772]	; 2c65c <__assert_fail@plt+0x19ec0>
   2c354:	mov	r4, #1
   2c358:	str	r4, [sp, #40]	; 0x28
   2c35c:	str	r3, [sp, #60]	; 0x3c
   2c360:	str	r4, [sp, #52]	; 0x34
   2c364:	str	sl, [sp, #72]	; 0x48
   2c368:	str	sl, [sp, #68]	; 0x44
   2c36c:	str	sl, [sp, #44]	; 0x2c
   2c370:	str	sl, [sp, #32]
   2c374:	mov	r8, #2
   2c378:	b	2b940 <__assert_fail@plt+0x191a4>
   2c37c:	ldr	r3, [sp, #36]	; 0x24
   2c380:	ldrb	r5, [r3, r9]
   2c384:	cmp	r5, #126	; 0x7e
   2c388:	ldrls	pc, [pc, r5, lsl #2]
   2c38c:	b	2c2e0 <__assert_fail@plt+0x19b44>
   2c390:	andeq	ip, r2, r4, asr #11
   2c394:	andeq	ip, r2, r0, ror #5
   2c398:	andeq	ip, r2, r0, ror #5
   2c39c:	andeq	ip, r2, r0, ror #5
   2c3a0:	andeq	ip, r2, r0, ror #5
   2c3a4:	andeq	ip, r2, r0, ror #5
   2c3a8:	andeq	ip, r2, r0, ror #5
   2c3ac:			; <UNDEFINED> instruction: 0x0002c5b0
   2c3b0:	muleq	r2, ip, r5
   2c3b4:	muleq	r2, r4, r5
   2c3b8:	andeq	ip, r2, ip, lsl #11
   2c3bc:	andeq	ip, r2, ip, lsr r6
   2c3c0:	andeq	ip, r2, r8, lsr #12
   2c3c4:	andeq	ip, r2, r0, asr #1
   2c3c8:	andeq	ip, r2, r0, ror #5
   2c3cc:	andeq	ip, r2, r0, ror #5
   2c3d0:	andeq	ip, r2, r0, ror #5
   2c3d4:	andeq	ip, r2, r0, ror #5
   2c3d8:	andeq	ip, r2, r0, ror #5
   2c3dc:	andeq	ip, r2, r0, ror #5
   2c3e0:	andeq	ip, r2, r0, ror #5
   2c3e4:	andeq	ip, r2, r0, ror #5
   2c3e8:	andeq	ip, r2, r0, ror #5
   2c3ec:	andeq	ip, r2, r0, ror #5
   2c3f0:	andeq	ip, r2, r0, ror #5
   2c3f4:	andeq	ip, r2, r0, ror #5
   2c3f8:	andeq	ip, r2, r0, ror #5
   2c3fc:	andeq	ip, r2, r0, ror #5
   2c400:	andeq	ip, r2, r0, ror #5
   2c404:	andeq	ip, r2, r0, ror #5
   2c408:	andeq	ip, r2, r0, ror #5
   2c40c:	andeq	ip, r2, r0, ror #5
   2c410:	andeq	ip, r2, r8, lsl r6
   2c414:	andeq	ip, r2, r4, lsl #12
   2c418:	andeq	ip, r2, r4, lsl #12
   2c41c:	strdeq	ip, [r2], -r4
   2c420:	andeq	ip, r2, r4, lsl #12
   2c424:	andeq	ip, r2, ip, lsr #6
   2c428:	andeq	ip, r2, r4, lsl #12
   2c42c:	strdeq	fp, [r2], -r4
   2c430:	andeq	ip, r2, r4, lsl #12
   2c434:	andeq	ip, r2, r4, lsl #12
   2c438:	andeq	ip, r2, r4, lsl #12
   2c43c:	andeq	ip, r2, ip, lsr #6
   2c440:	andeq	ip, r2, ip, lsr #6
   2c444:	andeq	ip, r2, ip, lsr #6
   2c448:	andeq	ip, r2, ip, lsr #6
   2c44c:	andeq	ip, r2, ip, lsr #6
   2c450:	andeq	ip, r2, ip, lsr #6
   2c454:	andeq	ip, r2, ip, lsr #6
   2c458:	andeq	ip, r2, ip, lsr #6
   2c45c:	andeq	ip, r2, ip, lsr #6
   2c460:	andeq	ip, r2, ip, lsr #6
   2c464:	andeq	ip, r2, ip, lsr #6
   2c468:	andeq	ip, r2, ip, lsr #6
   2c46c:	andeq	ip, r2, ip, lsr #6
   2c470:	andeq	ip, r2, ip, lsr #6
   2c474:	andeq	ip, r2, ip, lsr #6
   2c478:	andeq	ip, r2, ip, lsr #6
   2c47c:	andeq	ip, r2, r4, lsl #12
   2c480:	andeq	ip, r2, r4, lsl #12
   2c484:	andeq	ip, r2, r4, lsl #12
   2c488:	andeq	ip, r2, r4, lsl #12
   2c48c:	andeq	fp, r2, r8, asr #31
   2c490:	andeq	ip, r2, r0, ror #5
   2c494:	andeq	ip, r2, ip, lsr #6
   2c498:	andeq	ip, r2, ip, lsr #6
   2c49c:	andeq	ip, r2, ip, lsr #6
   2c4a0:	andeq	ip, r2, ip, lsr #6
   2c4a4:	andeq	ip, r2, ip, lsr #6
   2c4a8:	andeq	ip, r2, ip, lsr #6
   2c4ac:	andeq	ip, r2, ip, lsr #6
   2c4b0:	andeq	ip, r2, ip, lsr #6
   2c4b4:	andeq	ip, r2, ip, lsr #6
   2c4b8:	andeq	ip, r2, ip, lsr #6
   2c4bc:	andeq	ip, r2, ip, lsr #6
   2c4c0:	andeq	ip, r2, ip, lsr #6
   2c4c4:	andeq	ip, r2, ip, lsr #6
   2c4c8:	andeq	ip, r2, ip, lsr #6
   2c4cc:	andeq	ip, r2, ip, lsr #6
   2c4d0:	andeq	ip, r2, ip, lsr #6
   2c4d4:	andeq	ip, r2, ip, lsr #6
   2c4d8:	andeq	ip, r2, ip, lsr #6
   2c4dc:	andeq	ip, r2, ip, lsr #6
   2c4e0:	andeq	ip, r2, ip, lsr #6
   2c4e4:	andeq	ip, r2, ip, lsr #6
   2c4e8:	andeq	ip, r2, ip, lsr #6
   2c4ec:	andeq	ip, r2, ip, lsr #6
   2c4f0:	andeq	ip, r2, ip, lsr #6
   2c4f4:	andeq	ip, r2, ip, lsr #6
   2c4f8:	andeq	ip, r2, ip, lsr #6
   2c4fc:	andeq	ip, r2, r4, lsl #12
   2c500:	andeq	fp, r2, r0, lsl #31
   2c504:	andeq	ip, r2, ip, lsr #6
   2c508:	andeq	ip, r2, r4, lsl #12
   2c50c:	andeq	ip, r2, ip, lsr #6
   2c510:	andeq	ip, r2, r4, lsl #12
   2c514:	andeq	ip, r2, ip, lsr #6
   2c518:	andeq	ip, r2, ip, lsr #6
   2c51c:	andeq	ip, r2, ip, lsr #6
   2c520:	andeq	ip, r2, ip, lsr #6
   2c524:	andeq	ip, r2, ip, lsr #6
   2c528:	andeq	ip, r2, ip, lsr #6
   2c52c:	andeq	ip, r2, ip, lsr #6
   2c530:	andeq	ip, r2, ip, lsr #6
   2c534:	andeq	ip, r2, ip, lsr #6
   2c538:	andeq	ip, r2, ip, lsr #6
   2c53c:	andeq	ip, r2, ip, lsr #6
   2c540:	andeq	ip, r2, ip, lsr #6
   2c544:	andeq	ip, r2, ip, lsr #6
   2c548:	andeq	ip, r2, ip, lsr #6
   2c54c:	andeq	ip, r2, ip, lsr #6
   2c550:	andeq	ip, r2, ip, lsr #6
   2c554:	andeq	ip, r2, ip, lsr #6
   2c558:	andeq	ip, r2, ip, lsr #6
   2c55c:	andeq	ip, r2, ip, lsr #6
   2c560:	andeq	ip, r2, ip, lsr #6
   2c564:	andeq	ip, r2, ip, lsr #6
   2c568:	andeq	ip, r2, ip, lsr #6
   2c56c:	andeq	ip, r2, ip, lsr #6
   2c570:	andeq	ip, r2, ip, lsr #6
   2c574:	andeq	ip, r2, ip, lsr #6
   2c578:	andeq	ip, r2, ip, lsr #6
   2c57c:	muleq	r2, r8, sp
   2c580:	andeq	ip, r2, r4, lsl #12
   2c584:	muleq	r2, r8, sp
   2c588:	strdeq	ip, [r2], -r4
   2c58c:	mov	r3, #110	; 0x6e
   2c590:	b	2c0c4 <__assert_fail@plt+0x19928>
   2c594:	mov	r3, #116	; 0x74
   2c598:	b	2c0c4 <__assert_fail@plt+0x19928>
   2c59c:	sub	r2, fp, #2
   2c5a0:	mov	r3, #98	; 0x62
   2c5a4:	clz	r2, r2
   2c5a8:	lsr	r2, r2, #5
   2c5ac:	b	2bfb0 <__assert_fail@plt+0x19814>
   2c5b0:	sub	r2, fp, #2
   2c5b4:	mov	r3, #97	; 0x61
   2c5b8:	clz	r2, r2
   2c5bc:	lsr	r2, r2, #5
   2c5c0:	b	2bfb0 <__assert_fail@plt+0x19814>
   2c5c4:	ldr	r3, [sp, #28]
   2c5c8:	cmp	r3, #0
   2c5cc:	bne	2c1bc <__assert_fail@plt+0x19a20>
   2c5d0:	ldr	r3, [sp, #164]	; 0xa4
   2c5d4:	tst	r3, #1
   2c5d8:	bne	2cc4c <__assert_fail@plt+0x1a4b0>
   2c5dc:	ldr	r6, [sp, #28]
   2c5e0:	sub	r2, fp, #2
   2c5e4:	mov	r7, r6
   2c5e8:	clz	r2, r2
   2c5ec:	lsr	r2, r2, #5
   2c5f0:	b	2bdd8 <__assert_fail@plt+0x1963c>
   2c5f4:	sub	r2, fp, #2
   2c5f8:	clz	r2, r2
   2c5fc:	lsr	r2, r2, #5
   2c600:	b	2bdc4 <__assert_fail@plt+0x19628>
   2c604:	sub	r2, fp, #2
   2c608:	mov	r6, #0
   2c60c:	clz	r2, r2
   2c610:	lsr	r2, r2, #5
   2c614:	b	2bdcc <__assert_fail@plt+0x19630>
   2c618:	sub	r2, fp, #2
   2c61c:	clz	r2, r2
   2c620:	lsr	r2, r2, #5
   2c624:	b	2bdcc <__assert_fail@plt+0x19630>
   2c628:	sub	r2, fp, #2
   2c62c:	mov	r3, #102	; 0x66
   2c630:	clz	r2, r2
   2c634:	lsr	r2, r2, #5
   2c638:	b	2bfb0 <__assert_fail@plt+0x19814>
   2c63c:	sub	r2, fp, #2
   2c640:	mov	r3, #118	; 0x76
   2c644:	clz	r2, r2
   2c648:	lsr	r2, r2, #5
   2c64c:	b	2bfb0 <__assert_fail@plt+0x19814>
   2c650:	andeq	fp, r5, r0, ror #24
   2c654:	andeq	sl, r4, r0, asr #4
   2c658:	andeq	sl, r4, ip, lsr #4
   2c65c:	andeq	r4, r4, r4, ror #27
   2c660:	ldr	r3, [sp, #48]	; 0x30
   2c664:	ldrb	r5, [r3]
   2c668:	cmp	r5, #126	; 0x7e
   2c66c:	ldrls	pc, [pc, r5, lsl #2]
   2c670:	b	2c2dc <__assert_fail@plt+0x19b40>
   2c674:			; <UNDEFINED> instruction: 0x0002c1bc
   2c678:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c67c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c680:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c684:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c688:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c68c:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c690:			; <UNDEFINED> instruction: 0x0002c8b4
   2c694:	andeq	ip, r2, ip, lsr #17
   2c698:	andeq	ip, r2, r8, lsl #3
   2c69c:	andeq	ip, r2, r0, asr r1
   2c6a0:	andeq	ip, r2, r8, lsr #3
   2c6a4:	muleq	r2, r0, r1
   2c6a8:	andeq	ip, r2, r0, lsr #17
   2c6ac:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6b0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6b4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6b8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6bc:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6c0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6c4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6c8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6cc:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6d0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6d4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6d8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6dc:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6e0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6e4:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6e8:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6ec:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6f0:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c6f4:	muleq	r2, r8, r8
   2c6f8:			; <UNDEFINED> instruction: 0x0002c1b0
   2c6fc:			; <UNDEFINED> instruction: 0x0002c1b0
   2c700:	andeq	ip, r2, ip, ror r8
   2c704:			; <UNDEFINED> instruction: 0x0002c1b0
   2c708:	andeq	ip, r2, r0, ror r8
   2c70c:			; <UNDEFINED> instruction: 0x0002c1b0
   2c710:	strdeq	fp, [r2], -r0
   2c714:			; <UNDEFINED> instruction: 0x0002c1b0
   2c718:			; <UNDEFINED> instruction: 0x0002c1b0
   2c71c:			; <UNDEFINED> instruction: 0x0002c1b0
   2c720:	andeq	ip, r2, r0, ror r8
   2c724:	andeq	ip, r2, r0, ror r8
   2c728:	andeq	ip, r2, r0, ror r8
   2c72c:	andeq	ip, r2, r0, ror r8
   2c730:	andeq	ip, r2, r0, ror r8
   2c734:	andeq	ip, r2, r0, ror r8
   2c738:	andeq	ip, r2, r0, ror r8
   2c73c:	andeq	ip, r2, r0, ror r8
   2c740:	andeq	ip, r2, r0, ror r8
   2c744:	andeq	ip, r2, r0, ror r8
   2c748:	andeq	ip, r2, r0, ror r8
   2c74c:	andeq	ip, r2, r0, ror r8
   2c750:	andeq	ip, r2, r0, ror r8
   2c754:	andeq	ip, r2, r0, ror r8
   2c758:	andeq	ip, r2, r0, ror r8
   2c75c:	andeq	ip, r2, r0, ror r8
   2c760:			; <UNDEFINED> instruction: 0x0002c1b0
   2c764:			; <UNDEFINED> instruction: 0x0002c1b0
   2c768:			; <UNDEFINED> instruction: 0x0002c1b0
   2c76c:			; <UNDEFINED> instruction: 0x0002c1b0
   2c770:	andeq	fp, r2, r4, asr #31
   2c774:	ldrdeq	ip, [r2], -ip	; <UNPREDICTABLE>
   2c778:	andeq	ip, r2, r0, ror r8
   2c77c:	andeq	ip, r2, r0, ror r8
   2c780:	andeq	ip, r2, r0, ror r8
   2c784:	andeq	ip, r2, r0, ror r8
   2c788:	andeq	ip, r2, r0, ror r8
   2c78c:	andeq	ip, r2, r0, ror r8
   2c790:	andeq	ip, r2, r0, ror r8
   2c794:	andeq	ip, r2, r0, ror r8
   2c798:	andeq	ip, r2, r0, ror r8
   2c79c:	andeq	ip, r2, r0, ror r8
   2c7a0:	andeq	ip, r2, r0, ror r8
   2c7a4:	andeq	ip, r2, r0, ror r8
   2c7a8:	andeq	ip, r2, r0, ror r8
   2c7ac:	andeq	ip, r2, r0, ror r8
   2c7b0:	andeq	ip, r2, r0, ror r8
   2c7b4:	andeq	ip, r2, r0, ror r8
   2c7b8:	andeq	ip, r2, r0, ror r8
   2c7bc:	andeq	ip, r2, r0, ror r8
   2c7c0:	andeq	ip, r2, r0, ror r8
   2c7c4:	andeq	ip, r2, r0, ror r8
   2c7c8:	andeq	ip, r2, r0, ror r8
   2c7cc:	andeq	ip, r2, r0, ror r8
   2c7d0:	andeq	ip, r2, r0, ror r8
   2c7d4:	andeq	ip, r2, r0, ror r8
   2c7d8:	andeq	ip, r2, r0, ror r8
   2c7dc:	andeq	ip, r2, r0, ror r8
   2c7e0:			; <UNDEFINED> instruction: 0x0002c1b0
   2c7e4:	andeq	fp, r2, ip, ror pc
   2c7e8:	andeq	ip, r2, r0, ror r8
   2c7ec:			; <UNDEFINED> instruction: 0x0002c1b0
   2c7f0:	andeq	ip, r2, r0, ror r8
   2c7f4:			; <UNDEFINED> instruction: 0x0002c1b0
   2c7f8:	andeq	ip, r2, r0, ror r8
   2c7fc:	andeq	ip, r2, r0, ror r8
   2c800:	andeq	ip, r2, r0, ror r8
   2c804:	andeq	ip, r2, r0, ror r8
   2c808:	andeq	ip, r2, r0, ror r8
   2c80c:	andeq	ip, r2, r0, ror r8
   2c810:	andeq	ip, r2, r0, ror r8
   2c814:	andeq	ip, r2, r0, ror r8
   2c818:	andeq	ip, r2, r0, ror r8
   2c81c:	andeq	ip, r2, r0, ror r8
   2c820:	andeq	ip, r2, r0, ror r8
   2c824:	andeq	ip, r2, r0, ror r8
   2c828:	andeq	ip, r2, r0, ror r8
   2c82c:	andeq	ip, r2, r0, ror r8
   2c830:	andeq	ip, r2, r0, ror r8
   2c834:	andeq	ip, r2, r0, ror r8
   2c838:	andeq	ip, r2, r0, ror r8
   2c83c:	andeq	ip, r2, r0, ror r8
   2c840:	andeq	ip, r2, r0, ror r8
   2c844:	andeq	ip, r2, r0, ror r8
   2c848:	andeq	ip, r2, r0, ror r8
   2c84c:	andeq	ip, r2, r0, ror r8
   2c850:	andeq	ip, r2, r0, ror r8
   2c854:	andeq	ip, r2, r0, ror r8
   2c858:	andeq	ip, r2, r0, ror r8
   2c85c:	andeq	ip, r2, r0, ror r8
   2c860:	muleq	r2, r4, sp
   2c864:			; <UNDEFINED> instruction: 0x0002c1b0
   2c868:	muleq	r2, r4, sp
   2c86c:	andeq	ip, r2, ip, ror r8
   2c870:	mov	r6, r7
   2c874:	mov	r7, #0
   2c878:	b	2bdf4 <__assert_fail@plt+0x19658>
   2c87c:	cmp	r9, #0
   2c880:	mov	r3, #0
   2c884:	beq	2c2c4 <__assert_fail@plt+0x19b28>
   2c888:	mov	r6, #0
   2c88c:	mov	r7, r3
   2c890:	mov	r3, r6
   2c894:	b	2bdf8 <__assert_fail@plt+0x1965c>
   2c898:	mov	r3, #0
   2c89c:	b	2c2a4 <__assert_fail@plt+0x19b08>
   2c8a0:	mov	r7, #0
   2c8a4:	mov	r3, #114	; 0x72
   2c8a8:	b	2c0c4 <__assert_fail@plt+0x19928>
   2c8ac:	mov	r5, #98	; 0x62
   2c8b0:	b	2c154 <__assert_fail@plt+0x199b8>
   2c8b4:	mov	r5, #97	; 0x61
   2c8b8:	b	2c194 <__assert_fail@plt+0x199f8>
   2c8bc:	ldr	r3, [sp, #32]
   2c8c0:	cmp	r3, #0
   2c8c4:	bne	2cd0c <__assert_fail@plt+0x1a570>
   2c8c8:	add	r9, r9, #1
   2c8cc:	ldr	r3, [sp, #44]	; 0x2c
   2c8d0:	mov	r6, #0
   2c8d4:	mov	r5, #92	; 0x5c
   2c8d8:	b	2c08c <__assert_fail@plt+0x198f0>
   2c8dc:	ldr	r3, [sp, #36]	; 0x24
   2c8e0:	ldrb	r3, [r3, #1]
   2c8e4:	adds	r3, r3, #0
   2c8e8:	movne	r3, #1
   2c8ec:	b	2bdb0 <__assert_fail@plt+0x19614>
   2c8f0:	ldr	r3, [sp, #164]	; 0xa4
   2c8f4:	ands	r3, r3, #4
   2c8f8:	beq	2c91c <__assert_fail@plt+0x1a180>
   2c8fc:	ldr	r2, [sp, #24]
   2c900:	add	r3, r9, #2
   2c904:	cmp	r3, r2
   2c908:	bcs	2c91c <__assert_fail@plt+0x1a180>
   2c90c:	ldr	r2, [sp, #48]	; 0x30
   2c910:	ldrb	r5, [r2, #1]
   2c914:	cmp	r5, #63	; 0x3f
   2c918:	beq	2cd80 <__assert_fail@plt+0x1a5e4>
   2c91c:	mov	r2, #0
   2c920:	mov	r6, r2
   2c924:	mov	r5, #63	; 0x3f
   2c928:	b	2bdd8 <__assert_fail@plt+0x1963c>
   2c92c:	ldr	r3, [sp, #32]
   2c930:	cmp	r3, #0
   2c934:	bne	2cd0c <__assert_fail@plt+0x1a570>
   2c938:	mov	r6, r3
   2c93c:	mov	r5, #63	; 0x3f
   2c940:	b	2be20 <__assert_fail@plt+0x19684>
   2c944:	ldr	r3, [sp, #24]
   2c948:	cmn	r3, #1
   2c94c:	mov	r3, #0
   2c950:	str	r3, [sp, #108]	; 0x6c
   2c954:	str	r3, [sp, #112]	; 0x70
   2c958:	bne	2c968 <__assert_fail@plt+0x1a1cc>
   2c95c:	ldr	r0, [sp, #36]	; 0x24
   2c960:	bl	1249c <strlen@plt>
   2c964:	str	r0, [sp, #24]
   2c968:	mov	r3, #0
   2c96c:	str	sl, [sp, #88]	; 0x58
   2c970:	ldr	sl, [sp, #36]	; 0x24
   2c974:	str	r5, [sp, #92]	; 0x5c
   2c978:	mov	r5, r3
   2c97c:	str	r7, [sp, #96]	; 0x60
   2c980:	str	r4, [sp, #100]	; 0x64
   2c984:	str	r8, [sp, #84]	; 0x54
   2c988:	ldr	r3, [sp, #24]
   2c98c:	add	r4, r9, r5
   2c990:	add	r7, sl, r4
   2c994:	sub	r2, r3, r4
   2c998:	mov	r1, r7
   2c99c:	add	r3, sp, #108	; 0x6c
   2c9a0:	add	r0, sp, #104	; 0x68
   2c9a4:	bl	31be8 <fts_children@@Base+0x14c>
   2c9a8:	subs	r8, r0, #0
   2c9ac:	beq	2c9fc <__assert_fail@plt+0x1a260>
   2c9b0:	cmn	r8, #1
   2c9b4:	beq	2cd5c <__assert_fail@plt+0x1a5c0>
   2c9b8:	cmn	r8, #2
   2c9bc:	beq	2ce7c <__assert_fail@plt+0x1a6e0>
   2c9c0:	ldr	r3, [sp, #32]
   2c9c4:	cmp	fp, #2
   2c9c8:	movne	r3, #0
   2c9cc:	andeq	r3, r3, #1
   2c9d0:	cmp	r3, #0
   2c9d4:	bne	2cb5c <__assert_fail@plt+0x1a3c0>
   2c9d8:	ldr	r0, [sp, #104]	; 0x68
   2c9dc:	bl	122bc <iswprint@plt>
   2c9e0:	add	r5, r5, r8
   2c9e4:	cmp	r0, #0
   2c9e8:	add	r0, sp, #108	; 0x6c
   2c9ec:	moveq	r6, #0
   2c9f0:	bl	121e4 <mbsinit@plt>
   2c9f4:	cmp	r0, #0
   2c9f8:	beq	2c988 <__assert_fail@plt+0x1a1ec>
   2c9fc:	ldr	r3, [sp, #28]
   2ca00:	mov	ip, r5
   2ca04:	eor	r2, r6, #1
   2ca08:	ldr	r5, [sp, #92]	; 0x5c
   2ca0c:	ldr	r7, [sp, #96]	; 0x60
   2ca10:	ldr	r4, [sp, #100]	; 0x64
   2ca14:	ldr	r8, [sp, #84]	; 0x54
   2ca18:	ldr	sl, [sp, #88]	; 0x58
   2ca1c:	and	r2, r2, r3
   2ca20:	cmp	ip, #1
   2ca24:	bls	2c324 <__assert_fail@plt+0x19b88>
   2ca28:	add	r1, ip, r9
   2ca2c:	ldr	lr, [sp, #48]	; 0x30
   2ca30:	mov	r0, #0
   2ca34:	str	r6, [sp, #48]	; 0x30
   2ca38:	mov	ip, #39	; 0x27
   2ca3c:	ldr	r6, [sp, #44]	; 0x2c
   2ca40:	b	2caf8 <__assert_fail@plt+0x1a35c>
   2ca44:	ldr	r0, [sp, #32]
   2ca48:	sub	r3, fp, #2
   2ca4c:	cmp	r0, #0
   2ca50:	clz	r3, r3
   2ca54:	lsr	r3, r3, #5
   2ca58:	bne	2cc60 <__assert_fail@plt+0x1a4c4>
   2ca5c:	eor	r0, r6, #1
   2ca60:	ands	r3, r3, r0
   2ca64:	beq	2ca94 <__assert_fail@plt+0x1a2f8>
   2ca68:	add	r0, r4, #1
   2ca6c:	cmp	sl, r4
   2ca70:	strbhi	ip, [r8, r4]
   2ca74:	cmp	sl, r0
   2ca78:	movhi	r6, #36	; 0x24
   2ca7c:	strbhi	r6, [r8, r0]
   2ca80:	add	r0, r4, #2
   2ca84:	mov	r6, r3
   2ca88:	add	r4, r4, #3
   2ca8c:	cmp	sl, r0
   2ca90:	strbhi	ip, [r8, r0]
   2ca94:	cmp	sl, r4
   2ca98:	movhi	r3, #92	; 0x5c
   2ca9c:	strbhi	r3, [r8, r4]
   2caa0:	add	r3, r4, #1
   2caa4:	cmp	sl, r3
   2caa8:	lsrhi	r0, r5, #6
   2caac:	addhi	r0, r0, #48	; 0x30
   2cab0:	strbhi	r0, [r8, r3]
   2cab4:	add	r0, r4, #2
   2cab8:	cmp	sl, r0
   2cabc:	lsrhi	r3, r5, #3
   2cac0:	andhi	r3, r3, #7
   2cac4:	addhi	r3, r3, #48	; 0x30
   2cac8:	add	r9, r9, #1
   2cacc:	strbhi	r3, [r8, r0]
   2cad0:	and	r5, r5, #7
   2cad4:	cmp	r9, r1
   2cad8:	add	r5, r5, #48	; 0x30
   2cadc:	add	r4, r4, #3
   2cae0:	bcs	2cc80 <__assert_fail@plt+0x1a4e4>
   2cae4:	mov	r0, r2
   2cae8:	cmp	sl, r4
   2caec:	strbhi	r5, [r8, r4]
   2caf0:	ldrb	r5, [lr, #1]!
   2caf4:	add	r4, r4, #1
   2caf8:	cmp	r2, #0
   2cafc:	bne	2ca44 <__assert_fail@plt+0x1a2a8>
   2cb00:	eor	r3, r0, #1
   2cb04:	and	r3, r3, r6
   2cb08:	cmp	r7, #0
   2cb0c:	uxtb	r3, r3
   2cb10:	beq	2cb24 <__assert_fail@plt+0x1a388>
   2cb14:	cmp	sl, r4
   2cb18:	movhi	r7, #92	; 0x5c
   2cb1c:	strbhi	r7, [r8, r4]
   2cb20:	add	r4, r4, #1
   2cb24:	add	r9, r9, #1
   2cb28:	cmp	r9, r1
   2cb2c:	bcs	2cc74 <__assert_fail@plt+0x1a4d8>
   2cb30:	cmp	r3, #0
   2cb34:	beq	2cca0 <__assert_fail@plt+0x1a504>
   2cb38:	cmp	sl, r4
   2cb3c:	add	r3, r4, #1
   2cb40:	strbhi	ip, [r8, r4]
   2cb44:	mov	r7, #0
   2cb48:	cmp	sl, r3
   2cb4c:	strbhi	ip, [r8, r3]
   2cb50:	add	r4, r4, #2
   2cb54:	mov	r6, r7
   2cb58:	b	2cae8 <__assert_fail@plt+0x1a34c>
   2cb5c:	cmp	r8, #1
   2cb60:	beq	2c9d8 <__assert_fail@plt+0x1a23c>
   2cb64:	add	r1, r4, #1
   2cb68:	add	r3, sl, r8
   2cb6c:	add	r1, sl, r1
   2cb70:	add	r4, r3, r4
   2cb74:	ldrb	r3, [r1], #1
   2cb78:	sub	r3, r3, #91	; 0x5b
   2cb7c:	cmp	r3, #33	; 0x21
   2cb80:	ldrls	pc, [pc, r3, lsl #2]
   2cb84:	b	2cc10 <__assert_fail@plt+0x1a474>
   2cb88:	andeq	ip, r2, ip, lsl ip
   2cb8c:	andeq	ip, r2, ip, lsl ip
   2cb90:	andeq	ip, r2, r0, lsl ip
   2cb94:	andeq	ip, r2, ip, lsl ip
   2cb98:	andeq	ip, r2, r0, lsl ip
   2cb9c:	andeq	ip, r2, ip, lsl ip
   2cba0:	andeq	ip, r2, r0, lsl ip
   2cba4:	andeq	ip, r2, r0, lsl ip
   2cba8:	andeq	ip, r2, r0, lsl ip
   2cbac:	andeq	ip, r2, r0, lsl ip
   2cbb0:	andeq	ip, r2, r0, lsl ip
   2cbb4:	andeq	ip, r2, r0, lsl ip
   2cbb8:	andeq	ip, r2, r0, lsl ip
   2cbbc:	andeq	ip, r2, r0, lsl ip
   2cbc0:	andeq	ip, r2, r0, lsl ip
   2cbc4:	andeq	ip, r2, r0, lsl ip
   2cbc8:	andeq	ip, r2, r0, lsl ip
   2cbcc:	andeq	ip, r2, r0, lsl ip
   2cbd0:	andeq	ip, r2, r0, lsl ip
   2cbd4:	andeq	ip, r2, r0, lsl ip
   2cbd8:	andeq	ip, r2, r0, lsl ip
   2cbdc:	andeq	ip, r2, r0, lsl ip
   2cbe0:	andeq	ip, r2, r0, lsl ip
   2cbe4:	andeq	ip, r2, r0, lsl ip
   2cbe8:	andeq	ip, r2, r0, lsl ip
   2cbec:	andeq	ip, r2, r0, lsl ip
   2cbf0:	andeq	ip, r2, r0, lsl ip
   2cbf4:	andeq	ip, r2, r0, lsl ip
   2cbf8:	andeq	ip, r2, r0, lsl ip
   2cbfc:	andeq	ip, r2, r0, lsl ip
   2cc00:	andeq	ip, r2, r0, lsl ip
   2cc04:	andeq	ip, r2, r0, lsl ip
   2cc08:	andeq	ip, r2, r0, lsl ip
   2cc0c:	andeq	ip, r2, ip, lsl ip
   2cc10:	cmp	r4, r1
   2cc14:	bne	2cb74 <__assert_fail@plt+0x1a3d8>
   2cc18:	b	2c9d8 <__assert_fail@plt+0x1a23c>
   2cc1c:	ldr	fp, [sp, #84]	; 0x54
   2cc20:	ldr	sl, [sp, #88]	; 0x58
   2cc24:	mov	r8, #2
   2cc28:	b	2c0e4 <__assert_fail@plt+0x19948>
   2cc2c:	cmp	sl, r4
   2cc30:	movls	r1, r4
   2cc34:	bls	2c234 <__assert_fail@plt+0x19a98>
   2cc38:	ldr	r3, [sp, #44]	; 0x2c
   2cc3c:	b	2c224 <__assert_fail@plt+0x19a88>
   2cc40:	str	sl, [sp, #72]	; 0x48
   2cc44:	ldr	sl, [sp, #32]
   2cc48:	b	2c05c <__assert_fail@plt+0x198c0>
   2cc4c:	add	r9, r9, #1
   2cc50:	b	2b950 <__assert_fail@plt+0x191b4>
   2cc54:	ldr	r2, [sp, #28]
   2cc58:	mov	r6, #0
   2cc5c:	b	2ca28 <__assert_fail@plt+0x1a28c>
   2cc60:	str	fp, [sp, #160]	; 0xa0
   2cc64:	str	r3, [sp, #28]
   2cc68:	mov	fp, r8
   2cc6c:	ldr	r8, [sp, #160]	; 0xa0
   2cc70:	b	2c0e4 <__assert_fail@plt+0x19948>
   2cc74:	str	r6, [sp, #44]	; 0x2c
   2cc78:	ldr	r6, [sp, #48]	; 0x30
   2cc7c:	b	2c08c <__assert_fail@plt+0x198f0>
   2cc80:	str	r6, [sp, #44]	; 0x2c
   2cc84:	ldr	r6, [sp, #48]	; 0x30
   2cc88:	b	2be98 <__assert_fail@plt+0x196fc>
   2cc8c:	add	r4, r4, #4
   2cc90:	str	r3, [sp, #44]	; 0x2c
   2cc94:	mov	r6, #0
   2cc98:	mov	r5, #48	; 0x30
   2cc9c:	b	2be20 <__assert_fail@plt+0x19684>
   2cca0:	mov	r7, r3
   2cca4:	b	2cae8 <__assert_fail@plt+0x1a34c>
   2cca8:	ldr	r3, [pc, #-1624]	; 2c658 <__assert_fail@plt+0x19ebc>
   2ccac:	mov	r4, #1
   2ccb0:	str	r4, [sp, #40]	; 0x28
   2ccb4:	str	r4, [sp, #28]
   2ccb8:	str	r4, [sp, #52]	; 0x34
   2ccbc:	str	sl, [sp, #72]	; 0x48
   2ccc0:	str	sl, [sp, #68]	; 0x44
   2ccc4:	str	sl, [sp, #44]	; 0x2c
   2ccc8:	str	sl, [sp, #32]
   2cccc:	str	r3, [sp, #60]	; 0x3c
   2ccd0:	b	2b940 <__assert_fail@plt+0x191a4>
   2ccd4:	mov	r3, r6
   2ccd8:	mov	r5, #48	; 0x30
   2ccdc:	mov	r6, #0
   2cce0:	b	2be20 <__assert_fail@plt+0x19684>
   2cce4:	cmp	sl, r4
   2cce8:	movhi	r3, #48	; 0x30
   2ccec:	strbhi	r3, [r8, r4]
   2ccf0:	add	r3, r1, #2
   2ccf4:	cmp	sl, r3
   2ccf8:	movhi	r0, #48	; 0x30
   2ccfc:	strbhi	r0, [r8, r3]
   2cd00:	add	r4, r1, #3
   2cd04:	mov	r5, #48	; 0x30
   2cd08:	b	2c268 <__assert_fail@plt+0x19acc>
   2cd0c:	str	fp, [sp, #160]	; 0xa0
   2cd10:	mov	fp, r8
   2cd14:	ldr	r8, [sp, #160]	; 0xa0
   2cd18:	b	2c0e4 <__assert_fail@plt+0x19948>
   2cd1c:	ldr	r2, [sp, #80]	; 0x50
   2cd20:	ldrb	r3, [r2]
   2cd24:	cmp	r3, #0
   2cd28:	beq	2b910 <__assert_fail@plt+0x19174>
   2cd2c:	cmp	sl, r4
   2cd30:	strbhi	r3, [fp, r4]
   2cd34:	ldrb	r3, [r2, #1]!
   2cd38:	add	r4, r4, #1
   2cd3c:	cmp	r3, #0
   2cd40:	bne	2cd2c <__assert_fail@plt+0x1a590>
   2cd44:	b	2b910 <__assert_fail@plt+0x19174>
   2cd48:	str	fp, [sp, #160]	; 0xa0
   2cd4c:	mov	r3, #0
   2cd50:	mov	fp, r8
   2cd54:	ldr	r8, [sp, #160]	; 0xa0
   2cd58:	b	2c178 <__assert_fail@plt+0x199dc>
   2cd5c:	mov	ip, r5
   2cd60:	ldr	r7, [sp, #96]	; 0x60
   2cd64:	ldr	r5, [sp, #92]	; 0x5c
   2cd68:	ldr	r4, [sp, #100]	; 0x64
   2cd6c:	ldr	r8, [sp, #84]	; 0x54
   2cd70:	ldr	sl, [sp, #88]	; 0x58
   2cd74:	ldr	r2, [sp, #28]
   2cd78:	mov	r6, #0
   2cd7c:	b	2ca20 <__assert_fail@plt+0x1a284>
   2cd80:	ldr	r2, [sp, #36]	; 0x24
   2cd84:	ldrb	r1, [r2, r3]
   2cd88:	sub	r2, r1, #33	; 0x21
   2cd8c:	cmp	r2, #29
   2cd90:	ldrls	pc, [pc, r2, lsl #2]
   2cd94:	b	2ce70 <__assert_fail@plt+0x1a6d4>
   2cd98:	andeq	ip, r2, r0, lsl lr
   2cd9c:	andeq	ip, r2, r0, ror lr
   2cda0:	andeq	ip, r2, r0, ror lr
   2cda4:	andeq	ip, r2, r0, ror lr
   2cda8:	andeq	ip, r2, r0, ror lr
   2cdac:	andeq	ip, r2, r0, ror lr
   2cdb0:	andeq	ip, r2, r0, lsl lr
   2cdb4:	andeq	ip, r2, r0, lsl lr
   2cdb8:	andeq	ip, r2, r0, lsl lr
   2cdbc:	andeq	ip, r2, r0, ror lr
   2cdc0:	andeq	ip, r2, r0, ror lr
   2cdc4:	andeq	ip, r2, r0, ror lr
   2cdc8:	andeq	ip, r2, r0, lsl lr
   2cdcc:	andeq	ip, r2, r0, ror lr
   2cdd0:	andeq	ip, r2, r0, lsl lr
   2cdd4:	andeq	ip, r2, r0, ror lr
   2cdd8:	andeq	ip, r2, r0, ror lr
   2cddc:	andeq	ip, r2, r0, ror lr
   2cde0:	andeq	ip, r2, r0, ror lr
   2cde4:	andeq	ip, r2, r0, ror lr
   2cde8:	andeq	ip, r2, r0, ror lr
   2cdec:	andeq	ip, r2, r0, ror lr
   2cdf0:	andeq	ip, r2, r0, ror lr
   2cdf4:	andeq	ip, r2, r0, ror lr
   2cdf8:	andeq	ip, r2, r0, ror lr
   2cdfc:	andeq	ip, r2, r0, ror lr
   2ce00:	andeq	ip, r2, r0, ror lr
   2ce04:	andeq	ip, r2, r0, lsl lr
   2ce08:	andeq	ip, r2, r0, lsl lr
   2ce0c:	andeq	ip, r2, r0, lsl lr
   2ce10:	ldr	r2, [sp, #32]
   2ce14:	cmp	r2, #0
   2ce18:	bne	2cf1c <__assert_fail@plt+0x1a780>
   2ce1c:	cmp	sl, r4
   2ce20:	movhi	r2, #63	; 0x3f
   2ce24:	strbhi	r2, [r8, r4]
   2ce28:	add	r2, r4, #1
   2ce2c:	cmp	sl, r2
   2ce30:	movhi	r0, #34	; 0x22
   2ce34:	strbhi	r0, [r8, r2]
   2ce38:	add	r2, r4, #2
   2ce3c:	cmp	sl, r2
   2ce40:	movhi	r0, #34	; 0x22
   2ce44:	strbhi	r0, [r8, r2]
   2ce48:	add	r2, r4, #3
   2ce4c:	cmp	sl, r2
   2ce50:	movhi	r0, #63	; 0x3f
   2ce54:	strbhi	r0, [r8, r2]
   2ce58:	mov	r2, #0
   2ce5c:	add	r4, r4, #4
   2ce60:	mov	r5, r1
   2ce64:	mov	r9, r3
   2ce68:	mov	r6, r2
   2ce6c:	b	2c268 <__assert_fail@plt+0x19acc>
   2ce70:	mov	r2, #0
   2ce74:	mov	r6, r2
   2ce78:	b	2bdd8 <__assert_fail@plt+0x1963c>
   2ce7c:	ldr	r0, [sp, #24]
   2ce80:	mov	r1, r4
   2ce84:	cmp	r1, r0
   2ce88:	mov	r2, r7
   2ce8c:	mov	r3, r5
   2ce90:	mov	ip, r5
   2ce94:	ldr	r7, [sp, #96]	; 0x60
   2ce98:	ldr	r5, [sp, #92]	; 0x5c
   2ce9c:	ldr	r4, [sp, #100]	; 0x64
   2cea0:	ldr	r8, [sp, #84]	; 0x54
   2cea4:	ldr	sl, [sp, #88]	; 0x58
   2cea8:	bcs	2cedc <__assert_fail@plt+0x1a740>
   2ceac:	ldrb	r6, [r2]
   2ceb0:	cmp	r6, #0
   2ceb4:	bne	2cec8 <__assert_fail@plt+0x1a72c>
   2ceb8:	b	2cff8 <__assert_fail@plt+0x1a85c>
   2cebc:	ldrb	r6, [r2, #1]!
   2cec0:	cmp	r6, #0
   2cec4:	beq	2cf80 <__assert_fail@plt+0x1a7e4>
   2cec8:	add	r3, r3, #1
   2cecc:	add	r1, r9, r3
   2ced0:	cmp	r1, r0
   2ced4:	bcc	2cebc <__assert_fail@plt+0x1a720>
   2ced8:	mov	ip, r3
   2cedc:	ldr	r2, [sp, #28]
   2cee0:	mov	r6, #0
   2cee4:	b	2ca20 <__assert_fail@plt+0x1a284>
   2cee8:	mov	r3, #1
   2ceec:	str	r3, [sp, #40]	; 0x28
   2cef0:	str	r3, [sp, #32]
   2cef4:	str	r3, [sp, #28]
   2cef8:	str	r3, [sp, #52]	; 0x34
   2cefc:	ldr	r3, [pc, #-2220]	; 2c658 <__assert_fail@plt+0x19ebc>
   2cf00:	mov	r2, #0
   2cf04:	str	r2, [sp, #68]	; 0x44
   2cf08:	str	r2, [sp, #44]	; 0x2c
   2cf0c:	str	r2, [sp, #72]	; 0x48
   2cf10:	mov	r4, r2
   2cf14:	str	r3, [sp, #60]	; 0x3c
   2cf18:	b	2b940 <__assert_fail@plt+0x191a4>
   2cf1c:	str	fp, [sp, #160]	; 0xa0
   2cf20:	mov	fp, r8
   2cf24:	ldr	r8, [sp, #160]	; 0xa0
   2cf28:	b	2c0f0 <__assert_fail@plt+0x19954>
   2cf2c:	mov	r2, r3
   2cf30:	ldr	r3, [sp, #60]	; 0x3c
   2cf34:	cmp	r3, #0
   2cf38:	moveq	r2, #0
   2cf3c:	andne	r2, r2, #1
   2cf40:	cmp	r2, #0
   2cf44:	beq	2cf70 <__assert_fail@plt+0x1a7d4>
   2cf48:	mov	r2, r3
   2cf4c:	ldrb	r3, [r3]
   2cf50:	cmp	r3, #0
   2cf54:	beq	2cf70 <__assert_fail@plt+0x1a7d4>
   2cf58:	cmp	sl, r4
   2cf5c:	strbhi	r3, [fp, r4]
   2cf60:	ldrb	r3, [r2, #1]!
   2cf64:	add	r4, r4, #1
   2cf68:	cmp	r3, #0
   2cf6c:	bne	2cf58 <__assert_fail@plt+0x1a7bc>
   2cf70:	cmp	sl, r4
   2cf74:	movhi	r3, #0
   2cf78:	strbhi	r3, [fp, r4]
   2cf7c:	b	2c130 <__assert_fail@plt+0x19994>
   2cf80:	mov	ip, r3
   2cf84:	ldr	r2, [sp, #28]
   2cf88:	b	2ca20 <__assert_fail@plt+0x1a284>
   2cf8c:	str	fp, [sp, #160]	; 0xa0
   2cf90:	mov	fp, r8
   2cf94:	ldr	r8, [sp, #160]	; 0xa0
   2cf98:	sub	r3, r8, #2
   2cf9c:	clz	r3, r3
   2cfa0:	lsr	r3, r3, #5
   2cfa4:	str	r3, [sp, #28]
   2cfa8:	b	2c0e4 <__assert_fail@plt+0x19948>
   2cfac:	ldr	r3, [sp, #76]	; 0x4c
   2cfb0:	mov	ip, #5
   2cfb4:	str	r3, [sp, #16]
   2cfb8:	ldr	r3, [sp, #80]	; 0x50
   2cfbc:	ldr	r2, [sp, #36]	; 0x24
   2cfc0:	str	r3, [sp, #12]
   2cfc4:	ldr	r3, [sp, #56]	; 0x38
   2cfc8:	ldr	r1, [sp, #72]	; 0x48
   2cfcc:	str	r3, [sp, #8]
   2cfd0:	ldr	r3, [sp, #164]	; 0xa4
   2cfd4:	mov	r0, fp
   2cfd8:	str	r3, [sp, #4]
   2cfdc:	str	ip, [sp]
   2cfe0:	ldr	r3, [sp, #24]
   2cfe4:	bl	2b848 <__assert_fail@plt+0x190ac>
   2cfe8:	mov	r4, r0
   2cfec:	b	2c130 <__assert_fail@plt+0x19994>
   2cff0:	mov	r8, #2
   2cff4:	b	2c0e4 <__assert_fail@plt+0x19948>
   2cff8:	ldr	r2, [sp, #28]
   2cffc:	b	2ca20 <__assert_fail@plt+0x1a284>
   2d000:	mov	r3, #0
   2d004:	str	r3, [sp, #68]	; 0x44
   2d008:	str	r3, [sp, #44]	; 0x2c
   2d00c:	str	r3, [sp, #72]	; 0x48
   2d010:	str	r3, [sp, #28]
   2d014:	mov	r4, r3
   2d018:	ldr	r3, [pc, #-2500]	; 2c65c <__assert_fail@plt+0x19ec0>
   2d01c:	mov	r2, #1
   2d020:	str	r2, [sp, #40]	; 0x28
   2d024:	str	r2, [sp, #32]
   2d028:	str	r2, [sp, #52]	; 0x34
   2d02c:	str	r3, [sp, #60]	; 0x3c
   2d030:	b	2b940 <__assert_fail@plt+0x191a4>
   2d034:	bl	12244 <__stack_chk_fail@plt>
   2d038:	mov	r5, r3
   2d03c:	mov	r6, #0
   2d040:	b	2be34 <__assert_fail@plt+0x19698>
   2d044:	mov	r3, #0
   2d048:	mov	r2, #1
   2d04c:	str	r3, [sp, #44]	; 0x2c
   2d050:	str	r3, [sp, #72]	; 0x48
   2d054:	str	r2, [sp, #40]	; 0x28
   2d058:	b	2bf50 <__assert_fail@plt+0x197b4>
   2d05c:	bl	1273c <abort@plt>
   2d060:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d064:	sub	sp, sp, #44	; 0x2c
   2d068:	mov	r6, r0
   2d06c:	mov	r4, r3
   2d070:	mov	sl, r1
   2d074:	mov	fp, r2
   2d078:	bl	124d8 <__errno_location@plt>
   2d07c:	ldr	r7, [pc, #364]	; 2d1f0 <__assert_fail@plt+0x1aa54>
   2d080:	cmp	r6, #0
   2d084:	ldr	r5, [r7]
   2d088:	ldr	r3, [r0]
   2d08c:	str	r3, [sp, #24]
   2d090:	blt	2d1ec <__assert_fail@plt+0x1aa50>
   2d094:	ldr	r3, [r7, #4]
   2d098:	mov	r8, r0
   2d09c:	cmp	r3, r6
   2d0a0:	bgt	2d0ec <__assert_fail@plt+0x1a950>
   2d0a4:	cmn	r6, #-268435454	; 0xf0000002
   2d0a8:	bgt	2d1e8 <__assert_fail@plt+0x1aa4c>
   2d0ac:	add	r9, r6, #1
   2d0b0:	add	r3, r7, #8
   2d0b4:	cmp	r5, r3
   2d0b8:	lsl	r1, r9, #3
   2d0bc:	beq	2d1c8 <__assert_fail@plt+0x1aa2c>
   2d0c0:	mov	r0, r5
   2d0c4:	bl	2df60 <__assert_fail@plt+0x1b7c4>
   2d0c8:	mov	r5, r0
   2d0cc:	str	r0, [r7]
   2d0d0:	ldr	r0, [r7, #4]
   2d0d4:	mov	r1, #0
   2d0d8:	sub	r2, r9, r0
   2d0dc:	add	r0, r5, r0, lsl #3
   2d0e0:	lsl	r2, r2, #3
   2d0e4:	bl	12514 <memset@plt>
   2d0e8:	str	r9, [r7, #4]
   2d0ec:	add	r3, r5, r6, lsl #3
   2d0f0:	ldr	r1, [r4, #4]
   2d0f4:	ldr	r7, [r3, #4]
   2d0f8:	ldr	r9, [r5, r6, lsl #3]
   2d0fc:	ldr	r2, [r4, #40]	; 0x28
   2d100:	ldr	ip, [r4, #44]	; 0x2c
   2d104:	str	r3, [sp, #28]
   2d108:	ldr	r3, [r4]
   2d10c:	orr	r1, r1, #1
   2d110:	add	lr, r4, #8
   2d114:	str	r1, [sp, #36]	; 0x24
   2d118:	str	r1, [sp, #4]
   2d11c:	str	r2, [sp, #12]
   2d120:	str	r3, [sp]
   2d124:	mov	r0, r7
   2d128:	mov	r1, r9
   2d12c:	str	ip, [sp, #16]
   2d130:	str	lr, [sp, #8]
   2d134:	mov	r3, fp
   2d138:	mov	r2, sl
   2d13c:	str	lr, [sp, #32]
   2d140:	bl	2b848 <__assert_fail@plt+0x190ac>
   2d144:	cmp	r9, r0
   2d148:	bhi	2d1b4 <__assert_fail@plt+0x1aa18>
   2d14c:	ldr	r3, [pc, #160]	; 2d1f4 <__assert_fail@plt+0x1aa58>
   2d150:	add	r9, r0, #1
   2d154:	cmp	r7, r3
   2d158:	str	r9, [r5, r6, lsl #3]
   2d15c:	beq	2d168 <__assert_fail@plt+0x1a9cc>
   2d160:	mov	r0, r7
   2d164:	bl	12154 <free@plt>
   2d168:	mov	r0, r9
   2d16c:	bl	2df04 <__assert_fail@plt+0x1b768>
   2d170:	ldr	lr, [sp, #28]
   2d174:	ldr	ip, [r4, #44]	; 0x2c
   2d178:	ldr	r5, [r4, #40]	; 0x28
   2d17c:	mov	r3, fp
   2d180:	mov	r2, sl
   2d184:	mov	r1, r9
   2d188:	str	r0, [lr, #4]
   2d18c:	ldr	lr, [r4]
   2d190:	ldr	r4, [sp, #32]
   2d194:	str	ip, [sp, #16]
   2d198:	str	r4, [sp, #8]
   2d19c:	ldr	r4, [sp, #36]	; 0x24
   2d1a0:	str	r5, [sp, #12]
   2d1a4:	str	r4, [sp, #4]
   2d1a8:	str	lr, [sp]
   2d1ac:	mov	r7, r0
   2d1b0:	bl	2b848 <__assert_fail@plt+0x190ac>
   2d1b4:	ldr	r3, [sp, #24]
   2d1b8:	mov	r0, r7
   2d1bc:	str	r3, [r8]
   2d1c0:	add	sp, sp, #44	; 0x2c
   2d1c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d1c8:	mov	r0, #0
   2d1cc:	bl	2df60 <__assert_fail@plt+0x1b7c4>
   2d1d0:	ldr	r3, [pc, #32]	; 2d1f8 <__assert_fail@plt+0x1aa5c>
   2d1d4:	mov	r5, r0
   2d1d8:	ldm	r3, {r0, r1}
   2d1dc:	str	r5, [r7]
   2d1e0:	stm	r5, {r0, r1}
   2d1e4:	b	2d0d0 <__assert_fail@plt+0x1a934>
   2d1e8:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   2d1ec:	bl	1273c <abort@plt>
   2d1f0:	andeq	ip, r5, r4, ror #9
   2d1f4:	strdeq	ip, [r5], -r8
   2d1f8:	andeq	ip, r5, ip, ror #9
   2d1fc:	push	{r4, r5, r6, lr}
   2d200:	mov	r5, r0
   2d204:	bl	124d8 <__errno_location@plt>
   2d208:	cmp	r5, #0
   2d20c:	mov	r1, #48	; 0x30
   2d210:	mov	r4, r0
   2d214:	ldr	r0, [pc, #16]	; 2d22c <__assert_fail@plt+0x1aa90>
   2d218:	ldr	r6, [r4]
   2d21c:	movne	r0, r5
   2d220:	bl	2e10c <__assert_fail@plt+0x1b970>
   2d224:	str	r6, [r4]
   2d228:	pop	{r4, r5, r6, pc}
   2d22c:	strdeq	ip, [r5], -r8
   2d230:	ldr	r3, [pc, #12]	; 2d244 <__assert_fail@plt+0x1aaa8>
   2d234:	cmp	r0, #0
   2d238:	moveq	r0, r3
   2d23c:	ldr	r0, [r0]
   2d240:	bx	lr
   2d244:	strdeq	ip, [r5], -r8
   2d248:	ldr	r3, [pc, #12]	; 2d25c <__assert_fail@plt+0x1aac0>
   2d24c:	cmp	r0, #0
   2d250:	moveq	r0, r3
   2d254:	str	r1, [r0]
   2d258:	bx	lr
   2d25c:	strdeq	ip, [r5], -r8
   2d260:	ldr	r3, [pc, #52]	; 2d29c <__assert_fail@plt+0x1ab00>
   2d264:	cmp	r0, #0
   2d268:	moveq	r0, r3
   2d26c:	add	r3, r0, #8
   2d270:	push	{lr}		; (str lr, [sp, #-4]!)
   2d274:	lsr	lr, r1, #5
   2d278:	and	r1, r1, #31
   2d27c:	ldr	ip, [r3, lr, lsl #2]
   2d280:	lsr	r0, ip, r1
   2d284:	eor	r2, r2, r0
   2d288:	and	r2, r2, #1
   2d28c:	and	r0, r0, #1
   2d290:	eor	r1, ip, r2, lsl r1
   2d294:	str	r1, [r3, lr, lsl #2]
   2d298:	pop	{pc}		; (ldr pc, [sp], #4)
   2d29c:	strdeq	ip, [r5], -r8
   2d2a0:	ldr	r3, [pc, #16]	; 2d2b8 <__assert_fail@plt+0x1ab1c>
   2d2a4:	cmp	r0, #0
   2d2a8:	movne	r3, r0
   2d2ac:	ldr	r0, [r3, #4]
   2d2b0:	str	r1, [r3, #4]
   2d2b4:	bx	lr
   2d2b8:	strdeq	ip, [r5], -r8
   2d2bc:	ldr	r3, [pc, #44]	; 2d2f0 <__assert_fail@plt+0x1ab54>
   2d2c0:	cmp	r0, #0
   2d2c4:	moveq	r0, r3
   2d2c8:	mov	ip, #10
   2d2cc:	cmp	r2, #0
   2d2d0:	cmpne	r1, #0
   2d2d4:	str	ip, [r0]
   2d2d8:	beq	2d2e8 <__assert_fail@plt+0x1ab4c>
   2d2dc:	str	r1, [r0, #40]	; 0x28
   2d2e0:	str	r2, [r0, #44]	; 0x2c
   2d2e4:	bx	lr
   2d2e8:	push	{r4, lr}
   2d2ec:	bl	1273c <abort@plt>
   2d2f0:	strdeq	ip, [r5], -r8
   2d2f4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d2f8:	sub	sp, sp, #24
   2d2fc:	ldr	ip, [pc, #108]	; 2d370 <__assert_fail@plt+0x1abd4>
   2d300:	ldr	r4, [sp, #56]	; 0x38
   2d304:	mov	r9, r2
   2d308:	cmp	r4, #0
   2d30c:	moveq	r4, ip
   2d310:	mov	sl, r3
   2d314:	mov	r7, r0
   2d318:	mov	r8, r1
   2d31c:	bl	124d8 <__errno_location@plt>
   2d320:	ldr	r3, [r4, #44]	; 0x2c
   2d324:	mov	r1, r8
   2d328:	ldr	r6, [r0]
   2d32c:	str	r3, [sp, #16]
   2d330:	ldr	r2, [r4, #40]	; 0x28
   2d334:	add	r3, r4, #8
   2d338:	str	r3, [sp, #8]
   2d33c:	str	r2, [sp, #12]
   2d340:	ldr	r2, [r4, #4]
   2d344:	mov	r5, r0
   2d348:	str	r2, [sp, #4]
   2d34c:	ldr	ip, [r4]
   2d350:	mov	r3, sl
   2d354:	mov	r2, r9
   2d358:	mov	r0, r7
   2d35c:	str	ip, [sp]
   2d360:	bl	2b848 <__assert_fail@plt+0x190ac>
   2d364:	str	r6, [r5]
   2d368:	add	sp, sp, #24
   2d36c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d370:	strdeq	ip, [r5], -r8
   2d374:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2d378:	cmp	r3, #0
   2d37c:	sub	sp, sp, #44	; 0x2c
   2d380:	ldr	r4, [pc, #192]	; 2d448 <__assert_fail@plt+0x1acac>
   2d384:	mov	r6, r2
   2d388:	movne	r4, r3
   2d38c:	mov	r9, r1
   2d390:	mov	r8, r0
   2d394:	bl	124d8 <__errno_location@plt>
   2d398:	ldr	r3, [r4, #44]	; 0x2c
   2d39c:	ldr	r5, [r4, #4]
   2d3a0:	add	sl, r4, #8
   2d3a4:	cmp	r6, #0
   2d3a8:	orreq	r5, r5, #1
   2d3ac:	mov	r1, #0
   2d3b0:	ldr	r2, [r0]
   2d3b4:	str	r3, [sp, #16]
   2d3b8:	ldr	r3, [r4, #40]	; 0x28
   2d3bc:	stmib	sp, {r5, sl}
   2d3c0:	str	r3, [sp, #12]
   2d3c4:	ldr	r3, [r4]
   2d3c8:	mov	r7, r0
   2d3cc:	str	r2, [sp, #28]
   2d3d0:	str	r3, [sp]
   2d3d4:	mov	r2, r8
   2d3d8:	mov	r3, r9
   2d3dc:	mov	r0, r1
   2d3e0:	bl	2b848 <__assert_fail@plt+0x190ac>
   2d3e4:	add	r1, r0, #1
   2d3e8:	mov	fp, r0
   2d3ec:	mov	r0, r1
   2d3f0:	str	r1, [sp, #36]	; 0x24
   2d3f4:	bl	2df04 <__assert_fail@plt+0x1b768>
   2d3f8:	ldr	r3, [r4, #44]	; 0x2c
   2d3fc:	mov	r2, r8
   2d400:	str	r3, [sp, #16]
   2d404:	ldr	r3, [r4, #40]	; 0x28
   2d408:	str	r5, [sp, #4]
   2d40c:	str	r3, [sp, #12]
   2d410:	str	sl, [sp, #8]
   2d414:	ldr	ip, [r4]
   2d418:	ldr	r1, [sp, #36]	; 0x24
   2d41c:	mov	r3, r9
   2d420:	str	ip, [sp]
   2d424:	str	r0, [sp, #32]
   2d428:	bl	2b848 <__assert_fail@plt+0x190ac>
   2d42c:	ldr	r2, [sp, #28]
   2d430:	cmp	r6, #0
   2d434:	str	r2, [r7]
   2d438:	ldr	r0, [sp, #32]
   2d43c:	strne	fp, [r6]
   2d440:	add	sp, sp, #44	; 0x2c
   2d444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d448:	strdeq	ip, [r5], -r8
   2d44c:	mov	r3, r2
   2d450:	mov	r2, #0
   2d454:	b	2d374 <__assert_fail@plt+0x1abd8>
   2d458:	push	{r4, r5, r6, r7, r8, lr}
   2d45c:	ldr	r6, [pc, #112]	; 2d4d4 <__assert_fail@plt+0x1ad38>
   2d460:	ldr	r3, [r6, #4]
   2d464:	ldr	r7, [r6]
   2d468:	cmp	r3, #1
   2d46c:	ble	2d490 <__assert_fail@plt+0x1acf4>
   2d470:	sub	r5, r7, #8
   2d474:	add	r5, r5, r3, lsl #3
   2d478:	mov	r4, r7
   2d47c:	ldr	r0, [r4, #12]
   2d480:	add	r4, r4, #8
   2d484:	bl	12154 <free@plt>
   2d488:	cmp	r4, r5
   2d48c:	bne	2d47c <__assert_fail@plt+0x1ace0>
   2d490:	ldr	r0, [r7, #4]
   2d494:	ldr	r4, [pc, #60]	; 2d4d8 <__assert_fail@plt+0x1ad3c>
   2d498:	cmp	r0, r4
   2d49c:	beq	2d4b0 <__assert_fail@plt+0x1ad14>
   2d4a0:	bl	12154 <free@plt>
   2d4a4:	mov	r3, #256	; 0x100
   2d4a8:	str	r4, [r6, #12]
   2d4ac:	str	r3, [r6, #8]
   2d4b0:	ldr	r4, [pc, #36]	; 2d4dc <__assert_fail@plt+0x1ad40>
   2d4b4:	cmp	r7, r4
   2d4b8:	beq	2d4c8 <__assert_fail@plt+0x1ad2c>
   2d4bc:	mov	r0, r7
   2d4c0:	bl	12154 <free@plt>
   2d4c4:	str	r4, [r6]
   2d4c8:	mov	r3, #1
   2d4cc:	str	r3, [r6, #4]
   2d4d0:	pop	{r4, r5, r6, r7, r8, pc}
   2d4d4:	andeq	ip, r5, r4, ror #9
   2d4d8:	strdeq	ip, [r5], -r8
   2d4dc:	andeq	ip, r5, ip, ror #9
   2d4e0:	ldr	r3, [pc, #4]	; 2d4ec <__assert_fail@plt+0x1ad50>
   2d4e4:	mvn	r2, #0
   2d4e8:	b	2d060 <__assert_fail@plt+0x1a8c4>
   2d4ec:	strdeq	ip, [r5], -r8
   2d4f0:	ldr	r3, [pc]	; 2d4f8 <__assert_fail@plt+0x1ad5c>
   2d4f4:	b	2d060 <__assert_fail@plt+0x1a8c4>
   2d4f8:	strdeq	ip, [r5], -r8
   2d4fc:	mov	r1, r0
   2d500:	ldr	r3, [pc, #8]	; 2d510 <__assert_fail@plt+0x1ad74>
   2d504:	mvn	r2, #0
   2d508:	mov	r0, #0
   2d50c:	b	2d060 <__assert_fail@plt+0x1a8c4>
   2d510:	strdeq	ip, [r5], -r8
   2d514:	mov	r2, r1
   2d518:	ldr	r3, [pc, #8]	; 2d528 <__assert_fail@plt+0x1ad8c>
   2d51c:	mov	r1, r0
   2d520:	mov	r0, #0
   2d524:	b	2d060 <__assert_fail@plt+0x1a8c4>
   2d528:	strdeq	ip, [r5], -r8
   2d52c:	push	{r4, r5, r6, lr}
   2d530:	sub	sp, sp, #56	; 0x38
   2d534:	ldr	r4, [pc, #68]	; 2d580 <__assert_fail@plt+0x1ade4>
   2d538:	mov	r6, r2
   2d53c:	mov	r5, r0
   2d540:	ldr	r3, [r4]
   2d544:	add	r0, sp, #4
   2d548:	str	r3, [sp, #52]	; 0x34
   2d54c:	bl	2b6d8 <__assert_fail@plt+0x18f3c>
   2d550:	add	r3, sp, #4
   2d554:	mvn	r2, #0
   2d558:	mov	r1, r6
   2d55c:	mov	r0, r5
   2d560:	bl	2d060 <__assert_fail@plt+0x1a8c4>
   2d564:	ldr	r2, [sp, #52]	; 0x34
   2d568:	ldr	r3, [r4]
   2d56c:	cmp	r2, r3
   2d570:	bne	2d57c <__assert_fail@plt+0x1ade0>
   2d574:	add	sp, sp, #56	; 0x38
   2d578:	pop	{r4, r5, r6, pc}
   2d57c:	bl	12244 <__stack_chk_fail@plt>
   2d580:	andeq	fp, r5, r0, ror #24
   2d584:	push	{r4, r5, r6, r7, lr}
   2d588:	sub	sp, sp, #60	; 0x3c
   2d58c:	ldr	r4, [pc, #72]	; 2d5dc <__assert_fail@plt+0x1ae40>
   2d590:	mov	r6, r2
   2d594:	mov	r7, r3
   2d598:	ldr	ip, [r4]
   2d59c:	mov	r5, r0
   2d5a0:	add	r0, sp, #4
   2d5a4:	str	ip, [sp, #52]	; 0x34
   2d5a8:	bl	2b6d8 <__assert_fail@plt+0x18f3c>
   2d5ac:	add	r3, sp, #4
   2d5b0:	mov	r2, r7
   2d5b4:	mov	r1, r6
   2d5b8:	mov	r0, r5
   2d5bc:	bl	2d060 <__assert_fail@plt+0x1a8c4>
   2d5c0:	ldr	r2, [sp, #52]	; 0x34
   2d5c4:	ldr	r3, [r4]
   2d5c8:	cmp	r2, r3
   2d5cc:	bne	2d5d8 <__assert_fail@plt+0x1ae3c>
   2d5d0:	add	sp, sp, #60	; 0x3c
   2d5d4:	pop	{r4, r5, r6, r7, pc}
   2d5d8:	bl	12244 <__stack_chk_fail@plt>
   2d5dc:	andeq	fp, r5, r0, ror #24
   2d5e0:	mov	r2, r1
   2d5e4:	mov	r1, r0
   2d5e8:	mov	r0, #0
   2d5ec:	b	2d52c <__assert_fail@plt+0x1ad90>
   2d5f0:	mov	r3, r2
   2d5f4:	mov	r2, r1
   2d5f8:	mov	r1, r0
   2d5fc:	mov	r0, #0
   2d600:	b	2d584 <__assert_fail@plt+0x1ade8>
   2d604:	push	{r4, r5, r6, r7, r8, r9, lr}
   2d608:	mov	r4, r2
   2d60c:	ldr	lr, [pc, #128]	; 2d694 <__assert_fail@plt+0x1aef8>
   2d610:	mov	r8, r0
   2d614:	mov	r9, r1
   2d618:	ldm	lr!, {r0, r1, r2, r3}
   2d61c:	sub	sp, sp, #60	; 0x3c
   2d620:	add	ip, sp, #4
   2d624:	lsr	r6, r4, #5
   2d628:	stmia	ip!, {r0, r1, r2, r3}
   2d62c:	add	r7, sp, #12
   2d630:	ldm	lr!, {r0, r1, r2, r3}
   2d634:	and	r4, r4, #31
   2d638:	ldr	r5, [pc, #88]	; 2d698 <__assert_fail@plt+0x1aefc>
   2d63c:	stmia	ip!, {r0, r1, r2, r3}
   2d640:	ldm	lr, {r0, r1, r2, r3}
   2d644:	stm	ip, {r0, r1, r2, r3}
   2d648:	mov	r2, r9
   2d64c:	ldr	r3, [r7, r6, lsl #2]
   2d650:	ldr	ip, [r5]
   2d654:	mov	r1, r8
   2d658:	mvn	r0, r3, lsr r4
   2d65c:	and	r0, r0, #1
   2d660:	str	ip, [sp, #52]	; 0x34
   2d664:	eor	r4, r3, r0, lsl r4
   2d668:	add	r3, sp, #4
   2d66c:	mov	r0, #0
   2d670:	str	r4, [r7, r6, lsl #2]
   2d674:	bl	2d060 <__assert_fail@plt+0x1a8c4>
   2d678:	ldr	r2, [sp, #52]	; 0x34
   2d67c:	ldr	r3, [r5]
   2d680:	cmp	r2, r3
   2d684:	bne	2d690 <__assert_fail@plt+0x1aef4>
   2d688:	add	sp, sp, #60	; 0x3c
   2d68c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2d690:	bl	12244 <__stack_chk_fail@plt>
   2d694:	strdeq	ip, [r5], -r8
   2d698:	andeq	fp, r5, r0, ror #24
   2d69c:	mov	r2, r1
   2d6a0:	mvn	r1, #0
   2d6a4:	b	2d604 <__assert_fail@plt+0x1ae68>
   2d6a8:	mov	r2, #58	; 0x3a
   2d6ac:	mvn	r1, #0
   2d6b0:	b	2d604 <__assert_fail@plt+0x1ae68>
   2d6b4:	mov	r2, #58	; 0x3a
   2d6b8:	b	2d604 <__assert_fail@plt+0x1ae68>
   2d6bc:	push	{r4, r5, r6, r7, r8, lr}
   2d6c0:	sub	sp, sp, #104	; 0x68
   2d6c4:	ldr	r5, [pc, #120]	; 2d744 <__assert_fail@plt+0x1afa8>
   2d6c8:	mov	r6, r0
   2d6cc:	mov	r0, sp
   2d6d0:	ldr	r3, [r5]
   2d6d4:	mov	r7, r2
   2d6d8:	str	r3, [sp, #100]	; 0x64
   2d6dc:	bl	2b6d8 <__assert_fail@plt+0x18f3c>
   2d6e0:	mov	ip, sp
   2d6e4:	add	lr, sp, #52	; 0x34
   2d6e8:	ldm	ip!, {r0, r1, r2, r3}
   2d6ec:	stmia	lr!, {r0, r1, r2, r3}
   2d6f0:	ldm	ip!, {r0, r1, r2, r3}
   2d6f4:	ldr	r8, [sp, #64]	; 0x40
   2d6f8:	stmia	lr!, {r0, r1, r2, r3}
   2d6fc:	mvn	r4, r8
   2d700:	ldm	ip, {r0, r1, r2, r3}
   2d704:	and	ip, r4, #67108864	; 0x4000000
   2d708:	eor	ip, ip, r8
   2d70c:	str	ip, [sp, #64]	; 0x40
   2d710:	stm	lr, {r0, r1, r2, r3}
   2d714:	add	r3, sp, #52	; 0x34
   2d718:	mvn	r2, #0
   2d71c:	mov	r1, r7
   2d720:	mov	r0, r6
   2d724:	bl	2d060 <__assert_fail@plt+0x1a8c4>
   2d728:	ldr	r2, [sp, #100]	; 0x64
   2d72c:	ldr	r3, [r5]
   2d730:	cmp	r2, r3
   2d734:	bne	2d740 <__assert_fail@plt+0x1afa4>
   2d738:	add	sp, sp, #104	; 0x68
   2d73c:	pop	{r4, r5, r6, r7, r8, pc}
   2d740:	bl	12244 <__stack_chk_fail@plt>
   2d744:	andeq	fp, r5, r0, ror #24
   2d748:	push	{r4, r5, r6, r7, r8, r9, lr}
   2d74c:	mov	r6, r1
   2d750:	ldr	lr, [pc, #132]	; 2d7dc <__assert_fail@plt+0x1b040>
   2d754:	mov	r5, r2
   2d758:	mov	r8, r0
   2d75c:	mov	r9, r3
   2d760:	ldm	lr!, {r0, r1, r2, r3}
   2d764:	sub	sp, sp, #60	; 0x3c
   2d768:	add	ip, sp, #4
   2d76c:	ldr	r4, [pc, #108]	; 2d7e0 <__assert_fail@plt+0x1b044>
   2d770:	stmia	ip!, {r0, r1, r2, r3}
   2d774:	mov	r7, #10
   2d778:	ldm	lr!, {r0, r1, r2, r3}
   2d77c:	cmp	r5, #0
   2d780:	cmpne	r6, #0
   2d784:	str	r7, [sp, #4]
   2d788:	stmia	ip!, {r0, r1, r2, r3}
   2d78c:	ldm	lr, {r0, r1, r2, r3}
   2d790:	ldr	lr, [r4]
   2d794:	stm	ip, {r0, r1, r2, r3}
   2d798:	str	lr, [sp, #52]	; 0x34
   2d79c:	beq	2d7d8 <__assert_fail@plt+0x1b03c>
   2d7a0:	add	r3, sp, #4
   2d7a4:	ldr	r2, [sp, #88]	; 0x58
   2d7a8:	mov	r1, r9
   2d7ac:	mov	r0, r8
   2d7b0:	str	r6, [sp, #44]	; 0x2c
   2d7b4:	str	r5, [sp, #48]	; 0x30
   2d7b8:	bl	2d060 <__assert_fail@plt+0x1a8c4>
   2d7bc:	ldr	r2, [sp, #52]	; 0x34
   2d7c0:	ldr	r3, [r4]
   2d7c4:	cmp	r2, r3
   2d7c8:	bne	2d7d4 <__assert_fail@plt+0x1b038>
   2d7cc:	add	sp, sp, #60	; 0x3c
   2d7d0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2d7d4:	bl	12244 <__stack_chk_fail@plt>
   2d7d8:	bl	1273c <abort@plt>
   2d7dc:	strdeq	ip, [r5], -r8
   2d7e0:	andeq	fp, r5, r0, ror #24
   2d7e4:	push	{lr}		; (str lr, [sp, #-4]!)
   2d7e8:	sub	sp, sp, #12
   2d7ec:	mvn	ip, #0
   2d7f0:	str	ip, [sp]
   2d7f4:	bl	2d748 <__assert_fail@plt+0x1afac>
   2d7f8:	add	sp, sp, #12
   2d7fc:	pop	{pc}		; (ldr pc, [sp], #4)
   2d800:	push	{lr}		; (str lr, [sp, #-4]!)
   2d804:	sub	sp, sp, #12
   2d808:	mvn	ip, #0
   2d80c:	mov	r3, r2
   2d810:	str	ip, [sp]
   2d814:	mov	r2, r1
   2d818:	mov	r1, r0
   2d81c:	mov	r0, #0
   2d820:	bl	2d748 <__assert_fail@plt+0x1afac>
   2d824:	add	sp, sp, #12
   2d828:	pop	{pc}		; (ldr pc, [sp], #4)
   2d82c:	push	{lr}		; (str lr, [sp, #-4]!)
   2d830:	sub	sp, sp, #12
   2d834:	str	r3, [sp]
   2d838:	mov	r3, r2
   2d83c:	mov	r2, r1
   2d840:	mov	r1, r0
   2d844:	mov	r0, #0
   2d848:	bl	2d748 <__assert_fail@plt+0x1afac>
   2d84c:	add	sp, sp, #12
   2d850:	pop	{pc}		; (ldr pc, [sp], #4)
   2d854:	ldr	r3, [pc]	; 2d85c <__assert_fail@plt+0x1b0c0>
   2d858:	b	2d060 <__assert_fail@plt+0x1a8c4>
   2d85c:	strdeq	ip, [r5], -r4
   2d860:	mov	r2, r1
   2d864:	ldr	r3, [pc, #8]	; 2d874 <__assert_fail@plt+0x1b0d8>
   2d868:	mov	r1, r0
   2d86c:	mov	r0, #0
   2d870:	b	2d060 <__assert_fail@plt+0x1a8c4>
   2d874:	strdeq	ip, [r5], -r4
   2d878:	ldr	r3, [pc, #4]	; 2d884 <__assert_fail@plt+0x1b0e8>
   2d87c:	mvn	r2, #0
   2d880:	b	2d060 <__assert_fail@plt+0x1a8c4>
   2d884:	strdeq	ip, [r5], -r4
   2d888:	mov	r1, r0
   2d88c:	ldr	r3, [pc, #8]	; 2d89c <__assert_fail@plt+0x1b100>
   2d890:	mvn	r2, #0
   2d894:	mov	r0, #0
   2d898:	b	2d060 <__assert_fail@plt+0x1a8c4>
   2d89c:	strdeq	ip, [r5], -r4
   2d8a0:	push	{r4, r5, r6, lr}
   2d8a4:	mov	r4, #0
   2d8a8:	mov	r5, r0
   2d8ac:	str	r4, [r0, #4]
   2d8b0:	mov	r1, #524288	; 0x80000
   2d8b4:	ldr	r0, [pc, #52]	; 2d8f0 <__assert_fail@plt+0x1b154>
   2d8b8:	bl	218a4 <__assert_fail@plt+0xf108>
   2d8bc:	cmp	r0, r4
   2d8c0:	str	r0, [r5]
   2d8c4:	blt	2d8d0 <__assert_fail@plt+0x1b134>
   2d8c8:	mov	r0, r4
   2d8cc:	pop	{r4, r5, r6, pc}
   2d8d0:	mov	r1, r4
   2d8d4:	mov	r0, r4
   2d8d8:	bl	1246c <getcwd@plt>
   2d8dc:	clz	r4, r0
   2d8e0:	lsr	r4, r4, #5
   2d8e4:	str	r0, [r5, #4]
   2d8e8:	rsb	r0, r4, #0
   2d8ec:	pop	{r4, r5, r6, pc}
   2d8f0:	andeq	r7, r4, r8, ror r8
   2d8f4:	ldr	r3, [r0]
   2d8f8:	cmp	r3, #0
   2d8fc:	blt	2d908 <__assert_fail@plt+0x1b16c>
   2d900:	mov	r0, r3
   2d904:	b	126a0 <fchdir@plt>
   2d908:	ldr	r0, [r0, #4]
   2d90c:	b	2f3c8 <__assert_fail@plt+0x1cc2c>
   2d910:	push	{r4, lr}
   2d914:	mov	r4, r0
   2d918:	ldr	r0, [r0]
   2d91c:	cmp	r0, #0
   2d920:	blt	2d928 <__assert_fail@plt+0x1b18c>
   2d924:	bl	12748 <close@plt>
   2d928:	ldr	r0, [r4, #4]
   2d92c:	pop	{r4, lr}
   2d930:	b	12154 <free@plt>
   2d934:	push	{r4, r5, r6, lr}
   2d938:	mov	r2, r1
   2d93c:	mov	r4, r1
   2d940:	mov	r1, #0
   2d944:	mov	r5, r0
   2d948:	bl	1258c <memchr@plt>
   2d94c:	cmp	r0, #0
   2d950:	subne	r0, r0, r5
   2d954:	addne	r0, r0, #1
   2d958:	moveq	r0, r4
   2d95c:	pop	{r4, r5, r6, pc}
   2d960:	mov	r2, #3
   2d964:	mov	r1, #0
   2d968:	b	2f650 <__assert_fail@plt+0x1ceb4>
   2d96c:	cmp	r0, #2
   2d970:	push	{r4, r5, r6, r7, r8, lr}
   2d974:	mov	r4, r0
   2d978:	bls	2d984 <__assert_fail@plt+0x1b1e8>
   2d97c:	mov	r0, r4
   2d980:	pop	{r4, r5, r6, r7, r8, pc}
   2d984:	bl	2d960 <__assert_fail@plt+0x1b1c4>
   2d988:	mov	r7, r0
   2d98c:	bl	124d8 <__errno_location@plt>
   2d990:	mov	r5, r0
   2d994:	mov	r0, r4
   2d998:	ldr	r6, [r5]
   2d99c:	mov	r4, r7
   2d9a0:	bl	12748 <close@plt>
   2d9a4:	str	r6, [r5]
   2d9a8:	mov	r0, r4
   2d9ac:	pop	{r4, r5, r6, r7, r8, pc}
   2d9b0:	push	{r4, r5, r6, lr}
   2d9b4:	sub	sp, sp, #32
   2d9b8:	cmp	r1, #0
   2d9bc:	mov	r5, r0
   2d9c0:	ldr	r4, [sp, #48]	; 0x30
   2d9c4:	ldr	r6, [sp, #52]	; 0x34
   2d9c8:	beq	2dac4 <__assert_fail@plt+0x1b328>
   2d9cc:	strd	r2, [sp]
   2d9d0:	mov	r3, r1
   2d9d4:	ldr	r2, [pc, #824]	; 2dd14 <__assert_fail@plt+0x1b578>
   2d9d8:	mov	r1, #1
   2d9dc:	bl	12580 <__fprintf_chk@plt>
   2d9e0:	mov	r2, #5
   2d9e4:	ldr	r1, [pc, #812]	; 2dd18 <__assert_fail@plt+0x1b57c>
   2d9e8:	mov	r0, #0
   2d9ec:	bl	1222c <dcgettext@plt>
   2d9f0:	ldr	r3, [pc, #804]	; 2dd1c <__assert_fail@plt+0x1b580>
   2d9f4:	ldr	r2, [pc, #804]	; 2dd20 <__assert_fail@plt+0x1b584>
   2d9f8:	str	r3, [sp]
   2d9fc:	mov	r1, #1
   2da00:	mov	r3, r0
   2da04:	mov	r0, r5
   2da08:	bl	12580 <__fprintf_chk@plt>
   2da0c:	ldr	r1, [pc, #784]	; 2dd24 <__assert_fail@plt+0x1b588>
   2da10:	mov	r2, #5
   2da14:	mov	r0, #0
   2da18:	bl	1222c <dcgettext@plt>
   2da1c:	mov	r1, r5
   2da20:	bl	12724 <fputs@plt>
   2da24:	cmp	r6, #9
   2da28:	ldrls	pc, [pc, r6, lsl #2]
   2da2c:	b	2dd08 <__assert_fail@plt+0x1b56c>
   2da30:			; <UNDEFINED> instruction: 0x0002dabc
   2da34:	ldrdeq	sp, [r2], -ip
   2da38:	andeq	sp, r2, r8, lsl #22
   2da3c:	andeq	sp, r2, ip, lsr fp
   2da40:	andeq	sp, r2, r8, ror fp
   2da44:			; <UNDEFINED> instruction: 0x0002dbb8
   2da48:	andeq	sp, r2, r0, lsl #24
   2da4c:	andeq	sp, r2, r0, asr ip
   2da50:	andeq	sp, r2, r8, lsr #25
   2da54:	andeq	sp, r2, r8, asr sl
   2da58:	ldr	r1, [pc, #712]	; 2dd28 <__assert_fail@plt+0x1b58c>
   2da5c:	mov	r2, #5
   2da60:	mov	r0, #0
   2da64:	bl	1222c <dcgettext@plt>
   2da68:	ldr	r2, [r4, #32]
   2da6c:	ldr	r3, [r4, #28]
   2da70:	ldr	r1, [r4, #24]
   2da74:	str	r2, [sp, #28]
   2da78:	ldr	r2, [r4, #20]
   2da7c:	str	r3, [sp, #24]
   2da80:	ldr	r3, [r4, #16]
   2da84:	str	r1, [sp, #20]
   2da88:	ldr	r1, [r4, #12]
   2da8c:	str	r2, [sp, #16]
   2da90:	ldr	r2, [r4, #8]
   2da94:	str	r3, [sp, #12]
   2da98:	ldr	r3, [r4, #4]
   2da9c:	str	r1, [sp, #8]
   2daa0:	str	r2, [sp, #4]
   2daa4:	str	r3, [sp]
   2daa8:	mov	r1, #1
   2daac:	ldr	r3, [r4]
   2dab0:	mov	r2, r0
   2dab4:	mov	r0, r5
   2dab8:	bl	12580 <__fprintf_chk@plt>
   2dabc:	add	sp, sp, #32
   2dac0:	pop	{r4, r5, r6, pc}
   2dac4:	str	r3, [sp]
   2dac8:	mov	r1, #1
   2dacc:	mov	r3, r2
   2dad0:	ldr	r2, [pc, #596]	; 2dd2c <__assert_fail@plt+0x1b590>
   2dad4:	bl	12580 <__fprintf_chk@plt>
   2dad8:	b	2d9e0 <__assert_fail@plt+0x1b244>
   2dadc:	mov	r2, #5
   2dae0:	ldr	r1, [pc, #584]	; 2dd30 <__assert_fail@plt+0x1b594>
   2dae4:	mov	r0, #0
   2dae8:	bl	1222c <dcgettext@plt>
   2daec:	ldr	r3, [r4]
   2daf0:	mov	r1, #1
   2daf4:	mov	r2, r0
   2daf8:	mov	r0, r5
   2dafc:	add	sp, sp, #32
   2db00:	pop	{r4, r5, r6, lr}
   2db04:	b	12580 <__fprintf_chk@plt>
   2db08:	mov	r2, #5
   2db0c:	ldr	r1, [pc, #544]	; 2dd34 <__assert_fail@plt+0x1b598>
   2db10:	mov	r0, #0
   2db14:	bl	1222c <dcgettext@plt>
   2db18:	ldr	r2, [r4, #4]
   2db1c:	ldr	r3, [r4]
   2db20:	mov	r1, #1
   2db24:	str	r2, [sp, #48]	; 0x30
   2db28:	mov	r2, r0
   2db2c:	mov	r0, r5
   2db30:	add	sp, sp, #32
   2db34:	pop	{r4, r5, r6, lr}
   2db38:	b	12580 <__fprintf_chk@plt>
   2db3c:	mov	r2, #5
   2db40:	ldr	r1, [pc, #496]	; 2dd38 <__assert_fail@plt+0x1b59c>
   2db44:	mov	r0, #0
   2db48:	bl	1222c <dcgettext@plt>
   2db4c:	ldr	r2, [r4, #8]
   2db50:	ldr	r3, [r4, #4]
   2db54:	mov	r1, #1
   2db58:	str	r2, [sp, #52]	; 0x34
   2db5c:	str	r3, [sp, #48]	; 0x30
   2db60:	ldr	r3, [r4]
   2db64:	mov	r2, r0
   2db68:	mov	r0, r5
   2db6c:	add	sp, sp, #32
   2db70:	pop	{r4, r5, r6, lr}
   2db74:	b	12580 <__fprintf_chk@plt>
   2db78:	mov	r2, #5
   2db7c:	ldr	r1, [pc, #440]	; 2dd3c <__assert_fail@plt+0x1b5a0>
   2db80:	mov	r0, #0
   2db84:	bl	1222c <dcgettext@plt>
   2db88:	ldr	r1, [r4, #12]
   2db8c:	ldr	r2, [r4, #8]
   2db90:	ldr	r3, [r4, #4]
   2db94:	str	r1, [sp, #8]
   2db98:	str	r2, [sp, #4]
   2db9c:	str	r3, [sp]
   2dba0:	mov	r1, #1
   2dba4:	ldr	r3, [r4]
   2dba8:	mov	r2, r0
   2dbac:	mov	r0, r5
   2dbb0:	bl	12580 <__fprintf_chk@plt>
   2dbb4:	b	2dabc <__assert_fail@plt+0x1b320>
   2dbb8:	mov	r2, #5
   2dbbc:	ldr	r1, [pc, #380]	; 2dd40 <__assert_fail@plt+0x1b5a4>
   2dbc0:	mov	r0, #0
   2dbc4:	bl	1222c <dcgettext@plt>
   2dbc8:	ldr	r3, [r4, #16]
   2dbcc:	ldr	r1, [r4, #12]
   2dbd0:	ldr	r2, [r4, #8]
   2dbd4:	str	r3, [sp, #12]
   2dbd8:	ldr	r3, [r4, #4]
   2dbdc:	str	r1, [sp, #8]
   2dbe0:	str	r2, [sp, #4]
   2dbe4:	str	r3, [sp]
   2dbe8:	mov	r1, #1
   2dbec:	ldr	r3, [r4]
   2dbf0:	mov	r2, r0
   2dbf4:	mov	r0, r5
   2dbf8:	bl	12580 <__fprintf_chk@plt>
   2dbfc:	b	2dabc <__assert_fail@plt+0x1b320>
   2dc00:	mov	r2, #5
   2dc04:	ldr	r1, [pc, #312]	; 2dd44 <__assert_fail@plt+0x1b5a8>
   2dc08:	mov	r0, #0
   2dc0c:	bl	1222c <dcgettext@plt>
   2dc10:	ldr	r2, [r4, #20]
   2dc14:	ldr	r3, [r4, #16]
   2dc18:	ldr	r1, [r4, #12]
   2dc1c:	str	r2, [sp, #16]
   2dc20:	ldr	r2, [r4, #8]
   2dc24:	str	r3, [sp, #12]
   2dc28:	ldr	r3, [r4, #4]
   2dc2c:	str	r1, [sp, #8]
   2dc30:	str	r2, [sp, #4]
   2dc34:	str	r3, [sp]
   2dc38:	mov	r1, #1
   2dc3c:	ldr	r3, [r4]
   2dc40:	mov	r2, r0
   2dc44:	mov	r0, r5
   2dc48:	bl	12580 <__fprintf_chk@plt>
   2dc4c:	b	2dabc <__assert_fail@plt+0x1b320>
   2dc50:	mov	r2, #5
   2dc54:	ldr	r1, [pc, #236]	; 2dd48 <__assert_fail@plt+0x1b5ac>
   2dc58:	mov	r0, #0
   2dc5c:	bl	1222c <dcgettext@plt>
   2dc60:	ldr	r1, [r4, #24]
   2dc64:	ldr	r2, [r4, #20]
   2dc68:	ldr	r3, [r4, #16]
   2dc6c:	str	r1, [sp, #20]
   2dc70:	ldr	r1, [r4, #12]
   2dc74:	str	r2, [sp, #16]
   2dc78:	ldr	r2, [r4, #8]
   2dc7c:	str	r3, [sp, #12]
   2dc80:	ldr	r3, [r4, #4]
   2dc84:	str	r1, [sp, #8]
   2dc88:	str	r2, [sp, #4]
   2dc8c:	str	r3, [sp]
   2dc90:	mov	r1, #1
   2dc94:	ldr	r3, [r4]
   2dc98:	mov	r2, r0
   2dc9c:	mov	r0, r5
   2dca0:	bl	12580 <__fprintf_chk@plt>
   2dca4:	b	2dabc <__assert_fail@plt+0x1b320>
   2dca8:	mov	r2, #5
   2dcac:	ldr	r1, [pc, #152]	; 2dd4c <__assert_fail@plt+0x1b5b0>
   2dcb0:	mov	r0, #0
   2dcb4:	bl	1222c <dcgettext@plt>
   2dcb8:	ldr	r3, [r4, #28]
   2dcbc:	ldr	r1, [r4, #24]
   2dcc0:	ldr	r2, [r4, #20]
   2dcc4:	str	r3, [sp, #24]
   2dcc8:	ldr	r3, [r4, #16]
   2dccc:	str	r1, [sp, #20]
   2dcd0:	ldr	r1, [r4, #12]
   2dcd4:	str	r2, [sp, #16]
   2dcd8:	ldr	r2, [r4, #8]
   2dcdc:	str	r3, [sp, #12]
   2dce0:	ldr	r3, [r4, #4]
   2dce4:	str	r1, [sp, #8]
   2dce8:	str	r2, [sp, #4]
   2dcec:	str	r3, [sp]
   2dcf0:	mov	r1, #1
   2dcf4:	ldr	r3, [r4]
   2dcf8:	mov	r2, r0
   2dcfc:	mov	r0, r5
   2dd00:	bl	12580 <__fprintf_chk@plt>
   2dd04:	b	2dabc <__assert_fail@plt+0x1b320>
   2dd08:	mov	r2, #5
   2dd0c:	ldr	r1, [pc, #60]	; 2dd50 <__assert_fail@plt+0x1b5b4>
   2dd10:	b	2da60 <__assert_fail@plt+0x1b2c4>
   2dd14:	andeq	sl, r4, r8, lsr #5
   2dd18:			; <UNDEFINED> instruction: 0x0004a2bc
   2dd1c:	andeq	r0, r0, r3, ror #15
   2dd20:	andeq	sl, r4, r8, ror r5
   2dd24:	andeq	sl, r4, r0, asr #5
   2dd28:	muleq	r4, r8, r4
   2dd2c:			; <UNDEFINED> instruction: 0x0004a2b4
   2dd30:	andeq	sl, r4, ip, lsl #7
   2dd34:	muleq	r4, ip, r3
   2dd38:			; <UNDEFINED> instruction: 0x0004a3b4
   2dd3c:	ldrdeq	sl, [r4], -r0
   2dd40:	strdeq	sl, [r4], -r0
   2dd44:	andeq	sl, r4, r4, lsl r4
   2dd48:	andeq	sl, r4, ip, lsr r4
   2dd4c:	andeq	sl, r4, r8, ror #8
   2dd50:	andeq	sl, r4, ip, asr #9
   2dd54:	push	{r4, r5, lr}
   2dd58:	sub	sp, sp, #12
   2dd5c:	ldr	r5, [sp, #24]
   2dd60:	ldr	ip, [r5]
   2dd64:	cmp	ip, #0
   2dd68:	beq	2dd84 <__assert_fail@plt+0x1b5e8>
   2dd6c:	mov	lr, r5
   2dd70:	mov	ip, #0
   2dd74:	ldr	r4, [lr, #4]!
   2dd78:	add	ip, ip, #1
   2dd7c:	cmp	r4, #0
   2dd80:	bne	2dd74 <__assert_fail@plt+0x1b5d8>
   2dd84:	stm	sp, {r5, ip}
   2dd88:	bl	2d9b0 <__assert_fail@plt+0x1b214>
   2dd8c:	add	sp, sp, #12
   2dd90:	pop	{r4, r5, pc}
   2dd94:	push	{r4, r5, r6, lr}
   2dd98:	sub	sp, sp, #56	; 0x38
   2dd9c:	ldr	r6, [pc, #88]	; 2ddfc <__assert_fail@plt+0x1b660>
   2dda0:	ldr	r5, [sp, #72]	; 0x48
   2dda4:	add	r4, sp, #8
   2dda8:	ldr	ip, [r6]
   2ddac:	str	ip, [sp, #52]	; 0x34
   2ddb0:	mov	ip, #0
   2ddb4:	ldr	lr, [r5], #4
   2ddb8:	cmp	lr, #0
   2ddbc:	str	lr, [r4, #4]!
   2ddc0:	beq	2ddd0 <__assert_fail@plt+0x1b634>
   2ddc4:	add	ip, ip, #1
   2ddc8:	cmp	ip, #10
   2ddcc:	bne	2ddb4 <__assert_fail@plt+0x1b618>
   2ddd0:	add	lr, sp, #12
   2ddd4:	str	ip, [sp, #4]
   2ddd8:	str	lr, [sp]
   2dddc:	bl	2d9b0 <__assert_fail@plt+0x1b214>
   2dde0:	ldr	r2, [sp, #52]	; 0x34
   2dde4:	ldr	r3, [r6]
   2dde8:	cmp	r2, r3
   2ddec:	bne	2ddf8 <__assert_fail@plt+0x1b65c>
   2ddf0:	add	sp, sp, #56	; 0x38
   2ddf4:	pop	{r4, r5, r6, pc}
   2ddf8:	bl	12244 <__stack_chk_fail@plt>
   2ddfc:	andeq	fp, r5, r0, ror #24
   2de00:	push	{r3}		; (str r3, [sp, #-4]!)
   2de04:	mov	ip, #0
   2de08:	push	{r4, r5, r6, lr}
   2de0c:	sub	sp, sp, #60	; 0x3c
   2de10:	ldr	r6, [pc, #100]	; 2de7c <__assert_fail@plt+0x1b6e0>
   2de14:	add	r5, sp, #8
   2de18:	add	r4, sp, #80	; 0x50
   2de1c:	ldr	r3, [r6]
   2de20:	str	r4, [sp, #8]
   2de24:	str	r3, [sp, #52]	; 0x34
   2de28:	ldr	r3, [sp, #76]	; 0x4c
   2de2c:	ldr	lr, [r4], #4
   2de30:	cmp	lr, #0
   2de34:	str	lr, [r5, #4]!
   2de38:	beq	2de48 <__assert_fail@plt+0x1b6ac>
   2de3c:	add	ip, ip, #1
   2de40:	cmp	ip, #10
   2de44:	bne	2de2c <__assert_fail@plt+0x1b690>
   2de48:	add	lr, sp, #12
   2de4c:	str	ip, [sp, #4]
   2de50:	str	lr, [sp]
   2de54:	bl	2d9b0 <__assert_fail@plt+0x1b214>
   2de58:	ldr	r2, [sp, #52]	; 0x34
   2de5c:	ldr	r3, [r6]
   2de60:	cmp	r2, r3
   2de64:	bne	2de78 <__assert_fail@plt+0x1b6dc>
   2de68:	add	sp, sp, #60	; 0x3c
   2de6c:	pop	{r4, r5, r6, lr}
   2de70:	add	sp, sp, #4
   2de74:	bx	lr
   2de78:	bl	12244 <__stack_chk_fail@plt>
   2de7c:	andeq	fp, r5, r0, ror #24
   2de80:	push	{r4, lr}
   2de84:	mov	r2, #5
   2de88:	ldr	r1, [pc, #88]	; 2dee8 <__assert_fail@plt+0x1b74c>
   2de8c:	mov	r0, #0
   2de90:	bl	1222c <dcgettext@plt>
   2de94:	ldr	r2, [pc, #80]	; 2deec <__assert_fail@plt+0x1b750>
   2de98:	mov	r1, r0
   2de9c:	mov	r0, #1
   2dea0:	bl	12550 <__printf_chk@plt>
   2dea4:	mov	r2, #5
   2dea8:	ldr	r1, [pc, #64]	; 2def0 <__assert_fail@plt+0x1b754>
   2deac:	mov	r0, #0
   2deb0:	bl	1222c <dcgettext@plt>
   2deb4:	ldr	r3, [pc, #56]	; 2def4 <__assert_fail@plt+0x1b758>
   2deb8:	ldr	r2, [pc, #56]	; 2def8 <__assert_fail@plt+0x1b75c>
   2debc:	mov	r1, r0
   2dec0:	mov	r0, #1
   2dec4:	bl	12550 <__printf_chk@plt>
   2dec8:	ldr	r1, [pc, #44]	; 2defc <__assert_fail@plt+0x1b760>
   2decc:	mov	r2, #5
   2ded0:	mov	r0, #0
   2ded4:	bl	1222c <dcgettext@plt>
   2ded8:	ldr	r3, [pc, #32]	; 2df00 <__assert_fail@plt+0x1b764>
   2dedc:	pop	{r4, lr}
   2dee0:	ldr	r1, [r3]
   2dee4:	b	12724 <fputs@plt>
   2dee8:	andeq	sl, r4, r8, lsl #10
   2deec:	andeq	r8, r4, r0, ror r5
   2def0:	andeq	sl, r4, r0, lsr #10
   2def4:	andeq	r8, r4, r8, asr #10
   2def8:	andeq	r8, r4, r4, asr #5
   2defc:	andeq	sl, r4, r4, lsr r5
   2df00:	andeq	ip, r5, r4, asr #10
   2df04:	push	{r4, lr}
   2df08:	mov	r4, r0
   2df0c:	bl	123dc <malloc@plt>
   2df10:	adds	r4, r4, #0
   2df14:	movne	r4, #1
   2df18:	cmp	r0, #0
   2df1c:	movne	r4, #0
   2df20:	cmp	r4, #0
   2df24:	popeq	{r4, pc}
   2df28:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   2df2c:	push	{r4, r5, r6, lr}
   2df30:	umull	r4, r5, r0, r1
   2df34:	adds	r3, r5, #0
   2df38:	movne	r3, #1
   2df3c:	cmp	r4, #0
   2df40:	blt	2df58 <__assert_fail@plt+0x1b7bc>
   2df44:	cmp	r3, #0
   2df48:	bne	2df58 <__assert_fail@plt+0x1b7bc>
   2df4c:	mul	r0, r1, r0
   2df50:	pop	{r4, r5, r6, lr}
   2df54:	b	2df04 <__assert_fail@plt+0x1b768>
   2df58:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   2df5c:	b	2df04 <__assert_fail@plt+0x1b768>
   2df60:	adds	r3, r0, #0
   2df64:	movne	r3, #1
   2df68:	cmp	r1, #0
   2df6c:	movne	r3, #0
   2df70:	cmp	r3, #0
   2df74:	push	{r4, lr}
   2df78:	bne	2dfa0 <__assert_fail@plt+0x1b804>
   2df7c:	mov	r4, r1
   2df80:	bl	12268 <realloc@plt>
   2df84:	adds	r4, r4, #0
   2df88:	movne	r4, #1
   2df8c:	cmp	r0, #0
   2df90:	movne	r4, #0
   2df94:	cmp	r4, #0
   2df98:	popeq	{r4, pc}
   2df9c:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   2dfa0:	bl	12154 <free@plt>
   2dfa4:	mov	r0, #0
   2dfa8:	pop	{r4, pc}
   2dfac:	push	{r4, r5, r6, lr}
   2dfb0:	umull	r4, r5, r1, r2
   2dfb4:	adds	r3, r5, #0
   2dfb8:	movne	r3, #1
   2dfbc:	cmp	r4, #0
   2dfc0:	blt	2dfd8 <__assert_fail@plt+0x1b83c>
   2dfc4:	cmp	r3, #0
   2dfc8:	bne	2dfd8 <__assert_fail@plt+0x1b83c>
   2dfcc:	mul	r1, r2, r1
   2dfd0:	pop	{r4, r5, r6, lr}
   2dfd4:	b	2df60 <__assert_fail@plt+0x1b7c4>
   2dfd8:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   2dfdc:	push	{r4, r5, r6, r7, r8, lr}
   2dfe0:	subs	r7, r0, #0
   2dfe4:	mov	r6, r1
   2dfe8:	mov	r5, r2
   2dfec:	ldr	r4, [r1]
   2dff0:	beq	2e024 <__assert_fail@plt+0x1b888>
   2dff4:	mov	r1, r2
   2dff8:	ldr	r0, [pc, #104]	; 2e068 <__assert_fail@plt+0x1b8cc>
   2dffc:	bl	434e8 <fts_children@@Base+0x11a4c>
   2e000:	cmp	r0, r4
   2e004:	bls	2e048 <__assert_fail@plt+0x1b8ac>
   2e008:	add	r3, r4, #1
   2e00c:	add	r4, r3, r4, lsr #1
   2e010:	str	r4, [r6]
   2e014:	mul	r1, r5, r4
   2e018:	mov	r0, r7
   2e01c:	pop	{r4, r5, r6, r7, r8, lr}
   2e020:	b	2df60 <__assert_fail@plt+0x1b7c4>
   2e024:	cmp	r4, #0
   2e028:	beq	2e04c <__assert_fail@plt+0x1b8b0>
   2e02c:	umull	r0, r1, r4, r5
   2e030:	adds	r3, r1, #0
   2e034:	movne	r3, #1
   2e038:	cmp	r0, #0
   2e03c:	blt	2e048 <__assert_fail@plt+0x1b8ac>
   2e040:	cmp	r3, #0
   2e044:	beq	2e010 <__assert_fail@plt+0x1b874>
   2e048:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   2e04c:	mov	r1, r2
   2e050:	mov	r0, #64	; 0x40
   2e054:	bl	434e8 <fts_children@@Base+0x11a4c>
   2e058:	cmp	r5, #64	; 0x40
   2e05c:	movls	r4, r0
   2e060:	addhi	r4, r0, #1
   2e064:	b	2e02c <__assert_fail@plt+0x1b890>
   2e068:	ldrbpl	r5, [r5, #-1364]	; 0xfffffaac
   2e06c:	cmp	r0, #0
   2e070:	ldr	r3, [r1]
   2e074:	beq	2e098 <__assert_fail@plt+0x1b8fc>
   2e078:	ldr	r2, [pc, #60]	; 2e0bc <__assert_fail@plt+0x1b920>
   2e07c:	cmp	r3, r2
   2e080:	bhi	2e0b4 <__assert_fail@plt+0x1b918>
   2e084:	add	r2, r3, #1
   2e088:	add	r3, r2, r3, lsr #1
   2e08c:	str	r3, [r1]
   2e090:	mov	r1, r3
   2e094:	b	2df60 <__assert_fail@plt+0x1b7c4>
   2e098:	cmp	r3, #0
   2e09c:	bne	2e0b0 <__assert_fail@plt+0x1b914>
   2e0a0:	mov	r3, #64	; 0x40
   2e0a4:	str	r3, [r1]
   2e0a8:	mov	r1, r3
   2e0ac:	b	2df60 <__assert_fail@plt+0x1b7c4>
   2e0b0:	bge	2e08c <__assert_fail@plt+0x1b8f0>
   2e0b4:	push	{r4, lr}
   2e0b8:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   2e0bc:	ldrbpl	r5, [r5, #-1363]	; 0xfffffaad
   2e0c0:	push	{r4, lr}
   2e0c4:	mov	r4, r0
   2e0c8:	bl	2df04 <__assert_fail@plt+0x1b768>
   2e0cc:	mov	r2, r4
   2e0d0:	mov	r1, #0
   2e0d4:	pop	{r4, lr}
   2e0d8:	b	12514 <memset@plt>
   2e0dc:	push	{r4, r5, r6, lr}
   2e0e0:	umull	r4, r5, r0, r1
   2e0e4:	adds	r3, r5, #0
   2e0e8:	movne	r3, #1
   2e0ec:	cmp	r4, #0
   2e0f0:	blt	2e108 <__assert_fail@plt+0x1b96c>
   2e0f4:	cmp	r3, #0
   2e0f8:	bne	2e108 <__assert_fail@plt+0x1b96c>
   2e0fc:	bl	12064 <calloc@plt>
   2e100:	cmp	r0, #0
   2e104:	popne	{r4, r5, r6, pc}
   2e108:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   2e10c:	push	{r4, r5, r6, lr}
   2e110:	mov	r4, r1
   2e114:	mov	r5, r0
   2e118:	mov	r0, r1
   2e11c:	bl	2df04 <__assert_fail@plt+0x1b768>
   2e120:	mov	r2, r4
   2e124:	mov	r1, r5
   2e128:	pop	{r4, r5, r6, lr}
   2e12c:	b	121a8 <memcpy@plt>
   2e130:	push	{r4, lr}
   2e134:	mov	r4, r0
   2e138:	bl	1249c <strlen@plt>
   2e13c:	add	r1, r0, #1
   2e140:	mov	r0, r4
   2e144:	pop	{r4, lr}
   2e148:	b	2e10c <__assert_fail@plt+0x1b970>
   2e14c:	ldr	r3, [pc, #44]	; 2e180 <__assert_fail@plt+0x1b9e4>
   2e150:	push	{r4, lr}
   2e154:	mov	r2, #5
   2e158:	ldr	r1, [pc, #36]	; 2e184 <__assert_fail@plt+0x1b9e8>
   2e15c:	mov	r0, #0
   2e160:	ldr	r4, [r3]
   2e164:	bl	1222c <dcgettext@plt>
   2e168:	ldr	r2, [pc, #24]	; 2e188 <__assert_fail@plt+0x1b9ec>
   2e16c:	mov	r1, #0
   2e170:	mov	r3, r0
   2e174:	mov	r0, r4
   2e178:	bl	12388 <error@plt>
   2e17c:	bl	1273c <abort@plt>
   2e180:	andeq	ip, r5, r0, ror #9
   2e184:	andeq	sl, r4, r8, lsr #11
   2e188:	andeq	r8, r4, r8, asr #11
   2e18c:	push	{r4, lr}
   2e190:	bl	12184 <strndup@plt>
   2e194:	cmp	r0, #0
   2e198:	popne	{r4, pc}
   2e19c:	bl	2e14c <__assert_fail@plt+0x1b9b0>
   2e1a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e1a4:	mov	r5, r1
   2e1a8:	ldr	r6, [pc, #184]	; 2e268 <__assert_fail@plt+0x1bacc>
   2e1ac:	sub	sp, sp, #8
   2e1b0:	mov	r7, r0
   2e1b4:	ldr	r1, [r6]
   2e1b8:	mov	sl, r3
   2e1bc:	mov	r9, r2
   2e1c0:	str	r1, [sp, #4]
   2e1c4:	bl	124d8 <__errno_location@plt>
   2e1c8:	mov	r4, #0
   2e1cc:	mov	r1, sp
   2e1d0:	str	r4, [r0]
   2e1d4:	mov	r8, r0
   2e1d8:	mov	r0, r7
   2e1dc:	blx	sl
   2e1e0:	ldr	r3, [sp]
   2e1e4:	cmp	r3, r7
   2e1e8:	beq	2e25c <__assert_fail@plt+0x1bac0>
   2e1ec:	cmp	r5, r4
   2e1f0:	beq	2e238 <__assert_fail@plt+0x1ba9c>
   2e1f4:	vcmp.f64	d0, #0.0
   2e1f8:	vmrs	APSR_nzcv, fpscr
   2e1fc:	moveq	r0, #1
   2e200:	beq	2e218 <__assert_fail@plt+0x1ba7c>
   2e204:	ldr	r0, [r8]
   2e208:	subs	r0, r0, #34	; 0x22
   2e20c:	movne	r0, #1
   2e210:	cmp	r5, #0
   2e214:	beq	2e21c <__assert_fail@plt+0x1ba80>
   2e218:	str	r3, [r5]
   2e21c:	ldr	r2, [sp, #4]
   2e220:	ldr	r3, [r6]
   2e224:	vstr	d0, [r9]
   2e228:	cmp	r2, r3
   2e22c:	bne	2e264 <__assert_fail@plt+0x1bac8>
   2e230:	add	sp, sp, #8
   2e234:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e238:	ldrb	r2, [r3]
   2e23c:	cmp	r2, r4
   2e240:	movne	r0, r5
   2e244:	bne	2e21c <__assert_fail@plt+0x1ba80>
   2e248:	vcmp.f64	d0, #0.0
   2e24c:	vmrs	APSR_nzcv, fpscr
   2e250:	moveq	r0, #1
   2e254:	bne	2e204 <__assert_fail@plt+0x1ba68>
   2e258:	b	2e21c <__assert_fail@plt+0x1ba80>
   2e25c:	mov	r0, r4
   2e260:	b	2e210 <__assert_fail@plt+0x1ba74>
   2e264:	bl	12244 <__stack_chk_fail@plt>
   2e268:	andeq	fp, r5, r0, ror #24
   2e26c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e270:	cmp	r2, #36	; 0x24
   2e274:	ldr	r7, [pc, #1580]	; 2e8a8 <__assert_fail@plt+0x1c10c>
   2e278:	sub	sp, sp, #20
   2e27c:	mov	fp, r2
   2e280:	ldr	r2, [r7]
   2e284:	ldr	r9, [sp, #56]	; 0x38
   2e288:	str	r2, [sp, #12]
   2e28c:	bhi	2e890 <__assert_fail@plt+0x1c0f4>
   2e290:	cmp	r1, #0
   2e294:	mov	r6, r1
   2e298:	mov	r5, r0
   2e29c:	mov	sl, r3
   2e2a0:	addeq	r6, sp, #8
   2e2a4:	bl	124d8 <__errno_location@plt>
   2e2a8:	mov	r3, #0
   2e2ac:	str	r3, [r0]
   2e2b0:	mov	r8, r0
   2e2b4:	bl	12460 <__ctype_b_loc@plt>
   2e2b8:	ldrb	r3, [r5]
   2e2bc:	mov	r1, r5
   2e2c0:	ldr	ip, [r0]
   2e2c4:	b	2e2cc <__assert_fail@plt+0x1bb30>
   2e2c8:	ldrb	r3, [r1, #1]!
   2e2cc:	lsl	r2, r3, #1
   2e2d0:	ldrh	r0, [ip, r2]
   2e2d4:	ands	r4, r0, #8192	; 0x2000
   2e2d8:	bne	2e2c8 <__assert_fail@plt+0x1bb2c>
   2e2dc:	cmp	r3, #45	; 0x2d
   2e2e0:	beq	2e36c <__assert_fail@plt+0x1bbd0>
   2e2e4:	mov	r2, fp
   2e2e8:	mov	r1, r6
   2e2ec:	mov	r0, r5
   2e2f0:	bl	12490 <strtoul@plt>
   2e2f4:	ldr	r3, [r6]
   2e2f8:	cmp	r3, r5
   2e2fc:	mov	fp, r0
   2e300:	beq	2e354 <__assert_fail@plt+0x1bbb8>
   2e304:	ldr	r4, [r8]
   2e308:	cmp	r4, #0
   2e30c:	bne	2e344 <__assert_fail@plt+0x1bba8>
   2e310:	cmp	r9, #0
   2e314:	beq	2e324 <__assert_fail@plt+0x1bb88>
   2e318:	ldrb	r5, [r3]
   2e31c:	cmp	r5, #0
   2e320:	bne	2e6dc <__assert_fail@plt+0x1bf40>
   2e324:	str	fp, [sl]
   2e328:	ldr	r2, [sp, #12]
   2e32c:	ldr	r3, [r7]
   2e330:	mov	r0, r4
   2e334:	cmp	r2, r3
   2e338:	bne	2e8a4 <__assert_fail@plt+0x1c108>
   2e33c:	add	sp, sp, #20
   2e340:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e344:	cmp	r4, #34	; 0x22
   2e348:	bne	2e36c <__assert_fail@plt+0x1bbd0>
   2e34c:	mov	r4, #1
   2e350:	b	2e310 <__assert_fail@plt+0x1bb74>
   2e354:	cmp	r9, #0
   2e358:	str	r3, [sp, #4]
   2e35c:	beq	2e36c <__assert_fail@plt+0x1bbd0>
   2e360:	ldrb	r5, [r5]
   2e364:	cmp	r5, #0
   2e368:	bne	2e374 <__assert_fail@plt+0x1bbd8>
   2e36c:	mov	r4, #4
   2e370:	b	2e328 <__assert_fail@plt+0x1bb8c>
   2e374:	mov	r1, r5
   2e378:	mov	r0, r9
   2e37c:	bl	124a8 <strchr@plt>
   2e380:	ldr	r3, [sp, #4]
   2e384:	cmp	r0, #0
   2e388:	movne	fp, #1
   2e38c:	beq	2e36c <__assert_fail@plt+0x1bbd0>
   2e390:	sub	r8, r5, #69	; 0x45
   2e394:	cmp	r8, #47	; 0x2f
   2e398:	ldrls	pc, [pc, r8, lsl #2]
   2e39c:	b	2e564 <__assert_fail@plt+0x1bdc8>
   2e3a0:	andeq	lr, r2, r0, ror #8
   2e3a4:	andeq	lr, r2, r4, ror #10
   2e3a8:	andeq	lr, r2, r0, ror #8
   2e3ac:	andeq	lr, r2, r4, ror #10
   2e3b0:	andeq	lr, r2, r4, ror #10
   2e3b4:	andeq	lr, r2, r4, ror #10
   2e3b8:	andeq	lr, r2, r0, ror #8
   2e3bc:	andeq	lr, r2, r4, ror #10
   2e3c0:	andeq	lr, r2, r0, ror #8
   2e3c4:	andeq	lr, r2, r4, ror #10
   2e3c8:	andeq	lr, r2, r4, ror #10
   2e3cc:	andeq	lr, r2, r0, ror #8
   2e3d0:	andeq	lr, r2, r4, ror #10
   2e3d4:	andeq	lr, r2, r4, ror #10
   2e3d8:	andeq	lr, r2, r4, ror #10
   2e3dc:	andeq	lr, r2, r0, ror #8
   2e3e0:	andeq	lr, r2, r4, ror #10
   2e3e4:	andeq	lr, r2, r4, ror #10
   2e3e8:	andeq	lr, r2, r4, ror #10
   2e3ec:	andeq	lr, r2, r4, ror #10
   2e3f0:	andeq	lr, r2, r0, ror #8
   2e3f4:	andeq	lr, r2, r0, ror #8
   2e3f8:	andeq	lr, r2, r4, ror #10
   2e3fc:	andeq	lr, r2, r4, ror #10
   2e400:	andeq	lr, r2, r4, ror #10
   2e404:	andeq	lr, r2, r4, ror #10
   2e408:	andeq	lr, r2, r4, ror #10
   2e40c:	andeq	lr, r2, r4, ror #10
   2e410:	andeq	lr, r2, r4, ror #10
   2e414:	andeq	lr, r2, r4, ror #10
   2e418:	andeq	lr, r2, r4, ror #10
   2e41c:	andeq	lr, r2, r4, ror #10
   2e420:	andeq	lr, r2, r4, ror #10
   2e424:	andeq	lr, r2, r4, ror #10
   2e428:	andeq	lr, r2, r0, ror #8
   2e42c:	andeq	lr, r2, r4, ror #10
   2e430:	andeq	lr, r2, r4, ror #10
   2e434:	andeq	lr, r2, r4, ror #10
   2e438:	andeq	lr, r2, r0, ror #8
   2e43c:	andeq	lr, r2, r4, ror #10
   2e440:	andeq	lr, r2, r0, ror #8
   2e444:	andeq	lr, r2, r4, ror #10
   2e448:	andeq	lr, r2, r4, ror #10
   2e44c:	andeq	lr, r2, r4, ror #10
   2e450:	andeq	lr, r2, r4, ror #10
   2e454:	andeq	lr, r2, r4, ror #10
   2e458:	andeq	lr, r2, r4, ror #10
   2e45c:	andeq	lr, r2, r0, ror #8
   2e460:	mov	r0, r9
   2e464:	mov	r1, #48	; 0x30
   2e468:	str	r3, [sp, #4]
   2e46c:	bl	124a8 <strchr@plt>
   2e470:	ldr	r3, [sp, #4]
   2e474:	cmp	r0, #0
   2e478:	beq	2e564 <__assert_fail@plt+0x1bdc8>
   2e47c:	ldrb	r2, [r3, #1]
   2e480:	cmp	r2, #68	; 0x44
   2e484:	beq	2e87c <__assert_fail@plt+0x1c0e0>
   2e488:	cmp	r2, #105	; 0x69
   2e48c:	beq	2e704 <__assert_fail@plt+0x1bf68>
   2e490:	cmp	r2, #66	; 0x42
   2e494:	beq	2e87c <__assert_fail@plt+0x1c0e0>
   2e498:	cmp	r8, #47	; 0x2f
   2e49c:	ldrls	pc, [pc, r8, lsl #2]
   2e4a0:	b	2e6f8 <__assert_fail@plt+0x1bf5c>
   2e4a4:	andeq	lr, r2, r4, lsr r8
   2e4a8:	strdeq	lr, [r2], -r8
   2e4ac:	andeq	lr, r2, r4, asr r6
   2e4b0:	strdeq	lr, [r2], -r8
   2e4b4:	strdeq	lr, [r2], -r8
   2e4b8:	strdeq	lr, [r2], -r8
   2e4bc:	andeq	lr, r2, r0, asr #13
   2e4c0:	strdeq	lr, [r2], -r8
   2e4c4:	andeq	lr, r2, r4, lsl #16
   2e4c8:	strdeq	lr, [r2], -r8
   2e4cc:	strdeq	lr, [r2], -r8
   2e4d0:	ldrdeq	lr, [r2], -r4
   2e4d4:	strdeq	lr, [r2], -r8
   2e4d8:	strdeq	lr, [r2], -r8
   2e4dc:	strdeq	lr, [r2], -r8
   2e4e0:	andeq	lr, r2, r4, lsr #15
   2e4e4:	strdeq	lr, [r2], -r8
   2e4e8:	strdeq	lr, [r2], -r8
   2e4ec:	strdeq	lr, [r2], -r8
   2e4f0:	strdeq	lr, [r2], -r8
   2e4f4:	andeq	lr, r2, r4, ror r7
   2e4f8:	andeq	lr, r2, r0, asr #14
   2e4fc:	strdeq	lr, [r2], -r8
   2e500:	strdeq	lr, [r2], -r8
   2e504:	strdeq	lr, [r2], -r8
   2e508:	strdeq	lr, [r2], -r8
   2e50c:	strdeq	lr, [r2], -r8
   2e510:	strdeq	lr, [r2], -r8
   2e514:	strdeq	lr, [r2], -r8
   2e518:	andeq	lr, r2, ip, lsr #14
   2e51c:	andeq	lr, r2, r4, ror r8
   2e520:	strdeq	lr, [r2], -r8
   2e524:	strdeq	lr, [r2], -r8
   2e528:	strdeq	lr, [r2], -r8
   2e52c:	andeq	lr, r2, r4, asr r6
   2e530:	strdeq	lr, [r2], -r8
   2e534:	strdeq	lr, [r2], -r8
   2e538:	strdeq	lr, [r2], -r8
   2e53c:	andeq	lr, r2, r0, asr #13
   2e540:	strdeq	lr, [r2], -r8
   2e544:	andeq	lr, r2, r4, lsl #16
   2e548:	strdeq	lr, [r2], -r8
   2e54c:	strdeq	lr, [r2], -r8
   2e550:	strdeq	lr, [r2], -r8
   2e554:	strdeq	lr, [r2], -r8
   2e558:	strdeq	lr, [r2], -r8
   2e55c:	strdeq	lr, [r2], -r8
   2e560:	andeq	lr, r2, r4, lsr #15
   2e564:	mov	r1, #1
   2e568:	mov	r2, #1024	; 0x400
   2e56c:	sub	r5, r5, #66	; 0x42
   2e570:	cmp	r5, #53	; 0x35
   2e574:	ldrls	pc, [pc, r5, lsl #2]
   2e578:	b	2e6f8 <__assert_fail@plt+0x1bf5c>
   2e57c:	andeq	lr, r2, r4, ror #16
   2e580:	strdeq	lr, [r2], -r8
   2e584:	strdeq	lr, [r2], -r8
   2e588:	andeq	lr, r2, ip, lsr r8
   2e58c:	strdeq	lr, [r2], -r8
   2e590:	andeq	lr, r2, ip, asr r6
   2e594:	strdeq	lr, [r2], -r8
   2e598:	strdeq	lr, [r2], -r8
   2e59c:	strdeq	lr, [r2], -r8
   2e5a0:	andeq	lr, r2, r8, asr #13
   2e5a4:	strdeq	lr, [r2], -r8
   2e5a8:	andeq	lr, r2, ip, lsl #16
   2e5ac:	strdeq	lr, [r2], -r8
   2e5b0:	strdeq	lr, [r2], -r8
   2e5b4:	ldrdeq	lr, [r2], -ip
   2e5b8:	strdeq	lr, [r2], -r8
   2e5bc:	strdeq	lr, [r2], -r8
   2e5c0:	strdeq	lr, [r2], -r8
   2e5c4:	andeq	lr, r2, ip, lsr #15
   2e5c8:	strdeq	lr, [r2], -r8
   2e5cc:	strdeq	lr, [r2], -r8
   2e5d0:	strdeq	lr, [r2], -r8
   2e5d4:	strdeq	lr, [r2], -r8
   2e5d8:	andeq	lr, r2, ip, ror r7
   2e5dc:	andeq	lr, r2, r8, asr #14
   2e5e0:	strdeq	lr, [r2], -r8
   2e5e4:	strdeq	lr, [r2], -r8
   2e5e8:	strdeq	lr, [r2], -r8
   2e5ec:	strdeq	lr, [r2], -r8
   2e5f0:	strdeq	lr, [r2], -r8
   2e5f4:	strdeq	lr, [r2], -r8
   2e5f8:	strdeq	lr, [r2], -r8
   2e5fc:	andeq	lr, r2, r0, lsr r7
   2e600:	andeq	lr, r2, r8, lsr #13
   2e604:	strdeq	lr, [r2], -r8
   2e608:	strdeq	lr, [r2], -r8
   2e60c:	strdeq	lr, [r2], -r8
   2e610:	andeq	lr, r2, ip, asr r6
   2e614:	strdeq	lr, [r2], -r8
   2e618:	strdeq	lr, [r2], -r8
   2e61c:	strdeq	lr, [r2], -r8
   2e620:	andeq	lr, r2, r8, asr #13
   2e624:	strdeq	lr, [r2], -r8
   2e628:	andeq	lr, r2, ip, lsl #16
   2e62c:	strdeq	lr, [r2], -r8
   2e630:	strdeq	lr, [r2], -r8
   2e634:	strdeq	lr, [r2], -r8
   2e638:	strdeq	lr, [r2], -r8
   2e63c:	strdeq	lr, [r2], -r8
   2e640:	strdeq	lr, [r2], -r8
   2e644:	andeq	lr, r2, ip, lsr #15
   2e648:	strdeq	lr, [r2], -r8
   2e64c:	strdeq	lr, [r2], -r8
   2e650:	andeq	lr, r2, ip, lsl r7
   2e654:	mov	r1, #1
   2e658:	mov	r2, #1024	; 0x400
   2e65c:	umull	ip, r0, r2, fp
   2e660:	adds	r0, r0, #0
   2e664:	movne	r0, #1
   2e668:	cmp	r0, #0
   2e66c:	bne	2e888 <__assert_fail@plt+0x1c0ec>
   2e670:	mul	fp, r2, fp
   2e674:	umull	ip, r0, r2, fp
   2e678:	adds	r0, r0, #0
   2e67c:	movne	r0, #1
   2e680:	cmp	r0, #0
   2e684:	bne	2e888 <__assert_fail@plt+0x1c0ec>
   2e688:	mul	fp, r2, fp
   2e68c:	umull	ip, r0, r2, fp
   2e690:	adds	r0, r0, #0
   2e694:	movne	r0, #1
   2e698:	cmp	r0, #0
   2e69c:	muleq	fp, r2, fp
   2e6a0:	bne	2e888 <__assert_fail@plt+0x1c0ec>
   2e6a4:	orr	r4, r4, r0
   2e6a8:	add	r2, r3, r1
   2e6ac:	str	r2, [r6]
   2e6b0:	ldrb	r3, [r3, r1]
   2e6b4:	cmp	r3, #0
   2e6b8:	orrne	r4, r4, #2
   2e6bc:	b	2e324 <__assert_fail@plt+0x1bb88>
   2e6c0:	mov	r1, #1
   2e6c4:	mov	r2, #1024	; 0x400
   2e6c8:	umull	ip, r0, r2, fp
   2e6cc:	cmp	r0, #0
   2e6d0:	bne	2e828 <__assert_fail@plt+0x1c08c>
   2e6d4:	mul	fp, r2, fp
   2e6d8:	b	2e6a8 <__assert_fail@plt+0x1bf0c>
   2e6dc:	mov	r1, r5
   2e6e0:	mov	r0, r9
   2e6e4:	str	r3, [sp, #4]
   2e6e8:	bl	124a8 <strchr@plt>
   2e6ec:	ldr	r3, [sp, #4]
   2e6f0:	cmp	r0, #0
   2e6f4:	bne	2e390 <__assert_fail@plt+0x1bbf4>
   2e6f8:	str	fp, [sl]
   2e6fc:	orr	r4, r4, #2
   2e700:	b	2e328 <__assert_fail@plt+0x1bb8c>
   2e704:	ldrb	r1, [r3, #2]
   2e708:	mov	r2, #1024	; 0x400
   2e70c:	cmp	r1, #66	; 0x42
   2e710:	movne	r1, #1
   2e714:	moveq	r1, #3
   2e718:	b	2e56c <__assert_fail@plt+0x1bdd0>
   2e71c:	cmp	fp, #0
   2e720:	blt	2e828 <__assert_fail@plt+0x1c08c>
   2e724:	lsl	fp, fp, #1
   2e728:	b	2e6a8 <__assert_fail@plt+0x1bf0c>
   2e72c:	mov	r1, #1
   2e730:	lsrs	r2, fp, #23
   2e734:	bne	2e828 <__assert_fail@plt+0x1c08c>
   2e738:	lsl	fp, fp, #9
   2e73c:	b	2e6a8 <__assert_fail@plt+0x1bf0c>
   2e740:	mov	r1, #1
   2e744:	mov	r2, #1024	; 0x400
   2e748:	mov	r0, #7
   2e74c:	mov	lr, #0
   2e750:	umull	r5, ip, r2, fp
   2e754:	cmp	ip, #0
   2e758:	movne	lr, #1
   2e75c:	muleq	fp, r2, fp
   2e760:	mvnne	fp, #0
   2e764:	subs	r0, r0, #1
   2e768:	bne	2e750 <__assert_fail@plt+0x1bfb4>
   2e76c:	orr	r4, r4, lr
   2e770:	b	2e6a8 <__assert_fail@plt+0x1bf0c>
   2e774:	mov	r1, #1
   2e778:	mov	r2, #1024	; 0x400
   2e77c:	mov	r0, #8
   2e780:	mov	lr, #0
   2e784:	umull	r5, ip, r2, fp
   2e788:	cmp	ip, #0
   2e78c:	movne	lr, #1
   2e790:	muleq	fp, r2, fp
   2e794:	mvnne	fp, #0
   2e798:	subs	r0, r0, #1
   2e79c:	bne	2e784 <__assert_fail@plt+0x1bfe8>
   2e7a0:	b	2e76c <__assert_fail@plt+0x1bfd0>
   2e7a4:	mov	r1, #1
   2e7a8:	mov	r2, #1024	; 0x400
   2e7ac:	mov	r0, #4
   2e7b0:	mov	lr, #0
   2e7b4:	umull	r5, ip, r2, fp
   2e7b8:	cmp	ip, #0
   2e7bc:	movne	lr, #1
   2e7c0:	muleq	fp, r2, fp
   2e7c4:	mvnne	fp, #0
   2e7c8:	subs	r0, r0, #1
   2e7cc:	bne	2e7b4 <__assert_fail@plt+0x1c018>
   2e7d0:	b	2e76c <__assert_fail@plt+0x1bfd0>
   2e7d4:	mov	r1, #1
   2e7d8:	mov	r2, #1024	; 0x400
   2e7dc:	mov	r0, #5
   2e7e0:	mov	lr, #0
   2e7e4:	umull	r5, ip, r2, fp
   2e7e8:	cmp	ip, #0
   2e7ec:	movne	lr, #1
   2e7f0:	muleq	fp, r2, fp
   2e7f4:	mvnne	fp, #0
   2e7f8:	subs	r0, r0, #1
   2e7fc:	bne	2e7e4 <__assert_fail@plt+0x1c048>
   2e800:	b	2e76c <__assert_fail@plt+0x1bfd0>
   2e804:	mov	r1, #1
   2e808:	mov	r2, #1024	; 0x400
   2e80c:	umull	ip, r0, r2, fp
   2e810:	cmp	r0, #0
   2e814:	bne	2e828 <__assert_fail@plt+0x1c08c>
   2e818:	mul	fp, r2, fp
   2e81c:	umull	ip, r0, r2, fp
   2e820:	cmp	r0, #0
   2e824:	beq	2e6d4 <__assert_fail@plt+0x1bf38>
   2e828:	mov	r4, #1
   2e82c:	mvn	fp, #0
   2e830:	b	2e6a8 <__assert_fail@plt+0x1bf0c>
   2e834:	mov	r1, #1
   2e838:	mov	r2, #1024	; 0x400
   2e83c:	mov	r0, #6
   2e840:	mov	lr, #0
   2e844:	umull	r5, ip, r2, fp
   2e848:	cmp	ip, #0
   2e84c:	movne	lr, #1
   2e850:	muleq	fp, r2, fp
   2e854:	mvnne	fp, #0
   2e858:	subs	r0, r0, #1
   2e85c:	bne	2e844 <__assert_fail@plt+0x1c0a8>
   2e860:	b	2e76c <__assert_fail@plt+0x1bfd0>
   2e864:	lsrs	r2, fp, #22
   2e868:	bne	2e828 <__assert_fail@plt+0x1c08c>
   2e86c:	lsl	fp, fp, #10
   2e870:	b	2e6a8 <__assert_fail@plt+0x1bf0c>
   2e874:	mov	r1, #1
   2e878:	b	2e6a8 <__assert_fail@plt+0x1bf0c>
   2e87c:	mov	r1, #2
   2e880:	mov	r2, #1000	; 0x3e8
   2e884:	b	2e56c <__assert_fail@plt+0x1bdd0>
   2e888:	mvn	fp, #0
   2e88c:	b	2e6a4 <__assert_fail@plt+0x1bf08>
   2e890:	ldr	r3, [pc, #20]	; 2e8ac <__assert_fail@plt+0x1c110>
   2e894:	mov	r2, #84	; 0x54
   2e898:	ldr	r1, [pc, #16]	; 2e8b0 <__assert_fail@plt+0x1c114>
   2e89c:	ldr	r0, [pc, #16]	; 2e8b4 <__assert_fail@plt+0x1c118>
   2e8a0:	bl	1279c <__assert_fail@plt>
   2e8a4:	bl	12244 <__stack_chk_fail@plt>
   2e8a8:	andeq	fp, r5, r0, ror #24
   2e8ac:			; <UNDEFINED> instruction: 0x0004a5bc
   2e8b0:	andeq	sl, r4, r8, asr #11
   2e8b4:	ldrdeq	sl, [r4], -r4
   2e8b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e8bc:	sub	sp, sp, #36	; 0x24
   2e8c0:	ldr	r5, [pc, #2536]	; 2f2b0 <__assert_fail@plt+0x1cb14>
   2e8c4:	mov	r9, r2
   2e8c8:	cmp	r2, #36	; 0x24
   2e8cc:	str	r3, [sp, #12]
   2e8d0:	ldr	r2, [r5]
   2e8d4:	ldr	r3, [sp, #72]	; 0x48
   2e8d8:	str	r2, [sp, #28]
   2e8dc:	str	r3, [sp]
   2e8e0:	bhi	2f29c <__assert_fail@plt+0x1cb00>
   2e8e4:	cmp	r1, #0
   2e8e8:	mov	r4, r1
   2e8ec:	mov	r6, r0
   2e8f0:	addeq	r4, sp, #24
   2e8f4:	bl	124d8 <__errno_location@plt>
   2e8f8:	mov	r3, #0
   2e8fc:	str	r3, [r0]
   2e900:	mov	r7, r0
   2e904:	bl	12460 <__ctype_b_loc@plt>
   2e908:	ldrb	r3, [r6]
   2e90c:	mov	r1, r6
   2e910:	ldr	r0, [r0]
   2e914:	b	2e91c <__assert_fail@plt+0x1c180>
   2e918:	ldrb	r3, [r1, #1]!
   2e91c:	lsl	r2, r3, #1
   2e920:	ldrh	r8, [r0, r2]
   2e924:	ands	r8, r8, #8192	; 0x2000
   2e928:	bne	2e918 <__assert_fail@plt+0x1c17c>
   2e92c:	cmp	r3, #45	; 0x2d
   2e930:	beq	2e9cc <__assert_fail@plt+0x1c230>
   2e934:	mov	r2, r9
   2e938:	mov	r3, r8
   2e93c:	mov	r1, r4
   2e940:	mov	r0, r6
   2e944:	bl	121cc <__strtoull_internal@plt>
   2e948:	ldr	r9, [r4]
   2e94c:	cmp	r9, r6
   2e950:	mov	sl, r0
   2e954:	mov	fp, r1
   2e958:	beq	2e9b4 <__assert_fail@plt+0x1c218>
   2e95c:	ldr	r8, [r7]
   2e960:	cmp	r8, #0
   2e964:	bne	2e9a4 <__assert_fail@plt+0x1c208>
   2e968:	ldr	r3, [sp]
   2e96c:	cmp	r3, #0
   2e970:	beq	2e980 <__assert_fail@plt+0x1c1e4>
   2e974:	ldrb	r6, [r9]
   2e978:	cmp	r6, #0
   2e97c:	bne	2ed54 <__assert_fail@plt+0x1c5b8>
   2e980:	ldr	r3, [sp, #12]
   2e984:	strd	sl, [r3]
   2e988:	ldr	r2, [sp, #28]
   2e98c:	ldr	r3, [r5]
   2e990:	mov	r0, r8
   2e994:	cmp	r2, r3
   2e998:	bne	2f298 <__assert_fail@plt+0x1cafc>
   2e99c:	add	sp, sp, #36	; 0x24
   2e9a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e9a4:	cmp	r8, #34	; 0x22
   2e9a8:	bne	2e9cc <__assert_fail@plt+0x1c230>
   2e9ac:	mov	r8, #1
   2e9b0:	b	2e968 <__assert_fail@plt+0x1c1cc>
   2e9b4:	ldr	r0, [sp]
   2e9b8:	cmp	r0, #0
   2e9bc:	beq	2e9cc <__assert_fail@plt+0x1c230>
   2e9c0:	ldrb	r6, [r6]
   2e9c4:	cmp	r6, #0
   2e9c8:	bne	2e9d4 <__assert_fail@plt+0x1c238>
   2e9cc:	mov	r8, #4
   2e9d0:	b	2e988 <__assert_fail@plt+0x1c1ec>
   2e9d4:	mov	r1, r6
   2e9d8:	bl	124a8 <strchr@plt>
   2e9dc:	cmp	r0, #0
   2e9e0:	movne	sl, #1
   2e9e4:	movne	fp, #0
   2e9e8:	beq	2e9cc <__assert_fail@plt+0x1c230>
   2e9ec:	sub	r7, r6, #69	; 0x45
   2e9f0:	cmp	r7, #47	; 0x2f
   2e9f4:	ldrls	pc, [pc, r7, lsl #2]
   2e9f8:	b	2ebb8 <__assert_fail@plt+0x1c41c>
   2e9fc:			; <UNDEFINED> instruction: 0x0002eabc
   2ea00:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea04:			; <UNDEFINED> instruction: 0x0002eabc
   2ea08:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea0c:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea10:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea14:			; <UNDEFINED> instruction: 0x0002eabc
   2ea18:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea1c:			; <UNDEFINED> instruction: 0x0002eabc
   2ea20:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea24:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea28:			; <UNDEFINED> instruction: 0x0002eabc
   2ea2c:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea30:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea34:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea38:			; <UNDEFINED> instruction: 0x0002eabc
   2ea3c:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea40:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea44:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea48:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea4c:			; <UNDEFINED> instruction: 0x0002eabc
   2ea50:			; <UNDEFINED> instruction: 0x0002eabc
   2ea54:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea58:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea5c:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea60:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea64:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea68:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea6c:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea70:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea74:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea78:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea7c:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea80:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea84:			; <UNDEFINED> instruction: 0x0002eabc
   2ea88:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea8c:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea90:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea94:			; <UNDEFINED> instruction: 0x0002eabc
   2ea98:			; <UNDEFINED> instruction: 0x0002ebb8
   2ea9c:			; <UNDEFINED> instruction: 0x0002eabc
   2eaa0:			; <UNDEFINED> instruction: 0x0002ebb8
   2eaa4:			; <UNDEFINED> instruction: 0x0002ebb8
   2eaa8:			; <UNDEFINED> instruction: 0x0002ebb8
   2eaac:			; <UNDEFINED> instruction: 0x0002ebb8
   2eab0:			; <UNDEFINED> instruction: 0x0002ebb8
   2eab4:			; <UNDEFINED> instruction: 0x0002ebb8
   2eab8:			; <UNDEFINED> instruction: 0x0002eabc
   2eabc:	ldr	r0, [sp]
   2eac0:	mov	r1, #48	; 0x30
   2eac4:	bl	124a8 <strchr@plt>
   2eac8:	cmp	r0, #0
   2eacc:	beq	2ebb8 <__assert_fail@plt+0x1c41c>
   2ead0:	ldrb	r3, [r9, #1]
   2ead4:	cmp	r3, #68	; 0x44
   2ead8:	beq	2f198 <__assert_fail@plt+0x1c9fc>
   2eadc:	cmp	r3, #105	; 0x69
   2eae0:	beq	2ed78 <__assert_fail@plt+0x1c5dc>
   2eae4:	cmp	r3, #66	; 0x42
   2eae8:	beq	2f198 <__assert_fail@plt+0x1c9fc>
   2eaec:	cmp	r7, #47	; 0x2f
   2eaf0:	ldrls	pc, [pc, r7, lsl #2]
   2eaf4:	b	2ed68 <__assert_fail@plt+0x1c5cc>
   2eaf8:	andeq	pc, r2, ip, ror r1	; <UNPREDICTABLE>
   2eafc:	andeq	lr, r2, r8, ror #26
   2eb00:	andeq	pc, r2, ip, ror #2
   2eb04:	andeq	lr, r2, r8, ror #26
   2eb08:	andeq	lr, r2, r8, ror #26
   2eb0c:	andeq	lr, r2, r8, ror #26
   2eb10:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   2eb14:	andeq	lr, r2, r8, ror #26
   2eb18:	andeq	pc, r2, ip, asr #2
   2eb1c:	andeq	lr, r2, r8, ror #26
   2eb20:	andeq	lr, r2, r8, ror #26
   2eb24:	andeq	pc, r2, ip, lsr r1	; <UNPREDICTABLE>
   2eb28:	andeq	lr, r2, r8, ror #26
   2eb2c:	andeq	lr, r2, r8, ror #26
   2eb30:	andeq	lr, r2, r8, ror #26
   2eb34:	andeq	pc, r2, ip, lsr #2
   2eb38:	andeq	lr, r2, r8, ror #26
   2eb3c:	andeq	lr, r2, r8, ror #26
   2eb40:	andeq	lr, r2, r8, ror #26
   2eb44:	andeq	lr, r2, r8, ror #26
   2eb48:	andeq	pc, r2, ip, lsl r1	; <UNPREDICTABLE>
   2eb4c:	andeq	pc, r2, ip, lsl #2
   2eb50:	andeq	lr, r2, r8, ror #26
   2eb54:	andeq	lr, r2, r8, ror #26
   2eb58:	andeq	lr, r2, r8, ror #26
   2eb5c:	andeq	lr, r2, r8, ror #26
   2eb60:	andeq	lr, r2, r8, ror #26
   2eb64:	andeq	lr, r2, r8, ror #26
   2eb68:	andeq	lr, r2, r8, ror #26
   2eb6c:			; <UNDEFINED> instruction: 0x0002edb4
   2eb70:	andeq	pc, r2, r4, lsl #2
   2eb74:	andeq	lr, r2, r8, ror #26
   2eb78:	andeq	lr, r2, r8, ror #26
   2eb7c:	andeq	lr, r2, r8, ror #26
   2eb80:	andeq	pc, r2, ip, ror #2
   2eb84:	andeq	lr, r2, r8, ror #26
   2eb88:	andeq	lr, r2, r8, ror #26
   2eb8c:	andeq	lr, r2, r8, ror #26
   2eb90:	andeq	pc, r2, ip, asr r1	; <UNPREDICTABLE>
   2eb94:	andeq	lr, r2, r8, ror #26
   2eb98:	andeq	pc, r2, ip, asr #2
   2eb9c:	andeq	lr, r2, r8, ror #26
   2eba0:	andeq	lr, r2, r8, ror #26
   2eba4:	andeq	lr, r2, r8, ror #26
   2eba8:	andeq	lr, r2, r8, ror #26
   2ebac:	andeq	lr, r2, r8, ror #26
   2ebb0:	andeq	lr, r2, r8, ror #26
   2ebb4:	andeq	pc, r2, ip, lsr #2
   2ebb8:	mov	lr, #1
   2ebbc:	mov	r0, #1024	; 0x400
   2ebc0:	sub	r6, r6, #66	; 0x42
   2ebc4:	cmp	r6, #53	; 0x35
   2ebc8:	ldrls	pc, [pc, r6, lsl #2]
   2ebcc:	b	2ed68 <__assert_fail@plt+0x1c5cc>
   2ebd0:	ldrdeq	lr, [r2], -ip
   2ebd4:	andeq	lr, r2, r8, ror #26
   2ebd8:	andeq	lr, r2, r8, ror #26
   2ebdc:	andeq	lr, r2, r0, lsl #28
   2ebe0:	andeq	lr, r2, r8, ror #26
   2ebe4:	andeq	lr, r2, r8, lsr #25
   2ebe8:	andeq	lr, r2, r8, ror #26
   2ebec:	andeq	lr, r2, r8, ror #26
   2ebf0:	andeq	lr, r2, r8, ror #26
   2ebf4:	strdeq	lr, [r2], -r8
   2ebf8:	andeq	lr, r2, r8, ror #26
   2ebfc:	muleq	r2, ip, r0
   2ec00:	andeq	lr, r2, r8, ror #26
   2ec04:	andeq	lr, r2, r8, ror #26
   2ec08:	andeq	pc, r2, r0, lsr #32
   2ec0c:	andeq	lr, r2, r8, ror #26
   2ec10:	andeq	lr, r2, r8, ror #26
   2ec14:	andeq	lr, r2, r8, ror #26
   2ec18:	andeq	lr, r2, r4, lsr #31
   2ec1c:	andeq	lr, r2, r8, ror #26
   2ec20:	andeq	lr, r2, r8, ror #26
   2ec24:	andeq	lr, r2, r8, ror #26
   2ec28:	andeq	lr, r2, r8, ror #26
   2ec2c:	andeq	lr, r2, r8, lsr #30
   2ec30:	andeq	lr, r2, ip, ror lr
   2ec34:	andeq	lr, r2, r8, ror #26
   2ec38:	andeq	lr, r2, r8, ror #26
   2ec3c:	andeq	lr, r2, r8, ror #26
   2ec40:	andeq	lr, r2, r8, ror #26
   2ec44:	andeq	lr, r2, r8, ror #26
   2ec48:	andeq	lr, r2, r8, ror #26
   2ec4c:	andeq	lr, r2, r8, ror #26
   2ec50:			; <UNDEFINED> instruction: 0x0002edb8
   2ec54:	andeq	lr, r2, ip, lsr sp
   2ec58:	andeq	lr, r2, r8, ror #26
   2ec5c:	andeq	lr, r2, r8, ror #26
   2ec60:	andeq	lr, r2, r8, ror #26
   2ec64:	andeq	lr, r2, r8, lsr #25
   2ec68:	andeq	lr, r2, r8, ror #26
   2ec6c:	andeq	lr, r2, r8, ror #26
   2ec70:	andeq	lr, r2, r8, ror #26
   2ec74:	strdeq	lr, [r2], -r8
   2ec78:	andeq	lr, r2, r8, ror #26
   2ec7c:	muleq	r2, ip, r0
   2ec80:	andeq	lr, r2, r8, ror #26
   2ec84:	andeq	lr, r2, r8, ror #26
   2ec88:	andeq	lr, r2, r8, ror #26
   2ec8c:	andeq	lr, r2, r8, ror #26
   2ec90:	andeq	lr, r2, r8, ror #26
   2ec94:	andeq	lr, r2, r8, ror #26
   2ec98:	andeq	lr, r2, r4, lsr #31
   2ec9c:	andeq	lr, r2, r8, ror #26
   2eca0:	andeq	lr, r2, r8, ror #26
   2eca4:	muleq	r2, r0, sp
   2eca8:	asr	r1, r0, #31
   2ecac:	mov	r2, #0
   2ecb0:	mov	r3, #0
   2ecb4:	cmp	fp, #0
   2ecb8:	strd	r2, [sp]
   2ecbc:	bne	2f1dc <__assert_fail@plt+0x1ca40>
   2ecc0:	ldrd	r2, [sp]
   2ecc4:	orrs	r3, r2, r3
   2ecc8:	bne	2f1cc <__assert_fail@plt+0x1ca30>
   2eccc:	mul	r3, sl, r1
   2ecd0:	umull	r6, r7, sl, r0
   2ecd4:	mla	r3, r0, fp, r3
   2ecd8:	ldrd	sl, [sp]
   2ecdc:	add	ip, r3, r7
   2ece0:	cmp	ip, #0
   2ece4:	mov	r7, ip
   2ece8:	bne	2f270 <__assert_fail@plt+0x1cad4>
   2ecec:	orrs	r3, sl, fp
   2ecf0:	bne	2f1cc <__assert_fail@plt+0x1ca30>
   2ecf4:	umull	r2, r3, r6, r0
   2ecf8:	mul	ip, r6, r1
   2ecfc:	strd	r2, [sp]
   2ed00:	mla	r3, r0, r7, ip
   2ed04:	ldr	r2, [sp, #4]
   2ed08:	add	ip, r3, r2
   2ed0c:	cmp	ip, #0
   2ed10:	str	ip, [sp, #4]
   2ed14:	bne	2f24c <__assert_fail@plt+0x1cab0>
   2ed18:	orrs	r3, sl, fp
   2ed1c:	bne	2f1cc <__assert_fail@plt+0x1ca30>
   2ed20:	ldrd	r6, [sp]
   2ed24:	mov	r3, #0
   2ed28:	mul	r2, r6, r1
   2ed2c:	umull	sl, fp, r6, r0
   2ed30:	mla	r2, r0, r7, r2
   2ed34:	add	fp, r2, fp
   2ed38:	orr	r8, r8, r3
   2ed3c:	add	r3, r9, lr
   2ed40:	str	r3, [r4]
   2ed44:	ldrb	r3, [r9, lr]
   2ed48:	cmp	r3, #0
   2ed4c:	orrne	r8, r8, #2
   2ed50:	b	2e980 <__assert_fail@plt+0x1c1e4>
   2ed54:	mov	r1, r6
   2ed58:	ldr	r0, [sp]
   2ed5c:	bl	124a8 <strchr@plt>
   2ed60:	cmp	r0, #0
   2ed64:	bne	2e9ec <__assert_fail@plt+0x1c250>
   2ed68:	ldr	r3, [sp, #12]
   2ed6c:	orr	r8, r8, #2
   2ed70:	strd	sl, [r3]
   2ed74:	b	2e988 <__assert_fail@plt+0x1c1ec>
   2ed78:	ldrb	r3, [r9, #2]
   2ed7c:	mov	r0, #1024	; 0x400
   2ed80:	cmp	r3, #66	; 0x42
   2ed84:	movne	lr, #1
   2ed88:	moveq	lr, #3
   2ed8c:	b	2ebc0 <__assert_fail@plt+0x1c424>
   2ed90:	lsr	r3, fp, #31
   2ed94:	adds	sl, sl, sl
   2ed98:	adc	fp, fp, fp
   2ed9c:	cmp	r3, #0
   2eda0:	beq	2ed3c <__assert_fail@plt+0x1c5a0>
   2eda4:	mov	r8, #1
   2eda8:	mvn	sl, #0
   2edac:	mvn	fp, #0
   2edb0:	b	2ed3c <__assert_fail@plt+0x1c5a0>
   2edb4:	mov	lr, #1
   2edb8:	lsr	r3, fp, #23
   2edbc:	cmp	r3, #0
   2edc0:	bne	2eda4 <__assert_fail@plt+0x1c608>
   2edc4:	lsl	r3, fp, #9
   2edc8:	orr	r3, r3, sl, lsr #23
   2edcc:	lsl	r2, sl, #9
   2edd0:	mov	sl, r2
   2edd4:	mov	fp, r3
   2edd8:	b	2ed3c <__assert_fail@plt+0x1c5a0>
   2eddc:	lsr	r3, fp, #22
   2ede0:	cmp	r3, #0
   2ede4:	bne	2eda4 <__assert_fail@plt+0x1c608>
   2ede8:	lsl	r3, fp, #10
   2edec:	orr	r3, r3, sl, lsr #22
   2edf0:	lsl	r2, sl, #10
   2edf4:	mov	sl, r2
   2edf8:	mov	fp, r3
   2edfc:	b	2ed3c <__assert_fail@plt+0x1c5a0>
   2ee00:	mov	r6, r0
   2ee04:	asr	r7, r0, #31
   2ee08:	mov	r3, #0
   2ee0c:	mov	ip, #6
   2ee10:	str	r3, [sp]
   2ee14:	strd	r4, [sp, #16]
   2ee18:	b	2ee48 <__assert_fail@plt+0x1c6ac>
   2ee1c:	orrs	r3, r2, r3
   2ee20:	movne	r3, #1
   2ee24:	muleq	r3, sl, r7
   2ee28:	strne	r3, [sp]
   2ee2c:	mlaeq	r3, r6, fp, r3
   2ee30:	umulleq	sl, fp, sl, r6
   2ee34:	mvnne	sl, #0
   2ee38:	addeq	fp, r3, fp
   2ee3c:	mvnne	fp, #0
   2ee40:	subs	ip, ip, #1
   2ee44:	beq	2f18c <__assert_fail@plt+0x1c9f0>
   2ee48:	cmp	fp, #0
   2ee4c:	mov	r2, #0
   2ee50:	mov	r3, #0
   2ee54:	beq	2ee1c <__assert_fail@plt+0x1c680>
   2ee58:	umull	r0, r1, sl, r6
   2ee5c:	mov	r5, #0
   2ee60:	mov	r0, r1
   2ee64:	mov	r1, r5
   2ee68:	umlal	r0, r1, fp, r6
   2ee6c:	cmp	r1, r5
   2ee70:	movne	r2, #1
   2ee74:	movne	r3, #0
   2ee78:	b	2ee1c <__assert_fail@plt+0x1c680>
   2ee7c:	mov	r6, r0
   2ee80:	asr	r7, r0, #31
   2ee84:	mov	r3, #0
   2ee88:	mov	ip, #7
   2ee8c:	str	r3, [sp]
   2ee90:	strd	r4, [sp, #16]
   2ee94:	b	2eec4 <__assert_fail@plt+0x1c728>
   2ee98:	orrs	r3, r2, r3
   2ee9c:	movne	r3, #1
   2eea0:	muleq	r3, sl, r7
   2eea4:	strne	r3, [sp]
   2eea8:	mlaeq	r3, r6, fp, r3
   2eeac:	umulleq	sl, fp, sl, r6
   2eeb0:	mvnne	sl, #0
   2eeb4:	addeq	fp, r3, fp
   2eeb8:	mvnne	fp, #0
   2eebc:	subs	ip, ip, #1
   2eec0:	beq	2f18c <__assert_fail@plt+0x1c9f0>
   2eec4:	cmp	fp, #0
   2eec8:	mov	r2, #0
   2eecc:	mov	r3, #0
   2eed0:	beq	2ee98 <__assert_fail@plt+0x1c6fc>
   2eed4:	umull	r0, r1, sl, r6
   2eed8:	mov	r5, #0
   2eedc:	mov	r0, r1
   2eee0:	mov	r1, r5
   2eee4:	umlal	r0, r1, fp, r6
   2eee8:	cmp	r1, r5
   2eeec:	movne	r2, #1
   2eef0:	movne	r3, #0
   2eef4:	b	2ee98 <__assert_fail@plt+0x1c6fc>
   2eef8:	asr	r1, r0, #31
   2eefc:	cmp	fp, #0
   2ef00:	mov	r6, #0
   2ef04:	mov	r7, #0
   2ef08:	bne	2f1a4 <__assert_fail@plt+0x1ca08>
   2ef0c:	orrs	r3, r6, r7
   2ef10:	bne	2eda4 <__assert_fail@plt+0x1c608>
   2ef14:	mul	r3, sl, r1
   2ef18:	mla	r3, r0, fp, r3
   2ef1c:	umull	sl, fp, sl, r0
   2ef20:	add	fp, r3, fp
   2ef24:	b	2ed3c <__assert_fail@plt+0x1c5a0>
   2ef28:	mov	r6, r0
   2ef2c:	asr	r7, r0, #31
   2ef30:	mov	r3, #0
   2ef34:	mov	ip, #8
   2ef38:	str	r3, [sp]
   2ef3c:	strd	r4, [sp, #16]
   2ef40:	b	2ef70 <__assert_fail@plt+0x1c7d4>
   2ef44:	orrs	r3, r2, r3
   2ef48:	movne	r3, #1
   2ef4c:	muleq	r3, sl, r7
   2ef50:	strne	r3, [sp]
   2ef54:	mlaeq	r3, r6, fp, r3
   2ef58:	umulleq	sl, fp, sl, r6
   2ef5c:	mvnne	sl, #0
   2ef60:	addeq	fp, r3, fp
   2ef64:	mvnne	fp, #0
   2ef68:	subs	ip, ip, #1
   2ef6c:	beq	2f18c <__assert_fail@plt+0x1c9f0>
   2ef70:	cmp	fp, #0
   2ef74:	mov	r2, #0
   2ef78:	mov	r3, #0
   2ef7c:	beq	2ef44 <__assert_fail@plt+0x1c7a8>
   2ef80:	umull	r0, r1, sl, r6
   2ef84:	mov	r5, #0
   2ef88:	mov	r0, r1
   2ef8c:	mov	r1, r5
   2ef90:	umlal	r0, r1, fp, r6
   2ef94:	cmp	r1, r5
   2ef98:	movne	r2, #1
   2ef9c:	movne	r3, #0
   2efa0:	b	2ef44 <__assert_fail@plt+0x1c7a8>
   2efa4:	mov	r6, r0
   2efa8:	asr	r7, r0, #31
   2efac:	mov	r3, #0
   2efb0:	mov	ip, #4
   2efb4:	str	r3, [sp]
   2efb8:	strd	r4, [sp, #16]
   2efbc:	b	2efec <__assert_fail@plt+0x1c850>
   2efc0:	orrs	r3, r2, r3
   2efc4:	movne	r3, #1
   2efc8:	muleq	r3, sl, r7
   2efcc:	strne	r3, [sp]
   2efd0:	mlaeq	r3, r6, fp, r3
   2efd4:	umulleq	sl, fp, sl, r6
   2efd8:	mvnne	sl, #0
   2efdc:	addeq	fp, r3, fp
   2efe0:	mvnne	fp, #0
   2efe4:	subs	ip, ip, #1
   2efe8:	beq	2f18c <__assert_fail@plt+0x1c9f0>
   2efec:	cmp	fp, #0
   2eff0:	mov	r2, #0
   2eff4:	mov	r3, #0
   2eff8:	beq	2efc0 <__assert_fail@plt+0x1c824>
   2effc:	umull	r0, r1, sl, r6
   2f000:	mov	r5, #0
   2f004:	mov	r0, r1
   2f008:	mov	r1, r5
   2f00c:	umlal	r0, r1, fp, r6
   2f010:	cmp	r1, r5
   2f014:	movne	r2, #1
   2f018:	movne	r3, #0
   2f01c:	b	2efc0 <__assert_fail@plt+0x1c824>
   2f020:	mov	r6, r0
   2f024:	asr	r7, r0, #31
   2f028:	mov	r3, #0
   2f02c:	mov	ip, #5
   2f030:	str	r3, [sp]
   2f034:	strd	r4, [sp, #16]
   2f038:	b	2f068 <__assert_fail@plt+0x1c8cc>
   2f03c:	orrs	r3, r2, r3
   2f040:	movne	r3, #1
   2f044:	muleq	r3, sl, r7
   2f048:	strne	r3, [sp]
   2f04c:	mlaeq	r3, r6, fp, r3
   2f050:	umulleq	sl, fp, sl, r6
   2f054:	mvnne	sl, #0
   2f058:	addeq	fp, r3, fp
   2f05c:	mvnne	fp, #0
   2f060:	subs	ip, ip, #1
   2f064:	beq	2f18c <__assert_fail@plt+0x1c9f0>
   2f068:	cmp	fp, #0
   2f06c:	mov	r2, #0
   2f070:	mov	r3, #0
   2f074:	beq	2f03c <__assert_fail@plt+0x1c8a0>
   2f078:	umull	r0, r1, sl, r6
   2f07c:	mov	r5, #0
   2f080:	mov	r0, r1
   2f084:	mov	r1, r5
   2f088:	umlal	r0, r1, fp, r6
   2f08c:	cmp	r1, r5
   2f090:	movne	r2, #1
   2f094:	movne	r3, #0
   2f098:	b	2f03c <__assert_fail@plt+0x1c8a0>
   2f09c:	asr	r1, r0, #31
   2f0a0:	cmp	fp, #0
   2f0a4:	mov	r6, #0
   2f0a8:	mov	r7, #0
   2f0ac:	bne	2f200 <__assert_fail@plt+0x1ca64>
   2f0b0:	orrs	r3, r6, r7
   2f0b4:	bne	2eda4 <__assert_fail@plt+0x1c608>
   2f0b8:	umull	r2, r3, sl, r0
   2f0bc:	mul	ip, sl, r1
   2f0c0:	strd	r2, [sp]
   2f0c4:	mla	r3, r0, fp, ip
   2f0c8:	ldr	r2, [sp, #4]
   2f0cc:	mov	sl, r6
   2f0d0:	add	ip, r3, r2
   2f0d4:	cmp	ip, #0
   2f0d8:	mov	fp, r7
   2f0dc:	str	ip, [sp, #4]
   2f0e0:	bne	2f228 <__assert_fail@plt+0x1ca8c>
   2f0e4:	orrs	r3, sl, fp
   2f0e8:	bne	2eda4 <__assert_fail@plt+0x1c608>
   2f0ec:	ldrd	r6, [sp]
   2f0f0:	mul	r3, r6, r1
   2f0f4:	umull	sl, fp, r6, r0
   2f0f8:	mla	r0, r0, r7, r3
   2f0fc:	add	fp, r0, fp
   2f100:	b	2ed3c <__assert_fail@plt+0x1c5a0>
   2f104:	mov	lr, #1
   2f108:	b	2ed3c <__assert_fail@plt+0x1c5a0>
   2f10c:	mov	lr, #1
   2f110:	mov	r6, #1024	; 0x400
   2f114:	mov	r7, #0
   2f118:	b	2ee84 <__assert_fail@plt+0x1c6e8>
   2f11c:	mov	lr, #1
   2f120:	mov	r6, #1024	; 0x400
   2f124:	mov	r7, #0
   2f128:	b	2ef30 <__assert_fail@plt+0x1c794>
   2f12c:	mov	lr, #1
   2f130:	mov	r6, #1024	; 0x400
   2f134:	mov	r7, #0
   2f138:	b	2efac <__assert_fail@plt+0x1c810>
   2f13c:	mov	lr, #1
   2f140:	mov	r6, #1024	; 0x400
   2f144:	mov	r7, #0
   2f148:	b	2f028 <__assert_fail@plt+0x1c88c>
   2f14c:	mov	lr, #1
   2f150:	mov	r0, #1024	; 0x400
   2f154:	mov	r1, #0
   2f158:	b	2f0a0 <__assert_fail@plt+0x1c904>
   2f15c:	mov	lr, #1
   2f160:	mov	r0, #1024	; 0x400
   2f164:	mov	r1, #0
   2f168:	b	2eefc <__assert_fail@plt+0x1c760>
   2f16c:	mov	lr, #1
   2f170:	mov	r0, #1024	; 0x400
   2f174:	mov	r1, #0
   2f178:	b	2ecac <__assert_fail@plt+0x1c510>
   2f17c:	mov	lr, #1
   2f180:	mov	r6, #1024	; 0x400
   2f184:	mov	r7, #0
   2f188:	b	2ee08 <__assert_fail@plt+0x1c66c>
   2f18c:	ldrd	r4, [sp, #16]
   2f190:	ldr	r3, [sp]
   2f194:	b	2ed38 <__assert_fail@plt+0x1c59c>
   2f198:	mov	lr, #2
   2f19c:	mov	r0, #1000	; 0x3e8
   2f1a0:	b	2ebc0 <__assert_fail@plt+0x1c424>
   2f1a4:	umull	r2, r3, sl, r0
   2f1a8:	str	r3, [sp]
   2f1ac:	mov	r3, #0
   2f1b0:	str	r3, [sp, #4]
   2f1b4:	ldrd	r2, [sp]
   2f1b8:	umlal	r2, r3, fp, r0
   2f1bc:	cmp	r3, #0
   2f1c0:	movne	r6, #1
   2f1c4:	movne	r7, #0
   2f1c8:	b	2ef0c <__assert_fail@plt+0x1c770>
   2f1cc:	mov	r3, #1
   2f1d0:	mvn	sl, #0
   2f1d4:	mvn	fp, #0
   2f1d8:	b	2ed38 <__assert_fail@plt+0x1c59c>
   2f1dc:	umull	r2, r3, sl, r0
   2f1e0:	mov	r7, #0
   2f1e4:	mov	r6, r3
   2f1e8:	umlal	r6, r7, fp, r0
   2f1ec:	cmp	r7, #0
   2f1f0:	movne	r2, #1
   2f1f4:	movne	r3, #0
   2f1f8:	strdne	r2, [sp]
   2f1fc:	b	2ecc0 <__assert_fail@plt+0x1c524>
   2f200:	umull	r2, r3, sl, r0
   2f204:	str	r3, [sp]
   2f208:	mov	r3, #0
   2f20c:	str	r3, [sp, #4]
   2f210:	ldrd	r2, [sp]
   2f214:	umlal	r2, r3, fp, r0
   2f218:	cmp	r3, #0
   2f21c:	movne	r6, #1
   2f220:	movne	r7, #0
   2f224:	b	2f0b0 <__assert_fail@plt+0x1c914>
   2f228:	ldr	r3, [sp]
   2f22c:	mov	r7, #0
   2f230:	umull	r2, r3, r3, r0
   2f234:	mov	r6, r3
   2f238:	umlal	r6, r7, ip, r0
   2f23c:	cmp	r7, #0
   2f240:	movne	sl, #1
   2f244:	movne	fp, #0
   2f248:	b	2f0e4 <__assert_fail@plt+0x1c948>
   2f24c:	ldr	r3, [sp]
   2f250:	mov	r7, #0
   2f254:	umull	r2, r3, r3, r0
   2f258:	mov	r6, r3
   2f25c:	umlal	r6, r7, ip, r0
   2f260:	cmp	r7, #0
   2f264:	movne	sl, #1
   2f268:	movne	fp, #0
   2f26c:	b	2ed18 <__assert_fail@plt+0x1c57c>
   2f270:	umull	r2, r3, r6, r0
   2f274:	str	r3, [sp]
   2f278:	mov	r3, #0
   2f27c:	str	r3, [sp, #4]
   2f280:	ldrd	r2, [sp]
   2f284:	umlal	r2, r3, ip, r0
   2f288:	cmp	r3, #0
   2f28c:	movne	sl, #1
   2f290:	movne	fp, #0
   2f294:	b	2ecec <__assert_fail@plt+0x1c550>
   2f298:	bl	12244 <__stack_chk_fail@plt>
   2f29c:	ldr	r3, [pc, #16]	; 2f2b4 <__assert_fail@plt+0x1cb18>
   2f2a0:	mov	r2, #84	; 0x54
   2f2a4:	ldr	r1, [pc, #12]	; 2f2b8 <__assert_fail@plt+0x1cb1c>
   2f2a8:	ldr	r0, [pc, #12]	; 2f2bc <__assert_fail@plt+0x1cb20>
   2f2ac:	bl	1279c <__assert_fail@plt>
   2f2b0:	andeq	fp, r5, r0, ror #24
   2f2b4:	strdeq	sl, [r4], -ip
   2f2b8:	andeq	sl, r4, r8, asr #11
   2f2bc:	ldrdeq	sl, [r4], -r4
   2f2c0:	push	{r4, r5, lr}
   2f2c4:	sub	sp, sp, #20
   2f2c8:	ldr	r5, [pc, #128]	; 2f350 <__assert_fail@plt+0x1cbb4>
   2f2cc:	ldr	r3, [pc, #128]	; 2f354 <__assert_fail@plt+0x1cbb8>
   2f2d0:	mov	r4, #0
   2f2d4:	ldr	ip, [r5]
   2f2d8:	ldr	r3, [r3]
   2f2dc:	mov	r2, #10
   2f2e0:	add	r1, sp, #8
   2f2e4:	add	r0, sp, #4
   2f2e8:	str	ip, [sp, #12]
   2f2ec:	str	r4, [sp, #4]
   2f2f0:	str	r4, [sp, #8]
   2f2f4:	bl	120ac <__getdelim@plt>
   2f2f8:	subs	r3, r0, #0
   2f2fc:	ble	2f328 <__assert_fail@plt+0x1cb8c>
   2f300:	ldr	r0, [sp, #4]
   2f304:	sub	r3, r3, #1
   2f308:	ldrb	r2, [r0, r3]
   2f30c:	cmp	r2, #10
   2f310:	strbeq	r4, [r0, r3]
   2f314:	ldreq	r0, [sp, #4]
   2f318:	bl	125ec <rpmatch@plt>
   2f31c:	cmp	r0, #0
   2f320:	movle	r4, #0
   2f324:	movgt	r4, #1
   2f328:	ldr	r0, [sp, #4]
   2f32c:	bl	12154 <free@plt>
   2f330:	ldr	r2, [sp, #12]
   2f334:	ldr	r3, [r5]
   2f338:	mov	r0, r4
   2f33c:	cmp	r2, r3
   2f340:	bne	2f34c <__assert_fail@plt+0x1cbb0>
   2f344:	add	sp, sp, #20
   2f348:	pop	{r4, r5, pc}
   2f34c:	bl	12244 <__stack_chk_fail@plt>
   2f350:	andeq	fp, r5, r0, ror #24
   2f354:	andeq	ip, r5, r0, asr #10
   2f358:	cmp	r0, #0
   2f35c:	bxlt	lr
   2f360:	push	{r4, lr}
   2f364:	bl	12748 <close@plt>
   2f368:	cmp	r0, #0
   2f36c:	popeq	{r4, pc}
   2f370:	ldr	r3, [pc, #12]	; 2f384 <__assert_fail@plt+0x1cbe8>
   2f374:	mov	r2, #64	; 0x40
   2f378:	ldr	r1, [pc, #8]	; 2f388 <__assert_fail@plt+0x1cbec>
   2f37c:	ldr	r0, [pc, #8]	; 2f38c <__assert_fail@plt+0x1cbf0>
   2f380:	bl	1279c <__assert_fail@plt>
   2f384:	andeq	sl, r4, r8, lsl #12
   2f388:	andeq	sl, r4, r0, lsr #12
   2f38c:	andeq	sl, r4, r0, lsr r6
   2f390:	push	{r4, r5, r6, lr}
   2f394:	mov	r2, #18688	; 0x4900
   2f398:	mov	r4, r0
   2f39c:	ldr	r0, [r0]
   2f3a0:	bl	124c0 <openat64@plt>
   2f3a4:	subs	r5, r0, #0
   2f3a8:	blt	2f3c0 <__assert_fail@plt+0x1cc24>
   2f3ac:	ldr	r0, [r4]
   2f3b0:	bl	2f358 <__assert_fail@plt+0x1cbbc>
   2f3b4:	str	r5, [r4]
   2f3b8:	mov	r0, #0
   2f3bc:	pop	{r4, r5, r6, pc}
   2f3c0:	mvn	r0, #0
   2f3c4:	pop	{r4, r5, r6, pc}
   2f3c8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f3cc:	sub	sp, sp, #8
   2f3d0:	ldr	r9, [pc, #592]	; 2f628 <__assert_fail@plt+0x1ce8c>
   2f3d4:	mov	r7, r0
   2f3d8:	ldr	r3, [r9]
   2f3dc:	str	r3, [sp, #4]
   2f3e0:	bl	122a4 <chdir@plt>
   2f3e4:	subs	r4, r0, #0
   2f3e8:	beq	2f4e8 <__assert_fail@plt+0x1cd4c>
   2f3ec:	bl	124d8 <__errno_location@plt>
   2f3f0:	ldr	r3, [r0]
   2f3f4:	mov	sl, r0
   2f3f8:	cmp	r3, #36	; 0x24
   2f3fc:	bne	2f4e8 <__assert_fail@plt+0x1cd4c>
   2f400:	mov	r0, r7
   2f404:	bl	1249c <strlen@plt>
   2f408:	mvn	r3, #99	; 0x63
   2f40c:	str	r3, [sp]
   2f410:	subs	r6, r0, #0
   2f414:	beq	2f614 <__assert_fail@plt+0x1ce78>
   2f418:	cmp	r6, #4096	; 0x1000
   2f41c:	bcc	2f600 <__assert_fail@plt+0x1ce64>
   2f420:	ldr	r1, [pc, #516]	; 2f62c <__assert_fail@plt+0x1ce90>
   2f424:	mov	r0, r7
   2f428:	bl	12790 <strspn@plt>
   2f42c:	cmp	r0, #2
   2f430:	mov	r5, r0
   2f434:	beq	2f534 <__assert_fail@plt+0x1cd98>
   2f438:	cmp	r0, #0
   2f43c:	moveq	r5, r7
   2f440:	bne	2f504 <__assert_fail@plt+0x1cd68>
   2f444:	ldrb	r3, [r5]
   2f448:	cmp	r3, #47	; 0x2f
   2f44c:	beq	2f5ec <__assert_fail@plt+0x1ce50>
   2f450:	add	r7, r7, r6
   2f454:	cmp	r5, r7
   2f458:	bhi	2f5d8 <__assert_fail@plt+0x1ce3c>
   2f45c:	ldr	r6, [pc, #460]	; 2f630 <__assert_fail@plt+0x1ce94>
   2f460:	sub	r3, r7, r5
   2f464:	cmp	r3, r6
   2f468:	ble	2f588 <__assert_fail@plt+0x1cdec>
   2f46c:	ldr	r8, [pc, #440]	; 2f62c <__assert_fail@plt+0x1ce90>
   2f470:	b	2f4c4 <__assert_fail@plt+0x1cd28>
   2f474:	sub	r3, r4, r5
   2f478:	cmp	r3, r6
   2f47c:	mov	r3, #0
   2f480:	strb	r3, [r4]
   2f484:	bgt	2f5c0 <__assert_fail@plt+0x1ce24>
   2f488:	mov	r1, r5
   2f48c:	mov	r0, sp
   2f490:	bl	2f390 <__assert_fail@plt+0x1cbf4>
   2f494:	mov	r3, #47	; 0x2f
   2f498:	strb	r3, [r4]
   2f49c:	cmp	r0, #0
   2f4a0:	bne	2f51c <__assert_fail@plt+0x1cd80>
   2f4a4:	add	r4, r4, #1
   2f4a8:	mov	r0, r4
   2f4ac:	mov	r1, r8
   2f4b0:	bl	12790 <strspn@plt>
   2f4b4:	add	r5, r4, r0
   2f4b8:	sub	r3, r7, r5
   2f4bc:	cmp	r3, r6
   2f4c0:	ble	2f588 <__assert_fail@plt+0x1cdec>
   2f4c4:	mov	r2, #4096	; 0x1000
   2f4c8:	mov	r1, #47	; 0x2f
   2f4cc:	mov	r0, r5
   2f4d0:	bl	124cc <memrchr@plt>
   2f4d4:	subs	r4, r0, #0
   2f4d8:	bne	2f474 <__assert_fail@plt+0x1ccd8>
   2f4dc:	mov	r3, #36	; 0x24
   2f4e0:	str	r3, [sl]
   2f4e4:	mvn	r4, #0
   2f4e8:	ldr	r2, [sp, #4]
   2f4ec:	ldr	r3, [r9]
   2f4f0:	mov	r0, r4
   2f4f4:	cmp	r2, r3
   2f4f8:	bne	2f5d4 <__assert_fail@plt+0x1ce38>
   2f4fc:	add	sp, sp, #8
   2f500:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f504:	ldr	r1, [pc, #288]	; 2f62c <__assert_fail@plt+0x1ce90>
   2f508:	mov	r0, sp
   2f50c:	bl	2f390 <__assert_fail@plt+0x1cbf4>
   2f510:	cmp	r0, #0
   2f514:	addeq	r5, r7, r5
   2f518:	beq	2f444 <__assert_fail@plt+0x1cca8>
   2f51c:	ldr	r5, [sl]
   2f520:	ldr	r0, [sp]
   2f524:	bl	2f358 <__assert_fail@plt+0x1cbbc>
   2f528:	mvn	r4, #0
   2f52c:	str	r5, [sl]
   2f530:	b	2f4e8 <__assert_fail@plt+0x1cd4c>
   2f534:	sub	r2, r6, #3
   2f538:	mov	r1, #47	; 0x2f
   2f53c:	add	r0, r7, #3
   2f540:	bl	1258c <memchr@plt>
   2f544:	subs	r4, r0, #0
   2f548:	beq	2f4e4 <__assert_fail@plt+0x1cd48>
   2f54c:	mov	r3, #0
   2f550:	strb	r3, [r4]
   2f554:	mov	r1, r7
   2f558:	mov	r0, sp
   2f55c:	bl	2f390 <__assert_fail@plt+0x1cbf4>
   2f560:	mov	r3, #47	; 0x2f
   2f564:	strb	r3, [r4]
   2f568:	cmp	r0, #0
   2f56c:	bne	2f51c <__assert_fail@plt+0x1cd80>
   2f570:	add	r4, r4, #1
   2f574:	mov	r0, r4
   2f578:	ldr	r1, [pc, #172]	; 2f62c <__assert_fail@plt+0x1ce90>
   2f57c:	bl	12790 <strspn@plt>
   2f580:	add	r5, r4, r0
   2f584:	b	2f444 <__assert_fail@plt+0x1cca8>
   2f588:	cmp	r7, r5
   2f58c:	bls	2f5a4 <__assert_fail@plt+0x1ce08>
   2f590:	mov	r1, r5
   2f594:	mov	r0, sp
   2f598:	bl	2f390 <__assert_fail@plt+0x1cbf4>
   2f59c:	cmp	r0, #0
   2f5a0:	bne	2f51c <__assert_fail@plt+0x1cd80>
   2f5a4:	ldr	r0, [sp]
   2f5a8:	bl	126a0 <fchdir@plt>
   2f5ac:	subs	r4, r0, #0
   2f5b0:	bne	2f51c <__assert_fail@plt+0x1cd80>
   2f5b4:	ldr	r0, [sp]
   2f5b8:	bl	2f358 <__assert_fail@plt+0x1cbbc>
   2f5bc:	b	2f4e8 <__assert_fail@plt+0x1cd4c>
   2f5c0:	ldr	r3, [pc, #108]	; 2f634 <__assert_fail@plt+0x1ce98>
   2f5c4:	mov	r2, #179	; 0xb3
   2f5c8:	ldr	r1, [pc, #104]	; 2f638 <__assert_fail@plt+0x1ce9c>
   2f5cc:	ldr	r0, [pc, #104]	; 2f63c <__assert_fail@plt+0x1cea0>
   2f5d0:	bl	1279c <__assert_fail@plt>
   2f5d4:	bl	12244 <__stack_chk_fail@plt>
   2f5d8:	ldr	r3, [pc, #84]	; 2f634 <__assert_fail@plt+0x1ce98>
   2f5dc:	mov	r2, #163	; 0xa3
   2f5e0:	ldr	r1, [pc, #80]	; 2f638 <__assert_fail@plt+0x1ce9c>
   2f5e4:	ldr	r0, [pc, #84]	; 2f640 <__assert_fail@plt+0x1cea4>
   2f5e8:	bl	1279c <__assert_fail@plt>
   2f5ec:	ldr	r3, [pc, #64]	; 2f634 <__assert_fail@plt+0x1ce98>
   2f5f0:	mov	r2, #162	; 0xa2
   2f5f4:	ldr	r1, [pc, #60]	; 2f638 <__assert_fail@plt+0x1ce9c>
   2f5f8:	ldr	r0, [pc, #68]	; 2f644 <__assert_fail@plt+0x1cea8>
   2f5fc:	bl	1279c <__assert_fail@plt>
   2f600:	ldr	r3, [pc, #44]	; 2f634 <__assert_fail@plt+0x1ce98>
   2f604:	mov	r2, #127	; 0x7f
   2f608:	ldr	r1, [pc, #40]	; 2f638 <__assert_fail@plt+0x1ce9c>
   2f60c:	ldr	r0, [pc, #52]	; 2f648 <__assert_fail@plt+0x1ceac>
   2f610:	bl	1279c <__assert_fail@plt>
   2f614:	ldr	r3, [pc, #24]	; 2f634 <__assert_fail@plt+0x1ce98>
   2f618:	mov	r2, #126	; 0x7e
   2f61c:	ldr	r1, [pc, #20]	; 2f638 <__assert_fail@plt+0x1ce9c>
   2f620:	ldr	r0, [pc, #36]	; 2f64c <__assert_fail@plt+0x1ceb0>
   2f624:	bl	1279c <__assert_fail@plt>
   2f628:	andeq	fp, r5, r0, ror #24
   2f62c:	andeq	sl, r4, ip, ror #24
   2f630:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   2f634:	andeq	sl, r4, r4, lsl r6
   2f638:	andeq	sl, r4, r0, lsr #12
   2f63c:	andeq	sl, r4, r0, ror r6
   2f640:	andeq	sl, r4, r0, ror #12
   2f644:	andeq	sl, r4, r4, asr r6
   2f648:	andeq	sl, r4, r8, asr #12
   2f64c:	andeq	sl, r4, r0, asr #12
   2f650:	push	{r1, r2, r3}
   2f654:	push	{r4, r5, r6, r7, r8, lr}
   2f658:	sub	sp, sp, #12
   2f65c:	ldr	r4, [pc, #476]	; 2f840 <__assert_fail@plt+0x1d0a4>
   2f660:	ldr	r1, [sp, #36]	; 0x24
   2f664:	add	r2, sp, #40	; 0x28
   2f668:	ldr	r3, [r4]
   2f66c:	cmp	r1, #0
   2f670:	str	r3, [sp, #4]
   2f674:	str	r2, [sp]
   2f678:	beq	2f758 <__assert_fail@plt+0x1cfbc>
   2f67c:	ldr	r3, [pc, #448]	; 2f844 <__assert_fail@plt+0x1d0a8>
   2f680:	mov	r6, r0
   2f684:	cmp	r1, r3
   2f688:	beq	2f768 <__assert_fail@plt+0x1cfcc>
   2f68c:	cmp	r1, #11
   2f690:	beq	2f710 <__assert_fail@plt+0x1cf74>
   2f694:	ble	2f6f0 <__assert_fail@plt+0x1cf54>
   2f698:	ldr	r2, [pc, #424]	; 2f848 <__assert_fail@plt+0x1d0ac>
   2f69c:	cmp	r1, r2
   2f6a0:	bgt	2f72c <__assert_fail@plt+0x1cf90>
   2f6a4:	cmp	r1, r3
   2f6a8:	bge	2f6b8 <__assert_fail@plt+0x1cf1c>
   2f6ac:	ldr	r3, [pc, #408]	; 2f84c <__assert_fail@plt+0x1d0b0>
   2f6b0:	cmp	r1, r3
   2f6b4:	beq	2f710 <__assert_fail@plt+0x1cf74>
   2f6b8:	ldr	r3, [sp]
   2f6bc:	mov	r0, r6
   2f6c0:	ldr	r2, [r3]
   2f6c4:	bl	125e0 <fcntl64@plt>
   2f6c8:	mov	r5, r0
   2f6cc:	ldr	r2, [sp, #4]
   2f6d0:	ldr	r3, [r4]
   2f6d4:	mov	r0, r5
   2f6d8:	cmp	r2, r3
   2f6dc:	bne	2f83c <__assert_fail@plt+0x1d0a0>
   2f6e0:	add	sp, sp, #12
   2f6e4:	pop	{r4, r5, r6, r7, r8, lr}
   2f6e8:	add	sp, sp, #12
   2f6ec:	bx	lr
   2f6f0:	cmp	r1, #4
   2f6f4:	beq	2f6b8 <__assert_fail@plt+0x1cf1c>
   2f6f8:	bgt	2f720 <__assert_fail@plt+0x1cf84>
   2f6fc:	cmp	r1, #2
   2f700:	beq	2f6b8 <__assert_fail@plt+0x1cf1c>
   2f704:	bgt	2f710 <__assert_fail@plt+0x1cf74>
   2f708:	cmp	r1, #1
   2f70c:	bne	2f6b8 <__assert_fail@plt+0x1cf1c>
   2f710:	mov	r0, r6
   2f714:	bl	125e0 <fcntl64@plt>
   2f718:	mov	r5, r0
   2f71c:	b	2f6cc <__assert_fail@plt+0x1cf30>
   2f720:	cmp	r1, #9
   2f724:	bne	2f6b8 <__assert_fail@plt+0x1cf1c>
   2f728:	b	2f710 <__assert_fail@plt+0x1cf74>
   2f72c:	ldr	r3, [pc, #284]	; 2f850 <__assert_fail@plt+0x1d0b4>
   2f730:	cmp	r1, r3
   2f734:	beq	2f6b8 <__assert_fail@plt+0x1cf1c>
   2f738:	blt	2f710 <__assert_fail@plt+0x1cf74>
   2f73c:	add	r3, r3, #1
   2f740:	cmp	r1, r3
   2f744:	bne	2f6b8 <__assert_fail@plt+0x1cf1c>
   2f748:	mov	r0, r6
   2f74c:	bl	125e0 <fcntl64@plt>
   2f750:	mov	r5, r0
   2f754:	b	2f6cc <__assert_fail@plt+0x1cf30>
   2f758:	ldr	r2, [sp, #40]	; 0x28
   2f75c:	bl	125e0 <fcntl64@plt>
   2f760:	mov	r5, r0
   2f764:	b	2f6cc <__assert_fail@plt+0x1cf30>
   2f768:	ldr	r7, [pc, #228]	; 2f854 <__assert_fail@plt+0x1d0b8>
   2f76c:	ldr	r8, [r2]
   2f770:	add	r2, sp, #44	; 0x2c
   2f774:	ldr	r3, [r7]
   2f778:	str	r2, [sp]
   2f77c:	cmp	r3, #0
   2f780:	mov	r2, r8
   2f784:	blt	2f7a0 <__assert_fail@plt+0x1d004>
   2f788:	bl	125e0 <fcntl64@plt>
   2f78c:	subs	r5, r0, #0
   2f790:	blt	2f808 <__assert_fail@plt+0x1d06c>
   2f794:	mov	r3, #1
   2f798:	str	r3, [r7]
   2f79c:	b	2f6cc <__assert_fail@plt+0x1cf30>
   2f7a0:	mov	r1, #0
   2f7a4:	bl	125e0 <fcntl64@plt>
   2f7a8:	subs	r5, r0, #0
   2f7ac:	blt	2f6cc <__assert_fail@plt+0x1cf30>
   2f7b0:	ldr	r3, [r7]
   2f7b4:	cmn	r3, #1
   2f7b8:	bne	2f6cc <__assert_fail@plt+0x1cf30>
   2f7bc:	mov	r1, #1
   2f7c0:	mov	r0, r5
   2f7c4:	bl	125e0 <fcntl64@plt>
   2f7c8:	subs	r2, r0, #0
   2f7cc:	blt	2f7e8 <__assert_fail@plt+0x1d04c>
   2f7d0:	orr	r2, r2, #1
   2f7d4:	mov	r1, #2
   2f7d8:	mov	r0, r5
   2f7dc:	bl	125e0 <fcntl64@plt>
   2f7e0:	cmn	r0, #1
   2f7e4:	bne	2f6cc <__assert_fail@plt+0x1cf30>
   2f7e8:	bl	124d8 <__errno_location@plt>
   2f7ec:	mov	r6, r0
   2f7f0:	mov	r0, r5
   2f7f4:	ldr	r7, [r6]
   2f7f8:	mvn	r5, #0
   2f7fc:	bl	12748 <close@plt>
   2f800:	str	r7, [r6]
   2f804:	b	2f6cc <__assert_fail@plt+0x1cf30>
   2f808:	bl	124d8 <__errno_location@plt>
   2f80c:	ldr	r3, [r0]
   2f810:	cmp	r3, #22
   2f814:	bne	2f794 <__assert_fail@plt+0x1cff8>
   2f818:	mov	r2, r8
   2f81c:	mov	r0, r6
   2f820:	mov	r1, #0
   2f824:	bl	125e0 <fcntl64@plt>
   2f828:	subs	r5, r0, #0
   2f82c:	mvnge	r3, #0
   2f830:	strge	r3, [r7]
   2f834:	bge	2f7bc <__assert_fail@plt+0x1d020>
   2f838:	b	2f6cc <__assert_fail@plt+0x1cf30>
   2f83c:	bl	12244 <__stack_chk_fail@plt>
   2f840:	andeq	fp, r5, r0, ror #24
   2f844:	andeq	r0, r0, r6, lsl #8
   2f848:	andeq	r0, r0, r7, lsl #8
   2f84c:	andeq	r0, r0, r1, lsl #8
   2f850:	andeq	r0, r0, r9, lsl #8
   2f854:	andeq	ip, r5, r8, lsr #28
   2f858:	push	{r4, lr}
   2f85c:	subs	r4, r0, #0
   2f860:	sub	sp, sp, #8
   2f864:	beq	2f880 <__assert_fail@plt+0x1d0e4>
   2f868:	bl	12418 <__freading@plt>
   2f86c:	cmp	r0, #0
   2f870:	beq	2f880 <__assert_fail@plt+0x1d0e4>
   2f874:	ldr	r3, [r4]
   2f878:	tst	r3, #256	; 0x100
   2f87c:	bne	2f890 <__assert_fail@plt+0x1d0f4>
   2f880:	mov	r0, r4
   2f884:	add	sp, sp, #8
   2f888:	pop	{r4, lr}
   2f88c:	b	12118 <fflush@plt>
   2f890:	mov	r3, #1
   2f894:	str	r3, [sp]
   2f898:	mov	r2, #0
   2f89c:	mov	r3, #0
   2f8a0:	mov	r0, r4
   2f8a4:	bl	2f8b8 <__assert_fail@plt+0x1d11c>
   2f8a8:	mov	r0, r4
   2f8ac:	add	sp, sp, #8
   2f8b0:	pop	{r4, lr}
   2f8b4:	b	12118 <fflush@plt>
   2f8b8:	push	{r4, r5, r6, r7, r8, lr}
   2f8bc:	sub	sp, sp, #8
   2f8c0:	ldmib	r0, {ip, lr}
   2f8c4:	mov	r4, r0
   2f8c8:	ldr	r5, [sp, #32]
   2f8cc:	cmp	lr, ip
   2f8d0:	beq	2f8e8 <__assert_fail@plt+0x1d14c>
   2f8d4:	str	r5, [sp, #32]
   2f8d8:	mov	r0, r4
   2f8dc:	add	sp, sp, #8
   2f8e0:	pop	{r4, r5, r6, r7, r8, lr}
   2f8e4:	b	125c8 <fseeko64@plt>
   2f8e8:	ldr	lr, [r0, #20]
   2f8ec:	ldr	ip, [r0, #16]
   2f8f0:	cmp	lr, ip
   2f8f4:	bne	2f8d4 <__assert_fail@plt+0x1d138>
   2f8f8:	ldr	r8, [r0, #36]	; 0x24
   2f8fc:	cmp	r8, #0
   2f900:	bne	2f8d4 <__assert_fail@plt+0x1d138>
   2f904:	mov	r6, r2
   2f908:	mov	r7, r3
   2f90c:	bl	12568 <fileno@plt>
   2f910:	mov	r2, r6
   2f914:	mov	r3, r7
   2f918:	str	r5, [sp]
   2f91c:	bl	12310 <lseek64@plt>
   2f920:	mvn	r3, #0
   2f924:	mvn	r2, #0
   2f928:	cmp	r1, r3
   2f92c:	cmpeq	r0, r2
   2f930:	beq	2f950 <__assert_fail@plt+0x1d1b4>
   2f934:	ldr	r3, [r4]
   2f938:	strd	r0, [r4, #80]	; 0x50
   2f93c:	mov	r0, r8
   2f940:	bic	r3, r3, #16
   2f944:	str	r3, [r4]
   2f948:	add	sp, sp, #8
   2f94c:	pop	{r4, r5, r6, r7, r8, pc}
   2f950:	mvn	r0, #0
   2f954:	b	2f948 <__assert_fail@plt+0x1d1ac>
   2f958:	ldrd	r2, [r1, #8]
   2f95c:	push	{r4, r5}
   2f960:	ldrd	r4, [r0, #8]
   2f964:	cmp	r5, r3
   2f968:	cmpeq	r4, r2
   2f96c:	movne	r0, #0
   2f970:	bne	2f98c <__assert_fail@plt+0x1d1f0>
   2f974:	ldrd	r4, [r0]
   2f978:	ldrd	r2, [r1]
   2f97c:	cmp	r5, r3
   2f980:	cmpeq	r4, r2
   2f984:	moveq	r0, #1
   2f988:	movne	r0, #0
   2f98c:	pop	{r4, r5}
   2f990:	bx	lr
   2f994:	push	{r4, lr}
   2f998:	mov	r2, r1
   2f99c:	mov	r3, #0
   2f9a0:	ldrd	r0, [r0, #8]
   2f9a4:	bl	43dc8 <fts_children@@Base+0x1232c>
   2f9a8:	mov	r0, r2
   2f9ac:	pop	{r4, pc}
   2f9b0:	push	{r4, lr}
   2f9b4:	mov	r2, r1
   2f9b8:	mov	r3, #0
   2f9bc:	ldrd	r0, [r0]
   2f9c0:	bl	43dc8 <fts_children@@Base+0x1232c>
   2f9c4:	mov	r0, r2
   2f9c8:	pop	{r4, pc}
   2f9cc:	push	{r4, r5}
   2f9d0:	ldrd	r2, [r1]
   2f9d4:	ldrd	r4, [r0]
   2f9d8:	cmp	r5, r3
   2f9dc:	cmpeq	r4, r2
   2f9e0:	moveq	r0, #1
   2f9e4:	movne	r0, #0
   2f9e8:	pop	{r4, r5}
   2f9ec:	bx	lr
   2f9f0:	ldr	r2, [r0]
   2f9f4:	ldr	r3, [r1]
   2f9f8:	ldrd	r0, [r2, #168]	; 0xa8
   2f9fc:	ldrd	r2, [r3, #168]	; 0xa8
   2fa00:	cmp	r1, r3
   2fa04:	cmpeq	r0, r2
   2fa08:	bcc	2fa18 <__assert_fail@plt+0x1d27c>
   2fa0c:	movhi	r0, #1
   2fa10:	movls	r0, #0
   2fa14:	bx	lr
   2fa18:	mvn	r0, #0
   2fa1c:	bx	lr
   2fa20:	ldr	r3, [r0, #40]	; 0x28
   2fa24:	push	{r4, r5, r6, r7, r8, lr}
   2fa28:	cmp	r3, r2
   2fa2c:	mov	r6, r0
   2fa30:	ldr	r7, [r0, #44]	; 0x2c
   2fa34:	mov	r5, r2
   2fa38:	mov	r4, r1
   2fa3c:	ldr	r0, [r0, #8]
   2fa40:	bcs	2fa68 <__assert_fail@plt+0x1d2cc>
   2fa44:	add	r1, r2, #40	; 0x28
   2fa48:	cmn	r1, #-1073741823	; 0xc0000001
   2fa4c:	str	r1, [r6, #40]	; 0x28
   2fa50:	bhi	2fae0 <__assert_fail@plt+0x1d344>
   2fa54:	lsl	r1, r1, #2
   2fa58:	bl	12268 <realloc@plt>
   2fa5c:	cmp	r0, #0
   2fa60:	strne	r0, [r6, #8]
   2fa64:	beq	2fadc <__assert_fail@plt+0x1d340>
   2fa68:	cmp	r4, #0
   2fa6c:	movne	r2, r0
   2fa70:	beq	2fa84 <__assert_fail@plt+0x1d2e8>
   2fa74:	str	r4, [r2], #4
   2fa78:	ldr	r4, [r4, #8]
   2fa7c:	cmp	r4, #0
   2fa80:	bne	2fa74 <__assert_fail@plt+0x1d2d8>
   2fa84:	mov	r3, r7
   2fa88:	mov	r2, #4
   2fa8c:	mov	r1, r5
   2fa90:	bl	126b8 <qsort@plt>
   2fa94:	ldr	lr, [r6, #8]
   2fa98:	subs	r3, r5, #1
   2fa9c:	ldr	r0, [lr]
   2faa0:	moveq	r2, r0
   2faa4:	beq	2fad0 <__assert_fail@plt+0x1d334>
   2faa8:	mov	ip, r0
   2faac:	mov	r2, lr
   2fab0:	b	2fab8 <__assert_fail@plt+0x1d31c>
   2fab4:	ldr	ip, [r2]
   2fab8:	ldr	r1, [r2, #4]!
   2fabc:	subs	r3, r3, #1
   2fac0:	str	r1, [ip, #8]
   2fac4:	bne	2fab4 <__assert_fail@plt+0x1d318>
   2fac8:	add	r5, lr, r5, lsl #2
   2facc:	ldr	r2, [r5, #-4]
   2fad0:	mov	r3, #0
   2fad4:	str	r3, [r2, #8]
   2fad8:	pop	{r4, r5, r6, r7, r8, pc}
   2fadc:	ldr	r0, [r6, #8]
   2fae0:	bl	12154 <free@plt>
   2fae4:	mov	r3, #0
   2fae8:	mov	r0, r4
   2faec:	str	r3, [r6, #8]
   2faf0:	str	r3, [r6, #40]	; 0x28
   2faf4:	pop	{r4, r5, r6, r7, r8, pc}
   2faf8:	add	r3, r2, #184	; 0xb8
   2fafc:	push	{r4, r5, r6, r7, r8, lr}
   2fb00:	mov	r6, r0
   2fb04:	bic	r0, r3, #7
   2fb08:	mov	r5, r2
   2fb0c:	mov	r7, r1
   2fb10:	bl	123dc <malloc@plt>
   2fb14:	subs	r4, r0, #0
   2fb18:	beq	2fb64 <__assert_fail@plt+0x1d3c8>
   2fb1c:	mov	r1, r7
   2fb20:	mov	r2, r5
   2fb24:	add	r0, r4, #176	; 0xb0
   2fb28:	bl	121a8 <memcpy@plt>
   2fb2c:	add	r0, r4, r5
   2fb30:	ldr	r1, [r6, #24]
   2fb34:	mov	r3, #0
   2fb38:	mov	r2, #3
   2fb3c:	strb	r3, [r0, #176]	; 0xb0
   2fb40:	str	r3, [r4, #32]
   2fb44:	str	r3, [r4, #12]
   2fb48:	strh	r3, [r4, #62]	; 0x3e
   2fb4c:	str	r3, [r4, #16]
   2fb50:	str	r3, [r4, #20]
   2fb54:	str	r5, [r4, #52]	; 0x34
   2fb58:	str	r6, [r4, #44]	; 0x2c
   2fb5c:	str	r1, [r4, #28]
   2fb60:	strh	r2, [r4, #64]	; 0x40
   2fb64:	mov	r0, r4
   2fb68:	pop	{r4, r5, r6, r7, r8, pc}
   2fb6c:	push	{r4, r5, r6, lr}
   2fb70:	subs	r4, r0, #0
   2fb74:	popeq	{r4, r5, r6, pc}
   2fb78:	ldr	r3, [r4, #12]
   2fb7c:	ldr	r5, [r4, #8]
   2fb80:	subs	r0, r3, #0
   2fb84:	beq	2fb8c <__assert_fail@plt+0x1d3f0>
   2fb88:	bl	12760 <closedir@plt>
   2fb8c:	mov	r0, r4
   2fb90:	bl	12154 <free@plt>
   2fb94:	subs	r4, r5, #0
   2fb98:	bne	2fb78 <__assert_fail@plt+0x1d3dc>
   2fb9c:	pop	{r4, r5, r6, pc}
   2fba0:	push	{r4, lr}
   2fba4:	mov	r4, r0
   2fba8:	mov	r0, r4
   2fbac:	bl	41690 <fts_children@@Base+0xfbf4>
   2fbb0:	cmp	r0, #0
   2fbb4:	mov	r0, r4
   2fbb8:	popne	{r4, pc}
   2fbbc:	bl	416dc <fts_children@@Base+0xfc40>
   2fbc0:	cmp	r0, #0
   2fbc4:	blt	2fba8 <__assert_fail@plt+0x1d40c>
   2fbc8:	bl	12748 <close@plt>
   2fbcc:	b	2fba8 <__assert_fail@plt+0x1d40c>
   2fbd0:	push	{r4, r5, r6, r7, r8, lr}
   2fbd4:	sub	sp, sp, #120	; 0x78
   2fbd8:	ldr	r6, [r0, #44]	; 0x2c
   2fbdc:	ldr	r5, [pc, #272]	; 2fcf4 <__assert_fail@plt+0x1d558>
   2fbe0:	ldr	r3, [r6, #48]	; 0x30
   2fbe4:	ldr	r2, [r5]
   2fbe8:	tst	r3, #512	; 0x200
   2fbec:	str	r2, [sp, #116]	; 0x74
   2fbf0:	beq	2fc74 <__assert_fail@plt+0x1d4d8>
   2fbf4:	ldr	r4, [r6, #52]	; 0x34
   2fbf8:	mov	r7, r0
   2fbfc:	cmp	r4, #0
   2fc00:	mov	r8, r1
   2fc04:	beq	2fc2c <__assert_fail@plt+0x1d490>
   2fc08:	ldrd	r2, [r7, #72]	; 0x48
   2fc0c:	add	r1, sp, #8
   2fc10:	mov	r0, r4
   2fc14:	strd	r2, [sp, #8]
   2fc18:	bl	22170 <__assert_fail@plt+0xf9d4>
   2fc1c:	cmp	r0, #0
   2fc20:	beq	2fc58 <__assert_fail@plt+0x1d4bc>
   2fc24:	ldr	r6, [r0, #8]
   2fc28:	b	2fc78 <__assert_fail@plt+0x1d4dc>
   2fc2c:	ldr	r3, [pc, #196]	; 2fcf8 <__assert_fail@plt+0x1d55c>
   2fc30:	mov	r1, r4
   2fc34:	str	r3, [sp]
   2fc38:	ldr	r2, [pc, #188]	; 2fcfc <__assert_fail@plt+0x1d560>
   2fc3c:	ldr	r3, [pc, #188]	; 2fd00 <__assert_fail@plt+0x1d564>
   2fc40:	mov	r0, #13
   2fc44:	bl	22428 <__assert_fail@plt+0xfc8c>
   2fc48:	cmp	r0, #0
   2fc4c:	mov	r4, r0
   2fc50:	str	r0, [r6, #52]	; 0x34
   2fc54:	bne	2fc08 <__assert_fail@plt+0x1d46c>
   2fc58:	cmp	r8, #0
   2fc5c:	blt	2fc74 <__assert_fail@plt+0x1d4d8>
   2fc60:	mov	r0, r8
   2fc64:	add	r1, sp, #24
   2fc68:	bl	12058 <fstatfs64@plt>
   2fc6c:	cmp	r0, #0
   2fc70:	beq	2fc94 <__assert_fail@plt+0x1d4f8>
   2fc74:	mov	r6, #0
   2fc78:	ldr	r2, [sp, #116]	; 0x74
   2fc7c:	ldr	r3, [r5]
   2fc80:	mov	r0, r6
   2fc84:	cmp	r2, r3
   2fc88:	bne	2fcec <__assert_fail@plt+0x1d550>
   2fc8c:	add	sp, sp, #120	; 0x78
   2fc90:	pop	{r4, r5, r6, r7, r8, pc}
   2fc94:	cmp	r4, #0
   2fc98:	ldr	r6, [sp, #24]
   2fc9c:	beq	2fc78 <__assert_fail@plt+0x1d4dc>
   2fca0:	mov	r0, #16
   2fca4:	bl	123dc <malloc@plt>
   2fca8:	subs	r8, r0, #0
   2fcac:	beq	2fc78 <__assert_fail@plt+0x1d4dc>
   2fcb0:	ldrd	r2, [r7, #72]	; 0x48
   2fcb4:	str	r6, [r8, #8]
   2fcb8:	mov	r0, r4
   2fcbc:	strd	r2, [r8]
   2fcc0:	mov	r1, r8
   2fcc4:	bl	22a54 <__assert_fail@plt+0x102b8>
   2fcc8:	cmp	r0, #0
   2fccc:	beq	2fce0 <__assert_fail@plt+0x1d544>
   2fcd0:	cmp	r8, r0
   2fcd4:	bne	2fcf0 <__assert_fail@plt+0x1d554>
   2fcd8:	ldr	r6, [sp, #24]
   2fcdc:	b	2fc78 <__assert_fail@plt+0x1d4dc>
   2fce0:	mov	r0, r8
   2fce4:	bl	12154 <free@plt>
   2fce8:	b	2fcd8 <__assert_fail@plt+0x1d53c>
   2fcec:	bl	12244 <__stack_chk_fail@plt>
   2fcf0:	bl	1273c <abort@plt>
   2fcf4:	andeq	fp, r5, r0, ror #24
   2fcf8:	andeq	r2, r1, r4, asr r1
   2fcfc:			; <UNDEFINED> instruction: 0x0002f9b0
   2fd00:	andeq	pc, r2, ip, asr #19
   2fd04:	push	{r4, lr}
   2fd08:	bl	2fbd0 <__assert_fail@plt+0x1d434>
   2fd0c:	ldr	r3, [pc, #112]	; 2fd84 <__assert_fail@plt+0x1d5e8>
   2fd10:	cmp	r0, r3
   2fd14:	beq	2fd74 <__assert_fail@plt+0x1d5d8>
   2fd18:	ble	2fd50 <__assert_fail@plt+0x1d5b4>
   2fd1c:	ldr	r3, [pc, #100]	; 2fd88 <__assert_fail@plt+0x1d5ec>
   2fd20:	cmp	r0, r3
   2fd24:	beq	2fd74 <__assert_fail@plt+0x1d5d8>
   2fd28:	add	r3, r3, #83886080	; 0x5000000
   2fd2c:	add	r3, r3, #4544	; 0x11c0
   2fd30:	add	r3, r3, #51	; 0x33
   2fd34:	cmp	r0, r3
   2fd38:	beq	2fd7c <__assert_fail@plt+0x1d5e0>
   2fd3c:	ldr	r3, [pc, #72]	; 2fd8c <__assert_fail@plt+0x1d5f0>
   2fd40:	cmp	r0, r3
   2fd44:	moveq	r0, #2
   2fd48:	movne	r0, #1
   2fd4c:	pop	{r4, pc}
   2fd50:	cmp	r0, #0
   2fd54:	popeq	{r4, pc}
   2fd58:	ldr	r3, [pc, #48]	; 2fd90 <__assert_fail@plt+0x1d5f4>
   2fd5c:	cmp	r0, r3
   2fd60:	beq	2fd74 <__assert_fail@plt+0x1d5d8>
   2fd64:	ldr	r3, [pc, #40]	; 2fd94 <__assert_fail@plt+0x1d5f8>
   2fd68:	subs	r0, r0, r3
   2fd6c:	movne	r0, #1
   2fd70:	pop	{r4, pc}
   2fd74:	mov	r0, #0
   2fd78:	pop	{r4, pc}
   2fd7c:	mov	r0, #2
   2fd80:	pop	{r4, pc}
   2fd84:	andeq	r9, r0, r0, lsr #31
   2fd88:	movtpl	r4, #24911	; 0x614f
   2fd8c:	rsbpl	r4, r5, #1884160	; 0x1cc000
   2fd90:	andeq	r6, r0, r9, ror #18
   2fd94:			; <UNDEFINED> instruction: 0xff534d42
   2fd98:	push	{r4, r5, r6, lr}
   2fd9c:	mov	r5, r1
   2fda0:	ldr	r1, [r0, #32]
   2fda4:	cmn	r1, #100	; 0x64
   2fda8:	sub	r3, r1, r5
   2fdac:	clz	r3, r3
   2fdb0:	lsr	r3, r3, #5
   2fdb4:	moveq	r3, #0
   2fdb8:	cmp	r3, #0
   2fdbc:	bne	2fe1c <__assert_fail@plt+0x1d680>
   2fdc0:	cmp	r2, #0
   2fdc4:	mov	r4, r0
   2fdc8:	bne	2fdf4 <__assert_fail@plt+0x1d658>
   2fdcc:	ldr	r3, [r0, #48]	; 0x30
   2fdd0:	lsr	r3, r3, #2
   2fdd4:	eor	r3, r3, #1
   2fdd8:	cmp	r1, #0
   2fddc:	movlt	r3, #0
   2fde0:	andge	r3, r3, #1
   2fde4:	cmp	r3, #0
   2fde8:	bne	2fe10 <__assert_fail@plt+0x1d674>
   2fdec:	str	r5, [r4, #32]
   2fdf0:	pop	{r4, r5, r6, pc}
   2fdf4:	add	r0, r0, #60	; 0x3c
   2fdf8:	bl	41698 <fts_children@@Base+0xfbfc>
   2fdfc:	cmp	r0, #0
   2fe00:	blt	2fdec <__assert_fail@plt+0x1d650>
   2fe04:	bl	12748 <close@plt>
   2fe08:	str	r5, [r4, #32]
   2fe0c:	pop	{r4, r5, r6, pc}
   2fe10:	mov	r0, r1
   2fe14:	bl	12748 <close@plt>
   2fe18:	b	2fe08 <__assert_fail@plt+0x1d66c>
   2fe1c:	bl	1273c <abort@plt>
   2fe20:	ldr	r3, [r0, #48]	; 0x30
   2fe24:	push	{r4, r5, r6, lr}
   2fe28:	ands	r5, r3, #4
   2fe2c:	mov	r4, r0
   2fe30:	movne	r5, #0
   2fe34:	bne	2fe4c <__assert_fail@plt+0x1d6b0>
   2fe38:	tst	r3, #512	; 0x200
   2fe3c:	beq	2fe5c <__assert_fail@plt+0x1d6c0>
   2fe40:	mov	r2, #1
   2fe44:	mvn	r1, #99	; 0x63
   2fe48:	bl	2fd98 <__assert_fail@plt+0x1d5fc>
   2fe4c:	add	r0, r4, #60	; 0x3c
   2fe50:	bl	2fba0 <__assert_fail@plt+0x1d404>
   2fe54:	mov	r0, r5
   2fe58:	pop	{r4, r5, r6, pc}
   2fe5c:	ldr	r0, [r0, #28]
   2fe60:	bl	126a0 <fchdir@plt>
   2fe64:	adds	r5, r0, #0
   2fe68:	movne	r5, #1
   2fe6c:	b	2fe4c <__assert_fail@plt+0x1d6b0>
   2fe70:	push	{r4, r5, r6, lr}
   2fe74:	mov	r4, r2
   2fe78:	ldr	r2, [r2, #48]	; 0x30
   2fe7c:	mov	r6, r1
   2fe80:	cmp	r2, #0
   2fe84:	ldr	ip, [r1]
   2fe88:	sub	sp, sp, #8
   2fe8c:	add	r5, r4, #72	; 0x48
   2fe90:	ldr	r1, [r4, #24]
   2fe94:	bne	2fef4 <__assert_fail@plt+0x1d758>
   2fe98:	tst	ip, #1
   2fe9c:	beq	2fef4 <__assert_fail@plt+0x1d758>
   2fea0:	mov	r2, r5
   2fea4:	mov	r0, #3
   2fea8:	bl	126f4 <__xstat64@plt>
   2feac:	cmp	r0, #0
   2feb0:	beq	2ff24 <__assert_fail@plt+0x1d788>
   2feb4:	bl	124d8 <__errno_location@plt>
   2feb8:	ldr	r3, [r0]
   2febc:	mov	r6, r0
   2fec0:	cmp	r3, #2
   2fec4:	bne	2ff58 <__assert_fail@plt+0x1d7bc>
   2fec8:	mov	r2, r5
   2fecc:	ldr	r1, [r4, #24]
   2fed0:	mov	r0, #3
   2fed4:	bl	12754 <__lxstat64@plt>
   2fed8:	cmp	r0, #0
   2fedc:	ldrne	r3, [r6]
   2fee0:	bne	2ff58 <__assert_fail@plt+0x1d7bc>
   2fee4:	str	r0, [r6]
   2fee8:	mov	r0, #13
   2feec:	add	sp, sp, #8
   2fef0:	pop	{r4, r5, r6, pc}
   2fef4:	lsl	ip, ip, #30
   2fef8:	orrs	r3, r3, ip, lsr #31
   2fefc:	bne	2fea0 <__assert_fail@plt+0x1d704>
   2ff00:	mov	r3, #256	; 0x100
   2ff04:	mov	r2, r1
   2ff08:	str	r3, [sp]
   2ff0c:	mov	r1, r0
   2ff10:	mov	r3, r5
   2ff14:	mov	r0, #3
   2ff18:	bl	122b0 <__fxstatat64@plt>
   2ff1c:	cmp	r0, #0
   2ff20:	bne	2ff50 <__assert_fail@plt+0x1d7b4>
   2ff24:	ldr	r3, [r4, #88]	; 0x58
   2ff28:	and	r3, r3, #61440	; 0xf000
   2ff2c:	cmp	r3, #16384	; 0x4000
   2ff30:	beq	2ff78 <__assert_fail@plt+0x1d7dc>
   2ff34:	cmp	r3, #40960	; 0xa000
   2ff38:	beq	2fff4 <__assert_fail@plt+0x1d858>
   2ff3c:	cmp	r3, #32768	; 0x8000
   2ff40:	movne	r0, #3
   2ff44:	moveq	r0, #8
   2ff48:	add	sp, sp, #8
   2ff4c:	pop	{r4, r5, r6, pc}
   2ff50:	bl	124d8 <__errno_location@plt>
   2ff54:	ldr	r3, [r0]
   2ff58:	str	r3, [r4, #32]
   2ff5c:	mov	r0, r5
   2ff60:	mov	r2, #104	; 0x68
   2ff64:	mov	r1, #0
   2ff68:	bl	12514 <memset@plt>
   2ff6c:	mov	r0, #10
   2ff70:	add	sp, sp, #8
   2ff74:	pop	{r4, r5, r6, pc}
   2ff78:	ldr	r3, [r4, #92]	; 0x5c
   2ff7c:	cmp	r3, #1
   2ff80:	bls	2ffec <__assert_fail@plt+0x1d850>
   2ff84:	ldr	r2, [r4, #48]	; 0x30
   2ff88:	cmp	r2, #0
   2ff8c:	ble	2ffec <__assert_fail@plt+0x1d850>
   2ff90:	ldr	r2, [r6]
   2ff94:	tst	r2, #32
   2ff98:	subeq	r3, r3, #2
   2ff9c:	ldrb	r2, [r4, #176]	; 0xb0
   2ffa0:	str	r3, [r4, #56]	; 0x38
   2ffa4:	cmp	r2, #46	; 0x2e
   2ffa8:	bne	2ffcc <__assert_fail@plt+0x1d830>
   2ffac:	ldrb	r3, [r4, #177]	; 0xb1
   2ffb0:	cmp	r3, #0
   2ffb4:	beq	2ffd8 <__assert_fail@plt+0x1d83c>
   2ffb8:	ldr	r3, [r4, #176]	; 0xb0
   2ffbc:	bic	r3, r3, #-16777216	; 0xff000000
   2ffc0:	bic	r3, r3, #255	; 0xff
   2ffc4:	cmp	r3, #11776	; 0x2e00
   2ffc8:	beq	2ffd8 <__assert_fail@plt+0x1d83c>
   2ffcc:	mov	r0, #1
   2ffd0:	add	sp, sp, #8
   2ffd4:	pop	{r4, r5, r6, pc}
   2ffd8:	ldr	r3, [r4, #48]	; 0x30
   2ffdc:	cmp	r3, #0
   2ffe0:	moveq	r0, #1
   2ffe4:	movne	r0, #5
   2ffe8:	b	2ff48 <__assert_fail@plt+0x1d7ac>
   2ffec:	mvn	r3, #0
   2fff0:	b	2ff9c <__assert_fail@plt+0x1d800>
   2fff4:	mov	r0, #12
   2fff8:	b	2ff48 <__assert_fail@plt+0x1d7ac>
   2fffc:	ldr	ip, [r1]
   30000:	push	{r4, r5, r6, lr}
   30004:	add	r3, ip, #256	; 0x100
   30008:	add	r2, r3, r2
   3000c:	cmp	ip, r2
   30010:	mov	r4, r0
   30014:	ldr	r0, [r0]
   30018:	bhi	30040 <__assert_fail@plt+0x1d8a4>
   3001c:	str	r2, [r1]
   30020:	mov	r1, r2
   30024:	bl	12268 <realloc@plt>
   30028:	subs	r5, r0, #0
   3002c:	movne	r3, #1
   30030:	strne	r5, [r4]
   30034:	beq	30064 <__assert_fail@plt+0x1d8c8>
   30038:	mov	r0, r3
   3003c:	pop	{r4, r5, r6, pc}
   30040:	mov	r5, #0
   30044:	bl	12154 <free@plt>
   30048:	str	r5, [r4]
   3004c:	bl	124d8 <__errno_location@plt>
   30050:	mov	r2, #36	; 0x24
   30054:	mov	r3, r5
   30058:	str	r2, [r0]
   3005c:	mov	r0, r3
   30060:	pop	{r4, r5, r6, pc}
   30064:	ldr	r0, [r4]
   30068:	bl	12154 <free@plt>
   3006c:	str	r5, [r4]
   30070:	mov	r3, r5
   30074:	b	30038 <__assert_fail@plt+0x1d89c>
   30078:	ldr	r3, [pc, #104]	; 300e8 <__assert_fail@plt+0x1d94c>
   3007c:	push	{r4, lr}
   30080:	and	r3, r3, r0
   30084:	cmp	r3, #0
   30088:	sub	sp, sp, #8
   3008c:	mov	r4, r1
   30090:	beq	300c4 <__assert_fail@plt+0x1d928>
   30094:	ldr	r2, [pc, #80]	; 300ec <__assert_fail@plt+0x1d950>
   30098:	ldr	r3, [pc, #80]	; 300f0 <__assert_fail@plt+0x1d954>
   3009c:	str	r2, [sp]
   300a0:	mov	r1, #0
   300a4:	ldr	r2, [pc, #72]	; 300f4 <__assert_fail@plt+0x1d958>
   300a8:	mov	r0, #31
   300ac:	bl	22428 <__assert_fail@plt+0xfc8c>
   300b0:	str	r0, [r4]
   300b4:	adds	r0, r0, #0
   300b8:	movne	r0, #1
   300bc:	add	sp, sp, #8
   300c0:	pop	{r4, pc}
   300c4:	mov	r0, #32
   300c8:	bl	123dc <malloc@plt>
   300cc:	cmp	r0, #0
   300d0:	str	r0, [r4]
   300d4:	beq	300bc <__assert_fail@plt+0x1d920>
   300d8:	bl	414c0 <fts_children@@Base+0xfa24>
   300dc:	mov	r0, #1
   300e0:	add	sp, sp, #8
   300e4:	pop	{r4, pc}
   300e8:	andeq	r0, r0, r2, lsl #2
   300ec:	andeq	r2, r1, r4, asr r1
   300f0:	andeq	pc, r2, r8, asr r9	; <UNPREDICTABLE>
   300f4:	muleq	r2, r4, r9
   300f8:	tst	r1, #512	; 0x200
   300fc:	lsl	r1, r1, #11
   30100:	and	r1, r1, #32768	; 0x8000
   30104:	orr	r1, r1, #540672	; 0x84000
   30108:	orr	r1, r1, #2304	; 0x900
   3010c:	mov	r3, r2
   30110:	beq	30120 <__assert_fail@plt+0x1d984>
   30114:	mov	r2, r1
   30118:	mov	r1, r3
   3011c:	b	43258 <fts_children@@Base+0x117bc>
   30120:	mov	r0, r2
   30124:	b	218a4 <__assert_fail@plt+0xf108>
   30128:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3012c:	subs	fp, r3, #0
   30130:	ldr	r5, [pc, #500]	; 3032c <__assert_fail@plt+0x1db90>
   30134:	sub	sp, sp, #116	; 0x74
   30138:	ldr	sl, [r0, #48]	; 0x30
   3013c:	ldr	r3, [r5]
   30140:	mov	r6, r0
   30144:	mov	r7, r1
   30148:	mov	r4, r2
   3014c:	and	r9, sl, #4
   30150:	str	r3, [sp, #108]	; 0x6c
   30154:	beq	30228 <__assert_fail@plt+0x1da8c>
   30158:	ldr	r1, [pc, #464]	; 30330 <__assert_fail@plt+0x1db94>
   3015c:	mov	r0, fp
   30160:	bl	120dc <strcmp@plt>
   30164:	cmp	r0, #0
   30168:	bne	30228 <__assert_fail@plt+0x1da8c>
   3016c:	cmp	r9, #0
   30170:	bne	30264 <__assert_fail@plt+0x1dac8>
   30174:	cmp	r4, #0
   30178:	bge	30318 <__assert_fail@plt+0x1db7c>
   3017c:	tst	sl, #512	; 0x200
   30180:	bne	302a4 <__assert_fail@plt+0x1db08>
   30184:	mov	r9, #1
   30188:	mov	r1, sl
   3018c:	mov	r2, fp
   30190:	ldr	r0, [r6, #32]
   30194:	bl	300f8 <__assert_fail@plt+0x1d95c>
   30198:	subs	r8, r0, #0
   3019c:	blt	3030c <__assert_fail@plt+0x1db70>
   301a0:	ldr	sl, [r6, #48]	; 0x30
   301a4:	tst	sl, #2
   301a8:	beq	30244 <__assert_fail@plt+0x1daa8>
   301ac:	mov	r2, sp
   301b0:	mov	r1, r8
   301b4:	mov	r0, #3
   301b8:	bl	122d4 <__fxstat64@plt>
   301bc:	cmp	r0, #0
   301c0:	bne	3029c <__assert_fail@plt+0x1db00>
   301c4:	ldrd	r0, [r7, #72]	; 0x48
   301c8:	ldrd	r2, [sp]
   301cc:	cmp	r1, r3
   301d0:	cmpeq	r0, r2
   301d4:	bne	30290 <__assert_fail@plt+0x1daf4>
   301d8:	ldrd	r0, [r7, #168]	; 0xa8
   301dc:	ldrd	r2, [sp, #96]	; 0x60
   301e0:	cmp	r1, r3
   301e4:	cmpeq	r0, r2
   301e8:	bne	30290 <__assert_fail@plt+0x1daf4>
   301ec:	ldr	sl, [r6, #48]	; 0x30
   301f0:	tst	sl, #512	; 0x200
   301f4:	bne	302e0 <__assert_fail@plt+0x1db44>
   301f8:	mov	r0, r8
   301fc:	bl	126a0 <fchdir@plt>
   30200:	mov	sl, r0
   30204:	cmp	r4, #0
   30208:	bge	30274 <__assert_fail@plt+0x1dad8>
   3020c:	bl	124d8 <__errno_location@plt>
   30210:	mov	r4, r0
   30214:	mov	r0, r8
   30218:	ldr	r6, [r4]
   3021c:	bl	12748 <close@plt>
   30220:	str	r6, [r4]
   30224:	b	30274 <__assert_fail@plt+0x1dad8>
   30228:	cmp	r9, #0
   3022c:	bne	30264 <__assert_fail@plt+0x1dac8>
   30230:	cmp	r4, #0
   30234:	movge	r8, r4
   30238:	blt	30188 <__assert_fail@plt+0x1d9ec>
   3023c:	tst	sl, #2
   30240:	bne	301ac <__assert_fail@plt+0x1da10>
   30244:	cmp	fp, #0
   30248:	beq	301f0 <__assert_fail@plt+0x1da54>
   3024c:	mov	r0, fp
   30250:	ldr	r1, [pc, #216]	; 30330 <__assert_fail@plt+0x1db94>
   30254:	bl	120dc <strcmp@plt>
   30258:	cmp	r0, #0
   3025c:	bne	301f0 <__assert_fail@plt+0x1da54>
   30260:	b	301ac <__assert_fail@plt+0x1da10>
   30264:	mvn	r3, r4
   30268:	lsr	r3, r3, #31
   3026c:	ands	sl, r3, sl, lsr #9
   30270:	bne	302fc <__assert_fail@plt+0x1db60>
   30274:	ldr	r2, [sp, #108]	; 0x6c
   30278:	ldr	r3, [r5]
   3027c:	mov	r0, sl
   30280:	cmp	r2, r3
   30284:	bne	30314 <__assert_fail@plt+0x1db78>
   30288:	add	sp, sp, #116	; 0x74
   3028c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30290:	bl	124d8 <__errno_location@plt>
   30294:	mov	r3, #2
   30298:	str	r3, [r0]
   3029c:	mvn	sl, #0
   302a0:	b	30204 <__assert_fail@plt+0x1da68>
   302a4:	add	r8, r6, #60	; 0x3c
   302a8:	mov	r0, r8
   302ac:	bl	41690 <fts_children@@Base+0xfbf4>
   302b0:	subs	r9, r0, #0
   302b4:	bne	30188 <__assert_fail@plt+0x1d9ec>
   302b8:	mov	r0, r8
   302bc:	bl	416dc <fts_children@@Base+0xfc40>
   302c0:	ldr	sl, [r6, #48]	; 0x30
   302c4:	subs	r8, r0, #0
   302c8:	blt	30184 <__assert_fail@plt+0x1d9e8>
   302cc:	tst	sl, #2
   302d0:	mov	r4, r8
   302d4:	mov	r9, #1
   302d8:	beq	301f0 <__assert_fail@plt+0x1da54>
   302dc:	b	301ac <__assert_fail@plt+0x1da10>
   302e0:	eor	r2, r9, #1
   302e4:	mov	r1, r8
   302e8:	uxtb	r2, r2
   302ec:	mov	r0, r6
   302f0:	bl	2fd98 <__assert_fail@plt+0x1d5fc>
   302f4:	mov	sl, #0
   302f8:	b	30274 <__assert_fail@plt+0x1dad8>
   302fc:	mov	r0, r4
   30300:	bl	12748 <close@plt>
   30304:	mov	sl, #0
   30308:	b	30274 <__assert_fail@plt+0x1dad8>
   3030c:	mvn	sl, #0
   30310:	b	30274 <__assert_fail@plt+0x1dad8>
   30314:	bl	12244 <__stack_chk_fail@plt>
   30318:	tst	sl, #2
   3031c:	mov	r8, r4
   30320:	mov	r9, #1
   30324:	beq	3024c <__assert_fail@plt+0x1dab0>
   30328:	b	301ac <__assert_fail@plt+0x1da10>
   3032c:	andeq	fp, r5, r0, ror #24
   30330:			; <UNDEFINED> instruction: 0x0004a6b4
   30334:	ldr	r3, [pc, #164]	; 303e0 <__assert_fail@plt+0x1dc44>
   30338:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3033c:	and	r3, r3, r0
   30340:	cmp	r3, #0
   30344:	mov	sl, r1
   30348:	mov	r8, r2
   3034c:	beq	303b4 <__assert_fail@plt+0x1dc18>
   30350:	mov	r0, #24
   30354:	bl	123dc <malloc@plt>
   30358:	subs	r9, r0, #0
   3035c:	beq	303d8 <__assert_fail@plt+0x1dc3c>
   30360:	ldrd	r4, [r8, #168]	; 0xa8
   30364:	ldrd	r6, [r8, #72]	; 0x48
   30368:	str	r8, [r9, #16]
   3036c:	strd	r4, [r9, #8]
   30370:	ldr	r0, [sl]
   30374:	strd	r6, [r9]
   30378:	mov	r1, r9
   3037c:	bl	22a54 <__assert_fail@plt+0x102b8>
   30380:	cmp	r9, r0
   30384:	mov	r4, r0
   30388:	beq	303ac <__assert_fail@plt+0x1dc10>
   3038c:	mov	r0, r9
   30390:	bl	12154 <free@plt>
   30394:	cmp	r4, #0
   30398:	beq	303d8 <__assert_fail@plt+0x1dc3c>
   3039c:	ldr	r2, [r4, #16]
   303a0:	mov	r3, #2
   303a4:	str	r2, [r8]
   303a8:	strh	r3, [r8, #60]	; 0x3c
   303ac:	mov	r0, #1
   303b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   303b4:	ldr	r0, [r1]
   303b8:	add	r1, r2, #72	; 0x48
   303bc:	bl	414e4 <fts_children@@Base+0xfa48>
   303c0:	cmp	r0, #0
   303c4:	beq	303ac <__assert_fail@plt+0x1dc10>
   303c8:	mov	r3, #2
   303cc:	str	r8, [r8]
   303d0:	strh	r3, [r8, #60]	; 0x3c
   303d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   303d8:	mov	r0, #0
   303dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   303e0:	andeq	r0, r0, r2, lsl #2
   303e4:	push	{r4, r5, r6, lr}
   303e8:	sub	sp, sp, #32
   303ec:	ldr	r6, [pc, #192]	; 304b4 <__assert_fail@plt+0x1dd18>
   303f0:	ldr	r3, [pc, #192]	; 304b8 <__assert_fail@plt+0x1dd1c>
   303f4:	ldr	ip, [r6]
   303f8:	and	r3, r3, r0
   303fc:	cmp	r3, #0
   30400:	str	ip, [sp, #28]
   30404:	bne	3045c <__assert_fail@plt+0x1dcc0>
   30408:	ldr	r3, [r2, #4]
   3040c:	cmp	r3, #0
   30410:	beq	30444 <__assert_fail@plt+0x1dca8>
   30414:	ldr	r0, [r3, #48]	; 0x30
   30418:	cmp	r0, #0
   3041c:	blt	30444 <__assert_fail@plt+0x1dca8>
   30420:	ldr	ip, [r1]
   30424:	ldrd	r0, [ip, #16]
   30428:	orrs	r1, r0, r1
   3042c:	beq	304b0 <__assert_fail@plt+0x1dd14>
   30430:	ldrd	r4, [ip]
   30434:	ldrd	r0, [r2, #168]	; 0xa8
   30438:	cmp	r5, r1
   3043c:	cmpeq	r4, r0
   30440:	beq	30488 <__assert_fail@plt+0x1dcec>
   30444:	ldr	r2, [sp, #28]
   30448:	ldr	r3, [r6]
   3044c:	cmp	r2, r3
   30450:	bne	304ac <__assert_fail@plt+0x1dd10>
   30454:	add	sp, sp, #32
   30458:	pop	{r4, r5, r6, pc}
   3045c:	ldrd	r4, [r2, #72]	; 0x48
   30460:	ldrd	r2, [r2, #168]	; 0xa8
   30464:	ldr	r0, [r1]
   30468:	mov	r1, sp
   3046c:	strd	r4, [sp]
   30470:	strd	r2, [sp, #8]
   30474:	bl	22aac <__assert_fail@plt+0x10310>
   30478:	cmp	r0, #0
   3047c:	beq	304b0 <__assert_fail@plt+0x1dd14>
   30480:	bl	12154 <free@plt>
   30484:	b	30444 <__assert_fail@plt+0x1dca8>
   30488:	ldrd	r4, [r2, #72]	; 0x48
   3048c:	ldrd	r0, [ip, #8]
   30490:	cmp	r1, r5
   30494:	cmpeq	r0, r4
   30498:	ldrdeq	r0, [r3, #72]	; 0x48
   3049c:	ldrdeq	r2, [r3, #168]	; 0xa8
   304a0:	strdeq	r0, [ip, #8]
   304a4:	strdeq	r2, [ip]
   304a8:	b	30444 <__assert_fail@plt+0x1dca8>
   304ac:	bl	12244 <__stack_chk_fail@plt>
   304b0:	bl	1273c <abort@plt>
   304b4:	andeq	fp, r5, r0, ror #24
   304b8:	andeq	r0, r0, r2, lsl #2
   304bc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   304c0:	mov	r5, r0
   304c4:	ldr	r9, [r0]
   304c8:	ldr	r3, [pc, #2312]	; 30dd8 <__assert_fail@plt+0x1e63c>
   304cc:	sub	sp, sp, #60	; 0x3c
   304d0:	ldr	r0, [r9, #12]
   304d4:	ldr	r3, [r3]
   304d8:	cmp	r0, #0
   304dc:	str	r1, [sp, #32]
   304e0:	str	r0, [sp, #40]	; 0x28
   304e4:	str	r3, [sp, #52]	; 0x34
   304e8:	beq	307e4 <__assert_fail@plt+0x1e048>
   304ec:	bl	12694 <dirfd@plt>
   304f0:	cmp	r0, #0
   304f4:	str	r0, [sp, #48]	; 0x30
   304f8:	blt	30cc4 <__assert_fail@plt+0x1e528>
   304fc:	ldr	r3, [r5, #44]	; 0x2c
   30500:	cmp	r3, #0
   30504:	beq	30bbc <__assert_fail@plt+0x1e420>
   30508:	ldr	r0, [r5, #48]	; 0x30
   3050c:	mvn	r3, #0
   30510:	str	r3, [sp, #16]
   30514:	mov	r3, #1
   30518:	str	r3, [sp, #44]	; 0x2c
   3051c:	ldr	r2, [r9, #40]	; 0x28
   30520:	ldr	r3, [r9, #28]
   30524:	sub	r1, r2, #1
   30528:	str	r2, [sp]
   3052c:	ldrb	r3, [r3, r1]
   30530:	str	r1, [sp, #28]
   30534:	mov	sl, #0
   30538:	cmp	r3, #47	; 0x2f
   3053c:	addne	r3, r2, #1
   30540:	strne	r3, [sp]
   30544:	strne	r2, [sp, #28]
   30548:	ands	r0, r0, #4
   3054c:	movne	r1, #47	; 0x2f
   30550:	ldrne	r3, [r5, #24]
   30554:	ldrne	r0, [sp, #28]
   30558:	streq	r0, [sp, #20]
   3055c:	addne	r2, r3, r0
   30560:	strbne	r1, [r3, r0]
   30564:	addne	r3, r2, #1
   30568:	strne	r3, [sp, #20]
   3056c:	ldr	r3, [r9, #48]	; 0x30
   30570:	ldr	fp, [r5, #36]	; 0x24
   30574:	add	r3, r3, #1
   30578:	ldr	r2, [sp]
   3057c:	str	r3, [sp, #12]
   30580:	mov	r3, sl
   30584:	str	sl, [sp, #36]	; 0x24
   30588:	sub	fp, fp, r2
   3058c:	str	sl, [sp, #24]
   30590:	mov	r7, sl
   30594:	stmib	sp, {r3, r9}
   30598:	b	305e8 <__assert_fail@plt+0x1de4c>
   3059c:	mov	r3, #0
   305a0:	str	r3, [r4, #88]	; 0x58
   305a4:	mov	r2, #2
   305a8:	mov	r3, #0
   305ac:	strd	r2, [r4, #120]	; 0x78
   305b0:	ldr	r3, [sp, #4]
   305b4:	cmp	r3, #0
   305b8:	mov	r3, #0
   305bc:	str	r3, [r4, #8]
   305c0:	ldr	r3, [pc, #2068]	; 30ddc <__assert_fail@plt+0x1e640>
   305c4:	strne	r4, [sl, #8]
   305c8:	streq	r4, [sp, #4]
   305cc:	cmp	r7, r3
   305d0:	beq	306ec <__assert_fail@plt+0x1df50>
   305d4:	ldr	r3, [sp, #16]
   305d8:	add	r7, r7, #1
   305dc:	cmp	r7, r3
   305e0:	bcs	30940 <__assert_fail@plt+0x1e1a4>
   305e4:	mov	sl, r4
   305e8:	ldr	r3, [sp, #8]
   305ec:	ldr	r4, [r3, #12]
   305f0:	cmp	r4, #0
   305f4:	beq	30a88 <__assert_fail@plt+0x1e2ec>
   305f8:	bl	124d8 <__errno_location@plt>
   305fc:	mov	r3, #0
   30600:	mov	r8, r0
   30604:	mov	r0, r4
   30608:	str	r3, [r8]
   3060c:	bl	12664 <readdir64@plt>
   30610:	subs	r9, r0, #0
   30614:	beq	30b50 <__assert_fail@plt+0x1e3b4>
   30618:	ldr	r3, [r5, #48]	; 0x30
   3061c:	tst	r3, #32
   30620:	bne	30630 <__assert_fail@plt+0x1de94>
   30624:	ldrb	r3, [r9, #19]
   30628:	cmp	r3, #46	; 0x2e
   3062c:	beq	30778 <__assert_fail@plt+0x1dfdc>
   30630:	add	r4, r9, #19
   30634:	mov	r0, r4
   30638:	bl	1249c <strlen@plt>
   3063c:	mov	r1, r4
   30640:	mov	r2, r0
   30644:	mov	r6, r0
   30648:	mov	r0, r5
   3064c:	bl	2faf8 <__assert_fail@plt+0x1d35c>
   30650:	subs	r4, r0, #0
   30654:	beq	309ec <__assert_fail@plt+0x1e250>
   30658:	cmp	fp, r6
   3065c:	bls	30700 <__assert_fail@plt+0x1df64>
   30660:	ldr	r3, [sp]
   30664:	adds	r6, r3, r6
   30668:	bcs	30d8c <__assert_fail@plt+0x1e5f0>
   3066c:	ldr	r0, [r5, #48]	; 0x30
   30670:	ldr	r1, [r5]
   30674:	ldrd	r2, [r9]
   30678:	ldr	ip, [sp, #12]
   3067c:	tst	r0, #4
   30680:	str	r1, [r4, #4]
   30684:	add	r1, r4, #176	; 0xb0
   30688:	str	ip, [r4, #48]	; 0x30
   3068c:	strd	r2, [r4, #168]	; 0xa8
   30690:	str	r6, [r4, #40]	; 0x28
   30694:	streq	r1, [r4, #24]
   30698:	bne	30758 <__assert_fail@plt+0x1dfbc>
   3069c:	ldr	r3, [r5, #44]	; 0x2c
   306a0:	cmp	r3, #0
   306a4:	beq	306b0 <__assert_fail@plt+0x1df14>
   306a8:	ands	r3, r0, #1024	; 0x400
   306ac:	beq	307c4 <__assert_fail@plt+0x1e028>
   306b0:	ldrb	r2, [r9, #18]
   306b4:	and	r0, r0, #24
   306b8:	cmp	r0, #24
   306bc:	sub	r3, r2, #1
   306c0:	beq	30798 <__assert_fail@plt+0x1dffc>
   306c4:	mov	r2, #11
   306c8:	cmp	r3, #11
   306cc:	strh	r2, [r4, #60]	; 0x3c
   306d0:	bhi	3059c <__assert_fail@plt+0x1de00>
   306d4:	ldr	r2, [pc, #1796]	; 30de0 <__assert_fail@plt+0x1e644>
   306d8:	ldr	r1, [r2, r3, lsl #2]
   306dc:	mov	r2, #2
   306e0:	mov	r3, #0
   306e4:	str	r1, [r4, #88]	; 0x58
   306e8:	b	305ac <__assert_fail@plt+0x1de10>
   306ec:	ldr	r6, [r5, #44]	; 0x2c
   306f0:	cmp	r6, #0
   306f4:	beq	308f4 <__assert_fail@plt+0x1e158>
   306f8:	ldr	r7, [pc, #1764]	; 30de4 <__assert_fail@plt+0x1e648>
   306fc:	b	305e4 <__assert_fail@plt+0x1de48>
   30700:	ldr	r3, [sp, #28]
   30704:	add	r1, r5, #36	; 0x24
   30708:	add	r2, r3, #2
   3070c:	add	r2, r2, r6
   30710:	add	r0, r5, #24
   30714:	ldr	fp, [r5, #24]
   30718:	bl	2fffc <__assert_fail@plt+0x1d860>
   3071c:	cmp	r0, #0
   30720:	beq	309ec <__assert_fail@plt+0x1e250>
   30724:	ldr	r3, [r5, #24]
   30728:	cmp	r3, fp
   3072c:	beq	307dc <__assert_fail@plt+0x1e040>
   30730:	ldr	r2, [r5, #48]	; 0x30
   30734:	tst	r2, #4
   30738:	ldrne	r2, [sp]
   3073c:	addne	r3, r3, r2
   30740:	strne	r3, [sp, #20]
   30744:	ldr	fp, [r5, #36]	; 0x24
   30748:	ldr	r3, [sp]
   3074c:	str	r0, [sp, #24]
   30750:	sub	fp, fp, r3
   30754:	b	30660 <__assert_fail@plt+0x1dec4>
   30758:	ldr	r3, [r4, #28]
   3075c:	ldr	r2, [r4, #52]	; 0x34
   30760:	str	r3, [r4, #24]
   30764:	add	r2, r2, #1
   30768:	ldr	r0, [sp, #20]
   3076c:	bl	12148 <memmove@plt>
   30770:	ldr	r0, [r5, #48]	; 0x30
   30774:	b	3069c <__assert_fail@plt+0x1df00>
   30778:	ldrb	r3, [r9, #20]
   3077c:	cmp	r3, #0
   30780:	beq	30790 <__assert_fail@plt+0x1dff4>
   30784:	ldrh	r3, [r9, #20]
   30788:	cmp	r3, #46	; 0x2e
   3078c:	bne	30630 <__assert_fail@plt+0x1de94>
   30790:	mov	r4, sl
   30794:	b	305e4 <__assert_fail@plt+0x1de48>
   30798:	tst	r2, #251	; 0xfb
   3079c:	beq	306c4 <__assert_fail@plt+0x1df28>
   307a0:	mov	r2, #11
   307a4:	cmp	r3, #11
   307a8:	strh	r2, [r4, #60]	; 0x3c
   307ac:	bls	309d4 <__assert_fail@plt+0x1e238>
   307b0:	mov	r3, #0
   307b4:	str	r3, [r4, #88]	; 0x58
   307b8:	mov	r2, #1
   307bc:	mov	r3, #0
   307c0:	b	305ac <__assert_fail@plt+0x1de10>
   307c4:	mov	r2, r4
   307c8:	add	r1, r5, #48	; 0x30
   307cc:	ldr	r0, [r5, #32]
   307d0:	bl	2fe70 <__assert_fail@plt+0x1d6d4>
   307d4:	strh	r0, [r4, #60]	; 0x3c
   307d8:	b	305b0 <__assert_fail@plt+0x1de14>
   307dc:	ldr	r0, [sp, #24]
   307e0:	b	30744 <__assert_fail@plt+0x1dfa8>
   307e4:	ldr	r3, [r5, #48]	; 0x30
   307e8:	ldr	r1, [r9, #24]
   307ec:	and	r2, r3, #516	; 0x204
   307f0:	cmp	r2, #512	; 0x200
   307f4:	mvnne	r0, #99	; 0x63
   307f8:	ldreq	r0, [r5, #32]
   307fc:	ands	r2, r3, #16
   30800:	beq	30810 <__assert_fail@plt+0x1e074>
   30804:	tst	r3, #1
   30808:	moveq	r2, #32768	; 0x8000
   3080c:	bne	30a50 <__assert_fail@plt+0x1e2b4>
   30810:	add	r3, sp, #48	; 0x30
   30814:	bl	432b4 <fts_children@@Base+0x11818>
   30818:	cmp	r0, #0
   3081c:	str	r0, [sp, #4]
   30820:	str	r0, [r9, #12]
   30824:	beq	30d2c <__assert_fail@plt+0x1e590>
   30828:	ldrh	r3, [r9, #60]	; 0x3c
   3082c:	cmp	r3, #11
   30830:	beq	30c68 <__assert_fail@plt+0x1e4cc>
   30834:	ldr	r0, [r5, #48]	; 0x30
   30838:	tst	r0, #256	; 0x100
   3083c:	bne	30be4 <__assert_fail@plt+0x1e448>
   30840:	ldr	r2, [r5, #44]	; 0x2c
   30844:	ldr	r3, [pc, #1436]	; 30de8 <__assert_fail@plt+0x1e64c>
   30848:	cmp	r2, #0
   3084c:	mvnne	r3, #0
   30850:	str	r3, [sp, #16]
   30854:	ldr	r3, [sp, #32]
   30858:	cmp	r3, #2
   3085c:	beq	30bd4 <__assert_fail@plt+0x1e438>
   30860:	ldr	r3, [r5, #48]	; 0x30
   30864:	ldr	r0, [sp, #48]	; 0x30
   30868:	and	r3, r3, #56	; 0x38
   3086c:	cmp	r3, #24
   30870:	beq	30a60 <__assert_fail@plt+0x1e2c4>
   30874:	ldr	r3, [sp, #32]
   30878:	mov	r4, #1
   3087c:	sub	r6, r3, #3
   30880:	clz	r6, r6
   30884:	lsr	r6, r6, #5
   30888:	ldr	r3, [r5, #48]	; 0x30
   3088c:	tst	r3, #512	; 0x200
   30890:	bne	30cfc <__assert_fail@plt+0x1e560>
   30894:	cmp	r0, #0
   30898:	bge	30ca4 <__assert_fail@plt+0x1e508>
   3089c:	tst	r6, r4
   308a0:	beq	308b0 <__assert_fail@plt+0x1e114>
   308a4:	bl	124d8 <__errno_location@plt>
   308a8:	ldr	r3, [r0]
   308ac:	str	r3, [r9, #32]
   308b0:	ldrh	r3, [r9, #62]	; 0x3e
   308b4:	ldr	r0, [r9, #12]
   308b8:	orr	r3, r3, #1
   308bc:	strh	r3, [r9, #62]	; 0x3e
   308c0:	bl	12760 <closedir@plt>
   308c4:	ldr	r0, [r5, #48]	; 0x30
   308c8:	mov	r3, #0
   308cc:	tst	r0, #512	; 0x200
   308d0:	str	r3, [r9, #12]
   308d4:	beq	308e4 <__assert_fail@plt+0x1e148>
   308d8:	ldr	r3, [sp, #48]	; 0x30
   308dc:	cmp	r3, #0
   308e0:	bge	30cec <__assert_fail@plt+0x1e550>
   308e4:	mov	r3, #0
   308e8:	str	r3, [r9, #12]
   308ec:	str	r3, [sp, #44]	; 0x2c
   308f0:	b	3051c <__assert_fail@plt+0x1dd80>
   308f4:	ldr	r1, [sp, #48]	; 0x30
   308f8:	ldr	r0, [sp, #8]
   308fc:	bl	2fbd0 <__assert_fail@plt+0x1d434>
   30900:	ldr	r3, [pc, #1252]	; 30dec <__assert_fail@plt+0x1e650>
   30904:	cmp	r0, r3
   30908:	beq	3092c <__assert_fail@plt+0x1e190>
   3090c:	ldr	r3, [pc, #1244]	; 30df0 <__assert_fail@plt+0x1e654>
   30910:	cmp	r0, r3
   30914:	beq	3092c <__assert_fail@plt+0x1e190>
   30918:	ldr	r3, [pc, #1236]	; 30df4 <__assert_fail@plt+0x1e658>
   3091c:	cmp	r0, r3
   30920:	movne	r3, #1
   30924:	strne	r3, [sp, #36]	; 0x24
   30928:	bne	306f8 <__assert_fail@plt+0x1df5c>
   3092c:	ldr	r3, [sp, #16]
   30930:	add	r7, r7, #1
   30934:	cmp	r7, r3
   30938:	str	r6, [sp, #36]	; 0x24
   3093c:	bcc	305e4 <__assert_fail@plt+0x1de48>
   30940:	ldr	r3, [sp, #24]
   30944:	ldr	r9, [sp, #8]
   30948:	cmp	r3, #0
   3094c:	beq	30a98 <__assert_fail@plt+0x1e2fc>
   30950:	ldr	r3, [r5, #4]
   30954:	ldr	r1, [r5, #24]
   30958:	cmp	r3, #0
   3095c:	beq	3098c <__assert_fail@plt+0x1e1f0>
   30960:	ldr	r2, [r3, #24]
   30964:	add	r0, r3, #176	; 0xb0
   30968:	cmp	r2, r0
   3096c:	ldrne	r0, [r3, #28]
   30970:	str	r1, [r3, #28]
   30974:	subne	r2, r2, r0
   30978:	addne	r2, r1, r2
   3097c:	strne	r2, [r3, #24]
   30980:	ldr	r3, [r3, #8]
   30984:	cmp	r3, #0
   30988:	bne	30960 <__assert_fail@plt+0x1e1c4>
   3098c:	ldr	r3, [sp, #4]
   30990:	b	309c4 <__assert_fail@plt+0x1e228>
   30994:	ldr	r2, [r3, #24]
   30998:	add	r0, r3, #176	; 0xb0
   3099c:	cmp	r2, r0
   309a0:	ldrne	r0, [r3, #28]
   309a4:	str	r1, [r3, #28]
   309a8:	subne	r2, r2, r0
   309ac:	addne	r2, r1, r2
   309b0:	strne	r2, [r3, #24]
   309b4:	ldr	r2, [r3, #8]
   309b8:	cmp	r2, #0
   309bc:	ldreq	r2, [r3, #4]
   309c0:	mov	r3, r2
   309c4:	ldr	r2, [r3, #48]	; 0x30
   309c8:	cmp	r2, #0
   309cc:	bge	30994 <__assert_fail@plt+0x1e1f8>
   309d0:	b	30a98 <__assert_fail@plt+0x1e2fc>
   309d4:	ldr	r2, [pc, #1028]	; 30de0 <__assert_fail@plt+0x1e644>
   309d8:	ldr	r1, [r2, r3, lsl #2]
   309dc:	mov	r2, #1
   309e0:	mov	r3, #0
   309e4:	str	r1, [r4, #88]	; 0x58
   309e8:	b	305ac <__assert_fail@plt+0x1de10>
   309ec:	ldr	r9, [sp, #8]
   309f0:	mov	r0, r4
   309f4:	ldr	r4, [r8]
   309f8:	bl	12154 <free@plt>
   309fc:	ldr	r0, [sp, #4]
   30a00:	bl	2fb6c <__assert_fail@plt+0x1d3d0>
   30a04:	ldr	r0, [r9, #12]
   30a08:	bl	12760 <closedir@plt>
   30a0c:	ldr	r3, [r5, #48]	; 0x30
   30a10:	mov	r2, #0
   30a14:	orr	r3, r3, #8192	; 0x2000
   30a18:	mov	r1, #7
   30a1c:	str	r2, [r9, #12]
   30a20:	strh	r1, [r9, #60]	; 0x3c
   30a24:	str	r2, [sp, #4]
   30a28:	str	r3, [r5, #48]	; 0x30
   30a2c:	str	r4, [r8]
   30a30:	ldr	r3, [pc, #928]	; 30dd8 <__assert_fail@plt+0x1e63c>
   30a34:	ldr	r2, [sp, #52]	; 0x34
   30a38:	ldr	r0, [sp, #4]
   30a3c:	ldr	r3, [r3]
   30a40:	cmp	r2, r3
   30a44:	bne	30dd4 <__assert_fail@plt+0x1e638>
   30a48:	add	sp, sp, #60	; 0x3c
   30a4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30a50:	ldr	r2, [r9, #48]	; 0x30
   30a54:	cmp	r2, #0
   30a58:	movne	r2, #32768	; 0x8000
   30a5c:	b	30810 <__assert_fail@plt+0x1e074>
   30a60:	ldr	r3, [r9, #92]	; 0x5c
   30a64:	cmp	r3, #2
   30a68:	bne	30874 <__assert_fail@plt+0x1e0d8>
   30a6c:	mov	r1, r0
   30a70:	mov	r0, r9
   30a74:	bl	2fd04 <__assert_fail@plt+0x1d568>
   30a78:	cmp	r0, #0
   30a7c:	bne	30d10 <__assert_fail@plt+0x1e574>
   30a80:	ldr	r0, [sp, #48]	; 0x30
   30a84:	b	30874 <__assert_fail@plt+0x1e0d8>
   30a88:	mov	r9, r3
   30a8c:	ldr	r3, [sp, #24]
   30a90:	cmp	r3, #0
   30a94:	bne	30950 <__assert_fail@plt+0x1e1b4>
   30a98:	ldr	r3, [r5, #48]	; 0x30
   30a9c:	tst	r3, #4
   30aa0:	beq	30acc <__assert_fail@plt+0x1e330>
   30aa4:	ldr	r3, [r5, #36]	; 0x24
   30aa8:	ldr	r2, [sp]
   30aac:	cmp	r7, #0
   30ab0:	cmpne	r3, r2
   30ab4:	ldreq	r3, [sp, #20]
   30ab8:	subeq	r3, r3, #1
   30abc:	streq	r3, [sp, #20]
   30ac0:	ldr	r2, [sp, #20]
   30ac4:	mov	r3, #0
   30ac8:	strb	r3, [r2]
   30acc:	ldrd	r2, [sp, #40]	; 0x28
   30ad0:	cmp	r2, #0
   30ad4:	movne	r3, #0
   30ad8:	cmp	r3, #0
   30adc:	beq	30b14 <__assert_fail@plt+0x1e378>
   30ae0:	ldr	r3, [sp, #32]
   30ae4:	cmp	r7, #0
   30ae8:	cmpne	r3, #1
   30aec:	bne	30b1c <__assert_fail@plt+0x1e380>
   30af0:	ldr	r3, [r9, #48]	; 0x30
   30af4:	cmp	r3, #0
   30af8:	bne	30c84 <__assert_fail@plt+0x1e4e8>
   30afc:	mov	r0, r5
   30b00:	bl	2fe20 <__assert_fail@plt+0x1d684>
   30b04:	adds	r0, r0, #0
   30b08:	movne	r0, #1
   30b0c:	cmp	r0, #0
   30b10:	bne	30d6c <__assert_fail@plt+0x1e5d0>
   30b14:	cmp	r7, #0
   30b18:	beq	30c34 <__assert_fail@plt+0x1e498>
   30b1c:	ldr	r3, [sp, #36]	; 0x24
   30b20:	cmp	r3, #0
   30b24:	bne	30b94 <__assert_fail@plt+0x1e3f8>
   30b28:	ldr	r3, [r5, #44]	; 0x2c
   30b2c:	cmp	r3, #0
   30b30:	cmpne	r7, #1
   30b34:	beq	30a30 <__assert_fail@plt+0x1e294>
   30b38:	mov	r2, r7
   30b3c:	ldr	r1, [sp, #4]
   30b40:	mov	r0, r5
   30b44:	bl	2fa20 <__assert_fail@plt+0x1d284>
   30b48:	str	r0, [sp, #4]
   30b4c:	b	30a30 <__assert_fail@plt+0x1e294>
   30b50:	ldr	r3, [r8]
   30b54:	ldr	r9, [sp, #8]
   30b58:	cmp	r3, #0
   30b5c:	beq	30b78 <__assert_fail@plt+0x1e3dc>
   30b60:	ldr	r2, [sp, #40]	; 0x28
   30b64:	str	r3, [r9, #32]
   30b68:	orrs	r2, r2, r7
   30b6c:	moveq	r2, #4
   30b70:	movne	r2, #7
   30b74:	strh	r2, [r9, #60]	; 0x3c
   30b78:	ldr	r0, [r9, #12]
   30b7c:	cmp	r0, #0
   30b80:	beq	30a8c <__assert_fail@plt+0x1e2f0>
   30b84:	bl	12760 <closedir@plt>
   30b88:	mov	r3, #0
   30b8c:	str	r3, [r9, #12]
   30b90:	b	30a8c <__assert_fail@plt+0x1e2f0>
   30b94:	ldr	r3, [pc, #604]	; 30df8 <__assert_fail@plt+0x1e65c>
   30b98:	mov	r2, r7
   30b9c:	str	r3, [r5, #44]	; 0x2c
   30ba0:	ldr	r1, [sp, #4]
   30ba4:	mov	r0, r5
   30ba8:	bl	2fa20 <__assert_fail@plt+0x1d284>
   30bac:	mov	r3, #0
   30bb0:	str	r3, [r5, #44]	; 0x2c
   30bb4:	str	r0, [sp, #4]
   30bb8:	b	30a30 <__assert_fail@plt+0x1e294>
   30bbc:	ldr	r3, [pc, #548]	; 30de8 <__assert_fail@plt+0x1e64c>
   30bc0:	str	r3, [sp, #16]
   30bc4:	mov	r3, #1
   30bc8:	str	r3, [sp, #44]	; 0x2c
   30bcc:	ldr	r0, [r5, #48]	; 0x30
   30bd0:	b	3051c <__assert_fail@plt+0x1dd80>
   30bd4:	mov	r3, #0
   30bd8:	str	r3, [sp, #44]	; 0x2c
   30bdc:	ldr	r0, [r5, #48]	; 0x30
   30be0:	b	3051c <__assert_fail@plt+0x1dd80>
   30be4:	add	r4, r5, #56	; 0x38
   30be8:	mov	r1, r4
   30bec:	mov	r2, r9
   30bf0:	bl	303e4 <__assert_fail@plt+0x1dc48>
   30bf4:	mov	r3, #0
   30bf8:	mov	r2, r9
   30bfc:	add	r1, r5, #48	; 0x30
   30c00:	ldr	r0, [r5, #32]
   30c04:	bl	2fe70 <__assert_fail@plt+0x1d6d4>
   30c08:	mov	r1, r4
   30c0c:	mov	r2, r9
   30c10:	ldr	r0, [r5, #48]	; 0x30
   30c14:	bl	30334 <__assert_fail@plt+0x1db98>
   30c18:	subs	r4, r0, #0
   30c1c:	bne	30840 <__assert_fail@plt+0x1e0a4>
   30c20:	bl	124d8 <__errno_location@plt>
   30c24:	mov	r3, #12
   30c28:	str	r4, [sp, #4]
   30c2c:	str	r3, [r0]
   30c30:	b	30a30 <__assert_fail@plt+0x1e294>
   30c34:	ldr	r3, [sp, #32]
   30c38:	cmp	r3, #3
   30c3c:	bne	30c54 <__assert_fail@plt+0x1e4b8>
   30c40:	ldrh	r3, [r9, #60]	; 0x3c
   30c44:	cmp	r3, #7
   30c48:	cmpne	r3, #4
   30c4c:	movne	r3, #6
   30c50:	strhne	r3, [r9, #60]	; 0x3c
   30c54:	ldr	r0, [sp, #4]
   30c58:	bl	2fb6c <__assert_fail@plt+0x1d3d0>
   30c5c:	mov	r3, #0
   30c60:	str	r3, [sp, #4]
   30c64:	b	30a30 <__assert_fail@plt+0x1e294>
   30c68:	mov	r3, #0
   30c6c:	mov	r2, r9
   30c70:	add	r1, r5, #48	; 0x30
   30c74:	ldr	r0, [r5, #32]
   30c78:	bl	2fe70 <__assert_fail@plt+0x1d6d4>
   30c7c:	strh	r0, [r9, #60]	; 0x3c
   30c80:	b	30840 <__assert_fail@plt+0x1e0a4>
   30c84:	ldr	r3, [pc, #368]	; 30dfc <__assert_fail@plt+0x1e660>
   30c88:	mvn	r2, #0
   30c8c:	ldr	r1, [r9, #4]
   30c90:	mov	r0, r5
   30c94:	bl	30128 <__assert_fail@plt+0x1d98c>
   30c98:	adds	r0, r0, #0
   30c9c:	movne	r0, #1
   30ca0:	b	30b0c <__assert_fail@plt+0x1e370>
   30ca4:	mov	r2, r0
   30ca8:	mov	r3, #0
   30cac:	mov	r1, r9
   30cb0:	mov	r0, r5
   30cb4:	bl	30128 <__assert_fail@plt+0x1d98c>
   30cb8:	cmp	r0, #0
   30cbc:	bne	3089c <__assert_fail@plt+0x1e100>
   30cc0:	b	30bc4 <__assert_fail@plt+0x1e428>
   30cc4:	ldr	r0, [r9, #12]
   30cc8:	bl	12760 <closedir@plt>
   30ccc:	ldr	r3, [sp, #32]
   30cd0:	mov	r4, #0
   30cd4:	cmp	r3, #3
   30cd8:	str	r4, [r9, #12]
   30cdc:	beq	30d50 <__assert_fail@plt+0x1e5b4>
   30ce0:	mov	r3, #0
   30ce4:	str	r3, [sp, #4]
   30ce8:	b	30a30 <__assert_fail@plt+0x1e294>
   30cec:	mov	r0, r3
   30cf0:	bl	12748 <close@plt>
   30cf4:	ldr	r0, [r5, #48]	; 0x30
   30cf8:	b	308e4 <__assert_fail@plt+0x1e148>
   30cfc:	mov	r2, #3
   30d00:	ldr	r1, [pc, #248]	; 30e00 <__assert_fail@plt+0x1e664>
   30d04:	bl	2f650 <__assert_fail@plt+0x1ceb4>
   30d08:	str	r0, [sp, #48]	; 0x30
   30d0c:	b	30894 <__assert_fail@plt+0x1e0f8>
   30d10:	ldr	r3, [sp, #32]
   30d14:	cmp	r3, #3
   30d18:	bne	30bd4 <__assert_fail@plt+0x1e438>
   30d1c:	ldr	r0, [sp, #48]	; 0x30
   30d20:	mov	r4, #0
   30d24:	mov	r6, #1
   30d28:	b	30888 <__assert_fail@plt+0x1e0ec>
   30d2c:	ldr	r3, [sp, #32]
   30d30:	cmp	r3, #3
   30d34:	bne	30ce0 <__assert_fail@plt+0x1e544>
   30d38:	mov	r3, #4
   30d3c:	strh	r3, [r9, #60]	; 0x3c
   30d40:	bl	124d8 <__errno_location@plt>
   30d44:	ldr	r3, [r0]
   30d48:	str	r3, [r9, #32]
   30d4c:	b	30a30 <__assert_fail@plt+0x1e294>
   30d50:	mov	r3, #4
   30d54:	strh	r3, [r9, #60]	; 0x3c
   30d58:	bl	124d8 <__errno_location@plt>
   30d5c:	str	r4, [sp, #4]
   30d60:	ldr	r3, [r0]
   30d64:	str	r3, [r9, #32]
   30d68:	b	30a30 <__assert_fail@plt+0x1e294>
   30d6c:	ldr	r3, [r5, #48]	; 0x30
   30d70:	mov	r2, #7
   30d74:	orr	r3, r3, #8192	; 0x2000
   30d78:	strh	r2, [r9, #60]	; 0x3c
   30d7c:	ldr	r0, [sp, #4]
   30d80:	str	r3, [r5, #48]	; 0x30
   30d84:	bl	2fb6c <__assert_fail@plt+0x1d3d0>
   30d88:	b	30ce0 <__assert_fail@plt+0x1e544>
   30d8c:	ldr	r9, [sp, #8]
   30d90:	mov	r0, r4
   30d94:	bl	12154 <free@plt>
   30d98:	ldr	r0, [sp, #4]
   30d9c:	bl	2fb6c <__assert_fail@plt+0x1d3d0>
   30da0:	ldr	r0, [r9, #12]
   30da4:	bl	12760 <closedir@plt>
   30da8:	ldr	r3, [r5, #48]	; 0x30
   30dac:	mov	r2, #0
   30db0:	orr	r3, r3, #8192	; 0x2000
   30db4:	mov	r0, #7
   30db8:	mov	r1, #36	; 0x24
   30dbc:	str	r2, [r9, #12]
   30dc0:	strh	r0, [r9, #60]	; 0x3c
   30dc4:	str	r2, [sp, #4]
   30dc8:	str	r3, [r5, #48]	; 0x30
   30dcc:	str	r1, [r8]
   30dd0:	b	30a30 <__assert_fail@plt+0x1e294>
   30dd4:	bl	12244 <__stack_chk_fail@plt>
   30dd8:	andeq	fp, r5, r0, ror #24
   30ddc:	andeq	r2, r0, r0, lsl r7
   30de0:	andeq	sl, r4, r4, lsl #13
   30de4:	andeq	r2, r0, r1, lsl r7
   30de8:	andeq	r8, r1, r0, lsr #13
   30dec:	andeq	r6, r0, r9, ror #18
   30df0:			; <UNDEFINED> instruction: 0x01021994
   30df4:			; <UNDEFINED> instruction: 0xff534d42
   30df8:	strdeq	pc, [r2], -r0
   30dfc:			; <UNDEFINED> instruction: 0x0004a6b4
   30e00:	andeq	r0, r0, r6, lsl #8

00030e04 <fts_open@@Base>:
   30e04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30e08:	bic	r5, r1, #4080	; 0xff0
   30e0c:	bic	r5, r5, #15
   30e10:	cmp	r5, #0
   30e14:	sub	sp, sp, #20
   30e18:	bne	31140 <fts_open@@Base+0x33c>
   30e1c:	and	r3, r1, #516	; 0x204
   30e20:	cmp	r3, #516	; 0x204
   30e24:	mov	r7, r1
   30e28:	beq	310d4 <fts_open@@Base+0x2d0>
   30e2c:	ands	r5, r1, #18
   30e30:	beq	310d4 <fts_open@@Base+0x2d0>
   30e34:	mov	r6, r0
   30e38:	mov	r1, #1
   30e3c:	mov	r0, #96	; 0x60
   30e40:	mov	r9, r2
   30e44:	bl	12064 <calloc@plt>
   30e48:	subs	r5, r0, #0
   30e4c:	beq	31098 <fts_open@@Base+0x294>
   30e50:	tst	r7, #2
   30e54:	bicne	r3, r7, #512	; 0x200
   30e58:	orrne	r3, r3, #4
   30e5c:	strne	r3, [r5, #48]	; 0x30
   30e60:	ldr	r3, [r6]
   30e64:	streq	r7, [r5, #48]	; 0x30
   30e68:	mvn	r2, #99	; 0x63
   30e6c:	cmp	r3, #0
   30e70:	str	r9, [r5, #44]	; 0x2c
   30e74:	str	r2, [r5, #32]
   30e78:	beq	3115c <fts_open@@Base+0x358>
   30e7c:	mov	r8, r6
   30e80:	mov	r4, #0
   30e84:	mov	r0, r3
   30e88:	bl	1249c <strlen@plt>
   30e8c:	ldr	r3, [r8, #4]!
   30e90:	cmp	r4, r0
   30e94:	movcc	r4, r0
   30e98:	cmp	r3, #0
   30e9c:	bne	30e84 <fts_open@@Base+0x80>
   30ea0:	add	r2, r4, #1
   30ea4:	cmp	r2, #4096	; 0x1000
   30ea8:	movcc	r2, #4096	; 0x1000
   30eac:	add	r1, r5, #36	; 0x24
   30eb0:	add	r0, r5, #24
   30eb4:	bl	2fffc <__assert_fail@plt+0x1d860>
   30eb8:	subs	fp, r0, #0
   30ebc:	beq	310bc <fts_open@@Base+0x2b8>
   30ec0:	ldr	sl, [r6]
   30ec4:	cmp	sl, #0
   30ec8:	beq	310ec <fts_open@@Base+0x2e8>
   30ecc:	mov	r2, #0
   30ed0:	ldr	r1, [pc, #704]	; 31198 <fts_open@@Base+0x394>
   30ed4:	mov	r0, r5
   30ed8:	bl	2faf8 <__assert_fail@plt+0x1d35c>
   30edc:	subs	sl, r0, #0
   30ee0:	beq	310b4 <fts_open@@Base+0x2b0>
   30ee4:	mvn	r3, #0
   30ee8:	cmp	r9, #0
   30eec:	str	r3, [sl, #48]	; 0x30
   30ef0:	str	r3, [sl, #56]	; 0x38
   30ef4:	ldr	r4, [r6]
   30ef8:	beq	30f08 <fts_open@@Base+0x104>
   30efc:	ldr	fp, [r5, #48]	; 0x30
   30f00:	lsr	fp, fp, #10
   30f04:	and	fp, fp, #1
   30f08:	cmp	r4, #0
   30f0c:	beq	31190 <fts_open@@Base+0x38c>
   30f10:	lsr	r7, r7, #11
   30f14:	mov	r3, #0
   30f18:	eor	r7, r7, #1
   30f1c:	and	r2, r7, #1
   30f20:	str	r3, [sp, #8]
   30f24:	mov	r8, r3
   30f28:	mov	r7, r3
   30f2c:	add	r3, r5, #48	; 0x30
   30f30:	str	r2, [sp, #4]
   30f34:	str	r3, [sp, #12]
   30f38:	b	30f70 <fts_open@@Base+0x16c>
   30f3c:	cmp	r9, r1
   30f40:	mov	r0, #2
   30f44:	mov	r1, #0
   30f48:	mov	r3, #11
   30f4c:	strd	r0, [r4, #120]	; 0x78
   30f50:	strh	r3, [r4, #60]	; 0x3c
   30f54:	beq	3112c <fts_open@@Base+0x328>
   30f58:	str	r7, [r4, #8]
   30f5c:	mov	r7, r4
   30f60:	ldr	r4, [r6, #4]!
   30f64:	add	r8, r8, #1
   30f68:	cmp	r4, #0
   30f6c:	beq	3101c <fts_open@@Base+0x218>
   30f70:	mov	r0, r4
   30f74:	bl	1249c <strlen@plt>
   30f78:	ldr	r3, [sp, #4]
   30f7c:	cmp	r0, #2
   30f80:	movls	r3, #0
   30f84:	andhi	r3, r3, #1
   30f88:	cmp	r3, #0
   30f8c:	mov	r2, r0
   30f90:	bne	310fc <fts_open@@Base+0x2f8>
   30f94:	mov	r1, r4
   30f98:	mov	r0, r5
   30f9c:	bl	2faf8 <__assert_fail@plt+0x1d35c>
   30fa0:	subs	r4, r0, #0
   30fa4:	beq	310a4 <fts_open@@Base+0x2a0>
   30fa8:	cmp	r7, #0
   30fac:	moveq	r3, #0
   30fb0:	andne	r3, fp, #1
   30fb4:	add	r2, r4, #176	; 0xb0
   30fb8:	mov	r1, #0
   30fbc:	cmp	r3, #0
   30fc0:	str	r1, [r4, #48]	; 0x30
   30fc4:	str	sl, [r4, #4]
   30fc8:	str	r2, [r4, #24]
   30fcc:	bne	30f3c <fts_open@@Base+0x138>
   30fd0:	mov	r2, r4
   30fd4:	ldr	r1, [sp, #12]
   30fd8:	ldr	r0, [r5, #32]
   30fdc:	bl	2fe70 <__assert_fail@plt+0x1d6d4>
   30fe0:	cmp	r9, #0
   30fe4:	strh	r0, [r4, #60]	; 0x3c
   30fe8:	bne	30f58 <fts_open@@Base+0x154>
   30fec:	cmp	r7, #0
   30ff0:	str	r9, [r4, #8]
   30ff4:	streq	r4, [sp, #8]
   30ff8:	moveq	r7, r4
   30ffc:	beq	30f60 <fts_open@@Base+0x15c>
   31000:	ldr	r3, [sp, #8]
   31004:	str	r4, [sp, #8]
   31008:	str	r4, [r3, #8]
   3100c:	ldr	r4, [r6, #4]!
   31010:	add	r8, r8, #1
   31014:	cmp	r4, #0
   31018:	bne	30f70 <fts_open@@Base+0x16c>
   3101c:	cmp	r9, #0
   31020:	cmpne	r8, #1
   31024:	bls	3103c <fts_open@@Base+0x238>
   31028:	mov	r1, r7
   3102c:	mov	r2, r8
   31030:	mov	r0, r5
   31034:	bl	2fa20 <__assert_fail@plt+0x1d284>
   31038:	mov	r7, r0
   3103c:	mov	r2, #0
   31040:	ldr	r1, [pc, #336]	; 31198 <fts_open@@Base+0x394>
   31044:	mov	r0, r5
   31048:	bl	2faf8 <__assert_fail@plt+0x1d35c>
   3104c:	cmp	r0, #0
   31050:	str	r0, [r5]
   31054:	beq	310a4 <fts_open@@Base+0x2a0>
   31058:	mov	r2, #1
   3105c:	mov	r3, #9
   31060:	str	r7, [r0, #8]
   31064:	str	r2, [r0, #48]	; 0x30
   31068:	strh	r3, [r0, #60]	; 0x3c
   3106c:	add	r1, r5, #56	; 0x38
   31070:	ldr	r0, [r5, #48]	; 0x30
   31074:	bl	30078 <__assert_fail@plt+0x1d8dc>
   31078:	cmp	r0, #0
   3107c:	beq	310a4 <fts_open@@Base+0x2a0>
   31080:	ldr	r1, [r5, #48]	; 0x30
   31084:	tst	r1, #516	; 0x204
   31088:	beq	31164 <fts_open@@Base+0x360>
   3108c:	mvn	r1, #0
   31090:	add	r0, r5, #60	; 0x3c
   31094:	bl	41664 <fts_children@@Base+0xfbc8>
   31098:	mov	r0, r5
   3109c:	add	sp, sp, #20
   310a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   310a4:	mov	r0, r7
   310a8:	bl	2fb6c <__assert_fail@plt+0x1d3d0>
   310ac:	mov	r0, sl
   310b0:	bl	12154 <free@plt>
   310b4:	ldr	r0, [r5, #24]
   310b8:	bl	12154 <free@plt>
   310bc:	mov	r0, r5
   310c0:	bl	12154 <free@plt>
   310c4:	mov	r5, #0
   310c8:	mov	r0, r5
   310cc:	add	sp, sp, #20
   310d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   310d4:	bl	124d8 <__errno_location@plt>
   310d8:	mov	r3, #22
   310dc:	str	r3, [r0]
   310e0:	mov	r0, r5
   310e4:	add	sp, sp, #20
   310e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   310ec:	cmp	r9, #0
   310f0:	beq	31188 <fts_open@@Base+0x384>
   310f4:	mov	r4, sl
   310f8:	b	30efc <fts_open@@Base+0xf8>
   310fc:	sub	r1, r0, #1
   31100:	add	r3, r4, r1
   31104:	ldrb	r1, [r4, r1]
   31108:	cmp	r1, #47	; 0x2f
   3110c:	bne	30f94 <fts_open@@Base+0x190>
   31110:	ldrb	r1, [r3, #-1]!
   31114:	cmp	r1, #47	; 0x2f
   31118:	bne	30f94 <fts_open@@Base+0x190>
   3111c:	sub	r2, r2, #1
   31120:	cmp	r2, #1
   31124:	bne	31110 <fts_open@@Base+0x30c>
   31128:	b	30f94 <fts_open@@Base+0x190>
   3112c:	ldr	r3, [sp, #8]
   31130:	str	r9, [r4, #8]
   31134:	str	r4, [sp, #8]
   31138:	str	r4, [r3, #8]
   3113c:	b	3100c <fts_open@@Base+0x208>
   31140:	bl	124d8 <__errno_location@plt>
   31144:	mov	r5, #0
   31148:	mov	r3, #22
   3114c:	str	r3, [r0]
   31150:	mov	r0, r5
   31154:	add	sp, sp, #20
   31158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3115c:	mov	r2, #4096	; 0x1000
   31160:	b	30eac <fts_open@@Base+0xa8>
   31164:	ldr	r2, [pc, #48]	; 3119c <fts_open@@Base+0x398>
   31168:	ldr	r0, [r5, #32]
   3116c:	bl	300f8 <__assert_fail@plt+0x1d95c>
   31170:	cmp	r0, #0
   31174:	str	r0, [r5, #28]
   31178:	ldrlt	r3, [r5, #48]	; 0x30
   3117c:	orrlt	r3, r3, #4
   31180:	strlt	r3, [r5, #48]	; 0x30
   31184:	b	3108c <fts_open@@Base+0x288>
   31188:	mov	r7, sl
   3118c:	b	3103c <fts_open@@Base+0x238>
   31190:	mov	r7, r4
   31194:	b	3103c <fts_open@@Base+0x238>
   31198:	andeq	r8, r4, r0, lsr r6
   3119c:	andeq	r7, r4, r8, ror r8

000311a0 <fts_close@@Base>:
   311a0:	ldr	r3, [r0]
   311a4:	push	{r4, r5, r6, lr}
   311a8:	cmp	r3, #0
   311ac:	mov	r5, r0
   311b0:	beq	311ec <fts_close@@Base+0x4c>
   311b4:	ldr	r2, [r3, #48]	; 0x30
   311b8:	cmp	r2, #0
   311bc:	blt	31304 <fts_close@@Base+0x164>
   311c0:	ldr	r4, [r3, #8]
   311c4:	mov	r0, r3
   311c8:	cmp	r4, #0
   311cc:	ldreq	r4, [r3, #4]
   311d0:	bl	12154 <free@plt>
   311d4:	mov	r3, r4
   311d8:	ldr	r2, [r4, #48]	; 0x30
   311dc:	cmp	r2, #0
   311e0:	bge	311c0 <fts_close@@Base+0x20>
   311e4:	mov	r0, r4
   311e8:	bl	12154 <free@plt>
   311ec:	ldr	r0, [r5, #4]
   311f0:	cmp	r0, #0
   311f4:	beq	311fc <fts_close@@Base+0x5c>
   311f8:	bl	2fb6c <__assert_fail@plt+0x1d3d0>
   311fc:	ldr	r0, [r5, #8]
   31200:	bl	12154 <free@plt>
   31204:	ldr	r0, [r5, #24]
   31208:	bl	12154 <free@plt>
   3120c:	ldr	r3, [r5, #48]	; 0x30
   31210:	tst	r3, #512	; 0x200
   31214:	bne	31278 <fts_close@@Base+0xd8>
   31218:	tst	r3, #4
   3121c:	beq	312a4 <fts_close@@Base+0x104>
   31220:	mov	r4, #0
   31224:	add	r0, r5, #60	; 0x3c
   31228:	bl	2fba0 <__assert_fail@plt+0x1d404>
   3122c:	ldr	r0, [r5, #52]	; 0x34
   31230:	cmp	r0, #0
   31234:	beq	3123c <fts_close@@Base+0x9c>
   31238:	bl	22628 <__assert_fail@plt+0xfe8c>
   3123c:	ldr	r2, [r5, #48]	; 0x30
   31240:	ldr	r3, [pc, #212]	; 3131c <fts_close@@Base+0x17c>
   31244:	ldr	r0, [r5, #56]	; 0x38
   31248:	and	r3, r3, r2
   3124c:	cmp	r3, #0
   31250:	beq	3129c <fts_close@@Base+0xfc>
   31254:	cmp	r0, #0
   31258:	beq	31260 <fts_close@@Base+0xc0>
   3125c:	bl	22628 <__assert_fail@plt+0xfe8c>
   31260:	mov	r0, r5
   31264:	bl	12154 <free@plt>
   31268:	cmp	r4, #0
   3126c:	bne	3130c <fts_close@@Base+0x16c>
   31270:	mov	r0, r4
   31274:	pop	{r4, r5, r6, pc}
   31278:	ldr	r0, [r5, #32]
   3127c:	cmp	r0, #0
   31280:	blt	31220 <fts_close@@Base+0x80>
   31284:	bl	12748 <close@plt>
   31288:	cmp	r0, #0
   3128c:	beq	31220 <fts_close@@Base+0x80>
   31290:	bl	124d8 <__errno_location@plt>
   31294:	ldr	r4, [r0]
   31298:	b	31224 <fts_close@@Base+0x84>
   3129c:	bl	12154 <free@plt>
   312a0:	b	31260 <fts_close@@Base+0xc0>
   312a4:	ldr	r0, [r5, #28]
   312a8:	bl	126a0 <fchdir@plt>
   312ac:	cmp	r0, #0
   312b0:	bne	312d4 <fts_close@@Base+0x134>
   312b4:	ldr	r0, [r5, #28]
   312b8:	bl	12748 <close@plt>
   312bc:	cmp	r0, #0
   312c0:	beq	31220 <fts_close@@Base+0x80>
   312c4:	bl	124d8 <__errno_location@plt>
   312c8:	mov	r6, r0
   312cc:	ldr	r4, [r6]
   312d0:	b	31224 <fts_close@@Base+0x84>
   312d4:	bl	124d8 <__errno_location@plt>
   312d8:	mov	r6, r0
   312dc:	ldr	r0, [r5, #28]
   312e0:	ldr	r4, [r6]
   312e4:	bl	12748 <close@plt>
   312e8:	clz	r3, r4
   312ec:	lsr	r3, r3, #5
   312f0:	cmp	r0, #0
   312f4:	moveq	r3, #0
   312f8:	cmp	r3, #0
   312fc:	beq	31224 <fts_close@@Base+0x84>
   31300:	b	312cc <fts_close@@Base+0x12c>
   31304:	mov	r4, r3
   31308:	b	311e4 <fts_close@@Base+0x44>
   3130c:	bl	124d8 <__errno_location@plt>
   31310:	str	r4, [r0]
   31314:	mvn	r4, #0
   31318:	b	31270 <fts_close@@Base+0xd0>
   3131c:	andeq	r0, r0, r2, lsl #2

00031320 <fts_read@@Base>:
   31320:	push	{r4, r5, r6, r7, r8, lr}
   31324:	ldr	r4, [r0]
   31328:	cmp	r4, #0
   3132c:	beq	3144c <fts_read@@Base+0x12c>
   31330:	ldr	r1, [r0, #48]	; 0x30
   31334:	ands	r3, r1, #8192	; 0x2000
   31338:	bne	3144c <fts_read@@Base+0x12c>
   3133c:	ldrh	r2, [r4, #64]	; 0x40
   31340:	mov	r8, r0
   31344:	mov	r0, #3
   31348:	cmp	r2, #1
   3134c:	strh	r0, [r4, #64]	; 0x40
   31350:	beq	31708 <fts_read@@Base+0x3e8>
   31354:	cmp	r2, #2
   31358:	ldrh	r3, [r4, #60]	; 0x3c
   3135c:	beq	31458 <fts_read@@Base+0x138>
   31360:	cmp	r3, #1
   31364:	bne	31394 <fts_read@@Base+0x74>
   31368:	b	31504 <fts_read@@Base+0x1e4>
   3136c:	mov	r0, r4
   31370:	str	r5, [r8]
   31374:	bl	12154 <free@plt>
   31378:	ldr	r4, [r5, #48]	; 0x30
   3137c:	cmp	r4, #0
   31380:	beq	3154c <fts_read@@Base+0x22c>
   31384:	ldrh	r3, [r5, #64]	; 0x40
   31388:	mov	r4, r5
   3138c:	cmp	r3, #4
   31390:	bne	315fc <fts_read@@Base+0x2dc>
   31394:	ldr	r5, [r4, #8]
   31398:	cmp	r5, #0
   3139c:	bne	3136c <fts_read@@Base+0x4c>
   313a0:	ldr	r6, [r4, #4]
   313a4:	ldr	r3, [r6, #12]
   313a8:	cmp	r3, #0
   313ac:	bne	318a0 <fts_read@@Base+0x580>
   313b0:	str	r6, [r8]
   313b4:	mov	r0, r4
   313b8:	bl	12154 <free@plt>
   313bc:	ldr	r3, [r6, #48]	; 0x30
   313c0:	cmn	r3, #1
   313c4:	beq	317d4 <fts_read@@Base+0x4b4>
   313c8:	ldrh	r3, [r6, #60]	; 0x3c
   313cc:	cmp	r3, #11
   313d0:	beq	31a58 <fts_read@@Base+0x738>
   313d4:	ldr	r3, [r6, #40]	; 0x28
   313d8:	ldr	r2, [r8, #24]
   313dc:	mov	r1, #0
   313e0:	strb	r1, [r2, r3]
   313e4:	ldr	r3, [r6, #48]	; 0x30
   313e8:	cmp	r3, r1
   313ec:	beq	317f4 <fts_read@@Base+0x4d4>
   313f0:	ldrh	r3, [r6, #62]	; 0x3e
   313f4:	tst	r3, #2
   313f8:	bne	31788 <fts_read@@Base+0x468>
   313fc:	tst	r3, #1
   31400:	beq	31928 <fts_read@@Base+0x608>
   31404:	ldrh	r3, [r6, #60]	; 0x3c
   31408:	ldr	r0, [r8, #48]	; 0x30
   3140c:	cmp	r3, #2
   31410:	beq	31440 <fts_read@@Base+0x120>
   31414:	ldr	r3, [r6, #32]
   31418:	cmp	r3, #0
   3141c:	movne	r3, #7
   31420:	strhne	r3, [r6, #60]	; 0x3c
   31424:	bne	31440 <fts_read@@Base+0x120>
   31428:	mov	r3, #6
   3142c:	strh	r3, [r6, #60]	; 0x3c
   31430:	mov	r2, r6
   31434:	add	r1, r8, #56	; 0x38
   31438:	bl	303e4 <__assert_fail@plt+0x1dc48>
   3143c:	ldr	r0, [r8, #48]	; 0x30
   31440:	tst	r0, #8192	; 0x2000
   31444:	moveq	r4, r6
   31448:	beq	31450 <fts_read@@Base+0x130>
   3144c:	mov	r4, #0
   31450:	mov	r0, r4
   31454:	pop	{r4, r5, r6, r7, r8, pc}
   31458:	sub	r2, r3, #12
   3145c:	cmp	r2, #1
   31460:	bls	31698 <fts_read@@Base+0x378>
   31464:	cmp	r3, #1
   31468:	bne	31394 <fts_read@@Base+0x74>
   3146c:	tst	r1, #64	; 0x40
   31470:	beq	31488 <fts_read@@Base+0x168>
   31474:	ldrd	r6, [r4, #72]	; 0x48
   31478:	ldrd	r2, [r8, #16]
   3147c:	cmp	r7, r3
   31480:	cmpeq	r6, r2
   31484:	bne	3150c <fts_read@@Base+0x1ec>
   31488:	ldr	r0, [r8, #4]
   3148c:	cmp	r0, #0
   31490:	beq	31734 <fts_read@@Base+0x414>
   31494:	tst	r1, #4096	; 0x1000
   31498:	bne	31720 <fts_read@@Base+0x400>
   3149c:	ldr	r3, [r4, #24]
   314a0:	mvn	r2, #0
   314a4:	mov	r1, r4
   314a8:	mov	r0, r8
   314ac:	bl	30128 <__assert_fail@plt+0x1d98c>
   314b0:	cmp	r0, #0
   314b4:	beq	317bc <fts_read@@Base+0x49c>
   314b8:	bl	124d8 <__errno_location@plt>
   314bc:	ldrh	r3, [r4, #62]	; 0x3e
   314c0:	ldr	r5, [r8, #4]
   314c4:	orr	r3, r3, #1
   314c8:	cmp	r5, #0
   314cc:	ldr	r2, [r0]
   314d0:	strh	r3, [r4, #62]	; 0x3e
   314d4:	str	r2, [r4, #32]
   314d8:	beq	314f8 <fts_read@@Base+0x1d8>
   314dc:	mov	r3, r5
   314e0:	ldr	r2, [r3, #4]
   314e4:	ldr	r2, [r2, #24]
   314e8:	str	r2, [r3, #24]
   314ec:	ldr	r3, [r3, #8]
   314f0:	cmp	r3, #0
   314f4:	bne	314e0 <fts_read@@Base+0x1c0>
   314f8:	mov	r3, #0
   314fc:	str	r3, [r8, #4]
   31500:	b	31604 <fts_read@@Base+0x2e4>
   31504:	cmp	r2, #4
   31508:	bne	3146c <fts_read@@Base+0x14c>
   3150c:	ldrh	r3, [r4, #62]	; 0x3e
   31510:	tst	r3, #2
   31514:	bne	318f0 <fts_read@@Base+0x5d0>
   31518:	ldr	r0, [r8, #4]
   3151c:	cmp	r0, #0
   31520:	beq	31530 <fts_read@@Base+0x210>
   31524:	bl	2fb6c <__assert_fail@plt+0x1d3d0>
   31528:	mov	r3, #0
   3152c:	str	r3, [r8, #4]
   31530:	mov	r3, #6
   31534:	strh	r3, [r4, #60]	; 0x3c
   31538:	mov	r2, r4
   3153c:	add	r1, r8, #56	; 0x38
   31540:	ldr	r0, [r8, #48]	; 0x30
   31544:	bl	303e4 <__assert_fail@plt+0x1dc48>
   31548:	b	31450 <fts_read@@Base+0x130>
   3154c:	mov	r0, r8
   31550:	bl	2fe20 <__assert_fail@plt+0x1d684>
   31554:	cmp	r0, #0
   31558:	bne	318d8 <fts_read@@Base+0x5b8>
   3155c:	ldr	r2, [r8, #48]	; 0x30
   31560:	ldr	r3, [pc, #1268]	; 31a5c <fts_read@@Base+0x73c>
   31564:	ldr	r0, [r8, #56]	; 0x38
   31568:	and	r3, r3, r2
   3156c:	cmp	r3, #0
   31570:	beq	318e8 <fts_read@@Base+0x5c8>
   31574:	cmp	r0, #0
   31578:	beq	31580 <fts_read@@Base+0x260>
   3157c:	bl	22628 <__assert_fail@plt+0xfe8c>
   31580:	ldr	r2, [r5, #52]	; 0x34
   31584:	add	r4, r5, #176	; 0xb0
   31588:	str	r2, [r5, #40]	; 0x28
   3158c:	mov	r1, r4
   31590:	add	r2, r2, #1
   31594:	ldr	r0, [r8, #24]
   31598:	bl	12148 <memmove@plt>
   3159c:	mov	r0, r4
   315a0:	mov	r1, #47	; 0x2f
   315a4:	bl	1261c <strrchr@plt>
   315a8:	cmp	r0, #0
   315ac:	beq	315dc <fts_read@@Base+0x2bc>
   315b0:	cmp	r4, r0
   315b4:	beq	317c4 <fts_read@@Base+0x4a4>
   315b8:	add	r6, r0, #1
   315bc:	mov	r0, r6
   315c0:	bl	1249c <strlen@plt>
   315c4:	mov	r1, r6
   315c8:	mov	r7, r0
   315cc:	add	r2, r7, #1
   315d0:	mov	r0, r4
   315d4:	bl	12148 <memmove@plt>
   315d8:	str	r7, [r5, #52]	; 0x34
   315dc:	ldr	r3, [r8, #24]
   315e0:	add	r1, r8, #56	; 0x38
   315e4:	str	r3, [r5, #28]
   315e8:	str	r3, [r5, #24]
   315ec:	ldr	r0, [r8, #48]	; 0x30
   315f0:	bl	30078 <__assert_fail@plt+0x1d8dc>
   315f4:	ldrh	r0, [r5, #60]	; 0x3c
   315f8:	b	31648 <fts_read@@Base+0x328>
   315fc:	cmp	r3, #2
   31600:	beq	318fc <fts_read@@Base+0x5dc>
   31604:	ldr	r3, [r5, #4]
   31608:	mov	ip, #47	; 0x2f
   3160c:	ldr	r2, [r8, #24]
   31610:	ldr	r1, [r3, #40]	; 0x28
   31614:	ldr	r0, [r3, #28]
   31618:	sub	r3, r1, #1
   3161c:	ldrb	r0, [r0, r3]
   31620:	cmp	r0, ip
   31624:	movne	r3, r1
   31628:	add	r0, r2, r3
   3162c:	strb	ip, [r2, r3]
   31630:	ldr	r2, [r5, #52]	; 0x34
   31634:	add	r0, r0, #1
   31638:	add	r2, r2, #1
   3163c:	add	r1, r5, #176	; 0xb0
   31640:	bl	12148 <memmove@plt>
   31644:	ldrh	r0, [r5, #60]	; 0x3c
   31648:	cmp	r0, #11
   3164c:	str	r5, [r8]
   31650:	beq	316c8 <fts_read@@Base+0x3a8>
   31654:	cmp	r0, #1
   31658:	bne	316e4 <fts_read@@Base+0x3c4>
   3165c:	ldr	r3, [r5, #48]	; 0x30
   31660:	cmp	r3, #0
   31664:	beq	316f8 <fts_read@@Base+0x3d8>
   31668:	mov	r4, r5
   3166c:	mov	r2, r5
   31670:	add	r1, r8, #56	; 0x38
   31674:	ldr	r0, [r8, #48]	; 0x30
   31678:	bl	30334 <__assert_fail@plt+0x1db98>
   3167c:	subs	r5, r0, #0
   31680:	bne	31450 <fts_read@@Base+0x130>
   31684:	bl	124d8 <__errno_location@plt>
   31688:	mov	r3, #12
   3168c:	mov	r4, r5
   31690:	str	r3, [r0]
   31694:	b	31450 <fts_read@@Base+0x130>
   31698:	mov	r3, #1
   3169c:	mov	r2, r4
   316a0:	add	r1, r8, #48	; 0x30
   316a4:	ldr	r0, [r8, #32]
   316a8:	bl	2fe70 <__assert_fail@plt+0x1d6d4>
   316ac:	cmp	r0, #1
   316b0:	strh	r0, [r4, #60]	; 0x3c
   316b4:	beq	3196c <fts_read@@Base+0x64c>
   316b8:	cmp	r0, #11
   316bc:	str	r4, [r8]
   316c0:	bne	31450 <fts_read@@Base+0x130>
   316c4:	mov	r5, r4
   316c8:	ldrd	r2, [r5, #120]	; 0x78
   316cc:	cmp	r3, #0
   316d0:	cmpeq	r2, #2
   316d4:	beq	31830 <fts_read@@Base+0x510>
   316d8:	cmp	r3, #0
   316dc:	cmpeq	r2, #1
   316e0:	bne	31a58 <fts_read@@Base+0x738>
   316e4:	mov	r4, r5
   316e8:	mov	r0, r4
   316ec:	pop	{r4, r5, r6, r7, r8, pc}
   316f0:	cmp	r0, #1
   316f4:	bne	316e4 <fts_read@@Base+0x3c4>
   316f8:	ldrd	r2, [r5, #72]	; 0x48
   316fc:	mov	r4, r5
   31700:	strd	r2, [r8, #16]
   31704:	b	3166c <fts_read@@Base+0x34c>
   31708:	mov	r2, r4
   3170c:	add	r1, r8, #48	; 0x30
   31710:	ldr	r0, [r8, #32]
   31714:	bl	2fe70 <__assert_fail@plt+0x1d6d4>
   31718:	strh	r0, [r4, #60]	; 0x3c
   3171c:	b	31450 <fts_read@@Base+0x130>
   31720:	bic	r1, r1, #4096	; 0x1000
   31724:	str	r1, [r8, #48]	; 0x30
   31728:	bl	2fb6c <__assert_fail@plt+0x1d3d0>
   3172c:	mov	r3, #0
   31730:	str	r3, [r8, #4]
   31734:	mov	r1, #3
   31738:	mov	r0, r8
   3173c:	bl	304bc <__assert_fail@plt+0x1dd20>
   31740:	cmp	r0, #0
   31744:	mov	r5, r0
   31748:	str	r0, [r8, #4]
   3174c:	bne	314f8 <fts_read@@Base+0x1d8>
   31750:	ldr	r0, [r8, #48]	; 0x30
   31754:	tst	r0, #8192	; 0x2000
   31758:	bne	3144c <fts_read@@Base+0x12c>
   3175c:	ldr	r3, [r4, #32]
   31760:	cmp	r3, #0
   31764:	beq	31778 <fts_read@@Base+0x458>
   31768:	ldrh	r3, [r4, #60]	; 0x3c
   3176c:	cmp	r3, #4
   31770:	movne	r3, #7
   31774:	strhne	r3, [r4, #60]	; 0x3c
   31778:	add	r1, r8, #56	; 0x38
   3177c:	mov	r2, r4
   31780:	bl	303e4 <__assert_fail@plt+0x1dc48>
   31784:	b	31450 <fts_read@@Base+0x130>
   31788:	ldr	r3, [r8, #48]	; 0x30
   3178c:	ldr	r1, [r6, #36]	; 0x24
   31790:	tst	r3, #4
   31794:	bne	317b0 <fts_read@@Base+0x490>
   31798:	tst	r3, #512	; 0x200
   3179c:	beq	31954 <fts_read@@Base+0x634>
   317a0:	mov	r2, #1
   317a4:	mov	r0, r8
   317a8:	bl	2fd98 <__assert_fail@plt+0x1d5fc>
   317ac:	ldr	r1, [r6, #36]	; 0x24
   317b0:	mov	r0, r1
   317b4:	bl	12748 <close@plt>
   317b8:	b	31404 <fts_read@@Base+0xe4>
   317bc:	ldr	r5, [r8, #4]
   317c0:	b	314f8 <fts_read@@Base+0x1d8>
   317c4:	ldrb	r3, [r4, #1]
   317c8:	cmp	r3, #0
   317cc:	beq	315dc <fts_read@@Base+0x2bc>
   317d0:	b	315b8 <fts_read@@Base+0x298>
   317d4:	mov	r0, r6
   317d8:	bl	12154 <free@plt>
   317dc:	bl	124d8 <__errno_location@plt>
   317e0:	mov	r3, #0
   317e4:	mov	r4, r3
   317e8:	str	r3, [r0]
   317ec:	str	r3, [r8]
   317f0:	b	31450 <fts_read@@Base+0x130>
   317f4:	mov	r0, r8
   317f8:	bl	2fe20 <__assert_fail@plt+0x1d684>
   317fc:	cmp	r0, #0
   31800:	beq	31404 <fts_read@@Base+0xe4>
   31804:	bl	124d8 <__errno_location@plt>
   31808:	ldr	r3, [r8, #48]	; 0x30
   3180c:	orr	r3, r3, #8192	; 0x2000
   31810:	ldr	r2, [r0]
   31814:	str	r2, [r6, #32]
   31818:	str	r3, [r8, #48]	; 0x30
   3181c:	ldrh	r3, [r6, #60]	; 0x3c
   31820:	cmp	r3, #2
   31824:	beq	3144c <fts_read@@Base+0x12c>
   31828:	ldr	r0, [r8, #48]	; 0x30
   3182c:	b	31414 <fts_read@@Base+0xf4>
   31830:	ldr	r4, [r5, #4]
   31834:	ldr	r0, [r8, #32]
   31838:	ldr	r3, [r4, #56]	; 0x38
   3183c:	cmp	r3, #0
   31840:	bne	31854 <fts_read@@Base+0x534>
   31844:	ldr	r3, [r8, #48]	; 0x30
   31848:	and	r3, r3, #24
   3184c:	cmp	r3, #24
   31850:	beq	319e4 <fts_read@@Base+0x6c4>
   31854:	mov	r3, #0
   31858:	mov	r2, r5
   3185c:	add	r1, r8, #48	; 0x30
   31860:	bl	2fe70 <__assert_fail@plt+0x1d6d4>
   31864:	ldr	r3, [r5, #88]	; 0x58
   31868:	and	r3, r3, #61440	; 0xf000
   3186c:	cmp	r3, #16384	; 0x4000
   31870:	strh	r0, [r5, #60]	; 0x3c
   31874:	bne	31654 <fts_read@@Base+0x334>
   31878:	ldr	r3, [r5, #48]	; 0x30
   3187c:	cmp	r3, #0
   31880:	beq	316f0 <fts_read@@Base+0x3d0>
   31884:	ldr	r3, [r4, #56]	; 0x38
   31888:	sub	r3, r3, #1
   3188c:	cmn	r3, #3
   31890:	strls	r3, [r4, #56]	; 0x38
   31894:	cmp	r0, #1
   31898:	beq	31668 <fts_read@@Base+0x348>
   3189c:	b	316e4 <fts_read@@Base+0x3c4>
   318a0:	ldr	r3, [r6, #40]	; 0x28
   318a4:	ldr	r2, [r8, #24]
   318a8:	str	r6, [r8]
   318ac:	mov	r1, #3
   318b0:	strb	r5, [r2, r3]
   318b4:	mov	r0, r8
   318b8:	bl	304bc <__assert_fail@plt+0x1dd20>
   318bc:	subs	r5, r0, #0
   318c0:	bne	31948 <fts_read@@Base+0x628>
   318c4:	ldr	r3, [r8, #48]	; 0x30
   318c8:	tst	r3, #8192	; 0x2000
   318cc:	bne	3144c <fts_read@@Base+0x12c>
   318d0:	ldr	r6, [r4, #4]
   318d4:	b	313b0 <fts_read@@Base+0x90>
   318d8:	ldr	r3, [r8, #48]	; 0x30
   318dc:	orr	r3, r3, #8192	; 0x2000
   318e0:	str	r3, [r8, #48]	; 0x30
   318e4:	b	31450 <fts_read@@Base+0x130>
   318e8:	bl	12154 <free@plt>
   318ec:	b	31580 <fts_read@@Base+0x260>
   318f0:	ldr	r0, [r4, #36]	; 0x24
   318f4:	bl	12748 <close@plt>
   318f8:	b	31518 <fts_read@@Base+0x1f8>
   318fc:	mov	r3, #1
   31900:	mov	r2, r5
   31904:	add	r1, r8, #48	; 0x30
   31908:	ldr	r0, [r8, #32]
   3190c:	bl	2fe70 <__assert_fail@plt+0x1d6d4>
   31910:	cmp	r0, #1
   31914:	strh	r0, [r5, #60]	; 0x3c
   31918:	beq	319b0 <fts_read@@Base+0x690>
   3191c:	mov	r3, #3
   31920:	strh	r3, [r5, #64]	; 0x40
   31924:	b	31604 <fts_read@@Base+0x2e4>
   31928:	ldr	r3, [pc, #304]	; 31a60 <fts_read@@Base+0x740>
   3192c:	mvn	r2, #0
   31930:	ldr	r1, [r6, #4]
   31934:	mov	r0, r8
   31938:	bl	30128 <__assert_fail@plt+0x1d98c>
   3193c:	cmp	r0, #0
   31940:	beq	31404 <fts_read@@Base+0xe4>
   31944:	b	31804 <fts_read@@Base+0x4e4>
   31948:	mov	r0, r4
   3194c:	bl	12154 <free@plt>
   31950:	b	31604 <fts_read@@Base+0x2e4>
   31954:	mov	r0, r1
   31958:	bl	126a0 <fchdir@plt>
   3195c:	cmp	r0, #0
   31960:	bne	31a04 <fts_read@@Base+0x6e4>
   31964:	ldr	r1, [r6, #36]	; 0x24
   31968:	b	317b0 <fts_read@@Base+0x490>
   3196c:	ldr	r1, [r8, #48]	; 0x30
   31970:	tst	r1, #4
   31974:	strne	r4, [r8]
   31978:	movne	r5, r4
   3197c:	bne	3165c <fts_read@@Base+0x33c>
   31980:	ldr	r2, [pc, #220]	; 31a64 <fts_read@@Base+0x744>
   31984:	ldr	r0, [r8, #32]
   31988:	bl	300f8 <__assert_fail@plt+0x1d95c>
   3198c:	cmp	r0, #0
   31990:	str	r0, [r4, #36]	; 0x24
   31994:	blt	31a24 <fts_read@@Base+0x704>
   31998:	ldrh	r3, [r4, #62]	; 0x3e
   3199c:	ldrh	r0, [r4, #60]	; 0x3c
   319a0:	mov	r5, r4
   319a4:	orr	r3, r3, #2
   319a8:	strh	r3, [r4, #62]	; 0x3e
   319ac:	b	31648 <fts_read@@Base+0x328>
   319b0:	ldr	r1, [r8, #48]	; 0x30
   319b4:	tst	r1, #4
   319b8:	bne	3191c <fts_read@@Base+0x5fc>
   319bc:	ldr	r2, [pc, #160]	; 31a64 <fts_read@@Base+0x744>
   319c0:	ldr	r0, [r8, #32]
   319c4:	bl	300f8 <__assert_fail@plt+0x1d95c>
   319c8:	cmp	r0, #0
   319cc:	str	r0, [r5, #36]	; 0x24
   319d0:	blt	31a40 <fts_read@@Base+0x720>
   319d4:	ldrh	r3, [r5, #62]	; 0x3e
   319d8:	orr	r3, r3, #2
   319dc:	strh	r3, [r5, #62]	; 0x3e
   319e0:	b	3191c <fts_read@@Base+0x5fc>
   319e4:	mov	r1, r0
   319e8:	mov	r0, r4
   319ec:	bl	2fd04 <__assert_fail@plt+0x1d568>
   319f0:	cmp	r0, #2
   319f4:	ldrheq	r0, [r5, #60]	; 0x3c
   319f8:	beq	31654 <fts_read@@Base+0x334>
   319fc:	ldr	r0, [r8, #32]
   31a00:	b	31854 <fts_read@@Base+0x534>
   31a04:	bl	124d8 <__errno_location@plt>
   31a08:	ldr	r3, [r8, #48]	; 0x30
   31a0c:	ldr	r1, [r6, #36]	; 0x24
   31a10:	orr	r3, r3, #8192	; 0x2000
   31a14:	ldr	r2, [r0]
   31a18:	str	r2, [r6, #32]
   31a1c:	str	r3, [r8, #48]	; 0x30
   31a20:	b	317b0 <fts_read@@Base+0x490>
   31a24:	bl	124d8 <__errno_location@plt>
   31a28:	mov	r2, #7
   31a2c:	ldr	r3, [r0]
   31a30:	strh	r2, [r4, #60]	; 0x3c
   31a34:	str	r3, [r4, #32]
   31a38:	str	r4, [r8]
   31a3c:	b	31450 <fts_read@@Base+0x130>
   31a40:	bl	124d8 <__errno_location@plt>
   31a44:	mov	r2, #7
   31a48:	ldr	r3, [r0]
   31a4c:	strh	r2, [r5, #60]	; 0x3c
   31a50:	str	r3, [r5, #32]
   31a54:	b	3191c <fts_read@@Base+0x5fc>
   31a58:	bl	1273c <abort@plt>
   31a5c:	andeq	r0, r0, r2, lsl #2
   31a60:			; <UNDEFINED> instruction: 0x0004a6b4
   31a64:	andeq	r7, r4, r8, ror r8

00031a68 <fts_set@@Base>:
   31a68:	cmp	r2, #4
   31a6c:	bhi	31a80 <fts_set@@Base+0x18>
   31a70:	mov	r3, #0
   31a74:	strh	r2, [r1, #64]	; 0x40
   31a78:	mov	r0, r3
   31a7c:	bx	lr
   31a80:	push	{r4, lr}
   31a84:	bl	124d8 <__errno_location@plt>
   31a88:	mov	r2, #22
   31a8c:	mov	r3, #1
   31a90:	str	r2, [r0]
   31a94:	mov	r0, r3
   31a98:	pop	{r4, pc}

00031a9c <fts_children@@Base>:
   31a9c:	push	{r4, r5, r6, r7, r8, lr}
   31aa0:	mov	r4, r1
   31aa4:	mov	r5, r0
   31aa8:	bl	124d8 <__errno_location@plt>
   31aac:	bics	r2, r4, #4096	; 0x1000
   31ab0:	mov	r7, r0
   31ab4:	bne	31b44 <fts_children@@Base+0xa8>
   31ab8:	ldr	r6, [r5]
   31abc:	str	r2, [r0]
   31ac0:	ldr	r3, [r5, #48]	; 0x30
   31ac4:	ands	r0, r3, #8192	; 0x2000
   31ac8:	bne	31b4c <fts_children@@Base+0xb0>
   31acc:	ldrh	r3, [r6, #60]	; 0x3c
   31ad0:	cmp	r3, #9
   31ad4:	beq	31ba4 <fts_children@@Base+0x108>
   31ad8:	cmp	r3, #1
   31adc:	popne	{r4, r5, r6, r7, r8, pc}
   31ae0:	ldr	r0, [r5, #4]
   31ae4:	cmp	r0, #0
   31ae8:	beq	31af0 <fts_children@@Base+0x54>
   31aec:	bl	2fb6c <__assert_fail@plt+0x1d3d0>
   31af0:	cmp	r4, #4096	; 0x1000
   31af4:	moveq	r8, #2
   31af8:	ldreq	r3, [r5, #48]	; 0x30
   31afc:	movne	r8, #1
   31b00:	orreq	r3, r3, #4096	; 0x1000
   31b04:	streq	r3, [r5, #48]	; 0x30
   31b08:	ldr	r3, [r6, #48]	; 0x30
   31b0c:	cmp	r3, #0
   31b10:	bne	31b30 <fts_children@@Base+0x94>
   31b14:	ldr	r3, [r6, #24]
   31b18:	ldrb	r3, [r3]
   31b1c:	cmp	r3, #47	; 0x2f
   31b20:	beq	31b30 <fts_children@@Base+0x94>
   31b24:	ldr	r1, [r5, #48]	; 0x30
   31b28:	ands	r4, r1, #4
   31b2c:	beq	31b54 <fts_children@@Base+0xb8>
   31b30:	mov	r1, r8
   31b34:	mov	r0, r5
   31b38:	bl	304bc <__assert_fail@plt+0x1dd20>
   31b3c:	str	r0, [r5, #4]
   31b40:	pop	{r4, r5, r6, r7, r8, pc}
   31b44:	mov	r3, #22
   31b48:	str	r3, [r0]
   31b4c:	mov	r0, #0
   31b50:	pop	{r4, r5, r6, r7, r8, pc}
   31b54:	ldr	r2, [pc, #136]	; 31be4 <fts_children@@Base+0x148>
   31b58:	ldr	r0, [r5, #32]
   31b5c:	bl	300f8 <__assert_fail@plt+0x1d95c>
   31b60:	subs	r6, r0, #0
   31b64:	blt	31bc0 <fts_children@@Base+0x124>
   31b68:	mov	r1, r8
   31b6c:	mov	r0, r5
   31b70:	bl	304bc <__assert_fail@plt+0x1dd20>
   31b74:	ldr	r3, [r5, #48]	; 0x30
   31b78:	ands	r4, r3, #512	; 0x200
   31b7c:	str	r0, [r5, #4]
   31b80:	bne	31bac <fts_children@@Base+0x110>
   31b84:	mov	r0, r6
   31b88:	bl	126a0 <fchdir@plt>
   31b8c:	cmp	r0, #0
   31b90:	bne	31bcc <fts_children@@Base+0x130>
   31b94:	mov	r0, r6
   31b98:	bl	12748 <close@plt>
   31b9c:	ldr	r0, [r5, #4]
   31ba0:	pop	{r4, r5, r6, r7, r8, pc}
   31ba4:	ldr	r0, [r6, #8]
   31ba8:	pop	{r4, r5, r6, r7, r8, pc}
   31bac:	mov	r1, r6
   31bb0:	mov	r2, #1
   31bb4:	mov	r0, r5
   31bb8:	bl	2fd98 <__assert_fail@plt+0x1d5fc>
   31bbc:	b	31b9c <fts_children@@Base+0x100>
   31bc0:	str	r4, [r5, #4]
   31bc4:	mov	r0, r4
   31bc8:	pop	{r4, r5, r6, r7, r8, pc}
   31bcc:	ldr	r5, [r7]
   31bd0:	mov	r0, r6
   31bd4:	bl	12748 <close@plt>
   31bd8:	str	r5, [r7]
   31bdc:	mov	r0, r4
   31be0:	pop	{r4, r5, r6, r7, r8, pc}
   31be4:	andeq	r7, r4, r8, ror r8
   31be8:	push	{r4, r5, r6, r7, r8, lr}
   31bec:	subs	r7, r0, #0
   31bf0:	ldr	r5, [pc, #108]	; 31c64 <fts_children@@Base+0x1c8>
   31bf4:	sub	sp, sp, #8
   31bf8:	mov	r8, r1
   31bfc:	ldr	r1, [r5]
   31c00:	moveq	r7, sp
   31c04:	str	r1, [sp, #4]
   31c08:	mov	r0, r7
   31c0c:	mov	r1, r8
   31c10:	mov	r6, r2
   31c14:	bl	12370 <mbrtowc@plt>
   31c18:	cmp	r6, #0
   31c1c:	cmnne	r0, #3
   31c20:	mov	r4, r0
   31c24:	bhi	31c44 <fts_children@@Base+0x1a8>
   31c28:	ldr	r2, [sp, #4]
   31c2c:	ldr	r3, [r5]
   31c30:	mov	r0, r4
   31c34:	cmp	r2, r3
   31c38:	bne	31c60 <fts_children@@Base+0x1c4>
   31c3c:	add	sp, sp, #8
   31c40:	pop	{r4, r5, r6, r7, r8, pc}
   31c44:	mov	r0, #0
   31c48:	bl	41618 <fts_children@@Base+0xfb7c>
   31c4c:	cmp	r0, #0
   31c50:	moveq	r4, #1
   31c54:	ldrbeq	r3, [r8]
   31c58:	streq	r3, [r7]
   31c5c:	b	31c28 <fts_children@@Base+0x18c>
   31c60:	bl	12244 <__stack_chk_fail@plt>
   31c64:	andeq	fp, r5, r0, ror #24
   31c68:	push	{r4, r5, r6, r7, r8, lr}
   31c6c:	mov	r4, r0
   31c70:	bl	1249c <strlen@plt>
   31c74:	mov	ip, r4
   31c78:	mov	r3, #0
   31c7c:	add	r0, r0, #1
   31c80:	b	31c94 <fts_children@@Base+0x1f8>
   31c84:	cmp	r0, r2
   31c88:	strb	r1, [ip], #1
   31c8c:	popls	{r4, r5, r6, r7, r8, pc}
   31c90:	mov	r3, r2
   31c94:	ldrb	r1, [r4, r3]
   31c98:	add	r2, r3, #1
   31c9c:	cmp	r1, #92	; 0x5c
   31ca0:	bne	31c84 <fts_children@@Base+0x1e8>
   31ca4:	add	lr, r3, #4
   31ca8:	cmp	lr, r0
   31cac:	bcs	31c84 <fts_children@@Base+0x1e8>
   31cb0:	ldrb	r5, [r4, r2]
   31cb4:	sub	r5, r5, #48	; 0x30
   31cb8:	uxtb	r6, r5
   31cbc:	cmp	r6, #3
   31cc0:	bhi	31c84 <fts_children@@Base+0x1e8>
   31cc4:	add	r3, r4, r3
   31cc8:	ldrb	r6, [r3, #2]
   31ccc:	sub	r6, r6, #48	; 0x30
   31cd0:	uxtb	r7, r6
   31cd4:	cmp	r7, #7
   31cd8:	bhi	31c84 <fts_children@@Base+0x1e8>
   31cdc:	ldrb	r3, [r3, #3]
   31ce0:	sub	r3, r3, #48	; 0x30
   31ce4:	uxtb	r3, r3
   31ce8:	cmp	r3, #7
   31cec:	bhi	31c84 <fts_children@@Base+0x1e8>
   31cf0:	add	r5, r6, r5, lsl #3
   31cf4:	mov	r2, lr
   31cf8:	add	r5, r3, r5, lsl #3
   31cfc:	strb	r5, [ip], #1
   31d00:	b	31c90 <fts_children@@Base+0x1f4>
   31d04:	push	{r4, lr}
   31d08:	mov	r4, r0
   31d0c:	ldr	r0, [r0]
   31d10:	bl	12154 <free@plt>
   31d14:	ldr	r0, [r4, #4]
   31d18:	bl	12154 <free@plt>
   31d1c:	ldr	r0, [r4, #8]
   31d20:	bl	12154 <free@plt>
   31d24:	ldrb	r3, [r4, #24]
   31d28:	tst	r3, #4
   31d2c:	bne	31d3c <fts_children@@Base+0x2a0>
   31d30:	mov	r0, r4
   31d34:	pop	{r4, lr}
   31d38:	b	12154 <free@plt>
   31d3c:	ldr	r0, [r4, #12]
   31d40:	bl	12154 <free@plt>
   31d44:	mov	r0, r4
   31d48:	pop	{r4, lr}
   31d4c:	b	12154 <free@plt>
   31d50:	ldr	r3, [pc, #1704]	; 32400 <fts_children@@Base+0x964>
   31d54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31d58:	sub	sp, sp, #100	; 0x64
   31d5c:	ldr	r3, [r3]
   31d60:	ldr	r1, [pc, #1692]	; 32404 <fts_children@@Base+0x968>
   31d64:	ldr	r0, [pc, #1692]	; 32408 <fts_children@@Base+0x96c>
   31d68:	str	r3, [sp, #92]	; 0x5c
   31d6c:	bl	126ac <fopen64@plt>
   31d70:	subs	r5, r0, #0
   31d74:	beq	32108 <fts_children@@Base+0x66c>
   31d78:	ldr	r7, [pc, #1676]	; 3240c <fts_children@@Base+0x970>
   31d7c:	ldr	r8, [pc, #1676]	; 32410 <fts_children@@Base+0x974>
   31d80:	ldr	sl, [pc, #1676]	; 32414 <fts_children@@Base+0x978>
   31d84:	add	r6, sp, #40	; 0x28
   31d88:	mov	r3, #0
   31d8c:	str	r3, [sp, #44]	; 0x2c
   31d90:	str	r3, [sp, #48]	; 0x30
   31d94:	mov	r3, r5
   31d98:	mov	r2, #10
   31d9c:	add	r1, sp, #48	; 0x30
   31da0:	add	r0, sp, #44	; 0x2c
   31da4:	bl	120ac <__getdelim@plt>
   31da8:	cmn	r0, #1
   31dac:	beq	31fb0 <fts_children@@Base+0x514>
   31db0:	add	r0, sp, #64	; 0x40
   31db4:	add	r1, sp, #60	; 0x3c
   31db8:	add	r2, sp, #88	; 0x58
   31dbc:	add	r3, sp, #84	; 0x54
   31dc0:	add	ip, sp, #39	; 0x27
   31dc4:	str	r0, [sp, #12]
   31dc8:	str	r1, [sp, #8]
   31dcc:	str	r2, [sp, #4]
   31dd0:	str	r3, [sp]
   31dd4:	str	ip, [sp, #16]
   31dd8:	add	r3, sp, #56	; 0x38
   31ddc:	add	r2, sp, #52	; 0x34
   31de0:	mov	r1, r7
   31de4:	ldr	r0, [sp, #44]	; 0x2c
   31de8:	bl	12640 <sscanf@plt>
   31dec:	bic	r0, r0, #4
   31df0:	cmp	r0, #3
   31df4:	bne	31d94 <fts_children@@Base+0x2f8>
   31df8:	ldr	r3, [sp, #64]	; 0x40
   31dfc:	ldr	r0, [sp, #44]	; 0x2c
   31e00:	mov	r1, r8
   31e04:	add	r0, r0, r3
   31e08:	bl	40814 <fts_children@@Base+0xed78>
   31e0c:	subs	fp, r0, #0
   31e10:	beq	31d94 <fts_children@@Base+0x2f8>
   31e14:	add	r2, sp, #80	; 0x50
   31e18:	add	r3, sp, #76	; 0x4c
   31e1c:	add	r1, sp, #39	; 0x27
   31e20:	str	r1, [sp, #8]
   31e24:	str	r2, [sp, #4]
   31e28:	str	r3, [sp]
   31e2c:	add	r2, sp, #68	; 0x44
   31e30:	add	r3, sp, #72	; 0x48
   31e34:	mov	r1, sl
   31e38:	bl	12640 <sscanf@plt>
   31e3c:	bic	r9, r0, #4
   31e40:	cmp	r9, #1
   31e44:	bne	31d94 <fts_children@@Base+0x2f8>
   31e48:	ldr	r1, [sp, #44]	; 0x2c
   31e4c:	ldr	r2, [sp, #88]	; 0x58
   31e50:	mov	r3, #0
   31e54:	strb	r3, [r1, r2]
   31e58:	ldr	r1, [sp, #44]	; 0x2c
   31e5c:	ldr	r2, [sp, #64]	; 0x40
   31e60:	strb	r3, [r1, r2]
   31e64:	ldr	r2, [sp, #72]	; 0x48
   31e68:	strb	r3, [fp, r2]
   31e6c:	ldr	r2, [sp, #80]	; 0x50
   31e70:	strb	r3, [fp, r2]
   31e74:	ldr	r0, [sp, #76]	; 0x4c
   31e78:	add	r0, fp, r0
   31e7c:	bl	31c68 <fts_children@@Base+0x1cc>
   31e80:	ldr	r3, [sp, #60]	; 0x3c
   31e84:	ldr	r0, [sp, #44]	; 0x2c
   31e88:	add	r0, r0, r3
   31e8c:	bl	31c68 <fts_children@@Base+0x1cc>
   31e90:	ldr	r3, [sp, #84]	; 0x54
   31e94:	ldr	r0, [sp, #44]	; 0x2c
   31e98:	add	r0, r0, r3
   31e9c:	bl	31c68 <fts_children@@Base+0x1cc>
   31ea0:	mov	r0, #32
   31ea4:	bl	2df04 <__assert_fail@plt+0x1b768>
   31ea8:	mov	r4, r0
   31eac:	ldr	r0, [sp, #76]	; 0x4c
   31eb0:	add	r0, fp, r0
   31eb4:	bl	2e130 <__assert_fail@plt+0x1b994>
   31eb8:	ldr	r2, [sp, #44]	; 0x2c
   31ebc:	ldr	r3, [sp, #60]	; 0x3c
   31ec0:	str	r0, [r4]
   31ec4:	add	r0, r2, r3
   31ec8:	bl	2e130 <__assert_fail@plt+0x1b994>
   31ecc:	ldr	r2, [sp, #44]	; 0x2c
   31ed0:	ldr	r3, [sp, #84]	; 0x54
   31ed4:	str	r0, [r4, #4]
   31ed8:	add	r0, r2, r3
   31edc:	bl	2e130 <__assert_fail@plt+0x1b994>
   31ee0:	ldr	r3, [sp, #68]	; 0x44
   31ee4:	str	r0, [r4, #8]
   31ee8:	add	r0, fp, r3
   31eec:	bl	2e130 <__assert_fail@plt+0x1b994>
   31ef0:	ldr	r3, [sp, #52]	; 0x34
   31ef4:	ldr	lr, [pc, #1308]	; 32418 <fts_children@@Base+0x97c>
   31ef8:	ldr	r2, [sp, #56]	; 0x38
   31efc:	and	lr, lr, r3, lsl #8
   31f00:	ldr	r1, [pc, #1300]	; 3241c <fts_children@@Base+0x980>
   31f04:	bic	r3, r3, #4080	; 0xff0
   31f08:	bic	r3, r3, #15
   31f0c:	and	r1, r1, r2, lsl #12
   31f10:	orr	r3, r3, r2, lsr #20
   31f14:	ldrb	ip, [r4, #24]
   31f18:	uxtb	r2, r2
   31f1c:	orr	r2, r2, lr
   31f20:	orr	r2, r1, r2
   31f24:	orr	ip, ip, #4
   31f28:	ldr	r1, [pc, #1264]	; 32420 <fts_children@@Base+0x984>
   31f2c:	strb	ip, [r4, #24]
   31f30:	strd	r2, [r4, #16]
   31f34:	str	r0, [r4, #12]
   31f38:	mov	fp, r0
   31f3c:	bl	120dc <strcmp@plt>
   31f40:	cmp	r0, #0
   31f44:	beq	31f5c <fts_children@@Base+0x4c0>
   31f48:	ldr	r1, [pc, #1236]	; 32424 <fts_children@@Base+0x988>
   31f4c:	mov	r0, fp
   31f50:	bl	120dc <strcmp@plt>
   31f54:	cmp	r0, #0
   31f58:	bne	32004 <fts_children@@Base+0x568>
   31f5c:	mov	r0, #1
   31f60:	ldrb	r9, [r4, #24]
   31f64:	ldr	r3, [r4]
   31f68:	mov	r1, #58	; 0x3a
   31f6c:	bic	r9, r9, #1
   31f70:	orr	r9, r0, r9
   31f74:	strb	r9, [r4, #24]
   31f78:	mov	r0, r3
   31f7c:	str	r3, [sp, #28]
   31f80:	bl	124a8 <strchr@plt>
   31f84:	ldr	r3, [sp, #28]
   31f88:	cmp	r0, #0
   31f8c:	beq	320e4 <fts_children@@Base+0x648>
   31f90:	mov	r0, #1
   31f94:	ldrb	r3, [r4, #24]
   31f98:	bic	r3, r3, #2
   31f9c:	orr	r3, r3, r0, lsl #1
   31fa0:	strb	r3, [r4, #24]
   31fa4:	str	r4, [r6]
   31fa8:	add	r6, r4, #28
   31fac:	b	31d94 <fts_children@@Base+0x2f8>
   31fb0:	ldr	r0, [sp, #44]	; 0x2c
   31fb4:	bl	12154 <free@plt>
   31fb8:	mov	r0, r5
   31fbc:	bl	12178 <ferror@plt>
   31fc0:	cmp	r0, #0
   31fc4:	bne	323a8 <fts_children@@Base+0x90c>
   31fc8:	mov	r0, r5
   31fcc:	bl	125b0 <fclose@plt>
   31fd0:	cmn	r0, #1
   31fd4:	beq	32308 <fts_children@@Base+0x86c>
   31fd8:	mov	r3, #0
   31fdc:	str	r3, [r6]
   31fe0:	ldr	r5, [sp, #40]	; 0x28
   31fe4:	ldr	r3, [pc, #1044]	; 32400 <fts_children@@Base+0x964>
   31fe8:	ldr	r2, [sp, #92]	; 0x5c
   31fec:	mov	r0, r5
   31ff0:	ldr	r3, [r3]
   31ff4:	cmp	r2, r3
   31ff8:	bne	323fc <fts_children@@Base+0x960>
   31ffc:	add	sp, sp, #100	; 0x64
   32000:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32004:	ldr	r1, [pc, #1052]	; 32428 <fts_children@@Base+0x98c>
   32008:	mov	r0, fp
   3200c:	bl	120dc <strcmp@plt>
   32010:	cmp	r0, #0
   32014:	beq	31f5c <fts_children@@Base+0x4c0>
   32018:	ldr	r1, [pc, #1036]	; 3242c <fts_children@@Base+0x990>
   3201c:	mov	r0, fp
   32020:	bl	120dc <strcmp@plt>
   32024:	cmp	r0, #0
   32028:	beq	31f5c <fts_children@@Base+0x4c0>
   3202c:	ldr	r1, [pc, #1020]	; 32430 <fts_children@@Base+0x994>
   32030:	mov	r0, fp
   32034:	bl	120dc <strcmp@plt>
   32038:	cmp	r0, #0
   3203c:	beq	31f5c <fts_children@@Base+0x4c0>
   32040:	ldr	r1, [pc, #1004]	; 32434 <fts_children@@Base+0x998>
   32044:	mov	r0, fp
   32048:	bl	120dc <strcmp@plt>
   3204c:	cmp	r0, #0
   32050:	beq	31f5c <fts_children@@Base+0x4c0>
   32054:	ldr	r1, [pc, #988]	; 32438 <fts_children@@Base+0x99c>
   32058:	mov	r0, fp
   3205c:	bl	120dc <strcmp@plt>
   32060:	cmp	r0, #0
   32064:	beq	31f5c <fts_children@@Base+0x4c0>
   32068:	ldr	r1, [pc, #972]	; 3243c <fts_children@@Base+0x9a0>
   3206c:	mov	r0, fp
   32070:	bl	120dc <strcmp@plt>
   32074:	cmp	r0, #0
   32078:	beq	31f5c <fts_children@@Base+0x4c0>
   3207c:	ldr	r1, [pc, #956]	; 32440 <fts_children@@Base+0x9a4>
   32080:	mov	r0, fp
   32084:	bl	120dc <strcmp@plt>
   32088:	cmp	r0, #0
   3208c:	beq	31f5c <fts_children@@Base+0x4c0>
   32090:	ldr	r1, [pc, #940]	; 32444 <fts_children@@Base+0x9a8>
   32094:	mov	r0, fp
   32098:	bl	120dc <strcmp@plt>
   3209c:	cmp	r0, #0
   320a0:	beq	31f5c <fts_children@@Base+0x4c0>
   320a4:	ldr	r1, [pc, #924]	; 32448 <fts_children@@Base+0x9ac>
   320a8:	mov	r0, fp
   320ac:	bl	120dc <strcmp@plt>
   320b0:	cmp	r0, #0
   320b4:	beq	31f5c <fts_children@@Base+0x4c0>
   320b8:	ldr	r1, [pc, #908]	; 3244c <fts_children@@Base+0x9b0>
   320bc:	mov	r0, fp
   320c0:	bl	120dc <strcmp@plt>
   320c4:	cmp	r0, #0
   320c8:	beq	31f5c <fts_children@@Base+0x4c0>
   320cc:	ldr	r1, [pc, #892]	; 32450 <fts_children@@Base+0x9b4>
   320d0:	mov	r0, fp
   320d4:	bl	120dc <strcmp@plt>
   320d8:	clz	r0, r0
   320dc:	lsr	r0, r0, #5
   320e0:	b	31f60 <fts_children@@Base+0x4c4>
   320e4:	ldrb	r2, [r3]
   320e8:	cmp	r2, #47	; 0x2f
   320ec:	beq	3236c <fts_children@@Base+0x8d0>
   320f0:	mov	r1, r3
   320f4:	ldr	r0, [pc, #856]	; 32454 <fts_children@@Base+0x9b8>
   320f8:	bl	120dc <strcmp@plt>
   320fc:	clz	r0, r0
   32100:	lsr	r0, r0, #5
   32104:	b	31f94 <fts_children@@Base+0x4f8>
   32108:	ldr	r1, [pc, #756]	; 32404 <fts_children@@Base+0x968>
   3210c:	ldr	r0, [pc, #836]	; 32458 <fts_children@@Base+0x9bc>
   32110:	bl	126dc <setmntent@plt>
   32114:	subs	r5, r0, #0
   32118:	beq	31fe4 <fts_children@@Base+0x548>
   3211c:	mov	r0, r5
   32120:	bl	12394 <getmntent@plt>
   32124:	add	r6, sp, #40	; 0x28
   32128:	ldr	r8, [pc, #812]	; 3245c <fts_children@@Base+0x9c0>
   3212c:	ldr	r7, [pc, #748]	; 32420 <fts_children@@Base+0x984>
   32130:	ldr	sl, [pc, #748]	; 32424 <fts_children@@Base+0x988>
   32134:	subs	r9, r0, #0
   32138:	beq	322f8 <fts_children@@Base+0x85c>
   3213c:	mov	r1, r8
   32140:	bl	12340 <hasmntopt@plt>
   32144:	mov	fp, r0
   32148:	mov	r0, #32
   3214c:	bl	2df04 <__assert_fail@plt+0x1b768>
   32150:	mov	r4, r0
   32154:	ldr	r0, [r9]
   32158:	bl	2e130 <__assert_fail@plt+0x1b994>
   3215c:	str	r0, [r4]
   32160:	ldr	r0, [r9, #4]
   32164:	bl	2e130 <__assert_fail@plt+0x1b994>
   32168:	mov	r3, #0
   3216c:	stmib	r4, {r0, r3}
   32170:	ldr	r0, [r9, #8]
   32174:	bl	2e130 <__assert_fail@plt+0x1b994>
   32178:	ldrb	r3, [r4, #24]
   3217c:	mov	r1, r7
   32180:	orr	r3, r3, #4
   32184:	strb	r3, [r4, #24]
   32188:	str	r0, [r4, #12]
   3218c:	mov	r9, r0
   32190:	bl	120dc <strcmp@plt>
   32194:	cmp	r0, #0
   32198:	beq	32294 <fts_children@@Base+0x7f8>
   3219c:	mov	r1, sl
   321a0:	mov	r0, r9
   321a4:	bl	120dc <strcmp@plt>
   321a8:	cmp	r0, #0
   321ac:	beq	32294 <fts_children@@Base+0x7f8>
   321b0:	ldr	r1, [pc, #624]	; 32428 <fts_children@@Base+0x98c>
   321b4:	mov	r0, r9
   321b8:	bl	120dc <strcmp@plt>
   321bc:	cmp	r0, #0
   321c0:	beq	32294 <fts_children@@Base+0x7f8>
   321c4:	ldr	r1, [pc, #608]	; 3242c <fts_children@@Base+0x990>
   321c8:	mov	r0, r9
   321cc:	bl	120dc <strcmp@plt>
   321d0:	cmp	r0, #0
   321d4:	beq	32294 <fts_children@@Base+0x7f8>
   321d8:	ldr	r1, [pc, #592]	; 32430 <fts_children@@Base+0x994>
   321dc:	mov	r0, r9
   321e0:	bl	120dc <strcmp@plt>
   321e4:	cmp	r0, #0
   321e8:	beq	32294 <fts_children@@Base+0x7f8>
   321ec:	ldr	r1, [pc, #576]	; 32434 <fts_children@@Base+0x998>
   321f0:	mov	r0, r9
   321f4:	bl	120dc <strcmp@plt>
   321f8:	cmp	r0, #0
   321fc:	beq	32294 <fts_children@@Base+0x7f8>
   32200:	ldr	r1, [pc, #560]	; 32438 <fts_children@@Base+0x99c>
   32204:	mov	r0, r9
   32208:	bl	120dc <strcmp@plt>
   3220c:	cmp	r0, #0
   32210:	beq	32294 <fts_children@@Base+0x7f8>
   32214:	ldr	r1, [pc, #544]	; 3243c <fts_children@@Base+0x9a0>
   32218:	mov	r0, r9
   3221c:	bl	120dc <strcmp@plt>
   32220:	cmp	r0, #0
   32224:	beq	32294 <fts_children@@Base+0x7f8>
   32228:	ldr	r1, [pc, #528]	; 32440 <fts_children@@Base+0x9a4>
   3222c:	mov	r0, r9
   32230:	bl	120dc <strcmp@plt>
   32234:	cmp	r0, #0
   32238:	beq	32294 <fts_children@@Base+0x7f8>
   3223c:	ldr	r1, [pc, #512]	; 32444 <fts_children@@Base+0x9a8>
   32240:	mov	r0, r9
   32244:	bl	120dc <strcmp@plt>
   32248:	cmp	r0, #0
   3224c:	beq	32294 <fts_children@@Base+0x7f8>
   32250:	ldr	r1, [pc, #496]	; 32448 <fts_children@@Base+0x9ac>
   32254:	mov	r0, r9
   32258:	bl	120dc <strcmp@plt>
   3225c:	cmp	r0, #0
   32260:	beq	32294 <fts_children@@Base+0x7f8>
   32264:	ldr	r1, [pc, #480]	; 3244c <fts_children@@Base+0x9b0>
   32268:	mov	r0, r9
   3226c:	bl	120dc <strcmp@plt>
   32270:	cmp	r0, #0
   32274:	beq	32294 <fts_children@@Base+0x7f8>
   32278:	ldr	r1, [pc, #464]	; 32450 <fts_children@@Base+0x9b4>
   3227c:	mov	r0, r9
   32280:	bl	120dc <strcmp@plt>
   32284:	orrs	r3, fp, r0
   32288:	moveq	r3, #1
   3228c:	movne	r3, #0
   32290:	b	32298 <fts_children@@Base+0x7fc>
   32294:	mov	r3, #1
   32298:	ldrb	r2, [r4, #24]
   3229c:	ldr	fp, [r4]
   322a0:	mov	r1, #58	; 0x3a
   322a4:	bic	r2, r2, #1
   322a8:	orr	r3, r3, r2
   322ac:	mov	r0, fp
   322b0:	strb	r3, [r4, #24]
   322b4:	bl	124a8 <strchr@plt>
   322b8:	cmp	r0, #0
   322bc:	beq	32348 <fts_children@@Base+0x8ac>
   322c0:	mov	r2, #1
   322c4:	ldrb	r3, [r4, #24]
   322c8:	mvn	r0, #0
   322cc:	mvn	r1, #0
   322d0:	bic	r3, r3, #2
   322d4:	orr	r3, r3, r2, lsl #1
   322d8:	strd	r0, [r4, #16]
   322dc:	strb	r3, [r4, #24]
   322e0:	mov	r0, r5
   322e4:	str	r4, [r6]
   322e8:	bl	12394 <getmntent@plt>
   322ec:	add	r6, r4, #28
   322f0:	subs	r9, r0, #0
   322f4:	bne	3213c <fts_children@@Base+0x6a0>
   322f8:	mov	r0, r5
   322fc:	bl	125d4 <endmntent@plt>
   32300:	cmp	r0, #0
   32304:	bne	31fd8 <fts_children@@Base+0x53c>
   32308:	bl	124d8 <__errno_location@plt>
   3230c:	ldr	r5, [r0]
   32310:	mov	r7, r0
   32314:	mov	r3, #0
   32318:	str	r3, [r6]
   3231c:	ldr	r0, [sp, #40]	; 0x28
   32320:	cmp	r0, r3
   32324:	beq	3233c <fts_children@@Base+0x8a0>
   32328:	ldr	r4, [r0, #28]
   3232c:	bl	31d04 <fts_children@@Base+0x268>
   32330:	subs	r0, r4, #0
   32334:	str	r4, [sp, #40]	; 0x28
   32338:	bne	32328 <fts_children@@Base+0x88c>
   3233c:	str	r5, [r7]
   32340:	mov	r5, #0
   32344:	b	31fe4 <fts_children@@Base+0x548>
   32348:	ldrb	r3, [fp]
   3234c:	cmp	r3, #47	; 0x2f
   32350:	beq	323c4 <fts_children@@Base+0x928>
   32354:	mov	r1, fp
   32358:	ldr	r0, [pc, #244]	; 32454 <fts_children@@Base+0x9b8>
   3235c:	bl	120dc <strcmp@plt>
   32360:	clz	r2, r0
   32364:	lsr	r2, r2, #5
   32368:	b	322c4 <fts_children@@Base+0x828>
   3236c:	ldrb	r2, [r3, #1]
   32370:	cmp	r2, #47	; 0x2f
   32374:	bne	320f0 <fts_children@@Base+0x654>
   32378:	ldr	r1, [pc, #224]	; 32460 <fts_children@@Base+0x9c4>
   3237c:	mov	r0, fp
   32380:	bl	120dc <strcmp@plt>
   32384:	cmp	r0, #0
   32388:	beq	31f90 <fts_children@@Base+0x4f4>
   3238c:	mov	r0, fp
   32390:	ldr	r1, [pc, #204]	; 32464 <fts_children@@Base+0x9c8>
   32394:	bl	120dc <strcmp@plt>
   32398:	ldr	r3, [sp, #28]
   3239c:	cmp	r0, #0
   323a0:	beq	31f90 <fts_children@@Base+0x4f4>
   323a4:	b	320f0 <fts_children@@Base+0x654>
   323a8:	bl	124d8 <__errno_location@plt>
   323ac:	mov	r7, r0
   323b0:	mov	r0, r5
   323b4:	ldr	r5, [r7]
   323b8:	bl	125b0 <fclose@plt>
   323bc:	str	r5, [r7]
   323c0:	b	32314 <fts_children@@Base+0x878>
   323c4:	ldrb	r3, [fp, #1]
   323c8:	cmp	r3, #47	; 0x2f
   323cc:	bne	32354 <fts_children@@Base+0x8b8>
   323d0:	ldr	r1, [pc, #136]	; 32460 <fts_children@@Base+0x9c4>
   323d4:	mov	r0, r9
   323d8:	bl	120dc <strcmp@plt>
   323dc:	cmp	r0, #0
   323e0:	beq	322c0 <fts_children@@Base+0x824>
   323e4:	mov	r0, r9
   323e8:	ldr	r1, [pc, #116]	; 32464 <fts_children@@Base+0x9c8>
   323ec:	bl	120dc <strcmp@plt>
   323f0:	cmp	r0, #0
   323f4:	beq	322c0 <fts_children@@Base+0x824>
   323f8:	b	32354 <fts_children@@Base+0x8b8>
   323fc:	bl	12244 <__stack_chk_fail@plt>
   32400:	andeq	fp, r5, r0, ror #24
   32404:	andeq	sl, r4, r4, ror #20
   32408:			; <UNDEFINED> instruction: 0x0004a6b8
   3240c:	ldrdeq	sl, [r4], -r0
   32410:	strdeq	sl, [r4], -r0
   32414:	strdeq	sl, [r4], -r4
   32418:	andeq	pc, pc, r0, lsl #30
   3241c:			; <UNDEFINED> instruction: 0xfff00000	; IMB
   32420:	andeq	sl, r4, ip, lsl #14
   32424:	andeq	sl, r4, r4, lsl r7
   32428:	andeq	sl, r4, ip, lsl r7
   3242c:	andeq	sl, r4, r4, lsr #14
   32430:	andeq	sl, r4, ip, lsr #14
   32434:	andeq	sl, r4, r4, lsr r7
   32438:	andeq	sl, r4, ip, lsr r7
   3243c:	andeq	sl, r4, r4, asr #14
   32440:	andeq	sl, r4, r0, asr r7
   32444:	andeq	sl, r4, r8, asr r7
   32448:	andeq	sl, r4, r0, ror #14
   3244c:	andeq	r6, r4, r8, asr #16
   32450:	andeq	sl, r4, r8, ror #14
   32454:	andeq	sl, r4, r0, lsl #15
   32458:	andeq	sl, r4, r8, lsl #15
   3245c:	muleq	r4, r4, r7
   32460:	andeq	sl, r4, r0, ror r7
   32464:	andeq	sl, r4, r8, ror r7
   32468:	cmp	r0, #0
   3246c:	clz	r3, r1
   32470:	lsr	r3, r3, #5
   32474:	movne	r2, r3
   32478:	moveq	r2, #1
   3247c:	cmp	r2, #0
   32480:	bne	324cc <fts_children@@Base+0xa30>
   32484:	ldr	r3, [r0, #4]
   32488:	ldr	ip, [r1, #4]
   3248c:	cmp	r3, ip
   32490:	bne	324d0 <fts_children@@Base+0xa34>
   32494:	subs	r3, r3, #1
   32498:	bmi	324e4 <fts_children@@Base+0xa48>
   3249c:	push	{lr}		; (str lr, [sp, #-4]!)
   324a0:	b	324ac <fts_children@@Base+0xa10>
   324a4:	subs	r3, r3, #1
   324a8:	bmi	324d8 <fts_children@@Base+0xa3c>
   324ac:	ldr	lr, [r0, #8]
   324b0:	ldr	ip, [r1, #8]
   324b4:	ldr	lr, [lr, r3, lsl #2]
   324b8:	ldr	ip, [ip, r3, lsl #2]
   324bc:	cmp	lr, ip
   324c0:	beq	324a4 <fts_children@@Base+0xa08>
   324c4:	mov	r0, r2
   324c8:	pop	{pc}		; (ldr pc, [sp], #4)
   324cc:	mov	r2, #0
   324d0:	mov	r0, r2
   324d4:	bx	lr
   324d8:	mov	r2, #1
   324dc:	mov	r0, r2
   324e0:	pop	{pc}		; (ldr pc, [sp], #4)
   324e4:	mov	r2, #1
   324e8:	b	324d0 <fts_children@@Base+0xa34>
   324ec:	push	{r4, r5, r6, lr}
   324f0:	mov	r4, r0
   324f4:	mov	r6, r1
   324f8:	mov	r5, r2
   324fc:	b	32504 <fts_children@@Base+0xa68>
   32500:	mov	r4, r3
   32504:	ldr	r3, [r4, #4]
   32508:	cmp	r3, #0
   3250c:	bne	32500 <fts_children@@Base+0xa64>
   32510:	ldr	r3, [r4, #8]
   32514:	cmp	r3, #0
   32518:	bne	32500 <fts_children@@Base+0xa64>
   3251c:	mov	r1, r4
   32520:	mov	r0, r5
   32524:	blx	r6
   32528:	cmp	r0, #0
   3252c:	popne	{r4, r5, r6, pc}
   32530:	ldr	r2, [r4]
   32534:	cmp	r2, #0
   32538:	popeq	{r4, r5, r6, pc}
   3253c:	ldr	r3, [r2, #8]
   32540:	cmp	r3, #0
   32544:	sub	r4, r3, r4
   32548:	clz	r4, r4
   3254c:	lsr	r4, r4, #5
   32550:	moveq	r4, #1
   32554:	cmp	r4, #0
   32558:	mov	r4, r2
   3255c:	bne	3251c <fts_children@@Base+0xa80>
   32560:	b	32500 <fts_children@@Base+0xa64>
   32564:	push	{r4, lr}
   32568:	mov	lr, r0
   3256c:	ldr	r3, [r1, #40]	; 0x28
   32570:	ldr	r0, [r1, #56]	; 0x38
   32574:	cmp	r0, r3
   32578:	ble	32620 <fts_children@@Base+0xb84>
   3257c:	ldr	r0, [r1, #4]
   32580:	ldr	r4, [r1, #80]	; 0x50
   32584:	ldrb	ip, [r0, r3]
   32588:	cmp	r4, #1
   3258c:	strb	ip, [lr]
   32590:	ble	325b0 <fts_children@@Base+0xb14>
   32594:	ldr	r4, [r1, #28]
   32598:	cmp	r3, r4
   3259c:	beq	325b0 <fts_children@@Base+0xb14>
   325a0:	ldr	r4, [r1, #8]
   325a4:	ldr	r4, [r4, r3, lsl #2]
   325a8:	cmn	r4, #1
   325ac:	beq	32630 <fts_children@@Base+0xb94>
   325b0:	cmp	ip, #92	; 0x5c
   325b4:	beq	325e0 <fts_children@@Base+0xb44>
   325b8:	cmp	ip, #91	; 0x5b
   325bc:	beq	3263c <fts_children@@Base+0xba0>
   325c0:	cmp	ip, #93	; 0x5d
   325c4:	beq	32684 <fts_children@@Base+0xbe8>
   325c8:	cmp	ip, #94	; 0x5e
   325cc:	bne	32608 <fts_children@@Base+0xb6c>
   325d0:	mov	r3, #25
   325d4:	strb	r3, [lr, #4]
   325d8:	mov	r0, #1
   325dc:	pop	{r4, pc}
   325e0:	tst	r2, #1
   325e4:	beq	325f8 <fts_children@@Base+0xb5c>
   325e8:	ldr	r2, [r1, #48]	; 0x30
   325ec:	add	r3, r3, #1
   325f0:	cmp	r3, r2
   325f4:	blt	32694 <fts_children@@Base+0xbf8>
   325f8:	mov	r3, #1
   325fc:	mov	r0, r3
   32600:	strb	r3, [lr, #4]
   32604:	pop	{r4, pc}
   32608:	cmp	ip, #45	; 0x2d
   3260c:	bne	325f8 <fts_children@@Base+0xb5c>
   32610:	mov	r3, #22
   32614:	strb	r3, [lr, #4]
   32618:	mov	r0, #1
   3261c:	pop	{r4, pc}
   32620:	mov	r3, #2
   32624:	strb	r3, [lr, #4]
   32628:	mov	r0, #0
   3262c:	pop	{r4, pc}
   32630:	mov	r0, #1
   32634:	strb	r0, [lr, #4]
   32638:	pop	{r4, pc}
   3263c:	ldr	r1, [r1, #48]	; 0x30
   32640:	add	ip, r3, #1
   32644:	cmp	ip, r1
   32648:	bge	32670 <fts_children@@Base+0xbd4>
   3264c:	add	r3, r0, r3
   32650:	ldrb	r3, [r3, #1]
   32654:	cmp	r3, #58	; 0x3a
   32658:	strb	r3, [lr]
   3265c:	beq	326cc <fts_children@@Base+0xc30>
   32660:	cmp	r3, #61	; 0x3d
   32664:	beq	326bc <fts_children@@Base+0xc20>
   32668:	cmp	r3, #46	; 0x2e
   3266c:	beq	326ac <fts_children@@Base+0xc10>
   32670:	mov	r0, #1
   32674:	mov	r3, #91	; 0x5b
   32678:	strb	r0, [lr, #4]
   3267c:	strb	r3, [lr]
   32680:	pop	{r4, pc}
   32684:	mov	r3, #21
   32688:	strb	r3, [lr, #4]
   3268c:	mov	r0, #1
   32690:	pop	{r4, pc}
   32694:	str	r3, [r1, #40]	; 0x28
   32698:	ldrb	r3, [r0, r3]
   3269c:	mov	r0, #1
   326a0:	strb	r0, [lr, #4]
   326a4:	strb	r3, [lr]
   326a8:	pop	{r4, pc}
   326ac:	mov	r3, #26
   326b0:	strb	r3, [lr, #4]
   326b4:	mov	r0, #2
   326b8:	pop	{r4, pc}
   326bc:	mov	r3, #28
   326c0:	strb	r3, [lr, #4]
   326c4:	mov	r0, #2
   326c8:	pop	{r4, pc}
   326cc:	tst	r2, #4
   326d0:	beq	32670 <fts_children@@Base+0xbd4>
   326d4:	mov	r3, #30
   326d8:	strb	r3, [lr, #4]
   326dc:	mov	r0, #2
   326e0:	pop	{r4, pc}
   326e4:	ldrb	r3, [r1, #24]
   326e8:	cmp	r3, #17
   326ec:	bne	32704 <fts_children@@Base+0xc68>
   326f0:	ldr	r3, [r1, #20]
   326f4:	cmp	r0, r3
   326f8:	ldrbeq	r3, [r1, #26]
   326fc:	orreq	r3, r3, #8
   32700:	strbeq	r3, [r1, #26]
   32704:	mov	r0, #0
   32708:	bx	lr
   3270c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32710:	sub	sp, sp, #44	; 0x2c
   32714:	ldr	r8, [r0, #84]	; 0x54
   32718:	str	r3, [sp, #24]
   3271c:	add	r3, r3, r3, lsl #1
   32720:	ldr	r9, [r8, #24]
   32724:	mov	fp, r1
   32728:	add	r9, r9, r3, lsl #2
   3272c:	ldr	r1, [r9, #4]
   32730:	cmp	r1, #0
   32734:	ble	328d0 <fts_children@@Base+0xe34>
   32738:	mov	r7, r2
   3273c:	ldr	r3, [sp, #80]	; 0x50
   32740:	mov	r2, #1
   32744:	add	r3, r3, r2
   32748:	lsl	r2, r2, r7
   3274c:	str	r2, [sp, #12]
   32750:	mvn	r2, r2
   32754:	add	r3, r3, r3, lsl #2
   32758:	str	r3, [sp, #28]
   3275c:	uxth	r3, r2
   32760:	mov	sl, r0
   32764:	str	r3, [sp, #16]
   32768:	mov	r4, #0
   3276c:	b	32784 <fts_children@@Base+0xce8>
   32770:	cmp	r3, #4
   32774:	beq	327e8 <fts_children@@Base+0xd4c>
   32778:	add	r4, r4, #1
   3277c:	cmp	r1, r4
   32780:	ble	328d0 <fts_children@@Base+0xe34>
   32784:	ldr	r3, [r9, #8]
   32788:	ldr	r2, [r8]
   3278c:	ldr	r5, [r3, r4, lsl #2]
   32790:	add	r3, r2, r5, lsl #3
   32794:	ldrb	r3, [r3, #4]
   32798:	cmp	r3, #8
   3279c:	beq	327c8 <fts_children@@Base+0xd2c>
   327a0:	cmp	r3, #9
   327a4:	bne	32770 <fts_children@@Base+0xcd4>
   327a8:	tst	fp, #2
   327ac:	beq	32778 <fts_children@@Base+0xcdc>
   327b0:	ldr	r3, [r2, r5, lsl #3]
   327b4:	cmp	r3, r7
   327b8:	bne	32778 <fts_children@@Base+0xcdc>
   327bc:	mov	r0, #0
   327c0:	add	sp, sp, #44	; 0x2c
   327c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   327c8:	tst	fp, #1
   327cc:	beq	32778 <fts_children@@Base+0xcdc>
   327d0:	ldr	r3, [r2, r5, lsl #3]
   327d4:	cmp	r3, r7
   327d8:	bne	32778 <fts_children@@Base+0xcdc>
   327dc:	mvn	r0, #0
   327e0:	add	sp, sp, #44	; 0x2c
   327e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   327e8:	ldr	r3, [sp, #80]	; 0x50
   327ec:	cmn	r3, #1
   327f0:	beq	32778 <fts_children@@Base+0xcdc>
   327f4:	add	r3, r5, r5, lsl #1
   327f8:	ldr	r2, [sp, #28]
   327fc:	ldr	r6, [sl, #116]	; 0x74
   32800:	lsl	r3, r3, #2
   32804:	str	r4, [sp, #36]	; 0x24
   32808:	ldr	r4, [sp, #24]
   3280c:	str	r9, [sp, #32]
   32810:	mov	r9, r3
   32814:	add	r6, r6, r2, lsl #2
   32818:	and	r2, fp, #2
   3281c:	str	r2, [sp, #20]
   32820:	ldr	r3, [r6, #-20]	; 0xffffffec
   32824:	mov	r2, r7
   32828:	cmp	r3, r5
   3282c:	mov	r1, fp
   32830:	mov	r0, sl
   32834:	bne	328a8 <fts_children@@Base+0xe0c>
   32838:	cmp	r7, #31
   3283c:	bgt	32850 <fts_children@@Base+0xdb4>
   32840:	ldrh	r3, [r6, #-2]
   32844:	ldr	ip, [sp, #12]
   32848:	tst	r3, ip
   3284c:	beq	328a8 <fts_children@@Base+0xe0c>
   32850:	ldr	r3, [r8, #20]
   32854:	add	r3, r3, r9
   32858:	ldr	r3, [r3, #8]
   3285c:	ldr	ip, [r3]
   32860:	cmp	r4, ip
   32864:	mov	r3, ip
   32868:	beq	328dc <fts_children@@Base+0xe40>
   3286c:	ldr	ip, [sp, #80]	; 0x50
   32870:	str	ip, [sp]
   32874:	bl	3270c <fts_children@@Base+0xc70>
   32878:	cmn	r0, #1
   3287c:	beq	327dc <fts_children@@Base+0xd40>
   32880:	cmp	r0, #0
   32884:	bne	32894 <fts_children@@Base+0xdf8>
   32888:	ldr	r3, [sp, #20]
   3288c:	cmp	r3, #0
   32890:	bne	327bc <fts_children@@Base+0xd20>
   32894:	cmp	r7, #31
   32898:	ldrhle	r3, [r6, #-2]
   3289c:	ldrle	r2, [sp, #16]
   328a0:	andle	r3, r3, r2
   328a4:	strhle	r3, [r6, #-2]
   328a8:	add	r6, r6, #20
   328ac:	ldrb	r3, [r6, #-24]	; 0xffffffe8
   328b0:	cmp	r3, #0
   328b4:	bne	32820 <fts_children@@Base+0xd84>
   328b8:	ldr	r9, [sp, #32]
   328bc:	ldr	r4, [sp, #36]	; 0x24
   328c0:	ldr	r1, [r9, #4]
   328c4:	add	r4, r4, #1
   328c8:	cmp	r1, r4
   328cc:	bgt	32784 <fts_children@@Base+0xce8>
   328d0:	asr	r0, fp, #1
   328d4:	add	sp, sp, #44	; 0x2c
   328d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   328dc:	ands	r0, fp, #1
   328e0:	mvnne	r0, #0
   328e4:	add	sp, sp, #44	; 0x2c
   328e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   328ec:	ldr	ip, [r0, #116]	; 0x74
   328f0:	add	r1, r1, r1, lsl #2
   328f4:	push	{r4, r5, lr}
   328f8:	add	r1, ip, r1, lsl #2
   328fc:	ldr	lr, [sp, #12]
   32900:	ldr	ip, [r1, #8]
   32904:	ldr	r5, [sp, #16]
   32908:	cmp	ip, lr
   3290c:	bgt	32958 <fts_children@@Base+0xebc>
   32910:	ldr	r4, [r1, #12]
   32914:	cmp	r4, lr
   32918:	blt	32950 <fts_children@@Base+0xeb4>
   3291c:	cmp	r4, lr
   32920:	sub	r1, ip, lr
   32924:	clz	r1, r1
   32928:	lsr	r1, r1, #5
   3292c:	beq	32940 <fts_children@@Base+0xea4>
   32930:	cmp	ip, lr
   32934:	beq	32944 <fts_children@@Base+0xea8>
   32938:	mov	r0, #0
   3293c:	pop	{r4, r5, pc}
   32940:	orr	r1, r1, #2
   32944:	str	r5, [sp, #12]
   32948:	pop	{r4, r5, lr}
   3294c:	b	3270c <fts_children@@Base+0xc70>
   32950:	mov	r0, #1
   32954:	pop	{r4, r5, pc}
   32958:	mvn	r0, #0
   3295c:	pop	{r4, r5, pc}
   32960:	ldr	r3, [r0, #80]	; 0x50
   32964:	push	{r4, r5, r6, lr}
   32968:	cmp	r3, #1
   3296c:	mov	r4, r0
   32970:	mov	r5, r1
   32974:	ble	329bc <fts_children@@Base+0xf20>
   32978:	cmn	r1, #-1073741823	; 0xc0000001
   3297c:	bhi	329ec <fts_children@@Base+0xf50>
   32980:	lsl	r6, r1, #2
   32984:	mov	r1, r6
   32988:	ldr	r0, [r0, #8]
   3298c:	bl	12268 <realloc@plt>
   32990:	subs	r3, r0, #0
   32994:	beq	329ec <fts_children@@Base+0xf50>
   32998:	ldr	r0, [r4, #12]
   3299c:	str	r3, [r4, #8]
   329a0:	cmp	r0, #0
   329a4:	beq	329bc <fts_children@@Base+0xf20>
   329a8:	mov	r1, r6
   329ac:	bl	12268 <realloc@plt>
   329b0:	cmp	r0, #0
   329b4:	beq	329ec <fts_children@@Base+0xf50>
   329b8:	str	r0, [r4, #12]
   329bc:	ldrb	r3, [r4, #75]	; 0x4b
   329c0:	cmp	r3, #0
   329c4:	bne	329d4 <fts_children@@Base+0xf38>
   329c8:	mov	r0, #0
   329cc:	str	r5, [r4, #36]	; 0x24
   329d0:	pop	{r4, r5, r6, pc}
   329d4:	mov	r1, r5
   329d8:	ldr	r0, [r4, #4]
   329dc:	bl	12268 <realloc@plt>
   329e0:	cmp	r0, #0
   329e4:	strne	r0, [r4, #4]
   329e8:	bne	329c8 <fts_children@@Base+0xf2c>
   329ec:	mov	r0, #12
   329f0:	pop	{r4, r5, r6, pc}
   329f4:	push	{r4, r5, r6, lr}
   329f8:	mov	r5, r1
   329fc:	ldmib	r0, {r1, r3}
   32a00:	ldr	r2, [r0]
   32a04:	mov	r4, r0
   32a08:	cmp	r2, r1
   32a0c:	beq	32a24 <fts_children@@Base+0xf88>
   32a10:	add	r2, r1, #1
   32a14:	str	r2, [r4, #4]
   32a18:	mov	r0, #1
   32a1c:	str	r5, [r3, r1, lsl #2]
   32a20:	pop	{r4, r5, r6, pc}
   32a24:	add	r1, r1, #1
   32a28:	mov	r0, r3
   32a2c:	lsl	r3, r1, #1
   32a30:	str	r3, [r4]
   32a34:	lsl	r1, r1, #3
   32a38:	bl	12268 <realloc@plt>
   32a3c:	subs	r3, r0, #0
   32a40:	ldrne	r1, [r4, #4]
   32a44:	strne	r3, [r4, #8]
   32a48:	bne	32a10 <fts_children@@Base+0xf74>
   32a4c:	mov	r0, r3
   32a50:	pop	{r4, r5, r6, pc}
   32a54:	ldr	r3, [r0]
   32a58:	push	{r4, r5, r6, lr}
   32a5c:	cmp	r3, #0
   32a60:	mov	r4, r0
   32a64:	mov	r6, r1
   32a68:	beq	32a94 <fts_children@@Base+0xff8>
   32a6c:	ldr	r1, [r0, #4]
   32a70:	ldr	r0, [r0, #8]
   32a74:	cmp	r1, #0
   32a78:	bne	32ac4 <fts_children@@Base+0x1028>
   32a7c:	str	r6, [r0]
   32a80:	ldr	r3, [r4, #4]
   32a84:	mov	r0, #1
   32a88:	add	r3, r3, r0
   32a8c:	str	r3, [r4, #4]
   32a90:	pop	{r4, r5, r6, pc}
   32a94:	mov	r5, #1
   32a98:	str	r5, [r0]
   32a9c:	str	r5, [r0, #4]
   32aa0:	mov	r0, #4
   32aa4:	bl	123dc <malloc@plt>
   32aa8:	cmp	r0, #0
   32aac:	str	r0, [r4, #8]
   32ab0:	strne	r6, [r0]
   32ab4:	streq	r0, [r4, #4]
   32ab8:	streq	r0, [r4]
   32abc:	movne	r0, r5
   32ac0:	pop	{r4, r5, r6, pc}
   32ac4:	cmp	r3, r1
   32ac8:	beq	32b4c <fts_children@@Base+0x10b0>
   32acc:	ldr	r3, [r0]
   32ad0:	mov	ip, r1
   32ad4:	cmp	r3, r6
   32ad8:	ble	32b14 <fts_children@@Base+0x1078>
   32adc:	cmp	r1, #0
   32ae0:	ble	32afc <fts_children@@Base+0x1060>
   32ae4:	add	r1, r0, r1, lsl #2
   32ae8:	ldr	r3, [r1, #-4]
   32aec:	str	r3, [r1], #-4
   32af0:	cmp	r1, r0
   32af4:	bne	32ae8 <fts_children@@Base+0x104c>
   32af8:	mov	ip, #0
   32afc:	str	r6, [r0, ip, lsl #2]
   32b00:	ldr	r3, [r4, #4]
   32b04:	mov	r0, #1
   32b08:	add	r3, r3, r0
   32b0c:	str	r3, [r4, #4]
   32b10:	pop	{r4, r5, r6, pc}
   32b14:	sub	r3, r1, #-1073741823	; 0xc0000001
   32b18:	ldr	r2, [r0, r3, lsl #2]
   32b1c:	lsl	r3, r3, #2
   32b20:	cmp	r6, r2
   32b24:	bge	32afc <fts_children@@Base+0x1060>
   32b28:	add	r3, r3, #8
   32b2c:	add	r3, r0, r3
   32b30:	str	r2, [r3, #-4]!
   32b34:	ldr	r2, [r3, #-8]
   32b38:	sub	r1, r1, #1
   32b3c:	cmp	r2, r6
   32b40:	mov	ip, r1
   32b44:	bgt	32b30 <fts_children@@Base+0x1094>
   32b48:	b	32afc <fts_children@@Base+0x1060>
   32b4c:	lsl	r3, r1, #1
   32b50:	str	r3, [r4]
   32b54:	lsl	r1, r1, #3
   32b58:	bl	12268 <realloc@plt>
   32b5c:	cmp	r0, #0
   32b60:	popeq	{r4, r5, r6, pc}
   32b64:	ldr	r1, [r4, #4]
   32b68:	str	r0, [r4, #8]
   32b6c:	b	32acc <fts_children@@Base+0x1030>
   32b70:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   32b74:	mov	r6, r1
   32b78:	ldr	r9, [r1, #8]
   32b7c:	mov	r4, #0
   32b80:	str	r2, [r6], #16
   32b84:	mov	r8, r0
   32b88:	str	r9, [r1, #16]
   32b8c:	lsl	r0, r9, #2
   32b90:	str	r4, [r1, #20]
   32b94:	mov	r5, r1
   32b98:	mov	r7, r2
   32b9c:	bl	123dc <malloc@plt>
   32ba0:	cmp	r0, r4
   32ba4:	str	r0, [r5, #24]
   32ba8:	beq	32bf4 <fts_children@@Base+0x1158>
   32bac:	cmp	r9, #0
   32bb0:	bgt	32bc4 <fts_children@@Base+0x1128>
   32bb4:	b	32bfc <fts_children@@Base+0x1160>
   32bb8:	ldr	r3, [r5, #8]
   32bbc:	cmp	r3, r4
   32bc0:	ble	32bfc <fts_children@@Base+0x1160>
   32bc4:	ldr	r2, [r5, #12]
   32bc8:	ldr	r3, [r8]
   32bcc:	ldr	r1, [r2, r4, lsl #2]
   32bd0:	add	r4, r4, #1
   32bd4:	add	r3, r3, r1, lsl #3
   32bd8:	ldrb	r3, [r3, #4]
   32bdc:	tst	r3, #8
   32be0:	bne	32bb8 <fts_children@@Base+0x111c>
   32be4:	mov	r0, r6
   32be8:	bl	329f4 <fts_children@@Base+0xf58>
   32bec:	cmp	r0, #0
   32bf0:	bne	32bb8 <fts_children@@Base+0x111c>
   32bf4:	mov	r0, #12
   32bf8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32bfc:	ldr	r4, [r8, #68]	; 0x44
   32c00:	ldr	r6, [r8, #32]
   32c04:	and	r7, r7, r4
   32c08:	add	r7, r7, r7, lsl #1
   32c0c:	lsl	r4, r7, #2
   32c10:	add	r7, r6, r4
   32c14:	ldr	r3, [r6, r4]
   32c18:	ldr	r1, [r7, #4]
   32c1c:	add	r2, r3, #1
   32c20:	cmp	r1, r3
   32c24:	ldr	r1, [r7, #8]
   32c28:	ble	32c3c <fts_children@@Base+0x11a0>
   32c2c:	str	r2, [r6, r4]
   32c30:	mov	r0, #0
   32c34:	str	r5, [r1, r3, lsl #2]
   32c38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   32c3c:	mov	r0, r1
   32c40:	lsl	r1, r2, #3
   32c44:	lsl	r8, r2, #1
   32c48:	bl	12268 <realloc@plt>
   32c4c:	subs	r1, r0, #0
   32c50:	beq	32bf4 <fts_children@@Base+0x1158>
   32c54:	ldr	r3, [r6, r4]
   32c58:	str	r1, [r7, #8]
   32c5c:	str	r8, [r7, #4]
   32c60:	add	r2, r3, #1
   32c64:	b	32c2c <fts_children@@Base+0x1190>
   32c68:	push	{r4, r5, r6, lr}
   32c6c:	mov	r5, r0
   32c70:	ldr	r6, [r0, #36]	; 0x24
   32c74:	ldr	r3, [r0, #48]	; 0x30
   32c78:	ldr	r4, [r0, #28]
   32c7c:	cmp	r6, r3
   32c80:	movge	r6, r3
   32c84:	cmp	r6, r4
   32c88:	ble	32cd4 <fts_children@@Base+0x1238>
   32c8c:	bl	12448 <__ctype_toupper_loc@plt>
   32c90:	ldr	r3, [r5]
   32c94:	ldr	r1, [r5, #24]
   32c98:	add	r3, r3, r4
   32c9c:	ldr	r2, [r5, #64]	; 0x40
   32ca0:	ldrb	r3, [r3, r1]
   32ca4:	cmp	r2, #0
   32ca8:	ldr	r1, [r0]
   32cac:	ldrbne	r3, [r2, r3]
   32cb0:	ldr	r2, [r5, #4]
   32cb4:	ldr	r3, [r1, r3, lsl #2]
   32cb8:	strb	r3, [r2, r4]
   32cbc:	add	r4, r4, #1
   32cc0:	cmp	r6, r4
   32cc4:	bne	32c90 <fts_children@@Base+0x11f4>
   32cc8:	str	r6, [r5, #28]
   32ccc:	str	r6, [r5, #32]
   32cd0:	pop	{r4, r5, r6, pc}
   32cd4:	mov	r6, r4
   32cd8:	b	32cc8 <fts_children@@Base+0x122c>
   32cdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32ce0:	sub	sp, sp, #84	; 0x54
   32ce4:	ldr	r8, [r0, #36]	; 0x24
   32ce8:	ldr	r3, [r0, #48]	; 0x30
   32cec:	ldr	sl, [pc, #408]	; 32e8c <fts_children@@Base+0x13f0>
   32cf0:	cmp	r8, r3
   32cf4:	ldr	r4, [r0, #28]
   32cf8:	movge	r8, r3
   32cfc:	ldr	r3, [sl]
   32d00:	cmp	r8, r4
   32d04:	mov	r5, r0
   32d08:	str	r3, [sp, #76]	; 0x4c
   32d0c:	ble	32da8 <fts_children@@Base+0x130c>
   32d10:	add	r7, r0, #16
   32d14:	add	r9, sp, #4
   32d18:	mvn	r6, #0
   32d1c:	ldm	r7, {r0, r1}
   32d20:	ldr	ip, [r5, #64]	; 0x40
   32d24:	sub	r2, r8, r4
   32d28:	cmp	ip, #0
   32d2c:	stm	r9, {r0, r1}
   32d30:	bne	32e04 <fts_children@@Base+0x1368>
   32d34:	ldr	r3, [r5, #24]
   32d38:	ldr	r1, [r5]
   32d3c:	add	r3, r4, r3
   32d40:	add	r1, r1, r3
   32d44:	mov	r3, r7
   32d48:	mov	r0, sp
   32d4c:	bl	31be8 <fts_children@@Base+0x14c>
   32d50:	sub	r2, r0, #1
   32d54:	cmn	r2, #3
   32d58:	mov	r3, r0
   32d5c:	bhi	32dc8 <fts_children@@Base+0x132c>
   32d60:	cmn	r0, #2
   32d64:	ldrne	ip, [sp]
   32d68:	beq	32e6c <fts_children@@Base+0x13d0>
   32d6c:	ldr	r2, [r5, #8]
   32d70:	add	r1, r4, r3
   32d74:	add	r0, r4, #1
   32d78:	cmp	r0, r1
   32d7c:	str	ip, [r2, r4, lsl #2]
   32d80:	add	r3, r2, r4, lsl #2
   32d84:	bge	32dfc <fts_children@@Base+0x1360>
   32d88:	sub	r2, r2, #4
   32d8c:	add	r2, r2, r1, lsl #2
   32d90:	str	r6, [r3, #4]!
   32d94:	cmp	r2, r3
   32d98:	bne	32d90 <fts_children@@Base+0x12f4>
   32d9c:	mov	r4, r1
   32da0:	cmp	r8, r4
   32da4:	bgt	32d1c <fts_children@@Base+0x1280>
   32da8:	ldr	r2, [sp, #76]	; 0x4c
   32dac:	ldr	r3, [sl]
   32db0:	str	r4, [r5, #28]
   32db4:	cmp	r2, r3
   32db8:	str	r4, [r5, #32]
   32dbc:	bne	32e88 <fts_children@@Base+0x13ec>
   32dc0:	add	sp, sp, #84	; 0x54
   32dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32dc8:	ldr	r3, [r5]
   32dcc:	ldr	r1, [r5, #24]
   32dd0:	add	r3, r3, r4
   32dd4:	ldr	r2, [r5, #64]	; 0x40
   32dd8:	ldrb	ip, [r3, r1]
   32ddc:	cmp	r2, #0
   32de0:	ldm	r9, {r0, r1}
   32de4:	str	ip, [sp]
   32de8:	ldrbne	ip, [r2, ip]
   32dec:	mov	r3, #1
   32df0:	stm	r7, {r0, r1}
   32df4:	strne	ip, [sp]
   32df8:	b	32d6c <fts_children@@Base+0x12d0>
   32dfc:	mov	r4, r0
   32e00:	b	32da0 <fts_children@@Base+0x1304>
   32e04:	ldr	r3, [r5, #80]	; 0x50
   32e08:	cmp	r3, #0
   32e0c:	cmpgt	r2, #0
   32e10:	ble	32e64 <fts_children@@Base+0x13c8>
   32e14:	add	r0, sp, #11
   32e18:	mov	r1, #0
   32e1c:	b	32e24 <fts_children@@Base+0x1388>
   32e20:	ldr	ip, [r5, #64]	; 0x40
   32e24:	ldr	r3, [r5]
   32e28:	ldr	lr, [r5, #24]
   32e2c:	add	r3, r3, r4
   32e30:	add	r3, r3, r1
   32e34:	ldr	fp, [r5, #4]
   32e38:	ldrb	lr, [r3, lr]
   32e3c:	add	r3, fp, r4
   32e40:	ldrb	ip, [ip, lr]
   32e44:	strb	ip, [r3, r1]
   32e48:	ldr	r3, [r5, #80]	; 0x50
   32e4c:	add	r1, r1, #1
   32e50:	cmp	r2, r3
   32e54:	movlt	r3, r2
   32e58:	cmp	r3, r1
   32e5c:	strb	ip, [r0, #1]!
   32e60:	bgt	32e20 <fts_children@@Base+0x1384>
   32e64:	add	r1, sp, #12
   32e68:	b	32d44 <fts_children@@Base+0x12a8>
   32e6c:	ldr	r2, [r5, #36]	; 0x24
   32e70:	ldr	r3, [r5, #48]	; 0x30
   32e74:	cmp	r2, r3
   32e78:	bge	32dc8 <fts_children@@Base+0x132c>
   32e7c:	ldm	r9, {r0, r1}
   32e80:	stm	r7, {r0, r1}
   32e84:	b	32da8 <fts_children@@Base+0x130c>
   32e88:	bl	12244 <__stack_chk_fail@plt>
   32e8c:	andeq	fp, r5, r0, ror #24
   32e90:	ldr	r2, [pc, #1476]	; 3345c <fts_children@@Base+0x19c0>
   32e94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32e98:	sub	sp, sp, #100	; 0x64
   32e9c:	ldr	r7, [r0, #36]	; 0x24
   32ea0:	ldr	r3, [r0, #48]	; 0x30
   32ea4:	ldrb	r1, [r0, #74]	; 0x4a
   32ea8:	cmp	r7, r3
   32eac:	ldr	r2, [r2]
   32eb0:	movge	r7, r3
   32eb4:	cmp	r1, #0
   32eb8:	mov	r5, r0
   32ebc:	str	r2, [sp, #92]	; 0x5c
   32ec0:	ldr	r6, [r0, #28]
   32ec4:	bne	32ed4 <fts_children@@Base+0x1438>
   32ec8:	ldr	r3, [r0, #64]	; 0x40
   32ecc:	cmp	r3, #0
   32ed0:	beq	33018 <fts_children@@Base+0x157c>
   32ed4:	ldr	r4, [r5, #32]
   32ed8:	cmp	r6, r7
   32edc:	blt	32f08 <fts_children@@Base+0x146c>
   32ee0:	mov	r0, #0
   32ee4:	str	r6, [r5, #28]
   32ee8:	str	r4, [r5, #32]
   32eec:	ldr	r3, [pc, #1384]	; 3345c <fts_children@@Base+0x19c0>
   32ef0:	ldr	r2, [sp, #92]	; 0x5c
   32ef4:	ldr	r3, [r3]
   32ef8:	cmp	r2, r3
   32efc:	bne	33458 <fts_children@@Base+0x19bc>
   32f00:	add	sp, sp, #100	; 0x64
   32f04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32f08:	sub	r3, r7, r6
   32f0c:	str	r3, [sp, #8]
   32f10:	add	sl, r5, #16
   32f14:	add	r3, sp, #20
   32f18:	str	r3, [sp, #4]
   32f1c:	add	r3, sp, #16
   32f20:	str	r3, [sp, #12]
   32f24:	ldm	sl, {r0, r1}
   32f28:	ldr	r3, [r5, #64]	; 0x40
   32f2c:	ldr	r2, [sp, #4]
   32f30:	cmp	r3, #0
   32f34:	stm	r2, {r0, r1}
   32f38:	bne	33208 <fts_children@@Base+0x176c>
   32f3c:	ldr	r3, [r5, #24]
   32f40:	ldr	r2, [r5]
   32f44:	add	r3, r4, r3
   32f48:	add	r3, r2, r3
   32f4c:	str	r3, [sp]
   32f50:	mov	r3, sl
   32f54:	ldr	r2, [sp, #8]
   32f58:	ldr	r0, [sp, #12]
   32f5c:	ldr	r1, [sp]
   32f60:	bl	31be8 <fts_children@@Base+0x14c>
   32f64:	sub	r3, r0, #1
   32f68:	cmn	r3, #4
   32f6c:	mov	r8, r0
   32f70:	str	r3, [sp, #12]
   32f74:	bhi	33284 <fts_children@@Base+0x17e8>
   32f78:	ldr	r9, [sp, #16]
   32f7c:	mov	fp, r6
   32f80:	mov	r0, r9
   32f84:	bl	12718 <towupper@plt>
   32f88:	cmp	r9, r0
   32f8c:	mov	r1, r0
   32f90:	str	r0, [sp, #8]
   32f94:	beq	3326c <fts_children@@Base+0x17d0>
   32f98:	add	r0, sp, #28
   32f9c:	ldr	r2, [sp, #4]
   32fa0:	bl	12094 <wcrtomb@plt>
   32fa4:	cmp	r8, r0
   32fa8:	mov	r9, r0
   32fac:	bne	33330 <fts_children@@Base+0x1894>
   32fb0:	ldr	r0, [r5, #4]
   32fb4:	add	r1, sp, #28
   32fb8:	add	r0, r0, r6
   32fbc:	mov	r2, r8
   32fc0:	bl	121a8 <memcpy@plt>
   32fc4:	ldrb	r3, [r5, #76]	; 0x4c
   32fc8:	cmp	r3, #0
   32fcc:	bne	332fc <fts_children@@Base+0x1860>
   32fd0:	add	r2, r8, r4
   32fd4:	ldr	r3, [r5, #8]
   32fd8:	add	r8, r8, fp
   32fdc:	add	r6, r6, #1
   32fe0:	mov	r4, r2
   32fe4:	ldr	r2, [sp, #8]
   32fe8:	cmp	r6, r8
   32fec:	str	r2, [r3, fp, lsl #2]
   32ff0:	add	fp, r3, fp, lsl #2
   32ff4:	sublt	r3, r3, #4
   32ff8:	addlt	r3, r3, r8, lsl #2
   32ffc:	mvnlt	r2, #0
   33000:	bge	32ed8 <fts_children@@Base+0x143c>
   33004:	str	r2, [fp, #4]!
   33008:	cmp	r3, fp
   3300c:	bne	33004 <fts_children@@Base+0x1568>
   33010:	mov	r6, r8
   33014:	b	32ed8 <fts_children@@Base+0x143c>
   33018:	ldrb	r3, [r0, #76]	; 0x4c
   3301c:	cmp	r3, #0
   33020:	bne	32ed4 <fts_children@@Base+0x1438>
   33024:	cmp	r6, r7
   33028:	bge	33134 <fts_children@@Base+0x1698>
   3302c:	add	sl, r0, #16
   33030:	mvn	r9, #0
   33034:	ldr	r3, [r5, #24]
   33038:	ldr	r2, [r5]
   3303c:	add	r3, r6, r3
   33040:	add	r8, r2, r3
   33044:	ldrb	fp, [r2, r3]
   33048:	mov	r4, r6
   3304c:	tst	fp, #128	; 0x80
   33050:	bne	33064 <fts_children@@Base+0x15c8>
   33054:	mov	r0, sl
   33058:	bl	121e4 <mbsinit@plt>
   3305c:	cmp	r0, #0
   33060:	bne	33168 <fts_children@@Base+0x16cc>
   33064:	ldm	sl, {r0, r1}
   33068:	sub	r3, r7, r6
   3306c:	mov	r2, r3
   33070:	str	r3, [sp, #8]
   33074:	add	r3, sp, #20
   33078:	stm	r3, {r0, r1}
   3307c:	mov	r3, sl
   33080:	mov	r1, r8
   33084:	add	r0, sp, #16
   33088:	bl	31be8 <fts_children@@Base+0x14c>
   3308c:	add	r2, sp, #20
   33090:	str	r2, [sp, #4]
   33094:	add	r2, sp, #16
   33098:	str	r2, [sp, #12]
   3309c:	sub	r3, r0, #1
   330a0:	cmn	r3, #4
   330a4:	mov	r8, r0
   330a8:	bhi	33190 <fts_children@@Base+0x16f4>
   330ac:	ldr	r2, [sp, #16]
   330b0:	mov	r0, r2
   330b4:	str	r2, [sp]
   330b8:	bl	12718 <towupper@plt>
   330bc:	ldr	r2, [sp]
   330c0:	cmp	r2, r0
   330c4:	mov	fp, r0
   330c8:	beq	33144 <fts_children@@Base+0x16a8>
   330cc:	add	r0, sp, #28
   330d0:	add	r2, sp, #20
   330d4:	mov	r1, fp
   330d8:	bl	12094 <wcrtomb@plt>
   330dc:	cmp	r8, r0
   330e0:	bne	33264 <fts_children@@Base+0x17c8>
   330e4:	ldr	r0, [r5, #4]
   330e8:	add	r1, sp, #28
   330ec:	add	r0, r0, r6
   330f0:	mov	r2, r8
   330f4:	bl	121a8 <memcpy@plt>
   330f8:	ldr	r2, [r5, #8]
   330fc:	add	r8, r8, r4
   33100:	add	r6, r6, #1
   33104:	cmp	r6, r8
   33108:	str	fp, [r2, r4, lsl #2]
   3310c:	add	r4, r2, r4, lsl #2
   33110:	bge	3312c <fts_children@@Base+0x1690>
   33114:	sub	r3, r2, #4
   33118:	add	r3, r3, r8, lsl #2
   3311c:	str	r9, [r4, #4]!
   33120:	cmp	r4, r3
   33124:	bne	3311c <fts_children@@Base+0x1680>
   33128:	mov	r6, r8
   3312c:	cmp	r7, r6
   33130:	bgt	33034 <fts_children@@Base+0x1598>
   33134:	str	r6, [r5, #28]
   33138:	str	r6, [r5, #32]
   3313c:	mov	r0, #0
   33140:	b	32eec <fts_children@@Base+0x1450>
   33144:	ldr	r2, [r5, #24]
   33148:	ldr	r1, [r5]
   3314c:	ldr	r0, [r5, #4]
   33150:	add	r2, r6, r2
   33154:	add	r1, r1, r2
   33158:	add	r0, r0, r6
   3315c:	mov	r2, r8
   33160:	bl	121a8 <memcpy@plt>
   33164:	b	330f8 <fts_children@@Base+0x165c>
   33168:	bl	12448 <__ctype_toupper_loc@plt>
   3316c:	ldr	r3, [r5, #4]
   33170:	ldr	r2, [r0]
   33174:	ldr	r2, [r2, fp, lsl #2]
   33178:	strb	r2, [r3, r6]
   3317c:	ldrd	r2, [r5, #4]
   33180:	ldrb	r2, [r2, r6]
   33184:	str	r2, [r3, r6, lsl #2]
   33188:	add	r6, r6, #1
   3318c:	b	3312c <fts_children@@Base+0x1690>
   33190:	cmn	r3, #3
   33194:	beq	331d0 <fts_children@@Base+0x1734>
   33198:	ldr	r3, [r5]
   3319c:	ldr	r2, [r5, #24]
   331a0:	add	r3, r3, r6
   331a4:	cmn	r0, #1
   331a8:	ldrb	r3, [r3, r2]
   331ac:	ldr	r2, [r5, #4]
   331b0:	strb	r3, [r2, r6]
   331b4:	ldr	r2, [r5, #8]
   331b8:	add	r6, r6, #1
   331bc:	str	r3, [r2, r4, lsl #2]
   331c0:	addeq	r3, sp, #20
   331c4:	ldmeq	r3, {r0, r1}
   331c8:	stmeq	sl, {r0, r1}
   331cc:	b	3312c <fts_children@@Base+0x1690>
   331d0:	ldr	r2, [r5, #36]	; 0x24
   331d4:	ldr	r3, [r5, #48]	; 0x30
   331d8:	cmp	r2, r3
   331dc:	blt	3342c <fts_children@@Base+0x1990>
   331e0:	ldr	r3, [r5]
   331e4:	ldr	r1, [r5, #24]
   331e8:	add	r3, r3, r6
   331ec:	ldr	r2, [r5, #4]
   331f0:	ldrb	r3, [r3, r1]
   331f4:	strb	r3, [r2, r6]
   331f8:	ldr	r2, [r5, #8]
   331fc:	add	r6, r6, #1
   33200:	str	r3, [r2, r4, lsl #2]
   33204:	b	3312c <fts_children@@Base+0x1690>
   33208:	ldr	r8, [r5, #80]	; 0x50
   3320c:	ldr	r2, [sp, #8]
   33210:	cmp	r2, #0
   33214:	cmpgt	r8, #0
   33218:	ble	33258 <fts_children@@Base+0x17bc>
   3321c:	ldr	r2, [r5, #24]
   33220:	ldr	r1, [sp, #8]
   33224:	ldr	lr, [r5]
   33228:	add	r2, r4, r2
   3322c:	cmp	r8, r1
   33230:	add	lr, lr, r2
   33234:	movge	r8, r1
   33238:	mov	r2, lr
   3323c:	add	r1, sp, #27
   33240:	ldrb	r0, [r2], #1
   33244:	sub	ip, r2, lr
   33248:	ldrb	r0, [r3, r0]
   3324c:	cmp	ip, r8
   33250:	strb	r0, [r1, #1]!
   33254:	blt	33240 <fts_children@@Base+0x17a4>
   33258:	add	r3, sp, #28
   3325c:	str	r3, [sp]
   33260:	b	32f50 <fts_children@@Base+0x14b4>
   33264:	mov	r4, r6
   33268:	b	32f24 <fts_children@@Base+0x1488>
   3326c:	ldr	r0, [r5, #4]
   33270:	ldr	r1, [sp]
   33274:	add	r0, r0, r6
   33278:	mov	r2, r8
   3327c:	bl	121a8 <memcpy@plt>
   33280:	b	32fc4 <fts_children@@Base+0x1528>
   33284:	ldr	r3, [sp, #12]
   33288:	cmn	r3, #3
   3328c:	bne	332a0 <fts_children@@Base+0x1804>
   33290:	ldr	r2, [r5, #36]	; 0x24
   33294:	ldr	r3, [r5, #48]	; 0x30
   33298:	cmp	r2, r3
   3329c:	blt	33320 <fts_children@@Base+0x1884>
   332a0:	ldr	r3, [r5]
   332a4:	ldr	r1, [r5, #24]
   332a8:	add	r3, r3, r4
   332ac:	ldr	r2, [r5, #64]	; 0x40
   332b0:	ldrb	r3, [r3, r1]
   332b4:	cmp	r2, #0
   332b8:	ldr	r1, [r5, #4]
   332bc:	ldrbne	r3, [r2, r3]
   332c0:	lsl	r2, r6, #2
   332c4:	strb	r3, [r1, r6]
   332c8:	ldrb	r1, [r5, #76]	; 0x4c
   332cc:	cmp	r1, #0
   332d0:	ldrne	r1, [r5, #12]
   332d4:	strne	r4, [r1, r6, lsl #2]
   332d8:	ldr	r1, [r5, #8]
   332dc:	cmn	r8, #1
   332e0:	add	r4, r4, #1
   332e4:	str	r3, [r1, r2]
   332e8:	ldreq	r3, [sp, #4]
   332ec:	add	r6, r6, #1
   332f0:	ldmeq	r3, {r0, r1}
   332f4:	stmeq	sl, {r0, r1}
   332f8:	b	32ed8 <fts_children@@Base+0x143c>
   332fc:	sub	r1, r6, #-1073741823	; 0xc0000001
   33300:	ldr	r3, [r5, #12]
   33304:	add	r2, r8, r4
   33308:	add	r3, r3, r1, lsl #2
   3330c:	str	r4, [r3, #4]!
   33310:	add	r4, r4, #1
   33314:	cmp	r2, r4
   33318:	bne	3330c <fts_children@@Base+0x1870>
   3331c:	b	32fd4 <fts_children@@Base+0x1538>
   33320:	ldr	r3, [sp, #4]
   33324:	ldm	r3, {r0, r1}
   33328:	stm	sl, {r0, r1}
   3332c:	b	32ee0 <fts_children@@Base+0x1444>
   33330:	cmn	r0, #1
   33334:	beq	3326c <fts_children@@Base+0x17d0>
   33338:	ldr	r0, [r5, #36]	; 0x24
   3333c:	add	fp, r9, r6
   33340:	cmp	fp, r0
   33344:	bhi	33320 <fts_children@@Base+0x1884>
   33348:	ldr	r3, [r5, #12]
   3334c:	cmp	r3, #0
   33350:	beq	3343c <fts_children@@Base+0x19a0>
   33354:	ldrb	r3, [r5, #76]	; 0x4c
   33358:	cmp	r3, #0
   3335c:	bne	33388 <fts_children@@Base+0x18ec>
   33360:	cmp	r6, #0
   33364:	ldrne	r2, [r5, #12]
   33368:	subne	r2, r2, #4
   3336c:	beq	33380 <fts_children@@Base+0x18e4>
   33370:	str	r3, [r2, #4]!
   33374:	add	r3, r3, #1
   33378:	cmp	r3, r6
   3337c:	bne	33370 <fts_children@@Base+0x18d4>
   33380:	mov	r3, #1
   33384:	strb	r3, [r5, #76]	; 0x4c
   33388:	ldr	r0, [r5, #4]
   3338c:	add	r1, sp, #28
   33390:	mov	r2, r9
   33394:	add	r0, r0, r6
   33398:	bl	121a8 <memcpy@plt>
   3339c:	ldr	r1, [r5, #12]
   333a0:	ldr	r3, [r5, #8]
   333a4:	ldr	r0, [sp, #8]
   333a8:	cmp	r9, #1
   333ac:	lsl	r2, r6, #2
   333b0:	str	r0, [r3, r6, lsl #2]
   333b4:	mvnhi	ip, #0
   333b8:	add	r3, r3, r2
   333bc:	str	r4, [r1, r6, lsl #2]
   333c0:	add	r2, r1, r2
   333c4:	movhi	r1, #1
   333c8:	bls	333f0 <fts_children@@Base+0x1954>
   333cc:	cmp	r1, r8
   333d0:	ldr	r0, [sp, #12]
   333d4:	movcc	r0, r1
   333d8:	add	r1, r1, #1
   333dc:	add	r0, r0, r4
   333e0:	cmp	r1, r9
   333e4:	str	r0, [r2, #4]!
   333e8:	str	ip, [r3, #4]!
   333ec:	bne	333cc <fts_children@@Base+0x1930>
   333f0:	ldr	r7, [r5, #48]	; 0x30
   333f4:	ldr	r3, [r5, #52]	; 0x34
   333f8:	sub	r9, r9, r8
   333fc:	add	r7, r9, r7
   33400:	cmp	r4, r3
   33404:	str	r7, [r5, #48]	; 0x30
   33408:	ldrlt	r3, [r5, #56]	; 0x38
   3340c:	addlt	r9, r3, r9
   33410:	strlt	r9, [r5, #56]	; 0x38
   33414:	ldr	r3, [r5, #36]	; 0x24
   33418:	mov	r6, fp
   3341c:	cmp	r7, r3
   33420:	add	r4, r8, r4
   33424:	movge	r7, r3
   33428:	b	32ed8 <fts_children@@Base+0x143c>
   3342c:	add	r3, sp, #20
   33430:	ldm	r3, {r0, r1}
   33434:	stm	sl, {r0, r1}
   33438:	b	33134 <fts_children@@Base+0x1698>
   3343c:	lsl	r0, r0, #2
   33440:	bl	123dc <malloc@plt>
   33444:	cmp	r0, #0
   33448:	str	r0, [r5, #12]
   3344c:	moveq	r0, #12
   33450:	bne	33354 <fts_children@@Base+0x18b8>
   33454:	b	32eec <fts_children@@Base+0x1450>
   33458:	bl	12244 <__stack_chk_fail@plt>
   3345c:	andeq	fp, r5, r0, ror #24
   33460:	ldr	r3, [r0, #36]	; 0x24
   33464:	push	{r4, r5, r6, lr}
   33468:	cmn	r3, #-536870910	; 0xe0000002
   3346c:	bhi	33580 <fts_children@@Base+0x1ae4>
   33470:	ldr	r2, [r0, #48]	; 0x30
   33474:	lsl	r3, r3, #1
   33478:	cmp	r3, r2
   3347c:	movge	r3, r2
   33480:	cmp	r3, r1
   33484:	movge	r1, r3
   33488:	mov	r4, r0
   3348c:	bl	32960 <fts_children@@Base+0xec4>
   33490:	subs	r5, r0, #0
   33494:	bne	334f0 <fts_children@@Base+0x1a54>
   33498:	ldr	r0, [r4, #100]	; 0x64
   3349c:	cmp	r0, #0
   334a0:	beq	334c0 <fts_children@@Base+0x1a24>
   334a4:	ldr	r1, [r4, #36]	; 0x24
   334a8:	add	r1, r1, #1
   334ac:	lsl	r1, r1, #2
   334b0:	bl	12268 <realloc@plt>
   334b4:	cmp	r0, #0
   334b8:	beq	33580 <fts_children@@Base+0x1ae4>
   334bc:	str	r0, [r4, #100]	; 0x64
   334c0:	ldrb	r3, [r4, #72]	; 0x48
   334c4:	ldr	r2, [r4, #80]	; 0x50
   334c8:	cmp	r3, #0
   334cc:	beq	334f8 <fts_children@@Base+0x1a5c>
   334d0:	cmp	r2, #1
   334d4:	mov	r0, r4
   334d8:	ble	33574 <fts_children@@Base+0x1ad8>
   334dc:	pop	{r4, r5, r6, lr}
   334e0:	b	32e90 <fts_children@@Base+0x13f4>
   334e4:	mov	lr, r3
   334e8:	str	lr, [r4, #28]
   334ec:	str	lr, [r4, #32]
   334f0:	mov	r0, r5
   334f4:	pop	{r4, r5, r6, pc}
   334f8:	cmp	r2, #1
   334fc:	bgt	33564 <fts_children@@Base+0x1ac8>
   33500:	ldr	r1, [r4, #64]	; 0x40
   33504:	cmp	r1, #0
   33508:	beq	334f0 <fts_children@@Base+0x1a54>
   3350c:	ldr	lr, [r4, #36]	; 0x24
   33510:	ldr	r2, [r4, #48]	; 0x30
   33514:	ldr	r3, [r4, #28]
   33518:	cmp	lr, r2
   3351c:	movge	lr, r2
   33520:	cmp	lr, r3
   33524:	bgt	33530 <fts_children@@Base+0x1a94>
   33528:	b	334e4 <fts_children@@Base+0x1a48>
   3352c:	ldr	r1, [r4, #64]	; 0x40
   33530:	ldr	r2, [r4]
   33534:	ldr	ip, [r4, #24]
   33538:	add	r2, r2, r3
   3353c:	ldr	r0, [r4, #4]
   33540:	ldrb	r2, [r2, ip]
   33544:	ldrb	r2, [r1, r2]
   33548:	strb	r2, [r0, r3]
   3354c:	add	r3, r3, #1
   33550:	cmp	lr, r3
   33554:	bne	3352c <fts_children@@Base+0x1a90>
   33558:	str	lr, [r4, #28]
   3355c:	str	lr, [r4, #32]
   33560:	b	334f0 <fts_children@@Base+0x1a54>
   33564:	mov	r0, r4
   33568:	bl	32cdc <fts_children@@Base+0x1240>
   3356c:	mov	r0, r5
   33570:	pop	{r4, r5, r6, pc}
   33574:	bl	32c68 <fts_children@@Base+0x11cc>
   33578:	mov	r0, r5
   3357c:	pop	{r4, r5, r6, pc}
   33580:	mov	r5, #12
   33584:	mov	r0, r5
   33588:	pop	{r4, r5, r6, pc}
   3358c:	ldr	r3, [r0, #36]	; 0x24
   33590:	push	{r4, r5, r6, lr}
   33594:	cmp	r3, r1
   33598:	mov	r4, r0
   3359c:	mov	r5, r1
   335a0:	ldr	r6, [r0, #104]	; 0x68
   335a4:	bgt	335d8 <fts_children@@Base+0x1b3c>
   335a8:	ldr	r2, [r0, #48]	; 0x30
   335ac:	cmp	r3, r2
   335b0:	bge	335d8 <fts_children@@Base+0x1b3c>
   335b4:	add	r1, r5, #1
   335b8:	mov	r0, r4
   335bc:	bl	33460 <fts_children@@Base+0x19c4>
   335c0:	cmp	r0, #0
   335c4:	popne	{r4, r5, r6, pc}
   335c8:	cmp	r6, r5
   335cc:	blt	335f4 <fts_children@@Base+0x1b58>
   335d0:	mov	r0, #0
   335d4:	pop	{r4, r5, r6, pc}
   335d8:	ldr	r3, [r4, #28]
   335dc:	cmp	r3, r5
   335e0:	bgt	335c8 <fts_children@@Base+0x1b2c>
   335e4:	ldr	r2, [r4, #48]	; 0x30
   335e8:	cmp	r3, r2
   335ec:	bge	335c8 <fts_children@@Base+0x1b2c>
   335f0:	b	335b4 <fts_children@@Base+0x1b18>
   335f4:	sub	r2, r5, r6
   335f8:	ldr	r0, [r4, #100]	; 0x64
   335fc:	add	r6, r6, #1
   33600:	lsl	r2, r2, #2
   33604:	add	r0, r0, r6, lsl #2
   33608:	mov	r1, #0
   3360c:	bl	12514 <memset@plt>
   33610:	mov	r0, #0
   33614:	str	r5, [r4, #104]	; 0x68
   33618:	pop	{r4, r5, r6, pc}
   3361c:	push	{r4, lr}
   33620:	mov	r4, r0
   33624:	ldr	r0, [r0]
   33628:	bl	12154 <free@plt>
   3362c:	ldr	r0, [r4, #4]
   33630:	bl	12154 <free@plt>
   33634:	ldr	r0, [r4, #8]
   33638:	bl	12154 <free@plt>
   3363c:	ldr	r0, [r4, #12]
   33640:	bl	12154 <free@plt>
   33644:	mov	r0, r4
   33648:	pop	{r4, lr}
   3364c:	b	12154 <free@plt>
   33650:	ldr	r3, [pc, #36]	; 3367c <fts_children@@Base+0x1be0>
   33654:	ldr	r2, [r0, #4]
   33658:	and	r3, r3, r2
   3365c:	cmp	r3, #6
   33660:	beq	33674 <fts_children@@Base+0x1bd8>
   33664:	cmp	r3, #3
   33668:	bxne	lr
   3366c:	ldr	r0, [r0]
   33670:	b	12154 <free@plt>
   33674:	ldr	r0, [r0]
   33678:	b	3361c <fts_children@@Base+0x1b80>
   3367c:	strdeq	r0, [r4], -pc	; <UNPREDICTABLE>
   33680:	add	r0, r1, #20
   33684:	push	{r4, lr}
   33688:	bl	33650 <fts_children@@Base+0x1bb4>
   3368c:	mov	r0, #0
   33690:	pop	{r4, pc}
   33694:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33698:	sub	sp, sp, #12
   3369c:	ldmib	r0, {r5, ip}
   336a0:	mov	r8, sp
   336a4:	mov	r4, r0
   336a8:	cmp	ip, r5
   336ac:	stm	r8, {r1, r2}
   336b0:	ldrb	r6, [sp, #4]
   336b4:	bcs	33774 <fts_children@@Base+0x1cd8>
   336b8:	ldr	r7, [r0, #12]
   336bc:	ldr	r5, [r0, #20]
   336c0:	ldm	r8, {r0, r1}
   336c4:	ldr	r3, [r4]
   336c8:	cmp	r6, #5
   336cc:	add	r3, r3, ip, lsl #3
   336d0:	bic	r2, r1, #261120	; 0x3fc00
   336d4:	bic	r2, r2, #768	; 0x300
   336d8:	stm	r3, {r0, r1}
   336dc:	str	r2, [r3, #4]
   336e0:	beq	33760 <fts_children@@Base+0x1cc4>
   336e4:	sub	r6, r6, #6
   336e8:	clz	r6, r6
   336ec:	lsr	r6, r6, #5
   336f0:	ldrb	r2, [r3, #6]
   336f4:	mvn	r1, #0
   336f8:	bic	r2, r2, #16
   336fc:	orr	r2, r2, r6, lsl #4
   33700:	strb	r2, [r3, #6]
   33704:	str	r1, [r7, ip, lsl #2]
   33708:	ldr	r3, [r4, #8]
   3370c:	mov	r2, #0
   33710:	add	r3, r3, r3, lsl #1
   33714:	lsl	r3, r3, #2
   33718:	add	r1, r5, r3
   3371c:	str	r2, [r5, r3]
   33720:	str	r2, [r1, #4]
   33724:	str	r2, [r1, #8]
   33728:	ldr	r3, [r4, #8]
   3372c:	ldr	r0, [r4, #24]
   33730:	add	r3, r3, r3, lsl #1
   33734:	lsl	r3, r3, #2
   33738:	add	r1, r0, r3
   3373c:	str	r2, [r0, r3]
   33740:	str	r2, [r1, #4]
   33744:	str	r2, [r1, #8]
   33748:	ldr	r3, [r4, #8]
   3374c:	mov	r0, r3
   33750:	add	r3, r3, #1
   33754:	str	r3, [r4, #8]
   33758:	add	sp, sp, #12
   3375c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33760:	ldr	r6, [r4, #92]	; 0x5c
   33764:	cmp	r6, #1
   33768:	movle	r6, #0
   3376c:	movgt	r6, #1
   33770:	b	336f0 <fts_children@@Base+0x1c54>
   33774:	ldr	r3, [pc, #200]	; 33844 <fts_children@@Base+0x1da8>
   33778:	lsl	r9, r5, #1
   3377c:	cmp	r9, r3
   33780:	bhi	3383c <fts_children@@Base+0x1da0>
   33784:	lsl	r1, r5, #4
   33788:	ldr	r0, [r0]
   3378c:	bl	12268 <realloc@plt>
   33790:	cmp	r0, #0
   33794:	beq	3383c <fts_children@@Base+0x1da0>
   33798:	lsl	sl, r5, #3
   3379c:	mov	r1, sl
   337a0:	str	r0, [r4]
   337a4:	ldr	r0, [r4, #12]
   337a8:	bl	12268 <realloc@plt>
   337ac:	mov	r1, sl
   337b0:	add	r5, r9, r5
   337b4:	lsl	sl, r5, #3
   337b8:	mov	r7, r0
   337bc:	ldr	r0, [r4, #16]
   337c0:	bl	12268 <realloc@plt>
   337c4:	mov	r1, sl
   337c8:	mov	fp, r0
   337cc:	ldr	r0, [r4, #20]
   337d0:	bl	12268 <realloc@plt>
   337d4:	mov	r1, sl
   337d8:	mov	r5, r0
   337dc:	ldr	r0, [r4, #24]
   337e0:	bl	12268 <realloc@plt>
   337e4:	cmp	fp, #0
   337e8:	cmpne	r7, #0
   337ec:	mov	sl, r0
   337f0:	beq	3381c <fts_children@@Base+0x1d80>
   337f4:	cmp	r0, #0
   337f8:	cmpne	r5, #0
   337fc:	beq	3381c <fts_children@@Base+0x1d80>
   33800:	ldr	ip, [r4, #8]
   33804:	str	r7, [r4, #12]
   33808:	str	fp, [r4, #16]
   3380c:	str	r5, [r4, #20]
   33810:	str	r0, [r4, #24]
   33814:	str	r9, [r4, #4]
   33818:	b	336c0 <fts_children@@Base+0x1c24>
   3381c:	mov	r0, r7
   33820:	bl	12154 <free@plt>
   33824:	mov	r0, fp
   33828:	bl	12154 <free@plt>
   3382c:	mov	r0, r5
   33830:	bl	12154 <free@plt>
   33834:	mov	r0, sl
   33838:	bl	12154 <free@plt>
   3383c:	mvn	r0, #0
   33840:	b	33758 <fts_children@@Base+0x1cbc>
   33844:	ldrbne	r5, [r5, #-1365]	; 0xfffffaab
   33848:	ldr	r3, [r0]
   3384c:	push	{r4, r5, r6, r7, r8, lr}
   33850:	lsl	r6, r1, #3
   33854:	add	r3, r3, r6
   33858:	mov	r5, r1
   3385c:	mov	r7, r2
   33860:	ldm	r3, {r1, r2}
   33864:	mov	r4, r0
   33868:	bl	33694 <fts_children@@Base+0x1bf8>
   3386c:	cmn	r0, #1
   33870:	popeq	{r4, r5, r6, r7, r8, pc}
   33874:	ldr	lr, [r4]
   33878:	ldr	ip, [pc, #76]	; 338cc <fts_children@@Base+0x1e30>
   3387c:	add	r1, lr, r0, lsl #3
   33880:	ldr	r8, [pc, #72]	; 338d0 <fts_children@@Base+0x1e34>
   33884:	ldr	r3, [r1, #4]
   33888:	and	r2, r7, ip
   3388c:	add	r6, lr, r6
   33890:	bic	r3, r3, r8
   33894:	orr	r3, r3, r2, lsl #8
   33898:	str	r3, [r1, #4]
   3389c:	ldr	lr, [r6, #4]
   338a0:	bic	r3, r3, r8
   338a4:	and	ip, ip, lr, lsr #8
   338a8:	orr	r2, r2, ip
   338ac:	orr	r3, r3, r2, lsl #8
   338b0:	str	r3, [r1, #4]
   338b4:	lsr	r3, r3, #16
   338b8:	orr	r3, r3, #4
   338bc:	strb	r3, [r1, #6]
   338c0:	ldr	r3, [r4, #16]
   338c4:	str	r5, [r3, r0, lsl #2]
   338c8:	pop	{r4, r5, r6, r7, r8, pc}
   338cc:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   338d0:	andeq	pc, r3, r0, lsl #30
   338d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   338d8:	sub	sp, sp, #20
   338dc:	ldr	sl, [pc, #664]	; 33b7c <fts_children@@Base+0x20e0>
   338e0:	ldr	r9, [sp, #56]	; 0x38
   338e4:	mov	r5, r0
   338e8:	mov	r7, r1
   338ec:	mov	r4, r2
   338f0:	str	r3, [sp, #12]
   338f4:	ldr	r3, [r5]
   338f8:	ldr	r0, [r5, #20]
   338fc:	add	r2, r3, r7, lsl #3
   33900:	mov	r6, r4
   33904:	ldrb	r1, [r2, #4]
   33908:	cmp	r1, #4
   3390c:	beq	33a90 <fts_children@@Base+0x1ff4>
   33910:	add	r8, r7, r7, lsl #1
   33914:	lsl	r8, r8, #2
   33918:	add	ip, r0, r8
   3391c:	ldr	r1, [ip, #4]
   33920:	cmp	r1, #0
   33924:	beq	33b50 <fts_children@@Base+0x20b4>
   33928:	ldr	ip, [ip, #8]
   3392c:	add	r6, r4, r4, lsl #1
   33930:	cmp	r1, #1
   33934:	lsl	r6, r6, #2
   33938:	ldr	fp, [ip]
   3393c:	add	r0, r0, r6
   33940:	beq	33a20 <fts_children@@Base+0x1f84>
   33944:	ldr	ip, [r5, #8]
   33948:	mov	r2, #0
   3394c:	sub	r1, ip, #1
   33950:	cmp	r1, r2
   33954:	str	r2, [r0, #4]
   33958:	add	r2, r3, r1, lsl #3
   3395c:	movle	lr, #0
   33960:	ldrb	r4, [r2, #6]
   33964:	movgt	lr, #1
   33968:	ands	lr, lr, r4, lsr #2
   3396c:	beq	33af4 <fts_children@@Base+0x2058>
   33970:	add	r3, r3, ip, lsl #3
   33974:	ldr	lr, [r5, #16]
   33978:	sub	r3, r3, r2
   3397c:	sub	r3, r3, #16
   33980:	add	lr, lr, ip, lsl #2
   33984:	b	339a8 <fts_children@@Base+0x1f0c>
   33988:	add	r2, r2, r3
   3398c:	sub	r1, r1, #1
   33990:	ldrb	r4, [r2, #6]
   33994:	cmp	r1, #0
   33998:	movle	ip, #0
   3399c:	movgt	ip, #1
   339a0:	ands	ip, ip, r4, lsr #2
   339a4:	beq	33af4 <fts_children@@Base+0x2058>
   339a8:	ldr	ip, [lr, #-4]!
   339ac:	cmp	ip, fp
   339b0:	bne	33988 <fts_children@@Base+0x1eec>
   339b4:	ldr	ip, [r2, #4]
   339b8:	and	ip, sl, ip, lsr #8
   339bc:	cmp	r9, ip
   339c0:	bne	33988 <fts_children@@Base+0x1eec>
   339c4:	bl	32a54 <fts_children@@Base+0xfb8>
   339c8:	cmp	r0, #0
   339cc:	beq	33a14 <fts_children@@Base+0x1f78>
   339d0:	ldr	r3, [r5, #20]
   339d4:	mov	r2, r9
   339d8:	add	r8, r3, r8
   339dc:	mov	r0, r5
   339e0:	ldr	r3, [r8, #8]
   339e4:	ldr	r7, [r3, #4]
   339e8:	mov	r1, r7
   339ec:	bl	33848 <fts_children@@Base+0x1dac>
   339f0:	cmn	r0, #1
   339f4:	mov	r4, r0
   339f8:	beq	33a14 <fts_children@@Base+0x1f78>
   339fc:	ldr	r0, [r5, #20]
   33a00:	mov	r1, r4
   33a04:	add	r0, r0, r6
   33a08:	bl	32a54 <fts_children@@Base+0xfb8>
   33a0c:	cmp	r0, #0
   33a10:	bne	338f4 <fts_children@@Base+0x1e58>
   33a14:	mov	r0, #12
   33a18:	add	sp, sp, #20
   33a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33a20:	ldr	r3, [sp, #12]
   33a24:	cmp	r7, r4
   33a28:	sub	r3, r7, r3
   33a2c:	clz	r3, r3
   33a30:	lsr	r3, r3, #5
   33a34:	moveq	r3, #0
   33a38:	cmp	r3, #0
   33a3c:	mov	r3, #0
   33a40:	str	r3, [r0, #4]
   33a44:	bne	33b64 <fts_children@@Base+0x20c8>
   33a48:	ldr	r3, [r2, #4]
   33a4c:	mov	r1, fp
   33a50:	mov	r0, r5
   33a54:	and	r3, sl, r3, lsr #8
   33a58:	orr	r9, r9, r3
   33a5c:	mov	r2, r9
   33a60:	bl	33848 <fts_children@@Base+0x1dac>
   33a64:	cmn	r0, #1
   33a68:	mov	r4, r0
   33a6c:	beq	33a14 <fts_children@@Base+0x1f78>
   33a70:	ldr	r0, [r5, #20]
   33a74:	mov	r1, r4
   33a78:	add	r0, r0, r6
   33a7c:	bl	32a54 <fts_children@@Base+0xfb8>
   33a80:	cmp	r0, #0
   33a84:	beq	33a14 <fts_children@@Base+0x1f78>
   33a88:	mov	r7, fp
   33a8c:	b	338f4 <fts_children@@Base+0x1e58>
   33a90:	ldr	r3, [r5, #12]
   33a94:	add	r4, r4, r4, lsl #1
   33a98:	lsl	fp, r7, #2
   33a9c:	lsl	r8, r4, #2
   33aa0:	ldr	r7, [r3, r7, lsl #2]
   33aa4:	add	r0, r0, r8
   33aa8:	mov	r3, #0
   33aac:	str	r3, [r0, #4]
   33ab0:	mov	r2, r9
   33ab4:	mov	r1, r7
   33ab8:	mov	r0, r5
   33abc:	bl	33848 <fts_children@@Base+0x1dac>
   33ac0:	cmn	r0, #1
   33ac4:	mov	r4, r0
   33ac8:	beq	33a14 <fts_children@@Base+0x1f78>
   33acc:	ldr	r3, [r5, #12]
   33ad0:	ldr	r0, [r5, #20]
   33ad4:	mov	r1, r4
   33ad8:	ldr	r2, [r3, fp]
   33adc:	add	r0, r0, r8
   33ae0:	str	r2, [r3, r6, lsl #2]
   33ae4:	bl	32a54 <fts_children@@Base+0xfb8>
   33ae8:	cmp	r0, #0
   33aec:	bne	338f4 <fts_children@@Base+0x1e58>
   33af0:	b	33a14 <fts_children@@Base+0x1f78>
   33af4:	mov	r2, r9
   33af8:	mov	r1, fp
   33afc:	mov	r0, r5
   33b00:	bl	33848 <fts_children@@Base+0x1dac>
   33b04:	cmn	r0, #1
   33b08:	mov	r4, r0
   33b0c:	beq	33a14 <fts_children@@Base+0x1f78>
   33b10:	ldr	r0, [r5, #20]
   33b14:	mov	r1, r4
   33b18:	add	r0, r0, r6
   33b1c:	bl	32a54 <fts_children@@Base+0xfb8>
   33b20:	cmp	r0, #0
   33b24:	beq	33a14 <fts_children@@Base+0x1f78>
   33b28:	mov	r1, fp
   33b2c:	str	r9, [sp]
   33b30:	mov	r2, r4
   33b34:	ldr	r3, [sp, #12]
   33b38:	mov	r0, r5
   33b3c:	bl	338d4 <fts_children@@Base+0x1e38>
   33b40:	subs	r1, r0, #0
   33b44:	beq	339d0 <fts_children@@Base+0x1f34>
   33b48:	mov	r0, r1
   33b4c:	b	33a18 <fts_children@@Base+0x1f7c>
   33b50:	ldr	r3, [r5, #12]
   33b54:	mov	r0, r1
   33b58:	ldr	r2, [r3, r7, lsl #2]
   33b5c:	str	r2, [r3, r4, lsl #2]
   33b60:	b	33a18 <fts_children@@Base+0x1f7c>
   33b64:	mov	r1, fp
   33b68:	bl	32a54 <fts_children@@Base+0xfb8>
   33b6c:	cmp	r0, #0
   33b70:	movne	r0, #0
   33b74:	bne	33a18 <fts_children@@Base+0x1f7c>
   33b78:	b	33a14 <fts_children@@Base+0x1f78>
   33b7c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   33b80:	push	{r4, lr}
   33b84:	mov	r4, r0
   33b88:	ldr	r0, [r0, #24]
   33b8c:	bl	12154 <free@plt>
   33b90:	ldr	r0, [r4, #36]	; 0x24
   33b94:	bl	12154 <free@plt>
   33b98:	ldr	r3, [r4, #40]	; 0x28
   33b9c:	add	r2, r4, #4
   33ba0:	cmp	r3, r2
   33ba4:	beq	33bb8 <fts_children@@Base+0x211c>
   33ba8:	ldr	r0, [r3, #8]
   33bac:	bl	12154 <free@plt>
   33bb0:	ldr	r0, [r4, #40]	; 0x28
   33bb4:	bl	12154 <free@plt>
   33bb8:	ldr	r0, [r4, #12]
   33bbc:	bl	12154 <free@plt>
   33bc0:	ldr	r0, [r4, #48]	; 0x30
   33bc4:	bl	12154 <free@plt>
   33bc8:	ldr	r0, [r4, #44]	; 0x2c
   33bcc:	bl	12154 <free@plt>
   33bd0:	mov	r0, r4
   33bd4:	pop	{r4, lr}
   33bd8:	b	12154 <free@plt>
   33bdc:	push	{r4, lr}
   33be0:	mov	r4, r0
   33be4:	ldr	r0, [r0, #8]
   33be8:	bl	12154 <free@plt>
   33bec:	ldr	r0, [r4, #12]
   33bf0:	bl	12154 <free@plt>
   33bf4:	ldrb	r3, [r4, #75]	; 0x4b
   33bf8:	cmp	r3, #0
   33bfc:	popeq	{r4, pc}
   33c00:	ldr	r0, [r4, #4]
   33c04:	pop	{r4, lr}
   33c08:	b	12154 <free@plt>
   33c0c:	ldr	r3, [r0, #124]	; 0x7c
   33c10:	push	{r4, r5, r6, r7, r8, lr}
   33c14:	cmp	r3, #0
   33c18:	mov	r8, r0
   33c1c:	ble	33ca0 <fts_children@@Base+0x2204>
   33c20:	mov	r7, #0
   33c24:	ldr	r3, [r8, #132]	; 0x84
   33c28:	ldr	r6, [r3, r7, lsl #2]
   33c2c:	ldr	r3, [r6, #16]
   33c30:	cmp	r3, #0
   33c34:	ble	33c64 <fts_children@@Base+0x21c8>
   33c38:	mov	r4, #0
   33c3c:	ldr	r3, [r6, #20]
   33c40:	ldr	r5, [r3, r4, lsl #2]
   33c44:	add	r4, r4, #1
   33c48:	ldr	r0, [r5, #16]
   33c4c:	bl	12154 <free@plt>
   33c50:	mov	r0, r5
   33c54:	bl	12154 <free@plt>
   33c58:	ldr	r3, [r6, #16]
   33c5c:	cmp	r3, r4
   33c60:	bgt	33c3c <fts_children@@Base+0x21a0>
   33c64:	ldr	r0, [r6, #20]
   33c68:	bl	12154 <free@plt>
   33c6c:	ldr	r3, [r6, #8]
   33c70:	cmp	r3, #0
   33c74:	beq	33c88 <fts_children@@Base+0x21ec>
   33c78:	ldr	r0, [r3, #8]
   33c7c:	bl	12154 <free@plt>
   33c80:	ldr	r0, [r6, #8]
   33c84:	bl	12154 <free@plt>
   33c88:	mov	r0, r6
   33c8c:	bl	12154 <free@plt>
   33c90:	ldr	r3, [r8, #124]	; 0x7c
   33c94:	add	r7, r7, #1
   33c98:	cmp	r3, r7
   33c9c:	bgt	33c24 <fts_children@@Base+0x2188>
   33ca0:	mov	r3, #0
   33ca4:	str	r3, [r8, #124]	; 0x7c
   33ca8:	str	r3, [r8, #108]	; 0x6c
   33cac:	pop	{r4, r5, r6, r7, r8, pc}
   33cb0:	ldrb	r3, [r1, #24]
   33cb4:	push	{r4, r5, r6, r7, r8, lr}
   33cb8:	sub	ip, r3, #2
   33cbc:	ldr	r2, [r1, #28]
   33cc0:	cmp	ip, #14
   33cc4:	ldrls	pc, [pc, ip, lsl #2]
   33cc8:	b	33e6c <fts_children@@Base+0x23d0>
   33ccc:	muleq	r3, r8, sp
   33cd0:	andeq	r3, r3, ip, ror #28
   33cd4:			; <UNDEFINED> instruction: 0x00033db8
   33cd8:	andeq	r3, r3, ip, ror #28
   33cdc:	andeq	r3, r3, ip, ror #28
   33ce0:	andeq	r3, r3, ip, ror #28
   33ce4:	andeq	r3, r3, ip, lsl lr
   33ce8:	andeq	r3, r3, ip, lsl lr
   33cec:	andeq	r3, r3, r8, lsl #26
   33cf0:	andeq	r3, r3, r8, lsl #26
   33cf4:	andeq	r3, r3, ip, lsl lr
   33cf8:	andeq	r3, r3, ip, ror #28
   33cfc:	andeq	r3, r3, ip, ror #28
   33d00:	andeq	r3, r3, ip, ror #28
   33d04:	muleq	r3, r0, sp
   33d08:	ldrb	r3, [r0, #88]	; 0x58
   33d0c:	orr	r3, r3, #1
   33d10:	strb	r3, [r0, #88]	; 0x58
   33d14:	ldr	r3, [r1, #4]
   33d18:	cmp	r3, #0
   33d1c:	ldrne	r3, [r3, #12]
   33d20:	ldreq	r3, [r1, #16]
   33d24:	ldr	r5, [r3, #28]
   33d28:	ldr	r3, [r1, #8]
   33d2c:	cmp	r3, #0
   33d30:	ldrne	r3, [r3, #12]
   33d34:	ldreq	r3, [r1, #16]
   33d38:	cmp	r5, #0
   33d3c:	ldr	r6, [r3, #28]
   33d40:	blt	33ecc <fts_children@@Base+0x2430>
   33d44:	cmp	r6, #0
   33d48:	blt	33eb8 <fts_children@@Base+0x241c>
   33d4c:	add	r2, r2, r2, lsl #1
   33d50:	ldr	r3, [r0, #20]
   33d54:	lsl	r4, r2, #2
   33d58:	mov	r7, #2
   33d5c:	str	r7, [r3, r4]
   33d60:	mov	r0, #8
   33d64:	add	r4, r3, r4
   33d68:	bl	123dc <malloc@plt>
   33d6c:	cmp	r0, #0
   33d70:	mov	r3, r0
   33d74:	str	r0, [r4, #8]
   33d78:	beq	33eb0 <fts_children@@Base+0x2414>
   33d7c:	cmp	r5, r6
   33d80:	beq	33e8c <fts_children@@Base+0x23f0>
   33d84:	str	r7, [r4, #4]
   33d88:	bge	33ea0 <fts_children@@Base+0x2404>
   33d8c:	stm	r0, {r5, r6}
   33d90:	mov	r0, #0
   33d94:	pop	{r4, r5, r6, r7, r8, pc}
   33d98:	ldr	r3, [r1, #16]
   33d9c:	cmp	r3, #0
   33da0:	beq	33d90 <fts_children@@Base+0x22f4>
   33da4:	ldr	r3, [pc, #328]	; 33ef4 <fts_children@@Base+0x2458>
   33da8:	ldr	r2, [pc, #328]	; 33ef8 <fts_children@@Base+0x245c>
   33dac:	ldr	r1, [pc, #328]	; 33efc <fts_children@@Base+0x2460>
   33db0:	ldr	r0, [pc, #328]	; 33f00 <fts_children@@Base+0x2464>
   33db4:	bl	1279c <__assert_fail@plt>
   33db8:	ldr	ip, [r1, #16]
   33dbc:	ldr	r3, [r0, #12]
   33dc0:	ldr	r4, [ip, #28]
   33dc4:	str	r4, [r3, r2, lsl #2]
   33dc8:	ldrb	r3, [r1, #24]
   33dcc:	cmp	r3, #4
   33dd0:	bne	33d90 <fts_children@@Base+0x22f4>
   33dd4:	add	r2, r2, r2, lsl #1
   33dd8:	ldr	r6, [r0, #20]
   33ddc:	lsl	r5, r2, #2
   33de0:	add	r7, r6, r5
   33de4:	mov	r2, #1
   33de8:	str	r2, [r6, r5]
   33dec:	mov	r0, r3
   33df0:	str	r2, [r7, #4]
   33df4:	bl	123dc <malloc@plt>
   33df8:	mov	r3, r0
   33dfc:	cmp	r0, #0
   33e00:	str	r0, [r7, #8]
   33e04:	streq	r0, [r7, #4]
   33e08:	strne	r4, [r3]
   33e0c:	moveq	r0, #12
   33e10:	streq	r3, [r6, r5]
   33e14:	movne	r0, #0
   33e18:	pop	{r4, r5, r6, r7, r8, pc}
   33e1c:	add	r2, r2, r2, lsl #1
   33e20:	ldr	r5, [r0, #20]
   33e24:	lsl	r4, r2, #2
   33e28:	ldr	r2, [r1, #16]
   33e2c:	add	r6, r5, r4
   33e30:	mov	r3, #1
   33e34:	ldr	r7, [r2, #28]
   33e38:	mov	r0, #4
   33e3c:	str	r3, [r5, r4]
   33e40:	str	r3, [r6, #4]
   33e44:	bl	123dc <malloc@plt>
   33e48:	mov	r3, r0
   33e4c:	cmp	r0, #0
   33e50:	str	r0, [r6, #8]
   33e54:	streq	r0, [r6, #4]
   33e58:	strne	r7, [r3]
   33e5c:	moveq	r0, #12
   33e60:	streq	r3, [r5, r4]
   33e64:	movne	r0, #0
   33e68:	pop	{r4, r5, r6, r7, r8, pc}
   33e6c:	ands	r3, r3, #8
   33e70:	bne	33ee0 <fts_children@@Base+0x2444>
   33e74:	ldr	ip, [r1, #16]
   33e78:	ldr	r1, [r0, #12]
   33e7c:	mov	r0, r3
   33e80:	ldr	r3, [ip, #28]
   33e84:	str	r3, [r1, r2, lsl #2]
   33e88:	pop	{r4, r5, r6, r7, r8, pc}
   33e8c:	mov	r2, #1
   33e90:	str	r2, [r4, #4]
   33e94:	mov	r0, #0
   33e98:	str	r5, [r3]
   33e9c:	pop	{r4, r5, r6, r7, r8, pc}
   33ea0:	str	r6, [r0]
   33ea4:	str	r5, [r0, #4]
   33ea8:	mov	r0, #0
   33eac:	pop	{r4, r5, r6, r7, r8, pc}
   33eb0:	mov	r0, #12
   33eb4:	pop	{r4, r5, r6, r7, r8, pc}
   33eb8:	ldr	r3, [pc, #52]	; 33ef4 <fts_children@@Base+0x2458>
   33ebc:	mov	r2, #1456	; 0x5b0
   33ec0:	ldr	r1, [pc, #52]	; 33efc <fts_children@@Base+0x2460>
   33ec4:	ldr	r0, [pc, #56]	; 33f04 <fts_children@@Base+0x2468>
   33ec8:	bl	1279c <__assert_fail@plt>
   33ecc:	ldr	r3, [pc, #32]	; 33ef4 <fts_children@@Base+0x2458>
   33ed0:	ldr	r2, [pc, #48]	; 33f08 <fts_children@@Base+0x246c>
   33ed4:	ldr	r1, [pc, #32]	; 33efc <fts_children@@Base+0x2460>
   33ed8:	ldr	r0, [pc, #44]	; 33f0c <fts_children@@Base+0x2470>
   33edc:	bl	1279c <__assert_fail@plt>
   33ee0:	ldr	r3, [pc, #12]	; 33ef4 <fts_children@@Base+0x2458>
   33ee4:	ldr	r2, [pc, #36]	; 33f10 <fts_children@@Base+0x2474>
   33ee8:	ldr	r1, [pc, #12]	; 33efc <fts_children@@Base+0x2460>
   33eec:	ldr	r0, [pc, #32]	; 33f14 <fts_children@@Base+0x2478>
   33ef0:	bl	1279c <__assert_fail@plt>
   33ef4:	muleq	r4, ip, r7
   33ef8:	muleq	r0, pc, r5	; <UNPREDICTABLE>
   33efc:	andeq	sl, r4, r4, ror #19
   33f00:	strdeq	sl, [r4], -r0
   33f04:	andeq	sl, r4, r0, lsl sl
   33f08:	andeq	r0, r0, pc, lsr #11
   33f0c:	andeq	sl, r4, r4, lsl #20
   33f10:	andeq	r0, r0, r2, asr #11
   33f14:	andeq	sl, r4, ip, lsl sl
   33f18:	ldr	r3, [r0, #28]
   33f1c:	add	ip, r1, #1
   33f20:	cmp	ip, r3
   33f24:	bge	33f64 <fts_children@@Base+0x24c8>
   33f28:	ldr	r0, [r0, #8]
   33f2c:	add	r2, r0, ip, lsl #2
   33f30:	ldr	r0, [r0, ip, lsl #2]
   33f34:	cmn	r0, #1
   33f38:	bne	33f64 <fts_children@@Base+0x24c8>
   33f3c:	sub	r0, r3, r1
   33f40:	mov	r3, #1
   33f44:	add	r3, r3, #1
   33f48:	cmp	r3, r0
   33f4c:	bxeq	lr
   33f50:	ldr	ip, [r2, #4]!
   33f54:	cmn	ip, #1
   33f58:	beq	33f44 <fts_children@@Base+0x24a8>
   33f5c:	mov	r0, r3
   33f60:	bx	lr
   33f64:	mov	r0, #1
   33f68:	bx	lr
   33f6c:	cmp	r0, #0
   33f70:	ble	33ff4 <fts_children@@Base+0x2558>
   33f74:	push	{lr}		; (str lr, [sp, #-4]!)
   33f78:	sub	ip, r0, #1
   33f7c:	ldr	lr, [r1]
   33f80:	mov	r0, #0
   33f84:	cmp	r0, ip
   33f88:	bcs	33fc4 <fts_children@@Base+0x2528>
   33f8c:	add	r1, r0, ip
   33f90:	lsr	r1, r1, #1
   33f94:	ldr	r3, [lr, r1, lsl #2]
   33f98:	cmp	r2, r3
   33f9c:	ble	33fb4 <fts_children@@Base+0x2518>
   33fa0:	b	33fd8 <fts_children@@Base+0x253c>
   33fa4:	ldr	ip, [lr, r3, lsl #2]
   33fa8:	cmp	ip, r2
   33fac:	blt	33fe0 <fts_children@@Base+0x2544>
   33fb0:	mov	r1, r3
   33fb4:	add	r3, r0, r1
   33fb8:	cmp	r0, r1
   33fbc:	lsr	r3, r3, #1
   33fc0:	bcc	33fa4 <fts_children@@Base+0x2508>
   33fc4:	ldr	r3, [lr, r0, lsl #2]
   33fc8:	cmp	r2, r3
   33fcc:	beq	33fec <fts_children@@Base+0x2550>
   33fd0:	mov	r0, #0
   33fd4:	pop	{pc}		; (ldr pc, [sp], #4)
   33fd8:	mov	r3, r1
   33fdc:	mov	r1, ip
   33fe0:	add	r0, r3, #1
   33fe4:	mov	ip, r1
   33fe8:	b	33f84 <fts_children@@Base+0x24e8>
   33fec:	add	r0, r0, #1
   33ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   33ff4:	mov	r0, #0
   33ff8:	bx	lr
   33ffc:	push	{r4, r5, r6, r7, r8, r9, lr}
   34000:	sub	sp, sp, #12
   34004:	mov	r5, r1
   34008:	ldr	r7, [sp, #40]	; 0x28
   3400c:	mov	r6, r0
   34010:	mov	r4, r2
   34014:	mov	r9, r3
   34018:	add	r8, r1, #8
   3401c:	mov	r1, r8
   34020:	mov	r2, r4
   34024:	ldr	r0, [r5, #4]
   34028:	bl	33f6c <fts_children@@Base+0x24d0>
   3402c:	mov	r1, r4
   34030:	cmp	r0, #0
   34034:	mov	r0, r5
   34038:	bne	340f0 <fts_children@@Base+0x2654>
   3403c:	ldr	r3, [r6]
   34040:	add	r2, r3, r4, lsl #3
   34044:	ldrb	r2, [r2, #4]
   34048:	cmp	r2, r7
   3404c:	bne	3405c <fts_children@@Base+0x25c0>
   34050:	ldr	r3, [r3, r4, lsl #3]
   34054:	cmp	r3, r9
   34058:	beq	340c8 <fts_children@@Base+0x262c>
   3405c:	bl	32a54 <fts_children@@Base+0xfb8>
   34060:	add	r4, r4, r4, lsl #1
   34064:	lsl	r4, r4, #2
   34068:	cmp	r0, #0
   3406c:	beq	340e4 <fts_children@@Base+0x2648>
   34070:	ldr	r3, [r6, #20]
   34074:	add	r3, r3, r4
   34078:	ldr	r2, [r3, #4]
   3407c:	cmp	r2, #0
   34080:	beq	340f0 <fts_children@@Base+0x2654>
   34084:	cmp	r2, #2
   34088:	ldr	r2, [r3, #8]
   3408c:	beq	34098 <fts_children@@Base+0x25fc>
   34090:	ldr	r4, [r2]
   34094:	b	3401c <fts_children@@Base+0x2580>
   34098:	ldr	r2, [r2, #4]
   3409c:	mov	r3, r9
   340a0:	mov	r1, r5
   340a4:	str	r7, [sp]
   340a8:	mov	r0, r6
   340ac:	bl	33ffc <fts_children@@Base+0x2560>
   340b0:	cmp	r0, #0
   340b4:	bne	340e8 <fts_children@@Base+0x264c>
   340b8:	ldr	r3, [r6, #20]
   340bc:	add	r4, r3, r4
   340c0:	ldr	r2, [r4, #8]
   340c4:	b	34090 <fts_children@@Base+0x25f4>
   340c8:	cmp	r7, #9
   340cc:	bne	340f0 <fts_children@@Base+0x2654>
   340d0:	mov	r1, r4
   340d4:	mov	r0, r5
   340d8:	bl	32a54 <fts_children@@Base+0xfb8>
   340dc:	cmp	r0, #0
   340e0:	bne	340f0 <fts_children@@Base+0x2654>
   340e4:	mov	r0, #12
   340e8:	add	sp, sp, #12
   340ec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   340f0:	mov	r0, #0
   340f4:	add	sp, sp, #12
   340f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   340fc:	ldr	r3, [r0]
   34100:	cmp	r2, r3
   34104:	bxge	lr
   34108:	ldr	r3, [r1]
   3410c:	add	r3, r3, r2, lsl #2
   34110:	ldr	r1, [r3, #4]
   34114:	add	r2, r2, #1
   34118:	str	r1, [r3], #4
   3411c:	ldr	r1, [r0]
   34120:	cmp	r2, r1
   34124:	blt	34110 <fts_children@@Base+0x2674>
   34128:	bx	lr
   3412c:	ldrb	r3, [r1, #24]
   34130:	cmp	r3, #4
   34134:	beq	3419c <fts_children@@Base+0x2700>
   34138:	cmp	r3, #17
   3413c:	beq	34148 <fts_children@@Base+0x26ac>
   34140:	mov	r0, #0
   34144:	bx	lr
   34148:	ldr	r3, [r1, #4]
   3414c:	cmp	r3, #0
   34150:	beq	34140 <fts_children@@Base+0x26a4>
   34154:	ldrb	r2, [r3, #24]
   34158:	cmp	r2, #17
   3415c:	bne	34140 <fts_children@@Base+0x26a4>
   34160:	ldr	r2, [r3, #4]
   34164:	ldr	r3, [r3, #20]
   34168:	cmp	r2, #0
   3416c:	str	r2, [r1, #4]
   34170:	strne	r1, [r2]
   34174:	ldr	r2, [r0, #132]	; 0x84
   34178:	ldr	r1, [r1, #20]
   3417c:	cmp	r3, #31
   34180:	ldr	r1, [r2, r1, lsl #2]
   34184:	str	r1, [r2, r3, lsl #2]
   34188:	ldrle	r2, [r0, #80]	; 0x50
   3418c:	movle	r1, #1
   34190:	bicle	r3, r2, r1, lsl r3
   34194:	strle	r3, [r0, #80]	; 0x50
   34198:	b	34140 <fts_children@@Base+0x26a4>
   3419c:	ldr	r2, [r0, #132]	; 0x84
   341a0:	cmp	r2, #0
   341a4:	beq	34140 <fts_children@@Base+0x26a4>
   341a8:	push	{lr}		; (str lr, [sp, #-4]!)
   341ac:	mov	ip, #1
   341b0:	ldr	lr, [r1, #20]
   341b4:	ldr	r3, [r0, #80]	; 0x50
   341b8:	ldr	r2, [r2, lr, lsl #2]
   341bc:	str	r2, [r1, #20]
   341c0:	orr	r3, r3, ip, lsl r2
   341c4:	str	r3, [r0, #80]	; 0x50
   341c8:	mov	r0, #0
   341cc:	pop	{pc}		; (ldr pc, [sp], #4)
   341d0:	ldrb	r3, [r1, #24]
   341d4:	ldr	r2, [r1, #4]
   341d8:	cmp	r3, #11
   341dc:	streq	r1, [r2, #16]
   341e0:	beq	34200 <fts_children@@Base+0x2764>
   341e4:	cmp	r3, #16
   341e8:	bne	34208 <fts_children@@Base+0x276c>
   341ec:	ldr	r3, [r1, #8]
   341f0:	ldr	r0, [r3, #12]
   341f4:	str	r0, [r2, #16]
   341f8:	ldr	r2, [r1, #16]
   341fc:	str	r2, [r3, #16]
   34200:	mov	r0, #0
   34204:	bx	lr
   34208:	cmp	r2, #0
   3420c:	mov	r0, #0
   34210:	ldrne	r3, [r1, #16]
   34214:	strne	r3, [r2, #16]
   34218:	ldr	r3, [r1, #8]
   3421c:	cmp	r3, #0
   34220:	ldrne	r2, [r1, #16]
   34224:	strne	r2, [r3, #16]
   34228:	bx	lr
   3422c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34230:	sub	sp, sp, #28
   34234:	ldr	r9, [r0, #108]	; 0x6c
   34238:	ldr	r6, [sp, #64]	; 0x40
   3423c:	ldr	r7, [sp, #72]	; 0x48
   34240:	ldr	lr, [r0, #84]	; 0x54
   34244:	mov	ip, r9
   34248:	mov	r4, #0
   3424c:	str	lr, [sp, #8]
   34250:	cmp	r4, ip
   34254:	bge	342b0 <fts_children@@Base+0x2814>
   34258:	add	lr, r4, ip
   3425c:	ldr	r5, [r0, #116]	; 0x74
   34260:	add	lr, lr, lr, lsr #31
   34264:	asr	lr, lr, #1
   34268:	add	r8, lr, lr, lsl #2
   3426c:	add	r8, r5, r8, lsl #2
   34270:	ldr	r8, [r8, #4]
   34274:	cmp	r6, r8
   34278:	ble	342a0 <fts_children@@Base+0x2804>
   3427c:	b	343f4 <fts_children@@Base+0x2958>
   34280:	asr	ip, ip, #1
   34284:	mov	sl, ip
   34288:	add	r8, ip, ip, lsl #2
   3428c:	add	r8, r5, r8, lsl #2
   34290:	ldr	r8, [r8, #4]
   34294:	cmp	r8, r6
   34298:	blt	343fc <fts_children@@Base+0x2960>
   3429c:	mov	lr, ip
   342a0:	add	ip, r4, lr
   342a4:	cmp	r4, lr
   342a8:	add	ip, ip, ip, lsr #31
   342ac:	blt	34280 <fts_children@@Base+0x27e4>
   342b0:	cmp	r9, r4
   342b4:	ble	34438 <fts_children@@Base+0x299c>
   342b8:	add	lr, r4, r4, lsl #2
   342bc:	ldr	ip, [r0, #116]	; 0x74
   342c0:	add	ip, ip, lr, lsl #2
   342c4:	ldr	ip, [ip, #4]
   342c8:	cmp	r6, ip
   342cc:	mvnne	r4, #0
   342d0:	mov	ip, r9
   342d4:	mov	r5, #0
   342d8:	cmp	r5, ip
   342dc:	bge	34338 <fts_children@@Base+0x289c>
   342e0:	add	lr, r5, ip
   342e4:	ldr	r8, [r0, #116]	; 0x74
   342e8:	add	lr, lr, lr, lsr #31
   342ec:	asr	lr, lr, #1
   342f0:	add	sl, lr, lr, lsl #2
   342f4:	add	sl, r8, sl, lsl #2
   342f8:	ldr	sl, [sl, #4]
   342fc:	cmp	r7, sl
   34300:	ble	34328 <fts_children@@Base+0x288c>
   34304:	b	34408 <fts_children@@Base+0x296c>
   34308:	asr	ip, ip, #1
   3430c:	mov	fp, ip
   34310:	add	sl, ip, ip, lsl #2
   34314:	add	sl, r8, sl, lsl #2
   34318:	ldr	sl, [sl, #4]
   3431c:	cmp	sl, r7
   34320:	blt	34410 <fts_children@@Base+0x2974>
   34324:	mov	lr, ip
   34328:	add	ip, r5, lr
   3432c:	cmp	r5, lr
   34330:	add	ip, ip, ip, lsr #31
   34334:	blt	34308 <fts_children@@Base+0x286c>
   34338:	cmp	r9, r5
   3433c:	ble	34440 <fts_children@@Base+0x29a4>
   34340:	add	lr, r5, r5, lsl #2
   34344:	ldr	ip, [r0, #116]	; 0x74
   34348:	add	ip, ip, lr, lsl #2
   3434c:	ldr	ip, [ip, #4]
   34350:	cmp	r7, ip
   34354:	mvnne	r5, #0
   34358:	ldr	ip, [r1]
   3435c:	cmp	ip, #0
   34360:	ble	34430 <fts_children@@Base+0x2994>
   34364:	mov	r9, r2
   34368:	mov	r8, r0
   3436c:	mov	fp, #0
   34370:	str	r3, [sp, #12]
   34374:	str	r1, [sp, #20]
   34378:	str	r4, [sp, #16]
   3437c:	ldr	r3, [r9]
   34380:	ldr	r2, [sp, #8]
   34384:	ldr	lr, [r8, #116]	; 0x74
   34388:	mov	r0, r8
   3438c:	ldr	ip, [r2]
   34390:	ldr	r2, [r3, fp, lsl #2]
   34394:	ldr	r3, [sp, #12]
   34398:	mov	r1, r2
   3439c:	add	r2, r2, r2, lsl #2
   343a0:	ldr	r2, [lr, r2, lsl #2]
   343a4:	ldr	r4, [ip, r2, lsl #3]
   343a8:	ldr	r2, [sp, #16]
   343ac:	str	r6, [sp]
   343b0:	str	r2, [sp, #4]
   343b4:	mov	r2, r4
   343b8:	bl	328ec <fts_children@@Base+0xe50>
   343bc:	ldr	r1, [r9]
   343c0:	mov	r2, r4
   343c4:	ldr	r3, [sp, #68]	; 0x44
   343c8:	ldr	r1, [r1, fp, lsl #2]
   343cc:	str	r5, [sp, #4]
   343d0:	str	r7, [sp]
   343d4:	mov	sl, r0
   343d8:	mov	r0, r8
   343dc:	bl	328ec <fts_children@@Base+0xe50>
   343e0:	cmp	sl, r0
   343e4:	beq	3441c <fts_children@@Base+0x2980>
   343e8:	mov	r0, #1
   343ec:	add	sp, sp, #28
   343f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   343f4:	mov	sl, lr
   343f8:	mov	lr, ip
   343fc:	add	r4, sl, #1
   34400:	mov	ip, lr
   34404:	b	34250 <fts_children@@Base+0x27b4>
   34408:	mov	fp, lr
   3440c:	mov	lr, ip
   34410:	add	r5, fp, #1
   34414:	mov	ip, lr
   34418:	b	342d8 <fts_children@@Base+0x283c>
   3441c:	ldr	r3, [sp, #20]
   34420:	add	fp, fp, #1
   34424:	ldr	r3, [r3]
   34428:	cmp	fp, r3
   3442c:	blt	3437c <fts_children@@Base+0x28e0>
   34430:	mov	r0, #0
   34434:	b	343ec <fts_children@@Base+0x2950>
   34438:	mvn	r4, #0
   3443c:	b	342d0 <fts_children@@Base+0x2834>
   34440:	mvn	r5, #0
   34444:	b	34358 <fts_children@@Base+0x28bc>
   34448:	push	{r4, r5, r6, lr}
   3444c:	mov	r4, r0
   34450:	mov	r6, r1
   34454:	mov	r5, r2
   34458:	b	34460 <fts_children@@Base+0x29c4>
   3445c:	mov	r4, r3
   34460:	mov	r1, r4
   34464:	mov	r0, r5
   34468:	blx	r6
   3446c:	cmp	r0, #0
   34470:	popne	{r4, r5, r6, pc}
   34474:	ldr	r3, [r4, #4]
   34478:	cmp	r3, #0
   3447c:	bne	3445c <fts_children@@Base+0x29c0>
   34480:	ldr	r2, [r4, #8]
   34484:	cmp	r2, #0
   34488:	cmpne	r2, r3
   3448c:	bne	344b0 <fts_children@@Base+0x2a14>
   34490:	ldr	r2, [r4]
   34494:	mov	r3, r4
   34498:	subs	r4, r2, #0
   3449c:	popeq	{r4, r5, r6, pc}
   344a0:	ldr	r2, [r4, #8]
   344a4:	cmp	r2, #0
   344a8:	cmpne	r2, r3
   344ac:	beq	34490 <fts_children@@Base+0x29f4>
   344b0:	mov	r3, r2
   344b4:	b	3445c <fts_children@@Base+0x29c0>
   344b8:	push	{r4, r5, r6, r7, r8, lr}
   344bc:	subs	r6, r1, #0
   344c0:	beq	345b0 <fts_children@@Base+0x2b14>
   344c4:	ldr	ip, [r6, #4]
   344c8:	cmp	ip, #0
   344cc:	beq	345b0 <fts_children@@Base+0x2b14>
   344d0:	ldm	r0, {r3, r4}
   344d4:	mov	r5, r0
   344d8:	add	r2, r4, ip, lsl #1
   344dc:	cmp	r3, r2
   344e0:	blt	345ec <fts_children@@Base+0x2b50>
   344e4:	cmp	r4, #0
   344e8:	beq	34620 <fts_children@@Base+0x2b84>
   344ec:	sub	r3, r4, #1
   344f0:	sub	r2, ip, #1
   344f4:	add	r4, r4, ip, lsl #1
   344f8:	mvn	r7, r2
   344fc:	mvn	lr, r3
   34500:	tst	r7, lr
   34504:	bpl	34540 <fts_children@@Base+0x2aa4>
   34508:	ldr	r0, [r5, #8]
   3450c:	ldr	ip, [r6, #8]
   34510:	ldr	r1, [r0, r3, lsl #2]
   34514:	ldr	ip, [ip, r2, lsl #2]
   34518:	cmp	r1, ip
   3451c:	beq	345d8 <fts_children@@Base+0x2b3c>
   34520:	sublt	r4, r4, #1
   34524:	sublt	r2, r2, #1
   34528:	subge	r3, r3, #1
   3452c:	mvnlt	r7, r2
   34530:	mvnge	lr, r3
   34534:	strlt	ip, [r0, r4, lsl #2]
   34538:	tst	r7, lr
   3453c:	bmi	34508 <fts_children@@Base+0x2a6c>
   34540:	cmp	r2, #0
   34544:	blt	34564 <fts_children@@Base+0x2ac8>
   34548:	add	r2, r2, #1
   3454c:	sub	r4, r4, r2
   34550:	ldr	r0, [r5, #8]
   34554:	lsl	r2, r2, #2
   34558:	add	r0, r0, r4, lsl #2
   3455c:	ldr	r1, [r6, #8]
   34560:	bl	121a8 <memcpy@plt>
   34564:	ldr	r1, [r6, #4]
   34568:	ldr	r3, [r5, #4]
   3456c:	add	r1, r3, r1, lsl #1
   34570:	subs	r2, r1, r4
   34574:	sub	r1, r1, #1
   34578:	beq	345b0 <fts_children@@Base+0x2b14>
   3457c:	ldr	r0, [r5, #8]
   34580:	add	ip, r3, r2
   34584:	sub	r3, r3, #1
   34588:	str	ip, [r5, #4]
   3458c:	ldr	lr, [r0, r1, lsl #2]
   34590:	ldr	ip, [r0, r3, lsl #2]
   34594:	add	r5, r3, r2
   34598:	cmp	lr, ip
   3459c:	ble	345bc <fts_children@@Base+0x2b20>
   345a0:	subs	r2, r2, #1
   345a4:	sub	r1, r1, #1
   345a8:	str	lr, [r0, r5, lsl #2]
   345ac:	bne	3458c <fts_children@@Base+0x2af0>
   345b0:	mov	r4, #0
   345b4:	mov	r0, r4
   345b8:	pop	{r4, r5, r6, r7, r8, pc}
   345bc:	subs	r3, r3, #1
   345c0:	str	ip, [r0, r5, lsl #2]
   345c4:	bpl	3458c <fts_children@@Base+0x2af0>
   345c8:	lsl	r2, r2, #2
   345cc:	add	r1, r0, r4, lsl #2
   345d0:	bl	121a8 <memcpy@plt>
   345d4:	b	345b0 <fts_children@@Base+0x2b14>
   345d8:	sub	r2, r2, #1
   345dc:	sub	r3, r3, #1
   345e0:	mvn	r7, r2
   345e4:	mvn	lr, r3
   345e8:	b	34500 <fts_children@@Base+0x2a64>
   345ec:	add	r4, ip, r3
   345f0:	ldr	r0, [r0, #8]
   345f4:	lsl	r1, r4, #3
   345f8:	bl	12268 <realloc@plt>
   345fc:	lsl	r7, r4, #1
   34600:	cmp	r0, #0
   34604:	beq	3463c <fts_children@@Base+0x2ba0>
   34608:	ldr	r4, [r5, #4]
   3460c:	ldr	ip, [r6, #4]
   34610:	cmp	r4, #0
   34614:	str	r0, [r5, #8]
   34618:	str	r7, [r5]
   3461c:	bne	344ec <fts_children@@Base+0x2a50>
   34620:	str	ip, [r5, #4]
   34624:	ldr	r2, [r6, #4]
   34628:	ldr	r0, [r5, #8]
   3462c:	ldr	r1, [r6, #8]
   34630:	lsl	r2, r2, #2
   34634:	bl	121a8 <memcpy@plt>
   34638:	b	345b4 <fts_children@@Base+0x2b18>
   3463c:	mov	r4, #12
   34640:	b	345b4 <fts_children@@Base+0x2b18>
   34644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34648:	add	r8, r2, r2, lsl #1
   3464c:	ldr	r6, [r1, #20]
   34650:	lsl	r8, r8, #2
   34654:	add	r6, r6, r8
   34658:	mov	r9, r2
   3465c:	ldr	sl, [pc, #564]	; 34898 <fts_children@@Base+0x2dfc>
   34660:	ldr	r2, [r6, #4]
   34664:	sub	sp, sp, #52	; 0x34
   34668:	add	r2, r2, #1
   3466c:	mov	r5, r1
   34670:	ldr	r1, [sl]
   34674:	str	r0, [sp, #8]
   34678:	str	r3, [sp, #12]
   3467c:	lsl	r0, r2, #2
   34680:	mov	r3, #0
   34684:	str	r2, [sp, #20]
   34688:	str	r1, [sp, #44]	; 0x2c
   3468c:	str	r3, [sp, #24]
   34690:	bl	123dc <malloc@plt>
   34694:	cmp	r0, #0
   34698:	str	r0, [sp, #28]
   3469c:	beq	3488c <fts_children@@Base+0x2df0>
   346a0:	ldr	ip, [r5]
   346a4:	lsl	r4, r9, #3
   346a8:	add	r1, ip, r4
   346ac:	ldr	r3, [r5, #24]
   346b0:	ldr	r0, [r1, #4]
   346b4:	ldr	r2, [pc, #480]	; 3489c <fts_children@@Base+0x2e00>
   346b8:	add	r3, r3, r8
   346bc:	and	r2, r2, r0
   346c0:	cmp	r2, #0
   346c4:	mvn	r2, #0
   346c8:	str	r2, [r3, #4]
   346cc:	bne	347bc <fts_children@@Base+0x2d20>
   346d0:	ldrb	r3, [r1, #4]
   346d4:	tst	r3, #8
   346d8:	beq	34814 <fts_children@@Base+0x2d78>
   346dc:	ldr	r0, [r5, #20]
   346e0:	add	r3, r0, r8
   346e4:	ldr	r2, [r3, #4]
   346e8:	cmp	r2, #0
   346ec:	ble	34814 <fts_children@@Base+0x2d78>
   346f0:	mov	fp, #0
   346f4:	mov	r6, fp
   346f8:	add	r7, sp, #32
   346fc:	b	34748 <fts_children@@Base+0x2cac>
   34700:	ldm	r1, {r0, r1, r2}
   34704:	stm	r7, {r0, r1, r2}
   34708:	mov	r1, r7
   3470c:	add	r0, sp, #20
   34710:	bl	344b8 <fts_children@@Base+0x2a1c>
   34714:	cmp	r0, #0
   34718:	bne	34788 <fts_children@@Base+0x2cec>
   3471c:	ldr	r3, [r5, #24]
   34720:	add	r4, r3, r4
   34724:	ldr	r3, [r4, #4]
   34728:	cmp	r3, #0
   3472c:	beq	347a8 <fts_children@@Base+0x2d0c>
   34730:	ldr	r0, [r5, #20]
   34734:	add	r3, r0, r8
   34738:	add	r6, r6, #1
   3473c:	ldr	r2, [r3, #4]
   34740:	cmp	r2, r6
   34744:	ble	34850 <fts_children@@Base+0x2db4>
   34748:	ldr	r3, [r3, #8]
   3474c:	ldr	r1, [r5, #24]
   34750:	ldr	r2, [r3, r6, lsl #2]
   34754:	add	r4, r2, r2, lsl #1
   34758:	lsl	r4, r4, #2
   3475c:	add	r1, r1, r4
   34760:	ldr	r3, [r1, #4]
   34764:	cmn	r3, #1
   34768:	beq	347b4 <fts_children@@Base+0x2d18>
   3476c:	cmp	r3, #0
   34770:	bne	34700 <fts_children@@Base+0x2c64>
   34774:	mov	r1, r5
   34778:	mov	r0, r7
   3477c:	bl	34644 <fts_children@@Base+0x2ba8>
   34780:	cmp	r0, #0
   34784:	beq	34708 <fts_children@@Base+0x2c6c>
   34788:	mov	r3, r0
   3478c:	ldr	r1, [sp, #44]	; 0x2c
   34790:	ldr	r2, [sl]
   34794:	mov	r0, r3
   34798:	cmp	r1, r2
   3479c:	bne	34894 <fts_children@@Base+0x2df8>
   347a0:	add	sp, sp, #52	; 0x34
   347a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   347a8:	ldr	r0, [sp, #40]	; 0x28
   347ac:	bl	12154 <free@plt>
   347b0:	ldr	r0, [r5, #20]
   347b4:	mov	fp, #1
   347b8:	b	34734 <fts_children@@Base+0x2c98>
   347bc:	ldr	r3, [r6, #4]
   347c0:	cmp	r3, #0
   347c4:	beq	34814 <fts_children@@Base+0x2d78>
   347c8:	ldr	r3, [r6, #8]
   347cc:	ldr	r3, [r3]
   347d0:	add	ip, ip, r3, lsl #3
   347d4:	ldrb	r3, [ip, #6]
   347d8:	tst	r3, #4
   347dc:	bne	346d0 <fts_children@@Base+0x2c34>
   347e0:	add	r2, r2, #1024	; 0x400
   347e4:	and	r0, r2, r0, lsr #8
   347e8:	mov	r3, r9
   347ec:	str	r0, [sp]
   347f0:	mov	r2, r9
   347f4:	mov	r1, r9
   347f8:	mov	r0, r5
   347fc:	bl	338d4 <fts_children@@Base+0x1e38>
   34800:	subs	r3, r0, #0
   34804:	bne	3478c <fts_children@@Base+0x2cf0>
   34808:	ldr	r1, [r5]
   3480c:	add	r1, r1, r4
   34810:	b	346d0 <fts_children@@Base+0x2c34>
   34814:	add	r4, sp, #20
   34818:	mov	r1, r9
   3481c:	mov	r0, r4
   34820:	bl	32a54 <fts_children@@Base+0xfb8>
   34824:	cmp	r0, #0
   34828:	beq	3488c <fts_children@@Base+0x2df0>
   3482c:	ldr	r3, [r5, #24]
   34830:	ldm	r4, {r0, r1, r2}
   34834:	add	r8, r3, r8
   34838:	stm	r8, {r0, r1, r2}
   3483c:	mov	r3, #0
   34840:	ldm	r4, {r0, r1, r2}
   34844:	ldr	ip, [sp, #8]
   34848:	stm	ip, {r0, r1, r2}
   3484c:	b	3478c <fts_children@@Base+0x2cf0>
   34850:	add	r4, sp, #20
   34854:	mov	r1, r9
   34858:	mov	r0, r4
   3485c:	bl	32a54 <fts_children@@Base+0xfb8>
   34860:	cmp	r0, #0
   34864:	beq	3488c <fts_children@@Base+0x2df0>
   34868:	ldr	r2, [sp, #12]
   3486c:	ldr	r3, [r5, #24]
   34870:	eor	r2, r2, #1
   34874:	tst	fp, r2
   34878:	add	r2, r3, r8
   3487c:	beq	34830 <fts_children@@Base+0x2d94>
   34880:	mov	r3, #0
   34884:	str	r3, [r2, #4]
   34888:	b	3483c <fts_children@@Base+0x2da0>
   3488c:	mov	r3, #12
   34890:	b	3478c <fts_children@@Base+0x2cf0>
   34894:	bl	12244 <__stack_chk_fail@plt>
   34898:	andeq	fp, r5, r0, ror #24
   3489c:	andeq	pc, r3, r0, lsl #30
   348a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   348a4:	mov	r8, r1
   348a8:	ldr	r9, [r1, #4]
   348ac:	ldr	r1, [pc, #308]	; 349e8 <fts_children@@Base+0x2f4c>
   348b0:	sub	sp, sp, #28
   348b4:	mov	r6, #0
   348b8:	ldr	r1, [r1]
   348bc:	mov	r7, r0
   348c0:	lsl	r0, r9, #2
   348c4:	mov	r5, r2
   348c8:	mov	r4, r3
   348cc:	str	r9, [sp, #8]
   348d0:	str	r1, [sp, #20]
   348d4:	str	r6, [sp, #12]
   348d8:	bl	123dc <malloc@plt>
   348dc:	cmp	r0, r6
   348e0:	str	r0, [sp, #16]
   348e4:	beq	349dc <fts_children@@Base+0x2f40>
   348e8:	cmp	r9, r6
   348ec:	add	r9, sp, #8
   348f0:	ble	34988 <fts_children@@Base+0x2eec>
   348f4:	ldr	r3, [r8, #8]
   348f8:	ldr	r1, [r7, #24]
   348fc:	ldr	r2, [r3, r6, lsl #2]
   34900:	add	r3, r2, r2, lsl #1
   34904:	add	r1, r1, r3, lsl #2
   34908:	ldr	fp, [r1, #4]
   3490c:	cmp	fp, #0
   34910:	ble	349a0 <fts_children@@Base+0x2f04>
   34914:	ldr	ip, [r1, #8]
   34918:	ldr	sl, [r7]
   3491c:	sub	ip, ip, #4
   34920:	mov	r3, #0
   34924:	b	34934 <fts_children@@Base+0x2e98>
   34928:	add	r3, r3, #1
   3492c:	cmp	fp, r3
   34930:	beq	349a0 <fts_children@@Base+0x2f04>
   34934:	ldr	r0, [ip, #4]!
   34938:	add	lr, sl, r0, lsl #3
   3493c:	ldrb	lr, [lr, #4]
   34940:	cmp	r4, lr
   34944:	bne	34928 <fts_children@@Base+0x2e8c>
   34948:	ldr	lr, [sl, r0, lsl #3]
   3494c:	cmp	r5, lr
   34950:	bne	34928 <fts_children@@Base+0x2e8c>
   34954:	cmn	r0, #1
   34958:	beq	349a0 <fts_children@@Base+0x2f04>
   3495c:	str	r4, [sp]
   34960:	mov	r3, r5
   34964:	mov	r1, r9
   34968:	mov	r0, r7
   3496c:	bl	33ffc <fts_children@@Base+0x2560>
   34970:	cmp	r0, #0
   34974:	bne	349b0 <fts_children@@Base+0x2f14>
   34978:	ldr	r3, [r8, #4]
   3497c:	add	r6, r6, #1
   34980:	cmp	r3, r6
   34984:	bgt	348f4 <fts_children@@Base+0x2e58>
   34988:	ldr	r0, [r8, #8]
   3498c:	bl	12154 <free@plt>
   34990:	ldm	r9, {r0, r1, r2}
   34994:	mov	sl, #0
   34998:	stm	r8, {r0, r1, r2}
   3499c:	b	349bc <fts_children@@Base+0x2f20>
   349a0:	mov	r0, r9
   349a4:	bl	344b8 <fts_children@@Base+0x2a1c>
   349a8:	cmp	r0, #0
   349ac:	beq	34978 <fts_children@@Base+0x2edc>
   349b0:	mov	sl, r0
   349b4:	ldr	r0, [sp, #16]
   349b8:	bl	12154 <free@plt>
   349bc:	ldr	r3, [pc, #36]	; 349e8 <fts_children@@Base+0x2f4c>
   349c0:	ldr	r2, [sp, #20]
   349c4:	mov	r0, sl
   349c8:	ldr	r3, [r3]
   349cc:	cmp	r2, r3
   349d0:	bne	349e4 <fts_children@@Base+0x2f48>
   349d4:	add	sp, sp, #28
   349d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   349dc:	mov	sl, #12
   349e0:	b	349bc <fts_children@@Base+0x2f20>
   349e4:	bl	12244 <__stack_chk_fail@plt>
   349e8:	andeq	fp, r5, r0, ror #24
   349ec:	ldr	ip, [r1, #4]
   349f0:	cmp	ip, #0
   349f4:	beq	34b68 <fts_children@@Base+0x30cc>
   349f8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   349fc:	ldr	lr, [r2, #4]
   34a00:	cmp	lr, #0
   34a04:	beq	34b04 <fts_children@@Base+0x3068>
   34a08:	ldr	r3, [r0, #4]
   34a0c:	mov	r9, r2
   34a10:	ldr	r4, [r0]
   34a14:	add	r2, ip, lr
   34a18:	mov	r8, r1
   34a1c:	add	r1, r2, r3
   34a20:	cmp	r1, r4
   34a24:	mov	r7, r0
   34a28:	ldr	sl, [r0, #8]
   34a2c:	bgt	34b78 <fts_children@@Base+0x30dc>
   34a30:	ldr	fp, [r8, #8]
   34a34:	ldr	r2, [r9, #8]
   34a38:	sub	r5, ip, #1
   34a3c:	sub	r6, lr, #1
   34a40:	add	r1, r3, ip
   34a44:	ldr	r0, [r2, r6, lsl #2]
   34a48:	ldr	ip, [fp, r5, lsl #2]
   34a4c:	add	r1, r1, lr
   34a50:	sub	r3, r3, #1
   34a54:	cmp	ip, r0
   34a58:	beq	34a74 <fts_children@@Base+0x2fd8>
   34a5c:	bge	34b10 <fts_children@@Base+0x3074>
   34a60:	subs	r6, r6, #1
   34a64:	bmi	34ac0 <fts_children@@Base+0x3024>
   34a68:	ldr	r0, [r2, r6, lsl #2]
   34a6c:	cmp	ip, r0
   34a70:	bne	34a5c <fts_children@@Base+0x2fc0>
   34a74:	cmp	r3, #0
   34a78:	blt	34aa4 <fts_children@@Base+0x3008>
   34a7c:	ldr	r4, [sl, r3, lsl #2]
   34a80:	add	lr, sl, r3, lsl #2
   34a84:	cmp	r4, ip
   34a88:	bgt	34a9c <fts_children@@Base+0x3000>
   34a8c:	b	34b20 <fts_children@@Base+0x3084>
   34a90:	ldr	r4, [lr, #-4]!
   34a94:	cmp	r4, ip
   34a98:	ble	34b20 <fts_children@@Base+0x3084>
   34a9c:	subs	r3, r3, #1
   34aa0:	bcs	34a90 <fts_children@@Base+0x2ff4>
   34aa4:	sub	r1, r1, #1
   34aa8:	str	ip, [sl, r1, lsl #2]
   34aac:	subs	r5, r5, #1
   34ab0:	bmi	34ac0 <fts_children@@Base+0x3024>
   34ab4:	subs	r6, r6, #1
   34ab8:	ldrpl	ip, [fp, r5, lsl #2]
   34abc:	bpl	34a68 <fts_children@@Base+0x2fcc>
   34ac0:	ldr	ip, [r7, #4]
   34ac4:	ldr	r0, [r8, #4]
   34ac8:	ldr	r3, [r9, #4]
   34acc:	add	r0, ip, r0
   34ad0:	add	r0, r0, r3
   34ad4:	sub	r2, r0, r1
   34ad8:	sub	r3, ip, #1
   34adc:	cmp	r3, #0
   34ae0:	cmpge	r2, #0
   34ae4:	add	ip, ip, r2
   34ae8:	sub	r0, r0, #1
   34aec:	str	ip, [r7, #4]
   34af0:	bgt	34b3c <fts_children@@Base+0x30a0>
   34af4:	lsl	r2, r2, #2
   34af8:	add	r1, sl, r1, lsl #2
   34afc:	mov	r0, sl
   34b00:	bl	121a8 <memcpy@plt>
   34b04:	mov	ip, #0
   34b08:	mov	r0, ip
   34b0c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34b10:	subs	r5, r5, #1
   34b14:	bmi	34ac0 <fts_children@@Base+0x3024>
   34b18:	ldr	ip, [fp, r5, lsl #2]
   34b1c:	b	34a54 <fts_children@@Base+0x2fb8>
   34b20:	cmp	r4, ip
   34b24:	bne	34aa4 <fts_children@@Base+0x3008>
   34b28:	b	34aac <fts_children@@Base+0x3010>
   34b2c:	sub	r3, r3, #1
   34b30:	cmn	r3, #1
   34b34:	str	ip, [sl, r4, lsl #2]
   34b38:	beq	34b70 <fts_children@@Base+0x30d4>
   34b3c:	ldr	lr, [sl, r0, lsl #2]
   34b40:	ldr	ip, [sl, r3, lsl #2]
   34b44:	add	r4, r3, r2
   34b48:	cmp	lr, ip
   34b4c:	ble	34b2c <fts_children@@Base+0x3090>
   34b50:	subs	r2, r2, #1
   34b54:	sub	r0, r0, #1
   34b58:	str	lr, [sl, r4, lsl #2]
   34b5c:	bne	34b3c <fts_children@@Base+0x30a0>
   34b60:	ldr	sl, [r7, #8]
   34b64:	b	34af8 <fts_children@@Base+0x305c>
   34b68:	mov	r0, ip
   34b6c:	bx	lr
   34b70:	ldr	sl, [r7, #8]
   34b74:	b	34af4 <fts_children@@Base+0x3058>
   34b78:	add	r4, r2, r4
   34b7c:	mov	r0, sl
   34b80:	lsl	r1, r4, #2
   34b84:	bl	12268 <realloc@plt>
   34b88:	subs	sl, r0, #0
   34b8c:	beq	34ba8 <fts_children@@Base+0x310c>
   34b90:	ldr	ip, [r8, #4]
   34b94:	ldr	lr, [r9, #4]
   34b98:	ldr	r3, [r7, #4]
   34b9c:	str	sl, [r7, #8]
   34ba0:	str	r4, [r7]
   34ba4:	b	34a30 <fts_children@@Base+0x2f94>
   34ba8:	mov	ip, #12
   34bac:	b	34b08 <fts_children@@Base+0x306c>
   34bb0:	push	{r4, r5, r6, r7, lr}
   34bb4:	mov	r5, r0
   34bb8:	ldr	r0, [r1]
   34bbc:	sub	sp, sp, #20
   34bc0:	cmp	r0, #31
   34bc4:	beq	34c3c <fts_children@@Base+0x31a0>
   34bc8:	lsl	ip, r0, #5
   34bcc:	ldr	r4, [r5]
   34bd0:	add	r0, r0, #1
   34bd4:	add	r6, ip, #4
   34bd8:	str	r0, [r1]
   34bdc:	ldr	r1, [sp, #40]	; 0x28
   34be0:	add	lr, r4, ip
   34be4:	mov	r5, #0
   34be8:	strd	r2, [lr, #8]
   34bec:	str	r5, [lr, #4]
   34bf0:	add	ip, ip, #16
   34bf4:	ldm	r1, {r0, r1}
   34bf8:	add	ip, r4, ip
   34bfc:	add	r7, lr, #24
   34c00:	cmp	r2, r5
   34c04:	stm	r7, {r0, r1}
   34c08:	ldrb	r1, [ip, #14]
   34c0c:	add	r0, r4, r6
   34c10:	mvn	r7, #0
   34c14:	bic	r1, r1, #12
   34c18:	strb	r1, [ip, #14]
   34c1c:	str	r5, [lr, #16]
   34c20:	str	r5, [lr, #20]
   34c24:	str	r7, [lr, #32]
   34c28:	strne	r0, [r2]
   34c2c:	cmp	r3, #0
   34c30:	strne	r0, [r3]
   34c34:	add	sp, sp, #20
   34c38:	pop	{r4, r5, r6, r7, pc}
   34c3c:	mov	r0, #996	; 0x3e4
   34c40:	strd	r2, [sp, #8]
   34c44:	str	r1, [sp, #4]
   34c48:	bl	123dc <malloc@plt>
   34c4c:	subs	r4, r0, #0
   34c50:	beq	34c78 <fts_children@@Base+0x31dc>
   34c54:	ldr	ip, [r5]
   34c58:	mov	r6, #4
   34c5c:	str	ip, [r4]
   34c60:	mov	r0, #1
   34c64:	mov	ip, #0
   34c68:	str	r4, [r5]
   34c6c:	ldrd	r2, [sp, #8]
   34c70:	ldr	r1, [sp, #4]
   34c74:	b	34bd8 <fts_children@@Base+0x313c>
   34c78:	mov	r0, r4
   34c7c:	b	34c34 <fts_children@@Base+0x3198>
   34c80:	push	{r4, r5, r6, r7, r8, r9, lr}
   34c84:	sub	sp, sp, #20
   34c88:	ldr	r8, [pc, #208]	; 34d60 <fts_children@@Base+0x32c4>
   34c8c:	mov	r4, r0
   34c90:	ldr	r5, [r0]
   34c94:	ldr	r3, [r8]
   34c98:	add	r7, r1, #56	; 0x38
   34c9c:	add	r6, r1, #64	; 0x40
   34ca0:	add	r9, sp, #8
   34ca4:	str	r3, [sp, #12]
   34ca8:	b	34cb4 <fts_children@@Base+0x3218>
   34cac:	mov	r4, r3
   34cb0:	add	r9, r5, #4
   34cb4:	add	r2, r4, #20
   34cb8:	mov	r3, #0
   34cbc:	str	r2, [sp]
   34cc0:	mov	r1, r6
   34cc4:	mov	r2, r3
   34cc8:	mov	r0, r7
   34ccc:	bl	34bb0 <fts_children@@Base+0x3114>
   34cd0:	cmp	r0, #0
   34cd4:	str	r0, [r9]
   34cd8:	beq	34d44 <fts_children@@Base+0x32a8>
   34cdc:	str	r5, [r0]
   34ce0:	ldr	r5, [r9]
   34ce4:	ldrb	r3, [r5, #26]
   34ce8:	orr	r3, r3, #4
   34cec:	strb	r3, [r5, #26]
   34cf0:	ldr	r3, [r4, #4]
   34cf4:	cmp	r3, #0
   34cf8:	bne	34cac <fts_children@@Base+0x3210>
   34cfc:	ldr	r2, [r4, #8]
   34d00:	cmp	r2, r3
   34d04:	cmpne	r2, #0
   34d08:	beq	34d2c <fts_children@@Base+0x3290>
   34d0c:	mov	r4, r2
   34d10:	add	r9, r5, #8
   34d14:	b	34cb4 <fts_children@@Base+0x3218>
   34d18:	mov	r4, r2
   34d1c:	ldr	r2, [r4, #8]
   34d20:	cmp	r2, r3
   34d24:	cmpne	r2, #0
   34d28:	bne	34d0c <fts_children@@Base+0x3270>
   34d2c:	ldr	r2, [r4]
   34d30:	ldr	r5, [r5]
   34d34:	cmp	r2, #0
   34d38:	mov	r3, r4
   34d3c:	bne	34d18 <fts_children@@Base+0x327c>
   34d40:	ldr	r0, [sp, #8]
   34d44:	ldr	r2, [sp, #12]
   34d48:	ldr	r3, [r8]
   34d4c:	cmp	r2, r3
   34d50:	bne	34d5c <fts_children@@Base+0x32c0>
   34d54:	add	sp, sp, #20
   34d58:	pop	{r4, r5, r6, r7, r8, r9, pc}
   34d5c:	bl	12244 <__stack_chk_fail@plt>
   34d60:	andeq	fp, r5, r0, ror #24
   34d64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   34d68:	sub	sp, sp, #36	; 0x24
   34d6c:	ldr	fp, [pc, #544]	; 34f94 <fts_children@@Base+0x34f8>
   34d70:	ldrb	r7, [r1, #28]
   34d74:	mov	r8, r2
   34d78:	ldr	r3, [fp]
   34d7c:	ands	r7, r7, #16
   34d80:	str	r0, [sp, #12]
   34d84:	ldr	r4, [r1]
   34d88:	str	r3, [sp, #28]
   34d8c:	ldr	r5, [r2, #4]
   34d90:	beq	34f18 <fts_children@@Base+0x347c>
   34d94:	cmp	r5, #0
   34d98:	beq	34ebc <fts_children@@Base+0x3420>
   34d9c:	ldr	r3, [r2, #20]
   34da0:	cmp	r3, #31
   34da4:	bgt	34ea0 <fts_children@@Base+0x3404>
   34da8:	ldr	r2, [r4, #80]	; 0x50
   34dac:	lsr	r3, r2, r3
   34db0:	tst	r3, #1
   34db4:	beq	34ea0 <fts_children@@Base+0x3404>
   34db8:	add	r9, r4, #56	; 0x38
   34dbc:	mov	r3, #0
   34dc0:	add	r4, r4, #64	; 0x40
   34dc4:	add	sl, sp, #20
   34dc8:	mov	r2, r3
   34dcc:	mov	ip, #8
   34dd0:	mov	r1, r4
   34dd4:	mov	r0, r9
   34dd8:	str	sl, [sp]
   34ddc:	strb	ip, [sp, #24]
   34de0:	bl	34bb0 <fts_children@@Base+0x3114>
   34de4:	mov	r3, #0
   34de8:	mov	ip, #9
   34dec:	str	sl, [sp]
   34df0:	mov	r1, r4
   34df4:	mov	r2, r3
   34df8:	strb	ip, [sp, #24]
   34dfc:	mov	r6, r0
   34e00:	mov	r0, r9
   34e04:	bl	34bb0 <fts_children@@Base+0x3114>
   34e08:	mov	r7, r0
   34e0c:	mov	ip, #16
   34e10:	mov	r3, r7
   34e14:	str	sl, [sp]
   34e18:	mov	r2, r5
   34e1c:	mov	r1, r4
   34e20:	mov	r0, r9
   34e24:	strb	ip, [sp, #24]
   34e28:	bl	34bb0 <fts_children@@Base+0x3114>
   34e2c:	mov	r3, r0
   34e30:	mov	r1, r4
   34e34:	mov	ip, #16
   34e38:	str	sl, [sp]
   34e3c:	mov	r0, r9
   34e40:	mov	r2, r6
   34e44:	mov	r4, r3
   34e48:	strb	ip, [sp, #24]
   34e4c:	bl	34bb0 <fts_children@@Base+0x3114>
   34e50:	cmp	r4, #0
   34e54:	cmpne	r0, #0
   34e58:	mov	r5, r0
   34e5c:	beq	34f7c <fts_children@@Base+0x34e0>
   34e60:	cmp	r7, #0
   34e64:	cmpne	r6, #0
   34e68:	beq	34f7c <fts_children@@Base+0x34e0>
   34e6c:	ldr	r2, [r8, #20]
   34e70:	ldrb	r3, [r8, #26]
   34e74:	str	r2, [r7, #20]
   34e78:	str	r2, [r6, #20]
   34e7c:	ldrb	r2, [r7, #26]
   34e80:	and	r3, r3, #8
   34e84:	bic	r2, r2, #8
   34e88:	orr	r2, r3, r2
   34e8c:	strb	r2, [r7, #26]
   34e90:	ldrb	r2, [r6, #26]
   34e94:	bic	r2, r2, #8
   34e98:	orr	r3, r3, r2
   34e9c:	strb	r3, [r6, #26]
   34ea0:	ldr	r2, [sp, #28]
   34ea4:	ldr	r3, [fp]
   34ea8:	mov	r0, r5
   34eac:	cmp	r2, r3
   34eb0:	bne	34f90 <fts_children@@Base+0x34f4>
   34eb4:	add	sp, sp, #36	; 0x24
   34eb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   34ebc:	add	r9, r4, #56	; 0x38
   34ec0:	add	sl, sp, #20
   34ec4:	add	r4, r4, #64	; 0x40
   34ec8:	mov	ip, #8
   34ecc:	mov	r1, r4
   34ed0:	mov	r3, r5
   34ed4:	mov	r2, r5
   34ed8:	mov	r0, r9
   34edc:	str	sl, [sp]
   34ee0:	strb	ip, [sp, #24]
   34ee4:	bl	34bb0 <fts_children@@Base+0x3114>
   34ee8:	mov	ip, #9
   34eec:	mov	r3, r5
   34ef0:	str	sl, [sp]
   34ef4:	mov	r1, r4
   34ef8:	mov	r2, r5
   34efc:	strb	ip, [sp, #24]
   34f00:	mov	r6, r0
   34f04:	mov	r0, r9
   34f08:	bl	34bb0 <fts_children@@Base+0x3114>
   34f0c:	mov	r3, r0
   34f10:	mov	r7, r0
   34f14:	b	34e30 <fts_children@@Base+0x3394>
   34f18:	add	r9, r4, #56	; 0x38
   34f1c:	add	sl, sp, #20
   34f20:	add	r4, r4, #64	; 0x40
   34f24:	mov	ip, #8
   34f28:	mov	r3, r7
   34f2c:	mov	r2, r7
   34f30:	mov	r1, r4
   34f34:	mov	r0, r9
   34f38:	str	sl, [sp]
   34f3c:	strb	ip, [sp, #24]
   34f40:	bl	34bb0 <fts_children@@Base+0x3114>
   34f44:	mov	r3, r7
   34f48:	mov	ip, #9
   34f4c:	mov	r2, r7
   34f50:	str	sl, [sp]
   34f54:	mov	r1, r4
   34f58:	strb	ip, [sp, #24]
   34f5c:	mov	r6, r0
   34f60:	mov	r0, r9
   34f64:	bl	34bb0 <fts_children@@Base+0x3114>
   34f68:	cmp	r5, #0
   34f6c:	mov	r7, r0
   34f70:	moveq	r3, r0
   34f74:	bne	34e0c <fts_children@@Base+0x3370>
   34f78:	b	34e30 <fts_children@@Base+0x3394>
   34f7c:	ldr	r2, [sp, #12]
   34f80:	mov	r3, #12
   34f84:	mov	r5, #0
   34f88:	str	r3, [r2]
   34f8c:	b	34ea0 <fts_children@@Base+0x3404>
   34f90:	bl	12244 <__stack_chk_fail@plt>
   34f94:	andeq	fp, r5, r0, ror #24
   34f98:	push	{r4, r5, r6, lr}
   34f9c:	mov	r4, r1
   34fa0:	ldr	r5, [pc, #156]	; 35044 <fts_children@@Base+0x35a8>
   34fa4:	ldr	r2, [r1, #4]
   34fa8:	sub	sp, sp, #8
   34fac:	ldr	r1, [r5]
   34fb0:	mov	r3, #0
   34fb4:	cmp	r2, #0
   34fb8:	mov	r6, r0
   34fbc:	str	r1, [sp, #4]
   34fc0:	str	r3, [sp]
   34fc4:	beq	34fd4 <fts_children@@Base+0x3538>
   34fc8:	ldrb	r3, [r2, #24]
   34fcc:	cmp	r3, #17
   34fd0:	beq	35008 <fts_children@@Base+0x356c>
   34fd4:	ldr	r2, [r4, #8]
   34fd8:	cmp	r2, #0
   34fdc:	beq	34fec <fts_children@@Base+0x3550>
   34fe0:	ldrb	r3, [r2, #24]
   34fe4:	cmp	r3, #17
   34fe8:	beq	35024 <fts_children@@Base+0x3588>
   34fec:	ldr	r2, [sp, #4]
   34ff0:	ldr	r3, [r5]
   34ff4:	ldr	r0, [sp]
   34ff8:	cmp	r2, r3
   34ffc:	bne	35040 <fts_children@@Base+0x35a4>
   35000:	add	sp, sp, #8
   35004:	pop	{r4, r5, r6, pc}
   35008:	mov	r1, r0
   3500c:	mov	r0, sp
   35010:	bl	34d64 <fts_children@@Base+0x32c8>
   35014:	cmp	r0, #0
   35018:	str	r0, [r4, #4]
   3501c:	strne	r4, [r0]
   35020:	b	34fd4 <fts_children@@Base+0x3538>
   35024:	mov	r1, r6
   35028:	mov	r0, sp
   3502c:	bl	34d64 <fts_children@@Base+0x32c8>
   35030:	cmp	r0, #0
   35034:	str	r0, [r4, #8]
   35038:	strne	r4, [r0]
   3503c:	b	34fec <fts_children@@Base+0x3550>
   35040:	bl	12244 <__stack_chk_fail@plt>
   35044:	andeq	fp, r5, r0, ror #24
   35048:	ldr	r3, [r1, #4]
   3504c:	cmp	r3, #0
   35050:	str	r3, [r0, #4]
   35054:	ble	350a4 <fts_children@@Base+0x3608>
   35058:	push	{r4, r5, r6, lr}
   3505c:	lsl	r6, r3, #2
   35060:	mov	r4, r0
   35064:	str	r3, [r0]
   35068:	mov	r0, r6
   3506c:	mov	r5, r1
   35070:	bl	123dc <malloc@plt>
   35074:	cmp	r0, #0
   35078:	str	r0, [r4, #8]
   3507c:	streq	r0, [r4, #4]
   35080:	streq	r0, [r4]
   35084:	moveq	r2, #12
   35088:	beq	3509c <fts_children@@Base+0x3600>
   3508c:	mov	r2, r6
   35090:	ldr	r1, [r5, #8]
   35094:	bl	121a8 <memcpy@plt>
   35098:	mov	r2, #0
   3509c:	mov	r0, r2
   350a0:	pop	{r4, r5, r6, pc}
   350a4:	mov	r3, #0
   350a8:	str	r3, [r0]
   350ac:	str	r3, [r0, #4]
   350b0:	str	r3, [r0, #8]
   350b4:	mov	r0, r3
   350b8:	bx	lr
   350bc:	cmp	r1, #0
   350c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   350c4:	beq	350e0 <fts_children@@Base+0x3644>
   350c8:	ldr	r5, [r1, #4]
   350cc:	cmp	r2, #0
   350d0:	cmpne	r5, #0
   350d4:	bgt	3510c <fts_children@@Base+0x3670>
   350d8:	cmp	r5, #0
   350dc:	bgt	351b8 <fts_children@@Base+0x371c>
   350e0:	cmp	r2, #0
   350e4:	beq	350f4 <fts_children@@Base+0x3658>
   350e8:	ldr	r3, [r2, #4]
   350ec:	cmp	r3, #0
   350f0:	bgt	351b4 <fts_children@@Base+0x3718>
   350f4:	mov	r3, #0
   350f8:	str	r3, [r0]
   350fc:	str	r3, [r0, #4]
   35100:	str	r3, [r0, #8]
   35104:	mov	r0, r3
   35108:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3510c:	ldr	r9, [r2, #4]
   35110:	cmp	r9, #0
   35114:	ble	351b8 <fts_children@@Base+0x371c>
   35118:	mov	r7, r0
   3511c:	add	r0, r5, r9
   35120:	str	r0, [r7]
   35124:	lsl	r0, r0, #2
   35128:	mov	r4, r2
   3512c:	mov	r6, r1
   35130:	bl	123dc <malloc@plt>
   35134:	cmp	r0, #0
   35138:	str	r0, [r7, #8]
   3513c:	beq	351f4 <fts_children@@Base+0x3758>
   35140:	mov	r8, #0
   35144:	ldr	sl, [r6, #8]
   35148:	mov	r2, r8
   3514c:	mov	r3, r8
   35150:	mov	ip, r0
   35154:	cmp	r9, r2
   35158:	add	r1, sl, r3, lsl #2
   3515c:	ble	351dc <fts_children@@Base+0x3740>
   35160:	ldr	r1, [r4, #8]
   35164:	ldr	lr, [sl, r3, lsl #2]
   35168:	add	r8, r8, #1
   3516c:	ldr	r5, [r1, r2, lsl #2]
   35170:	cmp	lr, r5
   35174:	addgt	r2, r2, #1
   35178:	strgt	r5, [ip]
   3517c:	bgt	3518c <fts_children@@Base+0x36f0>
   35180:	add	r3, r3, #1
   35184:	addeq	r2, r2, #1
   35188:	str	lr, [ip]
   3518c:	ldr	r5, [r6, #4]
   35190:	add	ip, ip, #4
   35194:	cmp	r3, r5
   35198:	blt	35154 <fts_children@@Base+0x36b8>
   3519c:	ldr	r3, [r4, #4]
   351a0:	cmp	r2, r3
   351a4:	blt	351c0 <fts_children@@Base+0x3724>
   351a8:	str	r8, [r7, #4]
   351ac:	mov	r0, #0
   351b0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   351b4:	mov	r1, r2
   351b8:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   351bc:	b	35048 <fts_children@@Base+0x35ac>
   351c0:	sub	r4, r3, r2
   351c4:	add	r1, r1, r2, lsl #2
   351c8:	add	r0, r0, r8, lsl #2
   351cc:	lsl	r2, r4, #2
   351d0:	bl	121a8 <memcpy@plt>
   351d4:	add	r8, r8, r4
   351d8:	b	351a8 <fts_children@@Base+0x370c>
   351dc:	sub	r3, r5, r3
   351e0:	mov	r0, ip
   351e4:	lsl	r2, r3, #2
   351e8:	add	r8, r8, r3
   351ec:	bl	121a8 <memcpy@plt>
   351f0:	b	351a8 <fts_children@@Base+0x370c>
   351f4:	mov	r0, #12
   351f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   351fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35200:	sub	sp, sp, #28
   35204:	ldr	r4, [r2, #4]
   35208:	cmp	r4, #0
   3520c:	streq	r4, [r0]
   35210:	beq	352bc <fts_children@@Base+0x3820>
   35214:	add	r6, r3, r4
   35218:	ble	35238 <fts_children@@Base+0x379c>
   3521c:	ldr	ip, [r2, #8]
   35220:	sub	ip, ip, #4
   35224:	add	r4, ip, r4, lsl #2
   35228:	ldr	lr, [ip, #4]!
   3522c:	cmp	r4, ip
   35230:	add	r6, r6, lr
   35234:	bne	35228 <fts_children@@Base+0x378c>
   35238:	mov	sl, r3
   3523c:	ldr	r3, [r1, #68]	; 0x44
   35240:	mov	r8, r2
   35244:	and	r3, r3, r6
   35248:	ldr	r2, [r1, #32]
   3524c:	add	r3, r3, r3, lsl #1
   35250:	mov	r9, r1
   35254:	lsl	r3, r3, #2
   35258:	str	r0, [sp, #20]
   3525c:	ldr	fp, [r2, r3]
   35260:	add	r1, r2, r3
   35264:	cmp	fp, #0
   35268:	ble	352c8 <fts_children@@Base+0x382c>
   3526c:	ldr	r7, [r1, #8]
   35270:	mov	r5, #0
   35274:	sub	r7, r7, #4
   35278:	b	35284 <fts_children@@Base+0x37e8>
   3527c:	cmp	r5, fp
   35280:	beq	352c8 <fts_children@@Base+0x382c>
   35284:	ldr	r4, [r7, #4]!
   35288:	add	r5, r5, #1
   3528c:	ldr	r3, [r4]
   35290:	cmp	r3, r6
   35294:	bne	3527c <fts_children@@Base+0x37e0>
   35298:	ldrb	r3, [r4, #52]	; 0x34
   3529c:	and	r3, r3, #15
   352a0:	cmp	r3, sl
   352a4:	bne	3527c <fts_children@@Base+0x37e0>
   352a8:	mov	r1, r8
   352ac:	ldr	r0, [r4, #40]	; 0x28
   352b0:	bl	32468 <fts_children@@Base+0x9cc>
   352b4:	cmp	r0, #0
   352b8:	beq	3527c <fts_children@@Base+0x37e0>
   352bc:	mov	r0, r4
   352c0:	add	sp, sp, #28
   352c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   352c8:	mov	r1, #1
   352cc:	mov	r0, #56	; 0x38
   352d0:	bl	12064 <calloc@plt>
   352d4:	subs	r4, r0, #0
   352d8:	beq	35464 <fts_children@@Base+0x39c8>
   352dc:	add	fp, r4, #4
   352e0:	mov	r0, fp
   352e4:	mov	r1, r8
   352e8:	bl	35048 <fts_children@@Base+0x35ac>
   352ec:	subs	r3, r0, #0
   352f0:	bne	354d8 <fts_children@@Base+0x3a3c>
   352f4:	ldrb	r1, [r4, #52]	; 0x34
   352f8:	ldr	ip, [r8, #4]
   352fc:	and	r2, sl, #15
   35300:	bic	r1, r1, #15
   35304:	orr	r2, r2, r1
   35308:	cmp	ip, #0
   3530c:	str	fp, [r4, #40]	; 0x28
   35310:	strb	r2, [r4, #52]	; 0x34
   35314:	ble	35444 <fts_children@@Base+0x39a8>
   35318:	ldr	r7, [pc, #452]	; 354e4 <fts_children@@Base+0x3a48>
   3531c:	add	r2, r4, #12
   35320:	str	r6, [sp, #16]
   35324:	mov	r5, r3
   35328:	mov	r6, sl
   3532c:	mov	sl, r3
   35330:	str	r2, [sp, #4]
   35334:	add	r2, r4, #8
   35338:	str	r2, [sp, #8]
   3533c:	ldr	r2, [r8, #8]
   35340:	ldr	r1, [r9]
   35344:	ldr	r2, [r2, r5, lsl #2]
   35348:	add	r1, r1, r2, lsl #3
   3534c:	ldr	r2, [r1, #4]
   35350:	ldrb	r0, [r1, #4]
   35354:	ands	r2, r7, r2, lsr #8
   35358:	moveq	lr, #1
   3535c:	movne	lr, #0
   35360:	cmp	r0, #1
   35364:	movne	lr, #0
   35368:	andeq	lr, lr, #1
   3536c:	cmp	lr, #0
   35370:	bne	35434 <fts_children@@Base+0x3998>
   35374:	ldrb	r1, [r1, #6]
   35378:	ldrb	lr, [r4, #52]	; 0x34
   3537c:	cmp	r0, #2
   35380:	lsr	r1, r1, #4
   35384:	orr	r1, r1, lr, lsr #5
   35388:	and	r1, r1, #1
   3538c:	bic	lr, lr, #32
   35390:	orr	r1, lr, r1, lsl #5
   35394:	strb	r1, [r4, #52]	; 0x34
   35398:	uxtbeq	r1, r1
   3539c:	orreq	r1, r1, #16
   353a0:	strbeq	r1, [r4, #52]	; 0x34
   353a4:	beq	353b8 <fts_children@@Base+0x391c>
   353a8:	cmp	r0, #4
   353ac:	ldrbeq	r1, [r4, #52]	; 0x34
   353b0:	orreq	r1, r1, #64	; 0x40
   353b4:	strbeq	r1, [r4, #52]	; 0x34
   353b8:	cmp	r2, #0
   353bc:	beq	35434 <fts_children@@Base+0x3998>
   353c0:	ldr	r1, [r4, #40]	; 0x28
   353c4:	cmp	fp, r1
   353c8:	beq	35494 <fts_children@@Base+0x39f8>
   353cc:	tst	r2, #1
   353d0:	beq	35480 <fts_children@@Base+0x39e4>
   353d4:	tst	r6, #1
   353d8:	beq	35404 <fts_children@@Base+0x3968>
   353dc:	tst	r2, #2
   353e0:	bne	35404 <fts_children@@Base+0x3968>
   353e4:	tst	r2, #16
   353e8:	beq	353f4 <fts_children@@Base+0x3958>
   353ec:	tst	r6, #2
   353f0:	beq	35404 <fts_children@@Base+0x3968>
   353f4:	tst	r2, #64	; 0x40
   353f8:	beq	35478 <fts_children@@Base+0x39dc>
   353fc:	tst	r6, #4
   35400:	bne	35478 <fts_children@@Base+0x39dc>
   35404:	subs	r2, r5, sl
   35408:	bmi	3542c <fts_children@@Base+0x3990>
   3540c:	ldr	r1, [r4, #8]
   35410:	cmp	r2, r1
   35414:	bge	3542c <fts_children@@Base+0x3990>
   35418:	sub	r1, r1, #1
   3541c:	str	r1, [r4, #8]
   35420:	ldr	r0, [sp, #8]
   35424:	ldr	r1, [sp, #4]
   35428:	bl	340fc <fts_children@@Base+0x2660>
   3542c:	ldr	ip, [r8, #4]
   35430:	add	sl, sl, #1
   35434:	add	r5, r5, #1
   35438:	cmp	r5, ip
   3543c:	blt	3533c <fts_children@@Base+0x38a0>
   35440:	ldr	r6, [sp, #16]
   35444:	mov	r2, r6
   35448:	mov	r0, r9
   3544c:	mov	r1, r4
   35450:	bl	32b70 <fts_children@@Base+0x10d4>
   35454:	cmp	r0, #0
   35458:	beq	352bc <fts_children@@Base+0x3820>
   3545c:	mov	r0, r4
   35460:	bl	33b80 <fts_children@@Base+0x20e4>
   35464:	ldr	r2, [sp, #20]
   35468:	mov	r3, #12
   3546c:	mov	r4, #0
   35470:	str	r3, [r2]
   35474:	b	352bc <fts_children@@Base+0x3820>
   35478:	ldr	ip, [r8, #4]
   3547c:	b	35434 <fts_children@@Base+0x3998>
   35480:	tst	r2, #2
   35484:	beq	353e4 <fts_children@@Base+0x3948>
   35488:	tst	r6, #1
   3548c:	beq	353e4 <fts_children@@Base+0x3948>
   35490:	b	35404 <fts_children@@Base+0x3968>
   35494:	mov	r0, #12
   35498:	str	r2, [sp, #12]
   3549c:	bl	123dc <malloc@plt>
   354a0:	ldr	r2, [sp, #12]
   354a4:	cmp	r0, #0
   354a8:	str	r0, [r4, #40]	; 0x28
   354ac:	beq	3545c <fts_children@@Base+0x39c0>
   354b0:	mov	r1, r8
   354b4:	str	r2, [sp, #12]
   354b8:	bl	35048 <fts_children@@Base+0x35ac>
   354bc:	subs	sl, r0, #0
   354c0:	bne	35464 <fts_children@@Base+0x39c8>
   354c4:	ldrb	r1, [r4, #52]	; 0x34
   354c8:	ldr	r2, [sp, #12]
   354cc:	orr	r1, r1, #128	; 0x80
   354d0:	strb	r1, [r4, #52]	; 0x34
   354d4:	b	353cc <fts_children@@Base+0x3930>
   354d8:	mov	r0, r4
   354dc:	bl	12154 <free@plt>
   354e0:	b	35464 <fts_children@@Base+0x39c8>
   354e4:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   354e8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   354ec:	ldr	r6, [r2, #4]
   354f0:	cmp	r6, #0
   354f4:	streq	r6, [r0]
   354f8:	moveq	r4, r6
   354fc:	beq	35690 <fts_children@@Base+0x3bf4>
   35500:	ble	35520 <fts_children@@Base+0x3a84>
   35504:	ldr	r3, [r2, #8]
   35508:	sub	r3, r3, #4
   3550c:	add	lr, r3, r6, lsl #2
   35510:	ldr	ip, [r3, #4]!
   35514:	cmp	lr, r3
   35518:	add	r6, r6, ip
   3551c:	bne	35510 <fts_children@@Base+0x3a74>
   35520:	ldr	r3, [r1, #68]	; 0x44
   35524:	mov	sl, r2
   35528:	and	r3, r3, r6
   3552c:	ldr	r2, [r1, #32]
   35530:	add	r3, r3, r3, lsl #1
   35534:	mov	r8, r1
   35538:	lsl	r3, r3, #2
   3553c:	mov	r9, r0
   35540:	ldr	fp, [r2, r3]
   35544:	add	r1, r2, r3
   35548:	cmp	fp, #0
   3554c:	ble	3558c <fts_children@@Base+0x3af0>
   35550:	ldr	r7, [r1, #8]
   35554:	mov	r5, #0
   35558:	sub	r7, r7, #4
   3555c:	ldr	r4, [r7, #4]!
   35560:	mov	r1, sl
   35564:	add	r5, r5, #1
   35568:	ldr	r3, [r4]
   3556c:	add	r0, r4, #4
   35570:	cmp	r3, r6
   35574:	bne	35584 <fts_children@@Base+0x3ae8>
   35578:	bl	32468 <fts_children@@Base+0x9cc>
   3557c:	cmp	r0, #0
   35580:	bne	35690 <fts_children@@Base+0x3bf4>
   35584:	cmp	fp, r5
   35588:	bne	3555c <fts_children@@Base+0x3ac0>
   3558c:	mov	r1, #1
   35590:	mov	r0, #56	; 0x38
   35594:	bl	12064 <calloc@plt>
   35598:	subs	r4, r0, #0
   3559c:	beq	356c8 <fts_children@@Base+0x3c2c>
   355a0:	add	r5, r4, #4
   355a4:	mov	r0, r5
   355a8:	mov	r1, sl
   355ac:	bl	35048 <fts_children@@Base+0x35ac>
   355b0:	cmp	r0, #0
   355b4:	bne	356c0 <fts_children@@Base+0x3c24>
   355b8:	ldr	lr, [sl, #4]
   355bc:	str	r5, [r4, #40]	; 0x28
   355c0:	cmp	lr, #0
   355c4:	ble	35678 <fts_children@@Base+0x3bdc>
   355c8:	ldr	r0, [sl, #8]
   355cc:	ldr	r5, [r8]
   355d0:	sub	r0, r0, #4
   355d4:	ldr	r7, [pc, #264]	; 356e4 <fts_children@@Base+0x3c48>
   355d8:	add	lr, r0, lr, lsl #2
   355dc:	b	35624 <fts_children@@Base+0x3b88>
   355e0:	ldrb	r2, [r3, #6]
   355e4:	ldrb	r1, [r4, #52]	; 0x34
   355e8:	cmp	ip, #2
   355ec:	lsr	r2, r2, #4
   355f0:	orr	r2, r2, r1, lsr #5
   355f4:	and	r2, r2, #1
   355f8:	bic	r1, r1, #32
   355fc:	orr	r2, r1, r2, lsl #5
   35600:	strb	r2, [r4, #52]	; 0x34
   35604:	beq	35698 <fts_children@@Base+0x3bfc>
   35608:	cmp	ip, #4
   3560c:	bne	356a8 <fts_children@@Base+0x3c0c>
   35610:	ldrb	r3, [r4, #52]	; 0x34
   35614:	orr	r3, r3, #64	; 0x40
   35618:	strb	r3, [r4, #52]	; 0x34
   3561c:	cmp	lr, r0
   35620:	beq	35678 <fts_children@@Base+0x3bdc>
   35624:	ldr	r3, [r0, #4]!
   35628:	add	r3, r5, r3, lsl #3
   3562c:	ldrb	ip, [r3, #4]
   35630:	cmp	ip, #1
   35634:	bne	355e0 <fts_children@@Base+0x3b44>
   35638:	ldr	r2, [r3, #4]
   3563c:	tst	r7, r2
   35640:	beq	3561c <fts_children@@Base+0x3b80>
   35644:	ldrb	r3, [r3, #6]
   35648:	ldrb	r2, [r4, #52]	; 0x34
   3564c:	lsr	r3, r3, #4
   35650:	orr	r3, r3, r2, lsr #5
   35654:	and	r3, r3, #1
   35658:	bic	r2, r2, #32
   3565c:	orr	r3, r2, r3, lsl #5
   35660:	strb	r3, [r4, #52]	; 0x34
   35664:	ldrb	r3, [r4, #52]	; 0x34
   35668:	cmp	lr, r0
   3566c:	orr	r3, r3, #128	; 0x80
   35670:	strb	r3, [r4, #52]	; 0x34
   35674:	bne	35624 <fts_children@@Base+0x3b88>
   35678:	mov	r2, r6
   3567c:	mov	r0, r8
   35680:	mov	r1, r4
   35684:	bl	32b70 <fts_children@@Base+0x10d4>
   35688:	cmp	r0, #0
   3568c:	bne	356d8 <fts_children@@Base+0x3c3c>
   35690:	mov	r0, r4
   35694:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35698:	uxtb	r3, r2
   3569c:	orr	r3, r3, #16
   356a0:	strb	r3, [r4, #52]	; 0x34
   356a4:	b	3561c <fts_children@@Base+0x3b80>
   356a8:	cmp	ip, #12
   356ac:	beq	35664 <fts_children@@Base+0x3bc8>
   356b0:	ldr	r3, [r3, #4]
   356b4:	tst	r7, r3
   356b8:	beq	3561c <fts_children@@Base+0x3b80>
   356bc:	b	35664 <fts_children@@Base+0x3bc8>
   356c0:	mov	r0, r4
   356c4:	bl	12154 <free@plt>
   356c8:	mov	r3, #12
   356cc:	str	r3, [r9]
   356d0:	mov	r4, #0
   356d4:	b	35690 <fts_children@@Base+0x3bf4>
   356d8:	mov	r0, r4
   356dc:	bl	33b80 <fts_children@@Base+0x20e4>
   356e0:	b	356c8 <fts_children@@Base+0x3c2c>
   356e4:	andeq	pc, r3, r0, lsl #30
   356e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   356ec:	subs	r7, r3, #0
   356f0:	ldr	r9, [pc, #176]	; 357a8 <fts_children@@Base+0x3d0c>
   356f4:	sub	sp, sp, #28
   356f8:	movgt	r8, r0
   356fc:	ldr	r3, [r9]
   35700:	subgt	r4, r1, #4
   35704:	str	r3, [sp, #20]
   35708:	subgt	r6, r2, #4
   3570c:	movgt	r5, #0
   35710:	bgt	3574c <fts_children@@Base+0x3cb0>
   35714:	b	3579c <fts_children@@Base+0x3d00>
   35718:	add	r2, sp, #8
   3571c:	mov	r1, r8
   35720:	add	r0, sp, #4
   35724:	bl	354e8 <fts_children@@Base+0x3a4c>
   35728:	str	r0, [r4]
   3572c:	ldr	r0, [sp, #16]
   35730:	bl	12154 <free@plt>
   35734:	ldr	r0, [sp, #4]
   35738:	cmp	r0, #0
   3573c:	bne	35784 <fts_children@@Base+0x3ce8>
   35740:	add	r5, r5, #1
   35744:	cmp	r7, r5
   35748:	beq	3579c <fts_children@@Base+0x3d00>
   3574c:	ldr	r1, [r4, #4]!
   35750:	ldr	r2, [r6, #4]!
   35754:	cmp	r1, #0
   35758:	streq	r2, [r4]
   3575c:	beq	35740 <fts_children@@Base+0x3ca4>
   35760:	cmp	r2, #0
   35764:	beq	35740 <fts_children@@Base+0x3ca4>
   35768:	add	r2, r2, #4
   3576c:	add	r1, r1, #4
   35770:	add	r0, sp, #8
   35774:	bl	350bc <fts_children@@Base+0x3620>
   35778:	cmp	r0, #0
   3577c:	str	r0, [sp, #4]
   35780:	beq	35718 <fts_children@@Base+0x3c7c>
   35784:	ldr	r2, [sp, #20]
   35788:	ldr	r3, [r9]
   3578c:	cmp	r2, r3
   35790:	bne	357a4 <fts_children@@Base+0x3d08>
   35794:	add	sp, sp, #28
   35798:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3579c:	mov	r0, #0
   357a0:	b	35784 <fts_children@@Base+0x3ce8>
   357a4:	bl	12244 <__stack_chk_fail@plt>
   357a8:	andeq	fp, r5, r0, ror #24
   357ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   357b0:	sub	sp, sp, #52	; 0x34
   357b4:	mov	r8, r0
   357b8:	str	r1, [sp, #4]
   357bc:	ldr	r1, [pc, #832]	; 35b04 <fts_children@@Base+0x4068>
   357c0:	ldr	r0, [r0, #108]	; 0x6c
   357c4:	str	r3, [sp, #20]
   357c8:	ldr	r1, [r1]
   357cc:	mov	r6, r2
   357d0:	mov	r3, r0
   357d4:	mov	ip, #0
   357d8:	str	r1, [sp, #44]	; 0x2c
   357dc:	cmp	ip, r3
   357e0:	bge	3583c <fts_children@@Base+0x3da0>
   357e4:	add	r2, ip, r3
   357e8:	ldr	r4, [r8, #116]	; 0x74
   357ec:	add	r2, r2, r2, lsr #31
   357f0:	asr	r2, r2, #1
   357f4:	add	r1, r2, r2, lsl #2
   357f8:	add	r1, r4, r1, lsl #2
   357fc:	ldr	r1, [r1, #4]
   35800:	cmp	r6, r1
   35804:	ble	35834 <fts_children@@Base+0x3d98>
   35808:	b	35a88 <fts_children@@Base+0x3fec>
   3580c:	add	r3, r2, ip
   35810:	add	r3, r3, r3, lsr #31
   35814:	asr	r3, r3, #1
   35818:	mov	lr, r3
   3581c:	add	r1, r3, r3, lsl #2
   35820:	add	r1, r4, r1, lsl #2
   35824:	ldr	r1, [r1, #4]
   35828:	cmp	r6, r1
   3582c:	bgt	35a90 <fts_children@@Base+0x3ff4>
   35830:	mov	r2, r3
   35834:	cmp	r2, ip
   35838:	bgt	3580c <fts_children@@Base+0x3d70>
   3583c:	cmp	r0, ip
   35840:	ble	35a9c <fts_children@@Base+0x4000>
   35844:	add	r3, ip, ip, lsl #2
   35848:	ldr	r4, [r8, #116]	; 0x74
   3584c:	lsl	r3, r3, #2
   35850:	add	r2, r4, r3
   35854:	cmn	ip, #1
   35858:	ldr	r2, [r2, #4]
   3585c:	movne	ip, #0
   35860:	moveq	ip, #1
   35864:	cmp	r2, r6
   35868:	orrne	ip, ip, #1
   3586c:	cmp	ip, #0
   35870:	bne	35a9c <fts_children@@Base+0x4000>
   35874:	add	r3, r3, #20
   35878:	str	r3, [sp, #16]
   3587c:	ldr	r3, [sp, #4]
   35880:	ldr	r9, [r8, #84]	; 0x54
   35884:	add	fp, r3, #8
   35888:	ldr	r3, [sp, #16]
   3588c:	add	r4, r4, r3
   35890:	b	35968 <fts_children@@Base+0x3ecc>
   35894:	ldr	r2, [r8, #100]	; 0x64
   35898:	ldr	r1, [r9, #12]
   3589c:	lsl	sl, r5, #2
   358a0:	ldr	r3, [r2, r5, lsl #2]
   358a4:	add	r2, r2, sl
   358a8:	cmp	r3, #0
   358ac:	str	r2, [sp, #8]
   358b0:	ldr	r7, [r1, r7, lsl #2]
   358b4:	beq	35a50 <fts_children@@Base+0x3fb4>
   358b8:	mov	r2, r7
   358bc:	add	r1, r3, #12
   358c0:	ldr	r0, [r3, #8]
   358c4:	str	r3, [sp, #8]
   358c8:	bl	33f6c <fts_children@@Base+0x24d0>
   358cc:	cmp	r0, #0
   358d0:	bne	35958 <fts_children@@Base+0x3ebc>
   358d4:	ldr	r3, [sp, #8]
   358d8:	add	r2, sp, #32
   358dc:	add	r1, r3, #4
   358e0:	mov	r0, r2
   358e4:	str	r2, [sp, #8]
   358e8:	bl	35048 <fts_children@@Base+0x35ac>
   358ec:	ldr	r2, [sp, #8]
   358f0:	mov	r1, r7
   358f4:	str	r2, [sp, #12]
   358f8:	str	r0, [sp, #28]
   358fc:	mov	r0, r2
   35900:	bl	32a54 <fts_children@@Base+0xfb8>
   35904:	ldr	r3, [sp, #28]
   35908:	eor	r0, r0, #1
   3590c:	cmp	r3, #0
   35910:	orrne	r0, r0, #1
   35914:	tst	r0, #255	; 0xff
   35918:	bne	35acc <fts_children@@Base+0x4030>
   3591c:	ldr	r3, [r8, #100]	; 0x64
   35920:	ldr	r2, [sp, #12]
   35924:	add	r3, r3, sl
   35928:	str	r3, [sp, #8]
   3592c:	mov	r1, r9
   35930:	add	r0, sp, #28
   35934:	bl	354e8 <fts_children@@Base+0x3a4c>
   35938:	ldr	r3, [sp, #8]
   3593c:	str	r0, [r3]
   35940:	ldr	r0, [sp, #40]	; 0x28
   35944:	bl	12154 <free@plt>
   35948:	ldr	r3, [r8, #100]	; 0x64
   3594c:	ldr	r3, [r3, r5, lsl #2]
   35950:	cmp	r3, #0
   35954:	beq	35abc <fts_children@@Base+0x4020>
   35958:	add	r4, r4, #20
   3595c:	ldrb	r3, [r4, #-24]	; 0xffffffe8
   35960:	cmp	r3, #0
   35964:	beq	35a9c <fts_children@@Base+0x4000>
   35968:	ldr	r3, [sp, #4]
   3596c:	ldr	r7, [r4, #-20]	; 0xffffffec
   35970:	mov	r1, fp
   35974:	ldr	sl, [r3, #4]
   35978:	mov	r2, r7
   3597c:	mov	r0, sl
   35980:	bl	33f6c <fts_children@@Base+0x24d0>
   35984:	cmp	r0, #0
   35988:	beq	35958 <fts_children@@Base+0x3ebc>
   3598c:	ldr	r5, [r4, #-8]
   35990:	ldr	r3, [r4, #-12]
   35994:	add	r5, r6, r5
   35998:	sub	r5, r5, r3
   3599c:	cmp	r6, r5
   359a0:	bne	35894 <fts_children@@Base+0x3df8>
   359a4:	ldr	r3, [r9, #20]
   359a8:	add	r7, r7, r7, lsl #1
   359ac:	mov	r0, sl
   359b0:	add	r7, r3, r7, lsl #2
   359b4:	mov	r1, fp
   359b8:	ldr	r3, [r7, #8]
   359bc:	ldr	r5, [r3]
   359c0:	mov	r2, r5
   359c4:	bl	33f6c <fts_children@@Base+0x24d0>
   359c8:	cmp	r0, #0
   359cc:	bne	35958 <fts_children@@Base+0x3ebc>
   359d0:	mov	r7, r0
   359d4:	mov	r3, #1
   359d8:	mov	r0, #4
   359dc:	str	r3, [sp, #32]
   359e0:	str	r3, [sp, #36]	; 0x24
   359e4:	bl	123dc <malloc@plt>
   359e8:	add	r4, sp, #32
   359ec:	ldr	r3, [sp, #88]	; 0x58
   359f0:	mov	r1, r4
   359f4:	ldr	r2, [sp, #20]
   359f8:	cmp	r0, #0
   359fc:	strne	r5, [r0]
   35a00:	streq	r7, [sp, #36]	; 0x24
   35a04:	streq	r7, [sp, #32]
   35a08:	str	r0, [sp, #40]	; 0x28
   35a0c:	moveq	r7, #12
   35a10:	mov	r0, r9
   35a14:	str	r7, [sp, #28]
   35a18:	bl	348a0 <fts_children@@Base+0x2e04>
   35a1c:	mov	r1, r4
   35a20:	mov	r5, r0
   35a24:	ldr	r0, [sp, #4]
   35a28:	bl	344b8 <fts_children@@Base+0x2a1c>
   35a2c:	mov	r4, r0
   35a30:	ldr	r0, [sp, #40]	; 0x28
   35a34:	bl	12154 <free@plt>
   35a38:	ldr	r0, [sp, #28]
   35a3c:	orr	r3, r5, r4
   35a40:	orrs	r3, r3, r0
   35a44:	bne	35ae8 <fts_children@@Base+0x404c>
   35a48:	ldr	r4, [r8, #116]	; 0x74
   35a4c:	b	35888 <fts_children@@Base+0x3dec>
   35a50:	str	r3, [sp, #12]
   35a54:	mov	r0, #4
   35a58:	mov	r3, #1
   35a5c:	str	r3, [sp, #32]
   35a60:	str	r3, [sp, #36]	; 0x24
   35a64:	bl	123dc <malloc@plt>
   35a68:	cmp	r0, #0
   35a6c:	str	r0, [sp, #40]	; 0x28
   35a70:	beq	35ae0 <fts_children@@Base+0x4044>
   35a74:	ldr	r3, [sp, #12]
   35a78:	add	r2, sp, #32
   35a7c:	str	r7, [r0]
   35a80:	str	r3, [sp, #28]
   35a84:	b	3592c <fts_children@@Base+0x3e90>
   35a88:	mov	lr, r2
   35a8c:	mov	r2, r3
   35a90:	add	ip, lr, #1
   35a94:	mov	r3, r2
   35a98:	b	357dc <fts_children@@Base+0x3d40>
   35a9c:	mov	r0, #0
   35aa0:	ldr	r3, [pc, #92]	; 35b04 <fts_children@@Base+0x4068>
   35aa4:	ldr	r2, [sp, #44]	; 0x2c
   35aa8:	ldr	r3, [r3]
   35aac:	cmp	r2, r3
   35ab0:	bne	35b00 <fts_children@@Base+0x4064>
   35ab4:	add	sp, sp, #52	; 0x34
   35ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35abc:	ldr	r0, [sp, #28]
   35ac0:	cmp	r0, #0
   35ac4:	beq	35958 <fts_children@@Base+0x3ebc>
   35ac8:	b	35aa0 <fts_children@@Base+0x4004>
   35acc:	ldr	r0, [sp, #40]	; 0x28
   35ad0:	bl	12154 <free@plt>
   35ad4:	ldr	r0, [sp, #28]
   35ad8:	cmp	r0, #0
   35adc:	bne	35aa0 <fts_children@@Base+0x4004>
   35ae0:	mov	r0, #12
   35ae4:	b	35aa0 <fts_children@@Base+0x4004>
   35ae8:	cmp	r0, #0
   35aec:	bne	35aa0 <fts_children@@Base+0x4004>
   35af0:	cmp	r5, #0
   35af4:	movne	r0, r5
   35af8:	moveq	r0, r4
   35afc:	b	35aa0 <fts_children@@Base+0x4004>
   35b00:	bl	12244 <__stack_chk_fail@plt>
   35b04:	andeq	fp, r5, r0, ror #24
   35b08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35b0c:	sub	sp, sp, #12
   35b10:	ldr	fp, [r1]
   35b14:	ldr	r6, [r0, #84]	; 0x54
   35b18:	cmp	fp, #0
   35b1c:	ble	35bc8 <fts_children@@Base+0x412c>
   35b20:	mov	r8, r3
   35b24:	mov	r9, r2
   35b28:	mov	sl, r0
   35b2c:	mov	r7, r1
   35b30:	mov	r4, #0
   35b34:	b	35b40 <fts_children@@Base+0x40a4>
   35b38:	cmp	r4, fp
   35b3c:	bge	35bc8 <fts_children@@Base+0x412c>
   35b40:	ldr	r3, [r9]
   35b44:	ldr	ip, [r6]
   35b48:	ldr	r5, [r3, r4, lsl #2]
   35b4c:	add	r4, r4, #1
   35b50:	add	lr, ip, r5, lsl #3
   35b54:	ldrb	lr, [lr, #4]
   35b58:	cmp	lr, #8
   35b5c:	bne	35b38 <fts_children@@Base+0x409c>
   35b60:	ldr	r3, [ip, r5, lsl #3]
   35b64:	cmp	r3, #31
   35b68:	bgt	35b38 <fts_children@@Base+0x409c>
   35b6c:	ldr	r2, [r6, #80]	; 0x50
   35b70:	lsr	r3, r2, r3
   35b74:	tst	r3, #1
   35b78:	beq	35b38 <fts_children@@Base+0x409c>
   35b7c:	ldrd	r2, [sl, #128]	; 0x80
   35b80:	ldr	fp, [sl, #124]	; 0x7c
   35b84:	cmp	fp, r2
   35b88:	beq	35bdc <fts_children@@Base+0x4140>
   35b8c:	mov	r1, #24
   35b90:	mov	r0, #1
   35b94:	str	r3, [sp, #4]
   35b98:	bl	12064 <calloc@plt>
   35b9c:	ldr	r3, [sp, #4]
   35ba0:	add	r2, fp, #1
   35ba4:	cmp	r0, #0
   35ba8:	str	r0, [r3, fp, lsl #2]
   35bac:	beq	35bd4 <fts_children@@Base+0x4138>
   35bb0:	str	r2, [sl, #124]	; 0x7c
   35bb4:	ldr	fp, [r7]
   35bb8:	str	r5, [r0, #4]
   35bbc:	cmp	r4, fp
   35bc0:	str	r8, [r0]
   35bc4:	blt	35b40 <fts_children@@Base+0x40a4>
   35bc8:	mov	r0, #0
   35bcc:	add	sp, sp, #12
   35bd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35bd4:	mov	r0, #12
   35bd8:	b	35bcc <fts_children@@Base+0x4130>
   35bdc:	mov	r0, r3
   35be0:	lsl	r1, fp, #3
   35be4:	bl	12268 <realloc@plt>
   35be8:	lsl	r2, fp, #1
   35bec:	subs	r3, r0, #0
   35bf0:	beq	35bd4 <fts_children@@Base+0x4138>
   35bf4:	ldr	fp, [sl, #124]	; 0x7c
   35bf8:	strd	r2, [sl, #128]	; 0x80
   35bfc:	b	35b8c <fts_children@@Base+0x40f0>
   35c00:	cmp	r1, #0
   35c04:	push	{r4, r5, r6, lr}
   35c08:	mov	r5, r0
   35c0c:	blt	35cac <fts_children@@Base+0x4210>
   35c10:	ldr	r3, [r0, #48]	; 0x30
   35c14:	cmp	r3, r1
   35c18:	beq	35cb4 <fts_children@@Base+0x4218>
   35c1c:	ldr	r3, [r0, #80]	; 0x50
   35c20:	cmp	r3, #1
   35c24:	ble	35c6c <fts_children@@Base+0x41d0>
   35c28:	add	r3, r1, #1
   35c2c:	ldr	r2, [r0, #8]
   35c30:	add	r3, r2, r3, lsl #2
   35c34:	b	35c40 <fts_children@@Base+0x41a4>
   35c38:	cmn	r1, #1
   35c3c:	beq	35cac <fts_children@@Base+0x4210>
   35c40:	ldr	r4, [r3, #-4]!
   35c44:	sub	r1, r1, #1
   35c48:	cmn	r4, #1
   35c4c:	beq	35c38 <fts_children@@Base+0x419c>
   35c50:	ldrb	r3, [r5, #78]	; 0x4e
   35c54:	cmp	r3, #0
   35c58:	bne	35cc4 <fts_children@@Base+0x4228>
   35c5c:	cmp	r4, #10
   35c60:	beq	35c98 <fts_children@@Base+0x41fc>
   35c64:	mov	r0, #0
   35c68:	pop	{r4, r5, r6, pc}
   35c6c:	ldr	r3, [r0, #4]
   35c70:	ldr	r0, [r0, #68]	; 0x44
   35c74:	ldrb	r3, [r3, r1]
   35c78:	and	r2, r3, #31
   35c7c:	asr	r1, r3, #5
   35c80:	ldr	r0, [r0, r1, lsl #2]
   35c84:	lsr	r0, r0, r2
   35c88:	ands	r0, r0, #1
   35c8c:	popne	{r4, r5, r6, pc}
   35c90:	cmp	r3, #10
   35c94:	popne	{r4, r5, r6, pc}
   35c98:	ldrb	r3, [r5, #77]	; 0x4d
   35c9c:	cmp	r3, #0
   35ca0:	moveq	r0, #0
   35ca4:	movne	r0, #2
   35ca8:	pop	{r4, r5, r6, pc}
   35cac:	ldr	r0, [r5, #60]	; 0x3c
   35cb0:	pop	{r4, r5, r6, pc}
   35cb4:	tst	r2, #2
   35cb8:	movne	r0, #8
   35cbc:	moveq	r0, #10
   35cc0:	pop	{r4, r5, r6, pc}
   35cc4:	mov	r0, r4
   35cc8:	bl	124e4 <iswalnum@plt>
   35ccc:	sub	r3, r4, #95	; 0x5f
   35cd0:	clz	r3, r3
   35cd4:	lsr	r3, r3, #5
   35cd8:	cmp	r0, #0
   35cdc:	movne	r3, #1
   35ce0:	cmp	r3, #0
   35ce4:	beq	35c5c <fts_children@@Base+0x41c0>
   35ce8:	mov	r0, #1
   35cec:	pop	{r4, r5, r6, pc}
   35cf0:	ldrb	ip, [r1, #4]
   35cf4:	ldr	r3, [r0, #4]
   35cf8:	push	{r4, lr}
   35cfc:	sub	ip, ip, #1
   35d00:	ldrb	r3, [r3, r2]
   35d04:	cmp	ip, #6
   35d08:	ldrls	pc, [pc, ip, lsl #2]
   35d0c:	b	35d38 <fts_children@@Base+0x429c>
   35d10:	andeq	r5, r3, ip, lsr #26
   35d14:	andeq	r5, r3, r8, lsr sp
   35d18:	andeq	r5, r3, ip, asr #27
   35d1c:	andeq	r5, r3, r8, lsr sp
   35d20:	andeq	r5, r3, r8, asr #26
   35d24:	andeq	r5, r3, r8, lsr sp
   35d28:	andeq	r5, r3, r0, asr #26
   35d2c:	ldrb	ip, [r1]
   35d30:	cmp	ip, r3
   35d34:	beq	35d68 <fts_children@@Base+0x42cc>
   35d38:	mov	r0, #0
   35d3c:	pop	{r4, pc}
   35d40:	tst	r3, #128	; 0x80
   35d44:	bne	35d38 <fts_children@@Base+0x429c>
   35d48:	cmp	r3, #10
   35d4c:	beq	35e08 <fts_children@@Base+0x436c>
   35d50:	cmp	r3, #0
   35d54:	bne	35d68 <fts_children@@Base+0x42cc>
   35d58:	ldr	ip, [r0, #84]	; 0x54
   35d5c:	ldr	ip, [ip, #128]	; 0x80
   35d60:	tst	ip, #128	; 0x80
   35d64:	bne	35d38 <fts_children@@Base+0x429c>
   35d68:	ldr	r4, [r1, #4]
   35d6c:	ldr	r3, [pc, #168]	; 35e1c <fts_children@@Base+0x4380>
   35d70:	and	r3, r3, r4
   35d74:	cmp	r3, #0
   35d78:	beq	35dec <fts_children@@Base+0x4350>
   35d7c:	mov	r1, r2
   35d80:	ldr	r2, [r0, #88]	; 0x58
   35d84:	bl	35c00 <fts_children@@Base+0x4164>
   35d88:	ldr	r1, [pc, #144]	; 35e20 <fts_children@@Base+0x4384>
   35d8c:	and	r1, r1, r4, lsr #8
   35d90:	ands	r2, r1, #4
   35d94:	bne	35df4 <fts_children@@Base+0x4358>
   35d98:	tst	r1, #8
   35d9c:	beq	35da8 <fts_children@@Base+0x430c>
   35da0:	tst	r0, #1
   35da4:	bne	35d38 <fts_children@@Base+0x429c>
   35da8:	tst	r1, #32
   35dac:	beq	35db8 <fts_children@@Base+0x431c>
   35db0:	ands	r3, r0, #2
   35db4:	beq	35d38 <fts_children@@Base+0x429c>
   35db8:	tst	r1, #128	; 0x80
   35dbc:	beq	35dec <fts_children@@Base+0x4350>
   35dc0:	lsr	r0, r0, #3
   35dc4:	and	r0, r0, #1
   35dc8:	pop	{r4, pc}
   35dcc:	ldr	ip, [r1]
   35dd0:	asr	lr, r3, #5
   35dd4:	and	r3, r3, #31
   35dd8:	ldr	ip, [ip, lr, lsl #2]
   35ddc:	lsr	r3, ip, r3
   35de0:	ands	r3, r3, #1
   35de4:	bne	35d68 <fts_children@@Base+0x42cc>
   35de8:	b	35d38 <fts_children@@Base+0x429c>
   35dec:	mov	r0, #1
   35df0:	pop	{r4, pc}
   35df4:	ands	r3, r0, #1
   35df8:	beq	35d38 <fts_children@@Base+0x429c>
   35dfc:	tst	r1, #8
   35e00:	beq	35da8 <fts_children@@Base+0x430c>
   35e04:	b	35d38 <fts_children@@Base+0x429c>
   35e08:	ldr	r3, [r0, #84]	; 0x54
   35e0c:	ldr	r3, [r3, #128]	; 0x80
   35e10:	ands	r3, r3, #64	; 0x40
   35e14:	bne	35d68 <fts_children@@Base+0x42cc>
   35e18:	b	35d38 <fts_children@@Base+0x429c>
   35e1c:	andeq	pc, r3, r0, lsl #30
   35e20:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   35e24:	push	{r4, r5, r6, r7, r8, lr}
   35e28:	mov	r4, r1
   35e2c:	mov	r6, r2
   35e30:	mov	r1, r3
   35e34:	ldr	r2, [r0, #88]	; 0x58
   35e38:	mov	r5, r0
   35e3c:	bl	35c00 <fts_children@@Base+0x4164>
   35e40:	cmp	r4, #0
   35e44:	ble	35ed4 <fts_children@@Base+0x4438>
   35e48:	ldr	r3, [r5, #84]	; 0x54
   35e4c:	ldr	r1, [r6]
   35e50:	ldr	r5, [pc, #152]	; 35ef0 <fts_children@@Base+0x4454>
   35e54:	ldr	lr, [r3]
   35e58:	sub	r1, r1, #4
   35e5c:	mov	r2, #0
   35e60:	and	r8, r0, #8
   35e64:	and	r7, r0, #2
   35e68:	and	r6, r0, #1
   35e6c:	ldr	r0, [r1, #4]!
   35e70:	add	r3, lr, r0, lsl #3
   35e74:	ldrb	ip, [r3, #4]
   35e78:	ldr	r3, [r3, #4]
   35e7c:	cmp	ip, #2
   35e80:	and	r3, r5, r3, lsr #8
   35e84:	bne	35ec8 <fts_children@@Base+0x442c>
   35e88:	cmp	r3, #0
   35e8c:	popeq	{r4, r5, r6, r7, r8, pc}
   35e90:	tst	r3, #4
   35e94:	beq	35edc <fts_children@@Base+0x4440>
   35e98:	cmp	r6, #0
   35e9c:	beq	35ec8 <fts_children@@Base+0x442c>
   35ea0:	tst	r3, #8
   35ea4:	bne	35ec8 <fts_children@@Base+0x442c>
   35ea8:	tst	r3, #32
   35eac:	beq	35eb8 <fts_children@@Base+0x441c>
   35eb0:	cmp	r7, #0
   35eb4:	beq	35ec8 <fts_children@@Base+0x442c>
   35eb8:	tst	r3, #128	; 0x80
   35ebc:	popeq	{r4, r5, r6, r7, r8, pc}
   35ec0:	cmp	r8, #0
   35ec4:	popne	{r4, r5, r6, r7, r8, pc}
   35ec8:	add	r2, r2, #1
   35ecc:	cmp	r2, r4
   35ed0:	bne	35e6c <fts_children@@Base+0x43d0>
   35ed4:	mov	r0, #0
   35ed8:	pop	{r4, r5, r6, r7, r8, pc}
   35edc:	tst	r3, #8
   35ee0:	beq	35ea8 <fts_children@@Base+0x440c>
   35ee4:	cmp	r6, #0
   35ee8:	beq	35ea8 <fts_children@@Base+0x440c>
   35eec:	b	35ec8 <fts_children@@Base+0x442c>
   35ef0:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   35ef4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35ef8:	sub	sp, sp, #36	; 0x24
   35efc:	ldr	r8, [pc, #2060]	; 36710 <fts_children@@Base+0x4c74>
   35f00:	ldr	r5, [r0, #24]
   35f04:	mov	r4, r0
   35f08:	ldr	r3, [r8]
   35f0c:	cmp	r5, r1
   35f10:	mov	r7, r1
   35f14:	mov	r9, r2
   35f18:	str	r3, [sp, #28]
   35f1c:	suble	r5, r1, r5
   35f20:	ble	35f84 <fts_children@@Base+0x44e8>
   35f24:	ldr	r3, [r0, #80]	; 0x50
   35f28:	cmp	r3, #1
   35f2c:	ldrb	r3, [r0, #75]	; 0x4b
   35f30:	movgt	r2, #0
   35f34:	strgt	r2, [r0, #16]
   35f38:	strgt	r2, [r0, #20]
   35f3c:	tst	r9, #1
   35f40:	movne	r2, #4
   35f44:	moveq	r2, #6
   35f48:	cmp	r3, #0
   35f4c:	ldr	r3, [r0, #44]	; 0x2c
   35f50:	str	r2, [r0, #60]	; 0x3c
   35f54:	str	r3, [r0, #48]	; 0x30
   35f58:	mov	r3, #0
   35f5c:	ldr	r2, [r0, #52]	; 0x34
   35f60:	str	r3, [r0, #28]
   35f64:	str	r3, [r0, #24]
   35f68:	str	r3, [r0, #32]
   35f6c:	strb	r3, [r0, #76]	; 0x4c
   35f70:	moveq	r5, r1
   35f74:	ldreq	r3, [r0]
   35f78:	movne	r5, r1
   35f7c:	str	r2, [r0, #56]	; 0x38
   35f80:	streq	r3, [r0, #4]
   35f84:	cmp	r5, #0
   35f88:	beq	360fc <fts_children@@Base+0x4660>
   35f8c:	ldr	r3, [r4, #32]
   35f90:	ldrb	r2, [r4, #76]	; 0x4c
   35f94:	cmp	r3, r5
   35f98:	ldr	r6, [r4, #28]
   35f9c:	ble	3610c <fts_children@@Base+0x4670>
   35fa0:	cmp	r2, #0
   35fa4:	bne	36270 <fts_children@@Base+0x47d4>
   35fa8:	mov	r2, r9
   35fac:	sub	r1, r5, #1
   35fb0:	mov	r0, r4
   35fb4:	bl	35c00 <fts_children@@Base+0x4164>
   35fb8:	ldr	r3, [r4, #80]	; 0x50
   35fbc:	sub	r2, r6, r5
   35fc0:	cmp	r3, #1
   35fc4:	str	r0, [r4, #60]	; 0x3c
   35fc8:	bgt	36058 <fts_children@@Base+0x45bc>
   35fcc:	ldrb	r3, [r4, #75]	; 0x4b
   35fd0:	cmp	r3, #0
   35fd4:	bne	362b0 <fts_children@@Base+0x4814>
   35fd8:	ldr	r1, [r4, #48]	; 0x30
   35fdc:	ldr	r0, [r4, #56]	; 0x38
   35fe0:	ldr	ip, [r4, #32]
   35fe4:	str	r2, [r4, #28]
   35fe8:	ldr	r2, [r4, #80]	; 0x50
   35fec:	sub	r1, r1, r5
   35ff0:	sub	r0, r0, r5
   35ff4:	sub	ip, ip, r5
   35ff8:	str	ip, [r4, #32]
   35ffc:	cmp	r3, #0
   36000:	bne	36010 <fts_children@@Base+0x4574>
   36004:	ldr	r3, [r4, #4]
   36008:	add	r5, r3, r5
   3600c:	str	r5, [r4, #4]
   36010:	cmp	r2, #1
   36014:	str	r7, [r4, #24]
   36018:	str	r1, [r4, #48]	; 0x30
   3601c:	str	r0, [r4, #56]	; 0x38
   36020:	ble	36084 <fts_children@@Base+0x45e8>
   36024:	ldrb	r3, [r4, #72]	; 0x48
   36028:	mov	r0, r4
   3602c:	cmp	r3, #0
   36030:	bne	36074 <fts_children@@Base+0x45d8>
   36034:	bl	32cdc <fts_children@@Base+0x1240>
   36038:	mov	r0, #0
   3603c:	str	r0, [r4, #40]	; 0x28
   36040:	ldr	r2, [sp, #28]
   36044:	ldr	r3, [r8]
   36048:	cmp	r2, r3
   3604c:	bne	3670c <fts_children@@Base+0x4c70>
   36050:	add	sp, sp, #36	; 0x24
   36054:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36058:	ldr	r0, [r4, #8]
   3605c:	lsl	r2, r2, #2
   36060:	add	r1, r0, r5, lsl #2
   36064:	bl	12148 <memmove@plt>
   36068:	ldr	r2, [r4, #28]
   3606c:	sub	r2, r2, r5
   36070:	b	35fcc <fts_children@@Base+0x4530>
   36074:	bl	32e90 <fts_children@@Base+0x13f4>
   36078:	cmp	r0, #0
   3607c:	beq	36038 <fts_children@@Base+0x459c>
   36080:	b	36040 <fts_children@@Base+0x45a4>
   36084:	ldrb	r3, [r4, #75]	; 0x4b
   36088:	cmp	r3, #0
   3608c:	streq	r1, [r4, #28]
   36090:	beq	36038 <fts_children@@Base+0x459c>
   36094:	ldrb	r3, [r4, #72]	; 0x48
   36098:	cmp	r3, #0
   3609c:	bne	36570 <fts_children@@Base+0x4ad4>
   360a0:	ldr	r0, [r4, #64]	; 0x40
   360a4:	cmp	r0, #0
   360a8:	beq	36038 <fts_children@@Base+0x459c>
   360ac:	ldr	r2, [r4, #36]	; 0x24
   360b0:	ldr	r3, [r4, #28]
   360b4:	cmp	r1, r2
   360b8:	movge	r1, r2
   360bc:	cmp	r1, r3
   360c0:	bgt	360d0 <fts_children@@Base+0x4634>
   360c4:	b	366b0 <fts_children@@Base+0x4c14>
   360c8:	ldr	r7, [r4, #24]
   360cc:	ldr	r0, [r4, #64]	; 0x40
   360d0:	ldm	r4, {r2, ip}
   360d4:	add	r2, r2, r3
   360d8:	ldrb	r2, [r2, r7]
   360dc:	ldrb	r2, [r0, r2]
   360e0:	strb	r2, [ip, r3]
   360e4:	add	r3, r3, #1
   360e8:	cmp	r1, r3
   360ec:	bne	360c8 <fts_children@@Base+0x462c>
   360f0:	str	r1, [r4, #28]
   360f4:	str	r1, [r4, #32]
   360f8:	b	36038 <fts_children@@Base+0x459c>
   360fc:	ldr	r2, [r4, #80]	; 0x50
   36100:	ldr	r1, [r4, #48]	; 0x30
   36104:	ldr	r0, [r4, #56]	; 0x38
   36108:	b	36010 <fts_children@@Base+0x4574>
   3610c:	cmp	r2, #0
   36110:	bne	365fc <fts_children@@Base+0x4b60>
   36114:	ldr	r2, [r4, #80]	; 0x50
   36118:	mov	r1, #0
   3611c:	cmp	r2, #1
   36120:	str	r1, [r4, #28]
   36124:	ldr	r0, [r4, #24]
   36128:	ble	3642c <fts_children@@Base+0x4990>
   3612c:	ldrb	r1, [r4, #73]	; 0x49
   36130:	cmp	r1, #0
   36134:	beq	3619c <fts_children@@Base+0x4700>
   36138:	ldr	ip, [r4]
   3613c:	sub	r2, r5, r2
   36140:	add	sl, ip, r0
   36144:	add	r2, sl, r2
   36148:	cmp	ip, r2
   3614c:	sub	r1, r5, #1
   36150:	movcc	ip, r2
   36154:	add	fp, sl, r1
   36158:	cmp	ip, fp
   3615c:	bhi	3619c <fts_children@@Base+0x4700>
   36160:	ldrb	r2, [sl, r1]
   36164:	and	r2, r2, #192	; 0xc0
   36168:	cmp	r2, #128	; 0x80
   3616c:	subeq	r2, fp, #1
   36170:	subeq	ip, ip, #1
   36174:	beq	36190 <fts_children@@Base+0x46f4>
   36178:	b	3657c <fts_children@@Base+0x4ae0>
   3617c:	ldrb	r1, [fp]
   36180:	sub	r2, r2, #1
   36184:	and	r1, r1, #192	; 0xc0
   36188:	cmp	r1, #128	; 0x80
   3618c:	bne	3657c <fts_children@@Base+0x4ae0>
   36190:	cmp	ip, r2
   36194:	mov	fp, r2
   36198:	bne	3617c <fts_children@@Base+0x46e0>
   3619c:	add	sl, r0, r3
   361a0:	cmp	r7, sl
   361a4:	ble	364ac <fts_children@@Base+0x4a10>
   361a8:	add	r3, r4, #16
   361ac:	stm	sp, {r5, r6}
   361b0:	add	fp, sp, #12
   361b4:	mov	r6, r3
   361b8:	ldm	r6, {r0, r1}
   361bc:	ldr	r5, [r4, #44]	; 0x2c
   361c0:	ldr	ip, [r4]
   361c4:	sub	r5, r5, sl
   361c8:	stm	fp, {r0, r1}
   361cc:	mov	r2, r5
   361d0:	mov	r3, r6
   361d4:	add	r1, ip, sl
   361d8:	add	r0, sp, #8
   361dc:	bl	31be8 <fts_children@@Base+0x14c>
   361e0:	sub	r2, r0, #1
   361e4:	cmn	r2, #4
   361e8:	mov	r3, r0
   361ec:	ldrls	r2, [sp, #8]
   361f0:	bhi	36628 <fts_children@@Base+0x4b8c>
   361f4:	add	sl, sl, r3
   361f8:	cmp	r7, sl
   361fc:	bgt	361b8 <fts_children@@Base+0x471c>
   36200:	sub	sl, sl, r7
   36204:	cmn	r2, #1
   36208:	ldr	r5, [sp]
   3620c:	mov	fp, r2
   36210:	ldr	r6, [sp, #4]
   36214:	str	sl, [r4, #28]
   36218:	beq	364b4 <fts_children@@Base+0x4a18>
   3621c:	ldrb	r3, [r4, #78]	; 0x4e
   36220:	cmp	r3, #0
   36224:	bne	36688 <fts_children@@Base+0x4bec>
   36228:	cmp	fp, #10
   3622c:	movne	r3, #0
   36230:	bne	36244 <fts_children@@Base+0x47a8>
   36234:	ldrb	r3, [r4, #77]	; 0x4d
   36238:	cmp	r3, #0
   3623c:	moveq	r3, #0
   36240:	movne	r3, #2
   36244:	str	r3, [r4, #60]	; 0x3c
   36248:	cmp	sl, #0
   3624c:	bne	3664c <fts_children@@Base+0x4bb0>
   36250:	ldrb	r3, [r4, #75]	; 0x4b
   36254:	ldr	r1, [r4, #48]	; 0x30
   36258:	ldr	r0, [r4, #56]	; 0x38
   3625c:	str	sl, [r4, #32]
   36260:	sub	r1, r1, r5
   36264:	sub	r0, r0, r5
   36268:	ldr	r2, [r4, #80]	; 0x50
   3626c:	b	35ffc <fts_children@@Base+0x4560>
   36270:	ldr	sl, [r4, #12]
   36274:	mov	r3, r6
   36278:	mov	r2, #0
   3627c:	b	36290 <fts_children@@Base+0x47f4>
   36280:	bge	36420 <fts_children@@Base+0x4984>
   36284:	add	r2, r1, #1
   36288:	cmp	r2, r3
   3628c:	bge	362cc <fts_children@@Base+0x4830>
   36290:	add	r1, r2, r3
   36294:	add	r1, r1, r1, lsr #31
   36298:	asr	r1, r1, #1
   3629c:	ldr	r0, [sl, r1, lsl #2]
   362a0:	cmp	r0, r5
   362a4:	ble	36280 <fts_children@@Base+0x47e4>
   362a8:	mov	r3, r1
   362ac:	b	36288 <fts_children@@Base+0x47ec>
   362b0:	ldr	r0, [r4, #4]
   362b4:	add	r1, r0, r5
   362b8:	bl	12148 <memmove@plt>
   362bc:	ldr	r2, [r4, #28]
   362c0:	ldrb	r3, [r4, #75]	; 0x4b
   362c4:	sub	r2, r2, r5
   362c8:	b	35fd8 <fts_children@@Base+0x453c>
   362cc:	cmp	r0, r5
   362d0:	addlt	fp, r1, #1
   362d4:	bge	36420 <fts_children@@Base+0x4984>
   362d8:	mov	r2, r9
   362dc:	mov	r0, r4
   362e0:	bl	35c00 <fts_children@@Base+0x4164>
   362e4:	cmp	r5, r6
   362e8:	sub	r3, r5, fp
   362ec:	clz	r3, r3
   362f0:	lsr	r3, r3, #5
   362f4:	movge	r3, #0
   362f8:	cmp	r3, #0
   362fc:	str	r0, [r4, #60]	; 0x3c
   36300:	bne	364cc <fts_children@@Base+0x4a30>
   36304:	ldr	r1, [r4, #44]	; 0x2c
   36308:	ldr	r0, [r4, #52]	; 0x34
   3630c:	sub	r1, r1, r7
   36310:	add	r3, r1, r5
   36314:	sub	r0, r0, r7
   36318:	add	r2, r0, r5
   3631c:	str	r3, [r4, #48]	; 0x30
   36320:	cmp	fp, #0
   36324:	mov	r3, #0
   36328:	str	r2, [r4, #56]	; 0x38
   3632c:	strb	r3, [r4, #76]	; 0x4c
   36330:	ble	36360 <fts_children@@Base+0x48c4>
   36334:	sub	r3, fp, #-1073741823	; 0xc0000001
   36338:	ldr	r2, [sl, r3, lsl #2]
   3633c:	add	r3, sl, r3, lsl #2
   36340:	cmp	r2, r5
   36344:	beq	36358 <fts_children@@Base+0x48bc>
   36348:	b	36360 <fts_children@@Base+0x48c4>
   3634c:	ldr	r2, [r3, #-4]!
   36350:	cmp	r2, r5
   36354:	bne	36360 <fts_children@@Base+0x48c4>
   36358:	subs	fp, fp, #1
   3635c:	bne	3634c <fts_children@@Base+0x48b0>
   36360:	cmp	fp, r6
   36364:	bge	363b8 <fts_children@@Base+0x491c>
   36368:	ldr	r3, [r4, #8]
   3636c:	lsl	ip, fp, #2
   36370:	ldr	r2, [r3, fp, lsl #2]
   36374:	add	r3, r3, ip
   36378:	cmn	r2, #1
   3637c:	beq	36394 <fts_children@@Base+0x48f8>
   36380:	b	363c0 <fts_children@@Base+0x4924>
   36384:	ldr	r2, [r3, #4]!
   36388:	lsl	ip, fp, #2
   3638c:	cmn	r2, #1
   36390:	bne	363c0 <fts_children@@Base+0x4924>
   36394:	add	fp, fp, #1
   36398:	cmp	fp, r6
   3639c:	bne	36384 <fts_children@@Base+0x48e8>
   363a0:	mov	r2, #0
   363a4:	str	r2, [r4, #28]
   363a8:	str	r2, [r4, #32]
   363ac:	ldrb	r3, [r4, #75]	; 0x4b
   363b0:	ldr	r2, [r4, #80]	; 0x50
   363b4:	b	35ffc <fts_children@@Base+0x4560>
   363b8:	beq	363a0 <fts_children@@Base+0x4904>
   363bc:	lsl	ip, fp, #2
   363c0:	ldr	r2, [sl, ip]
   363c4:	sub	r2, r2, r5
   363c8:	cmp	r2, #0
   363cc:	str	r2, [r4, #28]
   363d0:	beq	363a8 <fts_children@@Base+0x490c>
   363d4:	ble	363fc <fts_children@@Base+0x4960>
   363d8:	ldr	r1, [r4, #8]
   363dc:	mov	r3, #0
   363e0:	sub	r1, r1, #4
   363e4:	mvn	r0, #0
   363e8:	str	r0, [r1, #4]!
   363ec:	ldr	r2, [r4, #28]
   363f0:	add	r3, r3, #1
   363f4:	cmp	r2, r3
   363f8:	bgt	363e8 <fts_children@@Base+0x494c>
   363fc:	mov	r1, #255	; 0xff
   36400:	ldr	r0, [r4, #4]
   36404:	bl	12514 <memset@plt>
   36408:	ldr	r1, [r4, #48]	; 0x30
   3640c:	ldr	r0, [r4, #56]	; 0x38
   36410:	ldr	r2, [r4, #28]
   36414:	sub	r1, r1, r5
   36418:	sub	r0, r0, r5
   3641c:	b	363a8 <fts_children@@Base+0x490c>
   36420:	mov	fp, r1
   36424:	sub	r1, r1, #1
   36428:	b	362d8 <fts_children@@Base+0x483c>
   3642c:	ldr	sl, [r4]
   36430:	ldr	r3, [r4, #64]	; 0x40
   36434:	add	sl, sl, r5
   36438:	add	sl, sl, r0
   3643c:	cmp	r3, #0
   36440:	ldrb	r0, [sl, #-1]
   36444:	str	r1, [r4, #32]
   36448:	ldr	ip, [r4, #68]	; 0x44
   3644c:	ldrbne	r0, [r3, r0]
   36450:	and	r3, r0, #31
   36454:	asr	r1, r0, #5
   36458:	ldr	r1, [ip, r1, lsl #2]
   3645c:	lsr	r3, r1, r3
   36460:	ands	ip, r3, #1
   36464:	bne	3647c <fts_children@@Base+0x49e0>
   36468:	cmp	r0, #10
   3646c:	bne	3647c <fts_children@@Base+0x49e0>
   36470:	ldrb	r3, [r4, #77]	; 0x4d
   36474:	cmp	r3, #0
   36478:	movne	ip, #2
   3647c:	ldrb	r3, [r4, #75]	; 0x4b
   36480:	ldr	r1, [r4, #48]	; 0x30
   36484:	ldr	r0, [r4, #56]	; 0x38
   36488:	cmp	r3, #0
   3648c:	str	ip, [r4, #60]	; 0x3c
   36490:	sub	r1, r1, r5
   36494:	sub	r0, r0, r5
   36498:	beq	36004 <fts_children@@Base+0x4568>
   3649c:	str	r7, [r4, #24]
   364a0:	str	r1, [r4, #48]	; 0x30
   364a4:	str	r0, [r4, #56]	; 0x38
   364a8:	b	36088 <fts_children@@Base+0x45ec>
   364ac:	sub	sl, sl, r7
   364b0:	str	sl, [r4, #28]
   364b4:	mov	r2, r9
   364b8:	sub	r1, r6, #1
   364bc:	mov	r0, r4
   364c0:	bl	35c00 <fts_children@@Base+0x4164>
   364c4:	str	r0, [r4, #60]	; 0x3c
   364c8:	b	36248 <fts_children@@Base+0x47ac>
   364cc:	ldr	r3, [sl, fp, lsl #2]
   364d0:	cmp	r3, r5
   364d4:	bne	36304 <fts_children@@Base+0x4868>
   364d8:	ldr	r0, [r4, #8]
   364dc:	sub	r2, r6, r5
   364e0:	lsl	r9, r5, #2
   364e4:	lsl	r2, r2, #2
   364e8:	add	r1, r0, r9
   364ec:	bl	12148 <memmove@plt>
   364f0:	ldr	r0, [r4, #4]
   364f4:	ldr	r2, [r4, #28]
   364f8:	add	r1, r0, r5
   364fc:	sub	r2, r2, r5
   36500:	bl	12148 <memmove@plt>
   36504:	ldr	r3, [r4, #28]
   36508:	ldr	r2, [r4, #32]
   3650c:	sub	r3, r3, r5
   36510:	sub	r2, r2, r5
   36514:	cmp	r3, #0
   36518:	str	r3, [r4, #28]
   3651c:	str	r2, [r4, #32]
   36520:	ble	36554 <fts_children@@Base+0x4ab8>
   36524:	ldr	r0, [r4, #12]
   36528:	sub	r1, r9, #4
   3652c:	add	r1, r0, r1
   36530:	mov	r2, #0
   36534:	sub	r0, r0, #4
   36538:	ldr	r3, [r1, #4]!
   3653c:	add	r2, r2, #1
   36540:	sub	r3, r3, r5
   36544:	str	r3, [r0, #4]!
   36548:	ldr	r3, [r4, #28]
   3654c:	cmp	r3, r2
   36550:	bgt	36538 <fts_children@@Base+0x4a9c>
   36554:	ldr	r1, [r4, #48]	; 0x30
   36558:	ldr	r0, [r4, #56]	; 0x38
   3655c:	sub	r1, r1, r5
   36560:	sub	r0, r0, r5
   36564:	ldr	r2, [r4, #80]	; 0x50
   36568:	ldrb	r3, [r4, #75]	; 0x4b
   3656c:	b	35ffc <fts_children@@Base+0x4560>
   36570:	mov	r0, r4
   36574:	bl	32c68 <fts_children@@Base+0x11cc>
   36578:	b	36038 <fts_children@@Base+0x459c>
   3657c:	ldr	r2, [r4, #48]	; 0x30
   36580:	ldr	r3, [r4, #64]	; 0x40
   36584:	add	r2, sl, r2
   36588:	cmp	r3, #0
   3658c:	sub	r2, r2, fp
   36590:	moveq	r1, fp
   36594:	bne	366d0 <fts_children@@Base+0x4c34>
   36598:	add	ip, sp, #12
   3659c:	mov	lr, #0
   365a0:	mov	r3, ip
   365a4:	add	r0, sp, #8
   365a8:	str	lr, [sp, #12]
   365ac:	str	lr, [sp, #16]
   365b0:	bl	31be8 <fts_children@@Base+0x14c>
   365b4:	add	r3, sl, r5
   365b8:	sub	r3, r3, fp
   365bc:	cmp	r3, r0
   365c0:	bhi	365cc <fts_children@@Base+0x4b30>
   365c4:	cmn	r0, #3
   365c8:	bls	365d8 <fts_children@@Base+0x4b3c>
   365cc:	ldr	r0, [r4, #24]
   365d0:	ldr	r3, [r4, #32]
   365d4:	b	3619c <fts_children@@Base+0x4700>
   365d8:	ldr	fp, [sp, #8]
   365dc:	mov	r2, #0
   365e0:	sub	sl, r0, r3
   365e4:	cmn	fp, #1
   365e8:	str	r2, [r4, #16]
   365ec:	str	r2, [r4, #20]
   365f0:	str	sl, [r4, #28]
   365f4:	bne	3621c <fts_children@@Base+0x4780>
   365f8:	b	365cc <fts_children@@Base+0x4b30>
   365fc:	ldr	r1, [r4, #44]	; 0x2c
   36600:	ldr	r2, [r4, #52]	; 0x34
   36604:	sub	r1, r1, r7
   36608:	add	r1, r1, r5
   3660c:	sub	r2, r2, r7
   36610:	add	r2, r2, r5
   36614:	str	r1, [r4, #48]	; 0x30
   36618:	mov	r1, #0
   3661c:	str	r2, [r4, #56]	; 0x38
   36620:	strb	r1, [r4, #76]	; 0x4c
   36624:	b	36114 <fts_children@@Base+0x4678>
   36628:	cmp	r5, #0
   3662c:	cmpne	r0, #0
   36630:	ldm	fp, {r0, r1}
   36634:	ldrne	r3, [r4]
   36638:	moveq	r2, #0
   3663c:	ldrbne	r2, [r3, sl]
   36640:	mov	r3, #1
   36644:	stm	r6, {r0, r1}
   36648:	b	361f4 <fts_children@@Base+0x4758>
   3664c:	ble	36674 <fts_children@@Base+0x4bd8>
   36650:	ldr	r2, [r4, #8]
   36654:	mov	r3, #0
   36658:	sub	r2, r2, #4
   3665c:	mvn	r1, #0
   36660:	str	r1, [r2, #4]!
   36664:	ldr	sl, [r4, #28]
   36668:	add	r3, r3, #1
   3666c:	cmp	sl, r3
   36670:	bgt	36660 <fts_children@@Base+0x4bc4>
   36674:	ldrb	r3, [r4, #75]	; 0x4b
   36678:	cmp	r3, #0
   3667c:	bne	366b8 <fts_children@@Base+0x4c1c>
   36680:	ldr	sl, [r4, #28]
   36684:	b	36254 <fts_children@@Base+0x47b8>
   36688:	mov	r0, fp
   3668c:	bl	124e4 <iswalnum@plt>
   36690:	subs	r3, fp, #95	; 0x5f
   36694:	movne	r3, #1
   36698:	cmp	r0, #0
   3669c:	movne	r3, #0
   366a0:	cmp	r3, #0
   366a4:	moveq	r3, #1
   366a8:	beq	36244 <fts_children@@Base+0x47a8>
   366ac:	b	36228 <fts_children@@Base+0x478c>
   366b0:	mov	r1, r3
   366b4:	b	360f0 <fts_children@@Base+0x4654>
   366b8:	mov	r2, sl
   366bc:	mov	r1, #255	; 0xff
   366c0:	ldr	r0, [r4, #4]
   366c4:	bl	12514 <memset@plt>
   366c8:	ldrb	r3, [r4, #75]	; 0x4b
   366cc:	b	36680 <fts_children@@Base+0x4be4>
   366d0:	cmp	r2, #6
   366d4:	movlt	r0, r2
   366d8:	movge	r0, #6
   366dc:	cmp	r2, #0
   366e0:	subgt	ip, r0, #1
   366e4:	add	r1, sp, #20
   366e8:	addgt	ip, r1, ip
   366ec:	addgt	r0, fp, r0
   366f0:	ble	36598 <fts_children@@Base+0x4afc>
   366f4:	ldrb	lr, [r0, #-1]!
   366f8:	cmp	fp, r0
   366fc:	ldrb	lr, [r3, lr]
   36700:	strb	lr, [ip], #-1
   36704:	bne	366f4 <fts_children@@Base+0x4c58>
   36708:	b	36598 <fts_children@@Base+0x4afc>
   3670c:	bl	12244 <__stack_chk_fail@plt>
   36710:	andeq	fp, r5, r0, ror #24
   36714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36718:	mov	sl, r1
   3671c:	ldr	r7, [r0, #28]
   36720:	add	r1, r1, r1, lsl #1
   36724:	sub	sp, sp, #44	; 0x2c
   36728:	add	r7, r7, r1, lsl #2
   3672c:	ldr	r1, [pc, #532]	; 36948 <fts_children@@Base+0x4eac>
   36730:	mov	r5, #0
   36734:	str	r5, [sp, #28]
   36738:	str	r5, [sp, #24]
   3673c:	str	r5, [sp, #32]
   36740:	ldr	r6, [r7, #4]
   36744:	ldr	r1, [r1]
   36748:	cmp	r6, r5
   3674c:	str	r2, [sp, #12]
   36750:	str	r3, [sp, #20]
   36754:	str	r1, [sp, #36]	; 0x24
   36758:	ble	3693c <fts_children@@Base+0x4ea0>
   3675c:	add	r3, r7, #8
   36760:	str	r3, [sp, #8]
   36764:	add	r3, r2, #8
   36768:	mov	r9, r0
   3676c:	str	r3, [sp, #16]
   36770:	b	367c4 <fts_children@@Base+0x4d28>
   36774:	cmp	r0, #0
   36778:	bne	3684c <fts_children@@Base+0x4db0>
   3677c:	mov	r2, r3
   36780:	ldr	r3, [sp, #12]
   36784:	ldr	r1, [sp, #16]
   36788:	ldr	r0, [r3, #4]
   3678c:	bl	33f6c <fts_children@@Base+0x24d0>
   36790:	cmp	r0, #0
   36794:	beq	3684c <fts_children@@Base+0x4db0>
   36798:	ldr	r2, [r9, #28]
   3679c:	ldr	r1, [sp, #20]
   367a0:	add	r2, r2, r4
   367a4:	add	r0, sp, #24
   367a8:	bl	349ec <fts_children@@Base+0x2f50>
   367ac:	cmp	r0, #0
   367b0:	bne	3692c <fts_children@@Base+0x4e90>
   367b4:	ldr	r6, [r7, #4]
   367b8:	add	r5, r5, #1
   367bc:	cmp	r6, r5
   367c0:	ble	3687c <fts_children@@Base+0x4de0>
   367c4:	ldr	r3, [r7, #8]
   367c8:	ldr	r4, [r3, r5, lsl #2]
   367cc:	cmp	sl, r4
   367d0:	beq	367b8 <fts_children@@Base+0x4d1c>
   367d4:	ldr	r3, [r9]
   367d8:	add	r3, r3, r4, lsl #3
   367dc:	ldrb	r3, [r3, #4]
   367e0:	tst	r3, #8
   367e4:	beq	367b8 <fts_children@@Base+0x4d1c>
   367e8:	add	r4, r4, r4, lsl #1
   367ec:	ldr	r8, [r9, #20]
   367f0:	lsl	r4, r4, #2
   367f4:	add	r8, r8, r4
   367f8:	ldr	r1, [sp, #8]
   367fc:	ldr	fp, [r8, #8]
   36800:	mov	r0, r6
   36804:	ldr	r3, [fp]
   36808:	mov	r2, r3
   3680c:	str	r3, [sp, #4]
   36810:	bl	33f6c <fts_children@@Base+0x24d0>
   36814:	ldr	r2, [r8, #4]
   36818:	ldr	r3, [sp, #4]
   3681c:	cmp	r2, #1
   36820:	bgt	36774 <fts_children@@Base+0x4cd8>
   36824:	cmp	r0, #0
   36828:	moveq	r2, r3
   3682c:	bne	367b8 <fts_children@@Base+0x4d1c>
   36830:	ldr	r3, [sp, #12]
   36834:	ldr	r1, [sp, #16]
   36838:	ldr	r0, [r3, #4]
   3683c:	bl	33f6c <fts_children@@Base+0x24d0>
   36840:	cmp	r0, #0
   36844:	beq	367b8 <fts_children@@Base+0x4d1c>
   36848:	b	36798 <fts_children@@Base+0x4cfc>
   3684c:	ldr	r8, [fp, #4]
   36850:	cmp	r8, #0
   36854:	ble	367b8 <fts_children@@Base+0x4d1c>
   36858:	mov	r2, r8
   3685c:	ldr	r1, [sp, #8]
   36860:	mov	r0, r6
   36864:	bl	33f6c <fts_children@@Base+0x24d0>
   36868:	cmp	r0, #0
   3686c:	beq	36830 <fts_children@@Base+0x4d94>
   36870:	add	r5, r5, #1
   36874:	cmp	r6, r5
   36878:	bgt	367c4 <fts_children@@Base+0x4d28>
   3687c:	cmp	r6, #0
   36880:	ble	36900 <fts_children@@Base+0x4e64>
   36884:	ldr	fp, [sp, #12]
   36888:	mov	r4, #0
   3688c:	add	r8, fp, #8
   36890:	add	r9, fp, #4
   36894:	ldr	r3, [r7, #8]
   36898:	add	r1, sp, #32
   3689c:	ldr	r0, [sp, #28]
   368a0:	ldr	r5, [r3, r4, lsl #2]
   368a4:	mov	r2, r5
   368a8:	bl	33f6c <fts_children@@Base+0x24d0>
   368ac:	cmp	r0, #0
   368b0:	bne	368f4 <fts_children@@Base+0x4e58>
   368b4:	ldr	sl, [fp, #4]
   368b8:	mov	r1, r8
   368bc:	mov	r0, sl
   368c0:	bl	33f6c <fts_children@@Base+0x24d0>
   368c4:	sub	r2, r0, #1
   368c8:	cmp	r2, sl
   368cc:	movlt	r3, #0
   368d0:	movge	r3, #1
   368d4:	orrs	r3, r3, r2, lsr #31
   368d8:	bne	368f4 <fts_children@@Base+0x4e58>
   368dc:	sub	sl, sl, #1
   368e0:	str	sl, [fp, #4]
   368e4:	mov	r1, r8
   368e8:	mov	r0, r9
   368ec:	bl	340fc <fts_children@@Base+0x2660>
   368f0:	ldr	r6, [r7, #4]
   368f4:	add	r4, r4, #1
   368f8:	cmp	r6, r4
   368fc:	bgt	36894 <fts_children@@Base+0x4df8>
   36900:	ldr	r0, [sp, #32]
   36904:	bl	12154 <free@plt>
   36908:	mov	r4, #0
   3690c:	ldr	r3, [pc, #52]	; 36948 <fts_children@@Base+0x4eac>
   36910:	ldr	r2, [sp, #36]	; 0x24
   36914:	mov	r0, r4
   36918:	ldr	r3, [r3]
   3691c:	cmp	r2, r3
   36920:	bne	36944 <fts_children@@Base+0x4ea8>
   36924:	add	sp, sp, #44	; 0x2c
   36928:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3692c:	mov	r4, r0
   36930:	ldr	r0, [sp, #32]
   36934:	bl	12154 <free@plt>
   36938:	b	3690c <fts_children@@Base+0x4e70>
   3693c:	mov	r0, r5
   36940:	b	36904 <fts_children@@Base+0x4e68>
   36944:	bl	12244 <__stack_chk_fail@plt>
   36948:	andeq	fp, r5, r0, ror #24
   3694c:	ldr	r3, [pc, #2800]	; 37444 <fts_children@@Base+0x59a8>
   36950:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36954:	sub	sp, sp, #172	; 0xac
   36958:	ldr	r3, [r3]
   3695c:	mov	fp, r0
   36960:	mov	r0, #11264	; 0x2c00
   36964:	str	r3, [sp, #164]	; 0xa4
   36968:	str	r1, [sp, #16]
   3696c:	bl	123dc <malloc@plt>
   36970:	subs	r3, r0, #0
   36974:	str	r3, [sp, #4]
   36978:	beq	36cd4 <fts_children@@Base+0x5238>
   3697c:	ldr	r4, [sp, #16]
   36980:	mov	sl, #0
   36984:	add	r9, sp, #68	; 0x44
   36988:	mov	r1, sl
   3698c:	str	sl, [r4, #44]	; 0x2c
   36990:	str	sl, [r4, #48]	; 0x30
   36994:	mov	r0, r9
   36998:	mov	r2, #32
   3699c:	bl	12514 <memset@plt>
   369a0:	ldr	r1, [r4, #8]
   369a4:	ldr	r3, [sp, #4]
   369a8:	cmp	r1, sl
   369ac:	add	r3, r3, #3072	; 0xc00
   369b0:	str	r3, [sp, #8]
   369b4:	ble	37314 <fts_children@@Base+0x5878>
   369b8:	str	sl, [sp, #24]
   369bc:	str	fp, [sp, #32]
   369c0:	ldr	r3, [sp, #16]
   369c4:	ldr	r0, [sp, #24]
   369c8:	ldr	r2, [r3, #12]
   369cc:	ldr	r3, [sp, #32]
   369d0:	lsl	ip, r0, #2
   369d4:	ldr	r2, [r2, r0, lsl #2]
   369d8:	ldr	r3, [r3]
   369dc:	ldr	r0, [pc, #2660]	; 37448 <fts_children@@Base+0x59ac>
   369e0:	add	r8, r3, r2, lsl #3
   369e4:	str	ip, [sp, #28]
   369e8:	ldrb	fp, [r8, #4]
   369ec:	ldr	r4, [r8, #4]
   369f0:	cmp	fp, #1
   369f4:	and	r4, r0, r4, lsr #8
   369f8:	beq	36cf4 <fts_children@@Base+0x5258>
   369fc:	cmp	fp, #3
   36a00:	beq	37148 <fts_children@@Base+0x56ac>
   36a04:	cmp	fp, #5
   36a08:	beq	36f70 <fts_children@@Base+0x54d4>
   36a0c:	cmp	fp, #7
   36a10:	beq	37110 <fts_children@@Base+0x5674>
   36a14:	ldr	r3, [sp, #24]
   36a18:	add	r3, r3, #1
   36a1c:	cmp	r3, r1
   36a20:	str	r3, [sp, #24]
   36a24:	blt	369c0 <fts_children@@Base+0x4f24>
   36a28:	cmp	sl, #0
   36a2c:	ldr	fp, [sp, #32]
   36a30:	ble	3742c <fts_children@@Base+0x5990>
   36a34:	add	r3, sl, #1
   36a38:	mov	r5, #0
   36a3c:	lsl	r4, r3, #2
   36a40:	mov	r0, r4
   36a44:	str	r3, [sp, #56]	; 0x38
   36a48:	str	r5, [sp, #60]	; 0x3c
   36a4c:	bl	123dc <malloc@plt>
   36a50:	cmp	r0, r5
   36a54:	lsleq	r3, sl, #1
   36a58:	mov	r6, r0
   36a5c:	str	r0, [sp, #64]	; 0x40
   36a60:	streq	r3, [sp, #12]
   36a64:	beq	37204 <fts_children@@Base+0x5768>
   36a68:	ldr	r3, [pc, #2524]	; 3744c <fts_children@@Base+0x59b0>
   36a6c:	str	r5, [sp, #52]	; 0x34
   36a70:	cmp	sl, r3
   36a74:	lsl	r3, sl, #1
   36a78:	str	r3, [sp, #12]
   36a7c:	bgt	37204 <fts_children@@Base+0x5768>
   36a80:	add	r3, r3, sl
   36a84:	lsl	r3, r3, #2
   36a88:	mov	r0, r3
   36a8c:	str	r3, [sp, #32]
   36a90:	bl	123dc <malloc@plt>
   36a94:	subs	r3, r0, #0
   36a98:	str	r3, [sp, #20]
   36a9c:	beq	37204 <fts_children@@Base+0x5768>
   36aa0:	mov	r1, r5
   36aa4:	mov	r2, #32
   36aa8:	add	r0, sp, #132	; 0x84
   36aac:	bl	12514 <memset@plt>
   36ab0:	ldr	r2, [sp, #20]
   36ab4:	sub	r4, r4, #4
   36ab8:	ldr	r3, [sp, #4]
   36abc:	add	r7, r2, r4
   36ac0:	add	r6, r7, r4
   36ac4:	str	r5, [sp, #28]
   36ac8:	add	r5, r3, #3088	; 0xc10
   36acc:	add	r1, r4, r6
   36ad0:	add	r5, r5, #12
   36ad4:	sub	r8, r2, #4
   36ad8:	mov	r4, r3
   36adc:	str	r7, [sp, #36]	; 0x24
   36ae0:	str	r6, [sp, #44]	; 0x2c
   36ae4:	str	r1, [sp, #24]
   36ae8:	str	r3, [sp, #40]	; 0x28
   36aec:	mov	r3, #0
   36af0:	str	r3, [sp, #60]	; 0x3c
   36af4:	ldr	r0, [r4, #4]
   36af8:	cmp	r0, r3
   36afc:	movgt	r9, #0
   36b00:	ble	36b4c <fts_children@@Base+0x50b0>
   36b04:	ldr	r2, [r4, #8]
   36b08:	ldr	r3, [fp, #12]
   36b0c:	ldr	r2, [r2, r9, lsl #2]
   36b10:	ldr	r1, [r3, r2, lsl #2]
   36b14:	cmn	r1, #1
   36b18:	beq	36b40 <fts_children@@Base+0x50a4>
   36b1c:	ldr	r3, [fp, #24]
   36b20:	add	r1, r1, r1, lsl #1
   36b24:	add	r0, sp, #56	; 0x38
   36b28:	add	r1, r3, r1, lsl #2
   36b2c:	bl	344b8 <fts_children@@Base+0x2a1c>
   36b30:	cmp	r0, #0
   36b34:	str	r0, [sp, #52]	; 0x34
   36b38:	bne	371f8 <fts_children@@Base+0x575c>
   36b3c:	ldr	r0, [r4, #4]
   36b40:	add	r9, r9, #1
   36b44:	cmp	r0, r9
   36b48:	bgt	36b04 <fts_children@@Base+0x5068>
   36b4c:	mov	r3, #0
   36b50:	add	r2, sp, #56	; 0x38
   36b54:	mov	r1, fp
   36b58:	add	r0, sp, #52	; 0x34
   36b5c:	bl	351fc <fts_children@@Base+0x3760>
   36b60:	cmp	r0, #0
   36b64:	str	r0, [r8, #4]!
   36b68:	beq	372c4 <fts_children@@Base+0x5828>
   36b6c:	ldrsb	r3, [r0, #52]	; 0x34
   36b70:	cmp	r3, #0
   36b74:	strge	r0, [r7]
   36b78:	strge	r0, [r6]
   36b7c:	blt	3718c <fts_children@@Base+0x56f0>
   36b80:	add	ip, sp, #132	; 0x84
   36b84:	sub	r1, r5, #32
   36b88:	mov	r2, ip
   36b8c:	ldr	r3, [r1, #4]!
   36b90:	ldr	r0, [r2]
   36b94:	cmp	r5, r1
   36b98:	orr	r3, r3, r0
   36b9c:	str	r3, [r2], #4
   36ba0:	bne	36b8c <fts_children@@Base+0x50f0>
   36ba4:	ldr	r3, [sp, #24]
   36ba8:	add	r6, r6, #4
   36bac:	cmp	r3, r6
   36bb0:	add	r4, r4, #12
   36bb4:	add	r5, r5, #32
   36bb8:	add	r7, r7, #4
   36bbc:	bne	36aec <fts_children@@Base+0x5050>
   36bc0:	ldr	r3, [sp, #28]
   36bc4:	mov	r5, ip
   36bc8:	cmp	r3, #0
   36bcc:	mov	r8, ip
   36bd0:	bne	37370 <fts_children@@Base+0x58d4>
   36bd4:	mov	r1, #256	; 0x100
   36bd8:	mov	r0, #4
   36bdc:	bl	12064 <calloc@plt>
   36be0:	ldr	r3, [sp, #16]
   36be4:	cmp	r0, #0
   36be8:	mov	r7, r0
   36bec:	str	r0, [r3, #44]	; 0x2c
   36bf0:	beq	371f8 <fts_children@@Base+0x575c>
   36bf4:	ldr	ip, [sp, #8]
   36bf8:	ldr	r8, [sp, #20]
   36bfc:	ldr	r9, [sp, #36]	; 0x24
   36c00:	add	r4, fp, #96	; 0x60
   36c04:	mov	lr, r0
   36c08:	add	r6, r0, #1024	; 0x400
   36c0c:	ldr	r3, [r5], #4
   36c10:	cmp	r3, #0
   36c14:	movne	r0, lr
   36c18:	movne	r1, #1
   36c1c:	beq	36c38 <fts_children@@Base+0x519c>
   36c20:	tst	r3, #1
   36c24:	bne	372d4 <fts_children@@Base+0x5838>
   36c28:	lsrs	r3, r3, #1
   36c2c:	lsl	r1, r1, #1
   36c30:	add	r0, r0, #4
   36c34:	bne	36c20 <fts_children@@Base+0x5184>
   36c38:	add	lr, lr, #128	; 0x80
   36c3c:	cmp	r6, lr
   36c40:	add	r4, r4, #4
   36c44:	add	ip, ip, #4
   36c48:	bne	36c0c <fts_children@@Base+0x5170>
   36c4c:	ldr	r3, [sp, #132]	; 0x84
   36c50:	tst	r3, #1024	; 0x400
   36c54:	beq	36c78 <fts_children@@Base+0x51dc>
   36c58:	ldr	r1, [sp, #8]
   36c5c:	mov	r3, #0
   36c60:	ldr	r2, [r1, r3, lsl #5]
   36c64:	tst	r2, #1024	; 0x400
   36c68:	bne	37354 <fts_children@@Base+0x58b8>
   36c6c:	add	r3, r3, #1
   36c70:	cmp	r3, sl
   36c74:	bne	36c60 <fts_children@@Base+0x51c4>
   36c78:	ldr	r0, [sp, #20]
   36c7c:	bl	12154 <free@plt>
   36c80:	ldr	r3, [sp, #4]
   36c84:	ldr	r2, [sp, #32]
   36c88:	ldr	r0, [sp, #64]	; 0x40
   36c8c:	add	r4, r3, r2
   36c90:	bl	12154 <free@plt>
   36c94:	ldr	r5, [sp, #40]	; 0x28
   36c98:	ldr	r0, [r5, #8]
   36c9c:	add	r5, r5, #12
   36ca0:	bl	12154 <free@plt>
   36ca4:	cmp	r4, r5
   36ca8:	bne	36c98 <fts_children@@Base+0x51fc>
   36cac:	ldr	r0, [sp, #4]
   36cb0:	bl	12154 <free@plt>
   36cb4:	mov	r0, #1
   36cb8:	b	36cd8 <fts_children@@Base+0x523c>
   36cbc:	cmp	sl, #0
   36cc0:	str	r0, [r4, #4]
   36cc4:	str	r0, [r4]
   36cc8:	bne	3702c <fts_children@@Base+0x5590>
   36ccc:	ldr	r0, [sp, #4]
   36cd0:	bl	12154 <free@plt>
   36cd4:	mov	r0, #0
   36cd8:	ldr	r3, [pc, #1892]	; 37444 <fts_children@@Base+0x59a8>
   36cdc:	ldr	r2, [sp, #164]	; 0xa4
   36ce0:	ldr	r3, [r3]
   36ce4:	cmp	r2, r3
   36ce8:	bne	37440 <fts_children@@Base+0x59a4>
   36cec:	add	sp, sp, #172	; 0xac
   36cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36cf4:	ldrb	r3, [r3, r2, lsl #3]
   36cf8:	and	r1, r3, #31
   36cfc:	asr	r3, r3, #5
   36d00:	ldr	r2, [r9, r3, lsl #2]
   36d04:	orr	r2, r2, fp, lsl r1
   36d08:	str	r2, [r9, r3, lsl #2]
   36d0c:	cmp	r4, #0
   36d10:	beq	36df0 <fts_children@@Base+0x5354>
   36d14:	tst	r4, #32
   36d18:	bne	36fd8 <fts_children@@Base+0x553c>
   36d1c:	tst	r4, #128	; 0x80
   36d20:	bne	37008 <fts_children@@Base+0x556c>
   36d24:	tst	r4, #4
   36d28:	beq	36d8c <fts_children@@Base+0x52f0>
   36d2c:	cmp	fp, #1
   36d30:	beq	370ec <fts_children@@Base+0x5650>
   36d34:	ldr	r2, [sp, #32]
   36d38:	ldr	r3, [r2, #92]	; 0x5c
   36d3c:	cmp	r3, #1
   36d40:	ble	370b0 <fts_children@@Base+0x5614>
   36d44:	ldr	ip, [r2, #60]	; 0x3c
   36d48:	add	r1, r2, #96	; 0x60
   36d4c:	add	r5, r2, #128	; 0x80
   36d50:	mov	r0, r9
   36d54:	sub	ip, ip, #4
   36d58:	mov	r2, #0
   36d5c:	ldr	r3, [ip, #4]!
   36d60:	ldr	r6, [r1], #4
   36d64:	ldr	lr, [r0]
   36d68:	mvn	r3, r3
   36d6c:	orr	r3, r3, r6
   36d70:	and	r3, r3, lr
   36d74:	cmp	r5, r1
   36d78:	str	r3, [r0], #4
   36d7c:	orr	r2, r2, r3
   36d80:	bne	36d5c <fts_children@@Base+0x52c0>
   36d84:	cmp	r2, #0
   36d88:	beq	36f64 <fts_children@@Base+0x54c8>
   36d8c:	tst	r4, #8
   36d90:	beq	36df0 <fts_children@@Base+0x5354>
   36d94:	cmp	fp, #1
   36d98:	beq	37174 <fts_children@@Base+0x56d8>
   36d9c:	ldr	r2, [sp, #32]
   36da0:	ldr	r3, [r2, #92]	; 0x5c
   36da4:	cmp	r3, #1
   36da8:	ble	37074 <fts_children@@Base+0x55d8>
   36dac:	ldr	ip, [r2, #60]	; 0x3c
   36db0:	add	r1, r2, #96	; 0x60
   36db4:	add	r4, r2, #128	; 0x80
   36db8:	mov	r0, r9
   36dbc:	sub	ip, ip, #4
   36dc0:	mov	r2, #0
   36dc4:	ldr	lr, [r1], #4
   36dc8:	ldr	r5, [ip, #4]!
   36dcc:	ldr	r3, [r0]
   36dd0:	and	lr, lr, r5
   36dd4:	bic	r3, r3, lr
   36dd8:	cmp	r1, r4
   36ddc:	str	r3, [r0], #4
   36de0:	orr	r2, r2, r3
   36de4:	bne	36dc4 <fts_children@@Base+0x5328>
   36de8:	cmp	r2, #0
   36dec:	beq	36f64 <fts_children@@Base+0x54c8>
   36df0:	cmp	sl, #0
   36df4:	ble	3730c <fts_children@@Base+0x5870>
   36df8:	ldr	r3, [sp, #4]
   36dfc:	mov	r5, #0
   36e00:	add	r4, r3, #3088	; 0xc10
   36e04:	add	r4, r4, #12
   36e08:	str	r8, [sp, #20]
   36e0c:	str	fp, [sp, #12]
   36e10:	b	36e4c <fts_children@@Base+0x53b0>
   36e14:	ldr	r3, [sp, #20]
   36e18:	ldr	r1, [sp, #8]
   36e1c:	ldrb	r3, [r3]
   36e20:	and	r2, r3, #31
   36e24:	asr	r3, r3, #5
   36e28:	add	r3, r1, r3, lsl #2
   36e2c:	ldr	r3, [r3, r5, lsl #5]
   36e30:	lsr	r3, r3, r2
   36e34:	tst	r3, #1
   36e38:	bne	36e58 <fts_children@@Base+0x53bc>
   36e3c:	add	r5, r5, #1
   36e40:	cmp	r5, sl
   36e44:	add	r4, r4, #32
   36e48:	bge	36f5c <fts_children@@Base+0x54c0>
   36e4c:	ldr	r3, [sp, #12]
   36e50:	cmp	r3, #1
   36e54:	beq	36e14 <fts_children@@Base+0x5378>
   36e58:	sub	r2, r4, #32
   36e5c:	mov	r0, r2
   36e60:	mov	r1, r9
   36e64:	add	r6, sp, #100	; 0x64
   36e68:	mov	lr, r9
   36e6c:	mov	ip, #0
   36e70:	ldr	r7, [r0, #4]!
   36e74:	ldr	r3, [lr], #4
   36e78:	cmp	r4, r0
   36e7c:	and	r3, r3, r7
   36e80:	str	r3, [r6], #4
   36e84:	orr	ip, ip, r3
   36e88:	bne	36e70 <fts_children@@Base+0x53d4>
   36e8c:	cmp	ip, #0
   36e90:	beq	36e3c <fts_children@@Base+0x53a0>
   36e94:	mov	r6, #0
   36e98:	mov	lr, r6
   36e9c:	add	r7, sp, #132	; 0x84
   36ea0:	ldr	ip, [r2, #4]!
   36ea4:	ldr	r3, [r1]
   36ea8:	cmp	r4, r2
   36eac:	bic	r0, ip, r3
   36eb0:	bic	r3, r3, ip
   36eb4:	str	r0, [r7], #4
   36eb8:	orr	lr, lr, r0
   36ebc:	str	r3, [r1], #4
   36ec0:	orr	r6, r6, r3
   36ec4:	bne	36ea0 <fts_children@@Base+0x5404>
   36ec8:	add	r7, r5, r5, lsl #1
   36ecc:	ldr	r3, [sp, #4]
   36ed0:	cmp	lr, #0
   36ed4:	add	r7, r3, r7, lsl #2
   36ed8:	beq	36f34 <fts_children@@Base+0x5498>
   36edc:	ldr	r2, [sp, #8]
   36ee0:	add	r8, sp, #132	; 0x84
   36ee4:	add	fp, r2, sl, lsl #5
   36ee8:	ldm	r8!, {r0, r1, r2, r3}
   36eec:	add	lr, sp, #100	; 0x64
   36ef0:	sub	ip, r4, #28
   36ef4:	stmia	fp!, {r0, r1, r2, r3}
   36ef8:	ldm	r8, {r0, r1, r2, r3}
   36efc:	lsl	r8, sl, #1
   36f00:	stm	fp, {r0, r1, r2, r3}
   36f04:	add	fp, r8, sl
   36f08:	ldm	lr!, {r0, r1, r2, r3}
   36f0c:	stmia	ip!, {r0, r1, r2, r3}
   36f10:	ldm	lr, {r0, r1, r2, r3}
   36f14:	stm	ip, {r0, r1, r2, r3}
   36f18:	mov	r1, r7
   36f1c:	ldr	r3, [sp, #4]
   36f20:	add	r0, r3, fp, lsl #2
   36f24:	bl	35048 <fts_children@@Base+0x35ac>
   36f28:	cmp	r0, #0
   36f2c:	bne	37184 <fts_children@@Base+0x56e8>
   36f30:	add	sl, sl, #1
   36f34:	ldr	r3, [sp, #16]
   36f38:	ldr	r2, [sp, #28]
   36f3c:	mov	r0, r7
   36f40:	ldr	r3, [r3, #12]
   36f44:	ldr	r1, [r3, r2]
   36f48:	bl	32a54 <fts_children@@Base+0xfb8>
   36f4c:	cmp	r0, #0
   36f50:	beq	37024 <fts_children@@Base+0x5588>
   36f54:	cmp	r6, #0
   36f58:	bne	36e3c <fts_children@@Base+0x53a0>
   36f5c:	cmp	sl, r5
   36f60:	beq	37240 <fts_children@@Base+0x57a4>
   36f64:	ldr	r3, [sp, #16]
   36f68:	ldr	r1, [r3, #8]
   36f6c:	b	36a14 <fts_children@@Base+0x4f78>
   36f70:	ldr	r2, [sp, #32]
   36f74:	ldr	r3, [r2, #92]	; 0x5c
   36f78:	cmp	r3, #1
   36f7c:	ble	37060 <fts_children@@Base+0x55c4>
   36f80:	ldr	r0, [r2, #60]	; 0x3c
   36f84:	mov	r1, r9
   36f88:	sub	r2, r0, #4
   36f8c:	add	r0, r0, #28
   36f90:	ldr	r3, [r2, #4]!
   36f94:	ldr	ip, [r1]
   36f98:	cmp	r0, r2
   36f9c:	orr	r3, r3, ip
   36fa0:	str	r3, [r1], #4
   36fa4:	bne	36f90 <fts_children@@Base+0x54f4>
   36fa8:	ldr	r3, [sp, #32]
   36fac:	ldr	r3, [r3, #128]	; 0x80
   36fb0:	tst	r3, #64	; 0x40
   36fb4:	ldreq	r2, [sp, #68]	; 0x44
   36fb8:	biceq	r2, r2, #1024	; 0x400
   36fbc:	streq	r2, [sp, #68]	; 0x44
   36fc0:	tst	r3, #128	; 0x80
   36fc4:	beq	36d0c <fts_children@@Base+0x5270>
   36fc8:	ldr	r3, [sp, #68]	; 0x44
   36fcc:	bic	r3, r3, #1
   36fd0:	str	r3, [sp, #68]	; 0x44
   36fd4:	b	36d0c <fts_children@@Base+0x5270>
   36fd8:	mov	r2, #32
   36fdc:	mov	r1, #0
   36fe0:	mov	r0, r9
   36fe4:	ldr	r5, [sp, #68]	; 0x44
   36fe8:	bl	12514 <memset@plt>
   36fec:	and	r5, r5, #1024	; 0x400
   36ff0:	cmp	r5, #0
   36ff4:	movne	r3, #1024	; 0x400
   36ff8:	strne	r3, [sp, #68]	; 0x44
   36ffc:	beq	36f64 <fts_children@@Base+0x54c8>
   37000:	tst	r4, #128	; 0x80
   37004:	beq	36d24 <fts_children@@Base+0x5288>
   37008:	mov	r1, #0
   3700c:	mov	r2, #32
   37010:	mov	r0, r9
   37014:	bl	12514 <memset@plt>
   37018:	ldr	r3, [sp, #16]
   3701c:	ldr	r1, [r3, #8]
   37020:	b	36a14 <fts_children@@Base+0x4f78>
   37024:	lsl	r3, sl, #1
   37028:	str	r3, [sp, #12]
   3702c:	ldr	r3, [sp, #12]
   37030:	add	fp, r3, sl
   37034:	ldr	r3, [sp, #4]
   37038:	mov	r4, r3
   3703c:	add	fp, r3, fp, lsl #2
   37040:	ldr	r0, [r4, #8]
   37044:	add	r4, r4, #12
   37048:	bl	12154 <free@plt>
   3704c:	cmp	fp, r4
   37050:	bne	37040 <fts_children@@Base+0x55a4>
   37054:	ldr	r0, [sp, #4]
   37058:	bl	12154 <free@plt>
   3705c:	b	36cd4 <fts_children@@Base+0x5238>
   37060:	mov	r2, #32
   37064:	mvn	r1, #0
   37068:	mov	r0, r9
   3706c:	bl	12514 <memset@plt>
   37070:	b	36fa8 <fts_children@@Base+0x550c>
   37074:	ldr	r3, [sp, #32]
   37078:	mov	r0, r9
   3707c:	add	r1, r3, #96	; 0x60
   37080:	add	ip, r3, #128	; 0x80
   37084:	mov	r2, #0
   37088:	ldr	r3, [r0]
   3708c:	ldr	lr, [r1], #4
   37090:	bic	r3, r3, lr
   37094:	cmp	ip, r1
   37098:	str	r3, [r0], #4
   3709c:	orr	r2, r2, r3
   370a0:	bne	37088 <fts_children@@Base+0x55ec>
   370a4:	cmp	r2, #0
   370a8:	beq	36f64 <fts_children@@Base+0x54c8>
   370ac:	b	36df0 <fts_children@@Base+0x5354>
   370b0:	ldr	r3, [sp, #32]
   370b4:	mov	r0, r9
   370b8:	add	r1, r3, #96	; 0x60
   370bc:	add	lr, r3, #128	; 0x80
   370c0:	mov	r2, #0
   370c4:	ldr	r3, [r0]
   370c8:	ldr	ip, [r1], #4
   370cc:	and	r3, r3, ip
   370d0:	cmp	lr, r1
   370d4:	str	r3, [r0], #4
   370d8:	orr	r2, r2, r3
   370dc:	bne	370c4 <fts_children@@Base+0x5628>
   370e0:	cmp	r2, #0
   370e4:	bne	36d8c <fts_children@@Base+0x52f0>
   370e8:	b	36f64 <fts_children@@Base+0x54c8>
   370ec:	ldrb	r1, [r8, #6]
   370f0:	ands	r1, r1, #64	; 0x40
   370f4:	bne	36d34 <fts_children@@Base+0x5298>
   370f8:	mov	r2, #32
   370fc:	mov	r0, r9
   37100:	bl	12514 <memset@plt>
   37104:	ldr	r3, [sp, #16]
   37108:	ldr	r1, [r3, #8]
   3710c:	b	36a14 <fts_children@@Base+0x4f78>
   37110:	ldr	r3, [sp, #32]
   37114:	ldr	r2, [r3, #128]	; 0x80
   37118:	mvn	r3, #0
   3711c:	tst	r2, #64	; 0x40
   37120:	str	r3, [r9]
   37124:	str	r3, [r9, #4]
   37128:	str	r3, [r9, #8]
   3712c:	str	r3, [r9, #12]
   37130:	ldreq	r3, [sp, #68]	; 0x44
   37134:	biceq	r3, r3, #1024	; 0x400
   37138:	streq	r3, [sp, #68]	; 0x44
   3713c:	tst	r2, #128	; 0x80
   37140:	beq	36d0c <fts_children@@Base+0x5270>
   37144:	b	36fc8 <fts_children@@Base+0x552c>
   37148:	ldr	r0, [r3, r2, lsl #3]
   3714c:	mov	r1, r9
   37150:	sub	r2, r0, #4
   37154:	add	r0, r0, #28
   37158:	ldr	r3, [r2, #4]!
   3715c:	ldr	ip, [r1]
   37160:	cmp	r0, r2
   37164:	orr	r3, r3, ip
   37168:	str	r3, [r1], #4
   3716c:	bne	37158 <fts_children@@Base+0x56bc>
   37170:	b	36d0c <fts_children@@Base+0x5270>
   37174:	ldrb	r3, [r8, #6]
   37178:	tst	r3, #64	; 0x40
   3717c:	beq	36d9c <fts_children@@Base+0x5300>
   37180:	b	37008 <fts_children@@Base+0x556c>
   37184:	str	r8, [sp, #12]
   37188:	b	3702c <fts_children@@Base+0x5590>
   3718c:	mov	r3, #1
   37190:	add	r2, sp, #56	; 0x38
   37194:	mov	r1, fp
   37198:	add	r0, sp, #52	; 0x34
   3719c:	bl	351fc <fts_children@@Base+0x3760>
   371a0:	cmp	r0, #0
   371a4:	str	r0, [r7]
   371a8:	beq	3733c <fts_children@@Base+0x58a0>
   371ac:	ldr	r3, [r8]
   371b0:	cmp	r0, r3
   371b4:	beq	371cc <fts_children@@Base+0x5730>
   371b8:	ldr	r3, [fp, #92]	; 0x5c
   371bc:	cmp	r3, #2
   371c0:	ldr	r3, [sp, #28]
   371c4:	movge	r3, #1
   371c8:	str	r3, [sp, #28]
   371cc:	mov	r3, #2
   371d0:	add	r2, sp, #56	; 0x38
   371d4:	mov	r1, fp
   371d8:	add	r0, sp, #52	; 0x34
   371dc:	bl	351fc <fts_children@@Base+0x3760>
   371e0:	cmp	r0, #0
   371e4:	str	r0, [r6]
   371e8:	bne	36b80 <fts_children@@Base+0x50e4>
   371ec:	ldr	r3, [sp, #52]	; 0x34
   371f0:	cmp	r3, #0
   371f4:	beq	36b80 <fts_children@@Base+0x50e4>
   371f8:	ldr	r0, [sp, #20]
   371fc:	bl	12154 <free@plt>
   37200:	ldr	r6, [sp, #64]	; 0x40
   37204:	mov	r0, r6
   37208:	bl	12154 <free@plt>
   3720c:	ldr	r3, [sp, #12]
   37210:	add	fp, r3, sl
   37214:	ldr	r3, [sp, #4]
   37218:	mov	r4, r3
   3721c:	add	fp, r3, fp, lsl #2
   37220:	ldr	r0, [r4, #8]
   37224:	add	r4, r4, #12
   37228:	bl	12154 <free@plt>
   3722c:	cmp	r4, fp
   37230:	bne	37220 <fts_children@@Base+0x5784>
   37234:	ldr	r0, [sp, #4]
   37238:	bl	12154 <free@plt>
   3723c:	b	36cd4 <fts_children@@Base+0x5238>
   37240:	ldr	r3, [sp, #8]
   37244:	mov	r4, r9
   37248:	add	ip, r3, sl, lsl #5
   3724c:	ldm	r4!, {r0, r1, r2, r3}
   37250:	lsl	lr, sl, #1
   37254:	ldr	r6, [sp, #4]
   37258:	str	lr, [sp, #12]
   3725c:	stmia	ip!, {r0, r1, r2, r3}
   37260:	add	lr, lr, sl
   37264:	ldm	r4, {r0, r1, r2, r3}
   37268:	add	r4, r6, lr, lsl #2
   3726c:	stm	ip, {r0, r1, r2, r3}
   37270:	mov	r3, #1
   37274:	ldr	r2, [sp, #16]
   37278:	ldr	r1, [sp, #28]
   3727c:	mov	r0, #4
   37280:	ldr	r2, [r2, #12]
   37284:	ldr	r5, [r2, r1]
   37288:	str	r3, [r6, lr, lsl #2]
   3728c:	str	r3, [r4, #4]
   37290:	bl	123dc <malloc@plt>
   37294:	cmp	r0, #0
   37298:	str	r0, [r4, #8]
   3729c:	beq	36cbc <fts_children@@Base+0x5220>
   372a0:	mov	r1, #0
   372a4:	str	r5, [r0]
   372a8:	mov	r2, #32
   372ac:	mov	r0, r9
   372b0:	bl	12514 <memset@plt>
   372b4:	ldr	r3, [sp, #16]
   372b8:	add	sl, sl, #1
   372bc:	ldr	r1, [r3, #8]
   372c0:	b	36a14 <fts_children@@Base+0x4f78>
   372c4:	ldr	r3, [sp, #52]	; 0x34
   372c8:	cmp	r3, #0
   372cc:	beq	36b6c <fts_children@@Base+0x50d0>
   372d0:	b	371f8 <fts_children@@Base+0x575c>
   372d4:	ldr	r2, [ip]
   372d8:	ands	r2, r1, r2
   372dc:	bne	3734c <fts_children@@Base+0x58b0>
   372e0:	add	r2, r2, #1
   372e4:	ldr	fp, [ip, r2, lsl #5]
   372e8:	tst	r1, fp
   372ec:	beq	372e0 <fts_children@@Base+0x5844>
   372f0:	lsl	r2, r2, #2
   372f4:	ldr	fp, [r4]
   372f8:	tst	r1, fp
   372fc:	ldrne	r2, [r9, r2]
   37300:	ldreq	r2, [r8, r2]
   37304:	str	r2, [r0]
   37308:	b	36c28 <fts_children@@Base+0x518c>
   3730c:	mov	r5, #0
   37310:	b	36f5c <fts_children@@Base+0x54c0>
   37314:	ldr	r0, [sp, #4]
   37318:	bl	12154 <free@plt>
   3731c:	mov	r1, #256	; 0x100
   37320:	mov	r0, #4
   37324:	bl	12064 <calloc@plt>
   37328:	ldr	r3, [sp, #16]
   3732c:	str	r0, [r3, #44]	; 0x2c
   37330:	adds	r0, r0, #0
   37334:	movne	r0, #1
   37338:	b	36cd8 <fts_children@@Base+0x523c>
   3733c:	ldr	r3, [sp, #52]	; 0x34
   37340:	cmp	r3, #0
   37344:	beq	371ac <fts_children@@Base+0x5710>
   37348:	b	371f8 <fts_children@@Base+0x575c>
   3734c:	mov	r2, #0
   37350:	b	372f4 <fts_children@@Base+0x5858>
   37354:	ldr	r2, [sp, #44]	; 0x2c
   37358:	ldr	r3, [r2, r3, lsl #2]
   3735c:	ldr	r2, [sp, #28]
   37360:	str	r3, [r7, #40]	; 0x28
   37364:	cmp	r2, #0
   37368:	strne	r3, [r7, #1064]	; 0x428
   3736c:	b	36c78 <fts_children@@Base+0x51dc>
   37370:	mov	r1, #512	; 0x200
   37374:	mov	r0, #4
   37378:	bl	12064 <calloc@plt>
   3737c:	ldr	r3, [sp, #16]
   37380:	cmp	r0, #0
   37384:	mov	r7, r0
   37388:	str	r0, [r3, #48]	; 0x30
   3738c:	beq	371f8 <fts_children@@Base+0x575c>
   37390:	ldr	ip, [sp, #8]
   37394:	ldr	lr, [sp, #20]
   37398:	ldr	r6, [sp, #36]	; 0x24
   3739c:	mov	r4, r0
   373a0:	add	r5, r0, #1024	; 0x400
   373a4:	ldr	r3, [r8], #4
   373a8:	cmp	r3, #0
   373ac:	movne	r0, r4
   373b0:	movne	r1, #1
   373b4:	beq	373d0 <fts_children@@Base+0x5934>
   373b8:	tst	r3, #1
   373bc:	bne	373e4 <fts_children@@Base+0x5948>
   373c0:	lsrs	r3, r3, #1
   373c4:	lsl	r1, r1, #1
   373c8:	add	r0, r0, #4
   373cc:	bne	373b8 <fts_children@@Base+0x591c>
   373d0:	add	r4, r4, #128	; 0x80
   373d4:	cmp	r5, r4
   373d8:	add	ip, ip, #4
   373dc:	bne	373a4 <fts_children@@Base+0x5908>
   373e0:	b	36c4c <fts_children@@Base+0x51b0>
   373e4:	ldr	r2, [ip]
   373e8:	ands	r2, r1, r2
   373ec:	bne	37420 <fts_children@@Base+0x5984>
   373f0:	add	r2, r2, #1
   373f4:	ldr	r9, [ip, r2, lsl #5]
   373f8:	tst	r1, r9
   373fc:	beq	373f0 <fts_children@@Base+0x5954>
   37400:	lsl	r2, r2, #2
   37404:	add	r9, lr, r2
   37408:	add	r2, r6, r2
   3740c:	ldr	r9, [r9]
   37410:	str	r9, [r0]
   37414:	ldr	r2, [r2]
   37418:	str	r2, [r0, #1024]	; 0x400
   3741c:	b	373c0 <fts_children@@Base+0x5924>
   37420:	mov	r2, r6
   37424:	mov	r9, lr
   37428:	b	3740c <fts_children@@Base+0x5970>
   3742c:	ldr	r0, [sp, #4]
   37430:	bl	12154 <free@plt>
   37434:	cmp	sl, #0
   37438:	beq	3731c <fts_children@@Base+0x5880>
   3743c:	b	36cd4 <fts_children@@Base+0x5238>
   37440:	bl	12244 <__stack_chk_fail@plt>
   37444:	andeq	fp, r5, r0, ror #24
   37448:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   3744c:	ldrbne	r5, [r5, #-426]	; 0xfffffe56
   37450:	ldrb	r2, [r1, #24]
   37454:	cmp	r2, #16
   37458:	bne	37478 <fts_children@@Base+0x59dc>
   3745c:	ldr	r3, [r1, #4]
   37460:	mov	r0, #0
   37464:	ldr	r2, [r3, #12]
   37468:	ldr	r3, [r3, #28]
   3746c:	str	r2, [r1, #12]
   37470:	str	r3, [r1, #28]
   37474:	bx	lr
   37478:	push	{r4, r5, r6, lr}
   3747c:	add	r3, r1, #20
   37480:	mov	r4, r1
   37484:	mov	r5, r0
   37488:	str	r1, [r4, #12]
   3748c:	ldm	r3, {r1, r2}
   37490:	bl	33694 <fts_children@@Base+0x1bf8>
   37494:	cmn	r0, #1
   37498:	str	r0, [r4, #28]
   3749c:	beq	374e4 <fts_children@@Base+0x5a48>
   374a0:	ldrb	r3, [r4, #24]
   374a4:	cmp	r3, #12
   374a8:	beq	374b4 <fts_children@@Base+0x5a18>
   374ac:	mov	r0, #0
   374b0:	pop	{r4, r5, r6, pc}
   374b4:	ldr	r1, [r5]
   374b8:	ldr	r2, [r4, #20]
   374bc:	add	r1, r1, r0, lsl #3
   374c0:	mov	r0, #0
   374c4:	ldr	r3, [r1, #4]
   374c8:	lsl	r2, r2, #22
   374cc:	bic	r3, r3, #261120	; 0x3fc00
   374d0:	lsr	r2, r2, #22
   374d4:	bic	r3, r3, #768	; 0x300
   374d8:	orr	r3, r3, r2, lsl #8
   374dc:	str	r3, [r1, #4]
   374e0:	pop	{r4, r5, r6, pc}
   374e4:	mov	r0, #12
   374e8:	pop	{r4, r5, r6, pc}
   374ec:	push	{r4, r5, r6, r7, r8, lr}
   374f0:	mov	r6, r0
   374f4:	ldr	r0, [r0]
   374f8:	cmp	r0, #0
   374fc:	beq	37530 <fts_children@@Base+0x5a94>
   37500:	ldr	r3, [r6, #8]
   37504:	cmp	r3, #0
   37508:	beq	37530 <fts_children@@Base+0x5a94>
   3750c:	mov	r4, #0
   37510:	b	37518 <fts_children@@Base+0x5a7c>
   37514:	ldr	r0, [r6]
   37518:	add	r0, r0, r4, lsl #3
   3751c:	bl	33650 <fts_children@@Base+0x1bb4>
   37520:	ldr	r3, [r6, #8]
   37524:	add	r4, r4, #1
   37528:	cmp	r3, r4
   3752c:	bhi	37514 <fts_children@@Base+0x5a78>
   37530:	ldr	r0, [r6, #12]
   37534:	bl	12154 <free@plt>
   37538:	ldr	r3, [r6, #8]
   3753c:	cmp	r3, #0
   37540:	movne	r4, #0
   37544:	movne	r5, r4
   37548:	beq	375a8 <fts_children@@Base+0x5b0c>
   3754c:	ldr	r3, [r6, #24]
   37550:	add	r5, r5, #1
   37554:	cmp	r3, #0
   37558:	add	r2, r3, r4
   3755c:	beq	37568 <fts_children@@Base+0x5acc>
   37560:	ldr	r0, [r2, #8]
   37564:	bl	12154 <free@plt>
   37568:	ldr	r3, [r6, #28]
   3756c:	cmp	r3, #0
   37570:	add	r2, r3, r4
   37574:	beq	37580 <fts_children@@Base+0x5ae4>
   37578:	ldr	r0, [r2, #8]
   3757c:	bl	12154 <free@plt>
   37580:	ldr	r3, [r6, #20]
   37584:	cmp	r3, #0
   37588:	add	r2, r3, r4
   3758c:	beq	37598 <fts_children@@Base+0x5afc>
   37590:	ldr	r0, [r2, #8]
   37594:	bl	12154 <free@plt>
   37598:	ldr	r3, [r6, #8]
   3759c:	add	r4, r4, #12
   375a0:	cmp	r3, r5
   375a4:	bhi	3754c <fts_children@@Base+0x5ab0>
   375a8:	ldr	r0, [r6, #20]
   375ac:	bl	12154 <free@plt>
   375b0:	ldr	r0, [r6, #24]
   375b4:	bl	12154 <free@plt>
   375b8:	ldr	r0, [r6, #28]
   375bc:	bl	12154 <free@plt>
   375c0:	ldr	r0, [r6]
   375c4:	bl	12154 <free@plt>
   375c8:	ldr	r0, [r6, #32]
   375cc:	cmp	r0, #0
   375d0:	movne	r7, #0
   375d4:	beq	3762c <fts_children@@Base+0x5b90>
   375d8:	add	r5, r7, r7, lsl #1
   375dc:	ldr	r3, [r0, r5, lsl #2]
   375e0:	add	r5, r0, r5, lsl #2
   375e4:	cmp	r3, #0
   375e8:	movgt	r4, #0
   375ec:	ble	3760c <fts_children@@Base+0x5b70>
   375f0:	ldr	r3, [r5, #8]
   375f4:	ldr	r0, [r3, r4, lsl #2]
   375f8:	bl	33b80 <fts_children@@Base+0x20e4>
   375fc:	ldr	r3, [r5]
   37600:	add	r4, r4, #1
   37604:	cmp	r4, r3
   37608:	blt	375f0 <fts_children@@Base+0x5b54>
   3760c:	ldr	r0, [r5, #8]
   37610:	bl	12154 <free@plt>
   37614:	ldr	r3, [r6, #68]	; 0x44
   37618:	add	r7, r7, #1
   3761c:	cmp	r3, r7
   37620:	ldrcs	r0, [r6, #32]
   37624:	bcs	375d8 <fts_children@@Base+0x5b3c>
   37628:	ldr	r0, [r6, #32]
   3762c:	bl	12154 <free@plt>
   37630:	ldr	r0, [r6, #60]	; 0x3c
   37634:	ldr	r3, [pc, #28]	; 37658 <fts_children@@Base+0x5bbc>
   37638:	cmp	r0, r3
   3763c:	beq	37644 <fts_children@@Base+0x5ba8>
   37640:	bl	12154 <free@plt>
   37644:	ldr	r0, [r6, #132]	; 0x84
   37648:	bl	12154 <free@plt>
   3764c:	mov	r0, r6
   37650:	pop	{r4, r5, r6, r7, r8, lr}
   37654:	b	12154 <free@plt>
   37658:	andeq	sl, r4, ip, lsr #15
   3765c:	ldr	r3, [r0]
   37660:	push	{r4, r5, r6, lr}
   37664:	cmp	r3, #0
   37668:	mov	r5, r0
   3766c:	ble	376ac <fts_children@@Base+0x5c10>
   37670:	mov	r4, #0
   37674:	mov	r6, r4
   37678:	ldr	r3, [r5, #8]
   3767c:	add	r6, r6, #1
   37680:	add	r3, r3, r4
   37684:	ldr	r0, [r3, #20]
   37688:	bl	12154 <free@plt>
   3768c:	ldr	r3, [r5, #8]
   37690:	add	r3, r3, r4
   37694:	add	r4, r4, #24
   37698:	ldr	r0, [r3, #8]
   3769c:	bl	12154 <free@plt>
   376a0:	ldr	r3, [r5]
   376a4:	cmp	r6, r3
   376a8:	blt	37678 <fts_children@@Base+0x5bdc>
   376ac:	ldr	r0, [r5, #8]
   376b0:	pop	{r4, r5, r6, lr}
   376b4:	b	12154 <free@plt>
   376b8:	push	{r4, r5, r6, lr}
   376bc:	mov	r6, r1
   376c0:	ldr	r1, [r0]
   376c4:	ldr	r5, [sp, #20]
   376c8:	sub	r1, r1, #1
   376cc:	cmp	r1, #0
   376d0:	str	r1, [r0]
   376d4:	blt	37738 <fts_children@@Base+0x5c9c>
   376d8:	add	r1, r1, r1, lsl #1
   376dc:	ldr	r0, [r6]
   376e0:	lsl	r4, r1, #3
   376e4:	mov	ip, r2
   376e8:	add	r1, r0, r4
   376ec:	ldr	r0, [r0, r4]
   376f0:	lsl	r2, r3, #3
   376f4:	ldr	r1, [r1, #8]
   376f8:	str	r0, [ip]
   376fc:	ldr	r0, [sp, #16]
   37700:	bl	121a8 <memcpy@plt>
   37704:	ldr	r0, [r5, #8]
   37708:	bl	12154 <free@plt>
   3770c:	ldr	r3, [r6]
   37710:	add	r3, r3, r4
   37714:	ldr	r0, [r3, #8]
   37718:	bl	12154 <free@plt>
   3771c:	ldr	r1, [r6]
   37720:	add	r4, r1, r4
   37724:	add	r3, r4, #12
   37728:	ldm	r3, {r0, r1, r2}
   3772c:	stm	r5, {r0, r1, r2}
   37730:	ldr	r0, [r4, #4]
   37734:	pop	{r4, r5, r6, pc}
   37738:	ldr	r3, [pc, #12]	; 3774c <fts_children@@Base+0x5cb0>
   3773c:	ldr	r2, [pc, #12]	; 37750 <fts_children@@Base+0x5cb4>
   37740:	ldr	r1, [pc, #12]	; 37754 <fts_children@@Base+0x5cb8>
   37744:	ldr	r0, [pc, #12]	; 37758 <fts_children@@Base+0x5cbc>
   37748:	bl	1279c <__assert_fail@plt>
   3774c:	andeq	sl, r4, ip, asr #15
   37750:	andeq	r0, r0, r3, asr r5
   37754:	andeq	sl, r4, r0, asr #20
   37758:	andeq	sl, r4, ip, asr #20
   3775c:	push	{r4, r5, r6, lr}
   37760:	mov	r5, r0
   37764:	mov	r0, r1
   37768:	mov	r4, r1
   3776c:	bl	1249c <strlen@plt>
   37770:	cmp	r0, #1
   37774:	moveq	r1, #0
   37778:	ldrbeq	r3, [r4]
   3777c:	movne	r1, #3
   37780:	andeq	ip, r3, #31
   37784:	asreq	r3, r3, #5
   37788:	ldreq	r2, [r5, r3, lsl #2]
   3778c:	orreq	r2, r2, r0, lsl ip
   37790:	mov	r0, r1
   37794:	streq	r2, [r5, r3, lsl #2]
   37798:	pop	{r4, r5, r6, pc}
   3779c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   377a0:	mov	r6, r0
   377a4:	ldr	ip, [sp, #40]	; 0x28
   377a8:	mov	r5, r1
   377ac:	tst	ip, #4194304	; 0x400000
   377b0:	mov	sl, r2
   377b4:	mov	r7, r3
   377b8:	ldr	r9, [sp, #32]
   377bc:	beq	377dc <fts_children@@Base+0x5d40>
   377c0:	ldr	r1, [pc, #1936]	; 37f58 <fts_children@@Base+0x64bc>
   377c4:	ldr	r0, [sp, #36]	; 0x24
   377c8:	bl	120dc <strcmp@plt>
   377cc:	cmp	r0, #0
   377d0:	bne	378bc <fts_children@@Base+0x5e20>
   377d4:	ldr	r3, [pc, #1920]	; 37f5c <fts_children@@Base+0x64c0>
   377d8:	str	r3, [sp, #36]	; 0x24
   377dc:	ldr	r4, [r7]
   377e0:	ldr	r3, [r9]
   377e4:	ldr	r8, [sl]
   377e8:	cmp	r3, r4
   377ec:	beq	37994 <fts_children@@Base+0x5ef8>
   377f0:	add	r3, r4, #1
   377f4:	str	r3, [r7]
   377f8:	ldr	r0, [sp, #36]	; 0x24
   377fc:	bl	1207c <wctype@plt>
   37800:	ldr	r1, [pc, #1880]	; 37f60 <fts_children@@Base+0x64c4>
   37804:	str	r0, [r8, r4, lsl #2]
   37808:	ldr	r0, [sp, #36]	; 0x24
   3780c:	bl	120dc <strcmp@plt>
   37810:	subs	r4, r0, #0
   37814:	beq	37874 <fts_children@@Base+0x5dd8>
   37818:	ldr	r1, [pc, #1860]	; 37f64 <fts_children@@Base+0x64c8>
   3781c:	ldr	r0, [sp, #36]	; 0x24
   37820:	bl	120dc <strcmp@plt>
   37824:	subs	r4, r0, #0
   37828:	bne	378e0 <fts_children@@Base+0x5e44>
   3782c:	bl	12460 <__ctype_b_loc@plt>
   37830:	cmp	r6, #0
   37834:	moveq	ip, #1
   37838:	ldr	r3, [r0]
   3783c:	sub	r3, r3, #2
   37840:	bne	37aac <fts_children@@Base+0x6010>
   37844:	ldrh	r2, [r3, #2]!
   37848:	asr	r1, r4, #5
   3784c:	and	r0, r4, #31
   37850:	tst	r2, #2
   37854:	add	r4, r4, #1
   37858:	ldrne	r2, [r5, r1, lsl #2]
   3785c:	orrne	r2, r2, ip, lsl r0
   37860:	strne	r2, [r5, r1, lsl #2]
   37864:	cmp	r4, #256	; 0x100
   37868:	bne	37844 <fts_children@@Base+0x5da8>
   3786c:	mov	r0, #0
   37870:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37874:	bl	12460 <__ctype_b_loc@plt>
   37878:	cmp	r6, #0
   3787c:	moveq	lr, #1
   37880:	ldr	r3, [r0]
   37884:	sub	r3, r3, #2
   37888:	bne	37a70 <fts_children@@Base+0x5fd4>
   3788c:	ldrh	r0, [r3, #2]!
   37890:	asr	r2, r4, #5
   37894:	and	ip, r4, #31
   37898:	tst	r0, #8
   3789c:	add	r4, r4, #1
   378a0:	ldrne	r1, [r5, r2, lsl #2]
   378a4:	orrne	r1, r1, lr, lsl ip
   378a8:	strne	r1, [r5, r2, lsl #2]
   378ac:	cmp	r4, #256	; 0x100
   378b0:	bne	3788c <fts_children@@Base+0x5df0>
   378b4:	mov	r0, #0
   378b8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   378bc:	ldr	r0, [sp, #36]	; 0x24
   378c0:	ldr	r1, [pc, #1696]	; 37f68 <fts_children@@Base+0x64cc>
   378c4:	bl	120dc <strcmp@plt>
   378c8:	ldr	r3, [pc, #1676]	; 37f5c <fts_children@@Base+0x64c0>
   378cc:	ldr	r2, [sp, #36]	; 0x24
   378d0:	cmp	r0, #0
   378d4:	moveq	r2, r3
   378d8:	str	r2, [sp, #36]	; 0x24
   378dc:	b	377dc <fts_children@@Base+0x5d40>
   378e0:	ldr	r1, [pc, #1664]	; 37f68 <fts_children@@Base+0x64cc>
   378e4:	ldr	r0, [sp, #36]	; 0x24
   378e8:	bl	120dc <strcmp@plt>
   378ec:	subs	r4, r0, #0
   378f0:	beq	3794c <fts_children@@Base+0x5eb0>
   378f4:	ldr	r1, [pc, #1648]	; 37f6c <fts_children@@Base+0x64d0>
   378f8:	ldr	r0, [sp, #36]	; 0x24
   378fc:	bl	120dc <strcmp@plt>
   37900:	subs	r4, r0, #0
   37904:	bne	379c0 <fts_children@@Base+0x5f24>
   37908:	bl	12460 <__ctype_b_loc@plt>
   3790c:	cmp	r6, #0
   37910:	moveq	ip, #1
   37914:	ldr	r3, [r0]
   37918:	sub	r3, r3, #2
   3791c:	bne	37c18 <fts_children@@Base+0x617c>
   37920:	ldrh	r2, [r3, #2]!
   37924:	asr	r1, r4, #5
   37928:	and	r0, r4, #31
   3792c:	tst	r2, #8192	; 0x2000
   37930:	add	r4, r4, #1
   37934:	ldrne	r2, [r5, r1, lsl #2]
   37938:	orrne	r2, r2, ip, lsl r0
   3793c:	strne	r2, [r5, r1, lsl #2]
   37940:	cmp	r4, #256	; 0x100
   37944:	bne	37920 <fts_children@@Base+0x5e84>
   37948:	b	3786c <fts_children@@Base+0x5dd0>
   3794c:	bl	12460 <__ctype_b_loc@plt>
   37950:	cmp	r6, #0
   37954:	moveq	ip, #1
   37958:	ldr	r3, [r0]
   3795c:	sub	r3, r3, #2
   37960:	bne	37b40 <fts_children@@Base+0x60a4>
   37964:	ldrh	r2, [r3, #2]!
   37968:	asr	r1, r4, #5
   3796c:	and	r0, r4, #31
   37970:	tst	r2, #512	; 0x200
   37974:	add	r4, r4, #1
   37978:	ldrne	r2, [r5, r1, lsl #2]
   3797c:	orrne	r2, r2, ip, lsl r0
   37980:	strne	r2, [r5, r1, lsl #2]
   37984:	cmp	r4, #256	; 0x100
   37988:	bne	37964 <fts_children@@Base+0x5ec8>
   3798c:	mov	r0, #0
   37990:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37994:	lsl	r4, r4, #1
   37998:	add	r4, r4, #1
   3799c:	mov	r0, r8
   379a0:	lsl	r1, r4, #2
   379a4:	bl	12268 <realloc@plt>
   379a8:	subs	r8, r0, #0
   379ac:	beq	37b7c <fts_children@@Base+0x60e0>
   379b0:	str	r8, [sl]
   379b4:	str	r4, [r9]
   379b8:	ldr	r4, [r7]
   379bc:	b	377f0 <fts_children@@Base+0x5d54>
   379c0:	ldr	r1, [pc, #1428]	; 37f5c <fts_children@@Base+0x64c0>
   379c4:	ldr	r0, [sp, #36]	; 0x24
   379c8:	bl	120dc <strcmp@plt>
   379cc:	subs	r4, r0, #0
   379d0:	beq	37a2c <fts_children@@Base+0x5f90>
   379d4:	ldr	r1, [pc, #1428]	; 37f70 <fts_children@@Base+0x64d4>
   379d8:	ldr	r0, [sp, #36]	; 0x24
   379dc:	bl	120dc <strcmp@plt>
   379e0:	subs	r4, r0, #0
   379e4:	bne	37ae8 <fts_children@@Base+0x604c>
   379e8:	bl	12460 <__ctype_b_loc@plt>
   379ec:	cmp	r6, #0
   379f0:	moveq	ip, #1
   379f4:	ldr	r3, [r0]
   379f8:	sub	r3, r3, #2
   379fc:	bne	37db8 <fts_children@@Base+0x631c>
   37a00:	ldrh	r1, [r3, #2]!
   37a04:	asr	r2, r4, #5
   37a08:	and	r0, r4, #31
   37a0c:	tst	r1, #2048	; 0x800
   37a10:	add	r4, r4, #1
   37a14:	ldrne	r1, [r5, r2, lsl #2]
   37a18:	orrne	r1, r1, ip, lsl r0
   37a1c:	strne	r1, [r5, r2, lsl #2]
   37a20:	cmp	r4, #256	; 0x100
   37a24:	bne	37a00 <fts_children@@Base+0x5f64>
   37a28:	b	3786c <fts_children@@Base+0x5dd0>
   37a2c:	bl	12460 <__ctype_b_loc@plt>
   37a30:	cmp	r6, #0
   37a34:	moveq	ip, #1
   37a38:	ldr	r3, [r0]
   37a3c:	sub	r3, r3, #2
   37a40:	bne	37bdc <fts_children@@Base+0x6140>
   37a44:	ldrh	r2, [r3, #2]!
   37a48:	asr	r1, r4, #5
   37a4c:	and	r0, r4, #31
   37a50:	tst	r2, #1024	; 0x400
   37a54:	add	r4, r4, #1
   37a58:	ldrne	r2, [r5, r1, lsl #2]
   37a5c:	orrne	r2, r2, ip, lsl r0
   37a60:	strne	r2, [r5, r1, lsl #2]
   37a64:	cmp	r4, #256	; 0x100
   37a68:	bne	37a44 <fts_children@@Base+0x5fa8>
   37a6c:	b	3786c <fts_children@@Base+0x5dd0>
   37a70:	add	r0, r6, #256	; 0x100
   37a74:	mov	lr, #1
   37a78:	ldrh	r2, [r3, #2]!
   37a7c:	tst	r2, #8
   37a80:	beq	37a9c <fts_children@@Base+0x6000>
   37a84:	ldrb	r2, [r6]
   37a88:	and	ip, r2, #31
   37a8c:	asr	r2, r2, #5
   37a90:	ldr	r1, [r5, r2, lsl #2]
   37a94:	orr	r1, r1, lr, lsl ip
   37a98:	str	r1, [r5, r2, lsl #2]
   37a9c:	add	r6, r6, #1
   37aa0:	cmp	r0, r6
   37aa4:	bne	37a78 <fts_children@@Base+0x5fdc>
   37aa8:	b	3786c <fts_children@@Base+0x5dd0>
   37aac:	add	r0, r6, #256	; 0x100
   37ab0:	mov	lr, #1
   37ab4:	ldrh	r2, [r3, #2]!
   37ab8:	tst	r2, #2
   37abc:	beq	37ad8 <fts_children@@Base+0x603c>
   37ac0:	ldrb	r2, [r6]
   37ac4:	and	ip, r2, #31
   37ac8:	asr	r2, r2, #5
   37acc:	ldr	r1, [r5, r2, lsl #2]
   37ad0:	orr	r1, r1, lr, lsl ip
   37ad4:	str	r1, [r5, r2, lsl #2]
   37ad8:	add	r6, r6, #1
   37adc:	cmp	r0, r6
   37ae0:	bne	37ab4 <fts_children@@Base+0x6018>
   37ae4:	b	3786c <fts_children@@Base+0x5dd0>
   37ae8:	ldr	r1, [pc, #1156]	; 37f74 <fts_children@@Base+0x64d8>
   37aec:	ldr	r0, [sp, #36]	; 0x24
   37af0:	bl	120dc <strcmp@plt>
   37af4:	subs	r4, r0, #0
   37af8:	bne	37b84 <fts_children@@Base+0x60e8>
   37afc:	bl	12460 <__ctype_b_loc@plt>
   37b00:	cmp	r6, #0
   37b04:	moveq	ip, #1
   37b08:	ldr	r3, [r0]
   37b0c:	sub	r3, r3, #2
   37b10:	bne	37d7c <fts_children@@Base+0x62e0>
   37b14:	ldrh	r2, [r3, #2]!
   37b18:	asr	r1, r4, #5
   37b1c:	and	r0, r4, #31
   37b20:	tst	r2, #16384	; 0x4000
   37b24:	add	r4, r4, #1
   37b28:	ldrne	r2, [r5, r1, lsl #2]
   37b2c:	orrne	r2, r2, ip, lsl r0
   37b30:	strne	r2, [r5, r1, lsl #2]
   37b34:	cmp	r4, #256	; 0x100
   37b38:	bne	37b14 <fts_children@@Base+0x6078>
   37b3c:	b	3786c <fts_children@@Base+0x5dd0>
   37b40:	add	r0, r6, #256	; 0x100
   37b44:	mov	lr, #1
   37b48:	ldrh	r2, [r3, #2]!
   37b4c:	tst	r2, #512	; 0x200
   37b50:	beq	37b6c <fts_children@@Base+0x60d0>
   37b54:	ldrb	r2, [r6]
   37b58:	and	ip, r2, #31
   37b5c:	asr	r2, r2, #5
   37b60:	ldr	r1, [r5, r2, lsl #2]
   37b64:	orr	r1, r1, lr, lsl ip
   37b68:	str	r1, [r5, r2, lsl #2]
   37b6c:	add	r6, r6, #1
   37b70:	cmp	r0, r6
   37b74:	bne	37b48 <fts_children@@Base+0x60ac>
   37b78:	b	3786c <fts_children@@Base+0x5dd0>
   37b7c:	mov	r0, #12
   37b80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37b84:	ldr	r1, [pc, #972]	; 37f58 <fts_children@@Base+0x64bc>
   37b88:	ldr	r0, [sp, #36]	; 0x24
   37b8c:	bl	120dc <strcmp@plt>
   37b90:	subs	r4, r0, #0
   37b94:	bne	37c54 <fts_children@@Base+0x61b8>
   37b98:	bl	12460 <__ctype_b_loc@plt>
   37b9c:	cmp	r6, #0
   37ba0:	moveq	ip, #1
   37ba4:	ldr	r3, [r0]
   37ba8:	sub	r3, r3, #2
   37bac:	bne	37cac <fts_children@@Base+0x6210>
   37bb0:	ldrh	r2, [r3, #2]!
   37bb4:	asr	r1, r4, #5
   37bb8:	and	r0, r4, #31
   37bbc:	tst	r2, #256	; 0x100
   37bc0:	add	r4, r4, #1
   37bc4:	ldrne	r2, [r5, r1, lsl #2]
   37bc8:	orrne	r2, r2, ip, lsl r0
   37bcc:	strne	r2, [r5, r1, lsl #2]
   37bd0:	cmp	r4, #256	; 0x100
   37bd4:	bne	37bb0 <fts_children@@Base+0x6114>
   37bd8:	b	3786c <fts_children@@Base+0x5dd0>
   37bdc:	add	r0, r6, #256	; 0x100
   37be0:	mov	lr, #1
   37be4:	ldrh	r2, [r3, #2]!
   37be8:	tst	r2, #1024	; 0x400
   37bec:	beq	37c08 <fts_children@@Base+0x616c>
   37bf0:	ldrb	r2, [r6]
   37bf4:	and	ip, r2, #31
   37bf8:	asr	r2, r2, #5
   37bfc:	ldr	r1, [r5, r2, lsl #2]
   37c00:	orr	r1, r1, lr, lsl ip
   37c04:	str	r1, [r5, r2, lsl #2]
   37c08:	add	r6, r6, #1
   37c0c:	cmp	r0, r6
   37c10:	bne	37be4 <fts_children@@Base+0x6148>
   37c14:	b	3786c <fts_children@@Base+0x5dd0>
   37c18:	add	r0, r6, #256	; 0x100
   37c1c:	mov	lr, #1
   37c20:	ldrh	r2, [r3, #2]!
   37c24:	tst	r2, #8192	; 0x2000
   37c28:	beq	37c44 <fts_children@@Base+0x61a8>
   37c2c:	ldrb	r2, [r6]
   37c30:	and	ip, r2, #31
   37c34:	asr	r2, r2, #5
   37c38:	ldr	r1, [r5, r2, lsl #2]
   37c3c:	orr	r1, r1, lr, lsl ip
   37c40:	str	r1, [r5, r2, lsl #2]
   37c44:	add	r6, r6, #1
   37c48:	cmp	r6, r0
   37c4c:	bne	37c20 <fts_children@@Base+0x6184>
   37c50:	b	3786c <fts_children@@Base+0x5dd0>
   37c54:	ldr	r1, [pc, #796]	; 37f78 <fts_children@@Base+0x64dc>
   37c58:	ldr	r0, [sp, #36]	; 0x24
   37c5c:	bl	120dc <strcmp@plt>
   37c60:	subs	r4, r0, #0
   37c64:	bne	37d24 <fts_children@@Base+0x6288>
   37c68:	bl	12460 <__ctype_b_loc@plt>
   37c6c:	cmp	r6, #0
   37c70:	moveq	ip, #1
   37c74:	ldr	r3, [r0]
   37c78:	sub	r3, r3, #2
   37c7c:	bne	37ce8 <fts_children@@Base+0x624c>
   37c80:	ldrh	r2, [r3, #2]!
   37c84:	asr	r1, r4, #5
   37c88:	and	r0, r4, #31
   37c8c:	tst	r2, #1
   37c90:	add	r4, r4, #1
   37c94:	ldrne	r2, [r5, r1, lsl #2]
   37c98:	orrne	r2, r2, ip, lsl r0
   37c9c:	strne	r2, [r5, r1, lsl #2]
   37ca0:	cmp	r4, #256	; 0x100
   37ca4:	bne	37c80 <fts_children@@Base+0x61e4>
   37ca8:	b	3786c <fts_children@@Base+0x5dd0>
   37cac:	add	ip, r6, #256	; 0x100
   37cb0:	mov	r0, #1
   37cb4:	ldrh	r2, [r3, #2]!
   37cb8:	tst	r2, #256	; 0x100
   37cbc:	beq	37cd8 <fts_children@@Base+0x623c>
   37cc0:	ldrb	r2, [r6]
   37cc4:	and	lr, r2, #31
   37cc8:	asr	r2, r2, #5
   37ccc:	ldr	r1, [r5, r2, lsl #2]
   37cd0:	orr	r1, r1, r0, lsl lr
   37cd4:	str	r1, [r5, r2, lsl #2]
   37cd8:	add	r6, r6, #1
   37cdc:	cmp	r6, ip
   37ce0:	bne	37cb4 <fts_children@@Base+0x6218>
   37ce4:	b	3786c <fts_children@@Base+0x5dd0>
   37ce8:	add	ip, r6, #256	; 0x100
   37cec:	mov	r0, #1
   37cf0:	ldrh	r2, [r3, #2]!
   37cf4:	tst	r2, #1
   37cf8:	beq	37d14 <fts_children@@Base+0x6278>
   37cfc:	ldrb	r2, [r6]
   37d00:	and	lr, r2, #31
   37d04:	asr	r2, r2, #5
   37d08:	ldr	r1, [r5, r2, lsl #2]
   37d0c:	orr	r1, r1, r0, lsl lr
   37d10:	str	r1, [r5, r2, lsl #2]
   37d14:	add	r6, r6, #1
   37d18:	cmp	ip, r6
   37d1c:	bne	37cf0 <fts_children@@Base+0x6254>
   37d20:	b	3786c <fts_children@@Base+0x5dd0>
   37d24:	ldr	r1, [pc, #592]	; 37f7c <fts_children@@Base+0x64e0>
   37d28:	ldr	r0, [sp, #36]	; 0x24
   37d2c:	bl	120dc <strcmp@plt>
   37d30:	subs	r4, r0, #0
   37d34:	bne	37e30 <fts_children@@Base+0x6394>
   37d38:	bl	12460 <__ctype_b_loc@plt>
   37d3c:	cmp	r6, #0
   37d40:	ldr	r3, [r0]
   37d44:	moveq	r0, #1
   37d48:	sub	r3, r3, #2
   37d4c:	bne	37df4 <fts_children@@Base+0x6358>
   37d50:	ldrsh	r2, [r3, #2]!
   37d54:	asr	r1, r4, #5
   37d58:	and	ip, r4, #31
   37d5c:	cmp	r2, #0
   37d60:	add	r4, r4, #1
   37d64:	ldrlt	r2, [r5, r1, lsl #2]
   37d68:	orrlt	r2, r2, r0, lsl ip
   37d6c:	strlt	r2, [r5, r1, lsl #2]
   37d70:	cmp	r4, #256	; 0x100
   37d74:	bne	37d50 <fts_children@@Base+0x62b4>
   37d78:	b	3786c <fts_children@@Base+0x5dd0>
   37d7c:	add	ip, r6, #256	; 0x100
   37d80:	mov	r0, #1
   37d84:	ldrh	r2, [r3, #2]!
   37d88:	tst	r2, #16384	; 0x4000
   37d8c:	beq	37da8 <fts_children@@Base+0x630c>
   37d90:	ldrb	r2, [r6]
   37d94:	and	lr, r2, #31
   37d98:	asr	r2, r2, #5
   37d9c:	ldr	r1, [r5, r2, lsl #2]
   37da0:	orr	r1, r1, r0, lsl lr
   37da4:	str	r1, [r5, r2, lsl #2]
   37da8:	add	r6, r6, #1
   37dac:	cmp	ip, r6
   37db0:	bne	37d84 <fts_children@@Base+0x62e8>
   37db4:	b	3786c <fts_children@@Base+0x5dd0>
   37db8:	add	r1, r6, #256	; 0x100
   37dbc:	mov	ip, #1
   37dc0:	ldrh	r2, [r3, #2]!
   37dc4:	tst	r2, #2048	; 0x800
   37dc8:	beq	37de4 <fts_children@@Base+0x6348>
   37dcc:	ldrb	r2, [r6]
   37dd0:	and	lr, r2, #31
   37dd4:	asr	r2, r2, #5
   37dd8:	ldr	r0, [r5, r2, lsl #2]
   37ddc:	orr	r0, r0, ip, lsl lr
   37de0:	str	r0, [r5, r2, lsl #2]
   37de4:	add	r6, r6, #1
   37de8:	cmp	r1, r6
   37dec:	bne	37dc0 <fts_children@@Base+0x6324>
   37df0:	b	3786c <fts_children@@Base+0x5dd0>
   37df4:	add	ip, r6, #256	; 0x100
   37df8:	mov	r0, #1
   37dfc:	ldrsh	r2, [r3, #2]!
   37e00:	cmp	r2, #0
   37e04:	bge	37e20 <fts_children@@Base+0x6384>
   37e08:	ldrb	r2, [r6]
   37e0c:	and	lr, r2, #31
   37e10:	asr	r2, r2, #5
   37e14:	ldr	r1, [r5, r2, lsl #2]
   37e18:	orr	r1, r1, r0, lsl lr
   37e1c:	str	r1, [r5, r2, lsl #2]
   37e20:	add	r6, r6, #1
   37e24:	cmp	ip, r6
   37e28:	bne	37dfc <fts_children@@Base+0x6360>
   37e2c:	b	3786c <fts_children@@Base+0x5dd0>
   37e30:	ldr	r1, [pc, #328]	; 37f80 <fts_children@@Base+0x64e4>
   37e34:	ldr	r0, [sp, #36]	; 0x24
   37e38:	bl	120dc <strcmp@plt>
   37e3c:	subs	r4, r0, #0
   37e40:	bne	37e88 <fts_children@@Base+0x63ec>
   37e44:	bl	12460 <__ctype_b_loc@plt>
   37e48:	cmp	r6, #0
   37e4c:	ldr	r3, [r0]
   37e50:	moveq	r0, #1
   37e54:	sub	r3, r3, #2
   37e58:	bne	37f1c <fts_children@@Base+0x6480>
   37e5c:	ldrh	r2, [r3, #2]!
   37e60:	asr	r1, r4, #5
   37e64:	and	ip, r4, #31
   37e68:	tst	r2, #4
   37e6c:	add	r4, r4, #1
   37e70:	ldrne	r2, [r5, r1, lsl #2]
   37e74:	orrne	r2, r2, r0, lsl ip
   37e78:	strne	r2, [r5, r1, lsl #2]
   37e7c:	cmp	r4, #256	; 0x100
   37e80:	bne	37e5c <fts_children@@Base+0x63c0>
   37e84:	b	3786c <fts_children@@Base+0x5dd0>
   37e88:	ldr	r1, [pc, #244]	; 37f84 <fts_children@@Base+0x64e8>
   37e8c:	ldr	r0, [sp, #36]	; 0x24
   37e90:	bl	120dc <strcmp@plt>
   37e94:	subs	r4, r0, #0
   37e98:	bne	37f14 <fts_children@@Base+0x6478>
   37e9c:	bl	12460 <__ctype_b_loc@plt>
   37ea0:	cmp	r6, #0
   37ea4:	ldr	r3, [r0]
   37ea8:	mov	r0, #1
   37eac:	sub	r3, r3, #2
   37eb0:	bne	37ee0 <fts_children@@Base+0x6444>
   37eb4:	ldrh	r2, [r3, #2]!
   37eb8:	asr	r1, r4, #5
   37ebc:	and	ip, r4, #31
   37ec0:	tst	r2, #4096	; 0x1000
   37ec4:	add	r4, r4, #1
   37ec8:	ldrne	r2, [r5, r1, lsl #2]
   37ecc:	orrne	r2, r2, r0, lsl ip
   37ed0:	strne	r2, [r5, r1, lsl #2]
   37ed4:	cmp	r4, #256	; 0x100
   37ed8:	bne	37eb4 <fts_children@@Base+0x6418>
   37edc:	b	3786c <fts_children@@Base+0x5dd0>
   37ee0:	ldrh	r2, [r3, #2]!
   37ee4:	tst	r2, #4096	; 0x1000
   37ee8:	beq	37f04 <fts_children@@Base+0x6468>
   37eec:	ldrb	r2, [r6, r4]
   37ef0:	and	ip, r2, #31
   37ef4:	asr	r2, r2, #5
   37ef8:	ldr	r1, [r5, r2, lsl #2]
   37efc:	orr	r1, r1, r0, lsl ip
   37f00:	str	r1, [r5, r2, lsl #2]
   37f04:	add	r4, r4, #1
   37f08:	cmp	r4, #256	; 0x100
   37f0c:	bne	37ee0 <fts_children@@Base+0x6444>
   37f10:	b	3786c <fts_children@@Base+0x5dd0>
   37f14:	mov	r0, #4
   37f18:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   37f1c:	add	ip, r6, #256	; 0x100
   37f20:	mov	r0, #1
   37f24:	ldrh	r2, [r3, #2]!
   37f28:	tst	r2, #4
   37f2c:	beq	37f48 <fts_children@@Base+0x64ac>
   37f30:	ldrb	r2, [r6]
   37f34:	and	lr, r2, #31
   37f38:	asr	r2, r2, #5
   37f3c:	ldr	r1, [r5, r2, lsl #2]
   37f40:	orr	r1, r1, r0, lsl lr
   37f44:	str	r1, [r5, r2, lsl #2]
   37f48:	add	r6, r6, #1
   37f4c:	cmp	r6, ip
   37f50:	bne	37f24 <fts_children@@Base+0x6488>
   37f54:	b	3786c <fts_children@@Base+0x5dd0>
   37f58:	andeq	sl, r4, r0, ror #20
   37f5c:	andeq	sl, r4, r8, asr sl
   37f60:	andeq	sl, r4, r0, ror sl
   37f64:	andeq	sl, r4, r8, ror sl
   37f68:	andeq	sl, r4, r8, ror #20
   37f6c:	andeq	sl, r4, r0, lsl #21
   37f70:	andeq	sl, r4, r8, lsl #21
   37f74:	andeq	r5, r4, r8, ror #7
   37f78:	muleq	r4, r0, sl
   37f7c:	muleq	r4, r8, sl
   37f80:	andeq	sl, r4, r0, lsr #21
   37f84:	andeq	sl, r4, r8, lsr #21
   37f88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   37f8c:	sub	sp, sp, #52	; 0x34
   37f90:	ldr	r9, [pc, #600]	; 381f0 <fts_children@@Base+0x6754>
   37f94:	mov	r5, r3
   37f98:	ldr	r3, [sp, #92]	; 0x5c
   37f9c:	ldr	ip, [r9]
   37fa0:	mov	r7, r0
   37fa4:	mov	fp, r1
   37fa8:	mov	r6, #0
   37fac:	mov	r1, #1
   37fb0:	mov	r0, #32
   37fb4:	str	r2, [sp, #16]
   37fb8:	str	ip, [sp, #44]	; 0x2c
   37fbc:	str	r6, [sp, #24]
   37fc0:	ldrb	sl, [sp, #88]	; 0x58
   37fc4:	str	r3, [sp, #20]
   37fc8:	bl	12064 <calloc@plt>
   37fcc:	subs	r4, r0, #0
   37fd0:	beq	381a0 <fts_children@@Base+0x6704>
   37fd4:	mov	r1, #1
   37fd8:	mov	r0, #40	; 0x28
   37fdc:	bl	12064 <calloc@plt>
   37fe0:	subs	r8, r0, #0
   37fe4:	beq	381b4 <fts_children@@Base+0x6718>
   37fe8:	ldrb	r2, [r8, #16]
   37fec:	ldr	r1, [sp, #16]
   37ff0:	and	r3, sl, #1
   37ff4:	bic	r2, r2, #1
   37ff8:	orr	r3, r3, r2
   37ffc:	add	r2, sp, #24
   38000:	strb	r3, [r8, #16]
   38004:	mov	r0, fp
   38008:	str	r1, [sp, #4]
   3800c:	str	r2, [sp]
   38010:	add	r3, r8, #36	; 0x24
   38014:	str	r6, [sp, #8]
   38018:	add	r2, r8, #12
   3801c:	mov	r1, r4
   38020:	bl	3779c <fts_children@@Base+0x5d00>
   38024:	subs	fp, r0, #0
   38028:	bne	381d0 <fts_children@@Base+0x6734>
   3802c:	ldrb	r3, [r5]
   38030:	cmp	r3, #0
   38034:	beq	3805c <fts_children@@Base+0x65c0>
   38038:	mov	ip, #1
   3803c:	asr	r1, r3, #5
   38040:	and	r0, r3, #31
   38044:	ldr	r2, [r4, r1, lsl #2]
   38048:	ldrb	r3, [r5, #1]!
   3804c:	orr	r2, r2, ip, lsl r0
   38050:	cmp	r3, #0
   38054:	str	r2, [r4, r1, lsl #2]
   38058:	bne	3803c <fts_children@@Base+0x65a0>
   3805c:	cmp	sl, #0
   38060:	beq	38080 <fts_children@@Base+0x65e4>
   38064:	sub	r3, r4, #4
   38068:	add	r1, r4, #28
   3806c:	ldr	r2, [r3, #4]!
   38070:	mvn	r2, r2
   38074:	cmp	r1, r3
   38078:	str	r2, [r3]
   3807c:	bne	3806c <fts_children@@Base+0x65d0>
   38080:	ldr	r3, [r7, #92]	; 0x5c
   38084:	cmp	r3, #1
   38088:	ble	380b4 <fts_children@@Base+0x6618>
   3808c:	ldr	r1, [r7, #60]	; 0x3c
   38090:	sub	r3, r4, #4
   38094:	sub	r1, r1, #4
   38098:	add	ip, r4, #28
   3809c:	ldr	r2, [r3, #4]!
   380a0:	ldr	r0, [r1, #4]!
   380a4:	cmp	ip, r3
   380a8:	and	r2, r2, r0
   380ac:	str	r2, [r3]
   380b0:	bne	3809c <fts_children@@Base+0x6600>
   380b4:	mov	r3, #0
   380b8:	add	r5, r7, #56	; 0x38
   380bc:	add	sl, r7, #64	; 0x40
   380c0:	add	fp, sp, #28
   380c4:	mov	ip, #3
   380c8:	mov	r0, r5
   380cc:	mov	r1, sl
   380d0:	str	fp, [sp]
   380d4:	mov	r2, r3
   380d8:	str	r4, [sp, #28]
   380dc:	strb	ip, [sp, #32]
   380e0:	bl	34bb0 <fts_children@@Base+0x3114>
   380e4:	subs	r6, r0, #0
   380e8:	beq	3817c <fts_children@@Base+0x66e0>
   380ec:	ldr	r3, [r7, #92]	; 0x5c
   380f0:	cmp	r3, #1
   380f4:	ble	38170 <fts_children@@Base+0x66d4>
   380f8:	ldrb	r2, [r7, #88]	; 0x58
   380fc:	mov	r3, #0
   38100:	str	fp, [sp]
   38104:	orr	r2, r2, #2
   38108:	strb	r2, [r7, #88]	; 0x58
   3810c:	mov	ip, #6
   38110:	mov	r2, r3
   38114:	mov	r1, sl
   38118:	mov	r0, r5
   3811c:	str	r8, [sp, #28]
   38120:	strb	ip, [sp, #32]
   38124:	bl	34bb0 <fts_children@@Base+0x3114>
   38128:	subs	r3, r0, #0
   3812c:	beq	3817c <fts_children@@Base+0x66e0>
   38130:	add	ip, sp, #36	; 0x24
   38134:	mov	r2, r6
   38138:	str	ip, [sp]
   3813c:	mov	r1, sl
   38140:	mov	ip, #10
   38144:	mov	r0, r5
   38148:	strb	ip, [sp, #40]	; 0x28
   3814c:	bl	34bb0 <fts_children@@Base+0x3114>
   38150:	mov	r6, r0
   38154:	ldr	r2, [sp, #44]	; 0x2c
   38158:	ldr	r3, [r9]
   3815c:	mov	r0, r6
   38160:	cmp	r2, r3
   38164:	bne	381ec <fts_children@@Base+0x6750>
   38168:	add	sp, sp, #52	; 0x34
   3816c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38170:	mov	r0, r8
   38174:	bl	3361c <fts_children@@Base+0x1b80>
   38178:	b	38154 <fts_children@@Base+0x66b8>
   3817c:	mov	r0, r4
   38180:	bl	12154 <free@plt>
   38184:	mov	r0, r8
   38188:	bl	3361c <fts_children@@Base+0x1b80>
   3818c:	ldr	r2, [sp, #20]
   38190:	mov	r3, #12
   38194:	mov	r6, #0
   38198:	str	r3, [r2]
   3819c:	b	38154 <fts_children@@Base+0x66b8>
   381a0:	ldr	r2, [sp, #20]
   381a4:	mov	r3, #12
   381a8:	mov	r6, r4
   381ac:	str	r3, [r2]
   381b0:	b	38154 <fts_children@@Base+0x66b8>
   381b4:	mov	r0, r4
   381b8:	bl	12154 <free@plt>
   381bc:	ldr	r2, [sp, #20]
   381c0:	mov	r3, #12
   381c4:	mov	r6, r8
   381c8:	str	r3, [r2]
   381cc:	b	38154 <fts_children@@Base+0x66b8>
   381d0:	mov	r0, r4
   381d4:	bl	12154 <free@plt>
   381d8:	mov	r0, r8
   381dc:	bl	3361c <fts_children@@Base+0x1b80>
   381e0:	ldr	r3, [sp, #20]
   381e4:	str	fp, [r3]
   381e8:	b	38154 <fts_children@@Base+0x66b8>
   381ec:	bl	12244 <__stack_chk_fail@plt>
   381f0:	andeq	fp, r5, r0, ror #24
   381f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   381f8:	sub	sp, sp, #308	; 0x134
   381fc:	ldr	sl, [r0]
   38200:	str	r1, [sp, #20]
   38204:	mov	r4, r3
   38208:	ldr	r1, [sl, #92]	; 0x5c
   3820c:	str	r2, [sp, #12]
   38210:	cmp	r1, #1
   38214:	moveq	r3, r0
   38218:	ldr	r2, [pc, #1132]	; 3868c <fts_children@@Base+0x6bf0>
   3821c:	ldreq	r5, [r3, #12]
   38220:	ldr	r3, [sp, #20]
   38224:	ldr	r2, [r2]
   38228:	lsreq	r5, r5, #22
   3822c:	ldr	r1, [r3]
   38230:	andeq	r5, r5, #1
   38234:	movne	r5, #0
   38238:	cmp	r1, #0
   3823c:	str	r0, [sp, #24]
   38240:	str	r2, [sp, #300]	; 0x12c
   38244:	ble	38548 <fts_children@@Base+0x6aac>
   38248:	mov	r3, #0
   3824c:	ldr	r6, [pc, #1084]	; 38690 <fts_children@@Base+0x6bf4>
   38250:	str	r3, [sp]
   38254:	b	38290 <fts_children@@Base+0x67f4>
   38258:	cmp	r8, #3
   3825c:	beq	38478 <fts_children@@Base+0x69dc>
   38260:	cmp	r8, #6
   38264:	beq	38304 <fts_children@@Base+0x6868>
   38268:	and	r3, r8, #253	; 0xfd
   3826c:	cmp	r3, #5
   38270:	beq	38660 <fts_children@@Base+0x6bc4>
   38274:	cmp	r8, #2
   38278:	beq	38528 <fts_children@@Base+0x6a8c>
   3827c:	ldr	r3, [sp]
   38280:	add	r3, r3, #1
   38284:	cmp	r3, r1
   38288:	str	r3, [sp]
   3828c:	bge	38548 <fts_children@@Base+0x6aac>
   38290:	ldr	r3, [sp, #12]
   38294:	ldr	r0, [sp]
   38298:	ldr	r2, [sl]
   3829c:	ldr	r3, [r3]
   382a0:	ldr	r7, [r3, r0, lsl #2]
   382a4:	lsl	r3, r7, #3
   382a8:	str	r3, [sp, #8]
   382ac:	add	r3, r2, r3
   382b0:	ldrb	r8, [r3, #4]
   382b4:	cmp	r8, #1
   382b8:	bne	38258 <fts_children@@Base+0x67bc>
   382bc:	ldrb	fp, [r2, r7, lsl #3]
   382c0:	cmp	r5, #0
   382c4:	strb	r8, [r4, fp]
   382c8:	beq	382dc <fts_children@@Base+0x6840>
   382cc:	bl	12430 <__ctype_tolower_loc@plt>
   382d0:	ldr	r3, [r0]
   382d4:	ldr	r3, [r3, fp, lsl #2]
   382d8:	strb	r8, [r4, r3]
   382dc:	ldr	r3, [sp, #24]
   382e0:	ldr	r3, [r3, #12]
   382e4:	tst	r3, #4194304	; 0x400000
   382e8:	beq	382f8 <fts_children@@Base+0x685c>
   382ec:	ldr	r3, [sl, #92]	; 0x5c
   382f0:	cmp	r3, #1
   382f4:	bgt	38564 <fts_children@@Base+0x6ac8>
   382f8:	ldr	r3, [sp, #20]
   382fc:	ldr	r1, [r3]
   38300:	b	3827c <fts_children@@Base+0x67e0>
   38304:	ldr	r2, [sl, #92]	; 0x5c
   38308:	ldr	fp, [r3]
   3830c:	cmp	r2, #1
   38310:	ble	38338 <fts_children@@Base+0x689c>
   38314:	ldr	r3, [fp, #36]	; 0x24
   38318:	cmp	r3, #0
   3831c:	bne	38424 <fts_children@@Base+0x6988>
   38320:	ldrb	r3, [fp, #16]
   38324:	tst	r3, #1
   38328:	bne	38424 <fts_children@@Base+0x6988>
   3832c:	ldr	r3, [fp, #32]
   38330:	cmp	r3, #0
   38334:	bne	38424 <fts_children@@Base+0x6988>
   38338:	ldr	r3, [fp, #20]
   3833c:	cmp	r3, #0
   38340:	ble	3827c <fts_children@@Base+0x67e0>
   38344:	mov	r8, #0
   38348:	str	r5, [sp, #16]
   3834c:	mov	r5, fp
   38350:	ldr	fp, [sp, #24]
   38354:	mov	r9, r8
   38358:	add	r7, sp, #36	; 0x24
   3835c:	add	r3, sp, #44	; 0x2c
   38360:	str	r3, [sp, #4]
   38364:	str	r9, [r7]
   38368:	str	r9, [r7, #4]
   3836c:	ldr	r1, [r5]
   38370:	mov	r2, r7
   38374:	ldr	r0, [sp, #4]
   38378:	ldr	r1, [r1, r8, lsl #2]
   3837c:	bl	12094 <wcrtomb@plt>
   38380:	lsl	r1, r8, #2
   38384:	cmn	r0, #1
   38388:	beq	383c8 <fts_children@@Base+0x692c>
   3838c:	ldrb	r2, [sp, #44]	; 0x2c
   38390:	ldr	r3, [sp, #16]
   38394:	cmp	r3, #0
   38398:	mov	r3, #1
   3839c:	strb	r3, [r4, r2]
   383a0:	str	r2, [sp, #8]
   383a4:	beq	383c8 <fts_children@@Base+0x692c>
   383a8:	str	r1, [sp, #28]
   383ac:	bl	12430 <__ctype_tolower_loc@plt>
   383b0:	ldr	r2, [sp, #8]
   383b4:	ldr	r1, [sp, #28]
   383b8:	mov	r3, #1
   383bc:	ldr	r0, [r0]
   383c0:	ldr	r2, [r0, r2, lsl #2]
   383c4:	strb	r3, [r4, r2]
   383c8:	ldr	r2, [fp, #12]
   383cc:	tst	r2, #4194304	; 0x400000
   383d0:	beq	3840c <fts_children@@Base+0x6970>
   383d4:	ldr	r2, [sl, #92]	; 0x5c
   383d8:	cmp	r2, #1
   383dc:	ble	3840c <fts_children@@Base+0x6970>
   383e0:	ldr	r2, [r5]
   383e4:	ldr	r0, [r2, r1]
   383e8:	bl	121d8 <towlower@plt>
   383ec:	mov	r2, r7
   383f0:	mov	r1, r0
   383f4:	ldr	r0, [sp, #4]
   383f8:	bl	12094 <wcrtomb@plt>
   383fc:	cmn	r0, #1
   38400:	movne	r3, #1
   38404:	ldrbne	r2, [sp, #44]	; 0x2c
   38408:	strbne	r3, [r4, r2]
   3840c:	ldr	r2, [r5, #20]
   38410:	add	r8, r8, #1
   38414:	cmp	r8, r2
   38418:	blt	38364 <fts_children@@Base+0x68c8>
   3841c:	ldr	r5, [sp, #16]
   38420:	b	382f8 <fts_children@@Base+0x685c>
   38424:	mov	r3, #0
   38428:	mov	r8, r3
   3842c:	add	r7, sp, #36	; 0x24
   38430:	mov	r9, #1
   38434:	strb	r3, [sp, #32]
   38438:	mov	r3, r7
   3843c:	mov	r2, #1
   38440:	add	r1, sp, #32
   38444:	mov	r0, #0
   38448:	str	r8, [r7]
   3844c:	str	r8, [r7, #4]
   38450:	bl	31be8 <fts_children@@Base+0x14c>
   38454:	ldrb	r3, [sp, #32]
   38458:	cmn	r0, #2
   3845c:	strbeq	r9, [r4, r3]
   38460:	add	r3, r3, #1
   38464:	uxtb	r3, r3
   38468:	cmp	r3, #0
   3846c:	strb	r3, [sp, #32]
   38470:	bne	38438 <fts_children@@Base+0x699c>
   38474:	b	382f8 <fts_children@@Base+0x685c>
   38478:	str	sl, [sp, #16]
   3847c:	mov	r8, #32
   38480:	mov	fp, #1
   38484:	mov	sl, r4
   38488:	mov	r9, #0
   3848c:	str	r9, [sp, #4]
   38490:	ldr	r3, [sp, #8]
   38494:	sub	r7, r8, #32
   38498:	ldr	r2, [r2, r3]
   3849c:	ldr	r3, [sp, #4]
   384a0:	ldr	r4, [r2, r3]
   384a4:	add	r3, r9, r7
   384a8:	lsr	r3, r4, r3
   384ac:	tst	r3, #1
   384b0:	beq	384e4 <fts_children@@Base+0x6a48>
   384b4:	cmp	r5, #0
   384b8:	strb	fp, [sl, r7]
   384bc:	add	r3, sl, r7
   384c0:	beq	384e4 <fts_children@@Base+0x6a48>
   384c4:	add	r2, r7, #128	; 0x80
   384c8:	cmp	r2, r6
   384cc:	bhi	384e0 <fts_children@@Base+0x6a44>
   384d0:	bl	12430 <__ctype_tolower_loc@plt>
   384d4:	ldr	r3, [r0]
   384d8:	ldr	r3, [r3, r7, lsl #2]
   384dc:	add	r3, sl, r3
   384e0:	strb	fp, [r3]
   384e4:	add	r7, r7, #1
   384e8:	cmp	r8, r7
   384ec:	bne	384a4 <fts_children@@Base+0x6a08>
   384f0:	ldr	r3, [sp, #4]
   384f4:	add	r8, r8, #32
   384f8:	add	r3, r3, #4
   384fc:	cmp	r8, #288	; 0x120
   38500:	str	r3, [sp, #4]
   38504:	sub	r9, r9, #32
   38508:	ldrne	r3, [sp, #16]
   3850c:	ldrne	r2, [r3]
   38510:	bne	38490 <fts_children@@Base+0x69f4>
   38514:	ldr	r3, [sp, #20]
   38518:	mov	r4, sl
   3851c:	ldr	sl, [sp, #16]
   38520:	ldr	r1, [r3]
   38524:	b	3827c <fts_children@@Base+0x67e0>
   38528:	mov	r0, r4
   3852c:	mov	r2, #256	; 0x100
   38530:	mov	r1, #1
   38534:	bl	12514 <memset@plt>
   38538:	ldr	r2, [sp, #24]
   3853c:	ldrb	r3, [r2, #28]
   38540:	orr	r3, r3, #1
   38544:	strb	r3, [r2, #28]
   38548:	ldr	r3, [pc, #316]	; 3868c <fts_children@@Base+0x6bf0>
   3854c:	ldr	r2, [sp, #300]	; 0x12c
   38550:	ldr	r3, [r3]
   38554:	cmp	r2, r3
   38558:	bne	38688 <fts_children@@Base+0x6bec>
   3855c:	add	sp, sp, #308	; 0x134
   38560:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38564:	ldr	r3, [sl]
   38568:	add	r2, r7, #1
   3856c:	ldrb	r1, [r3, r7, lsl #3]
   38570:	strb	r1, [sp, #44]	; 0x2c
   38574:	ldr	r1, [sl, #8]
   38578:	cmp	r1, r2
   3857c:	bls	3867c <fts_children@@Base+0x6be0>
   38580:	ldr	r1, [sp, #8]
   38584:	ldr	r0, [pc, #264]	; 38694 <fts_children@@Base+0x6bf8>
   38588:	add	r9, r1, #8
   3858c:	add	r3, r3, r9
   38590:	ldr	r1, [r3, #4]
   38594:	bic	r1, r1, #-16777216	; 0xff000000
   38598:	bic	r1, r1, #14614528	; 0xdf0000
   3859c:	bic	r1, r1, #65280	; 0xff00
   385a0:	cmp	r1, r0
   385a4:	addeq	r1, sp, #44	; 0x2c
   385a8:	streq	r1, [sp, #4]
   385ac:	addeq	r8, sp, #45	; 0x2d
   385b0:	beq	385dc <fts_children@@Base+0x6b40>
   385b4:	b	3867c <fts_children@@Base+0x6be0>
   385b8:	ldr	r3, [sl]
   385bc:	ldr	r0, [pc, #208]	; 38694 <fts_children@@Base+0x6bf8>
   385c0:	add	r3, r3, r2, lsl #3
   385c4:	ldr	r1, [r3, #4]
   385c8:	bic	r1, r1, #-16777216	; 0xff000000
   385cc:	bic	r1, r1, #14614528	; 0xdf0000
   385d0:	bic	r1, r1, #65280	; 0xff00
   385d4:	cmp	r1, r0
   385d8:	bne	385f4 <fts_children@@Base+0x6b58>
   385dc:	ldrb	r3, [r3]
   385e0:	add	r2, r2, #1
   385e4:	strb	r3, [r8], #1
   385e8:	ldr	r3, [sl, #8]
   385ec:	cmp	r3, r2
   385f0:	bhi	385b8 <fts_children@@Base+0x6b1c>
   385f4:	ldr	r3, [sp, #4]
   385f8:	sub	r8, r8, r3
   385fc:	add	r7, sp, #36	; 0x24
   38600:	mov	ip, #0
   38604:	str	ip, [sp, #36]	; 0x24
   38608:	mov	r3, r7
   3860c:	mov	r2, r8
   38610:	ldr	r1, [sp, #4]
   38614:	add	r0, sp, #32
   38618:	str	ip, [r7, #4]
   3861c:	bl	31be8 <fts_children@@Base+0x14c>
   38620:	cmp	r0, r8
   38624:	bne	382f8 <fts_children@@Base+0x685c>
   38628:	ldr	r0, [sp, #32]
   3862c:	bl	121d8 <towlower@plt>
   38630:	mov	r2, r7
   38634:	mov	r1, r0
   38638:	ldr	r0, [sp, #4]
   3863c:	bl	12094 <wcrtomb@plt>
   38640:	cmn	r0, #1
   38644:	beq	382f8 <fts_children@@Base+0x685c>
   38648:	ldrb	r3, [sp, #44]	; 0x2c
   3864c:	mov	r2, #1
   38650:	strb	r2, [r4, r3]
   38654:	ldr	r3, [sp, #20]
   38658:	ldr	r1, [r3]
   3865c:	b	3827c <fts_children@@Base+0x67e0>
   38660:	mov	r0, r4
   38664:	mov	r2, #256	; 0x100
   38668:	mov	r1, #1
   3866c:	bl	12514 <memset@plt>
   38670:	cmp	r8, #2
   38674:	bne	38548 <fts_children@@Base+0x6aac>
   38678:	b	38538 <fts_children@@Base+0x6a9c>
   3867c:	add	r3, sp, #44	; 0x2c
   38680:	str	r3, [sp, #4]
   38684:	b	385fc <fts_children@@Base+0x6b60>
   38688:	bl	12244 <__stack_chk_fail@plt>
   3868c:	andeq	fp, r5, r0, ror #24
   38690:	andeq	r0, r0, pc, ror r1
   38694:	eoreq	r0, r0, r1
   38698:	add	ip, r0, r2, lsl #3
   3869c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   386a0:	ldrb	r8, [ip, #4]
   386a4:	cmp	r8, #7
   386a8:	beq	38800 <fts_children@@Base+0x6d64>
   386ac:	ldr	ip, [r3, #80]	; 0x50
   386b0:	cmp	ip, #1
   386b4:	beq	386fc <fts_children@@Base+0x6c60>
   386b8:	mov	r9, r1
   386bc:	mov	r4, r0
   386c0:	ldr	r1, [sp, #32]
   386c4:	mov	r0, r3
   386c8:	mov	r6, r3
   386cc:	mov	r5, r2
   386d0:	bl	33f18 <fts_children@@Base+0x247c>
   386d4:	cmp	r8, #5
   386d8:	mov	r7, r0
   386dc:	beq	38708 <fts_children@@Base+0x6c6c>
   386e0:	cmp	r0, #1
   386e4:	sub	r1, r8, #6
   386e8:	clz	r1, r1
   386ec:	lsr	r1, r1, #5
   386f0:	movle	r1, #0
   386f4:	cmp	r1, #0
   386f8:	bne	38750 <fts_children@@Base+0x6cb4>
   386fc:	mov	r7, #0
   38700:	mov	r0, r7
   38704:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   38708:	cmp	r0, #1
   3870c:	ble	386fc <fts_children@@Base+0x6c60>
   38710:	ldr	r3, [r9]
   38714:	tst	r3, #64	; 0x40
   38718:	bne	38730 <fts_children@@Base+0x6c94>
   3871c:	ldr	r2, [r6, #4]
   38720:	ldr	r1, [sp, #32]
   38724:	ldrb	r2, [r2, r1]
   38728:	cmp	r2, #10
   3872c:	beq	386fc <fts_children@@Base+0x6c60>
   38730:	tst	r3, #128	; 0x80
   38734:	beq	38700 <fts_children@@Base+0x6c64>
   38738:	ldr	r3, [r6, #4]
   3873c:	ldr	r2, [sp, #32]
   38740:	ldrb	r3, [r3, r2]
   38744:	cmp	r3, #0
   38748:	beq	386fc <fts_children@@Base+0x6c60>
   3874c:	b	38700 <fts_children@@Base+0x6c64>
   38750:	ldr	r8, [r4, r5, lsl #3]
   38754:	ldr	ip, [r8, #32]
   38758:	ldr	r0, [r8, #20]
   3875c:	cmp	ip, #0
   38760:	bne	38770 <fts_children@@Base+0x6cd4>
   38764:	ldr	r3, [r8, #36]	; 0x24
   38768:	orrs	r3, r0, r3
   3876c:	beq	388d0 <fts_children@@Base+0x6e34>
   38770:	ldr	r3, [r6, #8]
   38774:	ldr	r2, [sp, #32]
   38778:	cmp	r0, #0
   3877c:	ldr	r4, [r3, r2, lsl #2]
   38780:	ble	387b4 <fts_children@@Base+0x6d18>
   38784:	ldr	r2, [r8]
   38788:	ldr	r3, [r2]
   3878c:	cmp	r4, r3
   38790:	beq	387f0 <fts_children@@Base+0x6d54>
   38794:	mov	r3, #0
   38798:	b	387a8 <fts_children@@Base+0x6d0c>
   3879c:	ldr	r1, [r2, #4]!
   387a0:	cmp	r4, r1
   387a4:	beq	387f0 <fts_children@@Base+0x6d54>
   387a8:	add	r3, r3, #1
   387ac:	cmp	r3, r0
   387b0:	bne	3879c <fts_children@@Base+0x6d00>
   387b4:	ldr	r3, [r8, #36]	; 0x24
   387b8:	cmp	r3, #0
   387bc:	ble	38894 <fts_children@@Base+0x6df8>
   387c0:	mov	r5, #0
   387c4:	b	387d4 <fts_children@@Base+0x6d38>
   387c8:	ldr	r3, [r8, #36]	; 0x24
   387cc:	cmp	r5, r3
   387d0:	bge	38890 <fts_children@@Base+0x6df4>
   387d4:	ldr	r3, [r8, #12]
   387d8:	mov	r0, r4
   387dc:	ldr	r1, [r3, r5, lsl #2]
   387e0:	bl	120d0 <iswctype@plt>
   387e4:	add	r5, r5, #1
   387e8:	cmp	r0, #0
   387ec:	beq	387c8 <fts_children@@Base+0x6d2c>
   387f0:	ldrb	r3, [r8, #16]
   387f4:	tst	r3, #1
   387f8:	beq	38700 <fts_children@@Base+0x6c64>
   387fc:	b	386fc <fts_children@@Base+0x6c60>
   38800:	ldr	r2, [r3, #4]
   38804:	ldr	r1, [sp, #32]
   38808:	add	r0, r2, r1
   3880c:	ldrb	r1, [r2, r1]
   38810:	cmp	r1, #193	; 0xc1
   38814:	bls	386fc <fts_children@@Base+0x6c60>
   38818:	ldr	ip, [sp, #32]
   3881c:	ldr	r3, [r3, #48]	; 0x30
   38820:	add	ip, ip, #1
   38824:	cmp	ip, r3
   38828:	bge	386fc <fts_children@@Base+0x6c60>
   3882c:	cmp	r1, #223	; 0xdf
   38830:	ldrb	ip, [r0, #1]
   38834:	bls	388fc <fts_children@@Base+0x6e60>
   38838:	cmp	r1, #239	; 0xef
   3883c:	bhi	388e0 <fts_children@@Base+0x6e44>
   38840:	cmp	ip, #159	; 0x9f
   38844:	cmpls	r1, #224	; 0xe0
   38848:	movne	r7, #3
   3884c:	beq	386fc <fts_children@@Base+0x6c60>
   38850:	ldr	r1, [sp, #32]
   38854:	add	r1, r1, r7
   38858:	cmp	r3, r1
   3885c:	blt	386fc <fts_children@@Base+0x6c60>
   38860:	ldr	r3, [sp, #32]
   38864:	sub	r3, r3, #1
   38868:	add	r3, r2, r3
   3886c:	add	r3, r3, r7
   38870:	b	3887c <fts_children@@Base+0x6de0>
   38874:	cmp	r3, r0
   38878:	beq	38700 <fts_children@@Base+0x6c64>
   3887c:	ldrb	r2, [r0, #1]!
   38880:	eor	r2, r2, #128	; 0x80
   38884:	cmp	r2, #63	; 0x3f
   38888:	bls	38874 <fts_children@@Base+0x6dd8>
   3888c:	b	386fc <fts_children@@Base+0x6c60>
   38890:	ldr	ip, [r8, #32]
   38894:	cmp	ip, #0
   38898:	ble	388d0 <fts_children@@Base+0x6e34>
   3889c:	ldr	r2, [r8, #4]
   388a0:	mov	r3, #0
   388a4:	sub	r2, r2, #4
   388a8:	ldr	r1, [r2, #4]!
   388ac:	cmp	r4, r1
   388b0:	bcc	388c4 <fts_children@@Base+0x6e28>
   388b4:	ldr	r1, [r8, #8]
   388b8:	ldr	r1, [r1, r3, lsl #2]
   388bc:	cmp	r4, r1
   388c0:	bls	387f0 <fts_children@@Base+0x6d54>
   388c4:	add	r3, r3, #1
   388c8:	cmp	r3, ip
   388cc:	bne	388a8 <fts_children@@Base+0x6e0c>
   388d0:	ldrb	r3, [r8, #16]
   388d4:	tst	r3, #1
   388d8:	bne	38700 <fts_children@@Base+0x6c64>
   388dc:	b	386fc <fts_children@@Base+0x6c60>
   388e0:	cmp	r1, #247	; 0xf7
   388e4:	bhi	38910 <fts_children@@Base+0x6e74>
   388e8:	cmp	ip, #143	; 0x8f
   388ec:	cmpls	r1, #240	; 0xf0
   388f0:	movne	r7, #4
   388f4:	bne	38850 <fts_children@@Base+0x6db4>
   388f8:	b	386fc <fts_children@@Base+0x6c60>
   388fc:	eor	ip, ip, #128	; 0x80
   38900:	cmp	ip, #63	; 0x3f
   38904:	movls	r7, #2
   38908:	bls	38700 <fts_children@@Base+0x6c64>
   3890c:	b	386fc <fts_children@@Base+0x6c60>
   38910:	cmp	r1, #251	; 0xfb
   38914:	bhi	3892c <fts_children@@Base+0x6e90>
   38918:	cmp	ip, #135	; 0x87
   3891c:	cmpls	r1, #248	; 0xf8
   38920:	movne	r7, #5
   38924:	bne	38850 <fts_children@@Base+0x6db4>
   38928:	b	386fc <fts_children@@Base+0x6c60>
   3892c:	cmp	r1, #253	; 0xfd
   38930:	bhi	386fc <fts_children@@Base+0x6c60>
   38934:	cmp	ip, #131	; 0x83
   38938:	cmpls	r1, #252	; 0xfc
   3893c:	beq	386fc <fts_children@@Base+0x6c60>
   38940:	mov	r7, #6
   38944:	b	38850 <fts_children@@Base+0x6db4>
   38948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3894c:	mov	fp, r0
   38950:	sub	sp, sp, #92	; 0x5c
   38954:	ldr	r0, [r0, #84]	; 0x54
   38958:	mov	ip, r1
   3895c:	mov	r7, r2
   38960:	str	r1, [sp, #36]	; 0x24
   38964:	ldr	r2, [sp, #132]	; 0x84
   38968:	ldr	r1, [fp, #120]	; 0x78
   3896c:	str	r0, [sp, #20]
   38970:	add	r2, r2, r1
   38974:	ldr	r0, [r0]
   38978:	ldr	r1, [pc, #1448]	; 38f28 <fts_children@@Base+0x748c>
   3897c:	ldr	r4, [ip, #4]
   38980:	mov	r5, r3
   38984:	ldr	r1, [r1]
   38988:	ldr	r3, [r0, r7, lsl #3]
   3898c:	mov	r6, #0
   38990:	cmp	r2, r4
   38994:	str	r3, [sp, #28]
   38998:	str	r1, [sp, #84]	; 0x54
   3899c:	str	r6, [sp, #52]	; 0x34
   389a0:	bge	38e90 <fts_children@@Base+0x73f4>
   389a4:	ldr	r3, [sp, #36]	; 0x24
   389a8:	ldr	r2, [fp, #100]	; 0x64
   389ac:	ldr	r4, [r3]
   389b0:	str	r2, [sp, #40]	; 0x28
   389b4:	ldr	r8, [r3, #8]
   389b8:	ldr	r2, [fp, #40]	; 0x28
   389bc:	cmp	r4, #0
   389c0:	str	r2, [sp, #44]	; 0x2c
   389c4:	str	r8, [fp, #100]	; 0x64
   389c8:	ldr	r2, [fp, #88]	; 0x58
   389cc:	beq	38e08 <fts_children@@Base+0x736c>
   389d0:	str	r4, [fp, #40]	; 0x28
   389d4:	sub	r1, r4, #1
   389d8:	mov	r0, fp
   389dc:	bl	35c00 <fts_children@@Base+0x4164>
   389e0:	cmp	r4, r5
   389e4:	mov	r6, r0
   389e8:	beq	38e1c <fts_children@@Base+0x7380>
   389ec:	ldr	sl, [r8, r4, lsl #2]
   389f0:	cmp	sl, #0
   389f4:	beq	38e78 <fts_children@@Base+0x73dc>
   389f8:	ldrb	r3, [sl, #52]	; 0x34
   389fc:	ands	r3, r3, #64	; 0x40
   38a00:	bne	38cfc <fts_children@@Base+0x7260>
   38a04:	add	r2, sp, #60	; 0x3c
   38a08:	str	r2, [sp, #8]
   38a0c:	str	r3, [sp, #60]	; 0x3c
   38a10:	str	r3, [sp, #64]	; 0x40
   38a14:	str	r3, [sp, #68]	; 0x44
   38a18:	ldr	r3, [sp, #132]	; 0x84
   38a1c:	cmp	r4, r3
   38a20:	bge	38c94 <fts_children@@Base+0x71f8>
   38a24:	ldr	r3, [fp, #120]	; 0x78
   38a28:	cmp	r3, #0
   38a2c:	blt	38c94 <fts_children@@Base+0x71f8>
   38a30:	mov	r3, #0
   38a34:	str	r3, [sp, #12]
   38a38:	ldr	r3, [fp, #100]	; 0x64
   38a3c:	add	r8, r4, #1
   38a40:	ldr	r1, [r3, r8, lsl #2]
   38a44:	mov	r3, #0
   38a48:	str	r3, [sp, #64]	; 0x40
   38a4c:	cmp	r1, r3
   38a50:	lsl	r3, r8, #2
   38a54:	sub	r4, r8, #1
   38a58:	str	r3, [sp, #16]
   38a5c:	beq	38d98 <fts_children@@Base+0x72fc>
   38a60:	add	r1, r1, #4
   38a64:	ldr	r0, [sp, #8]
   38a68:	bl	344b8 <fts_children@@Base+0x2a1c>
   38a6c:	cmp	r0, #0
   38a70:	str	r0, [sp, #52]	; 0x34
   38a74:	bne	38db8 <fts_children@@Base+0x731c>
   38a78:	cmp	sl, #0
   38a7c:	beq	38bd8 <fts_children@@Base+0x713c>
   38a80:	ldr	r3, [sl, #20]
   38a84:	ldr	r6, [fp, #84]	; 0x54
   38a88:	cmp	r3, #0
   38a8c:	mov	r3, #0
   38a90:	str	r3, [sp, #56]	; 0x38
   38a94:	str	r3, [sp, #72]	; 0x48
   38a98:	str	r3, [sp, #76]	; 0x4c
   38a9c:	str	r3, [sp, #80]	; 0x50
   38aa0:	ble	38f1c <fts_children@@Base+0x7480>
   38aa4:	mov	r7, r3
   38aa8:	add	r3, r6, #128	; 0x80
   38aac:	str	r3, [sp, #24]
   38ab0:	str	r8, [sp, #32]
   38ab4:	b	38af8 <fts_children@@Base+0x705c>
   38ab8:	mov	r2, r4
   38abc:	mov	r0, fp
   38ac0:	bl	35cf0 <fts_children@@Base+0x4254>
   38ac4:	cmp	r0, #0
   38ac8:	beq	38ae8 <fts_children@@Base+0x704c>
   38acc:	lsl	r9, r8, #2
   38ad0:	ldr	r3, [r6, #12]
   38ad4:	ldr	r0, [sp, #8]
   38ad8:	ldr	r1, [r3, r9]
   38adc:	bl	32a54 <fts_children@@Base+0xfb8>
   38ae0:	cmp	r0, #0
   38ae4:	beq	38da8 <fts_children@@Base+0x730c>
   38ae8:	ldr	r3, [sl, #20]
   38aec:	add	r7, r7, #1
   38af0:	cmp	r7, r3
   38af4:	bge	38dc8 <fts_children@@Base+0x732c>
   38af8:	ldr	r3, [sl, #24]
   38afc:	ldr	r0, [r6]
   38b00:	ldr	r8, [r3, r7, lsl #2]
   38b04:	lsl	r9, r8, #3
   38b08:	add	r1, r0, r9
   38b0c:	ldrb	r3, [r1, #6]
   38b10:	tst	r3, #16
   38b14:	beq	38ab8 <fts_children@@Base+0x701c>
   38b18:	str	r4, [sp]
   38b1c:	mov	r3, fp
   38b20:	mov	r2, r8
   38b24:	ldr	r1, [sp, #24]
   38b28:	bl	38698 <fts_children@@Base+0x6bfc>
   38b2c:	cmp	r0, #1
   38b30:	ble	38d84 <fts_children@@Base+0x72e8>
   38b34:	ldr	r2, [fp, #100]	; 0x64
   38b38:	add	r5, r4, r0
   38b3c:	ldr	r3, [r6, #12]
   38b40:	ldr	r1, [r2, r5, lsl #2]
   38b44:	lsl	r9, r8, #2
   38b48:	cmp	r1, #0
   38b4c:	ldr	r8, [r3, r8, lsl #2]
   38b50:	mov	r3, #0
   38b54:	str	r3, [sp, #76]	; 0x4c
   38b58:	beq	38b74 <fts_children@@Base+0x70d8>
   38b5c:	add	r1, r1, #4
   38b60:	add	r0, sp, #72	; 0x48
   38b64:	bl	344b8 <fts_children@@Base+0x2a1c>
   38b68:	cmp	r0, #0
   38b6c:	str	r0, [sp, #56]	; 0x38
   38b70:	bne	38bbc <fts_children@@Base+0x7120>
   38b74:	mov	r1, r8
   38b78:	add	r0, sp, #72	; 0x48
   38b7c:	bl	32a54 <fts_children@@Base+0xfb8>
   38b80:	cmp	r0, #0
   38b84:	beq	38da8 <fts_children@@Base+0x730c>
   38b88:	add	r2, sp, #72	; 0x48
   38b8c:	mov	r1, r6
   38b90:	add	r0, sp, #56	; 0x38
   38b94:	ldr	r8, [fp, #100]	; 0x64
   38b98:	bl	354e8 <fts_children@@Base+0x3a4c>
   38b9c:	ldr	r3, [fp, #100]	; 0x64
   38ba0:	str	r0, [r8, r5, lsl #2]
   38ba4:	ldr	r3, [r3, r5, lsl #2]
   38ba8:	cmp	r3, #0
   38bac:	bne	38ad0 <fts_children@@Base+0x7034>
   38bb0:	ldr	r3, [sp, #56]	; 0x38
   38bb4:	cmp	r3, #0
   38bb8:	beq	38ad0 <fts_children@@Base+0x7034>
   38bbc:	ldr	r0, [sp, #80]	; 0x50
   38bc0:	ldr	r8, [sp, #32]
   38bc4:	bl	12154 <free@plt>
   38bc8:	ldr	r3, [sp, #56]	; 0x38
   38bcc:	cmp	r3, #0
   38bd0:	str	r3, [sp, #52]	; 0x34
   38bd4:	bne	38db8 <fts_children@@Base+0x731c>
   38bd8:	ldr	r3, [sp, #64]	; 0x40
   38bdc:	mov	r5, r8
   38be0:	cmp	r3, #0
   38be4:	beq	38c30 <fts_children@@Base+0x7194>
   38be8:	ldr	r3, [sp, #136]	; 0x88
   38bec:	ldr	r2, [sp, #28]
   38bf0:	ldr	r1, [sp, #8]
   38bf4:	ldr	r0, [sp, #20]
   38bf8:	bl	348a0 <fts_children@@Base+0x2e04>
   38bfc:	cmp	r0, #0
   38c00:	str	r0, [sp, #52]	; 0x34
   38c04:	bne	38db8 <fts_children@@Base+0x731c>
   38c08:	ldr	r3, [sp, #136]	; 0x88
   38c0c:	mov	r2, r8
   38c10:	str	r3, [sp]
   38c14:	ldr	r1, [sp, #8]
   38c18:	ldr	r3, [sp, #28]
   38c1c:	mov	r0, fp
   38c20:	bl	357ac <fts_children@@Base+0x3d10>
   38c24:	cmp	r0, #0
   38c28:	str	r0, [sp, #52]	; 0x34
   38c2c:	bne	38db8 <fts_children@@Base+0x731c>
   38c30:	ldr	r2, [fp, #88]	; 0x58
   38c34:	mov	r1, r4
   38c38:	mov	r0, fp
   38c3c:	bl	35c00 <fts_children@@Base+0x4164>
   38c40:	ldr	r2, [sp, #8]
   38c44:	ldr	r1, [sp, #20]
   38c48:	mov	r3, r0
   38c4c:	add	r0, sp, #52	; 0x34
   38c50:	bl	351fc <fts_children@@Base+0x3760>
   38c54:	subs	sl, r0, #0
   38c58:	beq	38de0 <fts_children@@Base+0x7344>
   38c5c:	mov	r2, #0
   38c60:	str	r2, [sp, #12]
   38c64:	ldr	r3, [fp, #100]	; 0x64
   38c68:	ldr	r2, [sp, #16]
   38c6c:	str	sl, [r3, r2]
   38c70:	ldr	r2, [sp, #132]	; 0x84
   38c74:	cmp	r2, r8
   38c78:	ble	38c90 <fts_children@@Base+0x71f4>
   38c7c:	ldr	r2, [fp, #120]	; 0x78
   38c80:	ldr	r1, [sp, #12]
   38c84:	add	r8, r8, #1
   38c88:	cmp	r2, r1
   38c8c:	bge	38a40 <fts_children@@Base+0x6fa4>
   38c90:	mov	r4, r5
   38c94:	ldr	r0, [sp, #68]	; 0x44
   38c98:	bl	12154 <free@plt>
   38c9c:	ldr	r3, [fp, #100]	; 0x64
   38ca0:	ldr	r2, [sp, #132]	; 0x84
   38ca4:	ldr	r3, [r3, r2, lsl #2]
   38ca8:	cmp	r3, #0
   38cac:	beq	38efc <fts_children@@Base+0x7460>
   38cb0:	ldr	r2, [sp, #36]	; 0x24
   38cb4:	add	r1, r3, #12
   38cb8:	str	r4, [r2]
   38cbc:	ldr	r2, [sp, #44]	; 0x2c
   38cc0:	str	r2, [fp, #40]	; 0x28
   38cc4:	ldr	r2, [sp, #40]	; 0x28
   38cc8:	ldr	r0, [r3, #8]
   38ccc:	str	r2, [fp, #100]	; 0x64
   38cd0:	ldr	r2, [sp, #128]	; 0x80
   38cd4:	bl	33f6c <fts_children@@Base+0x24d0>
   38cd8:	clz	r0, r0
   38cdc:	lsr	r0, r0, #5
   38ce0:	ldr	r3, [pc, #576]	; 38f28 <fts_children@@Base+0x748c>
   38ce4:	ldr	r2, [sp, #84]	; 0x54
   38ce8:	ldr	r3, [r3]
   38cec:	cmp	r2, r3
   38cf0:	bne	38f24 <fts_children@@Base+0x7488>
   38cf4:	add	sp, sp, #92	; 0x5c
   38cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   38cfc:	add	r3, sp, #60	; 0x3c
   38d00:	mov	r0, r3
   38d04:	add	r1, sl, #4
   38d08:	str	r3, [sp, #8]
   38d0c:	bl	35048 <fts_children@@Base+0x35ac>
   38d10:	cmp	r0, #0
   38d14:	str	r0, [sp, #52]	; 0x34
   38d18:	bne	38ce0 <fts_children@@Base+0x7244>
   38d1c:	ldrb	r3, [sl, #52]	; 0x34
   38d20:	tst	r3, #64	; 0x40
   38d24:	beq	38a18 <fts_children@@Base+0x6f7c>
   38d28:	ldr	r3, [sp, #64]	; 0x40
   38d2c:	cmp	r3, #0
   38d30:	beq	38d5c <fts_children@@Base+0x72c0>
   38d34:	ldr	r3, [sp, #136]	; 0x88
   38d38:	mov	r2, r4
   38d3c:	str	r3, [sp]
   38d40:	ldr	r1, [sp, #8]
   38d44:	ldr	r3, [sp, #28]
   38d48:	mov	r0, fp
   38d4c:	bl	357ac <fts_children@@Base+0x3d10>
   38d50:	cmp	r0, #0
   38d54:	str	r0, [sp, #52]	; 0x34
   38d58:	bne	38db8 <fts_children@@Base+0x731c>
   38d5c:	mov	r3, r6
   38d60:	ldr	r2, [sp, #8]
   38d64:	ldr	r1, [sp, #20]
   38d68:	add	r0, sp, #52	; 0x34
   38d6c:	bl	351fc <fts_children@@Base+0x3760>
   38d70:	subs	sl, r0, #0
   38d74:	beq	38ee4 <fts_children@@Base+0x7448>
   38d78:	ldr	r3, [fp, #100]	; 0x64
   38d7c:	str	sl, [r3, r4, lsl #2]
   38d80:	b	38a18 <fts_children@@Base+0x6f7c>
   38d84:	cmp	r0, #0
   38d88:	ldreq	r1, [r6]
   38d8c:	addeq	r1, r1, r9
   38d90:	beq	38ab8 <fts_children@@Base+0x701c>
   38d94:	b	38acc <fts_children@@Base+0x7030>
   38d98:	cmp	sl, #0
   38d9c:	bne	38a80 <fts_children@@Base+0x6fe4>
   38da0:	mov	r5, r8
   38da4:	b	38c30 <fts_children@@Base+0x7194>
   38da8:	ldr	r0, [sp, #80]	; 0x50
   38dac:	bl	12154 <free@plt>
   38db0:	mov	r3, #12
   38db4:	str	r3, [sp, #52]	; 0x34
   38db8:	ldr	r0, [sp, #68]	; 0x44
   38dbc:	bl	12154 <free@plt>
   38dc0:	ldr	r0, [sp, #52]	; 0x34
   38dc4:	b	38ce0 <fts_children@@Base+0x7244>
   38dc8:	ldr	r8, [sp, #32]
   38dcc:	ldr	r0, [sp, #80]	; 0x50
   38dd0:	bl	12154 <free@plt>
   38dd4:	mov	r3, #0
   38dd8:	str	r3, [sp, #52]	; 0x34
   38ddc:	b	38bd8 <fts_children@@Base+0x713c>
   38de0:	ldr	r3, [sp, #52]	; 0x34
   38de4:	cmp	r3, #0
   38de8:	bne	38db8 <fts_children@@Base+0x731c>
   38dec:	ldr	r2, [sp, #12]
   38df0:	ldr	r3, [fp, #100]	; 0x64
   38df4:	add	r2, r2, #1
   38df8:	str	r2, [sp, #12]
   38dfc:	ldr	r2, [sp, #16]
   38e00:	str	sl, [r3, r2]
   38e04:	b	38c70 <fts_children@@Base+0x71d4>
   38e08:	str	r5, [fp, #40]	; 0x28
   38e0c:	sub	r1, r5, #1
   38e10:	mov	r0, fp
   38e14:	bl	35c00 <fts_children@@Base+0x4164>
   38e18:	mov	r6, r0
   38e1c:	mov	r3, #1
   38e20:	mov	r0, #4
   38e24:	str	r3, [sp, #60]	; 0x3c
   38e28:	str	r3, [sp, #64]	; 0x40
   38e2c:	bl	123dc <malloc@plt>
   38e30:	cmp	r0, #0
   38e34:	str	r0, [sp, #68]	; 0x44
   38e38:	beq	38ef4 <fts_children@@Base+0x7458>
   38e3c:	add	r3, sp, #60	; 0x3c
   38e40:	str	r3, [sp, #8]
   38e44:	mov	r1, r3
   38e48:	mov	ip, #0
   38e4c:	str	r7, [r0]
   38e50:	ldr	r3, [sp, #136]	; 0x88
   38e54:	ldr	r2, [sp, #28]
   38e58:	ldr	r0, [sp, #20]
   38e5c:	str	ip, [sp, #52]	; 0x34
   38e60:	bl	348a0 <fts_children@@Base+0x2e04>
   38e64:	cmp	r0, #0
   38e68:	str	r0, [sp, #52]	; 0x34
   38e6c:	moveq	r4, r5
   38e70:	beq	38d28 <fts_children@@Base+0x728c>
   38e74:	b	38db8 <fts_children@@Base+0x731c>
   38e78:	add	r3, sp, #60	; 0x3c
   38e7c:	str	r3, [sp, #8]
   38e80:	str	sl, [sp, #60]	; 0x3c
   38e84:	str	sl, [sp, #64]	; 0x40
   38e88:	str	sl, [sp, #68]	; 0x44
   38e8c:	b	38a18 <fts_children@@Base+0x6f7c>
   38e90:	mvn	r3, #-2147483648	; 0x80000000
   38e94:	add	r8, r2, #1
   38e98:	sub	r3, r3, r4
   38e9c:	cmp	r3, r8
   38ea0:	blt	38ef4 <fts_children@@Base+0x7458>
   38ea4:	add	r9, r4, r8
   38ea8:	cmn	r9, #-1073741823	; 0xc0000001
   38eac:	bhi	38ef4 <fts_children@@Base+0x7458>
   38eb0:	ldr	sl, [sp, #36]	; 0x24
   38eb4:	lsl	r1, r9, #2
   38eb8:	ldr	r0, [sl, #8]
   38ebc:	bl	12268 <realloc@plt>
   38ec0:	cmp	r0, #0
   38ec4:	beq	38ef4 <fts_children@@Base+0x7458>
   38ec8:	str	r0, [sl, #8]
   38ecc:	str	r9, [sl, #4]
   38ed0:	lsl	r2, r8, #2
   38ed4:	mov	r1, r6
   38ed8:	add	r0, r0, r4, lsl #2
   38edc:	bl	12514 <memset@plt>
   38ee0:	b	389a4 <fts_children@@Base+0x6f08>
   38ee4:	ldr	r3, [sp, #52]	; 0x34
   38ee8:	cmp	r3, #0
   38eec:	beq	38d78 <fts_children@@Base+0x72dc>
   38ef0:	b	38db8 <fts_children@@Base+0x731c>
   38ef4:	mov	r0, #12
   38ef8:	b	38ce0 <fts_children@@Base+0x7244>
   38efc:	ldr	r3, [sp, #36]	; 0x24
   38f00:	mov	r0, #1
   38f04:	str	r4, [r3]
   38f08:	ldr	r3, [sp, #40]	; 0x28
   38f0c:	str	r3, [fp, #100]	; 0x64
   38f10:	ldr	r3, [sp, #44]	; 0x2c
   38f14:	str	r3, [fp, #40]	; 0x28
   38f18:	b	38ce0 <fts_children@@Base+0x7244>
   38f1c:	mov	r0, #0
   38f20:	b	38dd0 <fts_children@@Base+0x7334>
   38f24:	bl	12244 <__stack_chk_fail@plt>
   38f28:	andeq	fp, r5, r0, ror #24
   38f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   38f30:	add	fp, sp, #32
   38f34:	mov	r5, r1
   38f38:	ldr	r1, [pc, #1780]	; 39634 <fts_children@@Base+0x7b98>
   38f3c:	sub	sp, sp, #84	; 0x54
   38f40:	ldrb	ip, [fp, #4]
   38f44:	mov	sl, r3
   38f48:	ldr	r3, [r0]
   38f4c:	ldr	lr, [r1]
   38f50:	str	r3, [fp, #-76]	; 0xffffffb4
   38f54:	mov	r1, #0
   38f58:	mov	r3, #2
   38f5c:	cmp	ip, #0
   38f60:	str	r2, [fp, #-80]	; 0xffffffb0
   38f64:	str	lr, [fp, #-40]	; 0xffffffd8
   38f68:	str	r1, [fp, #-52]	; 0xffffffcc
   38f6c:	str	r1, [fp, #-44]	; 0xffffffd4
   38f70:	str	r3, [fp, #-48]	; 0xffffffd0
   38f74:	beq	3957c <fts_children@@Base+0x7ae0>
   38f78:	mov	r0, #48	; 0x30
   38f7c:	bl	123dc <malloc@plt>
   38f80:	cmp	r0, #0
   38f84:	subne	r3, fp, #52	; 0x34
   38f88:	str	r0, [fp, #-44]	; 0xffffffd4
   38f8c:	strne	r3, [fp, #-72]	; 0xffffffb8
   38f90:	beq	3950c <fts_children@@Base+0x7a70>
   38f94:	ldr	r3, [fp, #-80]	; 0xffffffb0
   38f98:	ldr	r1, [fp, #-76]	; 0xffffffb4
   38f9c:	lsl	r2, r3, #3
   38fa0:	cmp	r2, #4032	; 0xfc0
   38fa4:	mov	r3, #0
   38fa8:	str	r2, [fp, #-92]	; 0xffffffa4
   38fac:	str	r3, [fp, #-60]	; 0xffffffc4
   38fb0:	str	r3, [fp, #-64]	; 0xffffffc0
   38fb4:	str	r3, [fp, #-56]	; 0xffffffc8
   38fb8:	ldr	r4, [r1, #72]	; 0x48
   38fbc:	bcs	39584 <fts_children@@Base+0x7ae8>
   38fc0:	sub	sp, sp, r2
   38fc4:	str	r3, [fp, #-100]	; 0xffffff9c
   38fc8:	add	r3, sp, #8
   38fcc:	str	r3, [fp, #-96]	; 0xffffffa0
   38fd0:	ldr	r2, [fp, #-92]	; 0xffffffa4
   38fd4:	mov	r1, sl
   38fd8:	ldr	r0, [fp, #-96]	; 0xffffffa0
   38fdc:	bl	121a8 <memcpy@plt>
   38fe0:	mov	r3, sl
   38fe4:	ldr	r6, [r3], #4
   38fe8:	str	r3, [fp, #-104]	; 0xffffff98
   38fec:	str	r6, [fp, #-68]	; 0xffffffbc
   38ff0:	b	390b8 <fts_children@@Base+0x761c>
   38ff4:	cmp	r2, #9
   38ff8:	beq	3924c <fts_children@@Base+0x77b0>
   38ffc:	cmp	r3, r6
   39000:	bne	39010 <fts_children@@Base+0x7574>
   39004:	ldr	r3, [r5, #96]	; 0x60
   39008:	cmp	r3, r4
   3900c:	beq	393f4 <fts_children@@Base+0x7958>
   39010:	ldr	r6, [r5, #84]	; 0x54
   39014:	ldr	r0, [r6]
   39018:	add	r1, r0, r7
   3901c:	ldrb	r3, [r1, #4]
   39020:	tst	r3, #8
   39024:	bne	39110 <fts_children@@Base+0x7674>
   39028:	ldrb	r2, [r1, #6]
   3902c:	tst	r2, #16
   39030:	bne	39298 <fts_children@@Base+0x77fc>
   39034:	cmp	r3, #4
   39038:	beq	392c8 <fts_children@@Base+0x782c>
   3903c:	ldr	r9, [fp, #-68]	; 0xffffffbc
   39040:	mov	r2, r9
   39044:	mov	r0, r5
   39048:	bl	35cf0 <fts_children@@Base+0x4254>
   3904c:	cmp	r0, #0
   39050:	beq	391c4 <fts_children@@Base+0x7728>
   39054:	ldr	r3, [r6, #12]
   39058:	add	r9, r9, #1
   3905c:	ldr	r4, [r3, r8, lsl #2]
   39060:	ldr	r3, [fp, #-72]	; 0xffffffb8
   39064:	str	r9, [fp, #-68]	; 0xffffffbc
   39068:	cmp	r3, #0
   3906c:	beq	390a4 <fts_children@@Base+0x7608>
   39070:	ldr	r3, [r5, #92]	; 0x5c
   39074:	cmp	r9, r3
   39078:	bgt	391d0 <fts_children@@Base+0x7734>
   3907c:	ldr	r3, [r5, #100]	; 0x64
   39080:	ldr	r3, [r3, r9, lsl #2]
   39084:	cmp	r3, #0
   39088:	beq	391d0 <fts_children@@Base+0x7734>
   3908c:	mov	r2, r4
   39090:	add	r1, r3, #12
   39094:	ldr	r0, [r3, #8]
   39098:	bl	33f6c <fts_children@@Base+0x24d0>
   3909c:	cmp	r0, #0
   390a0:	beq	391d0 <fts_children@@Base+0x7734>
   390a4:	mov	r3, #0
   390a8:	str	r3, [fp, #-60]	; 0xffffffc4
   390ac:	cmp	r4, #0
   390b0:	blt	391bc <fts_children@@Base+0x7720>
   390b4:	ldr	r6, [fp, #-68]	; 0xffffffbc
   390b8:	ldr	r3, [sl, #4]
   390bc:	cmp	r3, r6
   390c0:	blt	39204 <fts_children@@Base+0x7768>
   390c4:	ldr	r2, [fp, #-76]	; 0xffffffb4
   390c8:	lsl	r7, r4, #3
   390cc:	mov	r8, r4
   390d0:	ldr	r1, [r2]
   390d4:	add	r0, r1, r7
   390d8:	ldrb	r2, [r0, #4]
   390dc:	cmp	r2, #8
   390e0:	bne	38ff4 <fts_children@@Base+0x7558>
   390e4:	ldr	r2, [r1, r4, lsl #3]
   390e8:	ldr	r1, [fp, #-80]	; 0xffffffb0
   390ec:	add	r2, r2, #1
   390f0:	cmp	r1, r2
   390f4:	ble	38ffc <fts_children@@Base+0x7560>
   390f8:	add	r3, sl, r2, lsl #3
   390fc:	str	r6, [sl, r2, lsl #3]
   39100:	mvn	r2, #0
   39104:	str	r2, [r3, #4]
   39108:	ldr	r3, [sl, #4]
   3910c:	b	38ffc <fts_children@@Base+0x7560>
   39110:	ldr	r0, [r6, #20]
   39114:	ldr	r2, [fp, #-68]	; 0xffffffbc
   39118:	ldr	r3, [r5, #100]	; 0x64
   3911c:	add	ip, r4, r4, lsl #1
   39120:	mov	r1, r4
   39124:	add	r4, r0, ip, lsl #2
   39128:	sub	r0, fp, #64	; 0x40
   3912c:	ldr	r8, [r3, r2, lsl #2]
   39130:	bl	32a54 <fts_children@@Base+0xfb8>
   39134:	cmp	r0, #0
   39138:	beq	394ec <fts_children@@Base+0x7a50>
   3913c:	ldr	r2, [r4, #4]
   39140:	cmp	r2, #0
   39144:	ble	391c4 <fts_children@@Base+0x7728>
   39148:	ldr	r3, [r4, #8]
   3914c:	ldr	r1, [r8, #8]
   39150:	sub	r9, r3, #4
   39154:	add	r8, r8, #12
   39158:	str	r5, [fp, #-84]	; 0xffffffac
   3915c:	str	sl, [fp, #-88]	; 0xffffffa8
   39160:	mvn	r4, #0
   39164:	mov	sl, r9
   39168:	mov	r6, #0
   3916c:	mov	r9, r8
   39170:	mov	r5, r1
   39174:	mov	r8, r2
   39178:	ldr	r7, [sl, #4]!
   3917c:	mov	r1, r9
   39180:	mov	r2, r7
   39184:	mov	r0, r5
   39188:	bl	33f6c <fts_children@@Base+0x24d0>
   3918c:	cmp	r0, #0
   39190:	beq	391a0 <fts_children@@Base+0x7704>
   39194:	cmn	r4, #1
   39198:	bne	39330 <fts_children@@Base+0x7894>
   3919c:	mov	r4, r7
   391a0:	add	r6, r6, #1
   391a4:	cmp	r8, r6
   391a8:	bne	39178 <fts_children@@Base+0x76dc>
   391ac:	cmp	r4, #0
   391b0:	ldr	r5, [fp, #-84]	; 0xffffffac
   391b4:	ldr	sl, [fp, #-88]	; 0xffffffa8
   391b8:	bge	390b4 <fts_children@@Base+0x7618>
   391bc:	cmn	r4, #2
   391c0:	beq	394ec <fts_children@@Base+0x7a50>
   391c4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   391c8:	cmp	r3, #0
   391cc:	beq	395d8 <fts_children@@Base+0x7b3c>
   391d0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   391d4:	sub	r3, fp, #64	; 0x40
   391d8:	str	r3, [sp, #4]
   391dc:	str	sl, [sp]
   391e0:	ldr	r3, [fp, #-80]	; 0xffffffb0
   391e4:	sub	r2, fp, #68	; 0x44
   391e8:	add	r1, r0, #8
   391ec:	bl	376b8 <fts_children@@Base+0x5c1c>
   391f0:	ldr	r6, [fp, #-68]	; 0xffffffbc
   391f4:	ldr	r3, [sl, #4]
   391f8:	cmp	r3, r6
   391fc:	mov	r4, r0
   39200:	bge	390c4 <fts_children@@Base+0x7628>
   39204:	ldr	r0, [fp, #-56]	; 0xffffffc8
   39208:	bl	12154 <free@plt>
   3920c:	ldr	r3, [fp, #-100]	; 0xffffff9c
   39210:	cmp	r3, #0
   39214:	bne	395b4 <fts_children@@Base+0x7b18>
   39218:	ldr	r3, [fp, #-72]	; 0xffffffb8
   3921c:	cmp	r3, #0
   39220:	beq	3922c <fts_children@@Base+0x7790>
   39224:	mov	r0, r3
   39228:	bl	3765c <fts_children@@Base+0x5bc0>
   3922c:	mov	r0, #0
   39230:	ldr	r3, [pc, #1020]	; 39634 <fts_children@@Base+0x7b98>
   39234:	ldr	r2, [fp, #-40]	; 0xffffffd8
   39238:	ldr	r3, [r3]
   3923c:	cmp	r2, r3
   39240:	bne	39630 <fts_children@@Base+0x7b94>
   39244:	sub	sp, fp, #32
   39248:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3924c:	ldr	r2, [r0]
   39250:	ldr	r1, [fp, #-80]	; 0xffffffb0
   39254:	add	r2, r2, #1
   39258:	cmp	r1, r2
   3925c:	ble	38ffc <fts_children@@Base+0x7560>
   39260:	ldr	r3, [sl, r2, lsl #3]
   39264:	add	r1, sl, r2, lsl #3
   39268:	cmp	r3, r6
   3926c:	blt	39514 <fts_children@@Base+0x7a78>
   39270:	ldrb	r3, [r0, #6]
   39274:	tst	r3, #8
   39278:	beq	3928c <fts_children@@Base+0x77f0>
   3927c:	ldr	r0, [fp, #-96]	; 0xffffffa0
   39280:	ldr	r3, [r0, r2, lsl #3]
   39284:	cmn	r3, #1
   39288:	bne	39530 <fts_children@@Base+0x7a94>
   3928c:	str	r6, [r1, #4]
   39290:	ldr	r3, [sl, #4]
   39294:	b	38ffc <fts_children@@Base+0x7560>
   39298:	ldr	r3, [fp, #-68]	; 0xffffffbc
   3929c:	mov	r2, r4
   392a0:	str	r3, [sp]
   392a4:	add	r1, r6, #128	; 0x80
   392a8:	mov	r3, r5
   392ac:	bl	38698 <fts_children@@Base+0x6bfc>
   392b0:	subs	r9, r0, #0
   392b4:	bne	393ec <fts_children@@Base+0x7950>
   392b8:	ldr	r1, [r6]
   392bc:	ldr	r9, [fp, #-68]	; 0xffffffbc
   392c0:	add	r1, r1, r7
   392c4:	b	39040 <fts_children@@Base+0x75a4>
   392c8:	ldr	r3, [r1]
   392cc:	ldr	r2, [fp, #-72]	; 0xffffffb8
   392d0:	add	r3, r3, #1
   392d4:	cmp	r2, #0
   392d8:	add	r2, sl, r3, lsl #3
   392dc:	ldr	r0, [sl, r3, lsl #3]
   392e0:	ldr	r3, [r2, #4]
   392e4:	sub	r9, r3, r0
   392e8:	beq	393e4 <fts_children@@Base+0x7948>
   392ec:	cmn	r0, #1
   392f0:	cmnne	r3, #1
   392f4:	beq	391d0 <fts_children@@Base+0x7734>
   392f8:	cmp	r9, #0
   392fc:	beq	3948c <fts_children@@Base+0x79f0>
   39300:	ldr	r1, [r5, #4]
   39304:	ldr	r7, [fp, #-68]	; 0xffffffbc
   39308:	add	r0, r1, r0
   3930c:	mov	r2, r9
   39310:	add	r1, r1, r7
   39314:	bl	12208 <memcmp@plt>
   39318:	cmp	r0, #0
   3931c:	bne	391d0 <fts_children@@Base+0x7734>
   39320:	ldr	r3, [r6, #12]
   39324:	add	r9, r7, r9
   39328:	ldr	r4, [r3, r4, lsl #2]
   3932c:	b	39060 <fts_children@@Base+0x75c4>
   39330:	mov	r2, r4
   39334:	sub	r1, fp, #56	; 0x38
   39338:	ldr	r0, [fp, #-60]	; 0xffffffc4
   3933c:	bl	33f6c <fts_children@@Base+0x24d0>
   39340:	ldr	r5, [fp, #-84]	; 0xffffffac
   39344:	ldr	sl, [fp, #-88]	; 0xffffffa8
   39348:	cmp	r0, #0
   3934c:	bne	394e4 <fts_children@@Base+0x7a48>
   39350:	ldr	r2, [fp, #-72]	; 0xffffffb8
   39354:	cmp	r2, #0
   39358:	beq	390ac <fts_children@@Base+0x7610>
   3935c:	ldr	r8, [r2]
   39360:	ldr	r3, [r2, #4]
   39364:	add	r1, r8, #1
   39368:	cmp	r1, r3
   3936c:	str	r1, [r2]
   39370:	ldr	r9, [fp, #-68]	; 0xffffffbc
   39374:	beq	39548 <fts_children@@Base+0x7aac>
   39378:	ldr	r6, [r2, #8]
   3937c:	add	r8, r8, r8, lsl #1
   39380:	ldr	r0, [fp, #-92]	; 0xffffffa4
   39384:	str	r9, [r6, r8, lsl #3]
   39388:	add	r6, r6, r8, lsl #3
   3938c:	str	r7, [r6, #4]
   39390:	bl	123dc <malloc@plt>
   39394:	cmp	r0, #0
   39398:	str	r0, [r6, #8]
   3939c:	beq	393c0 <fts_children@@Base+0x7924>
   393a0:	ldr	r2, [fp, #-92]	; 0xffffffa4
   393a4:	mov	r1, sl
   393a8:	bl	121a8 <memcpy@plt>
   393ac:	sub	r1, fp, #64	; 0x40
   393b0:	add	r0, r6, #12
   393b4:	bl	35048 <fts_children@@Base+0x35ac>
   393b8:	cmp	r0, #0
   393bc:	beq	390ac <fts_children@@Base+0x7610>
   393c0:	ldr	r0, [fp, #-56]	; 0xffffffc8
   393c4:	bl	12154 <free@plt>
   393c8:	ldr	r3, [fp, #-100]	; 0xffffff9c
   393cc:	cmp	r3, #0
   393d0:	bne	395cc <fts_children@@Base+0x7b30>
   393d4:	ldr	r0, [fp, #-72]	; 0xffffffb8
   393d8:	bl	3765c <fts_children@@Base+0x5bc0>
   393dc:	mov	r0, #12
   393e0:	b	39230 <fts_children@@Base+0x7794>
   393e4:	cmp	r9, #0
   393e8:	beq	3948c <fts_children@@Base+0x79f0>
   393ec:	ldr	r7, [fp, #-68]	; 0xffffffbc
   393f0:	b	39320 <fts_children@@Base+0x7884>
   393f4:	ldr	r3, [fp, #-72]	; 0xffffffb8
   393f8:	cmp	r3, #0
   393fc:	beq	39600 <fts_children@@Base+0x7b64>
   39400:	ldr	r1, [fp, #-80]	; 0xffffffb0
   39404:	cmp	r1, #0
   39408:	beq	39438 <fts_children@@Base+0x799c>
   3940c:	ldr	r0, [fp, #-104]	; 0xffffff98
   39410:	mov	r3, #0
   39414:	ldr	r2, [sl, r3, lsl #3]
   39418:	cmp	r2, #0
   3941c:	blt	3942c <fts_children@@Base+0x7990>
   39420:	ldr	r2, [r0, r3, lsl #3]
   39424:	cmn	r2, #1
   39428:	beq	3945c <fts_children@@Base+0x79c0>
   3942c:	add	r3, r3, #1
   39430:	cmp	r1, r3
   39434:	bne	39414 <fts_children@@Base+0x7978>
   39438:	ldr	r0, [fp, #-56]	; 0xffffffc8
   3943c:	bl	12154 <free@plt>
   39440:	ldr	r3, [fp, #-100]	; 0xffffff9c
   39444:	cmp	r3, #0
   39448:	bne	39624 <fts_children@@Base+0x7b88>
   3944c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   39450:	bl	3765c <fts_children@@Base+0x5bc0>
   39454:	mov	r0, #0
   39458:	b	39230 <fts_children@@Base+0x7794>
   3945c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   39460:	sub	r3, fp, #64	; 0x40
   39464:	str	r3, [sp, #4]
   39468:	str	sl, [sp]
   3946c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   39470:	sub	r2, fp, #68	; 0x44
   39474:	add	r1, r0, #8
   39478:	bl	376b8 <fts_children@@Base+0x5c1c>
   3947c:	mov	r4, r0
   39480:	mov	r8, r0
   39484:	lsl	r7, r0, #3
   39488:	b	39010 <fts_children@@Base+0x7574>
   3948c:	mov	r1, r4
   39490:	sub	r0, fp, #64	; 0x40
   39494:	bl	32a54 <fts_children@@Base+0xfb8>
   39498:	cmp	r0, #0
   3949c:	beq	394ec <fts_children@@Base+0x7a50>
   394a0:	ldr	r3, [r6, #20]
   394a4:	add	r4, r4, r4, lsl #1
   394a8:	ldr	r9, [fp, #-68]	; 0xffffffbc
   394ac:	add	r4, r3, r4, lsl #2
   394b0:	ldr	r3, [r5, #100]	; 0x64
   394b4:	ldr	r2, [r4, #8]
   394b8:	ldr	r3, [r3, r9, lsl #2]
   394bc:	ldr	r4, [r2]
   394c0:	add	r1, r3, #12
   394c4:	mov	r2, r4
   394c8:	ldr	r0, [r3, #8]
   394cc:	bl	33f6c <fts_children@@Base+0x24d0>
   394d0:	cmp	r0, #0
   394d4:	bne	390ac <fts_children@@Base+0x7610>
   394d8:	ldr	r1, [r6]
   394dc:	add	r1, r1, r7
   394e0:	b	39040 <fts_children@@Base+0x75a4>
   394e4:	mov	r4, r7
   394e8:	b	390ac <fts_children@@Base+0x7610>
   394ec:	ldr	r0, [fp, #-56]	; 0xffffffc8
   394f0:	bl	12154 <free@plt>
   394f4:	ldr	r3, [fp, #-100]	; 0xffffff9c
   394f8:	cmp	r3, #0
   394fc:	bne	395cc <fts_children@@Base+0x7b30>
   39500:	ldr	r3, [fp, #-72]	; 0xffffffb8
   39504:	cmp	r3, #0
   39508:	bne	393d4 <fts_children@@Base+0x7938>
   3950c:	mov	r0, #12
   39510:	b	39230 <fts_children@@Base+0x7794>
   39514:	str	r6, [r1, #4]
   39518:	ldr	r2, [fp, #-92]	; 0xffffffa4
   3951c:	mov	r1, sl
   39520:	ldr	r0, [fp, #-96]	; 0xffffffa0
   39524:	bl	121a8 <memcpy@plt>
   39528:	ldr	r3, [sl, #4]
   3952c:	b	38ffc <fts_children@@Base+0x7560>
   39530:	mov	r1, r0
   39534:	ldr	r2, [fp, #-92]	; 0xffffffa4
   39538:	mov	r0, sl
   3953c:	bl	121a8 <memcpy@plt>
   39540:	ldr	r3, [sl, #4]
   39544:	b	38ffc <fts_children@@Base+0x7560>
   39548:	ldr	r2, [fp, #-72]	; 0xffffffb8
   3954c:	add	r1, r1, r1, lsl #1
   39550:	ldr	r0, [r2, #8]
   39554:	lsl	r1, r1, #4
   39558:	bl	12268 <realloc@plt>
   3955c:	subs	r6, r0, #0
   39560:	beq	393c0 <fts_children@@Base+0x7924>
   39564:	ldr	r2, [fp, #-72]	; 0xffffffb8
   39568:	ldr	r3, [r2, #4]
   3956c:	str	r6, [r2, #8]
   39570:	lsl	r3, r3, #1
   39574:	str	r3, [r2, #4]
   39578:	b	3937c <fts_children@@Base+0x78e0>
   3957c:	str	ip, [fp, #-72]	; 0xffffffb8
   39580:	b	38f94 <fts_children@@Base+0x74f8>
   39584:	ldr	r0, [fp, #-92]	; 0xffffffa4
   39588:	bl	123dc <malloc@plt>
   3958c:	subs	r3, r0, #0
   39590:	str	r3, [fp, #-96]	; 0xffffffa0
   39594:	movne	r3, #1
   39598:	strne	r3, [fp, #-100]	; 0xffffff9c
   3959c:	bne	38fd0 <fts_children@@Base+0x7534>
   395a0:	ldr	r0, [fp, #-72]	; 0xffffffb8
   395a4:	cmp	r0, #0
   395a8:	beq	3950c <fts_children@@Base+0x7a70>
   395ac:	bl	3765c <fts_children@@Base+0x5bc0>
   395b0:	b	3950c <fts_children@@Base+0x7a70>
   395b4:	ldr	r0, [fp, #-96]	; 0xffffffa0
   395b8:	bl	12154 <free@plt>
   395bc:	ldr	r3, [fp, #-72]	; 0xffffffb8
   395c0:	cmp	r3, #0
   395c4:	bne	39224 <fts_children@@Base+0x7788>
   395c8:	b	3922c <fts_children@@Base+0x7790>
   395cc:	ldr	r0, [fp, #-96]	; 0xffffffa0
   395d0:	bl	12154 <free@plt>
   395d4:	b	39500 <fts_children@@Base+0x7a64>
   395d8:	ldr	r0, [fp, #-56]	; 0xffffffc8
   395dc:	bl	12154 <free@plt>
   395e0:	ldr	r3, [fp, #-100]	; 0xffffff9c
   395e4:	cmp	r3, #0
   395e8:	moveq	r0, #1
   395ec:	beq	39230 <fts_children@@Base+0x7794>
   395f0:	ldr	r0, [fp, #-96]	; 0xffffffa0
   395f4:	bl	12154 <free@plt>
   395f8:	mov	r0, #1
   395fc:	b	39230 <fts_children@@Base+0x7794>
   39600:	ldr	r0, [fp, #-56]	; 0xffffffc8
   39604:	bl	12154 <free@plt>
   39608:	ldr	r3, [fp, #-100]	; 0xffffff9c
   3960c:	cmp	r3, #0
   39610:	beq	3922c <fts_children@@Base+0x7790>
   39614:	ldr	r0, [fp, #-96]	; 0xffffffa0
   39618:	bl	12154 <free@plt>
   3961c:	ldr	r0, [fp, #-72]	; 0xffffffb8
   39620:	b	39230 <fts_children@@Base+0x7794>
   39624:	ldr	r0, [fp, #-96]	; 0xffffffa0
   39628:	bl	12154 <free@plt>
   3962c:	b	3944c <fts_children@@Base+0x79b0>
   39630:	bl	12244 <__stack_chk_fail@plt>
   39634:	andeq	fp, r5, r0, ror #24
   39638:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3963c:	sub	sp, sp, #20
   39640:	mov	ip, r2
   39644:	ldr	r5, [sp, #56]	; 0x38
   39648:	mov	r6, r2
   3964c:	mov	lr, #8
   39650:	ldr	r2, [ip], #8
   39654:	mov	r7, r3
   39658:	str	r3, [sp]
   3965c:	mov	r8, r1
   39660:	ldr	r3, [r6, #4]
   39664:	mov	r1, ip
   39668:	stmib	sp, {r5, lr}
   3966c:	mov	r4, r0
   39670:	bl	38948 <fts_children@@Base+0x6eac>
   39674:	subs	fp, r0, #0
   39678:	beq	39688 <fts_children@@Base+0x7bec>
   3967c:	mov	r0, fp
   39680:	add	sp, sp, #20
   39684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39688:	ldr	r3, [r4, #108]	; 0x6c
   3968c:	ldr	r1, [r4, #112]	; 0x70
   39690:	ldr	r9, [r6, #4]
   39694:	cmp	r3, r1
   39698:	ldr	sl, [r8]
   3969c:	ldr	r0, [r4, #116]	; 0x74
   396a0:	movlt	lr, r9
   396a4:	bge	3972c <fts_children@@Base+0x7c90>
   396a8:	add	r2, r3, r3, lsl #2
   396ac:	cmp	r3, #0
   396b0:	lsl	r2, r2, #2
   396b4:	ble	396d0 <fts_children@@Base+0x7c34>
   396b8:	sub	r1, r2, #20
   396bc:	add	r1, r0, r1
   396c0:	ldr	ip, [r1, #4]
   396c4:	cmp	r5, ip
   396c8:	moveq	ip, #1
   396cc:	strbeq	ip, [r1, #16]
   396d0:	add	ip, r0, r2
   396d4:	cmp	sl, r9
   396d8:	str	r7, [r0, r2]
   396dc:	movne	r1, #0
   396e0:	mvneq	r1, #0
   396e4:	add	r3, r3, #1
   396e8:	mov	r2, #0
   396ec:	stmib	ip, {r5, sl}
   396f0:	str	r9, [ip, #12]
   396f4:	strh	r1, [ip, #18]
   396f8:	str	r3, [r4, #108]	; 0x6c
   396fc:	strb	r2, [ip, #16]
   39700:	ldr	r3, [r4, #120]	; 0x78
   39704:	sub	r9, r9, sl
   39708:	cmp	r3, r9
   3970c:	strlt	r9, [r4, #120]	; 0x78
   39710:	ldr	r1, [r8]
   39714:	add	r5, r5, lr
   39718:	sub	r1, r5, r1
   3971c:	mov	r0, r4
   39720:	add	sp, sp, #20
   39724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39728:	b	3358c <fts_children@@Base+0x1af0>
   3972c:	add	r1, r1, r1, lsl #2
   39730:	lsl	r1, r1, #3
   39734:	bl	12268 <realloc@plt>
   39738:	cmp	r0, #0
   3973c:	beq	39780 <fts_children@@Base+0x7ce4>
   39740:	ldr	r2, [r4, #112]	; 0x70
   39744:	ldr	r3, [r4, #108]	; 0x6c
   39748:	str	r0, [r4, #116]	; 0x74
   3974c:	add	r2, r2, r2, lsl #2
   39750:	add	r3, r3, r3, lsl #2
   39754:	lsl	r2, r2, #2
   39758:	add	r0, r0, r3, lsl #2
   3975c:	mov	r1, fp
   39760:	bl	12514 <memset@plt>
   39764:	ldr	r2, [r4, #112]	; 0x70
   39768:	ldr	lr, [r6, #4]
   3976c:	ldr	r3, [r4, #108]	; 0x6c
   39770:	lsl	r2, r2, #1
   39774:	str	r2, [r4, #112]	; 0x70
   39778:	ldr	r0, [r4, #116]	; 0x74
   3977c:	b	396a8 <fts_children@@Base+0x7c0c>
   39780:	ldr	r0, [r4, #116]	; 0x74
   39784:	bl	12154 <free@plt>
   39788:	mov	fp, #12
   3978c:	b	3967c <fts_children@@Base+0x7be0>
   39790:	ldr	r3, [pc, #1928]	; 39f20 <fts_children@@Base+0x8484>
   39794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39798:	sub	sp, sp, #92	; 0x5c
   3979c:	ldr	r3, [r3]
   397a0:	ldr	r6, [r1]
   397a4:	str	r3, [sp, #84]	; 0x54
   397a8:	ldr	r3, [r0, #84]	; 0x54
   397ac:	cmp	r6, #0
   397b0:	str	r1, [sp, #56]	; 0x38
   397b4:	str	r2, [sp, #36]	; 0x24
   397b8:	str	r3, [sp, #24]
   397bc:	ldr	sl, [r0, #40]	; 0x28
   397c0:	ble	39cd0 <fts_children@@Base+0x8234>
   397c4:	lsl	r3, sl, #2
   397c8:	str	r3, [sp, #44]	; 0x2c
   397cc:	mov	r3, #0
   397d0:	mov	fp, r0
   397d4:	str	r3, [sp, #16]
   397d8:	mov	r9, sl
   397dc:	b	39824 <fts_children@@Base+0x7d88>
   397e0:	tst	r0, #1
   397e4:	beq	39810 <fts_children@@Base+0x7d74>
   397e8:	tst	r3, #8
   397ec:	bne	39810 <fts_children@@Base+0x7d74>
   397f0:	tst	r3, #32
   397f4:	beq	39800 <fts_children@@Base+0x7d64>
   397f8:	tst	r0, #2
   397fc:	beq	39810 <fts_children@@Base+0x7d74>
   39800:	tst	r3, #128	; 0x80
   39804:	beq	39894 <fts_children@@Base+0x7df8>
   39808:	tst	r0, #8
   3980c:	bne	39894 <fts_children@@Base+0x7df8>
   39810:	ldr	r3, [sp, #16]
   39814:	add	r3, r3, #1
   39818:	cmp	r3, r6
   3981c:	str	r3, [sp, #16]
   39820:	bge	39cd0 <fts_children@@Base+0x8234>
   39824:	ldr	r3, [sp, #36]	; 0x24
   39828:	ldr	r1, [sp, #16]
   3982c:	ldr	r2, [r3]
   39830:	ldr	r3, [sp, #24]
   39834:	ldr	sl, [r2, r1, lsl #2]
   39838:	ldr	r3, [r3]
   3983c:	add	r3, r3, sl, lsl #3
   39840:	ldrb	r2, [r3, #4]
   39844:	cmp	r2, #4
   39848:	bne	39810 <fts_children@@Base+0x7d74>
   3984c:	ldr	r4, [r3, #4]
   39850:	ldr	r3, [pc, #1740]	; 39f24 <fts_children@@Base+0x8488>
   39854:	and	r3, r3, r4
   39858:	cmp	r3, #0
   3985c:	beq	39894 <fts_children@@Base+0x7df8>
   39860:	ldr	r2, [fp, #88]	; 0x58
   39864:	mov	r1, r9
   39868:	mov	r0, fp
   3986c:	bl	35c00 <fts_children@@Base+0x4164>
   39870:	ldr	r3, [pc, #1712]	; 39f28 <fts_children@@Base+0x848c>
   39874:	and	r3, r3, r4, lsr #8
   39878:	tst	r3, #4
   3987c:	bne	397e0 <fts_children@@Base+0x7d44>
   39880:	tst	r3, #8
   39884:	beq	397f0 <fts_children@@Base+0x7d54>
   39888:	tst	r0, #1
   3988c:	beq	397f0 <fts_children@@Base+0x7d54>
   39890:	b	39810 <fts_children@@Base+0x7d74>
   39894:	ldr	ip, [fp, #108]	; 0x6c
   39898:	mov	r0, #0
   3989c:	mov	r4, ip
   398a0:	mov	r3, ip
   398a4:	cmp	r0, r3
   398a8:	bge	39904 <fts_children@@Base+0x7e68>
   398ac:	add	r2, r0, r3
   398b0:	ldr	lr, [fp, #116]	; 0x74
   398b4:	add	r2, r2, r2, lsr #31
   398b8:	asr	r2, r2, #1
   398bc:	add	r1, r2, r2, lsl #2
   398c0:	add	r1, lr, r1, lsl #2
   398c4:	ldr	r1, [r1, #4]
   398c8:	cmp	r9, r1
   398cc:	ble	398fc <fts_children@@Base+0x7e60>
   398d0:	b	39afc <fts_children@@Base+0x8060>
   398d4:	add	r3, r2, r0
   398d8:	add	r3, r3, r3, lsr #31
   398dc:	asr	r3, r3, #1
   398e0:	mov	r5, r3
   398e4:	add	r1, r3, r3, lsl #2
   398e8:	add	r1, lr, r1, lsl #2
   398ec:	ldr	r1, [r1, #4]
   398f0:	cmp	r9, r1
   398f4:	bgt	39b04 <fts_children@@Base+0x8068>
   398f8:	mov	r2, r3
   398fc:	cmp	r2, r0
   39900:	bgt	398d4 <fts_children@@Base+0x7e38>
   39904:	cmp	ip, r0
   39908:	ble	39b10 <fts_children@@Base+0x8074>
   3990c:	add	r2, r0, r0, lsl #2
   39910:	ldr	r3, [fp, #116]	; 0x74
   39914:	cmn	r0, #1
   39918:	add	r3, r3, r2, lsl #2
   3991c:	ldr	r1, [r3, #4]
   39920:	sub	r2, r1, r9
   39924:	clz	r2, r2
   39928:	lsr	r2, r2, #5
   3992c:	moveq	r2, #0
   39930:	cmp	r2, #0
   39934:	beq	39b10 <fts_children@@Base+0x8074>
   39938:	add	r3, r3, #20
   3993c:	b	39950 <fts_children@@Base+0x7eb4>
   39940:	add	r3, r3, #20
   39944:	ldrb	r2, [r3, #-24]	; 0xffffffe8
   39948:	cmp	r2, #0
   3994c:	beq	39b10 <fts_children@@Base+0x8074>
   39950:	ldr	r2, [r3, #-20]	; 0xffffffec
   39954:	cmp	sl, r2
   39958:	bne	39940 <fts_children@@Base+0x7ea4>
   3995c:	mov	r3, #0
   39960:	cmp	r4, ip
   39964:	str	r3, [sp, #68]	; 0x44
   39968:	bge	39c84 <fts_children@@Base+0x81e8>
   3996c:	add	r3, sl, sl, lsl #1
   39970:	lsl	r2, sl, #2
   39974:	lsl	r3, r3, #2
   39978:	str	r2, [sp, #40]	; 0x28
   3997c:	str	r3, [sp, #48]	; 0x30
   39980:	ldr	r8, [sp, #24]
   39984:	b	39a10 <fts_children@@Base+0x7f74>
   39988:	str	r0, [sp, #32]
   3998c:	ldr	r1, [r1, #40]	; 0x28
   39990:	mov	r2, r6
   39994:	add	r0, sp, #72	; 0x48
   39998:	bl	350bc <fts_children@@Base+0x3620>
   3999c:	ldr	r3, [sp, #32]
   399a0:	cmp	r0, #0
   399a4:	str	r0, [sp, #68]	; 0x44
   399a8:	bne	39cc0 <fts_children@@Base+0x8224>
   399ac:	add	r2, sp, #72	; 0x48
   399b0:	mov	r1, r8
   399b4:	add	r0, sp, #68	; 0x44
   399b8:	ldr	r7, [fp, #100]	; 0x64
   399bc:	bl	351fc <fts_children@@Base+0x3760>
   399c0:	str	r0, [r7, r5, lsl #2]
   399c4:	ldr	r0, [sp, #80]	; 0x50
   399c8:	bl	12154 <free@plt>
   399cc:	ldr	r3, [fp, #100]	; 0x64
   399d0:	ldr	r2, [r3, r5, lsl #2]
   399d4:	cmp	r2, #0
   399d8:	beq	39ad4 <fts_children@@Base+0x8038>
   399dc:	ldr	r2, [sp, #20]
   399e0:	cmp	r2, #0
   399e4:	bne	39a00 <fts_children@@Base+0x7f64>
   399e8:	ldr	r2, [sp, #44]	; 0x2c
   399ec:	ldr	r3, [r3, r2]
   399f0:	ldr	r2, [sp, #28]
   399f4:	ldr	r3, [r3, #8]
   399f8:	cmp	r3, r2
   399fc:	bgt	39c3c <fts_children@@Base+0x81a0>
   39a00:	ldr	ip, [fp, #108]	; 0x6c
   39a04:	add	r4, r4, #1
   39a08:	cmp	r4, ip
   39a0c:	bge	39c84 <fts_children@@Base+0x81e8>
   39a10:	ldr	r3, [fp, #116]	; 0x74
   39a14:	add	r2, r4, r4, lsl #2
   39a18:	ldr	r1, [r3, r2, lsl #2]
   39a1c:	add	r3, r3, r2, lsl #2
   39a20:	cmp	sl, r1
   39a24:	bne	39a04 <fts_children@@Base+0x7f68>
   39a28:	ldr	r2, [r3, #4]
   39a2c:	cmp	r9, r2
   39a30:	bne	39a04 <fts_children@@Base+0x7f68>
   39a34:	ldr	r2, [r3, #12]
   39a38:	ldr	r5, [r3, #8]
   39a3c:	ldr	r6, [r8, #24]
   39a40:	subs	r3, r2, r5
   39a44:	str	r3, [sp, #20]
   39a48:	ldreq	r1, [sp, #48]	; 0x30
   39a4c:	ldreq	r3, [r8, #20]
   39a50:	ldrne	r3, [r8, #12]
   39a54:	addeq	r3, r3, r1
   39a58:	ldrne	r1, [sp, #40]	; 0x28
   39a5c:	ldreq	r3, [r3, #8]
   39a60:	add	r2, r9, r2
   39a64:	ldrne	r3, [r3, r1]
   39a68:	ldreq	r3, [r3]
   39a6c:	sub	r5, r2, r5
   39a70:	sub	r1, r5, #1
   39a74:	add	r3, r3, r3, lsl #1
   39a78:	ldr	r2, [fp, #88]	; 0x58
   39a7c:	mov	r0, fp
   39a80:	add	r6, r6, r3, lsl #2
   39a84:	bl	35c00 <fts_children@@Base+0x4164>
   39a88:	ldr	r7, [fp, #100]	; 0x64
   39a8c:	ldr	r2, [sp, #44]	; 0x2c
   39a90:	ldr	r1, [r7, r5, lsl #2]
   39a94:	ldr	r2, [r7, r2]
   39a98:	cmp	r2, #0
   39a9c:	ldrne	r2, [r2, #8]
   39aa0:	cmp	r1, #0
   39aa4:	str	r2, [sp, #28]
   39aa8:	mov	r3, r0
   39aac:	bne	39988 <fts_children@@Base+0x7eec>
   39ab0:	mov	r2, r6
   39ab4:	mov	r1, r8
   39ab8:	add	r0, sp, #68	; 0x44
   39abc:	bl	351fc <fts_children@@Base+0x3760>
   39ac0:	ldr	r3, [fp, #100]	; 0x64
   39ac4:	str	r0, [r7, r5, lsl #2]
   39ac8:	ldr	r2, [r3, r5, lsl #2]
   39acc:	cmp	r2, #0
   39ad0:	bne	399dc <fts_children@@Base+0x7f40>
   39ad4:	ldr	r0, [sp, #68]	; 0x44
   39ad8:	cmp	r0, #0
   39adc:	beq	399dc <fts_children@@Base+0x7f40>
   39ae0:	ldr	r3, [pc, #1080]	; 39f20 <fts_children@@Base+0x8484>
   39ae4:	ldr	r2, [sp, #84]	; 0x54
   39ae8:	ldr	r3, [r3]
   39aec:	cmp	r2, r3
   39af0:	bne	39f1c <fts_children@@Base+0x8480>
   39af4:	add	sp, sp, #92	; 0x5c
   39af8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39afc:	mov	r5, r2
   39b00:	mov	r2, r3
   39b04:	add	r0, r5, #1
   39b08:	mov	r3, r2
   39b0c:	b	398a4 <fts_children@@Base+0x7e08>
   39b10:	ldr	r3, [fp, #84]	; 0x54
   39b14:	ldr	r1, [fp, #124]	; 0x7c
   39b18:	str	r3, [sp, #52]	; 0x34
   39b1c:	ldr	r3, [r3]
   39b20:	cmp	r1, #0
   39b24:	ldr	r2, [r3, sl, lsl #3]
   39b28:	str	r2, [sp, #48]	; 0x30
   39b2c:	ble	3995c <fts_children@@Base+0x7ec0>
   39b30:	ldr	r2, [fp, #4]
   39b34:	str	sl, [sp, #40]	; 0x28
   39b38:	mov	sl, r2
   39b3c:	mov	r0, #0
   39b40:	str	r0, [sp, #28]
   39b44:	str	r9, [sp, #32]
   39b48:	str	r4, [sp, #60]	; 0x3c
   39b4c:	ldr	r2, [fp, #132]	; 0x84
   39b50:	ldr	r0, [sp, #28]
   39b54:	ldr	r4, [r2, r0, lsl #2]
   39b58:	ldr	r2, [r4, #4]
   39b5c:	ldr	r3, [r3, r2, lsl #3]
   39b60:	ldr	r2, [sp, #48]	; 0x30
   39b64:	cmp	r2, r3
   39b68:	beq	39b8c <fts_children@@Base+0x80f0>
   39b6c:	ldr	r3, [sp, #28]
   39b70:	add	r3, r3, #1
   39b74:	cmp	r3, r1
   39b78:	str	r3, [sp, #28]
   39b7c:	bge	39ed0 <fts_children@@Base+0x8434>
   39b80:	ldr	r3, [sp, #52]	; 0x34
   39b84:	ldr	r3, [r3]
   39b88:	b	39b4c <fts_children@@Base+0x80b0>
   39b8c:	ldr	r1, [r4, #16]
   39b90:	ldr	r6, [r4]
   39b94:	cmp	r1, #0
   39b98:	ldr	r7, [sp, #32]
   39b9c:	ble	39cec <fts_children@@Base+0x8250>
   39ba0:	mov	r3, sl
   39ba4:	mov	r5, #0
   39ba8:	mov	sl, r7
   39bac:	mov	r7, r6
   39bb0:	b	39bcc <fts_children@@Base+0x8130>
   39bb4:	ldr	r1, [r4, #16]
   39bb8:	add	r5, r5, #1
   39bbc:	cmp	r5, r1
   39bc0:	mov	r7, r9
   39bc4:	mov	sl, r6
   39bc8:	bge	39cd8 <fts_children@@Base+0x823c>
   39bcc:	ldr	r2, [r4, #20]
   39bd0:	ldr	r8, [r2, r5, lsl #2]
   39bd4:	ldr	r9, [r8, #4]
   39bd8:	sub	r2, r9, r7
   39bdc:	cmp	r2, #0
   39be0:	add	r6, r2, sl
   39be4:	ble	39c10 <fts_children@@Base+0x8174>
   39be8:	ldr	r0, [fp, #28]
   39bec:	cmp	r0, r6
   39bf0:	blt	39c90 <fts_children@@Base+0x81f4>
   39bf4:	add	r1, r3, r7
   39bf8:	add	r0, r3, sl
   39bfc:	str	r3, [sp, #20]
   39c00:	bl	12208 <memcmp@plt>
   39c04:	ldr	r3, [sp, #20]
   39c08:	cmp	r0, #0
   39c0c:	bne	39e78 <fts_children@@Base+0x83dc>
   39c10:	ldr	r3, [sp, #32]
   39c14:	mov	r2, r8
   39c18:	str	r3, [sp]
   39c1c:	mov	r1, r4
   39c20:	ldr	r3, [sp, #40]	; 0x28
   39c24:	mov	r0, fp
   39c28:	bl	39638 <fts_children@@Base+0x7b9c>
   39c2c:	ldr	r3, [fp, #4]
   39c30:	cmp	r0, #1
   39c34:	bls	39bb4 <fts_children@@Base+0x8118>
   39c38:	b	39ae0 <fts_children@@Base+0x8044>
   39c3c:	add	r5, r6, #4
   39c40:	add	r6, r6, #8
   39c44:	mov	r2, r6
   39c48:	mov	r1, r5
   39c4c:	mov	r3, r9
   39c50:	mov	r0, fp
   39c54:	bl	35b08 <fts_children@@Base+0x406c>
   39c58:	cmp	r0, #0
   39c5c:	str	r0, [sp, #68]	; 0x44
   39c60:	bne	39ae0 <fts_children@@Base+0x8044>
   39c64:	mov	r2, r6
   39c68:	mov	r1, r5
   39c6c:	mov	r0, fp
   39c70:	bl	39790 <fts_children@@Base+0x7cf4>
   39c74:	cmp	r0, #0
   39c78:	str	r0, [sp, #68]	; 0x44
   39c7c:	beq	39a00 <fts_children@@Base+0x7f64>
   39c80:	b	39ae0 <fts_children@@Base+0x8044>
   39c84:	ldr	r3, [sp, #56]	; 0x38
   39c88:	ldr	r6, [r3]
   39c8c:	b	39810 <fts_children@@Base+0x7d74>
   39c90:	ldr	r0, [fp, #48]	; 0x30
   39c94:	str	r2, [sp, #20]
   39c98:	cmp	r0, r6
   39c9c:	blt	39f0c <fts_children@@Base+0x8470>
   39ca0:	mov	r1, r6
   39ca4:	mov	r0, fp
   39ca8:	bl	3358c <fts_children@@Base+0x1af0>
   39cac:	cmp	r0, #0
   39cb0:	bne	39ae0 <fts_children@@Base+0x8044>
   39cb4:	ldr	r3, [fp, #4]
   39cb8:	ldr	r2, [sp, #20]
   39cbc:	b	39bf4 <fts_children@@Base+0x8158>
   39cc0:	ldr	r0, [sp, #80]	; 0x50
   39cc4:	bl	12154 <free@plt>
   39cc8:	ldr	r0, [sp, #68]	; 0x44
   39ccc:	b	39ae0 <fts_children@@Base+0x8044>
   39cd0:	mov	r0, #0
   39cd4:	b	39ae0 <fts_children@@Base+0x8044>
   39cd8:	mov	r8, r9
   39cdc:	mov	sl, r3
   39ce0:	mov	r9, r6
   39ce4:	add	r6, r8, #1
   39ce8:	mov	r7, r9
   39cec:	ldr	r3, [sp, #32]
   39cf0:	cmp	r3, r6
   39cf4:	blt	39e40 <fts_children@@Base+0x83a4>
   39cf8:	ldr	r9, [sp, #32]
   39cfc:	ldr	r8, [sp, #48]	; 0x30
   39d00:	ldr	r3, [r4]
   39d04:	sub	r3, r6, r3
   39d08:	cmp	r3, #0
   39d0c:	ble	39d38 <fts_children@@Base+0x829c>
   39d10:	ldr	r3, [fp, #28]
   39d14:	cmp	r3, r7
   39d18:	ble	39ea4 <fts_children@@Base+0x8408>
   39d1c:	add	r5, r7, #1
   39d20:	add	r3, sl, r6
   39d24:	ldrb	r2, [sl, r7]
   39d28:	ldrb	r3, [r3, #-1]
   39d2c:	cmp	r2, r3
   39d30:	bne	39e40 <fts_children@@Base+0x83a4>
   39d34:	mov	r7, r5
   39d38:	ldr	r3, [fp, #100]	; 0x64
   39d3c:	ldr	r3, [r3, r6, lsl #2]
   39d40:	cmp	r3, #0
   39d44:	beq	39e34 <fts_children@@Base+0x8398>
   39d48:	ldr	ip, [r3, #8]
   39d4c:	cmp	ip, #0
   39d50:	ble	39e34 <fts_children@@Base+0x8398>
   39d54:	ldr	r2, [r3, #12]
   39d58:	ldr	r3, [sp, #52]	; 0x34
   39d5c:	sub	r2, r2, #4
   39d60:	ldr	r0, [r3]
   39d64:	mov	r3, #0
   39d68:	b	39d78 <fts_children@@Base+0x82dc>
   39d6c:	add	r3, r3, #1
   39d70:	cmp	ip, r3
   39d74:	beq	39e34 <fts_children@@Base+0x8398>
   39d78:	ldr	r5, [r2, #4]!
   39d7c:	add	r1, r0, r5, lsl #3
   39d80:	ldrb	r1, [r1, #4]
   39d84:	cmp	r1, #9
   39d88:	bne	39d6c <fts_children@@Base+0x82d0>
   39d8c:	ldr	r1, [r0, r5, lsl #3]
   39d90:	cmp	r8, r1
   39d94:	bne	39d6c <fts_children@@Base+0x82d0>
   39d98:	cmn	r5, #1
   39d9c:	beq	39e34 <fts_children@@Base+0x8398>
   39da0:	ldr	r1, [r4, #8]
   39da4:	ldr	r3, [r4]
   39da8:	cmp	r1, #0
   39dac:	beq	39e48 <fts_children@@Base+0x83ac>
   39db0:	mov	r0, #9
   39db4:	ldr	r2, [r4, #4]
   39db8:	str	r0, [sp, #8]
   39dbc:	stm	sp, {r5, r6}
   39dc0:	mov	r0, fp
   39dc4:	bl	38948 <fts_children@@Base+0x6eac>
   39dc8:	cmp	r0, #1
   39dcc:	beq	39e34 <fts_children@@Base+0x8398>
   39dd0:	cmp	r0, #0
   39dd4:	bne	39ae0 <fts_children@@Base+0x8044>
   39dd8:	ldrd	r2, [r4, #12]
   39ddc:	cmp	r3, r2
   39de0:	beq	39ee4 <fts_children@@Base+0x8448>
   39de4:	mov	r1, #20
   39de8:	mov	r0, #1
   39dec:	bl	12064 <calloc@plt>
   39df0:	cmp	r0, #0
   39df4:	beq	39e70 <fts_children@@Base+0x83d4>
   39df8:	ldr	r3, [r4, #16]
   39dfc:	ldr	r2, [r4, #20]
   39e00:	add	r1, r3, #1
   39e04:	str	r0, [r2, r3, lsl #2]
   39e08:	stm	r0, {r5, r6}
   39e0c:	mov	r2, r0
   39e10:	str	r1, [r4, #16]
   39e14:	ldr	r3, [sp, #40]	; 0x28
   39e18:	mov	r1, r4
   39e1c:	str	r9, [sp]
   39e20:	mov	r0, fp
   39e24:	bl	39638 <fts_children@@Base+0x7b9c>
   39e28:	ldr	sl, [fp, #4]
   39e2c:	cmp	r0, #1
   39e30:	bhi	39ae0 <fts_children@@Base+0x8044>
   39e34:	add	r6, r6, #1
   39e38:	cmp	r9, r6
   39e3c:	bge	39d00 <fts_children@@Base+0x8264>
   39e40:	ldr	r1, [fp, #124]	; 0x7c
   39e44:	b	39b6c <fts_children@@Base+0x80d0>
   39e48:	sub	r1, r6, r3
   39e4c:	add	r1, r1, #1
   39e50:	mov	r0, #12
   39e54:	str	r3, [sp, #20]
   39e58:	bl	12064 <calloc@plt>
   39e5c:	ldr	r3, [sp, #20]
   39e60:	cmp	r0, #0
   39e64:	mov	r1, r0
   39e68:	str	r0, [r4, #8]
   39e6c:	bne	39db0 <fts_children@@Base+0x8314>
   39e70:	mov	r0, #12
   39e74:	b	39ae0 <fts_children@@Base+0x8044>
   39e78:	ldr	r1, [r4, #16]
   39e7c:	mov	r6, r7
   39e80:	mov	r7, sl
   39e84:	mov	sl, r3
   39e88:	cmp	r1, r5
   39e8c:	bgt	39e40 <fts_children@@Base+0x83a4>
   39e90:	cmp	r5, #0
   39e94:	ble	39cec <fts_children@@Base+0x8250>
   39e98:	mov	r8, r6
   39e9c:	mov	r9, r7
   39ea0:	b	39ce4 <fts_children@@Base+0x8248>
   39ea4:	ldr	r3, [fp, #48]	; 0x30
   39ea8:	cmp	r3, r7
   39eac:	ble	39e40 <fts_children@@Base+0x83a4>
   39eb0:	add	r5, r7, #1
   39eb4:	mov	r1, r5
   39eb8:	mov	r0, fp
   39ebc:	bl	33460 <fts_children@@Base+0x19c4>
   39ec0:	cmp	r0, #0
   39ec4:	bne	39ae0 <fts_children@@Base+0x8044>
   39ec8:	ldr	sl, [fp, #4]
   39ecc:	b	39d20 <fts_children@@Base+0x8284>
   39ed0:	ldr	r9, [sp, #32]
   39ed4:	ldr	sl, [sp, #40]	; 0x28
   39ed8:	ldr	r4, [sp, #60]	; 0x3c
   39edc:	ldr	ip, [fp, #108]	; 0x6c
   39ee0:	b	3995c <fts_children@@Base+0x7ec0>
   39ee4:	lsl	r3, r3, #1
   39ee8:	add	sl, r3, #1
   39eec:	ldr	r0, [r4, #20]
   39ef0:	lsl	r1, sl, #2
   39ef4:	bl	12268 <realloc@plt>
   39ef8:	cmp	r0, #0
   39efc:	beq	39e70 <fts_children@@Base+0x83d4>
   39f00:	str	r0, [r4, #20]
   39f04:	str	sl, [r4, #12]
   39f08:	b	39de4 <fts_children@@Base+0x8348>
   39f0c:	mov	r6, r7
   39f10:	mov	r7, sl
   39f14:	mov	sl, r3
   39f18:	b	39e88 <fts_children@@Base+0x83ec>
   39f1c:	bl	12244 <__stack_chk_fail@plt>
   39f20:	andeq	fp, r5, r0, ror #24
   39f24:	andeq	pc, r3, r0, lsl #30
   39f28:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   39f2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39f30:	mov	r4, r1
   39f34:	ldr	r7, [pc, #392]	; 3a0c4 <fts_children@@Base+0x8628>
   39f38:	ldr	r5, [r1, #40]	; 0x28
   39f3c:	ldr	r1, [r1, #104]	; 0x68
   39f40:	sub	sp, sp, #20
   39f44:	ldr	r3, [r7]
   39f48:	cmp	r1, r5
   39f4c:	mov	sl, r0
   39f50:	str	r3, [sp, #12]
   39f54:	ldr	r8, [r4, #84]	; 0x54
   39f58:	ldr	r9, [r4, #100]	; 0x64
   39f5c:	bge	39f94 <fts_children@@Base+0x84f8>
   39f60:	mov	r6, r2
   39f64:	str	r2, [r9, r5, lsl #2]
   39f68:	str	r5, [r4, #104]	; 0x68
   39f6c:	ldr	r3, [r8, #76]	; 0x4c
   39f70:	cmp	r3, #0
   39f74:	bne	3a058 <fts_children@@Base+0x85bc>
   39f78:	ldr	r2, [sp, #12]
   39f7c:	ldr	r3, [r7]
   39f80:	mov	r0, r6
   39f84:	cmp	r2, r3
   39f88:	bne	3a0c0 <fts_children@@Base+0x8624>
   39f8c:	add	sp, sp, #20
   39f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39f94:	ldr	r3, [r9, r5, lsl #2]
   39f98:	cmp	r3, #0
   39f9c:	streq	r2, [r9, r5, lsl #2]
   39fa0:	moveq	r6, r2
   39fa4:	beq	39f6c <fts_children@@Base+0x84d0>
   39fa8:	cmp	r2, #0
   39fac:	ldr	r3, [r3, #40]	; 0x28
   39fb0:	beq	3a01c <fts_children@@Base+0x8580>
   39fb4:	ldr	r9, [r2, #40]	; 0x28
   39fb8:	mov	r0, sp
   39fbc:	mov	r2, r3
   39fc0:	mov	r1, r9
   39fc4:	bl	350bc <fts_children@@Base+0x3620>
   39fc8:	cmp	r0, #0
   39fcc:	str	r0, [sl]
   39fd0:	bne	3a0b8 <fts_children@@Base+0x861c>
   39fd4:	ldr	r1, [r4, #40]	; 0x28
   39fd8:	ldr	r2, [r4, #88]	; 0x58
   39fdc:	sub	r1, r1, #1
   39fe0:	mov	r0, r4
   39fe4:	bl	35c00 <fts_children@@Base+0x4164>
   39fe8:	mov	r2, sp
   39fec:	mov	r1, r8
   39ff0:	ldr	fp, [r4, #100]	; 0x64
   39ff4:	mov	r3, r0
   39ff8:	mov	r0, sl
   39ffc:	bl	351fc <fts_children@@Base+0x3760>
   3a000:	cmp	r9, #0
   3a004:	mov	r6, r0
   3a008:	str	r0, [fp, r5, lsl #2]
   3a00c:	beq	39f6c <fts_children@@Base+0x84d0>
   3a010:	ldr	r0, [sp, #8]
   3a014:	bl	12154 <free@plt>
   3a018:	b	39f6c <fts_children@@Base+0x84d0>
   3a01c:	ldm	r3, {r0, r1, r2}
   3a020:	mov	r6, sp
   3a024:	stm	r6, {r0, r1, r2}
   3a028:	sub	r1, r5, #1
   3a02c:	ldr	r2, [r4, #88]	; 0x58
   3a030:	mov	r0, r4
   3a034:	bl	35c00 <fts_children@@Base+0x4164>
   3a038:	mov	r2, r6
   3a03c:	mov	r1, r8
   3a040:	mov	r3, r0
   3a044:	mov	r0, sl
   3a048:	bl	351fc <fts_children@@Base+0x3760>
   3a04c:	mov	r6, r0
   3a050:	str	r0, [r9, r5, lsl #2]
   3a054:	b	39f6c <fts_children@@Base+0x84d0>
   3a058:	cmp	r6, #0
   3a05c:	beq	3a0b8 <fts_children@@Base+0x861c>
   3a060:	add	r8, r6, #8
   3a064:	add	r9, r6, #12
   3a068:	mov	r1, r8
   3a06c:	mov	r2, r9
   3a070:	mov	r3, r5
   3a074:	mov	r0, r4
   3a078:	bl	35b08 <fts_children@@Base+0x406c>
   3a07c:	cmp	r0, #0
   3a080:	str	r0, [sl]
   3a084:	bne	3a0b8 <fts_children@@Base+0x861c>
   3a088:	ldrb	r3, [r6, #52]	; 0x34
   3a08c:	tst	r3, #64	; 0x40
   3a090:	beq	39f78 <fts_children@@Base+0x84dc>
   3a094:	mov	r2, r9
   3a098:	mov	r1, r8
   3a09c:	mov	r0, r4
   3a0a0:	bl	39790 <fts_children@@Base+0x7cf4>
   3a0a4:	cmp	r0, #0
   3a0a8:	str	r0, [sl]
   3a0ac:	ldreq	r3, [r4, #100]	; 0x64
   3a0b0:	ldreq	r6, [r3, r5, lsl #2]
   3a0b4:	beq	39f78 <fts_children@@Base+0x84dc>
   3a0b8:	mov	r6, #0
   3a0bc:	b	39f78 <fts_children@@Base+0x84dc>
   3a0c0:	bl	12244 <__stack_chk_fail@plt>
   3a0c4:	andeq	fp, r5, r0, ror #24
   3a0c8:	ldr	r3, [pc, #700]	; 3a38c <fts_children@@Base+0x88f0>
   3a0cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a0d0:	sub	sp, sp, #60	; 0x3c
   3a0d4:	ldr	r2, [r3]
   3a0d8:	mov	fp, r0
   3a0dc:	mov	r3, #1
   3a0e0:	mov	r0, #4
   3a0e4:	mov	sl, r1
   3a0e8:	str	r2, [sp, #52]	; 0x34
   3a0ec:	ldr	r9, [r1, #12]
   3a0f0:	ldr	r4, [r1, #8]
   3a0f4:	str	r3, [sp, #40]	; 0x28
   3a0f8:	str	r3, [sp, #44]	; 0x2c
   3a0fc:	bl	123dc <malloc@plt>
   3a100:	cmp	r0, #0
   3a104:	str	r0, [sp, #48]	; 0x30
   3a108:	beq	3a380 <fts_children@@Base+0x88e4>
   3a10c:	str	r4, [r0]
   3a110:	add	r3, sp, #40	; 0x28
   3a114:	mov	r2, r9
   3a118:	mov	r1, sl
   3a11c:	mov	r0, fp
   3a120:	bl	3b714 <fts_children@@Base+0x9c78>
   3a124:	cmp	r0, #0
   3a128:	bne	3a35c <fts_children@@Base+0x88c0>
   3a12c:	cmp	r9, #0
   3a130:	addgt	r3, sl, #24
   3a134:	strgt	r0, [sp, #20]
   3a138:	strgt	r3, [sp, #36]	; 0x24
   3a13c:	ble	3a320 <fts_children@@Base+0x8884>
   3a140:	ldr	r0, [sl]
   3a144:	lsl	r3, r9, #2
   3a148:	str	r3, [sp, #16]
   3a14c:	ldr	r3, [r0, r9, lsl #2]
   3a150:	cmp	r3, #0
   3a154:	movne	r3, #0
   3a158:	ldreq	r3, [sp, #20]
   3a15c:	addeq	r3, r3, #1
   3a160:	str	r3, [sp, #20]
   3a164:	ldr	r2, [sp, #20]
   3a168:	ldr	r3, [fp, #120]	; 0x78
   3a16c:	cmp	r3, r2
   3a170:	blt	3a364 <fts_children@@Base+0x88c8>
   3a174:	mov	r2, #0
   3a178:	ldr	r3, [fp, #100]	; 0x64
   3a17c:	str	r2, [sp, #44]	; 0x2c
   3a180:	ldr	r2, [sp, #16]
   3a184:	sub	r9, r9, #1
   3a188:	add	r3, r3, r2
   3a18c:	ldr	r8, [r3, #-4]
   3a190:	cmp	r8, #0
   3a194:	beq	3a2fc <fts_children@@Base+0x8860>
   3a198:	ldr	r3, [r8, #20]
   3a19c:	ldr	r5, [fp, #84]	; 0x54
   3a1a0:	cmp	r3, #0
   3a1a4:	ble	3a2fc <fts_children@@Base+0x8860>
   3a1a8:	add	r3, sl, #20
   3a1ac:	mov	r7, #0
   3a1b0:	str	r3, [sp, #28]
   3a1b4:	b	3a258 <fts_children@@Base+0x87bc>
   3a1b8:	mov	r2, r9
   3a1bc:	mov	r0, fp
   3a1c0:	bl	35cf0 <fts_children@@Base+0x4254>
   3a1c4:	cmp	r0, #0
   3a1c8:	beq	3a248 <fts_children@@Base+0x87ac>
   3a1cc:	ldr	r3, [sl]
   3a1d0:	ldr	r2, [sp, #16]
   3a1d4:	ldr	r3, [r3, r2]
   3a1d8:	cmp	r3, #0
   3a1dc:	beq	3a248 <fts_children@@Base+0x87ac>
   3a1e0:	ldr	r2, [r5, #12]
   3a1e4:	add	r1, r3, #12
   3a1e8:	ldr	r0, [r3, #8]
   3a1ec:	ldr	r2, [r2, r4, lsl #2]
   3a1f0:	bl	33f6c <fts_children@@Base+0x24d0>
   3a1f4:	cmp	r0, #0
   3a1f8:	beq	3a248 <fts_children@@Base+0x87ac>
   3a1fc:	mov	r3, #1
   3a200:	ldr	r2, [sl, #20]
   3a204:	cmp	r2, #0
   3a208:	beq	3a234 <fts_children@@Base+0x8798>
   3a20c:	ldr	r1, [r5, #12]
   3a210:	add	r0, r9, r3
   3a214:	ldr	r2, [sp, #36]	; 0x24
   3a218:	ldr	r3, [r1, r4, lsl #2]
   3a21c:	stm	sp, {r0, r4, r9}
   3a220:	mov	r0, fp
   3a224:	ldr	r1, [sp, #28]
   3a228:	bl	3422c <fts_children@@Base+0x2790>
   3a22c:	cmp	r0, #0
   3a230:	bne	3a248 <fts_children@@Base+0x87ac>
   3a234:	mov	r1, r4
   3a238:	add	r0, sp, #40	; 0x28
   3a23c:	bl	32a54 <fts_children@@Base+0xfb8>
   3a240:	cmp	r0, #0
   3a244:	beq	3a330 <fts_children@@Base+0x8894>
   3a248:	ldr	r3, [r8, #20]
   3a24c:	add	r7, r7, #1
   3a250:	cmp	r7, r3
   3a254:	bge	3a2fc <fts_children@@Base+0x8860>
   3a258:	ldr	r3, [r8, #24]
   3a25c:	ldr	r1, [r5]
   3a260:	ldr	r4, [r3, r7, lsl #2]
   3a264:	lsl	r6, r4, #3
   3a268:	add	r1, r1, r6
   3a26c:	ldrb	r3, [r1, #6]
   3a270:	tst	r3, #16
   3a274:	beq	3a1b8 <fts_children@@Base+0x871c>
   3a278:	ldr	r3, [fp, #84]	; 0x54
   3a27c:	mov	r2, r4
   3a280:	mov	r1, r3
   3a284:	str	r3, [sp, #32]
   3a288:	ldr	r0, [r1], #128	; 0x80
   3a28c:	str	r9, [sp]
   3a290:	ldr	ip, [sl, #12]
   3a294:	mov	r3, fp
   3a298:	str	ip, [sp, #24]
   3a29c:	bl	38698 <fts_children@@Base+0x6bfc>
   3a2a0:	subs	r3, r0, #0
   3a2a4:	ble	3a328 <fts_children@@Base+0x888c>
   3a2a8:	ldr	ip, [sp, #24]
   3a2ac:	add	r2, r9, r3
   3a2b0:	cmp	ip, r2
   3a2b4:	blt	3a200 <fts_children@@Base+0x8764>
   3a2b8:	ldr	r1, [sl]
   3a2bc:	ldr	r2, [r1, r2, lsl #2]
   3a2c0:	cmp	r2, #0
   3a2c4:	beq	3a2f0 <fts_children@@Base+0x8854>
   3a2c8:	str	r3, [sp, #24]
   3a2cc:	ldr	r3, [sp, #32]
   3a2d0:	add	r1, r2, #12
   3a2d4:	ldr	r0, [r2, #8]
   3a2d8:	ldr	ip, [r3, #12]
   3a2dc:	ldr	r2, [ip, r4, lsl #2]
   3a2e0:	bl	33f6c <fts_children@@Base+0x24d0>
   3a2e4:	ldr	r3, [sp, #24]
   3a2e8:	cmp	r0, #0
   3a2ec:	bne	3a200 <fts_children@@Base+0x8764>
   3a2f0:	ldr	r1, [r5]
   3a2f4:	add	r1, r1, r6
   3a2f8:	b	3a1b8 <fts_children@@Base+0x871c>
   3a2fc:	add	r3, sp, #40	; 0x28
   3a300:	mov	r2, r9
   3a304:	mov	r1, sl
   3a308:	mov	r0, fp
   3a30c:	bl	3b714 <fts_children@@Base+0x9c78>
   3a310:	cmp	r0, #0
   3a314:	bne	3a35c <fts_children@@Base+0x88c0>
   3a318:	cmp	r9, #0
   3a31c:	bne	3a140 <fts_children@@Base+0x86a4>
   3a320:	mov	r4, #0
   3a324:	b	3a334 <fts_children@@Base+0x8898>
   3a328:	beq	3a2f0 <fts_children@@Base+0x8854>
   3a32c:	b	3a200 <fts_children@@Base+0x8764>
   3a330:	mov	r4, #12
   3a334:	ldr	r0, [sp, #48]	; 0x30
   3a338:	bl	12154 <free@plt>
   3a33c:	ldr	r3, [pc, #72]	; 3a38c <fts_children@@Base+0x88f0>
   3a340:	ldr	r2, [sp, #52]	; 0x34
   3a344:	mov	r0, r4
   3a348:	ldr	r3, [r3]
   3a34c:	cmp	r2, r3
   3a350:	bne	3a388 <fts_children@@Base+0x88ec>
   3a354:	add	sp, sp, #60	; 0x3c
   3a358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a35c:	mov	r4, r0
   3a360:	b	3a334 <fts_children@@Base+0x8898>
   3a364:	ldr	r2, [sp, #16]
   3a368:	mov	r1, #0
   3a36c:	bl	12514 <memset@plt>
   3a370:	ldr	r0, [sp, #48]	; 0x30
   3a374:	bl	12154 <free@plt>
   3a378:	mov	r4, #0
   3a37c:	b	3a33c <fts_children@@Base+0x88a0>
   3a380:	mov	r4, #12
   3a384:	b	3a33c <fts_children@@Base+0x88a0>
   3a388:	bl	12244 <__stack_chk_fail@plt>
   3a38c:	andeq	fp, r5, r0, ror #24
   3a390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a394:	sub	sp, sp, #300	; 0x12c
   3a398:	mov	r4, r0
   3a39c:	str	r0, [sp, #28]
   3a3a0:	ldr	r0, [pc, #4040]	; 3b370 <fts_children@@Base+0x98d4>
   3a3a4:	mov	r5, r3
   3a3a8:	ldr	r3, [sp, #348]	; 0x15c
   3a3ac:	ldr	ip, [r0]
   3a3b0:	str	r1, [sp, #48]	; 0x30
   3a3b4:	str	r2, [sp, #64]	; 0x40
   3a3b8:	add	r0, sp, #156	; 0x9c
   3a3bc:	mov	r2, #136	; 0x88
   3a3c0:	mov	r1, #0
   3a3c4:	ldr	sl, [r4]
   3a3c8:	str	ip, [sp, #292]	; 0x124
   3a3cc:	ldr	r6, [sp, #336]	; 0x150
   3a3d0:	str	r3, [sp, #96]	; 0x60
   3a3d4:	bl	12514 <memset@plt>
   3a3d8:	ldr	r2, [r4, #16]
   3a3dc:	str	sl, [sp, #240]	; 0xf0
   3a3e0:	cmp	r2, #0
   3a3e4:	str	r2, [sp, #44]	; 0x2c
   3a3e8:	beq	3a404 <fts_children@@Base+0x8968>
   3a3ec:	ldrb	r2, [r4, #28]
   3a3f0:	subs	r3, r5, r6
   3a3f4:	movne	r3, #1
   3a3f8:	ands	r3, r3, r2, lsr #3
   3a3fc:	streq	r3, [sp, #44]	; 0x2c
   3a400:	bne	3a7a4 <fts_children@@Base+0x8d08>
   3a404:	ldr	r3, [sp, #28]
   3a408:	ldr	r2, [sp, #344]	; 0x158
   3a40c:	ldr	ip, [sp, #28]
   3a410:	ldr	r3, [r3, #24]
   3a414:	cmp	r3, r2
   3a418:	subcc	r2, r2, #1
   3a41c:	subcc	r1, r3, r2
   3a420:	ldrcc	r0, [sp, #344]	; 0x158
   3a424:	subcc	r3, r2, r3
   3a428:	movcs	r3, #0
   3a42c:	str	r3, [sp, #104]	; 0x68
   3a430:	ldr	r3, [ip, #8]
   3a434:	addcc	r1, r0, r1
   3a438:	strcc	r1, [sp, #344]	; 0x158
   3a43c:	cmp	r3, #0
   3a440:	beq	3afa0 <fts_children@@Base+0x9504>
   3a444:	ldr	r3, [sl, #36]	; 0x24
   3a448:	cmp	r3, #0
   3a44c:	beq	3afa0 <fts_children@@Base+0x9504>
   3a450:	ldr	r2, [sl, #40]	; 0x28
   3a454:	cmp	r2, #0
   3a458:	beq	3afa0 <fts_children@@Base+0x9504>
   3a45c:	ldr	r1, [sl, #44]	; 0x2c
   3a460:	cmp	r1, #0
   3a464:	beq	3afa0 <fts_children@@Base+0x9504>
   3a468:	ldr	r0, [sl, #48]	; 0x30
   3a46c:	cmp	r0, #0
   3a470:	beq	3afa0 <fts_children@@Base+0x9504>
   3a474:	ldr	r3, [r3, #8]
   3a478:	cmp	r3, #0
   3a47c:	bne	3a4c0 <fts_children@@Base+0x8a24>
   3a480:	ldr	r3, [r2, #8]
   3a484:	cmp	r3, #0
   3a488:	bne	3a4c0 <fts_children@@Base+0x8a24>
   3a48c:	ldr	r3, [r1, #8]
   3a490:	cmp	r3, #0
   3a494:	beq	3a4a4 <fts_children@@Base+0x8a08>
   3a498:	ldrsb	r3, [ip, #28]
   3a49c:	cmp	r3, #0
   3a4a0:	blt	3a4c0 <fts_children@@Base+0x8a24>
   3a4a4:	adds	r6, r6, #0
   3a4a8:	movne	r6, #1
   3a4ac:	cmp	r5, #0
   3a4b0:	moveq	r6, #0
   3a4b4:	cmp	r6, #0
   3a4b8:	bne	3afa0 <fts_children@@Base+0x9504>
   3a4bc:	mov	r5, r6
   3a4c0:	ldr	r3, [sp, #344]	; 0x158
   3a4c4:	cmp	r3, #0
   3a4c8:	bne	3a794 <fts_children@@Base+0x8cf8>
   3a4cc:	ldr	r3, [sl, #76]	; 0x4c
   3a4d0:	adds	r3, r3, #0
   3a4d4:	movne	r3, #1
   3a4d8:	str	r3, [sp, #52]	; 0x34
   3a4dc:	str	r3, [sp, #16]
   3a4e0:	ldr	r1, [sp, #28]
   3a4e4:	ldr	r3, [sl, #8]
   3a4e8:	ldr	ip, [sl, #92]	; 0x5c
   3a4ec:	add	r3, r3, #1
   3a4f0:	ldr	r0, [r1, #12]
   3a4f4:	ldr	r4, [r1, #20]
   3a4f8:	cmp	r3, ip
   3a4fc:	movlt	r3, ip
   3a500:	ands	r0, r0, #4194304	; 0x400000
   3a504:	ldrb	r2, [sl, #88]	; 0x58
   3a508:	movne	lr, #1
   3a50c:	moveq	lr, #0
   3a510:	orrs	r1, r4, r0
   3a514:	ldr	r0, [sp, #64]	; 0x40
   3a518:	ldr	r7, [sp, #48]	; 0x30
   3a51c:	add	r1, r0, #1
   3a520:	str	r0, [sp, #204]	; 0xcc
   3a524:	str	r0, [sp, #200]	; 0xc8
   3a528:	str	r0, [sp, #212]	; 0xd4
   3a52c:	str	r0, [sp, #208]	; 0xd0
   3a530:	movne	r0, #1
   3a534:	moveq	r0, #0
   3a538:	cmp	r3, r1
   3a53c:	movlt	r1, r3
   3a540:	lsr	r3, r2, #2
   3a544:	lsr	r2, r2, #3
   3a548:	and	r3, r3, #1
   3a54c:	and	r2, r2, #1
   3a550:	strb	r0, [sp, #231]	; 0xe7
   3a554:	add	r0, sp, #156	; 0x9c
   3a558:	strb	r3, [sp, #229]	; 0xe5
   3a55c:	str	r4, [sp, #72]	; 0x48
   3a560:	str	r7, [sp, #156]	; 0x9c
   3a564:	str	ip, [sp, #236]	; 0xec
   3a568:	strb	lr, [sp, #228]	; 0xe4
   3a56c:	str	r4, [sp, #220]	; 0xdc
   3a570:	strb	r2, [sp, #230]	; 0xe6
   3a574:	bl	32960 <fts_children@@Base+0xec4>
   3a578:	subs	r3, r0, #0
   3a57c:	str	r3, [sp, #32]
   3a580:	bne	3b174 <fts_children@@Base+0x96d8>
   3a584:	ldrb	r3, [sl, #88]	; 0x58
   3a588:	ldrb	r2, [sp, #231]	; 0xe7
   3a58c:	add	r1, sl, #96	; 0x60
   3a590:	str	r1, [sp, #224]	; 0xe0
   3a594:	lsr	r3, r3, #4
   3a598:	and	r3, r3, #1
   3a59c:	cmp	r2, #0
   3a5a0:	strb	r3, [sp, #234]	; 0xea
   3a5a4:	bne	3a5bc <fts_children@@Base+0x8b20>
   3a5a8:	ldr	r3, [sl, #92]	; 0x5c
   3a5ac:	ldr	r2, [sp, #48]	; 0x30
   3a5b0:	cmp	r3, #1
   3a5b4:	str	r2, [sp, #160]	; 0xa0
   3a5b8:	ble	3b3e4 <fts_children@@Base+0x9948>
   3a5bc:	mov	r2, #0
   3a5c0:	ldr	r3, [sp, #28]
   3a5c4:	mvn	r1, #0
   3a5c8:	str	r2, [sp, #184]	; 0xb8
   3a5cc:	ldrb	r3, [r3, #28]
   3a5d0:	str	r2, [sp, #188]	; 0xbc
   3a5d4:	lsr	r3, r3, #7
   3a5d8:	strb	r3, [sp, #233]	; 0xe9
   3a5dc:	ldr	r7, [sl, #76]	; 0x4c
   3a5e0:	ldr	r3, [sp, #340]	; 0x154
   3a5e4:	str	r1, [sp, #248]	; 0xf8
   3a5e8:	str	r3, [sp, #212]	; 0xd4
   3a5ec:	str	r3, [sp, #208]	; 0xd0
   3a5f0:	lsl	r4, r7, #1
   3a5f4:	ldr	r3, [sp, #352]	; 0x160
   3a5f8:	cmp	r4, #0
   3a5fc:	str	r3, [sp, #244]	; 0xf4
   3a600:	ble	3a640 <fts_children@@Base+0x8ba4>
   3a604:	ldr	r3, [pc, #3432]	; 3b374 <fts_children@@Base+0x98d8>
   3a608:	cmp	r4, r3
   3a60c:	bgt	3b404 <fts_children@@Base+0x9968>
   3a610:	lsl	r7, r7, #3
   3a614:	add	r0, r7, r4
   3a618:	lsl	r0, r0, #2
   3a61c:	bl	123dc <malloc@plt>
   3a620:	mov	r8, r0
   3a624:	mov	r0, r7
   3a628:	str	r8, [sp, #272]	; 0x110
   3a62c:	bl	123dc <malloc@plt>
   3a630:	cmp	r8, #0
   3a634:	cmpne	r0, #0
   3a638:	str	r0, [sp, #288]	; 0x120
   3a63c:	beq	3b404 <fts_children@@Base+0x9968>
   3a640:	ldr	r3, [sp, #344]	; 0x158
   3a644:	str	r4, [sp, #268]	; 0x10c
   3a648:	cmp	r3, #1
   3a64c:	mov	r3, #1
   3a650:	str	r4, [sp, #284]	; 0x11c
   3a654:	str	r3, [sp, #276]	; 0x114
   3a658:	bls	3b3ec <fts_children@@Base+0x9950>
   3a65c:	ldr	r0, [sp, #192]	; 0xc0
   3a660:	cmn	r0, #-1073741822	; 0xc0000002
   3a664:	bhi	3b404 <fts_children@@Base+0x9968>
   3a668:	add	r0, r0, #1
   3a66c:	lsl	r0, r0, #2
   3a670:	bl	123dc <malloc@plt>
   3a674:	cmp	r0, #0
   3a678:	str	r0, [sp, #256]	; 0x100
   3a67c:	beq	3b1a8 <fts_children@@Base+0x970c>
   3a680:	ldr	r3, [sp, #352]	; 0x160
   3a684:	str	r5, [sp, #116]	; 0x74
   3a688:	tst	r3, #1
   3a68c:	movne	r3, #4
   3a690:	moveq	r3, #6
   3a694:	cmp	r5, r6
   3a698:	mvngt	r2, #0
   3a69c:	movle	r2, #1
   3a6a0:	str	r2, [sp, #88]	; 0x58
   3a6a4:	movlt	r2, r5
   3a6a8:	movge	r2, r6
   3a6ac:	str	r2, [sp, #68]	; 0x44
   3a6b0:	movge	r2, r5
   3a6b4:	movlt	r2, r6
   3a6b8:	str	r2, [sp, #56]	; 0x38
   3a6bc:	ldr	r2, [sp, #44]	; 0x2c
   3a6c0:	str	r3, [sp, #216]	; 0xd8
   3a6c4:	ldr	r3, [sl, #92]	; 0x5c
   3a6c8:	cmp	r2, #0
   3a6cc:	str	r3, [sp, #84]	; 0x54
   3a6d0:	moveq	r3, #8
   3a6d4:	beq	3a71c <fts_children@@Base+0x8c80>
   3a6d8:	cmp	r3, #1
   3a6dc:	moveq	r3, #4
   3a6e0:	beq	3a700 <fts_children@@Base+0x8c64>
   3a6e4:	ldr	r3, [sp, #28]
   3a6e8:	ldr	r2, [sp, #72]	; 0x48
   3a6ec:	ldr	r3, [r3, #12]
   3a6f0:	and	r3, r3, #4194304	; 0x400000
   3a6f4:	orrs	r3, r2, r3
   3a6f8:	moveq	r3, #4
   3a6fc:	movne	r3, #0
   3a700:	ldr	r1, [sp, #72]	; 0x48
   3a704:	ldr	r2, [sp, #32]
   3a708:	cmp	r5, r6
   3a70c:	movle	r2, #2
   3a710:	cmp	r1, #0
   3a714:	orrne	r3, r3, #1
   3a718:	orr	r3, r3, r2
   3a71c:	ldr	r2, [sp, #68]	; 0x44
   3a720:	ldr	r1, [sp, #56]	; 0x38
   3a724:	cmp	r5, r2
   3a728:	movge	r2, #0
   3a72c:	movlt	r2, #1
   3a730:	cmp	r5, r1
   3a734:	orrgt	r2, r2, #1
   3a738:	cmp	r2, #0
   3a73c:	str	r2, [sp, #108]	; 0x6c
   3a740:	bne	3ab5c <fts_children@@Base+0x90c0>
   3a744:	add	r2, sp, #296	; 0x128
   3a748:	cmp	r5, r6
   3a74c:	suble	r2, r2, #180	; 0xb4
   3a750:	movgt	r2, #0
   3a754:	sub	r3, r3, #4
   3a758:	str	r3, [sp, #80]	; 0x50
   3a75c:	adds	r3, r2, #0
   3a760:	movne	r3, #1
   3a764:	str	r2, [sp, #92]	; 0x5c
   3a768:	str	r3, [sp, #100]	; 0x64
   3a76c:	str	sl, [sp, #60]	; 0x3c
   3a770:	ldr	r3, [sp, #80]	; 0x50
   3a774:	cmp	r3, #4
   3a778:	ldrls	pc, [pc, r3, lsl #2]
   3a77c:	b	3b448 <fts_children@@Base+0x99ac>
   3a780:	ldrdeq	sl, [r3], -r4
   3a784:	ldrdeq	sl, [r3], -r4
   3a788:	andeq	sl, r3, ip, ror #22
   3a78c:	andeq	sl, r3, r8, lsr #21
   3a790:			; <UNDEFINED> instruction: 0x0003a7bc
   3a794:	mov	r3, #1
   3a798:	str	r3, [sp, #52]	; 0x34
   3a79c:	str	r3, [sp, #16]
   3a7a0:	b	3a4e0 <fts_children@@Base+0x8a44>
   3a7a4:	ldr	r3, [sp, #44]	; 0x2c
   3a7a8:	tst	r2, #1
   3a7ac:	movne	r3, #0
   3a7b0:	str	r3, [sp, #44]	; 0x2c
   3a7b4:	b	3a404 <fts_children@@Base+0x8968>
   3a7b8:	str	r5, [sp, #116]	; 0x74
   3a7bc:	ldr	r2, [sp, #352]	; 0x160
   3a7c0:	mov	r1, r5
   3a7c4:	add	r0, sp, #156	; 0x9c
   3a7c8:	bl	35ef4 <fts_children@@Base+0x4458>
   3a7cc:	subs	r3, r0, #0
   3a7d0:	str	r3, [sp, #32]
   3a7d4:	bne	3b47c <fts_children@@Base+0x99e0>
   3a7d8:	ldr	r3, [sp, #84]	; 0x54
   3a7dc:	cmp	r3, #1
   3a7e0:	beq	3a800 <fts_children@@Base+0x8d64>
   3a7e4:	ldr	r3, [sp, #184]	; 0xb8
   3a7e8:	cmp	r3, #0
   3a7ec:	beq	3a800 <fts_children@@Base+0x8d64>
   3a7f0:	ldr	r3, [sp, #164]	; 0xa4
   3a7f4:	ldr	r3, [r3]
   3a7f8:	cmn	r3, #1
   3a7fc:	beq	3af6c <fts_children@@Base+0x94d0>
   3a800:	ldr	r4, [sp, #240]	; 0xf0
   3a804:	mov	r3, #0
   3a808:	str	r3, [sp, #276]	; 0x114
   3a80c:	ldr	sl, [r4, #36]	; 0x24
   3a810:	str	r3, [sp, #264]	; 0x108
   3a814:	str	r3, [sp, #260]	; 0x104
   3a818:	str	r3, [sp, #120]	; 0x78
   3a81c:	ldrsb	r3, [sl, #52]	; 0x34
   3a820:	ldr	r2, [sp, #196]	; 0xc4
   3a824:	cmp	r3, #0
   3a828:	mov	r1, r2
   3a82c:	str	r2, [sp, #8]
   3a830:	bge	3a87c <fts_children@@Base+0x8de0>
   3a834:	ldr	r2, [sp, #244]	; 0xf4
   3a838:	sub	r1, r1, #1
   3a83c:	add	r0, sp, #156	; 0x9c
   3a840:	bl	35c00 <fts_children@@Base+0x4164>
   3a844:	tst	r0, #1
   3a848:	ldrne	sl, [r4, #40]	; 0x28
   3a84c:	bne	3b158 <fts_children@@Base+0x96bc>
   3a850:	cmp	r0, #0
   3a854:	beq	3a87c <fts_children@@Base+0x8de0>
   3a858:	and	r3, r0, #6
   3a85c:	cmp	r3, #6
   3a860:	ldreq	sl, [r4, #48]	; 0x30
   3a864:	beq	3b158 <fts_children@@Base+0x96bc>
   3a868:	tst	r0, #2
   3a86c:	ldrne	sl, [r4, #44]	; 0x2c
   3a870:	bne	3b158 <fts_children@@Base+0x96bc>
   3a874:	tst	r0, #4
   3a878:	bne	3b140 <fts_children@@Base+0x96a4>
   3a87c:	ldr	r3, [sp, #256]	; 0x100
   3a880:	cmp	r3, #0
   3a884:	beq	3b1cc <fts_children@@Base+0x9730>
   3a888:	ldr	r2, [r4, #76]	; 0x4c
   3a88c:	ldr	r1, [sp, #8]
   3a890:	cmp	r2, #0
   3a894:	str	sl, [r3, r1, lsl #2]
   3a898:	bne	3b510 <fts_children@@Base+0x9a74>
   3a89c:	ldrb	r3, [sl, #52]	; 0x34
   3a8a0:	ldr	r2, [sp, #100]	; 0x64
   3a8a4:	str	r2, [sp, #12]
   3a8a8:	lsr	r3, r3, #4
   3a8ac:	ands	r3, r3, #1
   3a8b0:	streq	r3, [sp, #24]
   3a8b4:	mvneq	fp, #0
   3a8b8:	bne	3b49c <fts_children@@Base+0x9a00>
   3a8bc:	ldr	r3, [sp, #92]	; 0x5c
   3a8c0:	ldr	r4, [sp, #196]	; 0xc4
   3a8c4:	str	r3, [sp, #36]	; 0x24
   3a8c8:	str	fp, [sp, #20]
   3a8cc:	b	3a930 <fts_children@@Base+0x8e94>
   3a8d0:	ldr	r2, [sp, #12]
   3a8d4:	ldrb	r3, [r5, #52]	; 0x34
   3a8d8:	cmp	sl, r5
   3a8dc:	movne	r2, #0
   3a8e0:	andeq	r2, r2, #1
   3a8e4:	ldr	r1, [sp, #8]
   3a8e8:	cmp	r2, #0
   3a8ec:	movne	r1, r8
   3a8f0:	tst	r3, #16
   3a8f4:	str	r2, [sp, #12]
   3a8f8:	str	r1, [sp, #8]
   3a8fc:	ldr	r4, [sp, #196]	; 0xc4
   3a900:	beq	3a92c <fts_children@@Base+0x8e90>
   3a904:	tst	r3, #128	; 0x80
   3a908:	bne	3ac84 <fts_children@@Base+0x91e8>
   3a90c:	ldr	r3, [sp, #16]
   3a910:	cmp	r3, #0
   3a914:	beq	3b4cc <fts_children@@Base+0x9a30>
   3a918:	ldr	r3, [sp, #16]
   3a91c:	str	r4, [sp, #20]
   3a920:	str	r3, [sp, #24]
   3a924:	mov	r3, #0
   3a928:	str	r3, [sp, #36]	; 0x24
   3a92c:	mov	sl, r5
   3a930:	ldr	r3, [sp, #212]	; 0xd4
   3a934:	cmp	r3, r4
   3a938:	ble	3ac7c <fts_children@@Base+0x91e0>
   3a93c:	ldr	r3, [sp, #192]	; 0xc0
   3a940:	add	r8, r4, #1
   3a944:	cmp	r8, r3
   3a948:	bge	3aca4 <fts_children@@Base+0x9208>
   3a94c:	ldr	r3, [sp, #184]	; 0xb8
   3a950:	cmp	r8, r3
   3a954:	bge	3af00 <fts_children@@Base+0x9464>
   3a958:	ldrb	r3, [sl, #52]	; 0x34
   3a95c:	tst	r3, #32
   3a960:	bne	3acd8 <fts_children@@Base+0x923c>
   3a964:	ldr	r3, [sp, #160]	; 0xa0
   3a968:	add	r2, r4, #1
   3a96c:	str	r2, [sp, #196]	; 0xc4
   3a970:	ldrb	r4, [r3, r4]
   3a974:	ldr	r3, [sl, #44]	; 0x2c
   3a978:	cmp	r3, #0
   3a97c:	beq	3aed0 <fts_children@@Base+0x9434>
   3a980:	ldr	r5, [r3, r4, lsl #2]
   3a984:	ldr	r3, [sp, #256]	; 0x100
   3a988:	cmp	r3, #0
   3a98c:	beq	3a9a4 <fts_children@@Base+0x8f08>
   3a990:	mov	r2, r5
   3a994:	add	r1, sp, #156	; 0x9c
   3a998:	add	r0, sp, #120	; 0x78
   3a99c:	bl	39f2c <fts_children@@Base+0x8490>
   3a9a0:	mov	r5, r0
   3a9a4:	cmp	r5, #0
   3a9a8:	bne	3a8d0 <fts_children@@Base+0x8e34>
   3a9ac:	ldr	r3, [sp, #120]	; 0x78
   3a9b0:	ldr	r0, [sp, #256]	; 0x100
   3a9b4:	cmp	r3, #0
   3a9b8:	bne	3b1a4 <fts_children@@Base+0x9708>
   3a9bc:	cmp	r0, #0
   3a9c0:	beq	3ac7c <fts_children@@Base+0x91e0>
   3a9c4:	ldr	r3, [sp, #52]	; 0x34
   3a9c8:	ldr	r2, [sp, #24]
   3a9cc:	eor	r3, r3, #1
   3a9d0:	tst	r2, r3
   3a9d4:	bne	3ac7c <fts_children@@Base+0x91e0>
   3a9d8:	ldr	r3, [sp, #196]	; 0xc4
   3a9dc:	ldr	ip, [sp, #260]	; 0x104
   3a9e0:	mov	r1, #0
   3a9e4:	add	r0, r0, r3, lsl #2
   3a9e8:	b	3aa00 <fts_children@@Base+0x8f64>
   3a9ec:	ldr	r1, [r0, #4]!
   3a9f0:	mov	r3, r2
   3a9f4:	cmp	r1, #0
   3a9f8:	mov	r1, #1
   3a9fc:	bne	3ac40 <fts_children@@Base+0x91a4>
   3aa00:	add	r2, r3, #1
   3aa04:	cmp	ip, r2
   3aa08:	bge	3a9ec <fts_children@@Base+0x8f50>
   3aa0c:	ldr	fp, [sp, #20]
   3aa10:	cmp	r1, #0
   3aa14:	strne	r3, [sp, #196]	; 0xc4
   3aa18:	ldr	r2, [sp, #36]	; 0x24
   3aa1c:	cmp	r2, #0
   3aa20:	ldrne	r3, [r2]
   3aa24:	ldrne	r1, [sp, #8]
   3aa28:	addne	r3, r3, r1
   3aa2c:	strne	r3, [r2]
   3aa30:	cmn	fp, #1
   3aa34:	beq	3af60 <fts_children@@Base+0x94c4>
   3aa38:	cmn	fp, #2
   3aa3c:	beq	3b400 <fts_children@@Base+0x9964>
   3aa40:	ldr	r3, [sp, #28]
   3aa44:	str	fp, [sp, #248]	; 0xf8
   3aa48:	ldrb	r3, [r3, #28]
   3aa4c:	tst	r3, #16
   3aa50:	bne	3aff4 <fts_children@@Base+0x9558>
   3aa54:	ldr	r3, [sp, #344]	; 0x158
   3aa58:	cmp	r3, #1
   3aa5c:	bls	3b3cc <fts_children@@Base+0x9930>
   3aa60:	ldr	r4, [sp, #256]	; 0x100
   3aa64:	mov	r3, fp
   3aa68:	add	r0, sp, #156	; 0x9c
   3aa6c:	ldr	r1, [r4, fp, lsl #2]
   3aa70:	add	r2, r1, #12
   3aa74:	ldr	r1, [r1, #8]
   3aa78:	bl	35e24 <fts_children@@Base+0x4388>
   3aa7c:	ldr	r3, [sp, #60]	; 0x3c
   3aa80:	ldrb	r3, [r3, #88]	; 0x58
   3aa84:	tst	r3, #1
   3aa88:	mov	r8, r0
   3aa8c:	str	r0, [sp, #252]	; 0xfc
   3aa90:	bne	3b028 <fts_children@@Base+0x958c>
   3aa94:	ldr	r3, [sp, #60]	; 0x3c
   3aa98:	ldr	r3, [r3, #76]	; 0x4c
   3aa9c:	cmp	r3, #0
   3aaa0:	bne	3b024 <fts_children@@Base+0x9588>
   3aaa4:	b	3b3dc <fts_children@@Base+0x9940>
   3aaa8:	ldr	r3, [sp, #56]	; 0x38
   3aaac:	cmp	r3, r5
   3aab0:	ble	3ab1c <fts_children@@Base+0x9080>
   3aab4:	ldr	r3, [sp, #48]	; 0x30
   3aab8:	ldr	r1, [sp, #72]	; 0x48
   3aabc:	ldrb	r2, [r3, r5]
   3aac0:	add	r3, r3, r5
   3aac4:	ldrb	r2, [r1, r2]
   3aac8:	ldr	r1, [sp, #44]	; 0x2c
   3aacc:	ldrb	r2, [r1, r2]
   3aad0:	cmp	r2, #0
   3aad4:	bne	3a7bc <fts_children@@Base+0x8d20>
   3aad8:	ldr	r2, [sp, #48]	; 0x30
   3aadc:	ldr	r1, [sp, #56]	; 0x38
   3aae0:	sub	r0, r2, #1
   3aae4:	add	r0, r0, r1
   3aae8:	rsb	r2, r2, #1
   3aaec:	ldr	ip, [sp, #44]	; 0x2c
   3aaf0:	ldr	lr, [sp, #72]	; 0x48
   3aaf4:	b	3ab0c <fts_children@@Base+0x9070>
   3aaf8:	ldrb	r1, [r3, #1]!
   3aafc:	ldrb	r1, [lr, r1]
   3ab00:	ldrb	r1, [ip, r1]
   3ab04:	cmp	r1, #0
   3ab08:	bne	3a7b8 <fts_children@@Base+0x8d1c>
   3ab0c:	cmp	r3, r0
   3ab10:	add	r5, r2, r3
   3ab14:	bne	3aaf8 <fts_children@@Base+0x905c>
   3ab18:	str	r5, [sp, #116]	; 0x74
   3ab1c:	ldr	r3, [sp, #56]	; 0x38
   3ab20:	cmp	r3, r5
   3ab24:	bne	3a7bc <fts_children@@Base+0x8d20>
   3ab28:	ldr	r2, [sp, #64]	; 0x40
   3ab2c:	cmp	r2, r3
   3ab30:	movle	r3, #0
   3ab34:	ldrgt	r2, [sp, #48]	; 0x30
   3ab38:	ldrbgt	r3, [r2, r3]
   3ab3c:	ldr	r2, [sp, #72]	; 0x48
   3ab40:	cmp	r2, #0
   3ab44:	ldrbne	r3, [r2, r3]
   3ab48:	ldr	r2, [sp, #44]	; 0x2c
   3ab4c:	ldrb	r3, [r2, r3]
   3ab50:	cmp	r3, #0
   3ab54:	bne	3a7bc <fts_children@@Base+0x8d20>
   3ab58:	ldr	sl, [sp, #60]	; 0x3c
   3ab5c:	mov	r3, #1
   3ab60:	ldr	r0, [sp, #256]	; 0x100
   3ab64:	str	r3, [sp, #32]
   3ab68:	b	3b1b0 <fts_children@@Base+0x9714>
   3ab6c:	ldr	r3, [sp, #56]	; 0x38
   3ab70:	cmp	r3, r5
   3ab74:	ble	3ab1c <fts_children@@Base+0x9080>
   3ab78:	ldr	r3, [sp, #48]	; 0x30
   3ab7c:	ldr	r1, [sp, #44]	; 0x2c
   3ab80:	ldrb	r2, [r3, r5]
   3ab84:	add	r3, r3, r5
   3ab88:	ldrb	r2, [r1, r2]
   3ab8c:	cmp	r2, #0
   3ab90:	bne	3a7bc <fts_children@@Base+0x8d20>
   3ab94:	ldr	r2, [sp, #48]	; 0x30
   3ab98:	ldr	r1, [sp, #56]	; 0x38
   3ab9c:	sub	r0, r2, #1
   3aba0:	add	r0, r0, r1
   3aba4:	rsb	r2, r2, #1
   3aba8:	ldr	ip, [sp, #44]	; 0x2c
   3abac:	b	3abc0 <fts_children@@Base+0x9124>
   3abb0:	ldrb	r1, [r3, #1]!
   3abb4:	ldrb	r1, [ip, r1]
   3abb8:	cmp	r1, #0
   3abbc:	bne	3a7b8 <fts_children@@Base+0x8d1c>
   3abc0:	cmp	r0, r3
   3abc4:	add	r5, r2, r3
   3abc8:	bne	3abb0 <fts_children@@Base+0x9114>
   3abcc:	str	r5, [sp, #116]	; 0x74
   3abd0:	b	3ab1c <fts_children@@Base+0x9080>
   3abd4:	ldr	r3, [sp, #68]	; 0x44
   3abd8:	cmp	r3, r5
   3abdc:	bgt	3ab58 <fts_children@@Base+0x90bc>
   3abe0:	mov	r1, #0
   3abe4:	mov	r3, r5
   3abe8:	ldr	ip, [sp, #44]	; 0x2c
   3abec:	ldr	r0, [sp, #72]	; 0x48
   3abf0:	ldr	r4, [sp, #68]	; 0x44
   3abf4:	ldr	r6, [sp, #48]	; 0x30
   3abf8:	ldr	lr, [sp, #64]	; 0x40
   3abfc:	b	3ac10 <fts_children@@Base+0x9174>
   3ac00:	sub	r3, r3, #1
   3ac04:	cmp	r3, r4
   3ac08:	mov	r1, #1
   3ac0c:	blt	3b434 <fts_children@@Base+0x9998>
   3ac10:	cmp	lr, r3
   3ac14:	movle	r2, #0
   3ac18:	ldrbgt	r2, [r6, r3]
   3ac1c:	cmp	r0, #0
   3ac20:	ldrbne	r2, [r0, r2]
   3ac24:	ldrb	r2, [ip, r2]
   3ac28:	cmp	r2, #0
   3ac2c:	beq	3ac00 <fts_children@@Base+0x9164>
   3ac30:	cmp	r1, #0
   3ac34:	movne	r5, r3
   3ac38:	strne	r3, [sp, #116]	; 0x74
   3ac3c:	b	3a7bc <fts_children@@Base+0x8d20>
   3ac40:	mov	r2, #0
   3ac44:	add	r1, sp, #156	; 0x9c
   3ac48:	add	r0, sp, #120	; 0x78
   3ac4c:	str	r3, [sp, #196]	; 0xc4
   3ac50:	bl	39f2c <fts_children@@Base+0x8490>
   3ac54:	ldr	r3, [sp, #120]	; 0x78
   3ac58:	cmp	r3, #0
   3ac5c:	bne	3ac70 <fts_children@@Base+0x91d4>
   3ac60:	cmp	r0, #0
   3ac64:	bne	3b4c4 <fts_children@@Base+0x9a28>
   3ac68:	ldr	r0, [sp, #256]	; 0x100
   3ac6c:	b	3a9d8 <fts_children@@Base+0x8f3c>
   3ac70:	cmp	r0, #0
   3ac74:	mov	r5, r0
   3ac78:	bne	3a8d0 <fts_children@@Base+0x8e34>
   3ac7c:	ldr	fp, [sp, #20]
   3ac80:	b	3aa18 <fts_children@@Base+0x8f7c>
   3ac84:	mov	r3, r4
   3ac88:	add	r2, r5, #12
   3ac8c:	ldr	r1, [r5, #8]
   3ac90:	add	r0, sp, #156	; 0x9c
   3ac94:	bl	35e24 <fts_children@@Base+0x4388>
   3ac98:	cmp	r0, #0
   3ac9c:	beq	3a92c <fts_children@@Base+0x8e90>
   3aca0:	b	3a90c <fts_children@@Base+0x8e70>
   3aca4:	ldr	r2, [sp, #204]	; 0xcc
   3aca8:	cmp	r3, r2
   3acac:	bge	3a94c <fts_children@@Base+0x8eb0>
   3acb0:	add	r1, r4, #2
   3acb4:	add	r0, sp, #156	; 0x9c
   3acb8:	bl	33460 <fts_children@@Base+0x19c4>
   3acbc:	cmp	r0, #0
   3acc0:	str	r0, [sp, #120]	; 0x78
   3acc4:	bne	3b488 <fts_children@@Base+0x99ec>
   3acc8:	ldrb	r3, [sl, #52]	; 0x34
   3accc:	ldr	r4, [sp, #196]	; 0xc4
   3acd0:	tst	r3, #32
   3acd4:	beq	3a964 <fts_children@@Base+0x8ec8>
   3acd8:	ldr	fp, [sl, #8]
   3acdc:	ldr	r6, [sp, #240]	; 0xf0
   3ace0:	cmp	fp, #0
   3ace4:	ble	3afe8 <fts_children@@Base+0x954c>
   3ace8:	add	r3, r6, #128	; 0x80
   3acec:	str	r8, [sp, #76]	; 0x4c
   3acf0:	mov	r7, #0
   3acf4:	str	r3, [sp, #40]	; 0x28
   3acf8:	mov	r8, fp
   3acfc:	b	3ae18 <fts_children@@Base+0x937c>
   3ad00:	tst	r0, #1
   3ad04:	beq	3ae0c <fts_children@@Base+0x9370>
   3ad08:	tst	r5, #8
   3ad0c:	bne	3ae0c <fts_children@@Base+0x9370>
   3ad10:	tst	r5, #32
   3ad14:	beq	3ad20 <fts_children@@Base+0x9284>
   3ad18:	tst	r0, #2
   3ad1c:	beq	3ae0c <fts_children@@Base+0x9370>
   3ad20:	tst	r5, #128	; 0x80
   3ad24:	beq	3ad30 <fts_children@@Base+0x9294>
   3ad28:	tst	r0, #8
   3ad2c:	beq	3ae0c <fts_children@@Base+0x9370>
   3ad30:	str	r4, [sp]
   3ad34:	mov	r0, fp
   3ad38:	add	r3, sp, #156	; 0x9c
   3ad3c:	mov	r2, r9
   3ad40:	ldr	r1, [sp, #40]	; 0x28
   3ad44:	bl	38698 <fts_children@@Base+0x6bfc>
   3ad48:	cmp	r0, #0
   3ad4c:	beq	3ae04 <fts_children@@Base+0x9368>
   3ad50:	ldr	r3, [sp, #276]	; 0x114
   3ad54:	ldr	r4, [sp, #196]	; 0xc4
   3ad58:	cmp	r3, r0
   3ad5c:	add	r4, r0, r4
   3ad60:	movlt	r3, r0
   3ad64:	mov	r1, r4
   3ad68:	add	r0, sp, #156	; 0x9c
   3ad6c:	str	r3, [sp, #276]	; 0x114
   3ad70:	bl	3358c <fts_children@@Base+0x1af0>
   3ad74:	cmp	r0, #0
   3ad78:	str	r0, [sp, #124]	; 0x7c
   3ad7c:	bne	3afc8 <fts_children@@Base+0x952c>
   3ad80:	ldr	r3, [r6, #12]
   3ad84:	ldr	r5, [sp, #256]	; 0x100
   3ad88:	ldr	r2, [r6, #24]
   3ad8c:	ldr	r3, [r3, r9, lsl #2]
   3ad90:	ldr	r1, [r5, r4, lsl #2]
   3ad94:	add	r3, r3, r3, lsl #1
   3ad98:	cmp	r1, #0
   3ad9c:	add	r2, r2, r3, lsl #2
   3ada0:	beq	3ae78 <fts_children@@Base+0x93dc>
   3ada4:	add	r9, sp, #128	; 0x80
   3ada8:	ldr	r1, [r1, #40]	; 0x28
   3adac:	mov	r0, r9
   3adb0:	bl	350bc <fts_children@@Base+0x3620>
   3adb4:	cmp	r0, #0
   3adb8:	str	r0, [sp, #124]	; 0x7c
   3adbc:	bne	3afc8 <fts_children@@Base+0x952c>
   3adc0:	ldr	r2, [sp, #244]	; 0xf4
   3adc4:	sub	r1, r4, #1
   3adc8:	add	r0, sp, #156	; 0x9c
   3adcc:	bl	35c00 <fts_children@@Base+0x4164>
   3add0:	mov	r2, r9
   3add4:	mov	r1, r6
   3add8:	ldr	r5, [sp, #256]	; 0x100
   3addc:	mov	r3, r0
   3ade0:	add	r0, sp, #124	; 0x7c
   3ade4:	bl	351fc <fts_children@@Base+0x3760>
   3ade8:	str	r0, [r5, r4, lsl #2]
   3adec:	ldr	r0, [sp, #136]	; 0x88
   3adf0:	bl	12154 <free@plt>
   3adf4:	ldr	r3, [sp, #256]	; 0x100
   3adf8:	ldr	r2, [r3, r4, lsl #2]
   3adfc:	cmp	r2, #0
   3ae00:	beq	3aebc <fts_children@@Base+0x9420>
   3ae04:	ldr	r4, [sp, #196]	; 0xc4
   3ae08:	ldr	r8, [sl, #8]
   3ae0c:	add	r7, r7, #1
   3ae10:	cmp	r7, r8
   3ae14:	bge	3afe4 <fts_children@@Base+0x9548>
   3ae18:	ldr	r2, [sl, #12]
   3ae1c:	ldr	fp, [r6]
   3ae20:	ldr	r9, [r2, r7, lsl #2]
   3ae24:	add	r2, fp, r9, lsl #3
   3ae28:	ldrb	r1, [r2, #6]
   3ae2c:	tst	r1, #16
   3ae30:	beq	3ae0c <fts_children@@Base+0x9370>
   3ae34:	ldr	r5, [r2, #4]
   3ae38:	ldr	r3, [pc, #1336]	; 3b378 <fts_children@@Base+0x98dc>
   3ae3c:	tst	r3, r5
   3ae40:	beq	3ad30 <fts_children@@Base+0x9294>
   3ae44:	ldr	r2, [sp, #244]	; 0xf4
   3ae48:	mov	r1, r4
   3ae4c:	add	r0, sp, #156	; 0x9c
   3ae50:	bl	35c00 <fts_children@@Base+0x4164>
   3ae54:	ldr	r3, [pc, #1312]	; 3b37c <fts_children@@Base+0x98e0>
   3ae58:	and	r5, r3, r5, lsr #8
   3ae5c:	tst	r5, #4
   3ae60:	bne	3ad00 <fts_children@@Base+0x9264>
   3ae64:	tst	r5, #8
   3ae68:	beq	3ad10 <fts_children@@Base+0x9274>
   3ae6c:	tst	r0, #1
   3ae70:	beq	3ad10 <fts_children@@Base+0x9274>
   3ae74:	b	3ae0c <fts_children@@Base+0x9370>
   3ae78:	ldm	r2, {r0, r1, r2}
   3ae7c:	add	r9, sp, #128	; 0x80
   3ae80:	stm	r9, {r0, r1, r2}
   3ae84:	sub	r1, r4, #1
   3ae88:	ldr	r2, [sp, #244]	; 0xf4
   3ae8c:	add	r0, sp, #156	; 0x9c
   3ae90:	bl	35c00 <fts_children@@Base+0x4164>
   3ae94:	mov	r2, r9
   3ae98:	mov	r1, r6
   3ae9c:	mov	r3, r0
   3aea0:	add	r0, sp, #124	; 0x7c
   3aea4:	bl	351fc <fts_children@@Base+0x3760>
   3aea8:	ldr	r3, [sp, #256]	; 0x100
   3aeac:	str	r0, [r5, r4, lsl #2]
   3aeb0:	ldr	r2, [r3, r4, lsl #2]
   3aeb4:	cmp	r2, #0
   3aeb8:	bne	3ae04 <fts_children@@Base+0x9368>
   3aebc:	ldr	r0, [sp, #124]	; 0x7c
   3aec0:	cmp	r0, #0
   3aec4:	beq	3ae04 <fts_children@@Base+0x9368>
   3aec8:	ldr	r8, [sp, #76]	; 0x4c
   3aecc:	b	3afd0 <fts_children@@Base+0x9534>
   3aed0:	ldr	r5, [sl, #48]	; 0x30
   3aed4:	cmp	r5, #0
   3aed8:	beq	3b1dc <fts_children@@Base+0x9740>
   3aedc:	ldr	r1, [sp, #196]	; 0xc4
   3aee0:	ldr	r2, [sp, #244]	; 0xf4
   3aee4:	sub	r1, r1, #1
   3aee8:	add	r0, sp, #156	; 0x9c
   3aeec:	bl	35c00 <fts_children@@Base+0x4164>
   3aef0:	tst	r0, #1
   3aef4:	addne	r4, r4, #256	; 0x100
   3aef8:	ldr	r5, [r5, r4, lsl #2]
   3aefc:	b	3a984 <fts_children@@Base+0x8ee8>
   3af00:	ldr	r2, [sp, #204]	; 0xcc
   3af04:	cmp	r3, r2
   3af08:	bge	3a958 <fts_children@@Base+0x8ebc>
   3af0c:	b	3acb0 <fts_children@@Base+0x9214>
   3af10:	add	r1, sp, #128	; 0x80
   3af14:	add	r0, sp, #156	; 0x9c
   3af18:	str	r9, [sp, #128]	; 0x80
   3af1c:	str	sl, [sp, #132]	; 0x84
   3af20:	str	r8, [sp, #136]	; 0x88
   3af24:	str	fp, [sp, #140]	; 0x8c
   3af28:	str	sl, [sp, #144]	; 0x90
   3af2c:	str	sl, [sp, #148]	; 0x94
   3af30:	str	sl, [sp, #152]	; 0x98
   3af34:	bl	3a0c8 <fts_children@@Base+0x862c>
   3af38:	mov	r7, r0
   3af3c:	ldr	r0, [sp, #152]	; 0x98
   3af40:	bl	12154 <free@plt>
   3af44:	cmp	r7, #0
   3af48:	bne	3b580 <fts_children@@Base+0x9ae4>
   3af4c:	ldr	r3, [r9]
   3af50:	cmp	r3, #0
   3af54:	bne	3b210 <fts_children@@Base+0x9774>
   3af58:	mov	r0, r9
   3af5c:	bl	12154 <free@plt>
   3af60:	add	r0, sp, #156	; 0x9c
   3af64:	bl	33c0c <fts_children@@Base+0x2170>
   3af68:	ldr	r5, [sp, #116]	; 0x74
   3af6c:	ldr	r3, [sp, #88]	; 0x58
   3af70:	ldr	r2, [sp, #68]	; 0x44
   3af74:	add	r5, r5, r3
   3af78:	ldr	r3, [sp, #56]	; 0x38
   3af7c:	str	r5, [sp, #116]	; 0x74
   3af80:	cmp	r5, r3
   3af84:	movle	r3, #0
   3af88:	movgt	r3, #1
   3af8c:	cmp	r5, r2
   3af90:	orrlt	r3, r3, #1
   3af94:	cmp	r3, #0
   3af98:	beq	3a770 <fts_children@@Base+0x8cd4>
   3af9c:	b	3ab58 <fts_children@@Base+0x90bc>
   3afa0:	mov	r3, #1
   3afa4:	str	r3, [sp, #32]
   3afa8:	ldr	r3, [pc, #960]	; 3b370 <fts_children@@Base+0x98d4>
   3afac:	ldr	r2, [sp, #292]	; 0x124
   3afb0:	ldr	r0, [sp, #32]
   3afb4:	ldr	r3, [r3]
   3afb8:	cmp	r2, r3
   3afbc:	bne	3b688 <fts_children@@Base+0x9bec>
   3afc0:	add	sp, sp, #300	; 0x12c
   3afc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3afc8:	ldr	r8, [sp, #76]	; 0x4c
   3afcc:	ldr	r3, [sp, #256]	; 0x100
   3afd0:	cmp	r3, #0
   3afd4:	str	r0, [sp, #120]	; 0x78
   3afd8:	beq	3b204 <fts_children@@Base+0x9768>
   3afdc:	mov	r5, #0
   3afe0:	b	3a990 <fts_children@@Base+0x8ef4>
   3afe4:	ldr	r8, [sp, #76]	; 0x4c
   3afe8:	mov	r3, #0
   3afec:	str	r3, [sp, #120]	; 0x78
   3aff0:	b	3a964 <fts_children@@Base+0x8ec8>
   3aff4:	ldr	sl, [sp, #60]	; 0x3c
   3aff8:	ldr	r3, [sl, #76]	; 0x4c
   3affc:	cmp	r3, #0
   3b000:	beq	3b234 <fts_children@@Base+0x9798>
   3b004:	ldr	r4, [sp, #256]	; 0x100
   3b008:	mov	r3, fp
   3b00c:	add	r0, sp, #156	; 0x9c
   3b010:	ldr	r1, [r4, fp, lsl #2]
   3b014:	add	r2, r1, #12
   3b018:	ldr	r1, [r1, #8]
   3b01c:	bl	35e24 <fts_children@@Base+0x4388>
   3b020:	str	r0, [sp, #252]	; 0xfc
   3b024:	ldr	r8, [sp, #252]	; 0xfc
   3b028:	ldr	r3, [sp, #240]	; 0xf0
   3b02c:	cmn	fp, #-1073741822	; 0xc0000002
   3b030:	str	r3, [sp, #8]
   3b034:	bhi	3b4d4 <fts_children@@Base+0x9a38>
   3b038:	add	r6, fp, #1
   3b03c:	lsl	r4, r6, #2
   3b040:	mov	r0, r4
   3b044:	bl	123dc <malloc@plt>
   3b048:	subs	r9, r0, #0
   3b04c:	beq	3b400 <fts_children@@Base+0x9964>
   3b050:	ldr	r3, [sp, #8]
   3b054:	ldr	sl, [r3, #76]	; 0x4c
   3b058:	cmp	sl, #0
   3b05c:	beq	3af10 <fts_children@@Base+0x9474>
   3b060:	mov	r0, r4
   3b064:	bl	123dc <malloc@plt>
   3b068:	cmp	r0, #0
   3b06c:	mov	r5, r0
   3b070:	str	r0, [sp, #12]
   3b074:	beq	3b588 <fts_children@@Base+0x9aec>
   3b078:	add	r4, sp, #144	; 0x90
   3b07c:	mov	sl, r6
   3b080:	add	r3, sp, #128	; 0x80
   3b084:	str	r3, [sp, #20]
   3b088:	lsl	r7, sl, #2
   3b08c:	mov	r2, r7
   3b090:	mov	r1, #0
   3b094:	mov	r0, r5
   3b098:	bl	12514 <memset@plt>
   3b09c:	mov	r3, #0
   3b0a0:	str	r9, [sp, #128]	; 0x80
   3b0a4:	str	r5, [sp, #132]	; 0x84
   3b0a8:	str	r8, [sp, #136]	; 0x88
   3b0ac:	str	fp, [sp, #140]	; 0x8c
   3b0b0:	ldr	r1, [sp, #20]
   3b0b4:	str	r3, [r4]
   3b0b8:	str	r3, [r4, #4]
   3b0bc:	str	r3, [r4, #8]
   3b0c0:	add	r0, sp, #156	; 0x9c
   3b0c4:	bl	3a0c8 <fts_children@@Base+0x862c>
   3b0c8:	mov	r6, r0
   3b0cc:	ldr	r0, [sp, #152]	; 0x98
   3b0d0:	bl	12154 <free@plt>
   3b0d4:	cmp	r6, #0
   3b0d8:	bne	3b554 <fts_children@@Base+0x9ab8>
   3b0dc:	ldr	r2, [r9]
   3b0e0:	cmp	r2, #0
   3b0e4:	bne	3b5a4 <fts_children@@Base+0x9b08>
   3b0e8:	ldr	r2, [r5]
   3b0ec:	cmp	r2, #0
   3b0f0:	bne	3b5a4 <fts_children@@Base+0x9b08>
   3b0f4:	ldr	r3, [sp, #256]	; 0x100
   3b0f8:	sub	r7, r7, #4
   3b0fc:	add	r3, r3, r7
   3b100:	subs	fp, fp, #1
   3b104:	bcc	3b414 <fts_children@@Base+0x9978>
   3b108:	ldr	r1, [r3, #-4]!
   3b10c:	cmp	r1, #0
   3b110:	beq	3b100 <fts_children@@Base+0x9664>
   3b114:	ldrb	r2, [r1, #52]	; 0x34
   3b118:	tst	r2, #16
   3b11c:	beq	3b100 <fts_children@@Base+0x9664>
   3b120:	add	r2, r1, #12
   3b124:	mov	r3, fp
   3b128:	ldr	r1, [r1, #8]
   3b12c:	add	r0, sp, #156	; 0x9c
   3b130:	bl	35e24 <fts_children@@Base+0x4388>
   3b134:	add	sl, fp, #1
   3b138:	mov	r8, r0
   3b13c:	b	3b088 <fts_children@@Base+0x95ec>
   3b140:	mov	r3, r0
   3b144:	ldr	r2, [sl, #40]	; 0x28
   3b148:	mov	r1, r4
   3b14c:	add	r0, sp, #120	; 0x78
   3b150:	bl	351fc <fts_children@@Base+0x3760>
   3b154:	mov	sl, r0
   3b158:	cmp	sl, #0
   3b15c:	bne	3a87c <fts_children@@Base+0x8de0>
   3b160:	ldr	r3, [sp, #120]	; 0x78
   3b164:	ldr	sl, [sp, #60]	; 0x3c
   3b168:	cmp	r3, #12
   3b16c:	str	r3, [sp, #32]
   3b170:	bne	3b68c <fts_children@@Base+0x9bf0>
   3b174:	ldr	r0, [sp, #256]	; 0x100
   3b178:	bl	12154 <free@plt>
   3b17c:	ldr	r3, [sl, #76]	; 0x4c
   3b180:	cmp	r3, #0
   3b184:	beq	3b1c0 <fts_children@@Base+0x9724>
   3b188:	add	r0, sp, #156	; 0x9c
   3b18c:	bl	33c0c <fts_children@@Base+0x2170>
   3b190:	ldr	r0, [sp, #288]	; 0x120
   3b194:	bl	12154 <free@plt>
   3b198:	ldr	r0, [sp, #272]	; 0x110
   3b19c:	bl	12154 <free@plt>
   3b1a0:	b	3b1c0 <fts_children@@Base+0x9724>
   3b1a4:	ldr	sl, [sp, #60]	; 0x3c
   3b1a8:	mov	r3, #12
   3b1ac:	str	r3, [sp, #32]
   3b1b0:	bl	12154 <free@plt>
   3b1b4:	ldr	r3, [sl, #76]	; 0x4c
   3b1b8:	cmp	r3, #0
   3b1bc:	bne	3b188 <fts_children@@Base+0x96ec>
   3b1c0:	add	r0, sp, #156	; 0x9c
   3b1c4:	bl	33bdc <fts_children@@Base+0x2140>
   3b1c8:	b	3afa8 <fts_children@@Base+0x950c>
   3b1cc:	ldr	r3, [sp, #100]	; 0x64
   3b1d0:	str	r3, [sp, #12]
   3b1d4:	ldrb	r3, [sl, #52]	; 0x34
   3b1d8:	b	3a8a8 <fts_children@@Base+0x8e0c>
   3b1dc:	mov	r1, sl
   3b1e0:	ldr	r0, [sp, #240]	; 0xf0
   3b1e4:	bl	3694c <fts_children@@Base+0x4eb0>
   3b1e8:	cmp	r0, #0
   3b1ec:	bne	3a974 <fts_children@@Base+0x8ed8>
   3b1f0:	ldr	r2, [sp, #256]	; 0x100
   3b1f4:	mov	r3, #12
   3b1f8:	cmp	r2, #0
   3b1fc:	str	r3, [sp, #120]	; 0x78
   3b200:	bne	3afdc <fts_children@@Base+0x9540>
   3b204:	ldr	sl, [sp, #60]	; 0x3c
   3b208:	mov	r0, #0
   3b20c:	b	3b1a8 <fts_children@@Base+0x970c>
   3b210:	mov	r3, r9
   3b214:	ldr	r0, [sp, #256]	; 0x100
   3b218:	mov	r9, fp
   3b21c:	mov	fp, r3
   3b220:	ldr	sl, [sp, #60]	; 0x3c
   3b224:	bl	12154 <free@plt>
   3b228:	str	fp, [sp, #256]	; 0x100
   3b22c:	str	r8, [sp, #252]	; 0xfc
   3b230:	str	r9, [sp, #248]	; 0xf8
   3b234:	ldr	r3, [sp, #344]	; 0x158
   3b238:	cmp	r3, #0
   3b23c:	beq	3b174 <fts_children@@Base+0x96d8>
   3b240:	ldr	r3, [sp, #344]	; 0x158
   3b244:	cmp	r3, #1
   3b248:	bls	3b670 <fts_children@@Base+0x9bd4>
   3b24c:	ldr	r2, [sp, #344]	; 0x158
   3b250:	ldr	r3, [sp, #96]	; 0x60
   3b254:	sub	r1, r3, #8
   3b258:	add	r1, r1, r2, lsl #3
   3b25c:	mvn	r2, #0
   3b260:	str	r2, [r3, #12]
   3b264:	str	r2, [r3, #8]!
   3b268:	cmp	r1, r3
   3b26c:	bne	3b260 <fts_children@@Base+0x97c4>
   3b270:	ldr	r3, [sp, #28]
   3b274:	ldr	r0, [sp, #96]	; 0x60
   3b278:	ldr	r1, [sp, #248]	; 0xf8
   3b27c:	ldrb	r3, [r3, #28]
   3b280:	str	r1, [r0, #4]
   3b284:	ldr	r1, [sp, #344]	; 0x158
   3b288:	mov	r2, #0
   3b28c:	lsr	r3, r3, #4
   3b290:	eor	r3, r3, #1
   3b294:	cmp	r1, #1
   3b298:	moveq	r3, #0
   3b29c:	andne	r3, r3, #1
   3b2a0:	cmp	r3, r2
   3b2a4:	str	r2, [r0]
   3b2a8:	bne	3b620 <fts_children@@Base+0x9b84>
   3b2ac:	ldrb	lr, [sp, #232]	; 0xe8
   3b2b0:	ldr	r4, [sp, #184]	; 0xb8
   3b2b4:	ldr	r5, [sp, #168]	; 0xa8
   3b2b8:	ldr	r6, [sp, #188]	; 0xbc
   3b2bc:	ldr	ip, [sp, #116]	; 0x74
   3b2c0:	ldr	r2, [sp, #96]	; 0x60
   3b2c4:	mov	r1, #0
   3b2c8:	ldr	r7, [sp, #344]	; 0x158
   3b2cc:	b	3b2d4 <fts_children@@Base+0x9838>
   3b2d0:	ldr	r3, [r2, #8]!
   3b2d4:	cmn	r3, #1
   3b2d8:	beq	3b2f8 <fts_children@@Base+0x985c>
   3b2dc:	cmp	lr, #0
   3b2e0:	ldr	r0, [r2, #4]
   3b2e4:	bne	3b600 <fts_children@@Base+0x9b64>
   3b2e8:	add	r3, ip, r3
   3b2ec:	add	r0, ip, r0
   3b2f0:	str	r3, [r2]
   3b2f4:	str	r0, [r2, #4]
   3b2f8:	add	r1, r1, #1
   3b2fc:	cmp	r1, r7
   3b300:	bne	3b2d0 <fts_children@@Base+0x9834>
   3b304:	ldr	r3, [sp, #104]	; 0x68
   3b308:	cmp	r3, #0
   3b30c:	ble	3b344 <fts_children@@Base+0x98a8>
   3b310:	ldr	r3, [sp, #104]	; 0x68
   3b314:	ldr	r2, [sp, #344]	; 0x158
   3b318:	add	r1, r3, r2
   3b31c:	ldr	r3, [sp, #344]	; 0x158
   3b320:	ldr	r2, [sp, #96]	; 0x60
   3b324:	add	r3, r2, r3, lsl #3
   3b328:	add	r1, r2, r1, lsl #3
   3b32c:	mvn	r2, #0
   3b330:	str	r2, [r3]
   3b334:	str	r2, [r3, #4]
   3b338:	add	r3, r3, #8
   3b33c:	cmp	r1, r3
   3b340:	bne	3b330 <fts_children@@Base+0x9894>
   3b344:	ldr	r1, [sl, #132]	; 0x84
   3b348:	ldr	r0, [sp, #256]	; 0x100
   3b34c:	cmp	r1, #0
   3b350:	beq	3b1b0 <fts_children@@Base+0x9714>
   3b354:	ldr	r3, [sp, #344]	; 0x158
   3b358:	ldr	r5, [sp, #96]	; 0x60
   3b35c:	sub	ip, r3, #1
   3b360:	add	r4, r5, #8
   3b364:	mov	r3, #0
   3b368:	add	lr, r5, #12
   3b36c:	b	3b3c0 <fts_children@@Base+0x9924>
   3b370:	andeq	fp, r5, r0, ror #24
   3b374:	stcleq	12, cr12, [ip], {204}	; 0xcc
   3b378:	andeq	pc, r3, r0, lsl #30
   3b37c:	strdeq	r0, [r0], -pc	; <UNPREDICTABLE>
   3b380:	andeq	r0, r0, r5, lsr r4
   3b384:	andeq	r0, r0, ip, ror #8
   3b388:			; <UNDEFINED> instruction: 0x0004aab0
   3b38c:	andeq	sl, r4, r0, asr #20
   3b390:	ldrdeq	sl, [r4], -ip
   3b394:	ldr	r2, [r1, r3, lsl #2]
   3b398:	cmp	r2, r3
   3b39c:	beq	3b3bc <fts_children@@Base+0x9920>
   3b3a0:	add	r2, r2, #1
   3b3a4:	ldr	r2, [r5, r2, lsl #3]
   3b3a8:	str	r2, [r4, r3, lsl #3]
   3b3ac:	ldr	r2, [r1, r3, lsl #2]
   3b3b0:	add	r2, r5, r2, lsl #3
   3b3b4:	ldr	r2, [r2, #12]
   3b3b8:	str	r2, [lr, r3, lsl #3]
   3b3bc:	add	r3, r3, #1
   3b3c0:	cmp	r3, ip
   3b3c4:	bne	3b394 <fts_children@@Base+0x98f8>
   3b3c8:	b	3b1b0 <fts_children@@Base+0x9714>
   3b3cc:	ldr	r3, [sp, #60]	; 0x3c
   3b3d0:	ldr	r3, [r3, #76]	; 0x4c
   3b3d4:	cmp	r3, #0
   3b3d8:	bne	3b004 <fts_children@@Base+0x9568>
   3b3dc:	ldr	sl, [sp, #60]	; 0x3c
   3b3e0:	b	3b234 <fts_children@@Base+0x9798>
   3b3e4:	ldr	r2, [sp, #64]	; 0x40
   3b3e8:	b	3a5c0 <fts_children@@Base+0x8b24>
   3b3ec:	ldrb	r3, [sl, #88]	; 0x58
   3b3f0:	ands	r3, r3, #2
   3b3f4:	bne	3a65c <fts_children@@Base+0x8bc0>
   3b3f8:	str	r3, [sp, #256]	; 0x100
   3b3fc:	b	3a680 <fts_children@@Base+0x8be4>
   3b400:	ldr	sl, [sp, #60]	; 0x3c
   3b404:	mov	r3, #12
   3b408:	ldr	r0, [sp, #256]	; 0x100
   3b40c:	str	r3, [sp, #32]
   3b410:	b	3b1b0 <fts_children@@Base+0x9714>
   3b414:	mov	r0, r9
   3b418:	bl	12154 <free@plt>
   3b41c:	mov	r0, r5
   3b420:	bl	12154 <free@plt>
   3b424:	add	r0, sp, #156	; 0x9c
   3b428:	bl	33c0c <fts_children@@Base+0x2170>
   3b42c:	ldr	r5, [sp, #116]	; 0x74
   3b430:	b	3af6c <fts_children@@Base+0x94d0>
   3b434:	ldr	sl, [sp, #60]	; 0x3c
   3b438:	str	r3, [sp, #116]	; 0x74
   3b43c:	str	r1, [sp, #32]
   3b440:	ldr	r0, [sp, #256]	; 0x100
   3b444:	b	3b1b0 <fts_children@@Base+0x9714>
   3b448:	ldr	r2, [sp, #180]	; 0xb4
   3b44c:	ldr	r4, [sp, #44]	; 0x2c
   3b450:	ldr	r1, [sp, #188]	; 0xbc
   3b454:	sub	r3, r5, r2
   3b458:	cmp	r1, r3
   3b45c:	bhi	3b6bc <fts_children@@Base+0x9c20>
   3b460:	ldr	r2, [sp, #352]	; 0x160
   3b464:	mov	r1, r5
   3b468:	add	r0, sp, #156	; 0x9c
   3b46c:	bl	35ef4 <fts_children@@Base+0x4458>
   3b470:	subs	r3, r0, #0
   3b474:	str	r3, [sp, #32]
   3b478:	beq	3b6b4 <fts_children@@Base+0x9c18>
   3b47c:	ldr	sl, [sp, #60]	; 0x3c
   3b480:	ldr	r0, [sp, #256]	; 0x100
   3b484:	b	3b1b0 <fts_children@@Base+0x9714>
   3b488:	cmp	r0, #12
   3b48c:	ldr	sl, [sp, #60]	; 0x3c
   3b490:	bne	3b6a0 <fts_children@@Base+0x9c04>
   3b494:	str	r0, [sp, #32]
   3b498:	b	3b174 <fts_children@@Base+0x96d8>
   3b49c:	ldrsb	r3, [sl, #52]	; 0x34
   3b4a0:	cmp	r3, #0
   3b4a4:	blt	3b4e8 <fts_children@@Base+0x9a4c>
   3b4a8:	ldr	r3, [sp, #16]
   3b4ac:	ldr	fp, [sp, #8]
   3b4b0:	cmp	r3, #0
   3b4b4:	beq	3aa30 <fts_children@@Base+0x8f94>
   3b4b8:	ldr	r3, [sp, #16]
   3b4bc:	str	r3, [sp, #24]
   3b4c0:	b	3a8bc <fts_children@@Base+0x8e20>
   3b4c4:	mov	r5, r0
   3b4c8:	b	3a8d0 <fts_children@@Base+0x8e34>
   3b4cc:	mov	fp, r4
   3b4d0:	b	3aa30 <fts_children@@Base+0x8f94>
   3b4d4:	mov	r3, #12
   3b4d8:	ldr	sl, [sp, #60]	; 0x3c
   3b4dc:	mov	r0, r4
   3b4e0:	str	r3, [sp, #32]
   3b4e4:	b	3b1b0 <fts_children@@Base+0x9714>
   3b4e8:	ldr	r3, [sp, #8]
   3b4ec:	add	r2, sl, #12
   3b4f0:	ldr	r1, [sl, #8]
   3b4f4:	add	r0, sp, #156	; 0x9c
   3b4f8:	bl	35e24 <fts_children@@Base+0x4388>
   3b4fc:	subs	r3, r0, #0
   3b500:	str	r3, [sp, #24]
   3b504:	bne	3b4a8 <fts_children@@Base+0x9a0c>
   3b508:	mvn	fp, #0
   3b50c:	b	3a8bc <fts_children@@Base+0x8e20>
   3b510:	add	r4, sl, #8
   3b514:	add	r5, sl, #12
   3b518:	mov	r1, r4
   3b51c:	mov	r2, r5
   3b520:	mov	r3, #0
   3b524:	add	r0, sp, #156	; 0x9c
   3b528:	bl	35b08 <fts_children@@Base+0x406c>
   3b52c:	cmp	r0, #0
   3b530:	mov	fp, r0
   3b534:	str	r0, [sp, #120]	; 0x78
   3b538:	bne	3aa30 <fts_children@@Base+0x8f94>
   3b53c:	ldrb	r3, [sl, #52]	; 0x34
   3b540:	tst	r3, #64	; 0x40
   3b544:	bne	3b5d8 <fts_children@@Base+0x9b3c>
   3b548:	mov	r2, #0
   3b54c:	str	r2, [sp, #12]
   3b550:	b	3a8a8 <fts_children@@Base+0x8e0c>
   3b554:	mov	r7, r6
   3b558:	mov	r0, r9
   3b55c:	bl	12154 <free@plt>
   3b560:	ldr	r0, [sp, #12]
   3b564:	bl	12154 <free@plt>
   3b568:	cmp	r7, #1
   3b56c:	beq	3af60 <fts_children@@Base+0x94c4>
   3b570:	ldr	sl, [sp, #60]	; 0x3c
   3b574:	str	r7, [sp, #32]
   3b578:	ldr	r0, [sp, #256]	; 0x100
   3b57c:	b	3b1b0 <fts_children@@Base+0x9714>
   3b580:	str	sl, [sp, #12]
   3b584:	b	3b558 <fts_children@@Base+0x9abc>
   3b588:	mov	r0, r9
   3b58c:	ldr	sl, [sp, #60]	; 0x3c
   3b590:	bl	12154 <free@plt>
   3b594:	mov	r3, #12
   3b598:	str	r3, [sp, #32]
   3b59c:	ldr	r0, [sp, #256]	; 0x100
   3b5a0:	b	3b1b0 <fts_children@@Base+0x9714>
   3b5a4:	mov	r3, sl
   3b5a8:	mov	r2, r5
   3b5ac:	mov	r1, r9
   3b5b0:	ldr	r0, [sp, #8]
   3b5b4:	bl	356e8 <fts_children@@Base+0x3c4c>
   3b5b8:	mov	r7, r0
   3b5bc:	mov	r0, r5
   3b5c0:	bl	12154 <free@plt>
   3b5c4:	cmp	r7, #0
   3b5c8:	beq	3b210 <fts_children@@Base+0x9774>
   3b5cc:	mov	r3, #0
   3b5d0:	str	r3, [sp, #12]
   3b5d4:	b	3b558 <fts_children@@Base+0x9abc>
   3b5d8:	mov	r2, r5
   3b5dc:	mov	r1, r4
   3b5e0:	add	r0, sp, #156	; 0x9c
   3b5e4:	bl	39790 <fts_children@@Base+0x7cf4>
   3b5e8:	cmp	r0, #0
   3b5ec:	mov	fp, r0
   3b5f0:	str	r0, [sp, #120]	; 0x78
   3b5f4:	bne	3aa30 <fts_children@@Base+0x8f94>
   3b5f8:	ldrb	r3, [sl, #52]	; 0x34
   3b5fc:	b	3b548 <fts_children@@Base+0x9aac>
   3b600:	cmp	r4, r3
   3b604:	moveq	r3, r6
   3b608:	ldrne	r3, [r5, r3, lsl #2]
   3b60c:	cmp	r4, r0
   3b610:	str	r3, [r2]
   3b614:	moveq	r0, r6
   3b618:	ldrne	r0, [r5, r0, lsl #2]
   3b61c:	b	3b2e8 <fts_children@@Base+0x984c>
   3b620:	ldrb	r3, [sl, #88]	; 0x58
   3b624:	tst	r3, #1
   3b628:	beq	3b640 <fts_children@@Base+0x9ba4>
   3b62c:	ldr	r3, [sl, #76]	; 0x4c
   3b630:	cmp	r3, #0
   3b634:	movle	r3, #0
   3b638:	movgt	r3, #1
   3b63c:	str	r3, [sp, #108]	; 0x6c
   3b640:	ldr	r3, [sp, #108]	; 0x6c
   3b644:	ldr	r4, [sp, #96]	; 0x60
   3b648:	str	r3, [sp]
   3b64c:	ldr	r0, [sp, #28]
   3b650:	mov	r3, r4
   3b654:	ldr	r2, [sp, #344]	; 0x158
   3b658:	add	r1, sp, #156	; 0x9c
   3b65c:	bl	38f2c <fts_children@@Base+0x7490>
   3b660:	cmp	r0, #0
   3b664:	bne	3b494 <fts_children@@Base+0x99f8>
   3b668:	ldr	r3, [r4]
   3b66c:	b	3b2ac <fts_children@@Base+0x9810>
   3b670:	ldr	r1, [sp, #96]	; 0x60
   3b674:	ldr	r2, [sp, #248]	; 0xf8
   3b678:	mov	r3, #0
   3b67c:	str	r2, [r1, #4]
   3b680:	str	r3, [r1]
   3b684:	b	3b2ac <fts_children@@Base+0x9810>
   3b688:	bl	12244 <__stack_chk_fail@plt>
   3b68c:	ldr	r3, [pc, #-772]	; 3b390 <fts_children@@Base+0x98f4>
   3b690:	ldr	r2, [pc, #-792]	; 3b380 <fts_children@@Base+0x98e4>
   3b694:	ldr	r1, [pc, #-784]	; 3b38c <fts_children@@Base+0x98f0>
   3b698:	ldr	r0, [pc, #-792]	; 3b388 <fts_children@@Base+0x98ec>
   3b69c:	bl	1279c <__assert_fail@plt>
   3b6a0:	ldr	r3, [pc, #-792]	; 3b390 <fts_children@@Base+0x98f4>
   3b6a4:	ldr	r2, [pc, #-808]	; 3b384 <fts_children@@Base+0x98e8>
   3b6a8:	ldr	r1, [pc, #-804]	; 3b38c <fts_children@@Base+0x98f0>
   3b6ac:	ldr	r0, [pc, #-812]	; 3b388 <fts_children@@Base+0x98ec>
   3b6b0:	bl	1279c <__assert_fail@plt>
   3b6b4:	ldr	r2, [sp, #180]	; 0xb4
   3b6b8:	sub	r3, r5, r2
   3b6bc:	ldr	r1, [sp, #64]	; 0x40
   3b6c0:	cmp	r1, r5
   3b6c4:	movle	r3, r4
   3b6c8:	ldrgt	r1, [sp, #160]	; 0xa0
   3b6cc:	ldrbgt	r3, [r1, r3]
   3b6d0:	addgt	r3, r4, r3
   3b6d4:	ldrb	r3, [r3]
   3b6d8:	cmp	r3, #0
   3b6dc:	bne	3a7bc <fts_children@@Base+0x8d20>
   3b6e0:	ldr	r3, [sp, #88]	; 0x58
   3b6e4:	ldr	r1, [sp, #68]	; 0x44
   3b6e8:	add	r5, r5, r3
   3b6ec:	ldr	r3, [sp, #56]	; 0x38
   3b6f0:	str	r5, [sp, #116]	; 0x74
   3b6f4:	cmp	r5, r3
   3b6f8:	movle	r3, #0
   3b6fc:	movgt	r3, #1
   3b700:	cmp	r5, r1
   3b704:	orrlt	r3, r3, #1
   3b708:	cmp	r3, #0
   3b70c:	beq	3b450 <fts_children@@Base+0x99b4>
   3b710:	b	3ab58 <fts_children@@Base+0x90bc>
   3b714:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b718:	mov	sl, r2
   3b71c:	sub	sp, sp, #100	; 0x64
   3b720:	ldr	r2, [r0, #100]	; 0x64
   3b724:	mov	ip, r0
   3b728:	str	r0, [sp, #16]
   3b72c:	ldr	r0, [pc, #1916]	; 3beb0 <fts_children@@Base+0xa414>
   3b730:	mov	r4, r3
   3b734:	ldr	r3, [r2, sl, lsl #2]
   3b738:	ldr	r0, [r0]
   3b73c:	str	r3, [sp, #20]
   3b740:	cmp	r3, #0
   3b744:	lsl	r3, sl, #2
   3b748:	mov	lr, r3
   3b74c:	str	r3, [sp, #24]
   3b750:	mov	r3, #0
   3b754:	mov	r5, r1
   3b758:	add	r2, r2, lr
   3b75c:	str	r0, [sp, #92]	; 0x5c
   3b760:	ldr	r6, [ip, #84]	; 0x54
   3b764:	ldr	fp, [r4, #4]
   3b768:	str	r3, [sp, #60]	; 0x3c
   3b76c:	beq	3bbf0 <fts_children@@Base+0xa154>
   3b770:	cmp	fp, #0
   3b774:	bne	3b7b0 <fts_children@@Base+0x9d14>
   3b778:	ldr	r3, [r1]
   3b77c:	str	fp, [r3, sl, lsl #2]
   3b780:	ldr	r3, [r2]
   3b784:	ldrb	fp, [r3, #52]	; 0x34
   3b788:	ands	fp, fp, #64	; 0x40
   3b78c:	bne	3b8d0 <fts_children@@Base+0x9e34>
   3b790:	ldr	r3, [pc, #1816]	; 3beb0 <fts_children@@Base+0xa414>
   3b794:	ldr	r2, [sp, #92]	; 0x5c
   3b798:	mov	r0, fp
   3b79c:	ldr	r3, [r3]
   3b7a0:	cmp	r2, r3
   3b7a4:	bne	3bea4 <fts_children@@Base+0xa408>
   3b7a8:	add	sp, sp, #100	; 0x64
   3b7ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b7b0:	mov	r2, r4
   3b7b4:	mov	r1, r6
   3b7b8:	add	r0, sp, #64	; 0x40
   3b7bc:	str	r3, [sp, #64]	; 0x40
   3b7c0:	bl	354e8 <fts_children@@Base+0x3a4c>
   3b7c4:	ldr	fp, [sp, #64]	; 0x40
   3b7c8:	cmp	fp, #0
   3b7cc:	mov	r9, r0
   3b7d0:	bne	3b790 <fts_children@@Base+0x9cf4>
   3b7d4:	mov	r7, r0
   3b7d8:	ldr	r8, [r7, #28]!
   3b7dc:	cmp	r8, #0
   3b7e0:	bne	3b858 <fts_children@@Base+0x9dbc>
   3b7e4:	ldr	r0, [r4, #4]
   3b7e8:	str	fp, [r9, #32]
   3b7ec:	str	r0, [r9, #28]
   3b7f0:	lsl	r0, r0, #2
   3b7f4:	bl	123dc <malloc@plt>
   3b7f8:	cmp	r0, #0
   3b7fc:	str	r0, [r9, #36]	; 0x24
   3b800:	beq	3b850 <fts_children@@Base+0x9db4>
   3b804:	ldr	r3, [r4, #4]
   3b808:	str	r8, [sp, #64]	; 0x40
   3b80c:	cmp	r3, #0
   3b810:	bgt	3b828 <fts_children@@Base+0x9d8c>
   3b814:	b	3b858 <fts_children@@Base+0x9dbc>
   3b818:	ldr	r3, [r4, #4]
   3b81c:	add	r8, r8, #1
   3b820:	cmp	r8, r3
   3b824:	bge	3b858 <fts_children@@Base+0x9dbc>
   3b828:	ldr	r3, [r4, #8]
   3b82c:	ldr	r1, [r6, #28]
   3b830:	mov	r0, r7
   3b834:	ldr	r3, [r3, r8, lsl #2]
   3b838:	add	r3, r3, r3, lsl #1
   3b83c:	add	r1, r1, r3, lsl #2
   3b840:	bl	344b8 <fts_children@@Base+0x2a1c>
   3b844:	cmp	r0, #0
   3b848:	str	r0, [sp, #64]	; 0x40
   3b84c:	beq	3b818 <fts_children@@Base+0x9d7c>
   3b850:	mov	fp, #12
   3b854:	b	3b790 <fts_children@@Base+0x9cf4>
   3b858:	ldr	r3, [sp, #20]
   3b85c:	mov	r2, r7
   3b860:	add	r3, r3, #4
   3b864:	mov	r1, r3
   3b868:	mov	r0, r4
   3b86c:	str	r3, [sp, #36]	; 0x24
   3b870:	bl	349ec <fts_children@@Base+0x2f50>
   3b874:	cmp	r0, #0
   3b878:	str	r0, [sp, #60]	; 0x3c
   3b87c:	bne	3be58 <fts_children@@Base+0xa3bc>
   3b880:	ldr	r3, [r5, #20]
   3b884:	cmp	r3, #0
   3b888:	bne	3bc54 <fts_children@@Base+0xa1b8>
   3b88c:	mov	r2, r4
   3b890:	mov	r1, r6
   3b894:	add	r0, sp, #60	; 0x3c
   3b898:	ldr	r4, [r5]
   3b89c:	bl	354e8 <fts_children@@Base+0x3a4c>
   3b8a0:	ldr	fp, [sp, #60]	; 0x3c
   3b8a4:	cmp	fp, #0
   3b8a8:	str	r0, [r4, sl, lsl #2]
   3b8ac:	bne	3b790 <fts_children@@Base+0x9cf4>
   3b8b0:	ldr	r3, [sp, #16]
   3b8b4:	ldr	r2, [r3, #100]	; 0x64
   3b8b8:	ldr	r3, [sp, #24]
   3b8bc:	add	r2, r2, r3
   3b8c0:	ldr	r3, [r2]
   3b8c4:	ldrb	fp, [r3, #52]	; 0x34
   3b8c8:	ands	fp, fp, #64	; 0x40
   3b8cc:	beq	3b790 <fts_children@@Base+0x9cf4>
   3b8d0:	ldr	r3, [sp, #16]
   3b8d4:	mov	r8, #0
   3b8d8:	ldr	ip, [r3, #108]	; 0x6c
   3b8dc:	mov	r3, ip
   3b8e0:	cmp	r8, r3
   3b8e4:	bge	3b944 <fts_children@@Base+0x9ea8>
   3b8e8:	add	r2, r8, r3
   3b8ec:	ldr	r1, [sp, #16]
   3b8f0:	add	r2, r2, r2, lsr #31
   3b8f4:	asr	r2, r2, #1
   3b8f8:	ldr	r0, [r1, #116]	; 0x74
   3b8fc:	add	r1, r2, r2, lsl #2
   3b900:	add	r1, r0, r1, lsl #2
   3b904:	ldr	r1, [r1, #4]
   3b908:	cmp	sl, r1
   3b90c:	ble	3b93c <fts_children@@Base+0x9ea0>
   3b910:	b	3bc30 <fts_children@@Base+0xa194>
   3b914:	add	r3, r8, r2
   3b918:	add	r3, r3, r3, lsr #31
   3b91c:	asr	r3, r3, #1
   3b920:	mov	lr, r3
   3b924:	add	r1, r3, r3, lsl #2
   3b928:	add	r1, r0, r1, lsl #2
   3b92c:	ldr	r1, [r1, #4]
   3b930:	cmp	sl, r1
   3b934:	bgt	3bc38 <fts_children@@Base+0xa19c>
   3b938:	mov	r2, r3
   3b93c:	cmp	r8, r2
   3b940:	blt	3b914 <fts_children@@Base+0x9e78>
   3b944:	cmp	ip, r8
   3b948:	ble	3bc28 <fts_children@@Base+0xa18c>
   3b94c:	ldr	r1, [sp, #16]
   3b950:	add	r2, r8, r8, lsl #2
   3b954:	ldr	r3, [r1, #116]	; 0x74
   3b958:	lsl	r2, r2, #2
   3b95c:	add	r3, r3, r2
   3b960:	str	r2, [sp, #44]	; 0x2c
   3b964:	ldr	r3, [r3, #4]
   3b968:	cmp	sl, r3
   3b96c:	bne	3bc28 <fts_children@@Base+0xa18c>
   3b970:	cmn	r8, #1
   3b974:	beq	3bc28 <fts_children@@Base+0xa18c>
   3b978:	ldr	r3, [sp, #20]
   3b97c:	ldr	r9, [r1, #84]	; 0x54
   3b980:	ldr	r0, [r3, #8]
   3b984:	mov	r3, #0
   3b988:	cmp	r0, r3
   3b98c:	str	r3, [sp, #64]	; 0x40
   3b990:	ble	3bc28 <fts_children@@Base+0xa18c>
   3b994:	add	r2, r5, #24
   3b998:	str	r2, [sp, #36]	; 0x24
   3b99c:	add	r2, r5, #20
   3b9a0:	str	r2, [sp, #40]	; 0x28
   3b9a4:	mov	fp, r3
   3b9a8:	str	r8, [sp, #48]	; 0x30
   3b9ac:	b	3b9c4 <fts_children@@Base+0x9f28>
   3b9b0:	cmp	r3, #4
   3b9b4:	beq	3b9fc <fts_children@@Base+0x9f60>
   3b9b8:	add	fp, fp, #1
   3b9bc:	cmp	fp, r0
   3b9c0:	bge	3bc1c <fts_children@@Base+0xa180>
   3b9c4:	ldr	r3, [sp, #20]
   3b9c8:	ldr	r2, [r5, #8]
   3b9cc:	ldr	r1, [r3, #12]
   3b9d0:	ldr	r3, [r9]
   3b9d4:	ldr	r7, [r1, fp, lsl #2]
   3b9d8:	cmp	r7, r2
   3b9dc:	add	r3, r3, r7, lsl #3
   3b9e0:	ldrb	r3, [r3, #4]
   3b9e4:	bne	3b9b0 <fts_children@@Base+0x9f14>
   3b9e8:	ldr	r2, [r5, #12]
   3b9ec:	cmp	sl, r2
   3b9f0:	beq	3b9b8 <fts_children@@Base+0x9f1c>
   3b9f4:	cmp	r3, #4
   3b9f8:	bne	3b9b8 <fts_children@@Base+0x9f1c>
   3b9fc:	ldr	r3, [sp, #16]
   3ba00:	ldr	r2, [sp, #44]	; 0x2c
   3ba04:	ldr	r8, [sp, #48]	; 0x30
   3ba08:	ldr	r4, [r3, #116]	; 0x74
   3ba0c:	add	r3, r7, r7, lsl #1
   3ba10:	add	r4, r4, r2
   3ba14:	lsl	r3, r3, #2
   3ba18:	str	r3, [sp, #32]
   3ba1c:	lsl	r3, r7, #2
   3ba20:	str	r3, [sp, #28]
   3ba24:	str	fp, [sp, #52]	; 0x34
   3ba28:	b	3bb00 <fts_children@@Base+0xa064>
   3ba2c:	add	r4, sp, #80	; 0x50
   3ba30:	mov	r0, r4
   3ba34:	mov	r1, r8
   3ba38:	str	r7, [sp, #72]	; 0x48
   3ba3c:	str	sl, [sp, #76]	; 0x4c
   3ba40:	bl	32a54 <fts_children@@Base+0xfb8>
   3ba44:	cmp	r0, #0
   3ba48:	beq	3be94 <fts_children@@Base+0xa3f8>
   3ba4c:	ldr	r3, [sp, #64]	; 0x40
   3ba50:	ldr	r2, [sp, #24]
   3ba54:	add	r1, sp, #64	; 0x40
   3ba58:	ldr	r0, [sp, #16]
   3ba5c:	ldr	r4, [r3, r2]
   3ba60:	bl	3a0c8 <fts_children@@Base+0x862c>
   3ba64:	cmp	r0, #0
   3ba68:	bne	3bbd4 <fts_children@@Base+0xa138>
   3ba6c:	ldr	r1, [r5, #4]
   3ba70:	ldr	r2, [sp, #64]	; 0x40
   3ba74:	cmp	r1, #0
   3ba78:	beq	3ba94 <fts_children@@Base+0x9ff8>
   3ba7c:	add	r3, sl, #1
   3ba80:	mov	r0, r9
   3ba84:	bl	356e8 <fts_children@@Base+0x3c4c>
   3ba88:	cmp	r0, #0
   3ba8c:	bne	3bbd4 <fts_children@@Base+0xa138>
   3ba90:	ldr	r2, [sp, #64]	; 0x40
   3ba94:	ldr	r3, [sp, #24]
   3ba98:	ldr	r6, [sp, #84]	; 0x54
   3ba9c:	add	r1, sp, #88	; 0x58
   3baa0:	str	r4, [r2, r3]
   3baa4:	mov	r0, r6
   3baa8:	mov	r2, r8
   3baac:	bl	33f6c <fts_children@@Base+0x24d0>
   3bab0:	sub	r2, r0, #1
   3bab4:	cmp	r6, r2
   3bab8:	movgt	r3, #0
   3babc:	movle	r3, #1
   3bac0:	orrs	r3, r3, r2, lsr #31
   3bac4:	bne	3badc <fts_children@@Base+0xa040>
   3bac8:	sub	r6, r6, #1
   3bacc:	add	r1, sp, #88	; 0x58
   3bad0:	add	r0, sp, #84	; 0x54
   3bad4:	str	r6, [sp, #84]	; 0x54
   3bad8:	bl	340fc <fts_children@@Base+0x2660>
   3badc:	ldr	r3, [sp, #16]
   3bae0:	add	r4, r8, r8, lsl #2
   3bae4:	ldr	r3, [r3, #116]	; 0x74
   3bae8:	add	r4, r3, r4, lsl #2
   3baec:	ldrb	r3, [r4, #16]
   3baf0:	add	r8, r8, #1
   3baf4:	add	r4, r4, #20
   3baf8:	cmp	r3, #0
   3bafc:	beq	3bc44 <fts_children@@Base+0xa1a8>
   3bb00:	ldr	r3, [r4]
   3bb04:	cmp	r7, r3
   3bb08:	bne	3baec <fts_children@@Base+0xa050>
   3bb0c:	ldr	r3, [r4, #8]
   3bb10:	ldr	r6, [r4, #12]
   3bb14:	sub	r6, r6, r3
   3bb18:	cmp	r6, #0
   3bb1c:	add	r6, sl, r6
   3bb20:	ldreq	r3, [r9, #20]
   3bb24:	ldreq	r2, [sp, #32]
   3bb28:	ldrne	r2, [sp, #28]
   3bb2c:	addeq	r3, r3, r2
   3bb30:	ldrne	r3, [r9, #12]
   3bb34:	ldreq	r3, [r3, #8]
   3bb38:	ldrne	fp, [r3, r2]
   3bb3c:	ldr	r2, [r5, #12]
   3bb40:	ldreq	fp, [r3]
   3bb44:	cmp	r6, r2
   3bb48:	bgt	3baec <fts_children@@Base+0xa050>
   3bb4c:	ldr	r2, [r5]
   3bb50:	ldr	r0, [r2, r6, lsl #2]
   3bb54:	cmp	r0, #0
   3bb58:	beq	3baec <fts_children@@Base+0xa050>
   3bb5c:	add	r1, r0, #12
   3bb60:	mov	r2, fp
   3bb64:	ldr	r0, [r0, #8]
   3bb68:	bl	33f6c <fts_children@@Base+0x24d0>
   3bb6c:	cmp	r0, #0
   3bb70:	beq	3baec <fts_children@@Base+0xa050>
   3bb74:	str	r6, [sp, #8]
   3bb78:	strd	sl, [sp]
   3bb7c:	mov	r3, r7
   3bb80:	ldr	r2, [sp, #36]	; 0x24
   3bb84:	ldr	r1, [sp, #40]	; 0x28
   3bb88:	ldr	r0, [sp, #16]
   3bb8c:	bl	3422c <fts_children@@Base+0x2790>
   3bb90:	cmp	r0, #0
   3bb94:	bne	3baec <fts_children@@Base+0xa050>
   3bb98:	ldr	r3, [sp, #64]	; 0x40
   3bb9c:	cmp	r3, #0
   3bba0:	bne	3ba2c <fts_children@@Base+0x9f90>
   3bba4:	mov	ip, r5
   3bba8:	add	lr, sp, #64	; 0x40
   3bbac:	ldm	ip!, {r0, r1, r2, r3}
   3bbb0:	add	r4, sp, #80	; 0x50
   3bbb4:	stmia	lr!, {r0, r1, r2, r3}
   3bbb8:	ldm	ip, {r0, r1, r2}
   3bbbc:	stm	lr, {r0, r1, r2}
   3bbc0:	mov	r1, ip
   3bbc4:	mov	r0, r4
   3bbc8:	bl	35048 <fts_children@@Base+0x35ac>
   3bbcc:	cmp	r0, #0
   3bbd0:	beq	3ba30 <fts_children@@Base+0x9f94>
   3bbd4:	mov	fp, r0
   3bbd8:	ldr	r3, [sp, #64]	; 0x40
   3bbdc:	cmp	r3, #0
   3bbe0:	beq	3b790 <fts_children@@Base+0x9cf4>
   3bbe4:	ldr	r0, [sp, #88]	; 0x58
   3bbe8:	bl	12154 <free@plt>
   3bbec:	b	3b790 <fts_children@@Base+0x9cf4>
   3bbf0:	ldr	r5, [r1]
   3bbf4:	cmp	fp, r3
   3bbf8:	streq	fp, [r5, sl, lsl #2]
   3bbfc:	beq	3b790 <fts_children@@Base+0x9cf4>
   3bc00:	mov	r2, r4
   3bc04:	mov	r1, r6
   3bc08:	add	r0, sp, #60	; 0x3c
   3bc0c:	bl	354e8 <fts_children@@Base+0x3a4c>
   3bc10:	ldr	fp, [sp, #60]	; 0x3c
   3bc14:	str	r0, [r5, sl, lsl #2]
   3bc18:	b	3b790 <fts_children@@Base+0x9cf4>
   3bc1c:	ldr	r3, [sp, #64]	; 0x40
   3bc20:	cmp	r3, #0
   3bc24:	bne	3bea8 <fts_children@@Base+0xa40c>
   3bc28:	mov	fp, #0
   3bc2c:	b	3b790 <fts_children@@Base+0x9cf4>
   3bc30:	mov	lr, r2
   3bc34:	mov	r2, r3
   3bc38:	add	r8, lr, #1
   3bc3c:	mov	r3, r2
   3bc40:	b	3b8e0 <fts_children@@Base+0x9e44>
   3bc44:	ldr	r3, [sp, #20]
   3bc48:	ldr	fp, [sp, #52]	; 0x34
   3bc4c:	ldr	r0, [r3, #8]
   3bc50:	b	3b9b8 <fts_children@@Base+0x9f1c>
   3bc54:	ldr	r3, [sp, #16]
   3bc58:	ldr	r3, [r3, #116]	; 0x74
   3bc5c:	str	r3, [sp, #32]
   3bc60:	ble	3bd40 <fts_children@@Base+0xa2a4>
   3bc64:	mov	r7, r0
   3bc68:	str	sl, [sp, #28]
   3bc6c:	ldr	r3, [r5, #24]
   3bc70:	ldr	ip, [sp, #32]
   3bc74:	ldr	r0, [sp, #28]
   3bc78:	ldr	r3, [r3, r7, lsl #2]
   3bc7c:	add	r3, r3, r3, lsl #2
   3bc80:	add	r2, ip, r3, lsl #2
   3bc84:	ldr	r1, [r2, #8]
   3bc88:	cmp	r0, r1
   3bc8c:	ble	3bd2c <fts_children@@Base+0xa290>
   3bc90:	ldr	r1, [r2, #4]
   3bc94:	cmp	r0, r1
   3bc98:	bgt	3bd2c <fts_children@@Base+0xa290>
   3bc9c:	ldr	r1, [ip, r3, lsl #2]
   3bca0:	ldr	r2, [r2, #12]
   3bca4:	ldr	r3, [r6]
   3bca8:	cmp	r0, r2
   3bcac:	ldr	r8, [r4, #4]
   3bcb0:	ldr	r9, [r3, r1, lsl #3]
   3bcb4:	beq	3bd4c <fts_children@@Base+0xa2b0>
   3bcb8:	cmp	r8, #0
   3bcbc:	movgt	sl, #0
   3bcc0:	ldrgt	fp, [sp, #36]	; 0x24
   3bcc4:	bgt	3bcdc <fts_children@@Base+0xa240>
   3bcc8:	b	3bd2c <fts_children@@Base+0xa290>
   3bccc:	add	sl, sl, #1
   3bcd0:	cmp	sl, r8
   3bcd4:	bge	3bd2c <fts_children@@Base+0xa290>
   3bcd8:	ldr	r3, [r6]
   3bcdc:	ldr	r2, [r4, #8]
   3bce0:	ldr	r1, [r2, sl, lsl #2]
   3bce4:	add	r2, r3, r1, lsl #3
   3bce8:	ldrb	r2, [r2, #4]
   3bcec:	sub	r2, r2, #8
   3bcf0:	cmp	r2, #1
   3bcf4:	bhi	3bccc <fts_children@@Base+0xa230>
   3bcf8:	ldr	r3, [r3, r1, lsl #3]
   3bcfc:	cmp	r9, r3
   3bd00:	bne	3bccc <fts_children@@Base+0xa230>
   3bd04:	mov	r3, fp
   3bd08:	mov	r2, r4
   3bd0c:	mov	r0, r6
   3bd10:	bl	36714 <fts_children@@Base+0x4c78>
   3bd14:	cmp	r0, #0
   3bd18:	bne	3be58 <fts_children@@Base+0xa3bc>
   3bd1c:	ldr	r8, [r4, #4]
   3bd20:	add	sl, sl, #1
   3bd24:	cmp	sl, r8
   3bd28:	blt	3bcd8 <fts_children@@Base+0xa23c>
   3bd2c:	ldr	r3, [r5, #20]
   3bd30:	add	r7, r7, #1
   3bd34:	cmp	r7, r3
   3bd38:	blt	3bc6c <fts_children@@Base+0xa1d0>
   3bd3c:	ldr	sl, [sp, #28]
   3bd40:	mov	r3, #0
   3bd44:	str	r3, [sp, #60]	; 0x3c
   3bd48:	b	3b88c <fts_children@@Base+0x9df0>
   3bd4c:	cmp	r8, #0
   3bd50:	ble	3bd2c <fts_children@@Base+0xa290>
   3bd54:	ldr	sl, [r4, #8]
   3bd58:	mvn	r0, #0
   3bd5c:	sub	r2, sl, #4
   3bd60:	str	r4, [sp, #40]	; 0x28
   3bd64:	add	fp, r2, r8, lsl #2
   3bd68:	mov	r1, r0
   3bd6c:	mov	r4, r0
   3bd70:	b	3bd90 <fts_children@@Base+0xa2f4>
   3bd74:	cmp	ip, #9
   3bd78:	bne	3bd88 <fts_children@@Base+0xa2ec>
   3bd7c:	ldr	ip, [lr]
   3bd80:	cmp	r9, ip
   3bd84:	moveq	r4, r0
   3bd88:	cmp	fp, r2
   3bd8c:	beq	3bdb8 <fts_children@@Base+0xa31c>
   3bd90:	ldr	r0, [r2, #4]!
   3bd94:	add	lr, r3, r0, lsl #3
   3bd98:	ldrb	ip, [lr, #4]
   3bd9c:	cmp	ip, #8
   3bda0:	bne	3bd74 <fts_children@@Base+0xa2d8>
   3bda4:	ldr	ip, [r3, r0, lsl #3]
   3bda8:	cmp	r9, ip
   3bdac:	moveq	r1, r0
   3bdb0:	cmp	fp, r2
   3bdb4:	bne	3bd90 <fts_children@@Base+0xa2f4>
   3bdb8:	cmp	r1, #0
   3bdbc:	mov	r9, r4
   3bdc0:	mov	fp, r4
   3bdc4:	ldr	r4, [sp, #40]	; 0x28
   3bdc8:	bge	3be60 <fts_children@@Base+0xa3c4>
   3bdcc:	cmp	r9, #0
   3bdd0:	blt	3bd2c <fts_children@@Base+0xa290>
   3bdd4:	mov	r9, #0
   3bdd8:	str	r5, [sp, #40]	; 0x28
   3bddc:	b	3bdf0 <fts_children@@Base+0xa354>
   3bde0:	add	r9, r9, #1
   3bde4:	cmp	r8, r9
   3bde8:	ble	3be9c <fts_children@@Base+0xa400>
   3bdec:	ldr	sl, [r4, #8]
   3bdf0:	ldr	r5, [sl, r9, lsl #2]
   3bdf4:	ldr	r0, [r6, #28]
   3bdf8:	mov	r2, fp
   3bdfc:	add	sl, r5, r5, lsl #1
   3be00:	lsl	sl, sl, #2
   3be04:	add	r0, r0, sl
   3be08:	add	r1, r0, #8
   3be0c:	ldr	r0, [r0, #4]
   3be10:	bl	33f6c <fts_children@@Base+0x24d0>
   3be14:	cmp	r0, #0
   3be18:	bne	3bde0 <fts_children@@Base+0xa344>
   3be1c:	ldr	r1, [r6, #24]
   3be20:	add	sl, r1, sl
   3be24:	add	r1, sl, #8
   3be28:	ldr	r0, [sl, #4]
   3be2c:	bl	33f6c <fts_children@@Base+0x24d0>
   3be30:	cmp	r0, #0
   3be34:	bne	3bde0 <fts_children@@Base+0xa344>
   3be38:	mov	r1, r5
   3be3c:	ldr	r3, [sp, #36]	; 0x24
   3be40:	mov	r2, r4
   3be44:	mov	r0, r6
   3be48:	bl	36714 <fts_children@@Base+0x4c78>
   3be4c:	cmp	r0, #0
   3be50:	ldreq	r8, [r4, #4]
   3be54:	beq	3bde4 <fts_children@@Base+0xa348>
   3be58:	mov	fp, r0
   3be5c:	b	3b790 <fts_children@@Base+0x9cf4>
   3be60:	ldr	r3, [sp, #36]	; 0x24
   3be64:	mov	r2, r4
   3be68:	mov	r0, r6
   3be6c:	bl	36714 <fts_children@@Base+0x4c78>
   3be70:	cmp	r0, #0
   3be74:	bne	3be58 <fts_children@@Base+0xa3bc>
   3be78:	cmp	r9, #0
   3be7c:	blt	3bd2c <fts_children@@Base+0xa290>
   3be80:	ldr	r8, [r4, #4]
   3be84:	cmp	r8, #0
   3be88:	ble	3bd2c <fts_children@@Base+0xa290>
   3be8c:	ldr	sl, [r4, #8]
   3be90:	b	3bdd4 <fts_children@@Base+0xa338>
   3be94:	mov	fp, #12
   3be98:	b	3bbd8 <fts_children@@Base+0xa13c>
   3be9c:	ldr	r5, [sp, #40]	; 0x28
   3bea0:	b	3bd2c <fts_children@@Base+0xa290>
   3bea4:	bl	12244 <__stack_chk_fail@plt>
   3bea8:	mov	fp, #0
   3beac:	b	3bbe4 <fts_children@@Base+0xa148>
   3beb0:	andeq	fp, r5, r0, ror #24
   3beb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3beb8:	mov	r4, r1
   3bebc:	ldr	r8, [pc, #2400]	; 3c824 <fts_children@@Base+0xad88>
   3bec0:	ldr	r7, [r1, #40]	; 0x28
   3bec4:	ldr	r1, [r1, #56]	; 0x38
   3bec8:	ldr	r3, [r8]
   3becc:	sub	sp, sp, #20
   3bed0:	cmp	r1, r7
   3bed4:	str	r3, [sp, #12]
   3bed8:	movle	r3, #2
   3bedc:	mov	r5, r0
   3bee0:	strble	r3, [r0, #4]
   3bee4:	movle	r0, #0
   3bee8:	ble	3c1b0 <fts_children@@Base+0xa714>
   3beec:	ldr	fp, [r4, #4]
   3bef0:	ldrb	r3, [r5, #6]
   3bef4:	mov	r9, r2
   3bef8:	ldrb	r6, [fp, r7]
   3befc:	ldr	r2, [r4, #80]	; 0x50
   3bf00:	bic	r3, r3, #96	; 0x60
   3bf04:	cmp	r2, #1
   3bf08:	strb	r6, [r5]
   3bf0c:	strb	r3, [r5, #6]
   3bf10:	ble	3c1c8 <fts_children@@Base+0xa72c>
   3bf14:	ldr	r3, [r4, #28]
   3bf18:	cmp	r7, r3
   3bf1c:	beq	3bf30 <fts_children@@Base+0xa494>
   3bf20:	ldr	r3, [r4, #8]
   3bf24:	ldr	r3, [r3, r7, lsl #2]
   3bf28:	cmn	r3, #1
   3bf2c:	beq	3c418 <fts_children@@Base+0xa97c>
   3bf30:	cmp	r6, #92	; 0x5c
   3bf34:	beq	3c20c <fts_children@@Base+0xa770>
   3bf38:	ldr	r3, [r4, #8]
   3bf3c:	mov	r2, #1
   3bf40:	strb	r2, [r5, #4]
   3bf44:	ldr	sl, [r3, r7, lsl #2]
   3bf48:	mov	r0, sl
   3bf4c:	bl	124e4 <iswalnum@plt>
   3bf50:	ldrb	r3, [r5, #6]
   3bf54:	sub	sl, sl, #95	; 0x5f
   3bf58:	clz	sl, sl
   3bf5c:	lsr	sl, sl, #5
   3bf60:	bic	r3, r3, #64	; 0x40
   3bf64:	cmp	r0, #0
   3bf68:	movne	sl, #1
   3bf6c:	orr	sl, r3, sl, lsl #6
   3bf70:	strb	sl, [r5, #6]
   3bf74:	sub	r6, r6, #10
   3bf78:	cmp	r6, #115	; 0x73
   3bf7c:	ldrls	pc, [pc, r6, lsl #2]
   3bf80:	b	3c410 <fts_children@@Base+0xa974>
   3bf84:	andeq	ip, r3, r4, ror r5
   3bf88:	andeq	ip, r3, r0, lsl r4
   3bf8c:	andeq	ip, r3, r0, lsl r4
   3bf90:	andeq	ip, r3, r0, lsl r4
   3bf94:	andeq	ip, r3, r0, lsl r4
   3bf98:	andeq	ip, r3, r0, lsl r4
   3bf9c:	andeq	ip, r3, r0, lsl r4
   3bfa0:	andeq	ip, r3, r0, lsl r4
   3bfa4:	andeq	ip, r3, r0, lsl r4
   3bfa8:	andeq	ip, r3, r0, lsl r4
   3bfac:	andeq	ip, r3, r0, lsl r4
   3bfb0:	andeq	ip, r3, r0, lsl r4
   3bfb4:	andeq	ip, r3, r0, lsl r4
   3bfb8:	andeq	ip, r3, r0, lsl r4
   3bfbc:	andeq	ip, r3, r0, lsl r4
   3bfc0:	andeq	ip, r3, r0, lsl r4
   3bfc4:	andeq	ip, r3, r0, lsl r4
   3bfc8:	andeq	ip, r3, r0, lsl r4
   3bfcc:	andeq	ip, r3, r0, lsl r4
   3bfd0:	andeq	ip, r3, r0, lsl r4
   3bfd4:	andeq	ip, r3, r0, lsl r4
   3bfd8:	andeq	ip, r3, r0, lsl r4
   3bfdc:	andeq	ip, r3, r0, lsl r4
   3bfe0:	andeq	ip, r3, r0, lsl r4
   3bfe4:	andeq	ip, r3, r0, lsl r4
   3bfe8:	andeq	ip, r3, r0, lsl r4
   3bfec:	andeq	ip, r3, r4, asr r1
   3bff0:	andeq	ip, r3, r0, lsl r4
   3bff4:	andeq	ip, r3, r0, lsl r4
   3bff8:	andeq	ip, r3, r0, lsl r4
   3bffc:	andeq	ip, r3, ip, ror #8
   3c000:	andeq	ip, r3, r0, lsr #9
   3c004:			; <UNDEFINED> instruction: 0x0003c4b8
   3c008:	andeq	ip, r3, r8, asr #9
   3c00c:	andeq	ip, r3, r0, lsl r4
   3c010:	andeq	ip, r3, r0, lsl r4
   3c014:	andeq	ip, r3, r4, ror #9
   3c018:	andeq	ip, r3, r0, lsl r4
   3c01c:	andeq	ip, r3, r0, lsl r4
   3c020:	andeq	ip, r3, r0, lsl r4
   3c024:	andeq	ip, r3, r0, lsl r4
   3c028:	andeq	ip, r3, r0, lsl r4
   3c02c:	andeq	ip, r3, r0, lsl r4
   3c030:	andeq	ip, r3, r0, lsl r4
   3c034:	andeq	ip, r3, r0, lsl r4
   3c038:	andeq	ip, r3, r0, lsl r4
   3c03c:	andeq	ip, r3, r0, lsl r4
   3c040:	andeq	ip, r3, r0, lsl r4
   3c044:	andeq	ip, r3, r0, lsl r4
   3c048:	andeq	ip, r3, r0, lsl r4
   3c04c:	andeq	ip, r3, r0, lsl r4
   3c050:	andeq	ip, r3, r0, lsl r4
   3c054:	andeq	ip, r3, r0, lsl r4
   3c058:	strdeq	ip, [r3], -r4
   3c05c:	andeq	ip, r3, r0, lsl r4
   3c060:	andeq	ip, r3, r0, lsl r4
   3c064:	andeq	ip, r3, r0, lsl r4
   3c068:	andeq	ip, r3, r0, lsl r4
   3c06c:	andeq	ip, r3, r0, lsl r4
   3c070:	andeq	ip, r3, r0, lsl r4
   3c074:	andeq	ip, r3, r0, lsl r4
   3c078:	andeq	ip, r3, r0, lsl r4
   3c07c:	andeq	ip, r3, r0, lsl r4
   3c080:	andeq	ip, r3, r0, lsl r4
   3c084:	andeq	ip, r3, r0, lsl r4
   3c088:	andeq	ip, r3, r0, lsl r4
   3c08c:	andeq	ip, r3, r0, lsl r4
   3c090:	andeq	ip, r3, r0, lsl r4
   3c094:	andeq	ip, r3, r0, lsl r4
   3c098:	andeq	ip, r3, r0, lsl r4
   3c09c:	andeq	ip, r3, r0, lsl r4
   3c0a0:	andeq	ip, r3, r0, lsl r4
   3c0a4:	andeq	ip, r3, r0, lsl r4
   3c0a8:	andeq	ip, r3, r0, lsl r4
   3c0ac:	andeq	ip, r3, r0, lsl r4
   3c0b0:	andeq	ip, r3, r0, lsl r4
   3c0b4:	andeq	ip, r3, r0, lsl r4
   3c0b8:	andeq	ip, r3, r0, lsl r4
   3c0bc:	andeq	ip, r3, r0, lsl r4
   3c0c0:	andeq	ip, r3, r0, lsl r4
   3c0c4:	andeq	ip, r3, r0, lsl r4
   3c0c8:	andeq	ip, r3, r0, lsl r5
   3c0cc:	andeq	ip, r3, r0, lsl r4
   3c0d0:	andeq	ip, r3, r0, lsl r4
   3c0d4:	andeq	ip, r3, r0, lsr #10
   3c0d8:	andeq	ip, r3, r0, lsl r4
   3c0dc:	andeq	ip, r3, r0, lsl r4
   3c0e0:	andeq	ip, r3, r0, lsl r4
   3c0e4:	andeq	ip, r3, r0, lsl r4
   3c0e8:	andeq	ip, r3, r0, lsl r4
   3c0ec:	andeq	ip, r3, r0, lsl r4
   3c0f0:	andeq	ip, r3, r0, lsl r4
   3c0f4:	andeq	ip, r3, r0, lsl r4
   3c0f8:	andeq	ip, r3, r0, lsl r4
   3c0fc:	andeq	ip, r3, r0, lsl r4
   3c100:	andeq	ip, r3, r0, lsl r4
   3c104:	andeq	ip, r3, r0, lsl r4
   3c108:	andeq	ip, r3, r0, lsl r4
   3c10c:	andeq	ip, r3, r0, lsl r4
   3c110:	andeq	ip, r3, r0, lsl r4
   3c114:	andeq	ip, r3, r0, lsl r4
   3c118:	andeq	ip, r3, r0, lsl r4
   3c11c:	andeq	ip, r3, r0, lsl r4
   3c120:	andeq	ip, r3, r0, lsl r4
   3c124:	andeq	ip, r3, r0, lsl r4
   3c128:	andeq	ip, r3, r0, lsl r4
   3c12c:	andeq	ip, r3, r0, lsl r4
   3c130:	andeq	ip, r3, r0, lsl r4
   3c134:	andeq	ip, r3, r0, lsl r4
   3c138:	andeq	ip, r3, r0, lsl r4
   3c13c:	andeq	ip, r3, r0, lsl r4
   3c140:	andeq	ip, r3, r0, lsl r4
   3c144:	andeq	ip, r3, r0, lsl r4
   3c148:	andeq	ip, r3, r8, asr r5
   3c14c:	andeq	ip, r3, r4, lsl #9
   3c150:	andeq	ip, r3, r0, lsl #11
   3c154:	tst	r9, #8
   3c158:	bne	3c19c <fts_children@@Base+0xa700>
   3c15c:	ldr	r3, [r4, #48]	; 0x30
   3c160:	add	r7, r7, #1
   3c164:	cmp	r7, r3
   3c168:	beq	3c19c <fts_children@@Base+0xa700>
   3c16c:	mov	r2, r9
   3c170:	str	r7, [r4, #40]	; 0x28
   3c174:	mov	r1, r4
   3c178:	add	r0, sp, #4
   3c17c:	bl	3beb4 <fts_children@@Base+0xa418>
   3c180:	ldrb	r2, [sp, #8]
   3c184:	ldr	r3, [r4, #40]	; 0x28
   3c188:	sub	r2, r2, #9
   3c18c:	sub	r3, r3, #1
   3c190:	cmp	r2, #1
   3c194:	str	r3, [r4, #40]	; 0x28
   3c198:	bhi	3c410 <fts_children@@Base+0xa974>
   3c19c:	mov	r0, #1
   3c1a0:	mov	r2, #12
   3c1a4:	mov	r3, #32
   3c1a8:	strb	r2, [r5, #4]
   3c1ac:	str	r3, [r5]
   3c1b0:	ldr	r2, [sp, #12]
   3c1b4:	ldr	r3, [r8]
   3c1b8:	cmp	r2, r3
   3c1bc:	bne	3c820 <fts_children@@Base+0xad84>
   3c1c0:	add	sp, sp, #20
   3c1c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c1c8:	cmp	r6, #92	; 0x5c
   3c1cc:	beq	3c20c <fts_children@@Base+0xa770>
   3c1d0:	mov	r3, #1
   3c1d4:	strb	r3, [r5, #4]
   3c1d8:	bl	12460 <__ctype_b_loc@plt>
   3c1dc:	lsl	r1, r6, #1
   3c1e0:	ldrb	r2, [r5, #6]
   3c1e4:	bic	r2, r2, #64	; 0x40
   3c1e8:	ldr	r3, [r0]
   3c1ec:	ldrh	r3, [r3, r1]
   3c1f0:	lsr	r3, r3, #3
   3c1f4:	and	r3, r3, #1
   3c1f8:	cmp	r6, #95	; 0x5f
   3c1fc:	orreq	r3, r3, #1
   3c200:	orr	r3, r2, r3, lsl #6
   3c204:	strb	r3, [r5, #6]
   3c208:	b	3bf74 <fts_children@@Base+0xa4d8>
   3c20c:	ldr	r1, [r4, #48]	; 0x30
   3c210:	add	r3, r7, #1
   3c214:	cmp	r3, r1
   3c218:	movge	r3, #36	; 0x24
   3c21c:	strbge	r3, [r5, #4]
   3c220:	movge	r0, #1
   3c224:	bge	3c1b0 <fts_children@@Base+0xa714>
   3c228:	ldrb	r1, [r4, #75]	; 0x4b
   3c22c:	cmp	r1, #0
   3c230:	bne	3c798 <fts_children@@Base+0xacfc>
   3c234:	ldrb	r6, [fp, r3]
   3c238:	cmp	r2, #1
   3c23c:	mov	r2, #1
   3c240:	strb	r6, [r5]
   3c244:	strb	r2, [r5, #4]
   3c248:	ble	3c438 <fts_children@@Base+0xa99c>
   3c24c:	ldr	r1, [r4, #8]
   3c250:	add	r1, r1, r3, lsl #2
   3c254:	ldr	r4, [r1]
   3c258:	mov	r0, r4
   3c25c:	bl	124e4 <iswalnum@plt>
   3c260:	ldrb	r3, [r5, #6]
   3c264:	sub	r4, r4, #95	; 0x5f
   3c268:	clz	r4, r4
   3c26c:	lsr	r4, r4, #5
   3c270:	bic	r3, r3, #64	; 0x40
   3c274:	cmp	r0, #0
   3c278:	movne	r4, #1
   3c27c:	orr	r4, r3, r4, lsl #6
   3c280:	strb	r4, [r5, #6]
   3c284:	sub	r3, r6, #39	; 0x27
   3c288:	cmp	r3, #86	; 0x56
   3c28c:	ldrls	pc, [pc, r3, lsl #2]
   3c290:	b	3c5b4 <fts_children@@Base+0xab18>
   3c294:	andeq	ip, r3, r0, ror #14
   3c298:	andeq	ip, r3, r0, lsl #15
   3c29c:	andeq	ip, r3, r8, asr #14
   3c2a0:			; <UNDEFINED> instruction: 0x0003c5b4
   3c2a4:	andeq	ip, r3, ip, lsr #14
   3c2a8:			; <UNDEFINED> instruction: 0x0003c5b4
   3c2ac:			; <UNDEFINED> instruction: 0x0003c5b4
   3c2b0:			; <UNDEFINED> instruction: 0x0003c5b4
   3c2b4:			; <UNDEFINED> instruction: 0x0003c5b4
   3c2b8:			; <UNDEFINED> instruction: 0x0003c5b4
   3c2bc:	andeq	ip, r3, ip, lsl #14
   3c2c0:	andeq	ip, r3, ip, lsl #14
   3c2c4:	andeq	ip, r3, ip, lsl #14
   3c2c8:	andeq	ip, r3, ip, lsl #14
   3c2cc:	andeq	ip, r3, ip, lsl #14
   3c2d0:	andeq	ip, r3, ip, lsl #14
   3c2d4:	andeq	ip, r3, ip, lsl #14
   3c2d8:	andeq	ip, r3, ip, lsl #14
   3c2dc:	andeq	ip, r3, ip, lsl #14
   3c2e0:			; <UNDEFINED> instruction: 0x0003c5b4
   3c2e4:			; <UNDEFINED> instruction: 0x0003c5b4
   3c2e8:	andeq	ip, r3, ip, ror #13
   3c2ec:			; <UNDEFINED> instruction: 0x0003c5b4
   3c2f0:	andeq	ip, r3, ip, asr #13
   3c2f4:			; <UNDEFINED> instruction: 0x0003c6b0
   3c2f8:			; <UNDEFINED> instruction: 0x0003c5b4
   3c2fc:			; <UNDEFINED> instruction: 0x0003c5b4
   3c300:	muleq	r3, r0, r6
   3c304:			; <UNDEFINED> instruction: 0x0003c5b4
   3c308:			; <UNDEFINED> instruction: 0x0003c5b4
   3c30c:			; <UNDEFINED> instruction: 0x0003c5b4
   3c310:			; <UNDEFINED> instruction: 0x0003c5b4
   3c314:			; <UNDEFINED> instruction: 0x0003c5b4
   3c318:			; <UNDEFINED> instruction: 0x0003c5b4
   3c31c:			; <UNDEFINED> instruction: 0x0003c5b4
   3c320:			; <UNDEFINED> instruction: 0x0003c5b4
   3c324:			; <UNDEFINED> instruction: 0x0003c5b4
   3c328:			; <UNDEFINED> instruction: 0x0003c5b4
   3c32c:			; <UNDEFINED> instruction: 0x0003c5b4
   3c330:			; <UNDEFINED> instruction: 0x0003c5b4
   3c334:			; <UNDEFINED> instruction: 0x0003c5b4
   3c338:			; <UNDEFINED> instruction: 0x0003c5b4
   3c33c:			; <UNDEFINED> instruction: 0x0003c5b4
   3c340:			; <UNDEFINED> instruction: 0x0003c5b4
   3c344:	andeq	ip, r3, r8, ror r6
   3c348:			; <UNDEFINED> instruction: 0x0003c5b4
   3c34c:			; <UNDEFINED> instruction: 0x0003c5b4
   3c350:			; <UNDEFINED> instruction: 0x0003c5b4
   3c354:	andeq	ip, r3, r0, ror #12
   3c358:			; <UNDEFINED> instruction: 0x0003c5b4
   3c35c:			; <UNDEFINED> instruction: 0x0003c5b4
   3c360:			; <UNDEFINED> instruction: 0x0003c5b4
   3c364:			; <UNDEFINED> instruction: 0x0003c5b4
   3c368:			; <UNDEFINED> instruction: 0x0003c5b4
   3c36c:			; <UNDEFINED> instruction: 0x0003c5b4
   3c370:			; <UNDEFINED> instruction: 0x0003c5b4
   3c374:			; <UNDEFINED> instruction: 0x0003c5b4
   3c378:	andeq	ip, r3, r0, asr #12
   3c37c:			; <UNDEFINED> instruction: 0x0003c5b4
   3c380:	andeq	ip, r3, r0, lsr #12
   3c384:			; <UNDEFINED> instruction: 0x0003c5b4
   3c388:			; <UNDEFINED> instruction: 0x0003c5b4
   3c38c:			; <UNDEFINED> instruction: 0x0003c5b4
   3c390:			; <UNDEFINED> instruction: 0x0003c5b4
   3c394:			; <UNDEFINED> instruction: 0x0003c5b4
   3c398:			; <UNDEFINED> instruction: 0x0003c5b4
   3c39c:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3a0:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3a4:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3a8:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3ac:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3b0:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3b4:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3b8:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3bc:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3c0:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3c4:	andeq	ip, r3, r8, lsl #12
   3c3c8:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3cc:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3d0:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3d4:	strdeq	ip, [r3], -r0
   3c3d8:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3dc:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3e0:			; <UNDEFINED> instruction: 0x0003c5b4
   3c3e4:	ldrdeq	ip, [r3], -r4
   3c3e8:			; <UNDEFINED> instruction: 0x0003c5bc
   3c3ec:	muleq	r3, ip, r5
   3c3f0:	add	r7, fp, r7
   3c3f4:	lsr	r3, r9, #11
   3c3f8:	ldrb	r2, [r7, #-1]
   3c3fc:	eor	r3, r3, #1
   3c400:	cmp	r2, #10
   3c404:	orrne	r3, r3, #1
   3c408:	tst	r3, #1
   3c40c:	beq	3c540 <fts_children@@Base+0xaaa4>
   3c410:	mov	r0, #1
   3c414:	b	3c1b0 <fts_children@@Base+0xa714>
   3c418:	ldr	r3, [r5, #4]
   3c41c:	mov	r0, #1
   3c420:	bic	r3, r3, #2097152	; 0x200000
   3c424:	bic	r3, r3, #255	; 0xff
   3c428:	orr	r3, r3, #2097152	; 0x200000
   3c42c:	orr	r3, r3, r0
   3c430:	str	r3, [r5, #4]
   3c434:	b	3c1b0 <fts_children@@Base+0xa714>
   3c438:	bl	12460 <__ctype_b_loc@plt>
   3c43c:	lsl	r3, r6, #1
   3c440:	ldrb	r2, [r5, #6]
   3c444:	bic	r2, r2, #64	; 0x40
   3c448:	ldr	r1, [r0]
   3c44c:	ldrh	r3, [r1, r3]
   3c450:	lsr	r3, r3, #3
   3c454:	and	r3, r3, #1
   3c458:	cmp	r6, #95	; 0x5f
   3c45c:	orreq	r3, r3, #1
   3c460:	orr	r3, r2, r3, lsl #6
   3c464:	strb	r3, [r5, #6]
   3c468:	b	3c284 <fts_children@@Base+0xa7e8>
   3c46c:	tst	r9, #8192	; 0x2000
   3c470:	beq	3c410 <fts_children@@Base+0xa974>
   3c474:	mov	r3, #8
   3c478:	strb	r3, [r5, #4]
   3c47c:	mov	r0, #1
   3c480:	b	3c1b0 <fts_children@@Base+0xa714>
   3c484:	and	r0, r9, #33792	; 0x8400
   3c488:	cmp	r0, #32768	; 0x8000
   3c48c:	bne	3c410 <fts_children@@Base+0xa974>
   3c490:	mov	r3, #10
   3c494:	strb	r3, [r5, #4]
   3c498:	mov	r0, #1
   3c49c:	b	3c1b0 <fts_children@@Base+0xa714>
   3c4a0:	tst	r9, #8192	; 0x2000
   3c4a4:	beq	3c410 <fts_children@@Base+0xa974>
   3c4a8:	mov	r3, #9
   3c4ac:	strb	r3, [r5, #4]
   3c4b0:	mov	r0, #1
   3c4b4:	b	3c1b0 <fts_children@@Base+0xa714>
   3c4b8:	mov	r3, #11
   3c4bc:	strb	r3, [r5, #4]
   3c4c0:	mov	r0, #1
   3c4c4:	b	3c1b0 <fts_children@@Base+0xa714>
   3c4c8:	ldr	r3, [pc, #856]	; 3c828 <fts_children@@Base+0xad8c>
   3c4cc:	tst	r9, r3
   3c4d0:	bne	3c410 <fts_children@@Base+0xa974>
   3c4d4:	mov	r3, #18
   3c4d8:	strb	r3, [r5, #4]
   3c4dc:	mov	r0, #1
   3c4e0:	b	3c1b0 <fts_children@@Base+0xa714>
   3c4e4:	mov	r3, #5
   3c4e8:	strb	r3, [r5, #4]
   3c4ec:	mov	r0, #1
   3c4f0:	b	3c1b0 <fts_children@@Base+0xa714>
   3c4f4:	ldr	r3, [pc, #812]	; 3c828 <fts_children@@Base+0xad8c>
   3c4f8:	tst	r9, r3
   3c4fc:	bne	3c410 <fts_children@@Base+0xa974>
   3c500:	mov	r3, #19
   3c504:	strb	r3, [r5, #4]
   3c508:	mov	r0, #1
   3c50c:	b	3c1b0 <fts_children@@Base+0xa714>
   3c510:	mov	r3, #20
   3c514:	strb	r3, [r5, #4]
   3c518:	mov	r0, #1
   3c51c:	b	3c1b0 <fts_children@@Base+0xa714>
   3c520:	ldr	r3, [pc, #772]	; 3c82c <fts_children@@Base+0xad90>
   3c524:	tst	r9, r3
   3c528:	moveq	r3, #1
   3c52c:	movne	r3, #0
   3c530:	cmp	r7, #0
   3c534:	moveq	r3, #0
   3c538:	cmp	r3, #0
   3c53c:	bne	3c3f0 <fts_children@@Base+0xa954>
   3c540:	mov	r2, #12
   3c544:	mov	r3, #16
   3c548:	strb	r2, [r5, #4]
   3c54c:	str	r3, [r5]
   3c550:	mov	r0, #1
   3c554:	b	3c1b0 <fts_children@@Base+0xa714>
   3c558:	and	r0, r9, #4608	; 0x1200
   3c55c:	cmp	r0, #4608	; 0x1200
   3c560:	moveq	r3, #23
   3c564:	strbeq	r3, [r5, #4]
   3c568:	moveq	r0, #1
   3c56c:	bne	3c410 <fts_children@@Base+0xa974>
   3c570:	b	3c1b0 <fts_children@@Base+0xa714>
   3c574:	tst	r9, #2048	; 0x800
   3c578:	beq	3c410 <fts_children@@Base+0xa974>
   3c57c:	b	3c490 <fts_children@@Base+0xa9f4>
   3c580:	and	r0, r9, #4608	; 0x1200
   3c584:	cmp	r0, #4608	; 0x1200
   3c588:	moveq	r3, #24
   3c58c:	strbeq	r3, [r5, #4]
   3c590:	moveq	r0, #1
   3c594:	bne	3c410 <fts_children@@Base+0xa974>
   3c598:	b	3c1b0 <fts_children@@Base+0xa714>
   3c59c:	and	r0, r9, #4608	; 0x1200
   3c5a0:	cmp	r0, #512	; 0x200
   3c5a4:	moveq	r3, #24
   3c5a8:	strbeq	r3, [r5, #4]
   3c5ac:	moveq	r0, #2
   3c5b0:	beq	3c1b0 <fts_children@@Base+0xa714>
   3c5b4:	mov	r0, #2
   3c5b8:	b	3c1b0 <fts_children@@Base+0xa714>
   3c5bc:	tst	r9, #33792	; 0x8400
   3c5c0:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c5c4:	mov	r3, #10
   3c5c8:	strb	r3, [r5, #4]
   3c5cc:	mov	r0, #2
   3c5d0:	b	3c1b0 <fts_children@@Base+0xa714>
   3c5d4:	and	r0, r9, #4608	; 0x1200
   3c5d8:	cmp	r0, #512	; 0x200
   3c5dc:	moveq	r3, #23
   3c5e0:	strbeq	r3, [r5, #4]
   3c5e4:	moveq	r0, #2
   3c5e8:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c5ec:	b	3c1b0 <fts_children@@Base+0xa714>
   3c5f0:	tst	r9, #524288	; 0x80000
   3c5f4:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c5f8:	mov	r3, #32
   3c5fc:	strb	r3, [r5, #4]
   3c600:	mov	r0, #2
   3c604:	b	3c1b0 <fts_children@@Base+0xa714>
   3c608:	tst	r9, #524288	; 0x80000
   3c60c:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c610:	mov	r3, #34	; 0x22
   3c614:	strb	r3, [r5, #4]
   3c618:	mov	r0, #2
   3c61c:	b	3c1b0 <fts_children@@Base+0xa714>
   3c620:	tst	r9, #524288	; 0x80000
   3c624:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c628:	mov	r2, #12
   3c62c:	mov	r3, #256	; 0x100
   3c630:	strb	r2, [r5, #4]
   3c634:	str	r3, [r5]
   3c638:	mov	r0, #2
   3c63c:	b	3c1b0 <fts_children@@Base+0xa714>
   3c640:	tst	r9, #524288	; 0x80000
   3c644:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c648:	mov	r2, #12
   3c64c:	mov	r3, #64	; 0x40
   3c650:	strb	r2, [r5, #4]
   3c654:	str	r3, [r5]
   3c658:	mov	r0, #2
   3c65c:	b	3c1b0 <fts_children@@Base+0xa714>
   3c660:	tst	r9, #524288	; 0x80000
   3c664:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c668:	mov	r3, #33	; 0x21
   3c66c:	strb	r3, [r5, #4]
   3c670:	mov	r0, #2
   3c674:	b	3c1b0 <fts_children@@Base+0xa714>
   3c678:	tst	r9, #524288	; 0x80000
   3c67c:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c680:	mov	r3, #35	; 0x23
   3c684:	strb	r3, [r5, #4]
   3c688:	mov	r0, #2
   3c68c:	b	3c1b0 <fts_children@@Base+0xa714>
   3c690:	tst	r9, #524288	; 0x80000
   3c694:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c698:	mov	r2, #12
   3c69c:	mov	r3, #512	; 0x200
   3c6a0:	strb	r2, [r5, #4]
   3c6a4:	str	r3, [r5]
   3c6a8:	mov	r0, #2
   3c6ac:	b	3c1b0 <fts_children@@Base+0xa714>
   3c6b0:	ldr	r0, [pc, #368]	; 3c828 <fts_children@@Base+0xad8c>
   3c6b4:	and	r0, r0, r9
   3c6b8:	cmp	r0, #2
   3c6bc:	moveq	r3, #19
   3c6c0:	strbeq	r3, [r5, #4]
   3c6c4:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c6c8:	b	3c1b0 <fts_children@@Base+0xa714>
   3c6cc:	tst	r9, #524288	; 0x80000
   3c6d0:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c6d4:	mov	r2, #12
   3c6d8:	mov	r3, #9
   3c6dc:	strb	r2, [r5, #4]
   3c6e0:	str	r3, [r5]
   3c6e4:	mov	r0, #2
   3c6e8:	b	3c1b0 <fts_children@@Base+0xa714>
   3c6ec:	tst	r9, #524288	; 0x80000
   3c6f0:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c6f4:	mov	r2, #12
   3c6f8:	mov	r3, #6
   3c6fc:	strb	r2, [r5, #4]
   3c700:	str	r3, [r5]
   3c704:	mov	r0, #2
   3c708:	b	3c1b0 <fts_children@@Base+0xa714>
   3c70c:	tst	r9, #16384	; 0x4000
   3c710:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c714:	sub	r6, r6, #49	; 0x31
   3c718:	mov	r3, #4
   3c71c:	str	r6, [r5]
   3c720:	strb	r3, [r5, #4]
   3c724:	mov	r0, #2
   3c728:	b	3c1b0 <fts_children@@Base+0xa714>
   3c72c:	ldr	r0, [pc, #244]	; 3c828 <fts_children@@Base+0xad8c>
   3c730:	and	r0, r0, r9
   3c734:	cmp	r0, #2
   3c738:	moveq	r3, #18
   3c73c:	strbeq	r3, [r5, #4]
   3c740:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c744:	b	3c1b0 <fts_children@@Base+0xa714>
   3c748:	tst	r9, #8192	; 0x2000
   3c74c:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c750:	mov	r3, #9
   3c754:	strb	r3, [r5, #4]
   3c758:	mov	r0, #2
   3c75c:	b	3c1b0 <fts_children@@Base+0xa714>
   3c760:	tst	r9, #524288	; 0x80000
   3c764:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c768:	mov	r2, #12
   3c76c:	mov	r3, #128	; 0x80
   3c770:	strb	r2, [r5, #4]
   3c774:	str	r3, [r5]
   3c778:	mov	r0, #2
   3c77c:	b	3c1b0 <fts_children@@Base+0xa714>
   3c780:	tst	r9, #8192	; 0x2000
   3c784:	bne	3c5b4 <fts_children@@Base+0xab18>
   3c788:	mov	r3, #8
   3c78c:	strb	r3, [r5, #4]
   3c790:	mov	r0, #2
   3c794:	b	3c1b0 <fts_children@@Base+0xa714>
   3c798:	cmp	r2, #1
   3c79c:	ble	3c7d0 <fts_children@@Base+0xad34>
   3c7a0:	ldr	r0, [r4, #8]
   3c7a4:	add	r1, r0, r3, lsl #2
   3c7a8:	ldr	r0, [r0, r3, lsl #2]
   3c7ac:	cmn	r0, #1
   3c7b0:	beq	3c80c <fts_children@@Base+0xad70>
   3c7b4:	ldr	r0, [r4, #28]
   3c7b8:	add	r7, r7, #2
   3c7bc:	cmp	r0, r7
   3c7c0:	beq	3c7d0 <fts_children@@Base+0xad34>
   3c7c4:	ldr	r0, [r1, #4]
   3c7c8:	cmn	r0, #1
   3c7cc:	beq	3c80c <fts_children@@Base+0xad70>
   3c7d0:	ldrb	r0, [r4, #76]	; 0x4c
   3c7d4:	ldr	r1, [r4]
   3c7d8:	ldr	ip, [r4, #24]
   3c7dc:	cmp	r0, #0
   3c7e0:	beq	3c800 <fts_children@@Base+0xad64>
   3c7e4:	ldr	r0, [r4, #12]
   3c7e8:	add	r1, r1, ip
   3c7ec:	ldr	r0, [r0, r3, lsl #2]
   3c7f0:	ldrb	r6, [r1, r0]
   3c7f4:	tst	r6, #128	; 0x80
   3c7f8:	beq	3c238 <fts_children@@Base+0xa79c>
   3c7fc:	b	3c234 <fts_children@@Base+0xa798>
   3c800:	add	r1, r1, r3
   3c804:	ldrb	r6, [r1, ip]
   3c808:	b	3c238 <fts_children@@Base+0xa79c>
   3c80c:	ldrb	r6, [fp, r3]
   3c810:	mov	r3, #1
   3c814:	strb	r3, [r5, #4]
   3c818:	strb	r6, [r5]
   3c81c:	b	3c254 <fts_children@@Base+0xa7b8>
   3c820:	bl	12244 <__stack_chk_fail@plt>
   3c824:	andeq	fp, r5, r0, ror #24
   3c828:	andeq	r0, r0, r2, lsl #8
   3c82c:	addeq	r0, r0, r8
   3c830:	push	{r4, r5, r6, r7, r8, lr}
   3c834:	mov	r5, r0
   3c838:	ldr	r8, [pc, #164]	; 3c8e4 <fts_children@@Base+0xae48>
   3c83c:	mov	r4, r1
   3c840:	mov	r7, r2
   3c844:	mvn	r6, #0
   3c848:	mov	r2, r7
   3c84c:	mov	r1, r5
   3c850:	mov	r0, r4
   3c854:	bl	3beb4 <fts_children@@Base+0xa418>
   3c858:	ldrb	r2, [r4, #4]
   3c85c:	ldr	r3, [r5, #40]	; 0x28
   3c860:	ldrb	r1, [r4]
   3c864:	cmp	r2, #2
   3c868:	add	r0, r3, r0
   3c86c:	str	r0, [r5, #40]	; 0x28
   3c870:	beq	3c8d8 <fts_children@@Base+0xae3c>
   3c874:	cmp	r1, #44	; 0x2c
   3c878:	cmpne	r2, #24
   3c87c:	beq	3c8dc <fts_children@@Base+0xae40>
   3c880:	cmp	r2, #1
   3c884:	beq	3c890 <fts_children@@Base+0xadf4>
   3c888:	mvn	r6, #1
   3c88c:	b	3c848 <fts_children@@Base+0xadac>
   3c890:	sub	r2, r1, #48	; 0x30
   3c894:	uxtb	r0, r2
   3c898:	cmp	r0, #9
   3c89c:	movhi	r3, #0
   3c8a0:	movls	r3, #1
   3c8a4:	cmn	r6, #2
   3c8a8:	moveq	r3, #0
   3c8ac:	cmp	r3, #0
   3c8b0:	beq	3c888 <fts_children@@Base+0xadec>
   3c8b4:	add	r3, r6, r6, lsl #2
   3c8b8:	cmn	r6, #1
   3c8bc:	add	r1, r1, r3, lsl #1
   3c8c0:	moveq	r6, r2
   3c8c4:	beq	3c848 <fts_children@@Base+0xadac>
   3c8c8:	cmp	r1, r8
   3c8cc:	movge	r1, r8
   3c8d0:	sub	r6, r1, #48	; 0x30
   3c8d4:	b	3c848 <fts_children@@Base+0xadac>
   3c8d8:	mvn	r6, #1
   3c8dc:	mov	r0, r6
   3c8e0:	pop	{r4, r5, r6, r7, r8, pc}
   3c8e4:	andeq	r8, r0, r0, lsr r0
   3c8e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c8ec:	mov	r4, r1
   3c8f0:	ldr	r8, [pc, #580]	; 3cb3c <fts_children@@Base+0xb0a0>
   3c8f4:	ldr	ip, [r1, #80]	; 0x50
   3c8f8:	sub	sp, sp, #28
   3c8fc:	ldr	r1, [r8]
   3c900:	cmp	ip, #1
   3c904:	mov	r6, r0
   3c908:	mov	r7, r2
   3c90c:	mov	sl, r3
   3c910:	str	r1, [sp, #20]
   3c914:	ldr	r5, [r4, #40]	; 0x28
   3c918:	ldrb	r9, [sp, #68]	; 0x44
   3c91c:	beq	3c934 <fts_children@@Base+0xae98>
   3c920:	mov	r1, r5
   3c924:	mov	r0, r4
   3c928:	bl	33f18 <fts_children@@Base+0x247c>
   3c92c:	cmp	r0, #1
   3c930:	bgt	3c98c <fts_children@@Base+0xaef0>
   3c934:	ldrb	r2, [r7, #4]
   3c938:	add	r5, r5, sl
   3c93c:	str	r5, [r4, #40]	; 0x28
   3c940:	and	r3, r2, #251	; 0xfb
   3c944:	cmp	r2, #28
   3c948:	cmpne	r3, #26
   3c94c:	beq	3c9ac <fts_children@@Base+0xaf10>
   3c950:	cmp	r2, #22
   3c954:	moveq	r2, r9
   3c958:	orrne	r2, r9, #1
   3c95c:	cmp	r2, #0
   3c960:	beq	3cafc <fts_children@@Base+0xb060>
   3c964:	ldrb	r3, [r7]
   3c968:	mov	r0, #0
   3c96c:	str	r0, [r6]
   3c970:	strb	r3, [r6, #4]
   3c974:	ldr	r2, [sp, #20]
   3c978:	ldr	r3, [r8]
   3c97c:	cmp	r2, r3
   3c980:	bne	3cb38 <fts_children@@Base+0xb09c>
   3c984:	add	sp, sp, #28
   3c988:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c98c:	ldr	r2, [r4, #8]
   3c990:	mov	r1, #1
   3c994:	add	r3, r5, r0
   3c998:	ldr	r2, [r2, r5, lsl #2]
   3c99c:	mov	r0, #0
   3c9a0:	stm	r6, {r1, r2}
   3c9a4:	str	r3, [r4, #40]	; 0x28
   3c9a8:	b	3c974 <fts_children@@Base+0xaed8>
   3c9ac:	ldr	sl, [r4, #56]	; 0x38
   3c9b0:	cmp	r5, sl
   3c9b4:	bge	3ca54 <fts_children@@Base+0xafb8>
   3c9b8:	ldrb	fp, [r7]
   3c9bc:	mov	r9, #0
   3c9c0:	b	3c9e4 <fts_children@@Base+0xaf48>
   3c9c4:	ldr	r3, [r6, #4]
   3c9c8:	strb	r2, [r3, r9]
   3c9cc:	add	r9, r9, #1
   3c9d0:	cmp	r9, #32
   3c9d4:	beq	3ca54 <fts_children@@Base+0xafb8>
   3c9d8:	ldrb	r2, [r7, #4]
   3c9dc:	ldr	r5, [r4, #40]	; 0x28
   3c9e0:	ldr	sl, [r4, #56]	; 0x38
   3c9e4:	cmp	r2, #30
   3c9e8:	beq	3ca5c <fts_children@@Base+0xafc0>
   3c9ec:	ldr	r2, [r4, #4]
   3c9f0:	add	r3, r5, #1
   3c9f4:	str	r3, [r4, #40]	; 0x28
   3c9f8:	ldrb	r2, [r2, r5]
   3c9fc:	cmp	r3, sl
   3ca00:	bge	3ca54 <fts_children@@Base+0xafb8>
   3ca04:	cmp	fp, r2
   3ca08:	bne	3c9c4 <fts_children@@Base+0xaf28>
   3ca0c:	ldr	r1, [r4, #4]
   3ca10:	ldrb	r1, [r1, r3]
   3ca14:	cmp	r1, #93	; 0x5d
   3ca18:	bne	3c9c4 <fts_children@@Base+0xaf28>
   3ca1c:	ldr	r2, [r6, #4]
   3ca20:	add	r3, r3, #1
   3ca24:	mov	r0, #0
   3ca28:	str	r3, [r4, #40]	; 0x28
   3ca2c:	strb	r0, [r2, r9]
   3ca30:	ldrb	r3, [r7, #4]
   3ca34:	cmp	r3, #28
   3ca38:	beq	3cb2c <fts_children@@Base+0xb090>
   3ca3c:	cmp	r3, #30
   3ca40:	beq	3cb20 <fts_children@@Base+0xb084>
   3ca44:	cmp	r3, #26
   3ca48:	moveq	r3, #3
   3ca4c:	streq	r3, [r6]
   3ca50:	b	3c974 <fts_children@@Base+0xaed8>
   3ca54:	mov	r0, #7
   3ca58:	b	3c974 <fts_children@@Base+0xaed8>
   3ca5c:	ldrb	r3, [r4, #75]	; 0x4b
   3ca60:	cmp	r3, #0
   3ca64:	beq	3c9ec <fts_children@@Base+0xaf50>
   3ca68:	ldrb	r3, [r4, #76]	; 0x4c
   3ca6c:	cmp	r3, #0
   3ca70:	beq	3cae0 <fts_children@@Base+0xb044>
   3ca74:	ldr	r3, [r4, #28]
   3ca78:	lsl	r2, r5, #2
   3ca7c:	cmp	r5, r3
   3ca80:	beq	3ca94 <fts_children@@Base+0xaff8>
   3ca84:	ldr	r3, [r4, #8]
   3ca88:	ldr	r3, [r3, r5, lsl #2]
   3ca8c:	cmn	r3, #1
   3ca90:	beq	3c9ec <fts_children@@Base+0xaf50>
   3ca94:	ldr	r1, [r4, #12]
   3ca98:	ldr	r3, [r4]
   3ca9c:	ldr	r1, [r1, r2]
   3caa0:	ldr	r2, [r4, #24]
   3caa4:	add	r3, r3, r1
   3caa8:	ldrb	r2, [r3, r2]
   3caac:	tst	r2, #128	; 0x80
   3cab0:	bne	3c9ec <fts_children@@Base+0xaf50>
   3cab4:	ldr	r0, [r4, #80]	; 0x50
   3cab8:	cmp	r0, #1
   3cabc:	beq	3cad4 <fts_children@@Base+0xb038>
   3cac0:	mov	r1, r5
   3cac4:	mov	r0, r4
   3cac8:	str	r2, [sp, #4]
   3cacc:	bl	33f18 <fts_children@@Base+0x247c>
   3cad0:	ldr	r2, [sp, #4]
   3cad4:	add	r3, r5, r0
   3cad8:	str	r3, [r4, #40]	; 0x28
   3cadc:	b	3c9fc <fts_children@@Base+0xaf60>
   3cae0:	ldr	r2, [r4]
   3cae4:	ldr	r1, [r4, #24]
   3cae8:	add	r2, r2, r5
   3caec:	add	r3, r5, #1
   3caf0:	str	r3, [r4, #40]	; 0x28
   3caf4:	ldrb	r2, [r2, r1]
   3caf8:	b	3c9fc <fts_children@@Base+0xaf60>
   3cafc:	mov	r1, r4
   3cb00:	ldr	r2, [sp, #64]	; 0x40
   3cb04:	add	r0, sp, #12
   3cb08:	bl	32564 <fts_children@@Base+0xac8>
   3cb0c:	ldrb	r3, [sp, #16]
   3cb10:	cmp	r3, #21
   3cb14:	movne	r0, #11
   3cb18:	beq	3c964 <fts_children@@Base+0xaec8>
   3cb1c:	b	3c974 <fts_children@@Base+0xaed8>
   3cb20:	mov	r3, #4
   3cb24:	str	r3, [r6]
   3cb28:	b	3c974 <fts_children@@Base+0xaed8>
   3cb2c:	mov	r3, #2
   3cb30:	str	r3, [r6]
   3cb34:	b	3c974 <fts_children@@Base+0xaed8>
   3cb38:	bl	12244 <__stack_chk_fail@plt>
   3cb3c:	andeq	fp, r5, r0, ror #24
   3cb40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cb44:	mov	r5, r1
   3cb48:	sub	sp, sp, #156	; 0x9c
   3cb4c:	ldrb	ip, [r2, #4]
   3cb50:	mov	sl, r2
   3cb54:	ldr	r2, [pc, #3664]	; 3d9ac <fts_children@@Base+0xbf10>
   3cb58:	str	r3, [sp, #16]
   3cb5c:	ldr	r3, [r5]
   3cb60:	ldr	r1, [r2]
   3cb64:	str	r3, [sp, #24]
   3cb68:	ldr	r3, [sp, #196]	; 0xc4
   3cb6c:	sub	r2, ip, #1
   3cb70:	mov	fp, r0
   3cb74:	str	r1, [sp, #148]	; 0x94
   3cb78:	str	r3, [sp, #28]
   3cb7c:	cmp	r2, #35	; 0x23
   3cb80:	ldrls	pc, [pc, r2, lsl #2]
   3cb84:	b	3d184 <fts_children@@Base+0xb6e8>
   3cb88:	strdeq	sp, [r3], -r0
   3cb8c:	andeq	sp, r3, r4, lsl #3
   3cb90:	andeq	sp, r3, r4, lsl #3
   3cb94:	andeq	sp, r3, r4, ror #5
   3cb98:	andeq	sp, r3, r0, asr r3
   3cb9c:	andeq	sp, r3, r4, lsl #3
   3cba0:	andeq	sp, r3, r4, lsl #3
   3cba4:	muleq	r3, r0, r3
   3cba8:	andeq	sp, r3, ip, lsl #14
   3cbac:	andeq	sp, r3, r4, lsl #3
   3cbb0:	andeq	ip, r3, r4, lsr #24
   3cbb4:	andeq	sp, r3, ip, lsl r4
   3cbb8:	andeq	sp, r3, r4, lsl #3
   3cbbc:	andeq	sp, r3, r4, lsl #3
   3cbc0:	andeq	sp, r3, r4, lsl #3
   3cbc4:	andeq	sp, r3, r4, lsl #3
   3cbc8:	andeq	sp, r3, r4, lsl #3
   3cbcc:	andeq	ip, r3, r4, lsr #24
   3cbd0:	andeq	ip, r3, r4, lsr #24
   3cbd4:	andeq	sp, r3, ip, asr r5
   3cbd8:	andeq	sp, r3, r4, lsl #3
   3cbdc:	andeq	sp, r3, r4, lsl #3
   3cbe0:	andeq	ip, r3, r8, lsl ip
   3cbe4:	andeq	ip, r3, r0, asr #24
   3cbe8:	andeq	sp, r3, r4, lsl #3
   3cbec:	andeq	sp, r3, r4, lsl #3
   3cbf0:	andeq	sp, r3, r4, lsl #3
   3cbf4:	andeq	sp, r3, r4, lsl #3
   3cbf8:	andeq	sp, r3, r4, lsl #3
   3cbfc:	andeq	sp, r3, r4, lsl #3
   3cc00:	andeq	sp, r3, r4, lsl #3
   3cc04:	ldrdeq	sp, [r3], -r0
   3cc08:	ldrdeq	sp, [r3], -r0
   3cc0c:	andeq	sp, r3, r0, lsl #13
   3cc10:	andeq	sp, r3, r0, lsl #13
   3cc14:	strdeq	sp, [r3], -r4
   3cc18:	ldr	r3, [sp, #16]
   3cc1c:	tst	r3, #16777216	; 0x1000000
   3cc20:	bne	3ce84 <fts_children@@Base+0xb3e8>
   3cc24:	ldr	r3, [sp, #16]
   3cc28:	tst	r3, #32
   3cc2c:	bne	3ce84 <fts_children@@Base+0xb3e8>
   3cc30:	tst	r3, #16
   3cc34:	bne	3d920 <fts_children@@Base+0xbe84>
   3cc38:	cmp	ip, #9
   3cc3c:	beq	3d70c <fts_children@@Base+0xbc70>
   3cc40:	ldr	r0, [sp, #24]
   3cc44:	mov	r3, #0
   3cc48:	mov	r2, #1
   3cc4c:	str	sl, [sp]
   3cc50:	add	r1, r0, #64	; 0x40
   3cc54:	strb	r2, [sl, #4]
   3cc58:	add	r0, r0, #56	; 0x38
   3cc5c:	mov	r2, r3
   3cc60:	bl	34bb0 <fts_children@@Base+0x3114>
   3cc64:	subs	r3, r0, #0
   3cc68:	str	r3, [sp, #20]
   3cc6c:	beq	3d2cc <fts_children@@Base+0xb830>
   3cc70:	ldr	r2, [sp, #16]
   3cc74:	mov	r1, fp
   3cc78:	mov	r0, sl
   3cc7c:	bl	3beb4 <fts_children@@Base+0xa418>
   3cc80:	ldr	r3, [fp, #40]	; 0x28
   3cc84:	ldrb	r7, [sl, #4]
   3cc88:	add	r0, r3, r0
   3cc8c:	str	r0, [fp, #40]	; 0x28
   3cc90:	cmp	r7, #23
   3cc94:	cmpne	r7, #11
   3cc98:	moveq	r3, #1
   3cc9c:	movne	r3, #0
   3cca0:	sub	r2, r7, #18
   3cca4:	cmp	r2, #1
   3cca8:	orrls	r3, r3, #1
   3ccac:	cmp	r3, #0
   3ccb0:	sub	r4, r7, #18
   3ccb4:	clz	r4, r4
   3ccb8:	lsr	r4, r4, #5
   3ccbc:	beq	3ce98 <fts_children@@Base+0xb3fc>
   3ccc0:	ldm	sl, {r0, r1}
   3ccc4:	add	r5, sp, #68	; 0x44
   3ccc8:	cmp	r7, #23
   3cccc:	stm	r5, {r0, r1}
   3ccd0:	ldr	r6, [fp, #40]	; 0x28
   3ccd4:	beq	3cfe4 <fts_children@@Base+0xb548>
   3ccd8:	cmp	r7, #19
   3ccdc:	beq	3cf70 <fts_children@@Base+0xb4d4>
   3cce0:	ldr	r2, [sp, #16]
   3cce4:	mov	r1, fp
   3cce8:	mov	r0, sl
   3ccec:	bl	3beb4 <fts_children@@Base+0xa418>
   3ccf0:	ldr	r3, [fp, #40]	; 0x28
   3ccf4:	ldr	r2, [sp, #20]
   3ccf8:	cmp	r2, #0
   3ccfc:	add	r0, r3, r0
   3cd00:	str	r0, [fp, #40]	; 0x28
   3cd04:	beq	3d044 <fts_children@@Base+0xb5a8>
   3cd08:	cmp	r7, #18
   3cd0c:	beq	3d1b0 <fts_children@@Base+0xb714>
   3cd10:	ldr	r5, [sp, #20]
   3cd14:	ldrb	r3, [r5, #24]
   3cd18:	cmp	r3, #17
   3cd1c:	mov	r3, #0
   3cd20:	str	r3, [sp, #32]
   3cd24:	mov	r4, r3
   3cd28:	mvnne	r9, #0
   3cd2c:	beq	3cfbc <fts_children@@Base+0xb520>
   3cd30:	mov	ip, #11
   3cd34:	ldr	r3, [sp, #24]
   3cd38:	add	r6, sp, #76	; 0x4c
   3cd3c:	add	r7, r3, #56	; 0x38
   3cd40:	add	r8, r3, #64	; 0x40
   3cd44:	mov	r2, r5
   3cd48:	mov	r0, r7
   3cd4c:	mov	r1, r8
   3cd50:	str	r6, [sp]
   3cd54:	mov	r3, #0
   3cd58:	strb	ip, [sp, #80]	; 0x50
   3cd5c:	bl	34bb0 <fts_children@@Base+0x3114>
   3cd60:	subs	r2, r0, #0
   3cd64:	beq	3cf48 <fts_children@@Base+0xb4ac>
   3cd68:	add	r4, r4, #2
   3cd6c:	cmp	r4, r9
   3cd70:	bgt	3cdfc <fts_children@@Base+0xb360>
   3cd74:	str	sl, [sp, #36]	; 0x24
   3cd78:	mov	sl, r2
   3cd7c:	mov	r0, r5
   3cd80:	ldr	r1, [sp, #24]
   3cd84:	bl	34c80 <fts_children@@Base+0x31e4>
   3cd88:	mov	r2, sl
   3cd8c:	mov	ip, #16
   3cd90:	str	r6, [sp]
   3cd94:	mov	r1, r8
   3cd98:	strb	ip, [sp, #80]	; 0x50
   3cd9c:	mov	r3, r0
   3cda0:	mov	r5, r0
   3cda4:	mov	r0, r7
   3cda8:	bl	34bb0 <fts_children@@Base+0x3114>
   3cdac:	cmp	r5, #0
   3cdb0:	clz	r3, r0
   3cdb4:	lsr	r3, r3, #5
   3cdb8:	moveq	r3, #1
   3cdbc:	cmp	r3, #0
   3cdc0:	mov	r2, r0
   3cdc4:	bne	3cf48 <fts_children@@Base+0xb4ac>
   3cdc8:	mov	ip, #10
   3cdcc:	str	r6, [sp]
   3cdd0:	mov	r1, r8
   3cdd4:	mov	r0, r7
   3cdd8:	strb	ip, [sp, #80]	; 0x50
   3cddc:	bl	34bb0 <fts_children@@Base+0x3114>
   3cde0:	subs	sl, r0, #0
   3cde4:	beq	3cf48 <fts_children@@Base+0xb4ac>
   3cde8:	add	r4, r4, #1
   3cdec:	cmp	r4, r9
   3cdf0:	ble	3cd7c <fts_children@@Base+0xb2e0>
   3cdf4:	mov	r2, sl
   3cdf8:	ldr	sl, [sp, #36]	; 0x24
   3cdfc:	ldr	r1, [sp, #32]
   3ce00:	cmp	r1, #0
   3ce04:	beq	3d1a8 <fts_children@@Base+0xb70c>
   3ce08:	mov	r3, r2
   3ce0c:	mov	ip, #16
   3ce10:	mov	r2, r1
   3ce14:	str	r6, [sp]
   3ce18:	mov	r1, r8
   3ce1c:	mov	r0, r7
   3ce20:	strb	ip, [sp, #80]	; 0x50
   3ce24:	bl	34bb0 <fts_children@@Base+0x3114>
   3ce28:	ldr	r3, [sp, #28]
   3ce2c:	ldr	r2, [r3]
   3ce30:	clz	r3, r0
   3ce34:	cmp	r2, #0
   3ce38:	lsr	r3, r3, #5
   3ce3c:	moveq	r3, #0
   3ce40:	cmp	r3, #0
   3ce44:	bne	3d178 <fts_children@@Base+0xb6dc>
   3ce48:	str	r0, [sp, #20]
   3ce4c:	ldr	r3, [sp, #16]
   3ce50:	ldrb	r7, [sl, #4]
   3ce54:	tst	r3, #16777216	; 0x1000000
   3ce58:	beq	3cc90 <fts_children@@Base+0xb1f4>
   3ce5c:	cmp	r7, #23
   3ce60:	cmpne	r7, #11
   3ce64:	bne	3cc90 <fts_children@@Base+0xb1f4>
   3ce68:	ldr	r3, [sp, #20]
   3ce6c:	cmp	r3, #0
   3ce70:	beq	3ce84 <fts_children@@Base+0xb3e8>
   3ce74:	mov	r0, r3
   3ce78:	mov	r2, #0
   3ce7c:	ldr	r1, [pc, #2860]	; 3d9b0 <fts_children@@Base+0xbf14>
   3ce80:	bl	324ec <fts_children@@Base+0xa50>
   3ce84:	ldr	r2, [sp, #28]
   3ce88:	mov	r3, #13
   3ce8c:	str	r3, [r2]
   3ce90:	mov	r3, #0
   3ce94:	str	r3, [sp, #20]
   3ce98:	ldr	r3, [pc, #2828]	; 3d9ac <fts_children@@Base+0xbf10>
   3ce9c:	ldr	r2, [sp, #148]	; 0x94
   3cea0:	ldr	r0, [sp, #20]
   3cea4:	ldr	r3, [r3]
   3cea8:	cmp	r2, r3
   3ceac:	bne	3e070 <fts_children@@Base+0xc5d4>
   3ceb0:	add	sp, sp, #156	; 0x9c
   3ceb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ceb8:	cmp	r4, #0
   3cebc:	ble	3e088 <fts_children@@Base+0xc5ec>
   3cec0:	cmp	r4, #1
   3cec4:	beq	3e094 <fts_children@@Base+0xc5f8>
   3cec8:	ldr	r3, [sp, #24]
   3cecc:	ldr	r5, [sp, #20]
   3ced0:	add	r1, r3, #56	; 0x38
   3ced4:	add	r3, r3, #64	; 0x40
   3ced8:	str	r9, [sp, #32]
   3cedc:	str	fp, [sp, #36]	; 0x24
   3cee0:	str	sl, [sp, #40]	; 0x28
   3cee4:	mov	r7, #2
   3cee8:	add	r6, sp, #76	; 0x4c
   3ceec:	mov	r8, #16
   3cef0:	mov	r9, r3
   3cef4:	mov	fp, r1
   3cef8:	mov	sl, r5
   3cefc:	b	3cf0c <fts_children@@Base+0xb470>
   3cf00:	add	r7, r7, #1
   3cf04:	cmp	r4, r7
   3cf08:	blt	3d190 <fts_children@@Base+0xb6f4>
   3cf0c:	mov	r0, r5
   3cf10:	ldr	r1, [sp, #24]
   3cf14:	bl	34c80 <fts_children@@Base+0x31e4>
   3cf18:	mov	r2, sl
   3cf1c:	str	r6, [sp]
   3cf20:	mov	r1, r9
   3cf24:	strb	r8, [sp, #80]	; 0x50
   3cf28:	mov	r5, r0
   3cf2c:	mov	r3, r0
   3cf30:	mov	r0, fp
   3cf34:	bl	34bb0 <fts_children@@Base+0x3114>
   3cf38:	cmp	r0, #0
   3cf3c:	cmpne	r5, #0
   3cf40:	mov	sl, r0
   3cf44:	bne	3cf00 <fts_children@@Base+0xb464>
   3cf48:	ldr	r2, [sp, #28]
   3cf4c:	mov	r3, #12
   3cf50:	str	r3, [r2]
   3cf54:	ldr	r0, [sp, #20]
   3cf58:	mov	r2, #0
   3cf5c:	ldr	r1, [pc, #2636]	; 3d9b0 <fts_children@@Base+0xbf14>
   3cf60:	bl	324ec <fts_children@@Base+0xa50>
   3cf64:	mov	r3, #0
   3cf68:	str	r3, [sp, #20]
   3cf6c:	b	3ce98 <fts_children@@Base+0xb3fc>
   3cf70:	ldr	r2, [sp, #16]
   3cf74:	mov	r1, fp
   3cf78:	mov	r0, sl
   3cf7c:	bl	3beb4 <fts_children@@Base+0xa418>
   3cf80:	ldr	r3, [fp, #40]	; 0x28
   3cf84:	ldr	r2, [sp, #20]
   3cf88:	cmp	r2, #0
   3cf8c:	add	r0, r3, r0
   3cf90:	str	r0, [fp, #40]	; 0x28
   3cf94:	beq	3d044 <fts_children@@Base+0xb5a8>
   3cf98:	ldr	r5, [sp, #20]
   3cf9c:	ldrb	r3, [r5, #24]
   3cfa0:	cmp	r3, #17
   3cfa4:	beq	3e074 <fts_children@@Base+0xc5d8>
   3cfa8:	mov	r3, #0
   3cfac:	str	r3, [sp, #32]
   3cfb0:	mov	r9, #1
   3cfb4:	mov	ip, #10
   3cfb8:	b	3cd34 <fts_children@@Base+0xb298>
   3cfbc:	ldr	r5, [sp, #20]
   3cfc0:	mvn	r9, #0
   3cfc4:	ldr	r2, [r5, #20]
   3cfc8:	ldr	r1, [pc, #2532]	; 3d9b4 <fts_children@@Base+0xbf18>
   3cfcc:	mov	r0, r5
   3cfd0:	bl	324ec <fts_children@@Base+0xa50>
   3cfd4:	cmn	r9, #1
   3cfd8:	movne	ip, #10
   3cfdc:	bne	3cd34 <fts_children@@Base+0xb298>
   3cfe0:	b	3cd30 <fts_children@@Base+0xb294>
   3cfe4:	ldr	r2, [sp, #16]
   3cfe8:	mov	r1, sl
   3cfec:	mov	r0, fp
   3cff0:	bl	3c830 <fts_children@@Base+0xad94>
   3cff4:	cmn	r0, #1
   3cff8:	mov	r9, r0
   3cffc:	beq	3d060 <fts_children@@Base+0xb5c4>
   3d000:	cmn	r0, #2
   3d004:	beq	3d01c <fts_children@@Base+0xb580>
   3d008:	ldrb	r3, [sl, #4]
   3d00c:	cmp	r3, #24
   3d010:	beq	3d124 <fts_children@@Base+0xb688>
   3d014:	cmp	r3, #1
   3d018:	beq	3d150 <fts_children@@Base+0xb6b4>
   3d01c:	ldr	r3, [sp, #16]
   3d020:	tst	r3, #2097152	; 0x200000
   3d024:	beq	3dbe4 <fts_children@@Base+0xc148>
   3d028:	ldm	r5, {r0, r1}
   3d02c:	mov	r3, #1
   3d030:	str	r6, [fp, #40]	; 0x28
   3d034:	stm	sl, {r0, r1}
   3d038:	ldr	r0, [sp, #20]
   3d03c:	strb	r3, [sl, #4]
   3d040:	b	3ce28 <fts_children@@Base+0xb38c>
   3d044:	ldr	r3, [sp, #28]
   3d048:	ldr	r3, [r3]
   3d04c:	cmp	r3, #0
   3d050:	bne	3d184 <fts_children@@Base+0xb6e8>
   3d054:	mov	r3, #0
   3d058:	str	r3, [sp, #20]
   3d05c:	b	3ce4c <fts_children@@Base+0xb3b0>
   3d060:	ldrb	r3, [sl, #4]
   3d064:	cmp	r3, #1
   3d068:	bne	3d16c <fts_children@@Base+0xb6d0>
   3d06c:	ldrb	r3, [sl]
   3d070:	cmp	r3, #44	; 0x2c
   3d074:	bne	3d16c <fts_children@@Base+0xb6d0>
   3d078:	mov	r4, #0
   3d07c:	ldr	r2, [sp, #16]
   3d080:	mov	r1, sl
   3d084:	mov	r0, fp
   3d088:	bl	3c830 <fts_children@@Base+0xad94>
   3d08c:	cmn	r0, #2
   3d090:	mov	r9, r0
   3d094:	beq	3d01c <fts_children@@Base+0xb580>
   3d098:	cmn	r0, #1
   3d09c:	cmpne	r4, r0
   3d0a0:	bgt	3d16c <fts_children@@Base+0xb6d0>
   3d0a4:	ldrb	r3, [sl, #4]
   3d0a8:	cmp	r3, #24
   3d0ac:	bne	3d16c <fts_children@@Base+0xb6d0>
   3d0b0:	cmn	r0, #1
   3d0b4:	bne	3d128 <fts_children@@Base+0xb68c>
   3d0b8:	ldr	r3, [pc, #2296]	; 3d9b8 <fts_children@@Base+0xbf1c>
   3d0bc:	cmp	r4, r3
   3d0c0:	movle	r5, #0
   3d0c4:	movgt	r5, #1
   3d0c8:	cmp	r5, #0
   3d0cc:	bne	3d140 <fts_children@@Base+0xb6a4>
   3d0d0:	ldr	r2, [sp, #16]
   3d0d4:	mov	r1, fp
   3d0d8:	mov	r0, sl
   3d0dc:	bl	3beb4 <fts_children@@Base+0xa418>
   3d0e0:	ldr	r3, [fp, #40]	; 0x28
   3d0e4:	ldr	ip, [sp, #20]
   3d0e8:	cmp	ip, #0
   3d0ec:	add	r0, r3, r0
   3d0f0:	str	r0, [fp, #40]	; 0x28
   3d0f4:	beq	3d044 <fts_children@@Base+0xb5a8>
   3d0f8:	orrs	r3, r4, r9
   3d0fc:	bne	3ceb8 <fts_children@@Base+0xb41c>
   3d100:	mov	r2, r5
   3d104:	ldr	r1, [pc, #2212]	; 3d9b0 <fts_children@@Base+0xbf14>
   3d108:	mov	r0, ip
   3d10c:	bl	324ec <fts_children@@Base+0xa50>
   3d110:	ldr	r3, [sp, #28]
   3d114:	ldr	r3, [r3]
   3d118:	cmp	r3, #0
   3d11c:	beq	3d054 <fts_children@@Base+0xb5b8>
   3d120:	b	3cf54 <fts_children@@Base+0xb4b8>
   3d124:	mov	r4, r0
   3d128:	ldr	r3, [pc, #2184]	; 3d9b8 <fts_children@@Base+0xbf1c>
   3d12c:	cmp	r9, r3
   3d130:	movle	r5, #0
   3d134:	movgt	r5, #1
   3d138:	cmp	r5, #0
   3d13c:	beq	3d0d0 <fts_children@@Base+0xb634>
   3d140:	ldr	r2, [sp, #28]
   3d144:	mov	r3, #15
   3d148:	str	r3, [r2]
   3d14c:	b	3d178 <fts_children@@Base+0xb6dc>
   3d150:	ldrb	r3, [sl]
   3d154:	cmp	r3, #44	; 0x2c
   3d158:	moveq	r4, r0
   3d15c:	beq	3d07c <fts_children@@Base+0xb5e0>
   3d160:	ldr	r3, [sp, #16]
   3d164:	tst	r3, #2097152	; 0x200000
   3d168:	bne	3d028 <fts_children@@Base+0xb58c>
   3d16c:	ldr	r2, [sp, #28]
   3d170:	mov	r3, #10
   3d174:	str	r3, [r2]
   3d178:	ldr	r3, [sp, #20]
   3d17c:	cmp	r3, #0
   3d180:	bne	3cf54 <fts_children@@Base+0xb4b8>
   3d184:	mov	r3, #0
   3d188:	str	r3, [sp, #20]
   3d18c:	b	3ce98 <fts_children@@Base+0xb3fc>
   3d190:	ldr	r9, [sp, #32]
   3d194:	ldr	fp, [sp, #36]	; 0x24
   3d198:	ldr	sl, [sp, #40]	; 0x28
   3d19c:	mov	r2, r0
   3d1a0:	cmp	r4, r9
   3d1a4:	bne	3d1c0 <fts_children@@Base+0xb724>
   3d1a8:	str	r2, [sp, #20]
   3d1ac:	b	3ce4c <fts_children@@Base+0xb3b0>
   3d1b0:	ldr	r2, [sp, #20]
   3d1b4:	mov	r4, #1
   3d1b8:	mov	r5, r2
   3d1bc:	mvn	r9, #0
   3d1c0:	mov	r0, r5
   3d1c4:	ldr	r1, [sp, #24]
   3d1c8:	str	r2, [sp, #32]
   3d1cc:	bl	34c80 <fts_children@@Base+0x31e4>
   3d1d0:	ldr	r2, [sp, #32]
   3d1d4:	subs	r5, r0, #0
   3d1d8:	beq	3cf48 <fts_children@@Base+0xb4ac>
   3d1dc:	ldrb	r3, [r5, #24]
   3d1e0:	str	r2, [sp, #32]
   3d1e4:	cmp	r3, #17
   3d1e8:	bne	3cfd4 <fts_children@@Base+0xb538>
   3d1ec:	b	3cfc4 <fts_children@@Base+0xb528>
   3d1f0:	ldr	r3, [sp, #24]
   3d1f4:	str	sl, [sp]
   3d1f8:	add	r5, r3, #56	; 0x38
   3d1fc:	add	r6, r3, #64	; 0x40
   3d200:	mov	r3, #0
   3d204:	mov	r2, r3
   3d208:	mov	r0, r5
   3d20c:	mov	r1, r6
   3d210:	bl	34bb0 <fts_children@@Base+0x3114>
   3d214:	subs	r3, r0, #0
   3d218:	str	r3, [sp, #20]
   3d21c:	beq	3d2cc <fts_children@@Base+0xb830>
   3d220:	ldr	r3, [sp, #24]
   3d224:	ldr	r3, [r3, #92]	; 0x5c
   3d228:	cmp	r3, #1
   3d22c:	ble	3cc70 <fts_children@@Base+0xb1d4>
   3d230:	ldr	r4, [sp, #20]
   3d234:	mov	r7, #16
   3d238:	add	r8, sp, #76	; 0x4c
   3d23c:	ldr	r3, [fp, #40]	; 0x28
   3d240:	ldr	r2, [fp, #56]	; 0x38
   3d244:	cmp	r2, r3
   3d248:	ble	3d978 <fts_children@@Base+0xbedc>
   3d24c:	ldr	r2, [fp, #28]
   3d250:	cmp	r3, r2
   3d254:	beq	3d978 <fts_children@@Base+0xbedc>
   3d258:	ldr	r2, [fp, #8]
   3d25c:	ldr	r3, [r2, r3, lsl #2]
   3d260:	cmn	r3, #1
   3d264:	bne	3d978 <fts_children@@Base+0xbedc>
   3d268:	ldr	r2, [sp, #16]
   3d26c:	mov	r1, fp
   3d270:	mov	r0, sl
   3d274:	bl	3beb4 <fts_children@@Base+0xa418>
   3d278:	ldr	ip, [fp, #40]	; 0x28
   3d27c:	mov	r3, #0
   3d280:	mov	r2, r3
   3d284:	str	sl, [sp]
   3d288:	mov	r1, r6
   3d28c:	add	r0, ip, r0
   3d290:	str	r0, [fp, #40]	; 0x28
   3d294:	mov	r0, r5
   3d298:	bl	34bb0 <fts_children@@Base+0x3114>
   3d29c:	mov	r2, r4
   3d2a0:	str	r8, [sp]
   3d2a4:	mov	r1, r6
   3d2a8:	strb	r7, [sp, #80]	; 0x50
   3d2ac:	mov	r9, r0
   3d2b0:	mov	r3, r0
   3d2b4:	mov	r0, r5
   3d2b8:	bl	34bb0 <fts_children@@Base+0x3114>
   3d2bc:	cmp	r0, #0
   3d2c0:	cmpne	r9, #0
   3d2c4:	mov	r4, r0
   3d2c8:	bne	3d23c <fts_children@@Base+0xb7a0>
   3d2cc:	ldr	r2, [sp, #28]
   3d2d0:	mov	r3, #12
   3d2d4:	str	r3, [r2]
   3d2d8:	mov	r3, #0
   3d2dc:	str	r3, [sp, #20]
   3d2e0:	b	3ce98 <fts_children@@Base+0xb3fc>
   3d2e4:	ldr	r1, [sl]
   3d2e8:	ldr	r3, [sp, #24]
   3d2ec:	mov	r2, #1
   3d2f0:	ldr	r3, [r3, #84]	; 0x54
   3d2f4:	lsl	r2, r2, r1
   3d2f8:	ands	r3, r2, r3
   3d2fc:	beq	3dc00 <fts_children@@Base+0xc164>
   3d300:	ldr	r4, [sp, #24]
   3d304:	mov	r3, #0
   3d308:	add	r0, r4, #56	; 0x38
   3d30c:	ldr	r1, [r4, #80]	; 0x50
   3d310:	orr	r2, r1, r2
   3d314:	str	r2, [r4, #80]	; 0x50
   3d318:	add	r1, r4, #64	; 0x40
   3d31c:	mov	r2, r3
   3d320:	str	sl, [sp]
   3d324:	bl	34bb0 <fts_children@@Base+0x3114>
   3d328:	subs	r3, r0, #0
   3d32c:	str	r3, [sp, #20]
   3d330:	beq	3d2cc <fts_children@@Base+0xb830>
   3d334:	ldrb	r2, [r4, #88]	; 0x58
   3d338:	ldr	r3, [r4, #76]	; 0x4c
   3d33c:	orr	r2, r2, #2
   3d340:	add	r3, r3, #1
   3d344:	strb	r2, [r4, #88]	; 0x58
   3d348:	str	r3, [r4, #76]	; 0x4c
   3d34c:	b	3cc70 <fts_children@@Base+0xb1d4>
   3d350:	ldr	r4, [sp, #24]
   3d354:	mov	r3, #0
   3d358:	mov	r2, r3
   3d35c:	str	sl, [sp]
   3d360:	add	r1, r4, #64	; 0x40
   3d364:	add	r0, r4, #56	; 0x38
   3d368:	bl	34bb0 <fts_children@@Base+0x3114>
   3d36c:	subs	r3, r0, #0
   3d370:	str	r3, [sp, #20]
   3d374:	beq	3d2cc <fts_children@@Base+0xb830>
   3d378:	ldr	r3, [r4, #92]	; 0x5c
   3d37c:	cmp	r3, #1
   3d380:	ldrbgt	r3, [r4, #88]	; 0x58
   3d384:	orrgt	r3, r3, #2
   3d388:	strbgt	r3, [r4, #88]	; 0x58
   3d38c:	b	3cc70 <fts_children@@Base+0xb1d4>
   3d390:	ldr	r4, [r5, #24]
   3d394:	ldr	r6, [sp, #16]
   3d398:	add	r3, r4, #1
   3d39c:	orr	r2, r6, #8388608	; 0x800000
   3d3a0:	str	r3, [r5, #24]
   3d3a4:	mov	r1, r0
   3d3a8:	mov	r0, sl
   3d3ac:	bl	3beb4 <fts_children@@Base+0xa418>
   3d3b0:	ldrb	r2, [sl, #4]
   3d3b4:	ldr	r3, [fp, #40]	; 0x28
   3d3b8:	cmp	r2, #9
   3d3bc:	moveq	r2, #0
   3d3c0:	add	r3, r3, r0
   3d3c4:	str	r3, [fp, #40]	; 0x28
   3d3c8:	bne	3d72c <fts_children@@Base+0xbc90>
   3d3cc:	cmp	r4, #8
   3d3d0:	movls	r1, #1
   3d3d4:	ldrls	r0, [sp, #24]
   3d3d8:	add	ip, sp, #76	; 0x4c
   3d3dc:	ldrls	r3, [r0, #84]	; 0x54
   3d3e0:	orrls	r3, r3, r1, lsl r4
   3d3e4:	strls	r3, [r0, #84]	; 0x54
   3d3e8:	ldr	r0, [sp, #24]
   3d3ec:	str	ip, [sp]
   3d3f0:	mov	r3, #0
   3d3f4:	mov	ip, #17
   3d3f8:	add	r1, r0, #64	; 0x40
   3d3fc:	add	r0, r0, #56	; 0x38
   3d400:	strb	ip, [sp, #80]	; 0x50
   3d404:	bl	34bb0 <fts_children@@Base+0x3114>
   3d408:	subs	r3, r0, #0
   3d40c:	str	r3, [sp, #20]
   3d410:	beq	3d2cc <fts_children@@Base+0xb830>
   3d414:	str	r4, [r3, #20]
   3d418:	b	3cc70 <fts_children@@Base+0xb1d4>
   3d41c:	ldr	r4, [sl]
   3d420:	ldr	r3, [pc, #1428]	; 3d9bc <fts_children@@Base+0xbf20>
   3d424:	and	r3, r3, r4
   3d428:	cmp	r3, #0
   3d42c:	beq	3d48c <fts_children@@Base+0xb9f0>
   3d430:	ldr	r3, [sp, #24]
   3d434:	ldrb	r3, [r3, #88]	; 0x58
   3d438:	ands	r5, r3, #16
   3d43c:	bne	3d48c <fts_children@@Base+0xb9f0>
   3d440:	ldr	r0, [sp, #24]
   3d444:	orr	r3, r3, #16
   3d448:	ands	r2, r3, #8
   3d44c:	mov	r1, r3
   3d450:	strb	r3, [r0, #88]	; 0x58
   3d454:	bne	3dedc <fts_children@@Base+0xc440>
   3d458:	ldr	r3, [pc, #1376]	; 3d9c0 <fts_children@@Base+0xbf24>
   3d45c:	tst	r1, #4
   3d460:	mvn	r1, #2013265921	; 0x78000001
   3d464:	strd	r2, [r0, #96]	; 0x60
   3d468:	mvn	r3, #-134217727	; 0xf8000001
   3d46c:	str	r1, [r0, #104]	; 0x68
   3d470:	str	r3, [r0, #108]	; 0x6c
   3d474:	beq	3de5c <fts_children@@Base+0xc3c0>
   3d478:	str	r2, [r0, #112]	; 0x70
   3d47c:	str	r2, [r0, #116]	; 0x74
   3d480:	str	r2, [r0, #120]	; 0x78
   3d484:	str	r2, [r0, #124]	; 0x7c
   3d488:	ldr	r4, [sl]
   3d48c:	ldr	r2, [sp, #24]
   3d490:	sub	r3, r4, #256	; 0x100
   3d494:	bics	r3, r3, #256	; 0x100
   3d498:	add	r5, r2, #56	; 0x38
   3d49c:	add	r6, r2, #64	; 0x40
   3d4a0:	bne	3d890 <fts_children@@Base+0xbdf4>
   3d4a4:	cmp	r4, #256	; 0x100
   3d4a8:	beq	3d980 <fts_children@@Base+0xbee4>
   3d4ac:	mov	r2, #5
   3d4b0:	str	sl, [sp]
   3d4b4:	mov	r1, r6
   3d4b8:	str	r2, [sl]
   3d4bc:	mov	r0, r5
   3d4c0:	mov	r2, r3
   3d4c4:	bl	34bb0 <fts_children@@Base+0x3114>
   3d4c8:	mov	r3, #10
   3d4cc:	str	r3, [sl]
   3d4d0:	mov	r7, r0
   3d4d4:	mov	r3, #0
   3d4d8:	mov	r2, r3
   3d4dc:	mov	r1, r6
   3d4e0:	str	sl, [sp]
   3d4e4:	mov	r0, r5
   3d4e8:	bl	34bb0 <fts_children@@Base+0x3114>
   3d4ec:	add	r2, sp, #76	; 0x4c
   3d4f0:	str	r2, [sp]
   3d4f4:	mov	ip, #10
   3d4f8:	mov	r1, r6
   3d4fc:	mov	r2, r7
   3d500:	strb	ip, [sp, #80]	; 0x50
   3d504:	mov	r4, r0
   3d508:	mov	r3, r4
   3d50c:	mov	r0, r5
   3d510:	bl	34bb0 <fts_children@@Base+0x3114>
   3d514:	cmp	r7, #0
   3d518:	clz	r4, r4
   3d51c:	lsr	r4, r4, #5
   3d520:	moveq	r4, #1
   3d524:	cmp	r0, #0
   3d528:	movne	r3, r4
   3d52c:	moveq	r3, #1
   3d530:	cmp	r3, #0
   3d534:	str	r0, [sp, #20]
   3d538:	bne	3d2cc <fts_children@@Base+0xb830>
   3d53c:	ldr	r2, [sp, #16]
   3d540:	mov	r0, sl
   3d544:	mov	r1, fp
   3d548:	bl	3beb4 <fts_children@@Base+0xa418>
   3d54c:	ldr	r3, [fp, #40]	; 0x28
   3d550:	add	r3, r3, r0
   3d554:	str	r3, [fp, #40]	; 0x28
   3d558:	b	3ce98 <fts_children@@Base+0xb3fc>
   3d55c:	mov	r4, #0
   3d560:	mov	r1, #1
   3d564:	mov	r0, #32
   3d568:	str	r4, [sp, #56]	; 0x38
   3d56c:	bl	12064 <calloc@plt>
   3d570:	mov	r1, #1
   3d574:	mov	r9, r0
   3d578:	mov	r0, #40	; 0x28
   3d57c:	bl	12064 <calloc@plt>
   3d580:	cmp	r9, r4
   3d584:	clz	r5, r0
   3d588:	lsr	r5, r5, #5
   3d58c:	moveq	r5, #1
   3d590:	cmp	r5, r4
   3d594:	mov	r6, r0
   3d598:	bne	3dc14 <fts_children@@Base+0xc178>
   3d59c:	ldr	r2, [sp, #16]
   3d5a0:	mov	r1, fp
   3d5a4:	mov	r0, sl
   3d5a8:	bl	32564 <fts_children@@Base+0xac8>
   3d5ac:	ldrb	r3, [sl, #4]
   3d5b0:	cmp	r3, #2
   3d5b4:	mov	r7, r0
   3d5b8:	beq	3dbd4 <fts_children@@Base+0xc138>
   3d5bc:	cmp	r3, #25
   3d5c0:	strne	r5, [sp, #44]	; 0x2c
   3d5c4:	beq	3d8b8 <fts_children@@Base+0xbe1c>
   3d5c8:	ldr	r8, [sp, #16]
   3d5cc:	cmp	r3, #21
   3d5d0:	moveq	r3, #1
   3d5d4:	strbeq	r3, [sl, #4]
   3d5d8:	lsr	r3, r8, #16
   3d5dc:	and	r3, r3, #1
   3d5e0:	str	r3, [sp, #40]	; 0x28
   3d5e4:	mov	r3, #1
   3d5e8:	mov	r2, #0
   3d5ec:	str	r2, [sp, #36]	; 0x24
   3d5f0:	str	r2, [sp, #32]
   3d5f4:	add	ip, sp, #84	; 0x54
   3d5f8:	str	r3, [sp, #4]
   3d5fc:	str	ip, [sp, #64]	; 0x40
   3d600:	str	r8, [sp]
   3d604:	mov	ip, #3
   3d608:	mov	r3, r7
   3d60c:	mov	r2, sl
   3d610:	mov	r1, fp
   3d614:	add	r0, sp, #60	; 0x3c
   3d618:	str	ip, [sp, #60]	; 0x3c
   3d61c:	bl	3c8e8 <fts_children@@Base+0xae4c>
   3d620:	cmp	r0, #0
   3d624:	bne	3d96c <fts_children@@Base+0xbed0>
   3d628:	mov	r2, r8
   3d62c:	mov	r1, fp
   3d630:	mov	r0, sl
   3d634:	bl	32564 <fts_children@@Base+0xac8>
   3d638:	ldr	r3, [sp, #60]	; 0x3c
   3d63c:	sub	r2, r3, #2
   3d640:	bics	r2, r2, #2
   3d644:	mov	r7, r0
   3d648:	beq	3d660 <fts_children@@Base+0xbbc4>
   3d64c:	ldrb	r2, [sl, #4]
   3d650:	cmp	r2, #2
   3d654:	beq	3d910 <fts_children@@Base+0xbe74>
   3d658:	cmp	r2, #22
   3d65c:	beq	3d9e4 <fts_children@@Base+0xbf48>
   3d660:	cmp	r3, #4
   3d664:	ldrls	pc, [pc, r3, lsl #2]
   3d668:	b	3e0a0 <fts_children@@Base+0xc604>
   3d66c:	andeq	sp, r3, r8, lsr r8
   3d670:	andeq	sp, r3, r0, lsl r8
   3d674:	andeq	sp, r3, ip, asr #15
   3d678:	muleq	r3, r4, r7
   3d67c:	andeq	sp, r3, r8, asr r8
   3d680:	ldr	r3, [pc, #828]	; 3d9c4 <fts_children@@Base+0xbf28>
   3d684:	ldr	r2, [pc, #828]	; 3d9c8 <fts_children@@Base+0xbf2c>
   3d688:	ldr	r4, [sp, #28]
   3d68c:	sub	ip, ip, #35	; 0x23
   3d690:	clz	ip, ip
   3d694:	lsr	ip, ip, #5
   3d698:	str	ip, [sp]
   3d69c:	str	r4, [sp, #4]
   3d6a0:	ldr	r1, [fp, #64]	; 0x40
   3d6a4:	ldr	r0, [sp, #24]
   3d6a8:	bl	37f88 <fts_children@@Base+0x64ec>
   3d6ac:	ldr	r2, [r4]
   3d6b0:	cmp	r2, #0
   3d6b4:	clz	r3, r0
   3d6b8:	lsr	r3, r3, #5
   3d6bc:	moveq	r3, #0
   3d6c0:	cmp	r3, #0
   3d6c4:	str	r0, [sp, #20]
   3d6c8:	beq	3cc70 <fts_children@@Base+0xb1d4>
   3d6cc:	b	3d184 <fts_children@@Base+0xb6e8>
   3d6d0:	ldr	r4, [sp, #28]
   3d6d4:	sub	ip, ip, #33	; 0x21
   3d6d8:	clz	ip, ip
   3d6dc:	lsr	ip, ip, #5
   3d6e0:	str	ip, [sp]
   3d6e4:	str	r4, [sp, #4]
   3d6e8:	ldr	r3, [pc, #732]	; 3d9cc <fts_children@@Base+0xbf30>
   3d6ec:	ldr	r2, [pc, #732]	; 3d9d0 <fts_children@@Base+0xbf34>
   3d6f0:	b	3d6a0 <fts_children@@Base+0xbc04>
   3d6f4:	ldr	r2, [sp, #28]
   3d6f8:	mov	r3, #5
   3d6fc:	str	r3, [r2]
   3d700:	mov	r3, #0
   3d704:	str	r3, [sp, #20]
   3d708:	b	3ce98 <fts_children@@Base+0xb3fc>
   3d70c:	ldr	r3, [sp, #16]
   3d710:	ands	r3, r3, #131072	; 0x20000
   3d714:	bne	3cc40 <fts_children@@Base+0xb1a4>
   3d718:	str	r3, [sp, #20]
   3d71c:	ldr	r3, [sp, #28]
   3d720:	mov	r2, #16
   3d724:	str	r2, [r3]
   3d728:	b	3ce98 <fts_children@@Base+0xb3fc>
   3d72c:	ldr	r3, [sp, #192]	; 0xc0
   3d730:	ldr	r7, [sp, #28]
   3d734:	add	r3, r3, #1
   3d738:	str	r3, [sp]
   3d73c:	mov	r2, sl
   3d740:	mov	r3, r6
   3d744:	str	r7, [sp, #4]
   3d748:	mov	r1, r5
   3d74c:	mov	r0, fp
   3d750:	bl	3e268 <fts_children@@Base+0xc7cc>
   3d754:	ldr	r3, [r7]
   3d758:	cmp	r3, #0
   3d75c:	mov	r2, r0
   3d760:	bne	3d184 <fts_children@@Base+0xb6e8>
   3d764:	ldrb	r1, [sl, #4]
   3d768:	cmp	r1, #9
   3d76c:	beq	3d3cc <fts_children@@Base+0xb930>
   3d770:	cmp	r0, #0
   3d774:	beq	3d784 <fts_children@@Base+0xbce8>
   3d778:	mov	r2, r3
   3d77c:	ldr	r1, [pc, #556]	; 3d9b0 <fts_children@@Base+0xbf14>
   3d780:	bl	324ec <fts_children@@Base+0xa50>
   3d784:	ldr	r2, [sp, #28]
   3d788:	mov	r3, #8
   3d78c:	str	r3, [r2]
   3d790:	b	3d184 <fts_children@@Base+0xb6e8>
   3d794:	ldr	r1, [sp, #64]	; 0x40
   3d798:	mov	r0, r9
   3d79c:	bl	3775c <fts_children@@Base+0x5cc0>
   3d7a0:	ldr	r3, [sp, #28]
   3d7a4:	cmp	r0, #0
   3d7a8:	str	r0, [r3]
   3d7ac:	bne	3d7e8 <fts_children@@Base+0xbd4c>
   3d7b0:	ldrb	r3, [sl, #4]
   3d7b4:	cmp	r3, #2
   3d7b8:	beq	3d910 <fts_children@@Base+0xbe74>
   3d7bc:	cmp	r3, #21
   3d7c0:	beq	3dc7c <fts_children@@Base+0xc1e0>
   3d7c4:	mov	r3, #0
   3d7c8:	b	3d5f4 <fts_children@@Base+0xbb58>
   3d7cc:	ldr	r1, [sp, #64]	; 0x40
   3d7d0:	mov	r0, r9
   3d7d4:	bl	3775c <fts_children@@Base+0x5cc0>
   3d7d8:	ldr	r3, [sp, #28]
   3d7dc:	cmp	r0, #0
   3d7e0:	str	r0, [r3]
   3d7e4:	beq	3d7b0 <fts_children@@Base+0xbd14>
   3d7e8:	mov	r0, r9
   3d7ec:	bl	12154 <free@plt>
   3d7f0:	mov	r0, r6
   3d7f4:	bl	3361c <fts_children@@Base+0x1b80>
   3d7f8:	ldr	r3, [sp, #28]
   3d7fc:	ldr	r3, [r3]
   3d800:	cmp	r3, #0
   3d804:	bne	3d184 <fts_children@@Base+0xb6e8>
   3d808:	str	r3, [sp, #20]
   3d80c:	b	3cc70 <fts_children@@Base+0xb1d4>
   3d810:	ldr	r3, [r6, #20]
   3d814:	ldr	r2, [sp, #32]
   3d818:	ldr	r0, [r6]
   3d81c:	cmp	r3, r2
   3d820:	beq	3dc54 <fts_children@@Base+0xc1b8>
   3d824:	ldr	r2, [sp, #64]	; 0x40
   3d828:	add	r1, r3, #1
   3d82c:	str	r1, [r6, #20]
   3d830:	str	r2, [r0, r3, lsl #2]
   3d834:	b	3d7b0 <fts_children@@Base+0xbd14>
   3d838:	ldrb	r3, [sp, #64]	; 0x40
   3d83c:	mov	r0, #1
   3d840:	and	r1, r3, #31
   3d844:	asr	r3, r3, #5
   3d848:	ldr	r2, [r9, r3, lsl #2]
   3d84c:	orr	r2, r2, r0, lsl r1
   3d850:	str	r2, [r9, r3, lsl #2]
   3d854:	b	3d7b0 <fts_children@@Base+0xbd14>
   3d858:	ldr	r2, [sp, #64]	; 0x40
   3d85c:	add	r3, sp, #56	; 0x38
   3d860:	str	r3, [sp]
   3d864:	stmib	sp, {r2, r8}
   3d868:	add	r3, r6, #36	; 0x24
   3d86c:	add	r2, r6, #12
   3d870:	mov	r1, r9
   3d874:	ldr	r0, [fp, #64]	; 0x40
   3d878:	bl	3779c <fts_children@@Base+0x5d00>
   3d87c:	ldr	r3, [sp, #28]
   3d880:	cmp	r0, #0
   3d884:	str	r0, [r3]
   3d888:	beq	3d7b0 <fts_children@@Base+0xbd14>
   3d88c:	b	3d7e8 <fts_children@@Base+0xbd4c>
   3d890:	mov	r3, #0
   3d894:	mov	r2, r3
   3d898:	str	sl, [sp]
   3d89c:	mov	r1, r6
   3d8a0:	mov	r0, r5
   3d8a4:	bl	34bb0 <fts_children@@Base+0x3114>
   3d8a8:	subs	r3, r0, #0
   3d8ac:	str	r3, [sp, #20]
   3d8b0:	bne	3d53c <fts_children@@Base+0xbaa0>
   3d8b4:	b	3d2cc <fts_children@@Base+0xb830>
   3d8b8:	ldrb	r3, [r6, #16]
   3d8bc:	ldr	r2, [sp, #16]
   3d8c0:	mov	r1, fp
   3d8c4:	tst	r2, #256	; 0x100
   3d8c8:	orr	r3, r3, #1
   3d8cc:	strb	r3, [r6, #16]
   3d8d0:	ldrne	r3, [r9]
   3d8d4:	ldr	r2, [sp, #16]
   3d8d8:	orrne	r3, r3, #1024	; 0x400
   3d8dc:	strne	r3, [r9]
   3d8e0:	ldr	r3, [fp, #40]	; 0x28
   3d8e4:	add	r3, r3, r0
   3d8e8:	str	r3, [fp, #40]	; 0x28
   3d8ec:	mov	r0, sl
   3d8f0:	bl	32564 <fts_children@@Base+0xac8>
   3d8f4:	ldrb	r3, [sl, #4]
   3d8f8:	cmp	r3, #2
   3d8fc:	mov	r7, r0
   3d900:	beq	3dbd4 <fts_children@@Base+0xc138>
   3d904:	mov	r2, #1
   3d908:	str	r2, [sp, #44]	; 0x2c
   3d90c:	b	3d5c8 <fts_children@@Base+0xbb2c>
   3d910:	ldr	r2, [sp, #28]
   3d914:	mov	r3, #7
   3d918:	str	r3, [r2]
   3d91c:	b	3d7e8 <fts_children@@Base+0xbd4c>
   3d920:	mov	r2, r3
   3d924:	mov	r1, fp
   3d928:	mov	r0, sl
   3d92c:	mov	r4, r3
   3d930:	bl	3beb4 <fts_children@@Base+0xa418>
   3d934:	ldr	r3, [sp, #28]
   3d938:	ldr	ip, [fp, #40]	; 0x28
   3d93c:	str	r3, [sp, #4]
   3d940:	ldr	r3, [sp, #192]	; 0xc0
   3d944:	mov	r2, sl
   3d948:	str	r3, [sp]
   3d94c:	mov	r1, r5
   3d950:	mov	r3, r4
   3d954:	add	r0, ip, r0
   3d958:	str	r0, [fp, #40]	; 0x28
   3d95c:	mov	r0, fp
   3d960:	bl	3cb40 <fts_children@@Base+0xb0a4>
   3d964:	str	r0, [sp, #20]
   3d968:	b	3ce98 <fts_children@@Base+0xb3fc>
   3d96c:	ldr	r3, [sp, #28]
   3d970:	str	r0, [r3]
   3d974:	b	3d7e8 <fts_children@@Base+0xbd4c>
   3d978:	str	r4, [sp, #20]
   3d97c:	b	3cc70 <fts_children@@Base+0xb1d4>
   3d980:	mov	r2, #6
   3d984:	str	sl, [sp]
   3d988:	mov	r1, r6
   3d98c:	str	r2, [sl]
   3d990:	mov	r0, r5
   3d994:	mov	r2, r3
   3d998:	bl	34bb0 <fts_children@@Base+0x3114>
   3d99c:	mov	r3, #9
   3d9a0:	str	r3, [sl]
   3d9a4:	mov	r7, r0
   3d9a8:	b	3d4d4 <fts_children@@Base+0xba38>
   3d9ac:	andeq	fp, r5, r0, ror #24
   3d9b0:	andeq	r3, r3, r0, lsl #13
   3d9b4:	andeq	r2, r3, r4, ror #13
   3d9b8:	strdeq	r7, [r0], -pc	; <UNPREDICTABLE>
   3d9bc:	andeq	r0, r0, pc, lsl #6
   3d9c0:	mvnseq	r0, #0
   3d9c4:	andeq	r8, r4, r0, lsr r6
   3d9c8:	andeq	sl, r4, r0, lsl #21
   3d9cc:	andeq	sl, r4, r4, asr #21
   3d9d0:	andeq	sl, r4, r0, ror sl
   3d9d4:	andeq	sl, r4, ip, ror #15
   3d9d8:	andeq	r0, r0, sp, ror #25
   3d9dc:	andeq	sl, r4, r4, ror #19
   3d9e0:	andeq	r4, r4, ip, lsr #11
   3d9e4:	ldr	r3, [fp, #40]	; 0x28
   3d9e8:	add	r4, sp, #76	; 0x4c
   3d9ec:	add	r3, r3, r0
   3d9f0:	str	r3, [fp, #40]	; 0x28
   3d9f4:	mov	r2, r8
   3d9f8:	mov	r0, r4
   3d9fc:	mov	r1, fp
   3da00:	bl	32564 <fts_children@@Base+0xac8>
   3da04:	ldrb	r2, [sp, #80]	; 0x50
   3da08:	cmp	r2, #2
   3da0c:	mov	r3, r0
   3da10:	beq	3d910 <fts_children@@Base+0xbe74>
   3da14:	cmp	r2, #21
   3da18:	beq	3dc38 <fts_children@@Base+0xc19c>
   3da1c:	mov	r1, #1
   3da20:	str	r1, [sp, #4]
   3da24:	add	ip, sp, #116	; 0x74
   3da28:	mov	lr, #3
   3da2c:	str	r8, [sp]
   3da30:	mov	r2, r4
   3da34:	mov	r1, fp
   3da38:	add	r0, sp, #68	; 0x44
   3da3c:	str	lr, [sp, #68]	; 0x44
   3da40:	str	ip, [sp, #72]	; 0x48
   3da44:	bl	3c8e8 <fts_children@@Base+0xae4c>
   3da48:	cmp	r0, #0
   3da4c:	bne	3d96c <fts_children@@Base+0xbed0>
   3da50:	mov	r2, r8
   3da54:	mov	r1, fp
   3da58:	mov	r0, sl
   3da5c:	bl	32564 <fts_children@@Base+0xac8>
   3da60:	ldr	r3, [sp, #24]
   3da64:	ldr	r5, [sp, #60]	; 0x3c
   3da68:	ldr	r3, [r3, #92]	; 0x5c
   3da6c:	cmp	r3, #2
   3da70:	sub	r3, r5, #2
   3da74:	movge	r2, r6
   3da78:	movlt	r2, #0
   3da7c:	bics	r3, r3, #2
   3da80:	mov	r7, r0
   3da84:	str	r2, [sp, #20]
   3da88:	beq	3df30 <fts_children@@Base+0xc494>
   3da8c:	ldr	r3, [sp, #68]	; 0x44
   3da90:	sub	r1, r3, #2
   3da94:	bics	r2, r1, #2
   3da98:	beq	3df30 <fts_children@@Base+0xc494>
   3da9c:	cmp	r5, #3
   3daa0:	moveq	r2, #1
   3daa4:	movne	r2, #0
   3daa8:	str	r2, [sp, #48]	; 0x30
   3daac:	beq	3e01c <fts_children@@Base+0xc580>
   3dab0:	cmp	r3, #3
   3dab4:	beq	3dff0 <fts_children@@Base+0xc554>
   3dab8:	cmp	r5, #0
   3dabc:	bne	3df78 <fts_children@@Base+0xc4dc>
   3dac0:	ldrb	r4, [sp, #64]	; 0x40
   3dac4:	cmp	r5, #0
   3dac8:	ldr	r2, [sp, #48]	; 0x30
   3dacc:	moveq	r2, #1
   3dad0:	cmp	r3, #0
   3dad4:	beq	3df8c <fts_children@@Base+0xc4f0>
   3dad8:	cmp	r3, #3
   3dadc:	bne	3df40 <fts_children@@Base+0xc4a4>
   3dae0:	ldr	r1, [sp, #72]	; 0x48
   3dae4:	ldrb	r5, [r1]
   3dae8:	cmp	r2, #0
   3daec:	beq	3df64 <fts_children@@Base+0xc4c8>
   3daf0:	ldr	r2, [sp, #20]
   3daf4:	cmp	r2, #0
   3daf8:	beq	3df0c <fts_children@@Base+0xc470>
   3dafc:	mov	r0, r4
   3db00:	bl	12544 <btowc@plt>
   3db04:	ldr	r3, [sp, #68]	; 0x44
   3db08:	cmp	r3, #3
   3db0c:	cmpne	r3, #0
   3db10:	mov	r4, r0
   3db14:	bne	3df5c <fts_children@@Base+0xc4c0>
   3db18:	mov	r0, r5
   3db1c:	bl	12544 <btowc@plt>
   3db20:	mov	r5, r0
   3db24:	cmn	r4, #1
   3db28:	cmnne	r5, #1
   3db2c:	beq	3defc <fts_children@@Base+0xc460>
   3db30:	ldr	r3, [sp, #40]	; 0x28
   3db34:	cmp	r5, r4
   3db38:	movcs	r3, #0
   3db3c:	andcc	r3, r3, #1
   3db40:	cmp	r3, #0
   3db44:	bne	3df30 <fts_children@@Base+0xc494>
   3db48:	ldr	r3, [sp, #20]
   3db4c:	cmp	r3, #0
   3db50:	beq	3db84 <fts_children@@Base+0xc0e8>
   3db54:	ldr	r1, [r3, #32]
   3db58:	ldr	r2, [sp, #36]	; 0x24
   3db5c:	ldr	r3, [r3, #4]
   3db60:	cmp	r1, r2
   3db64:	beq	3df94 <fts_children@@Base+0xc4f8>
   3db68:	ldr	r0, [sp, #20]
   3db6c:	str	r4, [r3, r1, lsl #2]
   3db70:	ldr	r2, [r0, #8]
   3db74:	ldr	r3, [r0, #32]
   3db78:	add	r1, r3, #1
   3db7c:	str	r1, [r0, #32]
   3db80:	str	r5, [r2, r3, lsl #2]
   3db84:	mov	r3, #0
   3db88:	mov	ip, #1
   3db8c:	cmp	r4, r3
   3db90:	movhi	r2, #0
   3db94:	movls	r2, #1
   3db98:	cmp	r5, r3
   3db9c:	movcc	r2, #0
   3dba0:	cmp	r2, #0
   3dba4:	asrne	r0, r3, #5
   3dba8:	andne	r2, r3, #31
   3dbac:	ldrne	r1, [r9, r0, lsl #2]
   3dbb0:	add	r3, r3, #1
   3dbb4:	orrne	r2, r1, ip, lsl r2
   3dbb8:	strne	r2, [r9, r0, lsl #2]
   3dbbc:	cmp	r3, #256	; 0x100
   3dbc0:	bne	3db8c <fts_children@@Base+0xc0f0>
   3dbc4:	ldr	r2, [sp, #28]
   3dbc8:	mov	r3, #0
   3dbcc:	str	r3, [r2]
   3dbd0:	b	3d7b0 <fts_children@@Base+0xbd14>
   3dbd4:	ldr	r2, [sp, #28]
   3dbd8:	mov	r3, #2
   3dbdc:	str	r3, [r2]
   3dbe0:	b	3d7e8 <fts_children@@Base+0xbd4c>
   3dbe4:	ldrb	r3, [sl, #4]
   3dbe8:	cmp	r3, #2
   3dbec:	bne	3d16c <fts_children@@Base+0xb6d0>
   3dbf0:	ldr	r2, [sp, #28]
   3dbf4:	mov	r3, #9
   3dbf8:	str	r3, [r2]
   3dbfc:	b	3d178 <fts_children@@Base+0xb6dc>
   3dc00:	str	r3, [sp, #20]
   3dc04:	ldr	r3, [sp, #28]
   3dc08:	mov	r2, #6
   3dc0c:	str	r2, [r3]
   3dc10:	b	3ce98 <fts_children@@Base+0xb3fc>
   3dc14:	mov	r0, r9
   3dc18:	bl	12154 <free@plt>
   3dc1c:	mov	r0, r6
   3dc20:	bl	12154 <free@plt>
   3dc24:	ldr	r2, [sp, #28]
   3dc28:	mov	r3, #12
   3dc2c:	str	r4, [sp, #20]
   3dc30:	str	r3, [r2]
   3dc34:	b	3ce98 <fts_children@@Base+0xb3fc>
   3dc38:	ldr	r3, [fp, #40]	; 0x28
   3dc3c:	mov	r2, #1
   3dc40:	sub	r3, r3, r7
   3dc44:	str	r3, [fp, #40]	; 0x28
   3dc48:	strb	r2, [sl, #4]
   3dc4c:	ldr	r3, [sp, #60]	; 0x3c
   3dc50:	b	3d660 <fts_children@@Base+0xbbc4>
   3dc54:	lsl	r3, r2, #1
   3dc58:	add	r3, r3, #1
   3dc5c:	str	r3, [sp, #32]
   3dc60:	lsl	r1, r3, #2
   3dc64:	bl	12268 <realloc@plt>
   3dc68:	cmp	r0, #0
   3dc6c:	beq	3dd7c <fts_children@@Base+0xc2e0>
   3dc70:	ldr	r3, [r6, #20]
   3dc74:	str	r0, [r6]
   3dc78:	b	3d824 <fts_children@@Base+0xbd88>
   3dc7c:	ldr	r3, [fp, #40]	; 0x28
   3dc80:	ldr	r2, [sp, #44]	; 0x2c
   3dc84:	add	r3, r3, r7
   3dc88:	cmp	r2, #0
   3dc8c:	str	r3, [fp, #40]	; 0x28
   3dc90:	beq	3dcb0 <fts_children@@Base+0xc214>
   3dc94:	sub	r3, r9, #4
   3dc98:	add	r1, r9, #28
   3dc9c:	ldr	r2, [r3, #4]!
   3dca0:	mvn	r2, r2
   3dca4:	cmp	r1, r3
   3dca8:	str	r2, [r3]
   3dcac:	bne	3dc9c <fts_children@@Base+0xc200>
   3dcb0:	ldr	r3, [sp, #24]
   3dcb4:	ldr	r0, [r3, #92]	; 0x5c
   3dcb8:	cmp	r0, #1
   3dcbc:	ble	3dcec <fts_children@@Base+0xc250>
   3dcc0:	ldr	r3, [sp, #24]
   3dcc4:	sub	r2, r9, #4
   3dcc8:	add	ip, r9, #28
   3dccc:	ldr	r3, [r3, #60]	; 0x3c
   3dcd0:	sub	r3, r3, #4
   3dcd4:	ldr	r1, [r2, #4]!
   3dcd8:	ldr	lr, [r3, #4]!
   3dcdc:	cmp	ip, r2
   3dce0:	and	r1, r1, lr
   3dce4:	str	r1, [r2]
   3dce8:	bne	3dcd4 <fts_children@@Base+0xc238>
   3dcec:	ldr	r3, [r6, #20]
   3dcf0:	cmp	r3, #0
   3dcf4:	bne	3dd8c <fts_children@@Base+0xc2f0>
   3dcf8:	ldr	r3, [r6, #24]
   3dcfc:	cmp	r3, #0
   3dd00:	bne	3dd8c <fts_children@@Base+0xc2f0>
   3dd04:	ldr	r3, [r6, #28]
   3dd08:	cmp	r3, #0
   3dd0c:	bne	3dd8c <fts_children@@Base+0xc2f0>
   3dd10:	ldr	r3, [r6, #32]
   3dd14:	cmp	r3, #0
   3dd18:	bne	3dd8c <fts_children@@Base+0xc2f0>
   3dd1c:	cmp	r0, #1
   3dd20:	ble	3dd3c <fts_children@@Base+0xc2a0>
   3dd24:	ldr	r3, [r6, #36]	; 0x24
   3dd28:	cmp	r3, #0
   3dd2c:	bne	3dd8c <fts_children@@Base+0xc2f0>
   3dd30:	ldrb	r3, [r6, #16]
   3dd34:	tst	r3, #1
   3dd38:	bne	3dd8c <fts_children@@Base+0xc2f0>
   3dd3c:	mov	r0, r6
   3dd40:	bl	3361c <fts_children@@Base+0x1b80>
   3dd44:	ldr	r0, [sp, #24]
   3dd48:	mov	r3, #0
   3dd4c:	add	r2, sp, #68	; 0x44
   3dd50:	str	r2, [sp]
   3dd54:	mov	ip, #3
   3dd58:	mov	r2, r3
   3dd5c:	add	r1, r0, #64	; 0x40
   3dd60:	add	r0, r0, #56	; 0x38
   3dd64:	str	r9, [sp, #68]	; 0x44
   3dd68:	strb	ip, [sp, #72]	; 0x48
   3dd6c:	bl	34bb0 <fts_children@@Base+0x3114>
   3dd70:	subs	r3, r0, #0
   3dd74:	str	r3, [sp, #20]
   3dd78:	bne	3cc70 <fts_children@@Base+0xb1d4>
   3dd7c:	ldr	r2, [sp, #28]
   3dd80:	mov	r3, #12
   3dd84:	str	r3, [r2]
   3dd88:	b	3d7e8 <fts_children@@Base+0xbd4c>
   3dd8c:	ldr	r1, [sp, #24]
   3dd90:	mov	r3, #0
   3dd94:	add	r5, r1, #56	; 0x38
   3dd98:	ldrb	r2, [r1, #88]	; 0x58
   3dd9c:	add	r4, r1, #64	; 0x40
   3dda0:	add	r7, sp, #68	; 0x44
   3dda4:	orr	r2, r2, #2
   3dda8:	strb	r2, [r1, #88]	; 0x58
   3ddac:	mov	ip, #6
   3ddb0:	mov	r2, r3
   3ddb4:	mov	r0, r5
   3ddb8:	mov	r1, r4
   3ddbc:	str	r7, [sp]
   3ddc0:	str	r6, [sp, #68]	; 0x44
   3ddc4:	strb	ip, [sp, #72]	; 0x48
   3ddc8:	bl	34bb0 <fts_children@@Base+0x3114>
   3ddcc:	subs	r3, r0, #0
   3ddd0:	str	r3, [sp, #20]
   3ddd4:	beq	3dd7c <fts_children@@Base+0xc2e0>
   3ddd8:	sub	r3, r9, #4
   3dddc:	add	r2, r9, #28
   3dde0:	ldr	r1, [r3, #4]!
   3dde4:	cmp	r1, #0
   3dde8:	bne	3de00 <fts_children@@Base+0xc364>
   3ddec:	cmp	r2, r3
   3ddf0:	bne	3dde0 <fts_children@@Base+0xc344>
   3ddf4:	mov	r0, r9
   3ddf8:	bl	12154 <free@plt>
   3ddfc:	b	3cc70 <fts_children@@Base+0xb1d4>
   3de00:	mov	r3, #0
   3de04:	mov	r2, r3
   3de08:	mov	ip, #3
   3de0c:	str	r7, [sp]
   3de10:	mov	r1, r4
   3de14:	mov	r0, r5
   3de18:	str	r9, [sp, #68]	; 0x44
   3de1c:	strb	ip, [sp, #72]	; 0x48
   3de20:	bl	34bb0 <fts_children@@Base+0x3114>
   3de24:	subs	r2, r0, #0
   3de28:	beq	3dd7c <fts_children@@Base+0xc2e0>
   3de2c:	add	ip, sp, #76	; 0x4c
   3de30:	ldr	r3, [sp, #20]
   3de34:	str	ip, [sp]
   3de38:	mov	r1, r4
   3de3c:	mov	ip, #10
   3de40:	mov	r0, r5
   3de44:	strb	ip, [sp, #80]	; 0x50
   3de48:	bl	34bb0 <fts_children@@Base+0x3114>
   3de4c:	subs	r3, r0, #0
   3de50:	str	r3, [sp, #20]
   3de54:	bne	3cc70 <fts_children@@Base+0xb1d4>
   3de58:	b	3dd7c <fts_children@@Base+0xc2e0>
   3de5c:	mov	r5, #128	; 0x80
   3de60:	mov	r6, #4
   3de64:	bl	12460 <__ctype_b_loc@plt>
   3de68:	add	ip, r6, #24
   3de6c:	sub	r3, r5, #-2147483647	; 0x80000001
   3de70:	mov	lr, #1
   3de74:	ldr	r2, [sp, #24]
   3de78:	add	ip, r2, ip, lsl #2
   3de7c:	add	r7, r2, #128	; 0x80
   3de80:	ldr	r6, [r0]
   3de84:	add	r6, r6, r3, lsl lr
   3de88:	mov	r0, r6
   3de8c:	mov	r1, #0
   3de90:	ldrh	r2, [r0, #2]!
   3de94:	add	r3, r5, r1
   3de98:	lsr	r2, r2, #3
   3de9c:	cmp	r3, #95	; 0x5f
   3dea0:	movne	r3, r2
   3dea4:	orreq	r3, r2, #1
   3dea8:	tst	r3, #1
   3deac:	ldrne	r3, [ip]
   3deb0:	orrne	r3, r3, lr, lsl r1
   3deb4:	add	r1, r1, #1
   3deb8:	strne	r3, [ip]
   3debc:	cmp	r1, #32
   3dec0:	bne	3de90 <fts_children@@Base+0xc3f4>
   3dec4:	add	ip, ip, #4
   3dec8:	cmp	r7, ip
   3decc:	add	r5, r5, #32
   3ded0:	add	r6, r6, #64	; 0x40
   3ded4:	bne	3de88 <fts_children@@Base+0xc3ec>
   3ded8:	b	3d48c <fts_children@@Base+0xb9f0>
   3dedc:	mov	r6, r5
   3dee0:	b	3de64 <fts_children@@Base+0xc3c8>
   3dee4:	ldr	r0, [sp, #72]	; 0x48
   3dee8:	str	r3, [sp, #52]	; 0x34
   3deec:	bl	1249c <strlen@plt>
   3def0:	ldr	r3, [sp, #52]	; 0x34
   3def4:	cmp	r0, #1
   3def8:	bls	3e03c <fts_children@@Base+0xc5a0>
   3defc:	ldr	r2, [sp, #28]
   3df00:	mov	r3, #3
   3df04:	str	r3, [r2]
   3df08:	b	3d7e8 <fts_children@@Base+0xbd4c>
   3df0c:	cmp	r3, #3
   3df10:	cmpne	r3, #0
   3df14:	bne	3df5c <fts_children@@Base+0xc4c0>
   3df18:	ldr	r3, [sp, #40]	; 0x28
   3df1c:	cmp	r5, r4
   3df20:	movcs	r3, #0
   3df24:	andcc	r3, r3, #1
   3df28:	cmp	r3, #0
   3df2c:	beq	3db84 <fts_children@@Base+0xc0e8>
   3df30:	ldr	r2, [sp, #28]
   3df34:	mov	r3, #11
   3df38:	str	r3, [r2]
   3df3c:	b	3d7e8 <fts_children@@Base+0xbd4c>
   3df40:	cmp	r2, #0
   3df44:	ldreq	r4, [sp, #64]	; 0x40
   3df48:	beq	3df5c <fts_children@@Base+0xc4c0>
   3df4c:	ldr	r3, [sp, #20]
   3df50:	cmp	r3, #0
   3df54:	movne	r5, #0
   3df58:	bne	3dafc <fts_children@@Base+0xc060>
   3df5c:	ldr	r5, [sp, #72]	; 0x48
   3df60:	b	3db24 <fts_children@@Base+0xc088>
   3df64:	ldr	r3, [sp, #20]
   3df68:	ldr	r4, [sp, #64]	; 0x40
   3df6c:	cmp	r3, #0
   3df70:	bne	3db18 <fts_children@@Base+0xc07c>
   3df74:	b	3db24 <fts_children@@Base+0xc088>
   3df78:	cmp	r3, #0
   3df7c:	ldrb	r2, [sp, #48]	; 0x30
   3df80:	movne	r4, #0
   3df84:	bne	3df40 <fts_children@@Base+0xc4a4>
   3df88:	mov	r4, r3
   3df8c:	ldrb	r5, [sp, #72]	; 0x48
   3df90:	b	3dae8 <fts_children@@Base+0xc04c>
   3df94:	lsl	r2, r2, #1
   3df98:	add	r2, r2, #1
   3df9c:	str	r2, [sp, #36]	; 0x24
   3dfa0:	lsl	r2, r2, #2
   3dfa4:	mov	r1, r2
   3dfa8:	mov	r0, r3
   3dfac:	str	r2, [sp, #52]	; 0x34
   3dfb0:	bl	12268 <realloc@plt>
   3dfb4:	ldr	r3, [sp, #20]
   3dfb8:	ldr	r2, [sp, #52]	; 0x34
   3dfbc:	mov	r1, r2
   3dfc0:	str	r0, [sp, #48]	; 0x30
   3dfc4:	ldr	r0, [r3, #8]
   3dfc8:	bl	12268 <realloc@plt>
   3dfcc:	ldr	r3, [sp, #48]	; 0x30
   3dfd0:	cmp	r0, #0
   3dfd4:	cmpne	r3, #0
   3dfd8:	beq	3e048 <fts_children@@Base+0xc5ac>
   3dfdc:	ldr	r2, [sp, #20]
   3dfe0:	ldr	r1, [r2, #32]
   3dfe4:	str	r3, [r2, #4]
   3dfe8:	str	r0, [r2, #8]
   3dfec:	b	3db68 <fts_children@@Base+0xc0cc>
   3dff0:	ldr	r0, [sp, #72]	; 0x48
   3dff4:	str	r3, [sp, #52]	; 0x34
   3dff8:	bl	1249c <strlen@plt>
   3dffc:	cmp	r0, #1
   3e000:	bhi	3defc <fts_children@@Base+0xc460>
   3e004:	cmp	r5, #0
   3e008:	ldr	r3, [sp, #52]	; 0x34
   3e00c:	ldrbne	r2, [sp, #48]	; 0x30
   3e010:	movne	r4, #0
   3e014:	bne	3dae0 <fts_children@@Base+0xc044>
   3e018:	b	3dac0 <fts_children@@Base+0xc024>
   3e01c:	ldr	r0, [sp, #64]	; 0x40
   3e020:	str	r3, [sp, #52]	; 0x34
   3e024:	bl	1249c <strlen@plt>
   3e028:	ldr	r3, [sp, #52]	; 0x34
   3e02c:	cmp	r0, #1
   3e030:	bhi	3defc <fts_children@@Base+0xc460>
   3e034:	cmp	r3, #3
   3e038:	beq	3dee4 <fts_children@@Base+0xc448>
   3e03c:	ldr	r1, [sp, #64]	; 0x40
   3e040:	ldrb	r4, [r1]
   3e044:	b	3dac4 <fts_children@@Base+0xc028>
   3e048:	str	r0, [sp, #20]
   3e04c:	mov	r0, r3
   3e050:	bl	12154 <free@plt>
   3e054:	ldr	r2, [sp, #20]
   3e058:	mov	r0, r2
   3e05c:	bl	12154 <free@plt>
   3e060:	ldr	r2, [sp, #28]
   3e064:	mov	r3, #12
   3e068:	str	r3, [r2]
   3e06c:	b	3d7e8 <fts_children@@Base+0xbd4c>
   3e070:	bl	12244 <__stack_chk_fail@plt>
   3e074:	mov	r3, #0
   3e078:	ldr	r5, [sp, #20]
   3e07c:	str	r3, [sp, #32]
   3e080:	mov	r9, #1
   3e084:	b	3cfc4 <fts_children@@Base+0xb528>
   3e088:	mov	r2, r5
   3e08c:	ldr	r5, [sp, #20]
   3e090:	b	3d1dc <fts_children@@Base+0xb740>
   3e094:	ldr	r5, [sp, #20]
   3e098:	mov	r2, r5
   3e09c:	b	3d1a0 <fts_children@@Base+0xb704>
   3e0a0:	ldr	r3, [pc, #-1748]	; 3d9d4 <fts_children@@Base+0xbf38>
   3e0a4:	ldr	r2, [pc, #-1748]	; 3d9d8 <fts_children@@Base+0xbf3c>
   3e0a8:	ldr	r1, [pc, #-1748]	; 3d9dc <fts_children@@Base+0xbf40>
   3e0ac:	ldr	r0, [pc, #-1748]	; 3d9e0 <fts_children@@Base+0xbf44>
   3e0b0:	bl	1279c <__assert_fail@plt>
   3e0b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e0b8:	sub	sp, sp, #36	; 0x24
   3e0bc:	ldr	ip, [pc, #412]	; 3e260 <fts_children@@Base+0xc7c4>
   3e0c0:	ldr	r6, [sp, #76]	; 0x4c
   3e0c4:	ldr	r7, [sp, #72]	; 0x48
   3e0c8:	ldr	ip, [ip]
   3e0cc:	str	r7, [sp]
   3e0d0:	str	r6, [sp, #4]
   3e0d4:	mov	r8, r2
   3e0d8:	mov	fp, r3
   3e0dc:	mov	r9, r1
   3e0e0:	str	ip, [sp, #28]
   3e0e4:	ldr	r5, [r1]
   3e0e8:	mov	sl, r0
   3e0ec:	bl	3cb40 <fts_children@@Base+0xb0a4>
   3e0f0:	ldr	r2, [r6]
   3e0f4:	cmp	r2, #0
   3e0f8:	clz	r3, r0
   3e0fc:	lsr	r3, r3, #5
   3e100:	moveq	r3, #0
   3e104:	cmp	r3, #0
   3e108:	bne	3e214 <fts_children@@Base+0xc778>
   3e10c:	add	r3, r5, #64	; 0x40
   3e110:	mov	r4, r0
   3e114:	str	r3, [sp, #8]
   3e118:	add	r3, r5, #56	; 0x38
   3e11c:	str	r3, [sp, #12]
   3e120:	ldrb	r2, [r8, #4]
   3e124:	and	r3, r2, #247	; 0xf7
   3e128:	cmp	r3, #2
   3e12c:	beq	3e1a8 <fts_children@@Base+0xc70c>
   3e130:	clz	r3, r7
   3e134:	lsr	r3, r3, #5
   3e138:	cmp	r2, #9
   3e13c:	orrne	r3, r3, #1
   3e140:	cmp	r3, #0
   3e144:	beq	3e1a8 <fts_children@@Base+0xc70c>
   3e148:	mov	r3, fp
   3e14c:	mov	r2, r8
   3e150:	str	r6, [sp, #4]
   3e154:	str	r7, [sp]
   3e158:	mov	r1, r9
   3e15c:	mov	r0, sl
   3e160:	bl	3cb40 <fts_children@@Base+0xb0a4>
   3e164:	ldr	r2, [r6]
   3e168:	cmp	r2, #0
   3e16c:	clz	r3, r0
   3e170:	lsr	r3, r3, #5
   3e174:	moveq	r3, #0
   3e178:	cmp	r3, #0
   3e17c:	mov	r5, r0
   3e180:	bne	3e1fc <fts_children@@Base+0xc760>
   3e184:	cmp	r4, #0
   3e188:	cmpne	r0, #0
   3e18c:	bne	3e1c8 <fts_children@@Base+0xc72c>
   3e190:	ldrb	r2, [r8, #4]
   3e194:	cmp	r4, #0
   3e198:	moveq	r4, r0
   3e19c:	and	r3, r2, #247	; 0xf7
   3e1a0:	cmp	r3, #2
   3e1a4:	bne	3e130 <fts_children@@Base+0xc694>
   3e1a8:	ldr	r3, [pc, #176]	; 3e260 <fts_children@@Base+0xc7c4>
   3e1ac:	ldr	r2, [sp, #28]
   3e1b0:	mov	r0, r4
   3e1b4:	ldr	r3, [r3]
   3e1b8:	cmp	r2, r3
   3e1bc:	bne	3e25c <fts_children@@Base+0xc7c0>
   3e1c0:	add	sp, sp, #36	; 0x24
   3e1c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e1c8:	add	r3, sp, #20
   3e1cc:	str	r3, [sp]
   3e1d0:	mov	ip, #16
   3e1d4:	mov	r3, r0
   3e1d8:	mov	r2, r4
   3e1dc:	ldr	r1, [sp, #8]
   3e1e0:	ldr	r0, [sp, #12]
   3e1e4:	strb	ip, [sp, #24]
   3e1e8:	bl	34bb0 <fts_children@@Base+0x3114>
   3e1ec:	cmp	r0, #0
   3e1f0:	beq	3e21c <fts_children@@Base+0xc780>
   3e1f4:	mov	r4, r0
   3e1f8:	b	3e120 <fts_children@@Base+0xc684>
   3e1fc:	cmp	r4, #0
   3e200:	beq	3e214 <fts_children@@Base+0xc778>
   3e204:	mov	r0, r4
   3e208:	mov	r2, #0
   3e20c:	ldr	r1, [pc, #80]	; 3e264 <fts_children@@Base+0xc7c8>
   3e210:	bl	324ec <fts_children@@Base+0xa50>
   3e214:	mov	r4, #0
   3e218:	b	3e1a8 <fts_children@@Base+0xc70c>
   3e21c:	mov	r3, r0
   3e220:	mov	r2, r3
   3e224:	ldr	r1, [pc, #56]	; 3e264 <fts_children@@Base+0xc7c8>
   3e228:	mov	r0, r5
   3e22c:	str	r3, [sp, #8]
   3e230:	bl	324ec <fts_children@@Base+0xa50>
   3e234:	ldr	r3, [sp, #8]
   3e238:	mov	r0, r4
   3e23c:	mov	r2, r3
   3e240:	ldr	r1, [pc, #28]	; 3e264 <fts_children@@Base+0xc7c8>
   3e244:	bl	324ec <fts_children@@Base+0xa50>
   3e248:	ldr	r3, [sp, #8]
   3e24c:	mov	r2, #12
   3e250:	mov	r4, r3
   3e254:	str	r2, [r6]
   3e258:	b	3e1a8 <fts_children@@Base+0xc70c>
   3e25c:	bl	12244 <__stack_chk_fail@plt>
   3e260:	andeq	fp, r5, r0, ror #24
   3e264:	andeq	r3, r3, r0, lsl #13
   3e268:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e26c:	sub	sp, sp, #44	; 0x2c
   3e270:	ldr	r4, [r1]
   3e274:	ldr	ip, [pc, #384]	; 3e3fc <fts_children@@Base+0xc960>
   3e278:	ldr	r8, [sp, #84]	; 0x54
   3e27c:	ldr	r9, [sp, #80]	; 0x50
   3e280:	ldr	ip, [ip]
   3e284:	ldr	lr, [r4, #84]	; 0x54
   3e288:	str	r9, [sp]
   3e28c:	str	r8, [sp, #4]
   3e290:	mov	r5, r2
   3e294:	mov	sl, r3
   3e298:	str	r3, [sp, #20]
   3e29c:	str	r1, [sp, #16]
   3e2a0:	str	lr, [sp, #12]
   3e2a4:	str	ip, [sp, #36]	; 0x24
   3e2a8:	mov	r6, r0
   3e2ac:	bl	3e0b4 <fts_children@@Base+0xc618>
   3e2b0:	ldr	r2, [r8]
   3e2b4:	cmp	r2, #0
   3e2b8:	clz	r3, r0
   3e2bc:	lsr	r3, r3, #5
   3e2c0:	moveq	r3, #0
   3e2c4:	cmp	r3, #0
   3e2c8:	bne	3e3c8 <fts_children@@Base+0xc92c>
   3e2cc:	mov	r7, r0
   3e2d0:	orr	sl, sl, #8388608	; 0x800000
   3e2d4:	b	3e370 <fts_children@@Base+0xc8d4>
   3e2d8:	clz	r0, r9
   3e2dc:	lsr	r0, r0, #5
   3e2e0:	cmp	r3, #9
   3e2e4:	moveq	r3, r0
   3e2e8:	orrne	r3, r0, #1
   3e2ec:	cmp	r3, #0
   3e2f0:	beq	3e348 <fts_children@@Base+0xc8ac>
   3e2f4:	ldr	r2, [sp, #12]
   3e2f8:	ldr	fp, [r4, #84]	; 0x54
   3e2fc:	ldr	r3, [sp, #20]
   3e300:	str	r2, [r4, #84]	; 0x54
   3e304:	ldr	r1, [sp, #16]
   3e308:	mov	r2, r5
   3e30c:	str	r8, [sp, #4]
   3e310:	str	r9, [sp]
   3e314:	mov	r0, r6
   3e318:	bl	3e0b4 <fts_children@@Base+0xc618>
   3e31c:	ldr	r2, [r8]
   3e320:	cmp	r2, #0
   3e324:	clz	r3, r0
   3e328:	lsr	r3, r3, #5
   3e32c:	moveq	r3, #0
   3e330:	cmp	r3, #0
   3e334:	mov	r3, r0
   3e338:	bne	3e3b0 <fts_children@@Base+0xc914>
   3e33c:	ldr	r2, [r4, #84]	; 0x54
   3e340:	orr	fp, r2, fp
   3e344:	str	fp, [r4, #84]	; 0x54
   3e348:	add	r1, sp, #28
   3e34c:	mov	r2, r7
   3e350:	str	r1, [sp]
   3e354:	mov	ip, #10
   3e358:	add	r1, r4, #64	; 0x40
   3e35c:	add	r0, r4, #56	; 0x38
   3e360:	strb	ip, [sp, #32]
   3e364:	bl	34bb0 <fts_children@@Base+0x3114>
   3e368:	subs	r7, r0, #0
   3e36c:	beq	3e3ec <fts_children@@Base+0xc950>
   3e370:	ldrb	r3, [r5, #4]
   3e374:	cmp	r3, #10
   3e378:	bne	3e3cc <fts_children@@Base+0xc930>
   3e37c:	mov	r2, sl
   3e380:	mov	r1, r6
   3e384:	mov	r0, r5
   3e388:	bl	3beb4 <fts_children@@Base+0xa418>
   3e38c:	ldrb	r3, [r5, #4]
   3e390:	ldr	r2, [r6, #40]	; 0x28
   3e394:	and	r1, r3, #247	; 0xf7
   3e398:	cmp	r1, #2
   3e39c:	add	r0, r2, r0
   3e3a0:	str	r0, [r6, #40]	; 0x28
   3e3a4:	bne	3e2d8 <fts_children@@Base+0xc83c>
   3e3a8:	mov	r3, #0
   3e3ac:	b	3e348 <fts_children@@Base+0xc8ac>
   3e3b0:	cmp	r7, #0
   3e3b4:	beq	3e3c8 <fts_children@@Base+0xc92c>
   3e3b8:	mov	r0, r7
   3e3bc:	mov	r2, #0
   3e3c0:	ldr	r1, [pc, #56]	; 3e400 <fts_children@@Base+0xc964>
   3e3c4:	bl	324ec <fts_children@@Base+0xa50>
   3e3c8:	mov	r7, #0
   3e3cc:	ldr	r3, [pc, #40]	; 3e3fc <fts_children@@Base+0xc960>
   3e3d0:	ldr	r2, [sp, #36]	; 0x24
   3e3d4:	mov	r0, r7
   3e3d8:	ldr	r3, [r3]
   3e3dc:	cmp	r2, r3
   3e3e0:	bne	3e3f8 <fts_children@@Base+0xc95c>
   3e3e4:	add	sp, sp, #44	; 0x2c
   3e3e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e3ec:	mov	r3, #12
   3e3f0:	str	r3, [r8]
   3e3f4:	b	3e3cc <fts_children@@Base+0xc930>
   3e3f8:	bl	12244 <__stack_chk_fail@plt>
   3e3fc:	andeq	fp, r5, r0, ror #24
   3e400:	andeq	r3, r3, r0, lsl #13
   3e404:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3e408:	mov	r6, r0
   3e40c:	mov	r9, r3
   3e410:	ldr	r3, [pc, #3340]	; 3f124 <fts_children@@Base+0xd688>
   3e414:	ldrb	r0, [r0, #28]
   3e418:	ldr	ip, [r6, #4]
   3e41c:	sub	sp, sp, #140	; 0x8c
   3e420:	cmp	ip, #159	; 0x9f
   3e424:	ldr	ip, [r3]
   3e428:	bic	r0, r0, #111	; 0x6f
   3e42c:	mov	r3, #0
   3e430:	str	r9, [r6, #12]
   3e434:	mov	r7, r1
   3e438:	mov	r5, r2
   3e43c:	strb	r0, [r6, #28]
   3e440:	str	ip, [sp, #132]	; 0x84
   3e444:	str	r3, [r6, #8]
   3e448:	str	r3, [sp, #24]
   3e44c:	str	r3, [r6, #24]
   3e450:	ldr	r4, [r6]
   3e454:	bls	3ef60 <fts_children@@Base+0xd4c4>
   3e458:	mov	r2, #160	; 0xa0
   3e45c:	str	r2, [r6, #8]
   3e460:	mov	r1, #0
   3e464:	mov	r0, r4
   3e468:	bl	12514 <memset@plt>
   3e46c:	ldr	r2, [pc, #3252]	; 3f128 <fts_children@@Base+0xd68c>
   3e470:	mov	r3, #31
   3e474:	cmp	r5, r2
   3e478:	str	r3, [r4, #64]	; 0x40
   3e47c:	bhi	3e9e4 <fts_children@@Base+0xcf48>
   3e480:	add	sl, r5, #1
   3e484:	str	sl, [r4, #4]
   3e488:	lsl	r0, sl, #3
   3e48c:	bl	123dc <malloc@plt>
   3e490:	cmp	r5, #0
   3e494:	str	r0, [r4]
   3e498:	beq	3ef84 <fts_children@@Base+0xd4e8>
   3e49c:	mov	r1, #1
   3e4a0:	lsl	r1, r1, #1
   3e4a4:	cmp	r5, r1
   3e4a8:	bcs	3e4a0 <fts_children@@Base+0xca04>
   3e4ac:	sub	r8, r1, #1
   3e4b0:	mov	r0, #12
   3e4b4:	bl	12064 <calloc@plt>
   3e4b8:	str	r8, [r4, #68]	; 0x44
   3e4bc:	str	r0, [r4, #32]
   3e4c0:	bl	12334 <__ctype_get_mb_cur_max@plt>
   3e4c4:	str	r0, [r4, #92]	; 0x5c
   3e4c8:	mov	r0, #14
   3e4cc:	bl	12628 <nl_langinfo@plt>
   3e4d0:	ldrb	r3, [r0]
   3e4d4:	and	r3, r3, #223	; 0xdf
   3e4d8:	cmp	r3, #85	; 0x55
   3e4dc:	bne	3e500 <fts_children@@Base+0xca64>
   3e4e0:	ldrb	r3, [r0, #1]
   3e4e4:	and	r3, r3, #223	; 0xdf
   3e4e8:	cmp	r3, #84	; 0x54
   3e4ec:	bne	3e500 <fts_children@@Base+0xca64>
   3e4f0:	ldrb	r3, [r0, #2]
   3e4f4:	and	r3, r3, #223	; 0xdf
   3e4f8:	cmp	r3, #70	; 0x46
   3e4fc:	beq	3ead0 <fts_children@@Base+0xd034>
   3e500:	ldrb	r3, [r4, #88]	; 0x58
   3e504:	ldr	r2, [r4, #92]	; 0x5c
   3e508:	bic	r3, r3, #8
   3e50c:	cmp	r2, #1
   3e510:	strb	r3, [r4, #88]	; 0x58
   3e514:	ble	3e52c <fts_children@@Base+0xca90>
   3e518:	uxtb	fp, r3
   3e51c:	ands	fp, fp, #4
   3e520:	beq	3ea20 <fts_children@@Base+0xcf84>
   3e524:	ldr	r3, [pc, #3072]	; 3f12c <fts_children@@Base+0xd690>
   3e528:	str	r3, [r4, #60]	; 0x3c
   3e52c:	ldr	r3, [r4]
   3e530:	cmp	r3, #0
   3e534:	beq	3e9e4 <fts_children@@Base+0xcf48>
   3e538:	ldr	r3, [r4, #32]
   3e53c:	cmp	r3, #0
   3e540:	beq	3e9e4 <fts_children@@Base+0xcf48>
   3e544:	ldr	r3, [pc, #3044]	; 3f130 <fts_children@@Base+0xd694>
   3e548:	mov	r1, #0
   3e54c:	cmp	r3, r1
   3e550:	str	r1, [sp, #24]
   3e554:	beq	3e574 <fts_children@@Base+0xcad8>
   3e558:	add	r0, r4, #136	; 0x88
   3e55c:	bl	121c0 <pthread_mutex_init@plt>
   3e560:	cmp	r0, #0
   3e564:	bne	3e9e4 <fts_children@@Base+0xcf48>
   3e568:	ldr	r3, [sp, #24]
   3e56c:	cmp	r3, #0
   3e570:	bne	3e9ec <fts_children@@Base+0xcf50>
   3e574:	mov	r2, #76	; 0x4c
   3e578:	mov	r1, #0
   3e57c:	add	r0, sp, #52	; 0x34
   3e580:	ldr	fp, [r6, #20]
   3e584:	bl	12514 <memset@plt>
   3e588:	ldrb	r2, [r4, #88]	; 0x58
   3e58c:	and	r8, r9, #4194304	; 0x400000
   3e590:	orr	r3, fp, r8
   3e594:	adds	ip, r3, #0
   3e598:	lsr	r0, r2, #2
   3e59c:	and	r0, r0, #1
   3e5a0:	movne	ip, #1
   3e5a4:	ldr	r1, [r4, #92]	; 0x5c
   3e5a8:	lsr	r2, r2, #3
   3e5ac:	strb	r0, [sp, #121]	; 0x79
   3e5b0:	adds	r0, r8, #0
   3e5b4:	movne	r0, #1
   3e5b8:	and	r2, r2, #1
   3e5bc:	cmp	r5, #0
   3e5c0:	str	fp, [sp, #112]	; 0x70
   3e5c4:	str	r7, [sp, #48]	; 0x30
   3e5c8:	str	r5, [sp, #96]	; 0x60
   3e5cc:	str	r5, [sp, #92]	; 0x5c
   3e5d0:	str	r5, [sp, #104]	; 0x68
   3e5d4:	str	r5, [sp, #100]	; 0x64
   3e5d8:	strb	ip, [sp, #123]	; 0x7b
   3e5dc:	strb	r2, [sp, #122]	; 0x7a
   3e5e0:	strb	r0, [sp, #120]	; 0x78
   3e5e4:	str	r1, [sp, #128]	; 0x80
   3e5e8:	bne	3e9bc <fts_children@@Base+0xcf20>
   3e5ec:	cmp	ip, #0
   3e5f0:	ldrne	r7, [sp, #52]	; 0x34
   3e5f4:	cmp	r8, #0
   3e5f8:	str	r7, [sp, #52]	; 0x34
   3e5fc:	beq	3e6b4 <fts_children@@Base+0xcc18>
   3e600:	cmp	r1, #1
   3e604:	ble	3ef4c <fts_children@@Base+0xd4b0>
   3e608:	add	r0, sp, #48	; 0x30
   3e60c:	bl	32e90 <fts_children@@Base+0x13f4>
   3e610:	cmp	r0, #0
   3e614:	bne	3e650 <fts_children@@Base+0xcbb4>
   3e618:	ldr	r3, [sp, #80]	; 0x50
   3e61c:	cmp	r5, r3
   3e620:	ble	3efcc <fts_children@@Base+0xd530>
   3e624:	ldr	r3, [sp, #76]	; 0x4c
   3e628:	ldr	r2, [r4, #92]	; 0x5c
   3e62c:	ldr	r1, [sp, #84]	; 0x54
   3e630:	add	r3, r3, r2
   3e634:	cmp	r1, r3
   3e638:	bgt	3efcc <fts_children@@Base+0xd530>
   3e63c:	lsl	r1, r1, #1
   3e640:	add	r0, sp, #48	; 0x30
   3e644:	bl	32960 <fts_children@@Base+0xec4>
   3e648:	cmp	r0, #0
   3e64c:	beq	3e608 <fts_children@@Base+0xcb6c>
   3e650:	ldr	r5, [r6]
   3e654:	str	r0, [sp, #24]
   3e658:	ldr	r0, [r5, #56]	; 0x38
   3e65c:	cmp	r0, #0
   3e660:	beq	3e674 <fts_children@@Base+0xcbd8>
   3e664:	ldr	r7, [r0]
   3e668:	bl	12154 <free@plt>
   3e66c:	subs	r0, r7, #0
   3e670:	bne	3e664 <fts_children@@Base+0xcbc8>
   3e674:	mov	r7, #0
   3e678:	mov	r3, #31
   3e67c:	str	r3, [r5, #64]	; 0x40
   3e680:	ldr	r0, [r5, #16]
   3e684:	str	r7, [r5, #56]	; 0x38
   3e688:	str	r7, [r5, #52]	; 0x34
   3e68c:	bl	12154 <free@plt>
   3e690:	str	r7, [r5, #16]
   3e694:	add	r0, sp, #48	; 0x30
   3e698:	bl	33bdc <fts_children@@Base+0x2140>
   3e69c:	ldr	r3, [pc, #2700]	; 3f130 <fts_children@@Base+0xd694>
   3e6a0:	cmp	r3, r7
   3e6a4:	beq	3e9ec <fts_children@@Base+0xcf50>
   3e6a8:	add	r0, r4, #136	; 0x88
   3e6ac:	bl	12100 <pthread_mutex_destroy@plt>
   3e6b0:	b	3e9ec <fts_children@@Base+0xcf50>
   3e6b4:	cmp	r1, #1
   3e6b8:	bgt	3ee68 <fts_children@@Base+0xd3cc>
   3e6bc:	cmp	r3, #0
   3e6c0:	ldr	r1, [sp, #84]	; 0x54
   3e6c4:	beq	3eb00 <fts_children@@Base+0xd064>
   3e6c8:	ldr	r2, [sp, #96]	; 0x60
   3e6cc:	ldr	r3, [sp, #76]	; 0x4c
   3e6d0:	cmp	r1, r2
   3e6d4:	movge	r1, r2
   3e6d8:	cmp	r1, r3
   3e6dc:	bgt	3e6e8 <fts_children@@Base+0xcc4c>
   3e6e0:	b	3f0b4 <fts_children@@Base+0xd618>
   3e6e4:	ldr	r7, [sp, #52]	; 0x34
   3e6e8:	ldr	r2, [sp, #48]	; 0x30
   3e6ec:	ldr	ip, [sp, #72]	; 0x48
   3e6f0:	add	r2, r2, r3
   3e6f4:	ldr	r0, [sp, #112]	; 0x70
   3e6f8:	ldrb	r2, [r2, ip]
   3e6fc:	ldrb	r2, [r0, r2]
   3e700:	strb	r2, [r7, r3]
   3e704:	add	r3, r3, #1
   3e708:	cmp	r1, r3
   3e70c:	bne	3e6e4 <fts_children@@Base+0xcc48>
   3e710:	mov	r3, #0
   3e714:	str	r1, [sp, #76]	; 0x4c
   3e718:	str	r1, [sp, #80]	; 0x50
   3e71c:	str	r3, [sp, #24]
   3e720:	ldr	r5, [r6]
   3e724:	mov	r7, #0
   3e728:	orr	r2, r9, #8388608	; 0x800000
   3e72c:	str	r7, [r6, #24]
   3e730:	add	r1, sp, #48	; 0x30
   3e734:	str	r9, [r5, #128]	; 0x80
   3e738:	add	r0, sp, #28
   3e73c:	bl	3beb4 <fts_children@@Base+0xa418>
   3e740:	ldr	ip, [sp, #88]	; 0x58
   3e744:	add	r2, sp, #24
   3e748:	mov	r3, r9
   3e74c:	str	r2, [sp, #4]
   3e750:	str	r7, [sp]
   3e754:	add	r2, sp, #28
   3e758:	mov	r1, r6
   3e75c:	add	ip, ip, r0
   3e760:	add	r0, sp, #48	; 0x30
   3e764:	str	ip, [sp, #88]	; 0x58
   3e768:	bl	3e268 <fts_children@@Base+0xc7cc>
   3e76c:	ldr	r3, [sp, #24]
   3e770:	cmp	r3, r7
   3e774:	mov	r9, r0
   3e778:	bne	3ef90 <fts_children@@Base+0xd4f4>
   3e77c:	add	fp, r5, #56	; 0x38
   3e780:	add	sl, sp, #36	; 0x24
   3e784:	add	r5, r5, #64	; 0x40
   3e788:	mov	ip, #2
   3e78c:	mov	r2, r3
   3e790:	mov	r1, r5
   3e794:	mov	r0, fp
   3e798:	str	sl, [sp]
   3e79c:	strb	ip, [sp, #40]	; 0x28
   3e7a0:	bl	34bb0 <fts_children@@Base+0x3114>
   3e7a4:	cmp	r9, #0
   3e7a8:	mov	r7, r0
   3e7ac:	moveq	r3, r0
   3e7b0:	beq	3e7dc <fts_children@@Base+0xcd40>
   3e7b4:	mov	r3, r7
   3e7b8:	mov	ip, #16
   3e7bc:	str	sl, [sp]
   3e7c0:	mov	r2, r9
   3e7c4:	mov	r1, r5
   3e7c8:	mov	r0, fp
   3e7cc:	strb	ip, [sp, #40]	; 0x28
   3e7d0:	bl	34bb0 <fts_children@@Base+0x3114>
   3e7d4:	mov	r3, r7
   3e7d8:	mov	r7, r0
   3e7dc:	cmp	r3, #0
   3e7e0:	clz	r9, r7
   3e7e4:	lsr	r9, r9, #5
   3e7e8:	moveq	r9, #1
   3e7ec:	cmp	r9, #0
   3e7f0:	movne	r2, #12
   3e7f4:	movne	r3, #0
   3e7f8:	ldr	r5, [r6]
   3e7fc:	strne	r2, [sp, #24]
   3e800:	strne	r3, [r4, #52]	; 0x34
   3e804:	bne	3e658 <fts_children@@Base+0xcbbc>
   3e808:	ldr	r2, [r5, #4]
   3e80c:	str	r7, [r4, #52]	; 0x34
   3e810:	str	r2, [sp, #12]
   3e814:	lsl	r7, r2, #2
   3e818:	mov	r0, r7
   3e81c:	bl	123dc <malloc@plt>
   3e820:	mov	fp, r0
   3e824:	str	r0, [r5, #12]
   3e828:	mov	r0, r7
   3e82c:	bl	123dc <malloc@plt>
   3e830:	ldr	r2, [sp, #12]
   3e834:	add	r2, r2, r2, lsl #1
   3e838:	lsl	r7, r2, #2
   3e83c:	str	r0, [r5, #16]
   3e840:	str	r0, [sp, #16]
   3e844:	mov	r0, r7
   3e848:	bl	123dc <malloc@plt>
   3e84c:	str	r0, [r5, #20]
   3e850:	str	r0, [sp, #12]
   3e854:	mov	r0, r7
   3e858:	bl	123dc <malloc@plt>
   3e85c:	cmp	fp, #0
   3e860:	ldrd	r2, [sp, #12]
   3e864:	str	r0, [r5, #24]
   3e868:	beq	3ee5c <fts_children@@Base+0xd3c0>
   3e86c:	cmp	r3, #0
   3e870:	beq	3ee5c <fts_children@@Base+0xd3c0>
   3e874:	cmp	r2, #0
   3e878:	beq	3ee5c <fts_children@@Base+0xd3c0>
   3e87c:	cmp	r0, #0
   3e880:	beq	3ee5c <fts_children@@Base+0xd3c0>
   3e884:	ldr	r7, [r6, #24]
   3e888:	lsl	r0, r7, #2
   3e88c:	bl	123dc <malloc@plt>
   3e890:	cmp	r0, #0
   3e894:	str	r0, [r5, #132]	; 0x84
   3e898:	beq	3e910 <fts_children@@Base+0xce74>
   3e89c:	cmp	r7, #0
   3e8a0:	subne	r0, r0, #4
   3e8a4:	beq	3e8b8 <fts_children@@Base+0xce1c>
   3e8a8:	str	r9, [r0, #4]!
   3e8ac:	add	r9, r9, #1
   3e8b0:	cmp	r9, r7
   3e8b4:	bne	3e8a8 <fts_children@@Base+0xce0c>
   3e8b8:	mov	r2, r5
   3e8bc:	ldr	r1, [pc, #2160]	; 3f134 <fts_children@@Base+0xd698>
   3e8c0:	ldr	r0, [r5, #52]	; 0x34
   3e8c4:	bl	34448 <fts_children@@Base+0x29ac>
   3e8c8:	ldr	ip, [r6, #24]
   3e8cc:	cmp	ip, #0
   3e8d0:	beq	3f0bc <fts_children@@Base+0xd620>
   3e8d4:	ldr	r0, [r5, #132]	; 0x84
   3e8d8:	ldr	r3, [r0]
   3e8dc:	cmp	r3, #0
   3e8e0:	bne	3e910 <fts_children@@Base+0xce74>
   3e8e4:	mov	r2, r0
   3e8e8:	b	3e8f8 <fts_children@@Base+0xce5c>
   3e8ec:	ldr	r1, [r2, #4]!
   3e8f0:	cmp	r1, r3
   3e8f4:	bne	3e910 <fts_children@@Base+0xce74>
   3e8f8:	add	r3, r3, #1
   3e8fc:	cmp	r3, ip
   3e900:	bne	3e8ec <fts_children@@Base+0xce50>
   3e904:	bl	12154 <free@plt>
   3e908:	mov	r3, #0
   3e90c:	str	r3, [r5, #132]	; 0x84
   3e910:	mov	r2, r6
   3e914:	ldr	r1, [pc, #2076]	; 3f138 <fts_children@@Base+0xd69c>
   3e918:	ldr	r0, [r5, #52]	; 0x34
   3e91c:	bl	324ec <fts_children@@Base+0xa50>
   3e920:	cmp	r0, #0
   3e924:	bne	3e650 <fts_children@@Base+0xcbb4>
   3e928:	mov	r2, r5
   3e92c:	ldr	r1, [pc, #2056]	; 3f13c <fts_children@@Base+0xd6a0>
   3e930:	ldr	r0, [r5, #52]	; 0x34
   3e934:	bl	324ec <fts_children@@Base+0xa50>
   3e938:	cmp	r0, #0
   3e93c:	bne	3e650 <fts_children@@Base+0xcbb4>
   3e940:	mov	r2, r5
   3e944:	ldr	r1, [pc, #2036]	; 3f140 <fts_children@@Base+0xd6a4>
   3e948:	ldr	r0, [r5, #52]	; 0x34
   3e94c:	bl	34448 <fts_children@@Base+0x29ac>
   3e950:	mov	r2, r5
   3e954:	ldr	r1, [pc, #2024]	; 3f144 <fts_children@@Base+0xd6a8>
   3e958:	ldr	r0, [r5, #52]	; 0x34
   3e95c:	bl	34448 <fts_children@@Base+0x29ac>
   3e960:	subs	r3, r0, #0
   3e964:	str	r3, [sp, #12]
   3e968:	bne	3f098 <fts_children@@Base+0xd5fc>
   3e96c:	ldr	r1, [r5, #8]
   3e970:	mov	fp, r3
   3e974:	mov	r7, r3
   3e978:	cmp	r1, r7
   3e97c:	beq	3e9a8 <fts_children@@Base+0xcf0c>
   3e980:	add	r9, r7, r7, lsl #1
   3e984:	ldr	r3, [r5, #24]
   3e988:	lsl	r9, r9, #2
   3e98c:	add	r3, r3, r9
   3e990:	ldr	r3, [r3, #4]
   3e994:	cmp	r3, #0
   3e998:	beq	3eb10 <fts_children@@Base+0xd074>
   3e99c:	add	r7, r7, #1
   3e9a0:	cmp	r1, r7
   3e9a4:	bne	3e980 <fts_children@@Base+0xcee4>
   3e9a8:	cmp	fp, #0
   3e9ac:	beq	3eb64 <fts_children@@Base+0xd0c8>
   3e9b0:	mov	fp, #0
   3e9b4:	mov	r7, fp
   3e9b8:	b	3e980 <fts_children@@Base+0xcee4>
   3e9bc:	mov	r1, sl
   3e9c0:	add	r0, sp, #48	; 0x30
   3e9c4:	str	r3, [sp, #12]
   3e9c8:	bl	32960 <fts_children@@Base+0xec4>
   3e9cc:	cmp	r0, #0
   3e9d0:	bne	3e650 <fts_children@@Base+0xcbb4>
   3e9d4:	ldrb	ip, [sp, #123]	; 0x7b
   3e9d8:	ldr	r1, [r4, #92]	; 0x5c
   3e9dc:	ldr	r3, [sp, #12]
   3e9e0:	b	3e5ec <fts_children@@Base+0xcb50>
   3e9e4:	mov	r3, #12
   3e9e8:	str	r3, [sp, #24]
   3e9ec:	mov	r0, r4
   3e9f0:	bl	374ec <fts_children@@Base+0x5a50>
   3e9f4:	ldr	r0, [sp, #24]
   3e9f8:	mov	r3, #0
   3e9fc:	str	r3, [r6]
   3ea00:	str	r3, [r6, #4]
   3ea04:	ldr	r3, [pc, #1816]	; 3f124 <fts_children@@Base+0xd688>
   3ea08:	ldr	r2, [sp, #132]	; 0x84
   3ea0c:	ldr	r3, [r3]
   3ea10:	cmp	r2, r3
   3ea14:	bne	3f11c <fts_children@@Base+0xd680>
   3ea18:	add	sp, sp, #140	; 0x8c
   3ea1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ea20:	mov	r1, #1
   3ea24:	mov	r0, #32
   3ea28:	bl	12064 <calloc@plt>
   3ea2c:	cmp	r0, #0
   3ea30:	str	r0, [r4, #60]	; 0x3c
   3ea34:	beq	3e9e4 <fts_children@@Base+0xcf48>
   3ea38:	str	r5, [sp, #12]
   3ea3c:	mov	r5, r4
   3ea40:	lsl	r8, fp, #3
   3ea44:	mov	r4, #0
   3ea48:	b	3ea70 <fts_children@@Base+0xcfd4>
   3ea4c:	cmp	r3, #0
   3ea50:	bne	3ea60 <fts_children@@Base+0xcfc4>
   3ea54:	ldrb	r3, [r5, #88]	; 0x58
   3ea58:	orr	r3, r3, #8
   3ea5c:	strb	r3, [r5, #88]	; 0x58
   3ea60:	add	r4, r4, #1
   3ea64:	cmp	r4, #32
   3ea68:	add	r8, r8, #1
   3ea6c:	beq	3eab8 <fts_children@@Base+0xd01c>
   3ea70:	mov	r0, r8
   3ea74:	bl	12544 <btowc@plt>
   3ea78:	bic	r3, r8, #127	; 0x7f
   3ea7c:	cmn	r0, #1
   3ea80:	beq	3ea4c <fts_children@@Base+0xcfb0>
   3ea84:	ldr	r1, [r5, #60]	; 0x3c
   3ea88:	cmp	r3, #0
   3ea8c:	mov	r2, #1
   3ea90:	ldr	r3, [r1, fp]
   3ea94:	orr	r3, r3, r2, lsl r4
   3ea98:	str	r3, [r1, fp]
   3ea9c:	bne	3ea60 <fts_children@@Base+0xcfc4>
   3eaa0:	cmp	r0, r8
   3eaa4:	bne	3ea54 <fts_children@@Base+0xcfb8>
   3eaa8:	add	r4, r4, #1
   3eaac:	cmp	r4, #32
   3eab0:	add	r8, r8, #1
   3eab4:	bne	3ea70 <fts_children@@Base+0xcfd4>
   3eab8:	add	fp, fp, #4
   3eabc:	cmp	fp, #32
   3eac0:	bne	3ea40 <fts_children@@Base+0xcfa4>
   3eac4:	mov	r4, r5
   3eac8:	ldr	r5, [sp, #12]
   3eacc:	b	3e52c <fts_children@@Base+0xca90>
   3ead0:	ldrb	r3, [r0, #3]
   3ead4:	ldr	r1, [pc, #1644]	; 3f148 <fts_children@@Base+0xd6ac>
   3ead8:	cmp	r3, #45	; 0x2d
   3eadc:	moveq	r3, #4
   3eae0:	movne	r3, #3
   3eae4:	add	r0, r0, r3
   3eae8:	bl	120dc <strcmp@plt>
   3eaec:	cmp	r0, #0
   3eaf0:	ldrbeq	r3, [r4, #88]	; 0x58
   3eaf4:	orreq	r3, r3, #4
   3eaf8:	strbeq	r3, [r4, #88]	; 0x58
   3eafc:	b	3e500 <fts_children@@Base+0xca64>
   3eb00:	str	r1, [sp, #76]	; 0x4c
   3eb04:	str	r1, [sp, #80]	; 0x50
   3eb08:	str	r8, [sp, #24]
   3eb0c:	b	3e720 <fts_children@@Base+0xcc84>
   3eb10:	mov	r3, #1
   3eb14:	mov	r2, r7
   3eb18:	mov	r1, r5
   3eb1c:	mov	r0, sl
   3eb20:	bl	34644 <fts_children@@Base+0x2ba8>
   3eb24:	cmp	r0, #0
   3eb28:	bne	3e650 <fts_children@@Base+0xcbb4>
   3eb2c:	ldr	r3, [r5, #24]
   3eb30:	add	r7, r7, #1
   3eb34:	add	r9, r3, r9
   3eb38:	ldr	r9, [r9, #4]
   3eb3c:	cmp	r9, #0
   3eb40:	ldrne	r1, [r5, #8]
   3eb44:	bne	3e978 <fts_children@@Base+0xcedc>
   3eb48:	ldr	r0, [sp, #44]	; 0x2c
   3eb4c:	bl	12154 <free@plt>
   3eb50:	ldr	r1, [r5, #8]
   3eb54:	cmp	r1, r7
   3eb58:	beq	3e9b0 <fts_children@@Base+0xcf14>
   3eb5c:	mov	fp, #1
   3eb60:	b	3e980 <fts_children@@Base+0xcee4>
   3eb64:	ldrb	r3, [r6, #28]
   3eb68:	tst	r3, #16
   3eb6c:	bne	3eb88 <fts_children@@Base+0xd0ec>
   3eb70:	ldr	r3, [r6, #24]
   3eb74:	cmp	r3, #0
   3eb78:	beq	3eb88 <fts_children@@Base+0xd0ec>
   3eb7c:	ldrb	r3, [r5, #88]	; 0x58
   3eb80:	tst	r3, #1
   3eb84:	bne	3eb94 <fts_children@@Base+0xd0f8>
   3eb88:	ldr	r3, [r5, #76]	; 0x4c
   3eb8c:	cmp	r3, #0
   3eb90:	beq	3ec88 <fts_children@@Base+0xd1ec>
   3eb94:	add	r0, r7, r7, lsl #1
   3eb98:	lsl	r0, r0, #2
   3eb9c:	bl	123dc <malloc@plt>
   3eba0:	cmp	r0, #0
   3eba4:	str	r0, [r5, #28]
   3eba8:	beq	3f0c4 <fts_children@@Base+0xd628>
   3ebac:	cmp	r7, #0
   3ebb0:	movne	r3, #0
   3ebb4:	movne	r2, r3
   3ebb8:	bne	3ebc4 <fts_children@@Base+0xd128>
   3ebbc:	b	3ec88 <fts_children@@Base+0xd1ec>
   3ebc0:	ldr	r0, [r5, #28]
   3ebc4:	add	ip, r3, r3, lsl #1
   3ebc8:	add	r3, r3, #1
   3ebcc:	add	r1, r0, ip, lsl #2
   3ebd0:	str	r2, [r0, ip, lsl #2]
   3ebd4:	str	r2, [r1, #4]
   3ebd8:	str	r2, [r1, #8]
   3ebdc:	ldr	r1, [r5, #8]
   3ebe0:	cmp	r1, r3
   3ebe4:	bhi	3ebc0 <fts_children@@Base+0xd124>
   3ebe8:	cmp	r1, #0
   3ebec:	beq	3ec88 <fts_children@@Base+0xd1ec>
   3ebf0:	mov	r3, #0
   3ebf4:	ldr	r0, [r5, #24]
   3ebf8:	str	r8, [sp, #16]
   3ebfc:	mov	r9, r3
   3ec00:	mov	r8, r5
   3ec04:	mov	r5, r3
   3ec08:	str	sl, [sp, #20]
   3ec0c:	add	r3, r0, r9
   3ec10:	ldr	ip, [r3, #4]
   3ec14:	ldr	r3, [r3, #8]
   3ec18:	cmp	ip, #0
   3ec1c:	subgt	sl, r3, #4
   3ec20:	movgt	r7, #0
   3ec24:	bgt	3ec44 <fts_children@@Base+0xd1a8>
   3ec28:	b	3ec70 <fts_children@@Base+0xd1d4>
   3ec2c:	ldr	r0, [r8, #24]
   3ec30:	add	r7, r7, #1
   3ec34:	add	r3, r0, r9
   3ec38:	ldr	r3, [r3, #4]
   3ec3c:	cmp	r7, r3
   3ec40:	bge	3ec6c <fts_children@@Base+0xd1d0>
   3ec44:	ldr	r3, [sl, #4]!
   3ec48:	ldr	r0, [r8, #28]
   3ec4c:	mov	r1, r5
   3ec50:	add	r3, r3, r3, lsl #1
   3ec54:	add	r0, r0, r3, lsl #2
   3ec58:	bl	329f4 <fts_children@@Base+0xf58>
   3ec5c:	cmp	r0, #0
   3ec60:	bne	3ec2c <fts_children@@Base+0xd190>
   3ec64:	mov	r0, #12
   3ec68:	b	3e650 <fts_children@@Base+0xcbb4>
   3ec6c:	ldr	r1, [r8, #8]
   3ec70:	add	r5, r5, #1
   3ec74:	cmp	r1, r5
   3ec78:	add	r9, r9, #12
   3ec7c:	bhi	3ec0c <fts_children@@Base+0xd170>
   3ec80:	ldr	r8, [sp, #16]
   3ec84:	ldr	sl, [sp, #20]
   3ec88:	ldrb	r3, [r4, #88]	; 0x58
   3ec8c:	clz	r8, r8
   3ec90:	lsr	r8, r8, #5
   3ec94:	mov	r2, #0
   3ec98:	ands	r8, r8, r3, lsr #2
   3ec9c:	str	r2, [sp, #24]
   3eca0:	bne	3ee78 <fts_children@@Base+0xd3dc>
   3eca4:	ldr	r3, [r4, #52]	; 0x34
   3eca8:	ldr	r1, [r4, #24]
   3ecac:	mov	r0, sl
   3ecb0:	ldr	r3, [r3, #12]
   3ecb4:	ldr	r3, [r3, #28]
   3ecb8:	str	r3, [r4, #72]	; 0x48
   3ecbc:	add	r3, r3, r3, lsl #1
   3ecc0:	add	r1, r1, r3, lsl #2
   3ecc4:	bl	35048 <fts_children@@Base+0x35ac>
   3ecc8:	cmp	r0, #0
   3eccc:	mov	r7, r0
   3ecd0:	str	r0, [sp, #28]
   3ecd4:	bne	3edf4 <fts_children@@Base+0xd358>
   3ecd8:	ldr	r3, [r4, #76]	; 0x4c
   3ecdc:	cmp	r3, #0
   3ece0:	ble	3edb4 <fts_children@@Base+0xd318>
   3ece4:	ldr	r8, [sp, #40]	; 0x28
   3ece8:	cmp	r8, #0
   3ecec:	ble	3edb4 <fts_children@@Base+0xd318>
   3ecf0:	mov	r5, r0
   3ecf4:	b	3ed04 <fts_children@@Base+0xd268>
   3ecf8:	add	r5, r5, #1
   3ecfc:	cmp	r8, r5
   3ed00:	ble	3edb4 <fts_children@@Base+0xd318>
   3ed04:	ldr	r2, [sp, #44]	; 0x2c
   3ed08:	ldr	r0, [r4]
   3ed0c:	ldr	r3, [r2, r5, lsl #2]
   3ed10:	add	ip, r0, r3, lsl #3
   3ed14:	ldrb	r1, [ip, #4]
   3ed18:	cmp	r1, #4
   3ed1c:	bne	3ecf8 <fts_children@@Base+0xd25c>
   3ed20:	sub	r2, r2, #4
   3ed24:	mov	r1, #0
   3ed28:	b	3ed38 <fts_children@@Base+0xd29c>
   3ed2c:	add	r1, r1, #1
   3ed30:	cmp	r8, r1
   3ed34:	beq	3ecf8 <fts_children@@Base+0xd25c>
   3ed38:	ldr	lr, [r2, #4]!
   3ed3c:	add	r9, r0, lr, lsl #3
   3ed40:	ldrb	r9, [r9, #4]
   3ed44:	cmp	r9, #9
   3ed48:	bne	3ed2c <fts_children@@Base+0xd290>
   3ed4c:	ldr	r9, [r0, lr, lsl #3]
   3ed50:	ldr	lr, [ip]
   3ed54:	cmp	r9, lr
   3ed58:	bne	3ed2c <fts_children@@Base+0xd290>
   3ed5c:	ldr	r2, [r4, #20]
   3ed60:	add	r3, r3, r3, lsl #1
   3ed64:	add	r1, sp, #44	; 0x2c
   3ed68:	add	r3, r2, r3, lsl #2
   3ed6c:	mov	r0, r8
   3ed70:	ldr	r3, [r3, #8]
   3ed74:	ldr	r9, [r3]
   3ed78:	mov	r2, r9
   3ed7c:	bl	33f6c <fts_children@@Base+0x24d0>
   3ed80:	cmp	r0, #0
   3ed84:	bne	3ecf8 <fts_children@@Base+0xd25c>
   3ed88:	ldr	r1, [r4, #24]
   3ed8c:	add	r9, r9, r9, lsl #1
   3ed90:	mov	r0, sl
   3ed94:	add	r1, r1, r9, lsl #2
   3ed98:	bl	344b8 <fts_children@@Base+0x2a1c>
   3ed9c:	cmp	r0, #0
   3eda0:	bne	3f0a0 <fts_children@@Base+0xd604>
   3eda4:	ldr	r8, [sp, #40]	; 0x28
   3eda8:	mov	r5, #1
   3edac:	cmp	r8, r5
   3edb0:	bgt	3ed04 <fts_children@@Base+0xd268>
   3edb4:	mov	r3, #0
   3edb8:	mov	r2, sl
   3edbc:	mov	r1, r4
   3edc0:	add	r0, sp, #28
   3edc4:	bl	351fc <fts_children@@Base+0x3760>
   3edc8:	cmp	r0, #0
   3edcc:	str	r0, [r4, #36]	; 0x24
   3edd0:	beq	3ef44 <fts_children@@Base+0xd4a8>
   3edd4:	ldrsb	r3, [r0, #52]	; 0x34
   3edd8:	cmp	r3, #0
   3eddc:	strge	r0, [r4, #48]	; 0x30
   3ede0:	strge	r0, [r4, #44]	; 0x2c
   3ede4:	strge	r0, [r4, #40]	; 0x28
   3ede8:	blt	3eee0 <fts_children@@Base+0xd444>
   3edec:	ldr	r0, [sp, #44]	; 0x2c
   3edf0:	bl	12154 <free@plt>
   3edf4:	ldr	r5, [r6]
   3edf8:	str	r7, [sp, #24]
   3edfc:	ldr	r0, [r5, #56]	; 0x38
   3ee00:	cmp	r0, #0
   3ee04:	beq	3ee18 <fts_children@@Base+0xd37c>
   3ee08:	ldr	r7, [r0]
   3ee0c:	bl	12154 <free@plt>
   3ee10:	subs	r0, r7, #0
   3ee14:	bne	3ee08 <fts_children@@Base+0xd36c>
   3ee18:	mov	r7, #0
   3ee1c:	mov	r3, #31
   3ee20:	str	r3, [r5, #64]	; 0x40
   3ee24:	ldr	r0, [r5, #16]
   3ee28:	str	r7, [r5, #56]	; 0x38
   3ee2c:	str	r7, [r5, #52]	; 0x34
   3ee30:	bl	12154 <free@plt>
   3ee34:	add	r0, sp, #48	; 0x30
   3ee38:	str	r7, [r5, #16]
   3ee3c:	bl	33bdc <fts_children@@Base+0x2140>
   3ee40:	ldr	r0, [sp, #24]
   3ee44:	cmp	r0, r7
   3ee48:	beq	3ea04 <fts_children@@Base+0xcf68>
   3ee4c:	ldr	r3, [pc, #732]	; 3f130 <fts_children@@Base+0xd694>
   3ee50:	cmp	r3, #0
   3ee54:	bne	3e6a8 <fts_children@@Base+0xcc0c>
   3ee58:	b	3e9ec <fts_children@@Base+0xcf50>
   3ee5c:	mov	r3, #12
   3ee60:	str	r3, [sp, #24]
   3ee64:	b	3e658 <fts_children@@Base+0xcbbc>
   3ee68:	add	r0, sp, #48	; 0x30
   3ee6c:	bl	32cdc <fts_children@@Base+0x1240>
   3ee70:	str	r8, [sp, #24]
   3ee74:	b	3e720 <fts_children@@Base+0xcc84>
   3ee78:	ldr	r5, [r6, #20]
   3ee7c:	cmp	r5, #0
   3ee80:	bne	3eca4 <fts_children@@Base+0xd208>
   3ee84:	ldr	r1, [r4, #8]
   3ee88:	cmp	r1, #0
   3ee8c:	beq	3f0e8 <fts_children@@Base+0xd64c>
   3ee90:	ldr	lr, [r4]
   3ee94:	ldr	r0, [sp, #12]
   3ee98:	mov	r3, lr
   3ee9c:	ldrb	r2, [r3, #4]
   3eea0:	sub	r2, r2, #1
   3eea4:	cmp	r2, #11
   3eea8:	ldrls	pc, [pc, r2, lsl #2]
   3eeac:	b	3f120 <fts_children@@Base+0xd684>
   3eeb0:	andeq	pc, r3, r0, asr #32
   3eeb4:	ldrdeq	lr, [r3], -ip
   3eeb8:	andeq	pc, r3, r4, ror r0	; <UNPREDICTABLE>
   3eebc:	ldrdeq	lr, [r3], -ip
   3eec0:	ldrdeq	lr, [r3], -r8
   3eec4:	andeq	lr, r3, r4, lsr #25
   3eec8:	andeq	pc, r3, r0, lsr #2
   3eecc:	ldrdeq	lr, [r3], -ip
   3eed0:	ldrdeq	lr, [r3], -ip
   3eed4:	ldrdeq	lr, [r3], -ip
   3eed8:	ldrdeq	lr, [r3], -ip
   3eedc:	andeq	pc, r3, r0, asr r0	; <UNPREDICTABLE>
   3eee0:	mov	r3, #1
   3eee4:	mov	r2, sl
   3eee8:	mov	r1, r4
   3eeec:	add	r0, sp, #28
   3eef0:	bl	351fc <fts_children@@Base+0x3760>
   3eef4:	mov	r3, #2
   3eef8:	mov	r2, sl
   3eefc:	mov	r1, r4
   3ef00:	str	r0, [r4, #40]	; 0x28
   3ef04:	add	r0, sp, #28
   3ef08:	bl	351fc <fts_children@@Base+0x3760>
   3ef0c:	mov	r3, #6
   3ef10:	mov	r2, sl
   3ef14:	mov	r1, r4
   3ef18:	str	r0, [r4, #44]	; 0x2c
   3ef1c:	add	r0, sp, #28
   3ef20:	bl	351fc <fts_children@@Base+0x3760>
   3ef24:	ldr	r3, [r4, #40]	; 0x28
   3ef28:	cmp	r3, #0
   3ef2c:	str	r0, [r4, #48]	; 0x30
   3ef30:	beq	3ef44 <fts_children@@Base+0xd4a8>
   3ef34:	ldr	r3, [r4, #44]	; 0x2c
   3ef38:	cmp	r0, #0
   3ef3c:	cmpne	r3, #0
   3ef40:	bne	3edec <fts_children@@Base+0xd350>
   3ef44:	ldr	r7, [sp, #28]
   3ef48:	b	3edf4 <fts_children@@Base+0xd358>
   3ef4c:	add	r0, sp, #48	; 0x30
   3ef50:	bl	32c68 <fts_children@@Base+0x11cc>
   3ef54:	mov	r3, #0
   3ef58:	str	r3, [sp, #24]
   3ef5c:	b	3e720 <fts_children@@Base+0xcc84>
   3ef60:	mov	r0, r4
   3ef64:	mov	r1, #160	; 0xa0
   3ef68:	bl	12268 <realloc@plt>
   3ef6c:	subs	r4, r0, #0
   3ef70:	beq	3f0d4 <fts_children@@Base+0xd638>
   3ef74:	mov	r3, #160	; 0xa0
   3ef78:	str	r4, [r6]
   3ef7c:	str	r3, [r6, #4]
   3ef80:	b	3e458 <fts_children@@Base+0xc9bc>
   3ef84:	mov	r8, r5
   3ef88:	mov	r1, #1
   3ef8c:	b	3e4b0 <fts_children@@Base+0xca14>
   3ef90:	cmp	r0, r7
   3ef94:	beq	3f0dc <fts_children@@Base+0xd640>
   3ef98:	add	fp, r5, #56	; 0x38
   3ef9c:	add	sl, sp, #36	; 0x24
   3efa0:	add	r5, r5, #64	; 0x40
   3efa4:	mov	ip, #2
   3efa8:	mov	r3, r7
   3efac:	mov	r2, r7
   3efb0:	mov	r1, r5
   3efb4:	mov	r0, fp
   3efb8:	str	sl, [sp]
   3efbc:	strb	ip, [sp, #40]	; 0x28
   3efc0:	bl	34bb0 <fts_children@@Base+0x3114>
   3efc4:	mov	r7, r0
   3efc8:	b	3e7b4 <fts_children@@Base+0xcd18>
   3efcc:	mov	r3, #0
   3efd0:	str	r3, [sp, #24]
   3efd4:	b	3e720 <fts_children@@Base+0xcc84>
   3efd8:	mov	r5, r8
   3efdc:	add	r0, r0, #1
   3efe0:	cmp	r0, r1
   3efe4:	add	r3, r3, #8
   3efe8:	bne	3ee9c <fts_children@@Base+0xd400>
   3efec:	orr	fp, fp, r5
   3eff0:	ands	fp, fp, #255	; 0xff
   3eff4:	moveq	r5, fp
   3eff8:	beq	3f0ec <fts_children@@Base+0xd650>
   3effc:	add	r2, lr, r0, lsl #3
   3f000:	mov	r1, #7
   3f004:	b	3f01c <fts_children@@Base+0xd580>
   3f008:	cmp	r3, #5
   3f00c:	strbeq	r1, [lr, #4]
   3f010:	add	lr, lr, #8
   3f014:	cmp	r2, lr
   3f018:	beq	3f0ec <fts_children@@Base+0xd650>
   3f01c:	ldrb	r3, [lr, #4]
   3f020:	cmp	r3, #1
   3f024:	bne	3f008 <fts_children@@Base+0xd56c>
   3f028:	ldrsb	r3, [lr]
   3f02c:	cmp	r3, #0
   3f030:	ldrblt	r3, [lr, #6]
   3f034:	biclt	r3, r3, #32
   3f038:	strblt	r3, [lr, #6]
   3f03c:	b	3f010 <fts_children@@Base+0xd574>
   3f040:	ldrsb	r2, [r3]
   3f044:	cmp	r2, #0
   3f048:	movlt	fp, r8
   3f04c:	b	3efdc <fts_children@@Base+0xd540>
   3f050:	ldr	r2, [r3]
   3f054:	cmp	r2, #32
   3f058:	beq	3efdc <fts_children@@Base+0xd540>
   3f05c:	bls	3f0a8 <fts_children@@Base+0xd60c>
   3f060:	cmp	r2, #64	; 0x40
   3f064:	beq	3efdc <fts_children@@Base+0xd540>
   3f068:	cmp	r2, #128	; 0x80
   3f06c:	beq	3efdc <fts_children@@Base+0xd540>
   3f070:	b	3eca4 <fts_children@@Base+0xd208>
   3f074:	ldr	ip, [r3]
   3f078:	add	r2, ip, #12
   3f07c:	add	ip, ip, #28
   3f080:	ldr	r7, [r2, #4]!
   3f084:	cmp	r7, #0
   3f088:	bne	3eca4 <fts_children@@Base+0xd208>
   3f08c:	cmp	ip, r2
   3f090:	bne	3f080 <fts_children@@Base+0xd5e4>
   3f094:	b	3efdc <fts_children@@Base+0xd540>
   3f098:	ldr	r0, [sp, #12]
   3f09c:	b	3e650 <fts_children@@Base+0xcbb4>
   3f0a0:	mov	r7, r0
   3f0a4:	b	3edf4 <fts_children@@Base+0xd358>
   3f0a8:	cmp	r2, #16
   3f0ac:	beq	3efdc <fts_children@@Base+0xd540>
   3f0b0:	b	3eca4 <fts_children@@Base+0xd208>
   3f0b4:	mov	r1, r3
   3f0b8:	b	3e710 <fts_children@@Base+0xcc74>
   3f0bc:	ldr	r0, [r5, #132]	; 0x84
   3f0c0:	b	3e904 <fts_children@@Base+0xce68>
   3f0c4:	mov	r3, #12
   3f0c8:	str	r3, [sp, #24]
   3f0cc:	ldr	r5, [r6]
   3f0d0:	b	3e658 <fts_children@@Base+0xcbbc>
   3f0d4:	mov	r0, #12
   3f0d8:	b	3ea04 <fts_children@@Base+0xcf68>
   3f0dc:	str	r0, [r4, #52]	; 0x34
   3f0e0:	ldr	r5, [r6]
   3f0e4:	b	3e658 <fts_children@@Base+0xcbbc>
   3f0e8:	mov	r5, r1
   3f0ec:	ldr	r3, [r4, #76]	; 0x4c
   3f0f0:	ldrb	r2, [r4, #88]	; 0x58
   3f0f4:	cmp	r3, #0
   3f0f8:	movle	r3, r5
   3f0fc:	orrgt	r3, r5, #1
   3f100:	and	r3, r3, #1
   3f104:	and	r2, r2, #249	; 0xf9
   3f108:	orr	r3, r2, r3, lsl #1
   3f10c:	mov	r2, #1
   3f110:	strb	r3, [r4, #88]	; 0x58
   3f114:	str	r2, [r4, #92]	; 0x5c
   3f118:	b	3eca4 <fts_children@@Base+0xd208>
   3f11c:	bl	12244 <__stack_chk_fail@plt>
   3f120:	bl	1273c <abort@plt>
   3f124:	andeq	fp, r5, r0, ror #24
   3f128:	beq	feae9bd4 <stdout@@GLIBC_2.4+0xfea8d690>
   3f12c:	andeq	sl, r4, ip, lsr #15
   3f130:	andeq	r2, r1, r8, lsr r5
   3f134:	andeq	r4, r3, ip, lsr #2
   3f138:	muleq	r3, r8, pc	; <UNPREDICTABLE>
   3f13c:	andeq	r7, r3, r0, asr r4
   3f140:	ldrdeq	r4, [r3], -r0
   3f144:			; <UNDEFINED> instruction: 0x00033cb0
   3f148:	andeq	sl, r4, r8, asr #21
   3f14c:	ldr	r3, [pc, #96]	; 3f1b4 <fts_children@@Base+0xd718>
   3f150:	push	{r4, lr}
   3f154:	mov	lr, r2
   3f158:	ldr	r3, [r3]
   3f15c:	ldrb	ip, [lr, #28]
   3f160:	mov	r2, r1
   3f164:	mov	r1, r0
   3f168:	lsr	r0, r3, #21
   3f16c:	and	r4, r0, #16
   3f170:	and	r0, ip, #239	; 0xef
   3f174:	orr	r0, r0, r4
   3f178:	orr	r0, r0, #128	; 0x80
   3f17c:	strb	r0, [lr, #28]
   3f180:	mov	r0, lr
   3f184:	bl	3e404 <fts_children@@Base+0xc968>
   3f188:	subs	r3, r0, #0
   3f18c:	popeq	{r4, pc}
   3f190:	ldr	r1, [pc, #32]	; 3f1b8 <fts_children@@Base+0xd71c>
   3f194:	mov	r2, #5
   3f198:	add	r3, r1, r3, lsl #2
   3f19c:	add	r1, r1, #100	; 0x64
   3f1a0:	ldr	r3, [r3, #484]	; 0x1e4
   3f1a4:	mov	r0, #0
   3f1a8:	add	r1, r1, r3
   3f1ac:	pop	{r4, lr}
   3f1b0:	b	1222c <dcgettext@plt>
   3f1b4:	andeq	ip, r5, r8, lsr #29
   3f1b8:	muleq	r4, ip, r7
   3f1bc:	ldr	r3, [pc, #12]	; 3f1d0 <fts_children@@Base+0xd734>
   3f1c0:	ldr	r2, [r3]
   3f1c4:	str	r0, [r3]
   3f1c8:	mov	r0, r2
   3f1cc:	bx	lr
   3f1d0:	andeq	ip, r5, r8, lsr #29
   3f1d4:	push	{r4, r5, r6, lr}
   3f1d8:	mov	r2, #256	; 0x100
   3f1dc:	ldr	r5, [r0]
   3f1e0:	ldr	r6, [r0, #16]
   3f1e4:	mov	r4, r0
   3f1e8:	mov	r1, #0
   3f1ec:	mov	r0, r6
   3f1f0:	bl	12514 <memset@plt>
   3f1f4:	ldr	r1, [r5, #36]	; 0x24
   3f1f8:	mov	r3, r6
   3f1fc:	add	r2, r1, #12
   3f200:	mov	r0, r4
   3f204:	add	r1, r1, #8
   3f208:	bl	381f4 <fts_children@@Base+0x6758>
   3f20c:	ldr	r0, [r5, #40]	; 0x28
   3f210:	ldr	r3, [r5, #36]	; 0x24
   3f214:	cmp	r3, r0
   3f218:	beq	3f234 <fts_children@@Base+0xd798>
   3f21c:	add	r2, r0, #12
   3f220:	add	r1, r0, #8
   3f224:	mov	r3, r6
   3f228:	mov	r0, r4
   3f22c:	bl	381f4 <fts_children@@Base+0x6758>
   3f230:	ldr	r0, [r5, #36]	; 0x24
   3f234:	ldr	r1, [r5, #44]	; 0x2c
   3f238:	cmp	r1, r0
   3f23c:	beq	3f258 <fts_children@@Base+0xd7bc>
   3f240:	add	r2, r1, #12
   3f244:	mov	r0, r4
   3f248:	mov	r3, r6
   3f24c:	add	r1, r1, #8
   3f250:	bl	381f4 <fts_children@@Base+0x6758>
   3f254:	ldr	r0, [r5, #36]	; 0x24
   3f258:	ldr	r1, [r5, #48]	; 0x30
   3f25c:	cmp	r1, r0
   3f260:	beq	3f278 <fts_children@@Base+0xd7dc>
   3f264:	add	r2, r1, #12
   3f268:	mov	r3, r6
   3f26c:	add	r1, r1, #8
   3f270:	mov	r0, r4
   3f274:	bl	381f4 <fts_children@@Base+0x6758>
   3f278:	ldrb	r3, [r4, #28]
   3f27c:	mov	r0, #0
   3f280:	orr	r3, r3, #8
   3f284:	strb	r3, [r4, #28]
   3f288:	pop	{r4, r5, r6, pc}
   3f28c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f290:	cmp	r3, r2
   3f294:	mov	r4, r3
   3f298:	movle	r3, #0
   3f29c:	movgt	r3, #1
   3f2a0:	sub	sp, sp, #52	; 0x34
   3f2a4:	orrs	r3, r3, r4, lsr #31
   3f2a8:	ldr	r3, [r0]
   3f2ac:	ldr	ip, [sp, #88]	; 0x58
   3f2b0:	str	r3, [sp, #28]
   3f2b4:	ldrb	r3, [sp, #100]	; 0x64
   3f2b8:	add	r9, r4, ip
   3f2bc:	ldr	r7, [sp, #96]	; 0x60
   3f2c0:	str	r3, [sp, #36]	; 0x24
   3f2c4:	bne	3f598 <fts_children@@Base+0xdafc>
   3f2c8:	cmp	r9, r2
   3f2cc:	str	r1, [sp, #40]	; 0x28
   3f2d0:	mov	r5, r0
   3f2d4:	bgt	3f568 <fts_children@@Base+0xdacc>
   3f2d8:	cmp	ip, #0
   3f2dc:	cmpge	r4, r9
   3f2e0:	bgt	3f568 <fts_children@@Base+0xdacc>
   3f2e4:	cmp	r9, #0
   3f2e8:	blt	3f570 <fts_children@@Base+0xdad4>
   3f2ec:	cmp	r4, r9
   3f2f0:	movgt	r1, #0
   3f2f4:	movle	r1, #1
   3f2f8:	ands	r3, r1, ip, lsr #31
   3f2fc:	bne	3f570 <fts_children@@Base+0xdad4>
   3f300:	ldr	r3, [pc, #876]	; 3f674 <fts_children@@Base+0xdbd8>
   3f304:	cmp	r3, #0
   3f308:	str	r3, [sp, #32]
   3f30c:	beq	3f324 <fts_children@@Base+0xd888>
   3f310:	ldr	r3, [sp, #28]
   3f314:	str	r2, [sp, #44]	; 0x2c
   3f318:	add	r0, r3, #136	; 0x88
   3f31c:	bl	12160 <pthread_mutex_lock@plt>
   3f320:	ldr	r2, [sp, #44]	; 0x2c
   3f324:	ldrb	r1, [r5, #28]
   3f328:	cmp	r9, r4
   3f32c:	lsr	sl, r1, #5
   3f330:	and	sl, sl, #3
   3f334:	ble	3f34c <fts_children@@Base+0xd8b0>
   3f338:	ldr	r0, [r5, #16]
   3f33c:	cmp	r0, #0
   3f340:	beq	3f34c <fts_children@@Base+0xd8b0>
   3f344:	tst	r1, #8
   3f348:	beq	3f508 <fts_children@@Base+0xda6c>
   3f34c:	lsr	r0, r1, #4
   3f350:	cmp	r7, #0
   3f354:	andne	r0, r0, #1
   3f358:	moveq	r0, #1
   3f35c:	cmp	r0, #0
   3f360:	bne	3f4f4 <fts_children@@Base+0xda58>
   3f364:	and	r1, r1, #6
   3f368:	cmp	r1, #4
   3f36c:	ldr	r1, [r5, #24]
   3f370:	beq	3f5b0 <fts_children@@Base+0xdb14>
   3f374:	add	fp, r1, #1
   3f378:	mov	r6, fp
   3f37c:	lsl	r0, fp, #3
   3f380:	str	r2, [sp, #44]	; 0x2c
   3f384:	bl	123dc <malloc@plt>
   3f388:	subs	r8, r0, #0
   3f38c:	beq	3f5a8 <fts_children@@Base+0xdb0c>
   3f390:	ldr	r3, [sp, #92]	; 0x5c
   3f394:	str	sl, [sp, #16]
   3f398:	str	r3, [sp, #4]
   3f39c:	str	r8, [sp, #12]
   3f3a0:	str	fp, [sp, #8]
   3f3a4:	str	r9, [sp]
   3f3a8:	ldr	r2, [sp, #44]	; 0x2c
   3f3ac:	ldr	r1, [sp, #40]	; 0x28
   3f3b0:	mov	r3, r4
   3f3b4:	mov	r0, r5
   3f3b8:	bl	3a390 <fts_children@@Base+0x88f4>
   3f3bc:	cmp	r0, #0
   3f3c0:	beq	3f400 <fts_children@@Base+0xd964>
   3f3c4:	cmp	r0, #1
   3f3c8:	mvneq	r5, #0
   3f3cc:	beq	3f3d4 <fts_children@@Base+0xd938>
   3f3d0:	mvn	r5, #1
   3f3d4:	mov	r0, r8
   3f3d8:	bl	12154 <free@plt>
   3f3dc:	ldr	r3, [sp, #32]
   3f3e0:	cmp	r3, #0
   3f3e4:	beq	3f3f4 <fts_children@@Base+0xd958>
   3f3e8:	ldr	r3, [sp, #28]
   3f3ec:	add	r0, r3, #136	; 0x88
   3f3f0:	bl	12040 <pthread_mutex_unlock@plt>
   3f3f4:	mov	r0, r5
   3f3f8:	add	sp, sp, #52	; 0x34
   3f3fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f400:	cmp	r7, #0
   3f404:	beq	3f4c0 <fts_children@@Base+0xda24>
   3f408:	ldrb	r9, [r5, #28]
   3f40c:	add	sl, r6, #1
   3f410:	lsr	r9, r9, #1
   3f414:	ands	r9, r9, #3
   3f418:	beq	3f520 <fts_children@@Base+0xda84>
   3f41c:	cmp	r9, #1
   3f420:	beq	3f5dc <fts_children@@Base+0xdb40>
   3f424:	cmp	r9, #2
   3f428:	bne	3f64c <fts_children@@Base+0xdbb0>
   3f42c:	ldr	r3, [r7]
   3f430:	cmp	fp, r3
   3f434:	bhi	3f660 <fts_children@@Base+0xdbc4>
   3f438:	cmp	r6, #0
   3f43c:	ble	3f628 <fts_children@@Base+0xdb8c>
   3f440:	ldrd	r0, [r7, #4]
   3f444:	mov	r3, r8
   3f448:	mov	r2, r6
   3f44c:	sub	r0, r0, #4
   3f450:	sub	r1, r1, #4
   3f454:	add	lr, r8, r6, lsl #3
   3f458:	ldr	ip, [r3]
   3f45c:	add	r3, r3, #8
   3f460:	str	ip, [r0, #4]!
   3f464:	ldr	ip, [r3, #-4]
   3f468:	cmp	lr, r3
   3f46c:	str	ip, [r1, #4]!
   3f470:	bne	3f458 <fts_children@@Base+0xd9bc>
   3f474:	ldr	r3, [r7]
   3f478:	cmp	r3, r2
   3f47c:	bls	3f4a8 <fts_children@@Base+0xda0c>
   3f480:	ldr	r0, [r7, #8]
   3f484:	ldr	r1, [r7, #4]
   3f488:	mvn	r3, #0
   3f48c:	str	r3, [r0, r2, lsl #2]
   3f490:	str	r3, [r1, r2, lsl #2]
   3f494:	ldr	r2, [r7]
   3f498:	add	r6, r6, #1
   3f49c:	cmp	r2, r6
   3f4a0:	mov	r2, r6
   3f4a4:	bhi	3f48c <fts_children@@Base+0xd9f0>
   3f4a8:	ldrb	r3, [r5, #28]
   3f4ac:	bic	r3, r3, #6
   3f4b0:	orr	r9, r3, r9, lsl #1
   3f4b4:	tst	r9, #6
   3f4b8:	strb	r9, [r5, #28]
   3f4bc:	beq	3f3d0 <fts_children@@Base+0xd934>
   3f4c0:	ldr	r3, [sp, #36]	; 0x24
   3f4c4:	ldr	r5, [r8]
   3f4c8:	cmp	r3, #0
   3f4cc:	beq	3f3d4 <fts_children@@Base+0xd938>
   3f4d0:	cmp	r4, r5
   3f4d4:	ldreq	r3, [r8, #4]
   3f4d8:	subeq	r5, r3, r5
   3f4dc:	beq	3f3d4 <fts_children@@Base+0xd938>
   3f4e0:	ldr	r3, [pc, #400]	; 3f678 <fts_children@@Base+0xdbdc>
   3f4e4:	ldr	r2, [pc, #400]	; 3f67c <fts_children@@Base+0xdbe0>
   3f4e8:	ldr	r1, [pc, #400]	; 3f680 <fts_children@@Base+0xdbe4>
   3f4ec:	ldr	r0, [pc, #400]	; 3f684 <fts_children@@Base+0xdbe8>
   3f4f0:	bl	1279c <__assert_fail@plt>
   3f4f4:	mov	fp, #1
   3f4f8:	mov	r6, fp
   3f4fc:	mov	r0, #8
   3f500:	mov	r7, #0
   3f504:	b	3f380 <fts_children@@Base+0xd8e4>
   3f508:	mov	r0, r5
   3f50c:	str	r2, [sp, #44]	; 0x2c
   3f510:	bl	3f1d4 <fts_children@@Base+0xd738>
   3f514:	ldrb	r1, [r5, #28]
   3f518:	ldr	r2, [sp, #44]	; 0x2c
   3f51c:	b	3f34c <fts_children@@Base+0xd8b0>
   3f520:	lsl	r9, sl, #2
   3f524:	mov	r0, r9
   3f528:	bl	123dc <malloc@plt>
   3f52c:	cmp	r0, #0
   3f530:	mov	fp, r0
   3f534:	str	r0, [r7, #4]
   3f538:	beq	3f634 <fts_children@@Base+0xdb98>
   3f53c:	mov	r0, r9
   3f540:	bl	123dc <malloc@plt>
   3f544:	cmp	r0, #0
   3f548:	mov	r9, r0
   3f54c:	str	r0, [r7, #8]
   3f550:	strne	sl, [r7]
   3f554:	movne	r9, #1
   3f558:	bne	3f438 <fts_children@@Base+0xd99c>
   3f55c:	mov	r0, fp
   3f560:	bl	12154 <free@plt>
   3f564:	b	3f4a8 <fts_children@@Base+0xda0c>
   3f568:	mov	r9, r2
   3f56c:	b	3f300 <fts_children@@Base+0xd864>
   3f570:	ldr	r3, [pc, #252]	; 3f674 <fts_children@@Base+0xdbd8>
   3f574:	cmp	r3, #0
   3f578:	str	r3, [sp, #32]
   3f57c:	movne	r9, #0
   3f580:	bne	3f310 <fts_children@@Base+0xd874>
   3f584:	ldrb	r1, [r5, #28]
   3f588:	ldr	r9, [sp, #32]
   3f58c:	lsr	sl, r1, #5
   3f590:	and	sl, sl, #3
   3f594:	b	3f34c <fts_children@@Base+0xd8b0>
   3f598:	mvn	r5, #0
   3f59c:	mov	r0, r5
   3f5a0:	add	sp, sp, #52	; 0x34
   3f5a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f5a8:	mvn	r5, #1
   3f5ac:	b	3f3dc <fts_children@@Base+0xd940>
   3f5b0:	ldr	fp, [r7]
   3f5b4:	cmp	fp, r1
   3f5b8:	bhi	3f374 <fts_children@@Base+0xd8d8>
   3f5bc:	cmp	fp, #0
   3f5c0:	mov	r6, fp
   3f5c4:	bgt	3f37c <fts_children@@Base+0xd8e0>
   3f5c8:	mov	fp, #1
   3f5cc:	mov	r7, r0
   3f5d0:	mov	r6, fp
   3f5d4:	mov	r0, #8
   3f5d8:	b	3f380 <fts_children@@Base+0xd8e4>
   3f5dc:	ldr	r3, [r7]
   3f5e0:	cmp	r3, sl
   3f5e4:	bcs	3f438 <fts_children@@Base+0xd99c>
   3f5e8:	lsl	fp, sl, #2
   3f5ec:	mov	r1, fp
   3f5f0:	ldr	r0, [r7, #4]
   3f5f4:	bl	12268 <realloc@plt>
   3f5f8:	subs	r3, r0, #0
   3f5fc:	str	r3, [sp, #40]	; 0x28
   3f600:	beq	3f634 <fts_children@@Base+0xdb98>
   3f604:	mov	r1, fp
   3f608:	ldr	r0, [r7, #8]
   3f60c:	bl	12268 <realloc@plt>
   3f610:	ldr	r3, [sp, #40]	; 0x28
   3f614:	subs	fp, r0, #0
   3f618:	beq	3f63c <fts_children@@Base+0xdba0>
   3f61c:	stmib	r7, {r3, fp}
   3f620:	str	sl, [r7]
   3f624:	b	3f438 <fts_children@@Base+0xd99c>
   3f628:	mov	r6, #0
   3f62c:	mov	r2, r6
   3f630:	b	3f474 <fts_children@@Base+0xd9d8>
   3f634:	mov	r9, #0
   3f638:	b	3f4a8 <fts_children@@Base+0xda0c>
   3f63c:	mov	r0, r3
   3f640:	bl	12154 <free@plt>
   3f644:	mov	r9, fp
   3f648:	b	3f4a8 <fts_children@@Base+0xda0c>
   3f64c:	ldr	r3, [pc, #52]	; 3f688 <fts_children@@Base+0xdbec>
   3f650:	ldr	r2, [pc, #52]	; 3f68c <fts_children@@Base+0xdbf0>
   3f654:	ldr	r1, [pc, #36]	; 3f680 <fts_children@@Base+0xdbe4>
   3f658:	ldr	r0, [pc, #48]	; 3f690 <fts_children@@Base+0xdbf4>
   3f65c:	bl	1279c <__assert_fail@plt>
   3f660:	ldr	r3, [pc, #32]	; 3f688 <fts_children@@Base+0xdbec>
   3f664:	ldr	r2, [pc, #40]	; 3f694 <fts_children@@Base+0xdbf8>
   3f668:	ldr	r1, [pc, #16]	; 3f680 <fts_children@@Base+0xdbe4>
   3f66c:	ldr	r0, [pc, #36]	; 3f698 <fts_children@@Base+0xdbfc>
   3f670:	bl	1279c <__assert_fail@plt>
   3f674:	andeq	r2, r1, r8, lsr r5
   3f678:	ldrdeq	sl, [r4], -r4
   3f67c:			; <UNDEFINED> instruction: 0x000001be
   3f680:	andeq	sl, r4, r0, asr #20
   3f684:	andeq	sl, r4, r4, lsl #22
   3f688:	andeq	sl, r4, r4, asr #19
   3f68c:	strdeq	r0, [r0], -r9
   3f690:	andeq	sl, r4, ip, asr #21
   3f694:	strdeq	r0, [r0], -fp
   3f698:	andeq	sl, r4, ip, ror #21
   3f69c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f6a0:	sub	sp, sp, #28
   3f6a4:	mov	r4, r2
   3f6a8:	ldr	r5, [sp, #64]	; 0x40
   3f6ac:	ldr	r6, [sp, #80]	; 0x50
   3f6b0:	orr	r2, r5, r2
   3f6b4:	orrs	r2, r2, r6
   3f6b8:	ldrb	fp, [sp, #84]	; 0x54
   3f6bc:	bmi	3f760 <fts_children@@Base+0xdcc4>
   3f6c0:	adds	r9, r4, r5
   3f6c4:	bvs	3f760 <fts_children@@Base+0xdcc4>
   3f6c8:	cmp	r5, #0
   3f6cc:	mov	sl, r0
   3f6d0:	beq	3f770 <fts_children@@Base+0xdcd4>
   3f6d4:	cmp	r4, #0
   3f6d8:	mov	r7, r3
   3f6dc:	str	r1, [sp, #20]
   3f6e0:	moveq	r8, r4
   3f6e4:	bne	3f72c <fts_children@@Base+0xdc90>
   3f6e8:	ldr	r3, [sp, #76]	; 0x4c
   3f6ec:	mov	r2, r9
   3f6f0:	str	r3, [sp, #8]
   3f6f4:	ldr	r3, [sp, #72]	; 0x48
   3f6f8:	mov	r1, r7
   3f6fc:	str	r3, [sp]
   3f700:	str	fp, [sp, #12]
   3f704:	ldr	r3, [sp, #68]	; 0x44
   3f708:	str	r6, [sp, #4]
   3f70c:	mov	r0, sl
   3f710:	bl	3f28c <fts_children@@Base+0xd7f0>
   3f714:	mov	r4, r0
   3f718:	mov	r0, r8
   3f71c:	bl	12154 <free@plt>
   3f720:	mov	r0, r4
   3f724:	add	sp, sp, #28
   3f728:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f72c:	mov	r0, r9
   3f730:	bl	123dc <malloc@plt>
   3f734:	subs	r8, r0, #0
   3f738:	beq	3f760 <fts_children@@Base+0xdcc4>
   3f73c:	ldr	r1, [sp, #20]
   3f740:	mov	r2, r4
   3f744:	bl	121a8 <memcpy@plt>
   3f748:	mov	r1, r7
   3f74c:	mov	r2, r5
   3f750:	add	r0, r8, r4
   3f754:	bl	121a8 <memcpy@plt>
   3f758:	mov	r7, r8
   3f75c:	b	3f6e8 <fts_children@@Base+0xdc4c>
   3f760:	mvn	r4, #1
   3f764:	mov	r0, r4
   3f768:	add	sp, sp, #28
   3f76c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f770:	mov	r7, r1
   3f774:	mov	r8, r5
   3f778:	b	3f6e8 <fts_children@@Base+0xdc4c>
   3f77c:	push	{r4, r5, r6, r7, r8, lr}
   3f780:	mov	r4, r2
   3f784:	ldr	r3, [pc, #224]	; 3f86c <fts_children@@Base+0xddd0>
   3f788:	mov	r2, #0
   3f78c:	tst	r4, #1
   3f790:	mov	r5, r0
   3f794:	str	r2, [r0]
   3f798:	str	r2, [r0, #4]
   3f79c:	str	r2, [r0, #8]
   3f7a0:	mov	r0, #256	; 0x100
   3f7a4:	ldr	r6, [pc, #196]	; 3f870 <fts_children@@Base+0xddd4>
   3f7a8:	mov	r7, r1
   3f7ac:	moveq	r6, r3
   3f7b0:	bl	123dc <malloc@plt>
   3f7b4:	cmp	r0, #0
   3f7b8:	str	r0, [r5, #16]
   3f7bc:	beq	3f860 <fts_children@@Base+0xddc4>
   3f7c0:	lsl	r2, r4, #21
   3f7c4:	ands	r3, r4, #4
   3f7c8:	and	r2, r2, #4194304	; 0x400000
   3f7cc:	orr	r6, r2, r6
   3f7d0:	moveq	r2, r3
   3f7d4:	ldrb	r3, [r5, #28]
   3f7d8:	movne	r2, #1
   3f7dc:	lsl	r4, r4, #1
   3f7e0:	bic	r3, r3, #128	; 0x80
   3f7e4:	orr	r3, r3, r2, lsl #7
   3f7e8:	bic	r3, r3, #16
   3f7ec:	and	r4, r4, #16
   3f7f0:	orr	r4, r4, r3
   3f7f4:	mov	r3, #0
   3f7f8:	bicne	r6, r6, #64	; 0x40
   3f7fc:	strb	r4, [r5, #28]
   3f800:	str	r3, [r5, #20]
   3f804:	mov	r0, r7
   3f808:	orrne	r6, r6, #256	; 0x100
   3f80c:	bl	1249c <strlen@plt>
   3f810:	mov	r3, r6
   3f814:	mov	r1, r7
   3f818:	mov	r2, r0
   3f81c:	mov	r0, r5
   3f820:	bl	3e404 <fts_children@@Base+0xc968>
   3f824:	cmp	r0, #16
   3f828:	mov	r4, r0
   3f82c:	beq	3f848 <fts_children@@Base+0xddac>
   3f830:	cmp	r0, #0
   3f834:	bne	3f84c <fts_children@@Base+0xddb0>
   3f838:	mov	r0, r5
   3f83c:	bl	3f1d4 <fts_children@@Base+0xd738>
   3f840:	mov	r0, r4
   3f844:	pop	{r4, r5, r6, r7, r8, pc}
   3f848:	mov	r4, #8
   3f84c:	ldr	r0, [r5, #16]
   3f850:	bl	12154 <free@plt>
   3f854:	mov	r3, #0
   3f858:	str	r3, [r5, #16]
   3f85c:	b	3f840 <fts_children@@Base+0xdda4>
   3f860:	mov	r4, #12
   3f864:	mov	r0, r4
   3f868:	pop	{r4, r5, r6, r7, r8, pc}
   3f86c:	smlabteq	r1, r6, r2, r0
   3f870:	strdeq	fp, [r3], -ip
   3f874:	cmp	r0, #16
   3f878:	push	{r4, r5, r6, r7, r8, lr}
   3f87c:	bhi	3f8e4 <fts_children@@Base+0xde48>
   3f880:	ldr	r1, [pc, #96]	; 3f8e8 <fts_children@@Base+0xde4c>
   3f884:	mov	r4, r3
   3f888:	add	r0, r1, r0, lsl #2
   3f88c:	add	r1, r1, #100	; 0x64
   3f890:	ldr	r3, [r0, #484]	; 0x1e4
   3f894:	mov	r6, r2
   3f898:	add	r1, r1, r3
   3f89c:	mov	r2, #5
   3f8a0:	mov	r0, #0
   3f8a4:	bl	1222c <dcgettext@plt>
   3f8a8:	mov	r7, r0
   3f8ac:	bl	1249c <strlen@plt>
   3f8b0:	cmp	r4, #0
   3f8b4:	add	r5, r0, #1
   3f8b8:	beq	3f8dc <fts_children@@Base+0xde40>
   3f8bc:	cmp	r5, r4
   3f8c0:	subhi	r2, r4, #1
   3f8c4:	movhi	r3, #0
   3f8c8:	strbhi	r3, [r6, r2]
   3f8cc:	movls	r2, r5
   3f8d0:	mov	r1, r7
   3f8d4:	mov	r0, r6
   3f8d8:	bl	121a8 <memcpy@plt>
   3f8dc:	mov	r0, r5
   3f8e0:	pop	{r4, r5, r6, r7, r8, pc}
   3f8e4:	bl	1273c <abort@plt>
   3f8e8:	muleq	r4, ip, r7
   3f8ec:	push	{r4, r5, r6, lr}
   3f8f0:	mov	r4, r0
   3f8f4:	ldr	r5, [r0]
   3f8f8:	cmp	r5, #0
   3f8fc:	beq	3f91c <fts_children@@Base+0xde80>
   3f900:	ldr	r3, [pc, #60]	; 3f944 <fts_children@@Base+0xdea8>
   3f904:	cmp	r3, #0
   3f908:	beq	3f914 <fts_children@@Base+0xde78>
   3f90c:	add	r0, r5, #136	; 0x88
   3f910:	bl	12100 <pthread_mutex_destroy@plt>
   3f914:	mov	r0, r5
   3f918:	bl	374ec <fts_children@@Base+0x5a50>
   3f91c:	mov	r5, #0
   3f920:	ldr	r0, [r4, #16]
   3f924:	str	r5, [r4]
   3f928:	str	r5, [r4, #4]
   3f92c:	bl	12154 <free@plt>
   3f930:	str	r5, [r4, #16]
   3f934:	ldr	r0, [r4, #20]
   3f938:	bl	12154 <free@plt>
   3f93c:	str	r5, [r4, #20]
   3f940:	pop	{r4, r5, r6, pc}
   3f944:	andeq	r2, r1, r8, lsr r5
   3f948:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3f94c:	sub	sp, sp, #36	; 0x24
   3f950:	ldr	r5, [sp, #72]	; 0x48
   3f954:	bics	ip, r5, #7
   3f958:	movne	r0, #2
   3f95c:	bne	3f9f0 <fts_children@@Base+0xdf54>
   3f960:	ands	fp, r5, #4
   3f964:	mov	r7, r3
   3f968:	str	r2, [sp, #28]
   3f96c:	mov	r6, r1
   3f970:	mov	r4, r0
   3f974:	bne	3f9f8 <fts_children@@Base+0xdf5c>
   3f978:	mov	r0, r1
   3f97c:	bl	1249c <strlen@plt>
   3f980:	mov	r8, r0
   3f984:	ldr	r9, [pc, #172]	; 3fa38 <fts_children@@Base+0xdf9c>
   3f988:	ldr	sl, [r4]
   3f98c:	cmp	r9, #0
   3f990:	beq	3f99c <fts_children@@Base+0xdf00>
   3f994:	add	r0, sl, #136	; 0x88
   3f998:	bl	12160 <pthread_mutex_lock@plt>
   3f99c:	ldrb	r2, [r4, #28]
   3f9a0:	tst	r2, #16
   3f9a4:	beq	3fa04 <fts_children@@Base+0xdf68>
   3f9a8:	mov	ip, #0
   3f9ac:	mov	r0, r4
   3f9b0:	str	r5, [sp, #16]
   3f9b4:	str	r8, [sp, #4]
   3f9b8:	str	r8, [sp]
   3f9bc:	mov	r3, fp
   3f9c0:	mov	r2, r8
   3f9c4:	mov	r1, r6
   3f9c8:	str	ip, [sp, #12]
   3f9cc:	str	ip, [sp, #8]
   3f9d0:	bl	3a390 <fts_children@@Base+0x88f4>
   3f9d4:	mov	r4, r0
   3f9d8:	cmp	r9, #0
   3f9dc:	beq	3f9e8 <fts_children@@Base+0xdf4c>
   3f9e0:	add	r0, sl, #136	; 0x88
   3f9e4:	bl	12040 <pthread_mutex_unlock@plt>
   3f9e8:	adds	r0, r4, #0
   3f9ec:	movne	r0, #1
   3f9f0:	add	sp, sp, #36	; 0x24
   3f9f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3f9f8:	ldr	fp, [r3]
   3f9fc:	ldr	r8, [r3, #4]
   3fa00:	b	3f984 <fts_children@@Base+0xdee8>
   3fa04:	ldr	r3, [sp, #28]
   3fa08:	mov	r0, r4
   3fa0c:	str	r3, [sp, #8]
   3fa10:	str	r5, [sp, #16]
   3fa14:	str	r7, [sp, #12]
   3fa18:	str	r8, [sp, #4]
   3fa1c:	str	r8, [sp]
   3fa20:	mov	r3, fp
   3fa24:	mov	r2, r8
   3fa28:	mov	r1, r6
   3fa2c:	bl	3a390 <fts_children@@Base+0x88f4>
   3fa30:	mov	r4, r0
   3fa34:	b	3f9d8 <fts_children@@Base+0xdf3c>
   3fa38:	andeq	r2, r1, r8, lsr r5
   3fa3c:	push	{lr}		; (str lr, [sp, #-4]!)
   3fa40:	sub	sp, sp, #20
   3fa44:	mov	lr, #1
   3fa48:	ldr	ip, [sp, #24]
   3fa4c:	str	lr, [sp, #12]
   3fa50:	stmib	sp, {r2, ip}
   3fa54:	mov	ip, #0
   3fa58:	str	ip, [sp]
   3fa5c:	bl	3f28c <fts_children@@Base+0xd7f0>
   3fa60:	add	sp, sp, #20
   3fa64:	pop	{pc}		; (ldr pc, [sp], #4)
   3fa68:	push	{lr}		; (str lr, [sp, #-4]!)
   3fa6c:	sub	sp, sp, #20
   3fa70:	ldr	ip, [sp, #24]
   3fa74:	ldr	lr, [sp, #28]
   3fa78:	str	ip, [sp]
   3fa7c:	mov	ip, #0
   3fa80:	str	r2, [sp, #4]
   3fa84:	str	lr, [sp, #8]
   3fa88:	str	ip, [sp, #12]
   3fa8c:	bl	3f28c <fts_children@@Base+0xd7f0>
   3fa90:	add	sp, sp, #20
   3fa94:	pop	{pc}		; (ldr pc, [sp], #4)
   3fa98:	push	{lr}		; (str lr, [sp, #-4]!)
   3fa9c:	sub	sp, sp, #28
   3faa0:	ldr	lr, [sp, #32]
   3faa4:	ldr	ip, [sp, #36]	; 0x24
   3faa8:	str	lr, [sp]
   3faac:	str	ip, [sp, #4]
   3fab0:	ldr	lr, [sp, #40]	; 0x28
   3fab4:	ldr	ip, [sp, #44]	; 0x2c
   3fab8:	str	lr, [sp, #12]
   3fabc:	str	ip, [sp, #16]
   3fac0:	mov	lr, #1
   3fac4:	mov	ip, #0
   3fac8:	str	lr, [sp, #20]
   3facc:	str	ip, [sp, #8]
   3fad0:	bl	3f69c <fts_children@@Base+0xdc00>
   3fad4:	add	sp, sp, #28
   3fad8:	pop	{pc}		; (ldr pc, [sp], #4)
   3fadc:	push	{lr}		; (str lr, [sp, #-4]!)
   3fae0:	sub	sp, sp, #28
   3fae4:	ldr	lr, [sp, #32]
   3fae8:	ldr	ip, [sp, #36]	; 0x24
   3faec:	str	lr, [sp]
   3faf0:	ldr	lr, [sp, #40]	; 0x28
   3faf4:	str	ip, [sp, #4]
   3faf8:	ldr	ip, [sp, #44]	; 0x2c
   3fafc:	str	lr, [sp, #8]
   3fb00:	ldr	lr, [sp, #48]	; 0x30
   3fb04:	str	ip, [sp, #12]
   3fb08:	mov	ip, #0
   3fb0c:	str	lr, [sp, #16]
   3fb10:	str	ip, [sp, #20]
   3fb14:	bl	3f69c <fts_children@@Base+0xdc00>
   3fb18:	add	sp, sp, #28
   3fb1c:	pop	{pc}		; (ldr pc, [sp], #4)
   3fb20:	cmp	r2, #0
   3fb24:	beq	3fb48 <fts_children@@Base+0xe0ac>
   3fb28:	ldrb	ip, [r0, #28]
   3fb2c:	bic	ip, ip, #4
   3fb30:	orr	ip, ip, #2
   3fb34:	strb	ip, [r0, #28]
   3fb38:	strd	r2, [r1]
   3fb3c:	ldr	r3, [sp]
   3fb40:	str	r3, [r1, #8]
   3fb44:	bx	lr
   3fb48:	ldrb	r3, [r0, #28]
   3fb4c:	bic	r3, r3, #6
   3fb50:	strb	r3, [r0, #28]
   3fb54:	str	r2, [r1]
   3fb58:	str	r2, [r1, #8]
   3fb5c:	str	r2, [r1, #4]
   3fb60:	bx	lr
   3fb64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fb68:	sub	sp, sp, #4048	; 0xfd0
   3fb6c:	ldr	r6, [pc, #456]	; 3fd3c <fts_children@@Base+0xe2a0>
   3fb70:	sub	sp, sp, #12
   3fb74:	cmn	r0, #100	; 0x64
   3fb78:	ldr	r3, [r6]
   3fb7c:	mov	r5, r1
   3fb80:	mov	r8, r2
   3fb84:	str	r3, [sp, #4052]	; 0xfd4
   3fb88:	beq	3fc7c <fts_children@@Base+0xe1e0>
   3fb8c:	ldrb	r3, [r1]
   3fb90:	cmp	r3, #47	; 0x2f
   3fb94:	beq	3fc7c <fts_children@@Base+0xe1e0>
   3fb98:	mov	r4, r0
   3fb9c:	add	r9, sp, #20
   3fba0:	mov	r2, r1
   3fba4:	mov	r0, r9
   3fba8:	mov	r1, r4
   3fbac:	bl	433bc <fts_children@@Base+0x11920>
   3fbb0:	subs	sl, r0, #0
   3fbb4:	beq	3fbf0 <fts_children@@Base+0xe154>
   3fbb8:	mov	r1, r8
   3fbbc:	bl	43374 <fts_children@@Base+0x118d8>
   3fbc0:	mov	r7, r0
   3fbc4:	bl	124d8 <__errno_location@plt>
   3fbc8:	cmp	sl, r9
   3fbcc:	mov	fp, r0
   3fbd0:	ldr	r9, [r0]
   3fbd4:	beq	3fbe0 <fts_children@@Base+0xe144>
   3fbd8:	mov	r0, sl
   3fbdc:	bl	12154 <free@plt>
   3fbe0:	cmn	r7, #1
   3fbe4:	bne	3fc5c <fts_children@@Base+0xe1c0>
   3fbe8:	cmp	r9, #20
   3fbec:	bne	3fc90 <fts_children@@Base+0xe1f4>
   3fbf0:	add	r3, sp, #12
   3fbf4:	mov	r0, r3
   3fbf8:	str	r3, [sp, #4]
   3fbfc:	bl	2d8a0 <__assert_fail@plt+0x1b104>
   3fc00:	cmp	r0, #0
   3fc04:	bne	3fd30 <fts_children@@Base+0xe294>
   3fc08:	cmp	r4, #0
   3fc0c:	blt	3fc1c <fts_children@@Base+0xe180>
   3fc10:	ldr	r3, [sp, #12]
   3fc14:	cmp	r3, r4
   3fc18:	beq	3fd04 <fts_children@@Base+0xe268>
   3fc1c:	mov	r0, r4
   3fc20:	bl	126a0 <fchdir@plt>
   3fc24:	cmp	r0, #0
   3fc28:	bne	3fce4 <fts_children@@Base+0xe248>
   3fc2c:	mov	r1, r8
   3fc30:	mov	r0, r5
   3fc34:	bl	43374 <fts_children@@Base+0x118d8>
   3fc38:	cmn	r0, #1
   3fc3c:	mov	r7, r0
   3fc40:	beq	3fcb4 <fts_children@@Base+0xe218>
   3fc44:	ldr	r0, [sp, #4]
   3fc48:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   3fc4c:	cmp	r0, #0
   3fc50:	bne	3fd24 <fts_children@@Base+0xe288>
   3fc54:	ldr	r0, [sp, #4]
   3fc58:	bl	2d910 <__assert_fail@plt+0x1b174>
   3fc5c:	ldr	r2, [sp, #4052]	; 0xfd4
   3fc60:	ldr	r3, [r6]
   3fc64:	mov	r0, r7
   3fc68:	cmp	r2, r3
   3fc6c:	bne	3fd20 <fts_children@@Base+0xe284>
   3fc70:	add	sp, sp, #4048	; 0xfd0
   3fc74:	add	sp, sp, #12
   3fc78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fc7c:	mov	r1, r8
   3fc80:	mov	r0, r5
   3fc84:	bl	43374 <fts_children@@Base+0x118d8>
   3fc88:	mov	r7, r0
   3fc8c:	b	3fc5c <fts_children@@Base+0xe1c0>
   3fc90:	sub	r3, r9, #1
   3fc94:	cmp	r9, #13
   3fc98:	cmpne	r3, #1
   3fc9c:	bls	3fbf0 <fts_children@@Base+0xe154>
   3fca0:	cmp	r9, #38	; 0x26
   3fca4:	cmpne	r9, #95	; 0x5f
   3fca8:	strne	r9, [fp]
   3fcac:	beq	3fbf0 <fts_children@@Base+0xe154>
   3fcb0:	b	3fc5c <fts_children@@Base+0xe1c0>
   3fcb4:	bl	124d8 <__errno_location@plt>
   3fcb8:	mov	r4, r0
   3fcbc:	ldr	r0, [sp, #4]
   3fcc0:	ldr	r5, [r4]
   3fcc4:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   3fcc8:	cmp	r0, #0
   3fccc:	bne	3fd24 <fts_children@@Base+0xe288>
   3fcd0:	ldr	r0, [sp, #4]
   3fcd4:	bl	2d910 <__assert_fail@plt+0x1b174>
   3fcd8:	cmp	r5, #0
   3fcdc:	strne	r5, [r4]
   3fce0:	b	3fc5c <fts_children@@Base+0xe1c0>
   3fce4:	bl	124d8 <__errno_location@plt>
   3fce8:	mvn	r7, #0
   3fcec:	mov	r4, r0
   3fcf0:	ldr	r0, [sp, #4]
   3fcf4:	ldr	r5, [r4]
   3fcf8:	bl	2d910 <__assert_fail@plt+0x1b174>
   3fcfc:	str	r5, [r4]
   3fd00:	b	3fc5c <fts_children@@Base+0xe1c0>
   3fd04:	ldr	r0, [sp, #4]
   3fd08:	bl	2d910 <__assert_fail@plt+0x1b174>
   3fd0c:	bl	124d8 <__errno_location@plt>
   3fd10:	mov	r3, #9
   3fd14:	mvn	r7, #0
   3fd18:	str	r3, [r0]
   3fd1c:	b	3fc5c <fts_children@@Base+0xe1c0>
   3fd20:	bl	12244 <__stack_chk_fail@plt>
   3fd24:	bl	124d8 <__errno_location@plt>
   3fd28:	ldr	r0, [r0]
   3fd2c:	bl	258f4 <__assert_fail@plt+0x13158>
   3fd30:	bl	124d8 <__errno_location@plt>
   3fd34:	ldr	r0, [r0]
   3fd38:	bl	258b8 <__assert_fail@plt+0x1311c>
   3fd3c:	andeq	fp, r5, r0, ror #24
   3fd40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fd44:	sub	sp, sp, #4048	; 0xfd0
   3fd48:	ldr	r6, [pc, #456]	; 3ff18 <fts_children@@Base+0xe47c>
   3fd4c:	sub	sp, sp, #12
   3fd50:	cmn	r0, #100	; 0x64
   3fd54:	ldr	r3, [r6]
   3fd58:	mov	r5, r1
   3fd5c:	mov	r8, r2
   3fd60:	str	r3, [sp, #4052]	; 0xfd4
   3fd64:	beq	3fe58 <fts_children@@Base+0xe3bc>
   3fd68:	ldrb	r3, [r1]
   3fd6c:	cmp	r3, #47	; 0x2f
   3fd70:	beq	3fe58 <fts_children@@Base+0xe3bc>
   3fd74:	mov	r4, r0
   3fd78:	add	r9, sp, #20
   3fd7c:	mov	r2, r1
   3fd80:	mov	r0, r9
   3fd84:	mov	r1, r4
   3fd88:	bl	433bc <fts_children@@Base+0x11920>
   3fd8c:	subs	sl, r0, #0
   3fd90:	beq	3fdcc <fts_children@@Base+0xe330>
   3fd94:	mov	r1, r8
   3fd98:	bl	4338c <fts_children@@Base+0x118f0>
   3fd9c:	mov	r7, r0
   3fda0:	bl	124d8 <__errno_location@plt>
   3fda4:	cmp	sl, r9
   3fda8:	mov	fp, r0
   3fdac:	ldr	r9, [r0]
   3fdb0:	beq	3fdbc <fts_children@@Base+0xe320>
   3fdb4:	mov	r0, sl
   3fdb8:	bl	12154 <free@plt>
   3fdbc:	cmn	r7, #1
   3fdc0:	bne	3fe38 <fts_children@@Base+0xe39c>
   3fdc4:	cmp	r9, #20
   3fdc8:	bne	3fe6c <fts_children@@Base+0xe3d0>
   3fdcc:	add	r3, sp, #12
   3fdd0:	mov	r0, r3
   3fdd4:	str	r3, [sp, #4]
   3fdd8:	bl	2d8a0 <__assert_fail@plt+0x1b104>
   3fddc:	cmp	r0, #0
   3fde0:	bne	3ff0c <fts_children@@Base+0xe470>
   3fde4:	cmp	r4, #0
   3fde8:	blt	3fdf8 <fts_children@@Base+0xe35c>
   3fdec:	ldr	r3, [sp, #12]
   3fdf0:	cmp	r3, r4
   3fdf4:	beq	3fee0 <fts_children@@Base+0xe444>
   3fdf8:	mov	r0, r4
   3fdfc:	bl	126a0 <fchdir@plt>
   3fe00:	cmp	r0, #0
   3fe04:	bne	3fec0 <fts_children@@Base+0xe424>
   3fe08:	mov	r1, r8
   3fe0c:	mov	r0, r5
   3fe10:	bl	4338c <fts_children@@Base+0x118f0>
   3fe14:	cmn	r0, #1
   3fe18:	mov	r7, r0
   3fe1c:	beq	3fe90 <fts_children@@Base+0xe3f4>
   3fe20:	ldr	r0, [sp, #4]
   3fe24:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   3fe28:	cmp	r0, #0
   3fe2c:	bne	3ff00 <fts_children@@Base+0xe464>
   3fe30:	ldr	r0, [sp, #4]
   3fe34:	bl	2d910 <__assert_fail@plt+0x1b174>
   3fe38:	ldr	r2, [sp, #4052]	; 0xfd4
   3fe3c:	ldr	r3, [r6]
   3fe40:	mov	r0, r7
   3fe44:	cmp	r2, r3
   3fe48:	bne	3fefc <fts_children@@Base+0xe460>
   3fe4c:	add	sp, sp, #4048	; 0xfd0
   3fe50:	add	sp, sp, #12
   3fe54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fe58:	mov	r1, r8
   3fe5c:	mov	r0, r5
   3fe60:	bl	4338c <fts_children@@Base+0x118f0>
   3fe64:	mov	r7, r0
   3fe68:	b	3fe38 <fts_children@@Base+0xe39c>
   3fe6c:	sub	r3, r9, #1
   3fe70:	cmp	r9, #13
   3fe74:	cmpne	r3, #1
   3fe78:	bls	3fdcc <fts_children@@Base+0xe330>
   3fe7c:	cmp	r9, #38	; 0x26
   3fe80:	cmpne	r9, #95	; 0x5f
   3fe84:	strne	r9, [fp]
   3fe88:	beq	3fdcc <fts_children@@Base+0xe330>
   3fe8c:	b	3fe38 <fts_children@@Base+0xe39c>
   3fe90:	bl	124d8 <__errno_location@plt>
   3fe94:	mov	r4, r0
   3fe98:	ldr	r0, [sp, #4]
   3fe9c:	ldr	r5, [r4]
   3fea0:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   3fea4:	cmp	r0, #0
   3fea8:	bne	3ff00 <fts_children@@Base+0xe464>
   3feac:	ldr	r0, [sp, #4]
   3feb0:	bl	2d910 <__assert_fail@plt+0x1b174>
   3feb4:	cmp	r5, #0
   3feb8:	strne	r5, [r4]
   3febc:	b	3fe38 <fts_children@@Base+0xe39c>
   3fec0:	bl	124d8 <__errno_location@plt>
   3fec4:	mvn	r7, #0
   3fec8:	mov	r4, r0
   3fecc:	ldr	r0, [sp, #4]
   3fed0:	ldr	r5, [r4]
   3fed4:	bl	2d910 <__assert_fail@plt+0x1b174>
   3fed8:	str	r5, [r4]
   3fedc:	b	3fe38 <fts_children@@Base+0xe39c>
   3fee0:	ldr	r0, [sp, #4]
   3fee4:	bl	2d910 <__assert_fail@plt+0x1b174>
   3fee8:	bl	124d8 <__errno_location@plt>
   3feec:	mov	r3, #9
   3fef0:	mvn	r7, #0
   3fef4:	str	r3, [r0]
   3fef8:	b	3fe38 <fts_children@@Base+0xe39c>
   3fefc:	bl	12244 <__stack_chk_fail@plt>
   3ff00:	bl	124d8 <__errno_location@plt>
   3ff04:	ldr	r0, [r0]
   3ff08:	bl	258f4 <__assert_fail@plt+0x13158>
   3ff0c:	bl	124d8 <__errno_location@plt>
   3ff10:	ldr	r0, [r0]
   3ff14:	bl	258b8 <__assert_fail@plt+0x1311c>
   3ff18:	andeq	fp, r5, r0, ror #24
   3ff1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ff20:	sub	sp, sp, #4048	; 0xfd0
   3ff24:	ldr	r6, [pc, #456]	; 400f4 <fts_children@@Base+0xe658>
   3ff28:	sub	sp, sp, #12
   3ff2c:	cmn	r0, #100	; 0x64
   3ff30:	ldr	r3, [r6]
   3ff34:	mov	r5, r1
   3ff38:	mov	r8, r2
   3ff3c:	str	r3, [sp, #4052]	; 0xfd4
   3ff40:	beq	40034 <fts_children@@Base+0xe598>
   3ff44:	ldrb	r3, [r1]
   3ff48:	cmp	r3, #47	; 0x2f
   3ff4c:	beq	40034 <fts_children@@Base+0xe598>
   3ff50:	mov	r4, r0
   3ff54:	add	r9, sp, #20
   3ff58:	mov	r2, r1
   3ff5c:	mov	r0, r9
   3ff60:	mov	r1, r4
   3ff64:	bl	433bc <fts_children@@Base+0x11920>
   3ff68:	subs	sl, r0, #0
   3ff6c:	beq	3ffa8 <fts_children@@Base+0xe50c>
   3ff70:	mov	r1, r8
   3ff74:	bl	12598 <setfilecon@plt>
   3ff78:	mov	r7, r0
   3ff7c:	bl	124d8 <__errno_location@plt>
   3ff80:	cmp	sl, r9
   3ff84:	mov	fp, r0
   3ff88:	ldr	r9, [r0]
   3ff8c:	beq	3ff98 <fts_children@@Base+0xe4fc>
   3ff90:	mov	r0, sl
   3ff94:	bl	12154 <free@plt>
   3ff98:	cmn	r7, #1
   3ff9c:	bne	40014 <fts_children@@Base+0xe578>
   3ffa0:	cmp	r9, #20
   3ffa4:	bne	40048 <fts_children@@Base+0xe5ac>
   3ffa8:	add	r3, sp, #12
   3ffac:	mov	r0, r3
   3ffb0:	str	r3, [sp, #4]
   3ffb4:	bl	2d8a0 <__assert_fail@plt+0x1b104>
   3ffb8:	cmp	r0, #0
   3ffbc:	bne	400e8 <fts_children@@Base+0xe64c>
   3ffc0:	cmp	r4, #0
   3ffc4:	blt	3ffd4 <fts_children@@Base+0xe538>
   3ffc8:	ldr	r3, [sp, #12]
   3ffcc:	cmp	r3, r4
   3ffd0:	beq	400bc <fts_children@@Base+0xe620>
   3ffd4:	mov	r0, r4
   3ffd8:	bl	126a0 <fchdir@plt>
   3ffdc:	cmp	r0, #0
   3ffe0:	bne	4009c <fts_children@@Base+0xe600>
   3ffe4:	mov	r1, r8
   3ffe8:	mov	r0, r5
   3ffec:	bl	12598 <setfilecon@plt>
   3fff0:	cmn	r0, #1
   3fff4:	mov	r7, r0
   3fff8:	beq	4006c <fts_children@@Base+0xe5d0>
   3fffc:	ldr	r0, [sp, #4]
   40000:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   40004:	cmp	r0, #0
   40008:	bne	400dc <fts_children@@Base+0xe640>
   4000c:	ldr	r0, [sp, #4]
   40010:	bl	2d910 <__assert_fail@plt+0x1b174>
   40014:	ldr	r2, [sp, #4052]	; 0xfd4
   40018:	ldr	r3, [r6]
   4001c:	mov	r0, r7
   40020:	cmp	r2, r3
   40024:	bne	400d8 <fts_children@@Base+0xe63c>
   40028:	add	sp, sp, #4048	; 0xfd0
   4002c:	add	sp, sp, #12
   40030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40034:	mov	r1, r8
   40038:	mov	r0, r5
   4003c:	bl	12598 <setfilecon@plt>
   40040:	mov	r7, r0
   40044:	b	40014 <fts_children@@Base+0xe578>
   40048:	sub	r3, r9, #1
   4004c:	cmp	r9, #13
   40050:	cmpne	r3, #1
   40054:	bls	3ffa8 <fts_children@@Base+0xe50c>
   40058:	cmp	r9, #38	; 0x26
   4005c:	cmpne	r9, #95	; 0x5f
   40060:	strne	r9, [fp]
   40064:	beq	3ffa8 <fts_children@@Base+0xe50c>
   40068:	b	40014 <fts_children@@Base+0xe578>
   4006c:	bl	124d8 <__errno_location@plt>
   40070:	mov	r4, r0
   40074:	ldr	r0, [sp, #4]
   40078:	ldr	r5, [r4]
   4007c:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   40080:	cmp	r0, #0
   40084:	bne	400dc <fts_children@@Base+0xe640>
   40088:	ldr	r0, [sp, #4]
   4008c:	bl	2d910 <__assert_fail@plt+0x1b174>
   40090:	cmp	r5, #0
   40094:	strne	r5, [r4]
   40098:	b	40014 <fts_children@@Base+0xe578>
   4009c:	bl	124d8 <__errno_location@plt>
   400a0:	mvn	r7, #0
   400a4:	mov	r4, r0
   400a8:	ldr	r0, [sp, #4]
   400ac:	ldr	r5, [r4]
   400b0:	bl	2d910 <__assert_fail@plt+0x1b174>
   400b4:	str	r5, [r4]
   400b8:	b	40014 <fts_children@@Base+0xe578>
   400bc:	ldr	r0, [sp, #4]
   400c0:	bl	2d910 <__assert_fail@plt+0x1b174>
   400c4:	bl	124d8 <__errno_location@plt>
   400c8:	mov	r3, #9
   400cc:	mvn	r7, #0
   400d0:	str	r3, [r0]
   400d4:	b	40014 <fts_children@@Base+0xe578>
   400d8:	bl	12244 <__stack_chk_fail@plt>
   400dc:	bl	124d8 <__errno_location@plt>
   400e0:	ldr	r0, [r0]
   400e4:	bl	258f4 <__assert_fail@plt+0x13158>
   400e8:	bl	124d8 <__errno_location@plt>
   400ec:	ldr	r0, [r0]
   400f0:	bl	258b8 <__assert_fail@plt+0x1311c>
   400f4:	andeq	fp, r5, r0, ror #24
   400f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   400fc:	sub	sp, sp, #4048	; 0xfd0
   40100:	ldr	r6, [pc, #456]	; 402d0 <fts_children@@Base+0xe834>
   40104:	sub	sp, sp, #12
   40108:	cmn	r0, #100	; 0x64
   4010c:	ldr	r3, [r6]
   40110:	mov	r5, r1
   40114:	mov	r8, r2
   40118:	str	r3, [sp, #4052]	; 0xfd4
   4011c:	beq	40210 <fts_children@@Base+0xe774>
   40120:	ldrb	r3, [r1]
   40124:	cmp	r3, #47	; 0x2f
   40128:	beq	40210 <fts_children@@Base+0xe774>
   4012c:	mov	r4, r0
   40130:	add	r9, sp, #20
   40134:	mov	r2, r1
   40138:	mov	r0, r9
   4013c:	mov	r1, r4
   40140:	bl	433bc <fts_children@@Base+0x11920>
   40144:	subs	sl, r0, #0
   40148:	beq	40184 <fts_children@@Base+0xe6e8>
   4014c:	mov	r1, r8
   40150:	bl	1213c <lsetfilecon@plt>
   40154:	mov	r7, r0
   40158:	bl	124d8 <__errno_location@plt>
   4015c:	cmp	sl, r9
   40160:	mov	fp, r0
   40164:	ldr	r9, [r0]
   40168:	beq	40174 <fts_children@@Base+0xe6d8>
   4016c:	mov	r0, sl
   40170:	bl	12154 <free@plt>
   40174:	cmn	r7, #1
   40178:	bne	401f0 <fts_children@@Base+0xe754>
   4017c:	cmp	r9, #20
   40180:	bne	40224 <fts_children@@Base+0xe788>
   40184:	add	r3, sp, #12
   40188:	mov	r0, r3
   4018c:	str	r3, [sp, #4]
   40190:	bl	2d8a0 <__assert_fail@plt+0x1b104>
   40194:	cmp	r0, #0
   40198:	bne	402c4 <fts_children@@Base+0xe828>
   4019c:	cmp	r4, #0
   401a0:	blt	401b0 <fts_children@@Base+0xe714>
   401a4:	ldr	r3, [sp, #12]
   401a8:	cmp	r3, r4
   401ac:	beq	40298 <fts_children@@Base+0xe7fc>
   401b0:	mov	r0, r4
   401b4:	bl	126a0 <fchdir@plt>
   401b8:	cmp	r0, #0
   401bc:	bne	40278 <fts_children@@Base+0xe7dc>
   401c0:	mov	r1, r8
   401c4:	mov	r0, r5
   401c8:	bl	1213c <lsetfilecon@plt>
   401cc:	cmn	r0, #1
   401d0:	mov	r7, r0
   401d4:	beq	40248 <fts_children@@Base+0xe7ac>
   401d8:	ldr	r0, [sp, #4]
   401dc:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   401e0:	cmp	r0, #0
   401e4:	bne	402b8 <fts_children@@Base+0xe81c>
   401e8:	ldr	r0, [sp, #4]
   401ec:	bl	2d910 <__assert_fail@plt+0x1b174>
   401f0:	ldr	r2, [sp, #4052]	; 0xfd4
   401f4:	ldr	r3, [r6]
   401f8:	mov	r0, r7
   401fc:	cmp	r2, r3
   40200:	bne	402b4 <fts_children@@Base+0xe818>
   40204:	add	sp, sp, #4048	; 0xfd0
   40208:	add	sp, sp, #12
   4020c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40210:	mov	r1, r8
   40214:	mov	r0, r5
   40218:	bl	1213c <lsetfilecon@plt>
   4021c:	mov	r7, r0
   40220:	b	401f0 <fts_children@@Base+0xe754>
   40224:	sub	r3, r9, #1
   40228:	cmp	r9, #13
   4022c:	cmpne	r3, #1
   40230:	bls	40184 <fts_children@@Base+0xe6e8>
   40234:	cmp	r9, #38	; 0x26
   40238:	cmpne	r9, #95	; 0x5f
   4023c:	strne	r9, [fp]
   40240:	beq	40184 <fts_children@@Base+0xe6e8>
   40244:	b	401f0 <fts_children@@Base+0xe754>
   40248:	bl	124d8 <__errno_location@plt>
   4024c:	mov	r4, r0
   40250:	ldr	r0, [sp, #4]
   40254:	ldr	r5, [r4]
   40258:	bl	2d8f4 <__assert_fail@plt+0x1b158>
   4025c:	cmp	r0, #0
   40260:	bne	402b8 <fts_children@@Base+0xe81c>
   40264:	ldr	r0, [sp, #4]
   40268:	bl	2d910 <__assert_fail@plt+0x1b174>
   4026c:	cmp	r5, #0
   40270:	strne	r5, [r4]
   40274:	b	401f0 <fts_children@@Base+0xe754>
   40278:	bl	124d8 <__errno_location@plt>
   4027c:	mvn	r7, #0
   40280:	mov	r4, r0
   40284:	ldr	r0, [sp, #4]
   40288:	ldr	r5, [r4]
   4028c:	bl	2d910 <__assert_fail@plt+0x1b174>
   40290:	str	r5, [r4]
   40294:	b	401f0 <fts_children@@Base+0xe754>
   40298:	ldr	r0, [sp, #4]
   4029c:	bl	2d910 <__assert_fail@plt+0x1b174>
   402a0:	bl	124d8 <__errno_location@plt>
   402a4:	mov	r3, #9
   402a8:	mvn	r7, #0
   402ac:	str	r3, [r0]
   402b0:	b	401f0 <fts_children@@Base+0xe754>
   402b4:	bl	12244 <__stack_chk_fail@plt>
   402b8:	bl	124d8 <__errno_location@plt>
   402bc:	ldr	r0, [r0]
   402c0:	bl	258f4 <__assert_fail@plt+0x13158>
   402c4:	bl	124d8 <__errno_location@plt>
   402c8:	ldr	r0, [r0]
   402cc:	bl	258b8 <__assert_fail@plt+0x1311c>
   402d0:	andeq	fp, r5, r0, ror #24
   402d4:	push	{r4, r5, r6, r7, r8, lr}
   402d8:	mov	r6, #1
   402dc:	mov	ip, r6
   402e0:	mov	lr, #0
   402e4:	mvn	r4, #0
   402e8:	add	r3, ip, lr
   402ec:	cmp	r3, r1
   402f0:	add	r5, r0, r4
   402f4:	bcs	40324 <fts_children@@Base+0xe888>
   402f8:	ldrb	r5, [r5, ip]
   402fc:	ldrb	r7, [r0, r3]
   40300:	cmp	r7, r5
   40304:	bcs	4038c <fts_children@@Base+0xe8f0>
   40308:	mov	lr, r3
   4030c:	mov	ip, #1
   40310:	sub	r6, r3, r4
   40314:	add	r3, ip, lr
   40318:	cmp	r3, r1
   4031c:	add	r5, r0, r4
   40320:	bcc	402f8 <fts_children@@Base+0xe85c>
   40324:	mov	r8, #1
   40328:	mov	ip, r8
   4032c:	mov	lr, #0
   40330:	mvn	r5, #0
   40334:	str	r6, [r2]
   40338:	add	r3, ip, lr
   4033c:	cmp	r1, r3
   40340:	add	r6, r0, r5
   40344:	bls	40374 <fts_children@@Base+0xe8d8>
   40348:	ldrb	r6, [r6, ip]
   4034c:	ldrb	r7, [r0, r3]
   40350:	cmp	r7, r6
   40354:	bls	403a4 <fts_children@@Base+0xe908>
   40358:	mov	lr, r3
   4035c:	mov	ip, #1
   40360:	sub	r8, r3, r5
   40364:	add	r3, ip, lr
   40368:	cmp	r1, r3
   4036c:	add	r6, r0, r5
   40370:	bhi	40348 <fts_children@@Base+0xe8ac>
   40374:	add	r0, r4, #1
   40378:	add	r5, r5, #1
   4037c:	cmp	r5, r0
   40380:	strcs	r8, [r2]
   40384:	movcs	r0, r5
   40388:	pop	{r4, r5, r6, r7, r8, pc}
   4038c:	beq	403bc <fts_children@@Base+0xe920>
   40390:	mov	r6, #1
   40394:	mov	r4, lr
   40398:	mov	ip, r6
   4039c:	add	lr, lr, r6
   403a0:	b	402e8 <fts_children@@Base+0xe84c>
   403a4:	beq	403d0 <fts_children@@Base+0xe934>
   403a8:	mov	r8, #1
   403ac:	mov	r5, lr
   403b0:	mov	ip, r8
   403b4:	add	lr, lr, r8
   403b8:	b	40338 <fts_children@@Base+0xe89c>
   403bc:	cmp	ip, r6
   403c0:	addne	ip, ip, #1
   403c4:	moveq	lr, r3
   403c8:	moveq	ip, #1
   403cc:	b	402e8 <fts_children@@Base+0xe84c>
   403d0:	cmp	ip, r8
   403d4:	addne	ip, ip, #1
   403d8:	moveq	lr, r3
   403dc:	moveq	ip, #1
   403e0:	b	40338 <fts_children@@Base+0xe89c>
   403e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   403e8:	cmp	r3, #2
   403ec:	mov	r4, r3
   403f0:	ldr	r3, [pc, #1048]	; 40810 <fts_children@@Base+0xed74>
   403f4:	sub	sp, sp, #1056	; 0x420
   403f8:	sub	sp, sp, #12
   403fc:	ldr	r3, [r3]
   40400:	mov	r5, r0
   40404:	mov	fp, r1
   40408:	mov	sl, r2
   4040c:	str	r3, [sp, #1060]	; 0x424
   40410:	bls	407e8 <fts_children@@Base+0xed4c>
   40414:	add	r6, sp, #40	; 0x28
   40418:	sub	r2, r6, #8
   4041c:	mov	r1, r4
   40420:	mov	r0, sl
   40424:	bl	402d4 <fts_children@@Base+0xe838>
   40428:	ldr	r3, [sp, #32]
   4042c:	str	r3, [sp]
   40430:	str	r0, [sp, #4]
   40434:	sub	r3, r6, #8
   40438:	add	r2, r6, #1016	; 0x3f8
   4043c:	str	r4, [r3, #4]!
   40440:	cmp	r2, r3
   40444:	bne	4043c <fts_children@@Base+0xe9a0>
   40448:	ldr	r3, [sp]
   4044c:	cmp	r4, #0
   40450:	add	r1, sl, r3
   40454:	beq	40604 <fts_children@@Base+0xeb68>
   40458:	sub	r3, r4, #1
   4045c:	add	ip, sl, r3
   40460:	sub	r2, sl, #1
   40464:	str	r3, [sp, #8]
   40468:	ldrb	r0, [r2, #1]!
   4046c:	add	lr, sp, #1056	; 0x420
   40470:	add	lr, lr, #8
   40474:	mvn	r3, r2
   40478:	add	r0, lr, r0, lsl #2
   4047c:	add	r3, r3, r4
   40480:	add	r3, sl, r3
   40484:	cmp	r2, ip
   40488:	str	r3, [r0, #-1028]	; 0xfffffbfc
   4048c:	bne	40468 <fts_children@@Base+0xe9cc>
   40490:	ldr	r2, [sp, #4]
   40494:	mov	r0, sl
   40498:	bl	12208 <memcmp@plt>
   4049c:	cmp	r0, #0
   404a0:	beq	40648 <fts_children@@Base+0xebac>
   404a4:	ldr	r2, [sp, #4]
   404a8:	sub	r8, r4, #2
   404ac:	sub	r3, r4, r2
   404b0:	cmp	r3, r2
   404b4:	movcc	r3, r2
   404b8:	sub	r1, r2, #1
   404bc:	add	r3, r3, #1
   404c0:	str	r3, [sp, #20]
   404c4:	add	r3, sl, r1
   404c8:	str	r3, [sp, #12]
   404cc:	sub	r3, r4, #1
   404d0:	str	r3, [sp, #4]
   404d4:	add	r3, sl, r2
   404d8:	str	r3, [sp]
   404dc:	rsb	r3, r2, #1
   404e0:	mov	r0, fp
   404e4:	str	r1, [sp, #16]
   404e8:	add	r8, r8, sl
   404ec:	mov	r7, #0
   404f0:	str	r3, [sp, #8]
   404f4:	rsb	r9, sl, #1
   404f8:	mov	fp, r2
   404fc:	b	40504 <fts_children@@Base+0xea68>
   40500:	mov	r0, r6
   40504:	add	r6, r7, r4
   40508:	sub	r2, r6, r0
   4050c:	mov	r1, #0
   40510:	add	r0, r5, r0
   40514:	bl	1258c <memchr@plt>
   40518:	cmp	r6, #0
   4051c:	clz	r0, r0
   40520:	lsr	r0, r0, #5
   40524:	moveq	r0, #0
   40528:	cmp	r0, #0
   4052c:	beq	40618 <fts_children@@Base+0xeb7c>
   40530:	add	r2, r5, r6
   40534:	add	r3, sp, #1056	; 0x420
   40538:	ldrb	r2, [r2, #-1]
   4053c:	add	r3, r3, #8
   40540:	add	r2, r3, r2, lsl #2
   40544:	ldr	r2, [r2, #-1028]	; 0xfffffbfc
   40548:	cmp	r2, #0
   4054c:	addne	r7, r7, r2
   40550:	bne	40500 <fts_children@@Base+0xea64>
   40554:	ldr	r3, [sp, #4]
   40558:	cmp	fp, r3
   4055c:	bcs	405a4 <fts_children@@Base+0xeb08>
   40560:	ldr	r3, [sp]
   40564:	add	r1, r7, fp
   40568:	ldrb	r2, [r3]
   4056c:	ldrb	r0, [r5, r1]
   40570:	add	r1, r5, r1
   40574:	cmp	r0, r2
   40578:	movne	lr, fp
   4057c:	bne	405f4 <fts_children@@Base+0xeb58>
   40580:	ldr	r2, [sp]
   40584:	b	40598 <fts_children@@Base+0xeafc>
   40588:	ldrb	r0, [r2, #1]!
   4058c:	ldrb	r3, [r1, #1]!
   40590:	cmp	r0, r3
   40594:	bne	405f4 <fts_children@@Base+0xeb58>
   40598:	cmp	r8, r2
   4059c:	add	lr, r9, r2
   405a0:	bne	40588 <fts_children@@Base+0xeaec>
   405a4:	ldr	r3, [sp, #16]
   405a8:	cmn	r3, #1
   405ac:	beq	405ec <fts_children@@Base+0xeb50>
   405b0:	add	r2, r7, r3
   405b4:	ldr	r3, [sp, #12]
   405b8:	ldrb	ip, [r5, r2]
   405bc:	add	r1, r5, r2
   405c0:	ldrb	r0, [r3]
   405c4:	cmp	ip, r0
   405c8:	ldreq	r2, [sp, #12]
   405cc:	beq	405e4 <fts_children@@Base+0xeb48>
   405d0:	b	4063c <fts_children@@Base+0xeba0>
   405d4:	ldrb	r0, [r2, #-1]!
   405d8:	ldrb	r3, [r1, #-1]!
   405dc:	cmp	r0, r3
   405e0:	bne	4063c <fts_children@@Base+0xeba0>
   405e4:	cmp	sl, r2
   405e8:	bne	405d4 <fts_children@@Base+0xeb38>
   405ec:	add	r0, r5, r7
   405f0:	b	4061c <fts_children@@Base+0xeb80>
   405f4:	ldr	r3, [sp, #8]
   405f8:	add	r7, r3, r7
   405fc:	add	r7, lr, r7
   40600:	b	40500 <fts_children@@Base+0xea64>
   40604:	ldr	r2, [sp, #4]
   40608:	mov	r0, sl
   4060c:	bl	12208 <memcmp@plt>
   40610:	cmp	r0, #0
   40614:	bne	404a4 <fts_children@@Base+0xea08>
   40618:	mov	r0, #0
   4061c:	ldr	r3, [pc, #492]	; 40810 <fts_children@@Base+0xed74>
   40620:	ldr	r2, [sp, #1060]	; 0x424
   40624:	ldr	r3, [r3]
   40628:	cmp	r2, r3
   4062c:	bne	4080c <fts_children@@Base+0xed70>
   40630:	add	sp, sp, #1056	; 0x420
   40634:	add	sp, sp, #12
   40638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4063c:	ldr	r3, [sp, #20]
   40640:	add	r7, r7, r3
   40644:	b	40500 <fts_children@@Base+0xea64>
   40648:	ldr	r2, [sp, #4]
   4064c:	mov	r1, r0
   40650:	sub	r3, r2, #1
   40654:	str	r3, [sp, #28]
   40658:	add	r3, sl, r3
   4065c:	str	r3, [sp, #24]
   40660:	ldr	r3, [sp]
   40664:	sub	r8, r4, #2
   40668:	sub	r3, r4, r3
   4066c:	str	r3, [sp, #20]
   40670:	rsb	r3, r2, #1
   40674:	mov	r7, r0
   40678:	add	r8, sl, r8
   4067c:	rsb	r9, sl, #1
   40680:	str	sl, [sp, #12]
   40684:	str	r3, [sp, #16]
   40688:	mov	r0, fp
   4068c:	mov	sl, r1
   40690:	b	406b0 <fts_children@@Base+0xec14>
   40694:	ldr	r2, [sp]
   40698:	cmp	sl, #0
   4069c:	cmpne	r3, r2
   406a0:	mov	sl, #0
   406a4:	ldrcc	r3, [sp, #20]
   406a8:	add	r7, r7, r3
   406ac:	mov	r0, r6
   406b0:	add	r6, r7, r4
   406b4:	sub	r2, r6, r0
   406b8:	mov	r1, #0
   406bc:	add	r0, r5, r0
   406c0:	bl	1258c <memchr@plt>
   406c4:	adds	r3, r6, #0
   406c8:	movne	r3, #1
   406cc:	cmp	r0, #0
   406d0:	moveq	r0, r3
   406d4:	movne	r0, #0
   406d8:	cmp	r0, #0
   406dc:	beq	40618 <fts_children@@Base+0xeb7c>
   406e0:	add	r3, r5, r6
   406e4:	add	r2, sp, #1056	; 0x420
   406e8:	ldrb	r3, [r3, #-1]
   406ec:	add	r2, r2, #8
   406f0:	add	r3, r2, r3, lsl #2
   406f4:	ldr	r3, [r3, #-1028]	; 0xfffffbfc
   406f8:	cmp	r3, #0
   406fc:	bne	40694 <fts_children@@Base+0xebf8>
   40700:	ldr	r3, [sp, #4]
   40704:	cmp	sl, r3
   40708:	movcc	ip, r3
   4070c:	ldr	r3, [sp, #8]
   40710:	movcs	ip, sl
   40714:	cmp	ip, r3
   40718:	bcs	4075c <fts_children@@Base+0xecc0>
   4071c:	ldr	r3, [sp, #12]
   40720:	add	r2, r7, ip
   40724:	ldrb	r1, [r3, ip]
   40728:	ldrb	r0, [r5, r2]
   4072c:	add	r3, r3, ip
   40730:	add	r2, r5, r2
   40734:	cmp	r1, r0
   40738:	beq	40750 <fts_children@@Base+0xecb4>
   4073c:	b	407d4 <fts_children@@Base+0xed38>
   40740:	ldrb	r0, [r3, #1]!
   40744:	ldrb	r1, [r2, #1]!
   40748:	cmp	r0, r1
   4074c:	bne	407d4 <fts_children@@Base+0xed38>
   40750:	cmp	r8, r3
   40754:	add	ip, r9, r3
   40758:	bne	40740 <fts_children@@Base+0xeca4>
   4075c:	ldr	r3, [sp, #4]
   40760:	cmp	sl, r3
   40764:	bcs	40804 <fts_children@@Base+0xed68>
   40768:	ldr	r3, [sp, #28]
   4076c:	ldr	r2, [sp, #24]
   40770:	add	r3, r7, r3
   40774:	ldrb	r2, [r2]
   40778:	ldrb	r1, [r5, r3]
   4077c:	add	r3, r5, r3
   40780:	cmp	r1, r2
   40784:	bne	40804 <fts_children@@Base+0xed68>
   40788:	add	ip, r7, sl
   4078c:	add	ip, ip, r5
   40790:	ldr	r2, [sp, #24]
   40794:	add	fp, r5, r7
   40798:	b	407ac <fts_children@@Base+0xed10>
   4079c:	ldrb	r0, [r2, #-1]!
   407a0:	ldrb	r1, [r3, #-1]!
   407a4:	cmp	r0, r1
   407a8:	bne	407b8 <fts_children@@Base+0xed1c>
   407ac:	cmp	ip, r3
   407b0:	sub	lr, r3, fp
   407b4:	bne	4079c <fts_children@@Base+0xed00>
   407b8:	add	sl, sl, #1
   407bc:	cmp	sl, lr
   407c0:	bhi	405ec <fts_children@@Base+0xeb50>
   407c4:	ldr	r3, [sp]
   407c8:	ldr	sl, [sp, #20]
   407cc:	add	r7, r7, r3
   407d0:	b	406ac <fts_children@@Base+0xec10>
   407d4:	ldr	r3, [sp, #16]
   407d8:	mov	sl, #0
   407dc:	add	r7, r3, r7
   407e0:	add	r7, ip, r7
   407e4:	b	406ac <fts_children@@Base+0xec10>
   407e8:	mov	r3, #1
   407ec:	sub	r2, r4, #1
   407f0:	str	r3, [sp]
   407f4:	str	r2, [sp, #4]
   407f8:	add	r6, sp, #40	; 0x28
   407fc:	str	r3, [sp, #32]
   40800:	b	40434 <fts_children@@Base+0xe998>
   40804:	ldr	lr, [sp, #4]
   40808:	b	407b8 <fts_children@@Base+0xed1c>
   4080c:	bl	12244 <__stack_chk_fail@plt>
   40810:	andeq	fp, r5, r0, ror #24
   40814:	ldr	r3, [pc, #1032]	; 40c24 <fts_children@@Base+0xf188>
   40818:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   4081c:	sub	sp, sp, #44	; 0x2c
   40820:	ldrb	r4, [r0]
   40824:	ldr	r3, [r3]
   40828:	mov	r6, r1
   4082c:	cmp	r4, #0
   40830:	mov	r5, r0
   40834:	str	r3, [sp, #36]	; 0x24
   40838:	ldrb	r1, [r1]
   4083c:	beq	40bf0 <fts_children@@Base+0xf154>
   40840:	cmp	r1, #0
   40844:	beq	40908 <fts_children@@Base+0xee6c>
   40848:	mov	ip, r0
   4084c:	add	r3, r6, #1
   40850:	mov	r2, r1
   40854:	mov	r0, #1
   40858:	b	40864 <fts_children@@Base+0xedc8>
   4085c:	cmp	r2, #0
   40860:	beq	4088c <fts_children@@Base+0xedf0>
   40864:	cmp	r2, r4
   40868:	movne	r0, #0
   4086c:	andeq	r0, r0, #1
   40870:	ldrb	r4, [ip, #1]!
   40874:	mov	r7, r3
   40878:	ldrb	r2, [r3], #1
   4087c:	cmp	r4, #0
   40880:	bne	4085c <fts_children@@Base+0xedc0>
   40884:	cmp	r2, #0
   40888:	bne	408e8 <fts_children@@Base+0xee4c>
   4088c:	cmp	r0, #0
   40890:	bne	40908 <fts_children@@Base+0xee6c>
   40894:	add	r0, r5, #1
   40898:	bl	124a8 <strchr@plt>
   4089c:	sub	r6, r7, r6
   408a0:	subs	r4, r0, #0
   408a4:	beq	408e8 <fts_children@@Base+0xee4c>
   408a8:	cmp	r6, #1
   408ac:	beq	408e8 <fts_children@@Base+0xee4c>
   408b0:	add	r5, r5, r6
   408b4:	cmp	r5, r4
   408b8:	sub	r3, r7, r6
   408bc:	subcs	r5, r5, r4
   408c0:	movcc	r5, #1
   408c4:	cmp	r6, #31
   408c8:	str	r3, [sp, #4]
   408cc:	bls	40910 <fts_children@@Base+0xee74>
   408d0:	mov	r3, r6
   408d4:	ldr	r2, [sp, #4]
   408d8:	mov	r1, r5
   408dc:	mov	r0, r4
   408e0:	bl	403e4 <fts_children@@Base+0xe948>
   408e4:	mov	r4, r0
   408e8:	ldr	r3, [pc, #820]	; 40c24 <fts_children@@Base+0xf188>
   408ec:	ldr	r2, [sp, #36]	; 0x24
   408f0:	mov	r0, r4
   408f4:	ldr	r3, [r3]
   408f8:	cmp	r2, r3
   408fc:	bne	40c20 <fts_children@@Base+0xf184>
   40900:	add	sp, sp, #44	; 0x2c
   40904:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   40908:	mov	r4, r5
   4090c:	b	408e8 <fts_children@@Base+0xee4c>
   40910:	cmp	r6, #2
   40914:	bls	40c00 <fts_children@@Base+0xf164>
   40918:	add	r2, sp, #32
   4091c:	mov	r1, r6
   40920:	ldr	r0, [sp, #4]
   40924:	bl	402d4 <fts_children@@Base+0xe838>
   40928:	ldr	r3, [sp, #32]
   4092c:	str	r3, [sp, #16]
   40930:	str	r0, [sp, #8]
   40934:	ldr	r3, [sp, #4]
   40938:	ldr	r1, [sp, #16]
   4093c:	ldr	r2, [sp, #8]
   40940:	add	r1, r3, r1
   40944:	mov	r0, r3
   40948:	bl	12208 <memcmp@plt>
   4094c:	subs	sl, r0, #0
   40950:	bne	40ab4 <fts_children@@Base+0xf018>
   40954:	ldr	r3, [sp, #8]
   40958:	sub	r7, r6, #1
   4095c:	sub	r2, r3, #1
   40960:	mov	r1, r2
   40964:	str	r2, [sp, #20]
   40968:	ldr	r2, [sp, #4]
   4096c:	str	r6, [sp, #8]
   40970:	add	r1, r2, r1
   40974:	str	r1, [sp, #28]
   40978:	ldr	r1, [sp, #16]
   4097c:	mov	r9, sl
   40980:	sub	r1, r6, r1
   40984:	add	r7, r7, r2
   40988:	rsb	r8, r2, #1
   4098c:	mov	r0, r5
   40990:	mov	r6, r3
   40994:	str	r1, [sp, #24]
   40998:	rsb	r1, r3, #1
   4099c:	str	r1, [sp, #12]
   409a0:	ldr	r3, [sp, #8]
   409a4:	mov	r1, #0
   409a8:	add	fp, r3, r9
   409ac:	sub	r2, fp, r0
   409b0:	add	r0, r4, r0
   409b4:	bl	1258c <memchr@plt>
   409b8:	cmp	fp, #0
   409bc:	clz	r0, r0
   409c0:	lsr	r0, r0, #5
   409c4:	moveq	r0, #0
   409c8:	cmp	r0, #0
   409cc:	beq	408e4 <fts_children@@Base+0xee48>
   409d0:	cmp	r6, sl
   409d4:	ldr	r3, [sp, #8]
   409d8:	movcs	ip, r6
   409dc:	movcc	ip, sl
   409e0:	cmp	r3, ip
   409e4:	bls	40a28 <fts_children@@Base+0xef8c>
   409e8:	ldr	r3, [sp, #4]
   409ec:	add	r2, ip, r9
   409f0:	ldrb	r1, [r3, ip]
   409f4:	ldrb	r0, [r4, r2]
   409f8:	add	r3, r3, ip
   409fc:	add	r2, r4, r2
   40a00:	cmp	r0, r1
   40a04:	beq	40a1c <fts_children@@Base+0xef80>
   40a08:	b	40aa0 <fts_children@@Base+0xf004>
   40a0c:	ldrb	r0, [r3, #1]!
   40a10:	ldrb	r1, [r2, #1]!
   40a14:	cmp	r0, r1
   40a18:	bne	40aa0 <fts_children@@Base+0xf004>
   40a1c:	cmp	r7, r3
   40a20:	add	ip, r8, r3
   40a24:	bne	40a0c <fts_children@@Base+0xef70>
   40a28:	cmp	r6, sl
   40a2c:	bls	40c18 <fts_children@@Base+0xf17c>
   40a30:	ldr	r3, [sp, #20]
   40a34:	ldr	r0, [sp, #28]
   40a38:	add	r3, r9, r3
   40a3c:	ldrb	r1, [r0]
   40a40:	ldrb	r2, [r4, r3]
   40a44:	add	r3, r4, r3
   40a48:	cmp	r1, r2
   40a4c:	bne	40c18 <fts_children@@Base+0xf17c>
   40a50:	add	ip, sl, r9
   40a54:	add	ip, ip, r4
   40a58:	mov	r2, r0
   40a5c:	add	r5, r4, r9
   40a60:	b	40a74 <fts_children@@Base+0xefd8>
   40a64:	ldrb	r0, [r2, #-1]!
   40a68:	ldrb	r1, [r3, #-1]!
   40a6c:	cmp	r0, r1
   40a70:	bne	40a80 <fts_children@@Base+0xefe4>
   40a74:	cmp	ip, r3
   40a78:	sub	lr, r3, r5
   40a7c:	bne	40a64 <fts_children@@Base+0xefc8>
   40a80:	add	sl, sl, #1
   40a84:	cmp	sl, lr
   40a88:	bhi	40bc8 <fts_children@@Base+0xf12c>
   40a8c:	ldr	r3, [sp, #16]
   40a90:	ldr	sl, [sp, #24]
   40a94:	add	r9, r9, r3
   40a98:	mov	r0, fp
   40a9c:	b	409a0 <fts_children@@Base+0xef04>
   40aa0:	ldr	r3, [sp, #12]
   40aa4:	mov	sl, #0
   40aa8:	add	r9, r3, r9
   40aac:	add	r9, ip, r9
   40ab0:	b	40a98 <fts_children@@Base+0xeffc>
   40ab4:	ldr	r2, [sp, #8]
   40ab8:	sub	r7, r6, #1
   40abc:	sub	r3, r6, r2
   40ac0:	cmp	r3, r2
   40ac4:	movcc	r3, r2
   40ac8:	add	r3, r3, #1
   40acc:	str	r3, [sp, #16]
   40ad0:	ldr	r3, [sp, #4]
   40ad4:	sub	r1, r2, #1
   40ad8:	mov	r0, r5
   40adc:	add	r7, r7, r3
   40ae0:	mov	r9, #0
   40ae4:	rsb	r8, r3, #1
   40ae8:	mov	r5, r3
   40aec:	str	r1, [sp, #12]
   40af0:	add	fp, r3, r2
   40af4:	add	r1, r3, r1
   40af8:	rsb	r2, r2, #1
   40afc:	str	r1, [sp, #20]
   40b00:	str	r2, [sp, #4]
   40b04:	add	sl, r6, r9
   40b08:	sub	r2, sl, r0
   40b0c:	mov	r1, #0
   40b10:	add	r0, r4, r0
   40b14:	bl	1258c <memchr@plt>
   40b18:	cmp	sl, #0
   40b1c:	clz	r0, r0
   40b20:	lsr	r0, r0, #5
   40b24:	moveq	r0, #0
   40b28:	cmp	r0, #0
   40b2c:	beq	408e4 <fts_children@@Base+0xee48>
   40b30:	ldr	r3, [sp, #8]
   40b34:	cmp	r6, r3
   40b38:	bls	40b7c <fts_children@@Base+0xf0e0>
   40b3c:	add	r1, r3, r9
   40b40:	ldrb	r2, [fp]
   40b44:	ldrb	r0, [r4, r1]
   40b48:	add	r1, r4, r1
   40b4c:	cmp	r0, r2
   40b50:	movne	lr, r3
   40b54:	bne	40bd0 <fts_children@@Base+0xf134>
   40b58:	mov	r2, fp
   40b5c:	b	40b70 <fts_children@@Base+0xf0d4>
   40b60:	ldrb	r0, [r2, #1]!
   40b64:	ldrb	r3, [r1, #1]!
   40b68:	cmp	r0, r3
   40b6c:	bne	40bd0 <fts_children@@Base+0xf134>
   40b70:	cmp	r2, r7
   40b74:	add	lr, r8, r2
   40b78:	bne	40b60 <fts_children@@Base+0xf0c4>
   40b7c:	ldr	r3, [sp, #12]
   40b80:	cmn	r3, #1
   40b84:	beq	40bc8 <fts_children@@Base+0xf12c>
   40b88:	ldr	r3, [sp, #12]
   40b8c:	add	r1, r9, r3
   40b90:	ldr	r3, [sp, #20]
   40b94:	ldrb	r0, [r4, r1]
   40b98:	add	r1, r4, r1
   40b9c:	ldrb	r2, [r3]
   40ba0:	cmp	r0, r2
   40ba4:	bne	40be4 <fts_children@@Base+0xf148>
   40ba8:	mov	r2, r3
   40bac:	b	40bc0 <fts_children@@Base+0xf124>
   40bb0:	ldrb	r0, [r2, #-1]!
   40bb4:	ldrb	r3, [r1, #-1]!
   40bb8:	cmp	r0, r3
   40bbc:	bne	40be4 <fts_children@@Base+0xf148>
   40bc0:	cmp	r5, r2
   40bc4:	bne	40bb0 <fts_children@@Base+0xf114>
   40bc8:	add	r4, r4, r9
   40bcc:	b	408e8 <fts_children@@Base+0xee4c>
   40bd0:	ldr	r3, [sp, #4]
   40bd4:	add	r9, r3, r9
   40bd8:	add	r9, lr, r9
   40bdc:	mov	r0, sl
   40be0:	b	40b04 <fts_children@@Base+0xf068>
   40be4:	ldr	r3, [sp, #16]
   40be8:	add	r9, r9, r3
   40bec:	b	40bdc <fts_children@@Base+0xf140>
   40bf0:	cmp	r1, #0
   40bf4:	moveq	r4, r0
   40bf8:	movne	r4, #0
   40bfc:	b	408e8 <fts_children@@Base+0xee4c>
   40c00:	mov	r3, #1
   40c04:	sub	r2, r6, #1
   40c08:	str	r3, [sp, #16]
   40c0c:	str	r2, [sp, #8]
   40c10:	str	r3, [sp, #32]
   40c14:	b	40934 <fts_children@@Base+0xee98>
   40c18:	mov	lr, r6
   40c1c:	b	40a80 <fts_children@@Base+0xefe4>
   40c20:	bl	12244 <__stack_chk_fail@plt>
   40c24:	andeq	fp, r5, r0, ror #24
   40c28:	push	{r4, lr}
   40c2c:	ldrb	r3, [r0, #4]
   40c30:	cmp	r3, #0
   40c34:	bne	40c50 <fts_children@@Base+0xf1b4>
   40c38:	ldr	r0, [pc, #52]	; 40c74 <fts_children@@Base+0xf1d8>
   40c3c:	bl	1270c <unsetenv@plt>
   40c40:	cmp	r0, #0
   40c44:	beq	40c68 <fts_children@@Base+0xf1cc>
   40c48:	mov	r0, #0
   40c4c:	pop	{r4, pc}
   40c50:	add	r1, r0, #5
   40c54:	mov	r2, #1
   40c58:	ldr	r0, [pc, #20]	; 40c74 <fts_children@@Base+0xf1d8>
   40c5c:	bl	124b4 <setenv@plt>
   40c60:	cmp	r0, #0
   40c64:	bne	40c48 <fts_children@@Base+0xf1ac>
   40c68:	bl	122c8 <tzset@plt>
   40c6c:	mov	r0, #1
   40c70:	pop	{r4, pc}
   40c74:			; <UNDEFINED> instruction: 0x00049eb8
   40c78:	cmp	r0, #0
   40c7c:	bxeq	lr
   40c80:	push	{r4, lr}
   40c84:	ldr	r4, [r0]
   40c88:	bl	12154 <free@plt>
   40c8c:	subs	r0, r4, #0
   40c90:	bne	40c84 <fts_children@@Base+0xf1e8>
   40c94:	pop	{r4, pc}
   40c98:	push	{r4, r5, r6, r7, r8, lr}
   40c9c:	mov	r5, r0
   40ca0:	bl	124d8 <__errno_location@plt>
   40ca4:	mov	r4, r0
   40ca8:	mov	r0, r5
   40cac:	ldr	r6, [r4]
   40cb0:	bl	40c28 <fts_children@@Base+0xf18c>
   40cb4:	subs	r7, r0, #0
   40cb8:	mov	r0, r5
   40cbc:	ldreq	r6, [r4]
   40cc0:	bl	40c78 <fts_children@@Base+0xf1dc>
   40cc4:	str	r6, [r4]
   40cc8:	mov	r0, r7
   40ccc:	pop	{r4, r5, r6, r7, r8, pc}
   40cd0:	push	{r4, r5, r6, r7, r8, lr}
   40cd4:	subs	r6, r0, #0
   40cd8:	beq	40d34 <fts_children@@Base+0xf298>
   40cdc:	bl	1249c <strlen@plt>
   40ce0:	add	r5, r0, #1
   40ce4:	cmp	r5, #58	; 0x3a
   40ce8:	movcs	r0, r5
   40cec:	movcc	r0, #58	; 0x3a
   40cf0:	add	r0, r0, #9
   40cf4:	bic	r0, r0, #3
   40cf8:	bl	123dc <malloc@plt>
   40cfc:	subs	r4, r0, #0
   40d00:	beq	40d2c <fts_children@@Base+0xf290>
   40d04:	mov	r7, #0
   40d08:	mov	r2, #1
   40d0c:	add	r3, r4, #5
   40d10:	strh	r2, [r4, #4]
   40d14:	mov	r1, r6
   40d18:	str	r7, [r4]
   40d1c:	mov	r0, r3
   40d20:	mov	r2, r5
   40d24:	bl	121a8 <memcpy@plt>
   40d28:	strb	r7, [r0, r5]
   40d2c:	mov	r0, r4
   40d30:	pop	{r4, r5, r6, r7, r8, pc}
   40d34:	mov	r0, #64	; 0x40
   40d38:	bl	123dc <malloc@plt>
   40d3c:	subs	r4, r0, #0
   40d40:	mov	r0, r4
   40d44:	strne	r6, [r4]
   40d48:	strhne	r6, [r4, #4]
   40d4c:	pop	{r4, r5, r6, r7, r8, pc}
   40d50:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   40d54:	ldr	r7, [r1, #40]	; 0x28
   40d58:	cmp	r7, #0
   40d5c:	beq	40e38 <fts_children@@Base+0xf39c>
   40d60:	cmp	r1, r7
   40d64:	mov	r8, r1
   40d68:	mov	r6, r0
   40d6c:	bhi	40d7c <fts_children@@Base+0xf2e0>
   40d70:	add	r3, r1, #44	; 0x2c
   40d74:	cmp	r7, r3
   40d78:	bcc	40e38 <fts_children@@Base+0xf39c>
   40d7c:	ldrb	r3, [r7]
   40d80:	cmp	r3, #0
   40d84:	addne	r4, r6, #5
   40d88:	beq	40e30 <fts_children@@Base+0xf394>
   40d8c:	mov	r1, r7
   40d90:	mov	r0, r4
   40d94:	bl	120dc <strcmp@plt>
   40d98:	add	r5, r6, #5
   40d9c:	cmp	r0, #0
   40da0:	mov	r0, r4
   40da4:	beq	40e20 <fts_children@@Base+0xf384>
   40da8:	ldrb	r9, [r4]
   40dac:	cmp	r9, #0
   40db0:	bne	40dc8 <fts_children@@Base+0xf32c>
   40db4:	cmp	r5, r4
   40db8:	bne	40e44 <fts_children@@Base+0xf3a8>
   40dbc:	ldrb	r5, [r6, #4]
   40dc0:	cmp	r5, #0
   40dc4:	beq	40df0 <fts_children@@Base+0xf354>
   40dc8:	bl	1249c <strlen@plt>
   40dcc:	add	r0, r0, #1
   40dd0:	ldrb	r3, [r4, r0]!
   40dd4:	cmp	r3, #0
   40dd8:	bne	40d8c <fts_children@@Base+0xf2f0>
   40ddc:	ldr	r3, [r6]
   40de0:	cmp	r3, #0
   40de4:	addne	r4, r3, #5
   40de8:	movne	r6, r3
   40dec:	b	40d8c <fts_children@@Base+0xf2f0>
   40df0:	mov	r0, r7
   40df4:	bl	1249c <strlen@plt>
   40df8:	add	sl, r0, #1
   40dfc:	add	r5, sl, r5
   40e00:	cmp	r5, #58	; 0x3a
   40e04:	bhi	40e70 <fts_children@@Base+0xf3d4>
   40e08:	mov	r1, r7
   40e0c:	mov	r2, sl
   40e10:	mov	r0, r4
   40e14:	bl	121a8 <memcpy@plt>
   40e18:	mov	r3, #0
   40e1c:	strb	r3, [r4, sl]
   40e20:	mov	r9, #1
   40e24:	str	r4, [r8, #40]	; 0x28
   40e28:	mov	r0, r9
   40e2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   40e30:	ldr	r4, [pc, #96]	; 40e98 <fts_children@@Base+0xf3fc>
   40e34:	b	40e20 <fts_children@@Base+0xf384>
   40e38:	mov	r9, #1
   40e3c:	mov	r0, r9
   40e40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   40e44:	mov	r0, r7
   40e48:	bl	1249c <strlen@plt>
   40e4c:	sub	r5, r4, r5
   40e50:	mvn	r3, r5
   40e54:	add	sl, r0, #1
   40e58:	cmp	r3, sl
   40e5c:	bcs	40dfc <fts_children@@Base+0xf360>
   40e60:	bl	124d8 <__errno_location@plt>
   40e64:	mov	r3, #12
   40e68:	str	r3, [r0]
   40e6c:	b	40e28 <fts_children@@Base+0xf38c>
   40e70:	mov	r0, r7
   40e74:	bl	40cd0 <fts_children@@Base+0xf234>
   40e78:	cmp	r0, #0
   40e7c:	str	r0, [r6]
   40e80:	moveq	r9, r0
   40e84:	beq	40e28 <fts_children@@Base+0xf38c>
   40e88:	mov	r3, #0
   40e8c:	strb	r3, [r0, #4]
   40e90:	add	r4, r0, #5
   40e94:	b	40e20 <fts_children@@Base+0xf384>
   40e98:	andeq	r8, r4, r0, lsr r6
   40e9c:	push	{r4, r5, r6, lr}
   40ea0:	mov	r4, r0
   40ea4:	ldr	r0, [pc, #152]	; 40f44 <fts_children@@Base+0xf4a8>
   40ea8:	bl	123c4 <getenv@plt>
   40eac:	ldrb	r3, [r4, #4]
   40eb0:	subs	r5, r0, #0
   40eb4:	beq	40f08 <fts_children@@Base+0xf46c>
   40eb8:	cmp	r3, #0
   40ebc:	bne	40ee8 <fts_children@@Base+0xf44c>
   40ec0:	mov	r0, r5
   40ec4:	bl	40cd0 <fts_children@@Base+0xf234>
   40ec8:	subs	r5, r0, #0
   40ecc:	beq	40ee0 <fts_children@@Base+0xf444>
   40ed0:	mov	r0, r4
   40ed4:	bl	40c28 <fts_children@@Base+0xf18c>
   40ed8:	cmp	r0, #0
   40edc:	beq	40f18 <fts_children@@Base+0xf47c>
   40ee0:	mov	r0, r5
   40ee4:	pop	{r4, r5, r6, pc}
   40ee8:	mov	r1, r5
   40eec:	add	r0, r4, #5
   40ef0:	bl	120dc <strcmp@plt>
   40ef4:	cmp	r0, #0
   40ef8:	bne	40ec0 <fts_children@@Base+0xf424>
   40efc:	mov	r5, #1
   40f00:	mov	r0, r5
   40f04:	pop	{r4, r5, r6, pc}
   40f08:	cmp	r3, #0
   40f0c:	bne	40ec0 <fts_children@@Base+0xf424>
   40f10:	mov	r5, #1
   40f14:	b	40f00 <fts_children@@Base+0xf464>
   40f18:	bl	124d8 <__errno_location@plt>
   40f1c:	cmp	r5, #1
   40f20:	mov	r4, r0
   40f24:	ldr	r6, [r0]
   40f28:	beq	40f34 <fts_children@@Base+0xf498>
   40f2c:	mov	r0, r5
   40f30:	bl	40c78 <fts_children@@Base+0xf1dc>
   40f34:	mov	r5, #0
   40f38:	str	r6, [r4]
   40f3c:	mov	r0, r5
   40f40:	pop	{r4, r5, r6, pc}
   40f44:			; <UNDEFINED> instruction: 0x00049eb8
   40f48:	cmp	r0, #1
   40f4c:	bxeq	lr
   40f50:	b	40c78 <fts_children@@Base+0xf1dc>
   40f54:	subs	ip, r0, #0
   40f58:	push	{r4, r5, r6, r7, r8, lr}
   40f5c:	mov	r5, r1
   40f60:	beq	40fe0 <fts_children@@Base+0xf544>
   40f64:	mov	r4, r2
   40f68:	mov	r6, ip
   40f6c:	bl	40e9c <fts_children@@Base+0xf400>
   40f70:	subs	r7, r0, #0
   40f74:	beq	40fc0 <fts_children@@Base+0xf524>
   40f78:	mov	r0, r5
   40f7c:	mov	r1, r4
   40f80:	bl	12280 <localtime_r@plt>
   40f84:	cmp	r0, #0
   40f88:	beq	40fb0 <fts_children@@Base+0xf514>
   40f8c:	mov	r0, r6
   40f90:	mov	r1, r4
   40f94:	bl	40d50 <fts_children@@Base+0xf2b4>
   40f98:	cmp	r0, #0
   40f9c:	beq	40fb0 <fts_children@@Base+0xf514>
   40fa0:	cmp	r7, #1
   40fa4:	bne	40fc8 <fts_children@@Base+0xf52c>
   40fa8:	mov	r0, r4
   40fac:	pop	{r4, r5, r6, r7, r8, pc}
   40fb0:	cmp	r7, #1
   40fb4:	beq	40fc0 <fts_children@@Base+0xf524>
   40fb8:	mov	r0, r7
   40fbc:	bl	40c98 <fts_children@@Base+0xf1fc>
   40fc0:	mov	r0, #0
   40fc4:	pop	{r4, r5, r6, r7, r8, pc}
   40fc8:	mov	r0, r7
   40fcc:	bl	40c98 <fts_children@@Base+0xf1fc>
   40fd0:	cmp	r0, #0
   40fd4:	beq	40fc0 <fts_children@@Base+0xf524>
   40fd8:	mov	r0, r4
   40fdc:	pop	{r4, r5, r6, r7, r8, pc}
   40fe0:	mov	r0, r5
   40fe4:	mov	r1, r2
   40fe8:	pop	{r4, r5, r6, r7, r8, lr}
   40fec:	b	120a0 <gmtime_r@plt>
   40ff0:	push	{r4, r5, r6, r7, lr}
   40ff4:	sub	sp, sp, #60	; 0x3c
   40ff8:	ldr	r5, [pc, #312]	; 41138 <fts_children@@Base+0xf69c>
   40ffc:	subs	r7, r0, #0
   41000:	mov	r4, r1
   41004:	ldr	r3, [r5]
   41008:	str	r3, [sp, #52]	; 0x34
   4100c:	beq	41120 <fts_children@@Base+0xf684>
   41010:	bl	40e9c <fts_children@@Base+0xf400>
   41014:	subs	r6, r0, #0
   41018:	beq	4112c <fts_children@@Base+0xf690>
   4101c:	mov	r0, r4
   41020:	bl	1210c <mktime@plt>
   41024:	cmn	r0, #1
   41028:	str	r0, [sp, #4]
   4102c:	beq	4107c <fts_children@@Base+0xf5e0>
   41030:	mov	r1, r4
   41034:	mov	r0, r7
   41038:	bl	40d50 <fts_children@@Base+0xf2b4>
   4103c:	cmp	r0, #0
   41040:	mvneq	r3, #0
   41044:	streq	r3, [sp, #4]
   41048:	cmp	r6, #1
   4104c:	beq	41060 <fts_children@@Base+0xf5c4>
   41050:	mov	r0, r6
   41054:	bl	40c98 <fts_children@@Base+0xf1fc>
   41058:	cmp	r0, #0
   4105c:	beq	4112c <fts_children@@Base+0xf690>
   41060:	ldr	r0, [sp, #4]
   41064:	ldr	r2, [sp, #52]	; 0x34
   41068:	ldr	r3, [r5]
   4106c:	cmp	r2, r3
   41070:	bne	41134 <fts_children@@Base+0xf698>
   41074:	add	sp, sp, #60	; 0x3c
   41078:	pop	{r4, r5, r6, r7, pc}
   4107c:	add	r1, sp, #8
   41080:	add	r0, sp, #4
   41084:	bl	12280 <localtime_r@plt>
   41088:	cmp	r0, #0
   4108c:	beq	41048 <fts_children@@Base+0xf5ac>
   41090:	ldr	r0, [r4, #32]
   41094:	ldr	r1, [sp, #40]	; 0x28
   41098:	clz	r2, r0
   4109c:	clz	r3, r1
   410a0:	lsr	r2, r2, #5
   410a4:	lsr	r3, r3, #5
   410a8:	cmp	r2, r3
   410ac:	beq	410bc <fts_children@@Base+0xf620>
   410b0:	cmp	r0, #0
   410b4:	cmpge	r1, #0
   410b8:	bge	41048 <fts_children@@Base+0xf5ac>
   410bc:	ldr	r1, [sp, #24]
   410c0:	ldr	r0, [sp, #28]
   410c4:	ldr	r3, [r4, #16]
   410c8:	ldr	r2, [r4, #20]
   410cc:	eor	r3, r3, r1
   410d0:	eor	r2, r2, r0
   410d4:	ldr	r1, [r4, #12]
   410d8:	ldr	r0, [sp, #20]
   410dc:	orr	r3, r3, r2
   410e0:	eor	r1, r1, r0
   410e4:	ldr	r2, [r4, #8]
   410e8:	ldr	r0, [sp, #16]
   410ec:	orr	r3, r3, r1
   410f0:	eor	r2, r2, r0
   410f4:	ldr	r1, [r4, #4]
   410f8:	ldr	r0, [sp, #12]
   410fc:	orr	r3, r3, r2
   41100:	eor	r1, r1, r0
   41104:	ldr	r2, [r4]
   41108:	ldr	r0, [sp, #8]
   4110c:	orr	r3, r3, r1
   41110:	eor	r2, r2, r0
   41114:	orrs	r3, r3, r2
   41118:	beq	41030 <fts_children@@Base+0xf594>
   4111c:	b	41048 <fts_children@@Base+0xf5ac>
   41120:	mov	r0, r1
   41124:	bl	1267c <timegm@plt>
   41128:	b	41064 <fts_children@@Base+0xf5c8>
   4112c:	mvn	r0, #0
   41130:	b	41064 <fts_children@@Base+0xf5c8>
   41134:	bl	12244 <__stack_chk_fail@plt>
   41138:	andeq	fp, r5, r0, ror #24
   4113c:	ldr	r3, [pc, #8]	; 4114c <fts_children@@Base+0xf6b0>
   41140:	push	{r4, lr}
   41144:	ldr	r0, [r3]
   41148:	bl	12478 <exit@plt>
   4114c:	andeq	ip, r5, r0, ror #9
   41150:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41154:	mov	r5, r1
   41158:	sub	sp, sp, #12
   4115c:	mov	r4, r2
   41160:	str	r2, [sp]
   41164:	mov	r7, r3
   41168:	mov	sl, r0
   4116c:	bl	1249c <strlen@plt>
   41170:	ldr	fp, [r5]
   41174:	cmp	fp, #0
   41178:	beq	4123c <fts_children@@Base+0xf7a0>
   4117c:	mov	r6, #0
   41180:	mov	r8, r0
   41184:	str	r6, [sp, #4]
   41188:	mvn	r9, #0
   4118c:	b	411b8 <fts_children@@Base+0xf71c>
   41190:	bl	12208 <memcmp@plt>
   41194:	ldr	r3, [sp, #4]
   41198:	cmp	r0, #0
   4119c:	movne	r3, #1
   411a0:	str	r3, [sp, #4]
   411a4:	ldr	fp, [r5, #4]!
   411a8:	add	r6, r6, #1
   411ac:	cmp	fp, #0
   411b0:	add	r4, r4, r7
   411b4:	beq	41214 <fts_children@@Base+0xf778>
   411b8:	mov	r2, r8
   411bc:	mov	r1, sl
   411c0:	mov	r0, fp
   411c4:	bl	12730 <strncmp@plt>
   411c8:	cmp	r0, #0
   411cc:	mov	r0, fp
   411d0:	bne	411a4 <fts_children@@Base+0xf708>
   411d4:	bl	1249c <strlen@plt>
   411d8:	ldr	r3, [sp]
   411dc:	mov	r2, r7
   411e0:	mov	r1, r4
   411e4:	cmp	r0, r8
   411e8:	mla	r0, r7, r9, r3
   411ec:	beq	4122c <fts_children@@Base+0xf790>
   411f0:	cmn	r9, #1
   411f4:	moveq	r9, r6
   411f8:	beq	411a4 <fts_children@@Base+0xf708>
   411fc:	ldr	r3, [sp]
   41200:	cmp	r3, #0
   41204:	bne	41190 <fts_children@@Base+0xf6f4>
   41208:	mov	r3, #1
   4120c:	str	r3, [sp, #4]
   41210:	b	411a4 <fts_children@@Base+0xf708>
   41214:	ldr	r3, [sp, #4]
   41218:	cmp	r3, #0
   4121c:	mvnne	r9, #1
   41220:	mov	r0, r9
   41224:	add	sp, sp, #12
   41228:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4122c:	mov	r9, r6
   41230:	mov	r0, r9
   41234:	add	sp, sp, #12
   41238:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   4123c:	mvn	r9, #0
   41240:	b	41220 <fts_children@@Base+0xf784>
   41244:	cmn	r2, #1
   41248:	push	{r4, r5, r6, lr}
   4124c:	mov	r2, #5
   41250:	sub	sp, sp, #8
   41254:	mov	r5, r1
   41258:	mov	r6, r0
   4125c:	ldreq	r1, [pc, #76]	; 412b0 <fts_children@@Base+0xf814>
   41260:	ldrne	r1, [pc, #76]	; 412b4 <fts_children@@Base+0xf818>
   41264:	mov	r0, #0
   41268:	bl	1222c <dcgettext@plt>
   4126c:	mov	r2, r5
   41270:	mov	r1, #8
   41274:	mov	r4, r0
   41278:	mov	r0, #0
   4127c:	bl	2d52c <__assert_fail@plt+0x1ad90>
   41280:	mov	r1, r6
   41284:	mov	r5, r0
   41288:	mov	r0, #1
   4128c:	bl	2d878 <__assert_fail@plt+0x1b0dc>
   41290:	mov	r1, #0
   41294:	mov	r3, r5
   41298:	mov	r2, r4
   4129c:	str	r0, [sp]
   412a0:	mov	r0, r1
   412a4:	bl	12388 <error@plt>
   412a8:	add	sp, sp, #8
   412ac:	pop	{r4, r5, r6, pc}
   412b0:	andeq	sl, r4, r0, lsr fp
   412b4:	andeq	sl, r4, ip, asr #22
   412b8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   412bc:	mov	r6, r0
   412c0:	ldr	sl, [pc, #188]	; 41384 <fts_children@@Base+0xf8e8>
   412c4:	mov	r4, r1
   412c8:	mov	r7, r2
   412cc:	ldr	r1, [pc, #180]	; 41388 <fts_children@@Base+0xf8ec>
   412d0:	mov	r2, #5
   412d4:	mov	r0, #0
   412d8:	bl	1222c <dcgettext@plt>
   412dc:	ldr	r1, [sl]
   412e0:	bl	12724 <fputs@plt>
   412e4:	ldr	fp, [r6]
   412e8:	cmp	fp, #0
   412ec:	movne	r9, #0
   412f0:	movne	r5, r9
   412f4:	bne	41330 <fts_children@@Base+0xf894>
   412f8:	b	41374 <fts_children@@Base+0xf8d8>
   412fc:	mov	r0, fp
   41300:	bl	2d888 <__assert_fail@plt+0x1b0ec>
   41304:	ldr	r2, [pc, #128]	; 4138c <fts_children@@Base+0xf8f0>
   41308:	mov	r1, #1
   4130c:	mov	r9, r4
   41310:	mov	r3, r0
   41314:	mov	r0, r8
   41318:	bl	12580 <__fprintf_chk@plt>
   4131c:	ldr	fp, [r6, #4]!
   41320:	add	r5, r5, #1
   41324:	cmp	fp, #0
   41328:	add	r4, r4, r7
   4132c:	beq	41374 <fts_children@@Base+0xf8d8>
   41330:	cmp	r5, #0
   41334:	mov	r1, r4
   41338:	mov	r2, r7
   4133c:	mov	r0, r9
   41340:	ldr	r8, [sl]
   41344:	beq	412fc <fts_children@@Base+0xf860>
   41348:	bl	12208 <memcmp@plt>
   4134c:	cmp	r0, #0
   41350:	bne	412fc <fts_children@@Base+0xf860>
   41354:	mov	r0, fp
   41358:	bl	2d888 <__assert_fail@plt+0x1b0ec>
   4135c:	ldr	r2, [pc, #44]	; 41390 <fts_children@@Base+0xf8f4>
   41360:	mov	r1, #1
   41364:	mov	r3, r0
   41368:	mov	r0, r8
   4136c:	bl	12580 <__fprintf_chk@plt>
   41370:	b	4131c <fts_children@@Base+0xf880>
   41374:	ldr	r1, [sl]
   41378:	mov	r0, #10
   4137c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41380:	b	12688 <putc@plt>
   41384:	andeq	ip, r5, r8, lsr r5
   41388:	andeq	sl, r4, ip, ror #22
   4138c:	andeq	sl, r4, r4, lsl #23
   41390:	andeq	sl, r4, ip, lsl #23
   41394:	push	{r4, r5, r6, r7, r8, lr}
   41398:	mov	r6, r1
   4139c:	mov	r4, r2
   413a0:	mov	r5, r3
   413a4:	mov	r7, r0
   413a8:	ldr	r3, [sp, #24]
   413ac:	mov	r2, r5
   413b0:	mov	r1, r4
   413b4:	mov	r0, r6
   413b8:	bl	41150 <fts_children@@Base+0xf6b4>
   413bc:	cmp	r0, #0
   413c0:	popge	{r4, r5, r6, r7, r8, pc}
   413c4:	mov	r2, r0
   413c8:	mov	r1, r6
   413cc:	mov	r0, r7
   413d0:	bl	41244 <fts_children@@Base+0xf7a8>
   413d4:	mov	r0, r4
   413d8:	ldr	r2, [sp, #24]
   413dc:	mov	r1, r5
   413e0:	bl	412b8 <fts_children@@Base+0xf81c>
   413e4:	ldr	r3, [sp, #28]
   413e8:	blx	r3
   413ec:	mvn	r0, #0
   413f0:	pop	{r4, r5, r6, r7, r8, pc}
   413f4:	push	{r4, r5, r6, r7, r8, lr}
   413f8:	ldr	r7, [r1]
   413fc:	cmp	r7, #0
   41400:	beq	41440 <fts_children@@Base+0xf9a4>
   41404:	mov	r6, r3
   41408:	mov	r8, r0
   4140c:	mov	r4, r2
   41410:	mov	r5, r1
   41414:	b	41424 <fts_children@@Base+0xf988>
   41418:	ldr	r7, [r5, #4]!
   4141c:	cmp	r7, #0
   41420:	beq	41440 <fts_children@@Base+0xf9a4>
   41424:	mov	r1, r4
   41428:	mov	r2, r6
   4142c:	mov	r0, r8
   41430:	bl	12208 <memcmp@plt>
   41434:	add	r4, r4, r6
   41438:	cmp	r0, #0
   4143c:	bne	41418 <fts_children@@Base+0xf97c>
   41440:	mov	r0, r7
   41444:	pop	{r4, r5, r6, r7, r8, pc}
   41448:	push	{r4, r5, r6, lr}
   4144c:	mov	r4, r0
   41450:	bl	12364 <__fpending@plt>
   41454:	mov	r6, r0
   41458:	mov	r0, r4
   4145c:	bl	12178 <ferror@plt>
   41460:	mov	r5, r0
   41464:	mov	r0, r4
   41468:	bl	125b0 <fclose@plt>
   4146c:	cmp	r5, #0
   41470:	mov	r4, r0
   41474:	bne	414a0 <fts_children@@Base+0xfa04>
   41478:	cmp	r0, #0
   4147c:	beq	41498 <fts_children@@Base+0xf9fc>
   41480:	cmp	r6, #0
   41484:	bne	414b8 <fts_children@@Base+0xfa1c>
   41488:	bl	124d8 <__errno_location@plt>
   4148c:	ldr	r4, [r0]
   41490:	subs	r4, r4, #9
   41494:	mvnne	r4, #0
   41498:	mov	r0, r4
   4149c:	pop	{r4, r5, r6, pc}
   414a0:	cmp	r0, #0
   414a4:	bne	414b8 <fts_children@@Base+0xfa1c>
   414a8:	bl	124d8 <__errno_location@plt>
   414ac:	str	r4, [r0]
   414b0:	mvn	r4, #0
   414b4:	b	41498 <fts_children@@Base+0xf9fc>
   414b8:	mvn	r4, #0
   414bc:	b	41498 <fts_children@@Base+0xf9fc>
   414c0:	push	{r4, r5}
   414c4:	mov	r4, #0
   414c8:	mov	r5, #0
   414cc:	ldr	r3, [pc, #12]	; 414e0 <fts_children@@Base+0xfa44>
   414d0:	strd	r4, [r0, #16]
   414d4:	str	r3, [r0, #24]
   414d8:	pop	{r4, r5}
   414dc:	bx	lr
   414e0:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   414e4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   414e8:	ldr	r2, [r0, #24]
   414ec:	ldr	r3, [pc, #180]	; 415a8 <fts_children@@Base+0xfb0c>
   414f0:	cmp	r2, r3
   414f4:	bne	41594 <fts_children@@Base+0xfaf8>
   414f8:	ldrd	r6, [r0, #16]
   414fc:	ldrd	sl, [r1, #96]	; 0x60
   41500:	orrs	r3, r6, r7
   41504:	beq	41540 <fts_children@@Base+0xfaa4>
   41508:	ldrd	r2, [r0]
   4150c:	cmp	r3, fp
   41510:	cmpeq	r2, sl
   41514:	beq	41564 <fts_children@@Base+0xfac8>
   41518:	adds	r8, r6, #1
   4151c:	adc	r9, r7, #0
   41520:	and	r2, r6, r8
   41524:	and	r3, r7, r9
   41528:	orrs	r3, r2, r3
   4152c:	strd	r8, [r0, #16]
   41530:	movne	r1, #0
   41534:	beq	41584 <fts_children@@Base+0xfae8>
   41538:	mov	r0, r1
   4153c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41540:	mov	r2, #1
   41544:	mov	r3, #0
   41548:	strd	r2, [r0, #16]
   4154c:	ldrd	r2, [r1]
   41550:	mov	r1, #0
   41554:	strd	sl, [r0]
   41558:	strd	r2, [r0, #8]
   4155c:	mov	r0, r1
   41560:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41564:	ldrd	r4, [r1]
   41568:	ldrd	r2, [r0, #8]
   4156c:	cmp	r5, r3
   41570:	cmpeq	r4, r2
   41574:	bne	41518 <fts_children@@Base+0xfa7c>
   41578:	mov	r1, #1
   4157c:	mov	r0, r1
   41580:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41584:	orrs	r3, r8, r9
   41588:	bne	4154c <fts_children@@Base+0xfab0>
   4158c:	mov	r1, #1
   41590:	b	4157c <fts_children@@Base+0xfae0>
   41594:	ldr	r3, [pc, #16]	; 415ac <fts_children@@Base+0xfb10>
   41598:	mov	r2, #60	; 0x3c
   4159c:	ldr	r1, [pc, #12]	; 415b0 <fts_children@@Base+0xfb14>
   415a0:	ldr	r0, [pc, #12]	; 415b4 <fts_children@@Base+0xfb18>
   415a4:	bl	1279c <__assert_fail@plt>
   415a8:	addseq	pc, r5, r6, lsl r6	; <UNPREDICTABLE>
   415ac:	muleq	r4, r4, fp
   415b0:	andeq	sl, r4, r0, lsr #23
   415b4:			; <UNDEFINED> instruction: 0x0004abb0
   415b8:	mov	r1, r0
   415bc:	mov	r0, #0
   415c0:	b	12190 <clock_gettime@plt>
   415c4:	push	{r4, r5, r6, lr}
   415c8:	sub	sp, sp, #16
   415cc:	ldr	r6, [pc, #64]	; 41614 <fts_children@@Base+0xfb78>
   415d0:	add	r5, sp, #4
   415d4:	mov	r4, r0
   415d8:	ldr	r3, [r6]
   415dc:	mov	r1, r5
   415e0:	mov	r0, #0
   415e4:	str	r3, [sp, #12]
   415e8:	bl	12190 <clock_gettime@plt>
   415ec:	ldr	r2, [sp, #12]
   415f0:	ldm	r5, {r0, r1}
   415f4:	ldr	r3, [r6]
   415f8:	cmp	r2, r3
   415fc:	stm	r4, {r0, r1}
   41600:	bne	41610 <fts_children@@Base+0xfb74>
   41604:	mov	r0, r4
   41608:	add	sp, sp, #16
   4160c:	pop	{r4, r5, r6, pc}
   41610:	bl	12244 <__stack_chk_fail@plt>
   41614:	andeq	fp, r5, r0, ror #24
   41618:	push	{r4, lr}
   4161c:	mov	r1, #0
   41620:	bl	125f8 <setlocale@plt>
   41624:	subs	r4, r0, #0
   41628:	beq	41654 <fts_children@@Base+0xfbb8>
   4162c:	ldr	r1, [pc, #40]	; 4165c <fts_children@@Base+0xfbc0>
   41630:	bl	120dc <strcmp@plt>
   41634:	cmp	r0, #0
   41638:	popeq	{r4, pc}
   4163c:	mov	r0, r4
   41640:	ldr	r1, [pc, #24]	; 41660 <fts_children@@Base+0xfbc4>
   41644:	bl	120dc <strcmp@plt>
   41648:	adds	r0, r0, #0
   4164c:	movne	r0, #1
   41650:	pop	{r4, pc}
   41654:	mov	r0, #1
   41658:	pop	{r4, pc}
   4165c:	andeq	r9, r4, r4, asr #29
   41660:	andeq	sl, r4, r8, asr #23
   41664:	mov	r3, #0
   41668:	mov	r2, #1
   4166c:	str	r1, [r0]
   41670:	str	r1, [r0, #4]
   41674:	str	r1, [r0, #8]
   41678:	str	r1, [r0, #12]
   4167c:	str	r1, [r0, #16]
   41680:	strb	r2, [r0, #28]
   41684:	str	r3, [r0, #20]
   41688:	str	r3, [r0, #24]
   4168c:	bx	lr
   41690:	ldrb	r0, [r0, #28]
   41694:	bx	lr
   41698:	ldrb	ip, [r0, #28]
   4169c:	ldr	r3, [r0, #20]
   416a0:	mov	r2, r0
   416a4:	eor	ip, ip, #1
   416a8:	add	r3, ip, r3
   416ac:	and	r3, r3, #3
   416b0:	ldr	r0, [r0, r3, lsl #2]
   416b4:	str	r1, [r2, r3, lsl #2]
   416b8:	ldr	r1, [r2, #24]
   416bc:	str	r3, [r2, #20]
   416c0:	cmp	r1, r3
   416c4:	addeq	ip, ip, r1
   416c8:	andeq	ip, ip, #3
   416cc:	mov	r3, #0
   416d0:	streq	ip, [r2, #24]
   416d4:	strb	r3, [r2, #28]
   416d8:	bx	lr
   416dc:	ldrb	r3, [r0, #28]
   416e0:	cmp	r3, #0
   416e4:	bne	4171c <fts_children@@Base+0xfc80>
   416e8:	ldr	r3, [r0, #20]
   416ec:	ldr	r1, [r0, #16]
   416f0:	ldr	r2, [r0, r3, lsl #2]
   416f4:	str	r1, [r0, r3, lsl #2]
   416f8:	ldr	r1, [r0, #24]
   416fc:	cmp	r3, r1
   41700:	addne	r3, r3, #3
   41704:	moveq	r3, #1
   41708:	andne	r3, r3, #3
   4170c:	strbeq	r3, [r0, #28]
   41710:	strne	r3, [r0, #20]
   41714:	mov	r0, r2
   41718:	bx	lr
   4171c:	push	{r4, lr}
   41720:	bl	1273c <abort@plt>
   41724:	push	{r4, lr}
   41728:	mov	r0, #14
   4172c:	bl	12628 <nl_langinfo@plt>
   41730:	cmp	r0, #0
   41734:	beq	4174c <fts_children@@Base+0xfcb0>
   41738:	ldrb	r2, [r0]
   4173c:	ldr	r3, [pc, #16]	; 41754 <fts_children@@Base+0xfcb8>
   41740:	cmp	r2, #0
   41744:	moveq	r0, r3
   41748:	pop	{r4, pc}
   4174c:	ldr	r0, [pc]	; 41754 <fts_children@@Base+0xfcb8>
   41750:	pop	{r4, pc}
   41754:	ldrdeq	sl, [r4], -r0
   41758:	mov	r3, #16
   4175c:	adds	r0, r0, r3
   41760:	bcs	4178c <fts_children@@Base+0xfcf0>
   41764:	push	{r4, lr}
   41768:	bl	123dc <malloc@plt>
   4176c:	subs	r2, r0, #0
   41770:	addne	r3, r2, #8
   41774:	bicne	r3, r3, #15
   41778:	moveq	r0, #0
   4177c:	addne	r0, r3, #8
   41780:	subne	r2, r0, r2
   41784:	strbne	r2, [r3, #7]
   41788:	pop	{r4, pc}
   4178c:	mov	r0, #0
   41790:	bx	lr
   41794:	tst	r0, #7
   41798:	bne	417b0 <fts_children@@Base+0xfd14>
   4179c:	tst	r0, #8
   417a0:	bxeq	lr
   417a4:	ldrb	r3, [r0, #-1]
   417a8:	sub	r0, r0, r3
   417ac:	b	12154 <free@plt>
   417b0:	push	{r4, lr}
   417b4:	bl	1273c <abort@plt>
   417b8:	push	{r4, lr}
   417bc:	mov	r4, r0
   417c0:	bl	12130 <wcwidth@plt>
   417c4:	cmp	r0, #0
   417c8:	popge	{r4, pc}
   417cc:	mov	r0, r4
   417d0:	bl	12298 <iswcntrl@plt>
   417d4:	clz	r0, r0
   417d8:	lsr	r0, r0, #5
   417dc:	pop	{r4, pc}
   417e0:	mov	r3, r1
   417e4:	push	{r4, r5, r6, lr}
   417e8:	mov	r4, r1
   417ec:	ldr	r1, [r3], #16
   417f0:	ldr	r2, [r4, #4]
   417f4:	cmp	r1, r3
   417f8:	mov	r5, r0
   417fc:	strne	r1, [r0]
   41800:	beq	41820 <fts_children@@Base+0xfd84>
   41804:	ldrb	r3, [r4, #8]
   41808:	str	r2, [r5, #4]
   4180c:	cmp	r3, #0
   41810:	strb	r3, [r5, #8]
   41814:	ldrne	r3, [r4, #12]
   41818:	strne	r3, [r5, #12]
   4181c:	pop	{r4, r5, r6, pc}
   41820:	add	r3, r0, #16
   41824:	mov	r0, r3
   41828:	bl	121a8 <memcpy@plt>
   4182c:	ldr	r2, [r4, #4]
   41830:	str	r0, [r5]
   41834:	b	41804 <fts_children@@Base+0xfd68>
   41838:	ldr	r3, [pc, #20]	; 41854 <fts_children@@Base+0xfdb8>
   4183c:	lsr	r2, r0, #5
   41840:	and	r0, r0, #31
   41844:	ldr	r3, [r3, r2, lsl #2]
   41848:	lsr	r0, r3, r0
   4184c:	and	r0, r0, #1
   41850:	bx	lr
   41854:	ldrdeq	sl, [r4], -r8
   41858:	push	{r4, r5, r6, r7, r8, lr}
   4185c:	sub	sp, sp, #64	; 0x40
   41860:	ldr	r7, [pc, #464]	; 41a38 <fts_children@@Base+0xff9c>
   41864:	mov	r4, r0
   41868:	ldr	r3, [r7]
   4186c:	str	r3, [sp, #60]	; 0x3c
   41870:	bl	12334 <__ctype_get_mb_cur_max@plt>
   41874:	cmp	r0, #1
   41878:	bhi	418a4 <fts_children@@Base+0xfe08>
   4187c:	mov	r0, r4
   41880:	bl	1249c <strlen@plt>
   41884:	mov	r5, r0
   41888:	ldr	r2, [sp, #60]	; 0x3c
   4188c:	ldr	r3, [r7]
   41890:	mov	r0, r5
   41894:	cmp	r2, r3
   41898:	bne	41a20 <fts_children@@Base+0xff84>
   4189c:	add	sp, sp, #64	; 0x40
   418a0:	pop	{r4, r5, r6, r7, r8, pc}
   418a4:	mov	r5, #0
   418a8:	str	r4, [sp, #20]
   418ac:	str	r5, [sp, #12]
   418b0:	strb	r5, [sp, #4]
   418b4:	str	r5, [sp, #8]
   418b8:	strb	r5, [sp, #16]
   418bc:	mov	r6, #1
   418c0:	ldr	r8, [pc, #372]	; 41a3c <fts_children@@Base+0xffa0>
   418c4:	b	4191c <fts_children@@Base+0xfe80>
   418c8:	ldrb	r3, [r4]
   418cc:	and	r2, r3, #31
   418d0:	lsr	r3, r3, #5
   418d4:	ldr	r3, [r8, r3, lsl #2]
   418d8:	lsr	r3, r3, r2
   418dc:	tst	r3, #1
   418e0:	beq	41990 <fts_children@@Base+0xfef4>
   418e4:	str	r6, [sp, #24]
   418e8:	ldrb	r4, [r4]
   418ec:	strb	r6, [sp, #28]
   418f0:	strb	r6, [sp, #16]
   418f4:	str	r4, [sp, #32]
   418f8:	cmp	r4, #0
   418fc:	beq	41888 <fts_children@@Base+0xfdec>
   41900:	ldr	r4, [sp, #20]
   41904:	ldr	r3, [sp, #24]
   41908:	add	r5, r5, #1
   4190c:	add	r4, r4, r3
   41910:	mov	r3, #0
   41914:	str	r4, [sp, #20]
   41918:	strb	r3, [sp, #16]
   4191c:	ldrb	r3, [sp, #4]
   41920:	cmp	r3, #0
   41924:	beq	418c8 <fts_children@@Base+0xfe2c>
   41928:	bl	12334 <__ctype_get_mb_cur_max@plt>
   4192c:	mov	r1, r0
   41930:	mov	r0, r4
   41934:	bl	2d934 <__assert_fail@plt+0x1b198>
   41938:	add	r3, sp, #8
   4193c:	mov	r1, r4
   41940:	mov	r2, r0
   41944:	add	r0, sp, #32
   41948:	bl	31be8 <fts_children@@Base+0x14c>
   4194c:	cmn	r0, #1
   41950:	str	r0, [sp, #24]
   41954:	beq	419a8 <fts_children@@Base+0xff0c>
   41958:	cmn	r0, #2
   4195c:	beq	419bc <fts_children@@Base+0xff20>
   41960:	cmp	r0, #0
   41964:	beq	419d8 <fts_children@@Base+0xff3c>
   41968:	ldr	r4, [sp, #32]
   4196c:	add	r0, sp, #8
   41970:	strb	r6, [sp, #28]
   41974:	bl	121e4 <mbsinit@plt>
   41978:	cmp	r0, #0
   4197c:	movne	r3, #0
   41980:	strbeq	r6, [sp, #16]
   41984:	strbne	r6, [sp, #16]
   41988:	strbne	r3, [sp, #4]
   4198c:	b	418f8 <fts_children@@Base+0xfe5c>
   41990:	add	r0, sp, #8
   41994:	bl	121e4 <mbsinit@plt>
   41998:	cmp	r0, #0
   4199c:	beq	41a0c <fts_children@@Base+0xff70>
   419a0:	strb	r6, [sp, #4]
   419a4:	b	41928 <fts_children@@Base+0xfe8c>
   419a8:	mov	r3, #0
   419ac:	str	r6, [sp, #24]
   419b0:	strb	r3, [sp, #28]
   419b4:	ldr	r4, [sp, #20]
   419b8:	b	41904 <fts_children@@Base+0xfe68>
   419bc:	ldr	r4, [sp, #20]
   419c0:	mov	r0, r4
   419c4:	bl	1249c <strlen@plt>
   419c8:	mov	r3, #0
   419cc:	strb	r3, [sp, #28]
   419d0:	str	r0, [sp, #24]
   419d4:	b	41904 <fts_children@@Base+0xfe68>
   419d8:	ldr	r4, [sp, #20]
   419dc:	str	r6, [sp, #24]
   419e0:	ldrb	r3, [r4]
   419e4:	cmp	r3, #0
   419e8:	bne	41a24 <fts_children@@Base+0xff88>
   419ec:	ldr	r4, [sp, #32]
   419f0:	cmp	r4, #0
   419f4:	beq	4196c <fts_children@@Base+0xfed0>
   419f8:	ldr	r3, [pc, #64]	; 41a40 <fts_children@@Base+0xffa4>
   419fc:	mov	r2, #179	; 0xb3
   41a00:	ldr	r1, [pc, #60]	; 41a44 <fts_children@@Base+0xffa8>
   41a04:	ldr	r0, [pc, #60]	; 41a48 <fts_children@@Base+0xffac>
   41a08:	bl	1279c <__assert_fail@plt>
   41a0c:	ldr	r3, [pc, #44]	; 41a40 <fts_children@@Base+0xffa4>
   41a10:	mov	r2, #150	; 0x96
   41a14:	ldr	r1, [pc, #40]	; 41a44 <fts_children@@Base+0xffa8>
   41a18:	ldr	r0, [pc, #44]	; 41a4c <fts_children@@Base+0xffb0>
   41a1c:	bl	1279c <__assert_fail@plt>
   41a20:	bl	12244 <__stack_chk_fail@plt>
   41a24:	ldr	r3, [pc, #20]	; 41a40 <fts_children@@Base+0xffa4>
   41a28:	mov	r2, #178	; 0xb2
   41a2c:	ldr	r1, [pc, #16]	; 41a44 <fts_children@@Base+0xffa8>
   41a30:	ldr	r0, [pc, #24]	; 41a50 <fts_children@@Base+0xffb4>
   41a34:	bl	1279c <__assert_fail@plt>
   41a38:	andeq	fp, r5, r0, ror #24
   41a3c:	ldrdeq	sl, [r4], -r8
   41a40:	strdeq	sl, [r4], -r8
   41a44:	ldrdeq	r8, [r4], -r0
   41a48:	ldrdeq	r8, [r4], -ip
   41a4c:	strdeq	r8, [r4], -r0
   41a50:	andeq	r8, r4, r8, lsl #14
   41a54:	push	{r4, r5, r6, lr}
   41a58:	subs	r4, r2, #0
   41a5c:	mov	r6, r0
   41a60:	beq	41a8c <fts_children@@Base+0xfff0>
   41a64:	mov	r5, r1
   41a68:	bl	12430 <__ctype_tolower_loc@plt>
   41a6c:	add	r3, r5, r4
   41a70:	add	r2, r6, r4
   41a74:	ldrb	lr, [r3, #-1]!
   41a78:	ldr	ip, [r0]
   41a7c:	cmp	r5, r3
   41a80:	ldr	ip, [ip, lr, lsl #2]
   41a84:	strb	ip, [r2, #-1]!
   41a88:	bne	41a74 <fts_children@@Base+0xffd8>
   41a8c:	mov	r0, r6
   41a90:	pop	{r4, r5, r6, pc}
   41a94:	push	{r4, r5, r6, lr}
   41a98:	subs	r4, r2, #0
   41a9c:	mov	r6, r0
   41aa0:	beq	41acc <fts_children@@Base+0x10030>
   41aa4:	mov	r5, r1
   41aa8:	bl	12448 <__ctype_toupper_loc@plt>
   41aac:	add	r3, r5, r4
   41ab0:	add	r2, r6, r4
   41ab4:	ldrb	lr, [r3, #-1]!
   41ab8:	ldr	ip, [r0]
   41abc:	cmp	r5, r3
   41ac0:	ldr	ip, [ip, lr, lsl #2]
   41ac4:	strb	ip, [r2, #-1]!
   41ac8:	bne	41ab4 <fts_children@@Base+0x10018>
   41acc:	mov	r0, r6
   41ad0:	pop	{r4, r5, r6, pc}
   41ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   41ad8:	sub	sp, sp, #1136	; 0x470
   41adc:	sub	sp, sp, #12
   41ae0:	ldr	r7, [r3, #40]	; 0x28
   41ae4:	ldr	r8, [r3, #8]
   41ae8:	str	r3, [sp, #28]
   41aec:	ldr	r3, [pc, #4012]	; 42aa0 <fts_children@@Base+0x11004>
   41af0:	ldr	ip, [pc, #4012]	; 42aa4 <fts_children@@Base+0x11008>
   41af4:	cmp	r7, #0
   41af8:	ldr	r3, [r3]
   41afc:	moveq	r7, ip
   41b00:	str	r3, [sp, #1140]	; 0x474
   41b04:	ldrb	r3, [sp, #1184]	; 0x4a0
   41b08:	cmp	r8, #12
   41b0c:	mov	r9, r0
   41b10:	str	r3, [sp, #24]
   41b14:	ldr	r3, [sp, #1188]	; 0x4a4
   41b18:	str	r1, [sp, #16]
   41b1c:	str	r3, [sp, #36]	; 0x24
   41b20:	ldr	r3, [sp, #1192]	; 0x4a8
   41b24:	mov	r5, r2
   41b28:	str	r3, [sp, #32]
   41b2c:	subgt	r8, r8, #12
   41b30:	bgt	41b3c <fts_children@@Base+0x100a0>
   41b34:	cmp	r8, #0
   41b38:	moveq	r8, #12
   41b3c:	ldrb	r3, [r5]
   41b40:	cmp	r3, #0
   41b44:	beq	42e40 <fts_children@@Base+0x113a4>
   41b48:	mov	fp, #0
   41b4c:	str	r8, [sp, #44]	; 0x2c
   41b50:	str	r7, [sp, #40]	; 0x28
   41b54:	cmp	r3, #37	; 0x25
   41b58:	beq	41bd8 <fts_children@@Base+0x1013c>
   41b5c:	ldr	r2, [sp, #16]
   41b60:	sub	r2, r2, fp
   41b64:	cmp	r2, #1
   41b68:	bls	41bb0 <fts_children@@Base+0x10114>
   41b6c:	add	fp, fp, #1
   41b70:	cmp	r9, #0
   41b74:	strbne	r3, [r9], #1
   41b78:	ldrb	r3, [r5, #1]
   41b7c:	add	r5, r5, #1
   41b80:	cmp	r3, #0
   41b84:	bne	41b54 <fts_children@@Base+0x100b8>
   41b88:	ldr	r3, [sp, #16]
   41b8c:	cmp	r9, #0
   41b90:	cmpne	r3, #0
   41b94:	movne	r3, #0
   41b98:	strbne	r3, [r9]
   41b9c:	b	41bb4 <fts_children@@Base+0x10118>
   41ba0:	cmp	sl, #95	; 0x5f
   41ba4:	beq	42ecc <fts_children@@Base+0x11430>
   41ba8:	cmp	r3, r2
   41bac:	bcc	426f4 <fts_children@@Base+0x10c58>
   41bb0:	mov	fp, #0
   41bb4:	ldr	r3, [pc, #3812]	; 42aa0 <fts_children@@Base+0x11004>
   41bb8:	ldr	r2, [sp, #1140]	; 0x474
   41bbc:	mov	r0, fp
   41bc0:	ldr	r3, [r3]
   41bc4:	cmp	r2, r3
   41bc8:	bne	431d8 <fts_children@@Base+0x1173c>
   41bcc:	add	sp, sp, #1136	; 0x470
   41bd0:	add	sp, sp, #12
   41bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   41bd8:	mov	r8, #0
   41bdc:	ldr	r3, [sp, #24]
   41be0:	mov	sl, r8
   41be4:	str	r3, [sp, #20]
   41be8:	ldrb	r4, [r5, #1]!
   41bec:	cmp	r4, #48	; 0x30
   41bf0:	mov	r7, r4
   41bf4:	beq	41e44 <fts_children@@Base+0x103a8>
   41bf8:	bhi	41e2c <fts_children@@Base+0x10390>
   41bfc:	cmp	r4, #35	; 0x23
   41c00:	moveq	r8, #1
   41c04:	beq	41be8 <fts_children@@Base+0x1014c>
   41c08:	cmp	r4, #45	; 0x2d
   41c0c:	beq	41e44 <fts_children@@Base+0x103a8>
   41c10:	sub	r3, r4, #48	; 0x30
   41c14:	cmp	r3, #9
   41c18:	mvnhi	r6, #0
   41c1c:	bls	41e58 <fts_children@@Base+0x103bc>
   41c20:	cmp	r4, #69	; 0x45
   41c24:	beq	41e4c <fts_children@@Base+0x103b0>
   41c28:	cmp	r4, #79	; 0x4f
   41c2c:	movne	r7, #0
   41c30:	beq	41e4c <fts_children@@Base+0x103b0>
   41c34:	cmp	r4, #122	; 0x7a
   41c38:	ldrls	pc, [pc, r4, lsl #2]
   41c3c:	b	42214 <fts_children@@Base+0x10778>
   41c40:	andeq	r2, r4, r4, lsl sl
   41c44:	andeq	r2, r4, r4, lsl r2
   41c48:	andeq	r2, r4, r4, lsl r2
   41c4c:	andeq	r2, r4, r4, lsl r2
   41c50:	andeq	r2, r4, r4, lsl r2
   41c54:	andeq	r2, r4, r4, lsl r2
   41c58:	andeq	r2, r4, r4, lsl r2
   41c5c:	andeq	r2, r4, r4, lsl r2
   41c60:	andeq	r2, r4, r4, lsl r2
   41c64:	andeq	r2, r4, r4, lsl r2
   41c68:	andeq	r2, r4, r4, lsl r2
   41c6c:	andeq	r2, r4, r4, lsl r2
   41c70:	andeq	r2, r4, r4, lsl r2
   41c74:	andeq	r2, r4, r4, lsl r2
   41c78:	andeq	r2, r4, r4, lsl r2
   41c7c:	andeq	r2, r4, r4, lsl r2
   41c80:	andeq	r2, r4, r4, lsl r2
   41c84:	andeq	r2, r4, r4, lsl r2
   41c88:	andeq	r2, r4, r4, lsl r2
   41c8c:	andeq	r2, r4, r4, lsl r2
   41c90:	andeq	r2, r4, r4, lsl r2
   41c94:	andeq	r2, r4, r4, lsl r2
   41c98:	andeq	r2, r4, r4, lsl r2
   41c9c:	andeq	r2, r4, r4, lsl r2
   41ca0:	andeq	r2, r4, r4, lsl r2
   41ca4:	andeq	r2, r4, r4, lsl r2
   41ca8:	andeq	r2, r4, r4, lsl r2
   41cac:	andeq	r2, r4, r4, lsl r2
   41cb0:	andeq	r2, r4, r4, lsl r2
   41cb4:	andeq	r2, r4, r4, lsl r2
   41cb8:	andeq	r2, r4, r4, lsl r2
   41cbc:	andeq	r2, r4, r4, lsl r2
   41cc0:	andeq	r2, r4, r4, lsl r2
   41cc4:	andeq	r2, r4, r4, lsl r2
   41cc8:	andeq	r2, r4, r4, lsl r2
   41ccc:	andeq	r2, r4, r4, lsl r2
   41cd0:	andeq	r2, r4, r4, lsl r2
   41cd4:	andeq	r2, r4, r8, asr #24
   41cd8:	andeq	r2, r4, r4, lsl r2
   41cdc:	andeq	r2, r4, r4, lsl r2
   41ce0:	andeq	r2, r4, r4, lsl r2
   41ce4:	andeq	r2, r4, r4, lsl r2
   41ce8:	andeq	r2, r4, r4, lsl r2
   41cec:	andeq	r2, r4, r4, lsl r2
   41cf0:	andeq	r2, r4, r4, lsl r2
   41cf4:	andeq	r2, r4, r4, lsl r2
   41cf8:	andeq	r2, r4, r4, lsl r2
   41cfc:	andeq	r2, r4, r4, lsl r2
   41d00:	andeq	r2, r4, r4, lsl r2
   41d04:	andeq	r2, r4, r4, lsl r2
   41d08:	andeq	r2, r4, r4, lsl r2
   41d0c:	andeq	r2, r4, r4, lsl r2
   41d10:	andeq	r2, r4, r4, lsl r2
   41d14:	andeq	r2, r4, r4, lsl r2
   41d18:	andeq	r2, r4, r4, lsl r2
   41d1c:	andeq	r2, r4, r4, lsl r2
   41d20:	andeq	r2, r4, r4, lsl r2
   41d24:	andeq	r2, r4, r4, lsl r2
   41d28:	andeq	r2, r4, ip, lsr #25
   41d2c:	andeq	r2, r4, r4, lsl r2
   41d30:	andeq	r2, r4, r4, lsl r2
   41d34:	andeq	r2, r4, r4, lsl r2
   41d38:	andeq	r2, r4, r4, lsl r2
   41d3c:	andeq	r2, r4, r4, lsl r2
   41d40:	andeq	r2, r4, r4, lsl r2
   41d44:	andeq	r1, r4, ip, asr #31
   41d48:	andeq	r2, r4, ip, ror #22
   41d4c:	muleq	r4, r0, fp
   41d50:	andeq	r2, r4, ip, lsr #16
   41d54:	andeq	r2, r4, r4, lsl r2
   41d58:	andeq	r2, r4, r0, asr #16
   41d5c:	andeq	r2, r4, r4, asr r8
   41d60:			; <UNDEFINED> instruction: 0x000429bc
   41d64:	andeq	r2, r4, r8, asr #20
   41d68:	andeq	r2, r4, r4, lsl r2
   41d6c:	andeq	r2, r4, r4, lsl r2
   41d70:	andeq	r2, r4, r4, lsl r2
   41d74:	ldrdeq	r2, [r4], -r8
   41d78:	strdeq	r2, [r4], -r4
   41d7c:	andeq	r2, r4, r4, lsl r2
   41d80:	ldrdeq	r2, [r4], -r4
   41d84:	andeq	r2, r4, r4, lsl r2
   41d88:	andeq	r2, r4, r8, asr #8
   41d8c:	andeq	r2, r4, r8, lsl r5
   41d90:	andeq	r2, r4, r0, ror #25
   41d94:	andeq	r2, r4, r4, lsr r5
   41d98:	andeq	r2, r4, r4, asr r8
   41d9c:	ldrdeq	r2, [r4], -r8
   41da0:	andeq	r1, r4, r8, asr #29
   41da4:	andeq	r2, r4, ip, ror #10
   41da8:	andeq	r2, r4, r8, lsr r7
   41dac:	andeq	r2, r4, r4, lsl r2
   41db0:	andeq	r2, r4, r4, lsl r2
   41db4:	andeq	r2, r4, r4, lsl r2
   41db8:	andeq	r2, r4, r4, lsl r2
   41dbc:	andeq	r2, r4, r4, lsl r2
   41dc0:	andeq	r2, r4, r4, lsl r2
   41dc4:	andeq	r1, r4, ip, asr #31
   41dc8:	strdeq	r2, [r4], -ip
   41dcc:	andeq	r1, r4, r8, asr #29
   41dd0:	andeq	r2, r4, ip, lsr #7
   41dd4:	andeq	r2, r4, r8, asr #7
   41dd8:	andeq	r2, r4, r4, lsl r2
   41ddc:	andeq	r2, r4, r4, asr r8
   41de0:	strdeq	r2, [r4], -ip
   41de4:	andeq	r2, r4, r4, lsl r2
   41de8:	strdeq	r2, [r4], -r0
   41dec:	andeq	r2, r4, r4, lsr #8
   41df0:	andeq	r2, r4, r8, lsr r4
   41df4:	andeq	r2, r4, r4, lsl ip
   41df8:	andeq	r2, r4, ip, asr #6
   41dfc:	andeq	r2, r4, r4, lsl r2
   41e00:	andeq	r2, r4, r0, asr #22
   41e04:	andeq	r2, r4, r0, ror #20
   41e08:	ldrdeq	r1, [r4], -r0
   41e0c:	andeq	r2, r4, ip, ror r0
   41e10:	andeq	r2, r4, r4, ror #21
   41e14:	andeq	r2, r4, r0
   41e18:	andeq	r2, r4, r4, lsl r2
   41e1c:	strdeq	r2, [r4], -r8
   41e20:	andeq	r1, r4, r8, asr #29
   41e24:	andeq	r2, r4, r0, asr #3
   41e28:	andeq	r2, r4, r8, lsr #5
   41e2c:	cmp	r4, #94	; 0x5e
   41e30:	moveq	r3, #1
   41e34:	streq	r3, [sp, #20]
   41e38:	beq	41be8 <fts_children@@Base+0x1014c>
   41e3c:	cmp	r4, #95	; 0x5f
   41e40:	bne	41c10 <fts_children@@Base+0x10174>
   41e44:	mov	sl, r4
   41e48:	b	41be8 <fts_children@@Base+0x1014c>
   41e4c:	ldrb	r4, [r5, #1]
   41e50:	add	r5, r5, #1
   41e54:	b	41c34 <fts_children@@Base+0x10198>
   41e58:	ldr	r0, [pc, #3144]	; 42aa8 <fts_children@@Base+0x1100c>
   41e5c:	mov	r6, #0
   41e60:	mov	r3, r5
   41e64:	cmp	r6, r0
   41e68:	ldrb	r4, [r3, #1]!
   41e6c:	sub	r2, r4, #48	; 0x30
   41e70:	bgt	41ea4 <fts_children@@Base+0x10408>
   41e74:	ldrb	r1, [r5]
   41e78:	beq	41e9c <fts_children@@Base+0x10400>
   41e7c:	add	r6, r6, r6, lsl #2
   41e80:	sub	r1, r1, #48	; 0x30
   41e84:	add	r6, r1, r6, lsl #1
   41e88:	mov	r5, r3
   41e8c:	cmp	r2, #9
   41e90:	bls	41e60 <fts_children@@Base+0x103c4>
   41e94:	mov	r7, r4
   41e98:	b	41c20 <fts_children@@Base+0x10184>
   41e9c:	cmp	r1, #55	; 0x37
   41ea0:	bls	41e7c <fts_children@@Base+0x103e0>
   41ea4:	cmp	r2, #9
   41ea8:	ldrbls	r4, [r5, #2]!
   41eac:	mvnls	r6, #-2147483648	; 0x80000000
   41eb0:	subls	r2, r4, #48	; 0x30
   41eb4:	bls	41e8c <fts_children@@Base+0x103f0>
   41eb8:	mov	r5, r3
   41ebc:	mov	r7, r4
   41ec0:	mvn	r6, #-2147483648	; 0x80000000
   41ec4:	b	41c20 <fts_children@@Base+0x10184>
   41ec8:	cmp	r7, #79	; 0x4f
   41ecc:	beq	42214 <fts_children@@Base+0x10778>
   41ed0:	mov	r3, #0
   41ed4:	str	r3, [sp, #52]	; 0x34
   41ed8:	add	r8, sp, #120	; 0x78
   41edc:	ldr	r3, [pc, #3016]	; 42aac <fts_children@@Base+0x11010>
   41ee0:	cmp	r7, #0
   41ee4:	strh	r3, [r8, #-12]
   41ee8:	subeq	r0, r8, #10
   41eec:	bne	431dc <fts_children@@Base+0x11740>
   41ef0:	mov	ip, #0
   41ef4:	strb	r4, [r0]
   41ef8:	strb	ip, [r0, #1]
   41efc:	ldr	r3, [sp, #28]
   41f00:	sub	r2, r8, #12
   41f04:	mov	r1, #1024	; 0x400
   41f08:	sub	r0, r8, #4
   41f0c:	bl	12400 <strftime@plt>
   41f10:	cmp	r0, #0
   41f14:	beq	41b78 <fts_children@@Base+0x100dc>
   41f18:	bic	r2, r6, r6, asr #31
   41f1c:	sub	r4, r0, #1
   41f20:	ldr	r1, [sp, #16]
   41f24:	cmp	r4, r2
   41f28:	movcs	r3, r4
   41f2c:	movcc	r3, r2
   41f30:	sub	r1, r1, fp
   41f34:	cmp	r1, r3
   41f38:	bls	41bb0 <fts_children@@Base+0x10114>
   41f3c:	cmp	r9, #0
   41f40:	beq	41fc4 <fts_children@@Base+0x10528>
   41f44:	cmp	r4, r2
   41f48:	movcs	r2, #0
   41f4c:	movcc	r2, #1
   41f50:	cmp	r7, #0
   41f54:	moveq	r7, r2
   41f58:	movne	r7, #0
   41f5c:	cmp	r7, #0
   41f60:	beq	41f90 <fts_children@@Base+0x104f4>
   41f64:	cmp	sl, #48	; 0x30
   41f68:	sub	r2, r6, r4
   41f6c:	moveq	r0, r9
   41f70:	movne	r0, r9
   41f74:	moveq	r1, sl
   41f78:	movne	r1, #32
   41f7c:	str	r3, [sp, #48]	; 0x30
   41f80:	add	r7, r9, r2
   41f84:	bl	12514 <memset@plt>
   41f88:	ldr	r3, [sp, #48]	; 0x30
   41f8c:	mov	r9, r7
   41f90:	ldr	r2, [sp, #52]	; 0x34
   41f94:	cmp	r2, #0
   41f98:	bne	42e24 <fts_children@@Base+0x11388>
   41f9c:	ldr	r2, [sp, #20]
   41fa0:	sub	r1, r8, #3
   41fa4:	cmp	r2, #0
   41fa8:	str	r3, [sp, #20]
   41fac:	mov	r2, r4
   41fb0:	mov	r0, r9
   41fb4:	beq	42e18 <fts_children@@Base+0x1137c>
   41fb8:	bl	41a94 <fts_children@@Base+0xfff8>
   41fbc:	ldr	r3, [sp, #20]
   41fc0:	add	r9, r9, r4
   41fc4:	add	fp, fp, r3
   41fc8:	b	41b78 <fts_children@@Base+0x100dc>
   41fcc:	cmp	r7, #0
   41fd0:	bne	42214 <fts_children@@Base+0x10778>
   41fd4:	cmp	r8, #0
   41fd8:	ldr	r3, [sp, #20]
   41fdc:	movne	r3, r8
   41fe0:	str	r3, [sp, #20]
   41fe4:	add	r8, sp, #120	; 0x78
   41fe8:	ldr	r3, [pc, #2748]	; 42aac <fts_children@@Base+0x11010>
   41fec:	mov	r7, #0
   41ff0:	str	r7, [sp, #52]	; 0x34
   41ff4:	strh	r3, [r8, #-12]
   41ff8:	sub	r0, r8, #10
   41ffc:	b	41ef0 <fts_children@@Base+0x10454>
   42000:	ldr	r3, [sp, #28]
   42004:	mov	r2, #1
   42008:	str	r2, [sp, #48]	; 0x30
   4200c:	ldr	r3, [r3, #24]
   42010:	ldr	r2, [pc, #2756]	; 42adc <fts_children@@Base+0x11040>
   42014:	add	r3, r3, #6
   42018:	smull	r1, r2, r2, r3
   4201c:	add	r1, r2, r3
   42020:	asr	r2, r3, #31
   42024:	rsb	r2, r2, r1, asr #2
   42028:	rsb	r2, r2, r2, lsl #3
   4202c:	sub	r3, r3, r2
   42030:	add	r3, r3, #1
   42034:	lsr	lr, r3, #31
   42038:	mov	r0, #0
   4203c:	str	r0, [sp, #52]	; 0x34
   42040:	eor	r2, lr, #1
   42044:	cmp	r7, #79	; 0x4f
   42048:	movne	r2, #0
   4204c:	andeq	r2, r2, #1
   42050:	cmp	r2, #0
   42054:	beq	425ac <fts_children@@Base+0x10b10>
   42058:	add	r8, sp, #120	; 0x78
   4205c:	ldr	r3, [pc, #2632]	; 42aac <fts_children@@Base+0x11010>
   42060:	mov	r2, #0
   42064:	str	r2, [sp, #52]	; 0x34
   42068:	strh	r3, [r8, #-12]
   4206c:	strb	r7, [sp, #110]	; 0x6e
   42070:	sub	r0, r8, #9
   42074:	ldr	r7, [sp, #48]	; 0x30
   42078:	b	41ef0 <fts_children@@Base+0x10454>
   4207c:	ldr	lr, [sp, #28]
   42080:	add	ip, sp, #64	; 0x40
   42084:	add	r8, sp, #120	; 0x78
   42088:	ldm	lr!, {r0, r1, r2, r3}
   4208c:	add	r4, r8, #10
   42090:	stmia	ip!, {r0, r1, r2, r3}
   42094:	ldm	lr!, {r0, r1, r2, r3}
   42098:	stmia	ip!, {r0, r1, r2, r3}
   4209c:	ldm	lr, {r0, r1, r2}
   420a0:	stm	ip, {r0, r1, r2}
   420a4:	add	r1, sp, #64	; 0x40
   420a8:	ldr	r0, [sp, #32]
   420ac:	bl	40ff0 <fts_children@@Base+0xf554>
   420b0:	mov	r1, r0
   420b4:	ldr	r3, [pc, #2588]	; 42ad8 <fts_children@@Base+0x1103c>
   420b8:	cmp	r0, #0
   420bc:	smull	r2, r3, r3, r1
   420c0:	asr	r2, r1, #31
   420c4:	rsb	r2, r2, r3, asr #2
   420c8:	add	r3, r2, r2, lsl #2
   420cc:	sub	r3, r1, r3, lsl #1
   420d0:	mov	r1, r2
   420d4:	uxtb	r3, r3
   420d8:	rsblt	r3, r3, #48	; 0x30
   420dc:	addge	r3, r3, #48	; 0x30
   420e0:	cmp	r2, #0
   420e4:	uxtb	r3, r3
   420e8:	strb	r3, [r4, #-1]!
   420ec:	bne	420b4 <fts_children@@Base+0x10618>
   420f0:	cmp	r6, #1
   420f4:	movge	r3, r6
   420f8:	movlt	r3, #1
   420fc:	cmp	r0, #0
   42100:	blt	42d90 <fts_children@@Base+0x112f4>
   42104:	ldr	r2, [sp, #16]
   42108:	add	r7, r8, #10
   4210c:	cmp	sl, #45	; 0x2d
   42110:	sub	r7, r7, r4
   42114:	sub	r2, r2, fp
   42118:	beq	4212c <fts_children@@Base+0x10690>
   4211c:	sub	r1, r3, r7
   42120:	cmp	r1, #0
   42124:	str	r1, [sp, #48]	; 0x30
   42128:	bgt	41ba0 <fts_children@@Base+0x10104>
   4212c:	bic	r1, r6, r6, asr #31
   42130:	str	r1, [sp, #48]	; 0x30
   42134:	ldr	r1, [sp, #48]	; 0x30
   42138:	cmp	r7, r1
   4213c:	movcs	r8, r7
   42140:	movcc	r8, r1
   42144:	cmp	r8, r2
   42148:	bcs	41bb0 <fts_children@@Base+0x10114>
   4214c:	cmp	r9, #0
   42150:	beq	421b8 <fts_children@@Base+0x1071c>
   42154:	cmp	r7, r1
   42158:	movcs	r2, #0
   4215c:	movcc	r2, #1
   42160:	cmp	r3, #0
   42164:	moveq	r3, r2
   42168:	movne	r3, #0
   4216c:	cmp	r3, #0
   42170:	beq	42198 <fts_children@@Base+0x106fc>
   42174:	cmp	sl, #48	; 0x30
   42178:	sub	r2, r6, r7
   4217c:	moveq	r0, r9
   42180:	movne	r0, r9
   42184:	moveq	r1, sl
   42188:	movne	r1, #32
   4218c:	add	r6, r9, r2
   42190:	bl	12514 <memset@plt>
   42194:	mov	r9, r6
   42198:	ldr	r3, [sp, #20]
   4219c:	mov	r1, r4
   421a0:	cmp	r3, #0
   421a4:	mov	r2, r7
   421a8:	mov	r0, r9
   421ac:	beq	42e08 <fts_children@@Base+0x1136c>
   421b0:	bl	41a94 <fts_children@@Base+0xfff8>
   421b4:	add	r9, r9, r7
   421b8:	add	fp, fp, r8
   421bc:	b	41b78 <fts_children@@Base+0x100dc>
   421c0:	cmp	r7, #69	; 0x45
   421c4:	beq	42f40 <fts_children@@Base+0x114a4>
   421c8:	ldr	r3, [sp, #28]
   421cc:	ldr	r2, [r3, #20]
   421d0:	ldr	r3, [pc, #2292]	; 42acc <fts_children@@Base+0x11030>
   421d4:	smull	r3, r1, r3, r2
   421d8:	asr	r3, r2, #31
   421dc:	rsb	r3, r3, r1, asr #5
   421e0:	add	r3, r3, r3, lsl #2
   421e4:	add	r3, r3, r3, lsl #2
   421e8:	subs	r3, r2, r3, lsl #2
   421ec:	bmi	43100 <fts_children@@Base+0x11664>
   421f0:	mov	r2, #2
   421f4:	str	r2, [sp, #48]	; 0x30
   421f8:	b	42034 <fts_children@@Base+0x10598>
   421fc:	cmp	r8, #0
   42200:	ldr	r3, [sp, #20]
   42204:	movne	r3, r8
   42208:	cmp	r7, #69	; 0x45
   4220c:	str	r3, [sp, #20]
   42210:	bne	41ed0 <fts_children@@Base+0x10434>
   42214:	sub	r3, r5, #1
   42218:	add	r1, r5, #1
   4221c:	mov	r7, r3
   42220:	sub	r4, r1, r3
   42224:	ldrb	r2, [r3], #-1
   42228:	cmp	r2, #37	; 0x25
   4222c:	bne	4221c <fts_children@@Base+0x10780>
   42230:	bic	r3, r6, r6, asr #31
   42234:	ldr	r2, [sp, #16]
   42238:	cmp	r4, r3
   4223c:	movcs	r8, r4
   42240:	movcc	r8, r3
   42244:	sub	r2, r2, fp
   42248:	cmp	r2, r8
   4224c:	bls	41bb0 <fts_children@@Base+0x10114>
   42250:	cmp	r9, #0
   42254:	beq	421b8 <fts_children@@Base+0x1071c>
   42258:	cmp	r4, r3
   4225c:	bcs	42284 <fts_children@@Base+0x107e8>
   42260:	cmp	sl, #48	; 0x30
   42264:	sub	r2, r6, r4
   42268:	moveq	r0, r9
   4226c:	movne	r0, r9
   42270:	moveq	r1, sl
   42274:	movne	r1, #32
   42278:	add	r6, r9, r2
   4227c:	bl	12514 <memset@plt>
   42280:	mov	r9, r6
   42284:	ldr	r3, [sp, #20]
   42288:	mov	r1, r7
   4228c:	cmp	r3, #0
   42290:	mov	r2, r4
   42294:	mov	r0, r9
   42298:	beq	42e10 <fts_children@@Base+0x11374>
   4229c:	bl	41a94 <fts_children@@Base+0xfff8>
   422a0:	add	r9, r9, r4
   422a4:	b	421b8 <fts_children@@Base+0x1071c>
   422a8:	mov	r3, #0
   422ac:	str	r3, [sp, #48]	; 0x30
   422b0:	ldr	r2, [sp, #28]
   422b4:	ldr	r3, [r2, #32]
   422b8:	cmp	r3, #0
   422bc:	blt	41b78 <fts_children@@Base+0x100dc>
   422c0:	ldr	r1, [r2, #36]	; 0x24
   422c4:	cmp	r1, #0
   422c8:	movlt	lr, #1
   422cc:	blt	422e8 <fts_children@@Base+0x1084c>
   422d0:	ldreq	r3, [sp, #40]	; 0x28
   422d4:	movne	lr, #0
   422d8:	ldrbeq	lr, [r3]
   422dc:	subeq	lr, lr, #45	; 0x2d
   422e0:	clzeq	lr, lr
   422e4:	lsreq	lr, lr, #5
   422e8:	ldr	r0, [pc, #1984]	; 42ab0 <fts_children@@Base+0x11014>
   422ec:	smull	r3, r2, r0, r1
   422f0:	ldr	r3, [pc, #1980]	; 42ab4 <fts_children@@Base+0x11018>
   422f4:	add	r2, r2, r1
   422f8:	smull	r3, ip, r3, r1
   422fc:	asr	r3, r1, #31
   42300:	rsb	r2, r3, r2, asr #5
   42304:	add	ip, ip, r1
   42308:	smull	r8, r0, r0, r2
   4230c:	add	r0, r0, r2
   42310:	asr	r8, r2, #31
   42314:	rsb	r0, r8, r0, asr #5
   42318:	rsb	r8, r2, r2, lsl #4
   4231c:	rsb	r0, r0, r0, lsl #4
   42320:	rsb	r3, r3, ip, asr #11
   42324:	sub	r0, r2, r0, lsl #2
   42328:	ldr	r2, [sp, #48]	; 0x30
   4232c:	sub	r1, r1, r8, lsl #2
   42330:	cmp	r2, #3
   42334:	ldrls	pc, [pc, r2, lsl #2]
   42338:	b	431f0 <fts_children@@Base+0x11754>
   4233c:	andeq	r2, r4, r8, asr #26
   42340:	andeq	r2, r4, r4, lsr #26
   42344:	andeq	r2, r4, ip, ror #25
   42348:	andeq	r2, r4, ip, ror #26
   4234c:	bic	r7, r6, r6, asr #31
   42350:	ldr	r3, [sp, #16]
   42354:	cmp	r7, #1
   42358:	movcc	r7, #1
   4235c:	sub	r3, r3, fp
   42360:	cmp	r3, r7
   42364:	bls	41bb0 <fts_children@@Base+0x10114>
   42368:	cmp	r9, #0
   4236c:	beq	423a4 <fts_children@@Base+0x10908>
   42370:	cmp	r6, #1
   42374:	ble	4239c <fts_children@@Base+0x10900>
   42378:	cmp	sl, #48	; 0x30
   4237c:	sub	r2, r6, #1
   42380:	moveq	r0, r9
   42384:	movne	r0, r9
   42388:	moveq	r1, sl
   4238c:	movne	r1, #32
   42390:	add	r4, r9, r2
   42394:	bl	12514 <memset@plt>
   42398:	mov	r9, r4
   4239c:	mov	r3, #10
   423a0:	strb	r3, [r9], #1
   423a4:	add	fp, fp, r7
   423a8:	b	41b78 <fts_children@@Base+0x100dc>
   423ac:	cmp	r7, #69	; 0x45
   423b0:	beq	42214 <fts_children@@Base+0x10778>
   423b4:	ldr	r3, [sp, #28]
   423b8:	mov	r2, #2
   423bc:	str	r2, [sp, #48]	; 0x30
   423c0:	ldr	r3, [r3, #12]
   423c4:	b	42034 <fts_children@@Base+0x10598>
   423c8:	cmp	r7, #69	; 0x45
   423cc:	beq	42214 <fts_children@@Base+0x10778>
   423d0:	ldr	r3, [sp, #28]
   423d4:	ldr	r3, [r3, #12]
   423d8:	cmp	sl, #48	; 0x30
   423dc:	cmpne	sl, #45	; 0x2d
   423e0:	mov	r2, #2
   423e4:	movne	sl, #95	; 0x5f
   423e8:	str	r2, [sp, #48]	; 0x30
   423ec:	b	42034 <fts_children@@Base+0x10598>
   423f0:	cmp	r7, #69	; 0x45
   423f4:	beq	42214 <fts_children@@Base+0x10778>
   423f8:	ldr	r3, [sp, #28]
   423fc:	mov	r0, #0
   42400:	mov	r2, #3
   42404:	ldr	r3, [r3, #28]
   42408:	str	r0, [sp, #52]	; 0x34
   4240c:	cmn	r3, #1
   42410:	movge	lr, #0
   42414:	movlt	lr, #1
   42418:	add	r3, r3, #1
   4241c:	str	r2, [sp, #48]	; 0x30
   42420:	b	42040 <fts_children@@Base+0x105a4>
   42424:	cmp	r7, #69	; 0x45
   42428:	beq	42214 <fts_children@@Base+0x10778>
   4242c:	ldr	r3, [sp, #28]
   42430:	ldr	r3, [r3, #8]
   42434:	b	423d8 <fts_children@@Base+0x1093c>
   42438:	cmp	r7, #69	; 0x45
   4243c:	beq	42214 <fts_children@@Base+0x10778>
   42440:	ldr	r3, [sp, #44]	; 0x2c
   42444:	b	423d8 <fts_children@@Base+0x1093c>
   42448:	ldr	r3, [pc, #1640]	; 42ab8 <fts_children@@Base+0x1101c>
   4244c:	str	r3, [sp, #48]	; 0x30
   42450:	ldr	r3, [sp, #1196]	; 0x4ac
   42454:	ldr	r2, [sp, #48]	; 0x30
   42458:	str	r3, [sp, #12]
   4245c:	ldr	r3, [sp, #32]
   42460:	mvn	r1, #0
   42464:	str	r3, [sp, #8]
   42468:	ldr	r3, [sp, #36]	; 0x24
   4246c:	mov	r0, #0
   42470:	str	r3, [sp, #4]
   42474:	ldr	r3, [sp, #20]
   42478:	str	r3, [sp]
   4247c:	ldr	r3, [sp, #28]
   42480:	bl	41ad4 <fts_children@@Base+0x10038>
   42484:	bic	r3, r6, r6, asr #31
   42488:	ldr	r2, [sp, #16]
   4248c:	sub	r8, r2, fp
   42490:	cmp	r0, r3
   42494:	movcs	r7, r0
   42498:	movcc	r7, r3
   4249c:	cmp	r8, r7
   424a0:	mov	r4, r0
   424a4:	bls	41bb0 <fts_children@@Base+0x10114>
   424a8:	cmp	r9, #0
   424ac:	beq	423a4 <fts_children@@Base+0x10908>
   424b0:	cmp	r0, r3
   424b4:	bcs	424dc <fts_children@@Base+0x10a40>
   424b8:	cmp	sl, #48	; 0x30
   424bc:	sub	r2, r6, r0
   424c0:	moveq	r1, sl
   424c4:	moveq	r0, r9
   424c8:	movne	r0, r9
   424cc:	movne	r1, #32
   424d0:	add	r6, r9, r2
   424d4:	bl	12514 <memset@plt>
   424d8:	mov	r9, r6
   424dc:	ldr	r3, [sp, #1196]	; 0x4ac
   424e0:	mov	r0, r9
   424e4:	str	r3, [sp, #12]
   424e8:	ldr	r3, [sp, #32]
   424ec:	ldr	r2, [sp, #48]	; 0x30
   424f0:	str	r3, [sp, #8]
   424f4:	ldr	r3, [sp, #36]	; 0x24
   424f8:	mov	r1, r8
   424fc:	str	r3, [sp, #4]
   42500:	ldr	r3, [sp, #20]
   42504:	add	r9, r9, r4
   42508:	str	r3, [sp]
   4250c:	ldr	r3, [sp, #28]
   42510:	bl	41ad4 <fts_children@@Base+0x10038>
   42514:	b	423a4 <fts_children@@Base+0x10908>
   42518:	cmp	r7, #69	; 0x45
   4251c:	beq	42214 <fts_children@@Base+0x10778>
   42520:	ldr	r3, [sp, #28]
   42524:	mov	r2, #2
   42528:	str	r2, [sp, #48]	; 0x30
   4252c:	ldr	r3, [r3]
   42530:	b	42034 <fts_children@@Base+0x10598>
   42534:	cmp	r7, #69	; 0x45
   42538:	beq	42214 <fts_children@@Base+0x10778>
   4253c:	ldr	r2, [sp, #28]
   42540:	mov	r1, #2
   42544:	str	r1, [sp, #48]	; 0x30
   42548:	ldrd	r2, [r2, #24]
   4254c:	sub	r3, r3, r2
   42550:	ldr	r2, [pc, #1412]	; 42adc <fts_children@@Base+0x11040>
   42554:	add	r3, r3, #7
   42558:	smull	r1, r2, r2, r3
   4255c:	add	r2, r2, r3
   42560:	asr	r3, r3, #31
   42564:	rsb	r3, r3, r2, asr #2
   42568:	b	42034 <fts_children@@Base+0x10598>
   4256c:	cmp	r7, #69	; 0x45
   42570:	beq	42f40 <fts_children@@Base+0x114a4>
   42574:	cmp	r7, #79	; 0x4f
   42578:	beq	42214 <fts_children@@Base+0x10778>
   4257c:	ldr	r3, [sp, #28]
   42580:	ldr	r2, [pc, #1368]	; 42ae0 <fts_children@@Base+0x11044>
   42584:	mov	r0, #0
   42588:	ldr	lr, [r3, #20]
   4258c:	str	r0, [sp, #52]	; 0x34
   42590:	add	r3, lr, #1888	; 0x760
   42594:	cmp	lr, r2
   42598:	add	r3, r3, #12
   4259c:	movge	lr, #0
   425a0:	movlt	lr, #1
   425a4:	mov	r2, #4
   425a8:	str	r2, [sp, #48]	; 0x30
   425ac:	cmp	lr, #0
   425b0:	rsbne	r3, r3, #0
   425b4:	add	r8, sp, #120	; 0x78
   425b8:	add	ip, r8, #10
   425bc:	mov	r7, r3
   425c0:	b	425c8 <fts_children@@Base+0x10b2c>
   425c4:	mov	r7, r2
   425c8:	tst	r0, #1
   425cc:	subne	r3, ip, #2
   425d0:	sub	r4, ip, #1
   425d4:	movne	r2, #58	; 0x3a
   425d8:	strbne	r2, [ip, #-1]
   425dc:	movne	ip, r4
   425e0:	movne	r4, r3
   425e4:	ldr	r3, [pc, #1232]	; 42abc <fts_children@@Base+0x11020>
   425e8:	asrs	r0, r0, #1
   425ec:	movne	r1, #1
   425f0:	umull	r3, r2, r3, r7
   425f4:	moveq	r1, #0
   425f8:	lsr	r2, r2, #3
   425fc:	cmp	r7, #9
   42600:	orrhi	r1, r1, #1
   42604:	add	r3, r2, r2, lsl #2
   42608:	cmp	r1, #0
   4260c:	sub	r3, r7, r3, lsl #1
   42610:	add	r3, r3, #48	; 0x30
   42614:	strb	r3, [ip, #-1]
   42618:	mov	ip, r4
   4261c:	bne	425c4 <fts_children@@Base+0x10b28>
   42620:	ldr	r3, [sp, #48]	; 0x30
   42624:	cmp	r3, r6
   42628:	movlt	r3, r6
   4262c:	cmp	lr, #0
   42630:	bne	42d90 <fts_children@@Base+0x112f4>
   42634:	ldr	r2, [sp, #52]	; 0x34
   42638:	cmp	r2, #0
   4263c:	beq	42104 <fts_children@@Base+0x10668>
   42640:	cmp	sl, #45	; 0x2d
   42644:	beq	42f4c <fts_children@@Base+0x114b0>
   42648:	mov	r2, #43	; 0x2b
   4264c:	str	r2, [sp, #52]	; 0x34
   42650:	add	r7, r8, #10
   42654:	sub	r7, r7, r4
   42658:	sub	r2, r3, r7
   4265c:	sub	r2, r2, #1
   42660:	str	r2, [sp, #48]	; 0x30
   42664:	cmp	r2, #0
   42668:	ldr	r2, [sp, #16]
   4266c:	sub	r2, r2, fp
   42670:	ble	42e48 <fts_children@@Base+0x113ac>
   42674:	cmp	sl, #95	; 0x5f
   42678:	beq	42ed4 <fts_children@@Base+0x11438>
   4267c:	cmp	r3, r2
   42680:	bcs	41bb0 <fts_children@@Base+0x10114>
   42684:	bic	r0, r6, r6, asr #31
   42688:	cmp	r0, #1
   4268c:	movcs	r1, r0
   42690:	movcc	r1, #1
   42694:	cmp	r1, r2
   42698:	bcs	41bb0 <fts_children@@Base+0x10114>
   4269c:	cmp	r9, #0
   426a0:	add	fp, fp, r1
   426a4:	beq	4271c <fts_children@@Base+0x10c80>
   426a8:	cmp	r0, #1
   426ac:	movls	r2, #0
   426b0:	movhi	r2, #1
   426b4:	cmp	r3, #0
   426b8:	movne	r2, #0
   426bc:	cmp	r2, #0
   426c0:	beq	426ec <fts_children@@Base+0x10c50>
   426c4:	sub	r2, r6, #1
   426c8:	cmp	sl, #48	; 0x30
   426cc:	str	r3, [sp, #56]	; 0x38
   426d0:	mov	r0, r9
   426d4:	add	r8, r9, r2
   426d8:	beq	431b8 <fts_children@@Base+0x1171c>
   426dc:	mov	r1, #32
   426e0:	bl	12514 <memset@plt>
   426e4:	ldr	r3, [sp, #56]	; 0x38
   426e8:	mov	r9, r8
   426ec:	ldr	r2, [sp, #52]	; 0x34
   426f0:	strb	r2, [r9], #1
   426f4:	cmp	r9, #0
   426f8:	beq	4271c <fts_children@@Base+0x10c80>
   426fc:	ldr	r6, [sp, #48]	; 0x30
   42700:	mov	r0, r9
   42704:	mov	r2, r6
   42708:	mov	r1, #48	; 0x30
   4270c:	str	r3, [sp, #52]	; 0x34
   42710:	bl	12514 <memset@plt>
   42714:	ldr	r3, [sp, #52]	; 0x34
   42718:	add	r9, r9, r6
   4271c:	ldr	r2, [sp, #48]	; 0x30
   42720:	mov	r6, #0
   42724:	add	fp, fp, r2
   42728:	ldr	r2, [sp, #16]
   4272c:	str	r6, [sp, #48]	; 0x30
   42730:	sub	r2, r2, fp
   42734:	b	42134 <fts_children@@Base+0x10698>
   42738:	ldr	r3, [sp, #20]
   4273c:	cmp	r8, #0
   42740:	movne	r3, #0
   42744:	ldr	r0, [sp, #40]	; 0x28
   42748:	str	r3, [sp, #20]
   4274c:	bl	1249c <strlen@plt>
   42750:	bic	r3, r6, r6, asr #31
   42754:	ldr	r2, [sp, #16]
   42758:	sub	r2, r2, fp
   4275c:	cmp	r0, r3
   42760:	movcs	r4, r0
   42764:	movcc	r4, r3
   42768:	cmp	r2, r4
   4276c:	mov	r7, r0
   42770:	bls	41bb0 <fts_children@@Base+0x10114>
   42774:	cmp	r9, #0
   42778:	beq	427d0 <fts_children@@Base+0x10d34>
   4277c:	cmp	r0, r3
   42780:	bcs	427a8 <fts_children@@Base+0x10d0c>
   42784:	cmp	sl, #48	; 0x30
   42788:	sub	r2, r6, r0
   4278c:	moveq	r1, sl
   42790:	moveq	r0, r9
   42794:	movne	r0, r9
   42798:	movne	r1, #32
   4279c:	add	r6, r9, r2
   427a0:	bl	12514 <memset@plt>
   427a4:	mov	r9, r6
   427a8:	cmp	r8, #0
   427ac:	bne	43124 <fts_children@@Base+0x11688>
   427b0:	ldr	r3, [sp, #20]
   427b4:	mov	r2, r7
   427b8:	cmp	r3, #0
   427bc:	ldr	r1, [sp, #40]	; 0x28
   427c0:	mov	r0, r9
   427c4:	beq	4311c <fts_children@@Base+0x11680>
   427c8:	bl	41a94 <fts_children@@Base+0xfff8>
   427cc:	add	r9, r9, r7
   427d0:	add	fp, fp, r4
   427d4:	b	41b78 <fts_children@@Base+0x100dc>
   427d8:	cmp	r7, #69	; 0x45
   427dc:	beq	42214 <fts_children@@Base+0x10778>
   427e0:	ldr	r3, [sp, #28]
   427e4:	ldr	ip, [pc, #752]	; 42adc <fts_children@@Base+0x11040>
   427e8:	ldrd	r2, [r3, #24]
   427ec:	add	r2, r2, #6
   427f0:	smull	r0, r1, ip, r2
   427f4:	add	r0, r1, r2
   427f8:	asr	r1, r2, #31
   427fc:	rsb	r1, r1, r0, asr #2
   42800:	mov	r0, #2
   42804:	rsb	r1, r1, r1, lsl #3
   42808:	sub	r2, r2, r1
   4280c:	sub	r3, r3, r2
   42810:	add	r3, r3, #7
   42814:	str	r0, [sp, #48]	; 0x30
   42818:	smull	r1, r2, ip, r3
   4281c:	add	r2, r2, r3
   42820:	asr	r3, r3, #31
   42824:	rsb	r3, r3, r2, asr r0
   42828:	b	42034 <fts_children@@Base+0x10598>
   4282c:	cmp	r7, #0
   42830:	bne	42214 <fts_children@@Base+0x10778>
   42834:	ldr	r3, [pc, #644]	; 42ac0 <fts_children@@Base+0x11024>
   42838:	str	r3, [sp, #48]	; 0x30
   4283c:	b	42450 <fts_children@@Base+0x109b4>
   42840:	cmp	r7, #0
   42844:	bne	42214 <fts_children@@Base+0x10778>
   42848:	ldr	r3, [pc, #628]	; 42ac4 <fts_children@@Base+0x11028>
   4284c:	str	r3, [sp, #48]	; 0x30
   42850:	b	42450 <fts_children@@Base+0x109b4>
   42854:	cmp	r7, #69	; 0x45
   42858:	beq	42214 <fts_children@@Base+0x10778>
   4285c:	ldr	r3, [sp, #28]
   42860:	ldr	r0, [r3, #28]
   42864:	ldr	r2, [r3, #24]
   42868:	ldr	r8, [r3, #20]
   4286c:	sub	r3, r0, r2
   42870:	str	r2, [sp, #52]	; 0x34
   42874:	add	r3, r3, #380	; 0x17c
   42878:	ldr	r2, [pc, #604]	; 42adc <fts_children@@Base+0x11040>
   4287c:	add	r3, r3, #2
   42880:	cmp	r8, #0
   42884:	smull	r1, r2, r2, r3
   42888:	str	r0, [sp, #48]	; 0x30
   4288c:	add	r1, r2, r3
   42890:	asr	r2, r3, #31
   42894:	rsb	r2, r2, r1, asr #2
   42898:	movlt	r1, #300	; 0x12c
   4289c:	rsb	r2, r2, r2, lsl #3
   428a0:	sub	r3, r3, r2
   428a4:	sub	r3, r0, r3
   428a8:	mvnge	r1, #99	; 0x63
   428ac:	adds	r3, r3, #3
   428b0:	add	r1, r8, r1
   428b4:	bmi	42fb4 <fts_children@@Base+0x11518>
   428b8:	tst	r1, #3
   428bc:	ldrne	r2, [pc, #524]	; 42ad0 <fts_children@@Base+0x11034>
   428c0:	bne	42904 <fts_children@@Base+0x10e68>
   428c4:	ldr	r2, [pc, #512]	; 42acc <fts_children@@Base+0x11030>
   428c8:	smull	r2, ip, r2, r1
   428cc:	asr	r2, r1, #31
   428d0:	rsb	r0, r2, ip, asr #5
   428d4:	add	r0, r0, r0, lsl #2
   428d8:	add	r0, r0, r0, lsl #2
   428dc:	cmp	r1, r0, lsl #2
   428e0:	ldrne	r2, [pc, #492]	; 42ad4 <fts_children@@Base+0x11038>
   428e4:	bne	42904 <fts_children@@Base+0x10e68>
   428e8:	rsb	r0, r2, ip, asr #7
   428ec:	ldr	ip, [pc, #480]	; 42ad4 <fts_children@@Base+0x11038>
   428f0:	add	r0, r0, r0, lsl #2
   428f4:	ldr	r2, [pc, #468]	; 42ad0 <fts_children@@Base+0x11034>
   428f8:	add	r0, r0, r0, lsl #2
   428fc:	cmp	r1, r0, lsl #4
   42900:	moveq	r2, ip
   42904:	ldr	r1, [sp, #48]	; 0x30
   42908:	sub	ip, r1, r2
   4290c:	ldr	r2, [sp, #52]	; 0x34
   42910:	ldr	r1, [pc, #452]	; 42adc <fts_children@@Base+0x11040>
   42914:	sub	r2, ip, r2
   42918:	add	r2, r2, #380	; 0x17c
   4291c:	add	r2, r2, #2
   42920:	smull	r0, r1, r1, r2
   42924:	add	r0, r1, r2
   42928:	asr	r1, r2, #31
   4292c:	rsb	r1, r1, r0, asr #2
   42930:	rsb	r1, r1, r1, lsl #3
   42934:	sub	r2, r2, r1
   42938:	sub	r2, ip, r2
   4293c:	add	r2, r2, #3
   42940:	cmp	r2, #0
   42944:	movge	r3, r2
   42948:	movlt	r2, #0
   4294c:	movge	r2, #1
   42950:	cmp	r4, #71	; 0x47
   42954:	beq	430cc <fts_children@@Base+0x11630>
   42958:	cmp	r4, #103	; 0x67
   4295c:	bne	430a8 <fts_children@@Base+0x1160c>
   42960:	ldr	r0, [pc, #356]	; 42acc <fts_children@@Base+0x11030>
   42964:	smull	r3, r1, r0, r8
   42968:	asr	r3, r8, #31
   4296c:	rsb	r3, r3, r1, asr #5
   42970:	add	r3, r3, r3, lsl #2
   42974:	add	r3, r3, r3, lsl #2
   42978:	sub	r1, r8, r3, lsl #2
   4297c:	add	r1, r1, r2
   42980:	smull	r3, r0, r0, r1
   42984:	asr	r3, r1, #31
   42988:	rsb	r3, r3, r0, asr #5
   4298c:	add	r3, r3, r3, lsl #2
   42990:	add	r3, r3, r3, lsl #2
   42994:	subs	r3, r1, r3, lsl #2
   42998:	bpl	421f0 <fts_children@@Base+0x10754>
   4299c:	ldr	r1, [pc, #316]	; 42ae0 <fts_children@@Base+0x11044>
   429a0:	sub	r1, r1, r2
   429a4:	cmp	r1, r8
   429a8:	ble	4310c <fts_children@@Base+0x11670>
   429ac:	mov	r2, #2
   429b0:	rsb	r3, r3, #0
   429b4:	str	r2, [sp, #48]	; 0x30
   429b8:	b	42034 <fts_children@@Base+0x10598>
   429bc:	cmp	r7, #69	; 0x45
   429c0:	beq	42214 <fts_children@@Base+0x10778>
   429c4:	ldr	r3, [sp, #28]
   429c8:	mov	r2, #2
   429cc:	str	r2, [sp, #48]	; 0x30
   429d0:	ldr	r3, [r3, #8]
   429d4:	b	42034 <fts_children@@Base+0x10598>
   429d8:	cmp	r7, #69	; 0x45
   429dc:	beq	42214 <fts_children@@Base+0x10778>
   429e0:	ldr	r3, [sp, #28]
   429e4:	mov	r2, #2
   429e8:	str	r2, [sp, #48]	; 0x30
   429ec:	ldr	r3, [r3, #4]
   429f0:	b	42034 <fts_children@@Base+0x10598>
   429f4:	cmp	r7, #69	; 0x45
   429f8:	beq	42214 <fts_children@@Base+0x10778>
   429fc:	cmn	r6, #1
   42a00:	bne	43048 <fts_children@@Base+0x115ac>
   42a04:	mov	r6, #9
   42a08:	str	r6, [sp, #48]	; 0x30
   42a0c:	ldr	r3, [sp, #1196]	; 0x4ac
   42a10:	b	42034 <fts_children@@Base+0x10598>
   42a14:	ldrb	r3, [r5, #-1]
   42a18:	sub	r7, r5, #1
   42a1c:	cmp	r3, #37	; 0x25
   42a20:	ldr	r3, [sp, #16]
   42a24:	sub	r2, r3, fp
   42a28:	bic	r3, r6, r6, asr #31
   42a2c:	bne	431e8 <fts_children@@Base+0x1174c>
   42a30:	cmp	r3, #1
   42a34:	movcs	r8, r3
   42a38:	movcc	r8, #1
   42a3c:	mov	r5, r7
   42a40:	mov	r4, #1
   42a44:	b	42248 <fts_children@@Base+0x107ac>
   42a48:	cmp	r7, #69	; 0x45
   42a4c:	beq	42214 <fts_children@@Base+0x10778>
   42a50:	mov	r2, #2
   42a54:	ldr	r3, [sp, #44]	; 0x2c
   42a58:	str	r2, [sp, #48]	; 0x30
   42a5c:	b	42034 <fts_children@@Base+0x10598>
   42a60:	ldr	r3, [sp, #28]
   42a64:	cmp	r7, #79	; 0x4f
   42a68:	ldr	r3, [r3, #16]
   42a6c:	moveq	r3, #1
   42a70:	streq	r3, [sp, #48]	; 0x30
   42a74:	beq	42058 <fts_children@@Base+0x105bc>
   42a78:	add	r2, r3, r3, lsl #2
   42a7c:	mov	r0, #0
   42a80:	add	r3, r3, r2, lsl #1
   42a84:	mov	r2, #1
   42a88:	asr	r3, r3, #5
   42a8c:	str	r0, [sp, #52]	; 0x34
   42a90:	mov	lr, r0
   42a94:	add	r3, r3, #1
   42a98:	str	r2, [sp, #48]	; 0x30
   42a9c:	b	425b4 <fts_children@@Base+0x10b18>
   42aa0:	andeq	fp, r5, r0, ror #24
   42aa4:	andeq	r8, r4, r0, lsr r6
   42aa8:	stcleq	12, cr12, [ip], {204}	; 0xcc
   42aac:	andeq	r2, r0, r0, lsr #10
   42ab0:	stmhi	r8, {r0, r3, r7, fp, pc}
   42ab4:			; <UNDEFINED> instruction: 0x91a2b3c5
   42ab8:	andeq	sl, r4, r4, lsr #24
   42abc:	stclgt	12, cr12, [ip], {205}	; 0xcd
   42ac0:	andeq	sl, r4, r8, lsl ip
   42ac4:	andeq	sl, r4, ip, lsr #24
   42ac8:	andeq	sl, r4, ip, lsl #24
   42acc:	mvnpl	r8, pc, lsl r5
   42ad0:	andeq	r0, r0, sp, ror #2
   42ad4:	andeq	r0, r0, lr, ror #2
   42ad8:	strbtvs	r6, [r6], -r7, ror #12
   42adc:	subls	r2, r9, #-1828716544	; 0x93000000
   42ae0:			; <UNDEFINED> instruction: 0xfffff894
   42ae4:	bic	r7, r6, r6, asr #31
   42ae8:	ldr	r3, [sp, #16]
   42aec:	cmp	r7, #1
   42af0:	movcc	r7, #1
   42af4:	sub	r3, r3, fp
   42af8:	cmp	r3, r7
   42afc:	bls	41bb0 <fts_children@@Base+0x10114>
   42b00:	cmp	r9, #0
   42b04:	beq	423a4 <fts_children@@Base+0x10908>
   42b08:	cmp	r6, #1
   42b0c:	ble	42b34 <fts_children@@Base+0x11098>
   42b10:	cmp	sl, #48	; 0x30
   42b14:	sub	r2, r6, #1
   42b18:	moveq	r0, r9
   42b1c:	movne	r0, r9
   42b20:	moveq	r1, sl
   42b24:	movne	r1, #32
   42b28:	add	r4, r9, r2
   42b2c:	bl	12514 <memset@plt>
   42b30:	mov	r9, r4
   42b34:	mov	r3, #9
   42b38:	strb	r3, [r9], #1
   42b3c:	b	423a4 <fts_children@@Base+0x10908>
   42b40:	mov	r3, #0
   42b44:	str	r3, [sp, #52]	; 0x34
   42b48:	ldr	r3, [sp, #52]	; 0x34
   42b4c:	cmp	r8, #0
   42b50:	movne	r3, r8
   42b54:	str	r3, [sp, #52]	; 0x34
   42b58:	ldr	r3, [sp, #20]
   42b5c:	movne	r3, #0
   42b60:	str	r3, [sp, #20]
   42b64:	mov	r4, #112	; 0x70
   42b68:	b	41ed8 <fts_children@@Base+0x1043c>
   42b6c:	cmp	r7, #69	; 0x45
   42b70:	beq	42214 <fts_children@@Base+0x10778>
   42b74:	ldr	r3, [sp, #20]
   42b78:	cmp	r8, #0
   42b7c:	movne	r3, r8
   42b80:	str	r3, [sp, #20]
   42b84:	mov	r3, #0
   42b88:	str	r3, [sp, #52]	; 0x34
   42b8c:	b	41ed8 <fts_children@@Base+0x1043c>
   42b90:	cmp	r7, #69	; 0x45
   42b94:	beq	42f40 <fts_children@@Base+0x114a4>
   42b98:	ldr	r3, [sp, #28]
   42b9c:	mov	r0, #0
   42ba0:	ldr	lr, [pc, #-200]	; 42ae0 <fts_children@@Base+0x11044>
   42ba4:	ldr	ip, [r3, #20]
   42ba8:	ldr	r3, [pc, #-228]	; 42acc <fts_children@@Base+0x11030>
   42bac:	str	r0, [sp, #52]	; 0x34
   42bb0:	smull	r2, r3, r3, ip
   42bb4:	asr	r2, ip, #31
   42bb8:	rsb	r2, r2, r3, asr #5
   42bbc:	add	r3, r2, #19
   42bc0:	add	r2, r2, r2, lsl #2
   42bc4:	cmp	r3, r0
   42bc8:	add	r2, r2, r2, lsl #2
   42bcc:	movle	r1, #0
   42bd0:	sub	r2, ip, r2, lsl #2
   42bd4:	movgt	r1, #1
   42bd8:	and	r2, r1, r2, lsr #31
   42bdc:	cmp	ip, lr
   42be0:	sub	r3, r3, r2
   42be4:	mov	r2, #2
   42be8:	movge	lr, #0
   42bec:	movlt	lr, #1
   42bf0:	str	r2, [sp, #48]	; 0x30
   42bf4:	b	42040 <fts_children@@Base+0x105a4>
   42bf8:	cmp	r7, #69	; 0x45
   42bfc:	beq	42214 <fts_children@@Base+0x10778>
   42c00:	ldr	r3, [sp, #28]
   42c04:	mov	r2, #1
   42c08:	str	r2, [sp, #48]	; 0x30
   42c0c:	ldr	r3, [r3, #24]
   42c10:	b	42034 <fts_children@@Base+0x10598>
   42c14:	cmp	r7, #69	; 0x45
   42c18:	beq	42214 <fts_children@@Base+0x10778>
   42c1c:	ldr	r3, [sp, #28]
   42c20:	mov	r0, #0
   42c24:	mov	r2, #2
   42c28:	ldr	r3, [r3, #16]
   42c2c:	str	r0, [sp, #52]	; 0x34
   42c30:	cmn	r3, #1
   42c34:	movge	lr, #0
   42c38:	movlt	lr, #1
   42c3c:	add	r3, r3, #1
   42c40:	str	r2, [sp, #48]	; 0x30
   42c44:	b	42040 <fts_children@@Base+0x105a4>
   42c48:	bic	r3, r6, r6, asr #31
   42c4c:	ldr	r2, [sp, #16]
   42c50:	cmp	r3, #1
   42c54:	movcs	r8, r3
   42c58:	movcc	r8, #1
   42c5c:	cmp	r7, #0
   42c60:	sub	r2, r2, fp
   42c64:	bne	4315c <fts_children@@Base+0x116c0>
   42c68:	cmp	r8, r2
   42c6c:	bcs	41bb0 <fts_children@@Base+0x10114>
   42c70:	cmp	r9, #0
   42c74:	beq	421b8 <fts_children@@Base+0x1071c>
   42c78:	cmp	r6, #1
   42c7c:	ble	42ca4 <fts_children@@Base+0x11208>
   42c80:	sub	r2, r6, #1
   42c84:	cmp	sl, #48	; 0x30
   42c88:	add	r7, r9, r2
   42c8c:	beq	4317c <fts_children@@Base+0x116e0>
   42c90:	mov	r0, r9
   42c94:	mov	r1, #32
   42c98:	bl	12514 <memset@plt>
   42c9c:	ldrb	r4, [r5]
   42ca0:	mov	r9, r7
   42ca4:	strb	r4, [r9], #1
   42ca8:	b	421b8 <fts_children@@Base+0x1071c>
   42cac:	ldrb	r3, [r5, #1]
   42cb0:	add	r2, r5, #1
   42cb4:	cmp	r3, #58	; 0x3a
   42cb8:	beq	43138 <fts_children@@Base+0x1169c>
   42cbc:	mov	r1, #1
   42cc0:	str	r1, [sp, #48]	; 0x30
   42cc4:	cmp	r3, #122	; 0x7a
   42cc8:	moveq	r5, r2
   42ccc:	beq	422b0 <fts_children@@Base+0x10814>
   42cd0:	b	42214 <fts_children@@Base+0x10778>
   42cd4:	mov	r3, #1
   42cd8:	str	r3, [sp, #52]	; 0x34
   42cdc:	b	42b48 <fts_children@@Base+0x110ac>
   42ce0:	ldr	r3, [pc, #-544]	; 42ac8 <fts_children@@Base+0x1102c>
   42ce4:	str	r3, [sp, #48]	; 0x30
   42ce8:	b	42450 <fts_children@@Base+0x109b4>
   42cec:	rsb	r2, r3, r3, lsl #5
   42cf0:	add	r0, r0, r0, lsl #2
   42cf4:	add	r3, r3, r2, lsl #2
   42cf8:	add	r0, r0, r0, lsl #2
   42cfc:	add	ip, r3, r3, lsl #2
   42d00:	mov	r2, #1
   42d04:	lsl	r3, r0, #2
   42d08:	add	r3, r3, ip, lsl #4
   42d0c:	str	r2, [sp, #52]	; 0x34
   42d10:	mov	r2, #9
   42d14:	add	r3, r3, r1
   42d18:	mov	r0, #20
   42d1c:	str	r2, [sp, #48]	; 0x30
   42d20:	b	42040 <fts_children@@Base+0x105a4>
   42d24:	add	r3, r3, r3, lsl #2
   42d28:	mov	r2, #1
   42d2c:	add	r3, r3, r3, lsl #2
   42d30:	str	r2, [sp, #52]	; 0x34
   42d34:	mov	r2, #6
   42d38:	add	r3, r0, r3, lsl #2
   42d3c:	str	r2, [sp, #48]	; 0x30
   42d40:	mov	r0, #4
   42d44:	b	42040 <fts_children@@Base+0x105a4>
   42d48:	add	r3, r3, r3, lsl #2
   42d4c:	mov	r2, #1
   42d50:	add	r3, r3, r3, lsl #2
   42d54:	str	r2, [sp, #52]	; 0x34
   42d58:	mov	r2, #5
   42d5c:	add	r3, r0, r3, lsl #2
   42d60:	str	r2, [sp, #48]	; 0x30
   42d64:	mov	r0, #0
   42d68:	b	42040 <fts_children@@Base+0x105a4>
   42d6c:	cmp	r1, #0
   42d70:	bne	42cec <fts_children@@Base+0x11250>
   42d74:	cmp	r0, #0
   42d78:	bne	42d24 <fts_children@@Base+0x11288>
   42d7c:	mov	r2, #1
   42d80:	str	r2, [sp, #52]	; 0x34
   42d84:	mov	r2, #3
   42d88:	str	r2, [sp, #48]	; 0x30
   42d8c:	b	42040 <fts_children@@Base+0x105a4>
   42d90:	cmp	sl, #45	; 0x2d
   42d94:	movne	r2, #45	; 0x2d
   42d98:	strne	r2, [sp, #52]	; 0x34
   42d9c:	bne	42650 <fts_children@@Base+0x10bb4>
   42da0:	bic	r1, r6, r6, asr #31
   42da4:	ldr	r2, [sp, #16]
   42da8:	cmp	r1, #1
   42dac:	movcs	r7, r1
   42db0:	movcc	r7, #1
   42db4:	sub	r2, r2, fp
   42db8:	cmp	r2, r7
   42dbc:	str	r1, [sp, #48]	; 0x30
   42dc0:	bls	41bb0 <fts_children@@Base+0x10114>
   42dc4:	cmp	r9, #0
   42dc8:	beq	42dec <fts_children@@Base+0x11350>
   42dcc:	cmp	r1, #1
   42dd0:	movls	r2, #0
   42dd4:	movhi	r2, #1
   42dd8:	cmp	r3, #0
   42ddc:	movne	r2, #0
   42de0:	cmp	r2, #0
   42de4:	bne	4307c <fts_children@@Base+0x115e0>
   42de8:	strb	sl, [r9], #1
   42dec:	ldr	r2, [sp, #16]
   42df0:	add	fp, fp, r7
   42df4:	add	r7, r8, #10
   42df8:	sub	r7, r7, r4
   42dfc:	sub	r2, r2, fp
   42e00:	mov	sl, #45	; 0x2d
   42e04:	b	42134 <fts_children@@Base+0x10698>
   42e08:	bl	121a8 <memcpy@plt>
   42e0c:	b	421b4 <fts_children@@Base+0x10718>
   42e10:	bl	121a8 <memcpy@plt>
   42e14:	b	422a0 <fts_children@@Base+0x10804>
   42e18:	bl	121a8 <memcpy@plt>
   42e1c:	ldr	r3, [sp, #20]
   42e20:	b	41fc0 <fts_children@@Base+0x10524>
   42e24:	sub	r1, r8, #3
   42e28:	mov	r2, r4
   42e2c:	mov	r0, r9
   42e30:	str	r3, [sp, #20]
   42e34:	bl	41a54 <fts_children@@Base+0xffb8>
   42e38:	ldr	r3, [sp, #20]
   42e3c:	b	41fc0 <fts_children@@Base+0x10524>
   42e40:	mov	fp, r3
   42e44:	b	41b88 <fts_children@@Base+0x100ec>
   42e48:	bic	r1, r6, r6, asr #31
   42e4c:	cmp	r1, #1
   42e50:	movcs	r8, r1
   42e54:	movcc	r8, #1
   42e58:	cmp	r8, r2
   42e5c:	str	r1, [sp, #48]	; 0x30
   42e60:	bcs	41bb0 <fts_children@@Base+0x10114>
   42e64:	cmp	r9, #0
   42e68:	beq	42ebc <fts_children@@Base+0x11420>
   42e6c:	cmp	r1, #1
   42e70:	movls	r2, #0
   42e74:	movhi	r2, #1
   42e78:	cmp	r3, #0
   42e7c:	movne	r2, #0
   42e80:	cmp	r2, #0
   42e84:	beq	42eb4 <fts_children@@Base+0x11418>
   42e88:	sub	r2, r6, #1
   42e8c:	add	r1, r9, r2
   42e90:	cmp	sl, #48	; 0x30
   42e94:	str	r1, [sp, #56]	; 0x38
   42e98:	str	r3, [sp, #60]	; 0x3c
   42e9c:	mov	r0, r9
   42ea0:	beq	43168 <fts_children@@Base+0x116cc>
   42ea4:	mov	r1, #32
   42ea8:	bl	12514 <memset@plt>
   42eac:	ldr	r9, [sp, #56]	; 0x38
   42eb0:	ldr	r3, [sp, #60]	; 0x3c
   42eb4:	ldr	r2, [sp, #52]	; 0x34
   42eb8:	strb	r2, [r9], #1
   42ebc:	ldr	r2, [sp, #16]
   42ec0:	add	fp, fp, r8
   42ec4:	sub	r2, r2, fp
   42ec8:	b	42134 <fts_children@@Base+0x10698>
   42ecc:	mov	r1, #0
   42ed0:	str	r1, [sp, #52]	; 0x34
   42ed4:	ldr	r7, [sp, #48]	; 0x30
   42ed8:	cmp	r7, r2
   42edc:	bcs	41bb0 <fts_children@@Base+0x10114>
   42ee0:	cmp	r9, #0
   42ee4:	beq	42f04 <fts_children@@Base+0x11468>
   42ee8:	mov	r0, r9
   42eec:	mov	r2, r7
   42ef0:	mov	r1, #32
   42ef4:	str	r3, [sp, #56]	; 0x38
   42ef8:	bl	12514 <memset@plt>
   42efc:	ldr	r3, [sp, #56]	; 0x38
   42f00:	add	r9, r9, r7
   42f04:	ldr	r2, [sp, #48]	; 0x30
   42f08:	cmp	r2, r6
   42f0c:	add	fp, fp, r2
   42f10:	sublt	r6, r6, r2
   42f14:	ldr	r2, [sp, #52]	; 0x34
   42f18:	movge	r6, #0
   42f1c:	cmp	r2, #0
   42f20:	ldr	r2, [sp, #16]
   42f24:	sub	r2, r2, fp
   42f28:	bne	42f54 <fts_children@@Base+0x114b8>
   42f2c:	add	r7, r8, #10
   42f30:	sub	r7, r7, r4
   42f34:	str	r6, [sp, #48]	; 0x30
   42f38:	mov	sl, #95	; 0x5f
   42f3c:	b	42134 <fts_children@@Base+0x10698>
   42f40:	mov	r3, #0
   42f44:	str	r3, [sp, #48]	; 0x30
   42f48:	b	42058 <fts_children@@Base+0x105bc>
   42f4c:	mov	sl, #43	; 0x2b
   42f50:	b	42da0 <fts_children@@Base+0x11304>
   42f54:	cmp	r6, #1
   42f58:	movcs	sl, r6
   42f5c:	movcc	sl, #1
   42f60:	cmp	sl, r2
   42f64:	bcs	41bb0 <fts_children@@Base+0x10114>
   42f68:	cmp	r9, #0
   42f6c:	beq	42f94 <fts_children@@Base+0x114f8>
   42f70:	cmp	r6, #1
   42f74:	movls	r2, #0
   42f78:	movhi	r2, #1
   42f7c:	cmp	r3, #0
   42f80:	movne	r2, #0
   42f84:	cmp	r2, #0
   42f88:	bne	43194 <fts_children@@Base+0x116f8>
   42f8c:	ldr	r2, [sp, #52]	; 0x34
   42f90:	strb	r2, [r9], #1
   42f94:	ldr	r2, [sp, #16]
   42f98:	add	fp, fp, sl
   42f9c:	add	r7, r8, #10
   42fa0:	sub	r7, r7, r4
   42fa4:	sub	r2, r2, fp
   42fa8:	str	r6, [sp, #48]	; 0x30
   42fac:	mov	sl, #95	; 0x5f
   42fb0:	b	42134 <fts_children@@Base+0x10698>
   42fb4:	sub	r0, r1, #1
   42fb8:	tst	r0, #3
   42fbc:	ldrne	r1, [pc, #-1268]	; 42ad0 <fts_children@@Base+0x11034>
   42fc0:	bne	43004 <fts_children@@Base+0x11568>
   42fc4:	ldr	r3, [pc, #-1280]	; 42acc <fts_children@@Base+0x11030>
   42fc8:	smull	r3, r2, r3, r0
   42fcc:	asr	r3, r0, #31
   42fd0:	rsb	r3, r3, r2, asr #5
   42fd4:	add	r3, r3, r3, lsl #2
   42fd8:	add	r3, r3, r3, lsl #2
   42fdc:	cmp	r0, r3, lsl #2
   42fe0:	ldrne	r1, [pc, #-1300]	; 42ad4 <fts_children@@Base+0x11038>
   42fe4:	bne	43004 <fts_children@@Base+0x11568>
   42fe8:	mov	r1, #400	; 0x190
   42fec:	bl	43914 <fts_children@@Base+0x11e78>
   42ff0:	ldr	r3, [pc, #-1320]	; 42ad0 <fts_children@@Base+0x11034>
   42ff4:	ldr	r2, [pc, #-1320]	; 42ad4 <fts_children@@Base+0x11038>
   42ff8:	cmp	r1, #0
   42ffc:	movne	r1, r3
   43000:	moveq	r1, r2
   43004:	ldr	r3, [sp, #48]	; 0x30
   43008:	mvn	r2, #0
   4300c:	add	ip, r3, r1
   43010:	ldr	r3, [sp, #52]	; 0x34
   43014:	ldr	r1, [pc, #-1344]	; 42adc <fts_children@@Base+0x11040>
   43018:	sub	r3, ip, r3
   4301c:	add	r3, r3, #380	; 0x17c
   43020:	add	r3, r3, #2
   43024:	smull	r0, r1, r1, r3
   43028:	add	r0, r1, r3
   4302c:	asr	r1, r3, #31
   43030:	rsb	r1, r1, r0, asr #2
   43034:	rsb	r1, r1, r1, lsl #3
   43038:	sub	r3, r3, r1
   4303c:	sub	r3, ip, r3
   43040:	add	r3, r3, #3
   43044:	b	42950 <fts_children@@Base+0x10eb4>
   43048:	cmp	r6, #8
   4304c:	bgt	431cc <fts_children@@Base+0x11730>
   43050:	ldr	r3, [sp, #1196]	; 0x4ac
   43054:	mov	r2, r6
   43058:	ldr	r1, [pc, #-1416]	; 42ad8 <fts_children@@Base+0x1103c>
   4305c:	add	r2, r2, #1
   43060:	cmp	r2, #9
   43064:	smull	r0, r1, r1, r3
   43068:	asr	r3, r3, #31
   4306c:	rsb	r3, r3, r1, asr #2
   43070:	bne	43058 <fts_children@@Base+0x115bc>
   43074:	str	r6, [sp, #48]	; 0x30
   43078:	b	42034 <fts_children@@Base+0x10598>
   4307c:	str	r3, [sp, #56]	; 0x38
   43080:	sub	r3, r6, #1
   43084:	mov	r2, r3
   43088:	mov	r0, r9
   4308c:	mov	r1, #32
   43090:	str	r3, [sp, #52]	; 0x34
   43094:	bl	12514 <memset@plt>
   43098:	ldr	r3, [sp, #52]	; 0x34
   4309c:	add	r9, r9, r3
   430a0:	ldr	r3, [sp, #56]	; 0x38
   430a4:	b	42de8 <fts_children@@Base+0x1134c>
   430a8:	ldr	r2, [pc, #-1492]	; 42adc <fts_children@@Base+0x11040>
   430ac:	smull	r1, r2, r2, r3
   430b0:	add	r2, r2, r3
   430b4:	asr	r3, r3, #31
   430b8:	rsb	r3, r3, r2, asr #2
   430bc:	mov	r2, #2
   430c0:	add	r3, r3, #1
   430c4:	str	r2, [sp, #48]	; 0x30
   430c8:	b	42034 <fts_children@@Base+0x10598>
   430cc:	ldr	lr, [pc, #-1524]	; 42ae0 <fts_children@@Base+0x11044>
   430d0:	add	r3, r8, #1888	; 0x760
   430d4:	sub	lr, lr, r2
   430d8:	add	r3, r3, #12
   430dc:	cmp	r8, lr
   430e0:	mov	r0, #0
   430e4:	add	r3, r3, r2
   430e8:	mov	r2, #4
   430ec:	movge	lr, #0
   430f0:	movlt	lr, #1
   430f4:	str	r0, [sp, #52]	; 0x34
   430f8:	str	r2, [sp, #48]	; 0x30
   430fc:	b	42040 <fts_children@@Base+0x105a4>
   43100:	ldr	r1, [pc, #-1576]	; 42ae0 <fts_children@@Base+0x11044>
   43104:	cmp	r2, r1
   43108:	blt	429ac <fts_children@@Base+0x10f10>
   4310c:	mov	r2, #2
   43110:	add	r3, r3, #100	; 0x64
   43114:	str	r2, [sp, #48]	; 0x30
   43118:	b	42034 <fts_children@@Base+0x10598>
   4311c:	bl	121a8 <memcpy@plt>
   43120:	b	427cc <fts_children@@Base+0x10d30>
   43124:	mov	r2, r7
   43128:	ldr	r1, [sp, #40]	; 0x28
   4312c:	mov	r0, r9
   43130:	bl	41a54 <fts_children@@Base+0xffb8>
   43134:	b	427cc <fts_children@@Base+0x10d30>
   43138:	add	r1, r5, #2
   4313c:	mov	r0, #1
   43140:	mov	r2, r1
   43144:	ldrb	r3, [r1], #1
   43148:	add	r0, r0, #1
   4314c:	cmp	r3, #58	; 0x3a
   43150:	beq	43140 <fts_children@@Base+0x116a4>
   43154:	str	r0, [sp, #48]	; 0x30
   43158:	b	42cc4 <fts_children@@Base+0x11228>
   4315c:	mov	r7, r5
   43160:	mov	r4, #1
   43164:	b	42248 <fts_children@@Base+0x107ac>
   43168:	mov	r1, sl
   4316c:	ldr	r9, [sp, #56]	; 0x38
   43170:	bl	12514 <memset@plt>
   43174:	ldr	r3, [sp, #60]	; 0x3c
   43178:	b	42eb4 <fts_children@@Base+0x11418>
   4317c:	mov	r0, r9
   43180:	mov	r1, sl
   43184:	bl	12514 <memset@plt>
   43188:	mov	r9, r7
   4318c:	ldrb	r4, [r5]
   43190:	b	42ca4 <fts_children@@Base+0x11208>
   43194:	sub	r7, r6, #1
   43198:	mov	r0, r9
   4319c:	mov	r2, r7
   431a0:	mov	r1, #32
   431a4:	str	r3, [sp, #48]	; 0x30
   431a8:	add	r9, r9, r7
   431ac:	bl	12514 <memset@plt>
   431b0:	ldr	r3, [sp, #48]	; 0x30
   431b4:	b	42f8c <fts_children@@Base+0x114f0>
   431b8:	mov	r1, sl
   431bc:	bl	12514 <memset@plt>
   431c0:	mov	r9, r8
   431c4:	ldr	r3, [sp, #56]	; 0x38
   431c8:	b	426ec <fts_children@@Base+0x10c50>
   431cc:	ldr	r3, [sp, #1196]	; 0x4ac
   431d0:	str	r6, [sp, #48]	; 0x30
   431d4:	b	42034 <fts_children@@Base+0x10598>
   431d8:	bl	12244 <__stack_chk_fail@plt>
   431dc:	mov	r3, #0
   431e0:	str	r3, [sp, #48]	; 0x30
   431e4:	b	4206c <fts_children@@Base+0x105d0>
   431e8:	mov	r5, r7
   431ec:	b	42214 <fts_children@@Base+0x10778>
   431f0:	ldrb	r3, [r5]
   431f4:	mov	r7, r5
   431f8:	b	42a1c <fts_children@@Base+0x10f80>
   431fc:	push	{r4, r5, lr}
   43200:	sub	sp, sp, #28
   43204:	ldr	r4, [pc, #72]	; 43254 <fts_children@@Base+0x117b8>
   43208:	ldr	ip, [sp, #44]	; 0x2c
   4320c:	ldr	r5, [sp, #40]	; 0x28
   43210:	ldr	lr, [r4]
   43214:	str	ip, [sp, #12]
   43218:	str	lr, [sp, #20]
   4321c:	mov	ip, #0
   43220:	add	lr, sp, #19
   43224:	str	r5, [sp, #8]
   43228:	str	ip, [sp]
   4322c:	str	lr, [sp, #4]
   43230:	strb	ip, [sp, #19]
   43234:	bl	41ad4 <fts_children@@Base+0x10038>
   43238:	ldr	r2, [sp, #20]
   4323c:	ldr	r3, [r4]
   43240:	cmp	r2, r3
   43244:	bne	43250 <fts_children@@Base+0x117b4>
   43248:	add	sp, sp, #28
   4324c:	pop	{r4, r5, pc}
   43250:	bl	12244 <__stack_chk_fail@plt>
   43254:	andeq	fp, r5, r0, ror #24
   43258:	push	{r2, r3}
   4325c:	push	{r4, lr}
   43260:	sub	sp, sp, #8
   43264:	ldr	r4, [pc, #68]	; 432b0 <fts_children@@Base+0x11814>
   43268:	ldr	r2, [sp, #16]
   4326c:	ands	r3, r2, #64	; 0x40
   43270:	addne	r3, sp, #20
   43274:	ldr	ip, [r4]
   43278:	strne	r3, [sp]
   4327c:	ldrne	r3, [sp, #20]
   43280:	str	ip, [sp, #4]
   43284:	bl	124c0 <openat64@plt>
   43288:	bl	2d96c <__assert_fail@plt+0x1b1d0>
   4328c:	ldr	r2, [sp, #4]
   43290:	ldr	r3, [r4]
   43294:	cmp	r2, r3
   43298:	bne	432ac <fts_children@@Base+0x11810>
   4329c:	add	sp, sp, #8
   432a0:	pop	{r4, lr}
   432a4:	add	sp, sp, #8
   432a8:	bx	lr
   432ac:	bl	12244 <__stack_chk_fail@plt>
   432b0:	andeq	fp, r5, r0, ror #24
   432b4:	orr	r2, r2, #540672	; 0x84000
   432b8:	push	{r4, r5, r6, lr}
   432bc:	orr	r2, r2, #2304	; 0x900
   432c0:	mov	r6, r3
   432c4:	bl	43258 <fts_children@@Base+0x117bc>
   432c8:	subs	r5, r0, #0
   432cc:	movlt	r4, #0
   432d0:	blt	432e4 <fts_children@@Base+0x11848>
   432d4:	bl	12670 <fdopendir@plt>
   432d8:	subs	r4, r0, #0
   432dc:	beq	432ec <fts_children@@Base+0x11850>
   432e0:	str	r5, [r6]
   432e4:	mov	r0, r4
   432e8:	pop	{r4, r5, r6, pc}
   432ec:	bl	124d8 <__errno_location@plt>
   432f0:	mov	r6, r0
   432f4:	mov	r0, r5
   432f8:	ldr	r5, [r6]
   432fc:	bl	12748 <close@plt>
   43300:	b	432e0 <fts_children@@Base+0x11844>
   43304:	push	{r4, r5, r6, r7, r8, lr}
   43308:	subs	r4, r0, #0
   4330c:	beq	4335c <fts_children@@Base+0x118c0>
   43310:	cmp	r4, #10
   43314:	beq	43320 <fts_children@@Base+0x11884>
   43318:	mov	r0, r4
   4331c:	pop	{r4, r5, r6, r7, r8, pc}
   43320:	ldr	r6, [r1]
   43324:	mov	r5, r1
   43328:	mov	r0, r6
   4332c:	ldr	r1, [pc, #60]	; 43370 <fts_children@@Base+0x118d4>
   43330:	bl	120dc <strcmp@plt>
   43334:	subs	r7, r0, #0
   43338:	bne	43318 <fts_children@@Base+0x1187c>
   4333c:	mov	r0, r6
   43340:	bl	126c4 <freecon@plt>
   43344:	str	r7, [r5]
   43348:	bl	124d8 <__errno_location@plt>
   4334c:	mov	r3, #61	; 0x3d
   43350:	mvn	r4, #0
   43354:	str	r3, [r0]
   43358:	b	43318 <fts_children@@Base+0x1187c>
   4335c:	bl	124d8 <__errno_location@plt>
   43360:	mov	r3, #95	; 0x5f
   43364:	mvn	r4, #0
   43368:	str	r3, [r0]
   4336c:	b	43318 <fts_children@@Base+0x1187c>
   43370:	andeq	sl, r4, r8, lsr ip
   43374:	push	{r4, lr}
   43378:	mov	r4, r1
   4337c:	bl	12484 <getfilecon@plt>
   43380:	mov	r1, r4
   43384:	pop	{r4, lr}
   43388:	b	43304 <fts_children@@Base+0x11868>
   4338c:	push	{r4, lr}
   43390:	mov	r4, r1
   43394:	bl	123d0 <lgetfilecon@plt>
   43398:	mov	r1, r4
   4339c:	pop	{r4, lr}
   433a0:	b	43304 <fts_children@@Base+0x11868>
   433a4:	push	{r4, lr}
   433a8:	mov	r4, r1
   433ac:	bl	12274 <fgetfilecon@plt>
   433b0:	mov	r1, r4
   433b4:	pop	{r4, lr}
   433b8:	b	43304 <fts_children@@Base+0x11868>
   433bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   433c0:	mov	r5, r2
   433c4:	ldr	r6, [pc, #264]	; 434d4 <fts_children@@Base+0x11a38>
   433c8:	ldrb	r3, [r2]
   433cc:	sub	sp, sp, #48	; 0x30
   433d0:	ldr	r2, [r6]
   433d4:	cmp	r3, #0
   433d8:	mov	r4, r0
   433dc:	str	r2, [sp, #44]	; 0x2c
   433e0:	strbeq	r3, [r0]
   433e4:	beq	43440 <fts_children@@Base+0x119a4>
   433e8:	ldr	r8, [pc, #232]	; 434d8 <fts_children@@Base+0x11a3c>
   433ec:	mov	r9, r1
   433f0:	ldr	r7, [r8]
   433f4:	cmp	r7, #0
   433f8:	beq	4346c <fts_children@@Base+0x119d0>
   433fc:	cmp	r7, #0
   43400:	blt	43464 <fts_children@@Base+0x119c8>
   43404:	mov	r0, r5
   43408:	bl	1249c <strlen@plt>
   4340c:	add	r0, r0, #27
   43410:	cmp	r0, #4032	; 0xfc0
   43414:	bhi	43458 <fts_children@@Base+0x119bc>
   43418:	ldr	r3, [pc, #188]	; 434dc <fts_children@@Base+0x11a40>
   4341c:	mvn	r2, #0
   43420:	mov	r1, #1
   43424:	str	r9, [sp]
   43428:	mov	r0, r4
   4342c:	bl	124f0 <__sprintf_chk@plt>
   43430:	mov	r1, r5
   43434:	add	r0, r4, r0
   43438:	bl	1234c <strcpy@plt>
   4343c:	mov	r0, r4
   43440:	ldr	r2, [sp, #44]	; 0x2c
   43444:	ldr	r3, [r6]
   43448:	cmp	r2, r3
   4344c:	bne	434d0 <fts_children@@Base+0x11a34>
   43450:	add	sp, sp, #48	; 0x30
   43454:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   43458:	bl	123dc <malloc@plt>
   4345c:	subs	r4, r0, #0
   43460:	bne	43418 <fts_children@@Base+0x1197c>
   43464:	mov	r0, #0
   43468:	b	43440 <fts_children@@Base+0x119a4>
   4346c:	mov	r1, #18688	; 0x4900
   43470:	ldr	r0, [pc, #104]	; 434e0 <fts_children@@Base+0x11a44>
   43474:	bl	123b8 <open64@plt>
   43478:	subs	sl, r0, #0
   4347c:	mvnlt	r3, #0
   43480:	movlt	r0, r7
   43484:	strlt	r3, [r8]
   43488:	blt	43440 <fts_children@@Base+0x119a4>
   4348c:	ldr	r3, [pc, #80]	; 434e4 <fts_children@@Base+0x11a48>
   43490:	mov	r2, #32
   43494:	mov	r1, #1
   43498:	str	sl, [sp]
   4349c:	add	r0, sp, #12
   434a0:	bl	124f0 <__sprintf_chk@plt>
   434a4:	mov	r1, r7
   434a8:	add	r0, sp, #12
   434ac:	bl	125a4 <access@plt>
   434b0:	cmp	r0, #0
   434b4:	mvnne	r3, #0
   434b8:	moveq	r3, #1
   434bc:	mov	r0, sl
   434c0:	str	r3, [r8]
   434c4:	bl	12748 <close@plt>
   434c8:	ldr	r7, [r8]
   434cc:	b	433fc <fts_children@@Base+0x11960>
   434d0:	bl	12244 <__stack_chk_fail@plt>
   434d4:	andeq	fp, r5, r0, ror #24
   434d8:	andeq	ip, r5, ip, lsr #28
   434dc:	andeq	sl, r4, ip, asr ip
   434e0:	ldrdeq	r8, [r4], -r4
   434e4:	andeq	sl, r4, r4, asr #24
   434e8:	subs	r2, r1, #1
   434ec:	bxeq	lr
   434f0:	bcc	436c8 <fts_children@@Base+0x11c2c>
   434f4:	cmp	r0, r1
   434f8:	bls	436ac <fts_children@@Base+0x11c10>
   434fc:	tst	r1, r2
   43500:	beq	436b8 <fts_children@@Base+0x11c1c>
   43504:	clz	r3, r0
   43508:	clz	r2, r1
   4350c:	sub	r3, r2, r3
   43510:	rsbs	r3, r3, #31
   43514:	addne	r3, r3, r3, lsl #1
   43518:	mov	r2, #0
   4351c:	addne	pc, pc, r3, lsl #2
   43520:	nop			; (mov r0, r0)
   43524:	cmp	r0, r1, lsl #31
   43528:	adc	r2, r2, r2
   4352c:	subcs	r0, r0, r1, lsl #31
   43530:	cmp	r0, r1, lsl #30
   43534:	adc	r2, r2, r2
   43538:	subcs	r0, r0, r1, lsl #30
   4353c:	cmp	r0, r1, lsl #29
   43540:	adc	r2, r2, r2
   43544:	subcs	r0, r0, r1, lsl #29
   43548:	cmp	r0, r1, lsl #28
   4354c:	adc	r2, r2, r2
   43550:	subcs	r0, r0, r1, lsl #28
   43554:	cmp	r0, r1, lsl #27
   43558:	adc	r2, r2, r2
   4355c:	subcs	r0, r0, r1, lsl #27
   43560:	cmp	r0, r1, lsl #26
   43564:	adc	r2, r2, r2
   43568:	subcs	r0, r0, r1, lsl #26
   4356c:	cmp	r0, r1, lsl #25
   43570:	adc	r2, r2, r2
   43574:	subcs	r0, r0, r1, lsl #25
   43578:	cmp	r0, r1, lsl #24
   4357c:	adc	r2, r2, r2
   43580:	subcs	r0, r0, r1, lsl #24
   43584:	cmp	r0, r1, lsl #23
   43588:	adc	r2, r2, r2
   4358c:	subcs	r0, r0, r1, lsl #23
   43590:	cmp	r0, r1, lsl #22
   43594:	adc	r2, r2, r2
   43598:	subcs	r0, r0, r1, lsl #22
   4359c:	cmp	r0, r1, lsl #21
   435a0:	adc	r2, r2, r2
   435a4:	subcs	r0, r0, r1, lsl #21
   435a8:	cmp	r0, r1, lsl #20
   435ac:	adc	r2, r2, r2
   435b0:	subcs	r0, r0, r1, lsl #20
   435b4:	cmp	r0, r1, lsl #19
   435b8:	adc	r2, r2, r2
   435bc:	subcs	r0, r0, r1, lsl #19
   435c0:	cmp	r0, r1, lsl #18
   435c4:	adc	r2, r2, r2
   435c8:	subcs	r0, r0, r1, lsl #18
   435cc:	cmp	r0, r1, lsl #17
   435d0:	adc	r2, r2, r2
   435d4:	subcs	r0, r0, r1, lsl #17
   435d8:	cmp	r0, r1, lsl #16
   435dc:	adc	r2, r2, r2
   435e0:	subcs	r0, r0, r1, lsl #16
   435e4:	cmp	r0, r1, lsl #15
   435e8:	adc	r2, r2, r2
   435ec:	subcs	r0, r0, r1, lsl #15
   435f0:	cmp	r0, r1, lsl #14
   435f4:	adc	r2, r2, r2
   435f8:	subcs	r0, r0, r1, lsl #14
   435fc:	cmp	r0, r1, lsl #13
   43600:	adc	r2, r2, r2
   43604:	subcs	r0, r0, r1, lsl #13
   43608:	cmp	r0, r1, lsl #12
   4360c:	adc	r2, r2, r2
   43610:	subcs	r0, r0, r1, lsl #12
   43614:	cmp	r0, r1, lsl #11
   43618:	adc	r2, r2, r2
   4361c:	subcs	r0, r0, r1, lsl #11
   43620:	cmp	r0, r1, lsl #10
   43624:	adc	r2, r2, r2
   43628:	subcs	r0, r0, r1, lsl #10
   4362c:	cmp	r0, r1, lsl #9
   43630:	adc	r2, r2, r2
   43634:	subcs	r0, r0, r1, lsl #9
   43638:	cmp	r0, r1, lsl #8
   4363c:	adc	r2, r2, r2
   43640:	subcs	r0, r0, r1, lsl #8
   43644:	cmp	r0, r1, lsl #7
   43648:	adc	r2, r2, r2
   4364c:	subcs	r0, r0, r1, lsl #7
   43650:	cmp	r0, r1, lsl #6
   43654:	adc	r2, r2, r2
   43658:	subcs	r0, r0, r1, lsl #6
   4365c:	cmp	r0, r1, lsl #5
   43660:	adc	r2, r2, r2
   43664:	subcs	r0, r0, r1, lsl #5
   43668:	cmp	r0, r1, lsl #4
   4366c:	adc	r2, r2, r2
   43670:	subcs	r0, r0, r1, lsl #4
   43674:	cmp	r0, r1, lsl #3
   43678:	adc	r2, r2, r2
   4367c:	subcs	r0, r0, r1, lsl #3
   43680:	cmp	r0, r1, lsl #2
   43684:	adc	r2, r2, r2
   43688:	subcs	r0, r0, r1, lsl #2
   4368c:	cmp	r0, r1, lsl #1
   43690:	adc	r2, r2, r2
   43694:	subcs	r0, r0, r1, lsl #1
   43698:	cmp	r0, r1
   4369c:	adc	r2, r2, r2
   436a0:	subcs	r0, r0, r1
   436a4:	mov	r0, r2
   436a8:	bx	lr
   436ac:	moveq	r0, #1
   436b0:	movne	r0, #0
   436b4:	bx	lr
   436b8:	clz	r2, r1
   436bc:	rsb	r2, r2, #31
   436c0:	lsr	r0, r0, r2
   436c4:	bx	lr
   436c8:	cmp	r0, #0
   436cc:	mvnne	r0, #0
   436d0:	b	43e04 <fts_children@@Base+0x12368>
   436d4:	cmp	r1, #0
   436d8:	beq	436c8 <fts_children@@Base+0x11c2c>
   436dc:	push	{r0, r1, lr}
   436e0:	bl	434e8 <fts_children@@Base+0x11a4c>
   436e4:	pop	{r1, r2, lr}
   436e8:	mul	r3, r2, r0
   436ec:	sub	r1, r1, r3
   436f0:	bx	lr
   436f4:	cmp	r1, #0
   436f8:	beq	43904 <fts_children@@Base+0x11e68>
   436fc:	eor	ip, r0, r1
   43700:	rsbmi	r1, r1, #0
   43704:	subs	r2, r1, #1
   43708:	beq	438d0 <fts_children@@Base+0x11e34>
   4370c:	movs	r3, r0
   43710:	rsbmi	r3, r0, #0
   43714:	cmp	r3, r1
   43718:	bls	438dc <fts_children@@Base+0x11e40>
   4371c:	tst	r1, r2
   43720:	beq	438ec <fts_children@@Base+0x11e50>
   43724:	clz	r2, r3
   43728:	clz	r0, r1
   4372c:	sub	r2, r0, r2
   43730:	rsbs	r2, r2, #31
   43734:	addne	r2, r2, r2, lsl #1
   43738:	mov	r0, #0
   4373c:	addne	pc, pc, r2, lsl #2
   43740:	nop			; (mov r0, r0)
   43744:	cmp	r3, r1, lsl #31
   43748:	adc	r0, r0, r0
   4374c:	subcs	r3, r3, r1, lsl #31
   43750:	cmp	r3, r1, lsl #30
   43754:	adc	r0, r0, r0
   43758:	subcs	r3, r3, r1, lsl #30
   4375c:	cmp	r3, r1, lsl #29
   43760:	adc	r0, r0, r0
   43764:	subcs	r3, r3, r1, lsl #29
   43768:	cmp	r3, r1, lsl #28
   4376c:	adc	r0, r0, r0
   43770:	subcs	r3, r3, r1, lsl #28
   43774:	cmp	r3, r1, lsl #27
   43778:	adc	r0, r0, r0
   4377c:	subcs	r3, r3, r1, lsl #27
   43780:	cmp	r3, r1, lsl #26
   43784:	adc	r0, r0, r0
   43788:	subcs	r3, r3, r1, lsl #26
   4378c:	cmp	r3, r1, lsl #25
   43790:	adc	r0, r0, r0
   43794:	subcs	r3, r3, r1, lsl #25
   43798:	cmp	r3, r1, lsl #24
   4379c:	adc	r0, r0, r0
   437a0:	subcs	r3, r3, r1, lsl #24
   437a4:	cmp	r3, r1, lsl #23
   437a8:	adc	r0, r0, r0
   437ac:	subcs	r3, r3, r1, lsl #23
   437b0:	cmp	r3, r1, lsl #22
   437b4:	adc	r0, r0, r0
   437b8:	subcs	r3, r3, r1, lsl #22
   437bc:	cmp	r3, r1, lsl #21
   437c0:	adc	r0, r0, r0
   437c4:	subcs	r3, r3, r1, lsl #21
   437c8:	cmp	r3, r1, lsl #20
   437cc:	adc	r0, r0, r0
   437d0:	subcs	r3, r3, r1, lsl #20
   437d4:	cmp	r3, r1, lsl #19
   437d8:	adc	r0, r0, r0
   437dc:	subcs	r3, r3, r1, lsl #19
   437e0:	cmp	r3, r1, lsl #18
   437e4:	adc	r0, r0, r0
   437e8:	subcs	r3, r3, r1, lsl #18
   437ec:	cmp	r3, r1, lsl #17
   437f0:	adc	r0, r0, r0
   437f4:	subcs	r3, r3, r1, lsl #17
   437f8:	cmp	r3, r1, lsl #16
   437fc:	adc	r0, r0, r0
   43800:	subcs	r3, r3, r1, lsl #16
   43804:	cmp	r3, r1, lsl #15
   43808:	adc	r0, r0, r0
   4380c:	subcs	r3, r3, r1, lsl #15
   43810:	cmp	r3, r1, lsl #14
   43814:	adc	r0, r0, r0
   43818:	subcs	r3, r3, r1, lsl #14
   4381c:	cmp	r3, r1, lsl #13
   43820:	adc	r0, r0, r0
   43824:	subcs	r3, r3, r1, lsl #13
   43828:	cmp	r3, r1, lsl #12
   4382c:	adc	r0, r0, r0
   43830:	subcs	r3, r3, r1, lsl #12
   43834:	cmp	r3, r1, lsl #11
   43838:	adc	r0, r0, r0
   4383c:	subcs	r3, r3, r1, lsl #11
   43840:	cmp	r3, r1, lsl #10
   43844:	adc	r0, r0, r0
   43848:	subcs	r3, r3, r1, lsl #10
   4384c:	cmp	r3, r1, lsl #9
   43850:	adc	r0, r0, r0
   43854:	subcs	r3, r3, r1, lsl #9
   43858:	cmp	r3, r1, lsl #8
   4385c:	adc	r0, r0, r0
   43860:	subcs	r3, r3, r1, lsl #8
   43864:	cmp	r3, r1, lsl #7
   43868:	adc	r0, r0, r0
   4386c:	subcs	r3, r3, r1, lsl #7
   43870:	cmp	r3, r1, lsl #6
   43874:	adc	r0, r0, r0
   43878:	subcs	r3, r3, r1, lsl #6
   4387c:	cmp	r3, r1, lsl #5
   43880:	adc	r0, r0, r0
   43884:	subcs	r3, r3, r1, lsl #5
   43888:	cmp	r3, r1, lsl #4
   4388c:	adc	r0, r0, r0
   43890:	subcs	r3, r3, r1, lsl #4
   43894:	cmp	r3, r1, lsl #3
   43898:	adc	r0, r0, r0
   4389c:	subcs	r3, r3, r1, lsl #3
   438a0:	cmp	r3, r1, lsl #2
   438a4:	adc	r0, r0, r0
   438a8:	subcs	r3, r3, r1, lsl #2
   438ac:	cmp	r3, r1, lsl #1
   438b0:	adc	r0, r0, r0
   438b4:	subcs	r3, r3, r1, lsl #1
   438b8:	cmp	r3, r1
   438bc:	adc	r0, r0, r0
   438c0:	subcs	r3, r3, r1
   438c4:	cmp	ip, #0
   438c8:	rsbmi	r0, r0, #0
   438cc:	bx	lr
   438d0:	teq	ip, r0
   438d4:	rsbmi	r0, r0, #0
   438d8:	bx	lr
   438dc:	movcc	r0, #0
   438e0:	asreq	r0, ip, #31
   438e4:	orreq	r0, r0, #1
   438e8:	bx	lr
   438ec:	clz	r2, r1
   438f0:	rsb	r2, r2, #31
   438f4:	cmp	ip, #0
   438f8:	lsr	r0, r3, r2
   438fc:	rsbmi	r0, r0, #0
   43900:	bx	lr
   43904:	cmp	r0, #0
   43908:	mvngt	r0, #-2147483648	; 0x80000000
   4390c:	movlt	r0, #-2147483648	; 0x80000000
   43910:	b	43e04 <fts_children@@Base+0x12368>
   43914:	cmp	r1, #0
   43918:	beq	43904 <fts_children@@Base+0x11e68>
   4391c:	push	{r0, r1, lr}
   43920:	bl	436fc <fts_children@@Base+0x11c60>
   43924:	pop	{r1, r2, lr}
   43928:	mul	r3, r2, r0
   4392c:	sub	r1, r1, r3
   43930:	bx	lr
   43934:	eor	r1, r1, #-2147483648	; 0x80000000
   43938:	b	43940 <fts_children@@Base+0x11ea4>
   4393c:	eor	r3, r3, #-2147483648	; 0x80000000
   43940:	push	{r4, r5, lr}
   43944:	lsl	r4, r1, #1
   43948:	lsl	r5, r3, #1
   4394c:	teq	r4, r5
   43950:	teqeq	r0, r2
   43954:	orrsne	ip, r4, r0
   43958:	orrsne	ip, r5, r2
   4395c:	mvnsne	ip, r4, asr #21
   43960:	mvnsne	ip, r5, asr #21
   43964:	beq	43b50 <fts_children@@Base+0x120b4>
   43968:	lsr	r4, r4, #21
   4396c:	rsbs	r5, r4, r5, lsr #21
   43970:	rsblt	r5, r5, #0
   43974:	ble	43994 <fts_children@@Base+0x11ef8>
   43978:	add	r4, r4, r5
   4397c:	eor	r2, r0, r2
   43980:	eor	r3, r1, r3
   43984:	eor	r0, r2, r0
   43988:	eor	r1, r3, r1
   4398c:	eor	r2, r0, r2
   43990:	eor	r3, r1, r3
   43994:	cmp	r5, #54	; 0x36
   43998:	pophi	{r4, r5, pc}
   4399c:	tst	r1, #-2147483648	; 0x80000000
   439a0:	lsl	r1, r1, #12
   439a4:	mov	ip, #1048576	; 0x100000
   439a8:	orr	r1, ip, r1, lsr #12
   439ac:	beq	439b8 <fts_children@@Base+0x11f1c>
   439b0:	rsbs	r0, r0, #0
   439b4:	rsc	r1, r1, #0
   439b8:	tst	r3, #-2147483648	; 0x80000000
   439bc:	lsl	r3, r3, #12
   439c0:	orr	r3, ip, r3, lsr #12
   439c4:	beq	439d0 <fts_children@@Base+0x11f34>
   439c8:	rsbs	r2, r2, #0
   439cc:	rsc	r3, r3, #0
   439d0:	teq	r4, r5
   439d4:	beq	43b38 <fts_children@@Base+0x1209c>
   439d8:	sub	r4, r4, #1
   439dc:	rsbs	lr, r5, #32
   439e0:	blt	439fc <fts_children@@Base+0x11f60>
   439e4:	lsl	ip, r2, lr
   439e8:	adds	r0, r0, r2, lsr r5
   439ec:	adc	r1, r1, #0
   439f0:	adds	r0, r0, r3, lsl lr
   439f4:	adcs	r1, r1, r3, asr r5
   439f8:	b	43a18 <fts_children@@Base+0x11f7c>
   439fc:	sub	r5, r5, #32
   43a00:	add	lr, lr, #32
   43a04:	cmp	r2, #1
   43a08:	lsl	ip, r3, lr
   43a0c:	orrcs	ip, ip, #2
   43a10:	adds	r0, r0, r3, asr r5
   43a14:	adcs	r1, r1, r3, asr #31
   43a18:	and	r5, r1, #-2147483648	; 0x80000000
   43a1c:	bpl	43a2c <fts_children@@Base+0x11f90>
   43a20:	rsbs	ip, ip, #0
   43a24:	rscs	r0, r0, #0
   43a28:	rsc	r1, r1, #0
   43a2c:	cmp	r1, #1048576	; 0x100000
   43a30:	bcc	43a70 <fts_children@@Base+0x11fd4>
   43a34:	cmp	r1, #2097152	; 0x200000
   43a38:	bcc	43a58 <fts_children@@Base+0x11fbc>
   43a3c:	lsrs	r1, r1, #1
   43a40:	rrxs	r0, r0
   43a44:	rrx	ip, ip
   43a48:	add	r4, r4, #1
   43a4c:	lsl	r2, r4, #21
   43a50:	cmn	r2, #4194304	; 0x400000
   43a54:	bcs	43bb0 <fts_children@@Base+0x12114>
   43a58:	cmp	ip, #-2147483648	; 0x80000000
   43a5c:	lsrseq	ip, r0, #1
   43a60:	adcs	r0, r0, #0
   43a64:	adc	r1, r1, r4, lsl #20
   43a68:	orr	r1, r1, r5
   43a6c:	pop	{r4, r5, pc}
   43a70:	lsls	ip, ip, #1
   43a74:	adcs	r0, r0, r0
   43a78:	adc	r1, r1, r1
   43a7c:	tst	r1, #1048576	; 0x100000
   43a80:	sub	r4, r4, #1
   43a84:	bne	43a58 <fts_children@@Base+0x11fbc>
   43a88:	teq	r1, #0
   43a8c:	moveq	r1, r0
   43a90:	moveq	r0, #0
   43a94:	clz	r3, r1
   43a98:	addeq	r3, r3, #32
   43a9c:	sub	r3, r3, #11
   43aa0:	subs	r2, r3, #32
   43aa4:	bge	43ac8 <fts_children@@Base+0x1202c>
   43aa8:	adds	r2, r2, #12
   43aac:	ble	43ac4 <fts_children@@Base+0x12028>
   43ab0:	add	ip, r2, #20
   43ab4:	rsb	r2, r2, #12
   43ab8:	lsl	r0, r1, ip
   43abc:	lsr	r1, r1, r2
   43ac0:	b	43ad8 <fts_children@@Base+0x1203c>
   43ac4:	add	r2, r2, #20
   43ac8:	rsble	ip, r2, #32
   43acc:	lsl	r1, r1, r2
   43ad0:	orrle	r1, r1, r0, lsr ip
   43ad4:	lslle	r0, r0, r2
   43ad8:	subs	r4, r4, r3
   43adc:	addge	r1, r1, r4, lsl #20
   43ae0:	orrge	r1, r1, r5
   43ae4:	popge	{r4, r5, pc}
   43ae8:	mvn	r4, r4
   43aec:	subs	r4, r4, #31
   43af0:	bge	43b2c <fts_children@@Base+0x12090>
   43af4:	adds	r4, r4, #12
   43af8:	bgt	43b14 <fts_children@@Base+0x12078>
   43afc:	add	r4, r4, #20
   43b00:	rsb	r2, r4, #32
   43b04:	lsr	r0, r0, r4
   43b08:	orr	r0, r0, r1, lsl r2
   43b0c:	orr	r1, r5, r1, lsr r4
   43b10:	pop	{r4, r5, pc}
   43b14:	rsb	r4, r4, #12
   43b18:	rsb	r2, r4, #32
   43b1c:	lsr	r0, r0, r2
   43b20:	orr	r0, r0, r1, lsl r4
   43b24:	mov	r1, r5
   43b28:	pop	{r4, r5, pc}
   43b2c:	lsr	r0, r1, r4
   43b30:	mov	r1, r5
   43b34:	pop	{r4, r5, pc}
   43b38:	teq	r4, #0
   43b3c:	eor	r3, r3, #1048576	; 0x100000
   43b40:	eoreq	r1, r1, #1048576	; 0x100000
   43b44:	addeq	r4, r4, #1
   43b48:	subne	r5, r5, #1
   43b4c:	b	439d8 <fts_children@@Base+0x11f3c>
   43b50:	mvns	ip, r4, asr #21
   43b54:	mvnsne	ip, r5, asr #21
   43b58:	beq	43bc0 <fts_children@@Base+0x12124>
   43b5c:	teq	r4, r5
   43b60:	teqeq	r0, r2
   43b64:	beq	43b78 <fts_children@@Base+0x120dc>
   43b68:	orrs	ip, r4, r0
   43b6c:	moveq	r1, r3
   43b70:	moveq	r0, r2
   43b74:	pop	{r4, r5, pc}
   43b78:	teq	r1, r3
   43b7c:	movne	r1, #0
   43b80:	movne	r0, #0
   43b84:	popne	{r4, r5, pc}
   43b88:	lsrs	ip, r4, #21
   43b8c:	bne	43ba0 <fts_children@@Base+0x12104>
   43b90:	lsls	r0, r0, #1
   43b94:	adcs	r1, r1, r1
   43b98:	orrcs	r1, r1, #-2147483648	; 0x80000000
   43b9c:	pop	{r4, r5, pc}
   43ba0:	adds	r4, r4, #4194304	; 0x400000
   43ba4:	addcc	r1, r1, #1048576	; 0x100000
   43ba8:	popcc	{r4, r5, pc}
   43bac:	and	r5, r1, #-2147483648	; 0x80000000
   43bb0:	orr	r1, r5, #2130706432	; 0x7f000000
   43bb4:	orr	r1, r1, #15728640	; 0xf00000
   43bb8:	mov	r0, #0
   43bbc:	pop	{r4, r5, pc}
   43bc0:	mvns	ip, r4, asr #21
   43bc4:	movne	r1, r3
   43bc8:	movne	r0, r2
   43bcc:	mvnseq	ip, r5, asr #21
   43bd0:	movne	r3, r1
   43bd4:	movne	r2, r0
   43bd8:	orrs	r4, r0, r1, lsl #12
   43bdc:	orrseq	r5, r2, r3, lsl #12
   43be0:	teqeq	r1, r3
   43be4:	orrne	r1, r1, #524288	; 0x80000
   43be8:	pop	{r4, r5, pc}
   43bec:	teq	r0, #0
   43bf0:	moveq	r1, #0
   43bf4:	bxeq	lr
   43bf8:	push	{r4, r5, lr}
   43bfc:	mov	r4, #1024	; 0x400
   43c00:	add	r4, r4, #50	; 0x32
   43c04:	mov	r5, #0
   43c08:	mov	r1, #0
   43c0c:	b	43a88 <fts_children@@Base+0x11fec>
   43c10:	teq	r0, #0
   43c14:	moveq	r1, #0
   43c18:	bxeq	lr
   43c1c:	push	{r4, r5, lr}
   43c20:	mov	r4, #1024	; 0x400
   43c24:	add	r4, r4, #50	; 0x32
   43c28:	ands	r5, r0, #-2147483648	; 0x80000000
   43c2c:	rsbmi	r0, r0, #0
   43c30:	mov	r1, #0
   43c34:	b	43a88 <fts_children@@Base+0x11fec>
   43c38:	lsls	r2, r0, #1
   43c3c:	asr	r1, r2, #3
   43c40:	rrx	r1, r1
   43c44:	lsl	r0, r2, #28
   43c48:	andsne	r3, r2, #-16777216	; 0xff000000
   43c4c:	teqne	r3, #-16777216	; 0xff000000
   43c50:	eorne	r1, r1, #939524096	; 0x38000000
   43c54:	bxne	lr
   43c58:	bics	r2, r2, #-16777216	; 0xff000000
   43c5c:	bxeq	lr
   43c60:	teq	r3, #-16777216	; 0xff000000
   43c64:	orreq	r1, r1, #524288	; 0x80000
   43c68:	bxeq	lr
   43c6c:	push	{r4, r5, lr}
   43c70:	mov	r4, #896	; 0x380
   43c74:	and	r5, r1, #-2147483648	; 0x80000000
   43c78:	bic	r1, r1, #-2147483648	; 0x80000000
   43c7c:	b	43a88 <fts_children@@Base+0x11fec>
   43c80:	orrs	r2, r0, r1
   43c84:	bxeq	lr
   43c88:	push	{r4, r5, lr}
   43c8c:	mov	r5, #0
   43c90:	b	43cb0 <fts_children@@Base+0x12214>
   43c94:	orrs	r2, r0, r1
   43c98:	bxeq	lr
   43c9c:	push	{r4, r5, lr}
   43ca0:	ands	r5, r1, #-2147483648	; 0x80000000
   43ca4:	bpl	43cb0 <fts_children@@Base+0x12214>
   43ca8:	rsbs	r0, r0, #0
   43cac:	rsc	r1, r1, #0
   43cb0:	mov	r4, #1024	; 0x400
   43cb4:	add	r4, r4, #50	; 0x32
   43cb8:	lsrs	ip, r1, #22
   43cbc:	beq	43a2c <fts_children@@Base+0x11f90>
   43cc0:	mov	r2, #3
   43cc4:	lsrs	ip, ip, #3
   43cc8:	addne	r2, r2, #3
   43ccc:	lsrs	ip, ip, #3
   43cd0:	addne	r2, r2, #3
   43cd4:	add	r2, r2, ip, lsr #3
   43cd8:	rsb	r3, r2, #32
   43cdc:	lsl	ip, r0, r3
   43ce0:	lsr	r0, r0, r2
   43ce4:	orr	r0, r0, r1, lsl r3
   43ce8:	lsr	r1, r1, r2
   43cec:	add	r4, r4, r2
   43cf0:	b	43a2c <fts_children@@Base+0x11f90>
   43cf4:	cmp	r3, #0
   43cf8:	cmpeq	r2, #0
   43cfc:	bne	43d20 <fts_children@@Base+0x12284>
   43d00:	cmp	r1, #0
   43d04:	movlt	r1, #-2147483648	; 0x80000000
   43d08:	movlt	r0, #0
   43d0c:	blt	43d1c <fts_children@@Base+0x12280>
   43d10:	cmpeq	r0, #0
   43d14:	mvnne	r1, #-2147483648	; 0x80000000
   43d18:	mvnne	r0, #0
   43d1c:	b	43e04 <fts_children@@Base+0x12368>
   43d20:	sub	sp, sp, #8
   43d24:	push	{sp, lr}
   43d28:	cmp	r1, #0
   43d2c:	blt	43d4c <fts_children@@Base+0x122b0>
   43d30:	cmp	r3, #0
   43d34:	blt	43d80 <fts_children@@Base+0x122e4>
   43d38:	bl	43e58 <fts_children@@Base+0x123bc>
   43d3c:	ldr	lr, [sp, #4]
   43d40:	add	sp, sp, #8
   43d44:	pop	{r2, r3}
   43d48:	bx	lr
   43d4c:	rsbs	r0, r0, #0
   43d50:	sbc	r1, r1, r1, lsl #1
   43d54:	cmp	r3, #0
   43d58:	blt	43da4 <fts_children@@Base+0x12308>
   43d5c:	bl	43e58 <fts_children@@Base+0x123bc>
   43d60:	ldr	lr, [sp, #4]
   43d64:	add	sp, sp, #8
   43d68:	pop	{r2, r3}
   43d6c:	rsbs	r0, r0, #0
   43d70:	sbc	r1, r1, r1, lsl #1
   43d74:	rsbs	r2, r2, #0
   43d78:	sbc	r3, r3, r3, lsl #1
   43d7c:	bx	lr
   43d80:	rsbs	r2, r2, #0
   43d84:	sbc	r3, r3, r3, lsl #1
   43d88:	bl	43e58 <fts_children@@Base+0x123bc>
   43d8c:	ldr	lr, [sp, #4]
   43d90:	add	sp, sp, #8
   43d94:	pop	{r2, r3}
   43d98:	rsbs	r0, r0, #0
   43d9c:	sbc	r1, r1, r1, lsl #1
   43da0:	bx	lr
   43da4:	rsbs	r2, r2, #0
   43da8:	sbc	r3, r3, r3, lsl #1
   43dac:	bl	43e58 <fts_children@@Base+0x123bc>
   43db0:	ldr	lr, [sp, #4]
   43db4:	add	sp, sp, #8
   43db8:	pop	{r2, r3}
   43dbc:	rsbs	r2, r2, #0
   43dc0:	sbc	r3, r3, r3, lsl #1
   43dc4:	bx	lr
   43dc8:	cmp	r3, #0
   43dcc:	cmpeq	r2, #0
   43dd0:	bne	43de8 <fts_children@@Base+0x1234c>
   43dd4:	cmp	r1, #0
   43dd8:	cmpeq	r0, #0
   43ddc:	mvnne	r1, #0
   43de0:	mvnne	r0, #0
   43de4:	b	43e04 <fts_children@@Base+0x12368>
   43de8:	sub	sp, sp, #8
   43dec:	push	{sp, lr}
   43df0:	bl	43e58 <fts_children@@Base+0x123bc>
   43df4:	ldr	lr, [sp, #4]
   43df8:	add	sp, sp, #8
   43dfc:	pop	{r2, r3}
   43e00:	bx	lr
   43e04:	push	{r1, lr}
   43e08:	mov	r0, #8
   43e0c:	bl	12088 <raise@plt>
   43e10:	pop	{r1, pc}
   43e14:	andeq	r0, r0, r0
   43e18:	vmov	d6, r0, r1
   43e1c:	vldr	d7, [pc, #36]	; 43e48 <fts_children@@Base+0x123ac>
   43e20:	vldr	d5, [pc, #40]	; 43e50 <fts_children@@Base+0x123b4>
   43e24:	vmul.f64	d7, d6, d7
   43e28:	vcvt.u32.f64	s14, d7
   43e2c:	vcvt.f64.u32	d4, s14
   43e30:	vmov	r1, s14
   43e34:	vmls.f64	d6, d4, d5
   43e38:	vcvt.u32.f64	s15, d6
   43e3c:	vmov	r0, s15
   43e40:	bx	lr
   43e44:	nop			; (mov r0, r0)
   43e48:	andeq	r0, r0, r0
   43e4c:	ldclcc	0, cr0, [r0]
   43e50:	andeq	r0, r0, r0
   43e54:	mvnsmi	r0, r0
   43e58:	cmp	r1, r3
   43e5c:	cmpeq	r0, r2
   43e60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   43e64:	mov	r4, r0
   43e68:	movcc	r0, #0
   43e6c:	mov	r5, r1
   43e70:	ldr	lr, [sp, #36]	; 0x24
   43e74:	movcc	r1, r0
   43e78:	bcc	43f74 <fts_children@@Base+0x124d8>
   43e7c:	cmp	r3, #0
   43e80:	clzeq	ip, r2
   43e84:	clzne	ip, r3
   43e88:	addeq	ip, ip, #32
   43e8c:	cmp	r5, #0
   43e90:	clzeq	r1, r4
   43e94:	addeq	r1, r1, #32
   43e98:	clzne	r1, r5
   43e9c:	sub	ip, ip, r1
   43ea0:	sub	sl, ip, #32
   43ea4:	lsl	r9, r3, ip
   43ea8:	rsb	fp, ip, #32
   43eac:	orr	r9, r9, r2, lsl sl
   43eb0:	orr	r9, r9, r2, lsr fp
   43eb4:	lsl	r8, r2, ip
   43eb8:	cmp	r5, r9
   43ebc:	cmpeq	r4, r8
   43ec0:	movcc	r0, #0
   43ec4:	movcc	r1, r0
   43ec8:	bcc	43ee4 <fts_children@@Base+0x12448>
   43ecc:	mov	r0, #1
   43ed0:	subs	r4, r4, r8
   43ed4:	lsl	r1, r0, sl
   43ed8:	orr	r1, r1, r0, lsr fp
   43edc:	lsl	r0, r0, ip
   43ee0:	sbc	r5, r5, r9
   43ee4:	cmp	ip, #0
   43ee8:	beq	43f74 <fts_children@@Base+0x124d8>
   43eec:	lsr	r6, r8, #1
   43ef0:	orr	r6, r6, r9, lsl #31
   43ef4:	lsr	r7, r9, #1
   43ef8:	mov	r2, ip
   43efc:	b	43f20 <fts_children@@Base+0x12484>
   43f00:	subs	r3, r4, r6
   43f04:	sbc	r8, r5, r7
   43f08:	adds	r3, r3, r3
   43f0c:	adc	r8, r8, r8
   43f10:	adds	r4, r3, #1
   43f14:	adc	r5, r8, #0
   43f18:	subs	r2, r2, #1
   43f1c:	beq	43f3c <fts_children@@Base+0x124a0>
   43f20:	cmp	r5, r7
   43f24:	cmpeq	r4, r6
   43f28:	bcs	43f00 <fts_children@@Base+0x12464>
   43f2c:	adds	r4, r4, r4
   43f30:	adc	r5, r5, r5
   43f34:	subs	r2, r2, #1
   43f38:	bne	43f20 <fts_children@@Base+0x12484>
   43f3c:	lsr	r3, r4, ip
   43f40:	orr	r3, r3, r5, lsl fp
   43f44:	lsr	r2, r5, ip
   43f48:	orr	r3, r3, r5, lsr sl
   43f4c:	adds	r0, r0, r4
   43f50:	mov	r4, r3
   43f54:	lsl	r3, r2, ip
   43f58:	orr	r3, r3, r4, lsl sl
   43f5c:	lsl	ip, r4, ip
   43f60:	orr	r3, r3, r4, lsr fp
   43f64:	adc	r1, r1, r5
   43f68:	subs	r0, r0, ip
   43f6c:	mov	r5, r2
   43f70:	sbc	r1, r1, r3
   43f74:	cmp	lr, #0
   43f78:	strdne	r4, [lr]
   43f7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   43f80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   43f84:	mov	r7, r0
   43f88:	ldr	r6, [pc, #72]	; 43fd8 <fts_children@@Base+0x1253c>
   43f8c:	ldr	r5, [pc, #72]	; 43fdc <fts_children@@Base+0x12540>
   43f90:	add	r6, pc, r6
   43f94:	add	r5, pc, r5
   43f98:	sub	r6, r6, r5
   43f9c:	mov	r8, r1
   43fa0:	mov	r9, r2
   43fa4:	bl	12020 <pthread_mutex_unlock@plt-0x20>
   43fa8:	asrs	r6, r6, #2
   43fac:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   43fb0:	mov	r4, #0
   43fb4:	add	r4, r4, #1
   43fb8:	ldr	r3, [r5], #4
   43fbc:	mov	r2, r9
   43fc0:	mov	r1, r8
   43fc4:	mov	r0, r7
   43fc8:	blx	r3
   43fcc:	cmp	r6, r4
   43fd0:	bne	43fb4 <fts_children@@Base+0x12518>
   43fd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   43fd8:	andeq	r7, r1, r4, asr #25
   43fdc:			; <UNDEFINED> instruction: 0x00017cbc
   43fe0:	bx	lr
   43fe4:	ldr	r3, [pc, #12]	; 43ff8 <fts_children@@Base+0x1255c>
   43fe8:	mov	r1, #0
   43fec:	add	r3, pc, r3
   43ff0:	ldr	r2, [r3]
   43ff4:	b	12508 <__cxa_atexit@plt>
   43ff8:	andeq	r8, r1, r0, lsl r0

Disassembly of section .fini:

00043ffc <.fini>:
   43ffc:	push	{r3, lr}
   44000:	pop	{r3, pc}
