
ubuntu-preinstalled/htop:     file format elf32-littlearm


Disassembly of section .init:

000065fc <.init>:
    65fc:	push	{r3, lr}
    6600:	bl	71a4 <_start@@Base+0x48>
    6604:	pop	{r3, pc}

Disassembly of section .plt:

00006608 <start_color@plt-0x14>:
    6608:	push	{lr}		; (str lr, [sp, #-4]!)
    660c:	ldr	lr, [pc, #4]	; 6618 <start_color@plt-0x4>
    6610:	add	lr, pc, lr
    6614:	ldr	pc, [lr, #8]!
    6618:	strdeq	r3, [r2], -r8

0000661c <start_color@plt>:
    661c:	add	ip, pc, #0, 12
    6620:	add	ip, ip, #143360	; 0x23000
    6624:	ldr	pc, [ip, #1784]!	; 0x6f8

00006628 <fdopen@plt>:
    6628:	add	ip, pc, #0, 12
    662c:	add	ip, ip, #143360	; 0x23000
    6630:	ldr	pc, [ip, #1776]!	; 0x6f0

00006634 <use_default_colors@plt>:
    6634:	add	ip, pc, #0, 12
    6638:	add	ip, ip, #143360	; 0x23000
    663c:	ldr	pc, [ip, #1768]!	; 0x6e8

00006640 <calloc@plt>:
    6640:	add	ip, pc, #0, 12
    6644:	add	ip, ip, #143360	; 0x23000
    6648:	ldr	pc, [ip, #1760]!	; 0x6e0

0000664c <nodelay@plt>:
    664c:			; <UNDEFINED> instruction: 0xe7fd4778
    6650:	add	ip, pc, #0, 12
    6654:	add	ip, ip, #143360	; 0x23000
    6658:	ldr	pc, [ip, #1748]!	; 0x6d4

0000665c <noecho@plt>:
    665c:	add	ip, pc, #0, 12
    6660:	add	ip, ip, #143360	; 0x23000
    6664:	ldr	pc, [ip, #1740]!	; 0x6cc

00006668 <wmove@plt>:
    6668:	add	ip, pc, #0, 12
    666c:	add	ip, ip, #143360	; 0x23000
    6670:	ldr	pc, [ip, #1732]!	; 0x6c4

00006674 <raise@plt>:
    6674:	add	ip, pc, #0, 12
    6678:	add	ip, ip, #143360	; 0x23000
    667c:	ldr	pc, [ip, #1724]!	; 0x6bc

00006680 <wadd_wchnstr@plt>:
    6680:	add	ip, pc, #0, 12
    6684:	add	ip, ip, #143360	; 0x23000
    6688:	ldr	pc, [ip, #1716]!	; 0x6b4

0000668c <getmouse@plt>:
    668c:	add	ip, pc, #0, 12
    6690:	add	ip, ip, #143360	; 0x23000
    6694:	ldr	pc, [ip, #1708]!	; 0x6ac

00006698 <getpwnam@plt>:
    6698:	add	ip, pc, #0, 12
    669c:	add	ip, ip, #143360	; 0x23000
    66a0:	ldr	pc, [ip, #1700]!	; 0x6a4

000066a4 <strcasestr@plt>:
    66a4:	add	ip, pc, #0, 12
    66a8:	add	ip, ip, #143360	; 0x23000
    66ac:	ldr	pc, [ip, #1692]!	; 0x69c

000066b0 <strcmp@plt>:
    66b0:			; <UNDEFINED> instruction: 0xe7fd4778
    66b4:	add	ip, pc, #0, 12
    66b8:	add	ip, ip, #143360	; 0x23000
    66bc:	ldr	pc, [ip, #1680]!	; 0x690

000066c0 <__cxa_finalize@plt>:
    66c0:	add	ip, pc, #0, 12
    66c4:	add	ip, ip, #143360	; 0x23000
    66c8:	ldr	pc, [ip, #1672]!	; 0x688

000066cc <strtol@plt>:
    66cc:	add	ip, pc, #0, 12
    66d0:	add	ip, ip, #143360	; 0x23000
    66d4:	ldr	pc, [ip, #1664]!	; 0x680

000066d8 <getpwuid@plt>:
    66d8:	add	ip, pc, #0, 12
    66dc:	add	ip, ip, #143360	; 0x23000
    66e0:	ldr	pc, [ip, #1656]!	; 0x678

000066e4 <halfdelay@plt>:
    66e4:			; <UNDEFINED> instruction: 0xe7fd4778
    66e8:	add	ip, pc, #0, 12
    66ec:	add	ip, ip, #143360	; 0x23000
    66f0:	ldr	pc, [ip, #1644]!	; 0x66c

000066f4 <nocbreak@plt>:
    66f4:	add	ip, pc, #0, 12
    66f8:	add	ip, ip, #143360	; 0x23000
    66fc:	ldr	pc, [ip, #1636]!	; 0x664

00006700 <__isoc99_fscanf@plt>:
    6700:	add	ip, pc, #0, 12
    6704:	add	ip, ip, #143360	; 0x23000
    6708:	ldr	pc, [ip, #1628]!	; 0x65c

0000670c <wattr_on@plt>:
    670c:	add	ip, pc, #0, 12
    6710:	add	ip, ip, #143360	; 0x23000
    6714:	ldr	pc, [ip, #1620]!	; 0x654

00006718 <fopen@plt>:
    6718:	add	ip, pc, #0, 12
    671c:	add	ip, ip, #143360	; 0x23000
    6720:	ldr	pc, [ip, #1612]!	; 0x64c

00006724 <read@plt>:
    6724:	add	ip, pc, #0, 12
    6728:	add	ip, ip, #143360	; 0x23000
    672c:	ldr	pc, [ip, #1604]!	; 0x644

00006730 <curs_set@plt>:
    6730:	add	ip, pc, #0, 12
    6734:	add	ip, ip, #143360	; 0x23000
    6738:	ldr	pc, [ip, #1596]!	; 0x63c

0000673c <getuid@plt>:
    673c:	add	ip, pc, #0, 12
    6740:	add	ip, ip, #143360	; 0x23000
    6744:	ldr	pc, [ip, #1588]!	; 0x634

00006748 <has_colors@plt>:
    6748:	add	ip, pc, #0, 12
    674c:	add	ip, ip, #143360	; 0x23000
    6750:	ldr	pc, [ip, #1580]!	; 0x62c

00006754 <free@plt>:
    6754:			; <UNDEFINED> instruction: 0xe7fd4778
    6758:	add	ip, pc, #0, 12
    675c:	add	ip, ip, #143360	; 0x23000
    6760:	ldr	pc, [ip, #1568]!	; 0x620

00006764 <fgets@plt>:
    6764:	add	ip, pc, #0, 12
    6768:	add	ip, ip, #143360	; 0x23000
    676c:	ldr	pc, [ip, #1560]!	; 0x618

00006770 <nanosleep@plt>:
    6770:	add	ip, pc, #0, 12
    6774:	add	ip, ip, #143360	; 0x23000
    6778:	ldr	pc, [ip, #1552]!	; 0x610

0000677c <waddnstr@plt>:
    677c:	add	ip, pc, #0, 12
    6780:	add	ip, ip, #143360	; 0x23000
    6784:	ldr	pc, [ip, #1544]!	; 0x608

00006788 <memcpy@plt>:
    6788:	add	ip, pc, #0, 12
    678c:	add	ip, ip, #143360	; 0x23000
    6790:	ldr	pc, [ip, #1536]!	; 0x600

00006794 <execlp@plt>:
    6794:	add	ip, pc, #0, 12
    6798:	add	ip, ip, #143360	; 0x23000
    679c:	ldr	pc, [ip, #1528]!	; 0x5f8

000067a0 <signal@plt>:
    67a0:	add	ip, pc, #0, 12
    67a4:	add	ip, ip, #143360	; 0x23000
    67a8:	ldr	pc, [ip, #1520]!	; 0x5f0

000067ac <time@plt>:
    67ac:	add	ip, pc, #0, 12
    67b0:	add	ip, ip, #143360	; 0x23000
    67b4:	ldr	pc, [ip, #1512]!	; 0x5e8

000067b8 <select@plt>:
    67b8:	add	ip, pc, #0, 12
    67bc:	add	ip, ip, #143360	; 0x23000
    67c0:	ldr	pc, [ip, #1504]!	; 0x5e0

000067c4 <strdup@plt>:
    67c4:	add	ip, pc, #0, 12
    67c8:	add	ip, ip, #143360	; 0x23000
    67cc:	ldr	pc, [ip, #1496]!	; 0x5d8

000067d0 <__stack_chk_fail@plt>:
    67d0:	add	ip, pc, #0, 12
    67d4:	add	ip, ip, #143360	; 0x23000
    67d8:	ldr	pc, [ip, #1488]!	; 0x5d0

000067dc <sysconf@plt>:
    67dc:	add	ip, pc, #0, 12
    67e0:	add	ip, ip, #143360	; 0x23000
    67e4:	ldr	pc, [ip, #1480]!	; 0x5c8

000067e8 <unlink@plt>:
    67e8:	add	ip, pc, #0, 12
    67ec:	add	ip, ip, #143360	; 0x23000
    67f0:	ldr	pc, [ip, #1472]!	; 0x5c0

000067f4 <dup2@plt>:
    67f4:	add	ip, pc, #0, 12
    67f8:	add	ip, ip, #143360	; 0x23000
    67fc:	ldr	pc, [ip, #1464]!	; 0x5b8

00006800 <realloc@plt>:
    6800:	add	ip, pc, #0, 12
    6804:	add	ip, ip, #143360	; 0x23000
    6808:	ldr	pc, [ip, #1456]!	; 0x5b0

0000680c <getpriority@plt>:
    680c:	add	ip, pc, #0, 12
    6810:	add	ip, ip, #143360	; 0x23000
    6814:	ldr	pc, [ip, #1448]!	; 0x5a8

00006818 <__fdelt_chk@plt>:
    6818:	add	ip, pc, #0, 12
    681c:	add	ip, ip, #143360	; 0x23000
    6820:	ldr	pc, [ip, #1440]!	; 0x5a0

00006824 <localtime_r@plt>:
    6824:	add	ip, pc, #0, 12
    6828:	add	ip, ip, #143360	; 0x23000
    682c:	ldr	pc, [ip, #1432]!	; 0x598

00006830 <lround@plt>:
    6830:	add	ip, pc, #0, 12
    6834:	add	ip, ip, #143360	; 0x23000
    6838:	ldr	pc, [ip, #1424]!	; 0x590

0000683c <err@plt>:
    683c:	add	ip, pc, #0, 12
    6840:	add	ip, ip, #143360	; 0x23000
    6844:	ldr	pc, [ip, #1416]!	; 0x588

00006848 <iswprint@plt>:
    6848:	add	ip, pc, #0, 12
    684c:	add	ip, ip, #143360	; 0x23000
    6850:	ldr	pc, [ip, #1408]!	; 0x580

00006854 <__xstat@plt>:
    6854:	add	ip, pc, #0, 12
    6858:	add	ip, ip, #143360	; 0x23000
    685c:	ldr	pc, [ip, #1400]!	; 0x578

00006860 <wgetch@plt>:
    6860:	add	ip, pc, #0, 12
    6864:	add	ip, ip, #143360	; 0x23000
    6868:	ldr	pc, [ip, #1392]!	; 0x570

0000686c <set_escdelay@plt>:
    686c:	add	ip, pc, #0, 12
    6870:	add	ip, ip, #143360	; 0x23000
    6874:	ldr	pc, [ip, #1384]!	; 0x568

00006878 <__memcpy_chk@plt>:
    6878:	add	ip, pc, #0, 12
    687c:	add	ip, ip, #143360	; 0x23000
    6880:	ldr	pc, [ip, #1376]!	; 0x560

00006884 <fwrite@plt>:
    6884:	add	ip, pc, #0, 12
    6888:	add	ip, ip, #143360	; 0x23000
    688c:	ldr	pc, [ip, #1368]!	; 0x558

00006890 <waitpid@plt>:
    6890:	add	ip, pc, #0, 12
    6894:	add	ip, ip, #143360	; 0x23000
    6898:	ldr	pc, [ip, #1360]!	; 0x550

0000689c <keypad@plt>:
    689c:	add	ip, pc, #0, 12
    68a0:	add	ip, ip, #143360	; 0x23000
    68a4:	ldr	pc, [ip, #1352]!	; 0x548

000068a8 <gettimeofday@plt>:
    68a8:	add	ip, pc, #0, 12
    68ac:	add	ip, ip, #143360	; 0x23000
    68b0:	ldr	pc, [ip, #1344]!	; 0x540

000068b4 <fread@plt>:
    68b4:	add	ip, pc, #0, 12
    68b8:	add	ip, ip, #143360	; 0x23000
    68bc:	ldr	pc, [ip, #1336]!	; 0x538

000068c0 <wrefresh@plt>:
    68c0:	add	ip, pc, #0, 12
    68c4:	add	ip, ip, #143360	; 0x23000
    68c8:	ldr	pc, [ip, #1328]!	; 0x530

000068cc <strtok_r@plt>:
    68cc:	add	ip, pc, #0, 12
    68d0:	add	ip, ip, #143360	; 0x23000
    68d4:	ldr	pc, [ip, #1320]!	; 0x528

000068d8 <gethostname@plt>:
    68d8:			; <UNDEFINED> instruction: 0xe7fd4778
    68dc:	add	ip, pc, #0, 12
    68e0:	add	ip, ip, #143360	; 0x23000
    68e4:	ldr	pc, [ip, #1308]!	; 0x51c

000068e8 <floor@plt>:
    68e8:	add	ip, pc, #0, 12
    68ec:	add	ip, ip, #143360	; 0x23000
    68f0:	ldr	pc, [ip, #1300]!	; 0x514

000068f4 <opendir@plt>:
    68f4:	add	ip, pc, #0, 12
    68f8:	add	ip, ip, #143360	; 0x23000
    68fc:	ldr	pc, [ip, #1292]!	; 0x50c

00006900 <mouseinterval@plt>:
    6900:	add	ip, pc, #0, 12
    6904:	add	ip, ip, #143360	; 0x23000
    6908:	ldr	pc, [ip, #1284]!	; 0x504

0000690c <__asprintf_chk@plt>:
    690c:	add	ip, pc, #0, 12
    6910:	add	ip, ip, #143360	; 0x23000
    6914:	ldr	pc, [ip, #1276]!	; 0x4fc

00006918 <getenv@plt>:
    6918:	add	ip, pc, #0, 12
    691c:	add	ip, ip, #143360	; 0x23000
    6920:	ldr	pc, [ip, #1268]!	; 0x4f4

00006924 <setpriority@plt>:
    6924:	add	ip, pc, #0, 12
    6928:	add	ip, ip, #143360	; 0x23000
    692c:	ldr	pc, [ip, #1260]!	; 0x4ec

00006930 <beep@plt>:
    6930:	add	ip, pc, #0, 12
    6934:	add	ip, ip, #143360	; 0x23000
    6938:	ldr	pc, [ip, #1252]!	; 0x4e4

0000693c <malloc@plt>:
    693c:	add	ip, pc, #0, 12
    6940:	add	ip, ip, #143360	; 0x23000
    6944:	ldr	pc, [ip, #1244]!	; 0x4dc

00006948 <log10@plt>:
    6948:	add	ip, pc, #0, 12
    694c:	add	ip, ip, #143360	; 0x23000
    6950:	ldr	pc, [ip, #1236]!	; 0x4d4

00006954 <__libc_start_main@plt>:
    6954:	add	ip, pc, #0, 12
    6958:	add	ip, ip, #143360	; 0x23000
    695c:	ldr	pc, [ip, #1228]!	; 0x4cc

00006960 <strerror@plt>:
    6960:	add	ip, pc, #0, 12
    6964:	add	ip, ip, #143360	; 0x23000
    6968:	ldr	pc, [ip, #1220]!	; 0x4c4

0000696c <strftime@plt>:
    696c:	add	ip, pc, #0, 12
    6970:	add	ip, ip, #143360	; 0x23000
    6974:	ldr	pc, [ip, #1212]!	; 0x4bc

00006978 <backtrace@plt>:
    6978:	add	ip, pc, #0, 12
    697c:	add	ip, ip, #143360	; 0x23000
    6980:	ldr	pc, [ip, #1204]!	; 0x4b4

00006984 <strsep@plt>:
    6984:	add	ip, pc, #0, 12
    6988:	add	ip, ip, #143360	; 0x23000
    698c:	ldr	pc, [ip, #1196]!	; 0x4ac

00006990 <wvline@plt>:
    6990:	add	ip, pc, #0, 12
    6994:	add	ip, ip, #143360	; 0x23000
    6998:	ldr	pc, [ip, #1188]!	; 0x4a4

0000699c <__gmon_start__@plt>:
    699c:	add	ip, pc, #0, 12
    69a0:	add	ip, ip, #143360	; 0x23000
    69a4:	ldr	pc, [ip, #1180]!	; 0x49c

000069a8 <open@plt>:
    69a8:	add	ip, pc, #0, 12
    69ac:	add	ip, ip, #143360	; 0x23000
    69b0:	ldr	pc, [ip, #1172]!	; 0x494

000069b4 <getopt_long@plt>:
    69b4:	add	ip, pc, #0, 12
    69b8:	add	ip, ip, #143360	; 0x23000
    69bc:	ldr	pc, [ip, #1164]!	; 0x48c

000069c0 <kill@plt>:
    69c0:			; <UNDEFINED> instruction: 0xe7fd4778
    69c4:	add	ip, pc, #0, 12
    69c8:	add	ip, ip, #143360	; 0x23000
    69cc:	ldr	pc, [ip, #1152]!	; 0x480

000069d0 <__ctype_b_loc@plt>:
    69d0:	add	ip, pc, #0, 12
    69d4:	add	ip, ip, #143360	; 0x23000
    69d8:	ldr	pc, [ip, #1144]!	; 0x478

000069dc <exit@plt>:
    69dc:	add	ip, pc, #0, 12
    69e0:	add	ip, ip, #143360	; 0x23000
    69e4:	ldr	pc, [ip, #1136]!	; 0x470

000069e8 <syscall@plt>:
    69e8:	add	ip, pc, #0, 12
    69ec:	add	ip, ip, #143360	; 0x23000
    69f0:	ldr	pc, [ip, #1128]!	; 0x468

000069f4 <feof@plt>:
    69f4:	add	ip, pc, #0, 12
    69f8:	add	ip, ip, #143360	; 0x23000
    69fc:	ldr	pc, [ip, #1120]!	; 0x460

00006a00 <strtoul@plt>:
    6a00:	add	ip, pc, #0, 12
    6a04:	add	ip, ip, #143360	; 0x23000
    6a08:	ldr	pc, [ip, #1112]!	; 0x458

00006a0c <strlen@plt>:
    6a0c:	add	ip, pc, #0, 12
    6a10:	add	ip, ip, #143360	; 0x23000
    6a14:	ldr	pc, [ip, #1104]!	; 0x450

00006a18 <__libc_current_sigrtmax@plt>:
    6a18:	add	ip, pc, #0, 12
    6a1c:	add	ip, ip, #143360	; 0x23000
    6a20:	ldr	pc, [ip, #1096]!	; 0x448

00006a24 <strchr@plt>:
    6a24:	add	ip, pc, #0, 12
    6a28:	add	ip, ip, #143360	; 0x23000
    6a2c:	ldr	pc, [ip, #1088]!	; 0x440

00006a30 <intrflush@plt>:
    6a30:	add	ip, pc, #0, 12
    6a34:	add	ip, ip, #143360	; 0x23000
    6a38:	ldr	pc, [ip, #1080]!	; 0x438

00006a3c <cbreak@plt>:
    6a3c:	add	ip, pc, #0, 12
    6a40:	add	ip, ip, #143360	; 0x23000
    6a44:	ldr	pc, [ip, #1072]!	; 0x430

00006a48 <__errno_location@plt>:
    6a48:	add	ip, pc, #0, 12
    6a4c:	add	ip, ip, #143360	; 0x23000
    6a50:	ldr	pc, [ip, #1064]!	; 0x428

00006a54 <strncasecmp@plt>:
    6a54:	add	ip, pc, #0, 12
    6a58:	add	ip, ip, #143360	; 0x23000
    6a5c:	ldr	pc, [ip, #1056]!	; 0x420

00006a60 <snprintf@plt>:
    6a60:	add	ip, pc, #0, 12
    6a64:	add	ip, ip, #143360	; 0x23000
    6a68:	ldr	pc, [ip, #1048]!	; 0x418

00006a6c <__isoc99_sscanf@plt>:
    6a6c:	add	ip, pc, #0, 12
    6a70:	add	ip, ip, #143360	; 0x23000
    6a74:	ldr	pc, [ip, #1040]!	; 0x410

00006a78 <mkdir@plt>:
    6a78:	add	ip, pc, #0, 12
    6a7c:	add	ip, ip, #143360	; 0x23000
    6a80:	ldr	pc, [ip, #1032]!	; 0x408

00006a84 <fcntl@plt>:
    6a84:	add	ip, pc, #0, 12
    6a88:	add	ip, ip, #143360	; 0x23000
    6a8c:	ldr	pc, [ip, #1024]!	; 0x400

00006a90 <memset@plt>:
    6a90:	add	ip, pc, #0, 12
    6a94:	add	ip, ip, #143360	; 0x23000
    6a98:	ldr	pc, [ip, #1016]!	; 0x3f8

00006a9c <strncpy@plt>:
    6a9c:	add	ip, pc, #0, 12
    6aa0:	add	ip, ip, #143360	; 0x23000
    6aa4:	ldr	pc, [ip, #1008]!	; 0x3f0

00006aa8 <init_pair@plt>:
    6aa8:	add	ip, pc, #0, 12
    6aac:	add	ip, ip, #143360	; 0x23000
    6ab0:	ldr	pc, [ip, #1000]!	; 0x3e8

00006ab4 <strtoull@plt>:
    6ab4:	add	ip, pc, #0, 12
    6ab8:	add	ip, ip, #143360	; 0x23000
    6abc:	ldr	pc, [ip, #992]!	; 0x3e0

00006ac0 <btowc@plt>:
    6ac0:	add	ip, pc, #0, 12
    6ac4:	add	ip, ip, #143360	; 0x23000
    6ac8:	ldr	pc, [ip, #984]!	; 0x3d8

00006acc <__printf_chk@plt>:
    6acc:	add	ip, pc, #0, 12
    6ad0:	add	ip, ip, #143360	; 0x23000
    6ad4:	ldr	pc, [ip, #976]!	; 0x3d0

00006ad8 <write@plt>:
    6ad8:	add	ip, pc, #0, 12
    6adc:	add	ip, ip, #143360	; 0x23000
    6ae0:	ldr	pc, [ip, #968]!	; 0x3c8

00006ae4 <fileno@plt>:
    6ae4:	add	ip, pc, #0, 12
    6ae8:	add	ip, ip, #143360	; 0x23000
    6aec:	ldr	pc, [ip, #960]!	; 0x3c0

00006af0 <__fprintf_chk@plt>:
    6af0:			; <UNDEFINED> instruction: 0xe7fd4778
    6af4:	add	ip, pc, #0, 12
    6af8:	add	ip, ip, #143360	; 0x23000
    6afc:	ldr	pc, [ip, #948]!	; 0x3b4

00006b00 <ceil@plt>:
    6b00:	add	ip, pc, #0, 12
    6b04:	add	ip, ip, #143360	; 0x23000
    6b08:	ldr	pc, [ip, #940]!	; 0x3ac

00006b0c <sched_setaffinity@plt>:
    6b0c:	add	ip, pc, #0, 12
    6b10:	add	ip, ip, #143360	; 0x23000
    6b14:	ldr	pc, [ip, #932]!	; 0x3a4

00006b18 <access@plt>:
    6b18:	add	ip, pc, #0, 12
    6b1c:	add	ip, ip, #143360	; 0x23000
    6b20:	ldr	pc, [ip, #924]!	; 0x39c

00006b24 <initscr@plt>:
    6b24:	add	ip, pc, #0, 12
    6b28:	add	ip, ip, #143360	; 0x23000
    6b2c:	ldr	pc, [ip, #916]!	; 0x394

00006b30 <fclose@plt>:
    6b30:	add	ip, pc, #0, 12
    6b34:	add	ip, ip, #143360	; 0x23000
    6b38:	ldr	pc, [ip, #908]!	; 0x38c

00006b3c <pipe@plt>:
    6b3c:	add	ip, pc, #0, 12
    6b40:	add	ip, ip, #143360	; 0x23000
    6b44:	ldr	pc, [ip, #900]!	; 0x384

00006b48 <setlocale@plt>:
    6b48:	add	ip, pc, #0, 12
    6b4c:	add	ip, ip, #143360	; 0x23000
    6b50:	ldr	pc, [ip, #892]!	; 0x37c

00006b54 <fork@plt>:
    6b54:	add	ip, pc, #0, 12
    6b58:	add	ip, ip, #143360	; 0x23000
    6b5c:	ldr	pc, [ip, #884]!	; 0x374

00006b60 <readdir@plt>:
    6b60:	add	ip, pc, #0, 12
    6b64:	add	ip, ip, #143360	; 0x23000
    6b68:	ldr	pc, [ip, #876]!	; 0x36c

00006b6c <strrchr@plt>:
    6b6c:	add	ip, pc, #0, 12
    6b70:	add	ip, ip, #143360	; 0x23000
    6b74:	ldr	pc, [ip, #868]!	; 0x364

00006b78 <nl_langinfo@plt>:
    6b78:	add	ip, pc, #0, 12
    6b7c:	add	ip, ip, #143360	; 0x23000
    6b80:	ldr	pc, [ip, #860]!	; 0x35c

00006b84 <wattr_off@plt>:
    6b84:	add	ip, pc, #0, 12
    6b88:	add	ip, ip, #143360	; 0x23000
    6b8c:	ldr	pc, [ip, #852]!	; 0x354

00006b90 <mbstowcs@plt>:
    6b90:	add	ip, pc, #0, 12
    6b94:	add	ip, ip, #143360	; 0x23000
    6b98:	ldr	pc, [ip, #844]!	; 0x34c

00006b9c <whline@plt>:
    6b9c:	add	ip, pc, #0, 12
    6ba0:	add	ip, ip, #143360	; 0x23000
    6ba4:	ldr	pc, [ip, #836]!	; 0x344

00006ba8 <mousemask@plt>:
    6ba8:	add	ip, pc, #0, 12
    6bac:	add	ip, ip, #143360	; 0x23000
    6bb0:	ldr	pc, [ip, #828]!	; 0x33c

00006bb4 <qsort@plt>:
    6bb4:	add	ip, pc, #0, 12
    6bb8:	add	ip, ip, #143360	; 0x23000
    6bbc:	ldr	pc, [ip, #820]!	; 0x334

00006bc0 <nonl@plt>:
    6bc0:	add	ip, pc, #0, 12
    6bc4:	add	ip, ip, #143360	; 0x23000
    6bc8:	ldr	pc, [ip, #812]!	; 0x32c

00006bcc <napms@plt>:
    6bcc:	add	ip, pc, #0, 12
    6bd0:	add	ip, ip, #143360	; 0x23000
    6bd4:	ldr	pc, [ip, #804]!	; 0x324

00006bd8 <mvprintw@plt>:
    6bd8:	add	ip, pc, #0, 12
    6bdc:	add	ip, ip, #143360	; 0x23000
    6be0:	ldr	pc, [ip, #796]!	; 0x31c

00006be4 <sched_getaffinity@plt>:
    6be4:	add	ip, pc, #0, 12
    6be8:	add	ip, ip, #143360	; 0x23000
    6bec:	ldr	pc, [ip, #788]!	; 0x314

00006bf0 <__lxstat@plt>:
    6bf0:	add	ip, pc, #0, 12
    6bf4:	add	ip, ip, #143360	; 0x23000
    6bf8:	ldr	pc, [ip, #780]!	; 0x30c

00006bfc <waddch@plt>:
    6bfc:	add	ip, pc, #0, 12
    6c00:	add	ip, ip, #143360	; 0x23000
    6c04:	ldr	pc, [ip, #772]!	; 0x304

00006c08 <__libc_current_sigrtmin@plt>:
    6c08:	add	ip, pc, #0, 12
    6c0c:	add	ip, ip, #143360	; 0x23000
    6c10:	ldr	pc, [ip, #764]!	; 0x2fc

00006c14 <vw_printw@plt>:
    6c14:	add	ip, pc, #0, 12
    6c18:	add	ip, ip, #143360	; 0x23000
    6c1c:	ldr	pc, [ip, #756]!	; 0x2f4

00006c20 <wclear@plt>:
    6c20:	add	ip, pc, #0, 12
    6c24:	add	ip, ip, #143360	; 0x23000
    6c28:	ldr	pc, [ip, #748]!	; 0x2ec

00006c2c <strncmp@plt>:
    6c2c:	add	ip, pc, #0, 12
    6c30:	add	ip, ip, #143360	; 0x23000
    6c34:	ldr	pc, [ip, #740]!	; 0x2e4

00006c38 <define_key@plt>:
    6c38:	add	ip, pc, #0, 12
    6c3c:	add	ip, ip, #143360	; 0x23000
    6c40:	ldr	pc, [ip, #732]!	; 0x2dc

00006c44 <endwin@plt>:
    6c44:			; <UNDEFINED> instruction: 0xe7fd4778
    6c48:	add	ip, pc, #0, 12
    6c4c:	add	ip, ip, #143360	; 0x23000
    6c50:	ldr	pc, [ip, #720]!	; 0x2d0

00006c54 <abort@plt>:
    6c54:	add	ip, pc, #0, 12
    6c58:	add	ip, ip, #143360	; 0x23000
    6c5c:	ldr	pc, [ip, #712]!	; 0x2c8

00006c60 <close@plt>:
    6c60:	add	ip, pc, #0, 12
    6c64:	add	ip, ip, #143360	; 0x23000
    6c68:	ldr	pc, [ip, #704]!	; 0x2c0

00006c6c <closedir@plt>:
    6c6c:	add	ip, pc, #0, 12
    6c70:	add	ip, ip, #143360	; 0x23000
    6c74:	ldr	pc, [ip, #696]!	; 0x2b8

00006c78 <__snprintf_chk@plt>:
    6c78:	add	ip, pc, #0, 12
    6c7c:	add	ip, ip, #143360	; 0x23000
    6c80:	ldr	pc, [ip, #688]!	; 0x2b0

00006c84 <wattrset@plt>:
    6c84:			; <UNDEFINED> instruction: 0xe7fd4778
    6c88:	add	ip, pc, #0, 12
    6c8c:	add	ip, ip, #143360	; 0x23000
    6c90:	ldr	pc, [ip, #676]!	; 0x2a4

00006c94 <backtrace_symbols_fd@plt>:
    6c94:	add	ip, pc, #0, 12
    6c98:	add	ip, ip, #143360	; 0x23000
    6c9c:	ldr	pc, [ip, #668]!	; 0x29c

Disassembly of section .text:

00006ca0 <main@@Base>:
    6ca0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6ca4:	mov	r6, r0
    6ca6:	vpush	{d8}
    6caa:	mov	r7, r1
    6cac:	ldr.w	r2, [pc, #1080]	; 70e8 <main@@Base+0x448>
    6cb0:	ldr.w	r3, [pc, #1080]	; 70ec <main@@Base+0x44c>
    6cb4:	add	r2, pc
    6cb6:	ldr.w	r0, [pc, #1080]	; 70f0 <main@@Base+0x450>
    6cba:	sub	sp, #76	; 0x4c
    6cbc:	ldr.w	r5, [pc, #1076]	; 70f4 <main@@Base+0x454>
    6cc0:	ldr	r3, [r2, r3]
    6cc2:	add	r0, pc
    6cc4:	add	r5, pc
    6cc6:	ldr	r3, [r3, #0]
    6cc8:	str	r3, [sp, #68]	; 0x44
    6cca:	mov.w	r3, #0
    6cce:	blx	6918 <getenv@plt>
    6cd2:	cmp	r0, #0
    6cd4:	beq.w	706e <main@@Base+0x3ce>
    6cd8:	mov	r1, r0
    6cda:	movs	r0, #0
    6cdc:	blx	6b48 <setlocale@plt>
    6ce0:	ldr.w	ip, [pc, #1044]	; 70f8 <main@@Base+0x458>
    6ce4:	add	r3, sp, #48	; 0x30
    6ce6:	str	r3, [sp, #20]
    6ce8:	add	ip, pc
    6cea:	mov	r4, r3
    6cec:	movs	r3, #0
    6cee:	str	r3, [sp, #36]	; 0x24
    6cf0:	add	r3, sp, #36	; 0x24
    6cf2:	str	r3, [sp, #16]
    6cf4:	ldmia.w	ip!, {r0, r1, r2, r3}
    6cf8:	ldr.w	sl, [pc, #1024]	; 70fc <main@@Base+0x45c>
    6cfc:	ldr.w	fp, [pc, #1024]	; 7100 <main@@Base+0x460>
    6d00:	add	sl, pc
    6d02:	stmia	r4!, {r0, r1, r2, r3}
    6d04:	add	fp, pc
    6d06:	ldr	r3, [pc, #1020]	; (7104 <main@@Base+0x464>)
    6d08:	ldr.w	ip, [ip]
    6d0c:	add	r3, pc
    6d0e:	vmov	s16, r3
    6d12:	str.w	ip, [r4]
    6d16:	ldr	r3, [sp, #16]
    6d18:	mov	r2, fp
    6d1a:	mov	r1, r7
    6d1c:	mov	r0, r6
    6d1e:	str	r3, [sp, #0]
    6d20:	mov	r3, sl
    6d22:	blx	69b4 <getopt_long@plt>
    6d26:	adds	r3, r0, #1
    6d28:	cmp	r3, #1
    6d2a:	bls.w	6eae <main@@Base+0x20e>
    6d2e:	subs	r0, #67	; 0x43
    6d30:	cmp	r0, #51	; 0x33
    6d32:	bhi.w	70de <main@@Base+0x43e>
    6d36:	tbh	[pc, r0, lsl #1]
    6d3a:	lsls	r1, r2, #2
    6d3c:	lsls	r2, r2, #7
    6d3e:	lsls	r2, r2, #7
    6d40:	lsls	r2, r2, #7
    6d42:	lsls	r2, r2, #7
    6d44:	lsls	r2, r2, #7
    6d46:	lsls	r2, r2, #7
    6d48:	lsls	r2, r2, #7
    6d4a:	lsls	r2, r2, #7
    6d4c:	lsls	r2, r2, #7
    6d4e:	lsls	r2, r2, #7
    6d50:	lsls	r2, r2, #7
    6d52:	lsls	r2, r2, #7
    6d54:	lsls	r2, r2, #7
    6d56:	lsls	r2, r2, #7
    6d58:	lsls	r2, r2, #7
    6d5a:	lsls	r2, r2, #7
    6d5c:	lsls	r2, r2, #7
    6d5e:	lsls	r2, r2, #7
    6d60:	lsls	r2, r2, #7
    6d62:	lsls	r2, r2, #7
    6d64:	lsls	r2, r2, #7
    6d66:	lsls	r2, r2, #7
    6d68:	lsls	r2, r2, #7
    6d6a:	lsls	r2, r2, #7
    6d6c:	lsls	r2, r2, #7
    6d6e:	lsls	r2, r2, #7
    6d70:	lsls	r2, r2, #7
    6d72:	lsls	r2, r2, #7
    6d74:	lsls	r2, r2, #7
    6d76:	lsls	r2, r2, #7
    6d78:	lsls	r2, r2, #7
    6d7a:	lsls	r2, r2, #7
    6d7c:	lsls	r5, r2, #2
    6d7e:	lsls	r2, r2, #7
    6d80:	lsls	r2, r2, #7
    6d82:	lsls	r2, r2, #7
    6d84:	lsls	r3, r1, #7
    6d86:	lsls	r2, r2, #7
    6d88:	lsls	r2, r2, #7
    6d8a:	lsls	r2, r2, #7
    6d8c:	lsls	r2, r2, #7
    6d8e:	lsls	r2, r2, #7
    6d90:	lsls	r2, r2, #7
    6d92:	lsls	r2, r2, #7
    6d94:	lsls	r0, r5, #1
    6d96:	lsls	r2, r2, #7
    6d98:	lsls	r2, r2, #7
    6d9a:	lsls	r2, r1, #1
    6d9c:	lsls	r6, r0, #1
    6d9e:	movs	r4, r6
    6da0:	lsls	r1, r0, #7
    6da2:	ldr	r3, [pc, #868]	; (7108 <main@@Base+0x468>)
    6da4:	add	r1, sp, #52	; 0x34
    6da6:	ldr	r4, [r5, r3]
    6da8:	ldr	r0, [r4, #0]
    6daa:	bl	11680 <Action_setUserOnly@@Base>
    6dae:	cmp	r0, #0
    6db0:	bne.n	6d16 <main@@Base+0x76>
    6db2:	ldr	r0, [pc, #856]	; (710c <main@@Base+0x46c>)
    6db4:	movs	r1, #1
    6db6:	ldr	r2, [pc, #856]	; (7110 <main@@Base+0x470>)
    6db8:	ldr	r3, [r4, #0]
    6dba:	ldr	r0, [r5, r0]
    6dbc:	add	r2, pc
    6dbe:	ldr	r0, [r0, #0]
    6dc0:	blx	6af4 <__fprintf_chk@plt+0x4>
    6dc4:	b.n	6d16 <main@@Base+0x76>
    6dc6:	movs	r3, #1
    6dc8:	strb.w	r3, [sp, #65]	; 0x41
    6dcc:	b.n	6d16 <main@@Base+0x76>
    6dce:	ldr	r3, [pc, #824]	; (7108 <main@@Base+0x468>)
    6dd0:	ldr	r1, [pc, #832]	; (7114 <main@@Base+0x474>)
    6dd2:	ldr.w	r8, [r5, r3]
    6dd6:	add	r1, pc
    6dd8:	ldr.w	r4, [r8]
    6ddc:	mov	r0, r4
    6dde:	blx	66b4 <strcmp@plt+0x4>
    6de2:	cmp	r0, #0
    6de4:	beq.w	7090 <main@@Base+0x3f0>
    6de8:	mov	r0, r4
    6dea:	bl	7bec <ColumnsPanel_fieldNameToIndex@@Base>
    6dee:	str	r0, [sp, #56]	; 0x38
    6df0:	adds	r0, #1
    6df2:	bne.n	6d16 <main@@Base+0x76>
    6df4:	ldr	r0, [pc, #788]	; (710c <main@@Base+0x46c>)
    6df6:	movs	r1, #1
    6df8:	ldr	r2, [pc, #796]	; (7118 <main@@Base+0x478>)
    6dfa:	ldr.w	r3, [r8]
    6dfe:	ldr	r0, [r5, r0]
    6e00:	add	r2, pc
    6e02:	ldr	r0, [r0, #0]
    6e04:	blx	6af4 <__fprintf_chk@plt+0x4>
    6e08:	b.n	6d16 <main@@Base+0x76>
    6e0a:	ldr	r3, [pc, #764]	; (7108 <main@@Base+0x468>)
    6e0c:	add.w	r8, sp, #40	; 0x28
    6e10:	ldr	r3, [r5, r3]
    6e12:	ldr	r0, [r3, #0]
    6e14:	bl	11de4 <xStrdup@@Base>
    6e18:	vmov	r1, s16
    6e1c:	mov	r2, r8
    6e1e:	mov	r9, r0
    6e20:	blx	68cc <strtok_r@plt>
    6e24:	ldr	r1, [sp, #48]	; 0x30
    6e26:	mov	r4, r0
    6e28:	cbz	r1, 6e90 <main@@Base+0x1f0>
    6e2a:	cbz	r4, 6e54 <main@@Base+0x1b4>
    6e2c:	ldr	r3, [pc, #748]	; (711c <main@@Base+0x47c>)
    6e2e:	mov	r0, r4
    6e30:	add	r3, pc
    6e32:	mov	r4, r3
    6e34:	movs	r2, #10
    6e36:	movs	r1, #0
    6e38:	blx	66cc <strtol@plt>
    6e3c:	movs	r2, #1
    6e3e:	mov	r1, r0
    6e40:	ldr	r0, [sp, #48]	; 0x30
    6e42:	bl	9514 <Hashtable_put@@Base>
    6e46:	mov	r2, r8
    6e48:	mov	r1, r4
    6e4a:	movs	r0, #0
    6e4c:	blx	68cc <strtok_r@plt>
    6e50:	cmp	r0, #0
    6e52:	bne.n	6e34 <main@@Base+0x194>
    6e54:	mov	r0, r9
    6e56:	blx	6758 <free@plt+0x4>
    6e5a:	b.n	6d16 <main@@Base+0x76>
    6e5c:	movs	r3, #0
    6e5e:	strb.w	r3, [sp, #64]	; 0x40
    6e62:	b.n	6d16 <main@@Base+0x76>
    6e64:	ldr	r3, [pc, #672]	; (7108 <main@@Base+0x468>)
    6e66:	add	r2, sp, #60	; 0x3c
    6e68:	ldr	r1, [pc, #692]	; (7120 <main@@Base+0x480>)
    6e6a:	ldr	r4, [r5, r3]
    6e6c:	add	r1, pc
    6e6e:	ldr	r0, [r4, #0]
    6e70:	blx	6a6c <__isoc99_sscanf@plt>
    6e74:	cmp	r0, #1
    6e76:	bne.n	6e9a <main@@Base+0x1fa>
    6e78:	ldr	r3, [sp, #60]	; 0x3c
    6e7a:	cmp	r3, #0
    6e7c:	it	le
    6e7e:	strle	r0, [sp, #60]	; 0x3c
    6e80:	ble.w	6d16 <main@@Base+0x76>
    6e84:	cmp	r3, #100	; 0x64
    6e86:	ble.w	6d16 <main@@Base+0x76>
    6e8a:	movs	r3, #100	; 0x64
    6e8c:	str	r3, [sp, #60]	; 0x3c
    6e8e:	b.n	6d16 <main@@Base+0x76>
    6e90:	movs	r0, #8
    6e92:	bl	9498 <Hashtable_new@@Base>
    6e96:	str	r0, [sp, #48]	; 0x30
    6e98:	b.n	6e2a <main@@Base+0x18a>
    6e9a:	ldr	r0, [pc, #624]	; (710c <main@@Base+0x46c>)
    6e9c:	movs	r1, #1
    6e9e:	ldr	r2, [pc, #644]	; (7124 <main@@Base+0x484>)
    6ea0:	ldr	r3, [r4, #0]
    6ea2:	ldr	r0, [r5, r0]
    6ea4:	add	r2, pc
    6ea6:	ldr	r0, [r0, #0]
    6ea8:	blx	6af4 <__fprintf_chk@plt+0x4>
    6eac:	b.n	6d16 <main@@Base+0x76>
    6eae:	ldrb.w	r3, [sp, #64]	; 0x40
    6eb2:	ldrd	fp, r2, [sp, #48]	; 0x30
    6eb6:	ldrd	r8, sl, [sp, #56]	; 0x38
    6eba:	str	r3, [sp, #24]
    6ebc:	ldrb.w	r3, [sp, #65]	; 0x41
    6ec0:	str	r2, [sp, #28]
    6ec2:	str	r3, [sp, #16]
    6ec4:	bl	bd3c <Process_setupColumnWidths@@Base>
    6ec8:	bl	f590 <UsersTable_new@@Base>
    6ecc:	ldr	r2, [sp, #28]
    6ece:	mov	r1, fp
    6ed0:	mov	r9, r0
    6ed2:	bl	14498 <ProcessList_new@@Base>
    6ed6:	mov	r6, r0
    6ed8:	ldr.w	r0, [r0, #128]	; 0x80
    6edc:	bl	e620 <Settings_new@@Base>
    6ee0:	movs	r2, #2
    6ee2:	mov	r4, r0
    6ee4:	mov	r0, r6
    6ee6:	mov	r1, r4
    6ee8:	str	r4, [r6, #0]
    6eea:	bl	9620 <Header_new@@Base>
    6eee:	mov	r7, r0
    6ef0:	bl	9aa4 <Header_populateFromSettings@@Base>
    6ef4:	ldr	r3, [sp, #24]
    6ef6:	cmp.w	sl, #4294967295	; 0xffffffff
    6efa:	it	ne
    6efc:	strne.w	sl, [r4, #40]	; 0x28
    6f00:	cbnz	r3, 6f06 <main@@Base+0x266>
    6f02:	movs	r3, #1
    6f04:	str	r3, [r4, #36]	; 0x24
    6f06:	ldr	r3, [sp, #16]
    6f08:	cmp	r3, #0
    6f0a:	bne.w	7054 <main@@Base+0x3b4>
    6f0e:	ldrd	r1, r0, [r4, #36]	; 0x24
    6f12:	bl	8718 <CRT_init@@Base>
    6f16:	bl	8dd4 <MainPanel_new@@Base>
    6f1a:	mov	sl, r0
    6f1c:	mov	r0, r6
    6f1e:	mov	r1, sl
    6f20:	bl	ccf0 <ProcessList_setPanel@@Base>
    6f24:	ldrb.w	r1, [r4, #58]	; 0x3a
    6f28:	mov	r0, sl
    6f2a:	bl	8a60 <MainPanel_updateTreeFunctions@@Base>
    6f2e:	cmp.w	r8, #0
    6f32:	ble.n	6f42 <main@@Base+0x2a2>
    6f34:	movs	r3, #0
    6f36:	str.w	r8, [r4, #52]	; 0x34
    6f3a:	strb.w	r3, [r4, #58]	; 0x3a
    6f3e:	movs	r3, #1
    6f40:	str	r3, [r4, #48]	; 0x30
    6f42:	mov	r0, sl
    6f44:	add.w	r8, sp, #40	; 0x28
    6f48:	bl	b220 <Panel_getHeader@@Base>
    6f4c:	mov	r1, r0
    6f4e:	mov	r0, r6
    6f50:	bl	ccf4 <ProcessList_printHeader@@Base>
    6f54:	mov	r0, sl
    6f56:	ldr	r1, [sp, #20]
    6f58:	strd	r6, sl, [sp, #56]	; 0x38
    6f5c:	strd	r4, r9, [sp, #48]	; 0x30
    6f60:	str	r7, [sp, #64]	; 0x40
    6f62:	bl	8e54 <MainPanel_setState@@Base>
    6f66:	movs	r2, #0
    6f68:	ldr	r1, [r7, #20]
    6f6a:	movs	r3, #1
    6f6c:	mov	r0, r2
    6f6e:	str	r3, [sp, #12]
    6f70:	str	r3, [sp, #0]
    6f72:	mov.w	r3, #4294967295	; 0xffffffff
    6f76:	str	r4, [sp, #8]
    6f78:	str	r7, [sp, #4]
    6f7a:	bl	d490 <ScreenManager_new@@Base>
    6f7e:	mov	r1, sl
    6f80:	mov.w	r2, #4294967295	; 0xffffffff
    6f84:	mov	sl, r0
    6f86:	bl	d510 <ScreenManager_add@@Base>
    6f8a:	mov	r0, r6
    6f8c:	bl	d040 <ProcessList_scan@@Base>
    6f90:	movw	r3, #26816	; 0x68c0
    6f94:	movs	r2, #0
    6f96:	movt	r3, #1144	; 0x478
    6f9a:	strd	r2, r3, [sp, #40]	; 0x28
    6f9e:	mov	r1, r8
    6fa0:	mov	r0, r8
    6fa2:	blx	6770 <nanosleep@plt>
    6fa6:	adds	r0, #1
    6fa8:	beq.n	6f9e <main@@Base+0x2fe>
    6faa:	mov	r0, r6
    6fac:	bl	d040 <ProcessList_scan@@Base>
    6fb0:	movs	r2, #0
    6fb2:	mov	r1, r2
    6fb4:	mov	r0, sl
    6fb6:	bl	d690 <ScreenManager_run@@Base>
    6fba:	ldr	r1, [pc, #364]	; (7128 <main@@Base+0x488>)
    6fbc:	ldr	r3, [pc, #364]	; (712c <main@@Base+0x48c>)
    6fbe:	movs	r2, #0
    6fc0:	ldr	r1, [r5, r1]
    6fc2:	str	r1, [sp, #16]
    6fc4:	ldr.w	r8, [r5, r3]
    6fc8:	ldr	r3, [r1, #0]
    6fca:	ldr.w	r0, [r8]
    6fce:	ldr	r1, [r3, #0]
    6fd0:	blx	670c <wattr_on@plt>
    6fd4:	ldr	r3, [pc, #344]	; (7130 <main@@Base+0x490>)
    6fd6:	ldr.w	r0, [r8]
    6fda:	movs	r2, #0
    6fdc:	ldr	r3, [r5, r3]
    6fde:	ldr	r1, [r3, #0]
    6fe0:	subs	r1, #1
    6fe2:	blx	6668 <wmove@plt>
    6fe6:	adds	r0, #1
    6fe8:	bne.n	705c <main@@Base+0x3bc>
    6fea:	ldr	r3, [sp, #16]
    6fec:	movs	r2, #0
    6fee:	ldr.w	r0, [r8]
    6ff2:	ldr	r3, [r3, #0]
    6ff4:	ldr	r1, [r3, #0]
    6ff6:	blx	6b84 <wattr_off@plt>
    6ffa:	ldr.w	r0, [r8]
    6ffe:	blx	15e50 <__libc_csu_fini@@Base+0x4>
    7002:	bl	85a4 <CRT_done@@Base>
    7006:	ldrb.w	r3, [r4, #71]	; 0x47
    700a:	cmp	r3, #0
    700c:	bne.n	7088 <main@@Base+0x3e8>
    700e:	mov	r0, r7
    7010:	bl	9680 <Header_delete@@Base>
    7014:	mov	r0, r6
    7016:	bl	14764 <ProcessList_delete@@Base>
    701a:	mov	r0, sl
    701c:	bl	d4f8 <ScreenManager_delete@@Base>
    7020:	mov	r0, r9
    7022:	bl	f5ac <UsersTable_delete@@Base>
    7026:	mov	r0, r4
    7028:	bl	e364 <Settings_delete@@Base>
    702c:	cmp.w	fp, #0
    7030:	beq.n	7038 <main@@Base+0x398>
    7032:	mov	r0, fp
    7034:	bl	94c0 <Hashtable_delete@@Base>
    7038:	ldr	r2, [pc, #248]	; (7134 <main@@Base+0x494>)
    703a:	ldr	r3, [pc, #176]	; (70ec <main@@Base+0x44c>)
    703c:	add	r2, pc
    703e:	ldr	r3, [r2, r3]
    7040:	ldr	r2, [r3, #0]
    7042:	ldr	r3, [sp, #68]	; 0x44
    7044:	eors	r2, r3
    7046:	bne.n	70e4 <main@@Base+0x444>
    7048:	movs	r0, #0
    704a:	add	sp, #76	; 0x4c
    704c:	vpop	{d8}
    7050:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7054:	movs	r3, #1
    7056:	strb.w	r3, [r4, #58]	; 0x3a
    705a:	b.n	6f0e <main@@Base+0x26e>
    705c:	ldr	r3, [pc, #216]	; (7138 <main@@Base+0x498>)
    705e:	movs	r1, #32
    7060:	ldr.w	r0, [r8]
    7064:	ldr	r3, [r5, r3]
    7066:	ldr	r2, [r3, #0]
    7068:	blx	6b9c <whline@plt>
    706c:	b.n	6fea <main@@Base+0x34a>
    706e:	ldr	r0, [pc, #204]	; (713c <main@@Base+0x49c>)
    7070:	add	r0, pc
    7072:	blx	6918 <getenv@plt>
    7076:	mov	r1, r0
    7078:	cmp	r0, #0
    707a:	bne.w	6cda <main@@Base+0x3a>
    707e:	ldr	r1, [pc, #192]	; (7140 <main@@Base+0x4a0>)
    7080:	add	r1, pc
    7082:	blx	6b48 <setlocale@plt>
    7086:	b.n	6ce0 <main@@Base+0x40>
    7088:	mov	r0, r4
    708a:	bl	e398 <Settings_write@@Base>
    708e:	b.n	700e <main@@Base+0x36e>
    7090:	ldr	r3, [pc, #176]	; (7144 <main@@Base+0x4a4>)
    7092:	movs	r4, #1
    7094:	ldr	r7, [pc, #176]	; (7148 <main@@Base+0x4a8>)
    7096:	ldr	r6, [r5, r3]
    7098:	add	r7, pc
    709a:	b.n	70b0 <main@@Base+0x410>
    709c:	ldr	r2, [pc, #172]	; (714c <main@@Base+0x4ac>)
    709e:	lsls	r3, r4, #4
    70a0:	ldr	r2, [r5, r2]
    70a2:	ldr	r2, [r3, r2]
    70a4:	cbz	r2, 70ae <main@@Base+0x40e>
    70a6:	mov	r1, r7
    70a8:	movs	r0, #1
    70aa:	blx	6acc <__printf_chk@plt>
    70ae:	adds	r4, #1
    70b0:	ldr	r3, [r6, #0]
    70b2:	cmp	r4, r3
    70b4:	blt.n	709c <main@@Base+0x3fc>
    70b6:	movs	r0, #0
    70b8:	blx	69dc <exit@plt>
    70bc:	ldr	r0, [pc, #144]	; (7150 <main@@Base+0x4b0>)
    70be:	movs	r2, #72	; 0x48
    70c0:	ldr	r3, [pc, #144]	; (7154 <main@@Base+0x4b4>)
    70c2:	movs	r1, #1
    70c4:	add	r0, pc
    70c6:	ldr	r3, [r5, r3]
    70c8:	ldr	r3, [r3, #0]
    70ca:	blx	6884 <fwrite@plt>
    70ce:	b.n	70b6 <main@@Base+0x416>
    70d0:	ldr	r0, [pc, #132]	; (7158 <main@@Base+0x4b8>)
    70d2:	movw	r2, #683	; 0x2ab
    70d6:	ldr	r3, [pc, #124]	; (7154 <main@@Base+0x4b4>)
    70d8:	movs	r1, #1
    70da:	add	r0, pc
    70dc:	b.n	70c6 <main@@Base+0x426>
    70de:	movs	r0, #1
    70e0:	blx	69dc <exit@plt>
    70e4:	blx	67d0 <__stack_chk_fail@plt>
    70e8:	adds	r0, #88	; 0x58
    70ea:	movs	r2, r0
    70ec:	lsls	r0, r0, #9
    70ee:	movs	r0, r0
    70f0:			; <UNDEFINED> instruction: 0xf7d60000
    70f4:	adds	r0, #72	; 0x48
    70f6:	movs	r2, r0
    70f8:	smull	r0, r0, r0, r0
    70fc:	subs	r4, #156	; 0x9c
    70fe:	movs	r2, r0
    7100:	smlabb	r0, r0, r0, r0
    7104:			; <UNDEFINED> instruction: 0xf4fc0000
    7108:	lsls	r4, r4, #11
    710a:	movs	r0, r0
    710c:	lsls	r0, r5, #9
    710e:	movs	r0, r0
    7110:			; <UNDEFINED> instruction: 0xfa3c0000
    7114:	vst1.8	{d16[0]}, [lr], r0
    7118:	vld1.8	{d0[0]}, [ip], r0
    711c:			; <UNDEFINED> instruction: 0xf3d80000
    7120:	vld4.8	{d16-d19}, [r0], r0
    7124:	ldrsh.w	r0, [r0, r0]
    7128:	lsls	r0, r6, #9
    712a:	movs	r0, r0
    712c:	lsls	r4, r5, #9
    712e:	movs	r0, r0
    7130:	lsls	r0, r2, #11
    7132:	movs	r0, r0
    7134:	cmp	r4, #208	; 0xd0
    7136:	movs	r2, r0
    7138:	lsls	r0, r7, #10
    713a:	movs	r0, r0
    713c:	bics.w	r0, r4, #8388608	; 0x800000
    7140:			; <UNDEFINED> instruction: 0xf7200000
    7144:	lsls	r4, r6, #9
    7146:	movs	r0, r0
    7148:			; <UNDEFINED> instruction: 0xf0cc0000
    714c:	lsls	r4, r1, #10
    714e:	movs	r0, r0
    7150:			; <UNDEFINED> instruction: 0xf6940000
    7154:	lsls	r0, r0, #11
    7156:	movs	r0, r0
    7158:			; <UNDEFINED> instruction: 0xf3d20000

0000715c <_start@@Base>:
    715c:	mov.w	fp, #0
    7160:	mov.w	lr, #0
    7164:	pop	{r1}
    7166:	mov	r2, sp
    7168:	push	{r2}
    716a:	push	{r0}
    716c:	ldr.w	sl, [pc, #36]	; 7194 <_start@@Base+0x38>
    7170:	add	r3, pc, #32	; (adr r3, 7194 <_start@@Base+0x38>)
    7172:	add	sl, r3
    7174:	ldr.w	ip, [pc, #32]	; 7198 <_start@@Base+0x3c>
    7178:	ldr.w	ip, [sl, ip]
    717c:	str.w	ip, [sp, #-4]!
    7180:	ldr	r3, [pc, #24]	; (719c <_start@@Base+0x40>)
    7182:	ldr.w	r3, [sl, r3]
    7186:	ldr	r0, [pc, #24]	; (71a0 <_start@@Base+0x44>)
    7188:	ldr.w	r0, [sl, r0]
    718c:	blx	6954 <__libc_start_main@plt>
    7190:	blx	6c54 <abort@plt>
    7194:	cmp	r3, #124	; 0x7c
    7196:	movs	r2, r0
    7198:	lsls	r4, r5, #8
    719a:	movs	r0, r0
    719c:	lsls	r4, r5, #10
    719e:	movs	r0, r0
    71a0:	lsls	r4, r0, #11
    71a2:	movs	r0, r0
    71a4:	adds	r0, #20
    71a6:	b.n	6ce8 <main@@Base+0x48>
    71a8:	movs	r0, #20
    71aa:	b.n	6cec <main@@Base+0x4c>
    71ac:	adds	r0, #3
    71ae:	b.n	72d0 <_start@@Base+0x174>
    71b0:	movs	r0, #2
    71b2:	b.n	70dc <main@@Base+0x43c>
    71b4:	movs	r0, r0
    71b6:	b.n	785e <CategoriesPanel_new@@Base+0x12e>
    71b8:	vrhadd.u16	d0, d14, d31
    71bc:	ldc2l	10, cr14, [r6, #1020]!	; 0x3fc	; <UNPREDICTABLE>
    71c0:	cmp	r3, #92	; 0x5c
    71c2:	movs	r2, r0
    71c4:	lsls	r0, r2, #10
    71c6:	movs	r0, r0
    71c8:	ldr	r0, [pc, #24]	; (71e4 <_start@@Base+0x88>)
    71ca:	ldr	r3, [pc, #28]	; (71e8 <_start@@Base+0x8c>)
    71cc:	add	r0, pc
    71ce:	ldr	r2, [pc, #28]	; (71ec <_start@@Base+0x90>)
    71d0:	add	r3, pc
    71d2:	cmp	r3, r0
    71d4:	add	r2, pc
    71d6:	beq.n	71e0 <_start@@Base+0x84>
    71d8:	ldr	r3, [pc, #20]	; (71f0 <_start@@Base+0x94>)
    71da:	ldr	r3, [r2, r3]
    71dc:	cbz	r3, 71e0 <_start@@Base+0x84>
    71de:	bx	r3
    71e0:	bx	lr
    71e2:	nop
    71e4:	cmp	ip, r4
    71e6:	movs	r2, r0
    71e8:	cmp	r8, r4
    71ea:	movs	r2, r0
    71ec:	cmp	r3, #56	; 0x38
    71ee:	movs	r2, r0
    71f0:	lsls	r4, r6, #8
    71f2:	movs	r0, r0
    71f4:	ldr	r0, [pc, #32]	; (7218 <_start@@Base+0xbc>)
    71f6:	ldr	r1, [pc, #36]	; (721c <_start@@Base+0xc0>)
    71f8:	add	r0, pc
    71fa:	ldr	r2, [pc, #36]	; (7220 <_start@@Base+0xc4>)
    71fc:	add	r1, pc
    71fe:	subs	r1, r1, r0
    7200:	add	r2, pc
    7202:	lsrs	r3, r1, #31
    7204:	add.w	r1, r3, r1, asr #2
    7208:	asrs	r1, r1, #1
    720a:	beq.n	7214 <_start@@Base+0xb8>
    720c:	ldr	r3, [pc, #20]	; (7224 <_start@@Base+0xc8>)
    720e:	ldr	r3, [r2, r3]
    7210:	cbz	r3, 7214 <_start@@Base+0xb8>
    7212:	bx	r3
    7214:	bx	lr
    7216:	nop
    7218:	cmp	r0, pc
    721a:	movs	r2, r0
    721c:	cmp	r4, lr
    721e:	movs	r2, r0
    7220:	cmp	r3, #12
    7222:	movs	r2, r0
    7224:	lsls	r0, r4, #11
    7226:	movs	r0, r0
    7228:	push	{r3, lr}
    722a:	ldr	r3, [pc, #40]	; (7254 <_start@@Base+0xf8>)
    722c:	ldr	r2, [pc, #40]	; (7258 <_start@@Base+0xfc>)
    722e:	add	r3, pc
    7230:	add	r2, pc
    7232:	ldrb	r3, [r3, #0]
    7234:	cbnz	r3, 7252 <_start@@Base+0xf6>
    7236:	ldr	r3, [pc, #36]	; (725c <_start@@Base+0x100>)
    7238:	ldr	r3, [r2, r3]
    723a:	cbz	r3, 7246 <_start@@Base+0xea>
    723c:	ldr	r3, [pc, #32]	; (7260 <_start@@Base+0x104>)
    723e:	add	r3, pc
    7240:	ldr	r0, [r3, #0]
    7242:	blx	66c0 <__cxa_finalize@plt>
    7246:	bl	71c8 <_start@@Base+0x6c>
    724a:	ldr	r3, [pc, #24]	; (7264 <_start@@Base+0x108>)
    724c:	movs	r2, #1
    724e:	add	r3, pc
    7250:	strb	r2, [r3, #0]
    7252:	pop	{r3, pc}
    7254:	cmp	r6, r8
    7256:	movs	r2, r0
    7258:	cmp	r2, #220	; 0xdc
    725a:	movs	r2, r0
    725c:	lsls	r0, r6, #8
    725e:	movs	r0, r0
    7260:	cmp	r5, #194	; 0xc2
    7262:	movs	r2, r0
    7264:	cmp	r6, r4
    7266:	movs	r2, r0
    7268:	b.n	71f4 <_start@@Base+0x98>
    726a:	nop
    726c:	push	{r4, lr}
    726e:	mov	r4, r0
    7270:	bl	b1e0 <Panel_done@@Base>
    7274:	mov	r0, r4
    7276:	ldmia.w	sp!, {r4, lr}
    727a:	b.w	6754 <free@plt>
    727e:	nop
    7280:	push	{r4, r5, r6, r7, lr}
    7282:	movw	r3, #9908	; 0x26b4
    7286:	sub	sp, #12
    7288:	mov	r4, r1
    728a:	ldr	r6, [r0, r3]
    728c:	mov	r5, r0
    728e:	bl	b2f8 <Panel_getSelected@@Base>
    7292:	cmp	r4, #108	; 0x6c
    7294:	ldr	r1, [r0, #8]
    7296:	ldr	r0, [pc, #268]	; (73a4 <_start@@Base+0x248>)
    7298:	uxtb	r2, r1
    729a:	add	r0, pc
    729c:	mov.w	ip, r1, asr #16
    72a0:	beq.n	735a <_start@@Base+0x1fe>
    72a2:	ble.n	7338 <_start@@Base+0x1dc>
    72a4:	movw	r3, #269	; 0x10d
    72a8:	cmp	r4, r3
    72aa:	beq.n	735a <_start@@Base+0x1fe>
    72ac:	cmp.w	r4, #270	; 0x10e
    72b0:	blt.n	734a <_start@@Base+0x1ee>
    72b2:	beq.n	72bc <_start@@Base+0x160>
    72b4:	movw	r3, #343	; 0x157
    72b8:	cmp	r4, r3
    72ba:	bne.n	7342 <_start@@Base+0x1e6>
    72bc:	ldr	r4, [pc, #232]	; (73a8 <_start@@Base+0x24c>)
    72be:	movs	r3, #1
    72c0:	movw	r7, #9916	; 0x26bc
    72c4:	ldr	r7, [r5, r7]
    72c6:	ldr	r1, [r0, r4]
    72c8:	mov	r0, r6
    72ca:	movs	r4, #32
    72cc:	movt	r4, #260	; 0x104
    72d0:	ldr.w	r1, [r1, ip, lsl #2]
    72d4:	bl	9884 <Header_addMeterByClass@@Base>
    72d8:	movs	r1, #0
    72da:	bl	ab34 <Meter_toListItem@@Base>
    72de:	mov	r1, r0
    72e0:	mov	r0, r7
    72e2:	bl	b294 <Panel_add@@Base>
    72e6:	mov	r0, r7
    72e8:	bl	b348 <Panel_size@@Base>
    72ec:	mov	r1, r0
    72ee:	mov	r0, r7
    72f0:	subs	r1, #1
    72f2:	bl	b350 <Panel_setSelected@@Base>
    72f6:	mov	r0, r7
    72f8:	movs	r1, #1
    72fa:	bl	ac2c <MetersPanel_setMoving@@Base>
    72fe:	ldr	r0, [r7, #52]	; 0x34
    7300:	movs	r1, #0
    7302:	bl	9420 <FunctionBar_draw@@Base>
    7306:	movw	r3, #9904	; 0x26b0
    730a:	movs	r2, #1
    730c:	ldr	r3, [r5, r3]
    730e:	mov	r0, r6
    7310:	strb.w	r2, [r3, #71]	; 0x47
    7314:	bl	9a3c <Header_calculateHeight@@Base>
    7318:	mov	r0, r6
    731a:	bl	9964 <Header_draw@@Base>
    731e:	movw	r3, #9900	; 0x26ac
    7322:	ldr	r0, [r5, r3]
    7324:	ldr	r2, [r6, #20]
    7326:	ldr	r5, [r0, #12]
    7328:	ldr	r3, [r0, #8]
    732a:	ldr	r1, [r0, #0]
    732c:	str	r5, [sp, #0]
    732e:	bl	d5bc <ScreenManager_resize@@Base>
    7332:	mov	r0, r4
    7334:	add	sp, #12
    7336:	pop	{r4, r5, r6, r7, pc}
    7338:	cmp	r4, #76	; 0x4c
    733a:	beq.n	735a <_start@@Base+0x1fe>
    733c:	ble.n	7350 <_start@@Base+0x1f4>
    733e:	cmp	r4, #82	; 0x52
    7340:	beq.n	72bc <_start@@Base+0x160>
    7342:	movs	r4, #2
    7344:	mov	r0, r4
    7346:	add	sp, #12
    7348:	pop	{r4, r5, r6, r7, pc}
    734a:	cmp	r4, #114	; 0x72
    734c:	bne.n	7342 <_start@@Base+0x1e6>
    734e:	b.n	72bc <_start@@Base+0x160>
    7350:	cmp	r4, #10
    7352:	beq.n	72bc <_start@@Base+0x160>
    7354:	cmp	r4, #13
    7356:	beq.n	72bc <_start@@Base+0x160>
    7358:	b.n	7342 <_start@@Base+0x1e6>
    735a:	ldr	r4, [pc, #76]	; (73a8 <_start@@Base+0x24c>)
    735c:	movs	r3, #0
    735e:	movw	r7, #9912	; 0x26b8
    7362:	ldr	r7, [r5, r7]
    7364:	ldr	r0, [r0, r4]
    7366:	movs	r4, #1
    7368:	mov	r1, r0
    736a:	mov	r0, r6
    736c:	ldr.w	r1, [r1, ip, lsl #2]
    7370:	bl	9884 <Header_addMeterByClass@@Base>
    7374:	movs	r1, #0
    7376:	bl	ab34 <Meter_toListItem@@Base>
    737a:	mov	r1, r0
    737c:	mov	r0, r7
    737e:	bl	b294 <Panel_add@@Base>
    7382:	mov	r0, r7
    7384:	bl	b348 <Panel_size@@Base>
    7388:	mov	r1, r0
    738a:	mov	r0, r7
    738c:	subs	r1, #1
    738e:	bl	b350 <Panel_setSelected@@Base>
    7392:	mov	r0, r7
    7394:	mov	r1, r4
    7396:	bl	ac2c <MetersPanel_setMoving@@Base>
    739a:	ldr	r0, [r7, #52]	; 0x34
    739c:	movs	r1, #0
    739e:	bl	9420 <FunctionBar_draw@@Base>
    73a2:	b.n	7306 <_start@@Base+0x1aa>
    73a4:	cmp	r2, #114	; 0x72
    73a6:	movs	r2, r0
    73a8:	lsls	r0, r1, #11
	...

000073ac <AvailableMetersPanel_new@@Base>:
    73ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    73b0:	sub	sp, #84	; 0x54
    73b2:	mov	r7, r2
    73b4:	ldr	r2, [pc, #340]	; (750c <AvailableMetersPanel_new@@Base+0x160>)
    73b6:	str	r3, [sp, #16]
    73b8:	mov	r9, r0
    73ba:	ldr	r3, [pc, #340]	; (7510 <AvailableMetersPanel_new@@Base+0x164>)
    73bc:	add	r2, pc
    73be:	mov.w	r0, #9920	; 0x26c0
    73c2:	mov	r8, r1
    73c4:	ldrd	fp, sl, [sp, #120]	; 0x78
    73c8:	ldr	r3, [r2, r3]
    73ca:	ldr	r5, [pc, #328]	; (7514 <AvailableMetersPanel_new@@Base+0x168>)
    73cc:	ldr	r3, [r3, #0]
    73ce:	str	r3, [sp, #76]	; 0x4c
    73d0:	mov.w	r3, #0
    73d4:	bl	11d84 <xMalloc@@Base>
    73d8:	ldr	r3, [pc, #316]	; (7518 <AvailableMetersPanel_new@@Base+0x16c>)
    73da:	add	r5, pc
    73dc:	ldr	r1, [pc, #316]	; (751c <AvailableMetersPanel_new@@Base+0x170>)
    73de:	add	r3, pc
    73e0:	add	r1, pc
    73e2:	mov	r4, r0
    73e4:	str	r0, [sp, #20]
    73e6:	ldr	r0, [pc, #312]	; (7520 <AvailableMetersPanel_new@@Base+0x174>)
    73e8:	str	r3, [r4, #0]
    73ea:	add	r0, pc
    73ec:	bl	91d4 <FunctionBar_newEnterEsc@@Base>
    73f0:	ldr	r1, [pc, #304]	; (7524 <AvailableMetersPanel_new@@Base+0x178>)
    73f2:	movs	r3, #1
    73f4:	mov	r2, r0
    73f6:	strd	r3, r2, [sp, #8]
    73fa:	ldr	r1, [r5, r1]
    73fc:	mov	r2, r3
    73fe:	mov	r0, r4
    7400:	mov	r6, r1
    7402:	mov	r1, r3
    7404:	strd	r3, r6, [sp]
    7408:	bl	b130 <Panel_init@@Base>
    740c:	movw	r0, #9904	; 0x26b0
    7410:	movw	ip, #9908	; 0x26b4
    7414:	movw	r1, #9912	; 0x26b8
    7418:	str.w	r9, [r4, r0]
    741c:	movw	r2, #9916	; 0x26bc
    7420:	str.w	r8, [r4, ip]
    7424:	movw	r3, #9900	; 0x26ac
    7428:	str	r7, [r4, r1]
    742a:	mov	r0, r4
    742c:	ldr	r1, [sp, #16]
    742e:	str	r1, [r4, r2]
    7430:	ldr	r1, [pc, #244]	; (7528 <AvailableMetersPanel_new@@Base+0x17c>)
    7432:	str.w	fp, [r4, r3]
    7436:	add	r1, pc
    7438:	bl	b22c <Panel_setHeader@@Base>
    743c:	ldr	r3, [pc, #236]	; (752c <AvailableMetersPanel_new@@Base+0x180>)
    743e:	ldr	r7, [r5, r3]
    7440:	ldr	r3, [r7, #4]
    7442:	cbz	r3, 746e <AvailableMetersPanel_new@@Base+0xc2>
    7444:	adds	r7, #8
    7446:	mov.w	r6, #65536	; 0x10000
    744a:	b.n	7464 <AvailableMetersPanel_new@@Base+0xb8>
    744c:	mov	r1, r6
    744e:	add.w	r6, r6, #65536	; 0x10000
    7452:	bl	9b90 <ListItem_new@@Base>
    7456:	mov	r1, r0
    7458:	mov	r0, r4
    745a:	bl	b294 <Panel_add@@Base>
    745e:	ldr.w	r3, [r7], #4
    7462:	cbz	r3, 746e <AvailableMetersPanel_new@@Base+0xc2>
    7464:	ldr	r0, [r3, #64]	; 0x40
    7466:	cmp	r0, #0
    7468:	bne.n	744c <AvailableMetersPanel_new@@Base+0xa0>
    746a:	ldr	r0, [r3, #56]	; 0x38
    746c:	b.n	744c <AvailableMetersPanel_new@@Base+0xa0>
    746e:	ldr.w	r8, [sl, #128]	; 0x80
    7472:	cmp.w	r8, #1
    7476:	ble.n	74e0 <AvailableMetersPanel_new@@Base+0x134>
    7478:	ldr	r0, [pc, #180]	; (7530 <AvailableMetersPanel_new@@Base+0x184>)
    747a:	movs	r1, #0
    747c:	ldr.w	r9, [pc, #180]	; 7534 <AvailableMetersPanel_new@@Base+0x188>
    7480:	add	r7, sp, #24
    7482:	add	r0, pc
    7484:	movs	r6, #1
    7486:	bl	9b90 <ListItem_new@@Base>
    748a:	add	r9, pc
    748c:	mov	r1, r0
    748e:	mov	r0, r4
    7490:	bl	b294 <Panel_add@@Base>
    7494:	ldr	r3, [pc, #160]	; (7538 <AvailableMetersPanel_new@@Base+0x18c>)
    7496:	ldr	r5, [r5, r3]
    7498:	str	r6, [sp, #8]
    749a:	movs	r3, #50	; 0x32
    749c:	ldr	r2, [r5, #56]	; 0x38
    749e:	mov	r1, r3
    74a0:	mov	r0, r7
    74a2:	str.w	r9, [sp]
    74a6:	str	r2, [sp, #4]
    74a8:	movs	r2, #1
    74aa:	blx	6c78 <__snprintf_chk@plt>
    74ae:	cmp	r0, #49	; 0x31
    74b0:	bhi.n	74f4 <AvailableMetersPanel_new@@Base+0x148>
    74b2:	mov	r1, r6
    74b4:	mov	r0, r7
    74b6:	bl	9b90 <ListItem_new@@Base>
    74ba:	adds	r6, #1
    74bc:	mov	r1, r0
    74be:	mov	r0, r4
    74c0:	bl	b294 <Panel_add@@Base>
    74c4:	cmp	r8, r6
    74c6:	bge.n	7498 <AvailableMetersPanel_new@@Base+0xec>
    74c8:	ldr	r2, [pc, #112]	; (753c <AvailableMetersPanel_new@@Base+0x190>)
    74ca:	ldr	r3, [pc, #68]	; (7510 <AvailableMetersPanel_new@@Base+0x164>)
    74cc:	add	r2, pc
    74ce:	ldr	r3, [r2, r3]
    74d0:	ldr	r2, [r3, #0]
    74d2:	ldr	r3, [sp, #76]	; 0x4c
    74d4:	eors	r2, r3
    74d6:	bne.n	7506 <AvailableMetersPanel_new@@Base+0x15a>
    74d8:	mov	r0, r4
    74da:	add	sp, #84	; 0x54
    74dc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    74e0:	ldr	r0, [pc, #92]	; (7540 <AvailableMetersPanel_new@@Base+0x194>)
    74e2:	movs	r1, #1
    74e4:	add	r0, pc
    74e6:	bl	9b90 <ListItem_new@@Base>
    74ea:	mov	r1, r0
    74ec:	mov	r0, r4
    74ee:	bl	b294 <Panel_add@@Base>
    74f2:	b.n	74c8 <AvailableMetersPanel_new@@Base+0x11c>
    74f4:	movs	r0, #1
    74f6:	blx	6730 <curs_set@plt>
    74fa:	blx	6c48 <endwin@plt+0x4>
    74fe:	movs	r1, #0
    7500:	movs	r0, #1
    7502:	blx	683c <err@plt>
    7506:	blx	67d0 <__stack_chk_fail@plt>
    750a:	nop
    750c:	cmp	r1, #80	; 0x50
    750e:	movs	r2, r0
    7510:	lsls	r0, r0, #9
    7512:	movs	r0, r0
    7514:	cmp	r1, #50	; 0x32
    7516:	movs	r2, r0
    7518:	cmp	r4, #38	; 0x26
    751a:	movs	r2, r0
    751c:	orns	r0, ip, r0
    7520:	orns	r0, sl, r0
    7524:	lsls	r0, r1, #10
    7526:	movs	r0, r0
    7528:	bics.w	r0, r6, r0
    752c:	lsls	r0, r1, #11
    752e:	movs	r0, r0
    7530:	ldrd	r0, r0, [lr]
    7534:	and.w	r0, r2, r0
    7538:	lsls	r4, r7, #8
    753a:	movs	r0, r0
    753c:	cmp	r0, #64	; 0x40
    753e:	movs	r2, r0
    7540:	asrs	r4, r0, #8
    7542:	movs	r1, r0
    7544:	push	{r4, lr}
    7546:	mov	r4, r0
    7548:	bl	b1e0 <Panel_done@@Base>
    754c:	mov	r0, r4
    754e:	ldmia.w	sp!, {r4, lr}
    7552:	b.w	6754 <free@plt>
    7556:	nop

00007558 <CategoriesPanel_makeMetersPage@@Base>:
    7558:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    755c:	movw	r9, #9908	; 0x26b4
    7560:	ldr.w	r2, [r0, r9]
    7564:	movw	r5, #9900	; 0x26ac
    7568:	ldr	r1, [pc, #132]	; (75f0 <CategoriesPanel_makeMetersPage@@Base+0x98>)
    756a:	movw	r8, #9904	; 0x26b0
    756e:	mov	r4, r0
    7570:	sub	sp, #12
    7572:	ldr	r2, [r2, #0]
    7574:	add	r1, pc
    7576:	ldr	r3, [r0, r5]
    7578:	ldr.w	r0, [r0, r8]
    757c:	ldr	r2, [r2, #0]
    757e:	bl	af30 <MetersPanel_new@@Base>
    7582:	ldr.w	r2, [r4, r9]
    7586:	ldr	r1, [pc, #108]	; (75f4 <CategoriesPanel_makeMetersPage@@Base+0x9c>)
    7588:	ldr	r3, [r4, r5]
    758a:	ldr	r2, [r2, #0]
    758c:	add	r1, pc
    758e:	ldr	r2, [r2, #4]
    7590:	mov	r7, r0
    7592:	ldr.w	r0, [r4, r8]
    7596:	bl	af30 <MetersPanel_new@@Base>
    759a:	movw	r2, #9912	; 0x26b8
    759e:	ldr.w	lr, [r4, r2]
    75a2:	movw	r3, #9916	; 0x26bc
    75a6:	ldr.w	ip, [r4, r5]
    75aa:	ldr.w	r1, [r4, r9]
    75ae:	mov	r6, r0
    75b0:	ldr.w	r0, [r4, r8]
    75b4:	str	r6, [r7, r3]
    75b6:	mov	r3, r6
    75b8:	str	r7, [r6, r2]
    75ba:	mov	r2, r7
    75bc:	strd	ip, lr, [sp]
    75c0:	bl	73ac <AvailableMetersPanel_new@@Base>
    75c4:	mov	r1, r7
    75c6:	movs	r2, #20
    75c8:	mov	r3, r0
    75ca:	ldr	r0, [r4, r5]
    75cc:	mov	r7, r3
    75ce:	bl	d510 <ScreenManager_add@@Base>
    75d2:	ldr	r0, [r4, r5]
    75d4:	mov	r1, r6
    75d6:	movs	r2, #20
    75d8:	bl	d510 <ScreenManager_add@@Base>
    75dc:	ldr	r0, [r4, r5]
    75de:	mov	r1, r7
    75e0:	mov.w	r2, #4294967295	; 0xffffffff
    75e4:	add	sp, #12
    75e6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    75ea:	b.w	d510 <ScreenManager_add@@Base>
    75ee:	nop
    75f0:	stmdb	r0!, {}
    75f4:	ldmdb	r4, {}
    75f8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75fc:	sub	sp, #8
    75fe:	mov	r4, r1
    7600:	mov	r7, r0
    7602:	bl	b344 <Panel_getSelectedIndex@@Base>
    7606:	cmp	r4, #14
    7608:	mov	r8, r0
    760a:	beq.n	765a <CategoriesPanel_makeMetersPage@@Base+0x102>
    760c:	bgt.n	7646 <CategoriesPanel_makeMetersPage@@Base+0xee>
    760e:	adds	r2, r4, #1
    7610:	bne.n	7682 <CategoriesPanel_makeMetersPage@@Base+0x12a>
    7612:	movw	r3, #9900	; 0x26ac
    7616:	ldr	r0, [r7, r3]
    7618:	bl	d50c <ScreenManager_size@@Base>
    761c:	cmp	r0, #1
    761e:	mov	r5, r0
    7620:	ble.n	7638 <CategoriesPanel_makeMetersPage@@Base+0xe0>
    7622:	add.w	r6, r7, #9856	; 0x2680
    7626:	movs	r4, #1
    7628:	adds	r6, #44	; 0x2c
    762a:	ldr	r0, [r6, #0]
    762c:	adds	r4, #1
    762e:	movs	r1, #1
    7630:	bl	d5a8 <ScreenManager_remove@@Base>
    7634:	cmp	r5, r4
    7636:	bne.n	762a <CategoriesPanel_makeMetersPage@@Base+0xd2>
    7638:	cmp.w	r8, #3
    763c:	bhi.n	772c <CategoriesPanel_makeMetersPage@@Base+0x1d4>
    763e:	tbb	[pc, r8]
    7642:	ldrh	r3, [r2, r1]
    7644:	subs	r1, #108	; 0x6c
    7646:	cmp.w	r4, #262	; 0x106
    764a:	beq.n	765a <CategoriesPanel_makeMetersPage@@Base+0x102>
    764c:	ble.n	7672 <CategoriesPanel_makeMetersPage@@Base+0x11a>
    764e:	cmp.w	r4, #340	; 0x154
    7652:	blt.n	76a6 <CategoriesPanel_makeMetersPage@@Base+0x14e>
    7654:	cmp.w	r4, #360	; 0x168
    7658:	bne.n	76ac <CategoriesPanel_makeMetersPage@@Base+0x154>
    765a:	mov	r1, r4
    765c:	mov	r0, r7
    765e:	bl	b7ec <Panel_onKey@@Base>
    7662:	mov	r0, r7
    7664:	bl	b344 <Panel_getSelectedIndex@@Base>
    7668:	cmp	r8, r0
    766a:	it	ne
    766c:	movne	r8, r0
    766e:	bne.n	7612 <CategoriesPanel_makeMetersPage@@Base+0xba>
    7670:	b.n	76ac <CategoriesPanel_makeMetersPage@@Base+0x154>
    7672:	cmp	r4, #16
    7674:	beq.n	765a <CategoriesPanel_makeMetersPage@@Base+0x102>
    7676:	sub.w	r3, r4, #258	; 0x102
    767a:	cmp	r3, #1
    767c:	bls.n	765a <CategoriesPanel_makeMetersPage@@Base+0x102>
    767e:	cmp	r4, #254	; 0xfe
    7680:	bgt.n	76ac <CategoriesPanel_makeMetersPage@@Base+0x154>
    7682:	blx	69d0 <__ctype_b_loc@plt>
    7686:	ldr	r3, [r0, #0]
    7688:	ldrh.w	r3, [r3, r4, lsl #1]
    768c:	lsls	r3, r3, #21
    768e:	bpl.n	76ac <CategoriesPanel_makeMetersPage@@Base+0x154>
    7690:	mov	r1, r4
    7692:	mov	r0, r7
    7694:	bl	b030 <Panel_selectByTyping@@Base>
    7698:	cmp	r0, #4
    769a:	beq.n	76ac <CategoriesPanel_makeMetersPage@@Base+0x154>
    769c:	cmp	r0, #1
    769e:	beq.n	7612 <CategoriesPanel_makeMetersPage@@Base+0xba>
    76a0:	add	sp, #8
    76a2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76a6:	cmp.w	r4, #338	; 0x152
    76aa:	bge.n	765a <CategoriesPanel_makeMetersPage@@Base+0x102>
    76ac:	movs	r0, #2
    76ae:	add	sp, #8
    76b0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76b4:	movw	r3, #9904	; 0x26b0
    76b8:	movw	r5, #9900	; 0x26ac
    76bc:	ldr	r0, [r7, r3]
    76be:	bl	7b48 <ColumnsPanel_new@@Base>
    76c2:	str	r0, [sp, #4]
    76c4:	bl	fa0c <AvailableColumnsPanel_new@@Base>
    76c8:	ldr	r1, [sp, #4]
    76ca:	movs	r2, #20
    76cc:	mov	r4, r0
    76ce:	ldr	r0, [r7, r5]
    76d0:	bl	d510 <ScreenManager_add@@Base>
    76d4:	ldr	r0, [r7, r5]
    76d6:	mov	r1, r4
    76d8:	mov.w	r2, #4294967295	; 0xffffffff
    76dc:	bl	d510 <ScreenManager_add@@Base>
    76e0:	movs	r0, #1
    76e2:	add	sp, #8
    76e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76e8:	mov	r0, r7
    76ea:	bl	7558 <CategoriesPanel_makeMetersPage@@Base>
    76ee:	movs	r0, #1
    76f0:	add	sp, #8
    76f2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    76f6:	movw	r4, #9900	; 0x26ac
    76fa:	movw	r3, #9904	; 0x26b0
    76fe:	ldr	r1, [r7, r4]
    7700:	ldr	r0, [r7, r3]
    7702:	bl	8f00 <DisplayOptionsPanel_new@@Base>
    7706:	mov	r1, r0
    7708:	mov.w	r2, #4294967295	; 0xffffffff
    770c:	ldr	r0, [r7, r4]
    770e:	bl	d510 <ScreenManager_add@@Base>
    7712:	movs	r0, #1
    7714:	add	sp, #8
    7716:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    771a:	movw	r4, #9900	; 0x26ac
    771e:	movw	r3, #9904	; 0x26b0
    7722:	ldr	r1, [r7, r4]
    7724:	ldr	r0, [r7, r3]
    7726:	bl	7a88 <ColorsPanel_new@@Base>
    772a:	b.n	7706 <CategoriesPanel_makeMetersPage@@Base+0x1ae>
    772c:	movs	r0, #1
    772e:	b.n	76a0 <CategoriesPanel_makeMetersPage@@Base+0x148>

00007730 <CategoriesPanel_new@@Base>:
    7730:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7734:	mov	r9, r0
    7736:	sub	sp, #20
    7738:	movw	r0, #9916	; 0x26bc
    773c:	mov	r8, r1
    773e:	mov	r7, r2
    7740:	mov	r6, r3
    7742:	bl	11d84 <xMalloc@@Base>
    7746:	ldr	r3, [pc, #168]	; (77f0 <CategoriesPanel_new@@Base+0xc0>)
    7748:	movs	r2, #0
    774a:	mov	r1, r2
    774c:	ldr	r5, [pc, #164]	; (77f4 <CategoriesPanel_new@@Base+0xc4>)
    774e:	add	r3, pc
    7750:	add	r5, pc
    7752:	mov	r4, r0
    7754:	ldr	r0, [pc, #160]	; (77f8 <CategoriesPanel_new@@Base+0xc8>)
    7756:	str	r3, [r4, #0]
    7758:	add	r0, pc
    775a:	bl	90fc <FunctionBar_new@@Base>
    775e:	ldr	r2, [pc, #156]	; (77fc <CategoriesPanel_new@@Base+0xcc>)
    7760:	movs	r3, #1
    7762:	mov	r1, r0
    7764:	strd	r3, r1, [sp, #8]
    7768:	ldr	r5, [r5, r2]
    776a:	mov	r0, r4
    776c:	mov	r2, r3
    776e:	mov	r1, r3
    7770:	str	r3, [sp, #0]
    7772:	str	r5, [sp, #4]
    7774:	bl	b130 <Panel_init@@Base>
    7778:	movw	r0, #9900	; 0x26ac
    777c:	movw	r1, #9904	; 0x26b0
    7780:	str.w	r9, [r4, r0]
    7784:	str.w	r8, [r4, r1]
    7788:	movw	r2, #9908	; 0x26b4
    778c:	ldr	r1, [pc, #112]	; (7800 <CategoriesPanel_new@@Base+0xd0>)
    778e:	movw	r3, #9912	; 0x26b8
    7792:	str	r7, [r4, r2]
    7794:	mov	r0, r4
    7796:	str	r6, [r4, r3]
    7798:	add	r1, pc
    779a:	bl	b22c <Panel_setHeader@@Base>
    779e:	ldr	r0, [pc, #100]	; (7804 <CategoriesPanel_new@@Base+0xd4>)
    77a0:	movs	r1, #0
    77a2:	add	r0, pc
    77a4:	bl	9b90 <ListItem_new@@Base>
    77a8:	mov	r1, r0
    77aa:	mov	r0, r4
    77ac:	bl	b294 <Panel_add@@Base>
    77b0:	ldr	r0, [pc, #84]	; (7808 <CategoriesPanel_new@@Base+0xd8>)
    77b2:	movs	r1, #0
    77b4:	add	r0, pc
    77b6:	bl	9b90 <ListItem_new@@Base>
    77ba:	mov	r1, r0
    77bc:	mov	r0, r4
    77be:	bl	b294 <Panel_add@@Base>
    77c2:	ldr	r0, [pc, #72]	; (780c <CategoriesPanel_new@@Base+0xdc>)
    77c4:	movs	r1, #0
    77c6:	add	r0, pc
    77c8:	bl	9b90 <ListItem_new@@Base>
    77cc:	mov	r1, r0
    77ce:	mov	r0, r4
    77d0:	bl	b294 <Panel_add@@Base>
    77d4:	ldr	r0, [pc, #56]	; (7810 <CategoriesPanel_new@@Base+0xe0>)
    77d6:	movs	r1, #0
    77d8:	add	r0, pc
    77da:	bl	9b90 <ListItem_new@@Base>
    77de:	mov	r1, r0
    77e0:	mov	r0, r4
    77e2:	bl	b294 <Panel_add@@Base>
    77e6:	mov	r0, r4
    77e8:	add	sp, #20
    77ea:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    77ee:	nop
    77f0:	cmp	r0, #202	; 0xca
    77f2:	movs	r2, r0
    77f4:	movs	r5, #188	; 0xbc
    77f6:	movs	r2, r0
    77f8:	subs	r0, r7, #1
    77fa:	movs	r2, r0
    77fc:	lsls	r0, r1, #10
    77fe:	movs	r0, r0
    7800:	b.n	7634 <CategoriesPanel_makeMetersPage@@Base+0xdc>
    7802:	movs	r0, r0
    7804:	b.n	7634 <CategoriesPanel_makeMetersPage@@Base+0xdc>
    7806:	movs	r0, r0
    7808:	b.n	7624 <CategoriesPanel_makeMetersPage@@Base+0xcc>
    780a:	movs	r0, r0
    780c:	b.n	7624 <CategoriesPanel_makeMetersPage@@Base+0xcc>
    780e:	movs	r0, r0
    7810:	b.n	7614 <CategoriesPanel_makeMetersPage@@Base+0xbc>
    7812:	movs	r0, r0
    7814:	push	{r4, lr}
    7816:	mov	r4, r0
    7818:	ldr	r0, [r0, #4]
    781a:	blx	6758 <free@plt+0x4>
    781e:	mov	r0, r4
    7820:	ldmia.w	sp!, {r4, lr}
    7824:	b.w	6754 <free@plt>
    7828:	ldr	r3, [pc, #100]	; (7890 <CategoriesPanel_new@@Base+0x160>)
    782a:	push	{r4, r5, r6, lr}
    782c:	add	r3, pc
    782e:	ldr	r6, [pc, #100]	; (7894 <CategoriesPanel_new@@Base+0x164>)
    7830:	mov	r5, r0
    7832:	ldr	r2, [pc, #100]	; (7898 <CategoriesPanel_new@@Base+0x168>)
    7834:	mov	r0, r1
    7836:	mov	r4, r1
    7838:	ldr	r6, [r3, r6]
    783a:	add	r2, pc
    783c:	ldr	r3, [r6, #0]
    783e:	ldr.w	r1, [r3, #168]	; 0xa8
    7842:	bl	d3b8 <RichString_write@@Base>
    7846:	ldr	r3, [r5, #8]
    7848:	cbz	r3, 788c <CategoriesPanel_new@@Base+0x15c>
    784a:	ldrb	r3, [r3, #0]
    784c:	ldr	r2, [r6, #0]
    784e:	ldr.w	r1, [r2, #172]	; 0xac
    7852:	cbz	r3, 7880 <CategoriesPanel_new@@Base+0x150>
    7854:	ldr	r2, [pc, #68]	; (789c <CategoriesPanel_new@@Base+0x16c>)
    7856:	mov	r0, r4
    7858:	add	r2, pc
    785a:	bl	d1e4 <RichString_append@@Base>
    785e:	ldr	r3, [r6, #0]
    7860:	mov	r0, r4
    7862:	ldr	r2, [pc, #60]	; (78a0 <CategoriesPanel_new@@Base+0x170>)
    7864:	ldr.w	r1, [r3, #168]	; 0xa8
    7868:	add	r2, pc
    786a:	bl	d1e4 <RichString_append@@Base>
    786e:	ldr	r3, [r6, #0]
    7870:	ldr	r2, [r5, #4]
    7872:	mov	r0, r4
    7874:	ldmia.w	sp!, {r4, r5, r6, lr}
    7878:	ldr.w	r1, [r3, #176]	; 0xb0
    787c:	b.w	d1e4 <RichString_append@@Base>
    7880:	ldr	r2, [pc, #32]	; (78a4 <CategoriesPanel_new@@Base+0x174>)
    7882:	mov	r0, r4
    7884:	add	r2, pc
    7886:	bl	d1e4 <RichString_append@@Base>
    788a:	b.n	785e <CategoriesPanel_new@@Base+0x12e>
    788c:	ldrb	r3, [r5, #12]
    788e:	b.n	784c <CategoriesPanel_new@@Base+0x11c>
    7890:	movs	r4, #224	; 0xe0
    7892:	movs	r2, r0
    7894:	lsls	r0, r6, #9
    7896:	movs	r0, r0
    7898:	b.n	75f8 <CategoriesPanel_makeMetersPage@@Base+0xa0>
    789a:	movs	r0, r0
    789c:	ldmdb	ip, {}
    78a0:	b.n	75ac <CategoriesPanel_makeMetersPage@@Base+0x54>
    78a2:	movs	r0, r0
    78a4:	lsls	r0, r1, #6
    78a6:	movs	r1, r0

000078a8 <CheckItem_newByRef@@Base>:
    78a8:	push	{r3, r4, r5, lr}
    78aa:	mov	r5, r0
    78ac:	movs	r0, #16
    78ae:	mov	r4, r1
    78b0:	bl	11d84 <xMalloc@@Base>
    78b4:	ldr	r2, [pc, #12]	; (78c4 <CheckItem_newByRef@@Base+0x1c>)
    78b6:	movs	r1, #0
    78b8:	add	r2, pc
    78ba:	strd	r5, r4, [r0, #4]
    78be:	str	r2, [r0, #0]
    78c0:	strb	r1, [r0, #12]
    78c2:	pop	{r3, r4, r5, pc}
    78c4:	movs	r7, #116	; 0x74
    78c6:	movs	r2, r0

000078c8 <CheckItem_newByVal@@Base>:
    78c8:	push	{r3, r4, r5, lr}
    78ca:	mov	r5, r0
    78cc:	movs	r0, #16
    78ce:	mov	r4, r1
    78d0:	bl	11d84 <xMalloc@@Base>
    78d4:	ldr	r2, [pc, #12]	; (78e4 <CheckItem_newByVal@@Base+0x1c>)
    78d6:	movs	r1, #0
    78d8:	add	r2, pc
    78da:	str	r5, [r0, #4]
    78dc:	strb	r4, [r0, #12]
    78de:	str	r2, [r0, #0]
    78e0:	str	r1, [r0, #8]
    78e2:	pop	{r3, r4, r5, pc}
    78e4:	movs	r7, #84	; 0x54
    78e6:	movs	r2, r0

000078e8 <CheckItem_set@@Base>:
    78e8:	ldr	r3, [r0, #8]
    78ea:	cbz	r3, 78f0 <CheckItem_set@@Base+0x8>
    78ec:	strb	r1, [r3, #0]
    78ee:	bx	lr
    78f0:	strb	r1, [r0, #12]
    78f2:	bx	lr

000078f4 <CheckItem_get@@Base>:
    78f4:	ldr	r3, [r0, #8]
    78f6:	cbz	r3, 78fc <CheckItem_get@@Base+0x8>
    78f8:	ldrb	r0, [r3, #0]
    78fa:	bx	lr
    78fc:	ldrb	r0, [r0, #12]
    78fe:	bx	lr
    7900:	push	{r4, r5, r6, r7, lr}
    7902:	mov	r6, r2
    7904:	ldr	r2, [pc, #100]	; (796c <CheckItem_get@@Base+0x78>)
    7906:	sub	sp, #60	; 0x3c
    7908:	ldr	r3, [pc, #100]	; (7970 <CheckItem_get@@Base+0x7c>)
    790a:	mov	r7, r0
    790c:	add	r2, pc
    790e:	movs	r0, #0
    7910:	mov	r5, r1
    7912:	ldr	r3, [r2, r3]
    7914:	ldr	r3, [r3, #0]
    7916:	str	r3, [sp, #52]	; 0x34
    7918:	mov.w	r3, #0
    791c:	blx	67ac <time@plt>
    7920:	add	r1, sp, #8
    7922:	mov	r3, r0
    7924:	add	r0, sp, #4
    7926:	str	r3, [sp, #4]
    7928:	blx	6824 <localtime_r@plt>
    792c:	mov	r1, r6
    792e:	mov.w	ip, #60	; 0x3c
    7932:	ldr	r7, [r7, #32]
    7934:	ldr	r2, [pc, #60]	; (7974 <CheckItem_get@@Base+0x80>)
    7936:	add	r2, pc
    7938:	ldr	r4, [r0, #8]
    793a:	mov	r3, r0
    793c:	ldr	r6, [r0, #4]
    793e:	mov	r0, r5
    7940:	mla	r4, ip, r4, r6
    7944:	vmov	s15, r4
    7948:	vcvt.f64.s32	d7, s15
    794c:	vstr	d7, [r7]
    7950:	blx	696c <strftime@plt>
    7954:	ldr	r2, [pc, #32]	; (7978 <CheckItem_get@@Base+0x84>)
    7956:	ldr	r3, [pc, #24]	; (7970 <CheckItem_get@@Base+0x7c>)
    7958:	add	r2, pc
    795a:	ldr	r3, [r2, r3]
    795c:	ldr	r2, [r3, #0]
    795e:	ldr	r3, [sp, #52]	; 0x34
    7960:	eors	r2, r3
    7962:	bne.n	7968 <CheckItem_get@@Base+0x74>
    7964:	add	sp, #60	; 0x3c
    7966:	pop	{r4, r5, r6, r7, pc}
    7968:	blx	67d0 <__stack_chk_fail@plt>
    796c:	movs	r4, #0
    796e:	movs	r2, r0
    7970:	lsls	r0, r0, #9
    7972:	movs	r0, r0
    7974:	b.n	74ec <AvailableMetersPanel_new@@Base+0x140>
    7976:	movs	r0, r0
    7978:	movs	r3, #180	; 0xb4
    797a:	movs	r2, r0
    797c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7980:	sub	sp, #12
    7982:	mov	r4, r1
    7984:	mov	r5, r0
    7986:	bl	b344 <Panel_getSelectedIndex@@Base>
    798a:	ldr	r7, [pc, #216]	; (7a64 <CheckItem_get@@Base+0x170>)
    798c:	cmp.w	r4, #286	; 0x11e
    7990:	add	r7, pc
    7992:	mov	r6, r0
    7994:	beq.n	79c6 <CheckItem_get@@Base+0xd2>
    7996:	bgt.n	79b6 <CheckItem_get@@Base+0xc2>
    7998:	sub.w	r2, r4, #10
    799c:	cmp	r2, #22
    799e:	bhi.n	79ae <CheckItem_get@@Base+0xba>
    79a0:	movs	r1, #1
    79a2:	movs	r3, #9
    79a4:	lsls	r1, r2
    79a6:	movt	r3, #64	; 0x40
    79aa:	ands	r3, r1
    79ac:	cbnz	r3, 79c6 <CheckItem_get@@Base+0xd2>
    79ae:	movs	r0, #2
    79b0:	add	sp, #12
    79b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    79b6:	movw	r3, #343	; 0x157
    79ba:	cmp	r4, r3
    79bc:	beq.n	79c6 <CheckItem_get@@Base+0xd2>
    79be:	movw	r3, #409	; 0x199
    79c2:	cmp	r4, r3
    79c4:	bne.n	79ae <CheckItem_get@@Base+0xba>
    79c6:	ldr.w	r8, [pc, #160]	; 7a68 <CheckItem_get@@Base+0x174>
    79ca:	movs	r4, #0
    79cc:	add	r8, pc
    79ce:	mov	r1, r4
    79d0:	mov	r0, r5
    79d2:	bl	b2c4 <Panel_get@@Base>
    79d6:	movs	r1, #0
    79d8:	bl	78e8 <CheckItem_set@@Base>
    79dc:	ldr.w	r3, [r8, #4]!
    79e0:	adds	r4, #1
    79e2:	cmp	r3, #0
    79e4:	bne.n	79ce <CheckItem_get@@Base+0xda>
    79e6:	mov	r1, r6
    79e8:	mov	r0, r5
    79ea:	bl	b2c4 <Panel_get@@Base>
    79ee:	movs	r1, #1
    79f0:	bl	78e8 <CheckItem_set@@Base>
    79f4:	movw	r3, #9900	; 0x26ac
    79f8:	ldr	r3, [r5, r3]
    79fa:	movw	r8, #9904	; 0x26b0
    79fe:	ldr.w	r2, [r5, r8]
    7a02:	mov	r0, r6
    7a04:	movs	r4, #1
    7a06:	str	r6, [r3, #36]	; 0x24
    7a08:	strb.w	r4, [r3, #71]	; 0x47
    7a0c:	ldr	r6, [r2, #28]
    7a0e:	bl	8674 <CRT_setColors@@Base>
    7a12:	ldr	r3, [pc, #88]	; (7a6c <CheckItem_get@@Base+0x178>)
    7a14:	ldr	r3, [r7, r3]
    7a16:	ldr	r0, [r3, #0]
    7a18:	blx	6c20 <wclear@plt>
    7a1c:	ldr.w	r3, [r5, r8]
    7a20:	mov	r0, r6
    7a22:	ldr	r3, [r3, #20]
    7a24:	ldr	r3, [r3, #0]
    7a26:	ldr.w	r9, [r3]
    7a2a:	bl	9964 <Header_draw@@Base>
    7a2e:	ldr	r3, [pc, #64]	; (7a70 <CheckItem_get@@Base+0x17c>)
    7a30:	add.w	r0, r5, #60	; 0x3c
    7a34:	ldr	r7, [r7, r3]
    7a36:	ldr	r3, [r7, #0]
    7a38:	ldr	r1, [r3, #20]
    7a3a:	bl	d1bc <RichString_setAttr@@Base>
    7a3e:	ldr	r3, [r7, #0]
    7a40:	add.w	r0, r9, #60	; 0x3c
    7a44:	ldr	r1, [r3, #24]
    7a46:	bl	d1bc <RichString_setAttr@@Base>
    7a4a:	ldr.w	r0, [r5, r8]
    7a4e:	ldr	r2, [r6, #20]
    7a50:	ldr	r5, [r0, #12]
    7a52:	ldr	r3, [r0, #8]
    7a54:	ldr	r1, [r0, #0]
    7a56:	str	r5, [sp, #0]
    7a58:	bl	d5bc <ScreenManager_resize@@Base>
    7a5c:	mov	r0, r4
    7a5e:	add	sp, #12
    7a60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    7a64:	movs	r3, #124	; 0x7c
    7a66:	movs	r2, r0
    7a68:	adds	r0, r6, #0
    7a6a:	movs	r2, r0
    7a6c:	lsls	r4, r5, #9
    7a6e:	movs	r0, r0
    7a70:	lsls	r0, r6, #9
    7a72:	movs	r0, r0
    7a74:	push	{r4, lr}
    7a76:	mov	r4, r0
    7a78:	bl	b1e0 <Panel_done@@Base>
    7a7c:	mov	r0, r4
    7a7e:	ldmia.w	sp!, {r4, lr}
    7a82:	b.w	6754 <free@plt>
    7a86:	nop

00007a88 <ColorsPanel_new@@Base>:
    7a88:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a8c:	mov	r7, r0
    7a8e:	sub	sp, #16
    7a90:	movw	r0, #9908	; 0x26b4
    7a94:	mov	r8, r1
    7a96:	bl	11d84 <xMalloc@@Base>
    7a9a:	ldr	r4, [pc, #128]	; (7b1c <ColorsPanel_new@@Base+0x94>)
    7a9c:	movs	r2, #0
    7a9e:	ldr	r3, [pc, #128]	; (7b20 <ColorsPanel_new@@Base+0x98>)
    7aa0:	mov	r1, r2
    7aa2:	add	r4, pc
    7aa4:	ldr	r5, [pc, #124]	; (7b24 <ColorsPanel_new@@Base+0x9c>)
    7aa6:	add	r3, pc
    7aa8:	add	r5, pc
    7aaa:	mov	r6, r0
    7aac:	str	r3, [r0, #0]
    7aae:	add.w	r0, r4, #32
    7ab2:	bl	90fc <FunctionBar_new@@Base>
    7ab6:	ldr	r1, [pc, #112]	; (7b28 <ColorsPanel_new@@Base+0xa0>)
    7ab8:	movs	r3, #1
    7aba:	mov	r2, r5
    7abc:	str	r3, [sp, #8]
    7abe:	mov	r2, r3
    7ac0:	str	r0, [sp, #12]
    7ac2:	mov	r0, r6
    7ac4:	ldr	r5, [r5, r1]
    7ac6:	mov	r1, r3
    7ac8:	str	r3, [sp, #0]
    7aca:	str	r5, [sp, #4]
    7acc:	bl	b130 <Panel_init@@Base>
    7ad0:	ldr	r1, [pc, #88]	; (7b2c <ColorsPanel_new@@Base+0xa4>)
    7ad2:	movw	r2, #9900	; 0x26ac
    7ad6:	movw	r3, #9904	; 0x26b0
    7ada:	mov	r0, r6
    7adc:	str	r7, [r6, r2]
    7ade:	add	r1, pc
    7ae0:	str.w	r8, [r6, r3]
    7ae4:	bl	b22c <Panel_setHeader@@Base>
    7ae8:	ldr	r0, [pc, #68]	; (7b30 <ColorsPanel_new@@Base+0xa8>)
    7aea:	add	r0, pc
    7aec:	bl	11de4 <xStrdup@@Base>
    7af0:	movs	r1, #0
    7af2:	bl	78c8 <CheckItem_newByVal@@Base>
    7af6:	mov	r1, r0
    7af8:	mov	r0, r6
    7afa:	bl	b294 <Panel_add@@Base>
    7afe:	ldr.w	r0, [r4, #4]!
    7b02:	cmp	r0, #0
    7b04:	bne.n	7aec <ColorsPanel_new@@Base+0x64>
    7b06:	ldr	r1, [r7, #36]	; 0x24
    7b08:	mov	r0, r6
    7b0a:	bl	b2c4 <Panel_get@@Base>
    7b0e:	movs	r1, #1
    7b10:	bl	78e8 <CheckItem_set@@Base>
    7b14:	mov	r0, r6
    7b16:	add	sp, #16
    7b18:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7b1c:	subs	r2, r3, r5
    7b1e:	movs	r2, r0
    7b20:	movs	r5, #230	; 0xe6
    7b22:	movs	r2, r0
    7b24:	movs	r2, #100	; 0x64
    7b26:	movs	r2, r0
    7b28:	lsls	r4, r3, #11
    7b2a:	movs	r0, r0
    7b2c:	b.n	8314 <ColumnsPanel_update@@Base+0x6e0>
    7b2e:	movs	r0, r0
    7b30:	b.n	7378 <_start@@Base+0x21c>
    7b32:	movs	r0, r0
    7b34:	push	{r4, lr}
    7b36:	mov	r4, r0
    7b38:	bl	b1e0 <Panel_done@@Base>
    7b3c:	mov	r0, r4
    7b3e:	ldmia.w	sp!, {r4, lr}
    7b42:	b.w	6754 <free@plt>
    7b46:	nop

00007b48 <ColumnsPanel_new@@Base>:
    7b48:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7b4c:	mov	r4, r0
    7b4e:	sub	sp, #16
    7b50:	movw	r0, #9908	; 0x26b4
    7b54:	bl	11d84 <xMalloc@@Base>
    7b58:	ldr	r3, [pc, #120]	; (7bd4 <ColumnsPanel_new@@Base+0x8c>)
    7b5a:	movs	r2, #0
    7b5c:	ldr	r6, [pc, #120]	; (7bd8 <ColumnsPanel_new@@Base+0x90>)
    7b5e:	add	r3, pc
    7b60:	mov	r1, r2
    7b62:	add	r6, pc
    7b64:	movw	r8, #9900	; 0x26ac
    7b68:	mov	r5, r0
    7b6a:	ldr	r0, [pc, #112]	; (7bdc <ColumnsPanel_new@@Base+0x94>)
    7b6c:	str	r3, [r5, #0]
    7b6e:	add	r0, pc
    7b70:	bl	90fc <FunctionBar_new@@Base>
    7b74:	ldr	r2, [pc, #104]	; (7be0 <ColumnsPanel_new@@Base+0x98>)
    7b76:	movs	r3, #1
    7b78:	mov	r1, r0
    7b7a:	strd	r3, r1, [sp, #8]
    7b7e:	ldr	r7, [r6, r2]
    7b80:	mov	r1, r3
    7b82:	mov	r2, r3
    7b84:	mov	r0, r5
    7b86:	str	r3, [sp, #0]
    7b88:	str	r7, [sp, #4]
    7b8a:	bl	b130 <Panel_init@@Base>
    7b8e:	ldr	r1, [pc, #84]	; (7be4 <ColumnsPanel_new@@Base+0x9c>)
    7b90:	movw	r3, #9904	; 0x26b0
    7b94:	str.w	r4, [r5, r8]
    7b98:	add	r1, pc
    7b9a:	movs	r2, #0
    7b9c:	mov	r0, r5
    7b9e:	strb	r2, [r5, r3]
    7ba0:	bl	b22c <Panel_setHeader@@Base>
    7ba4:	ldr.w	r3, [r5, r8]
    7ba8:	ldr	r4, [r3, #28]
    7baa:	ldr	r1, [r4, #0]
    7bac:	cbz	r1, 7bcc <ColumnsPanel_new@@Base+0x84>
    7bae:	ldr	r3, [pc, #56]	; (7be8 <ColumnsPanel_new@@Base+0xa0>)
    7bb0:	ldr	r6, [r6, r3]
    7bb2:	lsls	r3, r1, #4
    7bb4:	ldr	r0, [r6, r3]
    7bb6:	cbz	r0, 7bc4 <ColumnsPanel_new@@Base+0x7c>
    7bb8:	bl	9b90 <ListItem_new@@Base>
    7bbc:	mov	r1, r0
    7bbe:	mov	r0, r5
    7bc0:	bl	b294 <Panel_add@@Base>
    7bc4:	ldr.w	r1, [r4, #4]!
    7bc8:	cmp	r1, #0
    7bca:	bne.n	7bb2 <ColumnsPanel_new@@Base+0x6a>
    7bcc:	mov	r0, r5
    7bce:	add	sp, #16
    7bd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7bd4:	movs	r5, #66	; 0x42
    7bd6:	movs	r2, r0
    7bd8:	movs	r1, #170	; 0xaa
    7bda:	movs	r2, r0
    7bdc:	subs	r2, r3, r3
    7bde:	movs	r2, r0
    7be0:	lsls	r0, r1, #10
    7be2:	movs	r0, r0
    7be4:	b.n	8378 <ColumnsPanel_update@@Base+0x744>
    7be6:	movs	r0, r0
    7be8:	lsls	r4, r1, #10
	...

00007bec <ColumnsPanel_fieldNameToIndex@@Base>:
    7bec:	ldr	r2, [pc, #56]	; (7c28 <ColumnsPanel_fieldNameToIndex@@Base+0x3c>)
    7bee:	push	{r3, r4, r5, r6, r7, lr}
    7bf0:	add	r2, pc
    7bf2:	ldr	r3, [pc, #56]	; (7c2c <ColumnsPanel_fieldNameToIndex@@Base+0x40>)
    7bf4:	ldr	r7, [r2, r3]
    7bf6:	ldr	r3, [r7, #0]
    7bf8:	cmp	r3, #0
    7bfa:	ble.n	7c20 <ColumnsPanel_fieldNameToIndex@@Base+0x34>
    7bfc:	ldr	r3, [pc, #48]	; (7c30 <ColumnsPanel_fieldNameToIndex@@Base+0x44>)
    7bfe:	mov	r6, r0
    7c00:	movs	r4, #1
    7c02:	ldr	r5, [r2, r3]
    7c04:	b.n	7c0e <ColumnsPanel_fieldNameToIndex@@Base+0x22>
    7c06:	ldr	r3, [r7, #0]
    7c08:	adds	r4, #1
    7c0a:	cmp	r3, r4
    7c0c:	blt.n	7c20 <ColumnsPanel_fieldNameToIndex@@Base+0x34>
    7c0e:	ldr	r1, [r5, #16]
    7c10:	mov	r0, r6
    7c12:	adds	r5, #16
    7c14:	bl	ea48 <String_eq@@Base>
    7c18:	cmp	r0, #0
    7c1a:	beq.n	7c06 <ColumnsPanel_fieldNameToIndex@@Base+0x1a>
    7c1c:	mov	r0, r4
    7c1e:	pop	{r3, r4, r5, r6, r7, pc}
    7c20:	mov.w	r4, #4294967295	; 0xffffffff
    7c24:	mov	r0, r4
    7c26:	pop	{r3, r4, r5, r6, r7, pc}
    7c28:	movs	r1, #28
    7c2a:	movs	r2, r0
    7c2c:	lsls	r4, r6, #9
    7c2e:	movs	r0, r0
    7c30:	lsls	r4, r1, #10
	...

00007c34 <ColumnsPanel_update@@Base>:
    7c34:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7c38:	mov	r5, r0
    7c3a:	bl	b348 <Panel_size@@Base>
    7c3e:	movw	r4, #9900	; 0x26ac
    7c42:	movs	r3, #1
    7c44:	ldr	r7, [r5, r4]
    7c46:	ldr.w	r8, [pc, #116]	; 7cbc <ColumnsPanel_update@@Base+0x88>
    7c4a:	strb.w	r3, [r7, #71]	; 0x47
    7c4e:	add	r8, pc
    7c50:	add.w	r9, r0, #1
    7c54:	mov	r6, r0
    7c56:	ldr	r0, [r7, #28]
    7c58:	mov.w	r9, r9, lsl #2
    7c5c:	mov	r1, r9
    7c5e:	bl	11dc8 <xRealloc@@Base>
    7c62:	ldr	r3, [r5, r4]
    7c64:	movs	r4, #0
    7c66:	cmp	r6, r4
    7c68:	str	r0, [r7, #28]
    7c6a:	str	r4, [r3, #32]
    7c6c:	ble.n	7cac <ColumnsPanel_update@@Base+0x78>
    7c6e:	ldr	r3, [pc, #80]	; (7cc0 <ColumnsPanel_update@@Base+0x8c>)
    7c70:	add.w	r7, r5, #9856	; 0x2680
    7c74:	adds	r7, #44	; 0x2c
    7c76:	ldr.w	r8, [r8, r3]
    7c7a:	mov	r1, r4
    7c7c:	mov	r0, r5
    7c7e:	bl	b2c4 <Panel_get@@Base>
    7c82:	ldr	r3, [r7, #0]
    7c84:	ldr	r1, [r3, #28]
    7c86:	ldr	r2, [r0, #8]
    7c88:	add.w	r0, r8, r2, lsl #4
    7c8c:	str.w	r2, [r1, r4, lsl #2]
    7c90:	adds	r4, #1
    7c92:	ldr	r2, [r3, #32]
    7c94:	ldr	r0, [r0, #12]
    7c96:	cmp	r6, r4
    7c98:	orr.w	r2, r2, r0
    7c9c:	str	r2, [r3, #32]
    7c9e:	bne.n	7c7a <ColumnsPanel_update@@Base+0x46>
    7ca0:	add	r9, r1
    7ca2:	movs	r3, #0
    7ca4:	str.w	r3, [r9, #-4]
    7ca8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7cac:	ldr	r1, [r3, #28]
    7cae:	movs	r3, #0
    7cb0:	add	r9, r1
    7cb2:	str.w	r3, [r9, #-4]
    7cb6:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7cba:	nop
    7cbc:	movs	r0, #190	; 0xbe
    7cbe:	movs	r2, r0
    7cc0:	lsls	r4, r1, #10
    7cc2:	movs	r0, r0
    7cc4:	push	{r4, r5, r6, lr}
    7cc6:	mov	r4, r1
    7cc8:	mov	r5, r0
    7cca:	bl	b344 <Panel_getSelectedIndex@@Base>
    7cce:	mov	r6, r0
    7cd0:	mov	r0, r5
    7cd2:	bl	b348 <Panel_size@@Base>
    7cd6:	ldr	r1, [pc, #280]	; (7df0 <ColumnsPanel_update@@Base+0x1bc>)
    7cd8:	cmp.w	r4, #286	; 0x11e
    7cdc:	add	r1, pc
    7cde:	mov	r3, r0
    7ce0:	bgt.n	7d12 <ColumnsPanel_update@@Base+0xde>
    7ce2:	cmp.w	r4, #258	; 0x102
    7ce6:	blt.n	7d6a <ColumnsPanel_update@@Base+0x136>
    7ce8:	sub.w	r2, r4, #258	; 0x102
    7cec:	cmp	r2, #28
    7cee:	bhi.n	7de6 <ColumnsPanel_update@@Base+0x1b2>
    7cf0:	tbb	[pc, r2]
    7cf4:	ldrsh	r3, [r5, r5]
    7cf6:	ldrb	r1, [r7, #5]
    7cf8:	ldrb	r1, [r7, #5]
    7cfa:	ldrb	r1, [r7, #5]
    7cfc:	ldrb	r1, [r7, #5]
    7cfe:	ldrb	r1, [r7, #5]
    7d00:	str	r1, [r7, #68]	; 0x44
    7d02:	strb	r2, [r0, #5]
    7d04:	ldrb	r1, [r7, #5]
    7d06:	ldrb	r1, [r7, #5]
    7d08:	ldrb	r1, [r7, #5]
    7d0a:	ldrb	r1, [r7, #5]
    7d0c:	ldrb	r1, [r7, #5]
    7d0e:	ldrb	r1, [r7, #5]
    7d10:	movs	r5, r3
    7d12:	cmp.w	r4, #330	; 0x14a
    7d16:	beq.n	7dd6 <ColumnsPanel_update@@Base+0x1a2>
    7d18:	bge.n	7d1e <ColumnsPanel_update@@Base+0xea>
    7d1a:	movs	r0, #2
    7d1c:	pop	{r4, r5, r6, pc}
    7d1e:	movw	r2, #343	; 0x157
    7d22:	cmp	r4, r2
    7d24:	beq.n	7d2e <ColumnsPanel_update@@Base+0xfa>
    7d26:	movw	r2, #409	; 0x199
    7d2a:	cmp	r4, r2
    7d2c:	bne.n	7d1a <ColumnsPanel_update@@Base+0xe6>
    7d2e:	subs	r0, r3, #1
    7d30:	cmp	r0, r6
    7d32:	ble.n	7d1a <ColumnsPanel_update@@Base+0xe6>
    7d34:	movw	r0, #9904	; 0x26b0
    7d38:	ldr	r2, [pc, #184]	; (7df4 <ColumnsPanel_update@@Base+0x1c0>)
    7d3a:	ldrb	r3, [r5, r0]
    7d3c:	eor.w	r3, r3, #1
    7d40:	strb	r3, [r5, r0]
    7d42:	ldr	r2, [r1, r2]
    7d44:	ldr	r2, [r2, #0]
    7d46:	cmp	r3, #0
    7d48:	bne.n	7dec <ColumnsPanel_update@@Base+0x1b8>
    7d4a:	ldr	r1, [r2, #28]
    7d4c:	mov	r0, r5
    7d4e:	bl	b218 <Panel_setSelectionColor@@Base>
    7d52:	mov	r0, r5
    7d54:	bl	b2f8 <Panel_getSelected@@Base>
    7d58:	movw	r3, #9904	; 0x26b0
    7d5c:	ldrb	r3, [r5, r3]
    7d5e:	strb	r3, [r0, #12]
    7d60:	mov	r0, r5
    7d62:	bl	7c34 <ColumnsPanel_update@@Base>
    7d66:	movs	r0, #1
    7d68:	pop	{r4, r5, r6, pc}
    7d6a:	cmp	r4, #45	; 0x2d
    7d6c:	beq.n	7dbc <ColumnsPanel_update@@Base+0x188>
    7d6e:	ble.n	7d86 <ColumnsPanel_update@@Base+0x152>
    7d70:	cmp	r4, #91	; 0x5b
    7d72:	beq.n	7dbc <ColumnsPanel_update@@Base+0x188>
    7d74:	cmp	r4, #93	; 0x5d
    7d76:	bne.n	7de6 <ColumnsPanel_update@@Base+0x1b2>
    7d78:	subs	r3, #2
    7d7a:	cmp	r3, r6
    7d7c:	ble.n	7d60 <ColumnsPanel_update@@Base+0x12c>
    7d7e:	mov	r0, r5
    7d80:	bl	b328 <Panel_moveSelectedDown@@Base>
    7d84:	b.n	7d60 <ColumnsPanel_update@@Base+0x12c>
    7d86:	cmp	r4, #13
    7d88:	beq.n	7d2e <ColumnsPanel_update@@Base+0xfa>
    7d8a:	cmp	r4, #43	; 0x2b
    7d8c:	beq.n	7d78 <ColumnsPanel_update@@Base+0x144>
    7d8e:	cmp	r4, #10
    7d90:	beq.n	7d2e <ColumnsPanel_update@@Base+0xfa>
    7d92:	blx	69d0 <__ctype_b_loc@plt>
    7d96:	ldr	r3, [r0, #0]
    7d98:	ldrh.w	r3, [r3, r4, lsl #1]
    7d9c:	lsls	r3, r3, #21
    7d9e:	bpl.n	7d1a <ColumnsPanel_update@@Base+0xe6>
    7da0:	mov	r1, r4
    7da2:	mov	r0, r5
    7da4:	bl	b030 <Panel_selectByTyping@@Base>
    7da8:	cmp	r0, #4
    7daa:	beq.n	7d1a <ColumnsPanel_update@@Base+0xe6>
    7dac:	cmp	r0, #1
    7dae:	beq.n	7d60 <ColumnsPanel_update@@Base+0x12c>
    7db0:	b.n	7d1c <ColumnsPanel_update@@Base+0xe8>
    7db2:	movw	r2, #9904	; 0x26b0
    7db6:	ldrb	r2, [r5, r2]
    7db8:	cmp	r2, #0
    7dba:	beq.n	7d1a <ColumnsPanel_update@@Base+0xe6>
    7dbc:	subs	r3, #1
    7dbe:	cmp	r3, r6
    7dc0:	ble.n	7d60 <ColumnsPanel_update@@Base+0x12c>
    7dc2:	mov	r0, r5
    7dc4:	bl	b30c <Panel_moveSelectedUp@@Base>
    7dc8:	b.n	7d60 <ColumnsPanel_update@@Base+0x12c>
    7dca:	movw	r2, #9904	; 0x26b0
    7dce:	ldrb	r2, [r5, r2]
    7dd0:	cmp	r2, #0
    7dd2:	bne.n	7d78 <ColumnsPanel_update@@Base+0x144>
    7dd4:	b.n	7d1a <ColumnsPanel_update@@Base+0xe6>
    7dd6:	subs	r3, #1
    7dd8:	cmp	r3, r6
    7dda:	ble.n	7d60 <ColumnsPanel_update@@Base+0x12c>
    7ddc:	mov	r1, r6
    7dde:	mov	r0, r5
    7de0:	bl	b2d0 <Panel_remove@@Base>
    7de4:	b.n	7d60 <ColumnsPanel_update@@Base+0x12c>
    7de6:	cmp	r4, #254	; 0xfe
    7de8:	bgt.n	7d1a <ColumnsPanel_update@@Base+0xe6>
    7dea:	b.n	7d92 <ColumnsPanel_update@@Base+0x15e>
    7dec:	ldr	r1, [r2, #32]
    7dee:	b.n	7d4c <ColumnsPanel_update@@Base+0x118>
    7df0:	movs	r0, #48	; 0x30
    7df2:	movs	r2, r0
    7df4:	lsls	r0, r6, #9
    7df6:	movs	r0, r0
    7df8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7dfc:	mov	r5, r2
    7dfe:	ldr	r4, [r0, #28]
    7e00:	sub	sp, #20
    7e02:	ldr	r6, [r0, #0]
    7e04:	str	r3, [sp, #8]
    7e06:	ldr	r2, [r4, #0]
    7e08:	ldr	r3, [r6, #52]	; 0x34
    7e0a:	ldr.w	fp, [r4, #128]	; 0x80
    7e0e:	ldrb.w	r2, [r2, #70]	; 0x46
    7e12:	ldrb	r3, [r3, #0]
    7e14:	cmp	r2, #0
    7e16:	ldr	r2, [r0, #20]
    7e18:	str	r2, [sp, #4]
    7e1a:	ite	ne
    7e1c:	movne	r2, #2
    7e1e:	moveq	r2, #0
    7e20:	cmp	r3, #76	; 0x4c
    7e22:	str	r2, [sp, #0]
    7e24:	beq.n	7ecc <ColumnsPanel_update@@Base+0x298>
    7e26:	cmp	r3, #82	; 0x52
    7e28:	bne.n	7e32 <ColumnsPanel_update@@Base+0x1fe>
    7e2a:	add.w	fp, fp, fp, lsr #31
    7e2e:	mov.w	fp, fp, asr #1
    7e32:	add.w	r4, fp, #1
    7e36:	cmp.w	fp, #0
    7e3a:	add.w	r4, r4, r4, lsr #31
    7e3e:	mov.w	r4, r4, asr #1
    7e42:	ble.n	7e80 <ColumnsPanel_update@@Base+0x24c>
    7e44:	ldr	r2, [sp, #0]
    7e46:	mov	r8, r5
    7e48:	ldr	r3, [sp, #8]
    7e4a:	movs	r6, #0
    7e4c:	str	r5, [sp, #12]
    7e4e:	mov	r9, r4
    7e50:	subs	r3, r3, r2
    7e52:	ldr	r2, [sp, #4]
    7e54:	mov	r5, r1
    7e56:	add.w	r3, r3, r3, lsr #31
    7e5a:	subs	r7, r2, #4
    7e5c:	mov.w	sl, r3, asr #1
    7e60:	ldr.w	r0, [r7, #4]!
    7e64:	mov	r3, sl
    7e66:	mov	r2, r8
    7e68:	mov	r1, r5
    7e6a:	adds	r6, #1
    7e6c:	ldr	r4, [r0, #4]
    7e6e:	blx	r4
    7e70:	ldr	r3, [r7, #0]
    7e72:	cmp	r9, r6
    7e74:	ldr	r3, [r3, #24]
    7e76:	add	r8, r3
    7e78:	bgt.n	7e60 <ColumnsPanel_update@@Base+0x22c>
    7e7a:	mov	r1, r5
    7e7c:	ldr	r5, [sp, #12]
    7e7e:	mov	r4, r9
    7e80:	cmp	r4, fp
    7e82:	bge.n	7ec6 <ColumnsPanel_update@@Base+0x292>
    7e84:	ldr	r3, [sp, #8]
    7e86:	ldr	r2, [sp, #0]
    7e88:	subs	r6, r3, #1
    7e8a:	sub.w	r8, r3, r2
    7e8e:	ldr	r3, [sp, #4]
    7e90:	add.w	r6, r6, r6, lsr #31
    7e94:	add.w	r8, r8, r8, lsr #31
    7e98:	add.w	r4, r3, r4, lsl #2
    7e9c:	add.w	r6, r1, r6, asr #1
    7ea0:	add.w	sl, r3, fp, lsl #2
    7ea4:	adds	r6, #1
    7ea6:	mov.w	r8, r8, asr #1
    7eaa:	add.w	r6, r6, r2, lsr #1
    7eae:	ldr	r0, [r4, #0]
    7eb0:	mov	r2, r5
    7eb2:	mov	r3, r8
    7eb4:	mov	r1, r6
    7eb6:	ldr	r7, [r0, #4]
    7eb8:	blx	r7
    7eba:	ldr.w	r2, [r4], #4
    7ebe:	cmp	sl, r4
    7ec0:	ldr	r2, [r2, #24]
    7ec2:	add	r5, r2
    7ec4:	bne.n	7eae <ColumnsPanel_update@@Base+0x27a>
    7ec6:	add	sp, #20
    7ec8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ecc:	add.w	fp, fp, #1
    7ed0:	add.w	fp, fp, fp, lsr #31
    7ed4:	mov.w	fp, fp, asr #1
    7ed8:	b.n	7e32 <ColumnsPanel_update@@Base+0x1fe>
    7eda:	nop
    7edc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ee0:	mov	r9, r3
    7ee2:	ldr	r6, [r0, #0]
    7ee4:	mov	r8, r1
    7ee6:	ldr	r4, [r0, #28]
    7ee8:	mov	r5, r2
    7eea:	ldr	r3, [r6, #52]	; 0x34
    7eec:	ldr.w	r7, [r4, #128]	; 0x80
    7ef0:	ldr	r4, [r0, #20]
    7ef2:	ldrb	r3, [r3, #0]
    7ef4:	cmp	r3, #76	; 0x4c
    7ef6:	beq.n	7f26 <ColumnsPanel_update@@Base+0x2f2>
    7ef8:	cmp	r3, #82	; 0x52
    7efa:	bne.n	7f02 <ColumnsPanel_update@@Base+0x2ce>
    7efc:	add.w	r7, r7, r7, lsr #31
    7f00:	asrs	r7, r7, #1
    7f02:	cmp	r7, #0
    7f04:	ble.n	7f22 <ColumnsPanel_update@@Base+0x2ee>
    7f06:	add.w	r7, r4, r7, lsl #2
    7f0a:	ldr	r0, [r4, #0]
    7f0c:	mov	r2, r5
    7f0e:	mov	r3, r9
    7f10:	mov	r1, r8
    7f12:	ldr	r6, [r0, #4]
    7f14:	blx	r6
    7f16:	ldr.w	r2, [r4], #4
    7f1a:	cmp	r4, r7
    7f1c:	ldr	r2, [r2, #24]
    7f1e:	add	r5, r2
    7f20:	bne.n	7f0a <ColumnsPanel_update@@Base+0x2d6>
    7f22:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7f26:	adds	r7, #1
    7f28:	add.w	r7, r7, r7, lsr #31
    7f2c:	asrs	r7, r7, #1
    7f2e:	b.n	7f02 <ColumnsPanel_update@@Base+0x2ce>
    7f30:	push	{r3, r4, r5, lr}
    7f32:	ldr	r3, [r0, #0]
    7f34:	ldr	r2, [r0, #28]
    7f36:	ldr	r4, [r0, #20]
    7f38:	ldr	r3, [r3, #52]	; 0x34
    7f3a:	ldr.w	r5, [r2, #128]	; 0x80
    7f3e:	ldrb	r3, [r3, #0]
    7f40:	cmp	r3, #76	; 0x4c
    7f42:	beq.n	7f64 <ColumnsPanel_update@@Base+0x330>
    7f44:	cmp	r3, #82	; 0x52
    7f46:	bne.n	7f4e <ColumnsPanel_update@@Base+0x31a>
    7f48:	add.w	r5, r5, r5, lsr #31
    7f4c:	asrs	r5, r5, #1
    7f4e:	cmp	r5, #0
    7f50:	ble.n	7f62 <ColumnsPanel_update@@Base+0x32e>
    7f52:	add.w	r5, r4, r5, lsl #2
    7f56:	ldr.w	r0, [r4], #4
    7f5a:	bl	a004 <Meter_delete@@Base>
    7f5e:	cmp	r4, r5
    7f60:	bne.n	7f56 <ColumnsPanel_update@@Base+0x322>
    7f62:	pop	{r3, r4, r5, pc}
    7f64:	adds	r5, #1
    7f66:	add.w	r5, r5, r5, lsr #31
    7f6a:	asrs	r5, r5, #1
    7f6c:	b.n	7f4e <ColumnsPanel_update@@Base+0x31a>
    7f6e:	nop
    7f70:	ldr	r3, [r0, #28]
    7f72:	push	{r4, r5, r6, r7, lr}
    7f74:	mov	r6, r1
    7f76:	ldr	r7, [r0, #16]
    7f78:	sub	sp, #20
    7f7a:	ldr.w	r3, [r3, #128]	; 0x80
    7f7e:	mov	r4, r2
    7f80:	cmp	r3, r7
    7f82:	bge.n	7fa2 <ColumnsPanel_update@@Base+0x36e>
    7f84:	ldr	r2, [pc, #92]	; (7fe4 <ColumnsPanel_update@@Base+0x3b0>)
    7f86:	mov	r0, r1
    7f88:	mov	r1, r4
    7f8a:	add	r2, pc
    7f8c:	blx	6a60 <snprintf@plt>
    7f90:	cmp	r4, r0
    7f92:	ite	gt
    7f94:	movgt	r4, #0
    7f96:	movle	r4, #1
    7f98:	orrs.w	r3, r4, r0, lsr #31
    7f9c:	bne.n	7fd0 <ColumnsPanel_update@@Base+0x39c>
    7f9e:	add	sp, #20
    7fa0:	pop	{r4, r5, r6, r7, pc}
    7fa2:	mov	r5, r0
    7fa4:	movs	r2, #64	; 0x40
    7fa6:	movs	r1, #0
    7fa8:	ldr	r0, [r0, #32]
    7faa:	blx	6a90 <memset@plt>
    7fae:	mov	r1, r7
    7fb0:	mov	r0, r5
    7fb2:	ldr	r5, [pc, #52]	; (7fe8 <ColumnsPanel_update@@Base+0x3b4>)
    7fb4:	bl	11ff4 <Platform_setCPUValues@@Base>
    7fb8:	mov	r0, r6
    7fba:	add	r5, pc
    7fbc:	mov.w	r3, #4294967295	; 0xffffffff
    7fc0:	movs	r2, #1
    7fc2:	mov	r1, r4
    7fc4:	str	r5, [sp, #0]
    7fc6:	vstr	d0, [sp, #8]
    7fca:	blx	6c78 <__snprintf_chk@plt>
    7fce:	b.n	7f90 <ColumnsPanel_update@@Base+0x35c>
    7fd0:	movs	r0, #1
    7fd2:	blx	6730 <curs_set@plt>
    7fd6:	blx	6c48 <endwin@plt+0x4>
    7fda:	movs	r1, #0
    7fdc:	movs	r0, #1
    7fde:	blx	683c <err@plt>
    7fe2:	nop
    7fe4:	svc	254	; 0xfe
    7fe6:	movs	r0, r0
    7fe8:	svc	214	; 0xd6
    7fea:	movs	r0, r0
    7fec:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7ff0:	mov	r8, r0
    7ff2:	ldr	r3, [pc, #132]	; (8078 <ColumnsPanel_update@@Base+0x444>)
    7ff4:	mov	r5, r1
    7ff6:	ldr	r0, [r0, #0]
    7ff8:	ldr	r2, [pc, #128]	; (807c <ColumnsPanel_update@@Base+0x448>)
    7ffa:	add	r3, pc
    7ffc:	str.w	r1, [r8, #12]
    8000:	ldr	r0, [r0, #52]	; 0x34
    8002:	ldr	r2, [r3, r2]
    8004:	ldr.w	r1, [r8, #28]
    8008:	ldrb	r3, [r0, #0]
    800a:	ldr.w	r2, [r2, r5, lsl #2]
    800e:	cmp	r3, #76	; 0x4c
    8010:	ldr.w	r6, [r1, #128]	; 0x80
    8014:	ldr.w	r4, [r8, #20]
    8018:	ldr.w	r9, [r2, #8]
    801c:	beq.n	8060 <ColumnsPanel_update@@Base+0x42c>
    801e:	cmp	r3, #82	; 0x52
    8020:	bne.n	8028 <ColumnsPanel_update@@Base+0x3f4>
    8022:	add.w	r6, r6, r6, lsr #31
    8026:	asrs	r6, r6, #1
    8028:	cmp	r6, #0
    802a:	ble.n	8044 <ColumnsPanel_update@@Base+0x410>
    802c:	add.w	r7, r4, r6, lsl #2
    8030:	ldr.w	r0, [r4], #4
    8034:	mov	r1, r5
    8036:	bl	aa88 <Meter_setMode@@Base>
    803a:	cmp	r4, r7
    803c:	bne.n	8030 <ColumnsPanel_update@@Base+0x3fc>
    803e:	ldr.w	r3, [r8]
    8042:	ldr	r0, [r3, #52]	; 0x34
    8044:	movs	r1, #50	; 0x32
    8046:	blx	6a24 <strchr@plt>
    804a:	cbz	r0, 806a <ColumnsPanel_update@@Base+0x436>
    804c:	adds	r6, #1
    804e:	add.w	r6, r6, r6, lsr #31
    8052:	asrs	r6, r6, #1
    8054:	mul.w	r6, r9, r6
    8058:	str.w	r6, [r8, #24]
    805c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8060:	adds	r6, #1
    8062:	add.w	r6, r6, r6, lsr #31
    8066:	asrs	r6, r6, #1
    8068:	b.n	8028 <ColumnsPanel_update@@Base+0x3f4>
    806a:	mul.w	r6, r6, r9
    806e:	str.w	r6, [r8, #24]
    8072:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8076:	nop
    8078:	adds	r2, r2, #4
    807a:	movs	r2, r0
    807c:	lsls	r0, r3, #9
    807e:	movs	r0, r0
    8080:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8084:	mov	r7, r0
    8086:	ldr	r3, [r0, #28]
    8088:	ldr	r4, [r0, #20]
    808a:	ldr.w	r8, [pc, #196]	; 8150 <ColumnsPanel_update@@Base+0x51c>
    808e:	ldr.w	r6, [r3, #128]	; 0x80
    8092:	add	r8, pc
    8094:	cmp	r4, #0
    8096:	beq.n	813c <ColumnsPanel_update@@Base+0x508>
    8098:	ldr	r3, [r7, #0]
    809a:	ldr	r0, [r3, #52]	; 0x34
    809c:	ldrb	r3, [r0, #0]
    809e:	cmp	r3, #76	; 0x4c
    80a0:	beq.n	8126 <ColumnsPanel_update@@Base+0x4f2>
    80a2:	cmp	r3, #82	; 0x52
    80a4:	it	ne
    80a6:	movne	r5, #0
    80a8:	bne.n	80b8 <ColumnsPanel_update@@Base+0x484>
    80aa:	adds	r5, r6, #1
    80ac:	add.w	r6, r6, r6, lsr #31
    80b0:	add.w	r5, r5, r5, lsr #31
    80b4:	asrs	r6, r6, #1
    80b6:	asrs	r5, r5, #1
    80b8:	cmp	r6, #0
    80ba:	ble.n	80f6 <ColumnsPanel_update@@Base+0x4c2>
    80bc:	ldr.w	r9, [pc, #148]	; 8154 <ColumnsPanel_update@@Base+0x520>
    80c0:	add.w	sl, r5, #1
    80c4:	subs	r4, #4
    80c6:	add	r5, r6
    80c8:	add	r9, pc
    80ca:	b.n	80dc <ColumnsPanel_update@@Base+0x4a8>
    80cc:	ldr	r3, [r0, #0]
    80ce:	ldr	r3, [r3, #16]
    80d0:	blx	r3
    80d2:	add.w	r3, sl, #1
    80d6:	cmp	r5, sl
    80d8:	mov	sl, r3
    80da:	beq.n	80f2 <ColumnsPanel_update@@Base+0x4be>
    80dc:	ldr.w	r0, [r4, #4]!
    80e0:	cmp	r0, #0
    80e2:	bne.n	80cc <ColumnsPanel_update@@Base+0x498>
    80e4:	ldr	r0, [r7, #28]
    80e6:	mov	r2, r9
    80e8:	mov	r1, sl
    80ea:	bl	aadc <Meter_new@@Base>
    80ee:	str	r0, [r4, #0]
    80f0:	b.n	80cc <ColumnsPanel_update@@Base+0x498>
    80f2:	ldr	r3, [r7, #0]
    80f4:	ldr	r0, [r3, #52]	; 0x34
    80f6:	ldr	r3, [r7, #12]
    80f8:	cbz	r3, 8120 <ColumnsPanel_update@@Base+0x4ec>
    80fa:	ldr	r2, [pc, #92]	; (8158 <ColumnsPanel_update@@Base+0x524>)
    80fc:	movs	r1, #50	; 0x32
    80fe:	ldr.w	r2, [r8, r2]
    8102:	ldr.w	r3, [r2, r3, lsl #2]
    8106:	ldr	r4, [r3, #8]
    8108:	blx	6a24 <strchr@plt>
    810c:	cbz	r0, 8132 <ColumnsPanel_update@@Base+0x4fe>
    810e:	adds	r6, #1
    8110:	add.w	r6, r6, r6, lsr #31
    8114:	asrs	r6, r6, #1
    8116:	mul.w	r6, r4, r6
    811a:	str	r6, [r7, #24]
    811c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    8120:	movs	r3, #1
    8122:	str	r3, [r7, #12]
    8124:	b.n	80fa <ColumnsPanel_update@@Base+0x4c6>
    8126:	adds	r6, #1
    8128:	movs	r5, #0
    812a:	add.w	r6, r6, r6, lsr #31
    812e:	asrs	r6, r6, #1
    8130:	b.n	80b8 <ColumnsPanel_update@@Base+0x484>
    8132:	mul.w	r6, r6, r4
    8136:	str	r6, [r7, #24]
    8138:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    813c:	mov	r0, r6
    813e:	movs	r1, #4
    8140:	bl	11da0 <xCalloc@@Base>
    8144:	ldr	r3, [r7, #28]
    8146:	ldr.w	r6, [r3, #128]	; 0x80
    814a:	mov	r4, r0
    814c:	str	r0, [r7, #20]
    814e:	b.n	8098 <ColumnsPanel_update@@Base+0x464>
    8150:	adds	r2, r7, #1
    8152:	movs	r2, r0
    8154:	movs	r0, #12
    8156:	movs	r2, r0
    8158:	lsls	r0, r3, #9
    815a:	movs	r0, r0
    815c:	ldr	r2, [pc, #136]	; (81e8 <ColumnsPanel_update@@Base+0x5b4>)
    815e:	ldr	r3, [pc, #140]	; (81ec <ColumnsPanel_update@@Base+0x5b8>)
    8160:	add	r2, pc
    8162:	push	{r4, r5, r6, lr}
    8164:	sub	sp, #24
    8166:	ldr	r3, [r2, r3]
    8168:	mov	r4, r0
    816a:	ldr	r2, [r0, #16]
    816c:	ldr	r3, [r3, #0]
    816e:	str	r3, [sp, #20]
    8170:	mov.w	r3, #0
    8174:	ldr	r3, [r0, #28]
    8176:	ldr.w	r1, [r3, #128]	; 0x80
    817a:	cmp	r1, #1
    817c:	ble.n	81aa <ColumnsPanel_update@@Base+0x576>
    817e:	ldr	r3, [r3, #0]
    8180:	ldrb.w	r3, [r3, #56]	; 0x38
    8184:	cbnz	r3, 81c0 <ColumnsPanel_update@@Base+0x58c>
    8186:	ldr	r5, [pc, #104]	; (81f0 <ColumnsPanel_update@@Base+0x5bc>)
    8188:	add	r6, sp, #8
    818a:	movs	r3, #10
    818c:	str	r2, [sp, #4]
    818e:	add	r5, pc
    8190:	mov	r0, r6
    8192:	mov	r1, r3
    8194:	movs	r2, #1
    8196:	str	r5, [sp, #0]
    8198:	blx	6c78 <__snprintf_chk@plt>
    819c:	cmp	r0, #9
    819e:	bgt.n	81d4 <ColumnsPanel_update@@Base+0x5a0>
    81a0:	mov	r1, r6
    81a2:	mov	r0, r4
    81a4:	bl	aa70 <Meter_setCaption@@Base>
    81a8:	ldr	r2, [r4, #16]
    81aa:	cbz	r2, 81c4 <ColumnsPanel_update@@Base+0x590>
    81ac:	ldr	r2, [pc, #68]	; (81f4 <ColumnsPanel_update@@Base+0x5c0>)
    81ae:	ldr	r3, [pc, #60]	; (81ec <ColumnsPanel_update@@Base+0x5b8>)
    81b0:	add	r2, pc
    81b2:	ldr	r3, [r2, r3]
    81b4:	ldr	r2, [r3, #0]
    81b6:	ldr	r3, [sp, #20]
    81b8:	eors	r2, r3
    81ba:	bne.n	81d0 <ColumnsPanel_update@@Base+0x59c>
    81bc:	add	sp, #24
    81be:	pop	{r4, r5, r6, pc}
    81c0:	subs	r2, #1
    81c2:	b.n	8186 <ColumnsPanel_update@@Base+0x552>
    81c4:	ldr	r1, [pc, #48]	; (81f8 <ColumnsPanel_update@@Base+0x5c4>)
    81c6:	mov	r0, r4
    81c8:	add	r1, pc
    81ca:	bl	aa70 <Meter_setCaption@@Base>
    81ce:	b.n	81ac <ColumnsPanel_update@@Base+0x578>
    81d0:	blx	67d0 <__stack_chk_fail@plt>
    81d4:	movs	r0, #1
    81d6:	blx	6730 <curs_set@plt>
    81da:	blx	6c48 <endwin@plt+0x4>
    81de:	movs	r1, #0
    81e0:	movs	r0, #1
    81e2:	blx	683c <err@plt>
    81e6:	nop
    81e8:	subs	r4, r5, r6
    81ea:	movs	r2, r0
    81ec:	lsls	r0, r0, #9
    81ee:	movs	r0, r0
    81f0:	udf	#10
    81f2:	movs	r0, r0
    81f4:	subs	r4, r3, r5
    81f6:	movs	r2, r0
    81f8:	ble.n	81ac <ColumnsPanel_update@@Base+0x578>
    81fa:	movs	r0, r0
    81fc:	ldr	r2, [pc, #832]	; (8540 <ColumnsPanel_update@@Base+0x90c>)
    81fe:	ldr	r3, [pc, #836]	; (8544 <ColumnsPanel_update@@Base+0x910>)
    8200:	add	r2, pc
    8202:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8206:	mov	r5, r0
    8208:	ldr	r3, [r2, r3]
    820a:	sub	sp, #76	; 0x4c
    820c:	mov	r0, r1
    820e:	mov	r4, r1
    8210:	ldr	r3, [r3, #0]
    8212:	str	r3, [sp, #68]	; 0x44
    8214:	mov.w	r3, #0
    8218:	bl	d194 <RichString_prune@@Base>
    821c:	ldr	r3, [r5, #28]
    821e:	ldr	r2, [r5, #16]
    8220:	ldr	r7, [pc, #804]	; (8548 <ColumnsPanel_update@@Base+0x914>)
    8222:	ldr.w	r3, [r3, #128]	; 0x80
    8226:	add	r7, pc
    8228:	cmp	r2, r3
    822a:	bgt.w	84a8 <ColumnsPanel_update@@Base+0x874>
    822e:	ldr	r2, [r5, #32]
    8230:	add	r6, sp, #16
    8232:	ldr.w	r8, [pc, #792]	; 854c <ColumnsPanel_update@@Base+0x918>
    8236:	movs	r3, #50	; 0x32
    8238:	mov	r0, r6
    823a:	mov	r1, r3
    823c:	ldrd	sl, fp, [r2, #8]
    8240:	add	r8, pc
    8242:	movs	r2, #1
    8244:	str.w	r8, [sp]
    8248:	strd	sl, fp, [sp, #8]
    824c:	blx	6c78 <__snprintf_chk@plt>
    8250:	cmp	r0, #49	; 0x31
    8252:	bgt.w	852a <ColumnsPanel_update@@Base+0x8f6>
    8256:	ldr	r3, [pc, #760]	; (8550 <ColumnsPanel_update@@Base+0x91c>)
    8258:	mov	r0, r4
    825a:	ldr	r2, [pc, #760]	; (8554 <ColumnsPanel_update@@Base+0x920>)
    825c:	ldr	r7, [r7, r3]
    825e:	add	r2, pc
    8260:	ldr	r3, [r7, #0]
    8262:	ldr	r1, [r3, #44]	; 0x2c
    8264:	bl	d1e4 <RichString_append@@Base>
    8268:	ldr	r3, [r7, #0]
    826a:	mov	r0, r4
    826c:	mov	r2, r6
    826e:	ldr.w	r1, [r3, #200]	; 0xc8
    8272:	bl	d1e4 <RichString_append@@Base>
    8276:	ldr	r3, [r5, #28]
    8278:	ldr	r0, [r5, #32]
    827a:	ldr	r3, [r3, #0]
    827c:	ldrb.w	r3, [r3, #57]	; 0x39
    8280:	cmp	r3, #0
    8282:	beq.w	8410 <ColumnsPanel_update@@Base+0x7dc>
    8286:	ldrd	sl, fp, [r0, #16]
    828a:	movs	r3, #50	; 0x32
    828c:	mov	r1, r3
    828e:	movs	r2, #1
    8290:	mov	r0, r6
    8292:	str.w	r8, [sp]
    8296:	strd	sl, fp, [sp, #8]
    829a:	blx	6c78 <__snprintf_chk@plt>
    829e:	cmp	r0, #49	; 0x31
    82a0:	bgt.w	852a <ColumnsPanel_update@@Base+0x8f6>
    82a4:	ldr	r3, [r7, #0]
    82a6:	mov	r0, r4
    82a8:	ldr	r2, [pc, #684]	; (8558 <ColumnsPanel_update@@Base+0x924>)
    82aa:	ldr	r1, [r3, #44]	; 0x2c
    82ac:	add	r2, pc
    82ae:	bl	d1e4 <RichString_append@@Base>
    82b2:	ldr	r3, [r7, #0]
    82b4:	mov	r2, r6
    82b6:	mov	r0, r4
    82b8:	ldr.w	r1, [r3, #204]	; 0xcc
    82bc:	bl	d1e4 <RichString_append@@Base>
    82c0:	ldr	r0, [r5, #32]
    82c2:	movs	r3, #50	; 0x32
    82c4:	movs	r2, #1
    82c6:	mov	r1, r3
    82c8:	ldrd	sl, fp, [r0]
    82cc:	mov	r0, r6
    82ce:	str.w	r8, [sp]
    82d2:	strd	sl, fp, [sp, #8]
    82d6:	blx	6c78 <__snprintf_chk@plt>
    82da:	cmp	r0, #49	; 0x31
    82dc:	bgt.w	852a <ColumnsPanel_update@@Base+0x8f6>
    82e0:	ldr	r3, [r7, #0]
    82e2:	mov	r0, r4
    82e4:	ldr	r2, [pc, #628]	; (855c <ColumnsPanel_update@@Base+0x928>)
    82e6:	ldr	r1, [r3, #44]	; 0x2c
    82e8:	add	r2, pc
    82ea:	bl	d1e4 <RichString_append@@Base>
    82ee:	ldr	r3, [r7, #0]
    82f0:	mov	r2, r6
    82f2:	mov	r0, r4
    82f4:	ldr.w	r1, [r3, #196]	; 0xc4
    82f8:	bl	d1e4 <RichString_append@@Base>
    82fc:	ldr	r0, [r5, #32]
    82fe:	movs	r3, #50	; 0x32
    8300:	movs	r2, #1
    8302:	mov	r1, r3
    8304:	ldrd	sl, fp, [r0, #24]
    8308:	mov	r0, r6
    830a:	str.w	r8, [sp]
    830e:	strd	sl, fp, [sp, #8]
    8312:	blx	6c78 <__snprintf_chk@plt>
    8316:	cmp	r0, #49	; 0x31
    8318:	bgt.w	852a <ColumnsPanel_update@@Base+0x8f6>
    831c:	ldr	r3, [r7, #0]
    831e:	mov	r0, r4
    8320:	ldr	r2, [pc, #572]	; (8560 <ColumnsPanel_update@@Base+0x92c>)
    8322:	ldr	r1, [r3, #44]	; 0x2c
    8324:	add	r2, pc
    8326:	bl	d1e4 <RichString_append@@Base>
    832a:	ldr	r3, [r7, #0]
    832c:	mov	r2, r6
    832e:	mov	r0, r4
    8330:	ldr.w	r1, [r3, #212]	; 0xd4
    8334:	bl	d1e4 <RichString_append@@Base>
    8338:	ldr	r0, [r5, #32]
    833a:	movs	r3, #50	; 0x32
    833c:	movs	r2, #1
    833e:	mov	r1, r3
    8340:	ldrd	sl, fp, [r0, #32]
    8344:	mov	r0, r6
    8346:	str.w	r8, [sp]
    834a:	strd	sl, fp, [sp, #8]
    834e:	blx	6c78 <__snprintf_chk@plt>
    8352:	cmp	r0, #49	; 0x31
    8354:	bgt.w	852a <ColumnsPanel_update@@Base+0x8f6>
    8358:	ldr	r3, [r7, #0]
    835a:	mov	r0, r4
    835c:	ldr	r2, [pc, #516]	; (8564 <ColumnsPanel_update@@Base+0x930>)
    835e:	ldr	r1, [r3, #44]	; 0x2c
    8360:	add	r2, pc
    8362:	bl	d1e4 <RichString_append@@Base>
    8366:	ldr	r3, [r7, #0]
    8368:	mov	r2, r6
    836a:	mov	r0, r4
    836c:	ldr.w	r1, [r3, #216]	; 0xd8
    8370:	bl	d1e4 <RichString_append@@Base>
    8374:	ldr	r3, [r5, #32]
    8376:	vldr	d7, [r3, #40]	; 0x28
    837a:	vcmp.f64	d7, #0.0
    837e:	vmrs	APSR_nzcv, fpscr
    8382:	bne.w	84f2 <ColumnsPanel_update@@Base+0x8be>
    8386:	vldr	d7, [r3, #48]	; 0x30
    838a:	vcmp.f64	d7, #0.0
    838e:	vmrs	APSR_nzcv, fpscr
    8392:	beq.n	83d2 <ColumnsPanel_update@@Base+0x79e>
    8394:	ldr.w	ip, [pc, #464]	; 8568 <ColumnsPanel_update@@Base+0x934>
    8398:	movs	r3, #50	; 0x32
    839a:	vstr	d7, [sp, #8]
    839e:	mov	r1, r3
    83a0:	add	ip, pc
    83a2:	movs	r2, #1
    83a4:	mov	r0, r6
    83a6:	str.w	ip, [sp]
    83aa:	blx	6c78 <__snprintf_chk@plt>
    83ae:	cmp	r0, #49	; 0x31
    83b0:	bgt.w	852a <ColumnsPanel_update@@Base+0x8f6>
    83b4:	ldr	r3, [r7, #0]
    83b6:	mov	r0, r4
    83b8:	ldr	r2, [pc, #432]	; (856c <ColumnsPanel_update@@Base+0x938>)
    83ba:	ldr	r1, [r3, #44]	; 0x2c
    83bc:	add	r2, pc
    83be:	bl	d1e4 <RichString_append@@Base>
    83c2:	ldr	r3, [r7, #0]
    83c4:	mov	r2, r6
    83c6:	mov	r0, r4
    83c8:	ldr.w	r1, [r3, #224]	; 0xe0
    83cc:	bl	d1e4 <RichString_append@@Base>
    83d0:	ldr	r3, [r5, #32]
    83d2:	ldrd	r8, r9, [r3, #56]	; 0x38
    83d6:	movs	r3, #50	; 0x32
    83d8:	ldr	r5, [pc, #404]	; (8570 <ColumnsPanel_update@@Base+0x93c>)
    83da:	mov	r1, r3
    83dc:	movs	r2, #1
    83de:	mov	r0, r6
    83e0:	add	r5, pc
    83e2:	strd	r8, r9, [sp, #8]
    83e6:	str	r5, [sp, #0]
    83e8:	blx	6c78 <__snprintf_chk@plt>
    83ec:	cmp	r0, #49	; 0x31
    83ee:	bgt.w	852a <ColumnsPanel_update@@Base+0x8f6>
    83f2:	ldr	r3, [r7, #0]
    83f4:	mov	r0, r4
    83f6:	ldr	r2, [pc, #380]	; (8574 <ColumnsPanel_update@@Base+0x940>)
    83f8:	ldr	r1, [r3, #44]	; 0x2c
    83fa:	add	r2, pc
    83fc:	bl	d1e4 <RichString_append@@Base>
    8400:	ldr	r3, [r7, #0]
    8402:	mov	r2, r6
    8404:	mov	r0, r4
    8406:	ldr.w	r1, [r3, #208]	; 0xd0
    840a:	bl	d1e4 <RichString_append@@Base>
    840e:	b.n	8492 <ColumnsPanel_update@@Base+0x85e>
    8410:	ldrd	sl, fp, [r0, #16]
    8414:	movs	r3, #50	; 0x32
    8416:	mov	r1, r3
    8418:	movs	r2, #1
    841a:	mov	r0, r6
    841c:	str.w	r8, [sp]
    8420:	strd	sl, fp, [sp, #8]
    8424:	blx	6c78 <__snprintf_chk@plt>
    8428:	cmp	r0, #49	; 0x31
    842a:	bgt.n	852a <ColumnsPanel_update@@Base+0x8f6>
    842c:	ldr	r3, [r7, #0]
    842e:	mov	r0, r4
    8430:	ldr	r2, [pc, #324]	; (8578 <ColumnsPanel_update@@Base+0x944>)
    8432:	ldr	r1, [r3, #44]	; 0x2c
    8434:	add	r2, pc
    8436:	bl	d1e4 <RichString_append@@Base>
    843a:	ldr	r3, [r7, #0]
    843c:	mov	r2, r6
    843e:	mov	r0, r4
    8440:	ldr.w	r1, [r3, #204]	; 0xcc
    8444:	bl	d1e4 <RichString_append@@Base>
    8448:	ldr	r0, [r5, #32]
    844a:	movs	r3, #50	; 0x32
    844c:	movs	r2, #1
    844e:	mov	r1, r3
    8450:	ldrd	sl, fp, [r0]
    8454:	mov	r0, r6
    8456:	str.w	r8, [sp]
    845a:	strd	sl, fp, [sp, #8]
    845e:	blx	6c78 <__snprintf_chk@plt>
    8462:	cmp	r0, #49	; 0x31
    8464:	bgt.n	852a <ColumnsPanel_update@@Base+0x8f6>
    8466:	ldr	r3, [r7, #0]
    8468:	mov	r0, r4
    846a:	ldr	r2, [pc, #272]	; (857c <ColumnsPanel_update@@Base+0x948>)
    846c:	ldr	r1, [r3, #44]	; 0x2c
    846e:	add	r2, pc
    8470:	bl	d1e4 <RichString_append@@Base>
    8474:	ldr	r3, [r7, #0]
    8476:	mov	r2, r6
    8478:	mov	r0, r4
    847a:	ldr.w	r1, [r3, #196]	; 0xc4
    847e:	bl	d1e4 <RichString_append@@Base>
    8482:	ldr	r3, [r5, #32]
    8484:	vldr	d7, [r3, #24]
    8488:	vcmp.f64	d7, #0.0
    848c:	vmrs	APSR_nzcv, fpscr
    8490:	bne.n	84bc <ColumnsPanel_update@@Base+0x888>
    8492:	ldr	r2, [pc, #236]	; (8580 <ColumnsPanel_update@@Base+0x94c>)
    8494:	ldr	r3, [pc, #172]	; (8544 <ColumnsPanel_update@@Base+0x910>)
    8496:	add	r2, pc
    8498:	ldr	r3, [r2, r3]
    849a:	ldr	r2, [r3, #0]
    849c:	ldr	r3, [sp, #68]	; 0x44
    849e:	eors	r2, r3
    84a0:	bne.n	853c <ColumnsPanel_update@@Base+0x908>
    84a2:	add	sp, #76	; 0x4c
    84a4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    84a8:	ldr	r3, [pc, #164]	; (8550 <ColumnsPanel_update@@Base+0x91c>)
    84aa:	mov	r0, r4
    84ac:	ldr	r2, [pc, #212]	; (8584 <ColumnsPanel_update@@Base+0x950>)
    84ae:	ldr	r3, [r7, r3]
    84b0:	add	r2, pc
    84b2:	ldr	r3, [r3, #0]
    84b4:	ldr	r1, [r3, #44]	; 0x2c
    84b6:	bl	d1e4 <RichString_append@@Base>
    84ba:	b.n	8492 <ColumnsPanel_update@@Base+0x85e>
    84bc:	movs	r3, #50	; 0x32
    84be:	vstr	d7, [sp, #8]
    84c2:	mov	r1, r3
    84c4:	movs	r2, #1
    84c6:	mov	r0, r6
    84c8:	str.w	r8, [sp]
    84cc:	blx	6c78 <__snprintf_chk@plt>
    84d0:	cmp	r0, #49	; 0x31
    84d2:	bgt.n	852a <ColumnsPanel_update@@Base+0x8f6>
    84d4:	ldr	r3, [r7, #0]
    84d6:	mov	r0, r4
    84d8:	ldr	r2, [pc, #172]	; (8588 <ColumnsPanel_update@@Base+0x954>)
    84da:	ldr	r1, [r3, #44]	; 0x2c
    84dc:	add	r2, pc
    84de:	bl	d1e4 <RichString_append@@Base>
    84e2:	ldr	r3, [r7, #0]
    84e4:	mov	r2, r6
    84e6:	mov	r0, r4
    84e8:	ldr.w	r1, [r3, #224]	; 0xe0
    84ec:	bl	d1e4 <RichString_append@@Base>
    84f0:	b.n	8492 <ColumnsPanel_update@@Base+0x85e>
    84f2:	movs	r3, #50	; 0x32
    84f4:	vstr	d7, [sp, #8]
    84f8:	mov	r1, r3
    84fa:	movs	r2, #1
    84fc:	mov	r0, r6
    84fe:	str.w	r8, [sp]
    8502:	blx	6c78 <__snprintf_chk@plt>
    8506:	cmp	r0, #49	; 0x31
    8508:	bgt.n	852a <ColumnsPanel_update@@Base+0x8f6>
    850a:	ldr	r3, [r7, #0]
    850c:	mov	r0, r4
    850e:	ldr	r2, [pc, #124]	; (858c <ColumnsPanel_update@@Base+0x958>)
    8510:	ldr	r1, [r3, #44]	; 0x2c
    8512:	add	r2, pc
    8514:	bl	d1e4 <RichString_append@@Base>
    8518:	ldr	r3, [r7, #0]
    851a:	mov	r2, r6
    851c:	mov	r0, r4
    851e:	ldr.w	r1, [r3, #220]	; 0xdc
    8522:	bl	d1e4 <RichString_append@@Base>
    8526:	ldr	r3, [r5, #32]
    8528:	b.n	8386 <ColumnsPanel_update@@Base+0x752>
    852a:	movs	r0, #1
    852c:	blx	6730 <curs_set@plt>
    8530:	blx	6c48 <endwin@plt+0x4>
    8534:	movs	r1, #0
    8536:	movs	r0, #1
    8538:	blx	683c <err@plt>
    853c:	blx	67d0 <__stack_chk_fail@plt>
    8540:	subs	r4, r1, r4
    8542:	movs	r2, r0
    8544:	lsls	r0, r0, #9
    8546:	movs	r0, r0
    8548:	subs	r6, r4, r3
    854a:	movs	r2, r0
    854c:	ble.n	8618 <CRT_readKey@@Base+0x1c>
    854e:	movs	r0, r0
    8550:	lsls	r0, r6, #9
    8552:	movs	r0, r0
    8554:	lsrs	r2, r5, #19
    8556:	movs	r1, r0
    8558:	ble.n	8564 <ColumnsPanel_update@@Base+0x930>
    855a:	movs	r0, r0
    855c:	bgt.n	84f8 <ColumnsPanel_update@@Base+0x8c4>
    855e:	movs	r0, r0
    8560:	bgt.n	848c <ColumnsPanel_update@@Base+0x858>
    8562:	movs	r0, r0
    8564:	bgt.n	8620 <CRT_readKey@@Base+0x24>
    8566:	movs	r0, r0
    8568:	bgt.n	8574 <ColumnsPanel_update@@Base+0x940>
    856a:	movs	r0, r0
    856c:	bgt.n	8580 <ColumnsPanel_update@@Base+0x94c>
    856e:	movs	r0, r0
    8570:	blt.n	84fc <ColumnsPanel_update@@Base+0x8c8>
    8572:	movs	r0, r0
    8574:	blt.n	8514 <ColumnsPanel_update@@Base+0x8e0>
    8576:	movs	r0, r0
    8578:	blt.n	84ac <ColumnsPanel_update@@Base+0x878>
    857a:	movs	r0, r0
    857c:	blt.n	864c <CRT_disableDelay@@Base+0x10>
    857e:	movs	r0, r0
    8580:	adds	r6, r6, r1
    8582:	movs	r2, r0
    8584:	bge.n	8538 <ColumnsPanel_update@@Base+0x904>
    8586:	movs	r0, r0
    8588:	blt.n	858c <ColumnsPanel_update@@Base+0x958>
    858a:	movs	r0, r0
    858c:	bge.n	84ec <ColumnsPanel_update@@Base+0x8b8>
    858e:	movs	r0, r0
    8590:	push	{r3, lr}
    8592:	movs	r0, #1
    8594:	blx	6730 <curs_set@plt>
    8598:	blx	6c48 <endwin@plt+0x4>
    859c:	movs	r0, #0
    859e:	blx	69dc <exit@plt>
    85a2:	nop

000085a4 <CRT_done@@Base>:
    85a4:	push	{r3, lr}
    85a6:	movs	r0, #1
    85a8:	blx	6730 <curs_set@plt>
    85ac:	ldmia.w	sp!, {r3, lr}
    85b0:	b.w	6c44 <endwin@plt>

000085b4 <CRT_fatalError@@Base>:
    85b4:	push	{lr}
    85b6:	sub	sp, #20
    85b8:	ldr	r4, [pc, #52]	; (85f0 <CRT_fatalError@@Base+0x3c>)
    85ba:	str	r0, [sp, #12]
    85bc:	blx	6a48 <__errno_location@plt>
    85c0:	ldr	r6, [pc, #48]	; (85f4 <CRT_fatalError@@Base+0x40>)
    85c2:	add	r4, pc
    85c4:	ldr	r0, [r0, #0]
    85c6:	blx	6960 <strerror@plt>
    85ca:	mov	r5, r0
    85cc:	movs	r0, #1
    85ce:	blx	6730 <curs_set@plt>
    85d2:	blx	6c48 <endwin@plt+0x4>
    85d6:	ldr	r0, [r4, r6]
    85d8:	ldr	r2, [pc, #28]	; (85f8 <CRT_fatalError@@Base+0x44>)
    85da:	movs	r1, #1
    85dc:	str	r5, [sp, #0]
    85de:	ldr	r3, [sp, #12]
    85e0:	add	r2, pc
    85e2:	ldr	r0, [r0, #0]
    85e4:	blx	6af4 <__fprintf_chk@plt+0x4>
    85e8:	movs	r0, #2
    85ea:	blx	69dc <exit@plt>
    85ee:	nop
    85f0:	asrs	r2, r1, #29
    85f2:	movs	r2, r0
    85f4:	lsls	r0, r5, #9
    85f6:	movs	r0, r0
    85f8:	blt.n	84fc <ColumnsPanel_update@@Base+0x8c8>
	...

000085fc <CRT_readKey@@Base>:
    85fc:	push	{r4, lr}
    85fe:	blx	66f4 <nocbreak@plt>
    8602:	ldr	r4, [pc, #44]	; (8630 <CRT_readKey@@Base+0x34>)
    8604:	blx	6a3c <cbreak@plt>
    8608:	ldr	r2, [pc, #40]	; (8634 <CRT_readKey@@Base+0x38>)
    860a:	movs	r1, #0
    860c:	add	r4, pc
    860e:	mov	r3, r4
    8610:	ldr	r4, [r4, r2]
    8612:	ldr	r0, [r4, #0]
    8614:	blx	6650 <nodelay@plt+0x4>
    8618:	ldr	r0, [r4, #0]
    861a:	blx	6860 <wgetch@plt>
    861e:	ldr	r3, [pc, #24]	; (8638 <CRT_readKey@@Base+0x3c>)
    8620:	add	r3, pc
    8622:	mov	r4, r0
    8624:	ldr	r0, [r3, #0]
    8626:	blx	66e8 <halfdelay@plt+0x4>
    862a:	mov	r0, r4
    862c:	pop	{r4, pc}
    862e:	nop
    8630:	asrs	r0, r0, #28
    8632:	movs	r2, r0
    8634:	lsls	r4, r5, #9
    8636:	movs	r0, r0
    8638:	adds	r1, #88	; 0x58
    863a:	movs	r2, r0

0000863c <CRT_disableDelay@@Base>:
    863c:	push	{r4, lr}
    863e:	blx	66f4 <nocbreak@plt>
    8642:	ldr	r4, [pc, #24]	; (865c <CRT_disableDelay@@Base+0x20>)
    8644:	blx	6a3c <cbreak@plt>
    8648:	ldr	r2, [pc, #20]	; (8660 <CRT_disableDelay@@Base+0x24>)
    864a:	movs	r1, #1
    864c:	add	r4, pc
    864e:	mov	r3, r4
    8650:	ldr	r3, [r4, r2]
    8652:	ldmia.w	sp!, {r4, lr}
    8656:	ldr	r0, [r3, #0]
    8658:	b.w	664c <nodelay@plt>
    865c:	asrs	r0, r0, #27
    865e:	movs	r2, r0
    8660:	lsls	r4, r5, #9
	...

00008664 <CRT_enableDelay@@Base>:
    8664:	ldr	r3, [pc, #8]	; (8670 <CRT_enableDelay@@Base+0xc>)
    8666:	add	r3, pc
    8668:	ldr	r0, [r3, #0]
    866a:	b.w	66e4 <halfdelay@plt>
    866e:	nop
    8670:	adds	r1, #18
    8672:	movs	r2, r0

00008674 <CRT_setColors@@Base>:
    8674:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8678:	sub.w	r6, r0, #5
    867c:	ldr	r3, [pc, #132]	; (8704 <CRT_setColors@@Base+0x90>)
    867e:	clz	r6, r6
    8682:	ldr.w	r9, [pc, #132]	; 8708 <CRT_setColors@@Base+0x94>
    8686:	mov	r8, r0
    8688:	add	r3, pc
    868a:	lsrs	r6, r6, #5
    868c:	movs	r5, #56	; 0x38
    868e:	movs	r7, #0
    8690:	add	r9, pc
    8692:	str	r0, [r3, #4]
    8694:	sxth.w	sl, r7
    8698:	movs	r4, #0
    869a:	adds	r0, r5, r4
    869c:	cmp	r4, #0
    869e:	ite	eq
    86a0:	moveq	r3, r6
    86a2:	movne	r3, #1
    86a4:	adds	r4, #1
    86a6:	mov	r1, sl
    86a8:	subs	r2, r4, #1
    86aa:	sxth	r0, r0
    86ac:	cbz	r3, 86f8 <CRT_setColors@@Base+0x84>
    86ae:	sxth	r2, r2
    86b0:	blx	6aa8 <init_pair@plt>
    86b4:	cmp	r4, #8
    86b6:	bne.n	869a <CRT_setColors@@Base+0x26>
    86b8:	adds	r7, #1
    86ba:	subs	r5, #8
    86bc:	cmp	r7, #8
    86be:	uxth	r5, r5
    86c0:	bne.n	8694 <CRT_setColors@@Base+0x20>
    86c2:	ldr	r3, [pc, #72]	; (870c <CRT_setColors@@Base+0x98>)
    86c4:	movs	r0, #21
    86c6:	ldr.w	r3, [r9, r3]
    86ca:	ldr	r3, [r3, #0]
    86cc:	cmp	r3, #8
    86ce:	ite	gt
    86d0:	movgt	r1, #8
    86d2:	movle	r1, #0
    86d4:	subs.w	r2, r8, #5
    86d8:	it	ne
    86da:	movne.w	r2, #4294967295	; 0xffffffff
    86de:	blx	6aa8 <init_pair@plt>
    86e2:	ldr	r3, [pc, #44]	; (8710 <CRT_setColors@@Base+0x9c>)
    86e4:	movs	r1, #228	; 0xe4
    86e6:	ldr	r2, [pc, #44]	; (8714 <CRT_setColors@@Base+0xa0>)
    86e8:	add	r3, pc
    86ea:	mla	r3, r1, r8, r3
    86ee:	ldr.w	r2, [r9, r2]
    86f2:	str	r3, [r2, #0]
    86f4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    86f8:	mov.w	r2, #4294967295	; 0xffffffff
    86fc:	blx	6aa8 <init_pair@plt>
    8700:	b.n	869a <CRT_setColors@@Base+0x26>
    8702:	nop
    8704:	adds	r0, #240	; 0xf0
    8706:	movs	r2, r0
    8708:	asrs	r4, r7, #25
    870a:	movs	r2, r0
    870c:	lsls	r4, r3, #10
    870e:	movs	r0, r0
    8710:	subs	r4, r4, r7
    8712:	movs	r2, r0
    8714:	lsls	r0, r6, #9
	...

00008718 <CRT_init@@Base>:
    8718:	ldr	r2, [pc, #612]	; (8980 <CRT_init@@Base+0x268>)
    871a:	ldr	r3, [pc, #616]	; (8984 <CRT_init@@Base+0x26c>)
    871c:	add	r2, pc
    871e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8722:	mov	r7, r0
    8724:	ldr	r3, [r2, r3]
    8726:	sub	sp, #16
    8728:	ldr	r6, [pc, #604]	; (8988 <CRT_init@@Base+0x270>)
    872a:	mov	r8, r1
    872c:	ldr	r3, [r3, #0]
    872e:	str	r3, [sp, #12]
    8730:	mov.w	r3, #0
    8734:	add	r6, pc
    8736:	blx	6b24 <initscr@plt>
    873a:	blx	665c <noecho@plt>
    873e:	cmp	r7, #0
    8740:	beq.w	8956 <CRT_init@@Base+0x23e>
    8744:	ldr	r3, [pc, #580]	; (898c <CRT_init@@Base+0x274>)
    8746:	add	r3, pc
    8748:	str	r7, [r3, #0]
    874a:	ldr	r4, [pc, #580]	; (8990 <CRT_init@@Base+0x278>)
    874c:	movs	r1, #228	; 0xe4
    874e:	ldr	r3, [pc, #580]	; (8994 <CRT_init@@Base+0x27c>)
    8750:	mov.w	r5, #5376	; 0x1500
    8754:	add	r4, pc
    8756:	ldr	r0, [pc, #576]	; (8998 <CRT_init@@Base+0x280>)
    8758:	subs	r2, r4, #4
    875a:	movt	r5, #32
    875e:	mla	r1, r1, r8, r4
    8762:	ldr	r3, [r6, r3]
    8764:	add	r0, pc
    8766:	adds	r4, #224	; 0xe0
    8768:	str.w	r8, [r0, #4]
    876c:	str	r1, [r3, #0]
    876e:	ldr.w	r3, [r2, #4]!
    8772:	cmp	r3, r5
    8774:	it	eq
    8776:	moveq	r3, #0
    8778:	cmp	r2, r4
    877a:	str.w	r3, [r2, #1368]	; 0x558
    877e:	bne.n	876e <CRT_init@@Base+0x56>
    8780:	mov	r0, r7
    8782:	blx	66e8 <halfdelay@plt+0x4>
    8786:	blx	6bc0 <nonl@plt>
    878a:	ldr	r3, [pc, #528]	; (899c <CRT_init@@Base+0x284>)
    878c:	movs	r1, #0
    878e:	ldr	r4, [r6, r3]
    8790:	ldr	r0, [r4, #0]
    8792:	blx	6a30 <intrflush@plt>
    8796:	movs	r1, #1
    8798:	ldr	r0, [r4, #0]
    879a:	blx	689c <keypad@plt>
    879e:	movs	r0, #0
    87a0:	blx	6900 <mouseinterval@plt>
    87a4:	movs	r0, #0
    87a6:	blx	6730 <curs_set@plt>
    87aa:	blx	6748 <has_colors@plt>
    87ae:	cmp	r0, #0
    87b0:	bne.w	8974 <CRT_init@@Base+0x25c>
    87b4:	ldr	r0, [pc, #488]	; (89a0 <CRT_init@@Base+0x288>)
    87b6:	add	r0, pc
    87b8:	blx	6918 <getenv@plt>
    87bc:	ldr	r3, [pc, #484]	; (89a4 <CRT_init@@Base+0x28c>)
    87be:	ldr	r1, [pc, #488]	; (89a8 <CRT_init@@Base+0x290>)
    87c0:	ldr	r4, [r6, r3]
    87c2:	add	r1, pc
    87c4:	str	r0, [r4, #0]
    87c6:	bl	ea48 <String_eq@@Base>
    87ca:	ldr	r4, [r4, #0]
    87cc:	movs	r2, #5
    87ce:	ldr	r3, [pc, #476]	; (89ac <CRT_init@@Base+0x294>)
    87d0:	ldr	r1, [pc, #476]	; (89b0 <CRT_init@@Base+0x298>)
    87d2:	add	r3, pc
    87d4:	add	r1, pc
    87d6:	cmp	r0, #0
    87d8:	mov	r0, r4
    87da:	ite	ne
    87dc:	movne	r5, #20
    87de:	moveq	r5, r2
    87e0:	str.w	r5, [r3, #1596]	; 0x63c
    87e4:	blx	6c2c <strncmp@plt>
    87e8:	cmp	r0, #0
    87ea:	beq.n	888a <CRT_init@@Base+0x172>
    87ec:	ldr	r1, [pc, #452]	; (89b4 <CRT_init@@Base+0x29c>)
    87ee:	mov	r0, r4
    87f0:	add	r1, pc
    87f2:	bl	ea48 <String_eq@@Base>
    87f6:	cmp	r0, #0
    87f8:	bne.n	888a <CRT_init@@Base+0x172>
    87fa:	ldr	r3, [pc, #444]	; (89b8 <CRT_init@@Base+0x2a0>)
    87fc:	movs	r0, #11
    87fe:	ldr	r4, [pc, #444]	; (89bc <CRT_init@@Base+0x2a4>)
    8800:	add	r4, pc
    8802:	ldr	r1, [r6, r3]
    8804:	blx	67a0 <signal@plt>
    8808:	movs	r0, #15
    880a:	mov	r1, r4
    880c:	str	r4, [sp, #4]
    880e:	blx	67a0 <signal@plt>
    8812:	ldr	r1, [sp, #4]
    8814:	movs	r0, #3
    8816:	blx	67a0 <signal@plt>
    881a:	blx	6634 <use_default_colors@plt>
    881e:	blx	6748 <has_colors@plt>
    8822:	cmp	r0, #0
    8824:	beq.w	8968 <CRT_init@@Base+0x250>
    8828:	ldr	r3, [pc, #404]	; (89c0 <CRT_init@@Base+0x2a8>)
    882a:	add	r3, pc
    882c:	ldr	r0, [r3, #4]
    882e:	bl	8674 <CRT_setColors@@Base>
    8832:	ldr	r1, [pc, #400]	; (89c4 <CRT_init@@Base+0x2ac>)
    8834:	movs	r0, #0
    8836:	add	r1, pc
    8838:	blx	6b48 <setlocale@plt>
    883c:	movs	r0, #14
    883e:	blx	6b78 <nl_langinfo@plt>
    8842:	ldr	r1, [pc, #388]	; (89c8 <CRT_init@@Base+0x2b0>)
    8844:	add	r1, pc
    8846:	blx	66b4 <strcmp@plt+0x4>
    884a:	ldr	r3, [pc, #384]	; (89cc <CRT_init@@Base+0x2b4>)
    884c:	add	r3, pc
    884e:	cmp	r0, #0
    8850:	ite	eq
    8852:	moveq	r2, #1
    8854:	movne	r2, #0
    8856:	strb	r2, [r3, #8]
    8858:	beq.w	8962 <CRT_init@@Base+0x24a>
    885c:	ldr	r2, [pc, #368]	; (89d0 <CRT_init@@Base+0x2b8>)
    885e:	add	r2, pc
    8860:	adds	r2, #28
    8862:	ldr	r3, [pc, #368]	; (89d4 <CRT_init@@Base+0x2bc>)
    8864:	movs	r0, #1
    8866:	movs	r1, #0
    8868:	movt	r0, #33	; 0x21
    886c:	add	r3, pc
    886e:	str	r2, [r3, #56]	; 0x38
    8870:	blx	6ba8 <mousemask@plt>
    8874:	ldr	r2, [pc, #352]	; (89d8 <CRT_init@@Base+0x2c0>)
    8876:	ldr	r3, [pc, #268]	; (8984 <CRT_init@@Base+0x26c>)
    8878:	add	r2, pc
    887a:	ldr	r3, [r2, r3]
    887c:	ldr	r2, [r3, #0]
    887e:	ldr	r3, [sp, #12]
    8880:	eors	r2, r3
    8882:	bne.n	897a <CRT_init@@Base+0x262>
    8884:	add	sp, #16
    8886:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    888a:	ldr	r0, [pc, #336]	; (89dc <CRT_init@@Base+0x2c4>)
    888c:	mov.w	r1, #262	; 0x106
    8890:	add	r5, sp, #8
    8892:	mov.w	r4, #302	; 0x12e
    8896:	add	r0, pc
    8898:	blx	6c38 <define_key@plt>
    889c:	ldr	r0, [pc, #320]	; (89e0 <CRT_init@@Base+0x2c8>)
    889e:	mov.w	r1, #360	; 0x168
    88a2:	add	r0, pc
    88a4:	blx	6c38 <define_key@plt>
    88a8:	ldr	r0, [pc, #312]	; (89e4 <CRT_init@@Base+0x2cc>)
    88aa:	mov.w	r1, #262	; 0x106
    88ae:	add	r0, pc
    88b0:	blx	6c38 <define_key@plt>
    88b4:	ldr	r0, [pc, #304]	; (89e8 <CRT_init@@Base+0x2d0>)
    88b6:	mov.w	r1, #360	; 0x168
    88ba:	add	r0, pc
    88bc:	blx	6c38 <define_key@plt>
    88c0:	ldr	r0, [pc, #296]	; (89ec <CRT_init@@Base+0x2d4>)
    88c2:	movw	r1, #265	; 0x109
    88c6:	add	r0, pc
    88c8:	blx	6c38 <define_key@plt>
    88cc:	ldr	r0, [pc, #288]	; (89f0 <CRT_init@@Base+0x2d8>)
    88ce:	mov.w	r1, #266	; 0x10a
    88d2:	add	r0, pc
    88d4:	blx	6c38 <define_key@plt>
    88d8:	ldr	r0, [pc, #280]	; (89f4 <CRT_init@@Base+0x2dc>)
    88da:	movw	r1, #267	; 0x10b
    88de:	add	r0, pc
    88e0:	blx	6c38 <define_key@plt>
    88e4:	ldr	r0, [pc, #272]	; (89f8 <CRT_init@@Base+0x2e0>)
    88e6:	mov.w	r1, #268	; 0x10c
    88ea:	add	r0, pc
    88ec:	blx	6c38 <define_key@plt>
    88f0:	ldr	r0, [pc, #264]	; (89fc <CRT_init@@Base+0x2e4>)
    88f2:	movw	r1, #265	; 0x109
    88f6:	add	r0, pc
    88f8:	blx	6c38 <define_key@plt>
    88fc:	ldr	r0, [pc, #256]	; (8a00 <CRT_init@@Base+0x2e8>)
    88fe:	mov.w	r1, #266	; 0x10a
    8902:	add	r0, pc
    8904:	blx	6c38 <define_key@plt>
    8908:	ldr	r0, [pc, #248]	; (8a04 <CRT_init@@Base+0x2ec>)
    890a:	movw	r1, #267	; 0x10b
    890e:	add	r0, pc
    8910:	blx	6c38 <define_key@plt>
    8914:	ldr	r0, [pc, #240]	; (8a08 <CRT_init@@Base+0x2f0>)
    8916:	mov.w	r1, #268	; 0x10c
    891a:	add	r0, pc
    891c:	blx	6c38 <define_key@plt>
    8920:	ldr	r0, [pc, #232]	; (8a0c <CRT_init@@Base+0x2f4>)
    8922:	mov.w	r1, #282	; 0x11a
    8926:	add	r0, pc
    8928:	blx	6c38 <define_key@plt>
    892c:	ldr	r3, [pc, #224]	; (8a10 <CRT_init@@Base+0x2f8>)
    892e:	add	r3, pc
    8930:	ldr	r3, [r3, #0]
    8932:	strh.w	r3, [sp, #8]
    8936:	lsrs	r3, r3, #16
    8938:	strb.w	r3, [sp, #10]
    893c:	add.w	r3, r4, #51	; 0x33
    8940:	mov	r1, r4
    8942:	mov	r0, r5
    8944:	adds	r4, #1
    8946:	strb.w	r3, [sp, #9]
    894a:	blx	6c38 <define_key@plt>
    894e:	cmp.w	r4, #328	; 0x148
    8952:	bne.n	893c <CRT_init@@Base+0x224>
    8954:	b.n	87fa <CRT_init@@Base+0xe2>
    8956:	ldr	r3, [pc, #188]	; (8a14 <CRT_init@@Base+0x2fc>)
    8958:	movs	r2, #1
    895a:	mov	r7, r2
    895c:	add	r3, pc
    895e:	str	r2, [r3, #0]
    8960:	b.n	874a <CRT_init@@Base+0x32>
    8962:	ldr	r2, [pc, #180]	; (8a18 <CRT_init@@Base+0x300>)
    8964:	add	r2, pc
    8966:	b.n	8862 <CRT_init@@Base+0x14a>
    8968:	ldr	r3, [pc, #176]	; (8a1c <CRT_init@@Base+0x304>)
    896a:	movs	r2, #1
    896c:	mov	r0, r2
    896e:	add	r3, pc
    8970:	str	r2, [r3, #4]
    8972:	b.n	882e <CRT_init@@Base+0x116>
    8974:	blx	661c <start_color@plt>
    8978:	b.n	87b4 <CRT_init@@Base+0x9c>
    897a:	blx	67d0 <__stack_chk_fail@plt>
    897e:	nop
    8980:	asrs	r0, r6, #23
    8982:	movs	r2, r0
    8984:	lsls	r0, r0, #9
    8986:	movs	r0, r0
    8988:	asrs	r0, r3, #23
    898a:	movs	r2, r0
    898c:	adds	r0, #50	; 0x32
    898e:	movs	r2, r0
    8990:	subs	r0, r7, r5
    8992:	movs	r2, r0
    8994:	lsls	r0, r6, #9
    8996:	movs	r0, r0
    8998:	adds	r0, #20
    899a:	movs	r2, r0
    899c:	lsls	r4, r5, #9
    899e:	movs	r0, r0
    89a0:	bls.n	8908 <CRT_init@@Base+0x1f0>
    89a2:	movs	r0, r0
    89a4:	lsls	r4, r0, #10
    89a6:	movs	r0, r0
    89a8:	bls.n	8908 <CRT_init@@Base+0x1f0>
    89aa:	movs	r0, r0
    89ac:	subs	r2, r7, r3
    89ae:	movs	r2, r0
    89b0:	bls.n	88fc <CRT_init@@Base+0x1e4>
    89b2:	movs	r0, r0
    89b4:	bls.n	8978 <CRT_init@@Base+0x260>
    89b6:	movs	r0, r0
    89b8:	lsls	r4, r1, #11
    89ba:	movs	r0, r0
    89bc:	stc2	15, cr15, [sp, #1020]	; 0x3fc
    89c0:	cmp	r7, #78	; 0x4e
    89c2:	movs	r2, r0
    89c4:	svc	106	; 0x6a
    89c6:	movs	r0, r0
    89c8:	bls.n	88f4 <CRT_init@@Base+0x1dc>
    89ca:	movs	r0, r0
    89cc:	cmp	r7, #44	; 0x2c
    89ce:	movs	r2, r0
    89d0:	movs	r0, #178	; 0xb2
    89d2:	movs	r2, r0
    89d4:	movs	r0, #164	; 0xa4
    89d6:	movs	r2, r0
    89d8:	asrs	r4, r2, #18
    89da:	movs	r2, r0
    89dc:	bhi.n	89b4 <CRT_init@@Base+0x29c>
    89de:	movs	r0, r0
    89e0:	bhi.n	89a8 <CRT_init@@Base+0x290>
    89e2:	movs	r0, r0
    89e4:	bhi.n	899c <CRT_init@@Base+0x284>
    89e6:	movs	r0, r0
    89e8:	bhi.n	8998 <CRT_init@@Base+0x280>
    89ea:	movs	r0, r0
    89ec:	bhi.n	8994 <CRT_init@@Base+0x27c>
    89ee:	movs	r0, r0
    89f0:	bhi.n	8988 <CRT_init@@Base+0x270>
    89f2:	movs	r0, r0
    89f4:	bhi.n	897c <CRT_init@@Base+0x264>
    89f6:	movs	r0, r0
    89f8:	bhi.n	8970 <CRT_init@@Base+0x258>
    89fa:	movs	r0, r0
    89fc:	bhi.n	8964 <CRT_init@@Base+0x24c>
    89fe:	movs	r0, r0
    8a00:	bhi.n	8960 <CRT_init@@Base+0x248>
    8a02:	movs	r0, r0
    8a04:	bhi.n	895c <CRT_init@@Base+0x244>
    8a06:	movs	r0, r0
    8a08:	bhi.n	8958 <CRT_init@@Base+0x240>
    8a0a:	movs	r0, r0
    8a0c:	bhi.n	8954 <CRT_init@@Base+0x23c>
    8a0e:	movs	r0, r0
    8a10:	bhi.n	8978 <CRT_init@@Base+0x260>
    8a12:	movs	r0, r0
    8a14:	cmp	r6, #28
    8a16:	movs	r2, r0
    8a18:	subs	r4, r5, #6
    8a1a:	movs	r2, r0
    8a1c:	cmp	r6, #10
    8a1e:	movs	r2, r0

00008a20 <MainPanel_getValue@@Base>:
    8a20:	push	{r3, lr}
    8a22:	bl	b2c4 <Panel_get@@Base>
    8a26:	cbz	r0, 8a2c <MainPanel_getValue@@Base+0xc>
    8a28:	ldr	r0, [r0, #28]
    8a2a:	pop	{r3, pc}
    8a2c:	ldr	r0, [pc, #4]	; (8a34 <MainPanel_getValue@@Base+0x14>)
    8a2e:	add	r0, pc
    8a30:	pop	{r3, pc}
    8a32:	nop
    8a34:	ble.n	8b1c <MainPanel_pidSearch@@Base+0x60>
	...

00008a38 <MainPanel_delete@@Base>:
    8a38:	push	{r4, lr}
    8a3a:	mov	r4, r0
    8a3c:	bl	b1e0 <Panel_done@@Base>
    8a40:	movw	r3, #9904	; 0x26b0
    8a44:	ldr	r0, [r4, r3]
    8a46:	bl	102c8 <IncSet_delete@@Base>
    8a4a:	movw	r3, #9908	; 0x26b4
    8a4e:	ldr	r0, [r4, r3]
    8a50:	blx	6758 <free@plt+0x4>
    8a54:	mov	r0, r4
    8a56:	ldmia.w	sp!, {r4, lr}
    8a5a:	b.w	6754 <free@plt>
    8a5e:	nop

00008a60 <MainPanel_updateTreeFunctions@@Base>:
    8a60:	push	{lr}
    8a62:	sub	sp, #12
    8a64:	ldr	r0, [r0, #56]	; 0x38
    8a66:	cbz	r1, 8a8a <MainPanel_updateTreeFunctions@@Base+0x2a>
    8a68:	ldr	r2, [pc, #64]	; (8aac <MainPanel_updateTreeFunctions@@Base+0x4c>)
    8a6a:	movw	r1, #269	; 0x10d
    8a6e:	str	r0, [sp, #4]
    8a70:	add	r2, pc
    8a72:	bl	9284 <FunctionBar_setLabel@@Base>
    8a76:	ldr	r2, [pc, #56]	; (8ab0 <MainPanel_updateTreeFunctions@@Base+0x50>)
    8a78:	ldr	r0, [sp, #4]
    8a7a:	mov.w	r1, #270	; 0x10e
    8a7e:	add	r2, pc
    8a80:	add	sp, #12
    8a82:	ldr.w	lr, [sp], #4
    8a86:	b.w	9284 <FunctionBar_setLabel@@Base>
    8a8a:	ldr	r2, [pc, #40]	; (8ab4 <MainPanel_updateTreeFunctions@@Base+0x54>)
    8a8c:	movw	r1, #269	; 0x10d
    8a90:	str	r0, [sp, #4]
    8a92:	add	r2, pc
    8a94:	bl	9284 <FunctionBar_setLabel@@Base>
    8a98:	ldr	r2, [pc, #28]	; (8ab8 <MainPanel_updateTreeFunctions@@Base+0x58>)
    8a9a:	ldr	r0, [sp, #4]
    8a9c:	mov.w	r1, #270	; 0x10e
    8aa0:	add	r2, pc
    8aa2:	add	sp, #12
    8aa4:	ldr.w	lr, [sp], #4
    8aa8:	b.w	9284 <FunctionBar_setLabel@@Base>
    8aac:	bvc.n	89e8 <CRT_init@@Base+0x2d0>
    8aae:	movs	r0, r0
    8ab0:	bvc.n	89e0 <CRT_init@@Base+0x2c8>
    8ab2:	movs	r0, r0
    8ab4:	bvc.n	89cc <CRT_init@@Base+0x2b4>
    8ab6:	movs	r0, r0
    8ab8:	bvc.n	89c4 <CRT_init@@Base+0x2ac>
	...

00008abc <MainPanel_pidSearch@@Base>:
    8abc:	movw	r3, #9912	; 0x26b8
    8ac0:	subs	r1, #48	; 0x30
    8ac2:	push	{r4, r5, r6, lr}
    8ac4:	mov	r5, r0
    8ac6:	ldr	r6, [r0, r3]
    8ac8:	movs	r4, #0
    8aca:	add	r6, r1
    8acc:	b.n	8adc <MainPanel_pidSearch@@Base+0x20>
    8ace:	bl	b2c4 <Panel_get@@Base>
    8ad2:	cbz	r0, 8ada <MainPanel_pidSearch@@Base+0x1e>
    8ad4:	ldr	r3, [r0, #16]
    8ad6:	cmp	r3, r6
    8ad8:	beq.n	8b08 <MainPanel_pidSearch@@Base+0x4c>
    8ada:	adds	r4, #1
    8adc:	mov	r0, r5
    8ade:	bl	b348 <Panel_size@@Base>
    8ae2:	mov	r1, r4
    8ae4:	cmp	r0, r4
    8ae6:	mov	r0, r5
    8ae8:	bgt.n	8ace <MainPanel_pidSearch@@Base+0x12>
    8aea:	movs	r3, #10
    8aec:	movw	r2, #38528	; 0x9680
    8af0:	mul.w	r6, r3, r6
    8af4:	movt	r2, #152	; 0x98
    8af8:	movw	r3, #9912	; 0x26b8
    8afc:	cmp	r6, r2
    8afe:	itet	gt
    8b00:	movgt	r2, #0
    8b02:	strle	r6, [r5, r3]
    8b04:	strgt	r2, [r5, r3]
    8b06:	pop	{r4, r5, r6, pc}
    8b08:	mov	r1, r4
    8b0a:	mov	r0, r5
    8b0c:	bl	b350 <Panel_setSelected@@Base>
    8b10:	b.n	8aea <MainPanel_pidSearch@@Base+0x2e>
    8b12:	nop
    8b14:	add.w	r3, r1, #9984	; 0x2700
    8b18:	adds	r3, #16
    8b1a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8b1e:	cmp.w	r3, #1000	; 0x3e8
    8b22:	ldr.w	r8, [pc, #552]	; 8d4c <MainPanel_pidSearch@@Base+0x290>
    8b26:	sub	sp, #12
    8b28:	mov	r4, r0
    8b2a:	add	r8, pc
    8b2c:	bls.n	8b86 <MainPanel_pidSearch@@Base+0xca>
    8b2e:	adds	r0, r1, #1
    8b30:	mov	r5, r1
    8b32:	beq.w	8ca0 <MainPanel_pidSearch@@Base+0x1e4>
    8b36:	movw	r6, #9904	; 0x26b0
    8b3a:	ldr	r0, [r4, r6]
    8b3c:	ldr	r3, [r0, #112]	; 0x70
    8b3e:	cmp	r3, #0
    8b40:	beq.w	8c5a <MainPanel_pidSearch@@Base+0x19e>
    8b44:	ldr	r3, [pc, #520]	; (8d50 <MainPanel_pidSearch@@Base+0x294>)
    8b46:	movs	r5, #0
    8b48:	mov	r2, r4
    8b4a:	str	r5, [sp, #0]
    8b4c:	add	r3, pc
    8b4e:	bl	102e4 <IncSet_handleKey@@Base>
    8b52:	cmp	r0, #0
    8b54:	beq.w	8cc6 <MainPanel_pidSearch@@Base+0x20a>
    8b58:	ldr	r2, [r4, r6]
    8b5a:	ldrb.w	r3, [r2, #120]	; 0x78
    8b5e:	cbz	r3, 8b64 <MainPanel_pidSearch@@Base+0xa8>
    8b60:	add.w	r3, r2, #56	; 0x38
    8b64:	movw	r1, #9900	; 0x26ac
    8b68:	ldrb.w	r5, [r2, #121]	; 0x79
    8b6c:	ldr	r0, [r4, r1]
    8b6e:	ldr	r2, [r0, #8]
    8b70:	str	r3, [r2, #32]
    8b72:	cmp	r5, #0
    8b74:	bne.w	8d48 <MainPanel_pidSearch@@Base+0x28c>
    8b78:	mov.w	r9, #1
    8b7c:	mov	fp, r5
    8b7e:	mov	sl, r9
    8b80:	mov	r6, r9
    8b82:	movs	r7, #33	; 0x21
    8b84:	b.n	8bce <MainPanel_pidSearch@@Base+0x112>
    8b86:	movw	r2, #9900	; 0x26ac
    8b8a:	ldrsh.w	r1, [r0, #48]	; 0x30
    8b8e:	ldr	r2, [r0, r2]
    8b90:	add	r1, r3
    8b92:	adds	r1, #1
    8b94:	ldr	r0, [r2, #8]
    8b96:	ldr	r6, [r2, #0]
    8b98:	bl	cef0 <ProcessList_keyAt@@Base>
    8b9c:	ldr	r3, [r6, #52]	; 0x34
    8b9e:	mov	r1, r0
    8ba0:	cmp	r3, r1
    8ba2:	mov	r0, r6
    8ba4:	beq.w	8d0e <MainPanel_pidSearch@@Base+0x252>
    8ba8:	bl	11698 <Action_setSortKey@@Base>
    8bac:	mov.w	fp, #4
    8bb0:	mov.w	r9, #3
    8bb4:	mov.w	sl, #1
    8bb8:	and.w	r6, r0, #65	; 0x41
    8bbc:	orr.w	r7, r0, #39	; 0x27
    8bc0:	orr.w	r6, r6, #1
    8bc4:	and.w	r5, r0, #16
    8bc8:	movw	r3, #9900	; 0x26ac
    8bcc:	ldr	r0, [r4, r3]
    8bce:	ldr	r3, [r0, #0]
    8bd0:	mov	r0, r4
    8bd2:	ldrb.w	r1, [r3, #58]	; 0x3a
    8bd6:	bl	8a60 <MainPanel_updateTreeFunctions@@Base>
    8bda:	movw	r3, #9904	; 0x26b0
    8bde:	ldr	r0, [r4, r3]
    8be0:	bl	105c0 <IncSet_drawBar@@Base>
    8be4:	cbz	r6, 8bfc <MainPanel_pidSearch@@Base+0x140>
    8be6:	movw	r3, #9900	; 0x26ac
    8bea:	mov	r0, r4
    8bec:	ldr	r3, [r4, r3]
    8bee:	ldr	r6, [r3, #8]
    8bf0:	bl	b220 <Panel_getHeader@@Base>
    8bf4:	mov	r1, r0
    8bf6:	mov	r0, r6
    8bf8:	bl	ccf4 <ProcessList_printHeader@@Base>
    8bfc:	cmp.w	sl, #0
    8c00:	ite	ne
    8c02:	movne	r6, #9
    8c04:	moveq	r6, #1
    8c06:	cmp.w	r9, #0
    8c0a:	beq.n	8c10 <MainPanel_pidSearch@@Base+0x154>
    8c0c:	orr.w	r6, r6, #16
    8c10:	cmp.w	fp, #0
    8c14:	beq.n	8c24 <MainPanel_pidSearch@@Base+0x168>
    8c16:	movw	r3, #9900	; 0x26ac
    8c1a:	movs	r2, #1
    8c1c:	ldr	r3, [r4, r3]
    8c1e:	ldr	r3, [r3, #0]
    8c20:	strb.w	r2, [r3, #71]	; 0x47
    8c24:	cmp	r5, #0
    8c26:	bne.n	8d04 <MainPanel_pidSearch@@Base+0x248>
    8c28:	lsls	r2, r7, #28
    8c2a:	bpl.n	8c34 <MainPanel_pidSearch@@Base+0x178>
    8c2c:	mov	r0, r6
    8c2e:	add	sp, #12
    8c30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c34:	movw	r3, #9900	; 0x26ac
    8c38:	mov.w	r1, #4294967295	; 0xffffffff
    8c3c:	ldr	r2, [r4, r3]
    8c3e:	mov	r0, r4
    8c40:	ldr	r3, [pc, #272]	; (8d54 <MainPanel_pidSearch@@Base+0x298>)
    8c42:	ldr	r2, [r2, #8]
    8c44:	str	r1, [r2, #24]
    8c46:	ldr.w	r3, [r8, r3]
    8c4a:	ldr	r3, [r3, #0]
    8c4c:	ldr	r1, [r3, #28]
    8c4e:	bl	b218 <Panel_setSelectionColor@@Base>
    8c52:	mov	r0, r6
    8c54:	add	sp, #12
    8c56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8c5a:	cmp	r1, #27
    8c5c:	it	eq
    8c5e:	moveq	r6, #1
    8c60:	beq.n	8c2c <MainPanel_pidSearch@@Base+0x170>
    8c62:	subs	r3, r1, #1
    8c64:	cmp.w	r3, #510	; 0x1fe
    8c68:	bcs.n	8ca0 <MainPanel_pidSearch@@Base+0x1e4>
    8c6a:	movw	r3, #9908	; 0x26b4
    8c6e:	ldr	r3, [r4, r3]
    8c70:	ldr.w	r3, [r3, r1, lsl #2]
    8c74:	cmp	r3, #0
    8c76:	beq.n	8d2c <MainPanel_pidSearch@@Base+0x270>
    8c78:	movw	r2, #9900	; 0x26ac
    8c7c:	ldr	r0, [r4, r2]
    8c7e:	blx	r3
    8c80:	and.w	r3, r0, #32
    8c84:	and.w	r6, r0, #65	; 0x41
    8c88:	and.w	sl, r0, #1
    8c8c:	and.w	r9, r0, #3
    8c90:	and.w	fp, r0, #4
    8c94:	and.w	r5, r0, #16
    8c98:	mov	r7, r0
    8c9a:	cmp	r3, #0
    8c9c:	beq.n	8be4 <MainPanel_pidSearch@@Base+0x128>
    8c9e:	b.n	8bc8 <MainPanel_pidSearch@@Base+0x10c>
    8ca0:	blx	69d0 <__ctype_b_loc@plt>
    8ca4:	ldr	r3, [r0, #0]
    8ca6:	ldrh.w	r3, [r3, r5, lsl #1]
    8caa:	lsls	r1, r3, #20
    8cac:	bmi.n	8d3a <MainPanel_pidSearch@@Base+0x27e>
    8cae:	adds	r5, #1
    8cb0:	itt	eq
    8cb2:	moveq	r7, #8
    8cb4:	moveq	r6, #2
    8cb6:	beq.n	8c28 <MainPanel_pidSearch@@Base+0x16c>
    8cb8:	movs	r3, #0
    8cba:	movw	r2, #9912	; 0x26b8
    8cbe:	mov	r7, r3
    8cc0:	movs	r6, #2
    8cc2:	str	r3, [r4, r2]
    8cc4:	b.n	8c28 <MainPanel_pidSearch@@Base+0x16c>
    8cc6:	ldr	r3, [r4, r6]
    8cc8:	movs	r6, #1
    8cca:	ldrb.w	r7, [r3, #121]	; 0x79
    8cce:	cmp	r7, #0
    8cd0:	beq.n	8c28 <MainPanel_pidSearch@@Base+0x16c>
    8cd2:	movw	r3, #9900	; 0x26ac
    8cd6:	mov	r6, r0
    8cd8:	ldr	r0, [r4, r3]
    8cda:	bl	10694 <Action_follow@@Base>
    8cde:	orrs	r0, r6
    8ce0:	and.w	r3, r0, #32
    8ce4:	orr.w	r7, r0, #8
    8ce8:	and.w	r6, r0, #65	; 0x41
    8cec:	and.w	sl, r0, #1
    8cf0:	and.w	r9, r0, #3
    8cf4:	and.w	fp, r0, #4
    8cf8:	and.w	r5, r0, #16
    8cfc:	cmp	r3, #0
    8cfe:	beq.w	8be4 <MainPanel_pidSearch@@Base+0x128>
    8d02:	b.n	8bc8 <MainPanel_pidSearch@@Base+0x10c>
    8d04:	movs	r6, #4
    8d06:	mov	r0, r6
    8d08:	add	sp, #12
    8d0a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8d0e:	bl	e860 <Settings_invertSortOrder@@Base>
    8d12:	mov.w	sl, #1
    8d16:	movs	r3, #0
    8d18:	mov.w	fp, #4
    8d1c:	strb.w	r3, [r6, #58]	; 0x3a
    8d20:	mov	r5, r3
    8d22:	mov	r6, sl
    8d24:	mov.w	r9, #3
    8d28:	movs	r7, #39	; 0x27
    8d2a:	b.n	8bc8 <MainPanel_pidSearch@@Base+0x10c>
    8d2c:	blx	69d0 <__ctype_b_loc@plt>
    8d30:	ldr	r3, [r0, #0]
    8d32:	ldrh.w	r3, [r3, r5, lsl #1]
    8d36:	lsls	r3, r3, #20
    8d38:	bpl.n	8cb8 <MainPanel_pidSearch@@Base+0x1fc>
    8d3a:	mov	r1, r5
    8d3c:	mov	r0, r4
    8d3e:	bl	8abc <MainPanel_pidSearch@@Base>
    8d42:	movs	r7, #0
    8d44:	movs	r6, #2
    8d46:	b.n	8c28 <MainPanel_pidSearch@@Base+0x16c>
    8d48:	movs	r6, #33	; 0x21
    8d4a:	b.n	8cda <MainPanel_pidSearch@@Base+0x21e>
    8d4c:	asrs	r2, r4, #7
    8d4e:	movs	r2, r0
    8d50:	mrc2	15, 6, pc, cr1, cr15, {7}
    8d54:	lsls	r0, r6, #9
	...

00008d58 <MainPanel_selectedPid@@Base>:
    8d58:	push	{r3, lr}
    8d5a:	bl	b2f8 <Panel_getSelected@@Base>
    8d5e:	cbz	r0, 8d64 <MainPanel_selectedPid@@Base+0xc>
    8d60:	ldr	r0, [r0, #16]
    8d62:	pop	{r3, pc}
    8d64:	mov.w	r0, #4294967295	; 0xffffffff
    8d68:	pop	{r3, pc}
    8d6a:	nop

00008d6c <MainPanel_foreachProcess@@Base>:
    8d6c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8d70:	movs	r4, #0
    8d72:	mov	r5, r0
    8d74:	mov	r9, r1
    8d76:	mov	r7, r2
    8d78:	mov	fp, r3
    8d7a:	mov	sl, r4
    8d7c:	mov.w	r8, #1
    8d80:	mov	r0, r5
    8d82:	bl	b348 <Panel_size@@Base>
    8d86:	mov	r1, r4
    8d88:	mov	r3, r0
    8d8a:	cmp	r3, r4
    8d8c:	mov	r0, r5
    8d8e:	add.w	r4, r4, #1
    8d92:	ble.n	8dac <MainPanel_foreachProcess@@Base+0x40>
    8d94:	bl	b2c4 <Panel_get@@Base>
    8d98:	mov	r1, r7
    8d9a:	ldrb.w	r6, [r0, #46]	; 0x2e
    8d9e:	cmp	r6, #0
    8da0:	beq.n	8d80 <MainPanel_foreachProcess@@Base+0x14>
    8da2:	blx	r9
    8da4:	mov	sl, r6
    8da6:	and.w	r8, r0, r8
    8daa:	b.n	8d80 <MainPanel_foreachProcess@@Base+0x14>
    8dac:	cmp.w	sl, #0
    8db0:	beq.n	8dc2 <MainPanel_foreachProcess@@Base+0x56>
    8db2:	cmp.w	fp, #0
    8db6:	beq.n	8dbc <MainPanel_foreachProcess@@Base+0x50>
    8db8:	strb.w	sl, [fp]
    8dbc:	mov	r0, r8
    8dbe:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    8dc2:	bl	b2f8 <Panel_getSelected@@Base>
    8dc6:	cmp	r0, #0
    8dc8:	beq.n	8db2 <MainPanel_foreachProcess@@Base+0x46>
    8dca:	mov	r1, r7
    8dcc:	blx	r9
    8dce:	and.w	r8, r0, r8
    8dd2:	b.n	8db2 <MainPanel_foreachProcess@@Base+0x46>

00008dd4 <MainPanel_new@@Base>:
    8dd4:	push	{r4, r5, r6, lr}
    8dd6:	movw	r0, #9916	; 0x26bc
    8dda:	sub	sp, #16
    8ddc:	ldr	r5, [pc, #100]	; (8e44 <MainPanel_new@@Base+0x70>)
    8dde:	bl	11d84 <xMalloc@@Base>
    8de2:	ldr	r3, [pc, #100]	; (8e48 <MainPanel_new@@Base+0x74>)
    8de4:	movs	r2, #0
    8de6:	add	r5, pc
    8de8:	add	r3, pc
    8dea:	mov	r1, r2
    8dec:	movw	r6, #9908	; 0x26b4
    8df0:	mov	r4, r0
    8df2:	ldr	r0, [pc, #88]	; (8e4c <MainPanel_new@@Base+0x78>)
    8df4:	str	r3, [r4, #0]
    8df6:	add	r0, pc
    8df8:	bl	90fc <FunctionBar_new@@Base>
    8dfc:	ldr	r2, [pc, #80]	; (8e50 <MainPanel_new@@Base+0x7c>)
    8dfe:	movs	r1, #0
    8e00:	str	r1, [sp, #8]
    8e02:	movs	r3, #1
    8e04:	mov	r1, r3
    8e06:	str	r0, [sp, #12]
    8e08:	mov	r0, r4
    8e0a:	ldr	r5, [r5, r2]
    8e0c:	mov	r2, r3
    8e0e:	str	r3, [sp, #0]
    8e10:	str	r5, [sp, #4]
    8e12:	bl	b130 <Panel_init@@Base>
    8e16:	movs	r1, #4
    8e18:	movw	r0, #511	; 0x1ff
    8e1c:	bl	11da0 <xCalloc@@Base>
    8e20:	mov	r3, r0
    8e22:	ldr	r0, [r4, #56]	; 0x38
    8e24:	str	r3, [r4, r6]
    8e26:	bl	10254 <IncSet_new@@Base>
    8e2a:	movw	r3, #9904	; 0x26b0
    8e2e:	mov	r2, r0
    8e30:	ldr	r0, [r4, r6]
    8e32:	str	r2, [r4, r3]
    8e34:	bl	116ac <Action_setBindings@@Base>
    8e38:	ldr	r0, [r4, r6]
    8e3a:	bl	11e50 <Platform_setBindings@@Base>
    8e3e:	mov	r0, r4
    8e40:	add	sp, #16
    8e42:	pop	{r4, r5, r6, pc}
    8e44:	lsrs	r6, r4, #28
    8e46:	movs	r2, r0
    8e48:	subs	r4, r4, r5
    8e4a:	movs	r2, r0
    8e4c:	lsrs	r6, r7, #1
    8e4e:	movs	r2, r0
    8e50:	lsls	r0, r7, #8
	...

00008e54 <MainPanel_setState@@Base>:
    8e54:	movw	r3, #9900	; 0x26ac
    8e58:	str	r1, [r0, r3]
    8e5a:	bx	lr
    8e5c:	push	{r4, r5, r6, r7, lr}
    8e5e:	sub	sp, #12
    8e60:	mov	r4, r1
    8e62:	mov	r5, r0
    8e64:	bl	b2f8 <Panel_getSelected@@Base>
    8e68:	cmp.w	r4, #286	; 0x11e
    8e6c:	mov	r6, r0
    8e6e:	beq.n	8e9e <MainPanel_setState@@Base+0x4a>
    8e70:	bgt.n	8e8e <MainPanel_setState@@Base+0x3a>
    8e72:	subs	r4, #10
    8e74:	cmp	r4, #22
    8e76:	bhi.n	8e88 <MainPanel_setState@@Base+0x34>
    8e78:	movs	r1, #1
    8e7a:	movs	r3, #9
    8e7c:	lsl.w	r4, r1, r4
    8e80:	movt	r3, #64	; 0x40
    8e84:	ands	r3, r4
    8e86:	cbnz	r3, 8e9e <MainPanel_setState@@Base+0x4a>
    8e88:	movs	r0, #2
    8e8a:	add	sp, #12
    8e8c:	pop	{r4, r5, r6, r7, pc}
    8e8e:	movw	r3, #343	; 0x157
    8e92:	cmp	r4, r3
    8e94:	beq.n	8e9e <MainPanel_setState@@Base+0x4a>
    8e96:	movw	r3, #409	; 0x199
    8e9a:	cmp	r4, r3
    8e9c:	bne.n	8e88 <MainPanel_setState@@Base+0x34>
    8e9e:	mov	r0, r6
    8ea0:	movw	r7, #9904	; 0x26b0
    8ea4:	bl	78f4 <CheckItem_get@@Base>
    8ea8:	movs	r4, #1
    8eaa:	eor.w	r1, r0, #1
    8eae:	mov	r0, r6
    8eb0:	uxtb	r1, r1
    8eb2:	bl	78e8 <CheckItem_set@@Base>
    8eb6:	ldr	r2, [r5, r7]
    8eb8:	movw	r3, #9900	; 0x26ac
    8ebc:	ldr	r3, [r5, r3]
    8ebe:	ldr	r6, [r2, #28]
    8ec0:	strb.w	r4, [r3, #71]	; 0x47
    8ec4:	mov	r0, r6
    8ec6:	bl	9a3c <Header_calculateHeight@@Base>
    8eca:	mov	r0, r6
    8ecc:	bl	9920 <Header_reinit@@Base>
    8ed0:	mov	r0, r6
    8ed2:	bl	9964 <Header_draw@@Base>
    8ed6:	ldr	r0, [r5, r7]
    8ed8:	ldr	r2, [r6, #20]
    8eda:	ldr	r5, [r0, #12]
    8edc:	ldr	r3, [r0, #8]
    8ede:	ldr	r1, [r0, #0]
    8ee0:	str	r5, [sp, #0]
    8ee2:	bl	d5bc <ScreenManager_resize@@Base>
    8ee6:	mov	r0, r4
    8ee8:	add	sp, #12
    8eea:	pop	{r4, r5, r6, r7, pc}
    8eec:	push	{r4, lr}
    8eee:	mov	r4, r0
    8ef0:	bl	b1e0 <Panel_done@@Base>
    8ef4:	mov	r0, r4
    8ef6:	ldmia.w	sp!, {r4, lr}
    8efa:	b.w	6754 <free@plt>
    8efe:	nop

00008f00 <DisplayOptionsPanel_new@@Base>:
    8f00:	push	{r4, r5, r6, r7, lr}
    8f02:	mov	r5, r0
    8f04:	sub	sp, #20
    8f06:	movw	r0, #9908	; 0x26b4
    8f0a:	mov	r6, r1
    8f0c:	bl	11d84 <xMalloc@@Base>
    8f10:	ldr	r3, [pc, #412]	; (90b0 <DisplayOptionsPanel_new@@Base+0x1b0>)
    8f12:	movs	r2, #0
    8f14:	mov	r1, r2
    8f16:	add	r3, pc
    8f18:	mov	r4, r0
    8f1a:	ldr	r0, [pc, #408]	; (90b4 <DisplayOptionsPanel_new@@Base+0x1b4>)
    8f1c:	str	r3, [r4, #0]
    8f1e:	add	r0, pc
    8f20:	bl	90fc <FunctionBar_new@@Base>
    8f24:	ldr	r2, [pc, #400]	; (90b8 <DisplayOptionsPanel_new@@Base+0x1b8>)
    8f26:	ldr	r1, [pc, #404]	; (90bc <DisplayOptionsPanel_new@@Base+0x1bc>)
    8f28:	movs	r3, #1
    8f2a:	add	r2, pc
    8f2c:	mov	r7, r0
    8f2e:	strd	r3, r7, [sp, #8]
    8f32:	ldr	r7, [r2, r1]
    8f34:	mov	r0, r4
    8f36:	mov	r2, r3
    8f38:	mov	r1, r3
    8f3a:	str	r3, [sp, #0]
    8f3c:	str	r7, [sp, #4]
    8f3e:	bl	b130 <Panel_init@@Base>
    8f42:	ldr	r1, [pc, #380]	; (90c0 <DisplayOptionsPanel_new@@Base+0x1c0>)
    8f44:	movw	r2, #9900	; 0x26ac
    8f48:	movw	r3, #9904	; 0x26b0
    8f4c:	str	r5, [r4, r2]
    8f4e:	add	r1, pc
    8f50:	str	r6, [r4, r3]
    8f52:	mov	r0, r4
    8f54:	bl	b22c <Panel_setHeader@@Base>
    8f58:	ldr	r0, [pc, #360]	; (90c4 <DisplayOptionsPanel_new@@Base+0x1c4>)
    8f5a:	add	r0, pc
    8f5c:	bl	11de4 <xStrdup@@Base>
    8f60:	add.w	r1, r5, #58	; 0x3a
    8f64:	bl	78a8 <CheckItem_newByRef@@Base>
    8f68:	mov	r1, r0
    8f6a:	mov	r0, r4
    8f6c:	bl	b294 <Panel_add@@Base>
    8f70:	ldr	r0, [pc, #340]	; (90c8 <DisplayOptionsPanel_new@@Base+0x1c8>)
    8f72:	add	r0, pc
    8f74:	bl	11de4 <xStrdup@@Base>
    8f78:	add.w	r1, r5, #61	; 0x3d
    8f7c:	bl	78a8 <CheckItem_newByRef@@Base>
    8f80:	mov	r1, r0
    8f82:	mov	r0, r4
    8f84:	bl	b294 <Panel_add@@Base>
    8f88:	ldr	r0, [pc, #320]	; (90cc <DisplayOptionsPanel_new@@Base+0x1cc>)
    8f8a:	add	r0, pc
    8f8c:	bl	11de4 <xStrdup@@Base>
    8f90:	add.w	r1, r5, #63	; 0x3f
    8f94:	bl	78a8 <CheckItem_newByRef@@Base>
    8f98:	mov	r1, r0
    8f9a:	mov	r0, r4
    8f9c:	bl	b294 <Panel_add@@Base>
    8fa0:	ldr	r0, [pc, #300]	; (90d0 <DisplayOptionsPanel_new@@Base+0x1d0>)
    8fa2:	add	r0, pc
    8fa4:	bl	11de4 <xStrdup@@Base>
    8fa8:	add.w	r1, r5, #64	; 0x40
    8fac:	bl	78a8 <CheckItem_newByRef@@Base>
    8fb0:	mov	r1, r0
    8fb2:	mov	r0, r4
    8fb4:	bl	b294 <Panel_add@@Base>
    8fb8:	ldr	r0, [pc, #280]	; (90d4 <DisplayOptionsPanel_new@@Base+0x1d4>)
    8fba:	add	r0, pc
    8fbc:	bl	11de4 <xStrdup@@Base>
    8fc0:	add.w	r1, r5, #67	; 0x43
    8fc4:	bl	78a8 <CheckItem_newByRef@@Base>
    8fc8:	mov	r1, r0
    8fca:	mov	r0, r4
    8fcc:	bl	b294 <Panel_add@@Base>
    8fd0:	ldr	r0, [pc, #260]	; (90d8 <DisplayOptionsPanel_new@@Base+0x1d8>)
    8fd2:	add	r0, pc
    8fd4:	bl	11de4 <xStrdup@@Base>
    8fd8:	add.w	r1, r5, #62	; 0x3e
    8fdc:	bl	78a8 <CheckItem_newByRef@@Base>
    8fe0:	mov	r1, r0
    8fe2:	mov	r0, r4
    8fe4:	bl	b294 <Panel_add@@Base>
    8fe8:	ldr	r0, [pc, #240]	; (90dc <DisplayOptionsPanel_new@@Base+0x1dc>)
    8fea:	add	r0, pc
    8fec:	bl	11de4 <xStrdup@@Base>
    8ff0:	add.w	r1, r5, #59	; 0x3b
    8ff4:	bl	78a8 <CheckItem_newByRef@@Base>
    8ff8:	mov	r1, r0
    8ffa:	mov	r0, r4
    8ffc:	bl	b294 <Panel_add@@Base>
    9000:	ldr	r0, [pc, #220]	; (90e0 <DisplayOptionsPanel_new@@Base+0x1e0>)
    9002:	add	r0, pc
    9004:	bl	11de4 <xStrdup@@Base>
    9008:	add.w	r1, r5, #65	; 0x41
    900c:	bl	78a8 <CheckItem_newByRef@@Base>
    9010:	mov	r1, r0
    9012:	mov	r0, r4
    9014:	bl	b294 <Panel_add@@Base>
    9018:	ldr	r0, [pc, #200]	; (90e4 <DisplayOptionsPanel_new@@Base+0x1e4>)
    901a:	add	r0, pc
    901c:	bl	11de4 <xStrdup@@Base>
    9020:	add.w	r1, r5, #66	; 0x42
    9024:	bl	78a8 <CheckItem_newByRef@@Base>
    9028:	mov	r1, r0
    902a:	mov	r0, r4
    902c:	bl	b294 <Panel_add@@Base>
    9030:	ldr	r0, [pc, #180]	; (90e8 <DisplayOptionsPanel_new@@Base+0x1e8>)
    9032:	add	r0, pc
    9034:	bl	11de4 <xStrdup@@Base>
    9038:	add.w	r1, r5, #70	; 0x46
    903c:	bl	78a8 <CheckItem_newByRef@@Base>
    9040:	mov	r1, r0
    9042:	mov	r0, r4
    9044:	bl	b294 <Panel_add@@Base>
    9048:	ldr	r0, [pc, #160]	; (90ec <DisplayOptionsPanel_new@@Base+0x1ec>)
    904a:	add	r0, pc
    904c:	bl	11de4 <xStrdup@@Base>
    9050:	add.w	r1, r5, #57	; 0x39
    9054:	bl	78a8 <CheckItem_newByRef@@Base>
    9058:	mov	r1, r0
    905a:	mov	r0, r4
    905c:	bl	b294 <Panel_add@@Base>
    9060:	ldr	r0, [pc, #140]	; (90f0 <DisplayOptionsPanel_new@@Base+0x1f0>)
    9062:	add	r0, pc
    9064:	bl	11de4 <xStrdup@@Base>
    9068:	add.w	r1, r5, #56	; 0x38
    906c:	bl	78a8 <CheckItem_newByRef@@Base>
    9070:	mov	r1, r0
    9072:	mov	r0, r4
    9074:	bl	b294 <Panel_add@@Base>
    9078:	ldr	r0, [pc, #120]	; (90f4 <DisplayOptionsPanel_new@@Base+0x1f4>)
    907a:	add	r0, pc
    907c:	bl	11de4 <xStrdup@@Base>
    9080:	add.w	r1, r5, #68	; 0x44
    9084:	bl	78a8 <CheckItem_newByRef@@Base>
    9088:	mov	r1, r0
    908a:	mov	r0, r4
    908c:	bl	b294 <Panel_add@@Base>
    9090:	ldr	r0, [pc, #100]	; (90f8 <DisplayOptionsPanel_new@@Base+0x1f8>)
    9092:	add	r0, pc
    9094:	bl	11de4 <xStrdup@@Base>
    9098:	add.w	r1, r5, #69	; 0x45
    909c:	bl	78a8 <CheckItem_newByRef@@Base>
    90a0:	mov	r1, r0
    90a2:	mov	r0, r4
    90a4:	bl	b294 <Panel_add@@Base>
    90a8:	mov	r0, r4
    90aa:	add	sp, #20
    90ac:	pop	{r4, r5, r6, r7, pc}
    90ae:	nop
    90b0:	subs	r2, r1, r1
    90b2:	movs	r2, r0
    90b4:	lsls	r2, r0, #30
    90b6:	movs	r2, r0
    90b8:	lsrs	r2, r4, #23
    90ba:	movs	r2, r0
    90bc:	lsls	r4, r3, #11
    90be:	movs	r0, r0
    90c0:	ldmia	r7!, {r1, r4, r5, r6}
    90c2:	movs	r0, r0
    90c4:	bcc.n	90ec <DisplayOptionsPanel_new@@Base+0x1ec>
    90c6:	movs	r0, r0
    90c8:	bcc.n	90d8 <DisplayOptionsPanel_new@@Base+0x1d8>
    90ca:	movs	r0, r0
    90cc:	bcc.n	90ec <DisplayOptionsPanel_new@@Base+0x1ec>
    90ce:	movs	r0, r0
    90d0:	bcc.n	90e8 <DisplayOptionsPanel_new@@Base+0x1e8>
    90d2:	movs	r0, r0
    90d4:	bcc.n	90fc <FunctionBar_new@@Base>
    90d6:	movs	r0, r0
    90d8:	bcc.n	9120 <FunctionBar_new@@Base+0x24>
    90da:	movs	r0, r0
    90dc:	bcc.n	912c <FunctionBar_new@@Base+0x30>
    90de:	movs	r0, r0
    90e0:	bcc.n	9128 <FunctionBar_new@@Base+0x2c>
    90e2:	movs	r0, r0
    90e4:	bcc.n	913c <FunctionBar_new@@Base+0x40>
    90e6:	movs	r0, r0
    90e8:	bcc.n	9168 <FunctionBar_new@@Base+0x6c>
    90ea:	movs	r0, r0
    90ec:	bcc.n	917c <FunctionBar_new@@Base+0x80>
    90ee:	movs	r0, r0
    90f0:	bcc.n	91d8 <FunctionBar_newEnterEsc@@Base+0x4>
    90f2:	movs	r0, r0
    90f4:	bcc.n	91ec <FunctionBar_newEnterEsc@@Base+0x18>
    90f6:	movs	r0, r0
    90f8:	bcc.n	9010 <DisplayOptionsPanel_new@@Base+0x110>
	...

000090fc <FunctionBar_new@@Base>:
    90fc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9100:	mov	r8, r0
    9102:	mov	sl, r1
    9104:	movs	r0, #1
    9106:	movs	r1, #20
    9108:	mov	r9, r2
    910a:	bl	11da0 <xCalloc@@Base>
    910e:	movs	r1, #4
    9110:	mov	r5, r0
    9112:	movs	r0, #16
    9114:	bl	11da0 <xCalloc@@Base>
    9118:	str	r0, [r5, #4]
    911a:	cmp.w	r8, #0
    911e:	beq.n	91b8 <FunctionBar_new@@Base+0xbc>
    9120:	ldr.w	r0, [r8]
    9124:	mov	r7, r8
    9126:	movs	r4, #0
    9128:	cbz	r0, 9140 <FunctionBar_new@@Base+0x44>
    912a:	ldr	r6, [r5, #4]
    912c:	bl	11de4 <xStrdup@@Base>
    9130:	str	r0, [r6, r4]
    9132:	adds	r4, #4
    9134:	cmp	r4, #60	; 0x3c
    9136:	beq.n	9140 <FunctionBar_new@@Base+0x44>
    9138:	ldr.w	r0, [r7, #4]!
    913c:	cmp	r0, #0
    913e:	bne.n	912a <FunctionBar_new@@Base+0x2e>
    9140:	cmp.w	sl, #0
    9144:	it	ne
    9146:	cmpne.w	r9, #0
    914a:	bne.n	9168 <FunctionBar_new@@Base+0x6c>
    914c:	ldr	r3, [pc, #116]	; (91c4 <FunctionBar_new@@Base+0xc8>)
    914e:	movs	r0, #1
    9150:	ldr	r2, [pc, #116]	; (91c8 <FunctionBar_new@@Base+0xcc>)
    9152:	movs	r1, #10
    9154:	add	r3, pc
    9156:	strb	r0, [r5, #16]
    9158:	add	r2, pc
    915a:	adds	r3, #44	; 0x2c
    915c:	mov	r0, r5
    915e:	strd	r3, r2, [r5, #8]
    9162:	str	r1, [r5, #0]
    9164:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9168:	movs	r1, #4
    916a:	movs	r4, #0
    916c:	movs	r0, #15
    916e:	strb	r4, [r5, #16]
    9170:	bl	11da0 <xCalloc@@Base>
    9174:	movs	r1, #4
    9176:	sub.w	r8, r8, #4
    917a:	sub.w	sl, sl, #4
    917e:	sub.w	r9, r9, #4
    9182:	str	r0, [r5, #8]
    9184:	movs	r0, #15
    9186:	bl	11da0 <xCalloc@@Base>
    918a:	str	r0, [r5, #12]
    918c:	ldr.w	r3, [r8, #4]!
    9190:	cbz	r3, 91b0 <FunctionBar_new@@Base+0xb4>
    9192:	ldr.w	r0, [sl, #4]!
    9196:	ldr	r6, [r5, #8]
    9198:	bl	11de4 <xStrdup@@Base>
    919c:	ldr.w	r2, [r9, #4]!
    91a0:	ldr	r3, [r5, #12]
    91a2:	str.w	r0, [r6, r4, lsl #2]
    91a6:	str.w	r2, [r3, r4, lsl #2]
    91aa:	adds	r4, #1
    91ac:	cmp	r4, #15
    91ae:	bne.n	918c <FunctionBar_new@@Base+0x90>
    91b0:	mov	r0, r5
    91b2:	str	r4, [r5, #0]
    91b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    91b8:	ldr	r0, [pc, #16]	; (91cc <FunctionBar_new@@Base+0xd0>)
    91ba:	ldr.w	r8, [pc, #20]	; 91d0 <FunctionBar_new@@Base+0xd4>
    91be:	add	r0, pc
    91c0:	add	r8, pc
    91c2:	b.n	9124 <FunctionBar_new@@Base+0x28>
    91c4:	lsls	r0, r7, #21
    91c6:	movs	r2, r0
    91c8:	adds	r4, r3, r0
    91ca:	movs	r2, r0
    91cc:			; <UNDEFINED> instruction: 0xf5ea0000
    91d0:	lsls	r4, r1, #20
    91d2:	movs	r2, r0

000091d4 <FunctionBar_newEnterEsc@@Base>:
    91d4:	push	{r4, r5, lr}
    91d6:	sub	sp, #20
    91d8:	ldr	r3, [pc, #68]	; (9220 <FunctionBar_newEnterEsc@@Base+0x4c>)
    91da:	mov	r5, r0
    91dc:	str	r5, [sp, #0]
    91de:	mov	r4, r1
    91e0:	add	r3, pc
    91e2:	ldr	r5, [pc, #64]	; (9224 <FunctionBar_newEnterEsc@@Base+0x50>)
    91e4:	add.w	r1, r3, #88	; 0x58
    91e8:	ldr	r3, [pc, #60]	; (9228 <FunctionBar_newEnterEsc@@Base+0x54>)
    91ea:	add	r5, pc
    91ec:	ldr	r2, [pc, #60]	; (922c <FunctionBar_newEnterEsc@@Base+0x58>)
    91ee:	mov	r0, sp
    91f0:	ldr	r3, [r5, r3]
    91f2:	add	r2, pc
    91f4:	ldr	r3, [r3, #0]
    91f6:	str	r3, [sp, #12]
    91f8:	mov.w	r3, #0
    91fc:	movs	r3, #0
    91fe:	str	r4, [sp, #4]
    9200:	str	r3, [sp, #8]
    9202:	bl	90fc <FunctionBar_new@@Base>
    9206:	ldr	r2, [pc, #40]	; (9230 <FunctionBar_newEnterEsc@@Base+0x5c>)
    9208:	ldr	r3, [pc, #28]	; (9228 <FunctionBar_newEnterEsc@@Base+0x54>)
    920a:	add	r2, pc
    920c:	ldr	r3, [r2, r3]
    920e:	ldr	r2, [r3, #0]
    9210:	ldr	r3, [sp, #12]
    9212:	eors	r2, r3
    9214:	bne.n	921a <FunctionBar_newEnterEsc@@Base+0x46>
    9216:	add	sp, #20
    9218:	pop	{r4, r5, pc}
    921a:	blx	67d0 <__stack_chk_fail@plt>
    921e:	nop
    9220:	lsls	r4, r5, #19
    9222:	movs	r2, r0
    9224:	lsrs	r2, r4, #12
    9226:	movs	r2, r0
    9228:	lsls	r0, r0, #9
    922a:	movs	r0, r0
    922c:	bcs.n	913c <FunctionBar_new@@Base+0x40>
    922e:	movs	r0, r0
    9230:	lsrs	r2, r0, #12
    9232:	movs	r2, r0

00009234 <FunctionBar_delete@@Base>:
    9234:	push	{r3, r4, r5, lr}
    9236:	movs	r4, #0
    9238:	mov	r5, r0
    923a:	ldr	r3, [r5, #4]
    923c:	ldr	r0, [r3, r4]
    923e:	adds	r4, #4
    9240:	cbz	r0, 924c <FunctionBar_delete@@Base+0x18>
    9242:	blx	6758 <free@plt+0x4>
    9246:	cmp	r4, #60	; 0x3c
    9248:	bne.n	923a <FunctionBar_delete@@Base+0x6>
    924a:	ldr	r3, [r5, #4]
    924c:	mov	r0, r3
    924e:	blx	6758 <free@plt+0x4>
    9252:	ldrb	r4, [r5, #16]
    9254:	cbnz	r4, 927a <FunctionBar_delete@@Base+0x46>
    9256:	ldr	r3, [r5, #0]
    9258:	cmp	r3, #0
    925a:	ble.n	926e <FunctionBar_delete@@Base+0x3a>
    925c:	ldr	r3, [r5, #8]
    925e:	ldr.w	r0, [r3, r4, lsl #2]
    9262:	adds	r4, #1
    9264:	blx	6758 <free@plt+0x4>
    9268:	ldr	r3, [r5, #0]
    926a:	cmp	r3, r4
    926c:	bgt.n	925c <FunctionBar_delete@@Base+0x28>
    926e:	ldr	r0, [r5, #8]
    9270:	blx	6758 <free@plt+0x4>
    9274:	ldr	r0, [r5, #12]
    9276:	blx	6758 <free@plt+0x4>
    927a:	mov	r0, r5
    927c:	ldmia.w	sp!, {r3, r4, r5, lr}
    9280:	b.w	6754 <free@plt>

00009284 <FunctionBar_setLabel@@Base>:
    9284:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9288:	ldr	r6, [r0, #0]
    928a:	cmp	r6, #0
    928c:	ble.n	92c0 <FunctionBar_setLabel@@Base+0x3c>
    928e:	ldr	r4, [r0, #12]
    9290:	mov	r8, r0
    9292:	mov	r9, r2
    9294:	movs	r3, #0
    9296:	subs	r4, #4
    9298:	b.n	929e <FunctionBar_setLabel@@Base+0x1a>
    929a:	cmp	r3, r6
    929c:	beq.n	92c0 <FunctionBar_setLabel@@Base+0x3c>
    929e:	ldr.w	r5, [r4, #4]!
    92a2:	lsls	r7, r3, #2
    92a4:	adds	r3, #1
    92a6:	cmp	r5, r1
    92a8:	bne.n	929a <FunctionBar_setLabel@@Base+0x16>
    92aa:	ldr.w	r3, [r8, #4]
    92ae:	ldr	r0, [r3, r7]
    92b0:	blx	6758 <free@plt+0x4>
    92b4:	mov	r0, r9
    92b6:	ldr.w	r4, [r8, #4]
    92ba:	bl	11de4 <xStrdup@@Base>
    92be:	str	r0, [r4, r7]
    92c0:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000092c4 <FunctionBar_drawAttr@@Base>:
    92c4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92c8:	sub	sp, #12
    92ca:	ldr.w	sl, [pc, #316]	; 9408 <FunctionBar_drawAttr@@Base+0x144>
    92ce:	mov	fp, r0
    92d0:	ldr	r5, [pc, #312]	; (940c <FunctionBar_drawAttr@@Base+0x148>)
    92d2:	add	sl, pc
    92d4:	str	r1, [sp, #0]
    92d6:	ldr	r4, [pc, #312]	; (9410 <FunctionBar_drawAttr@@Base+0x14c>)
    92d8:	ldr.w	r8, [sl, r5]
    92dc:	str	r2, [sp, #4]
    92de:	ldr.w	r4, [sl, r4]
    92e2:	ldr.w	r2, [r8]
    92e6:	ldr	r0, [r4, #0]
    92e8:	ldr	r1, [r2, #8]
    92ea:	blx	6c88 <wattrset@plt+0x4>
    92ee:	ldr	r1, [pc, #292]	; (9414 <FunctionBar_drawAttr@@Base+0x150>)
    92f0:	ldr	r0, [r4, #0]
    92f2:	movs	r2, #0
    92f4:	ldr.w	r9, [sl, r1]
    92f8:	ldr.w	r1, [r9]
    92fc:	subs	r1, #1
    92fe:	blx	6668 <wmove@plt>
    9302:	adds	r0, #1
    9304:	beq.n	9316 <FunctionBar_drawAttr@@Base+0x52>
    9306:	ldr	r2, [pc, #272]	; (9418 <FunctionBar_drawAttr@@Base+0x154>)
    9308:	movs	r1, #32
    930a:	ldr	r0, [r4, #0]
    930c:	ldr.w	r2, [sl, r2]
    9310:	ldr	r2, [r2, #0]
    9312:	blx	6b9c <whline@plt>
    9316:	ldr.w	r2, [fp]
    931a:	cmp	r2, #0
    931c:	ble.n	9402 <FunctionBar_drawAttr@@Base+0x13e>
    931e:	movs	r6, #0
    9320:	mov	r5, fp
    9322:	mov	r7, r6
    9324:	ldr.w	r2, [r8]
    9328:	mov.w	fp, r6, lsl #2
    932c:	ldr	r0, [r4, #0]
    932e:	ldr	r1, [r2, #12]
    9330:	blx	6c88 <wattrset@plt+0x4>
    9334:	ldr.w	r1, [r9]
    9338:	mov	r2, r7
    933a:	ldr	r0, [r4, #0]
    933c:	subs	r1, #1
    933e:	blx	6668 <wmove@plt>
    9342:	mov.w	r2, #4294967295	; 0xffffffff
    9346:	cmp	r0, r2
    9348:	beq.n	9356 <FunctionBar_drawAttr@@Base+0x92>
    934a:	ldr	r1, [r5, #8]
    934c:	ldr	r0, [r4, #0]
    934e:	ldr.w	r1, [r1, r6, lsl #2]
    9352:	blx	677c <waddnstr@plt>
    9356:	ldr	r2, [r5, #8]
    9358:	adds	r6, #1
    935a:	ldr.w	r0, [r2, fp]
    935e:	blx	6a0c <strlen@plt>
    9362:	ldr.w	r2, [r8]
    9366:	ldr	r1, [r2, #8]
    9368:	add	r7, r0
    936a:	ldr	r0, [r4, #0]
    936c:	blx	6c88 <wattrset@plt+0x4>
    9370:	ldr.w	r1, [r9]
    9374:	mov	r2, r7
    9376:	ldr	r0, [r4, #0]
    9378:	subs	r1, #1
    937a:	blx	6668 <wmove@plt>
    937e:	mov.w	r2, #4294967295	; 0xffffffff
    9382:	cmp	r0, r2
    9384:	beq.n	9392 <FunctionBar_drawAttr@@Base+0xce>
    9386:	ldr	r1, [r5, #4]
    9388:	ldr	r0, [r4, #0]
    938a:	ldr.w	r1, [r1, fp]
    938e:	blx	677c <waddnstr@plt>
    9392:	ldr	r2, [r5, #4]
    9394:	ldr.w	r0, [r2, fp]
    9398:	blx	6a0c <strlen@plt>
    939c:	ldr	r2, [r5, #0]
    939e:	cmp	r2, r6
    93a0:	add	r7, r0
    93a2:	bgt.n	9324 <FunctionBar_drawAttr@@Base+0x60>
    93a4:	mov	r5, r7
    93a6:	ldr	r6, [sp, #0]
    93a8:	cbz	r6, 93fa <FunctionBar_drawAttr@@Base+0x136>
    93aa:	ldr	r1, [sp, #4]
    93ac:	ldr	r0, [r4, #0]
    93ae:	blx	6c88 <wattrset@plt+0x4>
    93b2:	ldr.w	r1, [r9]
    93b6:	ldr	r0, [r4, #0]
    93b8:	mov	r2, r5
    93ba:	subs	r1, #1
    93bc:	blx	6668 <wmove@plt>
    93c0:	adds	r0, #1
    93c2:	bne.n	93ec <FunctionBar_drawAttr@@Base+0x128>
    93c4:	ldr	r0, [sp, #0]
    93c6:	blx	6a0c <strlen@plt>
    93ca:	ldr	r3, [pc, #80]	; (941c <FunctionBar_drawAttr@@Base+0x158>)
    93cc:	ldr.w	r3, [sl, r3]
    93d0:	add	r5, r0
    93d2:	movs	r0, #1
    93d4:	str	r5, [r3, #0]
    93d6:	blx	6730 <curs_set@plt>
    93da:	ldr.w	r3, [r8]
    93de:	ldr	r0, [r4, #0]
    93e0:	ldr	r1, [r3, #0]
    93e2:	add	sp, #12
    93e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    93e8:	b.w	6c84 <wattrset@plt>
    93ec:	ldr	r0, [r4, #0]
    93ee:	mov.w	r2, #4294967295	; 0xffffffff
    93f2:	mov	r1, r6
    93f4:	blx	677c <waddnstr@plt>
    93f8:	b.n	93c4 <FunctionBar_drawAttr@@Base+0x100>
    93fa:	ldr	r0, [sp, #0]
    93fc:	blx	6730 <curs_set@plt>
    9400:	b.n	93da <FunctionBar_drawAttr@@Base+0x116>
    9402:	movs	r5, #0
    9404:	b.n	93a6 <FunctionBar_drawAttr@@Base+0xe2>
    9406:	nop
    9408:	lsrs	r2, r7, #8
    940a:	movs	r2, r0
    940c:	lsls	r0, r6, #9
    940e:	movs	r0, r0
    9410:	lsls	r4, r5, #9
    9412:	movs	r0, r0
    9414:	lsls	r0, r2, #11
    9416:	movs	r0, r0
    9418:	lsls	r0, r7, #10
    941a:	movs	r0, r0
    941c:	lsls	r4, r3, #9
	...

00009420 <FunctionBar_draw@@Base>:
    9420:	ldr	r3, [pc, #12]	; (9430 <FunctionBar_draw@@Base+0x10>)
    9422:	ldr	r2, [pc, #16]	; (9434 <FunctionBar_draw@@Base+0x14>)
    9424:	add	r3, pc
    9426:	ldr	r3, [r3, r2]
    9428:	ldr	r3, [r3, #0]
    942a:	ldr	r2, [r3, #8]
    942c:	b.w	92c4 <FunctionBar_drawAttr@@Base>
    9430:	lsrs	r0, r5, #3
    9432:	movs	r2, r0
    9434:	lsls	r0, r6, #9
	...

00009438 <FunctionBar_synthesizeEvent@@Base>:
    9438:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    943c:	sub	sp, #12
    943e:	ldr	r7, [r0, #0]
    9440:	str	r0, [sp, #4]
    9442:	cmp	r7, #0
    9444:	ble.n	948e <FunctionBar_synthesizeEvent@@Base+0x56>
    9446:	ldr	r3, [r0, #8]
    9448:	mov.w	sl, #0
    944c:	ldr	r5, [r0, #4]
    944e:	mov	r6, r1
    9450:	sub.w	r9, r3, #4
    9454:	mov	fp, sl
    9456:	subs	r5, #4
    9458:	b.n	945e <FunctionBar_synthesizeEvent@@Base+0x26>
    945a:	cmp	sl, r7
    945c:	beq.n	948e <FunctionBar_synthesizeEvent@@Base+0x56>
    945e:	ldr.w	r0, [r9, #4]!
    9462:	mov.w	r8, sl, lsl #2
    9466:	blx	6a0c <strlen@plt>
    946a:	add.w	sl, sl, #1
    946e:	mov	r4, r0
    9470:	ldr.w	r0, [r5, #4]!
    9474:	blx	6a0c <strlen@plt>
    9478:	add	r4, r0
    947a:	add	fp, r4
    947c:	cmp	fp, r6
    947e:	ble.n	945a <FunctionBar_synthesizeEvent@@Base+0x22>
    9480:	ldr	r3, [sp, #4]
    9482:	ldr	r3, [r3, #12]
    9484:	ldr.w	r0, [r3, r8]
    9488:	add	sp, #12
    948a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    948e:	mov.w	r0, #4294967295	; 0xffffffff
    9492:	add	sp, #12
    9494:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00009498 <Hashtable_new@@Base>:
    9498:	push	{r4, r5, r6, lr}
    949a:	mov	r5, r0
    949c:	movs	r0, #16
    949e:	mov	r6, r1
    94a0:	bl	11d84 <xMalloc@@Base>
    94a4:	movs	r3, #0
    94a6:	movs	r1, #4
    94a8:	mov	r4, r0
    94aa:	mov	r0, r5
    94ac:	str	r3, [r4, #8]
    94ae:	str	r5, [r4, #0]
    94b0:	bl	11da0 <xCalloc@@Base>
    94b4:	strb	r6, [r4, #12]
    94b6:	mov	r3, r0
    94b8:	mov	r0, r4
    94ba:	str	r3, [r4, #4]
    94bc:	pop	{r4, r5, r6, pc}
    94be:	nop

000094c0 <Hashtable_delete@@Base>:
    94c0:	push	{r3, r4, r5, r6, r7, lr}
    94c2:	mov	r6, r0
    94c4:	ldrd	r3, r0, [r0]
    94c8:	cmp	r3, #0
    94ca:	ble.n	9506 <Hashtable_delete@@Base+0x46>
    94cc:	movs	r7, #0
    94ce:	ldr.w	r4, [r0, r7, lsl #2]
    94d2:	cbnz	r4, 94e2 <Hashtable_delete@@Base+0x22>
    94d4:	b.n	9500 <Hashtable_delete@@Base+0x40>
    94d6:	ldr	r5, [r4, #8]
    94d8:	mov	r0, r4
    94da:	blx	6758 <free@plt+0x4>
    94de:	mov	r4, r5
    94e0:	cbz	r5, 94fc <Hashtable_delete@@Base+0x3c>
    94e2:	ldrb	r3, [r6, #12]
    94e4:	cmp	r3, #0
    94e6:	beq.n	94d6 <Hashtable_delete@@Base+0x16>
    94e8:	ldr	r0, [r4, #4]
    94ea:	blx	6758 <free@plt+0x4>
    94ee:	ldr	r5, [r4, #8]
    94f0:	mov	r0, r4
    94f2:	blx	6758 <free@plt+0x4>
    94f6:	mov	r4, r5
    94f8:	cmp	r5, #0
    94fa:	bne.n	94e2 <Hashtable_delete@@Base+0x22>
    94fc:	ldrd	r3, r0, [r6]
    9500:	adds	r7, #1
    9502:	cmp	r3, r7
    9504:	bgt.n	94ce <Hashtable_delete@@Base+0xe>
    9506:	blx	6758 <free@plt+0x4>
    950a:	mov	r0, r6
    950c:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    9510:	b.w	6754 <free@plt>

00009514 <Hashtable_put@@Base>:
    9514:	push	{r3, r4, r5, r6, r7, lr}
    9516:	mov	r5, r1
    9518:	mov	r7, r0
    951a:	ldr	r1, [r0, #0]
    951c:	mov	r0, r5
    951e:	mov	r4, r2
    9520:	bl	1555c <Battery_getData@@Base+0x4ac>
    9524:	ldr	r3, [r7, #4]
    9526:	add.w	r6, r3, r1, lsl #2
    952a:	ldr.w	r3, [r3, r1, lsl #2]
    952e:	cbnz	r3, 953a <Hashtable_put@@Base+0x26>
    9530:	b.n	954a <Hashtable_put@@Base+0x36>
    9532:	add.w	r6, r3, #8
    9536:	ldr	r3, [r3, #8]
    9538:	cbz	r3, 954a <Hashtable_put@@Base+0x36>
    953a:	ldr	r2, [r3, #0]
    953c:	cmp	r2, r5
    953e:	bne.n	9532 <Hashtable_put@@Base+0x1e>
    9540:	ldrb	r2, [r7, #12]
    9542:	cbnz	r2, 9562 <Hashtable_put@@Base+0x4e>
    9544:	ldr	r3, [r6, #0]
    9546:	str	r4, [r3, #4]
    9548:	pop	{r3, r4, r5, r6, r7, pc}
    954a:	movs	r0, #12
    954c:	bl	11d84 <xMalloc@@Base>
    9550:	ldr	r3, [r7, #8]
    9552:	movs	r2, #0
    9554:	adds	r3, #1
    9556:	str	r5, [r0, #0]
    9558:	str	r4, [r0, #4]
    955a:	str	r2, [r0, #8]
    955c:	str	r0, [r6, #0]
    955e:	str	r3, [r7, #8]
    9560:	pop	{r3, r4, r5, r6, r7, pc}
    9562:	ldr	r0, [r3, #4]
    9564:	blx	6758 <free@plt+0x4>
    9568:	b.n	9544 <Hashtable_put@@Base+0x30>
    956a:	nop

0000956c <Hashtable_remove@@Base>:
    956c:	push	{r3, r4, r5, r6, r7, lr}
    956e:	mov	r5, r1
    9570:	mov	r7, r0
    9572:	ldr	r1, [r0, #0]
    9574:	mov	r0, r5
    9576:	bl	1555c <Battery_getData@@Base+0x4ac>
    957a:	ldr	r3, [r7, #4]
    957c:	ldr.w	r4, [r3, r1, lsl #2]
    9580:	add.w	r6, r3, r1, lsl #2
    9584:	cbnz	r4, 958e <Hashtable_remove@@Base+0x22>
    9586:	b.n	95ac <Hashtable_remove@@Base+0x40>
    9588:	add.w	r6, r0, #8
    958c:	cbz	r4, 95ac <Hashtable_remove@@Base+0x40>
    958e:	ldr	r2, [r4, #0]
    9590:	mov	r0, r4
    9592:	ldr	r4, [r4, #8]
    9594:	cmp	r2, r5
    9596:	bne.n	9588 <Hashtable_remove@@Base+0x1c>
    9598:	ldr	r5, [r0, #4]
    959a:	blx	6758 <free@plt+0x4>
    959e:	ldrb	r2, [r7, #12]
    95a0:	ldr	r3, [r7, #8]
    95a2:	str	r4, [r6, #0]
    95a4:	mov	r4, r5
    95a6:	subs	r3, #1
    95a8:	str	r3, [r7, #8]
    95aa:	cbnz	r2, 95b0 <Hashtable_remove@@Base+0x44>
    95ac:	mov	r0, r4
    95ae:	pop	{r3, r4, r5, r6, r7, pc}
    95b0:	mov	r0, r5
    95b2:	movs	r4, #0
    95b4:	blx	6758 <free@plt+0x4>
    95b8:	b.n	95ac <Hashtable_remove@@Base+0x40>
    95ba:	nop

000095bc <Hashtable_get@@Base>:
    95bc:	push	{r3, r4, r5, lr}
    95be:	mov	r4, r1
    95c0:	mov	r5, r0
    95c2:	ldr	r1, [r0, #0]
    95c4:	mov	r0, r4
    95c6:	bl	1555c <Battery_getData@@Base+0x4ac>
    95ca:	ldr	r3, [r5, #4]
    95cc:	ldr.w	r0, [r3, r1, lsl #2]
    95d0:	cbnz	r0, 95d8 <Hashtable_get@@Base+0x1c>
    95d2:	b.n	95e0 <Hashtable_get@@Base+0x24>
    95d4:	ldr	r0, [r0, #8]
    95d6:	cbz	r0, 95e0 <Hashtable_get@@Base+0x24>
    95d8:	ldr	r3, [r0, #0]
    95da:	cmp	r3, r4
    95dc:	bne.n	95d4 <Hashtable_get@@Base+0x18>
    95de:	ldr	r0, [r0, #4]
    95e0:	pop	{r3, r4, r5, pc}
    95e2:	nop

000095e4 <Hashtable_foreach@@Base>:
    95e4:	ldr	r3, [r0, #0]
    95e6:	cmp	r3, #0
    95e8:	ble.n	961c <Hashtable_foreach@@Base+0x38>
    95ea:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    95ee:	mov	r8, r0
    95f0:	mov	r5, r1
    95f2:	mov	r6, r2
    95f4:	movs	r7, #0
    95f6:	ldr.w	r2, [r8, #4]
    95fa:	ldr.w	r4, [r2, r7, lsl #2]
    95fe:	cbz	r4, 9612 <Hashtable_foreach@@Base+0x2e>
    9600:	ldrd	r0, r1, [r4]
    9604:	mov	r2, r6
    9606:	blx	r5
    9608:	ldr	r4, [r4, #8]
    960a:	cmp	r4, #0
    960c:	bne.n	9600 <Hashtable_foreach@@Base+0x1c>
    960e:	ldr.w	r3, [r8]
    9612:	adds	r7, #1
    9614:	cmp	r3, r7
    9616:	bgt.n	95f6 <Hashtable_foreach@@Base+0x12>
    9618:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    961c:	bx	lr
    961e:	nop

00009620 <Header_new@@Base>:
    9620:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9624:	mov	r7, r0
    9626:	mov	r8, r1
    9628:	movs	r0, #1
    962a:	movs	r1, #24
    962c:	mov	r4, r2
    962e:	bl	11da0 <xCalloc@@Base>
    9632:	movs	r1, #4
    9634:	mov	r5, r0
    9636:	mov	r0, r4
    9638:	bl	11da0 <xCalloc@@Base>
    963c:	ldr	r2, [pc, #56]	; (9678 <Header_new@@Base+0x58>)
    963e:	cmp	r4, #0
    9640:	strd	r8, r7, [r5, #4]
    9644:	add	r2, pc
    9646:	str	r4, [r5, #12]
    9648:	str	r0, [r5, #0]
    964a:	ble.n	9670 <Header_new@@Base+0x50>
    964c:	ldr	r3, [pc, #44]	; (967c <Header_new@@Base+0x5c>)
    964e:	mov	r6, r0
    9650:	movs	r4, #0
    9652:	ldr	r7, [r2, r3]
    9654:	b.n	9658 <Header_new@@Base+0x38>
    9656:	ldr	r6, [r5, #0]
    9658:	mov.w	r2, #4294967295	; 0xffffffff
    965c:	movs	r1, #1
    965e:	mov	r0, r7
    9660:	bl	f6dc <Vector_new@@Base>
    9664:	ldr	r3, [r5, #12]
    9666:	str.w	r0, [r6, r4, lsl #2]
    966a:	adds	r4, #1
    966c:	cmp	r3, r4
    966e:	bgt.n	9656 <Header_new@@Base+0x36>
    9670:	mov	r0, r5
    9672:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9676:	nop
    9678:	lsls	r0, r1, #27
    967a:	movs	r2, r0
    967c:	lsls	r0, r6, #10
	...

00009680 <Header_delete@@Base>:
    9680:	push	{r3, r4, r5, lr}
    9682:	mov	r5, r0
    9684:	ldr	r3, [r0, #12]
    9686:	cmp	r3, #0
    9688:	ble.n	969e <Header_delete@@Base+0x1e>
    968a:	movs	r4, #0
    968c:	ldr	r3, [r5, #0]
    968e:	ldr.w	r0, [r3, r4, lsl #2]
    9692:	adds	r4, #1
    9694:	bl	f720 <Vector_delete@@Base>
    9698:	ldr	r3, [r5, #12]
    969a:	cmp	r3, r4
    969c:	bgt.n	968c <Header_delete@@Base+0xc>
    969e:	ldr	r0, [r5, #0]
    96a0:	blx	6758 <free@plt+0x4>
    96a4:	mov	r0, r5
    96a6:	ldmia.w	sp!, {r3, r4, r5, lr}
    96aa:	b.w	6754 <free@plt>
    96ae:	nop

000096b0 <Header_writeBackToSettings@@Base>:
    96b0:	ldr	r3, [r0, #12]
    96b2:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    96b6:	cmp	r3, #0
    96b8:	sub	sp, #36	; 0x24
    96ba:	str	r0, [sp, #28]
    96bc:	ble.n	9798 <Header_writeBackToSettings@@Base+0xe8>
    96be:	movs	r3, #0
    96c0:	str	r3, [sp, #24]
    96c2:	ldr	r4, [sp, #28]
    96c4:	movs	r1, #12
    96c6:	ldr	r5, [sp, #24]
    96c8:	ldr	r3, [r4, #4]
    96ca:	mla	r8, r1, r5, r3
    96ce:	ldr.w	r0, [r8, #8]
    96d2:	bl	eb24 <String_freeArray@@Base>
    96d6:	ldr.w	r0, [r8, #12]
    96da:	blx	6758 <free@plt+0x4>
    96de:	ldr	r3, [r4, #0]
    96e0:	movs	r1, #4
    96e2:	ldr.w	sl, [r3, r5, lsl #2]
    96e6:	ldr.w	r9, [sl, #16]
    96ea:	add.w	r0, r9, #1
    96ee:	bl	11da0 <xCalloc@@Base>
    96f2:	movs	r1, #4
    96f4:	str.w	r0, [r8, #8]
    96f8:	mov	r0, r9
    96fa:	bl	11da0 <xCalloc@@Base>
    96fe:	cmp.w	r9, #0
    9702:	str.w	r9, [r8, #4]
    9706:	str.w	r0, [r8, #12]
    970a:	ble.n	978a <Header_writeBackToSettings@@Base+0xda>
    970c:	movs	r4, #0
    970e:	mov	fp, r8
    9710:	b.n	974c <Header_writeBackToSettings@@Base+0x9c>
    9712:	str	r3, [sp, #8]
    9714:	movs	r2, #1
    9716:	ldr.w	lr, [r6]
    971a:	mov.w	r3, #4294967295	; 0xffffffff
    971e:	ldr.w	ip, [pc, #128]	; 97a0 <Header_writeBackToSettings@@Base+0xf0>
    9722:	movs	r1, #63	; 0x3f
    9724:	ldr.w	r5, [lr, #52]	; 0x34
    9728:	add	ip, pc
    972a:	strd	ip, r5, [sp]
    972e:	blx	6c78 <__snprintf_chk@plt>
    9732:	cmp	r0, #62	; 0x3e
    9734:	bhi.n	9778 <Header_writeBackToSettings@@Base+0xc8>
    9736:	ldr	r2, [r6, #12]
    9738:	adds	r4, #1
    973a:	ldr.w	r1, [r8, #8]
    973e:	cmp	r9, r4
    9740:	ldr.w	r3, [fp, #12]
    9744:	ldr	r0, [sp, #20]
    9746:	str	r0, [r1, r7]
    9748:	str	r2, [r3, r7]
    974a:	beq.n	978a <Header_writeBackToSettings@@Base+0xda>
    974c:	ldr.w	r3, [sl]
    9750:	movs	r1, #1
    9752:	movs	r0, #64	; 0x40
    9754:	lsls	r7, r4, #2
    9756:	ldr.w	r6, [r3, r4, lsl #2]
    975a:	bl	11da0 <xCalloc@@Base>
    975e:	ldr	r3, [r6, #16]
    9760:	str	r0, [sp, #20]
    9762:	cmp	r3, #0
    9764:	bne.n	9712 <Header_writeBackToSettings@@Base+0x62>
    9766:	ldr	r3, [r6, #0]
    9768:	movs	r1, #63	; 0x3f
    976a:	ldr	r2, [pc, #56]	; (97a4 <Header_writeBackToSettings@@Base+0xf4>)
    976c:	ldr	r3, [r3, #52]	; 0x34
    976e:	add	r2, pc
    9770:	blx	6a60 <snprintf@plt>
    9774:	cmp	r0, #62	; 0x3e
    9776:	bls.n	9736 <Header_writeBackToSettings@@Base+0x86>
    9778:	movs	r0, #1
    977a:	blx	6730 <curs_set@plt>
    977e:	blx	6c48 <endwin@plt+0x4>
    9782:	movs	r1, #0
    9784:	movs	r0, #1
    9786:	blx	683c <err@plt>
    978a:	ldr	r3, [sp, #28]
    978c:	ldr	r2, [sp, #24]
    978e:	ldr	r3, [r3, #12]
    9790:	adds	r2, #1
    9792:	str	r2, [sp, #24]
    9794:	cmp	r3, r2
    9796:	bgt.n	96c2 <Header_writeBackToSettings@@Base+0x12>
    9798:	add	sp, #36	; 0x24
    979a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    979e:	nop
    97a0:	ldmia	r5!, {r3, r4, r6}
    97a2:	movs	r0, r0
    97a4:	b.n	9124 <FunctionBar_new@@Base+0x28>
	...

000097a8 <Header_addMeterByName@@Base>:
    97a8:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97ac:	mov	r6, r0
    97ae:	ldr	r7, [pc, #148]	; (9844 <Header_addMeterByName@@Base+0x9c>)
    97b0:	sub	sp, #8
    97b2:	ldr	r4, [pc, #148]	; (9848 <Header_addMeterByName@@Base+0xa0>)
    97b4:	mov	r5, r1
    97b6:	add	r7, pc
    97b8:	ldr	r3, [r0, #0]
    97ba:	mov	r0, r1
    97bc:	movs	r1, #40	; 0x28
    97be:	ldr	r4, [r7, r4]
    97c0:	ldr.w	r7, [r3, r2, lsl #2]
    97c4:	ldr	r4, [r4, #0]
    97c6:	str	r4, [sp, #4]
    97c8:	mov.w	r4, #0
    97cc:	blx	6a24 <strchr@plt>
    97d0:	ldr.w	r8, [pc, #120]	; 984c <Header_addMeterByName@@Base+0xa4>
    97d4:	movs	r3, #0
    97d6:	str	r3, [sp, #0]
    97d8:	add	r8, pc
    97da:	cbz	r0, 97ee <Header_addMeterByName@@Base+0x46>
    97dc:	ldr	r1, [pc, #112]	; (9850 <Header_addMeterByName@@Base+0xa8>)
    97de:	mov	r2, sp
    97e0:	mov	r4, r0
    97e2:	add	r1, pc
    97e4:	blx	6a6c <__isoc99_sscanf@plt>
    97e8:	cbz	r0, 983c <Header_addMeterByName@@Base+0x94>
    97ea:	movs	r3, #0
    97ec:	strb	r3, [r4, #0]
    97ee:	ldr	r3, [pc, #100]	; (9854 <Header_addMeterByName@@Base+0xac>)
    97f0:	ldr.w	r4, [r8, r3]
    97f4:	ldr	r3, [r4, #0]
    97f6:	cbnz	r3, 9800 <Header_addMeterByName@@Base+0x58>
    97f8:	b.n	9824 <Header_addMeterByName@@Base+0x7c>
    97fa:	ldr.w	r3, [r4, #4]!
    97fe:	cbz	r3, 9824 <Header_addMeterByName@@Base+0x7c>
    9800:	ldr	r1, [r3, #52]	; 0x34
    9802:	mov	r0, r5
    9804:	bl	ea48 <String_eq@@Base>
    9808:	cmp	r0, #0
    980a:	beq.n	97fa <Header_addMeterByName@@Base+0x52>
    980c:	ldr	r2, [r4, #0]
    980e:	ldr	r1, [sp, #0]
    9810:	ldr	r0, [r6, #8]
    9812:	bl	aadc <Meter_new@@Base>
    9816:	mov	r4, r0
    9818:	mov	r0, r7
    981a:	mov	r1, r4
    981c:	bl	f92c <Vector_add@@Base>
    9820:	ldr	r0, [r4, #12]
    9822:	b.n	9826 <Header_addMeterByName@@Base+0x7e>
    9824:	movs	r0, #2
    9826:	ldr	r2, [pc, #48]	; (9858 <Header_addMeterByName@@Base+0xb0>)
    9828:	ldr	r3, [pc, #28]	; (9848 <Header_addMeterByName@@Base+0xa0>)
    982a:	add	r2, pc
    982c:	ldr	r3, [r2, r3]
    982e:	ldr	r2, [r3, #0]
    9830:	ldr	r3, [sp, #4]
    9832:	eors	r2, r3
    9834:	bne.n	9840 <Header_addMeterByName@@Base+0x98>
    9836:	add	sp, #8
    9838:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    983c:	str	r0, [sp, #0]
    983e:	b.n	97ea <Header_addMeterByName@@Base+0x42>
    9840:	blx	67d0 <__stack_chk_fail@plt>
    9844:	lsls	r6, r2, #21
    9846:	movs	r2, r0
    9848:	lsls	r0, r0, #9
    984a:	movs	r0, r0
    984c:	lsls	r4, r6, #20
    984e:	movs	r2, r0
    9850:	ldmia	r4!, {r1, r2, r5, r7}
    9852:	movs	r0, r0
    9854:	lsls	r0, r1, #11
    9856:	movs	r0, r0
    9858:	lsls	r2, r4, #19
    985a:	movs	r2, r0

0000985c <Header_setMode@@Base>:
    985c:	push	{r4}
    985e:	ldr	r4, [r0, #0]
    9860:	mov	r0, r1
    9862:	ldr.w	r3, [r4, r3, lsl #2]
    9866:	ldr	r1, [r3, #16]
    9868:	cmp	r1, r0
    986a:	bgt.n	9872 <Header_setMode@@Base+0x16>
    986c:	ldr.w	r4, [sp], #4
    9870:	bx	lr
    9872:	ldr	r3, [r3, #0]
    9874:	mov	r1, r2
    9876:	ldr.w	r4, [sp], #4
    987a:	ldr.w	r0, [r3, r0, lsl #2]
    987e:	b.w	aa88 <Meter_setMode@@Base>
    9882:	nop

00009884 <Header_addMeterByClass@@Base>:
    9884:	push	{r3, r4, r5, lr}
    9886:	mov	r5, r1
    9888:	ldr	r4, [r0, #0]
    988a:	mov	r1, r2
    988c:	ldr	r0, [r0, #8]
    988e:	mov	r2, r5
    9890:	ldr.w	r5, [r4, r3, lsl #2]
    9894:	bl	aadc <Meter_new@@Base>
    9898:	mov	r4, r0
    989a:	mov	r0, r5
    989c:	mov	r1, r4
    989e:	bl	f92c <Vector_add@@Base>
    98a2:	mov	r0, r4
    98a4:	pop	{r3, r4, r5, pc}
    98a6:	nop

000098a8 <Header_size@@Base>:
    98a8:	ldr	r3, [r0, #0]
    98aa:	ldr.w	r3, [r3, r1, lsl #2]
    98ae:	ldr	r0, [r3, #16]
    98b0:	bx	lr
    98b2:	nop

000098b4 <Header_readMeterName@@Base>:
    98b4:	ldr	r3, [r0, #0]
    98b6:	push	{r4, r5, r6, lr}
    98b8:	sub	sp, #8
    98ba:	ldr.w	r3, [r3, r2, lsl #2]
    98be:	ldr	r3, [r3, #0]
    98c0:	ldr.w	r6, [r3, r1, lsl #2]
    98c4:	ldr	r3, [r6, #0]
    98c6:	ldr	r0, [r3, #52]	; 0x34
    98c8:	blx	6a0c <strlen@plt>
    98cc:	mov	r4, r0
    98ce:	adds	r0, #100	; 0x64
    98d0:	bl	11d84 <xMalloc@@Base>
    98d4:	ldr	r3, [r6, #0]
    98d6:	mov	r2, r4
    98d8:	ldr	r1, [r3, #52]	; 0x34
    98da:	mov	r5, r0
    98dc:	blx	6a9c <strncpy@plt>
    98e0:	movs	r3, #0
    98e2:	strb	r3, [r5, r4]
    98e4:	ldr	r3, [r6, #16]
    98e6:	adds	r0, r5, r4
    98e8:	cbnz	r3, 98f0 <Header_readMeterName@@Base+0x3c>
    98ea:	mov	r0, r5
    98ec:	add	sp, #8
    98ee:	pop	{r4, r5, r6, pc}
    98f0:	ldr	r6, [pc, #24]	; (990c <Header_readMeterName@@Base+0x58>)
    98f2:	movs	r2, #1
    98f4:	str	r3, [sp, #4]
    98f6:	movs	r1, #100	; 0x64
    98f8:	add	r6, pc
    98fa:	mov.w	r3, #4294967295	; 0xffffffff
    98fe:	str	r6, [sp, #0]
    9900:	blx	6c78 <__snprintf_chk@plt>
    9904:	mov	r0, r5
    9906:	add	sp, #8
    9908:	pop	{r4, r5, r6, pc}
    990a:	nop
    990c:	ldmia	r3, {r3, r4, r7}
	...

00009910 <Header_readMeterMode@@Base>:
    9910:	ldr	r3, [r0, #0]
    9912:	ldr.w	r3, [r3, r2, lsl #2]
    9916:	ldr	r3, [r3, #0]
    9918:	ldr.w	r3, [r3, r1, lsl #2]
    991c:	ldr	r0, [r3, #12]
    991e:	bx	lr

00009920 <Header_reinit@@Base>:
    9920:	ldr	r2, [r0, #12]
    9922:	cmp	r2, #0
    9924:	ble.n	9962 <Header_reinit@@Base+0x42>
    9926:	ldr	r1, [r0, #0]
    9928:	push	{r3, r4, r5, r6, r7, lr}
    992a:	mov	r6, r0
    992c:	movs	r7, #0
    992e:	ldr.w	r3, [r1, r7, lsl #2]
    9932:	lsls	r5, r7, #2
    9934:	ldr	r0, [r3, #16]
    9936:	cmp	r0, #0
    9938:	it	gt
    993a:	movgt	r4, #0
    993c:	ble.n	995a <Header_reinit@@Base+0x3a>
    993e:	ldr	r3, [r3, #0]
    9940:	ldr.w	r0, [r3, r4, lsl #2]
    9944:	adds	r4, #1
    9946:	ldr	r3, [r0, #0]
    9948:	ldr	r3, [r3, #16]
    994a:	cbz	r3, 9950 <Header_reinit@@Base+0x30>
    994c:	blx	r3
    994e:	ldr	r1, [r6, #0]
    9950:	ldr	r3, [r1, r5]
    9952:	ldr	r2, [r3, #16]
    9954:	cmp	r2, r4
    9956:	bgt.n	993e <Header_reinit@@Base+0x1e>
    9958:	ldr	r2, [r6, #12]
    995a:	adds	r7, #1
    995c:	cmp	r2, r7
    995e:	bgt.n	992e <Header_reinit@@Base+0xe>
    9960:	pop	{r3, r4, r5, r6, r7, pc}
    9962:	bx	lr

00009964 <Header_draw@@Base>:
    9964:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9968:	mov	sl, r0
    996a:	ldr	r7, [pc, #192]	; (9a2c <Header_draw@@Base+0xc8>)
    996c:	sub	sp, #20
    996e:	ldr	r2, [pc, #192]	; (9a30 <Header_draw@@Base+0xcc>)
    9970:	add	r7, pc
    9972:	ldr	r3, [pc, #192]	; (9a34 <Header_draw@@Base+0xd0>)
    9974:	ldr	r6, [r0, #20]
    9976:	ldr	r2, [r7, r2]
    9978:	ldr	r5, [r7, r3]
    997a:	ldr.w	r8, [r0, #16]
    997e:	ldr	r3, [r2, #0]
    9980:	ldr	r0, [r5, #0]
    9982:	ldr	r1, [r3, #0]
    9984:	blx	6c88 <wattrset@plt+0x4>
    9988:	ldr	r3, [pc, #172]	; (9a38 <Header_draw@@Base+0xd4>)
    998a:	cmp	r6, #0
    998c:	itt	gt
    998e:	ldrgt	r7, [r7, r3]
    9990:	movgt	r4, #0
    9992:	ble.n	9a26 <Header_draw@@Base+0xc2>
    9994:	mov	r1, r4
    9996:	ldr	r0, [r5, #0]
    9998:	movs	r2, #0
    999a:	adds	r4, #1
    999c:	blx	6668 <wmove@plt>
    99a0:	movs	r1, #32
    99a2:	adds	r0, #1
    99a4:	beq.n	99ae <Header_draw@@Base+0x4a>
    99a6:	ldr	r2, [r7, #0]
    99a8:	ldr	r0, [r5, #0]
    99aa:	blx	6b9c <whline@plt>
    99ae:	cmp	r6, r4
    99b0:	bne.n	9994 <Header_draw@@Base+0x30>
    99b2:	ldr.w	r4, [sl, #12]
    99b6:	ldr	r0, [r7, #0]
    99b8:	mov	r1, r4
    99ba:	bl	15578 <Battery_getData@@Base+0x4c8>
    99be:	cmp	r4, #0
    99c0:	mls	fp, r8, r4, r0
    99c4:	ble.n	9a20 <Header_draw@@Base+0xbc>
    99c6:	add.w	r3, r8, r8, lsr #31
    99ca:	mov.w	r9, #0
    99ce:	add.w	r2, r8, fp
    99d2:	str	r2, [sp, #8]
    99d4:	asrs	r3, r3, #1
    99d6:	str	r3, [sp, #12]
    99d8:	ldr.w	r3, [sl]
    99dc:	ldr.w	r6, [r3, r9, lsl #2]
    99e0:	ldr	r3, [r6, #16]
    99e2:	cmp	r3, #0
    99e4:	ittt	gt
    99e6:	ldrgt	r5, [sp, #12]
    99e8:	movgt	r4, #0
    99ea:	strgt	r5, [sp, #4]
    99ec:	ble.n	9a14 <Header_draw@@Base+0xb0>
    99ee:	ldr	r0, [r6, #0]
    99f0:	mov	r3, fp
    99f2:	ldr	r2, [sp, #4]
    99f4:	mov	r1, r8
    99f6:	ldr.w	r7, [r0, r4, lsl #2]
    99fa:	adds	r4, #1
    99fc:	ldr	r5, [r7, #4]
    99fe:	mov	r0, r7
    9a00:	blx	r5
    9a02:	ldr	r3, [r6, #16]
    9a04:	ldr	r1, [sp, #4]
    9a06:	ldr	r2, [r7, #24]
    9a08:	cmp	r3, r4
    9a0a:	add	r1, r2
    9a0c:	str	r1, [sp, #4]
    9a0e:	bgt.n	99ee <Header_draw@@Base+0x8a>
    9a10:	ldr.w	r4, [sl, #12]
    9a14:	add.w	r9, r9, #1
    9a18:	ldr	r3, [sp, #8]
    9a1a:	cmp	r4, r9
    9a1c:	add	r8, r3
    9a1e:	bgt.n	99d8 <Header_draw@@Base+0x74>
    9a20:	add	sp, #20
    9a22:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9a26:	ldr	r7, [r7, r3]
    9a28:	b.n	99b2 <Header_draw@@Base+0x4e>
    9a2a:	nop
    9a2c:	lsls	r4, r3, #14
    9a2e:	movs	r2, r0
    9a30:	lsls	r0, r6, #9
    9a32:	movs	r0, r0
    9a34:	lsls	r4, r5, #9
    9a36:	movs	r0, r0
    9a38:	lsls	r0, r7, #10
	...

00009a3c <Header_calculateHeight@@Base>:
    9a3c:	ldr	r3, [r0, #4]
    9a3e:	mov	ip, r0
    9a40:	push	{r4, r5, r6, r7}
    9a42:	ldrb.w	r3, [r3, #70]	; 0x46
    9a46:	ldr	r6, [r0, #12]
    9a48:	cmp	r3, #0
    9a4a:	ite	ne
    9a4c:	movne	r7, #2
    9a4e:	moveq	r7, #0
    9a50:	cmp	r6, #0
    9a52:	ble.n	9a9a <Header_calculateHeight@@Base+0x5e>
    9a54:	ldr	r5, [r0, #0]
    9a56:	mov	r0, r7
    9a58:	add.w	r6, r5, r6, lsl #2
    9a5c:	ldr.w	r3, [r5], #4
    9a60:	ldr	r4, [r3, #16]
    9a62:	cmp	r4, #0
    9a64:	ble.n	9a8c <Header_calculateHeight@@Base+0x50>
    9a66:	ldr	r3, [r3, #0]
    9a68:	mov	r2, r7
    9a6a:	add.w	r4, r3, r4, lsl #2
    9a6e:	ldr.w	r1, [r3], #4
    9a72:	cmp	r4, r3
    9a74:	ldr	r1, [r1, #24]
    9a76:	add	r2, r1
    9a78:	bne.n	9a6e <Header_calculateHeight@@Base+0x32>
    9a7a:	cmp	r0, r2
    9a7c:	it	lt
    9a7e:	movlt	r0, r2
    9a80:	cmp	r5, r6
    9a82:	bne.n	9a5c <Header_calculateHeight@@Base+0x20>
    9a84:	strd	r7, r0, [ip, #16]
    9a88:	pop	{r4, r5, r6, r7}
    9a8a:	bx	lr
    9a8c:	mov	r2, r7
    9a8e:	cmp	r0, r2
    9a90:	it	lt
    9a92:	movlt	r0, r2
    9a94:	cmp	r5, r6
    9a96:	bne.n	9a5c <Header_calculateHeight@@Base+0x20>
    9a98:	b.n	9a84 <Header_calculateHeight@@Base+0x48>
    9a9a:	mov	r0, r7
    9a9c:	strd	r7, r0, [ip, #16]
    9aa0:	pop	{r4, r5, r6, r7}
    9aa2:	bx	lr

00009aa4 <Header_populateFromSettings@@Base>:
    9aa4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9aa8:	mov	r6, r0
    9aaa:	ldr	r3, [r0, #12]
    9aac:	cmp	r3, #0
    9aae:	ble.n	9b06 <Header_populateFromSettings@@Base+0x62>
    9ab0:	mov.w	r9, #0
    9ab4:	mov.w	r8, #12
    9ab8:	ldr	r5, [r6, #4]
    9aba:	mla	r5, r8, r9, r5
    9abe:	ldr	r2, [r5, #4]
    9ac0:	cmp	r2, #0
    9ac2:	ble.n	9afe <Header_populateFromSettings@@Base+0x5a>
    9ac4:	movs	r4, #0
    9ac6:	mov	r7, r5
    9ac8:	b.n	9ad2 <Header_populateFromSettings@@Base+0x2e>
    9aca:	ldr	r2, [r5, #4]
    9acc:	adds	r4, #1
    9ace:	cmp	r2, r4
    9ad0:	ble.n	9afc <Header_populateFromSettings@@Base+0x58>
    9ad2:	ldr	r3, [r5, #8]
    9ad4:	mov	r2, r9
    9ad6:	mov	r0, r6
    9ad8:	ldr.w	r1, [r3, r4, lsl #2]
    9adc:	bl	97a8 <Header_addMeterByName@@Base>
    9ae0:	ldr	r2, [r7, #12]
    9ae2:	ldr.w	r2, [r2, r4, lsl #2]
    9ae6:	cmp	r2, #0
    9ae8:	beq.n	9aca <Header_populateFromSettings@@Base+0x26>
    9aea:	mov	r1, r4
    9aec:	mov	r3, r9
    9aee:	mov	r0, r6
    9af0:	adds	r4, #1
    9af2:	bl	985c <Header_setMode@@Base>
    9af6:	ldr	r2, [r5, #4]
    9af8:	cmp	r2, r4
    9afa:	bgt.n	9ad2 <Header_populateFromSettings@@Base+0x2e>
    9afc:	ldr	r3, [r6, #12]
    9afe:	add.w	r9, r9, #1
    9b02:	cmp	r3, r9
    9b04:	bgt.n	9ab8 <Header_populateFromSettings@@Base+0x14>
    9b06:	mov	r0, r6
    9b08:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9b0c:	b.w	9a3c <Header_calculateHeight@@Base>
    9b10:	push	{r4, lr}
    9b12:	mov	r4, r0
    9b14:	ldr	r0, [r0, #4]
    9b16:	blx	6758 <free@plt+0x4>
    9b1a:	mov	r0, r4
    9b1c:	ldmia.w	sp!, {r4, lr}
    9b20:	b.w	6754 <free@plt>
    9b24:	push	{r4, r5, r6, lr}
    9b26:	mov	r4, r0
    9b28:	ldrb	r3, [r4, #12]
    9b2a:	sub	sp, #8
    9b2c:	ldr	r5, [pc, #68]	; (9b74 <Header_populateFromSettings@@Base+0xd0>)
    9b2e:	mov	r0, r1
    9b30:	add	r5, pc
    9b32:	cbz	r3, 9b66 <Header_populateFromSettings@@Base+0xc2>
    9b34:	ldr	r2, [pc, #64]	; (9b78 <Header_populateFromSettings@@Base+0xd4>)
    9b36:	ldr	r3, [pc, #68]	; (9b7c <Header_populateFromSettings@@Base+0xd8>)
    9b38:	ldr	r6, [r5, r2]
    9b3a:	ldr	r3, [r5, r3]
    9b3c:	ldr	r2, [r6, #0]
    9b3e:	ldrb	r3, [r3, #0]
    9b40:	ldr	r1, [r2, #4]
    9b42:	cbnz	r3, 9b60 <Header_populateFromSettings@@Base+0xbc>
    9b44:	ldr	r2, [pc, #56]	; (9b80 <Header_populateFromSettings@@Base+0xdc>)
    9b46:	add	r2, pc
    9b48:	str	r0, [sp, #4]
    9b4a:	bl	d3b8 <RichString_write@@Base>
    9b4e:	ldr	r0, [sp, #4]
    9b50:	ldr	r3, [r6, #0]
    9b52:	ldr	r2, [r4, #4]
    9b54:	ldr	r1, [r3, #4]
    9b56:	add	sp, #8
    9b58:	ldmia.w	sp!, {r4, r5, r6, lr}
    9b5c:	b.w	d1e4 <RichString_append@@Base>
    9b60:	ldr	r2, [pc, #32]	; (9b84 <Header_populateFromSettings@@Base+0xe0>)
    9b62:	add	r2, pc
    9b64:	b.n	9b48 <Header_populateFromSettings@@Base+0xa4>
    9b66:	str	r1, [sp, #4]
    9b68:	bl	d194 <RichString_prune@@Base>
    9b6c:	ldr	r3, [pc, #8]	; (9b78 <Header_populateFromSettings@@Base+0xd4>)
    9b6e:	ldr	r0, [sp, #4]
    9b70:	ldr	r6, [r5, r3]
    9b72:	b.n	9b50 <Header_populateFromSettings@@Base+0xac>
    9b74:	lsls	r4, r3, #7
    9b76:	movs	r2, r0
    9b78:	lsls	r0, r6, #9
    9b7a:	movs	r0, r0
    9b7c:	lsls	r0, r1, #9
    9b7e:	movs	r0, r0
    9b80:	ldmia	r5, {r1, r2, r3, r4, r5}
    9b82:	movs	r0, r0
    9b84:	ldmia	r5!, {r1, r3, r4}
	...

00009b88 <ListItem_compare@@Base>:
    9b88:	ldr	r0, [r0, #4]
    9b8a:	ldr	r1, [r1, #4]
    9b8c:	b.w	66b0 <strcmp@plt>

00009b90 <ListItem_new@@Base>:
    9b90:	push	{r4, r5, r6, lr}
    9b92:	mov	r6, r0
    9b94:	movs	r0, #16
    9b96:	mov	r5, r1
    9b98:	bl	11d84 <xMalloc@@Base>
    9b9c:	ldr	r3, [pc, #24]	; (9bb8 <ListItem_new@@Base+0x28>)
    9b9e:	add	r3, pc
    9ba0:	mov	r4, r0
    9ba2:	mov	r0, r6
    9ba4:	str	r3, [r4, #0]
    9ba6:	bl	11de4 <xStrdup@@Base>
    9baa:	movs	r3, #0
    9bac:	str	r5, [r4, #8]
    9bae:	strb	r3, [r4, #12]
    9bb0:	str	r0, [r4, #4]
    9bb2:	mov	r0, r4
    9bb4:	pop	{r4, r5, r6, pc}
    9bb6:	nop
    9bb8:	lsrs	r6, r5, #26
    9bba:	movs	r2, r0

00009bbc <ListItem_append@@Base>:
    9bbc:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9bc0:	mov	r4, r0
    9bc2:	ldr.w	r9, [r0, #4]
    9bc6:	mov	r6, r1
    9bc8:	mov	r0, r9
    9bca:	blx	6a0c <strlen@plt>
    9bce:	mov	r5, r0
    9bd0:	mov	r0, r6
    9bd2:	blx	6a0c <strlen@plt>
    9bd6:	add.w	r8, r5, r0
    9bda:	mov	r7, r0
    9bdc:	add.w	r1, r8, #1
    9be0:	mov	r0, r9
    9be2:	bl	11dc8 <xRealloc@@Base>
    9be6:	mov	r2, r7
    9be8:	mov	r1, r6
    9bea:	str	r0, [r4, #4]
    9bec:	add	r0, r5
    9bee:	blx	6788 <memcpy@plt>
    9bf2:	ldr	r3, [r4, #4]
    9bf4:	movs	r2, #0
    9bf6:	strb.w	r2, [r3, r8]
    9bfa:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    9bfe:	nop

00009c00 <ListItem_getRef@@Base>:
    9c00:	ldr	r0, [r0, #4]
    9c02:	bx	lr
    9c04:	ldr	r2, [r0, #32]
    9c06:	movs	r3, #20
    9c08:	ldr.w	ip, [pc, #216]	; 9ce4 <ListItem_getRef@@Base+0xe4>
    9c0c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c10:	mov	r6, r1
    9c12:	ldr	r1, [pc, #212]	; (9ce8 <ListItem_getRef@@Base+0xe8>)
    9c14:	add	ip, pc
    9c16:	sub	sp, #44	; 0x2c
    9c18:	ldrd	r8, r9, [r2]
    9c1c:	ldr	r7, [pc, #204]	; (9cec <ListItem_getRef@@Base+0xec>)
    9c1e:	add	r4, sp, #16
    9c20:	ldr.w	r1, [ip, r1]
    9c24:	mov	r5, r0
    9c26:	add	r7, pc
    9c28:	mov	r0, r4
    9c2a:	ldr	r1, [r1, #0]
    9c2c:	str	r1, [sp, #36]	; 0x24
    9c2e:	mov.w	r1, #0
    9c32:	movs	r2, #1
    9c34:	mov	r1, r3
    9c36:	str	r7, [sp, #0]
    9c38:	strd	r8, r9, [sp, #8]
    9c3c:	blx	6c78 <__snprintf_chk@plt>
    9c40:	ldr	r1, [pc, #172]	; (9cf0 <ListItem_getRef@@Base+0xf0>)
    9c42:	add	r1, pc
    9c44:	cmp	r0, #19
    9c46:	bgt.n	9ccc <ListItem_getRef@@Base+0xcc>
    9c48:	ldr	r3, [pc, #168]	; (9cf4 <ListItem_getRef@@Base+0xf4>)
    9c4a:	mov	r2, r4
    9c4c:	mov	r0, r6
    9c4e:	ldr.w	r8, [r1, r3]
    9c52:	ldr.w	r3, [r8]
    9c56:	ldr.w	r1, [r3, #164]	; 0xa4
    9c5a:	bl	d3b8 <RichString_write@@Base>
    9c5e:	ldr	r0, [r5, #32]
    9c60:	movs	r3, #20
    9c62:	movs	r2, #1
    9c64:	mov	r1, r3
    9c66:	ldrd	sl, fp, [r0, #8]
    9c6a:	mov	r0, r4
    9c6c:	str	r7, [sp, #0]
    9c6e:	strd	sl, fp, [sp, #8]
    9c72:	blx	6c78 <__snprintf_chk@plt>
    9c76:	cmp	r0, #19
    9c78:	bgt.n	9ccc <ListItem_getRef@@Base+0xcc>
    9c7a:	ldr.w	r3, [r8]
    9c7e:	mov	r2, r4
    9c80:	mov	r0, r6
    9c82:	ldr.w	r1, [r3, #160]	; 0xa0
    9c86:	bl	d1e4 <RichString_append@@Base>
    9c8a:	ldr	r0, [r5, #32]
    9c8c:	movs	r3, #20
    9c8e:	movs	r2, #1
    9c90:	mov	r1, r3
    9c92:	ldrd	sl, fp, [r0, #16]
    9c96:	mov	r0, r4
    9c98:	str	r7, [sp, #0]
    9c9a:	strd	sl, fp, [sp, #8]
    9c9e:	blx	6c78 <__snprintf_chk@plt>
    9ca2:	cmp	r0, #19
    9ca4:	bgt.n	9ccc <ListItem_getRef@@Base+0xcc>
    9ca6:	ldr.w	r3, [r8]
    9caa:	mov	r2, r4
    9cac:	mov	r0, r6
    9cae:	ldr.w	r1, [r3, #156]	; 0x9c
    9cb2:	bl	d1e4 <RichString_append@@Base>
    9cb6:	ldr	r2, [pc, #64]	; (9cf8 <ListItem_getRef@@Base+0xf8>)
    9cb8:	ldr	r3, [pc, #44]	; (9ce8 <ListItem_getRef@@Base+0xe8>)
    9cba:	add	r2, pc
    9cbc:	ldr	r3, [r2, r3]
    9cbe:	ldr	r2, [r3, #0]
    9cc0:	ldr	r3, [sp, #36]	; 0x24
    9cc2:	eors	r2, r3
    9cc4:	bne.n	9cde <ListItem_getRef@@Base+0xde>
    9cc6:	add	sp, #44	; 0x2c
    9cc8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9ccc:	movs	r0, #1
    9cce:	blx	6730 <curs_set@plt>
    9cd2:	blx	6c48 <endwin@plt+0x4>
    9cd6:	movs	r1, #0
    9cd8:	movs	r0, #1
    9cda:	blx	683c <err@plt>
    9cde:	blx	67d0 <__stack_chk_fail@plt>
    9ce2:	nop
    9ce4:	lsls	r0, r7, #3
    9ce6:	movs	r2, r0
    9ce8:	lsls	r0, r0, #9
    9cea:	movs	r0, r0
    9cec:	ldmia	r4!, {r1, r5, r6}
    9cee:	movs	r0, r0
    9cf0:	lsls	r2, r1, #3
    9cf2:	movs	r2, r0
    9cf4:	lsls	r0, r6, #9
    9cf6:	movs	r0, r0
    9cf8:	lsls	r2, r2, #1
    9cfa:	movs	r2, r0
    9cfc:	push	{r3, lr}
    9cfe:	movs	r0, #1
    9d00:	blx	6730 <curs_set@plt>
    9d04:	blx	6c48 <endwin@plt+0x4>
    9d08:	movs	r1, #0
    9d0a:	movs	r0, #1
    9d0c:	blx	683c <err@plt>
    9d10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9d14:	mov	r5, r0
    9d16:	ldr	r0, [r0, #32]
    9d18:	sub	sp, #36	; 0x24
    9d1a:	mov	r4, r2
    9d1c:	mov	r7, r1
    9d1e:	add.w	r2, r0, #16
    9d22:	add.w	r1, r0, #8
    9d26:	bl	11ee8 <Platform_getLoadAverage@@Base>
    9d2a:	ldr	r6, [r5, #32]
    9d2c:	mov	r0, r7
    9d2e:	ldr	r5, [pc, #64]	; (9d70 <ListItem_getRef@@Base+0x170>)
    9d30:	mov	r1, r4
    9d32:	mov.w	r3, #4294967295	; 0xffffffff
    9d36:	ldrd	r8, r9, [r6, #16]
    9d3a:	add	r5, pc
    9d3c:	movs	r2, #1
    9d3e:	strd	r8, r9, [sp, #24]
    9d42:	ldrd	r8, r9, [r6, #8]
    9d46:	strd	r8, r9, [sp, #16]
    9d4a:	ldrd	r6, r7, [r6]
    9d4e:	str	r5, [sp, #0]
    9d50:	strd	r6, r7, [sp, #8]
    9d54:	blx	6c78 <__snprintf_chk@plt>
    9d58:	cmp	r4, r0
    9d5a:	ite	gt
    9d5c:	movgt	r4, #0
    9d5e:	movle	r4, #1
    9d60:	orrs.w	r3, r4, r0, lsr #31
    9d64:	bne.n	9d6c <ListItem_getRef@@Base+0x16c>
    9d66:	add	sp, #36	; 0x24
    9d68:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    9d6c:	bl	9cfc <ListItem_getRef@@Base+0xfc>
    9d70:	ldmia	r3!, {r1, r2, r4, r6}
    9d72:	movs	r0, r0
    9d74:	ldr.w	ip, [pc, #132]	; 9dfc <ListItem_getRef@@Base+0x1fc>
    9d78:	ldr	r3, [pc, #132]	; (9e00 <ListItem_getRef@@Base+0x200>)
    9d7a:	add	ip, pc
    9d7c:	push	{r4, r5, r6, lr}
    9d7e:	sub	sp, #40	; 0x28
    9d80:	ldr.w	r3, [ip, r3]
    9d84:	mov	r5, r0
    9d86:	mov	r6, r1
    9d88:	ldr	r0, [r0, #32]
    9d8a:	add	r1, sp, #16
    9d8c:	mov	r4, r2
    9d8e:	add	r2, sp, #24
    9d90:	ldr	r3, [r3, #0]
    9d92:	str	r3, [sp, #36]	; 0x24
    9d94:	mov.w	r3, #0
    9d98:	bl	11ee8 <Platform_getLoadAverage@@Base>
    9d9c:	ldr	r3, [r5, #32]
    9d9e:	vldr	d6, [r5, #40]	; 0x28
    9da2:	vldr	d7, [r3]
    9da6:	vcmpe.f64	d7, d6
    9daa:	vmrs	APSR_nzcv, fpscr
    9dae:	ble.n	9db8 <ListItem_getRef@@Base+0x1b8>
    9db0:	vstr	d7, [r5, #40]	; 0x28
    9db4:	vldr	d7, [r3]
    9db8:	ldr	r5, [pc, #72]	; (9e04 <ListItem_getRef@@Base+0x204>)
    9dba:	mov	r1, r4
    9dbc:	mov.w	r3, #4294967295	; 0xffffffff
    9dc0:	mov	r0, r6
    9dc2:	vstr	d7, [sp, #8]
    9dc6:	add	r5, pc
    9dc8:	movs	r2, #1
    9dca:	str	r5, [sp, #0]
    9dcc:	blx	6c78 <__snprintf_chk@plt>
    9dd0:	cmp	r4, r0
    9dd2:	ite	gt
    9dd4:	movgt	r4, #0
    9dd6:	movle	r4, #1
    9dd8:	orrs.w	r3, r4, r0, lsr #31
    9ddc:	bne.n	9df2 <ListItem_getRef@@Base+0x1f2>
    9dde:	ldr	r2, [pc, #40]	; (9e08 <ListItem_getRef@@Base+0x208>)
    9de0:	ldr	r3, [pc, #28]	; (9e00 <ListItem_getRef@@Base+0x200>)
    9de2:	add	r2, pc
    9de4:	ldr	r3, [r2, r3]
    9de6:	ldr	r2, [r3, #0]
    9de8:	ldr	r3, [sp, #36]	; 0x24
    9dea:	eors	r2, r3
    9dec:	bne.n	9df6 <ListItem_getRef@@Base+0x1f6>
    9dee:	add	sp, #40	; 0x28
    9df0:	pop	{r4, r5, r6, pc}
    9df2:	bl	9cfc <ListItem_getRef@@Base+0xfc>
    9df6:	blx	67d0 <__stack_chk_fail@plt>
    9dfa:	nop
    9dfc:	vaddl.u16	q0, d2, d1
    9e00:	lsls	r0, r0, #9
    9e02:	movs	r0, r0
    9e04:	ldmia	r2!, {r1, r3, r4, r6, r7}
    9e06:	movs	r0, r0
    9e08:	vhadd.u32	d0, d10, d1
    9e0c:	push	{r4, r5, r6, r7, lr}
    9e0e:	mov	r4, r1
    9e10:	ldr	r6, [pc, #100]	; (9e78 <ListItem_getRef@@Base+0x278>)
    9e12:	sub	sp, #44	; 0x2c
    9e14:	ldr	r0, [r0, #32]
    9e16:	add	r5, sp, #16
    9e18:	ldr	r1, [pc, #96]	; (9e7c <ListItem_getRef@@Base+0x27c>)
    9e1a:	add	r6, pc
    9e1c:	ldr	r2, [pc, #96]	; (9e80 <ListItem_getRef@@Base+0x280>)
    9e1e:	movs	r3, #20
    9e20:	ldr	r1, [r6, r1]
    9e22:	add	r2, pc
    9e24:	ldrd	r6, r7, [r0]
    9e28:	mov	r0, r5
    9e2a:	ldr	r1, [r1, #0]
    9e2c:	str	r1, [sp, #36]	; 0x24
    9e2e:	mov.w	r1, #0
    9e32:	mov	r1, r3
    9e34:	str	r2, [sp, #0]
    9e36:	movs	r2, #1
    9e38:	strd	r6, r7, [sp, #8]
    9e3c:	blx	6c78 <__snprintf_chk@plt>
    9e40:	ldr	r1, [pc, #64]	; (9e84 <ListItem_getRef@@Base+0x284>)
    9e42:	add	r1, pc
    9e44:	cmp	r0, #19
    9e46:	bgt.n	9e6e <ListItem_getRef@@Base+0x26e>
    9e48:	ldr	r3, [pc, #60]	; (9e88 <ListItem_getRef@@Base+0x288>)
    9e4a:	mov	r2, r5
    9e4c:	mov	r0, r4
    9e4e:	ldr	r3, [r1, r3]
    9e50:	ldr	r3, [r3, #0]
    9e52:	ldr.w	r1, [r3, #152]	; 0x98
    9e56:	bl	d3b8 <RichString_write@@Base>
    9e5a:	ldr	r2, [pc, #48]	; (9e8c <ListItem_getRef@@Base+0x28c>)
    9e5c:	ldr	r3, [pc, #28]	; (9e7c <ListItem_getRef@@Base+0x27c>)
    9e5e:	add	r2, pc
    9e60:	ldr	r3, [r2, r3]
    9e62:	ldr	r2, [r3, #0]
    9e64:	ldr	r3, [sp, #36]	; 0x24
    9e66:	eors	r2, r3
    9e68:	bne.n	9e72 <ListItem_getRef@@Base+0x272>
    9e6a:	add	sp, #44	; 0x2c
    9e6c:	pop	{r4, r5, r6, r7, pc}
    9e6e:	bl	9cfc <ListItem_getRef@@Base+0xfc>
    9e72:	blx	67d0 <__stack_chk_fail@plt>
    9e76:	nop
    9e78:	cdp2	0, 15, cr0, cr2, cr1, {0}
    9e7c:	lsls	r0, r0, #9
    9e7e:	movs	r0, r0
    9e80:	ldmia	r2, {r1, r2, r5, r6}
    9e82:	movs	r0, r0
    9e84:	cdp2	0, 12, cr0, cr10, cr1, {0}
    9e88:	lsls	r0, r6, #9
    9e8a:	movs	r0, r0
    9e8c:	cdp2	0, 10, cr0, cr14, cr1, {0}
    9e90:	push	{r4, r5, r6, lr}
    9e92:	mov	r6, r0
    9e94:	mov	r5, r1
    9e96:	mov	r4, r2
    9e98:	bl	12220 <Platform_setMemoryValues@@Base>
    9e9c:	ldr	r3, [r6, #32]
    9e9e:	mov	r2, r4
    9ea0:	mov	r0, r5
    9ea2:	vldr	d7, [r3]
    9ea6:	vcvt.u32.f64	s15, d7
    9eaa:	vmov	r1, s15
    9eae:	bl	a9d4 <Meter_humanUnit@@Base>
    9eb2:	subs	r4, r4, r0
    9eb4:	cmp	r4, #0
    9eb6:	bgt.n	9eba <ListItem_getRef@@Base+0x2ba>
    9eb8:	pop	{r4, r5, r6, pc}
    9eba:	movs	r3, #47	; 0x2f
    9ebc:	strb	r3, [r5, r0]
    9ebe:	vldr	d7, [r6, #40]	; 0x28
    9ec2:	add	r0, r5
    9ec4:	subs	r2, r4, #1
    9ec6:	adds	r0, #1
    9ec8:	ldmia.w	sp!, {r4, r5, r6, lr}
    9ecc:	vcvt.u32.f64	s15, d7
    9ed0:	vmov	r1, s15
    9ed4:	b.w	a9d4 <Meter_humanUnit@@Base>
    9ed8:	push	{r4, r5, r6, r7, lr}
    9eda:	sub	sp, #60	; 0x3c
    9edc:	ldr	r4, [pc, #248]	; (9fd8 <ListItem_getRef@@Base+0x3d8>)
    9ede:	mov	r5, r1
    9ee0:	ldr	r2, [pc, #248]	; (9fdc <ListItem_getRef@@Base+0x3dc>)
    9ee2:	mov	r7, r0
    9ee4:	add	r4, pc
    9ee6:	ldr	r3, [pc, #248]	; (9fe0 <ListItem_getRef@@Base+0x3e0>)
    9ee8:	mov	r0, r1
    9eea:	ldr	r2, [r4, r2]
    9eec:	add	r3, pc
    9eee:	mov	r4, sp
    9ef0:	ldr	r2, [r2, #0]
    9ef2:	str	r2, [sp, #52]	; 0x34
    9ef4:	mov.w	r2, #0
    9ef8:	ldr	r2, [pc, #232]	; (9fe4 <ListItem_getRef@@Base+0x3e4>)
    9efa:	ldr	r6, [r3, r2]
    9efc:	ldr	r2, [pc, #232]	; (9fe8 <ListItem_getRef@@Base+0x3e8>)
    9efe:	ldr	r3, [r6, #0]
    9f00:	add	r2, pc
    9f02:	ldr	r1, [r3, #44]	; 0x2c
    9f04:	bl	d3b8 <RichString_write@@Base>
    9f08:	vldr	d7, [r7, #40]	; 0x28
    9f0c:	movs	r2, #50	; 0x32
    9f0e:	mov	r0, r4
    9f10:	vcvt.u32.f64	s15, d7
    9f14:	vmov	r1, s15
    9f18:	bl	a9d4 <Meter_humanUnit@@Base>
    9f1c:	ldr	r3, [r6, #0]
    9f1e:	mov	r0, r5
    9f20:	mov	r2, r4
    9f22:	ldr	r1, [r3, #48]	; 0x30
    9f24:	bl	d1e4 <RichString_append@@Base>
    9f28:	ldr	r3, [r7, #32]
    9f2a:	movs	r2, #50	; 0x32
    9f2c:	mov	r0, r4
    9f2e:	vldr	d7, [r3]
    9f32:	vcvt.u32.f64	s15, d7
    9f36:	vmov	r1, s15
    9f3a:	bl	a9d4 <Meter_humanUnit@@Base>
    9f3e:	ldr	r3, [r6, #0]
    9f40:	ldr	r2, [pc, #168]	; (9fec <ListItem_getRef@@Base+0x3ec>)
    9f42:	mov	r0, r5
    9f44:	ldr	r1, [r3, #44]	; 0x2c
    9f46:	add	r2, pc
    9f48:	bl	d1e4 <RichString_append@@Base>
    9f4c:	ldr	r3, [r6, #0]
    9f4e:	mov	r0, r5
    9f50:	mov	r2, r4
    9f52:	ldr.w	r1, [r3, #136]	; 0x88
    9f56:	bl	d1e4 <RichString_append@@Base>
    9f5a:	ldr	r3, [r7, #32]
    9f5c:	movs	r2, #50	; 0x32
    9f5e:	mov	r0, r4
    9f60:	vldr	d7, [r3, #8]
    9f64:	vcvt.u32.f64	s15, d7
    9f68:	vmov	r1, s15
    9f6c:	bl	a9d4 <Meter_humanUnit@@Base>
    9f70:	ldr	r3, [r6, #0]
    9f72:	ldr	r2, [pc, #124]	; (9ff0 <ListItem_getRef@@Base+0x3f0>)
    9f74:	mov	r0, r5
    9f76:	ldr	r1, [r3, #44]	; 0x2c
    9f78:	add	r2, pc
    9f7a:	bl	d1e4 <RichString_append@@Base>
    9f7e:	ldr	r3, [r6, #0]
    9f80:	mov	r0, r5
    9f82:	mov	r2, r4
    9f84:	ldr.w	r1, [r3, #144]	; 0x90
    9f88:	bl	d1e4 <RichString_append@@Base>
    9f8c:	ldr	r3, [r7, #32]
    9f8e:	movs	r2, #50	; 0x32
    9f90:	mov	r0, r4
    9f92:	vldr	d7, [r3, #16]
    9f96:	vcvt.u32.f64	s15, d7
    9f9a:	vmov	r1, s15
    9f9e:	bl	a9d4 <Meter_humanUnit@@Base>
    9fa2:	ldr	r3, [r6, #0]
    9fa4:	ldr	r2, [pc, #76]	; (9ff4 <ListItem_getRef@@Base+0x3f4>)
    9fa6:	mov	r0, r5
    9fa8:	ldr	r1, [r3, #44]	; 0x2c
    9faa:	add	r2, pc
    9fac:	bl	d1e4 <RichString_append@@Base>
    9fb0:	ldr	r3, [r6, #0]
    9fb2:	mov	r2, r4
    9fb4:	mov	r0, r5
    9fb6:	ldr.w	r1, [r3, #148]	; 0x94
    9fba:	bl	d1e4 <RichString_append@@Base>
    9fbe:	ldr	r2, [pc, #56]	; (9ff8 <ListItem_getRef@@Base+0x3f8>)
    9fc0:	ldr	r3, [pc, #24]	; (9fdc <ListItem_getRef@@Base+0x3dc>)
    9fc2:	add	r2, pc
    9fc4:	ldr	r3, [r2, r3]
    9fc6:	ldr	r2, [r3, #0]
    9fc8:	ldr	r3, [sp, #52]	; 0x34
    9fca:	eors	r2, r3
    9fcc:	bne.n	9fd2 <ListItem_getRef@@Base+0x3d2>
    9fce:	add	sp, #60	; 0x3c
    9fd0:	pop	{r4, r5, r6, r7, pc}
    9fd2:	blx	67d0 <__stack_chk_fail@plt>
    9fd6:	nop
    9fd8:	cdp2	0, 2, cr0, cr8, cr1, {0}
    9fdc:	lsls	r0, r0, #9
    9fde:	movs	r0, r0
    9fe0:	cdp2	0, 2, cr0, cr0, cr1, {0}
    9fe4:	lsls	r0, r6, #9
    9fe6:	movs	r0, r0
    9fe8:	orr.w	r0, r8, #0
    9fec:	ldmia	r2!, {r1}
    9fee:	movs	r0, r0
    9ff0:	ldmia	r1!, {r3, r4, r6, r7}
    9ff2:	movs	r0, r0
    9ff4:	ldmia	r1, {r1, r4, r5, r7}
    9ff6:	movs	r0, r0
    9ff8:	stc2l	0, cr0, [sl, #-4]
    9ffc:	movs	r0, r0
    9ffe:	movs	r0, r0
    a000:	bx	lr
    a002:	nop

0000a004 <Meter_delete@@Base>:
    a004:	cbz	r0, a02e <Meter_delete@@Base+0x2a>
    a006:	ldr	r3, [r0, #0]
    a008:	push	{r4, lr}
    a00a:	mov	r4, r0
    a00c:	ldr	r3, [r3, #20]
    a00e:	cbz	r3, a012 <Meter_delete@@Base+0xe>
    a010:	blx	r3
    a012:	ldr	r0, [r4, #20]
    a014:	blx	6758 <free@plt+0x4>
    a018:	ldr	r0, [r4, #8]
    a01a:	blx	6758 <free@plt+0x4>
    a01e:	ldr	r0, [r4, #32]
    a020:	blx	6758 <free@plt+0x4>
    a024:	mov	r0, r4
    a026:	ldmia.w	sp!, {r4, lr}
    a02a:	b.w	6754 <free@plt>
    a02e:	bx	lr
    a030:	mov	r0, r1
    a032:	b.w	d194 <RichString_prune@@Base>
    a036:	nop
    a038:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a03c:	mov	r4, r2
    a03e:	vpush	{d8}
    a042:	mov	r8, r0
    a044:	ldr	r2, [pc, #792]	; (a360 <Meter_delete@@Base+0x35c>)
    a046:	mov	r9, r1
    a048:	ldr	r5, [pc, #792]	; (a364 <Meter_delete@@Base+0x360>)
    a04a:	add	r2, pc
    a04c:	sub	sp, #52	; 0x34
    a04e:	add	r7, sp, #0
    a050:	ldr.w	sl, [r0, #20]
    a054:	add	r5, pc
    a056:	str	r3, [r7, #28]
    a058:	ldr	r3, [pc, #780]	; (a368 <Meter_delete@@Base+0x364>)
    a05a:	ldr	r3, [r2, r3]
    a05c:	ldr	r3, [r3, #0]
    a05e:	str	r3, [r7, #44]	; 0x2c
    a060:	mov.w	r3, #0
    a064:	cmp.w	sl, #0
    a068:	beq.w	a342 <Meter_delete@@Base+0x33e>
    a06c:	ldr	r3, [pc, #764]	; (a36c <Meter_delete@@Base+0x368>)
    a06e:	ldr	r3, [r5, r3]
    a070:	ldrb	r3, [r3, #0]
    a072:	cmp	r3, #0
    a074:	beq.w	a30c <Meter_delete@@Base+0x308>
    a078:	ldr	r3, [pc, #756]	; (a370 <Meter_delete@@Base+0x36c>)
    a07a:	movs	r1, #4
    a07c:	ldr	r2, [pc, #756]	; (a374 <Meter_delete@@Base+0x370>)
    a07e:	add	r3, pc
    a080:	add	r2, pc
    a082:	strd	r2, r1, [r3]
    a086:	ldr	r2, [pc, #752]	; (a378 <Meter_delete@@Base+0x374>)
    a088:	ldr	r3, [pc, #752]	; (a37c <Meter_delete@@Base+0x378>)
    a08a:	ldr.w	fp, [r5, r2]
    a08e:	ldr	r6, [r5, r3]
    a090:	ldr.w	r3, [fp]
    a094:	ldr	r0, [r6, #0]
    a096:	ldr	r1, [r3, #44]	; 0x2c
    a098:	blx	6c88 <wattrset@plt+0x4>
    a09c:	ldr	r0, [r6, #0]
    a09e:	mov	r2, r9
    a0a0:	mov	r1, r4
    a0a2:	blx	6668 <wmove@plt>
    a0a6:	adds	r0, #1
    a0a8:	beq.n	a0b6 <Meter_delete@@Base+0xb2>
    a0aa:	ldr.w	r1, [r8, #8]
    a0ae:	movs	r2, #3
    a0b0:	ldr	r0, [r6, #0]
    a0b2:	blx	677c <waddnstr@plt>
    a0b6:	movs	r1, #0
    a0b8:	add.w	r0, r7, #36	; 0x24
    a0bc:	blx	68a8 <gettimeofday@plt>
    a0c0:	ldr	r2, [r7, #36]	; 0x24
    a0c2:	ldr.w	r3, [sl]
    a0c6:	add.w	r1, r9, #3
    a0ca:	str	r1, [r7, #24]
    a0cc:	cmp	r2, r3
    a0ce:	ldr	r1, [r7, #28]
    a0d0:	sub.w	r1, r1, #3
    a0d4:	str	r1, [r7, #28]
    a0d6:	beq.w	a32c <Meter_delete@@Base+0x328>
    a0da:	ite	ge
    a0dc:	movge	r3, #1
    a0de:	movlt	r3, #0
    a0e0:	cmp	r3, #0
    a0e2:	beq.n	a194 <Meter_delete@@Base+0x190>
    a0e4:	ldr	r1, [pc, #664]	; (a380 <Meter_delete@@Base+0x37c>)
    a0e6:	movw	r3, #26215	; 0x6667
    a0ea:	movt	r3, #26214	; 0x6666
    a0ee:	mov.w	lr, #10
    a0f2:	ldr.w	r9, [r7, #40]	; 0x28
    a0f6:	movw	r0, #34464	; 0x86a0
    a0fa:	ldr	r1, [r5, r1]
    a0fc:	movt	r0, #1
    a100:	movw	r5, #16959	; 0x423f
    a104:	movt	r5, #15
    a108:	ldr	r1, [r1, #0]
    a10a:	smull	r3, ip, r3, r1
    a10e:	asrs	r3, r1, #31
    a110:	rsb	r3, r3, ip, asr #2
    a114:	add	r2, r3
    a116:	str.w	r2, [sl]
    a11a:	mls	r3, lr, r3, r1
    a11e:	mla	r0, r0, r3, r9
    a122:	add.w	r3, sl, #8
    a126:	cmp	r0, r5
    a128:	add.w	r5, sl, #2048	; 0x800
    a12c:	it	gt
    a12e:	addgt	r2, #1
    a130:	str.w	r0, [sl, #4]
    a134:	ittt	gt
    a136:	subgt.w	r0, r0, #999424	; 0xf4000
    a13a:	subgt.w	r0, r0, #576	; 0x240
    a13e:	strdgt	r2, r0, [sl]
    a142:	ldrd	r0, r1, [r3, #8]
    a146:	strd	r0, r1, [r3], #8
    a14a:	cmp	r3, r5
    a14c:	bne.n	a142 <Meter_delete@@Base+0x13e>
    a14e:	ldr.w	r3, [r8]
    a152:	mov	r9, sp
    a154:	sub	sp, #256	; 0x100
    a156:	movs	r2, #255	; 0xff
    a158:	mov	r0, r8
    a15a:	ldr	r3, [r3, #32]
    a15c:	mov	r1, sp
    a15e:	blx	r3
    a160:	ldr.w	r3, [r8]
    a164:	ldrb.w	r2, [r3, #69]	; 0x45
    a168:	cmp	r2, #0
    a16a:	beq.w	a33c <Meter_delete@@Base+0x338>
    a16e:	ldr.w	r3, [r8, #32]
    a172:	vldr	d7, [pc, #484]	; a358 <Meter_delete@@Base+0x354>
    a176:	add.w	r2, r3, r2, lsl #3
    a17a:	vldmia	r3!, {d6}
    a17e:	cmp	r2, r3
    a180:	vadd.f64	d7, d7, d6
    a184:	bne.n	a17a <Meter_delete@@Base+0x176>
    a186:	vldr	d5, [r8, #40]	; 0x28
    a18a:	vdiv.f64	d6, d7, d5
    a18e:	vstr	d6, [r5]
    a192:	mov	sp, r9
    a194:	ldr	r3, [r7, #28]
    a196:	rsb	r5, r3, #129	; 0x81
    a19a:	lsls	r3, r5, #1
    a19c:	str	r3, [r7, #12]
    a19e:	bmi.w	a31e <Meter_delete@@Base+0x31a>
    a1a2:	ldr	r3, [r7, #12]
    a1a4:	cmp	r3, #254	; 0xfe
    a1a6:	it	le
    a1a8:	movle.w	r9, #0
    a1ac:	bgt.n	a296 <Meter_delete@@Base+0x292>
    a1ae:	ldr	r3, [pc, #468]	; (a384 <Meter_delete@@Base+0x380>)
    a1b0:	add	r3, pc
    a1b2:	str	r3, [r7, #4]
    a1b4:	ldr	r3, [r7, #12]
    a1b6:	add.w	sl, sl, r3, lsl #3
    a1ba:	ldr	r3, [pc, #460]	; (a388 <Meter_delete@@Base+0x384>)
    a1bc:	add	r3, pc
    a1be:	str	r3, [r7, #0]
    a1c0:	ldr	r3, [r7, #24]
    a1c2:	add	r9, r3
    a1c4:	ldr	r3, [pc, #452]	; (a38c <Meter_delete@@Base+0x388>)
    a1c6:	add	r3, pc
    a1c8:	str	r3, [r7, #16]
    a1ca:	adds	r3, r4, #3
    a1cc:	str	r3, [r7, #20]
    a1ce:	ldr	r3, [r7, #4]
    a1d0:	vldr	d0, [sl, #8]
    a1d4:	ldr	r4, [r3, #4]
    a1d6:	lsls	r3, r4, #2
    a1d8:	str	r3, [r7, #28]
    a1da:	vmov	s15, r3
    a1de:	vcvt.f64.s32	d8, s15
    a1e2:	vmul.f64	d0, d8, d0
    a1e6:	blx	6830 <lround@plt>
    a1ea:	ldr	r3, [r7, #28]
    a1ec:	cmp	r0, r3
    a1ee:	itt	gt
    a1f0:	ldrgt	r3, [r7, #28]
    a1f2:	strgt	r3, [r7, #24]
    a1f4:	ble.n	a2e4 <Meter_delete@@Base+0x2e0>
    a1f6:	vldr	d0, [sl, #16]
    a1fa:	vmul.f64	d0, d8, d0
    a1fe:	blx	6830 <lround@plt>
    a202:	ldr	r3, [r7, #28]
    a204:	cmp	r0, r3
    a206:	ble.n	a2be <Meter_delete@@Base+0x2ba>
    a208:	mov.w	r8, #3
    a20c:	str.w	sl, [r7, #8]
    a210:	mov	sl, r8
    a212:	ldr.w	r8, [r7]
    a216:	movs	r1, #32
    a218:	mul.w	r2, r4, sl
    a21c:	ldr	r3, [r7, #24]
    a21e:	ldr	r0, [r6, #0]
    a220:	subs	r5, r3, r2
    a222:	ldr	r3, [r7, #28]
    a224:	cmp	r5, r4
    a226:	sub.w	r2, r3, r2
    a22a:	ite	le
    a22c:	bicle.w	r5, r5, r5, asr #31
    a230:	movgt	r5, r4
    a232:	cmp	r2, r4
    a234:	it	le
    a236:	bicle.w	r4, r2, r2, asr #31
    a23a:	ldr.w	r2, [fp]
    a23e:	ldr.w	r1, [r2, r1, lsl #2]
    a242:	blx	6c88 <wattrset@plt+0x4>
    a246:	ldr	r3, [r7, #20]
    a248:	ldr	r0, [r6, #0]
    a24a:	mov	r2, r9
    a24c:	sub.w	r1, r3, sl
    a250:	blx	6668 <wmove@plt>
    a254:	adds	r0, #1
    a256:	beq.n	a274 <Meter_delete@@Base+0x270>
    a258:	ldr.w	r0, [r8, #4]
    a25c:	mov.w	r2, #4294967295	; 0xffffffff
    a260:	ldr.w	r1, [r8]
    a264:	mla	r5, r0, r5, r5
    a268:	ldr	r0, [r6, #0]
    a26a:	add	r4, r5
    a26c:	ldr.w	r1, [r1, r4, lsl #2]
    a270:	blx	677c <waddnstr@plt>
    a274:	subs.w	sl, sl, #1
    a278:	bcc.n	a282 <Meter_delete@@Base+0x27e>
    a27a:	ldr	r3, [r7, #16]
    a27c:	movs	r1, #33	; 0x21
    a27e:	ldr	r4, [r3, #4]
    a280:	b.n	a218 <Meter_delete@@Base+0x214>
    a282:	ldrd	sl, r3, [r7, #8]
    a286:	add.w	r9, r9, #1
    a28a:	adds	r3, #2
    a28c:	add.w	sl, sl, #16
    a290:	cmp	r3, #254	; 0xfe
    a292:	str	r3, [r7, #12]
    a294:	ble.n	a1ce <Meter_delete@@Base+0x1ca>
    a296:	ldr.w	r3, [fp]
    a29a:	ldr	r0, [r6, #0]
    a29c:	ldr	r1, [r3, #0]
    a29e:	blx	6c88 <wattrset@plt+0x4>
    a2a2:	ldr	r2, [pc, #236]	; (a390 <Meter_delete@@Base+0x38c>)
    a2a4:	ldr	r3, [pc, #192]	; (a368 <Meter_delete@@Base+0x364>)
    a2a6:	add	r2, pc
    a2a8:	ldr	r3, [r2, r3]
    a2aa:	ldr	r2, [r3, #0]
    a2ac:	ldr	r3, [r7, #44]	; 0x2c
    a2ae:	eors	r2, r3
    a2b0:	bne.n	a354 <Meter_delete@@Base+0x350>
    a2b2:	adds	r7, #52	; 0x34
    a2b4:	mov	sp, r7
    a2b6:	vpop	{d8}
    a2ba:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a2be:	vldr	d0, [sl, #16]
    a2c2:	vmul.f64	d0, d8, d0
    a2c6:	blx	6830 <lround@plt>
    a2ca:	cmp	r0, #0
    a2cc:	itt	le
    a2ce:	movle	r3, #1
    a2d0:	strle	r3, [r7, #28]
    a2d2:	ble.n	a208 <Meter_delete@@Base+0x204>
    a2d4:	vldr	d0, [sl, #16]
    a2d8:	vmul.f64	d0, d8, d0
    a2dc:	blx	6830 <lround@plt>
    a2e0:	str	r0, [r7, #28]
    a2e2:	b.n	a208 <Meter_delete@@Base+0x204>
    a2e4:	vldr	d0, [sl, #8]
    a2e8:	vmul.f64	d0, d8, d0
    a2ec:	blx	6830 <lround@plt>
    a2f0:	cmp	r0, #0
    a2f2:	itt	le
    a2f4:	movle	r3, #1
    a2f6:	strle	r3, [r7, #24]
    a2f8:	ble.w	a1f6 <Meter_delete@@Base+0x1f2>
    a2fc:	vldr	d0, [sl, #8]
    a300:	vmul.f64	d0, d8, d0
    a304:	blx	6830 <lround@plt>
    a308:	str	r0, [r7, #24]
    a30a:	b.n	a1f6 <Meter_delete@@Base+0x1f2>
    a30c:	ldr	r2, [pc, #132]	; (a394 <Meter_delete@@Base+0x390>)
    a30e:	movs	r1, #2
    a310:	ldr	r3, [pc, #132]	; (a398 <Meter_delete@@Base+0x394>)
    a312:	add	r2, pc
    a314:	add	r3, pc
    a316:	adds	r3, #100	; 0x64
    a318:	str	r1, [r2, #4]
    a31a:	str	r3, [r2, #0]
    a31c:	b.n	a086 <Meter_delete@@Base+0x82>
    a31e:	mov.w	r9, r3, asr #1
    a322:	movs	r3, #0
    a324:	rsb	r9, r9, #0
    a328:	str	r3, [r7, #12]
    a32a:	b.n	a1ae <Meter_delete@@Base+0x1aa>
    a32c:	ldr	r3, [r7, #40]	; 0x28
    a32e:	ldr.w	r1, [sl, #4]
    a332:	cmp	r3, r1
    a334:	ite	lt
    a336:	movlt	r3, #0
    a338:	movge	r3, #1
    a33a:	b.n	a0e0 <Meter_delete@@Base+0xdc>
    a33c:	vldr	d7, [pc, #24]	; a358 <Meter_delete@@Base+0x354>
    a340:	b.n	a186 <Meter_delete@@Base+0x182>
    a342:	movw	r1, #2056	; 0x808
    a346:	movs	r0, #1
    a348:	bl	11da0 <xCalloc@@Base>
    a34c:	mov	sl, r0
    a34e:	str.w	r0, [r8, #20]
    a352:	b.n	a06c <Meter_delete@@Base+0x68>
    a354:	blx	67d0 <__stack_chk_fail@plt>
	...
    a360:	stc2l	0, cr0, [r2], {1}
    a364:	ldc2	0, cr0, [r8], #4
    a368:	lsls	r0, r0, #9
    a36a:	movs	r0, r0
    a36c:	lsls	r0, r1, #9
    a36e:	movs	r0, r0
    a370:	asrs	r2, r1, #28
    a372:	movs	r2, r0
    a374:			; <UNDEFINED> instruction: 0xf6b00001
    a378:	lsls	r0, r6, #9
    a37a:	movs	r0, r0
    a37c:	lsls	r4, r5, #9
    a37e:	movs	r0, r0
    a380:	lsls	r4, r7, #10
    a382:	movs	r0, r0
    a384:	asrs	r0, r3, #23
    a386:	movs	r2, r0
    a388:	asrs	r4, r1, #23
    a38a:	movs	r2, r0
    a38c:	asrs	r2, r0, #23
    a38e:	movs	r2, r0
    a390:			; <UNDEFINED> instruction: 0xfa660001
    a394:	asrs	r6, r6, #17
    a396:	movs	r2, r0
    a398:	ands.w	r0, ip, #8454144	; 0x810000
    a39c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a3a0:	mov	r5, r3
    a3a2:	vpush	{d8-d9}
    a3a6:	mov	r6, r2
    a3a8:	ldr.w	ip, [pc, #752]	; a69c <Meter_delete@@Base+0x698>
    a3ac:	mov	r8, r1
    a3ae:	ldr	r3, [pc, #752]	; (a6a0 <Meter_delete@@Base+0x69c>)
    a3b0:	movs	r2, #255	; 0xff
    a3b2:	add	ip, pc
    a3b4:	ldr.w	r9, [pc, #748]	; a6a4 <Meter_delete@@Base+0x6a0>
    a3b8:	sub	sp, #356	; 0x164
    a3ba:	add	r7, sp, #16
    a3bc:	ldr	r4, [r0, #0]
    a3be:	add.w	fp, r7, #76	; 0x4c
    a3c2:	add	r9, pc
    a3c4:	str	r0, [r7, #20]
    a3c6:	mov	sl, r6
    a3c8:	ldr.w	r3, [ip, r3]
    a3cc:	mov	r1, fp
    a3ce:	ldr	r4, [r4, #32]
    a3d0:	vmov	s18, r6
    a3d4:	ldr	r3, [r3, #0]
    a3d6:	str.w	r3, [r7, #332]	; 0x14c
    a3da:	mov.w	r3, #0
    a3de:	blx	r4
    a3e0:	ldr	r2, [pc, #708]	; (a6a8 <Meter_delete@@Base+0x6a4>)
    a3e2:	mov	r3, sp
    a3e4:	vmov	s19, r3
    a3e8:	ldr	r3, [pc, #704]	; (a6ac <Meter_delete@@Base+0x6a8>)
    a3ea:	ldr.w	r2, [r9, r2]
    a3ee:	str	r2, [r7, #8]
    a3f0:	ldr.w	r6, [r9, r3]
    a3f4:	ldr	r3, [r2, #0]
    a3f6:	ldr	r0, [r6, #0]
    a3f8:	ldr	r1, [r3, #44]	; 0x2c
    a3fa:	blx	6c88 <wattrset@plt+0x4>
    a3fe:	ldr	r0, [r6, #0]
    a400:	mov	r2, r8
    a402:	mov	r1, sl
    a404:	blx	6668 <wmove@plt>
    a408:	adds	r0, #1
    a40a:	beq.n	a418 <Meter_delete@@Base+0x414>
    a40c:	ldr	r1, [r7, #20]
    a40e:	movs	r2, #3
    a410:	ldr	r0, [r6, #0]
    a412:	ldr	r1, [r1, #8]
    a414:	blx	677c <waddnstr@plt>
    a418:	ldr	r3, [r7, #8]
    a41a:	add.w	sl, r8, #3
    a41e:	ldr	r0, [r6, #0]
    a420:	subs	r4, r5, #5
    a422:	ldr	r3, [r3, #0]
    a424:	ldr	r1, [r3, #120]	; 0x78
    a426:	blx	6c88 <wattrset@plt+0x4>
    a42a:	vmov	r1, s18
    a42e:	ldr	r0, [r6, #0]
    a430:	mov	r2, sl
    a432:	blx	6668 <wmove@plt>
    a436:	adds	r0, #1
    a438:	beq.n	a442 <Meter_delete@@Base+0x43e>
    a43a:	ldr	r0, [r6, #0]
    a43c:	movs	r1, #91	; 0x5b
    a43e:	blx	6bfc <waddch@plt>
    a442:	vmov	r1, s18
    a446:	add.w	r2, sl, r4
    a44a:	ldr	r0, [r6, #0]
    a44c:	blx	6668 <wmove@plt>
    a450:	adds	r0, #1
    a452:	beq.n	a45c <Meter_delete@@Base+0x458>
    a454:	ldr	r0, [r6, #0]
    a456:	movs	r1, #93	; 0x5d
    a458:	blx	6bfc <waddch@plt>
    a45c:	subs	r5, #6
    a45e:	cmp	r5, #0
    a460:	ble.w	a5ce <Meter_delete@@Base+0x5ca>
    a464:	adds	r2, r4, #7
    a466:	ldr.w	ip, [pc, #584]	; a6b0 <Meter_delete@@Base+0x6ac>
    a46a:	bic.w	r2, r2, #7
    a46e:	mov.w	r3, #4294967295	; 0xffffffff
    a472:	sub.w	sp, sp, r2
    a476:	add	ip, pc
    a478:	add	r1, sp, #16
    a47a:	movs	r2, #1
    a47c:	str	r1, [r7, #28]
    a47e:	mov	r0, r1
    a480:	strd	r5, fp, [sp, #8]
    a484:	mov	r1, r4
    a486:	strd	ip, r5, [sp]
    a48a:	blx	6c78 <__snprintf_chk@plt>
    a48e:	cmp	r4, r0
    a490:	ite	gt
    a492:	movgt	r4, #0
    a494:	movle	r4, #1
    a496:	orrs.w	r4, r4, r0, lsr #31
    a49a:	bne.w	a686 <Meter_delete@@Base+0x682>
    a49e:	ldr	r1, [r7, #20]
    a4a0:	add.w	r3, r8, #4
    a4a4:	str	r3, [r7, #24]
    a4a6:	ldr.w	fp, [r1]
    a4aa:	ldrb.w	r2, [fp, #69]	; 0x45
    a4ae:	str	r2, [r7, #12]
    a4b0:	cmp	r2, #0
    a4b2:	beq.n	a58e <Meter_delete@@Base+0x58a>
    a4b4:	ldr.w	r8, [r1, #32]
    a4b8:	add.w	sl, r7, #32
    a4bc:	ldr	r3, [pc, #500]	; (a6b4 <Meter_delete@@Base+0x6b0>)
    a4be:	vldr	d8, [r1, #40]	; 0x28
    a4c2:	add.w	r1, sp, #15
    a4c6:	str	r1, [r7, #16]
    a4c8:	add.w	r1, r8, r2, lsl #3
    a4cc:	ldr.w	r3, [r9, r3]
    a4d0:	vldmia	r8!, {d7}
    a4d4:	ldr.w	r9, [pc, #480]	; a6b8 <Meter_delete@@Base+0x6b4>
    a4d8:	ldr	r2, [r3, #0]
    a4da:	add	r9, pc
    a4dc:	str.w	fp, [r7, #4]
    a4e0:	vcmpe.f64	d8, d7
    a4e4:	str	r6, [r7, #0]
    a4e6:	mov	r3, r9
    a4e8:	mov	r6, r5
    a4ea:	mov	r9, sl
    a4ec:	mov	fp, r1
    a4ee:	mov	r5, r2
    a4f0:	mov	sl, r3
    a4f2:	vmrs	APSR_nzcv, fpscr
    a4f6:	bmi.n	a57a <Meter_delete@@Base+0x576>
    a4f8:	vcmpe.f64	d7, #0.0
    a4fc:	vmrs	APSR_nzcv, fpscr
    a500:	bmi.n	a588 <Meter_delete@@Base+0x584>
    a502:	vcmpe.f64	d7, #0.0
    a506:	vmrs	APSR_nzcv, fpscr
    a50a:	ble.n	a588 <Meter_delete@@Base+0x584>
    a50c:	vdiv.f64	d0, d7, d8
    a510:	vmov	s15, r6
    a514:	vcvt.f64.s32	d7, s15
    a518:	vmul.f64	d0, d0, d7
    a51c:	blx	6b00 <ceil@plt>
    a520:	vcvt.s32.f64	s15, d0
    a524:	vmov	r1, s15
    a528:	add.w	ip, r1, r4
    a52c:	cmp	r6, ip
    a52e:	str.w	r1, [r9, #4]!
    a532:	ite	ge
    a534:	bicge.w	ip, ip, ip, asr #31
    a538:	movlt	ip, r6
    a53a:	cmp	ip, r4
    a53c:	ble.n	a562 <Meter_delete@@Base+0x55e>
    a53e:	ldr	r2, [r7, #16]
    a540:	subs	r3, r4, #1
    a542:	add.w	lr, r2, ip
    a546:	ldr	r2, [r7, #28]
    a548:	add	r3, r2
    a54a:	ldrb.w	r2, [r3, #1]!
    a54e:	cmp	r2, #32
    a550:	bne.n	a55e <Meter_delete@@Base+0x55a>
    a552:	cmp	r5, #1
    a554:	ite	eq
    a556:	ldrbeq.w	r2, [sl]
    a55a:	movne	r2, #124	; 0x7c
    a55c:	strb	r2, [r3, #0]
    a55e:	cmp	lr, r3
    a560:	bne.n	a54a <Meter_delete@@Base+0x546>
    a562:	cmp	fp, r8
    a564:	add.w	sl, sl, #1
    a568:	beq.n	a600 <Meter_delete@@Base+0x5fc>
    a56a:	vldmia	r8!, {d7}
    a56e:	mov	r4, ip
    a570:	vcmpe.f64	d8, d7
    a574:	vmrs	APSR_nzcv, fpscr
    a578:	bpl.n	a4f8 <Meter_delete@@Base+0x4f4>
    a57a:	vmov.f64	d7, d8
    a57e:	vcmpe.f64	d7, #0.0
    a582:	vmrs	APSR_nzcv, fpscr
    a586:	bgt.n	a50c <Meter_delete@@Base+0x508>
    a588:	mov	ip, r4
    a58a:	movs	r1, #0
    a58c:	b.n	a52c <Meter_delete@@Base+0x528>
    a58e:	ldr	r4, [r7, #12]
    a590:	ldr	r2, [r7, #24]
    a592:	ldr	r3, [r7, #8]
    a594:	ldr	r0, [r6, #0]
    a596:	str	r2, [r7, #20]
    a598:	ldr	r3, [r3, #0]
    a59a:	ldr	r1, [r3, #124]	; 0x7c
    a59c:	blx	6c88 <wattrset@plt+0x4>
    a5a0:	vmov	r1, s18
    a5a4:	ldr	r2, [r7, #20]
    a5a6:	ldr	r0, [r6, #0]
    a5a8:	blx	6668 <wmove@plt>
    a5ac:	adds	r0, #1
    a5ae:	beq.n	a5be <Meter_delete@@Base+0x5ba>
    a5b0:	ldr	r3, [r7, #28]
    a5b2:	subs	r2, r5, r4
    a5b4:	ldr	r0, [r6, #0]
    a5b6:	add	r3, r4
    a5b8:	mov	r1, r3
    a5ba:	blx	677c <waddnstr@plt>
    a5be:	ldr	r3, [r7, #24]
    a5c0:	vmov	r1, s18
    a5c4:	add	r5, r3
    a5c6:	ldr	r0, [r6, #0]
    a5c8:	adds	r2, r5, #1
    a5ca:	blx	6668 <wmove@plt>
    a5ce:	ldr	r3, [r7, #8]
    a5d0:	ldr	r0, [r6, #0]
    a5d2:	ldr	r3, [r3, #0]
    a5d4:	ldr	r1, [r3, #0]
    a5d6:	blx	6c88 <wattrset@plt+0x4>
    a5da:	vmov	r3, s19
    a5de:	ldr	r2, [pc, #220]	; (a6bc <Meter_delete@@Base+0x6b8>)
    a5e0:	add	r2, pc
    a5e2:	mov	sp, r3
    a5e4:	ldr	r3, [pc, #184]	; (a6a0 <Meter_delete@@Base+0x69c>)
    a5e6:	ldr	r3, [r2, r3]
    a5e8:	ldr	r2, [r3, #0]
    a5ea:	ldr.w	r3, [r7, #332]	; 0x14c
    a5ee:	eors	r2, r3
    a5f0:	bne.n	a698 <Meter_delete@@Base+0x694>
    a5f2:	add.w	r7, r7, #340	; 0x154
    a5f6:	mov	sp, r7
    a5f8:	vpop	{d8-d9}
    a5fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a600:	ldr	r3, [r7, #12]
    a602:	mov	r5, r6
    a604:	ldrd	r6, fp, [r7]
    a608:	add.w	r8, r7, #36	; 0x24
    a60c:	mov.w	sl, #0
    a610:	mov.w	r9, r3, lsl #2
    a614:	mov	r4, sl
    a616:	mov	r2, fp
    a618:	str.w	r9, [r7, #16]
    a61c:	ldr.w	fp, [r7, #8]
    a620:	mov	r9, sl
    a622:	mov	sl, r8
    a624:	vmov	r8, s18
    a628:	b.n	a62e <Meter_delete@@Base+0x62a>
    a62a:	ldr	r3, [r7, #20]
    a62c:	ldr	r2, [r3, #0]
    a62e:	ldr	r1, [r2, #48]	; 0x30
    a630:	ldr.w	r2, [fp]
    a634:	ldr	r0, [r6, #0]
    a636:	ldr.w	r1, [r1, r9]
    a63a:	ldr.w	r1, [r2, r1, lsl #2]
    a63e:	blx	6c88 <wattrset@plt+0x4>
    a642:	ldr	r3, [r7, #24]
    a644:	ldr	r0, [r6, #0]
    a646:	mov	r1, r8
    a648:	adds	r2, r3, r4
    a64a:	blx	6668 <wmove@plt>
    a64e:	ldr.w	r2, [sl, r9]
    a652:	adds	r0, #1
    a654:	beq.n	a664 <Meter_delete@@Base+0x660>
    a656:	ldr	r3, [r7, #28]
    a658:	ldr	r0, [r6, #0]
    a65a:	adds	r1, r3, r4
    a65c:	str	r2, [r7, #12]
    a65e:	blx	677c <waddnstr@plt>
    a662:	ldr	r2, [r7, #12]
    a664:	add	r4, r2
    a666:	ldr	r3, [r7, #16]
    a668:	cmp	r5, r4
    a66a:	add.w	r9, r9, #4
    a66e:	ite	ge
    a670:	bicge.w	r4, r4, r4, asr #31
    a674:	movlt	r4, r5
    a676:	cmp	r3, r9
    a678:	bne.n	a62a <Meter_delete@@Base+0x626>
    a67a:	cmp	r4, r5
    a67c:	itt	lt
    a67e:	ldrlt	r3, [r7, #24]
    a680:	addlt	r2, r4, r3
    a682:	bge.n	a5be <Meter_delete@@Base+0x5ba>
    a684:	b.n	a592 <Meter_delete@@Base+0x58e>
    a686:	movs	r0, #1
    a688:	blx	6730 <curs_set@plt>
    a68c:	blx	6c48 <endwin@plt+0x4>
    a690:	movs	r1, #0
    a692:	movs	r0, #1
    a694:	blx	683c <err@plt>
    a698:	blx	67d0 <__stack_chk_fail@plt>
    a69c:	ldr??.w	r0, [sl, r1]
    a6a0:	lsls	r0, r0, #9
    a6a2:	movs	r0, r0
    a6a4:	vst4.8	{d16-d19}, [sl], r1
    a6a8:	lsls	r0, r6, #9
    a6aa:	movs	r0, r0
    a6ac:	lsls	r4, r5, #9
    a6ae:	movs	r0, r0
    a6b0:	stmia	r4!, {r1, r3, r4, r5, r6, r7}
    a6b2:	movs	r0, r0
    a6b4:	lsls	r0, r2, #9
    a6b6:	movs	r0, r0
    a6b8:	stmia	r6!, {r1, r2, r7}
    a6ba:	movs	r0, r0
    a6bc:			; <UNDEFINED> instruction: 0xf72c0001
    a6c0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6c4:	vpush	{d8}
    a6c8:	ldr	r5, [pc, #444]	; (a888 <Meter_delete@@Base+0x884>)
    a6ca:	ldr	r4, [pc, #448]	; (a88c <Meter_delete@@Base+0x888>)
    a6cc:	add	r5, pc
    a6ce:	ldr	r7, [pc, #448]	; (a890 <Meter_delete@@Base+0x88c>)
    a6d0:	sub.w	sp, sp, #10112	; 0x2780
    a6d4:	sub	sp, #4
    a6d6:	ldr	r4, [r5, r4]
    a6d8:	add.w	r3, sp, #10048	; 0x2740
    a6dc:	add	r7, pc
    a6de:	ldr	r4, [r4, #0]
    a6e0:	str	r4, [r3, #60]	; 0x3c
    a6e2:	mov.w	r4, #0
    a6e6:	adds	r3, #60	; 0x3c
    a6e8:	ldr	r3, [pc, #424]	; (a894 <Meter_delete@@Base+0x890>)
    a6ea:	mov	r4, r0
    a6ec:	mov	r5, r1
    a6ee:	ldr.w	r8, [r7, r3]
    a6f2:	str	r2, [sp, #8]
    a6f4:	ldrb.w	r3, [r8]
    a6f8:	cmp	r3, #0
    a6fa:	bne.w	a85e <Meter_delete@@Base+0x85a>
    a6fe:	ldr.w	ip, [pc, #408]	; a898 <Meter_delete@@Base+0x894>
    a702:	add	ip, pc
    a704:	add.w	ip, ip, #256	; 0x100
    a708:	ldr	r0, [pc, #400]	; (a89c <Meter_delete@@Base+0x898>)
    a70a:	add.w	fp, sp, #9792	; 0x2640
    a70e:	ldr	r3, [r4, #0]
    a710:	add	r6, sp, #64	; 0x40
    a712:	add	r0, pc
    a714:	add.w	fp, fp, #60	; 0x3c
    a718:	sub.w	r9, r6, #48	; 0x30
    a71c:	movs	r2, #255	; 0xff
    a71e:	ldr	r3, [r3, #32]
    a720:	mov	r1, fp
    a722:	str.w	ip, [r0, #8]
    a726:	mov	r0, r4
    a728:	blx	r3
    a72a:	movs	r1, #0
    a72c:	mov	r0, r9
    a72e:	movw	r2, #9836	; 0x266c
    a732:	blx	6a90 <memset@plt>
    a736:	ldr	r1, [r4, #0]
    a738:	sub.w	r3, r6, #40	; 0x28
    a73c:	str.w	r3, [r9, #4]
    a740:	ldr	r3, [r1, #4]
    a742:	cmp	r3, #0
    a744:	beq.w	a86a <Meter_delete@@Base+0x866>
    a748:	mov	r1, r9
    a74a:	mov	r0, r4
    a74c:	blx	r3
    a74e:	ldr	r3, [pc, #336]	; (a8a0 <Meter_delete@@Base+0x89c>)
    a750:	ldr	r3, [r7, r3]
    a752:	str	r3, [sp, #12]
    a754:	ldrb.w	r3, [r8]
    a758:	cmp	r3, #0
    a75a:	beq.n	a854 <Meter_delete@@Base+0x850>
    a75c:	ldr	r3, [sp, #8]
    a75e:	adds	r3, #1
    a760:	vmov	s16, r3
    a764:	ldr	r3, [pc, #316]	; (a8a4 <Meter_delete@@Base+0x8a0>)
    a766:	ldr	r2, [sp, #12]
    a768:	ldr	r7, [r7, r3]
    a76a:	ldr	r2, [r2, #0]
    a76c:	ldr	r0, [r7, #0]
    a76e:	ldr	r1, [r2, #52]	; 0x34
    a770:	blx	6c88 <wattrset@plt+0x4>
    a774:	vmov	r1, s16
    a778:	ldr	r0, [r7, #0]
    a77a:	mov	r2, r5
    a77c:	blx	6668 <wmove@plt>
    a780:	adds	r0, #1
    a782:	beq.n	a790 <Meter_delete@@Base+0x78c>
    a784:	ldr	r1, [r4, #8]
    a786:	mov.w	r2, #4294967295	; 0xffffffff
    a78a:	ldr	r0, [r7, #0]
    a78c:	blx	677c <waddnstr@plt>
    a790:	ldr	r0, [r4, #8]
    a792:	blx	6a0c <strlen@plt>
    a796:	ldr.w	r3, [r6, #-48]
    a79a:	cmp	r3, #0
    a79c:	str	r3, [sp, #4]
    a79e:	add	r5, r0
    a7a0:	ldr	r0, [r7, #0]
    a7a2:	ble.n	a804 <Meter_delete@@Base+0x800>
    a7a4:	ldr.w	fp, [pc, #256]	; a8a8 <Meter_delete@@Base+0x8a4>
    a7a8:	movs	r6, #0
    a7aa:	add	fp, pc
    a7ac:	ldr.w	r3, [r9, #4]
    a7b0:	movs	r2, #28
    a7b2:	mla	r3, r2, r6, r3
    a7b6:	ldr	r4, [r3, #4]
    a7b8:	sub.w	r3, r4, #48	; 0x30
    a7bc:	uxtb	r3, r3
    a7be:	cmp	r3, #9
    a7c0:	bhi.n	a838 <Meter_delete@@Base+0x834>
    a7c2:	uxtb	r4, r4
    a7c4:	ldr	r3, [sp, #8]
    a7c6:	subs	r4, #48	; 0x30
    a7c8:	add.w	r8, r3, #3
    a7cc:	lsls	r4, r4, #2
    a7ce:	mov	sl, r3
    a7d0:	mov	r2, r5
    a7d2:	mov	r1, sl
    a7d4:	blx	6668 <wmove@plt>
    a7d8:	adds	r0, #1
    a7da:	beq.n	a7ec <Meter_delete@@Base+0x7e8>
    a7dc:	ldr.w	r3, [fp, #8]
    a7e0:	mov.w	r2, #4294967295	; 0xffffffff
    a7e4:	ldr	r0, [r7, #0]
    a7e6:	ldr	r1, [r3, r4]
    a7e8:	blx	677c <waddnstr@plt>
    a7ec:	add.w	sl, sl, #1
    a7f0:	ldr	r0, [r7, #0]
    a7f2:	cmp	r8, sl
    a7f4:	add.w	r4, r4, #40	; 0x28
    a7f8:	bne.n	a7d0 <Meter_delete@@Base+0x7cc>
    a7fa:	adds	r5, #4
    a7fc:	ldr	r3, [sp, #4]
    a7fe:	adds	r6, #1
    a800:	cmp	r3, r6
    a802:	bne.n	a7ac <Meter_delete@@Base+0x7a8>
    a804:	ldr	r3, [sp, #12]
    a806:	ldr	r3, [r3, #0]
    a808:	ldr	r1, [r3, #0]
    a80a:	blx	6c88 <wattrset@plt+0x4>
    a80e:	mov	r0, r9
    a810:	bl	d194 <RichString_prune@@Base>
    a814:	ldr	r1, [pc, #148]	; (a8ac <Meter_delete@@Base+0x8a8>)
    a816:	ldr	r2, [pc, #116]	; (a88c <Meter_delete@@Base+0x888>)
    a818:	add.w	r3, sp, #10048	; 0x2740
    a81c:	add	r1, pc
    a81e:	adds	r3, #60	; 0x3c
    a820:	ldr	r2, [r1, r2]
    a822:	ldr	r1, [r2, #0]
    a824:	ldr	r2, [r3, #0]
    a826:	eors	r1, r2
    a828:	bne.n	a884 <Meter_delete@@Base+0x880>
    a82a:	add.w	sp, sp, #10112	; 0x2780
    a82e:	add	sp, #4
    a830:	vpop	{d8}
    a834:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a838:	vmov	r1, s16
    a83c:	mov	r2, r5
    a83e:	blx	6668 <wmove@plt>
    a842:	adds	r0, #1
    a844:	beq.n	a84e <Meter_delete@@Base+0x84a>
    a846:	ldr	r0, [r7, #0]
    a848:	uxtb	r1, r4
    a84a:	blx	6bfc <waddch@plt>
    a84e:	ldr	r0, [r7, #0]
    a850:	adds	r5, #1
    a852:	b.n	a7fc <Meter_delete@@Base+0x7f8>
    a854:	ldr	r3, [sp, #8]
    a856:	adds	r3, #2
    a858:	vmov	s16, r3
    a85c:	b.n	a764 <Meter_delete@@Base+0x760>
    a85e:	ldr.w	ip, [pc, #80]	; a8b0 <Meter_delete@@Base+0x8ac>
    a862:	add	ip, pc
    a864:	add.w	ip, ip, #136	; 0x88
    a868:	b.n	a708 <Meter_delete@@Base+0x704>
    a86a:	ldr	r3, [pc, #52]	; (a8a0 <Meter_delete@@Base+0x89c>)
    a86c:	mov	r2, fp
    a86e:	ldr	r1, [r1, #48]	; 0x30
    a870:	mov	r0, r9
    a872:	ldr	r3, [r7, r3]
    a874:	ldr	r1, [r1, #0]
    a876:	str	r3, [sp, #12]
    a878:	ldr	r3, [r3, #0]
    a87a:	ldr.w	r1, [r3, r1, lsl #2]
    a87e:	bl	d3b8 <RichString_write@@Base>
    a882:	b.n	a754 <Meter_delete@@Base+0x750>
    a884:	blx	67d0 <__stack_chk_fail@plt>
    a888:	movw	r0, #2049	; 0x801
    a88c:	lsls	r0, r0, #9
    a88e:	movs	r0, r0
    a890:			; <UNDEFINED> instruction: 0xf6300001
    a894:	lsls	r0, r1, #9
    a896:	movs	r0, r0
    a898:	bic.w	r0, lr, #1
    a89c:	asrs	r6, r6, #1
    a89e:	movs	r2, r0
    a8a0:	lsls	r0, r6, #9
    a8a2:	movs	r0, r0
    a8a4:	lsls	r4, r5, #9
    a8a6:	movs	r0, r0
    a8a8:	lsrs	r6, r3, #31
    a8aa:	movs	r2, r0
    a8ac:			; <UNDEFINED> instruction: 0xf4f00001
    a8b0:	cdp	0, 12, cr0, cr14, cr1, {0}
    a8b4:	ldr.w	ip, [pc, #260]	; a9bc <Meter_delete@@Base+0x9b8>
    a8b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a8bc:	sub.w	sp, sp, #10048	; 0x2740
    a8c0:	ldr	r6, [pc, #252]	; (a9c0 <Meter_delete@@Base+0x9bc>)
    a8c2:	sub	sp, #52	; 0x34
    a8c4:	add	ip, pc
    a8c6:	ldr	r3, [r0, #0]
    a8c8:	add.w	r9, sp, #9792	; 0x2640
    a8cc:	add.w	r5, sp, #10048	; 0x2740
    a8d0:	ldr.w	r6, [ip, r6]
    a8d4:	add.w	r9, r9, #44	; 0x2c
    a8d8:	ldr	r3, [r3, #32]
    a8da:	adds	r5, #44	; 0x2c
    a8dc:	ldr	r6, [r6, #0]
    a8de:	str	r6, [r5, #0]
    a8e0:	mov.w	r6, #0
    a8e4:	mov	r8, r1
    a8e6:	mov	r7, r2
    a8e8:	mov	r1, r9
    a8ea:	movs	r2, #255	; 0xff
    a8ec:	ldr	r5, [pc, #212]	; (a9c4 <Meter_delete@@Base+0x9c0>)
    a8ee:	mov	r4, r0
    a8f0:	blx	r3
    a8f2:	ldr	r1, [pc, #212]	; (a9c8 <Meter_delete@@Base+0x9c4>)
    a8f4:	add	r5, pc
    a8f6:	ldr	r2, [pc, #212]	; (a9cc <Meter_delete@@Base+0x9c8>)
    a8f8:	mov	r3, r5
    a8fa:	ldr.w	sl, [r5, r1]
    a8fe:	ldr	r6, [r5, r2]
    a900:	ldr.w	r3, [sl]
    a904:	ldr	r0, [r6, #0]
    a906:	ldr	r1, [r3, #44]	; 0x2c
    a908:	blx	6c88 <wattrset@plt+0x4>
    a90c:	ldr	r0, [r6, #0]
    a90e:	mov	r2, r8
    a910:	mov	r1, r7
    a912:	blx	6668 <wmove@plt>
    a916:	adds	r0, #1
    a918:	beq.n	a926 <Meter_delete@@Base+0x922>
    a91a:	ldr	r1, [r4, #8]
    a91c:	mov.w	r2, #4294967295	; 0xffffffff
    a920:	ldr	r0, [r6, #0]
    a922:	blx	677c <waddnstr@plt>
    a926:	ldr	r0, [r4, #8]
    a928:	mov	fp, sp
    a92a:	blx	6a0c <strlen@plt>
    a92e:	ldr.w	r3, [sl]
    a932:	add	r5, sp, #48	; 0x30
    a934:	subs	r5, #40	; 0x28
    a936:	ldr	r1, [r3, #0]
    a938:	mov	r2, r0
    a93a:	ldr	r0, [r6, #0]
    a93c:	add	r8, r2
    a93e:	blx	6c88 <wattrset@plt+0x4>
    a942:	movw	r2, #9836	; 0x266c
    a946:	mov	r0, fp
    a948:	movs	r1, #0
    a94a:	blx	6a90 <memset@plt>
    a94e:	ldr	r2, [r4, #0]
    a950:	str.w	r5, [fp, #4]
    a954:	ldr	r3, [r2, #4]
    a956:	cbz	r3, a9a0 <Meter_delete@@Base+0x99c>
    a958:	mov	r0, r4
    a95a:	mov	r1, fp
    a95c:	blx	r3
    a95e:	ldr	r0, [r6, #0]
    a960:	mov	r2, r8
    a962:	mov	r1, r7
    a964:	blx	6668 <wmove@plt>
    a968:	adds	r0, #1
    a96a:	beq.n	a97a <Meter_delete@@Base+0x976>
    a96c:	ldr	r0, [r6, #0]
    a96e:	mov.w	r2, #4294967295	; 0xffffffff
    a972:	ldr.w	r1, [fp, #4]
    a976:	blx	6680 <wadd_wchnstr@plt>
    a97a:	mov	r0, fp
    a97c:	bl	d194 <RichString_prune@@Base>
    a980:	ldr	r1, [pc, #76]	; (a9d0 <Meter_delete@@Base+0x9cc>)
    a982:	ldr	r2, [pc, #60]	; (a9c0 <Meter_delete@@Base+0x9bc>)
    a984:	add.w	r3, sp, #10048	; 0x2740
    a988:	add	r1, pc
    a98a:	adds	r3, #44	; 0x2c
    a98c:	ldr	r2, [r1, r2]
    a98e:	ldr	r1, [r2, #0]
    a990:	ldr	r2, [r3, #0]
    a992:	eors	r1, r2
    a994:	bne.n	a9b6 <Meter_delete@@Base+0x9b2>
    a996:	add.w	sp, sp, #10048	; 0x2740
    a99a:	add	sp, #52	; 0x34
    a99c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a9a0:	ldr	r1, [r2, #48]	; 0x30
    a9a2:	mov	r0, fp
    a9a4:	ldr.w	r3, [sl]
    a9a8:	mov	r2, r9
    a9aa:	ldr	r1, [r1, #0]
    a9ac:	ldr.w	r1, [r3, r1, lsl #2]
    a9b0:	bl	d3b8 <RichString_write@@Base>
    a9b4:	b.n	a95e <Meter_delete@@Base+0x95a>
    a9b6:	blx	67d0 <__stack_chk_fail@plt>
    a9ba:	nop
    a9bc:	orr.w	r0, r8, #8454144	; 0x810000
    a9c0:	lsls	r0, r0, #9
    a9c2:	movs	r0, r0
    a9c4:	ands.w	r0, r8, #8454144	; 0x810000
    a9c8:	lsls	r0, r6, #9
    a9ca:	movs	r0, r0
    a9cc:	lsls	r4, r5, #9
    a9ce:	movs	r0, r0
    a9d0:	usat	r0, #1, r4

0000a9d4 <Meter_humanUnit@@Base>:
    a9d4:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9d8:	lsrs	r3, r1, #10
    a9da:	vpush	{d8}
    a9de:	mov	r6, r1
    a9e0:	mov	r7, r0
    a9e2:	mov	r8, r2
    a9e4:	sub	sp, #24
    a9e6:	beq.n	aa5a <Meter_humanUnit@@Base+0x86>
    a9e8:	ldr	r4, [pc, #124]	; (aa68 <Meter_humanUnit@@Base+0x94>)
    a9ea:	movs	r5, #1
    a9ec:	add	r4, pc
    a9ee:	add	r4, r5
    a9f0:	lsls	r5, r5, #10
    a9f2:	mov	r1, r4
    a9f4:	cmp	r5, r3
    a9f6:	bhi.n	aa00 <Meter_humanUnit@@Base+0x2c>
    a9f8:	ldrb.w	r2, [r4, #1]!
    a9fc:	cmp	r2, #0
    a9fe:	bne.n	a9f0 <Meter_humanUnit@@Base+0x1c>
    aa00:	ldrb	r4, [r1, #0]
    aa02:	vmov	s15, r5
    aa06:	cmp	r4, #75	; 0x4b
    aa08:	vcvt.f64.u32	d8, s15
    aa0c:	it	eq
    aa0e:	moveq	r3, #0
    aa10:	beq.n	aa28 <Meter_humanUnit@@Base+0x54>
    aa12:	mov	r1, r5
    aa14:	mov	r0, r6
    aa16:	bl	15300 <Battery_getData@@Base+0x250>
    aa1a:	cmp	r0, #9
    aa1c:	mov	r3, r0
    aa1e:	bls.n	aa62 <Meter_humanUnit@@Base+0x8e>
    aa20:	cmp	r0, #99	; 0x63
    aa22:	ite	hi
    aa24:	movhi	r3, #0
    aa26:	movls	r3, #1
    aa28:	vmov	s15, r6
    aa2c:	ldr	r2, [pc, #60]	; (aa6c <Meter_humanUnit@@Base+0x98>)
    aa2e:	str	r3, [sp, #4]
    aa30:	mov	r1, r8
    aa32:	vcvt.f64.u32	d7, s15
    aa36:	add	r2, pc
    aa38:	mov	r0, r7
    aa3a:	str	r2, [sp, #0]
    aa3c:	mov.w	r3, #4294967295	; 0xffffffff
    aa40:	movs	r2, #1
    aa42:	str	r4, [sp, #16]
    aa44:	vdiv.f64	d6, d7, d8
    aa48:	vstr	d6, [sp, #8]
    aa4c:	blx	6c78 <__snprintf_chk@plt>
    aa50:	add	sp, #24
    aa52:	vpop	{d8}
    aa56:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    aa5a:	vmov.f64	d8, #112	; 0x3f800000  1.0
    aa5e:	movs	r4, #75	; 0x4b
    aa60:	b.n	aa28 <Meter_humanUnit@@Base+0x54>
    aa62:	movs	r3, #2
    aa64:	b.n	aa28 <Meter_humanUnit@@Base+0x54>
    aa66:	nop
    aa68:	ite	hi
    aa6a:	movhi	r0, r0
    aa6c:	itee	mi	; unpredictable <IT:ls>
	...

0000aa70 <Meter_setCaption@@Base>:
    aa70:	push	{r3, r4, r5, lr}
    aa72:	movmi	r5, r1
    aa74:	movpl	r4, r0
    aa76:	ldrpl	r0, [r0, #8]
    aa78:	blx	6758 <free@plt+0x4>
    aa7c:	mov	r0, r5
    aa7e:	bl	11de4 <xStrdup@@Base>
    aa82:	str	r0, [r4, #8]
    aa84:	pop	{r3, r4, r5, pc}
    aa86:	nop

0000aa88 <Meter_setMode@@Base>:
    aa88:	push	{r3, r4, r5, lr}
    aa8a:	subs	r5, r1, #0
    aa8c:	mov	r4, r0
    aa8e:	ble.n	aaae <Meter_setMode@@Base+0x26>
    aa90:	ldr	r3, [r0, #12]
    aa92:	cmp	r3, r5
    aa94:	beq.n	aaac <Meter_setMode@@Base+0x24>
    aa96:	ldr	r3, [r4, #0]
    aa98:	ldr	r2, [r3, #36]	; 0x24
    aa9a:	cbnz	r2, aaba <Meter_setMode@@Base+0x32>
    aa9c:	ldrd	r3, r2, [r3, #24]
    aaa0:	str	r2, [r4, #4]
    aaa2:	cbz	r3, aaaa <Meter_setMode@@Base+0x22>
    aaa4:	mov	r1, r5
    aaa6:	mov	r0, r4
    aaa8:	blx	r3
    aaaa:	str	r5, [r4, #12]
    aaac:	pop	{r3, r4, r5, pc}
    aaae:	ldr	r3, [r4, #0]
    aab0:	it	eq
    aab2:	moveq	r5, #1
    aab4:	ldr	r2, [r3, #36]	; 0x24
    aab6:	cmp	r2, #0
    aab8:	beq.n	aa9c <Meter_setMode@@Base+0x14>
    aaba:	ldr	r0, [r4, #20]
    aabc:	blx	6758 <free@plt+0x4>
    aac0:	ldr	r3, [pc, #20]	; (aad8 <Meter_setMode@@Base+0x50>)
    aac2:	movs	r2, #0
    aac4:	str	r2, [r4, #20]
    aac6:	add	r3, pc
    aac8:	ldr.w	r3, [r3, r5, lsl #2]
    aacc:	ldr	r2, [r3, #0]
    aace:	ldr	r3, [r3, #8]
    aad0:	str	r5, [r4, #12]
    aad2:	str	r2, [r4, #4]
    aad4:	str	r3, [r4, #24]
    aad6:	b.n	aaac <Meter_setMode@@Base+0x24>
    aad8:	lsls	r6, r3, #3
    aada:	movs	r2, r0

0000aadc <Meter_new@@Base>:
    aadc:	push	{r4, r5, r6, r7, lr}
    aade:	sub	sp, #12
    aae0:	mov	r6, r0
    aae2:	mov	r7, r1
    aae4:	movs	r0, #1
    aae6:	movs	r1, #48	; 0x30
    aae8:	mov	r5, r2
    aaea:	str	r2, [sp, #4]
    aaec:	bl	11da0 <xCalloc@@Base>
    aaf0:	movs	r3, #1
    aaf2:	movs	r1, #8
    aaf4:	mov	r4, r0
    aaf6:	strd	r3, r6, [r0, #24]
    aafa:	str	r7, [r0, #16]
    aafc:	str	r5, [r0, #0]
    aafe:	ldrb.w	r0, [r5, #68]	; 0x44
    ab02:	strb.w	r0, [r5, #69]	; 0x45
    ab06:	bl	11da0 <xCalloc@@Base>
    ab0a:	ldrd	r2, r3, [r5, #40]	; 0x28
    ab0e:	str	r0, [r4, #32]
    ab10:	ldr	r0, [r5, #60]	; 0x3c
    ab12:	strd	r2, r3, [r4, #40]	; 0x28
    ab16:	bl	11de4 <xStrdup@@Base>
    ab1a:	ldr	r3, [r4, #0]
    ab1c:	ldr	r3, [r3, #16]
    ab1e:	str	r0, [r4, #8]
    ab20:	cbz	r3, ab26 <Meter_new@@Base+0x4a>
    ab22:	mov	r0, r4
    ab24:	blx	r3
    ab26:	mov	r0, r4
    ab28:	ldr	r1, [r5, #36]	; 0x24
    ab2a:	bl	aa88 <Meter_setMode@@Base>
    ab2e:	mov	r0, r4
    ab30:	add	sp, #12
    ab32:	pop	{r4, r5, r6, r7, pc}

0000ab34 <Meter_toListItem@@Base>:
    ab34:	ldr	r2, [pc, #196]	; (abfc <Meter_toListItem@@Base+0xc8>)
    ab36:	ldr	r3, [pc, #200]	; (ac00 <Meter_toListItem@@Base+0xcc>)
    ab38:	add	r2, pc
    ab3a:	push	{r4, r5, r6, r7, lr}
    ab3c:	mov	r5, r1
    ab3e:	ldr	r1, [r0, #12]
    ab40:	sub	sp, #116	; 0x74
    ab42:	ldr	r3, [r2, r3]
    ab44:	mov	r4, r0
    ab46:	ldr	r3, [r3, #0]
    ab48:	str	r3, [sp, #108]	; 0x6c
    ab4a:	mov.w	r3, #0
    ab4e:	cmp	r1, #0
    ab50:	bne.n	abd2 <Meter_toListItem@@Base+0x9e>
    ab52:	strb.w	r1, [sp, #32]
    ab56:	ldr	r3, [r4, #16]
    ab58:	cmp	r3, #0
    ab5a:	bgt.n	aba6 <Meter_toListItem@@Base+0x72>
    ab5c:	add	r6, sp, #20
    ab5e:	movs	r3, #0
    ab60:	strb.w	r3, [sp, #20]
    ab64:	ldr	r2, [r4, #0]
    ab66:	add	r3, sp, #32
    ab68:	str	r6, [sp, #8]
    ab6a:	add	r6, sp, #56	; 0x38
    ab6c:	str	r3, [sp, #12]
    ab6e:	movs	r3, #51	; 0x33
    ab70:	ldr	r1, [r2, #56]	; 0x38
    ab72:	mov	r0, r6
    ab74:	ldr	r4, [pc, #140]	; (ac04 <Meter_toListItem@@Base+0xd0>)
    ab76:	movs	r2, #1
    ab78:	str	r1, [sp, #4]
    ab7a:	add	r4, pc
    ab7c:	movs	r1, #50	; 0x32
    ab7e:	str	r4, [sp, #0]
    ab80:	blx	6c78 <__snprintf_chk@plt>
    ab84:	cmp	r0, #49	; 0x31
    ab86:	bhi.n	abc0 <Meter_toListItem@@Base+0x8c>
    ab88:	mov	r0, r6
    ab8a:	movs	r1, #0
    ab8c:	bl	9b90 <ListItem_new@@Base>
    ab90:	ldr	r2, [pc, #116]	; (ac08 <Meter_toListItem@@Base+0xd4>)
    ab92:	ldr	r3, [pc, #108]	; (ac00 <Meter_toListItem@@Base+0xcc>)
    ab94:	add	r2, pc
    ab96:	strb	r5, [r0, #12]
    ab98:	ldr	r3, [r2, r3]
    ab9a:	ldr	r2, [r3, #0]
    ab9c:	ldr	r3, [sp, #108]	; 0x6c
    ab9e:	eors	r2, r3
    aba0:	bne.n	abf6 <Meter_toListItem@@Base+0xc2>
    aba2:	add	sp, #116	; 0x74
    aba4:	pop	{r4, r5, r6, r7, pc}
    aba6:	ldr	r1, [pc, #100]	; (ac0c <Meter_toListItem@@Base+0xd8>)
    aba8:	add	r6, sp, #20
    abaa:	str	r3, [sp, #4]
    abac:	movs	r2, #1
    abae:	add	r1, pc
    abb0:	movs	r3, #11
    abb2:	str	r1, [sp, #0]
    abb4:	mov	r0, r6
    abb6:	movs	r1, #10
    abb8:	blx	6c78 <__snprintf_chk@plt>
    abbc:	cmp	r0, #9
    abbe:	ble.n	ab64 <Meter_toListItem@@Base+0x30>
    abc0:	movs	r0, #1
    abc2:	blx	6730 <curs_set@plt>
    abc6:	blx	6c48 <endwin@plt+0x4>
    abca:	movs	r1, #0
    abcc:	movs	r0, #1
    abce:	blx	683c <err@plt>
    abd2:	ldr	r0, [pc, #60]	; (ac10 <Meter_toListItem@@Base+0xdc>)
    abd4:	movs	r3, #21
    abd6:	ldr	r6, [pc, #60]	; (ac14 <Meter_toListItem@@Base+0xe0>)
    abd8:	movs	r2, #1
    abda:	add	r0, pc
    abdc:	add	r6, pc
    abde:	ldr.w	r7, [r0, r1, lsl #2]
    abe2:	add	r0, sp, #32
    abe4:	movs	r1, #20
    abe6:	ldr	r7, [r7, #4]
    abe8:	strd	r6, r7, [sp]
    abec:	blx	6c78 <__snprintf_chk@plt>
    abf0:	cmp	r0, #19
    abf2:	bls.n	ab56 <Meter_toListItem@@Base+0x22>
    abf4:	b.n	abc0 <Meter_toListItem@@Base+0x8c>
    abf6:	blx	67d0 <__stack_chk_fail@plt>
    abfa:	nop
    abfc:	rsbs	r0, r4, #1
    ac00:	lsls	r0, r0, #9
    ac02:	movs	r0, r0
    ac04:	bkpt	0x001e
    ac06:	movs	r0, r0
    ac08:	sbcs.w	r0, r8, #1
    ac0c:	pop	{r1, r2, r5, r6, r7, pc}
    ac0e:	movs	r0, r0
    ac10:	vaddl.u8	q8, d10, d1
    ac14:	pop	{r4, r5, r7, pc}
    ac16:	movs	r0, r0
    ac18:	push	{r4, lr}
    ac1a:	mov	r4, r0
    ac1c:	bl	b1e0 <Panel_done@@Base>
    ac20:	mov	r0, r4
    ac22:	ldmia.w	sp!, {r4, lr}
    ac26:	b.w	6754 <free@plt>
    ac2a:	nop

0000ac2c <MetersPanel_setMoving@@Base>:
    ac2c:	add.w	r3, r0, #9920	; 0x26c0
    ac30:	push	{r4, r5, r6, lr}
    ac32:	mov	r4, r0
    ac34:	ldr	r6, [pc, #68]	; (ac7c <MetersPanel_setMoving@@Base+0x50>)
    ac36:	mov	r5, r1
    ac38:	strb	r1, [r3, #0]
    ac3a:	add	r6, pc
    ac3c:	bl	b2f8 <Panel_getSelected@@Base>
    ac40:	cbz	r0, ac44 <MetersPanel_setMoving@@Base+0x18>
    ac42:	strb	r5, [r0, #12]
    ac44:	ldr	r3, [pc, #56]	; (ac80 <MetersPanel_setMoving@@Base+0x54>)
    ac46:	ldr	r3, [r6, r3]
    ac48:	ldr	r3, [r3, #0]
    ac4a:	cbnz	r5, ac62 <MetersPanel_setMoving@@Base+0x36>
    ac4c:	mov	r0, r4
    ac4e:	ldr	r1, [r3, #28]
    ac50:	bl	b218 <Panel_setSelectionColor@@Base>
    ac54:	ldr	r0, [r4, #56]	; 0x38
    ac56:	movs	r1, #0
    ac58:	str	r0, [r4, #52]	; 0x34
    ac5a:	ldmia.w	sp!, {r4, r5, r6, lr}
    ac5e:	b.w	9420 <FunctionBar_draw@@Base>
    ac62:	ldr	r1, [r3, #32]
    ac64:	mov	r0, r4
    ac66:	bl	b218 <Panel_setSelectionColor@@Base>
    ac6a:	ldr	r3, [pc, #24]	; (ac84 <MetersPanel_setMoving@@Base+0x58>)
    ac6c:	movs	r1, #0
    ac6e:	add	r3, pc
    ac70:	ldr	r0, [r3, #0]
    ac72:	str	r0, [r4, #52]	; 0x34
    ac74:	ldmia.w	sp!, {r4, r5, r6, lr}
    ac78:	b.w	9420 <FunctionBar_draw@@Base>
    ac7c:			; <UNDEFINED> instruction: 0xf0d20001
    ac80:	lsls	r0, r6, #9
    ac82:	movs	r0, r0
    ac84:	lsrs	r6, r4, #12
    ac86:	movs	r2, r0
    ac88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ac8c:	sub	sp, #12
    ac8e:	mov	r4, r1
    ac90:	mov	r5, r0
    ac92:	bl	b344 <Panel_getSelectedIndex@@Base>
    ac96:	cmp.w	r4, #274	; 0x112
    ac9a:	mov	r6, r0
    ac9c:	bge.n	acd0 <MetersPanel_setMoving@@Base+0xa4>
    ac9e:	cmp.w	r4, #258	; 0x102
    aca2:	blt.n	acf8 <MetersPanel_setMoving@@Base+0xcc>
    aca4:	sub.w	r4, r4, #258	; 0x102
    aca8:	cmp	r4, #15
    acaa:	bhi.n	acee <MetersPanel_setMoving@@Base+0xc2>
    acac:	tbh	[pc, r4, lsl #1]
    acb0:	lsls	r2, r0, #3
    acb2:	lsls	r3, r2, #3
    acb4:	lsls	r1, r3, #3
    acb6:	lsls	r4, r5, #3
    acb8:	movs	r7, r3
    acba:	movs	r7, r3
    acbc:	movs	r7, r3
    acbe:	movs	r7, r3
    acc0:	movs	r7, r3
    acc2:	movs	r7, r3
    acc4:	lsls	r4, r7, #1
    acc6:	movs	r7, r3
    acc8:	movs	r7, r3
    acca:	lsls	r4, r3, #2
    accc:	lsls	r0, r1, #3
    acce:	lsls	r0, r7, #3
    acd0:	cmp.w	r4, #330	; 0x14a
    acd4:	beq.w	aea0 <MetersPanel_setMoving@@Base+0x274>
    acd8:	movw	r3, #343	; 0x157
    acdc:	cmp	r4, r3
    acde:	bne.n	acee <MetersPanel_setMoving@@Base+0xc2>
    ace0:	movw	r3, #9904	; 0x26b0
    ace4:	ldr	r3, [r5, r3]
    ace6:	ldr	r3, [r3, #16]
    ace8:	cmp	r3, #0
    acea:	bne.w	aebe <MetersPanel_setMoving@@Base+0x292>
    acee:	movs	r4, #2
    acf0:	mov	r0, r4
    acf2:	add	sp, #12
    acf4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    acf8:	cmp	r4, #45	; 0x2d
    acfa:	bgt.n	ada0 <MetersPanel_setMoving@@Base+0x174>
    acfc:	cmp	r4, #9
    acfe:	ble.n	acee <MetersPanel_setMoving@@Base+0xc2>
    ad00:	subs	r4, #10
    ad02:	cmp	r4, #35	; 0x23
    ad04:	bhi.n	acee <MetersPanel_setMoving@@Base+0xc2>
    ad06:	add	r3, pc, #8	; (adr r3, ad10 <MetersPanel_setMoving@@Base+0xe4>)
    ad08:	ldr.w	r2, [r3, r4, lsl #2]
    ad0c:	add	r3, r2
    ad0e:	bx	r3
    ad10:			; <UNDEFINED> instruction: 0xffd1ffff
    ad14:			; <UNDEFINED> instruction: 0xffdfffff
    ad18:			; <UNDEFINED> instruction: 0xffdfffff
    ad1c:			; <UNDEFINED> instruction: 0xffd1ffff
    ad20:			; <UNDEFINED> instruction: 0xffdfffff
    ad24:			; <UNDEFINED> instruction: 0xffdfffff
    ad28:			; <UNDEFINED> instruction: 0xffdfffff
    ad2c:			; <UNDEFINED> instruction: 0xffdfffff
    ad30:			; <UNDEFINED> instruction: 0xffdfffff
    ad34:			; <UNDEFINED> instruction: 0xffdfffff
    ad38:			; <UNDEFINED> instruction: 0xffdfffff
    ad3c:			; <UNDEFINED> instruction: 0xffdfffff
    ad40:			; <UNDEFINED> instruction: 0xffdfffff
    ad44:			; <UNDEFINED> instruction: 0xffdfffff
    ad48:			; <UNDEFINED> instruction: 0xffdfffff
    ad4c:			; <UNDEFINED> instruction: 0xffdfffff
    ad50:			; <UNDEFINED> instruction: 0xffdfffff
    ad54:			; <UNDEFINED> instruction: 0xffdfffff
    ad58:			; <UNDEFINED> instruction: 0xffdfffff
    ad5c:			; <UNDEFINED> instruction: 0xffdfffff
    ad60:			; <UNDEFINED> instruction: 0xffdfffff
    ad64:			; <UNDEFINED> instruction: 0xffdfffff
    ad68:	lsls	r1, r3, #2
    ad6a:	movs	r0, r0
    ad6c:			; <UNDEFINED> instruction: 0xffdfffff
    ad70:			; <UNDEFINED> instruction: 0xffdfffff
    ad74:			; <UNDEFINED> instruction: 0xffdfffff
    ad78:			; <UNDEFINED> instruction: 0xffdfffff
    ad7c:			; <UNDEFINED> instruction: 0xffdfffff
    ad80:			; <UNDEFINED> instruction: 0xffdfffff
    ad84:			; <UNDEFINED> instruction: 0xffdfffff
    ad88:			; <UNDEFINED> instruction: 0xffdfffff
    ad8c:			; <UNDEFINED> instruction: 0xffdfffff
    ad90:			; <UNDEFINED> instruction: 0xffdfffff
    ad94:	lsls	r1, r6, #4
    ad96:	movs	r0, r0
    ad98:			; <UNDEFINED> instruction: 0xffdfffff
    ad9c:	lsls	r1, r3, #3
    ad9e:	movs	r0, r0
    ada0:	cmp	r4, #93	; 0x5d
    ada2:	beq.n	ae40 <MetersPanel_setMoving@@Base+0x214>
    ada4:	cmp	r4, #116	; 0x74
    ada6:	bne.n	ade4 <MetersPanel_setMoving@@Base+0x1b8>
    ada8:	movw	r3, #9904	; 0x26b0
    adac:	ldr	r3, [r5, r3]
    adae:	ldr	r2, [r3, #16]
    adb0:	cmp	r2, #0
    adb2:	beq.n	acee <MetersPanel_setMoving@@Base+0xc2>
    adb4:	ldr	r3, [r3, #0]
    adb6:	movs	r4, #1
    adb8:	ldr.w	r7, [r3, r6, lsl #2]
    adbc:	ldr	r1, [r7, #12]
    adbe:	mov	r0, r7
    adc0:	cmp	r1, #4
    adc2:	add	r1, r4
    adc4:	it	eq
    adc6:	moveq	r1, r4
    adc8:	bl	aa88 <Meter_setMode@@Base>
    adcc:	add.w	r3, r5, #9920	; 0x26c0
    add0:	mov	r0, r7
    add2:	ldrb	r1, [r3, #0]
    add4:	bl	ab34 <Meter_toListItem@@Base>
    add8:	mov	r1, r6
    adda:	mov	r2, r0
    addc:	mov	r0, r5
    adde:	bl	b2bc <Panel_set@@Base>
    ade2:	b.n	adfc <MetersPanel_setMoving@@Base+0x1d0>
    ade4:	cmp	r4, #91	; 0x5b
    ade6:	bne.n	acee <MetersPanel_setMoving@@Base+0xc2>
    ade8:	movw	r3, #9904	; 0x26b0
    adec:	mov	r1, r6
    adee:	ldr	r0, [r5, r3]
    adf0:	movs	r4, #1
    adf2:	bl	f8ac <Vector_moveUp@@Base>
    adf6:	mov	r0, r5
    adf8:	bl	b30c <Panel_moveSelectedUp@@Base>
    adfc:	movw	r7, #9908	; 0x26b4
    ae00:	movw	r3, #9900	; 0x26ac
    ae04:	ldr	r1, [r5, r7]
    ae06:	movs	r2, #1
    ae08:	ldr	r3, [r5, r3]
    ae0a:	ldr	r6, [r1, #28]
    ae0c:	strb.w	r2, [r3, #71]	; 0x47
    ae10:	mov	r0, r6
    ae12:	bl	9a3c <Header_calculateHeight@@Base>
    ae16:	mov	r0, r6
    ae18:	bl	9964 <Header_draw@@Base>
    ae1c:	ldr	r0, [r5, r7]
    ae1e:	ldr	r2, [r6, #20]
    ae20:	ldr	r5, [r0, #12]
    ae22:	ldr	r3, [r0, #8]
    ae24:	ldr	r1, [r0, #0]
    ae26:	str	r5, [sp, #0]
    ae28:	bl	d5bc <ScreenManager_resize@@Base>
    ae2c:	mov	r0, r4
    ae2e:	add	sp, #12
    ae30:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    ae34:	add.w	r3, r5, #9920	; 0x26c0
    ae38:	ldrb	r3, [r3, #0]
    ae3a:	cmp	r3, #0
    ae3c:	beq.w	acee <MetersPanel_setMoving@@Base+0xc2>
    ae40:	movw	r3, #9904	; 0x26b0
    ae44:	mov	r1, r6
    ae46:	ldr	r0, [r5, r3]
    ae48:	movs	r4, #1
    ae4a:	bl	f8cc <Vector_moveDown@@Base>
    ae4e:	mov	r0, r5
    ae50:	bl	b328 <Panel_moveSelectedDown@@Base>
    ae54:	b.n	adfc <MetersPanel_setMoving@@Base+0x1d0>
    ae56:	add.w	r3, r5, #9920	; 0x26c0
    ae5a:	ldrb	r3, [r3, #0]
    ae5c:	cmp	r3, #0
    ae5e:	bne.n	ade8 <MetersPanel_setMoving@@Base+0x1bc>
    ae60:	b.n	acee <MetersPanel_setMoving@@Base+0xc2>
    ae62:	add.w	r3, r5, #9920	; 0x26c0
    ae66:	ldrb	r3, [r3, #0]
    ae68:	cmp	r3, #0
    ae6a:	beq.w	acee <MetersPanel_setMoving@@Base+0xc2>
    ae6e:	movw	r3, #9912	; 0x26b8
    ae72:	ldr	r7, [r5, r3]
    ae74:	cbz	r7, ae84 <MetersPanel_setMoving@@Base+0x258>
    ae76:	movw	r8, #9904	; 0x26b0
    ae7a:	ldr.w	r3, [r5, r8]
    ae7e:	ldr	r3, [r3, #16]
    ae80:	cmp	r6, r3
    ae82:	blt.n	aee0 <MetersPanel_setMoving@@Base+0x2b4>
    ae84:	movs	r4, #1
    ae86:	b.n	adfc <MetersPanel_setMoving@@Base+0x1d0>
    ae88:	add.w	r3, r5, #9920	; 0x26c0
    ae8c:	ldrb	r3, [r3, #0]
    ae8e:	cmp	r3, #0
    ae90:	beq.w	acee <MetersPanel_setMoving@@Base+0xc2>
    ae94:	movw	r3, #9916	; 0x26bc
    ae98:	ldr	r7, [r5, r3]
    ae9a:	cmp	r7, #0
    ae9c:	bne.n	ae76 <MetersPanel_setMoving@@Base+0x24a>
    ae9e:	b.n	ae84 <MetersPanel_setMoving@@Base+0x258>
    aea0:	movw	r3, #9904	; 0x26b0
    aea4:	ldr	r0, [r5, r3]
    aea6:	ldr	r3, [r0, #16]
    aea8:	cmp	r3, #0
    aeaa:	beq.w	acee <MetersPanel_setMoving@@Base+0xc2>
    aeae:	cmp	r3, r6
    aeb0:	bgt.n	aed0 <MetersPanel_setMoving@@Base+0x2a4>
    aeb2:	movs	r1, #0
    aeb4:	mov	r0, r5
    aeb6:	bl	ac2c <MetersPanel_setMoving@@Base>
    aeba:	movs	r4, #1
    aebc:	b.n	adfc <MetersPanel_setMoving@@Base+0x1d0>
    aebe:	add.w	r3, r5, #9920	; 0x26c0
    aec2:	movs	r4, #1
    aec4:	mov	r0, r5
    aec6:	ldrb	r1, [r3, #0]
    aec8:	eors	r1, r4
    aeca:	bl	ac2c <MetersPanel_setMoving@@Base>
    aece:	b.n	adfc <MetersPanel_setMoving@@Base+0x1d0>
    aed0:	mov	r1, r6
    aed2:	bl	f874 <Vector_remove@@Base>
    aed6:	mov	r1, r6
    aed8:	mov	r0, r5
    aeda:	bl	b2d0 <Panel_remove@@Base>
    aede:	b.n	aeb2 <MetersPanel_setMoving@@Base+0x286>
    aee0:	mov	r0, r5
    aee2:	movs	r1, #0
    aee4:	bl	ac2c <MetersPanel_setMoving@@Base>
    aee8:	mov	r1, r6
    aeea:	ldr.w	r0, [r5, r8]
    aeee:	movs	r4, #2
    aef0:	bl	f848 <Vector_take@@Base>
    aef4:	mov	r1, r6
    aef6:	mov	r9, r0
    aef8:	mov	r0, r5
    aefa:	bl	b2d0 <Panel_remove@@Base>
    aefe:	mov	r2, r9
    af00:	ldr.w	r0, [r7, r8]
    af04:	mov	r1, r6
    af06:	bl	f810 <Vector_insert@@Base>
    af0a:	mov	r0, r9
    af0c:	movs	r1, #0
    af0e:	bl	ab34 <Meter_toListItem@@Base>
    af12:	mov	r1, r6
    af14:	mov	r2, r0
    af16:	mov	r0, r7
    af18:	bl	b2a8 <Panel_insert@@Base>
    af1c:	mov	r1, r6
    af1e:	mov	r0, r7
    af20:	bl	b350 <Panel_setSelected@@Base>
    af24:	mov	r0, r7
    af26:	movs	r1, #1
    af28:	bl	ac2c <MetersPanel_setMoving@@Base>
    af2c:	b.n	adfc <MetersPanel_setMoving@@Base+0x1d0>
    af2e:	nop

0000af30 <MetersPanel_new@@Base>:
    af30:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    af34:	sub	sp, #28
    af36:	mov	r6, r0
    af38:	movw	r0, #9924	; 0x26c4
    af3c:	mov	r7, r1
    af3e:	mov	r4, r2
    af40:	str	r6, [sp, #16]
    af42:	str	r3, [sp, #20]
    af44:	bl	11d84 <xMalloc@@Base>
    af48:	ldr.w	fp, [pc, #204]	; b018 <MetersPanel_new@@Base+0xe8>
    af4c:	ldr.w	r9, [pc, #204]	; b01c <MetersPanel_new@@Base+0xec>
    af50:	ldr	r1, [pc, #204]	; (b020 <MetersPanel_new@@Base+0xf0>)
    af52:	add	fp, pc
    af54:	add	r9, pc
    af56:	ldr.w	r8, [pc, #204]	; b024 <MetersPanel_new@@Base+0xf4>
    af5a:	add	r1, pc
    af5c:	mov	r2, fp
    af5e:	add	r8, pc
    af60:	ldr.w	sl, [pc, #196]	; b028 <MetersPanel_new@@Base+0xf8>
    af64:	add	sl, pc
    af66:	str	r1, [r0, #0]
    af68:	mov	r5, r0
    af6a:	mov	r1, r9
    af6c:	add.w	r0, r9, #20
    af70:	bl	90fc <FunctionBar_new@@Base>
    af74:	ldr.w	r2, [r8]
    af78:	mov	r6, r0
    af7a:	cmp	r2, #0
    af7c:	beq.n	b002 <MetersPanel_new@@Base+0xd2>
    af7e:	ldr	r1, [pc, #172]	; (b02c <MetersPanel_new@@Base+0xfc>)
    af80:	movs	r3, #1
    af82:	strd	r3, r6, [sp, #8]
    af86:	mov	r2, r3
    af88:	mov	r0, r5
    af8a:	mov.w	r8, #0
    af8e:	ldr.w	r1, [sl, r1]
    af92:	str	r3, [sp, #0]
    af94:	mov	r6, r1
    af96:	mov	r1, r3
    af98:	str	r6, [sp, #4]
    af9a:	bl	b130 <Panel_init@@Base>
    af9e:	ldr	r6, [sp, #16]
    afa0:	mov	r1, r7
    afa2:	ldr	r7, [sp, #20]
    afa4:	add.w	r3, r5, #9920	; 0x26c0
    afa8:	movw	r2, #9900	; 0x26ac
    afac:	str	r6, [r5, r2]
    afae:	movw	ip, #9904	; 0x26b0
    afb2:	movw	r0, #9908	; 0x26b4
    afb6:	movw	r2, #9912	; 0x26b8
    afba:	movw	r6, #9916	; 0x26bc
    afbe:	str.w	r4, [r5, ip]
    afc2:	str	r7, [r5, r0]
    afc4:	mov	r0, r5
    afc6:	strb.w	r8, [r3]
    afca:	str.w	r8, [r5, r6]
    afce:	str.w	r8, [r5, r2]
    afd2:	bl	b22c <Panel_setHeader@@Base>
    afd6:	ldr	r3, [r4, #16]
    afd8:	cmp	r3, r8
    afda:	ble.n	affa <MetersPanel_new@@Base+0xca>
    afdc:	ldr	r3, [r4, #0]
    afde:	movs	r1, #0
    afe0:	ldr.w	r0, [r3, r8, lsl #2]
    afe4:	add.w	r8, r8, #1
    afe8:	bl	ab34 <Meter_toListItem@@Base>
    afec:	mov	r1, r0
    afee:	mov	r0, r5
    aff0:	bl	b294 <Panel_add@@Base>
    aff4:	ldr	r3, [r4, #16]
    aff6:	cmp	r3, r8
    aff8:	bgt.n	afdc <MetersPanel_new@@Base+0xac>
    affa:	mov	r0, r5
    affc:	add	sp, #28
    affe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b002:	add.w	r2, fp, #20
    b006:	add.w	r1, r9, #44	; 0x2c
    b00a:	add.w	r0, r9, #80	; 0x50
    b00e:	bl	90fc <FunctionBar_new@@Base>
    b012:	str.w	r0, [r8]
    b016:	b.n	af7e <MetersPanel_new@@Base+0x4e>
    b018:	stc2l	0, cr0, [r2], #4
    b01c:	ldrd	r0, r0, [r4, #-4]
    b020:	ldc2	0, cr0, [r2, #-4]
    b024:	lsrs	r6, r6, #32
    b026:	movs	r2, r0
    b028:	stc	0, cr0, [r8, #4]!
    b02c:	lsls	r0, r1, #10
	...

0000b030 <Panel_selectByTyping@@Base>:
    b030:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b034:	mov	r6, r0
    b036:	ldr	r3, [r0, #24]
    b038:	sub	sp, #12
    b03a:	ldr	r5, [r0, #40]	; 0x28
    b03c:	mov	r7, r1
    b03e:	ldr.w	r8, [r3, #16]
    b042:	cmp	r5, #0
    b044:	beq.n	b0ee <Panel_selectByTyping@@Base+0xbe>
    b046:	subs	r3, r7, #1
    b048:	cmp	r3, #253	; 0xfd
    b04a:	bhi.n	b0cc <Panel_selectByTyping@@Base+0x9c>
    b04c:	blx	69d0 <__ctype_b_loc@plt>
    b050:	ldr	r3, [r0, #0]
    b052:	ldrh.w	r3, [r3, r7, lsl #1]
    b056:	ands.w	r3, r3, #8
    b05a:	beq.n	b0ba <Panel_selectByTyping@@Base+0x8a>
    b05c:	mov	r0, r5
    b05e:	blx	6a0c <strlen@plt>
    b062:	cmp	r0, #98	; 0x62
    b064:	mov	fp, r0
    b066:	bls.n	b0dc <Panel_selectByTyping@@Base+0xac>
    b068:	movs	r3, #2
    b06a:	str	r3, [sp, #4]
    b06c:	cmp.w	r8, #0
    b070:	ble.n	b0a4 <Panel_selectByTyping@@Base+0x74>
    b072:	ldr.w	r9, [r6, #24]
    b076:	movs	r4, #0
    b078:	ldr.w	r3, [r9]
    b07c:	sub.w	sl, r3, #4
    b080:	ldr.w	r3, [sl, #4]!
    b084:	ldr	r0, [r3, #4]
    b086:	ldrb	r3, [r0, #0]
    b088:	cmp	r3, #32
    b08a:	bne.n	b094 <Panel_selectByTyping@@Base+0x64>
    b08c:	ldrb.w	r3, [r0, #1]!
    b090:	cmp	r3, #32
    b092:	beq.n	b08c <Panel_selectByTyping@@Base+0x5c>
    b094:	mov	r2, fp
    b096:	mov	r1, r5
    b098:	blx	6a54 <strncasecmp@plt>
    b09c:	cbz	r0, b0fc <Panel_selectByTyping@@Base+0xcc>
    b09e:	adds	r4, #1
    b0a0:	cmp	r8, r4
    b0a2:	bne.n	b080 <Panel_selectByTyping@@Base+0x50>
    b0a4:	mov.w	r3, #0
    b0a8:	strb	r3, [r5, #1]
    b0aa:	ldr	r3, [sp, #4]
    b0ac:	strb	r7, [r5, #0]
    b0ae:	cmp	r3, #1
    b0b0:	bne.n	b120 <Panel_selectByTyping@@Base+0xf0>
    b0b2:	movs	r0, #1
    b0b4:	add	sp, #12
    b0b6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0ba:	cmp	r7, #13
    b0bc:	strb	r3, [r5, #0]
    b0be:	it	eq
    b0c0:	moveq	r0, #4
    b0c2:	beq.n	b0b4 <Panel_selectByTyping@@Base+0x84>
    b0c4:	movs	r0, #2
    b0c6:	add	sp, #12
    b0c8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0cc:	adds	r7, #1
    b0ce:	beq.n	b0c4 <Panel_selectByTyping@@Base+0x94>
    b0d0:	movs	r0, #2
    b0d2:	movs	r3, #0
    b0d4:	strb	r3, [r5, #0]
    b0d6:	add	sp, #12
    b0d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b0dc:	adds	r3, r5, r0
    b0de:	strb	r7, [r5, r0]
    b0e0:	movs	r2, #0
    b0e2:	mov	r0, r5
    b0e4:	strb	r2, [r3, #1]
    b0e6:	blx	6a0c <strlen@plt>
    b0ea:	mov	fp, r0
    b0ec:	b.n	b068 <Panel_selectByTyping@@Base+0x38>
    b0ee:	movs	r1, #1
    b0f0:	movs	r0, #100	; 0x64
    b0f2:	bl	11da0 <xCalloc@@Base>
    b0f6:	mov	r5, r0
    b0f8:	str	r0, [r6, #40]	; 0x28
    b0fa:	b.n	b046 <Panel_selectByTyping@@Base+0x16>
    b0fc:	ldr.w	r3, [r9, #16]
    b100:	cmp	r4, r3
    b102:	it	ge
    b104:	addge.w	r4, r3, #4294967295	; 0xffffffff
    b108:	ldr	r3, [r6, #0]
    b10a:	bic.w	r4, r4, r4, asr #31
    b10e:	str	r4, [r6, #28]
    b110:	ldr	r3, [r3, #16]
    b112:	cmp	r3, #0
    b114:	beq.n	b0b2 <Panel_selectByTyping@@Base+0x82>
    b116:	mov	r0, r6
    b118:	mov.w	r1, #4294967295	; 0xffffffff
    b11c:	blx	r3
    b11e:	b.n	b0b2 <Panel_selectByTyping@@Base+0x82>
    b120:	mov	r0, r5
    b122:	movs	r3, #1
    b124:	str	r3, [sp, #4]
    b126:	blx	6a0c <strlen@plt>
    b12a:	mov	fp, r0
    b12c:	b.n	b06c <Panel_selectByTyping@@Base+0x3c>
    b12e:	nop

0000b130 <Panel_init@@Base>:
    b130:	push	{r4, r5, r6, lr}
    b132:	mov	r4, r0
    b134:	ldr	r5, [sp, #16]
    b136:	strd	r1, r2, [r0, #4]
    b13a:	mov.w	r2, #4294967295	; 0xffffffff
    b13e:	str	r3, [r0, #12]
    b140:	str	r5, [r0, #16]
    b142:	movs	r5, #0
    b144:	ldrb.w	r1, [sp, #24]
    b148:	str	r5, [r0, #40]	; 0x28
    b14a:	ldr	r0, [sp, #20]
    b14c:	ldr	r6, [sp, #28]
    b14e:	bl	f6dc <Vector_new@@Base>
    b152:	movs	r3, #1
    b154:	mov	r1, r5
    b156:	strb.w	r3, [r4, #50]	; 0x32
    b15a:	str	r5, [r4, #44]	; 0x2c
    b15c:	strh	r5, [r4, #48]	; 0x30
    b15e:	str	r5, [r4, #28]
    b160:	str	r5, [r4, #32]
    b162:	mov	r2, r0
    b164:	add.w	r0, r4, #60	; 0x3c
    b168:	str	r2, [r4, #24]
    b16a:	movw	r2, #9836	; 0x266c
    b16e:	blx	6a90 <memset@plt>
    b172:	ldr	r3, [pc, #28]	; (b190 <Panel_init@@Base+0x60>)
    b174:	ldr	r2, [pc, #28]	; (b194 <Panel_init@@Base+0x64>)
    b176:	add.w	r0, r4, #68	; 0x44
    b17a:	add	r3, pc
    b17c:	str	r6, [r4, #56]	; 0x38
    b17e:	str	r6, [r4, #52]	; 0x34
    b180:	movw	r1, #9896	; 0x26a8
    b184:	str	r0, [r4, #64]	; 0x40
    b186:	ldr	r3, [r3, r2]
    b188:	ldr	r3, [r3, #0]
    b18a:	ldr	r3, [r3, #28]
    b18c:	str	r3, [r4, r1]
    b18e:	pop	{r4, r5, r6, pc}
    b190:			; <UNDEFINED> instruction: 0xeb920001
    b194:	lsls	r0, r6, #9
	...

0000b198 <Panel_new@@Base>:
    b198:	stmdb	sp!, {r4, r5, r6, r7, r8, sl, fp, lr}
    b19c:	sub	sp, #16
    b19e:	mov	r8, r0
    b1a0:	movw	r0, #9900	; 0x26ac
    b1a4:	mov	sl, r1
    b1a6:	mov	fp, r2
    b1a8:	mov	r5, r3
    b1aa:	ldrb.w	r6, [sp, #48]	; 0x30
    b1ae:	ldr	r7, [sp, #56]	; 0x38
    b1b0:	bl	11d84 <xMalloc@@Base>
    b1b4:	ldr.w	ip, [pc, #36]	; b1dc <Panel_new@@Base+0x44>
    b1b8:	mov	r3, fp
    b1ba:	mov	r2, sl
    b1bc:	mov	r1, r8
    b1be:	add	ip, pc
    b1c0:	str.w	ip, [r0]
    b1c4:	mov	r4, r0
    b1c6:	str	r5, [sp, #0]
    b1c8:	ldr	r5, [sp, #52]	; 0x34
    b1ca:	strd	r6, r7, [sp, #8]
    b1ce:	str	r5, [sp, #4]
    b1d0:	bl	b130 <Panel_init@@Base>
    b1d4:	mov	r0, r4
    b1d6:	add	sp, #16
    b1d8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}
    b1dc:			; <UNDEFINED> instruction: 0xfac20001

0000b1e0 <Panel_done@@Base>:
    b1e0:	push	{r4, lr}
    b1e2:	mov	r4, r0
    b1e4:	ldr	r0, [r0, #40]	; 0x28
    b1e6:	blx	6758 <free@plt+0x4>
    b1ea:	ldr	r0, [r4, #24]
    b1ec:	bl	f720 <Vector_delete@@Base>
    b1f0:	ldr	r0, [r4, #56]	; 0x38
    b1f2:	bl	9234 <FunctionBar_delete@@Base>
    b1f6:	add.w	r0, r4, #60	; 0x3c
    b1fa:	ldmia.w	sp!, {r4, lr}
    b1fe:	b.w	d194 <RichString_prune@@Base>
    b202:	nop

0000b204 <Panel_delete@@Base>:
    b204:	push	{r4, lr}
    b206:	mov	r4, r0
    b208:	bl	b1e0 <Panel_done@@Base>
    b20c:	mov	r0, r4
    b20e:	ldmia.w	sp!, {r4, lr}
    b212:	b.w	6754 <free@plt>
    b216:	nop

0000b218 <Panel_setSelectionColor@@Base>:
    b218:	movw	r3, #9896	; 0x26a8
    b21c:	str	r1, [r0, r3]
    b21e:	bx	lr

0000b220 <Panel_getHeader@@Base>:
    b220:	mov	r3, r0
    b222:	movs	r2, #1
    b224:	adds	r0, #60	; 0x3c
    b226:	strb.w	r2, [r3, #50]	; 0x32
    b22a:	bx	lr

0000b22c <Panel_setHeader@@Base>:
    b22c:	push	{r3, r4, r5, lr}
    b22e:	mov	r2, r1
    b230:	ldr	r3, [pc, #24]	; (b24c <Panel_setHeader@@Base+0x20>)
    b232:	mov	r4, r0
    b234:	ldr	r5, [pc, #24]	; (b250 <Panel_setHeader@@Base+0x24>)
    b236:	adds	r0, #60	; 0x3c
    b238:	add	r3, pc
    b23a:	ldr	r3, [r3, r5]
    b23c:	ldr	r3, [r3, #0]
    b23e:	ldr	r1, [r3, #20]
    b240:	bl	d3b8 <RichString_write@@Base>
    b244:	movs	r3, #1
    b246:	strb.w	r3, [r4, #50]	; 0x32
    b24a:	pop	{r3, r4, r5, pc}
    b24c:			; <UNDEFINED> instruction: 0xead40001
    b250:	lsls	r0, r6, #9
	...

0000b254 <Panel_move@@Base>:
    b254:	movs	r3, #1
    b256:	str	r1, [r0, #4]
    b258:	str	r2, [r0, #8]
    b25a:	strb.w	r3, [r0, #50]	; 0x32
    b25e:	bx	lr

0000b260 <Panel_resize@@Base>:
    b260:	ldr	r3, [r0, #60]	; 0x3c
    b262:	str	r1, [r0, #12]
    b264:	cmp	r3, #0
    b266:	mov.w	r3, #1
    b26a:	it	gt
    b26c:	addgt.w	r2, r2, #4294967295	; 0xffffffff
    b270:	strb.w	r3, [r0, #50]	; 0x32
    b274:	str	r2, [r0, #16]
    b276:	bx	lr

0000b278 <Panel_prune@@Base>:
    b278:	push	{r4, lr}
    b27a:	mov	r4, r0
    b27c:	ldr	r0, [r0, #24]
    b27e:	bl	f75c <Vector_prune@@Base>
    b282:	movs	r3, #0
    b284:	movs	r2, #1
    b286:	str	r3, [r4, #44]	; 0x2c
    b288:	strb.w	r2, [r4, #50]	; 0x32
    b28c:	strd	r3, r3, [r4, #28]
    b290:	pop	{r4, pc}
    b292:	nop

0000b294 <Panel_add@@Base>:
    b294:	push	{r4, lr}
    b296:	mov	r4, r0
    b298:	ldr	r0, [r0, #24]
    b29a:	bl	f92c <Vector_add@@Base>
    b29e:	movs	r3, #1
    b2a0:	strb.w	r3, [r4, #50]	; 0x32
    b2a4:	pop	{r4, pc}
    b2a6:	nop

0000b2a8 <Panel_insert@@Base>:
    b2a8:	push	{r4, lr}
    b2aa:	mov	r4, r0
    b2ac:	ldr	r0, [r0, #24]
    b2ae:	bl	f810 <Vector_insert@@Base>
    b2b2:	movs	r3, #1
    b2b4:	strb.w	r3, [r4, #50]	; 0x32
    b2b8:	pop	{r4, pc}
    b2ba:	nop

0000b2bc <Panel_set@@Base>:
    b2bc:	ldr	r0, [r0, #24]
    b2be:	b.w	f8f0 <Vector_set@@Base>
    b2c2:	nop

0000b2c4 <Panel_get@@Base>:
    b2c4:	ldr	r3, [r0, #24]
    b2c6:	ldr	r3, [r3, #0]
    b2c8:	ldr.w	r0, [r3, r1, lsl #2]
    b2cc:	bx	lr
    b2ce:	nop

0000b2d0 <Panel_remove@@Base>:
    b2d0:	movs	r3, #1
    b2d2:	push	{r4, lr}
    b2d4:	mov	r4, r0
    b2d6:	strb.w	r3, [r0, #50]	; 0x32
    b2da:	ldr	r0, [r0, #24]
    b2dc:	bl	f874 <Vector_remove@@Base>
    b2e0:	ldr	r3, [r4, #28]
    b2e2:	cmp	r3, #0
    b2e4:	ble.n	b2f4 <Panel_remove@@Base+0x24>
    b2e6:	ldr	r2, [r4, #24]
    b2e8:	ldr	r2, [r2, #16]
    b2ea:	cmp	r3, r2
    b2ec:	itt	ge
    b2ee:	addge.w	r3, r3, #4294967295	; 0xffffffff
    b2f2:	strge	r3, [r4, #28]
    b2f4:	pop	{r4, pc}
    b2f6:	nop

0000b2f8 <Panel_getSelected@@Base>:
    b2f8:	ldr	r3, [r0, #24]
    b2fa:	ldr	r2, [r3, #16]
    b2fc:	cmp	r2, #0
    b2fe:	ittte	gt
    b300:	ldrgt	r2, [r0, #28]
    b302:	ldrgt	r3, [r3, #0]
    b304:	ldrgt.w	r0, [r3, r2, lsl #2]
    b308:	movle	r0, #0
    b30a:	bx	lr

0000b30c <Panel_moveSelectedUp@@Base>:
    b30c:	push	{r4, lr}
    b30e:	mov	r4, r0
    b310:	ldrd	r0, r1, [r0, #24]
    b314:	bl	f8ac <Vector_moveUp@@Base>
    b318:	ldr	r3, [r4, #28]
    b31a:	cmp	r3, #0
    b31c:	itt	gt
    b31e:	addgt.w	r3, r3, #4294967295	; 0xffffffff
    b322:	strgt	r3, [r4, #28]
    b324:	pop	{r4, pc}
    b326:	nop

0000b328 <Panel_moveSelectedDown@@Base>:
    b328:	push	{r4, lr}
    b32a:	mov	r4, r0
    b32c:	ldrd	r0, r1, [r0, #24]
    b330:	bl	f8cc <Vector_moveDown@@Base>
    b334:	ldrd	r2, r3, [r4, #24]
    b338:	adds	r3, #1
    b33a:	ldr	r2, [r2, #16]
    b33c:	cmp	r3, r2
    b33e:	it	lt
    b340:	strlt	r3, [r4, #28]
    b342:	pop	{r4, pc}

0000b344 <Panel_getSelectedIndex@@Base>:
    b344:	ldr	r0, [r0, #28]
    b346:	bx	lr

0000b348 <Panel_size@@Base>:
    b348:	ldr	r3, [r0, #24]
    b34a:	ldr	r0, [r3, #16]
    b34c:	bx	lr
    b34e:	nop

0000b350 <Panel_setSelected@@Base>:
    b350:	ldr	r3, [r0, #24]
    b352:	ldr	r3, [r3, #16]
    b354:	cmp	r3, r1
    b356:	it	le
    b358:	addle.w	r1, r3, #4294967295	; 0xffffffff
    b35c:	ldr	r3, [r0, #0]
    b35e:	bic.w	r1, r1, r1, asr #31
    b362:	str	r1, [r0, #28]
    b364:	ldr	r3, [r3, #16]
    b366:	cbz	r3, b36e <Panel_setSelected@@Base+0x1e>
    b368:	mov.w	r1, #4294967295	; 0xffffffff
    b36c:	bx	r3
    b36e:	bx	lr

0000b370 <Panel_draw@@Base>:
    b370:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b374:	mov	r5, r0
    b376:	vpush	{d8}
    b37a:	mov	r8, r1
    b37c:	ldr	r3, [r0, #24]
    b37e:	ldr.w	r0, [pc, #1108]	; b7d4 <Panel_draw@@Base+0x464>
    b382:	ldr.w	r1, [pc, #1108]	; b7d8 <Panel_draw@@Base+0x468>
    b386:	add	r0, pc
    b388:	sub.w	sp, sp, #19712	; 0x4d00
    b38c:	sub	sp, #12
    b38e:	ldr.w	r9, [r3, #16]
    b392:	ldr	r3, [r5, #8]
    b394:	add.w	r2, sp, #19712	; 0x4d00
    b398:	ldr	r1, [r0, r1]
    b39a:	adds	r2, #4
    b39c:	ldr	r6, [r5, #60]	; 0x3c
    b39e:	ldr	r1, [r1, #0]
    b3a0:	str	r1, [r2, #0]
    b3a2:	mov.w	r1, #0
    b3a6:	str	r3, [sp, #12]
    b3a8:	ldr	r3, [r5, #16]
    b3aa:	cmp	r6, #0
    b3ac:	ldrsh.w	r2, [r5, #48]	; 0x30
    b3b0:	ldr.w	sl, [r5, #4]
    b3b4:	str	r3, [sp, #4]
    b3b6:	ldr.w	r3, [pc, #1060]	; b7dc <Panel_draw@@Base+0x46c>
    b3ba:	str	r2, [sp, #16]
    b3bc:	add	r3, pc
    b3be:	str	r3, [sp, #28]
    b3c0:	mov	r2, r3
    b3c2:	ble.w	b702 <Panel_draw@@Base+0x392>
    b3c6:	ldr.w	r3, [pc, #1048]	; b7e0 <Panel_draw@@Base+0x470>
    b3ca:	ldr	r2, [sp, #28]
    b3cc:	ldr	r4, [r2, r3]
    b3ce:	ldr	r3, [r4, #0]
    b3d0:	cmp.w	r8, #0
    b3d4:	bne.w	b568 <Panel_draw@@Base+0x1f8>
    b3d8:	ldr	r1, [r3, #24]
    b3da:	ldr.w	r3, [pc, #1032]	; b7e4 <Panel_draw@@Base+0x474>
    b3de:	ldr	r2, [sp, #28]
    b3e0:	ldr	r7, [r2, r3]
    b3e2:	ldr	r0, [r7, #0]
    b3e4:	blx	6c88 <wattrset@plt+0x4>
    b3e8:	ldr	r1, [sp, #12]
    b3ea:	ldr	r0, [r7, #0]
    b3ec:	mov	r2, sl
    b3ee:	blx	6668 <wmove@plt>
    b3f2:	adds	r0, #1
    b3f4:	beq.n	b400 <Panel_draw@@Base+0x90>
    b3f6:	ldr	r2, [r5, #12]
    b3f8:	movs	r1, #32
    b3fa:	ldr	r0, [r7, #0]
    b3fc:	blx	6b9c <whline@plt>
    b400:	ldr	r3, [sp, #16]
    b402:	ldr	r0, [r7, #0]
    b404:	cmp	r3, r6
    b406:	blt.w	b76e <Panel_draw@@Base+0x3fe>
    b40a:	ldr	r3, [r4, #0]
    b40c:	ldr	r2, [sp, #12]
    b40e:	ldr	r1, [r3, #0]
    b410:	adds	r2, #1
    b412:	str	r2, [sp, #12]
    b414:	blx	6c88 <wattrset@plt+0x4>
    b418:	ldr	r3, [r5, #44]	; 0x2c
    b41a:	cmp	r3, #0
    b41c:	blt.w	b6f6 <Panel_draw@@Base+0x386>
    b420:	cmp	r3, r9
    b422:	blt.n	b438 <Panel_draw@@Base+0xc8>
    b424:	mov	r3, r9
    b426:	cmp	r3, #1
    b428:	mov.w	r2, #1
    b42c:	strb.w	r2, [r5, #50]	; 0x32
    b430:	it	lt
    b432:	movlt	r3, #1
    b434:	subs	r3, #1
    b436:	str	r3, [r5, #44]	; 0x2c
    b438:	ldr	r6, [r5, #28]
    b43a:	cmp	r6, r3
    b43c:	bge.w	b6e6 <Panel_draw@@Base+0x376>
    b440:	ldr	r3, [sp, #4]
    b442:	movs	r4, #1
    b444:	str	r6, [r5, #44]	; 0x2c
    b446:	adds	r2, r6, r3
    b448:	strb.w	r4, [r5, #50]	; 0x32
    b44c:	cmp.w	r8, #0
    b450:	beq.w	b5f4 <Panel_draw@@Base+0x284>
    b454:	movw	r3, #9896	; 0x26a8
    b458:	ldr	r3, [r5, r3]
    b45a:	vmov	s16, r3
    b45e:	cmp	r4, #0
    b460:	beq.w	b608 <Panel_draw@@Base+0x298>
    b464:	cmp	r9, r2
    b466:	mov	r3, r9
    b468:	it	ge
    b46a:	movge	r3, r2
    b46c:	ldr	r2, [sp, #4]
    b46e:	str	r3, [sp, #20]
    b470:	cmp	r2, #0
    b472:	it	gt
    b474:	cmpgt	r3, r6
    b476:	ite	gt
    b478:	movgt	r4, #1
    b47a:	movle	r4, #0
    b47c:	ble.w	b58c <Panel_draw@@Base+0x21c>
    b480:	ldr	r3, [sp, #16]
    b482:	add.w	r2, sp, #9920	; 0x26c0
    b486:	adds	r2, #8
    b488:	movs	r4, #0
    b48a:	sub.w	r8, r2, #48	; 0x30
    b48e:	mov	fp, r7
    b490:	rsb	r3, r3, r3, lsl #3
    b494:	str	r2, [sp, #24]
    b496:	lsls	r3, r3, #2
    b498:	str	r3, [sp, #36]	; 0x24
    b49a:	b.n	b4c0 <Panel_draw@@Base+0x150>
    b49c:	cmp	r7, r6
    b49e:	beq.n	b554 <Panel_draw@@Base+0x1e4>
    b4a0:	mov	r0, r8
    b4a2:	adds	r4, #1
    b4a4:	bl	d194 <RichString_prune@@Base>
    b4a8:	ldr	r3, [sp, #4]
    b4aa:	adds	r6, #1
    b4ac:	ldr	r2, [sp, #20]
    b4ae:	cmp	r4, r3
    b4b0:	ite	ge
    b4b2:	movge	r3, #0
    b4b4:	movlt	r3, #1
    b4b6:	cmp	r2, r6
    b4b8:	it	le
    b4ba:	movle	r3, #0
    b4bc:	cmp	r3, #0
    b4be:	beq.n	b58a <Panel_draw@@Base+0x21a>
    b4c0:	ldr	r3, [r5, #24]
    b4c2:	ldr	r3, [r3, #0]
    b4c4:	ldr.w	r7, [r3, r6, lsl #2]
    b4c8:	cmp	r7, #0
    b4ca:	beq.n	b4a8 <Panel_draw@@Base+0x138>
    b4cc:	movw	r2, #9836	; 0x266c
    b4d0:	movs	r1, #0
    b4d2:	mov	r0, r8
    b4d4:	blx	6a90 <memset@plt>
    b4d8:	ldr	r3, [r7, #0]
    b4da:	ldr	r2, [sp, #24]
    b4dc:	mov	r0, r7
    b4de:	mov	r1, r8
    b4e0:	subs	r2, #40	; 0x28
    b4e2:	ldr	r3, [r3, #4]
    b4e4:	str.w	r2, [r8, #4]
    b4e8:	blx	r3
    b4ea:	ldr.w	r3, [r8]
    b4ee:	ldr	r1, [sp, #16]
    b4f0:	ldr	r2, [r5, #12]
    b4f2:	sub.w	r9, r3, r1
    b4f6:	ldr	r7, [r5, #28]
    b4f8:	cmp	r9, r2
    b4fa:	it	ge
    b4fc:	movge	r9, r2
    b4fe:	cmp	r7, r6
    b500:	str.w	r9, [sp, #8]
    b504:	beq.n	b56c <Panel_draw@@Base+0x1fc>
    b506:	ldr	r3, [sp, #12]
    b508:	mov	r2, sl
    b50a:	ldr.w	r0, [fp]
    b50e:	add.w	r9, r3, r4
    b512:	mov	r1, r9
    b514:	blx	6668 <wmove@plt>
    b518:	adds	r0, #1
    b51a:	beq.n	b528 <Panel_draw@@Base+0x1b8>
    b51c:	ldr	r2, [r5, #12]
    b51e:	movs	r1, #32
    b520:	ldr.w	r0, [fp]
    b524:	blx	6b9c <whline@plt>
    b528:	ldr	r3, [sp, #8]
    b52a:	cmp	r3, #0
    b52c:	ble.n	b49c <Panel_draw@@Base+0x12c>
    b52e:	ldr.w	r0, [fp]
    b532:	mov	r1, r9
    b534:	mov	r2, sl
    b536:	blx	6668 <wmove@plt>
    b53a:	adds	r0, #1
    b53c:	beq.n	b49c <Panel_draw@@Base+0x12c>
    b53e:	ldr.w	r1, [r8, #4]
    b542:	ldr	r3, [sp, #36]	; 0x24
    b544:	ldr	r2, [sp, #8]
    b546:	ldr.w	r0, [fp]
    b54a:	add	r1, r3
    b54c:	blx	6680 <wadd_wchnstr@plt>
    b550:	cmp	r7, r6
    b552:	bne.n	b4a0 <Panel_draw@@Base+0x130>
    b554:	ldr	r2, [sp, #28]
    b556:	ldr	r3, [pc, #648]	; (b7e0 <Panel_draw@@Base+0x470>)
    b558:	ldr.w	r0, [fp]
    b55c:	ldr	r3, [r2, r3]
    b55e:	ldr	r3, [r3, #0]
    b560:	ldr	r1, [r3, #0]
    b562:	blx	6c88 <wattrset@plt+0x4>
    b566:	b.n	b4a0 <Panel_draw@@Base+0x130>
    b568:	ldr	r1, [r3, #20]
    b56a:	b.n	b3da <Panel_draw@@Base+0x6a>
    b56c:	vmov	r1, s16
    b570:	ldr.w	r0, [fp]
    b574:	str	r3, [sp, #32]
    b576:	blx	6c88 <wattrset@plt+0x4>
    b57a:	vmov	r1, s16
    b57e:	mov	r0, r8
    b580:	bl	d1bc <RichString_setAttr@@Base>
    b584:	ldr	r3, [sp, #32]
    b586:	str	r3, [r5, #36]	; 0x24
    b588:	b.n	b506 <Panel_draw@@Base+0x196>
    b58a:	mov	r7, fp
    b58c:	ldr	r3, [sp, #4]
    b58e:	cmp	r3, r4
    b590:	ble.n	b5ba <Panel_draw@@Base+0x24a>
    b592:	ldr	r3, [sp, #12]
    b594:	ldr	r2, [sp, #4]
    b596:	add	r4, r3
    b598:	add	r2, r3
    b59a:	mov	r6, r2
    b59c:	ldr	r0, [r7, #0]
    b59e:	mov	r2, sl
    b5a0:	mov	r1, r4
    b5a2:	blx	6668 <wmove@plt>
    b5a6:	adds	r0, #1
    b5a8:	beq.n	b5b4 <Panel_draw@@Base+0x244>
    b5aa:	ldr	r2, [r5, #12]
    b5ac:	movs	r1, #32
    b5ae:	ldr	r0, [r7, #0]
    b5b0:	blx	6b9c <whline@plt>
    b5b4:	adds	r4, #1
    b5b6:	cmp	r6, r4
    b5b8:	bne.n	b59c <Panel_draw@@Base+0x22c>
    b5ba:	movs	r3, #0
    b5bc:	strb.w	r3, [r5, #50]	; 0x32
    b5c0:	ldr	r3, [r5, #28]
    b5c2:	movs	r2, #0
    b5c4:	mov	r1, r2
    b5c6:	ldr	r0, [r7, #0]
    b5c8:	str	r3, [r5, #32]
    b5ca:	blx	6668 <wmove@plt>
    b5ce:	ldr	r1, [pc, #536]	; (b7e8 <Panel_draw@@Base+0x478>)
    b5d0:	ldr	r2, [pc, #516]	; (b7d8 <Panel_draw@@Base+0x468>)
    b5d2:	add.w	r3, sp, #19712	; 0x4d00
    b5d6:	add	r1, pc
    b5d8:	adds	r3, #4
    b5da:	ldr	r2, [r1, r2]
    b5dc:	ldr	r1, [r2, #0]
    b5de:	ldr	r2, [r3, #0]
    b5e0:	eors	r1, r2
    b5e2:	bne.w	b7ce <Panel_draw@@Base+0x45e>
    b5e6:	add.w	sp, sp, #19712	; 0x4d00
    b5ea:	add	sp, #12
    b5ec:	vpop	{d8}
    b5f0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b5f4:	ldr	r3, [pc, #488]	; (b7e0 <Panel_draw@@Base+0x470>)
    b5f6:	ldr	r1, [sp, #28]
    b5f8:	ldr	r3, [r1, r3]
    b5fa:	ldr	r3, [r3, #0]
    b5fc:	ldr	r3, [r3, #36]	; 0x24
    b5fe:	vmov	s16, r3
    b602:	cmp	r4, #0
    b604:	bne.w	b464 <Panel_draw@@Base+0xf4>
    b608:	ldr	r0, [r5, #24]
    b60a:	add.w	r8, sp, #44	; 0x2c
    b60e:	ldr	r3, [r5, #32]
    b610:	mov	r1, r4
    b612:	movw	r2, #9836	; 0x266c
    b616:	add.w	fp, sp, #136	; 0x88
    b61a:	ldr.w	ip, [r0]
    b61e:	mov	r0, r8
    b620:	ldr.w	r3, [ip, r3, lsl #2]
    b624:	str	r3, [sp, #8]
    b626:	blx	6a90 <memset@plt>
    b62a:	add.w	r3, sp, #9920	; 0x26c0
    b62e:	sub.w	r2, fp, #84	; 0x54
    b632:	adds	r3, #8
    b634:	str	r3, [sp, #4]
    b636:	sub.w	r9, r3, #48	; 0x30
    b63a:	ldr	r3, [sp, #8]
    b63c:	str.w	r2, [r8, #4]
    b640:	mov	r1, r8
    b642:	ldr	r2, [r3, #0]
    b644:	mov	r0, r3
    b646:	ldr	r3, [r2, #4]
    b648:	blx	r3
    b64a:	ldrd	r2, r3, [r5, #24]
    b64e:	mov	r1, r4
    b650:	mov	r0, r9
    b652:	ldr.w	fp, [fp, #-92]
    b656:	ldr	r4, [r2, #0]
    b658:	movw	r2, #9836	; 0x266c
    b65c:	ldr.w	r4, [r4, r3, lsl #2]
    b660:	blx	6a90 <memset@plt>
    b664:	ldr	r1, [sp, #4]
    b666:	sub.w	r3, r1, #40	; 0x28
    b66a:	str.w	r3, [r9, #4]
    b66e:	ldr	r3, [r4, #0]
    b670:	mov	r0, r4
    b672:	mov	r1, r9
    b674:	ldr	r3, [r3, #4]
    b676:	blx	r3
    b678:	ldr	r1, [sp, #4]
    b67a:	ldr	r3, [sp, #12]
    b67c:	mov	r2, sl
    b67e:	ldr	r0, [r7, #0]
    b680:	ldr.w	r4, [r1, #-48]
    b684:	ldr	r1, [r5, #32]
    b686:	add	r1, r3
    b688:	str	r4, [r5, #36]	; 0x24
    b68a:	subs	r1, r1, r6
    b68c:	blx	6668 <wmove@plt>
    b690:	adds	r0, #1
    b692:	bne.n	b726 <Panel_draw@@Base+0x3b6>
    b694:	ldr	r3, [sp, #16]
    b696:	ldr	r0, [r7, #0]
    b698:	cmp	r3, fp
    b69a:	blt.n	b738 <Panel_draw@@Base+0x3c8>
    b69c:	vmov	r1, s16
    b6a0:	blx	6c88 <wattrset@plt+0x4>
    b6a4:	ldr	r1, [r5, #28]
    b6a6:	ldr	r3, [sp, #12]
    b6a8:	mov	r2, sl
    b6aa:	ldr	r0, [r7, #0]
    b6ac:	add	r1, r3
    b6ae:	subs	r1, r1, r6
    b6b0:	blx	6668 <wmove@plt>
    b6b4:	adds	r0, #1
    b6b6:	bne.n	b71a <Panel_draw@@Base+0x3aa>
    b6b8:	vmov	r1, s16
    b6bc:	mov	r0, r9
    b6be:	bl	d1bc <RichString_setAttr@@Base>
    b6c2:	ldr	r3, [sp, #16]
    b6c4:	cmp	r3, r4
    b6c6:	blt.n	b79a <Panel_draw@@Base+0x42a>
    b6c8:	ldr	r2, [sp, #28]
    b6ca:	ldr	r3, [pc, #276]	; (b7e0 <Panel_draw@@Base+0x470>)
    b6cc:	ldr	r0, [r7, #0]
    b6ce:	ldr	r3, [r2, r3]
    b6d0:	ldr	r3, [r3, #0]
    b6d2:	ldr	r1, [r3, #0]
    b6d4:	blx	6c88 <wattrset@plt+0x4>
    b6d8:	mov	r0, r9
    b6da:	bl	d194 <RichString_prune@@Base>
    b6de:	mov	r0, r8
    b6e0:	bl	d194 <RichString_prune@@Base>
    b6e4:	b.n	b5c0 <Panel_draw@@Base+0x250>
    b6e6:	ldr	r2, [sp, #4]
    b6e8:	add	r2, r3
    b6ea:	cmp	r6, r2
    b6ec:	bge.n	b708 <Panel_draw@@Base+0x398>
    b6ee:	ldrb.w	r4, [r5, #50]	; 0x32
    b6f2:	mov	r6, r3
    b6f4:	b.n	b44c <Panel_draw@@Base+0xdc>
    b6f6:	movs	r3, #0
    b6f8:	movs	r2, #1
    b6fa:	str	r3, [r5, #44]	; 0x2c
    b6fc:	strb.w	r2, [r5, #50]	; 0x32
    b700:	b.n	b438 <Panel_draw@@Base+0xc8>
    b702:	ldr	r3, [pc, #224]	; (b7e4 <Panel_draw@@Base+0x474>)
    b704:	ldr	r7, [r2, r3]
    b706:	b.n	b418 <Panel_draw@@Base+0xa8>
    b708:	ldr	r3, [sp, #4]
    b70a:	movs	r4, #1
    b70c:	strb.w	r4, [r5, #50]	; 0x32
    b710:	subs	r6, r6, r3
    b712:	add	r6, r4
    b714:	str	r6, [r5, #44]	; 0x2c
    b716:	adds	r2, r6, r3
    b718:	b.n	b44c <Panel_draw@@Base+0xdc>
    b71a:	ldr	r2, [r5, #12]
    b71c:	movs	r1, #32
    b71e:	ldr	r0, [r7, #0]
    b720:	blx	6b9c <whline@plt>
    b724:	b.n	b6b8 <Panel_draw@@Base+0x348>
    b726:	ldr	r2, [r5, #12]
    b728:	movs	r1, #32
    b72a:	ldr	r0, [r7, #0]
    b72c:	blx	6b9c <whline@plt>
    b730:	ldr	r3, [sp, #16]
    b732:	ldr	r0, [r7, #0]
    b734:	cmp	r3, fp
    b736:	bge.n	b69c <Panel_draw@@Base+0x32c>
    b738:	ldr	r1, [r5, #32]
    b73a:	mov	r2, sl
    b73c:	ldr	r3, [sp, #12]
    b73e:	add	r1, r3
    b740:	subs	r1, r1, r6
    b742:	blx	6668 <wmove@plt>
    b746:	adds	r0, #1
    b748:	beq.n	b76a <Panel_draw@@Base+0x3fa>
    b74a:	ldr	r0, [sp, #16]
    b74c:	ldr	r2, [r5, #12]
    b74e:	sub.w	fp, fp, r0
    b752:	ldr.w	r3, [r8, #4]
    b756:	rsb	r1, r0, r0, lsl #3
    b75a:	cmp	r2, fp
    b75c:	ldr	r0, [r7, #0]
    b75e:	add.w	r1, r3, r1, lsl #2
    b762:	it	ge
    b764:	movge	r2, fp
    b766:	blx	6680 <wadd_wchnstr@plt>
    b76a:	ldr	r0, [r7, #0]
    b76c:	b.n	b69c <Panel_draw@@Base+0x32c>
    b76e:	ldr	r1, [sp, #12]
    b770:	mov	r2, sl
    b772:	blx	6668 <wmove@plt>
    b776:	adds	r0, #1
    b778:	beq.n	b796 <Panel_draw@@Base+0x426>
    b77a:	ldr	r0, [sp, #16]
    b77c:	ldr	r2, [r5, #12]
    b77e:	subs	r6, r6, r0
    b780:	ldr	r3, [r5, #64]	; 0x40
    b782:	rsb	r1, r0, r0, lsl #3
    b786:	cmp	r2, r6
    b788:	ldr	r0, [r7, #0]
    b78a:	add.w	r1, r3, r1, lsl #2
    b78e:	it	ge
    b790:	movge	r2, r6
    b792:	blx	6680 <wadd_wchnstr@plt>
    b796:	ldr	r0, [r7, #0]
    b798:	b.n	b40a <Panel_draw@@Base+0x9a>
    b79a:	ldr	r1, [r5, #28]
    b79c:	mov	r2, sl
    b79e:	ldr	r3, [sp, #12]
    b7a0:	ldr	r0, [r7, #0]
    b7a2:	add	r3, r1
    b7a4:	subs	r1, r3, r6
    b7a6:	blx	6668 <wmove@plt>
    b7aa:	adds	r0, #1
    b7ac:	beq.n	b6c8 <Panel_draw@@Base+0x358>
    b7ae:	ldr	r3, [sp, #16]
    b7b0:	ldr	r2, [r5, #12]
    b7b2:	subs	r4, r4, r3
    b7b4:	ldr	r0, [r7, #0]
    b7b6:	rsb	r1, r3, r3, lsl #3
    b7ba:	cmp	r2, r4
    b7bc:	ldr.w	r3, [r9, #4]
    b7c0:	it	ge
    b7c2:	movge	r2, r4
    b7c4:	add.w	r1, r3, r1, lsl #2
    b7c8:	blx	6680 <wadd_wchnstr@plt>
    b7cc:	b.n	b6c8 <Panel_draw@@Base+0x358>
    b7ce:	blx	67d0 <__stack_chk_fail@plt>
    b7d2:	nop
    b7d4:			; <UNDEFINED> instruction: 0xe9860001
    b7d8:	lsls	r0, r0, #9
    b7da:	movs	r0, r0
    b7dc:	ldrd	r0, r0, [r0, #-4]
    b7e0:	lsls	r0, r6, #9
    b7e2:	movs	r0, r0
    b7e4:	lsls	r4, r5, #9
    b7e6:	movs	r0, r0
    b7e8:	b.n	b658 <Panel_draw@@Base+0x2e8>
    b7ea:	movs	r1, r0

0000b7ec <Panel_onKey@@Base>:
    b7ec:	ldr	r3, [r0, #24]
    b7ee:	cmp.w	r1, #286	; 0x11e
    b7f2:	push	{r4, r5, r6, r7}
    b7f4:	ldr	r5, [pc, #592]	; (ba48 <Panel_onKey@@Base+0x25c>)
    b7f6:	ldr	r4, [r3, #16]
    b7f8:	add	r5, pc
    b7fa:	bge.w	b914 <Panel_onKey@@Base+0x128>
    b7fe:	cmp.w	r1, #258	; 0x102
    b802:	bge.n	b892 <Panel_onKey@@Base+0xa6>
    b804:	cmp	r1, #36	; 0x24
    b806:	bgt.n	b866 <Panel_onKey@@Base+0x7a>
    b808:	cmp	r1, #0
    b80a:	ble.n	b85e <Panel_onKey@@Base+0x72>
    b80c:	subs	r1, #1
    b80e:	cmp	r1, #35	; 0x23
    b810:	bhi.n	b85e <Panel_onKey@@Base+0x72>
    b812:	tbh	[pc, r1, lsl #1]
    b816:	movs	r2, r5
    b818:	lsls	r2, r0, #3
    b81a:	movs	r4, r4
    b81c:	movs	r4, r4
    b81e:	lsls	r5, r2, #3
    b820:	lsls	r1, r4, #3
    b822:	movs	r4, r4
    b824:	movs	r4, r4
    b826:	movs	r4, r4
    b828:	movs	r4, r4
    b82a:	movs	r4, r4
    b82c:	movs	r4, r4
    b82e:	movs	r4, r4
    b830:	lsls	r5, r5, #3
    b832:	movs	r4, r4
    b834:	lsls	r2, r6, #3
    b836:	movs	r4, r4
    b838:	movs	r4, r4
    b83a:	movs	r4, r4
    b83c:	movs	r4, r4
    b83e:	movs	r4, r4
    b840:	movs	r4, r4
    b842:	movs	r4, r4
    b844:	movs	r4, r4
    b846:	movs	r4, r4
    b848:	movs	r4, r4
    b84a:	movs	r4, r4
    b84c:	movs	r4, r4
    b84e:	movs	r4, r4
    b850:	movs	r4, r4
    b852:	movs	r4, r4
    b854:	movs	r4, r4
    b856:	movs	r4, r4
    b858:	movs	r4, r4
    b85a:	movs	r4, r4
    b85c:	lsls	r5, r2, #3
    b85e:	movs	r3, #0
    b860:	mov	r0, r3
    b862:	pop	{r4, r5, r6, r7}
    b864:	bx	lr
    b866:	cmp	r1, #94	; 0x5e
    b868:	bne.n	b85e <Panel_onKey@@Base+0x72>
    b86a:	ldr	r2, [r0, #28]
    b86c:	movs	r3, #0
    b86e:	strh	r3, [r0, #48]	; 0x30
    b870:	movs	r3, #1
    b872:	strb.w	r3, [r0, #50]	; 0x32
    b876:	lsrs	r3, r2, #31
    b878:	cmp	r4, #0
    b87a:	it	eq
    b87c:	moveq	r3, #1
    b87e:	cmp	r3, #0
    b880:	beq.n	b95c <Panel_onKey@@Base+0x170>
    b882:	movs	r1, #0
    b884:	movs	r2, #1
    b886:	str	r1, [r0, #28]
    b888:	strb.w	r2, [r0, #50]	; 0x32
    b88c:	mov	r0, r3
    b88e:	pop	{r4, r5, r6, r7}
    b890:	bx	lr
    b892:	sub.w	r1, r1, #258	; 0x102
    b896:	cmp	r1, #27
    b898:	bhi.n	b85e <Panel_onKey@@Base+0x72>
    b89a:	add	r3, pc, #8	; (adr r3, b8a4 <Panel_onKey@@Base+0xb8>)
    b89c:	ldr.w	r2, [r3, r1, lsl #2]
    b8a0:	add	r3, r2
    b8a2:	bx	r3
    b8a4:	lsls	r5, r1, #5
    b8a6:	movs	r0, r0
    b8a8:	lsls	r7, r2, #5
    b8aa:	movs	r0, r0
    b8ac:	lsls	r7, r6, #3
    b8ae:	movs	r0, r0
    b8b0:	lsls	r5, r6, #4
    b8b2:	movs	r0, r0
    b8b4:	lsls	r1, r4, #5
    b8b6:	movs	r0, r0
    b8b8:			; <UNDEFINED> instruction: 0xffbbffff
    b8bc:			; <UNDEFINED> instruction: 0xffbbffff
    b8c0:			; <UNDEFINED> instruction: 0xffbbffff
    b8c4:			; <UNDEFINED> instruction: 0xffbbffff
    b8c8:			; <UNDEFINED> instruction: 0xffbbffff
    b8cc:			; <UNDEFINED> instruction: 0xffbbffff
    b8d0:			; <UNDEFINED> instruction: 0xffbbffff
    b8d4:			; <UNDEFINED> instruction: 0xffbbffff
    b8d8:			; <UNDEFINED> instruction: 0xffbbffff
    b8dc:			; <UNDEFINED> instruction: 0xffbbffff
    b8e0:			; <UNDEFINED> instruction: 0xffbbffff
    b8e4:			; <UNDEFINED> instruction: 0xffbbffff
    b8e8:			; <UNDEFINED> instruction: 0xffbbffff
    b8ec:			; <UNDEFINED> instruction: 0xffbbffff
    b8f0:			; <UNDEFINED> instruction: 0xffbbffff
    b8f4:			; <UNDEFINED> instruction: 0xffbbffff
    b8f8:			; <UNDEFINED> instruction: 0xffbbffff
    b8fc:			; <UNDEFINED> instruction: 0xffbbffff
    b900:			; <UNDEFINED> instruction: 0xffbbffff
    b904:			; <UNDEFINED> instruction: 0xffbbffff
    b908:			; <UNDEFINED> instruction: 0xffbbffff
    b90c:	lsls	r1, r5, #5
    b90e:	movs	r0, r0
    b910:	lsls	r1, r2, #3
    b912:	movs	r0, r0
    b914:	movw	r3, #339	; 0x153
    b918:	cmp	r1, r3
    b91a:	beq.w	ba28 <Panel_onKey@@Base+0x23c>
    b91e:	cmp.w	r1, #360	; 0x168
    b922:	ittt	eq
    b924:	addeq.w	r2, r4, #4294967295	; 0xffffffff
    b928:	streq	r2, [r0, #28]
    b92a:	lsreq	r3, r2, #31
    b92c:	beq.n	b878 <Panel_onKey@@Base+0x8c>
    b92e:	cmp.w	r1, #338	; 0x152
    b932:	bne.n	b85e <Panel_onKey@@Base+0x72>
    b934:	ldr	r2, [r0, #16]
    b936:	movs	r1, #1
    b938:	ldr	r3, [r0, #44]	; 0x2c
    b93a:	subs	r6, r4, r2
    b93c:	ldr	r5, [r0, #28]
    b93e:	add	r3, r2
    b940:	strb.w	r1, [r0, #50]	; 0x32
    b944:	subs	r1, r3, #1
    b946:	subs	r2, #1
    b948:	cmp	r1, r6
    b94a:	add	r2, r5
    b94c:	str	r2, [r0, #28]
    b94e:	it	ge
    b950:	movge	r1, r6
    b952:	lsrs	r3, r2, #31
    b954:	bic.w	r1, r1, r1, asr #31
    b958:	str	r1, [r0, #44]	; 0x2c
    b95a:	b.n	b878 <Panel_onKey@@Base+0x8c>
    b95c:	cmp	r4, r2
    b95e:	mov.w	r3, #1
    b962:	bgt.w	b860 <Panel_onKey@@Base+0x74>
    b966:	subs	r4, #1
    b968:	strb.w	r3, [r0, #50]	; 0x32
    b96c:	str	r4, [r0, #28]
    b96e:	mov	r0, r3
    b970:	pop	{r4, r5, r6, r7}
    b972:	bx	lr
    b974:	ldr	r2, [pc, #212]	; (ba4c <Panel_onKey@@Base+0x260>)
    b976:	movs	r6, #1
    b978:	ldr	r1, [r0, #44]	; 0x2c
    b97a:	ldr	r3, [r0, #16]
    b97c:	ldr	r2, [r5, r2]
    b97e:	ldr	r5, [r0, #28]
    b980:	subs	r3, r4, r3
    b982:	strb.w	r6, [r0, #50]	; 0x32
    b986:	ldr	r2, [r2, #0]
    b988:	add	r1, r2
    b98a:	add	r2, r5
    b98c:	cmp	r3, r1
    b98e:	str	r2, [r0, #28]
    b990:	it	ge
    b992:	movge	r3, r1
    b994:	str	r3, [r0, #44]	; 0x2c
    b996:	lsrs	r3, r2, #31
    b998:	b.n	b878 <Panel_onKey@@Base+0x8c>
    b99a:	ldrsh.w	r1, [r0, #48]	; 0x30
    b99e:	ldr	r2, [r0, #28]
    b9a0:	cmp	r1, #0
    b9a2:	mov.w	r3, r2, lsr #31
    b9a6:	ble.w	b878 <Panel_onKey@@Base+0x8c>
    b9aa:	ldr	r6, [pc, #164]	; (ba50 <Panel_onKey@@Base+0x264>)
    b9ac:	movs	r7, #1
    b9ae:	ldr	r5, [r5, r6]
    b9b0:	strb.w	r7, [r0, #50]	; 0x32
    b9b4:	ldr	r5, [r5, #0]
    b9b6:	cmp	r5, #0
    b9b8:	it	ge
    b9ba:	subge	r1, r1, r5
    b9bc:	strh	r1, [r0, #48]	; 0x30
    b9be:	b.n	b878 <Panel_onKey@@Base+0x8c>
    b9c0:	ldr	r1, [r0, #36]	; 0x24
    b9c2:	movs	r3, #1
    b9c4:	ldr	r5, [r0, #12]
    b9c6:	ldr	r2, [r0, #28]
    b9c8:	subs	r1, r1, r5
    b9ca:	strb.w	r3, [r0, #50]	; 0x32
    b9ce:	bic.w	r1, r1, r1, asr #31
    b9d2:	lsrs	r3, r2, #31
    b9d4:	strh	r1, [r0, #48]	; 0x30
    b9d6:	b.n	b878 <Panel_onKey@@Base+0x8c>
    b9d8:	ldr	r3, [pc, #116]	; (ba50 <Panel_onKey@@Base+0x264>)
    b9da:	movs	r6, #1
    b9dc:	ldr	r2, [r0, #28]
    b9de:	ldr	r1, [r5, r3]
    b9e0:	ldrh	r5, [r0, #48]	; 0x30
    b9e2:	lsrs	r3, r2, #31
    b9e4:	strb.w	r6, [r0, #50]	; 0x32
    b9e8:	ldr	r1, [r1, #0]
    b9ea:	add	r1, r5
    b9ec:	strh	r1, [r0, #48]	; 0x30
    b9ee:	b.n	b878 <Panel_onKey@@Base+0x8c>
    b9f0:	ldr	r2, [r0, #28]
    b9f2:	adds	r2, #1
    b9f4:	str	r2, [r0, #28]
    b9f6:	lsrs	r3, r2, #31
    b9f8:	b.n	b878 <Panel_onKey@@Base+0x8c>
    b9fa:	ldr	r2, [r0, #28]
    b9fc:	subs	r2, #1
    b9fe:	str	r2, [r0, #28]
    ba00:	lsrs	r3, r2, #31
    ba02:	b.n	b878 <Panel_onKey@@Base+0x8c>
    ba04:	movs	r3, #0
    ba06:	str	r3, [r0, #28]
    ba08:	mov	r2, r3
    ba0a:	b.n	b878 <Panel_onKey@@Base+0x8c>
    ba0c:	ldr	r3, [pc, #60]	; (ba4c <Panel_onKey@@Base+0x260>)
    ba0e:	movs	r6, #1
    ba10:	ldr	r2, [r0, #28]
    ba12:	ldr	r1, [r5, r3]
    ba14:	ldr	r3, [r0, #44]	; 0x2c
    ba16:	strb.w	r6, [r0, #50]	; 0x32
    ba1a:	ldr	r1, [r1, #0]
    ba1c:	subs	r2, r2, r1
    ba1e:	subs	r3, r3, r1
    ba20:	str	r2, [r0, #28]
    ba22:	str	r3, [r0, #44]	; 0x2c
    ba24:	lsrs	r3, r2, #31
    ba26:	b.n	b878 <Panel_onKey@@Base+0x8c>
    ba28:	ldr	r1, [r0, #16]
    ba2a:	movs	r6, #1
    ba2c:	ldr	r3, [r0, #44]	; 0x2c
    ba2e:	ldr	r5, [r0, #28]
    ba30:	subs	r2, r1, #1
    ba32:	subs	r3, r3, r1
    ba34:	strb.w	r6, [r0, #50]	; 0x32
    ba38:	subs	r2, r5, r2
    ba3a:	str	r2, [r0, #28]
    ba3c:	orr.w	r3, r3, r3, asr #31
    ba40:	adds	r1, r3, r6
    ba42:	lsrs	r3, r2, #31
    ba44:	str	r1, [r0, #44]	; 0x2c
    ba46:	b.n	b878 <Panel_onKey@@Base+0x8c>
    ba48:	b.n	b474 <Panel_draw@@Base+0x104>
    ba4a:	movs	r1, r0
    ba4c:	lsls	r0, r0, #10
    ba4e:	movs	r0, r0
    ba50:	lsls	r0, r7, #9
    ba52:	movs	r0, r0
    ba54:	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
    ba58:	mov	r4, r2
    ba5a:	ldr	r2, [pc, #244]	; (bb50 <Panel_onKey@@Base+0x364>)
    ba5c:	sub	sp, #40	; 0x28
    ba5e:	ldr	r3, [pc, #244]	; (bb54 <Panel_onKey@@Base+0x368>)
    ba60:	mov	r5, r0
    ba62:	add	r2, pc
    ba64:	add	r0, sp, #24
    ba66:	mov	r6, r1
    ba68:	add	r1, sp, #20
    ba6a:	ldr	r3, [r2, r3]
    ba6c:	ldr	r3, [r3, #0]
    ba6e:	str	r3, [sp, #36]	; 0x24
    ba70:	mov.w	r3, #0
    ba74:	bl	150b0 <Battery_getData@@Base>
    ba78:	vmov.f64	d6, #240	; 0xbf800000 -1.0
    ba7c:	vldr	d7, [sp, #24]
    ba80:	vcmp.f64	d7, d6
    ba84:	vmrs	APSR_nzcv, fpscr
    ba88:	beq.n	bb02 <Panel_onKey@@Base+0x316>
    ba8a:	ldr	r3, [r5, #12]
    ba8c:	ldr	r2, [r5, #32]
    ba8e:	cmp	r3, #2
    ba90:	vstr	d7, [r2]
    ba94:	beq.n	bae0 <Panel_onKey@@Base+0x2f4>
    ba96:	ldr	r2, [sp, #20]
    ba98:	ldr	r3, [pc, #188]	; (bb58 <Panel_onKey@@Base+0x36c>)
    ba9a:	ldr	r1, [pc, #192]	; (bb5c <Panel_onKey@@Base+0x370>)
    ba9c:	cmp	r2, #1
    ba9e:	add	r3, pc
    baa0:	add	r1, pc
    baa2:	beq.n	baee <Panel_onKey@@Base+0x302>
    baa4:	cmp	r2, #0
    baa6:	bne.n	bb1e <Panel_onKey@@Base+0x332>
    baa8:	str	r3, [sp, #0]
    baaa:	mov	r0, r6
    baac:	vstr	d7, [sp, #8]
    bab0:	mov.w	r3, #4294967295	; 0xffffffff
    bab4:	movs	r2, #1
    bab6:	mov	r1, r4
    bab8:	blx	6c78 <__snprintf_chk@plt>
    babc:	cmp	r4, r0
    babe:	ite	gt
    bac0:	movgt	r4, #0
    bac2:	movle	r4, #1
    bac4:	orrs.w	r3, r4, r0, lsr #31
    bac8:	bne.n	bb3c <Panel_onKey@@Base+0x350>
    baca:	ldr	r2, [pc, #148]	; (bb60 <Panel_onKey@@Base+0x374>)
    bacc:	ldr	r3, [pc, #132]	; (bb54 <Panel_onKey@@Base+0x368>)
    bace:	add	r2, pc
    bad0:	ldr	r3, [r2, r3]
    bad2:	ldr	r2, [r3, #0]
    bad4:	ldr	r3, [sp, #36]	; 0x24
    bad6:	eors	r2, r3
    bad8:	bne.n	bb38 <Panel_onKey@@Base+0x34c>
    bada:	add	sp, #40	; 0x28
    badc:	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
    bae0:	ldr	r2, [sp, #20]
    bae2:	ldr	r3, [pc, #128]	; (bb64 <Panel_onKey@@Base+0x378>)
    bae4:	ldr	r1, [pc, #128]	; (bb68 <Panel_onKey@@Base+0x37c>)
    bae6:	cmp	r2, #1
    bae8:	add	r3, pc
    baea:	add	r1, pc
    baec:	bne.n	baa4 <Panel_onKey@@Base+0x2b8>
    baee:	str	r1, [sp, #0]
    baf0:	mov	r0, r6
    baf2:	vstr	d7, [sp, #8]
    baf6:	mov.w	r3, #4294967295	; 0xffffffff
    bafa:	mov	r1, r4
    bafc:	blx	6c78 <__snprintf_chk@plt>
    bb00:	b.n	babc <Panel_onKey@@Base+0x2d0>
    bb02:	ldr	r3, [r5, #32]
    bb04:	mov.w	r8, #0
    bb08:	ldr	r2, [pc, #96]	; (bb6c <Panel_onKey@@Base+0x380>)
    bb0a:	mov.w	r9, #0
    bb0e:	mov	r0, r6
    bb10:	mov	r1, r4
    bb12:	add	r2, pc
    bb14:	strd	r8, r9, [r3]
    bb18:	blx	6a60 <snprintf@plt>
    bb1c:	b.n	babc <Panel_onKey@@Base+0x2d0>
    bb1e:	ldr	r5, [pc, #80]	; (bb70 <Panel_onKey@@Base+0x384>)
    bb20:	mov	r0, r6
    bb22:	vstr	d7, [sp, #8]
    bb26:	mov.w	r3, #4294967295	; 0xffffffff
    bb2a:	add	r5, pc
    bb2c:	movs	r2, #1
    bb2e:	mov	r1, r4
    bb30:	str	r5, [sp, #0]
    bb32:	blx	6c78 <__snprintf_chk@plt>
    bb36:	b.n	babc <Panel_onKey@@Base+0x2d0>
    bb38:	blx	67d0 <__stack_chk_fail@plt>
    bb3c:	movs	r0, #1
    bb3e:	blx	6730 <curs_set@plt>
    bb42:	blx	6c48 <endwin@plt+0x4>
    bb46:	movs	r1, #0
    bb48:	movs	r0, #1
    bb4a:	blx	683c <err@plt>
    bb4e:	nop
    bb50:	b.n	c0a8 <Process_colorNumber@@Base+0x114>
    bb52:	movs	r1, r0
    bb54:	lsls	r0, r0, #9
    bb56:	movs	r0, r0
    bb58:	cbz	r6, bb7a <Process_compare@@Base+0x2>
    bb5a:	movs	r0, r0
    bb5c:	cbz	r0, bb82 <Process_compare@@Base+0xa>
    bb5e:	movs	r0, r0
    bb60:	b.n	bfe0 <Process_colorNumber@@Base+0x4c>
    bb62:	movs	r1, r0
    bb64:	cbz	r0, bb68 <Panel_onKey@@Base+0x37c>
    bb66:	movs	r0, r0
    bb68:	cbz	r2, bb72 <Panel_onKey@@Base+0x386>
    bb6a:	movs	r0, r0
    bb6c:	cbz	r2, bb78 <Process_compare@@Base>
    bb6e:	movs	r0, r0
    bb70:	cbz	r6, bb76 <Panel_onKey@@Base+0x38a>
    bb72:	movs	r0, r0
    bb74:	movs	r0, r0
	...

0000bb78 <Process_compare@@Base>:
    bb78:	ldr	r3, [r0, #4]
    bb7a:	ldrd	r2, r3, [r3, #48]	; 0x30
    bb7e:	cmp	r2, #1
    bb80:	sub.w	r3, r3, #2
    bb84:	itet	ne
    bb86:	movne	r2, r1
    bb88:	moveq	r2, r0
    bb8a:	movne	r1, r0
    bb8c:	cmp	r3, #50	; 0x32
    bb8e:	bhi.n	bbd0 <Process_compare@@Base+0x58>
    bb90:	tbb	[pc, r3]
    bb94:	movs	r6, #123	; 0x7b
    bb96:	strh	r7, [r0, #28]
    bb98:	str	r7, [r7, r1]
    bb9a:	subs	r4, r1, #1
    bb9c:	subs	r6, r0, #1
    bb9e:	subs	r0, r0, #1
    bba0:	subs	r6, r3, #0
    bba2:	subs	r6, r3, #0
    bba4:	subs	r0, #60	; 0x3c
    bba6:	subs	r6, r3, r0
    bba8:	subs	r6, r3, #0
    bbaa:	subs	r6, r3, #0
    bbac:	subs	r6, r3, #0
    bbae:	subs	r6, r3, #0
    bbb0:	subs	r6, r3, #0
    bbb2:	subs	r6, r3, #0
    bbb4:	subs	r6, r3, #0
    bbb6:	subs	r6, r3, #0
    bbb8:	ldr	r4, [r6, #16]
    bbba:	subs	r2, r4, #0
    bbbc:	subs	r6, r3, #0
    bbbe:	subs	r6, r3, #0
    bbc0:	strb	r5, [r4, r1]
    bbc2:	strb	r2, [r4, #4]
    bbc4:	strb	r5, [r5, #29]
    bbc6:	lsls	r1, r4, #1
    bbc8:	ldr	r0, [r2, #112]	; 0x70
    bbca:	ldr	r3, [r1, #112]	; 0x70
    bbcc:	cmp	r0, r3
    bbce:	bne.n	bbd4 <Process_compare@@Base+0x5c>
    bbd0:	ldr	r0, [r2, #16]
    bbd2:	ldr	r3, [r1, #16]
    bbd4:	subs	r0, r0, r3
    bbd6:	bx	lr
    bbd8:	ldr	r0, [r1, #120]	; 0x78
    bbda:	ldr	r3, [r2, #120]	; 0x78
    bbdc:	subs	r0, r0, r3
    bbde:	bx	lr
    bbe0:	ldrb.w	r3, [r2, #45]	; 0x2d
    bbe4:	ldrb.w	r0, [r1, #45]	; 0x2d
    bbe8:	cmp	r3, #73	; 0x49
    bbea:	it	eq
    bbec:	moveq.w	r3, #256	; 0x100
    bbf0:	cmp	r0, #73	; 0x49
    bbf2:	it	eq
    bbf4:	moveq.w	r0, #256	; 0x100
    bbf8:	subs	r0, r3, r0
    bbfa:	bx	lr
    bbfc:	ldr	r0, [r2, #76]	; 0x4c
    bbfe:	ldr	r3, [r1, #76]	; 0x4c
    bc00:	subs	r0, r0, r3
    bc02:	bx	lr
    bc04:	ldr	r0, [r2, #96]	; 0x60
    bc06:	ldr	r3, [r1, #96]	; 0x60
    bc08:	subs	r0, r0, r3
    bc0a:	bx	lr
    bc0c:	ldr	r0, [r2, #92]	; 0x5c
    bc0e:	ldr	r3, [r1, #92]	; 0x5c
    bc10:	subs	r0, r0, r3
    bc12:	bx	lr
    bc14:	ldr.w	r0, [r1, #132]	; 0x84
    bc18:	ldr.w	r3, [r2, #132]	; 0x84
    bc1c:	subs	r0, r0, r3
    bc1e:	bx	lr
    bc20:	ldr.w	r0, [r1, #128]	; 0x80
    bc24:	ldr.w	r3, [r2, #128]	; 0x80
    bc28:	subs	r0, r0, r3
    bc2a:	bx	lr
    bc2c:	ldr	r0, [r2, #64]	; 0x40
    bc2e:	ldr	r3, [r1, #64]	; 0x40
    bc30:	subs	r0, r0, r3
    bc32:	bx	lr
    bc34:	ldr	r0, [r2, #60]	; 0x3c
    bc36:	ldr	r3, [r1, #60]	; 0x3c
    bc38:	subs	r0, r0, r3
    bc3a:	bx	lr
    bc3c:	vldr	s14, [r1, #80]	; 0x50
    bc40:	vldr	s15, [r2, #80]	; 0x50
    bc44:	vcmpe.f32	s14, s15
    bc48:	vmrs	APSR_nzcv, fpscr
    bc4c:	ite	gt
    bc4e:	movgt	r0, #1
    bc50:	movle.w	r0, #4294967295	; 0xffffffff
    bc54:	bx	lr
    bc56:	ldr	r0, [r2, #24]
    bc58:	ldr	r3, [r1, #24]
    bc5a:	subs	r0, r0, r3
    bc5c:	bx	lr
    bc5e:	ldr	r0, [r2, #68]	; 0x44
    bc60:	ldr	r3, [r1, #68]	; 0x44
    bc62:	subs	r0, r0, r3
    bc64:	bx	lr
    bc66:	ldr	r0, [r1, #116]	; 0x74
    bc68:	ldr	r3, [r2, #116]	; 0x74
    bc6a:	subs	r0, r0, r3
    bc6c:	bx	lr
    bc6e:	ldr	r0, [r1, #8]
    bc70:	ldr	r3, [r2, #8]
    bc72:	subs	r0, r0, r3
    bc74:	bx	lr
    bc76:	ldr	r0, [r2, #88]	; 0x58
    bc78:	cbz	r0, bcb0 <Process_compare@@Base+0x138>
    bc7a:	ldr	r1, [r1, #88]	; 0x58
    bc7c:	cbz	r1, bcaa <Process_compare@@Base+0x132>
    bc7e:	b.w	66b0 <strcmp@plt>
    bc82:	ldr	r0, [r2, #100]	; 0x64
    bc84:	ldr	r3, [r1, #100]	; 0x64
    bc86:	subs	r0, r0, r3
    bc88:	bx	lr
    bc8a:	ldr	r1, [r1, #28]
    bc8c:	ldr	r0, [r2, #28]
    bc8e:	b.w	66b0 <strcmp@plt>
    bc92:	ldr	r0, [r2, #56]	; 0x38
    bc94:	ldr	r3, [r1, #56]	; 0x38
    bc96:	subs	r0, r0, r3
    bc98:	bx	lr
    bc9a:	ldr	r0, [r2, #52]	; 0x34
    bc9c:	ldr	r3, [r1, #52]	; 0x34
    bc9e:	subs	r0, r0, r3
    bca0:	bx	lr
    bca2:	ldr	r0, [r2, #20]
    bca4:	ldr	r3, [r1, #20]
    bca6:	subs	r0, r0, r3
    bca8:	bx	lr
    bcaa:	ldr	r1, [pc, #12]	; (bcb8 <Process_compare@@Base+0x140>)
    bcac:	add	r1, pc
    bcae:	b.n	bc7e <Process_compare@@Base+0x106>
    bcb0:	ldr	r0, [pc, #8]	; (bcbc <Process_compare@@Base+0x144>)
    bcb2:	add	r0, pc
    bcb4:	b.n	bc7a <Process_compare@@Base+0x102>
    bcb6:	nop
    bcb8:	add	r2, sp, #976	; 0x3d0
    bcba:	movs	r0, r0
    bcbc:	add	r2, sp, #952	; 0x3b8
	...

0000bcc0 <Process_display@@Base>:
    bcc0:	push	{r3, r4, r5, r6, r7, lr}
    bcc2:	mov	r4, r0
    bcc4:	ldr	r3, [r0, #4]
    bcc6:	mov	r0, r1
    bcc8:	mov	r6, r1
    bcca:	ldr	r7, [pc, #100]	; (bd30 <Process_display@@Base+0x70>)
    bccc:	ldr	r5, [r3, #28]
    bcce:	bl	d194 <RichString_prune@@Base>
    bcd2:	add	r7, pc
    bcd4:	ldr	r2, [r5, #0]
    bcd6:	cbz	r2, bcea <Process_display@@Base+0x2a>
    bcd8:	ldr	r3, [r4, #0]
    bcda:	mov	r1, r6
    bcdc:	mov	r0, r4
    bcde:	ldr	r3, [r3, #16]
    bce0:	blx	r3
    bce2:	ldr.w	r2, [r5, #4]!
    bce6:	cmp	r2, #0
    bce8:	bne.n	bcd8 <Process_display@@Base+0x18>
    bcea:	ldr	r3, [r4, #4]
    bcec:	ldrb.w	r3, [r3, #61]	; 0x3d
    bcf0:	cbz	r3, bcfe <Process_display@@Base+0x3e>
    bcf2:	ldr	r3, [pc, #64]	; (bd34 <Process_display@@Base+0x74>)
    bcf4:	ldr	r2, [r4, #68]	; 0x44
    bcf6:	add	r3, pc
    bcf8:	ldr	r3, [r3, #0]
    bcfa:	cmp	r2, r3
    bcfc:	bne.n	bd06 <Process_display@@Base+0x46>
    bcfe:	ldrb.w	r3, [r4, #46]	; 0x2e
    bd02:	cbnz	r3, bd1c <Process_display@@Base+0x5c>
    bd04:	pop	{r3, r4, r5, r6, r7, pc}
    bd06:	ldr	r3, [pc, #48]	; (bd38 <Process_display@@Base+0x78>)
    bd08:	mov	r0, r6
    bd0a:	ldr	r3, [r7, r3]
    bd0c:	ldr	r3, [r3, #0]
    bd0e:	ldr	r1, [r3, #76]	; 0x4c
    bd10:	bl	d1bc <RichString_setAttr@@Base>
    bd14:	ldrb.w	r3, [r4, #46]	; 0x2e
    bd18:	cmp	r3, #0
    bd1a:	beq.n	bd04 <Process_display@@Base+0x44>
    bd1c:	ldr	r3, [pc, #24]	; (bd38 <Process_display@@Base+0x78>)
    bd1e:	mov	r0, r6
    bd20:	ldr	r3, [r7, r3]
    bd22:	ldr	r3, [r3, #0]
    bd24:	ldr	r1, [r3, #80]	; 0x50
    bd26:	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bd2a:	b.w	d1bc <RichString_setAttr@@Base>
    bd2e:	nop
    bd30:	b.n	bda8 <Process_setupColumnWidths@@Base+0x6c>
    bd32:	movs	r1, r0
    bd34:	vaddl.s32	q8, d14, d1
    bd38:	lsls	r0, r6, #9
	...

0000bd3c <Process_setupColumnWidths@@Base>:
    bd3c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bd40:	sub	sp, #16
    bd42:	bl	11f7c <Platform_getMaxPid@@Base>
    bd46:	ldr	r6, [pc, #148]	; (bddc <Process_setupColumnWidths@@Base+0xa0>)
    bd48:	add	r6, pc
    bd4a:	adds	r3, r0, #1
    bd4c:	beq.n	bdc2 <Process_setupColumnWidths@@Base+0x86>
    bd4e:	vmov	s15, r0
    bd52:	vcvt.f64.s32	d0, s15
    bd56:	blx	6948 <log10@plt>
    bd5a:	blx	6b00 <ceil@plt>
    bd5e:	ldr	r3, [pc, #128]	; (bde0 <Process_setupColumnWidths@@Base+0xa4>)
    bd60:	ldr	r4, [r6, r3]
    bd62:	ldr	r3, [r4, #4]
    bd64:	vcvt.s32.f64	s15, d0
    bd68:	vmov	r7, s15
    bd6c:	cbz	r3, bdaa <Process_setupColumnWidths@@Base+0x6e>
    bd6e:	ldr	r5, [pc, #116]	; (bde4 <Process_setupColumnWidths@@Base+0xa8>)
    bd70:	ldr.w	r8, [pc, #116]	; bde8 <Process_setupColumnWidths@@Base+0xac>
    bd74:	add	r5, pc
    bd76:	add	r8, pc
    bd78:	str	r3, [sp, #8]
    bd7a:	movs	r2, #1
    bd7c:	mov.w	r3, #4294967295	; 0xffffffff
    bd80:	movs	r1, #20
    bd82:	mov	r0, r5
    bd84:	str	r7, [sp, #4]
    bd86:	str.w	r8, [sp]
    bd8a:	blx	6c78 <__snprintf_chk@plt>
    bd8e:	cmp	r0, #19
    bd90:	bhi.n	bdc8 <Process_setupColumnWidths@@Base+0x8c>
    bd92:	ldr	r2, [pc, #88]	; (bdec <Process_setupColumnWidths@@Base+0xb0>)
    bd94:	adds	r4, #8
    bd96:	ldr.w	r1, [r4, #-8]
    bd9a:	ldr	r3, [r6, r2]
    bd9c:	add.w	r3, r3, r1, lsl #4
    bda0:	str	r5, [r3, #4]
    bda2:	adds	r5, #20
    bda4:	ldr	r3, [r4, #4]
    bda6:	cmp	r3, #0
    bda8:	bne.n	bd78 <Process_setupColumnWidths@@Base+0x3c>
    bdaa:	ldr	r0, [pc, #68]	; (bdf0 <Process_setupColumnWidths@@Base+0xb4>)
    bdac:	movs	r3, #20
    bdae:	ldr	r4, [pc, #68]	; (bdf4 <Process_setupColumnWidths@@Base+0xb8>)
    bdb0:	mov	r1, r3
    bdb2:	add	r0, pc
    bdb4:	movs	r2, #1
    bdb6:	add	r4, pc
    bdb8:	adds	r0, #4
    bdba:	str	r7, [sp, #4]
    bdbc:	str	r4, [sp, #0]
    bdbe:	blx	6c78 <__snprintf_chk@plt>
    bdc2:	add	sp, #16
    bdc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bdc8:	movs	r0, #1
    bdca:	blx	6730 <curs_set@plt>
    bdce:	blx	6c48 <endwin@plt+0x4>
    bdd2:	movs	r1, #0
    bdd4:	movs	r0, #1
    bdd6:	blx	683c <err@plt>
    bdda:	nop
    bddc:	svc	196	; 0xc4
    bdde:	movs	r1, r0
    bde0:	lsls	r4, r7, #9
    bde2:	movs	r0, r0
    bde4:			; <UNDEFINED> instruction: 0xfa340001
    bde8:	add	r6, sp, #888	; 0x378
    bdea:	movs	r0, r0
    bdec:	lsls	r4, r1, #10
    bdee:	movs	r0, r0
    bdf0:	vhadd.s<illegal width 64>	d0, d2, d1
    bdf4:	add	r6, sp, #664	; 0x298
	...

0000bdf8 <Process_humanNumber@@Base>:
    bdf8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    bdfc:	sub	sp, #36	; 0x24
    bdfe:	ldr	r5, [pc, #360]	; (bf68 <Process_humanNumber@@Base+0x170>)
    be00:	cmp	r2, #0
    be02:	ldr	r4, [pc, #360]	; (bf6c <Process_humanNumber@@Base+0x174>)
    be04:	movw	r2, #38528	; 0x9680
    be08:	add	r5, pc
    be0a:	ldr	r3, [pc, #356]	; (bf70 <Process_humanNumber@@Base+0x178>)
    be0c:	ldr	r6, [pc, #356]	; (bf74 <Process_humanNumber@@Base+0x17c>)
    be0e:	movt	r2, #152	; 0x98
    be12:	ldr	r4, [r5, r4]
    be14:	add	r3, pc
    be16:	mov	r5, r0
    be18:	ldr	r4, [r4, #0]
    be1a:	str	r4, [sp, #28]
    be1c:	mov.w	r4, #0
    be20:	mov	r4, r1
    be22:	ldr	r6, [r3, r6]
    be24:	ldr	r3, [r6, #0]
    be26:	ldr	r7, [r3, #72]	; 0x48
    be28:	ldr	r6, [r3, #40]	; 0x28
    be2a:	ldr	r3, [r3, #84]	; 0x54
    be2c:	itte	eq
    be2e:	moveq	r6, r7
    be30:	moveq	r8, r7
    be32:	movne	r8, r3
    be34:	cmp	r1, r2
    be36:	bcc.n	be6a <Process_humanNumber@@Base+0x72>
    be38:	movw	r3, #57599	; 0xe0ff
    be3c:	movt	r3, #1525	; 0x5f5
    be40:	cmp	r1, r3
    be42:	bls.n	beb4 <Process_humanNumber@@Base+0xbc>
    be44:	lsrs	r4, r1, #20
    be46:	ldr	r2, [pc, #304]	; (bf78 <Process_humanNumber@@Base+0x180>)
    be48:	str	r4, [sp, #4]
    be4a:	add	r4, sp, #16
    be4c:	add	r2, pc
    be4e:	movs	r3, #11
    be50:	str	r2, [sp, #0]
    be52:	mov	r0, r4
    be54:	movs	r2, #1
    be56:	movs	r1, #10
    be58:	blx	6c78 <__snprintf_chk@plt>
    be5c:	mov	r2, r4
    be5e:	mov	r1, r6
    be60:	mov	r0, r5
    be62:	movs	r3, #6
    be64:	bl	d2cc <RichString_appendn@@Base>
    be68:	b.n	be9e <Process_humanNumber@@Base+0xa6>
    be6a:	movw	r3, #34463	; 0x869f
    be6e:	movt	r3, #1
    be72:	cmp	r1, r3
    be74:	bhi.n	bee2 <Process_humanNumber@@Base+0xea>
    be76:	cmp.w	r1, #1000	; 0x3e8
    be7a:	bcs.n	bf08 <Process_humanNumber@@Base+0x110>
    be7c:	str	r4, [sp, #4]
    be7e:	add	r4, sp, #16
    be80:	ldr	r1, [pc, #248]	; (bf7c <Process_humanNumber@@Base+0x184>)
    be82:	movs	r3, #11
    be84:	movs	r2, #1
    be86:	mov	r0, r4
    be88:	add	r1, pc
    be8a:	str	r1, [sp, #0]
    be8c:	movs	r1, #10
    be8e:	blx	6c78 <__snprintf_chk@plt>
    be92:	mov	r2, r4
    be94:	mov	r1, r7
    be96:	mov	r0, r5
    be98:	movs	r3, #6
    be9a:	bl	d2cc <RichString_appendn@@Base>
    be9e:	ldr	r2, [pc, #224]	; (bf80 <Process_humanNumber@@Base+0x188>)
    bea0:	ldr	r3, [pc, #200]	; (bf6c <Process_humanNumber@@Base+0x174>)
    bea2:	add	r2, pc
    bea4:	ldr	r3, [r2, r3]
    bea6:	ldr	r2, [r3, #0]
    bea8:	ldr	r3, [sp, #28]
    beaa:	eors	r2, r3
    beac:	bne.n	bf64 <Process_humanNumber@@Base+0x16c>
    beae:	add	sp, #36	; 0x24
    beb0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    beb4:	vmov	s14, r1
    beb8:	vcvt.f64.s32	d7, d7, #20
    bebc:	add	r4, sp, #16
    bebe:	ldr	r0, [pc, #196]	; (bf84 <Process_humanNumber@@Base+0x18c>)
    bec0:	movs	r3, #11
    bec2:	movs	r2, #1
    bec4:	movs	r1, #10
    bec6:	add	r0, pc
    bec8:	str	r0, [sp, #0]
    beca:	mov	r0, r4
    becc:	vstr	d7, [sp, #8]
    bed0:	blx	6c78 <__snprintf_chk@plt>
    bed4:	mov	r2, r4
    bed6:	mov	r1, r6
    bed8:	mov	r3, r0
    beda:	mov	r0, r5
    bedc:	bl	d2cc <RichString_appendn@@Base>
    bee0:	b.n	be9e <Process_humanNumber@@Base+0xa6>
    bee2:	lsrs	r4, r1, #10
    bee4:	ldr	r2, [pc, #160]	; (bf88 <Process_humanNumber@@Base+0x190>)
    bee6:	str	r4, [sp, #4]
    bee8:	add	r4, sp, #16
    beea:	add	r2, pc
    beec:	movs	r3, #11
    beee:	str	r2, [sp, #0]
    bef0:	mov	r0, r4
    bef2:	movs	r2, #1
    bef4:	movs	r1, #10
    bef6:	blx	6c78 <__snprintf_chk@plt>
    befa:	mov	r2, r4
    befc:	mov	r1, r8
    befe:	mov	r0, r5
    bf00:	movs	r3, #6
    bf02:	bl	d2cc <RichString_appendn@@Base>
    bf06:	b.n	be9e <Process_humanNumber@@Base+0xa6>
    bf08:	movw	r6, #19923	; 0x4dd3
    bf0c:	movt	r6, #4194	; 0x1062
    bf10:	add.w	r9, sp, #16
    bf14:	ldr	r3, [pc, #116]	; (bf8c <Process_humanNumber@@Base+0x194>)
    bf16:	umull	r2, r6, r6, r1
    bf1a:	add	r3, pc
    bf1c:	mov	r0, r9
    bf1e:	str	r3, [sp, #0]
    bf20:	movs	r2, #1
    bf22:	movs	r3, #11
    bf24:	movs	r1, #10
    bf26:	lsrs	r6, r6, #6
    bf28:	str	r6, [sp, #4]
    bf2a:	blx	6c78 <__snprintf_chk@plt>
    bf2e:	mov	r1, r8
    bf30:	mov	r2, r9
    bf32:	mov	r0, r5
    bf34:	movs	r3, #2
    bf36:	bl	d2cc <RichString_appendn@@Base>
    bf3a:	mov.w	r1, #1000	; 0x3e8
    bf3e:	mls	r4, r1, r6, r4
    bf42:	ldr	r6, [pc, #76]	; (bf90 <Process_humanNumber@@Base+0x198>)
    bf44:	mov	r0, r9
    bf46:	movs	r3, #11
    bf48:	add	r6, pc
    bf4a:	movs	r2, #1
    bf4c:	movs	r1, #10
    bf4e:	strd	r6, r4, [sp]
    bf52:	blx	6c78 <__snprintf_chk@plt>
    bf56:	mov	r2, r9
    bf58:	mov	r1, r7
    bf5a:	mov	r0, r5
    bf5c:	movs	r3, #4
    bf5e:	bl	d2cc <RichString_appendn@@Base>
    bf62:	b.n	be9e <Process_humanNumber@@Base+0xa6>
    bf64:	blx	67d0 <__stack_chk_fail@plt>
    bf68:	svc	4
    bf6a:	movs	r1, r0
    bf6c:	lsls	r0, r0, #9
    bf6e:	movs	r0, r0
    bf70:	udf	#248	; 0xf8
    bf72:	movs	r1, r0
    bf74:	lsls	r0, r6, #9
    bf76:	movs	r0, r0
    bf78:	add	r6, sp, #96	; 0x60
    bf7a:	movs	r0, r0
    bf7c:	add	r6, sp, #32
    bf7e:	movs	r0, r0
    bf80:	udf	#106	; 0x6a
    bf82:	movs	r1, r0
    bf84:	add	r5, sp, #664	; 0x298
    bf86:	movs	r0, r0
    bf88:	add	r5, sp, #568	; 0x238
    bf8a:	movs	r0, r0
    bf8c:	add	r5, sp, #408	; 0x198
    bf8e:	movs	r0, r0
    bf90:	add	r5, sp, #256	; 0x100
	...

0000bf94 <Process_colorNumber@@Base>:
    bf94:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bf98:	sub	sp, #40	; 0x28
    bf9a:	ldr	r5, [pc, #332]	; (c0e8 <Process_colorNumber@@Base+0x154>)
    bf9c:	mov	r6, r2
    bf9e:	ldr	r4, [pc, #332]	; (c0ec <Process_colorNumber@@Base+0x158>)
    bfa0:	mov	r7, r3
    bfa2:	add	r5, pc
    bfa4:	ldr	r1, [pc, #328]	; (c0f0 <Process_colorNumber@@Base+0x15c>)
    bfa6:	ldrb.w	ip, [sp, #72]	; 0x48
    bfaa:	ldr	r4, [r5, r4]
    bfac:	add	r1, pc
    bfae:	ldr	r5, [pc, #324]	; (c0f4 <Process_colorNumber@@Base+0x160>)
    bfb0:	ldr	r4, [r4, #0]
    bfb2:	str	r4, [sp, #36]	; 0x24
    bfb4:	mov.w	r4, #0
    bfb8:	mov	r2, r1
    bfba:	mov	r4, r0
    bfbc:	ldr	r1, [r1, r5]
    bfbe:	ldr	r3, [r1, #0]
    bfc0:	ldrd	r5, lr, [r3, #72]	; 0x48
    bfc4:	ldr.w	r9, [r3, #40]	; 0x28
    bfc8:	ldr.w	r8, [r3, #84]	; 0x54
    bfcc:	mov	sl, lr
    bfce:	cmp.w	ip, #0
    bfd2:	bne.n	bfda <Process_colorNumber@@Base+0x46>
    bfd4:	mov	sl, r5
    bfd6:	mov	r8, r5
    bfd8:	mov	r9, r5
    bfda:	adds	r3, r7, #1
    bfdc:	it	eq
    bfde:	cmpeq.w	r6, #4294967295	; 0xffffffff
    bfe2:	beq.n	c0aa <Process_colorNumber@@Base+0x116>
    bfe4:	add	r3, pc, #248	; (adr r3, c0e0 <Process_colorNumber@@Base+0x14c>)
    bfe6:	ldrd	r2, r3, [r3]
    bfea:	cmp	r3, r7
    bfec:	it	eq
    bfee:	cmpeq	r2, r6
    bff0:	bcc.n	c054 <Process_colorNumber@@Base+0xc0>
    bff2:	strd	r6, r7, [sp, #8]
    bff6:	add	r6, sp, #20
    bff8:	ldr	r1, [pc, #252]	; (c0f8 <Process_colorNumber@@Base+0x164>)
    bffa:	movs	r3, #14
    bffc:	movs	r2, #1
    bffe:	mov	r0, r6
    c000:	add	r1, pc
    c002:	str	r1, [sp, #0]
    c004:	movs	r1, #13
    c006:	blx	6c78 <__snprintf_chk@plt>
    c00a:	mov	r2, r6
    c00c:	mov	r1, r9
    c00e:	movs	r3, #2
    c010:	mov	r0, r4
    c012:	bl	d2cc <RichString_appendn@@Base>
    c016:	add.w	r2, sp, #22
    c01a:	mov	r1, r8
    c01c:	movs	r3, #3
    c01e:	mov	r0, r4
    c020:	bl	d2cc <RichString_appendn@@Base>
    c024:	add.w	r2, sp, #25
    c028:	mov	r1, r5
    c02a:	movs	r3, #3
    c02c:	mov	r0, r4
    c02e:	bl	d2cc <RichString_appendn@@Base>
    c032:	add	r2, sp, #28
    c034:	mov	r1, sl
    c036:	mov	r0, r4
    c038:	movs	r3, #4
    c03a:	bl	d2cc <RichString_appendn@@Base>
    c03e:	ldr	r2, [pc, #188]	; (c0fc <Process_colorNumber@@Base+0x168>)
    c040:	ldr	r3, [pc, #168]	; (c0ec <Process_colorNumber@@Base+0x158>)
    c042:	add	r2, pc
    c044:	ldr	r3, [r2, r3]
    c046:	ldr	r2, [r3, #0]
    c048:	ldr	r3, [sp, #36]	; 0x24
    c04a:	eors	r2, r3
    c04c:	bne.n	c0c6 <Process_colorNumber@@Base+0x132>
    c04e:	add	sp, #40	; 0x28
    c050:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c054:	mov	r0, r6
    c056:	mov.w	r2, #1000	; 0x3e8
    c05a:	movs	r3, #0
    c05c:	mov	r1, r7
    c05e:	bl	15c40 <Battery_getData@@Base+0xb90>
    c062:	add	r6, sp, #20
    c064:	mov	r3, r1
    c066:	ldr	r1, [pc, #152]	; (c100 <Process_colorNumber@@Base+0x16c>)
    c068:	mov	r2, r0
    c06a:	mov	r0, r6
    c06c:	strd	r2, r3, [sp, #8]
    c070:	add	r1, pc
    c072:	movs	r3, #14
    c074:	str	r1, [sp, #0]
    c076:	movs	r2, #1
    c078:	movs	r1, #13
    c07a:	blx	6c78 <__snprintf_chk@plt>
    c07e:	cmp	r0, #12
    c080:	bne.n	c0ca <Process_colorNumber@@Base+0x136>
    c082:	mov	r2, r6
    c084:	mov	r1, r9
    c086:	mov	r0, r4
    c088:	movs	r3, #5
    c08a:	bl	d2cc <RichString_appendn@@Base>
    c08e:	add.w	r2, sp, #25
    c092:	mov	r1, r8
    c094:	mov	r0, r4
    c096:	movs	r3, #3
    c098:	bl	d2cc <RichString_appendn@@Base>
    c09c:	add	r2, sp, #28
    c09e:	mov	r1, r5
    c0a0:	mov	r0, r4
    c0a2:	movs	r3, #4
    c0a4:	bl	d2cc <RichString_appendn@@Base>
    c0a8:	b.n	c03e <Process_colorNumber@@Base+0xaa>
    c0aa:	ldr	r3, [pc, #88]	; (c104 <Process_colorNumber@@Base+0x170>)
    c0ac:	add	r6, sp, #20
    c0ae:	add	r3, pc
    c0b0:	mov	r5, r6
    c0b2:	ldmia	r3, {r0, r1, r2, r3}
    c0b4:	stmia	r5!, {r0, r1, r2}
    c0b6:	mov	r2, r6
    c0b8:	strb	r3, [r5, #0]
    c0ba:	mov	r1, lr
    c0bc:	mov	r0, r4
    c0be:	movs	r3, #12
    c0c0:	bl	d2cc <RichString_appendn@@Base>
    c0c4:	b.n	c03e <Process_colorNumber@@Base+0xaa>
    c0c6:	blx	67d0 <__stack_chk_fail@plt>
    c0ca:	movs	r0, #1
    c0cc:	blx	6730 <curs_set@plt>
    c0d0:	blx	6c48 <endwin@plt+0x4>
    c0d4:	movs	r1, #0
    c0d6:	movs	r0, #1
    c0d8:	blx	683c <err@plt>
    c0dc:	nop.w
    c0e0:	b.n	b8e4 <Panel_onKey@@Base+0xf8>
    c0e2:	strb	r3, [r1, r0]
    c0e4:	movs	r2, r0
    c0e6:	movs	r0, r0
    c0e8:	ble.n	c1c0 <Process_printTime@@Base+0xb8>
    c0ea:	movs	r1, r0
    c0ec:	lsls	r0, r0, #9
    c0ee:	movs	r0, r0
    c0f0:	ble.n	c1b4 <Process_printTime@@Base+0xac>
    c0f2:	movs	r1, r0
    c0f4:	lsls	r0, r6, #9
    c0f6:	movs	r0, r0
    c0f8:	add	r4, sp, #704	; 0x2c0
    c0fa:	movs	r0, r0
    c0fc:	bgt.n	c094 <Process_colorNumber@@Base+0x100>
    c0fe:	movs	r1, r0
    c100:	add	r4, sp, #224	; 0xe0
    c102:	movs	r0, r0
    c104:	add	r3, sp, #936	; 0x3a8
	...

0000c108 <Process_printTime@@Base>:
    c108:	ldr.w	ip, [pc, #380]	; c288 <Process_printTime@@Base+0x180>
    c10c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c110:	add	ip, pc
    c112:	ldr	r6, [pc, #376]	; (c28c <Process_printTime@@Base+0x184>)
    c114:	mov	r4, r2
    c116:	mov	r5, r3
    c118:	sub	sp, #44	; 0x2c
    c11a:	movs	r3, #0
    c11c:	mov	r7, r0
    c11e:	ldr.w	r6, [ip, r6]
    c122:	movw	r2, #32320	; 0x7e40
    c126:	mov	r0, r4
    c128:	movt	r2, #5
    c12c:	mov	r1, r5
    c12e:	ldr	r6, [r6, #0]
    c130:	str	r6, [sp, #36]	; 0x24
    c132:	mov.w	r6, #0
    c136:	bl	15c40 <Battery_getData@@Base+0xb90>
    c13a:	add	r3, pc, #324	; (adr r3, c280 <Process_printTime@@Base+0x178>)
    c13c:	ldrd	r2, r3, [r3]
    c140:	ldr.w	sl, [pc, #332]	; c290 <Process_printTime@@Base+0x188>
    c144:	cmp	r3, r5
    c146:	it	eq
    c148:	cmpeq	r2, r4
    c14a:	add	sl, pc
    c14c:	mov	r9, r0
    c14e:	mov	r8, r1
    c150:	bcc.n	c234 <Process_printTime@@Base+0x12c>
    c152:	movs	r2, #100	; 0x64
    c154:	movs	r3, #0
    c156:	mov	r0, r4
    c158:	mov	r1, r5
    c15a:	bl	15c40 <Battery_getData@@Base+0xb90>
    c15e:	movs	r2, #60	; 0x3c
    c160:	movs	r3, #0
    c162:	mov	fp, r1
    c164:	mov	r6, r0
    c166:	bl	15c40 <Battery_getData@@Base+0xb90>
    c16a:	movs	r2, #60	; 0x3c
    c16c:	movs	r3, #0
    c16e:	bl	15c40 <Battery_getData@@Base+0xb90>
    c172:	mov	r1, fp
    c174:	mov	r0, r6
    c176:	movs	r3, #0
    c178:	mov	ip, r2
    c17a:	movs	r2, #60	; 0x3c
    c17c:	str.w	ip, [sp, #20]
    c180:	bl	15c40 <Battery_getData@@Base+0xb90>
    c184:	movw	r0, #32319	; 0x7e3f
    c188:	movs	r1, #0
    c18a:	movt	r0, #5
    c18e:	cmp	r1, r5
    c190:	it	eq
    c192:	cmpeq	r0, r4
    c194:	mov	fp, r2
    c196:	bcc.n	c1e6 <Process_printTime@@Base+0xde>
    c198:	movs	r0, #100	; 0x64
    c19a:	ldr	r3, [sp, #20]
    c19c:	mls	r4, r0, r6, r4
    c1a0:	ldr	r1, [pc, #240]	; (c294 <Process_printTime@@Base+0x18c>)
    c1a2:	add	r5, sp, #24
    c1a4:	str	r2, [sp, #8]
    c1a6:	add	r1, pc
    c1a8:	str	r3, [sp, #4]
    c1aa:	str	r1, [sp, #0]
    c1ac:	movs	r3, #11
    c1ae:	movs	r2, #1
    c1b0:	mov	r0, r5
    c1b2:	movs	r1, #10
    c1b4:	str	r4, [sp, #12]
    c1b6:	blx	6c78 <__snprintf_chk@plt>
    c1ba:	cmp	r0, #9
    c1bc:	bne.n	c264 <Process_printTime@@Base+0x15c>
    c1be:	ldr	r3, [pc, #216]	; (c298 <Process_printTime@@Base+0x190>)
    c1c0:	ldr.w	r4, [sl, r3]
    c1c4:	ldr	r3, [r4, #0]
    c1c6:	mov	r2, r5
    c1c8:	mov	r0, r7
    c1ca:	ldr	r1, [r3, #4]
    c1cc:	bl	d1e4 <RichString_append@@Base>
    c1d0:	ldr	r2, [pc, #200]	; (c29c <Process_printTime@@Base+0x194>)
    c1d2:	ldr	r3, [pc, #184]	; (c28c <Process_printTime@@Base+0x184>)
    c1d4:	add	r2, pc
    c1d6:	ldr	r3, [r2, r3]
    c1d8:	ldr	r2, [r3, #0]
    c1da:	ldr	r3, [sp, #36]	; 0x24
    c1dc:	eors	r2, r3
    c1de:	bne.n	c276 <Process_printTime@@Base+0x16e>
    c1e0:	add	sp, #44	; 0x2c
    c1e2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c1e6:	ldr	r2, [pc, #184]	; (c2a0 <Process_printTime@@Base+0x198>)
    c1e8:	add	r5, sp, #24
    c1ea:	movs	r3, #11
    c1ec:	movs	r1, #10
    c1ee:	add	r2, pc
    c1f0:	mov	r0, r5
    c1f2:	str	r2, [sp, #0]
    c1f4:	movs	r2, #1
    c1f6:	str.w	r9, [sp, #8]
    c1fa:	str.w	r8, [sp, #12]
    c1fe:	blx	6c78 <__snprintf_chk@plt>
    c202:	cmp	r0, #9
    c204:	bgt.n	c264 <Process_printTime@@Base+0x15c>
    c206:	ldr	r3, [pc, #144]	; (c298 <Process_printTime@@Base+0x190>)
    c208:	mov	r2, r5
    c20a:	mov	r0, r7
    c20c:	ldr.w	r4, [sl, r3]
    c210:	ldr	r3, [r4, #0]
    c212:	ldr	r1, [r3, #40]	; 0x28
    c214:	bl	d1e4 <RichString_append@@Base>
    c218:	ldr	r2, [sp, #20]
    c21a:	ldr	r1, [pc, #136]	; (c2a4 <Process_printTime@@Base+0x19c>)
    c21c:	movs	r3, #11
    c21e:	mov	r0, r5
    c220:	str.w	fp, [sp, #8]
    c224:	add	r1, pc
    c226:	str	r2, [sp, #4]
    c228:	str	r1, [sp, #0]
    c22a:	movs	r2, #1
    c22c:	movs	r1, #10
    c22e:	blx	6c78 <__snprintf_chk@plt>
    c232:	b.n	c1c4 <Process_printTime@@Base+0xbc>
    c234:	ldr	r2, [pc, #112]	; (c2a8 <Process_printTime@@Base+0x1a0>)
    c236:	add	r4, sp, #24
    c238:	str	r0, [sp, #8]
    c23a:	movs	r3, #11
    c23c:	add	r2, pc
    c23e:	str	r1, [sp, #12]
    c240:	str	r2, [sp, #0]
    c242:	mov	r0, r4
    c244:	movs	r2, #1
    c246:	movs	r1, #10
    c248:	blx	6c78 <__snprintf_chk@plt>
    c24c:	cmp	r0, #9
    c24e:	bne.n	c264 <Process_printTime@@Base+0x15c>
    c250:	ldr	r3, [pc, #68]	; (c298 <Process_printTime@@Base+0x190>)
    c252:	mov	r2, r4
    c254:	mov	r0, r7
    c256:	ldr.w	r3, [sl, r3]
    c25a:	ldr	r3, [r3, #0]
    c25c:	ldr	r1, [r3, #40]	; 0x28
    c25e:	bl	d1e4 <RichString_append@@Base>
    c262:	b.n	c1d0 <Process_printTime@@Base+0xc8>
    c264:	movs	r0, #1
    c266:	blx	6730 <curs_set@plt>
    c26a:	blx	6c48 <endwin@plt+0x4>
    c26e:	movs	r1, #0
    c270:	movs	r0, #1
    c272:	blx	683c <err@plt>
    c276:	blx	67d0 <__stack_chk_fail@plt>
    c27a:	nop
    c27c:	nop.w
    c280:	str	r7, [r7, r3]
    c282:	lsls	r5, r4, #8
    c284:	movs	r0, r0
    c286:	movs	r0, r0
    c288:	blt.n	c284 <Process_printTime@@Base+0x17c>
    c28a:	movs	r1, r0
    c28c:	lsls	r0, r0, #9
    c28e:	movs	r0, r0
    c290:	blt.n	c218 <Process_printTime@@Base+0x110>
    c292:	movs	r1, r0
    c294:	add	r3, sp, #184	; 0xb8
    c296:	movs	r0, r0
    c298:	lsls	r0, r6, #9
    c29a:	movs	r0, r0
    c29c:	blt.n	c310 <Process_writeField@@Base+0x64>
    c29e:	movs	r1, r0
    c2a0:	add	r2, sp, #840	; 0x348
    c2a2:	movs	r0, r0
    c2a4:	add	r2, sp, #656	; 0x290
    c2a6:	movs	r0, r0
    c2a8:	add	r2, sp, #496	; 0x1f0
	...

0000c2ac <Process_writeField@@Base>:
    c2ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2b0:	subs	r2, #1
    c2b2:	vpush	{d8}
    c2b6:	ldr.w	r5, [pc, #1176]	; c750 <Process_writeField@@Base+0x4a4>
    c2ba:	ldr.w	r4, [pc, #1176]	; c754 <Process_writeField@@Base+0x4a8>
    c2be:	add	r5, pc
    c2c0:	ldr.w	r3, [pc, #1172]	; c758 <Process_writeField@@Base+0x4ac>
    c2c4:	sub	sp, #324	; 0x144
    c2c6:	ldr.w	r7, [pc, #1172]	; c75c <Process_writeField@@Base+0x4b0>
    c2ca:	ldr	r4, [r5, r4]
    c2cc:	add	r6, sp, #60	; 0x3c
    c2ce:	add	r3, pc
    c2d0:	mov	r5, r1
    c2d2:	ldr	r4, [r4, #0]
    c2d4:	str	r4, [sp, #316]	; 0x13c
    c2d6:	mov.w	r4, #0
    c2da:	movs	r4, #0
    c2dc:	strb.w	r4, [r6, #255]	; 0xff
    c2e0:	mov	r4, r0
    c2e2:	ldr	r7, [r3, r7]
    c2e4:	ldr	r0, [r0, #4]
    c2e6:	ldr	r1, [r7, #0]
    c2e8:	str	r7, [sp, #20]
    c2ea:	ldrb.w	r8, [r0, #66]	; 0x42
    c2ee:	ldr	r7, [r1, #4]
    c2f0:	cmp	r2, #51	; 0x33
    c2f2:	bhi.n	c360 <Process_writeField@@Base+0xb4>
    c2f4:	tbh	[pc, r2, lsl #1]
    c2f8:	lsls	r3, r4, #7
    c2fa:	lsls	r6, r4, #5
    c2fc:	lsls	r3, r1, #5
    c2fe:	lsls	r5, r0, #5
    c300:	lsls	r1, r5, #7
    c302:	lsls	r6, r0, #7
    c304:	lsls	r4, r1, #7
    c306:	lsls	r5, r5, #4
    c308:	movs	r4, r6
    c30a:	lsls	r4, r7, #4
    c30c:	movs	r4, r6
    c30e:	lsls	r3, r6, #4
    c310:	movs	r4, r6
    c312:	movs	r4, r6
    c314:	movs	r4, r6
    c316:	movs	r4, r6
    c318:	movs	r4, r6
    c31a:	lsls	r0, r4, #4
    c31c:	lsls	r0, r1, #4
    c31e:	movs	r4, r6
    c320:	lsls	r4, r7, #3
    c322:	movs	r4, r6
    c324:	movs	r4, r6
    c326:	movs	r4, r6
    c328:	movs	r4, r6
    c32a:	movs	r4, r6
    c32c:	movs	r4, r6
    c32e:	movs	r4, r6
    c330:	movs	r4, r6
    c332:	movs	r4, r6
    c334:	movs	r4, r6
    c336:	movs	r4, r6
    c338:	movs	r4, r6
    c33a:	movs	r4, r6
    c33c:	movs	r4, r6
    c33e:	movs	r4, r6
    c340:	movs	r4, r6
    c342:	lsls	r3, r5, #3
    c344:	lsls	r0, r5, #3
    c346:	lsls	r6, r2, #3
    c348:	movs	r4, r6
    c34a:	movs	r4, r6
    c34c:	movs	r4, r6
    c34e:	movs	r4, r6
    c350:	movs	r4, r6
    c352:	lsls	r0, r2, #3
    c354:	lsls	r5, r5, #2
    c356:	lsls	r1, r3, #2
    c358:	lsls	r1, r7, #1
    c35a:	lsls	r3, r6, #1
    c35c:	lsls	r6, r4, #1
    c35e:	lsls	r6, r1, #1
    c360:	ldr	r3, [pc, #1020]	; (c760 <Process_writeField@@Base+0x4b4>)
    c362:	add	r3, pc
    c364:	ldr	r3, [r3, #0]
    c366:	strh	r3, [r6, #0]
    c368:	lsrs	r3, r3, #16
    c36a:	strb.w	r3, [sp, #62]	; 0x3e
    c36e:	mov	r2, r6
    c370:	mov	r1, r7
    c372:	mov	r0, r5
    c374:	bl	d1e4 <RichString_append@@Base>
    c378:	ldr	r2, [pc, #1000]	; (c764 <Process_writeField@@Base+0x4b8>)
    c37a:	ldr	r3, [pc, #984]	; (c754 <Process_writeField@@Base+0x4a8>)
    c37c:	add	r2, pc
    c37e:	ldr	r3, [r2, r3]
    c380:	ldr	r2, [r3, #0]
    c382:	ldr	r3, [sp, #316]	; 0x13c
    c384:	eors	r2, r3
    c386:	bne.w	c960 <Process_writeField@@Base+0x6b4>
    c38a:	add	sp, #324	; 0x144
    c38c:	vpop	{d8}
    c390:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c394:	ldr	r0, [pc, #976]	; (c768 <Process_writeField@@Base+0x4bc>)
    c396:	mov.w	r3, #256	; 0x100
    c39a:	ldr	r4, [r4, #24]
    c39c:	add	r0, pc
    c39e:	adds	r0, #4
    c3a0:	movs	r2, #1
    c3a2:	str	r0, [sp, #0]
    c3a4:	movs	r1, #255	; 0xff
    c3a6:	mov	r0, r6
    c3a8:	str	r4, [sp, #4]
    c3aa:	blx	6c78 <__snprintf_chk@plt>
    c3ae:	cmp	r0, #254	; 0xfe
    c3b0:	bls.n	c36e <Process_writeField@@Base+0xc2>
    c3b2:	movs	r0, #1
    c3b4:	blx	6730 <curs_set@plt>
    c3b8:	blx	6c48 <endwin@plt+0x4>
    c3bc:	movs	r1, #0
    c3be:	movs	r0, #1
    c3c0:	blx	683c <err@plt>
    c3c4:	ldr	r0, [r4, #100]	; 0x64
    c3c6:	mov.w	r3, #256	; 0x100
    c3ca:	ldr	r4, [pc, #928]	; (c76c <Process_writeField@@Base+0x4c0>)
    c3cc:	add	r4, pc
    c3ce:	str	r0, [sp, #4]
    c3d0:	movs	r2, #1
    c3d2:	movs	r1, #255	; 0xff
    c3d4:	mov	r0, r6
    c3d6:	str	r4, [sp, #0]
    c3d8:	blx	6c78 <__snprintf_chk@plt>
    c3dc:	b.n	c36e <Process_writeField@@Base+0xc2>
    c3de:	ldrd	r2, r3, [r4, #8]
    c3e2:	mov	r0, r5
    c3e4:	bl	c108 <Process_printTime@@Base>
    c3e8:	b.n	c378 <Process_writeField@@Base+0xcc>
    c3ea:	ldr	r3, [pc, #900]	; (c770 <Process_writeField@@Base+0x4c4>)
    c3ec:	ldr	r0, [r4, #68]	; 0x44
    c3ee:	add	r3, pc
    c3f0:	ldr	r2, [r4, #88]	; 0x58
    c3f2:	ldr	r3, [r3, #0]
    c3f4:	cmp	r0, r3
    c3f6:	it	ne
    c3f8:	ldrne	r7, [r1, #76]	; 0x4c
    c3fa:	cmp	r2, #0
    c3fc:	beq.w	c8ea <Process_writeField@@Base+0x63e>
    c400:	ldr	r4, [pc, #880]	; (c774 <Process_writeField@@Base+0x4c8>)
    c402:	mov.w	r3, #256	; 0x100
    c406:	str	r2, [sp, #4]
    c408:	movs	r1, #255	; 0xff
    c40a:	add	r4, pc
    c40c:	movs	r2, #1
    c40e:	mov	r0, r6
    c410:	str	r4, [sp, #0]
    c412:	blx	6c78 <__snprintf_chk@plt>
    c416:	cmp	r0, #254	; 0xfe
    c418:	bhi.n	c3b2 <Process_writeField@@Base+0x106>
    c41a:	ldrb	r3, [r6, #9]
    c41c:	cmp	r3, #0
    c41e:	beq.n	c36e <Process_writeField@@Base+0xc2>
    c420:	movs	r2, #32
    c422:	movs	r3, #0
    c424:	strb	r2, [r6, #9]
    c426:	strb	r3, [r6, #10]
    c428:	b.n	c36e <Process_writeField@@Base+0xc2>
    c42a:	vldr	s14, [r4, #84]	; 0x54
    c42e:	vldr	d6, [pc, #784]	; c740 <Process_writeField@@Base+0x494>
    c432:	vcvt.f64.f32	d7, s14
    c436:	vcmpe.f64	d7, d6
    c43a:	vmrs	APSR_nzcv, fpscr
    c43e:	ble.w	c6dc <Process_writeField@@Base+0x430>
    c442:	ldr	r3, [pc, #820]	; (c778 <Process_writeField@@Base+0x4cc>)
    c444:	add	r3, pc
    c446:	ldmia.w	r3, {r0, r1}
    c44a:	str	r0, [r6, #0]
    c44c:	strh.w	r1, [sp, #64]	; 0x40
    c450:	b.n	c36e <Process_writeField@@Base+0xc2>
    c452:	vldr	s15, [r4, #80]	; 0x50
    c456:	vldr	d5, [pc, #752]	; c748 <Process_writeField@@Base+0x49c>
    c45a:	vcvt.f64.f32	d6, s15
    c45e:	vcmpe.f64	d6, d5
    c462:	vmrs	APSR_nzcv, fpscr
    c466:	bgt.w	c8d0 <Process_writeField@@Base+0x624>
    c46a:	vldr	d5, [pc, #724]	; c740 <Process_writeField@@Base+0x494>
    c46e:	vcmpe.f64	d6, d5
    c472:	vmrs	APSR_nzcv, fpscr
    c476:	ble.w	c8ba <Process_writeField@@Base+0x60e>
    c47a:	vcvt.u32.f32	s15, s15
    c47e:	ldr	r0, [pc, #764]	; (c77c <Process_writeField@@Base+0x4d0>)
    c480:	add	r0, pc
    c482:	str	r0, [sp, #0]
    c484:	mov.w	r3, #256	; 0x100
    c488:	vstr	s15, [sp, #4]
    c48c:	movs	r2, #1
    c48e:	movs	r1, #255	; 0xff
    c490:	mov	r0, r6
    c492:	blx	6c78 <__snprintf_chk@plt>
    c496:	b.n	c36e <Process_writeField@@Base+0xc2>
    c498:	ldr	r0, [r4, #68]	; 0x44
    c49a:	mov.w	r3, #256	; 0x100
    c49e:	ldr	r4, [pc, #736]	; (c780 <Process_writeField@@Base+0x4d4>)
    c4a0:	add	r4, pc
    c4a2:	b.n	c3ce <Process_writeField@@Base+0x122>
    c4a4:	ldr	r4, [r4, #120]	; 0x78
    c4a6:	movs	r0, #30
    c4a8:	blx	67dc <sysconf@plt>
    c4ac:	mov	r2, r8
    c4ae:	addw	r3, r0, #1023	; 0x3ff
    c4b2:	ands.w	r3, r3, r0, asr #32
    c4b6:	it	cc
    c4b8:	movcc	r3, r0
    c4ba:	mov	r0, r5
    c4bc:	asrs	r3, r3, #10
    c4be:	mul.w	r1, r4, r3
    c4c2:	bl	bdf8 <Process_humanNumber@@Base>
    c4c6:	b.n	c378 <Process_writeField@@Base+0xcc>
    c4c8:	ldr	r4, [r4, #116]	; 0x74
    c4ca:	movs	r0, #30
    c4cc:	b.n	c4a8 <Process_writeField@@Base+0x1fc>
    c4ce:	ldrb.w	r3, [r0, #56]	; 0x38
    c4d2:	ldr	r2, [r4, #76]	; 0x4c
    c4d4:	cbnz	r3, c4d8 <Process_writeField@@Base+0x22c>
    c4d6:	adds	r2, #1
    c4d8:	ldr	r4, [pc, #680]	; (c784 <Process_writeField@@Base+0x4d8>)
    c4da:	add	r4, pc
    c4dc:	str	r2, [sp, #4]
    c4de:	mov.w	r3, #256	; 0x100
    c4e2:	movs	r2, #1
    c4e4:	movs	r1, #255	; 0xff
    c4e6:	mov	r0, r6
    c4e8:	str	r4, [sp, #0]
    c4ea:	blx	6c78 <__snprintf_chk@plt>
    c4ee:	b.n	c36e <Process_writeField@@Base+0xc2>
    c4f0:	ldr	r2, [pc, #660]	; (c788 <Process_writeField@@Base+0x4dc>)
    c4f2:	add.w	r3, r4, #104	; 0x68
    c4f6:	movs	r1, #255	; 0xff
    c4f8:	mov	r0, r6
    c4fa:	add	r2, pc
    c4fc:	blx	6a60 <snprintf@plt>
    c500:	cmp	r0, #254	; 0xfe
    c502:	bls.w	c36e <Process_writeField@@Base+0xc2>
    c506:	b.n	c3b2 <Process_writeField@@Base+0x106>
    c508:	ldr	r0, [r4, #96]	; 0x60
    c50a:	mov.w	r3, #256	; 0x100
    c50e:	ldr.w	ip, [pc, #636]	; c78c <Process_writeField@@Base+0x4e0>
    c512:	movs	r2, #1
    c514:	movs	r1, #255	; 0xff
    c516:	add	ip, pc
    c518:	str	r0, [sp, #4]
    c51a:	str.w	ip, [sp]
    c51e:	mov	r0, r6
    c520:	blx	6c78 <__snprintf_chk@plt>
    c524:	ldr	r3, [r4, #96]	; 0x60
    c526:	cmp	r3, #0
    c528:	blt.w	c8b2 <Process_writeField@@Base+0x606>
    c52c:	beq.w	c36e <Process_writeField@@Base+0xc2>
    c530:	ldr	r3, [sp, #20]
    c532:	ldr	r3, [r3, #0]
    c534:	ldr	r7, [r3, #108]	; 0x6c
    c536:	b.n	c36e <Process_writeField@@Base+0xc2>
    c538:	ldr	r2, [r4, #92]	; 0x5c
    c53a:	cmn.w	r2, #99	; 0x63
    c53e:	bge.w	c6d6 <Process_writeField@@Base+0x42a>
    c542:	ldr	r3, [pc, #588]	; (c790 <Process_writeField@@Base+0x4e4>)
    c544:	add	r3, pc
    c546:	ldmia.w	r3, {r0, r1}
    c54a:	str	r0, [r6, #0]
    c54c:	strb.w	r1, [sp, #64]	; 0x40
    c550:	b.n	c36e <Process_writeField@@Base+0xc2>
    c552:	ldr	r0, [pc, #576]	; (c794 <Process_writeField@@Base+0x4e8>)
    c554:	mov.w	r3, #256	; 0x100
    c558:	ldr	r4, [r4, #64]	; 0x40
    c55a:	add	r0, pc
    c55c:	b.n	c39e <Process_writeField@@Base+0xf2>
    c55e:	str.w	r8, [sp]
    c562:	mov	r0, r5
    c564:	ldr.w	r2, [r4, #132]	; 0x84
    c568:	movs	r3, #0
    c56a:	bl	bf94 <Process_colorNumber@@Base>
    c56e:	b.n	c378 <Process_writeField@@Base+0xcc>
    c570:	str.w	r8, [sp]
    c574:	mov	r0, r5
    c576:	ldr.w	r2, [r4, #128]	; 0x80
    c57a:	movs	r3, #0
    c57c:	bl	bf94 <Process_colorNumber@@Base>
    c580:	b.n	c378 <Process_writeField@@Base+0xcc>
    c582:	ldr	r0, [pc, #532]	; (c798 <Process_writeField@@Base+0x4ec>)
    c584:	mov.w	r3, #256	; 0x100
    c588:	ldr	r4, [r4, #20]
    c58a:	add	r0, pc
    c58c:	b.n	c39e <Process_writeField@@Base+0xf2>
    c58e:	ldrb.w	r0, [r4, #45]	; 0x2d
    c592:	mov.w	r3, #256	; 0x100
    c596:	ldr.w	ip, [pc, #516]	; c79c <Process_writeField@@Base+0x4f0>
    c59a:	movs	r2, #1
    c59c:	movs	r1, #255	; 0xff
    c59e:	add	ip, pc
    c5a0:	str	r0, [sp, #4]
    c5a2:	str.w	ip, [sp]
    c5a6:	mov	r0, r6
    c5a8:	blx	6c78 <__snprintf_chk@plt>
    c5ac:	ldrb.w	r3, [r4, #45]	; 0x2d
    c5b0:	cmp	r3, #68	; 0x44
    c5b2:	beq.w	c8c8 <Process_writeField@@Base+0x61c>
    c5b6:	cmp	r3, #82	; 0x52
    c5b8:	bne.w	c36e <Process_writeField@@Base+0xc2>
    c5bc:	ldr	r3, [sp, #20]
    c5be:	ldr	r3, [r3, #0]
    c5c0:	ldr	r7, [r3, #92]	; 0x5c
    c5c2:	b.n	c36e <Process_writeField@@Base+0xc2>
    c5c4:	ldr	r1, [r1, #100]	; 0x64
    c5c6:	ldrb.w	r2, [r0, #67]	; 0x43
    c5ca:	str	r1, [sp, #28]
    c5cc:	cmp	r2, #0
    c5ce:	bne.w	c8da <Process_writeField@@Base+0x62e>
    c5d2:	ldrb.w	r2, [r0, #58]	; 0x3a
    c5d6:	cmp	r2, #0
    c5d8:	beq.w	c6fc <Process_writeField@@Base+0x450>
    c5dc:	ldr	r2, [r4, #36]	; 0x24
    c5de:	str	r2, [sp, #24]
    c5e0:	cmp	r2, #0
    c5e2:	beq.w	c6fc <Process_writeField@@Base+0x450>
    c5e6:	ldr	r1, [sp, #24]
    c5e8:	movs	r2, #0
    c5ea:	cmp	r1, #0
    c5ec:	it	lt
    c5ee:	neglt	r1, r1
    c5f0:	mov	r8, r1
    c5f2:	mov	r1, r2
    c5f4:	lsr.w	r0, r8, r2
    c5f8:	adds	r2, #1
    c5fa:	tst.w	r0, #1
    c5fe:	it	ne
    c600:	movne	r1, r2
    c602:	cmp	r2, #32
    c604:	bne.n	c5f4 <Process_writeField@@Base+0x348>
    c606:	cmp	r1, #1
    c608:	ble.w	c952 <Process_writeField@@Base+0x6a6>
    c60c:	ldr.w	ip, [pc, #400]	; c7a0 <Process_writeField@@Base+0x4f4>
    c610:	subs	r1, #1
    c612:	ldr	r2, [pc, #400]	; (c7a4 <Process_writeField@@Base+0x4f8>)
    c614:	mov.w	r9, #255	; 0xff
    c618:	ldr	r0, [pc, #396]	; (c7a8 <Process_writeField@@Base+0x4fc>)
    c61a:	mov	fp, r6
    c61c:	add	r2, pc
    c61e:	str	r2, [sp, #36]	; 0x24
    c620:	ldr.w	r3, [r3, ip]
    c624:	add	r0, pc
    c626:	strd	r7, r4, [sp, #40]	; 0x28
    c62a:	mov.w	sl, #0
    c62e:	strd	r5, r6, [sp, #48]	; 0x30
    c632:	vmov	s16, r0
    c636:	mov	r6, r9
    c638:	mov	r4, r1
    c63a:	ldr.w	r9, [sp, #36]	; 0x24
    c63e:	mov	r7, r3
    c640:	str	r3, [sp, #32]
    c642:	b.n	c66e <Process_writeField@@Base+0x3c2>
    c644:	ldr.w	ip, [r7]
    c648:	mov.w	r3, #4294967295	; 0xffffffff
    c64c:	movs	r2, #1
    c64e:	mov	r1, r6
    c650:	mov	r0, fp
    c652:	ldr.w	r5, [ip, #4]
    c656:	strd	r9, r5, [sp]
    c65a:	blx	6c78 <__snprintf_chk@plt>
    c65e:	add.w	sl, sl, #1
    c662:	add	fp, r0
    c664:	cmp	r4, sl
    c666:	sub.w	r6, r6, r0
    c66a:	beq.w	c80a <Process_writeField@@Base+0x55e>
    c66e:	asr.w	r3, r8, sl
    c672:	lsls	r3, r3, #31
    c674:	bmi.n	c644 <Process_writeField@@Base+0x398>
    c676:	vmov	r2, s16
    c67a:	mov	r1, r6
    c67c:	mov	r0, fp
    c67e:	blx	6a60 <snprintf@plt>
    c682:	b.n	c65e <Process_writeField@@Base+0x3b2>
    c684:	ldr	r0, [pc, #292]	; (c7ac <Process_writeField@@Base+0x500>)
    c686:	mov.w	r3, #256	; 0x100
    c68a:	ldr	r4, [r4, #56]	; 0x38
    c68c:	add	r0, pc
    c68e:	b.n	c39e <Process_writeField@@Base+0xf2>
    c690:	ldr	r0, [r4, #60]	; 0x3c
    c692:	mov.w	r3, #256	; 0x100
    c696:	ldr	r4, [pc, #280]	; (c7b0 <Process_writeField@@Base+0x504>)
    c698:	movs	r2, #1
    c69a:	lsrs	r1, r0, #12
    c69c:	uxtb.w	ip, r0
    c6a0:	bic.w	r1, r1, #255	; 0xff
    c6a4:	add	r4, pc
    c6a6:	orr.w	r1, r1, ip
    c6aa:	ubfx	r0, r0, #8, #12
    c6ae:	str	r4, [sp, #0]
    c6b0:	strd	r0, r1, [sp, #4]
    c6b4:	movs	r1, #255	; 0xff
    c6b6:	mov	r0, r6
    c6b8:	blx	6c78 <__snprintf_chk@plt>
    c6bc:	b.n	c36e <Process_writeField@@Base+0xc2>
    c6be:	ldr	r0, [pc, #244]	; (c7b4 <Process_writeField@@Base+0x508>)
    c6c0:	mov.w	r3, #256	; 0x100
    c6c4:	ldr	r4, [r4, #16]
    c6c6:	add	r0, pc
    c6c8:	b.n	c39e <Process_writeField@@Base+0xf2>
    c6ca:	ldr	r0, [pc, #236]	; (c7b8 <Process_writeField@@Base+0x50c>)
    c6cc:	mov.w	r3, #256	; 0x100
    c6d0:	ldr	r4, [r4, #52]	; 0x34
    c6d2:	add	r0, pc
    c6d4:	b.n	c39e <Process_writeField@@Base+0xf2>
    c6d6:	ldr	r4, [pc, #228]	; (c7bc <Process_writeField@@Base+0x510>)
    c6d8:	add	r4, pc
    c6da:	b.n	c4dc <Process_writeField@@Base+0x230>
    c6dc:	ldr	r4, [pc, #224]	; (c7c0 <Process_writeField@@Base+0x514>)
    c6de:	mov.w	r3, #256	; 0x100
    c6e2:	vstr	d7, [sp, #8]
    c6e6:	add	r4, pc
    c6e8:	movs	r2, #1
    c6ea:	movs	r1, #255	; 0xff
    c6ec:	mov	r0, r6
    c6ee:	str	r4, [sp, #0]
    c6f0:	blx	6c78 <__snprintf_chk@plt>
    c6f4:	cmp	r0, #254	; 0xfe
    c6f6:	ble.w	c36e <Process_writeField@@Base+0xc2>
    c6fa:	b.n	c3b2 <Process_writeField@@Base+0x106>
    c6fc:	ldrb.w	r3, [r0, #65]	; 0x41
    c700:	ldr	r6, [r5, #0]
    c702:	ldr	r2, [r4, #28]
    c704:	cmp	r3, #0
    c706:	beq.w	c90a <Process_writeField@@Base+0x65e>
    c70a:	ldr.w	lr, [r4, #40]	; 0x28
    c70e:	cmp.w	lr, #0
    c712:	it	le
    c714:	movle.w	r8, #0
    c718:	ble.w	c938 <Process_writeField@@Base+0x68c>
    c71c:	mov.w	r8, #0
    c720:	add.w	ip, r2, #4294967295	; 0xffffffff
    c724:	mov	r3, r8
    c726:	b.n	c732 <Process_writeField@@Base+0x486>
    c728:	cmp	r1, #58	; 0x3a
    c72a:	beq.n	c7e2 <Process_writeField@@Base+0x536>
    c72c:	cmp	r3, lr
    c72e:	bge.w	c938 <Process_writeField@@Base+0x68c>
    c732:	ldrb.w	r1, [ip, #1]!
    c736:	adds	r3, #1
    c738:	cmp	r1, #47	; 0x2f
    c73a:	bne.n	c728 <Process_writeField@@Base+0x47c>
    c73c:	mov	r8, r3
    c73e:	b.n	c72c <Process_writeField@@Base+0x480>
    c740:	ldr	r1, [sp, #616]	; 0x268
    c742:	ldr	r1, [sp, #612]	; 0x264
    c744:	ldrsb.w	r4, [r9, #88]	; 0x58
    c748:	adds	r3, #51	; 0x33
    c74a:	adds	r3, #51	; 0x33
    c74c:	subs	r7, #51	; 0x33
    c74e:	lsls	r7, r1
    c750:	bge.n	c7f0 <Process_writeField@@Base+0x544>
    c752:	movs	r1, r0
    c754:	lsls	r0, r0, #9
    c756:	movs	r0, r0
    c758:	bge.n	c7d8 <Process_writeField@@Base+0x52c>
    c75a:	movs	r1, r0
    c75c:	lsls	r0, r6, #9
    c75e:	movs	r0, r0
    c760:	add	r1, sp, #968	; 0x3c8
    c762:	movs	r0, r0
    c764:	bls.n	c688 <Process_writeField@@Base+0x3dc>
    c766:	movs	r1, r0
    c768:	strd	r0, r0, [r8, #-4]
    c76c:	add	r1, sp, #320	; 0x140
    c76e:	movs	r0, r0
    c770:	ldrd	r0, r0, [r6], #4
    c774:	add	r1, sp, #232	; 0xe8
    c776:	movs	r0, r0
    c778:	add	r0, sp, #736	; 0x2e0
    c77a:	movs	r0, r0
    c77c:	add	r0, sp, #432	; 0x1b0
    c77e:	movs	r0, r0
    c780:	add	r0, sp, #272	; 0x110
    c782:	movs	r0, r0
    c784:	add	r0, sp, #328	; 0x148
    c786:	movs	r0, r0
    c788:			; <UNDEFINED> instruction: 0xb732
    c78a:	movs	r0, r0
    c78c:	add	r7, pc, #1016	; (adr r7, cb88 <Process_pidCompare@@Base+0x3c>)
    c78e:	movs	r0, r0
    c790:	add	r7, pc, #896	; (adr r7, cb14 <Process_setPriority@@Base+0x14>)
    c792:	movs	r0, r0
    c794:	b.n	c6ac <Process_writeField@@Base+0x400>
    c796:	movs	r1, r0
    c798:	b.n	c650 <Process_writeField@@Base+0x3a4>
    c79a:	movs	r1, r0
    c79c:	add	r7, pc, #600	; (adr r7, c9f8 <Process_outputRate@@Base+0x80>)
    c79e:	movs	r0, r0
    c7a0:	lsls	r0, r4, #9
    c7a2:	movs	r0, r0
    c7a4:	add	r6, pc, #928	; (adr r6, cb48 <Process_sendSignal@@Base+0x4>)
    c7a6:	movs	r0, r0
    c7a8:	add	r5, pc, #768	; (adr r5, caac <Process_outputRate@@Base+0x134>)
    c7aa:	movs	r0, r0
    c7ac:	b.n	c460 <Process_writeField@@Base+0x1b4>
    c7ae:	movs	r1, r0
    c7b0:	add	r6, pc, #592	; (adr r6, ca04 <Process_outputRate@@Base+0x8c>)
    c7b2:	movs	r0, r0
    c7b4:	b.n	c3f4 <Process_writeField@@Base+0x148>
    c7b6:	movs	r1, r0
    c7b8:	b.n	c3e0 <Process_writeField@@Base+0x134>
    c7ba:	movs	r1, r0
    c7bc:	add	r6, pc, #240	; (adr r6, c8b0 <Process_writeField@@Base+0x604>)
    c7be:	movs	r0, r0
    c7c0:	add	r6, pc, #56	; (adr r6, c7fc <Process_writeField@@Base+0x550>)
    c7c2:	movs	r0, r0
    c7c4:	ldrb.w	r1, [lr, #59]	; 0x3b
    c7c8:	cmp	r1, #0
    c7ca:	bne.w	c906 <Process_writeField@@Base+0x65a>
    c7ce:	ldr.w	ip, [r4, #40]	; 0x28
    c7d2:	cmp.w	ip, #0
    c7d6:	it	le
    c7d8:	movle	r9, r1
    c7da:	bgt.n	c892 <Process_writeField@@Base+0x5e6>
    c7dc:	add	r2, r9
    c7de:	sub.w	r3, ip, r9
    c7e2:	add.w	r8, r6, #4294967295	; 0xffffffff
    c7e6:	add	r8, r3
    c7e8:	mov	r1, r7
    c7ea:	mov	r0, r5
    c7ec:	bl	d1e4 <RichString_append@@Base>
    c7f0:	ldr	r3, [r4, #4]
    c7f2:	ldrb.w	r3, [r3, #65]	; 0x41
    c7f6:	cmp	r3, #0
    c7f8:	beq.w	c378 <Process_writeField@@Base+0xcc>
    c7fc:	ldr	r1, [sp, #28]
    c7fe:	mov	r3, r8
    c800:	mov	r2, r6
    c802:	mov	r0, r5
    c804:	bl	d128 <RichString_setAttrn@@Base>
    c808:	b.n	c378 <Process_writeField@@Base+0xcc>
    c80a:	mov	r9, r6
    c80c:	ldr	r7, [sp, #40]	; 0x28
    c80e:	ldrd	r4, r5, [sp, #44]	; 0x2c
    c812:	mov	r1, r9
    c814:	ldr	r6, [sp, #52]	; 0x34
    c816:	ldr	r2, [sp, #24]
    c818:	ldr	r3, [sp, #32]
    c81a:	cmp	r2, #0
    c81c:	ldr	r3, [r3, #0]
    c81e:	it	ge
    c820:	movge	r0, #8
    c822:	bge.n	c830 <Process_writeField@@Base+0x584>
    c824:	ldr	r2, [r4, #4]
    c826:	ldr	r2, [r2, #48]	; 0x30
    c828:	cmp	r2, #1
    c82a:	ite	eq
    c82c:	moveq	r0, #12
    c82e:	movne	r0, #16
    c830:	ldrb.w	r2, [r4, #47]	; 0x2f
    c834:	ldr.w	ip, [r3, r0]
    c838:	cmp	r2, #0
    c83a:	beq.n	c902 <Process_writeField@@Base+0x656>
    c83c:	ldr	r3, [r3, #24]
    c83e:	ldr	r2, [pc, #292]	; (c964 <Process_writeField@@Base+0x6b8>)
    c840:	mov	r0, fp
    c842:	str	r3, [sp, #8]
    c844:	mov.w	r3, #4294967295	; 0xffffffff
    c848:	add	r2, pc
    c84a:	str.w	ip, [sp, #4]
    c84e:	str	r2, [sp, #0]
    c850:	movs	r2, #1
    c852:	blx	6c78 <__snprintf_chk@plt>
    c856:	cmp	r9, r0
    c858:	ite	gt
    c85a:	movgt.w	r9, #0
    c85e:	movle.w	r9, #1
    c862:	orrs.w	r9, r9, r0, lsr #31
    c866:	bne.w	c3b2 <Process_writeField@@Base+0x106>
    c86a:	ldr	r3, [sp, #20]
    c86c:	mov	r2, r6
    c86e:	mov	r0, r5
    c870:	ldr	r3, [r3, #0]
    c872:	ldr	r1, [r3, #88]	; 0x58
    c874:	bl	d1e4 <RichString_append@@Base>
    c878:	ldr.w	lr, [r4, #4]
    c87c:	ldr	r6, [r5, #0]
    c87e:	ldr	r2, [r4, #28]
    c880:	ldrb.w	r3, [lr, #65]	; 0x41
    c884:	cmp	r3, #0
    c886:	beq.n	c7c4 <Process_writeField@@Base+0x518>
    c888:	ldr.w	ip, [r4, #40]	; 0x28
    c88c:	cmp.w	ip, #0
    c890:	ble.n	c92a <Process_writeField@@Base+0x67e>
    c892:	mov.w	r9, #0
    c896:	subs	r0, r2, #1
    c898:	mov	r3, r9
    c89a:	b.n	c8a4 <Process_writeField@@Base+0x5f8>
    c89c:	cmp	r1, #58	; 0x3a
    c89e:	beq.n	c7e2 <Process_writeField@@Base+0x536>
    c8a0:	cmp	r3, ip
    c8a2:	bge.n	c92a <Process_writeField@@Base+0x67e>
    c8a4:	ldrb.w	r1, [r0, #1]!
    c8a8:	adds	r3, #1
    c8aa:	cmp	r1, #47	; 0x2f
    c8ac:	bne.n	c89c <Process_writeField@@Base+0x5f0>
    c8ae:	mov	r9, r3
    c8b0:	b.n	c8a0 <Process_writeField@@Base+0x5f4>
    c8b2:	ldr	r3, [sp, #20]
    c8b4:	ldr	r3, [r3, #0]
    c8b6:	ldr	r7, [r3, #104]	; 0x68
    c8b8:	b.n	c36e <Process_writeField@@Base+0xc2>
    c8ba:	ldr	r4, [pc, #172]	; (c968 <Process_writeField@@Base+0x6bc>)
    c8bc:	mov.w	r3, #256	; 0x100
    c8c0:	vstr	d6, [sp, #8]
    c8c4:	add	r4, pc
    c8c6:	b.n	c6e8 <Process_writeField@@Base+0x43c>
    c8c8:	ldr	r3, [sp, #20]
    c8ca:	ldr	r3, [r3, #0]
    c8cc:	ldr	r7, [r3, #96]	; 0x60
    c8ce:	b.n	c36e <Process_writeField@@Base+0xc2>
    c8d0:	ldr	r0, [pc, #152]	; (c96c <Process_writeField@@Base+0x6c0>)
    c8d2:	vcvt.u32.f32	s15, s15
    c8d6:	add	r0, pc
    c8d8:	b.n	c482 <Process_writeField@@Base+0x1d6>
    c8da:	mov	r0, r4
    c8dc:	str	r3, [sp, #24]
    c8de:	bl	12cf8 <Process_isThread@@Base>
    c8e2:	ldr	r3, [sp, #24]
    c8e4:	cbnz	r0, c944 <Process_writeField@@Base+0x698>
    c8e6:	ldr	r0, [r4, #4]
    c8e8:	b.n	c5d2 <Process_writeField@@Base+0x326>
    c8ea:	ldr	r4, [pc, #132]	; (c970 <Process_writeField@@Base+0x6c4>)
    c8ec:	mov.w	r3, #256	; 0x100
    c8f0:	str	r0, [sp, #4]
    c8f2:	movs	r2, #1
    c8f4:	add	r4, pc
    c8f6:	movs	r1, #255	; 0xff
    c8f8:	mov	r0, r6
    c8fa:	str	r4, [sp, #0]
    c8fc:	blx	6c78 <__snprintf_chk@plt>
    c900:	b.n	c41a <Process_writeField@@Base+0x16e>
    c902:	ldr	r3, [r3, #20]
    c904:	b.n	c83e <Process_writeField@@Base+0x592>
    c906:	mov	r8, r3
    c908:	b.n	c7e8 <Process_writeField@@Base+0x53c>
    c90a:	ldrb.w	r1, [r0, #59]	; 0x3b
    c90e:	cmp	r1, #0
    c910:	bne.n	c906 <Process_writeField@@Base+0x65a>
    c912:	ldr.w	lr, [r4, #40]	; 0x28
    c916:	cmp.w	lr, #0
    c91a:	it	le
    c91c:	movle	r8, r1
    c91e:	bgt.w	c71c <Process_writeField@@Base+0x470>
    c922:	add	r2, r8
    c924:	sub.w	r3, lr, r8
    c928:	b.n	c7e2 <Process_writeField@@Base+0x536>
    c92a:	ldrb.w	r3, [lr, #59]	; 0x3b
    c92e:	cmp	r3, #0
    c930:	beq.w	c7dc <Process_writeField@@Base+0x530>
    c934:	add	r6, r9
    c936:	b.n	c7de <Process_writeField@@Base+0x532>
    c938:	ldrb.w	r3, [r0, #59]	; 0x3b
    c93c:	cmp	r3, #0
    c93e:	beq.n	c922 <Process_writeField@@Base+0x676>
    c940:	add	r6, r8
    c942:	b.n	c924 <Process_writeField@@Base+0x678>
    c944:	ldr	r2, [sp, #20]
    c946:	ldr	r0, [r4, #4]
    c948:	ldr	r2, [r2, #0]
    c94a:	ldrd	r7, r2, [r2, #112]	; 0x70
    c94e:	str	r2, [sp, #28]
    c950:	b.n	c5d2 <Process_writeField@@Base+0x326>
    c952:	ldr	r2, [pc, #32]	; (c974 <Process_writeField@@Base+0x6c8>)
    c954:	movs	r1, #255	; 0xff
    c956:	mov	r9, r1
    c958:	mov	fp, r6
    c95a:	ldr	r3, [r3, r2]
    c95c:	str	r3, [sp, #32]
    c95e:	b.n	c816 <Process_writeField@@Base+0x56a>
    c960:	blx	67d0 <__stack_chk_fail@plt>
    c964:	add	r4, pc, #784	; (adr r4, cc78 <Process_pidCompare@@Base+0x12c>)
    c966:	movs	r0, r0
    c968:	add	r4, pc, #192	; (adr r4, ca2c <Process_outputRate@@Base+0xb4>)
    c96a:	movs	r0, r0
    c96c:	add	r4, pc, #56	; (adr r4, c9a8 <Process_outputRate@@Base+0x30>)
    c96e:	movs	r0, r0
    c970:	add	r4, pc, #352	; (adr r4, cad4 <Process_init@@Base+0x18>)
    c972:	movs	r0, r0
    c974:	lsls	r0, r4, #9
	...

0000c978 <Process_outputRate@@Base>:
    c978:	vmov.f64	d7, #240	; 0xbf800000 -1.0
    c97c:	cmp	r3, #0
    c97e:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    c982:	mov	r6, r0
    c984:	ldr	r4, [pc, #272]	; (ca98 <Process_outputRate@@Base+0x120>)
    c986:	sub	sp, #20
    c988:	ldr	r5, [pc, #272]	; (ca9c <Process_outputRate@@Base+0x124>)
    c98a:	add	r4, pc
    c98c:	ldr	r5, [r4, r5]
    c98e:	mov	r3, r4
    c990:	mov	r4, r1
    c992:	mov	r1, r2
    c994:	ldr	r3, [r5, #0]
    c996:	vcmp.f64	d0, d7
    c99a:	ldr	r7, [r3, #72]	; 0x48
    c99c:	ldr	r0, [r3, #40]	; 0x28
    c99e:	ldr	r3, [r3, #84]	; 0x54
    c9a0:	ittee	eq
    c9a2:	moveq	r8, r7
    c9a4:	moveq	r9, r7
    c9a6:	movne	r8, r0
    c9a8:	movne	r9, r3
    c9aa:	vmrs	APSR_nzcv, fpscr
    c9ae:	beq.n	ca2c <Process_outputRate@@Base+0xb4>
    c9b0:	vldr	d7, [pc, #196]	; ca78 <Process_outputRate@@Base+0x100>
    c9b4:	vcmpe.f64	d0, d7
    c9b8:	vmrs	APSR_nzcv, fpscr
    c9bc:	bmi.n	ca0e <Process_outputRate@@Base+0x96>
    c9be:	vldr	d5, [pc, #192]	; ca80 <Process_outputRate@@Base+0x108>
    c9c2:	vldr	d6, [pc, #196]	; ca88 <Process_outputRate@@Base+0x110>
    c9c6:	vcmpe.f64	d0, d5
    c9ca:	vmul.f64	d7, d0, d6
    c9ce:	vmrs	APSR_nzcv, fpscr
    c9d2:	bmi.n	ca6c <Process_outputRate@@Base+0xf4>
    c9d4:	vldr	d5, [pc, #184]	; ca90 <Process_outputRate@@Base+0x118>
    c9d8:	vcmpe.f64	d0, d5
    c9dc:	vmul.f64	d7, d7, d6
    c9e0:	vmrs	APSR_nzcv, fpscr
    c9e4:	bpl.n	ca4a <Process_outputRate@@Base+0xd2>
    c9e6:	ldr	r5, [pc, #184]	; (caa0 <Process_outputRate@@Base+0x128>)
    c9e8:	mov.w	r3, #4294967295	; 0xffffffff
    c9ec:	movs	r2, #1
    c9ee:	vstr	d7, [sp, #8]
    c9f2:	add	r5, pc
    c9f4:	mov	r0, r4
    c9f6:	str	r5, [sp, #0]
    c9f8:	blx	6c78 <__snprintf_chk@plt>
    c9fc:	mov	r2, r4
    c9fe:	mov	r1, r9
    ca00:	mov	r3, r0
    ca02:	mov	r0, r6
    ca04:	add	sp, #20
    ca06:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ca0a:	b.w	d2cc <RichString_appendn@@Base>
    ca0e:	ldr	r5, [pc, #148]	; (caa4 <Process_outputRate@@Base+0x12c>)
    ca10:	vstr	d0, [sp, #8]
    ca14:	add	r5, pc
    ca16:	mov.w	r3, #4294967295	; 0xffffffff
    ca1a:	movs	r2, #1
    ca1c:	mov	r0, r4
    ca1e:	str	r5, [sp, #0]
    ca20:	blx	6c78 <__snprintf_chk@plt>
    ca24:	mov	r2, r4
    ca26:	mov	r1, r7
    ca28:	mov	r3, r0
    ca2a:	b.n	ca02 <Process_outputRate@@Base+0x8a>
    ca2c:	ldr	r2, [pc, #120]	; (caa8 <Process_outputRate@@Base+0x130>)
    ca2e:	mov	r0, r4
    ca30:	add	r2, pc
    ca32:	blx	6a60 <snprintf@plt>
    ca36:	ldr	r1, [r5, #0]
    ca38:	mov	r2, r4
    ca3a:	ldr	r1, [r1, #76]	; 0x4c
    ca3c:	mov	r3, r0
    ca3e:	mov	r0, r6
    ca40:	add	sp, #20
    ca42:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ca46:	b.w	d2cc <RichString_appendn@@Base>
    ca4a:	vmul.f64	d7, d7, d6
    ca4e:	ldr	r5, [pc, #92]	; (caac <Process_outputRate@@Base+0x134>)
    ca50:	mov.w	r3, #4294967295	; 0xffffffff
    ca54:	movs	r2, #1
    ca56:	add	r5, pc
    ca58:	mov	r0, r4
    ca5a:	str	r5, [sp, #0]
    ca5c:	vstr	d7, [sp, #8]
    ca60:	blx	6c78 <__snprintf_chk@plt>
    ca64:	mov	r2, r4
    ca66:	mov	r1, r8
    ca68:	mov	r3, r0
    ca6a:	b.n	ca02 <Process_outputRate@@Base+0x8a>
    ca6c:	ldr	r5, [pc, #64]	; (cab0 <Process_outputRate@@Base+0x138>)
    ca6e:	vstr	d7, [sp, #8]
    ca72:	add	r5, pc
    ca74:	b.n	ca16 <Process_outputRate@@Base+0x9e>
    ca76:	nop
    ca78:	movs	r0, r0
    ca7a:	movs	r0, r0
    ca7c:	movs	r0, r0
    ca7e:	lsls	r0, r2
    ca80:	movs	r0, r0
    ca82:	movs	r0, r0
    ca84:	movs	r0, r0
    ca86:	asrs	r0, r6
    ca88:	movs	r0, r0
    ca8a:	movs	r0, r0
    ca8c:	movs	r0, r0
    ca8e:	subs	r7, #80	; 0x50
    ca90:	movs	r0, r0
    ca92:	movs	r0, r0
    ca94:	movs	r0, r0
    ca96:	rors	r0, r2
    ca98:	bcc.n	c9a0 <Process_outputRate@@Base+0x28>
    ca9a:	movs	r1, r0
    ca9c:	lsls	r0, r6, #9
    ca9e:	movs	r0, r0
    caa0:	add	r3, pc, #504	; (adr r3, cc9c <ProcessList_init@@Base+0x18>)
    caa2:	movs	r0, r0
    caa4:	add	r3, pc, #272	; (adr r3, cbb8 <Process_pidCompare@@Base+0x6c>)
    caa6:	movs	r0, r0
    caa8:	add	r2, pc, #416	; (adr r2, cc4c <Process_pidCompare@@Base+0x100>)
    caaa:	movs	r0, r0
    caac:	add	r3, pc, #152	; (adr r3, cb48 <Process_sendSignal@@Base+0x4>)
    caae:	movs	r0, r0
    cab0:	add	r2, pc, #968	; (adr r2, ce7c <ProcessList_sort@@Base+0x98>)
	...

0000cab4 <Process_done@@Base>:
    cab4:	ldr	r0, [r0, #28]
    cab6:	b.w	6754 <free@plt>
    caba:	nop

0000cabc <Process_init@@Base>:
    cabc:	push	{r3, r4, r5, lr}
    cabe:	movs	r2, #1
    cac0:	ldr	r4, [pc, #40]	; (caec <Process_init@@Base+0x30>)
    cac2:	mov.w	r5, #256	; 0x100
    cac6:	strb.w	r2, [r0, #48]	; 0x30
    caca:	mov.w	r2, #4294967295	; 0xffffffff
    cace:	add	r4, pc
    cad0:	str	r1, [r0, #4]
    cad2:	strh	r5, [r0, #46]	; 0x2e
    cad4:	movs	r1, #0
    cad6:	ldr	r3, [r4, #0]
    cad8:	strb.w	r1, [r0, #44]	; 0x2c
    cadc:	cmp	r3, r2
    cade:	str	r2, [r0, #40]	; 0x28
    cae0:	beq.n	cae4 <Process_init@@Base+0x28>
    cae2:	pop	{r3, r4, r5, pc}
    cae4:	blx	673c <getuid@plt>
    cae8:	str	r0, [r4, #0]
    caea:	pop	{r3, r4, r5, pc}
    caec:	b.n	cf1c <ProcessList_keyAt@@Base+0x2c>
    caee:	movs	r1, r0

0000caf0 <Process_toggleTag@@Base>:
    caf0:	ldrb.w	r3, [r0, #46]	; 0x2e
    caf4:	eor.w	r3, r3, #1
    caf8:	strb.w	r3, [r0, #46]	; 0x2e
    cafc:	bx	lr
    cafe:	nop

0000cb00 <Process_setPriority@@Base>:
    cb00:	push	{r3, r4, r5, r6, r7, lr}
    cb02:	mov	r4, r0
    cb04:	mov	r6, r1
    cb06:	ldr	r1, [r0, #16]
    cb08:	movs	r0, #0
    cb0a:	blx	680c <getpriority@plt>
    cb0e:	ldr	r1, [r4, #16]
    cb10:	mov	r2, r6
    cb12:	mov	r7, r0
    cb14:	movs	r0, #0
    cb16:	blx	6924 <setpriority@plt>
    cb1a:	mov	r5, r0
    cb1c:	cbz	r0, cb26 <Process_setPriority@@Base+0x26>
    cb1e:	clz	r0, r5
    cb22:	lsrs	r0, r0, #5
    cb24:	pop	{r3, r4, r5, r6, r7, pc}
    cb26:	ldr	r1, [r4, #16]
    cb28:	blx	680c <getpriority@plt>
    cb2c:	cmp	r0, r7
    cb2e:	clz	r0, r5
    cb32:	it	ne
    cb34:	strne	r6, [r4, #96]	; 0x60
    cb36:	lsrs	r0, r0, #5
    cb38:	pop	{r3, r4, r5, r6, r7, pc}
    cb3a:	nop

0000cb3c <Process_changePriorityBy@@Base>:
    cb3c:	ldr	r3, [r0, #96]	; 0x60
    cb3e:	add	r1, r3
    cb40:	b.w	cb00 <Process_setPriority@@Base>

0000cb44 <Process_sendSignal@@Base>:
    cb44:	ldr	r0, [r0, #16]
    cb46:	b.w	69c0 <kill@plt>
    cb4a:	nop

0000cb4c <Process_pidCompare@@Base>:
    cb4c:	ldr	r0, [r0, #16]
    cb4e:	ldr	r3, [r1, #16]
    cb50:	subs	r0, r0, r3
    cb52:	bx	lr
    cb54:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cb58:	sub	sp, #36	; 0x24
    cb5a:	ldr	r4, [pc, #288]	; (cc7c <Process_pidCompare@@Base+0x130>)
    cb5c:	mov	r5, r0
    cb5e:	ldr.w	ip, [pc, #288]	; cc80 <Process_pidCompare@@Base+0x134>
    cb62:	mov	r6, r1
    cb64:	add	r4, pc
    cb66:	movs	r1, #0
    cb68:	mov	r7, r2
    cb6a:	mov.w	r2, #4294967295	; 0xffffffff
    cb6e:	ldr.w	r0, [r4, ip]
    cb72:	ldr.w	sl, [sp, #72]	; 0x48
    cb76:	ldrb.w	r8, [sp, #76]	; 0x4c
    cb7a:	str	r3, [sp, #20]
    cb7c:	bl	f6dc <Vector_new@@Base>
    cb80:	ldr	r1, [r5, #4]
    cb82:	ldr	r4, [r1, #16]
    cb84:	subs	r4, #1
    cb86:	mov	r9, r0
    cb88:	bmi.n	cbc6 <Process_pidCompare@@Base+0x7a>
    cb8a:	mov	r0, r1
    cb8c:	b.n	cb94 <Process_pidCompare@@Base+0x48>
    cb8e:	subs	r4, #1
    cb90:	bcc.n	cbc6 <Process_pidCompare@@Base+0x7a>
    cb92:	ldr	r0, [r5, #4]
    cb94:	ldr	r3, [r0, #0]
    cb96:	ldr.w	r3, [r3, r4, lsl #2]
    cb9a:	ldrb.w	r2, [r3, #48]	; 0x30
    cb9e:	cmp	r2, #0
    cba0:	beq.n	cb8e <Process_pidCompare@@Base+0x42>
    cba2:	ldr	r1, [r3, #24]
    cba4:	cmp	r1, r6
    cba6:	beq.n	cbb4 <Process_pidCompare@@Base+0x68>
    cba8:	ldr	r2, [r3, #16]
    cbaa:	cmp	r1, r2
    cbac:	bne.n	cb8e <Process_pidCompare@@Base+0x42>
    cbae:	ldr	r3, [r3, #20]
    cbb0:	cmp	r3, r6
    cbb2:	bne.n	cb8e <Process_pidCompare@@Base+0x42>
    cbb4:	mov	r1, r4
    cbb6:	bl	f848 <Vector_take@@Base>
    cbba:	mov	r1, r0
    cbbc:	mov	r0, r9
    cbbe:	bl	f92c <Vector_add@@Base>
    cbc2:	subs	r4, #1
    cbc4:	bcs.n	cb92 <Process_pidCompare@@Base+0x46>
    cbc6:	ldr.w	r3, [r9, #16]
    cbca:	cmp	r3, #0
    cbcc:	str	r3, [sp, #16]
    cbce:	ble.n	cc42 <Process_pidCompare@@Base+0xf6>
    cbd0:	ldr	r2, [sp, #16]
    cbd2:	movs	r3, #1
    cbd4:	add.w	fp, r7, r3
    cbd8:	lsl.w	r7, r3, r7
    cbdc:	subs	r2, #1
    cbde:	str	r2, [sp, #12]
    cbe0:	ldr	r2, [sp, #20]
    cbe2:	movs	r4, #0
    cbe4:	str	r3, [sp, #28]
    cbe6:	orrs	r7, r2
    cbe8:	mov	r2, sl
    cbea:	negs	r3, r7
    cbec:	str	r3, [sp, #24]
    cbee:	mov	r3, r8
    cbf0:	mov	sl, r7
    cbf2:	mov	r8, r5
    cbf4:	mov	r7, r2
    cbf6:	mov	r5, r3
    cbf8:	ldr.w	r3, [r9]
    cbfc:	ldr.w	r6, [r3, r4, lsl #2]
    cc00:	cbnz	r5, cc06 <Process_pidCompare@@Base+0xba>
    cc02:	strb.w	r5, [r6, #48]	; 0x30
    cc06:	cmp	r7, #1
    cc08:	ldr.w	r0, [r8, #8]
    cc0c:	beq.n	cc70 <Process_pidCompare@@Base+0x124>
    cc0e:	mov	r2, r6
    cc10:	movs	r1, #0
    cc12:	bl	f810 <Vector_insert@@Base>
    cc16:	ldr	r3, [sp, #12]
    cc18:	ldr	r1, [r6, #16]
    cc1a:	cmp	r4, r3
    cc1c:	bge.n	cc4e <Process_pidCompare@@Base+0x102>
    cc1e:	cbz	r5, cc78 <Process_pidCompare@@Base+0x12c>
    cc20:	ldrb.w	r3, [r6, #47]	; 0x2f
    cc24:	cbz	r3, cc28 <Process_pidCompare@@Base+0xdc>
    cc26:	ldr	r3, [sp, #28]
    cc28:	str	r3, [sp, #4]
    cc2a:	mov	r3, sl
    cc2c:	mov	r2, fp
    cc2e:	mov	r0, r8
    cc30:	str	r7, [sp, #0]
    cc32:	bl	cb54 <Process_pidCompare@@Base+0x8>
    cc36:	mov	r3, sl
    cc38:	str	r3, [r6, #36]	; 0x24
    cc3a:	adds	r4, #1
    cc3c:	ldr	r3, [sp, #16]
    cc3e:	cmp	r3, r4
    cc40:	bne.n	cbf8 <Process_pidCompare@@Base+0xac>
    cc42:	mov	r0, r9
    cc44:	add	sp, #36	; 0x24
    cc46:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cc4a:	b.w	f720 <Vector_delete@@Base>
    cc4e:	mov	r3, r5
    cc50:	cbz	r5, cc56 <Process_pidCompare@@Base+0x10a>
    cc52:	ldrb.w	r3, [r6, #47]	; 0x2f
    cc56:	strd	r7, r3, [sp]
    cc5a:	mov	r2, fp
    cc5c:	ldr	r3, [sp, #20]
    cc5e:	mov	r0, r8
    cc60:	bl	cb54 <Process_pidCompare@@Base+0x8>
    cc64:	ldr	r3, [sp, #12]
    cc66:	cmp	r4, r3
    cc68:	it	eq
    cc6a:	ldreq	r3, [sp, #24]
    cc6c:	beq.n	cc38 <Process_pidCompare@@Base+0xec>
    cc6e:	b.n	cc36 <Process_pidCompare@@Base+0xea>
    cc70:	mov	r1, r6
    cc72:	bl	f92c <Vector_add@@Base>
    cc76:	b.n	cc16 <Process_pidCompare@@Base+0xca>
    cc78:	str	r5, [sp, #4]
    cc7a:	b.n	cc2a <Process_pidCompare@@Base+0xde>
    cc7c:	bne.n	cbd0 <Process_pidCompare@@Base+0x84>
    cc7e:	movs	r1, r0
    cc80:	lsls	r0, r7, #8
	...

0000cc84 <ProcessList_init@@Base>:
    cc84:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cc88:	mov	r4, r0
    cc8a:	mov	r5, r1
    cc8c:	mov	r8, r2
    cc8e:	mov	r0, r1
    cc90:	mov.w	r2, #4294967295	; 0xffffffff
    cc94:	movs	r1, #1
    cc96:	mov	r6, r3
    cc98:	ldr	r7, [sp, #24]
    cc9a:	bl	f6dc <Vector_new@@Base>
    cc9e:	movs	r1, #0
    cca0:	str	r0, [r4, #4]
    cca2:	movs	r0, #140	; 0x8c
    cca4:	bl	9498 <Hashtable_new@@Base>
    cca8:	mov.w	r2, #4294967295	; 0xffffffff
    ccac:	movs	r1, #1
    ccae:	str.w	r8, [r4, #16]
    ccb2:	str	r6, [r4, #36]	; 0x24
    ccb4:	str	r7, [r4, #28]
    ccb6:	mov	r3, r0
    ccb8:	mov	r0, r5
    ccba:	str	r3, [r4, #12]
    ccbc:	bl	f6dc <Vector_new@@Base>
    ccc0:	movs	r3, #0
    ccc2:	str.w	r3, [r4, #128]	; 0x80
    ccc6:	mov.w	r3, #4294967295	; 0xffffffff
    ccca:	str	r3, [r4, #24]
    cccc:	str	r0, [r4, #8]
    ccce:	mov	r0, r4
    ccd0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ccd4 <ProcessList_done@@Base>:
    ccd4:	push	{r4, lr}
    ccd6:	mov	r4, r0
    ccd8:	ldr	r0, [r0, #12]
    ccda:	bl	94c0 <Hashtable_delete@@Base>
    ccde:	ldr	r0, [r4, #4]
    cce0:	bl	f720 <Vector_delete@@Base>
    cce4:	ldr	r0, [r4, #8]
    cce6:	ldmia.w	sp!, {r4, lr}
    ccea:	b.w	f720 <Vector_delete@@Base>
    ccee:	nop

0000ccf0 <ProcessList_setPanel@@Base>:
    ccf0:	str	r1, [r0, #20]
    ccf2:	bx	lr

0000ccf4 <ProcessList_printHeader@@Base>:
    ccf4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ccf8:	mov	r5, r0
    ccfa:	mov	r0, r1
    ccfc:	mov	r9, r1
    ccfe:	bl	d194 <RichString_prune@@Base>
    cd02:	ldr.w	ip, [r5]
    cd06:	ldr	r6, [pc, #96]	; (cd68 <ProcessList_printHeader@@Base+0x74>)
    cd08:	ldr.w	r4, [ip, #28]
    cd0c:	add	r6, pc
    cd0e:	ldr	r1, [r4, #0]
    cd10:	cbz	r1, cd62 <ProcessList_printHeader@@Base+0x6e>
    cd12:	ldr	r2, [pc, #88]	; (cd6c <ProcessList_printHeader@@Base+0x78>)
    cd14:	ldr	r3, [pc, #88]	; (cd70 <ProcessList_printHeader@@Base+0x7c>)
    cd16:	ldr.w	r8, [pc, #92]	; cd74 <ProcessList_printHeader@@Base+0x80>
    cd1a:	ldr	r7, [r6, r2]
    cd1c:	add	r8, pc
    cd1e:	ldr	r6, [r6, r3]
    cd20:	b.n	cd32 <ProcessList_printHeader@@Base+0x3e>
    cd22:	ldr	r1, [r3, #20]
    cd24:	bl	d1e4 <RichString_append@@Base>
    cd28:	ldr.w	r1, [r4, #4]!
    cd2c:	cbz	r1, cd62 <ProcessList_printHeader@@Base+0x6e>
    cd2e:	ldr.w	ip, [r5]
    cd32:	add.w	r3, r7, r1, lsl #4
    cd36:	ldrb.w	lr, [ip, #58]	; 0x3a
    cd3a:	mov	r0, r9
    cd3c:	ldr	r2, [r3, #4]
    cd3e:	ldr	r3, [r6, #0]
    cd40:	cmp	r2, #0
    cd42:	it	eq
    cd44:	moveq	r2, r8
    cd46:	cmp.w	lr, #0
    cd4a:	bne.n	cd22 <ProcessList_printHeader@@Base+0x2e>
    cd4c:	ldr.w	ip, [ip, #52]	; 0x34
    cd50:	cmp	ip, r1
    cd52:	bne.n	cd22 <ProcessList_printHeader@@Base+0x2e>
    cd54:	ldr	r1, [r3, #28]
    cd56:	bl	d1e4 <RichString_append@@Base>
    cd5a:	ldr.w	r1, [r4, #4]!
    cd5e:	cmp	r1, #0
    cd60:	bne.n	cd2e <ProcessList_printHeader@@Base+0x3a>
    cd62:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    cd66:	nop
    cd68:	beq.n	cd6c <ProcessList_printHeader@@Base+0x78>
    cd6a:	movs	r1, r0
    cd6c:	lsls	r4, r1, #10
    cd6e:	movs	r0, r0
    cd70:	lsls	r0, r6, #9
    cd72:	movs	r0, r0
    cd74:	add	r0, pc, #224	; (adr r0, ce58 <ProcessList_sort@@Base+0x74>)
	...

0000cd78 <ProcessList_add@@Base>:
    cd78:	push	{r4, lr}
    cd7a:	sub	sp, #8
    cd7c:	mov	r4, r0
    cd7e:	ldr	r0, [r0, #4]
    cd80:	str	r1, [sp, #4]
    cd82:	bl	f92c <Vector_add@@Base>
    cd86:	ldr	r2, [sp, #4]
    cd88:	ldr	r0, [r4, #12]
    cd8a:	ldr	r1, [r2, #16]
    cd8c:	add	sp, #8
    cd8e:	ldmia.w	sp!, {r4, lr}
    cd92:	b.w	9514 <Hashtable_put@@Base>
    cd96:	nop

0000cd98 <ProcessList_remove@@Base>:
    cd98:	push	{r3, r4, r5, lr}
    cd9a:	mov	r4, r0
    cd9c:	mov	r5, r1
    cd9e:	ldr	r0, [r0, #12]
    cda0:	ldr	r1, [r1, #16]
    cda2:	bl	956c <Hashtable_remove@@Base>
    cda6:	ldr	r3, [pc, #32]	; (cdc8 <ProcessList_remove@@Base+0x30>)
    cda8:	ldr	r2, [pc, #32]	; (cdcc <ProcessList_remove@@Base+0x34>)
    cdaa:	mov	r1, r5
    cdac:	add	r3, pc
    cdae:	ldr	r0, [r4, #4]
    cdb0:	ldr	r2, [r3, r2]
    cdb2:	bl	f934 <Vector_indexOf@@Base>
    cdb6:	subs	r1, r0, #0
    cdb8:	bge.n	cdbc <ProcessList_remove@@Base+0x24>
    cdba:	pop	{r3, r4, r5, pc}
    cdbc:	ldr	r0, [r4, #4]
    cdbe:	ldmia.w	sp!, {r3, r4, r5, lr}
    cdc2:	b.w	f874 <Vector_remove@@Base>
    cdc6:	nop
    cdc8:	ldmia	r7!, {r5, r6}
    cdca:	movs	r1, r0
    cdcc:	lsls	r0, r5, #10
	...

0000cdd0 <ProcessList_get@@Base>:
    cdd0:	ldr	r3, [r0, #4]
    cdd2:	ldr	r3, [r3, #0]
    cdd4:	ldr.w	r0, [r3, r1, lsl #2]
    cdd8:	bx	lr
    cdda:	nop

0000cddc <ProcessList_size@@Base>:
    cddc:	ldr	r3, [r0, #4]
    cdde:	ldr	r0, [r3, #16]
    cde0:	bx	lr
    cde2:	nop

0000cde4 <ProcessList_sort@@Base>:
    cde4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cde8:	mov	r7, r0
    cdea:	ldrd	r3, r0, [r0]
    cdee:	sub	sp, #12
    cdf0:	ldrb.w	r2, [r3, #58]	; 0x3a
    cdf4:	cbnz	r2, ce00 <ProcessList_sort@@Base+0x1c>
    cdf6:	add	sp, #12
    cdf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdfc:	b.w	f79c <Vector_insertionSort@@Base>
    ce00:	ldrd	r8, r4, [r3, #48]	; 0x30
    ce04:	movs	r2, #1
    ce06:	str	r2, [r3, #52]	; 0x34
    ce08:	mov.w	r9, #0
    ce0c:	str	r2, [r3, #48]	; 0x30
    ce0e:	bl	f78c <Vector_quickSort@@Base>
    ce12:	ldr	r3, [r7, #0]
    ce14:	strd	r8, r4, [r3, #48]	; 0x30
    ce18:	ldr.w	sl, [r7, #4]
    ce1c:	ldr.w	r0, [sl, #16]
    ce20:	cmp	r0, #0
    ce22:	beq.n	ceac <ProcessList_sort@@Base+0xc8>
    ce24:	ldr.w	ip, [sl]
    ce28:	sub.w	fp, ip, #4
    ce2c:	cmp	r0, #0
    ce2e:	itt	gt
    ce30:	movgt	lr, fp
    ce32:	movgt	r1, #0
    ce34:	ble.n	ce2c <ProcessList_sort@@Base+0x48>
    ce36:	ldr.w	r3, [lr, #4]!
    ce3a:	ldrb.w	r4, [r3, #48]	; 0x30
    ce3e:	cmp	r4, #0
    ce40:	beq.n	ceca <ProcessList_sort@@Base+0xe6>
    ce42:	ldr	r2, [r3, #16]
    ce44:	ldr	r6, [r3, #24]
    ce46:	cmp	r6, r2
    ce48:	it	ne
    ce4a:	movne	r2, r0
    ce4c:	bne.n	ce58 <ProcessList_sort@@Base+0x74>
    ce4e:	ldr	r6, [r3, #20]
    ce50:	cmp	r2, r6
    ce52:	ite	ne
    ce54:	movne	r2, r0
    ce56:	moveq	r2, #0
    ce58:	movs	r4, #0
    ce5a:	b.n	ce6c <ProcessList_sort@@Base+0x88>
    ce5c:	ldr.w	r5, [ip, r3, lsl #2]
    ce60:	ldr	r5, [r5, #16]
    ce62:	cmp	r5, r6
    ce64:	beq.n	ceb8 <ProcessList_sort@@Base+0xd4>
    ce66:	ite	le
    ce68:	addle	r4, r3, #1
    ce6a:	movgt	r2, r3
    ce6c:	adds	r3, r4, r2
    ce6e:	cmp	r4, r2
    ce70:	mov.w	r3, r3, asr #1
    ce74:	blt.n	ce5c <ProcessList_sort@@Base+0x78>
    ce76:	mov	r0, sl
    ce78:	bl	f848 <Vector_take@@Base>
    ce7c:	mov	r4, r0
    ce7e:	ldr	r0, [r7, #8]
    ce80:	mov	r1, r4
    ce82:	str.w	r9, [r4, #36]	; 0x24
    ce86:	bl	f92c <Vector_add@@Base>
    ce8a:	ldr	r1, [r4, #16]
    ce8c:	ldrb.w	r4, [r4, #47]	; 0x2f
    ce90:	movs	r3, #0
    ce92:	mov	r0, r7
    ce94:	mov	r2, r3
    ce96:	str.w	r8, [sp]
    ce9a:	str	r4, [sp, #4]
    ce9c:	bl	cb54 <Process_pidCompare@@Base+0x8>
    cea0:	ldr.w	sl, [r7, #4]
    cea4:	ldr.w	r0, [sl, #16]
    cea8:	cmp	r0, #0
    ceaa:	bne.n	ce24 <ProcessList_sort@@Base+0x40>
    ceac:	ldr	r3, [r7, #8]
    ceae:	strd	r3, sl, [r7, #4]
    ceb2:	add	sp, #12
    ceb4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ceb8:	adds	r1, #1
    ceba:	cmp	r1, r0
    cebc:	beq.n	ce2c <ProcessList_sort@@Base+0x48>
    cebe:	ldr.w	r3, [lr, #4]!
    cec2:	ldrb.w	r4, [r3, #48]	; 0x30
    cec6:	cmp	r4, #0
    cec8:	bne.n	ce42 <ProcessList_sort@@Base+0x5e>
    ceca:	mov	r0, sl
    cecc:	bl	f848 <Vector_take@@Base>
    ced0:	mov	r5, r0
    ced2:	ldr	r0, [r7, #8]
    ced4:	mov	r1, r5
    ced6:	str	r4, [r5, #36]	; 0x24
    ced8:	bl	f92c <Vector_add@@Base>
    cedc:	ldr	r1, [r5, #16]
    cede:	mov	r3, r4
    cee0:	mov	r2, r4
    cee2:	mov	r0, r7
    cee4:	strd	r8, r4, [sp]
    cee8:	bl	cb54 <Process_pidCompare@@Base+0x8>
    ceec:	b.n	ce18 <ProcessList_sort@@Base+0x34>
    ceee:	nop

0000cef0 <ProcessList_keyAt@@Base>:
    cef0:	ldr	r3, [r0, #0]
    cef2:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cef6:	ldr	r6, [r3, #28]
    cef8:	ldr	r2, [pc, #60]	; (cf38 <ProcessList_keyAt@@Base+0x48>)
    cefa:	ldr	r4, [r6, #0]
    cefc:	add	r2, pc
    cefe:	cbz	r4, cf2e <ProcessList_keyAt@@Base+0x3e>
    cf00:	ldr	r3, [pc, #56]	; (cf3c <ProcessList_keyAt@@Base+0x4c>)
    cf02:	mov	r8, r1
    cf04:	movs	r5, #0
    cf06:	ldr	r7, [r2, r3]
    cf08:	b.n	cf20 <ProcessList_keyAt@@Base+0x30>
    cf0a:	blx	6a0c <strlen@plt>
    cf0e:	add	r0, r5
    cf10:	cmp	r8, r5
    cf12:	mov	r5, r0
    cf14:	blt.n	cf1a <ProcessList_keyAt@@Base+0x2a>
    cf16:	cmp	r8, r0
    cf18:	ble.n	cf30 <ProcessList_keyAt@@Base+0x40>
    cf1a:	ldr.w	r4, [r6, #4]!
    cf1e:	cbz	r4, cf2e <ProcessList_keyAt@@Base+0x3e>
    cf20:	add.w	r3, r7, r4, lsl #4
    cf24:	ldr	r0, [r3, #4]
    cf26:	cmp	r0, #0
    cf28:	bne.n	cf0a <ProcessList_keyAt@@Base+0x1a>
    cf2a:	movs	r0, #2
    cf2c:	b.n	cf0e <ProcessList_keyAt@@Base+0x1e>
    cf2e:	movs	r4, #2
    cf30:	mov	r0, r4
    cf32:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    cf36:	nop
    cf38:	ldmia	r6!, {r4}
    cf3a:	movs	r1, r0
    cf3c:	lsls	r4, r1, #10
	...

0000cf40 <ProcessList_expandTree@@Base>:
    cf40:	ldr	r3, [r0, #4]
    cf42:	ldr	r1, [r3, #16]
    cf44:	cmp	r1, #0
    cf46:	ble.n	cf5c <ProcessList_expandTree@@Base+0x1c>
    cf48:	ldr	r3, [r3, #0]
    cf4a:	movs	r0, #1
    cf4c:	add.w	r1, r3, r1, lsl #2
    cf50:	ldr.w	r2, [r3], #4
    cf54:	cmp	r3, r1
    cf56:	strb.w	r0, [r2, #47]	; 0x2f
    cf5a:	bne.n	cf50 <ProcessList_expandTree@@Base+0x10>
    cf5c:	bx	lr
    cf5e:	nop

0000cf60 <ProcessList_rebuildPanel@@Base>:
    cf60:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf64:	mov	r5, r0
    cf66:	sub	sp, #12
    cf68:	ldr	r0, [r0, #20]
    cf6a:	ldr.w	r8, [r5, #32]
    cf6e:	bl	b344 <Panel_getSelectedIndex@@Base>
    cf72:	ldrd	r3, r9, [r5, #20]
    cf76:	cmp.w	r9, #4294967295	; 0xffffffff
    cf7a:	it	eq
    cf7c:	moveq.w	r9, #0
    cf80:	mov	sl, r0
    cf82:	mov	r0, r3
    cf84:	ldr	r3, [r3, #44]	; 0x2c
    cf86:	str	r3, [sp, #4]
    cf88:	bl	b278 <Panel_prune@@Base>
    cf8c:	ldr	r2, [r5, #4]
    cf8e:	ldr.w	fp, [r2, #16]
    cf92:	cmp.w	fp, #0
    cf96:	ble.n	cffe <ProcessList_rebuildPanel@@Base+0x9e>
    cf98:	movs	r4, #0
    cf9a:	mov	r7, r4
    cf9c:	b.n	cfac <ProcessList_rebuildPanel@@Base+0x4c>
    cf9e:	ldr	r1, [r6, #68]	; 0x44
    cfa0:	cmp	r2, r1
    cfa2:	beq.n	cfc0 <ProcessList_rebuildPanel@@Base+0x60>
    cfa4:	adds	r4, #1
    cfa6:	cmp	fp, r4
    cfa8:	beq.n	cffe <ProcessList_rebuildPanel@@Base+0x9e>
    cfaa:	ldr	r2, [r5, #4]
    cfac:	ldr	r2, [r2, #0]
    cfae:	ldr.w	r6, [r2, r4, lsl #2]
    cfb2:	ldrb.w	r2, [r6, #48]	; 0x30
    cfb6:	cmp	r2, #0
    cfb8:	beq.n	cfa4 <ProcessList_rebuildPanel@@Base+0x44>
    cfba:	ldr	r2, [r5, #28]
    cfbc:	adds	r3, r2, #1
    cfbe:	bne.n	cf9e <ProcessList_rebuildPanel@@Base+0x3e>
    cfc0:	cmp.w	r8, #0
    cfc4:	beq.n	cfd2 <ProcessList_rebuildPanel@@Base+0x72>
    cfc6:	ldr	r0, [r6, #28]
    cfc8:	mov	r1, r8
    cfca:	blx	66a4 <strcasestr@plt>
    cfce:	cmp	r0, #0
    cfd0:	beq.n	cfa4 <ProcessList_rebuildPanel@@Base+0x44>
    cfd2:	ldr	r0, [r5, #36]	; 0x24
    cfd4:	cbz	r0, cfe0 <ProcessList_rebuildPanel@@Base+0x80>
    cfd6:	ldr	r1, [r6, #24]
    cfd8:	bl	95bc <Hashtable_get@@Base>
    cfdc:	cmp	r0, #0
    cfde:	beq.n	cfa4 <ProcessList_rebuildPanel@@Base+0x44>
    cfe0:	mov	r2, r6
    cfe2:	ldr	r0, [r5, #20]
    cfe4:	mov	r1, r7
    cfe6:	bl	b2bc <Panel_set@@Base>
    cfea:	ldr	r2, [r5, #24]
    cfec:	adds	r2, #1
    cfee:	beq.n	d004 <ProcessList_rebuildPanel@@Base+0xa4>
    cff0:	ldr	r2, [r6, #16]
    cff2:	cmp	r2, r9
    cff4:	beq.n	d008 <ProcessList_rebuildPanel@@Base+0xa8>
    cff6:	adds	r4, #1
    cff8:	adds	r7, #1
    cffa:	cmp	fp, r4
    cffc:	bne.n	cfaa <ProcessList_rebuildPanel@@Base+0x4a>
    cffe:	add	sp, #12
    d000:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d004:	cmp	sl, r7
    d006:	bne.n	cff6 <ProcessList_rebuildPanel@@Base+0x96>
    d008:	ldr	r0, [r5, #20]
    d00a:	mov	r1, r7
    d00c:	bl	b350 <Panel_setSelected@@Base>
    d010:	ldr	r2, [r5, #20]
    d012:	ldr	r3, [sp, #4]
    d014:	str	r3, [r2, #44]	; 0x2c
    d016:	b.n	cff6 <ProcessList_rebuildPanel@@Base+0x96>

0000d018 <ProcessList_getProcess@@Base>:
    d018:	push	{r3, r4, r5, r6, r7, lr}
    d01a:	mov	r4, r0
    d01c:	ldr	r0, [r0, #12]
    d01e:	mov	r7, r3
    d020:	mov	r5, r2
    d022:	mov	r6, r1
    d024:	bl	95bc <Hashtable_get@@Base>
    d028:	cmp	r0, #0
    d02a:	ite	ne
    d02c:	movne	r3, #1
    d02e:	moveq	r3, #0
    d030:	strb	r3, [r5, #0]
    d032:	beq.n	d036 <ProcessList_getProcess@@Base+0x1e>
    d034:	pop	{r3, r4, r5, r6, r7, pc}
    d036:	ldr	r0, [r4, #0]
    d038:	blx	r7
    d03a:	str	r6, [r0, #16]
    d03c:	pop	{r3, r4, r5, r6, r7, pc}
    d03e:	nop

0000d040 <ProcessList_scan@@Base>:
    d040:	ldr	r3, [r0, #4]
    d042:	push	{r4, r5, r6, lr}
    d044:	mov	r5, r0
    d046:	ldr	r1, [r3, #16]
    d048:	cmp	r1, #0
    d04a:	ble.n	d066 <ProcessList_scan@@Base+0x26>
    d04c:	ldr	r3, [r3, #0]
    d04e:	movs	r4, #0
    d050:	movs	r0, #1
    d052:	add.w	r1, r3, r1, lsl #2
    d056:	ldr.w	r2, [r3], #4
    d05a:	cmp	r1, r3
    d05c:	strb.w	r4, [r2, #44]	; 0x2c
    d060:	strb.w	r0, [r2, #48]	; 0x30
    d064:	bne.n	d056 <ProcessList_scan@@Base+0x16>
    d066:	movs	r6, #0
    d068:	mov	r0, r5
    d06a:	str	r6, [r5, #40]	; 0x28
    d06c:	strd	r6, r6, [r5, #48]	; 0x30
    d070:	str	r6, [r5, #44]	; 0x2c
    d072:	bl	147a0 <ProcessList_goThroughEntries@@Base>
    d076:	ldr	r3, [r5, #4]
    d078:	ldr	r4, [r3, #16]
    d07a:	subs	r4, #1
    d07c:	bpl.n	d08a <ProcessList_scan@@Base+0x4a>
    d07e:	b.n	d0a2 <ProcessList_scan@@Base+0x62>
    d080:	subs	r4, #1
    d082:	strb.w	r6, [r1, #44]	; 0x2c
    d086:	bcc.n	d0a2 <ProcessList_scan@@Base+0x62>
    d088:	ldr	r3, [r5, #4]
    d08a:	ldr	r3, [r3, #0]
    d08c:	ldr.w	r1, [r3, r4, lsl #2]
    d090:	ldrb.w	r3, [r1, #44]	; 0x2c
    d094:	cmp	r3, #0
    d096:	bne.n	d080 <ProcessList_scan@@Base+0x40>
    d098:	mov	r0, r5
    d09a:	bl	cd98 <ProcessList_remove@@Base>
    d09e:	subs	r4, #1
    d0a0:	bcs.n	d088 <ProcessList_scan@@Base+0x48>
    d0a2:	pop	{r4, r5, r6, pc}
    d0a4:	ldr	r3, [r0, #0]
    d0a6:	push	{r4, r5, r6, r7, lr}
    d0a8:	cmp.w	r3, #350	; 0x15e
    d0ac:	mov.w	r6, #28
    d0b0:	sub	sp, #12
    d0b2:	mul.w	r7, r6, r1
    d0b6:	mov	r4, r0
    d0b8:	mov	r5, r1
    d0ba:	bgt.n	d0dc <ProcessList_scan@@Base+0x9c>
    d0bc:	cmp.w	r1, #350	; 0x15e
    d0c0:	bgt.n	d10e <ProcessList_scan@@Base+0xce>
    d0c2:	ldr	r6, [r4, #4]
    d0c4:	adds	r2, r6, r7
    d0c6:	movs	r3, #0
    d0c8:	str	r3, [r6, r7]
    d0ca:	strd	r3, r3, [r2, #4]
    d0ce:	strd	r3, r3, [r2, #12]
    d0d2:	strd	r3, r3, [r2, #20]
    d0d6:	str	r5, [r4, #0]
    d0d8:	add	sp, #12
    d0da:	pop	{r4, r5, r6, r7, pc}
    d0dc:	cmp.w	r5, #350	; 0x15e
    d0e0:	ldr	r1, [r0, #4]
    d0e2:	bgt.n	d0fe <ProcessList_scan@@Base+0xbe>
    d0e4:	add.w	r6, r0, #8
    d0e8:	mov	r2, r7
    d0ea:	str	r1, [sp, #4]
    d0ec:	mov	r0, r6
    d0ee:	blx	6788 <memcpy@plt>
    d0f2:	ldr	r1, [sp, #4]
    d0f4:	mov	r0, r1
    d0f6:	blx	6758 <free@plt+0x4>
    d0fa:	str	r6, [r4, #4]
    d0fc:	b.n	d0c4 <ProcessList_scan@@Base+0x84>
    d0fe:	mov	r0, r1
    d100:	add.w	r1, r7, #28
    d104:	bl	11dc8 <xRealloc@@Base>
    d108:	mov	r6, r0
    d10a:	str	r0, [r4, #4]
    d10c:	b.n	d0c4 <ProcessList_scan@@Base+0x84>
    d10e:	add.w	r0, r7, #28
    d112:	bl	11d84 <xMalloc@@Base>
    d116:	mov	r1, r4
    d118:	ldr.w	r2, [r1], #8
    d11c:	mul.w	r2, r6, r2
    d120:	str	r0, [r4, #4]
    d122:	blx	6788 <memcpy@plt>
    d126:	b.n	d0c2 <ProcessList_scan@@Base+0x82>

0000d128 <RichString_setAttrn@@Base>:
    d128:	push	{r4}
    d12a:	ldrd	r4, r0, [r0]
    d12e:	cmp	r4, r3
    d130:	ite	le
    d132:	addle.w	r4, r4, #4294967295	; 0xffffffff
    d136:	bicgt.w	r4, r3, r3, asr #31
    d13a:	cmp	r4, r2
    d13c:	blt.n	d15a <RichString_setAttrn@@Base+0x32>
    d13e:	movs	r3, #28
    d140:	adds	r4, #1
    d142:	mla	r3, r2, r3, r3
    d146:	adds	r2, #1
    d148:	add	r3, r0
    d14a:	cmp	r2, r4
    d14c:	str.w	r1, [r3, #-28]
    d150:	add.w	r2, r2, #1
    d154:	add.w	r3, r3, #28
    d158:	bne.n	d14a <RichString_setAttrn@@Base+0x22>
    d15a:	ldr.w	r4, [sp], #4
    d15e:	bx	lr

0000d160 <RichString_findChar@@Base>:
    d160:	push	{r3, r4, r5, lr}
    d162:	mov	r5, r0
    d164:	mov	r0, r1
    d166:	mov	r4, r2
    d168:	blx	6ac0 <btowc@plt>
    d16c:	ldrd	r1, r2, [r5]
    d170:	movs	r3, #28
    d172:	cmp	r4, r1
    d174:	mla	r3, r3, r4, r2
    d178:	blt.n	d182 <RichString_findChar@@Base+0x22>
    d17a:	b.n	d18e <RichString_findChar@@Base+0x2e>
    d17c:	adds	r4, #1
    d17e:	cmp	r4, r1
    d180:	beq.n	d18e <RichString_findChar@@Base+0x2e>
    d182:	ldr	r2, [r3, #4]
    d184:	adds	r3, #28
    d186:	cmp	r2, r0
    d188:	bne.n	d17c <RichString_findChar@@Base+0x1c>
    d18a:	mov	r0, r4
    d18c:	pop	{r3, r4, r5, pc}
    d18e:	mov.w	r0, #4294967295	; 0xffffffff
    d192:	pop	{r3, r4, r5, pc}

0000d194 <RichString_prune@@Base>:
    d194:	ldr	r3, [r0, #0]
    d196:	push	{r4, lr}
    d198:	cmp.w	r3, #350	; 0x15e
    d19c:	mov	r4, r0
    d19e:	bgt.n	d1b4 <RichString_prune@@Base+0x20>
    d1a0:	movw	r2, #9836	; 0x266c
    d1a4:	movs	r1, #0
    d1a6:	mov	r0, r4
    d1a8:	blx	6a90 <memset@plt>
    d1ac:	add.w	r3, r4, #8
    d1b0:	str	r3, [r4, #4]
    d1b2:	pop	{r4, pc}
    d1b4:	ldr	r0, [r0, #4]
    d1b6:	blx	6758 <free@plt+0x4>
    d1ba:	b.n	d1a0 <RichString_prune@@Base+0xc>

0000d1bc <RichString_setAttr@@Base>:
    d1bc:	push	{r4}
    d1be:	movs	r2, #0
    d1c0:	ldr	r4, [r0, #0]
    d1c2:	ldr	r3, [r0, #4]
    d1c4:	subs	r0, r4, #1
    d1c6:	adds	r3, #28
    d1c8:	bic.w	r0, r0, r0, asr #31
    d1cc:	adds	r0, #1
    d1ce:	adds	r2, #1
    d1d0:	str.w	r1, [r3, #-28]
    d1d4:	cmp	r2, r0
    d1d6:	add.w	r3, r3, #28
    d1da:	bne.n	d1ce <RichString_setAttr@@Base+0x12>
    d1dc:	ldr.w	r4, [sp], #4
    d1e0:	bx	lr
    d1e2:	nop

0000d1e4 <RichString_append@@Base>:
    d1e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d1e8:	mov	r4, r2
    d1ea:	mov	r6, r0
    d1ec:	mov	r0, r2
    d1ee:	ldr	r2, [pc, #208]	; (d2c0 <RichString_append@@Base+0xdc>)
    d1f0:	sub	sp, #12
    d1f2:	ldr	r3, [pc, #208]	; (d2c4 <RichString_append@@Base+0xe0>)
    d1f4:	add	r2, pc
    d1f6:	add	r7, sp, #0
    d1f8:	mov	r9, r1
    d1fa:	mov	r8, sp
    d1fc:	ldr	r3, [r2, r3]
    d1fe:	ldr	r3, [r3, #0]
    d200:	str	r3, [r7, #4]
    d202:	mov.w	r3, #0
    d206:	blx	6a0c <strlen@plt>
    d20a:	mov	r1, r4
    d20c:	ldr	r4, [r6, #0]
    d20e:	lsls	r3, r0, #2
    d210:	mov	r2, r0
    d212:	adds	r3, #11
    d214:	bic.w	r3, r3, #7
    d218:	sub.w	sp, sp, r3
    d21c:	mov	sl, sp
    d21e:	mov	r0, sl
    d220:	blx	6b90 <mbstowcs@plt>
    d224:	cmp	r0, #0
    d226:	blt.n	d296 <RichString_append@@Base+0xb2>
    d228:	adds	r5, r4, r0
    d22a:	cmp.w	r5, #350	; 0x15e
    d22e:	bge.n	d2b0 <RichString_append@@Base+0xcc>
    d230:	ldr	r3, [r6, #0]
    d232:	cmp.w	r3, #350	; 0x15e
    d236:	bge.n	d2b0 <RichString_append@@Base+0xcc>
    d238:	movs	r1, #28
    d23a:	ldr	r0, [r6, #4]
    d23c:	mul.w	r1, r1, r5
    d240:	movs	r3, #0
    d242:	adds	r2, r0, r1
    d244:	str	r3, [r0, r1]
    d246:	strd	r3, r3, [r2, #4]
    d24a:	strd	r3, r3, [r2, #12]
    d24e:	strd	r3, r3, [r2, #20]
    d252:	str	r5, [r6, #0]
    d254:	cmp	r4, r5
    d256:	bge.n	d296 <RichString_append@@Base+0xb2>
    d258:	ldr	r3, [r6, #4]
    d25a:	movs	r2, #28
    d25c:	sub.w	fp, sl, r4, lsl #2
    d260:	bic.w	r9, r9, #4278190080	; 0xff000000
    d264:	add.w	fp, fp, r5, lsl #2
    d268:	movs	r6, #0
    d26a:	mla	r4, r2, r4, r3
    d26e:	ldr.w	r5, [sl], #4
    d272:	mov	r0, r5
    d274:	blx	6848 <iswprint@plt>
    d278:	strd	r6, r6, [r4, #8]
    d27c:	str	r6, [r4, #16]
    d27e:	strd	r6, r6, [r4, #20]
    d282:	adds	r4, #28
    d284:	str.w	r9, [r4, #-28]
    d288:	cmp	r0, #0
    d28a:	it	eq
    d28c:	moveq	r5, #63	; 0x3f
    d28e:	cmp	sl, fp
    d290:	str.w	r5, [r4, #-24]
    d294:	bne.n	d26e <RichString_append@@Base+0x8a>
    d296:	ldr	r2, [pc, #48]	; (d2c8 <RichString_append@@Base+0xe4>)
    d298:	mov	sp, r8
    d29a:	ldr	r3, [pc, #40]	; (d2c4 <RichString_append@@Base+0xe0>)
    d29c:	add	r2, pc
    d29e:	ldr	r3, [r2, r3]
    d2a0:	ldr	r2, [r3, #0]
    d2a2:	ldr	r3, [r7, #4]
    d2a4:	eors	r2, r3
    d2a6:	bne.n	d2ba <RichString_append@@Base+0xd6>
    d2a8:	adds	r7, #12
    d2aa:	mov	sp, r7
    d2ac:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2b0:	mov	r1, r5
    d2b2:	mov	r0, r6
    d2b4:	bl	d0a4 <ProcessList_scan@@Base+0x64>
    d2b8:	b.n	d254 <RichString_append@@Base+0x70>
    d2ba:	blx	67d0 <__stack_chk_fail@plt>
    d2be:	nop
    d2c0:	ldmia	r3, {r3, r4}
    d2c2:	movs	r1, r0
    d2c4:	lsls	r0, r0, #9
    d2c6:	movs	r0, r0
    d2c8:	ldmia	r2!, {r4, r5, r6}
    d2ca:	movs	r1, r0

0000d2cc <RichString_appendn@@Base>:
    d2cc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d2d0:	lsls	r4, r3, #2
    d2d2:	sub	sp, #12
    d2d4:	mov	r8, r0
    d2d6:	adds	r4, #11
    d2d8:	ldr	r0, [pc, #208]	; (d3ac <RichString_appendn@@Base+0xe0>)
    d2da:	bic.w	r4, r4, #7
    d2de:	mov	r9, r1
    d2e0:	mov	r1, r2
    d2e2:	mov	r2, r3
    d2e4:	ldr	r3, [pc, #200]	; (d3b0 <RichString_appendn@@Base+0xe4>)
    d2e6:	add	r0, pc
    d2e8:	add	r7, sp, #0
    d2ea:	mov	r6, sp
    d2ec:	sub.w	sp, sp, r4
    d2f0:	ldr	r3, [r0, r3]
    d2f2:	mov	sl, sp
    d2f4:	ldr.w	r4, [r8]
    d2f8:	mov	r0, sl
    d2fa:	ldr	r3, [r3, #0]
    d2fc:	str	r3, [r7, #4]
    d2fe:	mov.w	r3, #0
    d302:	blx	6b90 <mbstowcs@plt>
    d306:	cmp	r0, #0
    d308:	blt.n	d382 <RichString_appendn@@Base+0xb6>
    d30a:	adds	r5, r4, r0
    d30c:	cmp.w	r5, #350	; 0x15e
    d310:	bge.n	d39c <RichString_appendn@@Base+0xd0>
    d312:	ldr.w	r3, [r8]
    d316:	cmp.w	r3, #350	; 0x15e
    d31a:	bge.n	d39c <RichString_appendn@@Base+0xd0>
    d31c:	movs	r1, #28
    d31e:	ldr.w	r0, [r8, #4]
    d322:	mul.w	r1, r1, r5
    d326:	movs	r3, #0
    d328:	adds	r2, r0, r1
    d32a:	str	r3, [r0, r1]
    d32c:	strd	r3, r3, [r2, #4]
    d330:	strd	r3, r3, [r2, #12]
    d334:	strd	r3, r3, [r2, #20]
    d338:	str.w	r5, [r8]
    d33c:	cmp	r4, r5
    d33e:	bge.n	d382 <RichString_appendn@@Base+0xb6>
    d340:	ldr.w	r3, [r8, #4]
    d344:	movs	r2, #28
    d346:	sub.w	fp, sl, r4, lsl #2
    d34a:	bic.w	r9, r9, #4278190080	; 0xff000000
    d34e:	add.w	fp, fp, r5, lsl #2
    d352:	movs	r5, #0
    d354:	mla	r4, r2, r4, r3
    d358:	ldr.w	r8, [sl], #4
    d35c:	mov	r0, r8
    d35e:	blx	6848 <iswprint@plt>
    d362:	strd	r5, r5, [r4, #8]
    d366:	str	r5, [r4, #16]
    d368:	strd	r5, r5, [r4, #20]
    d36c:	adds	r4, #28
    d36e:	str.w	r9, [r4, #-28]
    d372:	cmp	r0, #0
    d374:	it	eq
    d376:	moveq.w	r8, #63	; 0x3f
    d37a:	cmp	sl, fp
    d37c:	str.w	r8, [r4, #-24]
    d380:	bne.n	d358 <RichString_appendn@@Base+0x8c>
    d382:	ldr	r2, [pc, #48]	; (d3b4 <RichString_appendn@@Base+0xe8>)
    d384:	mov	sp, r6
    d386:	ldr	r3, [pc, #40]	; (d3b0 <RichString_appendn@@Base+0xe4>)
    d388:	add	r2, pc
    d38a:	ldr	r3, [r2, r3]
    d38c:	ldr	r2, [r3, #0]
    d38e:	ldr	r3, [r7, #4]
    d390:	eors	r2, r3
    d392:	bne.n	d3a6 <RichString_appendn@@Base+0xda>
    d394:	adds	r7, #12
    d396:	mov	sp, r7
    d398:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d39c:	mov	r1, r5
    d39e:	mov	r0, r8
    d3a0:	bl	d0a4 <ProcessList_scan@@Base+0x64>
    d3a4:	b.n	d33c <RichString_appendn@@Base+0x70>
    d3a6:	blx	67d0 <__stack_chk_fail@plt>
    d3aa:	nop
    d3ac:	ldmia	r2, {r1, r2, r5}
    d3ae:	movs	r1, r0
    d3b0:	lsls	r0, r0, #9
    d3b2:	movs	r0, r0
    d3b4:	ldmia	r1!, {r2, r7}
    d3b6:	movs	r1, r0

0000d3b8 <RichString_write@@Base>:
    d3b8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d3bc:	mov	r5, r2
    d3be:	mov	r4, r0
    d3c0:	mov	r0, r2
    d3c2:	ldr	r2, [pc, #192]	; (d484 <RichString_write@@Base+0xcc>)
    d3c4:	sub	sp, #12
    d3c6:	ldr	r3, [pc, #192]	; (d488 <RichString_write@@Base+0xd0>)
    d3c8:	add	r2, pc
    d3ca:	add	r7, sp, #0
    d3cc:	mov	r8, r1
    d3ce:	mov	r9, sp
    d3d0:	ldr	r3, [r2, r3]
    d3d2:	ldr	r3, [r3, #0]
    d3d4:	str	r3, [r7, #4]
    d3d6:	mov.w	r3, #0
    d3da:	blx	6a0c <strlen@plt>
    d3de:	mov	r1, r5
    d3e0:	lsls	r3, r0, #2
    d3e2:	mov	r2, r0
    d3e4:	adds	r3, #11
    d3e6:	bic.w	r3, r3, #7
    d3ea:	sub.w	sp, sp, r3
    d3ee:	mov	r6, sp
    d3f0:	mov	r0, r6
    d3f2:	blx	6b90 <mbstowcs@plt>
    d3f6:	subs	r5, r0, #0
    d3f8:	blt.n	d45c <RichString_write@@Base+0xa4>
    d3fa:	cmp.w	r5, #350	; 0x15e
    d3fe:	bge.n	d476 <RichString_write@@Base+0xbe>
    d400:	ldr	r3, [r4, #0]
    d402:	cmp.w	r3, #350	; 0x15e
    d406:	bge.n	d476 <RichString_write@@Base+0xbe>
    d408:	movs	r1, #28
    d40a:	ldr	r0, [r4, #4]
    d40c:	mul.w	r1, r1, r5
    d410:	movs	r3, #0
    d412:	adds	r2, r0, r1
    d414:	str	r3, [r0, r1]
    d416:	strd	r3, r3, [r2, #4]
    d41a:	strd	r3, r3, [r2, #12]
    d41e:	strd	r3, r3, [r2, #20]
    d422:	str	r5, [r4, #0]
    d424:	cbz	r5, d45c <RichString_write@@Base+0xa4>
    d426:	ldr	r4, [r4, #4]
    d428:	bic.w	r8, r8, #4278190080	; 0xff000000
    d42c:	add.w	fp, r6, r5, lsl #2
    d430:	movs	r5, #0
    d432:	ldr.w	sl, [r6], #4
    d436:	mov	r0, sl
    d438:	blx	6848 <iswprint@plt>
    d43c:	strd	r5, r5, [r4, #8]
    d440:	str	r5, [r4, #16]
    d442:	strd	r5, r5, [r4, #20]
    d446:	adds	r4, #28
    d448:	str.w	r8, [r4, #-28]
    d44c:	cmp	r0, #0
    d44e:	it	eq
    d450:	moveq.w	sl, #63	; 0x3f
    d454:	cmp	fp, r6
    d456:	str.w	sl, [r4, #-24]
    d45a:	bne.n	d432 <RichString_write@@Base+0x7a>
    d45c:	ldr	r2, [pc, #44]	; (d48c <RichString_write@@Base+0xd4>)
    d45e:	mov	sp, r9
    d460:	ldr	r3, [pc, #36]	; (d488 <RichString_write@@Base+0xd0>)
    d462:	add	r2, pc
    d464:	ldr	r3, [r2, r3]
    d466:	ldr	r2, [r3, #0]
    d468:	ldr	r3, [r7, #4]
    d46a:	eors	r2, r3
    d46c:	bne.n	d480 <RichString_write@@Base+0xc8>
    d46e:	adds	r7, #12
    d470:	mov	sp, r7
    d472:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d476:	mov	r1, r5
    d478:	mov	r0, r4
    d47a:	bl	d0a4 <ProcessList_scan@@Base+0x64>
    d47e:	b.n	d424 <RichString_write@@Base+0x6c>
    d480:	blx	67d0 <__stack_chk_fail@plt>
    d484:	ldmia	r1!, {r2, r6}
    d486:	movs	r1, r0
    d488:	lsls	r0, r0, #9
    d48a:	movs	r0, r0
    d48c:	ldmia	r0!, {r1, r3, r5, r7}
    d48e:	movs	r1, r0

0000d490 <ScreenManager_new@@Base>:
    d490:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d494:	mov	r9, r0
    d496:	movs	r0, #40	; 0x28
    d498:	ldrb.w	r8, [sp, #44]	; 0x2c
    d49c:	mov	r7, r1
    d49e:	mov	r6, r2
    d4a0:	mov	r5, r3
    d4a2:	bl	11d84 <xMalloc@@Base>
    d4a6:	ldr.w	ip, [pc, #72]	; d4f0 <ScreenManager_new@@Base+0x60>
    d4aa:	mov	r1, r8
    d4ac:	ldr	r3, [sp, #32]
    d4ae:	mov.w	r2, #4294967295	; 0xffffffff
    d4b2:	ldr.w	lr, [pc, #64]	; d4f4 <ScreenManager_new@@Base+0x64>
    d4b6:	add	ip, pc
    d4b8:	mov	r4, r0
    d4ba:	str.w	r9, [r0]
    d4be:	mov	r0, ip
    d4c0:	str	r3, [r4, #16]
    d4c2:	str	r7, [r4, #4]
    d4c4:	str	r6, [r4, #8]
    d4c6:	str	r5, [r4, #12]
    d4c8:	ldr.w	r0, [ip, lr]
    d4cc:	bl	f6dc <Vector_new@@Base>
    d4d0:	ldr	r3, [sp, #36]	; 0x24
    d4d2:	movs	r2, #0
    d4d4:	strb.w	r8, [r4, #36]	; 0x24
    d4d8:	str	r3, [r4, #28]
    d4da:	ldr	r3, [sp, #40]	; 0x28
    d4dc:	str	r3, [r4, #32]
    d4de:	movs	r3, #1
    d4e0:	strb.w	r3, [r4, #37]	; 0x25
    d4e4:	mov	r1, r0
    d4e6:	mov	r0, r4
    d4e8:	strd	r1, r2, [r4, #20]
    d4ec:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    d4f0:	ldmia	r0!, {r1, r2, r4, r6}
    d4f2:	movs	r1, r0
    d4f4:	lsls	r4, r6, #10
	...

0000d4f8 <ScreenManager_delete@@Base>:
    d4f8:	push	{r4, lr}
    d4fa:	mov	r4, r0
    d4fc:	ldr	r0, [r0, #20]
    d4fe:	bl	f720 <Vector_delete@@Base>
    d502:	mov	r0, r4
    d504:	ldmia.w	sp!, {r4, lr}
    d508:	b.w	6754 <free@plt>

0000d50c <ScreenManager_size@@Base>:
    d50c:	ldr	r0, [r0, #24]
    d50e:	bx	lr

0000d510 <ScreenManager_add@@Base>:
    d510:	push	{r3, r4, r5, r6, r7, lr}
    d512:	mov	r4, r0
    d514:	ldr	r3, [r0, #16]
    d516:	mov	r5, r1
    d518:	ldr	r6, [pc, #128]	; (d59c <ScreenManager_add@@Base+0x8c>)
    d51a:	cmp	r3, #1
    d51c:	add	r6, pc
    d51e:	beq.n	d536 <ScreenManager_add@@Base+0x26>
    d520:	ldr	r0, [r4, #20]
    d522:	mov	r1, r5
    d524:	bl	f92c <Vector_add@@Base>
    d528:	ldr	r3, [r4, #24]
    d52a:	movs	r2, #1
    d52c:	strb.w	r2, [r5, #50]	; 0x32
    d530:	add	r3, r2
    d532:	str	r3, [r4, #24]
    d534:	pop	{r3, r4, r5, r6, r7, pc}
    d536:	ldr	r3, [r0, #24]
    d538:	mov	r1, r2
    d53a:	cmp	r3, #0
    d53c:	it	le
    d53e:	movle	r7, #0
    d540:	ble.n	d558 <ScreenManager_add@@Base+0x48>
    d542:	ldr	r2, [r0, #20]
    d544:	add.w	r3, r3, #1073741824	; 0x40000000
    d548:	subs	r3, #1
    d54a:	ldr	r2, [r2, #0]
    d54c:	ldr.w	r3, [r2, r3, lsl #2]
    d550:	ldr	r7, [r3, #4]
    d552:	ldr	r3, [r3, #12]
    d554:	add	r7, r3
    d556:	adds	r7, #1
    d558:	ldr	r3, [pc, #68]	; (d5a0 <ScreenManager_add@@Base+0x90>)
    d55a:	cmp	r1, #0
    d55c:	ldr	r0, [r4, #4]
    d55e:	ldr	r2, [r4, #12]
    d560:	ldr	r3, [r6, r3]
    d562:	ldr	r3, [r3, #0]
    d564:	sub.w	r3, r3, r0
    d568:	add	r2, r3
    d56a:	ble.n	d57e <ScreenManager_add@@Base+0x6e>
    d56c:	mov	r0, r5
    d56e:	bl	b260 <Panel_resize@@Base>
    d572:	ldr	r2, [r4, #4]
    d574:	mov	r1, r7
    d576:	mov	r0, r5
    d578:	bl	b254 <Panel_move@@Base>
    d57c:	b.n	d520 <ScreenManager_add@@Base+0x10>
    d57e:	ldr.w	ip, [pc, #36]	; d5a4 <ScreenManager_add@@Base+0x94>
    d582:	mov	r0, r5
    d584:	ldr	r1, [r4, #0]
    d586:	ldr	r3, [r4, #8]
    d588:	ldr.w	r6, [r6, ip]
    d58c:	ldr	r6, [r6, #0]
    d58e:	subs	r1, r6, r1
    d590:	add	r1, r3
    d592:	subs	r1, r1, r7
    d594:	bl	b260 <Panel_resize@@Base>
    d598:	b.n	d572 <ScreenManager_add@@Base+0x62>
    d59a:	nop
    d59c:	stmia	r7!, {r4, r5, r6, r7}
    d59e:	movs	r1, r0
    d5a0:	lsls	r0, r2, #11
    d5a2:	movs	r0, r0
    d5a4:	lsls	r0, r7, #10
	...

0000d5a8 <ScreenManager_remove@@Base>:
    d5a8:	push	{r4, lr}
    d5aa:	mov	r4, r0
    d5ac:	ldr	r0, [r0, #20]
    d5ae:	bl	f874 <Vector_remove@@Base>
    d5b2:	ldr	r3, [r4, #24]
    d5b4:	subs	r3, #1
    d5b6:	str	r3, [r4, #24]
    d5b8:	pop	{r4, pc}
    d5ba:	nop

0000d5bc <ScreenManager_resize@@Base>:
    d5bc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d5c0:	sub	sp, #20
    d5c2:	mov	r6, r0
    d5c4:	ldr	r0, [r0, #16]
    d5c6:	ldr.w	r8, [sp, #56]	; 0x38
    d5ca:	mov	r7, r2
    d5cc:	str	r3, [sp, #8]
    d5ce:	cmp	r0, #1
    d5d0:	str	r1, [sp, #4]
    d5d2:	strd	r3, r8, [r6, #8]
    d5d6:	ldr	r3, [pc, #172]	; (d684 <ScreenManager_resize@@Base+0xc8>)
    d5d8:	strd	r1, r2, [r6]
    d5dc:	add	r3, pc
    d5de:	str	r3, [sp, #0]
    d5e0:	beq.n	d5e8 <ScreenManager_resize@@Base+0x2c>
    d5e2:	add	sp, #20
    d5e4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d5e8:	ldr	r2, [r6, #24]
    d5ea:	ldr	r3, [pc, #156]	; (d688 <ScreenManager_resize@@Base+0xcc>)
    d5ec:	cmp	r2, #1
    d5ee:	str	r2, [sp, #12]
    d5f0:	ble.n	d678 <ScreenManager_resize@@Base+0xbc>
    d5f2:	add.w	fp, r2, #4294967295	; 0xffffffff
    d5f6:	ldr	r2, [sp, #0]
    d5f8:	movs	r5, #0
    d5fa:	mov	r4, r5
    d5fc:	mov	sl, r5
    d5fe:	ldr.w	r9, [r2, r3]
    d602:	ldr	r3, [r6, #20]
    d604:	ldr.w	r2, [r9]
    d608:	ldr	r3, [r3, #0]
    d60a:	subs	r2, r2, r7
    d60c:	add	r2, r8
    d60e:	ldr.w	r5, [r3, sl, lsl #2]
    d612:	add.w	sl, sl, #1
    d616:	ldr	r1, [r5, #12]
    d618:	mov	r0, r5
    d61a:	bl	b260 <Panel_resize@@Base>
    d61e:	mov	r1, r4
    d620:	mov	r2, r7
    d622:	mov	r0, r5
    d624:	bl	b254 <Panel_move@@Base>
    d628:	ldr	r4, [r5, #4]
    d62a:	ldr	r3, [r5, #12]
    d62c:	cmp	sl, fp
    d62e:	add	r4, r3
    d630:	add.w	r4, r4, #1
    d634:	bne.n	d602 <ScreenManager_resize@@Base+0x46>
    d636:	ldr	r1, [pc, #84]	; (d68c <ScreenManager_resize@@Base+0xd0>)
    d638:	ldr	r3, [sp, #12]
    d63a:	ldr	r5, [r6, #20]
    d63c:	add.w	r0, r3, #1073741824	; 0x40000000
    d640:	mov	r3, r1
    d642:	ldr	r1, [sp, #0]
    d644:	subs	r0, #1
    d646:	ldr	r5, [r5, #0]
    d648:	ldr.w	r2, [r9]
    d64c:	ldr	r3, [r1, r3]
    d64e:	ldr.w	r0, [r5, r0, lsl #2]
    d652:	subs	r2, r2, r7
    d654:	add	r2, r8
    d656:	ldr	r1, [r3, #0]
    d658:	ldr	r3, [sp, #4]
    d65a:	str	r0, [sp, #0]
    d65c:	subs	r1, r1, r3
    d65e:	ldr	r3, [sp, #8]
    d660:	add	r1, r3
    d662:	subs	r1, r1, r4
    d664:	bl	b260 <Panel_resize@@Base>
    d668:	ldr	r0, [sp, #0]
    d66a:	mov	r2, r7
    d66c:	mov	r1, r4
    d66e:	add	sp, #20
    d670:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d674:	b.w	b254 <Panel_move@@Base>
    d678:	ldr	r2, [sp, #0]
    d67a:	movs	r4, #0
    d67c:	ldr.w	r9, [r2, r3]
    d680:	b.n	d636 <ScreenManager_resize@@Base+0x7a>
    d682:	nop
    d684:	stmia	r7!, {r4, r5}
    d686:	movs	r1, r0
    d688:	lsls	r0, r2, #11
    d68a:	movs	r0, r0
    d68c:	lsls	r0, r7, #10
	...

0000d690 <ScreenManager_run@@Base>:
    d690:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d694:	mov	r5, r0
    d696:	vpush	{d8-d13}
    d69a:	mov	r0, r1
    d69c:	ldr	r3, [r5, #20]
    d69e:	movs	r1, #0
    d6a0:	mov	r6, r1
    d6a2:	movs	r7, #1
    d6a4:	vmov.f64	d11, #36	; 0x41200000  10.0
    d6a8:	mov	r9, r1
    d6aa:	sub	sp, #68	; 0x44
    d6ac:	ldr	r3, [r3, #0]
    d6ae:	mov	fp, r1
    d6b0:	vldr	d9, [pc, #628]	; d928 <ScreenManager_run@@Base+0x298>
    d6b4:	strd	r0, r2, [sp, #28]
    d6b8:	ldr	r0, [pc, #636]	; (d938 <ScreenManager_run@@Base+0x2a8>)
    d6ba:	ldr	r2, [pc, #640]	; (d93c <ScreenManager_run@@Base+0x2ac>)
    d6bc:	add	r0, pc
    d6be:	ldr.w	r8, [r3]
    d6c2:	mov.w	r3, #4294967295	; 0xffffffff
    d6c6:	vldr	d10, [pc, #616]	; d930 <ScreenManager_run@@Base+0x2a0>
    d6ca:	ldr	r2, [r0, r2]
    d6cc:	ldr.w	r0, [r8, #52]	; 0x34
    d6d0:	ldr	r2, [r2, #0]
    d6d2:	str	r2, [sp, #60]	; 0x3c
    d6d4:	mov.w	r2, #0
    d6d8:	ldr	r2, [pc, #612]	; (d940 <ScreenManager_run@@Base+0x2b0>)
    d6da:	str	r3, [sp, #16]
    d6dc:	add	r2, pc
    d6de:	str	r1, [sp, #24]
    d6e0:	str	r2, [sp, #36]	; 0x24
    d6e2:	mov	r4, r2
    d6e4:	str	r7, [sp, #20]
    d6e6:	bl	9420 <FunctionBar_draw@@Base>
    d6ea:	ldr	r3, [pc, #600]	; (d944 <ScreenManager_run@@Base+0x2b4>)
    d6ec:	ldr	r3, [r4, r3]
    d6ee:	str	r3, [sp, #12]
    d6f0:	ldr	r3, [r5, #28]
    d6f2:	cmp	r3, #0
    d6f4:	beq.w	d8ae <ScreenManager_run@@Base+0x21e>
    d6f8:	add	r0, sp, #40	; 0x28
    d6fa:	movs	r1, #0
    d6fc:	ldr	r4, [r3, #8]
    d6fe:	blx	68a8 <gettimeofday@plt>
    d702:	vldr	s15, [sp, #44]	; 0x2c
    d706:	ldr	r3, [r5, #32]
    d708:	vcvt.f64.s32	d7, s15
    d70c:	vldr	s24, [r3, #40]	; 0x28
    d710:	vdiv.f64	d8, d7, d10
    d714:	vldr	s15, [sp, #40]	; 0x28
    d718:	vcvt.f64.s32	d7, s15
    d71c:	vcvt.f64.s32	d12, s24
    d720:	vmla.f64	d8, d7, d11
    d724:	vsub.f64	d13, d8, d9
    d728:	cmp.w	r9, #0
    d72c:	beq.w	d9c2 <ScreenManager_run@@Base+0x332>
    d730:	mov	r0, r4
    d732:	bl	d040 <ProcessList_scan@@Base>
    d736:	cbz	r6, d740 <ScreenManager_run@@Base+0xb0>
    d738:	ldr	r3, [r5, #32]
    d73a:	ldrb.w	r3, [r3, #58]	; 0x3a
    d73e:	cbz	r3, d748 <ScreenManager_run@@Base+0xb8>
    d740:	mov	r0, r4
    d742:	movs	r6, #1
    d744:	bl	cde4 <ProcessList_sort@@Base>
    d748:	vcmpe.f64	d13, d12
    d74c:	mov	r0, r4
    d74e:	mov.w	r9, #0
    d752:	vmrs	APSR_nzcv, fpscr
    d756:	ite	gt
    d758:	movgt	r3, #1
    d75a:	movle	r3, r9
    d75c:	str	r3, [sp, #20]
    d75e:	bl	cf60 <ProcessList_rebuildPanel@@Base>
    d762:	ldr	r0, [r5, #28]
    d764:	vmov.f64	d9, d8
    d768:	bl	9964 <Header_draw@@Base>
    d76c:	ldr	r7, [r5, #24]
    d76e:	cmp	r7, #0
    d770:	ble.n	d7c2 <ScreenManager_run@@Base+0x132>
    d772:	movs	r4, #0
    d774:	mov	sl, r7
    d776:	b.n	d77e <ScreenManager_run@@Base+0xee>
    d778:	adds	r4, #1
    d77a:	cmp	sl, r4
    d77c:	beq.n	d7c2 <ScreenManager_run@@Base+0x132>
    d77e:	ldr	r2, [r5, #20]
    d780:	sub.w	r1, r4, fp
    d784:	clz	r1, r1
    d788:	ldr	r2, [r2, #0]
    d78a:	lsrs	r1, r1, #5
    d78c:	ldr.w	r7, [r2, r4, lsl #2]
    d790:	mov	r0, r7
    d792:	bl	b370 <Panel_draw@@Base>
    d796:	ldr	r2, [r5, #16]
    d798:	cmp	r2, #1
    d79a:	bne.n	d778 <ScreenManager_run@@Base+0xe8>
    d79c:	adds	r0, r7, #4
    d79e:	ldr	r3, [sp, #12]
    d7a0:	ldmia	r0, {r0, r1, r2}
    d7a2:	add	r2, r0
    d7a4:	ldr	r0, [r3, #0]
    d7a6:	blx	6668 <wmove@plt>
    d7aa:	adds	r0, #1
    d7ac:	beq.n	d778 <ScreenManager_run@@Base+0xe8>
    d7ae:	ldr	r3, [sp, #12]
    d7b0:	adds	r4, #1
    d7b2:	ldr	r2, [r7, #16]
    d7b4:	movs	r1, #32
    d7b6:	ldr	r0, [r3, #0]
    d7b8:	adds	r2, #1
    d7ba:	blx	6990 <wvline@plt>
    d7be:	cmp	sl, r4
    d7c0:	bne.n	d77e <ScreenManager_run@@Base+0xee>
    d7c2:	movs	r0, #25
    d7c4:	blx	686c <set_escdelay@plt>
    d7c8:	ldr	r3, [sp, #12]
    d7ca:	ldr	r0, [r3, #0]
    d7cc:	blx	6860 <wgetch@plt>
    d7d0:	movw	r3, #409	; 0x199
    d7d4:	cmp	r0, r3
    d7d6:	mov	r4, r0
    d7d8:	beq.n	d8b6 <ScreenManager_run@@Base+0x226>
    d7da:	adds	r7, r4, #1
    d7dc:	beq.n	d8dc <ScreenManager_run@@Base+0x24c>
    d7de:	mvn.w	r0, #308	; 0x134
    d7e2:	adds	r3, r4, r0
    d7e4:	cmp	r3, #4
    d7e6:	bhi.n	d7f6 <ScreenManager_run@@Base+0x166>
    d7e8:	tbb	[pc, r3]
    d7ec:	lsls	r3, r0, #20
    d7ee:	ldrh	r6, [r3, r5]
    d7f0:	movs	r1, r7
    d7f2:	mov.w	r4, #260	; 0x104
    d7f6:	ldr.w	r3, [r8]
    d7fa:	ldr	r3, [r3, #16]
    d7fc:	cmp	r3, #0
    d7fe:	beq.n	d86c <ScreenManager_run@@Base+0x1dc>
    d800:	mov	r1, r4
    d802:	mov	r0, r8
    d804:	blx	r3
    d806:	lsls	r1, r0, #26
    d808:	itee	pl
    d80a:	strpl	r4, [sp, #16]
    d80c:	lsrmi	r3, r0, #16
    d80e:	strmi	r3, [sp, #16]
    d810:	tst.w	r0, #8
    d814:	and.w	r3, r0, #16
    d818:	it	ne
    d81a:	movne	r6, #0
    d81c:	cmp	r3, #0
    d81e:	itt	ne
    d820:	movne	r6, #0
    d822:	movne.w	r9, #1
    d826:	lsls	r2, r0, #31
    d828:	bmi.w	d9be <ScreenManager_run@@Base+0x32e>
    d82c:	lsls	r3, r0, #29
    d82e:	bpl.w	d9f0 <ScreenManager_run@@Base+0x360>
    d832:	ldr	r3, [sp, #28]
    d834:	cbz	r3, d83a <ScreenManager_run@@Base+0x1aa>
    d836:	str.w	r8, [r3]
    d83a:	ldr	r3, [sp, #32]
    d83c:	cbz	r3, d842 <ScreenManager_run@@Base+0x1b2>
    d83e:	ldr	r2, [sp, #16]
    d840:	str	r2, [r3, #0]
    d842:	ldr	r2, [pc, #260]	; (d948 <ScreenManager_run@@Base+0x2b8>)
    d844:	ldr	r3, [pc, #244]	; (d93c <ScreenManager_run@@Base+0x2ac>)
    d846:	add	r2, pc
    d848:	ldr	r3, [r2, r3]
    d84a:	ldr	r2, [r3, #0]
    d84c:	ldr	r3, [sp, #60]	; 0x3c
    d84e:	eors	r2, r3
    d850:	bne.w	db08 <ScreenManager_run@@Base+0x478>
    d854:	add	sp, #68	; 0x44
    d856:	vpop	{d8-d13}
    d85a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d85e:	ldr.w	r3, [r8]
    d862:	movw	r4, #261	; 0x105
    d866:	ldr	r3, [r3, #16]
    d868:	cmp	r3, #0
    d86a:	bne.n	d800 <ScreenManager_run@@Base+0x170>
    d86c:	cmp.w	r4, #260	; 0x104
    d870:	beq.n	d90c <ScreenManager_run@@Base+0x27c>
    d872:	bgt.w	d994 <ScreenManager_run@@Base+0x304>
    d876:	cmp	r4, #27
    d878:	bgt.n	d8f8 <ScreenManager_run@@Base+0x268>
    d87a:	cmp	r4, #1
    d87c:	ble.n	d8fc <ScreenManager_run@@Base+0x26c>
    d87e:	subs	r3, r4, #2
    d880:	cmp	r3, #25
    d882:	bhi.n	d8fc <ScreenManager_run@@Base+0x26c>
    d884:	tbb	[pc, r3]
    d888:	subs	r2, #66	; 0x42
    d88a:	subs	r2, #58	; 0x3a
    d88c:	subs	r2, #147	; 0x93
    d88e:	str	r3, [sp, #232]	; 0xe8
    d890:	subs	r2, #58	; 0x3a
    d892:	subs	r2, #58	; 0x3a
    d894:	subs	r2, #58	; 0x3a
    d896:	subs	r2, #58	; 0x3a
    d898:	subs	r2, #58	; 0x3a
    d89a:	subs	r2, #58	; 0x3a
    d89c:	subs	r2, #58	; 0x3a
    d89e:	subs	r2, #58	; 0x3a
    d8a0:	str	r1, [sp, #232]	; 0xe8
    d8a2:	movw	r4, #259	; 0x103
    d8a6:	b.n	d7f6 <ScreenManager_run@@Base+0x166>
    d8a8:	mov.w	r4, #258	; 0x102
    d8ac:	b.n	d7f6 <ScreenManager_run@@Base+0x166>
    d8ae:	cmp	r7, #0
    d8b0:	bne.w	d76c <ScreenManager_run@@Base+0xdc>
    d8b4:	b.n	d7c2 <ScreenManager_run@@Base+0x132>
    d8b6:	add	r0, sp, #40	; 0x28
    d8b8:	blx	668c <getmouse@plt>
    d8bc:	mov	r7, r0
    d8be:	cbnz	r0, d8dc <ScreenManager_run@@Base+0x24c>
    d8c0:	ldr	r3, [sp, #56]	; 0x38
    d8c2:	lsls	r0, r3, #31
    d8c4:	bmi.w	da0a <ScreenManager_run@@Base+0x37a>
    d8c8:	lsls	r2, r3, #15
    d8ca:	it	mi
    d8cc:	movmi.w	r4, #284	; 0x11c
    d8d0:	bmi.n	d7f6 <ScreenManager_run@@Base+0x166>
    d8d2:	lsls	r3, r3, #10
    d8d4:	it	mi
    d8d6:	movwmi	r4, #285	; 0x11d
    d8da:	bmi.n	d7f6 <ScreenManager_run@@Base+0x166>
    d8dc:	ldr	r3, [sp, #16]
    d8de:	subs	r6, #1
    d8e0:	adds	r3, #1
    d8e2:	bne.n	d9e4 <ScreenManager_run@@Base+0x354>
    d8e4:	ldr	r7, [sp, #20]
    d8e6:	cmp	r7, #0
    d8e8:	bne.w	da5c <ScreenManager_run@@Base+0x3cc>
    d8ec:	ldr	r3, [sp, #24]
    d8ee:	adds	r3, #1
    d8f0:	str	r3, [sp, #24]
    d8f2:	cmp	r3, #100	; 0x64
    d8f4:	beq.n	d832 <ScreenManager_run@@Base+0x1a2>
    d8f6:	b.n	d6f0 <ScreenManager_run@@Base+0x60>
    d8f8:	cmp	r4, #113	; 0x71
    d8fa:	beq.n	d9aa <ScreenManager_run@@Base+0x31a>
    d8fc:	mov	r1, r4
    d8fe:	mov	r0, r8
    d900:	str	r4, [sp, #16]
    d902:	movs	r6, #5
    d904:	bl	b7ec <Panel_onKey@@Base>
    d908:	movs	r7, #1
    d90a:	b.n	d6f0 <ScreenManager_run@@Base+0x60>
    d90c:	ldr	r3, [r5, #24]
    d90e:	cmp	r3, #1
    d910:	ble.n	d8fc <ScreenManager_run@@Base+0x26c>
    d912:	ldrb.w	r7, [r5, #37]	; 0x25
    d916:	cmp	r7, #0
    d918:	beq.n	d9bc <ScreenManager_run@@Base+0x32c>
    d91a:	mov	r8, r4
    d91c:	mov	sl, r5
    d91e:	mov	r4, fp
    d920:	b.n	d96c <ScreenManager_run@@Base+0x2dc>
    d922:	nop
    d924:	nop.w
	...
    d934:	ldr	r0, [r0, #32]
    d936:	lsrs	r0, r7
    d938:	stmia	r6!, {r4, r6}
    d93a:	movs	r1, r0
    d93c:	lsls	r0, r0, #9
    d93e:	movs	r0, r0
    d940:	stmia	r6!, {r4, r5}
    d942:	movs	r1, r0
    d944:	lsls	r4, r5, #9
    d946:	movs	r0, r0
    d948:	stmia	r4!, {r1, r2, r6, r7}
    d94a:	movs	r1, r0
    d94c:	subs	r4, #1
    d94e:	movs	r1, #0
    d950:	ldr.w	r5, [r3, r4, lsl #2]
    d954:	ldr	r0, [r5, #52]	; 0x34
    d956:	bl	9420 <FunctionBar_draw@@Base>
    d95a:	mov	r0, r5
    d95c:	bl	b348 <Panel_size@@Base>
    d960:	cmp	r0, #0
    d962:	bne.w	daa0 <ScreenManager_run@@Base+0x410>
    d966:	cmp	r4, #0
    d968:	beq.w	daa0 <ScreenManager_run@@Base+0x410>
    d96c:	ldr.w	r3, [sl, #20]
    d970:	ldr	r3, [r3, #0]
    d972:	cmp	r4, #0
    d974:	bne.n	d94c <ScreenManager_run@@Base+0x2bc>
    d976:	mov	fp, r4
    d978:	mov	r4, r8
    d97a:	ldr.w	r8, [r3]
    d97e:	mov	r1, fp
    d980:	str	r4, [sp, #16]
    d982:	mov	r5, sl
    d984:	ldr.w	r0, [r8, #52]	; 0x34
    d988:	bl	9420 <FunctionBar_draw@@Base>
    d98c:	mov	r0, r8
    d98e:	bl	b348 <Panel_size@@Base>
    d992:	b.n	d6f0 <ScreenManager_run@@Base+0x60>
    d994:	cmp.w	r4, #410	; 0x19a
    d998:	beq.n	d9f4 <ScreenManager_run@@Base+0x364>
    d99a:	bgt.n	d8fc <ScreenManager_run@@Base+0x26c>
    d99c:	movw	r3, #261	; 0x105
    d9a0:	cmp	r4, r3
    d9a2:	beq.n	d9ae <ScreenManager_run@@Base+0x31e>
    d9a4:	cmp.w	r4, #274	; 0x112
    d9a8:	bne.n	d8fc <ScreenManager_run@@Base+0x26c>
    d9aa:	str	r4, [sp, #16]
    d9ac:	b.n	d832 <ScreenManager_run@@Base+0x1a2>
    d9ae:	ldr	r3, [r5, #24]
    d9b0:	cmp	r3, #1
    d9b2:	ble.n	d8fc <ScreenManager_run@@Base+0x26c>
    d9b4:	ldrb.w	r7, [r5, #37]	; 0x25
    d9b8:	cmp	r7, #0
    d9ba:	bne.n	da72 <ScreenManager_run@@Base+0x3e2>
    d9bc:	str	r4, [sp, #16]
    d9be:	movs	r7, #1
    d9c0:	b.n	d6f0 <ScreenManager_run@@Base+0x60>
    d9c2:	vcmpe.f64	d13, d12
    d9c6:	vmrs	APSR_nzcv, fpscr
    d9ca:	bgt.w	d730 <ScreenManager_run@@Base+0xa0>
    d9ce:	vcmpe.f64	d8, d9
    d9d2:	vmrs	APSR_nzcv, fpscr
    d9d6:	bmi.w	d730 <ScreenManager_run@@Base+0xa0>
    d9da:	cmp	r7, #0
    d9dc:	bne.n	daac <ScreenManager_run@@Base+0x41c>
    d9de:	str.w	r9, [sp, #20]
    d9e2:	b.n	d7c2 <ScreenManager_run@@Base+0x132>
    d9e4:	movs	r7, #0
    d9e6:	mov.w	r3, #4294967295	; 0xffffffff
    d9ea:	str	r7, [sp, #24]
    d9ec:	str	r3, [sp, #16]
    d9ee:	b.n	d6f0 <ScreenManager_run@@Base+0x60>
    d9f0:	ldr	r4, [sp, #16]
    d9f2:	b.n	d86c <ScreenManager_run@@Base+0x1dc>
    d9f4:	ldr	r1, [r5, #12]
    d9f6:	mov	r0, r5
    d9f8:	ldr	r3, [r5, #8]
    d9fa:	movs	r7, #1
    d9fc:	ldr	r2, [r5, #4]
    d9fe:	str	r1, [sp, #0]
    da00:	ldr	r1, [r5, #0]
    da02:	str	r4, [sp, #16]
    da04:	bl	d5bc <ScreenManager_resize@@Base>
    da08:	b.n	d6f0 <ScreenManager_run@@Base+0x60>
    da0a:	ldr	r3, [pc, #256]	; (db0c <ScreenManager_run@@Base+0x47c>)
    da0c:	ldr	r2, [sp, #36]	; 0x24
    da0e:	ldr.w	sl, [sp, #48]	; 0x30
    da12:	ldr	r3, [r2, r3]
    da14:	ldr	r3, [r3, #0]
    da16:	subs	r3, #1
    da18:	cmp	sl, r3
    da1a:	beq.n	da64 <ScreenManager_run@@Base+0x3d4>
    da1c:	ldr.w	ip, [r5, #24]
    da20:	cmp.w	ip, #0
    da24:	ble.w	d8dc <ScreenManager_run@@Base+0x24c>
    da28:	ldr	r3, [r5, #20]
    da2a:	ldr	r0, [sp, #44]	; 0x2c
    da2c:	ldr	r3, [r3, #0]
    da2e:	sub.w	lr, r3, #4
    da32:	ldr.w	r3, [lr, #4]!
    da36:	ldr	r2, [r3, #4]
    da38:	cmp	r0, r2
    da3a:	blt.n	da54 <ScreenManager_run@@Base+0x3c4>
    da3c:	ldr	r1, [r3, #12]
    da3e:	add	r1, r2
    da40:	cmp	r0, r1
    da42:	bgt.n	da54 <ScreenManager_run@@Base+0x3c4>
    da44:	ldr	r1, [r3, #8]
    da46:	cmp	sl, r1
    da48:	beq.n	dab2 <ScreenManager_run@@Base+0x422>
    da4a:	ble.n	da54 <ScreenManager_run@@Base+0x3c4>
    da4c:	ldr	r2, [r3, #16]
    da4e:	add	r2, r1
    da50:	cmp	sl, r2
    da52:	ble.n	dabc <ScreenManager_run@@Base+0x42c>
    da54:	adds	r7, #1
    da56:	cmp	r7, ip
    da58:	bne.n	da32 <ScreenManager_run@@Base+0x3a2>
    da5a:	b.n	d8dc <ScreenManager_run@@Base+0x24c>
    da5c:	movs	r3, #0
    da5e:	str	r3, [sp, #24]
    da60:	mov	r7, r3
    da62:	b.n	d6f0 <ScreenManager_run@@Base+0x60>
    da64:	ldr	r1, [sp, #44]	; 0x2c
    da66:	ldr.w	r0, [r8, #52]	; 0x34
    da6a:	bl	9438 <FunctionBar_synthesizeEvent@@Base>
    da6e:	mov	r4, r0
    da70:	b.n	d7da <ScreenManager_run@@Base+0x14a>
    da72:	subs	r3, #1
    da74:	cmp	r3, fp
    da76:	bgt.n	da9a <ScreenManager_run@@Base+0x40a>
    da78:	ldr	r3, [r5, #20]
    da7a:	movs	r1, #0
    da7c:	ldr	r3, [r3, #0]
    da7e:	ldr.w	r8, [r3, fp, lsl #2]
    da82:	ldr.w	r0, [r8, #52]	; 0x34
    da86:	bl	9420 <FunctionBar_draw@@Base>
    da8a:	mov	r0, r8
    da8c:	bl	b348 <Panel_size@@Base>
    da90:	cbnz	r0, daa8 <ScreenManager_run@@Base+0x418>
    da92:	ldr	r3, [r5, #24]
    da94:	subs	r3, #1
    da96:	cmp	r3, fp
    da98:	ble.n	daa8 <ScreenManager_run@@Base+0x418>
    da9a:	add.w	fp, fp, #1
    da9e:	b.n	da78 <ScreenManager_run@@Base+0x3e8>
    daa0:	mov	fp, r4
    daa2:	mov	r4, r8
    daa4:	mov	r8, r5
    daa6:	mov	r5, sl
    daa8:	str	r4, [sp, #16]
    daaa:	b.n	d6f0 <ScreenManager_run@@Base+0x60>
    daac:	vmov.f64	d8, d9
    dab0:	b.n	d748 <ScreenManager_run@@Base+0xb8>
    dab2:	sub.w	r0, r0, #9984	; 0x2700
    dab6:	subs	r0, #16
    dab8:	subs	r4, r0, r2
    daba:	b.n	d7da <ScreenManager_run@@Base+0x14a>
    dabc:	cmp	r3, r8
    dabe:	beq.n	daca <ScreenManager_run@@Base+0x43a>
    dac0:	ldrb.w	r2, [r5, #37]	; 0x25
    dac4:	cmp	r2, #0
    dac6:	beq.w	d7f6 <ScreenManager_run@@Base+0x166>
    daca:	ldr	r0, [r3, #52]	; 0x34
    dacc:	movs	r1, #0
    dace:	str	r3, [sp, #16]
    dad0:	bl	9420 <FunctionBar_draw@@Base>
    dad4:	ldr	r3, [sp, #16]
    dad6:	mov	fp, r7
    dad8:	mov	r0, r3
    dada:	bl	b2f8 <Panel_getSelected@@Base>
    dade:	ldr	r3, [sp, #16]
    dae0:	ldr	r1, [sp, #48]	; 0x30
    dae2:	ldr	r2, [r3, #44]	; 0x2c
    dae4:	mov	r8, r3
    dae6:	mov	sl, r0
    dae8:	ldr	r0, [r3, #8]
    daea:	subs	r1, r1, r0
    daec:	mov	r0, r3
    daee:	add	r1, r2
    daf0:	subs	r1, #1
    daf2:	bl	b350 <Panel_setSelected@@Base>
    daf6:	ldr	r3, [sp, #16]
    daf8:	mov	r0, r3
    dafa:	bl	b2f8 <Panel_getSelected@@Base>
    dafe:	cmp	sl, r0
    db00:	it	eq
    db02:	moveq.w	r4, #286	; 0x11e
    db06:	b.n	d7f6 <ScreenManager_run@@Base+0x166>
    db08:	blx	67d0 <__stack_chk_fail@plt>
    db0c:	lsls	r0, r2, #11
    db0e:	movs	r0, r0
    db10:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    db14:	movs	r5, #12
    db16:	mla	r5, r5, r2, r0
    db1a:	sub	sp, #12
    db1c:	mov	r7, r1
    db1e:	ldr	r3, [r5, #4]
    db20:	cmp	r3, #0
    db22:	ble.n	db52 <ScreenManager_run@@Base+0x4c2>
    db24:	ldr	r3, [pc, #60]	; (db64 <ScreenManager_run@@Base+0x4d4>)
    db26:	movs	r4, #0
    db28:	ldr.w	r9, [pc, #60]	; db68 <ScreenManager_run@@Base+0x4d8>
    db2c:	ldr.w	r8, [pc, #60]	; db6c <ScreenManager_run@@Base+0x4dc>
    db30:	add	r3, pc
    db32:	add	r9, pc
    db34:	add	r8, pc
    db36:	ldr	r6, [r5, #8]
    db38:	movs	r1, #1
    db3a:	mov	r2, r9
    db3c:	mov	r0, r7
    db3e:	ldr.w	r6, [r6, r4, lsl #2]
    db42:	add	r4, r1
    db44:	str	r6, [sp, #0]
    db46:	blx	6af4 <__fprintf_chk@plt+0x4>
    db4a:	ldr	r0, [r5, #4]
    db4c:	mov	r3, r8
    db4e:	cmp	r0, r4
    db50:	bgt.n	db36 <ScreenManager_run@@Base+0x4a6>
    db52:	ldr	r2, [pc, #28]	; (db70 <ScreenManager_run@@Base+0x4e0>)
    db54:	mov	r0, r7
    db56:	movs	r1, #1
    db58:	add	r2, pc
    db5a:	add	sp, #12
    db5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
    db60:	b.w	6af0 <__fprintf_chk@plt>
    db64:	ldrh	r0, [r6, #34]	; 0x22
    db66:	movs	r0, r0
    db68:	str	r2, [sp, #344]	; 0x158
    db6a:	movs	r0, r0
    db6c:	ldr	r6, [sp, #864]	; 0x360
    db6e:	movs	r0, r0
    db70:	ldrh	r4, [r3, #36]	; 0x24
    db72:	movs	r0, r0
    db74:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    db78:	movs	r6, #12
    db7a:	mla	r6, r6, r2, r0
    db7e:	sub	sp, #8
    db80:	mov	r7, r1
    db82:	ldr	r3, [r6, #4]
    db84:	cmp	r3, #0
    db86:	ble.n	dbba <ScreenManager_run@@Base+0x52a>
    db88:	ldr	r3, [pc, #64]	; (dbcc <ScreenManager_run@@Base+0x53c>)
    db8a:	movs	r4, #0
    db8c:	ldr.w	sl, [pc, #64]	; dbd0 <ScreenManager_run@@Base+0x540>
    db90:	mov	r9, r6
    db92:	ldr.w	r8, [pc, #64]	; dbd4 <ScreenManager_run@@Base+0x544>
    db96:	add	r3, pc
    db98:	add	sl, pc
    db9a:	add	r8, pc
    db9c:	ldr.w	r5, [r9, #12]
    dba0:	movs	r1, #1
    dba2:	mov	r2, sl
    dba4:	mov	r0, r7
    dba6:	ldr.w	r5, [r5, r4, lsl #2]
    dbaa:	add	r4, r1
    dbac:	str	r5, [sp, #0]
    dbae:	blx	6af4 <__fprintf_chk@plt+0x4>
    dbb2:	ldr	r5, [r6, #4]
    dbb4:	mov	r3, r8
    dbb6:	cmp	r5, r4
    dbb8:	bgt.n	db9c <ScreenManager_run@@Base+0x50c>
    dbba:	ldr	r2, [pc, #28]	; (dbd8 <ScreenManager_run@@Base+0x548>)
    dbbc:	mov	r0, r7
    dbbe:	movs	r1, #1
    dbc0:	add	r2, pc
    dbc2:	add	sp, #8
    dbc4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dbc8:	b.w	6af0 <__fprintf_chk@plt>
    dbcc:	ldrh	r2, [r1, #32]
    dbce:	movs	r0, r0
    dbd0:	str	r1, [sp, #992]	; 0x3e0
    dbd2:	movs	r0, r0
    dbd4:	ldr	r6, [sp, #456]	; 0x1c8
    dbd6:	movs	r0, r0
    dbd8:	ldrh	r4, [r6, #32]
    dbda:	movs	r0, r0
    dbdc:	ldr	r2, [pc, #316]	; (dd1c <ScreenManager_run@@Base+0x68c>)
    dbde:	movs	r1, #4
    dbe0:	ldr	r3, [pc, #316]	; (dd20 <ScreenManager_run@@Base+0x690>)
    dbe2:	add	r2, pc
    dbe4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dbe8:	sub	sp, #16
    dbea:	ldr	r3, [r2, r3]
    dbec:	mov	r4, r0
    dbee:	movs	r2, #3
    dbf0:	ldr	r3, [r3, #0]
    dbf2:	str	r3, [sp, #12]
    dbf4:	mov.w	r3, #0
    dbf8:	ldr	r3, [r0, #44]	; 0x2c
    dbfa:	mov	r0, r1
    dbfc:	str	r2, [sp, #8]
    dbfe:	cmp	r3, #4
    dc00:	itt	gt
    dc02:	movgt	r3, #4
    dc04:	strgt	r3, [sp, #8]
    dc06:	bl	11da0 <xCalloc@@Base>
    dc0a:	movs	r1, #4
    dc0c:	str	r0, [r4, #8]
    dc0e:	movs	r0, #3
    dc10:	bl	11da0 <xCalloc@@Base>
    dc14:	ldr	r5, [sp, #8]
    dc16:	movs	r3, #3
    dc18:	movs	r1, #4
    dc1a:	str	r3, [r4, #4]
    dc1c:	str	r0, [r4, #12]
    dc1e:	adds	r0, r5, #1
    dc20:	bl	11da0 <xCalloc@@Base>
    dc24:	movs	r1, #4
    dc26:	str	r0, [r4, #20]
    dc28:	mov	r0, r5
    dc2a:	bl	11da0 <xCalloc@@Base>
    dc2e:	ldr	r3, [r4, #44]	; 0x2c
    dc30:	str	r5, [r4, #16]
    dc32:	cmp	r3, #8
    dc34:	ldr	r5, [r4, #8]
    dc36:	str	r0, [r4, #24]
    dc38:	bgt.n	dcfc <ScreenManager_run@@Base+0x66c>
    dc3a:	cmp	r3, #4
    dc3c:	bgt.n	dcd0 <ScreenManager_run@@Base+0x640>
    dc3e:	ldr	r0, [pc, #228]	; (dd24 <ScreenManager_run@@Base+0x694>)
    dc40:	movs	r7, #8
    dc42:	mov.w	r8, #4
    dc46:	mov.w	r9, #0
    dc4a:	add	r0, pc
    dc4c:	bl	11de4 <xStrdup@@Base>
    dc50:	ldr	r3, [r4, #12]
    dc52:	movs	r2, #1
    dc54:	str	r0, [r5, #0]
    dc56:	str	r2, [r3, #0]
    dc58:	ldr	r0, [pc, #204]	; (dd28 <ScreenManager_run@@Base+0x698>)
    dc5a:	movs	r6, #1
    dc5c:	ldr	r5, [r4, #8]
    dc5e:	add	r0, pc
    dc60:	bl	11de4 <xStrdup@@Base>
    dc64:	ldr	r3, [r4, #12]
    dc66:	ldr.w	sl, [r4, #8]
    dc6a:	str	r0, [r5, #4]
    dc6c:	movs	r5, #2
    dc6e:	ldr	r0, [pc, #188]	; (dd2c <ScreenManager_run@@Base+0x69c>)
    dc70:	str	r6, [r3, #4]
    dc72:	add	r0, pc
    dc74:	bl	11de4 <xStrdup@@Base>
    dc78:	ldr	r3, [r4, #12]
    dc7a:	str.w	r0, [sl, #8]
    dc7e:	ldr	r0, [pc, #176]	; (dd30 <ScreenManager_run@@Base+0x6a0>)
    dc80:	str	r6, [r3, #8]
    dc82:	add	r0, pc
    dc84:	ldr	r6, [r4, #20]
    dc86:	bl	11de4 <xStrdup@@Base>
    dc8a:	ldr	r3, [r4, #24]
    dc8c:	str.w	r0, [r6, r9]
    dc90:	ldr	r0, [pc, #160]	; (dd34 <ScreenManager_run@@Base+0x6a4>)
    dc92:	str.w	r5, [r3, r9]
    dc96:	add	r0, pc
    dc98:	ldr	r6, [r4, #20]
    dc9a:	bl	11de4 <xStrdup@@Base>
    dc9e:	ldr	r3, [r4, #24]
    dca0:	mov	r2, r0
    dca2:	ldr	r0, [pc, #148]	; (dd38 <ScreenManager_run@@Base+0x6a8>)
    dca4:	str.w	r2, [r6, r8]
    dca8:	add	r0, pc
    dcaa:	str.w	r5, [r3, r8]
    dcae:	ldr	r6, [r4, #20]
    dcb0:	bl	11de4 <xStrdup@@Base>
    dcb4:	ldr	r3, [r4, #24]
    dcb6:	ldr	r2, [pc, #132]	; (dd3c <ScreenManager_run@@Base+0x6ac>)
    dcb8:	add	r2, pc
    dcba:	str	r0, [r6, r7]
    dcbc:	str	r5, [r3, r7]
    dcbe:	ldr	r3, [pc, #96]	; (dd20 <ScreenManager_run@@Base+0x690>)
    dcc0:	ldr	r3, [r2, r3]
    dcc2:	ldr	r2, [r3, #0]
    dcc4:	ldr	r3, [sp, #12]
    dcc6:	eors	r2, r3
    dcc8:	bne.n	dd16 <ScreenManager_run@@Base+0x686>
    dcca:	add	sp, #16
    dccc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dcd0:	ldr	r0, [pc, #108]	; (dd40 <ScreenManager_run@@Base+0x6b0>)
    dcd2:	movs	r6, #1
    dcd4:	movs	r7, #12
    dcd6:	mov.w	r8, #8
    dcda:	add	r0, pc
    dcdc:	bl	11de4 <xStrdup@@Base>
    dce0:	ldr	r3, [r4, #12]
    dce2:	str	r0, [r5, #0]
    dce4:	ldr	r0, [pc, #92]	; (dd44 <ScreenManager_run@@Base+0x6b4>)
    dce6:	add	r0, pc
    dce8:	str	r6, [r3, #0]
    dcea:	mov.w	r9, #4
    dcee:	ldr	r5, [r4, #20]
    dcf0:	bl	11de4 <xStrdup@@Base>
    dcf4:	ldr	r3, [r4, #24]
    dcf6:	str	r0, [r5, #0]
    dcf8:	str	r6, [r3, #0]
    dcfa:	b.n	dc58 <ScreenManager_run@@Base+0x5c8>
    dcfc:	ldr	r0, [pc, #72]	; (dd48 <ScreenManager_run@@Base+0x6b8>)
    dcfe:	movs	r6, #1
    dd00:	movs	r7, #12
    dd02:	mov.w	r8, #8
    dd06:	add	r0, pc
    dd08:	bl	11de4 <xStrdup@@Base>
    dd0c:	ldr	r3, [r4, #12]
    dd0e:	str	r0, [r5, #0]
    dd10:	ldr	r0, [pc, #56]	; (dd4c <ScreenManager_run@@Base+0x6bc>)
    dd12:	add	r0, pc
    dd14:	b.n	dce8 <ScreenManager_run@@Base+0x658>
    dd16:	blx	67d0 <__stack_chk_fail@plt>
    dd1a:	nop
    dd1c:	stmia	r1!, {r1, r3, r5}
    dd1e:	movs	r1, r0
    dd20:	lsls	r0, r0, #9
    dd22:	movs	r0, r0
    dd24:	strh	r2, [r5, #38]	; 0x26
    dd26:	movs	r0, r0
    dd28:	ldrh	r6, [r0, #40]	; 0x28
    dd2a:	movs	r0, r0
    dd2c:	str	r1, [sp, #152]	; 0x98
    dd2e:	movs	r0, r0
    dd30:	str	r1, [sp, #120]	; 0x78
    dd32:	movs	r0, r0
    dd34:	ldrh	r6, [r2, #34]	; 0x22
    dd36:	movs	r0, r0
    dd38:	str	r1, [sp, #0]
    dd3a:	movs	r0, r0
    dd3c:	stmia	r0!, {r2, r4, r6}
    dd3e:	movs	r1, r0
    dd40:	strh	r2, [r3, #30]
    dd42:	movs	r0, r0
    dd44:	strh	r6, [r2, #28]
    dd46:	movs	r0, r0
    dd48:	strh	r2, [r5, #24]
    dd4a:	movs	r0, r0
    dd4c:	strh	r2, [r2, #22]
    dd4e:	movs	r0, r0
    dd50:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dd54:	mov	r8, r2
    dd56:	ldr	r2, [pc, #168]	; (de00 <ScreenManager_run@@Base+0x770>)
    dd58:	sub	sp, #8
    dd5a:	ldr	r3, [pc, #168]	; (de04 <ScreenManager_run@@Base+0x774>)
    dd5c:	mov	r9, r0
    dd5e:	add	r2, pc
    dd60:	mov	r0, r1
    dd62:	ldr	r3, [r2, r3]
    dd64:	ldr	r3, [r3, #0]
    dd66:	str	r3, [sp, #4]
    dd68:	mov.w	r3, #0
    dd6c:	bl	e9e4 <String_trim@@Base>
    dd70:	mov	r2, sp
    dd72:	movs	r1, #32
    dd74:	mov	r4, r0
    dd76:	bl	ea6c <String_split@@Base>
    dd7a:	mov	r7, r0
    dd7c:	mov	r0, r4
    dd7e:	blx	6758 <free@plt+0x4>
    dd82:	ldr	r0, [r7, #0]
    dd84:	cbz	r0, dde8 <ScreenManager_run@@Base+0x758>
    dd86:	mov	r1, r7
    dd88:	movs	r0, #0
    dd8a:	ldr.w	r2, [r1, #4]!
    dd8e:	mov	r5, r0
    dd90:	adds	r0, #1
    dd92:	cmp	r2, #0
    dd94:	bne.n	dd8a <ScreenManager_run@@Base+0x6fa>
    dd96:	movs	r2, #12
    dd98:	movs	r1, #4
    dd9a:	mla	r2, r2, r8, r9
    dd9e:	add.w	r5, r7, r5, lsl #2
    dda2:	subs	r4, r7, #4
    dda4:	str	r0, [r2, #4]
    dda6:	bl	11da0 <xCalloc@@Base>
    ddaa:	subs	r6, r0, #4
    ddac:	mov	sl, r0
    ddae:	ldr.w	r0, [r4, #4]!
    ddb2:	movs	r2, #10
    ddb4:	movs	r1, #0
    ddb6:	blx	66cc <strtol@plt>
    ddba:	cmp	r4, r5
    ddbc:	str.w	r0, [r6, #4]!
    ddc0:	bne.n	ddae <ScreenManager_run@@Base+0x71e>
    ddc2:	mov	r0, r7
    ddc4:	bl	eb24 <String_freeArray@@Base>
    ddc8:	movs	r2, #12
    ddca:	mla	r8, r2, r8, r9
    ddce:	ldr	r2, [pc, #56]	; (de08 <ScreenManager_run@@Base+0x778>)
    ddd0:	ldr	r3, [pc, #48]	; (de04 <ScreenManager_run@@Base+0x774>)
    ddd2:	add	r2, pc
    ddd4:	str.w	sl, [r8, #12]
    ddd8:	ldr	r3, [r2, r3]
    ddda:	ldr	r2, [r3, #0]
    dddc:	ldr	r3, [sp, #4]
    ddde:	eors	r2, r3
    dde0:	bne.n	ddfa <ScreenManager_run@@Base+0x76a>
    dde2:	add	sp, #8
    dde4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    dde8:	movs	r3, #12
    ddea:	movs	r1, #4
    ddec:	mla	r3, r3, r8, r9
    ddf0:	str	r0, [r3, #4]
    ddf2:	bl	11da0 <xCalloc@@Base>
    ddf6:	mov	sl, r0
    ddf8:	b.n	ddc2 <ScreenManager_run@@Base+0x732>
    ddfa:	blx	67d0 <__stack_chk_fail@plt>
    ddfe:	nop
    de00:	itee	ge
    de02:	movge	r1, r0
    de04:	lsllt	r0, r0, #9
    de06:	movlt	r0, r0
    de08:	itte	cc
    de0a:	movcc	r1, r0
    de0c:	movcc	r2, r1
    de0e:	ldrcs.w	r3, [pc, #1236]	; e2e4 <ScreenManager_run@@Base+0xc54>
    de12:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    de16:	mov	fp, r0
    de18:	vpush	{d8-d9}
    de1c:	mov	r0, r2
    de1e:	ldr.w	r2, [pc, #1224]	; e2e8 <ScreenManager_run@@Base+0xc58>
    de22:	ldr.w	r1, [pc, #1224]	; e2ec <ScreenManager_run@@Base+0xc5c>
    de26:	add	r2, pc
    de28:	ldr.w	r9, [pc, #1220]	; e2f0 <ScreenManager_run@@Base+0xc60>
    de2c:	sub	sp, #36	; 0x24
    de2e:	add	r1, pc
    de30:	ldr	r3, [r2, r3]
    de32:	add	r9, pc
    de34:	ldr	r3, [r3, #0]
    de36:	str	r3, [sp, #28]
    de38:	mov.w	r3, #0
    de3c:	blx	6718 <fopen@plt>
    de40:	vmov	s16, r0
    de44:	mov	r5, r0
    de46:	cmp	r0, #0
    de48:	beq.w	df76 <ScreenManager_run@@Base+0x8e6>
    de4c:	ldr.w	r3, [pc, #1188]	; e2f4 <ScreenManager_run@@Base+0xc64>
    de50:	movs	r5, #0
    de52:	vmov	r0, s16
    de56:	add	r3, pc
    de58:	str	r5, [sp, #12]
    de5a:	vmov	s17, r3
    de5e:	ldr.w	r3, [pc, #1176]	; e2f8 <ScreenManager_run@@Base+0xc68>
    de62:	add	r3, pc
    de64:	vmov	s18, r3
    de68:	ldr.w	r3, [pc, #1168]	; e2fc <ScreenManager_run@@Base+0xc6c>
    de6c:	add	r3, pc
    de6e:	vmov	s19, r3
    de72:	bl	ec0c <String_readLine@@Base>
    de76:	mov	r6, r0
    de78:	cmp	r0, #0
    de7a:	beq.n	df68 <ScreenManager_run@@Base+0x8d8>
    de7c:	add	r2, sp, #20
    de7e:	movs	r1, #61	; 0x3d
    de80:	bl	ea6c <String_split@@Base>
    de84:	mov	r4, r0
    de86:	mov	r0, r6
    de88:	blx	6758 <free@plt+0x4>
    de8c:	ldr	r3, [sp, #20]
    de8e:	cmp	r3, #1
    de90:	ble.n	df54 <ScreenManager_run@@Base+0x8c4>
    de92:	vmov	r1, s17
    de96:	ldr	r0, [r4, #0]
    de98:	bl	ea48 <String_eq@@Base>
    de9c:	mov	r6, r0
    de9e:	cmp	r0, #0
    dea0:	beq.n	df94 <ScreenManager_run@@Base+0x904>
    dea2:	ldr	r0, [r4, #4]
    dea4:	ldr.w	r8, [fp, #28]
    dea8:	bl	e9e4 <String_trim@@Base>
    deac:	add	r2, sp, #24
    deae:	movs	r1, #32
    deb0:	mov	r5, r0
    deb2:	bl	ea6c <String_split@@Base>
    deb6:	mov	r3, r0
    deb8:	mov	r0, r5
    deba:	mov	r6, r3
    debc:	str	r3, [sp, #4]
    debe:	blx	6758 <free@plt+0x4>
    dec2:	ldr.w	r3, [pc, #1084]	; e300 <ScreenManager_run@@Base+0xc70>
    dec6:	movs	r5, #0
    dec8:	str.w	r5, [fp, #32]
    decc:	ldr.w	r7, [r9, r3]
    ded0:	ldr	r3, [r7, #0]
    ded2:	cmp	r3, r5
    ded4:	ble.w	e046 <ScreenManager_run@@Base+0x9b6>
    ded8:	subs	r3, r6, #4
    deda:	str	r4, [sp, #8]
    dedc:	mov	sl, r5
    dede:	mov	r4, r3
    dee0:	b.n	df32 <ScreenManager_run@@Base+0x8a2>
    dee2:	movs	r1, #0
    dee4:	movs	r2, #10
    dee6:	blx	66cc <strtol@plt>
    deea:	adds	r0, #1
    deec:	cmp	r0, #0
    deee:	it	le
    def0:	ldrle	r1, [r7, #0]
    def2:	ble.n	df2c <ScreenManager_run@@Base+0x89c>
    def4:	ldr.w	ip, [pc, #1036]	; e304 <ScreenManager_run@@Base+0xc74>
    def8:	lsls	r2, r0, #4
    defa:	ldr	r1, [r7, #0]
    defc:	ldr.w	r3, [r9, ip]
    df00:	add.w	lr, r3, r2
    df04:	ldr	r2, [r3, r2]
    df06:	cbz	r2, df2c <ScreenManager_run@@Base+0x89c>
    df08:	cmp	r0, r1
    df0a:	bge.n	df2c <ScreenManager_run@@Base+0x89c>
    df0c:	str.w	r0, [r8, r6]
    df10:	add.w	sl, sl, #1
    df14:	ldr	r1, [r7, #0]
    df16:	adds	r6, #4
    df18:	ldr.w	r0, [lr, #12]
    df1c:	add.w	r3, r8, r6
    df20:	ldr.w	r2, [fp, #32]
    df24:	str	r3, [sp, #0]
    df26:	orrs	r2, r0
    df28:	str.w	r2, [fp, #32]
    df2c:	adds	r5, #1
    df2e:	cmp	r5, r1
    df30:	bge.n	df44 <ScreenManager_run@@Base+0x8b4>
    df32:	ldr.w	r0, [r4, #4]!
    df36:	mov.w	r6, sl, lsl #2
    df3a:	add.w	r3, r8, r6
    df3e:	str	r3, [sp, #0]
    df40:	cmp	r0, #0
    df42:	bne.n	dee2 <ScreenManager_run@@Base+0x852>
    df44:	ldr	r4, [sp, #8]
    df46:	ldr	r2, [sp, #0]
    df48:	movs	r3, #0
    df4a:	ldr	r0, [sp, #4]
    df4c:	movs	r5, #1
    df4e:	str	r3, [r2, #0]
    df50:	bl	eb24 <String_freeArray@@Base>
    df54:	mov	r0, r4
    df56:	bl	eb24 <String_freeArray@@Base>
    df5a:	vmov	r0, s16
    df5e:	bl	ec0c <String_readLine@@Base>
    df62:	mov	r6, r0
    df64:	cmp	r0, #0
    df66:	bne.n	de7c <ScreenManager_run@@Base+0x7ec>
    df68:	vmov	r0, s16
    df6c:	blx	6b30 <fclose@plt>
    df70:	ldr	r3, [sp, #12]
    df72:	cmp	r3, #0
    df74:	beq.n	e028 <ScreenManager_run@@Base+0x998>
    df76:	ldr	r2, [pc, #912]	; (e308 <ScreenManager_run@@Base+0xc78>)
    df78:	ldr	r3, [pc, #872]	; (e2e4 <ScreenManager_run@@Base+0xc54>)
    df7a:	add	r2, pc
    df7c:	ldr	r3, [r2, r3]
    df7e:	ldr	r2, [r3, #0]
    df80:	ldr	r3, [sp, #28]
    df82:	eors	r2, r3
    df84:	bne.w	e144 <ScreenManager_run@@Base+0xab4>
    df88:	mov	r0, r5
    df8a:	add	sp, #36	; 0x24
    df8c:	vpop	{d8-d9}
    df90:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    df94:	vmov	r1, s18
    df98:	ldr	r0, [r4, #0]
    df9a:	bl	ea48 <String_eq@@Base>
    df9e:	mov	r7, r0
    dfa0:	cbz	r0, dfb4 <ScreenManager_run@@Base+0x924>
    dfa2:	ldr	r0, [r4, #4]
    dfa4:	mov	r1, r6
    dfa6:	movs	r2, #10
    dfa8:	blx	66cc <strtol@plt>
    dfac:	adds	r0, #1
    dfae:	str.w	r0, [fp, #52]	; 0x34
    dfb2:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    dfb4:	vmov	r1, s19
    dfb8:	ldr	r0, [r4, #0]
    dfba:	bl	ea48 <String_eq@@Base>
    dfbe:	mov	r6, r0
    dfc0:	cbz	r0, dfd2 <ScreenManager_run@@Base+0x942>
    dfc2:	ldr	r0, [r4, #4]
    dfc4:	mov	r1, r7
    dfc6:	movs	r2, #10
    dfc8:	blx	66cc <strtol@plt>
    dfcc:	str.w	r0, [fp, #48]	; 0x30
    dfd0:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    dfd2:	ldr	r1, [pc, #824]	; (e30c <ScreenManager_run@@Base+0xc7c>)
    dfd4:	ldr	r0, [r4, #0]
    dfd6:	add	r1, pc
    dfd8:	bl	ea48 <String_eq@@Base>
    dfdc:	mov	r7, r0
    dfde:	cbz	r0, dff6 <ScreenManager_run@@Base+0x966>
    dfe0:	ldr	r0, [r4, #4]
    dfe2:	mov	r1, r6
    dfe4:	movs	r2, #10
    dfe6:	blx	66cc <strtol@plt>
    dfea:	subs	r0, #0
    dfec:	it	ne
    dfee:	movne	r0, #1
    dff0:	strb.w	r0, [fp, #58]	; 0x3a
    dff4:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    dff6:	ldr	r1, [pc, #792]	; (e310 <ScreenManager_run@@Base+0xc80>)
    dff8:	ldr	r0, [r4, #0]
    dffa:	add	r1, pc
    dffc:	bl	ea48 <String_eq@@Base>
    e000:	mov	r6, r0
    e002:	cbnz	r0, e030 <ScreenManager_run@@Base+0x9a0>
    e004:	ldr	r1, [pc, #780]	; (e314 <ScreenManager_run@@Base+0xc84>)
    e006:	ldr	r0, [r4, #0]
    e008:	add	r1, pc
    e00a:	bl	ea48 <String_eq@@Base>
    e00e:	mov	r7, r0
    e010:	cbz	r0, e04c <ScreenManager_run@@Base+0x9bc>
    e012:	ldr	r0, [r4, #4]
    e014:	mov	r1, r6
    e016:	movs	r2, #10
    e018:	blx	66cc <strtol@plt>
    e01c:	subs	r0, #0
    e01e:	it	ne
    e020:	movne	r0, #1
    e022:	strb.w	r0, [fp, #63]	; 0x3f
    e026:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e028:	mov	r0, fp
    e02a:	bl	dbdc <ScreenManager_run@@Base+0x54c>
    e02e:	b.n	df76 <ScreenManager_run@@Base+0x8e6>
    e030:	ldr	r0, [r4, #4]
    e032:	mov	r1, r7
    e034:	movs	r2, #10
    e036:	blx	66cc <strtol@plt>
    e03a:	subs	r0, #0
    e03c:	it	ne
    e03e:	movne	r0, #1
    e040:	strb.w	r0, [fp, #60]	; 0x3c
    e044:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e046:	str.w	r8, [sp]
    e04a:	b.n	df46 <ScreenManager_run@@Base+0x8b6>
    e04c:	ldr	r1, [pc, #712]	; (e318 <ScreenManager_run@@Base+0xc88>)
    e04e:	ldr	r0, [r4, #0]
    e050:	add	r1, pc
    e052:	bl	ea48 <String_eq@@Base>
    e056:	cbnz	r0, e07a <ScreenManager_run@@Base+0x9ea>
    e058:	ldr	r1, [pc, #704]	; (e31c <ScreenManager_run@@Base+0xc8c>)
    e05a:	ldr	r0, [r4, #0]
    e05c:	add	r1, pc
    e05e:	bl	ea48 <String_eq@@Base>
    e062:	cbz	r0, e090 <ScreenManager_run@@Base+0xa00>
    e064:	ldr	r0, [r4, #4]
    e066:	movs	r2, #10
    e068:	movs	r1, #0
    e06a:	blx	66cc <strtol@plt>
    e06e:	subs	r0, #0
    e070:	it	ne
    e072:	movne	r0, #1
    e074:	strb.w	r0, [fp, #61]	; 0x3d
    e078:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e07a:	ldr	r0, [r4, #4]
    e07c:	mov	r1, r7
    e07e:	movs	r2, #10
    e080:	blx	66cc <strtol@plt>
    e084:	subs	r0, #0
    e086:	it	ne
    e088:	movne	r0, #1
    e08a:	strb.w	r0, [fp, #64]	; 0x40
    e08e:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e090:	ldr	r1, [pc, #652]	; (e320 <ScreenManager_run@@Base+0xc90>)
    e092:	ldr	r0, [r4, #0]
    e094:	add	r1, pc
    e096:	bl	ea48 <String_eq@@Base>
    e09a:	mov	r6, r0
    e09c:	cbz	r0, e0b4 <ScreenManager_run@@Base+0xa24>
    e09e:	ldr	r0, [r4, #4]
    e0a0:	movs	r2, #10
    e0a2:	movs	r1, #0
    e0a4:	blx	66cc <strtol@plt>
    e0a8:	subs	r0, #0
    e0aa:	it	ne
    e0ac:	movne	r0, #1
    e0ae:	strb.w	r0, [fp, #62]	; 0x3e
    e0b2:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e0b4:	ldr	r1, [pc, #620]	; (e324 <ScreenManager_run@@Base+0xc94>)
    e0b6:	ldr	r0, [r4, #0]
    e0b8:	add	r1, pc
    e0ba:	bl	ea48 <String_eq@@Base>
    e0be:	mov	r8, r0
    e0c0:	cbz	r0, e0d8 <ScreenManager_run@@Base+0xa48>
    e0c2:	ldr	r0, [r4, #4]
    e0c4:	mov	r1, r6
    e0c6:	movs	r2, #10
    e0c8:	blx	66cc <strtol@plt>
    e0cc:	subs	r0, #0
    e0ce:	it	ne
    e0d0:	movne	r0, #1
    e0d2:	strb.w	r0, [fp, #59]	; 0x3b
    e0d6:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e0d8:	ldr	r1, [pc, #588]	; (e328 <ScreenManager_run@@Base+0xc98>)
    e0da:	ldr	r0, [r4, #0]
    e0dc:	add	r1, pc
    e0de:	bl	ea48 <String_eq@@Base>
    e0e2:	mov	r7, r0
    e0e4:	cbz	r0, e0fc <ScreenManager_run@@Base+0xa6c>
    e0e6:	ldr	r0, [r4, #4]
    e0e8:	mov	r1, r8
    e0ea:	movs	r2, #10
    e0ec:	blx	66cc <strtol@plt>
    e0f0:	subs	r0, #0
    e0f2:	it	ne
    e0f4:	movne	r0, #1
    e0f6:	strb.w	r0, [fp, #65]	; 0x41
    e0fa:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e0fc:	ldr	r1, [pc, #556]	; (e32c <ScreenManager_run@@Base+0xc9c>)
    e0fe:	ldr	r0, [r4, #0]
    e100:	add	r1, pc
    e102:	bl	ea48 <String_eq@@Base>
    e106:	mov	r6, r0
    e108:	cbz	r0, e120 <ScreenManager_run@@Base+0xa90>
    e10a:	ldr	r0, [r4, #4]
    e10c:	mov	r1, r7
    e10e:	movs	r2, #10
    e110:	blx	66cc <strtol@plt>
    e114:	subs	r0, #0
    e116:	it	ne
    e118:	movne	r0, #1
    e11a:	strb.w	r0, [fp, #66]	; 0x42
    e11e:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e120:	ldr	r1, [pc, #524]	; (e330 <ScreenManager_run@@Base+0xca0>)
    e122:	ldr	r0, [r4, #0]
    e124:	add	r1, pc
    e126:	bl	ea48 <String_eq@@Base>
    e12a:	mov	r7, r0
    e12c:	cbz	r0, e148 <ScreenManager_run@@Base+0xab8>
    e12e:	ldr	r0, [r4, #4]
    e130:	mov	r1, r6
    e132:	movs	r2, #10
    e134:	blx	66cc <strtol@plt>
    e138:	subs	r0, #0
    e13a:	it	ne
    e13c:	movne	r0, #1
    e13e:	strb.w	r0, [fp, #67]	; 0x43
    e142:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e144:	blx	67d0 <__stack_chk_fail@plt>
    e148:	ldr	r1, [pc, #488]	; (e334 <ScreenManager_run@@Base+0xca4>)
    e14a:	ldr	r0, [r4, #0]
    e14c:	add	r1, pc
    e14e:	bl	ea48 <String_eq@@Base>
    e152:	mov	r6, r0
    e154:	cbz	r0, e16c <ScreenManager_run@@Base+0xadc>
    e156:	ldr	r0, [r4, #4]
    e158:	mov	r1, r7
    e15a:	movs	r2, #10
    e15c:	blx	66cc <strtol@plt>
    e160:	subs	r0, #0
    e162:	it	ne
    e164:	movne	r0, #1
    e166:	strb.w	r0, [fp, #70]	; 0x46
    e16a:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e16c:	ldr	r1, [pc, #456]	; (e338 <ScreenManager_run@@Base+0xca8>)
    e16e:	ldr	r0, [r4, #0]
    e170:	add	r1, pc
    e172:	bl	ea48 <String_eq@@Base>
    e176:	mov	r7, r0
    e178:	cbz	r0, e190 <ScreenManager_run@@Base+0xb00>
    e17a:	mov	r1, r6
    e17c:	ldr	r0, [r4, #4]
    e17e:	movs	r2, #10
    e180:	blx	66cc <strtol@plt>
    e184:	subs	r0, #0
    e186:	it	ne
    e188:	movne	r0, #1
    e18a:	strb.w	r0, [fp, #57]	; 0x39
    e18e:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e190:	ldr	r1, [pc, #424]	; (e33c <ScreenManager_run@@Base+0xcac>)
    e192:	ldr	r0, [r4, #0]
    e194:	add	r1, pc
    e196:	bl	ea48 <String_eq@@Base>
    e19a:	mov	r6, r0
    e19c:	cbz	r0, e1a2 <ScreenManager_run@@Base+0xb12>
    e19e:	mov	r1, r7
    e1a0:	b.n	e17c <ScreenManager_run@@Base+0xaec>
    e1a2:	ldr	r1, [pc, #412]	; (e340 <ScreenManager_run@@Base+0xcb0>)
    e1a4:	ldr	r0, [r4, #0]
    e1a6:	add	r1, pc
    e1a8:	bl	ea48 <String_eq@@Base>
    e1ac:	cbz	r0, e1c4 <ScreenManager_run@@Base+0xb34>
    e1ae:	ldr	r0, [r4, #4]
    e1b0:	mov	r1, r6
    e1b2:	movs	r2, #10
    e1b4:	blx	66cc <strtol@plt>
    e1b8:	subs	r0, #0
    e1ba:	it	ne
    e1bc:	movne	r0, #1
    e1be:	strb.w	r0, [fp, #56]	; 0x38
    e1c2:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e1c4:	ldr	r1, [pc, #380]	; (e344 <ScreenManager_run@@Base+0xcb4>)
    e1c6:	ldr	r0, [r4, #0]
    e1c8:	add	r1, pc
    e1ca:	bl	ea48 <String_eq@@Base>
    e1ce:	cbz	r0, e1e6 <ScreenManager_run@@Base+0xb56>
    e1d0:	ldr	r0, [r4, #4]
    e1d2:	movs	r2, #10
    e1d4:	movs	r1, #0
    e1d6:	blx	66cc <strtol@plt>
    e1da:	subs	r0, #0
    e1dc:	it	ne
    e1de:	movne	r0, #1
    e1e0:	strb.w	r0, [fp, #68]	; 0x44
    e1e4:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e1e6:	ldr	r1, [pc, #352]	; (e348 <ScreenManager_run@@Base+0xcb8>)
    e1e8:	ldr	r0, [r4, #0]
    e1ea:	add	r1, pc
    e1ec:	bl	ea48 <String_eq@@Base>
    e1f0:	mov	r7, r0
    e1f2:	cbz	r0, e20a <ScreenManager_run@@Base+0xb7a>
    e1f4:	ldr	r0, [r4, #4]
    e1f6:	movs	r2, #10
    e1f8:	movs	r1, #0
    e1fa:	blx	66cc <strtol@plt>
    e1fe:	subs	r0, #0
    e200:	it	ne
    e202:	movne	r0, #1
    e204:	strb.w	r0, [fp, #69]	; 0x45
    e208:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e20a:	ldr	r1, [pc, #320]	; (e34c <ScreenManager_run@@Base+0xcbc>)
    e20c:	ldr	r0, [r4, #0]
    e20e:	add	r1, pc
    e210:	bl	ea48 <String_eq@@Base>
    e214:	mov	r6, r0
    e216:	cbz	r0, e228 <ScreenManager_run@@Base+0xb98>
    e218:	ldr	r0, [r4, #4]
    e21a:	mov	r1, r7
    e21c:	movs	r2, #10
    e21e:	blx	66cc <strtol@plt>
    e222:	str.w	r0, [fp, #40]	; 0x28
    e226:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e228:	ldr	r1, [pc, #292]	; (e350 <ScreenManager_run@@Base+0xcc0>)
    e22a:	ldr	r0, [r4, #0]
    e22c:	add	r1, pc
    e22e:	bl	ea48 <String_eq@@Base>
    e232:	cbz	r0, e24a <ScreenManager_run@@Base+0xbba>
    e234:	ldr	r0, [r4, #4]
    e236:	movs	r2, #10
    e238:	mov	r1, r6
    e23a:	blx	66cc <strtol@plt>
    e23e:	cmp	r0, #6
    e240:	it	hi
    e242:	movhi	r0, r6
    e244:	str.w	r0, [fp, #36]	; 0x24
    e248:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e24a:	ldr	r1, [pc, #264]	; (e354 <ScreenManager_run@@Base+0xcc4>)
    e24c:	ldr	r0, [r4, #0]
    e24e:	add	r1, pc
    e250:	bl	ea48 <String_eq@@Base>
    e254:	cbz	r0, e278 <ScreenManager_run@@Base+0xbe8>
    e256:	ldr	r0, [r4, #4]
    e258:	movs	r3, #1
    e25a:	str	r3, [sp, #12]
    e25c:	bl	e9e4 <String_trim@@Base>
    e260:	add	r2, sp, #24
    e262:	movs	r1, #32
    e264:	mov	r7, r0
    e266:	bl	ea6c <String_split@@Base>
    e26a:	mov	r6, r0
    e26c:	mov	r0, r7
    e26e:	blx	6758 <free@plt+0x4>
    e272:	str.w	r6, [fp, #8]
    e276:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e278:	ldr	r1, [pc, #220]	; (e358 <ScreenManager_run@@Base+0xcc8>)
    e27a:	ldr	r0, [r4, #0]
    e27c:	add	r1, pc
    e27e:	bl	ea48 <String_eq@@Base>
    e282:	mov	r6, r0
    e284:	cbz	r0, e2a8 <ScreenManager_run@@Base+0xc18>
    e286:	ldr	r0, [r4, #4]
    e288:	movs	r3, #1
    e28a:	str	r3, [sp, #12]
    e28c:	bl	e9e4 <String_trim@@Base>
    e290:	add	r2, sp, #24
    e292:	movs	r1, #32
    e294:	mov	r7, r0
    e296:	bl	ea6c <String_split@@Base>
    e29a:	mov	r6, r0
    e29c:	mov	r0, r7
    e29e:	blx	6758 <free@plt+0x4>
    e2a2:	str.w	r6, [fp, #20]
    e2a6:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e2a8:	ldr	r1, [pc, #176]	; (e35c <ScreenManager_run@@Base+0xccc>)
    e2aa:	ldr	r0, [r4, #0]
    e2ac:	add	r1, pc
    e2ae:	bl	ea48 <String_eq@@Base>
    e2b2:	cbz	r0, e2c4 <ScreenManager_run@@Base+0xc34>
    e2b4:	ldr	r1, [r4, #4]
    e2b6:	mov	r2, r6
    e2b8:	mov	r0, fp
    e2ba:	movs	r3, #1
    e2bc:	str	r3, [sp, #12]
    e2be:	bl	dd50 <ScreenManager_run@@Base+0x6c0>
    e2c2:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e2c4:	ldr	r1, [pc, #152]	; (e360 <ScreenManager_run@@Base+0xcd0>)
    e2c6:	ldr	r0, [r4, #0]
    e2c8:	add	r1, pc
    e2ca:	bl	ea48 <String_eq@@Base>
    e2ce:	cmp	r0, #0
    e2d0:	beq.w	df54 <ScreenManager_run@@Base+0x8c4>
    e2d4:	movs	r2, #1
    e2d6:	ldr	r1, [r4, #4]
    e2d8:	mov	r0, fp
    e2da:	str	r2, [sp, #12]
    e2dc:	bl	dd50 <ScreenManager_run@@Base+0x6c0>
    e2e0:	b.n	df54 <ScreenManager_run@@Base+0x8c4>
    e2e2:	nop
    e2e4:	lsls	r0, r0, #9
    e2e6:	movs	r0, r0
    e2e8:	bkpt	0x00e6
    e2ea:	movs	r1, r0
    e2ec:	ldr	r5, [sp, #760]	; 0x2f8
    e2ee:	movs	r0, r0
    e2f0:	bkpt	0x00da
    e2f2:	movs	r1, r0
    e2f4:	ldrh	r2, [r3, #58]	; 0x3a
    e2f6:	movs	r0, r0
    e2f8:	ldrh	r6, [r2, #58]	; 0x3a
    e2fa:	movs	r0, r0
    e2fc:	ldrh	r0, [r3, #58]	; 0x3a
    e2fe:	movs	r0, r0
    e300:	lsls	r4, r6, #9
    e302:	movs	r0, r0
    e304:	lsls	r4, r1, #10
    e306:	movs	r0, r0
    e308:	pop	{r1, r4, r7, pc}
    e30a:	movs	r1, r0
    e30c:	ldrh	r6, [r7, #46]	; 0x2e
    e30e:	movs	r0, r0
    e310:	ldrh	r6, [r4, #46]	; 0x2e
    e312:	movs	r0, r0
    e314:	ldrh	r0, [r5, #46]	; 0x2e
    e316:	movs	r0, r0
    e318:	ldrh	r4, [r6, #44]	; 0x2c
    e31a:	movs	r0, r0
    e31c:	ldrh	r0, [r0, #46]	; 0x2e
    e31e:	movs	r0, r0
    e320:	ldrh	r4, [r3, #44]	; 0x2c
    e322:	movs	r0, r0
    e324:	ldrh	r4, [r1, #44]	; 0x2c
    e326:	movs	r0, r0
    e328:	ldrh	r4, [r7, #42]	; 0x2a
    e32a:	movs	r0, r0
    e32c:	ldrh	r4, [r5, #42]	; 0x2a
    e32e:	movs	r0, r0
    e330:	ldrh	r4, [r3, #42]	; 0x2a
    e332:	movs	r0, r0
    e334:	ldrh	r0, [r1, #42]	; 0x2a
    e336:	movs	r0, r0
    e338:	ldrh	r4, [r6, #40]	; 0x28
    e33a:	movs	r0, r0
    e33c:	ldrh	r4, [r4, #40]	; 0x28
    e33e:	movs	r0, r0
    e340:	ldrh	r6, [r4, #40]	; 0x28
    e342:	movs	r0, r0
    e344:	ldrh	r0, [r3, #40]	; 0x28
    e346:	movs	r0, r0
    e348:	ldrh	r6, [r1, #40]	; 0x28
    e34a:	movs	r0, r0
    e34c:	strh	r6, [r3, #48]	; 0x30
    e34e:	movs	r0, r0
    e350:	ldrh	r0, [r5, #38]	; 0x26
    e352:	movs	r0, r0
    e354:	ldrh	r6, [r2, #38]	; 0x26
    e356:	movs	r0, r0
    e358:	ldrh	r4, [r6, #36]	; 0x24
    e35a:	movs	r0, r0
    e35c:	ldrh	r4, [r2, #36]	; 0x24
    e35e:	movs	r0, r0
    e360:	ldrh	r4, [r1, #36]	; 0x24
	...

0000e364 <Settings_delete@@Base>:
    e364:	push	{r4, lr}
    e366:	mov	r4, r0
    e368:	ldr	r0, [r0, #0]
    e36a:	blx	6758 <free@plt+0x4>
    e36e:	ldr	r0, [r4, #28]
    e370:	blx	6758 <free@plt+0x4>
    e374:	ldr	r0, [r4, #8]
    e376:	bl	eb24 <String_freeArray@@Base>
    e37a:	ldr	r0, [r4, #12]
    e37c:	blx	6758 <free@plt+0x4>
    e380:	ldr	r0, [r4, #20]
    e382:	bl	eb24 <String_freeArray@@Base>
    e386:	ldr	r0, [r4, #24]
    e388:	blx	6758 <free@plt+0x4>
    e38c:	mov	r0, r4
    e38e:	ldmia.w	sp!, {r4, lr}
    e392:	b.w	6754 <free@plt>
    e396:	nop

0000e398 <Settings_write@@Base>:
    e398:	ldr	r1, [pc, #516]	; (e5a0 <Settings_write@@Base+0x208>)
    e39a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e39e:	add	r1, pc
    e3a0:	sub	sp, #8
    e3a2:	mov	r6, r0
    e3a4:	ldr	r0, [r0, #0]
    e3a6:	blx	6718 <fopen@plt>
    e3aa:	mov	r4, r0
    e3ac:	cmp	r0, #0
    e3ae:	beq.w	e59a <Settings_write@@Base+0x202>
    e3b2:	ldr	r2, [pc, #496]	; (e5a4 <Settings_write@@Base+0x20c>)
    e3b4:	movs	r1, #1
    e3b6:	add	r2, pc
    e3b8:	blx	6af4 <__fprintf_chk@plt+0x4>
    e3bc:	ldr	r2, [pc, #488]	; (e5a8 <Settings_write@@Base+0x210>)
    e3be:	movs	r1, #1
    e3c0:	mov	r0, r4
    e3c2:	add	r2, pc
    e3c4:	blx	6af4 <__fprintf_chk@plt+0x4>
    e3c8:	ldr	r5, [r6, #28]
    e3ca:	ldr	r3, [pc, #480]	; (e5ac <Settings_write@@Base+0x214>)
    e3cc:	movs	r1, #1
    e3ce:	ldr	r2, [pc, #480]	; (e5b0 <Settings_write@@Base+0x218>)
    e3d0:	mov	r0, r4
    e3d2:	add	r3, pc
    e3d4:	add	r2, pc
    e3d6:	blx	6af4 <__fprintf_chk@plt+0x4>
    e3da:	ldr	r1, [r5, #0]
    e3dc:	cbz	r1, e404 <Settings_write@@Base+0x6c>
    e3de:	ldr	r3, [pc, #468]	; (e5b4 <Settings_write@@Base+0x21c>)
    e3e0:	ldr.w	r8, [pc, #468]	; e5b8 <Settings_write@@Base+0x220>
    e3e4:	ldr	r7, [pc, #468]	; (e5bc <Settings_write@@Base+0x224>)
    e3e6:	add	r3, pc
    e3e8:	add	r8, pc
    e3ea:	add	r7, pc
    e3ec:	subs	r1, #1
    e3ee:	mov	r2, r8
    e3f0:	str	r1, [sp, #0]
    e3f2:	mov	r0, r4
    e3f4:	movs	r1, #1
    e3f6:	blx	6af4 <__fprintf_chk@plt+0x4>
    e3fa:	ldr.w	r1, [r5, #4]!
    e3fe:	mov	r3, r7
    e400:	cmp	r1, #0
    e402:	bne.n	e3ec <Settings_write@@Base+0x54>
    e404:	ldr	r2, [pc, #440]	; (e5c0 <Settings_write@@Base+0x228>)
    e406:	movs	r1, #1
    e408:	mov	r0, r4
    e40a:	add	r2, pc
    e40c:	blx	6af4 <__fprintf_chk@plt+0x4>
    e410:	ldr	r3, [r6, #52]	; 0x34
    e412:	ldr	r2, [pc, #432]	; (e5c4 <Settings_write@@Base+0x22c>)
    e414:	movs	r1, #1
    e416:	subs	r3, #1
    e418:	mov	r0, r4
    e41a:	add	r2, pc
    e41c:	blx	6af4 <__fprintf_chk@plt+0x4>
    e420:	ldr	r2, [pc, #420]	; (e5c8 <Settings_write@@Base+0x230>)
    e422:	ldr	r3, [r6, #48]	; 0x30
    e424:	movs	r1, #1
    e426:	add	r2, pc
    e428:	mov	r0, r4
    e42a:	blx	6af4 <__fprintf_chk@plt+0x4>
    e42e:	ldr	r2, [pc, #412]	; (e5cc <Settings_write@@Base+0x234>)
    e430:	ldrb.w	r3, [r6, #60]	; 0x3c
    e434:	movs	r1, #1
    e436:	add	r2, pc
    e438:	mov	r0, r4
    e43a:	blx	6af4 <__fprintf_chk@plt+0x4>
    e43e:	ldr	r2, [pc, #400]	; (e5d0 <Settings_write@@Base+0x238>)
    e440:	ldrb.w	r3, [r6, #63]	; 0x3f
    e444:	movs	r1, #1
    e446:	add	r2, pc
    e448:	mov	r0, r4
    e44a:	blx	6af4 <__fprintf_chk@plt+0x4>
    e44e:	ldr	r2, [pc, #388]	; (e5d4 <Settings_write@@Base+0x23c>)
    e450:	ldrb.w	r3, [r6, #64]	; 0x40
    e454:	movs	r1, #1
    e456:	add	r2, pc
    e458:	mov	r0, r4
    e45a:	blx	6af4 <__fprintf_chk@plt+0x4>
    e45e:	ldr	r2, [pc, #376]	; (e5d8 <Settings_write@@Base+0x240>)
    e460:	ldrb.w	r3, [r6, #61]	; 0x3d
    e464:	movs	r1, #1
    e466:	add	r2, pc
    e468:	mov	r0, r4
    e46a:	blx	6af4 <__fprintf_chk@plt+0x4>
    e46e:	ldr	r2, [pc, #364]	; (e5dc <Settings_write@@Base+0x244>)
    e470:	ldrb.w	r3, [r6, #62]	; 0x3e
    e474:	movs	r1, #1
    e476:	add	r2, pc
    e478:	mov	r0, r4
    e47a:	blx	6af4 <__fprintf_chk@plt+0x4>
    e47e:	ldr	r2, [pc, #352]	; (e5e0 <Settings_write@@Base+0x248>)
    e480:	ldrb.w	r3, [r6, #59]	; 0x3b
    e484:	movs	r1, #1
    e486:	add	r2, pc
    e488:	mov	r0, r4
    e48a:	blx	6af4 <__fprintf_chk@plt+0x4>
    e48e:	ldr	r2, [pc, #340]	; (e5e4 <Settings_write@@Base+0x24c>)
    e490:	ldrb.w	r3, [r6, #65]	; 0x41
    e494:	movs	r1, #1
    e496:	add	r2, pc
    e498:	mov	r0, r4
    e49a:	blx	6af4 <__fprintf_chk@plt+0x4>
    e49e:	ldr	r2, [pc, #328]	; (e5e8 <Settings_write@@Base+0x250>)
    e4a0:	ldrb.w	r3, [r6, #66]	; 0x42
    e4a4:	movs	r1, #1
    e4a6:	add	r2, pc
    e4a8:	mov	r0, r4
    e4aa:	blx	6af4 <__fprintf_chk@plt+0x4>
    e4ae:	ldr	r2, [pc, #316]	; (e5ec <Settings_write@@Base+0x254>)
    e4b0:	ldrb.w	r3, [r6, #67]	; 0x43
    e4b4:	movs	r1, #1
    e4b6:	add	r2, pc
    e4b8:	mov	r0, r4
    e4ba:	blx	6af4 <__fprintf_chk@plt+0x4>
    e4be:	ldr	r2, [pc, #304]	; (e5f0 <Settings_write@@Base+0x258>)
    e4c0:	ldrb.w	r3, [r6, #58]	; 0x3a
    e4c4:	movs	r1, #1
    e4c6:	add	r2, pc
    e4c8:	mov	r0, r4
    e4ca:	blx	6af4 <__fprintf_chk@plt+0x4>
    e4ce:	ldr	r2, [pc, #292]	; (e5f4 <Settings_write@@Base+0x25c>)
    e4d0:	ldrb.w	r3, [r6, #70]	; 0x46
    e4d4:	movs	r1, #1
    e4d6:	add	r2, pc
    e4d8:	mov	r0, r4
    e4da:	blx	6af4 <__fprintf_chk@plt+0x4>
    e4de:	ldr	r2, [pc, #280]	; (e5f8 <Settings_write@@Base+0x260>)
    e4e0:	ldrb.w	r3, [r6, #57]	; 0x39
    e4e4:	movs	r1, #1
    e4e6:	add	r2, pc
    e4e8:	mov	r0, r4
    e4ea:	blx	6af4 <__fprintf_chk@plt+0x4>
    e4ee:	ldr	r2, [pc, #268]	; (e5fc <Settings_write@@Base+0x264>)
    e4f0:	ldrb.w	r3, [r6, #56]	; 0x38
    e4f4:	movs	r1, #1
    e4f6:	add	r2, pc
    e4f8:	mov	r0, r4
    e4fa:	blx	6af4 <__fprintf_chk@plt+0x4>
    e4fe:	ldr	r2, [pc, #256]	; (e600 <Settings_write@@Base+0x268>)
    e500:	ldrb.w	r3, [r6, #68]	; 0x44
    e504:	movs	r1, #1
    e506:	add	r2, pc
    e508:	mov	r0, r4
    e50a:	blx	6af4 <__fprintf_chk@plt+0x4>
    e50e:	ldr	r2, [pc, #244]	; (e604 <Settings_write@@Base+0x26c>)
    e510:	ldrb.w	r3, [r6, #69]	; 0x45
    e514:	movs	r1, #1
    e516:	add	r2, pc
    e518:	mov	r0, r4
    e51a:	blx	6af4 <__fprintf_chk@plt+0x4>
    e51e:	ldr	r2, [pc, #232]	; (e608 <Settings_write@@Base+0x270>)
    e520:	ldr	r3, [r6, #36]	; 0x24
    e522:	movs	r1, #1
    e524:	add	r2, pc
    e526:	mov	r0, r4
    e528:	blx	6af4 <__fprintf_chk@plt+0x4>
    e52c:	ldr	r2, [pc, #220]	; (e60c <Settings_write@@Base+0x274>)
    e52e:	ldr	r3, [r6, #40]	; 0x28
    e530:	movs	r1, #1
    e532:	add	r2, pc
    e534:	mov	r0, r4
    e536:	blx	6af4 <__fprintf_chk@plt+0x4>
    e53a:	ldr	r2, [pc, #212]	; (e610 <Settings_write@@Base+0x278>)
    e53c:	movs	r1, #1
    e53e:	mov	r0, r4
    e540:	add	r2, pc
    e542:	blx	6af4 <__fprintf_chk@plt+0x4>
    e546:	movs	r2, #0
    e548:	mov	r1, r4
    e54a:	mov	r0, r6
    e54c:	bl	db10 <ScreenManager_run@@Base+0x480>
    e550:	ldr	r2, [pc, #192]	; (e614 <Settings_write@@Base+0x27c>)
    e552:	movs	r1, #1
    e554:	mov	r0, r4
    e556:	add	r2, pc
    e558:	blx	6af4 <__fprintf_chk@plt+0x4>
    e55c:	movs	r2, #0
    e55e:	mov	r1, r4
    e560:	mov	r0, r6
    e562:	bl	db74 <ScreenManager_run@@Base+0x4e4>
    e566:	ldr	r2, [pc, #176]	; (e618 <Settings_write@@Base+0x280>)
    e568:	movs	r1, #1
    e56a:	mov	r0, r4
    e56c:	add	r2, pc
    e56e:	blx	6af4 <__fprintf_chk@plt+0x4>
    e572:	movs	r2, #1
    e574:	mov	r1, r4
    e576:	mov	r0, r6
    e578:	bl	db10 <ScreenManager_run@@Base+0x480>
    e57c:	ldr	r2, [pc, #156]	; (e61c <Settings_write@@Base+0x284>)
    e57e:	movs	r1, #1
    e580:	mov	r0, r4
    e582:	add	r2, pc
    e584:	blx	6af4 <__fprintf_chk@plt+0x4>
    e588:	mov	r0, r6
    e58a:	movs	r2, #1
    e58c:	mov	r1, r4
    e58e:	bl	db74 <ScreenManager_run@@Base+0x4e4>
    e592:	mov	r0, r4
    e594:	blx	6b30 <fclose@plt>
    e598:	movs	r0, #1
    e59a:	add	sp, #8
    e59c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e5a0:	ldrb	r6, [r2, #27]
    e5a2:	movs	r0, r0
    e5a4:	ldrh	r2, [r6, #28]
    e5a6:	movs	r0, r0
    e5a8:	ldrh	r6, [r7, #30]
    e5aa:	movs	r0, r0
    e5ac:	ldrh	r6, [r3, #14]
    e5ae:	movs	r0, r0
    e5b0:	ldrh	r4, [r5, #32]
    e5b2:	movs	r0, r0
    e5b4:	strh	r2, [r7, #28]
    e5b6:	movs	r0, r0
    e5b8:	ldrh	r0, [r5, #12]
    e5ba:	movs	r0, r0
    e5bc:	str	r6, [sp, #136]	; 0x88
    e5be:	movs	r0, r0
    e5c0:	strh	r2, [r5, #30]
    e5c2:	movs	r0, r0
    e5c4:	ldrh	r2, [r5, #30]
    e5c6:	movs	r0, r0
    e5c8:	ldrh	r6, [r5, #30]
    e5ca:	movs	r0, r0
    e5cc:	ldrh	r2, [r6, #30]
    e5ce:	movs	r0, r0
    e5d0:	ldrh	r6, [r6, #30]
    e5d2:	movs	r0, r0
    e5d4:	ldrh	r6, [r7, #30]
    e5d6:	movs	r0, r0
    e5d8:	ldrh	r2, [r1, #32]
    e5da:	movs	r0, r0
    e5dc:	ldrh	r2, [r2, #32]
    e5de:	movs	r0, r0
    e5e0:	ldrh	r2, [r3, #32]
    e5e2:	movs	r0, r0
    e5e4:	ldrh	r2, [r4, #32]
    e5e6:	movs	r0, r0
    e5e8:	ldrh	r2, [r5, #32]
    e5ea:	movs	r0, r0
    e5ec:	ldrh	r2, [r6, #32]
    e5ee:	movs	r0, r0
    e5f0:	ldrh	r2, [r7, #32]
    e5f2:	movs	r0, r0
    e5f4:	ldrh	r2, [r7, #32]
    e5f6:	movs	r0, r0
    e5f8:	ldrh	r6, [r7, #32]
    e5fa:	movs	r0, r0
    e5fc:	ldrh	r6, [r0, #34]	; 0x22
    e5fe:	movs	r0, r0
    e600:	ldrh	r6, [r1, #34]	; 0x22
    e602:	movs	r0, r0
    e604:	ldrh	r2, [r3, #34]	; 0x22
    e606:	movs	r0, r0
    e608:	ldrh	r4, [r5, #34]	; 0x22
    e60a:	movs	r0, r0
    e60c:	ldrh	r2, [r6, #34]	; 0x22
    e60e:	movs	r0, r0
    e610:	ldrh	r0, [r6, #34]	; 0x22
    e612:	movs	r0, r0
    e614:	ldrh	r2, [r5, #34]	; 0x22
    e616:	movs	r0, r0
    e618:	ldrh	r0, [r5, #34]	; 0x22
    e61a:	movs	r0, r0
    e61c:	ldrh	r2, [r4, #34]	; 0x22
	...

0000e620 <Settings_new@@Base>:
    e620:	ldr	r2, [pc, #496]	; (e814 <Settings_new@@Base+0x1f4>)
    e622:	movs	r1, #72	; 0x48
    e624:	ldr	r3, [pc, #496]	; (e818 <Settings_new@@Base+0x1f8>)
    e626:	add	r2, pc
    e628:	push	{r4, r5, r6, r7, lr}
    e62a:	mov	r6, r0
    e62c:	ldr	r3, [r2, r3]
    e62e:	sub	sp, #100	; 0x64
    e630:	movs	r0, #1
    e632:	ldr	r5, [pc, #488]	; (e81c <Settings_new@@Base+0x1fc>)
    e634:	ldr	r3, [r3, #0]
    e636:	str	r3, [sp, #92]	; 0x5c
    e638:	mov.w	r3, #0
    e63c:	bl	11da0 <xCalloc@@Base>
    e640:	ldr	r3, [pc, #476]	; (e820 <Settings_new@@Base+0x200>)
    e642:	add	r5, pc
    e644:	movs	r1, #1
    e646:	movs	r2, #47	; 0x2f
    e648:	strd	r1, r2, [r0, #48]	; 0x30
    e64c:	mov.w	r2, #16777216	; 0x1000000
    e650:	str	r6, [r0, #44]	; 0x2c
    e652:	movs	r6, #0
    e654:	str	r2, [r0, #56]	; 0x38
    e656:	mov	r4, r0
    e658:	str	r2, [r0, #64]	; 0x40
    e65a:	movs	r1, #4
    e65c:	str	r6, [r0, #60]	; 0x3c
    e65e:	strb.w	r6, [r0, #68]	; 0x44
    e662:	ldr	r3, [r5, r3]
    e664:	ldr	r0, [r3, #0]
    e666:	adds	r0, #1
    e668:	bl	11da0 <xCalloc@@Base>
    e66c:	ldr	r3, [pc, #436]	; (e824 <Settings_new@@Base+0x204>)
    e66e:	strd	r0, r6, [r4, #28]
    e672:	ldr	r1, [r5, r3]
    e674:	ldr	r3, [r1, #0]
    e676:	cbz	r3, e698 <Settings_new@@Base+0x78>
    e678:	ldr	r2, [pc, #428]	; (e828 <Settings_new@@Base+0x208>)
    e67a:	subs	r0, #4
    e67c:	ldr	r5, [r5, r2]
    e67e:	str.w	r3, [r0, #4]!
    e682:	ldr	r2, [r1, #0]
    e684:	ldr	r3, [r4, #32]
    e686:	add.w	r2, r5, r2, lsl #4
    e68a:	ldr	r2, [r2, #12]
    e68c:	orrs	r3, r2
    e68e:	str	r3, [r4, #32]
    e690:	ldr.w	r3, [r1, #4]!
    e694:	cmp	r3, #0
    e696:	bne.n	e67e <Settings_new@@Base+0x5e>
    e698:	ldr	r0, [pc, #400]	; (e82c <Settings_new@@Base+0x20c>)
    e69a:	add	r0, pc
    e69c:	blx	6918 <getenv@plt>
    e6a0:	cmp	r0, #0
    e6a2:	beq.n	e714 <Settings_new@@Base+0xf4>
    e6a4:	bl	11de4 <xStrdup@@Base>
    e6a8:	movs	r3, #0
    e6aa:	movs	r2, #15
    e6ac:	str	r3, [r4, #36]	; 0x24
    e6ae:	strb.w	r3, [r4, #71]	; 0x47
    e6b2:	str	r2, [r4, #40]	; 0x28
    e6b4:	mov	r1, r0
    e6b6:	str	r0, [r4, #0]
    e6b8:	mov	r0, r4
    e6ba:	bl	de0c <ScreenManager_run@@Base+0x77c>
    e6be:	cbnz	r0, e6fc <Settings_new@@Base+0xdc>
    e6c0:	ldr	r1, [pc, #364]	; (e830 <Settings_new@@Base+0x210>)
    e6c2:	movs	r6, #1
    e6c4:	ldr	r0, [pc, #364]	; (e834 <Settings_new@@Base+0x214>)
    e6c6:	add	r1, pc
    e6c8:	strb.w	r6, [r4, #71]	; 0x47
    e6cc:	add	r0, pc
    e6ce:	bl	e9ac <String_cat@@Base>
    e6d2:	mov	r5, r0
    e6d4:	mov	r0, r4
    e6d6:	mov	r1, r5
    e6d8:	bl	de0c <ScreenManager_run@@Base+0x77c>
    e6dc:	mov	r7, r0
    e6de:	mov	r0, r5
    e6e0:	blx	6758 <free@plt+0x4>
    e6e4:	cbnz	r7, e6fc <Settings_new@@Base+0xdc>
    e6e6:	mov	r0, r4
    e6e8:	bl	dbdc <ScreenManager_run@@Base+0x54c>
    e6ec:	movw	r3, #257	; 0x101
    e6f0:	strb.w	r6, [r4, #63]	; 0x3f
    e6f4:	strb.w	r6, [r4, #70]	; 0x46
    e6f8:	strh.w	r3, [r4, #66]	; 0x42
    e6fc:	ldr	r2, [pc, #312]	; (e838 <Settings_new@@Base+0x218>)
    e6fe:	ldr	r3, [pc, #280]	; (e818 <Settings_new@@Base+0x1f8>)
    e700:	add	r2, pc
    e702:	ldr	r3, [r2, r3]
    e704:	ldr	r2, [r3, #0]
    e706:	ldr	r3, [sp, #92]	; 0x5c
    e708:	eors	r2, r3
    e70a:	bne.w	e810 <Settings_new@@Base+0x1f0>
    e70e:	mov	r0, r4
    e710:	add	sp, #100	; 0x64
    e712:	pop	{r4, r5, r6, r7, pc}
    e714:	ldr	r0, [pc, #292]	; (e83c <Settings_new@@Base+0x21c>)
    e716:	add	r0, pc
    e718:	blx	6918 <getenv@plt>
    e71c:	mov	r5, r0
    e71e:	cmp	r0, #0
    e720:	beq.n	e80a <Settings_new@@Base+0x1ea>
    e722:	ldr	r0, [pc, #284]	; (e840 <Settings_new@@Base+0x220>)
    e724:	add	r0, pc
    e726:	blx	6918 <getenv@plt>
    e72a:	mov	r6, r0
    e72c:	cmp	r0, #0
    e72e:	beq.n	e7e2 <Settings_new@@Base+0x1c2>
    e730:	ldr	r1, [pc, #272]	; (e844 <Settings_new@@Base+0x224>)
    e732:	add	r1, pc
    e734:	bl	e9ac <String_cat@@Base>
    e738:	mov	r3, r0
    e73a:	mov	r0, r6
    e73c:	str	r3, [r4, #0]
    e73e:	bl	11de4 <xStrdup@@Base>
    e742:	ldr	r1, [pc, #260]	; (e848 <Settings_new@@Base+0x228>)
    e744:	add	r1, pc
    e746:	mov	r3, r0
    e748:	mov	r0, r6
    e74a:	mov	r6, r3
    e74c:	bl	e9ac <String_cat@@Base>
    e750:	mov	r7, r0
    e752:	ldr	r1, [pc, #248]	; (e84c <Settings_new@@Base+0x22c>)
    e754:	mov	r0, r5
    e756:	add	r1, pc
    e758:	bl	e9ac <String_cat@@Base>
    e75c:	mov.w	r1, #448	; 0x1c0
    e760:	mov	r5, r0
    e762:	mov	r0, r6
    e764:	blx	6a78 <mkdir@plt>
    e768:	mov.w	r1, #448	; 0x1c0
    e76c:	mov	r0, r7
    e76e:	blx	6a78 <mkdir@plt>
    e772:	mov	r0, r7
    e774:	blx	6758 <free@plt+0x4>
    e778:	mov	r0, r6
    e77a:	blx	6758 <free@plt+0x4>
    e77e:	mov	r1, r5
    e780:	mov	r2, sp
    e782:	movs	r0, #3
    e784:	blx	6bf0 <__lxstat@plt>
    e788:	cbnz	r0, e7cc <Settings_new@@Base+0x1ac>
    e78a:	ldr	r3, [sp, #16]
    e78c:	and.w	r3, r3, #61440	; 0xf000
    e790:	cmp.w	r3, #40960	; 0xa000
    e794:	beq.n	e7cc <Settings_new@@Base+0x1ac>
    e796:	movs	r3, #15
    e798:	str	r0, [r4, #36]	; 0x24
    e79a:	strb.w	r0, [r4, #71]	; 0x47
    e79e:	mov	r1, r5
    e7a0:	mov	r0, r4
    e7a2:	str	r3, [r4, #40]	; 0x28
    e7a4:	bl	de0c <ScreenManager_run@@Base+0x77c>
    e7a8:	cbnz	r0, e7b4 <Settings_new@@Base+0x194>
    e7aa:	mov	r0, r5
    e7ac:	blx	6758 <free@plt+0x4>
    e7b0:	ldr	r1, [r4, #0]
    e7b2:	b.n	e6b8 <Settings_new@@Base+0x98>
    e7b4:	mov	r0, r4
    e7b6:	bl	e398 <Settings_write@@Base>
    e7ba:	cbnz	r0, e7c4 <Settings_new@@Base+0x1a4>
    e7bc:	mov	r0, r5
    e7be:	blx	6758 <free@plt+0x4>
    e7c2:	b.n	e6fc <Settings_new@@Base+0xdc>
    e7c4:	mov	r0, r5
    e7c6:	blx	67e8 <unlink@plt>
    e7ca:	b.n	e7bc <Settings_new@@Base+0x19c>
    e7cc:	mov	r0, r5
    e7ce:	blx	6758 <free@plt+0x4>
    e7d2:	movs	r3, #0
    e7d4:	movs	r2, #15
    e7d6:	ldr	r1, [r4, #0]
    e7d8:	str	r3, [r4, #36]	; 0x24
    e7da:	strb.w	r3, [r4, #71]	; 0x47
    e7de:	str	r2, [r4, #40]	; 0x28
    e7e0:	b.n	e6b8 <Settings_new@@Base+0x98>
    e7e2:	ldr	r1, [pc, #108]	; (e850 <Settings_new@@Base+0x230>)
    e7e4:	mov	r0, r5
    e7e6:	add	r1, pc
    e7e8:	bl	e9ac <String_cat@@Base>
    e7ec:	ldr	r1, [pc, #100]	; (e854 <Settings_new@@Base+0x234>)
    e7ee:	add	r1, pc
    e7f0:	mov	r3, r0
    e7f2:	mov	r0, r5
    e7f4:	str	r3, [r4, #0]
    e7f6:	bl	e9ac <String_cat@@Base>
    e7fa:	ldr	r1, [pc, #92]	; (e858 <Settings_new@@Base+0x238>)
    e7fc:	add	r1, pc
    e7fe:	mov	r6, r0
    e800:	mov	r0, r5
    e802:	bl	e9ac <String_cat@@Base>
    e806:	mov	r7, r0
    e808:	b.n	e752 <Settings_new@@Base+0x132>
    e80a:	ldr	r5, [pc, #80]	; (e85c <Settings_new@@Base+0x23c>)
    e80c:	add	r5, pc
    e80e:	b.n	e722 <Settings_new@@Base+0x102>
    e810:	blx	67d0 <__stack_chk_fail@plt>
    e814:			; <UNDEFINED> instruction: 0xb6e6
    e816:	movs	r1, r0
    e818:	lsls	r0, r0, #9
    e81a:	movs	r0, r0
    e81c:			; <UNDEFINED> instruction: 0xb6ca
    e81e:	movs	r1, r0
    e820:	lsls	r4, r6, #9
    e822:	movs	r0, r0
    e824:	lsls	r4, r4, #9
    e826:	movs	r0, r0
    e828:	lsls	r4, r1, #10
    e82a:	movs	r0, r0
    e82c:	ldrh	r6, [r3, #26]
    e82e:	movs	r0, r0
    e830:	ldrh	r2, [r2, #28]
    e832:	movs	r0, r0
    e834:	ldrh	r4, [r2, #28]
    e836:	movs	r0, r0
    e838:			; <UNDEFINED> instruction: 0xb60c
    e83a:	movs	r1, r0
    e83c:	ldrh	r2, [r5, #22]
    e83e:	movs	r0, r0
    e840:	ldrh	r4, [r4, #22]
    e842:	movs	r0, r0
    e844:	ldrh	r6, [r5, #22]
    e846:	movs	r0, r0
    e848:	ldrh	r0, [r0, #24]
    e84a:	movs	r0, r0
    e84c:	ldrh	r6, [r6, #22]
    e84e:	movs	r0, r0
    e850:	ldrh	r2, [r6, #16]
    e852:	movs	r0, r0
    e854:	ldrh	r2, [r0, #18]
    e856:	movs	r0, r0
    e858:	ldrh	r0, [r0, #18]
    e85a:	movs	r0, r0
    e85c:	ldrb	r4, [r2, #30]
	...

0000e860 <Settings_invertSortOrder@@Base>:
    e860:	ldr	r3, [r0, #48]	; 0x30
    e862:	cmp	r3, #1
    e864:	ite	eq
    e866:	moveq.w	r3, #4294967295	; 0xffffffff
    e86a:	movne	r3, #1
    e86c:	str	r3, [r0, #48]	; 0x30
    e86e:	bx	lr

0000e870 <SignalsPanel_new@@Base>:
    e870:	ldr	r1, [pc, #272]	; (e984 <SignalsPanel_new@@Base+0x114>)
    e872:	ldr	r0, [pc, #276]	; (e988 <SignalsPanel_new@@Base+0x118>)
    e874:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e878:	add	r1, pc
    e87a:	sub	sp, #28
    e87c:	add	r0, pc
    e87e:	bl	91d4 <FunctionBar_newEnterEsc@@Base>
    e882:	ldr	r5, [pc, #264]	; (e98c <SignalsPanel_new@@Base+0x11c>)
    e884:	ldr	r4, [pc, #264]	; (e990 <SignalsPanel_new@@Base+0x120>)
    e886:	movs	r3, #1
    e888:	add	r5, pc
    e88a:	mov	r2, r3
    e88c:	mov	r1, r3
    e88e:	str	r0, [sp, #8]
    e890:	mov	r0, r3
    e892:	ldr	r4, [r5, r4]
    e894:	strd	r3, r4, [sp]
    e898:	bl	b198 <Panel_new@@Base>
    e89c:	ldr	r3, [pc, #244]	; (e994 <SignalsPanel_new@@Base+0x124>)
    e89e:	ldr	r3, [r5, r3]
    e8a0:	ldr	r7, [r3, #0]
    e8a2:	mov	r6, r0
    e8a4:	cmp	r7, #0
    e8a6:	beq.n	e96a <SignalsPanel_new@@Base+0xfa>
    e8a8:	ldr	r3, [pc, #236]	; (e998 <SignalsPanel_new@@Base+0x128>)
    e8aa:	movs	r4, #0
    e8ac:	mov.w	r8, #15
    e8b0:	ldr	r5, [r5, r3]
    e8b2:	add.w	r9, r5, #4
    e8b6:	ldr.w	r1, [r9, r4, lsl #3]
    e8ba:	ldr.w	r0, [r5, r4, lsl #3]
    e8be:	cmp	r1, #15
    e8c0:	it	eq
    e8c2:	moveq	r8, r4
    e8c4:	bl	9b90 <ListItem_new@@Base>
    e8c8:	mov	r1, r4
    e8ca:	adds	r4, #1
    e8cc:	mov	r2, r0
    e8ce:	mov	r0, r6
    e8d0:	bl	b2bc <Panel_set@@Base>
    e8d4:	cmp	r4, r7
    e8d6:	bne.n	e8b6 <SignalsPanel_new@@Base+0x46>
    e8d8:	blx	6a18 <__libc_current_sigrtmax@plt>
    e8dc:	mov	r4, r0
    e8de:	blx	6c08 <__libc_current_sigrtmin@plt>
    e8e2:	subs	r0, r4, r0
    e8e4:	cmp	r0, #100	; 0x64
    e8e6:	bgt.n	e950 <SignalsPanel_new@@Base+0xe0>
    e8e8:	blx	6c08 <__libc_current_sigrtmin@plt>
    e8ec:	ldr	r3, [pc, #172]	; (e99c <SignalsPanel_new@@Base+0x12c>)
    e8ee:	ldr.w	r9, [pc, #176]	; e9a0 <SignalsPanel_new@@Base+0x130>
    e8f2:	ldr.w	fp, [pc, #176]	; e9a4 <SignalsPanel_new@@Base+0x134>
    e8f6:	add	r3, pc
    e8f8:	str.w	r8, [sp, #20]
    e8fc:	add	r9, pc
    e8fe:	add	fp, pc
    e900:	mov	r8, r3
    e902:	mov	sl, r0
    e904:	mov	r4, r0
    e906:	b.n	e944 <SignalsPanel_new@@Base+0xd4>
    e908:	blx	6c08 <__libc_current_sigrtmin@plt>
    e90c:	movs	r3, #16
    e90e:	mov	r1, r3
    e910:	movs	r2, #1
    e912:	str	r4, [sp, #4]
    e914:	str.w	r8, [sp]
    e918:	subs	r5, r4, r0
    e91a:	mov	r0, r9
    e91c:	str	r5, [sp, #8]
    e91e:	blx	6c78 <__snprintf_chk@plt>
    e922:	cmp	r0, #15
    e924:	bgt.n	e970 <SignalsPanel_new@@Base+0x100>
    e926:	cbnz	r5, e92c <SignalsPanel_new@@Base+0xbc>
    e928:	strb.w	r5, [r9, #11]
    e92c:	mov	r1, r4
    e92e:	mov	r0, fp
    e930:	bl	9b90 <ListItem_new@@Base>
    e934:	sub.w	r1, r7, sl
    e938:	add	r1, r4
    e93a:	adds	r4, #1
    e93c:	mov	r2, r0
    e93e:	mov	r0, r6
    e940:	bl	b2bc <Panel_set@@Base>
    e944:	blx	6a18 <__libc_current_sigrtmax@plt>
    e948:	cmp	r0, r4
    e94a:	bge.n	e908 <SignalsPanel_new@@Base+0x98>
    e94c:	ldr.w	r8, [sp, #20]
    e950:	ldr	r1, [pc, #84]	; (e9a8 <SignalsPanel_new@@Base+0x138>)
    e952:	mov	r0, r6
    e954:	add	r1, pc
    e956:	bl	b22c <Panel_setHeader@@Base>
    e95a:	mov	r0, r6
    e95c:	mov	r1, r8
    e95e:	bl	b350 <Panel_setSelected@@Base>
    e962:	mov	r0, r6
    e964:	add	sp, #28
    e966:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e96a:	mov.w	r8, #15
    e96e:	b.n	e8d8 <SignalsPanel_new@@Base+0x68>
    e970:	movs	r0, #1
    e972:	blx	6730 <curs_set@plt>
    e976:	blx	6c48 <endwin@plt+0x4>
    e97a:	movs	r1, #0
    e97c:	movs	r0, #1
    e97e:	blx	683c <err@plt>
    e982:	nop
    e984:	ldrh	r0, [r6, #14]
    e986:	movs	r0, r0
    e988:	ldrh	r4, [r6, #14]
    e98a:	movs	r0, r0
    e98c:	push	{r2, r7}
    e98e:	movs	r1, r0
    e990:	lsls	r0, r1, #10
    e992:	movs	r0, r0
    e994:	lsls	r0, r5, #11
    e996:	movs	r0, r0
    e998:	lsls	r4, r2, #10
    e99a:	movs	r0, r0
    e99c:	ldrh	r2, [r2, #12]
    e99e:	movs	r0, r0
    e9a0:	beq.n	ea1c <String_trim@@Base+0x38>
    e9a2:	movs	r1, r0
    e9a4:	beq.n	ea1c <String_trim@@Base+0x38>
    e9a6:	movs	r1, r0
    e9a8:	ldrh	r4, [r4, #8]
	...

0000e9ac <String_cat@@Base>:
    e9ac:	push	{r4, r5, r6, r7, lr}
    e9ae:	sub	sp, #12
    e9b0:	mov	r6, r1
    e9b2:	str	r0, [sp, #4]
    e9b4:	blx	6a0c <strlen@plt>
    e9b8:	mov	r4, r0
    e9ba:	mov	r0, r6
    e9bc:	blx	6a0c <strlen@plt>
    e9c0:	mov	r7, r0
    e9c2:	adds	r0, r4, r0
    e9c4:	adds	r0, #1
    e9c6:	bl	11d84 <xMalloc@@Base>
    e9ca:	ldr	r1, [sp, #4]
    e9cc:	mov	r2, r4
    e9ce:	mov	r5, r0
    e9d0:	blx	6a9c <strncpy@plt>
    e9d4:	adds	r2, r7, #1
    e9d6:	adds	r0, r5, r4
    e9d8:	mov	r1, r6
    e9da:	blx	6a9c <strncpy@plt>
    e9de:	mov	r0, r5
    e9e0:	add	sp, #12
    e9e2:	pop	{r4, r5, r6, r7, pc}

0000e9e4 <String_trim@@Base>:
    e9e4:	push	{r3, r4, r5, lr}
    e9e6:	mov	r4, r0
    e9e8:	ldrb	r3, [r0, #0]
    e9ea:	sub.w	r2, r3, #9
    e9ee:	cmp	r3, #32
    e9f0:	it	ne
    e9f2:	cmpne	r2, #1
    e9f4:	bhi.n	ea06 <String_trim@@Base+0x22>
    e9f6:	ldrb.w	r3, [r4, #1]!
    e9fa:	sub.w	r2, r3, #9
    e9fe:	cmp	r3, #32
    ea00:	it	ne
    ea02:	cmpne	r2, #1
    ea04:	bls.n	e9f6 <String_trim@@Base+0x12>
    ea06:	mov	r0, r4
    ea08:	blx	6a0c <strlen@plt>
    ea0c:	mov	r5, r0
    ea0e:	cbz	r0, ea2a <String_trim@@Base+0x46>
    ea10:	adds	r2, r4, r0
    ea12:	ldrb.w	r3, [r2, #-1]!
    ea16:	mov	r5, r0
    ea18:	sub.w	r1, r3, #9
    ea1c:	cmp	r3, #32
    ea1e:	it	ne
    ea20:	cmpne	r1, #1
    ea22:	bhi.n	ea42 <String_trim@@Base+0x5e>
    ea24:	subs	r0, r5, #1
    ea26:	bne.n	ea12 <String_trim@@Base+0x2e>
    ea28:	mov	r5, r0
    ea2a:	movs	r0, #1
    ea2c:	bl	11d84 <xMalloc@@Base>
    ea30:	mov	r1, r4
    ea32:	mov	r2, r5
    ea34:	mov	r4, r0
    ea36:	blx	6a9c <strncpy@plt>
    ea3a:	movs	r3, #0
    ea3c:	mov	r0, r4
    ea3e:	strb	r3, [r4, r5]
    ea40:	pop	{r3, r4, r5, pc}
    ea42:	adds	r0, #1
    ea44:	b.n	ea2c <String_trim@@Base+0x48>
    ea46:	nop

0000ea48 <String_eq@@Base>:
    ea48:	cmp	r1, #0
    ea4a:	it	ne
    ea4c:	cmpne	r0, #0
    ea4e:	push	{r3, lr}
    ea50:	bne.n	ea5e <String_eq@@Base+0x16>
    ea52:	mov	r3, r1
    ea54:	orrs	r3, r0
    ea56:	ite	eq
    ea58:	moveq	r0, #1
    ea5a:	movne	r0, #0
    ea5c:	pop	{r3, pc}
    ea5e:	blx	66b4 <strcmp@plt+0x4>
    ea62:	clz	r0, r0
    ea66:	lsrs	r0, r0, #5
    ea68:	pop	{r3, pc}
    ea6a:	nop

0000ea6c <String_split@@Base>:
    ea6c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ea70:	sub	sp, #12
    ea72:	mov	r4, r0
    ea74:	mov	sl, r1
    ea76:	movs	r5, #0
    ea78:	movs	r1, #4
    ea7a:	movs	r0, #10
    ea7c:	str	r5, [r2, #0]
    ea7e:	str	r2, [sp, #4]
    ea80:	bl	11da0 <xCalloc@@Base>
    ea84:	movs	r3, #10
    ea86:	str	r3, [sp, #0]
    ea88:	mov	r8, r0
    ea8a:	mov	r1, sl
    ea8c:	mov	r0, r4
    ea8e:	blx	6a24 <strchr@plt>
    ea92:	lsls	r6, r5, #2
    ea94:	adds	r7, r5, #1
    ea96:	sub.w	r9, r0, r4
    ea9a:	add.w	fp, r9, #1
    ea9e:	cbz	r0, eadc <String_split@@Base+0x70>
    eaa0:	mov	r0, fp
    eaa2:	bl	11d84 <xMalloc@@Base>
    eaa6:	mov	r1, r4
    eaa8:	mov	r2, r9
    eaaa:	add	r4, fp
    eaac:	mov	r6, r0
    eaae:	blx	6a9c <strncpy@plt>
    eab2:	mov.w	r3, #0
    eab6:	strb.w	r3, [r6, r9]
    eaba:	ldr	r3, [sp, #0]
    eabc:	str.w	r6, [r8, r5, lsl #2]
    eac0:	cmp	r3, r7
    eac2:	beq.n	eac8 <String_split@@Base+0x5c>
    eac4:	mov	r5, r7
    eac6:	b.n	ea8a <String_split@@Base+0x1e>
    eac8:	add.w	r3, r5, #11
    eacc:	mov	r0, r8
    eace:	str	r3, [sp, #0]
    ead0:	mov	r5, r7
    ead2:	lsls	r1, r3, #2
    ead4:	bl	11dc8 <xRealloc@@Base>
    ead8:	mov	r8, r0
    eada:	b.n	ea8a <String_split@@Base+0x1e>
    eadc:	ldrb	r3, [r4, #0]
    eade:	mov.w	r9, r7, lsl #2
    eae2:	cbnz	r3, eafa <String_split@@Base+0x8e>
    eae4:	mov	r1, r9
    eae6:	mov	r0, r8
    eae8:	bl	11dc8 <xRealloc@@Base>
    eaec:	ldr	r3, [sp, #4]
    eaee:	movs	r2, #0
    eaf0:	str	r2, [r0, r6]
    eaf2:	str	r5, [r3, #0]
    eaf4:	add	sp, #12
    eaf6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eafa:	mov	r0, r4
    eafc:	mov	r5, r7
    eafe:	blx	6a0c <strlen@plt>
    eb02:	adds	r2, r0, #1
    eb04:	str	r2, [sp, #0]
    eb06:	mov	r0, r2
    eb08:	bl	11d84 <xMalloc@@Base>
    eb0c:	mov	r1, r4
    eb0e:	ldr	r2, [sp, #0]
    eb10:	mov	r4, r0
    eb12:	blx	6a9c <strncpy@plt>
    eb16:	str.w	r4, [r8, r6]
    eb1a:	mov	r6, r9
    eb1c:	add.w	r9, r9, #4
    eb20:	b.n	eae4 <String_split@@Base+0x78>
    eb22:	nop

0000eb24 <String_freeArray@@Base>:
    eb24:	cbz	r0, eb46 <String_freeArray@@Base+0x22>
    eb26:	push	{r3, r4, r5, lr}
    eb28:	mov	r5, r0
    eb2a:	ldr	r0, [r0, #0]
    eb2c:	cbz	r0, eb3c <String_freeArray@@Base+0x18>
    eb2e:	mov	r4, r5
    eb30:	blx	6758 <free@plt+0x4>
    eb34:	ldr.w	r0, [r4, #4]!
    eb38:	cmp	r0, #0
    eb3a:	bne.n	eb30 <String_freeArray@@Base+0xc>
    eb3c:	mov	r0, r5
    eb3e:	ldmia.w	sp!, {r3, r4, r5, lr}
    eb42:	b.w	6754 <free@plt>
    eb46:	bx	lr

0000eb48 <String_getToken@@Base>:
    eb48:	ldr	r2, [pc, #180]	; (ec00 <String_getToken@@Base+0xb8>)
    eb4a:	ldr	r3, [pc, #184]	; (ec04 <String_getToken@@Base+0xbc>)
    eb4c:	add	r2, pc
    eb4e:	push	{r4, r5, r6, r7, lr}
    eb50:	sub	sp, #60	; 0x3c
    eb52:	ldr	r3, [r2, r3]
    eb54:	mov	r6, r1
    eb56:	mov	r5, r0
    eb58:	ldr	r3, [r3, #0]
    eb5a:	str	r3, [sp, #52]	; 0x34
    eb5c:	mov.w	r3, #0
    eb60:	blx	6a0c <strlen@plt>
    eb64:	uxth	r1, r0
    eb66:	cmp	r1, #0
    eb68:	beq.n	ebd6 <String_getToken@@Base+0x8e>
    eb6a:	subs	r1, #1
    eb6c:	movs	r7, #0
    eb6e:	subs	r4, r5, #1
    eb70:	mov	r0, r7
    eb72:	uxtah	ip, r5, r1
    eb76:	mov	r5, r7
    eb78:	b.n	eb82 <String_getToken@@Base+0x3a>
    eb7a:	cmp	r2, #32
    eb7c:	bne.n	eb9e <String_getToken@@Base+0x56>
    eb7e:	cmp	ip, r4
    eb80:	beq.n	ebd6 <String_getToken@@Base+0x8e>
    eb82:	ldrb.w	r2, [r4, #1]!
    eb86:	eor.w	r3, r0, #1
    eb8a:	mov	r1, r7
    eb8c:	subs.w	r0, r2, #32
    eb90:	it	ne
    eb92:	movne	r0, #1
    eb94:	tst	r0, r3
    eb96:	itt	ne
    eb98:	addne	r5, #1
    eb9a:	uxthne	r5, r5
    eb9c:	beq.n	eb7a <String_getToken@@Base+0x32>
    eb9e:	subs.w	r3, r2, #10
    eba2:	it	ne
    eba4:	movne	r3, #1
    eba6:	cmp	r2, #0
    eba8:	it	eq
    ebaa:	moveq	r3, #0
    ebac:	cmp	r2, #255	; 0xff
    ebae:	ite	eq
    ebb0:	moveq	r3, #0
    ebb2:	andne.w	r3, r3, #1
    ebb6:	cmp	r6, r5
    ebb8:	ite	ne
    ebba:	movne	r3, #0
    ebbc:	andeq.w	r3, r3, #1
    ebc0:	cmp	r3, #0
    ebc2:	beq.n	eb7e <String_getToken@@Base+0x36>
    ebc4:	adds	r1, r7, #1
    ebc6:	add	r3, sp, #56	; 0x38
    ebc8:	add	r3, r7
    ebca:	cmp	ip, r4
    ebcc:	uxth	r7, r1
    ebce:	strb.w	r2, [r3, #-56]
    ebd2:	mov	r1, r7
    ebd4:	bne.n	eb82 <String_getToken@@Base+0x3a>
    ebd6:	add	r3, sp, #56	; 0x38
    ebd8:	mov	r0, sp
    ebda:	add	r1, r3
    ebdc:	movs	r3, #0
    ebde:	strb.w	r3, [r1, #-56]
    ebe2:	bl	11de4 <xStrdup@@Base>
    ebe6:	ldr	r2, [pc, #32]	; (ec08 <String_getToken@@Base+0xc0>)
    ebe8:	ldr	r3, [pc, #24]	; (ec04 <String_getToken@@Base+0xbc>)
    ebea:	add	r2, pc
    ebec:	ldr	r3, [r2, r3]
    ebee:	ldr	r2, [r3, #0]
    ebf0:	ldr	r3, [sp, #52]	; 0x34
    ebf2:	eors	r2, r3
    ebf4:	bne.n	ebfa <String_getToken@@Base+0xb2>
    ebf6:	add	sp, #60	; 0x3c
    ebf8:	pop	{r4, r5, r6, r7, pc}
    ebfa:	blx	67d0 <__stack_chk_fail@plt>
    ebfe:	nop
    ec00:	cbz	r0, ec34 <String_readLine@@Base+0x28>
    ec02:	movs	r1, r0
    ec04:	lsls	r0, r0, #9
    ec06:	movs	r0, r0
    ec08:	cbz	r2, ec14 <String_readLine@@Base+0x8>
    ec0a:	movs	r1, r0

0000ec0c <String_readLine@@Base>:
    ec0c:	push	{r3, r4, r5, r6, r7, lr}
    ec0e:	mov	r7, r0
    ec10:	movw	r0, #1025	; 0x401
    ec14:	mov.w	r5, #1024	; 0x400
    ec18:	bl	11d84 <xMalloc@@Base>
    ec1c:	mov	r4, r0
    ec1e:	mov	r6, r0
    ec20:	b.n	ec46 <String_readLine@@Base+0x3a>
    ec22:	blx	6b6c <strrchr@plt>
    ec26:	mov	r3, r0
    ec28:	mov	r0, r7
    ec2a:	cbnz	r3, ec68 <String_readLine@@Base+0x5c>
    ec2c:	blx	69f4 <feof@plt>
    ec30:	addw	r1, r5, #1025	; 0x401
    ec34:	mov	r3, r0
    ec36:	mov	r0, r4
    ec38:	cbnz	r3, ec64 <String_readLine@@Base+0x58>
    ec3a:	bl	11dc8 <xRealloc@@Base>
    ec3e:	adds	r6, r0, r5
    ec40:	add.w	r5, r5, #1024	; 0x400
    ec44:	mov	r4, r0
    ec46:	movw	r1, #1025	; 0x401
    ec4a:	mov	r2, r7
    ec4c:	mov	r0, r6
    ec4e:	blx	6764 <fgets@plt>
    ec52:	movs	r1, #10
    ec54:	mov	r3, r0
    ec56:	mov	r0, r6
    ec58:	cmp	r3, #0
    ec5a:	bne.n	ec22 <String_readLine@@Base+0x16>
    ec5c:	mov	r0, r4
    ec5e:	mov	r4, r3
    ec60:	blx	6758 <free@plt+0x4>
    ec64:	mov	r0, r4
    ec66:	pop	{r3, r4, r5, r6, r7, pc}
    ec68:	movs	r2, #0
    ec6a:	mov	r0, r4
    ec6c:	strb	r2, [r3, #0]
    ec6e:	pop	{r3, r4, r5, r6, r7, pc}
    ec70:	push	{r4, r5, r6, lr}
    ec72:	mov	r6, r0
    ec74:	mov	r5, r1
    ec76:	mov	r4, r2
    ec78:	bl	12264 <Platform_setSwapValues@@Base>
    ec7c:	ldr	r3, [r6, #32]
    ec7e:	mov	r2, r4
    ec80:	mov	r0, r5
    ec82:	vldr	d7, [r3]
    ec86:	vcvt.u32.f64	s15, d7
    ec8a:	vmov	r1, s15
    ec8e:	bl	a9d4 <Meter_humanUnit@@Base>
    ec92:	subs	r4, r4, r0
    ec94:	cmp	r4, #0
    ec96:	bgt.n	ec9a <String_readLine@@Base+0x8e>
    ec98:	pop	{r4, r5, r6, pc}
    ec9a:	movs	r3, #47	; 0x2f
    ec9c:	strb	r3, [r5, r0]
    ec9e:	vldr	d7, [r6, #40]	; 0x28
    eca2:	add	r0, r5
    eca4:	subs	r2, r4, #1
    eca6:	adds	r0, #1
    eca8:	ldmia.w	sp!, {r4, r5, r6, lr}
    ecac:	vcvt.u32.f64	s15, d7
    ecb0:	vmov	r1, s15
    ecb4:	b.w	a9d4 <Meter_humanUnit@@Base>
    ecb8:	push	{r4, r5, r6, r7, lr}
    ecba:	sub	sp, #60	; 0x3c
    ecbc:	ldr	r4, [pc, #144]	; (ed50 <String_readLine@@Base+0x144>)
    ecbe:	mov	r5, r1
    ecc0:	ldr	r2, [pc, #144]	; (ed54 <String_readLine@@Base+0x148>)
    ecc2:	mov	r7, r0
    ecc4:	add	r4, pc
    ecc6:	ldr	r3, [pc, #144]	; (ed58 <String_readLine@@Base+0x14c>)
    ecc8:	mov	r0, r1
    ecca:	ldr	r2, [r4, r2]
    eccc:	add	r3, pc
    ecce:	mov	r4, sp
    ecd0:	ldr	r2, [r2, #0]
    ecd2:	str	r2, [sp, #52]	; 0x34
    ecd4:	mov.w	r2, #0
    ecd8:	ldr	r2, [pc, #128]	; (ed5c <String_readLine@@Base+0x150>)
    ecda:	ldr	r6, [r3, r2]
    ecdc:	ldr	r2, [pc, #128]	; (ed60 <String_readLine@@Base+0x154>)
    ecde:	ldr	r3, [r6, #0]
    ece0:	add	r2, pc
    ece2:	ldr	r1, [r3, #44]	; 0x2c
    ece4:	bl	d3b8 <RichString_write@@Base>
    ece8:	vldr	d7, [r7, #40]	; 0x28
    ecec:	movs	r2, #50	; 0x32
    ecee:	mov	r0, r4
    ecf0:	vcvt.u32.f64	s15, d7
    ecf4:	vmov	r1, s15
    ecf8:	bl	a9d4 <Meter_humanUnit@@Base>
    ecfc:	ldr	r3, [r6, #0]
    ecfe:	mov	r0, r5
    ed00:	mov	r2, r4
    ed02:	ldr	r1, [r3, #48]	; 0x30
    ed04:	bl	d1e4 <RichString_append@@Base>
    ed08:	ldr	r3, [r7, #32]
    ed0a:	movs	r2, #50	; 0x32
    ed0c:	mov	r0, r4
    ed0e:	vldr	d7, [r3]
    ed12:	vcvt.u32.f64	s15, d7
    ed16:	vmov	r1, s15
    ed1a:	bl	a9d4 <Meter_humanUnit@@Base>
    ed1e:	ldr	r3, [r6, #0]
    ed20:	ldr	r2, [pc, #64]	; (ed64 <String_readLine@@Base+0x158>)
    ed22:	mov	r0, r5
    ed24:	ldr	r1, [r3, #44]	; 0x2c
    ed26:	add	r2, pc
    ed28:	bl	d1e4 <RichString_append@@Base>
    ed2c:	ldr	r3, [r6, #0]
    ed2e:	mov	r2, r4
    ed30:	mov	r0, r5
    ed32:	ldr	r1, [r3, #48]	; 0x30
    ed34:	bl	d1e4 <RichString_append@@Base>
    ed38:	ldr	r2, [pc, #44]	; (ed68 <String_readLine@@Base+0x15c>)
    ed3a:	ldr	r3, [pc, #24]	; (ed54 <String_readLine@@Base+0x148>)
    ed3c:	add	r2, pc
    ed3e:	ldr	r3, [r2, r3]
    ed40:	ldr	r2, [r3, #0]
    ed42:	ldr	r3, [sp, #52]	; 0x34
    ed44:	eors	r2, r3
    ed46:	bne.n	ed4c <String_readLine@@Base+0x140>
    ed48:	add	sp, #60	; 0x3c
    ed4a:	pop	{r4, r5, r6, r7, pc}
    ed4c:	blx	67d0 <__stack_chk_fail@plt>
    ed50:	add	sp, #288	; 0x120
    ed52:	movs	r1, r0
    ed54:	lsls	r0, r0, #9
    ed56:	movs	r0, r0
    ed58:	add	sp, #256	; 0x100
    ed5a:	movs	r1, r0
    ed5c:	lsls	r0, r6, #9
    ed5e:	movs	r0, r0
    ed60:	add	r2, pc, #416	; (adr r2, ef04 <String_readLine@@Base+0x2f8>)
    ed62:	movs	r0, r0
    ed64:	ldrb	r2, [r4, #16]
    ed66:	movs	r0, r0
    ed68:	add	r7, sp, #832	; 0x340
    ed6a:	movs	r1, r0
    ed6c:	push	{r4, r5, r6, r7, lr}
    ed6e:	mov	ip, r1
    ed70:	ldr	r6, [r0, #28]
    ed72:	mov	r5, r2
    ed74:	ldr	r3, [r0, #32]
    ed76:	mov	r4, r0
    ed78:	sub	sp, #20
    ed7a:	ldrd	lr, r2, [r6, #48]	; 0x30
    ed7e:	ldr	r1, [r6, #40]	; 0x28
    ed80:	ldr.w	r0, [r6, #128]	; 0x80
    ed84:	subs	r7, r1, r2
    ed86:	vmov	s15, r2
    ed8a:	sub.w	r7, r7, lr
    ed8e:	ldr	r2, [r6, #44]	; 0x2c
    ed90:	vcvt.f64.s32	d6, s15
    ed94:	vmov	s15, r7
    ed98:	cmp	r0, r2
    ed9a:	it	ge
    ed9c:	movge	r0, r2
    ed9e:	vcvt.f64.s32	d7, s15
    eda2:	vstr	d6, [r3]
    eda6:	vmov	s13, lr
    edaa:	vstr	d7, [r3, #16]
    edae:	vmov	s15, r0
    edb2:	vcvt.f64.s32	d6, s13
    edb6:	vcvt.f64.s32	d7, s15
    edba:	vstr	d6, [r3, #8]
    edbe:	vstr	d7, [r3, #24]
    edc2:	vmov	s15, r1
    edc6:	vldr	d6, [r4, #40]	; 0x28
    edca:	vcvt.f64.s32	d7, s15
    edce:	vcmpe.f64	d7, d6
    edd2:	vmrs	APSR_nzcv, fpscr
    edd6:	it	le
    edd8:	movle	r2, r0
    edda:	ble.n	edec <String_readLine@@Base+0x1e0>
    eddc:	vstr	d7, [r4, #40]	; 0x28
    ede0:	vldr	d7, [r3, #24]
    ede4:	vcvt.s32.f64	s15, d7
    ede8:	vmov	r2, s15
    edec:	ldr	r1, [r6, #0]
    edee:	movs	r7, #0
    edf0:	movs	r6, #0
    edf2:	ldrb.w	r1, [r1, #63]	; 0x3f
    edf6:	cbnz	r1, edfc <String_readLine@@Base+0x1f0>
    edf8:	ldrd	r6, r7, [r3]
    edfc:	ldr	r1, [pc, #72]	; (ee48 <String_readLine@@Base+0x23c>)
    edfe:	mov	r0, ip
    ee00:	strd	r6, r7, [r3]
    ee04:	mov.w	r3, #4294967295	; 0xffffffff
    ee08:	str	r2, [sp, #4]
    ee0a:	add	r1, pc
    ee0c:	str	r1, [sp, #0]
    ee0e:	movs	r2, #1
    ee10:	vldr	d7, [r4, #40]	; 0x28
    ee14:	mov	r1, r5
    ee16:	vcvt.s32.f64	s14, d7
    ee1a:	vstr	s14, [sp, #8]
    ee1e:	blx	6c78 <__snprintf_chk@plt>
    ee22:	cmp	r5, r0
    ee24:	ite	gt
    ee26:	movgt	r5, #0
    ee28:	movle	r5, #1
    ee2a:	orrs.w	r3, r5, r0, lsr #31
    ee2e:	bne.n	ee34 <String_readLine@@Base+0x228>
    ee30:	add	sp, #20
    ee32:	pop	{r4, r5, r6, r7, pc}
    ee34:	movs	r0, #1
    ee36:	blx	6730 <curs_set@plt>
    ee3a:	blx	6c48 <endwin@plt+0x4>
    ee3e:	movs	r1, #0
    ee40:	movs	r0, #1
    ee42:	blx	683c <err@plt>
    ee46:	nop
    ee48:	strh	r6, [r2, #36]	; 0x24
    ee4a:	movs	r0, r0
    ee4c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    ee50:	sub	sp, #40	; 0x28
    ee52:	ldr	r7, [r0, #28]
    ee54:	mov	r5, r0
    ee56:	ldr.w	ip, [pc, #356]	; efbc <String_readLine@@Base+0x3b0>
    ee5a:	add	r6, sp, #16
    ee5c:	ldr	r2, [pc, #352]	; (efc0 <String_readLine@@Base+0x3b4>)
    ee5e:	movs	r3, #20
    ee60:	str	r7, [sp, #12]
    ee62:	add	ip, pc
    ee64:	ldr	r7, [r5, #32]
    ee66:	add	r2, pc
    ee68:	mov	r4, r1
    ee6a:	mov	r0, r6
    ee6c:	mov	r1, r3
    ee6e:	vldr	d7, [r7, #16]
    ee72:	ldr	r7, [sp, #12]
    ee74:	vcvt.s32.f64	s14, d7
    ee78:	ldr.w	r8, [r7]
    ee7c:	ldr	r7, [pc, #324]	; (efc4 <String_readLine@@Base+0x3b8>)
    ee7e:	ldr.w	r7, [ip, r7]
    ee82:	ldr	r7, [r7, #0]
    ee84:	str	r7, [sp, #36]	; 0x24
    ee86:	mov.w	r7, #0
    ee8a:	str	r2, [sp, #0]
    ee8c:	vstr	s14, [sp, #4]
    ee90:	movs	r2, #1
    ee92:	ldr	r7, [pc, #308]	; (efc8 <String_readLine@@Base+0x3bc>)
    ee94:	blx	6c78 <__snprintf_chk@plt>
    ee98:	ldr	r3, [pc, #304]	; (efcc <String_readLine@@Base+0x3c0>)
    ee9a:	mov	r2, r6
    ee9c:	add	r7, pc
    ee9e:	mov	r0, r4
    eea0:	ldr	r7, [r7, r3]
    eea2:	ldr	r3, [r7, #0]
    eea4:	ldr	r1, [r3, #48]	; 0x30
    eea6:	bl	d3b8 <RichString_write@@Base>
    eeaa:	ldr	r3, [r7, #0]
    eeac:	ldrb.w	r2, [r8, #67]	; 0x43
    eeb0:	ldrd	r1, r9, [r3, #44]	; 0x2c
    eeb4:	mov	sl, r1
    eeb6:	cbz	r2, eebc <String_readLine@@Base+0x2b0>
    eeb8:	ldrd	sl, r9, [r3, #112]	; 0x70
    eebc:	ldrb.w	r3, [r8, #64]	; 0x40
    eec0:	cmp	r3, #0
    eec2:	beq.n	ef6e <String_readLine@@Base+0x362>
    eec4:	ldrb.w	r3, [r8, #63]	; 0x3f
    eec8:	cbz	r3, ef24 <String_readLine@@Base+0x318>
    eeca:	ldr	r2, [pc, #260]	; (efd0 <String_readLine@@Base+0x3c4>)
    eecc:	mov	r0, r4
    eece:	add	r2, pc
    eed0:	bl	d1e4 <RichString_append@@Base>
    eed4:	ldr	r5, [r5, #32]
    eed6:	ldr	r0, [pc, #252]	; (efd4 <String_readLine@@Base+0x3c8>)
    eed8:	movs	r3, #20
    eeda:	mov	r1, r3
    eedc:	movs	r2, #1
    eede:	vldr	d7, [r5, #24]
    eee2:	add	r0, pc
    eee4:	str	r0, [sp, #0]
    eee6:	mov	r0, r6
    eee8:	vcvt.s32.f64	s14, d7
    eeec:	vstr	s14, [sp, #4]
    eef0:	blx	6c78 <__snprintf_chk@plt>
    eef4:	ldr	r3, [r7, #0]
    eef6:	mov	r2, r6
    eef8:	mov	r0, r4
    eefa:	ldr	r1, [r3, #64]	; 0x40
    eefc:	bl	d1e4 <RichString_append@@Base>
    ef00:	ldr	r3, [r7, #0]
    ef02:	ldr	r2, [pc, #212]	; (efd8 <String_readLine@@Base+0x3cc>)
    ef04:	mov	r0, r4
    ef06:	ldr	r1, [r3, #44]	; 0x2c
    ef08:	add	r2, pc
    ef0a:	bl	d1e4 <RichString_append@@Base>
    ef0e:	ldr	r2, [pc, #204]	; (efdc <String_readLine@@Base+0x3d0>)
    ef10:	ldr	r3, [pc, #176]	; (efc4 <String_readLine@@Base+0x3b8>)
    ef12:	add	r2, pc
    ef14:	ldr	r3, [r2, r3]
    ef16:	ldr	r2, [r3, #0]
    ef18:	ldr	r3, [sp, #36]	; 0x24
    ef1a:	eors	r2, r3
    ef1c:	bne.n	efb8 <String_readLine@@Base+0x3ac>
    ef1e:	add	sp, #40	; 0x28
    ef20:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ef24:	ldr	r2, [pc, #184]	; (efe0 <String_readLine@@Base+0x3d4>)
    ef26:	mov	r0, r4
    ef28:	add	r2, pc
    ef2a:	bl	d1e4 <RichString_append@@Base>
    ef2e:	ldr	r0, [r5, #32]
    ef30:	ldr.w	ip, [pc, #176]	; efe4 <String_readLine@@Base+0x3d8>
    ef34:	movs	r3, #20
    ef36:	mov	r1, r3
    ef38:	movs	r2, #1
    ef3a:	vldr	d7, [r0]
    ef3e:	add	ip, pc
    ef40:	mov	r0, r6
    ef42:	str.w	ip, [sp]
    ef46:	vcvt.s32.f64	s14, d7
    ef4a:	vstr	s14, [sp, #4]
    ef4e:	blx	6c78 <__snprintf_chk@plt>
    ef52:	mov	r2, r6
    ef54:	mov	r1, r9
    ef56:	mov	r0, r4
    ef58:	bl	d1e4 <RichString_append@@Base>
    ef5c:	ldr	r2, [pc, #136]	; (efe8 <String_readLine@@Base+0x3dc>)
    ef5e:	mov	r1, sl
    ef60:	mov	r0, r4
    ef62:	add	r2, pc
    ef64:	bl	d1e4 <RichString_append@@Base>
    ef68:	ldr	r3, [r7, #0]
    ef6a:	ldr	r1, [r3, #44]	; 0x2c
    ef6c:	b.n	eeca <String_readLine@@Base+0x2be>
    ef6e:	ldr	r2, [pc, #124]	; (efec <String_readLine@@Base+0x3e0>)
    ef70:	mov	r0, r4
    ef72:	add	r2, pc
    ef74:	bl	d1e4 <RichString_append@@Base>
    ef78:	ldr	r0, [r5, #32]
    ef7a:	ldr.w	ip, [pc, #116]	; eff0 <String_readLine@@Base+0x3e4>
    ef7e:	movs	r3, #20
    ef80:	mov	r1, r3
    ef82:	movs	r2, #1
    ef84:	vldr	d7, [r0, #8]
    ef88:	add	ip, pc
    ef8a:	mov	r0, r6
    ef8c:	str.w	ip, [sp]
    ef90:	vcvt.s32.f64	s14, d7
    ef94:	vstr	s14, [sp, #4]
    ef98:	blx	6c78 <__snprintf_chk@plt>
    ef9c:	mov	r2, r6
    ef9e:	mov	r1, r9
    efa0:	mov	r0, r4
    efa2:	bl	d1e4 <RichString_append@@Base>
    efa6:	ldr	r2, [pc, #76]	; (eff4 <String_readLine@@Base+0x3e8>)
    efa8:	mov	r1, sl
    efaa:	mov	r0, r4
    efac:	add	r2, pc
    efae:	bl	d1e4 <RichString_append@@Base>
    efb2:	ldr	r3, [r7, #0]
    efb4:	ldr	r1, [r3, #44]	; 0x2c
    efb6:	b.n	eec4 <String_readLine@@Base+0x2b8>
    efb8:	blx	67d0 <__stack_chk_fail@plt>
    efbc:	add	r6, sp, #680	; 0x2a8
    efbe:	movs	r1, r0
    efc0:	strh	r2, [r0, #34]	; 0x22
    efc2:	movs	r0, r0
    efc4:	lsls	r0, r0, #9
    efc6:	movs	r0, r0
    efc8:	add	r6, sp, #448	; 0x1c0
    efca:	movs	r1, r0
    efcc:	lsls	r0, r6, #9
    efce:	movs	r0, r0
    efd0:	strh	r2, [r6, #30]
    efd2:	movs	r0, r0
    efd4:	strh	r6, [r0, #30]
    efd6:	movs	r0, r0
    efd8:	strh	r4, [r7, #28]
    efda:	movs	r0, r0
    efdc:	add	r5, sp, #1000	; 0x3e8
    efde:	movs	r1, r0
    efe0:	strh	r4, [r0, #28]
    efe2:	movs	r0, r0
    efe4:	strh	r2, [r5, #26]
    efe6:	movs	r0, r0
    efe8:	strh	r6, [r2, #26]
    efea:	movs	r0, r0
    efec:	strh	r2, [r7, #24]
    efee:	movs	r0, r0
    eff0:	strh	r0, [r4, #24]
    eff2:	movs	r0, r0
    eff4:	strh	r4, [r0, #24]
    eff6:	movs	r0, r0
    eff8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    effc:	mov	r6, r2
    effe:	ldr	r2, [pc, #380]	; (f17c <String_readLine@@Base+0x570>)
    f000:	sub	sp, #64	; 0x40
    f002:	ldr	r3, [pc, #380]	; (f180 <String_readLine@@Base+0x574>)
    f004:	mov	sl, r0
    f006:	add	r2, pc
    f008:	mov	r7, r1
    f00a:	ldr	r3, [r2, r3]
    f00c:	ldr	r3, [r3, #0]
    f00e:	str	r3, [sp, #60]	; 0x3c
    f010:	mov.w	r3, #0
    f014:	bl	11e60 <Platform_getUptime@@Base>
    f018:	adds	r3, r0, #1
    f01a:	beq.w	f13e <String_readLine@@Base+0x532>
    f01e:	movw	r3, #17671	; 0x4507
    f022:	movt	r3, #49710	; 0xc22e
    f026:	asrs	r4, r0, #31
    f028:	movw	r1, #34953	; 0x8889
    f02c:	smull	r3, r5, r3, r0
    f030:	movt	r1, #34952	; 0x8888
    f034:	movw	r3, #46021	; 0xb3c5
    f038:	movt	r3, #37282	; 0x91a2
    f03c:	add	r5, r0
    f03e:	mov	lr, r4
    f040:	smull	ip, r2, r1, r0
    f044:	rsb	r5, r4, r5, asr #16
    f048:	smull	r4, r3, r3, r0
    f04c:	vmov	s15, r5
    f050:	adds	r4, r2, r0
    f052:	ldr.w	r2, [sl, #32]
    f056:	vcvt.f64.s32	d7, s15
    f05a:	add	r3, r0
    f05c:	asrs	r4, r4, #5
    f05e:	movw	r8, #43691	; 0xaaab
    f062:	rsb	r3, lr, r3, asr #11
    f066:	movt	r8, #10922	; 0x2aaa
    f06a:	sub.w	ip, r4, lr
    f06e:	smull	lr, r8, r8, r3
    f072:	mov.w	r9, ip, asr #31
    f076:	vstr	d7, [r2]
    f07a:	smull	r2, r1, r1, ip
    f07e:	asrs	r2, r3, #31
    f080:	vldr	d6, [sl, #40]	; 0x28
    f084:	add	r1, ip
    f086:	rsb	r8, r2, r8, asr #2
    f08a:	movs	r2, #60	; 0x3c
    f08c:	rsb	r9, r9, r1, asr #5
    f090:	movs	r1, #24
    f092:	mls	r4, r2, ip, r0
    f096:	vcmpe.f64	d7, d6
    f09a:	mls	r9, r2, r9, ip
    f09e:	mls	r8, r1, r8, r3
    f0a2:	vmrs	APSR_nzcv, fpscr
    f0a6:	bgt.n	f114 <String_readLine@@Base+0x508>
    f0a8:	mov.w	r3, #10112	; 0x2780
    f0ac:	movt	r3, #133	; 0x85
    f0b0:	cmp	r0, r3
    f0b2:	bge.n	f124 <String_readLine@@Base+0x518>
    f0b4:	movw	r3, #41727	; 0xa2ff
    f0b8:	movt	r3, #2
    f0bc:	cmp	r0, r3
    f0be:	bgt.n	f14c <String_readLine@@Base+0x540>
    f0c0:	cmp	r5, #1
    f0c2:	ittt	ne
    f0c4:	addne.w	sl, sp, #28
    f0c8:	movne	r3, #0
    f0ca:	strbne.w	r3, [sp, #28]
    f0ce:	beq.n	f152 <String_readLine@@Base+0x546>
    f0d0:	ldr	r5, [pc, #176]	; (f184 <String_readLine@@Base+0x578>)
    f0d2:	mov	r0, r7
    f0d4:	mov.w	r3, #4294967295	; 0xffffffff
    f0d8:	movs	r2, #1
    f0da:	add	r5, pc
    f0dc:	mov	r1, r6
    f0de:	str	r4, [sp, #16]
    f0e0:	str.w	r9, [sp, #12]
    f0e4:	str.w	r8, [sp, #8]
    f0e8:	strd	r5, sl, [sp]
    f0ec:	blx	6c78 <__snprintf_chk@plt>
    f0f0:	cmp	r6, r0
    f0f2:	ite	gt
    f0f4:	movgt	r6, #0
    f0f6:	movle	r6, #1
    f0f8:	orrs.w	r3, r6, r0, lsr #31
    f0fc:	bne.n	f164 <String_readLine@@Base+0x558>
    f0fe:	ldr	r2, [pc, #136]	; (f188 <String_readLine@@Base+0x57c>)
    f100:	ldr	r3, [pc, #124]	; (f180 <String_readLine@@Base+0x574>)
    f102:	add	r2, pc
    f104:	ldr	r3, [r2, r3]
    f106:	ldr	r2, [r3, #0]
    f108:	ldr	r3, [sp, #60]	; 0x3c
    f10a:	eors	r2, r3
    f10c:	bne.n	f176 <String_readLine@@Base+0x56a>
    f10e:	add	sp, #64	; 0x40
    f110:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f114:	mov.w	r3, #10112	; 0x2780
    f118:	movt	r3, #133	; 0x85
    f11c:	cmp	r0, r3
    f11e:	vstr	d7, [sl, #40]	; 0x28
    f122:	blt.n	f0b4 <String_readLine@@Base+0x4a8>
    f124:	ldr	r2, [pc, #100]	; (f18c <String_readLine@@Base+0x580>)
    f126:	add	r2, pc
    f128:	add.w	sl, sp, #28
    f12c:	movs	r3, #32
    f12e:	str	r2, [sp, #0]
    f130:	mov	r1, r3
    f132:	mov	r0, sl
    f134:	movs	r2, #1
    f136:	str	r5, [sp, #4]
    f138:	blx	6c78 <__snprintf_chk@plt>
    f13c:	b.n	f0d0 <String_readLine@@Base+0x4c4>
    f13e:	ldr	r2, [pc, #80]	; (f190 <String_readLine@@Base+0x584>)
    f140:	mov	r0, r7
    f142:	mov	r1, r6
    f144:	add	r2, pc
    f146:	blx	6a60 <snprintf@plt>
    f14a:	b.n	f0f0 <String_readLine@@Base+0x4e4>
    f14c:	ldr	r2, [pc, #68]	; (f194 <String_readLine@@Base+0x588>)
    f14e:	add	r2, pc
    f150:	b.n	f128 <String_readLine@@Base+0x51c>
    f152:	ldr	r3, [pc, #68]	; (f198 <String_readLine@@Base+0x58c>)
    f154:	add.w	sl, sp, #28
    f158:	add	r3, pc
    f15a:	ldmia.w	r3, {r0, r1}
    f15e:	stmia.w	sl, {r0, r1}
    f162:	b.n	f0d0 <String_readLine@@Base+0x4c4>
    f164:	movs	r0, #1
    f166:	blx	6730 <curs_set@plt>
    f16a:	blx	6c48 <endwin@plt+0x4>
    f16e:	movs	r1, #0
    f170:	movs	r0, #1
    f172:	blx	683c <err@plt>
    f176:	blx	67d0 <__stack_chk_fail@plt>
    f17a:	nop
    f17c:	add	r5, sp, #24
    f17e:	movs	r1, r0
    f180:	lsls	r0, r0, #9
    f182:	movs	r0, r0
    f184:	strh	r6, [r7, #16]
    f186:	movs	r0, r0
    f188:	add	r4, sp, #40	; 0x28
    f18a:	movs	r1, r0
    f18c:	strh	r6, [r1, #14]
    f18e:	movs	r0, r0
    f190:	strh	r4, [r4, #12]
    f192:	movs	r0, r0
    f194:	strh	r6, [r6, #12]
    f196:	movs	r0, r0
    f198:	strh	r0, [r7, #12]
	...

0000f19c <TraceScreen_delete@@Base>:
    f19c:	push	{r4, lr}
    f19e:	mov	r4, r0
    f1a0:	ldr	r0, [r0, #36]	; 0x24
    f1a2:	cmp	r0, #0
    f1a4:	ble.n	f1bc <TraceScreen_delete@@Base+0x20>
    f1a6:	movs	r1, #15
    f1a8:	blx	69c4 <kill@plt+0x4>
    f1ac:	movs	r2, #0
    f1ae:	ldr	r0, [r4, #36]	; 0x24
    f1b0:	mov	r1, r2
    f1b2:	blx	6890 <waitpid@plt>
    f1b6:	ldr	r0, [r4, #40]	; 0x28
    f1b8:	blx	6b30 <fclose@plt>
    f1bc:	bl	8664 <CRT_enableDelay@@Base>
    f1c0:	mov	r0, r4
    f1c2:	bl	119e0 <InfoScreen_done@@Base>
    f1c6:	ldmia.w	sp!, {r4, lr}
    f1ca:	b.w	6754 <free@plt>
    f1ce:	nop

0000f1d0 <TraceScreen_draw@@Base>:
    f1d0:	push	{r4, r5, r6, r7, lr}
    f1d2:	mov	r4, r0
    f1d4:	ldr	r6, [pc, #92]	; (f234 <TraceScreen_draw@@Base+0x64>)
    f1d6:	sub	sp, #12
    f1d8:	ldr	r2, [pc, #92]	; (f238 <TraceScreen_draw@@Base+0x68>)
    f1da:	add	r6, pc
    f1dc:	ldr	r3, [pc, #92]	; (f23c <TraceScreen_draw@@Base+0x6c>)
    f1de:	ldr	r7, [r6, r2]
    f1e0:	ldr	r5, [r6, r3]
    f1e2:	ldr	r3, [r7, #0]
    f1e4:	ldr	r0, [r5, #0]
    f1e6:	ldr	r1, [r3, #20]
    f1e8:	blx	6c88 <wattrset@plt+0x4>
    f1ec:	movs	r2, #0
    f1ee:	ldr	r0, [r5, #0]
    f1f0:	mov	r1, r2
    f1f2:	blx	6668 <wmove@plt>
    f1f6:	adds	r0, #1
    f1f8:	beq.n	f208 <TraceScreen_draw@@Base+0x38>
    f1fa:	ldr	r3, [pc, #68]	; (f240 <TraceScreen_draw@@Base+0x70>)
    f1fc:	movs	r1, #32
    f1fe:	ldr	r0, [r5, #0]
    f200:	ldr	r3, [r6, r3]
    f202:	ldr	r2, [r3, #0]
    f204:	blx	6b9c <whline@plt>
    f208:	ldr	r6, [r4, #4]
    f20a:	movs	r1, #0
    f20c:	ldr	r2, [pc, #52]	; (f244 <TraceScreen_draw@@Base+0x74>)
    f20e:	mov	r0, r1
    f210:	ldr	r3, [r6, #16]
    f212:	add	r2, pc
    f214:	ldr	r6, [r6, #28]
    f216:	str	r6, [sp, #0]
    f218:	blx	6bd8 <mvprintw@plt>
    f21c:	ldr	r3, [r7, #0]
    f21e:	ldr	r0, [r5, #0]
    f220:	ldr	r1, [r3, #4]
    f222:	blx	6c88 <wattrset@plt+0x4>
    f226:	ldr	r0, [r4, #16]
    f228:	add	sp, #12
    f22a:	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    f22e:	b.w	105c0 <IncSet_drawBar@@Base>
    f232:	nop
    f234:	add	r3, sp, #200	; 0xc8
    f236:	movs	r1, r0
    f238:	lsls	r0, r6, #9
    f23a:	movs	r0, r0
    f23c:	lsls	r4, r5, #9
    f23e:	movs	r0, r0
    f240:	lsls	r0, r7, #10
    f242:	movs	r0, r0
    f244:	strh	r6, [r4, #8]
	...

0000f248 <TraceScreen_updateTrace@@Base>:
    f248:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    f24c:	mov	r5, r0
    f24e:	ldr	r0, [pc, #320]	; (f390 <TraceScreen_updateTrace@@Base+0x148>)
    f250:	subw	sp, sp, #1156	; 0x484
    f254:	ldr	r1, [pc, #316]	; (f394 <TraceScreen_updateTrace@@Base+0x14c>)
    f256:	add	r3, sp, #12
    f258:	add	r0, pc
    f25a:	add	r2, sp, #140	; 0x8c
    f25c:	movs	r4, #0
    f25e:	ldr	r1, [r0, r1]
    f260:	ldr	r1, [r1, #0]
    f262:	str.w	r1, [sp, #1148]	; 0x47c
    f266:	mov.w	r1, #0
    f26a:	str.w	r4, [r3, #4]!
    f26e:	cmp	r3, r2
    f270:	bne.n	f26a <TraceScreen_updateTrace@@Base+0x22>
    f272:	ldr	r0, [r5, #44]	; 0x2c
    f274:	add.w	r9, sp, #16
    f278:	blx	6818 <__fdelt_chk@plt>
    f27c:	ldr	r2, [r5, #44]	; 0x2c
    f27e:	mov.w	r8, #1
    f282:	add	r6, sp, #8
    f284:	negs	r1, r2
    f286:	and.w	r3, r2, #31
    f28a:	and.w	r1, r1, #31
    f28e:	str	r4, [sp, #8]
    f290:	it	pl
    f292:	negpl	r3, r1
    f294:	mov	r1, r9
    f296:	ldr.w	r7, [r9, r0, lsl #2]
    f29a:	mov	ip, r0
    f29c:	add.w	r0, r2, r8
    f2a0:	lsl.w	r2, r8, r3
    f2a4:	movs	r3, #0
    f2a6:	orrs	r2, r7
    f2a8:	str	r6, [sp, #0]
    f2aa:	str.w	r2, [r9, ip, lsl #2]
    f2ae:	mov.w	r2, #500	; 0x1f4
    f2b2:	str	r2, [sp, #12]
    f2b4:	mov	r2, r3
    f2b6:	blx	67b8 <select@plt>
    f2ba:	cmp	r0, #0
    f2bc:	ble.n	f2e0 <TraceScreen_updateTrace@@Base+0x98>
    f2be:	ldr	r0, [r5, #44]	; 0x2c
    f2c0:	blx	6818 <__fdelt_chk@plt>
    f2c4:	ldr	r3, [r5, #44]	; 0x2c
    f2c6:	negs	r2, r3
    f2c8:	and.w	r3, r3, #31
    f2cc:	and.w	r2, r2, #31
    f2d0:	it	pl
    f2d2:	negpl	r3, r2
    f2d4:	lsl.w	r3, r8, r3
    f2d8:	ldr.w	r1, [r9, r0, lsl #2]
    f2dc:	tst	r3, r1
    f2de:	bne.n	f2fa <TraceScreen_updateTrace@@Base+0xb2>
    f2e0:	ldr	r2, [pc, #180]	; (f398 <TraceScreen_updateTrace@@Base+0x150>)
    f2e2:	ldr	r3, [pc, #176]	; (f394 <TraceScreen_updateTrace@@Base+0x14c>)
    f2e4:	add	r2, pc
    f2e6:	ldr	r3, [r2, r3]
    f2e8:	ldr	r2, [r3, #0]
    f2ea:	ldr.w	r3, [sp, #1148]	; 0x47c
    f2ee:	eors	r2, r3
    f2f0:	bne.n	f38c <TraceScreen_updateTrace@@Base+0x144>
    f2f2:	addw	sp, sp, #1156	; 0x484
    f2f6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    f2fa:	add	r7, sp, #144	; 0x90
    f2fc:	ldr	r3, [r5, #40]	; 0x28
    f2fe:	mov.w	r2, #1000	; 0x3e8
    f302:	mov	r1, r8
    f304:	mov	r0, r7
    f306:	blx	68b4 <fread@plt>
    f30a:	mov	r6, r0
    f30c:	cmp	r0, #0
    f30e:	beq.n	f2e0 <TraceScreen_updateTrace@@Base+0x98>
    f310:	ldrb	r3, [r5, #24]
    f312:	cmp	r3, #0
    f314:	beq.n	f2e0 <TraceScreen_updateTrace@@Base+0x98>
    f316:	cmp	r0, #0
    f318:	strb	r4, [r7, r0]
    f31a:	ble.n	f356 <TraceScreen_updateTrace@@Base+0x10e>
    f31c:	add.w	r8, r7, r0
    f320:	mov	r4, r7
    f322:	mov	r1, r7
    f324:	mov.w	r9, #0
    f328:	b.n	f32e <TraceScreen_updateTrace@@Base+0xe6>
    f32a:	cmp	r8, r4
    f32c:	beq.n	f358 <TraceScreen_updateTrace@@Base+0x110>
    f32e:	ldrb.w	r3, [r4], #1
    f332:	cmp	r3, #10
    f334:	bne.n	f32a <TraceScreen_updateTrace@@Base+0xe2>
    f336:	ldrb.w	r3, [r5, #48]	; 0x30
    f33a:	mov	r0, r5
    f33c:	strb.w	r9, [r4, #-1]
    f340:	cbz	r3, f34e <TraceScreen_updateTrace@@Base+0x106>
    f342:	bl	11b08 <InfoScreen_appendLine@@Base>
    f346:	mov	r1, r4
    f348:	strb.w	r9, [r5, #48]	; 0x30
    f34c:	b.n	f32a <TraceScreen_updateTrace@@Base+0xe2>
    f34e:	bl	11ac0 <InfoScreen_addLine@@Base>
    f352:	mov	r1, r4
    f354:	b.n	f32a <TraceScreen_updateTrace@@Base+0xe2>
    f356:	mov	r1, r7
    f358:	adds	r3, r7, r6
    f35a:	cmp	r1, r3
    f35c:	bcc.n	f37a <TraceScreen_updateTrace@@Base+0x132>
    f35e:	ldrb.w	r3, [r5, #49]	; 0x31
    f362:	cmp	r3, #0
    f364:	beq.n	f2e0 <TraceScreen_updateTrace@@Base+0x98>
    f366:	ldr	r4, [r5, #8]
    f368:	mov	r0, r4
    f36a:	bl	b348 <Panel_size@@Base>
    f36e:	mov	r1, r0
    f370:	mov	r0, r4
    f372:	subs	r1, #1
    f374:	bl	b350 <Panel_setSelected@@Base>
    f378:	b.n	f2e0 <TraceScreen_updateTrace@@Base+0x98>
    f37a:	mov	r0, r5
    f37c:	bl	11ac0 <InfoScreen_addLine@@Base>
    f380:	movs	r2, #0
    f382:	movs	r3, #1
    f384:	strb	r2, [r7, r6]
    f386:	strb.w	r3, [r5, #48]	; 0x30
    f38a:	b.n	f35e <TraceScreen_updateTrace@@Base+0x116>
    f38c:	blx	67d0 <__stack_chk_fail@plt>
    f390:	add	r2, sp, #720	; 0x2d0
    f392:	movs	r1, r0
    f394:	lsls	r0, r0, #9
    f396:	movs	r0, r0
    f398:	add	r2, sp, #160	; 0xa0
    f39a:	movs	r1, r0

0000f39c <TraceScreen_onKey@@Base>:
    f39c:	cmp.w	r1, #272	; 0x110
    f3a0:	push	{r3, r4, r5, lr}
    f3a2:	mov	r4, r0
    f3a4:	beq.n	f3ea <TraceScreen_onKey@@Base+0x4e>
    f3a6:	bgt.n	f3d8 <TraceScreen_onKey@@Base+0x3c>
    f3a8:	cmp	r1, #102	; 0x66
    f3aa:	beq.n	f3ea <TraceScreen_onKey@@Base+0x4e>
    f3ac:	cmp	r1, #116	; 0x74
    f3ae:	bne.n	f3e0 <TraceScreen_onKey@@Base+0x44>
    f3b0:	ldrb	r3, [r4, #24]
    f3b2:	ldr	r2, [r4, #8]
    f3b4:	eor.w	r3, r3, #1
    f3b8:	strb	r3, [r4, #24]
    f3ba:	ldr	r0, [r2, #56]	; 0x38
    f3bc:	cbnz	r3, f3fe <TraceScreen_onKey@@Base+0x62>
    f3be:	ldr	r2, [pc, #92]	; (f41c <TraceScreen_onKey@@Base+0x80>)
    f3c0:	add	r2, pc
    f3c2:	movw	r1, #273	; 0x111
    f3c6:	movs	r5, #1
    f3c8:	bl	9284 <FunctionBar_setLabel@@Base>
    f3cc:	ldr	r3, [r4, #0]
    f3ce:	mov	r0, r4
    f3d0:	ldr	r3, [r3, #20]
    f3d2:	blx	r3
    f3d4:	mov	r0, r5
    f3d6:	pop	{r3, r4, r5, pc}
    f3d8:	movw	r3, #273	; 0x111
    f3dc:	cmp	r1, r3
    f3de:	beq.n	f3b0 <TraceScreen_onKey@@Base+0x14>
    f3e0:	movs	r5, #0
    f3e2:	strb.w	r5, [r4, #49]	; 0x31
    f3e6:	mov	r0, r5
    f3e8:	pop	{r3, r4, r5, pc}
    f3ea:	ldrb.w	r5, [r4, #49]	; 0x31
    f3ee:	eor.w	r5, r5, #1
    f3f2:	strb.w	r5, [r4, #49]	; 0x31
    f3f6:	cbnz	r5, f404 <TraceScreen_onKey@@Base+0x68>
    f3f8:	movs	r5, #1
    f3fa:	mov	r0, r5
    f3fc:	pop	{r3, r4, r5, pc}
    f3fe:	ldr	r2, [pc, #32]	; (f420 <TraceScreen_onKey@@Base+0x84>)
    f400:	add	r2, pc
    f402:	b.n	f3c2 <TraceScreen_onKey@@Base+0x26>
    f404:	ldr	r4, [r4, #8]
    f406:	mov	r0, r4
    f408:	bl	b348 <Panel_size@@Base>
    f40c:	mov	r1, r0
    f40e:	mov	r0, r4
    f410:	subs	r1, #1
    f412:	bl	b350 <Panel_setSelected@@Base>
    f416:	mov	r0, r5
    f418:	pop	{r3, r4, r5, pc}
    f41a:	nop
    f41c:	ldrb	r4, [r4, #30]
    f41e:	movs	r0, r0
    f420:	ldrb	r4, [r2, #29]
	...

0000f424 <TraceScreen_new@@Base>:
    f424:	push	{r4, r5, r6, r7, lr}
    f426:	mov	r7, r0
    f428:	sub	sp, #20
    f42a:	movs	r0, #52	; 0x34
    f42c:	bl	11d84 <xMalloc@@Base>
    f430:	ldr	r1, [pc, #68]	; (f478 <TraceScreen_new@@Base+0x54>)
    f432:	movs	r2, #1
    f434:	ldr	r3, [pc, #68]	; (f47c <TraceScreen_new@@Base+0x58>)
    f436:	add	r1, pc
    f438:	ldr	r5, [pc, #68]	; (f480 <TraceScreen_new@@Base+0x5c>)
    f43a:	add	r3, pc
    f43c:	ldr	r6, [pc, #68]	; (f484 <TraceScreen_new@@Base+0x60>)
    f43e:	add	r5, pc
    f440:	strb	r2, [r0, #24]
    f442:	mov	r4, r0
    f444:	ldr	r2, [pc, #64]	; (f488 <TraceScreen_new@@Base+0x64>)
    f446:	str	r3, [r0, #0]
    f448:	movs	r3, #0
    f44a:	add	r2, pc
    f44c:	strh	r3, [r0, #48]	; 0x30
    f44e:	add.w	r0, r1, #20
    f452:	bl	90fc <FunctionBar_new@@Base>
    f456:	str	r0, [sp, #12]
    f458:	bl	863c <CRT_disableDelay@@Base>
    f45c:	mov	r3, r5
    f45e:	ldr	r5, [r5, r6]
    f460:	mov	r0, r4
    f462:	ldr	r4, [pc, #40]	; (f48c <TraceScreen_new@@Base+0x68>)
    f464:	ldr	r2, [sp, #12]
    f466:	mov	r1, r7
    f468:	add	r4, pc
    f46a:	str	r4, [sp, #0]
    f46c:	ldr	r3, [r5, #0]
    f46e:	subs	r3, #2
    f470:	bl	11960 <InfoScreen_init@@Base>
    f474:	add	sp, #20
    f476:	pop	{r4, r5, r6, r7, pc}
    f478:	add	r4, pc, #936	; (adr r4, f824 <Vector_insert@@Base+0x14>)
    f47a:	movs	r1, r0
    f47c:	cbnz	r6, f4b6 <TraceScreen_forkTracer@@Base+0x26>
    f47e:	movs	r1, r0
    f480:	add	r0, sp, #824	; 0x338
    f482:	movs	r1, r0
    f484:	lsls	r0, r2, #11
    f486:	movs	r0, r0
    f488:	cbnz	r2, f4ba <TraceScreen_forkTracer@@Base+0x2a>
    f48a:	movs	r1, r0
    f48c:	strb	r0, [r7, #12]
	...

0000f490 <TraceScreen_forkTracer@@Base>:
    f490:	ldr	r2, [pc, #212]	; (f568 <TraceScreen_forkTracer@@Base+0xd8>)
    f492:	ldr	r3, [pc, #216]	; (f56c <TraceScreen_forkTracer@@Base+0xdc>)
    f494:	add	r2, pc
    f496:	push	{r4, r5, r6, r7, lr}
    f498:	mov	r4, r0
    f49a:	ldr	r3, [r2, r3]
    f49c:	subw	sp, sp, #1028	; 0x404
    f4a0:	adds	r0, #28
    f4a2:	ldr	r3, [r3, #0]
    f4a4:	str	r3, [sp, #1020]	; 0x3fc
    f4a6:	mov.w	r3, #0
    f4aa:	blx	6b3c <pipe@plt>
    f4ae:	adds	r0, #1
    f4b0:	beq.n	f534 <TraceScreen_forkTracer@@Base+0xa4>
    f4b2:	blx	6b54 <fork@plt>
    f4b6:	adds	r3, r0, #1
    f4b8:	mov	r5, r0
    f4ba:	str	r0, [r4, #36]	; 0x24
    f4bc:	beq.n	f534 <TraceScreen_forkTracer@@Base+0xa4>
    f4be:	cmp	r0, #0
    f4c0:	bne.n	f524 <TraceScreen_forkTracer@@Base+0x94>
    f4c2:	movs	r1, #2
    f4c4:	ldr	r0, [r4, #32]
    f4c6:	blx	67f4 <dup2@plt>
    f4ca:	ldr	r0, [r4, #32]
    f4cc:	mov.w	r2, #2048	; 0x800
    f4d0:	movs	r1, #4
    f4d2:	blx	6a84 <fcntl@plt>
    f4d6:	adds	r0, #1
    f4d8:	beq.n	f512 <TraceScreen_forkTracer@@Base+0x82>
    f4da:	ldr	r7, [r4, #4]
    f4dc:	add	r6, sp, #16
    f4de:	ldr	r2, [pc, #144]	; (f570 <TraceScreen_forkTracer@@Base+0xe0>)
    f4e0:	movw	r3, #1001	; 0x3e9
    f4e4:	mov	r1, r3
    f4e6:	mov	r0, r6
    f4e8:	ldr	r7, [r7, #16]
    f4ea:	add	r2, pc
    f4ec:	str	r2, [sp, #0]
    f4ee:	movs	r2, #1
    f4f0:	str	r7, [sp, #4]
    f4f2:	blx	6c78 <__snprintf_chk@plt>
    f4f6:	ldr	r1, [pc, #124]	; (f574 <TraceScreen_forkTracer@@Base+0xe4>)
    f4f8:	ldr	r3, [pc, #124]	; (f578 <TraceScreen_forkTracer@@Base+0xe8>)
    f4fa:	ldr	r2, [pc, #128]	; (f57c <TraceScreen_forkTracer@@Base+0xec>)
    f4fc:	add	r1, pc
    f4fe:	add	r3, pc
    f500:	str	r3, [sp, #0]
    f502:	ldr	r3, [pc, #124]	; (f580 <TraceScreen_forkTracer@@Base+0xf0>)
    f504:	add	r2, pc
    f506:	mov	r0, r1
    f508:	strd	r6, r5, [sp, #4]
    f50c:	add	r3, pc
    f50e:	blx	6794 <execlp@plt>
    f512:	ldr	r1, [pc, #112]	; (f584 <TraceScreen_forkTracer@@Base+0xf4>)
    f514:	movs	r2, #75	; 0x4b
    f516:	ldr	r0, [r4, #32]
    f518:	add	r1, pc
    f51a:	blx	6ad8 <write@plt>
    f51e:	movs	r0, #1
    f520:	blx	69dc <exit@plt>
    f524:	ldr	r0, [r4, #28]
    f526:	mov.w	r2, #2048	; 0x800
    f52a:	movs	r1, #4
    f52c:	blx	6a84 <fcntl@plt>
    f530:	adds	r0, #1
    f532:	bne.n	f54c <TraceScreen_forkTracer@@Base+0xbc>
    f534:	movs	r0, #0
    f536:	ldr	r2, [pc, #80]	; (f588 <TraceScreen_forkTracer@@Base+0xf8>)
    f538:	ldr	r3, [pc, #48]	; (f56c <TraceScreen_forkTracer@@Base+0xdc>)
    f53a:	add	r2, pc
    f53c:	ldr	r3, [r2, r3]
    f53e:	ldr	r2, [r3, #0]
    f540:	ldr	r3, [sp, #1020]	; 0x3fc
    f542:	eors	r2, r3
    f544:	bne.n	f564 <TraceScreen_forkTracer@@Base+0xd4>
    f546:	addw	sp, sp, #1028	; 0x404
    f54a:	pop	{r4, r5, r6, r7, pc}
    f54c:	ldr	r1, [pc, #60]	; (f58c <TraceScreen_forkTracer@@Base+0xfc>)
    f54e:	ldr	r0, [r4, #28]
    f550:	add	r1, pc
    f552:	blx	6628 <fdopen@plt>
    f556:	str	r0, [r4, #40]	; 0x28
    f558:	blx	6ae4 <fileno@plt>
    f55c:	mov	r3, r0
    f55e:	movs	r0, #1
    f560:	str	r3, [r4, #44]	; 0x2c
    f562:	b.n	f536 <TraceScreen_forkTracer@@Base+0xa6>
    f564:	blx	67d0 <__stack_chk_fail@plt>
    f568:	add	r0, sp, #480	; 0x1e0
    f56a:	movs	r1, r0
    f56c:	lsls	r0, r0, #9
    f56e:	movs	r0, r0
    f570:	ldrb	r6, [r7, #22]
    f572:	movs	r0, r0
    f574:	strh	r0, [r0, #40]	; 0x28
    f576:	movs	r0, r0
    f578:	ldrb	r6, [r7, #25]
    f57a:	movs	r0, r0
    f57c:	ldrb	r4, [r6, #25]
    f57e:	movs	r0, r0
    f580:	ldrb	r0, [r5, #25]
    f582:	movs	r0, r0
    f584:	ldrb	r0, [r5, #25]
    f586:	movs	r0, r0
    f588:	add	r7, pc, #840	; (adr r7, f8d4 <Vector_moveDown@@Base+0x8>)
    f58a:	movs	r1, r0
    f58c:	strh	r4, [r3, #52]	; 0x34
	...

0000f590 <UsersTable_new@@Base>:
    f590:	push	{r4, lr}
    f592:	movs	r0, #4
    f594:	bl	11d84 <xMalloc@@Base>
    f598:	movs	r1, #1
    f59a:	mov	r4, r0
    f59c:	movs	r0, #20
    f59e:	bl	9498 <Hashtable_new@@Base>
    f5a2:	mov	r3, r0
    f5a4:	mov	r0, r4
    f5a6:	str	r3, [r4, #0]
    f5a8:	pop	{r4, pc}
    f5aa:	nop

0000f5ac <UsersTable_delete@@Base>:
    f5ac:	push	{r4, lr}
    f5ae:	mov	r4, r0
    f5b0:	ldr	r0, [r0, #0]
    f5b2:	bl	94c0 <Hashtable_delete@@Base>
    f5b6:	mov	r0, r4
    f5b8:	ldmia.w	sp!, {r4, lr}
    f5bc:	b.w	6754 <free@plt>

0000f5c0 <UsersTable_getRef@@Base>:
    f5c0:	push	{r4, r5, r6, lr}
    f5c2:	mov	r5, r0
    f5c4:	ldr	r0, [r0, #0]
    f5c6:	mov	r6, r1
    f5c8:	bl	95bc <Hashtable_get@@Base>
    f5cc:	mov	r4, r0
    f5ce:	cbz	r0, f5d4 <UsersTable_getRef@@Base+0x14>
    f5d0:	mov	r0, r4
    f5d2:	pop	{r4, r5, r6, pc}
    f5d4:	mov	r0, r6
    f5d6:	blx	66d8 <getpwuid@plt>
    f5da:	mov	r4, r0
    f5dc:	cmp	r0, #0
    f5de:	beq.n	f5d0 <UsersTable_getRef@@Base+0x10>
    f5e0:	ldr	r0, [r0, #0]
    f5e2:	bl	11de4 <xStrdup@@Base>
    f5e6:	mov	r1, r6
    f5e8:	mov	r4, r0
    f5ea:	ldr	r0, [r5, #0]
    f5ec:	mov	r2, r4
    f5ee:	bl	9514 <Hashtable_put@@Base>
    f5f2:	mov	r0, r4
    f5f4:	pop	{r4, r5, r6, pc}
    f5f6:	nop

0000f5f8 <UsersTable_foreach@@Base>:
    f5f8:	ldr	r0, [r0, #0]
    f5fa:	b.w	95e4 <Hashtable_foreach@@Base>
    f5fe:	nop
    f600:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f604:	cmp	r1, r2
    f606:	sub	sp, #12
    f608:	str	r3, [sp, #0]
    f60a:	bge.n	f6b2 <UsersTable_foreach@@Base+0xba>
    f60c:	ldr.w	sl, [pc, #168]	; f6b8 <UsersTable_foreach@@Base+0xc0>
    f610:	add.w	r9, r0, r2, lsl #2
    f614:	mov	r4, r0
    f616:	mov	r6, r1
    f618:	add	sl, pc
    f61a:	mov	r8, r2
    f61c:	add.w	r0, r8, r6
    f620:	ldr.w	r3, [r9]
    f624:	add.w	r7, r4, r6, lsl #2
    f628:	mov	r5, r6
    f62a:	add.w	r0, r0, r0, lsr #31
    f62e:	mov	fp, r6
    f630:	str	r6, [sp, #4]
    f632:	asrs	r0, r0, #1
    f634:	ldr.w	r1, [r4, r0, lsl #2]
    f638:	str.w	r3, [r4, r0, lsl #2]
    f63c:	mov	r6, r1
    f63e:	str.w	r1, [r9]
    f642:	ldr.w	r3, [sl]
    f646:	mov	r1, r6
    f648:	ldr.w	r0, [r7], #4
    f64c:	add.w	fp, fp, #1
    f650:	adds	r3, #1
    f652:	str.w	r3, [sl]
    f656:	ldr	r3, [sp, #0]
    f658:	blx	r3
    f65a:	mov.w	ip, r5, lsl #2
    f65e:	add.w	r3, ip, #4
    f662:	add.w	lr, r5, #2
    f666:	add	ip, r4
    f668:	adds	r2, r5, #1
    f66a:	cmp	r0, #0
    f66c:	bgt.n	f686 <UsersTable_foreach@@Base+0x8e>
    f66e:	ldr.w	r0, [r7, #-4]
    f672:	add.w	ip, r4, r3
    f676:	ldr.w	r3, [r4, r5, lsl #2]
    f67a:	str.w	r3, [r7, #-4]
    f67e:	str.w	r0, [r4, r5, lsl #2]
    f682:	mov	r5, r2
    f684:	mov	r2, lr
    f686:	cmp	r8, fp
    f688:	bgt.n	f642 <UsersTable_foreach@@Base+0x4a>
    f68a:	ldr.w	r7, [ip]
    f68e:	mov	fp, r2
    f690:	ldr	r6, [sp, #4]
    f692:	subs	r2, r5, #1
    f694:	ldr.w	r5, [r9]
    f698:	mov	r0, r4
    f69a:	ldr	r3, [sp, #0]
    f69c:	mov	r1, r6
    f69e:	str.w	r5, [ip]
    f6a2:	str.w	r7, [r9]
    f6a6:	bl	f600 <UsersTable_foreach@@Base+0x8>
    f6aa:	cmp	r8, fp
    f6ac:	ble.n	f6b2 <UsersTable_foreach@@Base+0xba>
    f6ae:	mov	r6, fp
    f6b0:	b.n	f61c <UsersTable_foreach@@Base+0x24>
    f6b2:	add	sp, #12
    f6b4:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f6b8:	stmia	r3!, {r4, r5}
    f6ba:	movs	r1, r0
    f6bc:	ldr	r1, [r0, #16]
    f6be:	ldr	r3, [r0, #8]
    f6c0:	cmp	r1, r3
    f6c2:	bge.n	f6c6 <UsersTable_foreach@@Base+0xce>
    f6c4:	bx	lr
    f6c6:	ldr	r3, [r0, #12]
    f6c8:	push	{r4, lr}
    f6ca:	add	r1, r3
    f6cc:	mov	r4, r0
    f6ce:	ldr	r0, [r0, #0]
    f6d0:	str	r1, [r4, #8]
    f6d2:	lsls	r1, r1, #2
    f6d4:	bl	11dc8 <xRealloc@@Base>
    f6d8:	str	r0, [r4, #0]
    f6da:	pop	{r4, pc}

0000f6dc <Vector_new@@Base>:
    f6dc:	adds	r3, r2, #1
    f6de:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f6e2:	ite	ne
    f6e4:	movne	r5, r2
    f6e6:	moveq.w	r8, #10
    f6ea:	mov	r7, r0
    f6ec:	mov.w	r0, #24
    f6f0:	it	eq
    f6f2:	moveq	r5, r8
    f6f4:	mov	r6, r1
    f6f6:	it	ne
    f6f8:	movne	r8, r5
    f6fa:	bl	11d84 <xMalloc@@Base>
    f6fe:	movs	r1, #4
    f700:	mov	r4, r0
    f702:	mov	r0, r8
    f704:	str	r5, [r4, #12]
    f706:	bl	11da0 <xCalloc@@Base>
    f70a:	movs	r3, #0
    f70c:	str	r5, [r4, #8]
    f70e:	str	r7, [r4, #4]
    f710:	strb	r6, [r4, #20]
    f712:	str	r3, [r4, #16]
    f714:	mov	r2, r0
    f716:	mov	r0, r4
    f718:	str	r2, [r4, #0]
    f71a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f71e:	nop

0000f720 <Vector_delete@@Base>:
    f720:	push	{r3, r4, r5, lr}
    f722:	mov	r5, r0
    f724:	ldrb	r3, [r0, #20]
    f726:	ldr	r2, [r0, #0]
    f728:	cbz	r3, f74a <Vector_delete@@Base+0x2a>
    f72a:	ldr	r1, [r0, #16]
    f72c:	cmp	r1, #0
    f72e:	ble.n	f74a <Vector_delete@@Base+0x2a>
    f730:	movs	r4, #0
    f732:	ldr.w	r3, [r2, r4, lsl #2]
    f736:	adds	r4, #1
    f738:	mov	r0, r3
    f73a:	cbz	r3, f746 <Vector_delete@@Base+0x26>
    f73c:	ldr	r3, [r3, #0]
    f73e:	ldr	r3, [r3, #8]
    f740:	blx	r3
    f742:	ldr	r2, [r5, #0]
    f744:	ldr	r1, [r5, #16]
    f746:	cmp	r1, r4
    f748:	bgt.n	f732 <Vector_delete@@Base+0x12>
    f74a:	mov	r0, r2
    f74c:	blx	6758 <free@plt+0x4>
    f750:	mov	r0, r5
    f752:	ldmia.w	sp!, {r3, r4, r5, lr}
    f756:	b.w	6754 <free@plt>
    f75a:	nop

0000f75c <Vector_prune@@Base>:
    f75c:	push	{r3, r4, r5, lr}
    f75e:	mov	r5, r0
    f760:	ldrb	r3, [r0, #20]
    f762:	cbz	r3, f784 <Vector_prune@@Base+0x28>
    f764:	ldr	r2, [r0, #16]
    f766:	cmp	r2, #0
    f768:	ble.n	f784 <Vector_prune@@Base+0x28>
    f76a:	movs	r4, #0
    f76c:	ldr	r3, [r5, #0]
    f76e:	ldr.w	r3, [r3, r4, lsl #2]
    f772:	adds	r4, #1
    f774:	mov	r0, r3
    f776:	cbz	r3, f780 <Vector_prune@@Base+0x24>
    f778:	ldr	r3, [r3, #0]
    f77a:	ldr	r3, [r3, #8]
    f77c:	blx	r3
    f77e:	ldr	r2, [r5, #16]
    f780:	cmp	r2, r4
    f782:	bgt.n	f76c <Vector_prune@@Base+0x10>
    f784:	movs	r3, #0
    f786:	str	r3, [r5, #16]
    f788:	pop	{r3, r4, r5, pc}
    f78a:	nop

0000f78c <Vector_quickSort@@Base>:
    f78c:	ldr	r3, [r0, #4]
    f78e:	movs	r1, #0
    f790:	ldr	r2, [r0, #16]
    f792:	ldr	r0, [r0, #0]
    f794:	ldr	r3, [r3, #12]
    f796:	subs	r2, #1
    f798:	b.n	f600 <UsersTable_foreach@@Base+0x8>
    f79a:	nop

0000f79c <Vector_insertionSort@@Base>:
    f79c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f7a0:	ldr.w	r8, [r0, #16]
    f7a4:	ldr	r3, [r0, #4]
    f7a6:	cmp.w	r8, #1
    f7aa:	ldr	r6, [r0, #0]
    f7ac:	ldr.w	sl, [r3, #12]
    f7b0:	ble.n	f7f8 <Vector_insertionSort@@Base+0x5c>
    f7b2:	ldr.w	r9, [pc, #88]	; f80c <Vector_insertionSort@@Base+0x70>
    f7b6:	movs	r4, #1
    f7b8:	add	r9, pc
    f7ba:	ldr.w	fp, [r6, r4, lsl #2]
    f7be:	subs	r7, r4, #1
    f7c0:	add.w	r5, r6, r4, lsl #2
    f7c4:	b.n	f7d4 <Vector_insertionSort@@Base+0x38>
    f7c6:	ldr.w	r2, [r5, #-4]
    f7ca:	adds	r3, r7, #1
    f7cc:	sub.w	r5, r5, #4
    f7d0:	str	r2, [r5, #4]
    f7d2:	beq.n	f7fc <Vector_insertionSort@@Base+0x60>
    f7d4:	ldr.w	r3, [r9]
    f7d8:	mov	r1, fp
    f7da:	ldr.w	r0, [r5, #-4]
    f7de:	subs	r7, #1
    f7e0:	adds	r3, #1
    f7e2:	str.w	r3, [r9]
    f7e6:	blx	sl
    f7e8:	mov	r3, r5
    f7ea:	cmp	r0, #0
    f7ec:	bgt.n	f7c6 <Vector_insertionSort@@Base+0x2a>
    f7ee:	adds	r4, #1
    f7f0:	str.w	fp, [r3]
    f7f4:	cmp	r8, r4
    f7f6:	bne.n	f7ba <Vector_insertionSort@@Base+0x1e>
    f7f8:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f7fc:	adds	r4, #1
    f7fe:	mov	r3, r6
    f800:	cmp	r8, r4
    f802:	str.w	fp, [r3]
    f806:	bne.n	f7ba <Vector_insertionSort@@Base+0x1e>
    f808:	b.n	f7f8 <Vector_insertionSort@@Base+0x5c>
    f80a:	nop
    f80c:	stmia	r1!, {r4, r7}
    f80e:	movs	r1, r0

0000f810 <Vector_insert@@Base>:
    f810:	push	{r3, r4, r5, r6, r7, lr}
    f812:	mov	r6, r0
    f814:	ldr	r7, [r0, #16]
    f816:	mov	r4, r2
    f818:	cmp	r7, r1
    f81a:	it	ge
    f81c:	movge	r7, r1
    f81e:	bl	f6bc <UsersTable_foreach@@Base+0xc4>
    f822:	ldr	r0, [r6, #16]
    f824:	ldr	r2, [r6, #0]
    f826:	cmp	r7, r0
    f828:	bge.n	f83e <Vector_insert@@Base+0x2e>
    f82a:	add.w	r3, r2, r0, lsl #2
    f82e:	add.w	r5, r2, r7, lsl #2
    f832:	ldr.w	r1, [r3, #-4]
    f836:	str.w	r1, [r3], #-4
    f83a:	cmp	r5, r3
    f83c:	bne.n	f832 <Vector_insert@@Base+0x22>
    f83e:	adds	r0, #1
    f840:	str.w	r4, [r2, r7, lsl #2]
    f844:	str	r0, [r6, #16]
    f846:	pop	{r3, r4, r5, r6, r7, pc}

0000f848 <Vector_take@@Base>:
    f848:	push	{r4, r5, r6}
    f84a:	mov	r4, r0
    f84c:	ldr	r6, [r0, #16]
    f84e:	ldr	r2, [r0, #0]
    f850:	subs	r5, r6, #1
    f852:	cmp	r5, r1
    f854:	add.w	r3, r2, r1, lsl #2
    f858:	ldr.w	r0, [r2, r1, lsl #2]
    f85c:	str	r5, [r4, #16]
    f85e:	ble.n	f870 <Vector_take@@Base+0x28>
    f860:	subs	r2, #4
    f862:	add.w	r1, r2, r6, lsl #2
    f866:	ldr	r2, [r3, #4]
    f868:	str.w	r2, [r3], #4
    f86c:	cmp	r3, r1
    f86e:	bne.n	f866 <Vector_take@@Base+0x1e>
    f870:	pop	{r4, r5, r6}
    f872:	bx	lr

0000f874 <Vector_remove@@Base>:
    f874:	push	{r4, r5, r6, lr}
    f876:	mov	r4, r0
    f878:	ldr	r6, [r0, #16]
    f87a:	ldr	r2, [r0, #0]
    f87c:	subs	r5, r6, #1
    f87e:	cmp	r1, r5
    f880:	add.w	r3, r2, r1, lsl #2
    f884:	ldr.w	r0, [r2, r1, lsl #2]
    f888:	str	r5, [r4, #16]
    f88a:	bge.n	f89c <Vector_remove@@Base+0x28>
    f88c:	subs	r2, #4
    f88e:	add.w	r1, r2, r6, lsl #2
    f892:	ldr	r2, [r3, #4]
    f894:	str.w	r2, [r3], #4
    f898:	cmp	r3, r1
    f89a:	bne.n	f892 <Vector_remove@@Base+0x1e>
    f89c:	ldrb	r3, [r4, #20]
    f89e:	cbnz	r3, f8a2 <Vector_remove@@Base+0x2e>
    f8a0:	pop	{r4, r5, r6, pc}
    f8a2:	ldr	r3, [r0, #0]
    f8a4:	ldr	r3, [r3, #8]
    f8a6:	blx	r3
    f8a8:	movs	r0, #0
    f8aa:	pop	{r4, r5, r6, pc}

0000f8ac <Vector_moveUp@@Base>:
    f8ac:	cbz	r1, f8c8 <Vector_moveUp@@Base+0x1c>
    f8ae:	ldr	r2, [r0, #0]
    f8b0:	lsls	r3, r1, #2
    f8b2:	subs	r3, #4
    f8b4:	push	{r4}
    f8b6:	ldr.w	r0, [r2, r1, lsl #2]
    f8ba:	ldr	r4, [r2, r3]
    f8bc:	str.w	r4, [r2, r1, lsl #2]
    f8c0:	ldr.w	r4, [sp], #4
    f8c4:	str	r0, [r2, r3]
    f8c6:	bx	lr
    f8c8:	bx	lr
    f8ca:	nop

0000f8cc <Vector_moveDown@@Base>:
    f8cc:	ldr	r3, [r0, #16]
    f8ce:	subs	r3, #1
    f8d0:	cmp	r3, r1
    f8d2:	beq.n	f8ee <Vector_moveDown@@Base+0x22>
    f8d4:	ldr	r2, [r0, #0]
    f8d6:	lsls	r3, r1, #2
    f8d8:	adds	r3, #4
    f8da:	push	{r4}
    f8dc:	ldr.w	r0, [r2, r1, lsl #2]
    f8e0:	ldr	r4, [r2, r3]
    f8e2:	str.w	r4, [r2, r1, lsl #2]
    f8e6:	ldr.w	r4, [sp], #4
    f8ea:	str	r0, [r2, r3]
    f8ec:	bx	lr
    f8ee:	bx	lr

0000f8f0 <Vector_set@@Base>:
    f8f0:	push	{r3, r4, r5, r6, r7, lr}
    f8f2:	mov	r5, r0
    f8f4:	mov	r4, r1
    f8f6:	mov	r6, r2
    f8f8:	bl	f6bc <UsersTable_foreach@@Base+0xc4>
    f8fc:	ldr	r3, [r5, #16]
    f8fe:	lsls	r7, r4, #2
    f900:	cmp	r3, r4
    f902:	bgt.n	f910 <Vector_set@@Base+0x20>
    f904:	ldr	r3, [r5, #0]
    f906:	adds	r4, #1
    f908:	str	r4, [r5, #16]
    f90a:	add	r3, r7
    f90c:	str	r6, [r3, #0]
    f90e:	pop	{r3, r4, r5, r6, r7, pc}
    f910:	ldrb	r1, [r5, #20]
    f912:	ldr	r2, [r5, #0]
    f914:	adds	r3, r2, r7
    f916:	cmp	r1, #0
    f918:	beq.n	f90c <Vector_set@@Base+0x1c>
    f91a:	ldr.w	r0, [r2, r4, lsl #2]
    f91e:	ldr	r3, [r0, #0]
    f920:	ldr	r3, [r3, #8]
    f922:	blx	r3
    f924:	ldr	r3, [r5, #0]
    f926:	add	r3, r7
    f928:	str	r6, [r3, #0]
    f92a:	pop	{r3, r4, r5, r6, r7, pc}

0000f92c <Vector_add@@Base>:
    f92c:	mov	r2, r1
    f92e:	ldr	r1, [r0, #16]
    f930:	b.w	f8f0 <Vector_set@@Base>

0000f934 <Vector_indexOf@@Base>:
    f934:	push	{r3, r4, r5, r6, r7, lr}
    f936:	ldr	r3, [r0, #16]
    f938:	cmp	r3, #0
    f93a:	ble.n	f960 <Vector_indexOf@@Base+0x2c>
    f93c:	mov	r5, r0
    f93e:	mov	r6, r1
    f940:	mov	r7, r2
    f942:	movs	r4, #0
    f944:	b.n	f94e <Vector_indexOf@@Base+0x1a>
    f946:	ldr	r3, [r5, #16]
    f948:	adds	r4, #1
    f94a:	cmp	r3, r4
    f94c:	ble.n	f960 <Vector_indexOf@@Base+0x2c>
    f94e:	ldr	r3, [r5, #0]
    f950:	mov	r0, r6
    f952:	ldr.w	r1, [r3, r4, lsl #2]
    f956:	blx	r7
    f958:	cmp	r0, #0
    f95a:	bne.n	f946 <Vector_indexOf@@Base+0x12>
    f95c:	mov	r0, r4
    f95e:	pop	{r3, r4, r5, r6, r7, pc}
    f960:	mov.w	r4, #4294967295	; 0xffffffff
    f964:	mov	r0, r4
    f966:	pop	{r3, r4, r5, r6, r7, pc}
    f968:	push	{r4, lr}
    f96a:	mov	r4, r0
    f96c:	bl	b1e0 <Panel_done@@Base>
    f970:	mov	r0, r4
    f972:	ldmia.w	sp!, {r4, lr}
    f976:	b.w	6754 <free@plt>
    f97a:	nop
    f97c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f980:	mov	r4, r1
    f982:	ldr	r6, [pc, #128]	; (fa04 <Vector_indexOf@@Base+0xd0>)
    f984:	mov	r5, r0
    f986:	bl	b2f8 <Panel_getSelected@@Base>
    f98a:	movw	r3, #343	; 0x157
    f98e:	cmp	r4, r3
    f990:	add	r6, pc
    f992:	beq.n	f9c0 <Vector_indexOf@@Base+0x8c>
    f994:	bic.w	r3, r4, #256	; 0x100
    f998:	cmp	r3, #13
    f99a:	beq.n	f9c0 <Vector_indexOf@@Base+0x8c>
    f99c:	cmp	r4, #254	; 0xfe
    f99e:	bgt.n	f9ba <Vector_indexOf@@Base+0x86>
    f9a0:	blx	69d0 <__ctype_b_loc@plt>
    f9a4:	ldr	r3, [r0, #0]
    f9a6:	ldrh.w	r3, [r3, r4, lsl #1]
    f9aa:	lsls	r3, r3, #21
    f9ac:	bpl.n	f9ba <Vector_indexOf@@Base+0x86>
    f9ae:	mov	r1, r4
    f9b0:	mov	r0, r5
    f9b2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    f9b6:	b.w	b030 <Panel_selectByTyping@@Base>
    f9ba:	movs	r0, #2
    f9bc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f9c0:	movw	r4, #9900	; 0x26ac
    f9c4:	ldr.w	r8, [r0, #8]
    f9c8:	ldr	r0, [r5, r4]
    f9ca:	bl	b344 <Panel_getSelectedIndex@@Base>
    f9ce:	ldr	r3, [pc, #56]	; (fa08 <Vector_indexOf@@Base+0xd4>)
    f9d0:	mov.w	r2, r8, lsl #4
    f9d4:	mov	r1, r8
    f9d6:	ldr.w	r8, [r5, r4]
    f9da:	ldr	r3, [r6, r3]
    f9dc:	mov	r7, r0
    f9de:	ldr	r0, [r3, r2]
    f9e0:	bl	9b90 <ListItem_new@@Base>
    f9e4:	mov	r1, r7
    f9e6:	mov	r2, r0
    f9e8:	mov	r0, r8
    f9ea:	bl	b2a8 <Panel_insert@@Base>
    f9ee:	ldr	r0, [r5, r4]
    f9f0:	adds	r1, r7, #1
    f9f2:	bl	b350 <Panel_setSelected@@Base>
    f9f6:	ldr	r0, [r5, r4]
    f9f8:	bl	7c34 <ColumnsPanel_update@@Base>
    f9fc:	movs	r0, #1
    f9fe:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fa02:	nop
    fa04:	add	r3, pc, #496	; (adr r3, fbf8 <AffinityPanel_new@@Base+0x84>)
    fa06:	movs	r1, r0
    fa08:	lsls	r4, r1, #10
	...

0000fa0c <AvailableColumnsPanel_new@@Base>:
    fa0c:	ldr	r2, [pc, #228]	; (faf4 <AvailableColumnsPanel_new@@Base+0xe8>)
    fa0e:	ldr	r3, [pc, #232]	; (faf8 <AvailableColumnsPanel_new@@Base+0xec>)
    fa10:	add	r2, pc
    fa12:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    fa16:	mov	fp, r0
    fa18:	ldr	r3, [r2, r3]
    fa1a:	sub	sp, #280	; 0x118
    fa1c:	movw	r0, #9904	; 0x26b0
    fa20:	ldr	r5, [pc, #216]	; (fafc <AvailableColumnsPanel_new@@Base+0xf0>)
    fa22:	ldr	r3, [r3, #0]
    fa24:	str	r3, [sp, #276]	; 0x114
    fa26:	mov.w	r3, #0
    fa2a:	bl	11d84 <xMalloc@@Base>
    fa2e:	ldr	r3, [pc, #208]	; (fb00 <AvailableColumnsPanel_new@@Base+0xf4>)
    fa30:	movs	r2, #0
    fa32:	mov	r1, r2
    fa34:	add	r5, pc
    fa36:	add	r3, pc
    fa38:	movs	r4, #1
    fa3a:	mov	r8, r0
    fa3c:	ldr	r0, [pc, #196]	; (fb04 <AvailableColumnsPanel_new@@Base+0xf8>)
    fa3e:	str.w	r3, [r8]
    fa42:	add	r0, pc
    fa44:	bl	90fc <FunctionBar_new@@Base>
    fa48:	ldr	r1, [pc, #188]	; (fb08 <AvailableColumnsPanel_new@@Base+0xfc>)
    fa4a:	str	r4, [sp, #8]
    fa4c:	mov	r2, r4
    fa4e:	mov	r3, r0
    fa50:	str	r3, [sp, #12]
    fa52:	ldr	r6, [r5, r1]
    fa54:	mov	r3, r4
    fa56:	mov	r0, r8
    fa58:	mov	r1, r4
    fa5a:	str	r4, [sp, #0]
    fa5c:	str	r6, [sp, #4]
    fa5e:	bl	b130 <Panel_init@@Base>
    fa62:	ldr	r1, [pc, #168]	; (fb0c <AvailableColumnsPanel_new@@Base+0x100>)
    fa64:	mov	r0, r8
    fa66:	add	r1, pc
    fa68:	bl	b22c <Panel_setHeader@@Base>
    fa6c:	ldr	r3, [pc, #160]	; (fb10 <AvailableColumnsPanel_new@@Base+0x104>)
    fa6e:	ldr	r6, [r5, r3]
    fa70:	ldr	r3, [r6, #0]
    fa72:	cmp	r3, r4
    fa74:	ble.n	fabe <AvailableColumnsPanel_new@@Base+0xb2>
    fa76:	ldr	r3, [pc, #156]	; (fb14 <AvailableColumnsPanel_new@@Base+0x108>)
    fa78:	add.w	r9, sp, #20
    fa7c:	ldr	r7, [pc, #152]	; (fb18 <AvailableColumnsPanel_new@@Base+0x10c>)
    fa7e:	ldr	r5, [r5, r3]
    fa80:	add	r7, pc
    fa82:	cmp	r4, #2
    fa84:	beq.n	fab4 <AvailableColumnsPanel_new@@Base+0xa8>
    fa86:	ldr	r3, [r5, #24]
    fa88:	cbz	r3, fab4 <AvailableColumnsPanel_new@@Base+0xa8>
    fa8a:	str	r3, [sp, #8]
    fa8c:	mov.w	r3, #256	; 0x100
    fa90:	ldr	r2, [r5, #16]
    fa92:	mov	r1, r3
    fa94:	mov	r0, r9
    fa96:	str	r7, [sp, #0]
    fa98:	str	r2, [sp, #4]
    fa9a:	movs	r2, #1
    fa9c:	blx	6c78 <__snprintf_chk@plt>
    faa0:	cmp	r0, #255	; 0xff
    faa2:	bhi.n	fade <AvailableColumnsPanel_new@@Base+0xd2>
    faa4:	mov	r1, r4
    faa6:	mov	r0, r9
    faa8:	bl	9b90 <ListItem_new@@Base>
    faac:	mov	r1, r0
    faae:	mov	r0, r8
    fab0:	bl	b294 <Panel_add@@Base>
    fab4:	ldr	r3, [r6, #0]
    fab6:	adds	r4, #1
    fab8:	adds	r5, #16
    faba:	cmp	r3, r4
    fabc:	bgt.n	fa82 <AvailableColumnsPanel_new@@Base+0x76>
    fabe:	movw	r3, #9900	; 0x26ac
    fac2:	ldr	r2, [pc, #88]	; (fb1c <AvailableColumnsPanel_new@@Base+0x110>)
    fac4:	str.w	fp, [r8, r3]
    fac8:	ldr	r3, [pc, #44]	; (faf8 <AvailableColumnsPanel_new@@Base+0xec>)
    faca:	add	r2, pc
    facc:	ldr	r3, [r2, r3]
    face:	ldr	r2, [r3, #0]
    fad0:	ldr	r3, [sp, #276]	; 0x114
    fad2:	eors	r2, r3
    fad4:	bne.n	faf0 <AvailableColumnsPanel_new@@Base+0xe4>
    fad6:	mov	r0, r8
    fad8:	add	sp, #280	; 0x118
    fada:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
    fade:	movs	r0, #1
    fae0:	blx	6730 <curs_set@plt>
    fae4:	blx	6c48 <endwin@plt+0x4>
    fae8:	movs	r1, #0
    faea:	movs	r0, #1
    faec:	blx	683c <err@plt>
    faf0:	blx	67d0 <__stack_chk_fail@plt>
    faf4:	add	r2, pc, #1008	; (adr r2, fee8 <OpenFilesScreen_scan@@Base+0x60>)
    faf6:	movs	r1, r0
    faf8:	lsls	r0, r0, #9
    fafa:	movs	r0, r0
    fafc:	add	r2, pc, #864	; (adr r2, fe60 <OpenFilesScreen_draw@@Base+0x170>)
    fafe:	movs	r1, r0
    fb00:	push	{r1}
    fb02:	movs	r1, r0
    fb04:	ldr	r7, [sp, #40]	; 0x28
    fb06:	movs	r1, r0
    fb08:	lsls	r0, r1, #10
    fb0a:	movs	r0, r0
    fb0c:	ldrb	r2, [r0, #6]
    fb0e:	movs	r0, r0
    fb10:	lsls	r4, r6, #9
    fb12:	movs	r0, r0
    fb14:	lsls	r4, r1, #10
    fb16:	movs	r0, r0
    fb18:	ldrb	r4, [r7, #5]
    fb1a:	movs	r0, r0
    fb1c:	add	r2, pc, #264	; (adr r2, fc28 <AffinityPanel_new@@Base+0xb4>)
    fb1e:	movs	r1, r0
    fb20:	push	{r3, r4, r5, lr}
    fb22:	mov	r4, r1
    fb24:	bl	b2f8 <Panel_getSelected@@Base>
    fb28:	cmp.w	r4, #286	; 0x11e
    fb2c:	mov	r5, r0
    fb2e:	beq.n	fb58 <AvailableColumnsPanel_new@@Base+0x14c>
    fb30:	bgt.n	fb44 <AvailableColumnsPanel_new@@Base+0x138>
    fb32:	cmp	r4, #13
    fb34:	beq.n	fb6e <AvailableColumnsPanel_new@@Base+0x162>
    fb36:	cmp	r4, #32
    fb38:	beq.n	fb58 <AvailableColumnsPanel_new@@Base+0x14c>
    fb3a:	cmp	r4, #10
    fb3c:	ite	ne
    fb3e:	movne	r0, #2
    fb40:	moveq	r0, #4
    fb42:	pop	{r3, r4, r5, pc}
    fb44:	movw	r3, #343	; 0x157
    fb48:	cmp	r4, r3
    fb4a:	beq.n	fb6e <AvailableColumnsPanel_new@@Base+0x162>
    fb4c:	movw	r3, #409	; 0x199
    fb50:	cmp	r4, r3
    fb52:	it	ne
    fb54:	movne	r0, #2
    fb56:	bne.n	fb42 <AvailableColumnsPanel_new@@Base+0x136>
    fb58:	mov	r0, r5
    fb5a:	bl	78f4 <CheckItem_get@@Base>
    fb5e:	eor.w	r1, r0, #1
    fb62:	mov	r0, r5
    fb64:	uxtb	r1, r1
    fb66:	bl	78e8 <CheckItem_set@@Base>
    fb6a:	movs	r0, #1
    fb6c:	pop	{r3, r4, r5, pc}
    fb6e:	movs	r0, #4
    fb70:	pop	{r3, r4, r5, pc}
    fb72:	nop

0000fb74 <AffinityPanel_new@@Base>:
    fb74:	ldr	r2, [pc, #244]	; (fc6c <AffinityPanel_new@@Base+0xf8>)
    fb76:	ldr	r3, [pc, #248]	; (fc70 <AffinityPanel_new@@Base+0xfc>)
    fb78:	add	r2, pc
    fb7a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fb7e:	mov	r5, r0
    fb80:	mov	r8, r1
    fb82:	ldr	r0, [pc, #240]	; (fc74 <AffinityPanel_new@@Base+0x100>)
    fb84:	ldr	r1, [pc, #240]	; (fc78 <AffinityPanel_new@@Base+0x104>)
    fb86:	sub	sp, #40	; 0x28
    fb88:	ldr	r3, [r2, r3]
    fb8a:	add	r0, pc
    fb8c:	add	r1, pc
    fb8e:	ldr	r4, [pc, #236]	; (fc7c <AffinityPanel_new@@Base+0x108>)
    fb90:	ldr	r3, [r3, #0]
    fb92:	str	r3, [sp, #36]	; 0x24
    fb94:	mov.w	r3, #0
    fb98:	bl	91d4 <FunctionBar_newEnterEsc@@Base>
    fb9c:	ldr	r6, [pc, #224]	; (fc80 <AffinityPanel_new@@Base+0x10c>)
    fb9e:	add	r4, pc
    fba0:	movs	r3, #1
    fba2:	mov	r1, r4
    fba4:	mov	r2, r3
    fba6:	mov	r1, r3
    fba8:	str	r0, [sp, #8]
    fbaa:	mov	r0, r3
    fbac:	ldr	r4, [r4, r6]
    fbae:	str	r3, [sp, #0]
    fbb0:	str	r4, [sp, #4]
    fbb2:	bl	b198 <Panel_new@@Base>
    fbb6:	ldr	r3, [pc, #204]	; (fc84 <AffinityPanel_new@@Base+0x110>)
    fbb8:	ldr	r1, [pc, #204]	; (fc88 <AffinityPanel_new@@Base+0x114>)
    fbba:	add	r3, pc
    fbbc:	add	r1, pc
    fbbe:	str	r3, [r0, #0]
    fbc0:	mov	r9, r0
    fbc2:	bl	b22c <Panel_setHeader@@Base>
    fbc6:	ldr.w	r3, [r5, #128]	; 0x80
    fbca:	cmp	r3, #0
    fbcc:	ble.n	fc3e <AffinityPanel_new@@Base+0xca>
    fbce:	ldr.w	sl, [pc, #188]	; fc8c <AffinityPanel_new@@Base+0x118>
    fbd2:	movs	r4, #0
    fbd4:	add	r6, sp, #24
    fbd6:	mov	r7, r4
    fbd8:	add	sl, pc
    fbda:	b.n	fc30 <AffinityPanel_new@@Base+0xbc>
    fbdc:	adds	r3, r4, #1
    fbde:	str	r3, [sp, #4]
    fbe0:	movs	r2, #1
    fbe2:	movs	r3, #10
    fbe4:	movs	r1, #9
    fbe6:	mov	r0, r6
    fbe8:	str.w	sl, [sp]
    fbec:	blx	6c78 <__snprintf_chk@plt>
    fbf0:	cmp	r0, #8
    fbf2:	bgt.n	fc56 <AffinityPanel_new@@Base+0xe2>
    fbf4:	ldr.w	r3, [r8, #8]
    fbf8:	cmp	r3, r7
    fbfa:	ble.n	fc0e <AffinityPanel_new@@Base+0x9a>
    fbfc:	ldr.w	r3, [r8, #12]
    fc00:	ldr.w	r3, [r3, r7, lsl #2]
    fc04:	cmp	r3, r4
    fc06:	itt	eq
    fc08:	addeq	r7, #1
    fc0a:	moveq	r1, #1
    fc0c:	beq.n	fc10 <AffinityPanel_new@@Base+0x9c>
    fc0e:	movs	r1, #0
    fc10:	mov	r0, r6
    fc12:	str	r1, [sp, #20]
    fc14:	bl	11de4 <xStrdup@@Base>
    fc18:	ldr	r1, [sp, #20]
    fc1a:	bl	78c8 <CheckItem_newByVal@@Base>
    fc1e:	adds	r4, #1
    fc20:	mov	r1, r0
    fc22:	mov	r0, r9
    fc24:	bl	b294 <Panel_add@@Base>
    fc28:	ldr.w	r3, [r5, #128]	; 0x80
    fc2c:	cmp	r3, r4
    fc2e:	ble.n	fc3e <AffinityPanel_new@@Base+0xca>
    fc30:	ldr	r3, [r5, #0]
    fc32:	ldrb.w	r3, [r3, #56]	; 0x38
    fc36:	cmp	r3, #0
    fc38:	beq.n	fbdc <AffinityPanel_new@@Base+0x68>
    fc3a:	mov	r3, r4
    fc3c:	b.n	fbde <AffinityPanel_new@@Base+0x6a>
    fc3e:	ldr	r2, [pc, #80]	; (fc90 <AffinityPanel_new@@Base+0x11c>)
    fc40:	ldr	r3, [pc, #44]	; (fc70 <AffinityPanel_new@@Base+0xfc>)
    fc42:	add	r2, pc
    fc44:	ldr	r3, [r2, r3]
    fc46:	ldr	r2, [r3, #0]
    fc48:	ldr	r3, [sp, #36]	; 0x24
    fc4a:	eors	r2, r3
    fc4c:	bne.n	fc68 <AffinityPanel_new@@Base+0xf4>
    fc4e:	mov	r0, r9
    fc50:	add	sp, #40	; 0x28
    fc52:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fc56:	movs	r0, #1
    fc58:	blx	6730 <curs_set@plt>
    fc5c:	blx	6c48 <endwin@plt+0x4>
    fc60:	movs	r1, #0
    fc62:	movs	r0, #1
    fc64:	blx	683c <err@plt>
    fc68:	blx	67d0 <__stack_chk_fail@plt>
    fc6c:	add	r1, pc, #592	; (adr r1, fec0 <OpenFilesScreen_scan@@Base+0x38>)
    fc6e:	movs	r1, r0
    fc70:	lsls	r0, r0, #9
    fc72:	movs	r0, r0
    fc74:	ldrb	r2, [r7, #1]
    fc76:	movs	r0, r0
    fc78:	strb	r4, [r3, #27]
    fc7a:	movs	r0, r0
    fc7c:	add	r1, pc, #440	; (adr r1, fe38 <OpenFilesScreen_draw@@Base+0x148>)
    fc7e:	movs	r1, r0
    fc80:	lsls	r4, r3, #11
    fc82:	movs	r0, r0
    fc84:	uxth	r2, r2
    fc86:	movs	r1, r0
    fc88:	ldrb	r0, [r2, #1]
    fc8a:	movs	r0, r0
    fc8c:	strb	r0, [r2, #27]
    fc8e:	movs	r0, r0
    fc90:	add	r0, pc, #808	; (adr r0, ffbc <OpenFilesScreen_scan@@Base+0x134>)
    fc92:	movs	r1, r0

0000fc94 <AffinityPanel_getAffinity@@Base>:
    fc94:	push	{r3, r4, r5, r6, r7, lr}
    fc96:	mov	r6, r0
    fc98:	mov	r0, r1
    fc9a:	bl	100d0 <Affinity_new@@Base>
    fc9e:	mov	r7, r0
    fca0:	mov	r0, r6
    fca2:	bl	b348 <Panel_size@@Base>
    fca6:	subs	r5, r0, #0
    fca8:	ble.n	fcd2 <AffinityPanel_getAffinity@@Base+0x3e>
    fcaa:	movs	r4, #0
    fcac:	b.n	fcb4 <AffinityPanel_getAffinity@@Base+0x20>
    fcae:	adds	r4, #1
    fcb0:	cmp	r5, r4
    fcb2:	beq.n	fcd2 <AffinityPanel_getAffinity@@Base+0x3e>
    fcb4:	mov	r1, r4
    fcb6:	mov	r0, r6
    fcb8:	bl	b2c4 <Panel_get@@Base>
    fcbc:	bl	78f4 <CheckItem_get@@Base>
    fcc0:	cmp	r0, #0
    fcc2:	beq.n	fcae <AffinityPanel_getAffinity@@Base+0x1a>
    fcc4:	mov	r1, r4
    fcc6:	mov	r0, r7
    fcc8:	adds	r4, #1
    fcca:	bl	10108 <Affinity_add@@Base>
    fcce:	cmp	r5, r4
    fcd0:	bne.n	fcb4 <AffinityPanel_getAffinity@@Base+0x20>
    fcd2:	mov	r0, r7
    fcd4:	pop	{r3, r4, r5, r6, r7, pc}
    fcd6:	nop
    fcd8:	mov	r0, r1
    fcda:	subs	r1, r2, #1
    fcdc:	b.w	68d8 <gethostname@plt>

0000fce0 <OpenFilesScreen_delete@@Base>:
    fce0:	push	{r3, lr}
    fce2:	bl	119e0 <InfoScreen_done@@Base>
    fce6:	ldmia.w	sp!, {r3, lr}
    fcea:	b.w	6754 <free@plt>
    fcee:	nop

0000fcf0 <OpenFilesScreen_draw@@Base>:
    fcf0:	push	{r4}
    fcf2:	ldr	r4, [r0, #4]
    fcf4:	ldr	r1, [pc, #12]	; (fd04 <OpenFilesScreen_draw@@Base+0x14>)
    fcf6:	ldr	r2, [r0, #24]
    fcf8:	ldr	r3, [r4, #28]
    fcfa:	add	r1, pc
    fcfc:	ldr.w	r4, [sp], #4
    fd00:	b.w	119fc <InfoScreen_drawTitled@@Base>
    fd04:	strb	r6, [r6, #28]
    fd06:	movs	r0, r0
    fd08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fd0c:	sub.w	sp, sp, #1064	; 0x428
    fd10:	ldr	r7, [pc, #332]	; (fe60 <OpenFilesScreen_draw@@Base+0x170>)
    fd12:	add	r5, sp, #32
    fd14:	ldr	r2, [pc, #332]	; (fe64 <OpenFilesScreen_draw@@Base+0x174>)
    fd16:	movw	r3, #1025	; 0x401
    fd1a:	ldr	r6, [pc, #332]	; (fe68 <OpenFilesScreen_draw@@Base+0x178>)
    fd1c:	add	r7, pc
    fd1e:	str	r0, [sp, #4]
    fd20:	add	r2, pc
    fd22:	str	r2, [sp, #0]
    fd24:	mov.w	r1, #1024	; 0x400
    fd28:	ldr	r6, [r7, r6]
    fd2a:	movs	r2, #1
    fd2c:	mov	r0, r5
    fd2e:	add	r4, sp, #24
    fd30:	ldr	r6, [r6, #0]
    fd32:	str.w	r6, [sp, #1060]	; 0x424
    fd36:	mov.w	r6, #0
    fd3a:	blx	6c78 <__snprintf_chk@plt>
    fd3e:	mov.w	r1, #1032	; 0x408
    fd42:	movs	r0, #1
    fd44:	bl	11da0 <xCalloc@@Base>
    fd48:	mov	r7, r0
    fd4a:	mov	r0, r4
    fd4c:	blx	6b3c <pipe@plt>
    fd50:	adds	r0, #1
    fd52:	beq.n	fdda <OpenFilesScreen_draw@@Base+0xea>
    fd54:	blx	6b54 <fork@plt>
    fd58:	cmp.w	r0, #4294967295	; 0xffffffff
    fd5c:	mov	r8, r0
    fd5e:	beq.n	fdda <OpenFilesScreen_draw@@Base+0xea>
    fd60:	cmp	r0, #0
    fd62:	beq.n	fdfc <OpenFilesScreen_draw@@Base+0x10c>
    fd64:	ldr	r0, [r4, #4]
    fd66:	mov	r6, r7
    fd68:	blx	6c60 <close@plt>
    fd6c:	ldr	r1, [pc, #252]	; (fe6c <OpenFilesScreen_draw@@Base+0x17c>)
    fd6e:	ldr	r0, [r4, #0]
    fd70:	mov.w	sl, #0
    fd74:	add	r1, pc
    fd76:	blx	6628 <fdopen@plt>
    fd7a:	mov	r9, r0
    fd7c:	b.n	fd90 <OpenFilesScreen_draw@@Base+0xa0>
    fd7e:	adds	r0, r4, #1
    fd80:	bl	11de4 <xStrdup@@Base>
    fd84:	mov	r3, r0
    fd86:	mov	r0, r4
    fd88:	str.w	r3, [r6, r5, lsl #2]
    fd8c:	blx	6758 <free@plt+0x4>
    fd90:	mov	r0, r9
    fd92:	bl	ec0c <String_readLine@@Base>
    fd96:	mov	r4, r0
    fd98:	cbz	r0, fdba <OpenFilesScreen_draw@@Base+0xca>
    fd9a:	ldrb	r5, [r0, #0]
    fd9c:	cmp	r5, #102	; 0x66
    fd9e:	bne.n	fd7e <OpenFilesScreen_draw@@Base+0x8e>
    fda0:	movw	r1, #1028	; 0x404
    fda4:	movs	r0, #1
    fda6:	bl	11da0 <xCalloc@@Base>
    fdaa:	cmp.w	sl, #0
    fdae:	beq.n	fe54 <OpenFilesScreen_draw@@Base+0x164>
    fdb0:	str.w	r0, [sl, #1024]	; 0x400
    fdb4:	mov	r6, r0
    fdb6:	mov	sl, r0
    fdb8:	b.n	fd7e <OpenFilesScreen_draw@@Base+0x8e>
    fdba:	add	r5, sp, #20
    fdbc:	mov	r2, r0
    fdbe:	mov	r0, r8
    fdc0:	mov	r1, r5
    fdc2:	blx	6890 <waitpid@plt>
    fdc6:	adds	r0, #1
    fdc8:	beq.n	fdda <OpenFilesScreen_draw@@Base+0xea>
    fdca:	ldr	r3, [r5, #0]
    fdcc:	lsls	r2, r3, #25
    fdce:	itt	eq
    fdd0:	ubfxeq	r3, r3, #8, #8
    fdd4:	streq.w	r3, [r7, #1024]	; 0x400
    fdd8:	beq.n	fde0 <OpenFilesScreen_draw@@Base+0xf0>
    fdda:	movs	r3, #1
    fddc:	str.w	r3, [r7, #1024]	; 0x400
    fde0:	ldr	r2, [pc, #140]	; (fe70 <OpenFilesScreen_draw@@Base+0x180>)
    fde2:	ldr	r3, [pc, #132]	; (fe68 <OpenFilesScreen_draw@@Base+0x178>)
    fde4:	add	r2, pc
    fde6:	ldr	r3, [r2, r3]
    fde8:	ldr	r2, [r3, #0]
    fdea:	ldr.w	r3, [sp, #1060]	; 0x424
    fdee:	eors	r2, r3
    fdf0:	bne.n	fe5a <OpenFilesScreen_draw@@Base+0x16a>
    fdf2:	mov	r0, r7
    fdf4:	add.w	sp, sp, #1064	; 0x428
    fdf8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    fdfc:	ldr	r0, [r4, #0]
    fdfe:	blx	6c60 <close@plt>
    fe02:	movs	r1, #1
    fe04:	ldr	r0, [r4, #4]
    fe06:	blx	67f4 <dup2@plt>
    fe0a:	ldr	r0, [r4, #4]
    fe0c:	blx	6c60 <close@plt>
    fe10:	ldr	r0, [pc, #96]	; (fe74 <OpenFilesScreen_draw@@Base+0x184>)
    fe12:	movs	r1, #1
    fe14:	add	r0, pc
    fe16:	blx	69a8 <open@plt>
    fe1a:	subs	r4, r0, #0
    fe1c:	blt.n	fe4e <OpenFilesScreen_draw@@Base+0x15e>
    fe1e:	movs	r1, #2
    fe20:	blx	67f4 <dup2@plt>
    fe24:	mov	r0, r4
    fe26:	blx	6c60 <close@plt>
    fe2a:	ldr	r1, [pc, #76]	; (fe78 <OpenFilesScreen_draw@@Base+0x188>)
    fe2c:	ldr	r3, [pc, #76]	; (fe7c <OpenFilesScreen_draw@@Base+0x18c>)
    fe2e:	add	r1, pc
    fe30:	ldr	r2, [pc, #76]	; (fe80 <OpenFilesScreen_draw@@Base+0x190>)
    fe32:	add	r3, pc
    fe34:	str	r3, [sp, #4]
    fe36:	ldr	r3, [pc, #76]	; (fe84 <OpenFilesScreen_draw@@Base+0x194>)
    fe38:	add	r2, pc
    fe3a:	mov	r0, r1
    fe3c:	str.w	r8, [sp, #8]
    fe40:	add	r3, pc
    fe42:	str	r5, [sp, #0]
    fe44:	blx	6794 <execlp@plt>
    fe48:	movs	r0, #127	; 0x7f
    fe4a:	blx	69dc <exit@plt>
    fe4e:	movs	r0, #1
    fe50:	blx	69dc <exit@plt>
    fe54:	str.w	r0, [r7, #1028]	; 0x404
    fe58:	b.n	fdb4 <OpenFilesScreen_draw@@Base+0xc4>
    fe5a:	blx	67d0 <__stack_chk_fail@plt>
    fe5e:	nop
    fe60:	ldr	r7, [sp, #960]	; 0x3c0
    fe62:	movs	r1, r0
    fe64:	strb	r0, [r1, #22]
    fe66:	movs	r0, r0
    fe68:	lsls	r0, r0, #9
    fe6a:	movs	r0, r0
    fe6c:	ldrb	r0, [r7, #25]
    fe6e:	movs	r0, r0
    fe70:	ldr	r7, [sp, #160]	; 0xa0
    fe72:	movs	r1, r0
    fe74:	strb	r0, [r1, #25]
    fe76:	movs	r0, r0
    fe78:	strb	r6, [r7, #24]
    fe7a:	movs	r0, r0
    fe7c:	strb	r2, [r0, #25]
    fe7e:	movs	r0, r0
    fe80:	strb	r0, [r6, #24]
    fe82:	movs	r0, r0
    fe84:	strb	r4, [r7, #20]
	...

0000fe88 <OpenFilesScreen_scan@@Base>:
    fe88:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    fe8c:	mov	sl, r0
    fe8e:	vpush	{d8}
    fe92:	ldr	r2, [pc, #440]	; (1004c <OpenFilesScreen_scan@@Base+0x1c4>)
    fe94:	ldr	r3, [pc, #440]	; (10050 <OpenFilesScreen_scan@@Base+0x1c8>)
    fe96:	add	r2, pc
    fe98:	sub	sp, #60	; 0x3c
    fe9a:	ldr	r3, [r2, r3]
    fe9c:	add	r7, sp, #32
    fe9e:	ldr	r3, [r3, #0]
    fea0:	str	r3, [r7, #20]
    fea2:	mov.w	r3, #0
    fea6:	ldr	r3, [r0, #8]
    fea8:	mov	r0, r3
    feaa:	mov	r4, r3
    feac:	vmov	s16, r3
    feb0:	bl	b344 <Panel_getSelectedIndex@@Base>
    feb4:	mov	r3, r0
    feb6:	mov	r0, r4
    feb8:	vmov	s17, r3
    febc:	bl	b278 <Panel_prune@@Base>
    fec0:	ldr.w	r0, [sl, #24]
    fec4:	bl	fd08 <OpenFilesScreen_draw@@Base+0x18>
    fec8:	ldr.w	r3, [r0, #1024]	; 0x400
    fecc:	str	r0, [r7, #0]
    fece:	cmp	r3, #127	; 0x7f
    fed0:	beq.w	1001c <OpenFilesScreen_scan@@Base+0x194>
    fed4:	cmp	r3, #1
    fed6:	beq.w	10028 <OpenFilesScreen_scan@@Base+0x1a0>
    feda:	ldr	r3, [r7, #0]
    fedc:	ldr.w	r4, [r3, #1028]	; 0x404
    fee0:	cmp	r4, #0
    fee2:	beq.n	ffc6 <OpenFilesScreen_scan@@Base+0x13e>
    fee4:	ldr	r3, [pc, #364]	; (10054 <OpenFilesScreen_scan@@Base+0x1cc>)
    fee6:	add	r3, pc
    fee8:	str	r3, [r7, #12]
    feea:	ldr	r3, [pc, #364]	; (10058 <OpenFilesScreen_scan@@Base+0x1d0>)
    feec:	add	r3, pc
    feee:	str	r3, [r7, #8]
    fef0:	ldr	r3, [pc, #360]	; (1005c <OpenFilesScreen_scan@@Base+0x1d4>)
    fef2:	add	r3, pc
    fef4:	str	r3, [r7, #4]
    fef6:	ldr.w	fp, [r4, #440]	; 0x1b8
    fefa:	mov	r9, sp
    fefc:	movs	r5, #48	; 0x30
    fefe:	cmp.w	fp, #0
    ff02:	beq.n	ff0e <OpenFilesScreen_scan@@Base+0x86>
    ff04:	mov	r0, fp
    ff06:	blx	6a0c <strlen@plt>
    ff0a:	add.w	r5, r0, #48	; 0x30
    ff0e:	adds	r3, r5, #7
    ff10:	ldr.w	r6, [r4, #408]	; 0x198
    ff14:	bic.w	r3, r3, #7
    ff18:	ldr.w	ip, [r4, #464]	; 0x1d0
    ff1c:	sub.w	sp, sp, r3
    ff20:	ldr	r3, [r7, #12]
    ff22:	cmp	r6, #0
    ff24:	ldr.w	r0, [r4, #272]	; 0x110
    ff28:	ldr.w	r1, [r4, #460]	; 0x1cc
    ff2c:	add.w	r8, sp, #32
    ff30:	it	eq
    ff32:	moveq	r6, r3
    ff34:	ldr	r3, [r7, #8]
    ff36:	cmp.w	ip, #0
    ff3a:	it	eq
    ff3c:	moveq	ip, r3
    ff3e:	ldr	r3, [r7, #4]
    ff40:	cmp	r0, #0
    ff42:	it	eq
    ff44:	moveq	r0, r3
    ff46:	cmp	r1, #0
    ff48:	beq.n	ffc0 <OpenFilesScreen_scan@@Base+0x138>
    ff4a:	ldr.w	r2, [r4, #420]	; 0x1a4
    ff4e:	cbz	r2, ffae <OpenFilesScreen_scan@@Base+0x126>
    ff50:	cmp.w	fp, #0
    ff54:	beq.n	ffb8 <OpenFilesScreen_scan@@Base+0x130>
    ff56:	ldr.w	lr, [pc, #264]	; 10060 <OpenFilesScreen_scan@@Base+0x1d8>
    ff5a:	mov.w	r3, #4294967295	; 0xffffffff
    ff5e:	str	r2, [sp, #20]
    ff60:	movs	r2, #1
    ff62:	add	lr, pc
    ff64:	str	r1, [sp, #16]
    ff66:	str	r0, [sp, #12]
    ff68:	mov	r1, r5
    ff6a:	mov	r0, r8
    ff6c:	str.w	fp, [sp, #24]
    ff70:	strd	r6, ip, [sp, #4]
    ff74:	str.w	lr, [sp]
    ff78:	blx	6c78 <__snprintf_chk@plt>
    ff7c:	cmp	r0, r5
    ff7e:	bcs.n	10034 <OpenFilesScreen_scan@@Base+0x1ac>
    ff80:	mov	r1, r8
    ff82:	mov	r0, sl
    ff84:	bl	11ac0 <InfoScreen_addLine@@Base>
    ff88:	subs	r6, r4, #4
    ff8a:	add.w	r5, r4, #1016	; 0x3f8
    ff8e:	ldr.w	r0, [r6, #4]!
    ff92:	cbz	r0, ff98 <OpenFilesScreen_scan@@Base+0x110>
    ff94:	blx	6758 <free@plt+0x4>
    ff98:	cmp	r5, r6
    ff9a:	bne.n	ff8e <OpenFilesScreen_scan@@Base+0x106>
    ff9c:	ldr.w	r5, [r4, #1024]	; 0x400
    ffa0:	mov	r0, r4
    ffa2:	blx	6758 <free@plt+0x4>
    ffa6:	mov	sp, r9
    ffa8:	cbz	r5, ffc6 <OpenFilesScreen_scan@@Base+0x13e>
    ffaa:	mov	r4, r5
    ffac:	b.n	fef6 <OpenFilesScreen_scan@@Base+0x6e>
    ffae:	ldr	r2, [pc, #180]	; (10064 <OpenFilesScreen_scan@@Base+0x1dc>)
    ffb0:	add	r2, pc
    ffb2:	cmp.w	fp, #0
    ffb6:	bne.n	ff56 <OpenFilesScreen_scan@@Base+0xce>
    ffb8:	ldr.w	fp, [pc, #172]	; 10068 <OpenFilesScreen_scan@@Base+0x1e0>
    ffbc:	add	fp, pc
    ffbe:	b.n	ff56 <OpenFilesScreen_scan@@Base+0xce>
    ffc0:	ldr	r1, [pc, #168]	; (1006c <OpenFilesScreen_scan@@Base+0x1e4>)
    ffc2:	add	r1, pc
    ffc4:	b.n	ff4a <OpenFilesScreen_scan@@Base+0xc2>
    ffc6:	ldr	r3, [r7, #0]
    ffc8:	subs	r4, r3, #4
    ffca:	add.w	r5, r3, #1016	; 0x3f8
    ffce:	ldr.w	r0, [r4, #4]!
    ffd2:	cbz	r0, ffd8 <OpenFilesScreen_scan@@Base+0x150>
    ffd4:	blx	6758 <free@plt+0x4>
    ffd8:	cmp	r4, r5
    ffda:	bne.n	ffce <OpenFilesScreen_scan@@Base+0x146>
    ffdc:	vmov	r4, s16
    ffe0:	ldr	r0, [r7, #0]
    ffe2:	blx	6758 <free@plt+0x4>
    ffe6:	ldr.w	r0, [sl, #20]
    ffea:	bl	f79c <Vector_insertionSort@@Base>
    ffee:	ldr	r0, [r4, #24]
    fff0:	bl	f79c <Vector_insertionSort@@Base>
    fff4:	vmov	r1, s17
    fff8:	vmov	r0, s16
    fffc:	bl	b350 <Panel_setSelected@@Base>
   10000:	ldr	r2, [pc, #108]	; (10070 <OpenFilesScreen_scan@@Base+0x1e8>)
   10002:	ldr	r3, [pc, #76]	; (10050 <OpenFilesScreen_scan@@Base+0x1c8>)
   10004:	add	r2, pc
   10006:	ldr	r3, [r2, r3]
   10008:	ldr	r2, [r3, #0]
   1000a:	ldr	r3, [r7, #20]
   1000c:	eors	r2, r3
   1000e:	bne.n	10046 <OpenFilesScreen_scan@@Base+0x1be>
   10010:	adds	r7, #28
   10012:	mov	sp, r7
   10014:	vpop	{d8}
   10018:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1001c:	ldr	r1, [pc, #84]	; (10074 <OpenFilesScreen_scan@@Base+0x1ec>)
   1001e:	mov	r0, sl
   10020:	add	r1, pc
   10022:	bl	11ac0 <InfoScreen_addLine@@Base>
   10026:	b.n	ffdc <OpenFilesScreen_scan@@Base+0x154>
   10028:	ldr	r1, [pc, #76]	; (10078 <OpenFilesScreen_scan@@Base+0x1f0>)
   1002a:	mov	r0, sl
   1002c:	add	r1, pc
   1002e:	bl	11ac0 <InfoScreen_addLine@@Base>
   10032:	b.n	ffdc <OpenFilesScreen_scan@@Base+0x154>
   10034:	movs	r0, #1
   10036:	blx	6730 <curs_set@plt>
   1003a:	blx	6c48 <endwin@plt+0x4>
   1003e:	movs	r1, #0
   10040:	movs	r0, #1
   10042:	blx	683c <err@plt>
   10046:	blx	67d0 <__stack_chk_fail@plt>
   1004a:	nop
   1004c:	ldr	r6, [sp, #472]	; 0x1d8
   1004e:	movs	r1, r0
   10050:	lsls	r0, r0, #9
   10052:	movs	r0, r0
   10054:	ldr	r2, [r7, #8]
   10056:	movs	r0, r0
   10058:	ldr	r4, [r6, #8]
   1005a:	movs	r0, r0
   1005c:	ldr	r6, [r5, #8]
   1005e:	movs	r0, r0
   10060:	strb	r6, [r7, #21]
   10062:	movs	r0, r0
   10064:	str	r0, [r6, #124]	; 0x7c
   10066:	movs	r0, r0
   10068:	str	r4, [r4, #124]	; 0x7c
   1006a:	movs	r0, r0
   1006c:	str	r6, [r3, #124]	; 0x7c
   1006e:	movs	r0, r0
   10070:	ldr	r5, [sp, #32]
   10072:	movs	r1, r0
   10074:	strb	r0, [r3, #17]
   10076:	movs	r0, r0
   10078:	strb	r0, [r3, #18]
	...

0001007c <OpenFilesScreen_new@@Base>:
   1007c:	push	{r4, r5, r6, r7, lr}
   1007e:	mov	r5, r0
   10080:	sub	sp, #12
   10082:	movs	r0, #28
   10084:	bl	11d84 <xMalloc@@Base>
   10088:	ldr	r3, [pc, #52]	; (100c0 <OpenFilesScreen_new@@Base+0x44>)
   1008a:	ldr	r7, [pc, #56]	; (100c4 <OpenFilesScreen_new@@Base+0x48>)
   1008c:	add	r3, pc
   1008e:	add	r7, pc
   10090:	mov	r4, r0
   10092:	mov	r0, r5
   10094:	str	r3, [r4, #0]
   10096:	bl	12cf8 <Process_isThread@@Base>
   1009a:	cbz	r0, 100bc <OpenFilesScreen_new@@Base+0x40>
   1009c:	ldr	r3, [r5, #24]
   1009e:	ldr	r6, [pc, #40]	; (100c8 <OpenFilesScreen_new@@Base+0x4c>)
   100a0:	mov	r0, r4
   100a2:	str	r3, [r4, #24]
   100a4:	mov	r1, r5
   100a6:	ldr	r3, [pc, #36]	; (100cc <OpenFilesScreen_new@@Base+0x50>)
   100a8:	movs	r2, #0
   100aa:	ldr	r4, [r7, r6]
   100ac:	add	r3, pc
   100ae:	str	r3, [sp, #0]
   100b0:	ldr	r3, [r4, #0]
   100b2:	subs	r3, #3
   100b4:	bl	11960 <InfoScreen_init@@Base>
   100b8:	add	sp, #12
   100ba:	pop	{r4, r5, r6, r7, pc}
   100bc:	ldr	r3, [r5, #16]
   100be:	b.n	1009e <OpenFilesScreen_new@@Base+0x22>
   100c0:	add	r6, sp, #128	; 0x80
   100c2:	movs	r1, r0
   100c4:	ldr	r4, [sp, #504]	; 0x1f8
   100c6:	movs	r1, r0
   100c8:	lsls	r0, r2, #11
   100ca:	movs	r0, r0
   100cc:	strb	r4, [r3, #17]
	...

000100d0 <Affinity_new@@Base>:
   100d0:	push	{r3, r4, r5, lr}
   100d2:	movs	r1, #16
   100d4:	mov	r5, r0
   100d6:	movs	r0, #1
   100d8:	bl	11da0 <xCalloc@@Base>
   100dc:	movs	r1, #4
   100de:	mov	r4, r0
   100e0:	movs	r0, #8
   100e2:	str	r0, [r4, #4]
   100e4:	bl	11da0 <xCalloc@@Base>
   100e8:	str	r5, [r4, #0]
   100ea:	mov	r3, r0
   100ec:	mov	r0, r4
   100ee:	str	r3, [r4, #12]
   100f0:	pop	{r3, r4, r5, pc}
   100f2:	nop

000100f4 <Affinity_delete@@Base>:
   100f4:	push	{r4, lr}
   100f6:	mov	r4, r0
   100f8:	ldr	r0, [r0, #12]
   100fa:	blx	6758 <free@plt+0x4>
   100fe:	mov	r0, r4
   10100:	ldmia.w	sp!, {r4, lr}
   10104:	b.w	6754 <free@plt>

00010108 <Affinity_add@@Base>:
   10108:	push	{r3, r4, r5, lr}
   1010a:	mov	r5, r1
   1010c:	ldrd	r3, r1, [r0, #4]
   10110:	mov	r4, r0
   10112:	ldr	r0, [r0, #12]
   10114:	cmp	r1, r3
   10116:	beq.n	10124 <Affinity_add@@Base+0x1c>
   10118:	str.w	r5, [r0, r1, lsl #2]
   1011c:	ldr	r3, [r4, #8]
   1011e:	adds	r3, #1
   10120:	str	r3, [r4, #8]
   10122:	pop	{r3, r4, r5, pc}
   10124:	lsls	r3, r1, #1
   10126:	lsls	r1, r1, #3
   10128:	str	r3, [r4, #4]
   1012a:	bl	11dc8 <xRealloc@@Base>
   1012e:	ldr	r1, [r4, #8]
   10130:	str	r0, [r4, #12]
   10132:	b.n	10118 <Affinity_add@@Base+0x10>

00010134 <Affinity_get@@Base>:
   10134:	push	{r4, r5, r6, lr}
   10136:	sub	sp, #144	; 0x90
   10138:	ldr	r4, [pc, #128]	; (101bc <Affinity_get@@Base+0x88>)
   1013a:	mov	r5, r1
   1013c:	ldr	r3, [pc, #128]	; (101c0 <Affinity_get@@Base+0x8c>)
   1013e:	add	r2, sp, #12
   10140:	add	r4, pc
   10142:	ldr	r0, [r0, #16]
   10144:	movs	r1, #128	; 0x80
   10146:	ldr	r3, [r4, r3]
   10148:	ldr	r3, [r3, #0]
   1014a:	str	r3, [sp, #140]	; 0x8c
   1014c:	mov.w	r3, #0
   10150:	blx	6be4 <sched_getaffinity@plt>
   10154:	cbnz	r0, 101b4 <Affinity_get@@Base+0x80>
   10156:	mov	r4, r0
   10158:	mov	r0, r5
   1015a:	bl	100d0 <Affinity_new@@Base>
   1015e:	ldr.w	r6, [r5, #128]	; 0x80
   10162:	cmp	r6, #0
   10164:	bgt.n	1016e <Affinity_get@@Base+0x3a>
   10166:	b.n	101a0 <Affinity_get@@Base+0x6c>
   10168:	adds	r4, #1
   1016a:	cmp	r6, r4
   1016c:	ble.n	101a0 <Affinity_get@@Base+0x6c>
   1016e:	cmp.w	r4, #1024	; 0x400
   10172:	bge.n	10168 <Affinity_get@@Base+0x34>
   10174:	lsrs	r3, r4, #5
   10176:	add	r2, sp, #144	; 0x90
   10178:	and.w	r1, r4, #31
   1017c:	add.w	r3, r2, r3, lsl #2
   10180:	ldr.w	r2, [r3, #-132]
   10184:	lsr.w	r3, r2, r1
   10188:	lsls	r3, r3, #31
   1018a:	bpl.n	10168 <Affinity_get@@Base+0x34>
   1018c:	mov	r1, r4
   1018e:	str	r0, [sp, #4]
   10190:	bl	10108 <Affinity_add@@Base>
   10194:	ldr.w	r6, [r5, #128]	; 0x80
   10198:	adds	r4, #1
   1019a:	ldr	r0, [sp, #4]
   1019c:	cmp	r6, r4
   1019e:	bgt.n	1016e <Affinity_get@@Base+0x3a>
   101a0:	ldr	r2, [pc, #32]	; (101c4 <Affinity_get@@Base+0x90>)
   101a2:	ldr	r3, [pc, #28]	; (101c0 <Affinity_get@@Base+0x8c>)
   101a4:	add	r2, pc
   101a6:	ldr	r3, [r2, r3]
   101a8:	ldr	r2, [r3, #0]
   101aa:	ldr	r3, [sp, #140]	; 0x8c
   101ac:	eors	r2, r3
   101ae:	bne.n	101b8 <Affinity_get@@Base+0x84>
   101b0:	add	sp, #144	; 0x90
   101b2:	pop	{r4, r5, r6, pc}
   101b4:	movs	r0, #0
   101b6:	b.n	101a0 <Affinity_get@@Base+0x6c>
   101b8:	blx	67d0 <__stack_chk_fail@plt>
   101bc:	ldr	r3, [sp, #816]	; 0x330
   101be:	movs	r1, r0
   101c0:	lsls	r0, r0, #9
   101c2:	movs	r0, r0
   101c4:	ldr	r3, [sp, #416]	; 0x1a0
   101c6:	movs	r1, r0

000101c8 <Affinity_set@@Base>:
   101c8:	push	{r4, r5, r6, r7, lr}
   101ca:	sub	sp, #140	; 0x8c
   101cc:	ldr	r7, [pc, #120]	; (10248 <Affinity_set@@Base+0x80>)
   101ce:	add	r5, sp, #4
   101d0:	ldr	r3, [pc, #120]	; (1024c <Affinity_set@@Base+0x84>)
   101d2:	mov	r4, r1
   101d4:	add	r7, pc
   101d6:	mov	r6, r0
   101d8:	movs	r2, #128	; 0x80
   101da:	mov	r0, r5
   101dc:	ldr	r3, [r7, r3]
   101de:	movs	r1, #0
   101e0:	ldr	r3, [r3, #0]
   101e2:	str	r3, [sp, #132]	; 0x84
   101e4:	mov.w	r3, #0
   101e8:	blx	6a90 <memset@plt>
   101ec:	ldr	r0, [r4, #8]
   101ee:	cmp	r0, #0
   101f0:	ble.n	1021c <Affinity_set@@Base+0x54>
   101f2:	ldr	r2, [r4, #12]
   101f4:	movs	r7, #1
   101f6:	add.w	r0, r2, r0, lsl #2
   101fa:	ldr.w	r3, [r2], #4
   101fe:	cmp.w	r3, #1024	; 0x400
   10202:	bcs.n	10218 <Affinity_set@@Base+0x50>
   10204:	lsrs	r4, r3, #5
   10206:	and.w	r3, r3, #31
   1020a:	lsl.w	r3, r7, r3
   1020e:	ldr.w	r1, [r5, r4, lsl #2]
   10212:	orrs	r3, r1
   10214:	str.w	r3, [r5, r4, lsl #2]
   10218:	cmp	r2, r0
   1021a:	bne.n	101fa <Affinity_set@@Base+0x32>
   1021c:	mov	r2, r5
   1021e:	ldr	r0, [r6, #16]
   10220:	movs	r1, #4
   10222:	blx	6b0c <sched_setaffinity@plt>
   10226:	ldr	r2, [pc, #40]	; (10250 <Affinity_set@@Base+0x88>)
   10228:	ldr	r3, [pc, #32]	; (1024c <Affinity_set@@Base+0x84>)
   1022a:	add	r2, pc
   1022c:	ldr	r3, [r2, r3]
   1022e:	ldr	r2, [r3, #0]
   10230:	ldr	r3, [sp, #132]	; 0x84
   10232:	eors	r2, r3
   10234:	clz	r0, r0
   10238:	mov.w	r0, r0, lsr #5
   1023c:	bne.n	10242 <Affinity_set@@Base+0x7a>
   1023e:	add	sp, #140	; 0x8c
   10240:	pop	{r4, r5, r6, r7, pc}
   10242:	blx	67d0 <__stack_chk_fail@plt>
   10246:	nop
   10248:	ldr	r3, [sp, #224]	; 0xe0
   1024a:	movs	r1, r0
   1024c:	lsls	r0, r0, #9
   1024e:	movs	r0, r0
   10250:	ldr	r2, [sp, #904]	; 0x388
   10252:	movs	r1, r0

00010254 <IncSet_new@@Base>:
   10254:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10258:	movs	r1, #124	; 0x7c
   1025a:	mov	r8, r0
   1025c:	movs	r0, #1
   1025e:	bl	11da0 <xCalloc@@Base>
   10262:	ldr	r7, [pc, #92]	; (102c0 <IncSet_new@@Base+0x6c>)
   10264:	ldr	r5, [pc, #92]	; (102c4 <IncSet_new@@Base+0x70>)
   10266:	mov.w	r9, #56	; 0x38
   1026a:	add	r7, pc
   1026c:	mov	r2, r9
   1026e:	add	r5, pc
   10270:	movs	r1, #0
   10272:	movs	r6, #0
   10274:	mov	r4, r0
   10276:	blx	6a90 <memset@plt>
   1027a:	mov	r2, r7
   1027c:	mov	r1, r5
   1027e:	add.w	r0, r5, #12
   10282:	bl	90fc <FunctionBar_new@@Base>
   10286:	mov	r2, r9
   10288:	mov	r1, r6
   1028a:	strb.w	r6, [r4, #52]	; 0x34
   1028e:	str	r0, [r4, #48]	; 0x30
   10290:	adds	r0, r4, r2
   10292:	blx	6a90 <memset@plt>
   10296:	add.w	r2, r7, #12
   1029a:	add.w	r1, r5, #28
   1029e:	add.w	r0, r5, #40	; 0x28
   102a2:	bl	90fc <FunctionBar_new@@Base>
   102a6:	movs	r3, #1
   102a8:	str.w	r8, [r4, #116]	; 0x74
   102ac:	str	r6, [r4, #112]	; 0x70
   102ae:	strb.w	r6, [r4, #120]	; 0x78
   102b2:	strb.w	r3, [r4, #108]	; 0x6c
   102b6:	mov	r2, r0
   102b8:	mov	r0, r4
   102ba:	str	r2, [r4, #104]	; 0x68
   102bc:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   102c0:	add	r4, sp, #392	; 0x188
   102c2:	movs	r1, r0
   102c4:	str	r7, [sp, #40]	; 0x28
   102c6:	movs	r1, r0

000102c8 <IncSet_delete@@Base>:
   102c8:	push	{r4, lr}
   102ca:	mov	r4, r0
   102cc:	ldr	r0, [r0, #48]	; 0x30
   102ce:	bl	9234 <FunctionBar_delete@@Base>
   102d2:	ldr	r0, [r4, #104]	; 0x68
   102d4:	bl	9234 <FunctionBar_delete@@Base>
   102d8:	mov	r0, r4
   102da:	ldmia.w	sp!, {r4, lr}
   102de:	b.w	6754 <free@plt>
   102e2:	nop

000102e4 <IncSet_handleKey@@Base>:
   102e4:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   102e8:	mov	r6, r3
   102ea:	sub	sp, #20
   102ec:	ldr	r3, [pc, #652]	; (1057c <IncSet_handleKey@@Base+0x298>)
   102ee:	add	r3, pc
   102f0:	str	r3, [sp, #4]
   102f2:	adds	r3, r1, #1
   102f4:	ldr	r7, [sp, #56]	; 0x38
   102f6:	beq.n	103f4 <IncSet_handleKey@@Base+0x110>
   102f8:	mov	r5, r0
   102fa:	mov	r0, r2
   102fc:	mov	sl, r1
   102fe:	ldr.w	r8, [r5, #112]	; 0x70
   10302:	mov	r4, r2
   10304:	bl	b348 <Panel_size@@Base>
   10308:	movw	r3, #267	; 0x10b
   1030c:	cmp	sl, r3
   1030e:	mov	r9, r0
   10310:	beq.n	103f2 <IncSet_handleKey@@Base+0x10e>
   10312:	cmp.w	sl, #254	; 0xfe
   10316:	bgt.n	10400 <IncSet_handleKey@@Base+0x11c>
   10318:	blx	69d0 <__ctype_b_loc@plt>
   1031c:	uxtb.w	r2, sl
   10320:	ldr	r3, [r0, #0]
   10322:	ldrh.w	r3, [r3, r2, lsl #1]
   10326:	ands.w	r3, r3, #16384	; 0x4000
   1032a:	beq.w	1049c <IncSet_handleKey@@Base+0x1b8>
   1032e:	subs	r2, r7, #0
   10330:	ldr.w	r3, [r8, #44]	; 0x2c
   10334:	it	ne
   10336:	movne	r2, #1
   10338:	cmp	r3, #39	; 0x27
   1033a:	str	r2, [sp, #8]
   1033c:	bgt.n	1035a <IncSet_handleKey@@Base+0x76>
   1033e:	adds	r2, r3, #1
   10340:	strb.w	sl, [r8, r3]
   10344:	movs	r3, #0
   10346:	str.w	r2, [r8, #44]	; 0x2c
   1034a:	strb.w	r3, [r8, r2]
   1034e:	ldrb.w	fp, [r8, #52]	; 0x34
   10352:	cmp.w	fp, #0
   10356:	bne.w	10548 <IncSet_handleKey@@Base+0x264>
   1035a:	movs	r3, #0
   1035c:	str	r3, [sp, #8]
   1035e:	mov	fp, r3
   10360:	mov	r0, r4
   10362:	bl	b348 <Panel_size@@Base>
   10366:	subs.w	r9, r0, #0
   1036a:	it	gt
   1036c:	movgt.w	sl, #0
   10370:	bgt.n	1037e <IncSet_handleKey@@Base+0x9a>
   10372:	b.n	104d8 <IncSet_handleKey@@Base+0x1f4>
   10374:	add.w	sl, sl, #1
   10378:	cmp	r9, sl
   1037a:	beq.w	104d8 <IncSet_handleKey@@Base+0x1f4>
   1037e:	mov	r1, sl
   10380:	mov	r0, r4
   10382:	blx	r6
   10384:	mov	r1, r8
   10386:	blx	66a4 <strcasestr@plt>
   1038a:	cmp	r0, #0
   1038c:	beq.n	10374 <IncSet_handleKey@@Base+0x90>
   1038e:	mov	r1, sl
   10390:	mov	r0, r4
   10392:	bl	b350 <Panel_setSelected@@Base>
   10396:	ldr.w	r0, [r8, #48]	; 0x30
   1039a:	mov	r1, r8
   1039c:	bl	9420 <FunctionBar_draw@@Base>
   103a0:	movs	r2, #1
   103a2:	strb.w	r2, [r5, #121]	; 0x79
   103a6:	ldr	r3, [sp, #8]
   103a8:	cbz	r3, 103f8 <IncSet_handleKey@@Base+0x114>
   103aa:	mov	r0, r4
   103ac:	bl	b2f8 <Panel_getSelected@@Base>
   103b0:	mov	r8, r0
   103b2:	mov	r0, r4
   103b4:	bl	b278 <Panel_prune@@Base>
   103b8:	ldrb.w	r3, [r5, #120]	; 0x78
   103bc:	cmp	r3, #0
   103be:	bne.w	104f0 <IncSet_handleKey@@Base+0x20c>
   103c2:	ldr	r2, [r7, #16]
   103c4:	cmp	r2, #0
   103c6:	it	gt
   103c8:	movgt	r5, r3
   103ca:	bgt.n	103d6 <IncSet_handleKey@@Base+0xf2>
   103cc:	b.n	103f4 <IncSet_handleKey@@Base+0x110>
   103ce:	ldr	r3, [r7, #16]
   103d0:	adds	r5, #1
   103d2:	cmp	r5, r3
   103d4:	bge.n	103f4 <IncSet_handleKey@@Base+0x110>
   103d6:	ldr	r3, [r7, #0]
   103d8:	mov	r0, r4
   103da:	ldr.w	r6, [r3, r5, lsl #2]
   103de:	mov	r1, r6
   103e0:	bl	b294 <Panel_add@@Base>
   103e4:	cmp	r8, r6
   103e6:	bne.n	103ce <IncSet_handleKey@@Base+0xea>
   103e8:	mov	r1, r5
   103ea:	mov	r0, r4
   103ec:	bl	b350 <Panel_setSelected@@Base>
   103f0:	b.n	103ce <IncSet_handleKey@@Base+0xea>
   103f2:	cbnz	r0, 10440 <IncSet_handleKey@@Base+0x15c>
   103f4:	mov.w	fp, #1
   103f8:	mov	r0, fp
   103fa:	add	sp, #20
   103fc:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10400:	movw	r3, #263	; 0x107
   10404:	cmp	sl, r3
   10406:	bne.n	10474 <IncSet_handleKey@@Base+0x190>
   10408:	ldr.w	r2, [r8, #44]	; 0x2c
   1040c:	cmp	r2, #0
   1040e:	ble.n	10468 <IncSet_handleKey@@Base+0x184>
   10410:	subs	r2, #1
   10412:	movs	r3, #0
   10414:	str.w	r2, [r8, #44]	; 0x2c
   10418:	subs	r1, r7, r3
   1041a:	strb.w	r3, [r8, r2]
   1041e:	ldrb.w	fp, [r8, #52]	; 0x34
   10422:	it	ne
   10424:	movne	r1, #1
   10426:	str	r1, [sp, #8]
   10428:	cmp.w	fp, #0
   1042c:	beq.n	1035a <IncSet_handleKey@@Base+0x76>
   1042e:	cmp	r2, #0
   10430:	bne.n	10360 <IncSet_handleKey@@Base+0x7c>
   10432:	strb.w	r2, [r5, #120]	; 0x78
   10436:	str.w	r2, [r8, #44]	; 0x2c
   1043a:	strb.w	r2, [r8]
   1043e:	b.n	10360 <IncSet_handleKey@@Base+0x7c>
   10440:	mov	r0, r4
   10442:	bl	b344 <Panel_getSelectedIndex@@Base>
   10446:	mov	r7, r0
   10448:	mov	r5, r0
   1044a:	b.n	10458 <IncSet_handleKey@@Base+0x174>
   1044c:	blx	r6
   1044e:	mov	r1, r8
   10450:	blx	66a4 <strcasestr@plt>
   10454:	cmp	r0, #0
   10456:	bne.n	1053e <IncSet_handleKey@@Base+0x25a>
   10458:	adds	r5, #1
   1045a:	mov	r0, r4
   1045c:	cmp	r9, r5
   1045e:	it	eq
   10460:	moveq	r5, #0
   10462:	cmp	r5, r7
   10464:	mov	r1, r5
   10466:	bne.n	1044c <IncSet_handleKey@@Base+0x168>
   10468:	mov.w	fp, #0
   1046c:	mov	r0, fp
   1046e:	add	sp, #20
   10470:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10474:	cmp.w	sl, #410	; 0x19a
   10478:	beq.n	10552 <IncSet_handleKey@@Base+0x26e>
   1047a:	subs	r3, r7, #0
   1047c:	ldrb.w	fp, [r8, #52]	; 0x34
   10480:	it	ne
   10482:	movne	r3, #1
   10484:	str	r3, [sp, #8]
   10486:	cmp.w	fp, #0
   1048a:	beq.n	104c8 <IncSet_handleKey@@Base+0x1e4>
   1048c:	ldr	r2, [r4, #56]	; 0x38
   1048e:	movs	r1, #0
   10490:	ldr	r0, [r5, #116]	; 0x74
   10492:	str	r1, [r5, #112]	; 0x70
   10494:	str	r2, [r4, #52]	; 0x34
   10496:	bl	9420 <FunctionBar_draw@@Base>
   1049a:	b.n	103a6 <IncSet_handleKey@@Base+0xc2>
   1049c:	cmp.w	sl, #127	; 0x7f
   104a0:	beq.n	10408 <IncSet_handleKey@@Base+0x124>
   104a2:	subs	r2, r7, #0
   104a4:	ldrb.w	fp, [r8, #52]	; 0x34
   104a8:	it	ne
   104aa:	movne	r2, #1
   104ac:	str	r2, [sp, #8]
   104ae:	cmp.w	fp, #0
   104b2:	beq.n	104c8 <IncSet_handleKey@@Base+0x1e4>
   104b4:	cmp.w	sl, #27
   104b8:	bne.n	1048c <IncSet_handleKey@@Base+0x1a8>
   104ba:	strb.w	r3, [r5, #120]	; 0x78
   104be:	str.w	r3, [r8, #44]	; 0x2c
   104c2:	strb.w	r3, [r8]
   104c6:	b.n	1048c <IncSet_handleKey@@Base+0x1a8>
   104c8:	movs	r3, #0
   104ca:	str.w	r3, [r8, #44]	; 0x2c
   104ce:	mov	fp, r3
   104d0:	str	r3, [sp, #8]
   104d2:	strb.w	r3, [r8]
   104d6:	b.n	1048c <IncSet_handleKey@@Base+0x1a8>
   104d8:	ldr	r3, [sp, #4]
   104da:	mov	r1, r8
   104dc:	ldr	r2, [pc, #160]	; (10580 <IncSet_handleKey@@Base+0x29c>)
   104de:	ldr.w	r0, [r8, #48]	; 0x30
   104e2:	ldr	r2, [r3, r2]
   104e4:	ldr	r2, [r2, #0]
   104e6:	ldr	r2, [r2, #16]
   104e8:	bl	92c4 <FunctionBar_drawAttr@@Base>
   104ec:	movs	r2, #0
   104ee:	b.n	103a2 <IncSet_handleKey@@Base+0xbe>
   104f0:	ldr.w	r9, [r7, #16]
   104f4:	add.w	fp, r5, #56	; 0x38
   104f8:	cmp.w	r9, #0
   104fc:	ble.w	103f4 <IncSet_handleKey@@Base+0x110>
   10500:	mov.w	sl, #0
   10504:	mov	r6, sl
   10506:	ldr	r3, [r7, #0]
   10508:	mov	r1, fp
   1050a:	ldr.w	r5, [r3, r6, lsl #2]
   1050e:	adds	r6, #1
   10510:	ldr	r0, [r5, #4]
   10512:	blx	66a4 <strcasestr@plt>
   10516:	mov	r1, r5
   10518:	mov	r3, r0
   1051a:	mov	r0, r4
   1051c:	cbz	r3, 1052e <IncSet_handleKey@@Base+0x24a>
   1051e:	bl	b294 <Panel_add@@Base>
   10522:	cmp	r8, r5
   10524:	beq.n	10534 <IncSet_handleKey@@Base+0x250>
   10526:	ldr.w	r9, [r7, #16]
   1052a:	add.w	sl, sl, #1
   1052e:	cmp	r6, r9
   10530:	blt.n	10506 <IncSet_handleKey@@Base+0x222>
   10532:	b.n	103f4 <IncSet_handleKey@@Base+0x110>
   10534:	mov	r1, sl
   10536:	mov	r0, r4
   10538:	bl	b350 <Panel_setSelected@@Base>
   1053c:	b.n	10526 <IncSet_handleKey@@Base+0x242>
   1053e:	mov	r1, r5
   10540:	mov	r0, r4
   10542:	bl	b350 <Panel_setSelected@@Base>
   10546:	b.n	10468 <IncSet_handleKey@@Base+0x184>
   10548:	cmp	r2, #1
   1054a:	it	eq
   1054c:	strbeq.w	r2, [r5, #120]	; 0x78
   10550:	b.n	10360 <IncSet_handleKey@@Base+0x7c>
   10552:	ldr	r3, [r4, #8]
   10554:	mov	r0, r4
   10556:	ldr	r2, [pc, #44]	; (10584 <IncSet_handleKey@@Base+0x2a0>)
   10558:	ldr	r1, [pc, #44]	; (10588 <IncSet_handleKey@@Base+0x2a4>)
   1055a:	str	r3, [sp, #12]
   1055c:	ldr	r3, [sp, #4]
   1055e:	ldr	r2, [r3, r2]
   10560:	ldr	r1, [r3, r1]
   10562:	movs	r3, #0
   10564:	str	r3, [sp, #8]
   10566:	ldr	r2, [r2, #0]
   10568:	ldr	r3, [sp, #12]
   1056a:	ldr	r1, [r1, #0]
   1056c:	subs	r2, r2, r3
   1056e:	subs	r2, #1
   10570:	bl	b260 <Panel_resize@@Base>
   10574:	ldr.w	fp, [sp, #8]
   10578:	b.n	10360 <IncSet_handleKey@@Base+0x7c>
   1057a:	nop
   1057c:	ldr	r2, [sp, #120]	; 0x78
   1057e:	movs	r1, r0
   10580:	lsls	r0, r6, #9
   10582:	movs	r0, r0
   10584:	lsls	r0, r2, #11
   10586:	movs	r0, r0
   10588:	lsls	r0, r7, #10
	...

0001058c <IncSet_getListItemValue@@Base>:
   1058c:	push	{r3, lr}
   1058e:	bl	b2c4 <Panel_get@@Base>
   10592:	cbz	r0, 10598 <IncSet_getListItemValue@@Base+0xc>
   10594:	ldr	r0, [r0, #4]
   10596:	pop	{r3, pc}
   10598:	ldr	r0, [pc, #4]	; (105a0 <IncSet_getListItemValue@@Base+0x14>)
   1059a:	add	r0, pc
   1059c:	pop	{r3, pc}
   1059e:	nop
   105a0:	str	r6, [r0, #32]
	...

000105a4 <IncSet_activate@@Base>:
   105a4:	push	{r3, r4, r5, lr}
   105a6:	movs	r3, #56	; 0x38
   105a8:	mla	r1, r3, r1, r0
   105ac:	mov	r4, r0
   105ae:	mov	r5, r2
   105b0:	str	r1, [r0, #112]	; 0x70
   105b2:	ldr	r0, [r1, #48]	; 0x30
   105b4:	bl	9420 <FunctionBar_draw@@Base>
   105b8:	ldr	r3, [r4, #112]	; 0x70
   105ba:	ldr	r3, [r3, #48]	; 0x30
   105bc:	str	r3, [r5, #52]	; 0x34
   105be:	pop	{r3, r4, r5, pc}

000105c0 <IncSet_drawBar@@Base>:
   105c0:	ldr	r1, [r0, #112]	; 0x70
   105c2:	cbz	r1, 105ca <IncSet_drawBar@@Base+0xa>
   105c4:	ldr	r0, [r1, #48]	; 0x30
   105c6:	b.w	9420 <FunctionBar_draw@@Base>
   105ca:	ldr	r0, [r0, #116]	; 0x74
   105cc:	b.w	9420 <FunctionBar_draw@@Base>

000105d0 <IncSet_synthesizeEvent@@Base>:
   105d0:	ldr	r3, [r0, #112]	; 0x70
   105d2:	cbz	r3, 105da <IncSet_synthesizeEvent@@Base+0xa>
   105d4:	ldr	r0, [r3, #48]	; 0x30
   105d6:	b.w	9438 <FunctionBar_synthesizeEvent@@Base>
   105da:	ldr	r0, [r0, #116]	; 0x74
   105dc:	b.w	9438 <FunctionBar_synthesizeEvent@@Base>
   105e0:	ldr	r3, [r0, #0]
   105e2:	movs	r1, #1
   105e4:	push	{r4}
   105e6:	movs	r2, #0
   105e8:	movs	r4, #48	; 0x30
   105ea:	movs	r0, #77	; 0x4d
   105ec:	strd	r1, r4, [r3, #48]	; 0x30
   105f0:	ldr.w	r4, [sp], #4
   105f4:	strb.w	r2, [r3, #58]	; 0x3a
   105f8:	bx	lr
   105fa:	nop
   105fc:	ldr	r3, [r0, #0]
   105fe:	movs	r1, #1
   10600:	push	{r4}
   10602:	movs	r2, #0
   10604:	movs	r4, #47	; 0x2f
   10606:	movs	r0, #77	; 0x4d
   10608:	strd	r1, r4, [r3, #48]	; 0x30
   1060c:	ldr.w	r4, [sp], #4
   10610:	strb.w	r2, [r3, #58]	; 0x3a
   10614:	bx	lr
   10616:	nop
   10618:	ldr	r3, [r0, #0]
   1061a:	movs	r1, #1
   1061c:	push	{r4}
   1061e:	movs	r2, #0
   10620:	movs	r4, #50	; 0x32
   10622:	movs	r0, #77	; 0x4d
   10624:	strd	r1, r4, [r3, #48]	; 0x30
   10628:	ldr.w	r4, [sp], #4
   1062c:	strb.w	r2, [r3, #58]	; 0x3a
   10630:	bx	lr
   10632:	nop
   10634:	mov	r3, r0
   10636:	movs	r0, #7
   10638:	ldr	r2, [r3, #0]
   1063a:	ldrb.w	r3, [r2, #63]	; 0x3f
   1063e:	eor.w	r3, r3, #1
   10642:	strb.w	r3, [r2, #63]	; 0x3f
   10646:	bx	lr
   10648:	mov	r3, r0
   1064a:	movs	r0, #7
   1064c:	ldr	r2, [r3, #0]
   1064e:	ldrb.w	r3, [r2, #64]	; 0x40
   10652:	eor.w	r3, r3, #1
   10656:	strb.w	r3, [r2, #64]	; 0x40
   1065a:	strb.w	r3, [r2, #60]	; 0x3c
   1065e:	bx	lr
   10660:	mov	r3, r0
   10662:	movs	r0, #5
   10664:	ldr	r2, [r3, #0]
   10666:	ldrb.w	r3, [r2, #59]	; 0x3b
   1066a:	eor.w	r3, r3, #1
   1066e:	strb.w	r3, [r2, #59]	; 0x3b
   10672:	bx	lr
   10674:	movs	r0, #16
   10676:	bx	lr
   10678:	push	{r3, lr}
   1067a:	ldr	r0, [r0, #12]
   1067c:	bl	b2f8 <Panel_getSelected@@Base>
   10680:	mov	r3, r0
   10682:	cbz	r0, 10692 <IncSet_synthesizeEvent@@Base+0xc2>
   10684:	ldrb.w	r2, [r0, #47]	; 0x2f
   10688:	movs	r0, #3
   1068a:	eor.w	r2, r2, #1
   1068e:	strb.w	r2, [r3, #47]	; 0x2f
   10692:	pop	{r3, pc}

00010694 <Action_follow@@Base>:
   10694:	push	{r4, r5, r6, lr}
   10696:	mov	r4, r0
   10698:	ldrd	r6, r0, [r0, #8]
   1069c:	bl	8d58 <MainPanel_selectedPid@@Base>
   106a0:	ldr	r5, [pc, #24]	; (106bc <Action_follow@@Base+0x28>)
   106a2:	ldr	r3, [pc, #28]	; (106c0 <Action_follow@@Base+0x2c>)
   106a4:	add	r5, pc
   106a6:	mov	r2, r0
   106a8:	ldr	r0, [r4, #12]
   106aa:	str	r2, [r6, #24]
   106ac:	ldr	r3, [r5, r3]
   106ae:	ldr	r3, [r3, #0]
   106b0:	ldr	r1, [r3, #32]
   106b2:	bl	b218 <Panel_setSelectionColor@@Base>
   106b6:	movs	r0, #8
   106b8:	pop	{r4, r5, r6, pc}
   106ba:	nop
   106bc:	str	r6, [sp, #416]	; 0x1a0
   106be:	movs	r1, r0
   106c0:	lsls	r0, r6, #9
   106c2:	movs	r0, r0
   106c4:	push	{r3, lr}
   106c6:	ldr	r3, [pc, #16]	; (106d8 <Action_follow@@Base+0x44>)
   106c8:	ldr	r2, [pc, #16]	; (106dc <Action_follow@@Base+0x48>)
   106ca:	add	r3, pc
   106cc:	ldr	r3, [r3, r2]
   106ce:	ldr	r0, [r3, #0]
   106d0:	blx	6c20 <wclear@plt>
   106d4:	movs	r0, #33	; 0x21
   106d6:	pop	{r3, pc}
   106d8:	str	r6, [sp, #264]	; 0x108
   106da:	movs	r1, r0
   106dc:	lsls	r4, r5, #9
   106de:	movs	r0, r0
   106e0:	push	{r3, r4, r5, lr}
   106e2:	mov	r5, r0
   106e4:	ldr	r4, [pc, #40]	; (10710 <Action_follow@@Base+0x7c>)
   106e6:	ldr	r3, [pc, #44]	; (10714 <Action_follow@@Base+0x80>)
   106e8:	add	r4, pc
   106ea:	ldr	r3, [r4, r3]
   106ec:	ldr	r0, [r3, #0]
   106ee:	blx	6c20 <wclear@plt>
   106f2:	ldr	r2, [pc, #36]	; (10718 <Action_follow@@Base+0x84>)
   106f4:	ldr	r0, [r5, #12]
   106f6:	ldr	r3, [pc, #36]	; (1071c <Action_follow@@Base+0x88>)
   106f8:	ldr	r2, [r4, r2]
   106fa:	ldr	r1, [r0, #8]
   106fc:	ldr	r3, [r4, r3]
   106fe:	ldr	r2, [r2, #0]
   10700:	subs	r2, r2, r1
   10702:	ldr	r1, [r3, #0]
   10704:	subs	r2, #1
   10706:	bl	b260 <Panel_resize@@Base>
   1070a:	movs	r0, #32
   1070c:	pop	{r3, r4, r5, pc}
   1070e:	nop
   10710:	str	r6, [sp, #144]	; 0x90
   10712:	movs	r1, r0
   10714:	lsls	r4, r5, #9
   10716:	movs	r0, r0
   10718:	lsls	r0, r2, #11
   1071a:	movs	r0, r0
   1071c:	lsls	r0, r7, #10
   1071e:	movs	r0, r0
   10720:	push	{r3, r4, r5, lr}
   10722:	ldr	r4, [pc, #44]	; (10750 <Action_follow@@Base+0xbc>)
   10724:	ldr	r0, [r0, #12]
   10726:	add	r4, pc
   10728:	bl	b2f8 <Panel_getSelected@@Base>
   1072c:	cbz	r0, 1074e <Action_follow@@Base+0xba>
   1072e:	bl	1191c <EnvScreen_new@@Base>
   10732:	mov	r5, r0
   10734:	bl	11b64 <InfoScreen_run@@Base>
   10738:	mov	r0, r5
   1073a:	bl	11878 <EnvScreen_delete@@Base>
   1073e:	ldr	r3, [pc, #20]	; (10754 <Action_follow@@Base+0xc0>)
   10740:	ldr	r3, [r4, r3]
   10742:	ldr	r0, [r3, #0]
   10744:	blx	6c20 <wclear@plt>
   10748:	bl	8664 <CRT_enableDelay@@Base>
   1074c:	movs	r0, #33	; 0x21
   1074e:	pop	{r3, r4, r5, pc}
   10750:	str	r5, [sp, #920]	; 0x398
   10752:	movs	r1, r0
   10754:	lsls	r4, r5, #9
   10756:	movs	r0, r0
   10758:	push	{r4, r5, r6, lr}
   1075a:	movs	r4, #0
   1075c:	mov	r5, r0
   1075e:	mov	r6, r4
   10760:	b.n	1076c <Action_follow@@Base+0xd8>
   10762:	ldr	r0, [r5, #12]
   10764:	bl	b2c4 <Panel_get@@Base>
   10768:	strb.w	r6, [r0, #46]	; 0x2e
   1076c:	ldr	r0, [r5, #12]
   1076e:	bl	b348 <Panel_size@@Base>
   10772:	mov	r1, r4
   10774:	cmp	r0, r4
   10776:	add.w	r4, r4, #1
   1077a:	bgt.n	10762 <Action_follow@@Base+0xce>
   1077c:	movs	r0, #1
   1077e:	pop	{r4, r5, r6, pc}
   10780:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10784:	ldr.w	r8, [pc, #1660]	; 10e04 <Action_follow@@Base+0x770>
   10788:	ldr.w	r3, [pc, #1660]	; 10e08 <Action_follow@@Base+0x774>
   1078c:	add	r8, pc
   1078e:	ldr.w	r9, [r0]
   10792:	ldr.w	r4, [r8, r3]
   10796:	ldr	r0, [r4, #0]
   10798:	blx	6c20 <wclear@plt>
   1079c:	ldr.w	r3, [pc, #1644]	; 10e0c <Action_follow@@Base+0x778>
   107a0:	ldr	r0, [r4, #0]
   107a2:	ldr.w	r6, [r8, r3]
   107a6:	ldr	r3, [r6, #0]
   107a8:	ldr.w	r1, [r3, #184]	; 0xb8
   107ac:	blx	6c88 <wattrset@plt+0x4>
   107b0:	ldr.w	r3, [pc, #1628]	; 10e10 <Action_follow@@Base+0x77c>
   107b4:	ldr.w	r7, [r8, r3]
   107b8:	ldr	r3, [r7, #0]
   107ba:	cmp	r3, #1
   107bc:	it	gt
   107be:	movgt	r5, #0
   107c0:	ble.n	107ec <Action_follow@@Base+0x158>
   107c2:	mov	r1, r5
   107c4:	ldr	r0, [r4, #0]
   107c6:	movs	r2, #0
   107c8:	adds	r5, #1
   107ca:	blx	6668 <wmove@plt>
   107ce:	ldr.w	r3, [pc, #1604]	; 10e14 <Action_follow@@Base+0x780>
   107d2:	movs	r1, #32
   107d4:	adds	r0, #1
   107d6:	beq.n	107e4 <Action_follow@@Base+0x150>
   107d8:	ldr.w	r3, [r8, r3]
   107dc:	ldr	r0, [r4, #0]
   107de:	ldr	r2, [r3, #0]
   107e0:	blx	6b9c <whline@plt>
   107e4:	ldr	r3, [r7, #0]
   107e6:	subs	r3, #1
   107e8:	cmp	r3, r5
   107ea:	bgt.n	107c2 <Action_follow@@Base+0x12e>
   107ec:	movs	r2, #0
   107ee:	ldr	r0, [r4, #0]
   107f0:	mov	r1, r2
   107f2:	blx	6668 <wmove@plt>
   107f6:	adds	r0, #1
   107f8:	beq.n	1080a <Action_follow@@Base+0x176>
   107fa:	ldr.w	r1, [pc, #1564]	; 10e18 <Action_follow@@Base+0x784>
   107fe:	mov.w	r2, #4294967295	; 0xffffffff
   10802:	ldr	r0, [r4, #0]
   10804:	add	r1, pc
   10806:	blx	677c <waddnstr@plt>
   1080a:	ldr	r0, [r4, #0]
   1080c:	movs	r2, #0
   1080e:	movs	r1, #1
   10810:	blx	6668 <wmove@plt>
   10814:	adds	r0, #1
   10816:	beq.n	10828 <Action_follow@@Base+0x194>
   10818:	ldr.w	r1, [pc, #1536]	; 10e1c <Action_follow@@Base+0x788>
   1081c:	mov.w	r2, #4294967295	; 0xffffffff
   10820:	ldr	r0, [r4, #0]
   10822:	add	r1, pc
   10824:	blx	677c <waddnstr@plt>
   10828:	ldr	r3, [r6, #0]
   1082a:	ldr	r0, [r4, #0]
   1082c:	ldr	r1, [r3, #4]
   1082e:	blx	6c88 <wattrset@plt+0x4>
   10832:	ldr	r0, [r4, #0]
   10834:	movs	r2, #0
   10836:	movs	r1, #3
   10838:	blx	6668 <wmove@plt>
   1083c:	adds	r0, #1
   1083e:	beq.n	10850 <Action_follow@@Base+0x1bc>
   10840:	ldr.w	r1, [pc, #1500]	; 10e20 <Action_follow@@Base+0x78c>
   10844:	mov.w	r2, #4294967295	; 0xffffffff
   10848:	ldr	r0, [r4, #0]
   1084a:	add	r1, pc
   1084c:	blx	677c <waddnstr@plt>
   10850:	ldr	r3, [r6, #0]
   10852:	ldr	r0, [r4, #0]
   10854:	ldr	r1, [r3, #120]	; 0x78
   10856:	blx	6c88 <wattrset@plt+0x4>
   1085a:	ldr.w	r1, [pc, #1480]	; 10e24 <Action_follow@@Base+0x790>
   1085e:	ldr	r0, [r4, #0]
   10860:	mov.w	r2, #4294967295	; 0xffffffff
   10864:	add	r1, pc
   10866:	blx	677c <waddnstr@plt>
   1086a:	ldrb.w	r3, [r9, #57]	; 0x39
   1086e:	cmp	r3, #0
   10870:	beq.w	10d3a <Action_follow@@Base+0x6a6>
   10874:	ldr	r3, [r6, #0]
   10876:	ldr.w	r5, [pc, #1456]	; 10e28 <Action_follow@@Base+0x794>
   1087a:	ldr	r0, [r4, #0]
   1087c:	ldr.w	r1, [r3, #196]	; 0xc4
   10880:	add	r5, pc
   10882:	blx	6c88 <wattrset@plt+0x4>
   10886:	ldr.w	r1, [pc, #1444]	; 10e2c <Action_follow@@Base+0x798>
   1088a:	mov.w	r2, #4294967295	; 0xffffffff
   1088e:	ldr	r0, [r4, #0]
   10890:	add	r1, pc
   10892:	blx	677c <waddnstr@plt>
   10896:	mov.w	r2, #4294967295	; 0xffffffff
   1089a:	mov	r1, r5
   1089c:	ldr	r0, [r4, #0]
   1089e:	blx	677c <waddnstr@plt>
   108a2:	ldr	r3, [r6, #0]
   108a4:	ldr	r0, [r4, #0]
   108a6:	ldr.w	r1, [r3, #200]	; 0xc8
   108aa:	blx	6c88 <wattrset@plt+0x4>
   108ae:	ldr.w	r1, [pc, #1408]	; 10e30 <Action_follow@@Base+0x79c>
   108b2:	mov.w	r2, #4294967295	; 0xffffffff
   108b6:	ldr	r0, [r4, #0]
   108b8:	add	r1, pc
   108ba:	blx	677c <waddnstr@plt>
   108be:	mov.w	r2, #4294967295	; 0xffffffff
   108c2:	mov	r1, r5
   108c4:	ldr	r0, [r4, #0]
   108c6:	blx	677c <waddnstr@plt>
   108ca:	ldr	r3, [r6, #0]
   108cc:	ldr	r0, [r4, #0]
   108ce:	ldr.w	r1, [r3, #204]	; 0xcc
   108d2:	blx	6c88 <wattrset@plt+0x4>
   108d6:	ldr.w	r1, [pc, #1372]	; 10e34 <Action_follow@@Base+0x7a0>
   108da:	mov.w	r2, #4294967295	; 0xffffffff
   108de:	ldr	r0, [r4, #0]
   108e0:	add	r1, pc
   108e2:	blx	677c <waddnstr@plt>
   108e6:	mov.w	r2, #4294967295	; 0xffffffff
   108ea:	mov	r1, r5
   108ec:	ldr	r0, [r4, #0]
   108ee:	blx	677c <waddnstr@plt>
   108f2:	ldr	r3, [r6, #0]
   108f4:	ldr	r0, [r4, #0]
   108f6:	ldr.w	r1, [r3, #212]	; 0xd4
   108fa:	blx	6c88 <wattrset@plt+0x4>
   108fe:	ldr.w	r1, [pc, #1336]	; 10e38 <Action_follow@@Base+0x7a4>
   10902:	mov.w	r2, #4294967295	; 0xffffffff
   10906:	ldr	r0, [r4, #0]
   10908:	add	r1, pc
   1090a:	blx	677c <waddnstr@plt>
   1090e:	mov.w	r2, #4294967295	; 0xffffffff
   10912:	mov	r1, r5
   10914:	ldr	r0, [r4, #0]
   10916:	blx	677c <waddnstr@plt>
   1091a:	ldr	r3, [r6, #0]
   1091c:	ldr	r0, [r4, #0]
   1091e:	ldr.w	r1, [r3, #216]	; 0xd8
   10922:	blx	6c88 <wattrset@plt+0x4>
   10926:	ldr.w	r1, [pc, #1300]	; 10e3c <Action_follow@@Base+0x7a8>
   1092a:	mov.w	r2, #4294967295	; 0xffffffff
   1092e:	ldr	r0, [r4, #0]
   10930:	add	r1, pc
   10932:	blx	677c <waddnstr@plt>
   10936:	mov.w	r2, #4294967295	; 0xffffffff
   1093a:	mov	r1, r5
   1093c:	ldr	r0, [r4, #0]
   1093e:	blx	677c <waddnstr@plt>
   10942:	ldr	r3, [r6, #0]
   10944:	ldr	r0, [r4, #0]
   10946:	ldr.w	r1, [r3, #220]	; 0xdc
   1094a:	blx	6c88 <wattrset@plt+0x4>
   1094e:	ldr.w	r1, [pc, #1264]	; 10e40 <Action_follow@@Base+0x7ac>
   10952:	mov.w	r2, #4294967295	; 0xffffffff
   10956:	ldr	r0, [r4, #0]
   10958:	add	r1, pc
   1095a:	blx	677c <waddnstr@plt>
   1095e:	mov.w	r2, #4294967295	; 0xffffffff
   10962:	mov	r1, r5
   10964:	ldr	r0, [r4, #0]
   10966:	blx	677c <waddnstr@plt>
   1096a:	ldr	r3, [r6, #0]
   1096c:	ldr	r0, [r4, #0]
   1096e:	ldr.w	r1, [r3, #224]	; 0xe0
   10972:	blx	6c88 <wattrset@plt+0x4>
   10976:	ldr.w	r1, [pc, #1228]	; 10e44 <Action_follow@@Base+0x7b0>
   1097a:	mov.w	r2, #4294967295	; 0xffffffff
   1097e:	ldr	r0, [r4, #0]
   10980:	add	r1, pc
   10982:	blx	677c <waddnstr@plt>
   10986:	mov.w	r2, #4294967295	; 0xffffffff
   1098a:	mov	r1, r5
   1098c:	ldr	r0, [r4, #0]
   1098e:	blx	677c <waddnstr@plt>
   10992:	ldr	r3, [r6, #0]
   10994:	ldr	r0, [r4, #0]
   10996:	ldr.w	r1, [r3, #208]	; 0xd0
   1099a:	blx	6c88 <wattrset@plt+0x4>
   1099e:	ldr.w	r1, [pc, #1192]	; 10e48 <Action_follow@@Base+0x7b4>
   109a2:	mov.w	r2, #4294967295	; 0xffffffff
   109a6:	ldr	r0, [r4, #0]
   109a8:	add	r1, pc
   109aa:	blx	677c <waddnstr@plt>
   109ae:	ldr	r3, [r6, #0]
   109b0:	ldr	r0, [r4, #0]
   109b2:	ldr	r1, [r3, #124]	; 0x7c
   109b4:	blx	6c88 <wattrset@plt+0x4>
   109b8:	ldr.w	r1, [pc, #1168]	; 10e4c <Action_follow@@Base+0x7b8>
   109bc:	ldr	r0, [r4, #0]
   109be:	mov.w	r2, #4294967295	; 0xffffffff
   109c2:	add	r1, pc
   109c4:	blx	677c <waddnstr@plt>
   109c8:	ldr	r3, [r6, #0]
   109ca:	ldr	r0, [r4, #0]
   109cc:	ldr	r1, [r3, #120]	; 0x78
   109ce:	blx	6c88 <wattrset@plt+0x4>
   109d2:	ldr.w	r1, [pc, #1148]	; 10e50 <Action_follow@@Base+0x7bc>
   109d6:	mov.w	r2, #4294967295	; 0xffffffff
   109da:	ldr	r0, [r4, #0]
   109dc:	add	r1, pc
   109de:	blx	677c <waddnstr@plt>
   109e2:	ldr	r3, [r6, #0]
   109e4:	ldr	r0, [r4, #0]
   109e6:	ldr	r1, [r3, #4]
   109e8:	blx	6c88 <wattrset@plt+0x4>
   109ec:	ldr	r0, [r4, #0]
   109ee:	movs	r2, #0
   109f0:	movs	r1, #4
   109f2:	blx	6668 <wmove@plt>
   109f6:	adds	r0, #1
   109f8:	beq.n	10a0a <Action_follow@@Base+0x376>
   109fa:	ldr.w	r1, [pc, #1112]	; 10e54 <Action_follow@@Base+0x7c0>
   109fe:	mov.w	r2, #4294967295	; 0xffffffff
   10a02:	ldr	r0, [r4, #0]
   10a04:	add	r1, pc
   10a06:	blx	677c <waddnstr@plt>
   10a0a:	ldr	r3, [r6, #0]
   10a0c:	ldr	r0, [r4, #0]
   10a0e:	ldr.w	r5, [pc, #1096]	; 10e58 <Action_follow@@Base+0x7c4>
   10a12:	ldr	r1, [r3, #120]	; 0x78
   10a14:	blx	6c88 <wattrset@plt+0x4>
   10a18:	ldr.w	r1, [pc, #1088]	; 10e5c <Action_follow@@Base+0x7c8>
   10a1c:	mov.w	r2, #4294967295	; 0xffffffff
   10a20:	ldr	r0, [r4, #0]
   10a22:	add	r1, pc
   10a24:	add	r5, pc
   10a26:	blx	677c <waddnstr@plt>
   10a2a:	ldr	r3, [r6, #0]
   10a2c:	ldr	r0, [r4, #0]
   10a2e:	ldr.w	r1, [r3, #136]	; 0x88
   10a32:	blx	6c88 <wattrset@plt+0x4>
   10a36:	ldr.w	r1, [pc, #1064]	; 10e60 <Action_follow@@Base+0x7cc>
   10a3a:	mov.w	r2, #4294967295	; 0xffffffff
   10a3e:	ldr	r0, [r4, #0]
   10a40:	add	r1, pc
   10a42:	blx	677c <waddnstr@plt>
   10a46:	mov.w	r2, #4294967295	; 0xffffffff
   10a4a:	mov	r1, r5
   10a4c:	ldr	r0, [r4, #0]
   10a4e:	blx	677c <waddnstr@plt>
   10a52:	ldr	r3, [r6, #0]
   10a54:	ldr	r0, [r4, #0]
   10a56:	ldr.w	r1, [r3, #144]	; 0x90
   10a5a:	blx	6c88 <wattrset@plt+0x4>
   10a5e:	ldr.w	r1, [pc, #1028]	; 10e64 <Action_follow@@Base+0x7d0>
   10a62:	mov.w	r2, #4294967295	; 0xffffffff
   10a66:	ldr	r0, [r4, #0]
   10a68:	add	r1, pc
   10a6a:	blx	677c <waddnstr@plt>
   10a6e:	mov.w	r2, #4294967295	; 0xffffffff
   10a72:	mov	r1, r5
   10a74:	ldr	r0, [r4, #0]
   10a76:	blx	677c <waddnstr@plt>
   10a7a:	ldr	r3, [r6, #0]
   10a7c:	ldr	r0, [r4, #0]
   10a7e:	ldr.w	r1, [r3, #148]	; 0x94
   10a82:	blx	6c88 <wattrset@plt+0x4>
   10a86:	ldr	r1, [pc, #992]	; (10e68 <Action_follow@@Base+0x7d4>)
   10a88:	mov.w	r2, #4294967295	; 0xffffffff
   10a8c:	ldr	r0, [r4, #0]
   10a8e:	add	r1, pc
   10a90:	blx	677c <waddnstr@plt>
   10a94:	ldr	r3, [r6, #0]
   10a96:	ldr	r0, [r4, #0]
   10a98:	ldr	r1, [r3, #124]	; 0x7c
   10a9a:	blx	6c88 <wattrset@plt+0x4>
   10a9e:	ldr	r1, [pc, #972]	; (10e6c <Action_follow@@Base+0x7d8>)
   10aa0:	mov.w	r2, #4294967295	; 0xffffffff
   10aa4:	ldr	r0, [r4, #0]
   10aa6:	add	r1, pc
   10aa8:	blx	677c <waddnstr@plt>
   10aac:	ldr	r3, [r6, #0]
   10aae:	ldr	r0, [r4, #0]
   10ab0:	ldr	r1, [r3, #120]	; 0x78
   10ab2:	blx	6c88 <wattrset@plt+0x4>
   10ab6:	ldr	r1, [pc, #952]	; (10e70 <Action_follow@@Base+0x7dc>)
   10ab8:	mov.w	r2, #4294967295	; 0xffffffff
   10abc:	ldr	r0, [r4, #0]
   10abe:	add	r1, pc
   10ac0:	blx	677c <waddnstr@plt>
   10ac4:	ldr	r3, [r6, #0]
   10ac6:	ldr	r0, [r4, #0]
   10ac8:	ldr	r1, [r3, #4]
   10aca:	blx	6c88 <wattrset@plt+0x4>
   10ace:	ldr	r0, [r4, #0]
   10ad0:	movs	r2, #0
   10ad2:	movs	r1, #5
   10ad4:	blx	6668 <wmove@plt>
   10ad8:	adds	r0, #1
   10ada:	beq.n	10aea <Action_follow@@Base+0x456>
   10adc:	ldr	r1, [pc, #916]	; (10e74 <Action_follow@@Base+0x7e0>)
   10ade:	mov.w	r2, #4294967295	; 0xffffffff
   10ae2:	ldr	r0, [r4, #0]
   10ae4:	add	r1, pc
   10ae6:	blx	677c <waddnstr@plt>
   10aea:	ldr	r3, [r6, #0]
   10aec:	ldr	r0, [r4, #0]
   10aee:	ldr	r1, [r3, #120]	; 0x78
   10af0:	blx	6c88 <wattrset@plt+0x4>
   10af4:	ldr	r1, [pc, #896]	; (10e78 <Action_follow@@Base+0x7e4>)
   10af6:	mov.w	r2, #4294967295	; 0xffffffff
   10afa:	ldr	r0, [r4, #0]
   10afc:	add	r1, pc
   10afe:	blx	677c <waddnstr@plt>
   10b02:	ldr	r3, [r6, #0]
   10b04:	ldr	r0, [r4, #0]
   10b06:	ldr	r1, [r3, #68]	; 0x44
   10b08:	blx	6c88 <wattrset@plt+0x4>
   10b0c:	ldr	r1, [pc, #876]	; (10e7c <Action_follow@@Base+0x7e8>)
   10b0e:	mov.w	r2, #4294967295	; 0xffffffff
   10b12:	ldr	r0, [r4, #0]
   10b14:	add	r1, pc
   10b16:	blx	677c <waddnstr@plt>
   10b1a:	ldr	r3, [r6, #0]
   10b1c:	ldr	r0, [r4, #0]
   10b1e:	ldr	r1, [r3, #124]	; 0x7c
   10b20:	blx	6c88 <wattrset@plt+0x4>
   10b24:	ldr	r1, [pc, #856]	; (10e80 <Action_follow@@Base+0x7ec>)
   10b26:	mov.w	r2, #4294967295	; 0xffffffff
   10b2a:	ldr	r0, [r4, #0]
   10b2c:	add	r1, pc
   10b2e:	blx	677c <waddnstr@plt>
   10b32:	ldr	r3, [r6, #0]
   10b34:	ldr	r0, [r4, #0]
   10b36:	ldr	r1, [r3, #120]	; 0x78
   10b38:	blx	6c88 <wattrset@plt+0x4>
   10b3c:	ldr	r1, [pc, #836]	; (10e84 <Action_follow@@Base+0x7f0>)
   10b3e:	mov.w	r2, #4294967295	; 0xffffffff
   10b42:	ldr	r0, [r4, #0]
   10b44:	add	r1, pc
   10b46:	blx	677c <waddnstr@plt>
   10b4a:	ldr	r3, [r6, #0]
   10b4c:	ldr	r0, [r4, #0]
   10b4e:	ldr	r1, [r3, #4]
   10b50:	blx	6c88 <wattrset@plt+0x4>
   10b54:	ldr	r0, [r4, #0]
   10b56:	movs	r2, #0
   10b58:	movs	r1, #6
   10b5a:	blx	6668 <wmove@plt>
   10b5e:	adds	r0, #1
   10b60:	beq.n	10b70 <Action_follow@@Base+0x4dc>
   10b62:	ldr	r1, [pc, #804]	; (10e88 <Action_follow@@Base+0x7f4>)
   10b64:	mov.w	r2, #4294967295	; 0xffffffff
   10b68:	ldr	r0, [r4, #0]
   10b6a:	add	r1, pc
   10b6c:	blx	677c <waddnstr@plt>
   10b70:	ldr	r3, [pc, #792]	; (10e8c <Action_follow@@Base+0x7f8>)
   10b72:	ldr	r0, [r4, #0]
   10b74:	ldr.w	r3, [r8, r3]
   10b78:	ldr	r3, [r3, #0]
   10b7a:	cmp	r3, #1
   10b7c:	beq.w	10de4 <Action_follow@@Base+0x750>
   10b80:	movs	r2, #0
   10b82:	movs	r1, #8
   10b84:	blx	6668 <wmove@plt>
   10b88:	adds	r0, #1
   10b8a:	beq.n	10b9a <Action_follow@@Base+0x506>
   10b8c:	ldr	r1, [pc, #768]	; (10e90 <Action_follow@@Base+0x7fc>)
   10b8e:	mov.w	r2, #4294967295	; 0xffffffff
   10b92:	ldr	r0, [r4, #0]
   10b94:	add	r1, pc
   10b96:	blx	677c <waddnstr@plt>
   10b9a:	ldr	r7, [pc, #760]	; (10e94 <Action_follow@@Base+0x800>)
   10b9c:	movs	r5, #9
   10b9e:	ldr.w	r8, [pc, #760]	; 10e98 <Action_follow@@Base+0x804>
   10ba2:	ldr.w	r9, [pc, #760]	; 10e9c <Action_follow@@Base+0x808>
   10ba6:	add	r7, pc
   10ba8:	add	r8, pc
   10baa:	add	r9, pc
   10bac:	b.n	10bb2 <Action_follow@@Base+0x51e>
   10bae:	ldr.w	r7, [r3, #-60]
   10bb2:	mov	r1, r5
   10bb4:	movs	r2, #9
   10bb6:	ldr	r0, [r4, #0]
   10bb8:	adds	r5, #1
   10bba:	blx	6668 <wmove@plt>
   10bbe:	mov.w	r2, #4294967295	; 0xffffffff
   10bc2:	mov	r1, r8
   10bc4:	mov	r8, r7
   10bc6:	cmp	r0, r2
   10bc8:	beq.n	10bd0 <Action_follow@@Base+0x53c>
   10bca:	ldr	r0, [r4, #0]
   10bcc:	blx	677c <waddnstr@plt>
   10bd0:	add.w	r3, r9, r5, lsl #3
   10bd4:	cmp	r7, #0
   10bd6:	bne.n	10bae <Action_follow@@Base+0x51a>
   10bd8:	ldr.w	r9, [pc, #708]	; 10ea0 <Action_follow@@Base+0x80c>
   10bdc:	movs	r5, #9
   10bde:	ldr	r7, [pc, #708]	; (10ea4 <Action_follow@@Base+0x810>)
   10be0:	ldr.w	r8, [pc, #708]	; 10ea8 <Action_follow@@Base+0x814>
   10be4:	add	r9, pc
   10be6:	add	r7, pc
   10be8:	add.w	r9, r9, #120	; 0x78
   10bec:	add	r8, pc
   10bee:	b.n	10bf4 <Action_follow@@Base+0x560>
   10bf0:	ldr.w	r7, [r3, #-60]
   10bf4:	mov	r1, r5
   10bf6:	movs	r2, #49	; 0x31
   10bf8:	ldr	r0, [r4, #0]
   10bfa:	adds	r5, #1
   10bfc:	blx	6668 <wmove@plt>
   10c00:	mov.w	r2, #4294967295	; 0xffffffff
   10c04:	mov	r1, r8
   10c06:	mov	r8, r7
   10c08:	cmp	r0, r2
   10c0a:	beq.n	10c12 <Action_follow@@Base+0x57e>
   10c0c:	ldr	r0, [r4, #0]
   10c0e:	blx	677c <waddnstr@plt>
   10c12:	add.w	r3, r9, r5, lsl #3
   10c16:	cmp	r7, #0
   10c18:	bne.n	10bf0 <Action_follow@@Base+0x55c>
   10c1a:	ldr	r3, [r6, #0]
   10c1c:	movs	r5, #9
   10c1e:	ldr	r7, [pc, #652]	; (10eac <Action_follow@@Base+0x818>)
   10c20:	ldr.w	r8, [pc, #652]	; 10eb0 <Action_follow@@Base+0x81c>
   10c24:	ldr.w	r9, [pc, #652]	; 10eb4 <Action_follow@@Base+0x820>
   10c28:	add	r7, pc
   10c2a:	ldr	r0, [r4, #0]
   10c2c:	add	r8, pc
   10c2e:	ldr.w	r1, [r3, #184]	; 0xb8
   10c32:	add	r9, pc
   10c34:	blx	6c88 <wattrset@plt+0x4>
   10c38:	b.n	10c3e <Action_follow@@Base+0x5aa>
   10c3a:	ldr.w	r7, [r3, #-64]
   10c3e:	mov	r1, r5
   10c40:	movs	r2, #0
   10c42:	ldr	r0, [r4, #0]
   10c44:	adds	r5, #1
   10c46:	blx	6668 <wmove@plt>
   10c4a:	mov.w	r2, #4294967295	; 0xffffffff
   10c4e:	mov	r1, r8
   10c50:	mov	r8, r7
   10c52:	cmp	r0, r2
   10c54:	beq.n	10c5c <Action_follow@@Base+0x5c8>
   10c56:	ldr	r0, [r4, #0]
   10c58:	blx	677c <waddnstr@plt>
   10c5c:	add.w	r3, r9, r5, lsl #3
   10c60:	cmp	r7, #0
   10c62:	bne.n	10c3a <Action_follow@@Base+0x5a6>
   10c64:	ldr.w	r9, [pc, #592]	; 10eb8 <Action_follow@@Base+0x824>
   10c68:	movs	r5, #9
   10c6a:	ldr	r7, [pc, #592]	; (10ebc <Action_follow@@Base+0x828>)
   10c6c:	ldr.w	r8, [pc, #592]	; 10ec0 <Action_follow@@Base+0x82c>
   10c70:	add	r9, pc
   10c72:	add	r7, pc
   10c74:	add.w	r9, r9, #120	; 0x78
   10c78:	add	r8, pc
   10c7a:	b.n	10c80 <Action_follow@@Base+0x5ec>
   10c7c:	ldr.w	r7, [r3, #-64]
   10c80:	mov	r1, r5
   10c82:	movs	r2, #40	; 0x28
   10c84:	ldr	r0, [r4, #0]
   10c86:	adds	r5, #1
   10c88:	blx	6668 <wmove@plt>
   10c8c:	mov.w	r2, #4294967295	; 0xffffffff
   10c90:	mov	r1, r8
   10c92:	mov	r8, r7
   10c94:	cmp	r0, r2
   10c96:	beq.n	10c9e <Action_follow@@Base+0x60a>
   10c98:	ldr	r0, [r4, #0]
   10c9a:	blx	677c <waddnstr@plt>
   10c9e:	add.w	r3, r9, r5, lsl #3
   10ca2:	cmp	r7, #0
   10ca4:	bne.n	10c7c <Action_follow@@Base+0x5e8>
   10ca6:	ldr	r3, [r6, #0]
   10ca8:	ldr	r0, [r4, #0]
   10caa:	ldr	r1, [r3, #112]	; 0x70
   10cac:	blx	6c88 <wattrset@plt+0x4>
   10cb0:	ldr	r0, [r4, #0]
   10cb2:	movs	r2, #32
   10cb4:	movs	r1, #16
   10cb6:	blx	6668 <wmove@plt>
   10cba:	adds	r0, #1
   10cbc:	beq.n	10ccc <Action_follow@@Base+0x638>
   10cbe:	ldr	r1, [pc, #516]	; (10ec4 <Action_follow@@Base+0x830>)
   10cc0:	mov.w	r2, #4294967295	; 0xffffffff
   10cc4:	ldr	r0, [r4, #0]
   10cc6:	add	r1, pc
   10cc8:	blx	677c <waddnstr@plt>
   10ccc:	ldr	r0, [r4, #0]
   10cce:	movs	r2, #26
   10cd0:	movs	r1, #17
   10cd2:	blx	6668 <wmove@plt>
   10cd6:	adds	r0, #1
   10cd8:	beq.n	10ce8 <Action_follow@@Base+0x654>
   10cda:	ldr	r1, [pc, #492]	; (10ec8 <Action_follow@@Base+0x834>)
   10cdc:	mov.w	r2, #4294967295	; 0xffffffff
   10ce0:	ldr	r0, [r4, #0]
   10ce2:	add	r1, pc
   10ce4:	blx	677c <waddnstr@plt>
   10ce8:	ldr	r3, [r6, #0]
   10cea:	ldr	r0, [r4, #0]
   10cec:	ldr	r1, [r3, #4]
   10cee:	blx	6c88 <wattrset@plt+0x4>
   10cf2:	ldr	r3, [r6, #0]
   10cf4:	ldr	r0, [r4, #0]
   10cf6:	ldr.w	r1, [r3, #184]	; 0xb8
   10cfa:	blx	6c88 <wattrset@plt+0x4>
   10cfe:	ldr	r0, [r4, #0]
   10d00:	movs	r2, #0
   10d02:	movs	r1, #23
   10d04:	blx	6668 <wmove@plt>
   10d08:	adds	r0, #1
   10d0a:	beq.n	10d1a <Action_follow@@Base+0x686>
   10d0c:	ldr	r1, [pc, #444]	; (10ecc <Action_follow@@Base+0x838>)
   10d0e:	mov.w	r2, #4294967295	; 0xffffffff
   10d12:	ldr	r0, [r4, #0]
   10d14:	add	r1, pc
   10d16:	blx	677c <waddnstr@plt>
   10d1a:	ldr	r3, [r6, #0]
   10d1c:	ldr	r0, [r4, #0]
   10d1e:	ldr	r1, [r3, #4]
   10d20:	blx	6c88 <wattrset@plt+0x4>
   10d24:	ldr	r0, [r4, #0]
   10d26:	blx	68c0 <wrefresh@plt>
   10d2a:	bl	85fc <CRT_readKey@@Base>
   10d2e:	ldr	r0, [r4, #0]
   10d30:	blx	6c20 <wclear@plt>
   10d34:	movs	r0, #35	; 0x23
   10d36:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10d3a:	ldr	r3, [r6, #0]
   10d3c:	ldr	r0, [r4, #0]
   10d3e:	ldr	r5, [pc, #400]	; (10ed0 <Action_follow@@Base+0x83c>)
   10d40:	ldr.w	r1, [r3, #196]	; 0xc4
   10d44:	blx	6c88 <wattrset@plt+0x4>
   10d48:	ldr	r1, [pc, #392]	; (10ed4 <Action_follow@@Base+0x840>)
   10d4a:	add	r5, pc
   10d4c:	ldr	r0, [r4, #0]
   10d4e:	add	r1, pc
   10d50:	mov.w	r2, #4294967295	; 0xffffffff
   10d54:	blx	677c <waddnstr@plt>
   10d58:	mov	r1, r5
   10d5a:	mov.w	r2, #4294967295	; 0xffffffff
   10d5e:	ldr	r0, [r4, #0]
   10d60:	blx	677c <waddnstr@plt>
   10d64:	ldr	r3, [r6, #0]
   10d66:	ldr	r0, [r4, #0]
   10d68:	ldr.w	r1, [r3, #200]	; 0xc8
   10d6c:	blx	6c88 <wattrset@plt+0x4>
   10d70:	ldr	r1, [pc, #356]	; (10ed8 <Action_follow@@Base+0x844>)
   10d72:	ldr	r0, [r4, #0]
   10d74:	mov.w	r2, #4294967295	; 0xffffffff
   10d78:	add	r1, pc
   10d7a:	blx	677c <waddnstr@plt>
   10d7e:	mov	r1, r5
   10d80:	mov.w	r2, #4294967295	; 0xffffffff
   10d84:	ldr	r0, [r4, #0]
   10d86:	blx	677c <waddnstr@plt>
   10d8a:	ldr	r3, [r6, #0]
   10d8c:	ldr	r0, [r4, #0]
   10d8e:	ldr.w	r1, [r3, #204]	; 0xcc
   10d92:	blx	6c88 <wattrset@plt+0x4>
   10d96:	ldr	r1, [pc, #324]	; (10edc <Action_follow@@Base+0x848>)
   10d98:	ldr	r0, [r4, #0]
   10d9a:	mov.w	r2, #4294967295	; 0xffffffff
   10d9e:	add	r1, pc
   10da0:	blx	677c <waddnstr@plt>
   10da4:	mov	r1, r5
   10da6:	mov.w	r2, #4294967295	; 0xffffffff
   10daa:	ldr	r0, [r4, #0]
   10dac:	blx	677c <waddnstr@plt>
   10db0:	ldr	r3, [r6, #0]
   10db2:	ldr	r0, [r4, #0]
   10db4:	ldr.w	r1, [r3, #220]	; 0xdc
   10db8:	blx	6c88 <wattrset@plt+0x4>
   10dbc:	ldr	r1, [pc, #288]	; (10ee0 <Action_follow@@Base+0x84c>)
   10dbe:	mov.w	r2, #4294967295	; 0xffffffff
   10dc2:	ldr	r0, [r4, #0]
   10dc4:	add	r1, pc
   10dc6:	blx	677c <waddnstr@plt>
   10dca:	ldr	r3, [r6, #0]
   10dcc:	ldr	r0, [r4, #0]
   10dce:	ldr	r1, [r3, #124]	; 0x7c
   10dd0:	blx	6c88 <wattrset@plt+0x4>
   10dd4:	ldr	r1, [pc, #268]	; (10ee4 <Action_follow@@Base+0x850>)
   10dd6:	ldr	r0, [r4, #0]
   10dd8:	mov.w	r2, #4294967295	; 0xffffffff
   10ddc:	add	r1, pc
   10dde:	blx	677c <waddnstr@plt>
   10de2:	b.n	109c8 <Action_follow@@Base+0x334>
   10de4:	movs	r2, #0
   10de6:	movs	r1, #7
   10de8:	blx	6668 <wmove@plt>
   10dec:	adds	r0, #1
   10dee:	bne.n	10df4 <Action_follow@@Base+0x760>
   10df0:	ldr	r0, [r4, #0]
   10df2:	b.n	10b80 <Action_follow@@Base+0x4ec>
   10df4:	ldr	r1, [pc, #240]	; (10ee8 <Action_follow@@Base+0x854>)
   10df6:	mov.w	r2, #4294967295	; 0xffffffff
   10dfa:	ldr	r0, [r4, #0]
   10dfc:	add	r1, pc
   10dfe:	blx	677c <waddnstr@plt>
   10e02:	b.n	10df0 <Action_follow@@Base+0x75c>
   10e04:	str	r5, [sp, #512]	; 0x200
   10e06:	movs	r1, r0
   10e08:	lsls	r4, r5, #9
   10e0a:	movs	r0, r0
   10e0c:	lsls	r0, r6, #9
   10e0e:	movs	r0, r0
   10e10:	lsls	r0, r2, #11
   10e12:	movs	r0, r0
   10e14:	lsls	r0, r7, #10
   10e16:	movs	r0, r0
   10e18:	ldr	r0, [r5, #92]	; 0x5c
   10e1a:	movs	r0, r0
   10e1c:	ldr	r6, [r6, #92]	; 0x5c
   10e1e:	movs	r0, r0
   10e20:	ldr	r2, [r1, #96]	; 0x60
   10e22:	movs	r0, r0
   10e24:	ldrsb	r4, [r0, r2]
   10e26:	movs	r0, r0
   10e28:	ldr	r0, [r5, #92]	; 0x5c
   10e2a:	movs	r0, r0
   10e2c:	ldr	r4, [r2, #92]	; 0x5c
   10e2e:	movs	r0, r0
   10e30:	ldr	r4, [r6, #88]	; 0x58
   10e32:	movs	r0, r0
   10e34:	ldr	r4, [r2, #88]	; 0x58
   10e36:	movs	r0, r0
   10e38:	ldr	r4, [r6, #84]	; 0x54
   10e3a:	movs	r0, r0
   10e3c:	ldr	r0, [r2, #84]	; 0x54
   10e3e:	movs	r0, r0
   10e40:	ldr	r4, [r6, #80]	; 0x50
   10e42:	movs	r0, r0
   10e44:	ldr	r4, [r2, #80]	; 0x50
   10e46:	movs	r0, r0
   10e48:	ldr	r4, [r6, #76]	; 0x4c
   10e4a:	movs	r0, r0
   10e4c:	ldr	r2, [r4, #76]	; 0x4c
   10e4e:	movs	r0, r0
   10e50:	ldrsh	r4, [r6, r6]
   10e52:	movs	r0, r0
   10e54:	ldr	r4, [r3, #76]	; 0x4c
   10e56:	movs	r0, r0
   10e58:	ldr	r4, [r0, #68]	; 0x44
   10e5a:	movs	r0, r0
   10e5c:	strb	r6, [r0, r3]
   10e5e:	movs	r0, r0
   10e60:	ldr	r0, [r6, #72]	; 0x48
   10e62:	movs	r0, r0
   10e64:	ldr	r0, [r2, #72]	; 0x48
   10e66:	movs	r0, r0
   10e68:	ldr	r2, [r6, #68]	; 0x44
   10e6a:	movs	r0, r0
   10e6c:	ldr	r2, [r4, #68]	; 0x44
   10e6e:	movs	r0, r0
   10e70:	ldrsh	r2, [r2, r3]
   10e72:	movs	r0, r0
   10e74:	ldr	r4, [r1, #68]	; 0x44
   10e76:	movs	r0, r0
   10e78:	strh	r4, [r5, r7]
   10e7a:	movs	r0, r0
   10e7c:	ldr	r4, [r3, #60]	; 0x3c
   10e7e:	movs	r0, r0
   10e80:	ldr	r4, [r2, #64]	; 0x40
   10e82:	movs	r0, r0
   10e84:	ldrsh	r4, [r1, r1]
   10e86:	movs	r0, r0
   10e88:	ldr	r6, [r1, #64]	; 0x40
   10e8a:	movs	r0, r0
   10e8c:	lsls	r0, r2, #9
   10e8e:	movs	r0, r0
   10e90:	ldr	r4, [r6, #68]	; 0x44
   10e92:	movs	r0, r0
   10e94:	ldr	r6, [r7, #24]
   10e96:	movs	r0, r0
   10e98:	ldr	r4, [r2, #28]
   10e9a:	movs	r0, r0
   10e9c:	ldrh	r6, [r0, #48]	; 0x30
   10e9e:	movs	r1, r0
   10ea0:	ldrh	r4, [r1, #46]	; 0x2e
   10ea2:	movs	r1, r0
   10ea4:	ldr	r2, [r5, #24]
   10ea6:	movs	r0, r0
   10ea8:	ldr	r4, [r0, #28]
   10eaa:	movs	r0, r0
   10eac:	ldr	r4, [r2, #24]
   10eae:	movs	r0, r0
   10eb0:	ldr	r4, [r3, #24]
   10eb2:	movs	r0, r0
   10eb4:	ldrh	r6, [r7, #42]	; 0x2a
   10eb6:	movs	r1, r0
   10eb8:	ldrh	r0, [r0, #42]	; 0x2a
   10eba:	movs	r1, r0
   10ebc:	ldr	r2, [r4, #20]
   10ebe:	movs	r0, r0
   10ec0:	ldr	r0, [r5, #20]
   10ec2:	movs	r0, r0
   10ec4:	strb	r6, [r3, r7]
   10ec6:	movs	r0, r0
   10ec8:	strb	r2, [r0, r7]
   10eca:	movs	r0, r0
   10ecc:	ldr	r4, [r0, #52]	; 0x34
   10ece:	movs	r0, r0
   10ed0:	ldr	r6, [r3, #16]
   10ed2:	movs	r0, r0
   10ed4:	ldr	r6, [r3, #20]
   10ed6:	movs	r0, r0
   10ed8:	ldr	r4, [r6, #12]
   10eda:	movs	r0, r0
   10edc:	ldr	r6, [r2, #12]
   10ede:	movs	r0, r0
   10ee0:	ldr	r0, [r7, #12]
   10ee2:	movs	r0, r0
   10ee4:	ldr	r4, [r5, #12]
   10ee6:	movs	r0, r0
   10ee8:	ldr	r4, [r0, #28]
   10eea:	movs	r0, r0
   10eec:	push	{r4, lr}
   10eee:	mov	r4, r0
   10ef0:	ldr	r0, [r0, #12]
   10ef2:	bl	b2f8 <Panel_getSelected@@Base>
   10ef6:	cbz	r0, 10f06 <Action_follow@@Base+0x872>
   10ef8:	bl	caf0 <Process_toggleTag@@Base>
   10efc:	ldr	r0, [r4, #12]
   10efe:	mov.w	r1, #258	; 0x102
   10f02:	bl	b7ec <Panel_onKey@@Base>
   10f06:	movs	r0, #0
   10f08:	pop	{r4, pc}
   10f0a:	nop
   10f0c:	push	{r3, r4, r5, lr}
   10f0e:	ldr	r4, [pc, #56]	; (10f48 <Action_follow@@Base+0x8b4>)
   10f10:	ldr	r0, [r0, #12]
   10f12:	add	r4, pc
   10f14:	bl	b2f8 <Panel_getSelected@@Base>
   10f18:	cbz	r0, 10f3c <Action_follow@@Base+0x8a8>
   10f1a:	bl	f424 <TraceScreen_new@@Base>
   10f1e:	mov	r5, r0
   10f20:	bl	f490 <TraceScreen_forkTracer@@Base>
   10f24:	cbnz	r0, 10f3e <Action_follow@@Base+0x8aa>
   10f26:	mov	r0, r5
   10f28:	bl	f19c <TraceScreen_delete@@Base>
   10f2c:	ldr	r3, [pc, #28]	; (10f4c <Action_follow@@Base+0x8b8>)
   10f2e:	ldr	r3, [r4, r3]
   10f30:	ldr	r0, [r3, #0]
   10f32:	blx	6c20 <wclear@plt>
   10f36:	bl	8664 <CRT_enableDelay@@Base>
   10f3a:	movs	r0, #33	; 0x21
   10f3c:	pop	{r3, r4, r5, pc}
   10f3e:	mov	r0, r5
   10f40:	bl	11b64 <InfoScreen_run@@Base>
   10f44:	b.n	10f26 <Action_follow@@Base+0x892>
   10f46:	nop
   10f48:	ldrh	r2, [r7, #46]	; 0x2e
   10f4a:	movs	r1, r0
   10f4c:	lsls	r4, r5, #9
   10f4e:	movs	r0, r0
   10f50:	push	{r3, r4, r5, lr}
   10f52:	ldr	r4, [pc, #44]	; (10f80 <Action_follow@@Base+0x8ec>)
   10f54:	ldr	r0, [r0, #12]
   10f56:	add	r4, pc
   10f58:	bl	b2f8 <Panel_getSelected@@Base>
   10f5c:	cbz	r0, 10f7e <Action_follow@@Base+0x8ea>
   10f5e:	bl	1007c <OpenFilesScreen_new@@Base>
   10f62:	mov	r5, r0
   10f64:	bl	11b64 <InfoScreen_run@@Base>
   10f68:	mov	r0, r5
   10f6a:	bl	fce0 <OpenFilesScreen_delete@@Base>
   10f6e:	ldr	r3, [pc, #20]	; (10f84 <Action_follow@@Base+0x8f0>)
   10f70:	ldr	r3, [r4, r3]
   10f72:	ldr	r0, [r3, #0]
   10f74:	blx	6c20 <wclear@plt>
   10f78:	bl	8664 <CRT_enableDelay@@Base>
   10f7c:	movs	r0, #33	; 0x21
   10f7e:	pop	{r3, r4, r5, pc}
   10f80:	ldrh	r6, [r6, #44]	; 0x2c
   10f82:	movs	r1, r0
   10f84:	lsls	r4, r5, #9
   10f86:	movs	r0, r0
   10f88:	ldr	r1, [pc, #184]	; (11044 <Action_follow@@Base+0x9b0>)
   10f8a:	movs	r2, #0
   10f8c:	ldr	r3, [pc, #184]	; (11048 <Action_follow@@Base+0x9b4>)
   10f8e:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10f92:	add	r1, pc
   10f94:	mov	r4, r0
   10f96:	sub	sp, #32
   10f98:	ldr	r7, [r4, #16]
   10f9a:	movs	r5, #1
   10f9c:	ldr.w	r8, [r4]
   10fa0:	mov	r0, r2
   10fa2:	ldr	r3, [r1, r3]
   10fa4:	ldr	r6, [r4, #8]
   10fa6:	ldr	r1, [r7, #20]
   10fa8:	ldr	r3, [r3, #0]
   10faa:	str	r3, [sp, #28]
   10fac:	mov.w	r3, #0
   10fb0:	mov.w	r3, #4294967295	; 0xffffffff
   10fb4:	str	r5, [sp, #12]
   10fb6:	str	r5, [sp, #0]
   10fb8:	strd	r7, r8, [sp, #4]
   10fbc:	bl	d490 <ScreenManager_new@@Base>
   10fc0:	mov	r3, r6
   10fc2:	mov	r2, r7
   10fc4:	mov	r1, r8
   10fc6:	mov	r5, r0
   10fc8:	bl	7730 <CategoriesPanel_new@@Base>
   10fcc:	movs	r2, #16
   10fce:	mov	r6, r0
   10fd0:	mov	r0, r5
   10fd2:	mov	r1, r6
   10fd4:	bl	d510 <ScreenManager_add@@Base>
   10fd8:	mov	r0, r6
   10fda:	bl	7558 <CategoriesPanel_makeMetersPage@@Base>
   10fde:	add	r2, sp, #24
   10fe0:	add	r1, sp, #20
   10fe2:	mov	r0, r5
   10fe4:	bl	d690 <ScreenManager_run@@Base>
   10fe8:	mov	r0, r5
   10fea:	bl	d4f8 <ScreenManager_delete@@Base>
   10fee:	ldrb.w	r3, [r8, #71]	; 0x47
   10ff2:	ldr	r6, [pc, #88]	; (1104c <Action_follow@@Base+0x9b8>)
   10ff4:	add	r6, pc
   10ff6:	cbnz	r3, 11038 <Action_follow@@Base+0x9a4>
   10ff8:	ldr	r0, [r4, #16]
   10ffa:	bl	9a3c <Header_calculateHeight@@Base>
   10ffe:	movs	r1, #0
   11000:	mov	r2, r0
   11002:	mov	r5, r0
   11004:	ldr	r0, [r4, #12]
   11006:	bl	b254 <Panel_move@@Base>
   1100a:	ldr	r2, [pc, #68]	; (11050 <Action_follow@@Base+0x9bc>)
   1100c:	ldr	r3, [pc, #68]	; (11054 <Action_follow@@Base+0x9c0>)
   1100e:	ldr	r0, [r4, #12]
   11010:	ldr	r2, [r6, r2]
   11012:	ldr	r3, [r6, r3]
   11014:	ldr	r2, [r2, #0]
   11016:	ldr	r1, [r3, #0]
   11018:	subs	r2, r2, r5
   1101a:	subs	r2, #1
   1101c:	bl	b260 <Panel_resize@@Base>
   11020:	ldr	r2, [pc, #52]	; (11058 <Action_follow@@Base+0x9c4>)
   11022:	ldr	r3, [pc, #36]	; (11048 <Action_follow@@Base+0x9b4>)
   11024:	add	r2, pc
   11026:	ldr	r3, [r2, r3]
   11028:	ldr	r2, [r3, #0]
   1102a:	ldr	r3, [sp, #28]
   1102c:	eors	r2, r3
   1102e:	bne.n	11040 <Action_follow@@Base+0x9ac>
   11030:	movs	r0, #97	; 0x61
   11032:	add	sp, #32
   11034:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11038:	mov	r0, r7
   1103a:	bl	96b0 <Header_writeBackToSettings@@Base>
   1103e:	b.n	10ff8 <Action_follow@@Base+0x964>
   11040:	blx	67d0 <__stack_chk_fail@plt>
   11044:	ldrh	r2, [r7, #42]	; 0x2a
   11046:	movs	r1, r0
   11048:	lsls	r0, r0, #9
   1104a:	movs	r0, r0
   1104c:	ldrh	r0, [r3, #40]	; 0x28
   1104e:	movs	r1, r0
   11050:	lsls	r0, r2, #11
   11052:	movs	r0, r0
   11054:	lsls	r0, r7, #10
   11056:	movs	r0, r0
   11058:	ldrh	r0, [r5, #38]	; 0x26
   1105a:	movs	r1, r0
   1105c:	mov	r3, r1
   1105e:	mov	r1, r0
   11060:	push	{r4, lr}
   11062:	mov	r0, r3
   11064:	mov	r4, r2
   11066:	bl	9b90 <ListItem_new@@Base>
   1106a:	mov	r1, r0
   1106c:	mov	r0, r4
   1106e:	ldmia.w	sp!, {r4, lr}
   11072:	b.w	b294 <Panel_add@@Base>
   11076:	nop
   11078:	ldr	r2, [pc, #72]	; (110c4 <Action_follow@@Base+0xa30>)
   1107a:	ldr	r3, [pc, #76]	; (110c8 <Action_follow@@Base+0xa34>)
   1107c:	add	r2, pc
   1107e:	ldr	r1, [pc, #76]	; (110cc <Action_follow@@Base+0xa38>)
   11080:	push	{r4, lr}
   11082:	sub	sp, #8
   11084:	ldr	r3, [r2, r3]
   11086:	add	r1, pc
   11088:	ldr	r4, [pc, #68]	; (110d0 <Action_follow@@Base+0xa3c>)
   1108a:	movs	r2, #1
   1108c:	ldr	r3, [r3, #0]
   1108e:	str	r3, [sp, #4]
   11090:	mov.w	r3, #0
   11094:	ldr	r0, [r0, #12]
   11096:	add.w	r3, sp, #3
   1109a:	ldr	r1, [r1, r4]
   1109c:	bl	8d6c <MainPanel_foreachProcess@@Base>
   110a0:	cbz	r0, 110ba <Action_follow@@Base+0xa26>
   110a2:	ldr	r2, [pc, #48]	; (110d4 <Action_follow@@Base+0xa40>)
   110a4:	ldr	r3, [pc, #32]	; (110c8 <Action_follow@@Base+0xa34>)
   110a6:	add	r2, pc
   110a8:	ldrb.w	r0, [sp, #3]
   110ac:	ldr	r3, [r2, r3]
   110ae:	ldr	r2, [r3, #0]
   110b0:	ldr	r3, [sp, #4]
   110b2:	eors	r2, r3
   110b4:	bne.n	110c0 <Action_follow@@Base+0xa2c>
   110b6:	add	sp, #8
   110b8:	pop	{r4, pc}
   110ba:	blx	6930 <beep@plt>
   110be:	b.n	110a2 <Action_follow@@Base+0xa0e>
   110c0:	blx	67d0 <__stack_chk_fail@plt>
   110c4:	ldrh	r0, [r2, #36]	; 0x24
   110c6:	movs	r1, r0
   110c8:	lsls	r0, r0, #9
   110ca:	movs	r0, r0
   110cc:	ldrh	r6, [r0, #36]	; 0x24
   110ce:	movs	r1, r0
   110d0:	lsls	r4, r4, #10
   110d2:	movs	r0, r0
   110d4:	ldrh	r6, [r4, #34]	; 0x22
   110d6:	movs	r1, r0
   110d8:	ldr	r0, [r0, #0]
   110da:	push	{r3, lr}
   110dc:	bl	e860 <Settings_invertSortOrder@@Base>
   110e0:	movs	r0, #5
   110e2:	pop	{r3, pc}
   110e4:	ldr	r2, [r0, #12]
   110e6:	movs	r1, #0
   110e8:	push	{r3, lr}
   110ea:	movw	r3, #9904	; 0x26b0
   110ee:	ldr	r0, [r2, r3]
   110f0:	bl	105a4 <IncSet_activate@@Base>
   110f4:	movs	r0, #9
   110f6:	pop	{r3, pc}
   110f8:	ldr	r2, [r0, #12]
   110fa:	movs	r1, #1
   110fc:	push	{r3, r4, r5, lr}
   110fe:	movw	r3, #9904	; 0x26b0
   11102:	ldr	r5, [r2, r3]
   11104:	mov	r4, r0
   11106:	mov	r0, r5
   11108:	bl	105a4 <IncSet_activate@@Base>
   1110c:	ldrb.w	r3, [r5, #120]	; 0x78
   11110:	cbz	r3, 11116 <Action_follow@@Base+0xa82>
   11112:	add.w	r3, r5, #56	; 0x38
   11116:	ldr	r2, [r4, #8]
   11118:	movs	r0, #9
   1111a:	str	r3, [r2, #32]
   1111c:	pop	{r3, r4, r5, pc}
   1111e:	nop
   11120:	ldr	r2, [r0, #0]
   11122:	push	{r3, lr}
   11124:	ldrb.w	r3, [r2, #58]	; 0x3a
   11128:	eor.w	r3, r3, #1
   1112c:	strb.w	r3, [r2, #58]	; 0x3a
   11130:	cbz	r3, 11136 <Action_follow@@Base+0xaa2>
   11132:	movs	r3, #1
   11134:	str	r3, [r2, #48]	; 0x30
   11136:	ldr	r0, [r0, #8]
   11138:	bl	cf40 <ProcessList_expandTree@@Base>
   1113c:	movs	r0, #109	; 0x6d
   1113e:	pop	{r3, pc}
   11140:	push	{r4, r5, r6, lr}
   11142:	mov	r5, r0
   11144:	mov	r6, r1
   11146:	movs	r4, #0
   11148:	movs	r3, #1
   1114a:	strb	r3, [r2, #0]
   1114c:	mov	r0, r5
   1114e:	bl	b348 <Panel_size@@Base>
   11152:	mov	r1, r4
   11154:	mov	r3, r0
   11156:	cmp	r4, r3
   11158:	mov	r0, r5
   1115a:	add.w	r4, r4, #1
   1115e:	bge.n	1118a <Action_follow@@Base+0xaf6>
   11160:	bl	b2c4 <Panel_get@@Base>
   11164:	ldrb.w	r3, [r0, #46]	; 0x2e
   11168:	cmp	r3, #0
   1116a:	bne.n	1114c <Action_follow@@Base+0xab8>
   1116c:	ldr	r3, [r0, #24]
   1116e:	ldr	r1, [r0, #16]
   11170:	cmp	r3, r6
   11172:	beq.n	1117e <Action_follow@@Base+0xaea>
   11174:	cmp	r3, r1
   11176:	bne.n	1114c <Action_follow@@Base+0xab8>
   11178:	ldr	r3, [r0, #20]
   1117a:	cmp	r3, r6
   1117c:	bne.n	1114c <Action_follow@@Base+0xab8>
   1117e:	add.w	r2, r0, #46	; 0x2e
   11182:	mov	r0, r5
   11184:	bl	11140 <Action_follow@@Base+0xaac>
   11188:	b.n	1114c <Action_follow@@Base+0xab8>
   1118a:	pop	{r4, r5, r6, pc}
   1118c:	push	{r4, lr}
   1118e:	mov	r4, r0
   11190:	ldr	r0, [r0, #12]
   11192:	bl	b2f8 <Panel_getSelected@@Base>
   11196:	cbz	r0, 111a6 <Action_follow@@Base+0xb12>
   11198:	mov	r3, r0
   1119a:	ldr	r0, [r4, #12]
   1119c:	ldr	r1, [r3, #16]
   1119e:	add.w	r2, r3, #46	; 0x2e
   111a2:	bl	11140 <Action_follow@@Base+0xaac>
   111a6:	movs	r0, #0
   111a8:	pop	{r4, pc}
   111aa:	nop
   111ac:	ldr	r3, [r0, #0]
   111ae:	ldrb.w	r3, [r3, #58]	; 0x3a
   111b2:	cbnz	r3, 111b8 <Action_follow@@Base+0xb24>
   111b4:	movs	r0, #0
   111b6:	bx	lr
   111b8:	push	{r4, r5, r6, lr}
   111ba:	ldr	r5, [r0, #12]
   111bc:	mov	r0, r5
   111be:	bl	b2f8 <Panel_getSelected@@Base>
   111c2:	cbz	r0, 111f0 <Action_follow@@Base+0xb5c>
   111c4:	ldr	r6, [r0, #24]
   111c6:	movs	r4, #0
   111c8:	ldr	r3, [r0, #16]
   111ca:	cmp	r6, r3
   111cc:	it	eq
   111ce:	ldreq	r6, [r0, #20]
   111d0:	b.n	111e0 <Action_follow@@Base+0xb4c>
   111d2:	bl	b2c4 <Panel_get@@Base>
   111d6:	ldr	r2, [r0, #16]
   111d8:	mov	r3, r0
   111da:	cmp	r2, r6
   111dc:	beq.n	111f4 <Action_follow@@Base+0xb60>
   111de:	adds	r4, #1
   111e0:	mov	r0, r5
   111e2:	bl	b348 <Panel_size@@Base>
   111e6:	mov	r1, r4
   111e8:	mov	r3, r0
   111ea:	cmp	r4, r3
   111ec:	mov	r0, r5
   111ee:	blt.n	111d2 <Action_follow@@Base+0xb3e>
   111f0:	movs	r0, #0
   111f2:	pop	{r4, r5, r6, pc}
   111f4:	mov	r0, r5
   111f6:	movs	r2, #0
   111f8:	mov	r1, r4
   111fa:	strb.w	r2, [r3, #47]	; 0x2f
   111fe:	bl	b350 <Panel_setSelected@@Base>
   11202:	movs	r0, #3
   11204:	pop	{r4, r5, r6, pc}
   11206:	nop
   11208:	ldr	r2, [pc, #76]	; (11258 <Action_follow@@Base+0xbc4>)
   1120a:	ldr	r3, [pc, #80]	; (1125c <Action_follow@@Base+0xbc8>)
   1120c:	add	r2, pc
   1120e:	ldr	r1, [pc, #80]	; (11260 <Action_follow@@Base+0xbcc>)
   11210:	push	{r4, lr}
   11212:	sub	sp, #8
   11214:	ldr	r3, [r2, r3]
   11216:	add	r1, pc
   11218:	ldr	r4, [pc, #72]	; (11264 <Action_follow@@Base+0xbd0>)
   1121a:	mov.w	r2, #4294967295	; 0xffffffff
   1121e:	ldr	r3, [r3, #0]
   11220:	str	r3, [sp, #4]
   11222:	mov.w	r3, #0
   11226:	ldr	r0, [r0, #12]
   11228:	add.w	r3, sp, #3
   1122c:	ldr	r1, [r1, r4]
   1122e:	bl	8d6c <MainPanel_foreachProcess@@Base>
   11232:	cbz	r0, 1124c <Action_follow@@Base+0xbb8>
   11234:	ldr	r2, [pc, #48]	; (11268 <Action_follow@@Base+0xbd4>)
   11236:	ldr	r3, [pc, #36]	; (1125c <Action_follow@@Base+0xbc8>)
   11238:	add	r2, pc
   1123a:	ldrb.w	r0, [sp, #3]
   1123e:	ldr	r3, [r2, r3]
   11240:	ldr	r2, [r3, #0]
   11242:	ldr	r3, [sp, #4]
   11244:	eors	r2, r3
   11246:	bne.n	11252 <Action_follow@@Base+0xbbe>
   11248:	add	sp, #8
   1124a:	pop	{r4, pc}
   1124c:	blx	6930 <beep@plt>
   11250:	b.n	11234 <Action_follow@@Base+0xba0>
   11252:	blx	67d0 <__stack_chk_fail@plt>
   11256:	nop
   11258:	ldrh	r0, [r0, #24]
   1125a:	movs	r1, r0
   1125c:	lsls	r0, r0, #9
   1125e:	movs	r0, r0
   11260:	ldrh	r6, [r6, #22]
   11262:	movs	r1, r0
   11264:	lsls	r4, r4, #10
   11266:	movs	r0, r0
   11268:	ldrh	r4, [r2, #22]
   1126a:	movs	r1, r0

0001126c <Action_pickFromVector@@Base>:
   1126c:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11270:	sub	sp, #40	; 0x28
   11272:	ldr	r4, [r0, #12]
   11274:	mov	r5, r1
   11276:	ldr	r7, [r0, #16]
   11278:	mov.w	ip, #1
   1127c:	ldr.w	lr, [pc, #256]	; 11380 <Action_pickFromVector@@Base+0x114>
   11280:	movs	r6, #0
   11282:	ldr	r3, [r0, #0]
   11284:	mov	r9, r2
   11286:	ldr	r1, [r7, #20]
   11288:	add	lr, pc
   1128a:	ldr.w	r8, [r4, #8]
   1128e:	mov	r2, r6
   11290:	str.w	ip, [sp]
   11294:	mov	r0, r6
   11296:	ldr.w	ip, [pc, #236]	; 11384 <Action_pickFromVector@@Base+0x118>
   1129a:	strd	r7, r3, [sp, #4]
   1129e:	mov.w	r3, #4294967295	; 0xffffffff
   112a2:	str	r6, [sp, #12]
   112a4:	ldr.w	ip, [lr, ip]
   112a8:	ldr.w	ip, [ip]
   112ac:	str.w	ip, [sp, #36]	; 0x24
   112b0:	mov.w	ip, #0
   112b4:	bl	d490 <ScreenManager_new@@Base>
   112b8:	add.w	r2, r9, #4294967295	; 0xffffffff
   112bc:	mov	r1, r5
   112be:	ldr.w	r9, [pc, #200]	; 11388 <Action_pickFromVector@@Base+0x11c>
   112c2:	add	r9, pc
   112c4:	strb.w	r6, [r0, #37]	; 0x25
   112c8:	str	r0, [sp, #20]
   112ca:	bl	d510 <ScreenManager_add@@Base>
   112ce:	ldr	r0, [sp, #20]
   112d0:	mov	r1, r4
   112d2:	mov.w	r2, #4294967295	; 0xffffffff
   112d6:	bl	d510 <ScreenManager_add@@Base>
   112da:	mov	r0, r4
   112dc:	bl	8d58 <MainPanel_selectedPid@@Base>
   112e0:	ldr	r3, [r7, #8]
   112e2:	ldr.w	sl, [r3, #24]
   112e6:	cmp.w	sl, #4294967295	; 0xffffffff
   112ea:	mov	r6, r0
   112ec:	beq.n	11348 <Action_pickFromVector@@Base+0xdc>
   112ee:	ldr	r0, [sp, #20]
   112f0:	add	r2, sp, #32
   112f2:	add	r1, sp, #28
   112f4:	bl	d690 <ScreenManager_run@@Base>
   112f8:	ldr	r0, [sp, #20]
   112fa:	bl	d4f8 <ScreenManager_delete@@Base>
   112fe:	mov	r2, r8
   11300:	movs	r1, #0
   11302:	mov	r0, r4
   11304:	bl	b254 <Panel_move@@Base>
   11308:	ldr	r2, [pc, #128]	; (1138c <Action_pickFromVector@@Base+0x120>)
   1130a:	ldr	r3, [pc, #132]	; (11390 <Action_pickFromVector@@Base+0x124>)
   1130c:	mov	r0, r4
   1130e:	ldr.w	r2, [r9, r2]
   11312:	ldr.w	r3, [r9, r3]
   11316:	ldr	r2, [r2, #0]
   11318:	ldr	r1, [r3, #0]
   1131a:	sub.w	r2, r2, r8
   1131e:	subs	r2, #1
   11320:	bl	b260 <Panel_resize@@Base>
   11324:	ldr	r3, [sp, #28]
   11326:	cmp	r3, r5
   11328:	bne.n	11330 <Action_pickFromVector@@Base+0xc4>
   1132a:	ldr	r3, [sp, #32]
   1132c:	cmp	r3, #13
   1132e:	beq.n	1135c <Action_pickFromVector@@Base+0xf0>
   11330:	movs	r0, #0
   11332:	ldr	r2, [pc, #96]	; (11394 <Action_pickFromVector@@Base+0x128>)
   11334:	ldr	r3, [pc, #76]	; (11384 <Action_pickFromVector@@Base+0x118>)
   11336:	add	r2, pc
   11338:	ldr	r3, [r2, r3]
   1133a:	ldr	r2, [r3, #0]
   1133c:	ldr	r3, [sp, #36]	; 0x24
   1133e:	eors	r2, r3
   11340:	bne.n	1137a <Action_pickFromVector@@Base+0x10e>
   11342:	add	sp, #40	; 0x28
   11344:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11348:	str	r0, [r3, #24]
   1134a:	add	r2, sp, #32
   1134c:	ldr	r0, [sp, #20]
   1134e:	add	r1, sp, #28
   11350:	bl	d690 <ScreenManager_run@@Base>
   11354:	ldr	r3, [r7, #8]
   11356:	str.w	sl, [r3, #24]
   1135a:	b.n	112f8 <Action_pickFromVector@@Base+0x8c>
   1135c:	mov	r0, r4
   1135e:	bl	b2f8 <Panel_getSelected@@Base>
   11362:	cbz	r0, 1136a <Action_pickFromVector@@Base+0xfe>
   11364:	ldr	r3, [r0, #16]
   11366:	cmp	r3, r6
   11368:	beq.n	11372 <Action_pickFromVector@@Base+0x106>
   1136a:	blx	6930 <beep@plt>
   1136e:	movs	r0, #0
   11370:	b.n	11332 <Action_pickFromVector@@Base+0xc6>
   11372:	mov	r0, r5
   11374:	bl	b2f8 <Panel_getSelected@@Base>
   11378:	b.n	11332 <Action_pickFromVector@@Base+0xc6>
   1137a:	blx	67d0 <__stack_chk_fail@plt>
   1137e:	nop
   11380:	ldrh	r4, [r0, #20]
   11382:	movs	r1, r0
   11384:	lsls	r0, r0, #9
   11386:	movs	r0, r0
   11388:	ldrh	r2, [r1, #18]
   1138a:	movs	r1, r0
   1138c:	lsls	r0, r2, #11
   1138e:	movs	r0, r0
   11390:	lsls	r0, r7, #10
   11392:	movs	r0, r0
   11394:	ldrh	r6, [r2, #14]
   11396:	movs	r1, r0
   11398:	push	{r3, r4, r5, r6, r7, lr}
   1139a:	mov	r6, r0
   1139c:	bl	e870 <SignalsPanel_new@@Base>
   113a0:	ldr	r7, [pc, #92]	; (11400 <Action_pickFromVector@@Base+0x194>)
   113a2:	movs	r2, #15
   113a4:	add	r7, pc
   113a6:	mov	r4, r0
   113a8:	mov	r0, r6
   113aa:	mov	r1, r4
   113ac:	bl	1126c <Action_pickFromVector@@Base>
   113b0:	cbz	r0, 113b8 <Action_pickFromVector@@Base+0x14c>
   113b2:	ldr	r3, [r0, #8]
   113b4:	mov	r5, r0
   113b6:	cbnz	r3, 113c2 <Action_pickFromVector@@Base+0x156>
   113b8:	mov	r0, r4
   113ba:	bl	b204 <Panel_delete@@Base>
   113be:	movs	r0, #97	; 0x61
   113c0:	pop	{r3, r4, r5, r6, r7, pc}
   113c2:	ldr	r1, [pc, #64]	; (11404 <Action_pickFromVector@@Base+0x198>)
   113c4:	ldr	r0, [r6, #12]
   113c6:	add	r1, pc
   113c8:	bl	b22c <Panel_setHeader@@Base>
   113cc:	ldr	r0, [r6, #12]
   113ce:	movs	r1, #1
   113d0:	bl	b370 <Panel_draw@@Base>
   113d4:	ldr	r3, [pc, #48]	; (11408 <Action_pickFromVector@@Base+0x19c>)
   113d6:	ldr	r3, [r7, r3]
   113d8:	ldr	r0, [r3, #0]
   113da:	blx	68c0 <wrefresh@plt>
   113de:	ldr	r1, [pc, #44]	; (1140c <Action_pickFromVector@@Base+0x1a0>)
   113e0:	ldr	r2, [r5, #8]
   113e2:	movs	r3, #0
   113e4:	ldr	r0, [r6, #12]
   113e6:	ldr	r1, [r7, r1]
   113e8:	bl	8d6c <MainPanel_foreachProcess@@Base>
   113ec:	mov.w	r0, #500	; 0x1f4
   113f0:	blx	6bcc <napms@plt>
   113f4:	mov	r0, r4
   113f6:	bl	b204 <Panel_delete@@Base>
   113fa:	movs	r0, #97	; 0x61
   113fc:	pop	{r3, r4, r5, r6, r7, pc}
   113fe:	nop
   11400:	ldrh	r0, [r5, #10]
   11402:	movs	r1, r0
   11404:	str	r6, [r5, #72]	; 0x48
   11406:	movs	r0, r0
   11408:	lsls	r4, r5, #9
   1140a:	movs	r0, r0
   1140c:	lsls	r4, r2, #11
   1140e:	movs	r0, r0
   11410:	ldr	r3, [r0, #8]
   11412:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11416:	sub	sp, #8
   11418:	ldr.w	r3, [r3, #128]	; 0x80
   1141c:	ldr	r6, [pc, #116]	; (11494 <Action_pickFromVector@@Base+0x228>)
   1141e:	cmp	r3, #1
   11420:	add	r6, pc
   11422:	beq.n	11486 <Action_pickFromVector@@Base+0x21a>
   11424:	ldr	r7, [r0, #12]
   11426:	mov	r4, r0
   11428:	mov	r0, r7
   1142a:	bl	b2f8 <Panel_getSelected@@Base>
   1142e:	cbz	r0, 11486 <Action_pickFromVector@@Base+0x21a>
   11430:	ldr	r1, [r4, #8]
   11432:	bl	10134 <Affinity_get@@Base>
   11436:	mov	r5, r0
   11438:	cbz	r0, 11486 <Action_pickFromVector@@Base+0x21a>
   1143a:	mov	r1, r0
   1143c:	ldr	r0, [r4, #8]
   1143e:	bl	fb74 <AffinityPanel_new@@Base>
   11442:	mov	r8, r0
   11444:	str	r0, [sp, #4]
   11446:	mov	r0, r5
   11448:	bl	100f4 <Affinity_delete@@Base>
   1144c:	mov	r1, r8
   1144e:	movs	r2, #15
   11450:	mov	r0, r4
   11452:	bl	1126c <Action_pickFromVector@@Base>
   11456:	cbz	r0, 11478 <Action_pickFromVector@@Base+0x20c>
   11458:	ldr	r1, [r4, #8]
   1145a:	mov	r0, r8
   1145c:	bl	fc94 <AffinityPanel_getAffinity@@Base>
   11460:	ldr	r1, [pc, #52]	; (11498 <Action_pickFromVector@@Base+0x22c>)
   11462:	movs	r3, #0
   11464:	ldr	r1, [r6, r1]
   11466:	mov	r4, r0
   11468:	mov	r0, r7
   1146a:	mov	r2, r4
   1146c:	bl	8d6c <MainPanel_foreachProcess@@Base>
   11470:	cbz	r0, 1148e <Action_pickFromVector@@Base+0x222>
   11472:	mov	r0, r4
   11474:	bl	100f4 <Affinity_delete@@Base>
   11478:	mov	r0, r8
   1147a:	bl	b204 <Panel_delete@@Base>
   1147e:	movs	r0, #97	; 0x61
   11480:	add	sp, #8
   11482:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11486:	movs	r0, #0
   11488:	add	sp, #8
   1148a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1148e:	blx	6930 <beep@plt>
   11492:	b.n	11472 <Action_pickFromVector@@Base+0x206>
   11494:	ldrh	r4, [r5, #6]
   11496:	movs	r1, r0
   11498:	lsls	r4, r5, #11
   1149a:	movs	r0, r0
   1149c:	push	{r4, r5, r6, lr}
   1149e:	sub	sp, #24
   114a0:	ldr	r1, [pc, #176]	; (11554 <Action_pickFromVector@@Base+0x2e8>)
   114a2:	str	r0, [sp, #20]
   114a4:	ldr	r0, [pc, #176]	; (11558 <Action_pickFromVector@@Base+0x2ec>)
   114a6:	add	r1, pc
   114a8:	ldr	r5, [sp, #20]
   114aa:	add	r0, pc
   114ac:	ldr	r4, [pc, #172]	; (1155c <Action_pickFromVector@@Base+0x2f0>)
   114ae:	bl	91d4 <FunctionBar_newEnterEsc@@Base>
   114b2:	ldr	r6, [pc, #172]	; (11560 <Action_pickFromVector@@Base+0x2f4>)
   114b4:	add	r4, pc
   114b6:	movs	r3, #0
   114b8:	mov	r2, r3
   114ba:	mov	r1, r3
   114bc:	str	r0, [sp, #8]
   114be:	mov	r0, r3
   114c0:	ldr	r6, [r4, r6]
   114c2:	movs	r4, #1
   114c4:	strd	r4, r6, [sp]
   114c8:	bl	b198 <Panel_new@@Base>
   114cc:	ldr	r1, [pc, #148]	; (11564 <Action_pickFromVector@@Base+0x2f8>)
   114ce:	add	r1, pc
   114d0:	mov	r4, r0
   114d2:	bl	b22c <Panel_setHeader@@Base>
   114d6:	ldr	r1, [pc, #144]	; (11568 <Action_pickFromVector@@Base+0x2fc>)
   114d8:	mov	r2, r4
   114da:	ldr	r0, [r5, #4]
   114dc:	add	r1, pc
   114de:	bl	f5f8 <UsersTable_foreach@@Base>
   114e2:	ldr	r0, [r4, #24]
   114e4:	bl	f79c <Vector_insertionSort@@Base>
   114e8:	ldr	r0, [pc, #128]	; (1156c <Action_pickFromVector@@Base+0x300>)
   114ea:	mov.w	r1, #4294967295	; 0xffffffff
   114ee:	add	r0, pc
   114f0:	bl	9b90 <ListItem_new@@Base>
   114f4:	movs	r1, #0
   114f6:	mov	r6, r0
   114f8:	mov	r0, r4
   114fa:	mov	r2, r6
   114fc:	bl	b2a8 <Panel_insert@@Base>
   11500:	mov	r1, r4
   11502:	mov	r0, r5
   11504:	movs	r2, #20
   11506:	bl	1126c <Action_pickFromVector@@Base>
   1150a:	cbz	r0, 11520 <Action_pickFromVector@@Base+0x2b4>
   1150c:	cmp	r6, r0
   1150e:	beq.n	1152c <Action_pickFromVector@@Base+0x2c0>
   11510:	bl	9c00 <ListItem_getRef@@Base>
   11514:	ldr	r5, [r5, #8]
   11516:	blx	6698 <getpwnam@plt>
   1151a:	cbz	r0, 11540 <Action_pickFromVector@@Base+0x2d4>
   1151c:	ldr	r3, [r0, #8]
   1151e:	str	r3, [r5, #28]
   11520:	mov	r0, r4
   11522:	bl	b204 <Panel_delete@@Base>
   11526:	movs	r0, #97	; 0x61
   11528:	add	sp, #24
   1152a:	pop	{r4, r5, r6, pc}
   1152c:	ldr	r3, [r5, #8]
   1152e:	mov.w	r2, #4294967295	; 0xffffffff
   11532:	mov	r0, r4
   11534:	str	r2, [r3, #28]
   11536:	bl	b204 <Panel_delete@@Base>
   1153a:	movs	r0, #97	; 0x61
   1153c:	add	sp, #24
   1153e:	pop	{r4, r5, r6, pc}
   11540:	mov.w	r3, #4294967295	; 0xffffffff
   11544:	mov	r0, r4
   11546:	str	r3, [r5, #28]
   11548:	bl	b204 <Panel_delete@@Base>
   1154c:	movs	r0, #97	; 0x61
   1154e:	add	sp, #24
   11550:	pop	{r4, r5, r6, pc}
   11552:	nop
   11554:	ldrb	r2, [r0, r7]
   11556:	movs	r0, r0
   11558:	str	r6, [r2, #60]	; 0x3c
   1155a:	movs	r0, r0
   1155c:	ldrh	r0, [r3, #2]
   1155e:	movs	r1, r0
   11560:	lsls	r0, r1, #10
   11562:	movs	r0, r0
   11564:	str	r2, [r7, #56]	; 0x38
   11566:	movs	r0, r0
   11568:			; <UNDEFINED> instruction: 0xfb7dffff
   1156c:	str	r6, [r5, #56]	; 0x38
   1156e:	movs	r0, r0
   11570:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11574:	mov	r8, r0
   11576:	ldr	r1, [pc, #196]	; (1163c <Action_pickFromVector@@Base+0x3d0>)
   11578:	sub	sp, #20
   1157a:	ldr	r0, [pc, #196]	; (11640 <Action_pickFromVector@@Base+0x3d4>)
   1157c:	movs	r6, #1
   1157e:	add	r1, pc
   11580:	ldr	r5, [pc, #192]	; (11644 <Action_pickFromVector@@Base+0x3d8>)
   11582:	add	r0, pc
   11584:	ldr	r4, [pc, #192]	; (11648 <Action_pickFromVector@@Base+0x3dc>)
   11586:	bl	91d4 <FunctionBar_newEnterEsc@@Base>
   1158a:	add	r5, pc
   1158c:	movs	r3, #0
   1158e:	mov	r1, r3
   11590:	mov	r2, r3
   11592:	str	r0, [sp, #8]
   11594:	mov	r0, r3
   11596:	ldr	r4, [r5, r4]
   11598:	str	r6, [sp, #0]
   1159a:	str	r4, [sp, #4]
   1159c:	bl	b198 <Panel_new@@Base>
   115a0:	ldr	r1, [pc, #168]	; (1164c <Action_pickFromVector@@Base+0x3e0>)
   115a2:	add	r1, pc
   115a4:	mov	r7, r0
   115a6:	bl	b22c <Panel_setHeader@@Base>
   115aa:	ldr.w	r3, [r8]
   115ae:	ldr	r4, [r3, #28]
   115b0:	ldr	r3, [r4, #0]
   115b2:	cbz	r3, 1160a <Action_pickFromVector@@Base+0x39e>
   115b4:	ldr	r2, [pc, #152]	; (11650 <Action_pickFromVector@@Base+0x3e4>)
   115b6:	movs	r6, #0
   115b8:	ldr.w	r9, [r5, r2]
   115bc:	b.n	115cc <Action_pickFromVector@@Base+0x360>
   115be:	mov	r0, r5
   115c0:	adds	r6, #1
   115c2:	blx	6758 <free@plt+0x4>
   115c6:	ldr.w	r3, [r4, #4]!
   115ca:	cbz	r3, 1160a <Action_pickFromVector@@Base+0x39e>
   115cc:	lsls	r3, r3, #4
   115ce:	ldr.w	r0, [r9, r3]
   115d2:	bl	e9e4 <String_trim@@Base>
   115d6:	ldr	r1, [r4, #0]
   115d8:	mov	r5, r0
   115da:	bl	9b90 <ListItem_new@@Base>
   115de:	mov	r1, r0
   115e0:	mov	r0, r7
   115e2:	bl	b294 <Panel_add@@Base>
   115e6:	ldr.w	r3, [r8]
   115ea:	ldr	r2, [r4, #0]
   115ec:	ldr	r3, [r3, #52]	; 0x34
   115ee:	cmp	r2, r3
   115f0:	bne.n	115be <Action_pickFromVector@@Base+0x352>
   115f2:	mov	r1, r6
   115f4:	mov	r0, r7
   115f6:	bl	b350 <Panel_setSelected@@Base>
   115fa:	mov	r0, r5
   115fc:	blx	6758 <free@plt+0x4>
   11600:	ldr.w	r3, [r4, #4]!
   11604:	adds	r6, #1
   11606:	cmp	r3, #0
   11608:	bne.n	115cc <Action_pickFromVector@@Base+0x360>
   1160a:	movs	r2, #15
   1160c:	mov	r1, r7
   1160e:	mov	r0, r8
   11610:	movs	r4, #97	; 0x61
   11612:	bl	1126c <Action_pickFromVector@@Base>
   11616:	cbz	r0, 1162c <Action_pickFromVector@@Base+0x3c0>
   11618:	ldr	r1, [r0, #8]
   1161a:	movs	r4, #109	; 0x6d
   1161c:	ldr.w	r3, [r8]
   11620:	movs	r0, #1
   11622:	movs	r2, #0
   11624:	strd	r0, r1, [r3, #48]	; 0x30
   11628:	strb.w	r2, [r3, #58]	; 0x3a
   1162c:	ldr	r3, [r7, #0]
   1162e:	mov	r0, r7
   11630:	ldr	r3, [r3, #8]
   11632:	blx	r3
   11634:	mov	r0, r4
   11636:	add	sp, #20
   11638:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1163c:	ldrb	r2, [r5, r3]
   1163e:	movs	r0, r0
   11640:	str	r6, [r4, #48]	; 0x30
   11642:	movs	r0, r0
   11644:	strh	r2, [r0, #60]	; 0x3c
   11646:	movs	r1, r0
   11648:	lsls	r0, r1, #10
   1164a:	movs	r0, r0
   1164c:	str	r6, [r1, #48]	; 0x30
   1164e:	movs	r0, r0
   11650:	lsls	r4, r1, #10
   11652:	movs	r0, r0
   11654:	b.n	11570 <Action_pickFromVector@@Base+0x304>
   11656:	nop
   11658:	ldr	r2, [r0, #0]
   1165a:	ldrb.w	r2, [r2, #58]	; 0x3a
   1165e:	cbz	r2, 1167c <Action_pickFromVector@@Base+0x410>
   11660:	push	{r3, lr}
   11662:	ldr	r0, [r0, #12]
   11664:	bl	b2f8 <Panel_getSelected@@Base>
   11668:	mov	r3, r0
   1166a:	cbz	r0, 1167a <Action_pickFromVector@@Base+0x40e>
   1166c:	ldrb.w	r2, [r0, #47]	; 0x2f
   11670:	movs	r0, #3
   11672:	eor.w	r2, r2, #1
   11676:	strb.w	r2, [r3, #47]	; 0x2f
   1167a:	pop	{r3, pc}
   1167c:	b.n	11570 <Action_pickFromVector@@Base+0x304>
   1167e:	nop

00011680 <Action_setUserOnly@@Base>:
   11680:	push	{r4, lr}
   11682:	mov	r4, r1
   11684:	blx	6698 <getpwnam@plt>
   11688:	mov.w	r3, #4294967295	; 0xffffffff
   1168c:	cbz	r0, 11692 <Action_setUserOnly@@Base+0x12>
   1168e:	ldr	r3, [r0, #8]
   11690:	movs	r0, #1
   11692:	str	r3, [r4, #0]
   11694:	pop	{r4, pc}
   11696:	nop

00011698 <Action_setSortKey@@Base>:
   11698:	mov	r3, r0
   1169a:	movs	r2, #0
   1169c:	movs	r0, #1
   1169e:	str	r1, [r3, #52]	; 0x34
   116a0:	str	r0, [r3, #48]	; 0x30
   116a2:	movs	r0, #77	; 0x4d
   116a4:	strb.w	r2, [r3, #58]	; 0x3a
   116a8:	bx	lr
   116aa:	nop

000116ac <Action_setBindings@@Base>:
   116ac:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   116b0:	ldr	r2, [pc, #328]	; (117fc <Action_setBindings@@Base+0x150>)
   116b2:	ldr	r6, [pc, #332]	; (11800 <Action_setBindings@@Base+0x154>)
   116b4:	ldr	r5, [pc, #332]	; (11804 <Action_setBindings@@Base+0x158>)
   116b6:	add	r2, pc
   116b8:	ldr	r4, [pc, #332]	; (11808 <Action_setBindings@@Base+0x15c>)
   116ba:	add	r6, pc
   116bc:	ldr	r1, [pc, #332]	; (1180c <Action_setBindings@@Base+0x160>)
   116be:	add	r5, pc
   116c0:	ldr	r3, [pc, #332]	; (11810 <Action_setBindings@@Base+0x164>)
   116c2:	add	r4, pc
   116c4:	add	r1, pc
   116c6:	str.w	r6, [r0, #1640]	; 0x668
   116ca:	add	r3, pc
   116cc:	str.w	r5, [r0, #308]	; 0x134
   116d0:	str.w	r2, [r0, #336]	; 0x150
   116d4:	str.w	r4, [r0, #320]	; 0x140
   116d8:	str.w	r1, [r0, #288]	; 0x120
   116dc:	str.w	r3, [r0, #300]	; 0x12c
   116e0:	ldr	r6, [pc, #304]	; (11814 <Action_setBindings@@Base+0x168>)
   116e2:	ldr	r5, [pc, #308]	; (11818 <Action_setBindings@@Base+0x16c>)
   116e4:	ldr	r2, [pc, #308]	; (1181c <Action_setBindings@@Base+0x170>)
   116e6:	add	r6, pc
   116e8:	ldr	r4, [pc, #308]	; (11820 <Action_setBindings@@Base+0x174>)
   116ea:	add	r5, pc
   116ec:	ldr	r1, [pc, #308]	; (11824 <Action_setBindings@@Base+0x178>)
   116ee:	add	r2, pc
   116f0:	ldr	r3, [pc, #308]	; (11828 <Action_setBindings@@Base+0x17c>)
   116f2:	add	r4, pc
   116f4:	add	r1, pc
   116f6:	str.w	r6, [r0, #448]	; 0x1c0
   116fa:	add	r3, pc
   116fc:	str.w	r5, [r0, #292]	; 0x124
   11700:	str.w	r2, [r0, #388]	; 0x184
   11704:	str.w	r4, [r0, #464]	; 0x1d0
   11708:	str.w	r4, [r0, #1076]	; 0x434
   1170c:	str.w	r1, [r0, #1072]	; 0x430
   11710:	str.w	r1, [r0, #368]	; 0x170
   11714:	str.w	r3, [r0, #1068]	; 0x42c
   11718:	str.w	r3, [r0, #188]	; 0xbc
   1171c:	ldr	r7, [pc, #268]	; (1182c <Action_setBindings@@Base+0x180>)
   1171e:	ldr	r6, [pc, #272]	; (11830 <Action_setBindings@@Base+0x184>)
   11720:	ldr	r5, [pc, #272]	; (11834 <Action_setBindings@@Base+0x188>)
   11722:	add	r7, pc
   11724:	ldr	r2, [pc, #272]	; (11838 <Action_setBindings@@Base+0x18c>)
   11726:	add	r6, pc
   11728:	ldr	r4, [pc, #272]	; (1183c <Action_setBindings@@Base+0x190>)
   1172a:	add	r5, pc
   1172c:	ldr	r1, [pc, #272]	; (11840 <Action_setBindings@@Base+0x194>)
   1172e:	add	r2, pc
   11730:	ldr	r3, [pc, #272]	; (11844 <Action_setBindings@@Base+0x198>)
   11732:	add	r4, pc
   11734:	add	r1, pc
   11736:	str.w	r7, [r0, #372]	; 0x174
   1173a:	add	r3, pc
   1173c:	str.w	r7, [r0, #1084]	; 0x43c
   11740:	str.w	r6, [r0, #364]	; 0x16c
   11744:	str.w	r6, [r0, #1088]	; 0x440
   11748:	str.w	r5, [r0, #1080]	; 0x438
   1174c:	str.w	r5, [r0, #1128]	; 0x468
   11750:	str.w	r2, [r0, #240]	; 0xf0
   11754:	str.w	r2, [r0, #176]	; 0xb0
   11758:	str.w	r2, [r0, #248]	; 0xf8
   1175c:	str.w	r2, [r0, #184]	; 0xb8
   11760:	str.w	r4, [r0, #1096]	; 0x448
   11764:	str.w	r4, [r0, #452]	; 0x1c4
   11768:	str.w	r1, [r0, #1092]	; 0x444
   1176c:	str.w	r1, [r0, #428]	; 0x1ac
   11770:	str.w	r3, [r0, #1144]	; 0x478
   11774:	str.w	r3, [r0, #172]	; 0xac
   11778:	ldr	r7, [pc, #204]	; (11848 <Action_setBindings@@Base+0x19c>)
   1177a:	str.w	r3, [r0, #244]	; 0xf4
   1177e:	ldr.w	ip, [pc, #204]	; 1184c <Action_setBindings@@Base+0x1a0>
   11782:	add	r7, pc
   11784:	ldr.w	lr, [pc, #200]	; 11850 <Action_setBindings@@Base+0x1a4>
   11788:	ldr.w	r8, [pc, #200]	; 11854 <Action_setBindings@@Base+0x1a8>
   1178c:	add	ip, pc
   1178e:	ldr.w	r9, [pc, #200]	; 11858 <Action_setBindings@@Base+0x1ac>
   11792:	add	lr, pc
   11794:	ldr.w	sl, [pc, #196]	; 1185c <Action_setBindings@@Base+0x1b0>
   11798:	add	r8, pc
   1179a:	ldr	r6, [pc, #196]	; (11860 <Action_setBindings@@Base+0x1b4>)
   1179c:	add	r9, pc
   1179e:	ldr	r5, [pc, #196]	; (11864 <Action_setBindings@@Base+0x1b8>)
   117a0:	add	sl, pc
   117a2:	ldr	r4, [pc, #196]	; (11868 <Action_setBindings@@Base+0x1bc>)
   117a4:	add	r6, pc
   117a6:	ldr	r1, [pc, #196]	; (1186c <Action_setBindings@@Base+0x1c0>)
   117a8:	add	r5, pc
   117aa:	ldr	r2, [pc, #196]	; (11870 <Action_setBindings@@Base+0x1c4>)
   117ac:	add	r4, pc
   117ae:	str.w	r3, [r0, #180]	; 0xb4
   117b2:	add	r1, pc
   117b4:	ldr	r3, [pc, #188]	; (11874 <Action_setBindings@@Base+0x1c8>)
   117b6:	add	r2, pc
   117b8:	str.w	r7, [r0, #508]	; 0x1fc
   117bc:	add	r3, pc
   117be:	str.w	ip, [r0, #468]	; 0x1d4
   117c2:	str.w	lr, [r0, #280]	; 0x118
   117c6:	str.w	r8, [r0, #432]	; 0x1b0
   117ca:	str.w	r9, [r0, #460]	; 0x1cc
   117ce:	str.w	sl, [r0, #128]	; 0x80
   117d2:	str	r6, [r0, #48]	; 0x30
   117d4:	str.w	r5, [r0, #340]	; 0x154
   117d8:	str.w	r4, [r0, #396]	; 0x18c
   117dc:	str.w	r1, [r0, #404]	; 0x194
   117e0:	str.w	r2, [r0, #332]	; 0x14c
   117e4:	str.w	r2, [r0, #268]	; 0x10c
   117e8:	str.w	r2, [r0, #1064]	; 0x428
   117ec:	str.w	r3, [r0, #1060]	; 0x424
   117f0:	str.w	r3, [r0, #416]	; 0x1a0
   117f4:	str.w	r3, [r0, #252]	; 0xfc
   117f8:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   117fc:	vrecps.f16	<illegal reg q15.5>, <illegal reg q15.5>, <illegal reg q15.5>
   11800:	bl	35802 <__bss_end__@@Base+0x9482>
   11804:	vrecps.f16	<illegal reg q7.5>, <illegal reg q15.5>, <illegal reg q15.5>
   11808:	vrsqrts.f16	<illegal reg q7.5>, <illegal reg q11.5>, <illegal reg q15.5>
   1180c:			; <UNDEFINED> instruction: 0xef81ffff
   11810:	vrsqrts.f32	<illegal reg q15.5>, <illegal reg q11.5>, <illegal reg q15.5>
   11814:	vrsqrts.f16	<illegal reg q15.5>, <illegal reg q11.5>, <illegal reg q15.5>
   11818:	vld4.32	{d31[],d33[],d35[],d37[]}, [fp :128]
   1181c:	ldc2	15, cr15, [pc, #-1020]	; 11424 <Action_pickFromVector@@Base+0x1b8>
   11820:			; <UNDEFINED> instruction: 0xfa2bffff
   11824:			; <UNDEFINED> instruction: 0xfa01ffff
   11828:	vld4.32	{d31[],d33[],d35[],d37[]}, [r7 :128]
   1182c:			; <UNDEFINED> instruction: 0xfae3ffff
   11830:			; <UNDEFINED> instruction: 0xf94fffff
   11834:	vminnm.f32	<illegal reg q7.5>, <illegal reg q13.5>, <illegal reg q15.5>
   11838:	vminnm.f32	<illegal reg q7.5>, <illegal reg q9.5>, <illegal reg q15.5>
   1183c:	vrsqrts.f16	<illegal reg q7.5>, <illegal reg q15.5>, <illegal reg q15.5>
   11840:	stc2l	15, cr15, [r1], #-1020	; 0xfffffc04
   11844:	vrsqrts.f16	<illegal reg q7.5>, <illegal reg q13.5>, <illegal reg q15.5>
   11848:			; <UNDEFINED> instruction: 0xfa27ffff
   1184c:	stc2	15, cr15, [sp, #-1020]	; 0xfffffc04
   11850:	mrc	15, 7, APSR_nzcv, cr15, cr15, {7}
   11854:	bl	fffc7856 <__bss_end__@@Base+0xfff9b4d6>
   11858:	bl	fff7f85a <__bss_end__@@Base+0xfff534da>
   1185c:	bl	fff5b85e <__bss_end__@@Base+0xfff2f4de>
   11860:	vrecps.f16	<illegal reg q7.5>, <illegal reg q14.5>, <illegal reg q15.5>
   11864:			; <UNDEFINED> instruction: 0xefadffff
   11868:	ldr??.w	pc, [sp, #4095]	; 0xfff
   1186c:	vrsqrts.f32	<illegal reg q15.5>, <illegal reg q13.5>, <illegal reg q15.5>
   11870:	bl	fffe1872 <__bss_end__@@Base+0xfffb54f2>
   11874:			; <UNDEFINED> instruction: 0xefc1ffff

00011878 <EnvScreen_delete@@Base>:
   11878:	push	{r3, lr}
   1187a:	bl	119e0 <InfoScreen_done@@Base>
   1187e:	ldmia.w	sp!, {r3, lr}
   11882:	b.w	6754 <free@plt>
   11886:	nop

00011888 <EnvScreen_draw@@Base>:
   11888:	ldr	r2, [r0, #4]
   1188a:	ldr	r1, [pc, #12]	; (11898 <EnvScreen_draw@@Base+0x10>)
   1188c:	ldr	r3, [r2, #28]
   1188e:	add	r1, pc
   11890:	ldr	r2, [r2, #16]
   11892:	b.w	119fc <InfoScreen_drawTitled@@Base>
   11896:	nop
   11898:	str	r2, [r0, #56]	; 0x38
	...

0001189c <EnvScreen_scan@@Base>:
   1189c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   118a0:	mov	r5, r0
   118a2:	ldr	r7, [r0, #8]
   118a4:	mov	r0, r7
   118a6:	bl	b344 <Panel_getSelectedIndex@@Base>
   118aa:	cmp	r0, #0
   118ac:	it	le
   118ae:	movle.w	r8, #0
   118b2:	ble.n	118bc <EnvScreen_scan@@Base+0x20>
   118b4:	mov	r0, r7
   118b6:	bl	b344 <Panel_getSelectedIndex@@Base>
   118ba:	mov	r8, r0
   118bc:	mov	r0, r7
   118be:	bl	b278 <Panel_prune@@Base>
   118c2:	ldr	r3, [r5, #4]
   118c4:	ldr	r0, [r3, #16]
   118c6:	bl	12288 <Platform_getProcessEnv@@Base>
   118ca:	mov	r6, r0
   118cc:	cbz	r0, 1190a <EnvScreen_scan@@Base+0x6e>
   118ce:	ldrb	r3, [r0, #0]
   118d0:	cbz	r3, 118ec <EnvScreen_scan@@Base+0x50>
   118d2:	mov	r4, r0
   118d4:	mov	r1, r4
   118d6:	mov	r0, r5
   118d8:	bl	11ac0 <InfoScreen_addLine@@Base>
   118dc:	mov	r0, r4
   118de:	blx	6a0c <strlen@plt>
   118e2:	adds	r3, r0, #1
   118e4:	add	r4, r3
   118e6:	ldrb	r3, [r4, #0]
   118e8:	cmp	r3, #0
   118ea:	bne.n	118d4 <EnvScreen_scan@@Base+0x38>
   118ec:	mov	r0, r6
   118ee:	blx	6758 <free@plt+0x4>
   118f2:	ldr	r0, [r5, #20]
   118f4:	bl	f79c <Vector_insertionSort@@Base>
   118f8:	ldr	r0, [r7, #24]
   118fa:	bl	f79c <Vector_insertionSort@@Base>
   118fe:	mov	r1, r8
   11900:	mov	r0, r7
   11902:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11906:	b.w	b350 <Panel_setSelected@@Base>
   1190a:	ldr	r1, [pc, #12]	; (11918 <EnvScreen_scan@@Base+0x7c>)
   1190c:	mov	r0, r5
   1190e:	add	r1, pc
   11910:	bl	11ac0 <InfoScreen_addLine@@Base>
   11914:	b.n	118f2 <EnvScreen_scan@@Base+0x56>
   11916:	nop
   11918:	str	r2, [r4, #48]	; 0x30
	...

0001191c <EnvScreen_new@@Base>:
   1191c:	push	{r4, r5, r6, lr}
   1191e:	sub	sp, #16
   11920:	mov	r1, r0
   11922:	movs	r0, #24
   11924:	str	r1, [sp, #12]
   11926:	bl	11d84 <xMalloc@@Base>
   1192a:	ldr	r4, [pc, #36]	; (11950 <EnvScreen_new@@Base+0x34>)
   1192c:	movs	r2, #0
   1192e:	ldr	r5, [pc, #36]	; (11954 <EnvScreen_new@@Base+0x38>)
   11930:	add	r4, pc
   11932:	ldr	r6, [pc, #36]	; (11958 <EnvScreen_new@@Base+0x3c>)
   11934:	ldr	r1, [sp, #12]
   11936:	mov	r3, r4
   11938:	add	r6, pc
   1193a:	str	r6, [r0, #0]
   1193c:	ldr	r3, [r4, r5]
   1193e:	ldr	r4, [pc, #28]	; (1195c <EnvScreen_new@@Base+0x40>)
   11940:	ldr	r3, [r3, #0]
   11942:	add	r4, pc
   11944:	str	r4, [sp, #0]
   11946:	subs	r3, #3
   11948:	bl	11960 <InfoScreen_init@@Base>
   1194c:	add	sp, #16
   1194e:	pop	{r4, r5, r6, pc}
   11950:	strh	r4, [r3, #30]
   11952:	movs	r1, r0
   11954:	lsls	r0, r2, #11
   11956:	movs	r0, r0
   11958:	str	r5, [sp, #688]	; 0x2b0
   1195a:	movs	r1, r0
   1195c:	str	r2, [r1, #12]
	...

00011960 <InfoScreen_init@@Base>:
   11960:	push	{r4, r5, r6, lr}
   11962:	mov	r4, r0
   11964:	ldr	r6, [pc, #100]	; (119cc <InfoScreen_init@@Base+0x6c>)
   11966:	sub	sp, #24
   11968:	mov	r5, r2
   1196a:	str	r1, [r0, #4]
   1196c:	add	r6, pc
   1196e:	cbz	r2, 119b4 <InfoScreen_init@@Base+0x54>
   11970:	ldr	r2, [pc, #92]	; (119d0 <InfoScreen_init@@Base+0x70>)
   11972:	movs	r0, #0
   11974:	ldr	r1, [pc, #92]	; (119d4 <InfoScreen_init@@Base+0x74>)
   11976:	ldr	r1, [r6, r1]
   11978:	str	r5, [sp, #8]
   1197a:	ldr	r6, [r6, r2]
   1197c:	ldr	r2, [r1, #0]
   1197e:	movs	r1, #1
   11980:	str	r0, [sp, #0]
   11982:	str	r6, [sp, #4]
   11984:	bl	b198 <Panel_new@@Base>
   11988:	mov	r3, r0
   1198a:	mov	r0, r5
   1198c:	str	r3, [r4, #8]
   1198e:	bl	10254 <IncSet_new@@Base>
   11992:	ldr	r3, [r4, #8]
   11994:	mov.w	r2, #4294967295	; 0xffffffff
   11998:	movs	r1, #1
   1199a:	ldr	r3, [r3, #24]
   1199c:	str	r0, [r4, #16]
   1199e:	ldr	r0, [r3, #4]
   119a0:	bl	f6dc <Vector_new@@Base>
   119a4:	ldr	r1, [sp, #40]	; 0x28
   119a6:	str	r0, [r4, #20]
   119a8:	ldr	r0, [r4, #8]
   119aa:	bl	b22c <Panel_setHeader@@Base>
   119ae:	mov	r0, r4
   119b0:	add	sp, #24
   119b2:	pop	{r4, r5, r6, pc}
   119b4:	ldr	r1, [pc, #32]	; (119d8 <InfoScreen_init@@Base+0x78>)
   119b6:	ldr	r2, [pc, #36]	; (119dc <InfoScreen_init@@Base+0x7c>)
   119b8:	add	r1, pc
   119ba:	str	r3, [sp, #20]
   119bc:	add	r2, pc
   119be:	add.w	r0, r1, #16
   119c2:	bl	90fc <FunctionBar_new@@Base>
   119c6:	ldr	r3, [sp, #20]
   119c8:	mov	r5, r0
   119ca:	b.n	11970 <InfoScreen_init@@Base+0x10>
   119cc:	strh	r0, [r4, #28]
   119ce:	movs	r1, r0
   119d0:	lsls	r0, r1, #10
   119d2:	movs	r0, r0
   119d4:	lsls	r0, r7, #10
   119d6:	movs	r0, r0
   119d8:	strh	r0, [r6, #6]
   119da:	movs	r1, r0
   119dc:	str	r5, [sp, #288]	; 0x120
   119de:	movs	r1, r0

000119e0 <InfoScreen_done@@Base>:
   119e0:	push	{r4, lr}
   119e2:	mov	r4, r0
   119e4:	ldr	r0, [r0, #8]
   119e6:	bl	b204 <Panel_delete@@Base>
   119ea:	ldr	r0, [r4, #16]
   119ec:	bl	102c8 <IncSet_delete@@Base>
   119f0:	ldr	r0, [r4, #20]
   119f2:	bl	f720 <Vector_delete@@Base>
   119f6:	mov	r0, r4
   119f8:	pop	{r4, pc}
   119fa:	nop

000119fc <InfoScreen_drawTitled@@Base>:
   119fc:	push	{r1, r2, r3}
   119fe:	ldr	r2, [pc, #164]	; (11aa4 <InfoScreen_drawTitled@@Base+0xa8>)
   11a00:	ldr	r3, [pc, #164]	; (11aa8 <InfoScreen_drawTitled@@Base+0xac>)
   11a02:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11a06:	add	r2, pc
   11a08:	sub	sp, #12
   11a0a:	ldr	r6, [pc, #160]	; (11aac <InfoScreen_drawTitled@@Base+0xb0>)
   11a0c:	add	r1, sp, #36	; 0x24
   11a0e:	ldr	r3, [r2, r3]
   11a10:	ldr	r2, [pc, #156]	; (11ab0 <InfoScreen_drawTitled@@Base+0xb4>)
   11a12:	add	r6, pc
   11a14:	ldr.w	r7, [r1], #4
   11a18:	ldr	r3, [r3, #0]
   11a1a:	str	r3, [sp, #4]
   11a1c:	mov.w	r3, #0
   11a20:	ldr	r3, [pc, #144]	; (11ab4 <InfoScreen_drawTitled@@Base+0xb8>)
   11a22:	mov	r5, r0
   11a24:	str	r1, [sp, #0]
   11a26:	ldr.w	r8, [r6, r2]
   11a2a:	ldr	r4, [r6, r3]
   11a2c:	ldr.w	r3, [r8]
   11a30:	ldr	r0, [r4, #0]
   11a32:	ldr	r1, [r3, #44]	; 0x2c
   11a34:	blx	6c88 <wattrset@plt+0x4>
   11a38:	movs	r2, #0
   11a3a:	ldr	r0, [r4, #0]
   11a3c:	mov	r1, r2
   11a3e:	blx	6668 <wmove@plt>
   11a42:	adds	r0, #1
   11a44:	beq.n	11a54 <InfoScreen_drawTitled@@Base+0x58>
   11a46:	ldr	r3, [pc, #112]	; (11ab8 <InfoScreen_drawTitled@@Base+0xbc>)
   11a48:	movs	r1, #32
   11a4a:	ldr	r0, [r4, #0]
   11a4c:	ldr	r3, [r6, r3]
   11a4e:	ldr	r2, [r3, #0]
   11a50:	blx	6b9c <whline@plt>
   11a54:	movs	r2, #0
   11a56:	ldr	r0, [r4, #0]
   11a58:	mov	r1, r2
   11a5a:	blx	6668 <wmove@plt>
   11a5e:	ldr	r2, [sp, #0]
   11a60:	mov	r1, r7
   11a62:	ldr	r0, [r4, #0]
   11a64:	blx	6c14 <vw_printw@plt>
   11a68:	ldr.w	r3, [r8]
   11a6c:	ldr	r0, [r4, #0]
   11a6e:	ldr	r1, [r3, #4]
   11a70:	blx	6c88 <wattrset@plt+0x4>
   11a74:	ldr	r0, [r5, #8]
   11a76:	movs	r1, #1
   11a78:	strb.w	r1, [r0, #50]	; 0x32
   11a7c:	bl	b370 <Panel_draw@@Base>
   11a80:	ldr	r0, [r5, #16]
   11a82:	bl	105c0 <IncSet_drawBar@@Base>
   11a86:	ldr	r2, [pc, #52]	; (11abc <InfoScreen_drawTitled@@Base+0xc0>)
   11a88:	ldr	r3, [pc, #28]	; (11aa8 <InfoScreen_drawTitled@@Base+0xac>)
   11a8a:	add	r2, pc
   11a8c:	ldr	r3, [r2, r3]
   11a8e:	ldr	r2, [r3, #0]
   11a90:	ldr	r3, [sp, #4]
   11a92:	eors	r2, r3
   11a94:	bne.n	11aa0 <InfoScreen_drawTitled@@Base+0xa4>
   11a96:	add	sp, #12
   11a98:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11a9c:	add	sp, #12
   11a9e:	bx	lr
   11aa0:	blx	67d0 <__stack_chk_fail@plt>
   11aa4:	strh	r6, [r0, #24]
   11aa6:	movs	r1, r0
   11aa8:	lsls	r0, r0, #9
   11aaa:	movs	r0, r0
   11aac:	strh	r2, [r7, #22]
   11aae:	movs	r1, r0
   11ab0:	lsls	r0, r6, #9
   11ab2:	movs	r0, r0
   11ab4:	lsls	r4, r5, #9
   11ab6:	movs	r0, r0
   11ab8:	lsls	r0, r7, #10
   11aba:	movs	r0, r0
   11abc:	strh	r2, [r0, #20]
   11abe:	movs	r1, r0

00011ac0 <InfoScreen_addLine@@Base>:
   11ac0:	push	{r4, r5, r6, lr}
   11ac2:	mov	r4, r0
   11ac4:	ldr	r6, [r0, #20]
   11ac6:	mov	r5, r1
   11ac8:	mov	r0, r1
   11aca:	movs	r1, #0
   11acc:	bl	9b90 <ListItem_new@@Base>
   11ad0:	mov	r1, r0
   11ad2:	mov	r0, r6
   11ad4:	bl	f92c <Vector_add@@Base>
   11ad8:	ldr	r1, [r4, #16]
   11ada:	ldrb.w	r3, [r1, #120]	; 0x78
   11ade:	cbz	r3, 11aea <InfoScreen_addLine@@Base+0x2a>
   11ae0:	adds	r1, #56	; 0x38
   11ae2:	mov	r0, r5
   11ae4:	blx	66a4 <strcasestr@plt>
   11ae8:	cbz	r0, 11b04 <InfoScreen_addLine@@Base+0x44>
   11aea:	ldr	r2, [r4, #20]
   11aec:	ldr	r0, [r4, #8]
   11aee:	ldmia.w	sp!, {r4, r5, r6, lr}
   11af2:	ldr	r3, [r2, #16]
   11af4:	ldr	r2, [r2, #0]
   11af6:	add.w	r3, r3, #1073741824	; 0x40000000
   11afa:	subs	r3, #1
   11afc:	ldr.w	r1, [r2, r3, lsl #2]
   11b00:	b.w	b294 <Panel_add@@Base>
   11b04:	pop	{r4, r5, r6, pc}
   11b06:	nop

00011b08 <InfoScreen_appendLine@@Base>:
   11b08:	ldr	r2, [r0, #20]
   11b0a:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   11b0e:	mov	r4, r0
   11b10:	ldr	r3, [r2, #16]
   11b12:	mov	r5, r1
   11b14:	ldr	r2, [r2, #0]
   11b16:	add.w	r3, r3, #1073741824	; 0x40000000
   11b1a:	subs	r3, #1
   11b1c:	ldr.w	r6, [r2, r3, lsl #2]
   11b20:	mov	r0, r6
   11b22:	bl	9bbc <ListItem_append@@Base>
   11b26:	ldr	r7, [r4, #16]
   11b28:	ldrb.w	r3, [r7, #120]	; 0x78
   11b2c:	cbnz	r3, 11b32 <InfoScreen_appendLine@@Base+0x2a>
   11b2e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11b32:	ldr.w	r8, [r4, #8]
   11b36:	mov	r0, r8
   11b38:	bl	b348 <Panel_size@@Base>
   11b3c:	mov	r1, r0
   11b3e:	mov	r0, r8
   11b40:	subs	r1, #1
   11b42:	bl	b2c4 <Panel_get@@Base>
   11b46:	cmp	r6, r0
   11b48:	beq.n	11b2e <InfoScreen_appendLine@@Base+0x26>
   11b4a:	add.w	r1, r7, #56	; 0x38
   11b4e:	mov	r0, r5
   11b50:	blx	66a4 <strcasestr@plt>
   11b54:	cmp	r0, #0
   11b56:	beq.n	11b2e <InfoScreen_appendLine@@Base+0x26>
   11b58:	ldr	r0, [r4, #8]
   11b5a:	mov	r1, r6
   11b5c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   11b60:	b.w	b294 <Panel_add@@Base>

00011b64 <InfoScreen_run@@Base>:
   11b64:	ldr	r2, [pc, #484]	; (11d4c <InfoScreen_run@@Base+0x1e8>)
   11b66:	ldr	r3, [pc, #488]	; (11d50 <InfoScreen_run@@Base+0x1ec>)
   11b68:	add	r2, pc
   11b6a:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   11b6e:	sub	sp, #32
   11b70:	ldr	r3, [r2, r3]
   11b72:	mov	r5, r0
   11b74:	ldr	r6, [pc, #476]	; (11d54 <InfoScreen_run@@Base+0x1f0>)
   11b76:	ldr	r3, [r3, #0]
   11b78:	str	r3, [sp, #28]
   11b7a:	mov.w	r3, #0
   11b7e:	ldr	r3, [r0, #0]
   11b80:	add	r6, pc
   11b82:	ldr.w	r8, [r0, #8]
   11b86:	ldr	r2, [r3, #16]
   11b88:	cbz	r2, 11b8e <InfoScreen_run@@Base+0x2a>
   11b8a:	blx	r2
   11b8c:	ldr	r3, [r5, #0]
   11b8e:	ldr	r3, [r3, #20]
   11b90:	mov	r0, r5
   11b92:	blx	r3
   11b94:	ldr	r3, [pc, #448]	; (11d58 <InfoScreen_run@@Base+0x1f4>)
   11b96:	movw	r9, #409	; 0x199
   11b9a:	ldr	r7, [r6, r3]
   11b9c:	movs	r1, #1
   11b9e:	mov	r0, r8
   11ba0:	bl	b370 <Panel_draw@@Base>
   11ba4:	ldr	r3, [r5, #16]
   11ba6:	ldr	r3, [r3, #112]	; 0x70
   11ba8:	cbz	r3, 11bbe <InfoScreen_run@@Base+0x5a>
   11baa:	ldr	r2, [pc, #432]	; (11d5c <InfoScreen_run@@Base+0x1f8>)
   11bac:	ldr	r3, [pc, #432]	; (11d60 <InfoScreen_run@@Base+0x1fc>)
   11bae:	ldr	r0, [r7, #0]
   11bb0:	ldr	r2, [r6, r2]
   11bb2:	ldr	r3, [r6, r3]
   11bb4:	ldr	r1, [r2, #0]
   11bb6:	ldr	r2, [r3, #0]
   11bb8:	subs	r1, #1
   11bba:	blx	6668 <wmove@plt>
   11bbe:	movs	r0, #25
   11bc0:	blx	686c <set_escdelay@plt>
   11bc4:	ldr	r0, [r7, #0]
   11bc6:	blx	6860 <wgetch@plt>
   11bca:	adds	r1, r0, #1
   11bcc:	mov	r4, r0
   11bce:	beq.n	11ccc <InfoScreen_run@@Base+0x168>
   11bd0:	cmp	r0, r9
   11bd2:	beq.w	11cf0 <InfoScreen_run@@Base+0x18c>
   11bd6:	ldr	r0, [r5, #16]
   11bd8:	ldr	r3, [r0, #112]	; 0x70
   11bda:	cmp	r3, #0
   11bdc:	bne.n	11cde <InfoScreen_run@@Base+0x17a>
   11bde:	cmp.w	r4, #274	; 0x112
   11be2:	bgt.n	11ca8 <InfoScreen_run@@Base+0x144>
   11be4:	cmp.w	r4, #266	; 0x10a
   11be8:	bgt.n	11c10 <InfoScreen_run@@Base+0xac>
   11bea:	cmp	r4, #47	; 0x2f
   11bec:	beq.n	11c68 <InfoScreen_run@@Base+0x104>
   11bee:	ble.n	11c94 <InfoScreen_run@@Base+0x130>
   11bf0:	cmp	r4, #92	; 0x5c
   11bf2:	beq.n	11c5e <InfoScreen_run@@Base+0xfa>
   11bf4:	cmp	r4, #113	; 0x71
   11bf6:	bne.n	11c7a <InfoScreen_run@@Base+0x116>
   11bf8:	ldr	r2, [pc, #360]	; (11d64 <InfoScreen_run@@Base+0x200>)
   11bfa:	ldr	r3, [pc, #340]	; (11d50 <InfoScreen_run@@Base+0x1ec>)
   11bfc:	add	r2, pc
   11bfe:	ldr	r3, [r2, r3]
   11c00:	ldr	r2, [r3, #0]
   11c02:	ldr	r3, [sp, #28]
   11c04:	eors	r2, r3
   11c06:	bne.w	11d48 <InfoScreen_run@@Base+0x1e4>
   11c0a:	add	sp, #32
   11c0c:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   11c10:	mvn.w	r3, #266	; 0x10a
   11c14:	adds	r3, r4, r3
   11c16:	cmp	r3, #7
   11c18:	bhi.n	11c7a <InfoScreen_run@@Base+0x116>
   11c1a:	add	r2, pc, #8	; (adr r2, 11c24 <InfoScreen_run@@Base+0xc0>)
   11c1c:	ldr.w	r3, [r2, r3, lsl #2]
   11c20:	add	r2, r3
   11c22:	bx	r2
   11c24:	lsls	r5, r0, #1
   11c26:	movs	r0, r0
   11c28:	movs	r3, r7
   11c2a:	movs	r0, r0
   11c2c:	movs	r1, r4
   11c2e:	movs	r0, r0
   11c30:	lsls	r7, r2, #1
   11c32:	movs	r0, r0
   11c34:	lsls	r7, r2, #1
   11c36:	movs	r0, r0
   11c38:	lsls	r7, r2, #1
   11c3a:	movs	r0, r0
   11c3c:	lsls	r7, r2, #1
   11c3e:	movs	r0, r0
   11c40:			; <UNDEFINED> instruction: 0xffd5ffff
   11c44:	ldr	r0, [r7, #0]
   11c46:	blx	6c20 <wclear@plt>
   11c4a:	ldr	r3, [r5, #0]
   11c4c:	ldr	r2, [r3, #16]
   11c4e:	cbz	r2, 11c56 <InfoScreen_run@@Base+0xf2>
   11c50:	mov	r0, r5
   11c52:	blx	r2
   11c54:	ldr	r3, [r5, #0]
   11c56:	ldr	r3, [r3, #20]
   11c58:	mov	r0, r5
   11c5a:	blx	r3
   11c5c:	b.n	11b9c <InfoScreen_run@@Base+0x38>
   11c5e:	mov	r2, r8
   11c60:	movs	r1, #1
   11c62:	bl	105a4 <IncSet_activate@@Base>
   11c66:	b.n	11b9c <InfoScreen_run@@Base+0x38>
   11c68:	mov	r2, r8
   11c6a:	movs	r1, #0
   11c6c:	bl	105a4 <IncSet_activate@@Base>
   11c70:	b.n	11b9c <InfoScreen_run@@Base+0x38>
   11c72:	cmp	r4, #27
   11c74:	beq.n	11bf8 <InfoScreen_run@@Base+0x94>
   11c76:	adds	r2, r4, #1
   11c78:	beq.n	11b9c <InfoScreen_run@@Base+0x38>
   11c7a:	ldr	r3, [r5, #0]
   11c7c:	ldr	r3, [r3, #28]
   11c7e:	cbz	r3, 11c8a <InfoScreen_run@@Base+0x126>
   11c80:	mov	r1, r4
   11c82:	mov	r0, r5
   11c84:	blx	r3
   11c86:	cmp	r0, #0
   11c88:	bne.n	11b9c <InfoScreen_run@@Base+0x38>
   11c8a:	mov	r1, r4
   11c8c:	mov	r0, r8
   11c8e:	bl	b7ec <Panel_onKey@@Base>
   11c92:	b.n	11b9c <InfoScreen_run@@Base+0x38>
   11c94:	cmp	r4, #12
   11c96:	bne.n	11c72 <InfoScreen_run@@Base+0x10e>
   11c98:	ldr	r0, [r7, #0]
   11c9a:	blx	6c20 <wclear@plt>
   11c9e:	ldr	r3, [r5, #0]
   11ca0:	mov	r0, r5
   11ca2:	ldr	r3, [r3, #20]
   11ca4:	blx	r3
   11ca6:	b.n	11b9c <InfoScreen_run@@Base+0x38>
   11ca8:	cmp.w	r4, #410	; 0x19a
   11cac:	bne.n	11c7a <InfoScreen_run@@Base+0x116>
   11cae:	ldr	r2, [pc, #172]	; (11d5c <InfoScreen_run@@Base+0x1f8>)
   11cb0:	mov	r0, r8
   11cb2:	ldr	r3, [pc, #180]	; (11d68 <InfoScreen_run@@Base+0x204>)
   11cb4:	ldr	r2, [r6, r2]
   11cb6:	ldr	r3, [r6, r3]
   11cb8:	ldr	r2, [r2, #0]
   11cba:	ldr	r1, [r3, #0]
   11cbc:	subs	r2, #2
   11cbe:	bl	b260 <Panel_resize@@Base>
   11cc2:	ldr	r3, [r5, #0]
   11cc4:	mov	r0, r5
   11cc6:	ldr	r3, [r3, #20]
   11cc8:	blx	r3
   11cca:	b.n	11b9c <InfoScreen_run@@Base+0x38>
   11ccc:	ldr	r3, [r5, #0]
   11cce:	ldr	r3, [r3, #24]
   11cd0:	cmp	r3, #0
   11cd2:	bne.n	11c58 <InfoScreen_run@@Base+0xf4>
   11cd4:	ldr	r0, [r5, #16]
   11cd6:	ldr	r3, [r0, #112]	; 0x70
   11cd8:	cmp	r3, #0
   11cda:	beq.w	11b9c <InfoScreen_run@@Base+0x38>
   11cde:	mov	r1, r4
   11ce0:	ldr	r3, [pc, #136]	; (11d6c <InfoScreen_run@@Base+0x208>)
   11ce2:	ldr	r4, [r5, #20]
   11ce4:	mov	r2, r8
   11ce6:	ldr	r3, [r6, r3]
   11ce8:	str	r4, [sp, #0]
   11cea:	bl	102e4 <IncSet_handleKey@@Base>
   11cee:	b.n	11b9c <InfoScreen_run@@Base+0x38>
   11cf0:	add	r0, sp, #8
   11cf2:	blx	668c <getmouse@plt>
   11cf6:	ldr	r3, [pc, #100]	; (11d5c <InfoScreen_run@@Base+0x1f8>)
   11cf8:	ldr	r2, [sp, #16]
   11cfa:	mov	ip, r0
   11cfc:	cbz	r0, 11d16 <InfoScreen_run@@Base+0x1b2>
   11cfe:	ldr	r3, [r6, r3]
   11d00:	ldr	r3, [r3, #0]
   11d02:	subs	r3, #1
   11d04:	cmp	r2, r3
   11d06:	ldr	r0, [r5, #16]
   11d08:	bne.w	11bd8 <InfoScreen_run@@Base+0x74>
   11d0c:	ldr	r1, [sp, #12]
   11d0e:	bl	105d0 <IncSet_synthesizeEvent@@Base>
   11d12:	mov	r4, r0
   11d14:	b.n	11bd6 <InfoScreen_run@@Base+0x72>
   11d16:	ldr.w	sl, [r6, r3]
   11d1a:	ldr.w	r1, [r8, #8]
   11d1e:	ldr.w	r3, [sl]
   11d22:	cmp	r2, r1
   11d24:	add.w	r3, r3, #4294967295	; 0xffffffff
   11d28:	blt.n	11d04 <InfoScreen_run@@Base+0x1a0>
   11d2a:	cmp	r2, r3
   11d2c:	bge.n	11d04 <InfoScreen_run@@Base+0x1a0>
   11d2e:	ldr.w	r3, [r8, #44]	; 0x2c
   11d32:	subs	r1, r2, r1
   11d34:	mov	r0, r8
   11d36:	mov	r4, ip
   11d38:	add	r1, r3
   11d3a:	bl	b350 <Panel_setSelected@@Base>
   11d3e:	ldr.w	r3, [sl]
   11d42:	ldr	r2, [sp, #16]
   11d44:	subs	r3, #1
   11d46:	b.n	11d04 <InfoScreen_run@@Base+0x1a0>
   11d48:	blx	67d0 <__stack_chk_fail@plt>
   11d4c:	strh	r4, [r4, #12]
   11d4e:	movs	r1, r0
   11d50:	lsls	r0, r0, #9
   11d52:	movs	r0, r0
   11d54:	strh	r4, [r1, #12]
   11d56:	movs	r1, r0
   11d58:	lsls	r4, r5, #9
   11d5a:	movs	r0, r0
   11d5c:	lsls	r0, r2, #11
   11d5e:	movs	r0, r0
   11d60:	lsls	r4, r3, #9
   11d62:	movs	r0, r0
   11d64:	strh	r0, [r2, #8]
   11d66:	movs	r1, r0
   11d68:	lsls	r0, r7, #10
   11d6a:	movs	r0, r0
   11d6c:	lsls	r4, r0, #9
   11d6e:	movs	r0, r0
   11d70:	push	{r3, lr}
   11d72:	movs	r0, #1
   11d74:	blx	6730 <curs_set@plt>
   11d78:	blx	6c48 <endwin@plt+0x4>
   11d7c:	movs	r1, #0
   11d7e:	movs	r0, #1
   11d80:	blx	683c <err@plt>

00011d84 <xMalloc@@Base>:
   11d84:	push	{r4, lr}
   11d86:	mov	r4, r0
   11d88:	blx	693c <malloc@plt>
   11d8c:	subs	r4, #0
   11d8e:	it	ne
   11d90:	movne	r4, #1
   11d92:	cmp	r0, #0
   11d94:	it	ne
   11d96:	movne	r4, #0
   11d98:	cbnz	r4, 11d9c <xMalloc@@Base+0x18>
   11d9a:	pop	{r4, pc}
   11d9c:	bl	11d70 <InfoScreen_run@@Base+0x20c>

00011da0 <xCalloc@@Base>:
   11da0:	push	{r3, r4, r5, lr}
   11da2:	mov	r4, r1
   11da4:	mov	r5, r0
   11da6:	blx	6640 <calloc@plt>
   11daa:	subs	r1, r4, #0
   11dac:	it	ne
   11dae:	movne	r1, #1
   11db0:	cmp	r5, #0
   11db2:	ite	ne
   11db4:	movne	r4, r1
   11db6:	moveq	r4, #0
   11db8:	cmp	r0, #0
   11dba:	it	ne
   11dbc:	movne	r4, #0
   11dbe:	cbnz	r4, 11dc2 <xCalloc@@Base+0x22>
   11dc0:	pop	{r3, r4, r5, pc}
   11dc2:	bl	11d70 <InfoScreen_run@@Base+0x20c>
   11dc6:	nop

00011dc8 <xRealloc@@Base>:
   11dc8:	push	{r4, lr}
   11dca:	mov	r4, r1
   11dcc:	blx	6800 <realloc@plt>
   11dd0:	subs	r4, #0
   11dd2:	it	ne
   11dd4:	movne	r4, #1
   11dd6:	cmp	r0, #0
   11dd8:	it	ne
   11dda:	movne	r4, #0
   11ddc:	cbnz	r4, 11de0 <xRealloc@@Base+0x18>
   11dde:	pop	{r4, pc}
   11de0:	bl	11d70 <InfoScreen_run@@Base+0x20c>

00011de4 <xStrdup@@Base>:
   11de4:	push	{r3, lr}
   11de6:	blx	67c4 <strdup@plt>
   11dea:	cbz	r0, 11dee <xStrdup@@Base+0xa>
   11dec:	pop	{r3, pc}
   11dee:	bl	11d70 <InfoScreen_run@@Base+0x20c>
   11df2:	nop
   11df4:	movs	r0, r0
   11df6:	movs	r0, r0
   11df8:	push	{r3, r4, r5, r6, r7, lr}
   11dfa:	mov	r4, r0
   11dfc:	ldr	r7, [r0, #12]
   11dfe:	ldr	r6, [pc, #72]	; (11e48 <xStrdup@@Base+0x64>)
   11e00:	mov	r0, r7
   11e02:	add	r6, pc
   11e04:	bl	b2f8 <Panel_getSelected@@Base>
   11e08:	cbz	r0, 11e3e <xStrdup@@Base+0x5a>
   11e0a:	ldr.w	r0, [r0, #140]	; 0x8c
   11e0e:	bl	12368 <IOPriorityPanel_new@@Base>
   11e12:	movs	r2, #21
   11e14:	mov	r5, r0
   11e16:	mov	r0, r4
   11e18:	mov	r1, r5
   11e1a:	bl	1126c <Action_pickFromVector@@Base>
   11e1e:	cbz	r0, 11e36 <xStrdup@@Base+0x52>
   11e20:	mov	r0, r5
   11e22:	bl	12504 <IOPriorityPanel_getIOPriority@@Base>
   11e26:	ldr	r1, [pc, #36]	; (11e4c <xStrdup@@Base+0x68>)
   11e28:	movs	r3, #0
   11e2a:	ldr	r1, [r6, r1]
   11e2c:	mov	r2, r0
   11e2e:	mov	r0, r7
   11e30:	bl	8d6c <MainPanel_foreachProcess@@Base>
   11e34:	cbz	r0, 11e40 <xStrdup@@Base+0x5c>
   11e36:	mov	r0, r5
   11e38:	bl	b204 <Panel_delete@@Base>
   11e3c:	movs	r0, #97	; 0x61
   11e3e:	pop	{r3, r4, r5, r6, r7, pc}
   11e40:	blx	6930 <beep@plt>
   11e44:	b.n	11e36 <xStrdup@@Base+0x52>
   11e46:	nop
   11e48:	ldrb	r2, [r1, #28]
   11e4a:	movs	r1, r0
   11e4c:	lsls	r4, r1, #9
	...

00011e50 <Platform_setBindings@@Base>:
   11e50:	ldr	r3, [pc, #8]	; (11e5c <Platform_setBindings@@Base+0xc>)
   11e52:	add	r3, pc
   11e54:	str.w	r3, [r0, #420]	; 0x1a4
   11e58:	bx	lr
   11e5a:	nop
   11e5c:			; <UNDEFINED> instruction: 0xffa3ffff

00011e60 <Platform_getUptime@@Base>:
   11e60:	ldr	r0, [pc, #108]	; (11ed0 <Platform_getUptime@@Base+0x70>)
   11e62:	movs	r2, #0
   11e64:	ldr	r1, [pc, #108]	; (11ed4 <Platform_getUptime@@Base+0x74>)
   11e66:	movs	r3, #0
   11e68:	add	r0, pc
   11e6a:	push	{r4, lr}
   11e6c:	sub	sp, #16
   11e6e:	ldr	r1, [r0, r1]
   11e70:	ldr	r0, [pc, #100]	; (11ed8 <Platform_getUptime@@Base+0x78>)
   11e72:	ldr	r1, [r1, #0]
   11e74:	str	r1, [sp, #12]
   11e76:	mov.w	r1, #0
   11e7a:	ldr	r1, [pc, #96]	; (11edc <Platform_getUptime@@Base+0x7c>)
   11e7c:	add	r0, pc
   11e7e:	strd	r2, r3, [sp]
   11e82:	add	r1, pc
   11e84:	blx	6718 <fopen@plt>
   11e88:	cbz	r0, 11ea4 <Platform_getUptime@@Base+0x44>
   11e8a:	ldr	r1, [pc, #84]	; (11ee0 <Platform_getUptime@@Base+0x80>)
   11e8c:	mov	r2, sp
   11e8e:	mov	r4, r0
   11e90:	add	r1, pc
   11e92:	blx	6700 <__isoc99_fscanf@plt>
   11e96:	mov	r3, r0
   11e98:	mov	r0, r4
   11e9a:	mov	r4, r3
   11e9c:	blx	6b30 <fclose@plt>
   11ea0:	cmp	r4, #0
   11ea2:	ble.n	11ec8 <Platform_getUptime@@Base+0x68>
   11ea4:	vldr	d0, [sp]
   11ea8:	blx	68e8 <floor@plt>
   11eac:	vcvt.s32.f64	s15, d0
   11eb0:	vmov	r0, s15
   11eb4:	ldr	r2, [pc, #44]	; (11ee4 <Platform_getUptime@@Base+0x84>)
   11eb6:	ldr	r3, [pc, #28]	; (11ed4 <Platform_getUptime@@Base+0x74>)
   11eb8:	add	r2, pc
   11eba:	ldr	r3, [r2, r3]
   11ebc:	ldr	r2, [r3, #0]
   11ebe:	ldr	r3, [sp, #12]
   11ec0:	eors	r2, r3
   11ec2:	bne.n	11ecc <Platform_getUptime@@Base+0x6c>
   11ec4:	add	sp, #16
   11ec6:	pop	{r4, pc}
   11ec8:	movs	r0, #0
   11eca:	b.n	11eb4 <Platform_getUptime@@Base+0x54>
   11ecc:	blx	67d0 <__stack_chk_fail@plt>
   11ed0:	ldrb	r4, [r4, #26]
   11ed2:	movs	r1, r0
   11ed4:	lsls	r0, r0, #9
   11ed6:	movs	r0, r0
   11ed8:	ldrb	r0, [r4, r7]
   11eda:	movs	r0, r0
   11edc:	ldrb	r2, [r5, r5]
   11ede:	movs	r0, r0
   11ee0:	ldrb	r4, [r3, r7]
   11ee2:	movs	r0, r0
   11ee4:	ldrb	r4, [r2, #25]
   11ee6:	movs	r1, r0

00011ee8 <Platform_getLoadAverage@@Base>:
   11ee8:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   11eec:	mov	r7, r2
   11eee:	ldr	r2, [pc, #116]	; (11f64 <Platform_getLoadAverage@@Base+0x7c>)
   11ef0:	sub	sp, #36	; 0x24
   11ef2:	ldr	r3, [pc, #116]	; (11f68 <Platform_getLoadAverage@@Base+0x80>)
   11ef4:	mov.w	r8, #0
   11ef8:	add	r2, pc
   11efa:	mov.w	r9, #0
   11efe:	mov	r6, r1
   11f00:	mov	r5, r0
   11f02:	ldr	r3, [r2, r3]
   11f04:	ldr	r1, [pc, #100]	; (11f6c <Platform_getLoadAverage@@Base+0x84>)
   11f06:	ldr	r3, [r3, #0]
   11f08:	str	r3, [sp, #28]
   11f0a:	mov.w	r3, #0
   11f0e:	strd	r8, r9, [r0]
   11f12:	ldr	r0, [pc, #92]	; (11f70 <Platform_getLoadAverage@@Base+0x88>)
   11f14:	add	r1, pc
   11f16:	strd	r8, r9, [r6]
   11f1a:	add	r0, pc
   11f1c:	strd	r8, r9, [r7]
   11f20:	blx	6718 <fopen@plt>
   11f24:	cbz	r0, 11f48 <Platform_getLoadAverage@@Base+0x60>
   11f26:	add	r1, sp, #24
   11f28:	str	r1, [sp, #12]
   11f2a:	add	r1, sp, #20
   11f2c:	str	r1, [sp, #8]
   11f2e:	add	r1, sp, #16
   11f30:	str	r1, [sp, #4]
   11f32:	ldr	r1, [pc, #64]	; (11f74 <Platform_getLoadAverage@@Base+0x8c>)
   11f34:	mov	r4, r0
   11f36:	mov	r3, r6
   11f38:	mov	r2, r5
   11f3a:	add	r1, pc
   11f3c:	str	r7, [sp, #0]
   11f3e:	blx	6700 <__isoc99_fscanf@plt>
   11f42:	mov	r0, r4
   11f44:	blx	6b30 <fclose@plt>
   11f48:	ldr	r2, [pc, #44]	; (11f78 <Platform_getLoadAverage@@Base+0x90>)
   11f4a:	ldr	r3, [pc, #28]	; (11f68 <Platform_getLoadAverage@@Base+0x80>)
   11f4c:	add	r2, pc
   11f4e:	ldr	r3, [r2, r3]
   11f50:	ldr	r2, [r3, #0]
   11f52:	ldr	r3, [sp, #28]
   11f54:	eors	r2, r3
   11f56:	bne.n	11f5e <Platform_getLoadAverage@@Base+0x76>
   11f58:	add	sp, #36	; 0x24
   11f5a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   11f5e:	blx	67d0 <__stack_chk_fail@plt>
   11f62:	nop
   11f64:	ldrb	r4, [r2, #24]
   11f66:	movs	r1, r0
   11f68:	lsls	r0, r0, #9
   11f6a:	movs	r0, r0
   11f6c:	ldrb	r0, [r3, r3]
   11f6e:	movs	r0, r0
   11f70:	ldrb	r2, [r3, r5]
   11f72:	movs	r0, r0
   11f74:	ldrb	r2, [r1, r5]
   11f76:	movs	r0, r0
   11f78:	ldrb	r0, [r0, #23]
   11f7a:	movs	r1, r0

00011f7c <Platform_getMaxPid@@Base>:
   11f7c:	ldr	r2, [pc, #92]	; (11fdc <Platform_getMaxPid@@Base+0x60>)
   11f7e:	ldr	r3, [pc, #96]	; (11fe0 <Platform_getMaxPid@@Base+0x64>)
   11f80:	add	r2, pc
   11f82:	ldr	r1, [pc, #96]	; (11fe4 <Platform_getMaxPid@@Base+0x68>)
   11f84:	ldr	r0, [pc, #96]	; (11fe8 <Platform_getMaxPid@@Base+0x6c>)
   11f86:	push	{r4, lr}
   11f88:	add	r1, pc
   11f8a:	ldr	r3, [r2, r3]
   11f8c:	sub	sp, #8
   11f8e:	add	r0, pc
   11f90:	ldr	r3, [r3, #0]
   11f92:	str	r3, [sp, #4]
   11f94:	mov.w	r3, #0
   11f98:	blx	6718 <fopen@plt>
   11f9c:	cbz	r0, 11fd0 <Platform_getMaxPid@@Base+0x54>
   11f9e:	ldr	r1, [pc, #76]	; (11fec <Platform_getMaxPid@@Base+0x70>)
   11fa0:	mov	r4, r0
   11fa2:	mov	r2, sp
   11fa4:	movw	r3, #65535	; 0xffff
   11fa8:	add	r1, pc
   11faa:	movt	r3, #63	; 0x3f
   11fae:	str	r3, [sp, #0]
   11fb0:	blx	6700 <__isoc99_fscanf@plt>
   11fb4:	mov	r0, r4
   11fb6:	blx	6b30 <fclose@plt>
   11fba:	ldr	r0, [sp, #0]
   11fbc:	ldr	r2, [pc, #48]	; (11ff0 <Platform_getMaxPid@@Base+0x74>)
   11fbe:	ldr	r3, [pc, #32]	; (11fe0 <Platform_getMaxPid@@Base+0x64>)
   11fc0:	add	r2, pc
   11fc2:	ldr	r3, [r2, r3]
   11fc4:	ldr	r2, [r3, #0]
   11fc6:	ldr	r3, [sp, #4]
   11fc8:	eors	r2, r3
   11fca:	bne.n	11fd6 <Platform_getMaxPid@@Base+0x5a>
   11fcc:	add	sp, #8
   11fce:	pop	{r4, pc}
   11fd0:	mov.w	r0, #4294967295	; 0xffffffff
   11fd4:	b.n	11fbc <Platform_getMaxPid@@Base+0x40>
   11fd6:	blx	67d0 <__stack_chk_fail@plt>
   11fda:	nop
   11fdc:	ldrb	r4, [r1, #22]
   11fde:	movs	r1, r0
   11fe0:	lsls	r0, r0, #9
   11fe2:	movs	r0, r0
   11fe4:	ldrb	r4, [r4, r1]
   11fe6:	movs	r0, r0
   11fe8:	ldrb	r2, [r3, r4]
   11fea:	movs	r0, r0
   11fec:	ldrb	r0, [r7, r3]
   11fee:	movs	r0, r0
   11ff0:	ldrb	r4, [r1, #21]
   11ff2:	movs	r1, r0

00011ff4 <Platform_setCPUValues@@Base>:
   11ff4:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ff8:	movs	r4, #192	; 0xc0
   11ffa:	ldr	r7, [r0, #28]
   11ffc:	mov	r6, r0
   11ffe:	vpush	{d8-d9}
   12002:	ldr.w	r3, [r7, #136]	; 0x88
   12006:	mla	r4, r4, r1, r3
   1200a:	ldrd	r0, r1, [r4, #96]	; 0x60
   1200e:	orrs.w	r3, r0, r1
   12012:	beq.w	1215c <Platform_setCPUValues@@Base+0x168>
   12016:	bl	15b34 <Battery_getData@@Base+0xa84>
   1201a:	vmov	d8, r0, r1
   1201e:	ldrd	r0, r1, [r4, #144]	; 0x90
   12022:	bl	15b34 <Battery_getData@@Base+0xa84>
   12026:	vldr	d9, [pc, #488]	; 12210 <Platform_setCPUValues@@Base+0x21c>
   1202a:	ldr	r5, [r6, #32]
   1202c:	vmov	d6, r0, r1
   12030:	ldrd	r0, r1, [r4, #104]	; 0x68
   12034:	vdiv.f64	d7, d6, d8
   12038:	vmul.f64	d7, d7, d9
   1203c:	vstr	d7, [r5]
   12040:	bl	15b34 <Battery_getData@@Base+0xa84>
   12044:	ldr.w	r8, [r7]
   12048:	ldr.w	r9, [r6]
   1204c:	ldr.w	r7, [r4, #176]	; 0xb0
   12050:	ldrb.w	r3, [r8, #57]	; 0x39
   12054:	ldrd	sl, r6, [r4, #180]	; 0xb4
   12058:	ldr.w	fp, [r4, #188]	; 0xbc
   1205c:	vmov	d7, r0, r1
   12060:	vdiv.f64	d7, d7, d8
   12064:	vmul.f64	d7, d7, d9
   12068:	vstr	d7, [r5, #8]
   1206c:	cmp	r3, #0
   1206e:	beq.n	12162 <Platform_setCPUValues@@Base+0x16e>
   12070:	ldrd	r0, r1, [r4, #112]	; 0x70
   12074:	bl	15b34 <Battery_getData@@Base+0xa84>
   12078:	vmov	d6, r0, r1
   1207c:	ldrd	r0, r1, [r4, #160]	; 0xa0
   12080:	vdiv.f64	d7, d6, d8
   12084:	vmul.f64	d7, d7, d9
   12088:	vstr	d7, [r5, #16]
   1208c:	bl	15b34 <Battery_getData@@Base+0xa84>
   12090:	vmov	d6, r0, r1
   12094:	ldrd	r0, r1, [r4, #168]	; 0xa8
   12098:	vdiv.f64	d7, d6, d8
   1209c:	vmul.f64	d7, d7, d9
   120a0:	vstr	d7, [r5, #24]
   120a4:	bl	15b34 <Battery_getData@@Base+0xa84>
   120a8:	vmov	d6, r0, r1
   120ac:	mov	r0, r7
   120ae:	mov	r1, sl
   120b0:	vdiv.f64	d7, d6, d8
   120b4:	vmul.f64	d7, d7, d9
   120b8:	vstr	d7, [r5, #32]
   120bc:	bl	15b34 <Battery_getData@@Base+0xa84>
   120c0:	vmov	d6, r0, r1
   120c4:	mov	r0, r6
   120c6:	mov	r1, fp
   120c8:	vdiv.f64	d7, d6, d8
   120cc:	vmul.f64	d7, d7, d9
   120d0:	vstr	d7, [r5, #40]	; 0x28
   120d4:	bl	15b34 <Battery_getData@@Base+0xa84>
   120d8:	vmov	d6, r0, r1
   120dc:	ldrd	r0, r1, [r4, #152]	; 0x98
   120e0:	vdiv.f64	d7, d6, d8
   120e4:	vmul.f64	d7, d7, d9
   120e8:	vstr	d7, [r5, #48]	; 0x30
   120ec:	bl	15b34 <Battery_getData@@Base+0xa84>
   120f0:	movs	r3, #8
   120f2:	vmov	d7, r0, r1
   120f6:	vdiv.f64	d7, d7, d8
   120fa:	vmul.f64	d9, d7, d9
   120fe:	vstr	d9, [r5, #56]	; 0x38
   12102:	strb.w	r3, [r9, #69]	; 0x45
   12106:	ldrb.w	r3, [r8, #69]	; 0x45
   1210a:	vldr	d7, [r5]
   1210e:	vldr	d6, [r5, #8]
   12112:	vldr	d0, [r5, #16]
   12116:	vadd.f64	d7, d7, d6
   1211a:	cmp	r3, #0
   1211c:	beq.n	121e8 <Platform_setCPUValues@@Base+0x1f4>
   1211e:	vldr	d4, [r5, #24]
   12122:	vldr	d5, [r5, #32]
   12126:	vldr	d6, [r5, #40]	; 0x28
   1212a:	vadd.f64	d0, d7, d0
   1212e:	vldr	d7, [r5, #48]	; 0x30
   12132:	vadd.f64	d0, d0, d4
   12136:	vadd.f64	d0, d0, d5
   1213a:	vadd.f64	d0, d0, d6
   1213e:	vadd.f64	d0, d0, d7
   12142:	vldr	d7, [pc, #204]	; 12210 <Platform_setCPUValues@@Base+0x21c>
   12146:	vcmpe.f64	d0, d7
   1214a:	vmrs	APSR_nzcv, fpscr
   1214e:	ble.n	121c4 <Platform_setCPUValues@@Base+0x1d0>
   12150:	vpop	{d8-d9}
   12154:	vmov.f64	d0, d7
   12158:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1215c:	vmov.f64	d8, #112	; 0x3f800000  1.0
   12160:	b.n	1201e <Platform_setCPUValues@@Base+0x2a>
   12162:	ldrd	r0, r1, [r4, #120]	; 0x78
   12166:	bl	15b34 <Battery_getData@@Base+0xa84>
   1216a:	vmov	d6, r0, r1
   1216e:	adds	r0, r6, r7
   12170:	adc.w	r1, fp, sl
   12174:	vdiv.f64	d7, d6, d8
   12178:	vmul.f64	d7, d7, d9
   1217c:	vstr	d7, [r5, #16]
   12180:	bl	15b34 <Battery_getData@@Base+0xa84>
   12184:	movs	r3, #4
   12186:	vmov	d7, r0, r1
   1218a:	vdiv.f64	d7, d7, d8
   1218e:	vmul.f64	d9, d7, d9
   12192:	vstr	d9, [r5, #24]
   12196:	strb.w	r3, [r9, #69]	; 0x45
   1219a:	vldr	d7, [r5]
   1219e:	vldr	d0, [r5, #8]
   121a2:	vldr	d5, [r5, #16]
   121a6:	vadd.f64	d0, d7, d0
   121aa:	vldr	d6, [r5, #24]
   121ae:	vadd.f64	d0, d0, d5
   121b2:	vadd.f64	d0, d0, d6
   121b6:	vldr	d7, [pc, #88]	; 12210 <Platform_setCPUValues@@Base+0x21c>
   121ba:	vcmpe.f64	d0, d7
   121be:	vmrs	APSR_nzcv, fpscr
   121c2:	bgt.n	12150 <Platform_setCPUValues@@Base+0x15c>
   121c4:	vcmpe.f64	d0, #0.0
   121c8:	vmrs	APSR_nzcv, fpscr
   121cc:	bmi.n	121fe <Platform_setCPUValues@@Base+0x20a>
   121ce:	vpop	{d8-d9}
   121d2:	vcmp.f64	d0, d0
   121d6:	vldr	d7, [pc, #64]	; 12218 <Platform_setCPUValues@@Base+0x224>
   121da:	vmrs	APSR_nzcv, fpscr
   121de:	it	vs
   121e0:	vmovvs.f64	d0, d7
   121e4:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121e8:	vadd.f64	d0, d7, d0
   121ec:	vldr	d5, [r5, #24]
   121f0:	vldr	d6, [r5, #32]
   121f4:	vadd.f64	d0, d0, d5
   121f8:	vadd.f64	d0, d0, d6
   121fc:	b.n	121b6 <Platform_setCPUValues@@Base+0x1c2>
   121fe:	vpop	{d8-d9}
   12202:	vldr	d0, [pc, #20]	; 12218 <Platform_setCPUValues@@Base+0x224>
   12206:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1220a:	nop
   1220c:	nop.w
   12210:	movs	r0, r0
   12212:	movs	r0, r0
   12214:	movs	r0, r0
   12216:	eors	r1, r3
	...

00012220 <Platform_setMemoryValues@@Base>:
   12220:	push	{r3, r4, r5, r6, r7, lr}
   12222:	mov	r5, r0
   12224:	ldr	r3, [r0, #28]
   12226:	ldrd	r0, r1, [r3, #56]	; 0x38
   1222a:	ldr	r7, [r3, #88]	; 0x58
   1222c:	ldr	r6, [r3, #96]	; 0x60
   1222e:	ldr	r4, [r3, #64]	; 0x40
   12230:	bl	15b34 <Battery_getData@@Base+0xa84>
   12234:	vmov	s15, r7
   12238:	adds	r3, r7, r6
   1223a:	subs	r4, r4, r3
   1223c:	ldr	r3, [r5, #32]
   1223e:	vcvt.f64.s32	d6, s15
   12242:	vmov	s15, r4
   12246:	vcvt.f64.s32	d7, s15
   1224a:	strd	r0, r1, [r5, #40]	; 0x28
   1224e:	vstr	d6, [r3, #8]
   12252:	vmov	s13, r6
   12256:	vstr	d7, [r3]
   1225a:	vcvt.f64.s32	d6, s13
   1225e:	vstr	d6, [r3, #16]
   12262:	pop	{r3, r4, r5, r6, r7, pc}

00012264 <Platform_setSwapValues@@Base>:
   12264:	push	{r4, r5, r6, lr}
   12266:	mov	r4, r0
   12268:	ldr	r5, [r0, #28]
   1226a:	ldrd	r0, r1, [r5, #104]	; 0x68
   1226e:	bl	15b34 <Battery_getData@@Base+0xa84>
   12272:	ldr	r6, [r4, #32]
   12274:	strd	r0, r1, [r4, #40]	; 0x28
   12278:	ldrd	r0, r1, [r5, #112]	; 0x70
   1227c:	bl	15b34 <Battery_getData@@Base+0xa84>
   12280:	strd	r0, r1, [r6]
   12284:	pop	{r4, r5, r6, pc}
   12286:	nop

00012288 <Platform_getProcessEnv@@Base>:
   12288:	push	{r4, r5, r6, r7, lr}
   1228a:	sub	sp, #52	; 0x34
   1228c:	ldr	r6, [pc, #196]	; (12354 <Platform_getProcessEnv@@Base+0xcc>)
   1228e:	add	r4, sp, #8
   12290:	ldr	r5, [pc, #196]	; (12358 <Platform_getProcessEnv@@Base+0xd0>)
   12292:	movs	r3, #33	; 0x21
   12294:	add	r6, pc
   12296:	ldr	r2, [pc, #196]	; (1235c <Platform_getProcessEnv@@Base+0xd4>)
   12298:	str	r0, [sp, #4]
   1229a:	movs	r1, #32
   1229c:	add	r2, pc
   1229e:	str	r2, [sp, #0]
   122a0:	ldr	r5, [r6, r5]
   122a2:	mov	r0, r4
   122a4:	movs	r2, #1
   122a6:	ldr	r5, [r5, #0]
   122a8:	str	r5, [sp, #44]	; 0x2c
   122aa:	mov.w	r5, #0
   122ae:	blx	6c78 <__snprintf_chk@plt>
   122b2:	ldr	r1, [pc, #172]	; (12360 <Platform_getProcessEnv@@Base+0xd8>)
   122b4:	mov	r0, r4
   122b6:	add	r1, pc
   122b8:	blx	6718 <fopen@plt>
   122bc:	mov	r7, r0
   122be:	mov	r4, r0
   122c0:	cbz	r0, 1231e <Platform_getProcessEnv@@Base+0x96>
   122c2:	mov.w	r0, #4096	; 0x1000
   122c6:	movs	r5, #0
   122c8:	bl	11d84 <xMalloc@@Base>
   122cc:	mov.w	r6, #4096	; 0x1000
   122d0:	mov	r4, r0
   122d2:	cbnz	r0, 122e6 <Platform_getProcessEnv@@Base+0x5e>
   122d4:	b.n	12340 <Platform_getProcessEnv@@Base+0xb8>
   122d6:	lsls	r6, r6, #1
   122d8:	mov	r0, r4
   122da:	add	r5, r3
   122dc:	mov	r1, r6
   122de:	bl	11dc8 <xRealloc@@Base>
   122e2:	mov	r4, r0
   122e4:	cbz	r0, 122f8 <Platform_getProcessEnv@@Base+0x70>
   122e6:	mov	r3, r7
   122e8:	subs	r2, r6, r5
   122ea:	adds	r0, r4, r5
   122ec:	movs	r1, #1
   122ee:	blx	68b4 <fread@plt>
   122f2:	mov	r3, r0
   122f4:	cmp	r0, #0
   122f6:	bne.n	122d6 <Platform_getProcessEnv@@Base+0x4e>
   122f8:	mov	r0, r7
   122fa:	blx	6b30 <fclose@plt>
   122fe:	cmp	r5, #1
   12300:	bls.n	12310 <Platform_getProcessEnv@@Base+0x88>
   12302:	adds	r3, r4, r5
   12304:	ldrb.w	r2, [r3, #-1]
   12308:	cbnz	r2, 12310 <Platform_getProcessEnv@@Base+0x88>
   1230a:	ldrb.w	r3, [r3, #-2]
   1230e:	cbz	r3, 1231e <Platform_getProcessEnv@@Base+0x96>
   12310:	adds	r3, r5, #2
   12312:	adds	r7, r5, #1
   12314:	cmp	r3, r6
   12316:	bcc.n	12334 <Platform_getProcessEnv@@Base+0xac>
   12318:	movs	r3, #0
   1231a:	strb	r3, [r4, r5]
   1231c:	strb	r3, [r4, r7]
   1231e:	ldr	r2, [pc, #68]	; (12364 <Platform_getProcessEnv@@Base+0xdc>)
   12320:	ldr	r3, [pc, #52]	; (12358 <Platform_getProcessEnv@@Base+0xd0>)
   12322:	add	r2, pc
   12324:	ldr	r3, [r2, r3]
   12326:	ldr	r2, [r3, #0]
   12328:	ldr	r3, [sp, #44]	; 0x2c
   1232a:	eors	r2, r3
   1232c:	bne.n	12350 <Platform_getProcessEnv@@Base+0xc8>
   1232e:	mov	r0, r4
   12330:	add	sp, #52	; 0x34
   12332:	pop	{r4, r5, r6, r7, pc}
   12334:	adds	r1, r6, #2
   12336:	mov	r0, r4
   12338:	bl	11dc8 <xRealloc@@Base>
   1233c:	mov	r4, r0
   1233e:	b.n	12318 <Platform_getProcessEnv@@Base+0x90>
   12340:	mov	r0, r7
   12342:	mov	r5, r4
   12344:	blx	6b30 <fclose@plt>
   12348:	movs	r7, #1
   1234a:	movw	r1, #4098	; 0x1002
   1234e:	b.n	12336 <Platform_getProcessEnv@@Base+0xae>
   12350:	blx	67d0 <__stack_chk_fail@plt>
   12354:	ldrb	r0, [r7, #9]
   12356:	movs	r1, r0
   12358:	lsls	r0, r0, #9
   1235a:	movs	r0, r0
   1235c:	ldrh	r0, [r5, r0]
   1235e:	movs	r0, r0
   12360:	ldr	r6, [r6, r4]
   12362:	movs	r0, r0
   12364:	ldrb	r2, [r5, #7]
   12366:	movs	r1, r0

00012368 <IOPriorityPanel_new@@Base>:
   12368:	ldr	r2, [pc, #344]	; (124c4 <IOPriorityPanel_new@@Base+0x15c>)
   1236a:	ldr	r3, [pc, #348]	; (124c8 <IOPriorityPanel_new@@Base+0x160>)
   1236c:	add	r2, pc
   1236e:	ldr	r1, [pc, #348]	; (124cc <IOPriorityPanel_new@@Base+0x164>)
   12370:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12374:	mov	sl, r0
   12376:	ldr	r0, [pc, #344]	; (124d0 <IOPriorityPanel_new@@Base+0x168>)
   12378:	sub	sp, #92	; 0x5c
   1237a:	ldr	r3, [r2, r3]
   1237c:	add	r1, pc
   1237e:	add	r0, pc
   12380:	ldr	r4, [pc, #336]	; (124d4 <IOPriorityPanel_new@@Base+0x16c>)
   12382:	ldr	r3, [r3, #0]
   12384:	str	r3, [sp, #84]	; 0x54
   12386:	mov.w	r3, #0
   1238a:	bl	91d4 <FunctionBar_newEnterEsc@@Base>
   1238e:	ldr	r5, [pc, #328]	; (124d8 <IOPriorityPanel_new@@Base+0x170>)
   12390:	add	r4, pc
   12392:	movs	r3, #1
   12394:	mov	r1, r4
   12396:	mov	r2, r3
   12398:	mov	r1, r3
   1239a:	str	r0, [sp, #8]
   1239c:	mov	r0, r3
   1239e:	ldr	r4, [r4, r5]
   123a0:	str	r3, [sp, #0]
   123a2:	str	r4, [sp, #4]
   123a4:	bl	b198 <Panel_new@@Base>
   123a8:	ldr	r1, [pc, #304]	; (124dc <IOPriorityPanel_new@@Base+0x174>)
   123aa:	add	r1, pc
   123ac:	mov	r6, r0
   123ae:	bl	b22c <Panel_setHeader@@Base>
   123b2:	ldr	r0, [pc, #300]	; (124e0 <IOPriorityPanel_new@@Base+0x178>)
   123b4:	movs	r1, #0
   123b6:	add	r0, pc
   123b8:	bl	9b90 <ListItem_new@@Base>
   123bc:	mov	r1, r0
   123be:	mov	r0, r6
   123c0:	bl	b294 <Panel_add@@Base>
   123c4:	cmp.w	sl, #0
   123c8:	beq.n	12492 <IOPriorityPanel_new@@Base+0x12a>
   123ca:	ldr	r3, [pc, #280]	; (124e4 <IOPriorityPanel_new@@Base+0x17c>)
   123cc:	add	r5, sp, #32
   123ce:	ldr	r7, [pc, #280]	; (124e8 <IOPriorityPanel_new@@Base+0x180>)
   123d0:	add	r3, pc
   123d2:	ldr.w	r8, [pc, #280]	; 124ec <IOPriorityPanel_new@@Base+0x184>
   123d6:	str	r3, [sp, #28]
   123d8:	add	r7, pc
   123da:	ldr	r3, [pc, #276]	; (124f0 <IOPriorityPanel_new@@Base+0x188>)
   123dc:	add	r8, pc
   123de:	adds	r7, #12
   123e0:	add	r3, pc
   123e2:	str	r3, [sp, #20]
   123e4:	ldr	r3, [pc, #268]	; (124f4 <IOPriorityPanel_new@@Base+0x18c>)
   123e6:	add	r3, pc
   123e8:	str	r3, [sp, #24]
   123ea:	ldr.w	r9, [pc, #268]	; 124f8 <IOPriorityPanel_new@@Base+0x190>
   123ee:	movs	r4, #0
   123f0:	ldr	r3, [sp, #28]
   123f2:	add	r9, pc
   123f4:	b.n	12406 <IOPriorityPanel_new@@Base+0x9e>
   123f6:	adds	r4, #1
   123f8:	cmp	r4, #8
   123fa:	beq.n	12454 <IOPriorityPanel_new@@Base+0xec>
   123fc:	ldrd	r3, r2, [sp, #20]
   12400:	cmp	r4, #7
   12402:	it	ne
   12404:	movne	r3, r2
   12406:	str	r3, [sp, #12]
   12408:	movs	r2, #1
   1240a:	movs	r3, #50	; 0x32
   1240c:	movs	r1, #49	; 0x31
   1240e:	mov	r0, r5
   12410:	str	r4, [sp, #8]
   12412:	str.w	r8, [sp, #4]
   12416:	str.w	r9, [sp]
   1241a:	blx	6c78 <__snprintf_chk@plt>
   1241e:	cmp	r0, #48	; 0x30
   12420:	bhi.n	124ae <IOPriorityPanel_new@@Base+0x146>
   12422:	ldr.w	r3, [r7, #-12]
   12426:	mov	r0, r5
   12428:	orr.w	fp, r4, r3, lsl #13
   1242c:	mov	r1, fp
   1242e:	bl	9b90 <ListItem_new@@Base>
   12432:	mov	r1, r0
   12434:	mov	r0, r6
   12436:	bl	b294 <Panel_add@@Base>
   1243a:	cmp	sl, fp
   1243c:	bne.n	123f6 <IOPriorityPanel_new@@Base+0x8e>
   1243e:	mov	r0, r6
   12440:	adds	r4, #1
   12442:	bl	b348 <Panel_size@@Base>
   12446:	mov	r1, r0
   12448:	mov	r0, r6
   1244a:	subs	r1, #1
   1244c:	bl	b350 <Panel_setSelected@@Base>
   12450:	cmp	r4, #8
   12452:	bne.n	123fc <IOPriorityPanel_new@@Base+0x94>
   12454:	ldr.w	r8, [r7], #8
   12458:	cmp.w	r8, #0
   1245c:	bne.n	123ea <IOPriorityPanel_new@@Base+0x82>
   1245e:	ldr	r0, [pc, #156]	; (124fc <IOPriorityPanel_new@@Base+0x194>)
   12460:	movw	r1, #24583	; 0x6007
   12464:	add	r0, pc
   12466:	bl	9b90 <ListItem_new@@Base>
   1246a:	mov	r1, r0
   1246c:	mov	r0, r6
   1246e:	bl	b294 <Panel_add@@Base>
   12472:	movw	r3, #24583	; 0x6007
   12476:	cmp	sl, r3
   12478:	beq.n	1249c <IOPriorityPanel_new@@Base+0x134>
   1247a:	ldr	r2, [pc, #132]	; (12500 <IOPriorityPanel_new@@Base+0x198>)
   1247c:	ldr	r3, [pc, #72]	; (124c8 <IOPriorityPanel_new@@Base+0x160>)
   1247e:	add	r2, pc
   12480:	ldr	r3, [r2, r3]
   12482:	ldr	r2, [r3, #0]
   12484:	ldr	r3, [sp, #84]	; 0x54
   12486:	eors	r2, r3
   12488:	bne.n	124c0 <IOPriorityPanel_new@@Base+0x158>
   1248a:	mov	r0, r6
   1248c:	add	sp, #92	; 0x5c
   1248e:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12492:	mov	r1, sl
   12494:	mov	r0, r6
   12496:	bl	b350 <Panel_setSelected@@Base>
   1249a:	b.n	123ca <IOPriorityPanel_new@@Base+0x62>
   1249c:	mov	r0, r6
   1249e:	bl	b348 <Panel_size@@Base>
   124a2:	mov	r1, r0
   124a4:	mov	r0, r6
   124a6:	subs	r1, #1
   124a8:	bl	b350 <Panel_setSelected@@Base>
   124ac:	b.n	1247a <IOPriorityPanel_new@@Base+0x112>
   124ae:	movs	r0, #1
   124b0:	blx	6730 <curs_set@plt>
   124b4:	blx	6c48 <endwin@plt+0x4>
   124b8:	movs	r1, #0
   124ba:	movs	r0, #1
   124bc:	blx	683c <err@plt>
   124c0:	blx	67d0 <__stack_chk_fail@plt>
   124c4:	ldrb	r0, [r4, #6]
   124c6:	movs	r1, r0
   124c8:	lsls	r0, r0, #9
   124ca:	movs	r0, r0
   124cc:	ldr	r6, [pc, #944]	; (12880 <LinuxProcess_writeField@@Base+0x14>)
   124ce:	movs	r0, r0
   124d0:	str	r6, [r0, r2]
   124d2:	movs	r0, r0
   124d4:	ldrb	r4, [r7, #5]
   124d6:	movs	r1, r0
   124d8:	lsls	r0, r1, #10
   124da:	movs	r0, r0
   124dc:	ldrh	r6, [r5, r3]
   124de:	movs	r0, r0
   124e0:	ldrh	r2, [r6, r3]
   124e2:	movs	r0, r0
   124e4:	ldrh	r0, [r0, r3]
   124e6:	movs	r0, r0
   124e8:	ldrb	r4, [r0, #0]
   124ea:	movs	r1, r0
   124ec:	ldrh	r0, [r4, r2]
   124ee:	movs	r0, r0
   124f0:	ldrh	r0, [r5, r2]
   124f2:	movs	r0, r0
   124f4:	bics	r2, r7
   124f6:	movs	r0, r0
   124f8:	ldrh	r6, [r1, r3]
   124fa:	movs	r0, r0
   124fc:	ldrh	r0, [r5, r1]
   124fe:	movs	r0, r0
   12500:	ldrb	r6, [r1, #2]
   12502:	movs	r1, r0

00012504 <IOPriorityPanel_getIOPriority@@Base>:
   12504:	push	{r3, lr}
   12506:	bl	b2f8 <Panel_getSelected@@Base>
   1250a:	ldr	r0, [r0, #8]
   1250c:	pop	{r3, pc}
   1250e:	nop

00012510 <Process_delete@@Base>:
   12510:	push	{r4, lr}
   12512:	mov	r4, r0
   12514:	bl	cab4 <Process_done@@Base>
   12518:	ldr.w	r0, [r4, #308]	; 0x134
   1251c:	blx	6758 <free@plt+0x4>
   12520:	ldr.w	r0, [r4, #316]	; 0x13c
   12524:	blx	6758 <free@plt+0x4>
   12528:	mov	r0, r4
   1252a:	ldmia.w	sp!, {r4, lr}
   1252e:	b.w	6754 <free@plt>
   12532:	nop

00012534 <LinuxProcess_compare@@Base>:
   12534:	ldr	r3, [r0, #4]
   12536:	push	{r4, r5, r6, lr}
   12538:	ldr	r2, [r3, #48]	; 0x30
   1253a:	ldr	r3, [r3, #52]	; 0x34
   1253c:	cmp	r2, #1
   1253e:	sub.w	r3, r3, #14
   12542:	ittee	ne
   12544:	movne	r6, r0
   12546:	movne	r2, r1
   12548:	moveq	r6, r1
   1254a:	moveq	r2, r0
   1254c:	cmp	r3, #101	; 0x65
   1254e:	bhi.n	12620 <LinuxProcess_compare@@Base+0xec>
   12550:	tbh	[pc, r3, lsl #1]
   12554:	lsls	r5, r6, #5
   12556:	lsls	r1, r5, #5
   12558:	lsls	r5, r3, #5
   1255a:	lsls	r1, r2, #5
   1255c:	lsls	r6, r4, #1
   1255e:	lsls	r6, r4, #1
   12560:	lsls	r6, r4, #1
   12562:	lsls	r6, r4, #1
   12564:	lsls	r6, r4, #1
   12566:	lsls	r6, r4, #1
   12568:	lsls	r6, r4, #1
   1256a:	lsls	r6, r4, #1
   1256c:	lsls	r6, r4, #1
   1256e:	lsls	r6, r4, #1
   12570:	lsls	r6, r4, #1
   12572:	lsls	r6, r4, #1
   12574:	lsls	r6, r4, #1
   12576:	lsls	r6, r4, #1
   12578:	lsls	r6, r4, #1
   1257a:	lsls	r6, r4, #1
   1257c:	lsls	r6, r4, #1
   1257e:	lsls	r6, r4, #1
   12580:	lsls	r6, r4, #1
   12582:	lsls	r6, r4, #1
   12584:	lsls	r6, r4, #1
   12586:	lsls	r6, r4, #1
   12588:	lsls	r6, r4, #1
   1258a:	lsls	r3, r1, #5
   1258c:	lsls	r5, r0, #5
   1258e:	lsls	r7, r7, #4
   12590:	lsls	r1, r7, #4
   12592:	lsls	r3, r6, #4
   12594:	lsls	r6, r4, #1
   12596:	lsls	r6, r4, #1
   12598:	lsls	r6, r4, #1
   1259a:	lsls	r6, r4, #1
   1259c:	lsls	r6, r4, #1
   1259e:	lsls	r6, r4, #1
   125a0:	lsls	r6, r4, #1
   125a2:	lsls	r6, r4, #1
   125a4:	lsls	r6, r4, #1
   125a6:	lsls	r6, r4, #1
   125a8:	lsls	r6, r4, #1
   125aa:	lsls	r6, r4, #1
   125ac:	lsls	r6, r4, #1
   125ae:	lsls	r6, r4, #1
   125b0:	lsls	r6, r4, #1
   125b2:	lsls	r6, r4, #1
   125b4:	lsls	r6, r4, #1
   125b6:	lsls	r6, r4, #1
   125b8:	lsls	r6, r4, #1
   125ba:	lsls	r6, r4, #1
   125bc:	lsls	r6, r4, #1
   125be:	lsls	r6, r4, #1
   125c0:	lsls	r6, r4, #1
   125c2:	lsls	r6, r4, #1
   125c4:	lsls	r6, r4, #1
   125c6:	lsls	r6, r4, #1
   125c8:	lsls	r6, r4, #1
   125ca:	lsls	r6, r4, #1
   125cc:	lsls	r6, r4, #1
   125ce:	lsls	r6, r4, #1
   125d0:	lsls	r6, r4, #1
   125d2:	lsls	r6, r4, #1
   125d4:	lsls	r6, r4, #1
   125d6:	lsls	r6, r4, #1
   125d8:	lsls	r6, r4, #1
   125da:	lsls	r6, r4, #1
   125dc:	lsls	r6, r4, #1
   125de:	lsls	r6, r4, #1
   125e0:	lsls	r6, r4, #1
   125e2:	lsls	r6, r4, #1
   125e4:	lsls	r6, r4, #1
   125e6:	lsls	r6, r4, #1
   125e8:	lsls	r6, r4, #1
   125ea:	lsls	r6, r4, #1
   125ec:	lsls	r6, r4, #1
   125ee:	lsls	r6, r4, #1
   125f0:	lsls	r6, r4, #1
   125f2:	lsls	r6, r4, #1
   125f4:	lsls	r6, r4, #1
   125f6:	lsls	r6, r4, #1
   125f8:	lsls	r6, r4, #1
   125fa:	lsls	r6, r4, #1
   125fc:	lsls	r6, r4, #1
   125fe:	lsls	r6, r4, #1
   12600:	lsls	r5, r5, #4
   12602:	lsls	r7, r4, #4
   12604:	lsls	r1, r4, #4
   12606:	lsls	r5, r2, #4
   12608:	lsls	r1, r1, #4
   1260a:	lsls	r5, r7, #3
   1260c:	lsls	r1, r6, #3
   1260e:	lsls	r5, r4, #3
   12610:	lsls	r1, r3, #3
   12612:	lsls	r5, r1, #3
   12614:	lsls	r0, r1, #3
   12616:	lsls	r3, r0, #3
   12618:	lsls	r2, r4, #2
   1261a:	lsls	r4, r2, #2
   1261c:	lsls	r6, r1, #2
   1261e:	lsls	r2, r5, #1
   12620:	ldmia.w	sp!, {r4, r5, r6, lr}
   12624:	b.w	bb78 <Process_compare@@Base>
   12628:	ldr.w	r0, [r2, #140]	; 0x8c
   1262c:	lsrs	r3, r0, #13
   1262e:	bne.n	1264a <LinuxProcess_compare@@Base+0x116>
   12630:	ldr	r3, [r2, #96]	; 0x60
   12632:	movw	r0, #26215	; 0x6667
   12636:	movt	r0, #26214	; 0x6666
   1263a:	adds	r3, #20
   1263c:	smull	r1, r2, r0, r3
   12640:	asrs	r0, r3, #31
   12642:	rsb	r0, r0, r2, asr #1
   12646:	orr.w	r0, r0, #16384	; 0x4000
   1264a:	ldr.w	r3, [r6, #140]	; 0x8c
   1264e:	lsrs	r2, r3, #13
   12650:	bne.n	1266c <LinuxProcess_compare@@Base+0x138>
   12652:	ldr	r3, [r6, #96]	; 0x60
   12654:	movw	r2, #26215	; 0x6667
   12658:	movt	r2, #26214	; 0x6666
   1265c:	adds	r3, #20
   1265e:	smull	r1, r2, r2, r3
   12662:	asrs	r3, r3, #31
   12664:	rsb	r3, r3, r2, asr #1
   12668:	orr.w	r3, r3, #16384	; 0x4000
   1266c:	subs	r0, r0, r3
   1266e:	pop	{r4, r5, r6, pc}
   12670:	ldr.w	r0, [r6, #312]	; 0x138
   12674:	ldr.w	r3, [r2, #312]	; 0x138
   12678:	subs	r0, r0, r3
   1267a:	pop	{r4, r5, r6, pc}
   1267c:	ldr.w	r0, [r2, #308]	; 0x134
   12680:	cmp	r0, #0
   12682:	beq.w	1285c <LinuxProcess_compare@@Base+0x328>
   12686:	ldr.w	r1, [r6, #308]	; 0x134
   1268a:	cmp	r1, #0
   1268c:	beq.w	12856 <LinuxProcess_compare@@Base+0x322>
   12690:	ldmia.w	sp!, {r4, r5, r6, lr}
   12694:	b.w	66b0 <strcmp@plt>
   12698:	vldr	d6, [r6, #280]	; 0x118
   1269c:	vldr	d4, [r6, #288]	; 0x120
   126a0:	vldr	d7, [r2, #280]	; 0x118
   126a4:	vldr	d5, [r2, #288]	; 0x120
   126a8:	vadd.f64	d6, d6, d4
   126ac:	vadd.f64	d7, d7, d5
   126b0:	vsub.f64	d7, d6, d7
   126b4:	vmov	r0, r1, d7
   126b8:	bl	15c7c <Battery_getData@@Base+0xbcc>
   126bc:	mov	r4, r0
   126be:	mov	r5, r1
   126c0:	cmp	r4, #1
   126c2:	sbcs.w	r3, r5, #0
   126c6:	it	ge
   126c8:	movge	r0, #1
   126ca:	bge.n	1266e <LinuxProcess_compare@@Base+0x13a>
   126cc:	orrs.w	r3, r4, r5
   126d0:	ite	ne
   126d2:	movne.w	r0, #4294967295	; 0xffffffff
   126d6:	moveq	r0, #0
   126d8:	pop	{r4, r5, r6, pc}
   126da:	vldr	d6, [r6, #288]	; 0x120
   126de:	vldr	d7, [r2, #288]	; 0x120
   126e2:	b.n	126b0 <LinuxProcess_compare@@Base+0x17c>
   126e4:	vldr	d6, [r6, #280]	; 0x118
   126e8:	vldr	d7, [r2, #280]	; 0x118
   126ec:	b.n	126b0 <LinuxProcess_compare@@Base+0x17c>
   126ee:	ldr.w	r3, [r2, #256]	; 0x100
   126f2:	ldr.w	r1, [r6, #256]	; 0x100
   126f6:	ldr.w	r0, [r6, #260]	; 0x104
   126fa:	ldr.w	r2, [r2, #260]	; 0x104
   126fe:	subs	r4, r1, r3
   12700:	sbc.w	r5, r0, r2
   12704:	b.n	126c0 <LinuxProcess_compare@@Base+0x18c>
   12706:	ldr.w	r3, [r2, #248]	; 0xf8
   1270a:	ldr.w	r1, [r6, #248]	; 0xf8
   1270e:	ldr.w	r0, [r6, #252]	; 0xfc
   12712:	ldr.w	r2, [r2, #252]	; 0xfc
   12716:	subs	r4, r1, r3
   12718:	sbc.w	r5, r0, r2
   1271c:	b.n	126c0 <LinuxProcess_compare@@Base+0x18c>
   1271e:	ldr.w	r3, [r2, #240]	; 0xf0
   12722:	ldr.w	r1, [r6, #240]	; 0xf0
   12726:	ldr.w	r0, [r6, #244]	; 0xf4
   1272a:	ldr.w	r2, [r2, #244]	; 0xf4
   1272e:	subs	r4, r1, r3
   12730:	sbc.w	r5, r0, r2
   12734:	b.n	126c0 <LinuxProcess_compare@@Base+0x18c>
   12736:	ldr.w	r3, [r2, #232]	; 0xe8
   1273a:	ldr.w	r1, [r6, #232]	; 0xe8
   1273e:	ldr.w	r0, [r6, #236]	; 0xec
   12742:	ldr.w	r2, [r2, #236]	; 0xec
   12746:	subs	r4, r1, r3
   12748:	sbc.w	r5, r0, r2
   1274c:	b.n	126c0 <LinuxProcess_compare@@Base+0x18c>
   1274e:	ldr.w	r3, [r2, #224]	; 0xe0
   12752:	ldr.w	r1, [r6, #224]	; 0xe0
   12756:	ldr.w	r0, [r6, #228]	; 0xe4
   1275a:	ldr.w	r2, [r2, #228]	; 0xe4
   1275e:	subs	r4, r1, r3
   12760:	sbc.w	r5, r0, r2
   12764:	b.n	126c0 <LinuxProcess_compare@@Base+0x18c>
   12766:	ldr.w	r3, [r2, #216]	; 0xd8
   1276a:	ldr.w	r1, [r6, #216]	; 0xd8
   1276e:	ldr.w	r0, [r6, #220]	; 0xdc
   12772:	ldr.w	r2, [r2, #220]	; 0xdc
   12776:	subs	r4, r1, r3
   12778:	sbc.w	r5, r0, r2
   1277c:	b.n	126c0 <LinuxProcess_compare@@Base+0x18c>
   1277e:	ldr.w	r3, [r2, #208]	; 0xd0
   12782:	ldr.w	r1, [r6, #208]	; 0xd0
   12786:	ldr.w	r0, [r6, #212]	; 0xd4
   1278a:	ldr.w	r2, [r2, #212]	; 0xd4
   1278e:	subs	r4, r1, r3
   12790:	sbc.w	r5, r0, r2
   12794:	b.n	126c0 <LinuxProcess_compare@@Base+0x18c>
   12796:	ldr.w	r0, [r6, #304]	; 0x130
   1279a:	ldr.w	r3, [r2, #304]	; 0x130
   1279e:	subs	r0, r0, r3
   127a0:	pop	{r4, r5, r6, pc}
   127a2:	ldr.w	r0, [r6, #300]	; 0x12c
   127a6:	ldr.w	r3, [r2, #300]	; 0x12c
   127aa:	subs	r0, r0, r3
   127ac:	pop	{r4, r5, r6, pc}
   127ae:	ldr.w	r0, [r6, #296]	; 0x128
   127b2:	ldr.w	r3, [r2, #296]	; 0x128
   127b6:	subs	r0, r0, r3
   127b8:	pop	{r4, r5, r6, pc}
   127ba:	ldr.w	r0, [r6, #200]	; 0xc8
   127be:	ldr.w	r3, [r2, #200]	; 0xc8
   127c2:	subs	r0, r0, r3
   127c4:	pop	{r4, r5, r6, pc}
   127c6:	ldr.w	r0, [r6, #196]	; 0xc4
   127ca:	ldr.w	r3, [r2, #196]	; 0xc4
   127ce:	subs	r0, r0, r3
   127d0:	pop	{r4, r5, r6, pc}
   127d2:	ldr.w	r0, [r6, #192]	; 0xc0
   127d6:	ldr.w	r3, [r2, #192]	; 0xc0
   127da:	subs	r0, r0, r3
   127dc:	pop	{r4, r5, r6, pc}
   127de:	ldr.w	r0, [r6, #188]	; 0xbc
   127e2:	ldr.w	r3, [r2, #188]	; 0xbc
   127e6:	subs	r0, r0, r3
   127e8:	pop	{r4, r5, r6, pc}
   127ea:	ldr.w	r0, [r6, #184]	; 0xb8
   127ee:	ldr.w	r3, [r2, #184]	; 0xb8
   127f2:	subs	r0, r0, r3
   127f4:	pop	{r4, r5, r6, pc}
   127f6:	ldr.w	r3, [r2, #176]	; 0xb0
   127fa:	ldr.w	r1, [r6, #176]	; 0xb0
   127fe:	ldr.w	r0, [r6, #180]	; 0xb4
   12802:	ldr.w	r2, [r2, #180]	; 0xb4
   12806:	subs	r4, r1, r3
   12808:	sbc.w	r5, r0, r2
   1280c:	b.n	126c0 <LinuxProcess_compare@@Base+0x18c>
   1280e:	ldr.w	r3, [r2, #168]	; 0xa8
   12812:	ldr.w	r1, [r6, #168]	; 0xa8
   12816:	ldr.w	r0, [r6, #172]	; 0xac
   1281a:	ldr.w	r2, [r2, #172]	; 0xac
   1281e:	subs	r4, r1, r3
   12820:	sbc.w	r5, r0, r2
   12824:	b.n	126c0 <LinuxProcess_compare@@Base+0x18c>
   12826:	ldr.w	r3, [r2, #160]	; 0xa0
   1282a:	ldr.w	r1, [r6, #160]	; 0xa0
   1282e:	ldr.w	r0, [r6, #164]	; 0xa4
   12832:	ldr.w	r2, [r2, #164]	; 0xa4
   12836:	subs	r4, r1, r3
   12838:	sbc.w	r5, r0, r2
   1283c:	b.n	126c0 <LinuxProcess_compare@@Base+0x18c>
   1283e:	ldr.w	r3, [r2, #152]	; 0x98
   12842:	ldr.w	r1, [r6, #152]	; 0x98
   12846:	ldr.w	r0, [r6, #156]	; 0x9c
   1284a:	ldr.w	r2, [r2, #156]	; 0x9c
   1284e:	subs	r4, r1, r3
   12850:	sbc.w	r5, r0, r2
   12854:	b.n	126c0 <LinuxProcess_compare@@Base+0x18c>
   12856:	ldr	r1, [pc, #12]	; (12864 <LinuxProcess_compare@@Base+0x330>)
   12858:	add	r1, pc
   1285a:	b.n	12690 <LinuxProcess_compare@@Base+0x15c>
   1285c:	ldr	r0, [pc, #8]	; (12868 <LinuxProcess_compare@@Base+0x334>)
   1285e:	add	r0, pc
   12860:	b.n	12686 <LinuxProcess_compare@@Base+0x152>
   12862:	nop
   12864:	subs	r7, #72	; 0x48
   12866:	movs	r0, r0
   12868:	subs	r7, #66	; 0x42
	...

0001286c <LinuxProcess_writeField@@Base>:
   1286c:	ldr.w	ip, [pc, #996]	; 12c54 <LinuxProcess_writeField@@Base+0x3e8>
   12870:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   12874:	mov	r4, r0
   12876:	ldr	r3, [r0, #4]
   12878:	add	ip, pc
   1287a:	ldr	r0, [pc, #988]	; (12c58 <LinuxProcess_writeField@@Base+0x3ec>)
   1287c:	sub	sp, #276	; 0x114
   1287e:	ldr	r6, [pc, #988]	; (12c5c <LinuxProcess_writeField@@Base+0x3f0>)
   12880:	add	r7, sp, #12
   12882:	ldr	r5, [pc, #988]	; (12c60 <LinuxProcess_writeField@@Base+0x3f4>)
   12884:	ldr.w	r0, [ip, r0]
   12888:	add	r6, pc
   1288a:	ldrb.w	r8, [r3, #66]	; 0x42
   1288e:	ldr	r0, [r0, #0]
   12890:	str	r0, [sp, #268]	; 0x10c
   12892:	mov.w	r0, #0
   12896:	movs	r0, #0
   12898:	strb.w	r0, [r7, #255]	; 0xff
   1289c:	subs	r0, r2, #7
   1289e:	ldr	r3, [r6, r5]
   128a0:	mov	r5, r1
   128a2:	ldr	r3, [r3, #0]
   128a4:	ldr.w	r9, [r3, #4]
   128a8:	cmp	r0, #108	; 0x6c
   128aa:	bhi.n	1298a <LinuxProcess_writeField@@Base+0x11e>
   128ac:	tbh	[pc, r0, lsl #1]
   128b0:	lsls	r6, r7, #5
   128b2:	lsls	r5, r5, #1
   128b4:	lsls	r5, r5, #1
   128b6:	lsls	r5, r5, #1
   128b8:	lsls	r5, r6, #5
   128ba:	lsls	r5, r5, #1
   128bc:	lsls	r4, r5, #5
   128be:	lsls	r6, r4, #5
   128c0:	lsls	r0, r4, #5
   128c2:	lsls	r2, r3, #5
   128c4:	lsls	r4, r2, #5
   128c6:	lsls	r5, r5, #1
   128c8:	lsls	r5, r5, #1
   128ca:	lsls	r5, r5, #1
   128cc:	lsls	r5, r5, #1
   128ce:	lsls	r5, r5, #1
   128d0:	lsls	r5, r5, #1
   128d2:	lsls	r5, r5, #1
   128d4:	lsls	r5, r5, #1
   128d6:	lsls	r5, r5, #1
   128d8:	lsls	r5, r5, #1
   128da:	lsls	r5, r5, #1
   128dc:	lsls	r5, r5, #1
   128de:	lsls	r5, r5, #1
   128e0:	lsls	r5, r5, #1
   128e2:	lsls	r5, r5, #1
   128e4:	lsls	r5, r5, #1
   128e6:	lsls	r5, r5, #1
   128e8:	lsls	r5, r5, #1
   128ea:	lsls	r5, r5, #1
   128ec:	lsls	r5, r5, #1
   128ee:	lsls	r5, r5, #1
   128f0:	lsls	r5, r5, #1
   128f2:	lsls	r5, r5, #1
   128f4:	lsls	r0, r2, #5
   128f6:	lsls	r4, r1, #5
   128f8:	lsls	r0, r1, #5
   128fa:	lsls	r4, r0, #5
   128fc:	lsls	r1, r6, #4
   128fe:	lsls	r5, r5, #1
   12900:	lsls	r5, r5, #1
   12902:	lsls	r5, r5, #1
   12904:	lsls	r5, r5, #1
   12906:	lsls	r5, r5, #1
   12908:	lsls	r5, r5, #1
   1290a:	lsls	r5, r5, #1
   1290c:	lsls	r5, r5, #1
   1290e:	lsls	r5, r5, #1
   12910:	lsls	r5, r5, #1
   12912:	lsls	r5, r5, #1
   12914:	lsls	r5, r5, #1
   12916:	lsls	r5, r5, #1
   12918:	lsls	r5, r5, #1
   1291a:	lsls	r5, r5, #1
   1291c:	lsls	r5, r5, #1
   1291e:	lsls	r5, r5, #1
   12920:	lsls	r5, r5, #1
   12922:	lsls	r5, r5, #1
   12924:	lsls	r5, r5, #1
   12926:	lsls	r5, r5, #1
   12928:	lsls	r5, r5, #1
   1292a:	lsls	r5, r5, #1
   1292c:	lsls	r5, r5, #1
   1292e:	lsls	r5, r5, #1
   12930:	lsls	r5, r5, #1
   12932:	lsls	r5, r5, #1
   12934:	lsls	r5, r5, #1
   12936:	lsls	r5, r5, #1
   12938:	lsls	r5, r5, #1
   1293a:	lsls	r5, r5, #1
   1293c:	lsls	r5, r5, #1
   1293e:	lsls	r5, r5, #1
   12940:	lsls	r5, r5, #1
   12942:	lsls	r5, r5, #1
   12944:	lsls	r5, r5, #1
   12946:	lsls	r5, r5, #1
   12948:	lsls	r5, r5, #1
   1294a:	lsls	r5, r5, #1
   1294c:	lsls	r5, r5, #1
   1294e:	lsls	r5, r5, #1
   12950:	lsls	r5, r5, #1
   12952:	lsls	r5, r5, #1
   12954:	lsls	r5, r5, #1
   12956:	lsls	r5, r5, #1
   12958:	lsls	r5, r5, #1
   1295a:	lsls	r5, r5, #1
   1295c:	lsls	r5, r5, #1
   1295e:	lsls	r5, r5, #1
   12960:	lsls	r5, r5, #1
   12962:	lsls	r5, r5, #1
   12964:	lsls	r5, r5, #1
   12966:	lsls	r5, r5, #1
   12968:	lsls	r5, r5, #1
   1296a:	lsls	r2, r5, #4
   1296c:	lsls	r7, r4, #4
   1296e:	lsls	r1, r3, #4
   12970:	lsls	r1, r2, #4
   12972:	lsls	r1, r1, #4
   12974:	lsls	r1, r0, #4
   12976:	lsls	r1, r7, #3
   12978:	lsls	r1, r6, #3
   1297a:	lsls	r1, r5, #3
   1297c:	lsls	r1, r4, #3
   1297e:	lsls	r0, r3, #3
   12980:	lsls	r7, r1, #3
   12982:	lsls	r3, r7, #2
   12984:	lsls	r1, r3, #2
   12986:	lsls	r1, r6, #2
   12988:	lsls	r5, r7, #1
   1298a:	mov	r1, r5
   1298c:	mov	r0, r4
   1298e:	bl	c2ac <Process_writeField@@Base>
   12992:	ldr	r2, [pc, #720]	; (12c64 <LinuxProcess_writeField@@Base+0x3f8>)
   12994:	ldr	r3, [pc, #704]	; (12c58 <LinuxProcess_writeField@@Base+0x3ec>)
   12996:	add	r2, pc
   12998:	ldr	r3, [r2, r3]
   1299a:	ldr	r2, [r3, #0]
   1299c:	ldr	r3, [sp, #268]	; 0x10c
   1299e:	eors	r2, r3
   129a0:	bne.w	12c50 <LinuxProcess_writeField@@Base+0x3e4>
   129a4:	add	sp, #276	; 0x114
   129a6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   129aa:	ldr.w	r1, [r4, #140]	; 0x8c
   129ae:	asrs	r2, r1, #13
   129b0:	beq.w	12bd2 <LinuxProcess_writeField@@Base+0x366>
   129b4:	cmp	r2, #2
   129b6:	beq.w	12c16 <LinuxProcess_writeField@@Base+0x3aa>
   129ba:	cmp	r2, #1
   129bc:	beq.w	12c32 <LinuxProcess_writeField@@Base+0x3c6>
   129c0:	cmp	r2, #3
   129c2:	itet	eq
   129c4:	ldreq.w	r9, [r3, #108]	; 0x6c
   129c8:	movwne	r3, #16191	; 0x3f3f
   129cc:	movweq	r3, #25705	; 0x6469
   129d0:	movt	r3, #32
   129d4:	str	r3, [r7, #0]
   129d6:	mov	r2, r7
   129d8:	mov	r1, r9
   129da:	mov	r0, r5
   129dc:	bl	d1e4 <RichString_append@@Base>
   129e0:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   129e2:	ldr.w	r0, [r4, #308]	; 0x134
   129e6:	mov.w	r3, #256	; 0x100
   129ea:	ldr	r4, [pc, #636]	; (12c68 <LinuxProcess_writeField@@Base+0x3fc>)
   129ec:	movs	r2, #1
   129ee:	movs	r1, #255	; 0xff
   129f0:	add	r4, pc
   129f2:	str	r0, [sp, #4]
   129f4:	mov	r0, r7
   129f6:	str	r4, [sp, #0]
   129f8:	blx	6c78 <__snprintf_chk@plt>
   129fc:	cmp	r0, #254	; 0xfe
   129fe:	bls.n	129d6 <LinuxProcess_writeField@@Base+0x16a>
   12a00:	movs	r0, #1
   12a02:	blx	6730 <curs_set@plt>
   12a06:	blx	6c48 <endwin@plt+0x4>
   12a0a:	movs	r1, #0
   12a0c:	movs	r0, #1
   12a0e:	blx	683c <err@plt>
   12a12:	ldr.w	r1, [r4, #312]	; 0x138
   12a16:	ldr	r0, [pc, #596]	; (12c6c <LinuxProcess_writeField@@Base+0x400>)
   12a18:	mov.w	r3, #256	; 0x100
   12a1c:	str	r1, [sp, #4]
   12a1e:	movs	r2, #1
   12a20:	movs	r1, #255	; 0xff
   12a22:	ldr	r4, [r6, r0]
   12a24:	b.n	129f4 <LinuxProcess_writeField@@Base+0x188>
   12a26:	vmov.f64	d7, #240	; 0xbf800000 -1.0
   12a2a:	vldr	d0, [r4, #280]	; 0x118
   12a2e:	vcmp.f64	d0, d7
   12a32:	vmrs	APSR_nzcv, fpscr
   12a36:	beq.n	12a40 <LinuxProcess_writeField@@Base+0x1d4>
   12a38:	vldr	d7, [r4, #288]	; 0x120
   12a3c:	vadd.f64	d0, d0, d7
   12a40:	mov	r3, r8
   12a42:	mov	r1, r7
   12a44:	mov	r0, r5
   12a46:	movs	r2, #255	; 0xff
   12a48:	bl	c978 <Process_outputRate@@Base>
   12a4c:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12a4e:	vldr	d0, [r4, #288]	; 0x120
   12a52:	mov	r3, r8
   12a54:	mov	r1, r7
   12a56:	mov	r0, r5
   12a58:	movs	r2, #255	; 0xff
   12a5a:	bl	c978 <Process_outputRate@@Base>
   12a5e:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12a60:	vldr	d0, [r4, #280]	; 0x118
   12a64:	mov	r3, r8
   12a66:	mov	r1, r7
   12a68:	mov	r0, r5
   12a6a:	movs	r2, #255	; 0xff
   12a6c:	bl	c978 <Process_outputRate@@Base>
   12a70:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12a72:	str.w	r8, [sp]
   12a76:	mov	r0, r5
   12a78:	ldrd	r2, r3, [r4, #256]	; 0x100
   12a7c:	bl	bf94 <Process_colorNumber@@Base>
   12a80:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12a82:	str.w	r8, [sp]
   12a86:	mov	r0, r5
   12a88:	ldrd	r2, r3, [r4, #248]	; 0xf8
   12a8c:	bl	bf94 <Process_colorNumber@@Base>
   12a90:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12a92:	str.w	r8, [sp]
   12a96:	mov	r0, r5
   12a98:	ldrd	r2, r3, [r4, #240]	; 0xf0
   12a9c:	bl	bf94 <Process_colorNumber@@Base>
   12aa0:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12aa2:	str.w	r8, [sp]
   12aa6:	mov	r0, r5
   12aa8:	ldrd	r2, r3, [r4, #232]	; 0xe8
   12aac:	bl	bf94 <Process_colorNumber@@Base>
   12ab0:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12ab2:	str.w	r8, [sp]
   12ab6:	mov	r0, r5
   12ab8:	ldrd	r2, r3, [r4, #224]	; 0xe0
   12abc:	bl	bf94 <Process_colorNumber@@Base>
   12ac0:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12ac2:	str.w	r8, [sp]
   12ac6:	mov	r0, r5
   12ac8:	ldrd	r2, r3, [r4, #216]	; 0xd8
   12acc:	bl	bf94 <Process_colorNumber@@Base>
   12ad0:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12ad2:	str.w	r8, [sp]
   12ad6:	mov	r0, r5
   12ad8:	ldrd	r2, r3, [r4, #208]	; 0xd0
   12adc:	bl	bf94 <Process_colorNumber@@Base>
   12ae0:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12ae2:	ldr.w	r0, [r4, #304]	; 0x130
   12ae6:	mov.w	r3, #256	; 0x100
   12aea:	ldr	r4, [pc, #388]	; (12c70 <LinuxProcess_writeField@@Base+0x404>)
   12aec:	add	r4, pc
   12aee:	str	r0, [sp, #4]
   12af0:	movs	r2, #1
   12af2:	movs	r1, #255	; 0xff
   12af4:	mov	r0, r7
   12af6:	str	r4, [sp, #0]
   12af8:	blx	6c78 <__snprintf_chk@plt>
   12afc:	b.n	129d6 <LinuxProcess_writeField@@Base+0x16a>
   12afe:	ldr.w	r1, [r4, #300]	; 0x12c
   12b02:	b.n	12a16 <LinuxProcess_writeField@@Base+0x1aa>
   12b04:	ldr.w	r0, [r4, #296]	; 0x128
   12b08:	mov.w	r3, #256	; 0x100
   12b0c:	ldr	r4, [pc, #356]	; (12c74 <LinuxProcess_writeField@@Base+0x408>)
   12b0e:	add	r4, pc
   12b10:	b.n	12aee <LinuxProcess_writeField@@Base+0x282>
   12b12:	ldr.w	r4, [r4, #200]	; 0xc8
   12b16:	movs	r0, #30
   12b18:	blx	67dc <sysconf@plt>
   12b1c:	mov	r2, r8
   12b1e:	addw	r3, r0, #1023	; 0x3ff
   12b22:	ands.w	r3, r3, r0, asr #32
   12b26:	it	cc
   12b28:	movcc	r3, r0
   12b2a:	mov	r0, r5
   12b2c:	asrs	r3, r3, #10
   12b2e:	mul.w	r1, r4, r3
   12b32:	bl	bdf8 <Process_humanNumber@@Base>
   12b36:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12b38:	ldr.w	r4, [r4, #196]	; 0xc4
   12b3c:	movs	r0, #30
   12b3e:	b.n	12b18 <LinuxProcess_writeField@@Base+0x2ac>
   12b40:	ldr.w	r4, [r4, #192]	; 0xc0
   12b44:	movs	r0, #30
   12b46:	b.n	12b18 <LinuxProcess_writeField@@Base+0x2ac>
   12b48:	ldr.w	r4, [r4, #188]	; 0xbc
   12b4c:	movs	r0, #30
   12b4e:	b.n	12b18 <LinuxProcess_writeField@@Base+0x2ac>
   12b50:	ldr.w	r4, [r4, #184]	; 0xb8
   12b54:	movs	r0, #30
   12b56:	b.n	12b18 <LinuxProcess_writeField@@Base+0x2ac>
   12b58:	ldrd	r2, r3, [r4, #176]	; 0xb0
   12b5c:	mov	r0, r5
   12b5e:	bl	c108 <Process_printTime@@Base>
   12b62:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12b64:	ldrd	r2, r3, [r4, #168]	; 0xa8
   12b68:	mov	r0, r5
   12b6a:	bl	c108 <Process_printTime@@Base>
   12b6e:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12b70:	ldrd	r2, r3, [r4, #160]	; 0xa0
   12b74:	mov	r0, r5
   12b76:	bl	c108 <Process_printTime@@Base>
   12b7a:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12b7c:	ldrd	r2, r3, [r4, #152]	; 0x98
   12b80:	mov	r0, r5
   12b82:	bl	c108 <Process_printTime@@Base>
   12b86:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12b88:	str.w	r8, [sp]
   12b8c:	mov	r0, r5
   12b8e:	ldr.w	r2, [r4, #148]	; 0x94
   12b92:	movs	r3, #0
   12b94:	bl	bf94 <Process_colorNumber@@Base>
   12b98:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12b9a:	str.w	r8, [sp]
   12b9e:	mov	r0, r5
   12ba0:	ldr.w	r2, [r4, #144]	; 0x90
   12ba4:	movs	r3, #0
   12ba6:	bl	bf94 <Process_colorNumber@@Base>
   12baa:	b.n	12992 <LinuxProcess_writeField@@Base+0x126>
   12bac:	ldr.w	r2, [r4, #316]	; 0x13c
   12bb0:	cbz	r2, 12c04 <LinuxProcess_writeField@@Base+0x398>
   12bb2:	ldr	r0, [pc, #196]	; (12c78 <LinuxProcess_writeField@@Base+0x40c>)
   12bb4:	adds	r2, #5
   12bb6:	mov.w	r3, #256	; 0x100
   12bba:	str	r2, [sp, #4]
   12bbc:	add	r0, pc
   12bbe:	movs	r2, #1
   12bc0:	str	r0, [sp, #0]
   12bc2:	movs	r1, #255	; 0xff
   12bc4:	mov	r0, r7
   12bc6:	blx	6c78 <__snprintf_chk@plt>
   12bca:	cmp	r0, #254	; 0xfe
   12bcc:	bls.w	129d6 <LinuxProcess_writeField@@Base+0x16a>
   12bd0:	b.n	12a00 <LinuxProcess_writeField@@Base+0x194>
   12bd2:	ldr	r1, [r4, #96]	; 0x60
   12bd4:	movw	r0, #26215	; 0x6667
   12bd8:	movt	r0, #26214	; 0x6666
   12bdc:	ldr.w	ip, [pc, #156]	; 12c7c <LinuxProcess_writeField@@Base+0x410>
   12be0:	adds	r1, #20
   12be2:	mov.w	r3, #256	; 0x100
   12be6:	add	ip, pc
   12be8:	movs	r2, #1
   12bea:	smull	r0, r6, r0, r1
   12bee:	asrs	r4, r1, #31
   12bf0:	mov	r0, r7
   12bf2:	movs	r1, #255	; 0xff
   12bf4:	str.w	ip, [sp]
   12bf8:	rsb	r4, r4, r6, asr #1
   12bfc:	str	r4, [sp, #4]
   12bfe:	blx	6c78 <__snprintf_chk@plt>
   12c02:	b.n	129d6 <LinuxProcess_writeField@@Base+0x16a>
   12c04:	ldr	r2, [pc, #120]	; (12c80 <LinuxProcess_writeField@@Base+0x414>)
   12c06:	mov	r4, r7
   12c08:	ldr.w	r9, [r3, #76]	; 0x4c
   12c0c:	add	r2, pc
   12c0e:	ldmia	r2, {r0, r1, r2}
   12c10:	stmia	r4!, {r0, r1}
   12c12:	strh	r2, [r4, #0]
   12c14:	b.n	129d6 <LinuxProcess_writeField@@Base+0x16a>
   12c16:	ldr	r0, [pc, #108]	; (12c84 <LinuxProcess_writeField@@Base+0x418>)
   12c18:	ubfx	r1, r1, #0, #13
   12c1c:	mov.w	r3, #256	; 0x100
   12c20:	str	r1, [sp, #4]
   12c22:	add	r0, pc
   12c24:	movs	r2, #1
   12c26:	str	r0, [sp, #0]
   12c28:	movs	r1, #255	; 0xff
   12c2a:	mov	r0, r7
   12c2c:	blx	6c78 <__snprintf_chk@plt>
   12c30:	b.n	129d6 <LinuxProcess_writeField@@Base+0x16a>
   12c32:	ldr	r0, [pc, #84]	; (12c88 <LinuxProcess_writeField@@Base+0x41c>)
   12c34:	ubfx	r1, r1, #0, #13
   12c38:	ldr.w	r9, [r3, #104]	; 0x68
   12c3c:	mov.w	r3, #256	; 0x100
   12c40:	add	r0, pc
   12c42:	str	r1, [sp, #4]
   12c44:	str	r0, [sp, #0]
   12c46:	movs	r1, #255	; 0xff
   12c48:	mov	r0, r7
   12c4a:	blx	6c78 <__snprintf_chk@plt>
   12c4e:	b.n	129d6 <LinuxProcess_writeField@@Base+0x16a>
   12c50:	blx	67d0 <__stack_chk_fail@plt>
   12c54:	strb	r4, [r2, #18]
   12c56:	movs	r1, r0
   12c58:	lsls	r0, r0, #9
   12c5a:	movs	r0, r0
   12c5c:	strb	r4, [r0, #18]
   12c5e:	movs	r1, r0
   12c60:	lsls	r0, r6, #9
   12c62:	movs	r0, r0
   12c64:	strb	r6, [r6, #13]
   12c66:	movs	r1, r0
   12c68:	strb	r4, [r2, r4]
   12c6a:	movs	r0, r0
   12c6c:	lsls	r4, r2, #9
   12c6e:	movs	r0, r0
   12c70:	strb	r0, [r2, r0]
   12c72:	movs	r0, r0
   12c74:	strh	r6, [r4, r7]
   12c76:	movs	r0, r0
   12c78:	strh	r4, [r4, r4]
   12c7a:	movs	r0, r0
   12c7c:	strh	r6, [r4, r4]
   12c7e:	movs	r0, r0
   12c80:	strh	r4, [r3, r3]
   12c82:	movs	r0, r0
   12c84:	strh	r2, [r5, r3]
   12c86:	movs	r0, r0
   12c88:	strh	r4, [r2, r3]
	...

00012c8c <LinuxProcess_new@@Base>:
   12c8c:	push	{r3, r4, r5, lr}
   12c8e:	mov.w	r1, #320	; 0x140
   12c92:	mov	r5, r0
   12c94:	movs	r0, #1
   12c96:	bl	11da0 <xCalloc@@Base>
   12c9a:	ldr	r3, [pc, #16]	; (12cac <LinuxProcess_new@@Base+0x20>)
   12c9c:	mov	r1, r5
   12c9e:	add	r3, pc
   12ca0:	mov	r4, r0
   12ca2:	str	r3, [r0, #0]
   12ca4:	bl	cabc <Process_init@@Base>
   12ca8:	mov	r0, r4
   12caa:	pop	{r3, r4, r5, pc}
   12cac:	strh	r6, [r6, #22]
   12cae:	movs	r1, r0

00012cb0 <LinuxProcess_updateIOPriority@@Base>:
   12cb0:	push	{r4, lr}
   12cb2:	mov	r4, r0
   12cb4:	ldr	r2, [r4, #16]
   12cb6:	movs	r1, #1
   12cb8:	movw	r0, #315	; 0x13b
   12cbc:	blx	69e8 <syscall@plt>
   12cc0:	str.w	r0, [r4, #140]	; 0x8c
   12cc4:	pop	{r4, pc}
   12cc6:	nop

00012cc8 <LinuxProcess_setIOPriority@@Base>:
   12cc8:	push	{r3, r4, r5, lr}
   12cca:	mov	r4, r0
   12ccc:	mov	r3, r1
   12cce:	ldr	r2, [r0, #16]
   12cd0:	mov	r5, r1
   12cd2:	mov.w	r0, #314	; 0x13a
   12cd6:	movs	r1, #1
   12cd8:	blx	69e8 <syscall@plt>
   12cdc:	ldr	r2, [r4, #16]
   12cde:	movs	r1, #1
   12ce0:	movw	r0, #315	; 0x13b
   12ce4:	blx	69e8 <syscall@plt>
   12ce8:	str.w	r0, [r4, #140]	; 0x8c
   12cec:	subs	r0, r5, r0
   12cee:	clz	r0, r0
   12cf2:	lsrs	r0, r0, #5
   12cf4:	pop	{r3, r4, r5, pc}
   12cf6:	nop

00012cf8 <Process_isThread@@Base>:
   12cf8:	ldr	r2, [r0, #16]
   12cfa:	ldr	r3, [r0, #24]
   12cfc:	cmp	r2, r3
   12cfe:	ite	eq
   12d00:	ldrbeq.w	r0, [r0, #136]	; 0x88
   12d04:	movne	r0, #1
   12d06:	bx	lr
   12d08:	ldr	r3, [r0, #4]
   12d0a:	ldr	r2, [r1, #4]
   12d0c:	cmp	r3, r2
   12d0e:	ittte	eq
   12d10:	ldreq	r0, [r0, #8]
   12d12:	ldreq	r3, [r1, #8]
   12d14:	subeq	r0, r0, r3
   12d16:	subne	r0, r3, r2
   12d18:	bx	lr
   12d1a:	nop
   12d1c:	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12d20:	mov	r7, r0
   12d22:	mov	r6, r1
   12d24:	mov	r5, r2
   12d26:	mov.w	r8, #0
   12d2a:	mov	r2, r5
   12d2c:	mov	r1, r6
   12d2e:	mov	r0, r7
   12d30:	blx	6724 <read@plt>
   12d34:	adds	r3, r0, #1
   12d36:	mov	r4, r0
   12d38:	beq.n	12d54 <Process_isThread@@Base+0x5c>
   12d3a:	cmp	r0, #0
   12d3c:	ittt	gt
   12d3e:	subgt	r5, r5, r0
   12d40:	addgt	r6, r6, r0
   12d42:	addgt	r8, r0
   12d44:	cmp	r0, #0
   12d46:	it	ne
   12d48:	cmpne	r5, #0
   12d4a:	bne.n	12d2a <Process_isThread@@Base+0x32>
   12d4c:	mov	r4, r8
   12d4e:	mov	r0, r4
   12d50:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d54:	blx	6a48 <__errno_location@plt>
   12d58:	ldr	r3, [r0, #0]
   12d5a:	cmp	r3, #4
   12d5c:	beq.n	12d2a <Process_isThread@@Base+0x32>
   12d5e:	mov	r0, r4
   12d60:	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   12d64:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d68:	mov	r2, r0
   12d6a:	vpush	{d8-d10}
   12d6e:	mov	sl, r2
   12d70:	ldr.w	r2, [pc, #1140]	; 131e8 <Process_isThread@@Base+0x4f0>
   12d74:	mov	r3, r1
   12d76:	ldr.w	r0, [pc, #1140]	; 131ec <Process_isThread@@Base+0x4f4>
   12d7a:	add	r2, pc
   12d7c:	ldr.w	r1, [pc, #1136]	; 131f0 <Process_isThread@@Base+0x4f8>
   12d80:	sub.w	sp, sp, #788	; 0x314
   12d84:	add	r0, pc
   12d86:	add	r1, pc
   12d88:	str	r3, [sp, #128]	; 0x80
   12d8a:	ldr.w	r3, [pc, #1128]	; 131f4 <Process_isThread@@Base+0x4fc>
   12d8e:	ldr	r3, [r2, r3]
   12d90:	ldr	r3, [r3, #0]
   12d92:	str	r3, [sp, #780]	; 0x30c
   12d94:	mov.w	r3, #0
   12d98:	blx	6718 <fopen@plt>
   12d9c:	cmp	r0, #0
   12d9e:	beq.w	131e0 <Process_isThread@@Base+0x4e8>
   12da2:	ldr.w	r3, [sl]
   12da6:	vmov	s17, r0
   12daa:	cmp	r3, #0
   12dac:	str	r3, [sp, #172]	; 0xac
   12dae:	blt.w	131d6 <Process_isThread@@Base+0x4de>
   12db2:	adds	r3, #1
   12db4:	str	r3, [sp, #132]	; 0x84
   12db6:	ldr.w	r3, [pc, #1088]	; 131f8 <Process_isThread@@Base+0x500>
   12dba:	ldr.w	r2, [pc, #1088]	; 131fc <Process_isThread@@Base+0x504>
   12dbe:	add	r3, pc
   12dc0:	strd	r6, r7, [sp, #40]	; 0x28
   12dc4:	add	r2, pc
   12dc6:	strd	r4, r5, [sp, #48]	; 0x30
   12dca:	vmov	s20, r3
   12dce:	add	r3, sp, #264	; 0x108
   12dd0:	vmov	s19, r2
   12dd4:	vmov	s16, r3
   12dd8:	add	r3, sp, #192	; 0xc0
   12dda:	str	r3, [sp, #152]	; 0x98
   12ddc:	add	r3, sp, #184	; 0xb8
   12dde:	vmov	s18, r3
   12de2:	add	r3, sp, #256	; 0x100
   12de4:	str	r3, [sp, #148]	; 0x94
   12de6:	add	r3, sp, #248	; 0xf8
   12de8:	str	r3, [sp, #144]	; 0x90
   12dea:	add	r3, sp, #240	; 0xf0
   12dec:	str	r3, [sp, #140]	; 0x8c
   12dee:	add	r3, sp, #232	; 0xe8
   12df0:	str	r3, [sp, #136]	; 0x88
   12df2:	add	r3, sp, #224	; 0xe0
   12df4:	str	r3, [sp, #168]	; 0xa8
   12df6:	add	r3, sp, #216	; 0xd8
   12df8:	str	r3, [sp, #164]	; 0xa4
   12dfa:	add	r3, sp, #208	; 0xd0
   12dfc:	str	r3, [sp, #160]	; 0xa0
   12dfe:	add	r3, sp, #200	; 0xc8
   12e00:	str	r3, [sp, #156]	; 0x9c
   12e02:	movs	r3, #0
   12e04:	str	r3, [sp, #84]	; 0x54
   12e06:	b.n	1311e <Process_isThread@@Base+0x426>
   12e08:	ldr	r4, [sp, #168]	; 0xa8
   12e0a:	ldr	r3, [sp, #148]	; 0x94
   12e0c:	ldr	r2, [sp, #144]	; 0x90
   12e0e:	str	r4, [sp, #16]
   12e10:	ldr	r4, [sp, #164]	; 0xa4
   12e12:	ldr	r1, [sp, #140]	; 0x8c
   12e14:	ldr	r0, [sp, #136]	; 0x88
   12e16:	str	r4, [sp, #12]
   12e18:	ldr	r4, [sp, #160]	; 0xa0
   12e1a:	str	r3, [sp, #32]
   12e1c:	str	r2, [sp, #28]
   12e1e:	add	r2, sp, #180	; 0xb4
   12e20:	str	r4, [sp, #8]
   12e22:	ldr	r4, [sp, #156]	; 0x9c
   12e24:	str	r1, [sp, #24]
   12e26:	str	r0, [sp, #20]
   12e28:	str	r4, [sp, #4]
   12e2a:	ldr	r4, [sp, #152]	; 0x98
   12e2c:	vmov	r3, s18
   12e30:	vmov	r1, s19
   12e34:	vmov	r0, s16
   12e38:	str	r4, [sp, #0]
   12e3a:	blx	6a6c <__isoc99_sscanf@plt>
   12e3e:	ldr	r1, [sp, #248]	; 0xf8
   12e40:	movs	r3, #192	; 0xc0
   12e42:	ldr	r0, [sp, #184]	; 0xb8
   12e44:	add.w	ip, sp, r3
   12e48:	ldrd	r4, r5, [sp, #216]	; 0xd8
   12e4c:	subs	r0, r0, r1
   12e4e:	ldr.w	sl, [sp, #252]	; 0xfc
   12e52:	ldr.w	ip, [ip]
   12e56:	ldr	r2, [sp, #188]	; 0xbc
   12e58:	str	r0, [sp, #40]	; 0x28
   12e5a:	ldr	r0, [sp, #256]	; 0x100
   12e5c:	sbc.w	r2, r2, sl
   12e60:	ldr.w	lr, [sp, #260]	; 0x104
   12e64:	subs.w	r8, ip, r0
   12e68:	strd	r4, r5, [sp, #88]	; 0x58
   12e6c:	ldrd	fp, ip, [sp, #208]	; 0xd0
   12e70:	str	r2, [sp, #44]	; 0x2c
   12e72:	ldr	r2, [sp, #196]	; 0xc4
   12e74:	ldr	r5, [sp, #92]	; 0x5c
   12e76:	ldrd	r6, r7, [sp, #200]	; 0xc8
   12e7a:	sbc.w	r9, r2, lr
   12e7e:	adds.w	r2, fp, r4
   12e82:	str	r2, [sp, #48]	; 0x30
   12e84:	adc.w	r4, ip, r5
   12e88:	str	r4, [sp, #52]	; 0x34
   12e8a:	ldrd	r4, r5, [sp, #232]	; 0xe8
   12e8e:	strd	r6, r7, [sp, #56]	; 0x38
   12e92:	ldrd	r6, r7, [sp, #224]	; 0xe0
   12e96:	strd	r4, r5, [sp, #96]	; 0x60
   12e9a:	ldr	r4, [sp, #56]	; 0x38
   12e9c:	ldr	r2, [sp, #128]	; 0x80
   12e9e:	strd	fp, ip, [sp, #112]	; 0x70
   12ea2:	adds.w	ip, r4, r6
   12ea6:	ldr	r4, [sp, #60]	; 0x3c
   12ea8:	ldr	r2, [r2, #0]
   12eaa:	adc.w	fp, r4, r7
   12eae:	ldr	r4, [sp, #84]	; 0x54
   12eb0:	strd	r6, r7, [sp, #120]	; 0x78
   12eb4:	ldrd	r5, r6, [sp, #96]	; 0x60
   12eb8:	mla	r3, r3, r4, r2
   12ebc:	adds.w	r4, ip, r5
   12ec0:	str	r4, [sp, #64]	; 0x40
   12ec2:	adc.w	r4, fp, r6
   12ec6:	adds	r1, r1, r0
   12ec8:	str	r4, [sp, #68]	; 0x44
   12eca:	str	r1, [sp, #72]	; 0x48
   12ecc:	adc.w	r4, sl, lr
   12ed0:	ldrd	r0, r1, [sp, #240]	; 0xf0
   12ed4:	ldrd	r5, r6, [sp, #40]	; 0x28
   12ed8:	str	r4, [sp, #76]	; 0x4c
   12eda:	adds.w	lr, r5, r8
   12ede:	ldrd	sl, fp, [r3, #8]
   12ee2:	adc.w	ip, r6, r9
   12ee6:	ldrd	r6, r7, [sp, #48]	; 0x30
   12eea:	adds.w	lr, lr, r0
   12eee:	adc.w	ip, ip, r1
   12ef2:	adds.w	lr, lr, r6
   12ef6:	ldrd	r5, r6, [sp, #72]	; 0x48
   12efa:	adc.w	ip, ip, r7
   12efe:	adds.w	lr, lr, r5
   12f02:	adc.w	ip, ip, r6
   12f06:	ldrd	r5, r6, [sp, #64]	; 0x40
   12f0a:	adds.w	r4, lr, r5
   12f0e:	str	r4, [sp, #104]	; 0x68
   12f10:	adc.w	r4, ip, r6
   12f14:	ldrd	r5, r6, [sp, #40]	; 0x28
   12f18:	str	r4, [sp, #108]	; 0x6c
   12f1a:	cmp	fp, r6
   12f1c:	it	eq
   12f1e:	cmpeq	sl, r5
   12f20:	itt	cs
   12f22:	movcs.w	lr, #0
   12f26:	movcs	ip, lr
   12f28:	bcs.n	12f32 <Process_isThread@@Base+0x23a>
   12f2a:	subs.w	lr, r5, sl
   12f2e:	sbc.w	ip, r6, fp
   12f32:	ldrd	sl, fp, [r3, #48]	; 0x30
   12f36:	strd	lr, ip, [r3, #104]	; 0x68
   12f3a:	cmp	fp, r9
   12f3c:	it	eq
   12f3e:	cmpeq	sl, r8
   12f40:	itt	cs
   12f42:	movcs.w	lr, #0
   12f46:	movcs	ip, lr
   12f48:	bcs.n	12f52 <Process_isThread@@Base+0x25a>
   12f4a:	subs.w	lr, r8, sl
   12f4e:	sbc.w	ip, r9, fp
   12f52:	ldrd	sl, fp, [r3, #16]
   12f56:	ldrd	r5, r6, [sp, #56]	; 0x38
   12f5a:	strd	lr, ip, [r3, #144]	; 0x90
   12f5e:	cmp	fp, r6
   12f60:	it	eq
   12f62:	cmpeq	sl, r5
   12f64:	itt	cs
   12f66:	movcs.w	lr, #0
   12f6a:	movcs	ip, lr
   12f6c:	bcs.n	12f76 <Process_isThread@@Base+0x27e>
   12f6e:	subs.w	lr, r5, sl
   12f72:	sbc.w	ip, r6, fp
   12f76:	ldrd	sl, fp, [r3, #24]
   12f7a:	ldrd	r5, r6, [sp, #64]	; 0x40
   12f7e:	strd	lr, ip, [r3, #112]	; 0x70
   12f82:	cmp	fp, r6
   12f84:	it	eq
   12f86:	cmpeq	sl, r5
   12f88:	itt	cs
   12f8a:	movcs.w	lr, #0
   12f8e:	movcs	ip, lr
   12f90:	bcs.n	12f9a <Process_isThread@@Base+0x2a2>
   12f92:	subs.w	lr, r5, sl
   12f96:	sbc.w	ip, r6, fp
   12f9a:	ldrd	sl, fp, [r3, #32]
   12f9e:	ldrd	r5, r6, [sp, #48]	; 0x30
   12fa2:	strd	lr, ip, [r3, #120]	; 0x78
   12fa6:	cmp	fp, r6
   12fa8:	it	eq
   12faa:	cmpeq	sl, r5
   12fac:	itt	cs
   12fae:	movcs.w	lr, #0
   12fb2:	movcs	ip, lr
   12fb4:	bcs.n	12fbe <Process_isThread@@Base+0x2c6>
   12fb6:	subs.w	lr, r5, sl
   12fba:	sbc.w	ip, r6, fp
   12fbe:	ldrd	sl, fp, [r3, #40]	; 0x28
   12fc2:	ldrd	r5, r6, [sp, #112]	; 0x70
   12fc6:	strd	lr, ip, [r3, #128]	; 0x80
   12fca:	cmp	fp, r6
   12fcc:	it	eq
   12fce:	cmpeq	sl, r5
   12fd0:	itt	cs
   12fd2:	movcs.w	lr, #0
   12fd6:	movcs	ip, lr
   12fd8:	bcs.n	12fe2 <Process_isThread@@Base+0x2ea>
   12fda:	subs.w	lr, r5, sl
   12fde:	sbc.w	ip, r6, fp
   12fe2:	ldrd	sl, fp, [r3, #56]	; 0x38
   12fe6:	ldrd	r5, r6, [sp, #88]	; 0x58
   12fea:	strd	lr, ip, [r3, #136]	; 0x88
   12fee:	cmp	fp, r6
   12ff0:	it	eq
   12ff2:	cmpeq	sl, r5
   12ff4:	itt	cs
   12ff6:	movcs.w	lr, #0
   12ffa:	movcs	ip, lr
   12ffc:	bcs.n	13006 <Process_isThread@@Base+0x30e>
   12ffe:	subs.w	lr, r5, sl
   13002:	sbc.w	ip, r6, fp
   13006:	ldrd	sl, fp, [r3, #64]	; 0x40
   1300a:	ldrd	r5, r6, [sp, #120]	; 0x78
   1300e:	strd	lr, ip, [r3, #152]	; 0x98
   13012:	cmp	fp, r6
   13014:	it	eq
   13016:	cmpeq	sl, r5
   13018:	itt	cs
   1301a:	movcs.w	lr, #0
   1301e:	movcs	ip, lr
   13020:	bcs.n	1302a <Process_isThread@@Base+0x332>
   13022:	subs.w	lr, r5, sl
   13026:	sbc.w	ip, r6, fp
   1302a:	ldrd	sl, fp, [r3, #72]	; 0x48
   1302e:	ldrd	r5, r6, [sp, #96]	; 0x60
   13032:	strd	lr, ip, [r3, #160]	; 0xa0
   13036:	cmp	fp, r6
   13038:	it	eq
   1303a:	cmpeq	sl, r5
   1303c:	itt	cs
   1303e:	movcs.w	lr, #0
   13042:	movcs	ip, lr
   13044:	bcs.n	1304e <Process_isThread@@Base+0x356>
   13046:	subs.w	lr, r5, sl
   1304a:	sbc.w	ip, r6, fp
   1304e:	ldrd	sl, fp, [r3, #80]	; 0x50
   13052:	strd	lr, ip, [r3, #168]	; 0xa8
   13056:	cmp	fp, r1
   13058:	it	eq
   1305a:	cmpeq	sl, r0
   1305c:	itt	cs
   1305e:	movcs.w	lr, #0
   13062:	movcs	ip, lr
   13064:	bcs.n	1306e <Process_isThread@@Base+0x376>
   13066:	subs.w	lr, r0, sl
   1306a:	sbc.w	ip, r1, fp
   1306e:	ldrd	sl, fp, [r3, #88]	; 0x58
   13072:	ldrd	r5, r6, [sp, #72]	; 0x48
   13076:	strd	lr, ip, [r3, #176]	; 0xb0
   1307a:	cmp	fp, r6
   1307c:	it	eq
   1307e:	cmpeq	sl, r5
   13080:	itt	cs
   13082:	movcs.w	lr, #0
   13086:	movcs	ip, lr
   13088:	bcs.n	13092 <Process_isThread@@Base+0x39a>
   1308a:	subs.w	lr, r5, sl
   1308e:	sbc.w	ip, r6, fp
   13092:	ldrd	sl, fp, [r3]
   13096:	ldrd	r5, r6, [sp, #104]	; 0x68
   1309a:	strd	lr, ip, [r3, #184]	; 0xb8
   1309e:	cmp	fp, r6
   130a0:	it	eq
   130a2:	cmpeq	sl, r5
   130a4:	itt	cs
   130a6:	movcs.w	lr, #0
   130aa:	movcs	ip, lr
   130ac:	bcs.n	130b6 <Process_isThread@@Base+0x3be>
   130ae:	subs.w	lr, r5, sl
   130b2:	sbc.w	ip, r6, fp
   130b6:	ldrd	r5, r6, [sp, #40]	; 0x28
   130ba:	strd	r0, r1, [r3, #80]	; 0x50
   130be:	ldrd	r0, r1, [sp, #72]	; 0x48
   130c2:	strd	r5, r6, [r3, #8]
   130c6:	ldrd	r5, r6, [sp, #56]	; 0x38
   130ca:	strd	r0, r1, [r3, #88]	; 0x58
   130ce:	ldrd	r0, r1, [sp, #104]	; 0x68
   130d2:	strd	r5, r6, [r3, #16]
   130d6:	ldrd	r5, r6, [sp, #64]	; 0x40
   130da:	ldr	r4, [sp, #84]	; 0x54
   130dc:	strd	lr, ip, [r3, #96]	; 0x60
   130e0:	strd	r5, r6, [r3, #24]
   130e4:	adds	r4, #1
   130e6:	ldrd	r5, r6, [sp, #48]	; 0x30
   130ea:	strd	r8, r9, [r3, #48]	; 0x30
   130ee:	strd	r0, r1, [r3]
   130f2:	strd	r5, r6, [r3, #32]
   130f6:	ldrd	r5, r6, [sp, #112]	; 0x70
   130fa:	str	r4, [sp, #84]	; 0x54
   130fc:	strd	r5, r6, [r3, #40]	; 0x28
   13100:	ldrd	r5, r6, [sp, #88]	; 0x58
   13104:	strd	r5, r6, [r3, #56]	; 0x38
   13108:	ldrd	r5, r6, [sp, #120]	; 0x78
   1310c:	strd	r5, r6, [r3, #64]	; 0x40
   13110:	ldrd	r5, r6, [sp, #96]	; 0x60
   13114:	strd	r5, r6, [r3, #72]	; 0x48
   13118:	ldr	r3, [sp, #132]	; 0x84
   1311a:	cmp	r4, r3
   1311c:	beq.n	13190 <Process_isThread@@Base+0x498>
   1311e:	vmov	r2, s17
   13122:	mov.w	r1, #512	; 0x200
   13126:	vmov	r0, s16
   1312a:	movs	r3, #0
   1312c:	movs	r4, #0
   1312e:	strd	r3, r4, [sp, #256]	; 0x100
   13132:	strd	r3, r4, [sp, #248]	; 0xf8
   13136:	strd	r3, r4, [sp, #240]	; 0xf0
   1313a:	strd	r3, r4, [sp, #232]	; 0xe8
   1313e:	strd	r3, r4, [sp, #224]	; 0xe0
   13142:	strd	r3, r4, [sp, #216]	; 0xd8
   13146:	blx	6764 <fgets@plt>
   1314a:	cbz	r0, 13188 <Process_isThread@@Base+0x490>
   1314c:	ldr	r3, [sp, #84]	; 0x54
   1314e:	cmp	r3, #0
   13150:	bne.w	12e08 <Process_isThread@@Base+0x110>
   13154:	ldr	r4, [sp, #168]	; 0xa8
   13156:	ldr	r3, [sp, #148]	; 0x94
   13158:	ldr	r2, [sp, #144]	; 0x90
   1315a:	str	r4, [sp, #12]
   1315c:	ldr	r4, [sp, #164]	; 0xa4
   1315e:	ldr	r1, [sp, #140]	; 0x8c
   13160:	ldr	r0, [sp, #136]	; 0x88
   13162:	str	r4, [sp, #8]
   13164:	ldr	r4, [sp, #160]	; 0xa0
   13166:	str	r3, [sp, #28]
   13168:	str	r2, [sp, #24]
   1316a:	str	r4, [sp, #4]
   1316c:	ldr	r4, [sp, #156]	; 0x9c
   1316e:	str	r1, [sp, #20]
   13170:	str	r0, [sp, #16]
   13172:	vmov	r2, s18
   13176:	vmov	r1, s20
   1317a:	vmov	r0, s16
   1317e:	ldr	r3, [sp, #152]	; 0x98
   13180:	str	r4, [sp, #0]
   13182:	blx	6a6c <__isoc99_sscanf@plt>
   13186:	b.n	12e3e <Process_isThread@@Base+0x146>
   13188:	vmov	r3, s16
   1318c:	strb	r0, [r3, #0]
   1318e:	b.n	1314c <Process_isThread@@Base+0x454>
   13190:	mov	r3, r2
   13192:	ldrd	r0, r1, [r3, #96]	; 0x60
   13196:	bl	15b34 <Battery_getData@@Base+0xa84>
   1319a:	vldr	s15, [sp, #172]	; 0xac
   1319e:	vcvt.f64.s32	d7, s15
   131a2:	vmov	d6, r0, r1
   131a6:	vdiv.f64	d0, d6, d7
   131aa:	vmov	r0, s17
   131ae:	vstr	d0, [sp, #40]	; 0x28
   131b2:	blx	6b30 <fclose@plt>
   131b6:	ldr	r2, [pc, #72]	; (13200 <Process_isThread@@Base+0x508>)
   131b8:	ldr	r3, [pc, #56]	; (131f4 <Process_isThread@@Base+0x4fc>)
   131ba:	add	r2, pc
   131bc:	vldr	d0, [sp, #40]	; 0x28
   131c0:	ldr	r3, [r2, r3]
   131c2:	ldr	r2, [r3, #0]
   131c4:	ldr	r3, [sp, #780]	; 0x30c
   131c6:	eors	r2, r3
   131c8:	bne.n	131dc <Process_isThread@@Base+0x4e4>
   131ca:	add.w	sp, sp, #788	; 0x314
   131ce:	vpop	{d8-d10}
   131d2:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131d6:	ldr	r3, [sp, #128]	; 0x80
   131d8:	ldr	r3, [r3, #0]
   131da:	b.n	13192 <Process_isThread@@Base+0x49a>
   131dc:	blx	67d0 <__stack_chk_fail@plt>
   131e0:	ldr	r0, [pc, #32]	; (13204 <Process_isThread@@Base+0x50c>)
   131e2:	add	r0, pc
   131e4:	bl	85b4 <CRT_fatalError@@Base>
   131e8:	ldr	r2, [r2, #120]	; 0x78
   131ea:	movs	r1, r0
   131ec:	ldrsh	r4, [r1, r4]
   131ee:	movs	r0, r0
   131f0:	ldr	r6, [pc, #408]	; (1338c <Process_isThread@@Base+0x694>)
   131f2:	movs	r0, r0
   131f4:	lsls	r0, r0, #9
   131f6:	movs	r0, r0
   131f8:	ldrsh	r6, [r3, r3]
   131fa:	movs	r0, r0
   131fc:	ldrsh	r4, [r4, r4]
   131fe:	movs	r0, r0
   13200:	ldr	r2, [r2, #52]	; 0x34
   13202:	movs	r1, r0
   13204:	ldrh	r2, [r4, r2]
   13206:	movs	r0, r0
   13208:	push	{r3, r4, r5, r6, r7, lr}
   1320a:	mov	r6, r0
   1320c:	ldr	r0, [r0, #0]
   1320e:	mov	r5, r1
   13210:	mov	r7, r2
   13212:	mov	r4, r3
   13214:	cbz	r0, 1321c <Process_isThread@@Base+0x524>
   13216:	ldr	r3, [r1, #0]
   13218:	cmp	r3, r4
   1321a:	bge.n	1322c <Process_isThread@@Base+0x534>
   1321c:	blx	6758 <free@plt+0x4>
   13220:	mov	r0, r7
   13222:	bl	11de4 <xStrdup@@Base>
   13226:	str	r0, [r6, #0]
   13228:	str	r4, [r5, #0]
   1322a:	pop	{r3, r4, r5, r6, r7, pc}
   1322c:	mov	r1, r2
   1322e:	adds	r2, r4, #1
   13230:	blx	6a9c <strncpy@plt>
   13234:	str	r4, [r5, #0]
   13236:	pop	{r3, r4, r5, r6, r7, pc}
   13238:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1323c:	sub.w	sp, sp, #4256	; 0x10a0
   13240:	ldr	r7, [pc, #236]	; (13330 <Process_isThread@@Base+0x638>)
   13242:	sub	sp, #4
   13244:	ldr	r3, [pc, #236]	; (13334 <Process_isThread@@Base+0x63c>)
   13246:	add.w	r5, sp, #4224	; 0x1080
   1324a:	ldr	r6, [pc, #236]	; (13338 <Process_isThread@@Base+0x640>)
   1324c:	add	r7, pc
   1324e:	add	r3, pc
   13250:	str	r3, [sp, #0]
   13252:	strd	r1, r2, [sp, #4]
   13256:	add	r4, sp, #20
   13258:	ldr	r6, [r7, r6]
   1325a:	mov	r8, r0
   1325c:	movs	r3, #129	; 0x81
   1325e:	mov	r0, r4
   13260:	movs	r2, #1
   13262:	movs	r1, #128	; 0x80
   13264:	ldr	r6, [r6, #0]
   13266:	str	r6, [r5, #28]
   13268:	mov.w	r6, #0
   1326c:	adds	r5, #28
   1326e:	blx	6c78 <__snprintf_chk@plt>
   13272:	cmp	r0, #127	; 0x7f
   13274:	bhi.n	13318 <Process_isThread@@Base+0x620>
   13276:	mov	r0, r4
   13278:	movs	r1, #0
   1327a:	blx	69a8 <open@plt>
   1327e:	adds	r3, r0, #1
   13280:	mov	r5, r0
   13282:	beq.n	13314 <Process_isThread@@Base+0x61c>
   13284:	add	r4, sp, #160	; 0xa0
   13286:	mov.w	r2, #4096	; 0x1000
   1328a:	sub.w	r9, r4, #8
   1328e:	mov	r1, r9
   13290:	bl	12d1c <Process_isThread@@Base+0x24>
   13294:	mov	r6, r0
   13296:	mov	r0, r5
   13298:	blx	6c60 <close@plt>
   1329c:	cmp	r6, #0
   1329e:	itt	eq
   132a0:	moveq	r0, #1
   132a2:	strbeq.w	r0, [r8, #136]	; 0x88
   132a6:	beq.n	132f4 <Process_isThread@@Base+0x5fc>
   132a8:	blt.n	13314 <Process_isThread@@Base+0x61c>
   132aa:	movs	r2, #0
   132ac:	subs	r4, #9
   132ae:	mov	r3, r2
   132b0:	mov	r7, r2
   132b2:	movs	r1, #32
   132b4:	ldrb.w	r5, [r4, #1]!
   132b8:	cmp	r5, #10
   132ba:	it	ne
   132bc:	cmpne	r5, #0
   132be:	it	ne
   132c0:	movne	r3, r2
   132c2:	bne.n	132cc <Process_isThread@@Base+0x5d4>
   132c4:	cmp	r7, #0
   132c6:	it	eq
   132c8:	moveq	r7, r2
   132ca:	strb	r1, [r4, #0]
   132cc:	adds	r2, #1
   132ce:	cmp	r6, r2
   132d0:	bne.n	132b4 <Process_isThread@@Base+0x5bc>
   132d2:	add.w	r4, r9, r3
   132d6:	add.w	r0, r8, #28
   132da:	cmp	r7, #0
   132dc:	it	eq
   132de:	moveq	r7, r6
   132e0:	add.w	r1, r8, #32
   132e4:	mov	r2, r9
   132e6:	str.w	r7, [r8, #40]	; 0x28
   132ea:	movs	r5, #0
   132ec:	strb	r5, [r4, #1]
   132ee:	bl	13208 <Process_isThread@@Base+0x510>
   132f2:	movs	r0, #1
   132f4:	ldr	r1, [pc, #68]	; (1333c <Process_isThread@@Base+0x644>)
   132f6:	add.w	r3, sp, #4224	; 0x1080
   132fa:	ldr	r2, [pc, #60]	; (13338 <Process_isThread@@Base+0x640>)
   132fc:	adds	r3, #28
   132fe:	add	r1, pc
   13300:	ldr	r2, [r1, r2]
   13302:	ldr	r1, [r2, #0]
   13304:	ldr	r2, [r3, #0]
   13306:	eors	r1, r2
   13308:	bne.n	1332a <Process_isThread@@Base+0x632>
   1330a:	add.w	sp, sp, #4256	; 0x10a0
   1330e:	add	sp, #4
   13310:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   13314:	movs	r0, #0
   13316:	b.n	132f4 <Process_isThread@@Base+0x5fc>
   13318:	movs	r0, #1
   1331a:	blx	6730 <curs_set@plt>
   1331e:	blx	6c48 <endwin@plt+0x4>
   13322:	movs	r1, #0
   13324:	movs	r0, #1
   13326:	blx	683c <err@plt>
   1332a:	blx	67d0 <__stack_chk_fail@plt>
   1332e:	nop
   13330:	ldr	r0, [r0, #44]	; 0x2c
   13332:	movs	r1, r0
   13334:	ldrh	r2, [r5, r3]
   13336:	movs	r0, r0
   13338:	lsls	r0, r0, #9
   1333a:	movs	r0, r0
   1333c:	ldr	r6, [r1, #32]
   1333e:	movs	r1, r0
   13340:	sub	sp, #8
   13342:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13346:	movw	r5, #19923	; 0x4dd3
   1334a:	vpush	{d8-d14}
   1334e:	movt	r5, #4194	; 0x1062
   13352:	mov	r6, r1
   13354:	ldr.w	r7, [pc, #1912]	; 13ad0 <Process_isThread@@Base+0xdd8>
   13358:	add	r7, pc
   1335a:	vmov.f64	d8, d0
   1335e:	subw	sp, sp, #2868	; 0xb34
   13362:	ldr.w	r4, [sp, #2968]	; 0xb98
   13366:	str	r1, [sp, #36]	; 0x24
   13368:	smull	r1, r5, r5, r4
   1336c:	ldr.w	r1, [pc, #1892]	; 13ad4 <Process_isThread@@Base+0xddc>
   13370:	asrs	r4, r4, #31
   13372:	ldr	r1, [r7, r1]
   13374:	mov	r7, r0
   13376:	rsb	r4, r4, r5, asr #6
   1337a:	ldr	r1, [r1, #0]
   1337c:	str.w	r1, [sp, #2860]	; 0xb2c
   13380:	mov.w	r1, #0
   13384:	mov.w	r1, #1000	; 0x3e8
   13388:	str	r0, [sp, #32]
   1338a:	asrs	r5, r4, #31
   1338c:	mov	r0, r6
   1338e:	ldr	r6, [r7, #0]
   13390:	smlal	r4, r5, r1, r3
   13394:	str	r2, [sp, #40]	; 0x28
   13396:	ldr.w	r2, [pc, #1856]	; 13ad8 <Process_isThread@@Base+0xde0>
   1339a:	str	r3, [sp, #48]	; 0x30
   1339c:	add	r2, pc
   1339e:	str.w	r3, [sp, #2964]	; 0xb94
   133a2:	str	r6, [sp, #28]
   133a4:	str	r2, [sp, #52]	; 0x34
   133a6:	strd	r4, r5, [sp, #80]	; 0x50
   133aa:	blx	68f4 <opendir@plt>
   133ae:	mov	fp, r0
   133b0:	cmp	r0, #0
   133b2:	beq.w	13a7a <Process_isThread@@Base+0xd82>
   133b6:	vmov.f64	d9, #112	; 0x3f800000  1.0
   133ba:	movw	r3, #30806	; 0x7856
   133be:	movt	r3, #17481	; 0x4449
   133c2:	str	r3, [sp, #96]	; 0x60
   133c4:	ldrb.w	r3, [r6, #63]	; 0x3f
   133c8:	vldr	s22, [r7, #128]	; 0x80
   133cc:	str	r3, [sp, #60]	; 0x3c
   133ce:	ldrb.w	r3, [r6, #64]	; 0x40
   133d2:	str	r3, [sp, #92]	; 0x5c
   133d4:	vmov.f64	d10, #240	; 0xbf800000 -1.0
   133d8:	ldr.w	r3, [pc, #1792]	; 13adc <Process_isThread@@Base+0xde4>
   133dc:	add	r3, pc
   133de:	str	r3, [sp, #56]	; 0x38
   133e0:	mov	r0, fp
   133e2:	blx	6b60 <readdir@plt>
   133e6:	cmp	r0, #0
   133e8:	beq.w	13a72 <Process_isThread@@Base+0xd7a>
   133ec:	ldr	r3, [sp, #28]
   133ee:	ldrb.w	r2, [r3, #60]	; 0x3c
   133f2:	add.w	r3, r0, #11
   133f6:	str	r3, [sp, #20]
   133f8:	ldrb	r3, [r0, #11]
   133fa:	cbnz	r2, 13408 <Process_isThread@@Base+0x710>
   133fc:	cmp	r3, #46	; 0x2e
   133fe:	ittt	eq
   13400:	addeq.w	r2, r0, #12
   13404:	streq	r2, [sp, #20]
   13406:	ldrbeq	r3, [r0, #12]
   13408:	subs	r3, #48	; 0x30
   1340a:	cmp	r3, #9
   1340c:	bhi.n	133e0 <Process_isThread@@Base+0x6e8>
   1340e:	ldr	r0, [sp, #20]
   13410:	movs	r2, #10
   13412:	movs	r1, #0
   13414:	blx	66cc <strtol@plt>
   13418:	ldr	r3, [sp, #40]	; 0x28
   1341a:	mov	r4, r0
   1341c:	cmp	r3, #0
   1341e:	beq.w	13a9e <Process_isThread@@Base+0xda6>
   13422:	ldr	r3, [r3, #16]
   13424:	cmp	r3, r0
   13426:	it	ne
   13428:	cmpne	r0, #0
   1342a:	ite	le
   1342c:	movle	r3, #1
   1342e:	movgt	r3, #0
   13430:	ble.n	133e0 <Process_isThread@@Base+0x6e8>
   13432:	strb.w	r3, [sp, #127]	; 0x7f
   13436:	add.w	r2, sp, #127	; 0x7f
   1343a:	ldr	r3, [sp, #52]	; 0x34
   1343c:	mov	r1, r0
   1343e:	ldr.w	r5, [pc, #1696]	; 13ae0 <Process_isThread@@Base+0xde8>
   13442:	str	r2, [sp, #44]	; 0x2c
   13444:	ldr	r0, [sp, #32]
   13446:	ldr	r3, [r3, r5]
   13448:	bl	d018 <ProcessList_getProcess@@Base>
   1344c:	ldr	r3, [sp, #40]	; 0x28
   1344e:	ldr	r4, [r3, #16]
   13450:	mov	r9, r0
   13452:	ldr	r2, [sp, #20]
   13454:	add	r5, sp, #264	; 0x108
   13456:	str.w	r4, [r9, #24]
   1345a:	movs	r3, #129	; 0x81
   1345c:	mov	r0, r5
   1345e:	movs	r1, #128	; 0x80
   13460:	str	r2, [sp, #8]
   13462:	ldr	r2, [sp, #36]	; 0x24
   13464:	str	r2, [sp, #4]
   13466:	ldr	r2, [sp, #56]	; 0x38
   13468:	str	r2, [sp, #0]
   1346a:	movs	r2, #1
   1346c:	blx	6c78 <__snprintf_chk@plt>
   13470:	cmp	r0, #127	; 0x7f
   13472:	bhi.w	14430 <Process_isThread@@Base+0x1738>
   13476:	ldr.w	r4, [sp, #2968]	; 0xb98
   1347a:	mov	r2, r9
   1347c:	ldr	r3, [sp, #48]	; 0x30
   1347e:	vmov.f64	d0, d8
   13482:	ldr	r0, [sp, #32]
   13484:	mov	r1, r5
   13486:	str	r4, [sp, #0]
   13488:	str.w	r3, [sp, #2964]	; 0xb94
   1348c:	bl	13340 <Process_isThread@@Base+0x648>
   13490:	ldr	r3, [sp, #28]
   13492:	ldr	r3, [r3, #32]
   13494:	lsls	r2, r3, #31
   13496:	bmi.w	13b04 <Process_isThread@@Base+0xe0c>
   1349a:	ldr	r3, [sp, #20]
   1349c:	add	r4, sp, #660	; 0x294
   1349e:	ldr	r1, [sp, #36]	; 0x24
   134a0:	ldr.w	r2, [pc, #1600]	; 13ae4 <Process_isThread@@Base+0xdec>
   134a4:	mov	r0, r4
   134a6:	str	r3, [sp, #8]
   134a8:	movs	r3, #129	; 0x81
   134aa:	add	r2, pc
   134ac:	str	r1, [sp, #4]
   134ae:	str	r2, [sp, #0]
   134b0:	movs	r1, #128	; 0x80
   134b2:	movs	r2, #1
   134b4:	blx	6c78 <__snprintf_chk@plt>
   134b8:	cmp	r0, #127	; 0x7f
   134ba:	bhi.w	14430 <Process_isThread@@Base+0x1738>
   134be:	mov	r0, r4
   134c0:	movs	r1, #0
   134c2:	blx	69a8 <open@plt>
   134c6:	adds	r7, r0, #1
   134c8:	mov	r4, r0
   134ca:	beq.w	13a58 <Process_isThread@@Base+0xd60>
   134ce:	addw	r3, sp, #1836	; 0x72c
   134d2:	mov.w	r2, #512	; 0x200
   134d6:	mov	r1, r3
   134d8:	vmov	s28, r3
   134dc:	mov	r5, r3
   134de:	bl	12d1c <Process_isThread@@Base+0x24>
   134e2:	mov	r3, r0
   134e4:	mov	r0, r4
   134e6:	mov	r4, r3
   134e8:	blx	6c60 <close@plt>
   134ec:	cmp	r4, #0
   134ee:	ble.w	13a58 <Process_isThread@@Base+0xd60>
   134f2:	str	r5, [sp, #176]	; 0xb0
   134f4:	blx	6a48 <__errno_location@plt>
   134f8:	add.w	sl, sp, #176	; 0xb0
   134fc:	movs	r3, #0
   134fe:	movs	r2, #10
   13500:	mov	r1, sl
   13502:	str	r3, [r0, #0]
   13504:	mov	r4, r0
   13506:	mov	r0, r5
   13508:	blx	66cc <strtol@plt>
   1350c:	ldr.w	r3, [sl]
   13510:	mov	r1, sl
   13512:	str.w	r0, [r9, #116]	; 0x74
   13516:	ldrb	r2, [r3, #0]
   13518:	cmp	r2, #32
   1351a:	mov.w	r2, #10
   1351e:	itt	eq
   13520:	addeq	r3, #1
   13522:	streq.w	r3, [sl]
   13526:	mov	r0, r3
   13528:	blx	66cc <strtol@plt>
   1352c:	ldr.w	r3, [sl]
   13530:	mov	r1, sl
   13532:	str.w	r0, [r9, #120]	; 0x78
   13536:	ldrb	r2, [r3, #0]
   13538:	cmp	r2, #32
   1353a:	mov.w	r2, #10
   1353e:	itt	eq
   13540:	addeq	r3, #1
   13542:	streq.w	r3, [sl]
   13546:	mov	r0, r3
   13548:	blx	66cc <strtol@plt>
   1354c:	ldr.w	r3, [sl]
   13550:	mov	r1, sl
   13552:	str.w	r0, [r9, #184]	; 0xb8
   13556:	ldrb	r2, [r3, #0]
   13558:	cmp	r2, #32
   1355a:	mov.w	r2, #10
   1355e:	itt	eq
   13560:	addeq	r3, #1
   13562:	streq.w	r3, [sl]
   13566:	mov	r0, r3
   13568:	blx	66cc <strtol@plt>
   1356c:	ldr.w	r3, [sl]
   13570:	mov	r1, sl
   13572:	str.w	r0, [r9, #188]	; 0xbc
   13576:	ldrb	r2, [r3, #0]
   13578:	cmp	r2, #32
   1357a:	mov.w	r2, #10
   1357e:	itt	eq
   13580:	addeq	r3, #1
   13582:	streq.w	r3, [sl]
   13586:	mov	r0, r3
   13588:	blx	66cc <strtol@plt>
   1358c:	ldr.w	r3, [sl]
   13590:	mov	r1, sl
   13592:	str.w	r0, [r9, #196]	; 0xc4
   13596:	ldrb	r2, [r3, #0]
   13598:	cmp	r2, #32
   1359a:	mov.w	r2, #10
   1359e:	itt	eq
   135a0:	addeq	r3, #1
   135a2:	streq.w	r3, [sl]
   135a6:	mov	r0, r3
   135a8:	blx	66cc <strtol@plt>
   135ac:	ldr.w	r3, [sl]
   135b0:	mov	r1, sl
   135b2:	str.w	r0, [r9, #192]	; 0xc0
   135b6:	ldrb	r2, [r3, #0]
   135b8:	cmp	r2, #32
   135ba:	mov.w	r2, #10
   135be:	itt	eq
   135c0:	addeq	r3, #1
   135c2:	streq.w	r3, [sl]
   135c6:	mov	r0, r3
   135c8:	blx	66cc <strtol@plt>
   135cc:	ldr	r3, [r4, #0]
   135ce:	str.w	r0, [r9, #200]	; 0xc8
   135d2:	cmp	r3, #0
   135d4:	bne.w	13a58 <Process_isThread@@Base+0xd60>
   135d8:	ldr	r2, [sp, #60]	; 0x3c
   135da:	cmp	r2, #0
   135dc:	beq.w	139a4 <Process_isThread@@Base+0xcac>
   135e0:	ldrb.w	r2, [r9, #136]	; 0x88
   135e4:	cmp	r2, #0
   135e6:	beq.w	139a4 <Process_isThread@@Base+0xcac>
   135ea:	ldr.w	r2, [r9, #152]	; 0x98
   135ee:	add	r4, sp, #792	; 0x318
   135f0:	ldr.w	r5, [pc, #1268]	; 13ae8 <Process_isThread@@Base+0xdf0>
   135f4:	ldr.w	r1, [r9, #160]	; 0xa0
   135f8:	mov	r0, r4
   135fa:	ldr.w	r6, [r9, #164]	; 0xa4
   135fe:	add	r5, pc
   13600:	strb.w	r3, [r9, #48]	; 0x30
   13604:	movs	r3, #129	; 0x81
   13606:	ldr.w	r7, [r9, #60]	; 0x3c
   1360a:	str	r2, [sp, #64]	; 0x40
   1360c:	ldr.w	r2, [r9, #156]	; 0x9c
   13610:	str	r5, [sp, #0]
   13612:	ldr	r5, [sp, #20]
   13614:	str	r2, [sp, #68]	; 0x44
   13616:	movs	r2, #1
   13618:	str	r1, [sp, #72]	; 0x48
   1361a:	movs	r1, #128	; 0x80
   1361c:	str	r5, [sp, #8]
   1361e:	ldr	r5, [sp, #36]	; 0x24
   13620:	str	r6, [sp, #76]	; 0x4c
   13622:	str	r5, [sp, #4]
   13624:	blx	6c78 <__snprintf_chk@plt>
   13628:	cmp	r0, #127	; 0x7f
   1362a:	bhi.w	14430 <Process_isThread@@Base+0x1738>
   1362e:	mov	r0, r4
   13630:	movs	r1, #0
   13632:	blx	69a8 <open@plt>
   13636:	adds	r6, r0, #1
   13638:	mov	r5, r0
   1363a:	beq.w	13a58 <Process_isThread@@Base+0xd60>
   1363e:	ldr.w	r4, [pc, #1196]	; 13aec <Process_isThread@@Base+0xdf4>
   13642:	mov.w	r2, #2048	; 0x800
   13646:	add	r4, pc
   13648:	mov	r1, r4
   1364a:	bl	12d1c <Process_isThread@@Base+0x24>
   1364e:	mov	r3, r0
   13650:	mov	r0, r5
   13652:	mov	r5, r3
   13654:	blx	6c60 <close@plt>
   13658:	cmp	r5, #0
   1365a:	ble.w	13a58 <Process_isThread@@Base+0xd60>
   1365e:	movs	r1, #32
   13660:	mov	r0, r4
   13662:	movs	r6, #0
   13664:	strb	r6, [r4, r5]
   13666:	blx	6a24 <strchr@plt>
   1366a:	cmp	r0, #0
   1366c:	beq.w	13a58 <Process_isThread@@Base+0xd60>
   13670:	add.w	r8, r0, #2
   13674:	movs	r1, #41	; 0x29
   13676:	str.w	r8, [sl]
   1367a:	mov	r0, r8
   1367c:	blx	6b6c <strrchr@plt>
   13680:	mov	r5, r0
   13682:	cmp	r0, #0
   13684:	beq.w	13a58 <Process_isThread@@Base+0xd60>
   13688:	sub.w	r2, r0, r8
   1368c:	add	r0, sp, #396	; 0x18c
   1368e:	mov	r1, r8
   13690:	movs	r3, #129	; 0x81
   13692:	mov	r8, r0
   13694:	str	r2, [sp, #100]	; 0x64
   13696:	str	r0, [sp, #104]	; 0x68
   13698:	blx	6878 <__memcpy_chk@plt>
   1369c:	ldrb	r3, [r5, #2]
   1369e:	adds	r0, r5, #4
   136a0:	ldr	r2, [sp, #100]	; 0x64
   136a2:	mov	r1, sl
   136a4:	addw	r4, r4, #2056	; 0x808
   136a8:	strb.w	r6, [r8, r2]
   136ac:	movs	r2, #10
   136ae:	strb.w	r3, [r9, #45]	; 0x2d
   136b2:	str.w	r0, [sl]
   136b6:	blx	66cc <strtol@plt>
   136ba:	ldr.w	r3, [sl]
   136be:	movs	r2, #10
   136c0:	mov	r1, sl
   136c2:	str.w	r0, [r9, #20]
   136c6:	adds	r0, r3, #1
   136c8:	str.w	r0, [sl]
   136cc:	blx	6a00 <strtoul@plt>
   136d0:	ldr.w	r3, [sl]
   136d4:	movs	r2, #10
   136d6:	mov	r1, sl
   136d8:	str.w	r0, [r9, #52]	; 0x34
   136dc:	adds	r0, r3, #1
   136de:	str.w	r0, [sl]
   136e2:	blx	6a00 <strtoul@plt>
   136e6:	ldr.w	r3, [sl]
   136ea:	movs	r2, #10
   136ec:	mov	r1, sl
   136ee:	str.w	r0, [r9, #56]	; 0x38
   136f2:	adds	r0, r3, #1
   136f4:	str.w	r0, [sl]
   136f8:	blx	6a00 <strtoul@plt>
   136fc:	ldr.w	r3, [sl]
   13700:	movs	r2, #10
   13702:	mov	r1, sl
   13704:	str.w	r0, [r9, #60]	; 0x3c
   13708:	adds	r0, r3, #1
   1370a:	str.w	r0, [sl]
   1370e:	blx	66cc <strtol@plt>
   13712:	ldr.w	r3, [sl]
   13716:	movs	r2, #10
   13718:	mov	r1, sl
   1371a:	str.w	r0, [r9, #64]	; 0x40
   1371e:	adds	r0, r3, #1
   13720:	str.w	r0, [sl]
   13724:	blx	6a00 <strtoul@plt>
   13728:	ldr.w	r3, [sl]
   1372c:	movs	r2, #10
   1372e:	mov	r1, sl
   13730:	str.w	r0, [r9, #72]	; 0x48
   13734:	adds	r0, r3, #1
   13736:	str.w	r0, [sl]
   1373a:	blx	6ab4 <strtoull@plt>
   1373e:	ldr.w	r3, [sl]
   13742:	movs	r2, #10
   13744:	mov	r1, sl
   13746:	str.w	r0, [r9, #128]	; 0x80
   1374a:	adds	r0, r3, #1
   1374c:	str.w	r0, [sl]
   13750:	blx	6ab4 <strtoull@plt>
   13754:	ldr.w	r3, [sl]
   13758:	movs	r2, #10
   1375a:	mov	r1, sl
   1375c:	str.w	r0, [r9, #144]	; 0x90
   13760:	adds	r0, r3, #1
   13762:	str.w	r0, [sl]
   13766:	blx	6ab4 <strtoull@plt>
   1376a:	ldr.w	r3, [sl]
   1376e:	movs	r2, #10
   13770:	mov	r1, sl
   13772:	str.w	r0, [r9, #132]	; 0x84
   13776:	adds	r0, r3, #1
   13778:	str.w	r0, [sl]
   1377c:	blx	6ab4 <strtoull@plt>
   13780:	ldr.w	r3, [sl]
   13784:	movs	r2, #10
   13786:	mov	r1, sl
   13788:	str.w	r0, [r9, #148]	; 0x94
   1378c:	adds	r0, r3, #1
   1378e:	str.w	r0, [sl]
   13792:	blx	6ab4 <strtoull@plt>
   13796:	vldr	d7, [r4]
   1379a:	vcmp.f64	d7, #0.0
   1379e:	vmrs	APSR_nzcv, fpscr
   137a2:	mov	r6, r0
   137a4:	mov	r5, r1
   137a6:	beq.w	141c2 <Process_isThread@@Base+0x14ca>
   137aa:	vdiv.f64	d12, d9, d7
   137ae:	bl	15b34 <Battery_getData@@Base+0xa84>
   137b2:	vldr	d6, [pc, #788]	; 13ac8 <Process_isThread@@Base+0xdd0>
   137b6:	vmov	d7, r0, r1
   137ba:	vmul.f64	d7, d7, d12
   137be:	vmul.f64	d7, d7, d6
   137c2:	vmov	r0, r1, d7
   137c6:	bl	15cb0 <Battery_getData@@Base+0xc00>
   137ca:	ldr.w	r3, [sl]
   137ce:	movs	r2, #10
   137d0:	strd	r0, r1, [r9, #152]	; 0x98
   137d4:	adds	r0, r3, #1
   137d6:	mov	r1, sl
   137d8:	str.w	r0, [sl]
   137dc:	blx	6ab4 <strtoull@plt>
   137e0:	mov	r5, r0
   137e2:	mov	r0, r5
   137e4:	bl	15b34 <Battery_getData@@Base+0xa84>
   137e8:	vldr	d6, [pc, #732]	; 13ac8 <Process_isThread@@Base+0xdd0>
   137ec:	vmov	d7, r0, r1
   137f0:	vmul.f64	d7, d7, d12
   137f4:	vmul.f64	d7, d7, d6
   137f8:	vmov	r0, r1, d7
   137fc:	bl	15cb0 <Battery_getData@@Base+0xc00>
   13800:	ldr.w	r3, [sl]
   13804:	movs	r2, #10
   13806:	strd	r0, r1, [r9, #160]	; 0xa0
   1380a:	adds	r0, r3, #1
   1380c:	mov	r1, sl
   1380e:	str.w	r0, [sl]
   13812:	blx	6ab4 <strtoull@plt>
   13816:	mov	r5, r0
   13818:	mov	r0, r5
   1381a:	bl	15b34 <Battery_getData@@Base+0xa84>
   1381e:	vldr	d6, [pc, #680]	; 13ac8 <Process_isThread@@Base+0xdd0>
   13822:	vmov	d7, r0, r1
   13826:	vmul.f64	d7, d7, d12
   1382a:	vmul.f64	d7, d7, d6
   1382e:	vmov	r0, r1, d7
   13832:	bl	15cb0 <Battery_getData@@Base+0xc00>
   13836:	ldr.w	r3, [sl]
   1383a:	movs	r2, #10
   1383c:	strd	r0, r1, [r9, #168]	; 0xa8
   13840:	adds	r0, r3, #1
   13842:	mov	r1, sl
   13844:	str.w	r0, [sl]
   13848:	blx	6ab4 <strtoull@plt>
   1384c:	mov	r5, r0
   1384e:	mov	r0, r5
   13850:	movs	r4, #17
   13852:	bl	15b34 <Battery_getData@@Base+0xa84>
   13856:	vldr	d7, [pc, #624]	; 13ac8 <Process_isThread@@Base+0xdd0>
   1385a:	vmov	d6, r0, r1
   1385e:	vmul.f64	d12, d6, d12
   13862:	vmul.f64	d7, d12, d7
   13866:	vmov	r0, r1, d7
   1386a:	bl	15cb0 <Battery_getData@@Base+0xc00>
   1386e:	ldr.w	r3, [sl]
   13872:	movs	r2, #10
   13874:	strd	r0, r1, [r9, #176]	; 0xb0
   13878:	adds	r0, r3, #1
   1387a:	mov	r1, sl
   1387c:	str.w	r0, [sl]
   13880:	blx	66cc <strtol@plt>
   13884:	ldr.w	r3, [sl]
   13888:	movs	r2, #10
   1388a:	mov	r1, sl
   1388c:	str.w	r0, [r9, #92]	; 0x5c
   13890:	adds	r0, r3, #1
   13892:	str.w	r0, [sl]
   13896:	blx	66cc <strtol@plt>
   1389a:	ldr.w	r3, [sl]
   1389e:	movs	r2, #10
   138a0:	mov	r1, sl
   138a2:	str.w	r0, [r9, #96]	; 0x60
   138a6:	adds	r0, r3, #1
   138a8:	str.w	r0, [sl]
   138ac:	blx	66cc <strtol@plt>
   138b0:	ldr.w	r3, [sl]
   138b4:	str.w	r0, [r9, #100]	; 0x64
   138b8:	adds	r0, r3, #1
   138ba:	str.w	r0, [sl]
   138be:	movs	r1, #32
   138c0:	blx	6a24 <strchr@plt>
   138c4:	subs	r4, #1
   138c6:	add.w	r0, r0, #1
   138ca:	str.w	r0, [sl]
   138ce:	bne.n	138be <Process_isThread@@Base+0xbc6>
   138d0:	movs	r2, #10
   138d2:	mov	r1, sl
   138d4:	blx	66cc <strtol@plt>
   138d8:	ldr.w	r3, [sl]
   138dc:	movs	r2, #10
   138de:	mov	r1, sl
   138e0:	str.w	r0, [r9, #124]	; 0x7c
   138e4:	adds	r0, r3, #1
   138e6:	str.w	r0, [sl]
   138ea:	blx	66cc <strtol@plt>
   138ee:	ldrd	r2, r1, [r9, #156]	; 0x9c
   138f2:	ldr.w	r3, [r9, #152]	; 0x98
   138f6:	ldr.w	r4, [r9, #164]	; 0xa4
   138fa:	adds	r3, r3, r1
   138fc:	adc.w	r2, r4, r2
   13900:	strd	r3, r2, [r9, #8]
   13904:	str.w	r0, [r9, #76]	; 0x4c
   13908:	ldr.w	r0, [r9, #60]	; 0x3c
   1390c:	cmp	r0, r7
   1390e:	beq.w	13df0 <Process_isThread@@Base+0x10f8>
   13912:	ldr	r4, [sp, #32]
   13914:	ldr.w	r3, [r4, #140]	; 0x8c
   13918:	cmp	r3, #0
   1391a:	beq.w	13df0 <Process_isThread@@Base+0x10f8>
   1391e:	ldr.w	r0, [r9, #316]	; 0x13c
   13922:	blx	6758 <free@plt+0x4>
   13926:	ldr.w	r6, [r4, #140]	; 0x8c
   1392a:	ldr.w	r3, [r9, #60]	; 0x3c
   1392e:	movs	r1, #0
   13930:	ldr	r2, [r6, #0]
   13932:	ubfx	r8, r3, #8, #12
   13936:	lsrs	r7, r3, #12
   13938:	mov	r0, r3
   1393a:	bic.w	r7, r7, #255	; 0xff
   1393e:	strd	r0, r1, [sp, #112]	; 0x70
   13942:	uxtb	r1, r3
   13944:	orrs	r7, r1
   13946:	cmp	r2, #0
   13948:	beq.w	142e8 <Process_isThread@@Base+0x15f0>
   1394c:	ldr	r3, [pc, #416]	; (13af0 <Process_isThread@@Base+0xdf8>)
   1394e:	vmov	s23, fp
   13952:	ldr	r2, [pc, #416]	; (13af4 <Process_isThread@@Base+0xdfc>)
   13954:	mov.w	r1, #61440	; 0xf000
   13958:	add	r3, pc
   1395a:	movt	r1, #65535	; 0xffff
   1395e:	add	r2, pc
   13960:	str.w	r9, [sp, #108]	; 0x6c
   13964:	adds	r6, #16
   13966:	add	r4, sp, #132	; 0x84
   13968:	mov	r9, r3
   1396a:	mov	fp, r2
   1396c:	str	r1, [sp, #24]
   1396e:	b.n	1397a <Process_isThread@@Base+0xc82>
   13970:	ldr.w	r3, [r6], #16
   13974:	cmp	r3, #0
   13976:	beq.w	142e0 <Process_isThread@@Base+0x15e8>
   1397a:	ldr.w	r3, [r6, #-12]
   1397e:	sub.w	r2, r6, #16
   13982:	str	r2, [sp, #88]	; 0x58
   13984:	cmp	r8, r3
   13986:	bcc.w	142e0 <Process_isThread@@Base+0x15e8>
   1398a:	bhi.n	13970 <Process_isThread@@Base+0xc78>
   1398c:	ldr.w	r5, [r6, #-8]
   13990:	cmp	r7, r5
   13992:	bcc.w	142e0 <Process_isThread@@Base+0x15e8>
   13996:	ldr.w	r3, [r6, #-4]
   1399a:	cmp	r7, r3
   1399c:	it	ls
   1399e:	subls	r5, r7, r5
   139a0:	bhi.n	13970 <Process_isThread@@Base+0xc78>
   139a2:	b.n	13c72 <Process_isThread@@Base+0xf7a>
   139a4:	ldr	r3, [sp, #92]	; 0x5c
   139a6:	cmp	r3, #0
   139a8:	bne.w	13c08 <Process_isThread@@Base+0xf10>
   139ac:	movs	r3, #1
   139ae:	b.n	135ea <Process_isThread@@Base+0x8f2>
   139b0:	ldr	r3, [sp, #20]
   139b2:	add	r4, sp, #924	; 0x39c
   139b4:	ldr	r1, [sp, #36]	; 0x24
   139b6:	ldr	r2, [pc, #320]	; (13af8 <Process_isThread@@Base+0xe00>)
   139b8:	mov	r0, r4
   139ba:	str	r3, [sp, #8]
   139bc:	movs	r3, #129	; 0x81
   139be:	add	r2, pc
   139c0:	str	r1, [sp, #4]
   139c2:	str	r2, [sp, #0]
   139c4:	movs	r1, #128	; 0x80
   139c6:	movs	r2, #1
   139c8:	strb.w	r5, [sp, #1052]	; 0x41c
   139cc:	blx	6c78 <__snprintf_chk@plt>
   139d0:	cmp	r0, #127	; 0x7f
   139d2:	bhi.w	14430 <Process_isThread@@Base+0x1738>
   139d6:	mov	r1, r4
   139d8:	mov	r2, sl
   139da:	movs	r0, #3
   139dc:	blx	6854 <__xstat@plt>
   139e0:	adds	r0, #1
   139e2:	beq.n	13a58 <Process_isThread@@Base+0xd60>
   139e4:	ldr.w	r2, [sl, #24]
   139e8:	add	r3, sp, #132	; 0x84
   139ea:	ldr.w	r5, [sl, #72]	; 0x48
   139ee:	add	r4, sp, #128	; 0x80
   139f0:	mov	r1, r3
   139f2:	str	r3, [sp, #24]
   139f4:	mov	r0, r4
   139f6:	str.w	r2, [r9, #68]	; 0x44
   139fa:	str.w	r5, [r9, #112]	; 0x70
   139fe:	str	r5, [sp, #128]	; 0x80
   13a00:	blx	6824 <localtime_r@plt>
   13a04:	ldr	r3, [sp, #48]	; 0x30
   13a06:	add.w	r0, r9, #104	; 0x68
   13a0a:	ldr	r1, [r4, #0]
   13a0c:	mvn.w	r4, #382	; 0x17e
   13a10:	sub.w	r2, r3, #86016	; 0x15000
   13a14:	ldr	r3, [sp, #24]
   13a16:	add	r2, r4
   13a18:	cmp	r2, r1
   13a1a:	ble.w	142fe <Process_isThread@@Base+0x1606>
   13a1e:	ldr	r2, [pc, #220]	; (13afc <Process_isThread@@Base+0xe04>)
   13a20:	add	r2, pc
   13a22:	movs	r1, #7
   13a24:	blx	696c <strftime@plt>
   13a28:	ldr	r3, [sp, #32]
   13a2a:	ldr.w	r1, [r9, #68]	; 0x44
   13a2e:	ldr	r0, [r3, #16]
   13a30:	bl	f5c0 <UsersTable_getRef@@Base>
   13a34:	ldr	r3, [sp, #28]
   13a36:	ldr	r3, [r3, #32]
   13a38:	str.w	r0, [r9, #88]	; 0x58
   13a3c:	lsls	r0, r3, #22
   13a3e:	bmi.w	143a6 <Process_isThread@@Base+0x16ae>
   13a42:	lsls	r1, r3, #21
   13a44:	bmi.w	14330 <Process_isThread@@Base+0x1638>
   13a48:	ldr	r2, [sp, #20]
   13a4a:	mov	r0, r9
   13a4c:	ldr	r1, [sp, #36]	; 0x24
   13a4e:	bl	13238 <Process_isThread@@Base+0x540>
   13a52:	cmp	r0, #0
   13a54:	bne.w	1430a <Process_isThread@@Base+0x1612>
   13a58:	ldr	r3, [sp, #44]	; 0x2c
   13a5a:	ldrb	r3, [r3, #0]
   13a5c:	cbz	r3, 13ac0 <Process_isThread@@Base+0xdc8>
   13a5e:	ldr	r0, [sp, #32]
   13a60:	mov	r1, r9
   13a62:	bl	cd98 <ProcessList_remove@@Base>
   13a66:	mov	r0, fp
   13a68:	blx	6b60 <readdir@plt>
   13a6c:	cmp	r0, #0
   13a6e:	bne.w	133ec <Process_isThread@@Base+0x6f4>
   13a72:	mov	r0, fp
   13a74:	blx	6c6c <closedir@plt>
   13a78:	movs	r0, #1
   13a7a:	ldr	r2, [pc, #132]	; (13b00 <Process_isThread@@Base+0xe08>)
   13a7c:	ldr	r3, [pc, #84]	; (13ad4 <Process_isThread@@Base+0xddc>)
   13a7e:	add	r2, pc
   13a80:	ldr	r3, [r2, r3]
   13a82:	ldr	r2, [r3, #0]
   13a84:	ldr.w	r3, [sp, #2860]	; 0xb2c
   13a88:	eors	r2, r3
   13a8a:	bne.w	14442 <Process_isThread@@Base+0x174a>
   13a8e:	addw	sp, sp, #2868	; 0xb34
   13a92:	vpop	{d8-d14}
   13a96:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a9a:	add	sp, #8
   13a9c:	bx	lr
   13a9e:	cmp	r0, #0
   13aa0:	ble.w	133e0 <Process_isThread@@Base+0x6e8>
   13aa4:	ldr	r6, [sp, #40]	; 0x28
   13aa6:	add.w	r2, sp, #127	; 0x7f
   13aaa:	ldr	r5, [sp, #52]	; 0x34
   13aac:	mov	r1, r4
   13aae:	ldr	r3, [pc, #48]	; (13ae0 <Process_isThread@@Base+0xde8>)
   13ab0:	str	r2, [sp, #44]	; 0x2c
   13ab2:	strb	r6, [r2, #0]
   13ab4:	ldr	r0, [sp, #32]
   13ab6:	ldr	r3, [r5, r3]
   13ab8:	bl	d018 <ProcessList_getProcess@@Base>
   13abc:	mov	r9, r0
   13abe:	b.n	13452 <Process_isThread@@Base+0x75a>
   13ac0:	mov	r0, r9
   13ac2:	bl	12510 <Process_delete@@Base>
   13ac6:	b.n	133e0 <Process_isThread@@Base+0x6e8>
   13ac8:	movs	r0, r0
   13aca:	movs	r0, r0
   13acc:	movs	r0, r0
   13ace:	eors	r1, r3
   13ad0:	ldr	r4, [r6, #24]
   13ad2:	movs	r1, r0
   13ad4:	lsls	r0, r0, #9
   13ad6:	movs	r0, r0
   13ad8:	ldr	r0, [r6, #20]
   13ada:	movs	r1, r0
   13adc:	ldr	r0, [r7, r5]
   13ade:	movs	r0, r0
   13ae0:	lsls	r0, r4, #10
   13ae2:	movs	r0, r0
   13ae4:	ldr	r6, [r1, r4]
   13ae6:	movs	r0, r0
   13ae8:	ldrsb	r6, [r0, r7]
   13aea:	movs	r0, r0
   13aec:	strh	r6, [r0, #24]
   13aee:	movs	r1, r0
   13af0:	strb	r0, [r7, r1]
   13af2:	movs	r0, r0
   13af4:	adds	r4, #50	; 0x32
   13af6:	movs	r0, r0
   13af8:	strb	r6, [r4, r0]
   13afa:	movs	r0, r0
   13afc:	strh	r4, [r5, r4]
   13afe:	movs	r0, r0
   13b00:	str	r6, [r1, #40]	; 0x28
   13b02:	movs	r1, r0
   13b04:	ldr	r3, [sp, #20]
   13b06:	add	r5, sp, #528	; 0x210
   13b08:	ldr	r1, [sp, #36]	; 0x24
   13b0a:	movs	r4, #0
   13b0c:	ldr.w	r2, [pc, #1336]	; 14048 <Process_isThread@@Base+0x1350>
   13b10:	mov	r0, r5
   13b12:	str	r3, [sp, #8]
   13b14:	movs	r3, #129	; 0x81
   13b16:	add	r2, pc
   13b18:	str	r1, [sp, #4]
   13b1a:	str	r2, [sp, #0]
   13b1c:	movs	r1, #128	; 0x80
   13b1e:	movs	r2, #1
   13b20:	strb.w	r4, [sp, #656]	; 0x290
   13b24:	blx	6c78 <__snprintf_chk@plt>
   13b28:	cmp	r0, #127	; 0x7f
   13b2a:	bhi.w	14430 <Process_isThread@@Base+0x1738>
   13b2e:	mov	r0, r5
   13b30:	mov	r1, r4
   13b32:	blx	69a8 <open@plt>
   13b36:	adds	r3, r0, #1
   13b38:	mov	r5, r0
   13b3a:	beq.w	13fba <Process_isThread@@Base+0x12c2>
   13b3e:	addw	r7, sp, #1836	; 0x72c
   13b42:	movw	r2, #1023	; 0x3ff
   13b46:	mov	r1, r7
   13b48:	bl	12d1c <Process_isThread@@Base+0x24>
   13b4c:	mov	r3, r0
   13b4e:	mov	r0, r5
   13b50:	mov	r5, r3
   13b52:	blx	6c60 <close@plt>
   13b56:	cmp	r5, #0
   13b58:	ble.w	1349a <Process_isThread@@Base+0x7a2>
   13b5c:	strb	r4, [r7, r5]
   13b5e:	add.w	sl, sp, #176	; 0xb0
   13b62:	ldr.w	r3, [r9, #240]	; 0xf0
   13b66:	ldr.w	r5, [pc, #1252]	; 1404c <Process_isThread@@Base+0x1354>
   13b6a:	ldr.w	r6, [pc, #1252]	; 14050 <Process_isThread@@Base+0x1358>
   13b6e:	str	r3, [sp, #24]
   13b70:	add	r5, pc
   13b72:	ldr.w	r3, [r9, #244]	; 0xf4
   13b76:	add	r6, pc
   13b78:	str	r3, [sp, #64]	; 0x40
   13b7a:	ldr.w	r3, [r9, #248]	; 0xf8
   13b7e:	str	r3, [sp, #68]	; 0x44
   13b80:	ldr.w	r3, [r9, #252]	; 0xfc
   13b84:	str.w	r7, [sl]
   13b88:	ldr.w	r7, [pc, #1224]	; 14054 <Process_isThread@@Base+0x135c>
   13b8c:	str	r3, [sp, #72]	; 0x48
   13b8e:	add	r7, pc
   13b90:	mov	r1, r5
   13b92:	mov	r0, sl
   13b94:	blx	6984 <strsep@plt>
   13b98:	mov	r4, r0
   13b9a:	cmp	r0, #0
   13b9c:	beq.w	1349a <Process_isThread@@Base+0x7a2>
   13ba0:	ldrb	r3, [r4, #0]
   13ba2:	subs	r3, #99	; 0x63
   13ba4:	cmp	r3, #20
   13ba6:	bhi.n	13b90 <Process_isThread@@Base+0xe98>
   13ba8:	add	r2, pc, #8	; (adr r2, 13bb4 <Process_isThread@@Base+0xebc>)
   13baa:	ldr.w	r3, [r2, r3, lsl #2]
   13bae:	add	r2, r3
   13bb0:	bx	r2
   13bb2:	nop
   13bb4:	lsls	r1, r7, #7
   13bb6:	movs	r0, r0
   13bb8:			; <UNDEFINED> instruction: 0xffddffff
   13bbc:			; <UNDEFINED> instruction: 0xffddffff
   13bc0:			; <UNDEFINED> instruction: 0xffddffff
   13bc4:			; <UNDEFINED> instruction: 0xffddffff
   13bc8:			; <UNDEFINED> instruction: 0xffddffff
   13bcc:			; <UNDEFINED> instruction: 0xffddffff
   13bd0:			; <UNDEFINED> instruction: 0xffddffff
   13bd4:			; <UNDEFINED> instruction: 0xffddffff
   13bd8:			; <UNDEFINED> instruction: 0xffddffff
   13bdc:			; <UNDEFINED> instruction: 0xffddffff
   13be0:			; <UNDEFINED> instruction: 0xffddffff
   13be4:			; <UNDEFINED> instruction: 0xffddffff
   13be8:			; <UNDEFINED> instruction: 0xffddffff
   13bec:			; <UNDEFINED> instruction: 0xffddffff
   13bf0:	lsls	r3, r1, #6
   13bf2:	movs	r0, r0
   13bf4:	lsls	r7, r3, #5
   13bf6:	movs	r0, r0
   13bf8:			; <UNDEFINED> instruction: 0xffddffff
   13bfc:			; <UNDEFINED> instruction: 0xffddffff
   13c00:			; <UNDEFINED> instruction: 0xffddffff
   13c04:	lsls	r1, r6, #3
   13c06:	movs	r0, r0
   13c08:	ldr.w	r3, [r9, #16]
   13c0c:	ldr.w	r2, [r9, #24]
   13c10:	subs	r3, r3, r2
   13c12:	clz	r3, r3
   13c16:	lsrs	r3, r3, #5
   13c18:	b.n	135ea <Process_isThread@@Base+0x8f2>
   13c1a:	lsrs	r3, r2, #12
   13c1c:	uxtb	r2, r2
   13c1e:	orr.w	r3, r3, r1, lsl #20
   13c22:	bic.w	r3, r3, #255	; 0xff
   13c26:	orrs	r2, r3
   13c28:	cmp	r7, r2
   13c2a:	beq.w	13de2 <Process_isThread@@Base+0x10ea>
   13c2e:	ldr	r0, [r4, #0]
   13c30:	blx	6758 <free@plt+0x4>
   13c34:	ldr.w	r3, [r6, #-16]
   13c38:	mov	r2, fp
   13c3a:	movs	r1, #1
   13c3c:	mov	r0, r4
   13c3e:	str	r5, [sp, #0]
   13c40:	blx	690c <__asprintf_chk@plt>
   13c44:	ldr	r1, [r4, #0]
   13c46:	mov	r2, sl
   13c48:	movs	r0, #3
   13c4a:	blx	6854 <__xstat@plt>
   13c4e:	cbnz	r0, 13c64 <Process_isThread@@Base+0xf6c>
   13c50:	ldrd	r2, r1, [sl, #32]
   13c54:	ldr	r3, [sp, #24]
   13c56:	ubfx	r0, r2, #8, #12
   13c5a:	ands	r3, r1
   13c5c:	orrs	r3, r0
   13c5e:	cmp	r8, r3
   13c60:	beq.w	13dce <Process_isThread@@Base+0x10d6>
   13c64:	ldr	r0, [r4, #0]
   13c66:	blx	6758 <free@plt+0x4>
   13c6a:	cmp	r7, r5
   13c6c:	beq.w	13f7c <Process_isThread@@Base+0x1284>
   13c70:	mov	r5, r7
   13c72:	ldr.w	r3, [r6, #-16]
   13c76:	mov	r2, r9
   13c78:	movs	r1, #1
   13c7a:	mov	r0, r4
   13c7c:	str	r5, [sp, #0]
   13c7e:	blx	690c <__asprintf_chk@plt>
   13c82:	ldr	r1, [r4, #0]
   13c84:	mov	r2, sl
   13c86:	movs	r0, #3
   13c88:	blx	6854 <__xstat@plt>
   13c8c:	cmp	r0, #0
   13c8e:	bne.n	13c2e <Process_isThread@@Base+0xf36>
   13c90:	ldrd	r2, r1, [sl, #32]
   13c94:	ldr	r3, [sp, #24]
   13c96:	ubfx	r0, r2, #8, #12
   13c9a:	ands	r3, r1
   13c9c:	orrs	r3, r0
   13c9e:	cmp	r8, r3
   13ca0:	bne.n	13c2e <Process_isThread@@Base+0xf36>
   13ca2:	b.n	13c1a <Process_isThread@@Base+0xf22>
   13ca4:	ldrb	r3, [r4, #1]
   13ca6:	cmp	r3, #99	; 0x63
   13ca8:	beq.w	14064 <Process_isThread@@Base+0x136c>
   13cac:	ldr	r1, [pc, #936]	; (14058 <Process_isThread@@Base+0x1360>)
   13cae:	adds	r0, r4, #1
   13cb0:	movs	r2, #12
   13cb2:	add	r1, pc
   13cb4:	blx	6c2c <strncmp@plt>
   13cb8:	cmp	r0, #0
   13cba:	bne.w	13b90 <Process_isThread@@Base+0xe98>
   13cbe:	mov	r1, r0
   13cc0:	movs	r2, #10
   13cc2:	add.w	r0, r4, #13
   13cc6:	blx	6ab4 <strtoull@plt>
   13cca:	ldr	r2, [sp, #68]	; 0x44
   13ccc:	mov	r3, r0
   13cce:	strd	r3, r1, [r9, #248]	; 0xf8
   13cd2:	ldr	r3, [sp, #72]	; 0x48
   13cd4:	subs	r0, r0, r2
   13cd6:	sbc.w	r1, r1, r3
   13cda:	bl	15b34 <Battery_getData@@Base+0xa84>
   13cde:	ldrd	r2, r3, [r9, #272]	; 0x110
   13ce2:	vmov	d12, r0, r1
   13ce6:	ldr	r1, [sp, #80]	; 0x50
   13ce8:	subs	r0, r1, r2
   13cea:	ldr	r2, [sp, #84]	; 0x54
   13cec:	sbc.w	r1, r2, r3
   13cf0:	bl	15b34 <Battery_getData@@Base+0xa84>
   13cf4:	vldr	d7, [pc, #832]	; 14038 <Process_isThread@@Base+0x1340>
   13cf8:	ldrd	r3, r4, [sp, #80]	; 0x50
   13cfc:	strd	r3, r4, [r9, #272]	; 0x110
   13d00:	vmov	d6, r0, r1
   13d04:	vdiv.f64	d6, d6, d7
   13d08:	vdiv.f64	d7, d12, d6
   13d0c:	vstr	d7, [r9, #288]	; 0x120
   13d10:	b.n	13b90 <Process_isThread@@Base+0xe98>
   13d12:	ldrb	r3, [r4, #4]
   13d14:	add.w	r8, r4, #1
   13d18:	cmp	r3, #114	; 0x72
   13d1a:	beq.w	14010 <Process_isThread@@Base+0x1318>
   13d1e:	mov	r0, r8
   13d20:	movs	r2, #6
   13d22:	mov	r1, r7
   13d24:	blx	6c2c <strncmp@plt>
   13d28:	cmp	r0, #0
   13d2a:	bne.w	13b90 <Process_isThread@@Base+0xe98>
   13d2e:	mov	r1, r0
   13d30:	movs	r2, #10
   13d32:	adds	r0, r4, #7
   13d34:	blx	6ab4 <strtoull@plt>
   13d38:	strd	r0, r1, [r9, #232]	; 0xe8
   13d3c:	b.n	13b90 <Process_isThread@@Base+0xe98>
   13d3e:	ldrb	r3, [r4, #1]
   13d40:	cmp	r3, #99	; 0x63
   13d42:	beq.w	14086 <Process_isThread@@Base+0x138e>
   13d46:	ldr	r1, [pc, #788]	; (1405c <Process_isThread@@Base+0x1364>)
   13d48:	adds	r0, r4, #1
   13d4a:	movs	r2, #11
   13d4c:	add	r1, pc
   13d4e:	blx	6c2c <strncmp@plt>
   13d52:	cmp	r0, #0
   13d54:	bne.w	13b90 <Process_isThread@@Base+0xe98>
   13d58:	mov	r1, r0
   13d5a:	movs	r2, #10
   13d5c:	add.w	r0, r4, #12
   13d60:	blx	6ab4 <strtoull@plt>
   13d64:	ldr	r2, [sp, #24]
   13d66:	mov	r3, r0
   13d68:	strd	r3, r1, [r9, #240]	; 0xf0
   13d6c:	ldr	r3, [sp, #64]	; 0x40
   13d6e:	subs	r0, r0, r2
   13d70:	sbc.w	r1, r1, r3
   13d74:	bl	15b34 <Battery_getData@@Base+0xa84>
   13d78:	ldrd	r2, r3, [r9, #264]	; 0x108
   13d7c:	vmov	d12, r0, r1
   13d80:	ldr	r1, [sp, #80]	; 0x50
   13d82:	subs	r0, r1, r2
   13d84:	ldr	r2, [sp, #84]	; 0x54
   13d86:	sbc.w	r1, r2, r3
   13d8a:	bl	15b34 <Battery_getData@@Base+0xa84>
   13d8e:	vldr	d7, [pc, #680]	; 14038 <Process_isThread@@Base+0x1340>
   13d92:	ldrd	r3, r4, [sp, #80]	; 0x50
   13d96:	strd	r3, r4, [r9, #264]	; 0x108
   13d9a:	vmov	d6, r0, r1
   13d9e:	vdiv.f64	d6, d6, d7
   13da2:	vdiv.f64	d7, d12, d6
   13da6:	vstr	d7, [r9, #280]	; 0x118
   13daa:	b.n	13b90 <Process_isThread@@Base+0xe98>
   13dac:	adds	r0, r4, #1
   13dae:	movs	r2, #22
   13db0:	mov	r1, r6
   13db2:	blx	6c2c <strncmp@plt>
   13db6:	cmp	r0, #0
   13db8:	bne.w	13b90 <Process_isThread@@Base+0xe98>
   13dbc:	mov	r1, r0
   13dbe:	movs	r2, #10
   13dc0:	add.w	r0, r4, #23
   13dc4:	blx	6ab4 <strtoull@plt>
   13dc8:	strd	r0, r1, [r9, #256]	; 0x100
   13dcc:	b.n	13b90 <Process_isThread@@Base+0xe98>
   13dce:	lsrs	r3, r2, #12
   13dd0:	uxtb	r2, r2
   13dd2:	orr.w	r3, r3, r1, lsl #20
   13dd6:	bic.w	r3, r3, #255	; 0xff
   13dda:	orrs	r2, r3
   13ddc:	cmp	r7, r2
   13dde:	bne.w	13c64 <Process_isThread@@Base+0xf6c>
   13de2:	vmov	fp, s23
   13de6:	ldr.w	r9, [sp, #108]	; 0x6c
   13dea:	ldr	r0, [r4, #0]
   13dec:	str.w	r0, [r9, #316]	; 0x13c
   13df0:	ldr	r3, [sp, #28]
   13df2:	ldr	r3, [r3, #32]
   13df4:	lsls	r5, r3, #23
   13df6:	bmi.w	13fb2 <Process_isThread@@Base+0x12ba>
   13dfa:	add.w	r0, r9, #152	; 0x98
   13dfe:	ldr.w	r2, [r9, #164]	; 0xa4
   13e02:	ldmia	r0, {r0, r1, r3}
   13e04:	adds	r0, r0, r3
   13e06:	ldr	r3, [sp, #64]	; 0x40
   13e08:	adc.w	r1, r2, r1
   13e0c:	subs	r0, r0, r3
   13e0e:	ldr	r3, [sp, #68]	; 0x44
   13e10:	sbc.w	r1, r1, r3
   13e14:	ldr	r3, [sp, #72]	; 0x48
   13e16:	subs	r0, r0, r3
   13e18:	ldr	r3, [sp, #76]	; 0x4c
   13e1a:	sbc.w	r1, r1, r3
   13e1e:	bl	15b34 <Battery_getData@@Base+0xa84>
   13e22:	vldr	d5, [pc, #540]	; 14040 <Process_isThread@@Base+0x1348>
   13e26:	vcvt.f64.s32	d6, s22
   13e2a:	vmul.f64	d6, d6, d5
   13e2e:	vmov	d7, r0, r1
   13e32:	vdiv.f64	d7, d7, d8
   13e36:	vmul.f64	d7, d7, d5
   13e3a:	vcvt.f32.f64	s14, d7
   13e3e:	vcvt.f64.f32	d5, s14
   13e42:	vcmpe.f64	d5, d6
   13e46:	vmrs	APSR_nzcv, fpscr
   13e4a:	ble.w	13f68 <Process_isThread@@Base+0x1270>
   13e4e:	vcvt.f32.f64	s14, d6
   13e52:	vstr	s14, [r9, #80]	; 0x50
   13e56:	vcmp.f32	s14, s14
   13e5a:	vmrs	APSR_nzcv, fpscr
   13e5e:	bvs.w	14306 <Process_isThread@@Base+0x160e>
   13e62:	movs	r0, #30
   13e64:	ldr.w	r4, [r9, #120]	; 0x78
   13e68:	blx	67dc <sysconf@plt>
   13e6c:	ldr	r2, [sp, #32]
   13e6e:	addw	r3, r0, #1023	; 0x3ff
   13e72:	ands.w	r3, r3, r0, asr #32
   13e76:	it	cc
   13e78:	movcc	r3, r0
   13e7a:	ldrd	r0, r1, [r2, #56]	; 0x38
   13e7e:	asrs	r3, r3, #10
   13e80:	mul.w	r4, r4, r3
   13e84:	vmov	s15, r4
   13e88:	vcvt.f64.s32	d12, s15
   13e8c:	bl	15b34 <Battery_getData@@Base+0xa84>
   13e90:	vldr	d6, [pc, #428]	; 14040 <Process_isThread@@Base+0x1348>
   13e94:	ldr	r3, [sp, #44]	; 0x2c
   13e96:	ldrb	r5, [r3, #0]
   13e98:	vmov	d7, r0, r1
   13e9c:	vdiv.f64	d7, d12, d7
   13ea0:	vmul.f64	d7, d7, d6
   13ea4:	vcvt.f32.f64	s14, d7
   13ea8:	vstr	s14, [r9, #84]	; 0x54
   13eac:	cmp	r5, #0
   13eae:	beq.w	139b0 <Process_isThread@@Base+0xcb8>
   13eb2:	ldr	r3, [sp, #28]
   13eb4:	ldrb.w	r3, [r3, #68]	; 0x44
   13eb8:	cbz	r3, 13ed2 <Process_isThread@@Base+0x11da>
   13eba:	ldrb.w	r3, [r9, #45]	; 0x2d
   13ebe:	cmp	r3, #90	; 0x5a
   13ec0:	beq.n	13ed2 <Process_isThread@@Base+0x11da>
   13ec2:	ldr	r2, [sp, #20]
   13ec4:	mov	r0, r9
   13ec6:	ldr	r1, [sp, #36]	; 0x24
   13ec8:	bl	13238 <Process_isThread@@Base+0x540>
   13ecc:	cmp	r0, #0
   13ece:	beq.w	13a58 <Process_isThread@@Base+0xd60>
   13ed2:	ldr	r3, [sp, #28]
   13ed4:	ldr	r3, [r3, #32]
   13ed6:	lsls	r2, r3, #20
   13ed8:	bmi.w	140a8 <Process_isThread@@Base+0x13b0>
   13edc:	lsls	r3, r3, #19
   13ede:	bmi.w	1415a <Process_isThread@@Base+0x1462>
   13ee2:	ldrb.w	r3, [r9, #45]	; 0x2d
   13ee6:	cmp	r3, #90	; 0x5a
   13ee8:	bne.n	13ef2 <Process_isThread@@Base+0x11fa>
   13eea:	ldr.w	r3, [r9, #40]	; 0x28
   13eee:	cmp	r3, #0
   13ef0:	beq.n	13ff2 <Process_isThread@@Base+0x12fa>
   13ef2:	mov	r0, r9
   13ef4:	bl	12cf8 <Process_isThread@@Base>
   13ef8:	cbz	r0, 13f46 <Process_isThread@@Base+0x124e>
   13efa:	ldr	r3, [sp, #28]
   13efc:	ldrb.w	r3, [r3, #62]	; 0x3e
   13f00:	cbnz	r3, 13f1c <Process_isThread@@Base+0x1224>
   13f02:	ldrb.w	r3, [r9, #136]	; 0x88
   13f06:	cbnz	r3, 13f1c <Process_isThread@@Base+0x1224>
   13f08:	ldrb.w	r2, [r9, #45]	; 0x2d
   13f0c:	cmp	r2, #90	; 0x5a
   13f0e:	beq.w	14314 <Process_isThread@@Base+0x161c>
   13f12:	ldr	r1, [sp, #32]
   13f14:	ldr	r3, [r1, #48]	; 0x30
   13f16:	adds	r3, #1
   13f18:	str	r3, [r1, #48]	; 0x30
   13f1a:	b.n	13f4a <Process_isThread@@Base+0x1252>
   13f1c:	ldrd	r3, r2, [sp, #100]	; 0x64
   13f20:	mov.w	r0, #4294967295	; 0xffffffff
   13f24:	add.w	r1, r9, #32
   13f28:	str.w	r0, [r9, #40]	; 0x28
   13f2c:	add.w	r0, r9, #28
   13f30:	bl	13208 <Process_isThread@@Base+0x510>
   13f34:	ldrb.w	r3, [r9, #136]	; 0x88
   13f38:	cmp	r3, #0
   13f3a:	beq.w	143c4 <Process_isThread@@Base+0x16cc>
   13f3e:	ldr	r2, [sp, #32]
   13f40:	ldr	r3, [r2, #52]	; 0x34
   13f42:	adds	r3, #1
   13f44:	str	r3, [r2, #52]	; 0x34
   13f46:	ldrb.w	r2, [r9, #45]	; 0x2d
   13f4a:	ldr	r1, [sp, #32]
   13f4c:	cmp	r2, #82	; 0x52
   13f4e:	ldr	r3, [r1, #40]	; 0x28
   13f50:	add.w	r3, r3, #1
   13f54:	str	r3, [r1, #40]	; 0x28
   13f56:	bne.n	13f5e <Process_isThread@@Base+0x1266>
   13f58:	ldr	r3, [r1, #44]	; 0x2c
   13f5a:	adds	r3, #1
   13f5c:	str	r3, [r1, #44]	; 0x2c
   13f5e:	movs	r3, #1
   13f60:	strb.w	r3, [r9, #44]	; 0x2c
   13f64:	b.w	133e0 <Process_isThread@@Base+0x6e8>
   13f68:	vcmpe.f32	s14, #0.0
   13f6c:	movs	r3, #0
   13f6e:	vmrs	APSR_nzcv, fpscr
   13f72:	bpl.w	13e52 <Process_isThread@@Base+0x115a>
   13f76:	str.w	r3, [r9, #80]	; 0x50
   13f7a:	b.n	13e62 <Process_isThread@@Base+0x116a>
   13f7c:	ldr.w	r1, [r6, #-16]
   13f80:	mov	r2, sl
   13f82:	movs	r0, #3
   13f84:	blx	6854 <__xstat@plt>
   13f88:	cmp	r0, #0
   13f8a:	bne.w	13970 <Process_isThread@@Base+0xc78>
   13f8e:	ldrd	r2, r3, [sl, #32]
   13f92:	ldrd	r0, r1, [sp, #112]	; 0x70
   13f96:	cmp	r1, r3
   13f98:	it	eq
   13f9a:	cmpeq	r0, r2
   13f9c:	bne.w	13970 <Process_isThread@@Base+0xc78>
   13fa0:	ldr	r3, [sp, #88]	; 0x58
   13fa2:	vmov	fp, s23
   13fa6:	ldr.w	r9, [sp, #108]	; 0x6c
   13faa:	ldr	r0, [r3, #0]
   13fac:	blx	67c4 <strdup@plt>
   13fb0:	b.n	13dec <Process_isThread@@Base+0x10f4>
   13fb2:	mov	r0, r9
   13fb4:	bl	12cb0 <LinuxProcess_updateIOPriority@@Base>
   13fb8:	b.n	13dfa <Process_isThread@@Base+0x1102>
   13fba:	mov.w	r2, #4294967295	; 0xffffffff
   13fbe:	mov.w	r3, #4294967295	; 0xffffffff
   13fc2:	vstr	d10, [r9, #280]	; 0x118
   13fc6:	strd	r2, r3, [r9, #208]	; 0xd0
   13fca:	strd	r2, r3, [r9, #216]	; 0xd8
   13fce:	vstr	d10, [r9, #288]	; 0x120
   13fd2:	strd	r2, r3, [r9, #224]	; 0xe0
   13fd6:	strd	r2, r3, [r9, #232]	; 0xe8
   13fda:	strd	r2, r3, [r9, #240]	; 0xf0
   13fde:	strd	r2, r3, [r9, #248]	; 0xf8
   13fe2:	strd	r2, r3, [r9, #256]	; 0x100
   13fe6:	strd	r2, r3, [r9, #264]	; 0x108
   13fea:	strd	r2, r3, [r9, #272]	; 0x110
   13fee:	b.w	1349a <Process_isThread@@Base+0x7a2>
   13ff2:	ldrd	r3, r2, [sp, #100]	; 0x64
   13ff6:	mov.w	r0, #4294967295	; 0xffffffff
   13ffa:	add.w	r1, r9, #32
   13ffe:	str.w	r0, [r9, #40]	; 0x28
   14002:	add.w	r0, r9, #28
   14006:	bl	13208 <Process_isThread@@Base+0x510>
   1400a:	ldrb.w	r2, [r9, #45]	; 0x2d
   1400e:	b.n	13f4a <Process_isThread@@Base+0x1252>
   14010:	ldr	r1, [pc, #76]	; (14060 <Process_isThread@@Base+0x1368>)
   14012:	movs	r2, #6
   14014:	mov	r0, r8
   14016:	add	r1, pc
   14018:	blx	6c2c <strncmp@plt>
   1401c:	cmp	r0, #0
   1401e:	bne.w	13d1e <Process_isThread@@Base+0x1026>
   14022:	mov	r1, r0
   14024:	movs	r2, #10
   14026:	adds	r0, r4, #7
   14028:	blx	6ab4 <strtoull@plt>
   1402c:	strd	r0, r1, [r9, #224]	; 0xe0
   14030:	b.n	13b90 <Process_isThread@@Base+0xe98>
   14032:	nop
   14034:	nop.w
   14038:	movs	r0, r0
   1403a:	movs	r0, r0
   1403c:	ands	r0, r0
   1403e:	lsls	r7, r1
   14040:	movs	r0, r0
   14042:	movs	r0, r0
   14044:	movs	r0, r0
   14046:	eors	r1, r3
   14048:	strh	r2, [r1, r1]
   1404a:	movs	r0, r0
   1404c:	cmp	r4, #132	; 0x84
   1404e:	movs	r0, r0
   14050:	strh	r2, [r5, r0]
   14052:	movs	r0, r0
   14054:	strh	r2, [r1, r0]
   14056:	movs	r0, r0
   14058:	str	r6, [r1, r3]
   1405a:	movs	r0, r0
   1405c:	str	r0, [r5, r0]
   1405e:	movs	r0, r0
   14060:	ldr	r5, [pc, #488]	; (1424c <Process_isThread@@Base+0x1554>)
   14062:	movs	r0, r0
   14064:	ldr	r1, [pc, #1000]	; (14450 <Process_isThread@@Base+0x1758>)
   14066:	adds	r0, r4, #2
   14068:	movs	r2, #5
   1406a:	add	r1, pc
   1406c:	blx	6c2c <strncmp@plt>
   14070:	cmp	r0, #0
   14072:	bne.w	13cac <Process_isThread@@Base+0xfb4>
   14076:	mov	r1, r0
   14078:	movs	r2, #10
   1407a:	adds	r0, r4, #7
   1407c:	blx	6ab4 <strtoull@plt>
   14080:	strd	r0, r1, [r9, #216]	; 0xd8
   14084:	b.n	13b90 <Process_isThread@@Base+0xe98>
   14086:	ldr	r1, [pc, #972]	; (14454 <Process_isThread@@Base+0x175c>)
   14088:	adds	r0, r4, #2
   1408a:	movs	r2, #5
   1408c:	add	r1, pc
   1408e:	blx	6c2c <strncmp@plt>
   14092:	cmp	r0, #0
   14094:	bne.w	13d46 <Process_isThread@@Base+0x104e>
   14098:	mov	r1, r0
   1409a:	movs	r2, #10
   1409c:	adds	r0, r4, #7
   1409e:	blx	6ab4 <strtoull@plt>
   140a2:	strd	r0, r1, [r9, #208]	; 0xd0
   140a6:	b.n	13b90 <Process_isThread@@Base+0xe98>
   140a8:	ldr	r3, [sp, #20]
   140aa:	addw	r4, sp, #1188	; 0x4a4
   140ae:	ldr	r1, [sp, #36]	; 0x24
   140b0:	ldr	r2, [pc, #932]	; (14458 <Process_isThread@@Base+0x1760>)
   140b2:	mov	r0, r4
   140b4:	str	r3, [sp, #8]
   140b6:	movs	r3, #129	; 0x81
   140b8:	add	r2, pc
   140ba:	str	r1, [sp, #4]
   140bc:	str	r2, [sp, #0]
   140be:	movs	r1, #128	; 0x80
   140c0:	movs	r2, #1
   140c2:	blx	6c78 <__snprintf_chk@plt>
   140c6:	cmp	r0, #127	; 0x7f
   140c8:	bhi.w	14430 <Process_isThread@@Base+0x1738>
   140cc:	ldr	r1, [pc, #908]	; (1445c <Process_isThread@@Base+0x1764>)
   140ce:	mov	r0, r4
   140d0:	add	r1, pc
   140d2:	blx	6718 <fopen@plt>
   140d6:	mov	r5, r0
   140d8:	cmp	r0, #0
   140da:	beq.w	1441e <Process_isThread@@Base+0x1726>
   140de:	ldr	r7, [pc, #896]	; (14460 <Process_isThread@@Base+0x1768>)
   140e0:	add.w	r6, sp, #1320	; 0x528
   140e4:	movs	r3, #0
   140e6:	vmov	r8, s28
   140ea:	add	r7, pc
   140ec:	mov.w	r4, #512	; 0x200
   140f0:	strb	r3, [r6, #0]
   140f2:	b.n	14120 <Process_isThread@@Base+0x1428>
   140f4:	mov	r2, r5
   140f6:	mov.w	r1, #512	; 0x200
   140fa:	mov	r0, r8
   140fc:	blx	6764 <fgets@plt>
   14100:	cbz	r0, 14138 <Process_isThread@@Base+0x1440>
   14102:	movs	r1, #58	; 0x3a
   14104:	mov	r0, r8
   14106:	blx	6a24 <strchr@plt>
   1410a:	cbz	r0, 14138 <Process_isThread@@Base+0x1440>
   1410c:	mov	r1, r4
   1410e:	str	r0, [sp, #4]
   14110:	movw	r3, #513	; 0x201
   14114:	movs	r2, #1
   14116:	mov	r0, r6
   14118:	str	r7, [sp, #0]
   1411a:	blx	6c78 <__snprintf_chk@plt>
   1411e:	subs	r4, r4, r0
   14120:	mov	r0, r5
   14122:	blx	69f4 <feof@plt>
   14126:	cmp	r4, #0
   14128:	ite	le
   1412a:	movle	r3, #0
   1412c:	movgt	r3, #1
   1412e:	cmp	r0, #0
   14130:	it	ne
   14132:	movne	r3, #0
   14134:	cmp	r3, #0
   14136:	bne.n	140f4 <Process_isThread@@Base+0x13fc>
   14138:	mov	r0, r5
   1413a:	blx	6b30 <fclose@plt>
   1413e:	ldr.w	r0, [r9, #308]	; 0x134
   14142:	blx	6758 <free@plt+0x4>
   14146:	mov	r0, r6
   14148:	bl	11de4 <xStrdup@@Base>
   1414c:	ldr	r3, [sp, #28]
   1414e:	ldr	r3, [r3, #32]
   14150:	lsls	r3, r3, #19
   14152:	str.w	r0, [r9, #308]	; 0x134
   14156:	bpl.w	13ee2 <Process_isThread@@Base+0x11ea>
   1415a:	ldr	r3, [sp, #20]
   1415c:	add.w	r4, sp, #1320	; 0x528
   14160:	ldr	r1, [sp, #36]	; 0x24
   14162:	ldr	r2, [pc, #768]	; (14464 <Process_isThread@@Base+0x176c>)
   14164:	mov	r0, r4
   14166:	str	r3, [sp, #8]
   14168:	movs	r3, #129	; 0x81
   1416a:	add	r2, pc
   1416c:	str	r1, [sp, #4]
   1416e:	str	r2, [sp, #0]
   14170:	movs	r1, #128	; 0x80
   14172:	movs	r2, #1
   14174:	blx	6c78 <__snprintf_chk@plt>
   14178:	cmp	r0, #127	; 0x7f
   1417a:	bhi.w	14430 <Process_isThread@@Base+0x1738>
   1417e:	ldr	r1, [pc, #744]	; (14468 <Process_isThread@@Base+0x1770>)
   14180:	mov	r0, r4
   14182:	add	r1, pc
   14184:	blx	6718 <fopen@plt>
   14188:	mov	r4, r0
   1418a:	cmp	r0, #0
   1418c:	beq.w	13ee2 <Process_isThread@@Base+0x11ea>
   14190:	mov	r2, r0
   14192:	mov.w	r1, #512	; 0x200
   14196:	vmov	r0, s28
   1419a:	blx	6764 <fgets@plt>
   1419e:	cbz	r0, 141ba <Process_isThread@@Base+0x14c2>
   141a0:	ldr	r1, [pc, #712]	; (1446c <Process_isThread@@Base+0x1774>)
   141a2:	mov	r2, sl
   141a4:	vmov	r0, s28
   141a8:	add	r1, pc
   141aa:	blx	6a6c <__isoc99_sscanf@plt>
   141ae:	cmp	r0, #0
   141b0:	itt	gt
   141b2:	ldrgt.w	r3, [sl]
   141b6:	strgt.w	r3, [r9, #312]	; 0x138
   141ba:	mov	r0, r4
   141bc:	blx	6b30 <fclose@plt>
   141c0:	b.n	13ee2 <Process_isThread@@Base+0x11ea>
   141c2:	movs	r0, #2
   141c4:	vldr	d13, [pc, #640]	; 14448 <Process_isThread@@Base+0x1750>
   141c8:	blx	67dc <sysconf@plt>
   141cc:	mov	r1, r5
   141ce:	mov	r8, r0
   141d0:	mov	r0, r6
   141d2:	vmov	s15, r8
   141d6:	vcvt.f64.s32	d7, s15
   141da:	vdiv.f64	d12, d9, d7
   141de:	vstr	d7, [r4]
   141e2:	bl	15b34 <Battery_getData@@Base+0xa84>
   141e6:	vmov	d7, r0, r1
   141ea:	vmul.f64	d7, d7, d12
   141ee:	vmul.f64	d7, d7, d13
   141f2:	vmov	r0, r1, d7
   141f6:	bl	15cb0 <Battery_getData@@Base+0xc00>
   141fa:	ldr.w	r3, [sl]
   141fe:	movs	r2, #10
   14200:	strd	r0, r1, [r9, #152]	; 0x98
   14204:	adds	r0, r3, #1
   14206:	mov	r1, sl
   14208:	str.w	r0, [sl]
   1420c:	blx	6ab4 <strtoull@plt>
   14210:	mov	r5, r0
   14212:	cmp.w	r8, #0
   14216:	bne.w	137e2 <Process_isThread@@Base+0xaea>
   1421a:	movs	r0, #2
   1421c:	str	r1, [sp, #24]
   1421e:	blx	67dc <sysconf@plt>
   14222:	ldr	r1, [sp, #24]
   14224:	mov	r6, r0
   14226:	mov	r0, r5
   14228:	vmov	s15, r6
   1422c:	vcvt.f64.s32	d7, s15
   14230:	vdiv.f64	d12, d9, d7
   14234:	vstr	d7, [r4]
   14238:	bl	15b34 <Battery_getData@@Base+0xa84>
   1423c:	vmov	d7, r0, r1
   14240:	vmul.f64	d7, d7, d12
   14244:	vmul.f64	d7, d7, d13
   14248:	vmov	r0, r1, d7
   1424c:	bl	15cb0 <Battery_getData@@Base+0xc00>
   14250:	ldr.w	r3, [sl]
   14254:	movs	r2, #10
   14256:	strd	r0, r1, [r9, #160]	; 0xa0
   1425a:	adds	r0, r3, #1
   1425c:	mov	r1, sl
   1425e:	str.w	r0, [sl]
   14262:	blx	6ab4 <strtoull@plt>
   14266:	mov	r5, r0
   14268:	cmp	r6, #0
   1426a:	bne.w	13818 <Process_isThread@@Base+0xb20>
   1426e:	movs	r0, #2
   14270:	str	r1, [sp, #24]
   14272:	blx	67dc <sysconf@plt>
   14276:	ldr	r1, [sp, #24]
   14278:	mov	r6, r0
   1427a:	mov	r0, r5
   1427c:	vmov	s15, r6
   14280:	vcvt.f64.s32	d7, s15
   14284:	vdiv.f64	d12, d9, d7
   14288:	vstr	d7, [r4]
   1428c:	bl	15b34 <Battery_getData@@Base+0xa84>
   14290:	vmov	d7, r0, r1
   14294:	vmul.f64	d7, d7, d12
   14298:	vmul.f64	d7, d7, d13
   1429c:	vmov	r0, r1, d7
   142a0:	bl	15cb0 <Battery_getData@@Base+0xc00>
   142a4:	ldr.w	r3, [sl]
   142a8:	movs	r2, #10
   142aa:	strd	r0, r1, [r9, #168]	; 0xa8
   142ae:	adds	r0, r3, #1
   142b0:	mov	r1, sl
   142b2:	str.w	r0, [sl]
   142b6:	blx	6ab4 <strtoull@plt>
   142ba:	mov	r5, r0
   142bc:	cmp	r6, #0
   142be:	bne.w	1384e <Process_isThread@@Base+0xb56>
   142c2:	movs	r0, #2
   142c4:	str	r1, [sp, #24]
   142c6:	blx	67dc <sysconf@plt>
   142ca:	ldr	r1, [sp, #24]
   142cc:	vmov	s15, r0
   142d0:	vcvt.f64.s32	d7, s15
   142d4:	vdiv.f64	d12, d9, d7
   142d8:	vstr	d7, [r4]
   142dc:	b.w	1384e <Process_isThread@@Base+0xb56>
   142e0:	vmov	fp, s23
   142e4:	ldr.w	r9, [sp, #108]	; 0x6c
   142e8:	ldr	r2, [pc, #388]	; (14470 <Process_isThread@@Base+0x1778>)
   142ea:	mov	r3, r8
   142ec:	movs	r1, #1
   142ee:	mov	r0, sl
   142f0:	add	r2, pc
   142f2:	str	r7, [sp, #0]
   142f4:	blx	690c <__asprintf_chk@plt>
   142f8:	ldr.w	r0, [sl]
   142fc:	b.n	13dec <Process_isThread@@Base+0x10f4>
   142fe:	ldr	r2, [pc, #372]	; (14474 <Process_isThread@@Base+0x177c>)
   14300:	add	r2, pc
   14302:	b.w	13a22 <Process_isThread@@Base+0xd2a>
   14306:	movs	r3, #0
   14308:	b.n	13f76 <Process_isThread@@Base+0x127e>
   1430a:	ldr	r0, [sp, #32]
   1430c:	mov	r1, r9
   1430e:	bl	cd78 <ProcessList_add@@Base>
   14312:	b.n	13ed2 <Process_isThread@@Base+0x11da>
   14314:	ldr.w	r3, [r9, #40]	; 0x28
   14318:	cmp	r3, #0
   1431a:	beq.w	13f1c <Process_isThread@@Base+0x1224>
   1431e:	ldr	r3, [sp, #32]
   14320:	ldr	r2, [r3, #48]	; 0x30
   14322:	mov	r1, r3
   14324:	ldr	r3, [r3, #40]	; 0x28
   14326:	adds	r2, #1
   14328:	str	r2, [r1, #48]	; 0x30
   1432a:	adds	r3, #1
   1432c:	str	r3, [r1, #40]	; 0x28
   1432e:	b.n	13f5e <Process_isThread@@Base+0x1266>
   14330:	ldr	r3, [sp, #20]
   14332:	add.w	r4, sp, #1056	; 0x420
   14336:	ldr	r1, [sp, #36]	; 0x24
   14338:	ldr	r2, [pc, #316]	; (14478 <Process_isThread@@Base+0x1780>)
   1433a:	mov	r0, r4
   1433c:	str	r3, [sp, #8]
   1433e:	movs	r3, #129	; 0x81
   14340:	add	r2, pc
   14342:	str	r1, [sp, #4]
   14344:	str	r2, [sp, #0]
   14346:	movs	r1, #128	; 0x80
   14348:	movs	r2, #1
   1434a:	blx	6c78 <__snprintf_chk@plt>
   1434e:	cmp	r0, #127	; 0x7f
   14350:	bhi.n	14430 <Process_isThread@@Base+0x1738>
   14352:	ldr	r1, [pc, #296]	; (1447c <Process_isThread@@Base+0x1784>)
   14354:	mov	r0, r4
   14356:	add	r1, pc
   14358:	blx	6718 <fopen@plt>
   1435c:	mov	r4, r0
   1435e:	cmp	r0, #0
   14360:	beq.w	13a48 <Process_isThread@@Base+0xd50>
   14364:	vmov	r6, s28
   14368:	movs	r3, #0
   1436a:	ldr	r5, [pc, #276]	; (14480 <Process_isThread@@Base+0x1788>)
   1436c:	str.w	r3, [r9, #304]	; 0x130
   14370:	add	r5, pc
   14372:	mov	r2, r4
   14374:	mov.w	r1, #512	; 0x200
   14378:	mov	r0, r6
   1437a:	blx	6764 <fgets@plt>
   1437e:	cbz	r0, 143ca <Process_isThread@@Base+0x16d2>
   14380:	ldr	r3, [r6, #0]
   14382:	ldr	r2, [sp, #96]	; 0x60
   14384:	cmp	r3, r2
   14386:	bne.n	14372 <Process_isThread@@Base+0x167a>
   14388:	ldrb	r3, [r6, #4]
   1438a:	cmp	r3, #58	; 0x3a
   1438c:	bne.n	14372 <Process_isThread@@Base+0x167a>
   1438e:	mov	r2, sl
   14390:	mov	r1, r5
   14392:	mov	r0, r6
   14394:	blx	6a6c <__isoc99_sscanf@plt>
   14398:	cmp	r0, #0
   1439a:	itt	gt
   1439c:	ldrgt.w	r3, [sl]
   143a0:	strgt.w	r3, [r9, #304]	; 0x130
   143a4:	b.n	14372 <Process_isThread@@Base+0x167a>
   143a6:	ldr	r0, [pc, #220]	; (14484 <Process_isThread@@Base+0x178c>)
   143a8:	movs	r1, #4
   143aa:	add	r0, pc
   143ac:	blx	6b18 <access@plt>
   143b0:	cbz	r0, 143d4 <Process_isThread@@Base+0x16dc>
   143b2:	ldr.w	r3, [r9, #16]
   143b6:	movs	r2, #0
   143b8:	strd	r2, r3, [r9, #296]	; 0x128
   143bc:	ldr	r3, [sp, #28]
   143be:	ldr	r3, [r3, #32]
   143c0:	b.w	13a42 <Process_isThread@@Base+0xd4a>
   143c4:	ldrb.w	r2, [r9, #45]	; 0x2d
   143c8:	b.n	13f12 <Process_isThread@@Base+0x121a>
   143ca:	mov	r0, r4
   143cc:	blx	6b30 <fclose@plt>
   143d0:	b.w	13a48 <Process_isThread@@Base+0xd50>
   143d4:	ldr	r2, [sp, #20]
   143d6:	movs	r3, #129	; 0x81
   143d8:	ldr	r1, [sp, #36]	; 0x24
   143da:	ldr	r0, [pc, #172]	; (14488 <Process_isThread@@Base+0x1790>)
   143dc:	str	r2, [sp, #8]
   143de:	movs	r2, #1
   143e0:	add	r0, pc
   143e2:	str	r1, [sp, #4]
   143e4:	str	r0, [sp, #0]
   143e6:	movs	r1, #128	; 0x80
   143e8:	vmov	r0, s28
   143ec:	blx	6c78 <__snprintf_chk@plt>
   143f0:	cmp	r0, #127	; 0x7f
   143f2:	bhi.n	14430 <Process_isThread@@Base+0x1738>
   143f4:	ldr	r1, [pc, #148]	; (1448c <Process_isThread@@Base+0x1794>)
   143f6:	vmov	r0, s28
   143fa:	add	r1, pc
   143fc:	blx	6718 <fopen@plt>
   14400:	mov	r4, r0
   14402:	cmp	r0, #0
   14404:	beq.n	143bc <Process_isThread@@Base+0x16c4>
   14406:	ldr	r1, [pc, #136]	; (14490 <Process_isThread@@Base+0x1798>)
   14408:	add.w	r3, r9, #296	; 0x128
   1440c:	add.w	r2, r9, #300	; 0x12c
   14410:	add	r1, pc
   14412:	blx	6700 <__isoc99_fscanf@plt>
   14416:	mov	r0, r4
   14418:	blx	6b30 <fclose@plt>
   1441c:	b.n	143bc <Process_isThread@@Base+0x16c4>
   1441e:	ldr	r0, [pc, #116]	; (14494 <Process_isThread@@Base+0x179c>)
   14420:	add	r0, pc
   14422:	bl	11de4 <xStrdup@@Base>
   14426:	ldr	r3, [sp, #28]
   14428:	ldr	r3, [r3, #32]
   1442a:	str.w	r0, [r9, #308]	; 0x134
   1442e:	b.n	13edc <Process_isThread@@Base+0x11e4>
   14430:	movs	r0, #1
   14432:	blx	6730 <curs_set@plt>
   14436:	blx	6c48 <endwin@plt+0x4>
   1443a:	movs	r1, #0
   1443c:	movs	r0, #1
   1443e:	blx	683c <err@plt>
   14442:	blx	67d0 <__stack_chk_fail@plt>
   14446:	nop
   14448:	movs	r0, r0
   1444a:	movs	r0, r0
   1444c:	movs	r0, r0
   1444e:	eors	r1, r3
   14450:	ldr	r5, [pc, #8]	; (1445c <Process_isThread@@Base+0x1764>)
   14452:	movs	r0, r0
   14454:	ldr	r4, [pc, #896]	; (147d8 <ProcessList_goThroughEntries@@Base+0x38>)
   14456:	movs	r0, r0
   14458:	ldr	r6, [pc, #640]	; (146dc <ProcessList_new@@Base+0x244>)
   1445a:	movs	r0, r0
   1445c:	subs	r3, #28
   1445e:	movs	r0, r0
   14460:	subs	r3, #66	; 0x42
   14462:	movs	r0, r0
   14464:	ldr	r5, [pc, #1016]	; (14860 <ProcessList_goThroughEntries@@Base+0xc0>)
   14466:	movs	r0, r0
   14468:	subs	r2, #106	; 0x6a
   1446a:	movs	r0, r0
   1446c:	ldr	r5, [pc, #832]	; (147b0 <ProcessList_goThroughEntries@@Base+0x10>)
   1446e:	movs	r0, r0
   14470:	ldr	r2, [pc, #928]	; (14814 <ProcessList_goThroughEntries@@Base+0x74>)
   14472:	movs	r0, r0
   14474:	ldr	r2, [pc, #288]	; (14598 <ProcessList_new@@Base+0x100>)
   14476:	movs	r0, r0
   14478:	ldr	r3, [pc, #976]	; (1484c <ProcessList_goThroughEntries@@Base+0xac>)
   1447a:	movs	r0, r0
   1447c:	subs	r0, #150	; 0x96
   1447e:	movs	r0, r0
   14480:	ldr	r3, [pc, #880]	; (147f4 <ProcessList_goThroughEntries@@Base+0x54>)
   14482:	movs	r0, r0
   14484:	ldr	r2, [pc, #264]	; (14590 <ProcessList_new@@Base+0xf8>)
   14486:	movs	r0, r0
   14488:	ldr	r1, [pc, #912]	; (1481c <ProcessList_goThroughEntries@@Base+0x7c>)
   1448a:	movs	r0, r0
   1448c:	adds	r7, #242	; 0xf2
   1448e:	movs	r0, r0
   14490:	ldr	r1, [pc, #928]	; (14834 <ProcessList_goThroughEntries@@Base+0x94>)
   14492:	movs	r0, r0
   14494:	movs	r3, #128	; 0x80
	...

00014498 <ProcessList_new@@Base>:
   14498:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1449c:	sub.w	sp, sp, #540	; 0x21c
   144a0:	mov	r5, r2
   144a2:	ldr	r2, [pc, #664]	; (1473c <ProcessList_new@@Base+0x2a4>)
   144a4:	mov	r3, r1
   144a6:	str	r3, [sp, #8]
   144a8:	ldr	r3, [pc, #660]	; (14740 <ProcessList_new@@Base+0x2a8>)
   144aa:	add	r2, pc
   144ac:	mov	r8, r0
   144ae:	movs	r1, #144	; 0x90
   144b0:	movs	r0, #1
   144b2:	ldr	r4, [pc, #656]	; (14744 <ProcessList_new@@Base+0x2ac>)
   144b4:	ldr	r3, [r2, r3]
   144b6:	ldr	r7, [pc, #656]	; (14748 <ProcessList_new@@Base+0x2b0>)
   144b8:	add	r4, pc
   144ba:	ldr	r3, [r3, #0]
   144bc:	str	r3, [sp, #532]	; 0x214
   144be:	mov.w	r3, #0
   144c2:	bl	11da0 <xCalloc@@Base>
   144c6:	ldr	r3, [sp, #8]
   144c8:	mov	r2, r8
   144ca:	mov	r1, r4
   144cc:	ldr	r1, [r4, r7]
   144ce:	str	r5, [sp, #0]
   144d0:	mov	r6, r0
   144d2:	bl	cc84 <ProcessList_init@@Base>
   144d6:	ldr	r0, [pc, #628]	; (1474c <ProcessList_new@@Base+0x2b4>)
   144d8:	movs	r1, #0
   144da:	add	r0, pc
   144dc:	blx	69a8 <open@plt>
   144e0:	adds	r3, r0, #1
   144e2:	beq.w	14646 <ProcessList_new@@Base+0x1ae>
   144e6:	movs	r4, #0
   144e8:	mov	r9, r0
   144ea:	mov.w	r7, #2048	; 0x800
   144ee:	mov	r5, r4
   144f0:	b.n	144f8 <ProcessList_new@@Base+0x60>
   144f2:	add	r4, r3
   144f4:	add.w	r7, r7, #2048	; 0x800
   144f8:	mov	r0, r5
   144fa:	mov	r1, r7
   144fc:	blx	6800 <realloc@plt>
   14500:	mov.w	r2, #2048	; 0x800
   14504:	add.w	r8, r0, r4
   14508:	mov	r5, r0
   1450a:	mov	r0, r9
   1450c:	mov	r1, r8
   1450e:	bl	12d1c <Process_isThread@@Base+0x24>
   14512:	subs	r3, r0, #0
   14514:	bgt.n	144f2 <ProcessList_new@@Base+0x5a>
   14516:	movs	r7, #0
   14518:	mov	r0, r9
   1451a:	strb.w	r7, [r8]
   1451e:	blx	6c60 <close@plt>
   14522:	cmp	r4, #0
   14524:	beq.w	14720 <ProcessList_new@@Base+0x288>
   14528:	movs	r0, #160	; 0xa0
   1452a:	blx	693c <malloc@plt>
   1452e:	ldrb	r3, [r5, #0]
   14530:	mov	sl, r0
   14532:	cmp	r3, #0
   14534:	beq.w	14728 <ProcessList_new@@Base+0x290>
   14538:	mov	r3, r5
   1453a:	mov	r9, r7
   1453c:	movs	r2, #10
   1453e:	str	r2, [sp, #12]
   14540:	mov	r0, r3
   14542:	movs	r1, #32
   14544:	blx	6a24 <strchr@plt>
   14548:	ldrb	r3, [r0, #0]
   1454a:	mov	r4, r0
   1454c:	cmp	r3, #32
   1454e:	bne.n	14558 <ProcessList_new@@Base+0xc0>
   14550:	ldrb.w	r3, [r4, #1]!
   14554:	cmp	r3, #32
   14556:	beq.n	14550 <ProcessList_new@@Base+0xb8>
   14558:	movs	r1, #32
   1455a:	mov	r0, r4
   1455c:	blx	6a24 <strchr@plt>
   14560:	lsls	r3, r7, #4
   14562:	add.w	r8, sl, r3
   14566:	mov	fp, r3
   14568:	mov	r2, r0
   1456a:	mov	r0, r4
   1456c:	mov	r4, r2
   1456e:	str	r2, [sp, #8]
   14570:	strb.w	r9, [r4], #1
   14574:	blx	67c4 <strdup@plt>
   14578:	ldr	r2, [sp, #8]
   1457a:	ldrb	r2, [r2, #1]
   1457c:	cmp	r2, #32
   1457e:	str.w	r0, [sl, fp]
   14582:	bne.n	1458c <ProcessList_new@@Base+0xf4>
   14584:	ldrb.w	r3, [r4, #1]!
   14588:	cmp	r3, #32
   1458a:	beq.n	14584 <ProcessList_new@@Base+0xec>
   1458c:	movs	r1, #32
   1458e:	mov	r0, r4
   14590:	blx	6a24 <strchr@plt>
   14594:	movs	r2, #10
   14596:	movs	r1, #0
   14598:	mov	fp, r0
   1459a:	mov	r0, r4
   1459c:	mov	r4, fp
   1459e:	strb.w	r9, [r4], #1
   145a2:	blx	66cc <strtol@plt>
   145a6:	ldrb.w	r2, [fp, #1]
   145aa:	cmp	r2, #32
   145ac:	str.w	r0, [r8, #4]
   145b0:	bne.n	145ba <ProcessList_new@@Base+0x122>
   145b2:	ldrb.w	r2, [r4, #1]!
   145b6:	cmp	r2, #32
   145b8:	beq.n	145b2 <ProcessList_new@@Base+0x11a>
   145ba:	sub.w	r3, r2, #48	; 0x30
   145be:	mov	r1, r4
   145c0:	cmp	r3, #9
   145c2:	bhi.n	145d0 <ProcessList_new@@Base+0x138>
   145c4:	ldrb.w	r2, [r1, #1]!
   145c8:	sub.w	r3, r2, #48	; 0x30
   145cc:	cmp	r3, #9
   145ce:	bls.n	145c4 <ProcessList_new@@Base+0x12c>
   145d0:	cmp	r2, #45	; 0x2d
   145d2:	add.w	fp, r1, #1
   145d6:	strb.w	r9, [r1]
   145da:	beq.n	146dc <ProcessList_new@@Base+0x244>
   145dc:	movs	r2, #10
   145de:	movs	r1, #0
   145e0:	mov	r0, r4
   145e2:	blx	66cc <strtol@plt>
   145e6:	movs	r2, #10
   145e8:	movs	r1, #0
   145ea:	str.w	r0, [r8, #8]
   145ee:	mov	r0, r4
   145f0:	blx	66cc <strtol@plt>
   145f4:	str.w	r0, [r8, #12]
   145f8:	mov	r0, fp
   145fa:	movs	r1, #10
   145fc:	blx	6a24 <strchr@plt>
   14600:	ldr	r2, [sp, #12]
   14602:	add.w	r8, r7, #1
   14606:	cmp	r8, r2
   14608:	add.w	r3, r0, #1
   1460c:	mov	r4, r0
   1460e:	beq.n	1470a <ProcessList_new@@Base+0x272>
   14610:	ldrb	r2, [r4, #1]
   14612:	cbz	r2, 14618 <ProcessList_new@@Base+0x180>
   14614:	mov	r7, r8
   14616:	b.n	14540 <ProcessList_new@@Base+0xa8>
   14618:	adds	r7, #2
   1461a:	lsls	r7, r7, #4
   1461c:	sub.w	r9, r7, #16
   14620:	mov	r0, r5
   14622:	blx	6758 <free@plt+0x4>
   14626:	mov	r1, r7
   14628:	mov	r0, sl
   1462a:	blx	6800 <realloc@plt>
   1462e:	movs	r3, #0
   14630:	mov	r1, r8
   14632:	movs	r2, #16
   14634:	str.w	r3, [r0, r9]
   14638:	mov	r4, r0
   1463a:	ldr	r3, [pc, #276]	; (14750 <ProcessList_new@@Base+0x2b8>)
   1463c:	add	r3, pc
   1463e:	blx	6bb4 <qsort@plt>
   14642:	str.w	r4, [r6, #140]	; 0x8c
   14646:	ldr	r1, [pc, #268]	; (14754 <ProcessList_new@@Base+0x2bc>)
   14648:	add	r7, sp, #16
   1464a:	ldr	r0, [pc, #268]	; (14758 <ProcessList_new@@Base+0x2c0>)
   1464c:	mov.w	r4, #4294967295	; 0xffffffff
   14650:	add	r1, pc
   14652:	movw	r9, #28771	; 0x7063
   14656:	add	r0, pc
   14658:	blx	6718 <fopen@plt>
   1465c:	mov	r8, r0
   1465e:	cmp	r0, #0
   14660:	beq.n	14734 <ProcessList_new@@Base+0x29c>
   14662:	mov	r2, r8
   14664:	mov.w	r1, #512	; 0x200
   14668:	mov	r0, r7
   1466a:	mov	r5, r4
   1466c:	blx	6764 <fgets@plt>
   14670:	ldrh	r3, [r7, #0]
   14672:	adds	r4, #1
   14674:	cmp	r3, r9
   14676:	beq.n	146d4 <ProcessList_new@@Base+0x23c>
   14678:	mov	r0, r8
   1467a:	blx	6b30 <fclose@plt>
   1467e:	cmp	r4, #2
   14680:	mov	r3, r4
   14682:	mov.w	r1, #192	; 0xc0
   14686:	it	lt
   14688:	movlt	r3, #2
   1468a:	mov	r0, r4
   1468c:	subs	r3, #1
   1468e:	str.w	r3, [r6, #128]	; 0x80
   14692:	bl	11da0 <xCalloc@@Base>
   14696:	str.w	r0, [r6, #136]	; 0x88
   1469a:	cbz	r4, 146ba <ProcessList_new@@Base+0x222>
   1469c:	mov.w	r8, #1
   146a0:	mov.w	r9, #0
   146a4:	movs	r2, #0
   146a6:	cmp	r5, r2
   146a8:	strd	r8, r9, [r0]
   146ac:	strd	r8, r9, [r0, #96]	; 0x60
   146b0:	add.w	r2, r2, #1
   146b4:	add.w	r0, r0, #192	; 0xc0
   146b8:	bgt.n	146a6 <ProcessList_new@@Base+0x20e>
   146ba:	ldr	r2, [pc, #160]	; (1475c <ProcessList_new@@Base+0x2c4>)
   146bc:	ldr	r3, [pc, #128]	; (14740 <ProcessList_new@@Base+0x2a8>)
   146be:	add	r2, pc
   146c0:	ldr	r3, [r2, r3]
   146c2:	ldr	r2, [r3, #0]
   146c4:	ldr	r3, [sp, #532]	; 0x214
   146c6:	eors	r2, r3
   146c8:	bne.n	14730 <ProcessList_new@@Base+0x298>
   146ca:	mov	r0, r6
   146cc:	add.w	sp, sp, #540	; 0x21c
   146d0:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   146d4:	ldrb	r3, [r7, #2]
   146d6:	cmp	r3, #117	; 0x75
   146d8:	bne.n	14678 <ProcessList_new@@Base+0x1e0>
   146da:	b.n	14662 <ProcessList_new@@Base+0x1ca>
   146dc:	movs	r2, #10
   146de:	mov	r0, r4
   146e0:	movs	r1, #0
   146e2:	blx	66cc <strtol@plt>
   146e6:	movs	r1, #32
   146e8:	str.w	r0, [r8, #8]
   146ec:	mov	r0, fp
   146ee:	blx	6a24 <strchr@plt>
   146f2:	movs	r2, #10
   146f4:	movs	r1, #0
   146f6:	mov	r4, r0
   146f8:	mov	r0, fp
   146fa:	strb.w	r9, [r4], #1
   146fe:	mov	fp, r4
   14700:	blx	66cc <strtol@plt>
   14704:	str.w	r0, [r8, #12]
   14708:	b.n	145f8 <ProcessList_new@@Base+0x160>
   1470a:	str	r3, [sp, #8]
   1470c:	add.w	r3, r7, #11
   14710:	mov	r0, sl
   14712:	str	r3, [sp, #12]
   14714:	lsls	r1, r3, #4
   14716:	blx	6800 <realloc@plt>
   1471a:	ldr	r3, [sp, #8]
   1471c:	mov	sl, r0
   1471e:	b.n	14610 <ProcessList_new@@Base+0x178>
   14720:	mov	r0, r5
   14722:	blx	6758 <free@plt+0x4>
   14726:	b.n	14646 <ProcessList_new@@Base+0x1ae>
   14728:	mov	r9, r3
   1472a:	movs	r7, #16
   1472c:	mov	r8, r3
   1472e:	b.n	14620 <ProcessList_new@@Base+0x188>
   14730:	blx	67d0 <__stack_chk_fail@plt>
   14734:	ldr	r0, [pc, #40]	; (14760 <ProcessList_new@@Base+0x2c8>)
   14736:	add	r0, pc
   14738:	bl	85b4 <CRT_fatalError@@Base>
   1473c:	ldr	r2, [r4, r1]
   1473e:	movs	r1, r0
   14740:	lsls	r0, r0, #9
   14742:	movs	r0, r0
   14744:	ldr	r4, [r2, r1]
   14746:	movs	r1, r0
   14748:	lsls	r0, r3, #11
   1474a:	movs	r0, r0
   1474c:	ldr	r2, [pc, #664]	; (149e8 <ProcessList_goThroughEntries@@Base+0x248>)
   1474e:	movs	r0, r0
   14750:	b.n	144e6 <ProcessList_new@@Base+0x4e>
   14752:	vsli.64	d19, d12, #63	; 0x3f
   14756:	movs	r0, r0
   14758:	mov	r2, r7
   1475a:	movs	r0, r0
   1475c:	ldrsb	r6, [r1, r1]
   1475e:	movs	r1, r0
   14760:	cmp	r6, r9
	...

00014764 <ProcessList_delete@@Base>:
   14764:	push	{r3, r4, r5, lr}
   14766:	mov	r5, r0
   14768:	bl	ccd4 <ProcessList_done@@Base>
   1476c:	ldr.w	r0, [r5, #136]	; 0x88
   14770:	blx	6758 <free@plt+0x4>
   14774:	ldr.w	r3, [r5, #140]	; 0x8c
   14778:	cbz	r3, 14796 <ProcessList_delete@@Base+0x32>
   1477a:	ldr	r0, [r3, #0]
   1477c:	cbz	r0, 14790 <ProcessList_delete@@Base+0x2c>
   1477e:	movs	r4, #16
   14780:	blx	6758 <free@plt+0x4>
   14784:	ldr.w	r3, [r5, #140]	; 0x8c
   14788:	ldr	r0, [r3, r4]
   1478a:	adds	r4, #16
   1478c:	cmp	r0, #0
   1478e:	bne.n	14780 <ProcessList_delete@@Base+0x1c>
   14790:	mov	r0, r3
   14792:	blx	6758 <free@plt+0x4>
   14796:	mov	r0, r5
   14798:	ldmia.w	sp!, {r3, r4, r5, lr}
   1479c:	b.w	6754 <free@plt>

000147a0 <ProcessList_goThroughEntries@@Base>:
   147a0:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147a4:	mov	r4, r0
   147a6:	vpush	{d8}
   147aa:	ldr	r2, [pc, #880]	; (14b1c <ProcessList_goThroughEntries@@Base+0x37c>)
   147ac:	ldr	r3, [pc, #880]	; (14b20 <ProcessList_goThroughEntries@@Base+0x380>)
   147ae:	add	r2, pc
   147b0:	ldr	r1, [pc, #880]	; (14b24 <ProcessList_goThroughEntries@@Base+0x384>)
   147b2:	ldr	r0, [pc, #884]	; (14b28 <ProcessList_goThroughEntries@@Base+0x388>)
   147b4:	sub	sp, #180	; 0xb4
   147b6:	ldr	r3, [r2, r3]
   147b8:	add	r1, pc
   147ba:	add	r0, pc
   147bc:	movs	r2, #0
   147be:	ldr	r3, [r3, #0]
   147c0:	str	r3, [sp, #172]	; 0xac
   147c2:	mov.w	r3, #0
   147c6:	movs	r3, #0
   147c8:	strd	r2, r3, [sp, #16]
   147cc:	strd	r2, r3, [sp, #24]
   147d0:	strd	r2, r3, [sp, #32]
   147d4:	blx	6718 <fopen@plt>
   147d8:	cmp	r0, #0
   147da:	beq.w	14b14 <ProcessList_goThroughEntries@@Base+0x374>
   147de:	movw	r3, #29254	; 0x7246
   147e2:	movw	r9, #26707	; 0x6853
   147e6:	mov	r2, r3
   147e8:	movt	r2, #25957	; 0x6565
   147ec:	str	r2, [sp, #8]
   147ee:	add	r2, sp, #32
   147f0:	movw	r3, #28500	; 0x6f54
   147f4:	movt	r3, #24948	; 0x6174
   147f8:	movw	r7, #30547	; 0x7753
   147fc:	movw	r8, #21075	; 0x5253
   14800:	movw	sl, #24940	; 0x616c
   14804:	movt	r9, #25965	; 0x656d
   14808:	movt	r7, #28769	; 0x7061
   1480c:	movt	r8, #25445	; 0x6365
   14810:	movt	sl, #28009	; 0x6d69
   14814:	add	r5, sp, #44	; 0x2c
   14816:	vmov	s16, r2
   1481a:	mov	r6, r0
   1481c:	mov	fp, r3
   1481e:	mov	r2, r6
   14820:	movs	r1, #128	; 0x80
   14822:	mov	r0, r5
   14824:	blx	6764 <fgets@plt>
   14828:	cmp	r0, #0
   1482a:	beq.w	149a6 <ProcessList_goThroughEntries@@Base+0x206>
   1482e:	ldrb.w	r2, [sp, #44]	; 0x2c
   14832:	subs	r2, #66	; 0x42
   14834:	cmp	r2, #17
   14836:	bhi.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14838:	add	r3, pc, #8	; (adr r3, 14844 <ProcessList_goThroughEntries@@Base+0xa4>)
   1483a:	ldr.w	r2, [r3, r2, lsl #2]
   1483e:	add	r3, r2
   14840:	bx	r3
   14842:	nop
   14844:	lsls	r5, r4, #4
   14846:	movs	r0, r0
   14848:	lsls	r3, r5, #3
   1484a:	movs	r0, r0
   1484c:			; <UNDEFINED> instruction: 0xffdbffff
   14850:			; <UNDEFINED> instruction: 0xffdbffff
   14854:			; <UNDEFINED> instruction: 0xffdbffff
   14858:			; <UNDEFINED> instruction: 0xffdbffff
   1485c:			; <UNDEFINED> instruction: 0xffdbffff
   14860:			; <UNDEFINED> instruction: 0xffdbffff
   14864:			; <UNDEFINED> instruction: 0xffdbffff
   14868:			; <UNDEFINED> instruction: 0xffdbffff
   1486c:			; <UNDEFINED> instruction: 0xffdbffff
   14870:	lsls	r1, r2, #2
   14872:	movs	r0, r0
   14874:			; <UNDEFINED> instruction: 0xffdbffff
   14878:			; <UNDEFINED> instruction: 0xffdbffff
   1487c:			; <UNDEFINED> instruction: 0xffdbffff
   14880:			; <UNDEFINED> instruction: 0xffdbffff
   14884:			; <UNDEFINED> instruction: 0xffdbffff
   14888:	lsls	r1, r1, #1
   1488a:	movs	r0, r0
   1488c:	ldrb.w	r3, [sp, #45]	; 0x2d
   14890:	cmp	r3, #104	; 0x68
   14892:	beq.w	14ac2 <ProcessList_goThroughEntries@@Base+0x322>
   14896:	cmp	r3, #119	; 0x77
   14898:	beq.w	14a90 <ProcessList_goThroughEntries@@Base+0x2f0>
   1489c:	cmp	r3, #82	; 0x52
   1489e:	bne.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   148a0:	ldr	r3, [r5, #0]
   148a2:	cmp	r3, r8
   148a4:	bne.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   148a6:	ldr	r3, [sp, #48]	; 0x30
   148a8:	cmp	r3, sl
   148aa:	bne.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   148ac:	ldr	r2, [sp, #52]	; 0x34
   148ae:	movw	r3, #25185	; 0x6261
   148b2:	movt	r3, #25964	; 0x656c
   148b6:	cmp	r2, r3
   148b8:	bne.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   148ba:	ldrb.w	r3, [sp, #56]	; 0x38
   148be:	cmp	r3, #58	; 0x3a
   148c0:	bne.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   148c2:	ldr	r1, [pc, #616]	; (14b2c <ProcessList_goThroughEntries@@Base+0x38c>)
   148c4:	add.w	r0, sp, #57	; 0x39
   148c8:	vmov	r2, s16
   148cc:	add	r1, pc
   148ce:	blx	6a6c <__isoc99_sscanf@plt>
   148d2:	b.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   148d4:	ldr	r2, [r5, #0]
   148d6:	movw	r3, #25933	; 0x654d
   148da:	movt	r3, #21613	; 0x546d
   148de:	cmp	r2, r3
   148e0:	beq.w	14a38 <ProcessList_goThroughEntries@@Base+0x298>
   148e4:	ldr	r2, [r5, #0]
   148e6:	movw	r3, #25933	; 0x654d
   148ea:	movt	r3, #18029	; 0x466d
   148ee:	cmp	r2, r3
   148f0:	beq.w	14a6a <ProcessList_goThroughEntries@@Base+0x2ca>
   148f4:	ldr	r2, [r5, #0]
   148f6:	movw	r3, #25933	; 0x654d
   148fa:	movt	r3, #21357	; 0x536d
   148fe:	cmp	r2, r3
   14900:	bne.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14902:	ldr	r2, [sp, #48]	; 0x30
   14904:	movw	r3, #24936	; 0x6168
   14908:	movt	r3, #25970	; 0x6572
   1490c:	cmp	r2, r3
   1490e:	bne.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14910:	ldrh.w	r2, [sp, #52]	; 0x34
   14914:	movw	r3, #14948	; 0x3a64
   14918:	cmp	r2, r3
   1491a:	bne.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   1491c:	ldr	r1, [pc, #528]	; (14b30 <ProcessList_goThroughEntries@@Base+0x390>)
   1491e:	add.w	r2, r4, #80	; 0x50
   14922:	add.w	r0, sp, #54	; 0x36
   14926:	add	r1, pc
   14928:	blx	6a6c <__isoc99_sscanf@plt>
   1492c:	b.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   1492e:	ldr	r2, [r5, #0]
   14930:	movw	r3, #24899	; 0x6143
   14934:	movt	r3, #26723	; 0x6863
   14938:	cmp	r2, r3
   1493a:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   1493e:	ldrh.w	r2, [sp, #48]	; 0x30
   14942:	movw	r3, #25701	; 0x6465
   14946:	cmp	r2, r3
   14948:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   1494c:	ldrb.w	r3, [sp, #50]	; 0x32
   14950:	cmp	r3, #58	; 0x3a
   14952:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14956:	ldr	r1, [pc, #476]	; (14b34 <ProcessList_goThroughEntries@@Base+0x394>)
   14958:	add.w	r2, r4, #96	; 0x60
   1495c:	add.w	r0, sp, #51	; 0x33
   14960:	add	r1, pc
   14962:	blx	6a6c <__isoc99_sscanf@plt>
   14966:	b.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14968:	ldr	r2, [r5, #0]
   1496a:	movw	r3, #30018	; 0x7542
   1496e:	movt	r3, #26214	; 0x6666
   14972:	cmp	r2, r3
   14974:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14978:	ldr	r2, [r5, #4]
   1497a:	movw	r3, #29285	; 0x7265
   1497e:	movt	r3, #14963	; 0x3a73
   14982:	cmp	r2, r3
   14984:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14988:	ldr	r1, [pc, #428]	; (14b38 <ProcessList_goThroughEntries@@Base+0x398>)
   1498a:	add.w	r2, r4, #88	; 0x58
   1498e:	add	r0, sp, #52	; 0x34
   14990:	add	r1, pc
   14992:	blx	6a6c <__isoc99_sscanf@plt>
   14996:	mov	r2, r6
   14998:	movs	r1, #128	; 0x80
   1499a:	mov	r0, r5
   1499c:	blx	6764 <fgets@plt>
   149a0:	cmp	r0, #0
   149a2:	bne.w	1482e <ProcessList_goThroughEntries@@Base+0x8e>
   149a6:	ldr	r3, [r4, #56]	; 0x38
   149a8:	mov	fp, r0
   149aa:	mov	r0, r6
   149ac:	ldr	r6, [r4, #72]	; 0x48
   149ae:	ldr	r1, [r4, #60]	; 0x3c
   149b0:	subs	r6, r3, r6
   149b2:	ldr	r5, [r4, #76]	; 0x4c
   149b4:	ldr	r3, [sp, #32]
   149b6:	ldr	r7, [sp, #24]
   149b8:	sbc.w	r5, r1, r5
   149bc:	ldr	r2, [sp, #36]	; 0x24
   149be:	subs	r1, r3, r7
   149c0:	str	r6, [r4, #64]	; 0x40
   149c2:	ldr	r3, [r4, #96]	; 0x60
   149c4:	ldr	r6, [sp, #28]
   149c6:	str	r5, [r4, #68]	; 0x44
   149c8:	ldr	r5, [r4, #100]	; 0x64
   149ca:	sbc.w	r6, r2, r6
   149ce:	adds	r3, r3, r1
   149d0:	ldr	r1, [r4, #104]	; 0x68
   149d2:	adc.w	r5, r6, r5
   149d6:	ldr	r6, [sp, #16]
   149d8:	str	r3, [r4, #96]	; 0x60
   149da:	subs	r1, r1, r6
   149dc:	ldr	r3, [r4, #108]	; 0x6c
   149de:	ldr	r6, [sp, #20]
   149e0:	str	r1, [r4, #112]	; 0x70
   149e2:	sbc.w	r3, r3, r6
   149e6:	str	r5, [r4, #100]	; 0x64
   149e8:	str	r3, [r4, #116]	; 0x74
   149ea:	blx	6b30 <fclose@plt>
   149ee:	add.w	r1, r4, #136	; 0x88
   149f2:	add.w	r0, r4, #128	; 0x80
   149f6:	bl	12d64 <Process_isThread@@Base+0x6c>
   149fa:	mov	r1, fp
   149fc:	vmov	r0, s16
   14a00:	vstr	d0, [sp, #8]
   14a04:	blx	68a8 <gettimeofday@plt>
   14a08:	ldr	r1, [sp, #36]	; 0x24
   14a0a:	mov	r2, fp
   14a0c:	ldr	r3, [sp, #32]
   14a0e:	mov	r0, r4
   14a10:	vldr	d0, [sp, #8]
   14a14:	str	r1, [sp, #0]
   14a16:	ldr	r1, [pc, #292]	; (14b3c <ProcessList_goThroughEntries@@Base+0x39c>)
   14a18:	add	r1, pc
   14a1a:	bl	13340 <Process_isThread@@Base+0x648>
   14a1e:	ldr	r2, [pc, #288]	; (14b40 <ProcessList_goThroughEntries@@Base+0x3a0>)
   14a20:	ldr	r3, [pc, #252]	; (14b20 <ProcessList_goThroughEntries@@Base+0x380>)
   14a22:	add	r2, pc
   14a24:	ldr	r3, [r2, r3]
   14a26:	ldr	r2, [r3, #0]
   14a28:	ldr	r3, [sp, #172]	; 0xac
   14a2a:	eors	r2, r3
   14a2c:	bne.n	14b10 <ProcessList_goThroughEntries@@Base+0x370>
   14a2e:	add	sp, #180	; 0xb4
   14a30:	vpop	{d8}
   14a34:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a38:	ldr	r2, [sp, #48]	; 0x30
   14a3a:	movw	r3, #29807	; 0x746f
   14a3e:	movt	r3, #27745	; 0x6c61
   14a42:	cmp	r2, r3
   14a44:	bne.w	148e4 <ProcessList_goThroughEntries@@Base+0x144>
   14a48:	ldrb.w	r3, [sp, #52]	; 0x34
   14a4c:	cmp	r3, #58	; 0x3a
   14a4e:	bne.w	148e4 <ProcessList_goThroughEntries@@Base+0x144>
   14a52:	ldr	r1, [pc, #240]	; (14b44 <ProcessList_goThroughEntries@@Base+0x3a4>)
   14a54:	add.w	r2, r4, #56	; 0x38
   14a58:	add.w	r0, sp, #53	; 0x35
   14a5c:	add	r1, pc
   14a5e:	blx	6a6c <__isoc99_sscanf@plt>
   14a62:	cmp	r0, #0
   14a64:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14a68:	b.n	148e4 <ProcessList_goThroughEntries@@Base+0x144>
   14a6a:	ldr	r2, [r5, #4]
   14a6c:	movw	r3, #25970	; 0x6572
   14a70:	movt	r3, #14949	; 0x3a65
   14a74:	cmp	r2, r3
   14a76:	bne.w	148f4 <ProcessList_goThroughEntries@@Base+0x154>
   14a7a:	ldr	r1, [pc, #204]	; (14b48 <ProcessList_goThroughEntries@@Base+0x3a8>)
   14a7c:	add.w	r2, r4, #72	; 0x48
   14a80:	add	r0, sp, #52	; 0x34
   14a82:	add	r1, pc
   14a84:	blx	6a6c <__isoc99_sscanf@plt>
   14a88:	cmp	r0, #0
   14a8a:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14a8e:	b.n	148f4 <ProcessList_goThroughEntries@@Base+0x154>
   14a90:	ldr	r3, [r5, #0]
   14a92:	cmp	r3, r7
   14a94:	beq.n	14ae6 <ProcessList_goThroughEntries@@Base+0x346>
   14a96:	ldr	r3, [r5, #0]
   14a98:	cmp	r3, r7
   14a9a:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14a9e:	ldr	r3, [sp, #48]	; 0x30
   14aa0:	ldr	r2, [sp, #8]
   14aa2:	cmp	r3, r2
   14aa4:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14aa8:	ldrb.w	r3, [sp, #52]	; 0x34
   14aac:	cmp	r3, #58	; 0x3a
   14aae:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14ab2:	ldr	r1, [pc, #152]	; (14b4c <ProcessList_goThroughEntries@@Base+0x3ac>)
   14ab4:	add	r2, sp, #16
   14ab6:	add.w	r0, sp, #53	; 0x35
   14aba:	add	r1, pc
   14abc:	blx	6a6c <__isoc99_sscanf@plt>
   14ac0:	b.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14ac2:	ldr	r3, [r5, #0]
   14ac4:	cmp	r3, r9
   14ac6:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14aca:	ldrh	r2, [r5, #4]
   14acc:	movw	r3, #14957	; 0x3a6d
   14ad0:	cmp	r2, r3
   14ad2:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14ad6:	ldr	r1, [pc, #120]	; (14b50 <ProcessList_goThroughEntries@@Base+0x3b0>)
   14ad8:	add	r2, sp, #24
   14ada:	add.w	r0, sp, #50	; 0x32
   14ade:	add	r1, pc
   14ae0:	blx	6a6c <__isoc99_sscanf@plt>
   14ae4:	b.n	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14ae6:	ldr	r3, [sp, #48]	; 0x30
   14ae8:	cmp	r3, fp
   14aea:	bne.n	14a96 <ProcessList_goThroughEntries@@Base+0x2f6>
   14aec:	ldrh.w	r2, [sp, #52]	; 0x34
   14af0:	movw	r3, #14956	; 0x3a6c
   14af4:	cmp	r2, r3
   14af6:	bne.n	14a96 <ProcessList_goThroughEntries@@Base+0x2f6>
   14af8:	ldr	r1, [pc, #88]	; (14b54 <ProcessList_goThroughEntries@@Base+0x3b4>)
   14afa:	add.w	r2, r4, #104	; 0x68
   14afe:	add.w	r0, sp, #54	; 0x36
   14b02:	add	r1, pc
   14b04:	blx	6a6c <__isoc99_sscanf@plt>
   14b08:	cmp	r0, #0
   14b0a:	bne.w	1481e <ProcessList_goThroughEntries@@Base+0x7e>
   14b0e:	b.n	14a96 <ProcessList_goThroughEntries@@Base+0x2f6>
   14b10:	blx	67d0 <__stack_chk_fail@plt>
   14b14:	ldr	r0, [pc, #64]	; (14b58 <ProcessList_goThroughEntries@@Base+0x3b8>)
   14b16:	add	r0, pc
   14b18:	bl	85b4 <CRT_fatalError@@Base>
   14b1c:	strb	r6, [r3, r5]
   14b1e:	movs	r1, r0
   14b20:	lsls	r0, r0, #9
   14b22:	movs	r0, r0
   14b24:	adds	r4, #52	; 0x34
   14b26:	movs	r0, r0
   14b28:			; <UNDEFINED> instruction: 0x47ea
   14b2a:	movs	r0, r0
   14b2c:	bx	r0
   14b2e:	movs	r0, r0
   14b30:	mov	lr, r4
   14b32:	movs	r0, r0
   14b34:	mov	r4, sp
   14b36:	movs	r0, r0
   14b38:	mov	r4, r7
   14b3a:	movs	r0, r0
   14b3c:	mov	r0, r2
   14b3e:	movs	r0, r0
   14b40:	strh	r2, [r5, r3]
   14b42:	movs	r1, r0
   14b44:	cmp	r0, lr
   14b46:	movs	r0, r0
   14b48:	cmp	r2, r9
   14b4a:	movs	r0, r0
   14b4c:	cmp	r2, r2
   14b4e:	movs	r0, r0
   14b50:	add	lr, sp
   14b52:	movs	r0, r0
   14b54:	add	sl, r9
   14b56:	movs	r0, r0
   14b58:	add	sl, r0
	...

00014b5c <CRT_handleSIGSEGV@@Base>:
   14b5c:	push	{r4, r5, r6, lr}
   14b5e:	bl	85a4 <CRT_done@@Base>
   14b62:	movs	r1, #1
   14b64:	ldr	r5, [pc, #116]	; (14bdc <CRT_handleSIGSEGV@@Base+0x80>)
   14b66:	ldr	r3, [pc, #120]	; (14be0 <CRT_handleSIGSEGV@@Base+0x84>)
   14b68:	add	r5, pc
   14b6a:	ldr	r2, [pc, #120]	; (14be4 <CRT_handleSIGSEGV@@Base+0x88>)
   14b6c:	ldr	r4, [r5, r3]
   14b6e:	add	r2, pc
   14b70:	ldr	r0, [r4, #0]
   14b72:	blx	6af4 <__fprintf_chk@plt+0x4>
   14b76:	ldr	r3, [pc, #112]	; (14be8 <CRT_handleSIGSEGV@@Base+0x8c>)
   14b78:	movs	r1, #128	; 0x80
   14b7a:	ldr	r6, [r5, r3]
   14b7c:	mov	r0, r6
   14b7e:	blx	6978 <backtrace@plt>
   14b82:	ldr	r2, [pc, #104]	; (14bec <CRT_handleSIGSEGV@@Base+0x90>)
   14b84:	movs	r1, #1
   14b86:	add	r2, pc
   14b88:	mov	r5, r0
   14b8a:	ldr	r0, [r4, #0]
   14b8c:	blx	6af4 <__fprintf_chk@plt+0x4>
   14b90:	mov	r1, r5
   14b92:	mov	r0, r6
   14b94:	movs	r2, #2
   14b96:	blx	6c94 <backtrace_symbols_fd@plt>
   14b9a:	ldr	r2, [pc, #84]	; (14bf0 <CRT_handleSIGSEGV@@Base+0x94>)
   14b9c:	movs	r1, #1
   14b9e:	ldr	r0, [r4, #0]
   14ba0:	add	r2, pc
   14ba2:	blx	6af4 <__fprintf_chk@plt+0x4>
   14ba6:	ldr	r2, [pc, #76]	; (14bf4 <CRT_handleSIGSEGV@@Base+0x98>)
   14ba8:	movs	r1, #1
   14baa:	ldr	r0, [r4, #0]
   14bac:	add	r2, pc
   14bae:	blx	6af4 <__fprintf_chk@plt+0x4>
   14bb2:	ldr	r2, [pc, #68]	; (14bf8 <CRT_handleSIGSEGV@@Base+0x9c>)
   14bb4:	movs	r1, #1
   14bb6:	ldr	r0, [r4, #0]
   14bb8:	add	r2, pc
   14bba:	blx	6af4 <__fprintf_chk@plt+0x4>
   14bbe:	ldr	r2, [pc, #60]	; (14bfc <CRT_handleSIGSEGV@@Base+0xa0>)
   14bc0:	movs	r1, #1
   14bc2:	ldr	r0, [r4, #0]
   14bc4:	add	r2, pc
   14bc6:	blx	6af4 <__fprintf_chk@plt+0x4>
   14bca:	ldr	r2, [pc, #52]	; (14c00 <CRT_handleSIGSEGV@@Base+0xa4>)
   14bcc:	movs	r1, #1
   14bce:	ldr	r0, [r4, #0]
   14bd0:	add	r2, pc
   14bd2:	blx	6af4 <__fprintf_chk@plt+0x4>
   14bd6:	blx	6c54 <abort@plt>
   14bda:	nop
   14bdc:	str	r4, [r4, r6]
   14bde:	movs	r1, r0
   14be0:	lsls	r0, r5, #9
   14be2:	movs	r0, r0
   14be4:	add	sl, r8
   14be6:	movs	r0, r0
   14be8:	lsls	r0, r3, #10
   14bea:	movs	r0, r0
   14bec:	add	lr, sp
   14bee:	movs	r0, r0
   14bf0:	cmp	r0, r2
   14bf2:	movs	r0, r0
   14bf4:	cmp	r0, r8
   14bf6:	movs	r0, r0
   14bf8:	cmp	r8, r1
   14bfa:	movs	r0, r0
   14bfc:	cmp	ip, r5
   14bfe:	movs	r0, r0
   14c00:	cmp	r8, ip
   14c02:	movs	r0, r0
   14c04:	movs	r0, r0
   14c06:	movs	r0, r0
   14c08:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c0c:	mov	r5, r1
   14c0e:	vpush	{d8}
   14c12:	mov	sl, r2
   14c14:	ldr	r6, [pc, #396]	; (14da4 <CRT_handleSIGSEGV@@Base+0x248>)
   14c16:	ldr.w	ip, [pc, #400]	; 14da8 <CRT_handleSIGSEGV@@Base+0x24c>
   14c1a:	add	r6, pc
   14c1c:	ldr	r7, [pc, #396]	; (14dac <CRT_handleSIGSEGV@@Base+0x250>)
   14c1e:	sub	sp, #356	; 0x164
   14c20:	add	ip, pc
   14c22:	add	r4, sp, #296	; 0x128
   14c24:	str	r0, [sp, #20]
   14c26:	ldmia	r6!, {r0, r1, r2, r3}
   14c28:	ldr.w	r7, [ip, r7]
   14c2c:	ldr	r7, [r7, #0]
   14c2e:	str	r7, [sp, #348]	; 0x15c
   14c30:	mov.w	r7, #0
   14c34:	mov	r7, r4
   14c36:	ldr	r6, [r6, #0]
   14c38:	str	r4, [sp, #24]
   14c3a:	stmia	r4!, {r0, r1, r2, r3}
   14c3c:	mov	r0, r7
   14c3e:	str	r6, [r4, #0]
   14c40:	blx	68f4 <opendir@plt>
   14c44:	cmp	r0, #0
   14c46:	beq.w	14d72 <CRT_handleSIGSEGV@@Base+0x216>
   14c4a:	mov	r7, r0
   14c4c:	mov.w	r2, #256	; 0x100
   14c50:	add	r0, sp, #40	; 0x28
   14c52:	movs	r1, #0
   14c54:	blx	6a90 <memset@plt>
   14c58:	add	r6, sp, #36	; 0x24
   14c5a:	vmov	s16, sl
   14c5e:	movs	r4, #0
   14c60:	mov	r8, r6
   14c62:	mov	r9, r6
   14c64:	cmp	r4, #64	; 0x40
   14c66:	mov	r0, r7
   14c68:	beq.n	14c9a <CRT_handleSIGSEGV@@Base+0x13e>
   14c6a:	blx	6b60 <readdir@plt>
   14c6e:	cmp	r0, #0
   14c70:	beq.n	14d68 <CRT_handleSIGSEGV@@Base+0x20c>
   14c72:	ldrb	r3, [r0, #11]
   14c74:	add.w	r2, r0, #11
   14c78:	cmp	r3, #66	; 0x42
   14c7a:	bne.n	14c64 <CRT_handleSIGSEGV@@Base+0x108>
   14c7c:	ldrb	r3, [r0, #12]
   14c7e:	cmp	r3, #65	; 0x41
   14c80:	bne.n	14c64 <CRT_handleSIGSEGV@@Base+0x108>
   14c82:	ldrb	r3, [r0, #13]
   14c84:	cmp	r3, #84	; 0x54
   14c86:	bne.n	14c64 <CRT_handleSIGSEGV@@Base+0x108>
   14c88:	mov	r0, r2
   14c8a:	adds	r4, #1
   14c8c:	bl	11de4 <xStrdup@@Base>
   14c90:	cmp	r4, #64	; 0x40
   14c92:	str.w	r0, [r9, #4]!
   14c96:	mov	r0, r7
   14c98:	bne.n	14c6a <CRT_handleSIGSEGV@@Base+0x10e>
   14c9a:	blx	6c6c <closedir@plt>
   14c9e:	ldr	r3, [pc, #272]	; (14db0 <CRT_handleSIGSEGV@@Base+0x254>)
   14ca0:	add.w	r9, sp, #316	; 0x13c
   14ca4:	movs	r7, #0
   14ca6:	str.w	r8, [sp, #36]	; 0x24
   14caa:	add	r3, pc
   14cac:	str	r3, [sp, #32]
   14cae:	add.w	r3, r6, r4, lsl #2
   14cb2:	str	r3, [sp, #28]
   14cb4:	ldr	r3, [pc, #252]	; (14db4 <CRT_handleSIGSEGV@@Base+0x258>)
   14cb6:	add	r3, pc
   14cb8:	mov	sl, r3
   14cba:	ldr	r2, [sp, #20]
   14cbc:	movs	r3, #30
   14cbe:	ldr.w	r4, [r6, #4]!
   14cc2:	mov	r1, r3
   14cc4:	ldr	r0, [sp, #32]
   14cc6:	str	r2, [sp, #12]
   14cc8:	ldr	r2, [sp, #24]
   14cca:	str	r0, [sp, #0]
   14ccc:	mov	r0, r9
   14cce:	str	r4, [sp, #8]
   14cd0:	str	r2, [sp, #4]
   14cd2:	movs	r2, #1
   14cd4:	blx	6c78 <__snprintf_chk@plt>
   14cd8:	cmp	r0, #29
   14cda:	bhi.n	14d8c <CRT_handleSIGSEGV@@Base+0x230>
   14cdc:	mov	r1, sl
   14cde:	mov	r0, r9
   14ce0:	blx	6718 <fopen@plt>
   14ce4:	mov	r4, r0
   14ce6:	cmp	r0, #0
   14ce8:	beq.n	14d76 <CRT_handleSIGSEGV@@Base+0x21a>
   14cea:	mov.w	fp, #0
   14cee:	mov	r0, fp
   14cf0:	blx	6758 <free@plt+0x4>
   14cf4:	mov	r0, r4
   14cf6:	bl	ec0c <String_readLine@@Base>
   14cfa:	cmp	r0, #0
   14cfc:	beq.n	14d7e <CRT_handleSIGSEGV@@Base+0x222>
   14cfe:	add.w	fp, fp, #1
   14d02:	cmp	fp, r5
   14d04:	bne.n	14cf0 <CRT_handleSIGSEGV@@Base+0x194>
   14d06:	mov	r8, r0
   14d08:	mov	r0, r4
   14d0a:	blx	6b30 <fclose@plt>
   14d0e:	vmov	r1, s16
   14d12:	mov	r0, r8
   14d14:	bl	eb48 <String_getToken@@Base>
   14d18:	movs	r1, #0
   14d1a:	movs	r2, #10
   14d1c:	mov	r4, r0
   14d1e:	blx	66cc <strtol@plt>
   14d22:	mov	r2, r0
   14d24:	mov	r0, r4
   14d26:	mov	r4, r2
   14d28:	blx	6758 <free@plt+0x4>
   14d2c:	mov	r0, r8
   14d2e:	add	r7, r4
   14d30:	blx	6758 <free@plt+0x4>
   14d34:	ldr	r3, [sp, #28]
   14d36:	cmp	r3, r6
   14d38:	bne.n	14cba <CRT_handleSIGSEGV@@Base+0x15e>
   14d3a:	ldr.w	r8, [sp, #36]	; 0x24
   14d3e:	mov	r4, r3
   14d40:	ldr.w	r0, [r8, #4]!
   14d44:	blx	6758 <free@plt+0x4>
   14d48:	cmp	r4, r8
   14d4a:	bne.n	14d40 <CRT_handleSIGSEGV@@Base+0x1e4>
   14d4c:	ldr	r2, [pc, #104]	; (14db8 <CRT_handleSIGSEGV@@Base+0x25c>)
   14d4e:	ldr	r3, [pc, #92]	; (14dac <CRT_handleSIGSEGV@@Base+0x250>)
   14d50:	add	r2, pc
   14d52:	ldr	r3, [r2, r3]
   14d54:	ldr	r2, [r3, #0]
   14d56:	ldr	r3, [sp, #348]	; 0x15c
   14d58:	eors	r2, r3
   14d5a:	bne.n	14d9e <CRT_handleSIGSEGV@@Base+0x242>
   14d5c:	mov	r0, r7
   14d5e:	add	sp, #356	; 0x164
   14d60:	vpop	{d8}
   14d64:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d68:	mov	r0, r7
   14d6a:	blx	6c6c <closedir@plt>
   14d6e:	cmp	r4, #0
   14d70:	bne.n	14c9e <CRT_handleSIGSEGV@@Base+0x142>
   14d72:	movs	r7, #0
   14d74:	b.n	14d4c <CRT_handleSIGSEGV@@Base+0x1f0>
   14d76:	ldr.w	r8, [sp, #36]	; 0x24
   14d7a:	ldr	r4, [sp, #28]
   14d7c:	b.n	14d40 <CRT_handleSIGSEGV@@Base+0x1e4>
   14d7e:	mov	r0, r4
   14d80:	ldr.w	r8, [sp, #36]	; 0x24
   14d84:	blx	6b30 <fclose@plt>
   14d88:	ldr	r4, [sp, #28]
   14d8a:	b.n	14d40 <CRT_handleSIGSEGV@@Base+0x1e4>
   14d8c:	movs	r0, #1
   14d8e:	blx	6730 <curs_set@plt>
   14d92:	blx	6c48 <endwin@plt+0x4>
   14d96:	movs	r1, #0
   14d98:	movs	r0, #1
   14d9a:	blx	683c <err@plt>
   14d9e:	blx	67d0 <__stack_chk_fail@plt>
   14da2:	nop
   14da4:	cmp	lr, r9
   14da6:	movs	r0, r0
   14da8:	str	r4, [r5, r3]
   14daa:	movs	r1, r0
   14dac:	lsls	r0, r0, #9
   14dae:	movs	r0, r0
   14db0:	cmp	r6, r6
   14db2:	movs	r0, r0
   14db4:	cmp	r7, #54	; 0x36
   14db6:	movs	r0, r0
   14db8:	ldr	r7, [pc, #752]	; (150ac <CRT_handleSIGSEGV@@Base+0x550>)
   14dba:	movs	r1, r0
   14dbc:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14dc0:	mov	fp, r1
   14dc2:	vpush	{d8}
   14dc6:	mov	r2, r0
   14dc8:	ldr	r1, [pc, #692]	; (15080 <CRT_handleSIGSEGV@@Base+0x524>)
   14dca:	movs	r4, #0
   14dcc:	ldr	r3, [pc, #692]	; (15084 <CRT_handleSIGSEGV@@Base+0x528>)
   14dce:	movs	r5, #0
   14dd0:	add	r1, pc
   14dd2:	subw	sp, sp, #1124	; 0x464
   14dd6:	str	r0, [sp, #24]
   14dd8:	ldr	r0, [pc, #684]	; (15088 <CRT_handleSIGSEGV@@Base+0x52c>)
   14dda:	ldr	r3, [r1, r3]
   14ddc:	add	r0, pc
   14dde:	ldr	r3, [r3, #0]
   14de0:	str.w	r3, [sp, #1116]	; 0x45c
   14de4:	mov.w	r3, #0
   14de8:	movs	r3, #2
   14dea:	strd	r4, r5, [r2]
   14dee:	str.w	r3, [fp]
   14df2:	blx	68f4 <opendir@plt>
   14df6:	cmp	r0, #0
   14df8:	beq.n	14eba <CRT_handleSIGSEGV@@Base+0x35e>
   14dfa:	ldr	r2, [pc, #656]	; (1508c <CRT_handleSIGSEGV@@Base+0x530>)
   14dfc:	mov	r5, r0
   14dfe:	ldr	r3, [pc, #656]	; (15090 <CRT_handleSIGSEGV@@Base+0x534>)
   14e00:	add	r2, pc
   14e02:	add	r3, pc
   14e04:	str	r3, [sp, #8]
   14e06:	vmov	s16, r2
   14e0a:	movs	r3, #0
   14e0c:	str	r3, [sp, #28]
   14e0e:	str	r3, [sp, #12]
   14e10:	mov	r0, r5
   14e12:	blx	6b60 <readdir@plt>
   14e16:	cmp	r0, #0
   14e18:	beq.n	14ea2 <CRT_handleSIGSEGV@@Base+0x346>
   14e1a:	ldrb	r3, [r0, #11]
   14e1c:	add.w	r2, r0, #11
   14e20:	cmp	r3, #66	; 0x42
   14e22:	beq.n	14eda <CRT_handleSIGSEGV@@Base+0x37e>
   14e24:	cmp	r3, #65	; 0x41
   14e26:	bne.n	14e10 <CRT_handleSIGSEGV@@Base+0x2b4>
   14e28:	ldr.w	r3, [fp]
   14e2c:	cmp	r3, #2
   14e2e:	bne.n	14e10 <CRT_handleSIGSEGV@@Base+0x2b4>
   14e30:	str	r2, [sp, #4]
   14e32:	add	r4, sp, #40	; 0x28
   14e34:	ldr	r2, [sp, #8]
   14e36:	movs	r3, #50	; 0x32
   14e38:	mov	r1, r3
   14e3a:	mov	r0, r4
   14e3c:	str	r2, [sp, #0]
   14e3e:	movs	r2, #1
   14e40:	blx	6c78 <__snprintf_chk@plt>
   14e44:	cmp	r0, #49	; 0x31
   14e46:	bhi.w	1505a <CRT_handleSIGSEGV@@Base+0x4fe>
   14e4a:	mov	r0, r4
   14e4c:	movs	r1, #0
   14e4e:	blx	69a8 <open@plt>
   14e52:	adds	r3, r0, #1
   14e54:	mov	r4, r0
   14e56:	beq.w	15034 <CRT_handleSIGSEGV@@Base+0x4d8>
   14e5a:	add	r6, sp, #92	; 0x5c
   14e5c:	mov.w	r3, #0
   14e60:	strh	r3, [r6, #0]
   14e62:	movs	r2, #1
   14e64:	mov	r1, r6
   14e66:	mov	r0, r4
   14e68:	blx	6724 <read@plt>
   14e6c:	adds	r0, #1
   14e6e:	bne.n	14e7a <CRT_handleSIGSEGV@@Base+0x31e>
   14e70:	blx	6a48 <__errno_location@plt>
   14e74:	ldr	r3, [r0, #0]
   14e76:	cmp	r3, #4
   14e78:	beq.n	14e62 <CRT_handleSIGSEGV@@Base+0x306>
   14e7a:	mov	r0, r4
   14e7c:	blx	6c60 <close@plt>
   14e80:	ldrb	r3, [r6, #0]
   14e82:	cmp	r3, #48	; 0x30
   14e84:	itt	eq
   14e86:	moveq	r3, #0
   14e88:	streq.w	r3, [fp]
   14e8c:	beq.n	14e10 <CRT_handleSIGSEGV@@Base+0x2b4>
   14e8e:	cmp	r3, #49	; 0x31
   14e90:	mov	r0, r5
   14e92:	itt	eq
   14e94:	moveq	r3, #1
   14e96:	streq.w	r3, [fp]
   14e9a:	blx	6b60 <readdir@plt>
   14e9e:	cmp	r0, #0
   14ea0:	bne.n	14e1a <CRT_handleSIGSEGV@@Base+0x2be>
   14ea2:	mov	r0, r5
   14ea4:	blx	6c6c <closedir@plt>
   14ea8:	ldr	r3, [sp, #12]
   14eaa:	vldr	d5, [pc, #452]	; 15070 <CRT_handleSIGSEGV@@Base+0x514>
   14eae:	cmp	r3, #0
   14eb0:	bne.w	14ffe <CRT_handleSIGSEGV@@Base+0x4a2>
   14eb4:	ldr	r3, [sp, #24]
   14eb6:	vstr	d5, [r3]
   14eba:	ldr	r2, [pc, #472]	; (15094 <CRT_handleSIGSEGV@@Base+0x538>)
   14ebc:	ldr	r3, [pc, #452]	; (15084 <CRT_handleSIGSEGV@@Base+0x528>)
   14ebe:	add	r2, pc
   14ec0:	ldr	r3, [r2, r3]
   14ec2:	ldr	r2, [r3, #0]
   14ec4:	ldr.w	r3, [sp, #1116]	; 0x45c
   14ec8:	eors	r2, r3
   14eca:	bne.w	1506c <CRT_handleSIGSEGV@@Base+0x510>
   14ece:	addw	sp, sp, #1124	; 0x464
   14ed2:	vpop	{d8}
   14ed6:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14eda:	ldrb	r3, [r0, #12]
   14edc:	cmp	r3, #65	; 0x41
   14ede:	bne.n	14e10 <CRT_handleSIGSEGV@@Base+0x2b4>
   14ee0:	ldrb	r3, [r0, #13]
   14ee2:	cmp	r3, #84	; 0x54
   14ee4:	bne.n	14e10 <CRT_handleSIGSEGV@@Base+0x2b4>
   14ee6:	ldr	r4, [pc, #432]	; (15098 <CRT_handleSIGSEGV@@Base+0x53c>)
   14ee8:	add	r6, sp, #40	; 0x28
   14eea:	movs	r3, #50	; 0x32
   14eec:	str	r2, [sp, #4]
   14eee:	add	r4, pc
   14ef0:	mov	r0, r6
   14ef2:	mov	r1, r3
   14ef4:	movs	r2, #1
   14ef6:	str	r4, [sp, #0]
   14ef8:	blx	6c78 <__snprintf_chk@plt>
   14efc:	cmp	r0, #49	; 0x31
   14efe:	bhi.w	1505a <CRT_handleSIGSEGV@@Base+0x4fe>
   14f02:	movs	r1, #0
   14f04:	mov	r0, r6
   14f06:	blx	69a8 <open@plt>
   14f0a:	adds	r1, r0, #1
   14f0c:	mov	r7, r0
   14f0e:	beq.w	15034 <CRT_handleSIGSEGV@@Base+0x4d8>
   14f12:	add	r6, sp, #92	; 0x5c
   14f14:	mov.w	r8, #0
   14f18:	movw	r9, #1023	; 0x3ff
   14f1c:	mov	sl, r6
   14f1e:	mov	r2, r9
   14f20:	mov	r1, sl
   14f22:	mov	r0, r7
   14f24:	blx	6724 <read@plt>
   14f28:	adds	r2, r0, #1
   14f2a:	beq.n	15022 <CRT_handleSIGSEGV@@Base+0x4c6>
   14f2c:	cmp	r0, #0
   14f2e:	ittt	gt
   14f30:	addgt	sl, r0
   14f32:	subgt.w	r9, r9, r0
   14f36:	addgt	r8, r0
   14f38:	clz	r0, r0
   14f3c:	lsrs	r0, r0, #5
   14f3e:	cmp.w	r9, #0
   14f42:	it	eq
   14f44:	moveq	r0, #1
   14f46:	cmp	r0, #0
   14f48:	beq.n	14f1e <CRT_handleSIGSEGV@@Base+0x3c2>
   14f4a:	mov	r4, r0
   14f4c:	mov	r0, r7
   14f4e:	blx	6c60 <close@plt>
   14f52:	cmp.w	r8, #0
   14f56:	ble.n	15034 <CRT_handleSIGSEGV@@Base+0x4d8>
   14f58:	ldr.w	sl, [pc, #320]	; 1509c <CRT_handleSIGSEGV@@Base+0x540>
   14f5c:	mov.w	r2, #0
   14f60:	strb.w	r2, [r6, r8]
   14f64:	movs	r3, #0
   14f66:	ldr.w	r8, [pc, #312]	; 150a0 <CRT_handleSIGSEGV@@Base+0x544>
   14f6a:	add	r7, sp, #36	; 0x24
   14f6c:	str	r3, [sp, #20]
   14f6e:	add	sl, pc
   14f70:	str	r3, [sp, #16]
   14f72:	add	r8, pc
   14f74:	mov	r3, fp
   14f76:	mov	fp, r4
   14f78:	mov	r4, r3
   14f7a:	str	r6, [r7, #0]
   14f7c:	mov	r1, r8
   14f7e:	mov	r0, r7
   14f80:	blx	6984 <strsep@plt>
   14f84:	mov	r6, r0
   14f86:	cmp	r0, #0
   14f88:	beq.n	15050 <CRT_handleSIGSEGV@@Base+0x4f4>
   14f8a:	vmov	r1, s16
   14f8e:	movs	r2, #13
   14f90:	blx	6c2c <strncmp@plt>
   14f94:	cmp	r0, #0
   14f96:	bne.n	14f7c <CRT_handleSIGSEGV@@Base+0x420>
   14f98:	add.w	r9, r6, #13
   14f9c:	movs	r2, #7
   14f9e:	mov	r1, sl
   14fa0:	mov	r0, r9
   14fa2:	blx	6c2c <strncmp@plt>
   14fa6:	cbz	r0, 14fb8 <CRT_handleSIGSEGV@@Base+0x45c>
   14fa8:	ldr	r1, [pc, #248]	; (150a4 <CRT_handleSIGSEGV@@Base+0x548>)
   14faa:	mov	r0, r9
   14fac:	movs	r2, #7
   14fae:	add	r1, pc
   14fb0:	blx	6c2c <strncmp@plt>
   14fb4:	cmp	r0, #0
   14fb6:	bne.n	14f7c <CRT_handleSIGSEGV@@Base+0x420>
   14fb8:	ldr	r3, [sp, #16]
   14fba:	adds	r6, #20
   14fbc:	cbnz	r3, 14fce <CRT_handleSIGSEGV@@Base+0x472>
   14fbe:	ldr	r1, [pc, #232]	; (150a8 <CRT_handleSIGSEGV@@Base+0x54c>)
   14fc0:	movs	r2, #5
   14fc2:	mov	r0, r6
   14fc4:	add	r1, pc
   14fc6:	blx	6c2c <strncmp@plt>
   14fca:	cmp	r0, #0
   14fcc:	beq.n	1503c <CRT_handleSIGSEGV@@Base+0x4e0>
   14fce:	ldr	r3, [sp, #20]
   14fd0:	cmp	r3, #0
   14fd2:	bne.n	14f7c <CRT_handleSIGSEGV@@Base+0x420>
   14fd4:	ldr	r1, [pc, #212]	; (150ac <CRT_handleSIGSEGV@@Base+0x550>)
   14fd6:	movs	r2, #4
   14fd8:	mov	r0, r6
   14fda:	add	r1, pc
   14fdc:	blx	6c2c <strncmp@plt>
   14fe0:	cmp	r0, #0
   14fe2:	bne.n	14f7c <CRT_handleSIGSEGV@@Base+0x420>
   14fe4:	ldr	r1, [sp, #20]
   14fe6:	adds	r0, r6, #4
   14fe8:	movs	r2, #10
   14fea:	blx	66cc <strtol@plt>
   14fee:	ldr	r3, [sp, #28]
   14ff0:	add	r3, r0
   14ff2:	str	r3, [sp, #28]
   14ff4:	ldr	r3, [sp, #16]
   14ff6:	cbnz	r3, 15050 <CRT_handleSIGSEGV@@Base+0x4f4>
   14ff8:	str.w	fp, [sp, #20]
   14ffc:	b.n	14f7c <CRT_handleSIGSEGV@@Base+0x420>
   14ffe:	vldr	s15, [sp, #28]
   15002:	ldr	r3, [sp, #24]
   15004:	vldr	d6, [pc, #112]	; 15078 <CRT_handleSIGSEGV@@Base+0x51c>
   15008:	vcvt.f64.u32	d7, s15
   1500c:	vmul.f64	d7, d7, d6
   15010:	vldr	s13, [sp, #12]
   15014:	vcvt.f64.u32	d6, s13
   15018:	vdiv.f64	d5, d7, d6
   1501c:	vstr	d5, [r3]
   15020:	b.n	14eba <CRT_handleSIGSEGV@@Base+0x35e>
   15022:	blx	6a48 <__errno_location@plt>
   15026:	ldr	r3, [r0, #0]
   15028:	cmp	r3, #4
   1502a:	beq.w	14f1e <CRT_handleSIGSEGV@@Base+0x3c2>
   1502e:	mov	r0, r7
   15030:	blx	6c60 <close@plt>
   15034:	mov	r0, r5
   15036:	blx	6c6c <closedir@plt>
   1503a:	b.n	14eba <CRT_handleSIGSEGV@@Base+0x35e>
   1503c:	ldr	r1, [sp, #16]
   1503e:	adds	r0, r6, #5
   15040:	movs	r2, #10
   15042:	blx	66cc <strtol@plt>
   15046:	ldr	r3, [sp, #12]
   15048:	add	r3, r0
   1504a:	str	r3, [sp, #12]
   1504c:	ldr	r3, [sp, #20]
   1504e:	cbz	r3, 15054 <CRT_handleSIGSEGV@@Base+0x4f8>
   15050:	mov	fp, r4
   15052:	b.n	14e10 <CRT_handleSIGSEGV@@Base+0x2b4>
   15054:	str.w	fp, [sp, #16]
   15058:	b.n	14f7c <CRT_handleSIGSEGV@@Base+0x420>
   1505a:	movs	r0, #1
   1505c:	blx	6730 <curs_set@plt>
   15060:	blx	6c48 <endwin@plt+0x4>
   15064:	movs	r1, #0
   15066:	movs	r0, #1
   15068:	blx	683c <err@plt>
   1506c:	blx	67d0 <__stack_chk_fail@plt>
	...
   1507c:	movs	r0, r0
   1507e:	eors	r1, r3
   15080:	ldr	r7, [pc, #240]	; (15174 <Battery_getData@@Base+0xc4>)
   15082:	movs	r1, r0
   15084:	lsls	r0, r0, #9
   15086:	movs	r0, r0
   15088:	add	r0, r4
   1508a:	movs	r0, r0
   1508c:	add	r0, r7
   1508e:	movs	r0, r0
   15090:	add	r6, ip
   15092:	movs	r0, r0
   15094:	ldr	r6, [pc, #312]	; (151d0 <Battery_getData@@Base+0x120>)
   15096:	movs	r1, r0
   15098:	orrs	r6, r4
   1509a:	movs	r0, r0
   1509c:	cmn	r2, r3
   1509e:	movs	r0, r0
   150a0:	adds	r2, r0, r2
   150a2:	movs	r0, r0
   150a4:	cmp	r2, r4
   150a6:	movs	r0, r0
   150a8:	cmp	r4, r2
   150aa:	movs	r0, r0
   150ac:	cmp	r6, r0
	...

000150b0 <Battery_getData@@Base>:
   150b0:	ldr	r2, [pc, #524]	; (152c0 <Battery_getData@@Base+0x210>)
   150b2:	ldr	r3, [pc, #528]	; (152c4 <Battery_getData@@Base+0x214>)
   150b4:	add	r2, pc
   150b6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   150ba:	mov	r4, r0
   150bc:	ldr	r3, [r2, r3]
   150be:	sub	sp, #84	; 0x54
   150c0:	movs	r0, #0
   150c2:	mov	r6, r1
   150c4:	ldr	r3, [r3, #0]
   150c6:	str	r3, [sp, #76]	; 0x4c
   150c8:	mov.w	r3, #0
   150cc:	blx	67ac <time@plt>
   150d0:	ldr	r2, [pc, #500]	; (152c8 <Battery_getData@@Base+0x218>)
   150d2:	add	r2, pc
   150d4:	ldr	r3, [r2, #0]
   150d6:	adds	r3, #9
   150d8:	cmp	r3, r0
   150da:	bge.w	151fc <Battery_getData@@Base+0x14c>
   150de:	ldr	r3, [r2, #20]
   150e0:	mov	r5, r0
   150e2:	cbz	r3, 1512e <Battery_getData@@Base+0x7e>
   150e4:	cmp	r3, #1
   150e6:	beq.w	15272 <Battery_getData@@Base+0x1c2>
   150ea:	cmp	r3, #2
   150ec:	beq.n	151ec <Battery_getData@@Base+0x13c>
   150ee:	vldr	d7, [r4]
   150f2:	ldr	r2, [r6, #0]
   150f4:	vldr	d6, [pc, #440]	; 152b0 <Battery_getData@@Base+0x200>
   150f8:	vcmpe.f64	d7, d6
   150fc:	vmrs	APSR_nzcv, fpscr
   15100:	ble.n	1510a <Battery_getData@@Base+0x5a>
   15102:	vstr	d6, [r4]
   15106:	vmov.f64	d7, d6
   1510a:	ldr	r3, [pc, #448]	; (152cc <Battery_getData@@Base+0x21c>)
   1510c:	add	r3, pc
   1510e:	vstr	d7, [r3, #8]
   15112:	str	r2, [r3, #16]
   15114:	str	r5, [r3, #0]
   15116:	ldr	r2, [pc, #440]	; (152d0 <Battery_getData@@Base+0x220>)
   15118:	ldr	r3, [pc, #424]	; (152c4 <Battery_getData@@Base+0x214>)
   1511a:	add	r2, pc
   1511c:	ldr	r3, [r2, r3]
   1511e:	ldr	r2, [r3, #0]
   15120:	ldr	r3, [sp, #76]	; 0x4c
   15122:	eors	r2, r3
   15124:	bne.w	152a8 <Battery_getData@@Base+0x1f8>
   15128:	add	sp, #84	; 0x54
   1512a:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1512e:	ldr	r0, [pc, #420]	; (152d4 <Battery_getData@@Base+0x224>)
   15130:	movs	r2, #4
   15132:	movs	r1, #3
   15134:	add	r0, pc
   15136:	bl	14c08 <CRT_handleSIGSEGV@@Base+0xac>
   1513a:	str	r0, [sp, #16]
   1513c:	cmp	r0, #0
   1513e:	bne.n	1520a <Battery_getData@@Base+0x15a>
   15140:	vldr	d5, [pc, #372]	; 152b8 <Battery_getData@@Base+0x208>
   15144:	ldr	r0, [pc, #400]	; (152d8 <Battery_getData@@Base+0x228>)
   15146:	vstr	d5, [r4]
   1514a:	add	r0, pc
   1514c:	blx	68f4 <opendir@plt>
   15150:	mov	r8, r0
   15152:	cmp	r0, #0
   15154:	beq.w	15290 <Battery_getData@@Base+0x1e0>
   15158:	ldr	r3, [pc, #384]	; (152dc <Battery_getData@@Base+0x22c>)
   1515a:	mov.w	r9, #2
   1515e:	ldr.w	sl, [pc, #384]	; 152e0 <Battery_getData@@Base+0x230>
   15162:	add	r3, pc
   15164:	str	r3, [sp, #16]
   15166:	add	sl, pc
   15168:	ldr	r3, [pc, #376]	; (152e4 <Battery_getData@@Base+0x234>)
   1516a:	add	r3, pc
   1516c:	str	r3, [sp, #20]
   1516e:	mov	r0, r8
   15170:	blx	6b60 <readdir@plt>
   15174:	cmp	r0, #0
   15176:	beq.n	1524a <Battery_getData@@Base+0x19a>
   15178:	ldrb	r3, [r0, #11]
   1517a:	cmp	r3, #65	; 0x41
   1517c:	bne.n	1516e <Battery_getData@@Base+0xbe>
   1517e:	ldr	r2, [sp, #16]
   15180:	adds	r0, #11
   15182:	add	r7, sp, #24
   15184:	movs	r3, #50	; 0x32
   15186:	mov	r1, r3
   15188:	strd	r2, r0, [sp, #4]
   1518c:	mov	r0, r7
   1518e:	ldr	r2, [sp, #20]
   15190:	str	r2, [sp, #0]
   15192:	movs	r2, #1
   15194:	blx	6c78 <__snprintf_chk@plt>
   15198:	cmp	r0, #49	; 0x31
   1519a:	bhi.n	15296 <Battery_getData@@Base+0x1e6>
   1519c:	mov	r0, r7
   1519e:	mov	r1, sl
   151a0:	blx	6718 <fopen@plt>
   151a4:	mov	fp, r0
   151a6:	cmp	r0, #0
   151a8:	beq.n	1523a <Battery_getData@@Base+0x18a>
   151aa:	bl	ec0c <String_readLine@@Base>
   151ae:	mov	r7, r0
   151b0:	mov	r0, fp
   151b2:	blx	6b30 <fclose@plt>
   151b6:	cmp	r7, #0
   151b8:	beq.n	1516e <Battery_getData@@Base+0xbe>
   151ba:	movs	r1, #2
   151bc:	mov	r0, r7
   151be:	bl	eb48 <String_getToken@@Base>
   151c2:	mov	r9, r0
   151c4:	mov	r0, r7
   151c6:	blx	6758 <free@plt+0x4>
   151ca:	ldr	r1, [pc, #284]	; (152e8 <Battery_getData@@Base+0x238>)
   151cc:	mov	r0, r9
   151ce:	add	r1, pc
   151d0:	blx	66b4 <strcmp@plt+0x4>
   151d4:	cmp	r0, #0
   151d6:	beq.n	15240 <Battery_getData@@Base+0x190>
   151d8:	mov	r0, r9
   151da:	mov.w	r9, #0
   151de:	blx	6758 <free@plt+0x4>
   151e2:	b.n	1516e <Battery_getData@@Base+0xbe>
   151e4:	ldr	r3, [pc, #260]	; (152ec <Battery_getData@@Base+0x23c>)
   151e6:	movs	r2, #2
   151e8:	add	r3, pc
   151ea:	str	r2, [r3, #20]
   151ec:	vmov.f64	d7, #240	; 0xbf800000 -1.0
   151f0:	movs	r3, #2
   151f2:	mov	r2, r3
   151f4:	vstr	d7, [r4]
   151f8:	str	r3, [r6, #0]
   151fa:	b.n	1510a <Battery_getData@@Base+0x5a>
   151fc:	ldrd	r0, r1, [r2, #8]
   15200:	ldr	r3, [r2, #16]
   15202:	strd	r0, r1, [r4]
   15206:	str	r3, [r6, #0]
   15208:	b.n	15116 <Battery_getData@@Base+0x66>
   1520a:	ldr	r0, [pc, #228]	; (152f0 <Battery_getData@@Base+0x240>)
   1520c:	movs	r2, #3
   1520e:	movs	r1, #5
   15210:	add	r0, pc
   15212:	bl	14c08 <CRT_handleSIGSEGV@@Base+0xac>
   15216:	str	r0, [sp, #20]
   15218:	cmp	r0, #0
   1521a:	beq.n	15140 <Battery_getData@@Base+0x90>
   1521c:	vmov	s15, r0
   15220:	vcvt.f64.u32	d6, s15
   15224:	vldr	d7, [pc, #136]	; 152b0 <Battery_getData@@Base+0x200>
   15228:	vmul.f64	d6, d6, d7
   1522c:	vldr	s15, [sp, #16]
   15230:	vcvt.f64.u32	d7, s15
   15234:	vdiv.f64	d5, d6, d7
   15238:	b.n	15144 <Battery_getData@@Base+0x94>
   1523a:	mov.w	r9, #2
   1523e:	b.n	1516e <Battery_getData@@Base+0xbe>
   15240:	mov	r0, r9
   15242:	mov.w	r9, #1
   15246:	blx	6758 <free@plt+0x4>
   1524a:	mov	r0, r8
   1524c:	blx	6c6c <closedir@plt>
   15250:	vldr	d7, [r4]
   15254:	str.w	r9, [r6]
   15258:	vcmp.f64	d7, #0.0
   1525c:	vmrs	APSR_nzcv, fpscr
   15260:	beq.n	1526a <Battery_getData@@Base+0x1ba>
   15262:	ldr	r3, [pc, #144]	; (152f4 <Battery_getData@@Base+0x244>)
   15264:	add	r3, pc
   15266:	ldr	r3, [r3, #20]
   15268:	b.n	150e4 <Battery_getData@@Base+0x34>
   1526a:	ldr	r3, [pc, #140]	; (152f8 <Battery_getData@@Base+0x248>)
   1526c:	movs	r2, #1
   1526e:	add	r3, pc
   15270:	str	r2, [r3, #20]
   15272:	mov	r1, r6
   15274:	mov	r0, r4
   15276:	bl	14dbc <CRT_handleSIGSEGV@@Base+0x260>
   1527a:	vldr	d7, [r4]
   1527e:	vcmp.f64	d7, #0.0
   15282:	vmrs	APSR_nzcv, fpscr
   15286:	beq.n	151e4 <Battery_getData@@Base+0x134>
   15288:	ldr	r3, [pc, #112]	; (152fc <Battery_getData@@Base+0x24c>)
   1528a:	add	r3, pc
   1528c:	ldr	r3, [r3, #20]
   1528e:	b.n	150ea <Battery_getData@@Base+0x3a>
   15290:	mov.w	r9, #2
   15294:	b.n	15250 <Battery_getData@@Base+0x1a0>
   15296:	movs	r0, #1
   15298:	blx	6730 <curs_set@plt>
   1529c:	blx	6c48 <endwin@plt+0x4>
   152a0:	movs	r1, #0
   152a2:	movs	r0, #1
   152a4:	blx	683c <err@plt>
   152a8:	blx	67d0 <__stack_chk_fail@plt>
   152ac:	nop.w
   152b0:	movs	r0, r0
   152b2:	movs	r0, r0
   152b4:	movs	r0, r0
   152b6:	eors	r1, r3
	...
   152c0:	ldr	r4, [pc, #352]	; (15424 <Battery_getData@@Base+0x374>)
   152c2:	movs	r1, r0
   152c4:	lsls	r0, r0, #9
   152c6:	movs	r0, r0
   152c8:	strb	r2, [r1, #2]
   152ca:	movs	r1, r0
   152cc:	strb	r0, [r2, #1]
   152ce:	movs	r1, r0
   152d0:	ldr	r3, [pc, #968]	; (1569c <Battery_getData@@Base+0x5ec>)
   152d2:	movs	r1, r0
   152d4:	adcs	r0, r3
   152d6:	movs	r0, r0
   152d8:	adcs	r2, r2
   152da:	movs	r0, r0
   152dc:	asrs	r2, r7
   152de:	movs	r0, r0
   152e0:	cmp	r2, #134	; 0x86
   152e2:	movs	r0, r0
   152e4:	adcs	r2, r1
   152e6:	movs	r0, r0
   152e8:	lsrs	r2, r6
   152ea:	movs	r0, r0
   152ec:	ldr	r4, [r6, #116]	; 0x74
   152ee:	movs	r1, r0
   152f0:	lsls	r4, r0
   152f2:	movs	r0, r0
   152f4:	ldr	r0, [r7, #108]	; 0x6c
   152f6:	movs	r1, r0
   152f8:	ldr	r6, [r5, #108]	; 0x6c
   152fa:	movs	r1, r0
   152fc:	ldr	r2, [r2, #108]	; 0x6c
   152fe:	movs	r1, r0
   15300:	subs	r2, r1, #1
   15302:	it	eq
   15304:	bxeq	lr
   15306:	bcc.w	15552 <Battery_getData@@Base+0x4a2>
   1530a:	cmp	r0, r1
   1530c:	bls.w	1553c <Battery_getData@@Base+0x48c>
   15310:	tst	r1, r2
   15312:	beq.w	15544 <Battery_getData@@Base+0x494>
   15316:	clz	r3, r0
   1531a:	clz	r2, r1
   1531e:	sub.w	r3, r2, r3
   15322:	rsb	r3, r3, #31
   15326:	add	r2, pc, #16	; (adr r2, 15338 <Battery_getData@@Base+0x288>)
   15328:	add.w	r3, r2, r3, lsl #4
   1532c:	mov.w	r2, #0
   15330:	mov	pc, r3
   15332:	nop
   15334:	nop.w
   15338:	cmp.w	r0, r1, lsl #31
   1533c:	nop
   1533e:	adc.w	r2, r2, r2
   15342:	it	cs
   15344:	subcs.w	r0, r0, r1, lsl #31
   15348:	cmp.w	r0, r1, lsl #30
   1534c:	nop
   1534e:	adc.w	r2, r2, r2
   15352:	it	cs
   15354:	subcs.w	r0, r0, r1, lsl #30
   15358:	cmp.w	r0, r1, lsl #29
   1535c:	nop
   1535e:	adc.w	r2, r2, r2
   15362:	it	cs
   15364:	subcs.w	r0, r0, r1, lsl #29
   15368:	cmp.w	r0, r1, lsl #28
   1536c:	nop
   1536e:	adc.w	r2, r2, r2
   15372:	it	cs
   15374:	subcs.w	r0, r0, r1, lsl #28
   15378:	cmp.w	r0, r1, lsl #27
   1537c:	nop
   1537e:	adc.w	r2, r2, r2
   15382:	it	cs
   15384:	subcs.w	r0, r0, r1, lsl #27
   15388:	cmp.w	r0, r1, lsl #26
   1538c:	nop
   1538e:	adc.w	r2, r2, r2
   15392:	it	cs
   15394:	subcs.w	r0, r0, r1, lsl #26
   15398:	cmp.w	r0, r1, lsl #25
   1539c:	nop
   1539e:	adc.w	r2, r2, r2
   153a2:	it	cs
   153a4:	subcs.w	r0, r0, r1, lsl #25
   153a8:	cmp.w	r0, r1, lsl #24
   153ac:	nop
   153ae:	adc.w	r2, r2, r2
   153b2:	it	cs
   153b4:	subcs.w	r0, r0, r1, lsl #24
   153b8:	cmp.w	r0, r1, lsl #23
   153bc:	nop
   153be:	adc.w	r2, r2, r2
   153c2:	it	cs
   153c4:	subcs.w	r0, r0, r1, lsl #23
   153c8:	cmp.w	r0, r1, lsl #22
   153cc:	nop
   153ce:	adc.w	r2, r2, r2
   153d2:	it	cs
   153d4:	subcs.w	r0, r0, r1, lsl #22
   153d8:	cmp.w	r0, r1, lsl #21
   153dc:	nop
   153de:	adc.w	r2, r2, r2
   153e2:	it	cs
   153e4:	subcs.w	r0, r0, r1, lsl #21
   153e8:	cmp.w	r0, r1, lsl #20
   153ec:	nop
   153ee:	adc.w	r2, r2, r2
   153f2:	it	cs
   153f4:	subcs.w	r0, r0, r1, lsl #20
   153f8:	cmp.w	r0, r1, lsl #19
   153fc:	nop
   153fe:	adc.w	r2, r2, r2
   15402:	it	cs
   15404:	subcs.w	r0, r0, r1, lsl #19
   15408:	cmp.w	r0, r1, lsl #18
   1540c:	nop
   1540e:	adc.w	r2, r2, r2
   15412:	it	cs
   15414:	subcs.w	r0, r0, r1, lsl #18
   15418:	cmp.w	r0, r1, lsl #17
   1541c:	nop
   1541e:	adc.w	r2, r2, r2
   15422:	it	cs
   15424:	subcs.w	r0, r0, r1, lsl #17
   15428:	cmp.w	r0, r1, lsl #16
   1542c:	nop
   1542e:	adc.w	r2, r2, r2
   15432:	it	cs
   15434:	subcs.w	r0, r0, r1, lsl #16
   15438:	cmp.w	r0, r1, lsl #15
   1543c:	nop
   1543e:	adc.w	r2, r2, r2
   15442:	it	cs
   15444:	subcs.w	r0, r0, r1, lsl #15
   15448:	cmp.w	r0, r1, lsl #14
   1544c:	nop
   1544e:	adc.w	r2, r2, r2
   15452:	it	cs
   15454:	subcs.w	r0, r0, r1, lsl #14
   15458:	cmp.w	r0, r1, lsl #13
   1545c:	nop
   1545e:	adc.w	r2, r2, r2
   15462:	it	cs
   15464:	subcs.w	r0, r0, r1, lsl #13
   15468:	cmp.w	r0, r1, lsl #12
   1546c:	nop
   1546e:	adc.w	r2, r2, r2
   15472:	it	cs
   15474:	subcs.w	r0, r0, r1, lsl #12
   15478:	cmp.w	r0, r1, lsl #11
   1547c:	nop
   1547e:	adc.w	r2, r2, r2
   15482:	it	cs
   15484:	subcs.w	r0, r0, r1, lsl #11
   15488:	cmp.w	r0, r1, lsl #10
   1548c:	nop
   1548e:	adc.w	r2, r2, r2
   15492:	it	cs
   15494:	subcs.w	r0, r0, r1, lsl #10
   15498:	cmp.w	r0, r1, lsl #9
   1549c:	nop
   1549e:	adc.w	r2, r2, r2
   154a2:	it	cs
   154a4:	subcs.w	r0, r0, r1, lsl #9
   154a8:	cmp.w	r0, r1, lsl #8
   154ac:	nop
   154ae:	adc.w	r2, r2, r2
   154b2:	it	cs
   154b4:	subcs.w	r0, r0, r1, lsl #8
   154b8:	cmp.w	r0, r1, lsl #7
   154bc:	nop
   154be:	adc.w	r2, r2, r2
   154c2:	it	cs
   154c4:	subcs.w	r0, r0, r1, lsl #7
   154c8:	cmp.w	r0, r1, lsl #6
   154cc:	nop
   154ce:	adc.w	r2, r2, r2
   154d2:	it	cs
   154d4:	subcs.w	r0, r0, r1, lsl #6
   154d8:	cmp.w	r0, r1, lsl #5
   154dc:	nop
   154de:	adc.w	r2, r2, r2
   154e2:	it	cs
   154e4:	subcs.w	r0, r0, r1, lsl #5
   154e8:	cmp.w	r0, r1, lsl #4
   154ec:	nop
   154ee:	adc.w	r2, r2, r2
   154f2:	it	cs
   154f4:	subcs.w	r0, r0, r1, lsl #4
   154f8:	cmp.w	r0, r1, lsl #3
   154fc:	nop
   154fe:	adc.w	r2, r2, r2
   15502:	it	cs
   15504:	subcs.w	r0, r0, r1, lsl #3
   15508:	cmp.w	r0, r1, lsl #2
   1550c:	nop
   1550e:	adc.w	r2, r2, r2
   15512:	it	cs
   15514:	subcs.w	r0, r0, r1, lsl #2
   15518:	cmp.w	r0, r1, lsl #1
   1551c:	nop
   1551e:	adc.w	r2, r2, r2
   15522:	it	cs
   15524:	subcs.w	r0, r0, r1, lsl #1
   15528:	cmp.w	r0, r1
   1552c:	nop
   1552e:	adc.w	r2, r2, r2
   15532:	it	cs
   15534:	subcs.w	r0, r0, r1
   15538:	mov	r0, r2
   1553a:	bx	lr
   1553c:	ite	eq
   1553e:	moveq	r0, #1
   15540:	movne	r0, #0
   15542:	bx	lr
   15544:	clz	r2, r1
   15548:	rsb	r2, r2, #31
   1554c:	lsr.w	r0, r0, r2
   15550:	bx	lr
   15552:	cbz	r0, 15558 <Battery_getData@@Base+0x4a8>
   15554:	mov.w	r0, #4294967295	; 0xffffffff
   15558:	b.w	15c70 <Battery_getData@@Base+0xbc0>
   1555c:	cmp	r1, #0
   1555e:	beq.n	15552 <Battery_getData@@Base+0x4a2>
   15560:	stmdb	sp!, {r0, r1, lr}
   15564:	bl	15300 <Battery_getData@@Base+0x250>
   15568:	ldmia.w	sp!, {r1, r2, lr}
   1556c:	mul.w	r3, r2, r0
   15570:	sub.w	r1, r1, r3
   15574:	bx	lr
   15576:	nop
   15578:	cmp	r1, #0
   1557a:	beq.w	157fa <Battery_getData@@Base+0x74a>
   1557e:	eor.w	ip, r0, r1
   15582:	it	mi
   15584:	negmi	r1, r1
   15586:	subs	r2, r1, #1
   15588:	beq.w	157ca <Battery_getData@@Base+0x71a>
   1558c:	movs	r3, r0
   1558e:	it	mi
   15590:	negmi	r3, r0
   15592:	cmp	r3, r1
   15594:	bls.w	157d4 <Battery_getData@@Base+0x724>
   15598:	tst	r1, r2
   1559a:	beq.w	157e4 <Battery_getData@@Base+0x734>
   1559e:	clz	r2, r3
   155a2:	clz	r0, r1
   155a6:	sub.w	r2, r0, r2
   155aa:	rsb	r2, r2, #31
   155ae:	add	r0, pc, #16	; (adr r0, 155c0 <Battery_getData@@Base+0x510>)
   155b0:	add.w	r2, r0, r2, lsl #4
   155b4:	mov.w	r0, #0
   155b8:	mov	pc, r2
   155ba:	nop
   155bc:	nop.w
   155c0:	cmp.w	r3, r1, lsl #31
   155c4:	nop
   155c6:	adc.w	r0, r0, r0
   155ca:	it	cs
   155cc:	subcs.w	r3, r3, r1, lsl #31
   155d0:	cmp.w	r3, r1, lsl #30
   155d4:	nop
   155d6:	adc.w	r0, r0, r0
   155da:	it	cs
   155dc:	subcs.w	r3, r3, r1, lsl #30
   155e0:	cmp.w	r3, r1, lsl #29
   155e4:	nop
   155e6:	adc.w	r0, r0, r0
   155ea:	it	cs
   155ec:	subcs.w	r3, r3, r1, lsl #29
   155f0:	cmp.w	r3, r1, lsl #28
   155f4:	nop
   155f6:	adc.w	r0, r0, r0
   155fa:	it	cs
   155fc:	subcs.w	r3, r3, r1, lsl #28
   15600:	cmp.w	r3, r1, lsl #27
   15604:	nop
   15606:	adc.w	r0, r0, r0
   1560a:	it	cs
   1560c:	subcs.w	r3, r3, r1, lsl #27
   15610:	cmp.w	r3, r1, lsl #26
   15614:	nop
   15616:	adc.w	r0, r0, r0
   1561a:	it	cs
   1561c:	subcs.w	r3, r3, r1, lsl #26
   15620:	cmp.w	r3, r1, lsl #25
   15624:	nop
   15626:	adc.w	r0, r0, r0
   1562a:	it	cs
   1562c:	subcs.w	r3, r3, r1, lsl #25
   15630:	cmp.w	r3, r1, lsl #24
   15634:	nop
   15636:	adc.w	r0, r0, r0
   1563a:	it	cs
   1563c:	subcs.w	r3, r3, r1, lsl #24
   15640:	cmp.w	r3, r1, lsl #23
   15644:	nop
   15646:	adc.w	r0, r0, r0
   1564a:	it	cs
   1564c:	subcs.w	r3, r3, r1, lsl #23
   15650:	cmp.w	r3, r1, lsl #22
   15654:	nop
   15656:	adc.w	r0, r0, r0
   1565a:	it	cs
   1565c:	subcs.w	r3, r3, r1, lsl #22
   15660:	cmp.w	r3, r1, lsl #21
   15664:	nop
   15666:	adc.w	r0, r0, r0
   1566a:	it	cs
   1566c:	subcs.w	r3, r3, r1, lsl #21
   15670:	cmp.w	r3, r1, lsl #20
   15674:	nop
   15676:	adc.w	r0, r0, r0
   1567a:	it	cs
   1567c:	subcs.w	r3, r3, r1, lsl #20
   15680:	cmp.w	r3, r1, lsl #19
   15684:	nop
   15686:	adc.w	r0, r0, r0
   1568a:	it	cs
   1568c:	subcs.w	r3, r3, r1, lsl #19
   15690:	cmp.w	r3, r1, lsl #18
   15694:	nop
   15696:	adc.w	r0, r0, r0
   1569a:	it	cs
   1569c:	subcs.w	r3, r3, r1, lsl #18
   156a0:	cmp.w	r3, r1, lsl #17
   156a4:	nop
   156a6:	adc.w	r0, r0, r0
   156aa:	it	cs
   156ac:	subcs.w	r3, r3, r1, lsl #17
   156b0:	cmp.w	r3, r1, lsl #16
   156b4:	nop
   156b6:	adc.w	r0, r0, r0
   156ba:	it	cs
   156bc:	subcs.w	r3, r3, r1, lsl #16
   156c0:	cmp.w	r3, r1, lsl #15
   156c4:	nop
   156c6:	adc.w	r0, r0, r0
   156ca:	it	cs
   156cc:	subcs.w	r3, r3, r1, lsl #15
   156d0:	cmp.w	r3, r1, lsl #14
   156d4:	nop
   156d6:	adc.w	r0, r0, r0
   156da:	it	cs
   156dc:	subcs.w	r3, r3, r1, lsl #14
   156e0:	cmp.w	r3, r1, lsl #13
   156e4:	nop
   156e6:	adc.w	r0, r0, r0
   156ea:	it	cs
   156ec:	subcs.w	r3, r3, r1, lsl #13
   156f0:	cmp.w	r3, r1, lsl #12
   156f4:	nop
   156f6:	adc.w	r0, r0, r0
   156fa:	it	cs
   156fc:	subcs.w	r3, r3, r1, lsl #12
   15700:	cmp.w	r3, r1, lsl #11
   15704:	nop
   15706:	adc.w	r0, r0, r0
   1570a:	it	cs
   1570c:	subcs.w	r3, r3, r1, lsl #11
   15710:	cmp.w	r3, r1, lsl #10
   15714:	nop
   15716:	adc.w	r0, r0, r0
   1571a:	it	cs
   1571c:	subcs.w	r3, r3, r1, lsl #10
   15720:	cmp.w	r3, r1, lsl #9
   15724:	nop
   15726:	adc.w	r0, r0, r0
   1572a:	it	cs
   1572c:	subcs.w	r3, r3, r1, lsl #9
   15730:	cmp.w	r3, r1, lsl #8
   15734:	nop
   15736:	adc.w	r0, r0, r0
   1573a:	it	cs
   1573c:	subcs.w	r3, r3, r1, lsl #8
   15740:	cmp.w	r3, r1, lsl #7
   15744:	nop
   15746:	adc.w	r0, r0, r0
   1574a:	it	cs
   1574c:	subcs.w	r3, r3, r1, lsl #7
   15750:	cmp.w	r3, r1, lsl #6
   15754:	nop
   15756:	adc.w	r0, r0, r0
   1575a:	it	cs
   1575c:	subcs.w	r3, r3, r1, lsl #6
   15760:	cmp.w	r3, r1, lsl #5
   15764:	nop
   15766:	adc.w	r0, r0, r0
   1576a:	it	cs
   1576c:	subcs.w	r3, r3, r1, lsl #5
   15770:	cmp.w	r3, r1, lsl #4
   15774:	nop
   15776:	adc.w	r0, r0, r0
   1577a:	it	cs
   1577c:	subcs.w	r3, r3, r1, lsl #4
   15780:	cmp.w	r3, r1, lsl #3
   15784:	nop
   15786:	adc.w	r0, r0, r0
   1578a:	it	cs
   1578c:	subcs.w	r3, r3, r1, lsl #3
   15790:	cmp.w	r3, r1, lsl #2
   15794:	nop
   15796:	adc.w	r0, r0, r0
   1579a:	it	cs
   1579c:	subcs.w	r3, r3, r1, lsl #2
   157a0:	cmp.w	r3, r1, lsl #1
   157a4:	nop
   157a6:	adc.w	r0, r0, r0
   157aa:	it	cs
   157ac:	subcs.w	r3, r3, r1, lsl #1
   157b0:	cmp.w	r3, r1
   157b4:	nop
   157b6:	adc.w	r0, r0, r0
   157ba:	it	cs
   157bc:	subcs.w	r3, r3, r1
   157c0:	cmp.w	ip, #0
   157c4:	it	mi
   157c6:	negmi	r0, r0
   157c8:	bx	lr
   157ca:	teq	ip, r0
   157ce:	it	mi
   157d0:	negmi	r0, r0
   157d2:	bx	lr
   157d4:	it	cc
   157d6:	movcc	r0, #0
   157d8:	itt	eq
   157da:	moveq.w	r0, ip, asr #31
   157de:	orreq.w	r0, r0, #1
   157e2:	bx	lr
   157e4:	clz	r2, r1
   157e8:	rsb	r2, r2, #31
   157ec:	cmp.w	ip, #0
   157f0:	lsr.w	r0, r3, r2
   157f4:	it	mi
   157f6:	negmi	r0, r0
   157f8:	bx	lr
   157fa:	cmp	r0, #0
   157fc:	it	gt
   157fe:	mvngt.w	r0, #2147483648	; 0x80000000
   15802:	it	lt
   15804:	movlt.w	r0, #2147483648	; 0x80000000
   15808:	b.w	15c70 <Battery_getData@@Base+0xbc0>
   1580c:	cmp	r1, #0
   1580e:	beq.n	157fa <Battery_getData@@Base+0x74a>
   15810:	stmdb	sp!, {r0, r1, lr}
   15814:	bl	1557e <Battery_getData@@Base+0x4ce>
   15818:	ldmia.w	sp!, {r1, r2, lr}
   1581c:	mul.w	r3, r2, r0
   15820:	sub.w	r1, r1, r3
   15824:	bx	lr
   15826:	nop
   15828:	eor.w	r1, r1, #2147483648	; 0x80000000
   1582c:	b.n	15834 <Battery_getData@@Base+0x784>
   1582e:	nop
   15830:	eor.w	r3, r3, #2147483648	; 0x80000000
   15834:	push	{r4, r5, lr}
   15836:	mov.w	r4, r1, lsl #1
   1583a:	mov.w	r5, r3, lsl #1
   1583e:	teq	r4, r5
   15842:	it	eq
   15844:	teqeq	r0, r2
   15848:	itttt	ne
   1584a:	orrsne.w	ip, r4, r0
   1584e:	orrsne.w	ip, r5, r2
   15852:	mvnsne.w	ip, r4, asr #21
   15856:	mvnsne.w	ip, r5, asr #21
   1585a:	beq.w	15a22 <Battery_getData@@Base+0x972>
   1585e:	mov.w	r4, r4, lsr #21
   15862:	rsbs	r5, r4, r5, lsr #21
   15866:	it	lt
   15868:	neglt	r5, r5
   1586a:	ble.n	15886 <Battery_getData@@Base+0x7d6>
   1586c:	add	r4, r5
   1586e:	eor.w	r2, r0, r2
   15872:	eor.w	r3, r1, r3
   15876:	eor.w	r0, r2, r0
   1587a:	eor.w	r1, r3, r1
   1587e:	eor.w	r2, r0, r2
   15882:	eor.w	r3, r1, r3
   15886:	cmp	r5, #54	; 0x36
   15888:	it	hi
   1588a:	pophi	{r4, r5, pc}
   1588c:	tst.w	r1, #2147483648	; 0x80000000
   15890:	mov.w	r1, r1, lsl #12
   15894:	mov.w	ip, #1048576	; 0x100000
   15898:	orr.w	r1, ip, r1, lsr #12
   1589c:	beq.n	158a4 <Battery_getData@@Base+0x7f4>
   1589e:	negs	r0, r0
   158a0:	sbc.w	r1, r1, r1, lsl #1
   158a4:	tst.w	r3, #2147483648	; 0x80000000
   158a8:	mov.w	r3, r3, lsl #12
   158ac:	orr.w	r3, ip, r3, lsr #12
   158b0:	beq.n	158b8 <Battery_getData@@Base+0x808>
   158b2:	negs	r2, r2
   158b4:	sbc.w	r3, r3, r3, lsl #1
   158b8:	teq	r4, r5
   158bc:	beq.w	15a0e <Battery_getData@@Base+0x95e>
   158c0:	sub.w	r4, r4, #1
   158c4:	rsbs	lr, r5, #32
   158c8:	blt.n	158e6 <Battery_getData@@Base+0x836>
   158ca:	lsl.w	ip, r2, lr
   158ce:	lsr.w	r2, r2, r5
   158d2:	adds	r0, r0, r2
   158d4:	adc.w	r1, r1, #0
   158d8:	lsl.w	r2, r3, lr
   158dc:	adds	r0, r0, r2
   158de:	asr.w	r3, r3, r5
   158e2:	adcs	r1, r3
   158e4:	b.n	15904 <Battery_getData@@Base+0x854>
   158e6:	sub.w	r5, r5, #32
   158ea:	add.w	lr, lr, #32
   158ee:	cmp	r2, #1
   158f0:	lsl.w	ip, r3, lr
   158f4:	it	cs
   158f6:	orrcs.w	ip, ip, #2
   158fa:	asr.w	r3, r3, r5
   158fe:	adds	r0, r0, r3
   15900:	adcs.w	r1, r1, r3, asr #31
   15904:	and.w	r5, r1, #2147483648	; 0x80000000
   15908:	bpl.n	1591a <Battery_getData@@Base+0x86a>
   1590a:	mov.w	lr, #0
   1590e:	rsbs	ip, ip, #0
   15912:	sbcs.w	r0, lr, r0
   15916:	sbc.w	r1, lr, r1
   1591a:	cmp.w	r1, #1048576	; 0x100000
   1591e:	bcc.n	15958 <Battery_getData@@Base+0x8a8>
   15920:	cmp.w	r1, #2097152	; 0x200000
   15924:	bcc.n	15940 <Battery_getData@@Base+0x890>
   15926:	lsrs	r1, r1, #1
   15928:	movs.w	r0, r0, rrx
   1592c:	mov.w	ip, ip, rrx
   15930:	add.w	r4, r4, #1
   15934:	mov.w	r2, r4, lsl #21
   15938:	cmn.w	r2, #4194304	; 0x400000
   1593c:	bcs.w	15a74 <Battery_getData@@Base+0x9c4>
   15940:	cmp.w	ip, #2147483648	; 0x80000000
   15944:	it	eq
   15946:	movseq.w	ip, r0, lsr #1
   1594a:	adcs.w	r0, r0, #0
   1594e:	adc.w	r1, r1, r4, lsl #20
   15952:	orr.w	r1, r1, r5
   15956:	pop	{r4, r5, pc}
   15958:	movs.w	ip, ip, lsl #1
   1595c:	adcs	r0, r0
   1595e:	adc.w	r1, r1, r1
   15962:	subs	r4, #1
   15964:	it	cs
   15966:	cmpcs.w	r1, #1048576	; 0x100000
   1596a:	bcs.n	15940 <Battery_getData@@Base+0x890>
   1596c:	teq	r1, #0
   15970:	itt	eq
   15972:	moveq	r1, r0
   15974:	moveq	r0, #0
   15976:	clz	r3, r1
   1597a:	it	eq
   1597c:	addeq	r3, #32
   1597e:	sub.w	r3, r3, #11
   15982:	subs.w	r2, r3, #32
   15986:	bge.n	159a2 <Battery_getData@@Base+0x8f2>
   15988:	adds	r2, #12
   1598a:	ble.n	1599e <Battery_getData@@Base+0x8ee>
   1598c:	add.w	ip, r2, #20
   15990:	rsb	r2, r2, #12
   15994:	lsl.w	r0, r1, ip
   15998:	lsr.w	r1, r1, r2
   1599c:	b.n	159b8 <Battery_getData@@Base+0x908>
   1599e:	add.w	r2, r2, #20
   159a2:	it	le
   159a4:	rsble	ip, r2, #32
   159a8:	lsl.w	r1, r1, r2
   159ac:	lsr.w	ip, r0, ip
   159b0:	itt	le
   159b2:	orrle.w	r1, r1, ip
   159b6:	lslle	r0, r2
   159b8:	subs	r4, r4, r3
   159ba:	ittt	ge
   159bc:	addge.w	r1, r1, r4, lsl #20
   159c0:	orrge	r1, r5
   159c2:	popge	{r4, r5, pc}
   159c4:	mvn.w	r4, r4
   159c8:	subs	r4, #31
   159ca:	bge.n	15a06 <Battery_getData@@Base+0x956>
   159cc:	adds	r4, #12
   159ce:	bgt.n	159ee <Battery_getData@@Base+0x93e>
   159d0:	add.w	r4, r4, #20
   159d4:	rsb	r2, r4, #32
   159d8:	lsr.w	r0, r0, r4
   159dc:	lsl.w	r3, r1, r2
   159e0:	orr.w	r0, r0, r3
   159e4:	lsr.w	r3, r1, r4
   159e8:	orr.w	r1, r5, r3
   159ec:	pop	{r4, r5, pc}
   159ee:	rsb	r4, r4, #12
   159f2:	rsb	r2, r4, #32
   159f6:	lsr.w	r0, r0, r2
   159fa:	lsl.w	r3, r1, r4
   159fe:	orr.w	r0, r0, r3
   15a02:	mov	r1, r5
   15a04:	pop	{r4, r5, pc}
   15a06:	lsr.w	r0, r1, r4
   15a0a:	mov	r1, r5
   15a0c:	pop	{r4, r5, pc}
   15a0e:	teq	r4, #0
   15a12:	eor.w	r3, r3, #1048576	; 0x100000
   15a16:	itte	eq
   15a18:	eoreq.w	r1, r1, #1048576	; 0x100000
   15a1c:	addeq	r4, #1
   15a1e:	subne	r5, #1
   15a20:	b.n	158c0 <Battery_getData@@Base+0x810>
   15a22:	mvns.w	ip, r4, asr #21
   15a26:	it	ne
   15a28:	mvnsne.w	ip, r5, asr #21
   15a2c:	beq.n	15a82 <Battery_getData@@Base+0x9d2>
   15a2e:	teq	r4, r5
   15a32:	it	eq
   15a34:	teqeq	r0, r2
   15a38:	beq.n	15a46 <Battery_getData@@Base+0x996>
   15a3a:	orrs.w	ip, r4, r0
   15a3e:	itt	eq
   15a40:	moveq	r1, r3
   15a42:	moveq	r0, r2
   15a44:	pop	{r4, r5, pc}
   15a46:	teq	r1, r3
   15a4a:	ittt	ne
   15a4c:	movne	r1, #0
   15a4e:	movne	r0, #0
   15a50:	popne	{r4, r5, pc}
   15a52:	movs.w	ip, r4, lsr #21
   15a56:	bne.n	15a64 <Battery_getData@@Base+0x9b4>
   15a58:	lsls	r0, r0, #1
   15a5a:	adcs	r1, r1
   15a5c:	it	cs
   15a5e:	orrcs.w	r1, r1, #2147483648	; 0x80000000
   15a62:	pop	{r4, r5, pc}
   15a64:	adds.w	r4, r4, #4194304	; 0x400000
   15a68:	itt	cc
   15a6a:	addcc.w	r1, r1, #1048576	; 0x100000
   15a6e:	popcc	{r4, r5, pc}
   15a70:	and.w	r5, r1, #2147483648	; 0x80000000
   15a74:	orr.w	r1, r5, #2130706432	; 0x7f000000
   15a78:	orr.w	r1, r1, #15728640	; 0xf00000
   15a7c:	mov.w	r0, #0
   15a80:	pop	{r4, r5, pc}
   15a82:	mvns.w	ip, r4, asr #21
   15a86:	itte	ne
   15a88:	movne	r1, r3
   15a8a:	movne	r0, r2
   15a8c:	mvnseq.w	ip, r5, asr #21
   15a90:	itt	ne
   15a92:	movne	r3, r1
   15a94:	movne	r2, r0
   15a96:	orrs.w	r4, r0, r1, lsl #12
   15a9a:	itte	eq
   15a9c:	orrseq.w	r5, r2, r3, lsl #12
   15aa0:	teqeq	r1, r3
   15aa4:	orrne.w	r1, r1, #524288	; 0x80000
   15aa8:	pop	{r4, r5, pc}
   15aaa:	nop
   15aac:	teq	r0, #0
   15ab0:	itt	eq
   15ab2:	moveq	r1, #0
   15ab4:	bxeq	lr
   15ab6:	push	{r4, r5, lr}
   15ab8:	mov.w	r4, #1024	; 0x400
   15abc:	add.w	r4, r4, #50	; 0x32
   15ac0:	mov.w	r5, #0
   15ac4:	mov.w	r1, #0
   15ac8:	b.n	1596c <Battery_getData@@Base+0x8bc>
   15aca:	nop
   15acc:	teq	r0, #0
   15ad0:	itt	eq
   15ad2:	moveq	r1, #0
   15ad4:	bxeq	lr
   15ad6:	push	{r4, r5, lr}
   15ad8:	mov.w	r4, #1024	; 0x400
   15adc:	add.w	r4, r4, #50	; 0x32
   15ae0:	ands.w	r5, r0, #2147483648	; 0x80000000
   15ae4:	it	mi
   15ae6:	negmi	r0, r0
   15ae8:	mov.w	r1, #0
   15aec:	b.n	1596c <Battery_getData@@Base+0x8bc>
   15aee:	nop
   15af0:	lsls	r2, r0, #1
   15af2:	mov.w	r1, r2, asr #3
   15af6:	mov.w	r1, r1, rrx
   15afa:	mov.w	r0, r2, lsl #28
   15afe:	itttt	ne
   15b00:	andsne.w	r3, r2, #4278190080	; 0xff000000
   15b04:	teqne	r3, #4278190080	; 0xff000000
   15b08:	eorne.w	r1, r1, #939524096	; 0x38000000
   15b0c:	bxne	lr
   15b0e:	bics.w	r2, r2, #4278190080	; 0xff000000
   15b12:	it	eq
   15b14:	bxeq	lr
   15b16:	teq	r3, #4278190080	; 0xff000000
   15b1a:	itt	eq
   15b1c:	orreq.w	r1, r1, #524288	; 0x80000
   15b20:	bxeq	lr
   15b22:	push	{r4, r5, lr}
   15b24:	mov.w	r4, #896	; 0x380
   15b28:	and.w	r5, r1, #2147483648	; 0x80000000
   15b2c:	bic.w	r1, r1, #2147483648	; 0x80000000
   15b30:	b.n	1596c <Battery_getData@@Base+0x8bc>
   15b32:	nop
   15b34:	orrs.w	r2, r0, r1
   15b38:	it	eq
   15b3a:	bxeq	lr
   15b3c:	push	{r4, r5, lr}
   15b3e:	mov.w	r5, #0
   15b42:	b.n	15b5a <Battery_getData@@Base+0xaaa>
   15b44:	orrs.w	r2, r0, r1
   15b48:	it	eq
   15b4a:	bxeq	lr
   15b4c:	push	{r4, r5, lr}
   15b4e:	ands.w	r5, r1, #2147483648	; 0x80000000
   15b52:	bpl.n	15b5a <Battery_getData@@Base+0xaaa>
   15b54:	negs	r0, r0
   15b56:	sbc.w	r1, r1, r1, lsl #1
   15b5a:	mov.w	r4, #1024	; 0x400
   15b5e:	add.w	r4, r4, #50	; 0x32
   15b62:	movs.w	ip, r1, lsr #22
   15b66:	beq.w	1591a <Battery_getData@@Base+0x86a>
   15b6a:	mov.w	r2, #3
   15b6e:	movs.w	ip, ip, lsr #3
   15b72:	it	ne
   15b74:	addne	r2, #3
   15b76:	movs.w	ip, ip, lsr #3
   15b7a:	it	ne
   15b7c:	addne	r2, #3
   15b7e:	add.w	r2, r2, ip, lsr #3
   15b82:	rsb	r3, r2, #32
   15b86:	lsl.w	ip, r0, r3
   15b8a:	lsr.w	r0, r0, r2
   15b8e:	lsl.w	lr, r1, r3
   15b92:	orr.w	r0, r0, lr
   15b96:	lsr.w	r1, r1, r2
   15b9a:	add	r4, r2
   15b9c:	b.n	1591a <Battery_getData@@Base+0x86a>
   15b9e:	nop
   15ba0:	cbnz	r3, 15bc2 <Battery_getData@@Base+0xb12>
   15ba2:	cbnz	r2, 15bc2 <Battery_getData@@Base+0xb12>
   15ba4:	cmp	r1, #0
   15ba6:	ittt	lt
   15ba8:	movlt	r0, #0
   15baa:	movlt.w	r1, #2147483648	; 0x80000000
   15bae:	blt.n	15bbe <Battery_getData@@Base+0xb0e>
   15bb0:	it	eq
   15bb2:	cmpeq	r0, #0
   15bb4:	itt	ne
   15bb6:	mvnne.w	r1, #2147483648	; 0x80000000
   15bba:	movne.w	r0, #4294967295	; 0xffffffff
   15bbe:	b.w	15c70 <Battery_getData@@Base+0xbc0>
   15bc2:	sub.w	ip, sp, #8
   15bc6:	strd	ip, lr, [sp, #-16]!
   15bca:	cmp	r1, #0
   15bcc:	blt.n	15be2 <Battery_getData@@Base+0xb32>
   15bce:	cmp	r3, #0
   15bd0:	blt.n	15c08 <Battery_getData@@Base+0xb58>
   15bd2:	bl	15cf0 <Battery_getData@@Base+0xc40>
   15bd6:	ldr.w	lr, [sp, #4]
   15bda:	ldrd	r2, r3, [sp, #8]
   15bde:	add	sp, #16
   15be0:	bx	lr
   15be2:	negs	r0, r0
   15be4:	sbc.w	r1, r1, r1, lsl #1
   15be8:	cmp	r3, #0
   15bea:	blt.n	15c24 <Battery_getData@@Base+0xb74>
   15bec:	bl	15cf0 <Battery_getData@@Base+0xc40>
   15bf0:	ldr.w	lr, [sp, #4]
   15bf4:	ldrd	r2, r3, [sp, #8]
   15bf8:	add	sp, #16
   15bfa:	negs	r0, r0
   15bfc:	sbc.w	r1, r1, r1, lsl #1
   15c00:	negs	r2, r2
   15c02:	sbc.w	r3, r3, r3, lsl #1
   15c06:	bx	lr
   15c08:	negs	r2, r2
   15c0a:	sbc.w	r3, r3, r3, lsl #1
   15c0e:	bl	15cf0 <Battery_getData@@Base+0xc40>
   15c12:	ldr.w	lr, [sp, #4]
   15c16:	ldrd	r2, r3, [sp, #8]
   15c1a:	add	sp, #16
   15c1c:	negs	r0, r0
   15c1e:	sbc.w	r1, r1, r1, lsl #1
   15c22:	bx	lr
   15c24:	negs	r2, r2
   15c26:	sbc.w	r3, r3, r3, lsl #1
   15c2a:	bl	15cf0 <Battery_getData@@Base+0xc40>
   15c2e:	ldr.w	lr, [sp, #4]
   15c32:	ldrd	r2, r3, [sp, #8]
   15c36:	add	sp, #16
   15c38:	negs	r2, r2
   15c3a:	sbc.w	r3, r3, r3, lsl #1
   15c3e:	bx	lr
   15c40:	cbnz	r3, 15c58 <Battery_getData@@Base+0xba8>
   15c42:	cbnz	r2, 15c58 <Battery_getData@@Base+0xba8>
   15c44:	cmp	r1, #0
   15c46:	it	eq
   15c48:	cmpeq	r0, #0
   15c4a:	itt	ne
   15c4c:	movne.w	r1, #4294967295	; 0xffffffff
   15c50:	movne.w	r0, #4294967295	; 0xffffffff
   15c54:	b.w	15c70 <Battery_getData@@Base+0xbc0>
   15c58:	sub.w	ip, sp, #8
   15c5c:	strd	ip, lr, [sp, #-16]!
   15c60:	bl	15cf0 <Battery_getData@@Base+0xc40>
   15c64:	ldr.w	lr, [sp, #4]
   15c68:	ldrd	r2, r3, [sp, #8]
   15c6c:	add	sp, #16
   15c6e:	bx	lr
   15c70:	push	{r1, lr}
   15c72:	mov.w	r0, #8
   15c76:	blx	6674 <raise@plt>
   15c7a:	pop	{r1, pc}
   15c7c:	mov	r2, r0
   15c7e:	push	{r3, lr}
   15c80:	mov	r3, r1
   15c82:	vmov	d7, r2, r3
   15c86:	vcmpe.f64	d7, #0.0
   15c8a:	vmrs	APSR_nzcv, fpscr
   15c8e:	bmi.n	15c98 <Battery_getData@@Base+0xbe8>
   15c90:	ldmia.w	sp!, {r3, lr}
   15c94:	b.w	15cb0 <Battery_getData@@Base+0xc00>
   15c98:	vneg.f64	d7, d7
   15c9c:	vmov	r0, r1, d7
   15ca0:	bl	15cb0 <Battery_getData@@Base+0xc00>
   15ca4:	negs	r0, r0
   15ca6:	sbc.w	r1, r1, r1, lsl #1
   15caa:	pop	{r3, pc}
   15cac:	movs	r0, r0
   15cae:	movs	r0, r0
   15cb0:	vldr	d6, [pc, #44]	; 15ce0 <Battery_getData@@Base+0xc30>
   15cb4:	vmov	d7, r0, r1
   15cb8:	vmul.f64	d6, d7, d6
   15cbc:	vldr	d5, [pc, #40]	; 15ce8 <Battery_getData@@Base+0xc38>
   15cc0:	vcvt.u32.f64	s12, d6
   15cc4:	vcvt.f64.u32	d4, s12
   15cc8:	vmov	r1, s12
   15ccc:	vmls.f64	d7, d4, d5
   15cd0:	vcvt.u32.f64	s15, d7
   15cd4:	vmov	r0, s15
   15cd8:	bx	lr
   15cda:	nop
   15cdc:	nop.w
   15ce0:	movs	r0, r0
   15ce2:	movs	r0, r0
   15ce4:	movs	r0, r0
   15ce6:	subs	r5, #240	; 0xf0
   15ce8:	movs	r0, r0
   15cea:	movs	r0, r0
   15cec:	movs	r0, r0
   15cee:	rors	r0, r6
   15cf0:	cmp	r1, r3
   15cf2:	it	eq
   15cf4:	cmpeq	r0, r2
   15cf6:	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cfa:	mov	r4, r0
   15cfc:	it	cc
   15cfe:	movcc	r0, #0
   15d00:	mov	r5, r1
   15d02:	ldr.w	ip, [sp, #36]	; 0x24
   15d06:	it	cc
   15d08:	movcc	r1, r0
   15d0a:	bcc.n	15de4 <Battery_getData@@Base+0xd34>
   15d0c:	mov	r8, r2
   15d0e:	mov	r9, r3
   15d10:	clz	r2, r3
   15d14:	cmp	r3, #0
   15d16:	beq.n	15dfa <Battery_getData@@Base+0xd4a>
   15d18:	clz	r3, r5
   15d1c:	cmp	r5, #0
   15d1e:	beq.n	15df2 <Battery_getData@@Base+0xd42>
   15d20:	subs	r2, r2, r3
   15d22:	sub.w	lr, r2, #32
   15d26:	lsl.w	fp, r9, r2
   15d2a:	lsl.w	r3, r8, lr
   15d2e:	rsb	r7, r2, #32
   15d32:	orr.w	fp, fp, r3
   15d36:	lsr.w	r3, r8, r7
   15d3a:	orr.w	fp, fp, r3
   15d3e:	lsl.w	sl, r8, r2
   15d42:	cmp	r5, fp
   15d44:	it	eq
   15d46:	cmpeq	r4, sl
   15d48:	itt	cc
   15d4a:	movcc	r0, #0
   15d4c:	movcc	r1, r0
   15d4e:	bcc.n	15d66 <Battery_getData@@Base+0xcb6>
   15d50:	movs	r0, #1
   15d52:	subs.w	r4, r4, sl
   15d56:	lsl.w	r1, r0, lr
   15d5a:	lsr.w	r3, r0, r7
   15d5e:	sbc.w	r5, r5, fp
   15d62:	orrs	r1, r3
   15d64:	lsls	r0, r2
   15d66:	cmp	r2, #0
   15d68:	beq.n	15de4 <Battery_getData@@Base+0xd34>
   15d6a:	mov.w	r8, sl, lsr #1
   15d6e:	mov.w	r9, fp, lsr #1
   15d72:	orr.w	r8, r8, fp, lsl #31
   15d76:	mov	r6, r2
   15d78:	b.n	15d92 <Battery_getData@@Base+0xce2>
   15d7a:	subs.w	r3, r4, r8
   15d7e:	sbc.w	sl, r5, r9
   15d82:	adds	r3, r3, r3
   15d84:	adc.w	sl, sl, sl
   15d88:	adds	r4, r3, #1
   15d8a:	adc.w	r5, sl, #0
   15d8e:	subs	r6, #1
   15d90:	beq.n	15da2 <Battery_getData@@Base+0xcf2>
   15d92:	cmp	r5, r9
   15d94:	it	eq
   15d96:	cmpeq	r4, r8
   15d98:	bcs.n	15d7a <Battery_getData@@Base+0xcca>
   15d9a:	adds	r4, r4, r4
   15d9c:	adcs	r5, r5
   15d9e:	subs	r6, #1
   15da0:	bne.n	15d92 <Battery_getData@@Base+0xce2>
   15da2:	lsl.w	r7, r5, r7
   15da6:	lsr.w	r3, r4, r2
   15daa:	orrs	r3, r7
   15dac:	lsr.w	lr, r5, lr
   15db0:	adds	r0, r0, r4
   15db2:	lsr.w	r8, r5, r2
   15db6:	orr.w	r4, r3, lr
   15dba:	sub.w	r7, r2, #32
   15dbe:	rsb	r6, r2, #32
   15dc2:	lsl.w	r3, r8, r2
   15dc6:	lsl.w	r7, r4, r7
   15dca:	lsl.w	r2, r4, r2
   15dce:	orr.w	r3, r3, r7
   15dd2:	lsr.w	r6, r4, r6
   15dd6:	adc.w	r1, r5, r1
   15dda:	orrs	r3, r6
   15ddc:	subs	r0, r0, r2
   15dde:	mov	r5, r8
   15de0:	sbc.w	r1, r1, r3
   15de4:	cmp.w	ip, #0
   15de8:	beq.n	15dee <Battery_getData@@Base+0xd3e>
   15dea:	strd	r4, r5, [ip]
   15dee:	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15df2:	clz	r3, r4
   15df6:	adds	r3, #32
   15df8:	b.n	15d20 <Battery_getData@@Base+0xc70>
   15dfa:	clz	r2, r8
   15dfe:	clz	r3, r5
   15e02:	adds	r2, #32
   15e04:	cmp	r5, #0
   15e06:	bne.n	15d20 <Battery_getData@@Base+0xc70>
   15e08:	b.n	15df2 <Battery_getData@@Base+0xd42>
   15e0a:	nop

00015e0c <__libc_csu_init@@Base>:
   15e0c:	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15e10:	mov	r7, r0
   15e12:	ldr	r6, [pc, #48]	; (15e44 <__libc_csu_init@@Base+0x38>)
   15e14:	mov	r8, r1
   15e16:	ldr	r5, [pc, #48]	; (15e48 <__libc_csu_init@@Base+0x3c>)
   15e18:	mov	r9, r2
   15e1a:	add	r6, pc
   15e1c:	blx	65fc <start_color@plt-0x20>
   15e20:	add	r5, pc
   15e22:	subs	r6, r6, r5
   15e24:	asrs	r6, r6, #2
   15e26:	beq.n	15e3e <__libc_csu_init@@Base+0x32>
   15e28:	subs	r5, #4
   15e2a:	movs	r4, #0
   15e2c:	ldr.w	r3, [r5, #4]!
   15e30:	adds	r4, #1
   15e32:	mov	r2, r9
   15e34:	mov	r1, r8
   15e36:	mov	r0, r7
   15e38:	blx	r3
   15e3a:	cmp	r6, r4
   15e3c:	bne.n	15e2c <__libc_csu_init@@Base+0x20>
   15e3e:	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   15e42:	nop
   15e44:	adds	r7, #178	; 0xb2
   15e46:	movs	r1, r0
   15e48:	adds	r7, #168	; 0xa8
   15e4a:	movs	r1, r0

00015e4c <__libc_csu_fini@@Base>:
   15e4c:	bx	lr
   15e4e:	nop
   15e50:	stmia	r2!, {r1, r3, r4, r7}
   15e52:	Address 0x0000000000015e52 is out of bounds.


Disassembly of section .fini:

00015e54 <.fini>:
   15e54:	push	{r3, lr}
   15e58:	pop	{r3, pc}
