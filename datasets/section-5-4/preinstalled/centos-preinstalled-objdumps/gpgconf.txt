
centos-preinstalled/gpgconf:     file format elf32-littlearm


Disassembly of section .init:

0001185c <_init@@Base>:
   1185c:	push	{r3, lr}
   11860:	bl	125d0 <__assert_fail@plt+0x808>
   11864:	pop	{r3, pc}

Disassembly of section .plt:

00011868 <fdopen@plt-0x14>:
   11868:	push	{lr}		; (str lr, [sp, #-4]!)
   1186c:	ldr	lr, [pc, #4]	; 11878 <_init@@Base+0x1c>
   11870:	add	lr, pc, lr
   11874:	ldr	pc, [lr, #8]!
   11878:	andeq	r7, r2, r8, lsl #15

0001187c <fdopen@plt>:
   1187c:	add	ip, pc, #0, 12
   11880:	add	ip, ip, #159744	; 0x27000
   11884:	ldr	pc, [ip, #1928]!	; 0x788

00011888 <calloc@plt>:
   11888:	add	ip, pc, #0, 12
   1188c:	add	ip, ip, #159744	; 0x27000
   11890:	ldr	pc, [ip, #1920]!	; 0x780

00011894 <strstr@plt>:
   11894:	add	ip, pc, #0, 12
   11898:	add	ip, ip, #159744	; 0x27000
   1189c:	ldr	pc, [ip, #1912]!	; 0x778

000118a0 <raise@plt>:
   118a0:	add	ip, pc, #0, 12
   118a4:	add	ip, ip, #159744	; 0x27000
   118a8:	ldr	pc, [ip, #1904]!	; 0x770

000118ac <gmtime_r@plt>:
   118ac:	add	ip, pc, #0, 12
   118b0:	add	ip, ip, #159744	; 0x27000
   118b4:	ldr	pc, [ip, #1896]!	; 0x768

000118b8 <getpwnam@plt>:
   118b8:	add	ip, pc, #0, 12
   118bc:	add	ip, ip, #159744	; 0x27000
   118c0:	ldr	pc, [ip, #1888]!	; 0x760

000118c4 <iconv_close@plt>:
   118c4:	add	ip, pc, #0, 12
   118c8:	add	ip, ip, #159744	; 0x27000
   118cc:	ldr	pc, [ip, #1880]!	; 0x758

000118d0 <iconv@plt>:
   118d0:	add	ip, pc, #0, 12
   118d4:	add	ip, ip, #159744	; 0x27000
   118d8:	ldr	pc, [ip, #1872]!	; 0x750

000118dc <strcmp@plt>:
   118dc:	add	ip, pc, #0, 12
   118e0:	add	ip, ip, #159744	; 0x27000
   118e4:	ldr	pc, [ip, #1864]!	; 0x748

000118e8 <strtol@plt>:
   118e8:	add	ip, pc, #0, 12
   118ec:	add	ip, ip, #159744	; 0x27000
   118f0:	ldr	pc, [ip, #1856]!	; 0x740

000118f4 <gpg_strerror@plt>:
   118f4:	add	ip, pc, #0, 12
   118f8:	add	ip, ip, #159744	; 0x27000
   118fc:	ldr	pc, [ip, #1848]!	; 0x738

00011900 <getpwuid@plt>:
   11900:	add	ip, pc, #0, 12
   11904:	add	ip, ip, #159744	; 0x27000
   11908:	ldr	pc, [ip, #1840]!	; 0x730

0001190c <setrlimit64@plt>:
   1190c:	add	ip, pc, #0, 12
   11910:	add	ip, ip, #159744	; 0x27000
   11914:	ldr	pc, [ip, #1832]!	; 0x728

00011918 <read@plt>:
   11918:	add	ip, pc, #0, 12
   1191c:	add	ip, ip, #159744	; 0x27000
   11920:	ldr	pc, [ip, #1824]!	; 0x720

00011924 <mktime@plt>:
   11924:	add	ip, pc, #0, 12
   11928:	add	ip, ip, #159744	; 0x27000
   1192c:	ldr	pc, [ip, #1816]!	; 0x718

00011930 <fflush@plt>:
   11930:	add	ip, pc, #0, 12
   11934:	add	ip, ip, #159744	; 0x27000
   11938:	ldr	pc, [ip, #1808]!	; 0x710

0001193c <getuid@plt>:
   1193c:	add	ip, pc, #0, 12
   11940:	add	ip, ip, #159744	; 0x27000
   11944:	ldr	pc, [ip, #1800]!	; 0x708

00011948 <free@plt>:
   11948:	add	ip, pc, #0, 12
   1194c:	add	ip, ip, #159744	; 0x27000
   11950:	ldr	pc, [ip, #1792]!	; 0x700

00011954 <gpg_err_code_from_errno@plt>:
   11954:	add	ip, pc, #0, 12
   11958:	add	ip, ip, #159744	; 0x27000
   1195c:	ldr	pc, [ip, #1784]!	; 0x6f8

00011960 <ferror@plt>:
   11960:	add	ip, pc, #0, 12
   11964:	add	ip, ip, #159744	; 0x27000
   11968:	ldr	pc, [ip, #1776]!	; 0x6f0

0001196c <_exit@plt>:
   1196c:	add	ip, pc, #0, 12
   11970:	add	ip, ip, #159744	; 0x27000
   11974:	ldr	pc, [ip, #1768]!	; 0x6e8

00011978 <memcpy@plt>:
   11978:	add	ip, pc, #0, 12
   1197c:	add	ip, ip, #159744	; 0x27000
   11980:	ldr	pc, [ip, #1760]!	; 0x6e0

00011984 <__memset_chk@plt>:
   11984:	add	ip, pc, #0, 12
   11988:	add	ip, ip, #159744	; 0x27000
   1198c:	ldr	pc, [ip, #1752]!	; 0x6d8

00011990 <time@plt>:
   11990:	add	ip, pc, #0, 12
   11994:	add	ip, ip, #159744	; 0x27000
   11998:	ldr	pc, [ip, #1744]!	; 0x6d0

0001199c <_IO_getc@plt>:
   1199c:	add	ip, pc, #0, 12
   119a0:	add	ip, ip, #159744	; 0x27000
   119a4:	ldr	pc, [ip, #1736]!	; 0x6c8

000119a8 <ftell@plt>:
   119a8:	add	ip, pc, #0, 12
   119ac:	add	ip, ip, #159744	; 0x27000
   119b0:	ldr	pc, [ip, #1728]!	; 0x6c0

000119b4 <sleep@plt>:
   119b4:	add	ip, pc, #0, 12
   119b8:	add	ip, ip, #159744	; 0x27000
   119bc:	ldr	pc, [ip, #1720]!	; 0x6b8

000119c0 <stpcpy@plt>:
   119c0:	add	ip, pc, #0, 12
   119c4:	add	ip, ip, #159744	; 0x27000
   119c8:	ldr	pc, [ip, #1712]!	; 0x6b0

000119cc <dcgettext@plt>:
   119cc:	add	ip, pc, #0, 12
   119d0:	add	ip, ip, #159744	; 0x27000
   119d4:	ldr	pc, [ip, #1704]!	; 0x6a8

000119d8 <__stack_chk_fail@plt>:
   119d8:	add	ip, pc, #0, 12
   119dc:	add	ip, ip, #159744	; 0x27000
   119e0:	ldr	pc, [ip, #1696]!	; 0x6a0

000119e4 <rewind@plt>:
   119e4:	add	ip, pc, #0, 12
   119e8:	add	ip, ip, #159744	; 0x27000
   119ec:	ldr	pc, [ip, #1688]!	; 0x698

000119f0 <sysconf@plt>:
   119f0:	add	ip, pc, #0, 12
   119f4:	add	ip, ip, #159744	; 0x27000
   119f8:	ldr	pc, [ip, #1680]!	; 0x690

000119fc <unlink@plt>:
   119fc:	add	ip, pc, #0, 12
   11a00:	add	ip, ip, #159744	; 0x27000
   11a04:	ldr	pc, [ip, #1672]!	; 0x688

00011a08 <dup2@plt>:
   11a08:	add	ip, pc, #0, 12
   11a0c:	add	ip, ip, #159744	; 0x27000
   11a10:	ldr	pc, [ip, #1664]!	; 0x680

00011a14 <getrlimit64@plt>:
   11a14:	add	ip, pc, #0, 12
   11a18:	add	ip, ip, #159744	; 0x27000
   11a1c:	ldr	pc, [ip, #1656]!	; 0x678

00011a20 <realloc@plt>:
   11a20:	add	ip, pc, #0, 12
   11a24:	add	ip, ip, #159744	; 0x27000
   11a28:	ldr	pc, [ip, #1648]!	; 0x670

00011a2c <dup@plt>:
   11a2c:	add	ip, pc, #0, 12
   11a30:	add	ip, ip, #159744	; 0x27000
   11a34:	ldr	pc, [ip, #1640]!	; 0x668

00011a38 <textdomain@plt>:
   11a38:	add	ip, pc, #0, 12
   11a3c:	add	ip, ip, #159744	; 0x27000
   11a40:	ldr	pc, [ip, #1632]!	; 0x660

00011a44 <tmpfile64@plt>:
   11a44:	add	ip, pc, #0, 12
   11a48:	add	ip, ip, #159744	; 0x27000
   11a4c:	ldr	pc, [ip, #1624]!	; 0x658

00011a50 <chdir@plt>:
   11a50:	add	ip, pc, #0, 12
   11a54:	add	ip, ip, #159744	; 0x27000
   11a58:	ldr	pc, [ip, #1616]!	; 0x650

00011a5c <geteuid@plt>:
   11a5c:	add	ip, pc, #0, 12
   11a60:	add	ip, ip, #159744	; 0x27000
   11a64:	ldr	pc, [ip, #1608]!	; 0x648

00011a68 <__fxstat64@plt>:
   11a68:	add	ip, pc, #0, 12
   11a6c:	add	ip, ip, #159744	; 0x27000
   11a70:	ldr	pc, [ip, #1600]!	; 0x640

00011a74 <_IO_putc@plt>:
   11a74:	add	ip, pc, #0, 12
   11a78:	add	ip, ip, #159744	; 0x27000
   11a7c:	ldr	pc, [ip, #1592]!	; 0x638

00011a80 <fwrite@plt>:
   11a80:	add	ip, pc, #0, 12
   11a84:	add	ip, ip, #159744	; 0x27000
   11a88:	ldr	pc, [ip, #1584]!	; 0x630

00011a8c <lseek64@plt>:
   11a8c:	add	ip, pc, #0, 12
   11a90:	add	ip, ip, #159744	; 0x27000
   11a94:	ldr	pc, [ip, #1576]!	; 0x628

00011a98 <waitpid@plt>:
   11a98:	add	ip, pc, #0, 12
   11a9c:	add	ip, ip, #159744	; 0x27000
   11aa0:	ldr	pc, [ip, #1568]!	; 0x620

00011aa4 <strcpy@plt>:
   11aa4:	add	ip, pc, #0, 12
   11aa8:	add	ip, ip, #159744	; 0x27000
   11aac:	ldr	pc, [ip, #1560]!	; 0x618

00011ab0 <fread@plt>:
   11ab0:	add	ip, pc, #0, 12
   11ab4:	add	ip, ip, #159744	; 0x27000
   11ab8:	ldr	pc, [ip, #1552]!	; 0x610

00011abc <bind_textdomain_codeset@plt>:
   11abc:	add	ip, pc, #0, 12
   11ac0:	add	ip, ip, #159744	; 0x27000
   11ac4:	ldr	pc, [ip, #1544]!	; 0x608

00011ac8 <open64@plt>:
   11ac8:	add	ip, pc, #0, 12
   11acc:	add	ip, ip, #159744	; 0x27000
   11ad0:	ldr	pc, [ip, #1536]!	; 0x600

00011ad4 <getenv@plt>:
   11ad4:	add	ip, pc, #0, 12
   11ad8:	add	ip, ip, #159744	; 0x27000
   11adc:	ldr	pc, [ip, #1528]!	; 0x5f8

00011ae0 <puts@plt>:
   11ae0:	add	ip, pc, #0, 12
   11ae4:	add	ip, ip, #159744	; 0x27000
   11ae8:	ldr	pc, [ip, #1520]!	; 0x5f0

00011aec <malloc@plt>:
   11aec:	add	ip, pc, #0, 12
   11af0:	add	ip, ip, #159744	; 0x27000
   11af4:	ldr	pc, [ip, #1512]!	; 0x5e8

00011af8 <iconv_open@plt>:
   11af8:	add	ip, pc, #0, 12
   11afc:	add	ip, ip, #159744	; 0x27000
   11b00:	ldr	pc, [ip, #1504]!	; 0x5e0

00011b04 <__libc_start_main@plt>:
   11b04:	add	ip, pc, #0, 12
   11b08:	add	ip, ip, #159744	; 0x27000
   11b0c:	ldr	pc, [ip, #1496]!	; 0x5d8

00011b10 <strerror@plt>:
   11b10:	add	ip, pc, #0, 12
   11b14:	add	ip, ip, #159744	; 0x27000
   11b18:	ldr	pc, [ip, #1488]!	; 0x5d0

00011b1c <strftime@plt>:
   11b1c:	add	ip, pc, #0, 12
   11b20:	add	ip, ip, #159744	; 0x27000
   11b24:	ldr	pc, [ip, #1480]!	; 0x5c8

00011b28 <__vfprintf_chk@plt>:
   11b28:	add	ip, pc, #0, 12
   11b2c:	add	ip, ip, #159744	; 0x27000
   11b30:	ldr	pc, [ip, #1472]!	; 0x5c0

00011b34 <localtime@plt>:
   11b34:	add	ip, pc, #0, 12
   11b38:	add	ip, ip, #159744	; 0x27000
   11b3c:	ldr	pc, [ip, #1464]!	; 0x5b8

00011b40 <__ctype_tolower_loc@plt>:
   11b40:	add	ip, pc, #0, 12
   11b44:	add	ip, ip, #159744	; 0x27000
   11b48:	ldr	pc, [ip, #1456]!	; 0x5b0

00011b4c <__ctype_toupper_loc@plt>:
   11b4c:	add	ip, pc, #0, 12
   11b50:	add	ip, ip, #159744	; 0x27000
   11b54:	ldr	pc, [ip, #1448]!	; 0x5a8

00011b58 <__gmon_start__@plt>:
   11b58:	add	ip, pc, #0, 12
   11b5c:	add	ip, ip, #159744	; 0x27000
   11b60:	ldr	pc, [ip, #1440]!	; 0x5a0

00011b64 <rename@plt>:
   11b64:	add	ip, pc, #0, 12
   11b68:	add	ip, ip, #159744	; 0x27000
   11b6c:	ldr	pc, [ip, #1432]!	; 0x598

00011b70 <kill@plt>:
   11b70:	add	ip, pc, #0, 12
   11b74:	add	ip, ip, #159744	; 0x27000
   11b78:	ldr	pc, [ip, #1424]!	; 0x590

00011b7c <__ctype_b_loc@plt>:
   11b7c:	add	ip, pc, #0, 12
   11b80:	add	ip, ip, #159744	; 0x27000
   11b84:	ldr	pc, [ip, #1416]!	; 0x588

00011b88 <getpid@plt>:
   11b88:	add	ip, pc, #0, 12
   11b8c:	add	ip, ip, #159744	; 0x27000
   11b90:	ldr	pc, [ip, #1408]!	; 0x580

00011b94 <exit@plt>:
   11b94:	add	ip, pc, #0, 12
   11b98:	add	ip, ip, #159744	; 0x27000
   11b9c:	ldr	pc, [ip, #1400]!	; 0x578

00011ba0 <strtoul@plt>:
   11ba0:	add	ip, pc, #0, 12
   11ba4:	add	ip, ip, #159744	; 0x27000
   11ba8:	ldr	pc, [ip, #1392]!	; 0x570

00011bac <strlen@plt>:
   11bac:	add	ip, pc, #0, 12
   11bb0:	add	ip, ip, #159744	; 0x27000
   11bb4:	ldr	pc, [ip, #1384]!	; 0x568

00011bb8 <setsid@plt>:
   11bb8:	add	ip, pc, #0, 12
   11bbc:	add	ip, ip, #159744	; 0x27000
   11bc0:	ldr	pc, [ip, #1376]!	; 0x560

00011bc4 <strchr@plt>:
   11bc4:	add	ip, pc, #0, 12
   11bc8:	add	ip, ip, #159744	; 0x27000
   11bcc:	ldr	pc, [ip, #1368]!	; 0x558

00011bd0 <memrchr@plt>:
   11bd0:	add	ip, pc, #0, 12
   11bd4:	add	ip, ip, #159744	; 0x27000
   11bd8:	ldr	pc, [ip, #1360]!	; 0x550

00011bdc <execv@plt>:
   11bdc:	add	ip, pc, #0, 12
   11be0:	add	ip, ip, #159744	; 0x27000
   11be4:	ldr	pc, [ip, #1352]!	; 0x548

00011be8 <__open64_2@plt>:
   11be8:	add	ip, pc, #0, 12
   11bec:	add	ip, ip, #159744	; 0x27000
   11bf0:	ldr	pc, [ip, #1344]!	; 0x540

00011bf4 <__errno_location@plt>:
   11bf4:	add	ip, pc, #0, 12
   11bf8:	add	ip, ip, #159744	; 0x27000
   11bfc:	ldr	pc, [ip, #1336]!	; 0x538

00011c00 <__strcat_chk@plt>:
   11c00:	add	ip, pc, #0, 12
   11c04:	add	ip, ip, #159744	; 0x27000
   11c08:	ldr	pc, [ip, #1328]!	; 0x530

00011c0c <__sprintf_chk@plt>:
   11c0c:	add	ip, pc, #0, 12
   11c10:	add	ip, ip, #159744	; 0x27000
   11c14:	ldr	pc, [ip, #1320]!	; 0x528

00011c18 <__cxa_atexit@plt>:
   11c18:	add	ip, pc, #0, 12
   11c1c:	add	ip, ip, #159744	; 0x27000
   11c20:	ldr	pc, [ip, #1312]!	; 0x520

00011c24 <setvbuf@plt>:
   11c24:	add	ip, pc, #0, 12
   11c28:	add	ip, ip, #159744	; 0x27000
   11c2c:	ldr	pc, [ip, #1304]!	; 0x518

00011c30 <getgid@plt>:
   11c30:	add	ip, pc, #0, 12
   11c34:	add	ip, ip, #159744	; 0x27000
   11c38:	ldr	pc, [ip, #1296]!	; 0x510

00011c3c <memset@plt>:
   11c3c:	add	ip, pc, #0, 12
   11c40:	add	ip, ip, #159744	; 0x27000
   11c44:	ldr	pc, [ip, #1288]!	; 0x508

00011c48 <strncpy@plt>:
   11c48:	add	ip, pc, #0, 12
   11c4c:	add	ip, ip, #159744	; 0x27000
   11c50:	ldr	pc, [ip, #1280]!	; 0x500

00011c54 <gmtime@plt>:
   11c54:	add	ip, pc, #0, 12
   11c58:	add	ip, ip, #159744	; 0x27000
   11c5c:	ldr	pc, [ip, #1272]!	; 0x4f8

00011c60 <__printf_chk@plt>:
   11c60:	add	ip, pc, #0, 12
   11c64:	add	ip, ip, #159744	; 0x27000
   11c68:	ldr	pc, [ip, #1264]!	; 0x4f0

00011c6c <link@plt>:
   11c6c:	add	ip, pc, #0, 12
   11c70:	add	ip, ip, #159744	; 0x27000
   11c74:	ldr	pc, [ip, #1256]!	; 0x4e8

00011c78 <write@plt>:
   11c78:	add	ip, pc, #0, 12
   11c7c:	add	ip, ip, #159744	; 0x27000
   11c80:	ldr	pc, [ip, #1248]!	; 0x4e0

00011c84 <fileno@plt>:
   11c84:	add	ip, pc, #0, 12
   11c88:	add	ip, ip, #159744	; 0x27000
   11c8c:	ldr	pc, [ip, #1240]!	; 0x4d8

00011c90 <fopencookie@plt>:
   11c90:	add	ip, pc, #0, 12
   11c94:	add	ip, ip, #159744	; 0x27000
   11c98:	ldr	pc, [ip, #1232]!	; 0x4d0

00011c9c <__fprintf_chk@plt>:
   11c9c:	add	ip, pc, #0, 12
   11ca0:	add	ip, ip, #159744	; 0x27000
   11ca4:	ldr	pc, [ip, #1224]!	; 0x4c8

00011ca8 <memchr@plt>:
   11ca8:	add	ip, pc, #0, 12
   11cac:	add	ip, ip, #159744	; 0x27000
   11cb0:	ldr	pc, [ip, #1216]!	; 0x4c0

00011cb4 <access@plt>:
   11cb4:	add	ip, pc, #0, 12
   11cb8:	add	ip, ip, #159744	; 0x27000
   11cbc:	ldr	pc, [ip, #1208]!	; 0x4b8

00011cc0 <fclose@plt>:
   11cc0:	add	ip, pc, #0, 12
   11cc4:	add	ip, ip, #159744	; 0x27000
   11cc8:	ldr	pc, [ip, #1200]!	; 0x4b0

00011ccc <pipe@plt>:
   11ccc:	add	ip, pc, #0, 12
   11cd0:	add	ip, ip, #159744	; 0x27000
   11cd4:	ldr	pc, [ip, #1192]!	; 0x4a8

00011cd8 <setlocale@plt>:
   11cd8:	add	ip, pc, #0, 12
   11cdc:	add	ip, ip, #159744	; 0x27000
   11ce0:	ldr	pc, [ip, #1184]!	; 0x4a0

00011ce4 <fork@plt>:
   11ce4:	add	ip, pc, #0, 12
   11ce8:	add	ip, ip, #159744	; 0x27000
   11cec:	ldr	pc, [ip, #1176]!	; 0x498

00011cf0 <putenv@plt>:
   11cf0:	add	ip, pc, #0, 12
   11cf4:	add	ip, ip, #159744	; 0x27000
   11cf8:	ldr	pc, [ip, #1168]!	; 0x490

00011cfc <strrchr@plt>:
   11cfc:	add	ip, pc, #0, 12
   11d00:	add	ip, ip, #159744	; 0x27000
   11d04:	ldr	pc, [ip, #1160]!	; 0x488

00011d08 <nl_langinfo@plt>:
   11d08:	add	ip, pc, #0, 12
   11d0c:	add	ip, ip, #159744	; 0x27000
   11d10:	ldr	pc, [ip, #1152]!	; 0x480

00011d14 <timegm@plt>:
   11d14:	add	ip, pc, #0, 12
   11d18:	add	ip, ip, #159744	; 0x27000
   11d1c:	ldr	pc, [ip, #1144]!	; 0x478

00011d20 <getgroups@plt>:
   11d20:	add	ip, pc, #0, 12
   11d24:	add	ip, ip, #159744	; 0x27000
   11d28:	ldr	pc, [ip, #1136]!	; 0x470

00011d2c <fopen64@plt>:
   11d2c:	add	ip, pc, #0, 12
   11d30:	add	ip, ip, #159744	; 0x27000
   11d34:	ldr	pc, [ip, #1128]!	; 0x468

00011d38 <socket@plt>:
   11d38:	add	ip, pc, #0, 12
   11d3c:	add	ip, ip, #159744	; 0x27000
   11d40:	ldr	pc, [ip, #1120]!	; 0x460

00011d44 <bindtextdomain@plt>:
   11d44:	add	ip, pc, #0, 12
   11d48:	add	ip, ip, #159744	; 0x27000
   11d4c:	ldr	pc, [ip, #1112]!	; 0x458

00011d50 <fseek@plt>:
   11d50:	add	ip, pc, #0, 12
   11d54:	add	ip, ip, #159744	; 0x27000
   11d58:	ldr	pc, [ip, #1104]!	; 0x450

00011d5c <gpg_err_code_from_syserror@plt>:
   11d5c:	add	ip, pc, #0, 12
   11d60:	add	ip, ip, #159744	; 0x27000
   11d64:	ldr	pc, [ip, #1096]!	; 0x448

00011d68 <isatty@plt>:
   11d68:	add	ip, pc, #0, 12
   11d6c:	add	ip, ip, #159744	; 0x27000
   11d70:	ldr	pc, [ip, #1088]!	; 0x440

00011d74 <fputs@plt>:
   11d74:	add	ip, pc, #0, 12
   11d78:	add	ip, ip, #159744	; 0x27000
   11d7c:	ldr	pc, [ip, #1080]!	; 0x438

00011d80 <strncmp@plt>:
   11d80:	add	ip, pc, #0, 12
   11d84:	add	ip, ip, #159744	; 0x27000
   11d88:	ldr	pc, [ip, #1072]!	; 0x430

00011d8c <abort@plt>:
   11d8c:	add	ip, pc, #0, 12
   11d90:	add	ip, ip, #159744	; 0x27000
   11d94:	ldr	pc, [ip, #1064]!	; 0x428

00011d98 <close@plt>:
   11d98:	add	ip, pc, #0, 12
   11d9c:	add	ip, ip, #159744	; 0x27000
   11da0:	ldr	pc, [ip, #1056]!	; 0x420

00011da4 <connect@plt>:
   11da4:	add	ip, pc, #0, 12
   11da8:	add	ip, ip, #159744	; 0x27000
   11dac:	ldr	pc, [ip, #1048]!	; 0x418

00011db0 <getgrgid@plt>:
   11db0:	add	ip, pc, #0, 12
   11db4:	add	ip, ip, #159744	; 0x27000
   11db8:	ldr	pc, [ip, #1040]!	; 0x410

00011dbc <__snprintf_chk@plt>:
   11dbc:	add	ip, pc, #0, 12
   11dc0:	add	ip, ip, #159744	; 0x27000
   11dc4:	ldr	pc, [ip, #1032]!	; 0x408

00011dc8 <__assert_fail@plt>:
   11dc8:	add	ip, pc, #0, 12
   11dcc:	add	ip, ip, #159744	; 0x27000
   11dd0:	ldr	pc, [ip, #1024]!	; 0x400

Disassembly of section .text:

00011dd8 <.text>:
   11dd8:	push	{r4, lr}
   11ddc:	mov	r2, #5
   11de0:	movw	r1, #29272	; 0x7258
   11de4:	mov	r0, #0
   11de8:	movt	r1, #2
   11dec:	bl	119cc <dcgettext@plt>
   11df0:	mov	r4, r0
   11df4:	bl	11bf4 <__errno_location@plt>
   11df8:	ldr	r0, [r0]
   11dfc:	bl	11b10 <strerror@plt>
   11e00:	mov	r1, r0
   11e04:	mov	r0, r4
   11e08:	bl	23c0c <__assert_fail@plt+0x11e44>
   11e0c:	push	{r3, lr}
   11e10:	movw	r0, #30736	; 0x7810
   11e14:	movw	r1, #30660	; 0x77c4
   11e18:	movt	r0, #2
   11e1c:	movt	r1, #2
   11e20:	movw	r2, #1334	; 0x536
   11e24:	ldr	r3, [pc]	; 11e2c <__assert_fail@plt+0x64>
   11e28:	bl	11dc8 <__assert_fail@plt>
   11e2c:	andeq	r7, r2, r0, ror r7
   11e30:	push	{r3, r4, r5, lr}
   11e34:	movw	r5, #44644	; 0xae64
   11e38:	movt	r5, #3
   11e3c:	mov	r0, #11
   11e40:	bl	21794 <__assert_fail@plt+0xf9cc>
   11e44:	ldr	r1, [r5]
   11e48:	bl	11d74 <fputs@plt>
   11e4c:	mov	r0, #12
   11e50:	bl	21794 <__assert_fail@plt+0xf9cc>
   11e54:	subs	r2, r0, #0
   11e58:	beq	11e6c <__assert_fail@plt+0xa4>
   11e5c:	movw	r1, #32736	; 0x7fe0
   11e60:	mov	r0, #1
   11e64:	movt	r1, #2
   11e68:	bl	11c60 <__printf_chk@plt>
   11e6c:	mov	r0, #13
   11e70:	mov	r4, #20
   11e74:	bl	21794 <__assert_fail@plt+0xf9cc>
   11e78:	movw	r1, #30176	; 0x75e0
   11e7c:	movt	r1, #2
   11e80:	mov	r2, r0
   11e84:	mov	r0, #1
   11e88:	bl	11c60 <__printf_chk@plt>
   11e8c:	mov	r0, r4
   11e90:	add	r4, r4, #1
   11e94:	bl	21794 <__assert_fail@plt+0xf9cc>
   11e98:	cmp	r0, #0
   11e9c:	beq	11ea4 <__assert_fail@plt+0xdc>
   11ea0:	bl	11ae0 <puts@plt>
   11ea4:	cmp	r4, #30
   11ea8:	bne	11e8c <__assert_fail@plt+0xc4>
   11eac:	mov	r0, #14
   11eb0:	bl	21794 <__assert_fail@plt+0xf9cc>
   11eb4:	cmp	r0, #0
   11eb8:	beq	11ec0 <__assert_fail@plt+0xf8>
   11ebc:	bl	11ae0 <puts@plt>
   11ec0:	mov	r0, #10
   11ec4:	bl	21794 <__assert_fail@plt+0xf9cc>
   11ec8:	cmp	r0, #0
   11ecc:	beq	11ed4 <__assert_fail@plt+0x10c>
   11ed0:	bl	11ae0 <puts@plt>
   11ed4:	mov	r0, #15
   11ed8:	bl	21794 <__assert_fail@plt+0xf9cc>
   11edc:	cmp	r0, #0
   11ee0:	beq	11eec <__assert_fail@plt+0x124>
   11ee4:	ldr	r1, [r5]
   11ee8:	bl	11d74 <fputs@plt>
   11eec:	mov	r0, #18
   11ef0:	bl	21794 <__assert_fail@plt+0xf9cc>
   11ef4:	cmp	r0, #0
   11ef8:	beq	11f04 <__assert_fail@plt+0x13c>
   11efc:	ldr	r1, [r5]
   11f00:	bl	11d74 <fputs@plt>
   11f04:	mov	r0, r4
   11f08:	add	r4, r4, #1
   11f0c:	bl	21794 <__assert_fail@plt+0xf9cc>
   11f10:	cmp	r0, #0
   11f14:	beq	11f20 <__assert_fail@plt+0x158>
   11f18:	ldr	r1, [r5]
   11f1c:	bl	11d74 <fputs@plt>
   11f20:	cmp	r4, #40	; 0x28
   11f24:	bne	11f04 <__assert_fail@plt+0x13c>
   11f28:	ldr	r0, [r5]
   11f2c:	pop	{r3, r4, r5, lr}
   11f30:	b	11930 <fflush@plt>
   11f34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11f38:	movw	r6, #44624	; 0xae50
   11f3c:	movt	r6, #3
   11f40:	sub	sp, sp, #80	; 0x50
   11f44:	mov	r8, #0
   11f48:	movw	r4, #37344	; 0x91e0
   11f4c:	ldr	r3, [r6]
   11f50:	movw	r5, #45100	; 0xb02c
   11f54:	str	r0, [sp, #12]
   11f58:	movw	r0, #19772	; 0x4d3c
   11f5c:	movt	r0, #2
   11f60:	str	r1, [sp, #8]
   11f64:	str	r3, [sp, #76]	; 0x4c
   11f68:	movt	r4, #3
   11f6c:	str	r8, [sp, #16]
   11f70:	bl	1743c <__assert_fail@plt+0x5674>
   11f74:	movw	r0, #10052	; 0x2744
   11f78:	movt	r0, #1
   11f7c:	bl	22eb8 <__assert_fail@plt+0x110f0>
   11f80:	movt	r5, #3
   11f84:	mov	r1, #1
   11f88:	movw	r0, #19772	; 0x4d3c
   11f8c:	movt	r0, #2
   11f90:	mov	sl, r8
   11f94:	bl	239dc <__assert_fail@plt+0x11c14>
   11f98:	mov	r9, #2
   11f9c:	bl	17194 <__assert_fail@plt+0x53cc>
   11fa0:	bl	17298 <__assert_fail@plt+0x54d0>
   11fa4:	mov	r3, #1
   11fa8:	mov	r7, r3
   11fac:	str	r3, [sp, #28]
   11fb0:	add	r2, sp, #12
   11fb4:	add	r3, sp, #8
   11fb8:	str	r2, [sp, #20]
   11fbc:	str	r3, [sp, #24]
   11fc0:	mov	r0, #0
   11fc4:	str	r4, [sp]
   11fc8:	mov	r1, r0
   11fcc:	mov	r2, r0
   11fd0:	add	r3, sp, #20
   11fd4:	bl	224ec <__assert_fail@plt+0x10724>
   11fd8:	cmp	r0, #0
   11fdc:	beq	12070 <__assert_fail@plt+0x2a8>
   11fe0:	ldr	r3, [sp, #36]	; 0x24
   11fe4:	cmp	r3, #114	; 0x72
   11fe8:	beq	12054 <__assert_fail@plt+0x28c>
   11fec:	bgt	12014 <__assert_fail@plt+0x24c>
   11ff0:	cmp	r3, #111	; 0x6f
   11ff4:	beq	12064 <__assert_fail@plt+0x29c>
   11ff8:	cmp	r3, #113	; 0x71
   11ffc:	streq	r7, [r5, #4]
   12000:	beq	11fc0 <__assert_fail@plt+0x1f8>
   12004:	cmp	r3, #110	; 0x6e
   12008:	beq	1205c <__assert_fail@plt+0x294>
   1200c:	str	r9, [sp, #32]
   12010:	b	11fc0 <__assert_fail@plt+0x1f8>
   12014:	cmp	r3, #500	; 0x1f4
   12018:	streq	sl, [r5]
   1201c:	beq	11fc0 <__assert_fail@plt+0x1f8>
   12020:	bgt	1203c <__assert_fail@plt+0x274>
   12024:	cmp	r3, #118	; 0x76
   12028:	bne	1200c <__assert_fail@plt+0x244>
   1202c:	ldr	r3, [r5]
   12030:	add	r3, r3, #1
   12034:	str	r3, [r5]
   12038:	b	11fc0 <__assert_fail@plt+0x1f8>
   1203c:	sub	r2, r3, #500	; 0x1f4
   12040:	sub	r2, r2, #2
   12044:	cmp	r2, #9
   12048:	movls	r8, r3
   1204c:	bls	11fc0 <__assert_fail@plt+0x1f8>
   12050:	b	1200c <__assert_fail@plt+0x244>
   12054:	str	r7, [r5, #12]
   12058:	b	11fc0 <__assert_fail@plt+0x1f8>
   1205c:	str	r7, [r5, #8]
   12060:	b	11fc0 <__assert_fail@plt+0x1f8>
   12064:	ldr	r3, [sp, #44]	; 0x2c
   12068:	str	r3, [r5, #16]
   1206c:	b	11fc0 <__assert_fail@plt+0x1f8>
   12070:	bl	23974 <__assert_fail@plt+0x11bac>
   12074:	cmp	r0, #0
   12078:	bne	124f4 <__assert_fail@plt+0x72c>
   1207c:	ldr	r0, [sp, #12]
   12080:	cmp	r0, #0
   12084:	ldrne	r3, [sp, #8]
   12088:	moveq	r4, r0
   1208c:	ldrne	r4, [r3]
   12090:	sub	r3, r8, #500	; 0x1f4
   12094:	sub	r3, r3, #3
   12098:	cmp	r3, #8
   1209c:	ldrls	pc, [pc, r3, lsl #2]
   120a0:	b	123f8 <__assert_fail@plt+0x630>
   120a4:	andeq	r2, r1, r0, asr r1
   120a8:	andeq	r2, r1, r0, ror #2
   120ac:	andeq	r2, r1, r0, ror #2
   120b0:	andeq	r2, r1, r0, ror #2
   120b4:	ldrdeq	r2, [r1], -r4
   120b8:	andeq	r2, r1, r4, lsl #4
   120bc:	andeq	r2, r1, ip, lsr #4
   120c0:	andeq	r2, r1, ip, asr #4
   120c4:	andeq	r2, r1, r8, asr #1
   120c8:	cmp	r4, #0
   120cc:	beq	12474 <__assert_fail@plt+0x6ac>
   120d0:	mov	r0, r4
   120d4:	bl	14144 <__assert_fail@plt+0x237c>
   120d8:	cmp	r0, #0
   120dc:	blt	1255c <__assert_fail@plt+0x794>
   120e0:	bl	135c4 <__assert_fail@plt+0x17fc>
   120e4:	ldr	r0, [sp, #16]
   120e8:	cmp	r0, #0
   120ec:	beq	12134 <__assert_fail@plt+0x36c>
   120f0:	movw	r3, #44644	; 0xae64
   120f4:	movt	r3, #3
   120f8:	ldr	r3, [r3]
   120fc:	cmp	r0, r3
   12100:	beq	12134 <__assert_fail@plt+0x36c>
   12104:	bl	11cc0 <fclose@plt>
   12108:	cmp	r0, #0
   1210c:	beq	12134 <__assert_fail@plt+0x36c>
   12110:	bl	11bf4 <__errno_location@plt>
   12114:	movw	r3, #45100	; 0xb02c
   12118:	movt	r3, #3
   1211c:	movw	r2, #20040	; 0x4e48
   12120:	movt	r2, #2
   12124:	ldr	r3, [r3, #16]
   12128:	ldr	r1, [r0]
   1212c:	mov	r0, #1
   12130:	bl	12a20 <__assert_fail@plt+0xc58>
   12134:	ldr	r2, [sp, #76]	; 0x4c
   12138:	mov	r0, #0
   1213c:	ldr	r3, [r6]
   12140:	cmp	r2, r3
   12144:	bne	12498 <__assert_fail@plt+0x6d0>
   12148:	add	sp, sp, #80	; 0x50
   1214c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12150:	add	r0, sp, #16
   12154:	bl	126c8 <__assert_fail@plt+0x900>
   12158:	bl	14118 <__assert_fail@plt+0x2350>
   1215c:	b	120e4 <__assert_fail@plt+0x31c>
   12160:	cmp	r4, #0
   12164:	beq	1249c <__assert_fail@plt+0x6d4>
   12168:	mov	r0, r4
   1216c:	bl	14144 <__assert_fail@plt+0x237c>
   12170:	subs	r4, r0, #0
   12174:	blt	1255c <__assert_fail@plt+0x794>
   12178:	movw	r3, #506	; 0x1fa
   1217c:	cmp	r8, r3
   12180:	beq	12408 <__assert_fail@plt+0x640>
   12184:	bl	14310 <__assert_fail@plt+0x2548>
   12188:	mov	r0, #0
   1218c:	mov	r2, r0
   12190:	mov	r3, r0
   12194:	mov	r1, #1
   12198:	bl	163c8 <__assert_fail@plt+0x4600>
   1219c:	cmp	r0, #0
   121a0:	bne	1258c <__assert_fail@plt+0x7c4>
   121a4:	cmp	r8, #504	; 0x1f8
   121a8:	beq	12480 <__assert_fail@plt+0x6b8>
   121ac:	movw	r3, #44640	; 0xae60
   121b0:	movt	r3, #3
   121b4:	add	r0, sp, #16
   121b8:	ldr	r5, [r3]
   121bc:	bl	126c8 <__assert_fail@plt+0x900>
   121c0:	mov	r1, r5
   121c4:	mov	r2, r0
   121c8:	mov	r0, r4
   121cc:	bl	14e4c <__assert_fail@plt+0x3084>
   121d0:	b	120e4 <__assert_fail@plt+0x31c>
   121d4:	cmp	r4, #0
   121d8:	bne	124fc <__assert_fail@plt+0x734>
   121dc:	mvn	r0, #0
   121e0:	bl	14310 <__assert_fail@plt+0x2548>
   121e4:	mov	r1, #1
   121e8:	mov	r0, r4
   121ec:	mov	r3, r4
   121f0:	mov	r2, r1
   121f4:	bl	163c8 <__assert_fail@plt+0x4600>
   121f8:	cmp	r0, #0
   121fc:	beq	120e4 <__assert_fail@plt+0x31c>
   12200:	b	1258c <__assert_fail@plt+0x7c4>
   12204:	add	r0, sp, #16
   12208:	bl	126c8 <__assert_fail@plt+0x900>
   1220c:	mov	r1, #0
   12210:	mov	r2, r1
   12214:	mov	r3, r0
   12218:	mov	r0, r4
   1221c:	bl	163c8 <__assert_fail@plt+0x4600>
   12220:	cmp	r0, #0
   12224:	beq	120e4 <__assert_fail@plt+0x31c>
   12228:	b	1258c <__assert_fail@plt+0x7c4>
   1222c:	mov	r1, #0
   12230:	mov	r0, r4
   12234:	mov	r2, r1
   12238:	mov	r3, r1
   1223c:	bl	163c8 <__assert_fail@plt+0x4600>
   12240:	cmp	r0, #0
   12244:	beq	120e4 <__assert_fail@plt+0x31c>
   12248:	b	1258c <__assert_fail@plt+0x7c4>
   1224c:	add	r0, sp, #16
   12250:	bl	126c8 <__assert_fail@plt+0x900>
   12254:	ldr	r4, [sp, #16]
   12258:	bl	176a4 <__assert_fail@plt+0x58dc>
   1225c:	bl	13718 <__assert_fail@plt+0x1950>
   12260:	mov	r1, #1
   12264:	movw	r2, #19876	; 0x4da4
   12268:	movt	r2, #2
   1226c:	mov	r3, r0
   12270:	mov	r0, r4
   12274:	bl	11c9c <__fprintf_chk@plt>
   12278:	ldr	r4, [sp, #16]
   1227c:	bl	176b0 <__assert_fail@plt+0x58e8>
   12280:	bl	13718 <__assert_fail@plt+0x1950>
   12284:	mov	r1, #1
   12288:	movw	r2, #19892	; 0x4db4
   1228c:	movt	r2, #2
   12290:	mov	r3, r0
   12294:	mov	r0, r4
   12298:	bl	11c9c <__fprintf_chk@plt>
   1229c:	ldr	r4, [sp, #16]
   122a0:	bl	176bc <__assert_fail@plt+0x58f4>
   122a4:	bl	13718 <__assert_fail@plt+0x1950>
   122a8:	mov	r1, #1
   122ac:	movw	r2, #19904	; 0x4dc0
   122b0:	movt	r2, #2
   122b4:	mov	r3, r0
   122b8:	mov	r0, r4
   122bc:	bl	11c9c <__fprintf_chk@plt>
   122c0:	ldr	r4, [sp, #16]
   122c4:	bl	176c8 <__assert_fail@plt+0x5900>
   122c8:	bl	13718 <__assert_fail@plt+0x1950>
   122cc:	mov	r1, #1
   122d0:	movw	r2, #19920	; 0x4dd0
   122d4:	movt	r2, #2
   122d8:	mov	r3, r0
   122dc:	mov	r0, r4
   122e0:	bl	11c9c <__fprintf_chk@plt>
   122e4:	ldr	r4, [sp, #16]
   122e8:	bl	176d4 <__assert_fail@plt+0x590c>
   122ec:	bl	13718 <__assert_fail@plt+0x1950>
   122f0:	mov	r1, #1
   122f4:	movw	r2, #19932	; 0x4ddc
   122f8:	movt	r2, #2
   122fc:	mov	r3, r0
   12300:	mov	r0, r4
   12304:	bl	11c9c <__fprintf_chk@plt>
   12308:	ldr	r4, [sp, #16]
   1230c:	bl	176e0 <__assert_fail@plt+0x5918>
   12310:	bl	13718 <__assert_fail@plt+0x1950>
   12314:	mov	r1, #1
   12318:	movw	r2, #19944	; 0x4de8
   1231c:	movt	r2, #2
   12320:	mov	r3, r0
   12324:	mov	r0, r4
   12328:	bl	11c9c <__fprintf_chk@plt>
   1232c:	ldr	r4, [sp, #16]
   12330:	bl	176ec <__assert_fail@plt+0x5924>
   12334:	bl	13718 <__assert_fail@plt+0x1950>
   12338:	mov	r1, #1
   1233c:	movw	r2, #19960	; 0x4df8
   12340:	movt	r2, #2
   12344:	mov	r3, r0
   12348:	mov	r0, r4
   1234c:	bl	11c9c <__fprintf_chk@plt>
   12350:	movw	r0, #19980	; 0x4e0c
   12354:	movt	r0, #2
   12358:	bl	11ad4 <getenv@plt>
   1235c:	subs	r3, r0, #0
   12360:	beq	12370 <__assert_fail@plt+0x5a8>
   12364:	ldrb	r3, [r3]
   12368:	cmp	r3, #0
   1236c:	bne	12424 <__assert_fail@plt+0x65c>
   12370:	bl	17668 <__assert_fail@plt+0x58a0>
   12374:	movw	r1, #19996	; 0x4e1c
   12378:	mov	r2, #0
   1237c:	movt	r1, #2
   12380:	bl	1fcb8 <__assert_fail@plt+0xdef0>
   12384:	mov	r4, r0
   12388:	cmp	r4, #0
   1238c:	ldr	r5, [sp, #16]
   12390:	beq	12468 <__assert_fail@plt+0x6a0>
   12394:	mov	r0, r4
   12398:	bl	13718 <__assert_fail@plt+0x1950>
   1239c:	mov	r3, r0
   123a0:	mov	r1, #1
   123a4:	mov	r0, r5
   123a8:	movw	r2, #20008	; 0x4e28
   123ac:	movt	r2, #2
   123b0:	bl	11c9c <__fprintf_chk@plt>
   123b4:	mov	r0, r4
   123b8:	bl	1716c <__assert_fail@plt+0x53a4>
   123bc:	bl	17668 <__assert_fail@plt+0x58a0>
   123c0:	mov	r1, #0
   123c4:	bl	1fcb8 <__assert_fail@plt+0xdef0>
   123c8:	ldr	r5, [sp, #16]
   123cc:	mov	r4, r0
   123d0:	bl	13718 <__assert_fail@plt+0x1950>
   123d4:	mov	r1, #1
   123d8:	movw	r2, #20028	; 0x4e3c
   123dc:	movt	r2, #2
   123e0:	mov	r3, r0
   123e4:	mov	r0, r5
   123e8:	bl	11c9c <__fprintf_chk@plt>
   123ec:	mov	r0, r4
   123f0:	bl	1716c <__assert_fail@plt+0x53a4>
   123f4:	b	120e4 <__assert_fail@plt+0x31c>
   123f8:	add	r0, sp, #16
   123fc:	bl	126c8 <__assert_fail@plt+0x900>
   12400:	bl	13bdc <__assert_fail@plt+0x1e14>
   12404:	b	120e4 <__assert_fail@plt+0x31c>
   12408:	add	r0, sp, #16
   1240c:	bl	126c8 <__assert_fail@plt+0x900>
   12410:	mov	r2, #0
   12414:	mov	r1, r0
   12418:	mov	r0, r4
   1241c:	bl	13d4c <__assert_fail@plt+0x1f84>
   12420:	b	120e4 <__assert_fail@plt+0x31c>
   12424:	bl	17134 <__assert_fail@plt+0x536c>
   12428:	mov	r1, #58	; 0x3a
   1242c:	mov	r4, r0
   12430:	bl	11bc4 <strchr@plt>
   12434:	cmp	r0, #0
   12438:	cmpne	r4, r0
   1243c:	movne	r3, #0
   12440:	moveq	r3, #1
   12444:	strbne	r3, [r0]
   12448:	bne	12388 <__assert_fail@plt+0x5c0>
   1244c:	mov	r0, r4
   12450:	mov	r4, #0
   12454:	bl	1716c <__assert_fail@plt+0x53a4>
   12458:	movw	r3, #23988	; 0x5db4
   1245c:	ldr	r5, [sp, #16]
   12460:	movt	r3, #2
   12464:	b	123a0 <__assert_fail@plt+0x5d8>
   12468:	movw	r3, #23988	; 0x5db4
   1246c:	movt	r3, #2
   12470:	b	123a0 <__assert_fail@plt+0x5d8>
   12474:	mvn	r0, #0
   12478:	bl	135c4 <__assert_fail@plt+0x17fc>
   1247c:	b	120e4 <__assert_fail@plt+0x31c>
   12480:	add	r0, sp, #16
   12484:	bl	126c8 <__assert_fail@plt+0x900>
   12488:	mov	r1, r0
   1248c:	mov	r0, r4
   12490:	bl	14198 <__assert_fail@plt+0x23d0>
   12494:	b	120e4 <__assert_fail@plt+0x31c>
   12498:	bl	119d8 <__stack_chk_fail@plt>
   1249c:	movw	r5, #44632	; 0xae58
   124a0:	movt	r5, #3
   124a4:	mov	r2, #5
   124a8:	movw	r1, #19780	; 0x4d44
   124ac:	mov	r0, r4
   124b0:	movt	r1, #2
   124b4:	bl	119cc <dcgettext@plt>
   124b8:	ldr	r1, [r5]
   124bc:	bl	11d74 <fputs@plt>
   124c0:	ldr	r1, [r5]
   124c4:	mov	r0, #10
   124c8:	bl	11a74 <_IO_putc@plt>
   124cc:	mov	r2, #5
   124d0:	mov	r0, r4
   124d4:	movw	r1, #19808	; 0x4d60
   124d8:	movt	r1, #2
   124dc:	bl	119cc <dcgettext@plt>
   124e0:	ldr	r1, [r5]
   124e4:	bl	11d74 <fputs@plt>
   124e8:	ldr	r1, [r5]
   124ec:	mov	r0, #10
   124f0:	bl	11a74 <_IO_putc@plt>
   124f4:	mov	r0, #2
   124f8:	bl	11b94 <exit@plt>
   124fc:	movw	r4, #44632	; 0xae58
   12500:	movt	r4, #3
   12504:	mov	r2, #5
   12508:	movw	r1, #19780	; 0x4d44
   1250c:	mov	r0, #0
   12510:	movt	r1, #2
   12514:	bl	119cc <dcgettext@plt>
   12518:	ldr	r1, [r4]
   1251c:	bl	11d74 <fputs@plt>
   12520:	ldr	r1, [r4]
   12524:	mov	r0, #10
   12528:	bl	11a74 <_IO_putc@plt>
   1252c:	mov	r2, #5
   12530:	movw	r1, #19856	; 0x4d90
   12534:	mov	r0, #0
   12538:	movt	r1, #2
   1253c:	bl	119cc <dcgettext@plt>
   12540:	ldr	r1, [r4]
   12544:	bl	11d74 <fputs@plt>
   12548:	ldr	r1, [r4]
   1254c:	mov	r0, #10
   12550:	bl	11a74 <_IO_putc@plt>
   12554:	mov	r0, #2
   12558:	bl	11b94 <exit@plt>
   1255c:	movw	r4, #44632	; 0xae58
   12560:	movt	r4, #3
   12564:	mov	r2, #5
   12568:	movw	r1, #19836	; 0x4d7c
   1256c:	mov	r0, #0
   12570:	movt	r1, #2
   12574:	bl	119cc <dcgettext@plt>
   12578:	ldr	r1, [r4]
   1257c:	bl	11d74 <fputs@plt>
   12580:	ldr	r1, [r4]
   12584:	mov	r0, #10
   12588:	bl	11a74 <_IO_putc@plt>
   1258c:	mov	r0, #1
   12590:	bl	11b94 <exit@plt>
   12594:	mov	fp, #0
   12598:	mov	lr, #0
   1259c:	pop	{r1}		; (ldr r1, [sp], #4)
   125a0:	mov	r2, sp
   125a4:	push	{r2}		; (str r2, [sp, #-4]!)
   125a8:	push	{r0}		; (str r0, [sp, #-4]!)
   125ac:	ldr	ip, [pc, #16]	; 125c4 <__assert_fail@plt+0x7fc>
   125b0:	push	{ip}		; (str ip, [sp, #-4]!)
   125b4:	ldr	r0, [pc, #12]	; 125c8 <__assert_fail@plt+0x800>
   125b8:	ldr	r3, [pc, #12]	; 125cc <__assert_fail@plt+0x804>
   125bc:	bl	11b04 <__libc_start_main@plt>
   125c0:	bl	11d8c <abort@plt>
   125c4:	andeq	r4, r2, r0, lsr #24
   125c8:	andeq	r1, r1, r4, lsr pc
   125cc:			; <UNDEFINED> instruction: 0x00024bbc
   125d0:	ldr	r3, [pc, #20]	; 125ec <__assert_fail@plt+0x824>
   125d4:	ldr	r2, [pc, #20]	; 125f0 <__assert_fail@plt+0x828>
   125d8:	add	r3, pc, r3
   125dc:	ldr	r2, [r3, r2]
   125e0:	cmp	r2, #0
   125e4:	bxeq	lr
   125e8:	b	11b58 <__gmon_start__@plt>
   125ec:	andeq	r6, r2, r0, lsr #20
   125f0:	ldrdeq	r0, [r0], -r4
   125f4:	push	{r3, lr}
   125f8:	movw	r0, #44624	; 0xae50
   125fc:	ldr	r3, [pc, #36]	; 12628 <__assert_fail@plt+0x860>
   12600:	movt	r0, #3
   12604:	rsb	r3, r0, r3
   12608:	cmp	r3, #6
   1260c:	popls	{r3, pc}
   12610:	movw	r3, #0
   12614:	movt	r3, #0
   12618:	cmp	r3, #0
   1261c:	popeq	{r3, pc}
   12620:	blx	r3
   12624:	pop	{r3, pc}
   12628:	andeq	sl, r3, r3, asr lr
   1262c:	push	{r3, lr}
   12630:	movw	r0, #44624	; 0xae50
   12634:	movw	r3, #44624	; 0xae50
   12638:	movt	r0, #3
   1263c:	movt	r3, #3
   12640:	rsb	r3, r0, r3
   12644:	asr	r3, r3, #2
   12648:	add	r3, r3, r3, lsr #31
   1264c:	asrs	r1, r3, #1
   12650:	popeq	{r3, pc}
   12654:	movw	r2, #0
   12658:	movt	r2, #0
   1265c:	cmp	r2, #0
   12660:	popeq	{r3, pc}
   12664:	blx	r2
   12668:	pop	{r3, pc}
   1266c:	push	{r4, lr}
   12670:	movw	r4, #44648	; 0xae68
   12674:	movt	r4, #3
   12678:	ldrb	r3, [r4]
   1267c:	cmp	r3, #0
   12680:	popne	{r4, pc}
   12684:	bl	125f4 <__assert_fail@plt+0x82c>
   12688:	mov	r3, #1
   1268c:	strb	r3, [r4]
   12690:	pop	{r4, pc}
   12694:	movw	r0, #36604	; 0x8efc
   12698:	movt	r0, #3
   1269c:	push	{r3, lr}
   126a0:	ldr	r3, [r0]
   126a4:	cmp	r3, #0
   126a8:	beq	126c0 <__assert_fail@plt+0x8f8>
   126ac:	movw	r3, #0
   126b0:	movt	r3, #0
   126b4:	cmp	r3, #0
   126b8:	beq	126c0 <__assert_fail@plt+0x8f8>
   126bc:	blx	r3
   126c0:	pop	{r3, lr}
   126c4:	b	1262c <__assert_fail@plt+0x864>
   126c8:	push	{r3, r4, r5, lr}
   126cc:	mov	r4, r0
   126d0:	ldr	r0, [r0]
   126d4:	cmp	r0, #0
   126d8:	popne	{r3, r4, r5, pc}
   126dc:	movw	r5, #45100	; 0xb02c
   126e0:	movt	r5, #3
   126e4:	ldr	r0, [r5, #16]
   126e8:	cmp	r0, #0
   126ec:	beq	1272c <__assert_fail@plt+0x964>
   126f0:	movw	r1, #23376	; 0x5b50
   126f4:	movt	r1, #2
   126f8:	bl	11d2c <fopen64@plt>
   126fc:	cmp	r0, #0
   12700:	str	r0, [r4]
   12704:	popne	{r3, r4, r5, pc}
   12708:	bl	11bf4 <__errno_location@plt>
   1270c:	ldr	r3, [r5, #16]
   12710:	movw	r2, #19552	; 0x4c60
   12714:	movt	r2, #2
   12718:	ldr	r1, [r0]
   1271c:	mov	r0, #1
   12720:	bl	12a20 <__assert_fail@plt+0xc58>
   12724:	ldr	r0, [r4]
   12728:	pop	{r3, r4, r5, pc}
   1272c:	movw	r3, #44644	; 0xae64
   12730:	movt	r3, #3
   12734:	ldr	r3, [r3]
   12738:	mov	r0, r3
   1273c:	str	r3, [r4]
   12740:	pop	{r3, r4, r5, pc}
   12744:	sub	r0, r0, #1
   12748:	cmp	r0, #40	; 0x28
   1274c:	ldrls	pc, [pc, r0, lsl #2]
   12750:	b	12858 <__assert_fail@plt+0xa90>
   12754:	andeq	r2, r1, r8, lsr r8
   12758:	andeq	r2, r1, r8, asr r8
   1275c:	andeq	r2, r1, r8, asr r8
   12760:	andeq	r2, r1, r8, asr r8
   12764:	andeq	r2, r1, r8, asr r8
   12768:	andeq	r2, r1, r8, asr r8
   1276c:	andeq	r2, r1, r8, asr r8
   12770:	andeq	r2, r1, r8, asr r8
   12774:	andeq	r2, r1, r8, asr r8
   12778:	andeq	r2, r1, r8, asr r8
   1277c:	andeq	r2, r1, ip, asr #16
   12780:	andeq	r2, r1, r8, asr r8
   12784:	strdeq	r2, [r1], -r8
   12788:	andeq	r2, r1, r8, asr r8
   1278c:	andeq	r2, r1, r8, asr r8
   12790:	andeq	r2, r1, r8, asr r8
   12794:	andeq	r2, r1, r4, lsl #16
   12798:	andeq	r2, r1, r8, asr r8
   1279c:	andeq	r2, r1, r0, lsl r8
   127a0:	andeq	r2, r1, r8, asr r8
   127a4:	andeq	r2, r1, r8, asr r8
   127a8:	andeq	r2, r1, r8, asr r8
   127ac:	andeq	r2, r1, r8, asr r8
   127b0:	andeq	r2, r1, r8, asr r8
   127b4:	andeq	r2, r1, r8, asr r8
   127b8:	andeq	r2, r1, r8, asr r8
   127bc:	andeq	r2, r1, r8, asr r8
   127c0:	andeq	r2, r1, r8, asr r8
   127c4:	andeq	r2, r1, r8, asr r8
   127c8:	andeq	r2, r1, r8, asr r8
   127cc:	andeq	r2, r1, r8, asr r8
   127d0:	andeq	r2, r1, r8, asr r8
   127d4:	andeq	r2, r1, r8, asr r8
   127d8:	andeq	r2, r1, r8, asr r8
   127dc:	andeq	r2, r1, r8, asr r8
   127e0:	andeq	r2, r1, r8, asr r8
   127e4:	andeq	r2, r1, r8, asr r8
   127e8:	andeq	r2, r1, r8, asr r8
   127ec:	andeq	r2, r1, r8, asr r8
   127f0:	andeq	r2, r1, r8, lsr r8
   127f4:	andeq	r2, r1, r4, lsr #16
   127f8:	movw	r0, #19588	; 0x4c84
   127fc:	movt	r0, #2
   12800:	bx	lr
   12804:	movw	r0, #19596	; 0x4c8c
   12808:	movt	r0, #2
   1280c:	bx	lr
   12810:	movw	r1, #19608	; 0x4c98
   12814:	mov	r0, #0
   12818:	movt	r1, #2
   1281c:	mov	r2, #5
   12820:	b	119cc <dcgettext@plt>
   12824:	movw	r1, #19684	; 0x4ce4
   12828:	mov	r0, #0
   1282c:	movt	r1, #2
   12830:	mov	r2, #5
   12834:	b	119cc <dcgettext@plt>
   12838:	movw	r1, #19644	; 0x4cbc
   1283c:	mov	r0, #0
   12840:	movt	r1, #2
   12844:	mov	r2, #5
   12848:	b	119cc <dcgettext@plt>
   1284c:	movw	r0, #19572	; 0x4c74
   12850:	movt	r0, #2
   12854:	bx	lr
   12858:	mov	r0, #0
   1285c:	bx	lr
   12860:	push	{r4, r5, r6, lr}
   12864:	movw	r4, #44624	; 0xae50
   12868:	movt	r4, #3
   1286c:	sub	sp, sp, #8
   12870:	movw	r0, #19980	; 0x4e0c
   12874:	movt	r0, #2
   12878:	ldr	r3, [r4]
   1287c:	str	r3, [sp, #4]
   12880:	bl	11ad4 <getenv@plt>
   12884:	cmp	r0, #0
   12888:	beq	128c4 <__assert_fail@plt+0xafc>
   1288c:	mov	r1, #58	; 0x3a
   12890:	bl	11bc4 <strchr@plt>
   12894:	subs	r6, r0, #0
   12898:	beq	128c4 <__assert_fail@plt+0xafc>
   1289c:	bl	11bf4 <__errno_location@plt>
   128a0:	mov	r2, #0
   128a4:	mov	r1, sp
   128a8:	mov	r5, r0
   128ac:	add	r0, r6, #1
   128b0:	str	r2, [r5]
   128b4:	bl	11ba0 <strtoul@plt>
   128b8:	ldr	r3, [r5]
   128bc:	cmp	r3, #0
   128c0:	beq	128dc <__assert_fail@plt+0xb14>
   128c4:	ldr	r2, [sp, #4]
   128c8:	ldr	r3, [r4]
   128cc:	cmp	r2, r3
   128d0:	bne	128fc <__assert_fail@plt+0xb34>
   128d4:	add	sp, sp, #8
   128d8:	pop	{r4, r5, r6, pc}
   128dc:	ldr	r3, [sp]
   128e0:	ldrb	r3, [r3]
   128e4:	cmp	r3, #0
   128e8:	cmpne	r3, #58	; 0x3a
   128ec:	bne	128c4 <__assert_fail@plt+0xafc>
   128f0:	mov	r1, #1
   128f4:	bl	11b70 <kill@plt>
   128f8:	b	128c4 <__assert_fail@plt+0xafc>
   128fc:	bl	119d8 <__stack_chk_fail@plt>
   12900:	movw	r3, #20640	; 0x50a0
   12904:	movt	r3, #2
   12908:	add	r0, r3, r0, lsl #4
   1290c:	push	{r4, r5, r6, lr}
   12910:	mov	r5, r1
   12914:	ldr	r4, [r0, #12]
   12918:	mov	r6, r2
   1291c:	ldr	r0, [r4]
   12920:	cmp	r0, #0
   12924:	popeq	{r4, r5, r6, pc}
   12928:	ldr	r3, [r4, #4]
   1292c:	mov	r1, r5
   12930:	tst	r3, #1
   12934:	bne	12958 <__assert_fail@plt+0xb90>
   12938:	bl	118dc <strcmp@plt>
   1293c:	cmp	r0, #0
   12940:	bne	12958 <__assert_fail@plt+0xb90>
   12944:	cmp	r6, #0
   12948:	beq	12968 <__assert_fail@plt+0xba0>
   1294c:	ldr	r3, [r4, #24]
   12950:	cmp	r3, r6
   12954:	beq	12968 <__assert_fail@plt+0xba0>
   12958:	ldr	r0, [r4, #52]!	; 0x34
   1295c:	cmp	r0, #0
   12960:	bne	12928 <__assert_fail@plt+0xb60>
   12964:	pop	{r4, r5, r6, pc}
   12968:	mov	r0, r4
   1296c:	pop	{r4, r5, r6, pc}
   12970:	push	{r3, r4, r5, lr}
   12974:	subs	r4, r0, #0
   12978:	mov	r5, r1
   1297c:	beq	12a18 <__assert_fail@plt+0xc50>
   12980:	movw	r3, #44652	; 0xae6c
   12984:	movt	r3, #3
   12988:	ldr	r2, [r3]
   1298c:	cmp	r2, #0
   12990:	beq	129d0 <__assert_fail@plt+0xc08>
   12994:	movw	r1, #21612	; 0x546c
   12998:	mov	r0, r4
   1299c:	movt	r1, #2
   129a0:	bl	118dc <strcmp@plt>
   129a4:	movw	r3, #21576	; 0x5448
   129a8:	movt	r3, #2
   129ac:	mov	r1, r5
   129b0:	mov	r2, #5
   129b4:	cmp	r0, #0
   129b8:	movne	r0, r4
   129bc:	moveq	r0, r3
   129c0:	bl	119cc <dcgettext@plt>
   129c4:	cmp	r0, #0
   129c8:	beq	12a18 <__assert_fail@plt+0xc50>
   129cc:	pop	{r3, r4, r5, pc}
   129d0:	movw	r0, #21576	; 0x5448
   129d4:	movw	r1, #21584	; 0x5450
   129d8:	movt	r0, #2
   129dc:	movt	r1, #2
   129e0:	mov	r2, #1
   129e4:	str	r2, [r3]
   129e8:	bl	11abc <bind_textdomain_codeset@plt>
   129ec:	movw	r0, #26604	; 0x67ec
   129f0:	movw	r1, #21592	; 0x5458
   129f4:	movt	r0, #2
   129f8:	movt	r1, #2
   129fc:	bl	11d44 <bindtextdomain@plt>
   12a00:	movw	r0, #26604	; 0x67ec
   12a04:	movw	r1, #21584	; 0x5450
   12a08:	movt	r0, #2
   12a0c:	movt	r1, #2
   12a10:	bl	11abc <bind_textdomain_codeset@plt>
   12a14:	b	12994 <__assert_fail@plt+0xbcc>
   12a18:	mov	r0, r5
   12a1c:	pop	{r3, r4, r5, pc}
   12a20:	push	{r2, r3}
   12a24:	push	{r4, r5, r6, lr}
   12a28:	sub	sp, sp, #8
   12a2c:	movw	r4, #44624	; 0xae50
   12a30:	movt	r4, #3
   12a34:	ldr	lr, [sp, #24]
   12a38:	add	r3, sp, #28
   12a3c:	ldr	ip, [r4]
   12a40:	mov	r5, r1
   12a44:	mov	r6, r0
   12a48:	mov	r2, r3
   12a4c:	mov	r1, lr
   12a50:	mov	r0, #4
   12a54:	str	ip, [sp, #4]
   12a58:	str	r3, [sp]
   12a5c:	bl	23b3c <__assert_fail@plt+0x11d74>
   12a60:	cmp	r5, #0
   12a64:	beq	12aa8 <__assert_fail@plt+0xce0>
   12a68:	mov	r0, r5
   12a6c:	bl	11b10 <strerror@plt>
   12a70:	mov	r1, r0
   12a74:	movw	r0, #33040	; 0x8110
   12a78:	movt	r0, #2
   12a7c:	bl	23cd4 <__assert_fail@plt+0x11f0c>
   12a80:	cmp	r6, #0
   12a84:	bne	12ab8 <__assert_fail@plt+0xcf0>
   12a88:	ldr	r2, [sp, #4]
   12a8c:	ldr	r3, [r4]
   12a90:	cmp	r2, r3
   12a94:	bne	12ad8 <__assert_fail@plt+0xd10>
   12a98:	add	sp, sp, #8
   12a9c:	pop	{r4, r5, r6, lr}
   12aa0:	add	sp, sp, #8
   12aa4:	bx	lr
   12aa8:	movw	r0, #21648	; 0x5490
   12aac:	movt	r0, #2
   12ab0:	bl	23cd4 <__assert_fail@plt+0x11f0c>
   12ab4:	b	12a80 <__assert_fail@plt+0xcb8>
   12ab8:	mov	r0, #0
   12abc:	bl	23cd4 <__assert_fail@plt+0x11f0c>
   12ac0:	movw	r0, #21620	; 0x5474
   12ac4:	mov	r1, r6
   12ac8:	movt	r0, #2
   12acc:	bl	23cd4 <__assert_fail@plt+0x11f0c>
   12ad0:	mov	r0, r6
   12ad4:	bl	11b94 <exit@plt>
   12ad8:	bl	119d8 <__stack_chk_fail@plt>
   12adc:	push	{r4, r5, lr}
   12ae0:	movw	r4, #44624	; 0xae50
   12ae4:	movt	r4, #3
   12ae8:	sub	sp, sp, #44	; 0x2c
   12aec:	mov	r0, #9
   12af0:	ldr	r3, [r4]
   12af4:	str	r3, [sp, #36]	; 0x24
   12af8:	bl	176f8 <__assert_fail@plt+0x5930>
   12afc:	mvn	r1, #0
   12b00:	add	ip, sp, #8
   12b04:	mov	r2, r1
   12b08:	str	r1, [sp]
   12b0c:	mov	r3, r1
   12b10:	str	ip, [sp, #4]
   12b14:	add	r1, sp, #12
   12b18:	movw	lr, #21652	; 0x5494
   12b1c:	movw	ip, #21656	; 0x5498
   12b20:	movt	lr, #2
   12b24:	movt	ip, #2
   12b28:	str	lr, [sp, #12]
   12b2c:	str	ip, [sp, #16]
   12b30:	movw	lr, #21676	; 0x54ac
   12b34:	movw	ip, #21688	; 0x54b8
   12b38:	movt	lr, #2
   12b3c:	movt	ip, #2
   12b40:	str	lr, [sp, #20]
   12b44:	str	ip, [sp, #24]
   12b48:	mov	lr, #0
   12b4c:	movw	ip, #21700	; 0x54c4
   12b50:	str	lr, [sp, #32]
   12b54:	movt	ip, #2
   12b58:	str	ip, [sp, #28]
   12b5c:	mov	r5, r0
   12b60:	bl	194f8 <__assert_fail@plt+0x7730>
   12b64:	cmp	r0, #0
   12b68:	beq	12bb0 <__assert_fail@plt+0xde8>
   12b6c:	bl	118f4 <gpg_strerror@plt>
   12b70:	movw	r1, #21736	; 0x54e8
   12b74:	movw	r2, #21708	; 0x54cc
   12b78:	movt	r1, #2
   12b7c:	mov	r3, r5
   12b80:	str	r1, [sp]
   12b84:	movt	r2, #2
   12b88:	str	r0, [sp, #4]
   12b8c:	mov	r0, #0
   12b90:	mov	r1, r0
   12b94:	bl	12a20 <__assert_fail@plt+0xc58>
   12b98:	ldr	r2, [sp, #36]	; 0x24
   12b9c:	ldr	r3, [r4]
   12ba0:	cmp	r2, r3
   12ba4:	bne	12bcc <__assert_fail@plt+0xe04>
   12ba8:	add	sp, sp, #44	; 0x2c
   12bac:	pop	{r4, r5, pc}
   12bb0:	mov	r2, r0
   12bb4:	ldr	r1, [sp, #8]
   12bb8:	mov	r0, r5
   12bbc:	bl	195ac <__assert_fail@plt+0x77e4>
   12bc0:	cmp	r0, #0
   12bc4:	beq	12b98 <__assert_fail@plt+0xdd0>
   12bc8:	b	12b6c <__assert_fail@plt+0xda4>
   12bcc:	bl	119d8 <__stack_chk_fail@plt>
   12bd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bd4:	movw	r7, #44624	; 0xae50
   12bd8:	movt	r7, #3
   12bdc:	sub	sp, sp, #1072	; 0x430
   12be0:	sub	sp, sp, #4
   12be4:	mov	r4, r0
   12be8:	ldr	r3, [r7]
   12bec:	mov	r0, r1
   12bf0:	str	r1, [sp, #8]
   12bf4:	str	r3, [sp, #1068]	; 0x42c
   12bf8:	bl	11bac <strlen@plt>
   12bfc:	movw	r1, #24728	; 0x6098
   12c00:	movt	r1, #2
   12c04:	mov	r8, r0
   12c08:	mov	r0, r4
   12c0c:	bl	1187c <fdopen@plt>
   12c10:	subs	r5, r0, #0
   12c14:	beq	12e20 <__assert_fail@plt+0x1058>
   12c18:	mov	r3, #0
   12c1c:	add	r0, sp, #44	; 0x2c
   12c20:	add	r2, r8, #1
   12c24:	mov	sl, r3
   12c28:	str	r3, [sp, #40]	; 0x28
   12c2c:	movw	r6, #1018	; 0x3fa
   12c30:	add	r3, r0, r2
   12c34:	str	r3, [sp, #20]
   12c38:	add	r3, sp, #40	; 0x28
   12c3c:	str	r3, [sp, #24]
   12c40:	add	r3, sp, #1072	; 0x430
   12c44:	str	r0, [sp, #12]
   12c48:	add	r3, r3, r8
   12c4c:	str	r3, [sp, #16]
   12c50:	add	fp, sp, #43	; 0x2b
   12c54:	mov	r9, #0
   12c58:	b	12c84 <__assert_fail@plt+0xebc>
   12c5c:	subs	r2, r0, #10
   12c60:	add	r9, r9, #1
   12c64:	rsbs	r3, r2, #0
   12c68:	strb	r0, [fp, #1]!
   12c6c:	adcs	r3, r3, r2
   12c70:	cmp	r9, r6
   12c74:	movls	r2, r3
   12c78:	orrhi	r2, r3, #1
   12c7c:	cmp	r2, #0
   12c80:	bne	12cbc <__assert_fail@plt+0xef4>
   12c84:	mov	r0, r5
   12c88:	bl	1199c <_IO_getc@plt>
   12c8c:	cmn	r0, #1
   12c90:	bne	12c5c <__assert_fail@plt+0xe94>
   12c94:	mov	r0, r5
   12c98:	bl	11cc0 <fclose@plt>
   12c9c:	ldr	r2, [sp, #1068]	; 0x42c
   12ca0:	ldr	r3, [r7]
   12ca4:	ldr	r0, [sp, #40]	; 0x28
   12ca8:	cmp	r2, r3
   12cac:	bne	12f24 <__assert_fail@plt+0x115c>
   12cb0:	add	sp, sp, #1072	; 0x430
   12cb4:	add	sp, sp, #4
   12cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12cbc:	mov	r4, r0
   12cc0:	rsb	r3, r3, r9
   12cc4:	add	r0, sp, #1072	; 0x430
   12cc8:	cmp	sl, #0
   12ccc:	add	r3, r0, r3
   12cd0:	mov	r1, #0
   12cd4:	strb	r1, [r3, #-1028]	; 0xfffffbfc
   12cd8:	bne	12d04 <__assert_fail@plt+0xf3c>
   12cdc:	ldr	r0, [sp, #12]
   12ce0:	mov	r2, r8
   12ce4:	ldr	r1, [sp, #8]
   12ce8:	bl	11d80 <strncmp@plt>
   12cec:	cmp	r0, #0
   12cf0:	bne	12d04 <__assert_fail@plt+0xf3c>
   12cf4:	ldr	r2, [sp, #16]
   12cf8:	ldrb	r3, [r2, #-1028]	; 0xfffffbfc
   12cfc:	cmp	r3, #58	; 0x3a
   12d00:	beq	12d10 <__assert_fail@plt+0xf48>
   12d04:	subs	sl, r4, #10
   12d08:	movne	sl, #1
   12d0c:	b	12c50 <__assert_fail@plt+0xe88>
   12d10:	ldr	r0, [sp, #20]
   12d14:	ldrb	r3, [r0]
   12d18:	mov	r9, r0
   12d1c:	cmp	r3, #9
   12d20:	cmpne	r3, #32
   12d24:	bne	12d40 <__assert_fail@plt+0xf78>
   12d28:	add	r2, r0, #1
   12d2c:	mov	r9, r2
   12d30:	ldrb	r3, [r2], #1
   12d34:	cmp	r3, #32
   12d38:	cmpne	r3, #9
   12d3c:	beq	12d2c <__assert_fail@plt+0xf64>
   12d40:	cmp	r3, #0
   12d44:	beq	12d04 <__assert_fail@plt+0xf3c>
   12d48:	mov	r0, r9
   12d4c:	mov	r1, #58	; 0x3a
   12d50:	bl	11bc4 <strchr@plt>
   12d54:	cmp	r0, #0
   12d58:	str	r0, [sp, #32]
   12d5c:	beq	12dd4 <__assert_fail@plt+0x100c>
   12d60:	add	sl, r0, #1
   12d64:	mov	r1, #58	; 0x3a
   12d68:	mov	r0, sl
   12d6c:	bl	11bc4 <strchr@plt>
   12d70:	cmp	r0, #0
   12d74:	str	r0, [sp, #28]
   12d78:	beq	12dd4 <__assert_fail@plt+0x100c>
   12d7c:	subs	fp, r0, sl
   12d80:	beq	12dd4 <__assert_fail@plt+0x100c>
   12d84:	ldr	sl, [sp, #32]
   12d88:	str	r5, [sp, #36]	; 0x24
   12d8c:	mov	r5, sl
   12d90:	mov	sl, r7
   12d94:	mov	r7, r4
   12d98:	b	12dbc <__assert_fail@plt+0xff4>
   12d9c:	bl	11b7c <__ctype_b_loc@plt>
   12da0:	lsl	r4, r4, #1
   12da4:	ldr	r2, [r0]
   12da8:	ldrh	r2, [r2, r4]
   12dac:	tst	r2, #2048	; 0x800
   12db0:	beq	12dc8 <__assert_fail@plt+0x1000>
   12db4:	subs	fp, fp, #1
   12db8:	beq	12e3c <__assert_fail@plt+0x1074>
   12dbc:	ldrb	r4, [r5, #1]!
   12dc0:	tst	r4, #128	; 0x80
   12dc4:	beq	12d9c <__assert_fail@plt+0xfd4>
   12dc8:	ldr	r5, [sp, #36]	; 0x24
   12dcc:	mov	r4, r7
   12dd0:	mov	r7, sl
   12dd4:	mov	r0, r9
   12dd8:	bl	11bac <strlen@plt>
   12ddc:	add	r0, r0, #20
   12de0:	bl	170bc <__assert_fail@plt+0x52f4>
   12de4:	mov	r1, r9
   12de8:	mov	r3, r0
   12dec:	mov	sl, r0
   12df0:	mov	r0, #0
   12df4:	str	r0, [r3], #16
   12df8:	mov	r0, r3
   12dfc:	bl	11aa4 <strcpy@plt>
   12e00:	mov	r1, #0
   12e04:	str	r1, [sl, #4]
   12e08:	str	r1, [sl, #8]
   12e0c:	str	r0, [sl, #12]
   12e10:	ldr	r3, [sp, #24]
   12e14:	str	sl, [sp, #24]
   12e18:	str	sl, [r3]
   12e1c:	b	12d04 <__assert_fail@plt+0xf3c>
   12e20:	bl	11bf4 <__errno_location@plt>
   12e24:	movw	r2, #21752	; 0x54f8
   12e28:	movt	r2, #2
   12e2c:	ldr	r1, [r0]
   12e30:	mov	r0, #1
   12e34:	bl	12a20 <__assert_fail@plt+0xc58>
   12e38:	b	12c18 <__assert_fail@plt+0xe50>
   12e3c:	ldr	r1, [sp, #28]
   12e40:	mov	r4, r7
   12e44:	ldr	r5, [sp, #36]	; 0x24
   12e48:	mov	ip, r0
   12e4c:	mov	r7, sl
   12e50:	add	r3, r1, #1
   12e54:	ldrb	r2, [r1, #1]
   12e58:	cmp	r2, #32
   12e5c:	cmpne	r2, #9
   12e60:	bne	12e7c <__assert_fail@plt+0x10b4>
   12e64:	add	sl, r1, #2
   12e68:	mov	r3, sl
   12e6c:	ldrb	r2, [sl], #1
   12e70:	cmp	r2, #32
   12e74:	cmpne	r2, #9
   12e78:	beq	12e68 <__assert_fail@plt+0x10a0>
   12e7c:	mov	r0, r9
   12e80:	str	r3, [sp, #4]
   12e84:	str	ip, [sp]
   12e88:	bl	11bac <strlen@plt>
   12e8c:	add	r0, r0, #20
   12e90:	bl	170bc <__assert_fail@plt+0x52f4>
   12e94:	mov	r1, r9
   12e98:	mov	r2, r0
   12e9c:	mov	sl, r0
   12ea0:	mov	r0, #0
   12ea4:	str	r0, [r2], #16
   12ea8:	mov	r0, r2
   12eac:	bl	11aa4 <strcpy@plt>
   12eb0:	ldr	r3, [sp, #4]
   12eb4:	rsb	r3, r9, r3
   12eb8:	add	r3, r3, #16
   12ebc:	add	r3, sl, r3
   12ec0:	mov	r2, r0
   12ec4:	ldr	r0, [sp, #32]
   12ec8:	str	r2, [sl, #4]
   12ecc:	mov	r2, #0
   12ed0:	rsb	r1, r9, r0
   12ed4:	add	r1, sl, r1
   12ed8:	mov	fp, r0
   12edc:	strb	r2, [r1, #16]
   12ee0:	ldr	ip, [sp]
   12ee4:	str	r3, [sl, #12]
   12ee8:	mov	r3, #0
   12eec:	str	r3, [sl, #8]
   12ef0:	ldr	r1, [ip]
   12ef4:	b	12f0c <__assert_fail@plt+0x1144>
   12ef8:	ldr	r2, [sl, #8]
   12efc:	add	r2, r2, r2, lsl #2
   12f00:	add	r3, r3, r2, lsl #1
   12f04:	sub	r3, r3, #48	; 0x30
   12f08:	str	r3, [sl, #8]
   12f0c:	ldrb	r3, [fp, #1]!
   12f10:	lsl	r2, r3, #1
   12f14:	ldrh	r2, [r1, r2]
   12f18:	tst	r2, #2048	; 0x800
   12f1c:	bne	12ef8 <__assert_fail@plt+0x1130>
   12f20:	b	12e10 <__assert_fail@plt+0x1048>
   12f24:	bl	119d8 <__stack_chk_fail@plt>
   12f28:	push	{r4, r5, r6, r7, r8, lr}
   12f2c:	mov	r5, r0
   12f30:	bl	11bac <strlen@plt>
   12f34:	movw	r6, #44652	; 0xae6c
   12f38:	movt	r6, #3
   12f3c:	ldr	r3, [r6, #4]
   12f40:	add	r0, r0, r0, lsl #1
   12f44:	add	r7, r0, #1
   12f48:	cmp	r7, r3
   12f4c:	bgt	12fa8 <__assert_fail@plt+0x11e0>
   12f50:	ldr	r4, [r6, #8]
   12f54:	ldrb	r2, [r5]
   12f58:	add	r4, r4, #1
   12f5c:	cmp	r2, #0
   12f60:	beq	12f9c <__assert_fail@plt+0x11d4>
   12f64:	cmp	r2, #37	; 0x25
   12f68:	strbne	r2, [r4, #-1]
   12f6c:	addne	r5, r5, #1
   12f70:	bne	12f54 <__assert_fail@plt+0x118c>
   12f74:	add	r0, r5, #1
   12f78:	bl	1fd6c <__assert_fail@plt+0xdfa4>
   12f7c:	subs	r7, r0, #0
   12f80:	blt	12fc8 <__assert_fail@plt+0x1200>
   12f84:	add	r5, r5, #3
   12f88:	strb	r7, [r4, #-1]
   12f8c:	add	r4, r4, #1
   12f90:	ldrb	r2, [r5]
   12f94:	cmp	r2, #0
   12f98:	bne	12f64 <__assert_fail@plt+0x119c>
   12f9c:	strb	r2, [r4, #-1]
   12fa0:	ldr	r0, [r6, #8]
   12fa4:	pop	{r4, r5, r6, r7, r8, pc}
   12fa8:	ldr	r0, [r6, #8]
   12fac:	mov	r1, r7
   12fb0:	bl	11a20 <realloc@plt>
   12fb4:	subs	r8, r0, #0
   12fb8:	beq	12fe4 <__assert_fail@plt+0x121c>
   12fbc:	mov	r4, r8
   12fc0:	stmib	r6, {r7, r8}
   12fc4:	b	12f54 <__assert_fail@plt+0x118c>
   12fc8:	movw	r2, #21808	; 0x5530
   12fcc:	mov	r0, #1
   12fd0:	movt	r2, #2
   12fd4:	mov	r1, #0
   12fd8:	mov	r3, r5
   12fdc:	bl	12a20 <__assert_fail@plt+0xc58>
   12fe0:	b	12f84 <__assert_fail@plt+0x11bc>
   12fe4:	bl	11bf4 <__errno_location@plt>
   12fe8:	movw	r2, #21784	; 0x5518
   12fec:	movt	r2, #2
   12ff0:	ldr	r1, [r0]
   12ff4:	mov	r0, #1
   12ff8:	bl	12a20 <__assert_fail@plt+0xc58>
   12ffc:	b	12fbc <__assert_fail@plt+0x11f4>
   13000:	push	{r4, r5, r6, r7, r8, lr}
   13004:	lsl	r8, r1, #1
   13008:	add	r3, r8, r1
   1300c:	movw	r5, #20640	; 0x50a0
   13010:	movt	r5, #2
   13014:	sub	sp, sp, #8
   13018:	add	r3, r5, r3, lsl #3
   1301c:	mov	r6, r1
   13020:	mov	r2, #0
   13024:	ldr	r7, [r3, #96]	; 0x60
   13028:	mov	r1, r7
   1302c:	bl	12900 <__assert_fail@plt+0xb38>
   13030:	subs	r4, r0, #0
   13034:	beq	13154 <__assert_fail@plt+0x138c>
   13038:	ldr	r3, [r4, #20]
   1303c:	cmp	r3, #32
   13040:	bne	13138 <__assert_fail@plt+0x1370>
   13044:	ldr	r3, [r4, #4]
   13048:	tst	r3, #4
   1304c:	bne	1311c <__assert_fail@plt+0x1354>
   13050:	ldr	r3, [r4, #28]
   13054:	cmp	r3, #0
   13058:	beq	130f0 <__assert_fail@plt+0x1328>
   1305c:	ldr	r3, [r4, #32]
   13060:	cmp	r3, #0
   13064:	beq	130f0 <__assert_fail@plt+0x1328>
   13068:	ldr	r0, [r4, #40]	; 0x28
   1306c:	cmp	r0, #0
   13070:	beq	13080 <__assert_fail@plt+0x12b8>
   13074:	ldrb	r3, [r0]
   13078:	cmp	r3, #0
   1307c:	bne	130e0 <__assert_fail@plt+0x1318>
   13080:	ldr	r0, [r4, #32]
   13084:	cmp	r0, #0
   13088:	beq	13098 <__assert_fail@plt+0x12d0>
   1308c:	ldrb	r3, [r0]
   13090:	cmp	r3, #0
   13094:	bne	130e0 <__assert_fail@plt+0x1318>
   13098:	movw	r4, #23988	; 0x5db4
   1309c:	movt	r4, #2
   130a0:	ldrb	r3, [r4]
   130a4:	cmp	r3, #47	; 0x2f
   130a8:	beq	130d4 <__assert_fail@plt+0x130c>
   130ac:	add	r6, r8, r6
   130b0:	movw	r2, #21984	; 0x55e0
   130b4:	mov	r3, r7
   130b8:	mov	r0, #1
   130bc:	add	r5, r5, r6, lsl #3
   130c0:	movt	r2, #2
   130c4:	mov	r1, #0
   130c8:	ldr	ip, [r5, #80]	; 0x50
   130cc:	str	ip, [sp]
   130d0:	bl	12a20 <__assert_fail@plt+0xc58>
   130d4:	mov	r0, r4
   130d8:	add	sp, sp, #8
   130dc:	pop	{r4, r5, r6, r7, r8, pc}
   130e0:	add	r0, r0, #1
   130e4:	bl	12f28 <__assert_fail@plt+0x1160>
   130e8:	mov	r4, r0
   130ec:	b	130a0 <__assert_fail@plt+0x12d8>
   130f0:	add	ip, r8, r6
   130f4:	movw	r2, #21928	; 0x55a8
   130f8:	mov	r0, #1
   130fc:	movt	r2, #2
   13100:	add	ip, r5, ip, lsl #3
   13104:	mov	r1, #0
   13108:	mov	r3, r7
   1310c:	ldr	ip, [ip, #80]	; 0x50
   13110:	str	ip, [sp]
   13114:	bl	12a20 <__assert_fail@plt+0xc58>
   13118:	b	13068 <__assert_fail@plt+0x12a0>
   1311c:	movw	r0, #21896	; 0x5588
   13120:	movw	r1, #21836	; 0x554c
   13124:	add	r3, r5, #248	; 0xf8
   13128:	movt	r0, #2
   1312c:	movt	r1, #2
   13130:	mov	r2, #1776	; 0x6f0
   13134:	bl	11dc8 <__assert_fail@plt>
   13138:	movw	r0, #21852	; 0x555c
   1313c:	movw	r1, #21836	; 0x554c
   13140:	add	r3, r5, #248	; 0xf8
   13144:	movt	r0, #2
   13148:	movt	r1, #2
   1314c:	movw	r2, #1775	; 0x6ef
   13150:	bl	11dc8 <__assert_fail@plt>
   13154:	movw	r0, #31672	; 0x7bb8
   13158:	movw	r1, #21836	; 0x554c
   1315c:	add	r3, r5, #248	; 0xf8
   13160:	movt	r0, #2
   13164:	movt	r1, #2
   13168:	movw	r2, #1774	; 0x6ee
   1316c:	bl	11dc8 <__assert_fail@plt>
   13170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13174:	movw	r5, #44624	; 0xae50
   13178:	movt	r5, #3
   1317c:	mov	r4, r0
   13180:	ldr	r0, [r0, #28]
   13184:	mov	r7, r2
   13188:	ldr	r2, [r5]
   1318c:	sub	sp, sp, #28
   13190:	cmp	r0, #0
   13194:	mov	sl, r1
   13198:	mov	r8, r3
   1319c:	str	r2, [sp, #20]
   131a0:	beq	13460 <__assert_fail@plt+0x1698>
   131a4:	ldr	r3, [r4, #44]	; 0x2c
   131a8:	cmp	r3, #0
   131ac:	bne	131bc <__assert_fail@plt+0x13f4>
   131b0:	ldr	r3, [r4, #48]	; 0x30
   131b4:	cmp	r3, #0
   131b8:	beq	131d4 <__assert_fail@plt+0x140c>
   131bc:	movw	r2, #22076	; 0x563c
   131c0:	mov	r0, #1
   131c4:	movt	r2, #2
   131c8:	mov	r1, #0
   131cc:	ldr	r3, [r4]
   131d0:	bl	12a20 <__assert_fail@plt+0xc58>
   131d4:	ands	r9, r7, #16
   131d8:	beq	1329c <__assert_fail@plt+0x14d4>
   131dc:	ldrb	r6, [r8]
   131e0:	cmp	r6, #0
   131e4:	ldreq	ip, [r4, #4]
   131e8:	bne	13504 <__assert_fail@plt+0x173c>
   131ec:	tst	ip, #8
   131f0:	ldrne	r3, [r4, #24]
   131f4:	movne	r2, #1
   131f8:	strne	r2, [sl, r3, lsl #2]
   131fc:	cmp	r9, #0
   13200:	str	r7, [r4, #44]	; 0x2c
   13204:	bne	13284 <__assert_fail@plt+0x14bc>
   13208:	ldr	r2, [r4, #20]
   1320c:	movw	r3, #20640	; 0x50a0
   13210:	movt	r3, #2
   13214:	add	r2, r3, r2, lsl #3
   13218:	ldr	r2, [r2, #268]	; 0x10c
   1321c:	cmp	r2, #0
   13220:	bne	133ac <__assert_fail@plt+0x15e4>
   13224:	tst	ip, #4
   13228:	beq	133ac <__assert_fail@plt+0x15e4>
   1322c:	cmp	r6, #0
   13230:	beq	135a8 <__assert_fail@plt+0x17e0>
   13234:	lsl	r7, r6, #1
   13238:	mov	r0, r7
   1323c:	bl	170bc <__assert_fail@plt+0x52f4>
   13240:	subs	r2, r6, #1
   13244:	mov	ip, #49	; 0x31
   13248:	str	r0, [r4, #48]	; 0x30
   1324c:	add	r4, r0, #1
   13250:	strb	ip, [r0]
   13254:	beq	1327c <__assert_fail@plt+0x14b4>
   13258:	mov	r3, r4
   1325c:	mov	r1, #44	; 0x2c
   13260:	subs	r2, r2, #1
   13264:	strb	r1, [r3]
   13268:	strb	ip, [r3, #1]
   1326c:	add	r3, r3, #2
   13270:	bne	13260 <__assert_fail@plt+0x1498>
   13274:	sub	r7, r7, #2
   13278:	add	r4, r4, r7
   1327c:	mov	r3, #0
   13280:	strb	r3, [r4]
   13284:	ldr	r2, [sp, #20]
   13288:	ldr	r3, [r5]
   1328c:	cmp	r2, r3
   13290:	bne	135a4 <__assert_fail@plt+0x17dc>
   13294:	add	sp, sp, #28
   13298:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1329c:	ldr	r3, [r4, #20]
   132a0:	movw	r6, #20640	; 0x50a0
   132a4:	movt	r6, #2
   132a8:	add	r3, r6, r3, lsl #3
   132ac:	ldr	r3, [r3, #268]	; 0x10c
   132b0:	cmp	r3, #0
   132b4:	beq	13498 <__assert_fail@plt+0x16d0>
   132b8:	ldrb	ip, [r8]
   132bc:	mov	fp, r8
   132c0:	str	r8, [sp, #16]
   132c4:	b	13310 <__assert_fail@plt+0x1548>
   132c8:	ldr	r1, [r4, #4]
   132cc:	ands	r1, r1, #2
   132d0:	beq	133c8 <__assert_fail@plt+0x1600>
   132d4:	cmp	ip, #44	; 0x2c
   132d8:	beq	133ec <__assert_fail@plt+0x1624>
   132dc:	mov	r0, fp
   132e0:	mov	r1, #44	; 0x2c
   132e4:	bl	11bc4 <strchr@plt>
   132e8:	subs	r3, r0, #0
   132ec:	beq	133bc <__assert_fail@plt+0x15f4>
   132f0:	add	r0, r3, #1
   132f4:	str	r0, [sp, #16]
   132f8:	cmp	r0, #0
   132fc:	beq	133bc <__assert_fail@plt+0x15f4>
   13300:	ldrb	ip, [r3, #1]
   13304:	cmp	ip, #0
   13308:	beq	133bc <__assert_fail@plt+0x15f4>
   1330c:	mov	fp, r0
   13310:	cmp	ip, #0
   13314:	cmpne	ip, #44	; 0x2c
   13318:	movne	r1, #0
   1331c:	moveq	r1, #1
   13320:	beq	132c8 <__assert_fail@plt+0x1500>
   13324:	ldr	r3, [r4, #20]
   13328:	add	r3, r6, r3, lsl #3
   1332c:	ldr	r0, [r3, #268]	; 0x10c
   13330:	cmp	r0, #1
   13334:	beq	13414 <__assert_fail@plt+0x164c>
   13338:	cmp	r0, #2
   1333c:	bne	132dc <__assert_fail@plt+0x1514>
   13340:	str	r1, [sp, #12]
   13344:	bl	11bf4 <__errno_location@plt>
   13348:	ldr	r1, [sp, #12]
   1334c:	mov	r2, r1
   13350:	mov	r3, r0
   13354:	str	r1, [r0]
   13358:	add	r1, sp, #16
   1335c:	mov	r0, fp
   13360:	str	r3, [sp, #12]
   13364:	bl	118e8 <strtol@plt>
   13368:	ldr	r3, [sp, #12]
   1336c:	ldr	r1, [r3]
   13370:	cmp	r1, #0
   13374:	bne	13558 <__assert_fail@plt+0x1790>
   13378:	ldr	fp, [sp, #16]
   1337c:	ldrb	r3, [fp]
   13380:	cmp	r3, #44	; 0x2c
   13384:	cmpne	r3, #0
   13388:	beq	132dc <__assert_fail@plt+0x1514>
   1338c:	movw	r2, #22180	; 0x56a4
   13390:	mov	r0, #1
   13394:	movt	r2, #2
   13398:	mov	r1, #0
   1339c:	ldr	r3, [r4]
   133a0:	bl	12a20 <__assert_fail@plt+0xc58>
   133a4:	ldr	fp, [sp, #16]
   133a8:	b	132dc <__assert_fail@plt+0x1514>
   133ac:	mov	r0, r8
   133b0:	bl	17134 <__assert_fail@plt+0x536c>
   133b4:	str	r0, [r4, #48]	; 0x30
   133b8:	b	13284 <__assert_fail@plt+0x14bc>
   133bc:	ldr	ip, [r4, #4]
   133c0:	mov	r6, #0
   133c4:	b	131ec <__assert_fail@plt+0x1424>
   133c8:	movw	r2, #22340	; 0x5744
   133cc:	mov	r0, #1
   133d0:	movt	r2, #2
   133d4:	ldr	r3, [r4]
   133d8:	bl	12a20 <__assert_fail@plt+0xc58>
   133dc:	ldr	fp, [sp, #16]
   133e0:	ldrb	ip, [fp]
   133e4:	cmp	ip, #44	; 0x2c
   133e8:	bne	132dc <__assert_fail@plt+0x1514>
   133ec:	ldr	r1, [r4, #4]
   133f0:	ands	r1, r1, #4
   133f4:	bne	132dc <__assert_fail@plt+0x1514>
   133f8:	movw	r2, #22372	; 0x5764
   133fc:	mov	r0, #1
   13400:	movt	r2, #2
   13404:	ldr	r3, [r4]
   13408:	bl	12a20 <__assert_fail@plt+0xc58>
   1340c:	ldr	fp, [sp, #16]
   13410:	b	132dc <__assert_fail@plt+0x1514>
   13414:	cmp	ip, #34	; 0x22
   13418:	beq	13430 <__assert_fail@plt+0x1668>
   1341c:	movw	r2, #22408	; 0x5788
   13420:	ldr	r3, [r4]
   13424:	movt	r2, #2
   13428:	bl	12a20 <__assert_fail@plt+0xc58>
   1342c:	ldr	fp, [sp, #16]
   13430:	ldrb	r3, [fp, #1]
   13434:	cmp	r3, #0
   13438:	cmpne	r3, #44	; 0x2c
   1343c:	bne	132dc <__assert_fail@plt+0x1514>
   13440:	movw	r2, #22476	; 0x57cc
   13444:	mov	r0, #1
   13448:	movt	r2, #2
   1344c:	mov	r1, #0
   13450:	ldr	r3, [r4]
   13454:	bl	12a20 <__assert_fail@plt+0xc58>
   13458:	ldr	fp, [sp, #16]
   1345c:	b	132dc <__assert_fail@plt+0x1514>
   13460:	ldr	lr, [r4, #24]
   13464:	movw	ip, #20640	; 0x50a0
   13468:	movt	ip, #2
   1346c:	ldr	r3, [r4]
   13470:	mov	r1, r0
   13474:	movw	r2, #22036	; 0x5614
   13478:	add	lr, lr, lr, lsl #1
   1347c:	movt	r2, #2
   13480:	mov	r0, #1
   13484:	add	ip, ip, lr, lsl #3
   13488:	ldr	ip, [ip, #80]	; 0x50
   1348c:	str	ip, [sp]
   13490:	bl	12a20 <__assert_fail@plt+0xc58>
   13494:	b	131a4 <__assert_fail@plt+0x13dc>
   13498:	bl	11bf4 <__errno_location@plt>
   1349c:	add	r1, sp, #16
   134a0:	mov	r2, r9
   134a4:	mov	fp, r0
   134a8:	str	r9, [r0]
   134ac:	mov	r0, r8
   134b0:	bl	11ba0 <strtoul@plt>
   134b4:	ldr	r1, [fp]
   134b8:	cmp	r1, #0
   134bc:	mov	r6, r0
   134c0:	bne	1358c <__assert_fail@plt+0x17c4>
   134c4:	ldr	r3, [sp, #16]
   134c8:	ldrb	r3, [r3]
   134cc:	cmp	r3, #0
   134d0:	bne	13570 <__assert_fail@plt+0x17a8>
   134d4:	ldr	ip, [r4, #4]
   134d8:	ands	r1, ip, #4
   134dc:	bne	13530 <__assert_fail@plt+0x1768>
   134e0:	cmp	r6, #1
   134e4:	beq	131ec <__assert_fail@plt+0x1424>
   134e8:	movw	r2, #22220	; 0x56cc
   134ec:	mov	r0, #1
   134f0:	movt	r2, #2
   134f4:	ldr	r3, [r4]
   134f8:	bl	12a20 <__assert_fail@plt+0xc58>
   134fc:	ldr	ip, [r4, #4]
   13500:	b	131ec <__assert_fail@plt+0x1424>
   13504:	ldr	ip, [r4]
   13508:	mov	r1, #0
   1350c:	movw	r2, #22104	; 0x5658
   13510:	mov	r0, #1
   13514:	movt	r2, #2
   13518:	mov	r3, r8
   1351c:	str	ip, [sp]
   13520:	mov	r6, r1
   13524:	bl	12a20 <__assert_fail@plt+0xc58>
   13528:	ldr	ip, [r4, #4]
   1352c:	b	131ec <__assert_fail@plt+0x1424>
   13530:	cmp	r6, #0
   13534:	bne	131ec <__assert_fail@plt+0x1424>
   13538:	movw	r2, #22280	; 0x5708
   1353c:	mov	r0, #1
   13540:	movt	r2, #2
   13544:	mov	r1, r6
   13548:	ldr	r3, [r4]
   1354c:	bl	12a20 <__assert_fail@plt+0xc58>
   13550:	ldr	ip, [r4, #4]
   13554:	b	131ec <__assert_fail@plt+0x1424>
   13558:	movw	r2, #22148	; 0x5684
   1355c:	mov	r0, #1
   13560:	movt	r2, #2
   13564:	ldr	r3, [r4]
   13568:	bl	12a20 <__assert_fail@plt+0xc58>
   1356c:	b	13378 <__assert_fail@plt+0x15b0>
   13570:	movw	r2, #22180	; 0x56a4
   13574:	mov	r0, #1
   13578:	movt	r2, #2
   1357c:	mov	r1, #0
   13580:	ldr	r3, [r4]
   13584:	bl	12a20 <__assert_fail@plt+0xc58>
   13588:	b	134d4 <__assert_fail@plt+0x170c>
   1358c:	movw	r2, #22148	; 0x5684
   13590:	mov	r0, #1
   13594:	movt	r2, #2
   13598:	ldr	r3, [r4]
   1359c:	bl	12a20 <__assert_fail@plt+0xc58>
   135a0:	b	134c4 <__assert_fail@plt+0x16fc>
   135a4:	bl	119d8 <__stack_chk_fail@plt>
   135a8:	movw	r0, #22560	; 0x5820
   135ac:	movw	r1, #21836	; 0x554c
   135b0:	add	r3, r3, #572	; 0x23c
   135b4:	movt	r0, #2
   135b8:	movt	r1, #2
   135bc:	movw	r2, #2949	; 0xb85
   135c0:	bl	11dc8 <__assert_fail@plt>
   135c4:	push	{r4, r5, r6, r7, lr}
   135c8:	movw	r7, #44624	; 0xae50
   135cc:	movt	r7, #3
   135d0:	sub	sp, sp, #36	; 0x24
   135d4:	add	r6, sp, #24
   135d8:	sub	r3, sp, #4
   135dc:	ldr	r1, [r7]
   135e0:	mov	r2, #0
   135e4:	str	r1, [sp, #28]
   135e8:	str	r2, [r3, #4]!
   135ec:	cmp	r3, r6
   135f0:	bne	135e8 <__assert_fail@plt+0x1820>
   135f4:	cmn	r0, #1
   135f8:	beq	1369c <__assert_fail@plt+0x18d4>
   135fc:	cmp	r0, #4
   13600:	bgt	136f4 <__assert_fail@plt+0x192c>
   13604:	movw	r3, #20640	; 0x50a0
   13608:	movt	r3, #2
   1360c:	add	r3, r3, r0, lsl #4
   13610:	ldr	r3, [r3, #12]
   13614:	cmp	r3, #0
   13618:	beq	13654 <__assert_fail@plt+0x188c>
   1361c:	ldr	r2, [r3]
   13620:	cmp	r2, #0
   13624:	beq	13654 <__assert_fail@plt+0x188c>
   13628:	mov	r1, #1
   1362c:	b	1363c <__assert_fail@plt+0x1874>
   13630:	ldr	r2, [r3]
   13634:	cmp	r2, #0
   13638:	beq	13654 <__assert_fail@plt+0x188c>
   1363c:	ldr	r2, [r3, #24]
   13640:	add	r0, sp, #32
   13644:	adds	r3, r3, #52	; 0x34
   13648:	add	r2, r0, r2, lsl #2
   1364c:	str	r1, [r2, #-32]	; 0xffffffe0
   13650:	bne	13630 <__assert_fail@plt+0x1868>
   13654:	ldr	r5, [pc, #180]	; 13710 <__assert_fail@plt+0x1948>
   13658:	sub	r4, sp, #4
   1365c:	ldr	r3, [r4, #4]!
   13660:	cmp	r3, #0
   13664:	beq	13678 <__assert_fail@plt+0x18b0>
   13668:	ldr	r3, [r5, #12]
   1366c:	cmp	r3, #0
   13670:	beq	13678 <__assert_fail@plt+0x18b0>
   13674:	blx	r3
   13678:	cmp	r4, r6
   1367c:	add	r5, r5, #24
   13680:	bne	1365c <__assert_fail@plt+0x1894>
   13684:	ldr	r2, [sp, #28]
   13688:	ldr	r3, [r7]
   1368c:	cmp	r2, r3
   13690:	bne	136f0 <__assert_fail@plt+0x1928>
   13694:	add	sp, sp, #36	; 0x24
   13698:	pop	{r4, r5, r6, r7, pc}
   1369c:	movw	r0, #20640	; 0x50a0
   136a0:	movt	r0, #2
   136a4:	add	ip, r0, #80	; 0x50
   136a8:	mov	r1, #1
   136ac:	ldr	r3, [r0, #12]
   136b0:	cmp	r3, #0
   136b4:	bne	136d4 <__assert_fail@plt+0x190c>
   136b8:	b	136e0 <__assert_fail@plt+0x1918>
   136bc:	ldr	r2, [r3, #24]
   136c0:	add	r4, sp, #32
   136c4:	adds	r3, r3, #52	; 0x34
   136c8:	add	r2, r4, r2, lsl #2
   136cc:	str	r1, [r2, #-32]	; 0xffffffe0
   136d0:	beq	136e0 <__assert_fail@plt+0x1918>
   136d4:	ldr	r2, [r3]
   136d8:	cmp	r2, #0
   136dc:	bne	136bc <__assert_fail@plt+0x18f4>
   136e0:	add	r0, r0, #16
   136e4:	cmp	r0, ip
   136e8:	bne	136ac <__assert_fail@plt+0x18e4>
   136ec:	b	13654 <__assert_fail@plt+0x188c>
   136f0:	bl	119d8 <__stack_chk_fail@plt>
   136f4:	movw	r0, #22580	; 0x5834
   136f8:	movw	r1, #21836	; 0x554c
   136fc:	movt	r0, #2
   13700:	movt	r1, #2
   13704:	movw	r2, #1112	; 0x458
   13708:	ldr	r3, [pc, #4]	; 13714 <__assert_fail@plt+0x194c>
   1370c:	bl	11dc8 <__assert_fail@plt>
   13710:	strdeq	r5, [r2], -r0
   13714:	strdeq	r5, [r2], -r0
   13718:	push	{r4, r5, r6, r7, r8, lr}
   1371c:	mov	r5, r0
   13720:	bl	11bac <strlen@plt>
   13724:	movw	r4, #44652	; 0xae6c
   13728:	movt	r4, #3
   1372c:	ldr	r3, [r4, #12]
   13730:	add	r0, r0, r0, lsl #1
   13734:	add	r6, r0, #1
   13738:	cmp	r6, r3
   1373c:	bgt	137e8 <__assert_fail@plt+0x1a20>
   13740:	ldr	r2, [r4, #16]
   13744:	ldrb	r3, [r5]
   13748:	cmp	r3, #0
   1374c:	beq	1380c <__assert_fail@plt+0x1a44>
   13750:	mov	r0, r5
   13754:	mov	ip, #37	; 0x25
   13758:	mov	r1, #50	; 0x32
   1375c:	mov	r8, #99	; 0x63
   13760:	mov	r7, #51	; 0x33
   13764:	mov	r6, #97	; 0x61
   13768:	mov	r5, #53	; 0x35
   1376c:	b	137a0 <__assert_fail@plt+0x19d8>
   13770:	cmp	r3, #58	; 0x3a
   13774:	beq	137d4 <__assert_fail@plt+0x1a0c>
   13778:	cmp	r3, #44	; 0x2c
   1377c:	strbeq	ip, [r2]
   13780:	strbeq	r1, [r2, #1]
   13784:	strbeq	r8, [r2, #2]
   13788:	addeq	r2, r2, #3
   1378c:	strbne	r3, [r2]
   13790:	addne	r2, r2, #1
   13794:	ldrb	r3, [r0, #1]!
   13798:	cmp	r3, #0
   1379c:	beq	137c4 <__assert_fail@plt+0x19fc>
   137a0:	cmp	r3, #37	; 0x25
   137a4:	bne	13770 <__assert_fail@plt+0x19a8>
   137a8:	strb	r3, [r2]
   137ac:	add	r2, r2, #3
   137b0:	strb	r1, [r2, #-2]
   137b4:	strb	r5, [r2, #-1]
   137b8:	ldrb	r3, [r0, #1]!
   137bc:	cmp	r3, #0
   137c0:	bne	137a0 <__assert_fail@plt+0x19d8>
   137c4:	ldr	r0, [r4, #16]
   137c8:	mov	r3, #0
   137cc:	strb	r3, [r2]
   137d0:	pop	{r4, r5, r6, r7, r8, pc}
   137d4:	strb	ip, [r2]
   137d8:	add	r2, r2, #3
   137dc:	strb	r7, [r2, #-2]
   137e0:	strb	r6, [r2, #-1]
   137e4:	b	13794 <__assert_fail@plt+0x19cc>
   137e8:	ldr	r0, [r4, #16]
   137ec:	mov	r1, r6
   137f0:	bl	11a20 <realloc@plt>
   137f4:	subs	r7, r0, #0
   137f8:	beq	13814 <__assert_fail@plt+0x1a4c>
   137fc:	mov	r2, r7
   13800:	str	r7, [r4, #16]
   13804:	str	r6, [r4, #12]
   13808:	b	13744 <__assert_fail@plt+0x197c>
   1380c:	mov	r0, r2
   13810:	b	137c8 <__assert_fail@plt+0x1a00>
   13814:	bl	11bf4 <__errno_location@plt>
   13818:	movw	r2, #22608	; 0x5850
   1381c:	movt	r2, #2
   13820:	ldr	r1, [r0]
   13824:	mov	r0, #1
   13828:	bl	12a20 <__assert_fail@plt+0xc58>
   1382c:	b	137fc <__assert_fail@plt+0x1a34>
   13830:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13834:	mov	r4, r1
   13838:	ldr	r1, [r0, #16]
   1383c:	mov	r5, r0
   13840:	cmp	r1, #0
   13844:	beq	13a84 <__assert_fail@plt+0x1cbc>
   13848:	ldr	r0, [r0, #12]
   1384c:	bl	12970 <__assert_fail@plt+0xba8>
   13850:	ldrb	r1, [r0]
   13854:	mov	sl, r0
   13858:	cmp	r1, #124	; 0x7c
   1385c:	movne	r9, #0
   13860:	beq	13b78 <__assert_fail@plt+0x1db0>
   13864:	mov	r1, r4
   13868:	ldr	r0, [r5]
   1386c:	movw	r7, #45100	; 0xb02c
   13870:	movt	r7, #3
   13874:	bl	11d74 <fputs@plt>
   13878:	ldr	r3, [r5, #4]
   1387c:	mov	r0, r4
   13880:	movw	r2, #22632	; 0x5868
   13884:	mov	r1, #1
   13888:	movt	r2, #2
   1388c:	bl	11c9c <__fprintf_chk@plt>
   13890:	ldr	r3, [r7]
   13894:	cmp	r3, #0
   13898:	bne	13b0c <__assert_fail@plt+0x1d44>
   1389c:	ldr	r3, [r5, #8]
   138a0:	movw	r2, #22648	; 0x5878
   138a4:	mov	r0, r4
   138a8:	movt	r2, #2
   138ac:	mov	r1, #1
   138b0:	bl	11c9c <__fprintf_chk@plt>
   138b4:	ldr	r3, [r7]
   138b8:	cmp	r3, #0
   138bc:	bne	13ae0 <__assert_fail@plt+0x1d18>
   138c0:	movw	r6, #20640	; 0x50a0
   138c4:	movt	r6, #2
   138c8:	cmp	sl, #0
   138cc:	beq	13a78 <__assert_fail@plt+0x1cb0>
   138d0:	mov	r0, sl
   138d4:	bl	13718 <__assert_fail@plt+0x1950>
   138d8:	mov	r3, r0
   138dc:	mov	r1, #1
   138e0:	movw	r2, #30116	; 0x75a4
   138e4:	mov	r0, r4
   138e8:	movt	r2, #2
   138ec:	bl	11c9c <__fprintf_chk@plt>
   138f0:	ldr	r3, [r5, #20]
   138f4:	mov	r0, r4
   138f8:	movw	r2, #22648	; 0x5878
   138fc:	mov	r1, #1
   13900:	movt	r2, #2
   13904:	bl	11c9c <__fprintf_chk@plt>
   13908:	ldr	r3, [r7]
   1390c:	cmp	r3, #0
   13910:	bne	13abc <__assert_fail@plt+0x1cf4>
   13914:	ldr	r3, [r5, #20]
   13918:	movw	r2, #22648	; 0x5878
   1391c:	mov	r0, r4
   13920:	movt	r2, #2
   13924:	mov	r1, #1
   13928:	movw	r8, #20640	; 0x50a0
   1392c:	add	r3, r6, r3, lsl #3
   13930:	movt	r8, #2
   13934:	ldr	r3, [r3, #268]	; 0x10c
   13938:	bl	11c9c <__fprintf_chk@plt>
   1393c:	ldr	r3, [r7]
   13940:	cmp	r3, #0
   13944:	bne	13a90 <__assert_fail@plt+0x1cc8>
   13948:	cmp	r9, #0
   1394c:	beq	13a58 <__assert_fail@plt+0x1c90>
   13950:	mov	r0, r9
   13954:	bl	13718 <__assert_fail@plt+0x1950>
   13958:	movw	r2, #30116	; 0x75a4
   1395c:	mov	r1, #1
   13960:	movt	r2, #2
   13964:	mov	r3, r0
   13968:	mov	r0, r4
   1396c:	bl	11c9c <__fprintf_chk@plt>
   13970:	mov	r0, r9
   13974:	bl	1716c <__assert_fail@plt+0x53a4>
   13978:	ldr	r3, [r5, #32]
   1397c:	movw	r7, #23988	; 0x5db4
   13980:	movt	r7, #2
   13984:	mov	r1, #1
   13988:	cmp	r3, #0
   1398c:	movw	r2, #30116	; 0x75a4
   13990:	mov	r0, r4
   13994:	movt	r2, #2
   13998:	moveq	r3, r7
   1399c:	bl	11c9c <__fprintf_chk@plt>
   139a0:	ldr	r3, [r5, #36]	; 0x24
   139a4:	movw	r2, #30116	; 0x75a4
   139a8:	mov	r0, r4
   139ac:	cmp	r3, #0
   139b0:	movt	r2, #2
   139b4:	mov	r1, #1
   139b8:	moveq	r3, r7
   139bc:	bl	11c9c <__fprintf_chk@plt>
   139c0:	ldr	r3, [r5, #20]
   139c4:	add	r6, r6, r3, lsl #3
   139c8:	ldr	r3, [r6, #268]	; 0x10c
   139cc:	cmp	r3, #0
   139d0:	bne	139e0 <__assert_fail@plt+0x1c18>
   139d4:	ldr	r3, [r5, #4]
   139d8:	tst	r3, #4
   139dc:	bne	13a1c <__assert_fail@plt+0x1c54>
   139e0:	ldr	r7, [r5, #40]	; 0x28
   139e4:	movw	r2, #23988	; 0x5db4
   139e8:	movt	r2, #2
   139ec:	cmp	r7, #0
   139f0:	movne	r3, r7
   139f4:	moveq	r3, r2
   139f8:	mov	r0, r4
   139fc:	mov	r1, #1
   13a00:	movw	r2, #30116	; 0x75a4
   13a04:	movt	r2, #2
   13a08:	bl	11c9c <__fprintf_chk@plt>
   13a0c:	mov	r1, r4
   13a10:	mov	r0, #10
   13a14:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a18:	b	11a74 <_IO_putc@plt>
   13a1c:	ldr	r0, [r5, #40]	; 0x28
   13a20:	cmp	r0, #0
   13a24:	beq	13b70 <__assert_fail@plt+0x1da8>
   13a28:	bl	11bac <strlen@plt>
   13a2c:	mov	r1, #1
   13a30:	movw	r2, #22648	; 0x5878
   13a34:	movt	r2, #2
   13a38:	add	r3, r0, r1
   13a3c:	mov	r0, r4
   13a40:	lsr	r3, r3, r1
   13a44:	bl	11c9c <__fprintf_chk@plt>
   13a48:	mov	r1, r4
   13a4c:	mov	r0, #10
   13a50:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a54:	b	11a74 <_IO_putc@plt>
   13a58:	movw	r2, #30116	; 0x75a4
   13a5c:	movw	r3, #23988	; 0x5db4
   13a60:	movt	r2, #2
   13a64:	movt	r3, #2
   13a68:	mov	r0, r4
   13a6c:	mov	r1, #1
   13a70:	bl	11c9c <__fprintf_chk@plt>
   13a74:	b	13978 <__assert_fail@plt+0x1bb0>
   13a78:	movw	r3, #23988	; 0x5db4
   13a7c:	movt	r3, #2
   13a80:	b	138dc <__assert_fail@plt+0x1b14>
   13a84:	mov	r9, r1
   13a88:	mov	sl, r1
   13a8c:	b	13864 <__assert_fail@plt+0x1a9c>
   13a90:	ldr	r3, [r5, #20]
   13a94:	movw	r2, #23024	; 0x59f0
   13a98:	mov	r0, r4
   13a9c:	movt	r2, #2
   13aa0:	mov	r1, #1
   13aa4:	add	r3, r8, r3, lsl #3
   13aa8:	ldr	r3, [r3, #268]	; 0x10c
   13aac:	add	r8, r8, r3, lsl #3
   13ab0:	ldr	r3, [r8, #272]	; 0x110
   13ab4:	bl	11c9c <__fprintf_chk@plt>
   13ab8:	b	13948 <__assert_fail@plt+0x1b80>
   13abc:	ldr	r3, [r5, #20]
   13ac0:	movw	r2, #23024	; 0x59f0
   13ac4:	mov	r0, r4
   13ac8:	movt	r2, #2
   13acc:	mov	r1, #1
   13ad0:	add	r3, r6, r3, lsl #3
   13ad4:	ldr	r3, [r3, #272]	; 0x110
   13ad8:	bl	11c9c <__fprintf_chk@plt>
   13adc:	b	13914 <__assert_fail@plt+0x1b4c>
   13ae0:	ldr	r3, [r5, #8]
   13ae4:	movw	r6, #20640	; 0x50a0
   13ae8:	movt	r6, #2
   13aec:	movw	r2, #23024	; 0x59f0
   13af0:	mov	r0, r4
   13af4:	movt	r2, #2
   13af8:	add	r3, r6, r3, lsl #2
   13afc:	mov	r1, #1
   13b00:	ldr	r3, [r3, #644]	; 0x284
   13b04:	bl	11c9c <__fprintf_chk@plt>
   13b08:	b	138c8 <__assert_fail@plt+0x1b00>
   13b0c:	mov	r0, #32
   13b10:	mov	r1, r4
   13b14:	bl	11a74 <_IO_putc@plt>
   13b18:	ldr	r6, [r5, #4]
   13b1c:	cmp	r6, #0
   13b20:	beq	13bbc <__assert_fail@plt+0x1df4>
   13b24:	ldr	fp, [pc, #172]	; 13bd8 <__assert_fail@plt+0x1e10>
   13b28:	mov	r8, #0
   13b2c:	mov	r3, #1
   13b30:	b	13b50 <__assert_fail@plt+0x1d88>
   13b34:	ldr	r0, [fp, r8]
   13b38:	mov	r1, r4
   13b3c:	bl	11d74 <fputs@plt>
   13b40:	mov	r3, #0
   13b44:	lsrs	r6, r6, #1
   13b48:	add	r8, r8, #4
   13b4c:	beq	1389c <__assert_fail@plt+0x1ad4>
   13b50:	tst	r6, #1
   13b54:	beq	13b44 <__assert_fail@plt+0x1d7c>
   13b58:	cmp	r3, #0
   13b5c:	bne	13b34 <__assert_fail@plt+0x1d6c>
   13b60:	mov	r1, r4
   13b64:	mov	r0, #44	; 0x2c
   13b68:	bl	11a74 <_IO_putc@plt>
   13b6c:	b	13b34 <__assert_fail@plt+0x1d6c>
   13b70:	mov	r3, r7
   13b74:	b	139f8 <__assert_fail@plt+0x1c30>
   13b78:	add	r6, r0, #1
   13b7c:	mov	r0, r6
   13b80:	bl	11bc4 <strchr@plt>
   13b84:	cmp	r0, #0
   13b88:	moveq	r9, r0
   13b8c:	beq	13864 <__assert_fail@plt+0x1a9c>
   13b90:	rsb	r7, r6, r0
   13b94:	add	sl, r0, #1
   13b98:	add	r0, r7, #1
   13b9c:	bl	170bc <__assert_fail@plt+0x52f4>
   13ba0:	mov	r1, r6
   13ba4:	mov	r2, r7
   13ba8:	mov	r9, r0
   13bac:	bl	11978 <memcpy@plt>
   13bb0:	mov	r3, #0
   13bb4:	strb	r3, [r9, r7]
   13bb8:	b	13864 <__assert_fail@plt+0x1a9c>
   13bbc:	movw	r0, #22640	; 0x5870
   13bc0:	mov	r1, #1
   13bc4:	mov	r2, #4
   13bc8:	mov	r3, r4
   13bcc:	movt	r0, #2
   13bd0:	bl	11a80 <fwrite@plt>
   13bd4:	b	1389c <__assert_fail@plt+0x1ad4>
   13bd8:	andeq	r5, r2, r4, lsl #6
   13bdc:	movw	r1, #44624	; 0xae50
   13be0:	movt	r1, #3
   13be4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13be8:	sub	sp, sp, #52	; 0x34
   13bec:	ldr	r4, [pc, #336]	; 13d44 <__assert_fail@plt+0x1f7c>
   13bf0:	add	sl, sp, #40	; 0x28
   13bf4:	ldr	r3, [r1]
   13bf8:	mov	r6, r0
   13bfc:	add	r8, r4, #80	; 0x50
   13c00:	sub	r7, r4, #12
   13c04:	mov	r5, #0
   13c08:	str	r1, [sp, #12]
   13c0c:	str	r3, [sp, #44]	; 0x2c
   13c10:	ldr	r3, [r4]
   13c14:	cmp	r3, #0
   13c18:	beq	13ce4 <__assert_fail@plt+0x1f1c>
   13c1c:	add	r2, sp, #12
   13c20:	str	r5, [r2, #4]!
   13c24:	cmp	r2, sl
   13c28:	bne	13c20 <__assert_fail@plt+0x1e58>
   13c2c:	add	r3, r3, #52	; 0x34
   13c30:	mov	ip, #1
   13c34:	ldr	r2, [r3, #-52]	; 0xffffffcc
   13c38:	cmp	r2, #0
   13c3c:	beq	13d18 <__assert_fail@plt+0x1f50>
   13c40:	ldr	r2, [r3, #-48]	; 0xffffffd0
   13c44:	tst	r2, #1
   13c48:	bne	13d0c <__assert_fail@plt+0x1f44>
   13c4c:	ldr	r2, [r3, #-28]	; 0xffffffe4
   13c50:	add	r0, sp, #48	; 0x30
   13c54:	add	r1, r0, r2, lsl #2
   13c58:	ldr	r0, [r1, #-32]	; 0xffffffe0
   13c5c:	cmp	r0, #0
   13c60:	bne	13d0c <__assert_fail@plt+0x1f44>
   13c64:	cmp	r2, #0
   13c68:	str	ip, [r1, #-32]	; 0xffffffe0
   13c6c:	beq	13d24 <__assert_fail@plt+0x1f5c>
   13c70:	add	r2, r2, r2, lsl #1
   13c74:	add	r2, r7, r2, lsl #3
   13c78:	ldr	r1, [r2, #84]	; 0x54
   13c7c:	ldrb	r0, [r2, #88]	; 0x58
   13c80:	cmp	r1, #0
   13c84:	beq	13c90 <__assert_fail@plt+0x1ec8>
   13c88:	cmp	r0, #0
   13c8c:	beq	13d0c <__assert_fail@plt+0x1f44>
   13c90:	bl	176f8 <__assert_fail@plt+0x5930>
   13c94:	mov	fp, r0
   13c98:	ldmdb	r4, {r0, r1}
   13c9c:	bl	12970 <__assert_fail@plt+0xba8>
   13ca0:	ldr	r9, [r4, #-12]
   13ca4:	bl	13718 <__assert_fail@plt+0x1950>
   13ca8:	mov	r1, #1
   13cac:	movw	r2, #22680	; 0x5898
   13cb0:	movt	r2, #2
   13cb4:	mov	r3, r9
   13cb8:	str	r0, [sp]
   13cbc:	mov	r0, r6
   13cc0:	bl	11c9c <__fprintf_chk@plt>
   13cc4:	mov	r0, fp
   13cc8:	bl	13718 <__assert_fail@plt+0x1950>
   13ccc:	movw	r2, #30488	; 0x7718
   13cd0:	mov	r1, #1
   13cd4:	movt	r2, #2
   13cd8:	mov	r3, r0
   13cdc:	mov	r0, r6
   13ce0:	bl	11c9c <__fprintf_chk@plt>
   13ce4:	add	r4, r4, #16
   13ce8:	cmp	r4, r8
   13cec:	bne	13c10 <__assert_fail@plt+0x1e48>
   13cf0:	ldr	r1, [sp, #12]
   13cf4:	ldr	r2, [sp, #44]	; 0x2c
   13cf8:	ldr	r3, [r1]
   13cfc:	cmp	r2, r3
   13d00:	bne	13d40 <__assert_fail@plt+0x1f78>
   13d04:	add	sp, sp, #52	; 0x34
   13d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d0c:	cmp	r3, #0
   13d10:	add	r3, r3, #52	; 0x34
   13d14:	bne	13c34 <__assert_fail@plt+0x1e6c>
   13d18:	movw	fp, #23988	; 0x5db4
   13d1c:	movt	fp, #2
   13d20:	b	13c98 <__assert_fail@plt+0x1ed0>
   13d24:	movw	r0, #22652	; 0x587c
   13d28:	movw	r1, #21836	; 0x554c
   13d2c:	movt	r0, #2
   13d30:	movt	r1, #2
   13d34:	movw	r2, #1308	; 0x51c
   13d38:	ldr	r3, [pc, #8]	; 13d48 <__assert_fail@plt+0x1f80>
   13d3c:	bl	11dc8 <__assert_fail@plt>
   13d40:	bl	119d8 <__stack_chk_fail@plt>
   13d44:	andeq	r5, r2, ip, lsr #1
   13d48:	andeq	r5, r2, r8, lsr r3
   13d4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13d50:	movw	r8, #44624	; 0xae50
   13d54:	movt	r8, #3
   13d58:	sub	sp, sp, #84	; 0x54
   13d5c:	add	r3, sp, #44	; 0x2c
   13d60:	add	ip, sp, #72	; 0x48
   13d64:	ldr	r4, [r8]
   13d68:	mov	r6, r2
   13d6c:	mov	r9, r0
   13d70:	mov	r5, r1
   13d74:	mov	r2, #0
   13d78:	str	r4, [sp, #76]	; 0x4c
   13d7c:	str	r2, [r3, #4]!
   13d80:	cmp	r3, ip
   13d84:	bne	13d7c <__assert_fail@plt+0x1fb4>
   13d88:	movw	r4, #20640	; 0x50a0
   13d8c:	lsl	sl, r9, #4
   13d90:	movt	r4, #2
   13d94:	add	r3, r4, sl
   13d98:	ldr	r1, [r3, #12]
   13d9c:	cmp	r1, #0
   13da0:	beq	14004 <__assert_fail@plt+0x223c>
   13da4:	ldr	r3, [r1]
   13da8:	cmp	r3, #0
   13dac:	beq	14004 <__assert_fail@plt+0x223c>
   13db0:	add	r3, r1, #52	; 0x34
   13db4:	mov	ip, #1
   13db8:	ldr	r0, [r3, #-48]	; 0xffffffd0
   13dbc:	mov	r2, r1
   13dc0:	tst	r0, #1
   13dc4:	bne	13fe8 <__assert_fail@plt+0x2220>
   13dc8:	ldr	r0, [r3, #-28]	; 0xffffffe4
   13dcc:	add	r7, sp, #80	; 0x50
   13dd0:	add	fp, r7, r0, lsl #2
   13dd4:	ldr	r7, [fp, #-32]	; 0xffffffe0
   13dd8:	cmp	r7, #0
   13ddc:	bne	13fe8 <__assert_fail@plt+0x2220>
   13de0:	cmp	r0, #0
   13de4:	str	ip, [fp, #-32]	; 0xffffffe0
   13de8:	beq	140f4 <__assert_fail@plt+0x232c>
   13dec:	add	r0, r0, r0, lsl #1
   13df0:	add	r0, r4, r0, lsl #3
   13df4:	ldr	fp, [r0, #84]	; 0x54
   13df8:	cmp	fp, #0
   13dfc:	beq	13fe8 <__assert_fail@plt+0x2220>
   13e00:	ldrb	r0, [r0, #88]	; 0x58
   13e04:	cmp	r0, #0
   13e08:	beq	13fe8 <__assert_fail@plt+0x2220>
   13e0c:	ldr	r3, [r1]
   13e10:	cmp	r3, #0
   13e14:	beq	14004 <__assert_fail@plt+0x223c>
   13e18:	bl	176f8 <__assert_fail@plt+0x5930>
   13e1c:	cmp	r6, #0
   13e20:	strne	r6, [sp, #36]	; 0x24
   13e24:	mov	r6, #0
   13e28:	movwne	r3, #22688	; 0x58a0
   13e2c:	movne	r2, #3
   13e30:	movne	r1, #2
   13e34:	moveq	r2, #1
   13e38:	moveq	r1, r7
   13e3c:	movtne	r3, #2
   13e40:	strne	r3, [sp, #32]
   13e44:	add	r3, sp, #80	; 0x50
   13e48:	mov	fp, r0
   13e4c:	add	r1, r3, r1, lsl #2
   13e50:	add	r2, r3, r2, lsl #2
   13e54:	add	r0, sp, #24
   13e58:	movw	r3, #22700	; 0x58ac
   13e5c:	movt	r3, #2
   13e60:	str	r3, [r1, #-48]	; 0xffffffd0
   13e64:	str	r6, [r2, #-48]	; 0xffffffd0
   13e68:	bl	192a4 <__assert_fail@plt+0x74dc>
   13e6c:	subs	r3, r0, #0
   13e70:	bne	140b0 <__assert_fail@plt+0x22e8>
   13e74:	ldr	r1, [sp, #28]
   13e78:	mvn	r2, #0
   13e7c:	add	ip, sp, #16
   13e80:	mov	r3, r2
   13e84:	mov	r0, fp
   13e88:	stm	sp, {r1, ip}
   13e8c:	add	r1, sp, #32
   13e90:	bl	194f8 <__assert_fail@plt+0x7730>
   13e94:	cmp	r0, #0
   13e98:	beq	14024 <__assert_fail@plt+0x225c>
   13e9c:	ldr	r0, [sp, #24]
   13ea0:	mov	r7, #3
   13ea4:	bl	11d98 <close@plt>
   13ea8:	ldr	r0, [sp, #28]
   13eac:	bl	11d98 <close@plt>
   13eb0:	mov	r6, #0
   13eb4:	mov	ip, r7
   13eb8:	cmp	r5, #0
   13ebc:	beq	14078 <__assert_fail@plt+0x22b0>
   13ec0:	add	sl, r4, sl
   13ec4:	str	ip, [sp, #12]
   13ec8:	ldmib	sl, {r0, r1}
   13ecc:	bl	12970 <__assert_fail@plt+0xba8>
   13ed0:	ldr	r4, [r4, r9, lsl #4]
   13ed4:	bl	13718 <__assert_fail@plt+0x1950>
   13ed8:	mov	r1, #1
   13edc:	movw	r2, #22680	; 0x5898
   13ee0:	movt	r2, #2
   13ee4:	mov	r3, r4
   13ee8:	str	r0, [sp]
   13eec:	mov	r0, r5
   13ef0:	bl	11c9c <__fprintf_chk@plt>
   13ef4:	mov	r0, fp
   13ef8:	bl	13718 <__assert_fail@plt+0x1950>
   13efc:	mov	r1, r5
   13f00:	bl	11d74 <fputs@plt>
   13f04:	ldr	ip, [sp, #12]
   13f08:	mov	r0, r5
   13f0c:	mov	r1, #1
   13f10:	eor	r2, ip, #2
   13f14:	and	r3, ip, #1
   13f18:	ubfx	r2, r2, #1, #1
   13f1c:	eor	r3, r3, #1
   13f20:	str	r2, [sp]
   13f24:	movw	r2, #22744	; 0x58d8
   13f28:	movt	r2, #2
   13f2c:	bl	11c9c <__fprintf_chk@plt>
   13f30:	cmp	r6, #0
   13f34:	movne	r4, r6
   13f38:	beq	140a0 <__assert_fail@plt+0x22d8>
   13f3c:	ldr	r0, [r4, #4]
   13f40:	cmp	r0, #0
   13f44:	beq	13f54 <__assert_fail@plt+0x218c>
   13f48:	bl	13718 <__assert_fail@plt+0x1950>
   13f4c:	mov	r1, r5
   13f50:	bl	11d74 <fputs@plt>
   13f54:	mov	r0, #58	; 0x3a
   13f58:	mov	r1, r5
   13f5c:	bl	11a74 <_IO_putc@plt>
   13f60:	ldr	r3, [r4, #4]
   13f64:	cmp	r3, #0
   13f68:	beq	13f84 <__assert_fail@plt+0x21bc>
   13f6c:	movw	r2, #22760	; 0x58e8
   13f70:	mov	r0, r5
   13f74:	movt	r2, #2
   13f78:	mov	r1, #1
   13f7c:	ldr	r3, [r4, #8]
   13f80:	bl	11c9c <__fprintf_chk@plt>
   13f84:	mov	r1, r5
   13f88:	mov	r0, #58	; 0x3a
   13f8c:	bl	11a74 <_IO_putc@plt>
   13f90:	ldr	r0, [r4, #12]
   13f94:	bl	13718 <__assert_fail@plt+0x1950>
   13f98:	mov	r1, r5
   13f9c:	bl	11d74 <fputs@plt>
   13fa0:	mov	r0, #58	; 0x3a
   13fa4:	mov	r1, r5
   13fa8:	bl	11a74 <_IO_putc@plt>
   13fac:	ldr	r4, [r4]
   13fb0:	cmp	r4, #0
   13fb4:	beq	140a0 <__assert_fail@plt+0x22d8>
   13fb8:	cmp	r4, r6
   13fbc:	beq	13f3c <__assert_fail@plt+0x2174>
   13fc0:	movw	r0, #22752	; 0x58e0
   13fc4:	mov	r1, #1
   13fc8:	movt	r0, #2
   13fcc:	mov	r2, #6
   13fd0:	mov	r3, r5
   13fd4:	bl	11a80 <fwrite@plt>
   13fd8:	ldr	r0, [r4, #4]
   13fdc:	cmp	r0, #0
   13fe0:	bne	13f48 <__assert_fail@plt+0x2180>
   13fe4:	b	13f54 <__assert_fail@plt+0x218c>
   13fe8:	cmp	r3, #0
   13fec:	beq	14004 <__assert_fail@plt+0x223c>
   13ff0:	ldr	r2, [r2, #52]	; 0x34
   13ff4:	add	r3, r3, #52	; 0x34
   13ff8:	add	r1, r1, #52	; 0x34
   13ffc:	cmp	r2, #0
   14000:	bne	13db8 <__assert_fail@plt+0x1ff0>
   14004:	mov	r7, #0
   14008:	ldr	r2, [sp, #76]	; 0x4c
   1400c:	mov	r0, r7
   14010:	ldr	r3, [r8]
   14014:	cmp	r2, r3
   14018:	bne	14110 <__assert_fail@plt+0x2348>
   1401c:	add	sp, sp, #84	; 0x54
   14020:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14024:	ldr	r0, [sp, #28]
   14028:	bl	11d98 <close@plt>
   1402c:	ldr	r1, [r4, r9, lsl #4]
   14030:	ldr	r0, [sp, #24]
   14034:	bl	12bd0 <__assert_fail@plt+0xe08>
   14038:	ldr	r1, [sp, #16]
   1403c:	add	r2, sp, #20
   14040:	mov	r6, r0
   14044:	mov	r0, fp
   14048:	bl	195ac <__assert_fail@plt+0x77e4>
   1404c:	cmp	r0, #0
   14050:	moveq	ip, r0
   14054:	beq	13eb8 <__assert_fail@plt+0x20f0>
   14058:	ldr	r7, [sp, #20]
   1405c:	cmn	r7, #1
   14060:	movne	r7, #0
   14064:	moveq	r7, #1
   14068:	cmp	r5, #0
   1406c:	orr	r7, r7, #2
   14070:	mov	ip, r7
   14074:	bne	13ec0 <__assert_fail@plt+0x20f8>
   14078:	cmp	r6, #0
   1407c:	bne	14088 <__assert_fail@plt+0x22c0>
   14080:	b	14008 <__assert_fail@plt+0x2240>
   14084:	mov	r6, r4
   14088:	ldr	r4, [r6]
   1408c:	mov	r0, r6
   14090:	bl	1716c <__assert_fail@plt+0x53a4>
   14094:	cmp	r4, #0
   14098:	bne	14084 <__assert_fail@plt+0x22bc>
   1409c:	b	14008 <__assert_fail@plt+0x2240>
   140a0:	mov	r1, r5
   140a4:	mov	r0, #10
   140a8:	bl	11a74 <_IO_putc@plt>
   140ac:	b	14078 <__assert_fail@plt+0x22b0>
   140b0:	mov	r0, r6
   140b4:	mov	r2, #5
   140b8:	movw	r1, #22716	; 0x58bc
   140bc:	movt	r1, #2
   140c0:	str	r3, [sp, #12]
   140c4:	bl	119cc <dcgettext@plt>
   140c8:	ldr	r3, [sp, #12]
   140cc:	mov	r2, r0
   140d0:	mov	r0, r3
   140d4:	str	r2, [sp, #12]
   140d8:	bl	118f4 <gpg_strerror@plt>
   140dc:	ldr	r2, [sp, #12]
   140e0:	mov	r1, r6
   140e4:	mov	r3, r0
   140e8:	mov	r0, #1
   140ec:	bl	12a20 <__assert_fail@plt+0xc58>
   140f0:	b	13e74 <__assert_fail@plt+0x20ac>
   140f4:	movw	r0, #22652	; 0x587c
   140f8:	movw	r1, #21836	; 0x554c
   140fc:	movt	r0, #2
   14100:	movt	r1, #2
   14104:	movw	r2, #1462	; 0x5b6
   14108:	ldr	r3, [pc, #4]	; 14114 <__assert_fail@plt+0x234c>
   1410c:	bl	11dc8 <__assert_fail@plt>
   14110:	bl	119d8 <__stack_chk_fail@plt>
   14114:	andeq	r5, r2, r8, asr r3
   14118:	push	{r3, r4, r5, lr}
   1411c:	mov	r5, r0
   14120:	mov	r4, #0
   14124:	mov	r0, r4
   14128:	mov	r1, r5
   1412c:	add	r4, r4, #1
   14130:	mov	r2, #0
   14134:	bl	13d4c <__assert_fail@plt+0x1f84>
   14138:	cmp	r4, #5
   1413c:	bne	14124 <__assert_fail@plt+0x235c>
   14140:	pop	{r3, r4, r5, pc}
   14144:	push	{r4, r5, r6, lr}
   14148:	mov	r6, r0
   1414c:	ldr	r4, [pc, #64]	; 14194 <__assert_fail@plt+0x23cc>
   14150:	mov	r5, #0
   14154:	ldr	r3, [r4]
   14158:	mov	r0, r6
   1415c:	cmp	r3, #0
   14160:	beq	14174 <__assert_fail@plt+0x23ac>
   14164:	ldr	r1, [r4, #-12]
   14168:	bl	118dc <strcmp@plt>
   1416c:	cmp	r0, #0
   14170:	beq	1418c <__assert_fail@plt+0x23c4>
   14174:	add	r5, r5, #1
   14178:	add	r4, r4, #16
   1417c:	cmp	r5, #5
   14180:	bne	14154 <__assert_fail@plt+0x238c>
   14184:	mvn	r0, #0
   14188:	pop	{r4, r5, r6, pc}
   1418c:	mov	r0, r5
   14190:	pop	{r4, r5, r6, pc}
   14194:	andeq	r5, r2, ip, lsr #1
   14198:	movw	r3, #20640	; 0x50a0
   1419c:	movt	r3, #2
   141a0:	add	r0, r3, r0, lsl #4
   141a4:	movw	r2, #44624	; 0xae50
   141a8:	movt	r2, #3
   141ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141b0:	sub	sp, sp, #68	; 0x44
   141b4:	ldr	sl, [r0, #12]
   141b8:	ldr	r3, [r2]
   141bc:	cmp	sl, #0
   141c0:	str	r2, [sp]
   141c4:	str	r1, [sp, #4]
   141c8:	str	r3, [sp, #60]	; 0x3c
   141cc:	beq	142f0 <__assert_fail@plt+0x2528>
   141d0:	ldr	r3, [sl]
   141d4:	cmp	r3, #0
   141d8:	beq	142f0 <__assert_fail@plt+0x2528>
   141dc:	add	r8, sl, #52	; 0x34
   141e0:	mov	r5, sl
   141e4:	mov	r4, r8
   141e8:	b	1422c <__assert_fail@plt+0x2464>
   141ec:	ldr	r3, [r4, #-24]	; 0xffffffe8
   141f0:	cmp	r3, #0
   141f4:	beq	14210 <__assert_fail@plt+0x2448>
   141f8:	ldr	r3, [r4, #-44]	; 0xffffffd4
   141fc:	cmp	r3, #4
   14200:	beq	14210 <__assert_fail@plt+0x2448>
   14204:	mov	r0, r5
   14208:	ldr	r1, [sp, #4]
   1420c:	bl	13830 <__assert_fail@plt+0x1a68>
   14210:	cmp	r4, #0
   14214:	beq	142f0 <__assert_fail@plt+0x2528>
   14218:	ldr	r3, [r6]
   1421c:	add	r5, r5, #52	; 0x34
   14220:	add	r4, r4, #52	; 0x34
   14224:	cmp	r3, #0
   14228:	beq	142f0 <__assert_fail@plt+0x2528>
   1422c:	ldr	r3, [r4, #-48]	; 0xffffffd0
   14230:	mov	r6, r4
   14234:	tst	r3, #1
   14238:	beq	141ec <__assert_fail@plt+0x2424>
   1423c:	rsb	r3, sl, r5
   14240:	ldr	r2, [r3, r8]
   14244:	cmp	r2, #0
   14248:	beq	14210 <__assert_fail@plt+0x2448>
   1424c:	add	r3, r3, r8
   14250:	ldr	r3, [r3, #4]
   14254:	tst	r3, #1
   14258:	bne	14210 <__assert_fail@plt+0x2448>
   1425c:	mov	r3, r4
   14260:	mov	ip, #5
   14264:	b	14278 <__assert_fail@plt+0x24b0>
   14268:	ldr	r2, [r0, #56]	; 0x38
   1426c:	add	r3, r3, #52	; 0x34
   14270:	tst	r2, #1
   14274:	bne	14294 <__assert_fail@plt+0x24cc>
   14278:	ldr	r1, [r3, #8]
   1427c:	mov	r0, r3
   14280:	ldr	r2, [r3, #52]	; 0x34
   14284:	cmp	ip, r1
   14288:	movcs	ip, r1
   1428c:	cmp	r2, #0
   14290:	bne	14268 <__assert_fail@plt+0x24a0>
   14294:	cmp	ip, #5
   14298:	beq	14210 <__assert_fail@plt+0x2448>
   1429c:	add	fp, r5, #48	; 0x30
   142a0:	add	r9, sp, #8
   142a4:	mov	lr, r5
   142a8:	ldr	r0, [lr]
   142ac:	add	lr, lr, #16
   142b0:	ldr	r1, [lr, #-12]
   142b4:	mov	r7, r9
   142b8:	ldr	r2, [lr, #-8]
   142bc:	add	r9, r9, #16
   142c0:	ldr	r3, [lr, #-4]
   142c4:	cmp	lr, fp
   142c8:	stmia	r7!, {r0, r1, r2, r3}
   142cc:	bne	142a8 <__assert_fail@plt+0x24e0>
   142d0:	ldr	r0, [lr]
   142d4:	ldr	r1, [sp, #4]
   142d8:	str	r0, [r9]
   142dc:	add	r0, sp, #8
   142e0:	str	ip, [sp, #16]
   142e4:	bl	13830 <__assert_fail@plt+0x1a68>
   142e8:	cmp	r4, #0
   142ec:	bne	14218 <__assert_fail@plt+0x2450>
   142f0:	ldr	r1, [sp]
   142f4:	ldr	r2, [sp, #60]	; 0x3c
   142f8:	ldr	r3, [r1]
   142fc:	cmp	r2, r3
   14300:	bne	1430c <__assert_fail@plt+0x2544>
   14304:	add	sp, sp, #68	; 0x44
   14308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1430c:	bl	119d8 <__stack_chk_fail@plt>
   14310:	movw	ip, #44624	; 0xae50
   14314:	movt	ip, #3
   14318:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1431c:	sub	sp, sp, #116	; 0x74
   14320:	ldr	r2, [ip]
   14324:	add	r3, sp, #76	; 0x4c
   14328:	add	r1, sp, #104	; 0x68
   1432c:	str	r0, [sp, #8]
   14330:	mov	r0, #0
   14334:	str	ip, [sp, #36]	; 0x24
   14338:	str	r2, [sp, #108]	; 0x6c
   1433c:	str	r0, [r3, #4]!
   14340:	cmp	r3, r1
   14344:	bne	1433c <__assert_fail@plt+0x2574>
   14348:	ldr	ip, [sp, #8]
   1434c:	cmn	ip, #1
   14350:	moveq	ip, #1
   14354:	streq	ip, [sp, #44]	; 0x2c
   14358:	moveq	ip, #0
   1435c:	streq	ip, [sp, #8]
   14360:	ldr	r1, [sp, #8]
   14364:	movne	ip, #0
   14368:	strne	ip, [sp, #44]	; 0x2c
   1436c:	movw	ip, #20640	; 0x50a0
   14370:	movt	ip, #2
   14374:	str	ip, [sp, #32]
   14378:	add	ip, ip, r1, lsl #4
   1437c:	str	ip, [sp, #40]	; 0x28
   14380:	ldr	ip, [sp, #40]	; 0x28
   14384:	ldr	r3, [ip, #12]
   14388:	cmp	r3, #0
   1438c:	beq	14718 <__assert_fail@plt+0x2950>
   14390:	ldr	r2, [r3]
   14394:	cmp	r2, #0
   14398:	beq	14718 <__assert_fail@plt+0x2950>
   1439c:	add	r3, r3, #52	; 0x34
   143a0:	str	r3, [sp, #16]
   143a4:	ldr	ip, [sp, #16]
   143a8:	ldr	r3, [ip, #-48]	; 0xffffffd0
   143ac:	str	ip, [sp, #28]
   143b0:	tst	r3, #1
   143b4:	bne	146f0 <__assert_fail@plt+0x2928>
   143b8:	ldr	fp, [ip, #-28]	; 0xffffffe4
   143bc:	add	r1, sp, #112	; 0x70
   143c0:	add	r3, r1, fp, lsl #2
   143c4:	ldr	r6, [r3, #-32]	; 0xffffffe0
   143c8:	cmp	r6, #0
   143cc:	bne	146f0 <__assert_fail@plt+0x2928>
   143d0:	cmp	fp, #0
   143d4:	mov	r5, #1
   143d8:	str	r5, [r3, #-32]	; 0xffffffe0
   143dc:	beq	14ddc <__assert_fail@plt+0x3014>
   143e0:	lsl	r4, fp, #1
   143e4:	ldr	ip, [sp, #32]
   143e8:	add	r3, r4, fp
   143ec:	add	r3, ip, r3, lsl #3
   143f0:	ldr	ip, [r3, #84]	; 0x54
   143f4:	cmp	ip, #0
   143f8:	str	ip, [sp, #24]
   143fc:	beq	14bbc <__assert_fail@plt+0x2df4>
   14400:	add	r0, sp, #64	; 0x40
   14404:	str	r6, [sp, #52]	; 0x34
   14408:	str	r6, [sp, #56]	; 0x38
   1440c:	bl	192a4 <__assert_fail@plt+0x74dc>
   14410:	subs	r7, r0, #0
   14414:	bne	14b5c <__assert_fail@plt+0x2d94>
   14418:	add	r3, r4, fp
   1441c:	ldr	ip, [sp, #32]
   14420:	add	r3, ip, r3, lsl #3
   14424:	ldrb	r0, [r3, #88]	; 0x58
   14428:	cmp	r0, #0
   1442c:	bne	14b50 <__assert_fail@plt+0x2d88>
   14430:	mvn	r1, #0
   14434:	ldr	r3, [sp, #68]	; 0x44
   14438:	mov	r2, r1
   1443c:	str	r1, [sp]
   14440:	ldr	r0, [sp, #24]
   14444:	add	r1, sp, #48	; 0x30
   14448:	str	r1, [sp, #4]
   1444c:	add	r1, sp, #72	; 0x48
   14450:	movw	ip, #22764	; 0x58ec
   14454:	mov	r4, #0
   14458:	movt	ip, #2
   1445c:	str	r4, [sp, #76]	; 0x4c
   14460:	str	ip, [sp, #72]	; 0x48
   14464:	bl	194f8 <__assert_fail@plt+0x7730>
   14468:	subs	r5, r0, #0
   1446c:	bne	14b18 <__assert_fail@plt+0x2d50>
   14470:	ldr	r0, [sp, #68]	; 0x44
   14474:	bl	11d98 <close@plt>
   14478:	movw	r1, #24728	; 0x6098
   1447c:	ldr	r0, [sp, #64]	; 0x40
   14480:	movt	r1, #2
   14484:	bl	1187c <fdopen@plt>
   14488:	cmp	r0, #0
   1448c:	str	r0, [sp, #12]
   14490:	beq	14d40 <__assert_fail@plt+0x2f78>
   14494:	add	r9, sp, #52	; 0x34
   14498:	add	r8, sp, #56	; 0x38
   1449c:	add	ip, sp, #60	; 0x3c
   144a0:	str	ip, [sp, #20]
   144a4:	mov	r4, #0
   144a8:	ldr	r0, [sp, #12]
   144ac:	mov	r1, r9
   144b0:	mov	r2, r8
   144b4:	mov	r3, #0
   144b8:	bl	18cbc <__assert_fail@plt+0x6ef4>
   144bc:	cmp	r0, #0
   144c0:	ble	14774 <__assert_fail@plt+0x29ac>
   144c4:	sub	r3, r0, #1
   144c8:	ldr	r0, [sp, #52]	; 0x34
   144cc:	ldrb	r2, [r0, r3]
   144d0:	cmp	r2, #10
   144d4:	cmpne	r2, #13
   144d8:	bne	14620 <__assert_fail@plt+0x2858>
   144dc:	strb	r4, [r0, r3]
   144e0:	subs	r3, r3, #1
   144e4:	bcs	144c8 <__assert_fail@plt+0x2700>
   144e8:	ldr	r5, [sp, #52]	; 0x34
   144ec:	mov	r0, r5
   144f0:	mov	r1, #58	; 0x3a
   144f4:	bl	11bc4 <strchr@plt>
   144f8:	cmp	r0, #0
   144fc:	beq	14768 <__assert_fail@plt+0x29a0>
   14500:	adds	r5, r0, #1
   14504:	strb	r4, [r0]
   14508:	beq	14764 <__assert_fail@plt+0x299c>
   1450c:	mov	r1, #58	; 0x3a
   14510:	mov	r0, r5
   14514:	bl	11bc4 <strchr@plt>
   14518:	cmp	r0, #0
   1451c:	strbne	r4, [r0]
   14520:	addne	r6, r0, #1
   14524:	moveq	r6, r0
   14528:	bl	11bf4 <__errno_location@plt>
   1452c:	ldr	r1, [sp, #20]
   14530:	mov	r2, #0
   14534:	mov	sl, r0
   14538:	str	r4, [r0]
   1453c:	mov	r0, r5
   14540:	bl	11ba0 <strtoul@plt>
   14544:	ldr	r1, [sl]
   14548:	cmp	r1, #0
   1454c:	mov	r7, r0
   14550:	bne	14628 <__assert_fail@plt+0x2860>
   14554:	ldr	r3, [sp, #60]	; 0x3c
   14558:	ldrb	r3, [r3]
   1455c:	tst	r3, #223	; 0xdf
   14560:	moveq	r2, #0
   14564:	movne	r2, #1
   14568:	cmp	r3, #58	; 0x3a
   1456c:	moveq	r3, #0
   14570:	andne	r3, r2, #1
   14574:	cmp	r3, #0
   14578:	beq	1459c <__assert_fail@plt+0x27d4>
   1457c:	ldr	ip, [sp, #24]
   14580:	movw	r2, #22868	; 0x5954
   14584:	ldr	r3, [sp, #52]	; 0x34
   14588:	movt	r2, #2
   1458c:	mov	r0, #1
   14590:	mov	r1, #0
   14594:	str	ip, [sp]
   14598:	bl	12a20 <__assert_fail@plt+0xc58>
   1459c:	cmp	r6, #0
   145a0:	beq	14dfc <__assert_fail@plt+0x3034>
   145a4:	mov	r0, r6
   145a8:	mov	r1, #58	; 0x3a
   145ac:	bl	11bc4 <strchr@plt>
   145b0:	cmp	r0, #0
   145b4:	strbne	r4, [r0]
   145b8:	ands	r3, r7, #16
   145bc:	ldr	r5, [sp, #52]	; 0x34
   145c0:	moveq	r6, r3
   145c4:	ldr	r0, [sp, #8]
   145c8:	mov	r1, r5
   145cc:	mov	r2, fp
   145d0:	bl	12900 <__assert_fail@plt+0xb38>
   145d4:	subs	sl, r0, #0
   145d8:	beq	144a8 <__assert_fail@plt+0x26e0>
   145dc:	ldr	r3, [sl, #28]
   145e0:	cmp	r3, #0
   145e4:	bne	14b94 <__assert_fail@plt+0x2dcc>
   145e8:	ldr	r3, [sl, #4]
   145ec:	cmp	r6, #0
   145f0:	mov	r1, #1
   145f4:	str	r1, [sl, #28]
   145f8:	orr	r7, r3, r7
   145fc:	str	r7, [sl, #4]
   14600:	beq	144a8 <__assert_fail@plt+0x26e0>
   14604:	ldrb	r3, [r6]
   14608:	cmp	r3, #0
   1460c:	beq	144a8 <__assert_fail@plt+0x26e0>
   14610:	mov	r0, r6
   14614:	bl	17134 <__assert_fail@plt+0x536c>
   14618:	str	r0, [sl, #32]
   1461c:	b	144a8 <__assert_fail@plt+0x26e0>
   14620:	mov	r5, r0
   14624:	b	144ec <__assert_fail@plt+0x2724>
   14628:	ldr	ip, [sp, #24]
   1462c:	movw	r2, #22828	; 0x592c
   14630:	ldr	r3, [sp, #52]	; 0x34
   14634:	mov	r0, #1
   14638:	movt	r2, #2
   1463c:	str	ip, [sp]
   14640:	bl	12a20 <__assert_fail@plt+0xc58>
   14644:	b	14554 <__assert_fail@plt+0x278c>
   14648:	bne	1465c <__assert_fail@plt+0x2894>
   1464c:	mov	r0, r5
   14650:	bl	11960 <ferror@plt>
   14654:	cmp	r0, #0
   14658:	beq	14678 <__assert_fail@plt+0x28b0>
   1465c:	bl	11bf4 <__errno_location@plt>
   14660:	movw	r2, #23208	; 0x5aa8
   14664:	mov	r3, r9
   14668:	movt	r2, #2
   1466c:	ldr	r1, [r0]
   14670:	mov	r0, #1
   14674:	bl	12a20 <__assert_fail@plt+0xc58>
   14678:	ldr	ip, [sp, #32]
   1467c:	add	r3, r4, fp
   14680:	mov	r2, #1
   14684:	str	r6, [r7, #40]	; 0x28
   14688:	add	r3, ip, r3, lsl #3
   1468c:	str	r2, [r7, #28]
   14690:	ldr	r0, [sp, #8]
   14694:	mov	r2, #0
   14698:	ldr	r1, [r3, #96]	; 0x60
   1469c:	bl	12900 <__assert_fail@plt+0xb38>
   146a0:	ldr	r3, [r0, #4]
   146a4:	tst	r3, #128	; 0x80
   146a8:	ldrne	r3, [r7, #4]
   146ac:	orrne	r3, r3, #128	; 0x80
   146b0:	strne	r3, [r7, #4]
   146b4:	cmp	r5, #0
   146b8:	beq	146e8 <__assert_fail@plt+0x2920>
   146bc:	mov	r0, r5
   146c0:	bl	11cc0 <fclose@plt>
   146c4:	cmp	r0, #0
   146c8:	beq	146e8 <__assert_fail@plt+0x2920>
   146cc:	bl	11bf4 <__errno_location@plt>
   146d0:	movw	r2, #22972	; 0x59bc
   146d4:	mov	r3, r9
   146d8:	movt	r2, #2
   146dc:	ldr	r1, [r0]
   146e0:	mov	r0, #1
   146e4:	bl	12a20 <__assert_fail@plt+0xc58>
   146e8:	ldr	r0, [sp, #56]	; 0x38
   146ec:	bl	1716c <__assert_fail@plt+0x53a4>
   146f0:	ldr	ip, [sp, #16]
   146f4:	cmp	ip, #0
   146f8:	beq	14718 <__assert_fail@plt+0x2950>
   146fc:	ldr	ip, [sp, #28]
   14700:	ldr	r3, [ip]
   14704:	ldr	ip, [sp, #16]
   14708:	cmp	r3, #0
   1470c:	add	ip, ip, #52	; 0x34
   14710:	str	ip, [sp, #16]
   14714:	bne	143a4 <__assert_fail@plt+0x25dc>
   14718:	ldr	ip, [sp, #44]	; 0x2c
   1471c:	cmp	ip, #0
   14720:	beq	14748 <__assert_fail@plt+0x2980>
   14724:	ldr	ip, [sp, #8]
   14728:	add	ip, ip, #1
   1472c:	str	ip, [sp, #8]
   14730:	ldr	ip, [sp, #40]	; 0x28
   14734:	add	ip, ip, #16
   14738:	str	ip, [sp, #40]	; 0x28
   1473c:	ldr	ip, [sp, #8]
   14740:	cmp	ip, #4
   14744:	ble	14380 <__assert_fail@plt+0x25b8>
   14748:	ldr	ip, [sp, #36]	; 0x24
   1474c:	ldr	r2, [sp, #108]	; 0x6c
   14750:	ldr	r3, [ip]
   14754:	cmp	r2, r3
   14758:	bne	14df8 <__assert_fail@plt+0x3030>
   1475c:	add	sp, sp, #116	; 0x74
   14760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14764:	ldr	r5, [sp, #52]	; 0x34
   14768:	mov	r7, #0
   1476c:	mov	r6, r7
   14770:	b	145c4 <__assert_fail@plt+0x27fc>
   14774:	bne	14788 <__assert_fail@plt+0x29c0>
   14778:	ldr	r0, [sp, #12]
   1477c:	bl	11960 <ferror@plt>
   14780:	cmp	r0, #0
   14784:	beq	147a4 <__assert_fail@plt+0x29dc>
   14788:	bl	11bf4 <__errno_location@plt>
   1478c:	movw	r2, #22948	; 0x59a4
   14790:	ldr	r3, [sp, #24]
   14794:	movt	r2, #2
   14798:	ldr	r1, [r0]
   1479c:	mov	r0, #1
   147a0:	bl	12a20 <__assert_fail@plt+0xc58>
   147a4:	ldr	r0, [sp, #12]
   147a8:	bl	11cc0 <fclose@plt>
   147ac:	cmp	r0, #0
   147b0:	bne	14af8 <__assert_fail@plt+0x2d30>
   147b4:	ldr	r2, [sp, #20]
   147b8:	ldr	r0, [sp, #24]
   147bc:	ldr	r1, [sp, #48]	; 0x30
   147c0:	bl	195ac <__assert_fail@plt+0x77e4>
   147c4:	cmp	r0, #0
   147c8:	bne	14acc <__assert_fail@plt+0x2d04>
   147cc:	mov	r1, fp
   147d0:	ldr	r0, [sp, #8]
   147d4:	bl	13000 <__assert_fail@plt+0x1238>
   147d8:	movw	r1, #24728	; 0x6098
   147dc:	movt	r1, #2
   147e0:	str	r0, [sp, #12]
   147e4:	bl	11d2c <fopen64@plt>
   147e8:	subs	r5, r0, #0
   147ec:	beq	14d90 <__assert_fail@plt+0x2fc8>
   147f0:	mov	sl, #0
   147f4:	mov	r0, r5
   147f8:	mov	r1, r9
   147fc:	mov	r2, r8
   14800:	mov	r3, #0
   14804:	bl	18cbc <__assert_fail@plt+0x6ef4>
   14808:	cmp	r0, #0
   1480c:	ble	14a2c <__assert_fail@plt+0x2c64>
   14810:	ldr	r4, [sp, #52]	; 0x34
   14814:	ldrb	r3, [r4]
   14818:	cmp	r3, #9
   1481c:	cmpne	r3, #32
   14820:	bne	1483c <__assert_fail@plt+0x2a74>
   14824:	add	ip, r4, #1
   14828:	mov	r4, ip
   1482c:	ldrb	r3, [ip], #1
   14830:	cmp	r3, #32
   14834:	cmpne	r3, #9
   14838:	beq	14828 <__assert_fail@plt+0x2a60>
   1483c:	cmp	r3, #35	; 0x23
   14840:	cmpne	r3, #0
   14844:	beq	147f4 <__assert_fail@plt+0x2a2c>
   14848:	cmp	r3, #13
   1484c:	beq	147f4 <__assert_fail@plt+0x2a2c>
   14850:	cmp	r3, #10
   14854:	beq	147f4 <__assert_fail@plt+0x2a2c>
   14858:	ldrb	ip, [r4]
   1485c:	tst	ip, #223	; 0xdf
   14860:	beq	14db8 <__assert_fail@plt+0x2ff0>
   14864:	cmp	ip, #9
   14868:	beq	14db0 <__assert_fail@plt+0x2fe8>
   1486c:	cmp	ip, #35	; 0x23
   14870:	beq	149dc <__assert_fail@plt+0x2c14>
   14874:	cmp	ip, #13
   14878:	beq	149dc <__assert_fail@plt+0x2c14>
   1487c:	cmp	ip, #10
   14880:	beq	149dc <__assert_fail@plt+0x2c14>
   14884:	add	r2, r4, #1
   14888:	b	148ac <__assert_fail@plt+0x2ae4>
   1488c:	cmp	ip, #9
   14890:	beq	148c8 <__assert_fail@plt+0x2b00>
   14894:	cmp	ip, #35	; 0x23
   14898:	beq	149e0 <__assert_fail@plt+0x2c18>
   1489c:	cmp	ip, #13
   148a0:	beq	149e0 <__assert_fail@plt+0x2c18>
   148a4:	cmp	ip, #10
   148a8:	beq	149e0 <__assert_fail@plt+0x2c18>
   148ac:	mov	r6, r2
   148b0:	ldrb	ip, [r2], #1
   148b4:	tst	ip, #223	; 0xdf
   148b8:	bne	1488c <__assert_fail@plt+0x2ac4>
   148bc:	cmp	ip, #32
   148c0:	cmpne	ip, #9
   148c4:	bne	149e0 <__assert_fail@plt+0x2c18>
   148c8:	ldrb	r3, [r6, #1]
   148cc:	add	r2, r6, #1
   148d0:	strb	sl, [r6]
   148d4:	cmp	r3, #32
   148d8:	cmpne	r3, #9
   148dc:	bne	14d28 <__assert_fail@plt+0x2f60>
   148e0:	add	r2, r6, #2
   148e4:	mov	r6, r2
   148e8:	ldrb	r3, [r2], #1
   148ec:	cmp	r3, #32
   148f0:	cmpne	r3, #9
   148f4:	beq	148e4 <__assert_fail@plt+0x2b1c>
   148f8:	cmp	r3, #0
   148fc:	cmpne	r3, #35	; 0x23
   14900:	beq	14d38 <__assert_fail@plt+0x2f70>
   14904:	cmp	r3, #13
   14908:	beq	14d38 <__assert_fail@plt+0x2f70>
   1490c:	cmp	r3, #10
   14910:	beq	14d38 <__assert_fail@plt+0x2f70>
   14914:	add	r1, r6, #1
   14918:	b	1492c <__assert_fail@plt+0x2b64>
   1491c:	cmp	r3, #13
   14920:	beq	14940 <__assert_fail@plt+0x2b78>
   14924:	cmp	r3, #10
   14928:	beq	14940 <__assert_fail@plt+0x2b78>
   1492c:	mov	r2, r1
   14930:	ldrb	r3, [r1], #1
   14934:	cmp	r3, #35	; 0x23
   14938:	cmpne	r3, #0
   1493c:	bne	1491c <__assert_fail@plt+0x2b54>
   14940:	cmp	r6, r2
   14944:	bcc	14958 <__assert_fail@plt+0x2b90>
   14948:	b	14968 <__assert_fail@plt+0x2ba0>
   1494c:	sub	r2, r2, #1
   14950:	cmp	r2, r6
   14954:	beq	14968 <__assert_fail@plt+0x2ba0>
   14958:	ldrb	r3, [r2, #-1]
   1495c:	cmp	r3, #32
   14960:	cmpne	r3, #9
   14964:	beq	1494c <__assert_fail@plt+0x2b84>
   14968:	strb	sl, [r2]
   1496c:	ldr	r0, [sp, #8]
   14970:	mov	r2, fp
   14974:	ldr	r1, [sp, #52]	; 0x34
   14978:	bl	12900 <__assert_fail@plt+0xb38>
   1497c:	subs	r7, r0, #0
   14980:	beq	147f4 <__assert_fail@plt+0x2a2c>
   14984:	ldr	r3, [r7, #20]
   14988:	ldr	ip, [sp, #32]
   1498c:	add	r3, ip, r3, lsl #3
   14990:	ldr	r0, [r3, #268]	; 0x10c
   14994:	cmp	r0, #0
   14998:	bne	14a14 <__assert_fail@plt+0x2c4c>
   1499c:	ldrb	r3, [r6]
   149a0:	cmp	r3, #0
   149a4:	bne	14a94 <__assert_fail@plt+0x2ccc>
   149a8:	movw	r0, #23112	; 0x5a48
   149ac:	movt	r0, #2
   149b0:	bl	17134 <__assert_fail@plt+0x536c>
   149b4:	mov	r4, r0
   149b8:	ldr	r3, [r7, #4]
   149bc:	tst	r3, #4
   149c0:	bne	149e8 <__assert_fail@plt+0x2c20>
   149c4:	ldr	r0, [r7, #40]	; 0x28
   149c8:	cmp	r0, #0
   149cc:	beq	149d4 <__assert_fail@plt+0x2c0c>
   149d0:	bl	11948 <free@plt>
   149d4:	str	r4, [r7, #40]	; 0x28
   149d8:	b	147f4 <__assert_fail@plt+0x2a2c>
   149dc:	mov	r6, r4
   149e0:	strb	sl, [r6]
   149e4:	b	1496c <__assert_fail@plt+0x2ba4>
   149e8:	ldr	r1, [r7, #40]	; 0x28
   149ec:	cmp	r1, #0
   149f0:	beq	149d4 <__assert_fail@plt+0x2c0c>
   149f4:	mov	r2, r4
   149f8:	movw	r0, #23120	; 0x5a50
   149fc:	movt	r0, #2
   14a00:	bl	18bd8 <__assert_fail@plt+0x6e10>
   14a04:	str	r0, [r7, #40]	; 0x28
   14a08:	mov	r0, r4
   14a0c:	bl	1716c <__assert_fail@plt+0x53a4>
   14a10:	b	147f4 <__assert_fail@plt+0x2a2c>
   14a14:	cmp	r0, #1
   14a18:	mov	r0, r6
   14a1c:	beq	14ab0 <__assert_fail@plt+0x2ce8>
   14a20:	bl	17134 <__assert_fail@plt+0x536c>
   14a24:	mov	r4, r0
   14a28:	b	149b8 <__assert_fail@plt+0x2bf0>
   14a2c:	bne	14a40 <__assert_fail@plt+0x2c78>
   14a30:	mov	r0, r5
   14a34:	bl	11960 <ferror@plt>
   14a38:	cmp	r0, #0
   14a3c:	beq	14a5c <__assert_fail@plt+0x2c94>
   14a40:	bl	11bf4 <__errno_location@plt>
   14a44:	movw	r2, #22948	; 0x59a4
   14a48:	ldr	r3, [sp, #12]
   14a4c:	movt	r2, #2
   14a50:	ldr	r1, [r0]
   14a54:	mov	r0, #1
   14a58:	bl	12a20 <__assert_fail@plt+0xc58>
   14a5c:	mov	r0, r5
   14a60:	bl	11cc0 <fclose@plt>
   14a64:	cmp	r0, #0
   14a68:	beq	14a88 <__assert_fail@plt+0x2cc0>
   14a6c:	bl	11bf4 <__errno_location@plt>
   14a70:	movw	r2, #22972	; 0x59bc
   14a74:	ldr	r3, [sp, #12]
   14a78:	movt	r2, #2
   14a7c:	ldr	r1, [r0]
   14a80:	mov	r0, #1
   14a84:	bl	12a20 <__assert_fail@plt+0xc58>
   14a88:	ldr	r0, [sp, #52]	; 0x34
   14a8c:	bl	1716c <__assert_fail@plt+0x53a4>
   14a90:	b	146f0 <__assert_fail@plt+0x2928>
   14a94:	str	r4, [sp]
   14a98:	mov	r3, r6
   14a9c:	mov	r1, r0
   14aa0:	movw	r2, #23068	; 0x5a1c
   14aa4:	movt	r2, #2
   14aa8:	bl	12a20 <__assert_fail@plt+0xc58>
   14aac:	b	149a8 <__assert_fail@plt+0x2be0>
   14ab0:	bl	13718 <__assert_fail@plt+0x1950>
   14ab4:	mov	r1, r0
   14ab8:	movw	r0, #23116	; 0x5a4c
   14abc:	movt	r0, #2
   14ac0:	bl	18bd8 <__assert_fail@plt+0x6e10>
   14ac4:	mov	r4, r0
   14ac8:	b	149b8 <__assert_fail@plt+0x2bf0>
   14acc:	ldr	r4, [sp, #60]	; 0x3c
   14ad0:	bl	118f4 <gpg_strerror@plt>
   14ad4:	ldr	r3, [sp, #24]
   14ad8:	movw	r2, #22992	; 0x59d0
   14adc:	mov	r1, #0
   14ae0:	movt	r2, #2
   14ae4:	str	r4, [sp]
   14ae8:	str	r0, [sp, #4]
   14aec:	mov	r0, #1
   14af0:	bl	12a20 <__assert_fail@plt+0xc58>
   14af4:	b	147cc <__assert_fail@plt+0x2a04>
   14af8:	bl	11bf4 <__errno_location@plt>
   14afc:	movw	r2, #22972	; 0x59bc
   14b00:	ldr	r3, [sp, #24]
   14b04:	movt	r2, #2
   14b08:	ldr	r1, [r0]
   14b0c:	mov	r0, #1
   14b10:	bl	12a20 <__assert_fail@plt+0xc58>
   14b14:	b	147b4 <__assert_fail@plt+0x29ec>
   14b18:	ldr	r0, [sp, #64]	; 0x40
   14b1c:	bl	11d98 <close@plt>
   14b20:	ldr	r0, [sp, #68]	; 0x44
   14b24:	bl	11d98 <close@plt>
   14b28:	mov	r0, r5
   14b2c:	bl	118f4 <gpg_strerror@plt>
   14b30:	mov	r1, r4
   14b34:	movw	r2, #22780	; 0x58fc
   14b38:	ldr	r3, [sp, #24]
   14b3c:	movt	r2, #2
   14b40:	str	r0, [sp]
   14b44:	mov	r0, #1
   14b48:	bl	12a20 <__assert_fail@plt+0xc58>
   14b4c:	b	14470 <__assert_fail@plt+0x26a8>
   14b50:	bl	176f8 <__assert_fail@plt+0x5930>
   14b54:	str	r0, [sp, #24]
   14b58:	b	14430 <__assert_fail@plt+0x2668>
   14b5c:	mov	r2, #5
   14b60:	mov	r0, r6
   14b64:	movw	r1, #22716	; 0x58bc
   14b68:	movt	r1, #2
   14b6c:	bl	119cc <dcgettext@plt>
   14b70:	mov	r8, r0
   14b74:	mov	r0, r7
   14b78:	bl	118f4 <gpg_strerror@plt>
   14b7c:	mov	r1, r6
   14b80:	mov	r2, r8
   14b84:	mov	r3, r0
   14b88:	mov	r0, r5
   14b8c:	bl	12a20 <__assert_fail@plt+0xc58>
   14b90:	b	14418 <__assert_fail@plt+0x2650>
   14b94:	bl	11bf4 <__errno_location@plt>
   14b98:	ldr	ip, [sp, #24]
   14b9c:	mov	r3, r5
   14ba0:	movw	r2, #22912	; 0x5980
   14ba4:	movt	r2, #2
   14ba8:	ldr	r1, [r0]
   14bac:	mov	r0, #1
   14bb0:	str	ip, [sp]
   14bb4:	bl	12a20 <__assert_fail@plt+0xc58>
   14bb8:	b	145e8 <__assert_fail@plt+0x2820>
   14bbc:	ldr	r2, [sp, #24]
   14bc0:	ldr	r1, [r3, #100]	; 0x64
   14bc4:	ldr	r0, [sp, #8]
   14bc8:	str	r2, [sp, #56]	; 0x38
   14bcc:	str	r2, [sp, #60]	; 0x3c
   14bd0:	bl	12900 <__assert_fail@plt+0xb38>
   14bd4:	subs	r7, r0, #0
   14bd8:	beq	14dc0 <__assert_fail@plt+0x2ff8>
   14bdc:	ldr	r6, [r7, #28]
   14be0:	cmp	r6, #0
   14be4:	bne	14e28 <__assert_fail@plt+0x3060>
   14be8:	mov	r1, fp
   14bec:	ldr	r0, [sp, #8]
   14bf0:	bl	13000 <__assert_fail@plt+0x1238>
   14bf4:	movw	r1, #24728	; 0x6098
   14bf8:	movt	r1, #2
   14bfc:	mov	r9, r0
   14c00:	bl	11d2c <fopen64@plt>
   14c04:	subs	r5, r0, #0
   14c08:	beq	14e04 <__assert_fail@plt+0x303c>
   14c0c:	add	r8, sp, #56	; 0x38
   14c10:	mov	sl, r6
   14c14:	add	ip, sp, #60	; 0x3c
   14c18:	str	ip, [sp, #20]
   14c1c:	mov	r0, r5
   14c20:	mov	r1, r8
   14c24:	ldr	r2, [sp, #20]
   14c28:	mov	r3, #0
   14c2c:	bl	18cbc <__assert_fail@plt+0x6ef4>
   14c30:	cmp	r0, #0
   14c34:	ble	14648 <__assert_fail@plt+0x2880>
   14c38:	ldr	r0, [sp, #56]	; 0x38
   14c3c:	ldrb	r3, [r0]
   14c40:	cmp	r3, #32
   14c44:	cmpne	r3, #9
   14c48:	bne	14c64 <__assert_fail@plt+0x2e9c>
   14c4c:	add	r2, r0, #1
   14c50:	mov	r0, r2
   14c54:	ldrb	r3, [r2], #1
   14c58:	cmp	r3, #32
   14c5c:	cmpne	r3, #9
   14c60:	beq	14c50 <__assert_fail@plt+0x2e88>
   14c64:	cmp	r3, #35	; 0x23
   14c68:	cmpne	r3, #0
   14c6c:	beq	14c1c <__assert_fail@plt+0x2e54>
   14c70:	cmp	r3, #13
   14c74:	beq	14c1c <__assert_fail@plt+0x2e54>
   14c78:	cmp	r3, #10
   14c7c:	beq	14c1c <__assert_fail@plt+0x2e54>
   14c80:	ldrb	r3, [r0]
   14c84:	cmp	r3, #0
   14c88:	cmpne	r3, #35	; 0x23
   14c8c:	beq	14d88 <__assert_fail@plt+0x2fc0>
   14c90:	cmp	r3, #13
   14c94:	beq	14d88 <__assert_fail@plt+0x2fc0>
   14c98:	cmp	r3, #10
   14c9c:	beq	14d88 <__assert_fail@plt+0x2fc0>
   14ca0:	add	r1, r0, #1
   14ca4:	b	14cb8 <__assert_fail@plt+0x2ef0>
   14ca8:	cmp	r3, #13
   14cac:	beq	14ce0 <__assert_fail@plt+0x2f18>
   14cb0:	cmp	r3, #10
   14cb4:	beq	14ce0 <__assert_fail@plt+0x2f18>
   14cb8:	mov	r2, r1
   14cbc:	ldrb	r3, [r1], #1
   14cc0:	cmp	r3, #35	; 0x23
   14cc4:	cmpne	r3, #0
   14cc8:	bne	14ca8 <__assert_fail@plt+0x2ee0>
   14ccc:	ldrb	r3, [r2, #-1]
   14cd0:	cmp	r3, #32
   14cd4:	cmpne	r3, #9
   14cd8:	bne	14cf0 <__assert_fail@plt+0x2f28>
   14cdc:	sub	r2, r2, #1
   14ce0:	ldrb	r3, [r2, #-1]
   14ce4:	cmp	r3, #32
   14ce8:	cmpne	r3, #9
   14cec:	beq	14cdc <__assert_fail@plt+0x2f14>
   14cf0:	cmp	r6, #0
   14cf4:	strb	sl, [r2]
   14cf8:	beq	14d6c <__assert_fail@plt+0x2fa4>
   14cfc:	bl	13718 <__assert_fail@plt+0x1950>
   14d00:	mov	r1, r6
   14d04:	mov	r2, r0
   14d08:	movw	r0, #23200	; 0x5aa0
   14d0c:	movt	r0, #2
   14d10:	bl	18bd8 <__assert_fail@plt+0x6e10>
   14d14:	mov	r3, r0
   14d18:	mov	r0, r6
   14d1c:	mov	r6, r3
   14d20:	bl	1716c <__assert_fail@plt+0x53a4>
   14d24:	b	14c1c <__assert_fail@plt+0x2e54>
   14d28:	cmp	r3, #0
   14d2c:	cmpne	r3, #35	; 0x23
   14d30:	mov	r6, r2
   14d34:	bne	14904 <__assert_fail@plt+0x2b3c>
   14d38:	mov	r2, r6
   14d3c:	b	14968 <__assert_fail@plt+0x2ba0>
   14d40:	bl	11bf4 <__errno_location@plt>
   14d44:	movw	r2, #21752	; 0x54f8
   14d48:	movt	r2, #2
   14d4c:	add	ip, sp, #60	; 0x3c
   14d50:	add	r9, sp, #52	; 0x34
   14d54:	str	ip, [sp, #20]
   14d58:	add	r8, sp, #56	; 0x38
   14d5c:	ldr	r1, [r0]
   14d60:	mov	r0, #1
   14d64:	bl	12a20 <__assert_fail@plt+0xc58>
   14d68:	b	144a4 <__assert_fail@plt+0x26dc>
   14d6c:	bl	13718 <__assert_fail@plt+0x1950>
   14d70:	mov	r1, r0
   14d74:	movw	r0, #23116	; 0x5a4c
   14d78:	movt	r0, #2
   14d7c:	bl	18bd8 <__assert_fail@plt+0x6e10>
   14d80:	mov	r6, r0
   14d84:	b	14c1c <__assert_fail@plt+0x2e54>
   14d88:	mov	r2, r0
   14d8c:	b	14ce0 <__assert_fail@plt+0x2f18>
   14d90:	bl	11bf4 <__errno_location@plt>
   14d94:	ldr	r3, [sp, #12]
   14d98:	movw	r2, #23028	; 0x59f4
   14d9c:	movt	r2, #2
   14da0:	ldr	r1, [r0]
   14da4:	mov	r0, r5
   14da8:	bl	12a20 <__assert_fail@plt+0xc58>
   14dac:	b	14a88 <__assert_fail@plt+0x2cc0>
   14db0:	mov	r6, r4
   14db4:	b	148c8 <__assert_fail@plt+0x2b00>
   14db8:	mov	r6, r4
   14dbc:	b	148bc <__assert_fail@plt+0x2af4>
   14dc0:	movw	r0, #23128	; 0x5a58
   14dc4:	movw	r1, #21836	; 0x554c
   14dc8:	movt	r0, #2
   14dcc:	movt	r1, #2
   14dd0:	movw	r2, #2041	; 0x7f9
   14dd4:	ldr	r3, [pc, #104]	; 14e44 <__assert_fail@plt+0x307c>
   14dd8:	bl	11dc8 <__assert_fail@plt>
   14ddc:	movw	r0, #22652	; 0x587c
   14de0:	movw	r1, #21836	; 0x554c
   14de4:	movt	r0, #2
   14de8:	movt	r1, #2
   14dec:	movw	r2, #2141	; 0x85d
   14df0:	ldr	r3, [pc, #80]	; 14e48 <__assert_fail@plt+0x3080>
   14df4:	bl	11dc8 <__assert_fail@plt>
   14df8:	bl	119d8 <__stack_chk_fail@plt>
   14dfc:	ldr	r5, [sp, #52]	; 0x34
   14e00:	b	145c4 <__assert_fail@plt+0x27fc>
   14e04:	bl	11bf4 <__errno_location@plt>
   14e08:	movw	r2, #23164	; 0x5a7c
   14e0c:	mov	r3, r9
   14e10:	movt	r2, #2
   14e14:	mov	r6, r5
   14e18:	ldr	r1, [r0]
   14e1c:	mov	r0, r5
   14e20:	bl	12a20 <__assert_fail@plt+0xc58>
   14e24:	b	14678 <__assert_fail@plt+0x28b0>
   14e28:	movw	r0, #23140	; 0x5a64
   14e2c:	movw	r1, #21836	; 0x554c
   14e30:	movt	r0, #2
   14e34:	movt	r1, #2
   14e38:	movw	r2, #2042	; 0x7fa
   14e3c:	ldr	r3, [pc]	; 14e44 <__assert_fail@plt+0x307c>
   14e40:	bl	11dc8 <__assert_fail@plt>
   14e44:	muleq	r2, r4, r3
   14e48:	andeq	r5, r2, r4, ror r3
   14e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14e50:	sub	sp, sp, #204	; 0xcc
   14e54:	movw	ip, #44624	; 0xae50
   14e58:	movt	ip, #3
   14e5c:	str	ip, [sp, #48]	; 0x30
   14e60:	add	r8, sp, #84	; 0x54
   14e64:	ldr	r3, [sp, #48]	; 0x30
   14e68:	mov	ip, #0
   14e6c:	str	r2, [sp, #60]	; 0x3c
   14e70:	mov	r9, r1
   14e74:	mov	r2, ip
   14e78:	str	r0, [sp, #28]
   14e7c:	ldr	lr, [r3]
   14e80:	mov	r3, ip
   14e84:	str	ip, [sp, #68]	; 0x44
   14e88:	str	ip, [sp, #72]	; 0x48
   14e8c:	str	lr, [sp, #196]	; 0xc4
   14e90:	add	ip, sp, #112	; 0x70
   14e94:	add	r1, sp, #140	; 0x8c
   14e98:	str	r2, [r8, r3]
   14e9c:	str	r2, [ip, r3]
   14ea0:	add	ip, sp, #168	; 0xa8
   14ea4:	str	r2, [r1, r3]
   14ea8:	str	r2, [ip, r3]
   14eac:	add	r3, r3, #4
   14eb0:	cmp	r3, #28
   14eb4:	bne	14e90 <__assert_fail@plt+0x30c8>
   14eb8:	cmp	r9, #0
   14ebc:	movne	r4, #0
   14ec0:	beq	15060 <__assert_fail@plt+0x3298>
   14ec4:	mov	r0, r9
   14ec8:	add	r1, sp, #68	; 0x44
   14ecc:	add	r2, sp, #72	; 0x48
   14ed0:	mov	r3, #0
   14ed4:	bl	18cbc <__assert_fail@plt+0x6ef4>
   14ed8:	cmp	r0, #0
   14edc:	ble	15060 <__assert_fail@plt+0x3298>
   14ee0:	sub	r3, r0, #1
   14ee4:	ldr	r1, [sp, #68]	; 0x44
   14ee8:	ldrb	r2, [r1, r3]
   14eec:	cmp	r2, #10
   14ef0:	cmpne	r2, #13
   14ef4:	bne	15030 <__assert_fail@plt+0x3268>
   14ef8:	strb	r4, [r1, r3]
   14efc:	subs	r3, r3, #1
   14f00:	bcs	14ee4 <__assert_fail@plt+0x311c>
   14f04:	ldr	r5, [sp, #68]	; 0x44
   14f08:	mov	r0, r5
   14f0c:	mov	r1, #58	; 0x3a
   14f10:	bl	11bc4 <strchr@plt>
   14f14:	cmp	r0, #0
   14f18:	beq	15050 <__assert_fail@plt+0x3288>
   14f1c:	adds	r5, r0, #1
   14f20:	strb	r4, [r0]
   14f24:	ldreq	r5, [sp, #68]	; 0x44
   14f28:	beq	15050 <__assert_fail@plt+0x3288>
   14f2c:	mov	r1, #58	; 0x3a
   14f30:	mov	r0, r5
   14f34:	bl	11bc4 <strchr@plt>
   14f38:	cmp	r0, #0
   14f3c:	strbne	r4, [r0]
   14f40:	addne	r6, r0, #1
   14f44:	moveq	r6, r0
   14f48:	bl	11bf4 <__errno_location@plt>
   14f4c:	add	r1, sp, #80	; 0x50
   14f50:	mov	r2, #0
   14f54:	mov	r7, r0
   14f58:	str	r4, [r0]
   14f5c:	mov	r0, r5
   14f60:	bl	11ba0 <strtoul@plt>
   14f64:	ldr	r1, [r7]
   14f68:	cmp	r1, #0
   14f6c:	mov	r5, r0
   14f70:	bne	15038 <__assert_fail@plt+0x3270>
   14f74:	ldr	r3, [sp, #80]	; 0x50
   14f78:	ldrb	r3, [r3]
   14f7c:	tst	r3, #223	; 0xdf
   14f80:	moveq	r2, #0
   14f84:	movne	r2, #1
   14f88:	cmp	r3, #58	; 0x3a
   14f8c:	moveq	r3, #0
   14f90:	andne	r3, r2, #1
   14f94:	cmp	r3, #0
   14f98:	beq	14fb4 <__assert_fail@plt+0x31ec>
   14f9c:	movw	r2, #23268	; 0x5ae4
   14fa0:	mov	r0, #1
   14fa4:	movt	r2, #2
   14fa8:	mov	r1, #0
   14fac:	ldr	r3, [sp, #68]	; 0x44
   14fb0:	bl	12a20 <__assert_fail@plt+0xc58>
   14fb4:	cmp	r6, #0
   14fb8:	bic	sl, r5, #128	; 0x80
   14fbc:	beq	16278 <__assert_fail@plt+0x44b0>
   14fc0:	mov	r0, r6
   14fc4:	mov	r1, #58	; 0x3a
   14fc8:	bl	11bc4 <strchr@plt>
   14fcc:	cmp	r0, #0
   14fd0:	strbne	r4, [r0]
   14fd4:	ldr	r5, [sp, #68]	; 0x44
   14fd8:	ldr	r0, [sp, #28]
   14fdc:	mov	r1, r5
   14fe0:	mov	r2, #0
   14fe4:	bl	12900 <__assert_fail@plt+0xb38>
   14fe8:	subs	r7, r0, #0
   14fec:	beq	15600 <__assert_fail@plt+0x3838>
   14ff0:	ldr	r3, [r7, #4]
   14ff4:	tst	r3, #128	; 0x80
   14ff8:	beq	15018 <__assert_fail@plt+0x3250>
   14ffc:	mov	r0, #0
   15000:	ldr	r3, [r7]
   15004:	mov	r1, r0
   15008:	movw	r2, #23324	; 0x5b1c
   1500c:	movt	r2, #2
   15010:	bl	12a20 <__assert_fail@plt+0xc58>
   15014:	b	14ec4 <__assert_fail@plt+0x30fc>
   15018:	mov	r0, r7
   1501c:	mov	r2, sl
   15020:	mov	r3, r6
   15024:	mov	r1, r8
   15028:	bl	13170 <__assert_fail@plt+0x13a8>
   1502c:	b	14ec4 <__assert_fail@plt+0x30fc>
   15030:	mov	r5, r1
   15034:	b	14f08 <__assert_fail@plt+0x3140>
   15038:	movw	r2, #23236	; 0x5ac4
   1503c:	mov	r0, #1
   15040:	movt	r2, #2
   15044:	ldr	r3, [sp, #68]	; 0x44
   15048:	bl	12a20 <__assert_fail@plt+0xc58>
   1504c:	b	14f74 <__assert_fail@plt+0x31ac>
   15050:	movw	r6, #23988	; 0x5db4
   15054:	mov	sl, #0
   15058:	movt	r6, #2
   1505c:	b	14fd8 <__assert_fail@plt+0x3210>
   15060:	ldr	ip, [sp, #28]
   15064:	lsl	ip, ip, #4
   15068:	str	ip, [sp, #52]	; 0x34
   1506c:	ldr	r1, [sp, #52]	; 0x34
   15070:	movw	ip, #20640	; 0x50a0
   15074:	movt	ip, #2
   15078:	str	ip, [sp, #36]	; 0x24
   1507c:	add	r3, ip, r1
   15080:	ldr	r3, [r3, #12]
   15084:	cmp	r3, #0
   15088:	beq	154d4 <__assert_fail@plt+0x370c>
   1508c:	ldr	r2, [r3]
   15090:	cmp	r2, #0
   15094:	beq	154d4 <__assert_fail@plt+0x370c>
   15098:	add	r8, r3, #52	; 0x34
   1509c:	b	150bc <__assert_fail@plt+0x32f4>
   150a0:	cmp	r8, #0
   150a4:	beq	154d4 <__assert_fail@plt+0x370c>
   150a8:	ldr	ip, [sp, #24]
   150ac:	add	r8, r8, #52	; 0x34
   150b0:	ldr	r3, [ip]
   150b4:	cmp	r3, #0
   150b8:	beq	154d4 <__assert_fail@plt+0x370c>
   150bc:	ldr	r7, [r8, #-28]	; 0xffffffe4
   150c0:	add	r2, sp, #200	; 0xc8
   150c4:	str	r8, [sp, #24]
   150c8:	lsl	fp, r7, #2
   150cc:	add	r3, r2, fp
   150d0:	ldr	r3, [r3, #-88]	; 0xffffffa8
   150d4:	cmp	r3, #0
   150d8:	bne	150a0 <__assert_fail@plt+0x32d8>
   150dc:	ldr	r3, [r8, #-8]
   150e0:	cmp	r3, #0
   150e4:	bne	150f4 <__assert_fail@plt+0x332c>
   150e8:	ldr	r3, [r8, #-4]
   150ec:	cmp	r3, #0
   150f0:	beq	150a0 <__assert_fail@plt+0x32d8>
   150f4:	add	r3, r7, r7, lsl #1
   150f8:	ldr	ip, [sp, #36]	; 0x24
   150fc:	add	r3, ip, r3, lsl #3
   15100:	ldr	r6, [r3, #84]	; 0x54
   15104:	cmp	r6, #0
   15108:	beq	15ac8 <__assert_fail@plt+0x3d00>
   1510c:	mov	r1, r7
   15110:	ldr	r0, [sp, #28]
   15114:	mov	sl, #0
   15118:	str	sl, [sp, #76]	; 0x4c
   1511c:	bl	13000 <__assert_fail@plt+0x1238>
   15120:	bl	17134 <__assert_fail@plt+0x536c>
   15124:	mov	r4, r0
   15128:	bl	11b88 <getpid@plt>
   1512c:	mov	r1, r4
   15130:	mov	r2, r0
   15134:	movw	r0, #23360	; 0x5b40
   15138:	movt	r0, #2
   1513c:	bl	18bd8 <__assert_fail@plt+0x6e10>
   15140:	mov	r9, r0
   15144:	bl	11b88 <getpid@plt>
   15148:	mov	r1, r4
   1514c:	mov	r2, r0
   15150:	movw	r0, #23380	; 0x5b54
   15154:	movt	r0, #2
   15158:	bl	18bd8 <__assert_fail@plt+0x6e10>
   1515c:	mov	r5, r0
   15160:	mov	r0, r4
   15164:	mov	r1, r5
   15168:	bl	11c6c <link@plt>
   1516c:	cmp	r0, sl
   15170:	blt	15948 <__assert_fail@plt+0x3b80>
   15174:	bl	11bf4 <__errno_location@plt>
   15178:	str	r0, [sp, #40]	; 0x28
   1517c:	add	r1, sp, #200	; 0xc8
   15180:	mov	r0, r9
   15184:	add	fp, r1, fp
   15188:	mov	r2, #420	; 0x1a4
   1518c:	mov	r1, #193	; 0xc1
   15190:	str	r9, [fp, #-88]	; 0xffffffa8
   15194:	str	r4, [fp, #-60]	; 0xffffffc4
   15198:	str	r5, [fp, #-32]	; 0xffffffe0
   1519c:	bl	11ac8 <open64@plt>
   151a0:	subs	ip, r0, #0
   151a4:	str	ip, [sp, #44]	; 0x2c
   151a8:	blt	160c4 <__assert_fail@plt+0x42fc>
   151ac:	movw	r1, #23376	; 0x5b50
   151b0:	movt	r1, #2
   151b4:	bl	1187c <fdopen@plt>
   151b8:	subs	sl, r0, #0
   151bc:	beq	16234 <__assert_fail@plt+0x446c>
   151c0:	cmp	r5, #0
   151c4:	beq	158e8 <__assert_fail@plt+0x3b20>
   151c8:	mov	r0, r4
   151cc:	movw	r1, #24728	; 0x6098
   151d0:	movt	r1, #2
   151d4:	bl	11d2c <fopen64@plt>
   151d8:	cmp	r0, #0
   151dc:	str	r0, [sp, #20]
   151e0:	beq	1620c <__assert_fail@plt+0x4444>
   151e4:	mov	ip, #0
   151e8:	add	fp, sp, #80	; 0x50
   151ec:	add	r9, sp, #76	; 0x4c
   151f0:	mov	r6, ip
   151f4:	str	ip, [sp, #32]
   151f8:	ldr	r0, [sp, #20]
   151fc:	mov	r1, r9
   15200:	mov	r2, fp
   15204:	mov	r3, #0
   15208:	bl	18cbc <__assert_fail@plt+0x6ef4>
   1520c:	cmp	r0, #0
   15210:	ble	1561c <__assert_fail@plt+0x3854>
   15214:	ldr	r4, [sp, #76]	; 0x4c
   15218:	mov	r2, #27
   1521c:	ldr	r0, [pc, #4048]	; 161f4 <__assert_fail@plt+0x442c>
   15220:	mov	r1, r4
   15224:	bl	11d80 <strncmp@plt>
   15228:	cmp	r0, #0
   1522c:	bne	15484 <__assert_fail@plt+0x36bc>
   15230:	cmp	r6, #0
   15234:	bne	15e74 <__assert_fail@plt+0x40ac>
   15238:	mov	r5, #0
   1523c:	mov	r6, #1
   15240:	ldrb	r3, [r4]
   15244:	cmp	r3, #32
   15248:	cmpne	r3, #9
   1524c:	bne	15268 <__assert_fail@plt+0x34a0>
   15250:	add	ip, r4, #1
   15254:	mov	r4, ip
   15258:	ldrb	r3, [ip], #1
   1525c:	cmp	r3, #32
   15260:	cmpne	r3, #9
   15264:	beq	15254 <__assert_fail@plt+0x348c>
   15268:	cmp	r3, #0
   1526c:	cmpne	r3, #13
   15270:	beq	1545c <__assert_fail@plt+0x3694>
   15274:	cmp	r3, #10
   15278:	beq	1545c <__assert_fail@plt+0x3694>
   1527c:	cmp	r3, #35	; 0x23
   15280:	beq	1545c <__assert_fail@plt+0x3694>
   15284:	ldrb	r3, [r4]
   15288:	tst	r3, #223	; 0xdf
   1528c:	beq	155f8 <__assert_fail@plt+0x3830>
   15290:	cmp	r3, #9
   15294:	beq	155f8 <__assert_fail@plt+0x3830>
   15298:	cmp	r3, #13
   1529c:	beq	155f8 <__assert_fail@plt+0x3830>
   152a0:	cmp	r3, #10
   152a4:	beq	155f8 <__assert_fail@plt+0x3830>
   152a8:	cmp	r3, #35	; 0x23
   152ac:	beq	155f8 <__assert_fail@plt+0x3830>
   152b0:	add	r2, r4, #1
   152b4:	b	152d8 <__assert_fail@plt+0x3510>
   152b8:	cmp	r3, #9
   152bc:	beq	152e8 <__assert_fail@plt+0x3520>
   152c0:	cmp	r3, #13
   152c4:	beq	152e8 <__assert_fail@plt+0x3520>
   152c8:	cmp	r3, #10
   152cc:	beq	152e8 <__assert_fail@plt+0x3520>
   152d0:	cmp	r3, #35	; 0x23
   152d4:	beq	152e8 <__assert_fail@plt+0x3520>
   152d8:	mov	ip, r2
   152dc:	ldrb	r3, [r2], #1
   152e0:	tst	r3, #223	; 0xdf
   152e4:	bne	152b8 <__assert_fail@plt+0x34f0>
   152e8:	mov	r1, #0
   152ec:	ldr	r0, [sp, #28]
   152f0:	strb	r1, [ip]
   152f4:	mov	r2, r7
   152f8:	mov	r1, r4
   152fc:	str	r3, [sp, #12]
   15300:	str	ip, [sp, #16]
   15304:	bl	12900 <__assert_fail@plt+0xb38>
   15308:	ldr	r3, [sp, #12]
   1530c:	ldr	ip, [sp, #16]
   15310:	strb	r3, [ip]
   15314:	cmp	r0, #0
   15318:	beq	1545c <__assert_fail@plt+0x3694>
   1531c:	ldr	r3, [r0, #44]	; 0x2c
   15320:	tst	r3, #16
   15324:	bne	15334 <__assert_fail@plt+0x356c>
   15328:	ldr	r3, [r0, #48]	; 0x30
   1532c:	cmp	r3, #0
   15330:	beq	1545c <__assert_fail@plt+0x3694>
   15334:	cmp	r6, #0
   15338:	movne	r6, #1
   1533c:	bne	151f8 <__assert_fail@plt+0x3430>
   15340:	bl	17e68 <__assert_fail@plt+0x60a0>
   15344:	bl	18674 <__assert_fail@plt+0x68ac>
   15348:	mov	r1, #1
   1534c:	movw	r2, #23416	; 0x5b78
   15350:	movt	r2, #2
   15354:	mov	r3, r0
   15358:	mov	r0, sl
   1535c:	bl	11c9c <__fprintf_chk@plt>
   15360:	mov	r0, sl
   15364:	bl	11960 <ferror@plt>
   15368:	cmp	r0, #0
   1536c:	bne	15398 <__assert_fail@plt+0x35d0>
   15370:	mov	r1, #1
   15374:	ldr	r3, [sp, #76]	; 0x4c
   15378:	movw	r2, #23460	; 0x5ba4
   1537c:	mov	r0, sl
   15380:	movt	r2, #2
   15384:	bl	11c9c <__fprintf_chk@plt>
   15388:	mov	r0, sl
   1538c:	bl	11960 <ferror@plt>
   15390:	cmp	r0, #0
   15394:	beq	151f8 <__assert_fail@plt+0x3430>
   15398:	ldr	r0, [sp, #76]	; 0x4c
   1539c:	bl	1716c <__assert_fail@plt+0x53a4>
   153a0:	ldr	ip, [sp, #40]	; 0x28
   153a4:	mov	r0, sl
   153a8:	ldr	r6, [ip]
   153ac:	bl	11cc0 <fclose@plt>
   153b0:	ldr	r0, [sp, #44]	; 0x2c
   153b4:	bl	11d98 <close@plt>
   153b8:	ldr	r0, [sp, #20]
   153bc:	bl	11cc0 <fclose@plt>
   153c0:	ldr	ip, [sp, #40]	; 0x28
   153c4:	str	r6, [ip]
   153c8:	mvn	r4, #0
   153cc:	mov	r5, #0
   153d0:	b	153f8 <__assert_fail@plt+0x3630>
   153d4:	bl	119fc <unlink@plt>
   153d8:	add	r3, sp, #168	; 0xa8
   153dc:	ldr	r0, [r3, r5]
   153e0:	cmp	r0, #0
   153e4:	beq	153ec <__assert_fail@plt+0x3624>
   153e8:	bl	119fc <unlink@plt>
   153ec:	add	r5, r5, #4
   153f0:	cmp	r5, #28
   153f4:	beq	15430 <__assert_fail@plt+0x3668>
   153f8:	add	r2, sp, #112	; 0x70
   153fc:	ldr	r0, [r2, r5]
   15400:	cmp	r0, #0
   15404:	bne	153d4 <__assert_fail@plt+0x360c>
   15408:	add	ip, sp, #168	; 0xa8
   1540c:	ldr	r0, [ip, r5]
   15410:	cmp	r0, #0
   15414:	beq	15e88 <__assert_fail@plt+0x40c0>
   15418:	add	r2, sp, #140	; 0x8c
   1541c:	ldr	r1, [r2, r5]
   15420:	add	r5, r5, #4
   15424:	bl	11b64 <rename@plt>
   15428:	cmp	r5, #28
   1542c:	bne	153f8 <__assert_fail@plt+0x3630>
   15430:	cmp	r4, #0
   15434:	bne	15e94 <__assert_fail@plt+0x40cc>
   15438:	ldr	r0, [sp, #68]	; 0x44
   1543c:	bl	1716c <__assert_fail@plt+0x53a4>
   15440:	ldr	ip, [sp, #48]	; 0x30
   15444:	ldr	r2, [sp, #196]	; 0xc4
   15448:	ldr	r3, [ip]
   1544c:	cmp	r2, r3
   15450:	bne	16230 <__assert_fail@plt+0x4468>
   15454:	add	sp, sp, #204	; 0xcc
   15458:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1545c:	cmp	r5, #0
   15460:	bne	15334 <__assert_fail@plt+0x356c>
   15464:	mov	r1, sl
   15468:	ldr	r0, [sp, #76]	; 0x4c
   1546c:	bl	11d74 <fputs@plt>
   15470:	mov	r0, sl
   15474:	bl	11960 <ferror@plt>
   15478:	cmp	r0, #0
   1547c:	beq	151f8 <__assert_fail@plt+0x3430>
   15480:	b	15398 <__assert_fail@plt+0x35d0>
   15484:	cmp	r7, #1
   15488:	movne	r5, #0
   1548c:	andeq	r5, r6, #1
   15490:	cmp	r5, #0
   15494:	beq	15240 <__assert_fail@plt+0x3478>
   15498:	movw	r0, #23400	; 0x5b68
   1549c:	mov	r1, r4
   154a0:	movt	r0, #2
   154a4:	bl	118dc <strcmp@plt>
   154a8:	cmp	r0, #0
   154ac:	bne	15238 <__assert_fail@plt+0x3470>
   154b0:	ldr	ip, [sp, #32]
   154b4:	cmp	ip, #0
   154b8:	movne	r6, #1
   154bc:	movne	r5, r6
   154c0:	moveq	ip, #1
   154c4:	ldreq	r5, [sp, #32]
   154c8:	moveq	r6, ip
   154cc:	streq	ip, [sp, #32]
   154d0:	b	15240 <__assert_fail@plt+0x3478>
   154d4:	movw	r6, #45100	; 0xb02c
   154d8:	movt	r6, #3
   154dc:	ldr	r5, [r6, #8]
   154e0:	cmp	r5, #0
   154e4:	bne	158d8 <__assert_fail@plt+0x3b10>
   154e8:	add	r1, sp, #112	; 0x70
   154ec:	ldr	r7, [r1, r5]
   154f0:	cmp	r7, #0
   154f4:	beq	15530 <__assert_fail@plt+0x3768>
   154f8:	add	r2, sp, #140	; 0x8c
   154fc:	ldr	r1, [r2, r5]
   15500:	cmp	r1, #0
   15504:	beq	161d8 <__assert_fail@plt+0x4410>
   15508:	add	ip, sp, #168	; 0xa8
   1550c:	mov	r0, r7
   15510:	ldr	r3, [ip, r5]
   15514:	cmp	r3, #0
   15518:	beq	16084 <__assert_fail@plt+0x42bc>
   1551c:	bl	11b64 <rename@plt>
   15520:	cmp	r0, #0
   15524:	bne	16090 <__assert_fail@plt+0x42c8>
   15528:	add	r1, sp, #112	; 0x70
   1552c:	str	r0, [r1, r5]
   15530:	add	r5, r5, #4
   15534:	cmp	r5, #28
   15538:	bne	154e8 <__assert_fail@plt+0x3720>
   1553c:	ldr	r2, [r6, #8]
   15540:	movw	r3, #45100	; 0xb02c
   15544:	movt	r3, #3
   15548:	cmp	r2, #0
   1554c:	bne	158d8 <__assert_fail@plt+0x3b10>
   15550:	ldr	r3, [r3, #12]
   15554:	cmp	r3, #0
   15558:	beq	15590 <__assert_fail@plt+0x37c8>
   1555c:	ldr	r5, [pc, #3220]	; 161f8 <__assert_fail@plt+0x4430>
   15560:	add	r4, sp, #80	; 0x50
   15564:	add	r6, sp, #108	; 0x6c
   15568:	ldr	r3, [r4, #4]!
   1556c:	cmp	r3, #0
   15570:	beq	15584 <__assert_fail@plt+0x37bc>
   15574:	ldr	r3, [r5, #12]
   15578:	cmp	r3, #0
   1557c:	beq	15584 <__assert_fail@plt+0x37bc>
   15580:	blx	r3
   15584:	cmp	r4, r6
   15588:	add	r5, r5, #24
   1558c:	bne	15568 <__assert_fail@plt+0x37a0>
   15590:	mov	r4, #0
   15594:	b	155bc <__assert_fail@plt+0x37f4>
   15598:	movw	r0, #23912	; 0x5d68
   1559c:	movt	r0, #2
   155a0:	bl	18bd8 <__assert_fail@plt+0x6e10>
   155a4:	mov	r1, r0
   155a8:	mov	r0, r5
   155ac:	bl	11b64 <rename@plt>
   155b0:	add	r4, r4, #4
   155b4:	cmp	r4, #28
   155b8:	beq	15438 <__assert_fail@plt+0x3670>
   155bc:	add	ip, sp, #168	; 0xa8
   155c0:	ldr	r5, [ip, r4]
   155c4:	cmp	r5, #0
   155c8:	beq	155b0 <__assert_fail@plt+0x37e8>
   155cc:	add	r2, sp, #140	; 0x8c
   155d0:	ldr	r1, [r2, r4]
   155d4:	cmp	r1, #0
   155d8:	bne	15598 <__assert_fail@plt+0x37d0>
   155dc:	movw	r0, #23888	; 0x5d50
   155e0:	movw	r1, #21836	; 0x554c
   155e4:	movt	r0, #2
   155e8:	movt	r1, #2
   155ec:	movw	r2, #3203	; 0xc83
   155f0:	ldr	r3, [pc, #3076]	; 161fc <__assert_fail@plt+0x4434>
   155f4:	bl	11dc8 <__assert_fail@plt>
   155f8:	mov	ip, r4
   155fc:	b	152e8 <__assert_fail@plt+0x3520>
   15600:	mov	r3, r5
   15604:	movw	r2, #23304	; 0x5b08
   15608:	mov	r0, #1
   1560c:	movt	r2, #2
   15610:	mov	r1, r7
   15614:	bl	12a20 <__assert_fail@plt+0xc58>
   15618:	b	14ff0 <__assert_fail@plt+0x3228>
   1561c:	bne	15398 <__assert_fail@plt+0x35d0>
   15620:	ldr	r0, [sp, #20]
   15624:	bl	11960 <ferror@plt>
   15628:	cmp	r0, #0
   1562c:	bne	15398 <__assert_fail@plt+0x35d0>
   15630:	cmp	r6, #0
   15634:	beq	158f0 <__assert_fail@plt+0x3b28>
   15638:	mov	ip, #1
   1563c:	str	ip, [sp, #56]	; 0x38
   15640:	ldr	ip, [sp, #32]
   15644:	cmp	ip, #0
   15648:	cmpeq	r7, #1
   1564c:	beq	1592c <__assert_fail@plt+0x3b64>
   15650:	ldr	ip, [sp, #36]	; 0x24
   15654:	ldr	r1, [sp, #52]	; 0x34
   15658:	add	r3, ip, r1
   1565c:	ldr	r4, [r3, #12]
   15660:	ldr	r3, [r4]
   15664:	cmp	r3, #0
   15668:	beq	15970 <__assert_fail@plt+0x3ba8>
   1566c:	add	r4, r4, #52	; 0x34
   15670:	str	r8, [sp, #32]
   15674:	ldr	r9, [sp, #36]	; 0x24
   15678:	b	15688 <__assert_fail@plt+0x38c0>
   1567c:	ldr	r3, [r4], #52	; 0x34
   15680:	cmp	r3, #0
   15684:	beq	1596c <__assert_fail@plt+0x3ba4>
   15688:	ldr	r3, [r4, #-48]	; 0xffffffd0
   1568c:	tst	r3, #1
   15690:	bne	1567c <__assert_fail@plt+0x38b4>
   15694:	ldr	r3, [r4, #-28]	; 0xffffffe4
   15698:	cmp	r7, r3
   1569c:	bne	1567c <__assert_fail@plt+0x38b4>
   156a0:	ldr	r6, [r4, #-4]
   156a4:	cmp	r6, #0
   156a8:	beq	1567c <__assert_fail@plt+0x38b4>
   156ac:	ldrb	r3, [r6]
   156b0:	cmp	r3, #0
   156b4:	cmpne	r3, #44	; 0x2c
   156b8:	movne	r8, #0
   156bc:	moveq	r8, #1
   156c0:	beq	15794 <__assert_fail@plt+0x39cc>
   156c4:	ldr	r2, [r4, #-32]	; 0xffffffe0
   156c8:	add	r2, r9, r2, lsl #3
   156cc:	ldr	fp, [r2, #268]	; 0x10c
   156d0:	cmp	fp, #0
   156d4:	bne	1573c <__assert_fail@plt+0x3974>
   156d8:	cmp	r3, #49	; 0x31
   156dc:	bne	1625c <__assert_fail@plt+0x4494>
   156e0:	mov	r1, #1
   156e4:	ldr	r3, [r4, #-52]	; 0xffffffcc
   156e8:	movw	r2, #30488	; 0x7718
   156ec:	mov	r0, sl
   156f0:	movt	r2, #2
   156f4:	bl	11c9c <__fprintf_chk@plt>
   156f8:	mov	r0, sl
   156fc:	bl	11960 <ferror@plt>
   15700:	cmp	r0, #0
   15704:	bne	158a8 <__assert_fail@plt+0x3ae0>
   15708:	adds	r5, r6, #1
   1570c:	beq	1567c <__assert_fail@plt+0x38b4>
   15710:	ldrb	r3, [r6, #1]
   15714:	cmp	r3, #0
   15718:	beq	1567c <__assert_fail@plt+0x38b4>
   1571c:	cmp	r3, #44	; 0x2c
   15720:	bne	16240 <__assert_fail@plt+0x4478>
   15724:	adds	r6, r5, #1
   15728:	beq	1567c <__assert_fail@plt+0x38b4>
   1572c:	ldrb	r3, [r5, #1]
   15730:	cmp	r3, #0
   15734:	bne	156b0 <__assert_fail@plt+0x38e8>
   15738:	b	1567c <__assert_fail@plt+0x38b4>
   1573c:	cmp	fp, #1
   15740:	beq	157c8 <__assert_fail@plt+0x3a00>
   15744:	mov	r0, r6
   15748:	mov	r1, #44	; 0x2c
   1574c:	bl	11bc4 <strchr@plt>
   15750:	subs	r5, r0, #0
   15754:	beq	16358 <__assert_fail@plt+0x4590>
   15758:	strb	r8, [r5]
   1575c:	mov	r1, #1
   15760:	ldr	r3, [r4, #-52]	; 0xffffffcc
   15764:	movw	r2, #23476	; 0x5bb4
   15768:	str	r6, [sp]
   1576c:	movt	r2, #2
   15770:	mov	r0, sl
   15774:	bl	11c9c <__fprintf_chk@plt>
   15778:	mov	r0, sl
   1577c:	bl	11960 <ferror@plt>
   15780:	cmp	r0, #0
   15784:	bne	158a8 <__assert_fail@plt+0x3ae0>
   15788:	mov	r3, #44	; 0x2c
   1578c:	strb	r3, [r5]
   15790:	b	15724 <__assert_fail@plt+0x395c>
   15794:	mov	r1, #1
   15798:	ldr	r3, [r4, #-52]	; 0xffffffcc
   1579c:	movw	r2, #30488	; 0x7718
   157a0:	mov	r0, sl
   157a4:	movt	r2, #2
   157a8:	bl	11c9c <__fprintf_chk@plt>
   157ac:	mov	r0, sl
   157b0:	bl	11960 <ferror@plt>
   157b4:	cmp	r0, #0
   157b8:	bne	158a8 <__assert_fail@plt+0x3ae0>
   157bc:	ldrb	r3, [r6]
   157c0:	mov	r5, r6
   157c4:	b	15714 <__assert_fail@plt+0x394c>
   157c8:	cmp	r3, #34	; 0x22
   157cc:	bne	1633c <__assert_fail@plt+0x4574>
   157d0:	add	r6, r6, #1
   157d4:	mov	r1, #44	; 0x2c
   157d8:	mov	r0, r6
   157dc:	bl	11bc4 <strchr@plt>
   157e0:	subs	r5, r0, #0
   157e4:	beq	16288 <__assert_fail@plt+0x44c0>
   157e8:	strb	r8, [r5]
   157ec:	mov	r0, r6
   157f0:	ldr	r6, [r4, #-52]	; 0xffffffcc
   157f4:	bl	12f28 <__assert_fail@plt+0x1160>
   157f8:	mov	r1, fp
   157fc:	movw	r2, #23476	; 0x5bb4
   15800:	movt	r2, #2
   15804:	mov	r3, r6
   15808:	str	r0, [sp]
   1580c:	mov	r0, sl
   15810:	bl	11c9c <__fprintf_chk@plt>
   15814:	mov	r0, sl
   15818:	bl	11960 <ferror@plt>
   1581c:	cmp	r0, #0
   15820:	bne	158a8 <__assert_fail@plt+0x3ae0>
   15824:	mov	r2, #44	; 0x2c
   15828:	strb	r2, [r5]
   1582c:	b	15724 <__assert_fail@plt+0x395c>
   15830:	mov	r1, #1
   15834:	mov	r2, #42	; 0x2a
   15838:	mov	r3, sl
   1583c:	movw	r0, #23560	; 0x5c08
   15840:	movt	r0, #2
   15844:	bl	11a80 <fwrite@plt>
   15848:	mov	r0, sl
   1584c:	bl	11960 <ferror@plt>
   15850:	cmp	r0, #0
   15854:	bne	158a8 <__assert_fail@plt+0x3ae0>
   15858:	mov	r1, #1
   1585c:	mov	r2, #64	; 0x40
   15860:	mov	r3, sl
   15864:	movw	r0, #23604	; 0x5c34
   15868:	movt	r0, #2
   1586c:	bl	11a80 <fwrite@plt>
   15870:	mov	r0, sl
   15874:	bl	11960 <ferror@plt>
   15878:	cmp	r0, #0
   1587c:	bne	158a8 <__assert_fail@plt+0x3ae0>
   15880:	mov	r1, #1
   15884:	mov	r2, #43	; 0x2b
   15888:	mov	r3, sl
   1588c:	movw	r0, #23672	; 0x5c78
   15890:	movt	r0, #2
   15894:	bl	11a80 <fwrite@plt>
   15898:	mov	r0, sl
   1589c:	bl	11960 <ferror@plt>
   158a0:	cmp	r0, #0
   158a4:	beq	159b0 <__assert_fail@plt+0x3be8>
   158a8:	ldr	r0, [sp, #76]	; 0x4c
   158ac:	bl	1716c <__assert_fail@plt+0x53a4>
   158b0:	ldr	ip, [sp, #40]	; 0x28
   158b4:	mov	r0, sl
   158b8:	ldr	r6, [ip]
   158bc:	bl	11cc0 <fclose@plt>
   158c0:	ldr	r0, [sp, #44]	; 0x2c
   158c4:	bl	11d98 <close@plt>
   158c8:	ldr	ip, [sp, #20]
   158cc:	cmp	ip, #0
   158d0:	beq	153c0 <__assert_fail@plt+0x35f8>
   158d4:	b	153b8 <__assert_fail@plt+0x35f0>
   158d8:	bl	11bf4 <__errno_location@plt>
   158dc:	mov	r4, #0
   158e0:	ldr	r6, [r0]
   158e4:	b	153cc <__assert_fail@plt+0x3604>
   158e8:	str	r5, [sp, #20]
   158ec:	str	r5, [sp, #32]
   158f0:	mov	r1, #1
   158f4:	ldr	r3, [pc, #2296]	; 161f4 <__assert_fail@plt+0x442c>
   158f8:	movw	r2, #23468	; 0x5bac
   158fc:	mov	r0, sl
   15900:	movt	r2, #2
   15904:	bl	11c9c <__fprintf_chk@plt>
   15908:	mov	r0, sl
   1590c:	bl	11960 <ferror@plt>
   15910:	cmp	r0, #0
   15914:	bne	158a8 <__assert_fail@plt+0x3ae0>
   15918:	ldr	ip, [sp, #32]
   1591c:	str	r0, [sp, #56]	; 0x38
   15920:	cmp	ip, #0
   15924:	cmpeq	r7, #1
   15928:	bne	15650 <__assert_fail@plt+0x3888>
   1592c:	movw	r0, #23400	; 0x5b68
   15930:	mov	r1, #1
   15934:	mov	r2, #13
   15938:	mov	r3, sl
   1593c:	movt	r0, #2
   15940:	bl	11a80 <fwrite@plt>
   15944:	b	15650 <__assert_fail@plt+0x3888>
   15948:	bl	11bf4 <__errno_location@plt>
   1594c:	ldr	r6, [r0]
   15950:	str	r0, [sp, #40]	; 0x28
   15954:	cmp	r6, #2
   15958:	bne	153c8 <__assert_fail@plt+0x3600>
   1595c:	mov	r0, r5
   15960:	mov	r5, sl
   15964:	bl	1716c <__assert_fail@plt+0x53a4>
   15968:	b	1517c <__assert_fail@plt+0x33b4>
   1596c:	ldr	r8, [sp, #32]
   15970:	bl	17e68 <__assert_fail@plt+0x60a0>
   15974:	bl	18674 <__assert_fail@plt+0x68ac>
   15978:	mov	r1, #1
   1597c:	ldr	r3, [pc, #2160]	; 161f4 <__assert_fail@plt+0x442c>
   15980:	movw	r2, #23476	; 0x5bb4
   15984:	movt	r2, #2
   15988:	str	r0, [sp]
   1598c:	mov	r0, sl
   15990:	bl	11c9c <__fprintf_chk@plt>
   15994:	mov	r0, sl
   15998:	bl	11960 <ferror@plt>
   1599c:	cmp	r0, #0
   159a0:	bne	158a8 <__assert_fail@plt+0x3ae0>
   159a4:	ldr	ip, [sp, #56]	; 0x38
   159a8:	cmp	ip, #0
   159ac:	beq	15830 <__assert_fail@plt+0x3a68>
   159b0:	ldr	ip, [sp, #20]
   159b4:	cmp	ip, #0
   159b8:	beq	15a18 <__assert_fail@plt+0x3c50>
   159bc:	add	fp, sp, #80	; 0x50
   159c0:	add	r9, sp, #76	; 0x4c
   159c4:	ldr	r4, [sp, #20]
   159c8:	b	159e8 <__assert_fail@plt+0x3c20>
   159cc:	mov	r1, sl
   159d0:	ldr	r0, [sp, #76]	; 0x4c
   159d4:	bl	11d74 <fputs@plt>
   159d8:	mov	r0, sl
   159dc:	bl	11960 <ferror@plt>
   159e0:	cmp	r0, #0
   159e4:	bne	15398 <__assert_fail@plt+0x35d0>
   159e8:	mov	r0, r4
   159ec:	mov	r1, r9
   159f0:	mov	r2, fp
   159f4:	mov	r3, #0
   159f8:	bl	18cbc <__assert_fail@plt+0x6ef4>
   159fc:	cmp	r0, #0
   15a00:	bgt	159cc <__assert_fail@plt+0x3c04>
   15a04:	bne	15398 <__assert_fail@plt+0x35d0>
   15a08:	ldr	r0, [sp, #20]
   15a0c:	bl	11960 <ferror@plt>
   15a10:	cmp	r0, #0
   15a14:	bne	15398 <__assert_fail@plt+0x35d0>
   15a18:	ldr	r0, [sp, #76]	; 0x4c
   15a1c:	bl	1716c <__assert_fail@plt+0x53a4>
   15a20:	mov	r0, sl
   15a24:	mov	r3, #0
   15a28:	str	r3, [sp, #76]	; 0x4c
   15a2c:	bl	11cc0 <fclose@plt>
   15a30:	cmp	r0, #0
   15a34:	bne	16374 <__assert_fail@plt+0x45ac>
   15a38:	ldr	r0, [sp, #44]	; 0x2c
   15a3c:	bl	11d98 <close@plt>
   15a40:	ldr	ip, [sp, #20]
   15a44:	cmp	ip, #0
   15a48:	beq	15a5c <__assert_fail@plt+0x3c94>
   15a4c:	mov	r0, ip
   15a50:	bl	11cc0 <fclose@plt>
   15a54:	cmp	r0, #0
   15a58:	bne	16234 <__assert_fail@plt+0x446c>
   15a5c:	ldr	r3, [r8, #-28]	; 0xffffffe4
   15a60:	add	r2, sp, #200	; 0xc8
   15a64:	ldr	r0, [sp, #28]
   15a68:	ldr	r1, [sp, #60]	; 0x3c
   15a6c:	add	r3, r2, r3, lsl #2
   15a70:	ldr	r2, [r3, #-88]	; 0xffffffa8
   15a74:	bl	13d4c <__assert_fail@plt+0x1f84>
   15a78:	cmp	r0, #0
   15a7c:	beq	150a0 <__assert_fail@plt+0x32d8>
   15a80:	mov	r2, #5
   15a84:	mov	r4, r0
   15a88:	movw	r1, #23716	; 0x5ca4
   15a8c:	mov	r0, #0
   15a90:	movt	r1, #2
   15a94:	bl	119cc <dcgettext@plt>
   15a98:	ldr	ip, [sp, #28]
   15a9c:	ldr	r1, [sp, #36]	; 0x24
   15aa0:	ldr	r3, [r1, ip, lsl #4]
   15aa4:	mov	r2, r0
   15aa8:	mov	r0, #0
   15aac:	mov	r1, r0
   15ab0:	bl	12a20 <__assert_fail@plt+0xc58>
   15ab4:	ldr	ip, [sp, #40]	; 0x28
   15ab8:	mov	r3, #22
   15abc:	mov	r6, r3
   15ac0:	str	r3, [ip]
   15ac4:	b	153cc <__assert_fail@plt+0x3604>
   15ac8:	ldr	r1, [r3, #100]	; 0x64
   15acc:	mov	r2, r6
   15ad0:	ldr	r0, [sp, #28]
   15ad4:	str	r6, [sp, #76]	; 0x4c
   15ad8:	bl	12900 <__assert_fail@plt+0xb38>
   15adc:	cmp	r0, #0
   15ae0:	str	r0, [sp, #40]	; 0x28
   15ae4:	beq	162fc <__assert_fail@plt+0x4534>
   15ae8:	ldr	ip, [sp, #40]	; 0x28
   15aec:	ldr	r3, [ip, #28]
   15af0:	cmp	r3, #0
   15af4:	beq	162c4 <__assert_fail@plt+0x44fc>
   15af8:	ldr	ip, [sp, #40]	; 0x28
   15afc:	movw	r1, #20640	; 0x50a0
   15b00:	movt	r1, #2
   15b04:	ldr	r3, [ip, #20]
   15b08:	add	r3, r1, r3, lsl #3
   15b0c:	ldr	r3, [r3, #268]	; 0x10c
   15b10:	cmp	r3, #0
   15b14:	beq	162e0 <__assert_fail@plt+0x4518>
   15b18:	mov	r1, r7
   15b1c:	ldr	r0, [sp, #28]
   15b20:	bl	13000 <__assert_fail@plt+0x1238>
   15b24:	bl	17134 <__assert_fail@plt+0x536c>
   15b28:	mov	r9, r0
   15b2c:	bl	11b88 <getpid@plt>
   15b30:	mov	r1, r9
   15b34:	mov	r2, r0
   15b38:	movw	r0, #23360	; 0x5b40
   15b3c:	movt	r0, #2
   15b40:	bl	18bd8 <__assert_fail@plt+0x6e10>
   15b44:	mov	r5, r0
   15b48:	bl	11b88 <getpid@plt>
   15b4c:	mov	r1, r9
   15b50:	mov	r2, r0
   15b54:	movw	r0, #23380	; 0x5b54
   15b58:	movt	r0, #2
   15b5c:	bl	18bd8 <__assert_fail@plt+0x6e10>
   15b60:	ldr	ip, [sp, #40]	; 0x28
   15b64:	ldr	r4, [ip, #48]	; 0x30
   15b68:	cmp	r4, #0
   15b6c:	moveq	r7, r4
   15b70:	mov	sl, r0
   15b74:	beq	15b88 <__assert_fail@plt+0x3dc0>
   15b78:	ldrb	r7, [r4]
   15b7c:	cmp	r7, #0
   15b80:	moveq	r4, r7
   15b84:	bne	15eac <__assert_fail@plt+0x40e4>
   15b88:	mov	r0, r9
   15b8c:	mov	r1, sl
   15b90:	bl	11c6c <link@plt>
   15b94:	cmp	r0, #0
   15b98:	blt	160a0 <__assert_fail@plt+0x42d8>
   15b9c:	bl	11bf4 <__errno_location@plt>
   15ba0:	str	r0, [sp, #32]
   15ba4:	add	r1, sp, #200	; 0xc8
   15ba8:	mov	r0, r5
   15bac:	add	fp, r1, fp
   15bb0:	mov	r2, #420	; 0x1a4
   15bb4:	mov	r1, #193	; 0xc1
   15bb8:	str	r5, [fp, #-88]	; 0xffffffa8
   15bbc:	str	r9, [fp, #-60]	; 0xffffffc4
   15bc0:	str	sl, [fp, #-32]	; 0xffffffe0
   15bc4:	bl	11ac8 <open64@plt>
   15bc8:	subs	ip, r0, #0
   15bcc:	str	ip, [sp, #44]	; 0x2c
   15bd0:	blt	160c4 <__assert_fail@plt+0x42fc>
   15bd4:	movw	r1, #23376	; 0x5b50
   15bd8:	movt	r1, #2
   15bdc:	bl	1187c <fdopen@plt>
   15be0:	subs	r5, r0, #0
   15be4:	beq	1639c <__assert_fail@plt+0x45d4>
   15be8:	cmp	sl, #0
   15bec:	beq	160d0 <__assert_fail@plt+0x4308>
   15bf0:	mov	r0, r9
   15bf4:	movw	r1, #24728	; 0x6098
   15bf8:	movt	r1, #2
   15bfc:	bl	11d2c <fopen64@plt>
   15c00:	subs	sl, r0, #0
   15c04:	beq	16318 <__assert_fail@plt+0x4550>
   15c08:	add	fp, sp, #80	; 0x50
   15c0c:	add	r9, sp, #76	; 0x4c
   15c10:	mov	ip, #0
   15c14:	str	ip, [sp, #20]
   15c18:	mov	r0, sl
   15c1c:	mov	r1, r9
   15c20:	mov	r2, fp
   15c24:	mov	r3, #0
   15c28:	bl	18cbc <__assert_fail@plt+0x6ef4>
   15c2c:	cmp	r0, #0
   15c30:	ble	15f00 <__assert_fail@plt+0x4138>
   15c34:	ldr	r6, [sp, #76]	; 0x4c
   15c38:	mov	r2, #27
   15c3c:	ldr	r0, [pc, #1468]	; 16200 <__assert_fail@plt+0x4438>
   15c40:	mov	r1, r6
   15c44:	bl	11d80 <strncmp@plt>
   15c48:	cmp	r0, #0
   15c4c:	bne	15c64 <__assert_fail@plt+0x3e9c>
   15c50:	ldr	ip, [sp, #20]
   15c54:	cmp	ip, #0
   15c58:	bne	161a8 <__assert_fail@plt+0x43e0>
   15c5c:	mov	ip, #1
   15c60:	str	ip, [sp, #20]
   15c64:	ldrb	r3, [r6]
   15c68:	cmp	r3, #32
   15c6c:	cmpne	r3, #9
   15c70:	bne	15e6c <__assert_fail@plt+0x40a4>
   15c74:	add	r2, r6, #1
   15c78:	mov	r0, r2
   15c7c:	ldrb	r3, [r2], #1
   15c80:	cmp	r3, #32
   15c84:	cmpne	r3, #9
   15c88:	beq	15c78 <__assert_fail@plt+0x3eb0>
   15c8c:	cmp	r3, #0
   15c90:	cmpne	r3, #13
   15c94:	beq	15da4 <__assert_fail@plt+0x3fdc>
   15c98:	cmp	r3, #10
   15c9c:	beq	15da4 <__assert_fail@plt+0x3fdc>
   15ca0:	cmp	r3, #35	; 0x23
   15ca4:	beq	15da4 <__assert_fail@plt+0x3fdc>
   15ca8:	ldrb	r3, [r0]
   15cac:	mov	r1, r0
   15cb0:	mov	r2, r0
   15cb4:	b	15cf4 <__assert_fail@plt+0x3f2c>
   15cb8:	cmp	r3, #13
   15cbc:	beq	15d00 <__assert_fail@plt+0x3f38>
   15cc0:	cmp	r3, #10
   15cc4:	beq	15d00 <__assert_fail@plt+0x3f38>
   15cc8:	ldrb	r3, [r1, #1]
   15ccc:	tst	r3, #223	; 0xdf
   15cd0:	beq	15cf0 <__assert_fail@plt+0x3f28>
   15cd4:	sub	ip, r3, #9
   15cd8:	cmp	ip, #1
   15cdc:	bls	15cf0 <__assert_fail@plt+0x3f28>
   15ce0:	cmp	r3, #13
   15ce4:	beq	15cf0 <__assert_fail@plt+0x3f28>
   15ce8:	cmp	r3, #35	; 0x23
   15cec:	addne	r2, r1, #2
   15cf0:	add	r1, r1, #1
   15cf4:	cmp	r3, #35	; 0x23
   15cf8:	cmpne	r3, #0
   15cfc:	bne	15cb8 <__assert_fail@plt+0x3ef0>
   15d00:	ldr	ip, [sp, #40]	; 0x28
   15d04:	mov	r1, #0
   15d08:	ldrb	r3, [r2]
   15d0c:	strb	r1, [r2]
   15d10:	ldr	r1, [ip, #44]	; 0x2c
   15d14:	tst	r1, #16
   15d18:	bne	15df8 <__assert_fail@plt+0x4030>
   15d1c:	cmp	r7, #0
   15d20:	beq	15df8 <__assert_fail@plt+0x4030>
   15d24:	mov	r1, r7
   15d28:	str	r2, [sp, #16]
   15d2c:	str	r3, [sp, #12]
   15d30:	bl	118dc <strcmp@plt>
   15d34:	ldr	r2, [sp, #16]
   15d38:	ldr	r3, [sp, #12]
   15d3c:	subs	r6, r0, #0
   15d40:	bne	15df8 <__assert_fail@plt+0x4030>
   15d44:	cmp	r4, #0
   15d48:	moveq	r7, r4
   15d4c:	beq	15d98 <__assert_fail@plt+0x3fd0>
   15d50:	add	r7, r4, #1
   15d54:	mov	r1, #44	; 0x2c
   15d58:	mov	r0, r7
   15d5c:	bl	11bc4 <strchr@plt>
   15d60:	ldr	r2, [sp, #16]
   15d64:	ldr	r3, [sp, #12]
   15d68:	subs	r4, r0, #0
   15d6c:	beq	15ee0 <__assert_fail@plt+0x4118>
   15d70:	strb	r6, [r4]
   15d74:	mov	r0, r7
   15d78:	str	r2, [sp, #16]
   15d7c:	str	r3, [sp, #12]
   15d80:	bl	12f28 <__assert_fail@plt+0x1160>
   15d84:	mov	r1, #44	; 0x2c
   15d88:	strb	r1, [r4], #1
   15d8c:	ldr	r2, [sp, #16]
   15d90:	ldr	r3, [sp, #12]
   15d94:	mov	r7, r0
   15d98:	strb	r3, [r2]
   15d9c:	ldr	r0, [sp, #76]	; 0x4c
   15da0:	b	15da8 <__assert_fail@plt+0x3fe0>
   15da4:	mov	r0, r6
   15da8:	mov	r1, r5
   15dac:	bl	11d74 <fputs@plt>
   15db0:	mov	r0, r5
   15db4:	bl	11960 <ferror@plt>
   15db8:	cmp	r0, #0
   15dbc:	beq	15c18 <__assert_fail@plt+0x3e50>
   15dc0:	ldr	r0, [sp, #76]	; 0x4c
   15dc4:	mov	r7, sl
   15dc8:	bl	1716c <__assert_fail@plt+0x53a4>
   15dcc:	ldr	ip, [sp, #32]
   15dd0:	mov	r0, r5
   15dd4:	ldr	r6, [ip]
   15dd8:	bl	11cc0 <fclose@plt>
   15ddc:	ldr	r0, [sp, #44]	; 0x2c
   15de0:	bl	11d98 <close@plt>
   15de4:	mov	r0, r7
   15de8:	bl	11cc0 <fclose@plt>
   15dec:	ldr	ip, [sp, #32]
   15df0:	str	r6, [ip]
   15df4:	b	153c8 <__assert_fail@plt+0x3600>
   15df8:	ldr	ip, [sp, #20]
   15dfc:	strb	r3, [r2]
   15e00:	cmp	ip, #0
   15e04:	movne	ip, #1
   15e08:	strne	ip, [sp, #20]
   15e0c:	bne	15c18 <__assert_fail@plt+0x3e50>
   15e10:	bl	17e68 <__assert_fail@plt+0x60a0>
   15e14:	bl	18674 <__assert_fail@plt+0x68ac>
   15e18:	mov	r1, #1
   15e1c:	movw	r2, #23416	; 0x5b78
   15e20:	movt	r2, #2
   15e24:	mov	r3, r0
   15e28:	mov	r0, r5
   15e2c:	bl	11c9c <__fprintf_chk@plt>
   15e30:	mov	r0, r5
   15e34:	bl	11960 <ferror@plt>
   15e38:	cmp	r0, #0
   15e3c:	bne	15dc0 <__assert_fail@plt+0x3ff8>
   15e40:	mov	r1, #1
   15e44:	ldr	r3, [sp, #76]	; 0x4c
   15e48:	movw	r2, #23460	; 0x5ba4
   15e4c:	mov	r0, r5
   15e50:	movt	r2, #2
   15e54:	bl	11c9c <__fprintf_chk@plt>
   15e58:	mov	r0, r5
   15e5c:	bl	11960 <ferror@plt>
   15e60:	cmp	r0, #0
   15e64:	beq	15c18 <__assert_fail@plt+0x3e50>
   15e68:	b	15dc0 <__assert_fail@plt+0x3ff8>
   15e6c:	mov	r0, r6
   15e70:	b	15c8c <__assert_fail@plt+0x3ec4>
   15e74:	ldr	r0, [sp, #20]
   15e78:	bl	11960 <ferror@plt>
   15e7c:	cmp	r0, #0
   15e80:	beq	15638 <__assert_fail@plt+0x3870>
   15e84:	b	15398 <__assert_fail@plt+0x35d0>
   15e88:	add	r3, sp, #140	; 0x8c
   15e8c:	ldr	r0, [r3, r5]
   15e90:	b	153e8 <__assert_fail@plt+0x3620>
   15e94:	mov	r1, r6
   15e98:	movw	r2, #23860	; 0x5d34
   15e9c:	mov	r0, #1
   15ea0:	movt	r2, #2
   15ea4:	bl	12a20 <__assert_fail@plt+0xc58>
   15ea8:	b	15438 <__assert_fail@plt+0x3670>
   15eac:	add	r7, r4, #1
   15eb0:	mov	r1, #44	; 0x2c
   15eb4:	mov	r0, r7
   15eb8:	bl	11bc4 <strchr@plt>
   15ebc:	subs	r4, r0, #0
   15ec0:	beq	161c8 <__assert_fail@plt+0x4400>
   15ec4:	strb	r6, [r4]
   15ec8:	mov	r0, r7
   15ecc:	bl	12f28 <__assert_fail@plt+0x1160>
   15ed0:	mov	r3, #44	; 0x2c
   15ed4:	strb	r3, [r4], #1
   15ed8:	mov	r7, r0
   15edc:	b	15b88 <__assert_fail@plt+0x3dc0>
   15ee0:	mov	r0, r7
   15ee4:	str	r2, [sp, #16]
   15ee8:	str	r3, [sp, #12]
   15eec:	bl	12f28 <__assert_fail@plt+0x1160>
   15ef0:	ldr	r2, [sp, #16]
   15ef4:	ldr	r3, [sp, #12]
   15ef8:	mov	r7, r0
   15efc:	b	15d98 <__assert_fail@plt+0x3fd0>
   15f00:	bne	15dc0 <__assert_fail@plt+0x3ff8>
   15f04:	mov	r0, sl
   15f08:	bl	11960 <ferror@plt>
   15f0c:	cmp	r0, #0
   15f10:	bne	15dc0 <__assert_fail@plt+0x3ff8>
   15f14:	ldr	ip, [sp, #20]
   15f18:	cmp	ip, #0
   15f1c:	beq	160d0 <__assert_fail@plt+0x4308>
   15f20:	mov	fp, #1
   15f24:	mov	r9, #44	; 0x2c
   15f28:	mov	r6, #0
   15f2c:	mov	r3, r7
   15f30:	b	15f48 <__assert_fail@plt+0x4180>
   15f34:	strb	r6, [r4]
   15f38:	mov	r0, r7
   15f3c:	bl	12f28 <__assert_fail@plt+0x1160>
   15f40:	strb	r9, [r4], #1
   15f44:	mov	r3, r0
   15f48:	cmp	r3, #0
   15f4c:	beq	15f98 <__assert_fail@plt+0x41d0>
   15f50:	movw	r2, #30488	; 0x7718
   15f54:	mov	r0, r5
   15f58:	movt	r2, #2
   15f5c:	mov	r1, #1
   15f60:	bl	11c9c <__fprintf_chk@plt>
   15f64:	cmp	r4, #0
   15f68:	beq	15f98 <__assert_fail@plt+0x41d0>
   15f6c:	add	r7, r4, #1
   15f70:	mov	r1, #44	; 0x2c
   15f74:	mov	r0, r7
   15f78:	bl	11bc4 <strchr@plt>
   15f7c:	subs	r4, r0, #0
   15f80:	bne	15f34 <__assert_fail@plt+0x416c>
   15f84:	mov	r0, r7
   15f88:	bl	12f28 <__assert_fail@plt+0x1160>
   15f8c:	mov	r3, r0
   15f90:	cmp	r3, #0
   15f94:	bne	15f50 <__assert_fail@plt+0x4188>
   15f98:	bl	17e68 <__assert_fail@plt+0x60a0>
   15f9c:	bl	18674 <__assert_fail@plt+0x68ac>
   15fa0:	mov	r1, #1
   15fa4:	ldr	r3, [pc, #596]	; 16200 <__assert_fail@plt+0x4438>
   15fa8:	movw	r2, #23476	; 0x5bb4
   15fac:	movt	r2, #2
   15fb0:	str	r0, [sp]
   15fb4:	mov	r0, r5
   15fb8:	bl	11c9c <__fprintf_chk@plt>
   15fbc:	mov	r0, r5
   15fc0:	bl	11960 <ferror@plt>
   15fc4:	cmp	r0, #0
   15fc8:	bne	16178 <__assert_fail@plt+0x43b0>
   15fcc:	cmp	fp, #0
   15fd0:	beq	16100 <__assert_fail@plt+0x4338>
   15fd4:	cmp	sl, #0
   15fd8:	addne	fp, sp, #80	; 0x50
   15fdc:	addne	r9, sp, #76	; 0x4c
   15fe0:	bne	16004 <__assert_fail@plt+0x423c>
   15fe4:	b	16034 <__assert_fail@plt+0x426c>
   15fe8:	mov	r1, r5
   15fec:	ldr	r0, [sp, #76]	; 0x4c
   15ff0:	bl	11d74 <fputs@plt>
   15ff4:	mov	r0, r5
   15ff8:	bl	11960 <ferror@plt>
   15ffc:	cmp	r0, #0
   16000:	bne	15dc0 <__assert_fail@plt+0x3ff8>
   16004:	mov	r0, sl
   16008:	mov	r1, r9
   1600c:	mov	r2, fp
   16010:	mov	r3, #0
   16014:	bl	18cbc <__assert_fail@plt+0x6ef4>
   16018:	cmp	r0, #0
   1601c:	bgt	15fe8 <__assert_fail@plt+0x4220>
   16020:	bne	15dc0 <__assert_fail@plt+0x3ff8>
   16024:	mov	r0, sl
   16028:	bl	11960 <ferror@plt>
   1602c:	cmp	r0, #0
   16030:	bne	15dc0 <__assert_fail@plt+0x3ff8>
   16034:	ldr	r0, [sp, #76]	; 0x4c
   16038:	bl	1716c <__assert_fail@plt+0x53a4>
   1603c:	mov	r0, r5
   16040:	mov	r3, #0
   16044:	str	r3, [sp, #76]	; 0x4c
   16048:	bl	11cc0 <fclose@plt>
   1604c:	cmp	r0, #0
   16050:	bne	163a8 <__assert_fail@plt+0x45e0>
   16054:	ldr	r0, [sp, #44]	; 0x2c
   16058:	bl	11d98 <close@plt>
   1605c:	cmp	sl, #0
   16060:	beq	150a0 <__assert_fail@plt+0x32d8>
   16064:	mov	r0, sl
   16068:	bl	11cc0 <fclose@plt>
   1606c:	cmp	r0, #0
   16070:	beq	150a0 <__assert_fail@plt+0x32d8>
   16074:	ldr	ip, [sp, #32]
   16078:	mvn	r4, #0
   1607c:	ldr	r6, [ip]
   16080:	b	153cc <__assert_fail@plt+0x3604>
   16084:	bl	11c6c <link@plt>
   16088:	cmp	r0, #0
   1608c:	beq	161bc <__assert_fail@plt+0x43f4>
   16090:	mov	r4, r0
   16094:	bl	11bf4 <__errno_location@plt>
   16098:	ldr	r6, [r0]
   1609c:	b	153cc <__assert_fail@plt+0x3604>
   160a0:	bl	11bf4 <__errno_location@plt>
   160a4:	ldr	r6, [r0]
   160a8:	str	r0, [sp, #32]
   160ac:	cmp	r6, #2
   160b0:	bne	153c8 <__assert_fail@plt+0x3600>
   160b4:	mov	r0, sl
   160b8:	mov	sl, #0
   160bc:	bl	1716c <__assert_fail@plt+0x53a4>
   160c0:	b	15ba4 <__assert_fail@plt+0x3ddc>
   160c4:	bl	11bf4 <__errno_location@plt>
   160c8:	ldr	r6, [r0]
   160cc:	b	153c8 <__assert_fail@plt+0x3600>
   160d0:	mov	r1, #1
   160d4:	ldr	r3, [pc, #292]	; 16200 <__assert_fail@plt+0x4438>
   160d8:	movw	r2, #23468	; 0x5bac
   160dc:	mov	r0, r5
   160e0:	movt	r2, #2
   160e4:	bl	11c9c <__fprintf_chk@plt>
   160e8:	mov	r0, r5
   160ec:	bl	11960 <ferror@plt>
   160f0:	cmp	r0, #0
   160f4:	bne	16178 <__assert_fail@plt+0x43b0>
   160f8:	mov	fp, r0
   160fc:	b	15f24 <__assert_fail@plt+0x415c>
   16100:	mov	r1, #1
   16104:	mov	r2, #42	; 0x2a
   16108:	mov	r3, r5
   1610c:	movw	r0, #23560	; 0x5c08
   16110:	movt	r0, #2
   16114:	bl	11a80 <fwrite@plt>
   16118:	mov	r0, r5
   1611c:	bl	11960 <ferror@plt>
   16120:	cmp	r0, #0
   16124:	bne	16178 <__assert_fail@plt+0x43b0>
   16128:	mov	r1, #1
   1612c:	mov	r2, #64	; 0x40
   16130:	mov	r3, r5
   16134:	movw	r0, #23604	; 0x5c34
   16138:	movt	r0, #2
   1613c:	bl	11a80 <fwrite@plt>
   16140:	mov	r0, r5
   16144:	bl	11960 <ferror@plt>
   16148:	cmp	r0, #0
   1614c:	bne	16178 <__assert_fail@plt+0x43b0>
   16150:	mov	r1, #1
   16154:	mov	r2, #43	; 0x2b
   16158:	mov	r3, r5
   1615c:	movw	r0, #23672	; 0x5c78
   16160:	movt	r0, #2
   16164:	bl	11a80 <fwrite@plt>
   16168:	mov	r0, r5
   1616c:	bl	11960 <ferror@plt>
   16170:	cmp	r0, #0
   16174:	beq	15fd4 <__assert_fail@plt+0x420c>
   16178:	ldr	r0, [sp, #76]	; 0x4c
   1617c:	mov	r7, sl
   16180:	bl	1716c <__assert_fail@plt+0x53a4>
   16184:	ldr	ip, [sp, #32]
   16188:	mov	r0, r5
   1618c:	ldr	r6, [ip]
   16190:	bl	11cc0 <fclose@plt>
   16194:	ldr	r0, [sp, #44]	; 0x2c
   16198:	bl	11d98 <close@plt>
   1619c:	cmp	sl, #0
   161a0:	beq	15dec <__assert_fail@plt+0x4024>
   161a4:	b	15de4 <__assert_fail@plt+0x401c>
   161a8:	mov	r0, sl
   161ac:	bl	11960 <ferror@plt>
   161b0:	cmp	r0, #0
   161b4:	beq	15f20 <__assert_fail@plt+0x4158>
   161b8:	b	15dc0 <__assert_fail@plt+0x3ff8>
   161bc:	mov	r0, r7
   161c0:	bl	119fc <unlink@plt>
   161c4:	b	15520 <__assert_fail@plt+0x3758>
   161c8:	mov	r0, r7
   161cc:	bl	12f28 <__assert_fail@plt+0x1160>
   161d0:	mov	r7, r0
   161d4:	b	15b88 <__assert_fail@plt+0x3dc0>
   161d8:	movw	r0, #23840	; 0x5d20
   161dc:	movw	r1, #21836	; 0x554c
   161e0:	movt	r0, #2
   161e4:	movt	r1, #2
   161e8:	movw	r2, #3116	; 0xc2c
   161ec:	ldr	r3, [pc, #8]	; 161fc <__assert_fail@plt+0x4434>
   161f0:	bl	11dc8 <__assert_fail@plt>
   161f4:			; <UNDEFINED> instruction: 0x000253b0
   161f8:	strdeq	r5, [r2], -r0
   161fc:	andeq	r5, r2, r4, lsl r4
   16200:	strdeq	r5, [r2], -r8
   16204:	andeq	r5, r2, r4, ror #7
   16208:	andeq	r5, r2, ip, asr #7
   1620c:	ldr	r0, [sp, #76]	; 0x4c
   16210:	bl	1716c <__assert_fail@plt+0x53a4>
   16214:	ldr	ip, [sp, #40]	; 0x28
   16218:	mov	r0, sl
   1621c:	ldr	r6, [ip]
   16220:	bl	11cc0 <fclose@plt>
   16224:	ldr	r0, [sp, #44]	; 0x2c
   16228:	bl	11d98 <close@plt>
   1622c:	b	153c0 <__assert_fail@plt+0x35f8>
   16230:	bl	119d8 <__stack_chk_fail@plt>
   16234:	ldr	ip, [sp, #40]	; 0x28
   16238:	ldr	r6, [ip]
   1623c:	b	153c8 <__assert_fail@plt+0x3600>
   16240:	movw	r0, #23508	; 0x5bd4
   16244:	movw	r1, #21836	; 0x554c
   16248:	movt	r0, #2
   1624c:	movt	r1, #2
   16250:	movw	r2, #2852	; 0xb24
   16254:	ldr	r3, [pc, #-84]	; 16208 <__assert_fail@plt+0x4440>
   16258:	bl	11dc8 <__assert_fail@plt>
   1625c:	movw	r0, #23484	; 0x5bbc
   16260:	movw	r1, #21836	; 0x554c
   16264:	movt	r0, #2
   16268:	movt	r1, #2
   1626c:	movw	r2, #2807	; 0xaf7
   16270:	ldr	r3, [pc, #-112]	; 16208 <__assert_fail@plt+0x4440>
   16274:	bl	11dc8 <__assert_fail@plt>
   16278:	movw	r6, #23988	; 0x5db4
   1627c:	ldr	r5, [sp, #68]	; 0x44
   16280:	movt	r6, #2
   16284:	b	14fd8 <__assert_fail@plt+0x3210>
   16288:	mov	r0, r6
   1628c:	ldr	r5, [r4, #-52]	; 0xffffffcc
   16290:	bl	12f28 <__assert_fail@plt+0x1160>
   16294:	movw	r2, #23476	; 0x5bb4
   16298:	movt	r2, #2
   1629c:	mov	r1, fp
   162a0:	mov	r3, r5
   162a4:	str	r0, [sp]
   162a8:	mov	r0, sl
   162ac:	bl	11c9c <__fprintf_chk@plt>
   162b0:	mov	r0, sl
   162b4:	bl	11960 <ferror@plt>
   162b8:	cmp	r0, #0
   162bc:	beq	1567c <__assert_fail@plt+0x38b4>
   162c0:	b	158a8 <__assert_fail@plt+0x3ae0>
   162c4:	movw	r0, #23764	; 0x5cd4
   162c8:	movw	r1, #21836	; 0x554c
   162cc:	movt	r0, #2
   162d0:	movt	r1, #2
   162d4:	movw	r2, #2355	; 0x933
   162d8:	ldr	r3, [pc, #-220]	; 16204 <__assert_fail@plt+0x443c>
   162dc:	bl	11dc8 <__assert_fail@plt>
   162e0:	movw	r0, #23780	; 0x5ce4
   162e4:	movw	r1, #21836	; 0x554c
   162e8:	movt	r0, #2
   162ec:	movt	r1, #2
   162f0:	movw	r2, #2356	; 0x934
   162f4:	ldr	r3, [pc, #-248]	; 16204 <__assert_fail@plt+0x443c>
   162f8:	bl	11dc8 <__assert_fail@plt>
   162fc:	movw	r0, #31672	; 0x7bb8
   16300:	movw	r1, #21836	; 0x554c
   16304:	movt	r0, #2
   16308:	movt	r1, #2
   1630c:	movw	r2, #2354	; 0x932
   16310:	ldr	r3, [pc, #-276]	; 16204 <__assert_fail@plt+0x443c>
   16314:	bl	11dc8 <__assert_fail@plt>
   16318:	ldr	r0, [sp, #76]	; 0x4c
   1631c:	bl	1716c <__assert_fail@plt+0x53a4>
   16320:	ldr	ip, [sp, #32]
   16324:	mov	r0, r5
   16328:	ldr	r6, [ip]
   1632c:	bl	11cc0 <fclose@plt>
   16330:	ldr	r0, [sp, #44]	; 0x2c
   16334:	bl	11d98 <close@plt>
   16338:	b	15dec <__assert_fail@plt+0x4024>
   1633c:	movw	r0, #23496	; 0x5bc8
   16340:	movw	r1, #21836	; 0x554c
   16344:	movt	r0, #2
   16348:	movt	r1, #2
   1634c:	movw	r2, #2819	; 0xb03
   16350:	ldr	r3, [pc, #-336]	; 16208 <__assert_fail@plt+0x4440>
   16354:	bl	11dc8 <__assert_fail@plt>
   16358:	ldr	r3, [r4, #-52]	; 0xffffffcc
   1635c:	movw	r2, #23476	; 0x5bb4
   16360:	str	r6, [sp]
   16364:	movt	r2, #2
   16368:	mov	r0, sl
   1636c:	mov	r1, #1
   16370:	b	162ac <__assert_fail@plt+0x44e4>
   16374:	ldr	ip, [sp, #40]	; 0x28
   16378:	ldr	r0, [sp, #44]	; 0x2c
   1637c:	ldr	r6, [ip]
   16380:	bl	11d98 <close@plt>
   16384:	ldr	ip, [sp, #20]
   16388:	cmp	ip, #0
   1638c:	beq	153c0 <__assert_fail@plt+0x35f8>
   16390:	mov	r0, ip
   16394:	bl	11cc0 <fclose@plt>
   16398:	b	153c0 <__assert_fail@plt+0x35f8>
   1639c:	ldr	ip, [sp, #32]
   163a0:	ldr	r6, [ip]
   163a4:	b	153c8 <__assert_fail@plt+0x3600>
   163a8:	ldr	ip, [sp, #32]
   163ac:	mov	r7, sl
   163b0:	ldr	r0, [sp, #44]	; 0x2c
   163b4:	ldr	r6, [ip]
   163b8:	bl	11d98 <close@plt>
   163bc:	cmp	sl, #0
   163c0:	bne	15de4 <__assert_fail@plt+0x401c>
   163c4:	b	15dec <__assert_fail@plt+0x4024>
   163c8:	movw	ip, #44624	; 0xae50
   163cc:	movt	ip, #3
   163d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   163d4:	mov	r4, r1
   163d8:	ldr	r1, [ip]
   163dc:	sub	sp, sp, #108	; 0x6c
   163e0:	subs	r5, r0, #0
   163e4:	str	r3, [sp, #28]
   163e8:	mov	r3, #0
   163ec:	str	ip, [sp, #52]	; 0x34
   163f0:	str	r2, [sp, #60]	; 0x3c
   163f4:	str	r3, [sp, #64]	; 0x40
   163f8:	str	r1, [sp, #100]	; 0x64
   163fc:	str	r3, [sp, #68]	; 0x44
   16400:	beq	16dd8 <__assert_fail@plt+0x5010>
   16404:	bl	17134 <__assert_fail@plt+0x536c>
   16408:	str	r0, [sp, #40]	; 0x28
   1640c:	add	r3, sp, #68	; 0x44
   16410:	mov	r2, #0
   16414:	add	ip, sp, #96	; 0x60
   16418:	str	ip, [sp, #16]
   1641c:	ldr	ip, [sp, #16]
   16420:	str	r2, [r3, #4]!
   16424:	cmp	r3, ip
   16428:	bne	1641c <__assert_fail@plt+0x4654>
   1642c:	movw	r1, #24728	; 0x6098
   16430:	ldr	r0, [sp, #40]	; 0x28
   16434:	movt	r1, #2
   16438:	bl	11d2c <fopen64@plt>
   1643c:	subs	sl, r0, #0
   16440:	beq	16df4 <__assert_fail@plt+0x502c>
   16444:	mov	ip, #0
   16448:	subs	r4, r4, ip
   1644c:	mov	fp, ip
   16450:	str	ip, [sp, #36]	; 0x24
   16454:	movne	r4, #1
   16458:	str	r4, [sp, #56]	; 0x38
   1645c:	mov	r4, ip
   16460:	str	ip, [sp, #24]
   16464:	mov	r0, sl
   16468:	add	r1, sp, #64	; 0x40
   1646c:	add	r2, sp, #68	; 0x44
   16470:	mov	r3, #0
   16474:	bl	18cbc <__assert_fail@plt+0x6ef4>
   16478:	cmp	r0, #0
   1647c:	ble	16c00 <__assert_fail@plt+0x4e38>
   16480:	ldr	r8, [sp, #64]	; 0x40
   16484:	add	fp, fp, #1
   16488:	ldrb	r3, [r8]
   1648c:	cmp	r3, #9
   16490:	cmpne	r3, #32
   16494:	bne	16abc <__assert_fail@plt+0x4cf4>
   16498:	add	r2, r8, #1
   1649c:	mov	r7, r2
   164a0:	ldrb	r3, [r2], #1
   164a4:	cmp	r3, #32
   164a8:	cmpne	r3, #9
   164ac:	beq	1649c <__assert_fail@plt+0x46d4>
   164b0:	cmp	r3, #35	; 0x23
   164b4:	cmpne	r3, #0
   164b8:	beq	16464 <__assert_fail@plt+0x469c>
   164bc:	cmp	r3, #13
   164c0:	beq	16464 <__assert_fail@plt+0x469c>
   164c4:	cmp	r3, #10
   164c8:	beq	16464 <__assert_fail@plt+0x469c>
   164cc:	subs	r8, r7, r8
   164d0:	ldr	ip, [sp, #36]	; 0x24
   164d4:	movne	r8, #1
   164d8:	adds	ip, ip, #0
   164dc:	eor	r3, r8, #1
   164e0:	movne	ip, #1
   164e4:	ands	r3, ip, r3
   164e8:	str	ip, [sp, #20]
   164ec:	bne	16c04 <__assert_fail@plt+0x4e3c>
   164f0:	cmp	r8, #0
   164f4:	bne	16a88 <__assert_fail@plt+0x4cc0>
   164f8:	ldrb	r1, [r7, #1]
   164fc:	add	r4, r7, #1
   16500:	cmp	r1, #0
   16504:	bne	16518 <__assert_fail@plt+0x4750>
   16508:	b	16b74 <__assert_fail@plt+0x4dac>
   1650c:	ldrb	r1, [r4, #1]!
   16510:	cmp	r1, #0
   16514:	beq	16b74 <__assert_fail@plt+0x4dac>
   16518:	movw	r0, #23984	; 0x5db0
   1651c:	movt	r0, #2
   16520:	bl	11bc4 <strchr@plt>
   16524:	cmp	r0, #0
   16528:	beq	1650c <__assert_fail@plt+0x4744>
   1652c:	str	r7, [sp, #48]	; 0x30
   16530:	mov	r3, #0
   16534:	strb	r3, [r4], #1
   16538:	mov	r7, r4
   1653c:	ldrb	r1, [r7]
   16540:	cmp	r1, #9
   16544:	cmpne	r1, #32
   16548:	bne	16564 <__assert_fail@plt+0x479c>
   1654c:	add	r3, r7, #1
   16550:	mov	r7, r3
   16554:	ldrb	r1, [r3], #1
   16558:	cmp	r1, #32
   1655c:	cmpne	r1, #9
   16560:	beq	16550 <__assert_fail@plt+0x4788>
   16564:	cmp	r1, #0
   16568:	beq	16ad0 <__assert_fail@plt+0x4d08>
   1656c:	mov	r4, r7
   16570:	b	16584 <__assert_fail@plt+0x47bc>
   16574:	ldrb	r1, [r4, #1]
   16578:	add	r4, r4, #1
   1657c:	cmp	r1, #0
   16580:	beq	16ac4 <__assert_fail@plt+0x4cfc>
   16584:	movw	r0, #23984	; 0x5db0
   16588:	movt	r0, #2
   1658c:	bl	11bc4 <strchr@plt>
   16590:	mov	r5, r4
   16594:	cmp	r0, #0
   16598:	beq	16574 <__assert_fail@plt+0x47ac>
   1659c:	cmp	r5, r7
   165a0:	beq	16ad0 <__assert_fail@plt+0x4d08>
   165a4:	mov	r6, r5
   165a8:	mov	r0, r7
   165ac:	mov	r4, #0
   165b0:	strb	r4, [r6], #1
   165b4:	bl	14144 <__assert_fail@plt+0x237c>
   165b8:	cmp	r0, #0
   165bc:	str	r0, [sp, #32]
   165c0:	blt	16d18 <__assert_fail@plt+0x4f50>
   165c4:	ldrb	r1, [r5, #1]
   165c8:	cmp	r1, #9
   165cc:	cmpne	r1, #32
   165d0:	bne	165ec <__assert_fail@plt+0x4824>
   165d4:	add	r3, r5, #2
   165d8:	mov	r6, r3
   165dc:	ldrb	r1, [r3], #1
   165e0:	cmp	r1, #32
   165e4:	cmpne	r1, #9
   165e8:	beq	165d8 <__assert_fail@plt+0x4810>
   165ec:	cmp	r1, #0
   165f0:	beq	16dac <__assert_fail@plt+0x4fe4>
   165f4:	mov	r4, r6
   165f8:	b	1660c <__assert_fail@plt+0x4844>
   165fc:	ldrb	r1, [r4, #1]
   16600:	add	r4, r4, #1
   16604:	cmp	r1, #0
   16608:	beq	16afc <__assert_fail@plt+0x4d34>
   1660c:	movw	r0, #23984	; 0x5db0
   16610:	movt	r0, #2
   16614:	bl	11bc4 <strchr@plt>
   16618:	mov	r7, r4
   1661c:	cmp	r0, #0
   16620:	beq	165fc <__assert_fail@plt+0x4834>
   16624:	cmp	r7, r6
   16628:	beq	16dac <__assert_fail@plt+0x4fe4>
   1662c:	ldr	ip, [sp, #32]
   16630:	mov	r4, r7
   16634:	mov	r2, #0
   16638:	strb	r2, [r4], #1
   1663c:	cmn	ip, #1
   16640:	streq	r2, [sp, #44]	; 0x2c
   16644:	beq	16660 <__assert_fail@plt+0x4898>
   16648:	mov	r0, ip
   1664c:	mov	r1, r6
   16650:	bl	12900 <__assert_fail@plt+0xb38>
   16654:	subs	ip, r0, #0
   16658:	str	ip, [sp, #44]	; 0x2c
   1665c:	beq	16e68 <__assert_fail@plt+0x50a0>
   16660:	ldrb	r3, [r7, #1]
   16664:	cmp	r3, #32
   16668:	cmpne	r3, #9
   1666c:	addeq	r7, r7, #2
   16670:	bne	16688 <__assert_fail@plt+0x48c0>
   16674:	mov	r4, r7
   16678:	ldrb	r3, [r7], #1
   1667c:	cmp	r3, #32
   16680:	cmpne	r3, #9
   16684:	beq	16674 <__assert_fail@plt+0x48ac>
   16688:	cmp	r3, #91	; 0x5b
   1668c:	movne	r7, #0
   16690:	beq	16bb8 <__assert_fail@plt+0x4df0>
   16694:	ldrb	r1, [r4]
   16698:	cmp	r1, #32
   1669c:	cmpne	r1, #9
   166a0:	bne	166bc <__assert_fail@plt+0x48f4>
   166a4:	add	r3, r4, #1
   166a8:	mov	r4, r3
   166ac:	ldrb	r1, [r3], #1
   166b0:	cmp	r1, #32
   166b4:	cmpne	r1, #9
   166b8:	beq	166a8 <__assert_fail@plt+0x48e0>
   166bc:	cmp	r1, #0
   166c0:	beq	16b10 <__assert_fail@plt+0x4d48>
   166c4:	mov	r9, r4
   166c8:	b	166dc <__assert_fail@plt+0x4914>
   166cc:	ldrb	r1, [r9, #1]
   166d0:	add	r9, r9, #1
   166d4:	cmp	r1, #0
   166d8:	beq	16b04 <__assert_fail@plt+0x4d3c>
   166dc:	movw	r0, #24212	; 0x5e94
   166e0:	movt	r0, #2
   166e4:	bl	11bc4 <strchr@plt>
   166e8:	mov	r6, r9
   166ec:	cmp	r0, #0
   166f0:	beq	166cc <__assert_fail@plt+0x4904>
   166f4:	cmp	r6, r4
   166f8:	beq	16b10 <__assert_fail@plt+0x4d48>
   166fc:	mov	r3, r6
   16700:	mov	r2, #0
   16704:	strb	r2, [r3], #-1
   16708:	cmp	r4, r3
   1670c:	bcs	16744 <__assert_fail@plt+0x497c>
   16710:	ldrb	r3, [r6, #-1]
   16714:	cmp	r3, #9
   16718:	cmpne	r3, #32
   1671c:	bne	16744 <__assert_fail@plt+0x497c>
   16720:	add	r1, r4, #1
   16724:	b	16738 <__assert_fail@plt+0x4970>
   16728:	ldrb	r3, [r6, #-1]
   1672c:	cmp	r3, #32
   16730:	cmpne	r3, #9
   16734:	bne	16744 <__assert_fail@plt+0x497c>
   16738:	strb	r2, [r6, #-1]!
   1673c:	cmp	r6, r1
   16740:	bne	16728 <__assert_fail@plt+0x4960>
   16744:	cmp	r7, #0
   16748:	beq	16770 <__assert_fail@plt+0x49a8>
   1674c:	movw	r1, #24216	; 0x5e98
   16750:	mov	r0, r7
   16754:	movt	r1, #2
   16758:	bl	118dc <strcmp@plt>
   1675c:	subs	r1, r0, #0
   16760:	bne	16b18 <__assert_fail@plt+0x4d50>
   16764:	ldrb	r3, [r4]
   16768:	cmp	r3, #0
   1676c:	bne	16d94 <__assert_fail@plt+0x4fcc>
   16770:	ldr	ip, [sp, #24]
   16774:	rsbs	r6, ip, #1
   16778:	ldr	ip, [sp, #28]
   1677c:	movcc	r6, #0
   16780:	cmp	ip, #0
   16784:	moveq	r3, #0
   16788:	andne	r3, r6, #1
   1678c:	cmp	r3, #0
   16790:	beq	168a8 <__assert_fail@plt+0x4ae0>
   16794:	cmp	r8, #0
   16798:	bne	16824 <__assert_fail@plt+0x4a5c>
   1679c:	ldr	r0, [sp, #48]	; 0x30
   167a0:	mov	r1, #58	; 0x3a
   167a4:	bl	11bc4 <strchr@plt>
   167a8:	cmp	r0, #0
   167ac:	beq	16e3c <__assert_fail@plt+0x5074>
   167b0:	add	ip, r0, #1
   167b4:	strb	r8, [r0]
   167b8:	mov	r1, #58	; 0x3a
   167bc:	str	ip, [sp, #12]
   167c0:	mov	r0, ip
   167c4:	bl	11bc4 <strchr@plt>
   167c8:	ldr	ip, [sp, #12]
   167cc:	cmp	r0, #0
   167d0:	strbne	r8, [r0]
   167d4:	ldr	r0, [sp, #48]	; 0x30
   167d8:	str	ip, [sp, #12]
   167dc:	bl	13718 <__assert_fail@plt+0x1950>
   167e0:	movw	r2, #24344	; 0x5f18
   167e4:	mov	r1, #1
   167e8:	movt	r2, #2
   167ec:	mov	r3, r0
   167f0:	ldr	r0, [sp, #28]
   167f4:	bl	11c9c <__fprintf_chk@plt>
   167f8:	ldr	ip, [sp, #12]
   167fc:	cmp	ip, #0
   16800:	beq	16e30 <__assert_fail@plt+0x5068>
   16804:	mov	r0, ip
   16808:	bl	13718 <__assert_fail@plt+0x1950>
   1680c:	mov	r3, r0
   16810:	movw	r2, #30488	; 0x7718
   16814:	ldr	r0, [sp, #28]
   16818:	movt	r2, #2
   1681c:	mov	r1, #1
   16820:	bl	11c9c <__fprintf_chk@plt>
   16824:	ldr	ip, [sp, #44]	; 0x2c
   16828:	movw	r2, #23988	; 0x5db4
   1682c:	movt	r2, #2
   16830:	movw	r3, #20640	; 0x50a0
   16834:	movt	r3, #2
   16838:	ldr	r1, [ip]
   1683c:	ldr	ip, [sp, #32]
   16840:	cmp	r1, #0
   16844:	moveq	r1, r2
   16848:	cmp	r7, #0
   1684c:	str	r1, [sp]
   16850:	mov	r1, #1
   16854:	moveq	r0, r2
   16858:	movne	r0, r7
   1685c:	ldr	r3, [r3, ip, lsl #4]
   16860:	movw	r2, #24352	; 0x5f20
   16864:	str	r0, [sp, #4]
   16868:	movt	r2, #2
   1686c:	ldr	r0, [sp, #28]
   16870:	bl	11c9c <__fprintf_chk@plt>
   16874:	cmp	r4, r5
   16878:	beq	1689c <__assert_fail@plt+0x4ad4>
   1687c:	mov	r0, r4
   16880:	bl	13718 <__assert_fail@plt+0x1950>
   16884:	movw	r2, #23116	; 0x5a4c
   16888:	mov	r1, #1
   1688c:	movt	r2, #2
   16890:	mov	r3, r0
   16894:	ldr	r0, [sp, #28]
   16898:	bl	11c9c <__fprintf_chk@plt>
   1689c:	mov	r0, #10
   168a0:	ldr	r1, [sp, #28]
   168a4:	bl	11a74 <_IO_putc@plt>
   168a8:	ldr	ip, [sp, #56]	; 0x38
   168ac:	tst	r6, ip
   168b0:	beq	16bb0 <__assert_fail@plt+0x4de8>
   168b4:	ldr	ip, [sp, #28]
   168b8:	cmp	ip, #0
   168bc:	movne	ip, #0
   168c0:	movne	r4, #1
   168c4:	strne	ip, [sp, #24]
   168c8:	bne	16464 <__assert_fail@plt+0x469c>
   168cc:	ldr	ip, [sp, #20]
   168d0:	cmp	ip, #0
   168d4:	bne	169c0 <__assert_fail@plt+0x4bf8>
   168d8:	ldr	ip, [sp, #48]	; 0x30
   168dc:	cmp	ip, #0
   168e0:	beq	16e8c <__assert_fail@plt+0x50c4>
   168e4:	ldrb	r5, [ip]
   168e8:	cmp	r5, #42	; 0x2a
   168ec:	beq	16ee4 <__assert_fail@plt+0x511c>
   168f0:	ldr	r0, [sp, #48]	; 0x30
   168f4:	mov	r1, #58	; 0x3a
   168f8:	bl	11bc4 <strchr@plt>
   168fc:	cmp	r0, #0
   16900:	addne	r6, r0, #1
   16904:	ldrne	ip, [sp, #48]	; 0x30
   16908:	movne	r3, #0
   1690c:	strbne	r3, [r0]
   16910:	moveq	r6, r0
   16914:	ldrbne	r5, [ip]
   16918:	cmp	r5, #0
   1691c:	beq	16944 <__assert_fail@plt+0x4b7c>
   16920:	movw	r5, #44652	; 0xae6c
   16924:	movt	r5, #3
   16928:	ldr	r1, [r5, #20]
   1692c:	cmp	r1, #0
   16930:	beq	16ef4 <__assert_fail@plt+0x512c>
   16934:	ldr	r0, [sp, #48]	; 0x30
   16938:	bl	118dc <strcmp@plt>
   1693c:	cmp	r0, #0
   16940:	beq	169c0 <__assert_fail@plt+0x4bf8>
   16944:	cmp	r6, #0
   16948:	beq	16ea0 <__assert_fail@plt+0x50d8>
   1694c:	ldrb	r3, [r6]
   16950:	cmp	r3, #0
   16954:	beq	16ea0 <__assert_fail@plt+0x50d8>
   16958:	movw	r5, #44652	; 0xae6c
   1695c:	movt	r5, #3
   16960:	ldr	r1, [r5, #24]
   16964:	cmp	r1, #0
   16968:	beq	1700c <__assert_fail@plt+0x5244>
   1696c:	mov	r0, r6
   16970:	bl	118dc <strcmp@plt>
   16974:	cmp	r0, #0
   16978:	beq	169c0 <__assert_fail@plt+0x4bf8>
   1697c:	ldr	r3, [r5, #28]
   16980:	movw	r9, #44652	; 0xae6c
   16984:	movt	r9, #3
   16988:	cmp	r3, #0
   1698c:	beq	16f30 <__assert_fail@plt+0x5168>
   16990:	ldr	r1, [r3]
   16994:	cmp	r1, #0
   16998:	beq	16ea0 <__assert_fail@plt+0x50d8>
   1699c:	mov	r5, r3
   169a0:	b	169b0 <__assert_fail@plt+0x4be8>
   169a4:	ldr	r1, [r5, #4]!
   169a8:	cmp	r1, #0
   169ac:	beq	16ea0 <__assert_fail@plt+0x50d8>
   169b0:	mov	r0, r6
   169b4:	bl	118dc <strcmp@plt>
   169b8:	cmp	r0, #0
   169bc:	bne	169a4 <__assert_fail@plt+0x4bdc>
   169c0:	cmp	r7, #0
   169c4:	beq	16a10 <__assert_fail@plt+0x4c48>
   169c8:	mov	r0, r7
   169cc:	movw	r1, #24216	; 0x5e98
   169d0:	movt	r1, #2
   169d4:	bl	118dc <strcmp@plt>
   169d8:	cmp	r0, #0
   169dc:	moveq	r7, #16
   169e0:	beq	16a10 <__assert_fail@plt+0x4c48>
   169e4:	movw	r1, #24300	; 0x5eec
   169e8:	mov	r0, r7
   169ec:	movt	r1, #2
   169f0:	bl	118dc <strcmp@plt>
   169f4:	cmp	r0, #0
   169f8:	bne	16eb4 <__assert_fail@plt+0x50ec>
   169fc:	ldr	ip, [sp, #44]	; 0x2c
   16a00:	mov	r7, r0
   16a04:	ldr	r3, [ip, #4]
   16a08:	orr	r3, r3, #128	; 0x80
   16a0c:	str	r3, [ip, #4]
   16a10:	ldr	ip, [sp, #60]	; 0x3c
   16a14:	cmp	ip, #0
   16a18:	beq	16ba0 <__assert_fail@plt+0x4dd8>
   16a1c:	ldr	ip, [sp, #32]
   16a20:	cmp	ip, #4
   16a24:	bhi	1708c <__assert_fail@plt+0x52c4>
   16a28:	cmp	r7, #0
   16a2c:	ldrne	ip, [sp, #44]	; 0x2c
   16a30:	movne	r3, #0
   16a34:	strne	r3, [ip, #44]	; 0x2c
   16a38:	ldrb	r3, [r4]
   16a3c:	cmp	r3, #0
   16a40:	beq	16a5c <__assert_fail@plt+0x4c94>
   16a44:	ldr	ip, [sp, #44]	; 0x2c
   16a48:	ldr	r0, [ip, #48]	; 0x30
   16a4c:	bl	1716c <__assert_fail@plt+0x53a4>
   16a50:	ldr	ip, [sp, #44]	; 0x2c
   16a54:	mov	r3, #0
   16a58:	str	r3, [ip, #48]	; 0x30
   16a5c:	mov	r3, r4
   16a60:	ldr	r0, [sp, #44]	; 0x2c
   16a64:	mov	r2, r7
   16a68:	add	r1, sp, #72	; 0x48
   16a6c:	mov	ip, #1
   16a70:	str	ip, [sp, #36]	; 0x24
   16a74:	bl	13170 <__assert_fail@plt+0x13a8>
   16a78:	mov	ip, #0
   16a7c:	ldr	r4, [sp, #36]	; 0x24
   16a80:	str	ip, [sp, #24]
   16a84:	b	16464 <__assert_fail@plt+0x469c>
   16a88:	cmp	r4, #0
   16a8c:	strne	r3, [sp, #48]	; 0x30
   16a90:	bne	1653c <__assert_fail@plt+0x4774>
   16a94:	str	fp, [sp]
   16a98:	movw	r2, #23992	; 0x5db8
   16a9c:	mov	r0, r4
   16aa0:	movt	r2, #2
   16aa4:	mov	r1, r4
   16aa8:	ldr	r3, [sp, #40]	; 0x28
   16aac:	bl	12a20 <__assert_fail@plt+0xc58>
   16ab0:	mvn	ip, #0
   16ab4:	str	ip, [sp, #24]
   16ab8:	b	16464 <__assert_fail@plt+0x469c>
   16abc:	mov	r7, r8
   16ac0:	b	164b0 <__assert_fail@plt+0x46e8>
   16ac4:	mov	r5, r4
   16ac8:	cmp	r5, r7
   16acc:	bne	165a4 <__assert_fail@plt+0x47dc>
   16ad0:	mov	r0, #0
   16ad4:	str	fp, [sp]
   16ad8:	mov	r1, r0
   16adc:	movw	r2, #24036	; 0x5de4
   16ae0:	ldr	r3, [sp, #40]	; 0x28
   16ae4:	movt	r2, #2
   16ae8:	bl	12a20 <__assert_fail@plt+0xc58>
   16aec:	mov	r4, #1
   16af0:	mvn	ip, #0
   16af4:	str	ip, [sp, #24]
   16af8:	b	16464 <__assert_fail@plt+0x469c>
   16afc:	mov	r7, r4
   16b00:	b	16624 <__assert_fail@plt+0x485c>
   16b04:	mov	r6, r9
   16b08:	cmp	r6, r4
   16b0c:	bne	166fc <__assert_fail@plt+0x4934>
   16b10:	mov	r4, r5
   16b14:	b	16744 <__assert_fail@plt+0x497c>
   16b18:	movw	r1, #24292	; 0x5ee4
   16b1c:	mov	r0, r7
   16b20:	movt	r1, #2
   16b24:	bl	118dc <strcmp@plt>
   16b28:	cmp	r0, #0
   16b2c:	beq	16770 <__assert_fail@plt+0x49a8>
   16b30:	movw	r1, #24300	; 0x5eec
   16b34:	mov	r0, r7
   16b38:	movt	r1, #2
   16b3c:	bl	118dc <strcmp@plt>
   16b40:	cmp	r0, #0
   16b44:	beq	16770 <__assert_fail@plt+0x49a8>
   16b48:	mov	r0, #0
   16b4c:	movw	r2, #24312	; 0x5ef8
   16b50:	str	fp, [sp]
   16b54:	mov	r1, r0
   16b58:	ldr	r3, [sp, #40]	; 0x28
   16b5c:	movt	r2, #2
   16b60:	bl	12a20 <__assert_fail@plt+0xc58>
   16b64:	mvn	ip, #0
   16b68:	mov	r4, #1
   16b6c:	str	ip, [sp, #24]
   16b70:	b	16464 <__assert_fail@plt+0x469c>
   16b74:	mov	r0, #0
   16b78:	str	fp, [sp]
   16b7c:	mov	r1, r0
   16b80:	movw	r2, #24592	; 0x6010
   16b84:	ldr	r3, [sp, #40]	; 0x28
   16b88:	movt	r2, #2
   16b8c:	bl	12a20 <__assert_fail@plt+0xc58>
   16b90:	mov	r4, #0
   16b94:	mvn	ip, #0
   16b98:	str	ip, [sp, #24]
   16b9c:	b	16464 <__assert_fail@plt+0x469c>
   16ba0:	mov	ip, #1
   16ba4:	str	ip, [sp, #36]	; 0x24
   16ba8:	ldr	ip, [sp, #60]	; 0x3c
   16bac:	str	ip, [sp, #24]
   16bb0:	mov	r4, #1
   16bb4:	b	16464 <__assert_fail@plt+0x469c>
   16bb8:	add	r7, r4, #1
   16bbc:	mov	r1, #93	; 0x5d
   16bc0:	mov	r0, r7
   16bc4:	bl	11bc4 <strchr@plt>
   16bc8:	subs	r1, r0, #0
   16bcc:	movne	r4, r1
   16bd0:	movne	r3, #0
   16bd4:	strbne	r3, [r4], #1
   16bd8:	bne	16694 <__assert_fail@plt+0x48cc>
   16bdc:	str	fp, [sp]
   16be0:	movw	r2, #24172	; 0x5e6c
   16be4:	ldr	r3, [sp, #40]	; 0x28
   16be8:	movt	r2, #2
   16bec:	bl	12a20 <__assert_fail@plt+0xc58>
   16bf0:	mov	r4, #1
   16bf4:	mvn	ip, #0
   16bf8:	str	ip, [sp, #24]
   16bfc:	b	16464 <__assert_fail@plt+0x469c>
   16c00:	bne	16c14 <__assert_fail@plt+0x4e4c>
   16c04:	mov	r0, sl
   16c08:	bl	11960 <ferror@plt>
   16c0c:	cmp	r0, #0
   16c10:	beq	16d40 <__assert_fail@plt+0x4f78>
   16c14:	bl	11bf4 <__errno_location@plt>
   16c18:	mov	r4, #0
   16c1c:	ldr	r3, [sp, #40]	; 0x28
   16c20:	movw	r2, #24568	; 0x5ff8
   16c24:	movt	r2, #2
   16c28:	mvn	ip, #0
   16c2c:	str	ip, [sp, #24]
   16c30:	ldr	r1, [r0]
   16c34:	mov	r0, r4
   16c38:	bl	12a20 <__assert_fail@plt+0xc58>
   16c3c:	mov	r0, sl
   16c40:	bl	11cc0 <fclose@plt>
   16c44:	cmp	r0, #0
   16c48:	bne	16d64 <__assert_fail@plt+0x4f9c>
   16c4c:	ldr	r0, [sp, #64]	; 0x40
   16c50:	bl	1716c <__assert_fail@plt+0x53a4>
   16c54:	cmp	r4, #0
   16c58:	beq	16cf0 <__assert_fail@plt+0x4f28>
   16c5c:	ldr	ip, [sp, #60]	; 0x3c
   16c60:	ldr	r0, [sp, #28]
   16c64:	adds	r3, ip, #0
   16c68:	movne	r3, #1
   16c6c:	cmp	r0, #0
   16c70:	movne	r3, #0
   16c74:	cmp	r3, #0
   16c78:	beq	16cf0 <__assert_fail@plt+0x4f28>
   16c7c:	mov	r3, #0
   16c80:	movw	r5, #45100	; 0xb02c
   16c84:	movt	r5, #3
   16c88:	mov	r4, r3
   16c8c:	ldr	r6, [r5, #12]
   16c90:	str	r3, [r5, #12]
   16c94:	mov	r1, #0
   16c98:	mov	r0, r4
   16c9c:	mov	r2, r1
   16ca0:	add	r4, r4, #1
   16ca4:	bl	14e4c <__assert_fail@plt+0x3084>
   16ca8:	cmp	r4, #5
   16cac:	bne	16c94 <__assert_fail@plt+0x4ecc>
   16cb0:	cmp	r6, #0
   16cb4:	str	r6, [r5, #12]
   16cb8:	beq	16cf0 <__assert_fail@plt+0x4f28>
   16cbc:	ldr	r5, [pc, #1000]	; 170ac <__assert_fail@plt+0x52e4>
   16cc0:	add	r4, sp, #68	; 0x44
   16cc4:	ldr	r3, [r4, #4]!
   16cc8:	cmp	r3, #0
   16ccc:	beq	16ce0 <__assert_fail@plt+0x4f18>
   16cd0:	ldr	r3, [r5, #12]
   16cd4:	cmp	r3, #0
   16cd8:	beq	16ce0 <__assert_fail@plt+0x4f18>
   16cdc:	blx	r3
   16ce0:	ldr	ip, [sp, #16]
   16ce4:	add	r5, r5, #24
   16ce8:	cmp	ip, r4
   16cec:	bne	16cc4 <__assert_fail@plt+0x4efc>
   16cf0:	ldr	r0, [sp, #40]	; 0x28
   16cf4:	bl	1716c <__assert_fail@plt+0x53a4>
   16cf8:	ldr	ip, [sp, #52]	; 0x34
   16cfc:	ldr	r2, [sp, #100]	; 0x64
   16d00:	ldr	r0, [sp, #24]
   16d04:	ldr	r3, [ip]
   16d08:	cmp	r2, r3
   16d0c:	bne	170a8 <__assert_fail@plt+0x52e0>
   16d10:	add	sp, sp, #108	; 0x6c
   16d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d18:	mov	r0, r4
   16d1c:	str	fp, [sp]
   16d20:	mov	r1, r4
   16d24:	movw	r2, #24072	; 0x5e08
   16d28:	ldr	r3, [sp, #40]	; 0x28
   16d2c:	movt	r2, #2
   16d30:	bl	12a20 <__assert_fail@plt+0xc58>
   16d34:	mvn	ip, #0
   16d38:	str	ip, [sp, #24]
   16d3c:	b	165c4 <__assert_fail@plt+0x47fc>
   16d40:	ldr	r4, [sp, #56]	; 0x38
   16d44:	mov	r0, sl
   16d48:	ldr	ip, [sp, #24]
   16d4c:	cmp	ip, #0
   16d50:	movne	r4, #0
   16d54:	andeq	r4, r4, #1
   16d58:	bl	11cc0 <fclose@plt>
   16d5c:	cmp	r0, #0
   16d60:	beq	16c4c <__assert_fail@plt+0x4e84>
   16d64:	mov	r0, sl
   16d68:	bl	11960 <ferror@plt>
   16d6c:	cmp	r0, #0
   16d70:	beq	16c4c <__assert_fail@plt+0x4e84>
   16d74:	bl	11bf4 <__errno_location@plt>
   16d78:	movw	r2, #20040	; 0x4e48
   16d7c:	ldr	r3, [sp, #40]	; 0x28
   16d80:	movt	r2, #2
   16d84:	ldr	r1, [r0]
   16d88:	mov	r0, #0
   16d8c:	bl	12a20 <__assert_fail@plt+0xc58>
   16d90:	b	16c4c <__assert_fail@plt+0x4e84>
   16d94:	str	fp, [sp]
   16d98:	movw	r2, #24224	; 0x5ea0
   16d9c:	ldr	r3, [sp, #40]	; 0x28
   16da0:	movt	r2, #2
   16da4:	bl	12a20 <__assert_fail@plt+0xc58>
   16da8:	b	16b64 <__assert_fail@plt+0x4d9c>
   16dac:	mov	r0, #0
   16db0:	str	fp, [sp]
   16db4:	mov	r1, r0
   16db8:	movw	r2, #24108	; 0x5e2c
   16dbc:	ldr	r3, [sp, #40]	; 0x28
   16dc0:	movt	r2, #2
   16dc4:	bl	12a20 <__assert_fail@plt+0xc58>
   16dc8:	mov	r4, #1
   16dcc:	mvn	ip, #0
   16dd0:	str	ip, [sp, #24]
   16dd4:	b	16464 <__assert_fail@plt+0x469c>
   16dd8:	bl	176a4 <__assert_fail@plt+0x58dc>
   16ddc:	mov	r2, r5
   16de0:	movw	r1, #23928	; 0x5d78
   16de4:	movt	r1, #2
   16de8:	bl	1fcb8 <__assert_fail@plt+0xdef0>
   16dec:	str	r0, [sp, #40]	; 0x28
   16df0:	b	1640c <__assert_fail@plt+0x4644>
   16df4:	bl	11bf4 <__errno_location@plt>
   16df8:	ldr	r1, [r0]
   16dfc:	cmp	r1, #2
   16e00:	bne	16e10 <__assert_fail@plt+0x5048>
   16e04:	cmp	r4, #0
   16e08:	strne	sl, [sp, #24]
   16e0c:	bne	16cf0 <__assert_fail@plt+0x4f28>
   16e10:	movw	r2, #23944	; 0x5d88
   16e14:	mov	r0, #0
   16e18:	movt	r2, #2
   16e1c:	ldr	r3, [sp, #40]	; 0x28
   16e20:	mvn	ip, #0
   16e24:	str	ip, [sp, #24]
   16e28:	bl	12a20 <__assert_fail@plt+0xc58>
   16e2c:	b	16cf0 <__assert_fail@plt+0x4f28>
   16e30:	movw	r3, #23988	; 0x5db4
   16e34:	movt	r3, #2
   16e38:	b	16810 <__assert_fail@plt+0x4a48>
   16e3c:	ldr	r0, [sp, #48]	; 0x30
   16e40:	bl	13718 <__assert_fail@plt+0x1950>
   16e44:	movw	r2, #24344	; 0x5f18
   16e48:	mov	r1, #1
   16e4c:	movt	r2, #2
   16e50:	mov	r3, r0
   16e54:	ldr	r0, [sp, #28]
   16e58:	bl	11c9c <__fprintf_chk@plt>
   16e5c:	movw	r3, #23988	; 0x5db4
   16e60:	movt	r3, #2
   16e64:	b	16810 <__assert_fail@plt+0x4a48>
   16e68:	str	fp, [sp]
   16e6c:	movw	r2, #24140	; 0x5e4c
   16e70:	ldr	r1, [sp, #44]	; 0x2c
   16e74:	movt	r2, #2
   16e78:	ldr	r3, [sp, #40]	; 0x28
   16e7c:	mvn	ip, #0
   16e80:	str	ip, [sp, #24]
   16e84:	bl	12a20 <__assert_fail@plt+0xc58>
   16e88:	b	16660 <__assert_fail@plt+0x4898>
   16e8c:	ldr	ip, [sp, #28]
   16e90:	mov	r4, #1
   16e94:	str	ip, [sp, #36]	; 0x24
   16e98:	str	ip, [sp, #24]
   16e9c:	b	16464 <__assert_fail@plt+0x469c>
   16ea0:	mov	ip, #0
   16ea4:	mov	r4, #1
   16ea8:	str	ip, [sp, #36]	; 0x24
   16eac:	str	ip, [sp, #24]
   16eb0:	b	16464 <__assert_fail@plt+0x469c>
   16eb4:	mov	r0, r7
   16eb8:	movw	r1, #24292	; 0x5ee4
   16ebc:	movt	r1, #2
   16ec0:	bl	118dc <strcmp@plt>
   16ec4:	cmp	r0, #0
   16ec8:	ldreq	ip, [sp, #44]	; 0x2c
   16ecc:	moveq	r7, r0
   16ed0:	movne	r7, #0
   16ed4:	ldreq	r3, [ip, #4]
   16ed8:	biceq	r3, r3, #128	; 0x80
   16edc:	streq	r3, [ip, #4]
   16ee0:	b	16a10 <__assert_fail@plt+0x4c48>
   16ee4:	ldrb	r3, [ip, #1]
   16ee8:	cmp	r3, #0
   16eec:	bne	168f0 <__assert_fail@plt+0x4b28>
   16ef0:	b	169c0 <__assert_fail@plt+0x4bf8>
   16ef4:	bl	1193c <getuid@plt>
   16ef8:	bl	11900 <getpwuid@plt>
   16efc:	subs	r8, r0, #0
   16f00:	bne	16f1c <__assert_fail@plt+0x5154>
   16f04:	bl	11bf4 <__errno_location@plt>
   16f08:	movw	r2, #24368	; 0x5f30
   16f0c:	movt	r2, #2
   16f10:	ldr	r1, [r0]
   16f14:	mov	r0, #1
   16f18:	bl	12a20 <__assert_fail@plt+0xc58>
   16f1c:	ldr	r0, [r8]
   16f20:	bl	17134 <__assert_fail@plt+0x536c>
   16f24:	mov	r1, r0
   16f28:	str	r0, [r5, #20]
   16f2c:	b	16934 <__assert_fail@plt+0x4b6c>
   16f30:	mov	r1, r3
   16f34:	mov	r0, r3
   16f38:	str	r3, [sp, #12]
   16f3c:	bl	11d20 <getgroups@plt>
   16f40:	mov	r1, #4
   16f44:	mov	r8, r0
   16f48:	add	r0, r0, #1
   16f4c:	bl	17120 <__assert_fail@plt+0x5358>
   16f50:	str	r0, [sp, #20]
   16f54:	mov	r0, r8
   16f58:	ldr	r1, [sp, #20]
   16f5c:	bl	11d20 <getgroups@plt>
   16f60:	ldr	r3, [sp, #12]
   16f64:	subs	r8, r0, #0
   16f68:	blt	17060 <__assert_fail@plt+0x5298>
   16f6c:	add	r0, r8, #1
   16f70:	mov	r1, #4
   16f74:	str	r3, [sp, #12]
   16f78:	bl	17120 <__assert_fail@plt+0x5358>
   16f7c:	cmp	r8, #0
   16f80:	ldr	r3, [sp, #12]
   16f84:	str	r0, [r9, #28]
   16f88:	ble	17050 <__assert_fail@plt+0x5288>
   16f8c:	mov	r9, r6
   16f90:	str	r3, [sp, #24]
   16f94:	mov	r6, r4
   16f98:	mov	r4, r3
   16f9c:	b	16fd4 <__assert_fail@plt+0x520c>
   16fa0:	ldr	r2, [r5, #28]
   16fa4:	ldr	r0, [ip]
   16fa8:	ldr	ip, [sp, #24]
   16fac:	str	r2, [sp, #12]
   16fb0:	add	ip, ip, #1
   16fb4:	str	ip, [sp, #24]
   16fb8:	bl	17134 <__assert_fail@plt+0x536c>
   16fbc:	ldr	r3, [sp, #24]
   16fc0:	ldr	r2, [sp, #12]
   16fc4:	cmp	r3, r8
   16fc8:	str	r0, [r2, r4]
   16fcc:	add	r4, r4, #4
   16fd0:	beq	17048 <__assert_fail@plt+0x5280>
   16fd4:	ldr	r3, [sp, #20]
   16fd8:	ldr	r0, [r3, r4]
   16fdc:	bl	11db0 <getgrgid@plt>
   16fe0:	subs	ip, r0, #0
   16fe4:	bne	16fa0 <__assert_fail@plt+0x51d8>
   16fe8:	str	ip, [sp, #12]
   16fec:	bl	11bf4 <__errno_location@plt>
   16ff0:	movw	r2, #24476	; 0x5f9c
   16ff4:	movt	r2, #2
   16ff8:	ldr	r1, [r0]
   16ffc:	mov	r0, #1
   17000:	bl	12a20 <__assert_fail@plt+0xc58>
   17004:	ldr	ip, [sp, #12]
   17008:	b	16fa0 <__assert_fail@plt+0x51d8>
   1700c:	bl	11c30 <getgid@plt>
   17010:	bl	11db0 <getgrgid@plt>
   17014:	subs	r8, r0, #0
   17018:	bne	17034 <__assert_fail@plt+0x526c>
   1701c:	bl	11bf4 <__errno_location@plt>
   17020:	movw	r2, #24404	; 0x5f54
   17024:	movt	r2, #2
   17028:	ldr	r1, [r0]
   1702c:	mov	r0, #1
   17030:	bl	12a20 <__assert_fail@plt+0xc58>
   17034:	ldr	r0, [r8]
   17038:	bl	17134 <__assert_fail@plt+0x536c>
   1703c:	mov	r1, r0
   17040:	str	r0, [r5, #24]
   17044:	b	1696c <__assert_fail@plt+0x4ba4>
   17048:	mov	r4, r6
   1704c:	mov	r6, r9
   17050:	ldr	r0, [sp, #20]
   17054:	bl	1716c <__assert_fail@plt+0x53a4>
   17058:	ldr	r3, [r5, #28]
   1705c:	b	16990 <__assert_fail@plt+0x4bc8>
   17060:	bl	11bf4 <__errno_location@plt>
   17064:	movw	r2, #24440	; 0x5f78
   17068:	movt	r2, #2
   1706c:	ldr	r1, [r0]
   17070:	mov	r0, #1
   17074:	bl	12a20 <__assert_fail@plt+0xc58>
   17078:	add	r0, r8, #1
   1707c:	mov	r1, #4
   17080:	bl	17120 <__assert_fail@plt+0x5358>
   17084:	str	r0, [r9, #28]
   17088:	b	17050 <__assert_fail@plt+0x5288>
   1708c:	movw	r0, #24516	; 0x5fc4
   17090:	movw	r1, #21836	; 0x554c
   17094:	movt	r0, #2
   17098:	movt	r1, #2
   1709c:	movw	r2, #3582	; 0xdfe
   170a0:	ldr	r3, [pc, #8]	; 170b0 <__assert_fail@plt+0x52e8>
   170a4:	bl	11dc8 <__assert_fail@plt>
   170a8:	bl	119d8 <__stack_chk_fail@plt>
   170ac:	strdeq	r5, [r2], -r0
   170b0:	andeq	r5, r2, r0, lsr r4
   170b4:	b	11aec <malloc@plt>
   170b8:	b	11aec <malloc@plt>
   170bc:	push	{r3, lr}
   170c0:	bl	11aec <malloc@plt>
   170c4:	cmp	r0, #0
   170c8:	popne	{r3, pc}
   170cc:	bl	11dd8 <__assert_fail@plt+0x10>
   170d0:	push	{r4, r5, r6, lr}
   170d4:	mov	r6, r0
   170d8:	bl	11bac <strlen@plt>
   170dc:	add	r4, r0, #1
   170e0:	mov	r0, r4
   170e4:	bl	11aec <malloc@plt>
   170e8:	subs	r5, r0, #0
   170ec:	beq	170fc <__assert_fail@plt+0x5334>
   170f0:	mov	r1, r6
   170f4:	mov	r2, r4
   170f8:	bl	11978 <memcpy@plt>
   170fc:	mov	r0, r5
   17100:	pop	{r4, r5, r6, pc}
   17104:	b	11a20 <realloc@plt>
   17108:	push	{r3, lr}
   1710c:	bl	11a20 <realloc@plt>
   17110:	cmp	r0, #0
   17114:	popne	{r3, pc}
   17118:	bl	11dd8 <__assert_fail@plt+0x10>
   1711c:	b	11888 <calloc@plt>
   17120:	push	{r3, lr}
   17124:	bl	11888 <calloc@plt>
   17128:	cmp	r0, #0
   1712c:	popne	{r3, pc}
   17130:	bl	11dd8 <__assert_fail@plt+0x10>
   17134:	push	{r4, r5, r6, lr}
   17138:	mov	r5, r0
   1713c:	bl	11bac <strlen@plt>
   17140:	add	r4, r0, #1
   17144:	mov	r0, r4
   17148:	bl	11aec <malloc@plt>
   1714c:	subs	r6, r0, #0
   17150:	beq	17168 <__assert_fail@plt+0x53a0>
   17154:	mov	r1, r5
   17158:	mov	r2, r4
   1715c:	bl	11978 <memcpy@plt>
   17160:	mov	r0, r6
   17164:	pop	{r4, r5, r6, pc}
   17168:	bl	11dd8 <__assert_fail@plt+0x10>
   1716c:	cmp	r0, #0
   17170:	bxeq	lr
   17174:	b	11948 <free@plt>
   17178:	push	{r0, r1, r2, r3}
   1717c:	mov	r0, #0
   17180:	add	sp, sp, #16
   17184:	bx	lr
   17188:	bx	lr
   1718c:	bx	lr
   17190:	bx	lr
   17194:	push	{r4, lr}
   17198:	movw	r4, #21576	; 0x5448
   1719c:	movt	r4, #2
   171a0:	movw	r1, #23988	; 0x5db4
   171a4:	mov	r0, #6
   171a8:	movt	r1, #2
   171ac:	bl	11cd8 <setlocale@plt>
   171b0:	mov	r0, r4
   171b4:	movw	r1, #21592	; 0x5458
   171b8:	movt	r1, #2
   171bc:	bl	11d44 <bindtextdomain@plt>
   171c0:	mov	r0, r4
   171c4:	pop	{r4, lr}
   171c8:	b	11a38 <textdomain@plt>
   171cc:	push	{r4, lr}
   171d0:	movw	r0, #21576	; 0x5448
   171d4:	mov	r1, #0
   171d8:	movt	r0, #2
   171dc:	bl	11abc <bind_textdomain_codeset@plt>
   171e0:	subs	r4, r0, #0
   171e4:	beq	17218 <__assert_fail@plt+0x5450>
   171e8:	mov	r0, r4
   171ec:	bl	17134 <__assert_fail@plt+0x536c>
   171f0:	movw	r1, #21584	; 0x5450
   171f4:	movt	r1, #2
   171f8:	mov	r4, r0
   171fc:	movw	r0, #21576	; 0x5448
   17200:	movt	r0, #2
   17204:	bl	11abc <bind_textdomain_codeset@plt>
   17208:	subs	r3, r0, #0
   1720c:	beq	1722c <__assert_fail@plt+0x5464>
   17210:	mov	r0, r4
   17214:	pop	{r4, pc}
   17218:	mov	r0, #14
   1721c:	bl	11d08 <nl_langinfo@plt>
   17220:	subs	r4, r0, #0
   17224:	beq	17210 <__assert_fail@plt+0x5448>
   17228:	b	171e8 <__assert_fail@plt+0x5420>
   1722c:	mov	r0, r4
   17230:	mov	r4, r3
   17234:	bl	1716c <__assert_fail@plt+0x53a4>
   17238:	b	17210 <__assert_fail@plt+0x5448>
   1723c:	push	{r4, lr}
   17240:	subs	r4, r0, #0
   17244:	popeq	{r4, pc}
   17248:	mov	r1, r4
   1724c:	movw	r0, #21576	; 0x5448
   17250:	movt	r0, #2
   17254:	bl	11abc <bind_textdomain_codeset@plt>
   17258:	mov	r0, r4
   1725c:	pop	{r4, lr}
   17260:	b	1716c <__assert_fail@plt+0x53a4>
   17264:	push	{r3, r4, r5, lr}
   17268:	mov	r5, r0
   1726c:	bl	171cc <__assert_fail@plt+0x5404>
   17270:	mov	r1, r5
   17274:	mov	r2, #5
   17278:	mov	r4, r0
   1727c:	mov	r0, #0
   17280:	bl	119cc <dcgettext@plt>
   17284:	mov	r5, r0
   17288:	mov	r0, r4
   1728c:	bl	1723c <__assert_fail@plt+0x5474>
   17290:	mov	r0, r5
   17294:	pop	{r3, r4, r5, pc}
   17298:	push	{r3, lr}
   1729c:	mov	r0, #0
   172a0:	bl	20ff0 <__assert_fail@plt+0xf228>
   172a4:	pop	{r3, lr}
   172a8:	b	1aeb8 <__assert_fail@plt+0x90f0>
   172ac:	bx	lr
   172b0:	push	{r4, r5, lr}
   172b4:	movw	r4, #44624	; 0xae50
   172b8:	movt	r4, #3
   172bc:	sub	sp, sp, #28
   172c0:	mov	r0, #4
   172c4:	ldr	r3, [r4]
   172c8:	mov	r1, sp
   172cc:	str	r3, [sp, #20]
   172d0:	bl	11a14 <getrlimit64@plt>
   172d4:	mov	r1, sp
   172d8:	cmp	r0, #0
   172dc:	mov	r0, #4
   172e0:	movne	r2, #0
   172e4:	movne	r3, #0
   172e8:	strdne	r2, [sp, #8]
   172ec:	mov	r2, #0
   172f0:	mov	r3, #0
   172f4:	strd	r2, [sp]
   172f8:	bl	1190c <setrlimit64@plt>
   172fc:	cmp	r0, #0
   17300:	beq	17320 <__assert_fail@plt+0x5558>
   17304:	bl	11bf4 <__errno_location@plt>
   17308:	ldr	r3, [r0]
   1730c:	mov	r5, r0
   17310:	cmp	r3, #38	; 0x26
   17314:	cmpne	r3, #22
   17318:	moveq	r0, #1
   1731c:	bne	1733c <__assert_fail@plt+0x5574>
   17320:	ldr	r2, [sp, #20]
   17324:	ldr	r3, [r4]
   17328:	cmp	r2, r3
   1732c:	bne	17338 <__assert_fail@plt+0x5570>
   17330:	add	sp, sp, #28
   17334:	pop	{r4, r5, pc}
   17338:	bl	119d8 <__stack_chk_fail@plt>
   1733c:	mov	r2, #5
   17340:	movw	r1, #29308	; 0x727c
   17344:	mov	r0, #0
   17348:	movt	r1, #2
   1734c:	bl	119cc <dcgettext@plt>
   17350:	mov	r4, r0
   17354:	ldr	r0, [r5]
   17358:	bl	11b10 <strerror@plt>
   1735c:	mov	r1, r0
   17360:	mov	r0, r4
   17364:	bl	23c0c <__assert_fail@plt+0x11e44>
   17368:	push	{r4, lr}
   1736c:	movw	r4, #44624	; 0xae50
   17370:	movt	r4, #3
   17374:	sub	sp, sp, #24
   17378:	mov	r0, #4
   1737c:	ldr	r3, [r4]
   17380:	mov	r1, sp
   17384:	str	r3, [sp, #20]
   17388:	bl	11a14 <getrlimit64@plt>
   1738c:	cmp	r0, #0
   17390:	bne	173a8 <__assert_fail@plt+0x55e0>
   17394:	ldrd	r2, [sp, #8]
   17398:	mov	r1, sp
   1739c:	mov	r0, #4
   173a0:	strd	r2, [sp]
   173a4:	bl	1190c <setrlimit64@plt>
   173a8:	ldr	r2, [sp, #20]
   173ac:	mov	r0, #1
   173b0:	ldr	r3, [r4]
   173b4:	cmp	r2, r3
   173b8:	bne	173c4 <__assert_fail@plt+0x55fc>
   173bc:	add	sp, sp, #24
   173c0:	pop	{r4, pc}
   173c4:	bl	119d8 <__stack_chk_fail@plt>
   173c8:	push	{r4, r5, r6, r7, lr}
   173cc:	movw	r4, #44684	; 0xae8c
   173d0:	movt	r4, #3
   173d4:	sub	sp, sp, #12
   173d8:	mov	r6, r0
   173dc:	ldr	r5, [r4]
   173e0:	cmp	r5, #0
   173e4:	bne	17414 <__assert_fail@plt+0x564c>
   173e8:	mov	r3, #1
   173ec:	str	r3, [r4]
   173f0:	bl	11b88 <getpid@plt>
   173f4:	ldr	r7, [sp]
   173f8:	eor	r7, r0, r7
   173fc:	mov	r0, r5
   17400:	bl	11990 <time@plt>
   17404:	ldr	r3, [sp, #4]
   17408:	str	r7, [r4, #4]
   1740c:	eor	r0, r0, r3
   17410:	str	r0, [r4, #8]
   17414:	mov	r3, #8
   17418:	ldr	r0, [pc, #8]	; 17428 <__assert_fail@plt+0x5660>
   1741c:	str	r3, [r6]
   17420:	add	sp, sp, #12
   17424:	pop	{r4, r5, r6, r7, pc}
   17428:	muleq	r3, r0, lr
   1742c:	b	119b4 <sleep@plt>
   17430:	bx	lr
   17434:	bx	lr
   17438:	b	11a44 <tmpfile64@plt>
   1743c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17440:	movw	r4, #44624	; 0xae50
   17444:	movt	r4, #3
   17448:	sub	sp, sp, #112	; 0x70
   1744c:	mov	r9, r0
   17450:	mov	r1, #0
   17454:	ldr	ip, [r4]
   17458:	mov	r0, #3
   1745c:	mov	r2, sp
   17460:	str	ip, [sp, #108]	; 0x6c
   17464:	bl	11a68 <__fxstat64@plt>
   17468:	cmn	r0, #1
   1746c:	beq	17588 <__assert_fail@plt+0x57c0>
   17470:	mov	r5, #0
   17474:	mov	sl, r5
   17478:	mov	r0, #3
   1747c:	mov	r1, #1
   17480:	mov	r2, sp
   17484:	bl	11a68 <__fxstat64@plt>
   17488:	cmn	r0, #1
   1748c:	beq	17554 <__assert_fail@plt+0x578c>
   17490:	mov	r8, #0
   17494:	mov	r2, sp
   17498:	mov	r0, #3
   1749c:	mov	r1, #2
   174a0:	bl	11a68 <__fxstat64@plt>
   174a4:	cmn	r0, #1
   174a8:	beq	175c0 <__assert_fail@plt+0x57f8>
   174ac:	movw	r2, #44632	; 0xae58
   174b0:	movt	r2, #3
   174b4:	mov	r6, #0
   174b8:	ldr	r7, [r2]
   174bc:	cmp	r7, #0
   174c0:	beq	1753c <__assert_fail@plt+0x5774>
   174c4:	cmp	sl, #1
   174c8:	beq	17620 <__assert_fail@plt+0x5858>
   174cc:	cmp	r8, #1
   174d0:	beq	17604 <__assert_fail@plt+0x583c>
   174d4:	cmp	r6, #1
   174d8:	beq	17504 <__assert_fail@plt+0x573c>
   174dc:	cmp	r5, #0
   174e0:	bne	17524 <__assert_fail@plt+0x575c>
   174e4:	cmp	r6, #2
   174e8:	beq	17524 <__assert_fail@plt+0x575c>
   174ec:	ldr	r2, [sp, #108]	; 0x6c
   174f0:	ldr	r3, [r4]
   174f4:	cmp	r2, r3
   174f8:	bne	1763c <__assert_fail@plt+0x5874>
   174fc:	add	sp, sp, #112	; 0x70
   17500:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17504:	movw	r2, #29432	; 0x72f8
   17508:	mov	r0, r7
   1750c:	movt	r2, #2
   17510:	mov	r1, r6
   17514:	mov	r3, r9
   17518:	bl	11c9c <__fprintf_chk@plt>
   1751c:	cmp	r5, #0
   17520:	beq	174ec <__assert_fail@plt+0x5724>
   17524:	movw	r2, #29472	; 0x7320
   17528:	mov	r0, r7
   1752c:	mov	r3, r9
   17530:	mov	r1, #1
   17534:	movt	r2, #2
   17538:	bl	11c9c <__fprintf_chk@plt>
   1753c:	cmp	r5, #0
   17540:	bne	1754c <__assert_fail@plt+0x5784>
   17544:	cmp	r6, #2
   17548:	bne	174ec <__assert_fail@plt+0x5724>
   1754c:	mov	r0, #3
   17550:	bl	11b94 <exit@plt>
   17554:	bl	11bf4 <__errno_location@plt>
   17558:	ldr	r3, [r0]
   1755c:	cmp	r3, #9
   17560:	bne	17490 <__assert_fail@plt+0x56c8>
   17564:	movw	r0, #29340	; 0x729c
   17568:	mov	r1, #1
   1756c:	movt	r0, #2
   17570:	bl	11ac8 <open64@plt>
   17574:	cmp	r0, #1
   17578:	movne	r5, #1
   1757c:	movne	r8, #2
   17580:	moveq	r8, #1
   17584:	b	17494 <__assert_fail@plt+0x56cc>
   17588:	bl	11bf4 <__errno_location@plt>
   1758c:	ldr	r3, [r0]
   17590:	cmp	r3, #9
   17594:	bne	17470 <__assert_fail@plt+0x56a8>
   17598:	movw	r0, #29340	; 0x729c
   1759c:	mov	r1, #0
   175a0:	movt	r0, #2
   175a4:	bl	11ac8 <open64@plt>
   175a8:	cmp	r0, #0
   175ac:	moveq	r5, #0
   175b0:	movne	r5, #1
   175b4:	movne	sl, #2
   175b8:	moveq	sl, #1
   175bc:	b	17478 <__assert_fail@plt+0x56b0>
   175c0:	bl	11bf4 <__errno_location@plt>
   175c4:	ldr	r3, [r0]
   175c8:	cmp	r3, #9
   175cc:	bne	174ac <__assert_fail@plt+0x56e4>
   175d0:	movw	r0, #29340	; 0x729c
   175d4:	mov	r1, #1
   175d8:	movt	r0, #2
   175dc:	bl	11ac8 <open64@plt>
   175e0:	cmp	r0, #2
   175e4:	moveq	r6, #1
   175e8:	movne	r6, #2
   175ec:	cmp	r8, #0
   175f0:	bne	1753c <__assert_fail@plt+0x5774>
   175f4:	movw	r3, #44644	; 0xae64
   175f8:	movt	r3, #3
   175fc:	ldr	r7, [r3]
   17600:	b	174bc <__assert_fail@plt+0x56f4>
   17604:	mov	r1, r8
   17608:	movw	r2, #29392	; 0x72d0
   1760c:	mov	r0, r7
   17610:	movt	r2, #2
   17614:	mov	r3, r9
   17618:	bl	11c9c <__fprintf_chk@plt>
   1761c:	b	174d4 <__assert_fail@plt+0x570c>
   17620:	mov	r1, sl
   17624:	movw	r2, #29352	; 0x72a8
   17628:	mov	r0, r7
   1762c:	movt	r2, #2
   17630:	mov	r3, r9
   17634:	bl	11c9c <__fprintf_chk@plt>
   17638:	b	174cc <__assert_fail@plt+0x5704>
   1763c:	bl	119d8 <__stack_chk_fail@plt>
   17640:	subs	r2, r0, #0
   17644:	bxne	lr
   17648:	movw	r0, #29536	; 0x7360
   1764c:	movw	r1, #29568	; 0x7380
   17650:	movt	r0, #2
   17654:	movt	r1, #2
   17658:	b	23b40 <__assert_fail@plt+0x11d78>
   1765c:	movw	r0, #29624	; 0x73b8
   17660:	movt	r0, #2
   17664:	bx	lr
   17668:	push	{r3, lr}
   1766c:	movw	r0, #29636	; 0x73c4
   17670:	movt	r0, #2
   17674:	bl	11ad4 <getenv@plt>
   17678:	cmp	r0, #0
   1767c:	beq	17698 <__assert_fail@plt+0x58d0>
   17680:	ldrb	r2, [r0]
   17684:	movw	r3, #29624	; 0x73b8
   17688:	movt	r3, #2
   1768c:	cmp	r2, #0
   17690:	moveq	r0, r3
   17694:	pop	{r3, pc}
   17698:	movw	r0, #29624	; 0x73b8
   1769c:	movt	r0, #2
   176a0:	pop	{r3, pc}
   176a4:	movw	r0, #29648	; 0x73d0
   176a8:	movt	r0, #2
   176ac:	bx	lr
   176b0:	movw	r0, #29660	; 0x73dc
   176b4:	movt	r0, #2
   176b8:	bx	lr
   176bc:	movw	r0, #29672	; 0x73e8
   176c0:	movt	r0, #2
   176c4:	bx	lr
   176c8:	movw	r0, #29688	; 0x73f8
   176cc:	movt	r0, #2
   176d0:	bx	lr
   176d4:	movw	r0, #29704	; 0x7408
   176d8:	movt	r0, #2
   176dc:	bx	lr
   176e0:	movw	r0, #21592	; 0x5458
   176e4:	movt	r0, #2
   176e8:	bx	lr
   176ec:	movw	r0, #29724	; 0x741c
   176f0:	movt	r0, #2
   176f4:	bx	lr
   176f8:	sub	r0, r0, #1
   176fc:	push	{r4, r5, r6, r7, r8, lr}
   17700:	cmp	r0, #9
   17704:	ldrls	pc, [pc, r0, lsl #2]
   17708:	b	17aa0 <__assert_fail@plt+0x5cd8>
   1770c:	andeq	r7, r1, r4, asr r7
   17710:			; <UNDEFINED> instruction: 0x000177bc
   17714:	andeq	r7, r1, ip, lsl r8
   17718:	andeq	r7, r1, r0, lsl #17
   1771c:	andeq	r7, r1, r0, ror #17
   17720:	andeq	r7, r1, r0, lsl #18
   17724:	andeq	r7, r1, r4, ror r9
   17728:	ldrdeq	r7, [r1], -r8
   1772c:	andeq	r7, r1, r0, lsr sl
   17730:	andeq	r7, r1, r4, lsr r7
   17734:	movw	r4, #44696	; 0xae98
   17738:	movt	r4, #3
   1773c:	ldr	r0, [r4, #36]	; 0x24
   17740:	cmp	r0, #0
   17744:	beq	17b10 <__assert_fail@plt+0x5d48>
   17748:	mov	r3, r0
   1774c:	mov	r0, r3
   17750:	pop	{r4, r5, r6, r7, r8, pc}
   17754:	movw	r4, #44696	; 0xae98
   17758:	movt	r4, #3
   1775c:	ldr	r0, [r4]
   17760:	cmp	r0, #0
   17764:	bne	17748 <__assert_fail@plt+0x5980>
   17768:	mov	r0, #19
   1776c:	bl	170bc <__assert_fail@plt+0x52f4>
   17770:	movw	r3, #29660	; 0x73dc
   17774:	movt	r3, #2
   17778:	movw	r2, #29748	; 0x7434
   1777c:	movt	r2, #2
   17780:	mov	ip, r0
   17784:	ldm	r3!, {r0, r1}
   17788:	str	ip, [r4]
   1778c:	add	r5, ip, #8
   17790:	mov	r3, ip
   17794:	str	r0, [ip]
   17798:	str	r1, [ip, #4]
   1779c:	ldm	r2!, {r0, r1}
   177a0:	ldrh	r4, [r2]
   177a4:	ldrb	r2, [r2, #2]
   177a8:	str	r0, [ip, #8]
   177ac:	str	r1, [ip, #12]
   177b0:	strh	r4, [ip, #16]
   177b4:	strb	r2, [ip, #18]
   177b8:	b	1774c <__assert_fail@plt+0x5984>
   177bc:	movw	r4, #44696	; 0xae98
   177c0:	movt	r4, #3
   177c4:	ldr	r0, [r4, #4]
   177c8:	cmp	r0, #0
   177cc:	bne	17748 <__assert_fail@plt+0x5980>
   177d0:	mov	r0, #18
   177d4:	bl	170bc <__assert_fail@plt+0x52f4>
   177d8:	movw	r3, #29660	; 0x73dc
   177dc:	movt	r3, #2
   177e0:	movw	r2, #29760	; 0x7440
   177e4:	movt	r2, #2
   177e8:	mov	ip, r0
   177ec:	ldm	r3!, {r0, r1}
   177f0:	add	r5, ip, #8
   177f4:	str	ip, [r4, #4]
   177f8:	mov	r3, ip
   177fc:	str	r0, [ip]
   17800:	str	r1, [ip, #4]
   17804:	ldm	r2!, {r0, r1}
   17808:	ldrh	r2, [r2]
   1780c:	str	r0, [ip, #8]
   17810:	str	r1, [ip, #12]
   17814:	strh	r2, [ip, #16]
   17818:	b	1774c <__assert_fail@plt+0x5984>
   1781c:	movw	r4, #44696	; 0xae98
   17820:	movt	r4, #3
   17824:	ldr	r0, [r4, #8]
   17828:	cmp	r0, #0
   1782c:	bne	17748 <__assert_fail@plt+0x5980>
   17830:	mov	r0, #22
   17834:	movw	r5, #29772	; 0x744c
   17838:	bl	170bc <__assert_fail@plt+0x52f4>
   1783c:	movw	r3, #29672	; 0x73e8
   17840:	movt	r3, #2
   17844:	movt	r5, #2
   17848:	mov	ip, r0
   1784c:	add	r6, ip, #12
   17850:	ldm	r3!, {r0, r1, r2}
   17854:	mov	r3, ip
   17858:	str	ip, [r4, #8]
   1785c:	str	r0, [ip]
   17860:	str	r1, [ip, #4]
   17864:	ldm	r5!, {r0, r1}
   17868:	str	r2, [ip, #8]
   1786c:	ldrh	r2, [r5]
   17870:	str	r0, [ip, #12]
   17874:	str	r1, [ip, #16]
   17878:	strh	r2, [ip, #20]
   1787c:	b	1774c <__assert_fail@plt+0x5984>
   17880:	movw	r4, #44696	; 0xae98
   17884:	movt	r4, #3
   17888:	ldr	r0, [r4, #12]
   1788c:	cmp	r0, #0
   17890:	bne	17748 <__assert_fail@plt+0x5980>
   17894:	mov	r0, #17
   17898:	bl	170bc <__assert_fail@plt+0x52f4>
   1789c:	movw	r3, #29660	; 0x73dc
   178a0:	movt	r3, #2
   178a4:	movw	r2, #29784	; 0x7458
   178a8:	movt	r2, #2
   178ac:	mov	ip, r0
   178b0:	ldm	r3!, {r0, r1}
   178b4:	add	r5, ip, #8
   178b8:	str	ip, [r4, #12]
   178bc:	str	r0, [ip]
   178c0:	mov	r3, ip
   178c4:	str	r1, [ip, #4]
   178c8:	ldm	r2!, {r0, r1}
   178cc:	ldrb	r2, [r2]
   178d0:	str	r0, [ip, #8]
   178d4:	str	r1, [ip, #12]
   178d8:	strb	r2, [ip, #16]
   178dc:	b	1774c <__assert_fail@plt+0x5984>
   178e0:	movw	r4, #44696	; 0xae98
   178e4:	movt	r4, #3
   178e8:	ldr	r0, [r4, #16]
   178ec:	cmp	r0, #0
   178f0:	beq	17ab8 <__assert_fail@plt+0x5cf0>
   178f4:	mov	ip, r0
   178f8:	mov	r0, ip
   178fc:	pop	{r4, r5, r6, r7, r8, pc}
   17900:	movw	r4, #44696	; 0xae98
   17904:	movt	r4, #3
   17908:	ldr	r0, [r4, #20]
   1790c:	cmp	r0, #0
   17910:	bne	178f4 <__assert_fail@plt+0x5b2c>
   17914:	mov	r0, #31
   17918:	movw	r5, #29816	; 0x7478
   1791c:	bl	170bc <__assert_fail@plt+0x52f4>
   17920:	movw	r3, #29672	; 0x73e8
   17924:	movt	r3, #2
   17928:	movt	r5, #2
   1792c:	mov	r6, r0
   17930:	str	r6, [r4, #20]
   17934:	ldm	r3!, {r0, r1, r2}
   17938:	add	r7, r6, #12
   1793c:	mov	ip, r6
   17940:	str	r0, [r6]
   17944:	str	r1, [r6, #4]
   17948:	str	r2, [r6, #8]
   1794c:	ldm	r5!, {r0, r1, r2, r3}
   17950:	ldrh	r8, [r5]
   17954:	ldrb	r4, [r5, #2]
   17958:	str	r0, [r6, #12]
   1795c:	str	r1, [r6, #16]
   17960:	str	r2, [r6, #20]
   17964:	str	r3, [r6, #24]
   17968:	strh	r8, [r6, #28]
   1796c:	strb	r4, [r6, #30]
   17970:	b	178f8 <__assert_fail@plt+0x5b30>
   17974:	movw	r4, #44696	; 0xae98
   17978:	movt	r4, #3
   1797c:	ldr	r0, [r4, #24]
   17980:	cmp	r0, #0
   17984:	bne	17748 <__assert_fail@plt+0x5980>
   17988:	mov	r0, #15
   1798c:	bl	170bc <__assert_fail@plt+0x52f4>
   17990:	movw	r3, #29660	; 0x73dc
   17994:	movt	r3, #2
   17998:	movw	ip, #29836	; 0x748c
   1799c:	movt	ip, #2
   179a0:	ldrh	r7, [ip, #4]
   179a4:	ldrb	r6, [ip, #6]
   179a8:	mov	r2, r0
   179ac:	ldm	r3!, {r0, r1}
   179b0:	add	r5, r2, #8
   179b4:	mov	r3, r2
   179b8:	str	r2, [r4, #24]
   179bc:	str	r0, [r2]
   179c0:	ldr	r0, [ip]
   179c4:	str	r1, [r2, #4]
   179c8:	strh	r7, [r2, #12]
   179cc:	str	r0, [r2, #8]
   179d0:	strb	r6, [r2, #14]
   179d4:	b	1774c <__assert_fail@plt+0x5984>
   179d8:	movw	r4, #44696	; 0xae98
   179dc:	movt	r4, #3
   179e0:	ldr	r0, [r4, #28]
   179e4:	cmp	r0, #0
   179e8:	bne	17748 <__assert_fail@plt+0x5980>
   179ec:	mov	r0, #14
   179f0:	bl	170bc <__assert_fail@plt+0x52f4>
   179f4:	movw	r3, #29660	; 0x73dc
   179f8:	movt	r3, #2
   179fc:	movw	ip, #29844	; 0x7494
   17a00:	movt	ip, #2
   17a04:	ldrh	r5, [ip, #4]
   17a08:	mov	r2, r0
   17a0c:	ldm	r3!, {r0, r1}
   17a10:	str	r2, [r4, #28]
   17a14:	mov	r3, r2
   17a18:	strh	r5, [r2, #12]
   17a1c:	str	r0, [r2]
   17a20:	ldr	r0, [ip]
   17a24:	str	r1, [r2, #4]
   17a28:	str	r0, [r2, #8]
   17a2c:	b	1774c <__assert_fail@plt+0x5984>
   17a30:	movw	r4, #44696	; 0xae98
   17a34:	movt	r4, #3
   17a38:	ldr	r0, [r4, #32]
   17a3c:	cmp	r0, #0
   17a40:	bne	178f4 <__assert_fail@plt+0x5b2c>
   17a44:	mov	r0, #27
   17a48:	movw	r5, #29852	; 0x749c
   17a4c:	bl	170bc <__assert_fail@plt+0x52f4>
   17a50:	movw	r3, #29660	; 0x73dc
   17a54:	movt	r3, #2
   17a58:	movt	r5, #2
   17a5c:	mov	r6, r0
   17a60:	ldm	r3!, {r0, r1}
   17a64:	str	r6, [r4, #32]
   17a68:	add	r7, r6, #8
   17a6c:	mov	ip, r6
   17a70:	str	r0, [r6]
   17a74:	str	r1, [r6, #4]
   17a78:	ldm	r5!, {r0, r1, r2, r3}
   17a7c:	ldrh	r8, [r5]
   17a80:	ldrb	r4, [r5, #2]
   17a84:	str	r0, [r6, #8]
   17a88:	str	r1, [r6, #12]
   17a8c:	str	r2, [r6, #16]
   17a90:	str	r3, [r6, #20]
   17a94:	strh	r8, [r6, #24]
   17a98:	strb	r4, [r6, #26]
   17a9c:	b	178f8 <__assert_fail@plt+0x5b30>
   17aa0:	movw	r0, #29884	; 0x74bc
   17aa4:	movw	r2, #29604	; 0x73a4
   17aa8:	movt	r0, #2
   17aac:	movt	r2, #2
   17ab0:	movw	r1, #553	; 0x229
   17ab4:	bl	23dc8 <__assert_fail@plt+0x12000>
   17ab8:	mov	r0, #30
   17abc:	movw	r5, #29796	; 0x7464
   17ac0:	bl	170bc <__assert_fail@plt+0x52f4>
   17ac4:	movw	r3, #29672	; 0x73e8
   17ac8:	movt	r3, #2
   17acc:	movt	r5, #2
   17ad0:	mov	r6, r0
   17ad4:	str	r6, [r4, #16]
   17ad8:	ldm	r3!, {r0, r1, r2}
   17adc:	add	r7, r6, #12
   17ae0:	mov	ip, r6
   17ae4:	str	r0, [r6]
   17ae8:	str	r1, [r6, #4]
   17aec:	str	r2, [r6, #8]
   17af0:	ldm	r5!, {r0, r1, r2, r3}
   17af4:	ldrh	r4, [r5]
   17af8:	str	r0, [r6, #12]
   17afc:	str	r1, [r6, #16]
   17b00:	strh	r4, [r6, #28]
   17b04:	str	r2, [r6, #20]
   17b08:	str	r3, [r6, #24]
   17b0c:	b	178f8 <__assert_fail@plt+0x5b30>
   17b10:	mov	r0, #17
   17b14:	bl	170bc <__assert_fail@plt+0x52f4>
   17b18:	movw	r3, #29660	; 0x73dc
   17b1c:	movt	r3, #2
   17b20:	movw	r2, #29872	; 0x74b0
   17b24:	movt	r2, #2
   17b28:	mov	ip, r0
   17b2c:	ldm	r3!, {r0, r1}
   17b30:	add	r5, ip, #8
   17b34:	str	ip, [r4, #36]	; 0x24
   17b38:	b	178bc <__assert_fail@plt+0x5af4>
   17b3c:	sub	r3, r1, #1
   17b40:	movw	ip, #365	; 0x16d
   17b44:	cmp	r1, #2
   17b48:	rsb	r3, r3, r3, lsl #5
   17b4c:	lslgt	r1, r1, #2
   17b50:	addgt	r1, r1, #23
   17b54:	mla	r3, ip, r0, r3
   17b58:	suble	r0, r0, #1
   17b5c:	push	{r4, r5}
   17b60:	asr	ip, r0, #31
   17b64:	add	r2, r3, r2
   17b68:	movwgt	r3, #26215	; 0x6667
   17b6c:	movtgt	r3, #26214	; 0x6666
   17b70:	add	r2, r2, #1720320	; 0x1a4000
   17b74:	add	r2, r2, #740	; 0x2e4
   17b78:	add	r4, r0, #3
   17b7c:	smullgt	r5, r3, r3, r1
   17b80:	asrgt	r1, r1, #31
   17b84:	subgt	r1, r1, r3, asr #2
   17b88:	addgt	r2, r2, r1
   17b8c:	movw	r1, #34079	; 0x851f
   17b90:	movt	r1, #20971	; 0x51eb
   17b94:	cmp	r0, #0
   17b98:	smull	r5, r3, r1, r0
   17b9c:	movlt	r0, r4
   17ba0:	pop	{r4, r5}
   17ba4:	rsb	r3, ip, r3, asr #5
   17ba8:	add	r3, r3, #1
   17bac:	add	r3, r3, r3, lsl #1
   17bb0:	add	r1, r3, #3
   17bb4:	cmp	r3, #0
   17bb8:	movlt	r3, r1
   17bbc:	asr	r3, r3, #2
   17bc0:	rsb	r0, r3, r0, asr #2
   17bc4:	add	r0, r0, r2
   17bc8:	bx	lr
   17bcc:	sub	r1, r1, #1
   17bd0:	cmp	r1, #11
   17bd4:	push	{r4, lr}
   17bd8:	bhi	17c70 <__assert_fail@plt+0x5ea8>
   17bdc:	mov	r2, #1
   17be0:	movw	r3, #2773	; 0xad5
   17be4:	lsl	r1, r2, r1
   17be8:	and	r3, r1, r3
   17bec:	cmp	r3, #0
   17bf0:	beq	17bfc <__assert_fail@plt+0x5e34>
   17bf4:	mov	r0, #31
   17bf8:	pop	{r4, pc}
   17bfc:	movw	r3, #1320	; 0x528
   17c00:	and	r3, r1, r3
   17c04:	cmp	r3, #0
   17c08:	beq	17c14 <__assert_fail@plt+0x5e4c>
   17c0c:	mov	r0, #30
   17c10:	pop	{r4, pc}
   17c14:	tst	r1, #2
   17c18:	beq	17c70 <__assert_fail@plt+0x5ea8>
   17c1c:	movw	r3, #34079	; 0x851f
   17c20:	movt	r3, #20971	; 0x51eb
   17c24:	asr	r2, r0, #31
   17c28:	mov	ip, #100	; 0x64
   17c2c:	smull	r1, r3, r3, r0
   17c30:	and	r4, r0, #3
   17c34:	rsb	r1, r2, r3, asr #5
   17c38:	mls	r1, ip, r1, r0
   17c3c:	cmp	r1, #0
   17c40:	bne	17c60 <__assert_fail@plt+0x5e98>
   17c44:	rsb	r3, r2, r3, asr #7
   17c48:	mov	r2, #400	; 0x190
   17c4c:	mls	r0, r2, r3, r0
   17c50:	cmp	r0, #0
   17c54:	beq	17c60 <__assert_fail@plt+0x5e98>
   17c58:	mov	r0, #28
   17c5c:	pop	{r4, pc}
   17c60:	cmp	r4, #0
   17c64:	moveq	r0, #29
   17c68:	movne	r0, #28
   17c6c:	pop	{r4, pc}
   17c70:	movw	r0, #29912	; 0x74d8
   17c74:	movw	r2, #29896	; 0x74c8
   17c78:	movt	r0, #2
   17c7c:	movt	r2, #2
   17c80:	movw	r1, #401	; 0x191
   17c84:	bl	23dc8 <__assert_fail@plt+0x12000>
   17c88:	movw	ip, #48047	; 0xbbaf
   17c8c:	movt	ip, #65509	; 0xffe5
   17c90:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17c94:	mov	r4, r0
   17c98:	movw	r0, #7548	; 0x1d7c
   17c9c:	add	ip, r4, ip
   17ca0:	movt	r0, #17
   17ca4:	sub	sp, sp, #12
   17ca8:	cmp	ip, r0
   17cac:	mov	fp, r1
   17cb0:	stm	sp, {r2, r3}
   17cb4:	movhi	r0, #0
   17cb8:	bhi	17e0c <__assert_fail@plt+0x6044>
   17cbc:	sub	r3, r4, #1720320	; 0x1a4000
   17cc0:	movw	r2, #25427	; 0x6353
   17cc4:	sub	r3, r3, #740	; 0x2e4
   17cc8:	movt	r2, #45839	; 0xb30f
   17ccc:	movw	r5, #34079	; 0x851f
   17cd0:	mov	r7, #100	; 0x64
   17cd4:	umull	r1, r3, r2, r3
   17cd8:	movt	r5, #20971	; 0x51eb
   17cdc:	movw	r9, #365	; 0x16d
   17ce0:	movw	r8, #366	; 0x16e
   17ce4:	mov	r6, #400	; 0x190
   17ce8:	lsr	sl, r3, #8
   17cec:	b	17cf4 <__assert_fail@plt+0x5f2c>
   17cf0:	add	sl, sl, #1
   17cf4:	mov	r1, #1
   17cf8:	mov	r0, sl
   17cfc:	mov	r2, r1
   17d00:	bl	17b3c <__assert_fail@plt+0x5d74>
   17d04:	smull	r3, r2, r5, sl
   17d08:	asr	r3, sl, #31
   17d0c:	and	ip, sl, #3
   17d10:	rsb	r1, r3, r2, asr #5
   17d14:	rsb	r3, r3, r2, asr #7
   17d18:	mls	r1, r7, r1, sl
   17d1c:	mls	r3, r6, r3, sl
   17d20:	cmp	r1, #0
   17d24:	rsb	r0, r0, r4
   17d28:	bne	17d38 <__assert_fail@plt+0x5f70>
   17d2c:	cmp	r3, #0
   17d30:	movw	r3, #365	; 0x16d
   17d34:	bne	17d44 <__assert_fail@plt+0x5f7c>
   17d38:	cmp	ip, #0
   17d3c:	movne	r3, r9
   17d40:	moveq	r3, r8
   17d44:	cmp	r0, r3
   17d48:	bgt	17cf0 <__assert_fail@plt+0x5f28>
   17d4c:	movw	r2, #2115	; 0x843
   17d50:	movt	r2, #33825	; 0x8421
   17d54:	asr	r1, r0, #31
   17d58:	smull	r3, r5, r2, r0
   17d5c:	add	r5, r5, r0
   17d60:	rsb	r5, r1, r5, asr #4
   17d64:	add	r5, r5, #1
   17d68:	b	17d7c <__assert_fail@plt+0x5fb4>
   17d6c:	add	r5, r5, #1
   17d70:	cmp	r5, #13
   17d74:	addeq	sl, sl, #1
   17d78:	moveq	r5, #1
   17d7c:	mov	r1, r5
   17d80:	mov	r2, #1
   17d84:	mov	r0, sl
   17d88:	bl	17b3c <__assert_fail@plt+0x5d74>
   17d8c:	mov	r1, r5
   17d90:	rsb	r6, r0, r4
   17d94:	mov	r0, sl
   17d98:	bl	17bcc <__assert_fail@plt+0x5e04>
   17d9c:	cmp	r6, r0
   17da0:	bgt	17d6c <__assert_fail@plt+0x5fa4>
   17da4:	mov	r0, sl
   17da8:	mov	r1, r5
   17dac:	bl	17bcc <__assert_fail@plt+0x5e04>
   17db0:	add	r6, r6, #1
   17db4:	cmp	r6, r0
   17db8:	ble	17dd4 <__assert_fail@plt+0x600c>
   17dbc:	add	r5, r5, #1
   17dc0:	cmp	r5, #13
   17dc4:	moveq	r5, #1
   17dc8:	addeq	sl, sl, r5
   17dcc:	moveq	r6, r5
   17dd0:	movne	r6, #1
   17dd4:	ldr	r1, [sp]
   17dd8:	cmp	fp, #0
   17ddc:	ldr	r3, [sp, #4]
   17de0:	mov	r0, sl
   17de4:	strne	sl, [fp]
   17de8:	cmp	r1, #0
   17dec:	strne	r5, [r1]
   17df0:	mov	r1, #1
   17df4:	cmp	r3, #0
   17df8:	mov	r2, r1
   17dfc:	strne	r6, [r3]
   17e00:	add	r4, r4, #1
   17e04:	bl	17b3c <__assert_fail@plt+0x5d74>
   17e08:	rsb	r0, r0, r4
   17e0c:	add	sp, sp, #12
   17e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e14:	add	r2, r0, #8
   17e18:	ldrb	r3, [r0], #1
   17e1c:	sub	r3, r3, #48	; 0x30
   17e20:	cmp	r3, #9
   17e24:	bhi	17e3c <__assert_fail@plt+0x6074>
   17e28:	cmp	r0, r2
   17e2c:	bne	17e18 <__assert_fail@plt+0x6050>
   17e30:	ldrb	r3, [r0]
   17e34:	cmp	r3, #84	; 0x54
   17e38:	beq	17e44 <__assert_fail@plt+0x607c>
   17e3c:	mov	r0, #161	; 0xa1
   17e40:	bx	lr
   17e44:	add	r2, r0, #6
   17e48:	ldrb	r3, [r0, #1]!
   17e4c:	sub	r3, r3, #48	; 0x30
   17e50:	cmp	r3, #9
   17e54:	bhi	17e3c <__assert_fail@plt+0x6074>
   17e58:	cmp	r0, r2
   17e5c:	bne	17e48 <__assert_fail@plt+0x6080>
   17e60:	mov	r0, #0
   17e64:	bx	lr
   17e68:	push	{r3, lr}
   17e6c:	mov	r0, #0
   17e70:	bl	11990 <time@plt>
   17e74:	movw	r3, #44736	; 0xaec0
   17e78:	movt	r3, #3
   17e7c:	ldr	r2, [r3]
   17e80:	cmp	r2, #0
   17e84:	popeq	{r3, pc}
   17e88:	cmp	r2, #1
   17e8c:	beq	17ea4 <__assert_fail@plt+0x60dc>
   17e90:	ldr	r3, [r3, #4]
   17e94:	cmp	r2, #2
   17e98:	addeq	r0, r0, r3
   17e9c:	rsbne	r0, r3, r0
   17ea0:	pop	{r3, pc}
   17ea4:	ldr	r0, [r3, #4]
   17ea8:	pop	{r3, pc}
   17eac:	push	{r4, r5, lr}
   17eb0:	movw	r4, #44624	; 0xae50
   17eb4:	movt	r4, #3
   17eb8:	sub	sp, sp, #92	; 0x5c
   17ebc:	mov	r5, r0
   17ec0:	ldr	r3, [r4]
   17ec4:	str	r3, [sp, #84]	; 0x54
   17ec8:	bl	17e68 <__assert_fail@plt+0x60a0>
   17ecc:	cmp	r0, #0
   17ed0:	str	r0, [sp, #36]	; 0x24
   17ed4:	movlt	r3, #0
   17ed8:	strblt	r3, [r5]
   17edc:	blt	17f4c <__assert_fail@plt+0x6184>
   17ee0:	add	r1, sp, #40	; 0x28
   17ee4:	add	r0, sp, #36	; 0x24
   17ee8:	bl	118ac <gmtime_r@plt>
   17eec:	movw	r3, #29924	; 0x74e4
   17ef0:	movt	r3, #2
   17ef4:	str	r3, [sp]
   17ef8:	mov	r2, #1
   17efc:	mov	r1, #16
   17f00:	mvn	r3, #0
   17f04:	mov	ip, r0
   17f08:	mov	r0, r5
   17f0c:	ldr	lr, [ip, #20]
   17f10:	add	lr, lr, #1888	; 0x760
   17f14:	add	lr, lr, #12
   17f18:	str	lr, [sp, #4]
   17f1c:	ldr	lr, [ip, #16]
   17f20:	add	lr, lr, r2
   17f24:	str	lr, [sp, #8]
   17f28:	ldr	lr, [ip, #12]
   17f2c:	str	lr, [sp, #12]
   17f30:	ldr	lr, [ip, #8]
   17f34:	str	lr, [sp, #16]
   17f38:	ldr	lr, [ip, #4]
   17f3c:	str	lr, [sp, #20]
   17f40:	ldr	ip, [ip]
   17f44:	str	ip, [sp, #24]
   17f48:	bl	11dbc <__snprintf_chk@plt>
   17f4c:	ldr	r2, [sp, #84]	; 0x54
   17f50:	ldr	r3, [r4]
   17f54:	cmp	r2, r3
   17f58:	bne	17f64 <__assert_fail@plt+0x619c>
   17f5c:	add	sp, sp, #92	; 0x5c
   17f60:	pop	{r4, r5, pc}
   17f64:	bl	119d8 <__stack_chk_fail@plt>
   17f68:	push	{r3, r4, r5, lr}
   17f6c:	mov	r4, r0
   17f70:	mov	r0, #0
   17f74:	mov	r5, r1
   17f78:	bl	11990 <time@plt>
   17f7c:	movw	r3, #44736	; 0xaec0
   17f80:	movt	r3, #3
   17f84:	cmn	r4, #1
   17f88:	cmpne	r0, r4
   17f8c:	beq	17fc4 <__assert_fail@plt+0x61fc>
   17f90:	cmp	r5, #0
   17f94:	bne	17fb4 <__assert_fail@plt+0x61ec>
   17f98:	cmp	r0, r4
   17f9c:	rsblt	r4, r0, r4
   17fa0:	rsbge	r4, r4, r0
   17fa4:	movlt	r2, #2
   17fa8:	movge	r2, #3
   17fac:	stm	r3, {r2, r4}
   17fb0:	pop	{r3, r4, r5, pc}
   17fb4:	mov	r2, #1
   17fb8:	str	r0, [r3, #4]
   17fbc:	str	r2, [r3]
   17fc0:	pop	{r3, r4, r5, pc}
   17fc4:	mov	r2, #0
   17fc8:	str	r2, [r3]
   17fcc:	str	r2, [r3, #4]
   17fd0:	pop	{r3, r4, r5, pc}
   17fd4:	movw	r3, #44736	; 0xaec0
   17fd8:	movt	r3, #3
   17fdc:	ldr	r0, [r3]
   17fe0:	bx	lr
   17fe4:	push	{r3, lr}
   17fe8:	bl	17e68 <__assert_fail@plt+0x60a0>
   17fec:	cmn	r0, #1
   17ff0:	popne	{r3, pc}
   17ff4:	movw	r0, #29952	; 0x7500
   17ff8:	movt	r0, #2
   17ffc:	bl	23c0c <__assert_fail@plt+0x11e44>
   18000:	push	{r4, r5, r6, r7, lr}
   18004:	movw	r4, #44624	; 0xae50
   18008:	movt	r4, #3
   1800c:	sub	sp, sp, #52	; 0x34
   18010:	mov	r5, r0
   18014:	ldr	r3, [r4]
   18018:	str	r3, [sp, #44]	; 0x2c
   1801c:	bl	11bac <strlen@plt>
   18020:	cmp	r0, #10
   18024:	beq	18044 <__assert_fail@plt+0x627c>
   18028:	mov	r0, #0
   1802c:	ldr	r2, [sp, #44]	; 0x2c
   18030:	ldr	r3, [r4]
   18034:	cmp	r2, r3
   18038:	bne	18164 <__assert_fail@plt+0x639c>
   1803c:	add	sp, sp, #52	; 0x34
   18040:	pop	{r4, r5, r6, r7, pc}
   18044:	ldrb	r3, [r5, #4]
   18048:	cmp	r3, #45	; 0x2d
   1804c:	bne	18028 <__assert_fail@plt+0x6260>
   18050:	ldrb	r3, [r5, #7]
   18054:	cmp	r3, #45	; 0x2d
   18058:	bne	18028 <__assert_fail@plt+0x6260>
   1805c:	mov	r3, #0
   18060:	ldrb	r2, [r5, r3]
   18064:	sub	r2, r2, #48	; 0x30
   18068:	cmp	r2, #9
   1806c:	bhi	18028 <__assert_fail@plt+0x6260>
   18070:	add	r3, r3, #1
   18074:	cmp	r3, #4
   18078:	bne	18060 <__assert_fail@plt+0x6298>
   1807c:	ldrb	r3, [r5, #5]
   18080:	sub	r3, r3, #48	; 0x30
   18084:	cmp	r3, #9
   18088:	bhi	18028 <__assert_fail@plt+0x6260>
   1808c:	ldrb	r3, [r5, #6]
   18090:	sub	r3, r3, #48	; 0x30
   18094:	cmp	r3, #9
   18098:	bhi	18028 <__assert_fail@plt+0x6260>
   1809c:	ldrb	r3, [r5, #8]
   180a0:	sub	r3, r3, #48	; 0x30
   180a4:	cmp	r3, #9
   180a8:	bhi	18028 <__assert_fail@plt+0x6260>
   180ac:	ldrb	r3, [r5, #9]
   180b0:	sub	r3, r3, #48	; 0x30
   180b4:	cmp	r3, #9
   180b8:	bhi	18028 <__assert_fail@plt+0x6260>
   180bc:	mov	r0, r5
   180c0:	mov	r1, #0
   180c4:	mov	r2, #10
   180c8:	bl	118e8 <strtol@plt>
   180cc:	mov	r1, #0
   180d0:	mov	r2, #10
   180d4:	mov	r7, r0
   180d8:	add	r0, r5, #5
   180dc:	bl	118e8 <strtol@plt>
   180e0:	mov	r1, #0
   180e4:	mov	r2, #10
   180e8:	sub	r6, r0, #1
   180ec:	add	r0, r5, #8
   180f0:	bl	118e8 <strtol@plt>
   180f4:	cmp	r6, #11
   180f8:	movw	r1, #1969	; 0x7b1
   180fc:	movls	r3, #0
   18100:	movhi	r3, #1
   18104:	cmp	r7, r1
   18108:	movgt	r1, r3
   1810c:	orrle	r1, r3, #1
   18110:	mov	r5, r0
   18114:	cmp	r1, #0
   18118:	bne	18028 <__assert_fail@plt+0x6260>
   1811c:	sub	r3, r0, #1
   18120:	cmp	r3, #30
   18124:	bhi	18028 <__assert_fail@plt+0x6260>
   18128:	mov	r2, #44	; 0x2c
   1812c:	mov	r0, sp
   18130:	bl	11c3c <memset@plt>
   18134:	sub	r7, r7, #1888	; 0x760
   18138:	mov	r0, sp
   1813c:	mvn	r3, #0
   18140:	sub	r7, r7, #12
   18144:	str	r5, [sp, #12]
   18148:	str	r7, [sp, #20]
   1814c:	str	r6, [sp, #16]
   18150:	str	r3, [sp, #32]
   18154:	bl	11924 <mktime@plt>
   18158:	cmn	r0, #1
   1815c:	bne	1802c <__assert_fail@plt+0x6264>
   18160:	b	18028 <__assert_fail@plt+0x6260>
   18164:	bl	119d8 <__stack_chk_fail@plt>
   18168:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1816c:	movw	r5, #44624	; 0xae50
   18170:	movt	r5, #3
   18174:	ldrb	r6, [r0]
   18178:	sub	sp, sp, #48	; 0x30
   1817c:	mov	r4, r0
   18180:	ldr	r3, [r5]
   18184:	cmp	r6, #0
   18188:	str	r3, [sp, #44]	; 0x2c
   1818c:	beq	18358 <__assert_fail@plt+0x6590>
   18190:	add	r0, r0, #7
   18194:	mov	r3, r4
   18198:	mov	r1, r6
   1819c:	b	181a8 <__assert_fail@plt+0x63e0>
   181a0:	ldrb	r1, [r3, #1]
   181a4:	mov	r3, r2
   181a8:	sub	r1, r1, #48	; 0x30
   181ac:	cmp	r1, #9
   181b0:	bhi	18358 <__assert_fail@plt+0x6590>
   181b4:	cmp	r3, r0
   181b8:	add	r2, r3, #1
   181bc:	bne	181a0 <__assert_fail@plt+0x63d8>
   181c0:	ldrb	r1, [r2]
   181c4:	cmp	r1, #84	; 0x54
   181c8:	bne	18358 <__assert_fail@plt+0x6590>
   181cc:	add	r2, r2, #1
   181d0:	add	r3, r3, #8
   181d4:	ldrb	r1, [r2], #1
   181d8:	sub	r1, r1, #48	; 0x30
   181dc:	cmp	r1, #9
   181e0:	bhi	18358 <__assert_fail@plt+0x6590>
   181e4:	cmp	r2, r3
   181e8:	bne	181d4 <__assert_fail@plt+0x640c>
   181ec:	ldrb	r7, [r2]
   181f0:	cmp	r7, #0
   181f4:	bne	18328 <__assert_fail@plt+0x6560>
   181f8:	ldrb	r2, [r4, #2]
   181fc:	sub	r6, r6, #48	; 0x30
   18200:	ldrb	r3, [r4, #4]
   18204:	mov	ip, #100	; 0x64
   18208:	sub	r2, r2, #48	; 0x30
   1820c:	ldrb	r0, [r4, #1]
   18210:	ldrb	r1, [r4, #3]
   18214:	add	r6, r6, r6, lsl #2
   18218:	add	r2, r2, r2, lsl #2
   1821c:	sub	r3, r3, #48	; 0x30
   18220:	sub	r1, r1, #48	; 0x30
   18224:	sub	r0, r0, #48	; 0x30
   18228:	add	r2, r1, r2, lsl #1
   1822c:	add	r0, r0, r6, lsl #1
   18230:	ldrb	r1, [r4, #5]
   18234:	add	r3, r3, r3, lsl #2
   18238:	mla	r6, ip, r0, r2
   1823c:	add	ip, r1, r3, lsl #1
   18240:	sub	ip, ip, #49	; 0x31
   18244:	ldrb	r0, [r4, #6]
   18248:	cmp	ip, #11
   1824c:	ldrb	r3, [r4, #9]
   18250:	ldrb	r2, [r4, #11]
   18254:	movw	r8, #1969	; 0x7b1
   18258:	ldrb	r1, [r4, #13]
   1825c:	movls	r7, #0
   18260:	movhi	r7, #1
   18264:	sub	r0, r0, #48	; 0x30
   18268:	cmp	r6, r8
   1826c:	orrle	r7, r7, #1
   18270:	sub	r3, r3, #48	; 0x30
   18274:	sub	r2, r2, #48	; 0x30
   18278:	sub	r1, r1, #48	; 0x30
   1827c:	ldrb	r8, [r4, #10]
   18280:	cmp	r7, #0
   18284:	ldrb	sl, [r4, #12]
   18288:	add	r0, r0, r0, lsl #2
   1828c:	ldrb	r7, [r4, #14]
   18290:	add	r3, r3, r3, lsl #2
   18294:	ldrb	r9, [r4, #7]
   18298:	add	r2, r2, r2, lsl #2
   1829c:	add	r1, r1, r1, lsl #2
   182a0:	sub	r8, r8, #48	; 0x30
   182a4:	sub	r4, r9, #48	; 0x30
   182a8:	sub	sl, sl, #48	; 0x30
   182ac:	sub	r7, r7, #48	; 0x30
   182b0:	add	r4, r4, r0, lsl #1
   182b4:	add	r8, r8, r3, lsl #1
   182b8:	add	r2, sl, r2, lsl #1
   182bc:	add	r1, r7, r1, lsl #1
   182c0:	bne	18358 <__assert_fail@plt+0x6590>
   182c4:	sub	r3, r4, #1
   182c8:	cmp	r3, #30
   182cc:	bhi	18358 <__assert_fail@plt+0x6590>
   182d0:	cmp	r8, #23
   182d4:	bgt	18358 <__assert_fail@plt+0x6590>
   182d8:	cmp	r1, #61	; 0x3d
   182dc:	cmple	r2, #59	; 0x3b
   182e0:	movle	r3, #0
   182e4:	movgt	r3, #1
   182e8:	bgt	18358 <__assert_fail@plt+0x6590>
   182ec:	sub	r6, r6, #1888	; 0x760
   182f0:	mov	r0, sp
   182f4:	sub	r6, r6, #12
   182f8:	mvn	lr, #0
   182fc:	str	r3, [sp, #24]
   18300:	str	r6, [sp, #20]
   18304:	str	r3, [sp, #28]
   18308:	str	r3, [sp, #36]	; 0x24
   1830c:	str	r3, [sp, #40]	; 0x28
   18310:	stm	sp, {r1, r2, r8}
   18314:	str	r4, [sp, #12]
   18318:	str	ip, [sp, #16]
   1831c:	str	lr, [sp, #32]
   18320:	bl	11d14 <timegm@plt>
   18324:	b	1835c <__assert_fail@plt+0x6594>
   18328:	tst	r7, #128	; 0x80
   1832c:	bne	18348 <__assert_fail@plt+0x6580>
   18330:	bl	11b7c <__ctype_b_loc@plt>
   18334:	lsl	r3, r7, #1
   18338:	ldr	r2, [r0]
   1833c:	ldrh	r3, [r2, r3]
   18340:	tst	r3, #8192	; 0x2000
   18344:	bne	181f8 <__assert_fail@plt+0x6430>
   18348:	cmp	r7, #58	; 0x3a
   1834c:	beq	181f8 <__assert_fail@plt+0x6430>
   18350:	cmp	r7, #44	; 0x2c
   18354:	beq	181f8 <__assert_fail@plt+0x6430>
   18358:	mvn	r0, #0
   1835c:	ldr	r2, [sp, #44]	; 0x2c
   18360:	ldr	r3, [r5]
   18364:	cmp	r2, r3
   18368:	bne	18374 <__assert_fail@plt+0x65ac>
   1836c:	add	sp, sp, #48	; 0x30
   18370:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18374:	bl	119d8 <__stack_chk_fail@plt>
   18378:	push	{r4, r5, lr}
   1837c:	movw	r4, #44624	; 0xae50
   18380:	movt	r4, #3
   18384:	sub	sp, sp, #92	; 0x5c
   18388:	cmp	r1, #0
   1838c:	mov	r5, r0
   18390:	ldr	r3, [r4]
   18394:	str	r1, [sp, #36]	; 0x24
   18398:	str	r3, [sp, #84]	; 0x54
   1839c:	movlt	r3, #0
   183a0:	strblt	r3, [r0]
   183a4:	blt	18414 <__assert_fail@plt+0x664c>
   183a8:	add	r1, sp, #40	; 0x28
   183ac:	add	r0, sp, #36	; 0x24
   183b0:	bl	118ac <gmtime_r@plt>
   183b4:	movw	r3, #29924	; 0x74e4
   183b8:	movt	r3, #2
   183bc:	str	r3, [sp]
   183c0:	mov	r2, #1
   183c4:	mov	r1, #16
   183c8:	mvn	r3, #0
   183cc:	mov	ip, r0
   183d0:	mov	r0, r5
   183d4:	ldr	lr, [ip, #20]
   183d8:	add	lr, lr, #1888	; 0x760
   183dc:	add	lr, lr, #12
   183e0:	str	lr, [sp, #4]
   183e4:	ldr	lr, [ip, #16]
   183e8:	add	lr, lr, r2
   183ec:	str	lr, [sp, #8]
   183f0:	ldr	lr, [ip, #12]
   183f4:	str	lr, [sp, #12]
   183f8:	ldr	lr, [ip, #8]
   183fc:	str	lr, [sp, #16]
   18400:	ldr	lr, [ip, #4]
   18404:	str	lr, [sp, #20]
   18408:	ldr	ip, [ip]
   1840c:	str	ip, [sp, #24]
   18410:	bl	11dbc <__snprintf_chk@plt>
   18414:	ldr	r2, [sp, #84]	; 0x54
   18418:	ldr	r3, [r4]
   1841c:	cmp	r2, r3
   18420:	bne	1842c <__assert_fail@plt+0x6664>
   18424:	add	sp, sp, #92	; 0x5c
   18428:	pop	{r4, r5, pc}
   1842c:	bl	119d8 <__stack_chk_fail@plt>
   18430:	movw	r3, #20864	; 0x5180
   18434:	movt	r3, #1
   18438:	mla	r0, r3, r1, r0
   1843c:	bx	lr
   18440:	push	{r4, r5, r6, r7, lr}
   18444:	movw	lr, #34953	; 0x8889
   18448:	movt	lr, #34952	; 0x8888
   1844c:	movw	ip, #43691	; 0xaaab
   18450:	movt	ip, #43690	; 0xaaaa
   18454:	sub	sp, sp, #20
   18458:	umull	r3, r4, lr, r0
   1845c:	movw	r5, #62305	; 0xf361
   18460:	movt	r5, #26393	; 0x6719
   18464:	mov	r1, #1
   18468:	movw	r6, #365	; 0x16d
   1846c:	movw	r3, #29980	; 0x751c
   18470:	ldr	r0, [pc, #124]	; 184f4 <__assert_fail@plt+0x672c>
   18474:	movt	r3, #2
   18478:	mov	r2, #30
   1847c:	lsr	r4, r4, #5
   18480:	umull	r7, lr, lr, r4
   18484:	lsr	lr, lr, #5
   18488:	umull	r7, ip, ip, lr
   1848c:	rsb	r7, lr, lr, lsl #4
   18490:	sub	r4, r4, r7, lsl #2
   18494:	str	r4, [sp, #12]
   18498:	lsr	ip, ip, #4
   1849c:	umull	r4, r5, r5, ip
   184a0:	add	r7, ip, ip, lsl #1
   184a4:	rsb	r4, r5, ip
   184a8:	sub	lr, lr, r7, lsl #3
   184ac:	str	lr, [sp, #8]
   184b0:	add	r5, r5, r4, lsr r1
   184b4:	lsr	r4, r5, #8
   184b8:	str	r4, [sp]
   184bc:	mov	r5, r4
   184c0:	mls	r4, r6, r4, ip
   184c4:	str	r4, [sp, #4]
   184c8:	bl	11c0c <__sprintf_chk@plt>
   184cc:	cmp	r5, #0
   184d0:	ldr	r0, [pc, #28]	; 184f4 <__assert_fail@plt+0x672c>
   184d4:	bne	184ec <__assert_fail@plt+0x6724>
   184d8:	cmp	r4, #0
   184dc:	movne	r1, #121	; 0x79
   184e0:	moveq	r1, #100	; 0x64
   184e4:	bl	11bc4 <strchr@plt>
   184e8:	add	r0, r0, #1
   184ec:	add	sp, sp, #20
   184f0:	pop	{r4, r5, r6, r7, pc}
   184f4:	andeq	sl, r3, r8, asr #29
   184f8:	push	{r4, lr}
   184fc:	movw	r4, #44624	; 0xae50
   18500:	movt	r4, #3
   18504:	sub	sp, sp, #24
   18508:	cmp	r0, #0
   1850c:	ldr	r3, [r4]
   18510:	str	r0, [sp, #16]
   18514:	str	r3, [sp, #20]
   18518:	blt	18580 <__assert_fail@plt+0x67b8>
   1851c:	add	r0, sp, #16
   18520:	bl	11c54 <gmtime@plt>
   18524:	mov	r1, #1
   18528:	movw	r3, #30008	; 0x7538
   1852c:	movt	r3, #2
   18530:	ldr	r2, [r0, #20]
   18534:	mov	ip, r0
   18538:	ldr	r0, [pc, #104]	; 185a8 <__assert_fail@plt+0x67e0>
   1853c:	add	r2, r2, #1888	; 0x760
   18540:	add	r2, r2, #12
   18544:	str	r2, [sp]
   18548:	ldr	lr, [ip, #16]
   1854c:	mov	r2, #16
   18550:	add	lr, lr, r1
   18554:	str	lr, [sp, #4]
   18558:	ldr	ip, [ip, #12]
   1855c:	str	ip, [sp, #8]
   18560:	bl	11c0c <__sprintf_chk@plt>
   18564:	ldr	r2, [sp, #20]
   18568:	ldr	r3, [r4]
   1856c:	ldr	r0, [pc, #52]	; 185a8 <__assert_fail@plt+0x67e0>
   18570:	cmp	r2, r3
   18574:	bne	185a4 <__assert_fail@plt+0x67dc>
   18578:	add	sp, sp, #24
   1857c:	pop	{r4, pc}
   18580:	movw	r2, #29996	; 0x752c
   18584:	movt	r2, #2
   18588:	ldr	r3, [pc, #24]	; 185a8 <__assert_fail@plt+0x67e0>
   1858c:	ldm	r2, {r0, r1, r2}
   18590:	lsr	ip, r2, #16
   18594:	stmia	r3!, {r0, r1}
   18598:	strh	r2, [r3], #2
   1859c:	strb	ip, [r3]
   185a0:	b	18564 <__assert_fail@plt+0x679c>
   185a4:	bl	119d8 <__stack_chk_fail@plt>
   185a8:	andeq	sl, r3, r8, ror #29
   185ac:	push	{r4, r5, lr}
   185b0:	movw	r4, #44624	; 0xae50
   185b4:	movt	r4, #3
   185b8:	sub	sp, sp, #36	; 0x24
   185bc:	cmp	r0, #0
   185c0:	ldr	r3, [r4]
   185c4:	str	r0, [sp, #24]
   185c8:	str	r3, [sp, #28]
   185cc:	blt	1864c <__assert_fail@plt+0x6884>
   185d0:	add	r0, sp, #24
   185d4:	bl	11c54 <gmtime@plt>
   185d8:	mov	r1, #1
   185dc:	movw	r3, #30044	; 0x755c
   185e0:	movt	r3, #2
   185e4:	ldr	r2, [r0, #20]
   185e8:	mov	ip, r0
   185ec:	ldr	r0, [pc, #124]	; 18670 <__assert_fail@plt+0x68a8>
   185f0:	add	r2, r2, #1888	; 0x760
   185f4:	add	r2, r2, #12
   185f8:	str	r2, [sp]
   185fc:	ldr	lr, [ip, #16]
   18600:	mov	r2, #30
   18604:	add	lr, lr, r1
   18608:	str	lr, [sp, #4]
   1860c:	ldr	lr, [ip, #12]
   18610:	str	lr, [sp, #8]
   18614:	ldr	lr, [ip, #8]
   18618:	str	lr, [sp, #12]
   1861c:	ldr	lr, [ip, #4]
   18620:	str	lr, [sp, #16]
   18624:	ldr	ip, [ip]
   18628:	str	ip, [sp, #20]
   1862c:	bl	11c0c <__sprintf_chk@plt>
   18630:	ldr	r2, [sp, #28]
   18634:	ldr	r3, [r4]
   18638:	ldr	r0, [pc, #48]	; 18670 <__assert_fail@plt+0x68a8>
   1863c:	cmp	r2, r3
   18640:	bne	1866c <__assert_fail@plt+0x68a4>
   18644:	add	sp, sp, #36	; 0x24
   18648:	pop	{r4, r5, pc}
   1864c:	movw	ip, #30024	; 0x7548
   18650:	movt	ip, #2
   18654:	ldr	r5, [pc, #20]	; 18670 <__assert_fail@plt+0x68a8>
   18658:	ldm	ip!, {r0, r1, r2, r3}
   1865c:	ldr	ip, [ip]
   18660:	stmia	r5!, {r0, r1, r2, r3}
   18664:	str	ip, [r5]
   18668:	b	18630 <__assert_fail@plt+0x6868>
   1866c:	bl	119d8 <__stack_chk_fail@plt>
   18670:	strdeq	sl, [r3], -r8
   18674:	push	{r4, r5, r6, lr}
   18678:	movw	r4, #44624	; 0xae50
   1867c:	movt	r4, #3
   18680:	sub	sp, sp, #8
   18684:	cmp	r0, #0
   18688:	ldr	r3, [r4]
   1868c:	str	r0, [sp]
   18690:	str	r3, [sp, #4]
   18694:	blt	18718 <__assert_fail@plt+0x6950>
   18698:	mov	r0, sp
   1869c:	bl	11b34 <localtime@plt>
   186a0:	mov	r6, r0
   186a4:	mov	r0, #40	; 0x28
   186a8:	movt	r0, #2
   186ac:	bl	11d08 <nl_langinfo@plt>
   186b0:	mov	r2, #47	; 0x2f
   186b4:	mov	r1, r0
   186b8:	ldr	r0, [pc, #152]	; 18758 <__assert_fail@plt+0x6990>
   186bc:	bl	1f9a4 <__assert_fail@plt+0xdbdc>
   186c0:	movw	r1, #30076	; 0x757c
   186c4:	ldr	r0, [pc, #140]	; 18758 <__assert_fail@plt+0x6990>
   186c8:	movt	r1, #2
   186cc:	bl	11894 <strstr@plt>
   186d0:	cmp	r0, #0
   186d4:	beq	1873c <__assert_fail@plt+0x6974>
   186d8:	movw	r5, #44736	; 0xaec0
   186dc:	movt	r5, #3
   186e0:	mov	r3, r6
   186e4:	add	r0, r5, #88	; 0x58
   186e8:	add	r2, r5, #140	; 0x8c
   186ec:	mov	r1, #49	; 0x31
   186f0:	bl	11b1c <strftime@plt>
   186f4:	mov	r3, #0
   186f8:	strb	r3, [r5, #137]	; 0x89
   186fc:	ldr	r2, [sp, #4]
   18700:	ldr	r3, [r4]
   18704:	ldr	r0, [pc, #80]	; 1875c <__assert_fail@plt+0x6994>
   18708:	cmp	r2, r3
   1870c:	bne	18754 <__assert_fail@plt+0x698c>
   18710:	add	sp, sp, #8
   18714:	pop	{r4, r5, r6, pc}
   18718:	movw	r2, #29996	; 0x752c
   1871c:	movt	r2, #2
   18720:	ldr	r3, [pc, #52]	; 1875c <__assert_fail@plt+0x6994>
   18724:	ldm	r2, {r0, r1, r2}
   18728:	lsr	ip, r2, #16
   1872c:	stmia	r3!, {r0, r1}
   18730:	strh	r2, [r3], #2
   18734:	strb	ip, [r3]
   18738:	b	186fc <__assert_fail@plt+0x6934>
   1873c:	movw	r1, #30080	; 0x7580
   18740:	mov	r2, #50	; 0x32
   18744:	movt	r1, #2
   18748:	ldr	r0, [pc, #8]	; 18758 <__assert_fail@plt+0x6990>
   1874c:	bl	11c00 <__strcat_chk@plt>
   18750:	b	186d8 <__assert_fail@plt+0x6910>
   18754:	bl	119d8 <__stack_chk_fail@plt>
   18758:	andeq	sl, r3, ip, asr #30
   1875c:	andeq	sl, r3, r8, lsl pc
   18760:	ldrb	r3, [r0]
   18764:	cmp	r3, #0
   18768:	bne	18774 <__assert_fail@plt+0x69ac>
   1876c:	mov	r0, #26
   18770:	bx	lr
   18774:	b	17e14 <__assert_fail@plt+0x604c>
   18778:	subs	r1, r0, #0
   1877c:	push	{lr}		; (str lr, [sp, #-4]!)
   18780:	sub	sp, sp, #20
   18784:	beq	18794 <__assert_fail@plt+0x69cc>
   18788:	ldrb	r3, [r1]
   1878c:	cmp	r3, #0
   18790:	bne	187b4 <__assert_fail@plt+0x69ec>
   18794:	mov	r2, #5
   18798:	movw	r1, #30084	; 0x7584
   1879c:	mov	r0, #0
   187a0:	movt	r1, #2
   187a4:	bl	119cc <dcgettext@plt>
   187a8:	add	sp, sp, #20
   187ac:	pop	{lr}		; (ldr lr, [sp], #4)
   187b0:	b	23cd4 <__assert_fail@plt+0x11f0c>
   187b4:	add	r3, r1, #9
   187b8:	add	r2, r1, #11
   187bc:	str	r3, [sp]
   187c0:	movw	r0, #30092	; 0x758c
   187c4:	add	r3, r1, #13
   187c8:	movt	r0, #2
   187cc:	stmib	sp, {r2, r3}
   187d0:	add	r2, r1, #4
   187d4:	add	r3, r1, #6
   187d8:	bl	23cd4 <__assert_fail@plt+0x11f0c>
   187dc:	add	sp, sp, #20
   187e0:	pop	{pc}		; (ldr pc, [sp], #4)
   187e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187e8:	movw	r4, #44624	; 0xae50
   187ec:	movt	r4, #3
   187f0:	ldrb	r7, [r0]
   187f4:	sub	sp, sp, #52	; 0x34
   187f8:	mov	r5, r0
   187fc:	ldr	r3, [r4]
   18800:	cmp	r7, #0
   18804:	mov	r8, r1
   18808:	moveq	r6, #26
   1880c:	str	r3, [sp, #44]	; 0x2c
   18810:	beq	1882c <__assert_fail@plt+0x6a64>
   18814:	bl	17e14 <__assert_fail@plt+0x604c>
   18818:	subs	r6, r0, #0
   1881c:	bne	1882c <__assert_fail@plt+0x6a64>
   18820:	cmn	r8, #-2147483585	; 0x8000003f
   18824:	bls	18848 <__assert_fail@plt+0x6a80>
   18828:	mov	r6, #55	; 0x37
   1882c:	ldr	r2, [sp, #44]	; 0x2c
   18830:	mov	r0, r6
   18834:	ldr	r3, [r4]
   18838:	cmp	r2, r3
   1883c:	bne	18a08 <__assert_fail@plt+0x6c40>
   18840:	add	sp, sp, #52	; 0x34
   18844:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18848:	ldrb	r3, [r5, #2]
   1884c:	sub	r7, r7, #48	; 0x30
   18850:	ldrb	r2, [r5, #1]
   18854:	mov	r9, #100	; 0x64
   18858:	sub	r3, r3, #48	; 0x30
   1885c:	ldrb	ip, [r5, #3]
   18860:	add	r7, r7, r7, lsl #2
   18864:	sub	r2, r2, #48	; 0x30
   18868:	add	r3, r3, r3, lsl #2
   1886c:	sub	ip, ip, #48	; 0x30
   18870:	add	r7, r2, r7, lsl #1
   18874:	ldrb	r2, [r5, #4]
   18878:	add	ip, ip, r3, lsl #1
   1887c:	ldrb	r3, [r5, #6]
   18880:	sub	r2, r2, #48	; 0x30
   18884:	ldrb	r1, [r5, #5]
   18888:	mla	r0, r9, r7, ip
   1888c:	sub	r3, r3, #48	; 0x30
   18890:	ldrb	ip, [r5, #7]
   18894:	movw	r7, #1582	; 0x62e
   18898:	add	r2, r2, r2, lsl #2
   1889c:	add	r3, r3, r3, lsl #2
   188a0:	cmp	r0, r7
   188a4:	sub	ip, ip, #48	; 0x30
   188a8:	sub	r1, r1, #48	; 0x30
   188ac:	ldrb	r9, [r5, #11]
   188b0:	add	r1, r1, r2, lsl #1
   188b4:	str	r0, [sp, #32]
   188b8:	add	r2, ip, r3, lsl #1
   188bc:	str	r1, [sp, #36]	; 0x24
   188c0:	str	r2, [sp, #40]	; 0x28
   188c4:	ldrb	ip, [r5, #9]
   188c8:	ldrb	r3, [r5, #10]
   188cc:	ldrb	r7, [r5, #12]
   188d0:	ldrb	fp, [r5, #13]
   188d4:	ldrb	sl, [r5, #14]
   188d8:	ble	18828 <__assert_fail@plt+0x6a60>
   188dc:	sub	fp, fp, #48	; 0x30
   188e0:	sub	sl, sl, #48	; 0x30
   188e4:	sub	r9, r9, #48	; 0x30
   188e8:	movw	lr, #34953	; 0x8889
   188ec:	add	fp, fp, fp, lsl #2
   188f0:	movt	lr, #34952	; 0x8888
   188f4:	add	r9, r9, r9, lsl #2
   188f8:	sub	r7, r7, #48	; 0x30
   188fc:	add	sl, sl, fp, lsl #1
   18900:	sub	ip, ip, #48	; 0x30
   18904:	add	r8, sl, r8
   18908:	add	r7, r7, r9, lsl #1
   1890c:	add	ip, ip, ip, lsl #2
   18910:	sub	r3, r3, #48	; 0x30
   18914:	smull	r9, fp, lr, r8
   18918:	add	r3, r3, ip, lsl #1
   1891c:	asr	sl, r8, #31
   18920:	add	ip, fp, r8
   18924:	rsb	ip, sl, ip, asr #5
   18928:	add	r7, ip, r7
   1892c:	smull	ip, r9, lr, r7
   18930:	asr	ip, r7, #31
   18934:	add	r9, r9, r7
   18938:	rsb	r9, ip, r9, asr #5
   1893c:	add	r9, r9, r3
   18940:	bl	17b3c <__assert_fail@plt+0x5d74>
   18944:	movw	r3, #43691	; 0xaaab
   18948:	movt	r3, #10922	; 0x2aaa
   1894c:	asr	ip, r9, #31
   18950:	add	r1, sp, #32
   18954:	smull	r2, lr, r3, r9
   18958:	add	r2, sp, #36	; 0x24
   1895c:	add	r3, sp, #40	; 0x28
   18960:	rsb	ip, ip, lr, asr #2
   18964:	add	r0, r0, ip
   18968:	bl	17c88 <__assert_fail@plt+0x5ec0>
   1896c:	ldr	r3, [sp, #32]
   18970:	movw	r2, #9999	; 0x270f
   18974:	cmp	r3, r2
   18978:	bgt	18828 <__assert_fail@plt+0x6a60>
   1897c:	ldr	r2, [sp, #36]	; 0x24
   18980:	cmp	r2, #12
   18984:	bgt	18828 <__assert_fail@plt+0x6a60>
   18988:	cmp	r3, #0
   1898c:	ldr	ip, [sp, #40]	; 0x28
   18990:	blt	18828 <__assert_fail@plt+0x6a60>
   18994:	cmp	r2, #0
   18998:	ble	18828 <__assert_fail@plt+0x6a60>
   1899c:	sub	r1, ip, #1
   189a0:	cmp	r1, #30
   189a4:	bhi	18828 <__assert_fail@plt+0x6a60>
   189a8:	mov	r0, r9
   189ac:	mov	r1, #24
   189b0:	str	r2, [sp, #8]
   189b4:	str	ip, [sp, #12]
   189b8:	str	r3, [sp, #4]
   189bc:	movw	r3, #29924	; 0x74e4
   189c0:	movt	r3, #2
   189c4:	str	r3, [sp]
   189c8:	bl	2421c <__assert_fail@plt+0x12454>
   189cc:	mov	r0, r7
   189d0:	str	r1, [sp, #16]
   189d4:	mov	r1, #60	; 0x3c
   189d8:	bl	2421c <__assert_fail@plt+0x12454>
   189dc:	mov	r0, r8
   189e0:	str	r1, [sp, #20]
   189e4:	mov	r1, #60	; 0x3c
   189e8:	bl	2421c <__assert_fail@plt+0x12454>
   189ec:	mov	r0, r5
   189f0:	mov	r2, #1
   189f4:	mvn	r3, #0
   189f8:	str	r1, [sp, #24]
   189fc:	mov	r1, #16
   18a00:	bl	11dbc <__snprintf_chk@plt>
   18a04:	b	1882c <__assert_fail@plt+0x6a64>
   18a08:	bl	119d8 <__stack_chk_fail@plt>
   18a0c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18a10:	movw	r4, #44624	; 0xae50
   18a14:	movt	r4, #3
   18a18:	ldrb	r8, [r0]
   18a1c:	sub	sp, sp, #60	; 0x3c
   18a20:	mov	r5, r0
   18a24:	ldr	r3, [r4]
   18a28:	cmp	r8, #0
   18a2c:	mov	r7, r1
   18a30:	moveq	r6, #26
   18a34:	str	r3, [sp, #52]	; 0x34
   18a38:	beq	18a5c <__assert_fail@plt+0x6c94>
   18a3c:	bl	17e14 <__assert_fail@plt+0x604c>
   18a40:	subs	r6, r0, #0
   18a44:	bne	18a5c <__assert_fail@plt+0x6c94>
   18a48:	movw	r3, #55153	; 0xd771
   18a4c:	movt	r3, #55	; 0x37
   18a50:	cmp	r7, r3
   18a54:	bls	18a78 <__assert_fail@plt+0x6cb0>
   18a58:	mov	r6, #55	; 0x37
   18a5c:	ldr	r2, [sp, #52]	; 0x34
   18a60:	mov	r0, r6
   18a64:	ldr	r3, [r4]
   18a68:	cmp	r2, r3
   18a6c:	bne	18bd4 <__assert_fail@plt+0x6e0c>
   18a70:	add	sp, sp, #60	; 0x3c
   18a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18a78:	ldrb	r3, [r5, #2]
   18a7c:	sub	r8, r8, #48	; 0x30
   18a80:	ldrb	r2, [r5, #1]
   18a84:	mov	r9, #100	; 0x64
   18a88:	sub	r3, r3, #48	; 0x30
   18a8c:	ldrb	ip, [r5, #3]
   18a90:	add	r8, r8, r8, lsl #2
   18a94:	sub	r2, r2, #48	; 0x30
   18a98:	add	r3, r3, r3, lsl #2
   18a9c:	sub	ip, ip, #48	; 0x30
   18aa0:	add	r8, r2, r8, lsl #1
   18aa4:	ldrb	r2, [r5, #4]
   18aa8:	add	ip, ip, r3, lsl #1
   18aac:	ldrb	r3, [r5, #6]
   18ab0:	sub	r2, r2, #48	; 0x30
   18ab4:	ldrb	r1, [r5, #5]
   18ab8:	sub	r3, r3, #48	; 0x30
   18abc:	ldrb	fp, [r5, #10]
   18ac0:	mla	r0, r9, r8, ip
   18ac4:	ldrb	ip, [r5, #7]
   18ac8:	add	r2, r2, r2, lsl #2
   18acc:	add	r3, r3, r3, lsl #2
   18ad0:	sub	ip, ip, #48	; 0x30
   18ad4:	sub	r1, r1, #48	; 0x30
   18ad8:	add	r1, r1, r2, lsl #1
   18adc:	add	r2, ip, r3, lsl #1
   18ae0:	ldrb	r3, [r5, #14]
   18ae4:	movw	r8, #1582	; 0x62e
   18ae8:	cmp	r0, r8
   18aec:	str	r0, [sp, #40]	; 0x28
   18af0:	str	r1, [sp, #44]	; 0x2c
   18af4:	str	r2, [sp, #48]	; 0x30
   18af8:	ldrb	ip, [r5, #9]
   18afc:	ldrb	sl, [r5, #11]
   18b00:	ldrb	r9, [r5, #12]
   18b04:	ldrb	r8, [r5, #13]
   18b08:	str	r3, [sp, #36]	; 0x24
   18b0c:	ble	18a58 <__assert_fail@plt+0x6c90>
   18b10:	str	ip, [sp, #32]
   18b14:	bl	17b3c <__assert_fail@plt+0x5d74>
   18b18:	add	r2, sp, #44	; 0x2c
   18b1c:	add	r3, sp, #48	; 0x30
   18b20:	add	r1, sp, #40	; 0x28
   18b24:	add	r0, r0, r7
   18b28:	bl	17c88 <__assert_fail@plt+0x5ec0>
   18b2c:	ldr	r3, [sp, #40]	; 0x28
   18b30:	movw	r2, #9999	; 0x270f
   18b34:	ldr	ip, [sp, #32]
   18b38:	cmp	r3, r2
   18b3c:	bgt	18a58 <__assert_fail@plt+0x6c90>
   18b40:	ldr	r2, [sp, #44]	; 0x2c
   18b44:	cmp	r2, #12
   18b48:	bgt	18a58 <__assert_fail@plt+0x6c90>
   18b4c:	cmp	r3, #0
   18b50:	ldr	r1, [sp, #48]	; 0x30
   18b54:	blt	18a58 <__assert_fail@plt+0x6c90>
   18b58:	cmp	r2, #0
   18b5c:	ble	18a58 <__assert_fail@plt+0x6c90>
   18b60:	sub	r0, r1, #1
   18b64:	cmp	r0, #30
   18b68:	bhi	18a58 <__assert_fail@plt+0x6c90>
   18b6c:	ldr	r0, [sp, #36]	; 0x24
   18b70:	sub	ip, ip, #48	; 0x30
   18b74:	sub	sl, sl, #48	; 0x30
   18b78:	sub	r9, r9, #48	; 0x30
   18b7c:	sub	lr, r0, #48	; 0x30
   18b80:	sub	r8, r8, #48	; 0x30
   18b84:	sub	fp, fp, #48	; 0x30
   18b88:	mov	r0, #10
   18b8c:	str	r2, [sp, #8]
   18b90:	mla	fp, r0, ip, fp
   18b94:	str	r3, [sp, #4]
   18b98:	mla	r2, r0, sl, r9
   18b9c:	str	r1, [sp, #12]
   18ba0:	mla	ip, r0, r8, lr
   18ba4:	movw	r3, #29924	; 0x74e4
   18ba8:	mov	r0, r5
   18bac:	movt	r3, #2
   18bb0:	str	fp, [sp, #16]
   18bb4:	mov	r1, #16
   18bb8:	str	r2, [sp, #20]
   18bbc:	mov	r2, #1
   18bc0:	str	r3, [sp]
   18bc4:	mvn	r3, #0
   18bc8:	str	ip, [sp, #24]
   18bcc:	bl	11dbc <__snprintf_chk@plt>
   18bd0:	b	18a5c <__assert_fail@plt+0x6c94>
   18bd4:	bl	119d8 <__stack_chk_fail@plt>
   18bd8:	push	{r0, r1, r2, r3}
   18bdc:	push	{r4, lr}
   18be0:	movw	r4, #44624	; 0xae50
   18be4:	movt	r4, #3
   18be8:	sub	sp, sp, #16
   18bec:	add	r3, sp, #28
   18bf0:	add	r0, sp, #8
   18bf4:	ldr	ip, [r4]
   18bf8:	ldr	r1, [sp, #24]
   18bfc:	mov	r2, r3
   18c00:	str	r3, [sp, #4]
   18c04:	str	ip, [sp, #12]
   18c08:	bl	1f100 <__assert_fail@plt+0xd338>
   18c0c:	cmp	r0, #0
   18c10:	blt	18c3c <__assert_fail@plt+0x6e74>
   18c14:	ldr	r2, [sp, #12]
   18c18:	ldr	r3, [r4]
   18c1c:	ldr	r0, [sp, #8]
   18c20:	cmp	r2, r3
   18c24:	bne	18c38 <__assert_fail@plt+0x6e70>
   18c28:	add	sp, sp, #16
   18c2c:	pop	{r4, lr}
   18c30:	add	sp, sp, #16
   18c34:	bx	lr
   18c38:	bl	119d8 <__stack_chk_fail@plt>
   18c3c:	bl	11bf4 <__errno_location@plt>
   18c40:	ldr	r0, [r0]
   18c44:	bl	11b10 <strerror@plt>
   18c48:	mov	r1, r0
   18c4c:	movw	r0, #30120	; 0x75a8
   18c50:	movt	r0, #2
   18c54:	bl	23c0c <__assert_fail@plt+0x11e44>
   18c58:	push	{r0, r1, r2, r3}
   18c5c:	push	{r4, lr}
   18c60:	movw	r4, #44624	; 0xae50
   18c64:	movt	r4, #3
   18c68:	sub	sp, sp, #16
   18c6c:	add	r3, sp, #28
   18c70:	add	r0, sp, #8
   18c74:	ldr	ip, [r4]
   18c78:	mov	r2, r3
   18c7c:	ldr	r1, [sp, #24]
   18c80:	str	r3, [sp, #4]
   18c84:	str	ip, [sp, #12]
   18c88:	bl	1f100 <__assert_fail@plt+0xd338>
   18c8c:	ldr	r2, [sp, #12]
   18c90:	ldr	r3, [r4]
   18c94:	cmp	r0, #0
   18c98:	ldrge	r0, [sp, #8]
   18c9c:	movlt	r0, #0
   18ca0:	cmp	r2, r3
   18ca4:	bne	18cb8 <__assert_fail@plt+0x6ef0>
   18ca8:	add	sp, sp, #16
   18cac:	pop	{r4, lr}
   18cb0:	add	sp, sp, #16
   18cb4:	bx	lr
   18cb8:	bl	119d8 <__stack_chk_fail@plt>
   18cbc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18cc0:	cmp	r3, #0
   18cc4:	sub	sp, sp, #20
   18cc8:	ldr	r7, [r1]
   18ccc:	ldrne	r8, [r3]
   18cd0:	mov	r6, r0
   18cd4:	str	r3, [sp, #12]
   18cd8:	ldreq	r8, [sp, #12]
   18cdc:	cmp	r7, #0
   18ce0:	str	r1, [sp, #8]
   18ce4:	str	r2, [sp, #4]
   18ce8:	ldr	r5, [r2]
   18cec:	beq	18e24 <__assert_fail@plt+0x705c>
   18cf0:	sub	r5, r5, #3
   18cf4:	mov	fp, r7
   18cf8:	mov	sl, #0
   18cfc:	b	18d18 <__assert_fail@plt+0x6f50>
   18d00:	add	r2, fp, #1
   18d04:	cmp	r4, #10
   18d08:	strb	r4, [fp]
   18d0c:	add	sl, sl, #1
   18d10:	mov	fp, r2
   18d14:	beq	18dd4 <__assert_fail@plt+0x700c>
   18d18:	mov	r0, r6
   18d1c:	bl	1199c <_IO_getc@plt>
   18d20:	cmn	r0, #1
   18d24:	mov	r4, r0
   18d28:	beq	18dd4 <__assert_fail@plt+0x700c>
   18d2c:	cmp	sl, r5
   18d30:	bne	18d00 <__assert_fail@plt+0x6f38>
   18d34:	cmp	r8, #0
   18d38:	cmpne	sl, r8
   18d3c:	add	r1, sl, #3
   18d40:	mov	r0, r7
   18d44:	bhi	18d88 <__assert_fail@plt+0x6fc0>
   18d48:	cmp	r1, #1024	; 0x400
   18d4c:	movcs	ip, #1024	; 0x400
   18d50:	movcc	ip, #256	; 0x100
   18d54:	add	r9, r1, ip
   18d58:	sub	r5, r9, #3
   18d5c:	mov	r1, r9
   18d60:	bl	17104 <__assert_fail@plt+0x533c>
   18d64:	ldr	r3, [sp, #8]
   18d68:	cmp	r0, #0
   18d6c:	add	fp, r0, sl
   18d70:	str	r0, [r3]
   18d74:	beq	18de8 <__assert_fail@plt+0x7020>
   18d78:	ldr	r3, [sp, #4]
   18d7c:	mov	r7, r0
   18d80:	str	r9, [r3]
   18d84:	b	18d00 <__assert_fail@plt+0x6f38>
   18d88:	cmp	r4, #10
   18d8c:	mov	r4, fp
   18d90:	bne	18da0 <__assert_fail@plt+0x6fd8>
   18d94:	b	18db0 <__assert_fail@plt+0x6fe8>
   18d98:	cmp	r0, #10
   18d9c:	beq	18db0 <__assert_fail@plt+0x6fe8>
   18da0:	mov	r0, r6
   18da4:	bl	1199c <_IO_getc@plt>
   18da8:	cmn	r0, #1
   18dac:	bne	18d98 <__assert_fail@plt+0x6fd0>
   18db0:	ldr	r3, [sp, #12]
   18db4:	mov	r1, #10
   18db8:	add	fp, fp, #1
   18dbc:	add	sl, sl, #1
   18dc0:	cmp	r3, #0
   18dc4:	strb	r1, [r4]
   18dc8:	ldrne	r3, [sp, #12]
   18dcc:	movne	r1, #0
   18dd0:	strne	r1, [r3]
   18dd4:	mov	r0, sl
   18dd8:	mov	r3, #0
   18ddc:	strb	r3, [fp]
   18de0:	add	sp, sp, #20
   18de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18de8:	str	r0, [sp]
   18dec:	bl	11bf4 <__errno_location@plt>
   18df0:	mov	r4, r0
   18df4:	mov	r0, r7
   18df8:	ldr	r5, [r4]
   18dfc:	bl	1716c <__assert_fail@plt+0x53a4>
   18e00:	ldm	sp, {r1, r2}
   18e04:	mvn	r0, #0
   18e08:	ldr	r3, [sp, #12]
   18e0c:	str	r1, [r2]
   18e10:	cmp	r3, #0
   18e14:	strne	r1, [r3]
   18e18:	str	r5, [r4]
   18e1c:	add	sp, sp, #20
   18e20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18e24:	mov	r0, #256	; 0x100
   18e28:	bl	170b4 <__assert_fail@plt+0x52ec>
   18e2c:	ldr	r3, [sp, #8]
   18e30:	cmp	r0, #0
   18e34:	mov	r7, r0
   18e38:	str	r0, [r3]
   18e3c:	beq	18e54 <__assert_fail@plt+0x708c>
   18e40:	ldr	r2, [sp, #4]
   18e44:	mov	r3, #256	; 0x100
   18e48:	mov	r5, #253	; 0xfd
   18e4c:	str	r3, [r2]
   18e50:	b	18cf4 <__assert_fail@plt+0x6f2c>
   18e54:	ldr	r3, [sp, #12]
   18e58:	ldr	r2, [sp, #4]
   18e5c:	cmp	r3, #0
   18e60:	str	r0, [r2]
   18e64:	mvneq	r0, #0
   18e68:	strne	r7, [r3]
   18e6c:	mvnne	r0, #0
   18e70:	b	18de0 <__assert_fail@plt+0x7018>
   18e74:	push	{r4, lr}
   18e78:	movw	r4, #44624	; 0xae50
   18e7c:	movt	r4, #3
   18e80:	sub	sp, sp, #24
   18e84:	mov	r0, #7
   18e88:	ldr	r3, [r4]
   18e8c:	mov	r1, sp
   18e90:	str	r3, [sp, #20]
   18e94:	bl	11a14 <getrlimit64@plt>
   18e98:	cmp	r0, #0
   18e9c:	beq	18ed4 <__assert_fail@plt+0x710c>
   18ea0:	mov	r1, sp
   18ea4:	mov	r0, #7
   18ea8:	bl	11a14 <getrlimit64@plt>
   18eac:	cmp	r0, #0
   18eb0:	bne	18ec0 <__assert_fail@plt+0x70f8>
   18eb4:	ldr	r0, [sp, #8]
   18eb8:	cmn	r0, #1
   18ebc:	bne	18ee0 <__assert_fail@plt+0x7118>
   18ec0:	mov	r0, #4
   18ec4:	bl	119f0 <sysconf@plt>
   18ec8:	cmp	r0, #0
   18ecc:	movlt	r0, #256	; 0x100
   18ed0:	b	18ee0 <__assert_fail@plt+0x7118>
   18ed4:	ldr	r0, [sp, #8]
   18ed8:	cmn	r0, #1
   18edc:	beq	18ea0 <__assert_fail@plt+0x70d8>
   18ee0:	ldr	r2, [sp, #20]
   18ee4:	ldr	r3, [r4]
   18ee8:	cmp	r2, r3
   18eec:	bne	18ef8 <__assert_fail@plt+0x7130>
   18ef0:	add	sp, sp, #24
   18ef4:	pop	{r4, pc}
   18ef8:	bl	119d8 <__stack_chk_fail@plt>
   18efc:	push	{r3, r4, r5, r6, r7, lr}
   18f00:	mov	r6, r1
   18f04:	mov	r4, r0
   18f08:	bl	18e74 <__assert_fail@plt+0x70ac>
   18f0c:	cmp	r6, #0
   18f10:	mov	r7, r0
   18f14:	beq	18f88 <__assert_fail@plt+0x71c0>
   18f18:	cmp	r0, r4
   18f1c:	ble	18f70 <__assert_fail@plt+0x71a8>
   18f20:	mov	r5, #0
   18f24:	ldr	r3, [r6, r5, lsl #2]
   18f28:	add	ip, r6, r5, lsl #2
   18f2c:	cmn	r3, #1
   18f30:	beq	18f5c <__assert_fail@plt+0x7194>
   18f34:	cmp	r4, r3
   18f38:	mov	r2, r5
   18f3c:	bne	18f4c <__assert_fail@plt+0x7184>
   18f40:	b	18f80 <__assert_fail@plt+0x71b8>
   18f44:	cmp	r4, r3
   18f48:	beq	18f80 <__assert_fail@plt+0x71b8>
   18f4c:	ldr	r3, [ip, #4]!
   18f50:	add	r2, r2, #1
   18f54:	cmn	r3, #1
   18f58:	bne	18f44 <__assert_fail@plt+0x717c>
   18f5c:	mov	r0, r4
   18f60:	bl	11d98 <close@plt>
   18f64:	add	r4, r4, #1
   18f68:	cmp	r4, r7
   18f6c:	bne	18f24 <__assert_fail@plt+0x715c>
   18f70:	bl	11bf4 <__errno_location@plt>
   18f74:	mov	r3, #0
   18f78:	str	r3, [r0]
   18f7c:	pop	{r3, r4, r5, r6, r7, pc}
   18f80:	add	r5, r2, #1
   18f84:	b	18f64 <__assert_fail@plt+0x719c>
   18f88:	cmp	r0, r4
   18f8c:	ble	18f70 <__assert_fail@plt+0x71a8>
   18f90:	mov	r0, r4
   18f94:	add	r4, r4, #1
   18f98:	bl	11d98 <close@plt>
   18f9c:	cmp	r4, r7
   18fa0:	bne	18f90 <__assert_fail@plt+0x71c8>
   18fa4:	b	18f70 <__assert_fail@plt+0x71a8>
   18fa8:	push	{r4, r5, r6, r7, r8, r9, lr}
   18fac:	movw	ip, #44624	; 0xae50
   18fb0:	sub	sp, sp, #20
   18fb4:	movt	ip, #3
   18fb8:	subs	r9, r1, #0
   18fbc:	mov	r5, r0
   18fc0:	ldr	lr, [sp, #48]	; 0x30
   18fc4:	mov	r8, r2
   18fc8:	ldr	r1, [ip]
   18fcc:	moveq	r0, r9
   18fd0:	str	r2, [sp]
   18fd4:	str	r3, [sp, #4]
   18fd8:	str	r1, [sp, #12]
   18fdc:	str	lr, [sp, #8]
   18fe0:	ldr	r6, [sp, #52]	; 0x34
   18fe4:	beq	1900c <__assert_fail@plt+0x7244>
   18fe8:	ldr	r3, [r9]
   18fec:	cmp	r3, #0
   18ff0:	beq	19130 <__assert_fail@plt+0x7368>
   18ff4:	mov	ip, r9
   18ff8:	mov	r0, #0
   18ffc:	ldr	r4, [ip, #4]!
   19000:	add	r0, r0, #1
   19004:	cmp	r4, #0
   19008:	bne	18ffc <__assert_fail@plt+0x7234>
   1900c:	mov	r1, #4
   19010:	add	r0, r0, #2
   19014:	bl	17120 <__assert_fail@plt+0x5358>
   19018:	mov	r1, #47	; 0x2f
   1901c:	mov	r7, r0
   19020:	mov	r0, r5
   19024:	bl	11cfc <strrchr@plt>
   19028:	cmp	r0, #0
   1902c:	str	r0, [r7]
   19030:	beq	19138 <__assert_fail@plt+0x7370>
   19034:	add	r0, r0, #1
   19038:	str	r0, [r7]
   1903c:	cmp	r9, #0
   19040:	beq	19068 <__assert_fail@plt+0x72a0>
   19044:	ldr	r3, [r9]
   19048:	cmp	r3, #0
   1904c:	beq	19068 <__assert_fail@plt+0x72a0>
   19050:	mov	lr, r9
   19054:	mov	ip, r7
   19058:	str	r3, [ip, #4]!
   1905c:	ldr	r3, [lr, #4]!
   19060:	cmp	r3, #0
   19064:	bne	19058 <__assert_fail@plt+0x7290>
   19068:	mov	r2, r8
   1906c:	cmn	r2, #1
   19070:	add	r8, sp, #4
   19074:	mov	r4, #0
   19078:	beq	19094 <__assert_fail@plt+0x72cc>
   1907c:	add	r4, r4, #1
   19080:	cmp	r4, #3
   19084:	beq	190d8 <__assert_fail@plt+0x7310>
   19088:	ldr	r2, [r8], #4
   1908c:	cmn	r2, #1
   19090:	bne	1907c <__assert_fail@plt+0x72b4>
   19094:	adds	r1, r4, #0
   19098:	movw	r0, #29340	; 0x729c
   1909c:	movt	r0, #2
   190a0:	movne	r1, #1
   190a4:	bl	11be8 <__open64_2@plt>
   190a8:	cmn	r0, #1
   190ac:	str	r0, [r8, #-4]
   190b0:	bne	1907c <__assert_fail@plt+0x72b4>
   190b4:	bl	11bf4 <__errno_location@plt>
   190b8:	ldr	r0, [r0]
   190bc:	bl	11b10 <strerror@plt>
   190c0:	movw	r1, #29340	; 0x729c
   190c4:	movt	r1, #2
   190c8:	mov	r2, r0
   190cc:	movw	r0, #30156	; 0x75cc
   190d0:	movt	r0, #2
   190d4:	bl	23c0c <__assert_fail@plt+0x11e44>
   190d8:	mov	r4, #0
   190dc:	ldr	r0, [sp, r4, lsl #2]
   190e0:	cmp	r0, r4
   190e4:	beq	190f8 <__assert_fail@plt+0x7330>
   190e8:	mov	r1, r4
   190ec:	bl	11a08 <dup2@plt>
   190f0:	cmn	r0, #1
   190f4:	beq	19148 <__assert_fail@plt+0x7380>
   190f8:	add	r4, r4, #1
   190fc:	cmp	r4, #3
   19100:	bne	190dc <__assert_fail@plt+0x7314>
   19104:	mov	r0, r4
   19108:	mov	r1, #0
   1910c:	bl	18efc <__assert_fail@plt+0x7134>
   19110:	cmp	r6, #0
   19114:	beq	1911c <__assert_fail@plt+0x7354>
   19118:	blx	r6
   1911c:	mov	r0, r5
   19120:	mov	r1, r7
   19124:	bl	11bdc <execv@plt>
   19128:	mov	r0, #127	; 0x7f
   1912c:	bl	1196c <_exit@plt>
   19130:	mov	r0, r3
   19134:	b	1900c <__assert_fail@plt+0x7244>
   19138:	mov	r0, r5
   1913c:	bl	17134 <__assert_fail@plt+0x536c>
   19140:	str	r0, [r7]
   19144:	b	1903c <__assert_fail@plt+0x7274>
   19148:	cmp	r4, #0
   1914c:	bne	19178 <__assert_fail@plt+0x73b0>
   19150:	movw	r4, #27876	; 0x6ce4
   19154:	movt	r4, #2
   19158:	bl	11bf4 <__errno_location@plt>
   1915c:	ldr	r0, [r0]
   19160:	bl	11b10 <strerror@plt>
   19164:	mov	r1, r4
   19168:	mov	r2, r0
   1916c:	movw	r0, #30184	; 0x75e8
   19170:	movt	r0, #2
   19174:	bl	23c0c <__assert_fail@plt+0x11e44>
   19178:	cmp	r4, #1
   1917c:	movw	r2, #30152	; 0x75c8
   19180:	movw	r3, #25980	; 0x657c
   19184:	movt	r2, #2
   19188:	movt	r3, #2
   1918c:	movne	r4, r2
   19190:	moveq	r4, r3
   19194:	b	19158 <__assert_fail@plt+0x7390>
   19198:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1919c:	movw	sl, #44624	; 0xae50
   191a0:	movt	sl, #3
   191a4:	sub	sp, sp, #116	; 0x74
   191a8:	ldr	r3, [sl]
   191ac:	str	r3, [sp, #108]	; 0x6c
   191b0:	bl	18e74 <__assert_fail@plt+0x70ac>
   191b4:	mov	r1, #4
   191b8:	mov	r9, r0
   191bc:	mov	r0, #32
   191c0:	bl	11888 <calloc@plt>
   191c4:	subs	r8, r0, #0
   191c8:	beq	19298 <__assert_fail@plt+0x74d0>
   191cc:	cmp	r9, #0
   191d0:	mov	r5, #0
   191d4:	ble	19264 <__assert_fail@plt+0x749c>
   191d8:	mov	r4, r5
   191dc:	mov	r6, #32
   191e0:	b	1922c <__assert_fail@plt+0x7464>
   191e4:	add	r7, r5, #1
   191e8:	cmp	r7, r6
   191ec:	bcc	19218 <__assert_fail@plt+0x7450>
   191f0:	cmp	r6, #255	; 0xff
   191f4:	mov	r0, r8
   191f8:	movhi	r3, #256	; 0x100
   191fc:	movls	r3, #32
   19200:	add	r6, r6, r3
   19204:	lsl	r1, r6, #2
   19208:	bl	11a20 <realloc@plt>
   1920c:	subs	fp, r0, #0
   19210:	beq	19288 <__assert_fail@plt+0x74c0>
   19214:	mov	r8, fp
   19218:	str	r4, [r8, r5, lsl #2]
   1921c:	add	r4, r4, #1
   19220:	cmp	r4, r9
   19224:	mov	r5, r7
   19228:	beq	19260 <__assert_fail@plt+0x7498>
   1922c:	mov	r0, #3
   19230:	mov	r1, r4
   19234:	mov	r2, sp
   19238:	bl	11a68 <__fxstat64@plt>
   1923c:	cmn	r0, #1
   19240:	bne	191e4 <__assert_fail@plt+0x741c>
   19244:	bl	11bf4 <__errno_location@plt>
   19248:	ldr	r3, [r0]
   1924c:	cmp	r3, #9
   19250:	bne	191e4 <__assert_fail@plt+0x741c>
   19254:	add	r4, r4, #1
   19258:	cmp	r4, r9
   1925c:	bne	1922c <__assert_fail@plt+0x7464>
   19260:	lsl	r5, r5, #2
   19264:	mov	r0, r8
   19268:	mvn	r3, #0
   1926c:	str	r3, [r8, r5]
   19270:	ldr	r2, [sp, #108]	; 0x6c
   19274:	ldr	r3, [sl]
   19278:	cmp	r2, r3
   1927c:	bne	192a0 <__assert_fail@plt+0x74d8>
   19280:	add	sp, sp, #116	; 0x74
   19284:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19288:	mov	r0, r8
   1928c:	bl	11948 <free@plt>
   19290:	mov	r0, fp
   19294:	b	19270 <__assert_fail@plt+0x74a8>
   19298:	mov	r0, r8
   1929c:	b	19270 <__assert_fail@plt+0x74a8>
   192a0:	bl	119d8 <__stack_chk_fail@plt>
   192a4:	push	{r4, lr}
   192a8:	mov	r4, r0
   192ac:	bl	11ccc <pipe@plt>
   192b0:	cmn	r0, #1
   192b4:	beq	192c0 <__assert_fail@plt+0x74f8>
   192b8:	mov	r0, #0
   192bc:	pop	{r4, pc}
   192c0:	bl	11d5c <gpg_err_code_from_syserror@plt>
   192c4:	mvn	r3, #0
   192c8:	str	r3, [r4, #4]
   192cc:	str	r3, [r4]
   192d0:	cmp	r0, #0
   192d4:	uxthne	r0, r0
   192d8:	pop	{r4, pc}
   192dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   192e0:	sub	sp, sp, #36	; 0x24
   192e4:	movw	r4, #44624	; 0xae50
   192e8:	movt	r4, #3
   192ec:	ldr	r8, [sp, #80]	; 0x50
   192f0:	mov	r5, r2
   192f4:	ldr	r7, [sp, #84]	; 0x54
   192f8:	mov	ip, #0
   192fc:	ldr	r2, [r4]
   19300:	mov	sl, r0
   19304:	str	ip, [r8]
   19308:	mov	r0, r5
   1930c:	mvn	ip, #0
   19310:	str	ip, [r7]
   19314:	mov	r9, r3
   19318:	str	r1, [sp, #12]
   1931c:	str	r2, [sp, #28]
   19320:	ldr	fp, [sp, #72]	; 0x48
   19324:	bl	11930 <fflush@plt>
   19328:	mov	r0, r5
   1932c:	bl	119e4 <rewind@plt>
   19330:	mov	r0, r5
   19334:	bl	11c84 <fileno@plt>
   19338:	mov	r6, r0
   1933c:	mov	r0, r9
   19340:	bl	11c84 <fileno@plt>
   19344:	cmn	r0, #1
   19348:	cmnne	r6, #1
   1934c:	mov	r5, r0
   19350:	movne	r9, #0
   19354:	moveq	r9, #1
   19358:	beq	194c4 <__assert_fail@plt+0x76fc>
   1935c:	add	r0, sp, #20
   19360:	bl	11ccc <pipe@plt>
   19364:	cmn	r0, #1
   19368:	beq	193c4 <__assert_fail@plt+0x75fc>
   1936c:	bl	11ce4 <fork@plt>
   19370:	cmn	r0, #1
   19374:	str	r0, [r7]
   19378:	beq	1940c <__assert_fail@plt+0x7644>
   1937c:	cmp	r0, #0
   19380:	beq	194d0 <__assert_fail@plt+0x7708>
   19384:	ldr	r0, [sp, #24]
   19388:	bl	11d98 <close@plt>
   1938c:	movw	r1, #24728	; 0x6098
   19390:	ldr	r0, [sp, #20]
   19394:	movt	r1, #2
   19398:	bl	1187c <fdopen@plt>
   1939c:	cmp	r0, #0
   193a0:	str	r0, [r8]
   193a4:	movne	r0, r9
   193a8:	beq	19464 <__assert_fail@plt+0x769c>
   193ac:	ldr	r2, [sp, #28]
   193b0:	ldr	r3, [r4]
   193b4:	cmp	r2, r3
   193b8:	bne	194c0 <__assert_fail@plt+0x76f8>
   193bc:	add	sp, sp, #36	; 0x24
   193c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   193c4:	bl	11d5c <gpg_err_code_from_syserror@plt>
   193c8:	mov	r2, #5
   193cc:	movw	r1, #22716	; 0x58bc
   193d0:	movt	r1, #2
   193d4:	cmp	r0, #0
   193d8:	uxthne	r9, r0
   193dc:	moveq	r9, r0
   193e0:	mov	r0, #0
   193e4:	bl	119cc <dcgettext@plt>
   193e8:	mov	r5, r0
   193ec:	bl	11bf4 <__errno_location@plt>
   193f0:	ldr	r0, [r0]
   193f4:	bl	11b10 <strerror@plt>
   193f8:	mov	r1, r0
   193fc:	mov	r0, r5
   19400:	bl	23b98 <__assert_fail@plt+0x11dd0>
   19404:	mov	r0, r9
   19408:	b	193ac <__assert_fail@plt+0x75e4>
   1940c:	bl	11d5c <gpg_err_code_from_syserror@plt>
   19410:	mov	r2, #5
   19414:	movw	r1, #30268	; 0x763c
   19418:	movt	r1, #2
   1941c:	cmp	r0, #0
   19420:	uxthne	r9, r0
   19424:	moveq	r9, r0
   19428:	mov	r0, #0
   1942c:	bl	119cc <dcgettext@plt>
   19430:	mov	r5, r0
   19434:	bl	11bf4 <__errno_location@plt>
   19438:	ldr	r0, [r0]
   1943c:	bl	11b10 <strerror@plt>
   19440:	mov	r1, r0
   19444:	mov	r0, r5
   19448:	bl	23b98 <__assert_fail@plt+0x11dd0>
   1944c:	ldr	r0, [sp, #20]
   19450:	bl	11d98 <close@plt>
   19454:	ldr	r0, [sp, #24]
   19458:	bl	11d98 <close@plt>
   1945c:	mov	r0, r9
   19460:	b	193ac <__assert_fail@plt+0x75e4>
   19464:	bl	11d5c <gpg_err_code_from_syserror@plt>
   19468:	mov	r2, #5
   1946c:	movw	r1, #30296	; 0x7658
   19470:	movt	r1, #2
   19474:	cmp	r0, #0
   19478:	uxthne	r9, r0
   1947c:	moveq	r9, r0
   19480:	mov	r0, #0
   19484:	bl	119cc <dcgettext@plt>
   19488:	mov	r5, r0
   1948c:	bl	11bf4 <__errno_location@plt>
   19490:	ldr	r0, [r0]
   19494:	bl	11b10 <strerror@plt>
   19498:	mov	r1, r0
   1949c:	mov	r0, r5
   194a0:	bl	23b98 <__assert_fail@plt+0x11dd0>
   194a4:	ldr	r0, [r7]
   194a8:	mov	r1, #15
   194ac:	bl	11b70 <kill@plt>
   194b0:	mvn	r3, #0
   194b4:	mov	r0, r9
   194b8:	str	r3, [r7]
   194bc:	b	193ac <__assert_fail@plt+0x75e4>
   194c0:	bl	119d8 <__stack_chk_fail@plt>
   194c4:	movw	r0, #30208	; 0x7600
   194c8:	movt	r0, #2
   194cc:	bl	23c0c <__assert_fail@plt+0x11e44>
   194d0:	mov	r0, #25
   194d4:	bl	17178 <__assert_fail@plt+0x53b0>
   194d8:	ldr	ip, [sp, #24]
   194dc:	str	fp, [sp, #4]
   194e0:	mov	r0, sl
   194e4:	ldr	r1, [sp, #12]
   194e8:	mov	r2, r6
   194ec:	mov	r3, r5
   194f0:	str	ip, [sp]
   194f4:	bl	18fa8 <__assert_fail@plt+0x71e0>
   194f8:	push	{r4, r5, r6, r7, r8, r9, lr}
   194fc:	sub	sp, sp, #12
   19500:	mov	r9, r0
   19504:	mov	r8, r1
   19508:	ldr	r5, [sp, #44]	; 0x2c
   1950c:	mov	r7, r2
   19510:	mov	r6, r3
   19514:	bl	11ce4 <fork@plt>
   19518:	cmn	r0, #1
   1951c:	mov	r4, r0
   19520:	str	r0, [r5]
   19524:	beq	1953c <__assert_fail@plt+0x7774>
   19528:	cmp	r0, #0
   1952c:	movne	r0, #0
   19530:	beq	19588 <__assert_fail@plt+0x77c0>
   19534:	add	sp, sp, #12
   19538:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1953c:	bl	11d5c <gpg_err_code_from_syserror@plt>
   19540:	mov	r2, #5
   19544:	movw	r1, #30268	; 0x763c
   19548:	movt	r1, #2
   1954c:	cmp	r0, #0
   19550:	uxthne	r5, r0
   19554:	moveq	r5, r0
   19558:	mov	r0, #0
   1955c:	bl	119cc <dcgettext@plt>
   19560:	mov	r4, r0
   19564:	bl	11bf4 <__errno_location@plt>
   19568:	ldr	r0, [r0]
   1956c:	bl	11b10 <strerror@plt>
   19570:	mov	r1, r0
   19574:	mov	r0, r4
   19578:	bl	23b98 <__assert_fail@plt+0x11dd0>
   1957c:	mov	r0, r5
   19580:	add	sp, sp, #12
   19584:	pop	{r4, r5, r6, r7, r8, r9, pc}
   19588:	mov	r0, #25
   1958c:	bl	17178 <__assert_fail@plt+0x53b0>
   19590:	ldr	r3, [sp, #40]	; 0x28
   19594:	mov	r0, r9
   19598:	mov	r1, r8
   1959c:	mov	r2, r7
   195a0:	stm	sp, {r3, r4}
   195a4:	mov	r3, r6
   195a8:	bl	18fa8 <__assert_fail@plt+0x71e0>
   195ac:	push	{r4, r5, r6, r7, r8, lr}
   195b0:	movw	r6, #44624	; 0xae50
   195b4:	movt	r6, #3
   195b8:	subs	r7, r2, #0
   195bc:	sub	sp, sp, #8
   195c0:	mov	r8, r0
   195c4:	ldr	r3, [r6]
   195c8:	mov	r5, r1
   195cc:	str	r3, [sp, #4]
   195d0:	mvnne	r3, #0
   195d4:	strne	r3, [r7]
   195d8:	cmn	r1, #1
   195dc:	moveq	r0, #55	; 0x37
   195e0:	bne	195fc <__assert_fail@plt+0x7834>
   195e4:	b	19644 <__assert_fail@plt+0x787c>
   195e8:	bl	11bf4 <__errno_location@plt>
   195ec:	ldr	r3, [r0]
   195f0:	mov	r4, r0
   195f4:	cmp	r3, #4
   195f8:	bne	1966c <__assert_fail@plt+0x78a4>
   195fc:	mov	r0, r5
   19600:	mov	r1, sp
   19604:	mov	r2, #0
   19608:	bl	11a98 <waitpid@plt>
   1960c:	cmn	r0, #1
   19610:	beq	195e8 <__assert_fail@plt+0x7820>
   19614:	ldr	r3, [sp]
   19618:	ands	r0, r3, #127	; 0x7f
   1961c:	bne	196b0 <__assert_fail@plt+0x78e8>
   19620:	ubfx	r3, r3, #8, #8
   19624:	cmp	r3, #127	; 0x7f
   19628:	beq	196fc <__assert_fail@plt+0x7934>
   1962c:	cmp	r3, #0
   19630:	beq	1965c <__assert_fail@plt+0x7894>
   19634:	cmp	r7, #0
   19638:	strne	r3, [r7]
   1963c:	movne	r0, #1
   19640:	beq	196d4 <__assert_fail@plt+0x790c>
   19644:	ldr	r2, [sp, #4]
   19648:	ldr	r3, [r6]
   1964c:	cmp	r2, r3
   19650:	bne	1971c <__assert_fail@plt+0x7954>
   19654:	add	sp, sp, #8
   19658:	pop	{r4, r5, r6, r7, r8, pc}
   1965c:	cmp	r7, #0
   19660:	mov	r0, #0
   19664:	strne	r3, [r7]
   19668:	b	19644 <__assert_fail@plt+0x787c>
   1966c:	mov	r2, #5
   19670:	movw	r1, #30444	; 0x76ec
   19674:	mov	r0, #0
   19678:	movt	r1, #2
   1967c:	bl	119cc <dcgettext@plt>
   19680:	mov	r7, r0
   19684:	ldr	r0, [r4]
   19688:	bl	11b10 <strerror@plt>
   1968c:	mov	r1, r5
   19690:	mov	r2, r0
   19694:	mov	r0, r7
   19698:	bl	23b98 <__assert_fail@plt+0x11dd0>
   1969c:	ldr	r0, [r4]
   196a0:	bl	11954 <gpg_err_code_from_errno@plt>
   196a4:	cmp	r0, #0
   196a8:	uxthne	r0, r0
   196ac:	b	19644 <__assert_fail@plt+0x787c>
   196b0:	mov	r2, #5
   196b4:	movw	r1, #30412	; 0x76cc
   196b8:	mov	r0, #0
   196bc:	movt	r1, #2
   196c0:	bl	119cc <dcgettext@plt>
   196c4:	mov	r1, r8
   196c8:	bl	23b98 <__assert_fail@plt+0x11dd0>
   196cc:	mov	r0, #1
   196d0:	b	19644 <__assert_fail@plt+0x787c>
   196d4:	mov	r2, #5
   196d8:	mov	r0, r7
   196dc:	movw	r1, #30376	; 0x76a8
   196e0:	movt	r1, #2
   196e4:	bl	119cc <dcgettext@plt>
   196e8:	mov	r1, r8
   196ec:	ldrb	r2, [sp, #1]
   196f0:	bl	23b98 <__assert_fail@plt+0x11dd0>
   196f4:	mov	r0, #1
   196f8:	b	19644 <__assert_fail@plt+0x787c>
   196fc:	mov	r2, #5
   19700:	movw	r1, #30332	; 0x767c
   19704:	movt	r1, #2
   19708:	bl	119cc <dcgettext@plt>
   1970c:	mov	r1, r8
   19710:	bl	23b98 <__assert_fail@plt+0x11dd0>
   19714:	mov	r0, #115	; 0x73
   19718:	b	19644 <__assert_fail@plt+0x787c>
   1971c:	bl	119d8 <__stack_chk_fail@plt>
   19720:	push	{r4, r5, r6, r7, lr}
   19724:	sub	sp, sp, #12
   19728:	mov	r7, r1
   1972c:	mov	r6, r2
   19730:	mov	r5, r0
   19734:	bl	1193c <getuid@plt>
   19738:	mov	r4, r0
   1973c:	bl	11a5c <geteuid@plt>
   19740:	cmp	r4, r0
   19744:	movne	r0, #59	; 0x3b
   19748:	beq	19754 <__assert_fail@plt+0x798c>
   1974c:	add	sp, sp, #12
   19750:	pop	{r4, r5, r6, r7, pc}
   19754:	mov	r0, r5
   19758:	mov	r1, #1
   1975c:	bl	11cb4 <access@plt>
   19760:	subs	r4, r0, #0
   19764:	bne	19830 <__assert_fail@plt+0x7a68>
   19768:	bl	11ce4 <fork@plt>
   1976c:	cmn	r0, #1
   19770:	beq	19800 <__assert_fail@plt+0x7a38>
   19774:	cmp	r0, #0
   19778:	bne	19848 <__assert_fail@plt+0x7a80>
   1977c:	mov	r0, #25
   19780:	bl	17178 <__assert_fail@plt+0x53b0>
   19784:	bl	11bb8 <setsid@plt>
   19788:	cmn	r0, #1
   1978c:	beq	19888 <__assert_fail@plt+0x7ac0>
   19790:	movw	r0, #33100	; 0x814c
   19794:	movt	r0, #2
   19798:	bl	11a50 <chdir@plt>
   1979c:	subs	r4, r0, #0
   197a0:	bne	19888 <__assert_fail@plt+0x7ac0>
   197a4:	bl	11ce4 <fork@plt>
   197a8:	cmn	r0, #1
   197ac:	beq	19888 <__assert_fail@plt+0x7ac0>
   197b0:	cmp	r0, #0
   197b4:	bne	19880 <__assert_fail@plt+0x7ab8>
   197b8:	cmp	r6, #0
   197bc:	beq	197e0 <__assert_fail@plt+0x7a18>
   197c0:	ldr	r0, [r6]
   197c4:	cmp	r0, #0
   197c8:	beq	197e0 <__assert_fail@plt+0x7a18>
   197cc:	bl	17134 <__assert_fail@plt+0x536c>
   197d0:	bl	11cf0 <putenv@plt>
   197d4:	ldr	r0, [r6, #4]!
   197d8:	cmp	r0, #0
   197dc:	bne	197cc <__assert_fail@plt+0x7a04>
   197e0:	mvn	r3, #0
   197e4:	mov	ip, #0
   197e8:	mov	r0, r5
   197ec:	mov	r2, r3
   197f0:	mov	r1, r7
   197f4:	str	r3, [sp]
   197f8:	str	ip, [sp, #4]
   197fc:	bl	18fa8 <__assert_fail@plt+0x71e0>
   19800:	mov	r2, #5
   19804:	mov	r0, r4
   19808:	movw	r1, #30268	; 0x763c
   1980c:	movt	r1, #2
   19810:	bl	119cc <dcgettext@plt>
   19814:	mov	r4, r0
   19818:	bl	11bf4 <__errno_location@plt>
   1981c:	ldr	r0, [r0]
   19820:	bl	11b10 <strerror@plt>
   19824:	mov	r1, r0
   19828:	mov	r0, r4
   1982c:	bl	23b98 <__assert_fail@plt+0x11dd0>
   19830:	bl	11d5c <gpg_err_code_from_syserror@plt>
   19834:	cmp	r0, #0
   19838:	uxthne	r0, r0
   1983c:	bne	1974c <__assert_fail@plt+0x7984>
   19840:	mov	r0, #0
   19844:	b	1974c <__assert_fail@plt+0x7984>
   19848:	mov	r1, r4
   1984c:	mov	r2, r4
   19850:	bl	11a98 <waitpid@plt>
   19854:	cmn	r0, #1
   19858:	bne	19840 <__assert_fail@plt+0x7a78>
   1985c:	bl	11bf4 <__errno_location@plt>
   19860:	ldr	r0, [r0]
   19864:	bl	11b10 <strerror@plt>
   19868:	mov	r1, r0
   1986c:	movw	r0, #30492	; 0x771c
   19870:	movt	r0, #2
   19874:	bl	23b98 <__assert_fail@plt+0x11dd0>
   19878:	mov	r0, r4
   1987c:	b	1974c <__assert_fail@plt+0x7984>
   19880:	mov	r0, r4
   19884:	bl	1196c <_exit@plt>
   19888:	mov	r0, #1
   1988c:	bl	1196c <_exit@plt>
   19890:	sub	sp, sp, #8
   19894:	mov	ip, #0
   19898:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   1989c:	movw	r7, #8272	; 0x2050
   198a0:	ldr	r6, [r0, #36]	; 0x24
   198a4:	movw	sl, #8212	; 0x2014
   198a8:	ldr	r8, [sp, #40]	; 0x28
   198ac:	movw	r4, #8216	; 0x2018
   198b0:	movw	r9, #8232	; 0x2028
   198b4:	movw	fp, #8240	; 0x2030
   198b8:	ldrb	r5, [r6, r7]
   198bc:	str	r1, [r6, sl]
   198c0:	add	sl, sl, #32
   198c4:	bfi	r5, ip, #4, #1
   198c8:	strb	r5, [r6, r7]
   198cc:	mov	r5, #0
   198d0:	ldr	r1, [r0, #36]	; 0x24
   198d4:	str	ip, [r6, r4]
   198d8:	mov	r4, #0
   198dc:	str	r3, [r6, fp]
   198e0:	add	fp, fp, #8
   198e4:	strd	r4, [r6, r9]
   198e8:	movw	r5, #8252	; 0x203c
   198ec:	str	r8, [r6, sl]
   198f0:	mov	r4, #8256	; 0x2040
   198f4:	ldr	sl, [sp, #44]	; 0x2c
   198f8:	movw	r8, #8260	; 0x2044
   198fc:	ldr	r9, [sp, #48]	; 0x30
   19900:	str	r3, [sp, #36]	; 0x24
   19904:	str	sl, [r6, fp]
   19908:	add	fp, fp, #16
   1990c:	ldrb	sl, [r1, r7]
   19910:	str	ip, [r6, r5]
   19914:	add	r5, r5, #16
   19918:	str	r9, [r6, r4]
   1991c:	bfi	sl, ip, #1, #1
   19920:	str	ip, [r6, r8]
   19924:	add	r4, r4, #20
   19928:	str	r2, [r6, fp]
   1992c:	movw	r9, #8280	; 0x2058
   19930:	strb	sl, [r1, r7]
   19934:	movw	sl, #8284	; 0x205c
   19938:	ldr	r2, [r0, #36]	; 0x24
   1993c:	movw	r8, #8224	; 0x2020
   19940:	ldrb	r6, [r1, r5]
   19944:	str	ip, [r1, r4]
   19948:	ldrb	r4, [r2, r7]
   1994c:	and	r6, r6, #254	; 0xfe
   19950:	str	ip, [r1, r9]
   19954:	bfi	r6, ip, #1, #1
   19958:	str	ip, [r1, sl]
   1995c:	bfi	r4, ip, #2, #2
   19960:	strb	r6, [r1, r5]
   19964:	strb	r4, [r2, r7]
   19968:	ldr	r2, [r0, #36]	; 0x24
   1996c:	ldr	r1, [sp, #52]	; 0x34
   19970:	ldrb	r3, [r2, r7]
   19974:	ands	r1, r1, #3
   19978:	bfi	r3, ip, #0, #1
   1997c:	strb	r3, [r2, r7]
   19980:	ldr	r3, [r0, #36]	; 0x24
   19984:	str	ip, [r3, r8]
   19988:	ldrb	r2, [r3, r7]
   1998c:	bfi	r2, ip, #5, #1
   19990:	strb	r2, [r3, r7]
   19994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   19998:	ldrb	r3, [r0, #32]
   1999c:	str	ip, [r0, #8]
   199a0:	orrne	r3, r3, #1
   199a4:	bfieq	r3, r1, #0, #1
   199a8:	str	ip, [r0, #12]
   199ac:	add	sp, sp, #8
   199b0:	str	ip, [r0, #16]
   199b4:	str	ip, [r0, #28]
   199b8:	strb	r3, [r0, #32]
   199bc:	bx	lr
   199c0:	cmp	r0, #0
   199c4:	bxeq	lr
   199c8:	b	11948 <free@plt>
   199cc:	push	{r3, r4, r5, lr}
   199d0:	subs	r4, r0, #0
   199d4:	beq	19a10 <__assert_fail@plt+0x7c48>
   199d8:	ldr	r0, [r4]
   199dc:	cmn	r0, #1
   199e0:	beq	199f0 <__assert_fail@plt+0x7c28>
   199e4:	ldr	r3, [r4, #4]
   199e8:	cmp	r3, #0
   199ec:	beq	19a04 <__assert_fail@plt+0x7c3c>
   199f0:	mov	r5, #0
   199f4:	mov	r0, r4
   199f8:	bl	11948 <free@plt>
   199fc:	mov	r0, r5
   19a00:	pop	{r3, r4, r5, pc}
   19a04:	bl	11d98 <close@plt>
   19a08:	mov	r5, r0
   19a0c:	b	199f4 <__assert_fail@plt+0x7c2c>
   19a10:	mov	r5, r4
   19a14:	mov	r0, r5
   19a18:	pop	{r3, r4, r5, pc}
   19a1c:	push	{r4, lr}
   19a20:	subs	r4, r0, #0
   19a24:	beq	19a3c <__assert_fail@plt+0x7c74>
   19a28:	ldr	r0, [r4, #4]
   19a2c:	ldr	r3, [r4, #36]	; 0x24
   19a30:	blx	r3
   19a34:	mov	r0, r4
   19a38:	bl	11948 <free@plt>
   19a3c:	mov	r0, #0
   19a40:	pop	{r4, pc}
   19a44:	push	{r3, r4, r5, r6, r7, lr}
   19a48:	movw	r3, #8240	; 0x2030
   19a4c:	ldr	r5, [r0, #36]	; 0x24
   19a50:	mov	r4, r0
   19a54:	ldr	r3, [r5, r3]
   19a58:	cmp	r3, #0
   19a5c:	beq	19ac4 <__assert_fail@plt+0x7cfc>
   19a60:	movw	r2, #8212	; 0x2014
   19a64:	ldr	r1, [r0]
   19a68:	ldr	r0, [r5, r2]
   19a6c:	ldr	r2, [r4, #4]
   19a70:	blx	r3
   19a74:	ldr	r5, [r4, #36]	; 0x24
   19a78:	cmn	r0, #1
   19a7c:	beq	19ad0 <__assert_fail@plt+0x7d08>
   19a80:	subs	ip, r0, #0
   19a84:	movweq	r3, #8268	; 0x204c
   19a88:	movne	r0, #0
   19a8c:	ldrbeq	r2, [r5, r3]
   19a90:	moveq	r0, ip
   19a94:	orreq	r2, r2, #2
   19a98:	strbeq	r2, [r5, r3]
   19a9c:	movw	r1, #8232	; 0x2028
   19aa0:	ldr	r7, [r4, #8]
   19aa4:	ldrd	r2, [r5, r1]
   19aa8:	mov	r6, #0
   19aac:	adds	r2, r2, r7
   19ab0:	adc	r3, r3, #0
   19ab4:	strd	r2, [r5, r1]
   19ab8:	str	ip, [r4, #8]
   19abc:	str	r6, [r4, #12]
   19ac0:	pop	{r3, r4, r5, r6, r7, pc}
   19ac4:	bl	11bf4 <__errno_location@plt>
   19ac8:	mov	r3, #95	; 0x5f
   19acc:	str	r3, [r0]
   19ad0:	movw	r3, #8268	; 0x204c
   19ad4:	mvn	r0, #0
   19ad8:	ldrb	r2, [r5, r3]
   19adc:	mov	ip, #0
   19ae0:	orr	r2, r2, #1
   19ae4:	strb	r2, [r5, r3]
   19ae8:	b	19a9c <__assert_fail@plt+0x7cd4>
   19aec:	push	{r3, r4, r5, r6, r7, lr}
   19af0:	mov	r6, r0
   19af4:	ldr	r0, [r0]
   19af8:	mov	r7, r1
   19afc:	mov	r5, r2
   19b00:	cmn	r0, #1
   19b04:	moveq	r4, r2
   19b08:	bne	19b24 <__assert_fail@plt+0x7d5c>
   19b0c:	b	19b3c <__assert_fail@plt+0x7d74>
   19b10:	bl	11bf4 <__errno_location@plt>
   19b14:	ldr	r3, [r0]
   19b18:	cmp	r3, #4
   19b1c:	bne	19b3c <__assert_fail@plt+0x7d74>
   19b20:	ldr	r0, [r6]
   19b24:	mov	r1, r7
   19b28:	mov	r2, r5
   19b2c:	bl	11c78 <write@plt>
   19b30:	cmn	r0, #1
   19b34:	mov	r4, r0
   19b38:	beq	19b10 <__assert_fail@plt+0x7d48>
   19b3c:	mov	r0, r4
   19b40:	pop	{r3, r4, r5, r6, r7, pc}
   19b44:	push	{r3, r4, r5, r6, r7, lr}
   19b48:	mov	r5, r0
   19b4c:	ldr	r0, [r0]
   19b50:	mov	r7, r1
   19b54:	mov	r6, r2
   19b58:	cmn	r0, #1
   19b5c:	moveq	r4, #0
   19b60:	bne	19b7c <__assert_fail@plt+0x7db4>
   19b64:	b	19b94 <__assert_fail@plt+0x7dcc>
   19b68:	bl	11bf4 <__errno_location@plt>
   19b6c:	ldr	r3, [r0]
   19b70:	cmp	r3, #4
   19b74:	bne	19b94 <__assert_fail@plt+0x7dcc>
   19b78:	ldr	r0, [r5]
   19b7c:	mov	r1, r7
   19b80:	mov	r2, r6
   19b84:	bl	11918 <read@plt>
   19b88:	cmn	r0, #1
   19b8c:	mov	r4, r0
   19b90:	beq	19b68 <__assert_fail@plt+0x7da0>
   19b94:	mov	r0, r4
   19b98:	pop	{r3, r4, r5, r6, r7, pc}
   19b9c:	push	{r4, r5, r6, r7, r8, lr}
   19ba0:	mov	r8, r0
   19ba4:	mov	r0, #8
   19ba8:	mov	r7, r1
   19bac:	mov	r4, r2
   19bb0:	mov	r6, r3
   19bb4:	bl	11aec <malloc@plt>
   19bb8:	subs	r5, r0, #0
   19bbc:	beq	19c08 <__assert_fail@plt+0x7e40>
   19bc0:	mov	r0, r4
   19bc4:	mov	r1, r6
   19bc8:	mov	r2, #384	; 0x180
   19bcc:	bl	11ac8 <open64@plt>
   19bd0:	cmn	r0, #1
   19bd4:	mov	r4, r0
   19bd8:	beq	19bf8 <__assert_fail@plt+0x7e30>
   19bdc:	mov	r3, #0
   19be0:	str	r0, [r5]
   19be4:	str	r3, [r5, #4]
   19be8:	mov	r0, r3
   19bec:	str	r5, [r8]
   19bf0:	str	r4, [r7]
   19bf4:	pop	{r4, r5, r6, r7, r8, pc}
   19bf8:	mov	r0, r5
   19bfc:	bl	11948 <free@plt>
   19c00:	mov	r0, r4
   19c04:	pop	{r4, r5, r6, r7, r8, pc}
   19c08:	mvn	r0, #0
   19c0c:	pop	{r4, r5, r6, r7, r8, pc}
   19c10:	ldrb	r1, [r0, #32]
   19c14:	movw	r2, #8244	; 0x2034
   19c18:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   19c1c:	tst	r1, #1
   19c20:	ldr	r3, [r0, #36]	; 0x24
   19c24:	mov	r6, r0
   19c28:	ldr	r8, [r3, r2]
   19c2c:	beq	19d24 <__assert_fail@plt+0x7f5c>
   19c30:	ldr	r2, [r0, #12]
   19c34:	cmp	r2, #0
   19c38:	beq	19ccc <__assert_fail@plt+0x7f04>
   19c3c:	cmp	r8, #0
   19c40:	beq	19cd8 <__assert_fail@plt+0x7f10>
   19c44:	cmp	r2, #0
   19c48:	ble	19ccc <__assert_fail@plt+0x7f04>
   19c4c:	mov	r7, #0
   19c50:	movw	r4, #8212	; 0x2014
   19c54:	ldr	r1, [r6]
   19c58:	ldr	r0, [r3, r4]
   19c5c:	add	r1, r1, r7
   19c60:	blx	r8
   19c64:	cmn	r0, #1
   19c68:	beq	19c88 <__assert_fail@plt+0x7ec0>
   19c6c:	ldr	r3, [r6, #12]
   19c70:	add	r7, r7, r0
   19c74:	rsb	r2, r7, r3
   19c78:	cmp	r2, #0
   19c7c:	ble	19d1c <__assert_fail@plt+0x7f54>
   19c80:	ldr	r3, [r6, #36]	; 0x24
   19c84:	b	19c54 <__assert_fail@plt+0x7e8c>
   19c88:	ldr	r3, [r6, #12]
   19c8c:	mov	r9, r0
   19c90:	cmp	r7, r3
   19c94:	ldr	r3, [r6, #16]
   19c98:	add	r3, r3, r7
   19c9c:	str	r3, [r6, #16]
   19ca0:	beq	19ce0 <__assert_fail@plt+0x7f18>
   19ca4:	cmp	r9, #0
   19ca8:	beq	19cd0 <__assert_fail@plt+0x7f08>
   19cac:	ldr	r3, [r6, #36]	; 0x24
   19cb0:	mvn	r9, #0
   19cb4:	movw	r2, #8268	; 0x204c
   19cb8:	mov	r0, r9
   19cbc:	ldrb	r1, [r3, r2]
   19cc0:	orr	r1, r1, #1
   19cc4:	strb	r1, [r3, r2]
   19cc8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   19ccc:	mov	r9, #0
   19cd0:	mov	r0, r9
   19cd4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   19cd8:	mov	r9, #95	; 0x5f
   19cdc:	b	19cb4 <__assert_fail@plt+0x7eec>
   19ce0:	ldr	ip, [r6, #36]	; 0x24
   19ce4:	movw	lr, #8232	; 0x2028
   19ce8:	mov	r3, #0
   19cec:	movw	r0, #8212	; 0x2014
   19cf0:	mov	r1, r3
   19cf4:	mov	r2, r3
   19cf8:	ldrd	r4, [ip, lr]
   19cfc:	ldr	r0, [ip, r0]
   19d00:	adds	r4, r4, r7
   19d04:	adc	r5, r5, #0
   19d08:	strd	r4, [ip, lr]
   19d0c:	str	r3, [r6, #12]
   19d10:	str	r3, [r6, #16]
   19d14:	blx	r8
   19d18:	b	19ca4 <__assert_fail@plt+0x7edc>
   19d1c:	mov	r9, #0
   19d20:	b	19c90 <__assert_fail@plt+0x7ec8>
   19d24:	movw	r0, #30636	; 0x77ac
   19d28:	movw	r1, #30660	; 0x77c4
   19d2c:	movw	r3, #30544	; 0x7750
   19d30:	movt	r0, #2
   19d34:	movt	r1, #2
   19d38:	movw	r2, #1267	; 0x4f3
   19d3c:	movt	r3, #2
   19d40:	bl	11dc8 <__assert_fail@plt>
   19d44:	push	{r3, r4, r5, r6, r7, lr}
   19d48:	movw	r5, #8284	; 0x205c
   19d4c:	ldr	r3, [r0, #36]	; 0x24
   19d50:	mov	r4, r0
   19d54:	ldr	r6, [r3, r5]
   19d58:	cmp	r6, #0
   19d5c:	beq	19d88 <__assert_fail@plt+0x7fc0>
   19d60:	bl	11bf4 <__errno_location@plt>
   19d64:	mov	r7, r0
   19d68:	mov	r0, r6
   19d6c:	ldr	r6, [r7]
   19d70:	bl	11cc0 <fclose@plt>
   19d74:	ldr	r2, [r4, #36]	; 0x24
   19d78:	mov	r1, #0
   19d7c:	mov	r3, r2
   19d80:	str	r1, [r2, r5]
   19d84:	str	r6, [r7]
   19d88:	ldrb	r5, [r4, #32]
   19d8c:	mov	r2, #8256	; 0x2040
   19d90:	ldr	r6, [r3, r2]
   19d94:	ands	r5, r5, #1
   19d98:	bne	19e08 <__assert_fail@plt+0x8040>
   19d9c:	cmp	r6, #0
   19da0:	beq	19dcc <__assert_fail@plt+0x8004>
   19da4:	movw	r2, #8212	; 0x2014
   19da8:	ldr	r0, [r3, r2]
   19dac:	blx	r6
   19db0:	adds	r3, r0, #0
   19db4:	movne	r3, #1
   19db8:	cmp	r5, #0
   19dbc:	movne	r3, #0
   19dc0:	cmp	r3, #0
   19dc4:	ldr	r3, [r4, #36]	; 0x24
   19dc8:	movne	r5, r0
   19dcc:	movw	r2, #8224	; 0x2020
   19dd0:	ldr	r0, [r3, r2]
   19dd4:	cmp	r0, #0
   19dd8:	beq	19de4 <__assert_fail@plt+0x801c>
   19ddc:	bl	11948 <free@plt>
   19de0:	ldr	r3, [r4, #36]	; 0x24
   19de4:	movw	r2, #8272	; 0x2050
   19de8:	movw	r4, #8224	; 0x2020
   19dec:	ldrb	r1, [r3, r2]
   19df0:	mov	ip, #0
   19df4:	mov	r0, r5
   19df8:	str	ip, [r3, r4]
   19dfc:	bfi	r1, ip, #5, #1
   19e00:	strb	r1, [r3, r2]
   19e04:	pop	{r3, r4, r5, r6, r7, pc}
   19e08:	mov	r0, r4
   19e0c:	bl	19c10 <__assert_fail@plt+0x7e48>
   19e10:	ldr	r3, [r4, #36]	; 0x24
   19e14:	mov	r5, r0
   19e18:	b	19d9c <__assert_fail@plt+0x7fd4>
   19e1c:	cmp	r2, #1
   19e20:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   19e24:	mov	r6, r0
   19e28:	mov	r7, r1
   19e2c:	beq	19f24 <__assert_fail@plt+0x815c>
   19e30:	cmp	r2, #2
   19e34:	beq	19f0c <__assert_fail@plt+0x8144>
   19e38:	cmp	r2, #0
   19e3c:	beq	19e58 <__assert_fail@plt+0x8090>
   19e40:	bl	11bf4 <__errno_location@plt>
   19e44:	mvn	r3, #0
   19e48:	mov	r2, #22
   19e4c:	str	r2, [r0]
   19e50:	mov	r0, r3
   19e54:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   19e58:	ldrd	r4, [r1]
   19e5c:	ldr	r2, [r6, #8]
   19e60:	mov	r3, #0
   19e64:	cmp	r2, r4
   19e68:	sbcs	r1, r3, r5
   19e6c:	movge	r8, r4
   19e70:	bge	19ee0 <__assert_fail@plt+0x8118>
   19e74:	ldrb	r3, [r6, #28]
   19e78:	tst	r3, #1
   19e7c:	beq	19f58 <__assert_fail@plt+0x8190>
   19e80:	ldr	r9, [r6, #24]
   19e84:	mov	r3, #0
   19e88:	mov	r8, r4
   19e8c:	sub	r0, r9, #1
   19e90:	add	r0, r0, r4
   19e94:	mov	r2, r0
   19e98:	cmp	r2, r4
   19e9c:	sbcs	r1, r3, r5
   19ea0:	blt	19e40 <__assert_fail@plt+0x8078>
   19ea4:	mov	r1, r9
   19ea8:	bl	23df0 <__assert_fail@plt+0x12028>
   19eac:	ldr	r3, [r6, #12]
   19eb0:	cmp	r3, #0
   19eb4:	mul	r9, r9, r0
   19eb8:	beq	19ec4 <__assert_fail@plt+0x80fc>
   19ebc:	cmp	r9, r3
   19ec0:	bhi	19f58 <__assert_fail@plt+0x8190>
   19ec4:	ldr	r3, [r6, #32]
   19ec8:	mov	r1, r9
   19ecc:	ldr	r0, [r6, #4]
   19ed0:	blx	r3
   19ed4:	cmp	r0, #0
   19ed8:	beq	19f6c <__assert_fail@plt+0x81a4>
   19edc:	stmib	r6, {r0, r9}
   19ee0:	ldr	r0, [r6, #20]
   19ee4:	mov	r3, #0
   19ee8:	mov	r2, r0
   19eec:	cmp	r2, r4
   19ef0:	sbcs	r1, r3, r5
   19ef4:	blt	19f3c <__assert_fail@plt+0x8174>
   19ef8:	mov	r3, #0
   19efc:	str	r8, [r6, #16]
   19f00:	mov	r0, r3
   19f04:	strd	r4, [r7]
   19f08:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   19f0c:	ldr	r4, [r1]
   19f10:	mov	r5, #0
   19f14:	ldr	r3, [r0, #20]
   19f18:	add	r4, r4, r3
   19f1c:	str	r4, [r0, #20]
   19f20:	b	19e5c <__assert_fail@plt+0x8094>
   19f24:	ldr	r4, [r1]
   19f28:	mov	r5, #0
   19f2c:	ldr	r3, [r0, #16]
   19f30:	add	r4, r4, r3
   19f34:	str	r4, [r0, #16]
   19f38:	b	19e5c <__assert_fail@plt+0x8094>
   19f3c:	ldr	r3, [r6, #4]
   19f40:	rsb	r2, r0, r8
   19f44:	mov	r1, #0
   19f48:	add	r0, r3, r0
   19f4c:	bl	11c3c <memset@plt>
   19f50:	str	r8, [r6, #20]
   19f54:	b	19ef8 <__assert_fail@plt+0x8130>
   19f58:	bl	11bf4 <__errno_location@plt>
   19f5c:	mov	r2, #28
   19f60:	mvn	r3, #0
   19f64:	str	r2, [r0]
   19f68:	b	19e50 <__assert_fail@plt+0x8088>
   19f6c:	mvn	r3, #0
   19f70:	b	19e50 <__assert_fail@plt+0x8088>
   19f74:	push	{r3, r4, r5, lr}
   19f78:	mov	r4, r0
   19f7c:	ldr	r3, [r0, #16]
   19f80:	ldr	r5, [r0, #20]
   19f84:	rsb	r5, r3, r5
   19f88:	cmp	r2, r5
   19f8c:	movcc	r5, r2
   19f90:	cmp	r5, #0
   19f94:	beq	19fb8 <__assert_fail@plt+0x81f0>
   19f98:	ldr	ip, [r0, #4]
   19f9c:	mov	r2, r5
   19fa0:	mov	r0, r1
   19fa4:	add	r1, ip, r3
   19fa8:	bl	11978 <memcpy@plt>
   19fac:	ldr	r3, [r4, #16]
   19fb0:	add	r3, r3, r5
   19fb4:	str	r3, [r4, #16]
   19fb8:	mov	r0, r5
   19fbc:	pop	{r3, r4, r5, pc}
   19fc0:	mov	ip, #0
   19fc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19fc8:	mov	r5, r0
   19fcc:	mov	r9, r1
   19fd0:	mov	r8, r2
   19fd4:	mov	sl, r3
   19fd8:	mov	r4, ip
   19fdc:	b	1a014 <__assert_fail@plt+0x824c>
   19fe0:	rsb	r3, r4, r8
   19fe4:	rsb	r7, r6, r7
   19fe8:	cmp	r7, r3
   19fec:	movcs	r7, r3
   19ff0:	ldr	r1, [r5]
   19ff4:	add	r0, r9, r4
   19ff8:	add	r4, r4, r7
   19ffc:	add	r1, r1, r6
   1a000:	mov	r2, r7
   1a004:	bl	11978 <memcpy@plt>
   1a008:	mov	ip, #0
   1a00c:	add	r6, r7, r6
   1a010:	str	r6, [r5, #12]
   1a014:	rsbs	r3, ip, #1
   1a018:	movcc	r3, #0
   1a01c:	cmp	r8, r4
   1a020:	moveq	r3, #0
   1a024:	cmp	r3, #0
   1a028:	beq	1a05c <__assert_fail@plt+0x8294>
   1a02c:	ldr	r6, [r5, #12]
   1a030:	ldr	r7, [r5, #8]
   1a034:	cmp	r6, r7
   1a038:	bne	19fe0 <__assert_fail@plt+0x8218>
   1a03c:	mov	r0, r5
   1a040:	bl	19a44 <__assert_fail@plt+0x7c7c>
   1a044:	subs	ip, r0, #0
   1a048:	bne	1a014 <__assert_fail@plt+0x824c>
   1a04c:	ldr	r7, [r5, #8]
   1a050:	cmp	r7, #0
   1a054:	ldrne	r6, [r5, #12]
   1a058:	bne	19fe0 <__assert_fail@plt+0x8218>
   1a05c:	str	r4, [sl]
   1a060:	mov	r0, ip
   1a064:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a068:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a06c:	mov	r6, #0
   1a070:	mov	r4, r0
   1a074:	mov	r7, r1
   1a078:	mov	r9, r2
   1a07c:	mov	r8, r3
   1a080:	mov	r5, r6
   1a084:	rsbs	ip, r6, #1
   1a088:	movcc	ip, #0
   1a08c:	cmp	r9, r5
   1a090:	moveq	ip, #0
   1a094:	cmp	ip, #0
   1a098:	beq	1a108 <__assert_fail@plt+0x8340>
   1a09c:	ldr	r0, [r4, #12]
   1a0a0:	ldr	ip, [r4, #4]
   1a0a4:	cmp	r0, ip
   1a0a8:	beq	1a0ec <__assert_fail@plt+0x8324>
   1a0ac:	rsb	ip, r0, ip
   1a0b0:	rsb	r3, r5, r9
   1a0b4:	cmp	ip, r3
   1a0b8:	movcc	sl, ip
   1a0bc:	movcs	sl, r3
   1a0c0:	ldr	r3, [r4]
   1a0c4:	add	r1, r7, r5
   1a0c8:	mov	r6, #0
   1a0cc:	mov	r2, sl
   1a0d0:	add	r0, r3, r0
   1a0d4:	bl	11978 <memcpy@plt>
   1a0d8:	ldr	r3, [r4, #12]
   1a0dc:	add	r5, r5, sl
   1a0e0:	add	sl, r3, sl
   1a0e4:	str	sl, [r4, #12]
   1a0e8:	b	1a084 <__assert_fail@plt+0x82bc>
   1a0ec:	mov	r0, r4
   1a0f0:	bl	19c10 <__assert_fail@plt+0x7e48>
   1a0f4:	subs	r6, r0, #0
   1a0f8:	bne	1a084 <__assert_fail@plt+0x82bc>
   1a0fc:	ldr	ip, [r4, #4]
   1a100:	ldr	r0, [r4, #12]
   1a104:	b	1a0ac <__assert_fail@plt+0x82e4>
   1a108:	str	r5, [r8]
   1a10c:	mov	r0, r6
   1a110:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a114:	push	{r3, r4, r5, lr}
   1a118:	subs	r4, r0, #0
   1a11c:	beq	1a160 <__assert_fail@plt+0x8398>
   1a120:	ldr	r0, [r4]
   1a124:	cmp	r0, #0
   1a128:	beq	1a13c <__assert_fail@plt+0x8374>
   1a12c:	bl	11930 <fflush@plt>
   1a130:	ldr	r3, [r4, #4]
   1a134:	cmp	r3, #0
   1a138:	beq	1a150 <__assert_fail@plt+0x8388>
   1a13c:	mov	r5, #0
   1a140:	mov	r0, r4
   1a144:	bl	11948 <free@plt>
   1a148:	mov	r0, r5
   1a14c:	pop	{r3, r4, r5, pc}
   1a150:	ldr	r0, [r4]
   1a154:	bl	11cc0 <fclose@plt>
   1a158:	mov	r5, r0
   1a15c:	b	1a140 <__assert_fail@plt+0x8378>
   1a160:	mov	r5, r4
   1a164:	mov	r0, r5
   1a168:	pop	{r3, r4, r5, pc}
   1a16c:	ldr	r3, [r0]
   1a170:	push	{r4, lr}
   1a174:	cmp	r3, #0
   1a178:	mov	r4, r2
   1a17c:	beq	1a19c <__assert_fail@plt+0x83d4>
   1a180:	mov	r0, r1
   1a184:	mov	r1, #1
   1a188:	bl	11a80 <fwrite@plt>
   1a18c:	cmp	r4, r0
   1a190:	popeq	{r4, pc}
   1a194:	mvn	r0, #0
   1a198:	pop	{r4, pc}
   1a19c:	mov	r0, r2
   1a1a0:	pop	{r4, pc}
   1a1a4:	ldr	r3, [r0]
   1a1a8:	push	{r4, lr}
   1a1ac:	cmp	r3, #0
   1a1b0:	mov	r4, r0
   1a1b4:	beq	1a1d0 <__assert_fail@plt+0x8408>
   1a1b8:	mov	r0, r1
   1a1bc:	mov	r1, #1
   1a1c0:	bl	11ab0 <fread@plt>
   1a1c4:	cmp	r0, #0
   1a1c8:	popne	{r4, pc}
   1a1cc:	ldr	r3, [r4]
   1a1d0:	mov	r0, r3
   1a1d4:	bl	11960 <ferror@plt>
   1a1d8:	subs	r0, r0, #0
   1a1dc:	mvnne	r0, #0
   1a1e0:	pop	{r4, pc}
   1a1e4:	push	{r3, r4, r5, lr}
   1a1e8:	mov	r4, r0
   1a1ec:	ldr	r0, [r0, #36]	; 0x24
   1a1f0:	movw	r5, #8280	; 0x2058
   1a1f4:	mov	r3, r2
   1a1f8:	mov	ip, #0
   1a1fc:	mov	r2, r1
   1a200:	mov	r1, r4
   1a204:	str	ip, [r0, r5]
   1a208:	movw	r0, #44620	; 0xae4c
   1a20c:	movt	r0, #1
   1a210:	bl	1d1f0 <__assert_fail@plt+0xb428>
   1a214:	cmp	r0, #0
   1a218:	ldreq	r3, [r4, #36]	; 0x24
   1a21c:	ldreq	r0, [r3, r5]
   1a220:	mvnne	r0, #0
   1a224:	pop	{r3, r4, r5, pc}
   1a228:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a22c:	movw	r6, #44624	; 0xae50
   1a230:	movt	r6, #3
   1a234:	ldrb	ip, [r0, #32]
   1a238:	mov	r5, r2
   1a23c:	sub	sp, sp, #12
   1a240:	ldr	r2, [r6]
   1a244:	tst	ip, #1
   1a248:	mov	r8, #0
   1a24c:	mov	fp, r0
   1a250:	mov	r4, r1
   1a254:	mov	r7, r3
   1a258:	str	r8, [sp]
   1a25c:	str	r2, [sp, #4]
   1a260:	bne	1a38c <__assert_fail@plt+0x85c4>
   1a264:	cmp	r5, #0
   1a268:	beq	1a3b8 <__assert_fail@plt+0x85f0>
   1a26c:	ldr	r3, [fp, #28]
   1a270:	cmp	r3, #0
   1a274:	beq	1a3c0 <__assert_fail@plt+0x85f8>
   1a278:	ldr	r2, [fp, #20]
   1a27c:	mov	r8, #0
   1a280:	add	r2, r2, r3
   1a284:	b	1a290 <__assert_fail@plt+0x84c8>
   1a288:	cmp	r3, #0
   1a28c:	beq	1a2ac <__assert_fail@plt+0x84e4>
   1a290:	ldrb	r1, [r2, #-1]!
   1a294:	sub	r3, r3, #1
   1a298:	str	r3, [fp, #28]
   1a29c:	strb	r1, [r4, r8]
   1a2a0:	add	r8, r8, #1
   1a2a4:	cmp	r8, r5
   1a2a8:	bne	1a288 <__assert_fail@plt+0x84c0>
   1a2ac:	ldr	ip, [fp, #36]	; 0x24
   1a2b0:	movw	r3, #8260	; 0x2044
   1a2b4:	ldr	r3, [ip, r3]
   1a2b8:	cmp	r3, #1
   1a2bc:	beq	1a374 <__assert_fail@plt+0x85ac>
   1a2c0:	cmp	r3, #2
   1a2c4:	beq	1a2fc <__assert_fail@plt+0x8534>
   1a2c8:	cmp	r3, #0
   1a2cc:	movne	r0, #0
   1a2d0:	beq	1a374 <__assert_fail@plt+0x85ac>
   1a2d4:	cmp	r7, #0
   1a2d8:	ldr	r2, [sp, #4]
   1a2dc:	ldrne	r3, [sp]
   1a2e0:	addne	r8, r8, r3
   1a2e4:	ldr	r3, [r6]
   1a2e8:	strne	r8, [r7]
   1a2ec:	cmp	r2, r3
   1a2f0:	bne	1a3dc <__assert_fail@plt+0x8614>
   1a2f4:	add	sp, sp, #12
   1a2f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a2fc:	subs	sl, r5, r8
   1a300:	movw	r2, #8240	; 0x2030
   1a304:	add	r4, r4, r8
   1a308:	ldr	r5, [ip, r2]
   1a30c:	beq	1a3c8 <__assert_fail@plt+0x8600>
   1a310:	mov	r9, #0
   1a314:	b	1a330 <__assert_fail@plt+0x8568>
   1a318:	cmp	r0, #0
   1a31c:	beq	1a34c <__assert_fail@plt+0x8584>
   1a320:	add	r9, r9, r0
   1a324:	ldr	ip, [fp, #36]	; 0x24
   1a328:	cmp	sl, r9
   1a32c:	beq	1a3a8 <__assert_fail@plt+0x85e0>
   1a330:	movw	r3, #8212	; 0x2014
   1a334:	add	r1, r4, r9
   1a338:	ldr	r0, [ip, r3]
   1a33c:	rsb	r2, r9, sl
   1a340:	blx	r5
   1a344:	cmn	r0, #1
   1a348:	bne	1a318 <__assert_fail@plt+0x8550>
   1a34c:	ldr	ip, [fp, #36]	; 0x24
   1a350:	mov	r4, r9
   1a354:	mov	r5, #0
   1a358:	movw	r1, #8232	; 0x2028
   1a35c:	str	r9, [sp]
   1a360:	ldrd	r2, [ip, r1]
   1a364:	adds	r2, r2, r4
   1a368:	adc	r3, r3, r5
   1a36c:	strd	r2, [ip, r1]
   1a370:	b	1a2d4 <__assert_fail@plt+0x850c>
   1a374:	mov	r0, fp
   1a378:	add	r1, r4, r8
   1a37c:	rsb	r2, r8, r5
   1a380:	mov	r3, sp
   1a384:	bl	19fc0 <__assert_fail@plt+0x81f8>
   1a388:	b	1a2d4 <__assert_fail@plt+0x850c>
   1a38c:	bl	19c10 <__assert_fail@plt+0x7e48>
   1a390:	cmp	r0, #0
   1a394:	bne	1a2d4 <__assert_fail@plt+0x850c>
   1a398:	ldrb	r3, [fp, #32]
   1a39c:	bfi	r3, r0, #0, #1
   1a3a0:	strb	r3, [fp, #32]
   1a3a4:	b	1a264 <__assert_fail@plt+0x849c>
   1a3a8:	mov	r4, r9
   1a3ac:	mov	r5, #0
   1a3b0:	mov	r0, #0
   1a3b4:	b	1a358 <__assert_fail@plt+0x8590>
   1a3b8:	mov	r8, r5
   1a3bc:	b	1a2ac <__assert_fail@plt+0x84e4>
   1a3c0:	mov	r8, r3
   1a3c4:	b	1a2ac <__assert_fail@plt+0x84e4>
   1a3c8:	mov	r9, sl
   1a3cc:	mov	r4, #0
   1a3d0:	mov	r5, #0
   1a3d4:	mov	r0, sl
   1a3d8:	b	1a358 <__assert_fail@plt+0x8590>
   1a3dc:	bl	119d8 <__stack_chk_fail@plt>
   1a3e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a3e4:	mov	r4, r0
   1a3e8:	ldr	ip, [r4]
   1a3ec:	movw	r0, #8244	; 0x2034
   1a3f0:	mov	sl, r2
   1a3f4:	adds	r2, r2, #0
   1a3f8:	mov	r8, r1
   1a3fc:	mov	r7, r3
   1a400:	ldr	r5, [ip, r0]
   1a404:	movne	r2, #1
   1a408:	cmp	r5, #0
   1a40c:	movne	r6, #0
   1a410:	andeq	r6, r2, #1
   1a414:	cmp	r6, #0
   1a418:	beq	1a424 <__assert_fail@plt+0x865c>
   1a41c:	mov	r0, #95	; 0x5f
   1a420:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a424:	cmp	r2, #0
   1a428:	beq	1a494 <__assert_fail@plt+0x86cc>
   1a42c:	movw	r9, #8212	; 0x2014
   1a430:	b	1a444 <__assert_fail@plt+0x867c>
   1a434:	add	r6, r6, r0
   1a438:	ldr	ip, [r4]
   1a43c:	cmp	sl, r6
   1a440:	beq	1a484 <__assert_fail@plt+0x86bc>
   1a444:	ldr	r0, [ip, r9]
   1a448:	add	r1, r8, r6
   1a44c:	rsb	r2, r6, sl
   1a450:	blx	r5
   1a454:	cmn	r0, #1
   1a458:	bne	1a434 <__assert_fail@plt+0x866c>
   1a45c:	ldr	ip, [r4]
   1a460:	mov	r5, #0
   1a464:	mov	r4, r6
   1a468:	movw	r1, #8232	; 0x2028
   1a46c:	ldrd	r2, [ip, r1]
   1a470:	adds	r2, r2, r4
   1a474:	adc	r3, r3, r5
   1a478:	strd	r2, [ip, r1]
   1a47c:	str	r6, [r7]
   1a480:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a484:	mov	r4, r6
   1a488:	mov	r5, #0
   1a48c:	mov	r0, #0
   1a490:	b	1a468 <__assert_fail@plt+0x86a0>
   1a494:	mov	r6, r2
   1a498:	mov	r4, #0
   1a49c:	mov	r5, #0
   1a4a0:	mov	r0, r2
   1a4a4:	b	1a468 <__assert_fail@plt+0x86a0>
   1a4a8:	push	{r4, lr}
   1a4ac:	ldrb	r3, [r0]
   1a4b0:	cmp	r3, #114	; 0x72
   1a4b4:	beq	1a534 <__assert_fail@plt+0x876c>
   1a4b8:	cmp	r3, #119	; 0x77
   1a4bc:	beq	1a4e8 <__assert_fail@plt+0x8720>
   1a4c0:	cmp	r3, #97	; 0x61
   1a4c4:	moveq	ip, #1088	; 0x440
   1a4c8:	moveq	r4, #1
   1a4cc:	beq	1a4f0 <__assert_fail@plt+0x8728>
   1a4d0:	bl	11bf4 <__errno_location@plt>
   1a4d4:	mvn	r3, #0
   1a4d8:	mov	r2, #22
   1a4dc:	str	r2, [r0]
   1a4e0:	mov	r0, r3
   1a4e4:	pop	{r4, pc}
   1a4e8:	mov	ip, #576	; 0x240
   1a4ec:	mov	r4, #1
   1a4f0:	ldrb	r3, [r0, #1]
   1a4f4:	add	r2, r0, #1
   1a4f8:	cmp	r3, #0
   1a4fc:	beq	1a520 <__assert_fail@plt+0x8758>
   1a500:	cmp	r3, #43	; 0x2b
   1a504:	moveq	r4, #2
   1a508:	beq	1a514 <__assert_fail@plt+0x874c>
   1a50c:	cmp	r3, #120	; 0x78
   1a510:	orreq	ip, ip, #128	; 0x80
   1a514:	ldrb	r3, [r2, #1]!
   1a518:	cmp	r3, #0
   1a51c:	bne	1a500 <__assert_fail@plt+0x8738>
   1a520:	mov	r3, #0
   1a524:	orr	ip, ip, r4
   1a528:	mov	r0, r3
   1a52c:	str	ip, [r1]
   1a530:	pop	{r4, pc}
   1a534:	mov	ip, #0
   1a538:	mov	r4, ip
   1a53c:	b	1a4f0 <__assert_fail@plt+0x8728>
   1a540:	cmp	r1, #1
   1a544:	mov	r1, r0
   1a548:	push	{r3, r4, r5, lr}
   1a54c:	bne	1a57c <__assert_fail@plt+0x87b4>
   1a550:	ldr	r5, [r0, #4]
   1a554:	mov	ip, #0
   1a558:	ldr	r0, [r0, #16]
   1a55c:	mov	r4, ip
   1a560:	str	r5, [r2]
   1a564:	str	r0, [r3]
   1a568:	str	ip, [r1, #4]
   1a56c:	str	ip, [r1, #8]
   1a570:	str	ip, [r1, #16]
   1a574:	mov	r0, r4
   1a578:	pop	{r3, r4, r5, pc}
   1a57c:	bl	11bf4 <__errno_location@plt>
   1a580:	mvn	r4, #0
   1a584:	mov	r3, #22
   1a588:	str	r3, [r0]
   1a58c:	b	1a574 <__assert_fail@plt+0x87ac>
   1a590:	push	{r4, r5, r6, r7, lr}
   1a594:	mov	r7, r1
   1a598:	ldr	r6, [r0]
   1a59c:	sub	sp, sp, #12
   1a5a0:	cmn	r6, #1
   1a5a4:	beq	1a5e8 <__assert_fail@plt+0x8820>
   1a5a8:	ldrd	r4, [r1]
   1a5ac:	mov	r0, r6
   1a5b0:	str	r2, [sp]
   1a5b4:	mov	r3, r5
   1a5b8:	mov	r2, r4
   1a5bc:	bl	11a8c <lseek64@plt>
   1a5c0:	mvn	r2, #0
   1a5c4:	mvn	r3, #0
   1a5c8:	cmp	r1, r3
   1a5cc:	cmpeq	r0, r2
   1a5d0:	strdne	r0, [r7]
   1a5d4:	movne	r6, #0
   1a5d8:	mvneq	r6, #0
   1a5dc:	mov	r0, r6
   1a5e0:	add	sp, sp, #12
   1a5e4:	pop	{r4, r5, r6, r7, pc}
   1a5e8:	bl	11bf4 <__errno_location@plt>
   1a5ec:	mov	r3, #29
   1a5f0:	str	r3, [r0]
   1a5f4:	b	1a5dc <__assert_fail@plt+0x8814>
   1a5f8:	sub	sp, sp, #8
   1a5fc:	push	{r4, r5, r6, r7, lr}
   1a600:	sub	sp, sp, #20
   1a604:	mov	r5, r0
   1a608:	mov	r0, #40	; 0x28
   1a60c:	mov	r7, r1
   1a610:	mov	r6, r2
   1a614:	str	r3, [sp, #44]	; 0x2c
   1a618:	bl	11aec <malloc@plt>
   1a61c:	subs	r4, r0, #0
   1a620:	beq	1a6dc <__assert_fail@plt+0x8914>
   1a624:	movw	r0, #8288	; 0x2060
   1a628:	bl	11aec <malloc@plt>
   1a62c:	cmp	r0, #0
   1a630:	beq	1a6cc <__assert_fail@plt+0x8904>
   1a634:	add	ip, sp, #48	; 0x30
   1a638:	str	r0, [r4]
   1a63c:	str	r0, [r4, #36]	; 0x24
   1a640:	add	r3, r0, #8192	; 0x2000
   1a644:	ldm	ip, {r0, r1, r2}
   1a648:	mov	ip, #8192	; 0x2000
   1a64c:	str	r3, [r4, #20]
   1a650:	mov	r3, #16
   1a654:	str	ip, [r4, #4]
   1a658:	str	r3, [r4, #24]
   1a65c:	stm	sp, {r0, r1, r2}
   1a660:	mov	r1, r7
   1a664:	ldr	r2, [sp, #60]	; 0x3c
   1a668:	mov	r0, r4
   1a66c:	ldr	r3, [sp, #44]	; 0x2c
   1a670:	str	r2, [sp, #12]
   1a674:	mov	r2, r6
   1a678:	bl	19890 <__assert_fail@plt+0x7ac8>
   1a67c:	mov	r0, #12
   1a680:	bl	11aec <malloc@plt>
   1a684:	subs	r2, r0, #0
   1a688:	beq	1a6cc <__assert_fail@plt+0x8904>
   1a68c:	movw	r3, #44928	; 0xaf80
   1a690:	movt	r3, #3
   1a694:	str	r4, [r2]
   1a698:	ldr	r1, [r3]
   1a69c:	str	r3, [r2, #8]
   1a6a0:	cmp	r1, #0
   1a6a4:	str	r2, [r3]
   1a6a8:	str	r1, [r2, #4]
   1a6ac:	addne	r0, r2, #4
   1a6b0:	strne	r0, [r1, #8]
   1a6b4:	mov	r0, #0
   1a6b8:	str	r4, [r5]
   1a6bc:	add	sp, sp, #20
   1a6c0:	pop	{r4, r5, r6, r7, lr}
   1a6c4:	add	sp, sp, #8
   1a6c8:	bx	lr
   1a6cc:	mov	r0, r4
   1a6d0:	bl	19d44 <__assert_fail@plt+0x7f7c>
   1a6d4:	mov	r0, r4
   1a6d8:	bl	11948 <free@plt>
   1a6dc:	mvn	r0, #0
   1a6e0:	b	1a6bc <__assert_fail@plt+0x88f4>
   1a6e4:	push	{r3, r4, r5, lr}
   1a6e8:	subs	r4, r0, #0
   1a6ec:	moveq	r5, r4
   1a6f0:	beq	1a764 <__assert_fail@plt+0x899c>
   1a6f4:	movw	r3, #44928	; 0xaf80
   1a6f8:	movt	r3, #3
   1a6fc:	ldr	r0, [r3]
   1a700:	cmp	r0, #0
   1a704:	bne	1a718 <__assert_fail@plt+0x8950>
   1a708:	b	1a740 <__assert_fail@plt+0x8978>
   1a70c:	ldr	r0, [r0, #4]
   1a710:	cmp	r0, #0
   1a714:	beq	1a740 <__assert_fail@plt+0x8978>
   1a718:	ldr	r2, [r0]
   1a71c:	cmp	r4, r2
   1a720:	bne	1a70c <__assert_fail@plt+0x8944>
   1a724:	ldmib	r0, {r1, r2}
   1a728:	str	r1, [r2]
   1a72c:	ldr	r2, [r0, #4]
   1a730:	cmp	r2, #0
   1a734:	ldrne	r1, [r0, #8]
   1a738:	strne	r1, [r2, #8]
   1a73c:	bl	11948 <free@plt>
   1a740:	mov	r0, r4
   1a744:	bl	19d44 <__assert_fail@plt+0x7f7c>
   1a748:	mov	r5, r0
   1a74c:	ldr	r0, [r4, #36]	; 0x24
   1a750:	cmp	r0, #0
   1a754:	beq	1a75c <__assert_fail@plt+0x8994>
   1a758:	bl	11948 <free@plt>
   1a75c:	mov	r0, r4
   1a760:	bl	11948 <free@plt>
   1a764:	mov	r0, r5
   1a768:	pop	{r3, r4, r5, pc}
   1a76c:	push	{r4, r5, r6, r7, r8, lr}
   1a770:	subs	r5, r2, #0
   1a774:	mov	r4, r0
   1a778:	mov	r7, r1
   1a77c:	beq	1a894 <__assert_fail@plt+0x8acc>
   1a780:	ldr	r2, [r0]
   1a784:	ldr	r3, [r0, #16]
   1a788:	tst	r2, #1024	; 0x400
   1a78c:	ldr	r2, [r0, #20]
   1a790:	movne	r3, r2
   1a794:	strne	r2, [r0, #16]
   1a798:	ldr	r2, [r0, #8]
   1a79c:	cmp	r3, r2
   1a7a0:	bhi	1a8e8 <__assert_fail@plt+0x8b20>
   1a7a4:	ldrb	r1, [r0, #28]
   1a7a8:	rsb	r0, r3, r2
   1a7ac:	tst	r1, #1
   1a7b0:	beq	1a860 <__assert_fail@plt+0x8a98>
   1a7b4:	cmp	r5, r0
   1a7b8:	bls	1a904 <__assert_fail@plt+0x8b3c>
   1a7bc:	cmp	r2, #0
   1a7c0:	addne	r6, r3, r5
   1a7c4:	moveq	r6, r5
   1a7c8:	cmp	r3, r6
   1a7cc:	bhi	1a89c <__assert_fail@plt+0x8ad4>
   1a7d0:	ldr	r8, [r4, #24]
   1a7d4:	cmp	r8, #0
   1a7d8:	beq	1a7f8 <__assert_fail@plt+0x8a30>
   1a7dc:	sub	r0, r8, #1
   1a7e0:	add	r0, r0, r6
   1a7e4:	cmp	r3, r0
   1a7e8:	bhi	1a89c <__assert_fail@plt+0x8ad4>
   1a7ec:	mov	r1, r8
   1a7f0:	bl	23df0 <__assert_fail@plt+0x12028>
   1a7f4:	mul	r6, r8, r0
   1a7f8:	ldr	r3, [r4, #12]
   1a7fc:	cmp	r3, #0
   1a800:	beq	1a80c <__assert_fail@plt+0x8a44>
   1a804:	cmp	r3, r6
   1a808:	bcc	1a8b0 <__assert_fail@plt+0x8ae8>
   1a80c:	ldr	r3, [r4, #32]
   1a810:	mov	r1, r6
   1a814:	ldr	r0, [r4, #4]
   1a818:	blx	r3
   1a81c:	cmp	r0, #0
   1a820:	beq	1a8c4 <__assert_fail@plt+0x8afc>
   1a824:	ldr	r3, [r4, #16]
   1a828:	str	r0, [r4, #4]
   1a82c:	cmp	r6, r3
   1a830:	str	r6, [r4, #8]
   1a834:	bcc	1a8cc <__assert_fail@plt+0x8b04>
   1a838:	rsb	r6, r3, r6
   1a83c:	cmp	r5, r6
   1a840:	bls	1a86c <__assert_fail@plt+0x8aa4>
   1a844:	movw	r0, #30720	; 0x7800
   1a848:	movw	r1, #30660	; 0x77c4
   1a84c:	movt	r0, #2
   1a850:	movt	r1, #2
   1a854:	movw	r2, #697	; 0x2b9
   1a858:	ldr	r3, [pc, #172]	; 1a90c <__assert_fail@plt+0x8b44>
   1a85c:	bl	11dc8 <__assert_fail@plt>
   1a860:	cmp	r5, r0
   1a864:	movcs	r5, r0
   1a868:	ldr	r0, [r4, #4]
   1a86c:	add	r0, r0, r3
   1a870:	mov	r2, r5
   1a874:	mov	r1, r7
   1a878:	bl	11978 <memcpy@plt>
   1a87c:	ldr	r3, [r4, #16]
   1a880:	ldr	r2, [r4, #20]
   1a884:	add	r3, r5, r3
   1a888:	str	r3, [r4, #16]
   1a88c:	cmp	r3, r2
   1a890:	strhi	r3, [r4, #20]
   1a894:	mov	r0, r5
   1a898:	pop	{r4, r5, r6, r7, r8, pc}
   1a89c:	bl	11bf4 <__errno_location@plt>
   1a8a0:	mvn	r5, #0
   1a8a4:	mov	r3, #22
   1a8a8:	str	r3, [r0]
   1a8ac:	b	1a894 <__assert_fail@plt+0x8acc>
   1a8b0:	bl	11bf4 <__errno_location@plt>
   1a8b4:	mvn	r5, #0
   1a8b8:	mov	r3, #28
   1a8bc:	str	r3, [r0]
   1a8c0:	b	1a894 <__assert_fail@plt+0x8acc>
   1a8c4:	mvn	r5, #0
   1a8c8:	b	1a894 <__assert_fail@plt+0x8acc>
   1a8cc:	movw	r0, #30672	; 0x77d0
   1a8d0:	movw	r1, #30660	; 0x77c4
   1a8d4:	movt	r0, #2
   1a8d8:	movt	r1, #2
   1a8dc:	movw	r2, #694	; 0x2b6
   1a8e0:	ldr	r3, [pc, #36]	; 1a90c <__assert_fail@plt+0x8b44>
   1a8e4:	bl	11dc8 <__assert_fail@plt>
   1a8e8:	movw	r0, #30672	; 0x77d0
   1a8ec:	movw	r1, #30660	; 0x77c4
   1a8f0:	movt	r0, #2
   1a8f4:	movt	r1, #2
   1a8f8:	movw	r2, #643	; 0x283
   1a8fc:	ldr	r3, [pc, #8]	; 1a90c <__assert_fail@plt+0x8b44>
   1a900:	bl	11dc8 <__assert_fail@plt>
   1a904:	ldr	r0, [r4, #4]
   1a908:	b	1a86c <__assert_fail@plt+0x8aa4>
   1a90c:	andeq	r7, r2, ip, asr r7
   1a910:	ldrb	ip, [r0, #32]
   1a914:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1a918:	ands	ip, ip, #1
   1a91c:	mov	r4, r0
   1a920:	mov	r8, r1
   1a924:	mov	r5, r2
   1a928:	mov	r9, r3
   1a92c:	streq	ip, [r0, #8]
   1a930:	streq	ip, [r0, #12]
   1a934:	streq	ip, [r0, #28]
   1a938:	bne	1a9b4 <__assert_fail@plt+0x8bec>
   1a93c:	ldr	ip, [r4, #36]	; 0x24
   1a940:	movw	r7, #8272	; 0x2050
   1a944:	movw	r2, #8268	; 0x204c
   1a948:	ldrb	r1, [ip, r7]
   1a94c:	ldrb	r6, [ip, r2]
   1a950:	tst	r1, #1
   1a954:	bfc	r6, #1, #1
   1a958:	strb	r6, [ip, r2]
   1a95c:	bne	1a990 <__assert_fail@plt+0x8bc8>
   1a960:	cmp	r5, #2
   1a964:	moveq	r3, #0
   1a968:	streq	r3, [r4, #4]
   1a96c:	beq	1a97c <__assert_fail@plt+0x8bb4>
   1a970:	cmp	r8, #0
   1a974:	beq	1a9c4 <__assert_fail@plt+0x8bfc>
   1a978:	stm	r4, {r8, r9}
   1a97c:	ldr	r2, [r4, #36]	; 0x24
   1a980:	movw	r3, #8260	; 0x2044
   1a984:	mov	r0, #0
   1a988:	str	r5, [r2, r3]
   1a98c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1a990:	bfc	r1, #0, #1
   1a994:	strb	r1, [ip, r7]
   1a998:	ldr	r0, [r4]
   1a99c:	cmp	r0, #0
   1a9a0:	beq	1a9a8 <__assert_fail@plt+0x8be0>
   1a9a4:	bl	11948 <free@plt>
   1a9a8:	mov	r3, #0
   1a9ac:	str	r3, [r4]
   1a9b0:	b	1a960 <__assert_fail@plt+0x8b98>
   1a9b4:	bl	19c10 <__assert_fail@plt+0x7e48>
   1a9b8:	cmp	r0, #0
   1a9bc:	beq	1a93c <__assert_fail@plt+0x8b74>
   1a9c0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1a9c4:	cmp	r9, #0
   1a9c8:	moveq	r9, #8192	; 0x2000
   1a9cc:	mov	r0, r9
   1a9d0:	bl	11aec <malloc@plt>
   1a9d4:	cmp	r0, #0
   1a9d8:	beq	1a9f8 <__assert_fail@plt+0x8c30>
   1a9dc:	ldr	r2, [r4, #36]	; 0x24
   1a9e0:	movw	r3, #8272	; 0x2050
   1a9e4:	stm	r4, {r0, r9}
   1a9e8:	ldrb	r1, [r2, r3]
   1a9ec:	orr	r1, r1, #1
   1a9f0:	strb	r1, [r2, r3]
   1a9f4:	b	1a97c <__assert_fail@plt+0x8bb4>
   1a9f8:	mvn	r0, #0
   1a9fc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1aa00:	push	{r4, r5, r6, r7, r8, lr}
   1aa04:	movw	r6, #8224	; 0x2020
   1aa08:	ldr	r4, [r0]
   1aa0c:	mov	r5, r0
   1aa10:	mov	r7, r1
   1aa14:	mov	r8, r2
   1aa18:	ldr	r0, [r4, r6]
   1aa1c:	cmp	r0, #0
   1aa20:	beq	1aa54 <__assert_fail@plt+0x8c8c>
   1aa24:	movw	r3, #8272	; 0x2050
   1aa28:	ldrb	r4, [r4, r3]
   1aa2c:	ubfx	r4, r4, #5, #1
   1aa30:	cmp	r4, #0
   1aa34:	popne	{r4, r5, r6, r7, r8, pc}
   1aa38:	bl	11948 <free@plt>
   1aa3c:	ldr	r3, [r5]
   1aa40:	str	r4, [r3, r6]
   1aa44:	ldr	r4, [r5]
   1aa48:	ldr	r3, [r4, r6]
   1aa4c:	cmp	r3, #0
   1aa50:	popne	{r4, r5, r6, r7, r8, pc}
   1aa54:	ldrb	r3, [r7]
   1aa58:	cmp	r3, #91	; 0x5b
   1aa5c:	movne	r6, #0
   1aa60:	movne	r8, r6
   1aa64:	beq	1aab0 <__assert_fail@plt+0x8ce8>
   1aa68:	mov	r0, r7
   1aa6c:	bl	11bac <strlen@plt>
   1aa70:	add	r3, r6, r0
   1aa74:	adds	r0, r3, #1
   1aa78:	addeq	r0, r3, #2
   1aa7c:	bl	11aec <malloc@plt>
   1aa80:	cmp	r8, #0
   1aa84:	movw	r3, #8224	; 0x2020
   1aa88:	mov	r1, r7
   1aa8c:	str	r0, [r4, r3]
   1aa90:	movne	r3, #92	; 0x5c
   1aa94:	strbne	r3, [r0]
   1aa98:	movw	r3, #8224	; 0x2020
   1aa9c:	ldr	r2, [r5]
   1aaa0:	ldr	r0, [r2, r3]
   1aaa4:	add	r0, r0, r6
   1aaa8:	pop	{r4, r5, r6, r7, r8, lr}
   1aaac:	b	11aa4 <strcpy@plt>
   1aab0:	adds	r8, r8, #0
   1aab4:	movne	r8, #1
   1aab8:	mov	r6, r8
   1aabc:	b	1aa68 <__assert_fail@plt+0x8ca0>
   1aac0:	cmp	r0, #0
   1aac4:	beq	1aacc <__assert_fail@plt+0x8d04>
   1aac8:	b	11a20 <realloc@plt>
   1aacc:	cmp	r1, #0
   1aad0:	movne	r0, r1
   1aad4:	moveq	r0, #1
   1aad8:	b	11aec <malloc@plt>
   1aadc:	push	{r4, r5, r6, lr}
   1aae0:	mov	r4, r0
   1aae4:	ldr	r0, [r0]
   1aae8:	mov	r5, r1
   1aaec:	cmp	r0, #0
   1aaf0:	beq	1ab34 <__assert_fail@plt+0x8d6c>
   1aaf4:	ldr	r1, [r1]
   1aaf8:	bl	11d50 <fseek@plt>
   1aafc:	subs	r6, r0, #0
   1ab00:	bne	1ab28 <__assert_fail@plt+0x8d60>
   1ab04:	ldr	r0, [r4]
   1ab08:	bl	119a8 <ftell@plt>
   1ab0c:	cmn	r0, #1
   1ab10:	beq	1ab28 <__assert_fail@plt+0x8d60>
   1ab14:	mov	r2, r0
   1ab18:	asr	r3, r0, #31
   1ab1c:	strd	r2, [r5]
   1ab20:	mov	r0, r6
   1ab24:	pop	{r4, r5, r6, pc}
   1ab28:	mvn	r6, #0
   1ab2c:	mov	r0, r6
   1ab30:	pop	{r4, r5, r6, pc}
   1ab34:	bl	11bf4 <__errno_location@plt>
   1ab38:	mvn	r6, #0
   1ab3c:	mov	r3, #29
   1ab40:	str	r3, [r0]
   1ab44:	b	1ab20 <__assert_fail@plt+0x8d58>
   1ab48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab4c:	movw	r1, #8248	; 0x2038
   1ab50:	ldr	r8, [r0, #36]	; 0x24
   1ab54:	movw	r7, #44624	; 0xae50
   1ab58:	movt	r7, #3
   1ab5c:	mov	r5, r3
   1ab60:	sub	sp, sp, #20
   1ab64:	mov	r6, r0
   1ab68:	ldr	r9, [r8, r1]
   1ab6c:	mov	r4, r2
   1ab70:	ldr	r3, [r7]
   1ab74:	cmp	r9, #0
   1ab78:	ldr	sl, [sp, #56]	; 0x38
   1ab7c:	str	r3, [sp, #12]
   1ab80:	beq	1ac78 <__assert_fail@plt+0x8eb0>
   1ab84:	ldrb	r3, [r0, #32]
   1ab88:	tst	r3, #1
   1ab8c:	bne	1ac18 <__assert_fail@plt+0x8e50>
   1ab90:	cmp	sl, #1
   1ab94:	strd	r4, [sp]
   1ab98:	beq	1ac3c <__assert_fail@plt+0x8e74>
   1ab9c:	movw	r3, #8212	; 0x2014
   1aba0:	mov	r2, sl
   1aba4:	ldr	r0, [r8, r3]
   1aba8:	mov	r1, sp
   1abac:	blx	r9
   1abb0:	cmn	r0, #1
   1abb4:	ldreq	r8, [r6, #36]	; 0x24
   1abb8:	moveq	fp, r0
   1abbc:	beq	1ac28 <__assert_fail@plt+0x8e60>
   1abc0:	ldrb	r1, [r6, #32]
   1abc4:	ands	r1, r1, #1
   1abc8:	bne	1ac90 <__assert_fail@plt+0x8ec8>
   1abcc:	ldr	ip, [r6, #36]	; 0x24
   1abd0:	movw	r0, #8268	; 0x204c
   1abd4:	ldrd	r2, [sp]
   1abd8:	movw	r5, #8232	; 0x2028
   1abdc:	mov	fp, r1
   1abe0:	str	r1, [r6, #8]
   1abe4:	ldrb	r4, [ip, r0]
   1abe8:	str	r1, [r6, #12]
   1abec:	str	r1, [r6, #28]
   1abf0:	bfi	r4, r1, #1, #1
   1abf4:	strd	r2, [ip, r5]
   1abf8:	strb	r4, [ip, r0]
   1abfc:	ldr	r2, [sp, #12]
   1ac00:	mov	r0, fp
   1ac04:	ldr	r3, [r7]
   1ac08:	cmp	r2, r3
   1ac0c:	bne	1ac8c <__assert_fail@plt+0x8ec4>
   1ac10:	add	sp, sp, #20
   1ac14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ac18:	bl	19c10 <__assert_fail@plt+0x7e48>
   1ac1c:	ldr	r8, [r6, #36]	; 0x24
   1ac20:	subs	fp, r0, #0
   1ac24:	beq	1ac68 <__assert_fail@plt+0x8ea0>
   1ac28:	movw	r3, #8268	; 0x204c
   1ac2c:	ldrb	r2, [r8, r3]
   1ac30:	orr	r2, r2, #1
   1ac34:	strb	r2, [r8, r3]
   1ac38:	b	1abfc <__assert_fail@plt+0x8e34>
   1ac3c:	ldr	r3, [r6, #8]
   1ac40:	ldr	r2, [r6, #12]
   1ac44:	subs	r4, r4, r3
   1ac48:	sbc	r5, r5, #0
   1ac4c:	ldr	r3, [r6, #28]
   1ac50:	adds	r4, r4, r2
   1ac54:	adc	r5, r5, #0
   1ac58:	subs	r4, r4, r3
   1ac5c:	sbc	r5, r5, #0
   1ac60:	strd	r4, [sp]
   1ac64:	b	1ab9c <__assert_fail@plt+0x8dd4>
   1ac68:	ldrb	r3, [r6, #32]
   1ac6c:	bfi	r3, fp, #0, #1
   1ac70:	strb	r3, [r6, #32]
   1ac74:	b	1ab90 <__assert_fail@plt+0x8dc8>
   1ac78:	bl	11bf4 <__errno_location@plt>
   1ac7c:	mvn	fp, #0
   1ac80:	mov	r3, #95	; 0x5f
   1ac84:	str	r3, [r0]
   1ac88:	b	1ac28 <__assert_fail@plt+0x8e60>
   1ac8c:	bl	119d8 <__stack_chk_fail@plt>
   1ac90:	bl	11e0c <__assert_fail@plt+0x44>
   1ac94:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ac98:	movw	r4, #44624	; 0xae50
   1ac9c:	movt	r4, #3
   1aca0:	ldrb	ip, [r0, #32]
   1aca4:	mov	r9, r2
   1aca8:	sub	sp, sp, #24
   1acac:	ldr	r2, [r4]
   1acb0:	tst	ip, #1
   1acb4:	mov	r6, r3
   1acb8:	mov	r5, r0
   1acbc:	mov	r3, #0
   1acc0:	mov	r8, r1
   1acc4:	str	r3, [sp, #8]
   1acc8:	str	r2, [sp, #20]
   1accc:	ldr	r3, [r0, #36]	; 0x24
   1acd0:	bne	1ad14 <__assert_fail@plt+0x8f4c>
   1acd4:	movw	r2, #8248	; 0x2038
   1acd8:	ldr	r2, [r3, r2]
   1acdc:	cmp	r2, #0
   1ace0:	beq	1ad14 <__assert_fail@plt+0x8f4c>
   1ace4:	mov	r1, #1
   1ace8:	mov	r2, #0
   1acec:	mov	r3, #0
   1acf0:	str	r1, [sp]
   1acf4:	bl	1ab48 <__assert_fail@plt+0x8d80>
   1acf8:	subs	r7, r0, #0
   1acfc:	beq	1ad10 <__assert_fail@plt+0x8f48>
   1ad00:	bl	11bf4 <__errno_location@plt>
   1ad04:	ldr	r3, [r0]
   1ad08:	cmp	r3, #29
   1ad0c:	bne	1adf8 <__assert_fail@plt+0x9030>
   1ad10:	ldr	r3, [r5, #36]	; 0x24
   1ad14:	movw	r2, #8260	; 0x2044
   1ad18:	ldr	r3, [r3, r2]
   1ad1c:	cmp	r3, #1
   1ad20:	beq	1ad98 <__assert_fail@plt+0x8fd0>
   1ad24:	cmp	r3, #2
   1ad28:	beq	1ad78 <__assert_fail@plt+0x8fb0>
   1ad2c:	cmp	r3, #0
   1ad30:	beq	1ade0 <__assert_fail@plt+0x9018>
   1ad34:	ldr	r2, [sp, #8]
   1ad38:	mov	r7, #0
   1ad3c:	cmp	r6, #0
   1ad40:	strne	r2, [r6]
   1ad44:	cmp	r2, #0
   1ad48:	beq	1ad5c <__assert_fail@plt+0x8f94>
   1ad4c:	ldrb	r3, [r5, #32]
   1ad50:	tst	r3, #1
   1ad54:	orreq	r3, r3, #1
   1ad58:	strbeq	r3, [r5, #32]
   1ad5c:	ldr	r2, [sp, #20]
   1ad60:	mov	r0, r7
   1ad64:	ldr	r3, [r4]
   1ad68:	cmp	r2, r3
   1ad6c:	bne	1ae48 <__assert_fail@plt+0x9080>
   1ad70:	add	sp, sp, #24
   1ad74:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ad78:	mov	r2, r9
   1ad7c:	mov	r1, r8
   1ad80:	add	r0, r5, #36	; 0x24
   1ad84:	add	r3, sp, #8
   1ad88:	bl	1a3e0 <__assert_fail@plt+0x8618>
   1ad8c:	ldr	r2, [sp, #8]
   1ad90:	mov	r7, r0
   1ad94:	b	1ad3c <__assert_fail@plt+0x8f74>
   1ad98:	mov	r0, r8
   1ad9c:	mov	r1, #10
   1ada0:	mov	r2, r9
   1ada4:	mov	r3, #0
   1ada8:	str	r3, [sp, #12]
   1adac:	str	r3, [sp, #16]
   1adb0:	bl	11bd0 <memrchr@plt>
   1adb4:	subs	sl, r0, #0
   1adb8:	beq	1ae00 <__assert_fail@plt+0x9038>
   1adbc:	mov	r0, r5
   1adc0:	bl	19c10 <__assert_fail@plt+0x7e48>
   1adc4:	subs	r7, r0, #0
   1adc8:	beq	1ae20 <__assert_fail@plt+0x9058>
   1adcc:	ldr	r2, [sp, #16]
   1add0:	ldr	r3, [sp, #12]
   1add4:	add	r2, r2, r3
   1add8:	str	r2, [sp, #8]
   1addc:	b	1ad3c <__assert_fail@plt+0x8f74>
   1ade0:	mov	r1, r8
   1ade4:	mov	r2, r9
   1ade8:	mov	r0, r5
   1adec:	add	r3, sp, #8
   1adf0:	bl	1a068 <__assert_fail@plt+0x82a0>
   1adf4:	mov	r7, r0
   1adf8:	ldr	r2, [sp, #8]
   1adfc:	b	1ad3c <__assert_fail@plt+0x8f74>
   1ae00:	mov	r2, sl
   1ae04:	add	r1, r8, r2
   1ae08:	mov	r0, r5
   1ae0c:	rsb	r2, r2, r9
   1ae10:	add	r3, sp, #16
   1ae14:	bl	1a068 <__assert_fail@plt+0x82a0>
   1ae18:	mov	r7, r0
   1ae1c:	b	1adcc <__assert_fail@plt+0x9004>
   1ae20:	rsb	r2, r8, sl
   1ae24:	add	r0, r5, #36	; 0x24
   1ae28:	add	r2, r2, #1
   1ae2c:	mov	r1, r8
   1ae30:	add	r3, sp, #12
   1ae34:	bl	1a3e0 <__assert_fail@plt+0x8618>
   1ae38:	subs	r7, r0, #0
   1ae3c:	bne	1adcc <__assert_fail@plt+0x9004>
   1ae40:	ldr	r2, [sp, #12]
   1ae44:	b	1ae04 <__assert_fail@plt+0x903c>
   1ae48:	bl	119d8 <__stack_chk_fail@plt>
   1ae4c:	push	{r4, r5, lr}
   1ae50:	movw	r4, #44624	; 0xae50
   1ae54:	movt	r4, #3
   1ae58:	sub	sp, sp, #12
   1ae5c:	add	r3, sp, #8
   1ae60:	mov	r5, r0
   1ae64:	ldr	ip, [r4]
   1ae68:	mov	lr, #0
   1ae6c:	str	lr, [r3, #-8]!
   1ae70:	mov	r3, sp
   1ae74:	str	ip, [sp, #4]
   1ae78:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1ae7c:	ldr	r2, [r5, #36]	; 0x24
   1ae80:	movw	r3, #8280	; 0x2058
   1ae84:	ldr	r5, [sp, #4]
   1ae88:	ldr	r4, [r4]
   1ae8c:	ldr	r1, [r2, r3]
   1ae90:	ldr	ip, [sp]
   1ae94:	cmp	r5, r4
   1ae98:	add	r1, ip, r1
   1ae9c:	str	r1, [r2, r3]
   1aea0:	bne	1aeac <__assert_fail@plt+0x90e4>
   1aea4:	add	sp, sp, #12
   1aea8:	pop	{r4, r5, pc}
   1aeac:	bl	119d8 <__stack_chk_fail@plt>
   1aeb0:	mov	r0, #0
   1aeb4:	bx	lr
   1aeb8:	push	{r3, lr}
   1aebc:	movw	r3, #44928	; 0xaf80
   1aec0:	movt	r3, #3
   1aec4:	ldr	r2, [r3, #4]
   1aec8:	cmp	r2, #0
   1aecc:	bne	1aee4 <__assert_fail@plt+0x911c>
   1aed0:	movw	r0, #48072	; 0xbbc8
   1aed4:	movt	r0, #1
   1aed8:	mov	r2, #1
   1aedc:	str	r2, [r3, #4]
   1aee0:	bl	24c24 <__assert_fail@plt+0x12e5c>
   1aee4:	mov	r0, #0
   1aee8:	pop	{r3, pc}
   1aeec:	push	{r4, r5, r6, lr}
   1aef0:	movw	r4, #44624	; 0xae50
   1aef4:	movt	r4, #3
   1aef8:	sub	sp, sp, #40	; 0x28
   1aefc:	mov	r5, r0
   1af00:	mov	r0, r1
   1af04:	ldr	ip, [r4]
   1af08:	add	r1, sp, #20
   1af0c:	mov	r3, #0
   1af10:	str	r3, [sp, #24]
   1af14:	str	r3, [sp, #28]
   1af18:	str	ip, [sp, #36]	; 0x24
   1af1c:	bl	1a4a8 <__assert_fail@plt+0x86e0>
   1af20:	cmp	r0, #0
   1af24:	beq	1af44 <__assert_fail@plt+0x917c>
   1af28:	ldr	r0, [sp, #24]
   1af2c:	ldr	r2, [sp, #36]	; 0x24
   1af30:	ldr	r3, [r4]
   1af34:	cmp	r2, r3
   1af38:	bne	1afd8 <__assert_fail@plt+0x9210>
   1af3c:	add	sp, sp, #40	; 0x28
   1af40:	pop	{r4, r5, r6, pc}
   1af44:	add	r0, sp, #28
   1af48:	add	r1, sp, #32
   1af4c:	mov	r2, r5
   1af50:	ldr	r3, [sp, #20]
   1af54:	bl	19b9c <__assert_fail@plt+0x7dd4>
   1af58:	cmp	r0, #0
   1af5c:	bne	1af28 <__assert_fail@plt+0x9160>
   1af60:	movw	r3, #30544	; 0x7750
   1af64:	movt	r3, #2
   1af68:	add	r0, r3, #48	; 0x30
   1af6c:	ldr	r6, [sp, #28]
   1af70:	ldr	lr, [sp, #32]
   1af74:	ldm	r0, {r0, r1, r2}
   1af78:	ldr	ip, [sp, #20]
   1af7c:	ldr	r3, [r3, #44]	; 0x2c
   1af80:	stm	sp, {r0, r1, r2}
   1af84:	mov	r1, r6
   1af88:	mov	r2, lr
   1af8c:	str	ip, [sp, #12]
   1af90:	add	r0, sp, #24
   1af94:	bl	1a5f8 <__assert_fail@plt+0x8830>
   1af98:	cmp	r0, #0
   1af9c:	bne	1afcc <__assert_fail@plt+0x9204>
   1afa0:	ldr	r0, [sp, #24]
   1afa4:	cmp	r0, #0
   1afa8:	beq	1af2c <__assert_fail@plt+0x9164>
   1afac:	cmp	r5, #0
   1afb0:	beq	1af2c <__assert_fail@plt+0x9164>
   1afb4:	add	r0, r0, #36	; 0x24
   1afb8:	mov	r1, r5
   1afbc:	mov	r2, #1
   1afc0:	bl	1aa00 <__assert_fail@plt+0x8c38>
   1afc4:	ldr	r0, [sp, #24]
   1afc8:	b	1af2c <__assert_fail@plt+0x9164>
   1afcc:	ldr	r0, [sp, #28]
   1afd0:	bl	199cc <__assert_fail@plt+0x7c04>
   1afd4:	b	1af28 <__assert_fail@plt+0x9160>
   1afd8:	bl	119d8 <__stack_chk_fail@plt>
   1afdc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1afe0:	sub	sp, sp, #44	; 0x2c
   1afe4:	movw	r4, #44624	; 0xae50
   1afe8:	movt	r4, #3
   1afec:	ldr	lr, [sp, #88]	; 0x58
   1aff0:	mov	r6, r0
   1aff4:	ldr	ip, [r4]
   1aff8:	mov	sl, r1
   1affc:	add	r1, sp, #28
   1b000:	mov	r9, r2
   1b004:	mov	r0, lr
   1b008:	mov	fp, r3
   1b00c:	str	ip, [sp, #36]	; 0x24
   1b010:	mov	r3, #0
   1b014:	ldr	r8, [sp, #80]	; 0x50
   1b018:	str	r3, [sp, #32]
   1b01c:	ldr	r7, [sp, #84]	; 0x54
   1b020:	bl	1a4a8 <__assert_fail@plt+0x86e0>
   1b024:	cmp	r0, #0
   1b028:	beq	1b048 <__assert_fail@plt+0x9280>
   1b02c:	ldr	r2, [sp, #36]	; 0x24
   1b030:	ldr	r3, [r4]
   1b034:	ldr	r0, [sp, #32]
   1b038:	cmp	r2, r3
   1b03c:	bne	1b130 <__assert_fail@plt+0x9368>
   1b040:	add	sp, sp, #44	; 0x2c
   1b044:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b048:	ldr	r2, [sp, #28]
   1b04c:	cmp	r6, #0
   1b050:	str	r2, [sp, #20]
   1b054:	beq	1b118 <__assert_fail@plt+0x9350>
   1b058:	mov	r0, #40	; 0x28
   1b05c:	bl	11aec <malloc@plt>
   1b060:	subs	r5, r0, #0
   1b064:	beq	1b02c <__assert_fail@plt+0x9264>
   1b068:	adds	fp, fp, #0
   1b06c:	movw	r3, #30544	; 0x7750
   1b070:	movt	r3, #2
   1b074:	ldrb	lr, [r5, #28]
   1b078:	movne	fp, #1
   1b07c:	str	fp, [sp, #16]
   1b080:	ldr	fp, [sp, #20]
   1b084:	add	r2, r3, #64	; 0x40
   1b088:	cmp	r8, #0
   1b08c:	movw	ip, #43712	; 0xaac0
   1b090:	ldm	r2, {r0, r1, r2}
   1b094:	movt	ip, #1
   1b098:	str	fp, [r5]
   1b09c:	ldr	fp, [sp, #16]
   1b0a0:	moveq	r8, ip
   1b0a4:	str	r6, [r5, #4]
   1b0a8:	cmp	r7, #0
   1b0ac:	bfi	lr, fp, #0, #1
   1b0b0:	ldr	fp, [sp, #20]
   1b0b4:	movw	r6, #39360	; 0x99c0
   1b0b8:	movt	r6, #1
   1b0bc:	strb	lr, [r5, #28]
   1b0c0:	mov	ip, #8192	; 0x2000
   1b0c4:	str	sl, [r5, #8]
   1b0c8:	moveq	r7, r6
   1b0cc:	str	r9, [r5, #20]
   1b0d0:	mov	lr, #0
   1b0d4:	str	r8, [r5, #32]
   1b0d8:	str	r7, [r5, #36]	; 0x24
   1b0dc:	str	lr, [r5, #12]
   1b0e0:	str	lr, [r5, #16]
   1b0e4:	str	ip, [r5, #24]
   1b0e8:	ldr	r3, [r3, #60]	; 0x3c
   1b0ec:	stm	sp, {r0, r1, r2}
   1b0f0:	add	r0, sp, #32
   1b0f4:	str	fp, [sp, #12]
   1b0f8:	mov	r1, r5
   1b0fc:	mvn	r2, #0
   1b100:	bl	1a5f8 <__assert_fail@plt+0x8830>
   1b104:	cmp	r0, #0
   1b108:	beq	1b02c <__assert_fail@plt+0x9264>
   1b10c:	mov	r0, r5
   1b110:	bl	19a1c <__assert_fail@plt+0x7c54>
   1b114:	b	1b02c <__assert_fail@plt+0x9264>
   1b118:	orrs	r3, sl, r9
   1b11c:	beq	1b058 <__assert_fail@plt+0x9290>
   1b120:	bl	11bf4 <__errno_location@plt>
   1b124:	mov	r3, #22
   1b128:	str	r3, [r0]
   1b12c:	b	1b02c <__assert_fail@plt+0x9264>
   1b130:	bl	119d8 <__stack_chk_fail@plt>
   1b134:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b138:	movw	r5, #44624	; 0xae50
   1b13c:	movt	r5, #3
   1b140:	sub	sp, sp, #36	; 0x24
   1b144:	mov	r8, r0
   1b148:	mov	r0, r1
   1b14c:	ldr	r3, [r5]
   1b150:	add	r1, sp, #20
   1b154:	mov	r2, #0
   1b158:	str	r2, [sp, #24]
   1b15c:	str	r3, [sp, #28]
   1b160:	bl	1a4a8 <__assert_fail@plt+0x86e0>
   1b164:	subs	r6, r0, #0
   1b168:	bne	1b234 <__assert_fail@plt+0x946c>
   1b16c:	ldr	r7, [sp, #20]
   1b170:	mov	r0, #40	; 0x28
   1b174:	orr	r7, r7, #2
   1b178:	str	r7, [sp, #20]
   1b17c:	bl	11aec <malloc@plt>
   1b180:	subs	r4, r0, #0
   1b184:	beq	1b234 <__assert_fail@plt+0x946c>
   1b188:	movw	r3, #30544	; 0x7750
   1b18c:	movt	r3, #2
   1b190:	add	r2, r3, #64	; 0x40
   1b194:	ldrb	r9, [r4, #28]
   1b198:	str	r8, [r4, #12]
   1b19c:	movw	lr, #43712	; 0xaac0
   1b1a0:	ldm	r2, {r0, r1, r2}
   1b1a4:	movt	lr, #1
   1b1a8:	str	r7, [r4]
   1b1ac:	orr	r9, r9, #1
   1b1b0:	str	r6, [r4, #4]
   1b1b4:	movw	ip, #39360	; 0x99c0
   1b1b8:	str	r6, [r4, #8]
   1b1bc:	movt	ip, #1
   1b1c0:	str	r6, [r4, #16]
   1b1c4:	mov	r8, #8192	; 0x2000
   1b1c8:	str	r6, [r4, #20]
   1b1cc:	strb	r9, [r4, #28]
   1b1d0:	str	lr, [r4, #32]
   1b1d4:	str	ip, [r4, #36]	; 0x24
   1b1d8:	str	r8, [r4, #24]
   1b1dc:	ldr	r3, [r3, #60]	; 0x3c
   1b1e0:	stm	sp, {r0, r1, r2}
   1b1e4:	add	r0, sp, #24
   1b1e8:	str	r7, [sp, #12]
   1b1ec:	mov	r1, r4
   1b1f0:	mvn	r2, #0
   1b1f4:	bl	1a5f8 <__assert_fail@plt+0x8830>
   1b1f8:	cmp	r0, #0
   1b1fc:	bne	1b23c <__assert_fail@plt+0x9474>
   1b200:	ldr	r0, [sp, #24]
   1b204:	cmp	r0, #0
   1b208:	ldrne	r1, [r0, #36]	; 0x24
   1b20c:	movwne	r2, #8252	; 0x203c
   1b210:	movwne	r3, #42304	; 0xa540
   1b214:	movtne	r3, #1
   1b218:	strne	r3, [r1, r2]
   1b21c:	ldr	r2, [sp, #28]
   1b220:	ldr	r3, [r5]
   1b224:	cmp	r2, r3
   1b228:	bne	1b248 <__assert_fail@plt+0x9480>
   1b22c:	add	sp, sp, #36	; 0x24
   1b230:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b234:	mov	r0, #0
   1b238:	b	1b21c <__assert_fail@plt+0x9454>
   1b23c:	mov	r0, r4
   1b240:	bl	19a1c <__assert_fail@plt+0x7c54>
   1b244:	b	1b200 <__assert_fail@plt+0x9438>
   1b248:	bl	119d8 <__stack_chk_fail@plt>
   1b24c:	cmp	r0, #0
   1b250:	cmpne	r0, r3
   1b254:	push	{r4, r5, r6, lr}
   1b258:	movcc	r0, r3
   1b25c:	sub	sp, sp, #8
   1b260:	mov	r6, r2
   1b264:	mov	r4, r3
   1b268:	bl	1b134 <__assert_fail@plt+0x936c>
   1b26c:	cmp	r0, #0
   1b270:	cmpne	r6, #0
   1b274:	mov	r5, r0
   1b278:	beq	1b284 <__assert_fail@plt+0x94bc>
   1b27c:	cmp	r4, #0
   1b280:	bne	1b290 <__assert_fail@plt+0x94c8>
   1b284:	mov	r0, r5
   1b288:	add	sp, sp, #8
   1b28c:	pop	{r4, r5, r6, pc}
   1b290:	mov	r2, r4
   1b294:	mov	r1, r6
   1b298:	mov	r3, #0
   1b29c:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1b2a0:	subs	r4, r0, #0
   1b2a4:	bne	1b2e0 <__assert_fail@plt+0x9518>
   1b2a8:	str	r4, [sp]
   1b2ac:	mov	r0, r5
   1b2b0:	mov	r2, #0
   1b2b4:	mov	r3, #0
   1b2b8:	bl	1ab48 <__assert_fail@plt+0x8d80>
   1b2bc:	ldr	r2, [r5, #36]	; 0x24
   1b2c0:	movw	r3, #8268	; 0x204c
   1b2c4:	mov	r0, r5
   1b2c8:	ldrb	r1, [r2, r3]
   1b2cc:	bfi	r1, r4, #0, #1
   1b2d0:	bfi	r1, r4, #1, #1
   1b2d4:	strb	r1, [r2, r3]
   1b2d8:	add	sp, sp, #8
   1b2dc:	pop	{r4, r5, r6, pc}
   1b2e0:	bl	11bf4 <__errno_location@plt>
   1b2e4:	ldr	r6, [r0]
   1b2e8:	mov	r4, r0
   1b2ec:	mov	r0, r5
   1b2f0:	mov	r5, #0
   1b2f4:	bl	1a6e4 <__assert_fail@plt+0x891c>
   1b2f8:	str	r6, [r4]
   1b2fc:	b	1b284 <__assert_fail@plt+0x94bc>
   1b300:	sub	sp, sp, #8
   1b304:	push	{r4, r5, r6, lr}
   1b308:	movw	r4, #44624	; 0xae50
   1b30c:	sub	sp, sp, #32
   1b310:	movt	r4, #3
   1b314:	add	ip, sp, #32
   1b318:	mov	lr, #0
   1b31c:	ldr	r5, [r4]
   1b320:	mov	r6, r0
   1b324:	str	lr, [ip, #-12]!
   1b328:	mov	r0, r1
   1b32c:	mov	r1, ip
   1b330:	add	ip, sp, #44	; 0x2c
   1b334:	str	r5, [sp, #28]
   1b338:	stmib	ip, {r2, r3}
   1b33c:	str	lr, [sp, #24]
   1b340:	bl	1a4a8 <__assert_fail@plt+0x86e0>
   1b344:	cmp	r0, #0
   1b348:	bne	1b374 <__assert_fail@plt+0x95ac>
   1b34c:	add	r2, sp, #52	; 0x34
   1b350:	ldr	ip, [sp, #20]
   1b354:	ldr	r3, [sp, #48]	; 0x30
   1b358:	ldm	r2, {r0, r1, r2}
   1b35c:	str	ip, [sp, #12]
   1b360:	stm	sp, {r0, r1, r2}
   1b364:	mov	r1, r6
   1b368:	add	r0, sp, #24
   1b36c:	mvn	r2, #0
   1b370:	bl	1a5f8 <__assert_fail@plt+0x8830>
   1b374:	ldr	r2, [sp, #28]
   1b378:	ldr	r3, [r4]
   1b37c:	ldr	r0, [sp, #24]
   1b380:	cmp	r2, r3
   1b384:	bne	1b398 <__assert_fail@plt+0x95d0>
   1b388:	add	sp, sp, #32
   1b38c:	pop	{r4, r5, r6, lr}
   1b390:	add	sp, sp, #8
   1b394:	bx	lr
   1b398:	bl	119d8 <__stack_chk_fail@plt>
   1b39c:	push	{r4, r5, r6, r7, lr}
   1b3a0:	movw	r4, #44624	; 0xae50
   1b3a4:	movt	r4, #3
   1b3a8:	sub	sp, sp, #36	; 0x24
   1b3ac:	mov	r5, r0
   1b3b0:	mov	r0, r1
   1b3b4:	ldr	r3, [r4]
   1b3b8:	add	r1, sp, #20
   1b3bc:	mov	ip, #0
   1b3c0:	mov	r7, r2
   1b3c4:	str	ip, [sp, #24]
   1b3c8:	str	r3, [sp, #28]
   1b3cc:	bl	1a4a8 <__assert_fail@plt+0x86e0>
   1b3d0:	cmp	r0, #0
   1b3d4:	beq	1b3f4 <__assert_fail@plt+0x962c>
   1b3d8:	ldr	r2, [sp, #28]
   1b3dc:	ldr	r3, [r4]
   1b3e0:	ldr	r0, [sp, #24]
   1b3e4:	cmp	r2, r3
   1b3e8:	bne	1b450 <__assert_fail@plt+0x9688>
   1b3ec:	add	sp, sp, #36	; 0x24
   1b3f0:	pop	{r4, r5, r6, r7, pc}
   1b3f4:	mov	r0, #8
   1b3f8:	bl	11aec <malloc@plt>
   1b3fc:	subs	r6, r0, #0
   1b400:	beq	1b3d8 <__assert_fail@plt+0x9610>
   1b404:	movw	r3, #30544	; 0x7750
   1b408:	movt	r3, #2
   1b40c:	add	r2, r3, #48	; 0x30
   1b410:	ldr	ip, [sp, #20]
   1b414:	str	r5, [r6]
   1b418:	ldm	r2, {r0, r1, r2}
   1b41c:	str	r7, [r6, #4]
   1b420:	ldr	r3, [r3, #44]	; 0x2c
   1b424:	str	ip, [sp, #12]
   1b428:	stm	sp, {r0, r1, r2}
   1b42c:	mov	r2, r5
   1b430:	add	r0, sp, #24
   1b434:	mov	r1, r6
   1b438:	bl	1a5f8 <__assert_fail@plt+0x8830>
   1b43c:	cmp	r0, #0
   1b440:	beq	1b3d8 <__assert_fail@plt+0x9610>
   1b444:	mov	r0, r6
   1b448:	bl	199cc <__assert_fail@plt+0x7c04>
   1b44c:	b	1b3d8 <__assert_fail@plt+0x9610>
   1b450:	bl	119d8 <__stack_chk_fail@plt>
   1b454:	mov	r2, #0
   1b458:	mov	r3, r2
   1b45c:	b	1b39c <__assert_fail@plt+0x95d4>
   1b460:	mov	r2, #1
   1b464:	mov	r3, #0
   1b468:	b	1b39c <__assert_fail@plt+0x95d4>
   1b46c:	push	{r4, r5, r6, r7, lr}
   1b470:	movw	r4, #44624	; 0xae50
   1b474:	movt	r4, #3
   1b478:	sub	sp, sp, #36	; 0x24
   1b47c:	mov	r5, r0
   1b480:	mov	r0, r1
   1b484:	ldr	r3, [r4]
   1b488:	add	r1, sp, #20
   1b48c:	mov	ip, #0
   1b490:	mov	r7, r2
   1b494:	str	ip, [sp, #24]
   1b498:	str	r3, [sp, #28]
   1b49c:	bl	1a4a8 <__assert_fail@plt+0x86e0>
   1b4a0:	cmp	r0, #0
   1b4a4:	bne	1b524 <__assert_fail@plt+0x975c>
   1b4a8:	cmp	r5, #0
   1b4ac:	beq	1b4b8 <__assert_fail@plt+0x96f0>
   1b4b0:	mov	r0, r5
   1b4b4:	bl	11930 <fflush@plt>
   1b4b8:	mov	r0, #8
   1b4bc:	bl	11aec <malloc@plt>
   1b4c0:	subs	r6, r0, #0
   1b4c4:	beq	1b524 <__assert_fail@plt+0x975c>
   1b4c8:	cmp	r5, #0
   1b4cc:	stm	r6, {r5, r7}
   1b4d0:	mvneq	ip, #0
   1b4d4:	beq	1b4e4 <__assert_fail@plt+0x971c>
   1b4d8:	mov	r0, r5
   1b4dc:	bl	11c84 <fileno@plt>
   1b4e0:	mov	ip, r0
   1b4e4:	movw	r3, #30544	; 0x7750
   1b4e8:	movt	r3, #2
   1b4ec:	add	r1, r3, #80	; 0x50
   1b4f0:	ldr	lr, [sp, #20]
   1b4f4:	ldr	r3, [r3, #76]	; 0x4c
   1b4f8:	ldm	r1, {r0, r1, r2}
   1b4fc:	str	lr, [sp, #12]
   1b500:	stm	sp, {r0, r1, r2}
   1b504:	mov	r2, ip
   1b508:	add	r0, sp, #24
   1b50c:	mov	r1, r6
   1b510:	bl	1a5f8 <__assert_fail@plt+0x8830>
   1b514:	cmp	r0, #0
   1b518:	beq	1b524 <__assert_fail@plt+0x975c>
   1b51c:	mov	r0, r6
   1b520:	bl	1a114 <__assert_fail@plt+0x834c>
   1b524:	ldr	r2, [sp, #28]
   1b528:	ldr	r3, [r4]
   1b52c:	ldr	r0, [sp, #24]
   1b530:	cmp	r2, r3
   1b534:	bne	1b540 <__assert_fail@plt+0x9778>
   1b538:	add	sp, sp, #36	; 0x24
   1b53c:	pop	{r4, r5, r6, r7, pc}
   1b540:	bl	119d8 <__stack_chk_fail@plt>
   1b544:	mov	r2, #0
   1b548:	mov	r3, r2
   1b54c:	b	1b46c <__assert_fail@plt+0x96a4>
   1b550:	mov	r2, #1
   1b554:	mov	r3, #0
   1b558:	b	1b46c <__assert_fail@plt+0x96a4>
   1b55c:	cmp	r0, #2
   1b560:	bxhi	lr
   1b564:	movw	r3, #44928	; 0xaf80
   1b568:	movt	r3, #3
   1b56c:	add	r2, r3, r0
   1b570:	ldrb	ip, [r2, #8]
   1b574:	cmp	ip, #0
   1b578:	addeq	r0, r3, r0, lsl #2
   1b57c:	moveq	r3, #1
   1b580:	strbeq	r3, [r2, #8]
   1b584:	streq	r1, [r0, #12]
   1b588:	bx	lr
   1b58c:	push	{r4, r5, r6, lr}
   1b590:	movw	r6, #21846	; 0x5556
   1b594:	movt	r6, #21845	; 0x5555
   1b598:	movw	r3, #44928	; 0xaf80
   1b59c:	movt	r3, #3
   1b5a0:	sub	sp, sp, #8
   1b5a4:	smull	r2, r6, r6, r0
   1b5a8:	ldr	r1, [r3]
   1b5ac:	cmp	r1, #0
   1b5b0:	sub	r6, r6, r0, asr #31
   1b5b4:	add	r6, r6, r6, lsl #1
   1b5b8:	rsb	r6, r6, r0
   1b5bc:	beq	1b5f0 <__assert_fail@plt+0x9828>
   1b5c0:	movw	r5, #8272	; 0x2050
   1b5c4:	ldr	r4, [r1]
   1b5c8:	ldr	r0, [r4, #36]	; 0x24
   1b5cc:	ldrb	ip, [r0, r5]
   1b5d0:	tst	ip, #2
   1b5d4:	beq	1b5e4 <__assert_fail@plt+0x981c>
   1b5d8:	ubfx	ip, ip, #2, #2
   1b5dc:	cmp	ip, r6
   1b5e0:	beq	1b720 <__assert_fail@plt+0x9958>
   1b5e4:	ldr	r1, [r1, #4]
   1b5e8:	cmp	r1, #0
   1b5ec:	bne	1b5c4 <__assert_fail@plt+0x97fc>
   1b5f0:	cmp	r6, #0
   1b5f4:	bne	1b72c <__assert_fail@plt+0x9964>
   1b5f8:	ldrb	r2, [r3, #8]
   1b5fc:	movw	r1, #44928	; 0xaf80
   1b600:	movt	r1, #3
   1b604:	cmp	r2, #0
   1b608:	bne	1b7ac <__assert_fail@plt+0x99e4>
   1b60c:	ldrb	r2, [r3, #10]
   1b610:	movw	r3, #44928	; 0xaf80
   1b614:	movt	r3, #3
   1b618:	cmp	r2, #0
   1b61c:	bne	1b6b4 <__assert_fail@plt+0x98ec>
   1b620:	cmp	r6, #0
   1b624:	beq	1b7e4 <__assert_fail@plt+0x9a1c>
   1b628:	cmp	r6, #1
   1b62c:	beq	1b784 <__assert_fail@plt+0x99bc>
   1b630:	movw	r3, #44632	; 0xae58
   1b634:	movt	r3, #3
   1b638:	mov	r2, #1
   1b63c:	movw	r1, #30760	; 0x7828
   1b640:	ldr	r0, [r3]
   1b644:	movt	r1, #2
   1b648:	mov	r3, r2
   1b64c:	bl	1b46c <__assert_fail@plt+0x96a4>
   1b650:	mov	r4, r0
   1b654:	cmp	r4, #0
   1b658:	movweq	r1, #30760	; 0x7828
   1b65c:	movteq	r1, #2
   1b660:	bne	1b6d8 <__assert_fail@plt+0x9910>
   1b664:	mov	r0, #0
   1b668:	mov	r3, #1
   1b66c:	mov	r2, r0
   1b670:	bl	1b46c <__assert_fail@plt+0x96a4>
   1b674:	subs	r4, r0, #0
   1b678:	bne	1b6d8 <__assert_fail@plt+0x9910>
   1b67c:	movw	r3, #44632	; 0xae58
   1b680:	movt	r3, #3
   1b684:	ldr	r4, [r3]
   1b688:	bl	11bf4 <__errno_location@plt>
   1b68c:	ldr	r0, [r0]
   1b690:	bl	11b10 <strerror@plt>
   1b694:	mov	r3, r6
   1b698:	movw	r2, #30796	; 0x784c
   1b69c:	mov	r1, #1
   1b6a0:	movt	r2, #2
   1b6a4:	str	r0, [sp]
   1b6a8:	mov	r0, r4
   1b6ac:	bl	11c9c <__fprintf_chk@plt>
   1b6b0:	bl	11d8c <abort@plt>
   1b6b4:	mov	r2, #1
   1b6b8:	ldr	r0, [r3, #20]
   1b6bc:	movw	r1, #30760	; 0x7828
   1b6c0:	mov	r3, r2
   1b6c4:	movt	r1, #2
   1b6c8:	bl	1b39c <__assert_fail@plt+0x95d4>
   1b6cc:	mov	r4, r0
   1b6d0:	cmp	r4, #0
   1b6d4:	beq	1b620 <__assert_fail@plt+0x9858>
   1b6d8:	ldr	r2, [r4, #36]	; 0x24
   1b6dc:	movw	r3, #8272	; 0x2050
   1b6e0:	cmp	r6, #2
   1b6e4:	ldrb	r1, [r2, r3]
   1b6e8:	orr	r1, r1, #2
   1b6ec:	strb	r1, [r2, r3]
   1b6f0:	ldr	r2, [r4, #36]	; 0x24
   1b6f4:	ldrb	r1, [r2, r3]
   1b6f8:	bfi	r1, r6, #2, #2
   1b6fc:	strb	r1, [r2, r3]
   1b700:	beq	1b7cc <__assert_fail@plt+0x9a04>
   1b704:	cmp	r6, #0
   1b708:	movweq	r1, #30776	; 0x7838
   1b70c:	movteq	r1, #2
   1b710:	bne	1b768 <__assert_fail@plt+0x99a0>
   1b714:	add	r0, r4, #36	; 0x24
   1b718:	mov	r2, #0
   1b71c:	bl	1aa00 <__assert_fail@plt+0x8c38>
   1b720:	mov	r0, r4
   1b724:	add	sp, sp, #8
   1b728:	pop	{r4, r5, r6, pc}
   1b72c:	cmp	r6, #1
   1b730:	bne	1b60c <__assert_fail@plt+0x9844>
   1b734:	ldrb	r1, [r3, #9]
   1b738:	movw	r2, #44928	; 0xaf80
   1b73c:	movt	r2, #3
   1b740:	cmp	r1, #0
   1b744:	beq	1b60c <__assert_fail@plt+0x9844>
   1b748:	ldr	r0, [r2, #16]
   1b74c:	movw	r1, #30760	; 0x7828
   1b750:	mov	r2, r6
   1b754:	movt	r1, #2
   1b758:	mov	r3, r6
   1b75c:	bl	1b39c <__assert_fail@plt+0x95d4>
   1b760:	mov	r4, r0
   1b764:	b	1b6d0 <__assert_fail@plt+0x9908>
   1b768:	cmp	r6, #1
   1b76c:	movweq	r1, #30784	; 0x7840
   1b770:	movteq	r1, #2
   1b774:	beq	1b714 <__assert_fail@plt+0x994c>
   1b778:	movw	r1, #30764	; 0x782c
   1b77c:	movt	r1, #2
   1b780:	b	1b714 <__assert_fail@plt+0x994c>
   1b784:	movw	r3, #44644	; 0xae64
   1b788:	movt	r3, #3
   1b78c:	movw	r1, #30760	; 0x7828
   1b790:	mov	r2, r6
   1b794:	ldr	r0, [r3]
   1b798:	movt	r1, #2
   1b79c:	mov	r3, r6
   1b7a0:	bl	1b46c <__assert_fail@plt+0x96a4>
   1b7a4:	mov	r4, r0
   1b7a8:	b	1b654 <__assert_fail@plt+0x988c>
   1b7ac:	mov	r2, #1
   1b7b0:	ldr	r0, [r1, #12]
   1b7b4:	mov	r3, r2
   1b7b8:	movw	r1, #24728	; 0x6098
   1b7bc:	movt	r1, #2
   1b7c0:	bl	1b39c <__assert_fail@plt+0x95d4>
   1b7c4:	mov	r4, r0
   1b7c8:	b	1b6d0 <__assert_fail@plt+0x9908>
   1b7cc:	mov	r1, #0
   1b7d0:	mov	r0, r4
   1b7d4:	mov	r3, r1
   1b7d8:	mov	r2, #1
   1b7dc:	bl	1a910 <__assert_fail@plt+0x8b48>
   1b7e0:	b	1b778 <__assert_fail@plt+0x99b0>
   1b7e4:	movw	r3, #44640	; 0xae60
   1b7e8:	movt	r3, #3
   1b7ec:	mov	r2, #1
   1b7f0:	movw	r1, #24728	; 0x6098
   1b7f4:	ldr	r0, [r3]
   1b7f8:	movt	r1, #2
   1b7fc:	mov	r3, r2
   1b800:	bl	1b46c <__assert_fail@plt+0x96a4>
   1b804:	subs	r4, r0, #0
   1b808:	movweq	r1, #24728	; 0x6098
   1b80c:	movteq	r1, #2
   1b810:	beq	1b664 <__assert_fail@plt+0x989c>
   1b814:	ldr	r2, [r4, #36]	; 0x24
   1b818:	movw	r3, #8272	; 0x2050
   1b81c:	movw	r1, #30776	; 0x7838
   1b820:	movt	r1, #2
   1b824:	ldrb	r0, [r2, r3]
   1b828:	orr	r0, r0, #2
   1b82c:	strb	r0, [r2, r3]
   1b830:	ldr	r2, [r4, #36]	; 0x24
   1b834:	ldrb	r0, [r2, r3]
   1b838:	bfi	r0, r6, #2, #2
   1b83c:	strb	r0, [r2, r3]
   1b840:	b	1b714 <__assert_fail@plt+0x994c>
   1b844:	push	{r4, r5, r6, r7, lr}
   1b848:	movw	r5, #44624	; 0xae50
   1b84c:	movt	r5, #3
   1b850:	sub	sp, sp, #36	; 0x24
   1b854:	subs	r7, r0, #0
   1b858:	mov	r6, r1
   1b85c:	ldr	r3, [r5]
   1b860:	mov	r4, r2
   1b864:	str	r3, [sp, #28]
   1b868:	beq	1b928 <__assert_fail@plt+0x9b60>
   1b86c:	mov	r0, r2
   1b870:	mov	r3, #0
   1b874:	str	r3, [sp, #20]
   1b878:	bl	19d44 <__assert_fail@plt+0x7f7c>
   1b87c:	mov	r0, r6
   1b880:	add	r1, sp, #16
   1b884:	bl	1a4a8 <__assert_fail@plt+0x86e0>
   1b888:	cmp	r0, #0
   1b88c:	beq	1b8b8 <__assert_fail@plt+0x9af0>
   1b890:	mov	r0, r4
   1b894:	mov	r4, #0
   1b898:	bl	1a6e4 <__assert_fail@plt+0x891c>
   1b89c:	ldr	r2, [sp, #28]
   1b8a0:	mov	r0, r4
   1b8a4:	ldr	r3, [r5]
   1b8a8:	cmp	r2, r3
   1b8ac:	bne	1b94c <__assert_fail@plt+0x9b84>
   1b8b0:	add	sp, sp, #36	; 0x24
   1b8b4:	pop	{r4, r5, r6, r7, pc}
   1b8b8:	add	r0, sp, #20
   1b8bc:	add	r1, sp, #24
   1b8c0:	mov	r2, r7
   1b8c4:	ldr	r3, [sp, #16]
   1b8c8:	bl	19b9c <__assert_fail@plt+0x7dd4>
   1b8cc:	cmp	r0, #0
   1b8d0:	bne	1b890 <__assert_fail@plt+0x9ac8>
   1b8d4:	movw	r3, #30544	; 0x7750
   1b8d8:	movt	r3, #2
   1b8dc:	add	r0, r3, #48	; 0x30
   1b8e0:	ldr	r6, [sp, #20]
   1b8e4:	ldr	lr, [sp, #24]
   1b8e8:	ldm	r0, {r0, r1, r2}
   1b8ec:	ldr	ip, [sp, #16]
   1b8f0:	ldr	r3, [r3, #44]	; 0x2c
   1b8f4:	stm	sp, {r0, r1, r2}
   1b8f8:	mov	r1, r6
   1b8fc:	mov	r2, lr
   1b900:	str	ip, [sp, #12]
   1b904:	mov	r0, r4
   1b908:	bl	19890 <__assert_fail@plt+0x7ac8>
   1b90c:	cmp	r4, #0
   1b910:	beq	1b89c <__assert_fail@plt+0x9ad4>
   1b914:	mov	r1, r7
   1b918:	add	r0, r4, #36	; 0x24
   1b91c:	mov	r2, #1
   1b920:	bl	1aa00 <__assert_fail@plt+0x8c38>
   1b924:	b	1b89c <__assert_fail@plt+0x9ad4>
   1b928:	bl	11bf4 <__errno_location@plt>
   1b92c:	mov	r3, #22
   1b930:	str	r3, [r0]
   1b934:	mov	r0, r4
   1b938:	bl	19d44 <__assert_fail@plt+0x7f7c>
   1b93c:	mov	r0, r4
   1b940:	bl	1a6e4 <__assert_fail@plt+0x891c>
   1b944:	mov	r4, r7
   1b948:	b	1b89c <__assert_fail@plt+0x9ad4>
   1b94c:	bl	119d8 <__stack_chk_fail@plt>
   1b950:	b	1a6e4 <__assert_fail@plt+0x891c>
   1b954:	push	{r4, r5, r6, r7, r8, r9, lr}
   1b958:	movw	r4, #44624	; 0xae50
   1b95c:	movt	r4, #3
   1b960:	sub	sp, sp, #12
   1b964:	subs	r5, r1, #0
   1b968:	mov	r9, r2
   1b96c:	ldr	r3, [r4]
   1b970:	mov	r6, r0
   1b974:	str	r3, [sp, #4]
   1b978:	beq	1ba20 <__assert_fail@plt+0x9c58>
   1b97c:	ldr	r1, [r0, #36]	; 0x24
   1b980:	movw	r2, #8252	; 0x203c
   1b984:	mov	r3, #0
   1b988:	ldr	r8, [r1, r2]
   1b98c:	str	r3, [r5]
   1b990:	cmp	r8, r3
   1b994:	beq	1ba3c <__assert_fail@plt+0x9c74>
   1b998:	ldrb	r3, [r0, #32]
   1b99c:	tst	r3, #1
   1b9a0:	beq	1b9f0 <__assert_fail@plt+0x9c28>
   1b9a4:	bl	19c10 <__assert_fail@plt+0x7e48>
   1b9a8:	subs	r7, r0, #0
   1b9ac:	beq	1b9e4 <__assert_fail@plt+0x9c1c>
   1b9b0:	ldr	r0, [r5]
   1b9b4:	cmp	r0, #0
   1b9b8:	beq	1b9c0 <__assert_fail@plt+0x9bf8>
   1b9bc:	bl	11948 <free@plt>
   1b9c0:	mov	r3, #0
   1b9c4:	str	r3, [r5]
   1b9c8:	ldr	r2, [sp, #4]
   1b9cc:	mov	r0, r7
   1b9d0:	ldr	r3, [r4]
   1b9d4:	cmp	r2, r3
   1b9d8:	bne	1ba5c <__assert_fail@plt+0x9c94>
   1b9dc:	add	sp, sp, #12
   1b9e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1b9e4:	ldrb	r3, [r6, #32]
   1b9e8:	bfi	r3, r7, #0, #1
   1b9ec:	strb	r3, [r6, #32]
   1b9f0:	ldr	ip, [r6, #36]	; 0x24
   1b9f4:	movw	r0, #8212	; 0x2014
   1b9f8:	mov	r1, #1
   1b9fc:	mov	r2, r5
   1ba00:	mov	r3, sp
   1ba04:	ldr	r0, [ip, r0]
   1ba08:	blx	r8
   1ba0c:	subs	r7, r0, #0
   1ba10:	bne	1b9b0 <__assert_fail@plt+0x9be8>
   1ba14:	cmp	r9, #0
   1ba18:	ldrne	r3, [sp]
   1ba1c:	strne	r3, [r9]
   1ba20:	mov	r0, r6
   1ba24:	bl	1a6e4 <__assert_fail@plt+0x891c>
   1ba28:	cmp	r5, #0
   1ba2c:	cmpne	r0, #0
   1ba30:	mov	r7, r0
   1ba34:	beq	1b9c8 <__assert_fail@plt+0x9c00>
   1ba38:	b	1b9b0 <__assert_fail@plt+0x9be8>
   1ba3c:	bl	11bf4 <__errno_location@plt>
   1ba40:	mov	r3, #95	; 0x5f
   1ba44:	mvn	r7, #0
   1ba48:	str	r3, [r0]
   1ba4c:	ldr	r0, [r5]
   1ba50:	cmp	r0, #0
   1ba54:	bne	1b9bc <__assert_fail@plt+0x9bf4>
   1ba58:	b	1b9c0 <__assert_fail@plt+0x9bf8>
   1ba5c:	bl	119d8 <__stack_chk_fail@plt>
   1ba60:	ldr	r2, [r0, #36]	; 0x24
   1ba64:	movw	r3, #8264	; 0x2048
   1ba68:	ldr	r0, [r2, r3]
   1ba6c:	bx	lr
   1ba70:	bx	lr
   1ba74:	mov	r0, #0
   1ba78:	bx	lr
   1ba7c:	bx	lr
   1ba80:	ldr	r2, [r0, #36]	; 0x24
   1ba84:	movw	r3, #8264	; 0x2048
   1ba88:	ldr	r0, [r2, r3]
   1ba8c:	bx	lr
   1ba90:	ldr	r2, [r0, #36]	; 0x24
   1ba94:	movw	r3, #8268	; 0x204c
   1ba98:	ldrb	r0, [r2, r3]
   1ba9c:	ubfx	r0, r0, #1, #1
   1baa0:	bx	lr
   1baa4:	ldr	r2, [r0, #36]	; 0x24
   1baa8:	movw	r3, #8268	; 0x204c
   1baac:	ldrb	r0, [r2, r3]
   1bab0:	ubfx	r0, r0, #1, #1
   1bab4:	bx	lr
   1bab8:	ldr	r2, [r0, #36]	; 0x24
   1babc:	movw	r3, #8268	; 0x204c
   1bac0:	ldrb	r0, [r2, r3]
   1bac4:	and	r0, r0, #1
   1bac8:	bx	lr
   1bacc:	ldr	r2, [r0, #36]	; 0x24
   1bad0:	movw	r3, #8268	; 0x204c
   1bad4:	ldrb	r0, [r2, r3]
   1bad8:	and	r0, r0, #1
   1badc:	bx	lr
   1bae0:	ldr	r2, [r0, #36]	; 0x24
   1bae4:	movw	r3, #8268	; 0x204c
   1bae8:	ldrb	r1, [r2, r3]
   1baec:	and	r1, r1, #254	; 0xfe
   1baf0:	bfc	r1, #1, #1
   1baf4:	strb	r1, [r2, r3]
   1baf8:	bx	lr
   1bafc:	ldr	r2, [r0, #36]	; 0x24
   1bb00:	movw	r3, #8268	; 0x204c
   1bb04:	ldrb	r1, [r2, r3]
   1bb08:	and	r1, r1, #254	; 0xfe
   1bb0c:	bfc	r1, #1, #1
   1bb10:	strb	r1, [r2, r3]
   1bb14:	bx	lr
   1bb18:	push	{r3, r4, r5, lr}
   1bb1c:	subs	r5, r0, #0
   1bb20:	beq	1bb44 <__assert_fail@plt+0x9d7c>
   1bb24:	ldrb	r3, [r5, #32]
   1bb28:	ands	r3, r3, #1
   1bb2c:	bne	1bbb0 <__assert_fail@plt+0x9de8>
   1bb30:	str	r3, [r5, #8]
   1bb34:	mov	r0, r3
   1bb38:	str	r3, [r5, #12]
   1bb3c:	str	r3, [r5, #28]
   1bb40:	pop	{r3, r4, r5, pc}
   1bb44:	movw	r3, #44928	; 0xaf80
   1bb48:	movt	r3, #3
   1bb4c:	ldr	r4, [r3]
   1bb50:	cmp	r4, #0
   1bb54:	bne	1bb6c <__assert_fail@plt+0x9da4>
   1bb58:	b	1bbc0 <__assert_fail@plt+0x9df8>
   1bb5c:	ldr	r4, [r4, #4]
   1bb60:	orr	r5, r5, r0
   1bb64:	cmp	r4, #0
   1bb68:	beq	1bba4 <__assert_fail@plt+0x9ddc>
   1bb6c:	ldr	r3, [r4]
   1bb70:	ldrb	r2, [r3, #32]
   1bb74:	ands	r2, r2, #1
   1bb78:	streq	r2, [r3, #8]
   1bb7c:	streq	r2, [r3, #12]
   1bb80:	mov	r0, r2
   1bb84:	streq	r2, [r3, #28]
   1bb88:	beq	1bb5c <__assert_fail@plt+0x9d94>
   1bb8c:	mov	r0, r3
   1bb90:	bl	19c10 <__assert_fail@plt+0x7e48>
   1bb94:	ldr	r4, [r4, #4]
   1bb98:	cmp	r4, #0
   1bb9c:	orr	r5, r5, r0
   1bba0:	bne	1bb6c <__assert_fail@plt+0x9da4>
   1bba4:	subs	r0, r5, #0
   1bba8:	mvnne	r0, #0
   1bbac:	pop	{r3, r4, r5, pc}
   1bbb0:	bl	19c10 <__assert_fail@plt+0x7e48>
   1bbb4:	subs	r0, r0, #0
   1bbb8:	mvnne	r0, #0
   1bbbc:	pop	{r3, r4, r5, pc}
   1bbc0:	mov	r0, r4
   1bbc4:	pop	{r3, r4, r5, pc}
   1bbc8:	mov	r0, #0
   1bbcc:	b	1bb18 <__assert_fail@plt+0x9d50>
   1bbd0:	push	{lr}		; (str lr, [sp, #-4]!)
   1bbd4:	sub	sp, sp, #12
   1bbd8:	asr	r3, r1, #31
   1bbdc:	str	r2, [sp]
   1bbe0:	mov	r2, r1
   1bbe4:	bl	1ab48 <__assert_fail@plt+0x8d80>
   1bbe8:	add	sp, sp, #12
   1bbec:	pop	{pc}		; (ldr pc, [sp], #4)
   1bbf0:	b	1ab48 <__assert_fail@plt+0x8d80>
   1bbf4:	ldr	r1, [r0, #36]	; 0x24
   1bbf8:	movw	r3, #8232	; 0x2028
   1bbfc:	ldr	ip, [r0, #12]
   1bc00:	ldr	r2, [r0, #28]
   1bc04:	ldrd	r0, [r1, r3]
   1bc08:	mov	r3, #0
   1bc0c:	adds	r0, r0, ip
   1bc10:	adc	r1, r1, #0
   1bc14:	cmp	r0, r2
   1bc18:	sbcs	ip, r1, r3
   1bc1c:	rsbge	r0, r2, r0
   1bc20:	movlt	r0, #0
   1bc24:	bx	lr
   1bc28:	ldr	r1, [r0, #36]	; 0x24
   1bc2c:	movw	r3, #8232	; 0x2028
   1bc30:	ldr	ip, [r0, #12]
   1bc34:	ldr	r2, [r0, #28]
   1bc38:	ldrd	r0, [r1, r3]
   1bc3c:	mov	r3, #0
   1bc40:	adds	r0, r0, ip
   1bc44:	adc	r1, r1, #0
   1bc48:	cmp	r0, r2
   1bc4c:	sbcs	ip, r1, r3
   1bc50:	blt	1bc60 <__assert_fail@plt+0x9e98>
   1bc54:	subs	r0, r0, r2
   1bc58:	sbc	r1, r1, r3
   1bc5c:	bx	lr
   1bc60:	mov	r0, #0
   1bc64:	mov	r1, #0
   1bc68:	bx	lr
   1bc6c:	push	{r4, r5, lr}
   1bc70:	sub	sp, sp, #12
   1bc74:	mov	r4, #0
   1bc78:	mov	r2, #0
   1bc7c:	str	r4, [sp]
   1bc80:	mov	r3, #0
   1bc84:	mov	r5, r0
   1bc88:	bl	1ab48 <__assert_fail@plt+0x8d80>
   1bc8c:	ldr	r2, [r5, #36]	; 0x24
   1bc90:	movw	r3, #8268	; 0x204c
   1bc94:	ldrb	r1, [r2, r3]
   1bc98:	bfi	r1, r4, #0, #1
   1bc9c:	strb	r1, [r2, r3]
   1bca0:	add	sp, sp, #12
   1bca4:	pop	{r4, r5, pc}
   1bca8:	push	{r4, lr}
   1bcac:	movw	r4, #44624	; 0xae50
   1bcb0:	movt	r4, #3
   1bcb4:	sub	sp, sp, #16
   1bcb8:	add	r1, sp, #7
   1bcbc:	mov	r2, #1
   1bcc0:	ldr	ip, [r4]
   1bcc4:	add	r3, sp, #8
   1bcc8:	str	ip, [sp, #12]
   1bccc:	bl	1a228 <__assert_fail@plt+0x8460>
   1bcd0:	cmp	r0, #0
   1bcd4:	bne	1bd00 <__assert_fail@plt+0x9f38>
   1bcd8:	ldr	r3, [sp, #8]
   1bcdc:	cmp	r3, #0
   1bce0:	beq	1bd00 <__assert_fail@plt+0x9f38>
   1bce4:	ldrb	r0, [sp, #7]
   1bce8:	ldr	r2, [sp, #12]
   1bcec:	ldr	r3, [r4]
   1bcf0:	cmp	r2, r3
   1bcf4:	bne	1bd08 <__assert_fail@plt+0x9f40>
   1bcf8:	add	sp, sp, #16
   1bcfc:	pop	{r4, pc}
   1bd00:	mvn	r0, #0
   1bd04:	b	1bce8 <__assert_fail@plt+0x9f20>
   1bd08:	bl	119d8 <__stack_chk_fail@plt>
   1bd0c:	push	{r4, r5, lr}
   1bd10:	movw	r4, #44624	; 0xae50
   1bd14:	movt	r4, #3
   1bd18:	sub	sp, sp, #12
   1bd1c:	add	r3, sp, #8
   1bd20:	mov	r5, r0
   1bd24:	ldr	ip, [r4]
   1bd28:	mov	r0, r1
   1bd2c:	strb	r5, [r3, #-5]!
   1bd30:	mov	r2, #1
   1bd34:	mov	r1, r3
   1bd38:	mov	r3, #0
   1bd3c:	str	ip, [sp, #4]
   1bd40:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1bd44:	ldr	r2, [sp, #4]
   1bd48:	ldr	r3, [r4]
   1bd4c:	cmp	r0, #0
   1bd50:	moveq	r0, r5
   1bd54:	mvnne	r0, #0
   1bd58:	cmp	r2, r3
   1bd5c:	bne	1bd68 <__assert_fail@plt+0x9fa0>
   1bd60:	add	sp, sp, #12
   1bd64:	pop	{r4, r5, pc}
   1bd68:	bl	119d8 <__stack_chk_fail@plt>
   1bd6c:	ldrb	r3, [r0, #32]
   1bd70:	tst	r3, #1
   1bd74:	bne	1bd94 <__assert_fail@plt+0x9fcc>
   1bd78:	ldr	r3, [r0, #12]
   1bd7c:	ldr	r2, [r0, #8]
   1bd80:	cmp	r3, r2
   1bd84:	bcs	1bd94 <__assert_fail@plt+0x9fcc>
   1bd88:	ldr	r2, [r0, #28]
   1bd8c:	cmp	r2, #0
   1bd90:	beq	1bd98 <__assert_fail@plt+0x9fd0>
   1bd94:	b	1bca8 <__assert_fail@plt+0x9ee0>
   1bd98:	ldr	r2, [r0]
   1bd9c:	add	r1, r3, #1
   1bda0:	str	r1, [r0, #12]
   1bda4:	ldrb	r0, [r2, r3]
   1bda8:	bx	lr
   1bdac:	push	{r4, r5, lr}
   1bdb0:	movw	r5, #44624	; 0xae50
   1bdb4:	movt	r5, #3
   1bdb8:	ldrb	r3, [r1, #32]
   1bdbc:	sub	sp, sp, #12
   1bdc0:	mov	r4, r0
   1bdc4:	ldr	r2, [r5]
   1bdc8:	tst	r3, #1
   1bdcc:	str	r2, [sp, #4]
   1bdd0:	beq	1bde4 <__assert_fail@plt+0xa01c>
   1bdd4:	ldr	r3, [r1, #12]
   1bdd8:	ldr	r2, [r1, #4]
   1bddc:	cmp	r3, r2
   1bde0:	bcc	1be24 <__assert_fail@plt+0xa05c>
   1bde4:	add	r3, sp, #8
   1bde8:	mov	r0, r1
   1bdec:	mov	r2, #1
   1bdf0:	strb	r4, [r3, #-5]!
   1bdf4:	mov	r1, r3
   1bdf8:	mov	r3, #0
   1bdfc:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1be00:	cmp	r0, #0
   1be04:	mvnne	r4, #0
   1be08:	ldr	r2, [sp, #4]
   1be0c:	mov	r0, r4
   1be10:	ldr	r3, [r5]
   1be14:	cmp	r2, r3
   1be18:	bne	1be44 <__assert_fail@plt+0xa07c>
   1be1c:	add	sp, sp, #12
   1be20:	pop	{r4, r5, pc}
   1be24:	cmp	r0, #10
   1be28:	beq	1bde4 <__assert_fail@plt+0xa01c>
   1be2c:	ldr	r2, [r1]
   1be30:	add	r0, r3, #1
   1be34:	str	r0, [r1, #12]
   1be38:	strb	r4, [r2, r3]
   1be3c:	uxtb	r4, r4
   1be40:	b	1be08 <__assert_fail@plt+0xa040>
   1be44:	bl	119d8 <__stack_chk_fail@plt>
   1be48:	mov	r2, r0
   1be4c:	ldr	r3, [r1, #28]
   1be50:	ldr	r0, [r1, #24]
   1be54:	push	{r4}		; (str r4, [sp, #-4]!)
   1be58:	cmp	r0, r3
   1be5c:	mvneq	r0, #0
   1be60:	beq	1be90 <__assert_fail@plt+0xa0c8>
   1be64:	ldr	r4, [r1, #20]
   1be68:	movw	ip, #8268	; 0x204c
   1be6c:	mov	r0, r2
   1be70:	strb	r2, [r4, r3]
   1be74:	ldr	r3, [r1, #36]	; 0x24
   1be78:	ldr	r4, [r1, #28]
   1be7c:	ldrb	r2, [r3, ip]
   1be80:	add	r4, r4, #1
   1be84:	str	r4, [r1, #28]
   1be88:	bfc	r2, #1, #1
   1be8c:	strb	r2, [r3, ip]
   1be90:	pop	{r4}		; (ldr r4, [sp], #4)
   1be94:	bx	lr
   1be98:	subs	ip, r2, #0
   1be9c:	bne	1bea8 <__assert_fail@plt+0xa0e0>
   1bea0:	mov	r0, ip
   1bea4:	bx	lr
   1bea8:	b	1a228 <__assert_fail@plt+0x8460>
   1beac:	subs	ip, r2, #0
   1beb0:	bne	1bebc <__assert_fail@plt+0xa0f4>
   1beb4:	mov	r0, ip
   1beb8:	bx	lr
   1bebc:	b	1ac94 <__assert_fail@plt+0x8ecc>
   1bec0:	mul	r2, r2, r1
   1bec4:	push	{r4, r5, lr}
   1bec8:	movw	r4, #44624	; 0xae50
   1becc:	movt	r4, #3
   1bed0:	sub	sp, sp, #12
   1bed4:	cmp	r2, #0
   1bed8:	mov	r5, r1
   1bedc:	ldr	ip, [r4]
   1bee0:	mov	r1, r0
   1bee4:	moveq	r0, r2
   1bee8:	str	ip, [sp, #4]
   1beec:	beq	1bf08 <__assert_fail@plt+0xa140>
   1bef0:	mov	r0, r3
   1bef4:	mov	r3, sp
   1bef8:	bl	1a228 <__assert_fail@plt+0x8460>
   1befc:	mov	r1, r5
   1bf00:	ldr	r0, [sp]
   1bf04:	bl	23df0 <__assert_fail@plt+0x12028>
   1bf08:	ldr	r1, [sp, #4]
   1bf0c:	ldr	r3, [r4]
   1bf10:	cmp	r1, r3
   1bf14:	bne	1bf20 <__assert_fail@plt+0xa158>
   1bf18:	add	sp, sp, #12
   1bf1c:	pop	{r4, r5, pc}
   1bf20:	bl	119d8 <__stack_chk_fail@plt>
   1bf24:	mul	r2, r2, r1
   1bf28:	push	{r4, r5, lr}
   1bf2c:	movw	r4, #44624	; 0xae50
   1bf30:	movt	r4, #3
   1bf34:	sub	sp, sp, #12
   1bf38:	cmp	r2, #0
   1bf3c:	mov	r5, r1
   1bf40:	ldr	ip, [r4]
   1bf44:	mov	r1, r0
   1bf48:	moveq	r0, r2
   1bf4c:	str	ip, [sp, #4]
   1bf50:	beq	1bf6c <__assert_fail@plt+0xa1a4>
   1bf54:	mov	r0, r3
   1bf58:	mov	r3, sp
   1bf5c:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1bf60:	mov	r1, r5
   1bf64:	ldr	r0, [sp]
   1bf68:	bl	23df0 <__assert_fail@plt+0x12028>
   1bf6c:	ldr	r1, [sp, #4]
   1bf70:	ldr	r3, [r4]
   1bf74:	cmp	r1, r3
   1bf78:	bne	1bf84 <__assert_fail@plt+0xa1bc>
   1bf7c:	add	sp, sp, #12
   1bf80:	pop	{r4, r5, pc}
   1bf84:	bl	119d8 <__stack_chk_fail@plt>
   1bf88:	cmp	r1, #1
   1bf8c:	push	{r3, r4, r5, r6, r7, lr}
   1bf90:	mov	r5, r1
   1bf94:	mov	r7, r0
   1bf98:	mov	r4, r2
   1bf9c:	movgt	r6, r0
   1bfa0:	bgt	1bfdc <__assert_fail@plt+0xa214>
   1bfa4:	b	1c048 <__assert_fail@plt+0xa280>
   1bfa8:	ldr	r2, [r4, #28]
   1bfac:	add	r1, r3, #1
   1bfb0:	cmp	r2, #0
   1bfb4:	bne	1bffc <__assert_fail@plt+0xa234>
   1bfb8:	ldr	r2, [r4]
   1bfbc:	str	r1, [r4, #12]
   1bfc0:	ldrb	r0, [r2, r3]
   1bfc4:	cmp	r0, #10
   1bfc8:	beq	1c040 <__assert_fail@plt+0xa278>
   1bfcc:	sub	r5, r5, #1
   1bfd0:	strb	r0, [r6], #1
   1bfd4:	cmp	r5, #1
   1bfd8:	beq	1c010 <__assert_fail@plt+0xa248>
   1bfdc:	ldrb	r3, [r4, #32]
   1bfe0:	mov	r0, r4
   1bfe4:	tst	r3, #1
   1bfe8:	bne	1bffc <__assert_fail@plt+0xa234>
   1bfec:	ldr	r3, [r4, #12]
   1bff0:	ldr	r2, [r4, #8]
   1bff4:	cmp	r3, r2
   1bff8:	bcc	1bfa8 <__assert_fail@plt+0xa1e0>
   1bffc:	bl	1bca8 <__assert_fail@plt+0x9ee0>
   1c000:	cmn	r0, #1
   1c004:	bne	1bfc4 <__assert_fail@plt+0xa1fc>
   1c008:	cmp	r7, r6
   1c00c:	beq	1c048 <__assert_fail@plt+0xa280>
   1c010:	adds	r3, r0, #1
   1c014:	movne	r3, #1
   1c018:	cmp	r5, #1
   1c01c:	movle	r5, #0
   1c020:	andgt	r5, r3, #1
   1c024:	mov	r3, #0
   1c028:	cmp	r5, #0
   1c02c:	strbne	r0, [r6]
   1c030:	addne	r6, r6, #1
   1c034:	mov	r0, r7
   1c038:	strb	r3, [r6]
   1c03c:	pop	{r3, r4, r5, r6, r7, pc}
   1c040:	mov	r3, #1
   1c044:	b	1c018 <__assert_fail@plt+0xa250>
   1c048:	mov	r0, #0
   1c04c:	pop	{r3, r4, r5, r6, r7, pc}
   1c050:	push	{r3, r4, r5, lr}
   1c054:	mov	r5, r1
   1c058:	mov	r4, r0
   1c05c:	bl	11bac <strlen@plt>
   1c060:	mov	r1, r4
   1c064:	mov	r3, #0
   1c068:	mov	r2, r0
   1c06c:	mov	r0, r5
   1c070:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1c074:	subs	r0, r0, #0
   1c078:	mvnne	r0, #0
   1c07c:	pop	{r3, r4, r5, pc}
   1c080:	push	{r3, r4, r5, lr}
   1c084:	mov	r5, r1
   1c088:	mov	r4, r0
   1c08c:	bl	11bac <strlen@plt>
   1c090:	mov	r1, r4
   1c094:	mov	r3, #0
   1c098:	mov	r2, r0
   1c09c:	mov	r0, r5
   1c0a0:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1c0a4:	subs	r0, r0, #0
   1c0a8:	mvnne	r0, #0
   1c0ac:	pop	{r3, r4, r5, pc}
   1c0b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0b4:	movw	r8, #44624	; 0xae50
   1c0b8:	movt	r8, #3
   1c0bc:	sub	sp, sp, #44	; 0x2c
   1c0c0:	mov	r5, r2
   1c0c4:	mov	r6, #0
   1c0c8:	ldr	r3, [r8]
   1c0cc:	str	r0, [sp, #28]
   1c0d0:	mov	r0, #40	; 0x28
   1c0d4:	str	r1, [sp, #24]
   1c0d8:	str	r6, [sp, #32]
   1c0dc:	str	r3, [sp, #36]	; 0x24
   1c0e0:	bl	11aec <malloc@plt>
   1c0e4:	subs	r4, r0, #0
   1c0e8:	beq	1c3b0 <__assert_fail@plt+0xa5e8>
   1c0ec:	movw	r3, #30544	; 0x7750
   1c0f0:	movt	r3, #2
   1c0f4:	add	r2, r3, #64	; 0x40
   1c0f8:	ldrb	r9, [r4, #28]
   1c0fc:	str	r6, [r4, #4]
   1c100:	mov	r7, #2
   1c104:	ldm	r2, {r0, r1, r2}
   1c108:	orr	r9, r9, #1
   1c10c:	str	r7, [r4]
   1c110:	movw	lr, #43712	; 0xaac0
   1c114:	strb	r9, [r4, #28]
   1c118:	movt	lr, #1
   1c11c:	str	r6, [r4, #8]
   1c120:	movw	ip, #39360	; 0x99c0
   1c124:	str	r6, [r4, #12]
   1c128:	movt	ip, #1
   1c12c:	str	r6, [r4, #16]
   1c130:	mov	r9, #8192	; 0x2000
   1c134:	str	r6, [r4, #20]
   1c138:	str	lr, [r4, #32]
   1c13c:	str	ip, [r4, #36]	; 0x24
   1c140:	str	r9, [r4, #24]
   1c144:	ldr	r3, [r3, #60]	; 0x3c
   1c148:	stm	sp, {r0, r1, r2}
   1c14c:	add	r0, sp, #32
   1c150:	str	r7, [sp, #12]
   1c154:	mov	r1, r4
   1c158:	mvn	r2, #0
   1c15c:	bl	1a5f8 <__assert_fail@plt+0x8830>
   1c160:	subs	r7, r0, #0
   1c164:	bne	1c208 <__assert_fail@plt+0xa440>
   1c168:	mov	r6, r7
   1c16c:	mov	sl, r7
   1c170:	ldrb	r3, [r5, #32]
   1c174:	tst	r3, #1
   1c178:	bne	1c260 <__assert_fail@plt+0xa498>
   1c17c:	ldr	r9, [r5, #8]
   1c180:	ldr	r7, [r5, #12]
   1c184:	cmp	r7, r9
   1c188:	strne	r9, [sp, #20]
   1c18c:	beq	1c390 <__assert_fail@plt+0xa5c8>
   1c190:	ldr	r3, [sp, #20]
   1c194:	ldr	ip, [r5]
   1c198:	subs	fp, r3, r7
   1c19c:	add	r9, ip, r7
   1c1a0:	beq	1c3cc <__assert_fail@plt+0xa604>
   1c1a4:	sub	r3, sl, #1
   1c1a8:	mov	r0, r9
   1c1ac:	cmp	fp, r3
   1c1b0:	movcs	fp, r3
   1c1b4:	mov	r1, #10
   1c1b8:	mov	r2, fp
   1c1bc:	bl	11ca8 <memchr@plt>
   1c1c0:	subs	r3, r0, #0
   1c1c4:	beq	1c2fc <__assert_fail@plt+0xa534>
   1c1c8:	rsb	sl, r9, r3
   1c1cc:	ldr	r2, [sp, #32]
   1c1d0:	adds	sl, sl, #1
   1c1d4:	beq	1c450 <__assert_fail@plt+0xa688>
   1c1d8:	mov	r0, r2
   1c1dc:	mov	r1, r9
   1c1e0:	mov	r2, sl
   1c1e4:	mov	r3, #0
   1c1e8:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1c1ec:	subs	r7, r0, #0
   1c1f0:	beq	1c440 <__assert_fail@plt+0xa678>
   1c1f4:	mov	r6, #0
   1c1f8:	ldr	r0, [sp, #32]
   1c1fc:	mov	r9, r6
   1c200:	mov	sl, r6
   1c204:	b	1c214 <__assert_fail@plt+0xa44c>
   1c208:	ldr	r0, [sp, #32]
   1c20c:	mov	r9, r6
   1c210:	mov	sl, r6
   1c214:	cmp	r0, #0
   1c218:	beq	1c324 <__assert_fail@plt+0xa55c>
   1c21c:	bl	1a6e4 <__assert_fail@plt+0x891c>
   1c220:	cmp	r7, #0
   1c224:	beq	1c280 <__assert_fail@plt+0xa4b8>
   1c228:	cmp	r9, #0
   1c22c:	beq	1c3b8 <__assert_fail@plt+0xa5f0>
   1c230:	ldr	r2, [r5, #36]	; 0x24
   1c234:	movw	r3, #8268	; 0x204c
   1c238:	mov	r0, r7
   1c23c:	ldrb	r1, [r2, r3]
   1c240:	orr	r1, r1, #1
   1c244:	strb	r1, [r2, r3]
   1c248:	ldr	r2, [sp, #36]	; 0x24
   1c24c:	ldr	r3, [r8]
   1c250:	cmp	r2, r3
   1c254:	bne	1c4ac <__assert_fail@plt+0xa6e4>
   1c258:	add	sp, sp, #44	; 0x2c
   1c25c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c260:	mov	r0, r5
   1c264:	bl	19c10 <__assert_fail@plt+0x7e48>
   1c268:	cmp	r0, #0
   1c26c:	bne	1c31c <__assert_fail@plt+0xa554>
   1c270:	ldrb	r3, [r5, #32]
   1c274:	bfi	r3, r0, #0, #1
   1c278:	strb	r3, [r5, #32]
   1c27c:	b	1c17c <__assert_fail@plt+0xa3b4>
   1c280:	ldr	r2, [sp, #24]
   1c284:	ldr	r3, [r2]
   1c288:	cmp	r3, #0
   1c28c:	bne	1c2a8 <__assert_fail@plt+0xa4e0>
   1c290:	ldr	r2, [sp, #28]
   1c294:	ldr	r3, [sp, #24]
   1c298:	str	r9, [r2]
   1c29c:	str	r6, [r3]
   1c2a0:	mov	r0, r6
   1c2a4:	b	1c248 <__assert_fail@plt+0xa480>
   1c2a8:	add	r4, r6, #1
   1c2ac:	cmp	r3, r4
   1c2b0:	ldr	r3, [sp, #28]
   1c2b4:	ldr	r0, [r3]
   1c2b8:	bcc	1c368 <__assert_fail@plt+0xa5a0>
   1c2bc:	mov	r2, r4
   1c2c0:	mov	r1, r9
   1c2c4:	bl	11978 <memcpy@plt>
   1c2c8:	ldr	r2, [sp, #24]
   1c2cc:	ldr	r3, [r2]
   1c2d0:	cmp	r3, r6
   1c2d4:	ldrne	r3, [sp, #24]
   1c2d8:	strne	r6, [r3]
   1c2dc:	cmp	r9, #0
   1c2e0:	beq	1c2ec <__assert_fail@plt+0xa524>
   1c2e4:	mov	r0, r9
   1c2e8:	bl	11948 <free@plt>
   1c2ec:	cmp	r7, #0
   1c2f0:	mvnne	r0, #0
   1c2f4:	beq	1c2a0 <__assert_fail@plt+0xa4d8>
   1c2f8:	b	1c248 <__assert_fail@plt+0xa480>
   1c2fc:	cmp	fp, #0
   1c300:	ldr	r0, [sp, #32]
   1c304:	beq	1c33c <__assert_fail@plt+0xa574>
   1c308:	mov	r1, r9
   1c30c:	mov	r2, fp
   1c310:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1c314:	cmp	r0, #0
   1c318:	beq	1c330 <__assert_fail@plt+0xa568>
   1c31c:	mov	r7, r0
   1c320:	b	1c1f4 <__assert_fail@plt+0xa42c>
   1c324:	mov	r0, r4
   1c328:	bl	19a1c <__assert_fail@plt+0x7c54>
   1c32c:	b	1c220 <__assert_fail@plt+0xa458>
   1c330:	ldr	r3, [r5, #8]
   1c334:	ldr	r7, [r5, #12]
   1c338:	str	r3, [sp, #20]
   1c33c:	ldr	r3, [sp, #20]
   1c340:	add	r7, r7, fp
   1c344:	rsb	sl, fp, sl
   1c348:	add	r6, r6, fp
   1c34c:	cmp	r7, r3
   1c350:	strls	r7, [r5, #12]
   1c354:	bls	1c170 <__assert_fail@plt+0xa3a8>
   1c358:	bl	11bf4 <__errno_location@plt>
   1c35c:	mov	r2, #22
   1c360:	str	r2, [r0]
   1c364:	b	1c170 <__assert_fail@plt+0xa3a8>
   1c368:	mov	r1, r4
   1c36c:	bl	1aac0 <__assert_fail@plt+0x8cf8>
   1c370:	cmp	r0, #0
   1c374:	mvneq	r7, #0
   1c378:	beq	1c2dc <__assert_fail@plt+0xa514>
   1c37c:	ldr	r2, [sp, #28]
   1c380:	ldr	r3, [r2]
   1c384:	cmp	r0, r3
   1c388:	strne	r0, [r2]
   1c38c:	b	1c2bc <__assert_fail@plt+0xa4f4>
   1c390:	mov	r0, r5
   1c394:	bl	19a44 <__assert_fail@plt+0x7c7c>
   1c398:	cmp	r0, #0
   1c39c:	bne	1c31c <__assert_fail@plt+0xa554>
   1c3a0:	ldr	r3, [r5, #8]
   1c3a4:	ldr	r7, [r5, #12]
   1c3a8:	str	r3, [sp, #20]
   1c3ac:	b	1c190 <__assert_fail@plt+0xa3c8>
   1c3b0:	mvn	r7, #0
   1c3b4:	b	1c230 <__assert_fail@plt+0xa468>
   1c3b8:	cmp	sl, #0
   1c3bc:	beq	1c230 <__assert_fail@plt+0xa468>
   1c3c0:	mov	r0, sl
   1c3c4:	bl	11948 <free@plt>
   1c3c8:	b	1c230 <__assert_fail@plt+0xa468>
   1c3cc:	ldr	r2, [sp, #32]
   1c3d0:	mov	r0, r2
   1c3d4:	mov	r9, #0
   1c3d8:	mov	r2, #0
   1c3dc:	mov	r3, #0
   1c3e0:	str	r9, [sp]
   1c3e4:	bl	1ab48 <__assert_fail@plt+0x8d80>
   1c3e8:	subs	r7, r0, #0
   1c3ec:	bne	1c430 <__assert_fail@plt+0xa668>
   1c3f0:	adds	r0, r6, #1
   1c3f4:	addeq	r0, r6, #2
   1c3f8:	bl	11aec <malloc@plt>
   1c3fc:	subs	sl, r0, #0
   1c400:	ldreq	r0, [sp, #32]
   1c404:	moveq	r9, sl
   1c408:	moveq	r6, sl
   1c40c:	mvneq	r7, #0
   1c410:	beq	1c214 <__assert_fail@plt+0xa44c>
   1c414:	cmp	r6, #0
   1c418:	ldr	r0, [sp, #32]
   1c41c:	bne	1c480 <__assert_fail@plt+0xa6b8>
   1c420:	mov	r3, #0
   1c424:	mov	r9, sl
   1c428:	strb	r3, [sl, r6]
   1c42c:	b	1c214 <__assert_fail@plt+0xa44c>
   1c430:	mov	r6, r9
   1c434:	ldr	r0, [sp, #32]
   1c438:	mov	sl, r9
   1c43c:	b	1c214 <__assert_fail@plt+0xa44c>
   1c440:	ldr	r3, [r5, #8]
   1c444:	ldr	r7, [r5, #12]
   1c448:	ldr	r2, [sp, #32]
   1c44c:	str	r3, [sp, #20]
   1c450:	ldr	r3, [sp, #20]
   1c454:	add	r7, r7, sl
   1c458:	add	r6, r6, sl
   1c45c:	cmp	r7, r3
   1c460:	strls	r7, [r5, #12]
   1c464:	bls	1c3d0 <__assert_fail@plt+0xa608>
   1c468:	str	r2, [sp, #16]
   1c46c:	bl	11bf4 <__errno_location@plt>
   1c470:	mov	r3, #22
   1c474:	ldr	r2, [sp, #16]
   1c478:	str	r3, [r0]
   1c47c:	b	1c3d0 <__assert_fail@plt+0xa608>
   1c480:	mov	r1, sl
   1c484:	mov	r2, r6
   1c488:	mov	r3, #0
   1c48c:	bl	1a228 <__assert_fail@plt+0x8460>
   1c490:	cmp	r0, #0
   1c494:	beq	1c4b0 <__assert_fail@plt+0xa6e8>
   1c498:	mov	r6, #0
   1c49c:	mov	r7, r0
   1c4a0:	mov	r9, r6
   1c4a4:	ldr	r0, [sp, #32]
   1c4a8:	b	1c214 <__assert_fail@plt+0xa44c>
   1c4ac:	bl	119d8 <__stack_chk_fail@plt>
   1c4b0:	ldr	r0, [sp, #32]
   1c4b4:	b	1c420 <__assert_fail@plt+0xa658>
   1c4b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c4bc:	cmp	r3, #0
   1c4c0:	sub	sp, sp, #20
   1c4c4:	ldr	r7, [r1]
   1c4c8:	ldrne	r8, [r3]
   1c4cc:	mov	r4, r0
   1c4d0:	stmib	sp, {r1, r2, r3}
   1c4d4:	ldreq	r8, [sp, #12]
   1c4d8:	cmp	r7, #0
   1c4dc:	ldr	r6, [r2]
   1c4e0:	beq	1c69c <__assert_fail@plt+0xa8d4>
   1c4e4:	cmp	r6, #3
   1c4e8:	subhi	r6, r6, #3
   1c4ec:	bls	1c6cc <__assert_fail@plt+0xa904>
   1c4f0:	mov	fp, r7
   1c4f4:	mov	r5, #0
   1c4f8:	b	1c538 <__assert_fail@plt+0xa770>
   1c4fc:	ldr	r1, [r4, #28]
   1c500:	cmp	r1, #0
   1c504:	bne	1c554 <__assert_fail@plt+0xa78c>
   1c508:	ldr	r1, [r4]
   1c50c:	add	r0, r3, #1
   1c510:	str	r0, [r4, #12]
   1c514:	ldrb	r9, [r1, r3]
   1c518:	cmp	r5, r6
   1c51c:	beq	1c57c <__assert_fail@plt+0xa7b4>
   1c520:	add	r2, fp, #1
   1c524:	cmp	r9, #10
   1c528:	strb	r9, [fp]
   1c52c:	add	r5, r5, #1
   1c530:	mov	fp, r2
   1c534:	beq	1c568 <__assert_fail@plt+0xa7a0>
   1c538:	ldrb	r3, [r4, #32]
   1c53c:	tst	r3, #1
   1c540:	bne	1c554 <__assert_fail@plt+0xa78c>
   1c544:	ldr	r3, [r4, #12]
   1c548:	ldr	r1, [r4, #8]
   1c54c:	cmp	r3, r1
   1c550:	bcc	1c4fc <__assert_fail@plt+0xa734>
   1c554:	mov	r0, r4
   1c558:	bl	1bca8 <__assert_fail@plt+0x9ee0>
   1c55c:	cmn	r0, #1
   1c560:	mov	r9, r0
   1c564:	bne	1c518 <__assert_fail@plt+0xa750>
   1c568:	mov	r3, #0
   1c56c:	strb	r3, [fp]
   1c570:	mov	r0, r5
   1c574:	add	sp, sp, #20
   1c578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c57c:	cmp	r8, #0
   1c580:	cmpne	r5, r8
   1c584:	bhi	1c5d0 <__assert_fail@plt+0xa808>
   1c588:	add	ip, r5, #3
   1c58c:	mov	r0, r7
   1c590:	cmp	ip, #1024	; 0x400
   1c594:	movcs	r2, #1024	; 0x400
   1c598:	movcc	r2, #256	; 0x100
   1c59c:	add	sl, ip, r2
   1c5a0:	mov	r1, sl
   1c5a4:	bl	1aac0 <__assert_fail@plt+0x8cf8>
   1c5a8:	ldr	r3, [sp, #4]
   1c5ac:	cmp	r0, #0
   1c5b0:	str	r0, [r3]
   1c5b4:	beq	1c658 <__assert_fail@plt+0xa890>
   1c5b8:	ldr	r3, [sp, #8]
   1c5bc:	sub	r6, sl, #3
   1c5c0:	add	fp, r0, r5
   1c5c4:	mov	r7, r0
   1c5c8:	str	sl, [r3]
   1c5cc:	b	1c520 <__assert_fail@plt+0xa758>
   1c5d0:	cmp	r9, #10
   1c5d4:	mov	r6, fp
   1c5d8:	bne	1c604 <__assert_fail@plt+0xa83c>
   1c5dc:	b	1c630 <__assert_fail@plt+0xa868>
   1c5e0:	ldr	r1, [r4, #28]
   1c5e4:	add	r0, r3, #1
   1c5e8:	cmp	r1, #0
   1c5ec:	bne	1c620 <__assert_fail@plt+0xa858>
   1c5f0:	ldr	r1, [r4]
   1c5f4:	str	r0, [r4, #12]
   1c5f8:	ldrb	r0, [r1, r3]
   1c5fc:	cmp	r0, #10
   1c600:	beq	1c630 <__assert_fail@plt+0xa868>
   1c604:	ldrb	r3, [r4, #32]
   1c608:	tst	r3, #1
   1c60c:	bne	1c620 <__assert_fail@plt+0xa858>
   1c610:	ldr	r3, [r4, #12]
   1c614:	ldr	r1, [r4, #8]
   1c618:	cmp	r3, r1
   1c61c:	bcc	1c5e0 <__assert_fail@plt+0xa818>
   1c620:	mov	r0, r4
   1c624:	bl	1bca8 <__assert_fail@plt+0x9ee0>
   1c628:	cmn	r0, #1
   1c62c:	bne	1c5fc <__assert_fail@plt+0xa834>
   1c630:	ldr	r3, [sp, #12]
   1c634:	add	fp, fp, #1
   1c638:	add	r5, r5, #1
   1c63c:	cmp	r3, #0
   1c640:	mov	r3, #10
   1c644:	strb	r3, [r6]
   1c648:	ldrne	r2, [sp, #12]
   1c64c:	movne	r3, #0
   1c650:	strne	r3, [r2]
   1c654:	b	1c568 <__assert_fail@plt+0xa7a0>
   1c658:	str	r0, [sp]
   1c65c:	bl	11bf4 <__errno_location@plt>
   1c660:	mov	r4, r0
   1c664:	mov	r0, r7
   1c668:	ldr	r5, [r4]
   1c66c:	bl	11948 <free@plt>
   1c670:	ldr	r1, [sp]
   1c674:	ldr	r3, [sp, #12]
   1c678:	ldr	r2, [sp, #8]
   1c67c:	cmp	r3, #0
   1c680:	str	r1, [r2]
   1c684:	strne	r1, [r3]
   1c688:	str	r5, [r4]
   1c68c:	mvn	r5, #0
   1c690:	mov	r0, r5
   1c694:	add	sp, sp, #20
   1c698:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c69c:	mov	r0, #256	; 0x100
   1c6a0:	bl	11aec <malloc@plt>
   1c6a4:	ldr	r3, [sp, #4]
   1c6a8:	cmp	r0, #0
   1c6ac:	mov	r7, r0
   1c6b0:	str	r0, [r3]
   1c6b4:	beq	1c6e0 <__assert_fail@plt+0xa918>
   1c6b8:	ldr	r2, [sp, #8]
   1c6bc:	mov	r3, #256	; 0x100
   1c6c0:	mov	r6, #253	; 0xfd
   1c6c4:	str	r3, [r2]
   1c6c8:	b	1c4f0 <__assert_fail@plt+0xa728>
   1c6cc:	bl	11bf4 <__errno_location@plt>
   1c6d0:	mvn	r5, #0
   1c6d4:	mov	r3, #22
   1c6d8:	str	r3, [r0]
   1c6dc:	b	1c570 <__assert_fail@plt+0xa7a8>
   1c6e0:	ldr	r3, [sp, #12]
   1c6e4:	ldr	r2, [sp, #8]
   1c6e8:	cmp	r3, #0
   1c6ec:	str	r0, [r2]
   1c6f0:	mvneq	r5, #0
   1c6f4:	strne	r0, [r3]
   1c6f8:	mvnne	r5, #0
   1c6fc:	b	1c570 <__assert_fail@plt+0xa7a8>
   1c700:	cmp	r0, #0
   1c704:	bxeq	lr
   1c708:	b	11948 <free@plt>
   1c70c:	b	1a1e4 <__assert_fail@plt+0x841c>
   1c710:	b	1a1e4 <__assert_fail@plt+0x841c>
   1c714:	push	{r1, r2, r3}
   1c718:	push	{r4, lr}
   1c71c:	movw	r4, #44624	; 0xae50
   1c720:	movt	r4, #3
   1c724:	sub	sp, sp, #12
   1c728:	add	r3, sp, #24
   1c72c:	ldr	ip, [r4]
   1c730:	mov	r2, r3
   1c734:	ldr	r1, [sp, #20]
   1c738:	str	r3, [sp]
   1c73c:	str	ip, [sp, #4]
   1c740:	bl	1a1e4 <__assert_fail@plt+0x841c>
   1c744:	ldr	r2, [sp, #4]
   1c748:	ldr	r3, [r4]
   1c74c:	cmp	r2, r3
   1c750:	bne	1c764 <__assert_fail@plt+0xa99c>
   1c754:	add	sp, sp, #12
   1c758:	pop	{r4, lr}
   1c75c:	add	sp, sp, #12
   1c760:	bx	lr
   1c764:	bl	119d8 <__stack_chk_fail@plt>
   1c768:	push	{r1, r2, r3}
   1c76c:	push	{r4, lr}
   1c770:	movw	r4, #44624	; 0xae50
   1c774:	movt	r4, #3
   1c778:	sub	sp, sp, #12
   1c77c:	add	r3, sp, #24
   1c780:	ldr	ip, [r4]
   1c784:	mov	r2, r3
   1c788:	ldr	r1, [sp, #20]
   1c78c:	str	r3, [sp]
   1c790:	str	ip, [sp, #4]
   1c794:	bl	1a1e4 <__assert_fail@plt+0x841c>
   1c798:	ldr	r2, [sp, #4]
   1c79c:	ldr	r3, [r4]
   1c7a0:	cmp	r2, r3
   1c7a4:	bne	1c7b8 <__assert_fail@plt+0xa9f0>
   1c7a8:	add	sp, sp, #12
   1c7ac:	pop	{r4, lr}
   1c7b0:	add	sp, sp, #12
   1c7b4:	bx	lr
   1c7b8:	bl	119d8 <__stack_chk_fail@plt>
   1c7bc:	push	{r0, r1, r2, r3}
   1c7c0:	push	{r4, lr}
   1c7c4:	movw	r4, #44624	; 0xae50
   1c7c8:	movt	r4, #3
   1c7cc:	sub	sp, sp, #16
   1c7d0:	add	r3, sp, #28
   1c7d4:	add	r0, sp, #8
   1c7d8:	ldr	ip, [r4]
   1c7dc:	mov	r2, r3
   1c7e0:	ldr	r1, [sp, #24]
   1c7e4:	str	r3, [sp, #4]
   1c7e8:	str	ip, [sp, #12]
   1c7ec:	bl	1f100 <__assert_fail@plt+0xd338>
   1c7f0:	ldr	r2, [sp, #12]
   1c7f4:	ldr	r3, [r4]
   1c7f8:	cmp	r0, #0
   1c7fc:	ldrge	r0, [sp, #8]
   1c800:	movlt	r0, #0
   1c804:	cmp	r2, r3
   1c808:	bne	1c81c <__assert_fail@plt+0xaa54>
   1c80c:	add	sp, sp, #16
   1c810:	pop	{r4, lr}
   1c814:	add	sp, sp, #16
   1c818:	bx	lr
   1c81c:	bl	119d8 <__stack_chk_fail@plt>
   1c820:	push	{r4, lr}
   1c824:	movw	r4, #44624	; 0xae50
   1c828:	movt	r4, #3
   1c82c:	sub	sp, sp, #8
   1c830:	mov	r2, r1
   1c834:	mov	r1, r0
   1c838:	ldr	r3, [r4]
   1c83c:	mov	r0, sp
   1c840:	str	r3, [sp, #4]
   1c844:	bl	1f100 <__assert_fail@plt+0xd338>
   1c848:	ldr	r2, [sp, #4]
   1c84c:	ldr	r3, [r4]
   1c850:	cmp	r0, #0
   1c854:	ldrge	r0, [sp]
   1c858:	movlt	r0, #0
   1c85c:	cmp	r2, r3
   1c860:	bne	1c86c <__assert_fail@plt+0xaaa4>
   1c864:	add	sp, sp, #8
   1c868:	pop	{r4, pc}
   1c86c:	bl	119d8 <__stack_chk_fail@plt>
   1c870:	push	{r4, r5, r6, r7, lr}
   1c874:	movw	r4, #44624	; 0xae50
   1c878:	movt	r4, #3
   1c87c:	sub	sp, sp, #28
   1c880:	mov	r6, #0
   1c884:	ldr	r3, [r4]
   1c888:	str	r6, [sp, #16]
   1c88c:	str	r3, [sp, #20]
   1c890:	bl	11a44 <tmpfile64@plt>
   1c894:	subs	r7, r0, #0
   1c898:	beq	1c90c <__assert_fail@plt+0xab44>
   1c89c:	bl	11c84 <fileno@plt>
   1c8a0:	bl	11a2c <dup@plt>
   1c8a4:	mov	r5, r0
   1c8a8:	mov	r0, r7
   1c8ac:	bl	11cc0 <fclose@plt>
   1c8b0:	cmn	r5, #1
   1c8b4:	beq	1c90c <__assert_fail@plt+0xab44>
   1c8b8:	mov	r0, #8
   1c8bc:	bl	11aec <malloc@plt>
   1c8c0:	subs	r7, r0, #0
   1c8c4:	beq	1c928 <__assert_fail@plt+0xab60>
   1c8c8:	movw	r3, #30544	; 0x7750
   1c8cc:	movt	r3, #2
   1c8d0:	add	r2, r3, #48	; 0x30
   1c8d4:	stm	r7, {r5, r6}
   1c8d8:	movw	ip, #578	; 0x242
   1c8dc:	ldr	r3, [r3, #44]	; 0x2c
   1c8e0:	ldm	r2, {r0, r1, r2}
   1c8e4:	str	ip, [sp, #12]
   1c8e8:	stm	sp, {r0, r1, r2}
   1c8ec:	mov	r2, r5
   1c8f0:	add	r0, sp, #16
   1c8f4:	mov	r1, r7
   1c8f8:	bl	1a5f8 <__assert_fail@plt+0x8830>
   1c8fc:	cmp	r0, r6
   1c900:	beq	1c934 <__assert_fail@plt+0xab6c>
   1c904:	mov	r0, r7
   1c908:	bl	199cc <__assert_fail@plt+0x7c04>
   1c90c:	mov	r0, #0
   1c910:	ldr	r2, [sp, #20]
   1c914:	ldr	r3, [r4]
   1c918:	cmp	r2, r3
   1c91c:	bne	1c93c <__assert_fail@plt+0xab74>
   1c920:	add	sp, sp, #28
   1c924:	pop	{r4, r5, r6, r7, pc}
   1c928:	mov	r0, r5
   1c92c:	bl	11d98 <close@plt>
   1c930:	b	1c90c <__assert_fail@plt+0xab44>
   1c934:	ldr	r0, [sp, #16]
   1c938:	b	1c910 <__assert_fail@plt+0xab48>
   1c93c:	bl	119d8 <__stack_chk_fail@plt>
   1c940:	cmp	r2, #2
   1c944:	push	{r4, lr}
   1c948:	bhi	1c974 <__assert_fail@plt+0xabac>
   1c94c:	adds	ip, r3, #0
   1c950:	movne	ip, #1
   1c954:	cmp	r1, #0
   1c958:	orreq	ip, ip, #1
   1c95c:	cmp	ip, #0
   1c960:	bne	1c96c <__assert_fail@plt+0xaba4>
   1c964:	cmp	r2, #2
   1c968:	bne	1c974 <__assert_fail@plt+0xabac>
   1c96c:	pop	{r4, lr}
   1c970:	b	1a910 <__assert_fail@plt+0x8b48>
   1c974:	bl	11bf4 <__errno_location@plt>
   1c978:	mov	r3, #22
   1c97c:	str	r3, [r0]
   1c980:	mvn	r0, #0
   1c984:	pop	{r4, pc}
   1c988:	cmp	r1, #0
   1c98c:	mov	r3, #8192	; 0x2000
   1c990:	moveq	r2, #2
   1c994:	movne	r2, #0
   1c998:	b	1a910 <__assert_fail@plt+0x8b48>
   1c99c:	cmp	r1, #0
   1c9a0:	ldrne	r2, [r0, #36]	; 0x24
   1c9a4:	movwne	r3, #8216	; 0x2018
   1c9a8:	strne	r1, [r2, r3]
   1c9ac:	bx	lr
   1c9b0:	ldr	r2, [r0, #36]	; 0x24
   1c9b4:	movw	r3, #8216	; 0x2018
   1c9b8:	ldr	r0, [r2, r3]
   1c9bc:	bx	lr
   1c9c0:	cmp	r1, #0
   1c9c4:	bxeq	lr
   1c9c8:	add	r0, r0, #36	; 0x24
   1c9cc:	mov	r2, #1
   1c9d0:	b	1aa00 <__assert_fail@plt+0x8c38>
   1c9d4:	ldr	r3, [r0, #36]	; 0x24
   1c9d8:	movw	r2, #8224	; 0x2020
   1c9dc:	ldr	r0, [r3, r2]
   1c9e0:	cmp	r0, #0
   1c9e4:	addne	r2, r2, #48	; 0x30
   1c9e8:	movweq	r0, #30848	; 0x7880
   1c9ec:	movteq	r0, #2
   1c9f0:	ldrbne	r1, [r3, r2]
   1c9f4:	orrne	r1, r1, #32
   1c9f8:	strbne	r1, [r3, r2]
   1c9fc:	bx	lr
   1ca00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ca04:	movw	r9, #44624	; 0xae50
   1ca08:	movt	r9, #3
   1ca0c:	subs	r5, r2, #0
   1ca10:	sub	sp, sp, #12
   1ca14:	mov	r4, r0
   1ca18:	ldr	r2, [r9]
   1ca1c:	mov	r8, r3
   1ca20:	ldr	sl, [sp, #48]	; 0x30
   1ca24:	str	r2, [sp, #4]
   1ca28:	beq	1cd90 <__assert_fail@plt+0xafc8>
   1ca2c:	mov	r6, r1
   1ca30:	mov	r7, #0
   1ca34:	ldrb	fp, [r6], #1
   1ca38:	cmp	fp, #127	; 0x7f
   1ca3c:	cmpne	fp, #31
   1ca40:	bls	1ca60 <__assert_fail@plt+0xac98>
   1ca44:	cmp	r8, #0
   1ca48:	beq	1cc48 <__assert_fail@plt+0xae80>
   1ca4c:	mov	r0, r8
   1ca50:	mov	r1, fp
   1ca54:	bl	11bc4 <strchr@plt>
   1ca58:	cmp	r0, #0
   1ca5c:	beq	1cc40 <__assert_fail@plt+0xae78>
   1ca60:	ldrb	r3, [r4, #32]
   1ca64:	tst	r3, #1
   1ca68:	beq	1cb3c <__assert_fail@plt+0xad74>
   1ca6c:	ldr	r3, [r4, #12]
   1ca70:	ldr	r2, [r4, #4]
   1ca74:	cmp	r3, r2
   1ca78:	bcs	1cb3c <__assert_fail@plt+0xad74>
   1ca7c:	ldr	r2, [r4]
   1ca80:	add	r1, r3, #1
   1ca84:	str	r1, [r4, #12]
   1ca88:	mov	r1, #92	; 0x5c
   1ca8c:	strb	r1, [r2, r3]
   1ca90:	ldrb	r2, [r6, #-1]
   1ca94:	cmp	r2, #10
   1ca98:	beq	1cb64 <__assert_fail@plt+0xad9c>
   1ca9c:	cmp	r2, #13
   1caa0:	beq	1cb98 <__assert_fail@plt+0xadd0>
   1caa4:	cmp	r2, #12
   1caa8:	beq	1cbec <__assert_fail@plt+0xae24>
   1caac:	cmp	r2, #11
   1cab0:	beq	1cca4 <__assert_fail@plt+0xaedc>
   1cab4:	cmp	r2, #8
   1cab8:	beq	1ccf8 <__assert_fail@plt+0xaf30>
   1cabc:	cmp	r2, #0
   1cac0:	bne	1cd78 <__assert_fail@plt+0xafb0>
   1cac4:	ldrb	r3, [r4, #32]
   1cac8:	tst	r3, #1
   1cacc:	beq	1cae0 <__assert_fail@plt+0xad18>
   1cad0:	ldr	r3, [r4, #12]
   1cad4:	ldr	r2, [r4, #4]
   1cad8:	cmp	r3, r2
   1cadc:	bcc	1cd2c <__assert_fail@plt+0xaf64>
   1cae0:	mov	r0, r4
   1cae4:	add	r1, sp, #3
   1cae8:	mov	r2, #1
   1caec:	mov	r3, #0
   1caf0:	mov	ip, #48	; 0x30
   1caf4:	strb	ip, [sp, #3]
   1caf8:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1cafc:	add	r7, r7, #2
   1cb00:	subs	r5, r5, #1
   1cb04:	add	r7, r7, #1
   1cb08:	bne	1ca34 <__assert_fail@plt+0xac6c>
   1cb0c:	ldr	r0, [r4, #36]	; 0x24
   1cb10:	movw	r1, #8268	; 0x204c
   1cb14:	ldr	r2, [sp, #4]
   1cb18:	cmp	sl, #0
   1cb1c:	ldr	r3, [r9]
   1cb20:	strne	r7, [sl]
   1cb24:	cmp	r2, r3
   1cb28:	ldrb	r0, [r0, r1]
   1cb2c:	sbfx	r0, r0, #0, #1
   1cb30:	bne	1cd98 <__assert_fail@plt+0xafd0>
   1cb34:	add	sp, sp, #12
   1cb38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb3c:	mov	r2, #1
   1cb40:	mov	r0, r4
   1cb44:	add	r1, sp, #3
   1cb48:	mov	r3, #0
   1cb4c:	mov	ip, #92	; 0x5c
   1cb50:	strb	ip, [sp, #3]
   1cb54:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1cb58:	ldrb	r2, [r6, #-1]
   1cb5c:	cmp	r2, #10
   1cb60:	bne	1ca9c <__assert_fail@plt+0xacd4>
   1cb64:	ldrb	r3, [r4, #32]
   1cb68:	tst	r3, #1
   1cb6c:	beq	1cbcc <__assert_fail@plt+0xae04>
   1cb70:	ldr	r3, [r4, #12]
   1cb74:	ldr	r2, [r4, #4]
   1cb78:	cmp	r3, r2
   1cb7c:	bcs	1cbcc <__assert_fail@plt+0xae04>
   1cb80:	ldr	r2, [r4]
   1cb84:	add	r1, r3, #1
   1cb88:	str	r1, [r4, #12]
   1cb8c:	mov	r1, #110	; 0x6e
   1cb90:	strb	r1, [r2, r3]
   1cb94:	b	1cafc <__assert_fail@plt+0xad34>
   1cb98:	ldrb	r3, [r4, #32]
   1cb9c:	tst	r3, #1
   1cba0:	beq	1cc84 <__assert_fail@plt+0xaebc>
   1cba4:	ldr	r3, [r4, #12]
   1cba8:	ldr	r2, [r4, #4]
   1cbac:	cmp	r3, r2
   1cbb0:	bcs	1cc84 <__assert_fail@plt+0xaebc>
   1cbb4:	ldr	r2, [r4]
   1cbb8:	add	r1, r3, #1
   1cbbc:	str	r1, [r4, #12]
   1cbc0:	mov	r1, #114	; 0x72
   1cbc4:	strb	r1, [r2, r3]
   1cbc8:	b	1cafc <__assert_fail@plt+0xad34>
   1cbcc:	mov	r0, r4
   1cbd0:	add	r1, sp, #3
   1cbd4:	mov	r2, #1
   1cbd8:	mov	r3, #0
   1cbdc:	mov	ip, #110	; 0x6e
   1cbe0:	strb	ip, [sp, #3]
   1cbe4:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1cbe8:	b	1cafc <__assert_fail@plt+0xad34>
   1cbec:	ldrb	r3, [r4, #32]
   1cbf0:	tst	r3, #1
   1cbf4:	beq	1cc20 <__assert_fail@plt+0xae58>
   1cbf8:	ldr	r3, [r4, #12]
   1cbfc:	ldr	r2, [r4, #4]
   1cc00:	cmp	r3, r2
   1cc04:	bcs	1cc20 <__assert_fail@plt+0xae58>
   1cc08:	ldr	r2, [r4]
   1cc0c:	add	r1, r3, #1
   1cc10:	str	r1, [r4, #12]
   1cc14:	mov	r1, #102	; 0x66
   1cc18:	strb	r1, [r2, r3]
   1cc1c:	b	1cafc <__assert_fail@plt+0xad34>
   1cc20:	mov	r0, r4
   1cc24:	add	r1, sp, #3
   1cc28:	mov	r2, #1
   1cc2c:	mov	r3, #0
   1cc30:	mov	ip, #102	; 0x66
   1cc34:	strb	ip, [sp, #3]
   1cc38:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1cc3c:	b	1cafc <__assert_fail@plt+0xad34>
   1cc40:	cmp	fp, #92	; 0x5c
   1cc44:	beq	1ca60 <__assert_fail@plt+0xac98>
   1cc48:	ldrb	r3, [r4, #32]
   1cc4c:	tst	r3, #1
   1cc50:	beq	1cc64 <__assert_fail@plt+0xae9c>
   1cc54:	ldr	r3, [r4, #12]
   1cc58:	ldr	r2, [r4, #4]
   1cc5c:	cmp	r3, r2
   1cc60:	bcc	1cd44 <__assert_fail@plt+0xaf7c>
   1cc64:	mov	r0, r4
   1cc68:	add	r1, sp, #3
   1cc6c:	mov	r2, #1
   1cc70:	mov	r3, #0
   1cc74:	strb	fp, [sp, #3]
   1cc78:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1cc7c:	add	r7, r7, #1
   1cc80:	b	1cb00 <__assert_fail@plt+0xad38>
   1cc84:	mov	r0, r4
   1cc88:	add	r1, sp, #3
   1cc8c:	mov	r2, #1
   1cc90:	mov	r3, #0
   1cc94:	mov	ip, #114	; 0x72
   1cc98:	strb	ip, [sp, #3]
   1cc9c:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1cca0:	b	1cafc <__assert_fail@plt+0xad34>
   1cca4:	ldrb	r3, [r4, #32]
   1cca8:	tst	r3, #1
   1ccac:	beq	1ccd8 <__assert_fail@plt+0xaf10>
   1ccb0:	ldr	r3, [r4, #12]
   1ccb4:	ldr	r2, [r4, #4]
   1ccb8:	cmp	r3, r2
   1ccbc:	bcs	1ccd8 <__assert_fail@plt+0xaf10>
   1ccc0:	ldr	r2, [r4]
   1ccc4:	add	r1, r3, #1
   1ccc8:	str	r1, [r4, #12]
   1cccc:	mov	r1, #118	; 0x76
   1ccd0:	strb	r1, [r2, r3]
   1ccd4:	b	1cafc <__assert_fail@plt+0xad34>
   1ccd8:	mov	r0, r4
   1ccdc:	add	r1, sp, #3
   1cce0:	mov	r2, #1
   1cce4:	mov	r3, #0
   1cce8:	mov	ip, #118	; 0x76
   1ccec:	strb	ip, [sp, #3]
   1ccf0:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1ccf4:	b	1cafc <__assert_fail@plt+0xad34>
   1ccf8:	ldrb	r3, [r4, #32]
   1ccfc:	tst	r3, #1
   1cd00:	beq	1cd58 <__assert_fail@plt+0xaf90>
   1cd04:	ldr	r3, [r4, #12]
   1cd08:	ldr	r2, [r4, #4]
   1cd0c:	cmp	r3, r2
   1cd10:	bcs	1cd58 <__assert_fail@plt+0xaf90>
   1cd14:	ldr	r2, [r4]
   1cd18:	add	r1, r3, #1
   1cd1c:	str	r1, [r4, #12]
   1cd20:	mov	r1, #98	; 0x62
   1cd24:	strb	r1, [r2, r3]
   1cd28:	b	1cafc <__assert_fail@plt+0xad34>
   1cd2c:	ldr	r2, [r4]
   1cd30:	add	r1, r3, #1
   1cd34:	str	r1, [r4, #12]
   1cd38:	mov	r1, #48	; 0x30
   1cd3c:	strb	r1, [r2, r3]
   1cd40:	b	1cafc <__assert_fail@plt+0xad34>
   1cd44:	ldr	r2, [r4]
   1cd48:	add	r1, r3, #1
   1cd4c:	str	r1, [r4, #12]
   1cd50:	strb	fp, [r2, r3]
   1cd54:	b	1cc7c <__assert_fail@plt+0xaeb4>
   1cd58:	mov	r0, r4
   1cd5c:	add	r1, sp, #3
   1cd60:	mov	r2, #1
   1cd64:	mov	r3, #0
   1cd68:	mov	ip, #98	; 0x62
   1cd6c:	strb	ip, [sp, #3]
   1cd70:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1cd74:	b	1cafc <__assert_fail@plt+0xad34>
   1cd78:	movw	r1, #30852	; 0x7884
   1cd7c:	mov	r0, r4
   1cd80:	movt	r1, #2
   1cd84:	add	r7, r7, #4
   1cd88:	bl	1c714 <__assert_fail@plt+0xa94c>
   1cd8c:	b	1cb00 <__assert_fail@plt+0xad38>
   1cd90:	mov	r7, r5
   1cd94:	b	1cb0c <__assert_fail@plt+0xad44>
   1cd98:	bl	119d8 <__stack_chk_fail@plt>
   1cd9c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1cda0:	movw	r7, #44624	; 0xae50
   1cda4:	movt	r7, #3
   1cda8:	sub	sp, sp, #12
   1cdac:	subs	r8, r2, #0
   1cdb0:	mov	r4, r0
   1cdb4:	ldr	r3, [r7]
   1cdb8:	ldr	r9, [sp, #40]	; 0x28
   1cdbc:	moveq	r0, r8
   1cdc0:	str	r3, [sp, #4]
   1cdc4:	beq	1ceec <__assert_fail@plt+0xb124>
   1cdc8:	add	r5, r1, #1
   1cdcc:	mov	r6, r8
   1cdd0:	b	1ce54 <__assert_fail@plt+0xb08c>
   1cdd4:	ldr	r3, [r4, #12]
   1cdd8:	ldr	r2, [r4, #4]
   1cddc:	cmp	r3, r2
   1cde0:	bcs	1ce60 <__assert_fail@plt+0xb098>
   1cde4:	ldrb	r2, [r5, #-1]
   1cde8:	add	r0, r3, #1
   1cdec:	ldr	r1, [r4]
   1cdf0:	str	r0, [r4, #12]
   1cdf4:	lsr	r2, r2, #4
   1cdf8:	cmp	r2, #9
   1cdfc:	addle	r2, r2, #48	; 0x30
   1ce00:	addgt	r2, r2, #55	; 0x37
   1ce04:	strb	r2, [r1, r3]
   1ce08:	ldrb	r3, [r4, #32]
   1ce0c:	tst	r3, #1
   1ce10:	beq	1ce98 <__assert_fail@plt+0xb0d0>
   1ce14:	ldr	r3, [r4, #12]
   1ce18:	ldr	r2, [r4, #4]
   1ce1c:	cmp	r3, r2
   1ce20:	bcs	1ce98 <__assert_fail@plt+0xb0d0>
   1ce24:	ldrb	r2, [r5, #-1]
   1ce28:	add	r0, r3, #1
   1ce2c:	ldr	r1, [r4]
   1ce30:	add	r5, r5, #1
   1ce34:	and	r2, r2, #15
   1ce38:	str	r0, [r4, #12]
   1ce3c:	cmp	r2, #9
   1ce40:	addle	r2, r2, #48	; 0x30
   1ce44:	addgt	r2, r2, #55	; 0x37
   1ce48:	subs	r6, r6, #1
   1ce4c:	strb	r2, [r1, r3]
   1ce50:	beq	1ced0 <__assert_fail@plt+0xb108>
   1ce54:	ldrb	r3, [r4, #32]
   1ce58:	tst	r3, #1
   1ce5c:	bne	1cdd4 <__assert_fail@plt+0xb00c>
   1ce60:	ldrb	r3, [r5, #-1]
   1ce64:	mov	r0, r4
   1ce68:	add	r1, sp, #3
   1ce6c:	mov	r2, #1
   1ce70:	lsr	r3, r3, #4
   1ce74:	cmp	r3, #9
   1ce78:	addle	ip, r3, #48	; 0x30
   1ce7c:	addgt	ip, r3, #55	; 0x37
   1ce80:	mov	r3, #0
   1ce84:	strb	ip, [sp, #3]
   1ce88:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1ce8c:	ldrb	r3, [r4, #32]
   1ce90:	tst	r3, #1
   1ce94:	bne	1ce14 <__assert_fail@plt+0xb04c>
   1ce98:	ldrb	r3, [r5, #-1]
   1ce9c:	mov	r0, r4
   1cea0:	add	r1, sp, #3
   1cea4:	mov	r2, #1
   1cea8:	and	r3, r3, #15
   1ceac:	add	r5, r5, #1
   1ceb0:	cmp	r3, #9
   1ceb4:	addle	ip, r3, #48	; 0x30
   1ceb8:	addgt	ip, r3, #55	; 0x37
   1cebc:	mov	r3, #0
   1cec0:	strb	ip, [sp, #3]
   1cec4:	bl	1ac94 <__assert_fail@plt+0x8ecc>
   1cec8:	subs	r6, r6, #1
   1cecc:	bne	1ce54 <__assert_fail@plt+0xb08c>
   1ced0:	ldr	r2, [r4, #36]	; 0x24
   1ced4:	movw	r3, #8268	; 0x204c
   1ced8:	cmp	r9, #0
   1cedc:	lsl	r8, r8, #1
   1cee0:	strne	r8, [r9]
   1cee4:	ldrb	r0, [r2, r3]
   1cee8:	sbfx	r0, r0, #0, #1
   1ceec:	ldr	r2, [sp, #4]
   1cef0:	ldr	r3, [r7]
   1cef4:	cmp	r2, r3
   1cef8:	bne	1cf04 <__assert_fail@plt+0xb13c>
   1cefc:	add	sp, sp, #12
   1cf00:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1cf04:	bl	119d8 <__stack_chk_fail@plt>
   1cf08:	push	{r4, r5, r6, r7, r8, lr}
   1cf0c:	subs	r6, r2, #0
   1cf10:	mov	r8, r0
   1cf14:	ldr	r7, [sp, #24]
   1cf18:	beq	1cf4c <__assert_fail@plt+0xb184>
   1cf1c:	ldrsb	r2, [r1]
   1cf20:	cmp	r2, #0
   1cf24:	blt	1cf60 <__assert_fail@plt+0xb198>
   1cf28:	mov	ip, r1
   1cf2c:	mov	r4, #0
   1cf30:	b	1cf40 <__assert_fail@plt+0xb178>
   1cf34:	ldrsb	r5, [ip, #1]!
   1cf38:	cmp	r5, #0
   1cf3c:	blt	1cf64 <__assert_fail@plt+0xb19c>
   1cf40:	add	r4, r4, #1
   1cf44:	cmp	r4, r6
   1cf48:	bne	1cf34 <__assert_fail@plt+0xb16c>
   1cf4c:	str	r7, [sp, #24]
   1cf50:	mov	r0, r8
   1cf54:	mov	r2, r6
   1cf58:	pop	{r4, r5, r6, r7, r8, lr}
   1cf5c:	b	1ca00 <__assert_fail@plt+0xac38>
   1cf60:	mov	r4, #0
   1cf64:	cmp	r3, #0
   1cf68:	mov	r0, r1
   1cf6c:	mov	r1, r6
   1cf70:	ldrbne	r2, [r3]
   1cf74:	moveq	r2, r3
   1cf78:	bl	21454 <__assert_fail@plt+0xf68c>
   1cf7c:	cmp	r7, #0
   1cf80:	mov	r5, r0
   1cf84:	beq	1cf90 <__assert_fail@plt+0xb1c8>
   1cf88:	bl	11bac <strlen@plt>
   1cf8c:	str	r0, [r7]
   1cf90:	mov	r1, r8
   1cf94:	mov	r0, r5
   1cf98:	bl	1c080 <__assert_fail@plt+0xa2b8>
   1cf9c:	mov	r6, r0
   1cfa0:	mov	r0, r5
   1cfa4:	bl	1716c <__assert_fail@plt+0x53a4>
   1cfa8:	cmn	r6, #1
   1cfac:	movne	r0, r4
   1cfb0:	mvneq	r0, #0
   1cfb4:	pop	{r4, r5, r6, r7, r8, pc}
   1cfb8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1cfbc:	movw	sl, #44624	; 0xae50
   1cfc0:	movt	sl, #3
   1cfc4:	subs	r5, r3, #0
   1cfc8:	sub	sp, sp, #40	; 0x28
   1cfcc:	mov	r7, r0
   1cfd0:	ldr	r3, [sl]
   1cfd4:	mov	r8, r1
   1cfd8:	mov	r9, r2
   1cfdc:	ldr	r6, [sp, #72]	; 0x48
   1cfe0:	str	r3, [sp, #36]	; 0x24
   1cfe4:	bgt	1d004 <__assert_fail@plt+0xb23c>
   1cfe8:	b	1d054 <__assert_fail@plt+0xb28c>
   1cfec:	rsb	r5, r4, r5
   1cff0:	ldr	r3, [r6]
   1cff4:	cmp	r5, #0
   1cff8:	add	r4, r3, r4
   1cffc:	str	r4, [r6]
   1d000:	ble	1d054 <__assert_fail@plt+0xb28c>
   1d004:	cmp	r5, #32
   1d008:	movcc	r4, r5
   1d00c:	movcs	r4, #32
   1d010:	mov	r1, r9
   1d014:	mov	r3, #32
   1d018:	add	r0, sp, #4
   1d01c:	mov	r2, r4
   1d020:	bl	11984 <__memset_chk@plt>
   1d024:	mov	r0, r8
   1d028:	add	r1, sp, #4
   1d02c:	mov	r2, r4
   1d030:	blx	r7
   1d034:	cmp	r0, #0
   1d038:	beq	1cfec <__assert_fail@plt+0xb224>
   1d03c:	ldr	r2, [sp, #36]	; 0x24
   1d040:	ldr	r3, [sl]
   1d044:	cmp	r2, r3
   1d048:	bne	1d05c <__assert_fail@plt+0xb294>
   1d04c:	add	sp, sp, #40	; 0x28
   1d050:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1d054:	mov	r0, #0
   1d058:	b	1d03c <__assert_fail@plt+0xb274>
   1d05c:	bl	119d8 <__stack_chk_fail@plt>
   1d060:	push	{r3, lr}
   1d064:	mov	r3, r0
   1d068:	mov	r0, r1
   1d06c:	mov	r1, r2
   1d070:	mov	r2, #1
   1d074:	bl	11a80 <fwrite@plt>
   1d078:	subs	r0, r0, #1
   1d07c:	mvnne	r0, #0
   1d080:	pop	{r3, pc}
   1d084:	push	{r3, r4, r5, r6, r7, lr}
   1d088:	mov	r4, r0
   1d08c:	ldr	r0, [r0, #12]
   1d090:	mov	r5, r2
   1d094:	ldr	r3, [r4, #4]
   1d098:	mov	r6, r1
   1d09c:	cmp	r0, #0
   1d0a0:	add	r3, r3, r2
   1d0a4:	str	r3, [r4, #4]
   1d0a8:	beq	1d10c <__assert_fail@plt+0xb344>
   1d0ac:	ldr	r3, [r4, #8]
   1d0b0:	ldr	ip, [r4]
   1d0b4:	add	r7, r2, r3
   1d0b8:	cmp	r7, ip
   1d0bc:	bcc	1d114 <__assert_fail@plt+0xb34c>
   1d0c0:	cmp	r2, #0
   1d0c4:	beq	1d10c <__assert_fail@plt+0xb344>
   1d0c8:	cmp	r3, ip
   1d0cc:	addcc	r2, r1, r2
   1d0d0:	addcc	r1, r1, #1
   1d0d4:	bcc	1d0f0 <__assert_fail@plt+0xb328>
   1d0d8:	b	1d10c <__assert_fail@plt+0xb344>
   1d0dc:	ldr	r3, [r4, #8]
   1d0e0:	ldr	r0, [r4]
   1d0e4:	cmp	r3, r0
   1d0e8:	bcs	1d10c <__assert_fail@plt+0xb344>
   1d0ec:	ldr	r0, [r4, #12]
   1d0f0:	add	ip, r3, #1
   1d0f4:	str	ip, [r4, #8]
   1d0f8:	ldrb	ip, [r1, #-1]
   1d0fc:	cmp	r1, r2
   1d100:	add	r1, r1, #1
   1d104:	strb	ip, [r0, r3]
   1d108:	bne	1d0dc <__assert_fail@plt+0xb314>
   1d10c:	mov	r0, #0
   1d110:	pop	{r3, r4, r5, r6, r7, pc}
   1d114:	add	r0, r0, r3
   1d118:	bl	11978 <memcpy@plt>
   1d11c:	ldr	r3, [r4, #8]
   1d120:	mov	r0, #0
   1d124:	add	r5, r3, r5
   1d128:	str	r5, [r4, #8]
   1d12c:	pop	{r3, r4, r5, r6, r7, pc}
   1d130:	push	{r3, r4, r5, r6, r7, lr}
   1d134:	mov	r4, r0
   1d138:	ldr	r6, [r0]
   1d13c:	mov	r7, r1
   1d140:	mov	r5, r2
   1d144:	cmp	r6, #0
   1d148:	bne	1d1b4 <__assert_fail@plt+0xb3ec>
   1d14c:	ldr	r0, [r0, #8]
   1d150:	ldr	r3, [r4, #4]
   1d154:	add	r2, r2, r0
   1d158:	cmp	r2, r3
   1d15c:	bcs	1d188 <__assert_fail@plt+0xb3c0>
   1d160:	ldr	r3, [r4, #12]
   1d164:	add	r0, r3, r0
   1d168:	mov	r2, r5
   1d16c:	mov	r1, r7
   1d170:	bl	11978 <memcpy@plt>
   1d174:	ldr	r3, [r4, #8]
   1d178:	add	r5, r3, r5
   1d17c:	str	r5, [r4, #8]
   1d180:	mov	r0, r6
   1d184:	pop	{r3, r4, r5, r6, r7, pc}
   1d188:	add	r3, r3, #512	; 0x200
   1d18c:	ldr	r0, [r4, #12]
   1d190:	add	r1, r3, r5
   1d194:	str	r1, [r4, #4]
   1d198:	bl	11a20 <realloc@plt>
   1d19c:	subs	r2, r0, #0
   1d1a0:	beq	1d1c4 <__assert_fail@plt+0xb3fc>
   1d1a4:	ldr	r0, [r4, #8]
   1d1a8:	mov	r3, r2
   1d1ac:	str	r2, [r4, #12]
   1d1b0:	b	1d164 <__assert_fail@plt+0xb39c>
   1d1b4:	bl	11bf4 <__errno_location@plt>
   1d1b8:	str	r6, [r0]
   1d1bc:	mvn	r6, #0
   1d1c0:	b	1d180 <__assert_fail@plt+0xb3b8>
   1d1c4:	bl	11bf4 <__errno_location@plt>
   1d1c8:	mov	r1, r6
   1d1cc:	ldr	r2, [r4, #8]
   1d1d0:	mvn	r6, #0
   1d1d4:	ldr	r3, [r0]
   1d1d8:	ldr	r0, [r4, #12]
   1d1dc:	cmp	r3, #0
   1d1e0:	moveq	r3, #12
   1d1e4:	str	r3, [r4]
   1d1e8:	bl	11c3c <memset@plt>
   1d1ec:	b	1d180 <__assert_fail@plt+0xb3b8>
   1d1f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d1f4:	movw	ip, #44624	; 0xae50
   1d1f8:	sub	sp, sp, #812	; 0x32c
   1d1fc:	movt	ip, #3
   1d200:	mov	r4, #0
   1d204:	str	r1, [sp, #76]	; 0x4c
   1d208:	ldr	r1, [ip]
   1d20c:	str	ip, [sp, #52]	; 0x34
   1d210:	str	r0, [sp, #72]	; 0x48
   1d214:	str	r2, [sp, #60]	; 0x3c
   1d218:	str	r3, [sp, #80]	; 0x50
   1d21c:	str	r4, [sp, #100]	; 0x64
   1d220:	str	r1, [sp, #804]	; 0x324
   1d224:	bl	11bf4 <__errno_location@plt>
   1d228:	ldr	ip, [sp, #60]	; 0x3c
   1d22c:	cmp	ip, r4
   1d230:	ldr	ip, [r0]
   1d234:	str	r0, [sp, #68]	; 0x44
   1d238:	str	ip, [sp, #84]	; 0x54
   1d23c:	beq	1ed18 <__assert_fail@plt+0xcf50>
   1d240:	ldr	ip, [sp, #60]	; 0x3c
   1d244:	ldrb	r3, [ip]
   1d248:	add	ip, sp, #232	; 0xe8
   1d24c:	str	ip, [sp, #56]	; 0x38
   1d250:	cmp	r3, r4
   1d254:	beq	1d970 <__assert_fail@plt+0xbba8>
   1d258:	mov	r9, r4
   1d25c:	ldr	sl, [sp, #60]	; 0x3c
   1d260:	str	r9, [sp, #12]
   1d264:	mov	r4, #5
   1d268:	mov	r9, ip
   1d26c:	b	1d280 <__assert_fail@plt+0xb4b8>
   1d270:	ldrb	r3, [sl, #1]
   1d274:	add	sl, sl, #1
   1d278:	cmp	r3, #0
   1d27c:	beq	1d618 <__assert_fail@plt+0xb850>
   1d280:	cmp	r3, #37	; 0x25
   1d284:	bne	1d270 <__assert_fail@plt+0xb4a8>
   1d288:	ldrb	r6, [sl, #1]
   1d28c:	add	ip, sl, #1
   1d290:	str	ip, [sp, #16]
   1d294:	cmp	r6, #0
   1d298:	beq	1d824 <__assert_fail@plt+0xba5c>
   1d29c:	cmp	r6, #37	; 0x25
   1d2a0:	beq	1d604 <__assert_fail@plt+0xb83c>
   1d2a4:	sub	r3, r6, #49	; 0x31
   1d2a8:	cmp	r3, #8
   1d2ac:	bhi	1d2f8 <__assert_fail@plt+0xb530>
   1d2b0:	ldrb	r2, [sl, #2]
   1d2b4:	add	r0, sl, #2
   1d2b8:	sub	r7, r6, #48	; 0x30
   1d2bc:	sub	r3, r2, #48	; 0x30
   1d2c0:	uxtb	r1, r3
   1d2c4:	cmp	r1, #9
   1d2c8:	bhi	1d2f0 <__assert_fail@plt+0xb528>
   1d2cc:	add	sl, sl, #3
   1d2d0:	add	r7, r7, r7, lsl #2
   1d2d4:	mov	r0, sl
   1d2d8:	ldrb	r2, [sl], #1
   1d2dc:	add	r7, r3, r7, lsl #1
   1d2e0:	sub	r3, r2, #48	; 0x30
   1d2e4:	uxtb	r1, r3
   1d2e8:	cmp	r1, #9
   1d2ec:	bls	1d2d0 <__assert_fail@plt+0xb508>
   1d2f0:	cmp	r2, #36	; 0x24
   1d2f4:	beq	1d934 <__assert_fail@plt+0xbb6c>
   1d2f8:	ldr	sl, [sp, #16]
   1d2fc:	mov	r7, #0
   1d300:	mov	r8, #0
   1d304:	sub	r2, r6, #32
   1d308:	mov	r3, sl
   1d30c:	cmp	r2, #16
   1d310:	ldrls	pc, [pc, r2, lsl #2]
   1d314:	b	1d4b0 <__assert_fail@plt+0xb6e8>
   1d318:	muleq	r1, r0, r4
   1d31c:			; <UNDEFINED> instruction: 0x0001d4b0
   1d320:			; <UNDEFINED> instruction: 0x0001d4b0
   1d324:	andeq	sp, r1, r0, lsr #9
   1d328:			; <UNDEFINED> instruction: 0x0001d4b0
   1d32c:			; <UNDEFINED> instruction: 0x0001d4b0
   1d330:			; <UNDEFINED> instruction: 0x0001d4b0
   1d334:	muleq	r1, r8, r4
   1d338:			; <UNDEFINED> instruction: 0x0001d4b0
   1d33c:			; <UNDEFINED> instruction: 0x0001d4b0
   1d340:			; <UNDEFINED> instruction: 0x0001d4b0
   1d344:	andeq	sp, r1, r8, lsr #9
   1d348:			; <UNDEFINED> instruction: 0x0001d4b0
   1d34c:	andeq	sp, r1, r8, lsl #9
   1d350:			; <UNDEFINED> instruction: 0x0001d4b0
   1d354:			; <UNDEFINED> instruction: 0x0001d4b0
   1d358:	andeq	sp, r1, ip, asr r3
   1d35c:	orr	r8, r8, #32
   1d360:	ldrb	r6, [sl, #1]
   1d364:	add	sl, sl, #1
   1d368:	cmp	r6, #0
   1d36c:	bne	1d304 <__assert_fail@plt+0xb53c>
   1d370:	mov	ip, #0
   1d374:	mvn	r6, #0
   1d378:	mov	r1, ip
   1d37c:	str	ip, [sp, #44]	; 0x2c
   1d380:	mov	ip, #0
   1d384:	str	ip, [sp, #40]	; 0x28
   1d388:	mvn	ip, #0
   1d38c:	str	ip, [sp, #48]	; 0x30
   1d390:	mov	ip, #0
   1d394:	str	ip, [sp, #24]
   1d398:	sub	r1, r1, #65	; 0x41
   1d39c:	cmp	r1, #55	; 0x37
   1d3a0:	ldrls	pc, [pc, r1, lsl #2]
   1d3a4:	b	1df24 <__assert_fail@plt+0xc15c>
   1d3a8:	andeq	sp, r1, r4, lsr #28
   1d3ac:	andeq	sp, r1, r4, lsr #30
   1d3b0:	andeq	sp, r1, r0, lsr lr
   1d3b4:	andeq	sp, r1, r4, lsr #30
   1d3b8:	ldrdeq	sp, [r1], -r8
   1d3bc:	andeq	sp, r1, r4, ror #29
   1d3c0:	strdeq	sp, [r1], -r0
   1d3c4:	andeq	sp, r1, r4, lsr #30
   1d3c8:	andeq	sp, r1, r4, lsr #30
   1d3cc:	andeq	sp, r1, r4, lsr #30
   1d3d0:	andeq	sp, r1, r4, lsr #30
   1d3d4:	andeq	sp, r1, r4, lsr #30
   1d3d8:	andeq	sp, r1, r4, lsr #30
   1d3dc:	andeq	sp, r1, r4, lsr #30
   1d3e0:	andeq	sp, r1, r4, lsr #30
   1d3e4:	andeq	sp, r1, r4, lsr #30
   1d3e8:	andeq	sp, r1, r4, lsr #30
   1d3ec:	andeq	sp, r1, r4, lsr #30
   1d3f0:	strdeq	sp, [r1], -ip
   1d3f4:	andeq	sp, r1, r4, lsr #30
   1d3f8:	andeq	sp, r1, r4, lsr #30
   1d3fc:	andeq	sp, r1, r4, lsr #30
   1d400:	andeq	sp, r1, r4, lsr #30
   1d404:	andeq	sp, r1, r4, ror lr
   1d408:	andeq	sp, r1, r4, lsr #30
   1d40c:	andeq	sp, r1, r4, lsr #30
   1d410:	andeq	sp, r1, r4, lsr #30
   1d414:	andeq	sp, r1, r4, lsr #30
   1d418:	andeq	sp, r1, r4, lsr #30
   1d41c:	andeq	sp, r1, r4, lsr #30
   1d420:	andeq	sp, r1, r4, lsr #30
   1d424:	andeq	sp, r1, r4, lsr #30
   1d428:	andeq	sp, r1, r0, lsl #29
   1d42c:	andeq	sp, r1, r4, lsr #30
   1d430:	andeq	sp, r1, ip, lsl #29
   1d434:	muleq	r1, r8, lr
   1d438:	andeq	sp, r1, r4, lsr #29
   1d43c:			; <UNDEFINED> instruction: 0x0001deb0
   1d440:			; <UNDEFINED> instruction: 0x0001debc
   1d444:	andeq	sp, r1, r4, lsr #30
   1d448:	muleq	r1, r8, lr
   1d44c:	andeq	sp, r1, r4, lsr #30
   1d450:	andeq	sp, r1, r4, lsr #30
   1d454:	andeq	sp, r1, r4, lsr #30
   1d458:	andeq	sp, r1, r8, asr #29
   1d45c:	andeq	sp, r1, r8, lsl lr
   1d460:	andeq	sp, r1, r8, ror #23
   1d464:	andeq	sp, r1, r4, asr #28
   1d468:	andeq	sp, r1, r4, lsr #30
   1d46c:	andeq	sp, r1, r4, lsr #30
   1d470:	andeq	sp, r1, r0, asr lr
   1d474:	andeq	sp, r1, r4, lsr #30
   1d478:	andeq	sp, r1, ip, asr lr
   1d47c:	andeq	sp, r1, r4, lsr #30
   1d480:	andeq	sp, r1, r4, lsr #30
   1d484:	andeq	sp, r1, r8, ror #28
   1d488:	orr	r8, r8, #2
   1d48c:	b	1d360 <__assert_fail@plt+0xb598>
   1d490:	orr	r8, r8, #8
   1d494:	b	1d360 <__assert_fail@plt+0xb598>
   1d498:	orr	r8, r8, #1
   1d49c:	b	1d360 <__assert_fail@plt+0xb598>
   1d4a0:	orr	r8, r8, #16
   1d4a4:	b	1d360 <__assert_fail@plt+0xb598>
   1d4a8:	orr	r8, r8, #4
   1d4ac:	b	1d360 <__assert_fail@plt+0xb598>
   1d4b0:	cmp	r6, #42	; 0x2a
   1d4b4:	beq	1d714 <__assert_fail@plt+0xb94c>
   1d4b8:	sub	r6, r6, #48	; 0x30
   1d4bc:	uxtb	r2, r6
   1d4c0:	cmp	r2, #9
   1d4c4:	bhi	1d94c <__assert_fail@plt+0xbb84>
   1d4c8:	ldrb	r1, [sl, #1]
   1d4cc:	add	r3, sl, #1
   1d4d0:	sub	r2, r1, #48	; 0x30
   1d4d4:	uxtb	r0, r2
   1d4d8:	cmp	r0, #9
   1d4dc:	bhi	1d518 <__assert_fail@plt+0xb750>
   1d4e0:	add	sl, sl, #2
   1d4e4:	cmp	r6, #0
   1d4e8:	bne	1d4f4 <__assert_fail@plt+0xb72c>
   1d4ec:	cmp	r1, #48	; 0x30
   1d4f0:	beq	1d824 <__assert_fail@plt+0xba5c>
   1d4f4:	ldrb	r1, [sl]
   1d4f8:	add	r6, r6, r6, lsl #2
   1d4fc:	mov	r3, sl
   1d500:	add	sl, sl, #1
   1d504:	add	r6, r2, r6, lsl #1
   1d508:	sub	r2, r1, #48	; 0x30
   1d50c:	uxtb	r0, r2
   1d510:	cmp	r0, #9
   1d514:	bls	1d4e4 <__assert_fail@plt+0xb71c>
   1d518:	mov	ip, #0
   1d51c:	str	ip, [sp, #44]	; 0x2c
   1d520:	cmp	r1, #46	; 0x2e
   1d524:	beq	1d7a0 <__assert_fail@plt+0xb9d8>
   1d528:	mov	ip, #0
   1d52c:	str	ip, [sp, #40]	; 0x28
   1d530:	mvn	ip, #0
   1d534:	str	ip, [sp, #48]	; 0x30
   1d538:	sub	r2, r1, #76	; 0x4c
   1d53c:	cmp	r2, #46	; 0x2e
   1d540:	ldrls	pc, [pc, r2, lsl #2]
   1d544:	b	1eeec <__assert_fail@plt+0xd124>
   1d548:	andeq	sp, r1, ip, lsl #17
   1d54c:	andeq	lr, r1, ip, ror #29
   1d550:	andeq	lr, r1, ip, ror #29
   1d554:	andeq	lr, r1, ip, ror #29
   1d558:	andeq	lr, r1, ip, ror #29
   1d55c:	andeq	lr, r1, ip, ror #29
   1d560:	andeq	lr, r1, ip, ror #29
   1d564:	andeq	lr, r1, ip, ror #29
   1d568:	andeq	lr, r1, ip, ror #29
   1d56c:	andeq	lr, r1, ip, ror #29
   1d570:	andeq	lr, r1, ip, ror #29
   1d574:	andeq	lr, r1, ip, ror #29
   1d578:	andeq	lr, r1, ip, ror #29
   1d57c:	andeq	lr, r1, ip, ror #29
   1d580:	andeq	lr, r1, ip, ror #29
   1d584:	andeq	lr, r1, ip, ror #29
   1d588:	andeq	lr, r1, ip, ror #29
   1d58c:	andeq	lr, r1, ip, ror #29
   1d590:	andeq	lr, r1, ip, ror #29
   1d594:	andeq	lr, r1, ip, ror #29
   1d598:	andeq	lr, r1, ip, ror #29
   1d59c:	andeq	lr, r1, ip, ror #29
   1d5a0:	andeq	lr, r1, ip, ror #29
   1d5a4:	andeq	lr, r1, ip, ror #29
   1d5a8:	andeq	lr, r1, ip, ror #29
   1d5ac:	andeq	lr, r1, ip, ror #29
   1d5b0:	andeq	lr, r1, ip, ror #29
   1d5b4:	andeq	lr, r1, ip, ror #29
   1d5b8:	strdeq	sp, [r1], -r0
   1d5bc:	andeq	lr, r1, ip, ror #29
   1d5c0:	ldrdeq	sp, [r1], -ip
   1d5c4:	andeq	lr, r1, ip, ror #29
   1d5c8:			; <UNDEFINED> instruction: 0x0001d8b4
   1d5cc:	andeq	lr, r1, ip, ror #29
   1d5d0:	andeq	lr, r1, ip, ror #29
   1d5d4:	andeq	lr, r1, ip, ror #29
   1d5d8:	andeq	lr, r1, ip, ror #29
   1d5dc:	andeq	lr, r1, ip, ror #29
   1d5e0:	andeq	lr, r1, ip, ror #29
   1d5e4:	andeq	lr, r1, ip, ror #29
   1d5e8:	andeq	sp, r1, r0, lsr #17
   1d5ec:	andeq	lr, r1, ip, ror #29
   1d5f0:	andeq	lr, r1, ip, ror #29
   1d5f4:	andeq	lr, r1, ip, ror #29
   1d5f8:	andeq	lr, r1, ip, ror #29
   1d5fc:	andeq	lr, r1, ip, ror #29
   1d600:	andeq	sp, r1, r8, ror r8
   1d604:	ldr	sl, [sp, #16]
   1d608:	add	sl, sl, #1
   1d60c:	ldrb	r3, [sl]
   1d610:	cmp	r3, #0
   1d614:	bne	1d280 <__assert_fail@plt+0xb4b8>
   1d618:	mov	fp, r9
   1d61c:	ldr	r9, [sp, #12]
   1d620:	cmp	r9, #0
   1d624:	beq	1d974 <__assert_fail@plt+0xbbac>
   1d628:	lsl	ip, r9, #2
   1d62c:	mov	r4, r3
   1d630:	add	r0, ip, r9
   1d634:	mov	r3, fp
   1d638:	add	r0, fp, r0, lsl #3
   1d63c:	ldr	r2, [r3, #24]
   1d640:	cmn	r2, #1
   1d644:	beq	1d650 <__assert_fail@plt+0xb888>
   1d648:	cmp	r4, r2
   1d64c:	movlt	r4, r2
   1d650:	ldr	r2, [r3, #28]
   1d654:	add	r3, r3, #40	; 0x28
   1d658:	ldr	r1, [r3, #-8]
   1d65c:	cmp	r2, r1
   1d660:	movlt	r2, r1
   1d664:	cmp	r4, r2
   1d668:	movlt	r4, r2
   1d66c:	cmp	r3, r0
   1d670:	bne	1d63c <__assert_fail@plt+0xb874>
   1d674:	cmp	r4, #0
   1d678:	beq	1db10 <__assert_fail@plt+0xbd48>
   1d67c:	ldr	r3, [fp, #24]
   1d680:	cmp	r3, #0
   1d684:	beq	1d6dc <__assert_fail@plt+0xb914>
   1d688:	add	r3, fp, #40	; 0x28
   1d68c:	mov	r2, fp
   1d690:	mov	r1, #0
   1d694:	b	1d6c4 <__assert_fail@plt+0xb8fc>
   1d698:	ldr	r0, [r2, #12]
   1d69c:	cmn	r0, #2
   1d6a0:	beq	1d960 <__assert_fail@plt+0xbb98>
   1d6a4:	add	r1, r1, #1
   1d6a8:	cmp	r1, r9
   1d6ac:	beq	1d97c <__assert_fail@plt+0xbbb4>
   1d6b0:	mov	r2, r3
   1d6b4:	add	r3, r3, #40	; 0x28
   1d6b8:	ldr	r0, [r3, #-16]
   1d6bc:	cmp	r0, #0
   1d6c0:	beq	1d6dc <__assert_fail@plt+0xb914>
   1d6c4:	ldr	r0, [r2, #8]
   1d6c8:	cmn	r0, #2
   1d6cc:	bne	1d698 <__assert_fail@plt+0xb8d0>
   1d6d0:	ldr	r0, [r2, #28]
   1d6d4:	cmp	r0, #0
   1d6d8:	bne	1d698 <__assert_fail@plt+0xb8d0>
   1d6dc:	add	r6, sp, #104	; 0x68
   1d6e0:	ldr	ip, [sp, #68]	; 0x44
   1d6e4:	mvn	r5, #0
   1d6e8:	mov	r3, #22
   1d6ec:	str	r3, [ip]
   1d6f0:	add	r3, sp, #104	; 0x68
   1d6f4:	cmp	r6, r3
   1d6f8:	beq	1d704 <__assert_fail@plt+0xb93c>
   1d6fc:	mov	r0, r6
   1d700:	bl	11948 <free@plt>
   1d704:	ldr	ip, [sp, #56]	; 0x38
   1d708:	cmp	fp, ip
   1d70c:	beq	1d858 <__assert_fail@plt+0xba90>
   1d710:	b	1d850 <__assert_fail@plt+0xba88>
   1d714:	cmp	r7, #0
   1d718:	ldrb	r1, [sl, #1]
   1d71c:	add	r3, sl, #1
   1d720:	streq	r7, [sp, #44]	; 0x2c
   1d724:	mvneq	r6, #1
   1d728:	beq	1d520 <__assert_fail@plt+0xb758>
   1d72c:	sub	r2, r1, #49	; 0x31
   1d730:	cmp	r2, #8
   1d734:	bhi	1db5c <__assert_fail@plt+0xbd94>
   1d738:	ldrb	r2, [sl, #2]
   1d73c:	sub	r1, r1, #48	; 0x30
   1d740:	str	r1, [sp, #44]	; 0x2c
   1d744:	add	r1, sl, #2
   1d748:	sub	r3, r2, #48	; 0x30
   1d74c:	uxtb	r0, r3
   1d750:	cmp	r0, #9
   1d754:	bhi	1d784 <__assert_fail@plt+0xb9bc>
   1d758:	ldr	r0, [sp, #44]	; 0x2c
   1d75c:	add	sl, sl, #3
   1d760:	add	r0, r0, r0, lsl #2
   1d764:	mov	r1, sl
   1d768:	ldrb	r2, [sl], #1
   1d76c:	add	r0, r3, r0, lsl #1
   1d770:	sub	r3, r2, #48	; 0x30
   1d774:	uxtb	ip, r3
   1d778:	cmp	ip, #9
   1d77c:	bls	1d760 <__assert_fail@plt+0xb998>
   1d780:	str	r0, [sp, #44]	; 0x2c
   1d784:	cmp	r2, #36	; 0x24
   1d788:	bne	1d824 <__assert_fail@plt+0xba5c>
   1d78c:	add	r3, r1, #1
   1d790:	ldrb	r1, [r1, #1]
   1d794:	mvn	r6, #1
   1d798:	cmp	r1, #46	; 0x2e
   1d79c:	bne	1d528 <__assert_fail@plt+0xb760>
   1d7a0:	ldrb	r1, [r3, #1]
   1d7a4:	cmp	r1, #42	; 0x2a
   1d7a8:	beq	1db6c <__assert_fail@plt+0xbda4>
   1d7ac:	sub	r2, r1, #48	; 0x30
   1d7b0:	uxtb	r0, r2
   1d7b4:	cmp	r0, #9
   1d7b8:	bhi	1d914 <__assert_fail@plt+0xbb4c>
   1d7bc:	ldrb	r1, [r3, #2]
   1d7c0:	add	ip, r3, #2
   1d7c4:	str	r2, [sp, #48]	; 0x30
   1d7c8:	sub	r2, r1, #48	; 0x30
   1d7cc:	uxtb	r0, r2
   1d7d0:	cmp	r0, #9
   1d7d4:	bhi	1eb68 <__assert_fail@plt+0xcda0>
   1d7d8:	ldr	ip, [sp, #48]	; 0x30
   1d7dc:	add	r0, r3, #3
   1d7e0:	cmp	ip, #0
   1d7e4:	bne	1d7f0 <__assert_fail@plt+0xba28>
   1d7e8:	cmp	r1, #48	; 0x30
   1d7ec:	beq	1d824 <__assert_fail@plt+0xba5c>
   1d7f0:	ldrb	r1, [r0]
   1d7f4:	add	ip, ip, ip, lsl #2
   1d7f8:	mov	r3, r0
   1d7fc:	add	r0, r0, #1
   1d800:	add	ip, r2, ip, lsl #1
   1d804:	sub	r2, r1, #48	; 0x30
   1d808:	uxtb	r5, r2
   1d80c:	cmp	r5, #9
   1d810:	bls	1d7e0 <__assert_fail@plt+0xba18>
   1d814:	str	ip, [sp, #48]	; 0x30
   1d818:	mov	ip, #0
   1d81c:	str	ip, [sp, #40]	; 0x28
   1d820:	b	1d538 <__assert_fail@plt+0xb770>
   1d824:	mov	fp, r9
   1d828:	ldr	ip, [sp, #68]	; 0x44
   1d82c:	mov	r3, #22
   1d830:	str	r3, [ip]
   1d834:	ldr	ip, [sp, #56]	; 0x38
   1d838:	cmp	fp, ip
   1d83c:	beq	1d848 <__assert_fail@plt+0xba80>
   1d840:	mov	r0, fp
   1d844:	bl	11948 <free@plt>
   1d848:	mvn	r5, #0
   1d84c:	mov	fp, #0
   1d850:	mov	r0, fp
   1d854:	bl	11948 <free@plt>
   1d858:	ldr	ip, [sp, #52]	; 0x34
   1d85c:	mov	r0, r5
   1d860:	ldr	r2, [sp, #804]	; 0x324
   1d864:	ldr	r3, [ip]
   1d868:	cmp	r2, r3
   1d86c:	bne	1eefc <__assert_fail@plt+0xd134>
   1d870:	add	sp, sp, #812	; 0x32c
   1d874:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d878:	mov	ip, #6
   1d87c:	add	sl, r3, #1
   1d880:	ldrb	r1, [r3, #1]
   1d884:	str	ip, [sp, #24]
   1d888:	b	1d398 <__assert_fail@plt+0xb5d0>
   1d88c:	mov	ip, #8
   1d890:	add	sl, r3, #1
   1d894:	ldrb	r1, [r3, #1]
   1d898:	str	ip, [sp, #24]
   1d89c:	b	1d398 <__assert_fail@plt+0xb5d0>
   1d8a0:	mov	ip, #7
   1d8a4:	add	sl, r3, #1
   1d8a8:	ldrb	r1, [r3, #1]
   1d8ac:	str	ip, [sp, #24]
   1d8b0:	b	1d398 <__assert_fail@plt+0xb5d0>
   1d8b4:	ldrb	r1, [r3, #1]
   1d8b8:	cmp	r1, #108	; 0x6c
   1d8bc:	ldrbeq	r1, [r3, #2]
   1d8c0:	addeq	r3, r3, #1
   1d8c4:	moveq	ip, #4
   1d8c8:	movne	ip, #3
   1d8cc:	streq	ip, [sp, #24]
   1d8d0:	strne	ip, [sp, #24]
   1d8d4:	add	sl, r3, #1
   1d8d8:	b	1d398 <__assert_fail@plt+0xb5d0>
   1d8dc:	mov	ip, #5
   1d8e0:	add	sl, r3, #1
   1d8e4:	ldrb	r1, [r3, #1]
   1d8e8:	str	ip, [sp, #24]
   1d8ec:	b	1d398 <__assert_fail@plt+0xb5d0>
   1d8f0:	ldrb	r1, [r3, #1]
   1d8f4:	cmp	r1, #104	; 0x68
   1d8f8:	moveq	ip, #1
   1d8fc:	ldrbeq	r1, [r3, #2]
   1d900:	movne	ip, #2
   1d904:	streq	ip, [sp, #24]
   1d908:	addeq	r3, r3, ip
   1d90c:	strne	ip, [sp, #24]
   1d910:	b	1d8d4 <__assert_fail@plt+0xbb0c>
   1d914:	cmp	r1, #45	; 0x2d
   1d918:	add	sl, r3, #1
   1d91c:	beq	1d380 <__assert_fail@plt+0xb5b8>
   1d920:	mov	ip, #0
   1d924:	mov	r3, sl
   1d928:	str	ip, [sp, #40]	; 0x28
   1d92c:	str	ip, [sp, #48]	; 0x30
   1d930:	b	1d538 <__assert_fail@plt+0xb770>
   1d934:	ldrb	r6, [r0, #1]
   1d938:	add	sl, r0, #1
   1d93c:	cmp	r6, #0
   1d940:	moveq	r8, r6
   1d944:	bne	1d300 <__assert_fail@plt+0xb538>
   1d948:	b	1d370 <__assert_fail@plt+0xb5a8>
   1d94c:	mov	ip, #0
   1d950:	ldrb	r1, [sl]
   1d954:	str	ip, [sp, #44]	; 0x2c
   1d958:	mvn	r6, #0
   1d95c:	b	1d520 <__assert_fail@plt+0xb758>
   1d960:	ldr	r2, [r2, #32]
   1d964:	cmp	r2, #0
   1d968:	bne	1d6a4 <__assert_fail@plt+0xb8dc>
   1d96c:	b	1d6dc <__assert_fail@plt+0xb914>
   1d970:	mov	fp, ip
   1d974:	mov	r9, #0
   1d978:	mov	r4, r9
   1d97c:	ldr	r0, [sp, #60]	; 0x3c
   1d980:	bl	11bac <strlen@plt>
   1d984:	cmp	r0, r4
   1d988:	bls	1d6dc <__assert_fail@plt+0xb914>
   1d98c:	cmp	r4, #8
   1d990:	bhi	1e49c <__assert_fail@plt+0xc6d4>
   1d994:	add	r6, sp, #104	; 0x68
   1d998:	mov	r3, #0
   1d99c:	str	r3, [sp, #104]	; 0x68
   1d9a0:	str	r3, [sp, #120]	; 0x78
   1d9a4:	str	r3, [sp, #136]	; 0x88
   1d9a8:	str	r3, [sp, #152]	; 0x98
   1d9ac:	str	r3, [sp, #168]	; 0xa8
   1d9b0:	str	r3, [sp, #184]	; 0xb8
   1d9b4:	str	r3, [sp, #200]	; 0xc8
   1d9b8:	str	r3, [sp, #216]	; 0xd8
   1d9bc:	cmp	r9, #0
   1d9c0:	movne	r3, fp
   1d9c4:	movne	r2, #0
   1d9c8:	movne	ip, #6
   1d9cc:	bne	1d9f0 <__assert_fail@plt+0xbc28>
   1d9d0:	b	1da6c <__assert_fail@plt+0xbca4>
   1d9d4:	ldr	r1, [r3, #12]
   1d9d8:	cmn	r1, #2
   1d9dc:	beq	1da44 <__assert_fail@plt+0xbc7c>
   1d9e0:	add	r2, r2, #1
   1d9e4:	add	r3, r3, #40	; 0x28
   1d9e8:	cmp	r2, r9
   1d9ec:	beq	1da6c <__assert_fail@plt+0xbca4>
   1d9f0:	ldr	r1, [r3, #24]
   1d9f4:	cmn	r1, #1
   1d9f8:	beq	1da14 <__assert_fail@plt+0xbc4c>
   1d9fc:	sub	r1, r1, #1
   1da00:	ldr	r0, [r6, r1, lsl #4]
   1da04:	cmp	r0, #0
   1da08:	bne	1d6e0 <__assert_fail@plt+0xb918>
   1da0c:	ldr	r0, [r3, #36]	; 0x24
   1da10:	str	r0, [r6, r1, lsl #4]
   1da14:	ldr	r1, [r3, #8]
   1da18:	cmn	r1, #2
   1da1c:	bne	1d9d4 <__assert_fail@plt+0xbc0c>
   1da20:	ldr	r1, [r3, #28]
   1da24:	sub	r1, r1, #1
   1da28:	ldr	r0, [r6, r1, lsl #4]
   1da2c:	cmp	r0, #0
   1da30:	bne	1d6e0 <__assert_fail@plt+0xb918>
   1da34:	str	ip, [r6, r1, lsl #4]
   1da38:	ldr	r1, [r3, #12]
   1da3c:	cmn	r1, #2
   1da40:	bne	1d9e0 <__assert_fail@plt+0xbc18>
   1da44:	ldr	r1, [r3, #32]
   1da48:	sub	r1, r1, #1
   1da4c:	ldr	r0, [r6, r1, lsl #4]
   1da50:	cmp	r0, #0
   1da54:	bne	1d6e0 <__assert_fail@plt+0xb918>
   1da58:	add	r2, r2, #1
   1da5c:	str	ip, [r6, r1, lsl #4]
   1da60:	cmp	r2, r9
   1da64:	add	r3, r3, #40	; 0x28
   1da68:	bne	1d9f0 <__assert_fail@plt+0xbc28>
   1da6c:	cmp	r4, #0
   1da70:	ldr	r1, [sp, #80]	; 0x50
   1da74:	movne	r3, #0
   1da78:	movne	r2, r3
   1da7c:	movne	r0, r3
   1da80:	movne	ip, r2
   1da84:	beq	1dfa8 <__assert_fail@plt+0xc1e0>
   1da88:	ldr	r3, [r6, ip, lsl #4]
   1da8c:	add	ip, r6, ip, lsl #4
   1da90:	sub	r3, r3, #1
   1da94:	cmp	r3, #27
   1da98:	ldrls	pc, [pc, r3, lsl #2]
   1da9c:	b	1d6e0 <__assert_fail@plt+0xb918>
   1daa0:	andeq	lr, r1, r8, lsl r1
   1daa4:	andeq	lr, r1, r8, lsl r1
   1daa8:	andeq	lr, r1, r8, lsl r1
   1daac:	andeq	lr, r1, r8, lsr #2
   1dab0:	andeq	lr, r1, r8, lsr #2
   1dab4:	andeq	sp, r1, ip, lsl #31
   1dab8:	andeq	sp, r1, ip, lsl #31
   1dabc:	andeq	sp, r1, ip, lsl #31
   1dac0:	andeq	sp, r1, ip, lsl #31
   1dac4:	andeq	lr, r1, r0, lsl #2
   1dac8:	andeq	lr, r1, r0, lsl #2
   1dacc:	andeq	lr, r1, r8, lsr r1
   1dad0:	andeq	lr, r1, r8, lsr r1
   1dad4:	andeq	sp, r1, ip, lsl #31
   1dad8:	andeq	lr, r1, r0, lsl #2
   1dadc:	andeq	lr, r1, r0, lsl #2
   1dae0:	andeq	sp, r1, ip, lsl #31
   1dae4:	andeq	sp, r1, ip, lsl #31
   1dae8:	andeq	sp, r1, ip, lsl #31
   1daec:	andeq	sp, r1, ip, lsl #31
   1daf0:	andeq	sp, r1, ip, lsl #31
   1daf4:	andeq	sp, r1, ip, lsl #31
   1daf8:	andeq	sp, r1, ip, lsl #31
   1dafc:	andeq	sp, r1, ip, lsl #31
   1db00:	andeq	sp, r1, ip, lsl #31
   1db04:	andeq	sp, r1, ip, lsl #31
   1db08:	andeq	sp, r1, ip, lsl #31
   1db0c:	andeq	sp, r1, ip, lsl #31
   1db10:	add	r1, ip, r9
   1db14:	mov	r3, fp
   1db18:	add	r1, fp, r1, lsl #3
   1db1c:	ldr	r2, [r3, #8]
   1db20:	add	r3, r3, #40	; 0x28
   1db24:	cmn	r2, #2
   1db28:	ldr	r2, [r3, #-28]	; 0xffffffe4
   1db2c:	addeq	r4, r4, #1
   1db30:	streq	r4, [r3, #-12]
   1db34:	cmn	r2, #2
   1db38:	ldr	r2, [r3, #-16]
   1db3c:	addeq	r4, r4, #1
   1db40:	streq	r4, [r3, #-8]
   1db44:	cmn	r2, #1
   1db48:	addne	r4, r4, #1
   1db4c:	strne	r4, [r3, #-16]
   1db50:	cmp	r3, r1
   1db54:	bne	1db1c <__assert_fail@plt+0xbd54>
   1db58:	b	1d97c <__assert_fail@plt+0xbbb4>
   1db5c:	mov	ip, #0
   1db60:	mvn	r6, #1
   1db64:	str	ip, [sp, #44]	; 0x2c
   1db68:	b	1d520 <__assert_fail@plt+0xb758>
   1db6c:	cmp	r7, #0
   1db70:	ldrb	r1, [r3, #2]
   1db74:	add	r2, r3, #2
   1db78:	beq	1df10 <__assert_fail@plt+0xc148>
   1db7c:	sub	r0, r1, #49	; 0x31
   1db80:	cmp	r0, #8
   1db84:	bhi	1e4ec <__assert_fail@plt+0xc724>
   1db88:	ldrb	r0, [r3, #3]
   1db8c:	sub	r1, r1, #48	; 0x30
   1db90:	str	r1, [sp, #40]	; 0x28
   1db94:	add	r1, r3, #3
   1db98:	sub	r2, r0, #48	; 0x30
   1db9c:	uxtb	ip, r2
   1dba0:	cmp	ip, #9
   1dba4:	bhi	1dbd4 <__assert_fail@plt+0xbe0c>
   1dba8:	ldr	ip, [sp, #40]	; 0x28
   1dbac:	add	r3, r3, #4
   1dbb0:	add	ip, ip, ip, lsl #2
   1dbb4:	mov	r1, r3
   1dbb8:	ldrb	r0, [r3], #1
   1dbbc:	add	ip, r2, ip, lsl #1
   1dbc0:	sub	r2, r0, #48	; 0x30
   1dbc4:	uxtb	r5, r2
   1dbc8:	cmp	r5, #9
   1dbcc:	bls	1dbb0 <__assert_fail@plt+0xbde8>
   1dbd0:	str	ip, [sp, #40]	; 0x28
   1dbd4:	cmp	r0, #36	; 0x24
   1dbd8:	bne	1d824 <__assert_fail@plt+0xba5c>
   1dbdc:	add	r2, r1, #1
   1dbe0:	ldrb	r1, [r1, #1]
   1dbe4:	b	1df14 <__assert_fail@plt+0xc14c>
   1dbe8:	mov	ip, #2
   1dbec:	str	ip, [sp, #20]
   1dbf0:	ldr	ip, [sp, #12]
   1dbf4:	cmp	r4, ip
   1dbf8:	lslhi	ip, ip, #2
   1dbfc:	strhi	ip, [sp, #36]	; 0x24
   1dc00:	bhi	1dca4 <__assert_fail@plt+0xbedc>
   1dc04:	add	ip, r4, #10
   1dc08:	str	ip, [sp, #32]
   1dc0c:	cmp	ip, r4
   1dc10:	bls	1d824 <__assert_fail@plt+0xba5c>
   1dc14:	mov	r0, ip
   1dc18:	mov	r1, #40	; 0x28
   1dc1c:	bl	11888 <calloc@plt>
   1dc20:	subs	fp, r0, #0
   1dc24:	beq	1ea44 <__assert_fail@plt+0xcc7c>
   1dc28:	ldr	ip, [sp, #12]
   1dc2c:	cmp	ip, #0
   1dc30:	beq	1df84 <__assert_fail@plt+0xc1bc>
   1dc34:	ldr	ip, [sp, #12]
   1dc38:	mov	r5, #0
   1dc3c:	ldr	r0, [sp, #12]
   1dc40:	str	r6, [sp, #64]	; 0x40
   1dc44:	lsl	ip, ip, #2
   1dc48:	str	ip, [sp, #36]	; 0x24
   1dc4c:	add	r3, ip, r0
   1dc50:	lsl	r3, r3, #3
   1dc54:	mov	r6, r3
   1dc58:	add	r4, r9, r5
   1dc5c:	add	ip, fp, r5
   1dc60:	add	r5, r5, #40	; 0x28
   1dc64:	ldm	r4!, {r0, r1, r2, r3}
   1dc68:	cmp	r5, r6
   1dc6c:	stmia	ip!, {r0, r1, r2, r3}
   1dc70:	ldm	r4!, {r0, r1, r2, r3}
   1dc74:	stmia	ip!, {r0, r1, r2, r3}
   1dc78:	ldm	r4, {r0, r1}
   1dc7c:	stm	ip, {r0, r1}
   1dc80:	bne	1dc58 <__assert_fail@plt+0xbe90>
   1dc84:	ldr	r6, [sp, #64]	; 0x40
   1dc88:	ldr	ip, [sp, #56]	; 0x38
   1dc8c:	cmp	r9, ip
   1dc90:	beq	1df48 <__assert_fail@plt+0xc180>
   1dc94:	mov	r0, r9
   1dc98:	mov	r9, fp
   1dc9c:	bl	11948 <free@plt>
   1dca0:	ldr	r4, [sp, #32]
   1dca4:	ldr	ip, [sp, #36]	; 0x24
   1dca8:	ldr	r0, [sp, #12]
   1dcac:	add	fp, ip, r0
   1dcb0:	ldr	ip, [sp, #16]
   1dcb4:	rsb	r2, ip, sl
   1dcb8:	ldr	ip, [sp, #20]
   1dcbc:	add	r2, r2, #2
   1dcc0:	str	r2, [r9, fp, lsl #3]
   1dcc4:	sub	r3, ip, #1
   1dcc8:	ldr	ip, [sp, #48]	; 0x30
   1dccc:	add	fp, r9, fp, lsl #3
   1dcd0:	str	ip, [fp, #12]
   1dcd4:	ldr	ip, [sp, #24]
   1dcd8:	str	r8, [fp, #4]
   1dcdc:	str	r6, [fp, #8]
   1dce0:	str	ip, [fp, #16]
   1dce4:	ldr	ip, [sp, #20]
   1dce8:	str	r7, [fp, #24]
   1dcec:	str	ip, [fp, #20]
   1dcf0:	ldr	ip, [sp, #44]	; 0x2c
   1dcf4:	str	ip, [fp, #28]
   1dcf8:	ldr	ip, [sp, #40]	; 0x28
   1dcfc:	str	ip, [fp, #32]
   1dd00:	cmp	r3, #17
   1dd04:	ldrls	pc, [pc, r3, lsl #2]
   1dd08:	b	1de00 <__assert_fail@plt+0xc038>
   1dd0c:	ldrdeq	sp, [r1], -r0
   1dd10:	andeq	sp, r1, r0, lsr #27
   1dd14:	andeq	sp, r1, r0, lsr #27
   1dd18:	andeq	sp, r1, r0, lsr #27
   1dd1c:	andeq	sp, r1, r0, lsr #27
   1dd20:	andeq	sp, r1, r8, ror sp
   1dd24:	andeq	sp, r1, r8, ror sp
   1dd28:	andeq	sp, r1, r8, ror sp
   1dd2c:	andeq	sp, r1, r8, ror sp
   1dd30:	andeq	sp, r1, r8, ror sp
   1dd34:	andeq	sp, r1, r8, ror sp
   1dd38:	andeq	sp, r1, r8, ror sp
   1dd3c:	andeq	sp, r1, r8, ror sp
   1dd40:	andeq	sp, r1, ip, ror #26
   1dd44:	andeq	sp, r1, r4, asr sp
   1dd48:	andeq	sp, r1, ip, lsl #28
   1dd4c:	andeq	sp, r1, r4, asr sp
   1dd50:	andeq	sp, r1, r4, asr pc
   1dd54:	mov	r3, #14
   1dd58:	str	r3, [fp, #36]	; 0x24
   1dd5c:	ldr	ip, [sp, #12]
   1dd60:	add	ip, ip, #1
   1dd64:	str	ip, [sp, #12]
   1dd68:	b	1d270 <__assert_fail@plt+0xb4a8>
   1dd6c:	mov	r3, #6
   1dd70:	str	r3, [fp, #36]	; 0x24
   1dd74:	b	1dd5c <__assert_fail@plt+0xbf94>
   1dd78:	ldr	ip, [sp, #24]
   1dd7c:	cmp	ip, #3
   1dd80:	beq	1dd94 <__assert_fail@plt+0xbfcc>
   1dd84:	cmp	ip, #8
   1dd88:	moveq	r3, #13
   1dd8c:	streq	r3, [fp, #36]	; 0x24
   1dd90:	beq	1dd5c <__assert_fail@plt+0xbf94>
   1dd94:	mov	r3, #12
   1dd98:	str	r3, [fp, #36]	; 0x24
   1dd9c:	b	1dd5c <__assert_fail@plt+0xbf94>
   1dda0:	ldr	ip, [sp, #24]
   1dda4:	sub	r3, ip, #1
   1dda8:	cmp	r3, #6
   1ddac:	ldrls	pc, [pc, r3, lsl #2]
   1ddb0:	b	1eb0c <__assert_fail@plt+0xcd44>
   1ddb4:	andeq	lr, r1, r4, lsl #10
   1ddb8:	strdeq	lr, [r1], -r8
   1ddbc:	andeq	lr, r1, r0, lsr #11
   1ddc0:	muleq	r1, r4, r5
   1ddc4:	andeq	lr, r1, r8, lsl #11
   1ddc8:	andeq	sp, r1, ip, lsr pc
   1ddcc:	andeq	sp, r1, r0, lsr pc
   1ddd0:	ldr	ip, [sp, #24]
   1ddd4:	sub	r3, ip, #1
   1ddd8:	cmp	r3, #6
   1dddc:	ldrls	pc, [pc, r3, lsl #2]
   1dde0:	b	1dd6c <__assert_fail@plt+0xbfa4>
   1dde4:	andeq	lr, r1, ip, ror r5
   1dde8:	andeq	lr, r1, r0, ror r5
   1ddec:	andeq	lr, r1, r4, ror #10
   1ddf0:	andeq	lr, r1, r8, asr r5
   1ddf4:	andeq	lr, r1, ip, asr #10
   1ddf8:	andeq	sp, r1, ip, lsr pc
   1ddfc:	andeq	sp, r1, r0, lsr pc
   1de00:	mov	r0, #0
   1de04:	str	r0, [fp, #36]	; 0x24
   1de08:	b	1dd5c <__assert_fail@plt+0xbf94>
   1de0c:	mov	r3, #19
   1de10:	str	r3, [fp, #36]	; 0x24
   1de14:	b	1dd5c <__assert_fail@plt+0xbf94>
   1de18:	mov	ip, #18
   1de1c:	str	ip, [sp, #20]
   1de20:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1de24:	mov	ip, #13
   1de28:	str	ip, [sp, #20]
   1de2c:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1de30:	mov	ip, #14
   1de34:	str	ip, [sp, #20]
   1de38:	mov	ip, #3
   1de3c:	str	ip, [sp, #24]
   1de40:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1de44:	mov	ip, #16
   1de48:	str	ip, [sp, #20]
   1de4c:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1de50:	mov	ip, #15
   1de54:	str	ip, [sp, #20]
   1de58:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1de5c:	mov	ip, #3
   1de60:	str	ip, [sp, #20]
   1de64:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1de68:	mov	ip, #4
   1de6c:	str	ip, [sp, #20]
   1de70:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1de74:	mov	ip, #5
   1de78:	str	ip, [sp, #20]
   1de7c:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1de80:	mov	ip, #12
   1de84:	str	ip, [sp, #20]
   1de88:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1de8c:	mov	ip, #14
   1de90:	str	ip, [sp, #20]
   1de94:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1de98:	mov	ip, #1
   1de9c:	str	ip, [sp, #20]
   1dea0:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1dea4:	mov	ip, #8
   1dea8:	str	ip, [sp, #20]
   1deac:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1deb0:	mov	ip, #6
   1deb4:	str	ip, [sp, #20]
   1deb8:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1debc:	mov	ip, #10
   1dec0:	str	ip, [sp, #20]
   1dec4:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1dec8:	mov	ip, #17
   1decc:	mvn	r7, #0
   1ded0:	str	ip, [sp, #20]
   1ded4:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1ded8:	mov	ip, #9
   1dedc:	str	ip, [sp, #20]
   1dee0:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1dee4:	mov	ip, #7
   1dee8:	str	ip, [sp, #20]
   1deec:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1def0:	mov	ip, #11
   1def4:	str	ip, [sp, #20]
   1def8:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1defc:	mov	ip, #15
   1df00:	str	ip, [sp, #20]
   1df04:	mov	ip, #3
   1df08:	str	ip, [sp, #24]
   1df0c:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1df10:	str	r7, [sp, #40]	; 0x28
   1df14:	mvn	ip, #1
   1df18:	mov	r3, r2
   1df1c:	str	ip, [sp, #48]	; 0x30
   1df20:	b	1d538 <__assert_fail@plt+0xb770>
   1df24:	mov	ip, #0
   1df28:	str	ip, [sp, #20]
   1df2c:	b	1dbf0 <__assert_fail@plt+0xbe28>
   1df30:	mov	r3, #18
   1df34:	str	r3, [fp, #36]	; 0x24
   1df38:	b	1dd5c <__assert_fail@plt+0xbf94>
   1df3c:	mov	r3, #17
   1df40:	str	r3, [fp, #36]	; 0x24
   1df44:	b	1dd5c <__assert_fail@plt+0xbf94>
   1df48:	mov	r9, fp
   1df4c:	ldr	r4, [sp, #32]
   1df50:	b	1dca4 <__assert_fail@plt+0xbedc>
   1df54:	ldr	ip, [sp, #24]
   1df58:	sub	r3, ip, #1
   1df5c:	cmp	r3, #6
   1df60:	ldrls	pc, [pc, r3, lsl #2]
   1df64:	b	1eb00 <__assert_fail@plt+0xcd38>
   1df68:	andeq	lr, r1, r0, asr #10
   1df6c:	andeq	lr, r1, r4, lsr r5
   1df70:	andeq	lr, r1, r8, lsr #10
   1df74:	andeq	lr, r1, ip, lsl r5
   1df78:	andeq	lr, r1, r0, lsl r5
   1df7c:			; <UNDEFINED> instruction: 0x0001e5b8
   1df80:	andeq	lr, r1, ip, lsr #11
   1df84:	str	ip, [sp, #36]	; 0x24
   1df88:	b	1dc88 <__assert_fail@plt+0xbec0>
   1df8c:	ldr	r3, [r1]
   1df90:	add	r1, r1, #4
   1df94:	str	r3, [ip, #8]
   1df98:	add	r0, r0, #1
   1df9c:	cmp	r0, r4
   1dfa0:	mov	ip, r0
   1dfa4:	bne	1da88 <__assert_fail@plt+0xbcc0>
   1dfa8:	ldr	r1, [sp, #60]	; 0x3c
   1dfac:	mov	sl, fp
   1dfb0:	mov	r8, #0
   1dfb4:	movw	ip, #31144	; 0x79a8
   1dfb8:	movt	ip, #2
   1dfbc:	str	ip, [sp, #12]
   1dfc0:	mov	r7, r1
   1dfc4:	movw	ip, #30940	; 0x78dc
   1dfc8:	movt	ip, #2
   1dfcc:	str	ip, [sp, #16]
   1dfd0:	movw	ip, #52429	; 0xcccd
   1dfd4:	movt	ip, #52428	; 0xcccc
   1dfd8:	str	ip, [sp, #36]	; 0x24
   1dfdc:	movw	ip, #30936	; 0x78d8
   1dfe0:	movt	ip, #2
   1dfe4:	str	ip, [sp, #20]
   1dfe8:	movw	ip, #30932	; 0x78d4
   1dfec:	movt	ip, #2
   1dff0:	str	ip, [sp, #32]
   1dff4:	ldrb	r3, [r7]
   1dff8:	cmp	r3, #0
   1dffc:	beq	1ea30 <__assert_fail@plt+0xcc68>
   1e000:	cmp	r3, #37	; 0x25
   1e004:	addne	r7, r7, #1
   1e008:	bne	1dff4 <__assert_fail@plt+0xc22c>
   1e00c:	cmp	r7, r1
   1e010:	beq	1e03c <__assert_fail@plt+0xc274>
   1e014:	rsb	r4, r1, r7
   1e018:	ldr	r0, [sp, #76]	; 0x4c
   1e01c:	ldr	ip, [sp, #72]	; 0x48
   1e020:	mov	r2, r4
   1e024:	blx	ip
   1e028:	cmp	r0, #0
   1e02c:	bne	1e32c <__assert_fail@plt+0xc564>
   1e030:	ldr	r3, [sp, #100]	; 0x64
   1e034:	add	r4, r3, r4
   1e038:	str	r4, [sp, #100]	; 0x64
   1e03c:	ldrb	r3, [r7, #1]
   1e040:	cmp	r3, #37	; 0x25
   1e044:	beq	1e4b8 <__assert_fail@plt+0xc6f0>
   1e048:	ldr	r3, [sl]
   1e04c:	cmp	r9, r8
   1e050:	add	r7, r7, r3
   1e054:	bls	1eecc <__assert_fail@plt+0xd104>
   1e058:	ldr	r3, [sl, #8]
   1e05c:	add	r8, r8, #1
   1e060:	cmn	r3, #2
   1e064:	beq	1e460 <__assert_fail@plt+0xc698>
   1e068:	ldr	r3, [sl, #12]
   1e06c:	cmn	r3, #2
   1e070:	beq	1e434 <__assert_fail@plt+0xc66c>
   1e074:	ldr	r3, [sl, #24]
   1e078:	cmn	r3, #1
   1e07c:	beq	1e418 <__assert_fail@plt+0xc650>
   1e080:	sub	r3, r3, #-268435455	; 0xf0000001
   1e084:	ldr	r1, [sl, #36]	; 0x24
   1e088:	ldr	r2, [r6, r3, lsl #4]
   1e08c:	add	r3, r6, r3, lsl #4
   1e090:	cmp	r1, r2
   1e094:	bne	1ee6c <__assert_fail@plt+0xd0a4>
   1e098:	ldrd	r0, [r3, #8]
   1e09c:	ldr	r2, [r3, #8]
   1e0a0:	strd	r0, [sp, #88]	; 0x58
   1e0a4:	ldr	r3, [sl, #20]
   1e0a8:	cmp	r3, #18
   1e0ac:	ldrls	pc, [pc, r3, lsl #2]
   1e0b0:	b	1e224 <__assert_fail@plt+0xc45c>
   1e0b4:	strdeq	lr, [r1], -r8
   1e0b8:	muleq	r1, r4, r3
   1e0bc:	muleq	r1, r4, r3
   1e0c0:	muleq	r1, r4, r3
   1e0c4:	muleq	r1, r4, r3
   1e0c8:	muleq	r1, r4, r3
   1e0cc:	andeq	lr, r1, r4, lsr r3
   1e0d0:	andeq	lr, r1, r4, lsr r3
   1e0d4:	andeq	lr, r1, r4, lsr r3
   1e0d8:	andeq	lr, r1, r4, lsr r3
   1e0dc:	andeq	lr, r1, r4, lsr r3
   1e0e0:	andeq	lr, r1, r4, lsr r3
   1e0e4:	andeq	lr, r1, r4, lsr r3
   1e0e8:	andeq	lr, r1, r4, lsr r3
   1e0ec:	andeq	lr, r1, r0, lsr r2
   1e0f0:	andeq	lr, r1, r4, asr #4
   1e0f4:	andeq	lr, r1, r4, lsl #3
   1e0f8:	andeq	lr, r1, r4, asr #4
   1e0fc:	andeq	lr, r1, r0, asr r1
   1e100:	add	r3, r1, #7
   1e104:	bic	r3, r3, #7
   1e108:	add	r1, r3, #8
   1e10c:	ldrd	r2, [r3]
   1e110:	strd	r2, [ip, #8]
   1e114:	b	1df98 <__assert_fail@plt+0xc1d0>
   1e118:	ldr	r3, [r1]
   1e11c:	add	r1, r1, #4
   1e120:	strb	r3, [ip, #8]
   1e124:	b	1df98 <__assert_fail@plt+0xc1d0>
   1e128:	ldr	r3, [r1]
   1e12c:	add	r1, r1, #4
   1e130:	strh	r3, [ip, #8]
   1e134:	b	1df98 <__assert_fail@plt+0xc1d0>
   1e138:	add	r1, r1, #7
   1e13c:	bic	r1, r1, #7
   1e140:	add	r1, r1, #8
   1e144:	ldrd	r2, [r1, #-8]
   1e148:	strd	r2, [ip, #8]
   1e14c:	b	1df98 <__assert_fail@plt+0xc1d0>
   1e150:	ldr	r3, [sl, #36]	; 0x24
   1e154:	sub	r3, r3, #21
   1e158:	cmp	r3, #7
   1e15c:	ldrls	pc, [pc, r3, lsl #2]
   1e160:	b	1e23c <__assert_fail@plt+0xc474>
   1e164:	andeq	lr, r1, r4, lsl #16
   1e168:	strdeq	lr, [r1], -r8
   1e16c:	andeq	lr, r1, r4, asr #11
   1e170:	andeq	lr, r1, r4, asr #11
   1e174:	andeq	lr, r1, r8, ror r7
   1e178:	andeq	lr, r1, r8, ror r7
   1e17c:	andeq	lr, r1, r4, asr #11
   1e180:	andeq	lr, r1, r4, asr #11
   1e184:	ldr	r3, [sl, #36]	; 0x24
   1e188:	cmp	r3, #19
   1e18c:	bne	1e23c <__assert_fail@plt+0xc474>
   1e190:	add	r1, sp, #548	; 0x224
   1e194:	ldr	ip, [sp, #12]
   1e198:	add	r1, r1, #3
   1e19c:	and	r0, r2, #15
   1e1a0:	lsrs	r2, r2, #4
   1e1a4:	mov	r3, r1
   1e1a8:	sub	r1, r1, #1
   1e1ac:	ldrb	r0, [ip, r0]
   1e1b0:	strb	r0, [r3]
   1e1b4:	bne	1e19c <__assert_fail@plt+0xc3d4>
   1e1b8:	add	r0, sp, #552	; 0x228
   1e1bc:	rsb	r2, r3, r0
   1e1c0:	cmp	r2, #7
   1e1c4:	bhi	1e1e8 <__assert_fail@plt+0xc420>
   1e1c8:	mov	r2, r3
   1e1cc:	mov	r1, #48	; 0x30
   1e1d0:	sub	r3, r3, #1
   1e1d4:	strb	r1, [r2, #-1]
   1e1d8:	rsb	r2, r3, r0
   1e1dc:	cmp	r2, #7
   1e1e0:	mov	r2, r3
   1e1e4:	bls	1e1d0 <__assert_fail@plt+0xc408>
   1e1e8:	sub	r1, r3, #2
   1e1ec:	mov	r2, #120	; 0x78
   1e1f0:	rsb	r4, r1, r0
   1e1f4:	strb	r2, [r3, #-1]
   1e1f8:	mov	r0, #48	; 0x30
   1e1fc:	ldr	ip, [sp, #72]	; 0x48
   1e200:	strb	r0, [r3, #-2]
   1e204:	mov	r2, r4
   1e208:	ldr	r0, [sp, #76]	; 0x4c
   1e20c:	blx	ip
   1e210:	cmp	r0, #0
   1e214:	bne	1e32c <__assert_fail@plt+0xc564>
   1e218:	ldr	r3, [sp, #100]	; 0x64
   1e21c:	add	r4, r3, r4
   1e220:	str	r4, [sp, #100]	; 0x64
   1e224:	add	sl, sl, #40	; 0x28
   1e228:	mov	r1, r7
   1e22c:	b	1dff4 <__assert_fail@plt+0xc22c>
   1e230:	ldr	r3, [sl, #36]	; 0x24
   1e234:	cmp	r3, #6
   1e238:	beq	1e798 <__assert_fail@plt+0xc9d0>
   1e23c:	mvn	r5, #0
   1e240:	b	1d6f0 <__assert_fail@plt+0xb928>
   1e244:	ldr	r3, [sl, #36]	; 0x24
   1e248:	cmp	r3, #14
   1e24c:	bne	1e23c <__assert_fail@plt+0xc474>
   1e250:	cmp	r2, #0
   1e254:	ldr	r1, [sl, #12]
   1e258:	ldr	r5, [sp, #16]
   1e25c:	movne	r5, r2
   1e260:	cmp	r1, #0
   1e264:	blt	1e768 <__assert_fail@plt+0xc9a0>
   1e268:	ldrb	r4, [r5]
   1e26c:	cmp	r4, #0
   1e270:	beq	1e2a0 <__assert_fail@plt+0xc4d8>
   1e274:	cmp	r1, #0
   1e278:	beq	1ee64 <__assert_fail@plt+0xd09c>
   1e27c:	mov	r3, r5
   1e280:	mov	r4, #0
   1e284:	b	1e290 <__assert_fail@plt+0xc4c8>
   1e288:	cmp	r4, r1
   1e28c:	beq	1e2a0 <__assert_fail@plt+0xc4d8>
   1e290:	ldrb	r2, [r3, #1]!
   1e294:	add	r4, r4, #1
   1e298:	cmp	r2, #0
   1e29c:	bne	1e288 <__assert_fail@plt+0xc4c0>
   1e2a0:	ldr	r3, [sl, #4]
   1e2a4:	tst	r3, #2
   1e2a8:	bne	1e2c0 <__assert_fail@plt+0xc4f8>
   1e2ac:	ldr	r3, [sl, #8]
   1e2b0:	cmp	r3, #0
   1e2b4:	blt	1e2c0 <__assert_fail@plt+0xc4f8>
   1e2b8:	cmp	r3, r4
   1e2bc:	bhi	1ed28 <__assert_fail@plt+0xcf60>
   1e2c0:	mov	r1, r5
   1e2c4:	ldr	r0, [sp, #76]	; 0x4c
   1e2c8:	mov	r2, r4
   1e2cc:	ldr	ip, [sp, #72]	; 0x48
   1e2d0:	blx	ip
   1e2d4:	cmp	r0, #0
   1e2d8:	bne	1e32c <__assert_fail@plt+0xc564>
   1e2dc:	ldr	r2, [sl, #4]
   1e2e0:	ldr	r3, [sp, #100]	; 0x64
   1e2e4:	tst	r2, #2
   1e2e8:	add	r3, r3, r4
   1e2ec:	str	r3, [sp, #100]	; 0x64
   1e2f0:	beq	1e224 <__assert_fail@plt+0xc45c>
   1e2f4:	ldr	r3, [sl, #8]
   1e2f8:	cmp	r3, #0
   1e2fc:	blt	1e224 <__assert_fail@plt+0xc45c>
   1e300:	cmp	r4, r3
   1e304:	bcs	1e224 <__assert_fail@plt+0xc45c>
   1e308:	add	r2, sp, #100	; 0x64
   1e30c:	rsb	r3, r4, r3
   1e310:	str	r2, [sp]
   1e314:	mov	r2, #32
   1e318:	ldr	r0, [sp, #72]	; 0x48
   1e31c:	ldr	r1, [sp, #76]	; 0x4c
   1e320:	bl	1cfb8 <__assert_fail@plt+0xb1f0>
   1e324:	cmp	r0, #0
   1e328:	beq	1e224 <__assert_fail@plt+0xc45c>
   1e32c:	mov	r5, r0
   1e330:	b	1d6f0 <__assert_fail@plt+0xb928>
   1e334:	mov	ip, #0
   1e338:	strb	ip, [sp, #99]	; 0x63
   1e33c:	ldr	r4, [sl, #36]	; 0x24
   1e340:	str	r2, [sp, #88]	; 0x58
   1e344:	cmp	r4, #12
   1e348:	ldrd	r0, [sp, #88]	; 0x58
   1e34c:	beq	1e5d0 <__assert_fail@plt+0xc808>
   1e350:	cmp	r4, #13
   1e354:	bne	1e23c <__assert_fail@plt+0xc474>
   1e358:	mov	lr, #1
   1e35c:	vldr	d7, [pc, #716]	; 1e630 <__assert_fail@plt+0xc868>
   1e360:	sub	r3, r3, #7
   1e364:	mov	r2, #0
   1e368:	strb	r2, [sp, #451]	; 0x1c3
   1e36c:	cmp	r3, #6
   1e370:	ldrls	pc, [pc, r3, lsl #2]
   1e374:	b	1e9f4 <__assert_fail@plt+0xcc2c>
   1e378:	andeq	lr, r1, r8, ror #19
   1e37c:	ldrdeq	lr, [r1], -ip
   1e380:	ldrdeq	lr, [r1], -r0
   1e384:	andeq	lr, r1, r4, asr #19
   1e388:			; <UNDEFINED> instruction: 0x0001e9b8
   1e38c:	andeq	lr, r1, r0, lsl r8
   1e390:	andeq	lr, r1, r0, lsr #28
   1e394:	cmp	r3, #1
   1e398:	mov	r0, #0
   1e39c:	str	r2, [sp, #88]	; 0x58
   1e3a0:	strb	r0, [sp, #99]	; 0x63
   1e3a4:	ldr	r1, [sp, #92]	; 0x5c
   1e3a8:	ldr	r0, [sl, #36]	; 0x24
   1e3ac:	beq	1e5e4 <__assert_fail@plt+0xc81c>
   1e3b0:	sub	r0, r0, #5
   1e3b4:	cmp	r0, #13
   1e3b8:	ldrls	pc, [pc, r0, lsl #2]
   1e3bc:	b	1e23c <__assert_fail@plt+0xc474>
   1e3c0:	andeq	lr, r1, ip, lsl #20
   1e3c4:	andeq	lr, r1, ip, lsr r2
   1e3c8:	andeq	lr, r1, r8, lsr r6
   1e3cc:	andeq	lr, r1, ip, lsr r2
   1e3d0:	andeq	lr, r1, r8, lsr r6
   1e3d4:	andeq	lr, r1, ip, lsr r2
   1e3d8:	andeq	lr, r1, ip, lsl #15
   1e3dc:	andeq	lr, r1, ip, lsr r2
   1e3e0:	andeq	lr, r1, ip, lsr r2
   1e3e4:	andeq	lr, r1, ip, lsr r2
   1e3e8:	andeq	lr, r1, ip, lsr r2
   1e3ec:	andeq	lr, r1, ip, lsl #15
   1e3f0:	andeq	lr, r1, r8, lsr r6
   1e3f4:	andeq	lr, r1, r0, lsl #20
   1e3f8:	movw	r0, #31136	; 0x79a0
   1e3fc:	movw	r1, #30972	; 0x78fc
   1e400:	movw	r3, #30860	; 0x788c
   1e404:	movt	r0, #2
   1e408:	movt	r1, #2
   1e40c:	movw	r2, #1355	; 0x54b
   1e410:	movt	r3, #2
   1e414:	bl	11dc8 <__assert_fail@plt>
   1e418:	ldr	r2, [sl, #20]
   1e41c:	cmp	r2, #17
   1e420:	bne	1e080 <__assert_fail@plt+0xc2b8>
   1e424:	ldr	r0, [sp, #84]	; 0x54
   1e428:	bl	11b10 <strerror@plt>
   1e42c:	mov	r2, r0
   1e430:	b	1e0a4 <__assert_fail@plt+0xc2dc>
   1e434:	ldr	r3, [sl, #32]
   1e438:	sub	r3, r3, #-268435455	; 0xf0000001
   1e43c:	ldr	r2, [r6, r3, lsl #4]
   1e440:	add	r3, r6, r3, lsl #4
   1e444:	cmp	r2, #6
   1e448:	bne	1eeac <__assert_fail@plt+0xd0e4>
   1e44c:	ldr	r3, [r3, #8]
   1e450:	cmp	r3, #0
   1e454:	mvnlt	r3, #0
   1e458:	str	r3, [sl, #12]
   1e45c:	b	1e074 <__assert_fail@plt+0xc2ac>
   1e460:	ldr	r3, [sl, #28]
   1e464:	sub	r3, r3, #-268435455	; 0xf0000001
   1e468:	ldr	r2, [r6, r3, lsl #4]
   1e46c:	add	r3, r6, r3, lsl #4
   1e470:	cmp	r2, #6
   1e474:	bne	1ee8c <__assert_fail@plt+0xd0c4>
   1e478:	ldr	r3, [r3, #8]
   1e47c:	cmp	r3, #0
   1e480:	rsblt	r3, r3, #0
   1e484:	strge	r3, [sl, #8]
   1e488:	ldrlt	r2, [sl, #4]
   1e48c:	strlt	r3, [sl, #8]
   1e490:	orrlt	r3, r2, #2
   1e494:	strlt	r3, [sl, #4]
   1e498:	b	1e068 <__assert_fail@plt+0xc2a0>
   1e49c:	mov	r0, r4
   1e4a0:	mov	r1, #16
   1e4a4:	bl	11888 <calloc@plt>
   1e4a8:	subs	r6, r0, #0
   1e4ac:	bne	1d9bc <__assert_fail@plt+0xbbf4>
   1e4b0:	mvn	r5, #0
   1e4b4:	b	1d6fc <__assert_fail@plt+0xb934>
   1e4b8:	ldr	r0, [sp, #76]	; 0x4c
   1e4bc:	mov	r1, r7
   1e4c0:	mov	r2, #1
   1e4c4:	ldr	ip, [sp, #72]	; 0x48
   1e4c8:	blx	ip
   1e4cc:	cmp	r0, #0
   1e4d0:	bne	1e32c <__assert_fail@plt+0xc564>
   1e4d4:	ldr	r3, [sp, #100]	; 0x64
   1e4d8:	add	r7, r7, #2
   1e4dc:	add	r3, r3, #1
   1e4e0:	mov	r1, r7
   1e4e4:	str	r3, [sp, #100]	; 0x64
   1e4e8:	b	1dff4 <__assert_fail@plt+0xc22c>
   1e4ec:	mov	ip, #0
   1e4f0:	str	ip, [sp, #40]	; 0x28
   1e4f4:	b	1df14 <__assert_fail@plt+0xc14c>
   1e4f8:	mov	r3, #5
   1e4fc:	str	r3, [fp, #36]	; 0x24
   1e500:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e504:	mov	r3, #3
   1e508:	str	r3, [fp, #36]	; 0x24
   1e50c:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e510:	mov	r0, #26
   1e514:	str	r0, [fp, #36]	; 0x24
   1e518:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e51c:	mov	r3, #25
   1e520:	str	r3, [fp, #36]	; 0x24
   1e524:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e528:	mov	r3, #24
   1e52c:	str	r3, [fp, #36]	; 0x24
   1e530:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e534:	mov	r3, #22
   1e538:	str	r3, [fp, #36]	; 0x24
   1e53c:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e540:	mov	r3, #21
   1e544:	str	r3, [fp, #36]	; 0x24
   1e548:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e54c:	mov	r3, #15
   1e550:	str	r3, [fp, #36]	; 0x24
   1e554:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e558:	mov	r3, #10
   1e55c:	str	r3, [fp, #36]	; 0x24
   1e560:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e564:	mov	r3, #8
   1e568:	str	r3, [fp, #36]	; 0x24
   1e56c:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e570:	mov	r3, #4
   1e574:	str	r3, [fp, #36]	; 0x24
   1e578:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e57c:	mov	r3, #2
   1e580:	str	r3, [fp, #36]	; 0x24
   1e584:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e588:	mov	r3, #16
   1e58c:	str	r3, [fp, #36]	; 0x24
   1e590:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e594:	mov	r3, #11
   1e598:	str	r3, [fp, #36]	; 0x24
   1e59c:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e5a0:	mov	r3, #9
   1e5a4:	str	r3, [fp, #36]	; 0x24
   1e5a8:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e5ac:	mov	r2, #28
   1e5b0:	str	r2, [fp, #36]	; 0x24
   1e5b4:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e5b8:	mov	r1, #27
   1e5bc:	str	r1, [fp, #36]	; 0x24
   1e5c0:	b	1dd5c <__assert_fail@plt+0xbf94>
   1e5c4:	ldr	r3, [sp, #100]	; 0x64
   1e5c8:	str	r3, [r2]
   1e5cc:	b	1e224 <__assert_fail@plt+0xc45c>
   1e5d0:	vmov	d7, r0, r1
   1e5d4:	mov	lr, ip
   1e5d8:	mov	r0, #0
   1e5dc:	mov	r1, #0
   1e5e0:	b	1e360 <__assert_fail@plt+0xc598>
   1e5e4:	sub	r0, r0, #4
   1e5e8:	cmp	r0, #14
   1e5ec:	ldrls	pc, [pc, r0, lsl #2]
   1e5f0:	b	1e23c <__assert_fail@plt+0xc474>
   1e5f4:	andeq	lr, r1, r4, lsr #20
   1e5f8:	andeq	lr, r1, ip, lsr r2
   1e5fc:	andeq	lr, r1, r8, asr #15
   1e600:	andeq	lr, r1, ip, lsr r2
   1e604:	andeq	lr, r1, r8, asr #15
   1e608:	andeq	lr, r1, ip, lsr r2
   1e60c:	andeq	lr, r1, r8, lsl sl
   1e610:	andeq	lr, r1, ip, lsr r2
   1e614:	andeq	lr, r1, ip, lsr r2
   1e618:	andeq	lr, r1, ip, lsr r2
   1e61c:	andeq	lr, r1, ip, lsr r2
   1e620:	andeq	lr, r1, r8, lsl sl
   1e624:	andeq	lr, r1, ip, lsr r2
   1e628:	andeq	lr, r1, r8, lsr r6
   1e62c:	andeq	lr, r1, r8, asr #15
	...
   1e638:	mov	r4, r2
   1e63c:	mov	r5, #0
   1e640:	ldr	r2, [sl, #4]
   1e644:	tst	r2, #4
   1e648:	beq	1eb18 <__assert_fail@plt+0xcd50>
   1e64c:	mov	r2, #43	; 0x2b
   1e650:	mov	ip, #1
   1e654:	strb	r2, [sp, #99]	; 0x63
   1e658:	str	ip, [sp, #24]
   1e65c:	orrs	r0, r4, r5
   1e660:	bne	1ea4c <__assert_fail@plt+0xcc84>
   1e664:	ldr	r2, [sl, #12]
   1e668:	cmp	r2, #0
   1e66c:	bne	1ea4c <__assert_fail@plt+0xcc84>
   1e670:	ldr	r3, [sl, #4]
   1e674:	add	ip, sp, #552	; 0x228
   1e678:	mov	r4, r2
   1e67c:	and	r3, r3, #2
   1e680:	mov	r5, #0
   1e684:	cmp	r3, #0
   1e688:	bne	1e6b4 <__assert_fail@plt+0xc8ec>
   1e68c:	ldr	r2, [sl, #8]
   1e690:	cmp	r2, #0
   1e694:	blt	1e6b4 <__assert_fail@plt+0xc8ec>
   1e698:	ldr	r1, [sp, #24]
   1e69c:	rsb	r3, r1, r2
   1e6a0:	cmp	r3, r4
   1e6a4:	bls	1e6b4 <__assert_fail@plt+0xc8ec>
   1e6a8:	rsb	r3, r4, r3
   1e6ac:	cmp	r3, r5
   1e6b0:	bcs	1ee2c <__assert_fail@plt+0xd064>
   1e6b4:	ldrb	r3, [sp, #99]	; 0x63
   1e6b8:	cmp	r3, #0
   1e6bc:	bne	1eb34 <__assert_fail@plt+0xcd6c>
   1e6c0:	ldr	r3, [sl, #4]
   1e6c4:	tst	r3, #16
   1e6c8:	beq	1e6dc <__assert_fail@plt+0xc914>
   1e6cc:	ldr	r1, [sl, #20]
   1e6d0:	sub	r3, r1, #4
   1e6d4:	cmp	r3, #1
   1e6d8:	bls	1ed7c <__assert_fail@plt+0xcfb4>
   1e6dc:	cmp	r5, #0
   1e6e0:	beq	1e710 <__assert_fail@plt+0xc948>
   1e6e4:	add	r3, sp, #100	; 0x64
   1e6e8:	ldr	r0, [sp, #72]	; 0x48
   1e6ec:	str	r3, [sp]
   1e6f0:	mov	r2, #48	; 0x30
   1e6f4:	ldr	r1, [sp, #76]	; 0x4c
   1e6f8:	mov	r3, r5
   1e6fc:	str	ip, [sp, #8]
   1e700:	bl	1cfb8 <__assert_fail@plt+0xb1f0>
   1e704:	ldr	ip, [sp, #8]
   1e708:	cmp	r0, #0
   1e70c:	bne	1e32c <__assert_fail@plt+0xc564>
   1e710:	mov	r1, ip
   1e714:	ldr	r0, [sp, #76]	; 0x4c
   1e718:	mov	r2, r4
   1e71c:	ldr	ip, [sp, #72]	; 0x48
   1e720:	blx	ip
   1e724:	cmp	r0, #0
   1e728:	bne	1e32c <__assert_fail@plt+0xc564>
   1e72c:	ldr	r2, [sl, #4]
   1e730:	ldr	r3, [sp, #100]	; 0x64
   1e734:	tst	r2, #2
   1e738:	add	r3, r3, r4
   1e73c:	str	r3, [sp, #100]	; 0x64
   1e740:	beq	1e224 <__assert_fail@plt+0xc45c>
   1e744:	ldr	r3, [sl, #8]
   1e748:	cmp	r3, #0
   1e74c:	blt	1e224 <__assert_fail@plt+0xc45c>
   1e750:	ldr	ip, [sp, #24]
   1e754:	rsb	r3, ip, r3
   1e758:	rsb	r3, r5, r3
   1e75c:	cmp	r3, r4
   1e760:	bls	1e224 <__assert_fail@plt+0xc45c>
   1e764:	b	1e308 <__assert_fail@plt+0xc540>
   1e768:	mov	r0, r5
   1e76c:	bl	11bac <strlen@plt>
   1e770:	mov	r4, r0
   1e774:	b	1e2a0 <__assert_fail@plt+0xc4d8>
   1e778:	ldr	r3, [sp, #100]	; 0x64
   1e77c:	mov	r1, #0
   1e780:	str	r1, [r2, #4]
   1e784:	str	r3, [r2]
   1e788:	b	1e224 <__assert_fail@plt+0xc45c>
   1e78c:	mov	r4, r2
   1e790:	mov	r5, r1
   1e794:	b	1e640 <__assert_fail@plt+0xc878>
   1e798:	add	r1, sp, #808	; 0x328
   1e79c:	ldr	r0, [sp, #76]	; 0x4c
   1e7a0:	ldr	ip, [sp, #72]	; 0x48
   1e7a4:	strb	r2, [r1, #-356]!	; 0xfffffe9c
   1e7a8:	mov	r2, #1
   1e7ac:	blx	ip
   1e7b0:	cmp	r0, #0
   1e7b4:	bne	1e32c <__assert_fail@plt+0xc564>
   1e7b8:	ldr	r3, [sp, #100]	; 0x64
   1e7bc:	add	r3, r3, #1
   1e7c0:	str	r3, [sp, #100]	; 0x64
   1e7c4:	b	1e224 <__assert_fail@plt+0xc45c>
   1e7c8:	asr	r5, r2, #31
   1e7cc:	mov	r4, r2
   1e7d0:	cmp	r4, #0
   1e7d4:	sbcs	r1, r5, #0
   1e7d8:	bge	1e640 <__assert_fail@plt+0xc878>
   1e7dc:	mov	r2, #45	; 0x2d
   1e7e0:	mov	ip, #1
   1e7e4:	rsbs	r4, r4, #0
   1e7e8:	rsc	r5, r5, #0
   1e7ec:	strb	r2, [sp, #99]	; 0x63
   1e7f0:	str	ip, [sp, #24]
   1e7f4:	b	1e65c <__assert_fail@plt+0xc894>
   1e7f8:	ldr	r3, [sp, #100]	; 0x64
   1e7fc:	strh	r3, [r2]
   1e800:	b	1e224 <__assert_fail@plt+0xc45c>
   1e804:	ldr	r3, [sp, #100]	; 0x64
   1e808:	strb	r3, [r2]
   1e80c:	b	1e224 <__assert_fail@plt+0xc45c>
   1e810:	mov	r3, #97	; 0x61
   1e814:	strb	r3, [sp, #450]	; 0x1c2
   1e818:	cmp	lr, #0
   1e81c:	addne	ip, sp, #432	; 0x1b0
   1e820:	addeq	r3, sp, #432	; 0x1b0
   1e824:	movne	r3, #76	; 0x4c
   1e828:	addne	r2, ip, #17
   1e82c:	strbne	r3, [sp, #449]	; 0x1c1
   1e830:	addeq	r2, r3, #18
   1e834:	ldr	ip, [sl, #12]
   1e838:	cmn	ip, #1
   1e83c:	beq	1e884 <__assert_fail@plt+0xcabc>
   1e840:	strd	r0, [sp, #24]
   1e844:	cmp	ip, #100	; 0x64
   1e848:	movge	ip, #100	; 0x64
   1e84c:	ldr	r0, [sp, #36]	; 0x24
   1e850:	sub	r2, r2, #1
   1e854:	umull	r1, r3, r0, ip
   1e858:	mov	r4, r2
   1e85c:	lsr	r3, r3, #3
   1e860:	add	r1, r3, r3, lsl #2
   1e864:	sub	r1, ip, r1, lsl #1
   1e868:	subs	ip, r3, #0
   1e86c:	add	r1, r1, #48	; 0x30
   1e870:	strb	r1, [r2], #-1
   1e874:	bne	1e854 <__assert_fail@plt+0xca8c>
   1e878:	ldrd	r0, [sp, #24]
   1e87c:	mov	r3, #46	; 0x2e
   1e880:	strb	r3, [r4, #-1]
   1e884:	ldr	r3, [sl, #4]
   1e888:	add	r5, sp, #452	; 0x1c4
   1e88c:	tst	r3, #16
   1e890:	movne	r3, #35	; 0x23
   1e894:	strbne	r3, [r2, #-1]
   1e898:	subne	r2, r2, #1
   1e89c:	mov	r3, #37	; 0x25
   1e8a0:	cmp	lr, #0
   1e8a4:	strb	r3, [r2, #-1]
   1e8a8:	sub	r3, r2, #1
   1e8ac:	strdne	r0, [sp]
   1e8b0:	vstreq	d7, [sp]
   1e8b4:	movw	r2, #350	; 0x15e
   1e8b8:	mov	r1, #1
   1e8bc:	mov	r0, r5
   1e8c0:	bl	11c0c <__sprintf_chk@plt>
   1e8c4:	mov	r0, r5
   1e8c8:	bl	11bac <strlen@plt>
   1e8cc:	ldrb	r2, [sp, #452]	; 0x1c4
   1e8d0:	cmp	r2, #45	; 0x2d
   1e8d4:	add	ip, r5, r0
   1e8d8:	mov	r4, r0
   1e8dc:	str	ip, [sp, #24]
   1e8e0:	beq	1eb8c <__assert_fail@plt+0xcdc4>
   1e8e4:	ldr	r3, [sl, #4]
   1e8e8:	tst	r3, #4
   1e8ec:	beq	1eb70 <__assert_fail@plt+0xcda8>
   1e8f0:	mov	ip, r5
   1e8f4:	mov	r5, #1
   1e8f8:	mov	r2, #43	; 0x2b
   1e8fc:	strb	r2, [sp, #99]	; 0x63
   1e900:	tst	r3, #2
   1e904:	bne	1e920 <__assert_fail@plt+0xcb58>
   1e908:	ldr	r3, [sl, #8]
   1e90c:	cmp	r3, #0
   1e910:	blt	1e920 <__assert_fail@plt+0xcb58>
   1e914:	rsb	r3, r5, r3
   1e918:	cmp	r3, r4
   1e91c:	bhi	1edec <__assert_fail@plt+0xd024>
   1e920:	cmp	r2, #0
   1e924:	beq	1e958 <__assert_fail@plt+0xcb90>
   1e928:	str	ip, [sp, #8]
   1e92c:	add	r1, sp, #99	; 0x63
   1e930:	ldr	r0, [sp, #76]	; 0x4c
   1e934:	mov	r2, #1
   1e938:	ldr	r3, [sp, #72]	; 0x48
   1e93c:	blx	r3
   1e940:	ldr	ip, [sp, #8]
   1e944:	cmp	r0, #0
   1e948:	bne	1e32c <__assert_fail@plt+0xc564>
   1e94c:	ldr	r3, [sp, #100]	; 0x64
   1e950:	add	r3, r3, #1
   1e954:	str	r3, [sp, #100]	; 0x64
   1e958:	ldr	r0, [sp, #24]
   1e95c:	mov	r1, ip
   1e960:	rsb	r3, ip, r0
   1e964:	ldr	r0, [sp, #76]	; 0x4c
   1e968:	str	r3, [sp, #8]
   1e96c:	mov	r2, r3
   1e970:	ldr	ip, [sp, #72]	; 0x48
   1e974:	blx	ip
   1e978:	ldr	r3, [sp, #8]
   1e97c:	cmp	r0, #0
   1e980:	bne	1e32c <__assert_fail@plt+0xc564>
   1e984:	ldr	r1, [sl, #4]
   1e988:	ldr	r2, [sp, #100]	; 0x64
   1e98c:	tst	r1, #2
   1e990:	add	r3, r2, r3
   1e994:	str	r3, [sp, #100]	; 0x64
   1e998:	beq	1e224 <__assert_fail@plt+0xc45c>
   1e99c:	ldr	r3, [sl, #8]
   1e9a0:	cmp	r3, #0
   1e9a4:	blt	1e224 <__assert_fail@plt+0xc45c>
   1e9a8:	rsb	r3, r5, r3
   1e9ac:	cmp	r4, r3
   1e9b0:	bcs	1e224 <__assert_fail@plt+0xc45c>
   1e9b4:	b	1e308 <__assert_fail@plt+0xc540>
   1e9b8:	mov	r3, #71	; 0x47
   1e9bc:	strb	r3, [sp, #450]	; 0x1c2
   1e9c0:	b	1e818 <__assert_fail@plt+0xca50>
   1e9c4:	mov	r3, #103	; 0x67
   1e9c8:	strb	r3, [sp, #450]	; 0x1c2
   1e9cc:	b	1e818 <__assert_fail@plt+0xca50>
   1e9d0:	mov	r3, #69	; 0x45
   1e9d4:	strb	r3, [sp, #450]	; 0x1c2
   1e9d8:	b	1e818 <__assert_fail@plt+0xca50>
   1e9dc:	mov	r3, #101	; 0x65
   1e9e0:	strb	r3, [sp, #450]	; 0x1c2
   1e9e4:	b	1e818 <__assert_fail@plt+0xca50>
   1e9e8:	mov	r3, #70	; 0x46
   1e9ec:	strb	r3, [sp, #450]	; 0x1c2
   1e9f0:	b	1e818 <__assert_fail@plt+0xca50>
   1e9f4:	mov	r3, #102	; 0x66
   1e9f8:	strb	r3, [sp, #450]	; 0x1c2
   1e9fc:	b	1e818 <__assert_fail@plt+0xca50>
   1ea00:	mov	r4, r2
   1ea04:	asr	r5, r2, #31
   1ea08:	b	1e640 <__assert_fail@plt+0xc878>
   1ea0c:	uxth	r4, r2
   1ea10:	mov	r5, #0
   1ea14:	b	1e640 <__assert_fail@plt+0xc878>
   1ea18:	mov	r4, r2
   1ea1c:	mov	r5, r1
   1ea20:	b	1e7d0 <__assert_fail@plt+0xca08>
   1ea24:	sxth	r4, r2
   1ea28:	asr	r5, r4, #31
   1ea2c:	b	1e7d0 <__assert_fail@plt+0xca08>
   1ea30:	subs	r2, r7, r1
   1ea34:	str	r7, [sp, #60]	; 0x3c
   1ea38:	bne	1ec90 <__assert_fail@plt+0xcec8>
   1ea3c:	mov	r5, #0
   1ea40:	b	1d6f0 <__assert_fail@plt+0xb928>
   1ea44:	mov	fp, r9
   1ea48:	b	1d834 <__assert_fail@plt+0xba6c>
   1ea4c:	bic	r2, r3, #2
   1ea50:	cmp	r2, #1
   1ea54:	beq	1eba4 <__assert_fail@plt+0xcddc>
   1ea58:	cmp	r3, #2
   1ea5c:	beq	1eca8 <__assert_fail@plt+0xcee0>
   1ea60:	cmp	r3, #4
   1ea64:	movw	r1, #30912	; 0x78c0
   1ea68:	movt	r1, #2
   1ea6c:	movw	r2, #30892	; 0x78ac
   1ea70:	movt	r2, #2
   1ea74:	movne	r3, r1
   1ea78:	add	r1, sp, #548	; 0x224
   1ea7c:	add	r1, r1, #3
   1ea80:	moveq	r3, r2
   1ea84:	and	r0, r4, #15
   1ea88:	lsr	r2, r4, #4
   1ea8c:	lsr	ip, r5, #4
   1ea90:	orr	r2, r2, r5, lsl #28
   1ea94:	ldrb	r0, [r3, r0]
   1ea98:	mov	r5, ip
   1ea9c:	mov	r4, r2
   1eaa0:	orrs	ip, r4, r5
   1eaa4:	mov	ip, r1
   1eaa8:	strb	r0, [ip]
   1eaac:	sub	r1, r1, #1
   1eab0:	bne	1ea84 <__assert_fail@plt+0xccbc>
   1eab4:	ldr	r3, [sl, #4]
   1eab8:	add	r4, sp, #552	; 0x228
   1eabc:	ldr	r2, [sl, #12]
   1eac0:	rsb	r4, ip, r4
   1eac4:	tst	r3, #16
   1eac8:	ldrne	r0, [sp, #24]
   1eacc:	addne	r0, r0, #2
   1ead0:	strne	r0, [sp, #24]
   1ead4:	tst	r3, #32
   1ead8:	beq	1eae4 <__assert_fail@plt+0xcd1c>
   1eadc:	cmn	r2, #1
   1eae0:	beq	1ed50 <__assert_fail@plt+0xcf88>
   1eae4:	cmp	r2, #0
   1eae8:	ble	1e67c <__assert_fail@plt+0xc8b4>
   1eaec:	cmp	r2, r4
   1eaf0:	bls	1e67c <__assert_fail@plt+0xc8b4>
   1eaf4:	rsb	r5, r4, r2
   1eaf8:	and	r3, r3, #2
   1eafc:	b	1e684 <__assert_fail@plt+0xc8bc>
   1eb00:	mov	r3, #23
   1eb04:	str	r3, [fp, #36]	; 0x24
   1eb08:	b	1dd5c <__assert_fail@plt+0xbf94>
   1eb0c:	mov	r3, #7
   1eb10:	str	r3, [fp, #36]	; 0x24
   1eb14:	b	1dd5c <__assert_fail@plt+0xbf94>
   1eb18:	ands	r2, r2, #8
   1eb1c:	streq	r2, [sp, #24]
   1eb20:	movne	r2, #32
   1eb24:	movne	ip, #1
   1eb28:	strbne	r2, [sp, #99]	; 0x63
   1eb2c:	strne	ip, [sp, #24]
   1eb30:	b	1e65c <__assert_fail@plt+0xc894>
   1eb34:	str	ip, [sp, #8]
   1eb38:	add	r1, sp, #99	; 0x63
   1eb3c:	ldr	r0, [sp, #76]	; 0x4c
   1eb40:	mov	r2, #1
   1eb44:	ldr	r3, [sp, #72]	; 0x48
   1eb48:	blx	r3
   1eb4c:	ldr	ip, [sp, #8]
   1eb50:	cmp	r0, #0
   1eb54:	bne	1e32c <__assert_fail@plt+0xc564>
   1eb58:	ldr	r3, [sp, #100]	; 0x64
   1eb5c:	add	r3, r3, #1
   1eb60:	str	r3, [sp, #100]	; 0x64
   1eb64:	b	1e6c0 <__assert_fail@plt+0xc8f8>
   1eb68:	mov	r3, ip
   1eb6c:	b	1d818 <__assert_fail@plt+0xba50>
   1eb70:	tst	r3, #8
   1eb74:	bne	1edcc <__assert_fail@plt+0xd004>
   1eb78:	ldrb	r2, [sp, #99]	; 0x63
   1eb7c:	mov	ip, r5
   1eb80:	adds	r5, r2, #0
   1eb84:	movne	r5, #1
   1eb88:	b	1e900 <__assert_fail@plt+0xcb38>
   1eb8c:	strb	r2, [sp, #99]	; 0x63
   1eb90:	add	ip, r5, #1
   1eb94:	sub	r4, r0, #1
   1eb98:	ldr	r3, [sl, #4]
   1eb9c:	mov	r5, #1
   1eba0:	b	1e900 <__assert_fail@plt+0xcb38>
   1eba4:	mov	r0, r2
   1eba8:	bfi	r0, r2, #16, #16
   1ebac:	add	ip, sp, #552	; 0x228
   1ebb0:	mvn	r1, #0
   1ebb4:	str	ip, [sp, #68]	; 0x44
   1ebb8:	str	r1, [sp, #44]	; 0x2c
   1ebbc:	bl	11d08 <nl_langinfo@plt>
   1ebc0:	add	ip, sp, #552	; 0x228
   1ebc4:	str	r6, [sp, #48]	; 0x30
   1ebc8:	str	r9, [sp, #60]	; 0x3c
   1ebcc:	str	r8, [sp, #64]	; 0x40
   1ebd0:	mov	r6, ip
   1ebd4:	mov	r8, sl
   1ebd8:	ldr	r9, [sp, #44]	; 0x2c
   1ebdc:	mov	sl, r7
   1ebe0:	str	r0, [sp, #40]	; 0x28
   1ebe4:	b	1ec30 <__assert_fail@plt+0xce68>
   1ebe8:	mov	r0, r4
   1ebec:	mov	r1, r5
   1ebf0:	mov	r2, #10
   1ebf4:	mov	r3, #0
   1ebf8:	bl	2423c <__assert_fail@plt+0x12474>
   1ebfc:	mov	r0, r4
   1ec00:	mov	r1, r5
   1ec04:	mov	r3, #0
   1ec08:	sub	r7, r6, #1
   1ec0c:	add	r2, r2, #48	; 0x30
   1ec10:	strb	r2, [r6, #-1]
   1ec14:	mov	r2, #10
   1ec18:	bl	2423c <__assert_fail@plt+0x12474>
   1ec1c:	mov	r4, r0
   1ec20:	mov	r5, r1
   1ec24:	orrs	r0, r4, r5
   1ec28:	beq	1ec64 <__assert_fail@plt+0xce9c>
   1ec2c:	mov	r6, r7
   1ec30:	ldr	r3, [r8, #4]
   1ec34:	tst	r3, #1
   1ec38:	beq	1ebe8 <__assert_fail@plt+0xce20>
   1ec3c:	add	r9, r9, #1
   1ec40:	cmp	r9, #3
   1ec44:	bne	1ebe8 <__assert_fail@plt+0xce20>
   1ec48:	ldr	ip, [sp, #40]	; 0x28
   1ec4c:	ldrb	r3, [ip]
   1ec50:	cmp	r3, #0
   1ec54:	strbne	r3, [r6, #-1]
   1ec58:	subne	r6, r6, #1
   1ec5c:	movne	r9, #0
   1ec60:	b	1ebe8 <__assert_fail@plt+0xce20>
   1ec64:	ldr	r1, [sp, #68]	; 0x44
   1ec68:	mov	ip, r7
   1ec6c:	mov	r7, sl
   1ec70:	mov	sl, r8
   1ec74:	ldr	r6, [sp, #48]	; 0x30
   1ec78:	rsb	r4, ip, r1
   1ec7c:	ldr	r9, [sp, #60]	; 0x3c
   1ec80:	ldr	r8, [sp, #64]	; 0x40
   1ec84:	ldr	r3, [sl, #4]
   1ec88:	ldr	r2, [sl, #12]
   1ec8c:	b	1ead4 <__assert_fail@plt+0xcd0c>
   1ec90:	ldr	r0, [sp, #76]	; 0x4c
   1ec94:	ldr	ip, [sp, #72]	; 0x48
   1ec98:	blx	ip
   1ec9c:	subs	r5, r0, #0
   1eca0:	bne	1d6f0 <__assert_fail@plt+0xb928>
   1eca4:	b	1ea3c <__assert_fail@plt+0xcc74>
   1eca8:	add	r2, sp, #548	; 0x224
   1ecac:	add	r2, r2, #3
   1ecb0:	lsr	r3, r4, #3
   1ecb4:	lsr	r0, r5, #3
   1ecb8:	orr	r3, r3, r5, lsl #29
   1ecbc:	mov	ip, r2
   1ecc0:	and	r1, r4, #7
   1ecc4:	mov	r5, r0
   1ecc8:	mov	r4, r3
   1eccc:	orrs	r2, r4, r5
   1ecd0:	add	r1, r1, #48	; 0x30
   1ecd4:	sub	r2, ip, #1
   1ecd8:	strb	r1, [ip]
   1ecdc:	bne	1ecb0 <__assert_fail@plt+0xcee8>
   1ece0:	ldr	r3, [sl, #4]
   1ece4:	mov	r0, ip
   1ece8:	add	r4, sp, #552	; 0x228
   1ecec:	tst	r3, #16
   1ecf0:	beq	1edc0 <__assert_fail@plt+0xcff8>
   1ecf4:	cmp	r1, #48	; 0x30
   1ecf8:	beq	1edc0 <__assert_fail@plt+0xcff8>
   1ecfc:	mov	r3, #48	; 0x30
   1ed00:	mov	ip, r2
   1ed04:	strb	r3, [r0, #-1]
   1ed08:	rsb	r4, r2, r4
   1ed0c:	ldr	r3, [sl, #4]
   1ed10:	ldr	r2, [sl, #12]
   1ed14:	b	1ead4 <__assert_fail@plt+0xcd0c>
   1ed18:	add	ip, sp, #232	; 0xe8
   1ed1c:	str	ip, [sp, #56]	; 0x38
   1ed20:	mov	fp, ip
   1ed24:	b	1d828 <__assert_fail@plt+0xba60>
   1ed28:	add	r2, sp, #100	; 0x64
   1ed2c:	rsb	r3, r4, r3
   1ed30:	str	r2, [sp]
   1ed34:	mov	r2, #32
   1ed38:	ldr	r0, [sp, #72]	; 0x48
   1ed3c:	ldr	r1, [sp, #76]	; 0x4c
   1ed40:	bl	1cfb8 <__assert_fail@plt+0xb1f0>
   1ed44:	cmp	r0, #0
   1ed48:	beq	1e2c0 <__assert_fail@plt+0xc4f8>
   1ed4c:	b	1e32c <__assert_fail@plt+0xc564>
   1ed50:	ands	r3, r3, #2
   1ed54:	bne	1ede4 <__assert_fail@plt+0xd01c>
   1ed58:	cmp	r4, #0
   1ed5c:	beq	1ee5c <__assert_fail@plt+0xd094>
   1ed60:	ldr	r2, [sl, #8]
   1ed64:	ldr	r0, [sp, #24]
   1ed68:	rsb	r1, r0, r2
   1ed6c:	cmp	r1, r4
   1ed70:	rsbhi	r5, r4, r1
   1ed74:	movls	r5, r3
   1ed78:	b	1e690 <__assert_fail@plt+0xc8c8>
   1ed7c:	ldr	r2, [sp, #32]
   1ed80:	cmp	r1, #4
   1ed84:	ldr	r0, [sp, #20]
   1ed88:	str	ip, [sp, #8]
   1ed8c:	moveq	r0, r2
   1ed90:	ldr	r3, [sp, #72]	; 0x48
   1ed94:	mov	r1, r0
   1ed98:	mov	r2, #2
   1ed9c:	ldr	r0, [sp, #76]	; 0x4c
   1eda0:	blx	r3
   1eda4:	ldr	ip, [sp, #8]
   1eda8:	cmp	r0, #0
   1edac:	bne	1e32c <__assert_fail@plt+0xc564>
   1edb0:	ldr	r3, [sp, #100]	; 0x64
   1edb4:	add	r3, r3, #2
   1edb8:	str	r3, [sp, #100]	; 0x64
   1edbc:	b	1e6dc <__assert_fail@plt+0xc914>
   1edc0:	ldr	r2, [sl, #12]
   1edc4:	rsb	r4, ip, r4
   1edc8:	b	1ead4 <__assert_fail@plt+0xcd0c>
   1edcc:	mov	r1, #32
   1edd0:	mov	ip, r5
   1edd4:	mov	r2, r1
   1edd8:	mov	r5, #1
   1eddc:	strb	r1, [sp, #99]	; 0x63
   1ede0:	b	1e900 <__assert_fail@plt+0xcb38>
   1ede4:	mov	r5, #0
   1ede8:	b	1e6b4 <__assert_fail@plt+0xc8ec>
   1edec:	add	r2, sp, #100	; 0x64
   1edf0:	rsb	r3, r4, r3
   1edf4:	str	r2, [sp]
   1edf8:	mov	r2, #32
   1edfc:	ldr	r0, [sp, #72]	; 0x48
   1ee00:	ldr	r1, [sp, #76]	; 0x4c
   1ee04:	str	ip, [sp, #8]
   1ee08:	bl	1cfb8 <__assert_fail@plt+0xb1f0>
   1ee0c:	ldr	ip, [sp, #8]
   1ee10:	cmp	r0, #0
   1ee14:	bne	1e32c <__assert_fail@plt+0xc564>
   1ee18:	ldrb	r2, [sp, #99]	; 0x63
   1ee1c:	b	1e920 <__assert_fail@plt+0xcb58>
   1ee20:	mov	r3, #65	; 0x41
   1ee24:	strb	r3, [sp, #450]	; 0x1c2
   1ee28:	b	1e818 <__assert_fail@plt+0xca50>
   1ee2c:	add	r2, sp, #100	; 0x64
   1ee30:	rsb	r3, r5, r3
   1ee34:	str	r2, [sp]
   1ee38:	mov	r2, #32
   1ee3c:	ldr	r0, [sp, #72]	; 0x48
   1ee40:	ldr	r1, [sp, #76]	; 0x4c
   1ee44:	str	ip, [sp, #8]
   1ee48:	bl	1cfb8 <__assert_fail@plt+0xb1f0>
   1ee4c:	ldr	ip, [sp, #8]
   1ee50:	cmp	r0, #0
   1ee54:	beq	1e6b4 <__assert_fail@plt+0xc8ec>
   1ee58:	b	1e32c <__assert_fail@plt+0xc564>
   1ee5c:	mov	r5, r4
   1ee60:	b	1e68c <__assert_fail@plt+0xc8c4>
   1ee64:	mov	r4, r1
   1ee68:	b	1e2a0 <__assert_fail@plt+0xc4d8>
   1ee6c:	movw	r0, #31092	; 0x7974
   1ee70:	movw	r1, #30972	; 0x78fc
   1ee74:	movw	r3, #30860	; 0x788c
   1ee78:	movt	r0, #2
   1ee7c:	movt	r1, #2
   1ee80:	movw	r2, #1349	; 0x545
   1ee84:	movt	r3, #2
   1ee88:	bl	11dc8 <__assert_fail@plt>
   1ee8c:	movw	r0, #30992	; 0x7910
   1ee90:	movw	r1, #30972	; 0x78fc
   1ee94:	movw	r3, #30860	; 0x788c
   1ee98:	movt	r0, #2
   1ee9c:	movt	r1, #2
   1eea0:	movw	r2, #1329	; 0x531
   1eea4:	movt	r3, #2
   1eea8:	bl	11dc8 <__assert_fail@plt>
   1eeac:	movw	r0, #31040	; 0x7940
   1eeb0:	movw	r1, #30972	; 0x78fc
   1eeb4:	movw	r3, #30860	; 0x788c
   1eeb8:	movt	r0, #2
   1eebc:	movt	r1, #2
   1eec0:	movw	r2, #1339	; 0x53b
   1eec4:	movt	r3, #2
   1eec8:	bl	11dc8 <__assert_fail@plt>
   1eecc:	movw	r0, #30948	; 0x78e4
   1eed0:	movw	r1, #30972	; 0x78fc
   1eed4:	movw	r3, #30860	; 0x788c
   1eed8:	movt	r0, #2
   1eedc:	movt	r1, #2
   1eee0:	movw	r2, #1323	; 0x52b
   1eee4:	movt	r3, #2
   1eee8:	bl	11dc8 <__assert_fail@plt>
   1eeec:	mov	ip, #0
   1eef0:	mov	sl, r3
   1eef4:	str	ip, [sp, #24]
   1eef8:	b	1d398 <__assert_fail@plt+0xb5d0>
   1eefc:	bl	119d8 <__stack_chk_fail@plt>
   1ef00:	push	{r0, r1, r2, r3}
   1ef04:	movw	r1, #44632	; 0xae58
   1ef08:	push	{r4, lr}
   1ef0c:	movw	r4, #44624	; 0xae50
   1ef10:	movt	r4, #3
   1ef14:	sub	sp, sp, #8
   1ef18:	add	ip, sp, #20
   1ef1c:	movt	r1, #3
   1ef20:	ldr	lr, [r4]
   1ef24:	movw	r0, #53344	; 0xd060
   1ef28:	ldr	r2, [sp, #16]
   1ef2c:	mov	r3, ip
   1ef30:	ldr	r1, [r1]
   1ef34:	movt	r0, #1
   1ef38:	str	lr, [sp, #4]
   1ef3c:	str	ip, [sp]
   1ef40:	bl	1d1f0 <__assert_fail@plt+0xb428>
   1ef44:	ldr	r2, [sp, #4]
   1ef48:	ldr	r3, [r4]
   1ef4c:	cmp	r2, r3
   1ef50:	bne	1ef64 <__assert_fail@plt+0xd19c>
   1ef54:	add	sp, sp, #8
   1ef58:	pop	{r4, lr}
   1ef5c:	add	sp, sp, #16
   1ef60:	bx	lr
   1ef64:	bl	119d8 <__stack_chk_fail@plt>
   1ef68:	push	{r1, r2, r3}
   1ef6c:	mov	r1, r0
   1ef70:	push	{r4, lr}
   1ef74:	movw	r4, #44624	; 0xae50
   1ef78:	movt	r4, #3
   1ef7c:	sub	sp, sp, #12
   1ef80:	add	ip, sp, #24
   1ef84:	movw	r0, #53344	; 0xd060
   1ef88:	ldr	lr, [r4]
   1ef8c:	movt	r0, #1
   1ef90:	ldr	r2, [sp, #20]
   1ef94:	mov	r3, ip
   1ef98:	str	ip, [sp]
   1ef9c:	str	lr, [sp, #4]
   1efa0:	bl	1d1f0 <__assert_fail@plt+0xb428>
   1efa4:	ldr	r2, [sp, #4]
   1efa8:	ldr	r3, [r4]
   1efac:	cmp	r2, r3
   1efb0:	bne	1efc4 <__assert_fail@plt+0xd1fc>
   1efb4:	add	sp, sp, #12
   1efb8:	pop	{r4, lr}
   1efbc:	add	sp, sp, #12
   1efc0:	bx	lr
   1efc4:	bl	119d8 <__stack_chk_fail@plt>
   1efc8:	mov	ip, r1
   1efcc:	mov	r3, r2
   1efd0:	mov	r1, r0
   1efd4:	mov	r2, ip
   1efd8:	movw	r0, #53344	; 0xd060
   1efdc:	movt	r0, #1
   1efe0:	b	1d1f0 <__assert_fail@plt+0xb428>
   1efe4:	push	{r4, r5, r6, lr}
   1efe8:	movw	r4, #44624	; 0xae50
   1efec:	movt	r4, #3
   1eff0:	sub	sp, sp, #24
   1eff4:	mov	r5, r1
   1eff8:	cmp	r5, #0
   1effc:	ldr	ip, [r4]
   1f000:	mov	r6, r0
   1f004:	add	r1, sp, #4
   1f008:	movw	r0, #53380	; 0xd084
   1f00c:	movt	r0, #1
   1f010:	movne	lr, r6
   1f014:	moveq	lr, #0
   1f018:	str	ip, [sp, #20]
   1f01c:	str	r5, [sp, #4]
   1f020:	mov	ip, #0
   1f024:	str	lr, [sp, #16]
   1f028:	str	ip, [sp, #8]
   1f02c:	str	ip, [sp, #12]
   1f030:	bl	1d1f0 <__assert_fail@plt+0xb428>
   1f034:	cmp	r0, #0
   1f038:	beq	1f090 <__assert_fail@plt+0xd2c8>
   1f03c:	cmn	r0, #1
   1f040:	beq	1f058 <__assert_fail@plt+0xd290>
   1f044:	cmp	r5, #0
   1f048:	cmpne	r6, #0
   1f04c:	ldr	r0, [sp, #8]
   1f050:	bne	1f070 <__assert_fail@plt+0xd2a8>
   1f054:	sub	r0, r0, #1
   1f058:	ldr	r2, [sp, #20]
   1f05c:	ldr	r3, [r4]
   1f060:	cmp	r2, r3
   1f064:	bne	1f0a8 <__assert_fail@plt+0xd2e0>
   1f068:	add	sp, sp, #24
   1f06c:	pop	{r4, r5, r6, pc}
   1f070:	ldr	r3, [sp, #4]
   1f074:	cmp	r3, #0
   1f078:	beq	1f054 <__assert_fail@plt+0xd28c>
   1f07c:	cmp	r3, r0
   1f080:	addls	r6, r6, r3
   1f084:	movls	r3, #0
   1f088:	strbls	r3, [r6, #-1]
   1f08c:	b	1f054 <__assert_fail@plt+0xd28c>
   1f090:	add	r0, sp, #4
   1f094:	movw	r1, #23988	; 0x5db4
   1f098:	mov	r2, #1
   1f09c:	movt	r1, #2
   1f0a0:	bl	1d084 <__assert_fail@plt+0xb2bc>
   1f0a4:	b	1f03c <__assert_fail@plt+0xd274>
   1f0a8:	bl	119d8 <__stack_chk_fail@plt>
   1f0ac:	push	{r2, r3}
   1f0b0:	push	{r4, lr}
   1f0b4:	movw	r4, #44624	; 0xae50
   1f0b8:	movt	r4, #3
   1f0bc:	sub	sp, sp, #8
   1f0c0:	add	ip, sp, #20
   1f0c4:	ldr	lr, [r4]
   1f0c8:	ldr	r2, [sp, #16]
   1f0cc:	mov	r3, ip
   1f0d0:	str	ip, [sp]
   1f0d4:	str	lr, [sp, #4]
   1f0d8:	bl	1efe4 <__assert_fail@plt+0xd21c>
   1f0dc:	ldr	r2, [sp, #4]
   1f0e0:	ldr	r3, [r4]
   1f0e4:	cmp	r2, r3
   1f0e8:	bne	1f0fc <__assert_fail@plt+0xd334>
   1f0ec:	add	sp, sp, #8
   1f0f0:	pop	{r4, lr}
   1f0f4:	add	sp, sp, #8
   1f0f8:	bx	lr
   1f0fc:	bl	119d8 <__stack_chk_fail@plt>
   1f100:	push	{r4, r5, r6, r7, lr}
   1f104:	movw	r4, #44624	; 0xae50
   1f108:	movt	r4, #3
   1f10c:	sub	sp, sp, #28
   1f110:	mov	ip, #512	; 0x200
   1f114:	mov	r5, r0
   1f118:	ldr	lr, [r4]
   1f11c:	mov	r0, ip
   1f120:	str	ip, [sp, #8]
   1f124:	mov	r7, r1
   1f128:	mov	ip, #0
   1f12c:	mov	r6, r2
   1f130:	str	lr, [sp, #20]
   1f134:	str	ip, [sp, #4]
   1f138:	str	ip, [sp, #12]
   1f13c:	bl	170b4 <__assert_fail@plt+0x52ec>
   1f140:	cmp	r0, #0
   1f144:	str	r0, [sp, #16]
   1f148:	streq	r0, [r5]
   1f14c:	mvneq	r0, #0
   1f150:	beq	1f1a0 <__assert_fail@plt+0xd3d8>
   1f154:	mov	r2, r7
   1f158:	mov	r3, r6
   1f15c:	movw	r0, #53552	; 0xd130
   1f160:	add	r1, sp, #4
   1f164:	movt	r0, #1
   1f168:	bl	1d1f0 <__assert_fail@plt+0xb428>
   1f16c:	cmp	r0, #0
   1f170:	beq	1f1e8 <__assert_fail@plt+0xd420>
   1f174:	cmn	r0, #1
   1f178:	beq	1f1c0 <__assert_fail@plt+0xd3f8>
   1f17c:	ldr	r6, [sp, #4]
   1f180:	cmp	r6, #0
   1f184:	bne	1f1b8 <__assert_fail@plt+0xd3f0>
   1f188:	ldr	r0, [sp, #12]
   1f18c:	cmp	r0, #0
   1f190:	beq	1f204 <__assert_fail@plt+0xd43c>
   1f194:	ldr	r3, [sp, #16]
   1f198:	sub	r0, r0, #1
   1f19c:	str	r3, [r5]
   1f1a0:	ldr	r2, [sp, #20]
   1f1a4:	ldr	r3, [r4]
   1f1a8:	cmp	r2, r3
   1f1ac:	bne	1f200 <__assert_fail@plt+0xd438>
   1f1b0:	add	sp, sp, #28
   1f1b4:	pop	{r4, r5, r6, r7, pc}
   1f1b8:	bl	11bf4 <__errno_location@plt>
   1f1bc:	str	r6, [r0]
   1f1c0:	mov	r1, #0
   1f1c4:	ldr	r2, [sp, #12]
   1f1c8:	ldr	r0, [sp, #16]
   1f1cc:	bl	11c3c <memset@plt>
   1f1d0:	ldr	r0, [sp, #16]
   1f1d4:	bl	1716c <__assert_fail@plt+0x53a4>
   1f1d8:	mov	r3, #0
   1f1dc:	mvn	r0, #0
   1f1e0:	str	r3, [r5]
   1f1e4:	b	1f1a0 <__assert_fail@plt+0xd3d8>
   1f1e8:	add	r0, sp, #4
   1f1ec:	movw	r1, #23988	; 0x5db4
   1f1f0:	mov	r2, #1
   1f1f4:	movt	r1, #2
   1f1f8:	bl	1d130 <__assert_fail@plt+0xb368>
   1f1fc:	b	1f174 <__assert_fail@plt+0xd3ac>
   1f200:	bl	119d8 <__stack_chk_fail@plt>
   1f204:	movw	r0, #31164	; 0x79bc
   1f208:	movw	r1, #30972	; 0x78fc
   1f20c:	movt	r0, #2
   1f210:	movt	r1, #2
   1f214:	movw	r2, #1767	; 0x6e7
   1f218:	ldr	r3, [pc]	; 1f220 <__assert_fail@plt+0xd458>
   1f21c:	bl	11dc8 <__assert_fail@plt>
   1f220:	muleq	r2, r8, r8
   1f224:	push	{r1, r2, r3}
   1f228:	push	{r4, lr}
   1f22c:	movw	r4, #44624	; 0xae50
   1f230:	movt	r4, #3
   1f234:	sub	sp, sp, #12
   1f238:	add	r3, sp, #24
   1f23c:	ldr	ip, [r4]
   1f240:	mov	r2, r3
   1f244:	ldr	r1, [sp, #20]
   1f248:	str	r3, [sp]
   1f24c:	str	ip, [sp, #4]
   1f250:	bl	1f100 <__assert_fail@plt+0xd338>
   1f254:	ldr	r2, [sp, #4]
   1f258:	ldr	r3, [r4]
   1f25c:	cmp	r2, r3
   1f260:	bne	1f274 <__assert_fail@plt+0xd4ac>
   1f264:	add	sp, sp, #12
   1f268:	pop	{r4, lr}
   1f26c:	add	sp, sp, #12
   1f270:	bx	lr
   1f274:	bl	119d8 <__stack_chk_fail@plt>
   1f278:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f27c:	subs	r5, r0, #0
   1f280:	mov	fp, r1
   1f284:	mov	r8, r2
   1f288:	beq	1f420 <__assert_fail@plt+0xd658>
   1f28c:	ldrb	r3, [r5]
   1f290:	cmp	r3, #0
   1f294:	beq	1f410 <__assert_fail@plt+0xd648>
   1f298:	mov	r7, #0
   1f29c:	mov	r6, r5
   1f2a0:	mov	r4, r7
   1f2a4:	cmp	r3, #58	; 0x3a
   1f2a8:	cmpne	r3, #37	; 0x25
   1f2ac:	mov	r1, r3
   1f2b0:	mov	r0, fp
   1f2b4:	add	r4, r4, #1
   1f2b8:	beq	1f2d0 <__assert_fail@plt+0xd508>
   1f2bc:	cmp	fp, #0
   1f2c0:	beq	1f2d4 <__assert_fail@plt+0xd50c>
   1f2c4:	bl	11bc4 <strchr@plt>
   1f2c8:	cmp	r0, #0
   1f2cc:	beq	1f2d4 <__assert_fail@plt+0xd50c>
   1f2d0:	add	r7, r7, #1
   1f2d4:	ldrb	r3, [r6, #1]!
   1f2d8:	cmp	r3, #0
   1f2dc:	bne	1f2a4 <__assert_fail@plt+0xd4dc>
   1f2e0:	add	r4, r4, r7, lsl #1
   1f2e4:	add	r0, r4, #1
   1f2e8:	cmp	r8, #0
   1f2ec:	bne	1f3d4 <__assert_fail@plt+0xd60c>
   1f2f0:	bl	170b4 <__assert_fail@plt+0x52ec>
   1f2f4:	subs	r9, r0, #0
   1f2f8:	beq	1f420 <__assert_fail@plt+0xd658>
   1f2fc:	ldrb	r1, [r5]
   1f300:	cmp	r1, #0
   1f304:	beq	1f418 <__assert_fail@plt+0xd650>
   1f308:	add	r5, r5, #1
   1f30c:	mov	r4, #0
   1f310:	mov	r6, #37	; 0x25
   1f314:	mov	sl, #50	; 0x32
   1f318:	mov	r8, #51	; 0x33
   1f31c:	mov	r7, #97	; 0x61
   1f320:	b	1f398 <__assert_fail@plt+0xd5d0>
   1f324:	cmp	r1, #37	; 0x25
   1f328:	beq	1f3e0 <__assert_fail@plt+0xd618>
   1f32c:	cmp	fp, #0
   1f330:	beq	1f400 <__assert_fail@plt+0xd638>
   1f334:	mov	r0, fp
   1f338:	bl	11bc4 <strchr@plt>
   1f33c:	cmp	r0, #0
   1f340:	beq	1f400 <__assert_fail@plt+0xd638>
   1f344:	strb	r6, [r9, r4]
   1f348:	add	r0, r4, #1
   1f34c:	ldrb	r2, [r5, #-1]
   1f350:	add	r0, r9, r0
   1f354:	add	r1, r4, #2
   1f358:	add	r4, r4, #3
   1f35c:	add	r1, r9, r1
   1f360:	lsr	r2, r2, #4
   1f364:	cmp	r2, #9
   1f368:	addle	r2, r2, #48	; 0x30
   1f36c:	addgt	r2, r2, #87	; 0x57
   1f370:	strb	r2, [r0]
   1f374:	ldrb	r2, [r5, #-1]
   1f378:	and	r2, r2, #15
   1f37c:	cmp	r2, #9
   1f380:	addle	r2, r2, #48	; 0x30
   1f384:	addgt	r2, r2, #87	; 0x57
   1f388:	strb	r2, [r1]
   1f38c:	ldrb	r1, [r5], #1
   1f390:	cmp	r1, #0
   1f394:	beq	1f3c4 <__assert_fail@plt+0xd5fc>
   1f398:	cmp	r1, #58	; 0x3a
   1f39c:	bne	1f324 <__assert_fail@plt+0xd55c>
   1f3a0:	add	r1, r4, #2
   1f3a4:	mov	r2, r9
   1f3a8:	strb	r6, [r2, r4]!
   1f3ac:	add	r4, r4, #3
   1f3b0:	strb	r8, [r2, #1]
   1f3b4:	strb	r7, [r9, r1]
   1f3b8:	ldrb	r1, [r5], #1
   1f3bc:	cmp	r1, #0
   1f3c0:	bne	1f398 <__assert_fail@plt+0xd5d0>
   1f3c4:	mov	r2, #0
   1f3c8:	mov	r0, r9
   1f3cc:	strb	r2, [r9, r4]
   1f3d0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3d4:	bl	170bc <__assert_fail@plt+0x52f4>
   1f3d8:	mov	r9, r0
   1f3dc:	b	1f2fc <__assert_fail@plt+0xd534>
   1f3e0:	add	r0, r4, #2
   1f3e4:	mov	r2, r9
   1f3e8:	strb	r1, [r2, r4]!
   1f3ec:	mov	r3, #53	; 0x35
   1f3f0:	strb	sl, [r2, #1]
   1f3f4:	add	r4, r4, #3
   1f3f8:	strb	r3, [r9, r0]
   1f3fc:	b	1f38c <__assert_fail@plt+0xd5c4>
   1f400:	ldrb	r2, [r5, #-1]
   1f404:	strb	r2, [r9, r4]
   1f408:	add	r4, r4, #1
   1f40c:	b	1f38c <__assert_fail@plt+0xd5c4>
   1f410:	mov	r0, #1
   1f414:	b	1f2e8 <__assert_fail@plt+0xd520>
   1f418:	mov	r4, r1
   1f41c:	b	1f3c4 <__assert_fail@plt+0xd5fc>
   1f420:	mov	r0, #0
   1f424:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f428:	cmp	r1, #0
   1f42c:	push	{r4, lr}
   1f430:	mov	r4, r0
   1f434:	beq	1f464 <__assert_fail@plt+0xd69c>
   1f438:	mov	r0, r1
   1f43c:	bl	118b8 <getpwnam@plt>
   1f440:	cmp	r0, #0
   1f444:	popeq	{r4, pc}
   1f448:	cmp	r4, #0
   1f44c:	ldr	r0, [r0, #20]
   1f450:	bne	1f45c <__assert_fail@plt+0xd694>
   1f454:	pop	{r4, lr}
   1f458:	b	170d0 <__assert_fail@plt+0x5308>
   1f45c:	pop	{r4, lr}
   1f460:	b	17134 <__assert_fail@plt+0x536c>
   1f464:	bl	1193c <getuid@plt>
   1f468:	bl	11900 <getpwuid@plt>
   1f46c:	cmp	r0, #0
   1f470:	bne	1f448 <__assert_fail@plt+0xd680>
   1f474:	pop	{r4, pc}
   1f478:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1f47c:	movw	r6, #44624	; 0xae50
   1f480:	movt	r6, #3
   1f484:	sub	sp, sp, #136	; 0x88
   1f488:	mov	sl, r0
   1f48c:	mov	r0, r1
   1f490:	ldr	r3, [r6]
   1f494:	mov	r4, r2
   1f498:	mov	r9, r1
   1f49c:	str	r3, [sp, #132]	; 0x84
   1f4a0:	bl	11bac <strlen@plt>
   1f4a4:	mov	r7, r0
   1f4a8:	ldr	r0, [r4]
   1f4ac:	cmp	r0, #0
   1f4b0:	str	r0, [sp, #4]
   1f4b4:	addeq	r7, r7, #1
   1f4b8:	beq	1f4f8 <__assert_fail@plt+0xd730>
   1f4bc:	bl	11bac <strlen@plt>
   1f4c0:	add	r7, r7, #2
   1f4c4:	add	r8, r4, #124	; 0x7c
   1f4c8:	add	r5, sp, #4
   1f4cc:	add	r7, r7, r0
   1f4d0:	b	1f4e8 <__assert_fail@plt+0xd720>
   1f4d4:	bl	11bac <strlen@plt>
   1f4d8:	cmp	r4, r8
   1f4dc:	add	r0, r0, #1
   1f4e0:	add	r7, r7, r0
   1f4e4:	beq	1f5ac <__assert_fail@plt+0xd7e4>
   1f4e8:	ldr	r0, [r4, #4]!
   1f4ec:	cmp	r0, #0
   1f4f0:	str	r0, [r5, #4]!
   1f4f4:	bne	1f4d4 <__assert_fail@plt+0xd70c>
   1f4f8:	ldrb	r3, [r9]
   1f4fc:	add	r7, r7, #1
   1f500:	cmp	r3, #126	; 0x7e
   1f504:	movne	r4, #0
   1f508:	movne	r5, #1
   1f50c:	movne	r8, r4
   1f510:	beq	1f5c8 <__assert_fail@plt+0xd800>
   1f514:	cmp	sl, #0
   1f518:	mov	r0, r7
   1f51c:	bne	1f5a0 <__assert_fail@plt+0xd7d8>
   1f520:	bl	170b4 <__assert_fail@plt+0x52ec>
   1f524:	subs	r7, r0, #0
   1f528:	beq	1f6d8 <__assert_fail@plt+0xd910>
   1f52c:	cmp	r4, #0
   1f530:	beq	1f650 <__assert_fail@plt+0xd888>
   1f534:	mov	r1, r4
   1f538:	mov	r0, r7
   1f53c:	bl	119c0 <stpcpy@plt>
   1f540:	add	r1, r9, r5
   1f544:	bl	119c0 <stpcpy@plt>
   1f548:	mov	r5, r0
   1f54c:	mov	r0, r8
   1f550:	bl	1716c <__assert_fail@plt+0x53a4>
   1f554:	ldr	r1, [sp, #4]
   1f558:	cmp	r1, #0
   1f55c:	beq	1f584 <__assert_fail@plt+0xd7bc>
   1f560:	add	r4, sp, #4
   1f564:	mov	r8, #47	; 0x2f
   1f568:	mov	r0, r5
   1f56c:	strb	r8, [r0], #1
   1f570:	bl	119c0 <stpcpy@plt>
   1f574:	ldr	r1, [r4, #4]!
   1f578:	cmp	r1, #0
   1f57c:	mov	r5, r0
   1f580:	bne	1f568 <__assert_fail@plt+0xd7a0>
   1f584:	ldr	r2, [sp, #132]	; 0x84
   1f588:	mov	r0, r7
   1f58c:	ldr	r3, [r6]
   1f590:	cmp	r2, r3
   1f594:	bne	1f700 <__assert_fail@plt+0xd938>
   1f598:	add	sp, sp, #136	; 0x88
   1f59c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1f5a0:	bl	170bc <__assert_fail@plt+0x52f4>
   1f5a4:	mov	r7, r0
   1f5a8:	b	1f52c <__assert_fail@plt+0xd764>
   1f5ac:	cmp	sl, #0
   1f5b0:	bne	1f6e8 <__assert_fail@plt+0xd920>
   1f5b4:	bl	11bf4 <__errno_location@plt>
   1f5b8:	mov	r7, sl
   1f5bc:	mov	r3, #22
   1f5c0:	str	r3, [r0]
   1f5c4:	b	1f584 <__assert_fail@plt+0xd7bc>
   1f5c8:	ldrb	r3, [r9, #1]
   1f5cc:	cmp	r3, #47	; 0x2f
   1f5d0:	cmpne	r3, #0
   1f5d4:	beq	1f678 <__assert_fail@plt+0xd8b0>
   1f5d8:	cmp	sl, #0
   1f5dc:	add	r0, r9, #1
   1f5e0:	beq	1f664 <__assert_fail@plt+0xd89c>
   1f5e4:	bl	17134 <__assert_fail@plt+0x536c>
   1f5e8:	mov	r4, r0
   1f5ec:	mov	r1, #47	; 0x2f
   1f5f0:	mov	r0, r4
   1f5f4:	bl	11bc4 <strchr@plt>
   1f5f8:	cmp	r0, #0
   1f5fc:	movne	r3, #0
   1f600:	strbne	r3, [r0]
   1f604:	mov	r0, r4
   1f608:	bl	11bac <strlen@plt>
   1f60c:	mov	r1, r4
   1f610:	add	r5, r0, #1
   1f614:	mov	r0, sl
   1f618:	bl	1f428 <__assert_fail@plt+0xd660>
   1f61c:	mov	r8, r0
   1f620:	mov	r0, r4
   1f624:	bl	1716c <__assert_fail@plt+0x53a4>
   1f628:	cmp	r8, #0
   1f62c:	beq	1f6d0 <__assert_fail@plt+0xd908>
   1f630:	mov	r0, r8
   1f634:	mov	r4, r8
   1f638:	bl	11bac <strlen@plt>
   1f63c:	cmp	sl, #0
   1f640:	add	r7, r7, r0
   1f644:	mov	r0, r7
   1f648:	beq	1f520 <__assert_fail@plt+0xd758>
   1f64c:	b	1f5a0 <__assert_fail@plt+0xd7d8>
   1f650:	mov	r1, r9
   1f654:	mov	r0, r7
   1f658:	bl	119c0 <stpcpy@plt>
   1f65c:	mov	r5, r0
   1f660:	b	1f54c <__assert_fail@plt+0xd784>
   1f664:	bl	170d0 <__assert_fail@plt+0x5308>
   1f668:	subs	r4, r0, #0
   1f66c:	bne	1f5ec <__assert_fail@plt+0xd824>
   1f670:	mov	r7, sl
   1f674:	b	1f584 <__assert_fail@plt+0xd7bc>
   1f678:	movw	r0, #31212	; 0x79ec
   1f67c:	movt	r0, #2
   1f680:	bl	11ad4 <getenv@plt>
   1f684:	subs	r4, r0, #0
   1f688:	movne	r8, #0
   1f68c:	beq	1f6b0 <__assert_fail@plt+0xd8e8>
   1f690:	ldrb	r3, [r4]
   1f694:	cmp	r3, #0
   1f698:	beq	1f6c8 <__assert_fail@plt+0xd900>
   1f69c:	mov	r0, r4
   1f6a0:	mov	r5, #1
   1f6a4:	bl	11bac <strlen@plt>
   1f6a8:	add	r7, r7, r0
   1f6ac:	b	1f514 <__assert_fail@plt+0xd74c>
   1f6b0:	mov	r1, r4
   1f6b4:	mov	r0, sl
   1f6b8:	bl	1f428 <__assert_fail@plt+0xd660>
   1f6bc:	subs	r8, r0, #0
   1f6c0:	mov	r4, r8
   1f6c4:	bne	1f690 <__assert_fail@plt+0xd8c8>
   1f6c8:	mov	r5, #1
   1f6cc:	b	1f514 <__assert_fail@plt+0xd74c>
   1f6d0:	mov	r4, r8
   1f6d4:	b	1f6c8 <__assert_fail@plt+0xd900>
   1f6d8:	mov	r0, r8
   1f6dc:	mov	r7, sl
   1f6e0:	bl	1716c <__assert_fail@plt+0x53a4>
   1f6e4:	b	1f584 <__assert_fail@plt+0xd7bc>
   1f6e8:	movw	r0, #31196	; 0x79dc
   1f6ec:	movw	r2, #31176	; 0x79c8
   1f6f0:	movt	r0, #2
   1f6f4:	movt	r2, #2
   1f6f8:	movw	r1, #374	; 0x176
   1f6fc:	bl	23dc8 <__assert_fail@plt+0x12000>
   1f700:	bl	119d8 <__stack_chk_fail@plt>
   1f704:	push	{r4, r5, r6, r7, r8, lr}
   1f708:	movw	r7, #44624	; 0xae50
   1f70c:	movt	r7, #3
   1f710:	sub	sp, sp, #200	; 0xc8
   1f714:	mov	r4, r1
   1f718:	ldr	r3, [r7]
   1f71c:	str	r0, [sp, #4]
   1f720:	str	r3, [sp, #196]	; 0xc4
   1f724:	bl	11bac <strlen@plt>
   1f728:	mov	r5, r0
   1f72c:	ldr	r0, [r4]
   1f730:	cmp	r0, #0
   1f734:	str	r0, [sp, #8]
   1f738:	beq	1f770 <__assert_fail@plt+0xd9a8>
   1f73c:	bl	11bac <strlen@plt>
   1f740:	add	r8, r4, #184	; 0xb8
   1f744:	add	r6, sp, #8
   1f748:	add	r5, r5, r0
   1f74c:	b	1f760 <__assert_fail@plt+0xd998>
   1f750:	bl	11bac <strlen@plt>
   1f754:	cmp	r4, r8
   1f758:	add	r5, r5, r0
   1f75c:	beq	1f7c4 <__assert_fail@plt+0xd9fc>
   1f760:	ldr	r0, [r4, #4]!
   1f764:	cmp	r0, #0
   1f768:	str	r0, [r6, #4]!
   1f76c:	bne	1f750 <__assert_fail@plt+0xd988>
   1f770:	add	r0, r5, #1
   1f774:	bl	170b4 <__assert_fail@plt+0x52ec>
   1f778:	subs	r5, r0, #0
   1f77c:	beq	1f7a4 <__assert_fail@plt+0xd9dc>
   1f780:	ldr	r1, [sp, #4]
   1f784:	cmp	r1, #0
   1f788:	beq	1f7a4 <__assert_fail@plt+0xd9dc>
   1f78c:	add	r4, sp, #4
   1f790:	mov	r0, r5
   1f794:	bl	119c0 <stpcpy@plt>
   1f798:	ldr	r1, [r4, #4]!
   1f79c:	cmp	r1, #0
   1f7a0:	bne	1f794 <__assert_fail@plt+0xd9cc>
   1f7a4:	mov	r3, r5
   1f7a8:	ldr	r2, [sp, #196]	; 0xc4
   1f7ac:	mov	r0, r3
   1f7b0:	ldr	r3, [r7]
   1f7b4:	cmp	r2, r3
   1f7b8:	bne	1f7d8 <__assert_fail@plt+0xda10>
   1f7bc:	add	sp, sp, #200	; 0xc8
   1f7c0:	pop	{r4, r5, r6, r7, r8, pc}
   1f7c4:	bl	11bf4 <__errno_location@plt>
   1f7c8:	mov	r2, #22
   1f7cc:	mov	r3, #0
   1f7d0:	str	r2, [r0]
   1f7d4:	b	1f7a8 <__assert_fail@plt+0xd9e0>
   1f7d8:	bl	119d8 <__stack_chk_fail@plt>
   1f7dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7e0:	subs	r6, r1, #0
   1f7e4:	sub	sp, sp, #12
   1f7e8:	mov	r9, r0
   1f7ec:	beq	1f8b8 <__assert_fail@plt+0xdaf0>
   1f7f0:	str	r2, [sp, #4]
   1f7f4:	bl	11b4c <__ctype_toupper_loc@plt>
   1f7f8:	ldr	r2, [sp, #4]
   1f7fc:	sub	r6, r6, #1
   1f800:	mov	r8, r9
   1f804:	mov	fp, r2
   1f808:	ldrb	r3, [fp], #1
   1f80c:	ldr	r1, [r0]
   1f810:	ldr	sl, [r1, r3, lsl #2]
   1f814:	b	1f82c <__assert_fail@plt+0xda64>
   1f818:	cmp	r6, #0
   1f81c:	add	r9, r9, #1
   1f820:	sub	r3, r6, #1
   1f824:	beq	1f8b8 <__assert_fail@plt+0xdaf0>
   1f828:	mov	r6, r3
   1f82c:	mov	r0, r8
   1f830:	ldrb	r3, [r8], #1
   1f834:	add	r7, r6, #1
   1f838:	ldr	r3, [r1, r3, lsl #2]
   1f83c:	cmp	r3, sl
   1f840:	bne	1f818 <__assert_fail@plt+0xda50>
   1f844:	cmp	r6, #0
   1f848:	ldrb	r4, [r2, #1]
   1f84c:	beq	1f8a0 <__assert_fail@plt+0xdad8>
   1f850:	ldrb	ip, [r9, #1]
   1f854:	ldr	r3, [r1, r4, lsl #2]
   1f858:	ldr	ip, [r1, ip, lsl #2]
   1f85c:	cmp	ip, r3
   1f860:	bne	1f8a0 <__assert_fail@plt+0xdad8>
   1f864:	add	r7, r9, r7
   1f868:	add	r3, r9, #2
   1f86c:	mov	ip, fp
   1f870:	str	r2, [sp]
   1f874:	b	1f890 <__assert_fail@plt+0xdac8>
   1f878:	ldrb	r4, [ip, #1]!
   1f87c:	ldrb	r5, [r3], #1
   1f880:	ldr	r2, [r1, r4, lsl #2]
   1f884:	ldr	r5, [r1, r5, lsl #2]
   1f888:	cmp	r5, r2
   1f88c:	bne	1f8b0 <__assert_fail@plt+0xdae8>
   1f890:	cmp	r3, r7
   1f894:	bne	1f878 <__assert_fail@plt+0xdab0>
   1f898:	ldr	r2, [sp]
   1f89c:	ldrb	r4, [ip, #1]
   1f8a0:	cmp	r4, #0
   1f8a4:	bne	1f818 <__assert_fail@plt+0xda50>
   1f8a8:	add	sp, sp, #12
   1f8ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8b0:	ldr	r2, [sp]
   1f8b4:	b	1f8a0 <__assert_fail@plt+0xdad8>
   1f8b8:	mov	r0, r6
   1f8bc:	add	sp, sp, #12
   1f8c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f8c4:	cmp	r1, #0
   1f8c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   1f8cc:	beq	1f99c <__assert_fail@plt+0xdbd4>
   1f8d0:	mov	fp, r2
   1f8d4:	sub	r8, r1, #1
   1f8d8:	ldrb	sl, [fp], #1
   1f8dc:	sub	r3, sl, #97	; 0x61
   1f8e0:	cmp	r3, #25
   1f8e4:	andls	sl, sl, #223	; 0xdf
   1f8e8:	b	1f900 <__assert_fail@plt+0xdb38>
   1f8ec:	cmp	r8, #0
   1f8f0:	sub	r3, r8, #1
   1f8f4:	beq	1f990 <__assert_fail@plt+0xdbc8>
   1f8f8:	mov	r8, r3
   1f8fc:	mov	r0, r7
   1f900:	mov	r7, r0
   1f904:	ldrb	r3, [r7], #1
   1f908:	sub	r1, r3, #97	; 0x61
   1f90c:	cmp	r1, #25
   1f910:	bicls	r3, r3, #32
   1f914:	cmp	r3, sl
   1f918:	bne	1f8ec <__assert_fail@plt+0xdb24>
   1f91c:	cmp	r8, #0
   1f920:	ldrbeq	r1, [r2, #1]
   1f924:	beq	1f970 <__assert_fail@plt+0xdba8>
   1f928:	mov	ip, fp
   1f92c:	mov	r6, r0
   1f930:	mov	r4, r8
   1f934:	b	1f940 <__assert_fail@plt+0xdb78>
   1f938:	subs	r4, r4, #1
   1f93c:	beq	1f980 <__assert_fail@plt+0xdbb8>
   1f940:	ldrb	r3, [r6, #1]!
   1f944:	mov	r9, ip
   1f948:	sub	r1, r3, #97	; 0x61
   1f94c:	cmp	r1, #25
   1f950:	ldrb	r1, [ip], #1
   1f954:	bicls	r3, r3, #32
   1f958:	sub	r5, r1, #97	; 0x61
   1f95c:	cmp	r5, #25
   1f960:	mov	r5, r1
   1f964:	bicls	r5, r1, #32
   1f968:	cmp	r3, r5
   1f96c:	beq	1f938 <__assert_fail@plt+0xdb70>
   1f970:	cmp	r1, #0
   1f974:	bne	1f8ec <__assert_fail@plt+0xdb24>
   1f978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   1f97c:	bx	lr
   1f980:	ldrb	r1, [r9, #1]
   1f984:	cmp	r1, #0
   1f988:	bne	1f8ec <__assert_fail@plt+0xdb24>
   1f98c:	b	1f978 <__assert_fail@plt+0xdbb0>
   1f990:	mov	r0, r8
   1f994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   1f998:	bx	lr
   1f99c:	mov	r0, r1
   1f9a0:	b	1f978 <__assert_fail@plt+0xdbb0>
   1f9a4:	push	{r4, lr}
   1f9a8:	subs	r4, r2, #0
   1f9ac:	sub	sp, sp, #8
   1f9b0:	beq	1f9f8 <__assert_fail@plt+0xdc30>
   1f9b4:	cmp	r0, #0
   1f9b8:	beq	1fa00 <__assert_fail@plt+0xdc38>
   1f9bc:	subs	r3, r4, #1
   1f9c0:	beq	1fa14 <__assert_fail@plt+0xdc4c>
   1f9c4:	ldrb	r2, [r1]
   1f9c8:	mov	ip, r0
   1f9cc:	cmp	r2, #0
   1f9d0:	bne	1f9e4 <__assert_fail@plt+0xdc1c>
   1f9d4:	b	1f9f0 <__assert_fail@plt+0xdc28>
   1f9d8:	ldrb	r2, [r1, #1]!
   1f9dc:	cmp	r2, #0
   1f9e0:	beq	1f9f0 <__assert_fail@plt+0xdc28>
   1f9e4:	subs	r3, r3, #1
   1f9e8:	strb	r2, [ip], #1
   1f9ec:	bne	1f9d8 <__assert_fail@plt+0xdc10>
   1f9f0:	mov	r3, #0
   1f9f4:	strb	r3, [ip]
   1f9f8:	add	sp, sp, #8
   1f9fc:	pop	{r4, pc}
   1fa00:	mov	r0, r4
   1fa04:	str	r1, [sp, #4]
   1fa08:	bl	170bc <__assert_fail@plt+0x52f4>
   1fa0c:	ldr	r1, [sp, #4]
   1fa10:	b	1f9bc <__assert_fail@plt+0xdbf4>
   1fa14:	mov	ip, r0
   1fa18:	b	1f9f0 <__assert_fail@plt+0xdc28>
   1fa1c:	push	{r3, r4, r5, lr}
   1fa20:	mov	r5, r0
   1fa24:	ldrb	r4, [r0]
   1fa28:	cmp	r4, #0
   1fa2c:	beq	1fad0 <__assert_fail@plt+0xdd08>
   1fa30:	bl	11b7c <__ctype_b_loc@plt>
   1fa34:	mov	r2, r5
   1fa38:	ldr	r1, [r0]
   1fa3c:	b	1fa4c <__assert_fail@plt+0xdc84>
   1fa40:	ldrb	r4, [r2, #1]!
   1fa44:	cmp	r4, #0
   1fa48:	beq	1fad0 <__assert_fail@plt+0xdd08>
   1fa4c:	lsl	r4, r4, #1
   1fa50:	ldrh	r3, [r1, r4]
   1fa54:	and	r3, r3, #8192	; 0x2000
   1fa58:	uxth	r3, r3
   1fa5c:	cmp	r3, #0
   1fa60:	bne	1fa40 <__assert_fail@plt+0xdc78>
   1fa64:	ldrb	r1, [r2]
   1fa68:	cmp	r1, #0
   1fa6c:	strb	r1, [r5]
   1fa70:	subne	r2, r2, #1
   1fa74:	movne	ip, r3
   1fa78:	movne	r1, r5
   1fa7c:	beq	1fad8 <__assert_fail@plt+0xdd10>
   1fa80:	ldrb	r3, [r2, #1]!
   1fa84:	ldr	r4, [r0]
   1fa88:	lsl	r3, r3, #1
   1fa8c:	ldrh	r3, [r4, r3]
   1fa90:	and	r3, r3, #8192	; 0x2000
   1fa94:	uxth	r3, r3
   1fa98:	cmp	r3, #0
   1fa9c:	moveq	ip, r3
   1faa0:	beq	1faac <__assert_fail@plt+0xdce4>
   1faa4:	cmp	ip, #0
   1faa8:	moveq	ip, r1
   1faac:	ldrb	r3, [r2, #1]
   1fab0:	cmp	r3, #0
   1fab4:	strb	r3, [r1, #1]!
   1fab8:	bne	1fa80 <__assert_fail@plt+0xdcb8>
   1fabc:	cmp	ip, #0
   1fac0:	beq	1fad8 <__assert_fail@plt+0xdd10>
   1fac4:	strb	r3, [ip]
   1fac8:	mov	r0, r5
   1facc:	pop	{r3, r4, r5, pc}
   1fad0:	mov	r3, #0
   1fad4:	strb	r3, [r5]
   1fad8:	mov	r0, r5
   1fadc:	pop	{r3, r4, r5, pc}
   1fae0:	push	{r3, r4, r5, lr}
   1fae4:	mov	r5, r0
   1fae8:	ldrb	r4, [r0]
   1faec:	cmp	r4, #0
   1faf0:	beq	1fb3c <__assert_fail@plt+0xdd74>
   1faf4:	bl	11b7c <__ctype_b_loc@plt>
   1faf8:	mov	r3, r5
   1fafc:	mov	r1, #0
   1fb00:	ldr	ip, [r0]
   1fb04:	lsl	r4, r4, #1
   1fb08:	ldrh	r2, [ip, r4]
   1fb0c:	and	r2, r2, #8192	; 0x2000
   1fb10:	uxth	r2, r2
   1fb14:	cmp	r2, #0
   1fb18:	moveq	r1, r2
   1fb1c:	beq	1fb28 <__assert_fail@plt+0xdd60>
   1fb20:	cmp	r1, #0
   1fb24:	moveq	r1, r3
   1fb28:	ldrb	r4, [r3, #1]!
   1fb2c:	cmp	r4, #0
   1fb30:	bne	1fb04 <__assert_fail@plt+0xdd3c>
   1fb34:	cmp	r1, #0
   1fb38:	strbne	r4, [r1]
   1fb3c:	mov	r0, r5
   1fb40:	pop	{r3, r4, r5, pc}
   1fb44:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fb48:	subs	sl, r1, #0
   1fb4c:	mov	r9, r0
   1fb50:	mov	r7, r2
   1fb54:	beq	1fbac <__assert_fail@plt+0xdde4>
   1fb58:	add	r8, sl, r0
   1fb5c:	mov	r4, r0
   1fb60:	mov	r6, #0
   1fb64:	ldrb	r1, [r4]
   1fb68:	mov	r0, r7
   1fb6c:	bl	11bc4 <strchr@plt>
   1fb70:	mov	r5, r4
   1fb74:	add	r4, r4, #1
   1fb78:	cmp	r0, #0
   1fb7c:	moveq	r6, r0
   1fb80:	beq	1fb8c <__assert_fail@plt+0xddc4>
   1fb84:	cmp	r6, #0
   1fb88:	moveq	r6, r5
   1fb8c:	cmp	r4, r8
   1fb90:	bne	1fb64 <__assert_fail@plt+0xdd9c>
   1fb94:	cmp	r6, #0
   1fb98:	beq	1fbac <__assert_fail@plt+0xdde4>
   1fb9c:	mov	r3, #0
   1fba0:	rsb	r0, r9, r6
   1fba4:	strb	r3, [r6]
   1fba8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fbac:	mov	r0, sl
   1fbb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fbb4:	movw	r2, #23984	; 0x5db0
   1fbb8:	movt	r2, #2
   1fbbc:	b	1fb44 <__assert_fail@plt+0xdd7c>
   1fbc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fbc4:	subs	sl, r1, #0
   1fbc8:	mov	r9, r0
   1fbcc:	mov	r7, r2
   1fbd0:	beq	1fc20 <__assert_fail@plt+0xde58>
   1fbd4:	add	r8, r0, sl
   1fbd8:	mov	r4, r0
   1fbdc:	mov	r6, #0
   1fbe0:	ldrb	r1, [r4]
   1fbe4:	mov	r0, r7
   1fbe8:	bl	11bc4 <strchr@plt>
   1fbec:	mov	r5, r4
   1fbf0:	add	r4, r4, #1
   1fbf4:	cmp	r0, #0
   1fbf8:	moveq	r6, r0
   1fbfc:	beq	1fc08 <__assert_fail@plt+0xde40>
   1fc00:	cmp	r6, #0
   1fc04:	moveq	r6, r5
   1fc08:	cmp	r4, r8
   1fc0c:	bne	1fbe0 <__assert_fail@plt+0xde18>
   1fc10:	cmp	r6, #0
   1fc14:	beq	1fc20 <__assert_fail@plt+0xde58>
   1fc18:	rsb	r0, r9, r6
   1fc1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fc20:	mov	r0, sl
   1fc24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1fc28:	movw	r2, #23984	; 0x5db0
   1fc2c:	movt	r2, #2
   1fc30:	b	1fbc0 <__assert_fail@plt+0xddf8>
   1fc34:	push	{r4, lr}
   1fc38:	mov	r1, #47	; 0x2f
   1fc3c:	mov	r4, r0
   1fc40:	bl	11cfc <strrchr@plt>
   1fc44:	cmp	r0, #0
   1fc48:	beq	1fc58 <__assert_fail@plt+0xde90>
   1fc4c:	add	r0, r0, #1
   1fc50:	pop	{r4, lr}
   1fc54:	b	17134 <__assert_fail@plt+0x536c>
   1fc58:	mov	r0, r4
   1fc5c:	pop	{r4, lr}
   1fc60:	b	17134 <__assert_fail@plt+0x536c>
   1fc64:	push	{r4, r5, r6, lr}
   1fc68:	mov	r1, #47	; 0x2f
   1fc6c:	mov	r5, r0
   1fc70:	bl	11cfc <strrchr@plt>
   1fc74:	cmp	r0, #0
   1fc78:	beq	1fca8 <__assert_fail@plt+0xdee0>
   1fc7c:	rsb	r4, r5, r0
   1fc80:	add	r0, r4, #1
   1fc84:	bl	170bc <__assert_fail@plt+0x52f4>
   1fc88:	mov	r1, r5
   1fc8c:	mov	r2, r4
   1fc90:	mov	r6, r0
   1fc94:	bl	11c48 <strncpy@plt>
   1fc98:	mov	r3, #0
   1fc9c:	mov	r0, r6
   1fca0:	strb	r3, [r6, r4]
   1fca4:	pop	{r4, r5, r6, pc}
   1fca8:	movw	r0, #32724	; 0x7fd4
   1fcac:	movt	r0, #2
   1fcb0:	pop	{r4, r5, r6, lr}
   1fcb4:	b	17134 <__assert_fail@plt+0x536c>
   1fcb8:	push	{r0, r1, r2, r3}
   1fcbc:	mov	r0, #1
   1fcc0:	push	{r4, lr}
   1fcc4:	movw	r4, #44624	; 0xae50
   1fcc8:	movt	r4, #3
   1fccc:	sub	sp, sp, #8
   1fcd0:	add	r3, sp, #20
   1fcd4:	ldr	ip, [r4]
   1fcd8:	mov	r2, r3
   1fcdc:	ldr	r1, [sp, #16]
   1fce0:	str	r3, [sp]
   1fce4:	str	ip, [sp, #4]
   1fce8:	bl	1f478 <__assert_fail@plt+0xd6b0>
   1fcec:	ldr	r2, [sp, #4]
   1fcf0:	ldr	r3, [r4]
   1fcf4:	cmp	r2, r3
   1fcf8:	bne	1fd0c <__assert_fail@plt+0xdf44>
   1fcfc:	add	sp, sp, #8
   1fd00:	pop	{r4, lr}
   1fd04:	add	sp, sp, #16
   1fd08:	bx	lr
   1fd0c:	bl	119d8 <__stack_chk_fail@plt>
   1fd10:	push	{r0, r1, r2, r3}
   1fd14:	mov	r0, #0
   1fd18:	push	{r4, lr}
   1fd1c:	movw	r4, #44624	; 0xae50
   1fd20:	movt	r4, #3
   1fd24:	sub	sp, sp, #8
   1fd28:	add	r3, sp, #20
   1fd2c:	ldr	ip, [r4]
   1fd30:	mov	r2, r3
   1fd34:	ldr	r1, [sp, #16]
   1fd38:	str	r3, [sp]
   1fd3c:	str	ip, [sp, #4]
   1fd40:	bl	1f478 <__assert_fail@plt+0xd6b0>
   1fd44:	ldr	r2, [sp, #4]
   1fd48:	ldr	r3, [r4]
   1fd4c:	cmp	r2, r3
   1fd50:	bne	1fd64 <__assert_fail@plt+0xdf9c>
   1fd54:	add	sp, sp, #8
   1fd58:	pop	{r4, lr}
   1fd5c:	add	sp, sp, #16
   1fd60:	bx	lr
   1fd64:	bl	119d8 <__stack_chk_fail@plt>
   1fd68:	b	118dc <strcmp@plt>
   1fd6c:	ldrb	r3, [r0]
   1fd70:	sub	r2, r3, #48	; 0x30
   1fd74:	uxtb	r1, r2
   1fd78:	cmp	r1, #9
   1fd7c:	lslls	r3, r2, #4
   1fd80:	bls	1fdac <__assert_fail@plt+0xdfe4>
   1fd84:	sub	r2, r3, #65	; 0x41
   1fd88:	cmp	r2, #5
   1fd8c:	subls	r3, r3, #55	; 0x37
   1fd90:	lslls	r3, r3, #4
   1fd94:	bls	1fdac <__assert_fail@plt+0xdfe4>
   1fd98:	sub	r2, r3, #97	; 0x61
   1fd9c:	cmp	r2, #5
   1fda0:	bhi	1fdf8 <__assert_fail@plt+0xe030>
   1fda4:	sub	r3, r3, #87	; 0x57
   1fda8:	lsl	r3, r3, #4
   1fdac:	ldrb	r2, [r0, #1]
   1fdb0:	sub	r1, r2, #48	; 0x30
   1fdb4:	uxtb	ip, r1
   1fdb8:	cmp	ip, #9
   1fdbc:	bls	1fdd8 <__assert_fail@plt+0xe010>
   1fdc0:	sub	r1, r2, #65	; 0x41
   1fdc4:	cmp	r1, #5
   1fdc8:	bhi	1fde0 <__assert_fail@plt+0xe018>
   1fdcc:	sub	r2, r2, #55	; 0x37
   1fdd0:	add	r0, r2, r3
   1fdd4:	bx	lr
   1fdd8:	add	r0, r1, r3
   1fddc:	bx	lr
   1fde0:	sub	r1, r2, #97	; 0x61
   1fde4:	cmp	r1, #5
   1fde8:	bhi	1fdf8 <__assert_fail@plt+0xe030>
   1fdec:	sub	r2, r2, #87	; 0x57
   1fdf0:	add	r0, r2, r3
   1fdf4:	bx	lr
   1fdf8:	mvn	r0, #0
   1fdfc:	bx	lr
   1fe00:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1fe04:	subs	r4, r2, #0
   1fe08:	mov	r7, r0
   1fe0c:	mov	r8, r3
   1fe10:	ldr	r9, [sp, #32]
   1fe14:	beq	1ff50 <__assert_fail@plt+0xe188>
   1fe18:	mov	r5, r1
   1fe1c:	mov	r6, #0
   1fe20:	b	1fe5c <__assert_fail@plt+0xe094>
   1fe24:	cmp	r0, r8
   1fe28:	beq	1fe6c <__assert_fail@plt+0xe0a4>
   1fe2c:	cmp	r0, r9
   1fe30:	beq	1fe6c <__assert_fail@plt+0xe0a4>
   1fe34:	orrs	r3, r8, r9
   1fe38:	beq	1fe44 <__assert_fail@plt+0xe07c>
   1fe3c:	cmp	r0, #92	; 0x5c
   1fe40:	beq	1fe6c <__assert_fail@plt+0xe0a4>
   1fe44:	mov	r1, r7
   1fe48:	add	r6, r6, #1
   1fe4c:	bl	11a74 <_IO_putc@plt>
   1fe50:	subs	r4, r4, #1
   1fe54:	add	r6, r6, #1
   1fe58:	beq	1fec8 <__assert_fail@plt+0xe100>
   1fe5c:	ldrb	r0, [r5], #1
   1fe60:	cmp	r0, #127	; 0x7f
   1fe64:	cmpne	r0, #31
   1fe68:	bhi	1fe24 <__assert_fail@plt+0xe05c>
   1fe6c:	mov	r0, #92	; 0x5c
   1fe70:	mov	r1, r7
   1fe74:	bl	11a74 <_IO_putc@plt>
   1fe78:	ldrb	r3, [r5, #-1]
   1fe7c:	cmp	r3, #10
   1fe80:	beq	1feec <__assert_fail@plt+0xe124>
   1fe84:	cmp	r3, #13
   1fe88:	beq	1ff00 <__assert_fail@plt+0xe138>
   1fe8c:	cmp	r3, #12
   1fe90:	beq	1ff14 <__assert_fail@plt+0xe14c>
   1fe94:	cmp	r3, #11
   1fe98:	beq	1ff28 <__assert_fail@plt+0xe160>
   1fe9c:	cmp	r3, #8
   1fea0:	beq	1ff3c <__assert_fail@plt+0xe174>
   1fea4:	cmp	r3, #0
   1fea8:	bne	1fed0 <__assert_fail@plt+0xe108>
   1feac:	mov	r0, #48	; 0x30
   1feb0:	mov	r1, r7
   1feb4:	bl	11a74 <_IO_putc@plt>
   1feb8:	subs	r4, r4, #1
   1febc:	add	r6, r6, #2
   1fec0:	add	r6, r6, #1
   1fec4:	bne	1fe5c <__assert_fail@plt+0xe094>
   1fec8:	mov	r0, r6
   1fecc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1fed0:	movw	r2, #30852	; 0x7884
   1fed4:	mov	r0, r7
   1fed8:	movt	r2, #2
   1fedc:	mov	r1, #1
   1fee0:	bl	11c9c <__fprintf_chk@plt>
   1fee4:	add	r6, r6, #4
   1fee8:	b	1fe50 <__assert_fail@plt+0xe088>
   1feec:	mov	r0, #110	; 0x6e
   1fef0:	mov	r1, r7
   1fef4:	bl	11a74 <_IO_putc@plt>
   1fef8:	add	r6, r6, #2
   1fefc:	b	1fe50 <__assert_fail@plt+0xe088>
   1ff00:	mov	r0, #114	; 0x72
   1ff04:	mov	r1, r7
   1ff08:	bl	11a74 <_IO_putc@plt>
   1ff0c:	add	r6, r6, #2
   1ff10:	b	1fe50 <__assert_fail@plt+0xe088>
   1ff14:	mov	r0, #102	; 0x66
   1ff18:	mov	r1, r7
   1ff1c:	bl	11a74 <_IO_putc@plt>
   1ff20:	add	r6, r6, #2
   1ff24:	b	1fe50 <__assert_fail@plt+0xe088>
   1ff28:	mov	r0, #118	; 0x76
   1ff2c:	mov	r1, r7
   1ff30:	bl	11a74 <_IO_putc@plt>
   1ff34:	add	r6, r6, #2
   1ff38:	b	1fe50 <__assert_fail@plt+0xe088>
   1ff3c:	mov	r0, #98	; 0x62
   1ff40:	mov	r1, r7
   1ff44:	bl	11a74 <_IO_putc@plt>
   1ff48:	add	r6, r6, #2
   1ff4c:	b	1fe50 <__assert_fail@plt+0xe088>
   1ff50:	mov	r6, r4
   1ff54:	b	1fec8 <__assert_fail@plt+0xe100>
   1ff58:	push	{lr}		; (str lr, [sp, #-4]!)
   1ff5c:	sub	sp, sp, #12
   1ff60:	mov	ip, #0
   1ff64:	str	ip, [sp]
   1ff68:	bl	1fe00 <__assert_fail@plt+0xe038>
   1ff6c:	add	sp, sp, #12
   1ff70:	pop	{pc}		; (ldr pc, [sp], #4)
   1ff74:	cmp	r2, #0
   1ff78:	push	{r4, r5, r6, lr}
   1ff7c:	mov	r5, r0
   1ff80:	sub	sp, sp, #8
   1ff84:	beq	1ffb8 <__assert_fail@plt+0xe1f0>
   1ff88:	ldrsb	r0, [r1]
   1ff8c:	cmp	r0, #0
   1ff90:	blt	1ffd0 <__assert_fail@plt+0xe208>
   1ff94:	sub	r4, r2, #1
   1ff98:	mov	ip, r1
   1ff9c:	add	r4, r1, r4
   1ffa0:	b	1ffb0 <__assert_fail@plt+0xe1e8>
   1ffa4:	ldrsb	lr, [ip, #1]!
   1ffa8:	cmp	lr, #0
   1ffac:	blt	1ffd0 <__assert_fail@plt+0xe208>
   1ffb0:	cmp	ip, r4
   1ffb4:	bne	1ffa4 <__assert_fail@plt+0xe1dc>
   1ffb8:	mov	ip, #0
   1ffbc:	mov	r0, r5
   1ffc0:	str	ip, [sp]
   1ffc4:	bl	1fe00 <__assert_fail@plt+0xe038>
   1ffc8:	add	sp, sp, #8
   1ffcc:	pop	{r4, r5, r6, pc}
   1ffd0:	mov	r0, r1
   1ffd4:	mov	r1, r2
   1ffd8:	mov	r2, r3
   1ffdc:	bl	21454 <__assert_fail@plt+0xf68c>
   1ffe0:	mov	r4, r0
   1ffe4:	bl	11bac <strlen@plt>
   1ffe8:	mov	r1, r5
   1ffec:	mov	r6, r0
   1fff0:	mov	r0, r4
   1fff4:	bl	11d74 <fputs@plt>
   1fff8:	mov	r0, r4
   1fffc:	bl	1716c <__assert_fail@plt+0x53a4>
   20000:	mov	r0, r6
   20004:	add	sp, sp, #8
   20008:	pop	{r4, r5, r6, pc}
   2000c:	push	{r4, r5, r6, r7, lr}
   20010:	subs	r4, r1, #0
   20014:	mov	r6, r0
   20018:	sub	sp, sp, #12
   2001c:	mov	r5, r2
   20020:	mov	r7, r3
   20024:	mov	r0, r4
   20028:	beq	20048 <__assert_fail@plt+0xe280>
   2002c:	bl	11bac <strlen@plt>
   20030:	str	r7, [sp]
   20034:	mov	r1, r4
   20038:	mov	r3, r5
   2003c:	mov	r2, r0
   20040:	mov	r0, r6
   20044:	bl	1fe00 <__assert_fail@plt+0xe038>
   20048:	add	sp, sp, #12
   2004c:	pop	{r4, r5, r6, r7, pc}
   20050:	push	{r4, r5, r6, lr}
   20054:	subs	r4, r1, #0
   20058:	mov	r6, r0
   2005c:	sub	sp, sp, #8
   20060:	mov	r5, r2
   20064:	mov	r0, r4
   20068:	beq	2008c <__assert_fail@plt+0xe2c4>
   2006c:	bl	11bac <strlen@plt>
   20070:	mov	ip, #0
   20074:	mov	r1, r4
   20078:	mov	r3, r5
   2007c:	str	ip, [sp]
   20080:	mov	r2, r0
   20084:	mov	r0, r6
   20088:	bl	1fe00 <__assert_fail@plt+0xe038>
   2008c:	add	sp, sp, #8
   20090:	pop	{r4, r5, r6, pc}
   20094:	push	{r4, r5, r6, lr}
   20098:	subs	r4, r1, #0
   2009c:	mov	r6, r0
   200a0:	mov	r5, r2
   200a4:	mov	r0, r4
   200a8:	beq	200c8 <__assert_fail@plt+0xe300>
   200ac:	bl	11bac <strlen@plt>
   200b0:	mov	r1, r4
   200b4:	mov	r3, r5
   200b8:	mov	r2, r0
   200bc:	mov	r0, r6
   200c0:	pop	{r4, r5, r6, lr}
   200c4:	b	1ff74 <__assert_fail@plt+0xe1ac>
   200c8:	pop	{r4, r5, r6, pc}
   200cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   200d0:	subs	r5, r1, #0
   200d4:	sub	sp, sp, #12
   200d8:	mov	r6, r0
   200dc:	mov	r7, r2
   200e0:	beq	2025c <__assert_fail@plt+0xe494>
   200e4:	add	lr, r0, r5
   200e8:	mov	r1, r0
   200ec:	mov	r0, #1
   200f0:	b	20118 <__assert_fail@plt+0xe350>
   200f4:	cmp	r3, r7
   200f8:	beq	20128 <__assert_fail@plt+0xe360>
   200fc:	cmp	r7, #0
   20100:	beq	2010c <__assert_fail@plt+0xe344>
   20104:	cmp	r3, #92	; 0x5c
   20108:	beq	2013c <__assert_fail@plt+0xe374>
   2010c:	add	r0, r0, #1
   20110:	cmp	r1, lr
   20114:	beq	20148 <__assert_fail@plt+0xe380>
   20118:	ldrb	r3, [r1], #1
   2011c:	cmp	r3, #127	; 0x7f
   20120:	cmpne	r3, #31
   20124:	bhi	200f4 <__assert_fail@plt+0xe32c>
   20128:	sub	ip, r3, #10
   2012c:	cmp	ip, #3
   20130:	bls	20230 <__assert_fail@plt+0xe468>
   20134:	tst	r3, #247	; 0xf7
   20138:	beq	20230 <__assert_fail@plt+0xe468>
   2013c:	cmp	r1, lr
   20140:	add	r0, r0, #5
   20144:	bne	20118 <__assert_fail@plt+0xe350>
   20148:	bl	170bc <__assert_fail@plt+0x52f4>
   2014c:	mov	r8, #92	; 0x5c
   20150:	mov	sl, #48	; 0x30
   20154:	mov	fp, #98	; 0x62
   20158:	mov	r9, r0
   2015c:	mov	r4, r0
   20160:	b	2018c <__assert_fail@plt+0xe3c4>
   20164:	cmp	r3, r7
   20168:	beq	2019c <__assert_fail@plt+0xe3d4>
   2016c:	cmp	r7, #0
   20170:	beq	2017c <__assert_fail@plt+0xe3b4>
   20174:	cmp	r3, #92	; 0x5c
   20178:	beq	2019c <__assert_fail@plt+0xe3d4>
   2017c:	strb	r3, [r4]
   20180:	add	r4, r4, #1
   20184:	subs	r5, r5, #1
   20188:	beq	2021c <__assert_fail@plt+0xe454>
   2018c:	ldrb	r3, [r6], #1
   20190:	cmp	r3, #127	; 0x7f
   20194:	cmpne	r3, #31
   20198:	bhi	20164 <__assert_fail@plt+0xe39c>
   2019c:	strb	r8, [r4]
   201a0:	ldrb	r3, [r6, #-1]
   201a4:	cmp	r3, #10
   201a8:	moveq	r3, #110	; 0x6e
   201ac:	strbeq	r3, [r4, #1]
   201b0:	addeq	r4, r4, #2
   201b4:	beq	20184 <__assert_fail@plt+0xe3bc>
   201b8:	cmp	r3, #13
   201bc:	moveq	r3, #114	; 0x72
   201c0:	strbeq	r3, [r4, #1]
   201c4:	addeq	r4, r4, #2
   201c8:	beq	20184 <__assert_fail@plt+0xe3bc>
   201cc:	cmp	r3, #12
   201d0:	moveq	r3, #102	; 0x66
   201d4:	strbeq	r3, [r4, #1]
   201d8:	addeq	r4, r4, #2
   201dc:	beq	20184 <__assert_fail@plt+0xe3bc>
   201e0:	cmp	r3, #11
   201e4:	moveq	r3, #118	; 0x76
   201e8:	strbeq	r3, [r4, #1]
   201ec:	addeq	r4, r4, #2
   201f0:	beq	20184 <__assert_fail@plt+0xe3bc>
   201f4:	cmp	r3, #8
   201f8:	strbeq	fp, [r4, #1]
   201fc:	addeq	r4, r4, #2
   20200:	beq	20184 <__assert_fail@plt+0xe3bc>
   20204:	cmp	r3, #0
   20208:	bne	20238 <__assert_fail@plt+0xe470>
   2020c:	subs	r5, r5, #1
   20210:	strb	sl, [r4, #1]
   20214:	add	r4, r4, #2
   20218:	bne	2018c <__assert_fail@plt+0xe3c4>
   2021c:	mov	r3, #0
   20220:	mov	r0, r9
   20224:	strb	r3, [r4]
   20228:	add	sp, sp, #12
   2022c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20230:	add	r0, r0, #2
   20234:	b	20110 <__assert_fail@plt+0xe348>
   20238:	str	r3, [sp]
   2023c:	add	r0, r4, #1
   20240:	movw	r3, #30852	; 0x7884
   20244:	mov	r1, #1
   20248:	movt	r3, #2
   2024c:	mvn	r2, #0
   20250:	add	r4, r4, #4
   20254:	bl	11c0c <__sprintf_chk@plt>
   20258:	b	20184 <__assert_fail@plt+0xe3bc>
   2025c:	mov	r0, #1
   20260:	bl	170bc <__assert_fail@plt+0x52f4>
   20264:	mov	r9, r0
   20268:	mov	r4, r0
   2026c:	b	2021c <__assert_fail@plt+0xe454>
   20270:	ldrb	r3, [r0]
   20274:	cmp	r3, #0
   20278:	beq	202a0 <__assert_fail@plt+0xe4d8>
   2027c:	mov	r2, r0
   20280:	mov	r0, #0
   20284:	and	r3, r3, #192	; 0xc0
   20288:	cmp	r3, #128	; 0x80
   2028c:	ldrb	r3, [r2, #1]!
   20290:	addne	r0, r0, #1
   20294:	cmp	r3, #0
   20298:	bne	20284 <__assert_fail@plt+0xe4bc>
   2029c:	bx	lr
   202a0:	mov	r0, r3
   202a4:	bx	lr
   202a8:	sub	r0, r0, #65	; 0x41
   202ac:	cmp	r0, #25
   202b0:	movhi	r0, #0
   202b4:	movls	r0, #1
   202b8:	bx	lr
   202bc:	sub	r0, r0, #97	; 0x61
   202c0:	cmp	r0, #25
   202c4:	movhi	r0, #0
   202c8:	movls	r0, #1
   202cc:	bx	lr
   202d0:	sub	r3, r0, #97	; 0x61
   202d4:	cmp	r3, #25
   202d8:	bicls	r0, r0, #32
   202dc:	bx	lr
   202e0:	sub	r3, r0, #65	; 0x41
   202e4:	cmp	r3, #25
   202e8:	orrls	r0, r0, #32
   202ec:	bx	lr
   202f0:	cmp	r0, r1
   202f4:	push	{r4, r5, r6}
   202f8:	beq	203a0 <__assert_fail@plt+0xe5d8>
   202fc:	ldrb	r3, [r0]
   20300:	cmp	r3, #0
   20304:	beq	20370 <__assert_fail@plt+0xe5a8>
   20308:	ldrb	r2, [r1]
   2030c:	cmp	r2, #0
   20310:	beq	203ac <__assert_fail@plt+0xe5e4>
   20314:	mov	ip, r1
   20318:	b	2032c <__assert_fail@plt+0xe564>
   2031c:	ldrb	r2, [ip, #1]
   20320:	mov	ip, r4
   20324:	cmp	r2, #0
   20328:	beq	203ac <__assert_fail@plt+0xe5e4>
   2032c:	cmp	r3, r2
   20330:	mov	r1, r2
   20334:	sub	r5, r2, #97	; 0x61
   20338:	sub	r6, r3, #97	; 0x61
   2033c:	add	r4, ip, #1
   20340:	mov	r2, r3
   20344:	beq	20360 <__assert_fail@plt+0xe598>
   20348:	cmp	r6, #25
   2034c:	bicls	r2, r3, #32
   20350:	cmp	r5, #25
   20354:	bicls	r1, r1, #32
   20358:	cmp	r2, r1
   2035c:	bne	203b4 <__assert_fail@plt+0xe5ec>
   20360:	ldrb	r3, [r0, #1]!
   20364:	mov	r1, r4
   20368:	cmp	r3, #0
   2036c:	bne	2031c <__assert_fail@plt+0xe554>
   20370:	ldrb	r0, [r1]
   20374:	cmp	r3, r0
   20378:	beq	203a0 <__assert_fail@plt+0xe5d8>
   2037c:	sub	r2, r3, #97	; 0x61
   20380:	cmp	r2, #25
   20384:	sub	r2, r0, #97	; 0x61
   20388:	bicls	r3, r3, #32
   2038c:	cmp	r2, #25
   20390:	bicls	r0, r0, #32
   20394:	rsb	r0, r0, r3
   20398:	pop	{r4, r5, r6}
   2039c:	bx	lr
   203a0:	mov	r0, #0
   203a4:	pop	{r4, r5, r6}
   203a8:	bx	lr
   203ac:	mov	r0, #0
   203b0:	b	2037c <__assert_fail@plt+0xe5b4>
   203b4:	mov	r1, ip
   203b8:	ldrb	r0, [r1]
   203bc:	cmp	r3, r0
   203c0:	bne	2037c <__assert_fail@plt+0xe5b4>
   203c4:	b	203a0 <__assert_fail@plt+0xe5d8>
   203c8:	cmp	r2, #0
   203cc:	cmpne	r0, r1
   203d0:	push	{r4, r5, r6}
   203d4:	moveq	r0, #0
   203d8:	beq	2043c <__assert_fail@plt+0xe674>
   203dc:	add	r2, r1, r2
   203e0:	sub	r5, r0, #1
   203e4:	add	r1, r1, #1
   203e8:	b	203fc <__assert_fail@plt+0xe634>
   203ec:	cmp	ip, #0
   203f0:	beq	20438 <__assert_fail@plt+0xe670>
   203f4:	cmp	ip, r3
   203f8:	bne	20438 <__assert_fail@plt+0xe670>
   203fc:	ldrb	r3, [r5, #1]!
   20400:	sub	r0, r3, #65	; 0x41
   20404:	orr	r4, r3, #32
   20408:	cmp	r0, #25
   2040c:	movhi	r4, r3
   20410:	ldrb	r3, [r1, #-1]
   20414:	uxtb	ip, r4
   20418:	sub	r6, r3, #65	; 0x41
   2041c:	orr	r0, r3, #32
   20420:	cmp	r6, #25
   20424:	movhi	r0, r3
   20428:	cmp	r1, r2
   2042c:	uxtb	r3, r0
   20430:	add	r1, r1, #1
   20434:	bne	203ec <__assert_fail@plt+0xe624>
   20438:	rsb	r0, r0, r4
   2043c:	pop	{r4, r5, r6}
   20440:	bx	lr
   20444:	cmp	r0, r1
   20448:	push	{r4, r5, r6, r7, r8, r9}
   2044c:	beq	204d0 <__assert_fail@plt+0xe708>
   20450:	cmp	r2, #0
   20454:	beq	204a8 <__assert_fail@plt+0xe6e0>
   20458:	sub	r0, r0, #1
   2045c:	sub	r1, r1, #1
   20460:	ldrb	r3, [r0, #1]!
   20464:	ldrb	ip, [r1, #1]!
   20468:	sub	r6, r3, #97	; 0x61
   2046c:	cmp	r3, ip
   20470:	mov	r8, r3
   20474:	beq	204a0 <__assert_fail@plt+0xe6d8>
   20478:	cmp	r6, #25
   2047c:	sub	r7, ip, #97	; 0x61
   20480:	bic	r5, r3, #32
   20484:	bic	r4, ip, #32
   20488:	movhi	r5, r3
   2048c:	cmp	r7, #25
   20490:	mov	r9, ip
   20494:	movhi	r4, ip
   20498:	cmp	r5, r4
   2049c:	bne	204b4 <__assert_fail@plt+0xe6ec>
   204a0:	subs	r2, r2, #1
   204a4:	bne	20460 <__assert_fail@plt+0xe698>
   204a8:	mov	r0, r2
   204ac:	pop	{r4, r5, r6, r7, r8, r9}
   204b0:	bx	lr
   204b4:	cmp	r6, #25
   204b8:	bicls	r8, r3, #32
   204bc:	cmp	r7, #25
   204c0:	bicls	r9, ip, #32
   204c4:	rsb	r0, r9, r8
   204c8:	pop	{r4, r5, r6, r7, r8, r9}
   204cc:	bx	lr
   204d0:	mov	r0, #0
   204d4:	pop	{r4, r5, r6, r7, r8, r9}
   204d8:	bx	lr
   204dc:	cmp	r0, r1
   204e0:	push	{r4}		; (str r4, [sp, #-4]!)
   204e4:	beq	20560 <__assert_fail@plt+0xe798>
   204e8:	ldrb	r3, [r0]
   204ec:	cmp	r3, #0
   204f0:	beq	2053c <__assert_fail@plt+0xe774>
   204f4:	ldrb	r2, [r1]
   204f8:	cmp	r2, #0
   204fc:	beq	2054c <__assert_fail@plt+0xe784>
   20500:	cmp	r3, r2
   20504:	bne	2054c <__assert_fail@plt+0xe784>
   20508:	add	r3, r0, #1
   2050c:	add	r2, r1, #1
   20510:	b	20528 <__assert_fail@plt+0xe760>
   20514:	ldrb	r4, [r2], #1
   20518:	cmp	r4, #0
   2051c:	beq	2054c <__assert_fail@plt+0xe784>
   20520:	cmp	ip, r4
   20524:	bne	2054c <__assert_fail@plt+0xe784>
   20528:	mov	r0, r3
   2052c:	ldrb	ip, [r3], #1
   20530:	mov	r1, r2
   20534:	cmp	ip, #0
   20538:	bne	20514 <__assert_fail@plt+0xe74c>
   2053c:	ldrb	r3, [r1]
   20540:	cmp	r3, #0
   20544:	moveq	r0, r3
   20548:	beq	20558 <__assert_fail@plt+0xe790>
   2054c:	ldrsb	r0, [r0]
   20550:	ldrsb	r3, [r1]
   20554:	rsb	r0, r3, r0
   20558:	pop	{r4}		; (ldr r4, [sp], #4)
   2055c:	bx	lr
   20560:	mov	r0, #0
   20564:	pop	{r4}		; (ldr r4, [sp], #4)
   20568:	bx	lr
   2056c:	push	{r3, r4, r5, r6, r7, lr}
   20570:	subs	r5, r3, #0
   20574:	mov	r4, r0
   20578:	mov	r6, r2
   2057c:	beq	205bc <__assert_fail@plt+0xe7f4>
   20580:	cmp	r5, r1
   20584:	bhi	205c4 <__assert_fail@plt+0xe7fc>
   20588:	rsb	r7, r5, r1
   2058c:	adds	r7, r0, r7
   20590:	bcc	205a4 <__assert_fail@plt+0xe7dc>
   20594:	b	205c4 <__assert_fail@plt+0xe7fc>
   20598:	add	r4, r4, #1
   2059c:	cmp	r7, r4
   205a0:	bcc	205c4 <__assert_fail@plt+0xe7fc>
   205a4:	mov	r0, r4
   205a8:	mov	r1, r6
   205ac:	mov	r2, r5
   205b0:	bl	20444 <__assert_fail@plt+0xe67c>
   205b4:	cmp	r0, #0
   205b8:	bne	20598 <__assert_fail@plt+0xe7d0>
   205bc:	mov	r0, r4
   205c0:	pop	{r3, r4, r5, r6, r7, pc}
   205c4:	mov	r0, #0
   205c8:	pop	{r3, r4, r5, r6, r7, pc}
   205cc:	push	{r3, r4, r5, lr}
   205d0:	mov	r5, r0
   205d4:	ldrb	r4, [r0]
   205d8:	cmp	r4, #0
   205dc:	beq	20600 <__assert_fail@plt+0xe838>
   205e0:	bl	11b40 <__ctype_tolower_loc@plt>
   205e4:	sub	r3, r5, #1
   205e8:	ldr	r2, [r0]
   205ec:	ldr	r2, [r2, r4, lsl #2]
   205f0:	strb	r2, [r3, #1]!
   205f4:	ldrb	r4, [r3, #1]
   205f8:	cmp	r4, #0
   205fc:	bne	205e8 <__assert_fail@plt+0xe820>
   20600:	mov	r0, r5
   20604:	pop	{r3, r4, r5, pc}
   20608:	push	{r4, r5, r6, r7, r8, lr}
   2060c:	subs	r4, r2, #0
   20610:	beq	2064c <__assert_fail@plt+0xe884>
   20614:	sub	r8, r0, #1
   20618:	sub	r7, r1, #1
   2061c:	ldrb	r6, [r8, #1]!
   20620:	ldrb	r5, [r7, #1]!
   20624:	cmp	r6, r5
   20628:	beq	20644 <__assert_fail@plt+0xe87c>
   2062c:	bl	11b4c <__ctype_toupper_loc@plt>
   20630:	ldr	r3, [r0]
   20634:	ldr	r2, [r3, r6, lsl #2]
   20638:	ldr	r3, [r3, r5, lsl #2]
   2063c:	cmp	r2, r3
   20640:	bne	20654 <__assert_fail@plt+0xe88c>
   20644:	subs	r4, r4, #1
   20648:	bne	2061c <__assert_fail@plt+0xe854>
   2064c:	mov	r0, r4
   20650:	pop	{r4, r5, r6, r7, r8, pc}
   20654:	rsb	r0, r5, r6
   20658:	pop	{r4, r5, r6, r7, r8, pc}
   2065c:	mov	r2, #1
   20660:	b	1f278 <__assert_fail@plt+0xd4b0>
   20664:	mov	r2, #0
   20668:	b	1f278 <__assert_fail@plt+0xd4b0>
   2066c:	push	{r0, r1, r2, r3}
   20670:	push	{r4, lr}
   20674:	sub	sp, sp, #8
   20678:	movw	r4, #44624	; 0xae50
   2067c:	movt	r4, #3
   20680:	ldr	r0, [sp, #16]
   20684:	ldr	r3, [r4]
   20688:	cmp	r0, #0
   2068c:	str	r3, [sp, #4]
   20690:	beq	206c0 <__assert_fail@plt+0xe8f8>
   20694:	add	r1, sp, #20
   20698:	str	r1, [sp]
   2069c:	bl	1f704 <__assert_fail@plt+0xd93c>
   206a0:	ldr	r2, [sp, #4]
   206a4:	ldr	r3, [r4]
   206a8:	cmp	r2, r3
   206ac:	bne	206d0 <__assert_fail@plt+0xe908>
   206b0:	add	sp, sp, #8
   206b4:	pop	{r4, lr}
   206b8:	add	sp, sp, #16
   206bc:	bx	lr
   206c0:	movw	r0, #23988	; 0x5db4
   206c4:	movt	r0, #2
   206c8:	bl	170d0 <__assert_fail@plt+0x5308>
   206cc:	b	206a0 <__assert_fail@plt+0xe8d8>
   206d0:	bl	119d8 <__stack_chk_fail@plt>
   206d4:	push	{r0, r1, r2, r3}
   206d8:	push	{r4, lr}
   206dc:	sub	sp, sp, #8
   206e0:	movw	r4, #44624	; 0xae50
   206e4:	movt	r4, #3
   206e8:	ldr	r0, [sp, #16]
   206ec:	ldr	r3, [r4]
   206f0:	cmp	r0, #0
   206f4:	str	r3, [sp, #4]
   206f8:	beq	20730 <__assert_fail@plt+0xe968>
   206fc:	add	r1, sp, #20
   20700:	str	r1, [sp]
   20704:	bl	1f704 <__assert_fail@plt+0xd93c>
   20708:	cmp	r0, #0
   2070c:	beq	20744 <__assert_fail@plt+0xe97c>
   20710:	ldr	r2, [sp, #4]
   20714:	ldr	r3, [r4]
   20718:	cmp	r2, r3
   2071c:	bne	20740 <__assert_fail@plt+0xe978>
   20720:	add	sp, sp, #8
   20724:	pop	{r4, lr}
   20728:	add	sp, sp, #16
   2072c:	bx	lr
   20730:	movw	r0, #23988	; 0x5db4
   20734:	movt	r0, #2
   20738:	bl	17134 <__assert_fail@plt+0x536c>
   2073c:	b	20708 <__assert_fail@plt+0xe940>
   20740:	bl	119d8 <__stack_chk_fail@plt>
   20744:	bl	11bf4 <__errno_location@plt>
   20748:	ldr	r3, [r0]
   2074c:	cmp	r3, #22
   20750:	movw	r3, #44632	; 0xae58
   20754:	movt	r3, #3
   20758:	movweq	r0, #31220	; 0x79f4
   2075c:	movwne	r0, #31260	; 0x7a1c
   20760:	moveq	r1, #1
   20764:	ldreq	r3, [r3]
   20768:	movteq	r0, #2
   2076c:	moveq	r2, #37	; 0x25
   20770:	movne	r1, #1
   20774:	ldrne	r3, [r3]
   20778:	movtne	r0, #2
   2077c:	movne	r2, #22
   20780:	bl	11a80 <fwrite@plt>
   20784:	mov	r0, #2
   20788:	bl	11b94 <exit@plt>
   2078c:	push	{r4, r5, r6, r7, r8, lr}
   20790:	mov	r7, r0
   20794:	mov	r8, r1
   20798:	mov	r6, r2
   2079c:	bl	11bf4 <__errno_location@plt>
   207a0:	movw	r4, #44952	; 0xaf98
   207a4:	movt	r4, #3
   207a8:	ldr	r3, [r0]
   207ac:	mov	r5, r0
   207b0:	cmp	r3, #22
   207b4:	beq	207f8 <__assert_fail@plt+0xea30>
   207b8:	ldr	r0, [r4, #8]
   207bc:	cmp	r0, #0
   207c0:	beq	2084c <__assert_fail@plt+0xea84>
   207c4:	mov	r3, #1
   207c8:	str	r3, [r4, #8]
   207cc:	cmp	r6, #0
   207d0:	popeq	{r4, r5, r6, r7, r8, pc}
   207d4:	movw	r3, #44616	; 0xae48
   207d8:	movt	r3, #3
   207dc:	mov	r1, #0
   207e0:	movw	r2, #31372	; 0x7a8c
   207e4:	str	r1, [r4, #12]
   207e8:	movt	r2, #2
   207ec:	str	r1, [r4, #16]
   207f0:	str	r2, [r3]
   207f4:	pop	{r4, r5, r6, r7, r8, pc}
   207f8:	cmp	r7, #0
   207fc:	beq	20818 <__assert_fail@plt+0xea50>
   20800:	movw	r1, #21584	; 0x5450
   20804:	mov	r0, r7
   20808:	movt	r1, #2
   2080c:	bl	118dc <strcmp@plt>
   20810:	cmp	r0, #0
   20814:	beq	20878 <__assert_fail@plt+0xeab0>
   20818:	mov	r3, #1
   2081c:	ldr	r0, [r4, #4]
   20820:	str	r3, [r4, #4]
   20824:	cmp	r0, #0
   20828:	bne	207cc <__assert_fail@plt+0xea04>
   2082c:	mov	r2, #5
   20830:	movw	r1, #31304	; 0x7a48
   20834:	movt	r1, #2
   20838:	bl	119cc <dcgettext@plt>
   2083c:	mov	r1, r8
   20840:	mov	r2, r7
   20844:	bl	23b40 <__assert_fail@plt+0x11d78>
   20848:	b	207cc <__assert_fail@plt+0xea04>
   2084c:	mov	r2, #5
   20850:	movw	r1, #31348	; 0x7a74
   20854:	movt	r1, #2
   20858:	bl	119cc <dcgettext@plt>
   2085c:	mov	r7, r0
   20860:	ldr	r0, [r5]
   20864:	bl	11b10 <strerror@plt>
   20868:	mov	r1, r0
   2086c:	mov	r0, r7
   20870:	bl	23b40 <__assert_fail@plt+0x11d78>
   20874:	b	207c4 <__assert_fail@plt+0xe9fc>
   20878:	mov	r3, #1
   2087c:	ldr	r0, [r4]
   20880:	str	r3, [r4]
   20884:	b	20824 <__assert_fail@plt+0xea5c>
   20888:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2088c:	movw	r4, #44624	; 0xae50
   20890:	sub	sp, sp, #92	; 0x5c
   20894:	movt	r4, #3
   20898:	movw	ip, #44952	; 0xaf98
   2089c:	mov	r9, #0
   208a0:	str	ip, [sp, #32]
   208a4:	ldr	ip, [r4]
   208a8:	str	r1, [sp, #28]
   208ac:	str	r4, [sp, #44]	; 0x2c
   208b0:	movw	r4, #44952	; 0xaf98
   208b4:	str	ip, [sp, #84]	; 0x54
   208b8:	movt	r4, #3
   208bc:	ldr	ip, [sp, #28]
   208c0:	str	r4, [sp, #32]
   208c4:	cmp	ip, #0
   208c8:	str	r0, [sp, #36]	; 0x24
   208cc:	str	r2, [sp, #16]
   208d0:	str	r3, [sp, #40]	; 0x28
   208d4:	str	r9, [sp, #12]
   208d8:	str	r9, [sp, #24]
   208dc:	beq	209e8 <__assert_fail@plt+0xec20>
   208e0:	ldr	ip, [sp, #36]	; 0x24
   208e4:	mov	r6, #0
   208e8:	mov	r7, r6
   208ec:	mov	sl, r6
   208f0:	add	r4, ip, #1
   208f4:	ldr	r5, [sp, #28]
   208f8:	ldr	fp, [sp, #24]
   208fc:	b	20958 <__assert_fail@plt+0xeb90>
   20900:	add	r2, r3, #64	; 0x40
   20904:	lsr	r1, r3, #7
   20908:	uxtb	r2, r2
   2090c:	cmp	r2, #61	; 0x3d
   20910:	movls	r2, #0
   20914:	andhi	r2, r1, #1
   20918:	cmp	r2, #0
   2091c:	beq	20964 <__assert_fail@plt+0xeb9c>
   20920:	cmp	fp, #0
   20924:	beq	20948 <__assert_fail@plt+0xeb80>
   20928:	str	r3, [sp]
   2092c:	mov	r0, fp
   20930:	movw	r3, #31384	; 0x7a98
   20934:	mov	r1, #1
   20938:	movt	r3, #2
   2093c:	mvn	r2, #0
   20940:	bl	11c0c <__sprintf_chk@plt>
   20944:	add	fp, fp, #4
   20948:	add	r6, r6, #4
   2094c:	subs	r5, r5, #1
   20950:	add	r4, r4, #1
   20954:	beq	209c4 <__assert_fail@plt+0xebfc>
   20958:	cmp	r9, #0
   2095c:	ldrb	r3, [r4, #-1]
   20960:	bne	20900 <__assert_fail@plt+0xeb38>
   20964:	cmp	sl, #0
   20968:	bne	20a30 <__assert_fail@plt+0xec68>
   2096c:	tst	r3, #128	; 0x80
   20970:	bne	20c80 <__assert_fail@plt+0xeeb8>
   20974:	ldr	ip, [sp, #16]
   20978:	cmn	ip, #1
   2097c:	beq	209a4 <__assert_fail@plt+0xebdc>
   20980:	cmp	r3, #127	; 0x7f
   20984:	cmpne	r3, #31
   20988:	bls	20b44 <__assert_fail@plt+0xed7c>
   2098c:	cmp	r3, ip
   20990:	beq	20b44 <__assert_fail@plt+0xed7c>
   20994:	cmp	ip, #0
   20998:	beq	209a4 <__assert_fail@plt+0xebdc>
   2099c:	cmp	r3, #92	; 0x5c
   209a0:	beq	20b44 <__assert_fail@plt+0xed7c>
   209a4:	cmp	fp, #0
   209a8:	add	r6, r6, #1
   209ac:	strbne	r3, [fp]
   209b0:	addne	fp, fp, #1
   209b4:	subs	r5, r5, #1
   209b8:	mov	r9, #0
   209bc:	add	r4, r4, #1
   209c0:	bne	20958 <__assert_fail@plt+0xeb90>
   209c4:	ldr	r4, [sp, #24]
   209c8:	cmp	r4, #0
   209cc:	bne	209fc <__assert_fail@plt+0xec34>
   209d0:	add	r0, r6, #1
   209d4:	bl	170bc <__assert_fail@plt+0x52f4>
   209d8:	ldr	ip, [sp, #28]
   209dc:	cmp	ip, #0
   209e0:	str	r0, [sp, #24]
   209e4:	bne	208e0 <__assert_fail@plt+0xeb18>
   209e8:	ldr	r4, [sp, #24]
   209ec:	ldr	fp, [sp, #24]
   209f0:	cmp	r4, #0
   209f4:	ldr	r6, [sp, #28]
   209f8:	beq	209d0 <__assert_fail@plt+0xec08>
   209fc:	ldr	ip, [sp, #40]	; 0x28
   20a00:	cmp	ip, #0
   20a04:	bne	20e70 <__assert_fail@plt+0xf0a8>
   20a08:	ldr	r4, [sp, #40]	; 0x28
   20a0c:	ldr	r0, [sp, #24]
   20a10:	strb	r4, [fp]
   20a14:	ldr	ip, [sp, #44]	; 0x2c
   20a18:	ldr	r2, [sp, #84]	; 0x54
   20a1c:	ldr	r3, [ip]
   20a20:	cmp	r2, r3
   20a24:	bne	20fd4 <__assert_fail@plt+0xf20c>
   20a28:	add	sp, sp, #92	; 0x5c
   20a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a30:	eor	r2, r3, #128	; 0x80
   20a34:	cmp	r2, #63	; 0x3f
   20a38:	bls	20ac4 <__assert_fail@plt+0xecfc>
   20a3c:	cmp	fp, #0
   20a40:	beq	20aac <__assert_fail@plt+0xece4>
   20a44:	cmp	r7, #0
   20a48:	beq	20a8c <__assert_fail@plt+0xecc4>
   20a4c:	add	r8, sp, #76	; 0x4c
   20a50:	mov	sl, fp
   20a54:	add	r9, r8, r7
   20a58:	ldrb	ip, [r8], #1
   20a5c:	mov	r0, sl
   20a60:	movw	r3, #31384	; 0x7a98
   20a64:	mov	r1, #1
   20a68:	movt	r3, #2
   20a6c:	mvn	r2, #0
   20a70:	str	ip, [sp]
   20a74:	add	sl, sl, #4
   20a78:	bl	11c0c <__sprintf_chk@plt>
   20a7c:	cmp	r8, r9
   20a80:	bne	20a58 <__assert_fail@plt+0xec90>
   20a84:	ldrb	r3, [r4, #-1]
   20a88:	add	fp, fp, r7, lsl #2
   20a8c:	str	r3, [sp]
   20a90:	mov	r0, fp
   20a94:	movw	r3, #31384	; 0x7a98
   20a98:	mov	r1, #1
   20a9c:	movt	r3, #2
   20aa0:	mvn	r2, #0
   20aa4:	bl	11c0c <__sprintf_chk@plt>
   20aa8:	add	fp, fp, #4
   20aac:	add	r3, r7, #1
   20ab0:	mov	r7, #0
   20ab4:	mov	sl, r7
   20ab8:	mov	r9, #1
   20abc:	add	r6, r6, r3, lsl #2
   20ac0:	b	2094c <__assert_fail@plt+0xeb84>
   20ac4:	ldr	ip, [sp, #12]
   20ac8:	add	r0, sp, #88	; 0x58
   20acc:	subs	sl, sl, #1
   20ad0:	add	r1, r0, r7
   20ad4:	add	r8, r7, #1
   20ad8:	and	r2, r3, #63	; 0x3f
   20adc:	orr	ip, r2, ip, lsl #6
   20ae0:	strb	r3, [r1, #-12]
   20ae4:	str	ip, [sp, #12]
   20ae8:	movne	r7, r8
   20aec:	movne	r9, #0
   20af0:	bne	2094c <__assert_fail@plt+0xeb84>
   20af4:	ldr	ip, [sp, #32]
   20af8:	ldr	r3, [ip, #12]
   20afc:	cmp	r3, #0
   20b00:	beq	20cf0 <__assert_fail@plt+0xef28>
   20b04:	cmp	fp, #0
   20b08:	beq	20b34 <__assert_fail@plt+0xed6c>
   20b0c:	add	r9, sp, #76	; 0x4c
   20b10:	mov	r3, sl
   20b14:	ldrb	r2, [r9, r3]
   20b18:	strb	r2, [fp, r3]
   20b1c:	add	r3, r3, #1
   20b20:	cmp	r8, r3
   20b24:	bgt	20b14 <__assert_fail@plt+0xed4c>
   20b28:	bic	r7, r7, r7, asr #31
   20b2c:	add	r7, r7, #1
   20b30:	add	fp, fp, r7
   20b34:	mov	r7, #0
   20b38:	add	r6, r6, r8
   20b3c:	mov	r9, r7
   20b40:	b	2094c <__assert_fail@plt+0xeb84>
   20b44:	cmp	fp, #0
   20b48:	movne	r3, #92	; 0x5c
   20b4c:	strbne	r3, [fp]
   20b50:	ldrbne	r3, [r4, #-1]
   20b54:	addne	fp, fp, #1
   20b58:	cmp	r3, #13
   20b5c:	ldrls	pc, [pc, r3, lsl #2]
   20b60:	b	20c50 <__assert_fail@plt+0xee88>
   20b64:	andeq	r0, r2, r0, lsr ip
   20b68:	andeq	r0, r2, r0, asr ip
   20b6c:	andeq	r0, r2, r0, asr ip
   20b70:	andeq	r0, r2, r0, asr ip
   20b74:	andeq	r0, r2, r0, asr ip
   20b78:	andeq	r0, r2, r0, asr ip
   20b7c:	andeq	r0, r2, r0, asr ip
   20b80:	andeq	r0, r2, r0, asr ip
   20b84:	andeq	r0, r2, r0, lsl ip
   20b88:	andeq	r0, r2, r0, asr ip
   20b8c:	strdeq	r0, [r2], -r8
   20b90:	ldrdeq	r0, [r2], -r8
   20b94:			; <UNDEFINED> instruction: 0x00020bbc
   20b98:	muleq	r2, ip, fp
   20b9c:	cmp	fp, #0
   20ba0:	add	r6, r6, #2
   20ba4:	beq	209b4 <__assert_fail@plt+0xebec>
   20ba8:	mov	r3, #114	; 0x72
   20bac:	add	fp, fp, #1
   20bb0:	strb	r3, [fp, #-1]
   20bb4:	mov	r9, #0
   20bb8:	b	2094c <__assert_fail@plt+0xeb84>
   20bbc:	cmp	fp, #0
   20bc0:	add	r6, r6, #2
   20bc4:	beq	20db8 <__assert_fail@plt+0xeff0>
   20bc8:	mov	r3, #102	; 0x66
   20bcc:	add	fp, fp, #1
   20bd0:	strb	r3, [fp, #-1]
   20bd4:	b	209b4 <__assert_fail@plt+0xebec>
   20bd8:	cmp	fp, #0
   20bdc:	add	r6, r6, #2
   20be0:	beq	20db8 <__assert_fail@plt+0xeff0>
   20be4:	mov	r3, #118	; 0x76
   20be8:	add	fp, fp, #1
   20bec:	strb	r3, [fp, #-1]
   20bf0:	mov	r9, #0
   20bf4:	b	2094c <__assert_fail@plt+0xeb84>
   20bf8:	cmp	fp, #0
   20bfc:	add	r6, r6, #2
   20c00:	movne	r3, #110	; 0x6e
   20c04:	addne	fp, fp, #1
   20c08:	strbne	r3, [fp, #-1]
   20c0c:	b	209b4 <__assert_fail@plt+0xebec>
   20c10:	cmp	fp, #0
   20c14:	add	r6, r6, #2
   20c18:	beq	209b4 <__assert_fail@plt+0xebec>
   20c1c:	mov	r3, #98	; 0x62
   20c20:	add	fp, fp, #1
   20c24:	strb	r3, [fp, #-1]
   20c28:	mov	r9, #0
   20c2c:	b	2094c <__assert_fail@plt+0xeb84>
   20c30:	cmp	fp, #0
   20c34:	add	r6, r6, #2
   20c38:	beq	209b4 <__assert_fail@plt+0xebec>
   20c3c:	mov	r3, #48	; 0x30
   20c40:	add	fp, fp, #1
   20c44:	strb	r3, [fp, #-1]
   20c48:	mov	r9, #0
   20c4c:	b	2094c <__assert_fail@plt+0xeb84>
   20c50:	cmp	fp, #0
   20c54:	add	r6, r6, #4
   20c58:	beq	20db8 <__assert_fail@plt+0xeff0>
   20c5c:	str	r3, [sp]
   20c60:	mov	r0, fp
   20c64:	movw	r3, #30852	; 0x7884
   20c68:	mov	r1, #1
   20c6c:	movt	r3, #2
   20c70:	mvn	r2, #0
   20c74:	add	fp, fp, #3
   20c78:	bl	11c0c <__sprintf_chk@plt>
   20c7c:	b	209b4 <__assert_fail@plt+0xebec>
   20c80:	and	r2, r3, #224	; 0xe0
   20c84:	cmp	r2, #192	; 0xc0
   20c88:	beq	20d30 <__assert_fail@plt+0xef68>
   20c8c:	and	r2, r3, #240	; 0xf0
   20c90:	cmp	r2, #224	; 0xe0
   20c94:	beq	20d7c <__assert_fail@plt+0xefb4>
   20c98:	and	r2, r3, #248	; 0xf8
   20c9c:	cmp	r2, #240	; 0xf0
   20ca0:	beq	20d98 <__assert_fail@plt+0xefd0>
   20ca4:	and	r2, r3, #252	; 0xfc
   20ca8:	cmp	r2, #248	; 0xf8
   20cac:	beq	20e38 <__assert_fail@plt+0xf070>
   20cb0:	and	r2, r3, #254	; 0xfe
   20cb4:	cmp	r2, #252	; 0xfc
   20cb8:	beq	20e54 <__assert_fail@plt+0xf08c>
   20cbc:	cmp	fp, #0
   20cc0:	beq	20ce4 <__assert_fail@plt+0xef1c>
   20cc4:	str	r3, [sp]
   20cc8:	mov	r0, fp
   20ccc:	movw	r3, #31384	; 0x7a98
   20cd0:	mov	r1, #1
   20cd4:	movt	r3, #2
   20cd8:	mvn	r2, #0
   20cdc:	bl	11c0c <__sprintf_chk@plt>
   20ce0:	add	fp, fp, #4
   20ce4:	add	r6, r6, #4
   20ce8:	mov	r9, #1
   20cec:	b	2094c <__assert_fail@plt+0xeb84>
   20cf0:	ldr	ip, [sp, #40]	; 0x28
   20cf4:	cmp	ip, #0
   20cf8:	beq	20d4c <__assert_fail@plt+0xef84>
   20cfc:	cmp	fp, #0
   20d00:	beq	20b34 <__assert_fail@plt+0xed6c>
   20d04:	add	r9, sp, #76	; 0x4c
   20d08:	mov	r3, sl
   20d0c:	ldrb	r2, [r9, r3]
   20d10:	strb	r2, [fp, r3]
   20d14:	add	r3, r3, #1
   20d18:	cmp	r8, r3
   20d1c:	bgt	20d0c <__assert_fail@plt+0xef44>
   20d20:	bic	r3, r7, r7, asr #31
   20d24:	add	r3, r3, #1
   20d28:	add	fp, fp, r3
   20d2c:	b	20b34 <__assert_fail@plt+0xed6c>
   20d30:	mov	r7, #1
   20d34:	mov	r9, sl
   20d38:	strb	r3, [sp, #76]	; 0x4c
   20d3c:	mov	sl, r7
   20d40:	and	r3, r3, #31
   20d44:	str	r3, [sp, #12]
   20d48:	b	2094c <__assert_fail@plt+0xeb84>
   20d4c:	ldr	ip, [sp, #12]
   20d50:	sub	r3, ip, #128	; 0x80
   20d54:	cmp	r3, #127	; 0x7f
   20d58:	bhi	20dc0 <__assert_fail@plt+0xeff8>
   20d5c:	cmp	fp, #0
   20d60:	add	r6, r6, #1
   20d64:	beq	20db4 <__assert_fail@plt+0xefec>
   20d68:	strb	ip, [fp]
   20d6c:	mov	r7, r8
   20d70:	add	fp, fp, #1
   20d74:	ldr	r9, [sp, #40]	; 0x28
   20d78:	b	2094c <__assert_fail@plt+0xeb84>
   20d7c:	mov	r9, sl
   20d80:	strb	r3, [sp, #76]	; 0x4c
   20d84:	mov	r7, #1
   20d88:	and	r3, r3, #15
   20d8c:	mov	sl, #2
   20d90:	str	r3, [sp, #12]
   20d94:	b	2094c <__assert_fail@plt+0xeb84>
   20d98:	mov	r9, sl
   20d9c:	strb	r3, [sp, #76]	; 0x4c
   20da0:	mov	r7, #1
   20da4:	and	r3, r3, #7
   20da8:	mov	sl, #3
   20dac:	str	r3, [sp, #12]
   20db0:	b	2094c <__assert_fail@plt+0xeb84>
   20db4:	mov	r7, r8
   20db8:	mov	r9, fp
   20dbc:	b	2094c <__assert_fail@plt+0xeb84>
   20dc0:	cmp	fp, #0
   20dc4:	beq	20e28 <__assert_fail@plt+0xf060>
   20dc8:	ldr	ip, [sp, #40]	; 0x28
   20dcc:	add	r9, sp, #76	; 0x4c
   20dd0:	str	sl, [sp, #48]	; 0x30
   20dd4:	str	r4, [sp, #52]	; 0x34
   20dd8:	mov	r4, fp
   20ddc:	mov	sl, ip
   20de0:	str	fp, [sp, #20]
   20de4:	ldrb	r2, [r9, sl]
   20de8:	mov	r0, r4
   20dec:	movw	r3, #31384	; 0x7a98
   20df0:	add	sl, sl, #1
   20df4:	movt	r3, #2
   20df8:	mov	r1, #1
   20dfc:	str	r2, [sp]
   20e00:	mvn	r2, #0
   20e04:	bl	11c0c <__sprintf_chk@plt>
   20e08:	cmp	r8, sl
   20e0c:	add	r4, r4, #4
   20e10:	bgt	20de4 <__assert_fail@plt+0xf01c>
   20e14:	bic	r3, r7, r7, asr #31
   20e18:	ldr	sl, [sp, #48]	; 0x30
   20e1c:	add	r3, r3, #1
   20e20:	ldr	r4, [sp, #52]	; 0x34
   20e24:	add	fp, fp, r3, lsl #2
   20e28:	mov	r7, #0
   20e2c:	add	r6, r6, r8, lsl #2
   20e30:	mov	r9, r7
   20e34:	b	2094c <__assert_fail@plt+0xeb84>
   20e38:	mov	r9, sl
   20e3c:	strb	r3, [sp, #76]	; 0x4c
   20e40:	mov	r7, #1
   20e44:	and	r3, r3, #3
   20e48:	mov	sl, #4
   20e4c:	str	r3, [sp, #12]
   20e50:	b	2094c <__assert_fail@plt+0xeb84>
   20e54:	mov	r9, sl
   20e58:	strb	r3, [sp, #76]	; 0x4c
   20e5c:	mov	r7, #1
   20e60:	and	r3, r3, #1
   20e64:	mov	sl, #5
   20e68:	str	r3, [sp, #12]
   20e6c:	b	2094c <__assert_fail@plt+0xeb84>
   20e70:	movw	r4, #44616	; 0xae48
   20e74:	movt	r4, #3
   20e78:	mov	r6, #0
   20e7c:	movw	r1, #21584	; 0x5450
   20e80:	ldr	r0, [r4]
   20e84:	movt	r1, #2
   20e88:	strb	r6, [fp]
   20e8c:	bl	11af8 <iconv_open@plt>
   20e90:	cmn	r0, #1
   20e94:	mov	r5, r0
   20e98:	beq	20f98 <__assert_fail@plt+0xf1d0>
   20e9c:	ldr	ip, [sp, #24]
   20ea0:	rsb	r2, ip, fp
   20ea4:	str	r2, [sp, #68]	; 0x44
   20ea8:	add	r3, r2, #1
   20eac:	str	ip, [sp, #60]	; 0x3c
   20eb0:	lsl	r0, r3, #4
   20eb4:	str	r0, [sp, #72]	; 0x48
   20eb8:	cmp	r3, r0, lsr #4
   20ebc:	bne	20fd8 <__assert_fail@plt+0xf210>
   20ec0:	bl	170bc <__assert_fail@plt+0x52f4>
   20ec4:	add	r3, sp, #72	; 0x48
   20ec8:	add	r1, sp, #60	; 0x3c
   20ecc:	str	r3, [sp]
   20ed0:	add	r2, sp, #68	; 0x44
   20ed4:	add	r3, sp, #64	; 0x40
   20ed8:	mov	r7, r0
   20edc:	mov	r0, r5
   20ee0:	str	r7, [sp, #64]	; 0x40
   20ee4:	bl	118d0 <iconv@plt>
   20ee8:	cmn	r0, #1
   20eec:	beq	20f10 <__assert_fail@plt+0xf148>
   20ef0:	ldr	r3, [sp, #64]	; 0x40
   20ef4:	ldr	r0, [sp, #24]
   20ef8:	strb	r6, [r3]
   20efc:	bl	1716c <__assert_fail@plt+0x53a4>
   20f00:	mov	r0, r5
   20f04:	bl	118c4 <iconv_close@plt>
   20f08:	mov	r0, r7
   20f0c:	b	20a14 <__assert_fail@plt+0xec4c>
   20f10:	movw	r6, #44952	; 0xaf98
   20f14:	movt	r6, #3
   20f18:	ldr	r0, [r6, #20]
   20f1c:	cmp	r0, #0
   20f20:	beq	20f58 <__assert_fail@plt+0xf190>
   20f24:	ldr	r0, [sp, #24]
   20f28:	mov	r3, #1
   20f2c:	str	r3, [r6, #20]
   20f30:	bl	1716c <__assert_fail@plt+0x53a4>
   20f34:	mov	r0, r7
   20f38:	bl	1716c <__assert_fail@plt+0x53a4>
   20f3c:	ldr	r0, [sp, #36]	; 0x24
   20f40:	ldr	r1, [sp, #28]
   20f44:	mov	r3, #0
   20f48:	ldr	r2, [sp, #16]
   20f4c:	bl	20888 <__assert_fail@plt+0xeac0>
   20f50:	mov	r7, r0
   20f54:	b	20f00 <__assert_fail@plt+0xf138>
   20f58:	mov	r2, #5
   20f5c:	movw	r1, #31404	; 0x7aac
   20f60:	movt	r1, #2
   20f64:	bl	119cc <dcgettext@plt>
   20f68:	mov	r8, r0
   20f6c:	bl	11bf4 <__errno_location@plt>
   20f70:	ldr	r4, [r4]
   20f74:	ldr	r0, [r0]
   20f78:	bl	11b10 <strerror@plt>
   20f7c:	mov	r2, r4
   20f80:	movw	r1, #21584	; 0x5450
   20f84:	movt	r1, #2
   20f88:	mov	r3, r0
   20f8c:	mov	r0, r8
   20f90:	bl	23b40 <__assert_fail@plt+0x11d78>
   20f94:	b	20f24 <__assert_fail@plt+0xf15c>
   20f98:	ldr	r0, [r4]
   20f9c:	mov	r2, #1
   20fa0:	movw	r1, #21584	; 0x5450
   20fa4:	movt	r1, #2
   20fa8:	bl	2078c <__assert_fail@plt+0xe9c4>
   20fac:	ldr	r0, [sp, #24]
   20fb0:	bl	1716c <__assert_fail@plt+0x53a4>
   20fb4:	movw	r3, #44952	; 0xaf98
   20fb8:	movt	r3, #3
   20fbc:	ldr	r0, [sp, #36]	; 0x24
   20fc0:	ldr	r1, [sp, #28]
   20fc4:	ldr	r2, [sp, #16]
   20fc8:	ldr	r3, [r3, #16]
   20fcc:	bl	20888 <__assert_fail@plt+0xeac0>
   20fd0:	b	20a14 <__assert_fail@plt+0xec4c>
   20fd4:	bl	119d8 <__stack_chk_fail@plt>
   20fd8:	movw	r0, #31392	; 0x7aa0
   20fdc:	movw	r2, #31284	; 0x7a34
   20fe0:	movt	r0, #2
   20fe4:	movt	r2, #2
   20fe8:	movw	r1, #586	; 0x24a
   20fec:	bl	23dc8 <__assert_fail@plt+0x12000>
   20ff0:	push	{r4, r5, r6, lr}
   20ff4:	subs	r4, r0, #0
   20ff8:	beq	2112c <__assert_fail@plt+0xf364>
   20ffc:	mov	r0, r4
   21000:	bl	11bac <strlen@plt>
   21004:	cmp	r0, #3
   21008:	bhi	210f4 <__assert_fail@plt+0xf32c>
   2100c:	ldrb	r3, [r4]
   21010:	mov	r5, r4
   21014:	cmp	r3, #0
   21018:	bne	21048 <__assert_fail@plt+0xf280>
   2101c:	movw	r2, #44616	; 0xae48
   21020:	movw	r3, #44952	; 0xaf98
   21024:	movt	r2, #3
   21028:	movt	r3, #3
   2102c:	mov	r0, #0
   21030:	movw	r1, #31372	; 0x7a8c
   21034:	str	r0, [r3, #12]
   21038:	movt	r1, #2
   2103c:	str	r0, [r3, #16]
   21040:	str	r1, [r2]
   21044:	pop	{r4, r5, r6, pc}
   21048:	movw	r1, #31376	; 0x7a90
   2104c:	mov	r0, r5
   21050:	movt	r1, #2
   21054:	bl	202f0 <__assert_fail@plt+0xe528>
   21058:	cmp	r0, #0
   2105c:	beq	2101c <__assert_fail@plt+0xf254>
   21060:	movw	r1, #31452	; 0x7adc
   21064:	mov	r0, r5
   21068:	movt	r1, #2
   2106c:	bl	202f0 <__assert_fail@plt+0xe528>
   21070:	cmp	r0, #0
   21074:	beq	2101c <__assert_fail@plt+0xf254>
   21078:	movw	r1, #31456	; 0x7ae0
   2107c:	mov	r0, r5
   21080:	movt	r1, #2
   21084:	bl	202f0 <__assert_fail@plt+0xe528>
   21088:	cmp	r0, #0
   2108c:	beq	2101c <__assert_fail@plt+0xf254>
   21090:	movw	r1, #31464	; 0x7ae8
   21094:	mov	r0, r5
   21098:	movt	r1, #2
   2109c:	bl	202f0 <__assert_fail@plt+0xe528>
   210a0:	cmp	r0, #0
   210a4:	beq	2101c <__assert_fail@plt+0xf254>
   210a8:	movw	r1, #31480	; 0x7af8
   210ac:	mov	r0, r5
   210b0:	movt	r1, #2
   210b4:	movw	r6, #21584	; 0x5450
   210b8:	bl	202f0 <__assert_fail@plt+0xe528>
   210bc:	movt	r6, #2
   210c0:	cmp	r0, #0
   210c4:	bne	2113c <__assert_fail@plt+0xf374>
   210c8:	movw	r2, #44616	; 0xae48
   210cc:	movw	r3, #44952	; 0xaf98
   210d0:	movt	r2, #3
   210d4:	movt	r3, #3
   210d8:	mov	r1, #0
   210dc:	mov	ip, #1
   210e0:	str	r6, [r2]
   210e4:	mov	r0, r1
   210e8:	str	ip, [r3, #12]
   210ec:	str	r1, [r3, #16]
   210f0:	pop	{r4, r5, r6, pc}
   210f4:	movw	r1, #31448	; 0x7ad8
   210f8:	mov	r0, r4
   210fc:	movt	r1, #2
   21100:	mov	r2, #3
   21104:	bl	20444 <__assert_fail@plt+0xe67c>
   21108:	cmp	r0, #0
   2110c:	bne	2100c <__assert_fail@plt+0xf244>
   21110:	ldrb	r3, [r4, #3]
   21114:	cmp	r3, #45	; 0x2d
   21118:	cmpne	r3, #95	; 0x5f
   2111c:	addne	r5, r4, #3
   21120:	addeq	r5, r4, #4
   21124:	ldrbeq	r3, [r4, #4]
   21128:	b	21014 <__assert_fail@plt+0xf24c>
   2112c:	mov	r0, #14
   21130:	bl	11d08 <nl_langinfo@plt>
   21134:	mov	r4, r0
   21138:	b	20ffc <__assert_fail@plt+0xf234>
   2113c:	mov	r0, r5
   21140:	mov	r1, r6
   21144:	bl	202f0 <__assert_fail@plt+0xe528>
   21148:	cmp	r0, #0
   2114c:	beq	210c8 <__assert_fail@plt+0xf300>
   21150:	mov	r0, r4
   21154:	mov	r1, r6
   21158:	bl	11af8 <iconv_open@plt>
   2115c:	cmn	r0, #1
   21160:	mov	r5, r0
   21164:	beq	211b4 <__assert_fail@plt+0xf3ec>
   21168:	bl	118c4 <iconv_close@plt>
   2116c:	mov	r0, r6
   21170:	mov	r1, r4
   21174:	bl	11af8 <iconv_open@plt>
   21178:	cmn	r0, #1
   2117c:	mov	r5, r0
   21180:	beq	211cc <__assert_fail@plt+0xf404>
   21184:	bl	118c4 <iconv_close@plt>
   21188:	movw	r2, #44616	; 0xae48
   2118c:	movw	r3, #44952	; 0xaf98
   21190:	movt	r2, #3
   21194:	movt	r3, #3
   21198:	mov	r1, #0
   2119c:	str	r4, [r2]
   211a0:	mov	r0, r1
   211a4:	mov	r2, #1
   211a8:	str	r1, [r3, #12]
   211ac:	str	r2, [r3, #16]
   211b0:	pop	{r4, r5, r6, pc}
   211b4:	mov	r0, r4
   211b8:	mov	r1, r6
   211bc:	mov	r2, #0
   211c0:	bl	2078c <__assert_fail@plt+0xe9c4>
   211c4:	mov	r0, r5
   211c8:	pop	{r4, r5, r6, pc}
   211cc:	mov	r0, r6
   211d0:	mov	r1, r4
   211d4:	mov	r2, #0
   211d8:	bl	2078c <__assert_fail@plt+0xe9c4>
   211dc:	mov	r0, r5
   211e0:	pop	{r4, r5, r6, pc}
   211e4:	movw	r3, #44616	; 0xae48
   211e8:	movt	r3, #3
   211ec:	ldr	r0, [r3]
   211f0:	bx	lr
   211f4:	movw	r3, #44952	; 0xaf98
   211f8:	movt	r3, #3
   211fc:	ldr	r0, [r3, #12]
   21200:	bx	lr
   21204:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21208:	movw	r5, #44952	; 0xaf98
   2120c:	movt	r5, #3
   21210:	movw	r4, #44624	; 0xae50
   21214:	movt	r4, #3
   21218:	sub	sp, sp, #36	; 0x24
   2121c:	ldr	r6, [r5, #12]
   21220:	mov	r7, r0
   21224:	ldr	r3, [r4]
   21228:	cmp	r6, #0
   2122c:	str	r3, [sp, #28]
   21230:	bne	212fc <__assert_fail@plt+0xf534>
   21234:	ldr	r2, [r5, #16]
   21238:	cmp	r2, #0
   2123c:	bne	21304 <__assert_fail@plt+0xf53c>
   21240:	ldrb	r3, [r0]
   21244:	cmp	r3, #0
   21248:	beq	213e0 <__assert_fail@plt+0xf618>
   2124c:	mov	ip, r0
   21250:	tst	r3, #128	; 0x80
   21254:	ldrb	r3, [ip, #1]!
   21258:	addeq	r2, r2, #1
   2125c:	addne	r2, r2, #2
   21260:	cmp	r3, #0
   21264:	bne	21250 <__assert_fail@plt+0xf488>
   21268:	add	r0, r2, #1
   2126c:	bl	170bc <__assert_fail@plt+0x52f4>
   21270:	ldrb	r3, [r7]
   21274:	cmp	r3, #0
   21278:	beq	21448 <__assert_fail@plt+0xf680>
   2127c:	add	r1, r7, #1
   21280:	mov	r2, r0
   21284:	b	21294 <__assert_fail@plt+0xf4cc>
   21288:	ldrb	r3, [r1], #1
   2128c:	cmp	r3, #0
   21290:	beq	212dc <__assert_fail@plt+0xf514>
   21294:	tst	r3, #128	; 0x80
   21298:	strbeq	r3, [r2]
   2129c:	addeq	r2, r2, #1
   212a0:	beq	21288 <__assert_fail@plt+0xf4c0>
   212a4:	lsr	r3, r3, #6
   212a8:	mov	ip, r2
   212ac:	mvn	r3, r3, lsl #26
   212b0:	mvn	r3, r3, lsr #26
   212b4:	strb	r3, [ip], #2
   212b8:	ldrb	r3, [r1, #-1]
   212bc:	and	r3, r3, #63	; 0x3f
   212c0:	mvn	r3, r3, lsl #25
   212c4:	mvn	r3, r3, lsr #25
   212c8:	strb	r3, [r2, #1]
   212cc:	ldrb	r3, [r1], #1
   212d0:	mov	r2, ip
   212d4:	cmp	r3, #0
   212d8:	bne	21294 <__assert_fail@plt+0xf4cc>
   212dc:	mov	r3, #0
   212e0:	strb	r3, [r2]
   212e4:	ldr	r2, [sp, #28]
   212e8:	ldr	r3, [r4]
   212ec:	cmp	r2, r3
   212f0:	bne	21450 <__assert_fail@plt+0xf688>
   212f4:	add	sp, sp, #36	; 0x24
   212f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   212fc:	bl	17134 <__assert_fail@plt+0x536c>
   21300:	b	212e4 <__assert_fail@plt+0xf51c>
   21304:	movw	r9, #44616	; 0xae48
   21308:	movt	r9, #3
   2130c:	movw	r0, #21584	; 0x5450
   21310:	movt	r0, #2
   21314:	ldr	r1, [r9]
   21318:	bl	11af8 <iconv_open@plt>
   2131c:	cmn	r0, #1
   21320:	mov	r8, r0
   21324:	beq	21428 <__assert_fail@plt+0xf660>
   21328:	ldrb	r3, [r7]
   2132c:	cmp	r3, #0
   21330:	moveq	r6, r3
   21334:	moveq	r0, #1
   21338:	beq	2135c <__assert_fail@plt+0xf594>
   2133c:	mov	r2, r7
   21340:	tst	r3, #128	; 0x80
   21344:	ldrb	r3, [r2, #1]!
   21348:	addeq	r6, r6, #1
   2134c:	addne	r6, r6, #6
   21350:	cmp	r3, #0
   21354:	bne	21340 <__assert_fail@plt+0xf578>
   21358:	add	r0, r6, #1
   2135c:	bl	170bc <__assert_fail@plt+0x52f4>
   21360:	str	r7, [sp, #12]
   21364:	mov	sl, r0
   21368:	mov	r0, r7
   2136c:	bl	11bac <strlen@plt>
   21370:	add	r3, sp, #24
   21374:	add	r1, sp, #12
   21378:	str	r3, [sp]
   2137c:	add	r2, sp, #20
   21380:	add	r3, sp, #16
   21384:	str	sl, [sp, #16]
   21388:	str	r6, [sp, #24]
   2138c:	str	r0, [sp, #20]
   21390:	mov	r0, r8
   21394:	bl	118d0 <iconv@plt>
   21398:	cmn	r0, #1
   2139c:	beq	213bc <__assert_fail@plt+0xf5f4>
   213a0:	ldr	r3, [sp, #16]
   213a4:	mov	r2, #0
   213a8:	strb	r2, [r3]
   213ac:	mov	r0, r8
   213b0:	bl	118c4 <iconv_close@plt>
   213b4:	mov	r0, sl
   213b8:	b	212e4 <__assert_fail@plt+0xf51c>
   213bc:	ldr	r0, [r5, #24]
   213c0:	cmp	r0, #0
   213c4:	beq	213e8 <__assert_fail@plt+0xf620>
   213c8:	mov	r1, r7
   213cc:	mov	r0, sl
   213d0:	mov	r3, #1
   213d4:	str	r3, [r5, #24]
   213d8:	bl	11aa4 <strcpy@plt>
   213dc:	b	213ac <__assert_fail@plt+0xf5e4>
   213e0:	mov	r0, #1
   213e4:	b	2126c <__assert_fail@plt+0xf4a4>
   213e8:	mov	r2, #5
   213ec:	movw	r1, #31404	; 0x7aac
   213f0:	movt	r1, #2
   213f4:	bl	119cc <dcgettext@plt>
   213f8:	mov	fp, r0
   213fc:	bl	11bf4 <__errno_location@plt>
   21400:	ldr	r6, [r9]
   21404:	ldr	r0, [r0]
   21408:	bl	11b10 <strerror@plt>
   2140c:	mov	r1, r6
   21410:	movw	r2, #21584	; 0x5450
   21414:	movt	r2, #2
   21418:	mov	r3, r0
   2141c:	mov	r0, fp
   21420:	bl	23b40 <__assert_fail@plt+0x11d78>
   21424:	b	213c8 <__assert_fail@plt+0xf600>
   21428:	ldr	r1, [r9]
   2142c:	mov	r2, #1
   21430:	movw	r0, #21584	; 0x5450
   21434:	movt	r0, #2
   21438:	bl	2078c <__assert_fail@plt+0xe9c4>
   2143c:	mov	r0, r7
   21440:	bl	21204 <__assert_fail@plt+0xf43c>
   21444:	b	212e4 <__assert_fail@plt+0xf51c>
   21448:	mov	r2, r0
   2144c:	b	212dc <__assert_fail@plt+0xf514>
   21450:	bl	119d8 <__stack_chk_fail@plt>
   21454:	movw	r3, #44952	; 0xaf98
   21458:	movt	r3, #3
   2145c:	ldr	r3, [r3, #16]
   21460:	b	20888 <__assert_fail@plt+0xeac0>
   21464:	b	11af8 <iconv_open@plt>
   21468:	b	118d0 <iconv@plt>
   2146c:	b	118c4 <iconv_close@plt>
   21470:	ldr	ip, [r0, #8]
   21474:	push	{r4, r5, r6, lr}
   21478:	ands	r3, ip, #32768	; 0x8000
   2147c:	mov	r4, r0
   21480:	mov	r5, r1
   21484:	mov	r6, r2
   21488:	bne	214d0 <__assert_fail@plt+0xf708>
   2148c:	ldr	r2, [r0]
   21490:	orr	ip, ip, #32768	; 0x8000
   21494:	str	r3, [r0, #28]
   21498:	str	ip, [r0, #8]
   2149c:	str	r3, [r0, #32]
   214a0:	str	r3, [r0, #36]	; 0x24
   214a4:	str	r3, [r0, #12]
   214a8:	ldr	r2, [r2]
   214ac:	str	r3, [r0, #40]	; 0x28
   214b0:	cmp	r2, #0
   214b4:	str	r3, [r0, #44]	; 0x2c
   214b8:	str	r3, [r0, #48]	; 0x30
   214bc:	str	r3, [r0, #52]	; 0x34
   214c0:	blt	21648 <__assert_fail@plt+0xf880>
   214c4:	mov	r3, #0
   214c8:	str	r3, [r4, #24]
   214cc:	pop	{r4, r5, r6, pc}
   214d0:	ldr	r3, [r0, #12]
   214d4:	cmp	r3, #0
   214d8:	beq	214c4 <__assert_fail@plt+0xf6fc>
   214dc:	cmp	r1, #0
   214e0:	beq	2158c <__assert_fail@plt+0xf7c4>
   214e4:	ldr	r3, [r0, #16]
   214e8:	cmn	r3, #6
   214ec:	beq	21570 <__assert_fail@plt+0xf7a8>
   214f0:	cmn	r3, #5
   214f4:	beq	215ec <__assert_fail@plt+0xf824>
   214f8:	cmn	r3, #4
   214fc:	beq	21608 <__assert_fail@plt+0xf840>
   21500:	cmn	r3, #3
   21504:	beq	21654 <__assert_fail@plt+0xf88c>
   21508:	cmn	r3, #7
   2150c:	beq	21670 <__assert_fail@plt+0xf8a8>
   21510:	cmn	r3, #10
   21514:	beq	2168c <__assert_fail@plt+0xf8c4>
   21518:	cmn	r3, #11
   2151c:	mov	r2, #5
   21520:	movweq	r1, #31652	; 0x7ba4
   21524:	movwne	r1, #31664	; 0x7bb0
   21528:	moveq	r0, #0
   2152c:	movteq	r1, #2
   21530:	movne	r0, #0
   21534:	movtne	r1, #2
   21538:	bl	119cc <dcgettext@plt>
   2153c:	mov	r3, r0
   21540:	movw	r0, #31680	; 0x7bc0
   21544:	mov	r1, r5
   21548:	ldr	r2, [r6]
   2154c:	movt	r0, #2
   21550:	bl	23b98 <__assert_fail@plt+0x11dd0>
   21554:	ldr	r3, [r4, #12]
   21558:	cmp	r3, #1
   2155c:	moveq	r3, #0
   21560:	streq	r3, [r4, #12]
   21564:	beq	214c4 <__assert_fail@plt+0xf6fc>
   21568:	mov	r0, #2
   2156c:	bl	11b94 <exit@plt>
   21570:	movw	r1, #31532	; 0x7b2c
   21574:	mov	r0, #0
   21578:	movt	r1, #2
   2157c:	mov	r2, #5
   21580:	bl	119cc <dcgettext@plt>
   21584:	mov	r3, r0
   21588:	b	21540 <__assert_fail@plt+0xf778>
   2158c:	ldr	r6, [r0, #40]	; 0x28
   21590:	movw	r2, #31488	; 0x7b00
   21594:	ldr	r3, [r0, #16]
   21598:	movt	r2, #2
   2159c:	cmp	r6, #0
   215a0:	mov	r0, r1
   215a4:	moveq	r6, r2
   215a8:	cmn	r3, #3
   215ac:	beq	216a8 <__assert_fail@plt+0xf8e0>
   215b0:	cmn	r3, #6
   215b4:	beq	216c4 <__assert_fail@plt+0xf8fc>
   215b8:	cmn	r3, #7
   215bc:	beq	216e0 <__assert_fail@plt+0xf918>
   215c0:	cmn	r3, #8
   215c4:	beq	216fc <__assert_fail@plt+0xf934>
   215c8:	cmn	r3, #11
   215cc:	beq	21624 <__assert_fail@plt+0xf85c>
   215d0:	mov	r2, #5
   215d4:	movw	r1, #31852	; 0x7c6c
   215d8:	movt	r1, #2
   215dc:	bl	119cc <dcgettext@plt>
   215e0:	mov	r1, r6
   215e4:	bl	23b98 <__assert_fail@plt+0x11dd0>
   215e8:	b	21554 <__assert_fail@plt+0xf78c>
   215ec:	movw	r1, #31556	; 0x7b44
   215f0:	mov	r0, #0
   215f4:	movt	r1, #2
   215f8:	mov	r2, #5
   215fc:	bl	119cc <dcgettext@plt>
   21600:	mov	r3, r0
   21604:	b	21540 <__assert_fail@plt+0xf778>
   21608:	movw	r1, #31568	; 0x7b50
   2160c:	mov	r0, #0
   21610:	movt	r1, #2
   21614:	mov	r2, #5
   21618:	bl	119cc <dcgettext@plt>
   2161c:	mov	r3, r0
   21620:	b	21540 <__assert_fail@plt+0xf778>
   21624:	mov	r2, #5
   21628:	movw	r1, #31836	; 0x7c5c
   2162c:	movt	r1, #2
   21630:	bl	119cc <dcgettext@plt>
   21634:	mov	r1, r0
   21638:	movw	r0, #30488	; 0x7718
   2163c:	movt	r0, #2
   21640:	bl	23b98 <__assert_fail@plt+0x11dd0>
   21644:	b	21554 <__assert_fail@plt+0xf78c>
   21648:	movw	r0, #31496	; 0x7b08
   2164c:	movt	r0, #2
   21650:	bl	23c44 <__assert_fail@plt+0x11e7c>
   21654:	movw	r1, #31588	; 0x7b64
   21658:	mov	r0, #0
   2165c:	movt	r1, #2
   21660:	mov	r2, #5
   21664:	bl	119cc <dcgettext@plt>
   21668:	mov	r3, r0
   2166c:	b	21540 <__assert_fail@plt+0xf778>
   21670:	movw	r1, #31608	; 0x7b78
   21674:	mov	r0, #0
   21678:	movt	r1, #2
   2167c:	mov	r2, #5
   21680:	bl	119cc <dcgettext@plt>
   21684:	mov	r3, r0
   21688:	b	21540 <__assert_fail@plt+0xf778>
   2168c:	movw	r1, #31624	; 0x7b88
   21690:	mov	r0, #0
   21694:	movt	r1, #2
   21698:	mov	r2, #5
   2169c:	bl	119cc <dcgettext@plt>
   216a0:	mov	r3, r0
   216a4:	b	21540 <__assert_fail@plt+0xf778>
   216a8:	mov	r2, #5
   216ac:	movw	r1, #31692	; 0x7bcc
   216b0:	movt	r1, #2
   216b4:	bl	119cc <dcgettext@plt>
   216b8:	mov	r1, r6
   216bc:	bl	23b98 <__assert_fail@plt+0x11dd0>
   216c0:	b	21554 <__assert_fail@plt+0xf78c>
   216c4:	mov	r2, #5
   216c8:	movw	r1, #31732	; 0x7bf4
   216cc:	movt	r1, #2
   216d0:	bl	119cc <dcgettext@plt>
   216d4:	mov	r1, r6
   216d8:	bl	23b98 <__assert_fail@plt+0x11dd0>
   216dc:	b	21554 <__assert_fail@plt+0xf78c>
   216e0:	mov	r2, #5
   216e4:	movw	r1, #31776	; 0x7c20
   216e8:	movt	r1, #2
   216ec:	bl	119cc <dcgettext@plt>
   216f0:	mov	r1, r6
   216f4:	bl	23b98 <__assert_fail@plt+0x11dd0>
   216f8:	b	21554 <__assert_fail@plt+0xf78c>
   216fc:	mov	r2, #5
   21700:	movw	r1, #31804	; 0x7c3c
   21704:	movt	r1, #2
   21708:	bl	119cc <dcgettext@plt>
   2170c:	mov	r1, r6
   21710:	bl	23b98 <__assert_fail@plt+0x11dd0>
   21714:	b	21554 <__assert_fail@plt+0xf78c>
   21718:	tst	r2, #16
   2171c:	and	ip, r2, #7
   21720:	push	{r4, lr}
   21724:	moveq	r2, #10
   21728:	movne	r2, #0
   2172c:	cmp	ip, #3
   21730:	mov	r4, r1
   21734:	str	ip, [r0]
   21738:	beq	2175c <__assert_fail@plt+0xf994>
   2173c:	cmp	ip, #4
   21740:	beq	21778 <__assert_fail@plt+0xf9b0>
   21744:	cmp	ip, #1
   21748:	strne	r3, [r1]
   2174c:	movne	r2, #1
   21750:	beq	2175c <__assert_fail@plt+0xf994>
   21754:	mov	r0, r2
   21758:	pop	{r4, pc}
   2175c:	mov	r0, r3
   21760:	mov	r1, #0
   21764:	bl	118e8 <strtol@plt>
   21768:	mov	r2, #0
   2176c:	str	r0, [r4]
   21770:	mov	r0, r2
   21774:	pop	{r4, pc}
   21778:	mov	r0, r3
   2177c:	mov	r1, #0
   21780:	bl	11ba0 <strtoul@plt>
   21784:	mov	r2, #0
   21788:	str	r0, [r4]
   2178c:	mov	r0, r2
   21790:	pop	{r4, pc}
   21794:	movw	r3, #44980	; 0xafb4
   21798:	movt	r3, #3
   2179c:	push	{r4, lr}
   217a0:	mov	r4, r0
   217a4:	ldr	r3, [r3]
   217a8:	cmp	r3, #0
   217ac:	beq	217bc <__assert_fail@plt+0xf9f4>
   217b0:	blx	r3
   217b4:	cmp	r0, #0
   217b8:	popne	{r4, pc}
   217bc:	sub	r4, r4, #10
   217c0:	cmp	r4, #31
   217c4:	ldrls	pc, [pc, r4, lsl #2]
   217c8:	b	218a0 <__assert_fail@plt+0xfad8>
   217cc:	andeq	r1, r2, ip, asr #16
   217d0:	andeq	r1, r2, r8, asr r8
   217d4:	andeq	r1, r2, r0, lsr #17
   217d8:	andeq	r1, r2, r4, ror #16
   217dc:	andeq	r1, r2, r0, ror r8
   217e0:	andeq	r1, r2, ip, ror r8
   217e4:	andeq	r1, r2, r8, lsl #17
   217e8:	andeq	r1, r2, r0, lsr #17
   217ec:	andeq	r1, r2, r0, lsr #17
   217f0:	andeq	r1, r2, r0, lsr #17
   217f4:	andeq	r1, r2, r0, lsr #17
   217f8:	andeq	r1, r2, r0, lsr #17
   217fc:	andeq	r1, r2, r0, lsr #17
   21800:	andeq	r1, r2, r0, lsr #17
   21804:	andeq	r1, r2, r0, lsr #17
   21808:	andeq	r1, r2, r0, lsr #17
   2180c:	andeq	r1, r2, r0, lsr #17
   21810:	andeq	r1, r2, r0, lsr #17
   21814:	andeq	r1, r2, r0, lsr #17
   21818:	andeq	r1, r2, r0, lsr #17
   2181c:	andeq	r1, r2, r0, lsr #17
   21820:	andeq	r1, r2, r0, lsr #17
   21824:	andeq	r1, r2, r0, lsr #17
   21828:	andeq	r1, r2, r0, lsr #17
   2182c:	andeq	r1, r2, r0, lsr #17
   21830:	andeq	r1, r2, r0, lsr #17
   21834:	andeq	r1, r2, r0, lsr #17
   21838:	andeq	r1, r2, r0, lsr #17
   2183c:	andeq	r1, r2, r0, lsr #17
   21840:	andeq	r1, r2, r0, lsr #17
   21844:	muleq	r2, r4, r8
   21848:	muleq	r2, r4, r8
   2184c:	movw	r0, #31876	; 0x7c84
   21850:	movt	r0, #2
   21854:	pop	{r4, pc}
   21858:	movw	r0, #32732	; 0x7fdc
   2185c:	movt	r0, #2
   21860:	pop	{r4, pc}
   21864:	movw	r0, #32728	; 0x7fd8
   21868:	movt	r0, #2
   2186c:	pop	{r4, pc}
   21870:	movw	r0, #32676	; 0x7fa4
   21874:	movt	r0, #2
   21878:	pop	{r4, pc}
   2187c:	movw	r0, #32552	; 0x7f28
   21880:	movt	r0, #2
   21884:	pop	{r4, pc}
   21888:	movw	r0, #31956	; 0x7cd4
   2188c:	movt	r0, #2
   21890:	pop	{r4, pc}
   21894:	movw	r0, #23988	; 0x5db4
   21898:	movt	r0, #2
   2189c:	pop	{r4, pc}
   218a0:	mov	r0, #0
   218a4:	pop	{r4, pc}
   218a8:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   218ac:	movw	r5, #44644	; 0xae64
   218b0:	movt	r5, #3
   218b4:	mov	sl, r0
   218b8:	mov	r9, r1
   218bc:	bl	11e30 <__assert_fail@plt+0x68>
   218c0:	ldr	r1, [r5]
   218c4:	mov	r0, #10
   218c8:	bl	11a74 <_IO_putc@plt>
   218cc:	mov	r0, #41	; 0x29
   218d0:	bl	21794 <__assert_fail@plt+0xf9cc>
   218d4:	bl	11ae0 <puts@plt>
   218d8:	ldr	r3, [sl, #12]
   218dc:	cmp	r3, #0
   218e0:	beq	21afc <__assert_fail@plt+0xfd34>
   218e4:	ldr	r7, [sl]
   218e8:	cmp	r7, #0
   218ec:	beq	219a8 <__assert_fail@plt+0xfbe0>
   218f0:	add	r4, sl, #16
   218f4:	mov	r6, sl
   218f8:	mov	r7, #0
   218fc:	b	21920 <__assert_fail@plt+0xfb58>
   21900:	cmp	r8, r7
   21904:	ble	21910 <__assert_fail@plt+0xfb48>
   21908:	cmp	r8, #34	; 0x22
   2190c:	movle	r7, r8
   21910:	mov	r6, r4
   21914:	ldr	r3, [r4], #16
   21918:	cmp	r3, #0
   2191c:	beq	219a4 <__assert_fail@plt+0xfbdc>
   21920:	ldr	r0, [r6, #4]
   21924:	cmp	r0, #0
   21928:	beq	21910 <__assert_fail@plt+0xfb48>
   2192c:	ldr	r3, [r6, #12]
   21930:	cmp	r3, #0
   21934:	beq	21cdc <__assert_fail@plt+0xff14>
   21938:	ldrb	fp, [r3]
   2193c:	cmp	fp, #64	; 0x40
   21940:	beq	21910 <__assert_fail@plt+0xfb48>
   21944:	bl	11bac <strlen@plt>
   21948:	cmp	fp, #124	; 0x7c
   2194c:	mov	r8, r0
   21950:	bne	21900 <__assert_fail@plt+0xfb38>
   21954:	bl	211f4 <__assert_fail@plt+0xf42c>
   21958:	ldr	r3, [r6, #12]
   2195c:	add	r2, r3, #1
   21960:	ldrb	r3, [r3, #1]
   21964:	cmp	r3, #61	; 0x3d
   21968:	beq	2197c <__assert_fail@plt+0xfbb4>
   2196c:	cmp	r3, #0
   21970:	cmpne	r3, #124	; 0x7c
   21974:	add	r8, r8, #1
   21978:	beq	21900 <__assert_fail@plt+0xfb38>
   2197c:	cmp	r0, #0
   21980:	beq	21990 <__assert_fail@plt+0xfbc8>
   21984:	and	r3, r3, #192	; 0xc0
   21988:	cmp	r3, #128	; 0x80
   2198c:	addne	r8, r8, #1
   21990:	ldrb	r3, [r2, #1]!
   21994:	cmp	r3, #124	; 0x7c
   21998:	cmpne	r3, #0
   2199c:	bne	2197c <__assert_fail@plt+0xfbb4>
   219a0:	b	21900 <__assert_fail@plt+0xfb38>
   219a4:	ldr	r3, [sl, #12]
   219a8:	ldrb	r3, [r3]
   219ac:	add	r7, r7, #10
   219b0:	cmp	r3, #64	; 0x40
   219b4:	beq	219c4 <__assert_fail@plt+0xfbfc>
   219b8:	movw	r0, #32744	; 0x7fe8
   219bc:	movt	r0, #2
   219c0:	bl	11ae0 <puts@plt>
   219c4:	ldr	r3, [sl]
   219c8:	cmp	r3, #0
   219cc:	addne	r8, sl, #16
   219d0:	beq	21ae8 <__assert_fail@plt+0xfd20>
   219d4:	mov	r0, #0
   219d8:	ldr	r1, [sl, #12]
   219dc:	mov	r2, #5
   219e0:	bl	119cc <dcgettext@plt>
   219e4:	subs	r6, r0, #0
   219e8:	beq	219f8 <__assert_fail@plt+0xfc30>
   219ec:	ldrb	r3, [r6]
   219f0:	cmp	r3, #64	; 0x40
   219f4:	beq	21c00 <__assert_fail@plt+0xfe38>
   219f8:	ldr	r2, [sl]
   219fc:	cmp	r2, #255	; 0xff
   21a00:	bgt	21bd4 <__assert_fail@plt+0xfe0c>
   21a04:	movw	r1, #32756	; 0x7ff4
   21a08:	mov	r0, #1
   21a0c:	movt	r1, #2
   21a10:	bl	11c60 <__printf_chk@plt>
   21a14:	ldr	r3, [sl, #4]
   21a18:	cmp	r3, #0
   21a1c:	movne	r4, #3
   21a20:	beq	21ce8 <__assert_fail@plt+0xff20>
   21a24:	ldr	r2, [sl]
   21a28:	movw	r1, #32768	; 0x8000
   21a2c:	mov	r0, #1
   21a30:	movt	r1, #2
   21a34:	cmp	r2, #255	; 0xff
   21a38:	movgt	r2, #32
   21a3c:	movle	r2, #44	; 0x2c
   21a40:	bl	11c60 <__printf_chk@plt>
   21a44:	cmp	r6, #0
   21a48:	add	r4, r4, r0
   21a4c:	beq	21a5c <__assert_fail@plt+0xfc94>
   21a50:	ldrb	r3, [r6]
   21a54:	cmp	r3, #124	; 0x7c
   21a58:	beq	21c40 <__assert_fail@plt+0xfe78>
   21a5c:	movw	r0, #32764	; 0x7ffc
   21a60:	mov	r2, #3
   21a64:	mov	r1, #1
   21a68:	movt	r0, #2
   21a6c:	ldr	r3, [r5]
   21a70:	add	r4, r4, r2
   21a74:	bl	11a80 <fwrite@plt>
   21a78:	cmp	r7, r4
   21a7c:	ble	21a9c <__assert_fail@plt+0xfcd4>
   21a80:	add	r4, r4, #1
   21a84:	mov	r0, #32
   21a88:	ldr	r1, [r5]
   21a8c:	bl	11a74 <_IO_putc@plt>
   21a90:	cmp	r4, r7
   21a94:	bne	21a80 <__assert_fail@plt+0xfcb8>
   21a98:	mov	r4, r7
   21a9c:	cmp	r6, #0
   21aa0:	beq	21acc <__assert_fail@plt+0xfd04>
   21aa4:	ldrb	r0, [r6]
   21aa8:	cmp	r0, #0
   21aac:	beq	21acc <__assert_fail@plt+0xfd04>
   21ab0:	cmp	r7, r4
   21ab4:	blt	21ca4 <__assert_fail@plt+0xfedc>
   21ab8:	cmp	r0, #10
   21abc:	bne	21b90 <__assert_fail@plt+0xfdc8>
   21ac0:	ldrb	r3, [r6, #1]
   21ac4:	cmp	r3, #0
   21ac8:	bne	21bac <__assert_fail@plt+0xfde4>
   21acc:	mov	r0, #10
   21ad0:	ldr	r1, [r5]
   21ad4:	bl	11a74 <_IO_putc@plt>
   21ad8:	mov	sl, r8
   21adc:	ldr	r3, [r8], #16
   21ae0:	cmp	r3, #0
   21ae4:	bne	219d4 <__assert_fail@plt+0xfc0c>
   21ae8:	tst	r9, #32
   21aec:	beq	21afc <__assert_fail@plt+0xfd34>
   21af0:	movw	r0, #32776	; 0x8008
   21af4:	movt	r0, #2
   21af8:	bl	11ae0 <puts@plt>
   21afc:	mov	r0, #19
   21b00:	bl	21794 <__assert_fail@plt+0xf9cc>
   21b04:	subs	r4, r0, #0
   21b08:	beq	21b80 <__assert_fail@plt+0xfdb8>
   21b0c:	ldr	r1, [r5]
   21b10:	mov	r0, #10
   21b14:	bl	11a74 <_IO_putc@plt>
   21b18:	mov	r0, r4
   21b1c:	movw	r1, #32832	; 0x8040
   21b20:	movt	r1, #2
   21b24:	bl	11894 <strstr@plt>
   21b28:	movw	r3, #44644	; 0xae64
   21b2c:	movt	r3, #3
   21b30:	subs	r6, r0, #0
   21b34:	beq	21d14 <__assert_fail@plt+0xff4c>
   21b38:	cmp	r6, r4
   21b3c:	beq	21b54 <__assert_fail@plt+0xfd8c>
   21b40:	mov	r0, r4
   21b44:	ldr	r3, [r3]
   21b48:	rsb	r1, r4, r6
   21b4c:	mov	r2, #1
   21b50:	bl	11a80 <fwrite@plt>
   21b54:	ldr	r3, [r5]
   21b58:	movw	r0, #32840	; 0x8048
   21b5c:	mov	r1, #1
   21b60:	movt	r0, #2
   21b64:	mov	r2, #21
   21b68:	movw	r4, #44644	; 0xae64
   21b6c:	bl	11a80 <fwrite@plt>
   21b70:	ldrb	r3, [r6, #7]
   21b74:	movt	r4, #3
   21b78:	cmp	r3, #0
   21b7c:	bne	21d04 <__assert_fail@plt+0xff3c>
   21b80:	ldr	r0, [r5]
   21b84:	bl	11930 <fflush@plt>
   21b88:	mov	r0, #0
   21b8c:	bl	11b94 <exit@plt>
   21b90:	ldr	r1, [r5]
   21b94:	bl	11a74 <_IO_putc@plt>
   21b98:	ldrb	r0, [r6, #1]
   21b9c:	add	r6, r6, #1
   21ba0:	cmp	r0, #0
   21ba4:	bne	21ab8 <__assert_fail@plt+0xfcf0>
   21ba8:	b	21acc <__assert_fail@plt+0xfd04>
   21bac:	ldr	r1, [r5]
   21bb0:	mov	r4, #0
   21bb4:	bl	11a74 <_IO_putc@plt>
   21bb8:	add	r4, r4, #1
   21bbc:	mov	r0, #32
   21bc0:	ldr	r1, [r5]
   21bc4:	bl	11a74 <_IO_putc@plt>
   21bc8:	cmp	r4, r7
   21bcc:	bne	21bb8 <__assert_fail@plt+0xfdf0>
   21bd0:	b	21b98 <__assert_fail@plt+0xfdd0>
   21bd4:	movw	r0, #32764	; 0x7ffc
   21bd8:	mov	r2, #3
   21bdc:	mov	r1, #1
   21be0:	movt	r0, #2
   21be4:	ldr	r3, [r5]
   21be8:	mov	r4, r2
   21bec:	bl	11a80 <fwrite@plt>
   21bf0:	ldr	r3, [sl, #4]
   21bf4:	cmp	r3, #0
   21bf8:	bne	21a24 <__assert_fail@plt+0xfc5c>
   21bfc:	b	21a78 <__assert_fail@plt+0xfcb0>
   21c00:	ldrb	r0, [r6, #1]
   21c04:	cmp	r0, #0
   21c08:	beq	21ad8 <__assert_fail@plt+0xfd10>
   21c0c:	add	r6, r6, #1
   21c10:	cmp	r0, #10
   21c14:	bne	21c24 <__assert_fail@plt+0xfe5c>
   21c18:	ldrb	r3, [r6, #1]
   21c1c:	cmp	r3, #0
   21c20:	beq	21acc <__assert_fail@plt+0xfd04>
   21c24:	ldr	r1, [r5]
   21c28:	add	r6, r6, #1
   21c2c:	bl	11a74 <_IO_putc@plt>
   21c30:	ldrb	r0, [r6]
   21c34:	cmp	r0, #0
   21c38:	bne	21c10 <__assert_fail@plt+0xfe48>
   21c3c:	b	21acc <__assert_fail@plt+0xfd04>
   21c40:	ldrb	r0, [r6, #1]
   21c44:	add	sl, r6, #1
   21c48:	cmp	r0, #61	; 0x3d
   21c4c:	beq	21c74 <__assert_fail@plt+0xfeac>
   21c50:	mov	r0, #32
   21c54:	ldr	r1, [r5]
   21c58:	bl	11a74 <_IO_putc@plt>
   21c5c:	ldrb	r0, [r6, #1]
   21c60:	add	r4, r4, #1
   21c64:	cmp	r0, #124	; 0x7c
   21c68:	cmpne	r0, #0
   21c6c:	moveq	r6, sl
   21c70:	beq	21c98 <__assert_fail@plt+0xfed0>
   21c74:	add	sl, r6, #2
   21c78:	ldr	r1, [r5]
   21c7c:	mov	r6, sl
   21c80:	bl	11a74 <_IO_putc@plt>
   21c84:	ldrb	r0, [sl], #1
   21c88:	add	r4, r4, #1
   21c8c:	cmp	r0, #124	; 0x7c
   21c90:	cmpne	r0, #0
   21c94:	bne	21c78 <__assert_fail@plt+0xfeb0>
   21c98:	cmp	r0, #0
   21c9c:	addne	r6, r6, #1
   21ca0:	b	21a5c <__assert_fail@plt+0xfc94>
   21ca4:	mov	r0, #10
   21ca8:	ldr	r1, [r5]
   21cac:	bl	11a74 <_IO_putc@plt>
   21cb0:	mov	r4, #0
   21cb4:	add	r4, r4, #1
   21cb8:	mov	r0, #32
   21cbc:	ldr	r1, [r5]
   21cc0:	bl	11a74 <_IO_putc@plt>
   21cc4:	cmp	r4, r7
   21cc8:	bne	21cb4 <__assert_fail@plt+0xfeec>
   21ccc:	ldrb	r0, [r6]
   21cd0:	cmp	r0, #0
   21cd4:	bne	21ab8 <__assert_fail@plt+0xfcf0>
   21cd8:	b	21acc <__assert_fail@plt+0xfd04>
   21cdc:	bl	11bac <strlen@plt>
   21ce0:	mov	r8, r0
   21ce4:	b	21900 <__assert_fail@plt+0xfb38>
   21ce8:	cmp	r6, #0
   21cec:	beq	21cfc <__assert_fail@plt+0xff34>
   21cf0:	ldrb	r3, [r6]
   21cf4:	cmp	r3, #124	; 0x7c
   21cf8:	beq	21d24 <__assert_fail@plt+0xff5c>
   21cfc:	mov	r4, #3
   21d00:	b	21a80 <__assert_fail@plt+0xfcb8>
   21d04:	add	r0, r6, #7
   21d08:	ldr	r1, [r4]
   21d0c:	bl	11d74 <fputs@plt>
   21d10:	b	21b80 <__assert_fail@plt+0xfdb8>
   21d14:	mov	r0, r4
   21d18:	ldr	r1, [r3]
   21d1c:	bl	11d74 <fputs@plt>
   21d20:	b	21b80 <__assert_fail@plt+0xfdb8>
   21d24:	mov	r0, #32
   21d28:	ldr	r1, [r5]
   21d2c:	add	fp, r6, #1
   21d30:	bl	11a74 <_IO_putc@plt>
   21d34:	mov	r4, #4
   21d38:	b	21d48 <__assert_fail@plt+0xff80>
   21d3c:	ldr	r1, [r5]
   21d40:	add	r4, r4, #1
   21d44:	bl	11a74 <_IO_putc@plt>
   21d48:	mov	r6, fp
   21d4c:	add	fp, fp, #1
   21d50:	ldrb	r0, [r6]
   21d54:	cmp	r0, #124	; 0x7c
   21d58:	cmpne	r0, #0
   21d5c:	bne	21d3c <__assert_fail@plt+0xff74>
   21d60:	cmp	r0, #0
   21d64:	movne	r6, fp
   21d68:	b	21bf0 <__assert_fail@plt+0xfe28>
   21d6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21d70:	sub	sp, sp, #20
   21d74:	mov	r4, r0
   21d78:	str	r1, [sp, #8]
   21d7c:	mov	r1, #0
   21d80:	mov	r2, r1
   21d84:	bl	21470 <__assert_fail@plt+0xf6a8>
   21d88:	ldr	fp, [r4]
   21d8c:	ldr	r7, [r4, #28]
   21d90:	ldr	r8, [r4, #4]
   21d94:	ldr	r5, [fp]
   21d98:	mov	r1, fp
   21d9c:	adds	r3, r5, #0
   21da0:	mov	r2, r8
   21da4:	ldr	r6, [r8]
   21da8:	movne	r3, #1
   21dac:	cmp	r7, #0
   21db0:	movne	r3, #0
   21db4:	cmp	r3, #0
   21db8:	beq	21dd4 <__assert_fail@plt+0x1000c>
   21dbc:	ldr	r3, [r4, #8]
   21dc0:	tst	r3, #16
   21dc4:	bne	21e6c <__assert_fail@plt+0x100a4>
   21dc8:	sub	r5, r5, #1
   21dcc:	add	r6, r6, #4
   21dd0:	mov	r7, #1
   21dd4:	cmp	r5, #0
   21dd8:	beq	21f4c <__assert_fail@plt+0x10184>
   21ddc:	ldr	r0, [r4, #36]	; 0x24
   21de0:	ldr	r9, [r6]
   21de4:	cmp	r0, #0
   21de8:	str	r9, [r4, #40]	; 0x28
   21dec:	bne	21e64 <__assert_fail@plt+0x1009c>
   21df0:	mov	r2, #1
   21df4:	ldrb	r3, [r9]
   21df8:	cmp	r3, #45	; 0x2d
   21dfc:	beq	21e74 <__assert_fail@plt+0x100ac>
   21e00:	ldr	r1, [r4, #32]
   21e04:	cmp	r1, #0
   21e08:	bne	21f88 <__assert_fail@plt+0x101c0>
   21e0c:	ldr	r3, [r4, #8]
   21e10:	tst	r3, #4
   21e14:	bne	21f58 <__assert_fail@plt+0x10190>
   21e18:	cmp	r5, #0
   21e1c:	str	r2, [r4, #36]	; 0x24
   21e20:	beq	21f44 <__assert_fail@plt+0x1017c>
   21e24:	ldr	r1, [r4, #36]	; 0x24
   21e28:	ldr	r9, [r6]
   21e2c:	cmp	r1, #0
   21e30:	str	r9, [r4, #40]	; 0x28
   21e34:	beq	21df4 <__assert_fail@plt+0x1002c>
   21e38:	ands	r3, r3, #2
   21e3c:	streq	r3, [r4, #16]
   21e40:	moveq	r1, fp
   21e44:	moveq	r2, r8
   21e48:	bne	21f58 <__assert_fail@plt+0x10190>
   21e4c:	str	r5, [r1]
   21e50:	str	r6, [r2]
   21e54:	ldr	r0, [r4, #16]
   21e58:	str	r7, [r4, #28]
   21e5c:	add	sp, sp, #20
   21e60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21e64:	ldr	r3, [r4, #8]
   21e68:	b	21e38 <__assert_fail@plt+0x10070>
   21e6c:	mov	r7, #0
   21e70:	b	21ddc <__assert_fail@plt+0x10014>
   21e74:	ldrb	r3, [r9, #1]
   21e78:	cmp	r3, #45	; 0x2d
   21e7c:	beq	21f10 <__assert_fail@plt+0x10148>
   21e80:	cmp	r3, #0
   21e84:	beq	21e00 <__assert_fail@plt+0x10038>
   21e88:	ldr	r1, [r4, #32]
   21e8c:	cmp	r1, #0
   21e90:	bne	21f88 <__assert_fail@plt+0x101c0>
   21e94:	ldr	r2, [r4, #8]
   21e98:	mov	r3, #1
   21e9c:	str	r3, [r4, #32]
   21ea0:	tst	r2, #32
   21ea4:	beq	21f84 <__assert_fail@plt+0x101bc>
   21ea8:	ldr	r0, [sp, #8]
   21eac:	ldr	sl, [r0]
   21eb0:	cmp	sl, #0
   21eb4:	beq	22424 <__assert_fail@plt+0x1065c>
   21eb8:	add	r3, r9, r3
   21ebc:	add	r9, r0, #16
   21ec0:	mov	r2, r1
   21ec4:	mov	r1, r0
   21ec8:	ldr	r0, [r1, #4]
   21ecc:	cmp	r0, #0
   21ed0:	beq	21ef4 <__assert_fail@plt+0x1012c>
   21ed4:	mov	r1, r3
   21ed8:	str	r2, [sp, #4]
   21edc:	str	r3, [sp]
   21ee0:	bl	118dc <strcmp@plt>
   21ee4:	ldr	r2, [sp, #4]
   21ee8:	ldr	r3, [sp]
   21eec:	cmp	r0, #0
   21ef0:	beq	22278 <__assert_fail@plt+0x104b0>
   21ef4:	mov	r1, r9
   21ef8:	ldr	r0, [r9], #16
   21efc:	add	r2, r2, #1
   21f00:	cmp	r0, #0
   21f04:	bne	21ec8 <__assert_fail@plt+0x10100>
   21f08:	mov	r1, #1
   21f0c:	b	21f9c <__assert_fail@plt+0x101d4>
   21f10:	str	r0, [r4, #32]
   21f14:	ldrb	sl, [r9, #2]
   21f18:	cmp	sl, #0
   21f1c:	bne	22130 <__assert_fail@plt+0x10368>
   21f20:	ldr	r3, [r4, #8]
   21f24:	tst	r3, #8
   21f28:	bne	22130 <__assert_fail@plt+0x10368>
   21f2c:	sub	r5, r5, #1
   21f30:	str	r2, [r4, #36]	; 0x24
   21f34:	cmp	r5, #0
   21f38:	add	r6, r6, #4
   21f3c:	add	r7, r7, #1
   21f40:	bne	21e24 <__assert_fail@plt+0x1005c>
   21f44:	mov	r1, fp
   21f48:	mov	r2, r8
   21f4c:	mov	r5, #0
   21f50:	str	r5, [r4, #16]
   21f54:	b	21e4c <__assert_fail@plt+0x10084>
   21f58:	mvn	r0, #0
   21f5c:	mov	r3, #2
   21f60:	str	r9, [r4, #24]
   21f64:	sub	r5, r5, #1
   21f68:	add	r6, r6, #4
   21f6c:	add	r7, r7, #1
   21f70:	mov	r1, fp
   21f74:	mov	r2, r8
   21f78:	str	r0, [r4, #16]
   21f7c:	str	r3, [r4, #20]
   21f80:	b	21e4c <__assert_fail@plt+0x10084>
   21f84:	mov	r1, r3
   21f88:	ldr	r3, [sp, #8]
   21f8c:	ldr	sl, [r3]
   21f90:	add	r3, r9, r1
   21f94:	cmp	sl, #0
   21f98:	beq	22418 <__assert_fail@plt+0x10650>
   21f9c:	ldrb	r0, [r3]
   21fa0:	ldr	r2, [sp, #8]
   21fa4:	cmp	sl, r0
   21fa8:	beq	220d0 <__assert_fail@plt+0x10308>
   21fac:	add	r9, r2, #16
   21fb0:	b	21fc0 <__assert_fail@plt+0x101f8>
   21fb4:	cmp	sl, r0
   21fb8:	add	r9, r2, #16
   21fbc:	beq	2203c <__assert_fail@plt+0x10274>
   21fc0:	ldr	sl, [r9]
   21fc4:	mov	r2, r9
   21fc8:	cmp	sl, #0
   21fcc:	bne	21fb4 <__assert_fail@plt+0x101ec>
   21fd0:	mov	r9, #0
   21fd4:	cmp	r0, #104	; 0x68
   21fd8:	cmpne	r0, #63	; 0x3f
   21fdc:	beq	224bc <__assert_fail@plt+0x106f4>
   21fe0:	ldr	r2, [r2, #8]
   21fe4:	add	r1, r1, #1
   21fe8:	str	r3, [r4, #24]
   21fec:	tst	r2, #128	; 0x80
   21ff0:	str	r1, [r4, #32]
   21ff4:	mvneq	r2, #1
   21ff8:	mvnne	r2, #6
   21ffc:	str	r2, [r4, #16]
   22000:	ldrb	r3, [r3, #1]
   22004:	cmp	r3, #0
   22008:	beq	2201c <__assert_fail@plt+0x10254>
   2200c:	cmp	r9, #0
   22010:	moveq	r1, fp
   22014:	moveq	r2, r8
   22018:	beq	21e4c <__assert_fail@plt+0x10084>
   2201c:	mov	r3, #0
   22020:	sub	r5, r5, #1
   22024:	add	r6, r6, #4
   22028:	add	r7, r7, #1
   2202c:	mov	r1, fp
   22030:	mov	r2, r8
   22034:	str	r3, [r4, #32]
   22038:	b	21e4c <__assert_fail@plt+0x10084>
   2203c:	mov	r9, #0
   22040:	ldr	r2, [r2, #8]
   22044:	str	sl, [r4, #16]
   22048:	ands	r0, r2, #7
   2204c:	beq	220c0 <__assert_fail@plt+0x102f8>
   22050:	ldrb	r1, [r3, #1]
   22054:	cmp	r1, #0
   22058:	beq	22080 <__assert_fail@plt+0x102b8>
   2205c:	cmp	r9, #0
   22060:	bne	22080 <__assert_fail@plt+0x102b8>
   22064:	add	r3, r3, #1
   22068:	add	r0, r4, #20
   2206c:	add	r1, r4, #24
   22070:	bl	21718 <__assert_fail@plt+0xf950>
   22074:	ldr	fp, [r4]
   22078:	ldr	r8, [r4, #4]
   2207c:	b	2201c <__assert_fail@plt+0x10254>
   22080:	ldr	r3, [r6, #4]
   22084:	cmp	r3, #0
   22088:	beq	220e4 <__assert_fail@plt+0x1031c>
   2208c:	ldrb	r1, [r3]
   22090:	cmp	r1, #45	; 0x2d
   22094:	bne	22104 <__assert_fail@plt+0x1033c>
   22098:	ldrb	r1, [r3, #1]
   2209c:	cmp	r1, #0
   220a0:	beq	22104 <__assert_fail@plt+0x1033c>
   220a4:	tst	r2, #8
   220a8:	beq	22104 <__assert_fail@plt+0x1033c>
   220ac:	mov	r2, #0
   220b0:	movw	r3, #30856	; 0x7888
   220b4:	str	r2, [r4, #20]
   220b8:	movt	r3, #2
   220bc:	b	22000 <__assert_fail@plt+0x10238>
   220c0:	add	r1, r1, #1
   220c4:	str	r0, [r4, #20]
   220c8:	str	r1, [r4, #32]
   220cc:	b	22000 <__assert_fail@plt+0x10238>
   220d0:	mov	r9, #0
   220d4:	cmp	sl, #0
   220d8:	bne	22040 <__assert_fail@plt+0x10278>
   220dc:	ldrb	r0, [r3]
   220e0:	b	21fd4 <__assert_fail@plt+0x1020c>
   220e4:	tst	r2, #8
   220e8:	strne	r3, [r4, #20]
   220ec:	mvneq	r2, #2
   220f0:	movwne	r3, #30856	; 0x7888
   220f4:	movweq	r3, #30856	; 0x7888
   220f8:	streq	r2, [r4, #16]
   220fc:	movt	r3, #2
   22100:	b	22000 <__assert_fail@plt+0x10238>
   22104:	add	r0, r4, #20
   22108:	add	r1, r4, #24
   2210c:	bl	21718 <__assert_fail@plt+0xf950>
   22110:	sub	r5, r5, #1
   22114:	movw	r3, #30856	; 0x7888
   22118:	add	r6, r6, #4
   2211c:	add	r7, r7, #1
   22120:	ldr	fp, [r4]
   22124:	movt	r3, #2
   22128:	ldr	r8, [r4, #4]
   2212c:	b	22000 <__assert_fail@plt+0x10238>
   22130:	add	r8, r9, #2
   22134:	mov	r1, #61	; 0x3d
   22138:	mov	r0, r8
   2213c:	bl	11bc4 <strchr@plt>
   22140:	cmp	r0, #0
   22144:	str	r0, [sp, #12]
   22148:	movne	r3, #0
   2214c:	strbne	r3, [r0]
   22150:	ldrbne	sl, [r9, #2]
   22154:	cmp	sl, #0
   22158:	beq	221f8 <__assert_fail@plt+0x10430>
   2215c:	ldr	r0, [sp, #8]
   22160:	ldr	r3, [r0]
   22164:	cmp	r3, #0
   22168:	beq	221f8 <__assert_fail@plt+0x10430>
   2216c:	add	sl, r0, #16
   22170:	mov	r2, r0
   22174:	mov	fp, #0
   22178:	mov	r9, sl
   2217c:	ldr	r0, [r2, #4]
   22180:	cmp	r0, #0
   22184:	beq	22198 <__assert_fail@plt+0x103d0>
   22188:	mov	r1, r8
   2218c:	bl	118dc <strcmp@plt>
   22190:	cmp	r0, #0
   22194:	beq	22294 <__assert_fail@plt+0x104cc>
   22198:	mov	r2, r9
   2219c:	ldr	r1, [r9], #16
   221a0:	add	fp, fp, #1
   221a4:	cmp	r1, #0
   221a8:	bne	2217c <__assert_fail@plt+0x103b4>
   221ac:	mov	r0, r8
   221b0:	mov	r9, r1
   221b4:	bl	11bac <strlen@plt>
   221b8:	ldr	r2, [sp, #8]
   221bc:	mov	fp, sl
   221c0:	mov	sl, r0
   221c4:	ldr	r0, [r2, #4]
   221c8:	cmp	r0, #0
   221cc:	beq	221e4 <__assert_fail@plt+0x1041c>
   221d0:	mov	r1, r8
   221d4:	mov	r2, sl
   221d8:	bl	11d80 <strncmp@plt>
   221dc:	cmp	r0, #0
   221e0:	beq	22304 <__assert_fail@plt+0x1053c>
   221e4:	mov	r2, fp
   221e8:	ldr	r1, [fp], #16
   221ec:	add	r9, r9, #1
   221f0:	cmp	r1, #0
   221f4:	bne	221c4 <__assert_fail@plt+0x103fc>
   221f8:	mvn	r9, #0
   221fc:	ldr	r3, [sp, #12]
   22200:	cmp	r3, #0
   22204:	ldrne	r0, [sp, #12]
   22208:	movne	r3, #61	; 0x3d
   2220c:	strbne	r3, [r0]
   22210:	cmp	r9, #0
   22214:	blt	222b4 <__assert_fail@plt+0x104ec>
   22218:	ldr	r3, [sp, #8]
   2221c:	add	r2, r3, r9, lsl #4
   22220:	ldr	r3, [r3, r9, lsl #4]
   22224:	ldr	r2, [r2, #8]
   22228:	tst	r2, #7
   2222c:	str	r3, [r4, #16]
   22230:	beq	2229c <__assert_fail@plt+0x104d4>
   22234:	ldr	r3, [sp, #12]
   22238:	cmp	r3, #0
   2223c:	beq	22450 <__assert_fail@plt+0x10688>
   22240:	ldrb	r3, [r3, #1]
   22244:	cmp	r3, #0
   22248:	beq	22438 <__assert_fail@plt+0x10670>
   2224c:	ldr	r0, [sp, #12]
   22250:	adds	r3, r0, #1
   22254:	beq	22438 <__assert_fail@plt+0x10670>
   22258:	add	r0, r4, #20
   2225c:	add	r1, r4, #24
   22260:	bl	21718 <__assert_fail@plt+0xf950>
   22264:	sub	r5, r5, #1
   22268:	add	r6, r6, #4
   2226c:	add	r7, r7, #1
   22270:	ldm	r4, {r1, r2}
   22274:	b	21e4c <__assert_fail@plt+0x10084>
   22278:	ldr	r1, [sp, #8]
   2227c:	ldr	r0, [sp, #8]
   22280:	ldr	sl, [r1, r2, lsl #4]
   22284:	mov	r1, #1
   22288:	add	r2, r0, r2, lsl #4
   2228c:	mov	r9, r1
   22290:	b	220d4 <__assert_fail@plt+0x1030c>
   22294:	mov	r9, fp
   22298:	b	221fc <__assert_fail@plt+0x10434>
   2229c:	ldr	r3, [sp, #12]
   222a0:	cmp	r3, #0
   222a4:	beq	2248c <__assert_fail@plt+0x106c4>
   222a8:	mvn	r3, #5
   222ac:	str	r3, [r4, #20]
   222b0:	b	22264 <__assert_fail@plt+0x1049c>
   222b4:	movw	r0, #32864	; 0x8060
   222b8:	mov	r1, r8
   222bc:	movt	r0, #2
   222c0:	bl	118dc <strcmp@plt>
   222c4:	cmp	r0, #0
   222c8:	beq	224bc <__assert_fail@plt+0x106f4>
   222cc:	movw	r0, #32872	; 0x8068
   222d0:	mov	r1, r8
   222d4:	movt	r0, #2
   222d8:	bl	118dc <strcmp@plt>
   222dc:	cmp	r0, #0
   222e0:	bne	2236c <__assert_fail@plt+0x105a4>
   222e4:	ldr	r3, [r4, #8]
   222e8:	ands	sl, r3, #64	; 0x40
   222ec:	beq	22498 <__assert_fail@plt+0x106d0>
   222f0:	cmn	r9, #2
   222f4:	bne	224a4 <__assert_fail@plt+0x106dc>
   222f8:	mvn	r3, #7
   222fc:	str	r3, [r4, #16]
   22300:	b	22264 <__assert_fail@plt+0x1049c>
   22304:	ldr	r2, [sp, #8]
   22308:	add	r3, r9, #1
   2230c:	ldr	r1, [r2, r3, lsl #4]
   22310:	lsl	r3, r3, #4
   22314:	add	r2, r2, r3
   22318:	cmp	r1, #0
   2231c:	beq	221fc <__assert_fail@plt+0x10434>
   22320:	ldr	r0, [sp, #8]
   22324:	sub	r3, r3, #16
   22328:	add	fp, r0, r3
   2232c:	b	22344 <__assert_fail@plt+0x1057c>
   22330:	add	r2, fp, #32
   22334:	add	fp, fp, #16
   22338:	ldr	r1, [fp, #16]
   2233c:	cmp	r1, #0
   22340:	beq	221fc <__assert_fail@plt+0x10434>
   22344:	ldr	r0, [r2, #4]
   22348:	cmp	r0, #0
   2234c:	beq	22330 <__assert_fail@plt+0x10568>
   22350:	mov	r1, r8
   22354:	mov	r2, sl
   22358:	bl	11d80 <strncmp@plt>
   2235c:	cmp	r0, #0
   22360:	bne	22330 <__assert_fail@plt+0x10568>
   22364:	mvn	r9, #1
   22368:	b	221fc <__assert_fail@plt+0x10434>
   2236c:	movw	r0, #32880	; 0x8070
   22370:	mov	r1, r8
   22374:	movt	r0, #2
   22378:	bl	118dc <strcmp@plt>
   2237c:	subs	sl, r0, #0
   22380:	beq	224d8 <__assert_fail@plt+0x10710>
   22384:	movw	r0, #32892	; 0x807c
   22388:	mov	r1, r8
   2238c:	movt	r0, #2
   22390:	bl	118dc <strcmp@plt>
   22394:	cmp	r0, #0
   22398:	bne	222f0 <__assert_fail@plt+0x10528>
   2239c:	ldr	r1, [sp, #8]
   223a0:	ldr	r3, [r1]
   223a4:	cmp	r3, #0
   223a8:	beq	223f0 <__assert_fail@plt+0x10628>
   223ac:	ldr	r3, [sp, #8]
   223b0:	add	r4, r3, #16
   223b4:	mov	r7, r3
   223b8:	ldr	r2, [r7, #4]
   223bc:	cmp	r2, #0
   223c0:	beq	223e0 <__assert_fail@plt+0x10618>
   223c4:	ldr	r3, [r7, #8]
   223c8:	tst	r3, #64	; 0x40
   223cc:	bne	223e0 <__assert_fail@plt+0x10618>
   223d0:	movw	r1, #32952	; 0x80b8
   223d4:	mov	r0, #1
   223d8:	movt	r1, #2
   223dc:	bl	11c60 <__printf_chk@plt>
   223e0:	mov	r7, r4
   223e4:	ldr	r3, [r4], #16
   223e8:	cmp	r3, #0
   223ec:	bne	223b8 <__assert_fail@plt+0x105f0>
   223f0:	movw	r3, #44644	; 0xae64
   223f4:	movt	r3, #3
   223f8:	movw	r0, #32908	; 0x808c
   223fc:	mov	r1, #1
   22400:	ldr	r3, [r3]
   22404:	movt	r0, #2
   22408:	mov	r2, #43	; 0x2b
   2240c:	bl	11a80 <fwrite@plt>
   22410:	mov	r0, #0
   22414:	bl	11b94 <exit@plt>
   22418:	ldrb	r0, [r9, r1]
   2241c:	ldr	r2, [sp, #8]
   22420:	b	21fd0 <__assert_fail@plt+0x10208>
   22424:	mov	r1, r3
   22428:	ldrb	r0, [r9, #1]
   2242c:	add	r3, r9, #1
   22430:	ldr	r2, [sp, #8]
   22434:	b	21fd0 <__assert_fail@plt+0x10208>
   22438:	tst	r2, #8
   2243c:	movne	r3, #0
   22440:	mvneq	r3, #2
   22444:	strne	r3, [r4, #20]
   22448:	streq	r3, [r4, #16]
   2244c:	b	22264 <__assert_fail@plt+0x1049c>
   22450:	ldr	r3, [r6, #4]
   22454:	cmp	r3, #0
   22458:	beq	22438 <__assert_fail@plt+0x10670>
   2245c:	ldrb	r1, [r3]
   22460:	cmp	r1, #45	; 0x2d
   22464:	beq	22484 <__assert_fail@plt+0x106bc>
   22468:	add	r0, r4, #20
   2246c:	add	r1, r4, #24
   22470:	sub	r5, r5, #1
   22474:	add	r6, r6, #4
   22478:	add	r7, r7, #1
   2247c:	bl	21718 <__assert_fail@plt+0xf950>
   22480:	b	22264 <__assert_fail@plt+0x1049c>
   22484:	tst	r2, #8
   22488:	beq	22468 <__assert_fail@plt+0x106a0>
   2248c:	ldr	r3, [sp, #12]
   22490:	str	r3, [r4, #20]
   22494:	b	22264 <__assert_fail@plt+0x1049c>
   22498:	bl	11e30 <__assert_fail@plt+0x68>
   2249c:	mov	r0, sl
   224a0:	bl	11b94 <exit@plt>
   224a4:	cmn	r9, #1
   224a8:	bne	224c8 <__assert_fail@plt+0x10700>
   224ac:	mvn	r3, #1
   224b0:	str	r8, [r4, #24]
   224b4:	str	r3, [r4, #16]
   224b8:	b	22264 <__assert_fail@plt+0x1049c>
   224bc:	ldr	r0, [sp, #8]
   224c0:	ldr	r1, [r4, #8]
   224c4:	bl	218a8 <__assert_fail@plt+0xfae0>
   224c8:	ldr	r1, [sp, #8]
   224cc:	ldr	r3, [r1, r9, lsl #4]
   224d0:	str	r3, [r4, #16]
   224d4:	b	22264 <__assert_fail@plt+0x1049c>
   224d8:	mov	r0, #16
   224dc:	bl	21794 <__assert_fail@plt+0xf9cc>
   224e0:	bl	11ae0 <puts@plt>
   224e4:	mov	r0, sl
   224e8:	bl	11b94 <exit@plt>
   224ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224f0:	movw	ip, #44624	; 0xae50
   224f4:	sub	sp, sp, #252	; 0xfc
   224f8:	movt	ip, #3
   224fc:	subs	r5, r0, #0
   22500:	mov	fp, r2
   22504:	str	r3, [sp, #8]
   22508:	ldr	r3, [ip]
   2250c:	str	ip, [sp, #16]
   22510:	ldr	sl, [sp, #288]	; 0x120
   22514:	str	r3, [sp, #244]	; 0xf4
   22518:	ldr	r0, [sp, #8]
   2251c:	beq	22a3c <__assert_fail@plt+0x10c74>
   22520:	mov	r3, #0
   22524:	str	r3, [sp, #12]
   22528:	bl	21470 <__assert_fail@plt+0xf6a8>
   2252c:	ldr	ip, [sp, #12]
   22530:	mov	r7, ip
   22534:	mov	r4, ip
   22538:	mov	r9, ip
   2253c:	str	ip, [sp, #24]
   22540:	str	ip, [sp, #20]
   22544:	mov	r0, r5
   22548:	bl	1199c <_IO_getc@plt>
   2254c:	cmn	r0, #1
   22550:	mov	r6, r0
   22554:	movne	r3, #0
   22558:	moveq	r3, #1
   2255c:	cmn	r0, #1
   22560:	cmpne	r0, #10
   22564:	bne	225ac <__assert_fail@plt+0x107e4>
   22568:	cmn	r0, #1
   2256c:	ldrne	r2, [fp]
   22570:	addne	r2, r2, #1
   22574:	strne	r2, [fp]
   22578:	cmn	r9, #1
   2257c:	beq	228dc <__assert_fail@plt+0x10b14>
   22580:	cmp	r9, #2
   22584:	beq	2260c <__assert_fail@plt+0x10844>
   22588:	cmp	r9, #3
   2258c:	beq	22910 <__assert_fail@plt+0x10b48>
   22590:	cmp	r9, #4
   22594:	beq	22940 <__assert_fail@plt+0x10b78>
   22598:	cmp	r3, #0
   2259c:	bne	229c0 <__assert_fail@plt+0x10bf8>
   225a0:	mov	r4, r3
   225a4:	mov	r9, r3
   225a8:	b	22544 <__assert_fail@plt+0x1077c>
   225ac:	cmn	r9, #1
   225b0:	beq	22544 <__assert_fail@plt+0x1077c>
   225b4:	cmp	r9, #0
   225b8:	bne	225d0 <__assert_fail@plt+0x10808>
   225bc:	bics	r0, r6, #127	; 0x7f
   225c0:	beq	226d8 <__assert_fail@plt+0x10910>
   225c4:	cmp	r6, #35	; 0x23
   225c8:	beq	227ec <__assert_fail@plt+0x10a24>
   225cc:	b	225f0 <__assert_fail@plt+0x10828>
   225d0:	cmp	r9, #1
   225d4:	beq	22544 <__assert_fail@plt+0x1077c>
   225d8:	cmp	r9, #2
   225dc:	beq	226f4 <__assert_fail@plt+0x1092c>
   225e0:	cmp	r9, #3
   225e4:	beq	227f4 <__assert_fail@plt+0x10a2c>
   225e8:	cmp	r9, #4
   225ec:	beq	22848 <__assert_fail@plt+0x10a80>
   225f0:	cmp	r4, #98	; 0x62
   225f4:	bls	2280c <__assert_fail@plt+0x10a44>
   225f8:	ldr	ip, [sp, #8]
   225fc:	mvn	r3, #3
   22600:	mvn	r9, #0
   22604:	str	r3, [ip, #16]
   22608:	b	22544 <__assert_fail@plt+0x1077c>
   2260c:	ldr	r8, [sl]
   22610:	add	ip, sp, #248	; 0xf8
   22614:	mov	r7, #0
   22618:	add	r4, ip, r4
   2261c:	cmp	r8, r7
   22620:	strb	r7, [r4, #-204]	; 0xffffff34
   22624:	beq	22a14 <__assert_fail@plt+0x10c4c>
   22628:	add	r6, sl, #16
   2262c:	mov	r9, sl
   22630:	ldr	r0, [r9, #4]
   22634:	cmp	r0, #0
   22638:	beq	2264c <__assert_fail@plt+0x10884>
   2263c:	add	r1, sp, #44	; 0x2c
   22640:	bl	118dc <strcmp@plt>
   22644:	cmp	r0, #0
   22648:	beq	22664 <__assert_fail@plt+0x1089c>
   2264c:	mov	r9, r6
   22650:	ldr	r8, [r6], #16
   22654:	add	r7, r7, #1
   22658:	cmp	r8, #0
   2265c:	bne	22630 <__assert_fail@plt+0x10868>
   22660:	b	22a1c <__assert_fail@plt+0x10c54>
   22664:	ldr	r6, [r9, #8]
   22668:	ldr	ip, [sp, #8]
   2266c:	ands	r3, r6, #64	; 0x40
   22670:	str	r8, [ip, #16]
   22674:	bne	226cc <__assert_fail@plt+0x10904>
   22678:	cmp	r8, #0
   2267c:	bne	22b60 <__assert_fail@plt+0x10d98>
   22680:	movw	r1, #32960	; 0x80c0
   22684:	add	r0, sp, #44	; 0x2c
   22688:	movt	r1, #2
   2268c:	bl	118dc <strcmp@plt>
   22690:	cmp	r0, #0
   22694:	beq	226cc <__assert_fail@plt+0x10904>
   22698:	ldr	ip, [sp, #8]
   2269c:	ldr	r8, [ip, #52]	; 0x34
   226a0:	cmp	r8, #0
   226a4:	bne	226b8 <__assert_fail@plt+0x108f0>
   226a8:	b	22874 <__assert_fail@plt+0x10aac>
   226ac:	ldr	r8, [r8]
   226b0:	cmp	r8, #0
   226b4:	beq	22874 <__assert_fail@plt+0x10aac>
   226b8:	add	r0, r8, #4
   226bc:	add	r1, sp, #44	; 0x2c
   226c0:	bl	118dc <strcmp@plt>
   226c4:	cmp	r0, #0
   226c8:	bne	226ac <__assert_fail@plt+0x108e4>
   226cc:	mov	r4, r0
   226d0:	mov	r9, r0
   226d4:	b	22544 <__assert_fail@plt+0x1077c>
   226d8:	bl	11b7c <__ctype_b_loc@plt>
   226dc:	lsl	r3, r6, #1
   226e0:	ldr	r2, [r0]
   226e4:	ldrh	r3, [r2, r3]
   226e8:	tst	r3, #8192	; 0x2000
   226ec:	bne	22544 <__assert_fail@plt+0x1077c>
   226f0:	b	225c4 <__assert_fail@plt+0x107fc>
   226f4:	bics	r8, r6, #127	; 0x7f
   226f8:	bne	225f0 <__assert_fail@plt+0x10828>
   226fc:	bl	11b7c <__ctype_b_loc@plt>
   22700:	lsl	r3, r6, #1
   22704:	ldr	r2, [r0]
   22708:	mov	r9, r0
   2270c:	ldrh	r3, [r2, r3]
   22710:	tst	r3, #8192	; 0x2000
   22714:	beq	225f0 <__assert_fail@plt+0x10828>
   22718:	ldr	r7, [sl]
   2271c:	add	r1, sp, #248	; 0xf8
   22720:	add	r4, r1, r4
   22724:	cmp	r7, #0
   22728:	strb	r8, [r4, #-204]	; 0xffffff34
   2272c:	beq	22d20 <__assert_fail@plt+0x10f58>
   22730:	add	r6, sl, #16
   22734:	mov	r4, r8
   22738:	mov	r8, sl
   2273c:	ldr	r0, [r8, #4]
   22740:	cmp	r0, #0
   22744:	beq	22758 <__assert_fail@plt+0x10990>
   22748:	add	r1, sp, #44	; 0x2c
   2274c:	bl	118dc <strcmp@plt>
   22750:	cmp	r0, #0
   22754:	beq	228e8 <__assert_fail@plt+0x10b20>
   22758:	mov	r8, r6
   2275c:	ldr	r7, [r6], #16
   22760:	add	r4, r4, #1
   22764:	cmp	r7, #0
   22768:	bne	2273c <__assert_fail@plt+0x10974>
   2276c:	ldr	r8, [r8, #8]
   22770:	mov	r3, #0
   22774:	ldr	ip, [sp, #8]
   22778:	tst	r8, #64	; 0x40
   2277c:	str	r3, [ip, #16]
   22780:	bne	227e8 <__assert_fail@plt+0x10a20>
   22784:	movw	r1, #32984	; 0x80d8
   22788:	add	r0, sp, #44	; 0x2c
   2278c:	movt	r1, #2
   22790:	bl	118dc <strcmp@plt>
   22794:	cmp	r0, #0
   22798:	beq	22b74 <__assert_fail@plt+0x10dac>
   2279c:	movw	r1, #32960	; 0x80c0
   227a0:	add	r0, sp, #44	; 0x2c
   227a4:	movt	r1, #2
   227a8:	bl	118dc <strcmp@plt>
   227ac:	cmp	r0, #0
   227b0:	beq	22b9c <__assert_fail@plt+0x10dd4>
   227b4:	ldr	ip, [sp, #8]
   227b8:	ldr	r6, [ip, #52]	; 0x34
   227bc:	cmp	r6, #0
   227c0:	bne	227d4 <__assert_fail@plt+0x10a0c>
   227c4:	b	22d60 <__assert_fail@plt+0x10f98>
   227c8:	ldr	r6, [r6]
   227cc:	cmp	r6, #0
   227d0:	beq	22d60 <__assert_fail@plt+0x10f98>
   227d4:	add	r0, r6, #4
   227d8:	add	r1, sp, #44	; 0x2c
   227dc:	bl	118dc <strcmp@plt>
   227e0:	cmp	r0, #0
   227e4:	bne	227c8 <__assert_fail@plt+0x10a00>
   227e8:	mov	r7, r4
   227ec:	mov	r9, #1
   227f0:	b	22544 <__assert_fail@plt+0x1077c>
   227f4:	bics	r0, r6, #127	; 0x7f
   227f8:	beq	22824 <__assert_fail@plt+0x10a5c>
   227fc:	strb	r6, [sp, #44]	; 0x2c
   22800:	mov	r4, #1
   22804:	mov	r9, #4
   22808:	b	22544 <__assert_fail@plt+0x1077c>
   2280c:	mov	r9, #2
   22810:	add	r0, sp, #248	; 0xf8
   22814:	add	r3, r0, r4
   22818:	add	r4, r4, #1
   2281c:	strb	r6, [r3, #-204]	; 0xffffff34
   22820:	b	22544 <__assert_fail@plt+0x1077c>
   22824:	bl	11b7c <__ctype_b_loc@plt>
   22828:	lsl	r3, r6, #1
   2282c:	ldr	r2, [r0]
   22830:	ldrh	r3, [r2, r3]
   22834:	tst	r3, #8192	; 0x2000
   22838:	strbeq	r6, [sp, #44]	; 0x2c
   2283c:	moveq	r4, #1
   22840:	moveq	r9, #4
   22844:	b	22544 <__assert_fail@plt+0x1077c>
   22848:	ldr	ip, [sp, #20]
   2284c:	cmp	ip, #0
   22850:	beq	22b0c <__assert_fail@plt+0x10d44>
   22854:	ldr	r2, [sp, #24]
   22858:	mov	r8, r4
   2285c:	sub	r3, r2, #1
   22860:	cmp	r4, r3
   22864:	bcs	22a4c <__assert_fail@plt+0x10c84>
   22868:	add	r4, r4, #1
   2286c:	strb	r6, [ip, r8]
   22870:	b	22544 <__assert_fail@plt+0x1077c>
   22874:	tst	r6, #128	; 0x80
   22878:	mvneq	r8, #1
   2287c:	mvnne	r8, #6
   22880:	ldr	ip, [sp, #8]
   22884:	str	r8, [ip, #16]
   22888:	ldr	ip, [sp, #16]
   2288c:	mov	r0, r8
   22890:	ldr	r2, [sp, #244]	; 0xf4
   22894:	ldr	r3, [ip]
   22898:	cmp	r2, r3
   2289c:	bne	22dcc <__assert_fail@plt+0x11004>
   228a0:	add	sp, sp, #252	; 0xfc
   228a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   228a8:	str	r1, [sp, #20]
   228ac:	ldr	ip, [sp, #20]
   228b0:	mov	r3, #0
   228b4:	add	r4, ip, #1
   228b8:	strb	r3, [ip]
   228bc:	mov	r0, r4
   228c0:	bl	1fa1c <__assert_fail@plt+0xdc54>
   228c4:	cmp	r4, #0
   228c8:	beq	229a4 <__assert_fail@plt+0x10bdc>
   228cc:	ldr	ip, [sp, #20]
   228d0:	ldrb	r3, [ip, #1]
   228d4:	cmp	r3, #0
   228d8:	beq	229a4 <__assert_fail@plt+0x10bdc>
   228dc:	ldr	ip, [sp, #8]
   228e0:	ldr	r8, [ip, #16]
   228e4:	b	22888 <__assert_fail@plt+0x10ac0>
   228e8:	ldr	r8, [r8, #8]
   228ec:	ldr	ip, [sp, #8]
   228f0:	tst	r8, #64	; 0x40
   228f4:	str	r7, [ip, #16]
   228f8:	bne	227e8 <__assert_fail@plt+0x10a20>
   228fc:	cmp	r7, #0
   22900:	beq	22784 <__assert_fail@plt+0x109bc>
   22904:	mov	r7, r4
   22908:	mov	r9, #3
   2290c:	b	22544 <__assert_fail@plt+0x1077c>
   22910:	ldr	r3, [sp, #12]
   22914:	cmp	r3, #0
   22918:	bne	22a84 <__assert_fail@plt+0x10cbc>
   2291c:	add	r7, sl, r7, lsl #4
   22920:	ldr	r3, [r7, #8]
   22924:	tst	r3, #7
   22928:	bne	22a7c <__assert_fail@plt+0x10cb4>
   2292c:	ldr	ip, [sp, #8]
   22930:	mov	r3, #0
   22934:	ldr	r8, [ip, #16]
   22938:	str	r3, [ip, #20]
   2293c:	b	22888 <__assert_fail@plt+0x10ac0>
   22940:	ldr	r3, [sp, #12]
   22944:	ldr	r5, [sp, #20]
   22948:	cmp	r3, #0
   2294c:	beq	22a94 <__assert_fail@plt+0x10ccc>
   22950:	cmp	r5, #0
   22954:	beq	22b50 <__assert_fail@plt+0x10d88>
   22958:	mov	r3, #0
   2295c:	strb	r3, [r5, r4]
   22960:	ldrb	r3, [r5]
   22964:	cmp	r3, #0
   22968:	beq	229a4 <__assert_fail@plt+0x10bdc>
   2296c:	cmp	r3, #32
   22970:	beq	228ac <__assert_fail@plt+0x10ae4>
   22974:	cmp	r3, #9
   22978:	beq	228ac <__assert_fail@plt+0x10ae4>
   2297c:	add	r2, r5, #1
   22980:	b	22994 <__assert_fail@plt+0x10bcc>
   22984:	cmp	r3, #32
   22988:	beq	228a8 <__assert_fail@plt+0x10ae0>
   2298c:	cmp	r3, #9
   22990:	beq	228a8 <__assert_fail@plt+0x10ae0>
   22994:	mov	r1, r2
   22998:	ldrb	r3, [r2], #1
   2299c:	cmp	r3, #0
   229a0:	bne	22984 <__assert_fail@plt+0x10bbc>
   229a4:	mov	r0, r5
   229a8:	bl	1716c <__assert_fail@plt+0x53a4>
   229ac:	ldr	ip, [sp, #8]
   229b0:	mvn	r3, #9
   229b4:	mov	r8, r3
   229b8:	str	r3, [ip, #16]
   229bc:	b	22888 <__assert_fail@plt+0x10ac0>
   229c0:	ldr	ip, [sp, #8]
   229c4:	ldr	r0, [ip, #52]	; 0x34
   229c8:	cmp	r0, #0
   229cc:	bne	229d8 <__assert_fail@plt+0x10c10>
   229d0:	b	229e8 <__assert_fail@plt+0x10c20>
   229d4:	mov	r0, r4
   229d8:	ldr	r4, [r0]
   229dc:	bl	1716c <__assert_fail@plt+0x53a4>
   229e0:	cmp	r4, #0
   229e4:	bne	229d4 <__assert_fail@plt+0x10c0c>
   229e8:	ldr	ip, [sp, #8]
   229ec:	mov	r3, #0
   229f0:	mov	r0, r5
   229f4:	str	r3, [ip, #52]	; 0x34
   229f8:	bl	11960 <ferror@plt>
   229fc:	subs	r8, r0, #0
   22a00:	beq	22880 <__assert_fail@plt+0x10ab8>
   22a04:	ldr	ip, [sp, #8]
   22a08:	mvn	r8, #4
   22a0c:	str	r8, [ip, #16]
   22a10:	b	22888 <__assert_fail@plt+0x10ac0>
   22a14:	mov	r7, r8
   22a18:	mov	r9, sl
   22a1c:	ldr	r6, [r9, #8]
   22a20:	mov	r4, #0
   22a24:	ldr	ip, [sp, #8]
   22a28:	tst	r6, #64	; 0x40
   22a2c:	str	r4, [ip, #16]
   22a30:	beq	22680 <__assert_fail@plt+0x108b8>
   22a34:	mov	r9, r4
   22a38:	b	22544 <__assert_fail@plt+0x1077c>
   22a3c:	mov	r1, sl
   22a40:	bl	21d6c <__assert_fail@plt+0xffa4>
   22a44:	mov	r8, r0
   22a48:	b	22888 <__assert_fail@plt+0x10ac0>
   22a4c:	ldr	r3, [sp, #24]
   22a50:	ldr	r0, [sp, #20]
   22a54:	add	r3, r3, #50	; 0x32
   22a58:	str	r3, [sp, #24]
   22a5c:	mov	r1, r3
   22a60:	bl	17104 <__assert_fail@plt+0x533c>
   22a64:	cmp	r0, #0
   22a68:	beq	22db0 <__assert_fail@plt+0x10fe8>
   22a6c:	add	r4, r4, #1
   22a70:	strb	r6, [r0, r8]
   22a74:	str	r0, [sp, #20]
   22a78:	b	22544 <__assert_fail@plt+0x1077c>
   22a7c:	tst	r3, #8
   22a80:	bne	2292c <__assert_fail@plt+0x10b64>
   22a84:	ldr	ip, [sp, #8]
   22a88:	mvn	r8, #2
   22a8c:	str	r8, [ip, #16]
   22a90:	b	22888 <__assert_fail@plt+0x10ac0>
   22a94:	add	r7, sl, r7, lsl #4
   22a98:	ldr	r3, [r7, #8]
   22a9c:	tst	r3, #7
   22aa0:	beq	22b50 <__assert_fail@plt+0x10d88>
   22aa4:	ldr	ip, [sp, #20]
   22aa8:	cmp	ip, #0
   22aac:	beq	22d80 <__assert_fail@plt+0x10fb8>
   22ab0:	ldr	r3, [sp, #12]
   22ab4:	ldr	ip, [sp, #20]
   22ab8:	strb	r3, [ip, r4]
   22abc:	ldr	r0, [sp, #20]
   22ac0:	bl	1fa1c <__assert_fail@plt+0xdc54>
   22ac4:	ldr	ip, [sp, #20]
   22ac8:	ldrb	r3, [ip]
   22acc:	cmp	r3, #34	; 0x22
   22ad0:	movne	r4, ip
   22ad4:	beq	22d2c <__assert_fail@plt+0x10f64>
   22ad8:	ldr	ip, [sp, #8]
   22adc:	mov	r3, r4
   22ae0:	ldr	r2, [r7, #8]
   22ae4:	add	r0, ip, #20
   22ae8:	add	r1, ip, #24
   22aec:	bl	21718 <__assert_fail@plt+0xf950>
   22af0:	cmp	r0, #0
   22af4:	bne	228dc <__assert_fail@plt+0x10b14>
   22af8:	ldr	r0, [sp, #20]
   22afc:	bl	1716c <__assert_fail@plt+0x53a4>
   22b00:	ldr	ip, [sp, #8]
   22b04:	ldr	r8, [ip, #16]
   22b08:	b	22888 <__assert_fail@plt+0x10ac0>
   22b0c:	cmp	r4, #98	; 0x62
   22b10:	mov	r8, r4
   22b14:	bls	22810 <__assert_fail@plt+0x10a48>
   22b18:	mov	r0, #150	; 0x96
   22b1c:	bl	170b4 <__assert_fail@plt+0x52ec>
   22b20:	cmp	r0, #0
   22b24:	str	r0, [sp, #20]
   22b28:	beq	22da0 <__assert_fail@plt+0x10fd8>
   22b2c:	mov	r2, r4
   22b30:	add	r1, sp, #44	; 0x2c
   22b34:	bl	11978 <memcpy@plt>
   22b38:	ldr	ip, [sp, #20]
   22b3c:	mov	r2, #150	; 0x96
   22b40:	add	r4, r4, #1
   22b44:	str	r2, [sp, #24]
   22b48:	strb	r6, [ip, r8]
   22b4c:	b	22544 <__assert_fail@plt+0x1077c>
   22b50:	ldr	ip, [sp, #8]
   22b54:	mvn	r8, #5
   22b58:	str	r8, [ip, #16]
   22b5c:	b	22888 <__assert_fail@plt+0x10ac0>
   22b60:	ands	r2, r6, #7
   22b64:	bne	22b88 <__assert_fail@plt+0x10dc0>
   22b68:	ldr	ip, [sp, #8]
   22b6c:	str	r2, [ip, #20]
   22b70:	b	22888 <__assert_fail@plt+0x10ac0>
   22b74:	mov	r3, #1
   22b78:	mov	r7, r4
   22b7c:	str	r3, [sp, #12]
   22b80:	mov	r9, #3
   22b84:	b	22544 <__assert_fail@plt+0x1077c>
   22b88:	tst	r6, #8
   22b8c:	beq	22a84 <__assert_fail@plt+0x10cbc>
   22b90:	ldr	ip, [sp, #8]
   22b94:	str	r3, [ip, #20]
   22b98:	b	22888 <__assert_fail@plt+0x10ac0>
   22b9c:	str	sl, [sp, #36]	; 0x24
   22ba0:	mov	r8, r0
   22ba4:	mov	sl, r0
   22ba8:	str	r4, [sp, #28]
   22bac:	str	fp, [sp, #32]
   22bb0:	mov	r0, r5
   22bb4:	bl	1199c <_IO_getc@plt>
   22bb8:	cmp	r0, #10
   22bbc:	mov	r4, r0
   22bc0:	moveq	fp, #1
   22bc4:	beq	22bd8 <__assert_fail@plt+0x10e10>
   22bc8:	cmn	r0, #1
   22bcc:	movne	fp, #0
   22bd0:	moveq	fp, #1
   22bd4:	moveq	r4, #10
   22bd8:	lsl	r6, r4, #1
   22bdc:	bic	r7, r4, #127	; 0x7f
   22be0:	cmp	sl, #3
   22be4:	ldrls	pc, [pc, sl, lsl #2]
   22be8:	b	22cb4 <__assert_fail@plt+0x10eec>
   22bec:	andeq	r2, r2, r8, ror ip
   22bf0:	andeq	r2, r2, r0, ror #24
   22bf4:	andeq	r2, r2, r8, asr #24
   22bf8:	strdeq	r2, [r2], -ip
   22bfc:	ldr	ip, [sp, #8]
   22c00:	add	r0, sp, #248	; 0xf8
   22c04:	add	r3, r0, r8
   22c08:	mov	r1, #0
   22c0c:	ldr	sl, [ip, #52]	; 0x34
   22c10:	strb	r1, [r3, #-104]	; 0xffffff98
   22c14:	cmp	sl, #0
   22c18:	bne	22c2c <__assert_fail@plt+0x10e64>
   22c1c:	b	22ce4 <__assert_fail@plt+0x10f1c>
   22c20:	ldr	sl, [sl]
   22c24:	cmp	sl, #0
   22c28:	beq	22ce4 <__assert_fail@plt+0x10f1c>
   22c2c:	add	r0, sl, #4
   22c30:	add	r1, sp, #144	; 0x90
   22c34:	bl	118dc <strcmp@plt>
   22c38:	cmp	r0, #0
   22c3c:	bne	22c20 <__assert_fail@plt+0x10e58>
   22c40:	mov	sl, r0
   22c44:	b	22be0 <__assert_fail@plt+0x10e18>
   22c48:	ldr	r3, [r9]
   22c4c:	ldrh	r3, [r3, r6]
   22c50:	tst	r3, #8192	; 0x2000
   22c54:	beq	22cb4 <__assert_fail@plt+0x10eec>
   22c58:	mov	sl, #0
   22c5c:	b	22be0 <__assert_fail@plt+0x10e18>
   22c60:	ldr	r3, [r9]
   22c64:	ldrh	r3, [r3, r6]
   22c68:	tst	r3, #8192	; 0x2000
   22c6c:	beq	22c9c <__assert_fail@plt+0x10ed4>
   22c70:	mov	sl, #3
   22c74:	b	22be0 <__assert_fail@plt+0x10e18>
   22c78:	cmp	r7, #0
   22c7c:	bne	22c90 <__assert_fail@plt+0x10ec8>
   22c80:	ldr	r3, [r9]
   22c84:	ldrh	r3, [r3, r6]
   22c88:	tst	r3, #8192	; 0x2000
   22c8c:	bne	22cb4 <__assert_fail@plt+0x10eec>
   22c90:	mov	sl, #1
   22c94:	mov	r8, #0
   22c98:	b	22be0 <__assert_fail@plt+0x10e18>
   22c9c:	cmp	r8, #98	; 0x62
   22ca0:	movhi	sl, #2
   22ca4:	addls	r0, sp, #248	; 0xf8
   22ca8:	addls	r2, r0, r8
   22cac:	addls	r8, r8, #1
   22cb0:	strbls	r4, [r2, #-104]	; 0xffffff98
   22cb4:	cmp	fp, #0
   22cb8:	beq	22bb0 <__assert_fail@plt+0x10de8>
   22cbc:	ldr	fp, [sp, #32]
   22cc0:	ldr	r4, [sp, #28]
   22cc4:	ldr	sl, [sp, #36]	; 0x24
   22cc8:	ldr	r3, [fp]
   22ccc:	mov	r7, r4
   22cd0:	mov	r4, #0
   22cd4:	add	r3, r3, #1
   22cd8:	mov	r9, r4
   22cdc:	str	r3, [fp]
   22ce0:	b	22544 <__assert_fail@plt+0x1077c>
   22ce4:	add	r0, r8, #8
   22ce8:	bl	170b4 <__assert_fail@plt+0x52ec>
   22cec:	subs	r3, r0, #0
   22cf0:	beq	22da0 <__assert_fail@plt+0x10fd8>
   22cf4:	add	r0, r3, #4
   22cf8:	add	r1, sp, #144	; 0x90
   22cfc:	str	r3, [sp, #4]
   22d00:	bl	11aa4 <strcpy@plt>
   22d04:	ldr	ip, [sp, #8]
   22d08:	mov	sl, #0
   22d0c:	ldr	r3, [sp, #4]
   22d10:	ldr	r2, [ip, #52]	; 0x34
   22d14:	str	r2, [r3]
   22d18:	str	r3, [ip, #52]	; 0x34
   22d1c:	b	22be0 <__assert_fail@plt+0x10e18>
   22d20:	mov	r4, r7
   22d24:	mov	r8, sl
   22d28:	b	2276c <__assert_fail@plt+0x109a4>
   22d2c:	ldr	ip, [sp, #20]
   22d30:	add	r4, ip, #1
   22d34:	ldrb	r3, [ip, #1]
   22d38:	cmp	r3, #0
   22d3c:	beq	22ad8 <__assert_fail@plt+0x10d10>
   22d40:	mov	r0, r4
   22d44:	bl	11bac <strlen@plt>
   22d48:	sub	r0, r0, #1
   22d4c:	ldrb	r3, [r4, r0]
   22d50:	cmp	r3, #34	; 0x22
   22d54:	moveq	r3, #0
   22d58:	strbeq	r3, [r4, r0]
   22d5c:	b	22ad8 <__assert_fail@plt+0x10d10>
   22d60:	ldr	ip, [sp, #8]
   22d64:	tst	r8, #128	; 0x80
   22d68:	mov	r7, r4
   22d6c:	mvn	r9, #0
   22d70:	mvnne	r3, #6
   22d74:	mvneq	r3, #1
   22d78:	str	r3, [ip, #16]
   22d7c:	b	22544 <__assert_fail@plt+0x1077c>
   22d80:	add	r0, sp, #248	; 0xf8
   22d84:	add	r4, r0, r4
   22d88:	add	r0, sp, #44	; 0x2c
   22d8c:	strb	ip, [r4, #-204]	; 0xffffff34
   22d90:	bl	170d0 <__assert_fail@plt+0x5308>
   22d94:	cmp	r0, #0
   22d98:	str	r0, [sp, #20]
   22d9c:	bne	22abc <__assert_fail@plt+0x10cf4>
   22da0:	ldr	ip, [sp, #8]
   22da4:	mvn	r8, #10
   22da8:	str	r8, [ip, #16]
   22dac:	b	22888 <__assert_fail@plt+0x10ac0>
   22db0:	ldr	r0, [sp, #20]
   22db4:	bl	1716c <__assert_fail@plt+0x53a4>
   22db8:	ldr	ip, [sp, #8]
   22dbc:	mvn	r3, #10
   22dc0:	mov	r8, r3
   22dc4:	str	r3, [ip, #16]
   22dc8:	b	22888 <__assert_fail@plt+0x10ac0>
   22dcc:	bl	119d8 <__stack_chk_fail@plt>
   22dd0:	cmp	r0, #0
   22dd4:	push	{r4, r5, r6, r7, lr}
   22dd8:	sub	sp, sp, #12
   22ddc:	beq	22df8 <__assert_fail@plt+0x11030>
   22de0:	cmp	r0, #1
   22de4:	beq	22e68 <__assert_fail@plt+0x110a0>
   22de8:	cmp	r0, #2
   22dec:	beq	22e54 <__assert_fail@plt+0x1108c>
   22df0:	add	sp, sp, #12
   22df4:	pop	{r4, r5, r6, r7, pc}
   22df8:	movw	r4, #44632	; 0xae58
   22dfc:	movt	r4, #3
   22e00:	mov	r0, #11
   22e04:	ldr	r5, [r4]
   22e08:	bl	21794 <__assert_fail@plt+0xf9cc>
   22e0c:	mov	r6, r0
   22e10:	mov	r0, #13
   22e14:	bl	21794 <__assert_fail@plt+0xf9cc>
   22e18:	mov	r7, r0
   22e1c:	mov	r0, #14
   22e20:	bl	21794 <__assert_fail@plt+0xf9cc>
   22e24:	str	r7, [sp]
   22e28:	mov	r3, r6
   22e2c:	mov	r1, #1
   22e30:	movw	r2, #32992	; 0x80e0
   22e34:	movt	r2, #2
   22e38:	str	r0, [sp, #4]
   22e3c:	mov	r0, r5
   22e40:	bl	11c9c <__fprintf_chk@plt>
   22e44:	ldr	r0, [r4]
   22e48:	add	sp, sp, #12
   22e4c:	pop	{r4, r5, r6, r7, lr}
   22e50:	b	11930 <fflush@plt>
   22e54:	mov	r0, #41	; 0x29
   22e58:	bl	21794 <__assert_fail@plt+0xf9cc>
   22e5c:	bl	11ae0 <puts@plt>
   22e60:	mov	r0, #0
   22e64:	bl	11b94 <exit@plt>
   22e68:	mov	r0, #40	; 0x28
   22e6c:	movw	r4, #44632	; 0xae58
   22e70:	bl	21794 <__assert_fail@plt+0xf9cc>
   22e74:	movt	r4, #3
   22e78:	ldr	r1, [r4]
   22e7c:	mov	r5, r0
   22e80:	bl	11d74 <fputs@plt>
   22e84:	ldrb	r3, [r5]
   22e88:	cmp	r3, #0
   22e8c:	beq	22eb0 <__assert_fail@plt+0x110e8>
   22e90:	mov	r0, r5
   22e94:	bl	11bac <strlen@plt>
   22e98:	ldrb	r3, [r5, r0]
   22e9c:	cmp	r3, #10
   22ea0:	beq	22eb0 <__assert_fail@plt+0x110e8>
   22ea4:	ldr	r1, [r4]
   22ea8:	mov	r0, #10
   22eac:	bl	11a74 <_IO_putc@plt>
   22eb0:	mov	r0, #2
   22eb4:	bl	11b94 <exit@plt>
   22eb8:	movw	r3, #44980	; 0xafb4
   22ebc:	movt	r3, #3
   22ec0:	str	r0, [r3]
   22ec4:	bx	lr
   22ec8:	push	{r4, lr}
   22ecc:	mov	r4, r0
   22ed0:	ldr	r0, [r0]
   22ed4:	cmp	r0, #2
   22ed8:	cmnne	r0, #1
   22edc:	beq	22ee4 <__assert_fail@plt+0x1111c>
   22ee0:	bl	11d98 <close@plt>
   22ee4:	mov	r0, r4
   22ee8:	bl	1716c <__assert_fail@plt+0x53a4>
   22eec:	movw	r3, #44620	; 0xae4c
   22ef0:	movt	r3, #3
   22ef4:	mvn	r2, #0
   22ef8:	mov	r0, #0
   22efc:	str	r2, [r3]
   22f00:	pop	{r4, pc}
   22f04:	push	{r4, r5, r6, r7, r8, r9, lr}
   22f08:	movw	r7, #44984	; 0xafb8
   22f0c:	movt	r7, #3
   22f10:	mov	r5, r0
   22f14:	sub	sp, sp, #28
   22f18:	mov	r6, r1
   22f1c:	ldr	r0, [r7]
   22f20:	cmp	r0, #0
   22f24:	beq	22f5c <__assert_fail@plt+0x11194>
   22f28:	movw	r2, #44632	; 0xae58
   22f2c:	movt	r2, #3
   22f30:	ldr	r3, [r2]
   22f34:	cmp	r0, r3
   22f38:	beq	22f54 <__assert_fail@plt+0x1118c>
   22f3c:	movw	r2, #44644	; 0xae64
   22f40:	movt	r2, #3
   22f44:	ldr	r3, [r2]
   22f48:	cmp	r0, r3
   22f4c:	beq	22f54 <__assert_fail@plt+0x1118c>
   22f50:	bl	11cc0 <fclose@plt>
   22f54:	mov	r3, #0
   22f58:	str	r3, [r7]
   22f5c:	cmp	r5, #0
   22f60:	beq	22f90 <__assert_fail@plt+0x111c8>
   22f64:	ldrb	r3, [r5]
   22f68:	cmp	r3, #45	; 0x2d
   22f6c:	bne	2303c <__assert_fail@plt+0x11274>
   22f70:	ldrb	r3, [r5, #1]
   22f74:	cmp	r3, #0
   22f78:	bne	2303c <__assert_fail@plt+0x11274>
   22f7c:	movw	r3, #44632	; 0xae58
   22f80:	movt	r3, #3
   22f84:	ldr	r0, [r3]
   22f88:	bl	11c84 <fileno@plt>
   22f8c:	mov	r6, r0
   22f90:	mov	r8, #0
   22f94:	mov	r0, #20
   22f98:	movw	r4, #44620	; 0xae4c
   22f9c:	bl	170bc <__assert_fail@plt+0x52f4>
   22fa0:	movw	r3, #11976	; 0x2ec8
   22fa4:	movt	r3, #2
   22fa8:	str	r3, [sp, #20]
   22fac:	add	r3, sp, #24
   22fb0:	mov	lr, #0
   22fb4:	str	lr, [sp, #16]
   22fb8:	movt	r4, #3
   22fbc:	add	r2, sp, #8
   22fc0:	str	lr, [sp, #8]
   22fc4:	mov	ip, r0
   22fc8:	ldmdb	r3, {r0, r1}
   22fcc:	movw	r3, #13732	; 0x35a4
   22fd0:	movt	r3, #2
   22fd4:	str	r3, [sp, #12]
   22fd8:	stm	sp, {r0, r1}
   22fdc:	mov	r0, ip
   22fe0:	str	r6, [r4]
   22fe4:	movw	r1, #23376	; 0x5b50
   22fe8:	ldm	r2, {r2, r3}
   22fec:	movt	r1, #2
   22ff0:	str	r8, [ip, #8]
   22ff4:	str	r6, [ip]
   22ff8:	strb	lr, [ip, #16]
   22ffc:	str	lr, [ip, #4]
   23000:	str	lr, [ip, #12]
   23004:	bl	11c90 <fopencookie@plt>
   23008:	subs	r4, r0, #0
   2300c:	beq	231b4 <__assert_fail@plt+0x113ec>
   23010:	mov	r1, #0
   23014:	mov	r0, r4
   23018:	mov	r3, r1
   2301c:	mov	r2, #1
   23020:	bl	11c24 <setvbuf@plt>
   23024:	mov	r3, #0
   23028:	str	r4, [r7]
   2302c:	str	r8, [r7, #4]
   23030:	str	r3, [r7, #8]
   23034:	add	sp, sp, #28
   23038:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2303c:	movw	r1, #33092	; 0x8144
   23040:	mov	r0, r5
   23044:	movt	r1, #2
   23048:	mov	r2, #9
   2304c:	bl	11d80 <strncmp@plt>
   23050:	subs	r4, r0, #0
   23054:	bne	23148 <__assert_fail@plt+0x11380>
   23058:	ldrb	r3, [r5, #9]
   2305c:	cmp	r3, #0
   23060:	beq	23148 <__assert_fail@plt+0x11380>
   23064:	adds	r5, r5, #9
   23068:	beq	231ec <__assert_fail@plt+0x11424>
   2306c:	mov	r0, r5
   23070:	bl	11bac <strlen@plt>
   23074:	add	r0, r0, #20
   23078:	bl	170bc <__assert_fail@plt+0x52f4>
   2307c:	mov	r1, r5
   23080:	mov	r6, r0
   23084:	add	r0, r0, #16
   23088:	bl	11aa4 <strcpy@plt>
   2308c:	mov	r2, #1
   23090:	mvn	r3, #0
   23094:	str	r4, [r6, #4]
   23098:	str	r4, [r6, #12]
   2309c:	mov	r8, r2
   230a0:	mov	r4, r3
   230a4:	str	r2, [r6, #8]
   230a8:	str	r3, [r6]
   230ac:	add	r9, sp, #8
   230b0:	movw	r3, #44620	; 0xae4c
   230b4:	movt	r3, #3
   230b8:	mov	r1, #0
   230bc:	mov	r2, #16
   230c0:	mov	r0, r9
   230c4:	str	r4, [r3]
   230c8:	bl	11c3c <memset@plt>
   230cc:	add	r2, sp, #24
   230d0:	movw	r3, #11976	; 0x2ec8
   230d4:	movt	r3, #2
   230d8:	str	r3, [sp, #20]
   230dc:	ldmdb	r2, {r0, r1}
   230e0:	movw	r3, #13732	; 0x35a4
   230e4:	movt	r3, #2
   230e8:	str	r3, [sp, #12]
   230ec:	ldm	r9, {r2, r3}
   230f0:	stm	sp, {r0, r1}
   230f4:	mov	r0, r6
   230f8:	movw	r1, #23376	; 0x5b50
   230fc:	movt	r1, #2
   23100:	bl	11c90 <fopencookie@plt>
   23104:	subs	r4, r0, #0
   23108:	bne	23010 <__assert_fail@plt+0x11248>
   2310c:	bl	11bf4 <__errno_location@plt>
   23110:	movw	r4, #44632	; 0xae58
   23114:	movt	r4, #3
   23118:	ldr	r6, [r4]
   2311c:	ldr	r0, [r0]
   23120:	bl	11b10 <strerror@plt>
   23124:	movw	r2, #33012	; 0x80f4
   23128:	mov	r3, r5
   2312c:	mov	r1, #1
   23130:	movt	r2, #2
   23134:	str	r0, [sp]
   23138:	mov	r0, r6
   2313c:	bl	11c9c <__fprintf_chk@plt>
   23140:	ldr	r4, [r4]
   23144:	b	23024 <__assert_fail@plt+0x1125c>
   23148:	mov	r0, r5
   2314c:	bl	11bac <strlen@plt>
   23150:	add	r0, r0, #20
   23154:	bl	170bc <__assert_fail@plt+0x52f4>
   23158:	mov	r1, r5
   2315c:	mov	r6, r0
   23160:	add	r0, r0, #16
   23164:	bl	11aa4 <strcpy@plt>
   23168:	mov	r3, #0
   2316c:	str	r3, [r6, #4]
   23170:	str	r3, [r6, #12]
   23174:	str	r3, [r6, #8]
   23178:	b	2318c <__assert_fail@plt+0x113c4>
   2317c:	bl	11bf4 <__errno_location@plt>
   23180:	ldr	r3, [r0]
   23184:	cmp	r3, #4
   23188:	bne	231ac <__assert_fail@plt+0x113e4>
   2318c:	mov	r0, r5
   23190:	movw	r1, #1089	; 0x441
   23194:	movw	r2, #438	; 0x1b6
   23198:	bl	11ac8 <open64@plt>
   2319c:	cmn	r0, #1
   231a0:	mov	r4, r0
   231a4:	str	r0, [r6]
   231a8:	beq	2317c <__assert_fail@plt+0x113b4>
   231ac:	mov	r8, #0
   231b0:	b	230ac <__assert_fail@plt+0x112e4>
   231b4:	bl	11bf4 <__errno_location@plt>
   231b8:	movw	r4, #44632	; 0xae58
   231bc:	movt	r4, #3
   231c0:	ldr	r5, [r4]
   231c4:	ldr	r0, [r0]
   231c8:	bl	11b10 <strerror@plt>
   231cc:	mov	r3, r6
   231d0:	movw	r2, #33048	; 0x8118
   231d4:	mov	r1, #1
   231d8:	movt	r2, #2
   231dc:	str	r0, [sp]
   231e0:	mov	r0, r5
   231e4:	bl	11c9c <__fprintf_chk@plt>
   231e8:	b	23140 <__assert_fail@plt+0x11378>
   231ec:	mov	r8, #1
   231f0:	b	22f94 <__assert_fail@plt+0x111cc>
   231f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   231f8:	movw	r4, #44984	; 0xafb8
   231fc:	movt	r4, #3
   23200:	movw	r7, #44624	; 0xae50
   23204:	movt	r7, #3
   23208:	mov	r6, r0
   2320c:	ldr	r3, [r4]
   23210:	sub	sp, sp, #36	; 0x24
   23214:	ldr	r0, [r7]
   23218:	mov	r5, r1
   2321c:	cmp	r3, #0
   23220:	mov	r9, r2
   23224:	str	r0, [sp, #28]
   23228:	beq	2350c <__assert_fail@plt+0x11744>
   2322c:	ldr	r3, [r4, #8]
   23230:	movw	r8, #44984	; 0xafb8
   23234:	movt	r8, #3
   23238:	cmp	r3, #0
   2323c:	beq	233e4 <__assert_fail@plt+0x1161c>
   23240:	cmp	r6, #1
   23244:	moveq	r3, #0
   23248:	streq	r3, [r8, #8]
   2324c:	beq	2338c <__assert_fail@plt+0x115c4>
   23250:	mov	r0, #10
   23254:	ldr	r1, [r8]
   23258:	bl	11a74 <_IO_putc@plt>
   2325c:	mov	r3, #0
   23260:	str	r3, [r8, #8]
   23264:	ldr	r3, [r4, #12]
   23268:	movw	r8, #44984	; 0xafb8
   2326c:	movt	r8, #3
   23270:	cmp	r3, #0
   23274:	bne	23400 <__assert_fail@plt+0x11638>
   23278:	ldr	r3, [r4, #16]
   2327c:	movw	r1, #44984	; 0xafb8
   23280:	movt	r1, #3
   23284:	cmp	r3, #0
   23288:	bne	23298 <__assert_fail@plt+0x114d0>
   2328c:	ldr	r3, [r1, #4]
   23290:	cmp	r3, #0
   23294:	beq	232a4 <__assert_fail@plt+0x114dc>
   23298:	ldr	r0, [pc, #768]	; 235a0 <__assert_fail@plt+0x117d8>
   2329c:	ldr	r1, [r4]
   232a0:	bl	11d74 <fputs@plt>
   232a4:	ldr	r2, [r4, #100]	; 0x64
   232a8:	movw	r3, #44984	; 0xafb8
   232ac:	movt	r3, #3
   232b0:	cmp	r2, #0
   232b4:	beq	233f0 <__assert_fail@plt+0x11628>
   232b8:	ldr	r8, [r4, #104]	; 0x68
   232bc:	movw	r3, #44984	; 0xafb8
   232c0:	movt	r3, #3
   232c4:	cmp	r8, #0
   232c8:	beq	234e8 <__assert_fail@plt+0x11720>
   232cc:	ldr	sl, [r3]
   232d0:	bl	11b88 <getpid@plt>
   232d4:	mov	fp, r0
   232d8:	blx	r8
   232dc:	movw	r2, #33164	; 0x818c
   232e0:	mov	r3, fp
   232e4:	mov	r1, #1
   232e8:	movt	r2, #2
   232ec:	str	r0, [sp]
   232f0:	mov	r0, sl
   232f4:	bl	11c9c <__fprintf_chk@plt>
   232f8:	ldr	r3, [r4, #12]
   232fc:	movw	r1, #44984	; 0xafb8
   23300:	movt	r1, #3
   23304:	cmp	r3, #0
   23308:	beq	23318 <__assert_fail@plt+0x11550>
   2330c:	ldr	r3, [r1, #4]
   23310:	cmp	r3, #0
   23314:	beq	23324 <__assert_fail@plt+0x1155c>
   23318:	mov	r0, #58	; 0x3a
   2331c:	ldr	r1, [r4]
   23320:	bl	11a74 <_IO_putc@plt>
   23324:	cmp	r5, #0
   23328:	beq	2333c <__assert_fail@plt+0x11574>
   2332c:	ldrb	r3, [r5]
   23330:	cmp	r3, #8
   23334:	addeq	r5, r5, #1
   23338:	beq	23348 <__assert_fail@plt+0x11580>
   2333c:	mov	r0, #32
   23340:	ldr	r1, [r4]
   23344:	bl	11a74 <_IO_putc@plt>
   23348:	cmp	r6, #7
   2334c:	ldrls	pc, [pc, r6, lsl #2]
   23350:	b	23374 <__assert_fail@plt+0x115ac>
   23354:	andeq	r3, r2, ip, lsl #7
   23358:	andeq	r3, r2, ip, lsl #7
   2335c:	andeq	r3, r2, ip, lsl #7
   23360:	andeq	r3, r2, ip, lsl #7
   23364:	andeq	r3, r2, ip, lsl #7
   23368:	muleq	r2, r4, r4
   2336c:			; <UNDEFINED> instruction: 0x000234b0
   23370:	andeq	r3, r2, ip, asr #9
   23374:	movw	r2, #33216	; 0x81c0
   23378:	ldr	r0, [r4]
   2337c:	movt	r2, #2
   23380:	mov	r1, #1
   23384:	mov	r3, r6
   23388:	bl	11c9c <__fprintf_chk@plt>
   2338c:	cmp	r5, #0
   23390:	beq	233bc <__assert_fail@plt+0x115f4>
   23394:	mov	r3, r9
   23398:	ldr	r0, [r4]
   2339c:	mov	r1, #1
   233a0:	mov	r2, r5
   233a4:	bl	11b28 <__vfprintf_chk@plt>
   233a8:	ldrb	r3, [r5]
   233ac:	movw	r8, #44984	; 0xafb8
   233b0:	movt	r8, #3
   233b4:	cmp	r3, #0
   233b8:	bne	23474 <__assert_fail@plt+0x116ac>
   233bc:	cmp	r6, #5
   233c0:	beq	23548 <__assert_fail@plt+0x11780>
   233c4:	cmp	r6, #6
   233c8:	beq	23568 <__assert_fail@plt+0x117a0>
   233cc:	ldr	r2, [sp, #28]
   233d0:	ldr	r3, [r7]
   233d4:	cmp	r2, r3
   233d8:	bne	23564 <__assert_fail@plt+0x1179c>
   233dc:	add	sp, sp, #36	; 0x24
   233e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   233e4:	cmp	r6, #1
   233e8:	bne	23264 <__assert_fail@plt+0x1149c>
   233ec:	b	2338c <__assert_fail@plt+0x115c4>
   233f0:	ldr	r3, [r3, #4]
   233f4:	cmp	r3, #0
   233f8:	beq	232f8 <__assert_fail@plt+0x11530>
   233fc:	b	232b8 <__assert_fail@plt+0x114f0>
   23400:	ldr	r0, [r8, #4]
   23404:	cmp	r0, #0
   23408:	bne	23278 <__assert_fail@plt+0x114b0>
   2340c:	bl	11990 <time@plt>
   23410:	add	r3, sp, #32
   23414:	str	r0, [r3, #-8]!
   23418:	mov	r0, r3
   2341c:	bl	11b34 <localtime@plt>
   23420:	movw	r2, #33132	; 0x816c
   23424:	movt	r2, #2
   23428:	ldr	r1, [r0, #16]
   2342c:	mov	ip, r0
   23430:	ldr	r3, [r0, #20]
   23434:	add	r1, r1, #1
   23438:	str	r1, [sp]
   2343c:	ldr	lr, [r0, #12]
   23440:	add	r3, r3, #1888	; 0x760
   23444:	ldr	r0, [r8]
   23448:	add	r3, r3, #12
   2344c:	mov	r1, #1
   23450:	str	lr, [sp, #4]
   23454:	ldr	lr, [ip, #8]
   23458:	str	lr, [sp, #8]
   2345c:	ldr	lr, [ip, #4]
   23460:	str	lr, [sp, #12]
   23464:	ldr	ip, [ip]
   23468:	str	ip, [sp, #16]
   2346c:	bl	11c9c <__fprintf_chk@plt>
   23470:	b	23278 <__assert_fail@plt+0x114b0>
   23474:	mov	r0, r5
   23478:	bl	11bac <strlen@plt>
   2347c:	add	r0, r5, r0
   23480:	ldrb	r3, [r0, #-1]
   23484:	cmp	r3, #10
   23488:	movne	r3, #1
   2348c:	strne	r3, [r8, #8]
   23490:	b	233bc <__assert_fail@plt+0x115f4>
   23494:	movw	r0, #33184	; 0x81a0
   23498:	mov	r1, #1
   2349c:	mov	r2, #7
   234a0:	ldr	r3, [r4]
   234a4:	movt	r0, #2
   234a8:	bl	11a80 <fwrite@plt>
   234ac:	b	2338c <__assert_fail@plt+0x115c4>
   234b0:	movw	r0, #33192	; 0x81a8
   234b4:	mov	r1, #1
   234b8:	mov	r2, #13
   234bc:	ldr	r3, [r4]
   234c0:	movt	r0, #2
   234c4:	bl	11a80 <fwrite@plt>
   234c8:	b	2338c <__assert_fail@plt+0x115c4>
   234cc:	movw	r0, #33208	; 0x81b8
   234d0:	mov	r1, #1
   234d4:	mov	r2, #5
   234d8:	ldr	r3, [r4]
   234dc:	movt	r0, #2
   234e0:	bl	11a80 <fwrite@plt>
   234e4:	b	2338c <__assert_fail@plt+0x115c4>
   234e8:	ldr	r8, [r3]
   234ec:	bl	11b88 <getpid@plt>
   234f0:	movw	r2, #33176	; 0x8198
   234f4:	mov	r1, #1
   234f8:	movt	r2, #2
   234fc:	mov	r3, r0
   23500:	mov	r0, r8
   23504:	bl	11c9c <__fprintf_chk@plt>
   23508:	b	232f8 <__assert_fail@plt+0x11530>
   2350c:	movw	r0, #33104	; 0x8150
   23510:	mvn	r1, #0
   23514:	movt	r0, #2
   23518:	bl	22f04 <__assert_fail@plt+0x1113c>
   2351c:	ldr	r3, [r4]
   23520:	cmp	r3, #0
   23524:	bne	2322c <__assert_fail@plt+0x11464>
   23528:	movw	r0, #33108	; 0x8154
   2352c:	movw	r1, #33120	; 0x8160
   23530:	movw	r3, #33004	; 0x80ec
   23534:	movt	r0, #2
   23538:	movt	r1, #2
   2353c:	movw	r2, #451	; 0x1c3
   23540:	movt	r3, #2
   23544:	bl	11dc8 <__assert_fail@plt>
   23548:	ldr	r2, [r4, #8]
   2354c:	movw	r3, #44984	; 0xafb8
   23550:	movt	r3, #3
   23554:	cmp	r2, #0
   23558:	bne	23580 <__assert_fail@plt+0x117b8>
   2355c:	mov	r0, #2
   23560:	bl	11b94 <exit@plt>
   23564:	bl	119d8 <__stack_chk_fail@plt>
   23568:	ldr	r2, [r4, #8]
   2356c:	movw	r3, #44984	; 0xafb8
   23570:	movt	r3, #3
   23574:	cmp	r2, #0
   23578:	bne	23590 <__assert_fail@plt+0x117c8>
   2357c:	bl	11d8c <abort@plt>
   23580:	ldr	r1, [r3]
   23584:	mov	r0, #10
   23588:	bl	11a74 <_IO_putc@plt>
   2358c:	b	2355c <__assert_fail@plt+0x11794>
   23590:	ldr	r1, [r3]
   23594:	mov	r0, #10
   23598:	bl	11a74 <_IO_putc@plt>
   2359c:	b	2357c <__assert_fail@plt+0x117b4>
   235a0:	andeq	sl, r3, ip, asr #31
   235a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   235a8:	movw	r8, #44624	; 0xae50
   235ac:	movt	r8, #3
   235b0:	ldr	r3, [r0, #8]
   235b4:	mov	sl, r2
   235b8:	sub	sp, sp, #128	; 0x80
   235bc:	ldr	r2, [r8]
   235c0:	cmp	r3, #0
   235c4:	mov	r7, r0
   235c8:	mov	r5, r1
   235cc:	ldr	r6, [r0]
   235d0:	str	r2, [sp, #124]	; 0x7c
   235d4:	bne	236a4 <__assert_fail@plt+0x118dc>
   235d8:	movw	r9, #44620	; 0xae4c
   235dc:	cmn	r6, #1
   235e0:	movt	r9, #3
   235e4:	str	r6, [r9]
   235e8:	bne	23758 <__assert_fail@plt+0x11990>
   235ec:	movw	r3, #44984	; 0xafb8
   235f0:	movt	r3, #3
   235f4:	ldr	r3, [r3, #108]	; 0x6c
   235f8:	cmp	r3, #0
   235fc:	bne	23660 <__assert_fail@plt+0x11898>
   23600:	ldr	r3, [r7]
   23604:	cmn	r3, #1
   23608:	beq	23660 <__assert_fail@plt+0x11898>
   2360c:	movw	r4, #44632	; 0xae58
   23610:	movt	r4, #3
   23614:	ldr	r0, [r4]
   23618:	bl	11c84 <fileno@plt>
   2361c:	bl	11d68 <isatty@plt>
   23620:	cmp	r0, #0
   23624:	beq	23660 <__assert_fail@plt+0x11898>
   23628:	ldrb	r3, [r7, #16]
   2362c:	cmp	r3, #0
   23630:	beq	237a4 <__assert_fail@plt+0x119dc>
   23634:	bl	11bf4 <__errno_location@plt>
   23638:	ldr	r4, [r4]
   2363c:	ldr	r0, [r0]
   23640:	bl	11b10 <strerror@plt>
   23644:	movw	r2, #33316	; 0x8224
   23648:	mov	r1, #1
   2364c:	movt	r2, #2
   23650:	add	r3, r7, #16
   23654:	str	r0, [sp]
   23658:	mov	r0, r4
   2365c:	bl	11c9c <__fprintf_chk@plt>
   23660:	ldr	r3, [r7, #12]
   23664:	cmp	r3, #0
   23668:	beq	23688 <__assert_fail@plt+0x118c0>
   2366c:	ldr	r0, [r7]
   23670:	cmn	r0, #1
   23674:	beq	23688 <__assert_fail@plt+0x118c0>
   23678:	bl	11d98 <close@plt>
   2367c:	mvn	r3, #0
   23680:	str	r3, [r7]
   23684:	str	r3, [r9]
   23688:	ldr	r2, [sp, #124]	; 0x7c
   2368c:	mov	r0, sl
   23690:	ldr	r3, [r8]
   23694:	cmp	r2, r3
   23698:	bne	23908 <__assert_fail@plt+0x11b40>
   2369c:	add	sp, sp, #128	; 0x80
   236a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   236a4:	cmn	r6, #1
   236a8:	movwne	r9, #44620	; 0xae4c
   236ac:	movtne	r9, #3
   236b0:	strne	r6, [r9]
   236b4:	bne	23758 <__assert_fail@plt+0x11990>
   236b8:	mov	r6, #0
   236bc:	mov	r0, #1
   236c0:	str	r6, [r7, #12]
   236c4:	mov	r2, r6
   236c8:	mov	r1, r0
   236cc:	bl	11d38 <socket@plt>
   236d0:	cmn	r0, #1
   236d4:	mov	r4, r0
   236d8:	str	r0, [r7]
   236dc:	beq	237d8 <__assert_fail@plt+0x11a10>
   236e0:	add	r9, r7, #16
   236e4:	mov	r1, r6
   236e8:	mov	r2, #110	; 0x6e
   236ec:	add	r0, sp, #12
   236f0:	bl	11c3c <memset@plt>
   236f4:	mov	r1, r9
   236f8:	mov	r2, #107	; 0x6b
   236fc:	add	r0, sp, #14
   23700:	mov	r6, #1
   23704:	strh	r6, [sp, #12]
   23708:	bl	11c48 <strncpy@plt>
   2370c:	add	r0, sp, #14
   23710:	bl	11bac <strlen@plt>
   23714:	add	r1, sp, #12
   23718:	add	r2, r0, #2
   2371c:	mov	r0, r4
   23720:	bl	11da4 <connect@plt>
   23724:	cmn	r0, #1
   23728:	beq	2383c <__assert_fail@plt+0x11a74>
   2372c:	ldr	r3, [r7]
   23730:	cmn	r3, #1
   23734:	beq	2390c <__assert_fail@plt+0x11b44>
   23738:	movw	r9, #44620	; 0xae4c
   2373c:	movt	r9, #3
   23740:	mov	r6, r3
   23744:	mov	r2, #0
   23748:	str	r3, [r9]
   2374c:	mov	r3, #1
   23750:	str	r2, [r7, #4]
   23754:	str	r3, [r7, #12]
   23758:	cmp	sl, #0
   2375c:	beq	23688 <__assert_fail@plt+0x118c0>
   23760:	mov	r4, sl
   23764:	b	23770 <__assert_fail@plt+0x119a8>
   23768:	cmp	r4, #0
   2376c:	beq	23688 <__assert_fail@plt+0x118c0>
   23770:	mov	r1, r5
   23774:	mov	r2, r4
   23778:	mov	r0, r6
   2377c:	bl	11c78 <write@plt>
   23780:	cmp	r0, #0
   23784:	rsbge	r4, r0, r4
   23788:	addge	r5, r5, r0
   2378c:	bge	23768 <__assert_fail@plt+0x119a0>
   23790:	bl	11bf4 <__errno_location@plt>
   23794:	ldr	r3, [r0]
   23798:	cmp	r3, #4
   2379c:	bne	235ec <__assert_fail@plt+0x11824>
   237a0:	b	23768 <__assert_fail@plt+0x119a0>
   237a4:	bl	11bf4 <__errno_location@plt>
   237a8:	ldr	r4, [r4]
   237ac:	ldr	r5, [r7]
   237b0:	ldr	r0, [r0]
   237b4:	bl	11b10 <strerror@plt>
   237b8:	mov	r3, r5
   237bc:	movw	r2, #33344	; 0x8240
   237c0:	mov	r1, #1
   237c4:	movt	r2, #2
   237c8:	str	r0, [sp]
   237cc:	mov	r0, r4
   237d0:	bl	11c9c <__fprintf_chk@plt>
   237d4:	b	23660 <__assert_fail@plt+0x11898>
   237d8:	ldr	r3, [r7, #4]
   237dc:	cmp	r3, r6
   237e0:	beq	23820 <__assert_fail@plt+0x11a58>
   237e4:	movw	r3, #44984	; 0xafb8
   237e8:	movt	r3, #3
   237ec:	ldr	r3, [r3, #108]	; 0x6c
   237f0:	cmp	r3, #0
   237f4:	bne	23834 <__assert_fail@plt+0x11a6c>
   237f8:	ldr	r2, [r7, #4]
   237fc:	cmp	r2, #0
   23800:	moveq	r2, #1
   23804:	streq	r2, [r7, #4]
   23808:	mvn	r2, #0
   2380c:	str	r2, [r7]
   23810:	movw	r9, #44620	; 0xae4c
   23814:	movt	r9, #3
   23818:	str	r2, [r9]
   2381c:	b	235f8 <__assert_fail@plt+0x11830>
   23820:	movw	r4, #44984	; 0xafb8
   23824:	movt	r4, #3
   23828:	ldr	r3, [r4, #108]	; 0x6c
   2382c:	cmp	r3, #0
   23830:	beq	23874 <__assert_fail@plt+0x11aac>
   23834:	ldr	r2, [r7]
   23838:	b	23810 <__assert_fail@plt+0x11a48>
   2383c:	ldr	r3, [r7, #4]
   23840:	movw	r4, #44984	; 0xafb8
   23844:	movt	r4, #3
   23848:	cmp	r3, #0
   2384c:	bne	2385c <__assert_fail@plt+0x11a94>
   23850:	ldr	r3, [r4, #108]	; 0x6c
   23854:	cmp	r3, #0
   23858:	beq	238bc <__assert_fail@plt+0x11af4>
   2385c:	ldr	r0, [r7]
   23860:	bl	11d98 <close@plt>
   23864:	mvn	r3, #0
   23868:	str	r3, [r7]
   2386c:	ldr	r3, [r4, #108]	; 0x6c
   23870:	b	237f0 <__assert_fail@plt+0x11a28>
   23874:	movw	r4, #44632	; 0xae58
   23878:	movt	r4, #3
   2387c:	ldr	r0, [r4]
   23880:	bl	11c84 <fileno@plt>
   23884:	bl	11d68 <isatty@plt>
   23888:	cmp	r0, #0
   2388c:	beq	2372c <__assert_fail@plt+0x11964>
   23890:	bl	11bf4 <__errno_location@plt>
   23894:	ldr	r4, [r4]
   23898:	ldr	r0, [r0]
   2389c:	bl	11b10 <strerror@plt>
   238a0:	movw	r2, #33244	; 0x81dc
   238a4:	mov	r1, #1
   238a8:	movt	r2, #2
   238ac:	mov	r3, r0
   238b0:	mov	r0, r4
   238b4:	bl	11c9c <__fprintf_chk@plt>
   238b8:	b	2372c <__assert_fail@plt+0x11964>
   238bc:	movw	r5, #44632	; 0xae58
   238c0:	movt	r5, #3
   238c4:	ldr	r0, [r5]
   238c8:	bl	11c84 <fileno@plt>
   238cc:	bl	11d68 <isatty@plt>
   238d0:	cmp	r0, #0
   238d4:	beq	2385c <__assert_fail@plt+0x11a94>
   238d8:	bl	11bf4 <__errno_location@plt>
   238dc:	ldr	r5, [r5]
   238e0:	ldr	r0, [r0]
   238e4:	bl	11b10 <strerror@plt>
   238e8:	mov	r1, r6
   238ec:	mov	r3, r9
   238f0:	movw	r2, #33288	; 0x8208
   238f4:	movt	r2, #2
   238f8:	str	r0, [sp]
   238fc:	mov	r0, r5
   23900:	bl	11c9c <__fprintf_chk@plt>
   23904:	b	2385c <__assert_fail@plt+0x11a94>
   23908:	bl	119d8 <__stack_chk_fail@plt>
   2390c:	movw	r4, #44984	; 0xafb8
   23910:	movt	r4, #3
   23914:	b	2386c <__assert_fail@plt+0x11aa4>
   23918:	push	{r1, r2, r3}
   2391c:	mov	r0, #6
   23920:	push	{r4, lr}
   23924:	movw	r4, #44624	; 0xae50
   23928:	movt	r4, #3
   2392c:	sub	sp, sp, #12
   23930:	add	r3, sp, #24
   23934:	movw	r1, #33388	; 0x826c
   23938:	ldr	ip, [r4]
   2393c:	movt	r1, #2
   23940:	mov	r2, r3
   23944:	str	r3, [sp]
   23948:	str	ip, [sp, #4]
   2394c:	bl	231f4 <__assert_fail@plt+0x1142c>
   23950:	ldr	r2, [sp, #4]
   23954:	ldr	r3, [r4]
   23958:	cmp	r2, r3
   2395c:	bne	23970 <__assert_fail@plt+0x11ba8>
   23960:	add	sp, sp, #12
   23964:	pop	{r4, lr}
   23968:	add	sp, sp, #12
   2396c:	bx	lr
   23970:	bl	119d8 <__stack_chk_fail@plt>
   23974:	cmp	r0, #0
   23978:	movw	r3, #44984	; 0xafb8
   2397c:	movt	r3, #3
   23980:	movne	r2, #0
   23984:	ldr	r0, [r3, #112]	; 0x70
   23988:	strne	r2, [r3, #112]	; 0x70
   2398c:	bx	lr
   23990:	movw	r3, #44984	; 0xafb8
   23994:	movt	r3, #3
   23998:	ldr	r2, [r3, #112]	; 0x70
   2399c:	add	r2, r2, #1
   239a0:	str	r2, [r3, #112]	; 0x70
   239a4:	bx	lr
   239a8:	movw	r3, #33104	; 0x8150
   239ac:	cmp	r0, #0
   239b0:	movt	r3, #2
   239b4:	mvn	r1, #0
   239b8:	moveq	r0, r3
   239bc:	b	22f04 <__assert_fail@plt+0x1113c>
   239c0:	mov	r1, r0
   239c4:	mov	r0, #0
   239c8:	b	22f04 <__assert_fail@plt+0x1113c>
   239cc:	movw	r3, #44984	; 0xafb8
   239d0:	movt	r3, #3
   239d4:	str	r0, [r3, #104]	; 0x68
   239d8:	bx	lr
   239dc:	cmp	r0, #0
   239e0:	push	{r3, r4, r5, lr}
   239e4:	movw	r4, #44984	; 0xafb8
   239e8:	mov	r5, r1
   239ec:	movt	r4, #3
   239f0:	beq	23a0c <__assert_fail@plt+0x11c44>
   239f4:	mov	r1, r0
   239f8:	mov	r2, #79	; 0x4f
   239fc:	add	r0, r4, #20
   23a00:	bl	11c48 <strncpy@plt>
   23a04:	mov	r3, #0
   23a08:	strb	r3, [r4, #99]	; 0x63
   23a0c:	and	r3, r5, #1
   23a10:	and	r2, r5, #2
   23a14:	str	r3, [r4, #16]
   23a18:	and	r3, r5, #4
   23a1c:	str	r2, [r4, #12]
   23a20:	and	r5, r5, #256	; 0x100
   23a24:	str	r3, [r4, #100]	; 0x64
   23a28:	str	r5, [r4, #108]	; 0x6c
   23a2c:	pop	{r3, r4, r5, pc}
   23a30:	cmp	r0, #0
   23a34:	beq	23a88 <__assert_fail@plt+0x11cc0>
   23a38:	movw	r3, #44984	; 0xafb8
   23a3c:	movt	r3, #3
   23a40:	ldr	r2, [r3, #16]
   23a44:	ldr	r1, [r3, #12]
   23a48:	adds	r2, r2, #0
   23a4c:	movne	r2, #1
   23a50:	cmp	r1, #0
   23a54:	str	r2, [r0]
   23a58:	orrne	r2, r2, #2
   23a5c:	strne	r2, [r0]
   23a60:	ldr	r2, [r3, #100]	; 0x64
   23a64:	ldr	r3, [r3, #108]	; 0x6c
   23a68:	cmp	r2, #0
   23a6c:	ldrne	r2, [r0]
   23a70:	orrne	r2, r2, #4
   23a74:	strne	r2, [r0]
   23a78:	cmp	r3, #0
   23a7c:	ldrne	r3, [r0]
   23a80:	orrne	r3, r3, #256	; 0x100
   23a84:	strne	r3, [r0]
   23a88:	ldr	r0, [pc]	; 23a90 <__assert_fail@plt+0x11cc8>
   23a8c:	bx	lr
   23a90:	andeq	sl, r3, ip, asr #31
   23a94:	movw	r3, #44984	; 0xafb8
   23a98:	movt	r3, #3
   23a9c:	push	{r4, lr}
   23aa0:	mov	r4, r0
   23aa4:	ldr	r0, [r3]
   23aa8:	cmp	r0, #0
   23aac:	beq	23ad0 <__assert_fail@plt+0x11d08>
   23ab0:	bl	11c84 <fileno@plt>
   23ab4:	subs	r2, r0, r4
   23ab8:	rsbs	r3, r2, #0
   23abc:	adcs	r3, r3, r2
   23ac0:	cmn	r0, #1
   23ac4:	moveq	r3, #0
   23ac8:	cmp	r3, #0
   23acc:	bne	23af4 <__assert_fail@plt+0x11d2c>
   23ad0:	movw	r3, #44620	; 0xae4c
   23ad4:	movt	r3, #3
   23ad8:	ldr	r3, [r3]
   23adc:	cmn	r3, #1
   23ae0:	beq	23aec <__assert_fail@plt+0x11d24>
   23ae4:	cmp	r4, r3
   23ae8:	beq	23af4 <__assert_fail@plt+0x11d2c>
   23aec:	mov	r0, #0
   23af0:	pop	{r4, pc}
   23af4:	mov	r0, #1
   23af8:	pop	{r4, pc}
   23afc:	movw	r3, #44984	; 0xafb8
   23b00:	movt	r3, #3
   23b04:	ldr	r0, [r3]
   23b08:	cmp	r0, #0
   23b0c:	movweq	r3, #44632	; 0xae58
   23b10:	movteq	r3, #3
   23b14:	ldreq	r0, [r3]
   23b18:	b	11c84 <fileno@plt>
   23b1c:	movw	r3, #44984	; 0xafb8
   23b20:	movt	r3, #3
   23b24:	ldr	r0, [r3]
   23b28:	cmp	r0, #0
   23b2c:	movweq	r3, #44632	; 0xae58
   23b30:	movteq	r3, #3
   23b34:	ldreq	r0, [r3]
   23b38:	bx	lr
   23b3c:	b	231f4 <__assert_fail@plt+0x1142c>
   23b40:	push	{r0, r1, r2, r3}
   23b44:	mov	r0, #2
   23b48:	push	{r4, lr}
   23b4c:	movw	r4, #44624	; 0xae50
   23b50:	movt	r4, #3
   23b54:	sub	sp, sp, #8
   23b58:	add	r3, sp, #20
   23b5c:	ldr	ip, [r4]
   23b60:	mov	r2, r3
   23b64:	ldr	r1, [sp, #16]
   23b68:	str	r3, [sp]
   23b6c:	str	ip, [sp, #4]
   23b70:	bl	231f4 <__assert_fail@plt+0x1142c>
   23b74:	ldr	r2, [sp, #4]
   23b78:	ldr	r3, [r4]
   23b7c:	cmp	r2, r3
   23b80:	bne	23b94 <__assert_fail@plt+0x11dcc>
   23b84:	add	sp, sp, #8
   23b88:	pop	{r4, lr}
   23b8c:	add	sp, sp, #16
   23b90:	bx	lr
   23b94:	bl	119d8 <__stack_chk_fail@plt>
   23b98:	push	{r0, r1, r2, r3}
   23b9c:	mov	r0, #4
   23ba0:	push	{r4, lr}
   23ba4:	movw	r4, #44624	; 0xae50
   23ba8:	movt	r4, #3
   23bac:	sub	sp, sp, #8
   23bb0:	add	r3, sp, #20
   23bb4:	ldr	ip, [r4]
   23bb8:	mov	r2, r3
   23bbc:	ldr	r1, [sp, #16]
   23bc0:	str	r3, [sp]
   23bc4:	str	ip, [sp, #4]
   23bc8:	bl	231f4 <__assert_fail@plt+0x1142c>
   23bcc:	movw	r3, #44984	; 0xafb8
   23bd0:	movt	r3, #3
   23bd4:	movw	r1, #29999	; 0x752f
   23bd8:	ldr	r2, [r3, #112]	; 0x70
   23bdc:	cmp	r2, r1
   23be0:	addle	r2, r2, #1
   23be4:	strle	r2, [r3, #112]	; 0x70
   23be8:	ldr	r2, [sp, #4]
   23bec:	ldr	r3, [r4]
   23bf0:	cmp	r2, r3
   23bf4:	bne	23c08 <__assert_fail@plt+0x11e40>
   23bf8:	add	sp, sp, #8
   23bfc:	pop	{r4, lr}
   23c00:	add	sp, sp, #16
   23c04:	bx	lr
   23c08:	bl	119d8 <__stack_chk_fail@plt>
   23c0c:	push	{r0, r1, r2, r3}
   23c10:	movw	r3, #44624	; 0xae50
   23c14:	movt	r3, #3
   23c18:	mov	r0, #5
   23c1c:	push	{lr}		; (str lr, [sp, #-4]!)
   23c20:	sub	sp, sp, #12
   23c24:	add	ip, sp, #20
   23c28:	ldr	r3, [r3]
   23c2c:	ldr	r1, [sp, #16]
   23c30:	mov	r2, ip
   23c34:	str	ip, [sp]
   23c38:	str	r3, [sp, #4]
   23c3c:	bl	231f4 <__assert_fail@plt+0x1142c>
   23c40:	bl	11d8c <abort@plt>
   23c44:	push	{r0, r1, r2, r3}
   23c48:	movw	r3, #44624	; 0xae50
   23c4c:	movt	r3, #3
   23c50:	mov	r0, #6
   23c54:	push	{lr}		; (str lr, [sp, #-4]!)
   23c58:	sub	sp, sp, #12
   23c5c:	add	ip, sp, #20
   23c60:	ldr	r3, [r3]
   23c64:	ldr	r1, [sp, #16]
   23c68:	mov	r2, ip
   23c6c:	str	ip, [sp]
   23c70:	str	r3, [sp, #4]
   23c74:	bl	231f4 <__assert_fail@plt+0x1142c>
   23c78:	bl	11d8c <abort@plt>
   23c7c:	push	{r0, r1, r2, r3}
   23c80:	mov	r0, #7
   23c84:	push	{r4, lr}
   23c88:	movw	r4, #44624	; 0xae50
   23c8c:	movt	r4, #3
   23c90:	sub	sp, sp, #8
   23c94:	add	r3, sp, #20
   23c98:	ldr	ip, [r4]
   23c9c:	mov	r2, r3
   23ca0:	ldr	r1, [sp, #16]
   23ca4:	str	r3, [sp]
   23ca8:	str	ip, [sp, #4]
   23cac:	bl	231f4 <__assert_fail@plt+0x1142c>
   23cb0:	ldr	r2, [sp, #4]
   23cb4:	ldr	r3, [r4]
   23cb8:	cmp	r2, r3
   23cbc:	bne	23cd0 <__assert_fail@plt+0x11f08>
   23cc0:	add	sp, sp, #8
   23cc4:	pop	{r4, lr}
   23cc8:	add	sp, sp, #16
   23ccc:	bx	lr
   23cd0:	bl	119d8 <__stack_chk_fail@plt>
   23cd4:	push	{r0, r1, r2, r3}
   23cd8:	push	{r4, lr}
   23cdc:	sub	sp, sp, #8
   23ce0:	movw	r4, #44624	; 0xae50
   23ce4:	movt	r4, #3
   23ce8:	ldr	r1, [sp, #16]
   23cec:	add	r3, sp, #20
   23cf0:	ldr	ip, [r4]
   23cf4:	adds	r0, r1, #0
   23cf8:	mov	r2, r3
   23cfc:	str	r3, [sp]
   23d00:	movne	r0, #1
   23d04:	str	ip, [sp, #4]
   23d08:	bl	231f4 <__assert_fail@plt+0x1142c>
   23d0c:	ldr	r2, [sp, #4]
   23d10:	ldr	r3, [r4]
   23d14:	cmp	r2, r3
   23d18:	bne	23d2c <__assert_fail@plt+0x11f64>
   23d1c:	add	sp, sp, #8
   23d20:	pop	{r4, lr}
   23d24:	add	sp, sp, #16
   23d28:	bx	lr
   23d2c:	bl	119d8 <__stack_chk_fail@plt>
   23d30:	push	{r4, r5, r6, lr}
   23d34:	subs	r6, r0, #0
   23d38:	mov	r4, r1
   23d3c:	mov	r5, r2
   23d40:	beq	23d50 <__assert_fail@plt+0x11f88>
   23d44:	ldrb	r3, [r6]
   23d48:	cmp	r3, #0
   23d4c:	bne	23db4 <__assert_fail@plt+0x11fec>
   23d50:	cmp	r5, #0
   23d54:	bne	23d70 <__assert_fail@plt+0x11fa8>
   23d58:	cmp	r6, #0
   23d5c:	popeq	{r4, r5, r6, pc}
   23d60:	movw	r0, #21648	; 0x5490
   23d64:	movt	r0, #2
   23d68:	pop	{r4, r5, r6, lr}
   23d6c:	b	23cd4 <__assert_fail@plt+0x11f0c>
   23d70:	movw	r0, #33424	; 0x8290
   23d74:	ldrb	r1, [r4]
   23d78:	movt	r0, #2
   23d7c:	bl	23cd4 <__assert_fail@plt+0x11f0c>
   23d80:	cmp	r5, #1
   23d84:	beq	23d58 <__assert_fail@plt+0x11f90>
   23d88:	add	r5, r4, r5
   23d8c:	sub	r5, r5, #1
   23d90:	ldrb	r1, [r4, #1]!
   23d94:	movw	r0, #33432	; 0x8298
   23d98:	movt	r0, #2
   23d9c:	bl	23cd4 <__assert_fail@plt+0x11f0c>
   23da0:	cmp	r4, r5
   23da4:	bne	23d90 <__assert_fail@plt+0x11fc8>
   23da8:	cmp	r6, #0
   23dac:	bne	23d60 <__assert_fail@plt+0x11f98>
   23db0:	pop	{r4, r5, r6, pc}
   23db4:	movw	r0, #33420	; 0x828c
   23db8:	mov	r1, r6
   23dbc:	movt	r0, #2
   23dc0:	bl	23c7c <__assert_fail@plt+0x11eb4>
   23dc4:	b	23d50 <__assert_fail@plt+0x11f88>
   23dc8:	push	{lr}		; (str lr, [sp, #-4]!)
   23dcc:	sub	sp, sp, #12
   23dd0:	mov	r3, r1
   23dd4:	movw	r1, #33388	; 0x826c
   23dd8:	str	r2, [sp]
   23ddc:	movt	r1, #2
   23de0:	mov	r2, r0
   23de4:	mov	r0, #6
   23de8:	bl	23918 <__assert_fail@plt+0x11b50>
   23dec:	bl	11d8c <abort@plt>
   23df0:	subs	r2, r1, #1
   23df4:	bxeq	lr
   23df8:	bcc	23fd0 <__assert_fail@plt+0x12208>
   23dfc:	cmp	r0, r1
   23e00:	bls	23fb4 <__assert_fail@plt+0x121ec>
   23e04:	tst	r1, r2
   23e08:	beq	23fc0 <__assert_fail@plt+0x121f8>
   23e0c:	clz	r3, r0
   23e10:	clz	r2, r1
   23e14:	sub	r3, r2, r3
   23e18:	rsbs	r3, r3, #31
   23e1c:	addne	r3, r3, r3, lsl #1
   23e20:	mov	r2, #0
   23e24:	addne	pc, pc, r3, lsl #2
   23e28:	nop	{0}
   23e2c:	cmp	r0, r1, lsl #31
   23e30:	adc	r2, r2, r2
   23e34:	subcs	r0, r0, r1, lsl #31
   23e38:	cmp	r0, r1, lsl #30
   23e3c:	adc	r2, r2, r2
   23e40:	subcs	r0, r0, r1, lsl #30
   23e44:	cmp	r0, r1, lsl #29
   23e48:	adc	r2, r2, r2
   23e4c:	subcs	r0, r0, r1, lsl #29
   23e50:	cmp	r0, r1, lsl #28
   23e54:	adc	r2, r2, r2
   23e58:	subcs	r0, r0, r1, lsl #28
   23e5c:	cmp	r0, r1, lsl #27
   23e60:	adc	r2, r2, r2
   23e64:	subcs	r0, r0, r1, lsl #27
   23e68:	cmp	r0, r1, lsl #26
   23e6c:	adc	r2, r2, r2
   23e70:	subcs	r0, r0, r1, lsl #26
   23e74:	cmp	r0, r1, lsl #25
   23e78:	adc	r2, r2, r2
   23e7c:	subcs	r0, r0, r1, lsl #25
   23e80:	cmp	r0, r1, lsl #24
   23e84:	adc	r2, r2, r2
   23e88:	subcs	r0, r0, r1, lsl #24
   23e8c:	cmp	r0, r1, lsl #23
   23e90:	adc	r2, r2, r2
   23e94:	subcs	r0, r0, r1, lsl #23
   23e98:	cmp	r0, r1, lsl #22
   23e9c:	adc	r2, r2, r2
   23ea0:	subcs	r0, r0, r1, lsl #22
   23ea4:	cmp	r0, r1, lsl #21
   23ea8:	adc	r2, r2, r2
   23eac:	subcs	r0, r0, r1, lsl #21
   23eb0:	cmp	r0, r1, lsl #20
   23eb4:	adc	r2, r2, r2
   23eb8:	subcs	r0, r0, r1, lsl #20
   23ebc:	cmp	r0, r1, lsl #19
   23ec0:	adc	r2, r2, r2
   23ec4:	subcs	r0, r0, r1, lsl #19
   23ec8:	cmp	r0, r1, lsl #18
   23ecc:	adc	r2, r2, r2
   23ed0:	subcs	r0, r0, r1, lsl #18
   23ed4:	cmp	r0, r1, lsl #17
   23ed8:	adc	r2, r2, r2
   23edc:	subcs	r0, r0, r1, lsl #17
   23ee0:	cmp	r0, r1, lsl #16
   23ee4:	adc	r2, r2, r2
   23ee8:	subcs	r0, r0, r1, lsl #16
   23eec:	cmp	r0, r1, lsl #15
   23ef0:	adc	r2, r2, r2
   23ef4:	subcs	r0, r0, r1, lsl #15
   23ef8:	cmp	r0, r1, lsl #14
   23efc:	adc	r2, r2, r2
   23f00:	subcs	r0, r0, r1, lsl #14
   23f04:	cmp	r0, r1, lsl #13
   23f08:	adc	r2, r2, r2
   23f0c:	subcs	r0, r0, r1, lsl #13
   23f10:	cmp	r0, r1, lsl #12
   23f14:	adc	r2, r2, r2
   23f18:	subcs	r0, r0, r1, lsl #12
   23f1c:	cmp	r0, r1, lsl #11
   23f20:	adc	r2, r2, r2
   23f24:	subcs	r0, r0, r1, lsl #11
   23f28:	cmp	r0, r1, lsl #10
   23f2c:	adc	r2, r2, r2
   23f30:	subcs	r0, r0, r1, lsl #10
   23f34:	cmp	r0, r1, lsl #9
   23f38:	adc	r2, r2, r2
   23f3c:	subcs	r0, r0, r1, lsl #9
   23f40:	cmp	r0, r1, lsl #8
   23f44:	adc	r2, r2, r2
   23f48:	subcs	r0, r0, r1, lsl #8
   23f4c:	cmp	r0, r1, lsl #7
   23f50:	adc	r2, r2, r2
   23f54:	subcs	r0, r0, r1, lsl #7
   23f58:	cmp	r0, r1, lsl #6
   23f5c:	adc	r2, r2, r2
   23f60:	subcs	r0, r0, r1, lsl #6
   23f64:	cmp	r0, r1, lsl #5
   23f68:	adc	r2, r2, r2
   23f6c:	subcs	r0, r0, r1, lsl #5
   23f70:	cmp	r0, r1, lsl #4
   23f74:	adc	r2, r2, r2
   23f78:	subcs	r0, r0, r1, lsl #4
   23f7c:	cmp	r0, r1, lsl #3
   23f80:	adc	r2, r2, r2
   23f84:	subcs	r0, r0, r1, lsl #3
   23f88:	cmp	r0, r1, lsl #2
   23f8c:	adc	r2, r2, r2
   23f90:	subcs	r0, r0, r1, lsl #2
   23f94:	cmp	r0, r1, lsl #1
   23f98:	adc	r2, r2, r2
   23f9c:	subcs	r0, r0, r1, lsl #1
   23fa0:	cmp	r0, r1
   23fa4:	adc	r2, r2, r2
   23fa8:	subcs	r0, r0, r1
   23fac:	mov	r0, r2
   23fb0:	bx	lr
   23fb4:	moveq	r0, #1
   23fb8:	movne	r0, #0
   23fbc:	bx	lr
   23fc0:	clz	r2, r1
   23fc4:	rsb	r2, r2, #31
   23fc8:	lsr	r0, r0, r2
   23fcc:	bx	lr
   23fd0:	cmp	r0, #0
   23fd4:	mvnne	r0, #0
   23fd8:	b	24278 <__assert_fail@plt+0x124b0>
   23fdc:	cmp	r1, #0
   23fe0:	beq	23fd0 <__assert_fail@plt+0x12208>
   23fe4:	push	{r0, r1, lr}
   23fe8:	bl	23df0 <__assert_fail@plt+0x12028>
   23fec:	pop	{r1, r2, lr}
   23ff0:	mul	r3, r2, r0
   23ff4:	sub	r1, r1, r3
   23ff8:	bx	lr
   23ffc:	cmp	r1, #0
   24000:	beq	2420c <__assert_fail@plt+0x12444>
   24004:	eor	ip, r0, r1
   24008:	rsbmi	r1, r1, #0
   2400c:	subs	r2, r1, #1
   24010:	beq	241d8 <__assert_fail@plt+0x12410>
   24014:	movs	r3, r0
   24018:	rsbmi	r3, r0, #0
   2401c:	cmp	r3, r1
   24020:	bls	241e4 <__assert_fail@plt+0x1241c>
   24024:	tst	r1, r2
   24028:	beq	241f4 <__assert_fail@plt+0x1242c>
   2402c:	clz	r2, r3
   24030:	clz	r0, r1
   24034:	sub	r2, r0, r2
   24038:	rsbs	r2, r2, #31
   2403c:	addne	r2, r2, r2, lsl #1
   24040:	mov	r0, #0
   24044:	addne	pc, pc, r2, lsl #2
   24048:	nop	{0}
   2404c:	cmp	r3, r1, lsl #31
   24050:	adc	r0, r0, r0
   24054:	subcs	r3, r3, r1, lsl #31
   24058:	cmp	r3, r1, lsl #30
   2405c:	adc	r0, r0, r0
   24060:	subcs	r3, r3, r1, lsl #30
   24064:	cmp	r3, r1, lsl #29
   24068:	adc	r0, r0, r0
   2406c:	subcs	r3, r3, r1, lsl #29
   24070:	cmp	r3, r1, lsl #28
   24074:	adc	r0, r0, r0
   24078:	subcs	r3, r3, r1, lsl #28
   2407c:	cmp	r3, r1, lsl #27
   24080:	adc	r0, r0, r0
   24084:	subcs	r3, r3, r1, lsl #27
   24088:	cmp	r3, r1, lsl #26
   2408c:	adc	r0, r0, r0
   24090:	subcs	r3, r3, r1, lsl #26
   24094:	cmp	r3, r1, lsl #25
   24098:	adc	r0, r0, r0
   2409c:	subcs	r3, r3, r1, lsl #25
   240a0:	cmp	r3, r1, lsl #24
   240a4:	adc	r0, r0, r0
   240a8:	subcs	r3, r3, r1, lsl #24
   240ac:	cmp	r3, r1, lsl #23
   240b0:	adc	r0, r0, r0
   240b4:	subcs	r3, r3, r1, lsl #23
   240b8:	cmp	r3, r1, lsl #22
   240bc:	adc	r0, r0, r0
   240c0:	subcs	r3, r3, r1, lsl #22
   240c4:	cmp	r3, r1, lsl #21
   240c8:	adc	r0, r0, r0
   240cc:	subcs	r3, r3, r1, lsl #21
   240d0:	cmp	r3, r1, lsl #20
   240d4:	adc	r0, r0, r0
   240d8:	subcs	r3, r3, r1, lsl #20
   240dc:	cmp	r3, r1, lsl #19
   240e0:	adc	r0, r0, r0
   240e4:	subcs	r3, r3, r1, lsl #19
   240e8:	cmp	r3, r1, lsl #18
   240ec:	adc	r0, r0, r0
   240f0:	subcs	r3, r3, r1, lsl #18
   240f4:	cmp	r3, r1, lsl #17
   240f8:	adc	r0, r0, r0
   240fc:	subcs	r3, r3, r1, lsl #17
   24100:	cmp	r3, r1, lsl #16
   24104:	adc	r0, r0, r0
   24108:	subcs	r3, r3, r1, lsl #16
   2410c:	cmp	r3, r1, lsl #15
   24110:	adc	r0, r0, r0
   24114:	subcs	r3, r3, r1, lsl #15
   24118:	cmp	r3, r1, lsl #14
   2411c:	adc	r0, r0, r0
   24120:	subcs	r3, r3, r1, lsl #14
   24124:	cmp	r3, r1, lsl #13
   24128:	adc	r0, r0, r0
   2412c:	subcs	r3, r3, r1, lsl #13
   24130:	cmp	r3, r1, lsl #12
   24134:	adc	r0, r0, r0
   24138:	subcs	r3, r3, r1, lsl #12
   2413c:	cmp	r3, r1, lsl #11
   24140:	adc	r0, r0, r0
   24144:	subcs	r3, r3, r1, lsl #11
   24148:	cmp	r3, r1, lsl #10
   2414c:	adc	r0, r0, r0
   24150:	subcs	r3, r3, r1, lsl #10
   24154:	cmp	r3, r1, lsl #9
   24158:	adc	r0, r0, r0
   2415c:	subcs	r3, r3, r1, lsl #9
   24160:	cmp	r3, r1, lsl #8
   24164:	adc	r0, r0, r0
   24168:	subcs	r3, r3, r1, lsl #8
   2416c:	cmp	r3, r1, lsl #7
   24170:	adc	r0, r0, r0
   24174:	subcs	r3, r3, r1, lsl #7
   24178:	cmp	r3, r1, lsl #6
   2417c:	adc	r0, r0, r0
   24180:	subcs	r3, r3, r1, lsl #6
   24184:	cmp	r3, r1, lsl #5
   24188:	adc	r0, r0, r0
   2418c:	subcs	r3, r3, r1, lsl #5
   24190:	cmp	r3, r1, lsl #4
   24194:	adc	r0, r0, r0
   24198:	subcs	r3, r3, r1, lsl #4
   2419c:	cmp	r3, r1, lsl #3
   241a0:	adc	r0, r0, r0
   241a4:	subcs	r3, r3, r1, lsl #3
   241a8:	cmp	r3, r1, lsl #2
   241ac:	adc	r0, r0, r0
   241b0:	subcs	r3, r3, r1, lsl #2
   241b4:	cmp	r3, r1, lsl #1
   241b8:	adc	r0, r0, r0
   241bc:	subcs	r3, r3, r1, lsl #1
   241c0:	cmp	r3, r1
   241c4:	adc	r0, r0, r0
   241c8:	subcs	r3, r3, r1
   241cc:	cmp	ip, #0
   241d0:	rsbmi	r0, r0, #0
   241d4:	bx	lr
   241d8:	teq	ip, r0
   241dc:	rsbmi	r0, r0, #0
   241e0:	bx	lr
   241e4:	movcc	r0, #0
   241e8:	asreq	r0, ip, #31
   241ec:	orreq	r0, r0, #1
   241f0:	bx	lr
   241f4:	clz	r2, r1
   241f8:	rsb	r2, r2, #31
   241fc:	cmp	ip, #0
   24200:	lsr	r0, r3, r2
   24204:	rsbmi	r0, r0, #0
   24208:	bx	lr
   2420c:	cmp	r0, #0
   24210:	mvngt	r0, #-2147483648	; 0x80000000
   24214:	movlt	r0, #-2147483648	; 0x80000000
   24218:	b	24278 <__assert_fail@plt+0x124b0>
   2421c:	cmp	r1, #0
   24220:	beq	2420c <__assert_fail@plt+0x12444>
   24224:	push	{r0, r1, lr}
   24228:	bl	24004 <__assert_fail@plt+0x1223c>
   2422c:	pop	{r1, r2, lr}
   24230:	mul	r3, r2, r0
   24234:	sub	r1, r1, r3
   24238:	bx	lr
   2423c:	cmp	r3, #0
   24240:	cmpeq	r2, #0
   24244:	bne	2425c <__assert_fail@plt+0x12494>
   24248:	cmp	r1, #0
   2424c:	cmpeq	r0, #0
   24250:	mvnne	r1, #0
   24254:	mvnne	r0, #0
   24258:	b	24278 <__assert_fail@plt+0x124b0>
   2425c:	sub	sp, sp, #8
   24260:	push	{sp, lr}
   24264:	bl	242c4 <__assert_fail@plt+0x124fc>
   24268:	ldr	lr, [sp, #4]
   2426c:	add	sp, sp, #8
   24270:	pop	{r2, r3}
   24274:	bx	lr
   24278:	push	{r1, lr}
   2427c:	mov	r0, #8
   24280:	bl	118a0 <raise@plt>
   24284:	pop	{r1, pc}
   24288:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2428c:	mov	r8, r2
   24290:	mov	r6, r0
   24294:	mov	r7, r1
   24298:	mov	sl, r3
   2429c:	ldr	r9, [sp, #32]
   242a0:	bl	24300 <__assert_fail@plt+0x12538>
   242a4:	umull	r4, r5, r8, r0
   242a8:	mul	r8, r8, r1
   242ac:	mla	r2, r0, sl, r8
   242b0:	add	r5, r2, r5
   242b4:	subs	r4, r6, r4
   242b8:	sbc	r5, r7, r5
   242bc:	strd	r4, [r9]
   242c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   242c4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   242c8:	mov	r8, r2
   242cc:	mov	r6, r0
   242d0:	mov	r7, r1
   242d4:	mov	r5, r3
   242d8:	ldr	r9, [sp, #32]
   242dc:	bl	2478c <__assert_fail@plt+0x129c4>
   242e0:	mul	r3, r0, r5
   242e4:	umull	r4, r5, r0, r8
   242e8:	mla	r8, r8, r1, r3
   242ec:	add	r5, r8, r5
   242f0:	subs	r4, r6, r4
   242f4:	sbc	r5, r7, r5
   242f8:	strd	r4, [r9]
   242fc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   24300:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24304:	rsbs	r4, r0, #0
   24308:	rsc	r5, r1, #0
   2430c:	cmp	r1, #0
   24310:	mvn	r6, #0
   24314:	sub	sp, sp, #12
   24318:	movge	r4, r0
   2431c:	movge	r5, r1
   24320:	movge	r6, #0
   24324:	cmp	r3, #0
   24328:	blt	24560 <__assert_fail@plt+0x12798>
   2432c:	cmp	r3, #0
   24330:	mov	sl, r4
   24334:	mov	ip, r5
   24338:	mov	r0, r2
   2433c:	mov	r1, r3
   24340:	mov	r8, r2
   24344:	mov	r7, r4
   24348:	mov	r9, r5
   2434c:	bne	24444 <__assert_fail@plt+0x1267c>
   24350:	cmp	r2, r5
   24354:	bls	24480 <__assert_fail@plt+0x126b8>
   24358:	clz	r3, r2
   2435c:	cmp	r3, #0
   24360:	rsbne	r2, r3, #32
   24364:	lslne	r8, r0, r3
   24368:	lsrne	r2, r4, r2
   2436c:	lslne	r7, r4, r3
   24370:	orrne	r9, r2, r5, lsl r3
   24374:	lsr	r4, r8, #16
   24378:	uxth	sl, r8
   2437c:	mov	r1, r4
   24380:	mov	r0, r9
   24384:	bl	23df0 <__assert_fail@plt+0x12028>
   24388:	mov	r1, r4
   2438c:	mov	fp, r0
   24390:	mov	r0, r9
   24394:	bl	23fdc <__assert_fail@plt+0x12214>
   24398:	mul	r0, sl, fp
   2439c:	lsr	r2, r7, #16
   243a0:	orr	r1, r2, r1, lsl #16
   243a4:	cmp	r0, r1
   243a8:	bls	243cc <__assert_fail@plt+0x12604>
   243ac:	adds	r1, r1, r8
   243b0:	sub	r3, fp, #1
   243b4:	bcs	243c8 <__assert_fail@plt+0x12600>
   243b8:	cmp	r0, r1
   243bc:	subhi	fp, fp, #2
   243c0:	addhi	r1, r1, r8
   243c4:	bhi	243cc <__assert_fail@plt+0x12604>
   243c8:	mov	fp, r3
   243cc:	rsb	r9, r0, r1
   243d0:	mov	r1, r4
   243d4:	uxth	r7, r7
   243d8:	mov	r0, r9
   243dc:	bl	23df0 <__assert_fail@plt+0x12028>
   243e0:	mov	r1, r4
   243e4:	mov	r5, r0
   243e8:	mov	r0, r9
   243ec:	bl	23fdc <__assert_fail@plt+0x12214>
   243f0:	mul	sl, sl, r5
   243f4:	orr	r1, r7, r1, lsl #16
   243f8:	cmp	sl, r1
   243fc:	bls	2441c <__assert_fail@plt+0x12654>
   24400:	adds	r8, r1, r8
   24404:	sub	r3, r5, #1
   24408:	bcs	24418 <__assert_fail@plt+0x12650>
   2440c:	cmp	sl, r8
   24410:	subhi	r5, r5, #2
   24414:	bhi	2441c <__assert_fail@plt+0x12654>
   24418:	mov	r5, r3
   2441c:	orr	r3, r5, fp, lsl #16
   24420:	mov	r4, #0
   24424:	cmp	r6, #0
   24428:	mov	r0, r3
   2442c:	mov	r1, r4
   24430:	beq	2443c <__assert_fail@plt+0x12674>
   24434:	rsbs	r0, r0, #0
   24438:	rsc	r1, r1, #0
   2443c:	add	sp, sp, #12
   24440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24444:	cmp	r3, r5
   24448:	movhi	r4, #0
   2444c:	movhi	r3, r4
   24450:	bhi	24424 <__assert_fail@plt+0x1265c>
   24454:	clz	r5, r1
   24458:	cmp	r5, #0
   2445c:	bne	2464c <__assert_fail@plt+0x12884>
   24460:	cmp	r1, ip
   24464:	cmpcs	r2, sl
   24468:	movhi	r4, #0
   2446c:	movls	r4, #1
   24470:	movls	r3, #1
   24474:	movls	r4, r5
   24478:	movhi	r3, r4
   2447c:	b	24424 <__assert_fail@plt+0x1265c>
   24480:	cmp	r2, #0
   24484:	bne	24498 <__assert_fail@plt+0x126d0>
   24488:	mov	r1, r2
   2448c:	mov	r0, #1
   24490:	bl	23df0 <__assert_fail@plt+0x12028>
   24494:	mov	r8, r0
   24498:	clz	r3, r8
   2449c:	cmp	r3, #0
   244a0:	bne	24570 <__assert_fail@plt+0x127a8>
   244a4:	rsb	r9, r8, r9
   244a8:	lsr	r5, r8, #16
   244ac:	uxth	sl, r8
   244b0:	mov	r4, #1
   244b4:	mov	r1, r5
   244b8:	mov	r0, r9
   244bc:	bl	23df0 <__assert_fail@plt+0x12028>
   244c0:	mov	r1, r5
   244c4:	mov	fp, r0
   244c8:	mov	r0, r9
   244cc:	bl	23fdc <__assert_fail@plt+0x12214>
   244d0:	mul	r0, sl, fp
   244d4:	lsr	r2, r7, #16
   244d8:	orr	r1, r2, r1, lsl #16
   244dc:	cmp	r0, r1
   244e0:	bls	24500 <__assert_fail@plt+0x12738>
   244e4:	adds	r1, r1, r8
   244e8:	sub	r3, fp, #1
   244ec:	bcs	2476c <__assert_fail@plt+0x129a4>
   244f0:	cmp	r0, r1
   244f4:	subhi	fp, fp, #2
   244f8:	addhi	r1, r1, r8
   244fc:	bls	2476c <__assert_fail@plt+0x129a4>
   24500:	rsb	r2, r0, r1
   24504:	mov	r1, r5
   24508:	str	r2, [sp]
   2450c:	uxth	r7, r7
   24510:	mov	r0, r2
   24514:	bl	23df0 <__assert_fail@plt+0x12028>
   24518:	ldr	r2, [sp]
   2451c:	mov	r1, r5
   24520:	mov	r9, r0
   24524:	mov	r0, r2
   24528:	bl	23fdc <__assert_fail@plt+0x12214>
   2452c:	mul	sl, sl, r9
   24530:	orr	r1, r7, r1, lsl #16
   24534:	cmp	sl, r1
   24538:	bls	24558 <__assert_fail@plt+0x12790>
   2453c:	adds	r8, r1, r8
   24540:	sub	r3, r9, #1
   24544:	bcs	24554 <__assert_fail@plt+0x1278c>
   24548:	cmp	sl, r8
   2454c:	subhi	r9, r9, #2
   24550:	bhi	24558 <__assert_fail@plt+0x12790>
   24554:	mov	r9, r3
   24558:	orr	r3, r9, fp, lsl #16
   2455c:	b	24424 <__assert_fail@plt+0x1265c>
   24560:	mvn	r6, r6
   24564:	rsbs	r2, r2, #0
   24568:	rsc	r3, r3, #0
   2456c:	b	2432c <__assert_fail@plt+0x12564>
   24570:	lsl	r8, r8, r3
   24574:	rsb	fp, r3, #32
   24578:	lsr	r4, r9, fp
   2457c:	lsr	fp, r7, fp
   24580:	lsr	r5, r8, #16
   24584:	orr	fp, fp, r9, lsl r3
   24588:	mov	r0, r4
   2458c:	lsl	r7, r7, r3
   24590:	mov	r1, r5
   24594:	uxth	sl, r8
   24598:	bl	23df0 <__assert_fail@plt+0x12028>
   2459c:	mov	r1, r5
   245a0:	mov	r3, r0
   245a4:	mov	r0, r4
   245a8:	str	r3, [sp]
   245ac:	bl	23fdc <__assert_fail@plt+0x12214>
   245b0:	ldr	r3, [sp]
   245b4:	lsr	r2, fp, #16
   245b8:	mul	r0, sl, r3
   245bc:	orr	r1, r2, r1, lsl #16
   245c0:	cmp	r0, r1
   245c4:	bls	245e4 <__assert_fail@plt+0x1281c>
   245c8:	adds	r1, r1, r8
   245cc:	sub	r2, r3, #1
   245d0:	bcs	24784 <__assert_fail@plt+0x129bc>
   245d4:	cmp	r0, r1
   245d8:	subhi	r3, r3, #2
   245dc:	addhi	r1, r1, r8
   245e0:	bls	24784 <__assert_fail@plt+0x129bc>
   245e4:	rsb	r9, r0, r1
   245e8:	mov	r1, r5
   245ec:	str	r3, [sp]
   245f0:	uxth	fp, fp
   245f4:	mov	r0, r9
   245f8:	bl	23df0 <__assert_fail@plt+0x12028>
   245fc:	mov	r1, r5
   24600:	mov	r4, r0
   24604:	mov	r0, r9
   24608:	bl	23fdc <__assert_fail@plt+0x12214>
   2460c:	mul	r9, sl, r4
   24610:	ldr	r3, [sp]
   24614:	orr	r1, fp, r1, lsl #16
   24618:	cmp	r9, r1
   2461c:	bls	24640 <__assert_fail@plt+0x12878>
   24620:	adds	r1, r1, r8
   24624:	sub	r2, r4, #1
   24628:	bcs	2463c <__assert_fail@plt+0x12874>
   2462c:	cmp	r9, r1
   24630:	subhi	r4, r4, #2
   24634:	addhi	r1, r1, r8
   24638:	bhi	24640 <__assert_fail@plt+0x12878>
   2463c:	mov	r4, r2
   24640:	rsb	r9, r9, r1
   24644:	orr	r4, r4, r3, lsl #16
   24648:	b	244b4 <__assert_fail@plt+0x126ec>
   2464c:	rsb	sl, r5, #32
   24650:	lsl	r3, r2, r5
   24654:	lsr	r0, r2, sl
   24658:	lsr	r2, ip, sl
   2465c:	orr	r4, r0, r1, lsl r5
   24660:	lsr	sl, r7, sl
   24664:	mov	r0, r2
   24668:	orr	sl, sl, ip, lsl r5
   2466c:	lsr	r9, r4, #16
   24670:	str	r3, [sp, #4]
   24674:	str	r2, [sp]
   24678:	uxth	fp, r4
   2467c:	mov	r1, r9
   24680:	bl	23df0 <__assert_fail@plt+0x12028>
   24684:	ldr	r2, [sp]
   24688:	mov	r1, r9
   2468c:	mov	r8, r0
   24690:	mov	r0, r2
   24694:	bl	23fdc <__assert_fail@plt+0x12214>
   24698:	mul	r0, fp, r8
   2469c:	lsr	r2, sl, #16
   246a0:	orr	r1, r2, r1, lsl #16
   246a4:	cmp	r0, r1
   246a8:	bls	246c8 <__assert_fail@plt+0x12900>
   246ac:	adds	r1, r1, r4
   246b0:	sub	r2, r8, #1
   246b4:	bcs	2477c <__assert_fail@plt+0x129b4>
   246b8:	cmp	r0, r1
   246bc:	subhi	r8, r8, #2
   246c0:	addhi	r1, r1, r4
   246c4:	bls	2477c <__assert_fail@plt+0x129b4>
   246c8:	rsb	ip, r0, r1
   246cc:	mov	r1, r9
   246d0:	str	ip, [sp]
   246d4:	mov	r0, ip
   246d8:	bl	23df0 <__assert_fail@plt+0x12028>
   246dc:	ldr	ip, [sp]
   246e0:	mov	r1, r9
   246e4:	mov	r2, r0
   246e8:	mov	r0, ip
   246ec:	str	r2, [sp]
   246f0:	bl	23fdc <__assert_fail@plt+0x12214>
   246f4:	ldr	r2, [sp]
   246f8:	uxth	ip, sl
   246fc:	mul	fp, fp, r2
   24700:	orr	ip, ip, r1, lsl #16
   24704:	cmp	fp, ip
   24708:	bls	24728 <__assert_fail@plt+0x12960>
   2470c:	adds	ip, ip, r4
   24710:	sub	r1, r2, #1
   24714:	bcs	24774 <__assert_fail@plt+0x129ac>
   24718:	cmp	fp, ip
   2471c:	subhi	r2, r2, #2
   24720:	addhi	ip, ip, r4
   24724:	bls	24774 <__assert_fail@plt+0x129ac>
   24728:	ldr	r0, [sp, #4]
   2472c:	orr	r1, r2, r8, lsl #16
   24730:	rsb	fp, fp, ip
   24734:	umull	r2, r3, r1, r0
   24738:	cmp	fp, r3
   2473c:	bcc	24760 <__assert_fail@plt+0x12998>
   24740:	movne	r4, #0
   24744:	moveq	r4, #1
   24748:	cmp	r2, r7, lsl r5
   2474c:	movls	r4, #0
   24750:	andhi	r4, r4, #1
   24754:	cmp	r4, #0
   24758:	moveq	r3, r1
   2475c:	beq	24424 <__assert_fail@plt+0x1265c>
   24760:	sub	r3, r1, #1
   24764:	mov	r4, #0
   24768:	b	24424 <__assert_fail@plt+0x1265c>
   2476c:	mov	fp, r3
   24770:	b	24500 <__assert_fail@plt+0x12738>
   24774:	mov	r2, r1
   24778:	b	24728 <__assert_fail@plt+0x12960>
   2477c:	mov	r8, r2
   24780:	b	246c8 <__assert_fail@plt+0x12900>
   24784:	mov	r3, r2
   24788:	b	245e4 <__assert_fail@plt+0x1281c>
   2478c:	cmp	r3, #0
   24790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24794:	mov	r6, r0
   24798:	sub	sp, sp, #12
   2479c:	mov	r5, r1
   247a0:	mov	r7, r0
   247a4:	mov	r4, r2
   247a8:	mov	r8, r1
   247ac:	bne	2488c <__assert_fail@plt+0x12ac4>
   247b0:	cmp	r2, r1
   247b4:	bls	248c8 <__assert_fail@plt+0x12b00>
   247b8:	clz	r3, r2
   247bc:	cmp	r3, #0
   247c0:	rsbne	r8, r3, #32
   247c4:	lslne	r4, r2, r3
   247c8:	lsrne	r8, r0, r8
   247cc:	lslne	r7, r0, r3
   247d0:	orrne	r8, r8, r1, lsl r3
   247d4:	lsr	r5, r4, #16
   247d8:	uxth	sl, r4
   247dc:	mov	r1, r5
   247e0:	mov	r0, r8
   247e4:	bl	23df0 <__assert_fail@plt+0x12028>
   247e8:	mov	r1, r5
   247ec:	mov	r9, r0
   247f0:	mov	r0, r8
   247f4:	bl	23fdc <__assert_fail@plt+0x12214>
   247f8:	mul	r0, sl, r9
   247fc:	lsr	r3, r7, #16
   24800:	orr	r1, r3, r1, lsl #16
   24804:	cmp	r0, r1
   24808:	bls	2482c <__assert_fail@plt+0x12a64>
   2480c:	adds	r1, r1, r4
   24810:	sub	r2, r9, #1
   24814:	bcs	24828 <__assert_fail@plt+0x12a60>
   24818:	cmp	r0, r1
   2481c:	subhi	r9, r9, #2
   24820:	addhi	r1, r1, r4
   24824:	bhi	2482c <__assert_fail@plt+0x12a64>
   24828:	mov	r9, r2
   2482c:	rsb	r8, r0, r1
   24830:	mov	r1, r5
   24834:	uxth	r7, r7
   24838:	mov	r0, r8
   2483c:	bl	23df0 <__assert_fail@plt+0x12028>
   24840:	mov	r1, r5
   24844:	mov	r6, r0
   24848:	mov	r0, r8
   2484c:	bl	23fdc <__assert_fail@plt+0x12214>
   24850:	mul	sl, sl, r6
   24854:	orr	r1, r7, r1, lsl #16
   24858:	cmp	sl, r1
   2485c:	bls	24878 <__assert_fail@plt+0x12ab0>
   24860:	adds	r4, r1, r4
   24864:	sub	r3, r6, #1
   24868:	bcs	24b74 <__assert_fail@plt+0x12dac>
   2486c:	cmp	sl, r4
   24870:	subhi	r6, r6, #2
   24874:	bls	24b74 <__assert_fail@plt+0x12dac>
   24878:	orr	r0, r6, r9, lsl #16
   2487c:	mov	r6, #0
   24880:	mov	r1, r6
   24884:	add	sp, sp, #12
   24888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2488c:	cmp	r3, r1
   24890:	movhi	r6, #0
   24894:	movhi	r0, r6
   24898:	bhi	24880 <__assert_fail@plt+0x12ab8>
   2489c:	clz	r7, r3
   248a0:	cmp	r7, #0
   248a4:	bne	249a4 <__assert_fail@plt+0x12bdc>
   248a8:	cmp	r3, r1
   248ac:	cmpcs	r2, r6
   248b0:	movhi	r6, #0
   248b4:	movls	r6, #1
   248b8:	movls	r0, #1
   248bc:	movls	r6, r7
   248c0:	movhi	r0, r6
   248c4:	b	24880 <__assert_fail@plt+0x12ab8>
   248c8:	cmp	r2, #0
   248cc:	bne	248e0 <__assert_fail@plt+0x12b18>
   248d0:	mov	r1, r2
   248d4:	mov	r0, #1
   248d8:	bl	23df0 <__assert_fail@plt+0x12028>
   248dc:	mov	r4, r0
   248e0:	clz	r3, r4
   248e4:	cmp	r3, #0
   248e8:	bne	24aa0 <__assert_fail@plt+0x12cd8>
   248ec:	rsb	r5, r4, r5
   248f0:	lsr	r8, r4, #16
   248f4:	uxth	sl, r4
   248f8:	mov	r6, #1
   248fc:	mov	r1, r8
   24900:	mov	r0, r5
   24904:	bl	23df0 <__assert_fail@plt+0x12028>
   24908:	mov	r1, r8
   2490c:	mov	r9, r0
   24910:	mov	r0, r5
   24914:	bl	23fdc <__assert_fail@plt+0x12214>
   24918:	mul	r0, sl, r9
   2491c:	lsr	r3, r7, #16
   24920:	orr	r1, r3, r1, lsl #16
   24924:	cmp	r0, r1
   24928:	bls	24948 <__assert_fail@plt+0x12b80>
   2492c:	adds	r1, r1, r4
   24930:	sub	r2, r9, #1
   24934:	bcs	24b7c <__assert_fail@plt+0x12db4>
   24938:	cmp	r0, r1
   2493c:	subhi	r9, r9, #2
   24940:	addhi	r1, r1, r4
   24944:	bls	24b7c <__assert_fail@plt+0x12db4>
   24948:	rsb	fp, r0, r1
   2494c:	mov	r1, r8
   24950:	uxth	r7, r7
   24954:	mov	r0, fp
   24958:	bl	23df0 <__assert_fail@plt+0x12028>
   2495c:	mov	r1, r8
   24960:	mov	r5, r0
   24964:	mov	r0, fp
   24968:	bl	23fdc <__assert_fail@plt+0x12214>
   2496c:	mul	sl, sl, r5
   24970:	orr	r1, r7, r1, lsl #16
   24974:	cmp	sl, r1
   24978:	bls	24994 <__assert_fail@plt+0x12bcc>
   2497c:	adds	r4, r1, r4
   24980:	sub	r3, r5, #1
   24984:	bcs	24b84 <__assert_fail@plt+0x12dbc>
   24988:	cmp	sl, r4
   2498c:	subhi	r5, r5, #2
   24990:	bls	24b84 <__assert_fail@plt+0x12dbc>
   24994:	orr	r0, r5, r9, lsl #16
   24998:	mov	r1, r6
   2499c:	add	sp, sp, #12
   249a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   249a4:	rsb	r1, r7, #32
   249a8:	lsl	r0, r2, r7
   249ac:	lsr	r2, r2, r1
   249b0:	lsr	fp, r5, r1
   249b4:	orr	r8, r2, r3, lsl r7
   249b8:	lsr	r1, r6, r1
   249bc:	str	r0, [sp, #4]
   249c0:	orr	r5, r1, r5, lsl r7
   249c4:	lsr	r9, r8, #16
   249c8:	mov	r0, fp
   249cc:	uxth	sl, r8
   249d0:	mov	r1, r9
   249d4:	bl	23df0 <__assert_fail@plt+0x12028>
   249d8:	mov	r1, r9
   249dc:	mov	r4, r0
   249e0:	mov	r0, fp
   249e4:	bl	23fdc <__assert_fail@plt+0x12214>
   249e8:	mul	r0, sl, r4
   249ec:	lsr	ip, r5, #16
   249f0:	orr	r1, ip, r1, lsl #16
   249f4:	cmp	r0, r1
   249f8:	bls	24a0c <__assert_fail@plt+0x12c44>
   249fc:	adds	r1, r1, r8
   24a00:	sub	r2, r4, #1
   24a04:	bcc	24ba0 <__assert_fail@plt+0x12dd8>
   24a08:	mov	r4, r2
   24a0c:	rsb	ip, r0, r1
   24a10:	mov	r1, r9
   24a14:	str	ip, [sp]
   24a18:	uxth	r5, r5
   24a1c:	mov	r0, ip
   24a20:	bl	23df0 <__assert_fail@plt+0x12028>
   24a24:	ldr	ip, [sp]
   24a28:	mov	r1, r9
   24a2c:	mov	fp, r0
   24a30:	mov	r0, ip
   24a34:	bl	23fdc <__assert_fail@plt+0x12214>
   24a38:	mul	sl, sl, fp
   24a3c:	orr	r1, r5, r1, lsl #16
   24a40:	cmp	sl, r1
   24a44:	bls	24a58 <__assert_fail@plt+0x12c90>
   24a48:	adds	r1, r1, r8
   24a4c:	sub	r2, fp, #1
   24a50:	bcc	24b8c <__assert_fail@plt+0x12dc4>
   24a54:	mov	fp, r2
   24a58:	ldr	r3, [sp, #4]
   24a5c:	orr	r0, fp, r4, lsl #16
   24a60:	rsb	sl, sl, r1
   24a64:	umull	r4, r5, r0, r3
   24a68:	cmp	sl, r5
   24a6c:	bcc	24a8c <__assert_fail@plt+0x12cc4>
   24a70:	movne	r3, #0
   24a74:	moveq	r3, #1
   24a78:	cmp	r4, r6, lsl r7
   24a7c:	movls	r6, #0
   24a80:	andhi	r6, r3, #1
   24a84:	cmp	r6, #0
   24a88:	beq	24880 <__assert_fail@plt+0x12ab8>
   24a8c:	mov	r6, #0
   24a90:	sub	r0, r0, #1
   24a94:	mov	r1, r6
   24a98:	add	sp, sp, #12
   24a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24aa0:	lsl	r4, r4, r3
   24aa4:	rsb	r9, r3, #32
   24aa8:	lsr	r2, r5, r9
   24aac:	lsr	r9, r6, r9
   24ab0:	lsr	r8, r4, #16
   24ab4:	orr	r9, r9, r5, lsl r3
   24ab8:	mov	r0, r2
   24abc:	lsl	r7, r6, r3
   24ac0:	mov	r1, r8
   24ac4:	str	r2, [sp]
   24ac8:	bl	23df0 <__assert_fail@plt+0x12028>
   24acc:	ldr	r2, [sp]
   24ad0:	mov	r1, r8
   24ad4:	uxth	sl, r4
   24ad8:	mov	fp, r0
   24adc:	mov	r0, r2
   24ae0:	bl	23fdc <__assert_fail@plt+0x12214>
   24ae4:	mul	r0, sl, fp
   24ae8:	lsr	r3, r9, #16
   24aec:	orr	r1, r3, r1, lsl #16
   24af0:	cmp	r0, r1
   24af4:	bls	24b14 <__assert_fail@plt+0x12d4c>
   24af8:	adds	r1, r1, r4
   24afc:	sub	r3, fp, #1
   24b00:	bcs	24bb4 <__assert_fail@plt+0x12dec>
   24b04:	cmp	r0, r1
   24b08:	subhi	fp, fp, #2
   24b0c:	addhi	r1, r1, r4
   24b10:	bls	24bb4 <__assert_fail@plt+0x12dec>
   24b14:	rsb	r5, r0, r1
   24b18:	mov	r1, r8
   24b1c:	uxth	r9, r9
   24b20:	mov	r0, r5
   24b24:	bl	23df0 <__assert_fail@plt+0x12028>
   24b28:	mov	r1, r8
   24b2c:	mov	r6, r0
   24b30:	mov	r0, r5
   24b34:	bl	23fdc <__assert_fail@plt+0x12214>
   24b38:	mul	r5, sl, r6
   24b3c:	orr	r1, r9, r1, lsl #16
   24b40:	cmp	r5, r1
   24b44:	bls	24b68 <__assert_fail@plt+0x12da0>
   24b48:	adds	r1, r1, r4
   24b4c:	sub	r3, r6, #1
   24b50:	bcs	24b64 <__assert_fail@plt+0x12d9c>
   24b54:	cmp	r5, r1
   24b58:	subhi	r6, r6, #2
   24b5c:	addhi	r1, r1, r4
   24b60:	bhi	24b68 <__assert_fail@plt+0x12da0>
   24b64:	mov	r6, r3
   24b68:	rsb	r5, r5, r1
   24b6c:	orr	r6, r6, fp, lsl #16
   24b70:	b	248fc <__assert_fail@plt+0x12b34>
   24b74:	mov	r6, r3
   24b78:	b	24878 <__assert_fail@plt+0x12ab0>
   24b7c:	mov	r9, r2
   24b80:	b	24948 <__assert_fail@plt+0x12b80>
   24b84:	mov	r5, r3
   24b88:	b	24994 <__assert_fail@plt+0x12bcc>
   24b8c:	cmp	sl, r1
   24b90:	subhi	fp, fp, #2
   24b94:	addhi	r1, r1, r8
   24b98:	bhi	24a58 <__assert_fail@plt+0x12c90>
   24b9c:	b	24a54 <__assert_fail@plt+0x12c8c>
   24ba0:	cmp	r0, r1
   24ba4:	subhi	r4, r4, #2
   24ba8:	addhi	r1, r1, r8
   24bac:	bhi	24a0c <__assert_fail@plt+0x12c44>
   24bb0:	b	24a08 <__assert_fail@plt+0x12c40>
   24bb4:	mov	fp, r3
   24bb8:	b	24b14 <__assert_fail@plt+0x12d4c>
   24bbc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   24bc0:	mov	r7, r0
   24bc4:	ldr	r6, [pc, #76]	; 24c18 <__assert_fail@plt+0x12e50>
   24bc8:	mov	r8, r1
   24bcc:	ldr	r5, [pc, #72]	; 24c1c <__assert_fail@plt+0x12e54>
   24bd0:	mov	r9, r2
   24bd4:	add	r6, pc, r6
   24bd8:	bl	1185c <_init@@Base>
   24bdc:	add	r5, pc, r5
   24be0:	rsb	r6, r5, r6
   24be4:	asrs	r6, r6, #2
   24be8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   24bec:	sub	r5, r5, #4
   24bf0:	mov	r4, #0
   24bf4:	add	r4, r4, #1
   24bf8:	ldr	r3, [r5, #4]!
   24bfc:	mov	r0, r7
   24c00:	mov	r1, r8
   24c04:	mov	r2, r9
   24c08:	blx	r3
   24c0c:	cmp	r4, r6
   24c10:	bne	24bf4 <__assert_fail@plt+0x12e2c>
   24c14:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   24c18:	andeq	r4, r1, ip, lsl r3
   24c1c:	andeq	r4, r1, r0, lsl r3
   24c20:	bx	lr
   24c24:	ldr	r3, [pc, #28]	; 24c48 <__assert_fail@plt+0x12e80>
   24c28:	mov	r1, #0
   24c2c:	ldr	r2, [pc, #24]	; 24c4c <__assert_fail@plt+0x12e84>
   24c30:	add	r3, pc, r3
   24c34:	ldr	r3, [r3, r2]
   24c38:	cmp	r3, #0
   24c3c:	ldrne	r2, [r3]
   24c40:	moveq	r2, r3
   24c44:	b	11c18 <__cxa_atexit@plt>
   24c48:	andeq	r4, r1, r8, asr #7
   24c4c:	ldrdeq	r0, [r0], -r8

Disassembly of section .fini:

00024c50 <_fini@@Base>:
   24c50:	push	{r3, lr}
   24c54:	pop	{r3, pc}
