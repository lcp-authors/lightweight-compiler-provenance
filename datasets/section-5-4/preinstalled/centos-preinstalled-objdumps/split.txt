
centos-preinstalled/split:     file format elf32-littlearm


Disassembly of section .init:

0001150c <.init>:
   1150c:	push	{r3, lr}
   11510:	bl	13b60 <__assert_fail@plt+0x2208>
   11514:	pop	{r3, pc}

Disassembly of section .plt:

00011518 <fdopen@plt-0x14>:
   11518:	push	{lr}		; (str lr, [sp, #-4]!)
   1151c:	ldr	lr, [pc, #4]	; 11528 <fdopen@plt-0x4>
   11520:	add	lr, pc, lr
   11524:	ldr	pc, [lr, #8]!
   11528:	ldrdeq	sp, [r1], -r8

0001152c <fdopen@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #118784	; 0x1d000
   11534:	ldr	pc, [ip, #2776]!	; 0xad8

00011538 <calloc@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #118784	; 0x1d000
   11540:	ldr	pc, [ip, #2768]!	; 0xad0

00011544 <fputs_unlocked@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #118784	; 0x1d000
   1154c:	ldr	pc, [ip, #2760]!	; 0xac8

00011550 <raise@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #118784	; 0x1d000
   11558:	ldr	pc, [ip, #2752]!	; 0xac0

0001155c <iconv_close@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #118784	; 0x1d000
   11564:	ldr	pc, [ip, #2744]!	; 0xab8

00011568 <iconv@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #118784	; 0x1d000
   11570:	ldr	pc, [ip, #2736]!	; 0xab0

00011574 <strcmp@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #118784	; 0x1d000
   1157c:	ldr	pc, [ip, #2728]!	; 0xaa8

00011580 <strtol@plt>:
   11580:	add	ip, pc, #0, 12
   11584:	add	ip, ip, #118784	; 0x1d000
   11588:	ldr	pc, [ip, #2720]!	; 0xaa0

0001158c <read@plt>:
   1158c:	add	ip, pc, #0, 12
   11590:	add	ip, ip, #118784	; 0x1d000
   11594:	ldr	pc, [ip, #2712]!	; 0xa98

00011598 <fflush@plt>:
   11598:	add	ip, pc, #0, 12
   1159c:	add	ip, ip, #118784	; 0x1d000
   115a0:	ldr	pc, [ip, #2704]!	; 0xa90

000115a4 <wcwidth@plt>:
   115a4:	add	ip, pc, #0, 12
   115a8:	add	ip, ip, #118784	; 0x1d000
   115ac:	ldr	pc, [ip, #2696]!	; 0xa88

000115b0 <sigprocmask@plt>:
   115b0:	add	ip, pc, #0, 12
   115b4:	add	ip, ip, #118784	; 0x1d000
   115b8:	ldr	pc, [ip, #2688]!	; 0xa80

000115bc <memmove@plt>:
   115bc:	add	ip, pc, #0, 12
   115c0:	add	ip, ip, #118784	; 0x1d000
   115c4:	ldr	pc, [ip, #2680]!	; 0xa78

000115c8 <free@plt>:
   115c8:	add	ip, pc, #0, 12
   115cc:	add	ip, ip, #118784	; 0x1d000
   115d0:	ldr	pc, [ip, #2672]!	; 0xa70

000115d4 <_exit@plt>:
   115d4:	add	ip, pc, #0, 12
   115d8:	add	ip, ip, #118784	; 0x1d000
   115dc:	ldr	pc, [ip, #2664]!	; 0xa68

000115e0 <memcpy@plt>:
   115e0:	add	ip, pc, #0, 12
   115e4:	add	ip, ip, #118784	; 0x1d000
   115e8:	ldr	pc, [ip, #2656]!	; 0xa60

000115ec <__strtoull_internal@plt>:
   115ec:	add	ip, pc, #0, 12
   115f0:	add	ip, ip, #118784	; 0x1d000
   115f4:	ldr	pc, [ip, #2648]!	; 0xa58

000115f8 <mbsinit@plt>:
   115f8:	add	ip, pc, #0, 12
   115fc:	add	ip, ip, #118784	; 0x1d000
   11600:	ldr	pc, [ip, #2640]!	; 0xa50

00011604 <ftruncate64@plt>:
   11604:	add	ip, pc, #0, 12
   11608:	add	ip, ip, #118784	; 0x1d000
   1160c:	ldr	pc, [ip, #2632]!	; 0xa48

00011610 <fwrite_unlocked@plt>:
   11610:	add	ip, pc, #0, 12
   11614:	add	ip, ip, #118784	; 0x1d000
   11618:	ldr	pc, [ip, #2624]!	; 0xa40

0001161c <memcmp@plt>:
   1161c:	add	ip, pc, #0, 12
   11620:	add	ip, ip, #118784	; 0x1d000
   11624:	ldr	pc, [ip, #2616]!	; 0xa38

00011628 <dcgettext@plt>:
   11628:	add	ip, pc, #0, 12
   1162c:	add	ip, ip, #118784	; 0x1d000
   11630:	ldr	pc, [ip, #2608]!	; 0xa30

00011634 <__stack_chk_fail@plt>:
   11634:	add	ip, pc, #0, 12
   11638:	add	ip, ip, #118784	; 0x1d000
   1163c:	ldr	pc, [ip, #2600]!	; 0xa28

00011640 <dup2@plt>:
   11640:	add	ip, pc, #0, 12
   11644:	add	ip, ip, #118784	; 0x1d000
   11648:	ldr	pc, [ip, #2592]!	; 0xa20

0001164c <realloc@plt>:
   1164c:	add	ip, pc, #0, 12
   11650:	add	ip, ip, #118784	; 0x1d000
   11654:	ldr	pc, [ip, #2584]!	; 0xa18

00011658 <textdomain@plt>:
   11658:	add	ip, pc, #0, 12
   1165c:	add	ip, ip, #118784	; 0x1d000
   11660:	ldr	pc, [ip, #2576]!	; 0xa10

00011664 <iswcntrl@plt>:
   11664:	add	ip, pc, #0, 12
   11668:	add	ip, ip, #118784	; 0x1d000
   1166c:	ldr	pc, [ip, #2568]!	; 0xa08

00011670 <iswprint@plt>:
   11670:	add	ip, pc, #0, 12
   11674:	add	ip, ip, #118784	; 0x1d000
   11678:	ldr	pc, [ip, #2560]!	; 0xa00

0001167c <__fxstat64@plt>:
   1167c:	add	ip, pc, #0, 12
   11680:	add	ip, ip, #118784	; 0x1d000
   11684:	ldr	pc, [ip, #2552]!	; 0x9f8

00011688 <sigaction@plt>:
   11688:	add	ip, pc, #0, 12
   1168c:	add	ip, ip, #118784	; 0x1d000
   11690:	ldr	pc, [ip, #2544]!	; 0x9f0

00011694 <fwrite@plt>:
   11694:	add	ip, pc, #0, 12
   11698:	add	ip, ip, #118784	; 0x1d000
   1169c:	ldr	pc, [ip, #2536]!	; 0x9e8

000116a0 <lseek64@plt>:
   116a0:	add	ip, pc, #0, 12
   116a4:	add	ip, ip, #118784	; 0x1d000
   116a8:	ldr	pc, [ip, #2528]!	; 0x9e0

000116ac <waitpid@plt>:
   116ac:	add	ip, pc, #0, 12
   116b0:	add	ip, ip, #118784	; 0x1d000
   116b4:	ldr	pc, [ip, #2520]!	; 0x9d8

000116b8 <__ctype_get_mb_cur_max@plt>:
   116b8:	add	ip, pc, #0, 12
   116bc:	add	ip, ip, #118784	; 0x1d000
   116c0:	ldr	pc, [ip, #2512]!	; 0x9d0

000116c4 <strcpy@plt>:
   116c4:	add	ip, pc, #0, 12
   116c8:	add	ip, ip, #118784	; 0x1d000
   116cc:	ldr	pc, [ip, #2504]!	; 0x9c8

000116d0 <__fpending@plt>:
   116d0:	add	ip, pc, #0, 12
   116d4:	add	ip, ip, #118784	; 0x1d000
   116d8:	ldr	pc, [ip, #2496]!	; 0x9c0

000116dc <mbrtowc@plt>:
   116dc:	add	ip, pc, #0, 12
   116e0:	add	ip, ip, #118784	; 0x1d000
   116e4:	ldr	pc, [ip, #2488]!	; 0x9b8

000116e8 <error@plt>:
   116e8:	add	ip, pc, #0, 12
   116ec:	add	ip, ip, #118784	; 0x1d000
   116f0:	ldr	pc, [ip, #2480]!	; 0x9b0

000116f4 <open64@plt>:
   116f4:	add	ip, pc, #0, 12
   116f8:	add	ip, ip, #118784	; 0x1d000
   116fc:	ldr	pc, [ip, #2472]!	; 0x9a8

00011700 <getenv@plt>:
   11700:	add	ip, pc, #0, 12
   11704:	add	ip, ip, #118784	; 0x1d000
   11708:	ldr	pc, [ip, #2464]!	; 0x9a0

0001170c <malloc@plt>:
   1170c:	add	ip, pc, #0, 12
   11710:	add	ip, ip, #118784	; 0x1d000
   11714:	ldr	pc, [ip, #2456]!	; 0x998

00011718 <iconv_open@plt>:
   11718:	add	ip, pc, #0, 12
   1171c:	add	ip, ip, #118784	; 0x1d000
   11720:	ldr	pc, [ip, #2448]!	; 0x990

00011724 <sigaddset@plt>:
   11724:	add	ip, pc, #0, 12
   11728:	add	ip, ip, #118784	; 0x1d000
   1172c:	ldr	pc, [ip, #2440]!	; 0x988

00011730 <__libc_start_main@plt>:
   11730:	add	ip, pc, #0, 12
   11734:	add	ip, ip, #118784	; 0x1d000
   11738:	ldr	pc, [ip, #2432]!	; 0x980

0001173c <__freading@plt>:
   1173c:	add	ip, pc, #0, 12
   11740:	add	ip, ip, #118784	; 0x1d000
   11744:	ldr	pc, [ip, #2424]!	; 0x978

00011748 <__gmon_start__@plt>:
   11748:	add	ip, pc, #0, 12
   1174c:	add	ip, ip, #118784	; 0x1d000
   11750:	ldr	pc, [ip, #2416]!	; 0x970

00011754 <getopt_long@plt>:
   11754:	add	ip, pc, #0, 12
   11758:	add	ip, ip, #118784	; 0x1d000
   1175c:	ldr	pc, [ip, #2408]!	; 0x968

00011760 <__ctype_b_loc@plt>:
   11760:	add	ip, pc, #0, 12
   11764:	add	ip, ip, #118784	; 0x1d000
   11768:	ldr	pc, [ip, #2400]!	; 0x960

0001176c <exit@plt>:
   1176c:	add	ip, pc, #0, 12
   11770:	add	ip, ip, #118784	; 0x1d000
   11774:	ldr	pc, [ip, #2392]!	; 0x958

00011778 <iswspace@plt>:
   11778:	add	ip, pc, #0, 12
   1177c:	add	ip, ip, #118784	; 0x1d000
   11780:	ldr	pc, [ip, #2384]!	; 0x950

00011784 <strtoul@plt>:
   11784:	add	ip, pc, #0, 12
   11788:	add	ip, ip, #118784	; 0x1d000
   1178c:	ldr	pc, [ip, #2376]!	; 0x948

00011790 <strlen@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #118784	; 0x1d000
   11798:	ldr	pc, [ip, #2368]!	; 0x940

0001179c <__libc_current_sigrtmax@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #118784	; 0x1d000
   117a4:	ldr	pc, [ip, #2360]!	; 0x938

000117a8 <strchr@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #118784	; 0x1d000
   117b0:	ldr	pc, [ip, #2352]!	; 0x930

000117b4 <setenv@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #118784	; 0x1d000
   117bc:	ldr	pc, [ip, #2344]!	; 0x928

000117c0 <memrchr@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #118784	; 0x1d000
   117c8:	ldr	pc, [ip, #2336]!	; 0x920

000117cc <getpagesize@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #118784	; 0x1d000
   117d4:	ldr	pc, [ip, #2328]!	; 0x918

000117d8 <ungetc@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #118784	; 0x1d000
   117e0:	ldr	pc, [ip, #2320]!	; 0x910

000117e4 <fcntl@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #118784	; 0x1d000
   117ec:	ldr	pc, [ip, #2312]!	; 0x908

000117f0 <__errno_location@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #118784	; 0x1d000
   117f8:	ldr	pc, [ip, #2304]!	; 0x900

000117fc <iswalnum@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #118784	; 0x1d000
   11804:	ldr	pc, [ip, #2296]!	; 0x8f8

00011808 <__sprintf_chk@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #118784	; 0x1d000
   11810:	ldr	pc, [ip, #2288]!	; 0x8f0

00011814 <__cxa_atexit@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #118784	; 0x1d000
   1181c:	ldr	pc, [ip, #2280]!	; 0x8e8

00011820 <__strdup@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #118784	; 0x1d000
   11828:	ldr	pc, [ip, #2272]!	; 0x8e0

0001182c <memset@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #118784	; 0x1d000
   11834:	ldr	pc, [ip, #2264]!	; 0x8d8

00011838 <fscanf@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #118784	; 0x1d000
   11840:	ldr	pc, [ip, #2256]!	; 0x8d0

00011844 <__printf_chk@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #118784	; 0x1d000
   1184c:	ldr	pc, [ip, #2248]!	; 0x8c8

00011850 <write@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #118784	; 0x1d000
   11858:	ldr	pc, [ip, #2240]!	; 0x8c0

0001185c <fileno@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #118784	; 0x1d000
   11864:	ldr	pc, [ip, #2232]!	; 0x8b8

00011868 <__fprintf_chk@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #118784	; 0x1d000
   11870:	ldr	pc, [ip, #2224]!	; 0x8b0

00011874 <memchr@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #118784	; 0x1d000
   1187c:	ldr	pc, [ip, #2216]!	; 0x8a8

00011880 <fclose@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #118784	; 0x1d000
   11888:	ldr	pc, [ip, #2208]!	; 0x8a0

0001188c <strnlen@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #118784	; 0x1d000
   11894:	ldr	pc, [ip, #2200]!	; 0x898

00011898 <pipe@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #118784	; 0x1d000
   118a0:	ldr	pc, [ip, #2192]!	; 0x890

000118a4 <fseeko64@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #118784	; 0x1d000
   118ac:	ldr	pc, [ip, #2184]!	; 0x888

000118b0 <__uflow@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #118784	; 0x1d000
   118b8:	ldr	pc, [ip, #2176]!	; 0x880

000118bc <setlocale@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #118784	; 0x1d000
   118c4:	ldr	pc, [ip, #2168]!	; 0x878

000118c8 <sigemptyset@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #118784	; 0x1d000
   118d0:	ldr	pc, [ip, #2160]!	; 0x870

000118d4 <fork@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #118784	; 0x1d000
   118dc:	ldr	pc, [ip, #2152]!	; 0x868

000118e0 <execl@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #118784	; 0x1d000
   118e8:	ldr	pc, [ip, #2144]!	; 0x860

000118ec <strrchr@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #118784	; 0x1d000
   118f4:	ldr	pc, [ip, #2136]!	; 0x858

000118f8 <nl_langinfo@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #118784	; 0x1d000
   11900:	ldr	pc, [ip, #2128]!	; 0x850

00011904 <clearerr_unlocked@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #118784	; 0x1d000
   1190c:	ldr	pc, [ip, #2120]!	; 0x848

00011910 <bindtextdomain@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #118784	; 0x1d000
   11918:	ldr	pc, [ip, #2112]!	; 0x840

0001191c <__libc_current_sigrtmin@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #118784	; 0x1d000
   11924:	ldr	pc, [ip, #2104]!	; 0x838

00011928 <strncmp@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #118784	; 0x1d000
   11930:	ldr	pc, [ip, #2096]!	; 0x830

00011934 <abort@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #118784	; 0x1d000
   1193c:	ldr	pc, [ip, #2088]!	; 0x828

00011940 <close@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #118784	; 0x1d000
   11948:	ldr	pc, [ip, #2080]!	; 0x820

0001194c <strspn@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #118784	; 0x1d000
   11954:	ldr	pc, [ip, #2072]!	; 0x818

00011958 <__assert_fail@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #118784	; 0x1d000
   11960:	ldr	pc, [ip, #2064]!	; 0x810

Disassembly of section .text:

00011964 <close_stdout@@Base-0x3718>:
   11964:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11968:	sub	sp, sp, #308	; 0x134
   1196c:	ldr	r6, [pc, #3440]	; 126e4 <__assert_fail@plt+0xd8c>
   11970:	mov	ip, #0
   11974:	ldr	r3, [pc, #3436]	; 126e8 <__assert_fail@plt+0xd90>
   11978:	mov	sl, ip
   1197c:	add	r6, pc, r6
   11980:	str	ip, [sp, #24]
   11984:	str	ip, [sp, #80]	; 0x50
   11988:	mov	r7, r1
   1198c:	ldr	r3, [r6, r3]
   11990:	mov	r9, r0
   11994:	ldr	r4, [pc, #3408]	; 126ec <__assert_fail@plt+0xd94>
   11998:	ldr	r3, [r3]
   1199c:	add	r4, pc, r4
   119a0:	str	r3, [sp, #300]	; 0x12c
   119a4:	bl	117cc <getpagesize@plt>
   119a8:	mov	r2, #0
   119ac:	mov	r3, #0
   119b0:	strd	r2, [sp, #112]	; 0x70
   119b4:	str	r0, [sp, #60]	; 0x3c
   119b8:	ldr	r0, [r7]
   119bc:	bl	15448 <close_stdout@@Base+0x3cc>
   119c0:	ldr	r1, [pc, #3368]	; 126f0 <__assert_fail@plt+0xd98>
   119c4:	mov	r0, #6
   119c8:	add	r1, pc, r1
   119cc:	bl	118bc <setlocale@plt>
   119d0:	ldr	r1, [pc, #3356]	; 126f4 <__assert_fail@plt+0xd9c>
   119d4:	mov	r0, r4
   119d8:	add	r1, pc, r1
   119dc:	bl	11910 <bindtextdomain@plt>
   119e0:	mov	r0, r4
   119e4:	bl	11658 <textdomain@plt>
   119e8:	ldr	r3, [pc, #3336]	; 126f8 <__assert_fail@plt+0xda0>
   119ec:	ldr	r4, [pc, #3336]	; 126fc <__assert_fail@plt+0xda4>
   119f0:	ldr	r0, [r6, r3]
   119f4:	add	r4, pc, r4
   119f8:	bl	1cd20 <close_stdout@@Base+0x7ca4>
   119fc:	ldr	lr, [pc, #3324]	; 12700 <__assert_fail@plt+0xda8>
   11a00:	ldr	r3, [pc, #3324]	; 12704 <__assert_fail@plt+0xdac>
   11a04:	add	r4, r4, #16
   11a08:	ldr	r0, [pc, #3320]	; 12708 <__assert_fail@plt+0xdb0>
   11a0c:	add	lr, pc, lr
   11a10:	ldr	r2, [pc, #3316]	; 1270c <__assert_fail@plt+0xdb4>
   11a14:	ldr	ip, [pc, #3316]	; 12710 <__assert_fail@plt+0xdb8>
   11a18:	add	r0, pc, r0
   11a1c:	ldr	r1, [pc, #3312]	; 12714 <__assert_fail@plt+0xdbc>
   11a20:	add	r2, pc, r2
   11a24:	add	ip, pc, ip
   11a28:	str	r4, [sp, #32]
   11a2c:	add	r1, pc, r1
   11a30:	str	ip, [lr, #300]	; 0x12c
   11a34:	add	r0, r0, #16
   11a38:	str	r1, [lr, #12]
   11a3c:	str	r0, [sp, #40]	; 0x28
   11a40:	add	r2, r2, #16
   11a44:	str	r2, [sp, #48]	; 0x30
   11a48:	ldr	r8, [r6, r3]
   11a4c:	ldr	fp, [r8]
   11a50:	mov	r5, #0
   11a54:	ldr	r2, [pc, #3260]	; 12718 <__assert_fail@plt+0xdc0>
   11a58:	mov	r0, r9
   11a5c:	ldr	r3, [pc, #3256]	; 1271c <__assert_fail@plt+0xdc4>
   11a60:	cmp	fp, r5
   11a64:	str	r5, [sp]
   11a68:	mov	r1, r7
   11a6c:	add	r2, pc, r2
   11a70:	add	r3, pc, r3
   11a74:	moveq	fp, #1
   11a78:	bl	11754 <getopt_long@plt>
   11a7c:	cmn	r0, #1
   11a80:	mov	r4, r0
   11a84:	beq	120f0 <__assert_fail@plt+0x798>
   11a88:	cmp	r0, #100	; 0x64
   11a8c:	beq	11f08 <__assert_fail@plt+0x5b0>
   11a90:	ble	11af4 <__assert_fail@plt+0x19c>
   11a94:	cmp	r0, #117	; 0x75
   11a98:	beq	12054 <__assert_fail@plt+0x6fc>
   11a9c:	ble	11b3c <__assert_fail@plt+0x1e4>
   11aa0:	movw	r3, #257	; 0x101
   11aa4:	cmp	r0, r3
   11aa8:	beq	12038 <__assert_fail@plt+0x6e0>
   11aac:	ble	11ea0 <__assert_fail@plt+0x548>
   11ab0:	movw	r3, #258	; 0x102
   11ab4:	cmp	r0, r3
   11ab8:	beq	11bcc <__assert_fail@plt+0x274>
   11abc:	add	r3, r3, #1
   11ac0:	cmp	r0, r3
   11ac4:	bne	11b34 <__assert_fail@plt+0x1dc>
   11ac8:	ldr	r3, [pc, #3152]	; 12720 <__assert_fail@plt+0xdc8>
   11acc:	ldr	r4, [r6, r3]
   11ad0:	ldr	r5, [r4]
   11ad4:	mov	r0, r5
   11ad8:	bl	15194 <close_stdout@@Base+0x118>
   11adc:	cmp	r5, r0
   11ae0:	bne	133b4 <__assert_fail@plt+0x1a5c>
   11ae4:	ldr	r3, [pc, #3128]	; 12724 <__assert_fail@plt+0xdcc>
   11ae8:	add	r3, pc, r3
   11aec:	str	r5, [r3, #20]
   11af0:	b	11a4c <__assert_fail@plt+0xf4>
   11af4:	cmp	r0, #57	; 0x39
   11af8:	bgt	11b1c <__assert_fail@plt+0x1c4>
   11afc:	cmp	r0, #48	; 0x30
   11b00:	bge	12000 <__assert_fail@plt+0x6a8>
   11b04:	cmn	r0, #3
   11b08:	beq	11b68 <__assert_fail@plt+0x210>
   11b0c:	cmn	r0, #2
   11b10:	bne	11b34 <__assert_fail@plt+0x1dc>
   11b14:	mov	r0, r5
   11b18:	bl	14dc8 <__assert_fail@plt+0x3470>
   11b1c:	cmp	r0, #97	; 0x61
   11b20:	beq	11ebc <__assert_fail@plt+0x564>
   11b24:	cmp	r0, #98	; 0x62
   11b28:	beq	11dc4 <__assert_fail@plt+0x46c>
   11b2c:	cmp	r0, #67	; 0x43
   11b30:	beq	11e44 <__assert_fail@plt+0x4ec>
   11b34:	mov	r0, #1
   11b38:	bl	14dc8 <__assert_fail@plt+0x3470>
   11b3c:	cmp	r0, #108	; 0x6c
   11b40:	beq	11fb4 <__assert_fail@plt+0x65c>
   11b44:	cmp	r0, #110	; 0x6e
   11b48:	beq	11c4c <__assert_fail@plt+0x2f4>
   11b4c:	cmp	r0, #101	; 0x65
   11b50:	bne	11b34 <__assert_fail@plt+0x1dc>
   11b54:	ldr	r3, [pc, #3020]	; 12728 <__assert_fail@plt+0xdd0>
   11b58:	mov	r2, #1
   11b5c:	add	r3, pc, r3
   11b60:	strb	r2, [r3, #296]	; 0x128
   11b64:	b	11a4c <__assert_fail@plt+0xf4>
   11b68:	ldr	r2, [pc, #3248]	; 12820 <__assert_fail@plt+0xec8>
   11b6c:	ldr	r3, [pc, #3000]	; 1272c <__assert_fail@plt+0xdd4>
   11b70:	ldr	r0, [pc, #3000]	; 12730 <__assert_fail@plt+0xdd8>
   11b74:	ldr	r2, [r6, r2]
   11b78:	ldr	r3, [r6, r3]
   11b7c:	add	r0, pc, r0
   11b80:	ldr	r1, [pc, #2988]	; 12734 <__assert_fail@plt+0xddc>
   11b84:	ldr	r4, [r2]
   11b88:	add	r1, pc, r1
   11b8c:	ldr	r6, [r3]
   11b90:	bl	15e3c <close_stdout@@Base+0xdc0>
   11b94:	ldr	r2, [pc, #2972]	; 12738 <__assert_fail@plt+0xde0>
   11b98:	ldr	r1, [pc, #2972]	; 1273c <__assert_fail@plt+0xde4>
   11b9c:	add	r2, pc, r2
   11ba0:	str	r2, [sp, #4]
   11ba4:	ldr	r2, [pc, #2964]	; 12740 <__assert_fail@plt+0xde8>
   11ba8:	mov	r3, r6
   11bac:	str	r5, [sp, #8]
   11bb0:	add	r1, pc, r1
   11bb4:	add	r2, pc, r2
   11bb8:	str	r0, [sp]
   11bbc:	mov	r0, r4
   11bc0:	bl	183d8 <close_stdout@@Base+0x335c>
   11bc4:	mov	r0, r5
   11bc8:	bl	1176c <exit@plt>
   11bcc:	ldr	r0, [pc, #2892]	; 12720 <__assert_fail@plt+0xdc8>
   11bd0:	mov	r1, r5
   11bd4:	ldr	ip, [sp, #32]
   11bd8:	mov	r2, #10
   11bdc:	add	r3, sp, #128	; 0x80
   11be0:	ldr	r4, [r6, r0]
   11be4:	str	ip, [sp]
   11be8:	ldr	r0, [r4]
   11bec:	bl	18d20 <close_stdout@@Base+0x3ca4>
   11bf0:	cmp	r0, #0
   11bf4:	bne	11c20 <__assert_fail@plt+0x2c8>
   11bf8:	ldrd	r2, [sp, #128]	; 0x80
   11bfc:	orrs	r0, r2, r3
   11c00:	beq	11c20 <__assert_fail@plt+0x2c8>
   11c04:	ldr	ip, [sp, #60]	; 0x3c
   11c08:	mov	r1, #0
   11c0c:	mvn	r0, ip
   11c10:	cmp	r3, r1
   11c14:	cmpeq	r2, r0
   11c18:	strls	r2, [sp, #80]	; 0x50
   11c1c:	bls	11a4c <__assert_fail@plt+0xf4>
   11c20:	ldr	r1, [pc, #2844]	; 12744 <__assert_fail@plt+0xdec>
   11c24:	mov	r2, #5
   11c28:	mov	r0, #0
   11c2c:	add	r1, pc, r1
   11c30:	bl	11628 <dcgettext@plt>
   11c34:	ldr	r3, [r4]
   11c38:	mov	r2, r0
   11c3c:	mov	r0, #0
   11c40:	mov	r1, r0
   11c44:	bl	116e8 <error@plt>
   11c48:	b	11a4c <__assert_fail@plt+0xf4>
   11c4c:	cmp	sl, #0
   11c50:	bne	122c4 <__assert_fail@plt+0x96c>
   11c54:	bl	11760 <__ctype_b_loc@plt>
   11c58:	ldr	r3, [pc, #2752]	; 12720 <__assert_fail@plt+0xdc8>
   11c5c:	ldr	r4, [r6, r3]
   11c60:	ldr	r3, [r4]
   11c64:	b	11c6c <__assert_fail@plt+0x314>
   11c68:	str	r3, [r4]
   11c6c:	mov	r5, r3
   11c70:	ldrb	r2, [r3], #1
   11c74:	ldr	r1, [r0]
   11c78:	lsl	r2, r2, #1
   11c7c:	ldrh	r2, [r1, r2]
   11c80:	tst	r2, #8192	; 0x2000
   11c84:	bne	11c68 <__assert_fail@plt+0x310>
   11c88:	ldr	r1, [pc, #2744]	; 12748 <__assert_fail@plt+0xdf0>
   11c8c:	mov	r0, r5
   11c90:	mov	r2, #2
   11c94:	add	r1, pc, r1
   11c98:	bl	11928 <strncmp@plt>
   11c9c:	cmp	r0, #0
   11ca0:	beq	12078 <__assert_fail@plt+0x720>
   11ca4:	ldr	r1, [pc, #2720]	; 1274c <__assert_fail@plt+0xdf4>
   11ca8:	mov	r0, r5
   11cac:	mov	r2, #2
   11cb0:	add	r1, pc, r1
   11cb4:	bl	11928 <strncmp@plt>
   11cb8:	cmp	r0, #0
   11cbc:	addeq	r5, r5, #2
   11cc0:	streq	r5, [r4]
   11cc4:	moveq	sl, #6
   11cc8:	movne	sl, #5
   11ccc:	ldr	r5, [r4]
   11cd0:	mov	r1, #47	; 0x2f
   11cd4:	mov	r0, r5
   11cd8:	bl	117a8 <strchr@plt>
   11cdc:	subs	fp, r0, #0
   11ce0:	beq	12280 <__assert_fail@plt+0x928>
   11ce4:	ldr	ip, [pc, #2660]	; 12750 <__assert_fail@plt+0xdf8>
   11ce8:	mov	r3, #0
   11cec:	mov	r5, fp
   11cf0:	mov	r1, r3
   11cf4:	strb	r3, [r5], #1
   11cf8:	add	ip, pc, ip
   11cfc:	mov	r2, #10
   11d00:	mov	r0, r5
   11d04:	str	ip, [sp]
   11d08:	add	r3, sp, #120	; 0x78
   11d0c:	bl	18d20 <close_stdout@@Base+0x3ca4>
   11d10:	cmp	r0, #0
   11d14:	bne	11d24 <__assert_fail@plt+0x3cc>
   11d18:	ldrd	r2, [sp, #120]	; 0x78
   11d1c:	orrs	r0, r2, r3
   11d20:	bne	11d4c <__assert_fail@plt+0x3f4>
   11d24:	ldr	r1, [pc, #2600]	; 12754 <__assert_fail@plt+0xdfc>
   11d28:	mov	r2, #5
   11d2c:	mov	r0, #0
   11d30:	add	r1, pc, r1
   11d34:	bl	11628 <dcgettext@plt>
   11d38:	mov	r3, r5
   11d3c:	mov	r1, #0
   11d40:	mov	r2, r0
   11d44:	mov	r0, #1
   11d48:	bl	116e8 <error@plt>
   11d4c:	ldr	r0, [r4]
   11d50:	cmp	fp, r0
   11d54:	beq	11a4c <__assert_fail@plt+0xf4>
   11d58:	ldr	ip, [pc, #2552]	; 12758 <__assert_fail@plt+0xe00>
   11d5c:	mov	r1, #0
   11d60:	mov	r2, #10
   11d64:	add	r3, sp, #112	; 0x70
   11d68:	add	ip, pc, ip
   11d6c:	str	ip, [sp]
   11d70:	bl	18d20 <close_stdout@@Base+0x3ca4>
   11d74:	cmp	r0, #0
   11d78:	bne	11d98 <__assert_fail@plt+0x440>
   11d7c:	ldrd	r0, [sp, #112]	; 0x70
   11d80:	orrs	r2, r0, r1
   11d84:	beq	11d98 <__assert_fail@plt+0x440>
   11d88:	ldrd	r2, [sp, #120]	; 0x78
   11d8c:	cmp	r1, r3
   11d90:	cmpeq	r0, r2
   11d94:	bls	11a4c <__assert_fail@plt+0xf4>
   11d98:	ldr	r1, [pc, #2492]	; 1275c <__assert_fail@plt+0xe04>
   11d9c:	mov	r0, #0
   11da0:	add	r1, pc, r1
   11da4:	mov	r2, #5
   11da8:	bl	11628 <dcgettext@plt>
   11dac:	ldr	r3, [r4]
   11db0:	mov	r1, #0
   11db4:	mov	r2, r0
   11db8:	mov	r0, #1
   11dbc:	bl	116e8 <error@plt>
   11dc0:	b	11a4c <__assert_fail@plt+0xf4>
   11dc4:	cmp	sl, #0
   11dc8:	bne	122c4 <__assert_fail@plt+0x96c>
   11dcc:	ldr	r0, [pc, #2380]	; 12720 <__assert_fail@plt+0xdc8>
   11dd0:	mov	r1, sl
   11dd4:	ldr	ip, [sp, #40]	; 0x28
   11dd8:	mov	r2, #10
   11ddc:	add	r3, sp, #120	; 0x78
   11de0:	ldr	r4, [r6, r0]
   11de4:	str	ip, [sp]
   11de8:	ldr	r0, [r4]
   11dec:	bl	18d20 <close_stdout@@Base+0x3ca4>
   11df0:	cmp	r0, #0
   11df4:	bne	1336c <__assert_fail@plt+0x1a14>
   11df8:	ldrd	r2, [sp, #120]	; 0x78
   11dfc:	orrs	r0, r2, r3
   11e00:	beq	1336c <__assert_fail@plt+0x1a14>
   11e04:	cmp	r2, #0
   11e08:	sbcs	r1, r3, #0
   11e0c:	movge	sl, #1
   11e10:	bge	11a4c <__assert_fail@plt+0xf4>
   11e14:	ldr	r1, [pc, #2372]	; 12760 <__assert_fail@plt+0xe08>
   11e18:	mov	r2, #5
   11e1c:	mov	r0, #0
   11e20:	mov	sl, #1
   11e24:	add	r1, pc, r1
   11e28:	bl	11628 <dcgettext@plt>
   11e2c:	ldr	r3, [r4]
   11e30:	mov	r1, #27
   11e34:	mov	r2, r0
   11e38:	mov	r0, sl
   11e3c:	bl	116e8 <error@plt>
   11e40:	b	11a4c <__assert_fail@plt+0xf4>
   11e44:	cmp	sl, #0
   11e48:	bne	122c4 <__assert_fail@plt+0x96c>
   11e4c:	ldr	r0, [pc, #2252]	; 12720 <__assert_fail@plt+0xdc8>
   11e50:	mov	r1, sl
   11e54:	ldr	ip, [sp, #48]	; 0x30
   11e58:	mov	r2, #10
   11e5c:	add	r3, sp, #120	; 0x78
   11e60:	ldr	r4, [r6, r0]
   11e64:	str	ip, [sp]
   11e68:	ldr	r0, [r4]
   11e6c:	bl	18d20 <close_stdout@@Base+0x3ca4>
   11e70:	cmp	r0, #0
   11e74:	bne	13230 <__assert_fail@plt+0x18d8>
   11e78:	ldrd	r2, [sp, #120]	; 0x78
   11e7c:	mvn	r0, #1
   11e80:	mov	r1, #0
   11e84:	subs	r2, r2, #1
   11e88:	sbc	r3, r3, #0
   11e8c:	cmp	r3, r1
   11e90:	cmpeq	r2, r0
   11e94:	bhi	13230 <__assert_fail@plt+0x18d8>
   11e98:	mov	sl, #2
   11e9c:	b	11a4c <__assert_fail@plt+0xf4>
   11ea0:	cmp	r0, #256	; 0x100
   11ea4:	bne	11b34 <__assert_fail@plt+0x1dc>
   11ea8:	ldr	r3, [pc, #2228]	; 12764 <__assert_fail@plt+0xe0c>
   11eac:	mov	r2, #1
   11eb0:	add	r3, pc, r3
   11eb4:	strb	r2, [r3, #44]	; 0x2c
   11eb8:	b	11a4c <__assert_fail@plt+0xf4>
   11ebc:	ldr	r0, [pc, #2140]	; 12720 <__assert_fail@plt+0xdc8>
   11ec0:	mov	r1, r5
   11ec4:	ldr	ip, [pc, #2204]	; 12768 <__assert_fail@plt+0xe10>
   11ec8:	mov	r2, #10
   11ecc:	add	r3, sp, #128	; 0x80
   11ed0:	ldr	r4, [r6, r0]
   11ed4:	add	ip, pc, ip
   11ed8:	str	ip, [sp]
   11edc:	ldr	r0, [r4]
   11ee0:	bl	187e8 <close_stdout@@Base+0x376c>
   11ee4:	cmp	r0, #0
   11ee8:	bne	1335c <__assert_fail@plt+0x1a04>
   11eec:	ldr	r3, [sp, #128]	; 0x80
   11ef0:	cmn	r3, #-1073741823	; 0xc0000001
   11ef4:	bhi	1335c <__assert_fail@plt+0x1a04>
   11ef8:	ldr	r2, [pc, #2156]	; 1276c <__assert_fail@plt+0xe14>
   11efc:	add	r2, pc, r2
   11f00:	str	r3, [r2, #4]
   11f04:	b	11a4c <__assert_fail@plt+0xf4>
   11f08:	ldr	r2, [pc, #2144]	; 12770 <__assert_fail@plt+0xe18>
   11f0c:	ldr	r3, [pc, #2060]	; 12720 <__assert_fail@plt+0xdc8>
   11f10:	add	r2, pc, r2
   11f14:	ldr	r1, [pc, #2136]	; 12774 <__assert_fail@plt+0xe1c>
   11f18:	add	r1, pc, r1
   11f1c:	str	r1, [r2]
   11f20:	ldr	r4, [r6, r3]
   11f24:	ldr	fp, [r4]
   11f28:	cmp	fp, #0
   11f2c:	beq	11a4c <__assert_fail@plt+0xf4>
   11f30:	mov	r0, fp
   11f34:	str	r1, [sp, #20]
   11f38:	bl	11790 <strlen@plt>
   11f3c:	ldr	r1, [sp, #20]
   11f40:	mov	r3, r0
   11f44:	mov	r0, fp
   11f48:	str	r3, [sp, #16]
   11f4c:	bl	1194c <strspn@plt>
   11f50:	ldr	r3, [sp, #16]
   11f54:	cmp	r3, r0
   11f58:	bne	13400 <__assert_fail@plt+0x1aa8>
   11f5c:	ldrb	r3, [fp]
   11f60:	cmp	r3, #48	; 0x30
   11f64:	bne	11fa4 <__assert_fail@plt+0x64c>
   11f68:	ldrb	r3, [fp, #1]
   11f6c:	cmp	r3, #0
   11f70:	movne	r0, fp
   11f74:	bne	11f8c <__assert_fail@plt+0x634>
   11f78:	b	11fa4 <__assert_fail@plt+0x64c>
   11f7c:	ldrb	r2, [r3, #1]
   11f80:	cmp	r2, #0
   11f84:	beq	11fa0 <__assert_fail@plt+0x648>
   11f88:	mov	r0, r3
   11f8c:	add	r3, r0, #1
   11f90:	str	r3, [r4]
   11f94:	ldrb	r2, [r0, #1]
   11f98:	cmp	r2, #48	; 0x30
   11f9c:	beq	11f7c <__assert_fail@plt+0x624>
   11fa0:	mov	fp, r3
   11fa4:	ldr	r3, [pc, #1996]	; 12778 <__assert_fail@plt+0xe20>
   11fa8:	add	r3, pc, r3
   11fac:	str	fp, [r3, #36]	; 0x24
   11fb0:	b	11a4c <__assert_fail@plt+0xf4>
   11fb4:	cmp	sl, #0
   11fb8:	bne	122c4 <__assert_fail@plt+0x96c>
   11fbc:	ldr	ip, [pc, #1884]	; 12720 <__assert_fail@plt+0xdc8>
   11fc0:	mov	r1, sl
   11fc4:	ldr	r0, [pc, #1968]	; 1277c <__assert_fail@plt+0xe24>
   11fc8:	mov	r2, #10
   11fcc:	add	r3, sp, #120	; 0x78
   11fd0:	ldr	r4, [r6, ip]
   11fd4:	add	r0, pc, r0
   11fd8:	str	r0, [sp]
   11fdc:	ldr	r0, [r4]
   11fe0:	bl	18d20 <close_stdout@@Base+0x3ca4>
   11fe4:	cmp	r0, #0
   11fe8:	bne	1337c <__assert_fail@plt+0x1a24>
   11fec:	ldrd	r2, [sp, #120]	; 0x78
   11ff0:	orrs	ip, r2, r3
   11ff4:	beq	1337c <__assert_fail@plt+0x1a24>
   11ff8:	mov	sl, #3
   11ffc:	b	11a4c <__assert_fail@plt+0xf4>
   12000:	cmp	sl, #0
   12004:	beq	12068 <__assert_fail@plt+0x710>
   12008:	cmp	sl, #4
   1200c:	bne	122c4 <__assert_fail@plt+0x96c>
   12010:	ldr	ip, [sp, #24]
   12014:	cmp	ip, fp
   12018:	cmpne	ip, #0
   1201c:	beq	12088 <__assert_fail@plt+0x730>
   12020:	sub	r0, r4, #48	; 0x30
   12024:	asr	r1, r0, #31
   12028:	strd	r0, [sp, #120]	; 0x78
   1202c:	mov	sl, #4
   12030:	str	fp, [sp, #24]
   12034:	b	11a4c <__assert_fail@plt+0xf4>
   12038:	ldr	r2, [pc, #1760]	; 12720 <__assert_fail@plt+0xdc8>
   1203c:	ldr	r3, [pc, #1852]	; 12780 <__assert_fail@plt+0xe28>
   12040:	ldr	r2, [r6, r2]
   12044:	add	r3, pc, r3
   12048:	ldr	r2, [r2]
   1204c:	str	r2, [r3, #40]	; 0x28
   12050:	b	11a4c <__assert_fail@plt+0xf4>
   12054:	ldr	r3, [pc, #1832]	; 12784 <__assert_fail@plt+0xe2c>
   12058:	mov	r2, #1
   1205c:	add	r3, pc, r3
   12060:	strb	r2, [r3, #304]	; 0x130
   12064:	b	11a4c <__assert_fail@plt+0xf4>
   12068:	mov	r2, #0
   1206c:	mov	r3, #0
   12070:	strd	r2, [sp, #120]	; 0x78
   12074:	b	12010 <__assert_fail@plt+0x6b8>
   12078:	add	r5, r5, #2
   1207c:	mov	sl, #7
   12080:	str	r5, [r4]
   12084:	b	11ccc <__assert_fail@plt+0x374>
   12088:	ldrd	r2, [sp, #120]	; 0x78
   1208c:	movw	r0, #39321	; 0x9999
   12090:	movw	r1, #39321	; 0x9999
   12094:	movt	r0, #39321	; 0x9999
   12098:	movt	r1, #6553	; 0x1999
   1209c:	cmp	r3, r1
   120a0:	cmpeq	r2, r0
   120a4:	bls	13a00 <__assert_fail@plt+0x20a8>
   120a8:	ldr	r1, [pc, #1752]	; 12788 <__assert_fail@plt+0xe30>
   120ac:	mov	r2, #5
   120b0:	mov	r0, #0
   120b4:	str	fp, [sp, #24]
   120b8:	add	r1, pc, r1
   120bc:	mov	sl, #4
   120c0:	bl	11628 <dcgettext@plt>
   120c4:	add	r2, sp, #276	; 0x114
   120c8:	mov	r5, r0
   120cc:	ldrd	r0, [sp, #120]	; 0x78
   120d0:	bl	153e4 <close_stdout@@Base+0x368>
   120d4:	mov	r2, r5
   120d8:	str	r4, [sp]
   120dc:	mov	r1, #0
   120e0:	mov	r3, r0
   120e4:	mov	r0, #1
   120e8:	bl	116e8 <error@plt>
   120ec:	b	11a4c <__assert_fail@plt+0xf4>
   120f0:	ldrd	r2, [sp, #112]	; 0x70
   120f4:	orrs	r0, r2, r3
   120f8:	beq	1213c <__assert_fail@plt+0x7e4>
   120fc:	ldr	r3, [pc, #1672]	; 1278c <__assert_fail@plt+0xe34>
   12100:	add	r3, pc, r3
   12104:	ldr	r3, [r3, #40]	; 0x28
   12108:	cmp	r3, #0
   1210c:	beq	1213c <__assert_fail@plt+0x7e4>
   12110:	ldr	r1, [pc, #1656]	; 12790 <__assert_fail@plt+0xe38>
   12114:	mov	r2, #5
   12118:	mov	r0, r5
   1211c:	add	r1, pc, r1
   12120:	bl	11628 <dcgettext@plt>
   12124:	mov	r1, r5
   12128:	mov	r2, r0
   1212c:	mov	r0, r5
   12130:	bl	116e8 <error@plt>
   12134:	mov	r0, #1
   12138:	bl	14dc8 <__assert_fail@plt+0x3470>
   1213c:	cmp	sl, #0
   12140:	bne	12240 <__assert_fail@plt+0x8e8>
   12144:	mov	r2, #1000	; 0x3e8
   12148:	mov	r3, #0
   1214c:	mov	r4, r2
   12150:	mov	r5, r3
   12154:	mov	sl, #3
   12158:	str	r2, [sp, #120]	; 0x78
   1215c:	str	r3, [sp, #124]	; 0x7c
   12160:	ldr	r3, [pc, #1580]	; 12794 <__assert_fail@plt+0xe3c>
   12164:	add	r3, pc, r3
   12168:	ldr	r3, [r3, #36]	; 0x24
   1216c:	cmp	r3, #0
   12170:	ldrne	r3, [pc, #1568]	; 12798 <__assert_fail@plt+0xe40>
   12174:	movne	r2, #0
   12178:	addne	r3, pc, r3
   1217c:	strbne	r2, [r3]
   12180:	sub	ip, sl, #5
   12184:	str	ip, [sp, #24]
   12188:	cmp	ip, #2
   1218c:	bls	13274 <__assert_fail@plt+0x191c>
   12190:	ldr	r3, [pc, #1540]	; 1279c <__assert_fail@plt+0xe44>
   12194:	add	r3, pc, r3
   12198:	ldr	fp, [r3, #4]
   1219c:	cmp	fp, #0
   121a0:	beq	1325c <__assert_fail@plt+0x1904>
   121a4:	ldr	r3, [pc, #1524]	; 127a0 <__assert_fail@plt+0xe48>
   121a8:	mov	r2, #0
   121ac:	add	r3, pc, r3
   121b0:	strb	r2, [r3]
   121b4:	ldr	r3, [r8]
   121b8:	cmp	r9, r3
   121bc:	ble	122f0 <__assert_fail@plt+0x998>
   121c0:	ldr	r2, [pc, #1500]	; 127a4 <__assert_fail@plt+0xe4c>
   121c4:	add	r1, r3, #1
   121c8:	str	r1, [r8]
   121cc:	cmp	r9, r1
   121d0:	ldr	r0, [r7, r3, lsl #2]
   121d4:	add	r2, pc, r2
   121d8:	lsl	r1, r3, #2
   121dc:	str	r0, [r2, #300]	; 0x12c
   121e0:	ble	122f0 <__assert_fail@plt+0x998>
   121e4:	add	r1, r7, r1
   121e8:	add	r3, r3, #2
   121ec:	cmp	r9, r3
   121f0:	str	r3, [r8]
   121f4:	ldr	r3, [r1, #4]
   121f8:	str	r3, [r2, #12]
   121fc:	ble	122f0 <__assert_fail@plt+0x998>
   12200:	ldr	r1, [pc, #1440]	; 127a8 <__assert_fail@plt+0xe50>
   12204:	mov	r2, #5
   12208:	mov	r0, #0
   1220c:	add	r1, pc, r1
   12210:	bl	11628 <dcgettext@plt>
   12214:	ldr	r3, [r8]
   12218:	mov	r4, r0
   1221c:	ldr	r0, [r7, r3, lsl #2]
   12220:	bl	17860 <close_stdout@@Base+0x27e4>
   12224:	mov	r2, r4
   12228:	mov	r3, r0
   1222c:	mov	r0, #0
   12230:	mov	r1, r0
   12234:	bl	116e8 <error@plt>
   12238:	mov	r0, #1
   1223c:	bl	14dc8 <__assert_fail@plt+0x3470>
   12240:	ldrd	r4, [sp, #120]	; 0x78
   12244:	orrs	r1, r4, r5
   12248:	bne	12160 <__assert_fail@plt+0x808>
   1224c:	ldr	r1, [pc, #1368]	; 127ac <__assert_fail@plt+0xe54>
   12250:	mov	r2, #5
   12254:	mov	r0, #0
   12258:	add	r1, pc, r1
   1225c:	bl	11628 <dcgettext@plt>
   12260:	ldr	r3, [pc, #1352]	; 127b0 <__assert_fail@plt+0xe58>
   12264:	add	r3, pc, r3
   12268:	mov	r2, r0
   1226c:	mov	r0, #0
   12270:	mov	r1, r0
   12274:	bl	116e8 <error@plt>
   12278:	mov	r0, #1
   1227c:	bl	14dc8 <__assert_fail@plt+0x3470>
   12280:	ldr	ip, [pc, #1324]	; 127b4 <__assert_fail@plt+0xe5c>
   12284:	mov	r0, r5
   12288:	mov	r1, fp
   1228c:	mov	r2, #10
   12290:	add	ip, pc, ip
   12294:	add	r3, sp, #120	; 0x78
   12298:	str	ip, [sp]
   1229c:	bl	18d20 <close_stdout@@Base+0x3ca4>
   122a0:	cmp	r0, #0
   122a4:	bne	122b4 <__assert_fail@plt+0x95c>
   122a8:	ldrd	r2, [sp, #120]	; 0x78
   122ac:	orrs	ip, r2, r3
   122b0:	bne	11a4c <__assert_fail@plt+0xf4>
   122b4:	ldr	r1, [pc, #1276]	; 127b8 <__assert_fail@plt+0xe60>
   122b8:	mov	r0, #0
   122bc:	add	r1, pc, r1
   122c0:	b	11da4 <__assert_fail@plt+0x44c>
   122c4:	ldr	r1, [pc, #1264]	; 127bc <__assert_fail@plt+0xe64>
   122c8:	mov	r0, #0
   122cc:	add	r1, pc, r1
   122d0:	mov	r2, #5
   122d4:	bl	11628 <dcgettext@plt>
   122d8:	mov	r2, r0
   122dc:	mov	r0, #0
   122e0:	mov	r1, r0
   122e4:	bl	116e8 <error@plt>
   122e8:	mov	r0, #1
   122ec:	bl	14dc8 <__assert_fail@plt+0x3470>
   122f0:	ldr	r4, [pc, #1224]	; 127c0 <__assert_fail@plt+0xe68>
   122f4:	add	r4, pc, r4
   122f8:	ldr	r0, [r4, #36]	; 0x24
   122fc:	cmp	r0, #0
   12300:	beq	12314 <__assert_fail@plt+0x9bc>
   12304:	bl	11790 <strlen@plt>
   12308:	ldr	r3, [r4, #4]
   1230c:	cmp	r0, r3
   12310:	bhi	133f0 <__assert_fail@plt+0x1a98>
   12314:	ldr	r3, [pc, #1192]	; 127c4 <__assert_fail@plt+0xe6c>
   12318:	add	r3, pc, r3
   1231c:	ldr	r1, [r3, #300]	; 0x12c
   12320:	ldrb	r3, [r1]
   12324:	cmp	r3, #45	; 0x2d
   12328:	beq	1338c <__assert_fail@plt+0x1a34>
   1232c:	mov	r0, #0
   12330:	mov	r2, r0
   12334:	mov	r3, r0
   12338:	bl	152a4 <close_stdout@@Base+0x228>
   1233c:	cmp	r0, #0
   12340:	blt	139b0 <__assert_fail@plt+0x2058>
   12344:	ldr	r4, [pc, #1148]	; 127c8 <__assert_fail@plt+0xe70>
   12348:	mov	r0, #3
   1234c:	mov	r1, #0
   12350:	add	r4, pc, r4
   12354:	add	r2, r4, #48	; 0x30
   12358:	bl	1167c <__fxstat64@plt>
   1235c:	cmp	r0, #0
   12360:	bne	13454 <__assert_fail@plt+0x1afc>
   12364:	ldr	r7, [sp, #80]	; 0x50
   12368:	cmp	r7, #0
   1236c:	bne	1239c <__assert_fail@plt+0xa44>
   12370:	ldr	r2, [pc, #1108]	; 127cc <__assert_fail@plt+0xe74>
   12374:	mov	r3, #0
   12378:	movt	r3, #8191	; 0x1fff
   1237c:	add	r2, pc, r2
   12380:	ldr	r2, [r2, #104]	; 0x68
   12384:	str	r2, [sp, #80]	; 0x50
   12388:	sub	r2, r2, #65536	; 0x10000
   1238c:	ldr	ip, [sp, #80]	; 0x50
   12390:	cmp	r2, r3
   12394:	movhi	ip, #65536	; 0x10000
   12398:	str	ip, [sp, #80]	; 0x50
   1239c:	ldr	r7, [sp, #24]
   123a0:	cmp	r7, #1
   123a4:	bls	134e4 <__assert_fail@plt+0x1b8c>
   123a8:	ldr	r7, [sp, #80]	; 0x50
   123ac:	ldr	ip, [sp, #60]	; 0x3c
   123b0:	add	r0, r7, ip
   123b4:	bl	184e8 <close_stdout@@Base+0x346c>
   123b8:	ldr	r7, [sp, #60]	; 0x3c
   123bc:	sub	r4, r7, #1
   123c0:	mov	r1, r7
   123c4:	add	r4, r0, r4
   123c8:	mov	r0, r4
   123cc:	bl	1c318 <close_stdout@@Base+0x729c>
   123d0:	ldr	r3, [pc, #1016]	; 127d0 <__assert_fail@plt+0xe78>
   123d4:	add	r3, pc, r3
   123d8:	ldr	r2, [r3, #40]	; 0x28
   123dc:	cmp	r2, #0
   123e0:	rsb	r4, r1, r4
   123e4:	str	r4, [sp, #88]	; 0x58
   123e8:	beq	12438 <__assert_fail@plt+0xae0>
   123ec:	add	r4, r3, #308	; 0x134
   123f0:	mov	r0, r4
   123f4:	bl	118c8 <sigemptyset@plt>
   123f8:	mov	r0, #13
   123fc:	mov	r1, #0
   12400:	add	r2, sp, #136	; 0x88
   12404:	bl	11688 <sigaction@plt>
   12408:	ldr	r3, [sp, #136]	; 0x88
   1240c:	cmp	r3, #1
   12410:	beq	12420 <__assert_fail@plt+0xac8>
   12414:	mov	r0, r4
   12418:	mov	r1, #13
   1241c:	bl	11724 <sigaddset@plt>
   12420:	ldr	r2, [pc, #940]	; 127d4 <__assert_fail@plt+0xe7c>
   12424:	mov	r0, #0
   12428:	add	r2, pc, r2
   1242c:	add	r1, r2, #308	; 0x134
   12430:	add	r2, r2, #160	; 0xa0
   12434:	bl	115b0 <sigprocmask@plt>
   12438:	sub	sl, sl, #1
   1243c:	cmp	sl, #6
   12440:	addls	pc, pc, sl, lsl #2
   12444:	b	13610 <__assert_fail@plt+0x1cb8>
   12448:	b	12f04 <__assert_fail@plt+0x15ac>
   1244c:	b	12cb4 <__assert_fail@plt+0x135c>
   12450:	b	12bdc <__assert_fail@plt+0x1284>
   12454:	b	12bdc <__assert_fail@plt+0x1284>
   12458:	b	12b70 <__assert_fail@plt+0x1218>
   1245c:	b	128a0 <__assert_fail@plt+0xf48>
   12460:	b	12464 <__assert_fail@plt+0xb0c>
   12464:	ldrd	r0, [sp, #120]	; 0x78
   12468:	ldrd	sl, [sp, #112]	; 0x70
   1246c:	strd	r0, [sp, #40]	; 0x28
   12470:	orrs	r1, sl, fp
   12474:	bne	12500 <__assert_fail@plt+0xba8>
   12478:	ldrd	r0, [sp, #40]	; 0x28
   1247c:	mvn	r2, #0
   12480:	mov	r3, #0
   12484:	cmp	r1, r3
   12488:	cmpeq	r0, r2
   1248c:	bhi	13a28 <__assert_fail@plt+0x20d0>
   12490:	cmn	r0, #-268435455	; 0xf0000001
   12494:	bhi	13a28 <__assert_fail@plt+0x20d0>
   12498:	ldr	r1, [sp, #40]	; 0x28
   1249c:	mov	r8, sl
   124a0:	ldr	r5, [pc, #816]	; 127d8 <__assert_fail@plt+0xe80>
   124a4:	mov	r9, fp
   124a8:	mov	r4, #0
   124ac:	lsl	r0, r1, #4
   124b0:	add	r5, pc, r5
   124b4:	bl	184e8 <close_stdout@@Base+0x346c>
   124b8:	str	r0, [sp, #64]	; 0x40
   124bc:	mov	r7, r0
   124c0:	b	124ec <__assert_fail@plt+0xb94>
   124c4:	bl	13c58 <__assert_fail@plt+0x2300>
   124c8:	ldr	r0, [r5]
   124cc:	bl	186e0 <close_stdout@@Base+0x3664>
   124d0:	adds	r8, r8, #1
   124d4:	adc	r9, r9, #0
   124d8:	mvn	r2, #0
   124dc:	str	r4, [r7, #-8]
   124e0:	str	r2, [r7, #-12]
   124e4:	str	r4, [r7, #-4]
   124e8:	str	r0, [r7, #-16]
   124ec:	ldrd	r0, [sp, #40]	; 0x28
   124f0:	add	r7, r7, #16
   124f4:	cmp	r9, r1
   124f8:	cmpeq	r8, r0
   124fc:	bne	124c4 <__assert_fail@plt+0xb6c>
   12500:	ldr	r7, [pc, #724]	; 127dc <__assert_fail@plt+0xe84>
   12504:	mov	r9, #0
   12508:	ldr	ip, [pc, #720]	; 127e0 <__assert_fail@plt+0xe88>
   1250c:	mov	r0, #1
   12510:	add	r7, pc, r7
   12514:	str	r7, [sp, #60]	; 0x3c
   12518:	ldr	r7, [pc, #708]	; 127e4 <__assert_fail@plt+0xe8c>
   1251c:	add	ip, pc, ip
   12520:	strd	sl, [sp, #24]
   12524:	mov	sl, r9
   12528:	add	r7, pc, r7
   1252c:	str	r7, [sp, #72]	; 0x48
   12530:	ldr	r7, [pc, #688]	; 127e8 <__assert_fail@plt+0xe90>
   12534:	mov	r1, #0
   12538:	str	ip, [sp, #108]	; 0x6c
   1253c:	add	r7, pc, r7
   12540:	strd	r0, [sp, #32]
   12544:	str	r7, [sp, #100]	; 0x64
   12548:	str	r9, [sp, #48]	; 0x30
   1254c:	str	r9, [sp, #104]	; 0x68
   12550:	str	r6, [sp, #84]	; 0x54
   12554:	mov	r0, #0
   12558:	ldr	r1, [sp, #88]	; 0x58
   1255c:	ldr	r2, [sp, #80]	; 0x50
   12560:	bl	1786c <close_stdout@@Base+0x27f0>
   12564:	cmn	r0, #1
   12568:	mov	r6, r0
   1256c:	beq	134a0 <__assert_fail@plt+0x1b48>
   12570:	cmp	r0, #0
   12574:	beq	13564 <__assert_fail@plt+0x1c0c>
   12578:	ldr	ip, [sp, #88]	; 0x58
   1257c:	ldr	r7, [pc, #616]	; 127ec <__assert_fail@plt+0xe94>
   12580:	add	r6, ip, r6
   12584:	mov	r4, ip
   12588:	ldr	ip, [pc, #608]	; 127f0 <__assert_fail@plt+0xe98>
   1258c:	add	r7, pc, r7
   12590:	str	r7, [sp, #92]	; 0x5c
   12594:	add	ip, pc, ip
   12598:	str	ip, [sp, #96]	; 0x60
   1259c:	b	125e0 <__assert_fail@plt+0xc88>
   125a0:	ldrd	r2, [sp, #24]
   125a4:	ldrd	r0, [sp, #32]
   125a8:	cmp	r3, r1
   125ac:	cmpeq	r2, r0
   125b0:	beq	12fd8 <__assert_fail@plt+0x1680>
   125b4:	cmp	r7, #0
   125b8:	beq	125dc <__assert_fail@plt+0xc84>
   125bc:	ldrd	r0, [sp, #40]	; 0x28
   125c0:	ldrd	r2, [sp, #32]
   125c4:	cmp	r1, r3
   125c8:	cmpeq	r0, r2
   125cc:	beq	130b4 <__assert_fail@plt+0x175c>
   125d0:	adds	r2, r2, #1
   125d4:	adc	r3, r3, #0
   125d8:	strd	r2, [sp, #32]
   125dc:	mov	r4, r5
   125e0:	cmp	r6, r4
   125e4:	beq	12554 <__assert_fail@plt+0xbfc>
   125e8:	mov	r1, #10
   125ec:	mov	r0, r4
   125f0:	rsb	r2, r4, r6
   125f4:	bl	11874 <memchr@plt>
   125f8:	cmp	r0, #0
   125fc:	addne	r5, r0, #1
   12600:	moveq	r7, r0
   12604:	ldrd	r0, [sp, #24]
   12608:	moveq	r5, r6
   1260c:	movne	r7, #1
   12610:	orrs	r1, r0, r1
   12614:	rsb	r8, r4, r5
   12618:	bne	125a0 <__assert_fail@plt+0xc48>
   1261c:	ldr	r0, [sp, #64]	; 0x40
   12620:	mov	r1, r9
   12624:	ldr	r2, [sp, #40]	; 0x28
   12628:	lsl	fp, r9, #4
   1262c:	bl	145b8 <__assert_fail@plt+0x2c60>
   12630:	ldr	ip, [sp, #60]	; 0x3c
   12634:	ldrb	r3, [ip, #304]	; 0x130
   12638:	cmp	r3, #0
   1263c:	orr	r0, r0, sl
   12640:	uxtb	sl, r0
   12644:	bne	130ec <__assert_fail@plt+0x1794>
   12648:	ldr	ip, [sp, #64]	; 0x40
   1264c:	mov	r0, r4
   12650:	mov	r1, r8
   12654:	mov	r2, #1
   12658:	add	r4, ip, fp
   1265c:	ldr	r3, [r4, #8]
   12660:	bl	11610 <fwrite_unlocked@plt>
   12664:	cmp	r0, #1
   12668:	bne	13080 <__assert_fail@plt+0x1728>
   1266c:	bl	117f0 <__errno_location@plt>
   12670:	ldr	ip, [sp, #72]	; 0x48
   12674:	ldr	r3, [ip, #40]	; 0x28
   12678:	cmp	r3, #0
   1267c:	mov	r8, r0
   12680:	ldr	r2, [r0]
   12684:	beq	131d8 <__assert_fail@plt+0x1880>
   12688:	ldr	ip, [sp, #48]	; 0x30
   1268c:	cmp	r2, #32
   12690:	movne	ip, #1
   12694:	str	ip, [sp, #48]	; 0x30
   12698:	cmp	sl, #0
   1269c:	bne	130c4 <__assert_fail@plt+0x176c>
   126a0:	cmp	r7, #0
   126a4:	beq	125dc <__assert_fail@plt+0xc84>
   126a8:	add	r9, r9, #1
   126ac:	ldrd	r0, [sp, #40]	; 0x28
   126b0:	mov	r3, #0
   126b4:	mov	r2, r9
   126b8:	cmp	r1, r3
   126bc:	cmpeq	r0, r2
   126c0:	bne	125dc <__assert_fail@plt+0xc84>
   126c4:	ldr	r7, [sp, #48]	; 0x30
   126c8:	cmp	r7, #0
   126cc:	beq	13630 <__assert_fail@plt+0x1cd8>
   126d0:	mov	r9, #0
   126d4:	mov	r7, #1
   126d8:	str	r9, [sp, #48]	; 0x30
   126dc:	str	r7, [sp, #104]	; 0x68
   126e0:	b	125dc <__assert_fail@plt+0xc84>
   126e4:	andeq	sp, r1, ip, ror r6
   126e8:	andeq	r0, r0, ip, ror r1
   126ec:	andeq	fp, r0, r8, ror sp
   126f0:	andeq	fp, r0, ip, lsl #28
   126f4:	andeq	fp, r0, r0, lsl #28
   126f8:	andeq	r0, r0, ip, lsl #3
   126fc:	andeq	fp, r0, r0, ror #6
   12700:	andeq	sp, r1, r4, lsr #19
   12704:	andeq	r0, r0, r0, lsl #3
   12708:	andeq	fp, r0, ip, lsr r3
   1270c:	andeq	fp, r0, r4, lsr r3
   12710:	andeq	fp, r0, r8, asr #27
   12714:	andeq	ip, r0, r4, lsr r1
   12718:	andeq	fp, r0, r4, lsl #27
   1271c:	andeq	sp, r1, ip, ror r3
   12720:			; <UNDEFINED> instruction: 0x000001b0
   12724:	andeq	sp, r1, r8, asr #17
   12728:	andeq	sp, r1, r4, asr r8
   1272c:	andeq	r0, r0, r4, lsl #3
   12730:	ldrdeq	fp, [r0], -r0
   12734:	ldrdeq	fp, [r0], -r8
   12738:	andeq	fp, r0, r0, ror #27
   1273c:	andeq	fp, r0, r4, asr #27
   12740:	andeq	fp, r0, ip, asr fp
   12744:	andeq	fp, r0, r4, lsl #26
   12748:	andeq	fp, r0, ip, lsl ip
   1274c:	andeq	fp, r0, r4, lsl #24
   12750:	ldrdeq	fp, [r0], -ip
   12754:	andeq	fp, r0, r8, lsl #23
   12758:	andeq	fp, r0, ip, ror #20
   1275c:	andeq	fp, r0, r8, lsr fp
   12760:	andeq	fp, r0, r4, asr sl
   12764:	andeq	sp, r1, r0, lsl #10
   12768:	andeq	fp, r0, r0, lsl #18
   1276c:			; <UNDEFINED> instruction: 0x0001d4b4
   12770:	andeq	sp, r1, r8, lsr #5
   12774:	ldrdeq	fp, [r0], -ip
   12778:	andeq	sp, r1, r8, lsl #8
   1277c:	andeq	fp, r0, r0, lsl #16
   12780:	andeq	sp, r1, ip, ror #6
   12784:	andeq	sp, r1, r4, asr r3
   12788:	andeq	fp, r0, ip, lsl sl
   1278c:			; <UNDEFINED> instruction: 0x0001d2b0
   12790:	andeq	fp, r0, r4, ror r8
   12794:	andeq	sp, r1, ip, asr #4
   12798:	andeq	sp, r1, r8, lsr r0
   1279c:	andeq	sp, r1, ip, lsl r2
   127a0:	andeq	sp, r1, r4
   127a4:	ldrdeq	sp, [r1], -ip
   127a8:	andeq	fp, r0, r8, ror #15
   127ac:	andeq	fp, r0, ip, lsr r6
   127b0:	andeq	fp, r0, r4, lsl sl
   127b4:	andeq	fp, r0, r4, asr #10
   127b8:	strdeq	fp, [r0], -ip
   127bc:	andeq	fp, r0, r8, lsl #11
   127c0:	strheq	sp, [r1], -ip
   127c4:	muleq	r1, r8, r0
   127c8:	andeq	sp, r1, r0, rrx
   127cc:	andeq	sp, r1, r4, lsr r0
   127d0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   127d4:	andeq	ip, r1, r8, lsl #31
   127d8:	andeq	ip, r1, r0, lsl #30
   127dc:	andeq	ip, r1, r0, lsr #29
   127e0:	andeq	sl, r0, r8, lsr #21
   127e4:	andeq	ip, r1, r8, lsl #29
   127e8:	andeq	sl, r0, r8, lsl #21
   127ec:	andeq	sl, r0, r8, lsr sl
   127f0:	andeq	fp, r0, r4, lsr r5
   127f4:	andeq	sl, r0, ip, lsl #13
   127f8:	andeq	ip, r1, r4, ror #20
   127fc:	andeq	fp, r0, r0, ror r1
   12800:	andeq	sl, r0, r0, ror #12
   12804:	strdeq	ip, [r1], -r4
   12808:	strdeq	ip, [r1], -r0
   1280c:	ldrdeq	sl, [r0], -r4
   12810:	andeq	ip, r1, ip, lsr #15
   12814:	andeq	sl, r0, r8, lsl #6
   12818:	andeq	ip, r1, r0, ror #13
   1281c:	ldrdeq	ip, [r1], -r4
   12820:	muleq	r0, r8, r1
   12824:	andeq	r9, r0, r8, lsl #31
   12828:	andeq	sl, r0, ip, lsl r9
   1282c:	andeq	r9, r0, r0, lsl #28
   12830:	andeq	sl, r0, r0, asr #12
   12834:	andeq	ip, r1, r8, asr #2
   12838:	andeq	fp, r1, ip, lsr pc
   1283c:	andeq	ip, r1, r4, asr #1
   12840:			; <UNDEFINED> instruction: 0x0001bebc
   12844:	andeq	sl, r0, r8, lsr #13
   12848:	andeq	sl, r0, r4, lsr #9
   1284c:	andeq	sl, r0, r4, lsl #10
   12850:	andeq	sl, r0, r0, lsl r5
   12854:	andeq	sl, r0, r4, ror #8
   12858:	andeq	sl, r0, r0, lsl r6
   1285c:	strdeq	sl, [r0], -r4
   12860:	andeq	r9, r0, r4, ror #22
   12864:	andeq	fp, r1, r4, lsr pc
   12868:	andeq	r9, r0, r0, lsr fp
   1286c:	andeq	fp, r1, r8, lsl #30
   12870:	andeq	r9, r0, r4, lsl #22
   12874:			; <UNDEFINED> instruction: 0x0001beb0
   12878:	andeq	fp, r1, r0, lsr #28
   1287c:	andeq	fp, r1, r0, lsr #26
   12880:	andeq	r9, r0, ip, lsl r9
   12884:	andeq	sl, r0, r4, lsl r3
   12888:	andeq	fp, r1, r4, asr ip
   1288c:	muleq	r0, r0, r7
   12890:	andeq	fp, r1, r4, ror fp
   12894:	andeq	fp, r1, ip, ror #22
   12898:	andeq	r9, r0, r4, lsr #31
   1289c:	andeq	r9, r0, r4, ror r7
   128a0:	ldrd	r6, [sp, #112]	; 0x70
   128a4:	strd	r6, [sp, #24]
   128a8:	ldrd	r0, [sp, #24]
   128ac:	ldrd	r6, [sp, #120]	; 0x78
   128b0:	cmp	r1, r7
   128b4:	cmpeq	r0, r6
   128b8:	strd	r6, [sp, #32]
   128bc:	movls	r4, #0
   128c0:	movhi	r4, #1
   128c4:	orrs	r1, r6, r7
   128c8:	orreq	r4, r4, #1
   128cc:	cmp	r4, #0
   128d0:	bne	13a2c <__assert_fail@plt+0x20d4>
   128d4:	ldrd	r2, [sp, #72]	; 0x48
   128d8:	cmp	r7, r3
   128dc:	cmpeq	r6, r2
   128e0:	bhi	13a2c <__assert_fail@plt+0x20d4>
   128e4:	ldrd	r2, [sp, #32]
   128e8:	ldrd	r0, [sp, #72]	; 0x48
   128ec:	bl	1c338 <close_stdout@@Base+0x72bc>
   128f0:	ldrd	r6, [sp, #24]
   128f4:	cmp	r7, #0
   128f8:	cmpeq	r6, #1
   128fc:	mov	r2, r0
   12900:	str	r0, [sp, #40]	; 0x28
   12904:	str	r1, [sp, #44]	; 0x2c
   12908:	bhi	13638 <__assert_fail@plt+0x1ce0>
   1290c:	ldrd	r6, [sp, #40]	; 0x28
   12910:	mov	r8, #1
   12914:	mov	r9, #0
   12918:	mov	r0, #0
   1291c:	subs	r6, r6, #1
   12920:	mov	r1, #0
   12924:	sbc	r7, r7, #0
   12928:	strd	r0, [sp, #48]	; 0x30
   1292c:	ldr	ip, [pc, #-320]	; 127f4 <__assert_fail@plt+0xe9c>
   12930:	mov	sl, #1
   12934:	str	sl, [sp, #92]	; 0x5c
   12938:	add	ip, pc, ip
   1293c:	str	ip, [sp, #96]	; 0x60
   12940:	mov	ip, #0
   12944:	str	ip, [sp, #64]	; 0x40
   12948:	ldr	ip, [pc, #-344]	; 127f8 <__assert_fail@plt+0xea0>
   1294c:	add	ip, pc, ip
   12950:	str	ip, [sp, #100]	; 0x64
   12954:	ldr	ip, [pc, #-352]	; 127fc <__assert_fail@plt+0xea4>
   12958:	add	ip, pc, ip
   1295c:	str	ip, [sp, #104]	; 0x68
   12960:	ldr	ip, [pc, #-360]	; 12800 <__assert_fail@plt+0xea8>
   12964:	add	ip, pc, ip
   12968:	str	ip, [sp, #108]	; 0x6c
   1296c:	ldrd	r0, [sp, #48]	; 0x30
   12970:	ldrd	r2, [sp, #72]	; 0x48
   12974:	cmp	r0, r2
   12978:	sbcs	r3, r1, r3
   1297c:	bge	13a50 <__assert_fail@plt+0x20f8>
   12980:	mov	r0, #0
   12984:	ldr	r1, [sp, #88]	; 0x58
   12988:	ldr	r2, [sp, #80]	; 0x50
   1298c:	bl	15304 <close_stdout@@Base+0x288>
   12990:	ldr	ip, [sp, #80]	; 0x50
   12994:	cmp	ip, r0
   12998:	mov	r4, r0
   1299c:	bls	129b0 <__assert_fail@plt+0x1058>
   129a0:	bl	117f0 <__errno_location@plt>
   129a4:	ldr	r1, [r0]
   129a8:	cmp	r1, #0
   129ac:	bne	13990 <__assert_fail@plt+0x2038>
   129b0:	cmp	r4, #0
   129b4:	beq	13a50 <__assert_fail@plt+0x20f8>
   129b8:	ldrd	r2, [sp, #48]	; 0x30
   129bc:	ldrd	r0, [sp, #72]	; 0x48
   129c0:	subs	r0, r0, r2
   129c4:	sbc	r1, r1, r3
   129c8:	mov	r2, r4
   129cc:	mov	r3, #0
   129d0:	cmp	r0, r2
   129d4:	sbcs	ip, r1, r3
   129d8:	ldr	r1, [sp, #28]
   129dc:	movlt	r2, r0
   129e0:	ldr	r0, [sp, #24]
   129e4:	ldr	ip, [sp, #88]	; 0x58
   129e8:	orr	sl, r0, r1
   129ec:	str	r2, [sp, #60]	; 0x3c
   129f0:	add	r5, ip, r2
   129f4:	mov	r4, ip
   129f8:	mov	ip, #0
   129fc:	str	ip, [sp, #64]	; 0x40
   12a00:	mov	ip, sl
   12a04:	ldrd	sl, [sp, #48]	; 0x30
   12a08:	cmp	r5, r4
   12a0c:	beq	139a8 <__assert_fail@plt+0x2050>
   12a10:	mov	r2, r6
   12a14:	mov	r3, r7
   12a18:	subs	r2, r2, sl
   12a1c:	sbc	r3, r3, fp
   12a20:	mov	r1, #0
   12a24:	cmp	r2, #0
   12a28:	sbcs	r0, r3, #0
   12a2c:	ldr	r0, [sp, #60]	; 0x3c
   12a30:	str	ip, [sp, #20]
   12a34:	movlt	r2, #0
   12a38:	movlt	r3, #0
   12a3c:	strd	r0, [sp, #48]	; 0x30
   12a40:	cmp	r0, r2
   12a44:	sbcs	r1, r1, r3
   12a48:	ldr	r1, [sp, #60]	; 0x3c
   12a4c:	ldrdlt	r2, [sp, #48]	; 0x30
   12a50:	add	r0, r4, r2
   12a54:	rsb	r2, r2, r1
   12a58:	mov	r1, #10
   12a5c:	bl	11874 <memchr@plt>
   12a60:	ldr	ip, [sp, #20]
   12a64:	cmp	r0, #0
   12a68:	addne	r3, r0, #1
   12a6c:	moveq	r3, r5
   12a70:	ldrd	r0, [sp, #24]
   12a74:	moveq	r2, #0
   12a78:	movne	r2, #1
   12a7c:	rsb	r3, r4, r3
   12a80:	cmp	r1, r9
   12a84:	cmpeq	r0, r8
   12a88:	str	r2, [sp, #84]	; 0x54
   12a8c:	str	r3, [sp, #48]	; 0x30
   12a90:	beq	136b4 <__assert_fail@plt+0x1d5c>
   12a94:	ldrd	r2, [sp, #24]
   12a98:	orrs	r3, r2, r3
   12a9c:	beq	13614 <__assert_fail@plt+0x1cbc>
   12aa0:	ldr	r0, [sp, #48]	; 0x30
   12aa4:	ldr	r3, [sp, #84]	; 0x54
   12aa8:	adds	sl, sl, r0
   12aac:	add	r4, r4, r0
   12ab0:	adc	fp, fp, #0
   12ab4:	cmp	r6, sl
   12ab8:	sbcs	r2, r7, fp
   12abc:	movge	r2, r3
   12ac0:	orrlt	r2, r3, #1
   12ac4:	cmp	r2, #0
   12ac8:	beq	13438 <__assert_fail@plt+0x1ae0>
   12acc:	eor	r2, r3, #1
   12ad0:	cmp	r5, r4
   12ad4:	movne	r2, #0
   12ad8:	andeq	r2, r2, #1
   12adc:	cmp	r2, #0
   12ae0:	bne	13430 <__assert_fail@plt+0x1ad8>
   12ae4:	adds	r8, r8, #1
   12ae8:	ldrd	r0, [sp, #24]
   12aec:	adc	r9, r9, #0
   12af0:	cmp	r1, r9
   12af4:	cmpeq	r0, r8
   12af8:	movcs	r2, #0
   12afc:	movcc	r2, #1
   12b00:	cmp	ip, #0
   12b04:	moveq	r2, #0
   12b08:	andne	r2, r2, #1
   12b0c:	cmp	r2, #0
   12b10:	bne	12ba0 <__assert_fail@plt+0x1248>
   12b14:	ldrd	r0, [sp, #32]
   12b18:	cmp	r1, r9
   12b1c:	cmpeq	r0, r8
   12b20:	beq	13220 <__assert_fail@plt+0x18c8>
   12b24:	ldrd	r0, [sp, #40]	; 0x28
   12b28:	adds	r6, r6, r0
   12b2c:	adc	r7, r7, r1
   12b30:	cmp	r6, sl
   12b34:	sbcs	r1, r7, fp
   12b38:	movge	r3, #0
   12b3c:	bge	12ab4 <__assert_fail@plt+0x115c>
   12b40:	ldrd	r0, [sp, #24]
   12b44:	orrs	r1, r0, r1
   12b48:	bne	12ab4 <__assert_fail@plt+0x115c>
   12b4c:	mov	r1, #0
   12b50:	mov	r0, #1
   12b54:	mov	r2, r1
   12b58:	str	r3, [sp, #16]
   12b5c:	str	ip, [sp, #20]
   12b60:	bl	14a6c <__assert_fail@plt+0x3114>
   12b64:	ldr	r3, [sp, #16]
   12b68:	ldr	ip, [sp, #20]
   12b6c:	b	12ab4 <__assert_fail@plt+0x115c>
   12b70:	ldrd	r4, [sp, #112]	; 0x70
   12b74:	orrs	r2, r4, r5
   12b78:	bne	13784 <__assert_fail@plt+0x1e2c>
   12b7c:	ldrd	r4, [sp, #120]	; 0x78
   12b80:	ldrd	r0, [sp, #72]	; 0x48
   12b84:	mov	r2, r4
   12b88:	mov	r3, r5
   12b8c:	bl	1c338 <close_stdout@@Base+0x72bc>
   12b90:	strd	r4, [sp]
   12b94:	ldr	r2, [sp, #88]	; 0x58
   12b98:	ldr	r3, [sp, #80]	; 0x50
   12b9c:	bl	14b88 <__assert_fail@plt+0x3230>
   12ba0:	mov	r0, #0
   12ba4:	bl	11940 <close@plt>
   12ba8:	cmp	r0, #0
   12bac:	bne	13474 <__assert_fail@plt+0x1b1c>
   12bb0:	ldr	r2, [pc, #-948]	; 12804 <__assert_fail@plt+0xeac>
   12bb4:	mov	r0, #0
   12bb8:	ldr	r3, [pc, #-952]	; 12808 <__assert_fail@plt+0xeb0>
   12bbc:	add	r2, pc, r2
   12bc0:	add	r3, pc, r3
   12bc4:	ldr	r1, [r2, #4]
   12bc8:	ldr	r2, [r3, #288]	; 0x120
   12bcc:	ldr	r3, [r3]
   12bd0:	bl	14778 <__assert_fail@plt+0x2e20>
   12bd4:	mov	r0, #0
   12bd8:	bl	1176c <exit@plt>
   12bdc:	ldrd	r6, [sp, #120]	; 0x78
   12be0:	mov	r4, #0
   12be4:	ldr	ip, [pc, #-992]	; 1280c <__assert_fail@plt+0xeb4>
   12be8:	mov	r5, #0
   12bec:	mov	sl, #1
   12bf0:	add	ip, pc, ip
   12bf4:	str	ip, [sp, #32]
   12bf8:	ldr	ip, [pc, #-1008]	; 12810 <__assert_fail@plt+0xeb8>
   12bfc:	mov	r8, r6
   12c00:	mov	r9, r7
   12c04:	add	ip, pc, ip
   12c08:	str	ip, [sp, #40]	; 0x28
   12c0c:	mov	r0, #0
   12c10:	ldr	r1, [sp, #88]	; 0x58
   12c14:	ldr	r2, [sp, #80]	; 0x50
   12c18:	bl	15304 <close_stdout@@Base+0x288>
   12c1c:	ldr	r6, [sp, #80]	; 0x50
   12c20:	cmp	r6, r0
   12c24:	str	r0, [sp, #24]
   12c28:	bls	12c3c <__assert_fail@plt+0x12e4>
   12c2c:	bl	117f0 <__errno_location@plt>
   12c30:	ldr	r1, [r0]
   12c34:	cmp	r1, #0
   12c38:	bne	134cc <__assert_fail@plt+0x1b74>
   12c3c:	ldr	ip, [sp, #88]	; 0x58
   12c40:	mov	r2, #10
   12c44:	ldr	r7, [sp, #24]
   12c48:	ldr	r0, [sp, #24]
   12c4c:	add	r6, ip, r7
   12c50:	mov	fp, ip
   12c54:	mov	r7, ip
   12c58:	strb	r2, [ip, r0]
   12c5c:	rsb	r2, fp, r6
   12c60:	mov	r0, fp
   12c64:	add	r2, r2, #1
   12c68:	mov	r1, #10
   12c6c:	bl	11874 <memchr@plt>
   12c70:	cmp	r6, r0
   12c74:	beq	131e4 <__assert_fail@plt+0x188c>
   12c78:	adds	r4, r4, #1
   12c7c:	add	fp, r0, #1
   12c80:	adc	r5, r5, #0
   12c84:	cmp	r9, r5
   12c88:	cmpeq	r8, r4
   12c8c:	bhi	12c5c <__assert_fail@plt+0x1304>
   12c90:	mov	r1, r7
   12c94:	mov	r0, sl
   12c98:	rsb	r2, r7, fp
   12c9c:	mov	r4, #0
   12ca0:	mov	r7, fp
   12ca4:	bl	14a6c <__assert_fail@plt+0x3114>
   12ca8:	mov	r5, #0
   12cac:	mov	sl, #1
   12cb0:	b	12c5c <__assert_fail@plt+0x1304>
   12cb4:	ldr	ip, [pc, #-1192]	; 12814 <__assert_fail@plt+0xebc>
   12cb8:	ldrd	r6, [sp, #120]	; 0x78
   12cbc:	add	ip, pc, ip
   12cc0:	str	ip, [sp, #92]	; 0x5c
   12cc4:	ldr	ip, [pc, #-1204]	; 12818 <__assert_fail@plt+0xec0>
   12cc8:	strd	r6, [sp, #64]	; 0x40
   12ccc:	mov	r7, #0
   12cd0:	add	ip, pc, ip
   12cd4:	str	ip, [sp, #96]	; 0x60
   12cd8:	mov	ip, #0
   12cdc:	str	ip, [sp, #24]
   12ce0:	mov	fp, ip
   12ce4:	str	ip, [sp, #60]	; 0x3c
   12ce8:	ldr	ip, [sp, #80]	; 0x50
   12cec:	mov	r6, #0
   12cf0:	str	r7, [sp, #32]
   12cf4:	mov	r4, fp
   12cf8:	mov	r7, #0
   12cfc:	mvn	ip, ip
   12d00:	str	ip, [sp, #72]	; 0x48
   12d04:	mov	r0, #0
   12d08:	ldr	r1, [sp, #88]	; 0x58
   12d0c:	ldr	r2, [sp, #80]	; 0x50
   12d10:	bl	15304 <close_stdout@@Base+0x288>
   12d14:	ldr	ip, [sp, #80]	; 0x50
   12d18:	cmp	ip, r0
   12d1c:	str	r0, [sp, #84]	; 0x54
   12d20:	bls	12d34 <__assert_fail@plt+0x13dc>
   12d24:	bl	117f0 <__errno_location@plt>
   12d28:	ldr	r1, [r0]
   12d2c:	cmp	r1, #0
   12d30:	bne	1339c <__assert_fail@plt+0x1a44>
   12d34:	ldr	ip, [sp, #84]	; 0x54
   12d38:	cmp	ip, #0
   12d3c:	beq	1315c <__assert_fail@plt+0x1804>
   12d40:	mov	fp, r4
   12d44:	ldr	r9, [sp, #88]	; 0x58
   12d48:	mov	sl, ip
   12d4c:	mov	r4, r6
   12d50:	mov	r5, r7
   12d54:	b	12ea8 <__assert_fail@plt+0x1550>
   12d58:	ldr	r7, [sp, #64]	; 0x40
   12d5c:	mov	r0, r9
   12d60:	mov	r1, #10
   12d64:	rsb	r6, r4, r7
   12d68:	rsb	r6, fp, r6
   12d6c:	sub	r7, r6, #1
   12d70:	mov	r2, r6
   12d74:	add	r7, r9, r7
   12d78:	str	r7, [sp, #100]	; 0x64
   12d7c:	bl	117c0 <memrchr@plt>
   12d80:	mov	r8, r0
   12d84:	cmp	fp, #0
   12d88:	beq	12f64 <__assert_fail@plt+0x160c>
   12d8c:	orrs	r0, r4, r5
   12d90:	movne	r0, #0
   12d94:	moveq	r0, #1
   12d98:	cmp	r8, #0
   12d9c:	moveq	r2, r0
   12da0:	orrne	r2, r0, #1
   12da4:	cmp	r2, #0
   12da8:	bne	12f24 <__assert_fail@plt+0x15cc>
   12dac:	ldr	r7, [sp, #32]
   12db0:	eor	r2, r7, #1
   12db4:	cmp	sl, #0
   12db8:	moveq	r2, #0
   12dbc:	andne	r2, r2, #1
   12dc0:	cmp	r2, #0
   12dc4:	beq	12fb4 <__assert_fail@plt+0x165c>
   12dc8:	ldr	ip, [sp, #100]	; 0x64
   12dcc:	cmp	ip, #0
   12dd0:	beq	13050 <__assert_fail@plt+0x16f8>
   12dd4:	orrs	ip, r4, r5
   12dd8:	mov	r1, r9
   12ddc:	mov	r2, r6
   12de0:	rsb	sl, r6, sl
   12de4:	movne	r0, #0
   12de8:	moveq	r0, #1
   12dec:	adds	r4, r4, r6
   12df0:	add	r9, r9, r6
   12df4:	adc	r5, r5, #0
   12df8:	bl	14a6c <__assert_fail@plt+0x3114>
   12dfc:	ldr	r7, [sp, #100]	; 0x64
   12e00:	mov	ip, #0
   12e04:	str	ip, [sp, #32]
   12e08:	adds	r2, r7, #0
   12e0c:	movne	r2, #1
   12e10:	adds	r1, sl, #0
   12e14:	ldr	r6, [sp, #100]	; 0x64
   12e18:	mov	r8, r2
   12e1c:	movne	r1, #1
   12e20:	cmp	r6, #0
   12e24:	movne	r1, #0
   12e28:	cmp	r1, #0
   12e2c:	beq	12e8c <__assert_fail@plt+0x1534>
   12e30:	mov	r6, sl
   12e34:	ldr	r7, [sp, #24]
   12e38:	rsb	r2, fp, r7
   12e3c:	cmp	r2, r6
   12e40:	bcs	12e6c <__assert_fail@plt+0x1514>
   12e44:	ldr	ip, [sp, #72]	; 0x48
   12e48:	cmp	ip, r7
   12e4c:	bcc	13a28 <__assert_fail@plt+0x20d0>
   12e50:	ldr	ip, [sp, #80]	; 0x50
   12e54:	ldr	r0, [sp, #60]	; 0x3c
   12e58:	add	r7, r7, ip
   12e5c:	str	r7, [sp, #24]
   12e60:	mov	r1, r7
   12e64:	bl	18540 <close_stdout@@Base+0x34c4>
   12e68:	str	r0, [sp, #60]	; 0x3c
   12e6c:	ldr	r7, [sp, #60]	; 0x3c
   12e70:	mov	r1, r9
   12e74:	mov	r2, r6
   12e78:	rsb	sl, r6, sl
   12e7c:	add	r0, r7, fp
   12e80:	add	r9, r9, r6
   12e84:	add	fp, fp, r6
   12e88:	bl	115e0 <memcpy@plt>
   12e8c:	cmp	r8, #0
   12e90:	movne	ip, #0
   12e94:	movne	r4, #0
   12e98:	movne	r5, #0
   12e9c:	strne	ip, [sp, #32]
   12ea0:	cmp	sl, #0
   12ea4:	beq	13140 <__assert_fail@plt+0x17e8>
   12ea8:	ldrd	r0, [sp, #64]	; 0x40
   12eac:	mov	r6, fp
   12eb0:	mov	r7, #0
   12eb4:	strd	r6, [sp, #40]	; 0x28
   12eb8:	subs	r0, r0, r4
   12ebc:	sbc	r1, r1, r5
   12ec0:	subs	r0, r0, r6
   12ec4:	sbc	r1, r1, r7
   12ec8:	mov	r6, sl
   12ecc:	mov	r7, #0
   12ed0:	cmp	r1, r7
   12ed4:	cmpeq	r0, r6
   12ed8:	strd	r6, [sp, #48]	; 0x30
   12edc:	bls	12d58 <__assert_fail@plt+0x1400>
   12ee0:	mov	r0, r9
   12ee4:	mov	r1, #10
   12ee8:	mov	r2, sl
   12eec:	mov	ip, #0
   12ef0:	str	ip, [sp, #100]	; 0x64
   12ef4:	bl	117c0 <memrchr@plt>
   12ef8:	ldr	r6, [sp, #100]	; 0x64
   12efc:	mov	r8, r0
   12f00:	b	12d84 <__assert_fail@plt+0x142c>
   12f04:	mov	r4, #0
   12f08:	mov	r5, #0
   12f0c:	ldrd	r0, [sp, #120]	; 0x78
   12f10:	ldr	r2, [sp, #88]	; 0x58
   12f14:	ldr	r3, [sp, #80]	; 0x50
   12f18:	strd	r4, [sp]
   12f1c:	bl	14b88 <__assert_fail@plt+0x3230>
   12f20:	b	12ba0 <__assert_fail@plt+0x1248>
   12f24:	ldrd	r2, [sp, #40]	; 0x28
   12f28:	ldr	r1, [sp, #60]	; 0x3c
   12f2c:	adds	r4, r4, r2
   12f30:	mov	r2, fp
   12f34:	adc	r5, r5, r3
   12f38:	bl	14a6c <__assert_fail@plt+0x3114>
   12f3c:	ldr	r7, [sp, #80]	; 0x50
   12f40:	cmp	r7, fp
   12f44:	ldrcs	ip, [sp, #80]	; 0x50
   12f48:	strcs	ip, [sp, #24]
   12f4c:	bcs	12f64 <__assert_fail@plt+0x160c>
   12f50:	ldr	r0, [sp, #60]	; 0x3c
   12f54:	mov	r1, r7
   12f58:	bl	18540 <close_stdout@@Base+0x34c4>
   12f5c:	str	r7, [sp, #24]
   12f60:	str	r0, [sp, #60]	; 0x3c
   12f64:	cmp	r8, #0
   12f68:	beq	139f8 <__assert_fail@plt+0x20a0>
   12f6c:	rsb	r8, r9, r8
   12f70:	orrs	r0, r4, r5
   12f74:	add	r8, r8, #1
   12f78:	mov	r1, r9
   12f7c:	movne	r0, #0
   12f80:	moveq	r0, #1
   12f84:	adds	r4, r4, r8
   12f88:	mov	r2, r8
   12f8c:	adc	r5, r5, #0
   12f90:	bl	14a6c <__assert_fail@plt+0x3114>
   12f94:	ldr	r3, [sp, #100]	; 0x64
   12f98:	rsb	sl, r8, sl
   12f9c:	add	r9, r9, r8
   12fa0:	cmp	r3, #0
   12fa4:	mov	fp, #0
   12fa8:	rsbne	r6, r8, r6
   12fac:	mov	r7, #1
   12fb0:	str	r7, [sp, #32]
   12fb4:	ldr	r3, [sp, #100]	; 0x64
   12fb8:	adds	r2, r3, #0
   12fbc:	movne	r2, #1
   12fc0:	cmp	r6, #0
   12fc4:	moveq	r8, #0
   12fc8:	andne	r8, r2, #1
   12fcc:	cmp	r8, #0
   12fd0:	bne	12e34 <__assert_fail@plt+0x14dc>
   12fd4:	b	12e10 <__assert_fail@plt+0x14b8>
   12fd8:	ldr	r3, [pc, #-1988]	; 1281c <__assert_fail@plt+0xec4>
   12fdc:	add	r3, pc, r3
   12fe0:	ldrb	fp, [r3, #304]	; 0x130
   12fe4:	cmp	fp, #0
   12fe8:	bne	13188 <__assert_fail@plt+0x1830>
   12fec:	ldr	r3, [pc, #-2004]	; 12820 <__assert_fail@plt+0xec8>
   12ff0:	mov	r0, r4
   12ff4:	ldr	ip, [sp, #84]	; 0x54
   12ff8:	mov	r1, r8
   12ffc:	mov	r2, #1
   13000:	ldr	r4, [ip, r3]
   13004:	ldr	r3, [r4]
   13008:	bl	11610 <fwrite_unlocked@plt>
   1300c:	cmp	r0, #1
   13010:	beq	125b4 <__assert_fail@plt+0xc5c>
   13014:	ldr	r0, [r4]
   13018:	bl	11904 <clearerr_unlocked@plt>
   1301c:	bl	117f0 <__errno_location@plt>
   13020:	ldr	r1, [sp, #96]	; 0x60
   13024:	mov	r2, #5
   13028:	ldr	r4, [r0]
   1302c:	mov	r0, fp
   13030:	bl	11628 <dcgettext@plt>
   13034:	ldr	r2, [pc, #-2072]	; 12824 <__assert_fail@plt+0xecc>
   13038:	mov	r1, r4
   1303c:	add	r2, pc, r2
   13040:	mov	r3, r0
   13044:	mov	r0, #1
   13048:	bl	116e8 <error@plt>
   1304c:	b	125b4 <__assert_fail@plt+0xc5c>
   13050:	orrs	r0, r4, r5
   13054:	ldrd	r6, [sp, #48]	; 0x30
   13058:	mov	r1, r9
   1305c:	mov	r2, sl
   13060:	movne	r0, #0
   13064:	moveq	r0, #1
   13068:	adds	r4, r4, r6
   1306c:	add	r9, r9, sl
   13070:	adc	r5, r5, r7
   13074:	bl	14a6c <__assert_fail@plt+0x3114>
   13078:	ldr	sl, [sp, #100]	; 0x64
   1307c:	b	12dfc <__assert_fail@plt+0x14a4>
   13080:	bl	117f0 <__errno_location@plt>
   13084:	ldr	ip, [sp, #60]	; 0x3c
   13088:	ldr	r3, [ip, #40]	; 0x28
   1308c:	cmp	r3, #0
   13090:	ldr	r1, [r0]
   13094:	beq	130a0 <__assert_fail@plt+0x1748>
   13098:	cmp	r1, #32
   1309c:	beq	13214 <__assert_fail@plt+0x18bc>
   130a0:	ldr	r3, [r4]
   130a4:	mov	r0, #1
   130a8:	ldr	r2, [sp, #100]	; 0x64
   130ac:	bl	116e8 <error@plt>
   130b0:	b	1266c <__assert_fail@plt+0xd14>
   130b4:	mov	r0, #1
   130b8:	mov	r1, #0
   130bc:	strd	r0, [sp, #32]
   130c0:	b	125dc <__assert_fail@plt+0xc84>
   130c4:	ldr	ip, [sp, #64]	; 0x40
   130c8:	add	r4, ip, fp
   130cc:	ldr	r0, [r4, #8]
   130d0:	bl	19478 <close_stdout@@Base+0x43fc>
   130d4:	cmp	r0, #0
   130d8:	bne	13340 <__assert_fail@plt+0x19e8>
   130dc:	mvn	r2, #1
   130e0:	mov	r3, #0
   130e4:	stmib	r4, {r2, r3}
   130e8:	b	126a0 <__assert_fail@plt+0xd48>
   130ec:	ldr	ip, [sp, #64]	; 0x40
   130f0:	mov	r1, r4
   130f4:	mov	r2, r8
   130f8:	add	r4, ip, fp
   130fc:	ldr	r0, [r4, #4]
   13100:	bl	15374 <close_stdout@@Base+0x2f8>
   13104:	cmp	r8, r0
   13108:	beq	1266c <__assert_fail@plt+0xd14>
   1310c:	bl	117f0 <__errno_location@plt>
   13110:	ldr	ip, [sp, #60]	; 0x3c
   13114:	ldr	r3, [ip, #40]	; 0x28
   13118:	cmp	r3, #0
   1311c:	ldr	r1, [r0]
   13120:	beq	1312c <__assert_fail@plt+0x17d4>
   13124:	cmp	r1, #32
   13128:	beq	13214 <__assert_fail@plt+0x18bc>
   1312c:	ldr	r3, [r4]
   13130:	mov	r0, #1
   13134:	ldr	r2, [sp, #92]	; 0x5c
   13138:	bl	116e8 <error@plt>
   1313c:	b	1266c <__assert_fail@plt+0xd14>
   13140:	ldr	ip, [sp, #80]	; 0x50
   13144:	mov	r6, r4
   13148:	ldr	r0, [sp, #84]	; 0x54
   1314c:	mov	r7, r5
   13150:	mov	r4, fp
   13154:	cmp	ip, r0
   13158:	beq	12d04 <__assert_fail@plt+0x13ac>
   1315c:	cmp	r4, #0
   13160:	beq	1317c <__assert_fail@plt+0x1824>
   13164:	orrs	r1, r6, r7
   13168:	mov	r2, r4
   1316c:	ldr	r1, [sp, #60]	; 0x3c
   13170:	movne	r0, #0
   13174:	moveq	r0, #1
   13178:	bl	14a6c <__assert_fail@plt+0x3114>
   1317c:	ldr	r0, [sp, #60]	; 0x3c
   13180:	bl	115c8 <free@plt>
   13184:	b	12ba0 <__assert_fail@plt+0x1248>
   13188:	mov	r1, r4
   1318c:	mov	r0, #1
   13190:	mov	r2, r8
   13194:	bl	15374 <close_stdout@@Base+0x2f8>
   13198:	cmp	r8, r0
   1319c:	beq	125b4 <__assert_fail@plt+0xc5c>
   131a0:	bl	117f0 <__errno_location@plt>
   131a4:	ldr	r1, [pc, #-2436]	; 12828 <__assert_fail@plt+0xed0>
   131a8:	mov	r2, #5
   131ac:	add	r1, pc, r1
   131b0:	ldr	r4, [r0]
   131b4:	mov	r0, #0
   131b8:	bl	11628 <dcgettext@plt>
   131bc:	ldr	r2, [pc, #-2456]	; 1282c <__assert_fail@plt+0xed4>
   131c0:	mov	r1, r4
   131c4:	add	r2, pc, r2
   131c8:	mov	r3, r0
   131cc:	mov	r0, #1
   131d0:	bl	116e8 <error@plt>
   131d4:	b	125b4 <__assert_fail@plt+0xc5c>
   131d8:	mov	ip, #1
   131dc:	str	ip, [sp, #48]	; 0x30
   131e0:	b	12698 <__assert_fail@plt+0xd40>
   131e4:	cmp	r6, r7
   131e8:	beq	13200 <__assert_fail@plt+0x18a8>
   131ec:	mov	r0, sl
   131f0:	mov	r1, r7
   131f4:	rsb	r2, r7, r6
   131f8:	mov	sl, #0
   131fc:	bl	14a6c <__assert_fail@plt+0x3114>
   13200:	ldr	r6, [sp, #80]	; 0x50
   13204:	ldr	r7, [sp, #24]
   13208:	cmp	r6, r7
   1320c:	beq	12c0c <__assert_fail@plt+0x12b4>
   13210:	b	12ba0 <__assert_fail@plt+0x1248>
   13214:	bl	117f0 <__errno_location@plt>
   13218:	mov	r8, r0
   1321c:	b	12698 <__assert_fail@plt+0xd40>
   13220:	ldrd	r6, [sp, #72]	; 0x48
   13224:	subs	r6, r6, #1
   13228:	sbc	r7, r7, #0
   1322c:	b	12b30 <__assert_fail@plt+0x11d8>
   13230:	ldr	r1, [pc, #-2568]	; 12830 <__assert_fail@plt+0xed8>
   13234:	mov	r0, #0
   13238:	add	r1, pc, r1
   1323c:	mov	r2, #5
   13240:	bl	11628 <dcgettext@plt>
   13244:	ldr	r3, [r4]
   13248:	mov	r2, r0
   1324c:	mov	r0, #0
   13250:	mov	r1, r0
   13254:	bl	116e8 <error@plt>
   13258:	b	11b34 <__assert_fail@plt+0x1dc>
   1325c:	ldr	r3, [pc, #-2608]	; 12834 <__assert_fail@plt+0xedc>
   13260:	cmp	fp, #2
   13264:	movcc	fp, #2
   13268:	add	r3, pc, r3
   1326c:	str	fp, [r3, #4]
   13270:	b	121b4 <__assert_fail@plt+0x85c>
   13274:	ldr	r3, [pc, #-2628]	; 12838 <__assert_fail@plt+0xee0>
   13278:	mov	fp, #0
   1327c:	add	r3, pc, r3
   13280:	ldr	r0, [r3]
   13284:	bl	11790 <strlen@plt>
   13288:	mov	r1, r5
   1328c:	mov	r3, fp
   13290:	mov	ip, r0
   13294:	mov	r0, r4
   13298:	mov	r2, ip
   1329c:	str	ip, [sp, #20]
   132a0:	bl	1c338 <close_stdout@@Base+0x72bc>
   132a4:	ldr	ip, [sp, #20]
   132a8:	mov	r1, r5
   132ac:	mov	r5, ip
   132b0:	orrs	r3, r2, r3
   132b4:	moveq	r0, #0
   132b8:	movne	r0, #1
   132bc:	str	r0, [sp, #32]
   132c0:	mov	r0, r4
   132c4:	b	132cc <__assert_fail@plt+0x1974>
   132c8:	add	fp, fp, #1
   132cc:	mov	r2, r5
   132d0:	mov	r3, #0
   132d4:	bl	1c338 <close_stdout@@Base+0x72bc>
   132d8:	orrs	r2, r0, r1
   132dc:	bne	132c8 <__assert_fail@plt+0x1970>
   132e0:	ldr	r3, [pc, #-2732]	; 1283c <__assert_fail@plt+0xee4>
   132e4:	mov	r4, #0
   132e8:	ldr	r2, [pc, #-2736]	; 12840 <__assert_fail@plt+0xee8>
   132ec:	add	r3, pc, r3
   132f0:	ldr	ip, [sp, #32]
   132f4:	add	r2, pc, r2
   132f8:	ldr	r3, [r3, #4]
   132fc:	add	fp, fp, ip
   13300:	strb	r4, [r2]
   13304:	cmp	r3, r4
   13308:	beq	1325c <__assert_fail@plt+0x1904>
   1330c:	cmp	fp, r3
   13310:	bls	121a4 <__assert_fail@plt+0x84c>
   13314:	ldr	r1, [pc, #-2776]	; 12844 <__assert_fail@plt+0xeec>
   13318:	mov	r0, r4
   1331c:	mov	r2, #5
   13320:	add	r1, pc, r1
   13324:	bl	11628 <dcgettext@plt>
   13328:	mov	r1, r4
   1332c:	mov	r3, fp
   13330:	mov	r2, r0
   13334:	mov	r0, #1
   13338:	bl	116e8 <error@plt>
   1333c:	b	121a4 <__assert_fail@plt+0x84c>
   13340:	ldr	ip, [sp, #64]	; 0x40
   13344:	mov	r0, #1
   13348:	ldr	r1, [r8]
   1334c:	ldr	r2, [sp, #108]	; 0x6c
   13350:	ldr	r3, [ip, fp]
   13354:	bl	116e8 <error@plt>
   13358:	b	130dc <__assert_fail@plt+0x1784>
   1335c:	ldr	r1, [pc, #-2844]	; 12848 <__assert_fail@plt+0xef0>
   13360:	mov	r0, #0
   13364:	add	r1, pc, r1
   13368:	b	1323c <__assert_fail@plt+0x18e4>
   1336c:	ldr	r1, [pc, #-2856]	; 1284c <__assert_fail@plt+0xef4>
   13370:	mov	r0, #0
   13374:	add	r1, pc, r1
   13378:	b	1323c <__assert_fail@plt+0x18e4>
   1337c:	ldr	r1, [pc, #-2868]	; 12850 <__assert_fail@plt+0xef8>
   13380:	mov	r0, #0
   13384:	add	r1, pc, r1
   13388:	b	1323c <__assert_fail@plt+0x18e4>
   1338c:	ldrb	r3, [r1, #1]
   13390:	cmp	r3, #0
   13394:	beq	12344 <__assert_fail@plt+0x9ec>
   13398:	b	1232c <__assert_fail@plt+0x9d4>
   1339c:	ldr	ip, [sp, #96]	; 0x60
   133a0:	mov	r0, #1
   133a4:	ldr	r2, [sp, #92]	; 0x5c
   133a8:	ldr	r3, [ip, #300]	; 0x12c
   133ac:	bl	116e8 <error@plt>
   133b0:	b	12d34 <__assert_fail@plt+0x13dc>
   133b4:	ldr	r1, [pc, #-2920]	; 12854 <__assert_fail@plt+0xefc>
   133b8:	mov	r2, #5
   133bc:	mov	r0, #0
   133c0:	add	r1, pc, r1
   133c4:	bl	11628 <dcgettext@plt>
   133c8:	mov	r5, r0
   133cc:	ldr	r0, [r4]
   133d0:	bl	17860 <close_stdout@@Base+0x27e4>
   133d4:	mov	r2, r5
   133d8:	mov	r3, r0
   133dc:	mov	r0, #0
   133e0:	mov	r1, r0
   133e4:	bl	116e8 <error@plt>
   133e8:	mov	r0, #1
   133ec:	bl	14dc8 <__assert_fail@plt+0x3470>
   133f0:	ldr	r1, [pc, #-2976]	; 12858 <__assert_fail@plt+0xf00>
   133f4:	mov	r0, #0
   133f8:	add	r1, pc, r1
   133fc:	b	122d0 <__assert_fail@plt+0x978>
   13400:	ldr	r1, [pc, #-2988]	; 1285c <__assert_fail@plt+0xf04>
   13404:	mov	r2, #5
   13408:	mov	r0, r5
   1340c:	add	r1, pc, r1
   13410:	bl	11628 <dcgettext@plt>
   13414:	mov	r1, r5
   13418:	ldr	r3, [r4]
   1341c:	mov	r2, r0
   13420:	mov	r0, r5
   13424:	bl	116e8 <error@plt>
   13428:	mov	r0, #1
   1342c:	bl	14dc8 <__assert_fail@plt+0x3470>
   13430:	mov	r3, #1
   13434:	str	r3, [sp, #64]	; 0x40
   13438:	ldr	r2, [sp, #84]	; 0x54
   1343c:	ldr	r0, [sp, #60]	; 0x3c
   13440:	ldr	r1, [sp, #48]	; 0x30
   13444:	str	r2, [sp, #92]	; 0x5c
   13448:	rsb	r0, r1, r0
   1344c:	str	r0, [sp, #60]	; 0x3c
   13450:	b	12a08 <__assert_fail@plt+0x10b0>
   13454:	bl	117f0 <__errno_location@plt>
   13458:	ldr	r2, [pc, #-3072]	; 12860 <__assert_fail@plt+0xf08>
   1345c:	ldr	r3, [r4, #300]	; 0x12c
   13460:	add	r2, pc, r2
   13464:	ldr	r1, [r0]
   13468:	mov	r0, #1
   1346c:	bl	116e8 <error@plt>
   13470:	b	12364 <__assert_fail@plt+0xa0c>
   13474:	bl	117f0 <__errno_location@plt>
   13478:	ldr	r3, [pc, #-3100]	; 12864 <__assert_fail@plt+0xf0c>
   1347c:	add	r3, pc, r3
   13480:	ldr	r3, [r3, #300]	; 0x12c
   13484:	mov	r2, r0
   13488:	mov	r0, #1
   1348c:	ldr	r1, [r2]
   13490:	ldr	r2, [pc, #-3120]	; 12868 <__assert_fail@plt+0xf10>
   13494:	add	r2, pc, r2
   13498:	bl	116e8 <error@plt>
   1349c:	b	12bb0 <__assert_fail@plt+0x1258>
   134a0:	bl	117f0 <__errno_location@plt>
   134a4:	ldr	r3, [pc, #-3136]	; 1286c <__assert_fail@plt+0xf14>
   134a8:	add	r3, pc, r3
   134ac:	ldr	r3, [r3, #300]	; 0x12c
   134b0:	mov	r2, r0
   134b4:	mov	r0, #1
   134b8:	ldr	r1, [r2]
   134bc:	ldr	r2, [pc, #-3156]	; 12870 <__assert_fail@plt+0xf18>
   134c0:	add	r2, pc, r2
   134c4:	bl	116e8 <error@plt>
   134c8:	b	12578 <__assert_fail@plt+0xc20>
   134cc:	ldr	r7, [sp, #40]	; 0x28
   134d0:	mov	r0, #1
   134d4:	ldr	r2, [sp, #32]
   134d8:	ldr	r3, [r7, #300]	; 0x12c
   134dc:	bl	116e8 <error@plt>
   134e0:	b	12c3c <__assert_fail@plt+0x12e4>
   134e4:	mov	r3, #1
   134e8:	mov	r2, #0
   134ec:	str	r3, [sp]
   134f0:	mov	r0, #0
   134f4:	mov	r3, #0
   134f8:	bl	116a0 <lseek64@plt>
   134fc:	ldr	r3, [pc, #-3216]	; 12874 <__assert_fail@plt+0xf1c>
   13500:	add	r3, pc, r3
   13504:	ldr	r2, [r3, #64]	; 0x40
   13508:	and	r2, r2, #53248	; 0xd000
   1350c:	cmp	r2, #32768	; 0x8000
   13510:	mov	r4, r0
   13514:	mov	r5, r1
   13518:	bne	1370c <__assert_fail@plt+0x1db4>
   1351c:	ldrd	r0, [r3, #96]	; 0x60
   13520:	strd	r0, [sp, #72]	; 0x48
   13524:	cmp	r4, #0
   13528:	sbcs	r3, r5, #0
   1352c:	blt	13744 <__assert_fail@plt+0x1dec>
   13530:	ldrd	r0, [sp, #72]	; 0x48
   13534:	ldrd	r2, [sp, #120]	; 0x78
   13538:	subs	r4, r0, r4
   1353c:	sbc	r5, r1, r5
   13540:	cmp	r2, #0
   13544:	sbcs	r1, r3, #0
   13548:	blt	13930 <__assert_fail@plt+0x1fd8>
   1354c:	cmp	r5, r3
   13550:	cmpeq	r4, r2
   13554:	movcc	r4, r2
   13558:	movcc	r5, r3
   1355c:	strd	r4, [sp, #72]	; 0x48
   13560:	b	123a8 <__assert_fail@plt+0xa50>
   13564:	ldrd	sl, [sp, #24]
   13568:	orrs	ip, sl, fp
   1356c:	bne	12ba0 <__assert_fail@plt+0x1248>
   13570:	ldr	r6, [sp, #104]	; 0x68
   13574:	cmp	r6, #0
   13578:	bne	13630 <__assert_fail@plt+0x1cd8>
   1357c:	mov	r7, r9
   13580:	ldr	r8, [pc, #-3344]	; 12878 <__assert_fail@plt+0xf20>
   13584:	mov	r4, #0
   13588:	ldr	r6, [sp, #64]	; 0x40
   1358c:	mov	r5, #0
   13590:	add	r8, pc, r8
   13594:	mvn	r9, #1
   13598:	ldrd	sl, [sp, #40]	; 0x28
   1359c:	b	135d0 <__assert_fail@plt+0x1c78>
   135a0:	ldr	r1, [r6, #4]
   135a4:	cmp	r1, #0
   135a8:	blt	135c0 <__assert_fail@plt+0x1c68>
   135ac:	ldr	ip, [sp, #64]	; 0x40
   135b0:	ldr	r0, [r6, #8]
   135b4:	ldr	r2, [r6, #12]
   135b8:	ldr	r3, [ip, r3, lsl #4]
   135bc:	bl	14778 <__assert_fail@plt+0x2e20>
   135c0:	adds	r4, r4, #1
   135c4:	str	r9, [r6, #4]
   135c8:	adc	r5, r5, #0
   135cc:	add	r6, r6, #16
   135d0:	cmp	r5, fp
   135d4:	cmpeq	r4, sl
   135d8:	mov	r3, r4
   135dc:	beq	12ba0 <__assert_fail@plt+0x1248>
   135e0:	cmp	r7, r4
   135e4:	bhi	135a0 <__assert_fail@plt+0x1c48>
   135e8:	ldrb	r2, [r8, #296]	; 0x128
   135ec:	cmp	r2, #0
   135f0:	bne	135a0 <__assert_fail@plt+0x1c48>
   135f4:	ldr	r0, [sp, #64]	; 0x40
   135f8:	mov	r1, r4
   135fc:	mov	r2, sl
   13600:	str	r3, [sp, #16]
   13604:	bl	145b8 <__assert_fail@plt+0x2c60>
   13608:	ldr	r3, [sp, #16]
   1360c:	b	135a0 <__assert_fail@plt+0x1c48>
   13610:	bl	11934 <abort@plt>
   13614:	ldr	r0, [sp, #92]	; 0x5c
   13618:	mov	r1, r4
   1361c:	ldr	r2, [sp, #48]	; 0x30
   13620:	str	ip, [sp, #20]
   13624:	bl	14a6c <__assert_fail@plt+0x3114>
   13628:	ldr	ip, [sp, #20]
   1362c:	b	12aa0 <__assert_fail@plt+0x1148>
   13630:	ldr	r7, [sp, #40]	; 0x28
   13634:	b	13580 <__assert_fail@plt+0x1c28>
   13638:	subs	r8, r6, #1
   1363c:	mov	r0, r4
   13640:	sbc	r9, r7, #0
   13644:	mov	r4, #1
   13648:	str	r4, [sp]
   1364c:	mul	r3, r2, r9
   13650:	mla	r1, r8, r1, r3
   13654:	umull	r2, r3, r2, r8
   13658:	subs	r6, r2, #1
   1365c:	add	r3, r1, r3
   13660:	sbc	r7, r3, #0
   13664:	strd	r6, [sp, #48]	; 0x30
   13668:	mov	r2, r6
   1366c:	mov	r3, r7
   13670:	bl	116a0 <lseek64@plt>
   13674:	cmp	r0, #0
   13678:	sbcs	r7, r1, #0
   1367c:	ldrdge	r6, [sp, #48]	; 0x30
   13680:	bge	1292c <__assert_fail@plt+0xfd4>
   13684:	bl	117f0 <__errno_location@plt>
   13688:	ldr	r3, [pc, #-3604]	; 1287c <__assert_fail@plt+0xf24>
   1368c:	ldrd	r6, [sp, #48]	; 0x30
   13690:	add	r3, pc, r3
   13694:	ldr	r3, [r3, #300]	; 0x12c
   13698:	mov	r2, r0
   1369c:	mov	r0, r4
   136a0:	ldr	r1, [r2]
   136a4:	ldr	r2, [pc, #-3628]	; 12880 <__assert_fail@plt+0xf28>
   136a8:	add	r2, pc, r2
   136ac:	bl	116e8 <error@plt>
   136b0:	b	1292c <__assert_fail@plt+0xfd4>
   136b4:	mov	r1, r4
   136b8:	mov	r0, #1
   136bc:	mov	r2, r3
   136c0:	bl	15374 <close_stdout@@Base+0x2f8>
   136c4:	ldr	r1, [sp, #48]	; 0x30
   136c8:	ldr	ip, [sp, #20]
   136cc:	cmp	r1, r0
   136d0:	beq	12aa0 <__assert_fail@plt+0x1148>
   136d4:	bl	117f0 <__errno_location@plt>
   136d8:	ldr	r1, [sp, #104]	; 0x68
   136dc:	mov	r2, #5
   136e0:	ldr	r0, [r0]
   136e4:	str	r0, [sp, #92]	; 0x5c
   136e8:	mov	r0, #0
   136ec:	bl	11628 <dcgettext@plt>
   136f0:	ldr	r1, [sp, #92]	; 0x5c
   136f4:	ldr	r2, [sp, #108]	; 0x6c
   136f8:	mov	r3, r0
   136fc:	mov	r0, #1
   13700:	bl	116e8 <error@plt>
   13704:	ldr	ip, [sp, #20]
   13708:	b	12aa0 <__assert_fail@plt+0x1148>
   1370c:	cmp	r4, #0
   13710:	sbcs	r1, r5, #0
   13714:	blt	13744 <__assert_fail@plt+0x1dec>
   13718:	mov	r3, #2
   1371c:	mov	r2, #0
   13720:	str	r3, [sp]
   13724:	mov	r0, #0
   13728:	mov	r3, #0
   1372c:	bl	116a0 <lseek64@plt>
   13730:	cmp	r0, #0
   13734:	sbcs	r2, r1, #0
   13738:	strd	r0, [sp, #72]	; 0x48
   1373c:	bge	13970 <__assert_fail@plt+0x2018>
   13740:	ldrd	r4, [sp, #72]	; 0x48
   13744:	ldr	r1, [pc, #-3784]	; 12884 <__assert_fail@plt+0xf2c>
   13748:	mov	r2, #5
   1374c:	mov	r0, #0
   13750:	add	r1, pc, r1
   13754:	bl	11628 <dcgettext@plt>
   13758:	ldr	r3, [pc, #-3800]	; 12888 <__assert_fail@plt+0xf30>
   1375c:	add	r3, pc, r3
   13760:	mov	r7, r0
   13764:	ldr	r0, [r3, #300]	; 0x12c
   13768:	bl	17860 <close_stdout@@Base+0x27e4>
   1376c:	mov	r2, r7
   13770:	mov	r1, #0
   13774:	mov	r3, r0
   13778:	mov	r0, #1
   1377c:	bl	116e8 <error@plt>
   13780:	b	13530 <__assert_fail@plt+0x1bd8>
   13784:	ldrd	r6, [sp, #120]	; 0x78
   13788:	orrs	r3, r6, r7
   1378c:	beq	13ad4 <__assert_fail@plt+0x217c>
   13790:	ldrd	r0, [sp, #72]	; 0x48
   13794:	cmp	r7, r1
   13798:	cmpeq	r6, r0
   1379c:	movls	r3, #0
   137a0:	movhi	r3, #1
   137a4:	cmp	r5, r7
   137a8:	cmpeq	r4, r6
   137ac:	orrhi	r3, r3, #1
   137b0:	cmp	r3, #0
   137b4:	bne	13ad4 <__assert_fail@plt+0x217c>
   137b8:	mov	r3, r7
   137bc:	ldrd	r0, [sp, #72]	; 0x48
   137c0:	mov	r2, r6
   137c4:	bl	1c338 <close_stdout@@Base+0x72bc>
   137c8:	subs	r8, r4, #1
   137cc:	sbc	r9, r5, #0
   137d0:	cmp	r5, r7
   137d4:	cmpeq	r4, r6
   137d8:	mul	r3, r0, r9
   137dc:	mla	r3, r8, r1, r3
   137e0:	umull	r8, r9, r0, r8
   137e4:	add	r9, r3, r9
   137e8:	beq	13804 <__assert_fail@plt+0x1eac>
   137ec:	umull	r6, r7, r0, r4
   137f0:	mul	r3, r0, r5
   137f4:	mla	r1, r4, r1, r3
   137f8:	strd	r6, [sp, #72]	; 0x48
   137fc:	add	r1, r1, r7
   13800:	str	r1, [sp, #76]	; 0x4c
   13804:	mov	r4, #1
   13808:	mov	r0, #0
   1380c:	str	r4, [sp]
   13810:	mov	r2, r8
   13814:	mov	r3, r9
   13818:	bl	116a0 <lseek64@plt>
   1381c:	cmp	r0, #0
   13820:	sbcs	r7, r1, #0
   13824:	blt	13aa8 <__assert_fail@plt+0x2150>
   13828:	ldr	sl, [pc, #-4004]	; 1288c <__assert_fail@plt+0xf34>
   1382c:	ldr	fp, [pc, #-4004]	; 12890 <__assert_fail@plt+0xf38>
   13830:	ldr	r7, [pc, #-4004]	; 12894 <__assert_fail@plt+0xf3c>
   13834:	add	sl, pc, sl
   13838:	ldr	ip, [pc, #-4008]	; 12898 <__assert_fail@plt+0xf40>
   1383c:	add	fp, pc, fp
   13840:	ldr	r6, [pc, #-4012]	; 1289c <__assert_fail@plt+0xf44>
   13844:	add	r7, pc, r7
   13848:	add	ip, pc, ip
   1384c:	str	ip, [sp, #24]
   13850:	add	r6, pc, r6
   13854:	str	r6, [sp, #32]
   13858:	b	138dc <__assert_fail@plt+0x1f84>
   1385c:	cmp	r6, #0
   13860:	beq	12ba0 <__assert_fail@plt+0x1248>
   13864:	ldrd	r2, [sp, #72]	; 0x48
   13868:	mov	r4, r6
   1386c:	mov	r5, #0
   13870:	ldr	r1, [sp, #88]	; 0x58
   13874:	subs	r2, r2, r8
   13878:	sbc	r3, r3, r9
   1387c:	cmp	r2, r4
   13880:	sbcs	r0, r3, r5
   13884:	mov	r0, #1
   13888:	movlt	r4, r2
   1388c:	mov	r2, r4
   13890:	bl	15374 <close_stdout@@Base+0x2f8>
   13894:	cmp	r0, r4
   13898:	beq	138d4 <__assert_fail@plt+0x1f7c>
   1389c:	bl	117f0 <__errno_location@plt>
   138a0:	ldr	r3, [r7, #40]	; 0x28
   138a4:	cmp	r3, #0
   138a8:	ldr	r6, [r0]
   138ac:	beq	138b8 <__assert_fail@plt+0x1f60>
   138b0:	cmp	r6, #32
   138b4:	beq	138d4 <__assert_fail@plt+0x1f7c>
   138b8:	ldr	r0, [sp, #24]
   138bc:	bl	17860 <close_stdout@@Base+0x27e4>
   138c0:	mov	r1, r6
   138c4:	ldr	r2, [sp, #32]
   138c8:	mov	r3, r0
   138cc:	mov	r0, #1
   138d0:	bl	116e8 <error@plt>
   138d4:	adds	r8, r8, r4
   138d8:	adc	r9, r9, #0
   138dc:	ldrd	r2, [sp, #72]	; 0x48
   138e0:	cmp	r8, r2
   138e4:	sbcs	r3, r9, r3
   138e8:	bge	12ba0 <__assert_fail@plt+0x1248>
   138ec:	mov	r0, #0
   138f0:	ldr	r1, [sp, #88]	; 0x58
   138f4:	ldr	r2, [sp, #80]	; 0x50
   138f8:	bl	15304 <close_stdout@@Base+0x288>
   138fc:	ldr	ip, [sp, #80]	; 0x50
   13900:	cmp	ip, r0
   13904:	mov	r6, r0
   13908:	bls	1385c <__assert_fail@plt+0x1f04>
   1390c:	bl	117f0 <__errno_location@plt>
   13910:	ldr	r1, [r0]
   13914:	cmp	r1, #0
   13918:	beq	1385c <__assert_fail@plt+0x1f04>
   1391c:	mov	r0, #1
   13920:	mov	r2, sl
   13924:	ldr	r3, [fp, #300]	; 0x12c
   13928:	bl	116e8 <error@plt>
   1392c:	b	13864 <__assert_fail@plt+0x1f0c>
   13930:	ldr	r1, [pc, #448]	; 13af8 <__assert_fail@plt+0x21a0>
   13934:	mov	r2, #5
   13938:	mov	r0, #0
   1393c:	add	r1, pc, r1
   13940:	bl	11628 <dcgettext@plt>
   13944:	add	r2, sp, #276	; 0x114
   13948:	mov	r7, r0
   1394c:	ldrd	r0, [sp, #120]	; 0x78
   13950:	bl	153e4 <close_stdout@@Base+0x368>
   13954:	mov	r2, r7
   13958:	mov	r1, #27
   1395c:	mov	r3, r0
   13960:	mov	r0, #1
   13964:	bl	116e8 <error@plt>
   13968:	ldrd	r2, [sp, #120]	; 0x78
   1396c:	b	1354c <__assert_fail@plt+0x1bf4>
   13970:	mov	r0, #0
   13974:	mov	r2, r4
   13978:	mov	r3, r5
   1397c:	str	r0, [sp]
   13980:	bl	116a0 <lseek64@plt>
   13984:	mov	r4, r0
   13988:	mov	r5, r1
   1398c:	b	13524 <__assert_fail@plt+0x1bcc>
   13990:	ldr	ip, [sp, #100]	; 0x64
   13994:	mov	r0, #1
   13998:	ldr	r2, [sp, #96]	; 0x60
   1399c:	ldr	r3, [ip, #300]	; 0x12c
   139a0:	bl	116e8 <error@plt>
   139a4:	b	129b8 <__assert_fail@plt+0x1060>
   139a8:	strd	sl, [sp, #48]	; 0x30
   139ac:	b	1296c <__assert_fail@plt+0x1014>
   139b0:	bl	117f0 <__errno_location@plt>
   139b4:	ldr	r1, [pc, #320]	; 13afc <__assert_fail@plt+0x21a4>
   139b8:	mov	r2, #5
   139bc:	add	r1, pc, r1
   139c0:	ldr	r4, [r0]
   139c4:	mov	r0, #0
   139c8:	bl	11628 <dcgettext@plt>
   139cc:	ldr	r3, [pc, #300]	; 13b00 <__assert_fail@plt+0x21a8>
   139d0:	add	r3, pc, r3
   139d4:	mov	r5, r0
   139d8:	ldr	r0, [r3, #300]	; 0x12c
   139dc:	bl	17860 <close_stdout@@Base+0x27e4>
   139e0:	mov	r1, r4
   139e4:	mov	r2, r5
   139e8:	mov	r3, r0
   139ec:	mov	r0, #1
   139f0:	bl	116e8 <error@plt>
   139f4:	b	12344 <__assert_fail@plt+0x9ec>
   139f8:	mov	fp, r8
   139fc:	b	12dac <__assert_fail@plt+0x1454>
   13a00:	mov	ip, #10
   13a04:	sub	lr, r4, #48	; 0x30
   13a08:	umull	r0, r1, r2, ip
   13a0c:	adds	r0, r0, lr
   13a10:	mla	r1, ip, r3, r1
   13a14:	adc	r1, r1, lr, asr #31
   13a18:	cmp	r3, r1
   13a1c:	cmpeq	r2, r0
   13a20:	bhi	120a8 <__assert_fail@plt+0x750>
   13a24:	b	12028 <__assert_fail@plt+0x6d0>
   13a28:	bl	186fc <close_stdout@@Base+0x3680>
   13a2c:	ldr	r3, [pc, #208]	; 13b04 <__assert_fail@plt+0x21ac>
   13a30:	movw	r2, #742	; 0x2e6
   13a34:	ldr	r0, [pc, #204]	; 13b08 <__assert_fail@plt+0x21b0>
   13a38:	ldr	r1, [pc, #204]	; 13b0c <__assert_fail@plt+0x21b4>
   13a3c:	add	r3, pc, r3
   13a40:	add	r0, pc, r0
   13a44:	add	r3, r3, #52	; 0x34
   13a48:	add	r1, pc, r1
   13a4c:	bl	11958 <__assert_fail@plt>
   13a50:	ldr	r6, [sp, #64]	; 0x40
   13a54:	cmp	r6, #0
   13a58:	beq	13a64 <__assert_fail@plt+0x210c>
   13a5c:	adds	r8, r8, #1
   13a60:	adc	r9, r9, #0
   13a64:	ldrd	r6, [sp, #24]
   13a68:	orrs	r7, r6, r7
   13a6c:	bne	12ba0 <__assert_fail@plt+0x1248>
   13a70:	mov	r4, r8
   13a74:	mov	r5, r9
   13a78:	b	13a94 <__assert_fail@plt+0x213c>
   13a7c:	mov	r1, #0
   13a80:	adds	r4, r4, #1
   13a84:	mov	r0, #1
   13a88:	mov	r2, r1
   13a8c:	adc	r5, r5, #0
   13a90:	bl	14a6c <__assert_fail@plt+0x3114>
   13a94:	ldrd	r6, [sp, #32]
   13a98:	cmp	r7, r5
   13a9c:	cmpeq	r6, r4
   13aa0:	bcs	13a7c <__assert_fail@plt+0x2124>
   13aa4:	b	12ba0 <__assert_fail@plt+0x1248>
   13aa8:	bl	117f0 <__errno_location@plt>
   13aac:	ldr	r3, [pc, #92]	; 13b10 <__assert_fail@plt+0x21b8>
   13ab0:	add	r3, pc, r3
   13ab4:	ldr	r3, [r3, #300]	; 0x12c
   13ab8:	mov	r2, r0
   13abc:	mov	r0, r4
   13ac0:	ldr	r1, [r2]
   13ac4:	ldr	r2, [pc, #72]	; 13b14 <__assert_fail@plt+0x21bc>
   13ac8:	add	r2, pc, r2
   13acc:	bl	116e8 <error@plt>
   13ad0:	b	13828 <__assert_fail@plt+0x1ed0>
   13ad4:	ldr	r3, [pc, #60]	; 13b18 <__assert_fail@plt+0x21c0>
   13ad8:	movw	r2, #850	; 0x352
   13adc:	ldr	r0, [pc, #56]	; 13b1c <__assert_fail@plt+0x21c4>
   13ae0:	ldr	r1, [pc, #56]	; 13b20 <__assert_fail@plt+0x21c8>
   13ae4:	add	r3, pc, r3
   13ae8:	add	r0, pc, r0
   13aec:	add	r3, r3, #32
   13af0:	add	r1, pc, r1
   13af4:	bl	11958 <__assert_fail@plt>
   13af8:	andeq	r9, r0, ip, ror pc
   13afc:	andeq	sl, r0, ip, lsl #1
   13b00:	andeq	fp, r1, r0, ror #19
   13b04:	andeq	r9, r0, r8, lsl r3
   13b08:	andeq	sl, r0, r8, rrx
   13b0c:	andeq	r9, r0, ip, asr r3
   13b10:	andeq	fp, r1, r0, lsl #18
   13b14:	strdeq	r9, [r0], -ip
   13b18:	andeq	r9, r0, r0, ror r2
   13b1c:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   13b20:			; <UNDEFINED> instruction: 0x000092b4
   13b24:	mov	fp, #0
   13b28:	mov	lr, #0
   13b2c:	pop	{r1}		; (ldr r1, [sp], #4)
   13b30:	mov	r2, sp
   13b34:	push	{r2}		; (str r2, [sp, #-4]!)
   13b38:	push	{r0}		; (str r0, [sp, #-4]!)
   13b3c:	ldr	ip, [pc, #16]	; 13b54 <__assert_fail@plt+0x21fc>
   13b40:	push	{ip}		; (str ip, [sp, #-4]!)
   13b44:	ldr	r0, [pc, #12]	; 13b58 <__assert_fail@plt+0x2200>
   13b48:	ldr	r3, [pc, #12]	; 13b5c <__assert_fail@plt+0x2204>
   13b4c:	bl	11730 <__libc_start_main@plt>
   13b50:	bl	11934 <abort@plt>
   13b54:	andeq	ip, r1, ip, lsl sp
   13b58:	andeq	r1, r1, r4, ror #18
   13b5c:			; <UNDEFINED> instruction: 0x0001ccb8
   13b60:	ldr	r3, [pc, #20]	; 13b7c <__assert_fail@plt+0x2224>
   13b64:	ldr	r2, [pc, #20]	; 13b80 <__assert_fail@plt+0x2228>
   13b68:	add	r3, pc, r3
   13b6c:	ldr	r2, [r3, r2]
   13b70:	cmp	r2, #0
   13b74:	bxeq	lr
   13b78:	b	11748 <__gmon_start__@plt>
   13b7c:	muleq	r1, r0, r4
   13b80:	muleq	r0, r0, r1
   13b84:	push	{r3, lr}
   13b88:	movw	r0, #62384	; 0xf3b0
   13b8c:	ldr	r3, [pc, #36]	; 13bb8 <__assert_fail@plt+0x2260>
   13b90:	movt	r0, #2
   13b94:	rsb	r3, r0, r3
   13b98:	cmp	r3, #6
   13b9c:	popls	{r3, pc}
   13ba0:	movw	r3, #0
   13ba4:	movt	r3, #0
   13ba8:	cmp	r3, #0
   13bac:	popeq	{r3, pc}
   13bb0:	blx	r3
   13bb4:	pop	{r3, pc}
   13bb8:			; <UNDEFINED> instruction: 0x0002f3b3
   13bbc:	push	{r3, lr}
   13bc0:	movw	r0, #62384	; 0xf3b0
   13bc4:	movw	r3, #62384	; 0xf3b0
   13bc8:	movt	r0, #2
   13bcc:	movt	r3, #2
   13bd0:	rsb	r3, r0, r3
   13bd4:	asr	r3, r3, #2
   13bd8:	add	r3, r3, r3, lsr #31
   13bdc:	asrs	r1, r3, #1
   13be0:	popeq	{r3, pc}
   13be4:	movw	r2, #0
   13be8:	movt	r2, #0
   13bec:	cmp	r2, #0
   13bf0:	popeq	{r3, pc}
   13bf4:	blx	r2
   13bf8:	pop	{r3, pc}
   13bfc:	push	{r4, lr}
   13c00:	movw	r4, #62384	; 0xf3b0
   13c04:	movt	r4, #2
   13c08:	ldrb	r3, [r4]
   13c0c:	cmp	r3, #0
   13c10:	popne	{r4, pc}
   13c14:	bl	13b84 <__assert_fail@plt+0x222c>
   13c18:	mov	r3, #1
   13c1c:	strb	r3, [r4]
   13c20:	pop	{r4, pc}
   13c24:	movw	r0, #60912	; 0xedf0
   13c28:	movt	r0, #2
   13c2c:	push	{r3, lr}
   13c30:	ldr	r3, [r0]
   13c34:	cmp	r3, #0
   13c38:	beq	13c50 <__assert_fail@plt+0x22f8>
   13c3c:	movw	r3, #0
   13c40:	movt	r3, #0
   13c44:	cmp	r3, #0
   13c48:	beq	13c50 <__assert_fail@plt+0x22f8>
   13c4c:	blx	r3
   13c50:	pop	{r3, lr}
   13c54:	b	13bbc <__assert_fail@plt+0x2264>
   13c58:	ldr	r1, [pc, #712]	; 13f28 <__assert_fail@plt+0x25d0>
   13c5c:	push	{r4, r5, r6, r7, r8, lr}
   13c60:	add	r1, pc, r1
   13c64:	sub	sp, sp, #8
   13c68:	ldm	r1, {r3, r6}
   13c6c:	cmp	r3, #0
   13c70:	beq	13d38 <__assert_fail@plt+0x23e0>
   13c74:	cmp	r6, #0
   13c78:	sub	r3, r6, #1
   13c7c:	beq	13cf8 <__assert_fail@plt+0x23a0>
   13c80:	ldr	r0, [pc, #676]	; 13f2c <__assert_fail@plt+0x25d4>
   13c84:	ldr	r2, [pc, #676]	; 13f30 <__assert_fail@plt+0x25d8>
   13c88:	add	r0, pc, r0
   13c8c:	ldr	r7, [r1, #28]
   13c90:	add	r2, pc, r2
   13c94:	ldr	ip, [r1, #32]
   13c98:	ldrb	r5, [r0]
   13c9c:	ldr	r0, [r2]
   13ca0:	add	r2, r7, r6, lsl #2
   13ca4:	b	13cc4 <__assert_fail@plt+0x236c>
   13ca8:	str	r1, [r2, #-4]!
   13cac:	cmp	r3, #0
   13cb0:	ldrb	r1, [r0]
   13cb4:	sub	r4, r3, #1
   13cb8:	strb	r1, [ip, r3]
   13cbc:	beq	13cf8 <__assert_fail@plt+0x23a0>
   13cc0:	mov	r3, r4
   13cc4:	ldr	r1, [r2, #-4]
   13cc8:	cmp	r5, #0
   13ccc:	add	r1, r1, #1
   13cd0:	str	r1, [r2, #-4]
   13cd4:	beq	13ce0 <__assert_fail@plt+0x2388>
   13cd8:	cmp	r3, #0
   13cdc:	beq	13d24 <__assert_fail@plt+0x23cc>
   13ce0:	ldrb	r1, [r0, r1]
   13ce4:	cmp	r1, #0
   13ce8:	strb	r1, [ip, r3]
   13cec:	beq	13ca8 <__assert_fail@plt+0x2350>
   13cf0:	add	sp, sp, #8
   13cf4:	pop	{r4, r5, r6, r7, r8, pc}
   13cf8:	ldr	r1, [pc, #564]	; 13f34 <__assert_fail@plt+0x25dc>
   13cfc:	mov	r2, #5
   13d00:	mov	r0, #0
   13d04:	add	r1, pc, r1
   13d08:	bl	11628 <dcgettext@plt>
   13d0c:	mov	r1, #0
   13d10:	mov	r2, r0
   13d14:	mov	r0, #1
   13d18:	add	sp, sp, #8
   13d1c:	pop	{r4, r5, r6, r7, r8, lr}
   13d20:	b	116e8 <error@plt>
   13d24:	ldr	r4, [r7]
   13d28:	add	r4, r0, r4
   13d2c:	ldrb	r4, [r4, #1]
   13d30:	cmp	r4, #0
   13d34:	bne	13ce0 <__assert_fail@plt+0x2388>
   13d38:	ldr	r4, [pc, #504]	; 13f38 <__assert_fail@plt+0x25e0>
   13d3c:	add	r4, pc, r4
   13d40:	ldr	r3, [r4, #8]
   13d44:	adds	r7, r3, #0
   13d48:	movne	r7, #1
   13d4c:	cmp	r7, #0
   13d50:	bne	13ec4 <__assert_fail@plt+0x256c>
   13d54:	ldr	r0, [r4, #12]
   13d58:	bl	11790 <strlen@plt>
   13d5c:	mov	r5, r0
   13d60:	ldr	r0, [r4, #20]
   13d64:	str	r5, [r4, #16]
   13d68:	cmp	r0, #0
   13d6c:	moveq	r0, r7
   13d70:	beq	13d78 <__assert_fail@plt+0x2420>
   13d74:	bl	11790 <strlen@plt>
   13d78:	ldr	r2, [pc, #444]	; 13f3c <__assert_fail@plt+0x25e4>
   13d7c:	add	r3, r5, r6
   13d80:	add	r3, r3, r0
   13d84:	add	r2, pc, r2
   13d88:	str	r3, [r2, #8]
   13d8c:	str	r0, [r2, #24]
   13d90:	add	r1, r3, #1
   13d94:	cmp	r1, r5
   13d98:	bcc	13f04 <__assert_fail@plt+0x25ac>
   13d9c:	ldr	r4, [pc, #412]	; 13f40 <__assert_fail@plt+0x25e8>
   13da0:	add	r4, pc, r4
   13da4:	ldr	r0, [r4]
   13da8:	bl	18540 <close_stdout@@Base+0x34c4>
   13dac:	cmp	r7, #0
   13db0:	mov	r5, r0
   13db4:	str	r0, [r4]
   13db8:	beq	13edc <__assert_fail@plt+0x2584>
   13dbc:	ldr	r3, [pc, #384]	; 13f44 <__assert_fail@plt+0x25ec>
   13dc0:	ldr	r8, [r4, #28]
   13dc4:	add	r3, pc, r3
   13dc8:	ldr	r2, [r4, #16]
   13dcc:	ldr	r1, [r3]
   13dd0:	add	r3, r2, #1
   13dd4:	ldr	ip, [r8]
   13dd8:	str	r3, [r4, #16]
   13ddc:	mov	r0, r1
   13de0:	ldrb	r1, [r1, ip]
   13de4:	strb	r1, [r5, r2]
   13de8:	ldr	r4, [pc, #344]	; 13f48 <__assert_fail@plt+0x25f0>
   13dec:	add	r3, r5, r3
   13df0:	ldrb	r1, [r0]
   13df4:	add	r4, pc, r4
   13df8:	mov	r0, r3
   13dfc:	ldr	r6, [r4, #4]
   13e00:	str	r3, [r4, #32]
   13e04:	mov	r2, r6
   13e08:	bl	1182c <memset@plt>
   13e0c:	ldr	r1, [r4, #20]
   13e10:	cmp	r1, #0
   13e14:	beq	13e24 <__assert_fail@plt+0x24cc>
   13e18:	add	r0, r0, r6
   13e1c:	ldr	r2, [r4, #24]
   13e20:	bl	115e0 <memcpy@plt>
   13e24:	ldr	r4, [pc, #288]	; 13f4c <__assert_fail@plt+0x25f4>
   13e28:	mov	r0, r8
   13e2c:	mov	r2, #0
   13e30:	add	r4, pc, r4
   13e34:	ldr	r3, [r4, #8]
   13e38:	strb	r2, [r5, r3]
   13e3c:	bl	115c8 <free@plt>
   13e40:	mov	r0, r6
   13e44:	mov	r1, #4
   13e48:	bl	186a8 <close_stdout@@Base+0x362c>
   13e4c:	ldr	r6, [r4, #36]	; 0x24
   13e50:	cmp	r6, #0
   13e54:	mov	r8, r0
   13e58:	str	r0, [r4, #28]
   13e5c:	beq	13cf0 <__assert_fail@plt+0x2398>
   13e60:	cmp	r7, #0
   13e64:	bne	13f08 <__assert_fail@plt+0x25b0>
   13e68:	mov	r0, r6
   13e6c:	bl	11790 <strlen@plt>
   13e70:	ldr	r7, [r4, #4]
   13e74:	mov	r1, r6
   13e78:	mov	r5, r0
   13e7c:	mov	r2, r0
   13e80:	ldr	r0, [r4, #32]
   13e84:	rsb	r3, r5, r7
   13e88:	add	r0, r0, r3
   13e8c:	bl	115e0 <memcpy@plt>
   13e90:	cmp	r5, #0
   13e94:	add	r2, r8, r7, lsl #2
   13e98:	sub	r3, r5, #1
   13e9c:	beq	13cf0 <__assert_fail@plt+0x2398>
   13ea0:	add	r1, r6, r5
   13ea4:	sub	r3, r3, #1
   13ea8:	ldrb	r0, [r1, #-1]!
   13eac:	cmn	r3, #1
   13eb0:	sub	r0, r0, #48	; 0x30
   13eb4:	str	r0, [r2, #-4]!
   13eb8:	bne	13ea4 <__assert_fail@plt+0x254c>
   13ebc:	add	sp, sp, #8
   13ec0:	pop	{r4, r5, r6, r7, r8, pc}
   13ec4:	add	r3, r3, #2
   13ec8:	add	r6, r6, #1
   13ecc:	ldr	r5, [r4, #16]
   13ed0:	str	r3, [r4, #8]
   13ed4:	str	r6, [r4, #4]
   13ed8:	b	13d90 <__assert_fail@plt+0x2438>
   13edc:	ldr	r6, [r4, #16]
   13ee0:	ldr	r1, [r4, #12]
   13ee4:	mov	r2, r6
   13ee8:	bl	115e0 <memcpy@plt>
   13eec:	ldr	r2, [pc, #92]	; 13f50 <__assert_fail@plt+0x25f8>
   13ef0:	mov	r3, r6
   13ef4:	ldr	r8, [r4, #28]
   13ef8:	add	r2, pc, r2
   13efc:	ldr	r0, [r2]
   13f00:	b	13de8 <__assert_fail@plt+0x2490>
   13f04:	bl	186fc <close_stdout@@Base+0x3680>
   13f08:	ldr	r0, [pc, #68]	; 13f54 <__assert_fail@plt+0x25fc>
   13f0c:	mov	r2, #312	; 0x138
   13f10:	ldr	r1, [pc, #64]	; 13f58 <__assert_fail@plt+0x2600>
   13f14:	ldr	r3, [pc, #64]	; 13f5c <__assert_fail@plt+0x2604>
   13f18:	add	r0, pc, r0
   13f1c:	add	r1, pc, r1
   13f20:	add	r3, pc, r3
   13f24:	bl	11958 <__assert_fail@plt>
   13f28:	andeq	fp, r1, r0, asr r7
   13f2c:	andeq	fp, r1, r8, lsr #10
   13f30:	andeq	fp, r1, r8, lsr #10
   13f34:	andeq	r9, r0, ip, lsr #1
   13f38:	andeq	fp, r1, r4, ror r6
   13f3c:	andeq	fp, r1, ip, lsr #12
   13f40:	andeq	fp, r1, r0, lsl r6
   13f44:	strdeq	fp, [r1], -r4
   13f48:			; <UNDEFINED> instruction: 0x0001b5bc
   13f4c:	andeq	fp, r1, r0, lsl #11
   13f50:	andeq	fp, r1, r0, asr #5
   13f54:	andeq	r8, r0, r4, lsl #29
   13f58:	andeq	r8, r0, r8, lsl #29
   13f5c:	andeq	r8, r0, r4, lsr lr
   13f60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13f64:	sub	sp, sp, #140	; 0x8c
   13f68:	ldr	r4, [pc, #1492]	; 14544 <__assert_fail@plt+0x2bec>
   13f6c:	mov	r7, r0
   13f70:	ldr	r2, [pc, #1488]	; 14548 <__assert_fail@plt+0x2bf0>
   13f74:	add	r4, pc, r4
   13f78:	ldr	r3, [pc, #1484]	; 1454c <__assert_fail@plt+0x2bf4>
   13f7c:	ldr	r2, [r4, r2]
   13f80:	add	r3, pc, r3
   13f84:	ldr	r0, [r3, #40]	; 0x28
   13f88:	str	r2, [sp, #12]
   13f8c:	ldr	r2, [r2]
   13f90:	cmp	r0, #0
   13f94:	str	r2, [sp, #132]	; 0x84
   13f98:	beq	14288 <__assert_fail@plt+0x2930>
   13f9c:	ldr	r0, [pc, #1452]	; 14550 <__assert_fail@plt+0x2bf8>
   13fa0:	add	r0, pc, r0
   13fa4:	bl	11700 <getenv@plt>
   13fa8:	subs	r9, r0, #0
   13fac:	beq	1437c <__assert_fail@plt+0x2a24>
   13fb0:	ldr	r0, [pc, #1436]	; 14554 <__assert_fail@plt+0x2bfc>
   13fb4:	mov	r1, r7
   13fb8:	mov	r2, #1
   13fbc:	add	r0, pc, r0
   13fc0:	bl	117b4 <setenv@plt>
   13fc4:	cmp	r0, #0
   13fc8:	bne	14180 <__assert_fail@plt+0x2828>
   13fcc:	ldr	r3, [pc, #1412]	; 14558 <__assert_fail@plt+0x2c00>
   13fd0:	add	r3, pc, r3
   13fd4:	ldrb	r3, [r3, #44]	; 0x2c
   13fd8:	cmp	r3, #0
   13fdc:	bne	1412c <__assert_fail@plt+0x27d4>
   13fe0:	add	r0, sp, #16
   13fe4:	bl	11898 <pipe@plt>
   13fe8:	cmp	r0, #0
   13fec:	bne	140f0 <__assert_fail@plt+0x2798>
   13ff0:	bl	118d4 <fork@plt>
   13ff4:	subs	r8, r0, #0
   13ff8:	beq	1406c <__assert_fail@plt+0x2714>
   13ffc:	cmn	r8, #1
   14000:	beq	14400 <__assert_fail@plt+0x2aa8>
   14004:	ldr	r0, [sp, #16]
   14008:	bl	11940 <close@plt>
   1400c:	cmp	r0, #0
   14010:	bne	14258 <__assert_fail@plt+0x2900>
   14014:	ldr	r3, [pc, #1344]	; 1455c <__assert_fail@plt+0x2c04>
   14018:	add	r3, pc, r3
   1401c:	ldr	r2, [r3, #152]	; 0x98
   14020:	ldr	r1, [r3, #292]	; 0x124
   14024:	str	r8, [r3, #288]	; 0x120
   14028:	cmp	r2, r1
   1402c:	ldr	r0, [r3, #156]	; 0x9c
   14030:	beq	1433c <__assert_fail@plt+0x29e4>
   14034:	ldr	ip, [sp, #20]
   14038:	add	r1, r2, #1
   1403c:	ldr	r3, [pc, #1308]	; 14560 <__assert_fail@plt+0x2c08>
   14040:	str	ip, [r0, r2, lsl #2]
   14044:	add	r3, pc, r3
   14048:	ldr	r0, [sp, #20]
   1404c:	str	r1, [r3, #152]	; 0x98
   14050:	ldr	r1, [sp, #12]
   14054:	ldr	r2, [sp, #132]	; 0x84
   14058:	ldr	r3, [r1]
   1405c:	cmp	r2, r3
   14060:	bne	1453c <__assert_fail@plt+0x2be4>
   14064:	add	sp, sp, #140	; 0x8c
   14068:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1406c:	ldr	r5, [pc, #1264]	; 14564 <__assert_fail@plt+0x2c0c>
   14070:	add	r5, pc, r5
   14074:	ldr	r3, [r5, #152]	; 0x98
   14078:	cmp	r3, #0
   1407c:	beq	141b0 <__assert_fail@plt+0x2858>
   14080:	bl	117f0 <__errno_location@plt>
   14084:	ldr	fp, [pc, #1244]	; 14568 <__assert_fail@plt+0x2c10>
   14088:	mov	r7, r5
   1408c:	mov	r3, r8
   14090:	add	fp, pc, fp
   14094:	mov	r4, r8
   14098:	mov	sl, r0
   1409c:	b	140b4 <__assert_fail@plt+0x275c>
   140a0:	ldr	r3, [r7, #152]	; 0x98
   140a4:	add	r4, r4, #1
   140a8:	cmp	r4, r3
   140ac:	mov	r3, r4
   140b0:	bcs	141b0 <__assert_fail@plt+0x2858>
   140b4:	ldr	r2, [r5, #156]	; 0x9c
   140b8:	ldr	r0, [r2, r3, lsl #2]
   140bc:	bl	11940 <close@plt>
   140c0:	cmp	r0, #0
   140c4:	beq	140a0 <__assert_fail@plt+0x2748>
   140c8:	mov	r1, fp
   140cc:	mov	r2, #5
   140d0:	mov	r0, #0
   140d4:	ldr	r6, [sl]
   140d8:	bl	11628 <dcgettext@plt>
   140dc:	mov	r1, r6
   140e0:	mov	r2, r0
   140e4:	mov	r0, #1
   140e8:	bl	116e8 <error@plt>
   140ec:	b	140a0 <__assert_fail@plt+0x2748>
   140f0:	bl	117f0 <__errno_location@plt>
   140f4:	ldr	r1, [pc, #1136]	; 1456c <__assert_fail@plt+0x2c14>
   140f8:	mov	r2, #5
   140fc:	add	r1, pc, r1
   14100:	ldr	r4, [r0]
   14104:	mov	r0, #0
   14108:	bl	11628 <dcgettext@plt>
   1410c:	mov	r1, r4
   14110:	mov	r2, r0
   14114:	mov	r0, #1
   14118:	bl	116e8 <error@plt>
   1411c:	bl	118d4 <fork@plt>
   14120:	subs	r8, r0, #0
   14124:	bne	13ffc <__assert_fail@plt+0x26a4>
   14128:	b	1406c <__assert_fail@plt+0x2714>
   1412c:	ldr	r3, [pc, #1084]	; 14570 <__assert_fail@plt+0x2c18>
   14130:	mov	r2, #5
   14134:	ldr	r1, [pc, #1080]	; 14574 <__assert_fail@plt+0x2c1c>
   14138:	mov	r0, #0
   1413c:	ldr	r3, [r4, r3]
   14140:	add	r1, pc, r1
   14144:	ldr	r4, [r3]
   14148:	bl	11628 <dcgettext@plt>
   1414c:	mov	r5, r0
   14150:	mov	r0, r7
   14154:	bl	17860 <close_stdout@@Base+0x27e4>
   14158:	mov	r2, r5
   1415c:	mov	r1, #1
   14160:	mov	r3, r0
   14164:	mov	r0, r4
   14168:	bl	11868 <__fprintf_chk@plt>
   1416c:	add	r0, sp, #16
   14170:	bl	11898 <pipe@plt>
   14174:	cmp	r0, #0
   14178:	beq	13ff0 <__assert_fail@plt+0x2698>
   1417c:	b	140f0 <__assert_fail@plt+0x2798>
   14180:	bl	117f0 <__errno_location@plt>
   14184:	ldr	r1, [pc, #1004]	; 14578 <__assert_fail@plt+0x2c20>
   14188:	mov	r2, #5
   1418c:	add	r1, pc, r1
   14190:	ldr	r5, [r0]
   14194:	mov	r0, #0
   14198:	bl	11628 <dcgettext@plt>
   1419c:	mov	r1, r5
   141a0:	mov	r2, r0
   141a4:	mov	r0, #1
   141a8:	bl	116e8 <error@plt>
   141ac:	b	13fcc <__assert_fail@plt+0x2674>
   141b0:	bl	117f0 <__errno_location@plt>
   141b4:	mov	r7, r0
   141b8:	ldr	r0, [sp, #20]
   141bc:	bl	11940 <close@plt>
   141c0:	cmp	r0, #0
   141c4:	bne	143d4 <__assert_fail@plt+0x2a7c>
   141c8:	ldr	r0, [sp, #16]
   141cc:	cmp	r0, #0
   141d0:	bne	14388 <__assert_fail@plt+0x2a30>
   141d4:	ldr	r5, [pc, #928]	; 1457c <__assert_fail@plt+0x2c24>
   141d8:	mov	r2, #0
   141dc:	mov	r0, #2
   141e0:	mov	r4, r2
   141e4:	add	r5, pc, r5
   141e8:	add	r1, r5, #160	; 0xa0
   141ec:	bl	115b0 <sigprocmask@plt>
   141f0:	mov	r0, r9
   141f4:	bl	15194 <close_stdout@@Base+0x118>
   141f8:	ldr	r5, [r5, #40]	; 0x28
   141fc:	ldr	r2, [pc, #892]	; 14580 <__assert_fail@plt+0x2c28>
   14200:	str	r4, [sp]
   14204:	mov	r3, r5
   14208:	add	r2, pc, r2
   1420c:	mov	r1, r0
   14210:	mov	r0, r9
   14214:	bl	118e0 <execl@plt>
   14218:	ldr	r1, [pc, #868]	; 14584 <__assert_fail@plt+0x2c2c>
   1421c:	mov	r2, #5
   14220:	mov	r0, r4
   14224:	add	r1, pc, r1
   14228:	ldr	r7, [r7]
   1422c:	bl	11628 <dcgettext@plt>
   14230:	mov	r3, r9
   14234:	str	r5, [sp]
   14238:	mov	r1, r7
   1423c:	mov	r2, r0
   14240:	mov	r0, #1
   14244:	bl	116e8 <error@plt>
   14248:	ldr	r0, [sp, #16]
   1424c:	bl	11940 <close@plt>
   14250:	cmp	r0, #0
   14254:	beq	14014 <__assert_fail@plt+0x26bc>
   14258:	bl	117f0 <__errno_location@plt>
   1425c:	ldr	r1, [pc, #804]	; 14588 <__assert_fail@plt+0x2c30>
   14260:	mov	r2, #5
   14264:	add	r1, pc, r1
   14268:	ldr	r4, [r0]
   1426c:	mov	r0, #0
   14270:	bl	11628 <dcgettext@plt>
   14274:	mov	r1, r4
   14278:	mov	r2, r0
   1427c:	mov	r0, #1
   14280:	bl	116e8 <error@plt>
   14284:	b	14014 <__assert_fail@plt+0x26bc>
   14288:	ldrb	r3, [r3, #44]	; 0x2c
   1428c:	cmp	r3, #0
   14290:	bne	14430 <__assert_fail@plt+0x2ad8>
   14294:	mov	r0, r7
   14298:	mov	r1, #65	; 0x41
   1429c:	movw	r2, #438	; 0x1b6
   142a0:	bl	15238 <close_stdout@@Base+0x1bc>
   142a4:	subs	r8, r0, #0
   142a8:	blt	14334 <__assert_fail@plt+0x29dc>
   142ac:	mov	r0, #3
   142b0:	mov	r1, r8
   142b4:	add	r2, sp, #24
   142b8:	bl	1167c <__fxstat64@plt>
   142bc:	cmp	r0, #0
   142c0:	bne	14470 <__assert_fail@plt+0x2b18>
   142c4:	ldr	r1, [pc, #704]	; 1458c <__assert_fail@plt+0x2c34>
   142c8:	ldrd	r2, [sp, #120]	; 0x78
   142cc:	add	r1, pc, r1
   142d0:	ldrd	r4, [r1, #144]	; 0x90
   142d4:	cmp	r5, r3
   142d8:	cmpeq	r4, r2
   142dc:	beq	144b0 <__assert_fail@plt+0x2b58>
   142e0:	mov	r0, r8
   142e4:	mov	r2, #0
   142e8:	mov	r3, #0
   142ec:	bl	11604 <ftruncate64@plt>
   142f0:	cmp	r0, #0
   142f4:	beq	14334 <__assert_fail@plt+0x29dc>
   142f8:	bl	117f0 <__errno_location@plt>
   142fc:	ldr	r1, [pc, #652]	; 14590 <__assert_fail@plt+0x2c38>
   14300:	mov	r2, #5
   14304:	add	r1, pc, r1
   14308:	ldr	r4, [r0]
   1430c:	mov	r0, #0
   14310:	bl	11628 <dcgettext@plt>
   14314:	mov	r5, r0
   14318:	mov	r0, r7
   1431c:	bl	17860 <close_stdout@@Base+0x27e4>
   14320:	mov	r1, r4
   14324:	mov	r2, r5
   14328:	mov	r3, r0
   1432c:	mov	r0, #1
   14330:	bl	116e8 <error@plt>
   14334:	mov	r0, r8
   14338:	b	14050 <__assert_fail@plt+0x26f8>
   1433c:	cmp	r0, #0
   14340:	beq	14528 <__assert_fail@plt+0x2bd0>
   14344:	movw	r3, #43689	; 0xaaa9
   14348:	movt	r3, #10922	; 0x2aaa
   1434c:	cmp	r2, r3
   14350:	addls	r3, r2, #1
   14354:	addls	r2, r2, r3, lsr #1
   14358:	bhi	14540 <__assert_fail@plt+0x2be8>
   1435c:	lsl	r1, r2, #2
   14360:	ldr	r4, [pc, #556]	; 14594 <__assert_fail@plt+0x2c3c>
   14364:	add	r4, pc, r4
   14368:	str	r2, [r4, #292]	; 0x124
   1436c:	bl	18540 <close_stdout@@Base+0x34c4>
   14370:	ldr	r2, [r4, #152]	; 0x98
   14374:	str	r0, [r4, #156]	; 0x9c
   14378:	b	14034 <__assert_fail@plt+0x26dc>
   1437c:	ldr	r9, [pc, #532]	; 14598 <__assert_fail@plt+0x2c40>
   14380:	add	r9, pc, r9
   14384:	b	13fb0 <__assert_fail@plt+0x2658>
   14388:	mov	r1, #0
   1438c:	bl	11640 <dup2@plt>
   14390:	cmp	r0, #0
   14394:	bne	144fc <__assert_fail@plt+0x2ba4>
   14398:	ldr	r0, [sp, #16]
   1439c:	bl	11940 <close@plt>
   143a0:	cmp	r0, #0
   143a4:	beq	141d4 <__assert_fail@plt+0x287c>
   143a8:	ldr	r1, [pc, #492]	; 1459c <__assert_fail@plt+0x2c44>
   143ac:	mov	r2, #5
   143b0:	mov	r0, #0
   143b4:	ldr	r4, [r7]
   143b8:	add	r1, pc, r1
   143bc:	bl	11628 <dcgettext@plt>
   143c0:	mov	r1, r4
   143c4:	mov	r2, r0
   143c8:	mov	r0, #1
   143cc:	bl	116e8 <error@plt>
   143d0:	b	141d4 <__assert_fail@plt+0x287c>
   143d4:	ldr	r1, [pc, #452]	; 145a0 <__assert_fail@plt+0x2c48>
   143d8:	mov	r2, #5
   143dc:	mov	r0, #0
   143e0:	ldr	r4, [r7]
   143e4:	add	r1, pc, r1
   143e8:	bl	11628 <dcgettext@plt>
   143ec:	mov	r1, r4
   143f0:	mov	r2, r0
   143f4:	mov	r0, #1
   143f8:	bl	116e8 <error@plt>
   143fc:	b	141c8 <__assert_fail@plt+0x2870>
   14400:	bl	117f0 <__errno_location@plt>
   14404:	ldr	r1, [pc, #408]	; 145a4 <__assert_fail@plt+0x2c4c>
   14408:	mov	r2, #5
   1440c:	add	r1, pc, r1
   14410:	ldr	r4, [r0]
   14414:	mov	r0, #0
   14418:	bl	11628 <dcgettext@plt>
   1441c:	mov	r1, r4
   14420:	mov	r2, r0
   14424:	mov	r0, #1
   14428:	bl	116e8 <error@plt>
   1442c:	b	14004 <__assert_fail@plt+0x26ac>
   14430:	ldr	r3, [pc, #312]	; 14570 <__assert_fail@plt+0x2c18>
   14434:	mov	r2, #5
   14438:	ldr	r1, [pc, #360]	; 145a8 <__assert_fail@plt+0x2c50>
   1443c:	ldr	r3, [r4, r3]
   14440:	add	r1, pc, r1
   14444:	ldr	r4, [r3]
   14448:	bl	11628 <dcgettext@plt>
   1444c:	mov	r5, r0
   14450:	mov	r0, r7
   14454:	bl	17860 <close_stdout@@Base+0x27e4>
   14458:	mov	r2, r5
   1445c:	mov	r1, #1
   14460:	mov	r3, r0
   14464:	mov	r0, r4
   14468:	bl	11868 <__fprintf_chk@plt>
   1446c:	b	14294 <__assert_fail@plt+0x293c>
   14470:	bl	117f0 <__errno_location@plt>
   14474:	ldr	r1, [pc, #304]	; 145ac <__assert_fail@plt+0x2c54>
   14478:	mov	r2, #5
   1447c:	add	r1, pc, r1
   14480:	ldr	r4, [r0]
   14484:	mov	r0, #0
   14488:	bl	11628 <dcgettext@plt>
   1448c:	mov	r5, r0
   14490:	mov	r0, r7
   14494:	bl	17860 <close_stdout@@Base+0x27e4>
   14498:	mov	r1, r4
   1449c:	mov	r2, r5
   144a0:	mov	r3, r0
   144a4:	mov	r0, #1
   144a8:	bl	116e8 <error@plt>
   144ac:	b	142c4 <__assert_fail@plt+0x296c>
   144b0:	ldrd	r0, [r1, #48]	; 0x30
   144b4:	ldrd	r2, [sp, #24]
   144b8:	cmp	r1, r3
   144bc:	cmpeq	r0, r2
   144c0:	bne	142e0 <__assert_fail@plt+0x2988>
   144c4:	ldr	r1, [pc, #228]	; 145b0 <__assert_fail@plt+0x2c58>
   144c8:	mov	r2, #5
   144cc:	mov	r0, #0
   144d0:	add	r1, pc, r1
   144d4:	bl	11628 <dcgettext@plt>
   144d8:	mov	r4, r0
   144dc:	mov	r0, r7
   144e0:	bl	17860 <close_stdout@@Base+0x27e4>
   144e4:	mov	r2, r4
   144e8:	mov	r1, #0
   144ec:	mov	r3, r0
   144f0:	mov	r0, #1
   144f4:	bl	116e8 <error@plt>
   144f8:	b	142e0 <__assert_fail@plt+0x2988>
   144fc:	ldr	r1, [pc, #176]	; 145b4 <__assert_fail@plt+0x2c5c>
   14500:	mov	r2, #5
   14504:	mov	r0, #0
   14508:	ldr	r4, [r7]
   1450c:	add	r1, pc, r1
   14510:	bl	11628 <dcgettext@plt>
   14514:	mov	r1, r4
   14518:	mov	r2, r0
   1451c:	mov	r0, #1
   14520:	bl	116e8 <error@plt>
   14524:	b	14398 <__assert_fail@plt+0x2a40>
   14528:	cmp	r2, #0
   1452c:	moveq	r1, #64	; 0x40
   14530:	moveq	r2, #16
   14534:	beq	14360 <__assert_fail@plt+0x2a08>
   14538:	b	1435c <__assert_fail@plt+0x2a04>
   1453c:	bl	11634 <__stack_chk_fail@plt>
   14540:	bl	186fc <close_stdout@@Base+0x3680>
   14544:	andeq	fp, r1, r4, lsl #1
   14548:	andeq	r0, r0, ip, ror r1
   1454c:	andeq	fp, r1, r0, lsr r4
   14550:	muleq	r0, ip, lr
   14554:	andeq	r8, r0, r8, lsl #29
   14558:	andeq	fp, r1, r0, ror #7
   1455c:	muleq	r1, r8, r3
   14560:	andeq	fp, r1, ip, ror #6
   14564:	andeq	fp, r1, r0, asr #6
   14568:	andeq	r8, r0, r4, lsl lr
   1456c:	muleq	r0, r0, sp
   14570:	muleq	r0, r8, r1
   14574:	andeq	r8, r0, r4, lsr sp
   14578:	andeq	r8, r0, r0, asr #25
   1457c:	andeq	fp, r1, ip, asr #3
   14580:	andeq	r8, r0, ip, ror #25
   14584:	ldrdeq	r8, [r0], -r4
   14588:	ldrdeq	r8, [r0], -r0
   1458c:	andeq	fp, r1, r4, ror #1
   14590:	andeq	r8, r0, r0, lsr #22
   14594:	andeq	fp, r1, ip, asr #32
   14598:	andeq	r8, r0, r0, asr sl
   1459c:	andeq	r8, r0, r8, lsr #22
   145a0:	ldrdeq	r8, [r0], -r4
   145a4:	andeq	r8, r0, r0, lsl fp
   145a8:	muleq	r0, r8, r9
   145ac:	andeq	r8, r0, r0, ror r9
   145b0:	andeq	r8, r0, r0, lsr r9
   145b4:	andeq	r8, r0, r0, asr #19
   145b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   145bc:	add	r9, r0, r1, lsl #4
   145c0:	sub	sp, sp, #12
   145c4:	mov	r7, r1
   145c8:	ldr	r3, [r9, #4]
   145cc:	mov	r6, r0
   145d0:	mov	r8, r2
   145d4:	cmp	r3, #0
   145d8:	movge	sl, #0
   145dc:	blt	145ec <__assert_fail@plt+0x2c94>
   145e0:	mov	r0, sl
   145e4:	add	sp, sp, #12
   145e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145ec:	cmp	r1, #0
   145f0:	ldr	fp, [pc, #360]	; 14760 <__assert_fail@plt+0x2e08>
   145f4:	subeq	r4, r2, #1
   145f8:	ldr	r2, [pc, #356]	; 14764 <__assert_fail@plt+0x2e0c>
   145fc:	subne	r4, r1, #1
   14600:	cmn	r3, #1
   14604:	add	r2, pc, r2
   14608:	str	r2, [sp]
   1460c:	ldr	r2, [pc, #340]	; 14768 <__assert_fail@plt+0x2e10>
   14610:	mov	sl, #0
   14614:	add	fp, pc, fp
   14618:	ldr	r0, [r9]
   1461c:	add	r2, pc, r2
   14620:	str	r2, [sp, #4]
   14624:	beq	146dc <__assert_fail@plt+0x2d84>
   14628:	movw	r1, #3073	; 0xc01
   1462c:	bl	15238 <close_stdout@@Base+0x1bc>
   14630:	cmp	r0, #0
   14634:	bge	146e8 <__assert_fail@plt+0x2d90>
   14638:	bl	117f0 <__errno_location@plt>
   1463c:	ldr	r1, [r0]
   14640:	mov	sl, r0
   14644:	sub	r3, r1, #23
   14648:	cmp	r3, #1
   1464c:	bls	14660 <__assert_fail@plt+0x2d08>
   14650:	mov	r0, #1
   14654:	ldr	r2, [sp]
   14658:	ldr	r3, [r9]
   1465c:	bl	116e8 <error@plt>
   14660:	add	r5, r6, r4, lsl #4
   14664:	ldr	r3, [r5, #4]
   14668:	cmp	r3, #0
   1466c:	bge	146a8 <__assert_fail@plt+0x2d50>
   14670:	cmp	r4, #0
   14674:	sub	r4, r4, #1
   14678:	subeq	r4, r8, #1
   1467c:	cmp	r4, r7
   14680:	bne	14660 <__assert_fail@plt+0x2d08>
   14684:	add	r5, r6, r4, lsl #4
   14688:	ldr	r3, [r9]
   1468c:	mov	r0, #1
   14690:	ldr	r1, [sl]
   14694:	mov	r2, fp
   14698:	bl	116e8 <error@plt>
   1469c:	ldr	r3, [r5, #4]
   146a0:	cmp	r3, #0
   146a4:	blt	14670 <__assert_fail@plt+0x2d18>
   146a8:	ldr	r0, [r5, #8]
   146ac:	bl	19478 <close_stdout@@Base+0x43fc>
   146b0:	cmp	r0, #0
   146b4:	bne	14728 <__assert_fail@plt+0x2dd0>
   146b8:	mov	r3, #0
   146bc:	str	r3, [r5, #8]
   146c0:	mvn	r3, #1
   146c4:	str	r3, [r5, #4]
   146c8:	ldr	r3, [r9, #4]
   146cc:	mov	sl, #1
   146d0:	ldr	r0, [r9]
   146d4:	cmn	r3, #1
   146d8:	bne	14628 <__assert_fail@plt+0x2cd0>
   146dc:	bl	13f60 <__assert_fail@plt+0x2608>
   146e0:	cmp	r0, #0
   146e4:	blt	14638 <__assert_fail@plt+0x2ce0>
   146e8:	ldr	r1, [pc, #124]	; 1476c <__assert_fail@plt+0x2e14>
   146ec:	str	r0, [r9, #4]
   146f0:	add	r1, pc, r1
   146f4:	bl	1152c <fdopen@plt>
   146f8:	cmp	r0, #0
   146fc:	str	r0, [r9, #8]
   14700:	beq	14740 <__assert_fail@plt+0x2de8>
   14704:	ldr	r3, [pc, #100]	; 14770 <__assert_fail@plt+0x2e18>
   14708:	mov	r1, #0
   1470c:	mov	r0, sl
   14710:	add	r3, pc, r3
   14714:	ldr	r2, [r3, #288]	; 0x120
   14718:	str	r1, [r3, #288]	; 0x120
   1471c:	str	r2, [r9, #12]
   14720:	add	sp, sp, #12
   14724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14728:	ldr	r1, [sl]
   1472c:	mov	r0, #1
   14730:	ldr	r2, [sp, #4]
   14734:	ldr	r3, [r5]
   14738:	bl	116e8 <error@plt>
   1473c:	b	146b8 <__assert_fail@plt+0x2d60>
   14740:	bl	117f0 <__errno_location@plt>
   14744:	ldr	r2, [pc, #40]	; 14774 <__assert_fail@plt+0x2e1c>
   14748:	ldr	r3, [r6, r7, lsl #4]
   1474c:	add	r2, pc, r2
   14750:	ldr	r1, [r0]
   14754:	mov	r0, #1
   14758:	bl	116e8 <error@plt>
   1475c:	b	14704 <__assert_fail@plt+0x2dac>
   14760:			; <UNDEFINED> instruction: 0x000089b0
   14764:	andeq	r8, r0, r0, asr #19
   14768:	andeq	r8, r0, r8, lsr #19
   1476c:	andeq	r8, r0, r0, ror #16
   14770:	andeq	sl, r1, r0, lsr #25
   14774:	andeq	r8, r0, r8, ror r8
   14778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1477c:	mov	sl, r3
   14780:	ldr	r4, [pc, #684]	; 14a34 <__assert_fail@plt+0x30dc>
   14784:	sub	sp, sp, #44	; 0x2c
   14788:	ldr	ip, [pc, #680]	; 14a38 <__assert_fail@plt+0x30e0>
   1478c:	cmp	r0, #0
   14790:	add	r4, pc, r4
   14794:	mov	fp, r1
   14798:	mov	r9, r2
   1479c:	ldr	r8, [r4, ip]
   147a0:	mov	r3, r4
   147a4:	ldr	r3, [r8]
   147a8:	str	r3, [sp, #36]	; 0x24
   147ac:	beq	149fc <__assert_fail@plt+0x30a4>
   147b0:	bl	19478 <close_stdout@@Base+0x43fc>
   147b4:	cmp	r0, #0
   147b8:	beq	147f4 <__assert_fail@plt+0x2e9c>
   147bc:	bl	117f0 <__errno_location@plt>
   147c0:	ldr	r3, [pc, #628]	; 14a3c <__assert_fail@plt+0x30e4>
   147c4:	add	r3, pc, r3
   147c8:	ldr	r3, [r3, #40]	; 0x28
   147cc:	cmp	r3, #0
   147d0:	ldr	r1, [r0]
   147d4:	beq	147e0 <__assert_fail@plt+0x2e88>
   147d8:	cmp	r1, #32
   147dc:	beq	147f4 <__assert_fail@plt+0x2e9c>
   147e0:	ldr	r2, [pc, #600]	; 14a40 <__assert_fail@plt+0x30e8>
   147e4:	mov	r0, #1
   147e8:	mov	r3, sl
   147ec:	add	r2, pc, r2
   147f0:	bl	116e8 <error@plt>
   147f4:	cmp	fp, #0
   147f8:	blt	1484c <__assert_fail@plt+0x2ef4>
   147fc:	ldr	r3, [pc, #576]	; 14a44 <__assert_fail@plt+0x30ec>
   14800:	add	r3, pc, r3
   14804:	ldr	r7, [r3, #152]	; 0x98
   14808:	cmp	r7, #0
   1480c:	beq	1484c <__assert_fail@plt+0x2ef4>
   14810:	ldr	r3, [r3, #156]	; 0x9c
   14814:	ldr	r2, [r3]
   14818:	cmp	r2, fp
   1481c:	addne	r4, r3, #4
   14820:	movne	ip, #0
   14824:	bne	14840 <__assert_fail@plt+0x2ee8>
   14828:	b	14900 <__assert_fail@plt+0x2fa8>
   1482c:	mov	r5, r4
   14830:	add	r4, r4, #4
   14834:	ldr	r6, [r5]
   14838:	cmp	r6, fp
   1483c:	beq	14904 <__assert_fail@plt+0x2fac>
   14840:	add	ip, ip, #1
   14844:	cmp	ip, r7
   14848:	bne	1482c <__assert_fail@plt+0x2ed4>
   1484c:	cmp	r9, #0
   14850:	ble	148e8 <__assert_fail@plt+0x2f90>
   14854:	add	r1, sp, #40	; 0x28
   14858:	mov	r4, #0
   1485c:	mov	r0, r9
   14860:	mov	r2, r4
   14864:	str	r4, [r1, #-28]!	; 0xffffffe4
   14868:	bl	116ac <waitpid@plt>
   1486c:	cmn	r0, #1
   14870:	beq	14940 <__assert_fail@plt+0x2fe8>
   14874:	ldr	r3, [sp, #12]
   14878:	and	r4, r3, #127	; 0x7f
   1487c:	add	r2, r4, #1
   14880:	sbfx	r2, r2, #1, #7
   14884:	cmp	r2, #0
   14888:	ble	14978 <__assert_fail@plt+0x3020>
   1488c:	cmp	r4, #13
   14890:	beq	148e8 <__assert_fail@plt+0x2f90>
   14894:	add	r5, sp, #16
   14898:	mov	r0, r4
   1489c:	mov	r1, r5
   148a0:	bl	197e0 <close_stdout@@Base+0x4764>
   148a4:	cmp	r0, #0
   148a8:	bne	14920 <__assert_fail@plt+0x2fc8>
   148ac:	ldr	r1, [pc, #404]	; 14a48 <__assert_fail@plt+0x30f0>
   148b0:	mov	r2, #5
   148b4:	mov	r0, #0
   148b8:	add	r1, pc, r1
   148bc:	bl	11628 <dcgettext@plt>
   148c0:	ldr	ip, [pc, #388]	; 14a4c <__assert_fail@plt+0x30f4>
   148c4:	str	r5, [sp]
   148c8:	mov	r3, sl
   148cc:	add	ip, pc, ip
   148d0:	mov	r1, #0
   148d4:	ldr	ip, [ip, #40]	; 0x28
   148d8:	str	ip, [sp, #4]
   148dc:	mov	r2, r0
   148e0:	add	r0, r4, #128	; 0x80
   148e4:	bl	116e8 <error@plt>
   148e8:	ldr	r2, [sp, #36]	; 0x24
   148ec:	ldr	r3, [r8]
   148f0:	cmp	r2, r3
   148f4:	bne	149f8 <__assert_fail@plt+0x30a0>
   148f8:	add	sp, sp, #44	; 0x2c
   148fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14900:	mov	r5, r3
   14904:	sub	r7, r7, #1
   14908:	ldr	r2, [pc, #320]	; 14a50 <__assert_fail@plt+0x30f8>
   1490c:	ldr	r3, [r3, r7, lsl #2]
   14910:	add	r2, pc, r2
   14914:	str	r7, [r2, #152]	; 0x98
   14918:	str	r3, [r5]
   1491c:	b	1484c <__assert_fail@plt+0x2ef4>
   14920:	ldr	r3, [pc, #300]	; 14a54 <__assert_fail@plt+0x30fc>
   14924:	mov	r0, r5
   14928:	str	r4, [sp]
   1492c:	mov	r1, #1
   14930:	mov	r2, #19
   14934:	add	r3, pc, r3
   14938:	bl	11808 <__sprintf_chk@plt>
   1493c:	b	148ac <__assert_fail@plt+0x2f54>
   14940:	bl	117f0 <__errno_location@plt>
   14944:	ldr	r5, [r0]
   14948:	cmp	r5, #10
   1494c:	beq	14874 <__assert_fail@plt+0x2f1c>
   14950:	ldr	r1, [pc, #256]	; 14a58 <__assert_fail@plt+0x3100>
   14954:	mov	r0, r4
   14958:	mov	r2, #5
   1495c:	add	r1, pc, r1
   14960:	bl	11628 <dcgettext@plt>
   14964:	mov	r1, r5
   14968:	mov	r2, r0
   1496c:	mov	r0, #1
   14970:	bl	116e8 <error@plt>
   14974:	b	14874 <__assert_fail@plt+0x2f1c>
   14978:	cmp	r4, #0
   1497c:	bne	149cc <__assert_fail@plt+0x3074>
   14980:	ubfx	r5, r3, #8, #8
   14984:	cmp	r5, #0
   14988:	beq	148e8 <__assert_fail@plt+0x2f90>
   1498c:	ldr	r1, [pc, #200]	; 14a5c <__assert_fail@plt+0x3104>
   14990:	mov	r0, r4
   14994:	mov	r2, #5
   14998:	add	r1, pc, r1
   1499c:	bl	11628 <dcgettext@plt>
   149a0:	ldr	ip, [pc, #184]	; 14a60 <__assert_fail@plt+0x3108>
   149a4:	str	r5, [sp]
   149a8:	mov	r1, r4
   149ac:	add	ip, pc, ip
   149b0:	mov	r3, sl
   149b4:	ldr	ip, [ip, #40]	; 0x28
   149b8:	str	ip, [sp, #4]
   149bc:	mov	r2, r0
   149c0:	mov	r0, r5
   149c4:	bl	116e8 <error@plt>
   149c8:	b	148e8 <__assert_fail@plt+0x2f90>
   149cc:	ldr	r1, [pc, #144]	; 14a64 <__assert_fail@plt+0x310c>
   149d0:	mov	r2, #5
   149d4:	mov	r0, #0
   149d8:	add	r1, pc, r1
   149dc:	bl	11628 <dcgettext@plt>
   149e0:	mov	r1, #0
   149e4:	ldr	r3, [sp, #12]
   149e8:	mov	r2, r0
   149ec:	mov	r0, #1
   149f0:	bl	116e8 <error@plt>
   149f4:	b	148e8 <__assert_fail@plt+0x2f90>
   149f8:	bl	11634 <__stack_chk_fail@plt>
   149fc:	cmp	r1, #0
   14a00:	blt	1484c <__assert_fail@plt+0x2ef4>
   14a04:	mov	r0, fp
   14a08:	bl	11940 <close@plt>
   14a0c:	cmp	r0, #0
   14a10:	bge	147fc <__assert_fail@plt+0x2ea4>
   14a14:	bl	117f0 <__errno_location@plt>
   14a18:	ldr	r2, [pc, #72]	; 14a68 <__assert_fail@plt+0x3110>
   14a1c:	mov	r3, sl
   14a20:	add	r2, pc, r2
   14a24:	ldr	r1, [r0]
   14a28:	mov	r0, #1
   14a2c:	bl	116e8 <error@plt>
   14a30:	b	147fc <__assert_fail@plt+0x2ea4>
   14a34:	andeq	sl, r1, r8, ror #16
   14a38:	andeq	r0, r0, ip, ror r1
   14a3c:	andeq	sl, r1, ip, ror #23
   14a40:	ldrdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   14a44:			; <UNDEFINED> instruction: 0x0001abb0
   14a48:			; <UNDEFINED> instruction: 0x000086bc
   14a4c:	andeq	sl, r1, r4, ror #21
   14a50:	andeq	sl, r1, r0, lsr #21
   14a54:	andeq	r8, r0, ip, lsr r6
   14a58:	strdeq	r8, [r0], -r8	; <UNPREDICTABLE>
   14a5c:	andeq	r8, r0, r8, lsl #12
   14a60:	andeq	sl, r1, r4, lsl #20
   14a64:	strdeq	r8, [r0], -r0
   14a68:	andeq	r8, r0, r4, lsr #11
   14a6c:	cmp	r0, #0
   14a70:	push	{r4, r5, r6, r7, r8, lr}
   14a74:	mov	r5, r1
   14a78:	mov	r4, r2
   14a7c:	beq	14b34 <__assert_fail@plt+0x31dc>
   14a80:	cmp	r1, #0
   14a84:	cmpeq	r2, #0
   14a88:	bne	14aa0 <__assert_fail@plt+0x3148>
   14a8c:	ldr	r3, [pc, #212]	; 14b68 <__assert_fail@plt+0x3210>
   14a90:	add	r3, pc, r3
   14a94:	ldrb	r3, [r3, #296]	; 0x128
   14a98:	cmp	r3, #0
   14a9c:	popne	{r4, r5, r6, r7, r8, pc}
   14aa0:	ldr	r7, [pc, #196]	; 14b6c <__assert_fail@plt+0x3214>
   14aa4:	mov	r0, #0
   14aa8:	ldr	r6, [pc, #192]	; 14b70 <__assert_fail@plt+0x3218>
   14aac:	add	r7, pc, r7
   14ab0:	add	r6, pc, r6
   14ab4:	ldr	r1, [r7, #4]
   14ab8:	ldr	r2, [r6, #288]	; 0x120
   14abc:	ldr	r3, [r6]
   14ac0:	bl	14778 <__assert_fail@plt+0x2e20>
   14ac4:	bl	13c58 <__assert_fail@plt+0x2300>
   14ac8:	ldr	r0, [r6]
   14acc:	bl	13f60 <__assert_fail@plt+0x2608>
   14ad0:	cmp	r0, #0
   14ad4:	str	r0, [r7, #4]
   14ad8:	blt	14b44 <__assert_fail@plt+0x31ec>
   14adc:	mov	r1, r5
   14ae0:	mov	r2, r4
   14ae4:	bl	15374 <close_stdout@@Base+0x2f8>
   14ae8:	cmp	r4, r0
   14aec:	popeq	{r4, r5, r6, r7, r8, pc}
   14af0:	bl	117f0 <__errno_location@plt>
   14af4:	ldr	r3, [pc, #120]	; 14b74 <__assert_fail@plt+0x321c>
   14af8:	add	r3, pc, r3
   14afc:	ldr	r3, [r3, #40]	; 0x28
   14b00:	cmp	r3, #0
   14b04:	ldr	r1, [r0]
   14b08:	beq	14b14 <__assert_fail@plt+0x31bc>
   14b0c:	cmp	r1, #32
   14b10:	popeq	{r4, r5, r6, r7, r8, pc}
   14b14:	ldr	r3, [pc, #92]	; 14b78 <__assert_fail@plt+0x3220>
   14b18:	mov	r0, #1
   14b1c:	ldr	r2, [pc, #88]	; 14b7c <__assert_fail@plt+0x3224>
   14b20:	add	r3, pc, r3
   14b24:	add	r2, pc, r2
   14b28:	ldr	r3, [r3]
   14b2c:	pop	{r4, r5, r6, r7, r8, lr}
   14b30:	b	116e8 <error@plt>
   14b34:	ldr	r3, [pc, #68]	; 14b80 <__assert_fail@plt+0x3228>
   14b38:	add	r3, pc, r3
   14b3c:	ldr	r0, [r3, #4]
   14b40:	b	14adc <__assert_fail@plt+0x3184>
   14b44:	bl	117f0 <__errno_location@plt>
   14b48:	ldr	r2, [pc, #52]	; 14b84 <__assert_fail@plt+0x322c>
   14b4c:	ldr	r3, [r6]
   14b50:	add	r2, pc, r2
   14b54:	ldr	r1, [r0]
   14b58:	mov	r0, #1
   14b5c:	bl	116e8 <error@plt>
   14b60:	ldr	r0, [r7, #4]
   14b64:	b	14adc <__assert_fail@plt+0x3184>
   14b68:	andeq	sl, r1, r0, lsr #18
   14b6c:	andeq	sl, r1, r4, lsl #14
   14b70:	andeq	sl, r1, r0, lsl #18
   14b74:			; <UNDEFINED> instruction: 0x0001a8b8
   14b78:	muleq	r1, r0, r8
   14b7c:	andeq	r8, r0, r0, lsr #9
   14b80:	andeq	sl, r1, r8, ror r6
   14b84:	andeq	r8, r0, r4, ror r4
   14b88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b8c:	sub	sp, sp, #60	; 0x3c
   14b90:	ldr	r6, [pc, #548]	; 14dbc <__assert_fail@plt+0x3464>
   14b94:	mov	r5, r1
   14b98:	ldr	r4, [pc, #544]	; 14dc0 <__assert_fail@plt+0x3468>
   14b9c:	mov	sl, #0
   14ba0:	add	r6, pc, r6
   14ba4:	ldr	r7, [sp, #96]	; 0x60
   14ba8:	str	r6, [sp, #52]	; 0x34
   14bac:	add	r4, pc, r4
   14bb0:	ldr	ip, [sp, #100]	; 0x64
   14bb4:	mov	fp, #0
   14bb8:	ldr	r6, [pc, #516]	; 14dc4 <__assert_fail@plt+0x346c>
   14bbc:	mov	r8, #1
   14bc0:	str	r4, [sp, #48]	; 0x30
   14bc4:	mov	r4, r0
   14bc8:	orr	r7, r7, ip
   14bcc:	add	r6, pc, r6
   14bd0:	strd	r0, [sp, #8]
   14bd4:	str	r7, [sp, #44]	; 0x2c
   14bd8:	str	r6, [sp, #28]
   14bdc:	str	r2, [sp, #40]	; 0x28
   14be0:	str	r3, [sp, #36]	; 0x24
   14be4:	mov	r0, #0
   14be8:	ldr	r1, [sp, #40]	; 0x28
   14bec:	ldr	r2, [sp, #36]	; 0x24
   14bf0:	bl	15304 <close_stdout@@Base+0x288>
   14bf4:	ldr	r7, [sp, #36]	; 0x24
   14bf8:	cmp	r7, r0
   14bfc:	str	r0, [sp, #32]
   14c00:	bls	14c14 <__assert_fail@plt+0x32bc>
   14c04:	bl	117f0 <__errno_location@plt>
   14c08:	ldr	r1, [r0]
   14c0c:	cmp	r1, #0
   14c10:	bne	14da4 <__assert_fail@plt+0x344c>
   14c14:	ldr	r6, [sp, #32]
   14c18:	mov	r7, #0
   14c1c:	cmp	r5, r7
   14c20:	cmpeq	r4, r6
   14c24:	strd	r6, [sp, #16]
   14c28:	ldrhi	r9, [sp, #32]
   14c2c:	ldrhi	r7, [sp, #40]	; 0x28
   14c30:	bhi	14d68 <__assert_fail@plt+0x3410>
   14c34:	ldr	r7, [sp, #44]	; 0x2c
   14c38:	mov	r6, sl
   14c3c:	ldr	r9, [sp, #32]
   14c40:	rsbs	r7, r7, #1
   14c44:	movcc	r7, #0
   14c48:	str	r7, [sp, #16]
   14c4c:	ldr	r7, [sp, #40]	; 0x28
   14c50:	mov	r3, r7
   14c54:	mov	r7, fp
   14c58:	mov	sl, r3
   14c5c:	b	14c70 <__assert_fail@plt+0x3318>
   14c60:	ldrd	r4, [sp, #8]
   14c64:	cmp	r5, r3
   14c68:	cmpeq	r4, r2
   14c6c:	bhi	14d50 <__assert_fail@plt+0x33f8>
   14c70:	mov	r0, r8
   14c74:	mov	r1, sl
   14c78:	mov	r2, r4
   14c7c:	rsb	r9, r4, r9
   14c80:	bl	14a6c <__assert_fail@plt+0x3114>
   14c84:	uxtb	r0, r8
   14c88:	adds	r6, r6, r0
   14c8c:	mov	r1, #0
   14c90:	adc	r7, r7, r1
   14c94:	ldrd	r0, [sp, #96]	; 0x60
   14c98:	ldr	r8, [sp, #16]
   14c9c:	mov	r2, r9
   14ca0:	cmp	r7, r1
   14ca4:	cmpeq	r6, r0
   14ca8:	mov	r3, #0
   14cac:	orrcc	r8, r8, #1
   14cb0:	add	sl, sl, r4
   14cb4:	cmp	r8, #0
   14cb8:	bne	14c60 <__assert_fail@plt+0x3308>
   14cbc:	str	r3, [sp]
   14cc0:	str	r9, [sp, #4]
   14cc4:	bl	117f0 <__errno_location@plt>
   14cc8:	ldr	ip, [sp, #28]
   14ccc:	ldr	r2, [sp, #4]
   14cd0:	ldr	r3, [sp]
   14cd4:	ldr	r1, [ip, #40]	; 0x28
   14cd8:	cmp	r1, #0
   14cdc:	ldr	r1, [r0]
   14ce0:	beq	14c60 <__assert_fail@plt+0x3308>
   14ce4:	cmp	r1, #32
   14ce8:	bne	14c60 <__assert_fail@plt+0x3308>
   14cec:	mov	sl, r6
   14cf0:	mov	fp, r7
   14cf4:	str	r8, [sp, #32]
   14cf8:	ldr	r6, [sp, #32]
   14cfc:	ldr	r7, [sp, #36]	; 0x24
   14d00:	cmp	r6, r7
   14d04:	beq	14be4 <__assert_fail@plt+0x328c>
   14d08:	ldrd	r4, [sp, #96]	; 0x60
   14d0c:	cmp	r5, fp
   14d10:	cmpeq	r4, sl
   14d14:	bls	14d48 <__assert_fail@plt+0x33f0>
   14d18:	ldrd	r6, [sp, #96]	; 0x60
   14d1c:	mov	r4, sl
   14d20:	mov	r5, fp
   14d24:	adds	r4, r4, #1
   14d28:	mov	r1, #0
   14d2c:	adc	r5, r5, #0
   14d30:	mov	r2, r1
   14d34:	mov	r0, #1
   14d38:	bl	14a6c <__assert_fail@plt+0x3114>
   14d3c:	cmp	r5, r7
   14d40:	cmpeq	r4, r6
   14d44:	bcc	14d24 <__assert_fail@plt+0x33cc>
   14d48:	add	sp, sp, #60	; 0x3c
   14d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d50:	ldrd	r4, [sp, #8]
   14d54:	mov	fp, r7
   14d58:	strd	r2, [sp, #16]
   14d5c:	mov	r3, sl
   14d60:	mov	r7, r3
   14d64:	mov	sl, r6
   14d68:	cmp	r9, #0
   14d6c:	beq	14cf8 <__assert_fail@plt+0x33a0>
   14d70:	mov	r1, r7
   14d74:	ldrd	r6, [sp, #16]
   14d78:	mov	r2, r9
   14d7c:	mov	r0, r8
   14d80:	uxtb	r8, r8
   14d84:	subs	r4, r4, r6
   14d88:	sbc	r5, r5, r7
   14d8c:	bl	14a6c <__assert_fail@plt+0x3114>
   14d90:	adds	sl, sl, r8
   14d94:	mov	r9, #0
   14d98:	mov	r8, #0
   14d9c:	adc	fp, fp, r9
   14da0:	b	14cf8 <__assert_fail@plt+0x33a0>
   14da4:	ldr	ip, [sp, #52]	; 0x34
   14da8:	mov	r0, #1
   14dac:	ldr	r2, [sp, #48]	; 0x30
   14db0:	ldr	r3, [ip, #300]	; 0x12c
   14db4:	bl	116e8 <error@plt>
   14db8:	b	14c14 <__assert_fail@plt+0x32bc>
   14dbc:	andeq	sl, r1, r0, lsl r8
   14dc0:	andeq	r8, r0, r8, lsl r4
   14dc4:	andeq	sl, r1, r4, ror #15
   14dc8:	push	{r3, r4, r5, r6, r7, lr}
   14dcc:	subs	r4, r0, #0
   14dd0:	ldr	r5, [pc, #556]	; 15004 <__assert_fail@plt+0x36ac>
   14dd4:	add	r5, pc, r5
   14dd8:	beq	14e20 <__assert_fail@plt+0x34c8>
   14ddc:	ldr	r3, [pc, #548]	; 15008 <__assert_fail@plt+0x36b0>
   14de0:	mov	r2, #5
   14de4:	ldr	r1, [pc, #544]	; 1500c <__assert_fail@plt+0x36b4>
   14de8:	mov	r0, #0
   14dec:	ldr	r3, [r5, r3]
   14df0:	add	r1, pc, r1
   14df4:	ldr	r6, [r3]
   14df8:	bl	11628 <dcgettext@plt>
   14dfc:	ldr	r3, [pc, #524]	; 15010 <__assert_fail@plt+0x36b8>
   14e00:	mov	r1, #1
   14e04:	ldr	r3, [r5, r3]
   14e08:	ldr	r3, [r3]
   14e0c:	mov	r2, r0
   14e10:	mov	r0, r6
   14e14:	bl	11868 <__fprintf_chk@plt>
   14e18:	mov	r0, r4
   14e1c:	bl	1176c <exit@plt>
   14e20:	ldr	r1, [pc, #492]	; 15014 <__assert_fail@plt+0x36bc>
   14e24:	mov	r2, #5
   14e28:	add	r1, pc, r1
   14e2c:	bl	11628 <dcgettext@plt>
   14e30:	ldr	r3, [pc, #472]	; 15010 <__assert_fail@plt+0x36b8>
   14e34:	ldr	r6, [r5, r3]
   14e38:	ldr	r2, [r6]
   14e3c:	mov	r1, r0
   14e40:	mov	r0, #1
   14e44:	bl	11844 <__printf_chk@plt>
   14e48:	ldr	r1, [pc, #456]	; 15018 <__assert_fail@plt+0x36c0>
   14e4c:	mov	r2, #5
   14e50:	mov	r0, r4
   14e54:	add	r1, pc, r1
   14e58:	bl	11628 <dcgettext@plt>
   14e5c:	ldr	r3, [pc, #440]	; 1501c <__assert_fail@plt+0x36c4>
   14e60:	ldr	r5, [r5, r3]
   14e64:	ldr	r1, [r5]
   14e68:	bl	11544 <fputs_unlocked@plt>
   14e6c:	ldr	r1, [pc, #428]	; 15020 <__assert_fail@plt+0x36c8>
   14e70:	mov	r2, #5
   14e74:	mov	r0, r4
   14e78:	add	r1, pc, r1
   14e7c:	bl	11628 <dcgettext@plt>
   14e80:	ldr	r1, [r5]
   14e84:	bl	11544 <fputs_unlocked@plt>
   14e88:	ldr	r1, [pc, #404]	; 15024 <__assert_fail@plt+0x36cc>
   14e8c:	mov	r2, #5
   14e90:	mov	r0, r4
   14e94:	add	r1, pc, r1
   14e98:	ldr	r7, [r5]
   14e9c:	bl	11628 <dcgettext@plt>
   14ea0:	mov	r3, #2
   14ea4:	mov	r1, #1
   14ea8:	mov	r2, r0
   14eac:	mov	r0, r7
   14eb0:	bl	11868 <__fprintf_chk@plt>
   14eb4:	ldr	r1, [pc, #364]	; 15028 <__assert_fail@plt+0x36d0>
   14eb8:	mov	r2, #5
   14ebc:	mov	r0, r4
   14ec0:	add	r1, pc, r1
   14ec4:	bl	11628 <dcgettext@plt>
   14ec8:	ldr	r1, [r5]
   14ecc:	bl	11544 <fputs_unlocked@plt>
   14ed0:	ldr	r1, [pc, #340]	; 1502c <__assert_fail@plt+0x36d4>
   14ed4:	mov	r2, #5
   14ed8:	mov	r0, r4
   14edc:	add	r1, pc, r1
   14ee0:	bl	11628 <dcgettext@plt>
   14ee4:	ldr	r1, [r5]
   14ee8:	bl	11544 <fputs_unlocked@plt>
   14eec:	ldr	r1, [pc, #316]	; 15030 <__assert_fail@plt+0x36d8>
   14ef0:	mov	r2, #5
   14ef4:	mov	r0, r4
   14ef8:	add	r1, pc, r1
   14efc:	bl	11628 <dcgettext@plt>
   14f00:	ldr	r1, [r5]
   14f04:	bl	11544 <fputs_unlocked@plt>
   14f08:	ldr	r1, [pc, #292]	; 15034 <__assert_fail@plt+0x36dc>
   14f0c:	mov	r2, #5
   14f10:	mov	r0, r4
   14f14:	add	r1, pc, r1
   14f18:	bl	11628 <dcgettext@plt>
   14f1c:	ldr	r1, [r5]
   14f20:	bl	11544 <fputs_unlocked@plt>
   14f24:	ldr	r1, [pc, #268]	; 15038 <__assert_fail@plt+0x36e0>
   14f28:	mov	r2, #5
   14f2c:	mov	r0, r4
   14f30:	add	r1, pc, r1
   14f34:	bl	11628 <dcgettext@plt>
   14f38:	ldr	r1, [r5]
   14f3c:	bl	11544 <fputs_unlocked@plt>
   14f40:	ldr	r1, [pc, #244]	; 1503c <__assert_fail@plt+0x36e4>
   14f44:	mov	r2, #5
   14f48:	mov	r0, r4
   14f4c:	add	r1, pc, r1
   14f50:	bl	11628 <dcgettext@plt>
   14f54:	ldr	r2, [pc, #228]	; 15040 <__assert_fail@plt+0x36e8>
   14f58:	ldr	r3, [pc, #228]	; 15044 <__assert_fail@plt+0x36ec>
   14f5c:	add	r2, pc, r2
   14f60:	add	r3, pc, r3
   14f64:	mov	r1, r0
   14f68:	mov	r0, #1
   14f6c:	bl	11844 <__printf_chk@plt>
   14f70:	mov	r0, #5
   14f74:	mov	r1, r4
   14f78:	bl	118bc <setlocale@plt>
   14f7c:	cmp	r0, #0
   14f80:	beq	14f9c <__assert_fail@plt+0x3644>
   14f84:	ldr	r1, [pc, #188]	; 15048 <__assert_fail@plt+0x36f0>
   14f88:	mov	r2, #3
   14f8c:	add	r1, pc, r1
   14f90:	bl	11928 <strncmp@plt>
   14f94:	cmp	r0, #0
   14f98:	bne	14fd0 <__assert_fail@plt+0x3678>
   14f9c:	ldr	r1, [pc, #168]	; 1504c <__assert_fail@plt+0x36f4>
   14fa0:	mov	r2, #5
   14fa4:	mov	r0, #0
   14fa8:	add	r1, pc, r1
   14fac:	bl	11628 <dcgettext@plt>
   14fb0:	mov	r5, r0
   14fb4:	ldr	r0, [r6]
   14fb8:	bl	15194 <close_stdout@@Base+0x118>
   14fbc:	mov	r1, r5
   14fc0:	mov	r2, r0
   14fc4:	mov	r0, #1
   14fc8:	bl	11844 <__printf_chk@plt>
   14fcc:	b	14e18 <__assert_fail@plt+0x34c0>
   14fd0:	ldr	r1, [pc, #120]	; 15050 <__assert_fail@plt+0x36f8>
   14fd4:	mov	r2, #5
   14fd8:	mov	r0, r4
   14fdc:	add	r1, pc, r1
   14fe0:	bl	11628 <dcgettext@plt>
   14fe4:	mov	r5, r0
   14fe8:	ldr	r0, [r6]
   14fec:	bl	15194 <close_stdout@@Base+0x118>
   14ff0:	mov	r1, r5
   14ff4:	mov	r2, r0
   14ff8:	mov	r0, #1
   14ffc:	bl	11844 <__printf_chk@plt>
   15000:	b	14f9c <__assert_fail@plt+0x3644>
   15004:	andeq	sl, r1, r4, lsr #4
   15008:	andeq	r0, r0, r8, lsl #3
   1500c:	strdeq	r8, [r0], -ip
   15010:	andeq	r0, r0, r4, lsr #3
   15014:	andeq	r8, r0, ip, ror #3
   15018:	andeq	r8, r0, r8, ror #3
   1501c:	muleq	r0, r8, r1
   15020:	andeq	r8, r0, r4, ror r2
   15024:	andeq	r8, r0, r4, lsr #5
   15028:	andeq	r8, r0, r8, lsl #11
   1502c:	andeq	r8, r0, r0, ror #11
   15030:	strdeq	r8, [r0], -r4
   15034:	andeq	r8, r0, r0, lsl r6
   15038:	muleq	r0, r0, r6
   1503c:	andeq	r8, r0, ip, lsr #15
   15040:			; <UNDEFINED> instruction: 0x000087b4
   15044:	andeq	r8, r0, r0, asr #15
   15048:			; <UNDEFINED> instruction: 0x000087bc
   1504c:	andeq	r8, r0, ip, ror #15
   15050:	andeq	r8, r0, r0, ror r7
   15054:	ldr	r3, [pc, #8]	; 15064 <__assert_fail@plt+0x370c>
   15058:	add	r3, pc, r3
   1505c:	str	r0, [r3]
   15060:	bx	lr
   15064:	andeq	sl, r1, ip, lsl #10
   15068:	ldr	r3, [pc, #8]	; 15078 <__assert_fail@plt+0x3720>
   1506c:	add	r3, pc, r3
   15070:	strb	r0, [r3, #4]
   15074:	bx	lr
   15078:	strdeq	sl, [r1], -r8

0001507c <close_stdout@@Base>:
   1507c:	push	{r4, r5, r6, r7, lr}
   15080:	sub	sp, sp, #12
   15084:	ldr	r4, [pc, #228]	; 15170 <close_stdout@@Base+0xf4>
   15088:	ldr	r3, [pc, #228]	; 15174 <close_stdout@@Base+0xf8>
   1508c:	add	r4, pc, r4
   15090:	ldr	r3, [r4, r3]
   15094:	ldr	r0, [r3]
   15098:	bl	1995c <close_stdout@@Base+0x48e0>
   1509c:	cmp	r0, #0
   150a0:	beq	150c8 <close_stdout@@Base+0x4c>
   150a4:	ldr	r3, [pc, #204]	; 15178 <close_stdout@@Base+0xfc>
   150a8:	add	r3, pc, r3
   150ac:	ldrb	r3, [r3, #4]
   150b0:	cmp	r3, #0
   150b4:	beq	150e8 <close_stdout@@Base+0x6c>
   150b8:	bl	117f0 <__errno_location@plt>
   150bc:	ldr	r3, [r0]
   150c0:	cmp	r3, #32
   150c4:	bne	150e8 <close_stdout@@Base+0x6c>
   150c8:	ldr	r3, [pc, #172]	; 1517c <close_stdout@@Base+0x100>
   150cc:	ldr	r3, [r4, r3]
   150d0:	ldr	r0, [r3]
   150d4:	bl	1995c <close_stdout@@Base+0x48e0>
   150d8:	cmp	r0, #0
   150dc:	bne	1513c <close_stdout@@Base+0xc0>
   150e0:	add	sp, sp, #12
   150e4:	pop	{r4, r5, r6, r7, pc}
   150e8:	ldr	r1, [pc, #144]	; 15180 <close_stdout@@Base+0x104>
   150ec:	mov	r0, #0
   150f0:	mov	r2, #5
   150f4:	add	r1, pc, r1
   150f8:	bl	11628 <dcgettext@plt>
   150fc:	ldr	r3, [pc, #128]	; 15184 <close_stdout@@Base+0x108>
   15100:	ldr	r5, [pc, r3]
   15104:	cmp	r5, #0
   15108:	mov	r6, r0
   1510c:	beq	1514c <close_stdout@@Base+0xd0>
   15110:	bl	117f0 <__errno_location@plt>
   15114:	ldr	r7, [r0]
   15118:	mov	r0, r5
   1511c:	bl	1770c <close_stdout@@Base+0x2690>
   15120:	ldr	r2, [pc, #96]	; 15188 <close_stdout@@Base+0x10c>
   15124:	str	r6, [sp]
   15128:	mov	r1, r7
   1512c:	add	r2, pc, r2
   15130:	mov	r3, r0
   15134:	mov	r0, #0
   15138:	bl	116e8 <error@plt>
   1513c:	ldr	r3, [pc, #72]	; 1518c <close_stdout@@Base+0x110>
   15140:	ldr	r3, [r4, r3]
   15144:	ldr	r0, [r3]
   15148:	bl	115d4 <_exit@plt>
   1514c:	bl	117f0 <__errno_location@plt>
   15150:	ldr	r2, [pc, #56]	; 15190 <close_stdout@@Base+0x114>
   15154:	add	r2, pc, r2
   15158:	mov	r3, r0
   1515c:	mov	r0, r5
   15160:	ldr	r1, [r3]
   15164:	mov	r3, r6
   15168:	bl	116e8 <error@plt>
   1516c:	b	1513c <close_stdout@@Base+0xc0>
   15170:	andeq	r9, r1, ip, ror #30
   15174:	muleq	r0, r8, r1
   15178:			; <UNDEFINED> instruction: 0x0001a4bc
   1517c:	andeq	r0, r0, r8, lsl #3
   15180:	ldrdeq	r8, [r0], -r4
   15184:	andeq	sl, r1, r4, ror #8
   15188:	muleq	r0, ip, sl
   1518c:	muleq	r0, ip, r1
   15190:	andeq	r7, r0, r0, ror lr
   15194:	ldrb	r3, [r0]
   15198:	cmp	r3, #47	; 0x2f
   1519c:	bne	151b8 <close_stdout@@Base+0x13c>
   151a0:	add	r2, r0, #1
   151a4:	mov	r0, r2
   151a8:	add	r2, r2, #1
   151ac:	ldrb	r3, [r0]
   151b0:	cmp	r3, #47	; 0x2f
   151b4:	beq	151a4 <close_stdout@@Base+0x128>
   151b8:	cmp	r3, #0
   151bc:	bxeq	lr
   151c0:	mov	r2, r0
   151c4:	mov	r1, #0
   151c8:	cmp	r3, #47	; 0x2f
   151cc:	moveq	r1, #1
   151d0:	beq	151e0 <close_stdout@@Base+0x164>
   151d4:	cmp	r1, #0
   151d8:	movne	r0, r2
   151dc:	movne	r1, #0
   151e0:	ldrb	r3, [r2, #1]!
   151e4:	cmp	r3, #0
   151e8:	bne	151c8 <close_stdout@@Base+0x14c>
   151ec:	bx	lr
   151f0:	push	{r4, lr}
   151f4:	mov	r4, r0
   151f8:	bl	11790 <strlen@plt>
   151fc:	cmp	r0, #1
   15200:	popls	{r4, pc}
   15204:	sub	r3, r0, #1
   15208:	ldrb	r2, [r4, r3]
   1520c:	cmp	r2, #47	; 0x2f
   15210:	popne	{r4, pc}
   15214:	mov	r0, r3
   15218:	cmp	r0, #1
   1521c:	sub	r3, r3, #1
   15220:	beq	15234 <close_stdout@@Base+0x1b8>
   15224:	ldrb	r2, [r4, r3]
   15228:	cmp	r2, #47	; 0x2f
   1522c:	popne	{r4, pc}
   15230:	b	15214 <close_stdout@@Base+0x198>
   15234:	pop	{r4, pc}
   15238:	push	{r1, r2, r3}
   1523c:	ldr	r3, [pc, #88]	; 1529c <close_stdout@@Base+0x220>
   15240:	ldr	r2, [pc, #88]	; 152a0 <close_stdout@@Base+0x224>
   15244:	add	r3, pc, r3
   15248:	push	{r4, lr}
   1524c:	sub	sp, sp, #12
   15250:	ldr	r4, [r3, r2]
   15254:	ldr	r1, [sp, #20]
   15258:	ldr	r3, [r4]
   1525c:	ands	r2, r1, #64	; 0x40
   15260:	ldrne	r2, [sp, #24]
   15264:	str	r3, [sp, #4]
   15268:	addne	r3, sp, #24
   1526c:	strne	r3, [sp]
   15270:	bl	116f4 <open64@plt>
   15274:	bl	17f0c <close_stdout@@Base+0x2e90>
   15278:	ldr	r2, [sp, #4]
   1527c:	ldr	r3, [r4]
   15280:	cmp	r2, r3
   15284:	bne	15298 <close_stdout@@Base+0x21c>
   15288:	add	sp, sp, #12
   1528c:	pop	{r4, lr}
   15290:	add	sp, sp, #12
   15294:	bx	lr
   15298:	bl	11634 <__stack_chk_fail@plt>
   1529c:			; <UNDEFINED> instruction: 0x00019db4
   152a0:	andeq	r0, r0, ip, ror r1
   152a4:	push	{r3, r4, r5, r6, r7, lr}
   152a8:	mov	r5, r0
   152ac:	mov	r0, r1
   152b0:	mov	r1, r2
   152b4:	mov	r2, r3
   152b8:	bl	116f4 <open64@plt>
   152bc:	subs	r2, r5, r0
   152c0:	mov	r4, r0
   152c4:	rsbs	r3, r2, #0
   152c8:	adcs	r3, r3, r2
   152cc:	orrs	r3, r3, r0, lsr #31
   152d0:	bne	152fc <close_stdout@@Base+0x280>
   152d4:	mov	r1, r5
   152d8:	bl	11640 <dup2@plt>
   152dc:	mov	r7, r0
   152e0:	bl	117f0 <__errno_location@plt>
   152e4:	ldr	r6, [r0]
   152e8:	mov	r5, r0
   152ec:	mov	r0, r4
   152f0:	mov	r4, r7
   152f4:	bl	11940 <close@plt>
   152f8:	str	r6, [r5]
   152fc:	mov	r0, r4
   15300:	pop	{r3, r4, r5, r6, r7, pc}
   15304:	push	{r4, r5, r6, r7, r8, lr}
   15308:	subs	r5, r2, #0
   1530c:	mov	r8, r0
   15310:	mov	r6, r1
   15314:	beq	1536c <close_stdout@@Base+0x2f0>
   15318:	mov	r7, #0
   1531c:	b	15334 <close_stdout@@Base+0x2b8>
   15320:	cmp	r0, #0
   15324:	beq	1535c <close_stdout@@Base+0x2e0>
   15328:	subs	r5, r5, r0
   1532c:	add	r7, r7, r0
   15330:	beq	15354 <close_stdout@@Base+0x2d8>
   15334:	mov	r1, r6
   15338:	mov	r0, r8
   1533c:	mov	r2, r5
   15340:	bl	1786c <close_stdout@@Base+0x27f0>
   15344:	cmn	r0, #1
   15348:	mov	r4, r0
   1534c:	add	r6, r6, r0
   15350:	bne	15320 <close_stdout@@Base+0x2a4>
   15354:	mov	r0, r7
   15358:	pop	{r4, r5, r6, r7, r8, pc}
   1535c:	bl	117f0 <__errno_location@plt>
   15360:	str	r4, [r0]
   15364:	mov	r0, r7
   15368:	pop	{r4, r5, r6, r7, r8, pc}
   1536c:	mov	r7, r5
   15370:	b	15354 <close_stdout@@Base+0x2d8>
   15374:	push	{r3, r4, r5, r6, r7, lr}
   15378:	subs	r4, r2, #0
   1537c:	mov	r7, r0
   15380:	mov	r5, r1
   15384:	beq	153dc <close_stdout@@Base+0x360>
   15388:	mov	r6, #0
   1538c:	b	153a4 <close_stdout@@Base+0x328>
   15390:	cmp	r0, #0
   15394:	beq	153c8 <close_stdout@@Base+0x34c>
   15398:	subs	r4, r4, r0
   1539c:	add	r6, r6, r0
   153a0:	beq	153c0 <close_stdout@@Base+0x344>
   153a4:	mov	r1, r5
   153a8:	mov	r0, r7
   153ac:	mov	r2, r4
   153b0:	bl	178cc <close_stdout@@Base+0x2850>
   153b4:	cmn	r0, #1
   153b8:	add	r5, r5, r0
   153bc:	bne	15390 <close_stdout@@Base+0x314>
   153c0:	mov	r0, r6
   153c4:	pop	{r3, r4, r5, r6, r7, pc}
   153c8:	bl	117f0 <__errno_location@plt>
   153cc:	mov	r3, #28
   153d0:	str	r3, [r0]
   153d4:	mov	r0, r6
   153d8:	pop	{r3, r4, r5, r6, r7, pc}
   153dc:	mov	r6, r4
   153e0:	b	153c0 <close_stdout@@Base+0x344>
   153e4:	push	{r3, r4, r5, r6, r7, lr}
   153e8:	add	r6, r2, #19
   153ec:	mov	r4, r0
   153f0:	mov	r5, r1
   153f4:	mov	r3, #0
   153f8:	strb	r3, [r2, #20]
   153fc:	mov	r0, r4
   15400:	mov	r1, r5
   15404:	mov	r2, #10
   15408:	mov	r3, #0
   1540c:	bl	1c338 <close_stdout@@Base+0x72bc>
   15410:	mov	r7, r6
   15414:	mov	r0, r4
   15418:	mov	r1, r5
   1541c:	mov	r3, #0
   15420:	add	ip, r2, #48	; 0x30
   15424:	mov	r2, #10
   15428:	strb	ip, [r6], #-1
   1542c:	bl	1c338 <close_stdout@@Base+0x72bc>
   15430:	mov	r4, r0
   15434:	mov	r5, r1
   15438:	orrs	r3, r4, r5
   1543c:	bne	153fc <close_stdout@@Base+0x380>
   15440:	mov	r0, r7
   15444:	pop	{r3, r4, r5, r6, r7, pc}
   15448:	push	{r3, r4, r5, r6, r7, lr}
   1544c:	subs	r4, r0, #0
   15450:	ldr	r5, [pc, #172]	; 15504 <close_stdout@@Base+0x488>
   15454:	add	r5, pc, r5
   15458:	beq	154e0 <close_stdout@@Base+0x464>
   1545c:	mov	r1, #47	; 0x2f
   15460:	bl	118ec <strrchr@plt>
   15464:	subs	r6, r0, #0
   15468:	beq	154c4 <close_stdout@@Base+0x448>
   1546c:	add	r7, r6, #1
   15470:	rsb	r3, r4, r7
   15474:	cmp	r3, #6
   15478:	ble	154c4 <close_stdout@@Base+0x448>
   1547c:	ldr	r1, [pc, #132]	; 15508 <close_stdout@@Base+0x48c>
   15480:	sub	r0, r6, #6
   15484:	mov	r2, #7
   15488:	add	r1, pc, r1
   1548c:	bl	11928 <strncmp@plt>
   15490:	cmp	r0, #0
   15494:	bne	154c4 <close_stdout@@Base+0x448>
   15498:	ldr	r1, [pc, #108]	; 1550c <close_stdout@@Base+0x490>
   1549c:	mov	r0, r7
   154a0:	mov	r2, #3
   154a4:	add	r1, pc, r1
   154a8:	bl	11928 <strncmp@plt>
   154ac:	cmp	r0, #0
   154b0:	movne	r4, r7
   154b4:	ldreq	r3, [pc, #84]	; 15510 <close_stdout@@Base+0x494>
   154b8:	addeq	r4, r6, #4
   154bc:	ldreq	r3, [r5, r3]
   154c0:	streq	r4, [r3]
   154c4:	ldr	r2, [pc, #72]	; 15514 <close_stdout@@Base+0x498>
   154c8:	ldr	r3, [pc, #72]	; 15518 <close_stdout@@Base+0x49c>
   154cc:	ldr	r2, [r5, r2]
   154d0:	str	r4, [r2]
   154d4:	ldr	r3, [r5, r3]
   154d8:	str	r4, [r3]
   154dc:	pop	{r3, r4, r5, r6, r7, pc}
   154e0:	ldr	r3, [pc, #52]	; 1551c <close_stdout@@Base+0x4a0>
   154e4:	mov	r1, #1
   154e8:	ldr	r0, [pc, #48]	; 15520 <close_stdout@@Base+0x4a4>
   154ec:	mov	r2, #55	; 0x37
   154f0:	ldr	r3, [r5, r3]
   154f4:	add	r0, pc, r0
   154f8:	ldr	r3, [r3]
   154fc:	bl	11694 <fwrite@plt>
   15500:	bl	11934 <abort@plt>
   15504:	andeq	r9, r1, r4, lsr #23
   15508:	andeq	r8, r0, r0, lsl #15
   1550c:	andeq	r8, r0, ip, ror #14
   15510:	andeq	r0, r0, ip, lsr #3
   15514:	andeq	r0, r0, r4, lsr #3
   15518:	andeq	r0, r0, r0, lsr #3
   1551c:	andeq	r0, r0, r8, lsl #3
   15520:	ldrdeq	r8, [r0], -ip
   15524:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15528:	sub	sp, sp, #156	; 0x9c
   1552c:	ldr	r7, [pc, #2116]	; 15d78 <close_stdout@@Base+0xcfc>
   15530:	add	r2, sp, #120	; 0x78
   15534:	ldr	r3, [pc, #2112]	; 15d7c <close_stdout@@Base+0xd00>
   15538:	mov	fp, r0
   1553c:	add	r7, pc, r7
   15540:	mov	r0, r1
   15544:	mov	r1, #2
   15548:	add	r6, sp, #40	; 0x28
   1554c:	ldr	r3, [r7, r3]
   15550:	add	r9, sp, #96	; 0x60
   15554:	str	r2, [sp, #16]
   15558:	mov	r4, #1
   1555c:	mov	r5, #0
   15560:	str	r3, [sp, #28]
   15564:	add	r3, sp, #64	; 0x40
   15568:	ldr	r2, [sp, #28]
   1556c:	str	r3, [sp, #12]
   15570:	ldr	r3, [r2]
   15574:	str	r3, [sp, #148]	; 0x94
   15578:	bl	17958 <close_stdout@@Base+0x28dc>
   1557c:	str	r0, [sp, #20]
   15580:	ldrb	r3, [fp]
   15584:	cmp	r3, #0
   15588:	beq	15b80 <close_stdout@@Base+0xb04>
   1558c:	mov	r0, fp
   15590:	ldr	r1, [sp, #20]
   15594:	bl	1a954 <close_stdout@@Base+0x58d8>
   15598:	subs	r8, r0, #0
   1559c:	beq	15b80 <close_stdout@@Base+0xb04>
   155a0:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   155a4:	cmp	r0, #1
   155a8:	bls	15b00 <close_stdout@@Base+0xa84>
   155ac:	cmp	fp, r8
   155b0:	str	r5, [r6, #4]
   155b4:	str	fp, [sp, #52]	; 0x34
   155b8:	addcc	sl, sp, #64	; 0x40
   155bc:	strb	r5, [sp, #36]	; 0x24
   155c0:	str	r5, [r6]
   155c4:	strb	r5, [sp, #48]	; 0x30
   155c8:	strcc	r9, [sp, #24]
   155cc:	bcs	15ba0 <close_stdout@@Base+0xb24>
   155d0:	ldrb	r3, [sp, #36]	; 0x24
   155d4:	cmp	r3, #0
   155d8:	bne	15638 <close_stdout@@Base+0x5bc>
   155dc:	ldr	r2, [pc, #1948]	; 15d80 <close_stdout@@Base+0xd04>
   155e0:	ldrb	r3, [fp]
   155e4:	ldr	r1, [r7, r2]
   155e8:	and	r2, r3, #31
   155ec:	lsr	r3, r3, #5
   155f0:	ldr	r3, [r1, r3, lsl #2]
   155f4:	lsr	r3, r3, r2
   155f8:	tst	r3, #1
   155fc:	beq	15624 <close_stdout@@Base+0x5a8>
   15600:	str	r4, [sp, #56]	; 0x38
   15604:	ldrb	r2, [fp]
   15608:	strb	r4, [sp, #60]	; 0x3c
   1560c:	strb	r4, [sp, #48]	; 0x30
   15610:	mov	r9, r2
   15614:	cmp	r9, #0
   15618:	str	r2, [sp, #64]	; 0x40
   1561c:	bne	156bc <close_stdout@@Base+0x640>
   15620:	bl	11934 <abort@plt>
   15624:	mov	r0, r6
   15628:	bl	115f8 <mbsinit@plt>
   1562c:	cmp	r0, #0
   15630:	beq	15d34 <close_stdout@@Base+0xcb8>
   15634:	strb	r4, [sp, #36]	; 0x24
   15638:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1563c:	mov	r1, r0
   15640:	mov	r0, fp
   15644:	bl	1792c <close_stdout@@Base+0x28b0>
   15648:	mov	r1, fp
   1564c:	mov	r3, r6
   15650:	mov	r2, r0
   15654:	mov	r0, sl
   15658:	bl	116dc <mbrtowc@plt>
   1565c:	cmn	r0, #1
   15660:	str	r0, [sp, #56]	; 0x38
   15664:	beq	15aa8 <close_stdout@@Base+0xa2c>
   15668:	cmn	r0, #2
   1566c:	beq	15ad8 <close_stdout@@Base+0xa5c>
   15670:	cmp	r0, #0
   15674:	bne	15ad0 <close_stdout@@Base+0xa54>
   15678:	ldr	fp, [sp, #52]	; 0x34
   1567c:	str	r4, [sp, #56]	; 0x38
   15680:	ldrb	r3, [fp]
   15684:	cmp	r3, #0
   15688:	bne	15d58 <close_stdout@@Base+0xcdc>
   1568c:	ldr	r2, [sp, #64]	; 0x40
   15690:	cmp	r2, #0
   15694:	bne	15a88 <close_stdout@@Base+0xa0c>
   15698:	mov	r9, r2
   1569c:	mov	r0, r6
   156a0:	strb	r4, [sp, #60]	; 0x3c
   156a4:	bl	115f8 <mbsinit@plt>
   156a8:	strb	r4, [sp, #48]	; 0x30
   156ac:	cmp	r0, #0
   156b0:	strbne	r5, [sp, #36]	; 0x24
   156b4:	cmp	r9, #0
   156b8:	beq	15620 <close_stdout@@Base+0x5a4>
   156bc:	ldr	fp, [sp, #52]	; 0x34
   156c0:	ldr	r3, [sp, #56]	; 0x38
   156c4:	strb	r5, [sp, #48]	; 0x30
   156c8:	add	fp, fp, r3
   156cc:	ldrb	r3, [sp, #60]	; 0x3c
   156d0:	cmp	r8, fp
   156d4:	str	fp, [sp, #52]	; 0x34
   156d8:	bhi	155d0 <close_stdout@@Base+0x554>
   156dc:	cmp	r3, #0
   156e0:	mov	r2, r9
   156e4:	ldr	r9, [sp, #24]
   156e8:	beq	15ba0 <close_stdout@@Base+0xb24>
   156ec:	mov	r0, r2
   156f0:	bl	117fc <iswalnum@plt>
   156f4:	rsbs	r0, r0, #1
   156f8:	movcc	r0, #0
   156fc:	str	r0, [sp, #24]
   15700:	strb	r5, [sp, #92]	; 0x5c
   15704:	ldrb	r2, [sp, #92]	; 0x5c
   15708:	ldr	fp, [sp, #20]
   1570c:	cmp	r2, #0
   15710:	str	r5, [r6, #4]
   15714:	str	r5, [r9, #4]
   15718:	str	r8, [sp, #52]	; 0x34
   1571c:	strb	r5, [sp, #36]	; 0x24
   15720:	str	r5, [r6]
   15724:	strb	r5, [sp, #48]	; 0x30
   15728:	str	fp, [sp, #108]	; 0x6c
   1572c:	str	r5, [r9]
   15730:	strb	r5, [sp, #104]	; 0x68
   15734:	bne	158f0 <close_stdout@@Base+0x874>
   15738:	ldr	r1, [pc, #1600]	; 15d80 <close_stdout@@Base+0xd04>
   1573c:	ldrb	r2, [fp]
   15740:	ldr	r0, [r7, r1]
   15744:	and	r1, r2, #31
   15748:	lsr	r2, r2, #5
   1574c:	ldr	r2, [r0, r2, lsl #2]
   15750:	lsr	r2, r2, r1
   15754:	tst	r2, #1
   15758:	beq	15a50 <close_stdout@@Base+0x9d4>
   1575c:	str	r4, [sp, #112]	; 0x70
   15760:	ldrb	r3, [fp]
   15764:	strb	r4, [sp, #116]	; 0x74
   15768:	mov	fp, r3
   1576c:	str	r3, [sp, #120]	; 0x78
   15770:	cmp	fp, #0
   15774:	strb	r4, [sp, #104]	; 0x68
   15778:	mov	r3, #1
   1577c:	bne	158a4 <close_stdout@@Base+0x828>
   15780:	ldrb	ip, [sp, #48]	; 0x30
   15784:	cmp	ip, #0
   15788:	bne	15af4 <close_stdout@@Base+0xa78>
   1578c:	ldrb	r2, [sp, #36]	; 0x24
   15790:	ldr	sl, [sp, #52]	; 0x34
   15794:	cmp	r2, #0
   15798:	bne	15c44 <close_stdout@@Base+0xbc8>
   1579c:	ldr	r1, [pc, #1500]	; 15d80 <close_stdout@@Base+0xd04>
   157a0:	ldrb	r2, [sl]
   157a4:	ldr	r0, [r7, r1]
   157a8:	and	r1, r2, #31
   157ac:	lsr	r2, r2, #5
   157b0:	ldr	r2, [r0, r2, lsl #2]
   157b4:	lsr	r2, r2, r1
   157b8:	tst	r2, #1
   157bc:	beq	15c20 <close_stdout@@Base+0xba4>
   157c0:	str	r3, [sp, #56]	; 0x38
   157c4:	mov	ip, r3
   157c8:	ldrb	r2, [sl]
   157cc:	strb	r3, [sp, #60]	; 0x3c
   157d0:	mov	r3, r2
   157d4:	str	r2, [sp, #64]	; 0x40
   157d8:	strb	r4, [sp, #48]	; 0x30
   157dc:	cmp	ip, #0
   157e0:	beq	157ec <close_stdout@@Base+0x770>
   157e4:	cmp	r3, #0
   157e8:	beq	15808 <close_stdout@@Base+0x78c>
   157ec:	ldrb	r2, [sp, #60]	; 0x3c
   157f0:	cmp	r2, #0
   157f4:	beq	15808 <close_stdout@@Base+0x78c>
   157f8:	mov	r0, r3
   157fc:	bl	117fc <iswalnum@plt>
   15800:	cmp	r0, #0
   15804:	bne	15814 <close_stdout@@Base+0x798>
   15808:	ldr	r2, [sp, #24]
   1580c:	cmp	r2, #0
   15810:	bne	15d2c <close_stdout@@Base+0xcb0>
   15814:	ldr	r2, [pc, #1380]	; 15d80 <close_stdout@@Base+0xd04>
   15818:	str	r5, [r6, #4]
   1581c:	str	r8, [sp, #52]	; 0x34
   15820:	strb	r5, [sp, #36]	; 0x24
   15824:	str	r5, [r6]
   15828:	strb	r5, [sp, #48]	; 0x30
   1582c:	ldrb	r3, [r8]
   15830:	ldr	r1, [r7, r2]
   15834:	and	r2, r3, #31
   15838:	lsr	r3, r3, #5
   1583c:	ldr	r3, [r1, r3, lsl #2]
   15840:	lsr	r3, r3, r2
   15844:	tst	r3, #1
   15848:	beq	15bac <close_stdout@@Base+0xb30>
   1584c:	str	r4, [sp, #56]	; 0x38
   15850:	ldrb	fp, [r8]
   15854:	strb	r4, [sp, #60]	; 0x3c
   15858:	str	fp, [sp, #64]	; 0x40
   1585c:	cmp	fp, #0
   15860:	strb	r4, [sp, #48]	; 0x30
   15864:	bne	15b94 <close_stdout@@Base+0xb18>
   15868:	ldr	r0, [sp, #20]
   1586c:	bl	115c8 <free@plt>
   15870:	ldr	r1, [sp, #28]
   15874:	ldr	r2, [sp, #148]	; 0x94
   15878:	mov	r0, fp
   1587c:	ldr	r3, [r1]
   15880:	cmp	r2, r3
   15884:	bne	15d54 <close_stdout@@Base+0xcd8>
   15888:	add	sp, sp, #156	; 0x9c
   1588c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15890:	ldr	r0, [sp, #108]	; 0x6c
   15894:	bl	11790 <strlen@plt>
   15898:	strb	r5, [sp, #116]	; 0x74
   1589c:	str	r0, [sp, #112]	; 0x70
   158a0:	strb	r4, [sp, #104]	; 0x68
   158a4:	ldrb	fp, [sp, #48]	; 0x30
   158a8:	cmp	fp, #0
   158ac:	beq	15954 <close_stdout@@Base+0x8d8>
   158b0:	ldrb	fp, [sp, #60]	; 0x3c
   158b4:	cmp	fp, #0
   158b8:	bne	159a8 <close_stdout@@Base+0x92c>
   158bc:	ldr	r1, [sp, #52]	; 0x34
   158c0:	ldr	r2, [sp, #56]	; 0x38
   158c4:	ldr	fp, [sp, #108]	; 0x6c
   158c8:	add	r1, r1, r2
   158cc:	ldr	r2, [sp, #112]	; 0x70
   158d0:	strb	r5, [sp, #48]	; 0x30
   158d4:	add	fp, fp, r2
   158d8:	ldrb	r2, [sp, #92]	; 0x5c
   158dc:	strb	r5, [sp, #104]	; 0x68
   158e0:	cmp	r2, #0
   158e4:	str	r1, [sp, #52]	; 0x34
   158e8:	str	fp, [sp, #108]	; 0x6c
   158ec:	beq	15738 <close_stdout@@Base+0x6bc>
   158f0:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   158f4:	mov	r1, r0
   158f8:	mov	r0, fp
   158fc:	bl	1792c <close_stdout@@Base+0x28b0>
   15900:	mov	r1, fp
   15904:	mov	r3, r9
   15908:	mov	r2, r0
   1590c:	add	r0, sp, #120	; 0x78
   15910:	bl	116dc <mbrtowc@plt>
   15914:	cmn	r0, #1
   15918:	str	r0, [sp, #112]	; 0x70
   1591c:	strbeq	r5, [sp, #116]	; 0x74
   15920:	streq	r4, [sp, #112]	; 0x70
   15924:	beq	158a0 <close_stdout@@Base+0x824>
   15928:	cmn	r0, #2
   1592c:	beq	15890 <close_stdout@@Base+0x814>
   15930:	cmp	r0, #0
   15934:	beq	15a68 <close_stdout@@Base+0x9ec>
   15938:	ldr	fp, [sp, #120]	; 0x78
   1593c:	mov	r0, r9
   15940:	strb	r4, [sp, #116]	; 0x74
   15944:	bl	115f8 <mbsinit@plt>
   15948:	cmp	r0, #0
   1594c:	strbne	r5, [sp, #92]	; 0x5c
   15950:	b	15770 <close_stdout@@Base+0x6f4>
   15954:	ldrb	r3, [sp, #36]	; 0x24
   15958:	ldr	sl, [sp, #52]	; 0x34
   1595c:	cmp	r3, #0
   15960:	bne	159cc <close_stdout@@Base+0x950>
   15964:	ldr	r1, [pc, #1044]	; 15d80 <close_stdout@@Base+0xd04>
   15968:	ldrb	r2, [sl]
   1596c:	ldr	r0, [r7, r1]
   15970:	and	r1, r2, #31
   15974:	lsr	r2, r2, #5
   15978:	ldr	r2, [r0, r2, lsl #2]
   1597c:	lsr	r2, r2, r1
   15980:	tst	r2, #1
   15984:	beq	159b8 <close_stdout@@Base+0x93c>
   15988:	str	r4, [sp, #56]	; 0x38
   1598c:	mov	fp, #1
   15990:	ldrb	r3, [sl]
   15994:	strb	r4, [sp, #60]	; 0x3c
   15998:	str	r3, [sp, #64]	; 0x40
   1599c:	cmp	fp, #0
   159a0:	strb	r4, [sp, #48]	; 0x30
   159a4:	beq	158bc <close_stdout@@Base+0x840>
   159a8:	ldr	r3, [sp, #64]	; 0x40
   159ac:	cmp	r3, #0
   159b0:	bne	158bc <close_stdout@@Base+0x840>
   159b4:	b	15620 <close_stdout@@Base+0x5a4>
   159b8:	mov	r0, r6
   159bc:	bl	115f8 <mbsinit@plt>
   159c0:	cmp	r0, #0
   159c4:	beq	15d34 <close_stdout@@Base+0xcb8>
   159c8:	strb	r4, [sp, #36]	; 0x24
   159cc:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   159d0:	mov	r1, r0
   159d4:	mov	r0, sl
   159d8:	bl	1792c <close_stdout@@Base+0x28b0>
   159dc:	mov	r1, sl
   159e0:	mov	r3, r6
   159e4:	mov	r2, r0
   159e8:	add	r0, sp, #64	; 0x40
   159ec:	bl	116dc <mbrtowc@plt>
   159f0:	cmn	r0, #1
   159f4:	str	r0, [sp, #56]	; 0x38
   159f8:	strbeq	r5, [sp, #60]	; 0x3c
   159fc:	streq	r4, [sp, #56]	; 0x38
   15a00:	beq	1599c <close_stdout@@Base+0x920>
   15a04:	cmn	r0, #2
   15a08:	beq	15abc <close_stdout@@Base+0xa40>
   15a0c:	cmp	r0, #0
   15a10:	bne	15a34 <close_stdout@@Base+0x9b8>
   15a14:	ldr	r3, [sp, #52]	; 0x34
   15a18:	str	r4, [sp, #56]	; 0x38
   15a1c:	ldrb	r3, [r3]
   15a20:	cmp	r3, #0
   15a24:	bne	15d58 <close_stdout@@Base+0xcdc>
   15a28:	ldr	r3, [sp, #64]	; 0x40
   15a2c:	cmp	r3, #0
   15a30:	bne	15a88 <close_stdout@@Base+0xa0c>
   15a34:	mov	r0, r6
   15a38:	strb	r4, [sp, #60]	; 0x3c
   15a3c:	bl	115f8 <mbsinit@plt>
   15a40:	mov	fp, #1
   15a44:	cmp	r0, #0
   15a48:	strbne	r5, [sp, #36]	; 0x24
   15a4c:	b	1599c <close_stdout@@Base+0x920>
   15a50:	mov	r0, r9
   15a54:	bl	115f8 <mbsinit@plt>
   15a58:	cmp	r0, #0
   15a5c:	beq	15d34 <close_stdout@@Base+0xcb8>
   15a60:	strb	r4, [sp, #92]	; 0x5c
   15a64:	b	158f0 <close_stdout@@Base+0x874>
   15a68:	ldr	r3, [sp, #108]	; 0x6c
   15a6c:	str	r4, [sp, #112]	; 0x70
   15a70:	ldrb	r3, [r3]
   15a74:	cmp	r3, #0
   15a78:	bne	15d58 <close_stdout@@Base+0xcdc>
   15a7c:	ldr	fp, [sp, #120]	; 0x78
   15a80:	cmp	fp, #0
   15a84:	beq	1593c <close_stdout@@Base+0x8c0>
   15a88:	ldr	r0, [pc, #756]	; 15d84 <close_stdout@@Base+0xd08>
   15a8c:	mov	r2, #179	; 0xb3
   15a90:	ldr	r1, [pc, #752]	; 15d88 <close_stdout@@Base+0xd0c>
   15a94:	ldr	r3, [pc, #752]	; 15d8c <close_stdout@@Base+0xd10>
   15a98:	add	r0, pc, r0
   15a9c:	add	r1, pc, r1
   15aa0:	add	r3, pc, r3
   15aa4:	bl	11958 <__assert_fail@plt>
   15aa8:	str	r4, [sp, #56]	; 0x38
   15aac:	strb	r5, [sp, #60]	; 0x3c
   15ab0:	ldr	r9, [sp, #64]	; 0x40
   15ab4:	ldr	fp, [sp, #52]	; 0x34
   15ab8:	b	156c0 <close_stdout@@Base+0x644>
   15abc:	ldr	r0, [sp, #52]	; 0x34
   15ac0:	bl	11790 <strlen@plt>
   15ac4:	strb	r5, [sp, #60]	; 0x3c
   15ac8:	str	r0, [sp, #56]	; 0x38
   15acc:	b	1599c <close_stdout@@Base+0x920>
   15ad0:	ldr	r9, [sp, #64]	; 0x40
   15ad4:	b	1569c <close_stdout@@Base+0x620>
   15ad8:	ldr	fp, [sp, #52]	; 0x34
   15adc:	mov	r0, fp
   15ae0:	bl	11790 <strlen@plt>
   15ae4:	strb	r5, [sp, #60]	; 0x3c
   15ae8:	ldr	r9, [sp, #64]	; 0x40
   15aec:	str	r0, [sp, #56]	; 0x38
   15af0:	b	156c0 <close_stdout@@Base+0x644>
   15af4:	ldr	r3, [sp, #64]	; 0x40
   15af8:	ldrb	ip, [sp, #60]	; 0x3c
   15afc:	b	157dc <close_stdout@@Base+0x760>
   15b00:	cmp	fp, r8
   15b04:	movcs	fp, #1
   15b08:	bcs	15b28 <close_stdout@@Base+0xaac>
   15b0c:	bl	11760 <__ctype_b_loc@plt>
   15b10:	ldrb	r3, [r8, #-1]
   15b14:	lsl	r3, r3, #1
   15b18:	ldr	r2, [r0]
   15b1c:	ldrh	fp, [r2, r3]
   15b20:	eor	fp, fp, #8
   15b24:	ubfx	fp, fp, #3, #1
   15b28:	ldr	r0, [sp, #20]
   15b2c:	bl	11790 <strlen@plt>
   15b30:	ldrb	r3, [r8, r0]
   15b34:	cmp	r3, #0
   15b38:	beq	15b5c <close_stdout@@Base+0xae0>
   15b3c:	str	r3, [sp, #8]
   15b40:	bl	11760 <__ctype_b_loc@plt>
   15b44:	ldr	r3, [sp, #8]
   15b48:	lsl	r3, r3, #1
   15b4c:	ldr	r2, [r0]
   15b50:	ldrh	r3, [r2, r3]
   15b54:	tst	r3, #8
   15b58:	bne	15b64 <close_stdout@@Base+0xae8>
   15b5c:	cmp	fp, #0
   15b60:	bne	15d2c <close_stdout@@Base+0xcb0>
   15b64:	ldrb	r3, [r8]
   15b68:	cmp	r3, #0
   15b6c:	beq	15b80 <close_stdout@@Base+0xb04>
   15b70:	add	fp, r8, #1
   15b74:	ldrb	r3, [fp]
   15b78:	cmp	r3, #0
   15b7c:	bne	1558c <close_stdout@@Base+0x510>
   15b80:	mov	fp, #0
   15b84:	b	15868 <close_stdout@@Base+0x7ec>
   15b88:	ldr	r0, [sp, #52]	; 0x34
   15b8c:	bl	11790 <strlen@plt>
   15b90:	str	r0, [sp, #56]	; 0x38
   15b94:	ldr	fp, [sp, #56]	; 0x38
   15b98:	add	fp, r8, fp
   15b9c:	b	15580 <close_stdout@@Base+0x504>
   15ba0:	mov	r3, #1
   15ba4:	str	r3, [sp, #24]
   15ba8:	b	15700 <close_stdout@@Base+0x684>
   15bac:	mov	r0, r6
   15bb0:	bl	115f8 <mbsinit@plt>
   15bb4:	cmp	r0, #0
   15bb8:	beq	15d34 <close_stdout@@Base+0xcb8>
   15bbc:	strb	r4, [sp, #36]	; 0x24
   15bc0:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   15bc4:	mov	r1, r0
   15bc8:	mov	r0, r8
   15bcc:	bl	1792c <close_stdout@@Base+0x28b0>
   15bd0:	mov	r1, r8
   15bd4:	mov	r3, r6
   15bd8:	mov	r2, r0
   15bdc:	add	r0, sp, #64	; 0x40
   15be0:	bl	116dc <mbrtowc@plt>
   15be4:	cmn	r0, #1
   15be8:	str	r0, [sp, #56]	; 0x38
   15bec:	streq	r4, [sp, #56]	; 0x38
   15bf0:	beq	15b94 <close_stdout@@Base+0xb18>
   15bf4:	cmn	r0, #2
   15bf8:	beq	15b88 <close_stdout@@Base+0xb0c>
   15bfc:	cmp	r0, #0
   15c00:	beq	15cb0 <close_stdout@@Base+0xc34>
   15c04:	ldr	fp, [sp, #64]	; 0x40
   15c08:	mov	r0, r6
   15c0c:	strb	r4, [sp, #60]	; 0x3c
   15c10:	bl	115f8 <mbsinit@plt>
   15c14:	cmp	r0, #0
   15c18:	strbne	r5, [sp, #36]	; 0x24
   15c1c:	b	1585c <close_stdout@@Base+0x7e0>
   15c20:	mov	r0, r6
   15c24:	str	r3, [sp, #8]
   15c28:	str	ip, [sp, #4]
   15c2c:	bl	115f8 <mbsinit@plt>
   15c30:	ldr	r3, [sp, #8]
   15c34:	ldr	ip, [sp, #4]
   15c38:	cmp	r0, #0
   15c3c:	beq	15d34 <close_stdout@@Base+0xcb8>
   15c40:	strb	r3, [sp, #36]	; 0x24
   15c44:	str	ip, [sp, #4]
   15c48:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   15c4c:	mov	r1, r0
   15c50:	mov	r0, sl
   15c54:	bl	1792c <close_stdout@@Base+0x28b0>
   15c58:	mov	r1, sl
   15c5c:	mov	r3, r6
   15c60:	mov	r2, r0
   15c64:	add	r0, sp, #64	; 0x40
   15c68:	bl	116dc <mbrtowc@plt>
   15c6c:	ldr	ip, [sp, #4]
   15c70:	cmn	r0, #1
   15c74:	str	r0, [sp, #56]	; 0x38
   15c78:	beq	15cfc <close_stdout@@Base+0xc80>
   15c7c:	cmn	r0, #2
   15c80:	beq	15d0c <close_stdout@@Base+0xc90>
   15c84:	cmp	r0, #0
   15c88:	bne	15cd4 <close_stdout@@Base+0xc58>
   15c8c:	ldr	r3, [sp, #52]	; 0x34
   15c90:	str	r4, [sp, #56]	; 0x38
   15c94:	ldrb	r3, [r3]
   15c98:	cmp	r3, #0
   15c9c:	bne	15d58 <close_stdout@@Base+0xcdc>
   15ca0:	ldr	r3, [sp, #64]	; 0x40
   15ca4:	cmp	r3, #0
   15ca8:	beq	15cd8 <close_stdout@@Base+0xc5c>
   15cac:	b	15a88 <close_stdout@@Base+0xa0c>
   15cb0:	ldr	r3, [sp, #52]	; 0x34
   15cb4:	str	r4, [sp, #56]	; 0x38
   15cb8:	ldrb	r3, [r3]
   15cbc:	cmp	r3, #0
   15cc0:	bne	15d58 <close_stdout@@Base+0xcdc>
   15cc4:	ldr	fp, [sp, #64]	; 0x40
   15cc8:	cmp	fp, #0
   15ccc:	beq	15c08 <close_stdout@@Base+0xb8c>
   15cd0:	b	15a88 <close_stdout@@Base+0xa0c>
   15cd4:	ldr	r3, [sp, #64]	; 0x40
   15cd8:	mov	r0, r6
   15cdc:	str	r3, [sp, #8]
   15ce0:	strb	r4, [sp, #60]	; 0x3c
   15ce4:	bl	115f8 <mbsinit@plt>
   15ce8:	ldr	r3, [sp, #8]
   15cec:	mov	ip, #1
   15cf0:	cmp	r0, #0
   15cf4:	strbne	r5, [sp, #36]	; 0x24
   15cf8:	b	157d8 <close_stdout@@Base+0x75c>
   15cfc:	str	r4, [sp, #56]	; 0x38
   15d00:	strb	r5, [sp, #60]	; 0x3c
   15d04:	ldr	r3, [sp, #64]	; 0x40
   15d08:	b	157d8 <close_stdout@@Base+0x75c>
   15d0c:	ldr	r0, [sp, #52]	; 0x34
   15d10:	str	ip, [sp, #4]
   15d14:	bl	11790 <strlen@plt>
   15d18:	strb	r5, [sp, #60]	; 0x3c
   15d1c:	ldr	r3, [sp, #64]	; 0x40
   15d20:	ldr	ip, [sp, #4]
   15d24:	str	r0, [sp, #56]	; 0x38
   15d28:	b	157d8 <close_stdout@@Base+0x75c>
   15d2c:	mov	fp, #1
   15d30:	b	15868 <close_stdout@@Base+0x7ec>
   15d34:	ldr	r0, [pc, #84]	; 15d90 <close_stdout@@Base+0xd14>
   15d38:	mov	r2, #150	; 0x96
   15d3c:	ldr	r1, [pc, #80]	; 15d94 <close_stdout@@Base+0xd18>
   15d40:	ldr	r3, [pc, #80]	; 15d98 <close_stdout@@Base+0xd1c>
   15d44:	add	r0, pc, r0
   15d48:	add	r1, pc, r1
   15d4c:	add	r3, pc, r3
   15d50:	bl	11958 <__assert_fail@plt>
   15d54:	bl	11634 <__stack_chk_fail@plt>
   15d58:	ldr	r0, [pc, #60]	; 15d9c <close_stdout@@Base+0xd20>
   15d5c:	mov	r2, #178	; 0xb2
   15d60:	ldr	r1, [pc, #56]	; 15da0 <close_stdout@@Base+0xd24>
   15d64:	ldr	r3, [pc, #56]	; 15da4 <close_stdout@@Base+0xd28>
   15d68:	add	r0, pc, r0
   15d6c:	add	r1, pc, r1
   15d70:	add	r3, pc, r3
   15d74:	bl	11958 <__assert_fail@plt>
   15d78:			; <UNDEFINED> instruction: 0x00019abc
   15d7c:	andeq	r0, r0, ip, ror r1
   15d80:	andeq	r0, r0, r8, ror r1
   15d84:	ldrdeq	r8, [r0], -r0
   15d88:	andeq	r8, r0, r4, lsr #3
   15d8c:	andeq	r8, r0, r4, ror r1
   15d90:	andeq	r7, r0, r4, ror #29
   15d94:	strdeq	r7, [r0], -r8
   15d98:	andeq	r7, r0, r8, asr #29
   15d9c:	andeq	r7, r0, r8, ror #29
   15da0:	ldrdeq	r7, [r0], -r4
   15da4:	andeq	r7, r0, r4, lsr #29
   15da8:	push	{r4, r5, r6, lr}
   15dac:	mov	r1, r0
   15db0:	mov	r4, r0
   15db4:	sub	sp, sp, #8
   15db8:	mov	r2, #5
   15dbc:	mov	r0, #0
   15dc0:	bl	11628 <dcgettext@plt>
   15dc4:	cmp	r0, r4
   15dc8:	mov	r5, r0
   15dcc:	moveq	r0, r0
   15dd0:	beq	15de8 <close_stdout@@Base+0xd6c>
   15dd4:	mov	r1, r4
   15dd8:	bl	15524 <close_stdout@@Base+0x4a8>
   15ddc:	cmp	r0, #0
   15de0:	mov	r0, r5
   15de4:	beq	15df0 <close_stdout@@Base+0xd74>
   15de8:	add	sp, sp, #8
   15dec:	pop	{r4, r5, r6, pc}
   15df0:	bl	11790 <strlen@plt>
   15df4:	mov	r6, r0
   15df8:	mov	r0, r4
   15dfc:	bl	11790 <strlen@plt>
   15e00:	add	r0, r6, r0
   15e04:	add	r0, r0, #4
   15e08:	bl	184e8 <close_stdout@@Base+0x346c>
   15e0c:	ldr	r3, [pc, #36]	; 15e38 <close_stdout@@Base+0xdbc>
   15e10:	str	r5, [sp]
   15e14:	mov	r1, #1
   15e18:	str	r4, [sp, #4]
   15e1c:	mvn	r2, #0
   15e20:	add	r3, pc, r3
   15e24:	mov	r6, r0
   15e28:	bl	11808 <__sprintf_chk@plt>
   15e2c:	mov	r0, r6
   15e30:	add	sp, sp, #8
   15e34:	pop	{r4, r5, r6, pc}
   15e38:	andeq	r7, r0, ip, asr lr
   15e3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e40:	mov	r6, r0
   15e44:	sub	sp, sp, #12
   15e48:	mov	r2, #5
   15e4c:	mov	r4, r1
   15e50:	mov	r0, #0
   15e54:	mov	r1, r6
   15e58:	ldr	r7, [pc, #640]	; 160e0 <close_stdout@@Base+0x1064>
   15e5c:	bl	11628 <dcgettext@plt>
   15e60:	add	r7, pc, r7
   15e64:	mov	r8, r0
   15e68:	bl	199dc <close_stdout@@Base+0x4960>
   15e6c:	mov	r1, r7
   15e70:	mov	r9, r0
   15e74:	bl	198ec <close_stdout@@Base+0x4870>
   15e78:	cmp	r0, #0
   15e7c:	moveq	r5, r0
   15e80:	moveq	r9, r4
   15e84:	bne	15ed0 <close_stdout@@Base+0xe54>
   15e88:	cmp	r4, #0
   15e8c:	movne	sl, r4
   15e90:	movne	r7, #0
   15e94:	beq	15f88 <close_stdout@@Base+0xf0c>
   15e98:	mov	r0, r8
   15e9c:	mov	r1, r6
   15ea0:	bl	11574 <strcmp@plt>
   15ea4:	cmp	r0, #0
   15ea8:	bne	15fa0 <close_stdout@@Base+0xf24>
   15eac:	cmp	r5, r4
   15eb0:	cmpne	r5, #0
   15eb4:	bne	16030 <close_stdout@@Base+0xfb4>
   15eb8:	cmp	r7, r4
   15ebc:	cmpne	r7, #0
   15ec0:	moveq	r0, r4
   15ec4:	bne	1601c <close_stdout@@Base+0xfa0>
   15ec8:	add	sp, sp, #12
   15ecc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15ed0:	mov	r2, r9
   15ed4:	mov	r1, r7
   15ed8:	mov	r0, r4
   15edc:	bl	187bc <close_stdout@@Base+0x3740>
   15ee0:	mov	r5, r0
   15ee4:	mov	r0, r9
   15ee8:	bl	11790 <strlen@plt>
   15eec:	mov	fp, r0
   15ef0:	add	r0, r0, #11
   15ef4:	bl	184e8 <close_stdout@@Base+0x346c>
   15ef8:	mov	r1, r9
   15efc:	mov	r2, fp
   15f00:	mov	sl, r0
   15f04:	bl	115e0 <memcpy@plt>
   15f08:	ldr	r3, [pc, #468]	; 160e4 <close_stdout@@Base+0x1068>
   15f0c:	add	ip, sl, fp
   15f10:	mov	r2, sl
   15f14:	add	r3, pc, r3
   15f18:	ldm	r3!, {r0, r1}
   15f1c:	ldrh	lr, [r3]
   15f20:	ldrb	r3, [r3, #2]
   15f24:	str	r0, [sl, fp]
   15f28:	mov	r0, r4
   15f2c:	str	r1, [ip, #4]
   15f30:	mov	r1, r7
   15f34:	strh	lr, [ip, #8]
   15f38:	strb	r3, [ip, #10]
   15f3c:	bl	187bc <close_stdout@@Base+0x3740>
   15f40:	mov	r9, r0
   15f44:	mov	r0, sl
   15f48:	bl	115c8 <free@plt>
   15f4c:	cmp	r9, #0
   15f50:	beq	160c0 <close_stdout@@Base+0x1044>
   15f54:	mov	r0, r9
   15f58:	mov	r1, #63	; 0x3f
   15f5c:	bl	117a8 <strchr@plt>
   15f60:	cmp	r0, #0
   15f64:	beq	160a8 <close_stdout@@Base+0x102c>
   15f68:	mov	r0, r9
   15f6c:	mov	r4, r5
   15f70:	bl	115c8 <free@plt>
   15f74:	cmp	r4, #0
   15f78:	mov	r9, #0
   15f7c:	movne	sl, r4
   15f80:	movne	r7, #0
   15f84:	bne	15e98 <close_stdout@@Base+0xe1c>
   15f88:	cmp	r9, #0
   15f8c:	beq	160c8 <close_stdout@@Base+0x104c>
   15f90:	mov	r7, r4
   15f94:	mov	sl, #0
   15f98:	mov	r4, r9
   15f9c:	b	15e98 <close_stdout@@Base+0xe1c>
   15fa0:	mov	r1, r6
   15fa4:	mov	r0, r8
   15fa8:	bl	15524 <close_stdout@@Base+0x4a8>
   15fac:	cmp	r0, #0
   15fb0:	bne	15fec <close_stdout@@Base+0xf70>
   15fb4:	cmp	sl, #0
   15fb8:	beq	15fd0 <close_stdout@@Base+0xf54>
   15fbc:	mov	r1, sl
   15fc0:	mov	r0, r8
   15fc4:	bl	15524 <close_stdout@@Base+0x4a8>
   15fc8:	cmp	r0, #0
   15fcc:	bne	15fec <close_stdout@@Base+0xf70>
   15fd0:	cmp	r9, #0
   15fd4:	beq	1603c <close_stdout@@Base+0xfc0>
   15fd8:	mov	r1, r9
   15fdc:	mov	r0, r8
   15fe0:	bl	15524 <close_stdout@@Base+0x4a8>
   15fe4:	cmp	r0, #0
   15fe8:	beq	1603c <close_stdout@@Base+0xfc0>
   15fec:	cmp	r5, #0
   15ff0:	beq	15ffc <close_stdout@@Base+0xf80>
   15ff4:	mov	r0, r5
   15ff8:	bl	115c8 <free@plt>
   15ffc:	cmp	r7, #0
   16000:	moveq	r0, r8
   16004:	beq	15ec8 <close_stdout@@Base+0xe4c>
   16008:	mov	r0, r7
   1600c:	bl	115c8 <free@plt>
   16010:	mov	r0, r8
   16014:	add	sp, sp, #12
   16018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1601c:	mov	r0, r7
   16020:	bl	115c8 <free@plt>
   16024:	mov	r0, r4
   16028:	add	sp, sp, #12
   1602c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16030:	mov	r0, r5
   16034:	bl	115c8 <free@plt>
   16038:	b	15eb8 <close_stdout@@Base+0xe3c>
   1603c:	mov	r0, r8
   16040:	bl	11790 <strlen@plt>
   16044:	mov	r6, r0
   16048:	mov	r0, r4
   1604c:	bl	11790 <strlen@plt>
   16050:	add	r0, r6, r0
   16054:	add	r0, r0, #4
   16058:	bl	184e8 <close_stdout@@Base+0x346c>
   1605c:	ldr	r3, [pc, #132]	; 160e8 <close_stdout@@Base+0x106c>
   16060:	str	r8, [sp]
   16064:	mov	r1, #1
   16068:	str	r4, [sp, #4]
   1606c:	mvn	r2, #0
   16070:	add	r3, pc, r3
   16074:	mov	r6, r0
   16078:	bl	11808 <__sprintf_chk@plt>
   1607c:	cmp	r5, #0
   16080:	beq	1608c <close_stdout@@Base+0x1010>
   16084:	mov	r0, r5
   16088:	bl	115c8 <free@plt>
   1608c:	cmp	r7, #0
   16090:	moveq	r0, r6
   16094:	beq	15ec8 <close_stdout@@Base+0xe4c>
   16098:	mov	r0, r7
   1609c:	bl	115c8 <free@plt>
   160a0:	mov	r0, r6
   160a4:	b	15ec8 <close_stdout@@Base+0xe4c>
   160a8:	cmp	r5, #0
   160ac:	beq	160d8 <close_stdout@@Base+0x105c>
   160b0:	mov	sl, r5
   160b4:	mov	r7, r9
   160b8:	mov	r4, r5
   160bc:	b	15e98 <close_stdout@@Base+0xe1c>
   160c0:	mov	r4, r5
   160c4:	b	15e88 <close_stdout@@Base+0xe0c>
   160c8:	mov	sl, r9
   160cc:	mov	r7, r9
   160d0:	mov	r4, r6
   160d4:	b	15e98 <close_stdout@@Base+0xe1c>
   160d8:	mov	r4, r9
   160dc:	b	15f90 <close_stdout@@Base+0xf14>
   160e0:	andeq	r7, r0, r4, lsr #28
   160e4:	andeq	r7, r0, r8, ror sp
   160e8:	andeq	r7, r0, ip, lsl #24
   160ec:	push	{r3, lr}
   160f0:	mov	r3, r0
   160f4:	mov	r2, #0
   160f8:	cmp	r1, #8
   160fc:	str	r2, [r3], #4
   16100:	add	r3, r3, #4
   16104:	str	r2, [r0, #4]
   16108:	str	r2, [r3], #4
   1610c:	str	r2, [r3], #4
   16110:	str	r2, [r3], #4
   16114:	str	r2, [r3], #4
   16118:	str	r2, [r3], #4
   1611c:	str	r2, [r3], #4
   16120:	str	r2, [r3], #4
   16124:	str	r2, [r3], #4
   16128:	str	r2, [r3], #4
   1612c:	str	r2, [r3]
   16130:	beq	1613c <close_stdout@@Base+0x10c0>
   16134:	str	r1, [r0]
   16138:	pop	{r3, pc}
   1613c:	bl	11934 <abort@plt>
   16140:	push	{r4, r5, r6, lr}
   16144:	mov	r4, r0
   16148:	mov	r6, r1
   1614c:	mov	r0, #0
   16150:	mov	r1, r4
   16154:	mov	r2, #5
   16158:	bl	11628 <dcgettext@plt>
   1615c:	cmp	r0, r4
   16160:	mov	r5, r0
   16164:	beq	1616c <close_stdout@@Base+0x10f0>
   16168:	pop	{r4, r5, r6, pc}
   1616c:	bl	199dc <close_stdout@@Base+0x4960>
   16170:	ldrb	r3, [r0]
   16174:	bic	r3, r3, #32
   16178:	cmp	r3, #85	; 0x55
   1617c:	bne	161f0 <close_stdout@@Base+0x1174>
   16180:	ldrb	r3, [r0, #1]
   16184:	bic	r3, r3, #32
   16188:	cmp	r3, #84	; 0x54
   1618c:	bne	161dc <close_stdout@@Base+0x1160>
   16190:	ldrb	r3, [r0, #2]
   16194:	bic	r3, r3, #32
   16198:	cmp	r3, #70	; 0x46
   1619c:	bne	161dc <close_stdout@@Base+0x1160>
   161a0:	ldrb	r3, [r0, #3]
   161a4:	cmp	r3, #45	; 0x2d
   161a8:	bne	161dc <close_stdout@@Base+0x1160>
   161ac:	ldrb	r3, [r0, #4]
   161b0:	cmp	r3, #56	; 0x38
   161b4:	bne	161dc <close_stdout@@Base+0x1160>
   161b8:	ldrb	r3, [r0, #5]
   161bc:	cmp	r3, #0
   161c0:	bne	161dc <close_stdout@@Base+0x1160>
   161c4:	ldrb	r3, [r5]
   161c8:	cmp	r3, #96	; 0x60
   161cc:	beq	16268 <close_stdout@@Base+0x11ec>
   161d0:	ldr	r0, [pc, #180]	; 1628c <close_stdout@@Base+0x1210>
   161d4:	add	r0, pc, r0
   161d8:	pop	{r4, r5, r6, pc}
   161dc:	cmp	r6, #7
   161e0:	beq	16274 <close_stdout@@Base+0x11f8>
   161e4:	ldr	r0, [pc, #164]	; 16290 <close_stdout@@Base+0x1214>
   161e8:	add	r0, pc, r0
   161ec:	pop	{r4, r5, r6, pc}
   161f0:	cmp	r3, #71	; 0x47
   161f4:	bne	161dc <close_stdout@@Base+0x1160>
   161f8:	ldrb	r3, [r0, #1]
   161fc:	bic	r3, r3, #32
   16200:	cmp	r3, #66	; 0x42
   16204:	bne	161dc <close_stdout@@Base+0x1160>
   16208:	ldrb	r3, [r0, #2]
   1620c:	cmp	r3, #49	; 0x31
   16210:	bne	161dc <close_stdout@@Base+0x1160>
   16214:	ldrb	r3, [r0, #3]
   16218:	cmp	r3, #56	; 0x38
   1621c:	bne	161dc <close_stdout@@Base+0x1160>
   16220:	ldrb	r3, [r0, #4]
   16224:	cmp	r3, #48	; 0x30
   16228:	bne	161dc <close_stdout@@Base+0x1160>
   1622c:	ldrb	r3, [r0, #5]
   16230:	cmp	r3, #51	; 0x33
   16234:	bne	161dc <close_stdout@@Base+0x1160>
   16238:	ldrb	r3, [r0, #6]
   1623c:	cmp	r3, #48	; 0x30
   16240:	bne	161dc <close_stdout@@Base+0x1160>
   16244:	ldrb	r3, [r0, #7]
   16248:	cmp	r3, #0
   1624c:	bne	161dc <close_stdout@@Base+0x1160>
   16250:	ldrb	r3, [r5]
   16254:	cmp	r3, #96	; 0x60
   16258:	beq	16280 <close_stdout@@Base+0x1204>
   1625c:	ldr	r0, [pc, #48]	; 16294 <close_stdout@@Base+0x1218>
   16260:	add	r0, pc, r0
   16264:	pop	{r4, r5, r6, pc}
   16268:	ldr	r0, [pc, #40]	; 16298 <close_stdout@@Base+0x121c>
   1626c:	add	r0, pc, r0
   16270:	pop	{r4, r5, r6, pc}
   16274:	ldr	r0, [pc, #32]	; 1629c <close_stdout@@Base+0x1220>
   16278:	add	r0, pc, r0
   1627c:	pop	{r4, r5, r6, pc}
   16280:	ldr	r0, [pc, #24]	; 162a0 <close_stdout@@Base+0x1224>
   16284:	add	r0, pc, r0
   16288:	pop	{r4, r5, r6, pc}
   1628c:	andeq	r7, r0, r4, ror #21
   16290:	ldrdeq	r7, [r0], -r8
   16294:	andeq	r7, r0, ip, asr sl
   16298:	andeq	r7, r0, ip, asr sl
   1629c:	andeq	r6, r0, r0, lsr #25
   162a0:	andeq	r7, r0, r0, asr #20
   162a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162a8:	sub	sp, sp, #124	; 0x7c
   162ac:	ldr	ip, [pc, #3304]	; 16f9c <close_stdout@@Base+0x1f20>
   162b0:	mov	sl, r1
   162b4:	str	r0, [sp, #40]	; 0x28
   162b8:	mov	r8, r3
   162bc:	ldr	r0, [pc, #3292]	; 16fa0 <close_stdout@@Base+0x1f24>
   162c0:	add	ip, pc, ip
   162c4:	str	r2, [sp, #32]
   162c8:	ldr	r1, [sp, #164]	; 0xa4
   162cc:	mov	r3, ip
   162d0:	ldr	r0, [ip, r0]
   162d4:	ldr	r2, [sp, #172]	; 0xac
   162d8:	ubfx	r1, r1, #1, #1
   162dc:	str	r1, [sp, #36]	; 0x24
   162e0:	str	r0, [sp, #56]	; 0x38
   162e4:	ldr	r0, [sp, #168]	; 0xa8
   162e8:	ldr	r1, [sp, #176]	; 0xb0
   162ec:	str	r2, [sp, #72]	; 0x48
   162f0:	str	r0, [sp, #48]	; 0x30
   162f4:	ldr	r0, [sp, #56]	; 0x38
   162f8:	str	r1, [sp, #68]	; 0x44
   162fc:	ldr	r3, [r0]
   16300:	str	r3, [sp, #116]	; 0x74
   16304:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   16308:	ldr	r2, [sp, #160]	; 0xa0
   1630c:	str	r0, [sp, #64]	; 0x40
   16310:	cmp	r2, #8
   16314:	addls	pc, pc, r2, lsl #2
   16318:	b	16e78 <close_stdout@@Base+0x1dfc>
   1631c:	b	16340 <close_stdout@@Base+0x12c4>
   16320:	b	16b90 <close_stdout@@Base+0x1b14>
   16324:	b	16bc0 <close_stdout@@Base+0x1b44>
   16328:	b	16a70 <close_stdout@@Base+0x19f4>
   1632c:	b	16ab0 <close_stdout@@Base+0x1a34>
   16330:	b	16adc <close_stdout@@Base+0x1a60>
   16334:	b	16afc <close_stdout@@Base+0x1a80>
   16338:	b	16afc <close_stdout@@Base+0x1a80>
   1633c:	b	16afc <close_stdout@@Base+0x1a80>
   16340:	mov	r2, #0
   16344:	str	r2, [sp, #36]	; 0x24
   16348:	mov	r9, r2
   1634c:	str	r2, [sp, #24]
   16350:	str	r2, [sp, #28]
   16354:	str	r2, [sp, #52]	; 0x34
   16358:	ldr	r0, [sp, #36]	; 0x24
   1635c:	mov	fp, #0
   16360:	ldr	r1, [sp, #24]
   16364:	eor	r2, r0, #1
   16368:	eor	r3, r1, #1
   1636c:	and	r3, r2, r3
   16370:	and	r2, r1, r0
   16374:	str	r3, [sp, #44]	; 0x2c
   16378:	str	r2, [sp, #76]	; 0x4c
   1637c:	cmn	r8, #1
   16380:	beq	16700 <close_stdout@@Base+0x1684>
   16384:	subs	r3, fp, r8
   16388:	movne	r3, #1
   1638c:	cmp	r3, #0
   16390:	beq	16718 <close_stdout@@Base+0x169c>
   16394:	ldr	r3, [sp, #28]
   16398:	ldr	r0, [sp, #24]
   1639c:	adds	r7, r3, #0
   163a0:	movne	r7, #1
   163a4:	ands	r6, r7, r0
   163a8:	bne	16c04 <close_stdout@@Base+0x1b88>
   163ac:	ldr	r1, [sp, #32]
   163b0:	add	r5, r1, fp
   163b4:	ldrb	r4, [r5]
   163b8:	cmp	r4, #126	; 0x7e
   163bc:	addls	pc, pc, r4, lsl #2
   163c0:	b	16984 <close_stdout@@Base+0x1908>
   163c4:	b	16890 <close_stdout@@Base+0x1814>
   163c8:	b	16984 <close_stdout@@Base+0x1908>
   163cc:	b	16984 <close_stdout@@Base+0x1908>
   163d0:	b	16984 <close_stdout@@Base+0x1908>
   163d4:	b	16984 <close_stdout@@Base+0x1908>
   163d8:	b	16984 <close_stdout@@Base+0x1908>
   163dc:	b	16984 <close_stdout@@Base+0x1908>
   163e0:	b	16878 <close_stdout@@Base+0x17fc>
   163e4:	b	16860 <close_stdout@@Base+0x17e4>
   163e8:	b	16888 <close_stdout@@Base+0x180c>
   163ec:	b	16880 <close_stdout@@Base+0x1804>
   163f0:	b	16870 <close_stdout@@Base+0x17f4>
   163f4:	b	16868 <close_stdout@@Base+0x17ec>
   163f8:	b	1682c <close_stdout@@Base+0x17b0>
   163fc:	b	16984 <close_stdout@@Base+0x1908>
   16400:	b	16984 <close_stdout@@Base+0x1908>
   16404:	b	16984 <close_stdout@@Base+0x1908>
   16408:	b	16984 <close_stdout@@Base+0x1908>
   1640c:	b	16984 <close_stdout@@Base+0x1908>
   16410:	b	16984 <close_stdout@@Base+0x1908>
   16414:	b	16984 <close_stdout@@Base+0x1908>
   16418:	b	16984 <close_stdout@@Base+0x1908>
   1641c:	b	16984 <close_stdout@@Base+0x1908>
   16420:	b	16984 <close_stdout@@Base+0x1908>
   16424:	b	16984 <close_stdout@@Base+0x1908>
   16428:	b	16984 <close_stdout@@Base+0x1908>
   1642c:	b	16984 <close_stdout@@Base+0x1908>
   16430:	b	16984 <close_stdout@@Base+0x1908>
   16434:	b	16984 <close_stdout@@Base+0x1908>
   16438:	b	16984 <close_stdout@@Base+0x1908>
   1643c:	b	16984 <close_stdout@@Base+0x1908>
   16440:	b	16984 <close_stdout@@Base+0x1908>
   16444:	b	167b8 <close_stdout@@Base+0x173c>
   16448:	b	167b8 <close_stdout@@Base+0x173c>
   1644c:	b	167b8 <close_stdout@@Base+0x173c>
   16450:	b	167b0 <close_stdout@@Base+0x1734>
   16454:	b	167b8 <close_stdout@@Base+0x173c>
   16458:	b	1668c <close_stdout@@Base+0x1610>
   1645c:	b	167b8 <close_stdout@@Base+0x173c>
   16460:	b	1692c <close_stdout@@Base+0x18b0>
   16464:	b	167b8 <close_stdout@@Base+0x173c>
   16468:	b	167b8 <close_stdout@@Base+0x173c>
   1646c:	b	167b8 <close_stdout@@Base+0x173c>
   16470:	b	1668c <close_stdout@@Base+0x1610>
   16474:	b	1668c <close_stdout@@Base+0x1610>
   16478:	b	1668c <close_stdout@@Base+0x1610>
   1647c:	b	1668c <close_stdout@@Base+0x1610>
   16480:	b	1668c <close_stdout@@Base+0x1610>
   16484:	b	1668c <close_stdout@@Base+0x1610>
   16488:	b	1668c <close_stdout@@Base+0x1610>
   1648c:	b	1668c <close_stdout@@Base+0x1610>
   16490:	b	1668c <close_stdout@@Base+0x1610>
   16494:	b	1668c <close_stdout@@Base+0x1610>
   16498:	b	1668c <close_stdout@@Base+0x1610>
   1649c:	b	1668c <close_stdout@@Base+0x1610>
   164a0:	b	1668c <close_stdout@@Base+0x1610>
   164a4:	b	1668c <close_stdout@@Base+0x1610>
   164a8:	b	1668c <close_stdout@@Base+0x1610>
   164ac:	b	1668c <close_stdout@@Base+0x1610>
   164b0:	b	167b8 <close_stdout@@Base+0x173c>
   164b4:	b	167b8 <close_stdout@@Base+0x173c>
   164b8:	b	167b8 <close_stdout@@Base+0x173c>
   164bc:	b	167b8 <close_stdout@@Base+0x173c>
   164c0:	b	165c0 <close_stdout@@Base+0x1544>
   164c4:	b	16984 <close_stdout@@Base+0x1908>
   164c8:	b	1668c <close_stdout@@Base+0x1610>
   164cc:	b	1668c <close_stdout@@Base+0x1610>
   164d0:	b	1668c <close_stdout@@Base+0x1610>
   164d4:	b	1668c <close_stdout@@Base+0x1610>
   164d8:	b	1668c <close_stdout@@Base+0x1610>
   164dc:	b	1668c <close_stdout@@Base+0x1610>
   164e0:	b	1668c <close_stdout@@Base+0x1610>
   164e4:	b	1668c <close_stdout@@Base+0x1610>
   164e8:	b	1668c <close_stdout@@Base+0x1610>
   164ec:	b	1668c <close_stdout@@Base+0x1610>
   164f0:	b	1668c <close_stdout@@Base+0x1610>
   164f4:	b	1668c <close_stdout@@Base+0x1610>
   164f8:	b	1668c <close_stdout@@Base+0x1610>
   164fc:	b	1668c <close_stdout@@Base+0x1610>
   16500:	b	1668c <close_stdout@@Base+0x1610>
   16504:	b	1668c <close_stdout@@Base+0x1610>
   16508:	b	1668c <close_stdout@@Base+0x1610>
   1650c:	b	1668c <close_stdout@@Base+0x1610>
   16510:	b	1668c <close_stdout@@Base+0x1610>
   16514:	b	1668c <close_stdout@@Base+0x1610>
   16518:	b	1668c <close_stdout@@Base+0x1610>
   1651c:	b	1668c <close_stdout@@Base+0x1610>
   16520:	b	1668c <close_stdout@@Base+0x1610>
   16524:	b	1668c <close_stdout@@Base+0x1610>
   16528:	b	1668c <close_stdout@@Base+0x1610>
   1652c:	b	1668c <close_stdout@@Base+0x1610>
   16530:	b	167b8 <close_stdout@@Base+0x173c>
   16534:	b	16910 <close_stdout@@Base+0x1894>
   16538:	b	1668c <close_stdout@@Base+0x1610>
   1653c:	b	167b8 <close_stdout@@Base+0x173c>
   16540:	b	1668c <close_stdout@@Base+0x1610>
   16544:	b	167b8 <close_stdout@@Base+0x173c>
   16548:	b	1668c <close_stdout@@Base+0x1610>
   1654c:	b	1668c <close_stdout@@Base+0x1610>
   16550:	b	1668c <close_stdout@@Base+0x1610>
   16554:	b	1668c <close_stdout@@Base+0x1610>
   16558:	b	1668c <close_stdout@@Base+0x1610>
   1655c:	b	1668c <close_stdout@@Base+0x1610>
   16560:	b	1668c <close_stdout@@Base+0x1610>
   16564:	b	1668c <close_stdout@@Base+0x1610>
   16568:	b	1668c <close_stdout@@Base+0x1610>
   1656c:	b	1668c <close_stdout@@Base+0x1610>
   16570:	b	1668c <close_stdout@@Base+0x1610>
   16574:	b	1668c <close_stdout@@Base+0x1610>
   16578:	b	1668c <close_stdout@@Base+0x1610>
   1657c:	b	1668c <close_stdout@@Base+0x1610>
   16580:	b	1668c <close_stdout@@Base+0x1610>
   16584:	b	1668c <close_stdout@@Base+0x1610>
   16588:	b	1668c <close_stdout@@Base+0x1610>
   1658c:	b	1668c <close_stdout@@Base+0x1610>
   16590:	b	1668c <close_stdout@@Base+0x1610>
   16594:	b	1668c <close_stdout@@Base+0x1610>
   16598:	b	1668c <close_stdout@@Base+0x1610>
   1659c:	b	1668c <close_stdout@@Base+0x1610>
   165a0:	b	1668c <close_stdout@@Base+0x1610>
   165a4:	b	1668c <close_stdout@@Base+0x1610>
   165a8:	b	1668c <close_stdout@@Base+0x1610>
   165ac:	b	1668c <close_stdout@@Base+0x1610>
   165b0:	b	16798 <close_stdout@@Base+0x171c>
   165b4:	b	167b8 <close_stdout@@Base+0x173c>
   165b8:	b	16798 <close_stdout@@Base+0x171c>
   165bc:	b	167b0 <close_stdout@@Base+0x1734>
   165c0:	ldr	r3, [sp, #160]	; 0xa0
   165c4:	cmp	r3, #2
   165c8:	beq	16e54 <close_stdout@@Base+0x1dd8>
   165cc:	cmp	r3, #3
   165d0:	bne	1668c <close_stdout@@Base+0x1610>
   165d4:	ldr	r1, [sp, #164]	; 0xa4
   165d8:	tst	r1, #4
   165dc:	beq	1668c <close_stdout@@Base+0x1610>
   165e0:	add	r3, fp, #2
   165e4:	cmp	r8, r3
   165e8:	bls	1668c <close_stdout@@Base+0x1610>
   165ec:	ldrb	r2, [r5, #1]
   165f0:	mov	r1, #1
   165f4:	cmp	r2, #63	; 0x3f
   165f8:	bne	1668c <close_stdout@@Base+0x1610>
   165fc:	ldr	r0, [sp, #32]
   16600:	ldrb	ip, [r0, r3]
   16604:	sub	r0, ip, #33	; 0x21
   16608:	uxtb	r0, r0
   1660c:	cmp	r0, #29
   16610:	bhi	1668c <close_stdout@@Base+0x1610>
   16614:	lsl	r1, r1, r0
   16618:	movw	r0, #20929	; 0x51c1
   1661c:	movt	r0, #14336	; 0x3800
   16620:	and	r0, r1, r0
   16624:	cmp	r0, #0
   16628:	beq	1668c <close_stdout@@Base+0x1610>
   1662c:	ldr	r1, [sp, #36]	; 0x24
   16630:	cmp	r1, #0
   16634:	bne	167d4 <close_stdout@@Base+0x1758>
   16638:	cmp	r9, sl
   1663c:	mov	r4, ip
   16640:	mov	fp, r3
   16644:	ldrcc	r0, [sp, #40]	; 0x28
   16648:	strbcc	r2, [r0, r9]
   1664c:	add	r2, r9, #1
   16650:	cmp	sl, r2
   16654:	ldrhi	r0, [sp, #40]	; 0x28
   16658:	movhi	r1, #34	; 0x22
   1665c:	strbhi	r1, [r0, r2]
   16660:	add	r2, r9, #2
   16664:	cmp	sl, r2
   16668:	ldrhi	r0, [sp, #40]	; 0x28
   1666c:	movhi	r1, #34	; 0x22
   16670:	strbhi	r1, [r0, r2]
   16674:	add	r2, r9, #3
   16678:	cmp	sl, r2
   1667c:	add	r9, r9, #4
   16680:	ldrhi	r0, [sp, #40]	; 0x28
   16684:	movhi	r1, #63	; 0x3f
   16688:	strbhi	r1, [r0, r2]
   1668c:	ldr	r0, [sp, #44]	; 0x2c
   16690:	cmp	r0, #0
   16694:	bne	166bc <close_stdout@@Base+0x1640>
   16698:	ldr	r1, [sp, #48]	; 0x30
   1669c:	cmp	r1, #0
   166a0:	beq	166bc <close_stdout@@Base+0x1640>
   166a4:	ubfx	r2, r4, #5, #8
   166a8:	and	r3, r4, #31
   166ac:	ldr	r2, [r1, r2, lsl #2]
   166b0:	lsr	r3, r2, r3
   166b4:	tst	r3, #1
   166b8:	bne	166c4 <close_stdout@@Base+0x1648>
   166bc:	cmp	r6, #0
   166c0:	beq	166e4 <close_stdout@@Base+0x1668>
   166c4:	ldr	r2, [sp, #36]	; 0x24
   166c8:	cmp	r2, #0
   166cc:	bne	167d4 <close_stdout@@Base+0x1758>
   166d0:	cmp	r9, sl
   166d4:	ldrcc	r0, [sp, #40]	; 0x28
   166d8:	movcc	r3, #92	; 0x5c
   166dc:	strbcc	r3, [r0, r9]
   166e0:	add	r9, r9, #1
   166e4:	add	fp, fp, #1
   166e8:	cmp	r9, sl
   166ec:	ldrcc	r1, [sp, #40]	; 0x28
   166f0:	strbcc	r4, [r1, r9]
   166f4:	cmn	r8, #1
   166f8:	add	r9, r9, #1
   166fc:	bne	16384 <close_stdout@@Base+0x1308>
   16700:	ldr	r2, [sp, #32]
   16704:	ldrb	r3, [r2, fp]
   16708:	adds	r3, r3, #0
   1670c:	movne	r3, #1
   16710:	cmp	r3, #0
   16714:	bne	16394 <close_stdout@@Base+0x1318>
   16718:	ldr	r3, [sp, #160]	; 0xa0
   1671c:	cmp	r9, #0
   16720:	cmpeq	r3, #2
   16724:	bne	16734 <close_stdout@@Base+0x16b8>
   16728:	ldr	r0, [sp, #36]	; 0x24
   1672c:	cmp	r0, #0
   16730:	bne	167d4 <close_stdout@@Base+0x1758>
   16734:	ldr	r1, [sp, #36]	; 0x24
   16738:	ldr	r2, [sp, #52]	; 0x34
   1673c:	eor	r3, r1, #1
   16740:	cmp	r2, #0
   16744:	moveq	r3, #0
   16748:	andne	r3, r3, #1
   1674c:	cmp	r3, #0
   16750:	beq	1677c <close_stdout@@Base+0x1700>
   16754:	ldrb	r3, [r2]
   16758:	cmp	r3, #0
   1675c:	beq	1677c <close_stdout@@Base+0x1700>
   16760:	ldr	r1, [sp, #40]	; 0x28
   16764:	cmp	sl, r9
   16768:	strbhi	r3, [r1, r9]
   1676c:	ldrb	r3, [r2, #1]!
   16770:	add	r9, r9, #1
   16774:	cmp	r3, #0
   16778:	bne	16764 <close_stdout@@Base+0x16e8>
   1677c:	cmp	r9, sl
   16780:	movcs	r0, r9
   16784:	ldrcc	r1, [sp, #40]	; 0x28
   16788:	movcc	r3, #0
   1678c:	movcc	r0, r9
   16790:	strbcc	r3, [r1, r9]
   16794:	b	16810 <close_stdout@@Base+0x1794>
   16798:	cmn	r8, #1
   1679c:	beq	16e64 <close_stdout@@Base+0x1de8>
   167a0:	subs	r3, r8, #1
   167a4:	movne	r3, #1
   167a8:	cmp	r3, #0
   167ac:	bne	1668c <close_stdout@@Base+0x1610>
   167b0:	cmp	fp, #0
   167b4:	bne	1668c <close_stdout@@Base+0x1610>
   167b8:	ldr	r3, [sp, #36]	; 0x24
   167bc:	ldr	r0, [sp, #160]	; 0xa0
   167c0:	cmp	r0, #2
   167c4:	movne	r3, #0
   167c8:	andeq	r3, r3, #1
   167cc:	cmp	r3, #0
   167d0:	beq	1668c <close_stdout@@Base+0x1610>
   167d4:	ldr	r2, [sp, #164]	; 0xa4
   167d8:	mov	ip, #0
   167dc:	ldr	r0, [sp, #160]	; 0xa0
   167e0:	bic	r3, r2, #2
   167e4:	ldr	r1, [sp, #72]	; 0x48
   167e8:	ldr	r2, [sp, #68]	; 0x44
   167ec:	stm	sp, {r0, r3}
   167f0:	mov	r3, r8
   167f4:	str	r1, [sp, #12]
   167f8:	mov	r1, sl
   167fc:	str	r2, [sp, #16]
   16800:	ldr	r0, [sp, #40]	; 0x28
   16804:	ldr	r2, [sp, #32]
   16808:	str	ip, [sp, #8]
   1680c:	bl	162a4 <close_stdout@@Base+0x1228>
   16810:	ldr	r1, [sp, #56]	; 0x38
   16814:	ldr	r2, [sp, #116]	; 0x74
   16818:	ldr	r3, [r1]
   1681c:	cmp	r2, r3
   16820:	bne	16f54 <close_stdout@@Base+0x1ed8>
   16824:	add	sp, sp, #124	; 0x7c
   16828:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1682c:	mov	r3, #114	; 0x72
   16830:	ldr	r2, [sp, #36]	; 0x24
   16834:	ldr	r0, [sp, #160]	; 0xa0
   16838:	cmp	r0, #2
   1683c:	movne	r2, #0
   16840:	andeq	r2, r2, #1
   16844:	cmp	r2, #0
   16848:	bne	167d4 <close_stdout@@Base+0x1758>
   1684c:	ldr	r1, [sp, #24]
   16850:	cmp	r1, #0
   16854:	beq	1668c <close_stdout@@Base+0x1610>
   16858:	mov	r4, r3
   1685c:	b	166c4 <close_stdout@@Base+0x1648>
   16860:	mov	r3, #98	; 0x62
   16864:	b	1684c <close_stdout@@Base+0x17d0>
   16868:	mov	r3, #102	; 0x66
   1686c:	b	1684c <close_stdout@@Base+0x17d0>
   16870:	mov	r3, #118	; 0x76
   16874:	b	1684c <close_stdout@@Base+0x17d0>
   16878:	mov	r3, #97	; 0x61
   1687c:	b	1684c <close_stdout@@Base+0x17d0>
   16880:	mov	r3, #110	; 0x6e
   16884:	b	16830 <close_stdout@@Base+0x17b4>
   16888:	mov	r3, #116	; 0x74
   1688c:	b	16830 <close_stdout@@Base+0x17b4>
   16890:	ldr	r2, [sp, #24]
   16894:	cmp	r2, #0
   16898:	beq	16e40 <close_stdout@@Base+0x1dc4>
   1689c:	ldr	r3, [sp, #36]	; 0x24
   168a0:	cmp	r3, #0
   168a4:	bne	167d4 <close_stdout@@Base+0x1758>
   168a8:	cmp	r9, sl
   168ac:	add	r2, r9, #1
   168b0:	ldrcc	r0, [sp, #40]	; 0x28
   168b4:	movcc	r3, #92	; 0x5c
   168b8:	strbcc	r3, [r0, r9]
   168bc:	add	r3, fp, #1
   168c0:	cmp	r8, r3
   168c4:	bls	16904 <close_stdout@@Base+0x1888>
   168c8:	ldr	r1, [sp, #32]
   168cc:	ldrb	r3, [r1, r3]
   168d0:	sub	r3, r3, #48	; 0x30
   168d4:	cmp	r3, #9
   168d8:	bhi	16904 <close_stdout@@Base+0x1888>
   168dc:	cmp	sl, r2
   168e0:	ldrhi	r0, [sp, #40]	; 0x28
   168e4:	movhi	r3, #48	; 0x30
   168e8:	strbhi	r3, [r0, r2]
   168ec:	add	r3, r9, #2
   168f0:	cmp	sl, r3
   168f4:	ldrhi	r1, [sp, #40]	; 0x28
   168f8:	movhi	r2, #48	; 0x30
   168fc:	strbhi	r2, [r1, r3]
   16900:	add	r2, r9, #3
   16904:	mov	r9, r2
   16908:	mov	r4, #48	; 0x30
   1690c:	b	16698 <close_stdout@@Base+0x161c>
   16910:	ldr	r1, [sp, #76]	; 0x4c
   16914:	cmp	r1, #0
   16918:	beq	16924 <close_stdout@@Base+0x18a8>
   1691c:	cmp	r7, #0
   16920:	bne	166e4 <close_stdout@@Base+0x1668>
   16924:	mov	r3, r4
   16928:	b	16830 <close_stdout@@Base+0x17b4>
   1692c:	ldr	r1, [sp, #160]	; 0xa0
   16930:	cmp	r1, #2
   16934:	bne	1668c <close_stdout@@Base+0x1610>
   16938:	ldr	r2, [sp, #36]	; 0x24
   1693c:	cmp	r2, #0
   16940:	bne	167d4 <close_stdout@@Base+0x1758>
   16944:	cmp	r9, sl
   16948:	ldrcc	r0, [sp, #40]	; 0x28
   1694c:	movcc	r3, #39	; 0x27
   16950:	strbcc	r3, [r0, r9]
   16954:	add	r3, r9, #1
   16958:	cmp	sl, r3
   1695c:	ldrhi	r1, [sp, #40]	; 0x28
   16960:	movhi	r2, #92	; 0x5c
   16964:	strbhi	r2, [r1, r3]
   16968:	add	r3, r9, #2
   1696c:	cmp	sl, r3
   16970:	add	r9, r9, #3
   16974:	ldrhi	r0, [sp, #40]	; 0x28
   16978:	movhi	r2, #39	; 0x27
   1697c:	strbhi	r2, [r0, r3]
   16980:	b	1668c <close_stdout@@Base+0x1610>
   16984:	ldr	r1, [sp, #64]	; 0x40
   16988:	cmp	r1, #1
   1698c:	bne	16c84 <close_stdout@@Base+0x1c08>
   16990:	bl	11760 <__ctype_b_loc@plt>
   16994:	ldr	r2, [sp, #64]	; 0x40
   16998:	sxth	r3, r4
   1699c:	str	r2, [sp, #60]	; 0x3c
   169a0:	lsl	r3, r3, #1
   169a4:	ldr	r2, [r0]
   169a8:	ldrh	r2, [r2, r3]
   169ac:	eor	r2, r2, #16384	; 0x4000
   169b0:	ubfx	r2, r2, #14, #1
   169b4:	ldr	r1, [sp, #24]
   169b8:	ands	r2, r2, r1
   169bc:	beq	1668c <close_stdout@@Base+0x1610>
   169c0:	ldr	r3, [sp, #60]	; 0x3c
   169c4:	mov	r0, #92	; 0x5c
   169c8:	ldr	r7, [sp, #36]	; 0x24
   169cc:	add	r1, r3, fp
   169d0:	str	r8, [sp, #60]	; 0x3c
   169d4:	ldr	r3, [sp, #40]	; 0x28
   169d8:	b	16a3c <close_stdout@@Base+0x19c0>
   169dc:	cmp	r7, #0
   169e0:	bne	16e7c <close_stdout@@Base+0x1e00>
   169e4:	add	ip, r9, #1
   169e8:	cmp	r9, sl
   169ec:	strbcc	r0, [r3, r9]
   169f0:	cmp	sl, ip
   169f4:	lsrhi	r8, r4, #6
   169f8:	addhi	r8, r8, #48	; 0x30
   169fc:	strbhi	r8, [r3, ip]
   16a00:	add	ip, r9, #2
   16a04:	add	r9, r9, #3
   16a08:	cmp	sl, ip
   16a0c:	ubfxhi	r8, r4, #3, #3
   16a10:	and	r4, r4, #7
   16a14:	add	r4, r4, #48	; 0x30
   16a18:	addhi	r8, r8, #48	; 0x30
   16a1c:	strbhi	r8, [r3, ip]
   16a20:	add	fp, fp, #1
   16a24:	cmp	r1, fp
   16a28:	bls	16a68 <close_stdout@@Base+0x19ec>
   16a2c:	cmp	r9, sl
   16a30:	strbcc	r4, [r3, r9]
   16a34:	ldrb	r4, [r5, #1]!
   16a38:	add	r9, r9, #1
   16a3c:	cmp	r2, #0
   16a40:	bne	169dc <close_stdout@@Base+0x1960>
   16a44:	cmp	r6, #0
   16a48:	beq	16a20 <close_stdout@@Base+0x19a4>
   16a4c:	add	fp, fp, #1
   16a50:	cmp	r9, sl
   16a54:	strbcc	r0, [r3, r9]
   16a58:	cmp	r1, fp
   16a5c:	add	r9, r9, #1
   16a60:	mov	r6, #0
   16a64:	bhi	16a2c <close_stdout@@Base+0x19b0>
   16a68:	ldr	r8, [sp, #60]	; 0x3c
   16a6c:	b	166e8 <close_stdout@@Base+0x166c>
   16a70:	ldr	r3, [sp, #36]	; 0x24
   16a74:	cmp	r3, #0
   16a78:	bne	16f7c <close_stdout@@Base+0x1f00>
   16a7c:	cmp	sl, #0
   16a80:	beq	16e94 <close_stdout@@Base+0x1e18>
   16a84:	ldr	r1, [sp, #40]	; 0x28
   16a88:	mov	r0, #1
   16a8c:	ldr	r2, [pc, #1296]	; 16fa4 <close_stdout@@Base+0x1f28>
   16a90:	mov	r3, #34	; 0x22
   16a94:	str	r0, [sp, #24]
   16a98:	mov	r9, r0
   16a9c:	add	r2, pc, r2
   16aa0:	str	r0, [sp, #28]
   16aa4:	strb	r3, [r1]
   16aa8:	str	r2, [sp, #52]	; 0x34
   16aac:	b	16358 <close_stdout@@Base+0x12dc>
   16ab0:	ldr	r3, [pc, #1264]	; 16fa8 <close_stdout@@Base+0x1f2c>
   16ab4:	mov	r2, #1
   16ab8:	mov	r0, #3
   16abc:	str	r2, [sp, #36]	; 0x24
   16ac0:	add	r3, pc, r3
   16ac4:	str	r2, [sp, #24]
   16ac8:	str	r3, [sp, #52]	; 0x34
   16acc:	mov	r9, #0
   16ad0:	str	r2, [sp, #28]
   16ad4:	str	r0, [sp, #160]	; 0xa0
   16ad8:	b	16358 <close_stdout@@Base+0x12dc>
   16adc:	mov	r0, #0
   16ae0:	mov	r1, #1
   16ae4:	str	r0, [sp, #36]	; 0x24
   16ae8:	mov	r9, r0
   16aec:	str	r1, [sp, #24]
   16af0:	str	r0, [sp, #28]
   16af4:	str	r0, [sp, #52]	; 0x34
   16af8:	b	16358 <close_stdout@@Base+0x12dc>
   16afc:	ldr	r3, [sp, #160]	; 0xa0
   16b00:	cmp	r3, #8
   16b04:	beq	16b30 <close_stdout@@Base+0x1ab4>
   16b08:	ldr	r0, [pc, #1180]	; 16fac <close_stdout@@Base+0x1f30>
   16b0c:	mov	r1, r3
   16b10:	add	r0, pc, r0
   16b14:	bl	16140 <close_stdout@@Base+0x10c4>
   16b18:	ldr	r1, [sp, #160]	; 0xa0
   16b1c:	str	r0, [sp, #72]	; 0x48
   16b20:	ldr	r0, [pc, #1160]	; 16fb0 <close_stdout@@Base+0x1f34>
   16b24:	add	r0, pc, r0
   16b28:	bl	16140 <close_stdout@@Base+0x10c4>
   16b2c:	str	r0, [sp, #68]	; 0x44
   16b30:	ldr	r0, [sp, #36]	; 0x24
   16b34:	cmp	r0, #0
   16b38:	movne	r9, #0
   16b3c:	bne	16b74 <close_stdout@@Base+0x1af8>
   16b40:	ldr	r1, [sp, #72]	; 0x48
   16b44:	ldrb	r3, [r1]
   16b48:	cmp	r3, #0
   16b4c:	beq	16f4c <close_stdout@@Base+0x1ed0>
   16b50:	mov	r2, r1
   16b54:	ldr	r1, [sp, #40]	; 0x28
   16b58:	mov	r9, r0
   16b5c:	cmp	r9, sl
   16b60:	strbcc	r3, [r1, r9]
   16b64:	ldrb	r3, [r2, #1]!
   16b68:	add	r9, r9, #1
   16b6c:	cmp	r3, #0
   16b70:	bne	16b5c <close_stdout@@Base+0x1ae0>
   16b74:	ldr	r0, [sp, #68]	; 0x44
   16b78:	str	r0, [sp, #52]	; 0x34
   16b7c:	bl	11790 <strlen@plt>
   16b80:	mov	r2, #1
   16b84:	str	r2, [sp, #24]
   16b88:	str	r0, [sp, #28]
   16b8c:	b	16358 <close_stdout@@Base+0x12dc>
   16b90:	ldr	r3, [pc, #1052]	; 16fb4 <close_stdout@@Base+0x1f38>
   16b94:	mov	r2, #0
   16b98:	mov	r1, #1
   16b9c:	mov	r0, #2
   16ba0:	add	r3, pc, r3
   16ba4:	str	r1, [sp, #36]	; 0x24
   16ba8:	str	r2, [sp, #24]
   16bac:	mov	r9, r2
   16bb0:	str	r1, [sp, #28]
   16bb4:	str	r3, [sp, #52]	; 0x34
   16bb8:	str	r0, [sp, #160]	; 0xa0
   16bbc:	b	16358 <close_stdout@@Base+0x12dc>
   16bc0:	ldr	r3, [sp, #36]	; 0x24
   16bc4:	cmp	r3, #0
   16bc8:	bne	16f58 <close_stdout@@Base+0x1edc>
   16bcc:	cmp	sl, #0
   16bd0:	beq	16eb4 <close_stdout@@Base+0x1e38>
   16bd4:	ldr	r1, [sp, #40]	; 0x28
   16bd8:	mov	r3, #39	; 0x27
   16bdc:	ldr	r2, [sp, #36]	; 0x24
   16be0:	mov	r0, #1
   16be4:	mov	r9, r0
   16be8:	str	r0, [sp, #28]
   16bec:	strb	r3, [r1]
   16bf0:	ldr	r3, [pc, #960]	; 16fb8 <close_stdout@@Base+0x1f3c>
   16bf4:	str	r2, [sp, #24]
   16bf8:	add	r3, pc, r3
   16bfc:	str	r3, [sp, #52]	; 0x34
   16c00:	b	16358 <close_stdout@@Base+0x12dc>
   16c04:	ldr	r2, [sp, #28]
   16c08:	cmp	r2, #1
   16c0c:	add	r4, fp, r2
   16c10:	movls	r3, #0
   16c14:	movhi	r3, #1
   16c18:	cmn	r8, #1
   16c1c:	movne	r3, #0
   16c20:	cmp	r3, #0
   16c24:	beq	16c34 <close_stdout@@Base+0x1bb8>
   16c28:	ldr	r0, [sp, #32]
   16c2c:	bl	11790 <strlen@plt>
   16c30:	mov	r8, r0
   16c34:	cmp	r8, r4
   16c38:	ldrcc	r3, [sp, #32]
   16c3c:	movcc	r6, #0
   16c40:	addcc	r5, r3, fp
   16c44:	bcc	163b4 <close_stdout@@Base+0x1338>
   16c48:	ldr	r0, [sp, #32]
   16c4c:	ldr	r1, [sp, #52]	; 0x34
   16c50:	add	r5, r0, fp
   16c54:	ldr	r2, [sp, #28]
   16c58:	mov	r0, r5
   16c5c:	bl	1161c <memcmp@plt>
   16c60:	cmp	r0, #0
   16c64:	bne	16c7c <close_stdout@@Base+0x1c00>
   16c68:	ldr	r1, [sp, #36]	; 0x24
   16c6c:	cmp	r1, #0
   16c70:	bne	167d4 <close_stdout@@Base+0x1758>
   16c74:	mov	r6, #1
   16c78:	b	163b4 <close_stdout@@Base+0x1338>
   16c7c:	mov	r6, #0
   16c80:	b	163b4 <close_stdout@@Base+0x1338>
   16c84:	add	r7, sp, #108	; 0x6c
   16c88:	cmn	r8, #1
   16c8c:	mov	r3, #0
   16c90:	str	r3, [sp, #108]	; 0x6c
   16c94:	str	r3, [r7, #4]
   16c98:	beq	16e84 <close_stdout@@Base+0x1e08>
   16c9c:	mov	r1, #0
   16ca0:	ldr	r0, [sp, #32]
   16ca4:	mov	ip, #1
   16ca8:	str	r9, [sp, #88]	; 0x58
   16cac:	str	r6, [sp, #96]	; 0x60
   16cb0:	mov	r9, r1
   16cb4:	str	r5, [sp, #100]	; 0x64
   16cb8:	mov	r6, ip
   16cbc:	mov	r5, r7
   16cc0:	add	r3, sp, #104	; 0x68
   16cc4:	sub	r0, r0, #1
   16cc8:	str	r3, [sp, #80]	; 0x50
   16ccc:	str	r0, [sp, #84]	; 0x54
   16cd0:	str	r1, [sp, #60]	; 0x3c
   16cd4:	str	r4, [sp, #92]	; 0x5c
   16cd8:	ldr	r2, [sp, #32]
   16cdc:	add	r7, r9, fp
   16ce0:	add	r0, sp, #104	; 0x68
   16ce4:	mov	r3, r5
   16ce8:	add	r4, r2, r7
   16cec:	rsb	r2, r7, r8
   16cf0:	mov	r1, r4
   16cf4:	bl	116dc <mbrtowc@plt>
   16cf8:	subs	r2, r0, #0
   16cfc:	beq	16e08 <close_stdout@@Base+0x1d8c>
   16d00:	cmn	r2, #1
   16d04:	beq	16f30 <close_stdout@@Base+0x1eb4>
   16d08:	cmn	r2, #2
   16d0c:	beq	16ed4 <close_stdout@@Base+0x1e58>
   16d10:	ldr	r3, [sp, #36]	; 0x24
   16d14:	ldr	r0, [sp, #160]	; 0xa0
   16d18:	cmp	r0, #2
   16d1c:	movne	r3, #0
   16d20:	andeq	r3, r3, #1
   16d24:	cmp	r3, #0
   16d28:	beq	16de4 <close_stdout@@Base+0x1d68>
   16d2c:	cmp	r2, #1
   16d30:	beq	16de4 <close_stdout@@Base+0x1d68>
   16d34:	ldr	r1, [sp, #84]	; 0x54
   16d38:	add	r3, r1, r2
   16d3c:	add	r7, r3, r7
   16d40:	ldrb	r3, [r4, #1]!
   16d44:	sub	r3, r3, #91	; 0x5b
   16d48:	cmp	r3, #33	; 0x21
   16d4c:	addls	pc, pc, r3, lsl #2
   16d50:	b	16ddc <close_stdout@@Base+0x1d60>
   16d54:	b	167d4 <close_stdout@@Base+0x1758>
   16d58:	b	167d4 <close_stdout@@Base+0x1758>
   16d5c:	b	16ddc <close_stdout@@Base+0x1d60>
   16d60:	b	167d4 <close_stdout@@Base+0x1758>
   16d64:	b	16ddc <close_stdout@@Base+0x1d60>
   16d68:	b	167d4 <close_stdout@@Base+0x1758>
   16d6c:	b	16ddc <close_stdout@@Base+0x1d60>
   16d70:	b	16ddc <close_stdout@@Base+0x1d60>
   16d74:	b	16ddc <close_stdout@@Base+0x1d60>
   16d78:	b	16ddc <close_stdout@@Base+0x1d60>
   16d7c:	b	16ddc <close_stdout@@Base+0x1d60>
   16d80:	b	16ddc <close_stdout@@Base+0x1d60>
   16d84:	b	16ddc <close_stdout@@Base+0x1d60>
   16d88:	b	16ddc <close_stdout@@Base+0x1d60>
   16d8c:	b	16ddc <close_stdout@@Base+0x1d60>
   16d90:	b	16ddc <close_stdout@@Base+0x1d60>
   16d94:	b	16ddc <close_stdout@@Base+0x1d60>
   16d98:	b	16ddc <close_stdout@@Base+0x1d60>
   16d9c:	b	16ddc <close_stdout@@Base+0x1d60>
   16da0:	b	16ddc <close_stdout@@Base+0x1d60>
   16da4:	b	16ddc <close_stdout@@Base+0x1d60>
   16da8:	b	16ddc <close_stdout@@Base+0x1d60>
   16dac:	b	16ddc <close_stdout@@Base+0x1d60>
   16db0:	b	16ddc <close_stdout@@Base+0x1d60>
   16db4:	b	16ddc <close_stdout@@Base+0x1d60>
   16db8:	b	16ddc <close_stdout@@Base+0x1d60>
   16dbc:	b	16ddc <close_stdout@@Base+0x1d60>
   16dc0:	b	16ddc <close_stdout@@Base+0x1d60>
   16dc4:	b	16ddc <close_stdout@@Base+0x1d60>
   16dc8:	b	16ddc <close_stdout@@Base+0x1d60>
   16dcc:	b	16ddc <close_stdout@@Base+0x1d60>
   16dd0:	b	16ddc <close_stdout@@Base+0x1d60>
   16dd4:	b	16ddc <close_stdout@@Base+0x1d60>
   16dd8:	b	167d4 <close_stdout@@Base+0x1758>
   16ddc:	cmp	r4, r7
   16de0:	bne	16d40 <close_stdout@@Base+0x1cc4>
   16de4:	ldr	r0, [sp, #104]	; 0x68
   16de8:	add	r9, r9, r2
   16dec:	bl	11670 <iswprint@plt>
   16df0:	cmp	r0, #0
   16df4:	mov	r0, r5
   16df8:	moveq	r6, #0
   16dfc:	bl	115f8 <mbsinit@plt>
   16e00:	cmp	r0, #0
   16e04:	beq	16cd8 <close_stdout@@Base+0x1c5c>
   16e08:	mov	ip, r6
   16e0c:	eor	r2, ip, #1
   16e10:	str	r9, [sp, #60]	; 0x3c
   16e14:	ldr	r4, [sp, #92]	; 0x5c
   16e18:	uxtb	r2, r2
   16e1c:	ldr	r9, [sp, #88]	; 0x58
   16e20:	ldr	r6, [sp, #96]	; 0x60
   16e24:	ldr	r5, [sp, #100]	; 0x64
   16e28:	ldr	r3, [sp, #60]	; 0x3c
   16e2c:	cmp	r3, #1
   16e30:	bls	169b4 <close_stdout@@Base+0x1938>
   16e34:	ldr	r0, [sp, #24]
   16e38:	and	r2, r2, r0
   16e3c:	b	169c0 <close_stdout@@Base+0x1944>
   16e40:	ldr	r2, [sp, #164]	; 0xa4
   16e44:	tst	r2, #1
   16e48:	addne	fp, fp, #1
   16e4c:	bne	1637c <close_stdout@@Base+0x1300>
   16e50:	b	1668c <close_stdout@@Base+0x1610>
   16e54:	ldr	r0, [sp, #36]	; 0x24
   16e58:	cmp	r0, #0
   16e5c:	beq	1668c <close_stdout@@Base+0x1610>
   16e60:	b	167d4 <close_stdout@@Base+0x1758>
   16e64:	ldr	r2, [sp, #32]
   16e68:	ldrb	r3, [r2, #1]
   16e6c:	adds	r3, r3, #0
   16e70:	movne	r3, #1
   16e74:	b	167a8 <close_stdout@@Base+0x172c>
   16e78:	bl	11934 <abort@plt>
   16e7c:	ldr	r8, [sp, #60]	; 0x3c
   16e80:	b	167d4 <close_stdout@@Base+0x1758>
   16e84:	ldr	r0, [sp, #32]
   16e88:	bl	11790 <strlen@plt>
   16e8c:	mov	r8, r0
   16e90:	b	16c9c <close_stdout@@Base+0x1c20>
   16e94:	ldr	r2, [pc, #288]	; 16fbc <close_stdout@@Base+0x1f40>
   16e98:	mov	r1, #1
   16e9c:	mov	r9, r1
   16ea0:	str	r1, [sp, #24]
   16ea4:	add	r2, pc, r2
   16ea8:	str	r1, [sp, #28]
   16eac:	str	r2, [sp, #52]	; 0x34
   16eb0:	b	16358 <close_stdout@@Base+0x12dc>
   16eb4:	ldr	r2, [pc, #260]	; 16fc0 <close_stdout@@Base+0x1f44>
   16eb8:	mov	r3, #1
   16ebc:	mov	r9, r3
   16ec0:	str	r3, [sp, #28]
   16ec4:	add	r2, pc, r2
   16ec8:	str	sl, [sp, #24]
   16ecc:	str	r2, [sp, #52]	; 0x34
   16ed0:	b	16358 <close_stdout@@Base+0x12dc>
   16ed4:	cmp	r8, r7
   16ed8:	str	r9, [sp, #60]	; 0x3c
   16edc:	mov	ip, r4
   16ee0:	ldr	r6, [sp, #96]	; 0x60
   16ee4:	ldr	r9, [sp, #88]	; 0x58
   16ee8:	ldr	r4, [sp, #92]	; 0x5c
   16eec:	ldr	r5, [sp, #100]	; 0x64
   16ef0:	bls	16f28 <close_stdout@@Base+0x1eac>
   16ef4:	ldrb	r3, [ip]
   16ef8:	cmp	r3, #0
   16efc:	beq	16f28 <close_stdout@@Base+0x1eac>
   16f00:	ldr	r3, [sp, #60]	; 0x3c
   16f04:	b	16f14 <close_stdout@@Base+0x1e98>
   16f08:	ldrb	r2, [r5, r3]
   16f0c:	cmp	r2, #0
   16f10:	beq	16f24 <close_stdout@@Base+0x1ea8>
   16f14:	add	r3, r3, #1
   16f18:	add	r2, fp, r3
   16f1c:	cmp	r8, r2
   16f20:	bhi	16f08 <close_stdout@@Base+0x1e8c>
   16f24:	str	r3, [sp, #60]	; 0x3c
   16f28:	mov	r2, #1
   16f2c:	b	16e28 <close_stdout@@Base+0x1dac>
   16f30:	str	r9, [sp, #60]	; 0x3c
   16f34:	mov	r2, #1
   16f38:	ldr	r4, [sp, #92]	; 0x5c
   16f3c:	ldr	r6, [sp, #96]	; 0x60
   16f40:	ldr	r9, [sp, #88]	; 0x58
   16f44:	ldr	r5, [sp, #100]	; 0x64
   16f48:	b	16e28 <close_stdout@@Base+0x1dac>
   16f4c:	ldr	r9, [sp, #36]	; 0x24
   16f50:	b	16b74 <close_stdout@@Base+0x1af8>
   16f54:	bl	11634 <__stack_chk_fail@plt>
   16f58:	ldr	r1, [pc, #100]	; 16fc4 <close_stdout@@Base+0x1f48>
   16f5c:	mov	r3, #0
   16f60:	mov	r0, #1
   16f64:	str	r3, [sp, #24]
   16f68:	add	r1, pc, r1
   16f6c:	str	r0, [sp, #28]
   16f70:	mov	r9, r3
   16f74:	str	r1, [sp, #52]	; 0x34
   16f78:	b	16358 <close_stdout@@Base+0x12dc>
   16f7c:	ldr	r0, [pc, #68]	; 16fc8 <close_stdout@@Base+0x1f4c>
   16f80:	mov	r3, #1
   16f84:	mov	r9, #0
   16f88:	str	r3, [sp, #24]
   16f8c:	add	r0, pc, r0
   16f90:	str	r3, [sp, #28]
   16f94:	str	r0, [sp, #52]	; 0x34
   16f98:	b	16358 <close_stdout@@Base+0x12dc>
   16f9c:	andeq	r8, r1, r8, lsr sp
   16fa0:	andeq	r0, r0, ip, ror r1
   16fa4:	andeq	r6, r0, ip, ror r4
   16fa8:	andeq	r6, r0, r8, asr r4
   16fac:			; <UNDEFINED> instruction: 0x000071bc
   16fb0:	muleq	r0, ip, r1
   16fb4:	andeq	r7, r0, r0, lsr #2
   16fb8:	andeq	r7, r0, r8, asr #1
   16fbc:	andeq	r6, r0, r4, ror r0
   16fc0:	strdeq	r6, [r0], -ip
   16fc4:	andeq	r6, r0, r8, asr sp
   16fc8:	andeq	r5, r0, ip, lsl #31
   16fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fd0:	sub	sp, sp, #44	; 0x2c
   16fd4:	mov	r6, r0
   16fd8:	mov	r9, r1
   16fdc:	mov	sl, r2
   16fe0:	mov	r4, r3
   16fe4:	bl	117f0 <__errno_location@plt>
   16fe8:	ldr	fp, [pc, #412]	; 1718c <close_stdout@@Base+0x2110>
   16fec:	cmp	r6, #0
   16ff0:	add	fp, pc, fp
   16ff4:	ldr	r5, [fp]
   16ff8:	ldr	r1, [r0]
   16ffc:	mov	r8, r0
   17000:	str	r1, [sp, #36]	; 0x24
   17004:	blt	17184 <close_stdout@@Base+0x2108>
   17008:	ldr	r3, [pc, #384]	; 17190 <close_stdout@@Base+0x2114>
   1700c:	add	r3, pc, r3
   17010:	ldr	r3, [r3]
   17014:	cmp	r6, r3
   17018:	bcc	1706c <close_stdout@@Base+0x1ff0>
   1701c:	add	r7, r6, #1
   17020:	cmn	r7, #-536870911	; 0xe0000001
   17024:	bhi	17188 <close_stdout@@Base+0x210c>
   17028:	add	r3, fp, #4
   1702c:	cmp	r5, r3
   17030:	beq	1715c <close_stdout@@Base+0x20e0>
   17034:	mov	r0, r5
   17038:	lsl	r1, r7, #3
   1703c:	bl	18540 <close_stdout@@Base+0x34c4>
   17040:	mov	r5, r0
   17044:	str	r0, [fp]
   17048:	ldr	fp, [pc, #324]	; 17194 <close_stdout@@Base+0x2118>
   1704c:	mov	r1, #0
   17050:	add	fp, pc, fp
   17054:	ldr	r0, [fp]
   17058:	rsb	r2, r0, r7
   1705c:	add	r0, r5, r0, lsl #3
   17060:	lsl	r2, r2, #3
   17064:	bl	1182c <memset@plt>
   17068:	str	r7, [fp]
   1706c:	add	r2, r4, #8
   17070:	str	r2, [sp, #32]
   17074:	ldr	r1, [r4]
   17078:	add	fp, r5, r6, lsl #3
   1707c:	ldr	lr, [sp, #32]
   17080:	mov	r2, r9
   17084:	ldr	r3, [r4, #4]
   17088:	ldr	ip, [r5, r6, lsl #3]
   1708c:	ldr	r7, [fp, #4]
   17090:	orr	r3, r3, #1
   17094:	str	r1, [sp]
   17098:	str	r3, [sp, #4]
   1709c:	mov	r1, ip
   170a0:	str	lr, [sp, #8]
   170a4:	mov	r0, r7
   170a8:	ldr	lr, [r4, #40]	; 0x28
   170ac:	str	r3, [sp, #28]
   170b0:	mov	r3, sl
   170b4:	str	lr, [sp, #12]
   170b8:	ldr	lr, [r4, #44]	; 0x2c
   170bc:	str	ip, [sp, #24]
   170c0:	str	lr, [sp, #16]
   170c4:	bl	162a4 <close_stdout@@Base+0x1228>
   170c8:	ldr	ip, [sp, #24]
   170cc:	cmp	ip, r0
   170d0:	bhi	17148 <close_stdout@@Base+0x20cc>
   170d4:	ldr	r3, [pc, #188]	; 17198 <close_stdout@@Base+0x211c>
   170d8:	add	r1, r0, #1
   170dc:	str	r1, [r5, r6, lsl #3]
   170e0:	add	r3, pc, r3
   170e4:	cmp	r7, r3
   170e8:	beq	170fc <close_stdout@@Base+0x2080>
   170ec:	mov	r0, r7
   170f0:	str	r1, [sp, #24]
   170f4:	bl	115c8 <free@plt>
   170f8:	ldr	r1, [sp, #24]
   170fc:	mov	r0, r1
   17100:	str	r1, [sp, #24]
   17104:	bl	184e8 <close_stdout@@Base+0x346c>
   17108:	ldr	r3, [sp, #28]
   1710c:	ldr	lr, [sp, #32]
   17110:	mov	r2, r9
   17114:	str	r0, [fp, #4]
   17118:	mov	r7, r0
   1711c:	ldr	ip, [r4]
   17120:	str	r3, [sp, #4]
   17124:	mov	r3, sl
   17128:	str	lr, [sp, #8]
   1712c:	str	ip, [sp]
   17130:	ldr	ip, [r4, #40]	; 0x28
   17134:	ldr	r1, [sp, #24]
   17138:	str	ip, [sp, #12]
   1713c:	ldr	ip, [r4, #44]	; 0x2c
   17140:	str	ip, [sp, #16]
   17144:	bl	162a4 <close_stdout@@Base+0x1228>
   17148:	ldr	r1, [sp, #36]	; 0x24
   1714c:	mov	r0, r7
   17150:	str	r1, [r8]
   17154:	add	sp, sp, #44	; 0x2c
   17158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1715c:	lsl	r1, r7, #3
   17160:	mov	r0, #0
   17164:	str	r3, [sp, #24]
   17168:	bl	18540 <close_stdout@@Base+0x34c4>
   1716c:	ldr	r3, [sp, #24]
   17170:	mov	r5, r0
   17174:	ldm	r3, {r0, r1}
   17178:	str	r5, [fp]
   1717c:	stm	r5, {r0, r1}
   17180:	b	17048 <close_stdout@@Base+0x1fcc>
   17184:	bl	11934 <abort@plt>
   17188:	bl	186fc <close_stdout@@Base+0x3680>
   1718c:	andeq	r8, r1, r8, lsl #4
   17190:			; <UNDEFINED> instruction: 0x000181b8
   17194:	andeq	r8, r1, r4, ror r1
   17198:	muleq	r1, r0, r4
   1719c:	push	{r4, r5, r6, lr}
   171a0:	mov	r5, r0
   171a4:	bl	117f0 <__errno_location@plt>
   171a8:	cmp	r5, #0
   171ac:	mov	r1, #48	; 0x30
   171b0:	mov	r4, r0
   171b4:	ldr	r0, [pc, #24]	; 171d4 <close_stdout@@Base+0x2158>
   171b8:	ldr	r6, [r4]
   171bc:	add	r0, pc, r0
   171c0:	add	r0, r0, #256	; 0x100
   171c4:	movne	r0, r5
   171c8:	bl	186bc <close_stdout@@Base+0x3640>
   171cc:	str	r6, [r4]
   171d0:	pop	{r4, r5, r6, pc}
   171d4:			; <UNDEFINED> instruction: 0x000183b4
   171d8:	cmp	r0, #0
   171dc:	beq	171e8 <close_stdout@@Base+0x216c>
   171e0:	ldr	r0, [r0]
   171e4:	bx	lr
   171e8:	ldr	r0, [pc, #12]	; 171fc <close_stdout@@Base+0x2180>
   171ec:	add	r0, pc, r0
   171f0:	add	r0, r0, #256	; 0x100
   171f4:	ldr	r0, [r0]
   171f8:	bx	lr
   171fc:	andeq	r8, r1, r4, lsl #7
   17200:	cmp	r0, #0
   17204:	beq	17210 <close_stdout@@Base+0x2194>
   17208:	str	r1, [r0]
   1720c:	bx	lr
   17210:	ldr	r0, [pc, #12]	; 17224 <close_stdout@@Base+0x21a8>
   17214:	add	r0, pc, r0
   17218:	add	r0, r0, #256	; 0x100
   1721c:	str	r1, [r0]
   17220:	bx	lr
   17224:	andeq	r8, r1, ip, asr r3
   17228:	cmp	r0, #0
   1722c:	movne	r3, r0
   17230:	beq	17260 <close_stdout@@Base+0x21e4>
   17234:	lsr	ip, r1, #5
   17238:	and	r1, r1, #31
   1723c:	add	r3, r3, ip, lsl #2
   17240:	ldr	ip, [r3, #8]
   17244:	lsr	r0, ip, r1
   17248:	eor	r2, r0, r2
   1724c:	and	r0, r0, #1
   17250:	and	r2, r2, #1
   17254:	eor	ip, ip, r2, lsl r1
   17258:	str	ip, [r3, #8]
   1725c:	bx	lr
   17260:	ldr	r3, [pc, #8]	; 17270 <close_stdout@@Base+0x21f4>
   17264:	add	r3, pc, r3
   17268:	add	r3, r3, #256	; 0x100
   1726c:	b	17234 <close_stdout@@Base+0x21b8>
   17270:	andeq	r8, r1, ip, lsl #6
   17274:	subs	r3, r0, #0
   17278:	beq	17288 <close_stdout@@Base+0x220c>
   1727c:	ldr	r0, [r3, #4]
   17280:	str	r1, [r3, #4]
   17284:	bx	lr
   17288:	ldr	r3, [pc, #8]	; 17298 <close_stdout@@Base+0x221c>
   1728c:	add	r3, pc, r3
   17290:	add	r3, r3, #256	; 0x100
   17294:	b	1727c <close_stdout@@Base+0x2200>
   17298:	andeq	r8, r1, r4, ror #5
   1729c:	cmp	r0, #0
   172a0:	push	{r3, lr}
   172a4:	beq	172c8 <close_stdout@@Base+0x224c>
   172a8:	cmp	r2, #0
   172ac:	cmpne	r1, #0
   172b0:	mov	r3, #8
   172b4:	strne	r1, [r0, #40]	; 0x28
   172b8:	str	r3, [r0]
   172bc:	strne	r2, [r0, #44]	; 0x2c
   172c0:	popne	{r3, pc}
   172c4:	bl	11934 <abort@plt>
   172c8:	ldr	r0, [pc, #8]	; 172d8 <close_stdout@@Base+0x225c>
   172cc:	add	r0, pc, r0
   172d0:	add	r0, r0, #256	; 0x100
   172d4:	b	172a8 <close_stdout@@Base+0x222c>
   172d8:	andeq	r8, r1, r4, lsr #5
   172dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   172e0:	sub	sp, sp, #24
   172e4:	mov	r7, r0
   172e8:	mov	sl, r1
   172ec:	ldr	r4, [sp, #56]	; 0x38
   172f0:	mov	r9, r2
   172f4:	mov	r8, r3
   172f8:	cmp	r4, #0
   172fc:	beq	17350 <close_stdout@@Base+0x22d4>
   17300:	bl	117f0 <__errno_location@plt>
   17304:	ldr	r3, [r4]
   17308:	add	lr, r4, #8
   1730c:	mov	r1, sl
   17310:	mov	r2, r9
   17314:	ldr	r6, [r0]
   17318:	mov	r5, r0
   1731c:	str	r3, [sp]
   17320:	mov	r0, r7
   17324:	ldr	ip, [r4, #4]
   17328:	mov	r3, r8
   1732c:	stmib	sp, {ip, lr}
   17330:	ldr	ip, [r4, #40]	; 0x28
   17334:	str	ip, [sp, #12]
   17338:	ldr	ip, [r4, #44]	; 0x2c
   1733c:	str	ip, [sp, #16]
   17340:	bl	162a4 <close_stdout@@Base+0x1228>
   17344:	str	r6, [r5]
   17348:	add	sp, sp, #24
   1734c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17350:	ldr	r4, [pc, #8]	; 17360 <close_stdout@@Base+0x22e4>
   17354:	add	r4, pc, r4
   17358:	add	r4, r4, #256	; 0x100
   1735c:	b	17300 <close_stdout@@Base+0x2284>
   17360:	andeq	r8, r1, ip, lsl r2
   17364:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17368:	subs	r4, r3, #0
   1736c:	sub	sp, sp, #36	; 0x24
   17370:	mov	r7, r0
   17374:	mov	r6, r1
   17378:	mov	r5, r2
   1737c:	beq	17438 <close_stdout@@Base+0x23bc>
   17380:	bl	117f0 <__errno_location@plt>
   17384:	ldr	r3, [r4]
   17388:	ldr	sl, [r4, #4]
   1738c:	add	r9, r4, #8
   17390:	mov	r8, r0
   17394:	mov	r0, #0
   17398:	ldr	r2, [r8]
   1739c:	cmp	r5, r0
   173a0:	orreq	sl, sl, #1
   173a4:	str	r9, [sp, #8]
   173a8:	mov	r1, r0
   173ac:	stm	sp, {r3, sl}
   173b0:	mov	r3, r6
   173b4:	ldr	ip, [r4, #40]	; 0x28
   173b8:	str	r2, [sp, #28]
   173bc:	mov	r2, r7
   173c0:	str	ip, [sp, #12]
   173c4:	ldr	ip, [r4, #44]	; 0x2c
   173c8:	str	ip, [sp, #16]
   173cc:	bl	162a4 <close_stdout@@Base+0x1228>
   173d0:	add	r1, r0, #1
   173d4:	mov	fp, r0
   173d8:	str	r1, [sp, #24]
   173dc:	mov	r0, r1
   173e0:	bl	184e8 <close_stdout@@Base+0x346c>
   173e4:	ldr	lr, [r4]
   173e8:	str	sl, [sp, #4]
   173ec:	mov	r3, r6
   173f0:	str	r9, [sp, #8]
   173f4:	mov	r2, r7
   173f8:	str	lr, [sp]
   173fc:	ldr	lr, [r4, #40]	; 0x28
   17400:	ldr	r1, [sp, #24]
   17404:	str	lr, [sp, #12]
   17408:	ldr	lr, [r4, #44]	; 0x2c
   1740c:	str	lr, [sp, #16]
   17410:	str	r0, [sp, #24]
   17414:	bl	162a4 <close_stdout@@Base+0x1228>
   17418:	ldr	r3, [sp, #28]
   1741c:	cmp	r5, #0
   17420:	str	r3, [r8]
   17424:	ldr	ip, [sp, #24]
   17428:	strne	fp, [r5]
   1742c:	mov	r0, ip
   17430:	add	sp, sp, #36	; 0x24
   17434:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17438:	ldr	r4, [pc, #8]	; 17448 <close_stdout@@Base+0x23cc>
   1743c:	add	r4, pc, r4
   17440:	add	r4, r4, #256	; 0x100
   17444:	b	17380 <close_stdout@@Base+0x2304>
   17448:	andeq	r8, r1, r4, lsr r1
   1744c:	mov	r3, r2
   17450:	mov	r2, #0
   17454:	b	17364 <close_stdout@@Base+0x22e8>
   17458:	ldr	r2, [pc, #152]	; 174f8 <close_stdout@@Base+0x247c>
   1745c:	push	{r3, r4, r5, r6, r7, lr}
   17460:	add	r2, pc, r2
   17464:	ldr	r3, [pc, #144]	; 174fc <close_stdout@@Base+0x2480>
   17468:	ldr	r6, [r2]
   1746c:	add	r3, pc, r3
   17470:	cmp	r6, #1
   17474:	ldr	r7, [r3]
   17478:	movhi	r4, #1
   1747c:	movhi	r5, r7
   17480:	bls	1749c <close_stdout@@Base+0x2420>
   17484:	ldr	r0, [r5, #12]
   17488:	add	r4, r4, #1
   1748c:	bl	115c8 <free@plt>
   17490:	cmp	r4, r6
   17494:	add	r5, r5, #8
   17498:	bne	17484 <close_stdout@@Base+0x2408>
   1749c:	ldr	r4, [pc, #92]	; 17500 <close_stdout@@Base+0x2484>
   174a0:	ldr	r0, [r7, #4]
   174a4:	add	r4, pc, r4
   174a8:	cmp	r0, r4
   174ac:	beq	174c4 <close_stdout@@Base+0x2448>
   174b0:	bl	115c8 <free@plt>
   174b4:	ldr	r3, [pc, #72]	; 17504 <close_stdout@@Base+0x2488>
   174b8:	mov	r2, #256	; 0x100
   174bc:	add	r3, pc, r3
   174c0:	stmib	r3, {r2, r4}
   174c4:	ldr	r4, [pc, #60]	; 17508 <close_stdout@@Base+0x248c>
   174c8:	add	r4, pc, r4
   174cc:	add	r5, r4, #4
   174d0:	cmp	r7, r5
   174d4:	beq	174e4 <close_stdout@@Base+0x2468>
   174d8:	mov	r0, r7
   174dc:	bl	115c8 <free@plt>
   174e0:	str	r5, [r4]
   174e4:	ldr	r3, [pc, #32]	; 1750c <close_stdout@@Base+0x2490>
   174e8:	mov	r2, #1
   174ec:	add	r3, pc, r3
   174f0:	str	r2, [r3]
   174f4:	pop	{r3, r4, r5, r6, r7, pc}
   174f8:	andeq	r7, r1, r4, ror #26
   174fc:	andeq	r7, r1, ip, lsl #27
   17500:	andeq	r8, r1, ip, asr #1
   17504:	andeq	r7, r1, ip, lsr sp
   17508:	andeq	r7, r1, r0, lsr sp
   1750c:	ldrdeq	r7, [r1], -r8
   17510:	ldr	r3, [pc, #12]	; 17524 <close_stdout@@Base+0x24a8>
   17514:	mvn	r2, #0
   17518:	add	r3, pc, r3
   1751c:	add	r3, r3, #256	; 0x100
   17520:	b	16fcc <close_stdout@@Base+0x1f50>
   17524:	andeq	r8, r1, r8, asr r0
   17528:	ldr	r3, [pc, #8]	; 17538 <close_stdout@@Base+0x24bc>
   1752c:	add	r3, pc, r3
   17530:	add	r3, r3, #256	; 0x100
   17534:	b	16fcc <close_stdout@@Base+0x1f50>
   17538:	andeq	r8, r1, r4, asr #32
   1753c:	mov	r1, r0
   17540:	mov	r0, #0
   17544:	b	17510 <close_stdout@@Base+0x2494>
   17548:	mov	r2, r1
   1754c:	mov	r1, r0
   17550:	mov	r0, #0
   17554:	b	17528 <close_stdout@@Base+0x24ac>
   17558:	ldr	r3, [pc, #92]	; 175bc <close_stdout@@Base+0x2540>
   1755c:	ldr	ip, [pc, #92]	; 175c0 <close_stdout@@Base+0x2544>
   17560:	add	r3, pc, r3
   17564:	push	{r4, r5, r6, r7, lr}
   17568:	sub	sp, sp, #60	; 0x3c
   1756c:	ldr	r4, [r3, ip]
   17570:	add	r5, sp, #4
   17574:	mov	r7, r2
   17578:	mov	r6, r0
   1757c:	mov	r0, r5
   17580:	ldr	r3, [r4]
   17584:	str	r3, [sp, #52]	; 0x34
   17588:	bl	160ec <close_stdout@@Base+0x1070>
   1758c:	mov	r3, r5
   17590:	mvn	r2, #0
   17594:	mov	r0, r6
   17598:	mov	r1, r7
   1759c:	bl	16fcc <close_stdout@@Base+0x1f50>
   175a0:	ldr	r2, [sp, #52]	; 0x34
   175a4:	ldr	r3, [r4]
   175a8:	cmp	r2, r3
   175ac:	bne	175b8 <close_stdout@@Base+0x253c>
   175b0:	add	sp, sp, #60	; 0x3c
   175b4:	pop	{r4, r5, r6, r7, pc}
   175b8:	bl	11634 <__stack_chk_fail@plt>
   175bc:	muleq	r1, r8, sl
   175c0:	andeq	r0, r0, ip, ror r1
   175c4:	ldr	ip, [pc, #96]	; 1762c <close_stdout@@Base+0x25b0>
   175c8:	push	{r4, r5, r6, r7, r8, lr}
   175cc:	add	ip, pc, ip
   175d0:	ldr	lr, [pc, #88]	; 17630 <close_stdout@@Base+0x25b4>
   175d4:	sub	sp, sp, #56	; 0x38
   175d8:	mov	r8, r3
   175dc:	add	r5, sp, #4
   175e0:	mov	r7, r2
   175e4:	mov	r6, r0
   175e8:	ldr	r4, [ip, lr]
   175ec:	mov	r0, r5
   175f0:	ldr	r3, [r4]
   175f4:	str	r3, [sp, #52]	; 0x34
   175f8:	bl	160ec <close_stdout@@Base+0x1070>
   175fc:	mov	r2, r8
   17600:	mov	r3, r5
   17604:	mov	r0, r6
   17608:	mov	r1, r7
   1760c:	bl	16fcc <close_stdout@@Base+0x1f50>
   17610:	ldr	r2, [sp, #52]	; 0x34
   17614:	ldr	r3, [r4]
   17618:	cmp	r2, r3
   1761c:	bne	17628 <close_stdout@@Base+0x25ac>
   17620:	add	sp, sp, #56	; 0x38
   17624:	pop	{r4, r5, r6, r7, r8, pc}
   17628:	bl	11634 <__stack_chk_fail@plt>
   1762c:	andeq	r7, r1, ip, lsr #20
   17630:	andeq	r0, r0, ip, ror r1
   17634:	mov	r2, r1
   17638:	mov	r1, r0
   1763c:	mov	r0, #0
   17640:	b	17558 <close_stdout@@Base+0x24dc>
   17644:	mov	ip, r1
   17648:	mov	r3, r2
   1764c:	mov	r1, r0
   17650:	mov	r2, ip
   17654:	mov	r0, #0
   17658:	b	175c4 <close_stdout@@Base+0x2548>
   1765c:	push	{r4, r5, r6, r7, r8, lr}
   17660:	mov	r5, r2
   17664:	ldr	lr, [pc, #136]	; 176f4 <close_stdout@@Base+0x2678>
   17668:	mov	r7, r0
   1766c:	mov	r6, r1
   17670:	ldr	r4, [pc, #128]	; 176f8 <close_stdout@@Base+0x267c>
   17674:	add	lr, pc, lr
   17678:	sub	sp, sp, #56	; 0x38
   1767c:	add	lr, lr, #256	; 0x100
   17680:	ldr	r8, [pc, #116]	; 176fc <close_stdout@@Base+0x2680>
   17684:	add	r4, pc, r4
   17688:	add	ip, sp, #4
   1768c:	ldm	lr!, {r0, r1, r2, r3}
   17690:	ldr	r4, [r4, r8]
   17694:	stmia	ip!, {r0, r1, r2, r3}
   17698:	ldm	lr!, {r0, r1, r2, r3}
   1769c:	ldr	r8, [r4]
   176a0:	stmia	ip!, {r0, r1, r2, r3}
   176a4:	ldm	lr, {r0, r1, r2, r3}
   176a8:	str	r8, [sp, #52]	; 0x34
   176ac:	stm	ip, {r0, r1, r2, r3}
   176b0:	mov	r1, r5
   176b4:	add	r5, sp, #4
   176b8:	mov	r2, #1
   176bc:	mov	r0, r5
   176c0:	bl	17228 <close_stdout@@Base+0x21ac>
   176c4:	mov	r2, r6
   176c8:	mov	r3, r5
   176cc:	mov	r1, r7
   176d0:	mov	r0, #0
   176d4:	bl	16fcc <close_stdout@@Base+0x1f50>
   176d8:	ldr	r2, [sp, #52]	; 0x34
   176dc:	ldr	r3, [r4]
   176e0:	cmp	r2, r3
   176e4:	bne	176f0 <close_stdout@@Base+0x2674>
   176e8:	add	sp, sp, #56	; 0x38
   176ec:	pop	{r4, r5, r6, r7, r8, pc}
   176f0:	bl	11634 <__stack_chk_fail@plt>
   176f4:	strdeq	r7, [r1], -ip
   176f8:	andeq	r7, r1, r4, ror r9
   176fc:	andeq	r0, r0, ip, ror r1
   17700:	mov	r2, r1
   17704:	mvn	r1, #0
   17708:	b	1765c <close_stdout@@Base+0x25e0>
   1770c:	mov	r1, #58	; 0x3a
   17710:	b	17700 <close_stdout@@Base+0x2684>
   17714:	mov	r2, #58	; 0x3a
   17718:	b	1765c <close_stdout@@Base+0x25e0>
   1771c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17720:	mov	r5, r2
   17724:	ldr	lr, [pc, #144]	; 177bc <close_stdout@@Base+0x2740>
   17728:	mov	r8, r0
   1772c:	mov	r9, r1
   17730:	mov	r7, r3
   17734:	add	lr, pc, lr
   17738:	ldr	r4, [pc, #128]	; 177c0 <close_stdout@@Base+0x2744>
   1773c:	add	lr, lr, #256	; 0x100
   17740:	sub	sp, sp, #56	; 0x38
   17744:	ldr	sl, [pc, #120]	; 177c4 <close_stdout@@Base+0x2748>
   17748:	add	r4, pc, r4
   1774c:	ldm	lr!, {r0, r1, r2, r3}
   17750:	add	ip, sp, #4
   17754:	ldr	r4, [r4, sl]
   17758:	ldr	r6, [sp, #88]	; 0x58
   1775c:	stmia	ip!, {r0, r1, r2, r3}
   17760:	ldm	lr!, {r0, r1, r2, r3}
   17764:	ldr	sl, [r4]
   17768:	stmia	ip!, {r0, r1, r2, r3}
   1776c:	ldm	lr, {r0, r1, r2, r3}
   17770:	str	sl, [sp, #52]	; 0x34
   17774:	stm	ip, {r0, r1, r2, r3}
   17778:	mov	r2, r5
   1777c:	add	r5, sp, #4
   17780:	mov	r1, r9
   17784:	mov	r0, r5
   17788:	bl	1729c <close_stdout@@Base+0x2220>
   1778c:	mov	r2, r6
   17790:	mov	r3, r5
   17794:	mov	r0, r8
   17798:	mov	r1, r7
   1779c:	bl	16fcc <close_stdout@@Base+0x1f50>
   177a0:	ldr	r2, [sp, #52]	; 0x34
   177a4:	ldr	r3, [r4]
   177a8:	cmp	r2, r3
   177ac:	bne	177b8 <close_stdout@@Base+0x273c>
   177b0:	add	sp, sp, #56	; 0x38
   177b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   177b8:	bl	11634 <__stack_chk_fail@plt>
   177bc:	andeq	r7, r1, ip, lsr lr
   177c0:			; <UNDEFINED> instruction: 0x000178b0
   177c4:	andeq	r0, r0, ip, ror r1
   177c8:	push	{lr}		; (str lr, [sp, #-4]!)
   177cc:	sub	sp, sp, #12
   177d0:	mvn	ip, #0
   177d4:	str	ip, [sp]
   177d8:	bl	1771c <close_stdout@@Base+0x26a0>
   177dc:	add	sp, sp, #12
   177e0:	pop	{pc}		; (ldr pc, [sp], #4)
   177e4:	mov	ip, r1
   177e8:	mov	r3, r2
   177ec:	mov	r1, r0
   177f0:	mov	r2, ip
   177f4:	mov	r0, #0
   177f8:	b	177c8 <close_stdout@@Base+0x274c>
   177fc:	push	{lr}		; (str lr, [sp, #-4]!)
   17800:	sub	sp, sp, #12
   17804:	mov	lr, r1
   17808:	mov	ip, r2
   1780c:	mov	r1, r0
   17810:	str	r3, [sp]
   17814:	mov	r2, lr
   17818:	mov	r3, ip
   1781c:	mov	r0, #0
   17820:	bl	1771c <close_stdout@@Base+0x26a0>
   17824:	add	sp, sp, #12
   17828:	pop	{pc}		; (ldr pc, [sp], #4)
   1782c:	ldr	r3, [pc, #12]	; 17840 <close_stdout@@Base+0x27c4>
   17830:	ldr	ip, [pc, #12]	; 17844 <close_stdout@@Base+0x27c8>
   17834:	add	r3, pc, r3
   17838:	ldr	r3, [r3, ip]
   1783c:	b	16fcc <close_stdout@@Base+0x1f50>
   17840:	andeq	r7, r1, r4, asr #15
   17844:	andeq	r0, r0, r4, ror r1
   17848:	mov	r2, r1
   1784c:	mov	r1, r0
   17850:	mov	r0, #0
   17854:	b	1782c <close_stdout@@Base+0x27b0>
   17858:	mvn	r2, #0
   1785c:	b	1782c <close_stdout@@Base+0x27b0>
   17860:	mov	r1, r0
   17864:	mov	r0, #0
   17868:	b	17858 <close_stdout@@Base+0x27dc>
   1786c:	push	{r4, r5, r6, r7, r8, lr}
   17870:	mov	r8, #57344	; 0xe000
   17874:	movt	r8, #32767	; 0x7fff
   17878:	mov	r7, r0
   1787c:	mov	r6, r1
   17880:	mov	r4, r2
   17884:	mov	r0, r7
   17888:	mov	r1, r6
   1788c:	mov	r2, r4
   17890:	bl	1158c <read@plt>
   17894:	subs	r5, r0, #0
   17898:	bge	178c4 <close_stdout@@Base+0x2848>
   1789c:	bl	117f0 <__errno_location@plt>
   178a0:	ldr	r3, [r0]
   178a4:	cmp	r3, #4
   178a8:	beq	17884 <close_stdout@@Base+0x2808>
   178ac:	cmp	r3, #22
   178b0:	bne	178c4 <close_stdout@@Base+0x2848>
   178b4:	cmp	r4, r8
   178b8:	mov	r4, #57344	; 0xe000
   178bc:	movt	r4, #32767	; 0x7fff
   178c0:	bhi	17884 <close_stdout@@Base+0x2808>
   178c4:	mov	r0, r5
   178c8:	pop	{r4, r5, r6, r7, r8, pc}
   178cc:	push	{r4, r5, r6, r7, r8, lr}
   178d0:	mov	r8, #57344	; 0xe000
   178d4:	movt	r8, #32767	; 0x7fff
   178d8:	mov	r7, r0
   178dc:	mov	r6, r1
   178e0:	mov	r4, r2
   178e4:	mov	r0, r7
   178e8:	mov	r1, r6
   178ec:	mov	r2, r4
   178f0:	bl	11850 <write@plt>
   178f4:	subs	r5, r0, #0
   178f8:	bge	17924 <close_stdout@@Base+0x28a8>
   178fc:	bl	117f0 <__errno_location@plt>
   17900:	ldr	r3, [r0]
   17904:	cmp	r3, #4
   17908:	beq	178e4 <close_stdout@@Base+0x2868>
   1790c:	cmp	r3, #22
   17910:	bne	17924 <close_stdout@@Base+0x28a8>
   17914:	cmp	r4, r8
   17918:	mov	r4, #57344	; 0xe000
   1791c:	movt	r4, #32767	; 0x7fff
   17920:	bhi	178e4 <close_stdout@@Base+0x2868>
   17924:	mov	r0, r5
   17928:	pop	{r4, r5, r6, r7, r8, pc}
   1792c:	push	{r3, r4, r5, lr}
   17930:	mov	r4, r1
   17934:	mov	r2, r4
   17938:	mov	r1, #0
   1793c:	mov	r5, r0
   17940:	bl	11874 <memchr@plt>
   17944:	cmp	r0, #0
   17948:	rsbne	r0, r5, r0
   1794c:	addne	r0, r0, #1
   17950:	moveq	r0, r4
   17954:	pop	{r3, r4, r5, pc}
   17958:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1795c:	sub	sp, sp, #84	; 0x54
   17960:	ldr	r5, [pc, #1396]	; 17edc <close_stdout@@Base+0x2e60>
   17964:	mov	sl, r1
   17968:	ldr	r3, [pc, #1392]	; 17ee0 <close_stdout@@Base+0x2e64>
   1796c:	add	r5, pc, r5
   17970:	ldr	r3, [r5, r3]
   17974:	str	r3, [sp, #12]
   17978:	ldr	r3, [r3]
   1797c:	str	r3, [sp, #76]	; 0x4c
   17980:	bl	11820 <__strdup@plt>
   17984:	cmp	r0, #0
   17988:	str	r0, [sp]
   1798c:	beq	17eb8 <close_stdout@@Base+0x2e3c>
   17990:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   17994:	cmp	r0, #1
   17998:	bls	17c3c <close_stdout@@Base+0x2bc0>
   1799c:	cmp	sl, #0
   179a0:	bne	17cfc <close_stdout@@Base+0x2c80>
   179a4:	add	r4, sp, #24
   179a8:	ldr	r0, [sp]
   179ac:	mov	fp, #0
   179b0:	str	r0, [sp, #36]	; 0x24
   179b4:	bl	11790 <strlen@plt>
   179b8:	ldr	r1, [sp]
   179bc:	str	fp, [sp, #24]
   179c0:	strb	fp, [sp, #20]
   179c4:	str	fp, [r4, #4]
   179c8:	strb	fp, [sp, #32]
   179cc:	add	r9, r1, r0
   179d0:	str	r9, [sp, #16]
   179d4:	cmp	r1, r9
   179d8:	bcs	17c0c <close_stdout@@Base+0x2b90>
   179dc:	add	r1, sp, #48	; 0x30
   179e0:	str	r1, [sp, #4]
   179e4:	ldrb	r1, [sp, #20]
   179e8:	mov	r8, fp
   179ec:	ldr	r3, [sp]
   179f0:	mov	r7, #1
   179f4:	cmp	r1, #0
   179f8:	mov	ip, r3
   179fc:	bne	17aa0 <close_stdout@@Base+0x2a24>
   17a00:	ldr	r2, [pc, #1244]	; 17ee4 <close_stdout@@Base+0x2e68>
   17a04:	ldrb	r3, [ip]
   17a08:	ldr	r1, [r5, r2]
   17a0c:	and	r2, r3, #31
   17a10:	lsr	r3, r3, #5
   17a14:	ldr	r3, [r1, r3, lsl #2]
   17a18:	lsr	r3, r3, r2
   17a1c:	tst	r3, #1
   17a20:	beq	17b50 <close_stdout@@Base+0x2ad4>
   17a24:	str	r7, [sp, #40]	; 0x28
   17a28:	mov	r6, #1
   17a2c:	ldrb	r2, [ip]
   17a30:	ldr	r9, [sp, #16]
   17a34:	ldr	sl, [sp, #36]	; 0x24
   17a38:	strb	r7, [sp, #44]	; 0x2c
   17a3c:	str	r2, [sp, #48]	; 0x30
   17a40:	cmp	fp, #0
   17a44:	strb	r7, [sp, #32]
   17a48:	beq	17b28 <close_stdout@@Base+0x2aac>
   17a4c:	cmp	fp, #1
   17a50:	beq	17b68 <close_stdout@@Base+0x2aec>
   17a54:	cmp	fp, #2
   17a58:	bne	17b48 <close_stdout@@Base+0x2acc>
   17a5c:	ldrb	r2, [sp, #44]	; 0x2c
   17a60:	cmp	r2, #0
   17a64:	beq	17b48 <close_stdout@@Base+0x2acc>
   17a68:	ldr	r0, [sp, #48]	; 0x30
   17a6c:	bl	11778 <iswspace@plt>
   17a70:	cmp	r0, #0
   17a74:	movne	fp, #2
   17a78:	moveq	fp, #1
   17a7c:	add	ip, sl, r6
   17a80:	strb	r8, [sp, #32]
   17a84:	cmp	ip, r9
   17a88:	str	ip, [sp, #36]	; 0x24
   17a8c:	mov	r1, #0
   17a90:	bcs	17c2c <close_stdout@@Base+0x2bb0>
   17a94:	ldrb	r1, [sp, #20]
   17a98:	cmp	r1, #0
   17a9c:	beq	17a00 <close_stdout@@Base+0x2984>
   17aa0:	ldr	r1, [sp, #36]	; 0x24
   17aa4:	add	r0, sp, #48	; 0x30
   17aa8:	mov	r3, r4
   17aac:	rsb	r2, r1, r9
   17ab0:	bl	116dc <mbrtowc@plt>
   17ab4:	cmn	r0, #1
   17ab8:	str	r0, [sp, #40]	; 0x28
   17abc:	beq	17b98 <close_stdout@@Base+0x2b1c>
   17ac0:	cmn	r0, #2
   17ac4:	beq	17bb0 <close_stdout@@Base+0x2b34>
   17ac8:	cmp	r0, #0
   17acc:	ldr	r6, [sp, #36]	; 0x24
   17ad0:	bne	17af0 <close_stdout@@Base+0x2a74>
   17ad4:	str	r7, [sp, #40]	; 0x28
   17ad8:	ldrb	r3, [r6]
   17adc:	cmp	r3, #0
   17ae0:	bne	17ebc <close_stdout@@Base+0x2e40>
   17ae4:	ldr	r3, [sp, #48]	; 0x30
   17ae8:	cmp	r3, #0
   17aec:	bne	17e98 <close_stdout@@Base+0x2e1c>
   17af0:	mov	r0, r4
   17af4:	strb	r7, [sp, #44]	; 0x2c
   17af8:	bl	115f8 <mbsinit@plt>
   17afc:	strb	r7, [sp, #32]
   17b00:	cmp	r0, #0
   17b04:	strbne	r8, [sp, #20]
   17b08:	moveq	sl, r6
   17b0c:	movne	sl, r6
   17b10:	ldreq	r9, [sp, #16]
   17b14:	ldreq	r6, [sp, #40]	; 0x28
   17b18:	ldrne	r9, [sp, #16]
   17b1c:	ldrne	r6, [sp, #40]	; 0x28
   17b20:	cmp	fp, #0
   17b24:	bne	17a4c <close_stdout@@Base+0x29d0>
   17b28:	ldrb	r2, [sp, #44]	; 0x2c
   17b2c:	cmp	r2, #0
   17b30:	beq	17b48 <close_stdout@@Base+0x2acc>
   17b34:	ldr	r0, [sp, #48]	; 0x30
   17b38:	bl	11778 <iswspace@plt>
   17b3c:	rsbs	fp, r0, #1
   17b40:	movcc	fp, #0
   17b44:	b	17a7c <close_stdout@@Base+0x2a00>
   17b48:	mov	fp, #1
   17b4c:	b	17a7c <close_stdout@@Base+0x2a00>
   17b50:	mov	r0, r4
   17b54:	bl	115f8 <mbsinit@plt>
   17b58:	cmp	r0, #0
   17b5c:	beq	17e74 <close_stdout@@Base+0x2df8>
   17b60:	strb	r7, [sp, #20]
   17b64:	b	17aa0 <close_stdout@@Base+0x2a24>
   17b68:	ldrb	r2, [sp, #44]	; 0x2c
   17b6c:	cmp	r2, #0
   17b70:	beq	17a7c <close_stdout@@Base+0x2a00>
   17b74:	ldr	r0, [sp, #48]	; 0x30
   17b78:	bl	11778 <iswspace@plt>
   17b7c:	ldr	r2, [sp, #8]
   17b80:	cmp	r0, #0
   17b84:	movne	r2, sl
   17b88:	moveq	fp, #1
   17b8c:	movne	fp, #2
   17b90:	str	r2, [sp, #8]
   17b94:	b	17a7c <close_stdout@@Base+0x2a00>
   17b98:	str	r7, [sp, #40]	; 0x28
   17b9c:	mov	r6, #1
   17ba0:	strb	r8, [sp, #44]	; 0x2c
   17ba4:	ldr	r9, [sp, #16]
   17ba8:	ldr	sl, [sp, #36]	; 0x24
   17bac:	b	17a40 <close_stdout@@Base+0x29c4>
   17bb0:	ldr	ip, [sp, #36]	; 0x24
   17bb4:	ldr	r9, [sp, #16]
   17bb8:	strb	r8, [sp, #44]	; 0x2c
   17bbc:	rsb	r3, ip, r9
   17bc0:	mov	sl, ip
   17bc4:	str	r3, [sp, #40]	; 0x28
   17bc8:	mov	r6, r3
   17bcc:	b	17a40 <close_stdout@@Base+0x29c4>
   17bd0:	ldr	fp, [sp, #36]	; 0x24
   17bd4:	mov	r2, #1
   17bd8:	mov	r3, #0
   17bdc:	str	r2, [sp, #40]	; 0x28
   17be0:	strb	r3, [sp, #44]	; 0x2c
   17be4:	mov	r3, #1
   17be8:	strb	r3, [sp, #32]
   17bec:	mov	r0, fp
   17bf0:	bl	11790 <strlen@plt>
   17bf4:	mov	r1, fp
   17bf8:	add	r2, r0, #1
   17bfc:	ldr	r0, [sp]
   17c00:	bl	115bc <memmove@plt>
   17c04:	cmp	sl, #1
   17c08:	bne	179a8 <close_stdout@@Base+0x292c>
   17c0c:	ldr	r1, [sp, #12]
   17c10:	ldr	r2, [sp, #76]	; 0x4c
   17c14:	ldr	r0, [sp]
   17c18:	ldr	r3, [r1]
   17c1c:	cmp	r2, r3
   17c20:	bne	17e94 <close_stdout@@Base+0x2e18>
   17c24:	add	sp, sp, #84	; 0x54
   17c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17c2c:	cmp	fp, #2
   17c30:	ldreq	r3, [sp, #8]
   17c34:	strbeq	r1, [r3]
   17c38:	b	17c0c <close_stdout@@Base+0x2b90>
   17c3c:	cmp	sl, #0
   17c40:	beq	17ca8 <close_stdout@@Base+0x2c2c>
   17c44:	ldr	r2, [sp]
   17c48:	ldrb	r4, [r2]
   17c4c:	cmp	r4, #0
   17c50:	beq	17e64 <close_stdout@@Base+0x2de8>
   17c54:	bl	11760 <__ctype_b_loc@plt>
   17c58:	ldr	r3, [sp]
   17c5c:	ldr	r1, [r0]
   17c60:	b	17c74 <close_stdout@@Base+0x2bf8>
   17c64:	ldrb	r4, [r3, #1]
   17c68:	add	r3, r3, #1
   17c6c:	cmp	r4, #0
   17c70:	beq	17e5c <close_stdout@@Base+0x2de0>
   17c74:	lsl	r4, r4, #1
   17c78:	mov	r5, r3
   17c7c:	ldrh	r2, [r1, r4]
   17c80:	tst	r2, #8192	; 0x2000
   17c84:	bne	17c64 <close_stdout@@Base+0x2be8>
   17c88:	mov	r0, r5
   17c8c:	bl	11790 <strlen@plt>
   17c90:	mov	r1, r5
   17c94:	add	r2, r0, #1
   17c98:	ldr	r0, [sp]
   17c9c:	bl	115bc <memmove@plt>
   17ca0:	cmp	sl, #1
   17ca4:	beq	17c0c <close_stdout@@Base+0x2b90>
   17ca8:	ldr	r0, [sp]
   17cac:	bl	11790 <strlen@plt>
   17cb0:	ldr	r1, [sp]
   17cb4:	sub	r0, r0, #1
   17cb8:	adds	r4, r1, r0
   17cbc:	bcs	17c0c <close_stdout@@Base+0x2b90>
   17cc0:	bl	11760 <__ctype_b_loc@plt>
   17cc4:	mov	r3, r4
   17cc8:	mov	ip, #0
   17ccc:	ldr	r4, [sp]
   17cd0:	b	17ce0 <close_stdout@@Base+0x2c64>
   17cd4:	cmp	r4, r3
   17cd8:	strb	ip, [r3, #1]
   17cdc:	bhi	17c0c <close_stdout@@Base+0x2b90>
   17ce0:	ldrb	r2, [r3], #-1
   17ce4:	ldr	r1, [r0]
   17ce8:	lsl	r2, r2, #1
   17cec:	ldrh	r2, [r1, r2]
   17cf0:	tst	r2, #8192	; 0x2000
   17cf4:	bne	17cd4 <close_stdout@@Base+0x2c58>
   17cf8:	b	17c0c <close_stdout@@Base+0x2b90>
   17cfc:	ldr	r0, [sp]
   17d00:	add	r4, sp, #24
   17d04:	mov	r8, #0
   17d08:	str	r0, [sp, #36]	; 0x24
   17d0c:	bl	11790 <strlen@plt>
   17d10:	ldr	r3, [sp]
   17d14:	str	r8, [sp, #24]
   17d18:	strb	r8, [sp, #20]
   17d1c:	str	r8, [r4, #4]
   17d20:	strb	r8, [sp, #32]
   17d24:	add	r2, r3, r0
   17d28:	str	r2, [sp, #16]
   17d2c:	cmp	r3, r2
   17d30:	bcs	17e6c <close_stdout@@Base+0x2df0>
   17d34:	mov	fp, r3
   17d38:	add	r9, sp, #48	; 0x30
   17d3c:	mov	r7, #1
   17d40:	mov	r6, r2
   17d44:	b	17db0 <close_stdout@@Base+0x2d34>
   17d48:	ldr	r2, [pc, #404]	; 17ee4 <close_stdout@@Base+0x2e68>
   17d4c:	ldrb	r3, [fp]
   17d50:	ldr	r1, [r5, r2]
   17d54:	and	r2, r3, #31
   17d58:	lsr	r3, r3, #5
   17d5c:	ldr	r3, [r1, r3, lsl #2]
   17d60:	lsr	r3, r3, r2
   17d64:	tst	r3, #1
   17d68:	beq	17e24 <close_stdout@@Base+0x2da8>
   17d6c:	str	r7, [sp, #40]	; 0x28
   17d70:	ldrb	r6, [fp]
   17d74:	ldr	fp, [sp, #36]	; 0x24
   17d78:	strb	r7, [sp, #44]	; 0x2c
   17d7c:	str	r6, [sp, #48]	; 0x30
   17d80:	mov	r0, r6
   17d84:	strb	r7, [sp, #32]
   17d88:	bl	11778 <iswspace@plt>
   17d8c:	cmp	r0, #0
   17d90:	beq	17bec <close_stdout@@Base+0x2b70>
   17d94:	ldr	r3, [sp, #40]	; 0x28
   17d98:	ldr	r6, [sp, #16]
   17d9c:	add	fp, fp, r3
   17da0:	strb	r8, [sp, #32]
   17da4:	cmp	r6, fp
   17da8:	str	fp, [sp, #36]	; 0x24
   17dac:	bls	17bec <close_stdout@@Base+0x2b70>
   17db0:	ldrb	r3, [sp, #20]
   17db4:	cmp	r3, #0
   17db8:	beq	17d48 <close_stdout@@Base+0x2ccc>
   17dbc:	ldr	r1, [sp, #36]	; 0x24
   17dc0:	mov	r0, r9
   17dc4:	mov	r3, r4
   17dc8:	rsb	r2, r1, r6
   17dcc:	bl	116dc <mbrtowc@plt>
   17dd0:	cmn	r0, #1
   17dd4:	str	r0, [sp, #40]	; 0x28
   17dd8:	beq	17bd0 <close_stdout@@Base+0x2b54>
   17ddc:	cmn	r0, #2
   17de0:	ldr	fp, [sp, #36]	; 0x24
   17de4:	beq	17e44 <close_stdout@@Base+0x2dc8>
   17de8:	cmp	r0, #0
   17dec:	bne	17e3c <close_stdout@@Base+0x2dc0>
   17df0:	str	r7, [sp, #40]	; 0x28
   17df4:	ldrb	r3, [fp]
   17df8:	cmp	r3, #0
   17dfc:	bne	17ebc <close_stdout@@Base+0x2e40>
   17e00:	ldr	r6, [sp, #48]	; 0x30
   17e04:	cmp	r6, #0
   17e08:	bne	17e98 <close_stdout@@Base+0x2e1c>
   17e0c:	mov	r0, r4
   17e10:	strb	r7, [sp, #44]	; 0x2c
   17e14:	bl	115f8 <mbsinit@plt>
   17e18:	cmp	r0, #0
   17e1c:	strbne	r8, [sp, #20]
   17e20:	b	17d80 <close_stdout@@Base+0x2d04>
   17e24:	mov	r0, r4
   17e28:	bl	115f8 <mbsinit@plt>
   17e2c:	cmp	r0, #0
   17e30:	beq	17e74 <close_stdout@@Base+0x2df8>
   17e34:	strb	r7, [sp, #20]
   17e38:	b	17dbc <close_stdout@@Base+0x2d40>
   17e3c:	ldr	r6, [sp, #48]	; 0x30
   17e40:	b	17e0c <close_stdout@@Base+0x2d90>
   17e44:	ldr	r3, [sp, #16]
   17e48:	mov	r2, #0
   17e4c:	strb	r2, [sp, #44]	; 0x2c
   17e50:	rsb	r3, fp, r3
   17e54:	str	r3, [sp, #40]	; 0x28
   17e58:	b	17be4 <close_stdout@@Base+0x2b68>
   17e5c:	mov	r5, r3
   17e60:	b	17c88 <close_stdout@@Base+0x2c0c>
   17e64:	ldr	r5, [sp]
   17e68:	b	17c88 <close_stdout@@Base+0x2c0c>
   17e6c:	ldr	fp, [sp]
   17e70:	b	17bec <close_stdout@@Base+0x2b70>
   17e74:	ldr	r0, [pc, #108]	; 17ee8 <close_stdout@@Base+0x2e6c>
   17e78:	mov	r2, #142	; 0x8e
   17e7c:	ldr	r1, [pc, #104]	; 17eec <close_stdout@@Base+0x2e70>
   17e80:	ldr	r3, [pc, #104]	; 17ef0 <close_stdout@@Base+0x2e74>
   17e84:	add	r0, pc, r0
   17e88:	add	r1, pc, r1
   17e8c:	add	r3, pc, r3
   17e90:	bl	11958 <__assert_fail@plt>
   17e94:	bl	11634 <__stack_chk_fail@plt>
   17e98:	ldr	r0, [pc, #84]	; 17ef4 <close_stdout@@Base+0x2e78>
   17e9c:	mov	r2, #170	; 0xaa
   17ea0:	ldr	r1, [pc, #80]	; 17ef8 <close_stdout@@Base+0x2e7c>
   17ea4:	ldr	r3, [pc, #80]	; 17efc <close_stdout@@Base+0x2e80>
   17ea8:	add	r0, pc, r0
   17eac:	add	r1, pc, r1
   17eb0:	add	r3, pc, r3
   17eb4:	bl	11958 <__assert_fail@plt>
   17eb8:	bl	186fc <close_stdout@@Base+0x3680>
   17ebc:	ldr	r0, [pc, #60]	; 17f00 <close_stdout@@Base+0x2e84>
   17ec0:	mov	r2, #169	; 0xa9
   17ec4:	ldr	r1, [pc, #56]	; 17f04 <close_stdout@@Base+0x2e88>
   17ec8:	ldr	r3, [pc, #56]	; 17f08 <close_stdout@@Base+0x2e8c>
   17ecc:	add	r0, pc, r0
   17ed0:	add	r1, pc, r1
   17ed4:	add	r3, pc, r3
   17ed8:	bl	11958 <__assert_fail@plt>
   17edc:	andeq	r7, r1, ip, lsl #13
   17ee0:	andeq	r0, r0, ip, ror r1
   17ee4:	andeq	r0, r0, r8, ror r1
   17ee8:	andeq	r5, r0, r4, lsr #27
   17eec:	muleq	r0, ip, lr
   17ef0:	andeq	r5, r0, r4, lsl #29
   17ef4:	andeq	r5, r0, r0, asr #27
   17ef8:	andeq	r5, r0, r8, ror lr
   17efc:	andeq	r5, r0, r0, ror #28
   17f00:	andeq	r5, r0, r4, lsl #27
   17f04:	andeq	r5, r0, r4, asr lr
   17f08:	andeq	r5, r0, ip, lsr lr
   17f0c:	cmp	r0, #2
   17f10:	push	{r3, r4, r5, r6, r7, lr}
   17f14:	mov	r4, r0
   17f18:	bhi	17f40 <close_stdout@@Base+0x2ec4>
   17f1c:	bl	1bc70 <close_stdout@@Base+0x6bf4>
   17f20:	mov	r7, r0
   17f24:	bl	117f0 <__errno_location@plt>
   17f28:	ldr	r6, [r0]
   17f2c:	mov	r5, r0
   17f30:	mov	r0, r4
   17f34:	mov	r4, r7
   17f38:	bl	11940 <close@plt>
   17f3c:	str	r6, [r5]
   17f40:	mov	r0, r4
   17f44:	pop	{r3, r4, r5, r6, r7, pc}
   17f48:	push	{r4, r5, r6, r7, lr}
   17f4c:	cmp	r1, #0
   17f50:	sub	sp, sp, #36	; 0x24
   17f54:	ldr	r7, [pc, #896]	; 182dc <close_stdout@@Base+0x3260>
   17f58:	mov	ip, r3
   17f5c:	mov	r5, r0
   17f60:	add	r7, pc, r7
   17f64:	ldr	r4, [sp, #56]	; 0x38
   17f68:	ldr	r6, [sp, #60]	; 0x3c
   17f6c:	beq	182b0 <close_stdout@@Base+0x3234>
   17f70:	str	r2, [sp]
   17f74:	mov	r3, r1
   17f78:	ldr	r2, [pc, #864]	; 182e0 <close_stdout@@Base+0x3264>
   17f7c:	mov	r1, #1
   17f80:	str	ip, [sp, #4]
   17f84:	add	r2, pc, r2
   17f88:	bl	11868 <__fprintf_chk@plt>
   17f8c:	ldr	r1, [pc, #848]	; 182e4 <close_stdout@@Base+0x3268>
   17f90:	mov	r2, #5
   17f94:	mov	r0, #0
   17f98:	add	r1, pc, r1
   17f9c:	bl	11628 <dcgettext@plt>
   17fa0:	ldr	r2, [pc, #832]	; 182e8 <close_stdout@@Base+0x326c>
   17fa4:	movw	ip, #2013	; 0x7dd
   17fa8:	mov	r1, #1
   17fac:	ldr	r2, [r7, r2]
   17fb0:	str	ip, [sp]
   17fb4:	mov	r3, r0
   17fb8:	mov	r0, r5
   17fbc:	bl	11868 <__fprintf_chk@plt>
   17fc0:	ldr	r1, [pc, #804]	; 182ec <close_stdout@@Base+0x3270>
   17fc4:	mov	r0, #0
   17fc8:	mov	r2, #5
   17fcc:	add	r1, pc, r1
   17fd0:	bl	11628 <dcgettext@plt>
   17fd4:	mov	r1, r5
   17fd8:	bl	11544 <fputs_unlocked@plt>
   17fdc:	cmp	r6, #9
   17fe0:	addls	pc, pc, r6, lsl #2
   17fe4:	b	182cc <close_stdout@@Base+0x3250>
   17fe8:	b	1807c <close_stdout@@Base+0x3000>
   17fec:	b	18080 <close_stdout@@Base+0x3004>
   17ff0:	b	180b0 <close_stdout@@Base+0x3034>
   17ff4:	b	180e4 <close_stdout@@Base+0x3068>
   17ff8:	b	18120 <close_stdout@@Base+0x30a4>
   17ffc:	b	18160 <close_stdout@@Base+0x30e4>
   18000:	b	181a8 <close_stdout@@Base+0x312c>
   18004:	b	181f8 <close_stdout@@Base+0x317c>
   18008:	b	18250 <close_stdout@@Base+0x31d4>
   1800c:	b	18010 <close_stdout@@Base+0x2f94>
   18010:	ldr	r1, [pc, #728]	; 182f0 <close_stdout@@Base+0x3274>
   18014:	mov	r0, #0
   18018:	add	r1, pc, r1
   1801c:	mov	r2, #5
   18020:	bl	11628 <dcgettext@plt>
   18024:	ldm	r4, {r3, ip}
   18028:	mov	r1, #1
   1802c:	str	ip, [sp]
   18030:	ldr	ip, [r4, #8]
   18034:	str	ip, [sp, #4]
   18038:	ldr	ip, [r4, #12]
   1803c:	str	ip, [sp, #8]
   18040:	ldr	ip, [r4, #16]
   18044:	str	ip, [sp, #12]
   18048:	ldr	ip, [r4, #20]
   1804c:	str	ip, [sp, #16]
   18050:	ldr	ip, [r4, #24]
   18054:	str	ip, [sp, #20]
   18058:	ldr	ip, [r4, #28]
   1805c:	str	ip, [sp, #24]
   18060:	ldr	ip, [r4, #32]
   18064:	str	ip, [sp, #28]
   18068:	mov	r2, r0
   1806c:	mov	r0, r5
   18070:	bl	11868 <__fprintf_chk@plt>
   18074:	add	sp, sp, #36	; 0x24
   18078:	pop	{r4, r5, r6, r7, pc}
   1807c:	bl	11934 <abort@plt>
   18080:	ldr	r1, [pc, #620]	; 182f4 <close_stdout@@Base+0x3278>
   18084:	mov	r2, #5
   18088:	mov	r0, #0
   1808c:	add	r1, pc, r1
   18090:	bl	11628 <dcgettext@plt>
   18094:	ldr	r3, [r4]
   18098:	mov	r1, #1
   1809c:	mov	r2, r0
   180a0:	mov	r0, r5
   180a4:	add	sp, sp, #36	; 0x24
   180a8:	pop	{r4, r5, r6, r7, lr}
   180ac:	b	11868 <__fprintf_chk@plt>
   180b0:	ldr	r1, [pc, #576]	; 182f8 <close_stdout@@Base+0x327c>
   180b4:	mov	r2, #5
   180b8:	mov	r0, #0
   180bc:	add	r1, pc, r1
   180c0:	bl	11628 <dcgettext@plt>
   180c4:	ldm	r4, {r3, ip}
   180c8:	mov	r1, #1
   180cc:	str	ip, [sp, #56]	; 0x38
   180d0:	mov	r2, r0
   180d4:	mov	r0, r5
   180d8:	add	sp, sp, #36	; 0x24
   180dc:	pop	{r4, r5, r6, r7, lr}
   180e0:	b	11868 <__fprintf_chk@plt>
   180e4:	ldr	r1, [pc, #528]	; 182fc <close_stdout@@Base+0x3280>
   180e8:	mov	r2, #5
   180ec:	mov	r0, #0
   180f0:	add	r1, pc, r1
   180f4:	bl	11628 <dcgettext@plt>
   180f8:	ldm	r4, {r3, ip}
   180fc:	mov	r1, #1
   18100:	str	ip, [sp, #56]	; 0x38
   18104:	ldr	ip, [r4, #8]
   18108:	str	ip, [sp, #60]	; 0x3c
   1810c:	mov	r2, r0
   18110:	mov	r0, r5
   18114:	add	sp, sp, #36	; 0x24
   18118:	pop	{r4, r5, r6, r7, lr}
   1811c:	b	11868 <__fprintf_chk@plt>
   18120:	ldr	r1, [pc, #472]	; 18300 <close_stdout@@Base+0x3284>
   18124:	mov	r2, #5
   18128:	mov	r0, #0
   1812c:	add	r1, pc, r1
   18130:	bl	11628 <dcgettext@plt>
   18134:	ldm	r4, {r3, ip}
   18138:	mov	r1, #1
   1813c:	str	ip, [sp]
   18140:	ldr	ip, [r4, #8]
   18144:	str	ip, [sp, #4]
   18148:	ldr	ip, [r4, #12]
   1814c:	str	ip, [sp, #8]
   18150:	mov	r2, r0
   18154:	mov	r0, r5
   18158:	bl	11868 <__fprintf_chk@plt>
   1815c:	b	18074 <close_stdout@@Base+0x2ff8>
   18160:	ldr	r1, [pc, #412]	; 18304 <close_stdout@@Base+0x3288>
   18164:	mov	r2, #5
   18168:	mov	r0, #0
   1816c:	add	r1, pc, r1
   18170:	bl	11628 <dcgettext@plt>
   18174:	ldm	r4, {r3, ip}
   18178:	mov	r1, #1
   1817c:	str	ip, [sp]
   18180:	ldr	ip, [r4, #8]
   18184:	str	ip, [sp, #4]
   18188:	ldr	ip, [r4, #12]
   1818c:	str	ip, [sp, #8]
   18190:	ldr	ip, [r4, #16]
   18194:	str	ip, [sp, #12]
   18198:	mov	r2, r0
   1819c:	mov	r0, r5
   181a0:	bl	11868 <__fprintf_chk@plt>
   181a4:	b	18074 <close_stdout@@Base+0x2ff8>
   181a8:	ldr	r1, [pc, #344]	; 18308 <close_stdout@@Base+0x328c>
   181ac:	mov	r2, #5
   181b0:	mov	r0, #0
   181b4:	add	r1, pc, r1
   181b8:	bl	11628 <dcgettext@plt>
   181bc:	ldm	r4, {r3, ip}
   181c0:	mov	r1, #1
   181c4:	str	ip, [sp]
   181c8:	ldr	ip, [r4, #8]
   181cc:	str	ip, [sp, #4]
   181d0:	ldr	ip, [r4, #12]
   181d4:	str	ip, [sp, #8]
   181d8:	ldr	ip, [r4, #16]
   181dc:	str	ip, [sp, #12]
   181e0:	ldr	ip, [r4, #20]
   181e4:	str	ip, [sp, #16]
   181e8:	mov	r2, r0
   181ec:	mov	r0, r5
   181f0:	bl	11868 <__fprintf_chk@plt>
   181f4:	b	18074 <close_stdout@@Base+0x2ff8>
   181f8:	ldr	r1, [pc, #268]	; 1830c <close_stdout@@Base+0x3290>
   181fc:	mov	r2, #5
   18200:	mov	r0, #0
   18204:	add	r1, pc, r1
   18208:	bl	11628 <dcgettext@plt>
   1820c:	ldm	r4, {r3, ip}
   18210:	mov	r1, #1
   18214:	str	ip, [sp]
   18218:	ldr	ip, [r4, #8]
   1821c:	str	ip, [sp, #4]
   18220:	ldr	ip, [r4, #12]
   18224:	str	ip, [sp, #8]
   18228:	ldr	ip, [r4, #16]
   1822c:	str	ip, [sp, #12]
   18230:	ldr	ip, [r4, #20]
   18234:	str	ip, [sp, #16]
   18238:	ldr	ip, [r4, #24]
   1823c:	str	ip, [sp, #20]
   18240:	mov	r2, r0
   18244:	mov	r0, r5
   18248:	bl	11868 <__fprintf_chk@plt>
   1824c:	b	18074 <close_stdout@@Base+0x2ff8>
   18250:	ldr	r1, [pc, #184]	; 18310 <close_stdout@@Base+0x3294>
   18254:	mov	r2, #5
   18258:	mov	r0, #0
   1825c:	add	r1, pc, r1
   18260:	bl	11628 <dcgettext@plt>
   18264:	ldm	r4, {r3, ip}
   18268:	mov	r1, #1
   1826c:	str	ip, [sp]
   18270:	ldr	ip, [r4, #8]
   18274:	str	ip, [sp, #4]
   18278:	ldr	ip, [r4, #12]
   1827c:	str	ip, [sp, #8]
   18280:	ldr	ip, [r4, #16]
   18284:	str	ip, [sp, #12]
   18288:	ldr	ip, [r4, #20]
   1828c:	str	ip, [sp, #16]
   18290:	ldr	ip, [r4, #24]
   18294:	str	ip, [sp, #20]
   18298:	ldr	ip, [r4, #28]
   1829c:	str	ip, [sp, #24]
   182a0:	mov	r2, r0
   182a4:	mov	r0, r5
   182a8:	bl	11868 <__fprintf_chk@plt>
   182ac:	b	18074 <close_stdout@@Base+0x2ff8>
   182b0:	str	r3, [sp]
   182b4:	mov	r3, r2
   182b8:	ldr	r2, [pc, #84]	; 18314 <close_stdout@@Base+0x3298>
   182bc:	mov	r1, #1
   182c0:	add	r2, pc, r2
   182c4:	bl	11868 <__fprintf_chk@plt>
   182c8:	b	17f8c <close_stdout@@Base+0x2f10>
   182cc:	ldr	r1, [pc, #68]	; 18318 <close_stdout@@Base+0x329c>
   182d0:	mov	r0, #0
   182d4:	add	r1, pc, r1
   182d8:	b	1801c <close_stdout@@Base+0x2fa0>
   182dc:	muleq	r1, r8, r0
   182e0:			; <UNDEFINED> instruction: 0x00005db0
   182e4:			; <UNDEFINED> instruction: 0x00005db0
   182e8:	andeq	r0, r0, r8, lsr #3
   182ec:	andeq	r5, r0, r0, lsl #27
   182f0:	andeq	r5, r0, ip, lsl #30
   182f4:	andeq	r5, r0, ip, lsl #27
   182f8:	andeq	r5, r0, ip, ror #26
   182fc:	andeq	r5, r0, r0, asr sp
   18300:	andeq	r5, r0, r0, lsr sp
   18304:	andeq	r5, r0, r0, lsl sp
   18308:	andeq	r5, r0, ip, ror #25
   1830c:	andeq	r5, r0, r4, asr #25
   18310:	muleq	r0, r8, ip
   18314:	andeq	r5, r0, r0, lsl #21
   18318:	andeq	r5, r0, r4, lsl #25
   1831c:	push	{r4, r5, lr}
   18320:	sub	sp, sp, #12
   18324:	ldr	r5, [sp, #24]
   18328:	ldr	ip, [r5]
   1832c:	cmp	ip, #0
   18330:	beq	1834c <close_stdout@@Base+0x32d0>
   18334:	mov	lr, r5
   18338:	mov	ip, #0
   1833c:	ldr	r4, [lr, #4]!
   18340:	add	ip, ip, #1
   18344:	cmp	r4, #0
   18348:	bne	1833c <close_stdout@@Base+0x32c0>
   1834c:	stm	sp, {r5, ip}
   18350:	bl	17f48 <close_stdout@@Base+0x2ecc>
   18354:	add	sp, sp, #12
   18358:	pop	{r4, r5, pc}
   1835c:	push	{r4, r5, r6, r7, lr}
   18360:	sub	sp, sp, #60	; 0x3c
   18364:	ldr	r4, [pc, #100]	; 183d0 <close_stdout@@Base+0x3354>
   18368:	mov	ip, #0
   1836c:	ldr	r5, [pc, #96]	; 183d4 <close_stdout@@Base+0x3358>
   18370:	mov	lr, ip
   18374:	add	r4, pc, r4
   18378:	ldr	r6, [sp, #80]	; 0x50
   1837c:	ldr	r7, [r4, r5]
   18380:	add	r5, sp, #12
   18384:	ldr	r4, [r7]
   18388:	str	r4, [sp, #52]	; 0x34
   1838c:	ldr	r4, [r6, ip]
   18390:	cmp	r4, #0
   18394:	str	r4, [r5, ip]
   18398:	beq	183ac <close_stdout@@Base+0x3330>
   1839c:	add	lr, lr, #1
   183a0:	add	ip, ip, #4
   183a4:	cmp	lr, #10
   183a8:	bne	1838c <close_stdout@@Base+0x3310>
   183ac:	stm	sp, {r5, lr}
   183b0:	bl	17f48 <close_stdout@@Base+0x2ecc>
   183b4:	ldr	r2, [sp, #52]	; 0x34
   183b8:	ldr	r3, [r7]
   183bc:	cmp	r2, r3
   183c0:	bne	183cc <close_stdout@@Base+0x3350>
   183c4:	add	sp, sp, #60	; 0x3c
   183c8:	pop	{r4, r5, r6, r7, pc}
   183cc:	bl	11634 <__stack_chk_fail@plt>
   183d0:	andeq	r6, r1, r4, lsl #25
   183d4:	andeq	r0, r0, ip, ror r1
   183d8:	push	{r3}		; (str r3, [sp, #-4]!)
   183dc:	push	{r4, lr}
   183e0:	sub	sp, sp, #20
   183e4:	ldr	lr, [pc, #72]	; 18434 <close_stdout@@Base+0x33b8>
   183e8:	add	ip, sp, #32
   183ec:	ldr	r4, [pc, #68]	; 18438 <close_stdout@@Base+0x33bc>
   183f0:	add	lr, pc, lr
   183f4:	ldr	r3, [sp, #28]
   183f8:	ldr	r4, [lr, r4]
   183fc:	str	ip, [sp]
   18400:	str	ip, [sp, #8]
   18404:	ldr	ip, [r4]
   18408:	str	ip, [sp, #12]
   1840c:	bl	1835c <close_stdout@@Base+0x32e0>
   18410:	ldr	r2, [sp, #12]
   18414:	ldr	r3, [r4]
   18418:	cmp	r2, r3
   1841c:	bne	18430 <close_stdout@@Base+0x33b4>
   18420:	add	sp, sp, #20
   18424:	pop	{r4, lr}
   18428:	add	sp, sp, #4
   1842c:	bx	lr
   18430:	bl	11634 <__stack_chk_fail@plt>
   18434:	andeq	r6, r1, r8, lsl #24
   18438:	andeq	r0, r0, ip, ror r1
   1843c:	ldr	r1, [pc, #132]	; 184c8 <close_stdout@@Base+0x344c>
   18440:	mov	r2, #5
   18444:	push	{r4, lr}
   18448:	add	r1, pc, r1
   1844c:	mov	r0, #0
   18450:	ldr	r4, [pc, #116]	; 184cc <close_stdout@@Base+0x3450>
   18454:	bl	11628 <dcgettext@plt>
   18458:	ldr	r2, [pc, #112]	; 184d0 <close_stdout@@Base+0x3454>
   1845c:	add	r4, pc, r4
   18460:	add	r2, pc, r2
   18464:	mov	r1, r0
   18468:	mov	r0, #1
   1846c:	bl	11844 <__printf_chk@plt>
   18470:	ldr	r1, [pc, #92]	; 184d4 <close_stdout@@Base+0x3458>
   18474:	mov	r2, #5
   18478:	mov	r0, #0
   1847c:	add	r1, pc, r1
   18480:	bl	11628 <dcgettext@plt>
   18484:	ldr	r2, [pc, #76]	; 184d8 <close_stdout@@Base+0x345c>
   18488:	ldr	r3, [pc, #76]	; 184dc <close_stdout@@Base+0x3460>
   1848c:	add	r2, pc, r2
   18490:	add	r3, pc, r3
   18494:	mov	r1, r0
   18498:	mov	r0, #1
   1849c:	bl	11844 <__printf_chk@plt>
   184a0:	ldr	r1, [pc, #56]	; 184e0 <close_stdout@@Base+0x3464>
   184a4:	mov	r0, #0
   184a8:	mov	r2, #5
   184ac:	add	r1, pc, r1
   184b0:	bl	11628 <dcgettext@plt>
   184b4:	ldr	r3, [pc, #40]	; 184e4 <close_stdout@@Base+0x3468>
   184b8:	ldr	r3, [r4, r3]
   184bc:	pop	{r4, lr}
   184c0:	ldr	r1, [r3]
   184c4:	b	11544 <fputs_unlocked@plt>
   184c8:	andeq	r5, r0, ip, asr #22
   184cc:	muleq	r1, ip, fp
   184d0:	andeq	r5, r0, ip, asr #22
   184d4:	andeq	r5, r0, r8, asr #22
   184d8:	andeq	r5, r0, r4, lsl #5
   184dc:	muleq	r0, r0, r2
   184e0:	andeq	r5, r0, ip, lsr #22
   184e4:	muleq	r0, r8, r1
   184e8:	push	{r4, lr}
   184ec:	mov	r4, r0
   184f0:	bl	1170c <malloc@plt>
   184f4:	rsbs	r3, r0, #1
   184f8:	movcc	r3, #0
   184fc:	cmp	r4, #0
   18500:	moveq	r3, #0
   18504:	cmp	r3, #0
   18508:	popeq	{r4, pc}
   1850c:	bl	186fc <close_stdout@@Base+0x3680>
   18510:	push	{r3, r4, r5, lr}
   18514:	mov	r4, r0
   18518:	mvn	r0, #0
   1851c:	mov	r5, r1
   18520:	bl	1c12c <close_stdout@@Base+0x70b0>
   18524:	cmp	r0, r4
   18528:	bcc	18538 <close_stdout@@Base+0x34bc>
   1852c:	mul	r0, r4, r5
   18530:	pop	{r3, r4, r5, lr}
   18534:	b	184e8 <close_stdout@@Base+0x346c>
   18538:	bl	186fc <close_stdout@@Base+0x3680>
   1853c:	b	184e8 <close_stdout@@Base+0x346c>
   18540:	rsbs	r3, r1, #1
   18544:	push	{r4, lr}
   18548:	movcc	r3, #0
   1854c:	cmp	r0, #0
   18550:	mov	r4, r1
   18554:	moveq	r3, #0
   18558:	cmp	r3, #0
   1855c:	bne	18580 <close_stdout@@Base+0x3504>
   18560:	bl	1164c <realloc@plt>
   18564:	rsbs	r3, r0, #1
   18568:	movcc	r3, #0
   1856c:	cmp	r4, #0
   18570:	moveq	r3, #0
   18574:	cmp	r3, #0
   18578:	popeq	{r4, pc}
   1857c:	bl	186fc <close_stdout@@Base+0x3680>
   18580:	bl	115c8 <free@plt>
   18584:	mov	r0, #0
   18588:	pop	{r4, pc}
   1858c:	push	{r4, r5, r6, lr}
   18590:	mov	r5, r1
   18594:	mov	r6, r0
   18598:	mov	r1, r2
   1859c:	mvn	r0, #0
   185a0:	mov	r4, r2
   185a4:	bl	1c12c <close_stdout@@Base+0x70b0>
   185a8:	cmp	r0, r5
   185ac:	bcc	185c0 <close_stdout@@Base+0x3544>
   185b0:	mov	r0, r6
   185b4:	mul	r1, r5, r4
   185b8:	pop	{r4, r5, r6, lr}
   185bc:	b	18540 <close_stdout@@Base+0x34c4>
   185c0:	bl	186fc <close_stdout@@Base+0x3680>
   185c4:	push	{r3, r4, r5, r6, r7, lr}
   185c8:	subs	r7, r0, #0
   185cc:	mov	r5, r1
   185d0:	mov	r6, r2
   185d4:	ldr	r4, [r1]
   185d8:	beq	18610 <close_stdout@@Base+0x3594>
   185dc:	movw	r0, #43690	; 0xaaaa
   185e0:	mov	r1, r2
   185e4:	bfi	r0, r0, #16, #16
   185e8:	bl	1c12c <close_stdout@@Base+0x70b0>
   185ec:	cmp	r4, r0
   185f0:	addcc	r3, r4, #1
   185f4:	addcc	r4, r4, r3, lsr #1
   185f8:	bcs	18634 <close_stdout@@Base+0x35b8>
   185fc:	str	r4, [r5]
   18600:	mov	r0, r7
   18604:	mul	r1, r6, r4
   18608:	pop	{r3, r4, r5, r6, r7, lr}
   1860c:	b	18540 <close_stdout@@Base+0x34c4>
   18610:	cmp	r4, #0
   18614:	bne	185fc <close_stdout@@Base+0x3580>
   18618:	mov	r0, #64	; 0x40
   1861c:	mov	r1, r2
   18620:	bl	1c12c <close_stdout@@Base+0x70b0>
   18624:	cmp	r0, #0
   18628:	movne	r4, r0
   1862c:	addeq	r4, r0, #1
   18630:	b	185fc <close_stdout@@Base+0x3580>
   18634:	bl	186fc <close_stdout@@Base+0x3680>
   18638:	cmp	r0, #0
   1863c:	push	{r3, lr}
   18640:	ldr	r3, [r1]
   18644:	beq	18670 <close_stdout@@Base+0x35f4>
   18648:	movw	r2, #43689	; 0xaaa9
   1864c:	movt	r2, #43690	; 0xaaaa
   18650:	cmp	r3, r2
   18654:	addls	r2, r3, #1
   18658:	addls	r3, r3, r2, lsr #1
   1865c:	bhi	18688 <close_stdout@@Base+0x360c>
   18660:	str	r3, [r1]
   18664:	mov	r1, r3
   18668:	pop	{r3, lr}
   1866c:	b	18540 <close_stdout@@Base+0x34c4>
   18670:	cmp	r3, #0
   18674:	moveq	r3, #64	; 0x40
   18678:	str	r3, [r1]
   1867c:	mov	r1, r3
   18680:	pop	{r3, lr}
   18684:	b	18540 <close_stdout@@Base+0x34c4>
   18688:	bl	186fc <close_stdout@@Base+0x3680>
   1868c:	push	{r4, lr}
   18690:	mov	r4, r0
   18694:	bl	184e8 <close_stdout@@Base+0x346c>
   18698:	mov	r2, r4
   1869c:	mov	r1, #0
   186a0:	pop	{r4, lr}
   186a4:	b	1182c <memset@plt>
   186a8:	push	{r3, lr}
   186ac:	bl	11538 <calloc@plt>
   186b0:	cmp	r0, #0
   186b4:	popne	{r3, pc}
   186b8:	bl	186fc <close_stdout@@Base+0x3680>
   186bc:	push	{r3, r4, r5, lr}
   186c0:	mov	r4, r1
   186c4:	mov	r5, r0
   186c8:	mov	r0, r1
   186cc:	bl	184e8 <close_stdout@@Base+0x346c>
   186d0:	mov	r1, r5
   186d4:	mov	r2, r4
   186d8:	pop	{r3, r4, r5, lr}
   186dc:	b	115e0 <memcpy@plt>
   186e0:	push	{r4, lr}
   186e4:	mov	r4, r0
   186e8:	bl	11790 <strlen@plt>
   186ec:	add	r1, r0, #1
   186f0:	mov	r0, r4
   186f4:	pop	{r4, lr}
   186f8:	b	186bc <close_stdout@@Base+0x3640>
   186fc:	ldr	r3, [pc, #64]	; 18744 <close_stdout@@Base+0x36c8>
   18700:	mov	r2, #5
   18704:	ldr	ip, [pc, #60]	; 18748 <close_stdout@@Base+0x36cc>
   18708:	mov	r0, #0
   1870c:	add	r3, pc, r3
   18710:	ldr	r1, [pc, #52]	; 1874c <close_stdout@@Base+0x36d0>
   18714:	push	{r4, lr}
   18718:	add	r1, pc, r1
   1871c:	ldr	r3, [r3, ip]
   18720:	ldr	r4, [r3]
   18724:	bl	11628 <dcgettext@plt>
   18728:	ldr	r2, [pc, #32]	; 18750 <close_stdout@@Base+0x36d4>
   1872c:	mov	r1, #0
   18730:	add	r2, pc, r2
   18734:	mov	r3, r0
   18738:	mov	r0, r4
   1873c:	bl	116e8 <error@plt>
   18740:	bl	11934 <abort@plt>
   18744:	andeq	r6, r1, ip, ror #17
   18748:	muleq	r0, ip, r1
   1874c:	andeq	r5, r0, r0, lsr r9
   18750:	muleq	r0, r4, r8
   18754:	push	{r4, lr}
   18758:	sub	sp, sp, #8
   1875c:	ldr	ip, [sp, #16]
   18760:	str	ip, [sp]
   18764:	bl	1b608 <close_stdout@@Base+0x658c>
   18768:	subs	r4, r0, #0
   1876c:	blt	1877c <close_stdout@@Base+0x3700>
   18770:	mov	r0, r4
   18774:	add	sp, sp, #8
   18778:	pop	{r4, pc}
   1877c:	bl	117f0 <__errno_location@plt>
   18780:	ldr	r3, [r0]
   18784:	cmp	r3, #12
   18788:	bne	18770 <close_stdout@@Base+0x36f4>
   1878c:	bl	186fc <close_stdout@@Base+0x3680>
   18790:	push	{r4, lr}
   18794:	bl	1b96c <close_stdout@@Base+0x68f0>
   18798:	subs	r4, r0, #0
   1879c:	beq	187a8 <close_stdout@@Base+0x372c>
   187a0:	mov	r0, r4
   187a4:	pop	{r4, pc}
   187a8:	bl	117f0 <__errno_location@plt>
   187ac:	ldr	r3, [r0]
   187b0:	cmp	r3, #12
   187b4:	bne	187a0 <close_stdout@@Base+0x3724>
   187b8:	bl	186fc <close_stdout@@Base+0x3680>
   187bc:	push	{r4, lr}
   187c0:	bl	1bb88 <close_stdout@@Base+0x6b0c>
   187c4:	subs	r4, r0, #0
   187c8:	beq	187d4 <close_stdout@@Base+0x3758>
   187cc:	mov	r0, r4
   187d0:	pop	{r4, pc}
   187d4:	bl	117f0 <__errno_location@plt>
   187d8:	ldr	r3, [r0]
   187dc:	cmp	r3, #12
   187e0:	bne	187cc <close_stdout@@Base+0x3750>
   187e4:	bl	186fc <close_stdout@@Base+0x3680>
   187e8:	ldr	ip, [pc, #1308]	; 18d0c <close_stdout@@Base+0x3c90>
   187ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   187f0:	mov	sl, r2
   187f4:	ldr	r2, [pc, #1300]	; 18d10 <close_stdout@@Base+0x3c94>
   187f8:	add	ip, pc, ip
   187fc:	mov	r9, r3
   18800:	sub	sp, sp, #20
   18804:	mov	r3, ip
   18808:	cmp	sl, #36	; 0x24
   1880c:	ldr	r6, [ip, r2]
   18810:	mov	r5, r0
   18814:	mov	r7, r1
   18818:	ldr	r8, [sp, #56]	; 0x38
   1881c:	ldr	r3, [r6]
   18820:	str	r3, [sp, #12]
   18824:	bhi	18cec <close_stdout@@Base+0x3c70>
   18828:	cmp	r1, #0
   1882c:	addeq	r7, sp, #8
   18830:	bl	11760 <__ctype_b_loc@plt>
   18834:	ldrb	ip, [r5]
   18838:	mov	r2, r5
   1883c:	ldr	r1, [r0]
   18840:	b	18848 <close_stdout@@Base+0x37cc>
   18844:	ldrb	ip, [r2, #1]!
   18848:	lsl	r3, ip, #1
   1884c:	ldrh	r4, [r1, r3]
   18850:	and	r4, r4, #8192	; 0x2000
   18854:	uxth	r4, r4
   18858:	cmp	r4, #0
   1885c:	bne	18844 <close_stdout@@Base+0x37c8>
   18860:	cmp	ip, #45	; 0x2d
   18864:	bne	18884 <close_stdout@@Base+0x3808>
   18868:	mov	r0, #4
   1886c:	ldr	r2, [sp, #12]
   18870:	ldr	r3, [r6]
   18874:	cmp	r2, r3
   18878:	bne	18ce8 <close_stdout@@Base+0x3c6c>
   1887c:	add	sp, sp, #20
   18880:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18884:	bl	117f0 <__errno_location@plt>
   18888:	mov	r2, sl
   1888c:	mov	r1, r7
   18890:	str	r4, [r0]
   18894:	mov	fp, r0
   18898:	mov	r0, r5
   1889c:	bl	11784 <strtoul@plt>
   188a0:	ldr	r3, [r7]
   188a4:	cmp	r3, r5
   188a8:	mov	sl, r0
   188ac:	beq	18a3c <close_stdout@@Base+0x39c0>
   188b0:	ldr	r0, [fp]
   188b4:	cmp	r0, #0
   188b8:	bne	188e8 <close_stdout@@Base+0x386c>
   188bc:	mov	r4, r0
   188c0:	cmp	r8, #0
   188c4:	streq	sl, [r9]
   188c8:	moveq	r0, r4
   188cc:	beq	1886c <close_stdout@@Base+0x37f0>
   188d0:	ldrb	r5, [r3]
   188d4:	cmp	r5, #0
   188d8:	bne	188f8 <close_stdout@@Base+0x387c>
   188dc:	mov	r0, r4
   188e0:	str	sl, [r9]
   188e4:	b	1886c <close_stdout@@Base+0x37f0>
   188e8:	cmp	r0, #34	; 0x22
   188ec:	moveq	r4, #1
   188f0:	bne	18868 <close_stdout@@Base+0x37ec>
   188f4:	b	188c0 <close_stdout@@Base+0x3844>
   188f8:	mov	r0, r8
   188fc:	mov	r1, r5
   18900:	str	r3, [sp, #4]
   18904:	bl	117a8 <strchr@plt>
   18908:	ldr	r3, [sp, #4]
   1890c:	cmp	r0, #0
   18910:	beq	18a74 <close_stdout@@Base+0x39f8>
   18914:	mov	r0, r8
   18918:	mov	r1, #48	; 0x30
   1891c:	str	r3, [sp, #4]
   18920:	bl	117a8 <strchr@plt>
   18924:	ldr	r3, [sp, #4]
   18928:	cmp	r0, #0
   1892c:	beq	1894c <close_stdout@@Base+0x38d0>
   18930:	ldrb	r2, [r3, #1]
   18934:	cmp	r2, #68	; 0x44
   18938:	beq	18cd0 <close_stdout@@Base+0x3c54>
   1893c:	cmp	r2, #105	; 0x69
   18940:	beq	18cb8 <close_stdout@@Base+0x3c3c>
   18944:	cmp	r2, #66	; 0x42
   18948:	beq	18cd0 <close_stdout@@Base+0x3c54>
   1894c:	mov	r8, #1
   18950:	mov	fp, #1024	; 0x400
   18954:	sub	r5, r5, #66	; 0x42
   18958:	cmp	r5, #53	; 0x35
   1895c:	addls	pc, pc, r5, lsl #2
   18960:	b	18a74 <close_stdout@@Base+0x39f8>
   18964:	b	18c64 <close_stdout@@Base+0x3be8>
   18968:	b	18a74 <close_stdout@@Base+0x39f8>
   1896c:	b	18a74 <close_stdout@@Base+0x39f8>
   18970:	b	18c24 <close_stdout@@Base+0x3ba8>
   18974:	b	18a74 <close_stdout@@Base+0x39f8>
   18978:	b	18c78 <close_stdout@@Base+0x3bfc>
   1897c:	b	18a74 <close_stdout@@Base+0x39f8>
   18980:	b	18a74 <close_stdout@@Base+0x39f8>
   18984:	b	18a74 <close_stdout@@Base+0x39f8>
   18988:	b	18c04 <close_stdout@@Base+0x3b88>
   1898c:	b	18a74 <close_stdout@@Base+0x39f8>
   18990:	b	18bd0 <close_stdout@@Base+0x3b54>
   18994:	b	18a74 <close_stdout@@Base+0x39f8>
   18998:	b	18a74 <close_stdout@@Base+0x39f8>
   1899c:	b	18b90 <close_stdout@@Base+0x3b14>
   189a0:	b	18a74 <close_stdout@@Base+0x39f8>
   189a4:	b	18a74 <close_stdout@@Base+0x39f8>
   189a8:	b	18a74 <close_stdout@@Base+0x39f8>
   189ac:	b	18b50 <close_stdout@@Base+0x3ad4>
   189b0:	b	18a74 <close_stdout@@Base+0x39f8>
   189b4:	b	18a74 <close_stdout@@Base+0x39f8>
   189b8:	b	18a74 <close_stdout@@Base+0x39f8>
   189bc:	b	18a74 <close_stdout@@Base+0x39f8>
   189c0:	b	18b10 <close_stdout@@Base+0x3a94>
   189c4:	b	18ad0 <close_stdout@@Base+0x3a54>
   189c8:	b	18a74 <close_stdout@@Base+0x39f8>
   189cc:	b	18a74 <close_stdout@@Base+0x39f8>
   189d0:	b	18a74 <close_stdout@@Base+0x39f8>
   189d4:	b	18a74 <close_stdout@@Base+0x39f8>
   189d8:	b	18a74 <close_stdout@@Base+0x39f8>
   189dc:	b	18a74 <close_stdout@@Base+0x39f8>
   189e0:	b	18a74 <close_stdout@@Base+0x39f8>
   189e4:	b	18abc <close_stdout@@Base+0x3a40>
   189e8:	b	18a80 <close_stdout@@Base+0x3a04>
   189ec:	b	18a74 <close_stdout@@Base+0x39f8>
   189f0:	b	18a74 <close_stdout@@Base+0x39f8>
   189f4:	b	18a74 <close_stdout@@Base+0x39f8>
   189f8:	b	18c78 <close_stdout@@Base+0x3bfc>
   189fc:	b	18a74 <close_stdout@@Base+0x39f8>
   18a00:	b	18a74 <close_stdout@@Base+0x39f8>
   18a04:	b	18a74 <close_stdout@@Base+0x39f8>
   18a08:	b	18c04 <close_stdout@@Base+0x3b88>
   18a0c:	b	18a74 <close_stdout@@Base+0x39f8>
   18a10:	b	18bd0 <close_stdout@@Base+0x3b54>
   18a14:	b	18a74 <close_stdout@@Base+0x39f8>
   18a18:	b	18a74 <close_stdout@@Base+0x39f8>
   18a1c:	b	18a74 <close_stdout@@Base+0x39f8>
   18a20:	b	18a74 <close_stdout@@Base+0x39f8>
   18a24:	b	18a74 <close_stdout@@Base+0x39f8>
   18a28:	b	18a74 <close_stdout@@Base+0x39f8>
   18a2c:	b	18b50 <close_stdout@@Base+0x3ad4>
   18a30:	b	18a74 <close_stdout@@Base+0x39f8>
   18a34:	b	18a74 <close_stdout@@Base+0x39f8>
   18a38:	b	18aa0 <close_stdout@@Base+0x3a24>
   18a3c:	cmp	r8, #0
   18a40:	beq	18868 <close_stdout@@Base+0x37ec>
   18a44:	ldrb	r5, [r5]
   18a48:	cmp	r5, #0
   18a4c:	beq	18868 <close_stdout@@Base+0x37ec>
   18a50:	mov	r0, r8
   18a54:	mov	r1, r5
   18a58:	str	r3, [sp, #4]
   18a5c:	bl	117a8 <strchr@plt>
   18a60:	ldr	r3, [sp, #4]
   18a64:	cmp	r0, #0
   18a68:	movne	sl, #1
   18a6c:	bne	18914 <close_stdout@@Base+0x3898>
   18a70:	b	18868 <close_stdout@@Base+0x37ec>
   18a74:	str	sl, [r9]
   18a78:	orr	r0, r4, #2
   18a7c:	b	1886c <close_stdout@@Base+0x37f0>
   18a80:	mov	r2, #0
   18a84:	add	r1, r3, r8
   18a88:	str	r1, [r7]
   18a8c:	ldrb	r3, [r3, r8]
   18a90:	orr	r4, r4, r2
   18a94:	cmp	r3, #0
   18a98:	orrne	r4, r4, #2
   18a9c:	b	188dc <close_stdout@@Base+0x3860>
   18aa0:	cmn	sl, #-2147483647	; 0x80000001
   18aa4:	lslls	sl, sl, #1
   18aa8:	movls	r2, #0
   18aac:	bls	18a84 <close_stdout@@Base+0x3a08>
   18ab0:	mvn	sl, #0
   18ab4:	mov	r2, #1
   18ab8:	b	18a84 <close_stdout@@Base+0x3a08>
   18abc:	cmp	sl, #8388608	; 0x800000
   18ac0:	lslcc	sl, sl, #9
   18ac4:	movcc	r2, #0
   18ac8:	bcc	18a84 <close_stdout@@Base+0x3a08>
   18acc:	b	18ab0 <close_stdout@@Base+0x3a34>
   18ad0:	mov	r1, fp
   18ad4:	mvn	r0, #0
   18ad8:	str	r3, [sp, #4]
   18adc:	bl	1c12c <close_stdout@@Base+0x70b0>
   18ae0:	ldr	r3, [sp, #4]
   18ae4:	mov	r1, #7
   18ae8:	mov	r2, #0
   18aec:	cmp	r0, sl
   18af0:	movcs	ip, #0
   18af4:	movcc	ip, #1
   18af8:	mulcs	sl, fp, sl
   18afc:	mvncc	sl, #0
   18b00:	subs	r1, r1, #1
   18b04:	orr	r2, r2, ip
   18b08:	bne	18aec <close_stdout@@Base+0x3a70>
   18b0c:	b	18a84 <close_stdout@@Base+0x3a08>
   18b10:	mov	r1, fp
   18b14:	mvn	r0, #0
   18b18:	str	r3, [sp, #4]
   18b1c:	bl	1c12c <close_stdout@@Base+0x70b0>
   18b20:	ldr	r3, [sp, #4]
   18b24:	mov	r1, #8
   18b28:	mov	r2, #0
   18b2c:	cmp	r0, sl
   18b30:	movcs	ip, #0
   18b34:	movcc	ip, #1
   18b38:	mulcs	sl, fp, sl
   18b3c:	mvncc	sl, #0
   18b40:	subs	r1, r1, #1
   18b44:	orr	r2, r2, ip
   18b48:	bne	18b2c <close_stdout@@Base+0x3ab0>
   18b4c:	b	18a84 <close_stdout@@Base+0x3a08>
   18b50:	mov	r1, fp
   18b54:	mvn	r0, #0
   18b58:	str	r3, [sp, #4]
   18b5c:	bl	1c12c <close_stdout@@Base+0x70b0>
   18b60:	ldr	r3, [sp, #4]
   18b64:	mov	r1, #4
   18b68:	mov	r2, #0
   18b6c:	cmp	r0, sl
   18b70:	movcs	ip, #0
   18b74:	movcc	ip, #1
   18b78:	mulcs	sl, fp, sl
   18b7c:	mvncc	sl, #0
   18b80:	subs	r1, r1, #1
   18b84:	orr	r2, r2, ip
   18b88:	bne	18b6c <close_stdout@@Base+0x3af0>
   18b8c:	b	18a84 <close_stdout@@Base+0x3a08>
   18b90:	mov	r1, fp
   18b94:	mvn	r0, #0
   18b98:	str	r3, [sp, #4]
   18b9c:	bl	1c12c <close_stdout@@Base+0x70b0>
   18ba0:	ldr	r3, [sp, #4]
   18ba4:	mov	r1, #5
   18ba8:	mov	r2, #0
   18bac:	cmp	r0, sl
   18bb0:	movcs	ip, #0
   18bb4:	movcc	ip, #1
   18bb8:	mulcs	sl, fp, sl
   18bbc:	mvncc	sl, #0
   18bc0:	subs	r1, r1, #1
   18bc4:	orr	r2, r2, ip
   18bc8:	bne	18bac <close_stdout@@Base+0x3b30>
   18bcc:	b	18a84 <close_stdout@@Base+0x3a08>
   18bd0:	mvn	r0, #0
   18bd4:	mov	r1, fp
   18bd8:	str	r3, [sp, #4]
   18bdc:	bl	1c12c <close_stdout@@Base+0x70b0>
   18be0:	ldr	r3, [sp, #4]
   18be4:	cmp	sl, r0
   18be8:	bhi	18cdc <close_stdout@@Base+0x3c60>
   18bec:	mul	sl, sl, fp
   18bf0:	cmp	r0, sl
   18bf4:	bcc	18cdc <close_stdout@@Base+0x3c60>
   18bf8:	mul	sl, fp, sl
   18bfc:	mov	r2, #0
   18c00:	b	18a84 <close_stdout@@Base+0x3a08>
   18c04:	mvn	r0, #0
   18c08:	mov	r1, fp
   18c0c:	str	r3, [sp, #4]
   18c10:	bl	1c12c <close_stdout@@Base+0x70b0>
   18c14:	ldr	r3, [sp, #4]
   18c18:	cmp	sl, r0
   18c1c:	bhi	18ab0 <close_stdout@@Base+0x3a34>
   18c20:	b	18bf8 <close_stdout@@Base+0x3b7c>
   18c24:	mov	r1, fp
   18c28:	mvn	r0, #0
   18c2c:	str	r3, [sp, #4]
   18c30:	bl	1c12c <close_stdout@@Base+0x70b0>
   18c34:	ldr	r3, [sp, #4]
   18c38:	mov	r1, #6
   18c3c:	mov	r2, #0
   18c40:	cmp	r0, sl
   18c44:	movcs	ip, #0
   18c48:	movcc	ip, #1
   18c4c:	mulcs	sl, fp, sl
   18c50:	mvncc	sl, #0
   18c54:	subs	r1, r1, #1
   18c58:	orr	r2, r2, ip
   18c5c:	bne	18c40 <close_stdout@@Base+0x3bc4>
   18c60:	b	18a84 <close_stdout@@Base+0x3a08>
   18c64:	cmp	sl, #4194304	; 0x400000
   18c68:	lslcc	sl, sl, #10
   18c6c:	movcc	r2, #0
   18c70:	bcc	18a84 <close_stdout@@Base+0x3a08>
   18c74:	b	18ab0 <close_stdout@@Base+0x3a34>
   18c78:	mov	r1, fp
   18c7c:	mvn	r0, #0
   18c80:	str	r3, [sp, #4]
   18c84:	bl	1c12c <close_stdout@@Base+0x70b0>
   18c88:	ldr	r3, [sp, #4]
   18c8c:	mov	r1, #3
   18c90:	mov	r2, #0
   18c94:	cmp	r0, sl
   18c98:	movcs	ip, #0
   18c9c:	movcc	ip, #1
   18ca0:	mulcs	sl, fp, sl
   18ca4:	mvncc	sl, #0
   18ca8:	subs	r1, r1, #1
   18cac:	orr	r2, r2, ip
   18cb0:	bne	18c94 <close_stdout@@Base+0x3c18>
   18cb4:	b	18a84 <close_stdout@@Base+0x3a08>
   18cb8:	ldrb	r8, [r3, #2]
   18cbc:	mov	fp, #1024	; 0x400
   18cc0:	cmp	r8, #66	; 0x42
   18cc4:	moveq	r8, #3
   18cc8:	movne	r8, #1
   18ccc:	b	18954 <close_stdout@@Base+0x38d8>
   18cd0:	mov	r8, #2
   18cd4:	mov	fp, #1000	; 0x3e8
   18cd8:	b	18954 <close_stdout@@Base+0x38d8>
   18cdc:	mov	r2, #1
   18ce0:	mvn	sl, #0
   18ce4:	b	18a84 <close_stdout@@Base+0x3a08>
   18ce8:	bl	11634 <__stack_chk_fail@plt>
   18cec:	ldr	r0, [pc, #32]	; 18d14 <close_stdout@@Base+0x3c98>
   18cf0:	mov	r2, #96	; 0x60
   18cf4:	ldr	r1, [pc, #28]	; 18d18 <close_stdout@@Base+0x3c9c>
   18cf8:	ldr	r3, [pc, #28]	; 18d1c <close_stdout@@Base+0x3ca0>
   18cfc:	add	r0, pc, r0
   18d00:	add	r1, pc, r1
   18d04:	add	r3, pc, r3
   18d08:	bl	11958 <__assert_fail@plt>
   18d0c:	andeq	r6, r1, r0, lsl #16
   18d10:	andeq	r0, r0, ip, ror r1
   18d14:	andeq	r5, r0, ip, ror #6
   18d18:	muleq	r0, r0, r3
   18d1c:	andeq	r5, r0, r8, asr r3
   18d20:	ldr	ip, [pc, #1852]	; 19464 <close_stdout@@Base+0x43e8>
   18d24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18d28:	mov	fp, r2
   18d2c:	ldr	r2, [pc, #1844]	; 19468 <close_stdout@@Base+0x43ec>
   18d30:	add	ip, pc, ip
   18d34:	mov	r9, r3
   18d38:	sub	sp, sp, #36	; 0x24
   18d3c:	mov	r3, ip
   18d40:	cmp	fp, #36	; 0x24
   18d44:	ldr	sl, [ip, r2]
   18d48:	mov	r5, r0
   18d4c:	mov	r8, r1
   18d50:	ldr	r6, [sp, #72]	; 0x48
   18d54:	ldr	r3, [sl]
   18d58:	str	r3, [sp, #28]
   18d5c:	bhi	19444 <close_stdout@@Base+0x43c8>
   18d60:	cmp	r1, #0
   18d64:	addeq	r8, sp, #24
   18d68:	bl	11760 <__ctype_b_loc@plt>
   18d6c:	ldrb	r3, [r5]
   18d70:	mov	r1, r5
   18d74:	ldr	r0, [r0]
   18d78:	b	18d80 <close_stdout@@Base+0x3d04>
   18d7c:	ldrb	r3, [r1, #1]!
   18d80:	lsl	r2, r3, #1
   18d84:	ldrh	r4, [r0, r2]
   18d88:	and	r4, r4, #8192	; 0x2000
   18d8c:	uxth	r4, r4
   18d90:	cmp	r4, #0
   18d94:	bne	18d7c <close_stdout@@Base+0x3d00>
   18d98:	cmp	r3, #45	; 0x2d
   18d9c:	bne	18dbc <close_stdout@@Base+0x3d40>
   18da0:	mov	r0, #4
   18da4:	ldr	r2, [sp, #28]
   18da8:	ldr	r3, [sl]
   18dac:	cmp	r2, r3
   18db0:	bne	19440 <close_stdout@@Base+0x43c4>
   18db4:	add	sp, sp, #36	; 0x24
   18db8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18dbc:	bl	117f0 <__errno_location@plt>
   18dc0:	mov	r2, fp
   18dc4:	mov	r1, r8
   18dc8:	mov	r3, r4
   18dcc:	str	r4, [r0]
   18dd0:	mov	r7, r0
   18dd4:	mov	r0, r5
   18dd8:	bl	115ec <__strtoull_internal@plt>
   18ddc:	ldr	fp, [r8]
   18de0:	cmp	fp, r5
   18de4:	strd	r0, [sp]
   18de8:	beq	18f64 <close_stdout@@Base+0x3ee8>
   18dec:	ldr	ip, [r7]
   18df0:	cmp	ip, #0
   18df4:	bne	18e20 <close_stdout@@Base+0x3da4>
   18df8:	mov	r7, ip
   18dfc:	cmp	r6, #0
   18e00:	beq	193d0 <close_stdout@@Base+0x4354>
   18e04:	ldrb	r5, [fp]
   18e08:	cmp	r5, #0
   18e0c:	bne	18e30 <close_stdout@@Base+0x3db4>
   18e10:	ldrd	r2, [sp]
   18e14:	mov	r0, r7
   18e18:	strd	r2, [r9]
   18e1c:	b	18da4 <close_stdout@@Base+0x3d28>
   18e20:	cmp	ip, #34	; 0x22
   18e24:	moveq	r7, #1
   18e28:	bne	18da0 <close_stdout@@Base+0x3d24>
   18e2c:	b	18dfc <close_stdout@@Base+0x3d80>
   18e30:	mov	r0, r6
   18e34:	mov	r1, r5
   18e38:	bl	117a8 <strchr@plt>
   18e3c:	cmp	r0, #0
   18e40:	beq	18fa0 <close_stdout@@Base+0x3f24>
   18e44:	mov	r0, r6
   18e48:	mov	r1, #48	; 0x30
   18e4c:	bl	117a8 <strchr@plt>
   18e50:	cmp	r0, #0
   18e54:	beq	18e74 <close_stdout@@Base+0x3df8>
   18e58:	ldrb	r3, [fp, #1]
   18e5c:	cmp	r3, #68	; 0x44
   18e60:	beq	193f8 <close_stdout@@Base+0x437c>
   18e64:	cmp	r3, #105	; 0x69
   18e68:	beq	193e0 <close_stdout@@Base+0x4364>
   18e6c:	cmp	r3, #66	; 0x42
   18e70:	beq	193f8 <close_stdout@@Base+0x437c>
   18e74:	mov	r6, #1
   18e78:	mov	r4, #1024	; 0x400
   18e7c:	sub	r5, r5, #66	; 0x42
   18e80:	cmp	r5, #53	; 0x35
   18e84:	addls	pc, pc, r5, lsl #2
   18e88:	b	18fa0 <close_stdout@@Base+0x3f24>
   18e8c:	b	19248 <close_stdout@@Base+0x41cc>
   18e90:	b	18fa0 <close_stdout@@Base+0x3f24>
   18e94:	b	18fa0 <close_stdout@@Base+0x3f24>
   18e98:	b	191dc <close_stdout@@Base+0x4160>
   18e9c:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ea0:	b	19170 <close_stdout@@Base+0x40f4>
   18ea4:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ea8:	b	18fa0 <close_stdout@@Base+0x3f24>
   18eac:	b	18fa0 <close_stdout@@Base+0x3f24>
   18eb0:	b	19118 <close_stdout@@Base+0x409c>
   18eb4:	b	18fa0 <close_stdout@@Base+0x3f24>
   18eb8:	b	192f0 <close_stdout@@Base+0x4274>
   18ebc:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ec0:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ec4:	b	19284 <close_stdout@@Base+0x4208>
   18ec8:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ecc:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ed0:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ed4:	b	19364 <close_stdout@@Base+0x42e8>
   18ed8:	b	18fa0 <close_stdout@@Base+0x3f24>
   18edc:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ee0:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ee4:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ee8:	b	190ac <close_stdout@@Base+0x4030>
   18eec:	b	19034 <close_stdout@@Base+0x3fb8>
   18ef0:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ef4:	b	18fa0 <close_stdout@@Base+0x3f24>
   18ef8:	b	18fa0 <close_stdout@@Base+0x3f24>
   18efc:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f00:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f04:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f08:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f0c:	b	18ff8 <close_stdout@@Base+0x3f7c>
   18f10:	b	18fb0 <close_stdout@@Base+0x3f34>
   18f14:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f18:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f1c:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f20:	b	19170 <close_stdout@@Base+0x40f4>
   18f24:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f28:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f2c:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f30:	b	19118 <close_stdout@@Base+0x409c>
   18f34:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f38:	b	192f0 <close_stdout@@Base+0x4274>
   18f3c:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f40:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f44:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f48:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f4c:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f50:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f54:	b	19364 <close_stdout@@Base+0x42e8>
   18f58:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f5c:	b	18fa0 <close_stdout@@Base+0x3f24>
   18f60:	b	18fd0 <close_stdout@@Base+0x3f54>
   18f64:	cmp	r6, #0
   18f68:	beq	18da0 <close_stdout@@Base+0x3d24>
   18f6c:	ldrb	r5, [r5]
   18f70:	cmp	r5, #0
   18f74:	beq	18da0 <close_stdout@@Base+0x3d24>
   18f78:	mov	r0, r6
   18f7c:	mov	r1, r5
   18f80:	bl	117a8 <strchr@plt>
   18f84:	cmp	r0, #0
   18f88:	beq	18da0 <close_stdout@@Base+0x3d24>
   18f8c:	mov	r0, #1
   18f90:	mov	r1, #0
   18f94:	mov	r7, r4
   18f98:	strd	r0, [sp]
   18f9c:	b	18e44 <close_stdout@@Base+0x3dc8>
   18fa0:	ldrd	r2, [sp]
   18fa4:	orr	r0, r7, #2
   18fa8:	strd	r2, [r9]
   18fac:	b	18da4 <close_stdout@@Base+0x3d28>
   18fb0:	mov	r3, #0
   18fb4:	add	r2, fp, r6
   18fb8:	str	r2, [r8]
   18fbc:	ldrb	r2, [fp, r6]
   18fc0:	orr	r7, r7, r3
   18fc4:	cmp	r2, #0
   18fc8:	orrne	r7, r7, #2
   18fcc:	b	18e10 <close_stdout@@Base+0x3d94>
   18fd0:	ldrd	r2, [sp]
   18fd4:	cmp	r2, #0
   18fd8:	sbcs	r3, r3, #0
   18fdc:	blt	19418 <close_stdout@@Base+0x439c>
   18fe0:	ldrd	r0, [sp]
   18fe4:	mov	r3, #0
   18fe8:	adds	r0, r0, r0
   18fec:	adc	r1, r1, r1
   18ff0:	strd	r0, [sp]
   18ff4:	b	18fb4 <close_stdout@@Base+0x3f38>
   18ff8:	ldrd	r0, [sp]
   18ffc:	movw	r3, #65535	; 0xffff
   19000:	movt	r3, #127	; 0x7f
   19004:	mvn	r2, #0
   19008:	cmp	r1, r3
   1900c:	cmpeq	r0, r2
   19010:	bhi	19418 <close_stdout@@Base+0x439c>
   19014:	lsl	r2, r1, #9
   19018:	ldr	r1, [sp]
   1901c:	lsl	r3, r0, #9
   19020:	str	r3, [sp]
   19024:	mov	r3, #0
   19028:	orr	r2, r2, r1, lsr #23
   1902c:	str	r2, [sp, #4]
   19030:	b	18fb4 <close_stdout@@Base+0x3f38>
   19034:	asr	r5, r4, #31
   19038:	mov	r2, r4
   1903c:	mvn	r0, #0
   19040:	mvn	r1, #0
   19044:	mov	r3, r5
   19048:	bl	1c338 <close_stdout@@Base+0x72bc>
   1904c:	mov	ip, r7
   19050:	str	r6, [sp, #20]
   19054:	mov	r2, #7
   19058:	ldrd	r6, [sp]
   1905c:	mov	r3, #0
   19060:	strd	r0, [sp, #8]
   19064:	ldrd	r0, [sp, #8]
   19068:	cmp	r1, r7
   1906c:	cmpeq	r0, r6
   19070:	mulcs	r0, r6, r5
   19074:	movcs	r1, #0
   19078:	mlacs	r0, r4, r7, r0
   1907c:	movcc	r1, #1
   19080:	umullcs	r6, r7, r6, r4
   19084:	mvncc	r6, #0
   19088:	mvncc	r7, #0
   1908c:	orr	r3, r3, r1
   19090:	addcs	r7, r0, r7
   19094:	subs	r2, r2, #1
   19098:	bne	19064 <close_stdout@@Base+0x3fe8>
   1909c:	strd	r6, [sp]
   190a0:	mov	r7, ip
   190a4:	ldr	r6, [sp, #20]
   190a8:	b	18fb4 <close_stdout@@Base+0x3f38>
   190ac:	asr	r5, r4, #31
   190b0:	mov	r2, r4
   190b4:	mvn	r0, #0
   190b8:	mvn	r1, #0
   190bc:	mov	r3, r5
   190c0:	bl	1c338 <close_stdout@@Base+0x72bc>
   190c4:	mov	ip, r7
   190c8:	str	r6, [sp, #20]
   190cc:	mov	r2, #8
   190d0:	ldrd	r6, [sp]
   190d4:	mov	r3, #0
   190d8:	strd	r0, [sp, #8]
   190dc:	ldrd	r0, [sp, #8]
   190e0:	cmp	r1, r7
   190e4:	cmpeq	r0, r6
   190e8:	mulcs	r0, r6, r5
   190ec:	movcs	r1, #0
   190f0:	mlacs	r0, r4, r7, r0
   190f4:	movcc	r1, #1
   190f8:	umullcs	r6, r7, r6, r4
   190fc:	mvncc	r6, #0
   19100:	mvncc	r7, #0
   19104:	orr	r3, r3, r1
   19108:	addcs	r7, r0, r7
   1910c:	subs	r2, r2, #1
   19110:	bne	190dc <close_stdout@@Base+0x4060>
   19114:	b	1909c <close_stdout@@Base+0x4020>
   19118:	mov	r2, r4
   1911c:	asr	r3, r4, #31
   19120:	mvn	r0, #0
   19124:	mvn	r1, #0
   19128:	strd	r2, [sp, #8]
   1912c:	bl	1c338 <close_stdout@@Base+0x72bc>
   19130:	ldrd	r2, [sp]
   19134:	cmp	r3, r1
   19138:	cmpeq	r2, r0
   1913c:	bhi	19404 <close_stdout@@Base+0x4388>
   19140:	ldr	r3, [sp]
   19144:	ldr	ip, [sp, #12]
   19148:	ldr	r0, [sp, #4]
   1914c:	ldr	r1, [sp]
   19150:	mul	r2, r3, ip
   19154:	mov	r3, #0
   19158:	mla	r2, r4, r0, r2
   1915c:	umull	r0, r1, r1, r4
   19160:	add	r2, r2, r1
   19164:	strd	r0, [sp]
   19168:	str	r2, [sp, #4]
   1916c:	b	18fb4 <close_stdout@@Base+0x3f38>
   19170:	asr	r5, r4, #31
   19174:	mov	r2, r4
   19178:	mvn	r0, #0
   1917c:	mvn	r1, #0
   19180:	mov	r3, r5
   19184:	bl	1c338 <close_stdout@@Base+0x72bc>
   19188:	mov	ip, r7
   1918c:	str	r6, [sp, #20]
   19190:	mov	r2, #3
   19194:	ldrd	r6, [sp]
   19198:	mov	r3, #0
   1919c:	strd	r0, [sp, #8]
   191a0:	ldrd	r0, [sp, #8]
   191a4:	cmp	r1, r7
   191a8:	cmpeq	r0, r6
   191ac:	mulcs	r0, r6, r5
   191b0:	movcs	r1, #0
   191b4:	mlacs	r0, r4, r7, r0
   191b8:	movcc	r1, #1
   191bc:	umullcs	r6, r7, r6, r4
   191c0:	mvncc	r6, #0
   191c4:	mvncc	r7, #0
   191c8:	orr	r3, r3, r1
   191cc:	addcs	r7, r0, r7
   191d0:	subs	r2, r2, #1
   191d4:	bne	191a0 <close_stdout@@Base+0x4124>
   191d8:	b	1909c <close_stdout@@Base+0x4020>
   191dc:	asr	r5, r4, #31
   191e0:	mov	r2, r4
   191e4:	mvn	r0, #0
   191e8:	mvn	r1, #0
   191ec:	mov	r3, r5
   191f0:	bl	1c338 <close_stdout@@Base+0x72bc>
   191f4:	mov	ip, r7
   191f8:	str	r6, [sp, #20]
   191fc:	mov	r2, #6
   19200:	ldrd	r6, [sp]
   19204:	mov	r3, #0
   19208:	strd	r0, [sp, #8]
   1920c:	ldrd	r0, [sp, #8]
   19210:	cmp	r1, r7
   19214:	cmpeq	r0, r6
   19218:	mulcs	r0, r6, r5
   1921c:	movcs	r1, #0
   19220:	mlacs	r0, r4, r7, r0
   19224:	movcc	r1, #1
   19228:	umullcs	r6, r7, r6, r4
   1922c:	mvncc	r6, #0
   19230:	mvncc	r7, #0
   19234:	orr	r3, r3, r1
   19238:	addcs	r7, r0, r7
   1923c:	subs	r2, r2, #1
   19240:	bne	1920c <close_stdout@@Base+0x4190>
   19244:	b	1909c <close_stdout@@Base+0x4020>
   19248:	ldrd	r0, [sp]
   1924c:	movw	r3, #65535	; 0xffff
   19250:	movt	r3, #63	; 0x3f
   19254:	mvn	r2, #0
   19258:	cmp	r1, r3
   1925c:	cmpeq	r0, r2
   19260:	bhi	19404 <close_stdout@@Base+0x4388>
   19264:	lsl	r2, r1, #10
   19268:	ldr	r1, [sp]
   1926c:	lsl	r3, r0, #10
   19270:	str	r3, [sp]
   19274:	mov	r3, #0
   19278:	orr	r2, r2, r1, lsr #22
   1927c:	str	r2, [sp, #4]
   19280:	b	18fb4 <close_stdout@@Base+0x3f38>
   19284:	asr	r5, r4, #31
   19288:	mov	r2, r4
   1928c:	mvn	r0, #0
   19290:	mvn	r1, #0
   19294:	mov	r3, r5
   19298:	bl	1c338 <close_stdout@@Base+0x72bc>
   1929c:	mov	ip, r7
   192a0:	str	r6, [sp, #20]
   192a4:	mov	r2, #5
   192a8:	ldrd	r6, [sp]
   192ac:	mov	r3, #0
   192b0:	strd	r0, [sp, #8]
   192b4:	ldrd	r0, [sp, #8]
   192b8:	cmp	r1, r7
   192bc:	cmpeq	r0, r6
   192c0:	mulcs	r0, r6, r5
   192c4:	movcs	r1, #0
   192c8:	mlacs	r0, r4, r7, r0
   192cc:	movcc	r1, #1
   192d0:	umullcs	r6, r7, r6, r4
   192d4:	mvncc	r6, #0
   192d8:	mvncc	r7, #0
   192dc:	orr	r3, r3, r1
   192e0:	addcs	r7, r0, r7
   192e4:	subs	r2, r2, #1
   192e8:	bne	192b4 <close_stdout@@Base+0x4238>
   192ec:	b	1909c <close_stdout@@Base+0x4020>
   192f0:	mov	r2, r4
   192f4:	asr	r3, r4, #31
   192f8:	mvn	r0, #0
   192fc:	mvn	r1, #0
   19300:	strd	r2, [sp, #8]
   19304:	bl	1c338 <close_stdout@@Base+0x72bc>
   19308:	ldrd	r2, [sp]
   1930c:	cmp	r3, r1
   19310:	cmpeq	r2, r0
   19314:	bhi	1942c <close_stdout@@Base+0x43b0>
   19318:	ldr	ip, [sp, #4]
   1931c:	mul	r3, r4, ip
   19320:	ldr	ip, [sp, #12]
   19324:	mla	r3, r2, ip, r3
   19328:	ldr	r2, [sp]
   1932c:	umull	r4, r5, r4, r2
   19330:	add	r5, r3, r5
   19334:	cmp	r1, r5
   19338:	cmpeq	r0, r4
   1933c:	bcc	1942c <close_stdout@@Base+0x43b0>
   19340:	mul	r2, r4, ip
   19344:	ldr	ip, [sp, #8]
   19348:	mov	r3, #0
   1934c:	umull	r0, r1, r4, ip
   19350:	mla	r2, ip, r5, r2
   19354:	strd	r0, [sp]
   19358:	add	r2, r2, r1
   1935c:	str	r2, [sp, #4]
   19360:	b	18fb4 <close_stdout@@Base+0x3f38>
   19364:	asr	r5, r4, #31
   19368:	mov	r2, r4
   1936c:	mvn	r0, #0
   19370:	mvn	r1, #0
   19374:	mov	r3, r5
   19378:	bl	1c338 <close_stdout@@Base+0x72bc>
   1937c:	mov	ip, r7
   19380:	str	r6, [sp, #20]
   19384:	mov	r2, #4
   19388:	ldrd	r6, [sp]
   1938c:	mov	r3, #0
   19390:	strd	r0, [sp, #8]
   19394:	ldrd	r0, [sp, #8]
   19398:	cmp	r1, r7
   1939c:	cmpeq	r0, r6
   193a0:	mulcs	r0, r6, r5
   193a4:	movcs	r1, #0
   193a8:	mlacs	r0, r4, r7, r0
   193ac:	movcc	r1, #1
   193b0:	umullcs	r6, r7, r6, r4
   193b4:	mvncc	r6, #0
   193b8:	mvncc	r7, #0
   193bc:	orr	r3, r3, r1
   193c0:	addcs	r7, r0, r7
   193c4:	subs	r2, r2, #1
   193c8:	bne	19394 <close_stdout@@Base+0x4318>
   193cc:	b	1909c <close_stdout@@Base+0x4020>
   193d0:	ldrd	r0, [sp]
   193d4:	strd	r0, [r9]
   193d8:	mov	r0, r7
   193dc:	b	18da4 <close_stdout@@Base+0x3d28>
   193e0:	ldrb	r3, [fp, #2]
   193e4:	mov	r4, #1024	; 0x400
   193e8:	cmp	r3, #66	; 0x42
   193ec:	moveq	r6, #3
   193f0:	movne	r6, #1
   193f4:	b	18e7c <close_stdout@@Base+0x3e00>
   193f8:	mov	r6, #2
   193fc:	mov	r4, #1000	; 0x3e8
   19400:	b	18e7c <close_stdout@@Base+0x3e00>
   19404:	mvn	r3, #0
   19408:	mvn	r2, #0
   1940c:	strd	r2, [sp]
   19410:	mov	r3, #1
   19414:	b	18fb4 <close_stdout@@Base+0x3f38>
   19418:	mvn	r0, #0
   1941c:	mvn	r1, #0
   19420:	mov	r3, #1
   19424:	strd	r0, [sp]
   19428:	b	18fb4 <close_stdout@@Base+0x3f38>
   1942c:	mvn	r0, #0
   19430:	mvn	r1, #0
   19434:	mov	r3, #1
   19438:	strd	r0, [sp]
   1943c:	b	18fb4 <close_stdout@@Base+0x3f38>
   19440:	bl	11634 <__stack_chk_fail@plt>
   19444:	ldr	r0, [pc, #32]	; 1946c <close_stdout@@Base+0x43f0>
   19448:	mov	r2, #96	; 0x60
   1944c:	ldr	r1, [pc, #28]	; 19470 <close_stdout@@Base+0x43f4>
   19450:	ldr	r3, [pc, #28]	; 19474 <close_stdout@@Base+0x43f8>
   19454:	add	r0, pc, r0
   19458:	add	r1, pc, r1
   1945c:	add	r3, pc, r3
   19460:	bl	11958 <__assert_fail@plt>
   19464:	andeq	r6, r1, r8, asr #5
   19468:	andeq	r0, r0, ip, ror r1
   1946c:	andeq	r4, r0, r4, lsl ip
   19470:	andeq	r4, r0, r8, lsr ip
   19474:	andeq	r4, r0, r4, asr #24
   19478:	push	{r4, r5, r6, lr}
   1947c:	sub	sp, sp, #8
   19480:	mov	r4, r0
   19484:	bl	1185c <fileno@plt>
   19488:	cmp	r0, #0
   1948c:	mov	r0, r4
   19490:	blt	1950c <close_stdout@@Base+0x4490>
   19494:	bl	1173c <__freading@plt>
   19498:	cmp	r0, #0
   1949c:	bne	194d8 <close_stdout@@Base+0x445c>
   194a0:	mov	r0, r4
   194a4:	bl	19518 <close_stdout@@Base+0x449c>
   194a8:	cmp	r0, #0
   194ac:	beq	19508 <close_stdout@@Base+0x448c>
   194b0:	bl	117f0 <__errno_location@plt>
   194b4:	ldr	r6, [r0]
   194b8:	mov	r5, r0
   194bc:	mov	r0, r4
   194c0:	bl	11880 <fclose@plt>
   194c4:	cmp	r6, #0
   194c8:	mvnne	r0, #0
   194cc:	strne	r6, [r5]
   194d0:	add	sp, sp, #8
   194d4:	pop	{r4, r5, r6, pc}
   194d8:	mov	r0, r4
   194dc:	bl	1185c <fileno@plt>
   194e0:	mov	r1, #1
   194e4:	mov	r2, #0
   194e8:	mov	r3, #0
   194ec:	str	r1, [sp]
   194f0:	bl	116a0 <lseek64@plt>
   194f4:	mvn	r2, #0
   194f8:	mvn	r3, #0
   194fc:	cmp	r1, r3
   19500:	cmpeq	r0, r2
   19504:	bne	194a0 <close_stdout@@Base+0x4424>
   19508:	mov	r0, r4
   1950c:	add	sp, sp, #8
   19510:	pop	{r4, r5, r6, lr}
   19514:	b	11880 <fclose@plt>
   19518:	push	{r4, lr}
   1951c:	subs	r4, r0, #0
   19520:	sub	sp, sp, #8
   19524:	beq	19534 <close_stdout@@Base+0x44b8>
   19528:	bl	1173c <__freading@plt>
   1952c:	cmp	r0, #0
   19530:	bne	19544 <close_stdout@@Base+0x44c8>
   19534:	mov	r0, r4
   19538:	add	sp, sp, #8
   1953c:	pop	{r4, lr}
   19540:	b	11598 <fflush@plt>
   19544:	ldr	r3, [r4]
   19548:	tst	r3, #256	; 0x100
   1954c:	beq	19534 <close_stdout@@Base+0x44b8>
   19550:	mov	r3, #1
   19554:	mov	r0, r4
   19558:	str	r3, [sp]
   1955c:	mov	r2, #0
   19560:	mov	r3, #0
   19564:	bl	19578 <close_stdout@@Base+0x44fc>
   19568:	mov	r0, r4
   1956c:	add	sp, sp, #8
   19570:	pop	{r4, lr}
   19574:	b	11598 <fflush@plt>
   19578:	push	{r4, r5, r6, r7, lr}
   1957c:	sub	sp, sp, #20
   19580:	ldmib	r0, {r1, ip}
   19584:	mov	r6, r0
   19588:	ldr	r4, [sp, #40]	; 0x28
   1958c:	cmp	ip, r1
   19590:	beq	195a8 <close_stdout@@Base+0x452c>
   19594:	str	r4, [sp, #40]	; 0x28
   19598:	mov	r0, r6
   1959c:	add	sp, sp, #20
   195a0:	pop	{r4, r5, r6, r7, lr}
   195a4:	b	118a4 <fseeko64@plt>
   195a8:	ldr	ip, [r0, #20]
   195ac:	ldr	r1, [r0, #16]
   195b0:	cmp	ip, r1
   195b4:	bne	19594 <close_stdout@@Base+0x4518>
   195b8:	ldr	r7, [r0, #36]	; 0x24
   195bc:	cmp	r7, #0
   195c0:	bne	19594 <close_stdout@@Base+0x4518>
   195c4:	str	r2, [sp, #12]
   195c8:	mvn	r5, #0
   195cc:	str	r3, [sp, #8]
   195d0:	bl	1185c <fileno@plt>
   195d4:	str	r4, [sp]
   195d8:	mvn	r4, #0
   195dc:	ldr	r2, [sp, #12]
   195e0:	ldr	r3, [sp, #8]
   195e4:	bl	116a0 <lseek64@plt>
   195e8:	mov	r2, r0
   195ec:	mov	r3, r1
   195f0:	cmp	r3, r5
   195f4:	cmpeq	r2, r4
   195f8:	beq	19618 <close_stdout@@Base+0x459c>
   195fc:	ldr	r1, [r6]
   19600:	mov	r0, r7
   19604:	strd	r2, [r6, #80]	; 0x50
   19608:	bic	r3, r1, #16
   1960c:	str	r3, [r6]
   19610:	add	sp, sp, #20
   19614:	pop	{r4, r5, r6, r7, pc}
   19618:	mvn	r0, #0
   1961c:	b	19610 <close_stdout@@Base+0x4594>
   19620:	ldr	r3, [pc, #416]	; 197c8 <close_stdout@@Base+0x474c>
   19624:	ldr	r2, [pc, #416]	; 197cc <close_stdout@@Base+0x4750>
   19628:	add	r3, pc, r3
   1962c:	push	{r4, r5, r6, r7, r8, lr}
   19630:	mov	r8, r1
   19634:	ldr	r7, [r3, r2]
   19638:	sub	sp, sp, #8
   1963c:	ldrb	r1, [r0]
   19640:	mov	r6, r0
   19644:	sub	r3, r1, #48	; 0x30
   19648:	cmp	r3, #9
   1964c:	ldr	r3, [r7]
   19650:	str	r3, [sp, #4]
   19654:	bls	196c0 <close_stdout@@Base+0x4644>
   19658:	ldr	r5, [pc, #368]	; 197d0 <close_stdout@@Base+0x4754>
   1965c:	mov	r4, #0
   19660:	add	r5, pc, r5
   19664:	add	r5, r5, #4
   19668:	b	1967c <close_stdout@@Base+0x4600>
   1966c:	add	r4, r4, #1
   19670:	add	r5, r5, #12
   19674:	cmp	r4, #35	; 0x23
   19678:	beq	196ec <close_stdout@@Base+0x4670>
   1967c:	mov	r0, r5
   19680:	mov	r1, r6
   19684:	bl	11574 <strcmp@plt>
   19688:	cmp	r0, #0
   1968c:	bne	1966c <close_stdout@@Base+0x45f0>
   19690:	ldr	r3, [pc, #316]	; 197d4 <close_stdout@@Base+0x4758>
   19694:	add	r4, r4, r4, lsl #1
   19698:	add	r3, pc, r3
   1969c:	ldr	r3, [r3, r4, lsl #2]
   196a0:	asr	r0, r3, #31
   196a4:	str	r3, [r8]
   196a8:	ldr	r2, [sp, #4]
   196ac:	ldr	r3, [r7]
   196b0:	cmp	r2, r3
   196b4:	bne	197c4 <close_stdout@@Base+0x4748>
   196b8:	add	sp, sp, #8
   196bc:	pop	{r4, r5, r6, r7, r8, pc}
   196c0:	mov	r1, sp
   196c4:	mov	r2, #10
   196c8:	bl	11580 <strtol@plt>
   196cc:	ldr	r3, [sp]
   196d0:	ldrb	r3, [r3]
   196d4:	cmp	r3, #0
   196d8:	bne	197b8 <close_stdout@@Base+0x473c>
   196dc:	cmp	r0, #64	; 0x40
   196e0:	bgt	197b8 <close_stdout@@Base+0x473c>
   196e4:	mov	r3, r0
   196e8:	b	196a0 <close_stdout@@Base+0x4624>
   196ec:	bl	1191c <__libc_current_sigrtmin@plt>
   196f0:	mov	r5, r0
   196f4:	bl	1179c <__libc_current_sigrtmax@plt>
   196f8:	cmp	r5, #0
   196fc:	mov	r4, r0
   19700:	ble	19720 <close_stdout@@Base+0x46a4>
   19704:	ldr	r1, [pc, #204]	; 197d8 <close_stdout@@Base+0x475c>
   19708:	mov	r0, r6
   1970c:	mov	r2, #5
   19710:	add	r1, pc, r1
   19714:	bl	11928 <strncmp@plt>
   19718:	cmp	r0, #0
   1971c:	beq	19780 <close_stdout@@Base+0x4704>
   19720:	cmp	r4, #0
   19724:	ble	197b8 <close_stdout@@Base+0x473c>
   19728:	ldr	r1, [pc, #172]	; 197dc <close_stdout@@Base+0x4760>
   1972c:	mov	r0, r6
   19730:	mov	r2, #5
   19734:	add	r1, pc, r1
   19738:	bl	11928 <strncmp@plt>
   1973c:	cmp	r0, #0
   19740:	bne	197b8 <close_stdout@@Base+0x473c>
   19744:	add	r0, r6, #5
   19748:	mov	r1, sp
   1974c:	mov	r2, #10
   19750:	bl	11580 <strtol@plt>
   19754:	ldr	r3, [sp]
   19758:	ldrb	r3, [r3]
   1975c:	cmp	r3, #0
   19760:	bne	197b8 <close_stdout@@Base+0x473c>
   19764:	rsb	r5, r4, r5
   19768:	cmp	r0, r5
   1976c:	blt	197b8 <close_stdout@@Base+0x473c>
   19770:	cmp	r0, #0
   19774:	bgt	197b8 <close_stdout@@Base+0x473c>
   19778:	add	r3, r4, r0
   1977c:	b	196a0 <close_stdout@@Base+0x4624>
   19780:	add	r0, r6, #5
   19784:	mov	r1, sp
   19788:	mov	r2, #10
   1978c:	bl	11580 <strtol@plt>
   19790:	ldr	r3, [sp]
   19794:	ldrb	r3, [r3]
   19798:	cmp	r3, #0
   1979c:	bne	197b8 <close_stdout@@Base+0x473c>
   197a0:	cmp	r0, #0
   197a4:	blt	197b8 <close_stdout@@Base+0x473c>
   197a8:	rsb	r4, r5, r4
   197ac:	cmp	r0, r4
   197b0:	addle	r3, r5, r0
   197b4:	ble	196a0 <close_stdout@@Base+0x4624>
   197b8:	mvn	r0, #0
   197bc:	str	r0, [r8]
   197c0:	b	196a8 <close_stdout@@Base+0x462c>
   197c4:	bl	11634 <__stack_chk_fail@plt>
   197c8:	ldrdeq	r5, [r1], -r0
   197cc:	andeq	r0, r0, ip, ror r1
   197d0:	andeq	r5, r1, r4, lsr #23
   197d4:	andeq	r5, r1, ip, ror #22
   197d8:	muleq	r0, ip, r9
   197dc:	andeq	r4, r0, r0, lsl #19
   197e0:	push	{r4, r5, r6, lr}
   197e4:	mov	r3, #0
   197e8:	ldr	lr, [pc, #236]	; 198dc <close_stdout@@Base+0x4860>
   197ec:	sub	sp, sp, #8
   197f0:	mov	r4, r0
   197f4:	mov	r5, r1
   197f8:	add	lr, pc, lr
   197fc:	mov	r2, r3
   19800:	b	19810 <close_stdout@@Base+0x4794>
   19804:	add	r2, r2, #1
   19808:	cmp	r2, #35	; 0x23
   1980c:	beq	19840 <close_stdout@@Base+0x47c4>
   19810:	ldr	ip, [r3, lr]
   19814:	add	r3, r3, #12
   19818:	cmp	ip, r4
   1981c:	bne	19804 <close_stdout@@Base+0x4788>
   19820:	add	r2, r2, r2, lsl #1
   19824:	mov	r0, r5
   19828:	add	r1, lr, r2, lsl #2
   1982c:	add	r1, r1, #4
   19830:	bl	116c4 <strcpy@plt>
   19834:	mov	r0, #0
   19838:	add	sp, sp, #8
   1983c:	pop	{r4, r5, r6, pc}
   19840:	bl	1191c <__libc_current_sigrtmin@plt>
   19844:	mov	r6, r0
   19848:	bl	1179c <__libc_current_sigrtmax@plt>
   1984c:	cmp	r6, r4
   19850:	cmple	r4, r0
   19854:	bgt	198d4 <close_stdout@@Base+0x4858>
   19858:	rsb	r3, r6, r0
   1985c:	add	r3, r3, r3, lsr #31
   19860:	add	r3, r6, r3, asr #1
   19864:	cmp	r4, r3
   19868:	ble	198b8 <close_stdout@@Base+0x483c>
   1986c:	ldr	r3, [pc, #108]	; 198e0 <close_stdout@@Base+0x4864>
   19870:	mov	r6, r0
   19874:	add	r3, pc, r3
   19878:	ldr	r0, [r3]
   1987c:	ldrh	r3, [r3, #4]
   19880:	str	r0, [r5]
   19884:	strh	r3, [r5, #4]
   19888:	subs	r0, r4, r6
   1988c:	beq	19838 <close_stdout@@Base+0x47bc>
   19890:	ldr	r3, [pc, #76]	; 198e4 <close_stdout@@Base+0x4868>
   19894:	mov	r1, #1
   19898:	str	r0, [sp]
   1989c:	mvn	r2, #0
   198a0:	add	r0, r5, #5
   198a4:	add	r3, pc, r3
   198a8:	bl	11808 <__sprintf_chk@plt>
   198ac:	mov	r0, #0
   198b0:	add	sp, sp, #8
   198b4:	pop	{r4, r5, r6, pc}
   198b8:	ldr	r3, [pc, #40]	; 198e8 <close_stdout@@Base+0x486c>
   198bc:	add	r3, pc, r3
   198c0:	ldr	r0, [r3]
   198c4:	ldrh	r3, [r3, #4]
   198c8:	str	r0, [r5]
   198cc:	strh	r3, [r5, #4]
   198d0:	b	19888 <close_stdout@@Base+0x480c>
   198d4:	mvn	r0, #0
   198d8:	b	19838 <close_stdout@@Base+0x47bc>
   198dc:	andeq	r5, r1, ip, lsl #20
   198e0:	andeq	r4, r0, r0, asr #16
   198e4:	andeq	r4, r0, r8, lsl r8
   198e8:	strdeq	r4, [r0], -r0
   198ec:	cmp	r0, r1
   198f0:	push	{r4}		; (str r4, [sp, #-4]!)
   198f4:	beq	19950 <close_stdout@@Base+0x48d4>
   198f8:	sub	r4, r0, #1
   198fc:	sub	r1, r1, #1
   19900:	b	1990c <close_stdout@@Base+0x4890>
   19904:	cmp	r2, ip
   19908:	bne	19944 <close_stdout@@Base+0x48c8>
   1990c:	ldrb	r3, [r4, #1]!
   19910:	sub	r0, r3, #65	; 0x41
   19914:	add	r2, r3, #32
   19918:	cmp	r0, #25
   1991c:	movhi	r2, r3
   19920:	ldrb	r3, [r1, #1]!
   19924:	uxtb	r2, r2
   19928:	sub	r0, r3, #65	; 0x41
   1992c:	add	ip, r3, #32
   19930:	cmp	r0, #25
   19934:	movhi	ip, r3
   19938:	cmp	r2, #0
   1993c:	uxtb	ip, ip
   19940:	bne	19904 <close_stdout@@Base+0x4888>
   19944:	rsb	r0, ip, r2
   19948:	pop	{r4}		; (ldr r4, [sp], #4)
   1994c:	bx	lr
   19950:	mov	r0, #0
   19954:	pop	{r4}		; (ldr r4, [sp], #4)
   19958:	bx	lr
   1995c:	push	{r4, r5, r6, lr}
   19960:	mov	r4, r0
   19964:	bl	116d0 <__fpending@plt>
   19968:	mov	r6, r0
   1996c:	mov	r0, r4
   19970:	ldr	r4, [r4]
   19974:	bl	19478 <close_stdout@@Base+0x43fc>
   19978:	and	r4, r4, #32
   1997c:	adds	r5, r0, #0
   19980:	movne	r5, #1
   19984:	cmp	r4, #0
   19988:	bne	199a8 <close_stdout@@Base+0x492c>
   1998c:	cmp	r5, #0
   19990:	beq	199a0 <close_stdout@@Base+0x4924>
   19994:	cmp	r6, #0
   19998:	beq	199c4 <close_stdout@@Base+0x4948>
   1999c:	mvn	r4, #0
   199a0:	mov	r0, r4
   199a4:	pop	{r4, r5, r6, pc}
   199a8:	cmp	r5, #0
   199ac:	bne	1999c <close_stdout@@Base+0x4920>
   199b0:	bl	117f0 <__errno_location@plt>
   199b4:	mvn	r4, #0
   199b8:	str	r5, [r0]
   199bc:	mov	r0, r4
   199c0:	pop	{r4, r5, r6, pc}
   199c4:	bl	117f0 <__errno_location@plt>
   199c8:	ldr	r4, [r0]
   199cc:	subs	r4, r4, #9
   199d0:	mvnne	r4, #0
   199d4:	mov	r0, r4
   199d8:	pop	{r4, r5, r6, pc}
   199dc:	ldr	r3, [pc, #984]	; 19dbc <close_stdout@@Base+0x4d40>
   199e0:	mov	r0, #14
   199e4:	ldr	r2, [pc, #980]	; 19dc0 <close_stdout@@Base+0x4d44>
   199e8:	add	r3, pc, r3
   199ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199f0:	sub	sp, sp, #132	; 0x84
   199f4:	ldr	r6, [r3, r2]
   199f8:	ldr	r3, [r6]
   199fc:	str	r3, [sp, #124]	; 0x7c
   19a00:	bl	118f8 <nl_langinfo@plt>
   19a04:	subs	r5, r0, #0
   19a08:	beq	19abc <close_stdout@@Base+0x4a40>
   19a0c:	ldr	r3, [pc, #944]	; 19dc4 <close_stdout@@Base+0x4d48>
   19a10:	ldr	r4, [pc, r3]
   19a14:	cmp	r4, #0
   19a18:	beq	19ac8 <close_stdout@@Base+0x4a4c>
   19a1c:	ldrb	r7, [r4]
   19a20:	cmp	r7, #0
   19a24:	bne	19a58 <close_stdout@@Base+0x49dc>
   19a28:	b	19a90 <close_stdout@@Base+0x4a14>
   19a2c:	mov	r0, r4
   19a30:	bl	11790 <strlen@plt>
   19a34:	add	r0, r0, #1
   19a38:	add	r7, r4, r0
   19a3c:	mov	r0, r7
   19a40:	bl	11790 <strlen@plt>
   19a44:	add	r0, r0, #1
   19a48:	add	r4, r7, r0
   19a4c:	ldrb	r7, [r7, r0]
   19a50:	cmp	r7, #0
   19a54:	beq	19a90 <close_stdout@@Base+0x4a14>
   19a58:	mov	r0, r5
   19a5c:	mov	r1, r4
   19a60:	bl	11574 <strcmp@plt>
   19a64:	cmp	r0, #0
   19a68:	beq	19a80 <close_stdout@@Base+0x4a04>
   19a6c:	cmp	r7, #42	; 0x2a
   19a70:	bne	19a2c <close_stdout@@Base+0x49b0>
   19a74:	ldrb	r3, [r4, #1]
   19a78:	cmp	r3, #0
   19a7c:	bne	19a2c <close_stdout@@Base+0x49b0>
   19a80:	mov	r0, r4
   19a84:	bl	11790 <strlen@plt>
   19a88:	add	r0, r0, #1
   19a8c:	add	r5, r4, r0
   19a90:	ldrb	r3, [r5]
   19a94:	cmp	r3, #0
   19a98:	ldreq	r5, [pc, #808]	; 19dc8 <close_stdout@@Base+0x4d4c>
   19a9c:	addeq	r5, pc, r5
   19aa0:	ldr	r2, [sp, #124]	; 0x7c
   19aa4:	mov	r0, r5
   19aa8:	ldr	r3, [r6]
   19aac:	cmp	r2, r3
   19ab0:	bne	19d90 <close_stdout@@Base+0x4d14>
   19ab4:	add	sp, sp, #132	; 0x84
   19ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19abc:	ldr	r5, [pc, #776]	; 19dcc <close_stdout@@Base+0x4d50>
   19ac0:	add	r5, pc, r5
   19ac4:	b	19a0c <close_stdout@@Base+0x4990>
   19ac8:	ldr	r0, [pc, #768]	; 19dd0 <close_stdout@@Base+0x4d54>
   19acc:	add	r0, pc, r0
   19ad0:	bl	11700 <getenv@plt>
   19ad4:	subs	r8, r0, #0
   19ad8:	beq	19d68 <close_stdout@@Base+0x4cec>
   19adc:	ldrb	r3, [r8]
   19ae0:	cmp	r3, #0
   19ae4:	beq	19cfc <close_stdout@@Base+0x4c80>
   19ae8:	bl	11790 <strlen@plt>
   19aec:	subs	sl, r0, #0
   19af0:	subne	r3, sl, #1
   19af4:	bne	19d0c <close_stdout@@Base+0x4c90>
   19af8:	mov	r9, #0
   19afc:	mov	fp, r9
   19b00:	add	r9, sl, r9
   19b04:	add	r0, r9, #14
   19b08:	bl	1170c <malloc@plt>
   19b0c:	subs	r7, r0, #0
   19b10:	beq	19d5c <close_stdout@@Base+0x4ce0>
   19b14:	mov	r1, r8
   19b18:	mov	r2, sl
   19b1c:	bl	115e0 <memcpy@plt>
   19b20:	cmp	fp, #0
   19b24:	add	ip, r7, r9
   19b28:	movne	r3, #47	; 0x2f
   19b2c:	strbne	r3, [r7, sl]
   19b30:	ldr	r3, [pc, #668]	; 19dd4 <close_stdout@@Base+0x4d58>
   19b34:	add	r3, pc, r3
   19b38:	ldm	r3!, {r0, r1, r2}
   19b3c:	ldrh	r3, [r3]
   19b40:	str	r0, [r7, r9]
   19b44:	mov	r0, r7
   19b48:	str	r1, [ip, #4]
   19b4c:	mov	r1, #32768	; 0x8000
   19b50:	strh	r3, [ip, #12]
   19b54:	str	r2, [ip, #8]
   19b58:	bl	116f4 <open64@plt>
   19b5c:	subs	r8, r0, #0
   19b60:	blt	19d24 <close_stdout@@Base+0x4ca8>
   19b64:	ldr	r1, [pc, #620]	; 19dd8 <close_stdout@@Base+0x4d5c>
   19b68:	add	r1, pc, r1
   19b6c:	bl	1152c <fdopen@plt>
   19b70:	subs	fp, r0, #0
   19b74:	beq	19d7c <close_stdout@@Base+0x4d00>
   19b78:	ldr	r0, [pc, #604]	; 19ddc <close_stdout@@Base+0x4d60>
   19b7c:	add	sl, sp, #20
   19b80:	add	r9, sp, #72	; 0x48
   19b84:	mov	r8, #0
   19b88:	add	r0, pc, r0
   19b8c:	str	r0, [sp, #12]
   19b90:	ldr	r3, [fp, #4]
   19b94:	ldr	r2, [fp, #8]
   19b98:	cmp	r3, r2
   19b9c:	bcs	19c88 <close_stdout@@Base+0x4c0c>
   19ba0:	add	r2, r3, #1
   19ba4:	str	r2, [fp, #4]
   19ba8:	ldrb	r0, [r3]
   19bac:	cmp	r0, #32
   19bb0:	beq	19b90 <close_stdout@@Base+0x4b14>
   19bb4:	sub	r3, r0, #9
   19bb8:	cmp	r3, #1
   19bbc:	bls	19b90 <close_stdout@@Base+0x4b14>
   19bc0:	cmp	r0, #35	; 0x23
   19bc4:	beq	19c9c <close_stdout@@Base+0x4c20>
   19bc8:	mov	r1, fp
   19bcc:	bl	117d8 <ungetc@plt>
   19bd0:	mov	r0, fp
   19bd4:	ldr	r1, [sp, #12]
   19bd8:	mov	r2, sl
   19bdc:	mov	r3, r9
   19be0:	bl	11838 <fscanf@plt>
   19be4:	cmp	r0, #1
   19be8:	ble	19ccc <close_stdout@@Base+0x4c50>
   19bec:	mov	r0, sl
   19bf0:	bl	11790 <strlen@plt>
   19bf4:	str	r0, [sp, #8]
   19bf8:	mov	r0, r9
   19bfc:	bl	11790 <strlen@plt>
   19c00:	cmp	r8, #0
   19c04:	mov	r2, r0
   19c08:	bne	19d30 <close_stdout@@Base+0x4cb4>
   19c0c:	ldr	r3, [sp, #8]
   19c10:	str	r2, [sp]
   19c14:	add	r8, r0, r3
   19c18:	add	r0, r8, #3
   19c1c:	add	r8, r8, #2
   19c20:	bl	1170c <malloc@plt>
   19c24:	ldr	r2, [sp]
   19c28:	mov	r3, r0
   19c2c:	cmp	r3, #0
   19c30:	beq	19d94 <close_stdout@@Base+0x4d18>
   19c34:	ldr	r0, [sp, #8]
   19c38:	movw	r1, #65534	; 0xfffe
   19c3c:	movt	r1, #65535	; 0xffff
   19c40:	rsb	r2, r2, r8
   19c44:	rsb	r1, r0, r1
   19c48:	stm	sp, {r2, r3}
   19c4c:	add	r0, r1, r2
   19c50:	mov	r1, sl
   19c54:	add	r0, r3, r0
   19c58:	mov	r4, r3
   19c5c:	bl	116c4 <strcpy@plt>
   19c60:	ldr	r2, [sp]
   19c64:	ldr	r3, [sp, #4]
   19c68:	mov	r1, r9
   19c6c:	sub	r0, r2, #1
   19c70:	add	r0, r3, r0
   19c74:	bl	116c4 <strcpy@plt>
   19c78:	ldr	r3, [fp, #4]
   19c7c:	ldr	r2, [fp, #8]
   19c80:	cmp	r3, r2
   19c84:	bcc	19ba0 <close_stdout@@Base+0x4b24>
   19c88:	mov	r0, fp
   19c8c:	bl	118b0 <__uflow@plt>
   19c90:	cmn	r0, #1
   19c94:	beq	19ccc <close_stdout@@Base+0x4c50>
   19c98:	b	19bac <close_stdout@@Base+0x4b30>
   19c9c:	ldr	r3, [fp, #4]
   19ca0:	ldr	r2, [fp, #8]
   19ca4:	cmp	r3, r2
   19ca8:	bcs	19db0 <close_stdout@@Base+0x4d34>
   19cac:	add	r2, r3, #1
   19cb0:	str	r2, [fp, #4]
   19cb4:	ldrb	r0, [r3]
   19cb8:	cmp	r0, #10
   19cbc:	cmnne	r0, #1
   19cc0:	bne	19c9c <close_stdout@@Base+0x4c20>
   19cc4:	cmn	r0, #1
   19cc8:	bne	19b90 <close_stdout@@Base+0x4b14>
   19ccc:	mov	r0, fp
   19cd0:	bl	19478 <close_stdout@@Base+0x43fc>
   19cd4:	cmp	r8, #0
   19cd8:	beq	19d24 <close_stdout@@Base+0x4ca8>
   19cdc:	mov	r3, #0
   19ce0:	strb	r3, [r4, r8]
   19ce4:	mov	r0, r7
   19ce8:	bl	115c8 <free@plt>
   19cec:	ldr	r3, [pc, #236]	; 19de0 <close_stdout@@Base+0x4d64>
   19cf0:	add	r3, pc, r3
   19cf4:	str	r4, [r3]
   19cf8:	b	19a1c <close_stdout@@Base+0x49a0>
   19cfc:	ldr	r8, [pc, #224]	; 19de4 <close_stdout@@Base+0x4d68>
   19d00:	mov	r3, #7
   19d04:	mov	sl, #8
   19d08:	add	r8, pc, r8
   19d0c:	ldrb	r3, [r8, r3]
   19d10:	cmp	r3, #47	; 0x2f
   19d14:	movne	r9, #1
   19d18:	movne	fp, r9
   19d1c:	bne	19b00 <close_stdout@@Base+0x4a84>
   19d20:	b	19af8 <close_stdout@@Base+0x4a7c>
   19d24:	ldr	r4, [pc, #188]	; 19de8 <close_stdout@@Base+0x4d6c>
   19d28:	add	r4, pc, r4
   19d2c:	b	19ce4 <close_stdout@@Base+0x4c68>
   19d30:	ldr	r0, [sp, #8]
   19d34:	str	r2, [sp]
   19d38:	add	r3, r0, r2
   19d3c:	mov	r0, r4
   19d40:	add	r8, r3, r8
   19d44:	add	r1, r8, #3
   19d48:	add	r8, r8, #2
   19d4c:	bl	1164c <realloc@plt>
   19d50:	ldr	r2, [sp]
   19d54:	mov	r3, r0
   19d58:	b	19c2c <close_stdout@@Base+0x4bb0>
   19d5c:	ldr	r4, [pc, #136]	; 19dec <close_stdout@@Base+0x4d70>
   19d60:	add	r4, pc, r4
   19d64:	b	19cec <close_stdout@@Base+0x4c70>
   19d68:	ldr	r8, [pc, #128]	; 19df0 <close_stdout@@Base+0x4d74>
   19d6c:	mov	r3, #7
   19d70:	mov	sl, #8
   19d74:	add	r8, pc, r8
   19d78:	b	19d0c <close_stdout@@Base+0x4c90>
   19d7c:	ldr	r4, [pc, #112]	; 19df4 <close_stdout@@Base+0x4d78>
   19d80:	mov	r0, r8
   19d84:	add	r4, pc, r4
   19d88:	bl	11940 <close@plt>
   19d8c:	b	19ce4 <close_stdout@@Base+0x4c68>
   19d90:	bl	11634 <__stack_chk_fail@plt>
   19d94:	mov	r0, r4
   19d98:	ldr	r4, [pc, #88]	; 19df8 <close_stdout@@Base+0x4d7c>
   19d9c:	bl	115c8 <free@plt>
   19da0:	mov	r0, fp
   19da4:	add	r4, pc, r4
   19da8:	bl	19478 <close_stdout@@Base+0x43fc>
   19dac:	b	19ce4 <close_stdout@@Base+0x4c68>
   19db0:	mov	r0, fp
   19db4:	bl	118b0 <__uflow@plt>
   19db8:	b	19cb8 <close_stdout@@Base+0x4c3c>
   19dbc:	andeq	r5, r1, r0, lsl r6
   19dc0:	andeq	r0, r0, ip, ror r1
   19dc4:	muleq	r1, r0, ip
   19dc8:	andeq	r4, r0, r0, lsr r6
   19dcc:	andeq	r3, r0, r4, lsl sp
   19dd0:	andeq	r4, r0, r8, lsl #12
   19dd4:			; <UNDEFINED> instruction: 0x000045b0
   19dd8:	andeq	r4, r0, ip, lsl #11
   19ddc:	andeq	r4, r0, r0, ror r5
   19de0:			; <UNDEFINED> instruction: 0x000159b0
   19de4:			; <UNDEFINED> instruction: 0x000043b8
   19de8:	andeq	r3, r0, ip, lsr #21
   19dec:	andeq	r3, r0, r4, ror sl
   19df0:	andeq	r4, r0, ip, asr #6
   19df4:	andeq	r3, r0, r0, asr sl
   19df8:	andeq	r3, r0, r0, lsr sl
   19dfc:	push	{r4, lr}
   19e00:	mov	r4, r0
   19e04:	bl	115a4 <wcwidth@plt>
   19e08:	cmp	r0, #0
   19e0c:	popge	{r4, pc}
   19e10:	mov	r0, r4
   19e14:	bl	11664 <iswcntrl@plt>
   19e18:	rsbs	r0, r0, #1
   19e1c:	movcc	r0, #0
   19e20:	pop	{r4, pc}
   19e24:	push	{r3, r4, r5, lr}
   19e28:	mov	r3, r1
   19e2c:	mov	r4, r1
   19e30:	ldr	r1, [r3], #16
   19e34:	mov	r5, r0
   19e38:	cmp	r1, r3
   19e3c:	strne	r1, [r0]
   19e40:	beq	19e64 <close_stdout@@Base+0x4de8>
   19e44:	ldr	r3, [r4, #4]
   19e48:	str	r3, [r5, #4]
   19e4c:	ldrb	r3, [r4, #8]
   19e50:	cmp	r3, #0
   19e54:	strb	r3, [r5, #8]
   19e58:	ldrne	r3, [r4, #12]
   19e5c:	strne	r3, [r5, #12]
   19e60:	pop	{r3, r4, r5, pc}
   19e64:	add	r3, r0, #16
   19e68:	ldr	r2, [r4, #4]
   19e6c:	mov	r0, r3
   19e70:	bl	115e0 <memcpy@plt>
   19e74:	str	r0, [r5]
   19e78:	b	19e44 <close_stdout@@Base+0x4dc8>
   19e7c:	ldr	r3, [pc, #32]	; 19ea4 <close_stdout@@Base+0x4e28>
   19e80:	lsr	r2, r0, #5
   19e84:	ldr	r1, [pc, #28]	; 19ea8 <close_stdout@@Base+0x4e2c>
   19e88:	and	r0, r0, #31
   19e8c:	add	r3, pc, r3
   19e90:	ldr	r3, [r3, r1]
   19e94:	ldr	r3, [r3, r2, lsl #2]
   19e98:	lsr	r0, r3, r0
   19e9c:	and	r0, r0, #1
   19ea0:	bx	lr
   19ea4:	andeq	r5, r1, ip, ror #2
   19ea8:	andeq	r0, r0, r8, ror r1
   19eac:	ldr	ip, [pc, #380]	; 1a030 <close_stdout@@Base+0x4fb4>
   19eb0:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   19eb4:	mov	r7, r2
   19eb8:	add	fp, sp, #28
   19ebc:	ldr	r2, [pc, #368]	; 1a034 <close_stdout@@Base+0x4fb8>
   19ec0:	sub	sp, sp, #8
   19ec4:	add	ip, pc, ip
   19ec8:	mov	r8, r3
   19ecc:	mov	r3, ip
   19ed0:	cmn	r7, #-1073741823	; 0xc0000001
   19ed4:	ldr	r5, [ip, r2]
   19ed8:	mov	r6, r0
   19edc:	mov	r4, r1
   19ee0:	ldr	r3, [r5]
   19ee4:	str	r3, [fp, #-32]	; 0xffffffe0
   19ee8:	bls	19f08 <close_stdout@@Base+0x4e8c>
   19eec:	mov	r0, #0
   19ef0:	ldr	r2, [fp, #-32]	; 0xffffffe0
   19ef4:	ldr	r3, [r5]
   19ef8:	cmp	r2, r3
   19efc:	bne	1a02c <close_stdout@@Base+0x4fb0>
   19f00:	sub	sp, fp, #28
   19f04:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   19f08:	lsl	r0, r7, #2
   19f0c:	movw	r3, #4023	; 0xfb7
   19f10:	cmp	r0, r3
   19f14:	bls	19fe0 <close_stdout@@Base+0x4f64>
   19f18:	bl	1bdf0 <close_stdout@@Base+0x6d74>
   19f1c:	cmp	r0, #0
   19f20:	beq	19eec <close_stdout@@Base+0x4e70>
   19f24:	cmp	r7, #2
   19f28:	mov	r3, #1
   19f2c:	str	r3, [r0, #4]
   19f30:	movhi	r9, r4
   19f34:	movhi	r2, r0
   19f38:	movhi	ip, #0
   19f3c:	movhi	r3, #2
   19f40:	bls	19f8c <close_stdout@@Base+0x4f10>
   19f44:	ldrb	r1, [r9, #1]!
   19f48:	ldrb	lr, [r4, ip]
   19f4c:	cmp	lr, r1
   19f50:	bne	19f6c <close_stdout@@Base+0x4ef0>
   19f54:	b	19ff4 <close_stdout@@Base+0x4f78>
   19f58:	ldr	lr, [r0, ip, lsl #2]
   19f5c:	rsb	ip, lr, ip
   19f60:	ldrb	lr, [r4, ip]
   19f64:	cmp	lr, r1
   19f68:	beq	19ff4 <close_stdout@@Base+0x4f78>
   19f6c:	cmp	ip, #0
   19f70:	bne	19f58 <close_stdout@@Base+0x4edc>
   19f74:	mov	ip, #0
   19f78:	str	r3, [r2, #8]
   19f7c:	add	r3, r3, #1
   19f80:	add	r2, r2, #4
   19f84:	cmp	r3, r7
   19f88:	bne	19f44 <close_stdout@@Base+0x4ec8>
   19f8c:	mov	r2, #0
   19f90:	str	r2, [r8]
   19f94:	ldrb	r3, [r6]
   19f98:	mov	ip, r6
   19f9c:	cmp	r3, #0
   19fa0:	beq	19fd4 <close_stdout@@Base+0x4f58>
   19fa4:	ldrb	r1, [r4, r2]
   19fa8:	cmp	r1, r3
   19fac:	beq	1a004 <close_stdout@@Base+0x4f88>
   19fb0:	cmp	r2, #0
   19fb4:	addeq	r6, r6, #1
   19fb8:	ldrne	r1, [r0, r2, lsl #2]
   19fbc:	ldrbeq	r3, [ip, #1]
   19fc0:	addeq	ip, ip, #1
   19fc4:	addne	r6, r6, r1
   19fc8:	rsbne	r2, r1, r2
   19fcc:	cmp	r3, #0
   19fd0:	bne	19fa4 <close_stdout@@Base+0x4f28>
   19fd4:	bl	1be58 <close_stdout@@Base+0x6ddc>
   19fd8:	mov	r0, #1
   19fdc:	b	19ef0 <close_stdout@@Base+0x4e74>
   19fe0:	add	r3, r0, #22
   19fe4:	bic	r3, r3, #7
   19fe8:	sub	sp, sp, r3
   19fec:	add	r0, sp, #8
   19ff0:	b	19f1c <close_stdout@@Base+0x4ea0>
   19ff4:	add	ip, ip, #1
   19ff8:	rsb	r1, ip, r3
   19ffc:	str	r1, [r2, #8]
   1a000:	b	19f7c <close_stdout@@Base+0x4f00>
   1a004:	add	r2, r2, #1
   1a008:	add	r1, ip, #1
   1a00c:	cmp	r7, r2
   1a010:	ldrbne	r3, [ip, #1]
   1a014:	movne	ip, r1
   1a018:	bne	19f9c <close_stdout@@Base+0x4f20>
   1a01c:	str	r6, [r8]
   1a020:	bl	1be58 <close_stdout@@Base+0x6ddc>
   1a024:	mov	r0, #1
   1a028:	b	19ef0 <close_stdout@@Base+0x4e74>
   1a02c:	bl	11634 <__stack_chk_fail@plt>
   1a030:	andeq	r5, r1, r4, lsr r1
   1a034:	andeq	r0, r0, ip, ror r1
   1a038:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a03c:	add	fp, sp, #32
   1a040:	ldr	r8, [pc, #2268]	; 1a924 <close_stdout@@Base+0x58a8>
   1a044:	sub	sp, sp, #220	; 0xdc
   1a048:	ldr	r3, [pc, #2264]	; 1a928 <close_stdout@@Base+0x58ac>
   1a04c:	add	r8, pc, r8
   1a050:	str	r0, [fp, #-232]	; 0xffffff18
   1a054:	str	r2, [fp, #-248]	; 0xffffff08
   1a058:	mov	r0, r1
   1a05c:	ldr	r3, [r8, r3]
   1a060:	mov	r4, r1
   1a064:	str	r3, [fp, #-244]	; 0xffffff0c
   1a068:	ldr	r3, [r3]
   1a06c:	str	r3, [fp, #-40]	; 0xffffffd8
   1a070:	bl	1bee0 <close_stdout@@Base+0x6e64>
   1a074:	movw	r3, #29789	; 0x745d
   1a078:	movt	r3, #1489	; 0x5d1
   1a07c:	cmp	r0, r3
   1a080:	str	r0, [fp, #-224]	; 0xffffff20
   1a084:	bls	1a0a8 <close_stdout@@Base+0x502c>
   1a088:	mov	r0, #0
   1a08c:	ldr	r1, [fp, #-244]	; 0xffffff0c
   1a090:	ldr	r2, [fp, #-40]	; 0xffffffd8
   1a094:	ldr	r3, [r1]
   1a098:	cmp	r2, r3
   1a09c:	bne	1a900 <close_stdout@@Base+0x5884>
   1a0a0:	sub	sp, fp, #32
   1a0a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0a8:	ldr	r1, [fp, #-224]	; 0xffffff20
   1a0ac:	mov	r0, #44	; 0x2c
   1a0b0:	movw	r3, #4023	; 0xfb7
   1a0b4:	mul	r0, r0, r1
   1a0b8:	cmp	r0, r3
   1a0bc:	bls	1a488 <close_stdout@@Base+0x540c>
   1a0c0:	bl	1bdf0 <close_stdout@@Base+0x6d74>
   1a0c4:	str	r0, [fp, #-236]	; 0xffffff14
   1a0c8:	ldr	r3, [fp, #-236]	; 0xffffff14
   1a0cc:	cmp	r3, #0
   1a0d0:	beq	1a088 <close_stdout@@Base+0x500c>
   1a0d4:	mov	r2, #0
   1a0d8:	ldr	r0, [fp, #-224]	; 0xffffff20
   1a0dc:	str	r2, [fp, #-200]	; 0xffffff38
   1a0e0:	mov	r5, r2
   1a0e4:	strb	r2, [fp, #-208]	; 0xffffff30
   1a0e8:	add	sl, r3, #16
   1a0ec:	str	r2, [fp, #-204]	; 0xffffff34
   1a0f0:	add	r9, r0, r0, lsl #2
   1a0f4:	strb	r2, [fp, #-196]	; 0xffffff3c
   1a0f8:	sub	ip, fp, #204	; 0xcc
   1a0fc:	ldrb	r2, [fp, #-208]	; 0xffffff30
   1a100:	mov	r7, r4
   1a104:	add	r9, r3, r9, lsl #3
   1a108:	str	r4, [fp, #-192]	; 0xffffff40
   1a10c:	cmp	r2, #0
   1a110:	sub	r1, fp, #180	; 0xb4
   1a114:	str	r9, [fp, #-220]	; 0xffffff24
   1a118:	mov	r4, #1
   1a11c:	mov	r9, sl
   1a120:	str	r1, [fp, #-216]	; 0xffffff28
   1a124:	mov	sl, r7
   1a128:	sub	r6, fp, #176	; 0xb0
   1a12c:	mov	r7, ip
   1a130:	bne	1a504 <close_stdout@@Base+0x5488>
   1a134:	ldr	r1, [pc, #2032]	; 1a92c <close_stdout@@Base+0x58b0>
   1a138:	ldrb	r2, [sl]
   1a13c:	ldr	r0, [r8, r1]
   1a140:	and	r1, r2, #31
   1a144:	lsr	r2, r2, #5
   1a148:	ldr	r2, [r0, r2, lsl #2]
   1a14c:	lsr	r2, r2, r1
   1a150:	tst	r2, #1
   1a154:	beq	1a568 <close_stdout@@Base+0x54ec>
   1a158:	str	r4, [fp, #-188]	; 0xffffff44
   1a15c:	ldrb	r3, [sl]
   1a160:	strb	r4, [fp, #-184]	; 0xffffff48
   1a164:	mov	sl, r3
   1a168:	str	r3, [fp, #-180]	; 0xffffff4c
   1a16c:	cmp	sl, #0
   1a170:	strb	r4, [fp, #-196]	; 0xffffff3c
   1a174:	mov	r2, #1
   1a178:	bne	1a4b4 <close_stdout@@Base+0x5438>
   1a17c:	ldr	r0, [fp, #-224]	; 0xffffff20
   1a180:	ldr	r9, [fp, #-220]	; 0xffffff24
   1a184:	cmp	r0, #2
   1a188:	str	r2, [r9, #4]
   1a18c:	bls	1a258 <close_stdout@@Base+0x51dc>
   1a190:	ldr	r7, [fp, #-236]	; 0xffffff14
   1a194:	mov	r6, r9
   1a198:	str	r8, [fp, #-216]	; 0xffffff28
   1a19c:	mov	r4, sl
   1a1a0:	mov	r8, r9
   1a1a4:	mov	r5, #2
   1a1a8:	mov	r9, r7
   1a1ac:	ldrb	sl, [r7, #48]	; 0x30
   1a1b0:	b	1a1ec <close_stdout@@Base+0x5170>
   1a1b4:	ldrb	r2, [r3, #8]
   1a1b8:	cmp	r2, #0
   1a1bc:	beq	1a1fc <close_stdout@@Base+0x5180>
   1a1c0:	ldr	r0, [r7, #52]	; 0x34
   1a1c4:	ldr	r3, [r3, #12]
   1a1c8:	subs	r1, r0, r3
   1a1cc:	rsbs	r0, r1, #0
   1a1d0:	adcs	r0, r0, r1
   1a1d4:	cmp	r0, #0
   1a1d8:	bne	1a22c <close_stdout@@Base+0x51b0>
   1a1dc:	cmp	r4, #0
   1a1e0:	beq	1a740 <close_stdout@@Base+0x56c4>
   1a1e4:	ldr	r3, [r8, r4, lsl #2]
   1a1e8:	rsb	r4, r3, r4
   1a1ec:	add	r3, r4, r4, lsl #2
   1a1f0:	cmp	sl, #0
   1a1f4:	add	r3, r9, r3, lsl #3
   1a1f8:	bne	1a1b4 <close_stdout@@Base+0x5138>
   1a1fc:	ldr	r2, [r7, #44]	; 0x2c
   1a200:	ldr	r1, [r3, #4]
   1a204:	cmp	r2, r1
   1a208:	movne	r0, #0
   1a20c:	bne	1a1d4 <close_stdout@@Base+0x5158>
   1a210:	ldr	r1, [r3]
   1a214:	ldr	r0, [r7, #40]	; 0x28
   1a218:	bl	1161c <memcmp@plt>
   1a21c:	rsbs	r0, r0, #1
   1a220:	movcc	r0, #0
   1a224:	cmp	r0, #0
   1a228:	beq	1a1dc <close_stdout@@Base+0x5160>
   1a22c:	add	r4, r4, #1
   1a230:	rsb	r2, r4, r5
   1a234:	str	r2, [r6, #8]
   1a238:	ldr	r2, [fp, #-224]	; 0xffffff20
   1a23c:	add	r5, r5, #1
   1a240:	add	r7, r7, #40	; 0x28
   1a244:	add	r6, r6, #4
   1a248:	cmp	r5, r2
   1a24c:	bne	1a1ac <close_stdout@@Base+0x5130>
   1a250:	mov	r9, r8
   1a254:	ldr	r8, [fp, #-216]	; 0xffffff28
   1a258:	ldr	r1, [fp, #-232]	; 0xffffff18
   1a25c:	mov	r3, #0
   1a260:	ldr	r2, [fp, #-248]	; 0xffffff08
   1a264:	sub	r7, fp, #148	; 0x94
   1a268:	mov	r4, r3
   1a26c:	mov	r6, r3
   1a270:	mov	r5, #1
   1a274:	sub	r0, fp, #92	; 0x5c
   1a278:	str	r1, [fp, #-136]	; 0xffffff78
   1a27c:	str	r0, [fp, #-228]	; 0xffffff1c
   1a280:	sub	r0, fp, #68	; 0x44
   1a284:	str	r1, [fp, #-80]	; 0xffffffb0
   1a288:	sub	r1, fp, #124	; 0x7c
   1a28c:	str	r3, [fp, #-148]	; 0xffffff6c
   1a290:	strb	r3, [fp, #-140]	; 0xffffff74
   1a294:	str	r3, [fp, #-220]	; 0xffffff24
   1a298:	str	r3, [r2]
   1a29c:	strb	r3, [fp, #-152]	; 0xffffff68
   1a2a0:	str	r0, [fp, #-232]	; 0xffffff18
   1a2a4:	str	r1, [fp, #-216]	; 0xffffff28
   1a2a8:	strb	r3, [fp, #-96]	; 0xffffffa0
   1a2ac:	str	r3, [fp, #-92]	; 0xffffffa4
   1a2b0:	strb	r3, [fp, #-84]	; 0xffffffac
   1a2b4:	str	r3, [r7, #4]
   1a2b8:	str	r3, [fp, #-88]	; 0xffffffa8
   1a2bc:	str	r9, [fp, #-240]	; 0xffffff10
   1a2c0:	cmp	r4, #0
   1a2c4:	beq	1a334 <close_stdout@@Base+0x52b8>
   1a2c8:	ldrb	r4, [fp, #-72]	; 0xffffffb8
   1a2cc:	cmp	r4, #0
   1a2d0:	bne	1a388 <close_stdout@@Base+0x530c>
   1a2d4:	ldr	r2, [fp, #-220]	; 0xffffff24
   1a2d8:	ldr	r3, [fp, #-236]	; 0xffffff14
   1a2dc:	add	r1, r2, r2, lsl #2
   1a2e0:	add	r1, r3, r1, lsl #3
   1a2e4:	ldr	r2, [r1, #4]
   1a2e8:	ldr	r3, [fp, #-76]	; 0xffffffb4
   1a2ec:	cmp	r2, r3
   1a2f0:	movne	r0, #0
   1a2f4:	beq	1a728 <close_stdout@@Base+0x56ac>
   1a2f8:	mov	r3, r0
   1a2fc:	cmp	r3, #0
   1a300:	ldr	r2, [fp, #-220]	; 0xffffff24
   1a304:	beq	1a3cc <close_stdout@@Base+0x5350>
   1a308:	ldr	r0, [fp, #-224]	; 0xffffff20
   1a30c:	add	r2, r2, #1
   1a310:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1a314:	str	r2, [fp, #-220]	; 0xffffff24
   1a318:	cmp	r0, r2
   1a31c:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1a320:	strb	r6, [fp, #-84]	; 0xffffffac
   1a324:	add	r3, r3, r2
   1a328:	str	r3, [fp, #-80]	; 0xffffffb0
   1a32c:	beq	1a8b0 <close_stdout@@Base+0x5834>
   1a330:	mov	r4, #0
   1a334:	ldrb	r3, [fp, #-96]	; 0xffffffa0
   1a338:	cmp	r3, #0
   1a33c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1a340:	bne	1a648 <close_stdout@@Base+0x55cc>
   1a344:	ldr	r1, [pc, #1504]	; 1a92c <close_stdout@@Base+0x58b0>
   1a348:	ldrb	r2, [r3]
   1a34c:	ldr	r0, [r8, r1]
   1a350:	and	r1, r2, #31
   1a354:	lsr	r2, r2, #5
   1a358:	ldr	r2, [r0, r2, lsl #2]
   1a35c:	lsr	r2, r2, r1
   1a360:	tst	r2, #1
   1a364:	beq	1a62c <close_stdout@@Base+0x55b0>
   1a368:	str	r5, [fp, #-76]	; 0xffffffb4
   1a36c:	mov	r4, #1
   1a370:	ldrb	r3, [r3]
   1a374:	strb	r5, [fp, #-72]	; 0xffffffb8
   1a378:	str	r3, [fp, #-68]	; 0xffffffbc
   1a37c:	cmp	r4, #0
   1a380:	strb	r5, [fp, #-84]	; 0xffffffac
   1a384:	beq	1a2d4 <close_stdout@@Base+0x5258>
   1a388:	ldr	r2, [fp, #-68]	; 0xffffffbc
   1a38c:	cmp	r2, #0
   1a390:	beq	1a8bc <close_stdout@@Base+0x5840>
   1a394:	ldr	r3, [fp, #-220]	; 0xffffff24
   1a398:	ldr	r0, [fp, #-236]	; 0xffffff14
   1a39c:	add	r1, r3, r3, lsl #2
   1a3a0:	add	r1, r0, r1, lsl #3
   1a3a4:	ldrb	r3, [r1, #8]
   1a3a8:	cmp	r3, #0
   1a3ac:	beq	1a2e4 <close_stdout@@Base+0x5268>
   1a3b0:	ldr	r3, [r1, #12]
   1a3b4:	subs	r2, r2, r3
   1a3b8:	rsbs	r3, r2, #0
   1a3bc:	adcs	r3, r3, r2
   1a3c0:	ldr	r2, [fp, #-220]	; 0xffffff24
   1a3c4:	cmp	r3, #0
   1a3c8:	bne	1a308 <close_stdout@@Base+0x528c>
   1a3cc:	cmp	r2, #0
   1a3d0:	beq	1a6d8 <close_stdout@@Base+0x565c>
   1a3d4:	ldr	r3, [fp, #-240]	; 0xffffff10
   1a3d8:	ldr	r4, [r3, r2, lsl #2]
   1a3dc:	cmp	r4, #0
   1a3e0:	rsb	r2, r4, r2
   1a3e4:	str	r2, [fp, #-220]	; 0xffffff24
   1a3e8:	beq	1a720 <close_stdout@@Base+0x56a4>
   1a3ec:	ldrb	sl, [fp, #-140]	; 0xffffff74
   1a3f0:	cmp	sl, #0
   1a3f4:	beq	1a424 <close_stdout@@Base+0x53a8>
   1a3f8:	ldrb	sl, [fp, #-128]	; 0xffffff80
   1a3fc:	cmp	sl, #0
   1a400:	bne	1a478 <close_stdout@@Base+0x53fc>
   1a404:	ldr	r2, [fp, #-136]	; 0xffffff78
   1a408:	subs	r4, r4, #1
   1a40c:	ldr	r3, [fp, #-132]	; 0xffffff7c
   1a410:	strb	r6, [fp, #-140]	; 0xffffff74
   1a414:	movne	sl, #0
   1a418:	add	r3, r2, r3
   1a41c:	str	r3, [fp, #-136]	; 0xffffff78
   1a420:	beq	1a720 <close_stdout@@Base+0x56a4>
   1a424:	ldrb	r3, [fp, #-152]	; 0xffffff68
   1a428:	ldr	r9, [fp, #-136]	; 0xffffff78
   1a42c:	cmp	r3, #0
   1a430:	bne	1a594 <close_stdout@@Base+0x5518>
   1a434:	ldr	r1, [pc, #1264]	; 1a92c <close_stdout@@Base+0x58b0>
   1a438:	ldrb	r2, [r9]
   1a43c:	ldr	r0, [r8, r1]
   1a440:	and	r1, r2, #31
   1a444:	lsr	r2, r2, #5
   1a448:	ldr	r2, [r0, r2, lsl #2]
   1a44c:	lsr	r2, r2, r1
   1a450:	tst	r2, #1
   1a454:	beq	1a580 <close_stdout@@Base+0x5504>
   1a458:	str	r5, [fp, #-132]	; 0xffffff7c
   1a45c:	mov	sl, #1
   1a460:	ldrb	r3, [r9]
   1a464:	strb	r5, [fp, #-128]	; 0xffffff80
   1a468:	str	r3, [fp, #-124]	; 0xffffff84
   1a46c:	cmp	sl, #0
   1a470:	strb	r5, [fp, #-140]	; 0xffffff74
   1a474:	beq	1a404 <close_stdout@@Base+0x5388>
   1a478:	ldr	r3, [fp, #-124]	; 0xffffff84
   1a47c:	cmp	r3, #0
   1a480:	bne	1a404 <close_stdout@@Base+0x5388>
   1a484:	bl	11934 <abort@plt>
   1a488:	add	r3, r0, #22
   1a48c:	bic	r3, r3, #7
   1a490:	sub	sp, sp, r3
   1a494:	add	r2, sp, #8
   1a498:	str	r2, [fp, #-236]	; 0xffffff14
   1a49c:	b	1a0c8 <close_stdout@@Base+0x504c>
   1a4a0:	ldr	r0, [fp, #-192]	; 0xffffff40
   1a4a4:	bl	11790 <strlen@plt>
   1a4a8:	strb	r5, [fp, #-184]	; 0xffffff48
   1a4ac:	str	r0, [fp, #-188]	; 0xffffff44
   1a4b0:	strb	r4, [fp, #-196]	; 0xffffff3c
   1a4b4:	ldr	r3, [fp, #-192]	; 0xffffff40
   1a4b8:	cmp	r3, r6
   1a4bc:	strne	r3, [r9, #-16]
   1a4c0:	beq	1a7ec <close_stdout@@Base+0x5770>
   1a4c4:	ldr	r3, [fp, #-188]	; 0xffffff44
   1a4c8:	add	r9, r9, #40	; 0x28
   1a4cc:	str	r3, [r9, #-52]	; 0xffffffcc
   1a4d0:	ldrb	r3, [fp, #-184]	; 0xffffff48
   1a4d4:	cmp	r3, #0
   1a4d8:	strb	r3, [r9, #-48]	; 0xffffffd0
   1a4dc:	ldrne	r3, [fp, #-180]	; 0xffffff4c
   1a4e0:	strne	r3, [r9, #-44]	; 0xffffffd4
   1a4e4:	ldr	sl, [fp, #-192]	; 0xffffff40
   1a4e8:	ldr	r2, [fp, #-188]	; 0xffffff44
   1a4ec:	strb	r5, [fp, #-196]	; 0xffffff3c
   1a4f0:	add	sl, sl, r2
   1a4f4:	ldrb	r2, [fp, #-208]	; 0xffffff30
   1a4f8:	str	sl, [fp, #-192]	; 0xffffff40
   1a4fc:	cmp	r2, #0
   1a500:	beq	1a134 <close_stdout@@Base+0x50b8>
   1a504:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1a508:	mov	r1, r0
   1a50c:	mov	r0, sl
   1a510:	bl	1792c <close_stdout@@Base+0x28b0>
   1a514:	mov	r1, sl
   1a518:	mov	r3, r7
   1a51c:	mov	r2, r0
   1a520:	sub	r0, fp, #180	; 0xb4
   1a524:	bl	116dc <mbrtowc@plt>
   1a528:	cmn	r0, #1
   1a52c:	str	r0, [fp, #-188]	; 0xffffff44
   1a530:	strbeq	r5, [fp, #-184]	; 0xffffff48
   1a534:	streq	r4, [fp, #-188]	; 0xffffff44
   1a538:	beq	1a4b0 <close_stdout@@Base+0x5434>
   1a53c:	cmn	r0, #2
   1a540:	beq	1a4a0 <close_stdout@@Base+0x5424>
   1a544:	cmp	r0, #0
   1a548:	beq	1a748 <close_stdout@@Base+0x56cc>
   1a54c:	ldr	sl, [fp, #-180]	; 0xffffff4c
   1a550:	mov	r0, r7
   1a554:	strb	r4, [fp, #-184]	; 0xffffff48
   1a558:	bl	115f8 <mbsinit@plt>
   1a55c:	cmp	r0, #0
   1a560:	strbne	r5, [fp, #-208]	; 0xffffff30
   1a564:	b	1a16c <close_stdout@@Base+0x50f0>
   1a568:	mov	r0, r7
   1a56c:	bl	115f8 <mbsinit@plt>
   1a570:	cmp	r0, #0
   1a574:	beq	1a8e0 <close_stdout@@Base+0x5864>
   1a578:	strb	r4, [fp, #-208]	; 0xffffff30
   1a57c:	b	1a504 <close_stdout@@Base+0x5488>
   1a580:	mov	r0, r7
   1a584:	bl	115f8 <mbsinit@plt>
   1a588:	cmp	r0, #0
   1a58c:	beq	1a8e0 <close_stdout@@Base+0x5864>
   1a590:	strb	r5, [fp, #-152]	; 0xffffff68
   1a594:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1a598:	mov	r1, r0
   1a59c:	mov	r0, r9
   1a5a0:	bl	1792c <close_stdout@@Base+0x28b0>
   1a5a4:	mov	r1, r9
   1a5a8:	mov	r3, r7
   1a5ac:	mov	r2, r0
   1a5b0:	sub	r0, fp, #124	; 0x7c
   1a5b4:	bl	116dc <mbrtowc@plt>
   1a5b8:	cmn	r0, #1
   1a5bc:	str	r0, [fp, #-132]	; 0xffffff7c
   1a5c0:	strbeq	r6, [fp, #-128]	; 0xffffff80
   1a5c4:	streq	r5, [fp, #-132]	; 0xffffff7c
   1a5c8:	beq	1a46c <close_stdout@@Base+0x53f0>
   1a5cc:	cmn	r0, #2
   1a5d0:	beq	1a618 <close_stdout@@Base+0x559c>
   1a5d4:	cmp	r0, #0
   1a5d8:	bne	1a5fc <close_stdout@@Base+0x5580>
   1a5dc:	ldr	r3, [fp, #-136]	; 0xffffff78
   1a5e0:	str	r5, [fp, #-132]	; 0xffffff7c
   1a5e4:	ldrb	r3, [r3]
   1a5e8:	cmp	r3, #0
   1a5ec:	bne	1a904 <close_stdout@@Base+0x5888>
   1a5f0:	ldr	r3, [fp, #-124]	; 0xffffff84
   1a5f4:	cmp	r3, #0
   1a5f8:	bne	1a768 <close_stdout@@Base+0x56ec>
   1a5fc:	mov	r0, r7
   1a600:	strb	r5, [fp, #-128]	; 0xffffff80
   1a604:	bl	115f8 <mbsinit@plt>
   1a608:	mov	sl, #1
   1a60c:	cmp	r0, #0
   1a610:	strbne	r6, [fp, #-152]	; 0xffffff68
   1a614:	b	1a46c <close_stdout@@Base+0x53f0>
   1a618:	ldr	r0, [fp, #-136]	; 0xffffff78
   1a61c:	bl	11790 <strlen@plt>
   1a620:	strb	r6, [fp, #-128]	; 0xffffff80
   1a624:	str	r0, [fp, #-132]	; 0xffffff7c
   1a628:	b	1a46c <close_stdout@@Base+0x53f0>
   1a62c:	sub	r0, fp, #92	; 0x5c
   1a630:	str	r3, [fp, #-252]	; 0xffffff04
   1a634:	bl	115f8 <mbsinit@plt>
   1a638:	ldr	r3, [fp, #-252]	; 0xffffff04
   1a63c:	cmp	r0, #0
   1a640:	beq	1a8e0 <close_stdout@@Base+0x5864>
   1a644:	strb	r5, [fp, #-96]	; 0xffffffa0
   1a648:	str	r3, [fp, #-252]	; 0xffffff04
   1a64c:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1a650:	ldr	r3, [fp, #-252]	; 0xffffff04
   1a654:	mov	r1, r0
   1a658:	mov	r0, r3
   1a65c:	bl	1792c <close_stdout@@Base+0x28b0>
   1a660:	ldr	r3, [fp, #-252]	; 0xffffff04
   1a664:	mov	r1, r3
   1a668:	sub	r3, fp, #92	; 0x5c
   1a66c:	mov	r2, r0
   1a670:	sub	r0, fp, #68	; 0x44
   1a674:	bl	116dc <mbrtowc@plt>
   1a678:	cmn	r0, #1
   1a67c:	str	r0, [fp, #-76]	; 0xffffffb4
   1a680:	strbeq	r6, [fp, #-72]	; 0xffffffb8
   1a684:	streq	r5, [fp, #-76]	; 0xffffffb4
   1a688:	beq	1a37c <close_stdout@@Base+0x5300>
   1a68c:	cmn	r0, #2
   1a690:	beq	1a89c <close_stdout@@Base+0x5820>
   1a694:	cmp	r0, #0
   1a698:	bne	1a6bc <close_stdout@@Base+0x5640>
   1a69c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1a6a0:	str	r5, [fp, #-76]	; 0xffffffb4
   1a6a4:	ldrb	r3, [r3]
   1a6a8:	cmp	r3, #0
   1a6ac:	bne	1a904 <close_stdout@@Base+0x5888>
   1a6b0:	ldr	r3, [fp, #-68]	; 0xffffffbc
   1a6b4:	cmp	r3, #0
   1a6b8:	bne	1a768 <close_stdout@@Base+0x56ec>
   1a6bc:	sub	r0, fp, #92	; 0x5c
   1a6c0:	strb	r5, [fp, #-72]	; 0xffffffb8
   1a6c4:	bl	115f8 <mbsinit@plt>
   1a6c8:	mov	r4, #1
   1a6cc:	cmp	r0, #0
   1a6d0:	strbne	r6, [fp, #-96]	; 0xffffffa0
   1a6d4:	b	1a37c <close_stdout@@Base+0x5300>
   1a6d8:	ldrb	r4, [fp, #-140]	; 0xffffff74
   1a6dc:	cmp	r4, #0
   1a6e0:	beq	1a788 <close_stdout@@Base+0x570c>
   1a6e4:	ldrb	r4, [fp, #-128]	; 0xffffff80
   1a6e8:	cmp	r4, #0
   1a6ec:	bne	1a7dc <close_stdout@@Base+0x5760>
   1a6f0:	ldr	r1, [fp, #-136]	; 0xffffff78
   1a6f4:	mov	r4, #0
   1a6f8:	ldr	r2, [fp, #-132]	; 0xffffff7c
   1a6fc:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1a700:	add	r2, r1, r2
   1a704:	str	r2, [fp, #-136]	; 0xffffff78
   1a708:	ldr	r2, [fp, #-76]	; 0xffffffb4
   1a70c:	strb	r6, [fp, #-140]	; 0xffffff74
   1a710:	add	r3, r3, r2
   1a714:	strb	r6, [fp, #-84]	; 0xffffffac
   1a718:	str	r3, [fp, #-80]	; 0xffffffb0
   1a71c:	b	1a334 <close_stdout@@Base+0x52b8>
   1a720:	ldrb	r4, [fp, #-84]	; 0xffffffac
   1a724:	b	1a2c0 <close_stdout@@Base+0x5244>
   1a728:	ldr	r0, [r1]
   1a72c:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1a730:	bl	1161c <memcmp@plt>
   1a734:	rsbs	r0, r0, #1
   1a738:	movcc	r0, #0
   1a73c:	b	1a2f8 <close_stdout@@Base+0x527c>
   1a740:	str	r5, [r6, #8]
   1a744:	b	1a238 <close_stdout@@Base+0x51bc>
   1a748:	ldr	r3, [fp, #-192]	; 0xffffff40
   1a74c:	str	r4, [fp, #-188]	; 0xffffff44
   1a750:	ldrb	r3, [r3]
   1a754:	cmp	r3, #0
   1a758:	bne	1a904 <close_stdout@@Base+0x5888>
   1a75c:	ldr	sl, [fp, #-180]	; 0xffffff4c
   1a760:	cmp	sl, #0
   1a764:	beq	1a550 <close_stdout@@Base+0x54d4>
   1a768:	ldr	r0, [pc, #448]	; 1a930 <close_stdout@@Base+0x58b4>
   1a76c:	mov	r2, #179	; 0xb3
   1a770:	ldr	r1, [pc, #444]	; 1a934 <close_stdout@@Base+0x58b8>
   1a774:	ldr	r3, [pc, #444]	; 1a938 <close_stdout@@Base+0x58bc>
   1a778:	add	r0, pc, r0
   1a77c:	add	r1, pc, r1
   1a780:	add	r3, pc, r3
   1a784:	bl	11958 <__assert_fail@plt>
   1a788:	ldrb	r3, [fp, #-152]	; 0xffffff68
   1a78c:	ldr	sl, [fp, #-136]	; 0xffffff78
   1a790:	cmp	r3, #0
   1a794:	bne	1a818 <close_stdout@@Base+0x579c>
   1a798:	ldr	r1, [pc, #396]	; 1a92c <close_stdout@@Base+0x58b0>
   1a79c:	ldrb	r2, [sl]
   1a7a0:	ldr	r0, [r8, r1]
   1a7a4:	and	r1, r2, #31
   1a7a8:	lsr	r2, r2, #5
   1a7ac:	ldr	r2, [r0, r2, lsl #2]
   1a7b0:	lsr	r2, r2, r1
   1a7b4:	tst	r2, #1
   1a7b8:	beq	1a804 <close_stdout@@Base+0x5788>
   1a7bc:	str	r5, [fp, #-132]	; 0xffffff7c
   1a7c0:	mov	r4, #1
   1a7c4:	ldrb	r3, [sl]
   1a7c8:	strb	r5, [fp, #-128]	; 0xffffff80
   1a7cc:	str	r3, [fp, #-124]	; 0xffffff84
   1a7d0:	cmp	r4, #0
   1a7d4:	strb	r5, [fp, #-140]	; 0xffffff74
   1a7d8:	beq	1a6f0 <close_stdout@@Base+0x5674>
   1a7dc:	ldr	r3, [fp, #-124]	; 0xffffff84
   1a7e0:	cmp	r3, #0
   1a7e4:	bne	1a6f0 <close_stdout@@Base+0x5674>
   1a7e8:	b	1a484 <close_stdout@@Base+0x5408>
   1a7ec:	mov	r0, r9
   1a7f0:	mov	r1, r6
   1a7f4:	ldr	r2, [fp, #-188]	; 0xffffff44
   1a7f8:	bl	115e0 <memcpy@plt>
   1a7fc:	str	r9, [r9, #-16]
   1a800:	b	1a4c4 <close_stdout@@Base+0x5448>
   1a804:	mov	r0, r7
   1a808:	bl	115f8 <mbsinit@plt>
   1a80c:	cmp	r0, #0
   1a810:	beq	1a8e0 <close_stdout@@Base+0x5864>
   1a814:	strb	r5, [fp, #-152]	; 0xffffff68
   1a818:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1a81c:	mov	r1, r0
   1a820:	mov	r0, sl
   1a824:	bl	1792c <close_stdout@@Base+0x28b0>
   1a828:	mov	r1, sl
   1a82c:	mov	r3, r7
   1a830:	mov	r2, r0
   1a834:	sub	r0, fp, #124	; 0x7c
   1a838:	bl	116dc <mbrtowc@plt>
   1a83c:	cmn	r0, #1
   1a840:	str	r0, [fp, #-132]	; 0xffffff7c
   1a844:	strbeq	r6, [fp, #-128]	; 0xffffff80
   1a848:	streq	r5, [fp, #-132]	; 0xffffff7c
   1a84c:	beq	1a7d0 <close_stdout@@Base+0x5754>
   1a850:	cmn	r0, #2
   1a854:	beq	1a8cc <close_stdout@@Base+0x5850>
   1a858:	cmp	r0, #0
   1a85c:	bne	1a880 <close_stdout@@Base+0x5804>
   1a860:	ldr	r3, [fp, #-136]	; 0xffffff78
   1a864:	str	r5, [fp, #-132]	; 0xffffff7c
   1a868:	ldrb	r3, [r3]
   1a86c:	cmp	r3, #0
   1a870:	bne	1a904 <close_stdout@@Base+0x5888>
   1a874:	ldr	r3, [fp, #-124]	; 0xffffff84
   1a878:	cmp	r3, #0
   1a87c:	bne	1a768 <close_stdout@@Base+0x56ec>
   1a880:	mov	r0, r7
   1a884:	strb	r5, [fp, #-128]	; 0xffffff80
   1a888:	bl	115f8 <mbsinit@plt>
   1a88c:	mov	r4, #1
   1a890:	cmp	r0, #0
   1a894:	strbne	r6, [fp, #-152]	; 0xffffff68
   1a898:	b	1a7d0 <close_stdout@@Base+0x5754>
   1a89c:	ldr	r0, [fp, #-80]	; 0xffffffb0
   1a8a0:	bl	11790 <strlen@plt>
   1a8a4:	strb	r6, [fp, #-72]	; 0xffffffb8
   1a8a8:	str	r0, [fp, #-76]	; 0xffffffb4
   1a8ac:	b	1a37c <close_stdout@@Base+0x5300>
   1a8b0:	ldr	r3, [fp, #-136]	; 0xffffff78
   1a8b4:	ldr	r1, [fp, #-248]	; 0xffffff08
   1a8b8:	str	r3, [r1]
   1a8bc:	ldr	r0, [fp, #-236]	; 0xffffff14
   1a8c0:	bl	1be58 <close_stdout@@Base+0x6ddc>
   1a8c4:	mov	r0, #1
   1a8c8:	b	1a08c <close_stdout@@Base+0x5010>
   1a8cc:	ldr	r0, [fp, #-136]	; 0xffffff78
   1a8d0:	bl	11790 <strlen@plt>
   1a8d4:	strb	r6, [fp, #-128]	; 0xffffff80
   1a8d8:	str	r0, [fp, #-132]	; 0xffffff7c
   1a8dc:	b	1a7d0 <close_stdout@@Base+0x5754>
   1a8e0:	ldr	r0, [pc, #84]	; 1a93c <close_stdout@@Base+0x58c0>
   1a8e4:	mov	r2, #150	; 0x96
   1a8e8:	ldr	r1, [pc, #80]	; 1a940 <close_stdout@@Base+0x58c4>
   1a8ec:	ldr	r3, [pc, #80]	; 1a944 <close_stdout@@Base+0x58c8>
   1a8f0:	add	r0, pc, r0
   1a8f4:	add	r1, pc, r1
   1a8f8:	add	r3, pc, r3
   1a8fc:	bl	11958 <__assert_fail@plt>
   1a900:	bl	11634 <__stack_chk_fail@plt>
   1a904:	ldr	r0, [pc, #60]	; 1a948 <close_stdout@@Base+0x58cc>
   1a908:	mov	r2, #178	; 0xb2
   1a90c:	ldr	r1, [pc, #56]	; 1a94c <close_stdout@@Base+0x58d0>
   1a910:	ldr	r3, [pc, #56]	; 1a950 <close_stdout@@Base+0x58d4>
   1a914:	add	r0, pc, r0
   1a918:	add	r1, pc, r1
   1a91c:	add	r3, pc, r3
   1a920:	bl	11958 <__assert_fail@plt>
   1a924:	andeq	r4, r1, ip, lsr #31
   1a928:	andeq	r0, r0, ip, ror r1
   1a92c:	andeq	r0, r0, r8, ror r1
   1a930:	strdeq	r3, [r0], -r0
   1a934:	andeq	r3, r0, r4, asr #9
   1a938:	andeq	r3, r0, r4, lsr #19
   1a93c:	andeq	r3, r0, r8, lsr r3
   1a940:	andeq	r3, r0, ip, asr #6
   1a944:	andeq	r3, r0, ip, lsr #16
   1a948:	andeq	r3, r0, ip, lsr r3
   1a94c:	andeq	r3, r0, r8, lsr #6
   1a950:	andeq	r3, r0, r8, lsl #16
   1a954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a958:	sub	sp, sp, #348	; 0x15c
   1a95c:	ldr	r4, [pc, #3188]	; 1b5d8 <close_stdout@@Base+0x655c>
   1a960:	ldr	r3, [pc, #3188]	; 1b5dc <close_stdout@@Base+0x6560>
   1a964:	add	r4, pc, r4
   1a968:	str	r0, [sp, #16]
   1a96c:	str	r1, [sp, #4]
   1a970:	ldr	r3, [r4, r3]
   1a974:	str	r3, [sp, #20]
   1a978:	ldr	r3, [r3]
   1a97c:	str	r3, [sp, #340]	; 0x154
   1a980:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1a984:	cmp	r0, #1
   1a988:	bls	1ab6c <close_stdout@@Base+0x5af0>
   1a98c:	ldr	r0, [sp, #4]
   1a990:	add	r5, sp, #64	; 0x40
   1a994:	ldr	ip, [pc, #3140]	; 1b5e0 <close_stdout@@Base+0x6564>
   1a998:	mov	r2, #0
   1a99c:	str	r2, [r5, #4]
   1a9a0:	ldrb	r1, [r0]
   1a9a4:	str	r0, [sp, #76]	; 0x4c
   1a9a8:	strb	r2, [sp, #60]	; 0x3c
   1a9ac:	and	r3, r1, #31
   1a9b0:	str	r2, [sp, #64]	; 0x40
   1a9b4:	lsr	r0, r1, #5
   1a9b8:	strb	r2, [sp, #72]	; 0x48
   1a9bc:	ldr	r6, [r4, ip]
   1a9c0:	ldr	r2, [r6, r0, lsl #2]
   1a9c4:	lsr	r3, r2, r3
   1a9c8:	ands	r4, r3, #1
   1a9cc:	beq	1aabc <close_stdout@@Base+0x5a40>
   1a9d0:	mov	r4, r1
   1a9d4:	cmp	r4, #0
   1a9d8:	mov	r3, #1
   1a9dc:	str	r1, [sp, #88]	; 0x58
   1a9e0:	str	r3, [sp, #80]	; 0x50
   1a9e4:	strb	r3, [sp, #84]	; 0x54
   1a9e8:	mov	r3, #1
   1a9ec:	strb	r3, [sp, #72]	; 0x48
   1a9f0:	beq	1ab4c <close_stdout@@Base+0x5ad0>
   1a9f4:	add	r2, sp, #120	; 0x78
   1a9f8:	add	r0, sp, #176	; 0xb0
   1a9fc:	str	r2, [sp, #8]
   1aa00:	mov	r3, #0
   1aa04:	ldr	r2, [sp, #4]
   1aa08:	mov	r9, r3
   1aa0c:	str	r0, [sp, #44]	; 0x2c
   1aa10:	mov	r5, r3
   1aa14:	ldr	r0, [sp, #16]
   1aa18:	mov	r4, #1
   1aa1c:	mov	r1, #1
   1aa20:	str	r2, [sp, #132]	; 0x84
   1aa24:	str	r1, [sp, #32]
   1aa28:	add	r2, sp, #200	; 0xc8
   1aa2c:	str	r0, [sp, #188]	; 0xbc
   1aa30:	mov	r8, r0
   1aa34:	add	r1, sp, #144	; 0x90
   1aa38:	add	r0, sp, #56	; 0x38
   1aa3c:	str	r3, [sp, #28]
   1aa40:	strb	r3, [sp, #116]	; 0x74
   1aa44:	str	r3, [sp, #12]
   1aa48:	str	r3, [sp, #120]	; 0x78
   1aa4c:	strb	r3, [sp, #128]	; 0x80
   1aa50:	strb	r3, [sp, #172]	; 0xac
   1aa54:	str	r3, [sp, #176]	; 0xb0
   1aa58:	str	r2, [sp, #48]	; 0x30
   1aa5c:	strb	r3, [sp, #184]	; 0xb8
   1aa60:	str	r0, [sp, #52]	; 0x34
   1aa64:	str	r3, [sp, #124]	; 0x7c
   1aa68:	str	r1, [sp, #24]
   1aa6c:	str	r3, [sp, #180]	; 0xb4
   1aa70:	ldrb	r3, [sp, #172]	; 0xac
   1aa74:	cmp	r3, #0
   1aa78:	bne	1acd4 <close_stdout@@Base+0x5c58>
   1aa7c:	ldrb	r3, [r8]
   1aa80:	and	r2, r3, #31
   1aa84:	lsr	r3, r3, #5
   1aa88:	ldr	r3, [r6, r3, lsl #2]
   1aa8c:	lsr	r3, r3, r2
   1aa90:	tst	r3, #1
   1aa94:	beq	1acc0 <close_stdout@@Base+0x5c44>
   1aa98:	str	r4, [sp, #192]	; 0xc0
   1aa9c:	ldrb	r7, [r8]
   1aaa0:	strb	r4, [sp, #196]	; 0xc4
   1aaa4:	cmp	r7, #0
   1aaa8:	strb	r4, [sp, #184]	; 0xb8
   1aaac:	str	r7, [sp, #200]	; 0xc8
   1aab0:	bne	1ad40 <close_stdout@@Base+0x5cc4>
   1aab4:	mov	r0, r7
   1aab8:	b	1ab50 <close_stdout@@Base+0x5ad4>
   1aabc:	mov	r0, r5
   1aac0:	bl	115f8 <mbsinit@plt>
   1aac4:	cmp	r0, #0
   1aac8:	beq	1b594 <close_stdout@@Base+0x6518>
   1aacc:	mov	r7, #1
   1aad0:	strb	r7, [sp, #60]	; 0x3c
   1aad4:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1aad8:	mov	r1, r0
   1aadc:	ldr	r0, [sp, #4]
   1aae0:	bl	1792c <close_stdout@@Base+0x28b0>
   1aae4:	ldr	r1, [sp, #4]
   1aae8:	mov	r3, r5
   1aaec:	mov	r2, r0
   1aaf0:	add	r0, sp, #88	; 0x58
   1aaf4:	bl	116dc <mbrtowc@plt>
   1aaf8:	cmn	r0, #1
   1aafc:	str	r0, [sp, #80]	; 0x50
   1ab00:	strbeq	r4, [sp, #84]	; 0x54
   1ab04:	streq	r7, [sp, #80]	; 0x50
   1ab08:	beq	1ad58 <close_stdout@@Base+0x5cdc>
   1ab0c:	cmn	r0, #2
   1ab10:	beq	1ad48 <close_stdout@@Base+0x5ccc>
   1ab14:	cmp	r0, #0
   1ab18:	beq	1b4d0 <close_stdout@@Base+0x6454>
   1ab1c:	ldr	r4, [sp, #88]	; 0x58
   1ab20:	mov	r0, r5
   1ab24:	mov	r3, #1
   1ab28:	strb	r3, [sp, #84]	; 0x54
   1ab2c:	bl	115f8 <mbsinit@plt>
   1ab30:	cmp	r0, #0
   1ab34:	movne	r3, #0
   1ab38:	strbne	r3, [sp, #60]	; 0x3c
   1ab3c:	cmp	r4, #0
   1ab40:	mov	r3, #1
   1ab44:	strb	r3, [sp, #72]	; 0x48
   1ab48:	bne	1a9f4 <close_stdout@@Base+0x5978>
   1ab4c:	ldr	r0, [sp, #16]
   1ab50:	ldr	r1, [sp, #20]
   1ab54:	ldr	r2, [sp, #340]	; 0x154
   1ab58:	ldr	r3, [r1]
   1ab5c:	cmp	r2, r3
   1ab60:	bne	1b5b4 <close_stdout@@Base+0x6538>
   1ab64:	add	sp, sp, #348	; 0x15c
   1ab68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ab6c:	ldr	r2, [sp, #4]
   1ab70:	ldrb	r8, [r2]
   1ab74:	cmp	r8, #0
   1ab78:	beq	1ab4c <close_stdout@@Base+0x5ad0>
   1ab7c:	ldr	r3, [sp, #16]
   1ab80:	ldrb	sl, [r3]
   1ab84:	cmp	sl, #0
   1ab88:	beq	1b048 <close_stdout@@Base+0x5fcc>
   1ab8c:	cmp	sl, r8
   1ab90:	mov	r4, #0
   1ab94:	mov	r5, r4
   1ab98:	mov	r9, r4
   1ab9c:	add	r0, sp, #56	; 0x38
   1aba0:	add	r7, r3, #1
   1aba4:	mov	r6, r3
   1aba8:	mov	fp, r2
   1abac:	mov	r1, #1
   1abb0:	str	r0, [sp, #8]
   1abb4:	add	r4, r4, #1
   1abb8:	beq	1ac5c <close_stdout@@Base+0x5be0>
   1abbc:	ldrb	sl, [r6, #1]
   1abc0:	cmp	sl, #0
   1abc4:	beq	1b048 <close_stdout@@Base+0x5fcc>
   1abc8:	add	r5, r5, #1
   1abcc:	cmp	r4, #9
   1abd0:	movls	r3, #0
   1abd4:	andhi	r3, r1, #1
   1abd8:	cmp	r3, #0
   1abdc:	beq	1ac48 <close_stdout@@Base+0x5bcc>
   1abe0:	add	r3, r4, r4, lsl #2
   1abe4:	cmp	r5, r3
   1abe8:	bcc	1ac44 <close_stdout@@Base+0x5bc8>
   1abec:	cmp	fp, #0
   1abf0:	beq	1ac10 <close_stdout@@Base+0x5b94>
   1abf4:	rsb	r1, r9, r5
   1abf8:	mov	r0, fp
   1abfc:	bl	1188c <strnlen@plt>
   1ac00:	mov	r9, r5
   1ac04:	ldrb	r3, [fp, r0]!
   1ac08:	cmp	r3, #0
   1ac0c:	bne	1ac44 <close_stdout@@Base+0x5bc8>
   1ac10:	ldr	r0, [sp, #4]
   1ac14:	bl	11790 <strlen@plt>
   1ac18:	ldr	r1, [sp, #4]
   1ac1c:	add	r3, sp, #56	; 0x38
   1ac20:	mov	r2, r0
   1ac24:	mov	r0, r7
   1ac28:	bl	19eac <close_stdout@@Base+0x4e30>
   1ac2c:	cmp	r0, #0
   1ac30:	bne	1b58c <close_stdout@@Base+0x6510>
   1ac34:	mov	fp, r0
   1ac38:	ldrb	sl, [r6, #1]
   1ac3c:	mov	r1, r0
   1ac40:	b	1ac48 <close_stdout@@Base+0x5bcc>
   1ac44:	mov	r1, #1
   1ac48:	cmp	sl, r8
   1ac4c:	add	r7, r7, #1
   1ac50:	add	r6, r6, #1
   1ac54:	add	r4, r4, #1
   1ac58:	bne	1abbc <close_stdout@@Base+0x5b40>
   1ac5c:	ldr	r2, [sp, #4]
   1ac60:	ldrb	r3, [r2, #1]
   1ac64:	cmp	r3, #0
   1ac68:	beq	1acb8 <close_stdout@@Base+0x5c3c>
   1ac6c:	ldrb	sl, [r6, #1]
   1ac70:	cmp	sl, #0
   1ac74:	beq	1b048 <close_stdout@@Base+0x5fcc>
   1ac78:	cmp	r3, sl
   1ac7c:	add	r3, r5, #2
   1ac80:	bne	1b0e4 <close_stdout@@Base+0x6068>
   1ac84:	rsb	r0, r5, #0
   1ac88:	add	r5, r2, r0
   1ac8c:	add	r0, r6, r0
   1ac90:	b	1acac <close_stdout@@Base+0x5c30>
   1ac94:	ldrb	ip, [r0, r3]
   1ac98:	cmp	ip, #0
   1ac9c:	beq	1b048 <close_stdout@@Base+0x5fcc>
   1aca0:	cmp	r2, ip
   1aca4:	add	r3, r3, #1
   1aca8:	bne	1b0e4 <close_stdout@@Base+0x6068>
   1acac:	ldrb	r2, [r5, r3]
   1acb0:	cmp	r2, #0
   1acb4:	bne	1ac94 <close_stdout@@Base+0x5c18>
   1acb8:	mov	r0, r6
   1acbc:	b	1ab50 <close_stdout@@Base+0x5ad4>
   1acc0:	add	r0, sp, #176	; 0xb0
   1acc4:	bl	115f8 <mbsinit@plt>
   1acc8:	cmp	r0, #0
   1accc:	beq	1b594 <close_stdout@@Base+0x6518>
   1acd0:	strb	r4, [sp, #172]	; 0xac
   1acd4:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1acd8:	mov	r1, r0
   1acdc:	mov	r0, r8
   1ace0:	bl	1792c <close_stdout@@Base+0x28b0>
   1ace4:	mov	r1, r8
   1ace8:	add	r3, sp, #176	; 0xb0
   1acec:	mov	r2, r0
   1acf0:	add	r0, sp, #200	; 0xc8
   1acf4:	bl	116dc <mbrtowc@plt>
   1acf8:	cmn	r0, #1
   1acfc:	str	r0, [sp, #192]	; 0xc0
   1ad00:	strbeq	r5, [sp, #196]	; 0xc4
   1ad04:	streq	r4, [sp, #192]	; 0xc0
   1ad08:	beq	1ad74 <close_stdout@@Base+0x5cf8>
   1ad0c:	cmn	r0, #2
   1ad10:	beq	1ad64 <close_stdout@@Base+0x5ce8>
   1ad14:	cmp	r0, #0
   1ad18:	beq	1b4ac <close_stdout@@Base+0x6430>
   1ad1c:	ldr	r7, [sp, #200]	; 0xc8
   1ad20:	add	r0, sp, #176	; 0xb0
   1ad24:	strb	r4, [sp, #196]	; 0xc4
   1ad28:	bl	115f8 <mbsinit@plt>
   1ad2c:	strb	r4, [sp, #184]	; 0xb8
   1ad30:	cmp	r0, #0
   1ad34:	strbne	r5, [sp, #172]	; 0xac
   1ad38:	cmp	r7, #0
   1ad3c:	beq	1aab4 <close_stdout@@Base+0x5a38>
   1ad40:	mov	r3, #1
   1ad44:	b	1ad7c <close_stdout@@Base+0x5d00>
   1ad48:	ldr	r0, [sp, #76]	; 0x4c
   1ad4c:	bl	11790 <strlen@plt>
   1ad50:	strb	r4, [sp, #84]	; 0x54
   1ad54:	str	r0, [sp, #80]	; 0x50
   1ad58:	mov	r3, #1
   1ad5c:	strb	r3, [sp, #72]	; 0x48
   1ad60:	b	1a9f4 <close_stdout@@Base+0x5978>
   1ad64:	ldr	r0, [sp, #188]	; 0xbc
   1ad68:	bl	11790 <strlen@plt>
   1ad6c:	strb	r5, [sp, #196]	; 0xc4
   1ad70:	str	r0, [sp, #192]	; 0xc0
   1ad74:	mov	r3, #0
   1ad78:	strb	r4, [sp, #184]	; 0xb8
   1ad7c:	ldr	r8, [sp, #32]
   1ad80:	ldr	r2, [sp, #12]
   1ad84:	cmp	r2, #9
   1ad88:	movls	r8, #0
   1ad8c:	andhi	r8, r8, #1
   1ad90:	cmp	r8, #0
   1ad94:	beq	1ae6c <close_stdout@@Base+0x5df0>
   1ad98:	ldr	r1, [sp, #12]
   1ad9c:	add	r2, r1, r1, lsl #2
   1ada0:	cmp	r9, r2
   1ada4:	bcc	1b03c <close_stdout@@Base+0x5fc0>
   1ada8:	ldr	r2, [sp, #28]
   1adac:	subs	r7, r9, r2
   1adb0:	beq	1ae44 <close_stdout@@Base+0x5dc8>
   1adb4:	ldrb	sl, [sp, #128]	; 0x80
   1adb8:	cmp	sl, #0
   1adbc:	beq	1adec <close_stdout@@Base+0x5d70>
   1adc0:	ldrb	sl, [sp, #140]	; 0x8c
   1adc4:	cmp	sl, #0
   1adc8:	bne	1ae38 <close_stdout@@Base+0x5dbc>
   1adcc:	ldr	sl, [sp, #132]	; 0x84
   1add0:	subs	r7, r7, #1
   1add4:	ldr	r3, [sp, #136]	; 0x88
   1add8:	strb	r5, [sp, #128]	; 0x80
   1addc:	add	sl, sl, r3
   1ade0:	str	sl, [sp, #132]	; 0x84
   1ade4:	beq	1b110 <close_stdout@@Base+0x6094>
   1ade8:	mov	sl, #0
   1adec:	ldrb	r3, [sp, #116]	; 0x74
   1adf0:	ldr	fp, [sp, #132]	; 0x84
   1adf4:	cmp	r3, #0
   1adf8:	bne	1aedc <close_stdout@@Base+0x5e60>
   1adfc:	ldrb	r3, [fp]
   1ae00:	and	r2, r3, #31
   1ae04:	lsr	r3, r3, #5
   1ae08:	ldr	r3, [r6, r3, lsl #2]
   1ae0c:	lsr	r3, r3, r2
   1ae10:	tst	r3, #1
   1ae14:	beq	1aec8 <close_stdout@@Base+0x5e4c>
   1ae18:	str	r4, [sp, #136]	; 0x88
   1ae1c:	mov	sl, r8
   1ae20:	ldrb	r3, [fp]
   1ae24:	strb	r4, [sp, #140]	; 0x8c
   1ae28:	str	r3, [sp, #144]	; 0x90
   1ae2c:	cmp	sl, #0
   1ae30:	strb	r4, [sp, #128]	; 0x80
   1ae34:	beq	1adcc <close_stdout@@Base+0x5d50>
   1ae38:	ldr	r3, [sp, #144]	; 0x90
   1ae3c:	cmp	r3, #0
   1ae40:	bne	1adcc <close_stdout@@Base+0x5d50>
   1ae44:	ldrb	r3, [sp, #128]	; 0x80
   1ae48:	cmp	r3, #0
   1ae4c:	ldrbne	r8, [sp, #140]	; 0x8c
   1ae50:	beq	1b10c <close_stdout@@Base+0x6090>
   1ae54:	cmp	r8, #0
   1ae58:	bne	1b0ec <close_stdout@@Base+0x6070>
   1ae5c:	ldrb	r3, [sp, #196]	; 0xc4
   1ae60:	mov	r0, #1
   1ae64:	str	r9, [sp, #28]
   1ae68:	str	r0, [sp, #32]
   1ae6c:	cmp	r3, #0
   1ae70:	ldr	r3, [sp, #12]
   1ae74:	add	r7, r9, #1
   1ae78:	add	r3, r3, #1
   1ae7c:	str	r3, [sp, #12]
   1ae80:	beq	1af60 <close_stdout@@Base+0x5ee4>
   1ae84:	ldrb	r3, [sp, #84]	; 0x54
   1ae88:	cmp	r3, #0
   1ae8c:	beq	1af60 <close_stdout@@Base+0x5ee4>
   1ae90:	ldr	r0, [sp, #200]	; 0xc8
   1ae94:	ldr	r3, [sp, #88]	; 0x58
   1ae98:	subs	r3, r0, r3
   1ae9c:	rsbs	r0, r3, #0
   1aea0:	adcs	r0, r0, r3
   1aea4:	cmp	r0, #0
   1aea8:	bne	1af90 <close_stdout@@Base+0x5f14>
   1aeac:	ldr	r8, [sp, #188]	; 0xbc
   1aeb0:	mov	r9, r7
   1aeb4:	ldr	r3, [sp, #192]	; 0xc0
   1aeb8:	strb	r5, [sp, #184]	; 0xb8
   1aebc:	add	r8, r8, r3
   1aec0:	str	r8, [sp, #188]	; 0xbc
   1aec4:	b	1aa70 <close_stdout@@Base+0x59f4>
   1aec8:	add	r0, sp, #120	; 0x78
   1aecc:	bl	115f8 <mbsinit@plt>
   1aed0:	cmp	r0, #0
   1aed4:	beq	1b594 <close_stdout@@Base+0x6518>
   1aed8:	strb	r4, [sp, #116]	; 0x74
   1aedc:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1aee0:	mov	r1, r0
   1aee4:	mov	r0, fp
   1aee8:	bl	1792c <close_stdout@@Base+0x28b0>
   1aeec:	mov	r1, fp
   1aef0:	add	r3, sp, #120	; 0x78
   1aef4:	mov	r2, r0
   1aef8:	add	r0, sp, #144	; 0x90
   1aefc:	bl	116dc <mbrtowc@plt>
   1af00:	cmn	r0, #1
   1af04:	str	r0, [sp, #136]	; 0x88
   1af08:	strbeq	r5, [sp, #140]	; 0x8c
   1af0c:	streq	r4, [sp, #136]	; 0x88
   1af10:	beq	1ae2c <close_stdout@@Base+0x5db0>
   1af14:	cmn	r0, #2
   1af18:	beq	1b028 <close_stdout@@Base+0x5fac>
   1af1c:	cmp	r0, #0
   1af20:	bne	1af44 <close_stdout@@Base+0x5ec8>
   1af24:	ldr	r3, [sp, #132]	; 0x84
   1af28:	str	r4, [sp, #136]	; 0x88
   1af2c:	ldrb	r3, [r3]
   1af30:	cmp	r3, #0
   1af34:	bne	1b5b8 <close_stdout@@Base+0x653c>
   1af38:	ldr	r3, [sp, #144]	; 0x90
   1af3c:	cmp	r3, #0
   1af40:	bne	1b0c4 <close_stdout@@Base+0x6048>
   1af44:	add	r0, sp, #120	; 0x78
   1af48:	strb	r4, [sp, #140]	; 0x8c
   1af4c:	bl	115f8 <mbsinit@plt>
   1af50:	mov	sl, r8
   1af54:	cmp	r0, #0
   1af58:	strbne	r5, [sp, #116]	; 0x74
   1af5c:	b	1ae2c <close_stdout@@Base+0x5db0>
   1af60:	ldr	r2, [sp, #192]	; 0xc0
   1af64:	ldr	r3, [sp, #80]	; 0x50
   1af68:	cmp	r2, r3
   1af6c:	movne	r0, #0
   1af70:	bne	1aea4 <close_stdout@@Base+0x5e28>
   1af74:	ldr	r0, [sp, #188]	; 0xbc
   1af78:	ldr	r1, [sp, #76]	; 0x4c
   1af7c:	bl	1161c <memcmp@plt>
   1af80:	rsbs	r0, r0, #1
   1af84:	movcc	r0, #0
   1af88:	cmp	r0, #0
   1af8c:	beq	1aeac <close_stdout@@Base+0x5e30>
   1af90:	ldr	r0, [sp, #4]
   1af94:	add	r7, sp, #172	; 0xac
   1af98:	add	ip, sp, #228	; 0xe4
   1af9c:	add	r8, sp, #288	; 0x120
   1afa0:	str	r0, [sp, #300]	; 0x12c
   1afa4:	ldm	r7!, {r0, r1, r2, r3}
   1afa8:	stmia	ip!, {r0, r1, r2, r3}
   1afac:	ldm	r7!, {r0, r1, r2, r3}
   1afb0:	strb	r5, [sp, #240]	; 0xf0
   1afb4:	stmia	ip!, {r0, r1, r2, r3}
   1afb8:	ldm	r7!, {r0, r1, r2, r3}
   1afbc:	ldr	sl, [sp, #244]	; 0xf4
   1afc0:	stmia	ip!, {r0, r1, r2, r3}
   1afc4:	ldm	r7, {r0, r1}
   1afc8:	ldr	r3, [sp, #248]	; 0xf8
   1afcc:	stm	ip, {r0, r1}
   1afd0:	add	r3, sl, r3
   1afd4:	str	r3, [sp, #244]	; 0xf4
   1afd8:	ldr	r1, [sp, #4]
   1afdc:	str	r5, [sp, #288]	; 0x120
   1afe0:	strb	r5, [sp, #296]	; 0x128
   1afe4:	ldrb	r3, [r1]
   1afe8:	strb	r5, [sp, #284]	; 0x11c
   1afec:	and	r2, r3, #31
   1aff0:	str	r5, [r8, #4]
   1aff4:	lsr	r1, r3, #5
   1aff8:	ldr	r7, [r6, r1, lsl #2]
   1affc:	lsr	r7, r7, r2
   1b000:	ands	r7, r7, #1
   1b004:	beq	1b050 <close_stdout@@Base+0x5fd4>
   1b008:	mov	r7, r3
   1b00c:	str	r4, [sp, #304]	; 0x130
   1b010:	str	r3, [sp, #312]	; 0x138
   1b014:	strb	r4, [sp, #308]	; 0x134
   1b018:	cmp	r7, #0
   1b01c:	strb	r4, [sp, #296]	; 0x128
   1b020:	bne	1b1d4 <close_stdout@@Base+0x6158>
   1b024:	bl	11934 <abort@plt>
   1b028:	ldr	r0, [sp, #132]	; 0x84
   1b02c:	bl	11790 <strlen@plt>
   1b030:	strb	r5, [sp, #140]	; 0x8c
   1b034:	str	r0, [sp, #136]	; 0x88
   1b038:	b	1ae2c <close_stdout@@Base+0x5db0>
   1b03c:	mov	r2, #1
   1b040:	str	r2, [sp, #32]
   1b044:	b	1ae6c <close_stdout@@Base+0x5df0>
   1b048:	mov	r0, #0
   1b04c:	b	1ab50 <close_stdout@@Base+0x5ad4>
   1b050:	mov	r0, r8
   1b054:	bl	115f8 <mbsinit@plt>
   1b058:	cmp	r0, #0
   1b05c:	beq	1b594 <close_stdout@@Base+0x6518>
   1b060:	strb	r4, [sp, #284]	; 0x11c
   1b064:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1b068:	mov	r1, r0
   1b06c:	ldr	r0, [sp, #4]
   1b070:	bl	1792c <close_stdout@@Base+0x28b0>
   1b074:	ldr	r1, [sp, #4]
   1b078:	mov	r3, r8
   1b07c:	mov	r2, r0
   1b080:	add	r0, sp, #312	; 0x138
   1b084:	bl	116dc <mbrtowc@plt>
   1b088:	cmn	r0, #1
   1b08c:	str	r0, [sp, #304]	; 0x130
   1b090:	beq	1b564 <close_stdout@@Base+0x64e8>
   1b094:	cmn	r0, #2
   1b098:	beq	1b574 <close_stdout@@Base+0x64f8>
   1b09c:	cmp	r0, #0
   1b0a0:	bne	1b530 <close_stdout@@Base+0x64b4>
   1b0a4:	ldr	fp, [sp, #300]	; 0x12c
   1b0a8:	str	r4, [sp, #304]	; 0x130
   1b0ac:	ldrb	r3, [fp]
   1b0b0:	cmp	r3, #0
   1b0b4:	bne	1b5b8 <close_stdout@@Base+0x653c>
   1b0b8:	ldr	r7, [sp, #312]	; 0x138
   1b0bc:	cmp	r7, #0
   1b0c0:	beq	1b534 <close_stdout@@Base+0x64b8>
   1b0c4:	ldr	r0, [pc, #1304]	; 1b5e4 <close_stdout@@Base+0x6568>
   1b0c8:	mov	r2, #179	; 0xb3
   1b0cc:	ldr	r1, [pc, #1300]	; 1b5e8 <close_stdout@@Base+0x656c>
   1b0d0:	ldr	r3, [pc, #1300]	; 1b5ec <close_stdout@@Base+0x6570>
   1b0d4:	add	r0, pc, r0
   1b0d8:	add	r1, pc, r1
   1b0dc:	add	r3, pc, r3
   1b0e0:	bl	11958 <__assert_fail@plt>
   1b0e4:	mov	r5, r3
   1b0e8:	b	1abcc <close_stdout@@Base+0x5b50>
   1b0ec:	ldr	r3, [sp, #144]	; 0x90
   1b0f0:	cmp	r3, #0
   1b0f4:	beq	1b4f4 <close_stdout@@Base+0x6478>
   1b0f8:	mov	r1, #1
   1b0fc:	ldrb	r3, [sp, #196]	; 0xc4
   1b100:	str	r9, [sp, #28]
   1b104:	str	r1, [sp, #32]
   1b108:	b	1ae6c <close_stdout@@Base+0x5df0>
   1b10c:	ldr	sl, [sp, #132]	; 0x84
   1b110:	ldrb	r3, [sp, #116]	; 0x74
   1b114:	cmp	r3, #0
   1b118:	bne	1b14c <close_stdout@@Base+0x60d0>
   1b11c:	ldrb	r3, [sl]
   1b120:	and	r2, r3, #31
   1b124:	lsr	r3, r3, #5
   1b128:	ldr	r3, [r6, r3, lsl #2]
   1b12c:	lsr	r3, r3, r2
   1b130:	tst	r3, #1
   1b134:	bne	1b51c <close_stdout@@Base+0x64a0>
   1b138:	add	r0, sp, #120	; 0x78
   1b13c:	bl	115f8 <mbsinit@plt>
   1b140:	cmp	r0, #0
   1b144:	beq	1b594 <close_stdout@@Base+0x6518>
   1b148:	strb	r4, [sp, #116]	; 0x74
   1b14c:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1b150:	mov	r1, r0
   1b154:	mov	r0, sl
   1b158:	bl	1792c <close_stdout@@Base+0x28b0>
   1b15c:	mov	r1, sl
   1b160:	add	r3, sp, #120	; 0x78
   1b164:	mov	r2, r0
   1b168:	add	r0, sp, #144	; 0x90
   1b16c:	bl	116dc <mbrtowc@plt>
   1b170:	cmn	r0, #1
   1b174:	str	r0, [sp, #136]	; 0x88
   1b178:	strbeq	r5, [sp, #140]	; 0x8c
   1b17c:	streq	r4, [sp, #136]	; 0x88
   1b180:	moveq	r8, #0
   1b184:	beq	1b1cc <close_stdout@@Base+0x6150>
   1b188:	cmn	r0, #2
   1b18c:	beq	1b54c <close_stdout@@Base+0x64d0>
   1b190:	cmp	r0, #0
   1b194:	bne	1b1b8 <close_stdout@@Base+0x613c>
   1b198:	ldr	r3, [sp, #132]	; 0x84
   1b19c:	str	r4, [sp, #136]	; 0x88
   1b1a0:	ldrb	r3, [r3]
   1b1a4:	cmp	r3, #0
   1b1a8:	bne	1b5b8 <close_stdout@@Base+0x653c>
   1b1ac:	ldr	r3, [sp, #144]	; 0x90
   1b1b0:	cmp	r3, #0
   1b1b4:	bne	1b0c4 <close_stdout@@Base+0x6048>
   1b1b8:	add	r0, sp, #120	; 0x78
   1b1bc:	strb	r4, [sp, #140]	; 0x8c
   1b1c0:	bl	115f8 <mbsinit@plt>
   1b1c4:	cmp	r0, #0
   1b1c8:	strbne	r5, [sp, #116]	; 0x74
   1b1cc:	strb	r4, [sp, #128]	; 0x80
   1b1d0:	b	1ae54 <close_stdout@@Base+0x5dd8>
   1b1d4:	ldr	fp, [sp, #300]	; 0x12c
   1b1d8:	ldr	r2, [sp, #304]	; 0x130
   1b1dc:	add	r7, r9, #2
   1b1e0:	add	r3, sp, #312	; 0x138
   1b1e4:	add	r0, sp, #256	; 0x100
   1b1e8:	add	fp, fp, r2
   1b1ec:	ldrb	r2, [sp, #284]	; 0x11c
   1b1f0:	strb	r5, [sp, #296]	; 0x128
   1b1f4:	add	r9, sp, #232	; 0xe8
   1b1f8:	cmp	r2, #0
   1b1fc:	str	r3, [sp, #36]	; 0x24
   1b200:	str	r0, [sp, #40]	; 0x28
   1b204:	str	fp, [sp, #300]	; 0x12c
   1b208:	bne	1b2d4 <close_stdout@@Base+0x6258>
   1b20c:	ldrb	r2, [fp]
   1b210:	and	r1, r2, #31
   1b214:	lsr	r2, r2, #5
   1b218:	ldr	r2, [r6, r2, lsl #2]
   1b21c:	lsr	r2, r2, r1
   1b220:	tst	r2, #1
   1b224:	beq	1b45c <close_stdout@@Base+0x63e0>
   1b228:	str	r4, [sp, #304]	; 0x130
   1b22c:	ldrb	r3, [fp]
   1b230:	strb	r4, [sp, #308]	; 0x134
   1b234:	mov	fp, r3
   1b238:	str	r3, [sp, #312]	; 0x138
   1b23c:	cmp	fp, #0
   1b240:	strb	r4, [sp, #296]	; 0x128
   1b244:	bne	1b264 <close_stdout@@Base+0x61e8>
   1b248:	ldr	r0, [sp, #188]	; 0xbc
   1b24c:	b	1ab50 <close_stdout@@Base+0x5ad4>
   1b250:	ldr	r0, [sp, #300]	; 0x12c
   1b254:	bl	11790 <strlen@plt>
   1b258:	strb	r5, [sp, #308]	; 0x134
   1b25c:	str	r0, [sp, #304]	; 0x130
   1b260:	strb	r4, [sp, #296]	; 0x128
   1b264:	ldrb	fp, [sp, #240]	; 0xf0
   1b268:	cmp	fp, #0
   1b26c:	beq	1b338 <close_stdout@@Base+0x62bc>
   1b270:	ldrb	fp, [sp, #252]	; 0xfc
   1b274:	cmp	fp, #0
   1b278:	bne	1b384 <close_stdout@@Base+0x6308>
   1b27c:	ldr	r2, [sp, #248]	; 0xf8
   1b280:	ldr	r3, [sp, #304]	; 0x130
   1b284:	cmp	r2, r3
   1b288:	movne	r0, #1
   1b28c:	beq	1b444 <close_stdout@@Base+0x63c8>
   1b290:	cmp	r0, #0
   1b294:	add	r3, r7, #1
   1b298:	bne	1aeac <close_stdout@@Base+0x5e30>
   1b29c:	ldr	r1, [sp, #244]	; 0xf4
   1b2a0:	mov	r7, r3
   1b2a4:	ldr	r2, [sp, #248]	; 0xf8
   1b2a8:	ldr	fp, [sp, #300]	; 0x12c
   1b2ac:	add	r1, r1, r2
   1b2b0:	ldr	r2, [sp, #304]	; 0x130
   1b2b4:	strb	r0, [sp, #240]	; 0xf0
   1b2b8:	add	fp, fp, r2
   1b2bc:	ldrb	r2, [sp, #284]	; 0x11c
   1b2c0:	strb	r0, [sp, #296]	; 0x128
   1b2c4:	cmp	r2, #0
   1b2c8:	str	r1, [sp, #244]	; 0xf4
   1b2cc:	str	fp, [sp, #300]	; 0x12c
   1b2d0:	beq	1b20c <close_stdout@@Base+0x6190>
   1b2d4:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1b2d8:	mov	r1, r0
   1b2dc:	mov	r0, fp
   1b2e0:	bl	1792c <close_stdout@@Base+0x28b0>
   1b2e4:	mov	r1, fp
   1b2e8:	mov	r3, r8
   1b2ec:	mov	r2, r0
   1b2f0:	add	r0, sp, #312	; 0x138
   1b2f4:	bl	116dc <mbrtowc@plt>
   1b2f8:	cmn	r0, #1
   1b2fc:	str	r0, [sp, #304]	; 0x130
   1b300:	strbeq	r5, [sp, #308]	; 0x134
   1b304:	streq	r4, [sp, #304]	; 0x130
   1b308:	beq	1b260 <close_stdout@@Base+0x61e4>
   1b30c:	cmn	r0, #2
   1b310:	beq	1b250 <close_stdout@@Base+0x61d4>
   1b314:	cmp	r0, #0
   1b318:	beq	1b474 <close_stdout@@Base+0x63f8>
   1b31c:	ldr	fp, [sp, #312]	; 0x138
   1b320:	mov	r0, r8
   1b324:	strb	r4, [sp, #308]	; 0x134
   1b328:	bl	115f8 <mbsinit@plt>
   1b32c:	cmp	r0, #0
   1b330:	strbne	r5, [sp, #284]	; 0x11c
   1b334:	b	1b23c <close_stdout@@Base+0x61c0>
   1b338:	ldrb	r3, [sp, #228]	; 0xe4
   1b33c:	ldr	sl, [sp, #244]	; 0xf4
   1b340:	cmp	r3, #0
   1b344:	bne	1b3c0 <close_stdout@@Base+0x6344>
   1b348:	ldrb	r2, [sl]
   1b34c:	and	r1, r2, #31
   1b350:	lsr	r2, r2, #5
   1b354:	ldr	r2, [r6, r2, lsl #2]
   1b358:	lsr	r2, r2, r1
   1b35c:	tst	r2, #1
   1b360:	beq	1b3ac <close_stdout@@Base+0x6330>
   1b364:	str	r4, [sp, #248]	; 0xf8
   1b368:	mov	fp, #1
   1b36c:	ldrb	r3, [sl]
   1b370:	strb	r4, [sp, #252]	; 0xfc
   1b374:	str	r3, [sp, #256]	; 0x100
   1b378:	cmp	fp, #0
   1b37c:	strb	r4, [sp, #240]	; 0xf0
   1b380:	beq	1b27c <close_stdout@@Base+0x6200>
   1b384:	ldr	r0, [sp, #256]	; 0x100
   1b388:	cmp	r0, #0
   1b38c:	beq	1ab50 <close_stdout@@Base+0x5ad4>
   1b390:	ldrb	r3, [sp, #308]	; 0x134
   1b394:	cmp	r3, #0
   1b398:	beq	1b27c <close_stdout@@Base+0x6200>
   1b39c:	ldr	r3, [sp, #312]	; 0x138
   1b3a0:	subs	r0, r0, r3
   1b3a4:	movne	r0, #1
   1b3a8:	b	1b290 <close_stdout@@Base+0x6214>
   1b3ac:	mov	r0, r9
   1b3b0:	bl	115f8 <mbsinit@plt>
   1b3b4:	cmp	r0, #0
   1b3b8:	beq	1b594 <close_stdout@@Base+0x6518>
   1b3bc:	strb	r4, [sp, #228]	; 0xe4
   1b3c0:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1b3c4:	mov	r1, r0
   1b3c8:	mov	r0, sl
   1b3cc:	bl	1792c <close_stdout@@Base+0x28b0>
   1b3d0:	mov	r1, sl
   1b3d4:	mov	r3, r9
   1b3d8:	mov	r2, r0
   1b3dc:	add	r0, sp, #256	; 0x100
   1b3e0:	bl	116dc <mbrtowc@plt>
   1b3e4:	cmn	r0, #1
   1b3e8:	str	r0, [sp, #248]	; 0xf8
   1b3ec:	strbeq	r5, [sp, #252]	; 0xfc
   1b3f0:	streq	r4, [sp, #248]	; 0xf8
   1b3f4:	beq	1b378 <close_stdout@@Base+0x62fc>
   1b3f8:	cmn	r0, #2
   1b3fc:	beq	1b498 <close_stdout@@Base+0x641c>
   1b400:	cmp	r0, #0
   1b404:	bne	1b428 <close_stdout@@Base+0x63ac>
   1b408:	ldr	r3, [sp, #244]	; 0xf4
   1b40c:	str	r4, [sp, #248]	; 0xf8
   1b410:	ldrb	r3, [r3]
   1b414:	cmp	r3, #0
   1b418:	bne	1b5b8 <close_stdout@@Base+0x653c>
   1b41c:	ldr	r3, [sp, #256]	; 0x100
   1b420:	cmp	r3, #0
   1b424:	bne	1b0c4 <close_stdout@@Base+0x6048>
   1b428:	mov	r0, r9
   1b42c:	strb	r4, [sp, #252]	; 0xfc
   1b430:	bl	115f8 <mbsinit@plt>
   1b434:	mov	fp, #1
   1b438:	cmp	r0, #0
   1b43c:	strbne	r5, [sp, #228]	; 0xe4
   1b440:	b	1b378 <close_stdout@@Base+0x62fc>
   1b444:	ldr	r0, [sp, #244]	; 0xf4
   1b448:	ldr	r1, [sp, #300]	; 0x12c
   1b44c:	bl	1161c <memcmp@plt>
   1b450:	adds	r0, r0, #0
   1b454:	movne	r0, #1
   1b458:	b	1b290 <close_stdout@@Base+0x6214>
   1b45c:	mov	r0, r8
   1b460:	bl	115f8 <mbsinit@plt>
   1b464:	cmp	r0, #0
   1b468:	beq	1b594 <close_stdout@@Base+0x6518>
   1b46c:	strb	r4, [sp, #284]	; 0x11c
   1b470:	b	1b2d4 <close_stdout@@Base+0x6258>
   1b474:	ldr	r3, [sp, #300]	; 0x12c
   1b478:	str	r4, [sp, #304]	; 0x130
   1b47c:	ldrb	r3, [r3]
   1b480:	cmp	r3, #0
   1b484:	bne	1b5b8 <close_stdout@@Base+0x653c>
   1b488:	ldr	fp, [sp, #312]	; 0x138
   1b48c:	cmp	fp, #0
   1b490:	beq	1b320 <close_stdout@@Base+0x62a4>
   1b494:	b	1b0c4 <close_stdout@@Base+0x6048>
   1b498:	ldr	r0, [sp, #244]	; 0xf4
   1b49c:	bl	11790 <strlen@plt>
   1b4a0:	strb	r5, [sp, #252]	; 0xfc
   1b4a4:	str	r0, [sp, #248]	; 0xf8
   1b4a8:	b	1b378 <close_stdout@@Base+0x62fc>
   1b4ac:	ldr	r3, [sp, #188]	; 0xbc
   1b4b0:	str	r4, [sp, #192]	; 0xc0
   1b4b4:	ldrb	r3, [r3]
   1b4b8:	cmp	r3, #0
   1b4bc:	bne	1b5b8 <close_stdout@@Base+0x653c>
   1b4c0:	ldr	r7, [sp, #200]	; 0xc8
   1b4c4:	cmp	r7, #0
   1b4c8:	beq	1ad20 <close_stdout@@Base+0x5ca4>
   1b4cc:	b	1b0c4 <close_stdout@@Base+0x6048>
   1b4d0:	ldr	r3, [sp, #76]	; 0x4c
   1b4d4:	str	r7, [sp, #80]	; 0x50
   1b4d8:	ldrb	r3, [r3]
   1b4dc:	cmp	r3, #0
   1b4e0:	bne	1b5b8 <close_stdout@@Base+0x653c>
   1b4e4:	ldr	r4, [sp, #88]	; 0x58
   1b4e8:	cmp	r4, #0
   1b4ec:	beq	1ab20 <close_stdout@@Base+0x5aa4>
   1b4f0:	b	1b0c4 <close_stdout@@Base+0x6048>
   1b4f4:	ldr	r0, [sp, #16]
   1b4f8:	add	r2, sp, #56	; 0x38
   1b4fc:	ldr	r1, [sp, #4]
   1b500:	bl	1a038 <close_stdout@@Base+0x4fbc>
   1b504:	cmp	r0, #0
   1b508:	bne	1b58c <close_stdout@@Base+0x6510>
   1b50c:	str	r0, [sp, #32]
   1b510:	ldrb	r3, [sp, #196]	; 0xc4
   1b514:	str	r9, [sp, #28]
   1b518:	b	1ae6c <close_stdout@@Base+0x5df0>
   1b51c:	str	r4, [sp, #136]	; 0x88
   1b520:	ldrb	r3, [sl]
   1b524:	strb	r4, [sp, #140]	; 0x8c
   1b528:	str	r3, [sp, #144]	; 0x90
   1b52c:	b	1b1cc <close_stdout@@Base+0x6150>
   1b530:	ldr	r7, [sp, #312]	; 0x138
   1b534:	mov	r0, r8
   1b538:	strb	r4, [sp, #308]	; 0x134
   1b53c:	bl	115f8 <mbsinit@plt>
   1b540:	cmp	r0, #0
   1b544:	strbne	r5, [sp, #284]	; 0x11c
   1b548:	b	1b018 <close_stdout@@Base+0x5f9c>
   1b54c:	ldr	r0, [sp, #132]	; 0x84
   1b550:	mov	r8, #0
   1b554:	bl	11790 <strlen@plt>
   1b558:	strb	r5, [sp, #140]	; 0x8c
   1b55c:	str	r0, [sp, #136]	; 0x88
   1b560:	b	1b1cc <close_stdout@@Base+0x6150>
   1b564:	str	r4, [sp, #304]	; 0x130
   1b568:	strb	r7, [sp, #308]	; 0x134
   1b56c:	ldr	fp, [sp, #300]	; 0x12c
   1b570:	b	1b1d8 <close_stdout@@Base+0x615c>
   1b574:	ldr	fp, [sp, #300]	; 0x12c
   1b578:	mov	r0, fp
   1b57c:	bl	11790 <strlen@plt>
   1b580:	strb	r7, [sp, #308]	; 0x134
   1b584:	str	r0, [sp, #304]	; 0x130
   1b588:	b	1b1d8 <close_stdout@@Base+0x615c>
   1b58c:	ldr	r0, [sp, #56]	; 0x38
   1b590:	b	1ab50 <close_stdout@@Base+0x5ad4>
   1b594:	ldr	r0, [pc, #84]	; 1b5f0 <close_stdout@@Base+0x6574>
   1b598:	mov	r2, #150	; 0x96
   1b59c:	ldr	r1, [pc, #80]	; 1b5f4 <close_stdout@@Base+0x6578>
   1b5a0:	ldr	r3, [pc, #80]	; 1b5f8 <close_stdout@@Base+0x657c>
   1b5a4:	add	r0, pc, r0
   1b5a8:	add	r1, pc, r1
   1b5ac:	add	r3, pc, r3
   1b5b0:	bl	11958 <__assert_fail@plt>
   1b5b4:	bl	11634 <__stack_chk_fail@plt>
   1b5b8:	ldr	r0, [pc, #60]	; 1b5fc <close_stdout@@Base+0x6580>
   1b5bc:	mov	r2, #178	; 0xb2
   1b5c0:	ldr	r1, [pc, #56]	; 1b600 <close_stdout@@Base+0x6584>
   1b5c4:	ldr	r3, [pc, #56]	; 1b604 <close_stdout@@Base+0x6588>
   1b5c8:	add	r0, pc, r0
   1b5cc:	add	r1, pc, r1
   1b5d0:	add	r3, pc, r3
   1b5d4:	bl	11958 <__assert_fail@plt>
   1b5d8:	muleq	r1, r4, r6
   1b5dc:	andeq	r0, r0, ip, ror r1
   1b5e0:	andeq	r0, r0, r8, ror r1
   1b5e4:	muleq	r0, r4, fp
   1b5e8:	andeq	r2, r0, r8, ror #22
   1b5ec:	andeq	r3, r0, r8, asr #32
   1b5f0:	andeq	r2, r0, r4, lsl #13
   1b5f4:	muleq	r0, r8, r6
   1b5f8:	andeq	r2, r0, r8, ror fp
   1b5fc:	andeq	r2, r0, r8, lsl #13
   1b600:	andeq	r2, r0, r4, ror r6
   1b604:	andeq	r2, r0, r4, asr fp
   1b608:	ldr	ip, [pc, #852]	; 1b964 <close_stdout@@Base+0x68e8>
   1b60c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b610:	mov	r6, r2
   1b614:	sub	sp, sp, #4160	; 0x1040
   1b618:	ldr	r2, [pc, #840]	; 1b968 <close_stdout@@Base+0x68ec>
   1b61c:	sub	sp, sp, #4
   1b620:	add	ip, pc, ip
   1b624:	mov	r5, #0
   1b628:	movw	fp, #61424	; 0xeff0
   1b62c:	str	r0, [sp, #24]
   1b630:	mov	r0, r6
   1b634:	str	r1, [sp, #16]
   1b638:	mov	r1, r5
   1b63c:	str	r3, [sp, #32]
   1b640:	mov	r3, r5
   1b644:	ldr	r2, [ip, r2]
   1b648:	add	ip, sp, #8192	; 0x2000
   1b64c:	str	r5, [sp]
   1b650:	movt	fp, #65535	; 0xffff
   1b654:	ldr	ip, [ip, #-3992]	; 0xfffff068
   1b658:	str	r2, [sp, #20]
   1b65c:	mov	r2, r5
   1b660:	ldr	lr, [sp, #20]
   1b664:	str	ip, [sp, #28]
   1b668:	ldr	ip, [lr]
   1b66c:	add	lr, sp, #8192	; 0x2000
   1b670:	str	ip, [lr, #-4036]	; 0xfffff03c
   1b674:	bl	11568 <iconv@plt>
   1b678:	ldr	ip, [sp, #16]
   1b67c:	add	lr, sp, #4160	; 0x1040
   1b680:	movw	r3, #61420	; 0xefec
   1b684:	cmp	ip, r5
   1b688:	ldr	ip, [sp, #24]
   1b68c:	movt	r3, #65535	; 0xffff
   1b690:	str	ip, [lr, r3]
   1b694:	ldr	ip, [sp, #16]
   1b698:	str	ip, [lr, fp]
   1b69c:	beq	1b940 <close_stdout@@Base+0x68c4>
   1b6a0:	movw	r9, #61432	; 0xeff8
   1b6a4:	movt	r9, #65535	; 0xffff
   1b6a8:	movw	sl, #61428	; 0xeff4
   1b6ac:	movt	sl, #65535	; 0xffff
   1b6b0:	mov	r3, r9
   1b6b4:	add	ip, sp, #64	; 0x40
   1b6b8:	mov	r9, sl
   1b6bc:	str	ip, [sp, #36]	; 0x24
   1b6c0:	add	r4, sp, #60	; 0x3c
   1b6c4:	add	ip, sp, #44	; 0x2c
   1b6c8:	add	r7, sp, #52	; 0x34
   1b6cc:	str	ip, [sp, #8]
   1b6d0:	add	r8, sp, #56	; 0x38
   1b6d4:	add	ip, sp, #48	; 0x30
   1b6d8:	mov	sl, r3
   1b6dc:	str	ip, [sp, #12]
   1b6e0:	b	1b700 <close_stdout@@Base+0x6684>
   1b6e4:	add	lr, sp, #4160	; 0x1040
   1b6e8:	ldr	r2, [lr, fp]
   1b6ec:	ldr	r3, [lr, r9]
   1b6f0:	cmp	r2, #0
   1b6f4:	rsb	r3, r4, r3
   1b6f8:	add	r5, r5, r3
   1b6fc:	beq	1b748 <close_stdout@@Base+0x66cc>
   1b700:	add	lr, sp, #4160	; 0x1040
   1b704:	str	r8, [sp]
   1b708:	mov	ip, #4096	; 0x1000
   1b70c:	mov	r0, r6
   1b710:	add	r1, sp, #44	; 0x2c
   1b714:	add	r2, sp, #48	; 0x30
   1b718:	mov	r3, r7
   1b71c:	str	r4, [lr, r9]
   1b720:	str	ip, [lr, sl]
   1b724:	bl	11568 <iconv@plt>
   1b728:	cmn	r0, #1
   1b72c:	bne	1b6e4 <close_stdout@@Base+0x6668>
   1b730:	bl	117f0 <__errno_location@plt>
   1b734:	ldr	r3, [r0]
   1b738:	cmp	r3, #7
   1b73c:	beq	1b6e4 <close_stdout@@Base+0x6668>
   1b740:	cmp	r3, #22
   1b744:	bne	1b938 <close_stdout@@Base+0x68bc>
   1b748:	add	lr, sp, #4160	; 0x1040
   1b74c:	movw	r9, #61428	; 0xeff4
   1b750:	movw	r3, #61432	; 0xeff8
   1b754:	movt	r9, #65535	; 0xffff
   1b758:	movt	r3, #65535	; 0xffff
   1b75c:	mov	r1, #0
   1b760:	str	r8, [sp]
   1b764:	mov	ip, #4096	; 0x1000
   1b768:	mov	r2, r1
   1b76c:	str	ip, [lr, r3]
   1b770:	mov	r0, r6
   1b774:	str	r4, [lr, r9]
   1b778:	mov	r3, r7
   1b77c:	bl	11568 <iconv@plt>
   1b780:	cmn	r0, #1
   1b784:	beq	1b938 <close_stdout@@Base+0x68bc>
   1b788:	add	r0, sp, #4160	; 0x1040
   1b78c:	ldr	r3, [r0, r9]
   1b790:	rsb	r4, r4, r3
   1b794:	adds	r5, r5, r4
   1b798:	beq	1b8e8 <close_stdout@@Base+0x686c>
   1b79c:	ldr	ip, [sp, #32]
   1b7a0:	ldr	r4, [ip]
   1b7a4:	cmp	r4, #0
   1b7a8:	beq	1b8c4 <close_stdout@@Base+0x6848>
   1b7ac:	ldr	ip, [sp, #28]
   1b7b0:	ldr	r3, [ip]
   1b7b4:	cmp	r5, r3
   1b7b8:	bhi	1b8c4 <close_stdout@@Base+0x6848>
   1b7bc:	mov	r3, #0
   1b7c0:	mov	r0, r6
   1b7c4:	mov	r1, r3
   1b7c8:	mov	r2, r3
   1b7cc:	str	r3, [sp]
   1b7d0:	movw	sl, #61424	; 0xeff0
   1b7d4:	bl	11568 <iconv@plt>
   1b7d8:	ldr	ip, [sp, #24]
   1b7dc:	add	lr, sp, #4160	; 0x1040
   1b7e0:	movw	r3, #61420	; 0xefec
   1b7e4:	movt	r3, #65535	; 0xffff
   1b7e8:	movt	sl, #65535	; 0xffff
   1b7ec:	movw	r1, #61428	; 0xeff4
   1b7f0:	movw	r2, #61432	; 0xeff8
   1b7f4:	str	ip, [lr, r3]
   1b7f8:	movt	r1, #65535	; 0xffff
   1b7fc:	ldr	ip, [sp, #16]
   1b800:	movt	r2, #65535	; 0xffff
   1b804:	str	r4, [lr, r1]
   1b808:	str	r5, [lr, r2]
   1b80c:	str	ip, [lr, sl]
   1b810:	mov	r3, ip
   1b814:	ldr	ip, [sp, #36]	; 0x24
   1b818:	sub	fp, ip, #20
   1b81c:	sub	r9, ip, #16
   1b820:	b	1b84c <close_stdout@@Base+0x67d0>
   1b824:	str	r8, [sp]
   1b828:	mov	r0, r6
   1b82c:	mov	r1, fp
   1b830:	mov	r2, r9
   1b834:	mov	r3, r7
   1b838:	bl	11568 <iconv@plt>
   1b83c:	cmn	r0, #1
   1b840:	beq	1b8f8 <close_stdout@@Base+0x687c>
   1b844:	add	lr, sp, #4160	; 0x1040
   1b848:	ldr	r3, [lr, sl]
   1b84c:	cmp	r3, #0
   1b850:	bne	1b824 <close_stdout@@Base+0x67a8>
   1b854:	mov	r1, #0
   1b858:	str	r8, [sp]
   1b85c:	mov	r0, r6
   1b860:	mov	r3, r7
   1b864:	mov	r2, r1
   1b868:	bl	11568 <iconv@plt>
   1b86c:	cmn	r0, #1
   1b870:	beq	1b908 <close_stdout@@Base+0x688c>
   1b874:	movw	r3, #61432	; 0xeff8
   1b878:	add	r0, sp, #4160	; 0x1040
   1b87c:	movt	r3, #65535	; 0xffff
   1b880:	ldr	r3, [r0, r3]
   1b884:	cmp	r3, #0
   1b888:	bne	1b95c <close_stdout@@Base+0x68e0>
   1b88c:	ldr	ip, [sp, #32]
   1b890:	str	r4, [ip]
   1b894:	ldr	ip, [sp, #28]
   1b898:	str	r5, [ip]
   1b89c:	ldr	ip, [sp, #20]
   1b8a0:	add	r0, sp, #8192	; 0x2000
   1b8a4:	ldr	r2, [r0, #-4036]	; 0xfffff03c
   1b8a8:	mov	r0, r3
   1b8ac:	ldr	r3, [ip]
   1b8b0:	cmp	r2, r3
   1b8b4:	bne	1b960 <close_stdout@@Base+0x68e4>
   1b8b8:	add	sp, sp, #4160	; 0x1040
   1b8bc:	add	sp, sp, #4
   1b8c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8c4:	mov	r0, r5
   1b8c8:	bl	1170c <malloc@plt>
   1b8cc:	subs	r4, r0, #0
   1b8d0:	bne	1b7bc <close_stdout@@Base+0x6740>
   1b8d4:	bl	117f0 <__errno_location@plt>
   1b8d8:	mov	r2, #12
   1b8dc:	mvn	r3, #0
   1b8e0:	str	r2, [r0]
   1b8e4:	b	1b89c <close_stdout@@Base+0x6820>
   1b8e8:	ldr	ip, [sp, #28]
   1b8ec:	mov	r3, r5
   1b8f0:	str	r5, [ip]
   1b8f4:	b	1b89c <close_stdout@@Base+0x6820>
   1b8f8:	bl	117f0 <__errno_location@plt>
   1b8fc:	ldr	r3, [r0]
   1b900:	cmp	r3, #22
   1b904:	beq	1b854 <close_stdout@@Base+0x67d8>
   1b908:	ldr	ip, [sp, #32]
   1b90c:	ldr	r3, [ip]
   1b910:	cmp	r3, r4
   1b914:	beq	1b938 <close_stdout@@Base+0x68bc>
   1b918:	bl	117f0 <__errno_location@plt>
   1b91c:	ldr	r6, [r0]
   1b920:	mov	r5, r0
   1b924:	mov	r0, r4
   1b928:	bl	115c8 <free@plt>
   1b92c:	mvn	r3, #0
   1b930:	str	r6, [r5]
   1b934:	b	1b89c <close_stdout@@Base+0x6820>
   1b938:	mvn	r3, #0
   1b93c:	b	1b89c <close_stdout@@Base+0x6820>
   1b940:	add	ip, sp, #64	; 0x40
   1b944:	add	r4, sp, #60	; 0x3c
   1b948:	str	ip, [sp, #36]	; 0x24
   1b94c:	add	r7, sp, #52	; 0x34
   1b950:	add	r8, sp, #56	; 0x38
   1b954:	ldr	r5, [sp, #16]
   1b958:	b	1b748 <close_stdout@@Base+0x66cc>
   1b95c:	bl	11934 <abort@plt>
   1b960:	bl	11634 <__stack_chk_fail@plt>
   1b964:	ldrdeq	r3, [r1], -r8
   1b968:	andeq	r0, r0, ip, ror r1
   1b96c:	ldr	r3, [pc, #524]	; 1bb80 <close_stdout@@Base+0x6b04>
   1b970:	ldr	r2, [pc, #524]	; 1bb84 <close_stdout@@Base+0x6b08>
   1b974:	add	r3, pc, r3
   1b978:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b97c:	sub	sp, sp, #52	; 0x34
   1b980:	ldr	r2, [r3, r2]
   1b984:	mov	r6, r1
   1b988:	str	r0, [sp, #28]
   1b98c:	ldr	r3, [r2]
   1b990:	str	r2, [sp, #20]
   1b994:	str	r3, [sp, #44]	; 0x2c
   1b998:	bl	11790 <strlen@plt>
   1b99c:	cmp	r0, #4096	; 0x1000
   1b9a0:	mov	fp, r0
   1b9a4:	lslcc	fp, r0, #4
   1b9a8:	str	r0, [sp, #32]
   1b9ac:	add	r5, fp, #1
   1b9b0:	mov	r0, r5
   1b9b4:	bl	1170c <malloc@plt>
   1b9b8:	subs	r4, r0, #0
   1b9bc:	beq	1bb6c <close_stdout@@Base+0x6af0>
   1b9c0:	mov	r3, #0
   1b9c4:	add	r2, sp, #32
   1b9c8:	mov	r1, r3
   1b9cc:	str	r2, [sp, #16]
   1b9d0:	str	r3, [sp]
   1b9d4:	mov	r2, r3
   1b9d8:	mov	r0, r6
   1b9dc:	add	sl, sp, #28
   1b9e0:	bl	11568 <iconv@plt>
   1b9e4:	add	r8, sp, #36	; 0x24
   1b9e8:	add	r7, sp, #40	; 0x28
   1b9ec:	str	r4, [sp, #36]	; 0x24
   1b9f0:	str	fp, [sp, #40]	; 0x28
   1b9f4:	b	1ba58 <close_stdout@@Base+0x69dc>
   1b9f8:	bl	117f0 <__errno_location@plt>
   1b9fc:	ldr	r3, [r0]
   1ba00:	mov	fp, r0
   1ba04:	cmp	r3, #22
   1ba08:	beq	1bad4 <close_stdout@@Base+0x6a58>
   1ba0c:	cmp	r3, #7
   1ba10:	bne	1bb34 <close_stdout@@Base+0x6ab8>
   1ba14:	lsl	r9, r5, #1
   1ba18:	ldr	r1, [sp, #36]	; 0x24
   1ba1c:	cmp	r5, r9
   1ba20:	rsb	r5, r4, r1
   1ba24:	bcs	1bb2c <close_stdout@@Base+0x6ab0>
   1ba28:	mov	r0, r4
   1ba2c:	mov	r1, r9
   1ba30:	bl	1164c <realloc@plt>
   1ba34:	cmp	r0, #0
   1ba38:	beq	1bb2c <close_stdout@@Base+0x6ab0>
   1ba3c:	sub	r1, r9, #1
   1ba40:	add	r2, r0, r5
   1ba44:	mov	r4, r0
   1ba48:	rsb	r5, r5, r1
   1ba4c:	str	r5, [sp, #40]	; 0x28
   1ba50:	mov	r5, r9
   1ba54:	str	r2, [sp, #36]	; 0x24
   1ba58:	str	r7, [sp]
   1ba5c:	mov	r0, r6
   1ba60:	mov	r1, sl
   1ba64:	add	r2, sp, #32
   1ba68:	mov	r3, r8
   1ba6c:	bl	11568 <iconv@plt>
   1ba70:	cmn	r0, #1
   1ba74:	beq	1b9f8 <close_stdout@@Base+0x697c>
   1ba78:	b	1bad4 <close_stdout@@Base+0x6a58>
   1ba7c:	bl	117f0 <__errno_location@plt>
   1ba80:	ldr	r3, [r0]
   1ba84:	mov	fp, r0
   1ba88:	cmp	r3, #7
   1ba8c:	bne	1bb34 <close_stdout@@Base+0x6ab8>
   1ba90:	lsl	r9, r5, #1
   1ba94:	ldr	r3, [sp, #36]	; 0x24
   1ba98:	cmp	r5, r9
   1ba9c:	rsb	r5, r4, r3
   1baa0:	bcs	1bb2c <close_stdout@@Base+0x6ab0>
   1baa4:	mov	r0, r4
   1baa8:	mov	r1, r9
   1baac:	bl	1164c <realloc@plt>
   1bab0:	cmp	r0, #0
   1bab4:	beq	1bb2c <close_stdout@@Base+0x6ab0>
   1bab8:	sub	r2, r9, #1
   1babc:	add	r3, r0, r5
   1bac0:	mov	r4, r0
   1bac4:	rsb	r5, r5, r2
   1bac8:	str	r5, [sp, #40]	; 0x28
   1bacc:	mov	r5, r9
   1bad0:	str	r3, [sp, #36]	; 0x24
   1bad4:	mov	r1, #0
   1bad8:	str	r7, [sp]
   1badc:	mov	r2, r1
   1bae0:	mov	r0, r6
   1bae4:	mov	r3, r8
   1bae8:	bl	11568 <iconv@plt>
   1baec:	cmn	r0, #1
   1baf0:	beq	1ba7c <close_stdout@@Base+0x6a00>
   1baf4:	ldr	r3, [sp, #36]	; 0x24
   1baf8:	mov	r2, #0
   1bafc:	add	r1, r3, #1
   1bb00:	str	r1, [sp, #36]	; 0x24
   1bb04:	strb	r2, [r3]
   1bb08:	ldr	r1, [sp, #36]	; 0x24
   1bb0c:	rsb	r1, r4, r1
   1bb10:	cmp	r1, r5
   1bb14:	bcs	1bb4c <close_stdout@@Base+0x6ad0>
   1bb18:	mov	r0, r4
   1bb1c:	bl	1164c <realloc@plt>
   1bb20:	cmp	r0, #0
   1bb24:	movne	r4, r0
   1bb28:	b	1bb4c <close_stdout@@Base+0x6ad0>
   1bb2c:	mov	r3, #12
   1bb30:	str	r3, [fp]
   1bb34:	mov	r0, r4
   1bb38:	str	r3, [sp, #12]
   1bb3c:	bl	115c8 <free@plt>
   1bb40:	ldr	r3, [sp, #12]
   1bb44:	mov	r4, #0
   1bb48:	str	r3, [fp]
   1bb4c:	ldr	r1, [sp, #20]
   1bb50:	mov	r0, r4
   1bb54:	ldr	r2, [sp, #44]	; 0x2c
   1bb58:	ldr	r3, [r1]
   1bb5c:	cmp	r2, r3
   1bb60:	bne	1bb7c <close_stdout@@Base+0x6b00>
   1bb64:	add	sp, sp, #52	; 0x34
   1bb68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bb6c:	bl	117f0 <__errno_location@plt>
   1bb70:	mov	r3, #12
   1bb74:	str	r3, [r0]
   1bb78:	b	1bb4c <close_stdout@@Base+0x6ad0>
   1bb7c:	bl	11634 <__stack_chk_fail@plt>
   1bb80:	andeq	r3, r1, r4, lsl #13
   1bb84:	andeq	r0, r0, ip, ror r1
   1bb88:	push	{r3, r4, r5, r6, r7, lr}
   1bb8c:	mov	r4, r0
   1bb90:	ldrb	r3, [r0]
   1bb94:	mov	r5, r1
   1bb98:	mov	r6, r2
   1bb9c:	cmp	r3, #0
   1bba0:	beq	1bbb8 <close_stdout@@Base+0x6b3c>
   1bba4:	mov	r0, r1
   1bba8:	mov	r1, r2
   1bbac:	bl	198ec <close_stdout@@Base+0x4870>
   1bbb0:	cmp	r0, #0
   1bbb4:	bne	1bbd4 <close_stdout@@Base+0x6b58>
   1bbb8:	mov	r0, r4
   1bbbc:	bl	11820 <__strdup@plt>
   1bbc0:	subs	r4, r0, #0
   1bbc4:	beq	1bc30 <close_stdout@@Base+0x6bb4>
   1bbc8:	mov	r3, r4
   1bbcc:	mov	r0, r3
   1bbd0:	pop	{r3, r4, r5, r6, r7, pc}
   1bbd4:	mov	r1, r5
   1bbd8:	mov	r0, r6
   1bbdc:	bl	11718 <iconv_open@plt>
   1bbe0:	cmn	r0, #1
   1bbe4:	mov	r5, r0
   1bbe8:	beq	1bc48 <close_stdout@@Base+0x6bcc>
   1bbec:	mov	r0, r4
   1bbf0:	mov	r1, r5
   1bbf4:	bl	1b96c <close_stdout@@Base+0x68f0>
   1bbf8:	subs	r4, r0, #0
   1bbfc:	beq	1bc50 <close_stdout@@Base+0x6bd4>
   1bc00:	mov	r0, r5
   1bc04:	bl	1155c <iconv_close@plt>
   1bc08:	cmp	r0, #0
   1bc0c:	bge	1bbc8 <close_stdout@@Base+0x6b4c>
   1bc10:	bl	117f0 <__errno_location@plt>
   1bc14:	ldr	r6, [r0]
   1bc18:	mov	r5, r0
   1bc1c:	mov	r0, r4
   1bc20:	bl	115c8 <free@plt>
   1bc24:	mov	r3, #0
   1bc28:	str	r6, [r5]
   1bc2c:	b	1bbcc <close_stdout@@Base+0x6b50>
   1bc30:	bl	117f0 <__errno_location@plt>
   1bc34:	mov	r3, r4
   1bc38:	mov	r2, #12
   1bc3c:	str	r2, [r0]
   1bc40:	mov	r0, r3
   1bc44:	pop	{r3, r4, r5, r6, r7, pc}
   1bc48:	mov	r3, #0
   1bc4c:	b	1bbcc <close_stdout@@Base+0x6b50>
   1bc50:	bl	117f0 <__errno_location@plt>
   1bc54:	ldr	r7, [r0]
   1bc58:	mov	r6, r0
   1bc5c:	mov	r0, r5
   1bc60:	bl	1155c <iconv_close@plt>
   1bc64:	mov	r3, r4
   1bc68:	str	r7, [r6]
   1bc6c:	b	1bbcc <close_stdout@@Base+0x6b50>
   1bc70:	mov	r1, #0
   1bc74:	mov	r2, #3
   1bc78:	b	1bc7c <close_stdout@@Base+0x6c00>
   1bc7c:	push	{r1, r2, r3}
   1bc80:	movw	ip, #1030	; 0x406
   1bc84:	ldr	r3, [pc, #336]	; 1bddc <close_stdout@@Base+0x6d60>
   1bc88:	push	{r4, r5, r6, r7, r8, lr}
   1bc8c:	add	r3, pc, r3
   1bc90:	ldr	lr, [pc, #328]	; 1bde0 <close_stdout@@Base+0x6d64>
   1bc94:	sub	sp, sp, #12
   1bc98:	add	r2, sp, #40	; 0x28
   1bc9c:	mov	r6, r0
   1bca0:	ldr	r1, [sp, #36]	; 0x24
   1bca4:	ldr	r4, [r3, lr]
   1bca8:	cmp	r1, ip
   1bcac:	str	r2, [sp]
   1bcb0:	ldr	r3, [r4]
   1bcb4:	str	r3, [sp, #4]
   1bcb8:	bne	1bd3c <close_stdout@@Base+0x6cc0>
   1bcbc:	ldr	r8, [pc, #288]	; 1bde4 <close_stdout@@Base+0x6d68>
   1bcc0:	add	r3, sp, #44	; 0x2c
   1bcc4:	str	r3, [sp]
   1bcc8:	add	r8, pc, r8
   1bccc:	ldr	r7, [sp, #40]	; 0x28
   1bcd0:	ldr	r3, [r8]
   1bcd4:	mov	r2, r7
   1bcd8:	cmp	r3, #0
   1bcdc:	blt	1bdc8 <close_stdout@@Base+0x6d4c>
   1bce0:	bl	117e4 <fcntl@plt>
   1bce4:	subs	r5, r0, #0
   1bce8:	blt	1bd4c <close_stdout@@Base+0x6cd0>
   1bcec:	ldr	r3, [pc, #244]	; 1bde8 <close_stdout@@Base+0x6d6c>
   1bcf0:	mov	r2, #1
   1bcf4:	add	r3, pc, r3
   1bcf8:	str	r2, [r3]
   1bcfc:	cmp	r5, #0
   1bd00:	blt	1bd18 <close_stdout@@Base+0x6c9c>
   1bd04:	ldr	r3, [pc, #224]	; 1bdec <close_stdout@@Base+0x6d70>
   1bd08:	add	r3, pc, r3
   1bd0c:	ldr	r3, [r3]
   1bd10:	cmn	r3, #1
   1bd14:	beq	1bd7c <close_stdout@@Base+0x6d00>
   1bd18:	ldr	r2, [sp, #4]
   1bd1c:	mov	r0, r5
   1bd20:	ldr	r3, [r4]
   1bd24:	cmp	r2, r3
   1bd28:	bne	1bdd8 <close_stdout@@Base+0x6d5c>
   1bd2c:	add	sp, sp, #12
   1bd30:	pop	{r4, r5, r6, r7, r8, lr}
   1bd34:	add	sp, sp, #12
   1bd38:	bx	lr
   1bd3c:	ldr	r2, [sp, #40]	; 0x28
   1bd40:	bl	117e4 <fcntl@plt>
   1bd44:	mov	r5, r0
   1bd48:	b	1bd18 <close_stdout@@Base+0x6c9c>
   1bd4c:	bl	117f0 <__errno_location@plt>
   1bd50:	ldr	r3, [r0]
   1bd54:	cmp	r3, #22
   1bd58:	bne	1bcec <close_stdout@@Base+0x6c70>
   1bd5c:	mov	r0, r6
   1bd60:	mov	r2, r7
   1bd64:	mov	r1, #0
   1bd68:	bl	1bc7c <close_stdout@@Base+0x6c00>
   1bd6c:	subs	r5, r0, #0
   1bd70:	blt	1bd18 <close_stdout@@Base+0x6c9c>
   1bd74:	mvn	r3, #0
   1bd78:	str	r3, [r8]
   1bd7c:	mov	r0, r5
   1bd80:	mov	r1, #1
   1bd84:	bl	117e4 <fcntl@plt>
   1bd88:	subs	r2, r0, #0
   1bd8c:	blt	1bda8 <close_stdout@@Base+0x6d2c>
   1bd90:	orr	r2, r2, #1
   1bd94:	mov	r0, r5
   1bd98:	mov	r1, #2
   1bd9c:	bl	117e4 <fcntl@plt>
   1bda0:	cmn	r0, #1
   1bda4:	bne	1bd18 <close_stdout@@Base+0x6c9c>
   1bda8:	bl	117f0 <__errno_location@plt>
   1bdac:	ldr	r7, [r0]
   1bdb0:	mov	r6, r0
   1bdb4:	mov	r0, r5
   1bdb8:	mvn	r5, #0
   1bdbc:	bl	11940 <close@plt>
   1bdc0:	str	r7, [r6]
   1bdc4:	b	1bd18 <close_stdout@@Base+0x6c9c>
   1bdc8:	mov	r1, #0
   1bdcc:	bl	1bc7c <close_stdout@@Base+0x6c00>
   1bdd0:	mov	r5, r0
   1bdd4:	b	1bcfc <close_stdout@@Base+0x6c80>
   1bdd8:	bl	11634 <__stack_chk_fail@plt>
   1bddc:	andeq	r3, r1, ip, ror #6
   1bde0:	andeq	r0, r0, ip, ror r1
   1bde4:	ldrdeq	r3, [r1], -ip
   1bde8:			; <UNDEFINED> instruction: 0x000139b0
   1bdec:	muleq	r1, ip, r9
   1bdf0:	adds	r0, r0, #8
   1bdf4:	push	{r3, r4, r5, lr}
   1bdf8:	bcs	1be4c <close_stdout@@Base+0x6dd0>
   1bdfc:	bl	1170c <malloc@plt>
   1be00:	subs	r1, r0, #0
   1be04:	beq	1be4c <close_stdout@@Base+0x6dd0>
   1be08:	add	r2, r1, #8
   1be0c:	movw	r3, #65281	; 0xff01
   1be10:	movt	r3, #65280	; 0xff00
   1be14:	ldr	ip, [pc, #56]	; 1be54 <close_stdout@@Base+0x6dd8>
   1be18:	movw	r4, #64330	; 0xfb4a
   1be1c:	movt	r4, #5141	; 0x1415
   1be20:	umull	r5, r3, r3, r2
   1be24:	add	ip, pc, ip
   1be28:	str	r4, [r1, #4]
   1be2c:	mov	r0, r2
   1be30:	lsr	r3, r3, #8
   1be34:	add	r3, r3, r3, lsl #8
   1be38:	rsb	r3, r3, r2
   1be3c:	ldr	r4, [ip, r3, lsl #2]
   1be40:	str	r2, [ip, r3, lsl #2]
   1be44:	str	r4, [r1]
   1be48:	pop	{r3, r4, r5, pc}
   1be4c:	mov	r0, #0
   1be50:	pop	{r3, r4, r5, pc}
   1be54:	andeq	r3, r1, r4, lsl #17
   1be58:	cmp	r0, #0
   1be5c:	bxeq	lr
   1be60:	ldr	r2, [r0, #-4]
   1be64:	movw	r3, #64330	; 0xfb4a
   1be68:	movt	r3, #5141	; 0x1415
   1be6c:	cmp	r2, r3
   1be70:	bxne	lr
   1be74:	movw	r3, #65281	; 0xff01
   1be78:	movt	r3, #65280	; 0xff00
   1be7c:	ldr	r1, [pc, #88]	; 1bedc <close_stdout@@Base+0x6e60>
   1be80:	umull	r2, r3, r3, r0
   1be84:	add	r1, pc, r1
   1be88:	lsr	r3, r3, #8
   1be8c:	add	r3, r3, r3, lsl #8
   1be90:	rsb	r3, r3, r0
   1be94:	ldr	r2, [r1, r3, lsl #2]
   1be98:	cmp	r2, #0
   1be9c:	bxeq	lr
   1bea0:	cmp	r0, r2
   1bea4:	addeq	r2, r1, r3, lsl #2
   1bea8:	bne	1bebc <close_stdout@@Base+0x6e40>
   1beac:	b	1bed0 <close_stdout@@Base+0x6e54>
   1beb0:	cmp	r0, r3
   1beb4:	beq	1becc <close_stdout@@Base+0x6e50>
   1beb8:	mov	r2, r3
   1bebc:	ldr	r3, [r2, #-8]
   1bec0:	cmp	r3, #0
   1bec4:	bne	1beb0 <close_stdout@@Base+0x6e34>
   1bec8:	bx	lr
   1becc:	sub	r2, r2, #8
   1bed0:	ldr	ip, [r0, #-8]!
   1bed4:	str	ip, [r2]
   1bed8:	b	115c8 <free@plt>
   1bedc:	andeq	r3, r1, r4, lsr #16
   1bee0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bee4:	sub	sp, sp, #76	; 0x4c
   1bee8:	ldr	r8, [pc, #524]	; 1c0fc <close_stdout@@Base+0x7080>
   1beec:	mov	sl, r0
   1bef0:	ldr	r3, [pc, #520]	; 1c100 <close_stdout@@Base+0x7084>
   1bef4:	add	r8, pc, r8
   1bef8:	ldr	r3, [r8, r3]
   1befc:	str	r3, [sp, #4]
   1bf00:	ldr	r3, [r3]
   1bf04:	str	r3, [sp, #68]	; 0x44
   1bf08:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1bf0c:	cmp	r0, #1
   1bf10:	bls	1c0ac <close_stdout@@Base+0x7030>
   1bf14:	mov	r3, #0
   1bf18:	add	r7, sp, #16
   1bf1c:	add	r9, sp, #40	; 0x28
   1bf20:	mov	fp, r3
   1bf24:	mov	r4, sl
   1bf28:	mov	r6, r3
   1bf2c:	mov	r5, #1
   1bf30:	str	r3, [sp, #16]
   1bf34:	strb	r3, [sp, #24]
   1bf38:	str	sl, [sp, #28]
   1bf3c:	strb	r3, [sp, #12]
   1bf40:	str	r3, [r7, #4]
   1bf44:	ldrb	r2, [sp, #12]
   1bf48:	cmp	r2, #0
   1bf4c:	bne	1bfc4 <close_stdout@@Base+0x6f48>
   1bf50:	ldr	r2, [pc, #428]	; 1c104 <close_stdout@@Base+0x7088>
   1bf54:	ldrb	r3, [r4]
   1bf58:	ldr	r1, [r8, r2]
   1bf5c:	and	r2, r3, #31
   1bf60:	lsr	r3, r3, #5
   1bf64:	ldr	r3, [r1, r3, lsl #2]
   1bf68:	lsr	r3, r3, r2
   1bf6c:	tst	r3, #1
   1bf70:	beq	1bfb0 <close_stdout@@Base+0x6f34>
   1bf74:	str	r5, [sp, #32]
   1bf78:	ldrb	r4, [r4]
   1bf7c:	strb	r5, [sp, #36]	; 0x24
   1bf80:	cmp	r4, #0
   1bf84:	strb	r5, [sp, #24]
   1bf88:	str	r4, [sp, #40]	; 0x28
   1bf8c:	bne	1c028 <close_stdout@@Base+0x6fac>
   1bf90:	mov	r0, fp
   1bf94:	ldr	r1, [sp, #4]
   1bf98:	ldr	r2, [sp, #68]	; 0x44
   1bf9c:	ldr	r3, [r1]
   1bfa0:	cmp	r2, r3
   1bfa4:	bne	1c0d8 <close_stdout@@Base+0x705c>
   1bfa8:	add	sp, sp, #76	; 0x4c
   1bfac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bfb0:	mov	r0, r7
   1bfb4:	bl	115f8 <mbsinit@plt>
   1bfb8:	cmp	r0, #0
   1bfbc:	beq	1c0b8 <close_stdout@@Base+0x703c>
   1bfc0:	strb	r5, [sp, #12]
   1bfc4:	bl	116b8 <__ctype_get_mb_cur_max@plt>
   1bfc8:	mov	r1, r0
   1bfcc:	mov	r0, r4
   1bfd0:	bl	1792c <close_stdout@@Base+0x28b0>
   1bfd4:	mov	r1, r4
   1bfd8:	mov	r3, r7
   1bfdc:	mov	r2, r0
   1bfe0:	mov	r0, r9
   1bfe4:	bl	116dc <mbrtowc@plt>
   1bfe8:	cmn	r0, #1
   1bfec:	str	r0, [sp, #32]
   1bff0:	beq	1c044 <close_stdout@@Base+0x6fc8>
   1bff4:	cmn	r0, #2
   1bff8:	beq	1c094 <close_stdout@@Base+0x7018>
   1bffc:	cmp	r0, #0
   1c000:	beq	1c054 <close_stdout@@Base+0x6fd8>
   1c004:	ldr	r4, [sp, #40]	; 0x28
   1c008:	mov	r0, r7
   1c00c:	strb	r5, [sp, #36]	; 0x24
   1c010:	bl	115f8 <mbsinit@plt>
   1c014:	strb	r5, [sp, #24]
   1c018:	cmp	r0, #0
   1c01c:	strbne	r6, [sp, #12]
   1c020:	cmp	r4, #0
   1c024:	beq	1bf90 <close_stdout@@Base+0x6f14>
   1c028:	ldr	r4, [sp, #28]
   1c02c:	ldr	r3, [sp, #32]
   1c030:	add	fp, fp, #1
   1c034:	strb	r6, [sp, #24]
   1c038:	add	r4, r4, r3
   1c03c:	str	r4, [sp, #28]
   1c040:	b	1bf44 <close_stdout@@Base+0x6ec8>
   1c044:	str	r5, [sp, #32]
   1c048:	strb	r6, [sp, #36]	; 0x24
   1c04c:	ldr	r4, [sp, #28]
   1c050:	b	1c02c <close_stdout@@Base+0x6fb0>
   1c054:	ldr	r4, [sp, #28]
   1c058:	str	r5, [sp, #32]
   1c05c:	ldrb	r3, [r4]
   1c060:	cmp	r3, #0
   1c064:	bne	1c0dc <close_stdout@@Base+0x7060>
   1c068:	ldr	r4, [sp, #40]	; 0x28
   1c06c:	cmp	r4, #0
   1c070:	beq	1c008 <close_stdout@@Base+0x6f8c>
   1c074:	ldr	r0, [pc, #140]	; 1c108 <close_stdout@@Base+0x708c>
   1c078:	mov	r2, #179	; 0xb3
   1c07c:	ldr	r1, [pc, #136]	; 1c10c <close_stdout@@Base+0x7090>
   1c080:	ldr	r3, [pc, #136]	; 1c110 <close_stdout@@Base+0x7094>
   1c084:	add	r0, pc, r0
   1c088:	add	r1, pc, r1
   1c08c:	add	r3, pc, r3
   1c090:	bl	11958 <__assert_fail@plt>
   1c094:	ldr	r4, [sp, #28]
   1c098:	mov	r0, r4
   1c09c:	bl	11790 <strlen@plt>
   1c0a0:	strb	r6, [sp, #36]	; 0x24
   1c0a4:	str	r0, [sp, #32]
   1c0a8:	b	1c02c <close_stdout@@Base+0x6fb0>
   1c0ac:	mov	r0, sl
   1c0b0:	bl	11790 <strlen@plt>
   1c0b4:	b	1bf94 <close_stdout@@Base+0x6f18>
   1c0b8:	ldr	r0, [pc, #84]	; 1c114 <close_stdout@@Base+0x7098>
   1c0bc:	mov	r2, #150	; 0x96
   1c0c0:	ldr	r1, [pc, #80]	; 1c118 <close_stdout@@Base+0x709c>
   1c0c4:	ldr	r3, [pc, #80]	; 1c11c <close_stdout@@Base+0x70a0>
   1c0c8:	add	r0, pc, r0
   1c0cc:	add	r1, pc, r1
   1c0d0:	add	r3, pc, r3
   1c0d4:	bl	11958 <__assert_fail@plt>
   1c0d8:	bl	11634 <__stack_chk_fail@plt>
   1c0dc:	ldr	r0, [pc, #60]	; 1c120 <close_stdout@@Base+0x70a4>
   1c0e0:	mov	r2, #178	; 0xb2
   1c0e4:	ldr	r1, [pc, #56]	; 1c124 <close_stdout@@Base+0x70a8>
   1c0e8:	ldr	r3, [pc, #56]	; 1c128 <close_stdout@@Base+0x70ac>
   1c0ec:	add	r0, pc, r0
   1c0f0:	add	r1, pc, r1
   1c0f4:	add	r3, pc, r3
   1c0f8:	bl	11958 <__assert_fail@plt>
   1c0fc:	andeq	r3, r1, r4, lsl #2
   1c100:	andeq	r0, r0, ip, ror r1
   1c104:	andeq	r0, r0, r8, ror r1
   1c108:	andeq	r1, r0, r4, ror #23
   1c10c:			; <UNDEFINED> instruction: 0x00001bb8
   1c110:	andeq	r2, r0, ip, lsr #1
   1c114:	andeq	r1, r0, r0, ror #22
   1c118:	andeq	r1, r0, r4, ror fp
   1c11c:	andeq	r2, r0, r8, rrx
   1c120:	andeq	r1, r0, r4, ror #22
   1c124:	andeq	r1, r0, r0, asr fp
   1c128:	andeq	r2, r0, r4, asr #32
   1c12c:	subs	r2, r1, #1
   1c130:	bxeq	lr
   1c134:	bcc	1c30c <close_stdout@@Base+0x7290>
   1c138:	cmp	r0, r1
   1c13c:	bls	1c2f0 <close_stdout@@Base+0x7274>
   1c140:	tst	r1, r2
   1c144:	beq	1c2fc <close_stdout@@Base+0x7280>
   1c148:	clz	r3, r0
   1c14c:	clz	r2, r1
   1c150:	sub	r3, r2, r3
   1c154:	rsbs	r3, r3, #31
   1c158:	addne	r3, r3, r3, lsl #1
   1c15c:	mov	r2, #0
   1c160:	addne	pc, pc, r3, lsl #2
   1c164:	nop	{0}
   1c168:	cmp	r0, r1, lsl #31
   1c16c:	adc	r2, r2, r2
   1c170:	subcs	r0, r0, r1, lsl #31
   1c174:	cmp	r0, r1, lsl #30
   1c178:	adc	r2, r2, r2
   1c17c:	subcs	r0, r0, r1, lsl #30
   1c180:	cmp	r0, r1, lsl #29
   1c184:	adc	r2, r2, r2
   1c188:	subcs	r0, r0, r1, lsl #29
   1c18c:	cmp	r0, r1, lsl #28
   1c190:	adc	r2, r2, r2
   1c194:	subcs	r0, r0, r1, lsl #28
   1c198:	cmp	r0, r1, lsl #27
   1c19c:	adc	r2, r2, r2
   1c1a0:	subcs	r0, r0, r1, lsl #27
   1c1a4:	cmp	r0, r1, lsl #26
   1c1a8:	adc	r2, r2, r2
   1c1ac:	subcs	r0, r0, r1, lsl #26
   1c1b0:	cmp	r0, r1, lsl #25
   1c1b4:	adc	r2, r2, r2
   1c1b8:	subcs	r0, r0, r1, lsl #25
   1c1bc:	cmp	r0, r1, lsl #24
   1c1c0:	adc	r2, r2, r2
   1c1c4:	subcs	r0, r0, r1, lsl #24
   1c1c8:	cmp	r0, r1, lsl #23
   1c1cc:	adc	r2, r2, r2
   1c1d0:	subcs	r0, r0, r1, lsl #23
   1c1d4:	cmp	r0, r1, lsl #22
   1c1d8:	adc	r2, r2, r2
   1c1dc:	subcs	r0, r0, r1, lsl #22
   1c1e0:	cmp	r0, r1, lsl #21
   1c1e4:	adc	r2, r2, r2
   1c1e8:	subcs	r0, r0, r1, lsl #21
   1c1ec:	cmp	r0, r1, lsl #20
   1c1f0:	adc	r2, r2, r2
   1c1f4:	subcs	r0, r0, r1, lsl #20
   1c1f8:	cmp	r0, r1, lsl #19
   1c1fc:	adc	r2, r2, r2
   1c200:	subcs	r0, r0, r1, lsl #19
   1c204:	cmp	r0, r1, lsl #18
   1c208:	adc	r2, r2, r2
   1c20c:	subcs	r0, r0, r1, lsl #18
   1c210:	cmp	r0, r1, lsl #17
   1c214:	adc	r2, r2, r2
   1c218:	subcs	r0, r0, r1, lsl #17
   1c21c:	cmp	r0, r1, lsl #16
   1c220:	adc	r2, r2, r2
   1c224:	subcs	r0, r0, r1, lsl #16
   1c228:	cmp	r0, r1, lsl #15
   1c22c:	adc	r2, r2, r2
   1c230:	subcs	r0, r0, r1, lsl #15
   1c234:	cmp	r0, r1, lsl #14
   1c238:	adc	r2, r2, r2
   1c23c:	subcs	r0, r0, r1, lsl #14
   1c240:	cmp	r0, r1, lsl #13
   1c244:	adc	r2, r2, r2
   1c248:	subcs	r0, r0, r1, lsl #13
   1c24c:	cmp	r0, r1, lsl #12
   1c250:	adc	r2, r2, r2
   1c254:	subcs	r0, r0, r1, lsl #12
   1c258:	cmp	r0, r1, lsl #11
   1c25c:	adc	r2, r2, r2
   1c260:	subcs	r0, r0, r1, lsl #11
   1c264:	cmp	r0, r1, lsl #10
   1c268:	adc	r2, r2, r2
   1c26c:	subcs	r0, r0, r1, lsl #10
   1c270:	cmp	r0, r1, lsl #9
   1c274:	adc	r2, r2, r2
   1c278:	subcs	r0, r0, r1, lsl #9
   1c27c:	cmp	r0, r1, lsl #8
   1c280:	adc	r2, r2, r2
   1c284:	subcs	r0, r0, r1, lsl #8
   1c288:	cmp	r0, r1, lsl #7
   1c28c:	adc	r2, r2, r2
   1c290:	subcs	r0, r0, r1, lsl #7
   1c294:	cmp	r0, r1, lsl #6
   1c298:	adc	r2, r2, r2
   1c29c:	subcs	r0, r0, r1, lsl #6
   1c2a0:	cmp	r0, r1, lsl #5
   1c2a4:	adc	r2, r2, r2
   1c2a8:	subcs	r0, r0, r1, lsl #5
   1c2ac:	cmp	r0, r1, lsl #4
   1c2b0:	adc	r2, r2, r2
   1c2b4:	subcs	r0, r0, r1, lsl #4
   1c2b8:	cmp	r0, r1, lsl #3
   1c2bc:	adc	r2, r2, r2
   1c2c0:	subcs	r0, r0, r1, lsl #3
   1c2c4:	cmp	r0, r1, lsl #2
   1c2c8:	adc	r2, r2, r2
   1c2cc:	subcs	r0, r0, r1, lsl #2
   1c2d0:	cmp	r0, r1, lsl #1
   1c2d4:	adc	r2, r2, r2
   1c2d8:	subcs	r0, r0, r1, lsl #1
   1c2dc:	cmp	r0, r1
   1c2e0:	adc	r2, r2, r2
   1c2e4:	subcs	r0, r0, r1
   1c2e8:	mov	r0, r2
   1c2ec:	bx	lr
   1c2f0:	moveq	r0, #1
   1c2f4:	movne	r0, #0
   1c2f8:	bx	lr
   1c2fc:	clz	r2, r1
   1c300:	rsb	r2, r2, #31
   1c304:	lsr	r0, r0, r2
   1c308:	bx	lr
   1c30c:	cmp	r0, #0
   1c310:	mvnne	r0, #0
   1c314:	b	1c374 <close_stdout@@Base+0x72f8>
   1c318:	cmp	r1, #0
   1c31c:	beq	1c30c <close_stdout@@Base+0x7290>
   1c320:	push	{r0, r1, lr}
   1c324:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c328:	pop	{r1, r2, lr}
   1c32c:	mul	r3, r2, r0
   1c330:	sub	r1, r1, r3
   1c334:	bx	lr
   1c338:	cmp	r3, #0
   1c33c:	cmpeq	r2, #0
   1c340:	bne	1c358 <close_stdout@@Base+0x72dc>
   1c344:	cmp	r1, #0
   1c348:	cmpeq	r0, #0
   1c34c:	mvnne	r1, #0
   1c350:	mvnne	r0, #0
   1c354:	b	1c374 <close_stdout@@Base+0x72f8>
   1c358:	sub	sp, sp, #8
   1c35c:	push	{sp, lr}
   1c360:	bl	1c3c0 <close_stdout@@Base+0x7344>
   1c364:	ldr	lr, [sp, #4]
   1c368:	add	sp, sp, #8
   1c36c:	pop	{r2, r3}
   1c370:	bx	lr
   1c374:	push	{r1, lr}
   1c378:	mov	r0, #8
   1c37c:	bl	11550 <raise@plt>
   1c380:	pop	{r1, pc}
   1c384:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c388:	mov	r8, r2
   1c38c:	mov	r6, r0
   1c390:	mov	r7, r1
   1c394:	mov	sl, r3
   1c398:	ldr	r9, [sp, #32]
   1c39c:	bl	1c3fc <close_stdout@@Base+0x7380>
   1c3a0:	umull	r4, r5, r8, r0
   1c3a4:	mul	r8, r8, r1
   1c3a8:	mla	r2, r0, sl, r8
   1c3ac:	add	r5, r2, r5
   1c3b0:	subs	r4, r6, r4
   1c3b4:	sbc	r5, r7, r5
   1c3b8:	strd	r4, [r9]
   1c3bc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c3c0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1c3c4:	mov	r8, r2
   1c3c8:	mov	r6, r0
   1c3cc:	mov	r7, r1
   1c3d0:	mov	r5, r3
   1c3d4:	ldr	r9, [sp, #32]
   1c3d8:	bl	1c888 <close_stdout@@Base+0x780c>
   1c3dc:	mul	r3, r0, r5
   1c3e0:	umull	r4, r5, r0, r8
   1c3e4:	mla	r8, r8, r1, r3
   1c3e8:	add	r5, r8, r5
   1c3ec:	subs	r4, r6, r4
   1c3f0:	sbc	r5, r7, r5
   1c3f4:	strd	r4, [r9]
   1c3f8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1c3fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c400:	rsbs	r4, r0, #0
   1c404:	rsc	r5, r1, #0
   1c408:	cmp	r1, #0
   1c40c:	mvn	r6, #0
   1c410:	sub	sp, sp, #12
   1c414:	movge	r4, r0
   1c418:	movge	r5, r1
   1c41c:	movge	r6, #0
   1c420:	cmp	r3, #0
   1c424:	blt	1c65c <close_stdout@@Base+0x75e0>
   1c428:	cmp	r3, #0
   1c42c:	mov	sl, r4
   1c430:	mov	ip, r5
   1c434:	mov	r0, r2
   1c438:	mov	r1, r3
   1c43c:	mov	r8, r2
   1c440:	mov	r7, r4
   1c444:	mov	r9, r5
   1c448:	bne	1c540 <close_stdout@@Base+0x74c4>
   1c44c:	cmp	r2, r5
   1c450:	bls	1c57c <close_stdout@@Base+0x7500>
   1c454:	clz	r3, r2
   1c458:	cmp	r3, #0
   1c45c:	rsbne	r2, r3, #32
   1c460:	lslne	r8, r0, r3
   1c464:	lsrne	r2, r4, r2
   1c468:	lslne	r7, r4, r3
   1c46c:	orrne	r9, r2, r5, lsl r3
   1c470:	lsr	r4, r8, #16
   1c474:	uxth	sl, r8
   1c478:	mov	r1, r4
   1c47c:	mov	r0, r9
   1c480:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c484:	mov	r1, r4
   1c488:	mov	fp, r0
   1c48c:	mov	r0, r9
   1c490:	bl	1c318 <close_stdout@@Base+0x729c>
   1c494:	mul	r0, sl, fp
   1c498:	lsr	r2, r7, #16
   1c49c:	orr	r1, r2, r1, lsl #16
   1c4a0:	cmp	r0, r1
   1c4a4:	bls	1c4c8 <close_stdout@@Base+0x744c>
   1c4a8:	adds	r1, r1, r8
   1c4ac:	sub	r3, fp, #1
   1c4b0:	bcs	1c4c4 <close_stdout@@Base+0x7448>
   1c4b4:	cmp	r0, r1
   1c4b8:	subhi	fp, fp, #2
   1c4bc:	addhi	r1, r1, r8
   1c4c0:	bhi	1c4c8 <close_stdout@@Base+0x744c>
   1c4c4:	mov	fp, r3
   1c4c8:	rsb	r9, r0, r1
   1c4cc:	mov	r1, r4
   1c4d0:	uxth	r7, r7
   1c4d4:	mov	r0, r9
   1c4d8:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c4dc:	mov	r1, r4
   1c4e0:	mov	r5, r0
   1c4e4:	mov	r0, r9
   1c4e8:	bl	1c318 <close_stdout@@Base+0x729c>
   1c4ec:	mul	sl, sl, r5
   1c4f0:	orr	r1, r7, r1, lsl #16
   1c4f4:	cmp	sl, r1
   1c4f8:	bls	1c518 <close_stdout@@Base+0x749c>
   1c4fc:	adds	r8, r1, r8
   1c500:	sub	r3, r5, #1
   1c504:	bcs	1c514 <close_stdout@@Base+0x7498>
   1c508:	cmp	sl, r8
   1c50c:	subhi	r5, r5, #2
   1c510:	bhi	1c518 <close_stdout@@Base+0x749c>
   1c514:	mov	r5, r3
   1c518:	orr	r3, r5, fp, lsl #16
   1c51c:	mov	r4, #0
   1c520:	cmp	r6, #0
   1c524:	mov	r0, r3
   1c528:	mov	r1, r4
   1c52c:	beq	1c538 <close_stdout@@Base+0x74bc>
   1c530:	rsbs	r0, r0, #0
   1c534:	rsc	r1, r1, #0
   1c538:	add	sp, sp, #12
   1c53c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c540:	cmp	r3, r5
   1c544:	movhi	r4, #0
   1c548:	movhi	r3, r4
   1c54c:	bhi	1c520 <close_stdout@@Base+0x74a4>
   1c550:	clz	r5, r1
   1c554:	cmp	r5, #0
   1c558:	bne	1c748 <close_stdout@@Base+0x76cc>
   1c55c:	cmp	r1, ip
   1c560:	cmpcs	r2, sl
   1c564:	movhi	r4, #0
   1c568:	movls	r4, #1
   1c56c:	movls	r3, #1
   1c570:	movls	r4, r5
   1c574:	movhi	r3, r4
   1c578:	b	1c520 <close_stdout@@Base+0x74a4>
   1c57c:	cmp	r2, #0
   1c580:	bne	1c594 <close_stdout@@Base+0x7518>
   1c584:	mov	r1, r2
   1c588:	mov	r0, #1
   1c58c:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c590:	mov	r8, r0
   1c594:	clz	r3, r8
   1c598:	cmp	r3, #0
   1c59c:	bne	1c66c <close_stdout@@Base+0x75f0>
   1c5a0:	rsb	r9, r8, r9
   1c5a4:	lsr	r5, r8, #16
   1c5a8:	uxth	sl, r8
   1c5ac:	mov	r4, #1
   1c5b0:	mov	r1, r5
   1c5b4:	mov	r0, r9
   1c5b8:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c5bc:	mov	r1, r5
   1c5c0:	mov	fp, r0
   1c5c4:	mov	r0, r9
   1c5c8:	bl	1c318 <close_stdout@@Base+0x729c>
   1c5cc:	mul	r0, sl, fp
   1c5d0:	lsr	r2, r7, #16
   1c5d4:	orr	r1, r2, r1, lsl #16
   1c5d8:	cmp	r0, r1
   1c5dc:	bls	1c5fc <close_stdout@@Base+0x7580>
   1c5e0:	adds	r1, r1, r8
   1c5e4:	sub	r3, fp, #1
   1c5e8:	bcs	1c868 <close_stdout@@Base+0x77ec>
   1c5ec:	cmp	r0, r1
   1c5f0:	subhi	fp, fp, #2
   1c5f4:	addhi	r1, r1, r8
   1c5f8:	bls	1c868 <close_stdout@@Base+0x77ec>
   1c5fc:	rsb	r2, r0, r1
   1c600:	mov	r1, r5
   1c604:	str	r2, [sp]
   1c608:	uxth	r7, r7
   1c60c:	mov	r0, r2
   1c610:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c614:	ldr	r2, [sp]
   1c618:	mov	r1, r5
   1c61c:	mov	r9, r0
   1c620:	mov	r0, r2
   1c624:	bl	1c318 <close_stdout@@Base+0x729c>
   1c628:	mul	sl, sl, r9
   1c62c:	orr	r1, r7, r1, lsl #16
   1c630:	cmp	sl, r1
   1c634:	bls	1c654 <close_stdout@@Base+0x75d8>
   1c638:	adds	r8, r1, r8
   1c63c:	sub	r3, r9, #1
   1c640:	bcs	1c650 <close_stdout@@Base+0x75d4>
   1c644:	cmp	sl, r8
   1c648:	subhi	r9, r9, #2
   1c64c:	bhi	1c654 <close_stdout@@Base+0x75d8>
   1c650:	mov	r9, r3
   1c654:	orr	r3, r9, fp, lsl #16
   1c658:	b	1c520 <close_stdout@@Base+0x74a4>
   1c65c:	mvn	r6, r6
   1c660:	rsbs	r2, r2, #0
   1c664:	rsc	r3, r3, #0
   1c668:	b	1c428 <close_stdout@@Base+0x73ac>
   1c66c:	lsl	r8, r8, r3
   1c670:	rsb	fp, r3, #32
   1c674:	lsr	r4, r9, fp
   1c678:	lsr	fp, r7, fp
   1c67c:	lsr	r5, r8, #16
   1c680:	orr	fp, fp, r9, lsl r3
   1c684:	mov	r0, r4
   1c688:	lsl	r7, r7, r3
   1c68c:	mov	r1, r5
   1c690:	uxth	sl, r8
   1c694:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c698:	mov	r1, r5
   1c69c:	mov	r3, r0
   1c6a0:	mov	r0, r4
   1c6a4:	str	r3, [sp]
   1c6a8:	bl	1c318 <close_stdout@@Base+0x729c>
   1c6ac:	ldr	r3, [sp]
   1c6b0:	lsr	r2, fp, #16
   1c6b4:	mul	r0, sl, r3
   1c6b8:	orr	r1, r2, r1, lsl #16
   1c6bc:	cmp	r0, r1
   1c6c0:	bls	1c6e0 <close_stdout@@Base+0x7664>
   1c6c4:	adds	r1, r1, r8
   1c6c8:	sub	r2, r3, #1
   1c6cc:	bcs	1c880 <close_stdout@@Base+0x7804>
   1c6d0:	cmp	r0, r1
   1c6d4:	subhi	r3, r3, #2
   1c6d8:	addhi	r1, r1, r8
   1c6dc:	bls	1c880 <close_stdout@@Base+0x7804>
   1c6e0:	rsb	r9, r0, r1
   1c6e4:	mov	r1, r5
   1c6e8:	str	r3, [sp]
   1c6ec:	uxth	fp, fp
   1c6f0:	mov	r0, r9
   1c6f4:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c6f8:	mov	r1, r5
   1c6fc:	mov	r4, r0
   1c700:	mov	r0, r9
   1c704:	bl	1c318 <close_stdout@@Base+0x729c>
   1c708:	mul	r9, sl, r4
   1c70c:	ldr	r3, [sp]
   1c710:	orr	r1, fp, r1, lsl #16
   1c714:	cmp	r9, r1
   1c718:	bls	1c73c <close_stdout@@Base+0x76c0>
   1c71c:	adds	r1, r1, r8
   1c720:	sub	r2, r4, #1
   1c724:	bcs	1c738 <close_stdout@@Base+0x76bc>
   1c728:	cmp	r9, r1
   1c72c:	subhi	r4, r4, #2
   1c730:	addhi	r1, r1, r8
   1c734:	bhi	1c73c <close_stdout@@Base+0x76c0>
   1c738:	mov	r4, r2
   1c73c:	rsb	r9, r9, r1
   1c740:	orr	r4, r4, r3, lsl #16
   1c744:	b	1c5b0 <close_stdout@@Base+0x7534>
   1c748:	rsb	sl, r5, #32
   1c74c:	lsl	r3, r2, r5
   1c750:	lsr	r0, r2, sl
   1c754:	lsr	r2, ip, sl
   1c758:	orr	r4, r0, r1, lsl r5
   1c75c:	lsr	sl, r7, sl
   1c760:	mov	r0, r2
   1c764:	orr	sl, sl, ip, lsl r5
   1c768:	lsr	r9, r4, #16
   1c76c:	str	r3, [sp, #4]
   1c770:	str	r2, [sp]
   1c774:	uxth	fp, r4
   1c778:	mov	r1, r9
   1c77c:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c780:	ldr	r2, [sp]
   1c784:	mov	r1, r9
   1c788:	mov	r8, r0
   1c78c:	mov	r0, r2
   1c790:	bl	1c318 <close_stdout@@Base+0x729c>
   1c794:	mul	r0, fp, r8
   1c798:	lsr	r2, sl, #16
   1c79c:	orr	r1, r2, r1, lsl #16
   1c7a0:	cmp	r0, r1
   1c7a4:	bls	1c7c4 <close_stdout@@Base+0x7748>
   1c7a8:	adds	r1, r1, r4
   1c7ac:	sub	r2, r8, #1
   1c7b0:	bcs	1c878 <close_stdout@@Base+0x77fc>
   1c7b4:	cmp	r0, r1
   1c7b8:	subhi	r8, r8, #2
   1c7bc:	addhi	r1, r1, r4
   1c7c0:	bls	1c878 <close_stdout@@Base+0x77fc>
   1c7c4:	rsb	ip, r0, r1
   1c7c8:	mov	r1, r9
   1c7cc:	str	ip, [sp]
   1c7d0:	mov	r0, ip
   1c7d4:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c7d8:	ldr	ip, [sp]
   1c7dc:	mov	r1, r9
   1c7e0:	mov	r2, r0
   1c7e4:	mov	r0, ip
   1c7e8:	str	r2, [sp]
   1c7ec:	bl	1c318 <close_stdout@@Base+0x729c>
   1c7f0:	ldr	r2, [sp]
   1c7f4:	uxth	ip, sl
   1c7f8:	mul	fp, fp, r2
   1c7fc:	orr	ip, ip, r1, lsl #16
   1c800:	cmp	fp, ip
   1c804:	bls	1c824 <close_stdout@@Base+0x77a8>
   1c808:	adds	ip, ip, r4
   1c80c:	sub	r1, r2, #1
   1c810:	bcs	1c870 <close_stdout@@Base+0x77f4>
   1c814:	cmp	fp, ip
   1c818:	subhi	r2, r2, #2
   1c81c:	addhi	ip, ip, r4
   1c820:	bls	1c870 <close_stdout@@Base+0x77f4>
   1c824:	ldr	r0, [sp, #4]
   1c828:	orr	r1, r2, r8, lsl #16
   1c82c:	rsb	fp, fp, ip
   1c830:	umull	r2, r3, r1, r0
   1c834:	cmp	fp, r3
   1c838:	bcc	1c85c <close_stdout@@Base+0x77e0>
   1c83c:	movne	r4, #0
   1c840:	moveq	r4, #1
   1c844:	cmp	r2, r7, lsl r5
   1c848:	movls	r4, #0
   1c84c:	andhi	r4, r4, #1
   1c850:	cmp	r4, #0
   1c854:	moveq	r3, r1
   1c858:	beq	1c520 <close_stdout@@Base+0x74a4>
   1c85c:	sub	r3, r1, #1
   1c860:	mov	r4, #0
   1c864:	b	1c520 <close_stdout@@Base+0x74a4>
   1c868:	mov	fp, r3
   1c86c:	b	1c5fc <close_stdout@@Base+0x7580>
   1c870:	mov	r2, r1
   1c874:	b	1c824 <close_stdout@@Base+0x77a8>
   1c878:	mov	r8, r2
   1c87c:	b	1c7c4 <close_stdout@@Base+0x7748>
   1c880:	mov	r3, r2
   1c884:	b	1c6e0 <close_stdout@@Base+0x7664>
   1c888:	cmp	r3, #0
   1c88c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c890:	mov	r6, r0
   1c894:	sub	sp, sp, #12
   1c898:	mov	r5, r1
   1c89c:	mov	r7, r0
   1c8a0:	mov	r4, r2
   1c8a4:	mov	r8, r1
   1c8a8:	bne	1c988 <close_stdout@@Base+0x790c>
   1c8ac:	cmp	r2, r1
   1c8b0:	bls	1c9c4 <close_stdout@@Base+0x7948>
   1c8b4:	clz	r3, r2
   1c8b8:	cmp	r3, #0
   1c8bc:	rsbne	r8, r3, #32
   1c8c0:	lslne	r4, r2, r3
   1c8c4:	lsrne	r8, r0, r8
   1c8c8:	lslne	r7, r0, r3
   1c8cc:	orrne	r8, r8, r1, lsl r3
   1c8d0:	lsr	r5, r4, #16
   1c8d4:	uxth	sl, r4
   1c8d8:	mov	r1, r5
   1c8dc:	mov	r0, r8
   1c8e0:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c8e4:	mov	r1, r5
   1c8e8:	mov	r9, r0
   1c8ec:	mov	r0, r8
   1c8f0:	bl	1c318 <close_stdout@@Base+0x729c>
   1c8f4:	mul	r0, sl, r9
   1c8f8:	lsr	r3, r7, #16
   1c8fc:	orr	r1, r3, r1, lsl #16
   1c900:	cmp	r0, r1
   1c904:	bls	1c928 <close_stdout@@Base+0x78ac>
   1c908:	adds	r1, r1, r4
   1c90c:	sub	r2, r9, #1
   1c910:	bcs	1c924 <close_stdout@@Base+0x78a8>
   1c914:	cmp	r0, r1
   1c918:	subhi	r9, r9, #2
   1c91c:	addhi	r1, r1, r4
   1c920:	bhi	1c928 <close_stdout@@Base+0x78ac>
   1c924:	mov	r9, r2
   1c928:	rsb	r8, r0, r1
   1c92c:	mov	r1, r5
   1c930:	uxth	r7, r7
   1c934:	mov	r0, r8
   1c938:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c93c:	mov	r1, r5
   1c940:	mov	r6, r0
   1c944:	mov	r0, r8
   1c948:	bl	1c318 <close_stdout@@Base+0x729c>
   1c94c:	mul	sl, sl, r6
   1c950:	orr	r1, r7, r1, lsl #16
   1c954:	cmp	sl, r1
   1c958:	bls	1c974 <close_stdout@@Base+0x78f8>
   1c95c:	adds	r4, r1, r4
   1c960:	sub	r3, r6, #1
   1c964:	bcs	1cc70 <close_stdout@@Base+0x7bf4>
   1c968:	cmp	sl, r4
   1c96c:	subhi	r6, r6, #2
   1c970:	bls	1cc70 <close_stdout@@Base+0x7bf4>
   1c974:	orr	r0, r6, r9, lsl #16
   1c978:	mov	r6, #0
   1c97c:	mov	r1, r6
   1c980:	add	sp, sp, #12
   1c984:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c988:	cmp	r3, r1
   1c98c:	movhi	r6, #0
   1c990:	movhi	r0, r6
   1c994:	bhi	1c97c <close_stdout@@Base+0x7900>
   1c998:	clz	r7, r3
   1c99c:	cmp	r7, #0
   1c9a0:	bne	1caa0 <close_stdout@@Base+0x7a24>
   1c9a4:	cmp	r3, r1
   1c9a8:	cmpcs	r2, r6
   1c9ac:	movhi	r6, #0
   1c9b0:	movls	r6, #1
   1c9b4:	movls	r0, #1
   1c9b8:	movls	r6, r7
   1c9bc:	movhi	r0, r6
   1c9c0:	b	1c97c <close_stdout@@Base+0x7900>
   1c9c4:	cmp	r2, #0
   1c9c8:	bne	1c9dc <close_stdout@@Base+0x7960>
   1c9cc:	mov	r1, r2
   1c9d0:	mov	r0, #1
   1c9d4:	bl	1c12c <close_stdout@@Base+0x70b0>
   1c9d8:	mov	r4, r0
   1c9dc:	clz	r3, r4
   1c9e0:	cmp	r3, #0
   1c9e4:	bne	1cb9c <close_stdout@@Base+0x7b20>
   1c9e8:	rsb	r5, r4, r5
   1c9ec:	lsr	r8, r4, #16
   1c9f0:	uxth	sl, r4
   1c9f4:	mov	r6, #1
   1c9f8:	mov	r1, r8
   1c9fc:	mov	r0, r5
   1ca00:	bl	1c12c <close_stdout@@Base+0x70b0>
   1ca04:	mov	r1, r8
   1ca08:	mov	r9, r0
   1ca0c:	mov	r0, r5
   1ca10:	bl	1c318 <close_stdout@@Base+0x729c>
   1ca14:	mul	r0, sl, r9
   1ca18:	lsr	r3, r7, #16
   1ca1c:	orr	r1, r3, r1, lsl #16
   1ca20:	cmp	r0, r1
   1ca24:	bls	1ca44 <close_stdout@@Base+0x79c8>
   1ca28:	adds	r1, r1, r4
   1ca2c:	sub	r2, r9, #1
   1ca30:	bcs	1cc78 <close_stdout@@Base+0x7bfc>
   1ca34:	cmp	r0, r1
   1ca38:	subhi	r9, r9, #2
   1ca3c:	addhi	r1, r1, r4
   1ca40:	bls	1cc78 <close_stdout@@Base+0x7bfc>
   1ca44:	rsb	fp, r0, r1
   1ca48:	mov	r1, r8
   1ca4c:	uxth	r7, r7
   1ca50:	mov	r0, fp
   1ca54:	bl	1c12c <close_stdout@@Base+0x70b0>
   1ca58:	mov	r1, r8
   1ca5c:	mov	r5, r0
   1ca60:	mov	r0, fp
   1ca64:	bl	1c318 <close_stdout@@Base+0x729c>
   1ca68:	mul	sl, sl, r5
   1ca6c:	orr	r1, r7, r1, lsl #16
   1ca70:	cmp	sl, r1
   1ca74:	bls	1ca90 <close_stdout@@Base+0x7a14>
   1ca78:	adds	r4, r1, r4
   1ca7c:	sub	r3, r5, #1
   1ca80:	bcs	1cc80 <close_stdout@@Base+0x7c04>
   1ca84:	cmp	sl, r4
   1ca88:	subhi	r5, r5, #2
   1ca8c:	bls	1cc80 <close_stdout@@Base+0x7c04>
   1ca90:	orr	r0, r5, r9, lsl #16
   1ca94:	mov	r1, r6
   1ca98:	add	sp, sp, #12
   1ca9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1caa0:	rsb	r1, r7, #32
   1caa4:	lsl	r0, r2, r7
   1caa8:	lsr	r2, r2, r1
   1caac:	lsr	fp, r5, r1
   1cab0:	orr	r8, r2, r3, lsl r7
   1cab4:	lsr	r1, r6, r1
   1cab8:	str	r0, [sp, #4]
   1cabc:	orr	r5, r1, r5, lsl r7
   1cac0:	lsr	r9, r8, #16
   1cac4:	mov	r0, fp
   1cac8:	uxth	sl, r8
   1cacc:	mov	r1, r9
   1cad0:	bl	1c12c <close_stdout@@Base+0x70b0>
   1cad4:	mov	r1, r9
   1cad8:	mov	r4, r0
   1cadc:	mov	r0, fp
   1cae0:	bl	1c318 <close_stdout@@Base+0x729c>
   1cae4:	mul	r0, sl, r4
   1cae8:	lsr	ip, r5, #16
   1caec:	orr	r1, ip, r1, lsl #16
   1caf0:	cmp	r0, r1
   1caf4:	bls	1cb08 <close_stdout@@Base+0x7a8c>
   1caf8:	adds	r1, r1, r8
   1cafc:	sub	r2, r4, #1
   1cb00:	bcc	1cc9c <close_stdout@@Base+0x7c20>
   1cb04:	mov	r4, r2
   1cb08:	rsb	ip, r0, r1
   1cb0c:	mov	r1, r9
   1cb10:	str	ip, [sp]
   1cb14:	uxth	r5, r5
   1cb18:	mov	r0, ip
   1cb1c:	bl	1c12c <close_stdout@@Base+0x70b0>
   1cb20:	ldr	ip, [sp]
   1cb24:	mov	r1, r9
   1cb28:	mov	fp, r0
   1cb2c:	mov	r0, ip
   1cb30:	bl	1c318 <close_stdout@@Base+0x729c>
   1cb34:	mul	sl, sl, fp
   1cb38:	orr	r1, r5, r1, lsl #16
   1cb3c:	cmp	sl, r1
   1cb40:	bls	1cb54 <close_stdout@@Base+0x7ad8>
   1cb44:	adds	r1, r1, r8
   1cb48:	sub	r2, fp, #1
   1cb4c:	bcc	1cc88 <close_stdout@@Base+0x7c0c>
   1cb50:	mov	fp, r2
   1cb54:	ldr	r3, [sp, #4]
   1cb58:	orr	r0, fp, r4, lsl #16
   1cb5c:	rsb	sl, sl, r1
   1cb60:	umull	r4, r5, r0, r3
   1cb64:	cmp	sl, r5
   1cb68:	bcc	1cb88 <close_stdout@@Base+0x7b0c>
   1cb6c:	movne	r3, #0
   1cb70:	moveq	r3, #1
   1cb74:	cmp	r4, r6, lsl r7
   1cb78:	movls	r6, #0
   1cb7c:	andhi	r6, r3, #1
   1cb80:	cmp	r6, #0
   1cb84:	beq	1c97c <close_stdout@@Base+0x7900>
   1cb88:	mov	r6, #0
   1cb8c:	sub	r0, r0, #1
   1cb90:	mov	r1, r6
   1cb94:	add	sp, sp, #12
   1cb98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cb9c:	lsl	r4, r4, r3
   1cba0:	rsb	r9, r3, #32
   1cba4:	lsr	r2, r5, r9
   1cba8:	lsr	r9, r6, r9
   1cbac:	lsr	r8, r4, #16
   1cbb0:	orr	r9, r9, r5, lsl r3
   1cbb4:	mov	r0, r2
   1cbb8:	lsl	r7, r6, r3
   1cbbc:	mov	r1, r8
   1cbc0:	str	r2, [sp]
   1cbc4:	bl	1c12c <close_stdout@@Base+0x70b0>
   1cbc8:	ldr	r2, [sp]
   1cbcc:	mov	r1, r8
   1cbd0:	uxth	sl, r4
   1cbd4:	mov	fp, r0
   1cbd8:	mov	r0, r2
   1cbdc:	bl	1c318 <close_stdout@@Base+0x729c>
   1cbe0:	mul	r0, sl, fp
   1cbe4:	lsr	r3, r9, #16
   1cbe8:	orr	r1, r3, r1, lsl #16
   1cbec:	cmp	r0, r1
   1cbf0:	bls	1cc10 <close_stdout@@Base+0x7b94>
   1cbf4:	adds	r1, r1, r4
   1cbf8:	sub	r3, fp, #1
   1cbfc:	bcs	1ccb0 <close_stdout@@Base+0x7c34>
   1cc00:	cmp	r0, r1
   1cc04:	subhi	fp, fp, #2
   1cc08:	addhi	r1, r1, r4
   1cc0c:	bls	1ccb0 <close_stdout@@Base+0x7c34>
   1cc10:	rsb	r5, r0, r1
   1cc14:	mov	r1, r8
   1cc18:	uxth	r9, r9
   1cc1c:	mov	r0, r5
   1cc20:	bl	1c12c <close_stdout@@Base+0x70b0>
   1cc24:	mov	r1, r8
   1cc28:	mov	r6, r0
   1cc2c:	mov	r0, r5
   1cc30:	bl	1c318 <close_stdout@@Base+0x729c>
   1cc34:	mul	r5, sl, r6
   1cc38:	orr	r1, r9, r1, lsl #16
   1cc3c:	cmp	r5, r1
   1cc40:	bls	1cc64 <close_stdout@@Base+0x7be8>
   1cc44:	adds	r1, r1, r4
   1cc48:	sub	r3, r6, #1
   1cc4c:	bcs	1cc60 <close_stdout@@Base+0x7be4>
   1cc50:	cmp	r5, r1
   1cc54:	subhi	r6, r6, #2
   1cc58:	addhi	r1, r1, r4
   1cc5c:	bhi	1cc64 <close_stdout@@Base+0x7be8>
   1cc60:	mov	r6, r3
   1cc64:	rsb	r5, r5, r1
   1cc68:	orr	r6, r6, fp, lsl #16
   1cc6c:	b	1c9f8 <close_stdout@@Base+0x797c>
   1cc70:	mov	r6, r3
   1cc74:	b	1c974 <close_stdout@@Base+0x78f8>
   1cc78:	mov	r9, r2
   1cc7c:	b	1ca44 <close_stdout@@Base+0x79c8>
   1cc80:	mov	r5, r3
   1cc84:	b	1ca90 <close_stdout@@Base+0x7a14>
   1cc88:	cmp	sl, r1
   1cc8c:	subhi	fp, fp, #2
   1cc90:	addhi	r1, r1, r8
   1cc94:	bhi	1cb54 <close_stdout@@Base+0x7ad8>
   1cc98:	b	1cb50 <close_stdout@@Base+0x7ad4>
   1cc9c:	cmp	r0, r1
   1cca0:	subhi	r4, r4, #2
   1cca4:	addhi	r1, r1, r8
   1cca8:	bhi	1cb08 <close_stdout@@Base+0x7a8c>
   1ccac:	b	1cb04 <close_stdout@@Base+0x7a88>
   1ccb0:	mov	fp, r3
   1ccb4:	b	1cc10 <close_stdout@@Base+0x7b94>
   1ccb8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1ccbc:	mov	r7, r0
   1ccc0:	ldr	r6, [pc, #76]	; 1cd14 <close_stdout@@Base+0x7c98>
   1ccc4:	mov	r8, r1
   1ccc8:	ldr	r5, [pc, #72]	; 1cd18 <close_stdout@@Base+0x7c9c>
   1cccc:	mov	r9, r2
   1ccd0:	add	r6, pc, r6
   1ccd4:	bl	1150c <fdopen@plt-0x20>
   1ccd8:	add	r5, pc, r5
   1ccdc:	rsb	r6, r5, r6
   1cce0:	asrs	r6, r6, #2
   1cce4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1cce8:	sub	r5, r5, #4
   1ccec:	mov	r4, #0
   1ccf0:	add	r4, r4, #1
   1ccf4:	ldr	r3, [r5, #4]!
   1ccf8:	mov	r0, r7
   1ccfc:	mov	r1, r8
   1cd00:	mov	r2, r9
   1cd04:	blx	r3
   1cd08:	cmp	r4, r6
   1cd0c:	bne	1ccf0 <close_stdout@@Base+0x7c74>
   1cd10:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1cd14:	andeq	r2, r1, r4, lsl r1
   1cd18:	andeq	r2, r1, r8, lsl #2
   1cd1c:	bx	lr
   1cd20:	ldr	r3, [pc, #28]	; 1cd44 <close_stdout@@Base+0x7cc8>
   1cd24:	mov	r1, #0
   1cd28:	ldr	r2, [pc, #24]	; 1cd48 <close_stdout@@Base+0x7ccc>
   1cd2c:	add	r3, pc, r3
   1cd30:	ldr	r3, [r3, r2]
   1cd34:	cmp	r3, #0
   1cd38:	ldrne	r2, [r3]
   1cd3c:	moveq	r2, r3
   1cd40:	b	11814 <__cxa_atexit@plt>
   1cd44:	andeq	r2, r1, ip, asr #5
   1cd48:	muleq	r0, r4, r1

Disassembly of section .fini:

0001cd4c <.fini>:
   1cd4c:	push	{r3, lr}
   1cd50:	pop	{r3, pc}
