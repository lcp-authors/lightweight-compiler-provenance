
centos-preinstalled/ogginfo:     file format elf32-littlearm


Disassembly of section .init:

00011004 <_init@@Base>:
   11004:	push	{r3, lr}
   11008:	bl	12008 <__assert_fail@plt+0xd38>
   1100c:	pop	{r3, pc}

Disassembly of section .plt:

00011010 <calloc@plt-0x14>:
   11010:	push	{lr}		; (str lr, [sp, #-4]!)
   11014:	ldr	lr, [pc, #4]	; 11020 <_init@@Base+0x1c>
   11018:	add	lr, pc, lr
   1101c:	ldr	pc, [lr, #8]!
   11020:	andeq	r5, r1, r0, ror #31

00011024 <calloc@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #4064]!	; 0xfe0

00011030 <ogg_stream_packetpeek@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #4056]!	; 0xfd8

0001103c <ogg_sync_clear@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #4048]!	; 0xfd0

00011048 <ogg_page_bos@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #4040]!	; 0xfc8

00011054 <iconv_close@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #4032]!	; 0xfc0

00011060 <iconv@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #4024]!	; 0xfb8

0001106c <strcmp@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #4016]!	; 0xfb0

00011078 <ogg_stream_clear@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #86016	; 0x15000
   11080:	ldr	pc, [ip, #4008]!	; 0xfa8

00011084 <ogg_page_pageno@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #86016	; 0x15000
   1108c:	ldr	pc, [ip, #4000]!	; 0xfa0

00011090 <free@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #86016	; 0x15000
   11098:	ldr	pc, [ip, #3992]!	; 0xf98

0001109c <vorbis_info_init@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #86016	; 0x15000
   110a4:	ldr	pc, [ip, #3984]!	; 0xf90

000110a8 <memcpy@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #86016	; 0x15000
   110b0:	ldr	pc, [ip, #3976]!	; 0xf88

000110b4 <memcmp@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #86016	; 0x15000
   110bc:	ldr	pc, [ip, #3968]!	; 0xf80

000110c0 <vorbis_comment_init@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #86016	; 0x15000
   110c8:	ldr	pc, [ip, #3960]!	; 0xf78

000110cc <dcgettext@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #86016	; 0x15000
   110d4:	ldr	pc, [ip, #3952]!	; 0xf70

000110d8 <__stack_chk_fail@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #3944]!	; 0xf68

000110e4 <ogg_stream_packetout@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #3936]!	; 0xf60

000110f0 <realloc@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #86016	; 0x15000
   110f8:	ldr	pc, [ip, #3928]!	; 0xf58

000110fc <ogg_stream_pagein@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #86016	; 0x15000
   11104:	ldr	pc, [ip, #3920]!	; 0xf50

00011108 <textdomain@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #86016	; 0x15000
   11110:	ldr	pc, [ip, #3912]!	; 0xf48

00011114 <ogg_sync_buffer@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #86016	; 0x15000
   1111c:	ldr	pc, [ip, #3904]!	; 0xf40

00011120 <strcpy@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #86016	; 0x15000
   11128:	ldr	pc, [ip, #3896]!	; 0xf38

0001112c <fread@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #86016	; 0x15000
   11134:	ldr	pc, [ip, #3888]!	; 0xf30

00011138 <vorbis_comment_clear@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #86016	; 0x15000
   11140:	ldr	pc, [ip, #3880]!	; 0xf28

00011144 <ogg_sync_wrote@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #86016	; 0x15000
   1114c:	ldr	pc, [ip, #3872]!	; 0xf20

00011150 <getenv@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #86016	; 0x15000
   11158:	ldr	pc, [ip, #3864]!	; 0xf18

0001115c <malloc@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #86016	; 0x15000
   11164:	ldr	pc, [ip, #3856]!	; 0xf10

00011168 <iconv_open@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #86016	; 0x15000
   11170:	ldr	pc, [ip, #3848]!	; 0xf08

00011174 <__libc_start_main@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #86016	; 0x15000
   1117c:	ldr	pc, [ip, #3840]!	; 0xf00

00011180 <strerror@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #86016	; 0x15000
   11188:	ldr	pc, [ip, #3832]!	; 0xef8

0001118c <__vfprintf_chk@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #86016	; 0x15000
   11194:	ldr	pc, [ip, #3824]!	; 0xef0

00011198 <__gmon_start__@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #86016	; 0x15000
   111a0:	ldr	pc, [ip, #3816]!	; 0xee8

000111a4 <oggpackB_readinit@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #86016	; 0x15000
   111ac:	ldr	pc, [ip, #3808]!	; 0xee0

000111b0 <exit@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #86016	; 0x15000
   111b8:	ldr	pc, [ip, #3800]!	; 0xed8

000111bc <ogg_page_granulepos@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #86016	; 0x15000
   111c4:	ldr	pc, [ip, #3792]!	; 0xed0

000111c8 <strlen@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #86016	; 0x15000
   111d0:	ldr	pc, [ip, #3784]!	; 0xec8

000111d4 <strchr@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #86016	; 0x15000
   111dc:	ldr	pc, [ip, #3776]!	; 0xec0

000111e0 <getopt@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #86016	; 0x15000
   111e8:	ldr	pc, [ip, #3768]!	; 0xeb8

000111ec <__errno_location@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #86016	; 0x15000
   111f4:	ldr	pc, [ip, #3760]!	; 0xeb0

000111f8 <__strdup@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #86016	; 0x15000
   11200:	ldr	pc, [ip, #3752]!	; 0xea8

00011204 <memset@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #86016	; 0x15000
   1120c:	ldr	pc, [ip, #3744]!	; 0xea0

00011210 <__printf_chk@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #86016	; 0x15000
   11218:	ldr	pc, [ip, #3736]!	; 0xe98

0001121c <__fprintf_chk@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #86016	; 0x15000
   11224:	ldr	pc, [ip, #3728]!	; 0xe90

00011228 <vorbis_synthesis_headerin@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #86016	; 0x15000
   11230:	ldr	pc, [ip, #3720]!	; 0xe88

00011234 <fclose@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #86016	; 0x15000
   1123c:	ldr	pc, [ip, #3712]!	; 0xe80

00011240 <ogg_sync_pageseek@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #86016	; 0x15000
   11248:	ldr	pc, [ip, #3704]!	; 0xe78

0001124c <ogg_stream_init@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #86016	; 0x15000
   11254:	ldr	pc, [ip, #3696]!	; 0xe70

00011258 <setlocale@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #86016	; 0x15000
   11260:	ldr	pc, [ip, #3688]!	; 0xe68

00011264 <nl_langinfo@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #86016	; 0x15000
   1126c:	ldr	pc, [ip, #3680]!	; 0xe60

00011270 <ogg_page_serialno@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #86016	; 0x15000
   11278:	ldr	pc, [ip, #3672]!	; 0xe58

0001127c <fopen64@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #86016	; 0x15000
   11284:	ldr	pc, [ip, #3664]!	; 0xe50

00011288 <oggpackB_read@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #86016	; 0x15000
   11290:	ldr	pc, [ip, #3656]!	; 0xe48

00011294 <vorbis_info_clear@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #86016	; 0x15000
   1129c:	ldr	pc, [ip, #3648]!	; 0xe40

000112a0 <bindtextdomain@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #86016	; 0x15000
   112a8:	ldr	pc, [ip, #3640]!	; 0xe38

000112ac <ogg_sync_init@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #86016	; 0x15000
   112b4:	ldr	pc, [ip, #3632]!	; 0xe30

000112b8 <ogg_page_eos@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #86016	; 0x15000
   112c0:	ldr	pc, [ip, #3624]!	; 0xe28

000112c4 <abort@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #86016	; 0x15000
   112cc:	ldr	pc, [ip, #3616]!	; 0xe20

000112d0 <__assert_fail@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #86016	; 0x15000
   112d8:	ldr	pc, [ip, #3608]!	; 0xe18

Disassembly of section .text:

000112e0 <.text>:
   112e0:	movw	ip, #29056	; 0x7180
   112e4:	movt	ip, #2
   112e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112ec:	sub	sp, sp, #140	; 0x8c
   112f0:	ldr	r3, [ip]
   112f4:	mov	r5, r0
   112f8:	mov	r6, r1
   112fc:	mov	r0, #6
   11300:	movw	r1, #23336	; 0x5b28
   11304:	movt	r1, #1
   11308:	str	ip, [sp, #12]
   1130c:	str	r3, [sp, #132]	; 0x84
   11310:	bl	11258 <setlocale@plt>
   11314:	movw	r0, #20128	; 0x4ea0
   11318:	movw	r1, #23068	; 0x5a1c
   1131c:	movt	r0, #1
   11320:	movt	r1, #1
   11324:	bl	112a0 <bindtextdomain@plt>
   11328:	movw	r0, #20128	; 0x4ea0
   1132c:	movt	r0, #1
   11330:	bl	11108 <textdomain@plt>
   11334:	cmp	r5, #1
   11338:	ble	11f80 <__assert_fail@plt+0xcb0>
   1133c:	movw	r4, #28924	; 0x70fc
   11340:	movt	r4, #2
   11344:	movw	r2, #23724	; 0x5cac
   11348:	mov	r0, r5
   1134c:	movt	r2, #1
   11350:	mov	r1, r6
   11354:	bl	111e0 <getopt@plt>
   11358:	cmp	r0, #0
   1135c:	blt	114a4 <__assert_fail@plt+0x1d4>
   11360:	sub	r3, r0, #86	; 0x56
   11364:	cmp	r3, #32
   11368:	ldrls	pc, [pc, r3, lsl #2]
   1136c:	b	11344 <__assert_fail@plt+0x74>
   11370:	muleq	r1, r8, r4
   11374:	andeq	r1, r1, r4, asr #6
   11378:	andeq	r1, r1, r4, asr #6
   1137c:	andeq	r1, r1, r4, asr #6
   11380:	andeq	r1, r1, r4, asr #6
   11384:	andeq	r1, r1, r4, asr #6
   11388:	andeq	r1, r1, r4, asr #6
   1138c:	andeq	r1, r1, r4, asr #6
   11390:	andeq	r1, r1, r4, asr #6
   11394:	andeq	r1, r1, r4, asr #6
   11398:	andeq	r1, r1, r4, asr #6
   1139c:	andeq	r1, r1, r4, asr #6
   113a0:	andeq	r1, r1, r4, asr #6
   113a4:	andeq	r1, r1, r4, asr #6
   113a8:	andeq	r1, r1, r4, asr #6
   113ac:	andeq	r1, r1, r4, asr #6
   113b0:	andeq	r1, r1, r4, asr #6
   113b4:	andeq	r1, r1, r4, asr #6
   113b8:	andeq	r1, r1, r4, lsl r4
   113bc:	andeq	r1, r1, r4, asr #6
   113c0:	andeq	r1, r1, r4, asr #6
   113c4:	andeq	r1, r1, r4, asr #6
   113c8:	andeq	r1, r1, r4, asr #6
   113cc:	andeq	r1, r1, r4, asr #6
   113d0:	andeq	r1, r1, r4, asr #6
   113d4:	andeq	r1, r1, r4, asr #6
   113d8:	andeq	r1, r1, r4, asr #6
   113dc:	andeq	r1, r1, r4, lsl #8
   113e0:	andeq	r1, r1, r4, asr #6
   113e4:	andeq	r1, r1, r4, asr #6
   113e8:	andeq	r1, r1, r4, asr #6
   113ec:	andeq	r1, r1, r4, asr #6
   113f0:	strdeq	r1, [r1], -r4
   113f4:	ldr	r3, [r4, #128]	; 0x80
   113f8:	add	r3, r3, #1
   113fc:	str	r3, [r4, #128]	; 0x80
   11400:	b	11344 <__assert_fail@plt+0x74>
   11404:	ldr	r3, [r4, #128]	; 0x80
   11408:	sub	r3, r3, #1
   1140c:	str	r3, [r4, #128]	; 0x80
   11410:	b	11344 <__assert_fail@plt+0x74>
   11414:	bl	12108 <__assert_fail@plt+0xe38>
   11418:	mov	r2, #5
   1141c:	movw	r1, #23284	; 0x5af4
   11420:	mov	r0, #0
   11424:	movt	r1, #1
   11428:	bl	110cc <dcgettext@plt>
   1142c:	mov	r1, r0
   11430:	mov	r0, #1
   11434:	bl	11210 <__printf_chk@plt>
   11438:	mov	r2, #5
   1143c:	movw	r1, #23340	; 0x5b2c
   11440:	mov	r0, #0
   11444:	movt	r1, #1
   11448:	bl	110cc <dcgettext@plt>
   1144c:	mov	r1, r0
   11450:	mov	r0, #1
   11454:	bl	11210 <__printf_chk@plt>
   11458:	mov	r2, #5
   1145c:	movw	r1, #23680	; 0x5c80
   11460:	mov	r0, #0
   11464:	movt	r1, #1
   11468:	bl	110cc <dcgettext@plt>
   1146c:	mov	r1, r0
   11470:	mov	r0, #1
   11474:	bl	11210 <__printf_chk@plt>
   11478:	mov	r0, #0
   1147c:	ldr	ip, [sp, #12]
   11480:	ldr	r2, [sp, #132]	; 0x84
   11484:	ldr	r3, [ip]
   11488:	cmp	r2, r3
   1148c:	bne	11fb8 <__assert_fail@plt+0xce8>
   11490:	add	sp, sp, #140	; 0x8c
   11494:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11498:	bl	12108 <__assert_fail@plt+0xe38>
   1149c:	mov	r0, #0
   114a0:	b	1147c <__assert_fail@plt+0x1ac>
   114a4:	movw	r3, #28924	; 0x70fc
   114a8:	movt	r3, #2
   114ac:	ldr	r2, [r3, #128]	; 0x80
   114b0:	cmp	r2, #1
   114b4:	ble	11608 <__assert_fail@plt+0x338>
   114b8:	movw	ip, #29080	; 0x7198
   114bc:	movt	ip, #2
   114c0:	mov	r3, #0
   114c4:	str	r3, [ip, #4]
   114c8:	movw	r3, #29064	; 0x7188
   114cc:	movt	r3, #2
   114d0:	ldr	r3, [r3]
   114d4:	cmp	r5, r3
   114d8:	ble	11f08 <__assert_fail@plt+0xc38>
   114dc:	mov	ip, #0
   114e0:	rsb	r5, r3, r5
   114e4:	add	r6, r6, r3, lsl #2
   114e8:	str	ip, [sp, #16]
   114ec:	str	r5, [sp, #40]	; 0x28
   114f0:	movw	ip, #29080	; 0x7198
   114f4:	str	r6, [sp, #36]	; 0x24
   114f8:	movt	ip, #2
   114fc:	str	ip, [sp, #28]
   11500:	movw	ip, #24064	; 0x5e00
   11504:	movt	ip, #1
   11508:	str	ip, [sp, #44]	; 0x2c
   1150c:	movw	ip, #8512	; 0x2140
   11510:	movt	ip, #1
   11514:	str	ip, [sp, #24]
   11518:	mov	ip, #0
   1151c:	str	ip, [sp, #32]
   11520:	ldr	r1, [sp, #36]	; 0x24
   11524:	mov	r8, #0
   11528:	ldr	ip, [sp, #16]
   1152c:	ldr	ip, [r1, ip, lsl #2]
   11530:	movw	r1, #23784	; 0x5ce8
   11534:	movt	r1, #1
   11538:	str	ip, [sp, #20]
   1153c:	ldr	ip, [sp, #28]
   11540:	ldr	r0, [sp, #20]
   11544:	str	r8, [ip]
   11548:	bl	1127c <fopen64@plt>
   1154c:	mov	r1, #16
   11550:	mov	r6, r0
   11554:	mov	r0, #1
   11558:	bl	11024 <calloc@plt>
   1155c:	mov	r1, #424	; 0x1a8
   11560:	str	r0, [sp, #8]
   11564:	mov	r0, #5
   11568:	bl	11024 <calloc@plt>
   1156c:	ldr	ip, [sp, #8]
   11570:	cmp	r6, r8
   11574:	mov	r2, #5
   11578:	str	r8, [ip, #8]
   1157c:	stm	ip, {r0, r2}
   11580:	beq	11ed4 <__assert_fail@plt+0xc04>
   11584:	movw	r1, #23824	; 0x5d10
   11588:	mov	r0, r8
   1158c:	movt	r1, #1
   11590:	mov	r4, #0
   11594:	bl	110cc <dcgettext@plt>
   11598:	ldr	r2, [sp, #20]
   1159c:	mov	r5, #0
   115a0:	mov	r1, r0
   115a4:	mov	r0, #1
   115a8:	bl	11210 <__printf_chk@plt>
   115ac:	add	r0, sp, #68	; 0x44
   115b0:	bl	112ac <ogg_sync_init@plt>
   115b4:	add	r0, sp, #68	; 0x44
   115b8:	add	r1, sp, #52	; 0x34
   115bc:	bl	11240 <ogg_sync_pageseek@plt>
   115c0:	subs	r7, r0, #0
   115c4:	bgt	11648 <__assert_fail@plt+0x378>
   115c8:	bne	11620 <__assert_fail@plt+0x350>
   115cc:	movw	r1, #4500	; 0x1194
   115d0:	add	r0, sp, #68	; 0x44
   115d4:	bl	11114 <ogg_sync_buffer@plt>
   115d8:	mov	r1, #1
   115dc:	movw	r2, #4500	; 0x1194
   115e0:	mov	r3, r6
   115e4:	bl	1112c <fread@plt>
   115e8:	subs	r9, r0, #0
   115ec:	ble	11950 <__assert_fail@plt+0x680>
   115f0:	mov	r1, r9
   115f4:	add	r0, sp, #68	; 0x44
   115f8:	bl	11144 <ogg_sync_wrote@plt>
   115fc:	adds	r4, r4, r9
   11600:	adc	r5, r5, r9, asr #31
   11604:	b	115b4 <__assert_fail@plt+0x2e4>
   11608:	beq	114c8 <__assert_fail@plt+0x1f8>
   1160c:	cmp	r2, #0
   11610:	mov	r2, #0
   11614:	str	r2, [r3, #4]
   11618:	strne	r2, [r3]
   1161c:	b	114c8 <__assert_fail@plt+0x1f8>
   11620:	mov	r2, #5
   11624:	movw	r1, #24776	; 0x60c8
   11628:	mov	r0, #0
   1162c:	movt	r1, #1
   11630:	bl	110cc <dcgettext@plt>
   11634:	rsb	r1, r7, #0
   11638:	mov	r2, r4
   1163c:	mov	r3, r5
   11640:	bl	12194 <__assert_fail@plt+0xec4>
   11644:	b	115b4 <__assert_fail@plt+0x2e4>
   11648:	add	r0, sp, #52	; 0x34
   1164c:	bl	11270 <ogg_page_serialno@plt>
   11650:	ldr	ip, [sp, #8]
   11654:	ldr	r9, [ip, #8]
   11658:	cmp	r9, #0
   1165c:	mov	sl, r0
   11660:	ble	11e50 <__assert_fail@plt+0xb80>
   11664:	ldr	r0, [ip]
   11668:	ldr	r2, [r0, #48]	; 0x30
   1166c:	cmp	sl, r2
   11670:	beq	11874 <__assert_fail@plt+0x5a4>
   11674:	add	r2, r0, #424	; 0x1a8
   11678:	mov	r1, #0
   1167c:	b	11694 <__assert_fail@plt+0x3c4>
   11680:	mov	r8, r2
   11684:	add	r2, r2, #424	; 0x1a8
   11688:	ldr	r3, [r2, #-376]	; 0xfffffe88
   1168c:	cmp	sl, r3
   11690:	beq	11878 <__assert_fail@plt+0x5a8>
   11694:	add	r1, r1, #1
   11698:	cmp	r1, r9
   1169c:	bne	11680 <__assert_fail@plt+0x3b0>
   116a0:	mov	lr, #424	; 0x1a8
   116a4:	mov	r2, r0
   116a8:	mla	lr, lr, r9, r0
   116ac:	mov	ip, #0
   116b0:	ldr	r3, [r2, #36]	; 0x24
   116b4:	add	r2, r2, #424	; 0x1a8
   116b8:	cmp	r3, #0
   116bc:	addeq	ip, ip, #1
   116c0:	cmp	r2, lr
   116c4:	bne	116b0 <__assert_fail@plt+0x3e0>
   116c8:	cmp	ip, #0
   116cc:	beq	116e8 <__assert_fail@plt+0x418>
   116d0:	ldr	ip, [sp, #8]
   116d4:	ldr	r2, [ip, #12]
   116d8:	cmp	r2, #0
   116dc:	moveq	fp, #2
   116e0:	moveq	r3, #1
   116e4:	beq	116f0 <__assert_fail@plt+0x420>
   116e8:	mov	fp, #0
   116ec:	mov	r3, fp
   116f0:	ldr	ip, [sp, #8]
   116f4:	mov	r1, #1
   116f8:	ldr	r2, [ip, #4]
   116fc:	str	r1, [ip, #12]
   11700:	cmp	r2, r9
   11704:	bge	11b18 <__assert_fail@plt+0x848>
   11708:	mov	r7, #424	; 0x1a8
   1170c:	mla	r7, r7, r9, r0
   11710:	ldr	ip, [sp, #8]
   11714:	add	r8, r7, #56	; 0x38
   11718:	mov	r2, #1
   1171c:	str	r3, [r7, #8]
   11720:	add	r9, r9, #1
   11724:	str	r2, [r7, #20]
   11728:	mov	r1, sl
   1172c:	str	r9, [ip, #8]
   11730:	mov	r0, r8
   11734:	str	r9, [r7, #40]	; 0x28
   11738:	str	fp, [r7, #12]
   1173c:	bl	1124c <ogg_stream_init@plt>
   11740:	add	r1, sp, #52	; 0x34
   11744:	mov	r0, r8
   11748:	bl	110fc <ogg_stream_pagein@plt>
   1174c:	mov	r0, r8
   11750:	add	r1, sp, #96	; 0x60
   11754:	bl	110e4 <ogg_stream_packetout@plt>
   11758:	cmp	r0, #0
   1175c:	ble	11c0c <__assert_fail@plt+0x93c>
   11760:	ldr	r9, [sp, #100]	; 0x64
   11764:	cmp	r9, #6
   11768:	bgt	11a48 <__assert_fail@plt+0x778>
   1176c:	cmp	r9, #4
   11770:	bgt	11b9c <__assert_fail@plt+0x8cc>
   11774:	beq	11d68 <__assert_fail@plt+0xa98>
   11778:	ldr	ip, [sp, #44]	; 0x2c
   1177c:	mov	r2, #0
   11780:	str	r2, [r7, #4]
   11784:	str	ip, [r7, #44]	; 0x2c
   11788:	ldr	ip, [sp, #24]
   1178c:	str	ip, [r7]
   11790:	add	r1, sp, #96	; 0x60
   11794:	mov	r0, r8
   11798:	bl	110e4 <ogg_stream_packetout@plt>
   1179c:	cmp	r0, #0
   117a0:	ble	117c0 <__assert_fail@plt+0x4f0>
   117a4:	movw	r1, #24072	; 0x5e08
   117a8:	mov	r0, #0
   117ac:	movt	r1, #1
   117b0:	mov	r2, #5
   117b4:	bl	110cc <dcgettext@plt>
   117b8:	ldr	r1, [r7, #40]	; 0x28
   117bc:	bl	12194 <__assert_fail@plt+0xec4>
   117c0:	mov	r0, r8
   117c4:	bl	11078 <ogg_stream_clear@plt>
   117c8:	mov	r1, sl
   117cc:	mov	r0, r8
   117d0:	bl	1124c <ogg_stream_init@plt>
   117d4:	add	r0, sp, #52	; 0x34
   117d8:	bl	11048 <ogg_page_bos@plt>
   117dc:	str	r0, [r7, #32]
   117e0:	add	r0, sp, #52	; 0x34
   117e4:	bl	112b8 <ogg_page_eos@plt>
   117e8:	sub	r2, sl, #1
   117ec:	cmn	r2, #3
   117f0:	str	sl, [r7, #48]	; 0x30
   117f4:	str	r0, [r7, #36]	; 0x24
   117f8:	bhi	11b48 <__assert_fail@plt+0x878>
   117fc:	ldr	r3, [r7, #8]
   11800:	mov	r8, r7
   11804:	cmp	r3, #0
   11808:	bne	1189c <__assert_fail@plt+0x5cc>
   1180c:	ldr	r0, [r8, #20]
   11810:	cmp	r0, #0
   11814:	bne	11904 <__assert_fail@plt+0x634>
   11818:	ldr	r3, [r8, #32]
   1181c:	cmp	r3, #0
   11820:	bne	11afc <__assert_fail@plt+0x82c>
   11824:	ldr	r7, [r8, #24]
   11828:	add	r0, sp, #52	; 0x34
   1182c:	add	r3, r7, #1
   11830:	str	r3, [r8, #24]
   11834:	bl	11084 <ogg_page_pageno@plt>
   11838:	cmp	r7, r0
   1183c:	beq	11a3c <__assert_fail@plt+0x76c>
   11840:	ldr	r0, [r8, #28]
   11844:	cmp	r0, #0
   11848:	beq	11ac0 <__assert_fail@plt+0x7f0>
   1184c:	add	r0, sp, #52	; 0x34
   11850:	bl	11084 <ogg_page_pageno@plt>
   11854:	mov	r3, #1
   11858:	str	r3, [r8, #28]
   1185c:	str	r0, [r8, #24]
   11860:	ldr	r3, [r8, #8]
   11864:	cmp	r3, #0
   11868:	beq	119e0 <__assert_fail@plt+0x710>
   1186c:	mov	r8, #1
   11870:	b	115b4 <__assert_fail@plt+0x2e4>
   11874:	mov	r8, r0
   11878:	ldr	r2, [r8, #36]	; 0x24
   1187c:	mov	r1, #0
   11880:	ldr	ip, [sp, #8]
   11884:	cmp	r2, r1
   11888:	str	r1, [ip, #12]
   1188c:	beq	11b74 <__assert_fail@plt+0x8a4>
   11890:	mov	r3, #1
   11894:	str	r3, [r8, #8]
   11898:	str	r3, [r8, #12]
   1189c:	ldr	r0, [r8, #16]
   118a0:	cmp	r0, #0
   118a4:	bne	1180c <__assert_fail@plt+0x53c>
   118a8:	ldr	r3, [r8, #12]
   118ac:	cmp	r3, #1
   118b0:	beq	11bf4 <__assert_fail@plt+0x924>
   118b4:	cmp	r3, #2
   118b8:	bne	11bdc <__assert_fail@plt+0x90c>
   118bc:	movw	r1, #24280	; 0x5ed8
   118c0:	mov	r2, #5
   118c4:	movt	r1, #1
   118c8:	bl	110cc <dcgettext@plt>
   118cc:	mov	r7, r0
   118d0:	mov	r2, #5
   118d4:	movw	r1, #24376	; 0x5f38
   118d8:	mov	r0, #0
   118dc:	movt	r1, #1
   118e0:	bl	110cc <dcgettext@plt>
   118e4:	mov	r2, r7
   118e8:	ldr	r1, [r8, #40]	; 0x28
   118ec:	bl	12194 <__assert_fail@plt+0xec4>
   118f0:	ldr	r3, [r8, #20]
   118f4:	mov	r2, #1
   118f8:	str	r2, [r8, #16]
   118fc:	cmp	r3, #0
   11900:	beq	1186c <__assert_fail@plt+0x59c>
   11904:	mov	r2, #5
   11908:	movw	r1, #24472	; 0x5f98
   1190c:	mov	r0, #0
   11910:	movt	r1, #1
   11914:	bl	110cc <dcgettext@plt>
   11918:	ldr	r1, [r8, #40]	; 0x28
   1191c:	ldr	r2, [r8, #48]	; 0x30
   11920:	ldr	r3, [r8, #44]	; 0x2c
   11924:	bl	1221c <__assert_fail@plt+0xf4c>
   11928:	ldr	r0, [r8, #32]
   1192c:	cmp	r0, #0
   11930:	bne	11824 <__assert_fail@plt+0x554>
   11934:	mov	r2, #5
   11938:	movw	r1, #24524	; 0x5fcc
   1193c:	movt	r1, #1
   11940:	bl	110cc <dcgettext@plt>
   11944:	ldr	r1, [r8, #40]	; 0x28
   11948:	bl	12194 <__assert_fail@plt+0xec4>
   1194c:	b	11824 <__assert_fail@plt+0x554>
   11950:	mov	r1, r7
   11954:	add	r0, sp, #68	; 0x44
   11958:	bl	11144 <ogg_sync_wrote@plt>
   1195c:	cmp	r8, #0
   11960:	beq	11eb4 <__assert_fail@plt+0xbe4>
   11964:	ldr	ip, [sp, #8]
   11968:	ldr	r5, [ip, #8]
   1196c:	cmp	r5, #0
   11970:	ldrgt	ip, [sp, #8]
   11974:	movgt	r7, #0
   11978:	ldrgt	r4, [ip]
   1197c:	addgt	r4, r4, #56	; 0x38
   11980:	bgt	119a0 <__assert_fail@plt+0x6d0>
   11984:	b	11da0 <__assert_fail@plt+0xad0>
   11988:	mov	r0, r4
   1198c:	add	r7, r7, #1
   11990:	bl	11078 <ogg_stream_clear@plt>
   11994:	cmp	r7, r5
   11998:	add	r4, r4, #424	; 0x1a8
   1199c:	beq	11da0 <__assert_fail@plt+0xad0>
   119a0:	ldr	r0, [r4, #-20]	; 0xffffffec
   119a4:	sub	r8, r4, #56	; 0x38
   119a8:	cmp	r0, #0
   119ac:	bne	11988 <__assert_fail@plt+0x6b8>
   119b0:	mov	r2, #5
   119b4:	movw	r1, #24932	; 0x6164
   119b8:	movt	r1, #1
   119bc:	bl	110cc <dcgettext@plt>
   119c0:	ldr	r1, [r4, #-16]
   119c4:	bl	12194 <__assert_fail@plt+0xec4>
   119c8:	ldr	r3, [r4, #-52]	; 0xffffffcc
   119cc:	cmp	r3, #0
   119d0:	beq	11988 <__assert_fail@plt+0x6b8>
   119d4:	mov	r0, r8
   119d8:	blx	r3
   119dc:	b	11988 <__assert_fail@plt+0x6b8>
   119e0:	ldr	r3, [r8]
   119e4:	mov	r0, r8
   119e8:	add	r1, sp, #52	; 0x34
   119ec:	blx	r3
   119f0:	ldr	r3, [r8, #36]	; 0x24
   119f4:	cmp	r3, #0
   119f8:	beq	1186c <__assert_fail@plt+0x59c>
   119fc:	ldr	r3, [r8, #4]
   11a00:	cmp	r3, #0
   11a04:	beq	11a10 <__assert_fail@plt+0x740>
   11a08:	mov	r0, r8
   11a0c:	blx	r3
   11a10:	mov	r2, #5
   11a14:	movw	r1, #24748	; 0x60ac
   11a18:	mov	r0, #0
   11a1c:	movt	r1, #1
   11a20:	bl	110cc <dcgettext@plt>
   11a24:	ldr	r1, [r8, #40]	; 0x28
   11a28:	bl	1221c <__assert_fail@plt+0xf4c>
   11a2c:	mov	r3, #1
   11a30:	str	r3, [r8, #8]
   11a34:	str	r3, [r8, #12]
   11a38:	b	1186c <__assert_fail@plt+0x59c>
   11a3c:	mov	r3, #0
   11a40:	str	r3, [r8, #28]
   11a44:	b	11860 <__assert_fail@plt+0x590>
   11a48:	ldr	fp, [sp, #96]	; 0x60
   11a4c:	movw	r1, #23908	; 0x5d64
   11a50:	mov	r2, #7
   11a54:	movt	r1, #1
   11a58:	mov	r0, fp
   11a5c:	bl	110b4 <memcmp@plt>
   11a60:	cmp	r0, #0
   11a64:	beq	11c48 <__assert_fail@plt+0x978>
   11a68:	movw	r1, #23924	; 0x5d74
   11a6c:	mov	r0, fp
   11a70:	movt	r1, #1
   11a74:	mov	r2, #7
   11a78:	bl	110b4 <memcmp@plt>
   11a7c:	cmp	r0, #0
   11a80:	beq	11d24 <__assert_fail@plt+0xa54>
   11a84:	cmp	r9, #7
   11a88:	mov	r0, fp
   11a8c:	beq	11f64 <__assert_fail@plt+0xc94>
   11a90:	ldr	r1, [pc, #1316]	; 11fbc <__assert_fail@plt+0xcec>
   11a94:	mov	r2, #8
   11a98:	bl	110b4 <memcmp@plt>
   11a9c:	cmp	r0, #0
   11aa0:	bne	11ba0 <__assert_fail@plt+0x8d0>
   11aa4:	ldr	ip, [sp, #24]
   11aa8:	movw	r2, #23940	; 0x5d84
   11aac:	str	r0, [r7, #4]
   11ab0:	movt	r2, #1
   11ab4:	str	r2, [r7, #44]	; 0x2c
   11ab8:	str	ip, [r7]
   11abc:	b	11790 <__assert_fail@plt+0x4c0>
   11ac0:	mov	r2, #5
   11ac4:	movw	r1, #24640	; 0x6040
   11ac8:	movt	r1, #1
   11acc:	bl	110cc <dcgettext@plt>
   11ad0:	ldr	r7, [r8, #40]	; 0x28
   11ad4:	mov	r9, r0
   11ad8:	add	r0, sp, #52	; 0x34
   11adc:	bl	11084 <ogg_page_pageno@plt>
   11ae0:	ldr	r3, [r8, #24]
   11ae4:	mov	r1, r7
   11ae8:	sub	r3, r3, #1
   11aec:	mov	r2, r0
   11af0:	mov	r0, r9
   11af4:	bl	12194 <__assert_fail@plt+0xec4>
   11af8:	b	1184c <__assert_fail@plt+0x57c>
   11afc:	mov	r2, #5
   11b00:	movw	r1, #24576	; 0x6000
   11b04:	movt	r1, #1
   11b08:	bl	110cc <dcgettext@plt>
   11b0c:	ldr	r1, [r8, #40]	; 0x28
   11b10:	bl	12194 <__assert_fail@plt+0xec4>
   11b14:	b	11824 <__assert_fail@plt+0x554>
   11b18:	ldr	ip, [sp, #8]
   11b1c:	add	r1, r2, #5
   11b20:	mov	r7, #424	; 0x1a8
   11b24:	str	r1, [ip, #4]
   11b28:	mul	r1, r7, r1
   11b2c:	str	r3, [sp, #4]
   11b30:	bl	110f0 <realloc@plt>
   11b34:	ldr	ip, [sp, #8]
   11b38:	ldr	r3, [sp, #4]
   11b3c:	mla	r7, r7, r9, r0
   11b40:	str	r0, [ip]
   11b44:	b	11710 <__assert_fail@plt+0x440>
   11b48:	mov	r2, #5
   11b4c:	movw	r1, #24144	; 0x5e50
   11b50:	mov	r0, #0
   11b54:	movt	r1, #1
   11b58:	bl	110cc <dcgettext@plt>
   11b5c:	ldr	r1, [r7, #40]	; 0x28
   11b60:	ldr	r2, [r7, #48]	; 0x30
   11b64:	mov	r8, r7
   11b68:	bl	1221c <__assert_fail@plt+0xf4c>
   11b6c:	ldr	r3, [r7, #8]
   11b70:	b	11804 <__assert_fail@plt+0x534>
   11b74:	str	r2, [r8, #20]
   11b78:	add	r0, sp, #52	; 0x34
   11b7c:	bl	11048 <ogg_page_bos@plt>
   11b80:	str	r0, [r8, #32]
   11b84:	add	r0, sp, #52	; 0x34
   11b88:	bl	112b8 <ogg_page_eos@plt>
   11b8c:	str	sl, [r8, #48]	; 0x30
   11b90:	ldr	r3, [r8, #8]
   11b94:	str	r0, [r8, #36]	; 0x24
   11b98:	b	11804 <__assert_fail@plt+0x534>
   11b9c:	ldr	fp, [sp, #96]	; 0x60
   11ba0:	movw	r1, #23948	; 0x5d8c
   11ba4:	mov	r0, fp
   11ba8:	movt	r1, #1
   11bac:	mov	r2, #5
   11bb0:	bl	110b4 <memcmp@plt>
   11bb4:	cmp	r0, #0
   11bb8:	bne	11c94 <__assert_fail@plt+0x9c4>
   11bbc:	ldr	ip, [sp, #24]
   11bc0:	movw	r2, #23956	; 0x5d94
   11bc4:	movt	r2, #1
   11bc8:	str	r2, [r7, #44]	; 0x2c
   11bcc:	mov	r2, #0
   11bd0:	str	r2, [r7, #4]
   11bd4:	str	ip, [r7]
   11bd8:	b	11790 <__assert_fail@plt+0x4c0>
   11bdc:	movw	r1, #24360	; 0x5f28
   11be0:	mov	r2, #5
   11be4:	movt	r1, #1
   11be8:	bl	110cc <dcgettext@plt>
   11bec:	mov	r7, r0
   11bf0:	b	118d0 <__assert_fail@plt+0x600>
   11bf4:	movw	r1, #24240	; 0x5eb0
   11bf8:	mov	r2, #5
   11bfc:	movt	r1, #1
   11c00:	bl	110cc <dcgettext@plt>
   11c04:	mov	r7, r0
   11c08:	b	118d0 <__assert_fail@plt+0x600>
   11c0c:	mov	r2, #5
   11c10:	movw	r1, #23852	; 0x5d2c
   11c14:	mov	r0, #0
   11c18:	movt	r1, #1
   11c1c:	bl	110cc <dcgettext@plt>
   11c20:	bl	12194 <__assert_fail@plt+0xec4>
   11c24:	movw	r1, #23900	; 0x5d5c
   11c28:	movw	r2, #8452	; 0x2104
   11c2c:	movt	r1, #1
   11c30:	movt	r2, #1
   11c34:	str	r1, [r7, #44]	; 0x2c
   11c38:	str	r2, [r7]
   11c3c:	mov	r2, #0
   11c40:	str	r2, [r7, #4]
   11c44:	b	11790 <__assert_fail@plt+0x4c0>
   11c48:	mov	r1, #80	; 0x50
   11c4c:	mov	r0, #1
   11c50:	movw	r2, #23916	; 0x5d6c
   11c54:	movt	r2, #1
   11c58:	str	r2, [r7, #44]	; 0x2c
   11c5c:	movw	r2, #11648	; 0x2d80
   11c60:	movt	r2, #1
   11c64:	str	r2, [r7]
   11c68:	movw	r2, #8856	; 0x2298
   11c6c:	movt	r2, #1
   11c70:	str	r2, [r7, #4]
   11c74:	bl	11024 <calloc@plt>
   11c78:	mov	r9, r0
   11c7c:	str	r0, [r7, #416]	; 0x1a0
   11c80:	add	r0, r0, #32
   11c84:	bl	110c0 <vorbis_comment_init@plt>
   11c88:	mov	r0, r9
   11c8c:	bl	1109c <vorbis_info_init@plt>
   11c90:	b	11790 <__assert_fail@plt+0x4c0>
   11c94:	cmp	r9, #7
   11c98:	ble	11f40 <__assert_fail@plt+0xc70>
   11c9c:	movw	r1, #23988	; 0x5db4
   11ca0:	mov	r0, fp
   11ca4:	movt	r1, #1
   11ca8:	mov	r2, #8
   11cac:	bl	110b4 <memcmp@plt>
   11cb0:	cmp	r0, #0
   11cb4:	bne	11cd4 <__assert_fail@plt+0xa04>
   11cb8:	ldr	ip, [sp, #24]
   11cbc:	movw	r2, #24000	; 0x5dc0
   11cc0:	str	r0, [r7, #4]
   11cc4:	movt	r2, #1
   11cc8:	str	r2, [r7, #44]	; 0x2c
   11ccc:	str	ip, [r7]
   11cd0:	b	11790 <__assert_fail@plt+0x4c0>
   11cd4:	mov	r0, fp
   11cd8:	ldr	r1, [pc, #736]	; 11fc0 <__assert_fail@plt+0xcf0>
   11cdc:	mov	r2, #8
   11ce0:	bl	110b4 <memcmp@plt>
   11ce4:	cmp	r0, #0
   11ce8:	beq	11e34 <__assert_fail@plt+0xb64>
   11cec:	mov	r0, fp
   11cf0:	ldr	r1, [pc, #716]	; 11fc4 <__assert_fail@plt+0xcf4>
   11cf4:	mov	r2, #5
   11cf8:	bl	110b4 <memcmp@plt>
   11cfc:	cmp	r0, #0
   11d00:	bne	11dfc <__assert_fail@plt+0xb2c>
   11d04:	ldr	ip, [sp, #24]
   11d08:	movw	r2, #24020	; 0x5dd4
   11d0c:	movt	r2, #1
   11d10:	str	r2, [r7, #44]	; 0x2c
   11d14:	mov	r2, #0
   11d18:	str	r2, [r7, #4]
   11d1c:	str	ip, [r7]
   11d20:	b	11790 <__assert_fail@plt+0x4c0>
   11d24:	mov	r0, #1
   11d28:	movw	r1, #23932	; 0x5d7c
   11d2c:	movw	r2, #12784	; 0x31f0
   11d30:	movt	r1, #1
   11d34:	movt	r2, #1
   11d38:	str	r1, [r7, #44]	; 0x2c
   11d3c:	str	r2, [r7]
   11d40:	mov	r1, #160	; 0xa0
   11d44:	movw	r2, #9128	; 0x23a8
   11d48:	movt	r2, #1
   11d4c:	str	r2, [r7, #4]
   11d50:	bl	11024 <calloc@plt>
   11d54:	mvn	r2, #0
   11d58:	mvn	r3, #0
   11d5c:	str	r0, [r7, #416]	; 0x1a0
   11d60:	strd	r2, [r0, #152]	; 0x98
   11d64:	b	11790 <__assert_fail@plt+0x4c0>
   11d68:	mov	r2, r9
   11d6c:	movw	r1, #23964	; 0x5d9c
   11d70:	ldr	r0, [sp, #96]	; 0x60
   11d74:	movt	r1, #1
   11d78:	bl	110b4 <memcmp@plt>
   11d7c:	cmp	r0, #0
   11d80:	bne	11778 <__assert_fail@plt+0x4a8>
   11d84:	ldr	ip, [sp, #24]
   11d88:	movw	r2, #23972	; 0x5da4
   11d8c:	str	r0, [r7, #4]
   11d90:	movt	r2, #1
   11d94:	str	r2, [r7, #44]	; 0x2c
   11d98:	str	ip, [r7]
   11d9c:	b	11790 <__assert_fail@plt+0x4c0>
   11da0:	ldr	ip, [sp, #8]
   11da4:	ldr	r0, [ip]
   11da8:	bl	11090 <free@plt>
   11dac:	ldr	r0, [sp, #8]
   11db0:	bl	11090 <free@plt>
   11db4:	add	r0, sp, #68	; 0x44
   11db8:	bl	1103c <ogg_sync_clear@plt>
   11dbc:	mov	r0, r6
   11dc0:	bl	11234 <fclose@plt>
   11dc4:	ldr	ip, [sp, #28]
   11dc8:	ldr	r1, [sp, #40]	; 0x28
   11dcc:	ldr	r0, [ip]
   11dd0:	ldr	ip, [sp, #16]
   11dd4:	cmp	r0, #0
   11dd8:	add	ip, ip, #1
   11ddc:	str	ip, [sp, #16]
   11de0:	ldr	ip, [sp, #32]
   11de4:	moveq	r0, ip
   11de8:	ldr	ip, [sp, #16]
   11dec:	cmp	ip, r1
   11df0:	beq	1147c <__assert_fail@plt+0x1ac>
   11df4:	str	r0, [sp, #32]
   11df8:	b	11520 <__assert_fail@plt+0x250>
   11dfc:	movw	r1, #24028	; 0x5ddc
   11e00:	mov	r0, fp
   11e04:	movt	r1, #1
   11e08:	mov	r2, #8
   11e0c:	bl	110b4 <memcmp@plt>
   11e10:	cmp	r0, #0
   11e14:	bne	11e64 <__assert_fail@plt+0xb94>
   11e18:	ldr	ip, [sp, #24]
   11e1c:	movw	r2, #24040	; 0x5de8
   11e20:	str	r0, [r7, #4]
   11e24:	movt	r2, #1
   11e28:	str	r2, [r7, #44]	; 0x2c
   11e2c:	str	ip, [r7]
   11e30:	b	11790 <__assert_fail@plt+0x4c0>
   11e34:	ldr	ip, [sp, #24]
   11e38:	movw	r2, #24008	; 0x5dc8
   11e3c:	str	r0, [r7, #4]
   11e40:	movt	r2, #1
   11e44:	str	r2, [r7, #44]	; 0x2c
   11e48:	str	ip, [r7]
   11e4c:	b	11790 <__assert_fail@plt+0x4c0>
   11e50:	ldr	ip, [sp, #8]
   11e54:	mov	fp, #0
   11e58:	mov	r3, fp
   11e5c:	ldr	r0, [ip]
   11e60:	b	116f0 <__assert_fail@plt+0x420>
   11e64:	mov	r0, fp
   11e68:	ldr	r1, [pc, #344]	; 11fc8 <__assert_fail@plt+0xcf8>
   11e6c:	mov	r2, #8
   11e70:	bl	110b4 <memcmp@plt>
   11e74:	cmp	r0, #0
   11e78:	bne	11778 <__assert_fail@plt+0x4a8>
   11e7c:	movw	r2, #24056	; 0x5df8
   11e80:	movw	r1, #9480	; 0x2508
   11e84:	movt	r2, #1
   11e88:	movt	r1, #1
   11e8c:	str	r2, [r7, #44]	; 0x2c
   11e90:	mov	r0, #1
   11e94:	str	r1, [r7]
   11e98:	movw	r2, #8448	; 0x2100
   11e9c:	mov	r1, #80	; 0x50
   11ea0:	movt	r2, #1
   11ea4:	str	r2, [r7, #4]
   11ea8:	bl	11024 <calloc@plt>
   11eac:	str	r0, [r7, #416]	; 0x1a0
   11eb0:	b	11790 <__assert_fail@plt+0x4c0>
   11eb4:	mov	r0, r8
   11eb8:	mov	r2, #5
   11ebc:	movw	r1, #24868	; 0x6124
   11ec0:	movt	r1, #1
   11ec4:	bl	110cc <dcgettext@plt>
   11ec8:	ldr	r1, [sp, #20]
   11ecc:	bl	12878 <__assert_fail@plt+0x15a8>
   11ed0:	b	11964 <__assert_fail@plt+0x694>
   11ed4:	mov	r0, r6
   11ed8:	movw	r1, #23788	; 0x5cec
   11edc:	movt	r1, #1
   11ee0:	bl	110cc <dcgettext@plt>
   11ee4:	mov	r4, r0
   11ee8:	bl	111ec <__errno_location@plt>
   11eec:	ldr	r0, [r0]
   11ef0:	bl	11180 <strerror@plt>
   11ef4:	ldr	r1, [sp, #20]
   11ef8:	mov	r2, r0
   11efc:	mov	r0, r4
   11f00:	bl	12878 <__assert_fail@plt+0x15a8>
   11f04:	b	11dc4 <__assert_fail@plt+0xaf4>
   11f08:	movw	r3, #29068	; 0x718c
   11f0c:	movt	r3, #2
   11f10:	mov	r2, #5
   11f14:	movw	r1, #23732	; 0x5cb4
   11f18:	mov	r0, #0
   11f1c:	movt	r1, #1
   11f20:	ldr	r4, [r3]
   11f24:	bl	110cc <dcgettext@plt>
   11f28:	mov	r1, #1
   11f2c:	mov	r2, r0
   11f30:	mov	r0, r4
   11f34:	bl	1121c <__fprintf_chk@plt>
   11f38:	mov	r0, #1
   11f3c:	b	1147c <__assert_fail@plt+0x1ac>
   11f40:	cmp	r9, #4
   11f44:	ble	11778 <__assert_fail@plt+0x4a8>
   11f48:	ldr	r0, [sp, #96]	; 0x60
   11f4c:	mov	r2, #5
   11f50:	ldr	r1, [pc, #108]	; 11fc4 <__assert_fail@plt+0xcf4>
   11f54:	bl	110b4 <memcmp@plt>
   11f58:	cmp	r0, #0
   11f5c:	bne	11778 <__assert_fail@plt+0x4a8>
   11f60:	b	11d04 <__assert_fail@plt+0xa34>
   11f64:	movw	r1, #23948	; 0x5d8c
   11f68:	mov	r2, #5
   11f6c:	movt	r1, #1
   11f70:	bl	110b4 <memcmp@plt>
   11f74:	cmp	r0, #0
   11f78:	beq	11bbc <__assert_fail@plt+0x8ec>
   11f7c:	b	11f48 <__assert_fail@plt+0xc78>
   11f80:	movw	r3, #29072	; 0x7190
   11f84:	movt	r3, #2
   11f88:	mov	r2, #5
   11f8c:	movw	r1, #23088	; 0x5a30
   11f90:	mov	r0, #0
   11f94:	movt	r1, #1
   11f98:	ldr	r4, [r3]
   11f9c:	bl	110cc <dcgettext@plt>
   11fa0:	mov	r1, #1
   11fa4:	mov	r2, r0
   11fa8:	mov	r0, r4
   11fac:	bl	1121c <__fprintf_chk@plt>
   11fb0:	mov	r0, #1
   11fb4:	bl	111b0 <exit@plt>
   11fb8:	bl	110d8 <__stack_chk_fail@plt>
   11fbc:	andeq	r4, r1, r0, ror #28
   11fc0:	andeq	r4, r1, ip, ror #28
   11fc4:	andeq	r4, r1, r8, ror lr
   11fc8:	andeq	r4, r1, r0, lsl #29
   11fcc:	mov	fp, #0
   11fd0:	mov	lr, #0
   11fd4:	pop	{r1}		; (ldr r1, [sp], #4)
   11fd8:	mov	r2, sp
   11fdc:	push	{r2}		; (str r2, [sp, #-4]!)
   11fe0:	push	{r0}		; (str r0, [sp, #-4]!)
   11fe4:	ldr	ip, [pc, #16]	; 11ffc <__assert_fail@plt+0xd2c>
   11fe8:	push	{ip}		; (str ip, [sp, #-4]!)
   11fec:	ldr	r0, [pc, #12]	; 12000 <__assert_fail@plt+0xd30>
   11ff0:	ldr	r3, [pc, #12]	; 12004 <__assert_fail@plt+0xd34>
   11ff4:	bl	11174 <__libc_start_main@plt>
   11ff8:	bl	112c4 <abort@plt>
   11ffc:	andeq	r4, r1, r4, lsr lr
   12000:	andeq	r1, r1, r0, ror #5
   12004:	ldrdeq	r4, [r1], -r0
   12008:	ldr	r3, [pc, #20]	; 12024 <__assert_fail@plt+0xd54>
   1200c:	ldr	r2, [pc, #20]	; 12028 <__assert_fail@plt+0xd58>
   12010:	add	r3, pc, r3
   12014:	ldr	r2, [r3, r2]
   12018:	cmp	r2, #0
   1201c:	bxeq	lr
   12020:	b	11198 <__gmon_start__@plt>
   12024:	andeq	r4, r1, r8, ror #31
   12028:	strdeq	r0, [r0], -r4
   1202c:	push	{r3, lr}
   12030:	movw	r0, #29056	; 0x7180
   12034:	ldr	r3, [pc, #36]	; 12060 <__assert_fail@plt+0xd90>
   12038:	movt	r0, #2
   1203c:	rsb	r3, r0, r3
   12040:	cmp	r3, #6
   12044:	popls	{r3, pc}
   12048:	movw	r3, #0
   1204c:	movt	r3, #0
   12050:	cmp	r3, #0
   12054:	popeq	{r3, pc}
   12058:	blx	r3
   1205c:	pop	{r3, pc}
   12060:	andeq	r7, r2, r3, lsl #3
   12064:	push	{r3, lr}
   12068:	movw	r0, #29056	; 0x7180
   1206c:	movw	r3, #29056	; 0x7180
   12070:	movt	r0, #2
   12074:	movt	r3, #2
   12078:	rsb	r3, r0, r3
   1207c:	asr	r3, r3, #2
   12080:	add	r3, r3, r3, lsr #31
   12084:	asrs	r1, r3, #1
   12088:	popeq	{r3, pc}
   1208c:	movw	r2, #0
   12090:	movt	r2, #0
   12094:	cmp	r2, #0
   12098:	popeq	{r3, pc}
   1209c:	blx	r2
   120a0:	pop	{r3, pc}
   120a4:	push	{r4, lr}
   120a8:	movw	r4, #29076	; 0x7194
   120ac:	movt	r4, #2
   120b0:	ldrb	r3, [r4]
   120b4:	cmp	r3, #0
   120b8:	popne	{r4, pc}
   120bc:	bl	1202c <__assert_fail@plt+0xd5c>
   120c0:	mov	r3, #1
   120c4:	strb	r3, [r4]
   120c8:	pop	{r4, pc}
   120cc:	movw	r0, #28396	; 0x6eec
   120d0:	movt	r0, #2
   120d4:	push	{r3, lr}
   120d8:	ldr	r3, [r0]
   120dc:	cmp	r3, #0
   120e0:	beq	120f8 <__assert_fail@plt+0xe28>
   120e4:	movw	r3, #0
   120e8:	movt	r3, #0
   120ec:	cmp	r3, #0
   120f0:	beq	120f8 <__assert_fail@plt+0xe28>
   120f4:	blx	r3
   120f8:	pop	{r3, lr}
   120fc:	b	12064 <__assert_fail@plt+0xd94>
   12100:	bx	lr
   12104:	bx	lr
   12108:	push	{r4, lr}
   1210c:	mov	r2, #5
   12110:	movw	r1, #20108	; 0x4e8c
   12114:	mov	r0, #0
   12118:	movt	r1, #1
   1211c:	bl	110cc <dcgettext@plt>
   12120:	movw	r2, #20128	; 0x4ea0
   12124:	movw	r3, #20144	; 0x4eb0
   12128:	movt	r2, #1
   1212c:	movt	r3, #1
   12130:	pop	{r4, lr}
   12134:	mov	r1, r0
   12138:	mov	r0, #1
   1213c:	b	11210 <__printf_chk@plt>
   12140:	push	{r4, r5, lr}
   12144:	movw	r5, #29056	; 0x7180
   12148:	movt	r5, #2
   1214c:	add	r4, r0, #56	; 0x38
   12150:	sub	sp, sp, #44	; 0x2c
   12154:	ldr	r3, [r5]
   12158:	mov	r0, r4
   1215c:	str	r3, [sp, #36]	; 0x24
   12160:	bl	110fc <ogg_stream_pagein@plt>
   12164:	mov	r0, r4
   12168:	mov	r1, sp
   1216c:	bl	110e4 <ogg_stream_packetout@plt>
   12170:	cmp	r0, #0
   12174:	bgt	12164 <__assert_fail@plt+0xe94>
   12178:	ldr	r2, [sp, #36]	; 0x24
   1217c:	ldr	r3, [r5]
   12180:	cmp	r2, r3
   12184:	bne	12190 <__assert_fail@plt+0xec0>
   12188:	add	sp, sp, #44	; 0x2c
   1218c:	pop	{r4, r5, pc}
   12190:	bl	110d8 <__stack_chk_fail@plt>
   12194:	push	{r0, r1, r2, r3}
   12198:	movw	r3, #28924	; 0x70fc
   1219c:	movt	r3, #2
   121a0:	mov	r1, #1
   121a4:	push	{r4, lr}
   121a8:	movw	r4, #29056	; 0x7180
   121ac:	movt	r4, #2
   121b0:	ldr	r2, [r3]
   121b4:	sub	sp, sp, #8
   121b8:	movw	r3, #29080	; 0x7198
   121bc:	ldr	r0, [r4]
   121c0:	movt	r3, #2
   121c4:	cmp	r2, #0
   121c8:	ldr	r2, [sp, #16]
   121cc:	str	r1, [r3]
   121d0:	str	r0, [sp, #4]
   121d4:	bne	121f8 <__assert_fail@plt+0xf28>
   121d8:	ldr	r2, [sp, #4]
   121dc:	ldr	r3, [r4]
   121e0:	cmp	r2, r3
   121e4:	bne	12218 <__assert_fail@plt+0xf48>
   121e8:	add	sp, sp, #8
   121ec:	pop	{r4, lr}
   121f0:	add	sp, sp, #16
   121f4:	bx	lr
   121f8:	add	ip, sp, #20
   121fc:	movw	r0, #29072	; 0x7190
   12200:	movt	r0, #2
   12204:	str	ip, [sp]
   12208:	mov	r3, ip
   1220c:	ldr	r0, [r0]
   12210:	bl	1118c <__vfprintf_chk@plt>
   12214:	b	121d8 <__assert_fail@plt+0xf08>
   12218:	bl	110d8 <__stack_chk_fail@plt>
   1221c:	push	{r0, r1, r2, r3}
   12220:	movw	r3, #28924	; 0x70fc
   12224:	movt	r3, #2
   12228:	push	{r4, lr}
   1222c:	movw	r4, #29056	; 0x7180
   12230:	movt	r4, #2
   12234:	ldr	r2, [r3, #4]
   12238:	sub	sp, sp, #8
   1223c:	ldr	r3, [r4]
   12240:	cmp	r2, #0
   12244:	ldr	r2, [sp, #16]
   12248:	str	r3, [sp, #4]
   1224c:	bne	12270 <__assert_fail@plt+0xfa0>
   12250:	ldr	r2, [sp, #4]
   12254:	ldr	r3, [r4]
   12258:	cmp	r2, r3
   1225c:	bne	12294 <__assert_fail@plt+0xfc4>
   12260:	add	sp, sp, #8
   12264:	pop	{r4, lr}
   12268:	add	sp, sp, #16
   1226c:	bx	lr
   12270:	add	ip, sp, #20
   12274:	movw	r0, #29072	; 0x7190
   12278:	movt	r0, #2
   1227c:	mov	r1, #1
   12280:	mov	r3, ip
   12284:	str	ip, [sp]
   12288:	ldr	r0, [r0]
   1228c:	bl	1118c <__vfprintf_chk@plt>
   12290:	b	12250 <__assert_fail@plt+0xf80>
   12294:	bl	110d8 <__stack_chk_fail@plt>
   12298:	push	{r4, r5, r6, r7, r8, lr}
   1229c:	vpush	{d8-d9}
   122a0:	mov	r6, r0
   122a4:	ldr	r4, [r0, #416]	; 0x1a0
   122a8:	sub	sp, sp, #24
   122ac:	movw	r5, #34953	; 0x8889
   122b0:	movt	r5, #34952	; 0x8888
   122b4:	ldrd	r0, [r4, #56]	; 0x38
   122b8:	bl	14d70 <__assert_fail@plt+0x3aa0>
   122bc:	vldr	s11, [r4, #8]
   122c0:	vcvt.f64.s32	d8, s11
   122c4:	ldr	r2, [r4, #52]	; 0x34
   122c8:	ldr	r3, [r4, #48]	; 0x30
   122cc:	lsl	r2, r2, #3
   122d0:	vmov	d6, r0, r1
   122d4:	orr	r1, r2, r3, lsr #29
   122d8:	lsl	r0, r3, #3
   122dc:	vdiv.f64	d8, d6, d8
   122e0:	vcvt.s32.f64	s13, d8
   122e4:	vmov	r3, s13
   122e8:	smull	r2, r5, r5, r3
   122ec:	asr	r2, r3, #31
   122f0:	add	r5, r5, r3
   122f4:	rsb	r5, r2, r5, asr #5
   122f8:	lsl	r7, r5, #4
   122fc:	rsb	r8, r7, r5
   12300:	rsb	r7, r5, r7
   12304:	add	r8, r3, r8, lsl #2
   12308:	bl	14d70 <__assert_fail@plt+0x3aa0>
   1230c:	lsl	r7, r7, #2
   12310:	mov	r2, #5
   12314:	vldr	d7, [pc, #124]	; 12398 <__assert_fail@plt+0x10c8>
   12318:	vmov	d6, r0, r1
   1231c:	movw	r1, #20152	; 0x4eb8
   12320:	mov	r0, #0
   12324:	movt	r1, #1
   12328:	vdiv.f64	d9, d6, d8
   1232c:	vmul.f64	d9, d9, d7
   12330:	bl	110cc <dcgettext@plt>
   12334:	vmov	s13, r7
   12338:	vldr	d7, [pc, #96]	; 123a0 <__assert_fail@plt+0x10d0>
   1233c:	ldr	r1, [r6, #40]	; 0x28
   12340:	ldrd	r2, [r4, #48]	; 0x30
   12344:	stm	sp, {r5, r8}
   12348:	vcvt.f64.s32	d5, s13
   1234c:	vstr	d9, [sp, #16]
   12350:	vsub.f64	d8, d8, d5
   12354:	vmov	s11, r8
   12358:	vcvt.f64.s32	d6, s11
   1235c:	vsub.f64	d8, d8, d6
   12360:	vmul.f64	d8, d8, d7
   12364:	vcvt.s32.f64	s16, d8
   12368:	vstr	s16, [sp, #8]
   1236c:	bl	1221c <__assert_fail@plt+0xf4c>
   12370:	add	r0, r4, #32
   12374:	bl	11138 <vorbis_comment_clear@plt>
   12378:	mov	r0, r4
   1237c:	bl	11294 <vorbis_info_clear@plt>
   12380:	ldr	r0, [r6, #416]	; 0x1a0
   12384:	add	sp, sp, #24
   12388:	vpop	{d8-d9}
   1238c:	pop	{r4, r5, r6, r7, r8, lr}
   12390:	b	11090 <free@plt>
   12394:	nop	{0}
   12398:	rscsle	sl, r1, #252, 18	; 0x3f0000
   1239c:	svccc	0x0050624d
   123a0:	andeq	r0, r0, r0
   123a4:	addmi	r4, pc, r0
   123a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   123ac:	vpush	{d8-d9}
   123b0:	mov	r9, r0
   123b4:	ldr	r8, [r0, #416]	; 0x1a0
   123b8:	sub	sp, sp, #28
   123bc:	ldrd	r6, [r8, #128]	; 0x80
   123c0:	ldr	r1, [r8, #60]	; 0x3c
   123c4:	rsb	r0, r1, #32
   123c8:	lsr	r2, r6, r1
   123cc:	subs	ip, r1, #32
   123d0:	orr	r2, r2, r7, lsl r0
   123d4:	asr	r3, r7, r1
   123d8:	orrpl	r2, r2, r7, asr ip
   123dc:	lsl	r5, r3, r1
   123e0:	lsl	r4, r2, r1
   123e4:	orr	r5, r5, r2, lsl ip
   123e8:	mov	r1, r7
   123ec:	orr	r5, r5, r2, lsr r0
   123f0:	mov	r0, r6
   123f4:	subs	r0, r0, r4
   123f8:	sbc	r1, r1, r5
   123fc:	movw	r4, #34953	; 0x8889
   12400:	adds	r0, r0, r2
   12404:	movt	r4, #34952	; 0x8888
   12408:	adc	r1, r1, r3
   1240c:	bl	14d70 <__assert_fail@plt+0x3aa0>
   12410:	vldr	s11, [r8, #24]
   12414:	vldr	s12, [r8, #28]
   12418:	vcvt.f32.u32	s16, s11
   1241c:	ldr	r2, [r8, #124]	; 0x7c
   12420:	ldr	r3, [r8, #120]	; 0x78
   12424:	lsl	r2, r2, #3
   12428:	vcvt.f32.u32	s15, s12
   1242c:	vdiv.f32	s16, s16, s15
   12430:	vmov	d7, r0, r1
   12434:	orr	r1, r2, r3, lsr #29
   12438:	lsl	r0, r3, #3
   1243c:	vcvt.f64.f32	d8, s16
   12440:	vdiv.f64	d8, d7, d8
   12444:	vcvt.s32.f64	s15, d8
   12448:	vmov	r3, s15
   1244c:	smull	r2, r4, r4, r3
   12450:	asr	r2, r3, #31
   12454:	add	r4, r4, r3
   12458:	rsb	r4, r2, r4, asr #5
   1245c:	lsl	r5, r4, #4
   12460:	rsb	r6, r5, r4
   12464:	rsb	r5, r4, r5
   12468:	add	r6, r3, r6, lsl #2
   1246c:	bl	14d70 <__assert_fail@plt+0x3aa0>
   12470:	lsl	r5, r5, #2
   12474:	mov	r2, #5
   12478:	vldr	d7, [pc, #120]	; 124f8 <__assert_fail@plt+0x1228>
   1247c:	vmov	d6, r0, r1
   12480:	movw	r1, #20264	; 0x4f28
   12484:	mov	r0, #0
   12488:	movt	r1, #1
   1248c:	vdiv.f64	d9, d6, d8
   12490:	vmul.f64	d9, d9, d7
   12494:	bl	110cc <dcgettext@plt>
   12498:	vmov	s13, r5
   1249c:	vldr	d7, [pc, #92]	; 12500 <__assert_fail@plt+0x1230>
   124a0:	ldr	r1, [r9, #40]	; 0x28
   124a4:	ldrd	r2, [r8, #120]	; 0x78
   124a8:	stm	sp, {r4, r6}
   124ac:	vcvt.f64.s32	d5, s13
   124b0:	vstr	d9, [sp, #16]
   124b4:	vsub.f64	d8, d8, d5
   124b8:	vmov	s11, r6
   124bc:	vcvt.f64.s32	d6, s11
   124c0:	vsub.f64	d8, d8, d6
   124c4:	vmul.f64	d8, d8, d7
   124c8:	vcvt.s32.f64	s16, d8
   124cc:	vstr	s16, [sp, #8]
   124d0:	bl	1221c <__assert_fail@plt+0xf4c>
   124d4:	add	r0, r8, #104	; 0x68
   124d8:	bl	13980 <__assert_fail@plt+0x26b0>
   124dc:	mov	r0, r8
   124e0:	bl	13974 <__assert_fail@plt+0x26a4>
   124e4:	ldr	r0, [r9, #416]	; 0x1a0
   124e8:	add	sp, sp, #28
   124ec:	vpop	{d8-d9}
   124f0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   124f4:	b	11090 <free@plt>
   124f8:	rscsle	sl, r1, #252, 18	; 0x3f0000
   124fc:	svccc	0x0050624d
   12500:	andeq	r0, r0, r0
   12504:	addmi	r4, pc, r0
   12508:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1250c:	movw	r9, #29056	; 0x7180
   12510:	movt	r9, #2
   12514:	ldr	r6, [r0, #416]	; 0x1a0
   12518:	add	r4, r0, #56	; 0x38
   1251c:	sub	sp, sp, #60	; 0x3c
   12520:	ldr	r3, [r9]
   12524:	mov	r8, r0
   12528:	mov	r0, r4
   1252c:	mov	sl, r1
   12530:	mov	r7, #0
   12534:	str	r3, [sp, #52]	; 0x34
   12538:	bl	110fc <ogg_stream_pagein@plt>
   1253c:	ldr	r1, [r6, #72]	; 0x48
   12540:	str	r1, [sp, #12]
   12544:	mov	r0, r4
   12548:	add	r1, sp, #16
   1254c:	bl	110e4 <ogg_stream_packetout@plt>
   12550:	cmp	r0, #0
   12554:	blt	126c0 <__assert_fail@plt+0x13f0>
   12558:	beq	126e0 <__assert_fail@plt+0x1410>
   1255c:	ldr	r3, [r6, #72]	; 0x48
   12560:	add	r7, r7, #1
   12564:	cmp	r3, #0
   12568:	bne	12544 <__assert_fail@plt+0x1274>
   1256c:	ldr	r3, [sp, #20]
   12570:	cmp	r3, #63	; 0x3f
   12574:	ble	12698 <__assert_fail@plt+0x13c8>
   12578:	ldr	r5, [sp, #16]
   1257c:	movw	r1, #20040	; 0x4e48
   12580:	mov	r2, #7
   12584:	movt	r1, #1
   12588:	add	r0, r5, #1
   1258c:	bl	110b4 <memcmp@plt>
   12590:	cmp	r0, #0
   12594:	bne	12698 <__assert_fail@plt+0x13c8>
   12598:	ldr	r2, [r6]
   1259c:	ldrd	r0, [sp, #40]	; 0x28
   125a0:	asr	r3, r2, #31
   125a4:	cmp	r1, r3
   125a8:	cmpeq	r0, r2
   125ac:	moveq	r3, #1
   125b0:	streq	r3, [r6, #72]	; 0x48
   125b4:	orrs	r3, r0, r1
   125b8:	beq	12708 <__assert_fail@plt+0x1438>
   125bc:	ldr	r3, [r6, #72]	; 0x48
   125c0:	cmp	r3, #0
   125c4:	beq	12544 <__assert_fail@plt+0x1274>
   125c8:	mov	r0, sl
   125cc:	bl	111bc <ogg_page_granulepos@plt>
   125d0:	orrs	r3, r0, r1
   125d4:	beq	12780 <__assert_fail@plt+0x14b0>
   125d8:	movw	r1, #20500	; 0x5014
   125dc:	mov	r0, #0
   125e0:	movt	r1, #1
   125e4:	mov	r2, #5
   125e8:	bl	110cc <dcgettext@plt>
   125ec:	ldr	r1, [r8, #40]	; 0x28
   125f0:	bl	12194 <__assert_fail@plt+0xec4>
   125f4:	mov	r2, #5
   125f8:	movw	r1, #20644	; 0x50a4
   125fc:	mov	r0, #0
   12600:	movt	r1, #1
   12604:	bl	110cc <dcgettext@plt>
   12608:	ldr	r1, [r8, #40]	; 0x28
   1260c:	bl	1221c <__assert_fail@plt+0xf4c>
   12610:	mov	r2, #5
   12614:	movw	r1, #20704	; 0x50e0
   12618:	mov	r0, #0
   1261c:	movt	r1, #1
   12620:	bl	110cc <dcgettext@plt>
   12624:	ldmib	r6, {r1, r2}
   12628:	bl	1221c <__assert_fail@plt+0xf4c>
   1262c:	ldrsb	r0, [r6, #12]
   12630:	cmp	r0, #0
   12634:	beq	12800 <__assert_fail@plt+0x1530>
   12638:	movw	r1, #20720	; 0x50f0
   1263c:	mov	r0, #0
   12640:	movt	r1, #1
   12644:	mov	r2, #5
   12648:	bl	110cc <dcgettext@plt>
   1264c:	add	r1, r6, #12
   12650:	bl	1221c <__assert_fail@plt+0xf4c>
   12654:	ldrsb	r0, [r6, #28]
   12658:	cmp	r0, #0
   1265c:	beq	127e8 <__assert_fail@plt+0x1518>
   12660:	movw	r1, #20756	; 0x5114
   12664:	mov	r0, #0
   12668:	movt	r1, #1
   1266c:	mov	r2, #5
   12670:	bl	110cc <dcgettext@plt>
   12674:	add	r1, r6, #28
   12678:	bl	1221c <__assert_fail@plt+0xf4c>
   1267c:	mov	r2, #5
   12680:	movw	r1, #23848	; 0x5d28
   12684:	mov	r0, #0
   12688:	movt	r1, #1
   1268c:	bl	110cc <dcgettext@plt>
   12690:	bl	1221c <__assert_fail@plt+0xf4c>
   12694:	b	12544 <__assert_fail@plt+0x1274>
   12698:	mov	r2, #5
   1269c:	movw	r1, #20416	; 0x4fc0
   126a0:	mov	r0, #0
   126a4:	movt	r1, #1
   126a8:	bl	110cc <dcgettext@plt>
   126ac:	ldr	r1, [r8, #40]	; 0x28
   126b0:	ldrd	r2, [sp, #40]	; 0x28
   126b4:	str	r1, [sp]
   126b8:	bl	12194 <__assert_fail@plt+0xec4>
   126bc:	b	12544 <__assert_fail@plt+0x1274>
   126c0:	mov	r2, #5
   126c4:	movw	r1, #20376	; 0x4f98
   126c8:	mov	r0, #0
   126cc:	movt	r1, #1
   126d0:	bl	110cc <dcgettext@plt>
   126d4:	ldr	r1, [r8, #40]	; 0x28
   126d8:	bl	12194 <__assert_fail@plt+0xec4>
   126dc:	b	12544 <__assert_fail@plt+0x1274>
   126e0:	ldr	r1, [sp, #12]
   126e4:	mov	fp, r0
   126e8:	cmp	r1, #0
   126ec:	bne	12798 <__assert_fail@plt+0x14c8>
   126f0:	ldr	r2, [sp, #52]	; 0x34
   126f4:	ldr	r3, [r9]
   126f8:	cmp	r2, r3
   126fc:	bne	12874 <__assert_fail@plt+0x15a4>
   12700:	add	sp, sp, #60	; 0x3c
   12704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12708:	ldrb	ip, [r5, #9]
   1270c:	mov	r2, r6
   12710:	mov	r1, r5
   12714:	mov	r3, r5
   12718:	mov	r0, #0
   1271c:	str	ip, [r6, #4]
   12720:	add	ip, r6, #28
   12724:	ldrb	lr, [r5, #10]
   12728:	str	lr, [r6, #8]
   1272c:	ldrb	lr, [r5, #11]
   12730:	str	lr, [r2], #12
   12734:	ldr	fp, [r1, #32]!
   12738:	ldr	r5, [r1, #4]
   1273c:	ldr	lr, [r1, #8]
   12740:	ldr	r1, [r1, #12]
   12744:	str	fp, [r6, #12]
   12748:	str	r5, [r2, #4]
   1274c:	str	lr, [r2, #8]
   12750:	str	r1, [r2, #12]
   12754:	strb	r0, [r6, #27]
   12758:	ldr	r5, [r3, #48]!	; 0x30
   1275c:	ldr	lr, [r3, #4]
   12760:	ldr	r1, [r3, #8]
   12764:	ldr	r2, [r3, #12]
   12768:	str	r5, [r6, #28]
   1276c:	str	lr, [ip, #4]
   12770:	str	r1, [ip, #8]
   12774:	str	r2, [ip, #12]
   12778:	strb	r0, [r6, #43]	; 0x2b
   1277c:	b	125bc <__assert_fail@plt+0x12ec>
   12780:	mov	r0, r4
   12784:	mov	r1, #0
   12788:	bl	11030 <ogg_stream_packetpeek@plt>
   1278c:	cmp	r0, #1
   12790:	bne	125f4 <__assert_fail@plt+0x1324>
   12794:	b	125d8 <__assert_fail@plt+0x1308>
   12798:	mov	r0, sl
   1279c:	bl	111bc <ogg_page_granulepos@plt>
   127a0:	mov	r4, r0
   127a4:	mov	r5, r1
   127a8:	cmp	r4, #1
   127ac:	sbcs	r3, r5, #0
   127b0:	blt	12818 <__assert_fail@plt+0x1548>
   127b4:	ldrd	r2, [r6, #56]	; 0x38
   127b8:	cmp	r4, r2
   127bc:	sbcs	r1, r5, r3
   127c0:	blt	1284c <__assert_fail@plt+0x157c>
   127c4:	strd	r4, [r6, #56]	; 0x38
   127c8:	ldr	r0, [sl, #4]
   127cc:	ldr	r1, [sl, #12]
   127d0:	ldrd	r2, [r6, #48]	; 0x30
   127d4:	add	r1, r0, r1
   127d8:	adds	r2, r2, r1
   127dc:	adc	r3, r3, r1, asr #31
   127e0:	strd	r2, [r6, #48]	; 0x30
   127e4:	b	126f0 <__assert_fail@plt+0x1420>
   127e8:	mov	r2, #5
   127ec:	movw	r1, #20772	; 0x5124
   127f0:	movt	r1, #1
   127f4:	bl	110cc <dcgettext@plt>
   127f8:	bl	1221c <__assert_fail@plt+0xf4c>
   127fc:	b	1267c <__assert_fail@plt+0x13ac>
   12800:	mov	r2, #5
   12804:	movw	r1, #20736	; 0x5100
   12808:	movt	r1, #1
   1280c:	bl	110cc <dcgettext@plt>
   12810:	bl	1221c <__assert_fail@plt+0xf4c>
   12814:	b	12654 <__assert_fail@plt+0x1384>
   12818:	adds	r7, r7, #0
   1281c:	movne	r7, #1
   12820:	ands	r7, r7, r1, lsr #31
   12824:	beq	127c8 <__assert_fail@plt+0x14f8>
   12828:	mov	r0, fp
   1282c:	mov	r2, #5
   12830:	movw	r1, #20856	; 0x5178
   12834:	movt	r1, #1
   12838:	bl	110cc <dcgettext@plt>
   1283c:	mov	r2, r4
   12840:	mov	r3, r5
   12844:	bl	12194 <__assert_fail@plt+0xec4>
   12848:	b	127c8 <__assert_fail@plt+0x14f8>
   1284c:	mov	r0, fp
   12850:	mov	r2, #5
   12854:	movw	r1, #20792	; 0x5138
   12858:	movt	r1, #1
   1285c:	bl	110cc <dcgettext@plt>
   12860:	ldr	r1, [r8, #40]	; 0x28
   12864:	ldrd	r2, [r6, #56]	; 0x38
   12868:	strd	r4, [sp]
   1286c:	bl	12194 <__assert_fail@plt+0xec4>
   12870:	b	127c4 <__assert_fail@plt+0x14f4>
   12874:	bl	110d8 <__stack_chk_fail@plt>
   12878:	push	{r0, r1, r2, r3}
   1287c:	movw	r0, #29072	; 0x7190
   12880:	push	{r4, r5, r6, lr}
   12884:	movw	r4, #29056	; 0x7180
   12888:	movt	r4, #2
   1288c:	sub	sp, sp, #8
   12890:	add	lr, sp, #28
   12894:	movt	r0, #2
   12898:	ldr	r6, [r4]
   1289c:	mov	r5, #1
   128a0:	movw	ip, #29080	; 0x7198
   128a4:	movt	ip, #2
   128a8:	ldr	r2, [sp, #24]
   128ac:	mov	r3, lr
   128b0:	ldr	r0, [r0]
   128b4:	mov	r1, r5
   128b8:	str	r6, [sp, #4]
   128bc:	str	r5, [ip]
   128c0:	str	lr, [sp]
   128c4:	bl	1118c <__vfprintf_chk@plt>
   128c8:	ldr	r2, [sp, #4]
   128cc:	ldr	r3, [r4]
   128d0:	cmp	r2, r3
   128d4:	bne	128e8 <__assert_fail@plt+0x1618>
   128d8:	add	sp, sp, #8
   128dc:	pop	{r4, r5, r6, lr}
   128e0:	add	sp, sp, #16
   128e4:	bx	lr
   128e8:	bl	110d8 <__stack_chk_fail@plt>
   128ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128f0:	movw	r8, #29056	; 0x7180
   128f4:	movt	r8, #2
   128f8:	mov	r5, r2
   128fc:	sub	sp, sp, #20
   12900:	mov	r6, r0
   12904:	ldr	r2, [r8]
   12908:	mov	r7, r1
   1290c:	mov	r0, r5
   12910:	mov	r1, #61	; 0x3d
   12914:	mov	r9, r3
   12918:	str	r2, [sp, #12]
   1291c:	bl	111d4 <strchr@plt>
   12920:	subs	sl, r0, #0
   12924:	beq	12d40 <__assert_fail@plt+0x1a70>
   12928:	rsb	ip, r5, sl
   1292c:	cmp	ip, #0
   12930:	ble	1296c <__assert_fail@plt+0x169c>
   12934:	ldrb	r3, [r5]
   12938:	sub	r3, r3, #32
   1293c:	cmp	r3, #93	; 0x5d
   12940:	subls	r3, r5, #1
   12944:	movls	lr, r5
   12948:	addls	r3, r3, ip
   1294c:	bls	12964 <__assert_fail@plt+0x1694>
   12950:	b	12c34 <__assert_fail@plt+0x1964>
   12954:	ldrb	r4, [lr, #1]!
   12958:	sub	r4, r4, #32
   1295c:	cmp	r4, #93	; 0x5d
   12960:	bhi	12c34 <__assert_fail@plt+0x1964>
   12964:	cmp	lr, r3
   12968:	bne	12954 <__assert_fail@plt+0x1684>
   1296c:	add	ip, ip, #1
   12970:	cmp	ip, r9
   12974:	bge	129e8 <__assert_fail@plt+0x1718>
   12978:	ldrb	lr, [r5, ip]
   1297c:	rsb	r3, ip, r9
   12980:	tst	lr, #128	; 0x80
   12984:	bne	12998 <__assert_fail@plt+0x16c8>
   12988:	cmp	r3, #0
   1298c:	ble	12ce4 <__assert_fail@plt+0x1a14>
   12990:	mov	r3, #1
   12994:	b	129dc <__assert_fail@plt+0x170c>
   12998:	tst	lr, #64	; 0x40
   1299c:	beq	12d14 <__assert_fail@plt+0x1a44>
   129a0:	tst	lr, #32
   129a4:	bne	12a24 <__assert_fail@plt+0x1754>
   129a8:	cmp	r3, #1
   129ac:	ble	12ce4 <__assert_fail@plt+0x1a14>
   129b0:	and	lr, lr, #254	; 0xfe
   129b4:	add	r3, r5, ip
   129b8:	cmp	lr, #192	; 0xc0
   129bc:	ldrb	r2, [r3, #1]
   129c0:	beq	12b04 <__assert_fail@plt+0x1834>
   129c4:	and	r2, r2, #192	; 0xc0
   129c8:	mov	r3, #2
   129cc:	subs	r2, r2, #128	; 0x80
   129d0:	movne	r2, #1
   129d4:	cmp	r2, #0
   129d8:	bne	12b04 <__assert_fail@plt+0x1834>
   129dc:	add	ip, ip, r3
   129e0:	cmp	r9, ip
   129e4:	bgt	12978 <__assert_fail@plt+0x16a8>
   129e8:	add	r0, sl, #1
   129ec:	add	r1, sp, #8
   129f0:	bl	13f9c <__assert_fail@plt+0x2ccc>
   129f4:	cmp	r0, #0
   129f8:	blt	12d60 <__assert_fail@plt+0x1a90>
   129fc:	mov	r3, #0
   12a00:	strb	r3, [sl]
   12a04:	mov	r1, r5
   12a08:	ldr	r2, [sp, #8]
   12a0c:	movw	r0, #21420	; 0x53ac
   12a10:	movt	r0, #1
   12a14:	bl	1221c <__assert_fail@plt+0xf4c>
   12a18:	ldr	r0, [sp, #8]
   12a1c:	bl	11090 <free@plt>
   12a20:	b	12c58 <__assert_fail@plt+0x1988>
   12a24:	tst	lr, #16
   12a28:	bne	12ac8 <__assert_fail@plt+0x17f8>
   12a2c:	cmp	r3, #2
   12a30:	ble	12ce4 <__assert_fail@plt+0x1a14>
   12a34:	cmp	lr, #224	; 0xe0
   12a38:	beq	12ca0 <__assert_fail@plt+0x19d0>
   12a3c:	add	r3, lr, #31
   12a40:	uxtb	r3, r3
   12a44:	cmp	r3, #11
   12a48:	bhi	12aa8 <__assert_fail@plt+0x17d8>
   12a4c:	add	r3, r5, ip
   12a50:	ldrb	r2, [r3, #1]
   12a54:	and	r2, r2, #192	; 0xc0
   12a58:	cmp	r2, #128	; 0x80
   12a5c:	beq	12a88 <__assert_fail@plt+0x17b8>
   12a60:	add	r3, lr, #18
   12a64:	uxtb	r3, r3
   12a68:	cmp	r3, #1
   12a6c:	movhi	r2, #1
   12a70:	bhi	12a98 <__assert_fail@plt+0x17c8>
   12a74:	add	r3, r5, ip
   12a78:	ldrb	r2, [r3, #1]
   12a7c:	and	r2, r2, #192	; 0xc0
   12a80:	cmp	r2, #128	; 0x80
   12a84:	bne	12b04 <__assert_fail@plt+0x1834>
   12a88:	ldrb	r2, [r3, #2]
   12a8c:	and	r2, r2, #192	; 0xc0
   12a90:	subs	r2, r2, #128	; 0x80
   12a94:	movne	r2, #1
   12a98:	cmp	lr, #224	; 0xe0
   12a9c:	beq	12d38 <__assert_fail@plt+0x1a68>
   12aa0:	mov	r3, #3
   12aa4:	b	129d4 <__assert_fail@plt+0x1704>
   12aa8:	cmp	lr, #237	; 0xed
   12aac:	bne	12a60 <__assert_fail@plt+0x1790>
   12ab0:	add	r3, r5, ip
   12ab4:	ldrb	r2, [r3, #1]
   12ab8:	eor	r2, r2, #128	; 0x80
   12abc:	cmp	r2, #31
   12ac0:	bhi	12b04 <__assert_fail@plt+0x1834>
   12ac4:	b	12a88 <__assert_fail@plt+0x17b8>
   12ac8:	tst	lr, #8
   12acc:	bne	12cd0 <__assert_fail@plt+0x1a00>
   12ad0:	cmp	r3, #3
   12ad4:	ble	12ce4 <__assert_fail@plt+0x1a14>
   12ad8:	cmp	lr, #240	; 0xf0
   12adc:	beq	12c70 <__assert_fail@plt+0x19a0>
   12ae0:	add	r3, lr, #15
   12ae4:	uxtb	r3, r3
   12ae8:	cmp	r3, #2
   12aec:	bhi	12bf4 <__assert_fail@plt+0x1924>
   12af0:	add	r3, r5, ip
   12af4:	ldrb	r2, [r3, #1]
   12af8:	and	r2, r2, #192	; 0xc0
   12afc:	cmp	r2, #128	; 0x80
   12b00:	beq	12c10 <__assert_fail@plt+0x1940>
   12b04:	add	r0, r9, #1
   12b08:	lsl	r7, r9, #1
   12b0c:	bl	1115c <malloc@plt>
   12b10:	mov	r4, r0
   12b14:	add	r0, r7, r9
   12b18:	add	r0, r0, #1
   12b1c:	bl	1115c <malloc@plt>
   12b20:	cmp	r9, #0
   12b24:	mov	sl, r0
   12b28:	ble	12d50 <__assert_fail@plt+0x1a80>
   12b2c:	movw	r0, #20040	; 0x4e48
   12b30:	movt	r0, #1
   12b34:	mov	r2, sl
   12b38:	mov	r1, #0
   12b3c:	mov	lr, #32
   12b40:	mov	fp, #63	; 0x3f
   12b44:	ldrb	ip, [r5]
   12b48:	add	r2, r2, #3
   12b4c:	ldrb	r3, [r5], #1
   12b50:	strb	lr, [r2, #-1]
   12b54:	and	r3, r3, #15
   12b58:	add	ip, r0, ip, lsr #4
   12b5c:	add	r3, r0, r3
   12b60:	ldrb	ip, [ip, #8]
   12b64:	ldrb	r3, [r3, #8]
   12b68:	strb	ip, [r2, #-3]
   12b6c:	strb	r3, [r2, #-2]
   12b70:	ldrb	r3, [r5, #-1]
   12b74:	sub	ip, r3, #32
   12b78:	cmp	ip, #93	; 0x5d
   12b7c:	strbhi	fp, [r4, r1]
   12b80:	strbls	r3, [r4, r1]
   12b84:	add	r1, r1, #1
   12b88:	cmp	r1, r9
   12b8c:	bne	12b44 <__assert_fail@plt+0x1874>
   12b90:	add	r7, r7, r9
   12b94:	mov	ip, r9
   12b98:	mov	r3, #0
   12b9c:	mov	r2, #5
   12ba0:	strb	r3, [r4, ip]
   12ba4:	mov	r0, r3
   12ba8:	strb	r3, [sl, r7]
   12bac:	movw	r1, #21268	; 0x5314
   12bb0:	movt	r1, #1
   12bb4:	bl	110cc <dcgettext@plt>
   12bb8:	ldr	r2, [r6]
   12bbc:	mov	r3, r4
   12bc0:	mov	r1, r9
   12bc4:	str	sl, [sp]
   12bc8:	bl	12194 <__assert_fail@plt+0xec4>
   12bcc:	mov	r0, r4
   12bd0:	bl	11090 <free@plt>
   12bd4:	ldr	r2, [sp, #12]
   12bd8:	ldr	r3, [r8]
   12bdc:	cmp	r2, r3
   12be0:	bne	12d7c <__assert_fail@plt+0x1aac>
   12be4:	mov	r0, sl
   12be8:	add	sp, sp, #20
   12bec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12bf0:	b	11090 <free@plt>
   12bf4:	cmp	lr, #244	; 0xf4
   12bf8:	bne	12b04 <__assert_fail@plt+0x1834>
   12bfc:	add	r3, r5, ip
   12c00:	ldrb	r2, [r3, #1]
   12c04:	eor	r2, r2, #128	; 0x80
   12c08:	cmp	r2, #15
   12c0c:	bhi	12b04 <__assert_fail@plt+0x1834>
   12c10:	ldrb	r2, [r3, #2]
   12c14:	and	r2, r2, #192	; 0xc0
   12c18:	cmp	r2, #128	; 0x80
   12c1c:	movne	r2, #1
   12c20:	beq	12d24 <__assert_fail@plt+0x1a54>
   12c24:	cmp	lr, #240	; 0xf0
   12c28:	beq	12c8c <__assert_fail@plt+0x19bc>
   12c2c:	mov	r3, #4
   12c30:	b	129d4 <__assert_fail@plt+0x1704>
   12c34:	movw	r1, #21044	; 0x5234
   12c38:	movt	r1, #1
   12c3c:	mov	r0, #0
   12c40:	mov	r2, #5
   12c44:	bl	110cc <dcgettext@plt>
   12c48:	mov	r1, r7
   12c4c:	ldr	r2, [r6]
   12c50:	mov	r3, r5
   12c54:	bl	12194 <__assert_fail@plt+0xec4>
   12c58:	ldr	r2, [sp, #12]
   12c5c:	ldr	r3, [r8]
   12c60:	cmp	r2, r3
   12c64:	bne	12d7c <__assert_fail@plt+0x1aac>
   12c68:	add	sp, sp, #20
   12c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c70:	add	r3, r5, ip
   12c74:	ldrb	r2, [r3, #1]
   12c78:	add	r2, r2, #112	; 0x70
   12c7c:	uxtb	r2, r2
   12c80:	cmp	r2, #47	; 0x2f
   12c84:	bls	12c10 <__assert_fail@plt+0x1940>
   12c88:	mov	r2, #1
   12c8c:	ldrb	r3, [r3, #1]
   12c90:	and	r3, r3, #240	; 0xf0
   12c94:	cmp	r3, #128	; 0x80
   12c98:	bne	12c2c <__assert_fail@plt+0x195c>
   12c9c:	b	12b04 <__assert_fail@plt+0x1834>
   12ca0:	add	r3, r5, ip
   12ca4:	ldrb	r2, [r3, #1]
   12ca8:	add	r2, r2, #96	; 0x60
   12cac:	uxtb	r2, r2
   12cb0:	cmp	r2, #31
   12cb4:	bls	12a88 <__assert_fail@plt+0x17b8>
   12cb8:	mov	r2, #1
   12cbc:	ldrb	r3, [r3, #1]
   12cc0:	and	r3, r3, #224	; 0xe0
   12cc4:	cmp	r3, #128	; 0x80
   12cc8:	bne	12aa0 <__assert_fail@plt+0x17d0>
   12ccc:	b	12b04 <__assert_fail@plt+0x1834>
   12cd0:	tst	lr, #4
   12cd4:	bne	12d08 <__assert_fail@plt+0x1a38>
   12cd8:	mov	r2, #5
   12cdc:	cmp	r2, r3
   12ce0:	ble	12b04 <__assert_fail@plt+0x1834>
   12ce4:	movw	r1, #21192	; 0x52c8
   12ce8:	movt	r1, #1
   12cec:	mov	r0, #0
   12cf0:	mov	r2, #5
   12cf4:	bl	110cc <dcgettext@plt>
   12cf8:	mov	r1, r7
   12cfc:	ldr	r2, [r6]
   12d00:	bl	12194 <__assert_fail@plt+0xec4>
   12d04:	b	12c58 <__assert_fail@plt+0x1988>
   12d08:	tst	lr, #2
   12d0c:	moveq	r2, #6
   12d10:	beq	12cdc <__assert_fail@plt+0x1a0c>
   12d14:	movw	r1, #21112	; 0x5278
   12d18:	mov	r0, #0
   12d1c:	movt	r1, #1
   12d20:	b	12cf0 <__assert_fail@plt+0x1a20>
   12d24:	ldrb	r2, [r3, #3]
   12d28:	and	r2, r2, #192	; 0xc0
   12d2c:	subs	r2, r2, #128	; 0x80
   12d30:	movne	r2, #1
   12d34:	b	12c24 <__assert_fail@plt+0x1954>
   12d38:	add	r3, r5, ip
   12d3c:	b	12cbc <__assert_fail@plt+0x19ec>
   12d40:	movw	r1, #20960	; 0x51e0
   12d44:	mov	r2, #5
   12d48:	movt	r1, #1
   12d4c:	b	12c44 <__assert_fail@plt+0x1974>
   12d50:	mov	ip, #0
   12d54:	mov	r7, ip
   12d58:	mov	r9, ip
   12d5c:	b	12b98 <__assert_fail@plt+0x18c8>
   12d60:	mov	r2, #5
   12d64:	movw	r1, #21356	; 0x536c
   12d68:	mov	r0, #0
   12d6c:	movt	r1, #1
   12d70:	bl	110cc <dcgettext@plt>
   12d74:	bl	12194 <__assert_fail@plt+0xec4>
   12d78:	b	12c58 <__assert_fail@plt+0x1988>
   12d7c:	bl	110d8 <__stack_chk_fail@plt>
   12d80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d84:	vpush	{d8}
   12d88:	movw	r8, #29056	; 0x7180
   12d8c:	vldr	d8, [pc, #1004]	; 13180 <__assert_fail@plt+0x1eb0>
   12d90:	movt	r8, #2
   12d94:	ldr	r6, [r0, #416]	; 0x1a0
   12d98:	add	r4, r0, #56	; 0x38
   12d9c:	sub	sp, sp, #68	; 0x44
   12da0:	ldr	r3, [r8]
   12da4:	mov	r7, r0
   12da8:	mov	r0, r4
   12dac:	str	r1, [sp, #16]
   12db0:	movw	r2, #28924	; 0x70fc
   12db4:	str	r2, [sp, #12]
   12db8:	str	r3, [sp, #60]	; 0x3c
   12dbc:	bl	110fc <ogg_stream_pagein@plt>
   12dc0:	ldr	r3, [r6, #72]	; 0x48
   12dc4:	mov	sl, #0
   12dc8:	ldr	r1, [sp, #12]
   12dcc:	str	r3, [sp, #20]
   12dd0:	movt	r1, #2
   12dd4:	str	r1, [sp, #12]
   12dd8:	mov	r0, r4
   12ddc:	add	r1, sp, #24
   12de0:	bl	110e4 <ogg_stream_packetout@plt>
   12de4:	cmp	r0, #0
   12de8:	blt	1303c <__assert_fail@plt+0x1d6c>
   12dec:	beq	1305c <__assert_fail@plt+0x1d8c>
   12df0:	ldr	r3, [r6, #72]	; 0x48
   12df4:	add	sl, sl, #1
   12df8:	cmp	r3, #2
   12dfc:	bgt	12dd8 <__assert_fail@plt+0x1b08>
   12e00:	mov	r0, r6
   12e04:	add	r1, r6, #32
   12e08:	add	r2, sp, #24
   12e0c:	bl	11228 <vorbis_synthesis_headerin@plt>
   12e10:	cmp	r0, #0
   12e14:	blt	130dc <__assert_fail@plt+0x1e0c>
   12e18:	ldr	r3, [r6, #72]	; 0x48
   12e1c:	add	r3, r3, #1
   12e20:	str	r3, [r6, #72]	; 0x48
   12e24:	cmp	r3, #3
   12e28:	bne	12dd8 <__assert_fail@plt+0x1b08>
   12e2c:	ldr	r0, [sp, #16]
   12e30:	bl	111bc <ogg_page_granulepos@plt>
   12e34:	orrs	r2, r0, r1
   12e38:	beq	13100 <__assert_fail@plt+0x1e30>
   12e3c:	movw	r1, #21508	; 0x5404
   12e40:	mov	r0, #0
   12e44:	movt	r1, #1
   12e48:	mov	r2, #5
   12e4c:	bl	110cc <dcgettext@plt>
   12e50:	ldr	r1, [r7, #40]	; 0x28
   12e54:	bl	12194 <__assert_fail@plt+0xec4>
   12e58:	mov	r2, #5
   12e5c:	movw	r1, #21652	; 0x5494
   12e60:	mov	r0, #0
   12e64:	movt	r1, #1
   12e68:	bl	110cc <dcgettext@plt>
   12e6c:	ldr	r1, [r7, #40]	; 0x28
   12e70:	bl	1221c <__assert_fail@plt+0xf4c>
   12e74:	mov	r2, #5
   12e78:	movw	r1, #21716	; 0x54d4
   12e7c:	mov	r0, #0
   12e80:	movt	r1, #1
   12e84:	bl	110cc <dcgettext@plt>
   12e88:	ldr	r1, [r6]
   12e8c:	bl	1221c <__assert_fail@plt+0xf4c>
   12e90:	ldr	r3, [sp, #12]
   12e94:	ldr	r1, [r3, #8]
   12e98:	cmp	r1, #0
   12e9c:	beq	13118 <__assert_fail@plt+0x1e48>
   12ea0:	ldr	r9, [r6, #44]	; 0x2c
   12ea4:	mov	r5, #0
   12ea8:	ldr	fp, [pc, #728]	; 13188 <__assert_fail@plt+0x1eb8>
   12eac:	b	12ec0 <__assert_fail@plt+0x1bf0>
   12eb0:	ldr	r1, [fp, #8]!
   12eb4:	add	r5, r5, #1
   12eb8:	cmp	r1, #0
   12ebc:	beq	13118 <__assert_fail@plt+0x1e48>
   12ec0:	mov	r0, r9
   12ec4:	bl	1106c <strcmp@plt>
   12ec8:	cmp	r0, #0
   12ecc:	bne	12eb0 <__assert_fail@plt+0x1be0>
   12ed0:	ldr	r1, [sp, #12]
   12ed4:	mov	r2, #5
   12ed8:	add	r5, r1, r5, lsl #3
   12edc:	movw	r1, #21744	; 0x54f0
   12ee0:	movt	r1, #1
   12ee4:	bl	110cc <dcgettext@plt>
   12ee8:	ldr	r2, [r5, #12]
   12eec:	ldr	r1, [r6, #44]	; 0x2c
   12ef0:	bl	1221c <__assert_fail@plt+0xf4c>
   12ef4:	ldr	r3, [r5, #8]
   12ef8:	cmp	r3, #0
   12efc:	beq	13118 <__assert_fail@plt+0x1e48>
   12f00:	mov	r2, #5
   12f04:	movw	r1, #21764	; 0x5504
   12f08:	mov	r0, #0
   12f0c:	movt	r1, #1
   12f10:	bl	110cc <dcgettext@plt>
   12f14:	ldr	r1, [r6, #4]
   12f18:	bl	1221c <__assert_fail@plt+0xf4c>
   12f1c:	mov	r2, #5
   12f20:	movw	r1, #21780	; 0x5514
   12f24:	mov	r0, #0
   12f28:	movt	r1, #1
   12f2c:	bl	110cc <dcgettext@plt>
   12f30:	ldr	r1, [r6, #8]
   12f34:	bl	1221c <__assert_fail@plt+0xf4c>
   12f38:	ldr	r3, [r6, #16]
   12f3c:	cmp	r3, #0
   12f40:	ble	131a8 <__assert_fail@plt+0x1ed8>
   12f44:	mov	r2, #5
   12f48:	movw	r1, #21792	; 0x5520
   12f4c:	mov	r0, #0
   12f50:	movt	r1, #1
   12f54:	bl	110cc <dcgettext@plt>
   12f58:	vldr	s12, [r6, #16]
   12f5c:	vcvt.f64.s32	d7, s12
   12f60:	vmul.f64	d6, d7, d8
   12f64:	vmov	r2, r3, d6
   12f68:	bl	1221c <__assert_fail@plt+0xf4c>
   12f6c:	ldr	r3, [r6, #12]
   12f70:	cmp	r3, #0
   12f74:	ble	1318c <__assert_fail@plt+0x1ebc>
   12f78:	mov	r2, #5
   12f7c:	movw	r1, #21848	; 0x5558
   12f80:	mov	r0, #0
   12f84:	movt	r1, #1
   12f88:	bl	110cc <dcgettext@plt>
   12f8c:	vldr	s13, [r6, #12]
   12f90:	vcvt.f64.s32	d7, s13
   12f94:	vmul.f64	d6, d7, d8
   12f98:	vmov	r2, r3, d6
   12f9c:	bl	1221c <__assert_fail@plt+0xf4c>
   12fa0:	ldr	r3, [r6, #20]
   12fa4:	cmp	r3, #0
   12fa8:	ble	13164 <__assert_fail@plt+0x1e94>
   12fac:	mov	r2, #5
   12fb0:	movw	r1, #21896	; 0x5588
   12fb4:	mov	r0, #0
   12fb8:	movt	r1, #1
   12fbc:	bl	110cc <dcgettext@plt>
   12fc0:	vldr	s13, [r6, #20]
   12fc4:	vcvt.f64.s32	d7, s13
   12fc8:	vmul.f64	d6, d7, d8
   12fcc:	vmov	r2, r3, d6
   12fd0:	bl	1221c <__assert_fail@plt+0xf4c>
   12fd4:	ldr	r3, [r6, #40]	; 0x28
   12fd8:	cmp	r3, #0
   12fdc:	ble	12dd8 <__assert_fail@plt+0x1b08>
   12fe0:	mov	r2, #5
   12fe4:	movw	r1, #21944	; 0x55b8
   12fe8:	mov	r0, #0
   12fec:	movt	r1, #1
   12ff0:	bl	110cc <dcgettext@plt>
   12ff4:	bl	1221c <__assert_fail@plt+0xf4c>
   12ff8:	ldr	r3, [r6, #40]	; 0x28
   12ffc:	cmp	r3, #0
   13000:	ble	12dd8 <__assert_fail@plt+0x1b08>
   13004:	add	r9, r7, #40	; 0x28
   13008:	mov	r5, #0
   1300c:	ldr	r2, [r6, #32]
   13010:	mov	r1, r5
   13014:	ldr	r3, [r6, #36]	; 0x24
   13018:	mov	r0, r9
   1301c:	ldr	r2, [r2, r5, lsl #2]
   13020:	ldr	r3, [r3, r5, lsl #2]
   13024:	add	r5, r5, #1
   13028:	bl	128ec <__assert_fail@plt+0x161c>
   1302c:	ldr	r3, [r6, #40]	; 0x28
   13030:	cmp	r3, r5
   13034:	bgt	1300c <__assert_fail@plt+0x1d3c>
   13038:	b	12dd8 <__assert_fail@plt+0x1b08>
   1303c:	mov	r2, #5
   13040:	movw	r1, #20376	; 0x4f98
   13044:	mov	r0, #0
   13048:	movt	r1, #1
   1304c:	bl	110cc <dcgettext@plt>
   13050:	ldr	r1, [r7, #40]	; 0x28
   13054:	bl	12194 <__assert_fail@plt+0xec4>
   13058:	b	12dd8 <__assert_fail@plt+0x1b08>
   1305c:	ldr	r1, [sp, #20]
   13060:	mov	fp, r0
   13064:	cmp	r1, #2
   13068:	bgt	13088 <__assert_fail@plt+0x1db8>
   1306c:	ldr	r2, [sp, #60]	; 0x3c
   13070:	ldr	r3, [r8]
   13074:	cmp	r2, r3
   13078:	bne	131ec <__assert_fail@plt+0x1f1c>
   1307c:	add	sp, sp, #68	; 0x44
   13080:	vpop	{d8}
   13084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13088:	ldr	r0, [sp, #16]
   1308c:	bl	111bc <ogg_page_granulepos@plt>
   13090:	mov	r4, r0
   13094:	mov	r5, r1
   13098:	cmp	r4, #1
   1309c:	sbcs	r2, r5, #0
   130a0:	blt	13138 <__assert_fail@plt+0x1e68>
   130a4:	ldrd	r2, [r6, #56]	; 0x38
   130a8:	cmp	r4, r2
   130ac:	sbcs	r1, r5, r3
   130b0:	blt	131c4 <__assert_fail@plt+0x1ef4>
   130b4:	strd	r4, [r6, #56]	; 0x38
   130b8:	ldr	r2, [sp, #16]
   130bc:	ldr	r0, [r2, #4]
   130c0:	ldr	r1, [r2, #12]
   130c4:	ldrd	r2, [r6, #48]	; 0x30
   130c8:	add	r1, r0, r1
   130cc:	adds	r2, r2, r1
   130d0:	adc	r3, r3, r1, asr #31
   130d4:	strd	r2, [r6, #48]	; 0x30
   130d8:	b	1306c <__assert_fail@plt+0x1d9c>
   130dc:	mov	r2, #5
   130e0:	movw	r1, #21428	; 0x53b4
   130e4:	mov	r0, #0
   130e8:	movt	r1, #1
   130ec:	bl	110cc <dcgettext@plt>
   130f0:	ldr	r1, [r6, #72]	; 0x48
   130f4:	ldr	r2, [r7, #40]	; 0x28
   130f8:	bl	12194 <__assert_fail@plt+0xec4>
   130fc:	b	12dd8 <__assert_fail@plt+0x1b08>
   13100:	mov	r0, r4
   13104:	mov	r1, #0
   13108:	bl	11030 <ogg_stream_packetpeek@plt>
   1310c:	cmp	r0, #1
   13110:	bne	12e58 <__assert_fail@plt+0x1b88>
   13114:	b	12e3c <__assert_fail@plt+0x1b6c>
   13118:	mov	r2, #5
   1311c:	movw	r1, #21732	; 0x54e4
   13120:	mov	r0, #0
   13124:	movt	r1, #1
   13128:	bl	110cc <dcgettext@plt>
   1312c:	ldr	r1, [r6, #44]	; 0x2c
   13130:	bl	1221c <__assert_fail@plt+0xf4c>
   13134:	b	12f00 <__assert_fail@plt+0x1c30>
   13138:	cmp	sl, #0
   1313c:	beq	130b8 <__assert_fail@plt+0x1de8>
   13140:	mov	r0, fp
   13144:	mov	r2, #5
   13148:	movw	r1, #21980	; 0x55dc
   1314c:	movt	r1, #1
   13150:	bl	110cc <dcgettext@plt>
   13154:	mov	r2, r4
   13158:	mov	r3, r5
   1315c:	bl	12194 <__assert_fail@plt+0xec4>
   13160:	b	130b8 <__assert_fail@plt+0x1de8>
   13164:	mov	r2, #5
   13168:	movw	r1, #21920	; 0x55a0
   1316c:	mov	r0, #0
   13170:	movt	r1, #1
   13174:	bl	110cc <dcgettext@plt>
   13178:	bl	1221c <__assert_fail@plt+0xf4c>
   1317c:	b	12fd4 <__assert_fail@plt+0x1d04>
   13180:	rscsle	sl, r1, #252, 18	; 0x3f0000
   13184:	svccc	0x0050624d
   13188:	andeq	r7, r2, r4, lsl #2
   1318c:	mov	r2, #5
   13190:	movw	r1, #21872	; 0x5570
   13194:	mov	r0, #0
   13198:	movt	r1, #1
   1319c:	bl	110cc <dcgettext@plt>
   131a0:	bl	1221c <__assert_fail@plt+0xf4c>
   131a4:	b	12fa0 <__assert_fail@plt+0x1cd0>
   131a8:	mov	r2, #5
   131ac:	movw	r1, #21820	; 0x553c
   131b0:	mov	r0, #0
   131b4:	movt	r1, #1
   131b8:	bl	110cc <dcgettext@plt>
   131bc:	bl	1221c <__assert_fail@plt+0xf4c>
   131c0:	b	12f6c <__assert_fail@plt+0x1c9c>
   131c4:	mov	r0, fp
   131c8:	mov	r2, #5
   131cc:	movw	r1, #20792	; 0x5138
   131d0:	movt	r1, #1
   131d4:	bl	110cc <dcgettext@plt>
   131d8:	ldr	r1, [r7, #40]	; 0x28
   131dc:	ldrd	r2, [r6, #56]	; 0x38
   131e0:	strd	r4, [sp]
   131e4:	bl	12194 <__assert_fail@plt+0xec4>
   131e8:	b	130b4 <__assert_fail@plt+0x1de4>
   131ec:	bl	110d8 <__stack_chk_fail@plt>
   131f0:	movw	r2, #29056	; 0x7180
   131f4:	movt	r2, #2
   131f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   131fc:	vpush	{d8-d11}
   13200:	add	fp, r0, #56	; 0x38
   13204:	vldr	d9, [pc, #1004]	; 135f8 <__assert_fail@plt+0x2328>
   13208:	sub	sp, sp, #76	; 0x4c
   1320c:	ldr	r3, [r2]
   13210:	ldr	sl, [r0, #416]	; 0x1a0
   13214:	vldr	d8, [pc, #996]	; 13600 <__assert_fail@plt+0x2330>
   13218:	str	r0, [sp, #12]
   1321c:	mov	r0, fp
   13220:	str	r2, [sp, #16]
   13224:	movw	r2, #19923	; 0x4dd3
   13228:	str	r1, [sp, #20]
   1322c:	vldr	d10, [pc, #980]	; 13608 <__assert_fail@plt+0x2338>
   13230:	str	r3, [sp, #68]	; 0x44
   13234:	str	r2, [sp, #24]
   13238:	bl	110fc <ogg_stream_pagein@plt>
   1323c:	ldr	r3, [sl, #144]	; 0x90
   13240:	ldr	r1, [sp, #24]
   13244:	str	r3, [sp, #28]
   13248:	movt	r1, #4194	; 0x1062
   1324c:	str	r1, [sp, #24]
   13250:	mov	r0, fp
   13254:	add	r1, sp, #32
   13258:	bl	110e4 <ogg_stream_packetout@plt>
   1325c:	cmp	r0, #0
   13260:	blt	13610 <__assert_fail@plt+0x2340>
   13264:	beq	13634 <__assert_fail@plt+0x2364>
   13268:	ldr	r3, [sl, #144]	; 0x90
   1326c:	cmp	r3, #2
   13270:	ble	1330c <__assert_fail@plt+0x203c>
   13274:	ldrd	r8, [sp, #48]	; 0x30
   13278:	cmp	r8, #1
   1327c:	sbcs	r1, r9, #0
   13280:	blt	135d4 <__assert_fail@plt+0x2304>
   13284:	ldr	r1, [sl, #60]	; 0x3c
   13288:	ldrd	r2, [sl, #152]	; 0x98
   1328c:	lsr	r4, r8, r1
   13290:	rsb	r0, r1, #32
   13294:	orr	r4, r4, r9, lsl r0
   13298:	subs	ip, r1, #32
   1329c:	asr	r5, r9, r1
   132a0:	orrpl	r4, r4, r9, asr ip
   132a4:	lsl	r7, r5, r1
   132a8:	lsl	r6, r4, r1
   132ac:	orr	r7, r7, r4, lsl ip
   132b0:	orr	r7, r7, r4, lsr r0
   132b4:	subs	r8, r8, r6
   132b8:	sbc	r9, r9, r7
   132bc:	adds	r8, r8, r4
   132c0:	adc	r9, r9, r5
   132c4:	cmp	r2, #0
   132c8:	sbcs	r1, r3, #0
   132cc:	blt	132fc <__assert_fail@plt+0x202c>
   132d0:	cmp	r9, r3
   132d4:	cmpeq	r8, r2
   132d8:	beq	132fc <__assert_fail@plt+0x202c>
   132dc:	mov	r2, #5
   132e0:	movw	r1, #23028	; 0x59f4
   132e4:	mov	r0, #0
   132e8:	movt	r1, #1
   132ec:	bl	110cc <dcgettext@plt>
   132f0:	ldrd	r2, [sl, #152]	; 0x98
   132f4:	strd	r8, [sp]
   132f8:	bl	12194 <__assert_fail@plt+0xec4>
   132fc:	adds	r8, r8, #1
   13300:	adc	r9, r9, #0
   13304:	strd	r8, [sl, #152]	; 0x98
   13308:	b	13250 <__assert_fail@plt+0x1f80>
   1330c:	mov	r0, sl
   13310:	add	r1, sl, #104	; 0x68
   13314:	add	r2, sp, #32
   13318:	bl	13a08 <__assert_fail@plt+0x2738>
   1331c:	cmp	r0, #0
   13320:	blt	136b8 <__assert_fail@plt+0x23e8>
   13324:	ldr	r3, [sl, #144]	; 0x90
   13328:	add	r3, r3, #1
   1332c:	str	r3, [sl, #144]	; 0x90
   13330:	cmp	r3, #3
   13334:	bne	13250 <__assert_fail@plt+0x1f80>
   13338:	ldr	r0, [sp, #20]
   1333c:	bl	111bc <ogg_page_granulepos@plt>
   13340:	orrs	r2, r0, r1
   13344:	beq	136dc <__assert_fail@plt+0x240c>
   13348:	movw	r1, #22176	; 0x56a0
   1334c:	mov	r0, #0
   13350:	movt	r1, #1
   13354:	mov	r2, #5
   13358:	bl	110cc <dcgettext@plt>
   1335c:	ldr	r3, [sp, #12]
   13360:	ldr	r1, [r3, #40]	; 0x28
   13364:	bl	12194 <__assert_fail@plt+0xec4>
   13368:	mov	r2, #5
   1336c:	movw	r1, #22320	; 0x5730
   13370:	mov	r0, #0
   13374:	movt	r1, #1
   13378:	bl	110cc <dcgettext@plt>
   1337c:	ldr	r2, [sp, #12]
   13380:	ldr	r1, [r2, #40]	; 0x28
   13384:	bl	1221c <__assert_fail@plt+0xf4c>
   13388:	mov	r2, #5
   1338c:	movw	r1, #22384	; 0x5770
   13390:	mov	r0, #0
   13394:	movt	r1, #1
   13398:	bl	110cc <dcgettext@plt>
   1339c:	ldrb	r3, [sl, #58]	; 0x3a
   133a0:	ldrb	r1, [sl, #56]	; 0x38
   133a4:	ldrb	r2, [sl, #57]	; 0x39
   133a8:	bl	1221c <__assert_fail@plt+0xf4c>
   133ac:	mov	r2, #5
   133b0:	movw	r1, #21732	; 0x54e4
   133b4:	mov	r0, #0
   133b8:	movt	r1, #1
   133bc:	bl	110cc <dcgettext@plt>
   133c0:	ldr	r1, [sl, #116]	; 0x74
   133c4:	bl	1221c <__assert_fail@plt+0xf4c>
   133c8:	mov	r2, #5
   133cc:	movw	r1, #22404	; 0x5784
   133d0:	mov	r0, #0
   133d4:	movt	r1, #1
   133d8:	bl	110cc <dcgettext@plt>
   133dc:	ldr	r1, [sl, #8]
   133e0:	bl	1221c <__assert_fail@plt+0xf4c>
   133e4:	mov	r2, #5
   133e8:	movw	r1, #22416	; 0x5790
   133ec:	mov	r0, #0
   133f0:	movt	r1, #1
   133f4:	bl	110cc <dcgettext@plt>
   133f8:	ldr	r1, [sl, #12]
   133fc:	bl	1221c <__assert_fail@plt+0xf4c>
   13400:	mov	r2, #5
   13404:	movw	r1, #22428	; 0x579c
   13408:	mov	r0, #0
   1340c:	movt	r1, #1
   13410:	bl	110cc <dcgettext@plt>
   13414:	ldr	ip, [sl, #20]
   13418:	ldm	sl, {r1, r2}
   1341c:	ldr	r3, [sl, #16]
   13420:	str	ip, [sp]
   13424:	bl	1221c <__assert_fail@plt+0xf4c>
   13428:	ldr	r1, [sl, #8]
   1342c:	ldr	r2, [sl, #16]
   13430:	ldr	r3, [sl]
   13434:	add	r2, r1, r2
   13438:	cmp	r2, r3
   1343c:	bhi	13834 <__assert_fail@plt+0x2564>
   13440:	ldr	r1, [sl, #12]
   13444:	ldr	r2, [sl, #20]
   13448:	ldr	r3, [sl, #4]
   1344c:	add	r2, r1, r2
   13450:	cmp	r2, r3
   13454:	bhi	13818 <__assert_fail@plt+0x2548>
   13458:	ldr	r3, [sl, #24]
   1345c:	cmp	r3, #0
   13460:	beq	13470 <__assert_fail@plt+0x21a0>
   13464:	ldr	r3, [sl, #28]
   13468:	cmp	r3, #0
   1346c:	bne	137a4 <__assert_fail@plt+0x24d4>
   13470:	movw	r1, #22568	; 0x5828
   13474:	mov	r2, #5
   13478:	movt	r1, #1
   1347c:	mov	r0, #0
   13480:	bl	110cc <dcgettext@plt>
   13484:	bl	12194 <__assert_fail@plt+0xec4>
   13488:	ldr	r3, [sl, #32]
   1348c:	cmp	r3, #0
   13490:	beq	134a0 <__assert_fail@plt+0x21d0>
   13494:	ldr	ip, [sl, #36]	; 0x24
   13498:	cmp	ip, #0
   1349c:	bne	136f4 <__assert_fail@plt+0x2424>
   134a0:	movw	r1, #22624	; 0x5860
   134a4:	mov	r2, #5
   134a8:	movt	r1, #1
   134ac:	mov	r0, #0
   134b0:	bl	110cc <dcgettext@plt>
   134b4:	bl	1221c <__assert_fail@plt+0xf4c>
   134b8:	ldr	r3, [sl, #40]	; 0x28
   134bc:	cmp	r3, #1
   134c0:	beq	1389c <__assert_fail@plt+0x25cc>
   134c4:	cmp	r3, #2
   134c8:	mov	r2, #5
   134cc:	movweq	r1, #22796	; 0x590c
   134d0:	movwne	r1, #22852	; 0x5944
   134d4:	moveq	r0, #0
   134d8:	movteq	r1, #1
   134dc:	movne	r0, #0
   134e0:	movtne	r1, #1
   134e4:	bl	110cc <dcgettext@plt>
   134e8:	bl	1221c <__assert_fail@plt+0xf4c>
   134ec:	ldr	r0, [sl, #100]	; 0x64
   134f0:	cmp	r0, #0
   134f4:	beq	13800 <__assert_fail@plt+0x2530>
   134f8:	cmp	r0, #2
   134fc:	beq	138b8 <__assert_fail@plt+0x25e8>
   13500:	cmp	r0, #3
   13504:	beq	137e4 <__assert_fail@plt+0x2514>
   13508:	movw	r1, #22940	; 0x599c
   1350c:	mov	r2, #5
   13510:	movt	r1, #1
   13514:	mov	r0, #0
   13518:	bl	110cc <dcgettext@plt>
   1351c:	bl	12194 <__assert_fail@plt+0xec4>
   13520:	mov	r2, #5
   13524:	movw	r1, #22964	; 0x59b4
   13528:	mov	r0, #0
   1352c:	movt	r1, #1
   13530:	bl	110cc <dcgettext@plt>
   13534:	ldr	r3, [sl, #44]	; 0x2c
   13538:	ldr	r2, [sp, #24]
   1353c:	smull	r2, r1, r2, r3
   13540:	asr	r3, r3, #31
   13544:	rsb	r1, r3, r1, asr #6
   13548:	bl	1221c <__assert_fail@plt+0xf4c>
   1354c:	mov	r2, #5
   13550:	movw	r1, #22992	; 0x59d0
   13554:	mov	r0, #0
   13558:	movt	r1, #1
   1355c:	bl	110cc <dcgettext@plt>
   13560:	ldr	r1, [sl, #48]	; 0x30
   13564:	bl	1221c <__assert_fail@plt+0xf4c>
   13568:	ldr	r3, [sl, #112]	; 0x70
   1356c:	cmp	r3, #0
   13570:	ble	13250 <__assert_fail@plt+0x1f80>
   13574:	mov	r2, #5
   13578:	movw	r1, #21944	; 0x55b8
   1357c:	mov	r0, #0
   13580:	movt	r1, #1
   13584:	bl	110cc <dcgettext@plt>
   13588:	bl	1221c <__assert_fail@plt+0xf4c>
   1358c:	ldr	r3, [sl, #112]	; 0x70
   13590:	cmp	r3, #0
   13594:	ble	13250 <__assert_fail@plt+0x1f80>
   13598:	ldr	r3, [sp, #12]
   1359c:	mov	r8, #0
   135a0:	add	r9, r3, #40	; 0x28
   135a4:	ldr	r2, [sl, #104]	; 0x68
   135a8:	mov	r1, r8
   135ac:	ldr	r3, [sl, #108]	; 0x6c
   135b0:	mov	r0, r9
   135b4:	ldr	r2, [r2, r8, lsl #2]
   135b8:	ldr	r3, [r3, r8, lsl #2]
   135bc:	add	r8, r8, #1
   135c0:	bl	128ec <__assert_fail@plt+0x161c>
   135c4:	ldr	r3, [sl, #112]	; 0x70
   135c8:	cmp	r3, r8
   135cc:	bgt	135a4 <__assert_fail@plt+0x22d4>
   135d0:	b	13250 <__assert_fail@plt+0x1f80>
   135d4:	ldrd	r2, [sl, #152]	; 0x98
   135d8:	cmp	r2, #0
   135dc:	sbcs	r1, r3, #0
   135e0:	blt	13250 <__assert_fail@plt+0x1f80>
   135e4:	adds	r2, r2, #1
   135e8:	adc	r3, r3, #0
   135ec:	strd	r2, [sl, #152]	; 0x98
   135f0:	b	13250 <__assert_fail@plt+0x1f80>
   135f4:	nop	{0}
   135f8:	ldrbpl	r5, [r5, #-1365]	; 0xfffffaab
   135fc:	svccc	0x00f55555
   13600:			; <UNDEFINED> instruction: 0x47ae147b
   13604:	svccc	0x00947ae1
   13608:	ldclne	7, cr12, [r1], #-112	; 0xffffff90
   1360c:	svccc	0x00fc71c7
   13610:	mov	r2, #5
   13614:	movw	r1, #20376	; 0x4f98
   13618:	mov	r0, #0
   1361c:	movt	r1, #1
   13620:	bl	110cc <dcgettext@plt>
   13624:	ldr	r2, [sp, #12]
   13628:	ldr	r1, [r2, #40]	; 0x28
   1362c:	bl	12194 <__assert_fail@plt+0xec4>
   13630:	b	13250 <__assert_fail@plt+0x1f80>
   13634:	ldr	r2, [sp, #28]
   13638:	mov	r8, r0
   1363c:	cmp	r2, #2
   13640:	bgt	13664 <__assert_fail@plt+0x2394>
   13644:	ldr	r1, [sp, #16]
   13648:	ldr	r2, [sp, #68]	; 0x44
   1364c:	ldr	r3, [r1]
   13650:	cmp	r2, r3
   13654:	bne	138f0 <__assert_fail@plt+0x2620>
   13658:	add	sp, sp, #76	; 0x4c
   1365c:	vpop	{d8-d11}
   13660:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13664:	ldr	r0, [sp, #20]
   13668:	bl	111bc <ogg_page_granulepos@plt>
   1366c:	mov	r4, r0
   13670:	mov	r5, r1
   13674:	cmp	r4, #1
   13678:	sbcs	r3, r5, #0
   1367c:	blt	13694 <__assert_fail@plt+0x23c4>
   13680:	ldrd	r2, [sl, #128]	; 0x80
   13684:	cmp	r4, r2
   13688:	sbcs	r1, r5, r3
   1368c:	blt	13850 <__assert_fail@plt+0x2580>
   13690:	strd	r4, [sl, #128]	; 0x80
   13694:	ldr	r3, [sp, #20]
   13698:	ldr	r0, [r3, #4]
   1369c:	ldr	r1, [r3, #12]
   136a0:	ldrd	r2, [sl, #120]	; 0x78
   136a4:	add	r1, r0, r1
   136a8:	adds	r2, r2, r1
   136ac:	adc	r3, r3, r1, asr #31
   136b0:	strd	r2, [sl, #120]	; 0x78
   136b4:	b	13644 <__assert_fail@plt+0x2374>
   136b8:	mov	r2, #5
   136bc:	movw	r1, #22096	; 0x5650
   136c0:	mov	r0, #0
   136c4:	movt	r1, #1
   136c8:	bl	110cc <dcgettext@plt>
   136cc:	ldr	r3, [sp, #12]
   136d0:	ldr	r1, [r3, #40]	; 0x28
   136d4:	bl	12194 <__assert_fail@plt+0xec4>
   136d8:	b	13250 <__assert_fail@plt+0x1f80>
   136dc:	mov	r0, fp
   136e0:	mov	r1, #0
   136e4:	bl	11030 <ogg_stream_packetpeek@plt>
   136e8:	cmp	r0, #1
   136ec:	bne	13368 <__assert_fail@plt+0x2098>
   136f0:	b	13348 <__assert_fail@plt+0x2078>
   136f4:	vmov	s14, r3
   136f8:	vldr	s13, [sl, #8]
   136fc:	vcvt.f32.u32	s22, s13
   13700:	vldr	s13, [sl, #12]
   13704:	mov	r2, #5
   13708:	movw	r1, #22648	; 0x5878
   1370c:	mov	r0, #0
   13710:	movt	r1, #1
   13714:	vcvt.f32.u32	s15, s14
   13718:	vcvt.f32.u32	s14, s13
   1371c:	vdiv.f32	s22, s22, s14
   13720:	vmov	s14, ip
   13724:	vmul.f32	s22, s22, s15
   13728:	vcvt.f32.u32	s15, s14
   1372c:	vdiv.f32	s22, s22, s15
   13730:	bl	110cc <dcgettext@plt>
   13734:	ldr	r1, [sl, #32]
   13738:	ldr	r2, [sl, #36]	; 0x24
   1373c:	vmov	s15, r1
   13740:	vmov	s13, r2
   13744:	vcvt.f32.u32	s14, s15
   13748:	vcvt.f32.u32	s15, s13
   1374c:	vdiv.f32	s14, s14, s15
   13750:	vcvt.f64.f32	d7, s14
   13754:	vcvt.f64.f32	d11, s22
   13758:	vstr	d7, [sp]
   1375c:	bl	1221c <__assert_fail@plt+0xf4c>
   13760:	vsub.f64	d7, d11, d9
   13764:	vabs.f64	d7, d7
   13768:	vcmpe.f64	d7, d8
   1376c:	vmrs	APSR_nzcv, fpscr
   13770:	bmi	138d4 <__assert_fail@plt+0x2604>
   13774:	vsub.f64	d7, d11, d10
   13778:	vabs.f64	d7, d7
   1377c:	vcmpe.f64	d7, d8
   13780:	vmrs	APSR_nzcv, fpscr
   13784:	bpl	1387c <__assert_fail@plt+0x25ac>
   13788:	mov	r2, #5
   1378c:	movw	r1, #22704	; 0x58b0
   13790:	mov	r0, #0
   13794:	movt	r1, #1
   13798:	bl	110cc <dcgettext@plt>
   1379c:	bl	1221c <__assert_fail@plt+0xf4c>
   137a0:	b	134b8 <__assert_fail@plt+0x21e8>
   137a4:	mov	r2, #5
   137a8:	movw	r1, #22592	; 0x5840
   137ac:	mov	r0, #0
   137b0:	movt	r1, #1
   137b4:	bl	110cc <dcgettext@plt>
   137b8:	ldr	r2, [sl, #28]
   137bc:	vldr	s13, [sl, #24]
   137c0:	vcvt.f32.u32	s14, s13
   137c4:	vmov	r1, s13
   137c8:	vmov	s13, r2
   137cc:	vcvt.f32.u32	s15, s13
   137d0:	vdiv.f32	s14, s14, s15
   137d4:	vcvt.f64.f32	d7, s14
   137d8:	vstr	d7, [sp]
   137dc:	bl	1221c <__assert_fail@plt+0xf4c>
   137e0:	b	13488 <__assert_fail@plt+0x21b8>
   137e4:	mov	r2, #5
   137e8:	movw	r1, #22920	; 0x5988
   137ec:	mov	r0, #0
   137f0:	movt	r1, #1
   137f4:	bl	110cc <dcgettext@plt>
   137f8:	bl	1221c <__assert_fail@plt+0xf4c>
   137fc:	b	13520 <__assert_fail@plt+0x2250>
   13800:	mov	r2, #5
   13804:	movw	r1, #22880	; 0x5960
   13808:	movt	r1, #1
   1380c:	bl	110cc <dcgettext@plt>
   13810:	bl	1221c <__assert_fail@plt+0xf4c>
   13814:	b	13520 <__assert_fail@plt+0x2250>
   13818:	mov	r2, #5
   1381c:	movw	r1, #22520	; 0x57f8
   13820:	mov	r0, #0
   13824:	movt	r1, #1
   13828:	bl	110cc <dcgettext@plt>
   1382c:	bl	12194 <__assert_fail@plt+0xec4>
   13830:	b	13458 <__assert_fail@plt+0x2188>
   13834:	mov	r2, #5
   13838:	movw	r1, #22476	; 0x57cc
   1383c:	mov	r0, #0
   13840:	movt	r1, #1
   13844:	bl	110cc <dcgettext@plt>
   13848:	bl	12194 <__assert_fail@plt+0xec4>
   1384c:	b	13440 <__assert_fail@plt+0x2170>
   13850:	mov	r0, r8
   13854:	mov	r2, #5
   13858:	movw	r1, #20792	; 0x5138
   1385c:	movt	r1, #1
   13860:	bl	110cc <dcgettext@plt>
   13864:	ldr	r2, [sp, #12]
   13868:	ldr	r1, [r2, #40]	; 0x28
   1386c:	ldrd	r2, [sl, #128]	; 0x80
   13870:	strd	r4, [sp]
   13874:	bl	12194 <__assert_fail@plt+0xec4>
   13878:	b	13690 <__assert_fail@plt+0x23c0>
   1387c:	mov	r2, #5
   13880:	movw	r1, #22724	; 0x58c4
   13884:	mov	r0, #0
   13888:	movt	r1, #1
   1388c:	bl	110cc <dcgettext@plt>
   13890:	vmov	r2, r3, d11
   13894:	bl	1221c <__assert_fail@plt+0xf4c>
   13898:	b	134b8 <__assert_fail@plt+0x21e8>
   1389c:	mov	r2, #5
   138a0:	movw	r1, #22744	; 0x58d8
   138a4:	mov	r0, #0
   138a8:	movt	r1, #1
   138ac:	bl	110cc <dcgettext@plt>
   138b0:	bl	1221c <__assert_fail@plt+0xf4c>
   138b4:	b	134ec <__assert_fail@plt+0x221c>
   138b8:	mov	r2, #5
   138bc:	movw	r1, #22900	; 0x5974
   138c0:	mov	r0, #0
   138c4:	movt	r1, #1
   138c8:	bl	110cc <dcgettext@plt>
   138cc:	bl	1221c <__assert_fail@plt+0xf4c>
   138d0:	b	13520 <__assert_fail@plt+0x2250>
   138d4:	mov	r2, #5
   138d8:	movw	r1, #22684	; 0x589c
   138dc:	mov	r0, #0
   138e0:	movt	r1, #1
   138e4:	bl	110cc <dcgettext@plt>
   138e8:	bl	1221c <__assert_fail@plt+0xf4c>
   138ec:	b	134b8 <__assert_fail@plt+0x21e8>
   138f0:	bl	110d8 <__stack_chk_fail@plt>
   138f4:	push	{r4, r5, r6, r7, r8, lr}
   138f8:	movw	r5, #29056	; 0x7180
   138fc:	movt	r5, #2
   13900:	sub	sp, sp, #24
   13904:	add	r7, sp, #16
   13908:	mov	r6, r0
   1390c:	ldr	r3, [r5]
   13910:	mov	r4, sp
   13914:	mov	r8, r1
   13918:	str	r3, [sp, #20]
   1391c:	mov	r0, r6
   13920:	mov	r1, #8
   13924:	bl	11288 <oggpackB_read@plt>
   13928:	str	r0, [r4, #4]!
   1392c:	cmp	r4, r7
   13930:	bne	1391c <__assert_fail@plt+0x264c>
   13934:	ldr	r3, [sp, #12]
   13938:	ldr	r2, [sp, #8]
   1393c:	ldr	ip, [sp, #20]
   13940:	lsl	r3, r3, #16
   13944:	ldr	r0, [r5]
   13948:	orr	r3, r3, r2, lsl #8
   1394c:	ldr	r1, [sp, #4]
   13950:	ldr	r2, [sp, #16]
   13954:	cmp	ip, r0
   13958:	orr	r3, r3, r1
   1395c:	orr	r3, r3, r2, lsl #24
   13960:	str	r3, [r8]
   13964:	bne	13970 <__assert_fail@plt+0x26a0>
   13968:	add	sp, sp, #24
   1396c:	pop	{r4, r5, r6, r7, r8, pc}
   13970:	bl	110d8 <__stack_chk_fail@plt>
   13974:	mov	r1, #0
   13978:	mov	r2, #104	; 0x68
   1397c:	b	11204 <memset@plt>
   13980:	push	{r3, r4, r5, lr}
   13984:	subs	r5, r0, #0
   13988:	popeq	{r3, r4, r5, pc}
   1398c:	ldr	r2, [r5, #8]
   13990:	ldr	r3, [r5]
   13994:	cmp	r2, #0
   13998:	movgt	r4, #0
   1399c:	ble	139c4 <__assert_fail@plt+0x26f4>
   139a0:	ldr	r0, [r3, r4, lsl #2]
   139a4:	add	r4, r4, #1
   139a8:	cmp	r0, #0
   139ac:	beq	139bc <__assert_fail@plt+0x26ec>
   139b0:	bl	11090 <free@plt>
   139b4:	ldr	r3, [r5]
   139b8:	ldr	r2, [r5, #8]
   139bc:	cmp	r2, r4
   139c0:	bgt	139a0 <__assert_fail@plt+0x26d0>
   139c4:	cmp	r3, #0
   139c8:	beq	139d4 <__assert_fail@plt+0x2704>
   139cc:	mov	r0, r3
   139d0:	bl	11090 <free@plt>
   139d4:	ldr	r0, [r5, #4]
   139d8:	cmp	r0, #0
   139dc:	beq	139e4 <__assert_fail@plt+0x2714>
   139e0:	bl	11090 <free@plt>
   139e4:	ldr	r0, [r5, #12]
   139e8:	cmp	r0, #0
   139ec:	beq	139f4 <__assert_fail@plt+0x2724>
   139f0:	bl	11090 <free@plt>
   139f4:	mov	r0, r5
   139f8:	mov	r1, #0
   139fc:	mov	r2, #16
   13a00:	pop	{r3, r4, r5, lr}
   13a04:	b	11204 <memset@plt>
   13a08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a0c:	movw	r6, #29056	; 0x7180
   13a10:	movt	r6, #2
   13a14:	sub	sp, sp, #20
   13a18:	subs	r8, r2, #0
   13a1c:	mov	fp, r0
   13a20:	ldr	r3, [r6]
   13a24:	mov	r7, r1
   13a28:	str	r3, [sp, #12]
   13a2c:	beq	13de4 <__assert_fail@plt+0x2b14>
   13a30:	mov	r0, #20
   13a34:	bl	1115c <malloc@plt>
   13a38:	ldm	r8, {r1, r2}
   13a3c:	mov	r4, r0
   13a40:	bl	111a4 <oggpackB_readinit@plt>
   13a44:	mov	r0, r4
   13a48:	mov	r1, #8
   13a4c:	bl	11288 <oggpackB_read@plt>
   13a50:	tst	r0, #128	; 0x80
   13a54:	mov	sl, r0
   13a58:	addne	r5, sp, #3
   13a5c:	addne	r9, sp, #9
   13a60:	beq	13ac0 <__assert_fail@plt+0x27f0>
   13a64:	mov	r0, r4
   13a68:	mov	r1, #8
   13a6c:	bl	11288 <oggpackB_read@plt>
   13a70:	strb	r0, [r5, #1]!
   13a74:	cmp	r5, r9
   13a78:	bne	13a64 <__assert_fail@plt+0x2794>
   13a7c:	movw	r1, #23932	; 0x5d7c
   13a80:	add	r0, sp, #4
   13a84:	movt	r1, #1
   13a88:	mov	r2, #6
   13a8c:	bl	110b4 <memcmp@plt>
   13a90:	subs	r9, r0, #0
   13a94:	bne	13ac0 <__assert_fail@plt+0x27f0>
   13a98:	cmp	sl, #129	; 0x81
   13a9c:	beq	13b30 <__assert_fail@plt+0x2860>
   13aa0:	cmp	sl, #130	; 0x82
   13aa4:	beq	13b10 <__assert_fail@plt+0x2840>
   13aa8:	cmp	sl, #128	; 0x80
   13aac:	movne	r0, r4
   13ab0:	mvnne	r9, #24
   13ab4:	beq	13ae8 <__assert_fail@plt+0x2818>
   13ab8:	bl	11090 <free@plt>
   13abc:	b	13acc <__assert_fail@plt+0x27fc>
   13ac0:	mov	r0, r4
   13ac4:	mvn	r9, #20
   13ac8:	bl	11090 <free@plt>
   13acc:	ldr	r2, [sp, #12]
   13ad0:	mov	r0, r9
   13ad4:	ldr	r3, [r6]
   13ad8:	cmp	r2, r3
   13adc:	bne	13dfc <__assert_fail@plt+0x2b2c>
   13ae0:	add	sp, sp, #20
   13ae4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ae8:	ldr	r3, [r8, #8]
   13aec:	cmp	r3, #0
   13af0:	beq	13dc4 <__assert_fail@plt+0x2af4>
   13af4:	ldrb	r3, [fp, #56]	; 0x38
   13af8:	mov	r0, r4
   13afc:	cmp	r3, #0
   13b00:	beq	13c7c <__assert_fail@plt+0x29ac>
   13b04:	mvn	r9, #19
   13b08:	bl	11090 <free@plt>
   13b0c:	b	13acc <__assert_fail@plt+0x27fc>
   13b10:	ldrb	r3, [fp, #56]	; 0x38
   13b14:	mov	r0, r4
   13b18:	cmp	r3, #0
   13b1c:	beq	13b04 <__assert_fail@plt+0x2834>
   13b20:	ldr	r3, [r7, #12]
   13b24:	cmp	r3, #0
   13b28:	bne	13ab8 <__assert_fail@plt+0x27e8>
   13b2c:	b	13b04 <__assert_fail@plt+0x2834>
   13b30:	ldrb	r3, [fp, #56]	; 0x38
   13b34:	mov	r0, r4
   13b38:	cmp	r3, #0
   13b3c:	beq	13b04 <__assert_fail@plt+0x2834>
   13b40:	mov	r1, sp
   13b44:	bl	138f4 <__assert_fail@plt+0x2624>
   13b48:	ldr	r8, [sp]
   13b4c:	cmp	r8, #0
   13b50:	blt	13df4 <__assert_fail@plt+0x2b24>
   13b54:	mov	r0, #1
   13b58:	add	r1, r8, r0
   13b5c:	bl	11024 <calloc@plt>
   13b60:	cmp	r8, #0
   13b64:	mov	r5, r0
   13b68:	str	r0, [r7, #12]
   13b6c:	beq	13dec <__assert_fail@plt+0x2b1c>
   13b70:	add	r8, r0, r8
   13b74:	mov	r0, r4
   13b78:	mov	r1, #8
   13b7c:	bl	11288 <oggpackB_read@plt>
   13b80:	strb	r0, [r5], #1
   13b84:	cmp	r5, r8
   13b88:	bne	13b74 <__assert_fail@plt+0x28a4>
   13b8c:	ldr	r5, [r7, #12]
   13b90:	ldr	r3, [sp]
   13b94:	mov	r8, #0
   13b98:	mov	r0, r4
   13b9c:	strb	r8, [r5, r3]
   13ba0:	add	r1, r7, #8
   13ba4:	bl	138f4 <__assert_fail@plt+0x2624>
   13ba8:	ldr	r5, [r7, #8]
   13bac:	cmp	r5, r8
   13bb0:	blt	13dd4 <__assert_fail@plt+0x2b04>
   13bb4:	mov	r1, #4
   13bb8:	mov	r0, r5
   13bbc:	bl	11024 <calloc@plt>
   13bc0:	mov	r1, #4
   13bc4:	str	r0, [r7]
   13bc8:	mov	r0, r5
   13bcc:	bl	11024 <calloc@plt>
   13bd0:	cmp	r5, r8
   13bd4:	str	r0, [r7, #4]
   13bd8:	beq	13c68 <__assert_fail@plt+0x2998>
   13bdc:	mov	r0, r4
   13be0:	mov	r1, sp
   13be4:	bl	138f4 <__assert_fail@plt+0x2624>
   13be8:	ldr	r5, [sp]
   13bec:	cmp	r5, #0
   13bf0:	blt	13dd4 <__assert_fail@plt+0x2b04>
   13bf4:	mov	r0, #1
   13bf8:	add	r1, r5, r0
   13bfc:	ldr	fp, [r7]
   13c00:	bl	11024 <calloc@plt>
   13c04:	cmp	r5, #0
   13c08:	lsl	sl, r8, #2
   13c0c:	str	r0, [fp, r8, lsl #2]
   13c10:	ldr	r3, [r7]
   13c14:	ldr	fp, [r3, r8, lsl #2]
   13c18:	beq	13c74 <__assert_fail@plt+0x29a4>
   13c1c:	add	r5, fp, r5
   13c20:	mov	r0, r4
   13c24:	mov	r1, #8
   13c28:	bl	11288 <oggpackB_read@plt>
   13c2c:	strb	r0, [fp], #1
   13c30:	cmp	fp, r5
   13c34:	bne	13c20 <__assert_fail@plt+0x2950>
   13c38:	ldr	r3, [r7]
   13c3c:	ldr	r5, [sp]
   13c40:	ldr	r3, [r3, sl]
   13c44:	mov	r2, #0
   13c48:	strb	r2, [r3, r5]
   13c4c:	ldr	r2, [sp]
   13c50:	add	r8, r8, #1
   13c54:	ldr	r3, [r7, #4]
   13c58:	str	r2, [r3, sl]
   13c5c:	ldr	r3, [r7, #8]
   13c60:	cmp	r8, r3
   13c64:	blt	13bdc <__assert_fail@plt+0x290c>
   13c68:	mov	r0, r4
   13c6c:	bl	11090 <free@plt>
   13c70:	b	13acc <__assert_fail@plt+0x27fc>
   13c74:	mov	r3, fp
   13c78:	b	13c44 <__assert_fail@plt+0x2974>
   13c7c:	mov	r1, #8
   13c80:	bl	11288 <oggpackB_read@plt>
   13c84:	mov	r1, #8
   13c88:	strb	r0, [fp, #56]	; 0x38
   13c8c:	mov	r0, r4
   13c90:	bl	11288 <oggpackB_read@plt>
   13c94:	mov	r1, #8
   13c98:	strb	r0, [fp, #57]	; 0x39
   13c9c:	mov	r0, r4
   13ca0:	bl	11288 <oggpackB_read@plt>
   13ca4:	mov	r1, #16
   13ca8:	strb	r0, [fp, #58]	; 0x3a
   13cac:	mov	r0, r4
   13cb0:	bl	11288 <oggpackB_read@plt>
   13cb4:	mov	r1, #16
   13cb8:	lsl	r3, r0, #4
   13cbc:	mov	r0, r4
   13cc0:	str	r3, [fp]
   13cc4:	bl	11288 <oggpackB_read@plt>
   13cc8:	mov	r1, #24
   13ccc:	lsl	r3, r0, #4
   13cd0:	mov	r0, r4
   13cd4:	str	r3, [fp, #4]
   13cd8:	bl	11288 <oggpackB_read@plt>
   13cdc:	mov	r1, #24
   13ce0:	str	r0, [fp, #8]
   13ce4:	mov	r0, r4
   13ce8:	bl	11288 <oggpackB_read@plt>
   13cec:	mov	r1, #8
   13cf0:	str	r0, [fp, #12]
   13cf4:	mov	r0, r4
   13cf8:	bl	11288 <oggpackB_read@plt>
   13cfc:	mov	r1, #8
   13d00:	str	r0, [fp, #16]
   13d04:	mov	r0, r4
   13d08:	bl	11288 <oggpackB_read@plt>
   13d0c:	mov	r1, #32
   13d10:	str	r0, [fp, #20]
   13d14:	mov	r0, r4
   13d18:	bl	11288 <oggpackB_read@plt>
   13d1c:	mov	r1, #32
   13d20:	str	r0, [fp, #24]
   13d24:	mov	r0, r4
   13d28:	bl	11288 <oggpackB_read@plt>
   13d2c:	mov	r1, #24
   13d30:	str	r0, [fp, #28]
   13d34:	mov	r0, r4
   13d38:	bl	11288 <oggpackB_read@plt>
   13d3c:	mov	r1, #24
   13d40:	str	r0, [fp, #32]
   13d44:	mov	r0, r4
   13d48:	bl	11288 <oggpackB_read@plt>
   13d4c:	mov	r1, #8
   13d50:	str	r0, [fp, #36]	; 0x24
   13d54:	mov	r0, r4
   13d58:	bl	11288 <oggpackB_read@plt>
   13d5c:	mov	r1, #24
   13d60:	str	r0, [fp, #40]	; 0x28
   13d64:	mov	r0, r4
   13d68:	bl	11288 <oggpackB_read@plt>
   13d6c:	mov	r1, #6
   13d70:	str	r0, [fp, #44]	; 0x2c
   13d74:	mov	r0, r4
   13d78:	bl	11288 <oggpackB_read@plt>
   13d7c:	mov	r1, #5
   13d80:	str	r0, [fp, #48]	; 0x30
   13d84:	mov	r0, r4
   13d88:	bl	11288 <oggpackB_read@plt>
   13d8c:	mov	r1, #2
   13d90:	str	r0, [fp, #60]	; 0x3c
   13d94:	mov	r0, r4
   13d98:	bl	11288 <oggpackB_read@plt>
   13d9c:	mov	r1, #3
   13da0:	str	r0, [fp, #100]	; 0x64
   13da4:	mov	r0, r4
   13da8:	bl	11288 <oggpackB_read@plt>
   13dac:	cmn	r0, #1
   13db0:	mov	r0, r4
   13db4:	movne	r9, #0
   13db8:	mvneq	r9, #19
   13dbc:	bl	11090 <free@plt>
   13dc0:	b	13acc <__assert_fail@plt+0x27fc>
   13dc4:	mov	r0, r4
   13dc8:	mvn	r9, #19
   13dcc:	bl	11090 <free@plt>
   13dd0:	b	13acc <__assert_fail@plt+0x27fc>
   13dd4:	mov	r0, r7
   13dd8:	mvn	r9, #19
   13ddc:	bl	13980 <__assert_fail@plt+0x26b0>
   13de0:	b	13c68 <__assert_fail@plt+0x2998>
   13de4:	mvn	r9, #19
   13de8:	b	13acc <__assert_fail@plt+0x27fc>
   13dec:	mov	r3, r9
   13df0:	b	13b94 <__assert_fail@plt+0x28c4>
   13df4:	mvn	r9, #19
   13df8:	b	13c68 <__assert_fail@plt+0x2998>
   13dfc:	bl	110d8 <__stack_chk_fail@plt>
   13e00:	push	{r4, r5, r6, r7, r8, lr}
   13e04:	mov	r7, r0
   13e08:	sub	sp, sp, #8
   13e0c:	mov	r0, r2
   13e10:	mov	r6, r3
   13e14:	mov	r4, r2
   13e18:	mov	r8, r1
   13e1c:	bl	111c8 <strlen@plt>
   13e20:	mov	ip, #0
   13e24:	str	r6, [sp]
   13e28:	mov	r1, r8
   13e2c:	mov	r2, r4
   13e30:	str	ip, [sp, #4]
   13e34:	mov	r5, r0
   13e38:	mov	r0, r7
   13e3c:	mov	r3, r5
   13e40:	ldrsb	r7, [sp, #32]
   13e44:	bl	14100 <__assert_fail@plt+0x2e30>
   13e48:	cmn	r0, #2
   13e4c:	beq	13eac <__assert_fail@plt+0x2bdc>
   13e50:	cmn	r0, #1
   13e54:	beq	13e60 <__assert_fail@plt+0x2b90>
   13e58:	add	sp, sp, #8
   13e5c:	pop	{r4, r5, r6, r7, r8, pc}
   13e60:	add	r0, r5, #1
   13e64:	bl	1115c <malloc@plt>
   13e68:	subs	r5, r0, #0
   13e6c:	beq	13eac <__assert_fail@plt+0x2bdc>
   13e70:	mov	r1, r4
   13e74:	bl	11120 <strcpy@plt>
   13e78:	str	r5, [r6]
   13e7c:	ldrb	r3, [r5]
   13e80:	cmp	r3, #0
   13e84:	addne	r2, r5, #1
   13e88:	beq	13ea0 <__assert_fail@plt+0x2bd0>
   13e8c:	tst	r3, #128	; 0x80
   13e90:	strbne	r7, [r2, #-1]
   13e94:	ldrb	r3, [r2], #1
   13e98:	cmp	r3, #0
   13e9c:	bne	13e8c <__assert_fail@plt+0x2bbc>
   13ea0:	mov	r0, #3
   13ea4:	add	sp, sp, #8
   13ea8:	pop	{r4, r5, r6, r7, r8, pc}
   13eac:	mvn	r0, #0
   13eb0:	b	13e58 <__assert_fail@plt+0x2b88>
   13eb4:	push	{r3, r4, r5, lr}
   13eb8:	subs	r5, r0, #0
   13ebc:	movw	r4, #29088	; 0x71a0
   13ec0:	movt	r4, #2
   13ec4:	beq	13ef4 <__assert_fail@plt+0x2c24>
   13ec8:	ldr	r0, [r4]
   13ecc:	bl	11090 <free@plt>
   13ed0:	mov	r3, #0
   13ed4:	str	r3, [r4]
   13ed8:	ldrsb	r3, [r5]
   13edc:	cmp	r3, #0
   13ee0:	popeq	{r3, r4, r5, pc}
   13ee4:	mov	r0, r5
   13ee8:	bl	111f8 <__strdup@plt>
   13eec:	str	r0, [r4]
   13ef0:	pop	{r3, r4, r5, pc}
   13ef4:	movw	r0, #25584	; 0x63f0
   13ef8:	movt	r0, #1
   13efc:	bl	11150 <getenv@plt>
   13f00:	subs	r5, r0, #0
   13f04:	bne	13ec8 <__assert_fail@plt+0x2bf8>
   13f08:	mov	r0, #14
   13f0c:	bl	11264 <nl_langinfo@plt>
   13f10:	mov	r5, r0
   13f14:	ldr	r0, [r4]
   13f18:	bl	11090 <free@plt>
   13f1c:	cmp	r5, #0
   13f20:	mov	r3, #0
   13f24:	str	r3, [r4]
   13f28:	popeq	{r3, r4, r5, pc}
   13f2c:	b	13ed8 <__assert_fail@plt+0x2c08>
   13f30:	push	{r4, lr}
   13f34:	movw	r4, #29088	; 0x71a0
   13f38:	movt	r4, #2
   13f3c:	mov	r2, r0
   13f40:	sub	sp, sp, #16
   13f44:	mov	r3, r1
   13f48:	ldr	r0, [r4]
   13f4c:	cmp	r0, #0
   13f50:	beq	13f70 <__assert_fail@plt+0x2ca0>
   13f54:	mov	ip, #35	; 0x23
   13f58:	movw	r1, #25604	; 0x6404
   13f5c:	str	ip, [sp]
   13f60:	movt	r1, #1
   13f64:	bl	13e00 <__assert_fail@plt+0x2b30>
   13f68:	add	sp, sp, #16
   13f6c:	pop	{r4, pc}
   13f70:	str	r2, [sp, #12]
   13f74:	str	r1, [sp, #8]
   13f78:	bl	13eb4 <__assert_fail@plt+0x2be4>
   13f7c:	ldr	r0, [r4]
   13f80:	movw	r1, #25592	; 0x63f8
   13f84:	movt	r1, #1
   13f88:	ldr	r3, [sp, #8]
   13f8c:	cmp	r0, #0
   13f90:	ldr	r2, [sp, #12]
   13f94:	moveq	r0, r1
   13f98:	b	13f54 <__assert_fail@plt+0x2c84>
   13f9c:	push	{r4, r5, lr}
   13fa0:	mov	r2, r0
   13fa4:	ldrsb	r4, [r0]
   13fa8:	sub	sp, sp, #20
   13fac:	mov	r5, r1
   13fb0:	cmp	r4, #0
   13fb4:	beq	13fec <__assert_fail@plt+0x2d1c>
   13fb8:	movw	r4, #29088	; 0x71a0
   13fbc:	movt	r4, #2
   13fc0:	ldr	r1, [r4]
   13fc4:	cmp	r1, #0
   13fc8:	beq	1400c <__assert_fail@plt+0x2d3c>
   13fcc:	mov	ip, #63	; 0x3f
   13fd0:	mov	r3, r5
   13fd4:	str	ip, [sp]
   13fd8:	movw	r0, #25604	; 0x6404
   13fdc:	movt	r0, #1
   13fe0:	bl	13e00 <__assert_fail@plt+0x2b30>
   13fe4:	add	sp, sp, #20
   13fe8:	pop	{r4, r5, pc}
   13fec:	mov	r0, #1
   13ff0:	bl	1115c <malloc@plt>
   13ff4:	mov	r3, r0
   13ff8:	strb	r4, [r0]
   13ffc:	mov	r0, #1
   14000:	str	r3, [r5]
   14004:	add	sp, sp, #20
   14008:	pop	{r4, r5, pc}
   1400c:	mov	r0, r1
   14010:	str	r2, [sp, #12]
   14014:	bl	13eb4 <__assert_fail@plt+0x2be4>
   14018:	ldr	r1, [r4]
   1401c:	movw	r3, #25592	; 0x63f8
   14020:	movt	r3, #1
   14024:	cmp	r1, #0
   14028:	ldr	r2, [sp, #12]
   1402c:	moveq	r1, r3
   14030:	b	13fcc <__assert_fail@plt+0x2cfc>
   14034:	push	{r4, r5, r6, lr}
   14038:	mov	r6, r0
   1403c:	bl	111c8 <strlen@plt>
   14040:	cmp	r0, #0
   14044:	movwne	r5, #25536	; 0x63c0
   14048:	movtne	r5, #1
   1404c:	beq	140f8 <__assert_fail@plt+0x2e28>
   14050:	ldrb	r4, [r6]
   14054:	tst	r4, #128	; 0x80
   14058:	beq	14094 <__assert_fail@plt+0x2dc4>
   1405c:	movw	r3, #25536	; 0x63c0
   14060:	movt	r3, #1
   14064:	mov	r2, #1
   14068:	ldrb	ip, [r3, #8]
   1406c:	add	r3, r3, #8
   14070:	ldrb	r1, [r3, #1]
   14074:	and	ip, ip, r4
   14078:	cmp	ip, r1
   1407c:	beq	14098 <__assert_fail@plt+0x2dc8>
   14080:	add	r2, r2, #1
   14084:	cmp	r2, #6
   14088:	bne	14068 <__assert_fail@plt+0x2d98>
   1408c:	mov	r0, #0
   14090:	pop	{r4, r5, r6, pc}
   14094:	mov	r2, #0
   14098:	add	r2, r5, r2, lsl #3
   1409c:	ldr	ip, [r2, #4]
   140a0:	add	r4, ip, #1
   140a4:	cmp	r4, r0
   140a8:	bhi	1408c <__assert_fail@plt+0x2dbc>
   140ac:	cmp	ip, #0
   140b0:	add	r3, r6, #1
   140b4:	ble	140e8 <__assert_fail@plt+0x2e18>
   140b8:	ldrsb	r2, [r6, #1]
   140bc:	and	r2, r2, #192	; 0xc0
   140c0:	cmp	r2, #128	; 0x80
   140c4:	bne	1408c <__assert_fail@plt+0x2dbc>
   140c8:	add	r1, r6, ip
   140cc:	b	140e0 <__assert_fail@plt+0x2e10>
   140d0:	ldrsb	r2, [r3, #1]!
   140d4:	and	r2, r2, #192	; 0xc0
   140d8:	cmp	r2, #128	; 0x80
   140dc:	bne	1408c <__assert_fail@plt+0x2dbc>
   140e0:	cmp	r3, r1
   140e4:	bne	140d0 <__assert_fail@plt+0x2e00>
   140e8:	rsb	r0, ip, r0
   140ec:	add	r6, r6, r4
   140f0:	subs	r0, r0, #1
   140f4:	bne	14050 <__assert_fail@plt+0x2d80>
   140f8:	mov	r0, #1
   140fc:	pop	{r4, r5, r6, pc}
   14100:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14104:	sub	sp, sp, #2128	; 0x850
   14108:	sub	sp, sp, #4
   1410c:	movw	ip, #29056	; 0x7180
   14110:	movt	ip, #2
   14114:	mov	r7, r0
   14118:	str	ip, [sp, #24]
   1411c:	mov	r4, r1
   14120:	ldr	ip, [ip]
   14124:	mov	r1, r0
   14128:	movw	r0, #25604	; 0x6404
   1412c:	movt	r0, #1
   14130:	mov	r5, r2
   14134:	mov	r8, r3
   14138:	str	ip, [sp, #2124]	; 0x84c
   1413c:	ldr	ip, [sp, #2168]	; 0x878
   14140:	str	ip, [sp, #32]
   14144:	ldr	ip, [sp, #2172]	; 0x87c
   14148:	str	ip, [sp, #36]	; 0x24
   1414c:	bl	11168 <iconv_open@plt>
   14150:	cmn	r0, #1
   14154:	mov	fp, r0
   14158:	beq	145d4 <__assert_fail@plt+0x3304>
   1415c:	movw	r0, #25624	; 0x6418
   14160:	ldrsb	r1, [r4]
   14164:	movt	r0, #1
   14168:	bl	111d4 <strchr@plt>
   1416c:	cmp	r0, #0
   14170:	beq	141b0 <__assert_fail@plt+0x2ee0>
   14174:	movw	r0, #25628	; 0x641c
   14178:	ldrsb	r1, [r4, #1]
   1417c:	movt	r0, #1
   14180:	bl	111d4 <strchr@plt>
   14184:	cmp	r0, #0
   14188:	beq	141b0 <__assert_fail@plt+0x2ee0>
   1418c:	movw	r0, #25632	; 0x6420
   14190:	ldrsb	r1, [r4, #2]
   14194:	movt	r0, #1
   14198:	bl	111d4 <strchr@plt>
   1419c:	cmp	r0, #0
   141a0:	beq	141b0 <__assert_fail@plt+0x2ee0>
   141a4:	ldrsb	r3, [r4, #3]
   141a8:	cmp	r3, #45	; 0x2d
   141ac:	beq	14888 <__assert_fail@plt+0x35b8>
   141b0:	mov	r0, r4
   141b4:	bl	111c8 <strlen@plt>
   141b8:	mov	r6, r0
   141bc:	add	r0, r0, #11
   141c0:	bl	1115c <malloc@plt>
   141c4:	subs	r9, r0, #0
   141c8:	beq	14814 <__assert_fail@plt+0x3544>
   141cc:	mov	r2, r6
   141d0:	mov	r1, r4
   141d4:	bl	110a8 <memcpy@plt>
   141d8:	movw	r3, #25636	; 0x6424
   141dc:	movt	r3, #1
   141e0:	add	r2, r9, r6
   141e4:	ldm	r3!, {r0, r1}
   141e8:	ldrh	ip, [r3]
   141ec:	ldrb	r3, [r3, #2]
   141f0:	str	r0, [r9, r6]
   141f4:	mov	r0, r9
   141f8:	str	r1, [r2, #4]
   141fc:	movw	r1, #25604	; 0x6404
   14200:	strh	ip, [r2, #8]
   14204:	movt	r1, #1
   14208:	strb	r3, [r2, #10]
   1420c:	bl	11168 <iconv_open@plt>
   14210:	mov	r6, r0
   14214:	mov	r0, r9
   14218:	bl	11090 <free@plt>
   1421c:	cmn	r6, #1
   14220:	beq	14934 <__assert_fail@plt+0x3664>
   14224:	mov	r0, #1
   14228:	bl	1115c <malloc@plt>
   1422c:	subs	r9, r0, #0
   14230:	beq	14854 <__assert_fail@plt+0x3584>
   14234:	mov	r3, #1
   14238:	add	r4, sp, #2128	; 0x850
   1423c:	str	r5, [sp, #52]	; 0x34
   14240:	mov	r7, r3
   14244:	str	r8, [sp, #60]	; 0x3c
   14248:	mov	r5, #0
   1424c:	mov	r8, #35	; 0x23
   14250:	str	r9, [sp, #56]	; 0x38
   14254:	str	r3, [r4, #-2064]!	; 0xfffff7f0
   14258:	str	r4, [sp]
   1425c:	mov	r0, fp
   14260:	add	r1, sp, #52	; 0x34
   14264:	add	r2, sp, #60	; 0x3c
   14268:	add	r3, sp, #56	; 0x38
   1426c:	bl	11060 <iconv@plt>
   14270:	cmn	r0, #1
   14274:	beq	1436c <__assert_fail@plt+0x309c>
   14278:	ldr	r8, [sp, #60]	; 0x3c
   1427c:	cmp	r8, #0
   14280:	beq	142a4 <__assert_fail@plt+0x2fd4>
   14284:	movw	r0, #25648	; 0x6430
   14288:	movw	r1, #25844	; 0x64f4
   1428c:	movw	r3, #25612	; 0x640c
   14290:	movt	r0, #1
   14294:	movt	r1, #1
   14298:	mov	r2, #115	; 0x73
   1429c:	movt	r3, #1
   142a0:	bl	112d0 <__assert_fail@plt>
   142a4:	cmn	r6, #1
   142a8:	beq	148c8 <__assert_fail@plt+0x35f8>
   142ac:	ldr	r3, [sp, #56]	; 0x38
   142b0:	mov	r0, r9
   142b4:	rsb	r3, r9, r3
   142b8:	str	r3, [sp, #28]
   142bc:	mov	r1, r3
   142c0:	bl	110f0 <realloc@plt>
   142c4:	cmp	r0, #0
   142c8:	str	r0, [sp, #44]	; 0x2c
   142cc:	beq	148ac <__assert_fail@plt+0x35dc>
   142d0:	ldr	ip, [sp, #28]
   142d4:	str	r0, [sp, #52]	; 0x34
   142d8:	cmp	ip, #0
   142dc:	str	ip, [sp, #60]	; 0x3c
   142e0:	beq	14984 <__assert_fail@plt+0x36b4>
   142e4:	add	ip, sp, #80	; 0x50
   142e8:	str	ip, [sp, #40]	; 0x28
   142ec:	ldr	ip, [sp, #40]	; 0x28
   142f0:	add	r7, sp, #76	; 0x4c
   142f4:	mov	r9, #2048	; 0x800
   142f8:	sub	ip, ip, #12
   142fc:	str	ip, [sp, #16]
   14300:	ldr	ip, [sp, #40]	; 0x28
   14304:	sub	ip, ip, #8
   14308:	str	ip, [sp, #20]
   1430c:	movw	ip, #26008	; 0x6598
   14310:	movt	ip, #1
   14314:	str	ip, [sp, #12]
   14318:	str	r4, [sp]
   1431c:	mov	r0, r6
   14320:	add	r1, sp, #52	; 0x34
   14324:	add	r2, sp, #60	; 0x3c
   14328:	add	r3, sp, #56	; 0x38
   1432c:	str	r7, [sp, #56]	; 0x38
   14330:	str	r9, [sp, #64]	; 0x40
   14334:	bl	11060 <iconv@plt>
   14338:	cmn	r0, #1
   1433c:	beq	146e4 <__assert_fail@plt+0x3414>
   14340:	ldr	r3, [sp, #60]	; 0x3c
   14344:	cmp	r3, #0
   14348:	beq	1442c <__assert_fail@plt+0x315c>
   1434c:	movw	r0, #25856	; 0x6500
   14350:	movw	r1, #25844	; 0x64f4
   14354:	movw	r3, #25612	; 0x640c
   14358:	movt	r0, #1
   1435c:	movt	r1, #1
   14360:	mov	r2, #173	; 0xad
   14364:	movt	r3, #1
   14368:	bl	112d0 <__assert_fail@plt>
   1436c:	bl	111ec <__errno_location@plt>
   14370:	ldr	r3, [r0]
   14374:	cmp	r3, #7
   14378:	beq	143d8 <__assert_fail@plt+0x3108>
   1437c:	cmp	r3, #22
   14380:	cmpne	r3, #84	; 0x54
   14384:	bne	14284 <__assert_fail@plt+0x2fb4>
   14388:	ldr	r2, [sp, #60]	; 0x3c
   1438c:	cmp	r2, #0
   14390:	beq	14284 <__assert_fail@plt+0x2fb4>
   14394:	ldr	r3, [sp, #64]	; 0x40
   14398:	cmp	r3, #5
   1439c:	bls	143f0 <__assert_fail@plt+0x3120>
   143a0:	ldr	r3, [sp, #56]	; 0x38
   143a4:	sub	r1, r2, #1
   143a8:	ldr	r2, [sp, #52]	; 0x34
   143ac:	mov	r5, #2
   143b0:	str	r1, [sp, #60]	; 0x3c
   143b4:	add	r1, r3, #1
   143b8:	add	r2, r2, #1
   143bc:	str	r1, [sp, #56]	; 0x38
   143c0:	str	r2, [sp, #52]	; 0x34
   143c4:	strb	r8, [r3]
   143c8:	ldr	r3, [sp, #64]	; 0x40
   143cc:	sub	r3, r3, #1
   143d0:	str	r3, [sp, #64]	; 0x40
   143d4:	b	14258 <__assert_fail@plt+0x2f88>
   143d8:	ldr	r3, [sp, #60]	; 0x3c
   143dc:	cmp	r3, #0
   143e0:	beq	14284 <__assert_fail@plt+0x2fb4>
   143e4:	ldr	r3, [sp, #64]	; 0x40
   143e8:	cmp	r3, #5
   143ec:	bhi	14284 <__assert_fail@plt+0x2fb4>
   143f0:	lsl	r7, r7, #1
   143f4:	mov	r0, r9
   143f8:	mov	r1, r7
   143fc:	bl	110f0 <realloc@plt>
   14400:	cmp	r0, #0
   14404:	beq	14854 <__assert_fail@plt+0x3584>
   14408:	ldr	r3, [sp, #56]	; 0x38
   1440c:	rsb	r3, r9, r3
   14410:	mov	r9, r0
   14414:	add	r3, r0, r3
   14418:	str	r3, [sp, #56]	; 0x38
   1441c:	rsb	r3, r3, r0
   14420:	add	r3, r3, r7
   14424:	str	r3, [sp, #64]	; 0x40
   14428:	b	14258 <__assert_fail@plt+0x2f88>
   1442c:	ldr	r3, [sp, #56]	; 0x38
   14430:	rsb	r3, r7, r3
   14434:	add	r8, r8, r3
   14438:	mov	r1, #0
   1443c:	str	r4, [sp]
   14440:	mov	r2, r1
   14444:	mov	r0, r6
   14448:	add	r3, sp, #56	; 0x38
   1444c:	mov	ip, #2048	; 0x800
   14450:	str	r7, [sp, #56]	; 0x38
   14454:	str	ip, [sp, #64]	; 0x40
   14458:	bl	11060 <iconv@plt>
   1445c:	cmn	r0, #1
   14460:	beq	149f8 <__assert_fail@plt+0x3728>
   14464:	ldr	r3, [sp, #56]	; 0x38
   14468:	rsb	r7, r7, r3
   1446c:	add	r7, r8, r7
   14470:	str	r7, [sp, #16]
   14474:	add	r0, r7, #1
   14478:	bl	1115c <malloc@plt>
   1447c:	cmp	r0, #0
   14480:	str	r0, [sp, #20]
   14484:	beq	148a8 <__assert_fail@plt+0x35d8>
   14488:	ldr	ip, [sp, #44]	; 0x2c
   1448c:	movw	r7, #26008	; 0x6598
   14490:	ldr	r8, [sp, #28]
   14494:	movt	r7, #1
   14498:	mov	sl, #1
   1449c:	str	r0, [sp, #56]	; 0x38
   144a0:	str	ip, [sp, #52]	; 0x34
   144a4:	ldr	ip, [sp, #16]
   144a8:	str	r8, [sp, #60]	; 0x3c
   144ac:	str	ip, [sp, #64]	; 0x40
   144b0:	ldr	ip, [sp, #40]	; 0x28
   144b4:	sub	ip, ip, #12
   144b8:	str	ip, [sp, #8]
   144bc:	ldr	ip, [sp, #40]	; 0x28
   144c0:	sub	ip, ip, #8
   144c4:	str	ip, [sp, #12]
   144c8:	cmp	r8, #0
   144cc:	beq	1455c <__assert_fail@plt+0x328c>
   144d0:	str	r4, [sp]
   144d4:	mov	r0, r6
   144d8:	add	r1, sp, #52	; 0x34
   144dc:	add	r2, sp, #60	; 0x3c
   144e0:	add	r3, sp, #56	; 0x38
   144e4:	bl	11060 <iconv@plt>
   144e8:	cmn	r0, #1
   144ec:	mov	r9, r0
   144f0:	beq	14520 <__assert_fail@plt+0x3250>
   144f4:	ldr	r8, [sp, #60]	; 0x3c
   144f8:	cmp	r8, #0
   144fc:	beq	1453c <__assert_fail@plt+0x326c>
   14500:	movw	r0, #26124	; 0x660c
   14504:	movw	r1, #25844	; 0x64f4
   14508:	movw	r3, #25612	; 0x640c
   1450c:	movt	r0, #1
   14510:	movt	r1, #1
   14514:	mov	r2, #207	; 0xcf
   14518:	movt	r3, #1
   1451c:	bl	112d0 <__assert_fail@plt>
   14520:	bl	111ec <__errno_location@plt>
   14524:	ldr	r3, [r0]
   14528:	cmp	r3, #84	; 0x54
   1452c:	bne	14500 <__assert_fail@plt+0x3230>
   14530:	ldr	r8, [sp, #60]	; 0x3c
   14534:	cmp	r8, #0
   14538:	beq	14500 <__assert_fail@plt+0x3230>
   1453c:	adds	r3, r9, #0
   14540:	movne	r3, #1
   14544:	cmp	r5, #0
   14548:	movne	r3, #0
   1454c:	cmp	r3, #0
   14550:	movne	r5, #1
   14554:	cmp	r8, #0
   14558:	bne	145f4 <__assert_fail@plt+0x3324>
   1455c:	mov	r1, #0
   14560:	str	r4, [sp]
   14564:	add	r3, sp, #56	; 0x38
   14568:	mov	r2, r1
   1456c:	mov	r0, r6
   14570:	bl	11060 <iconv@plt>
   14574:	cmn	r0, #1
   14578:	beq	14998 <__assert_fail@plt+0x36c8>
   1457c:	ldr	r3, [sp, #64]	; 0x40
   14580:	cmp	r3, #0
   14584:	bne	149d8 <__assert_fail@plt+0x3708>
   14588:	ldr	r3, [sp, #56]	; 0x38
   1458c:	ldr	r0, [sp, #44]	; 0x2c
   14590:	strb	r8, [r3]
   14594:	bl	11090 <free@plt>
   14598:	mov	r0, fp
   1459c:	bl	11054 <iconv_close@plt>
   145a0:	mov	r0, r6
   145a4:	bl	11054 <iconv_close@plt>
   145a8:	ldr	ip, [sp, #36]	; 0x24
   145ac:	cmp	ip, #0
   145b0:	ldrne	r1, [sp, #16]
   145b4:	strne	r1, [ip]
   145b8:	ldr	ip, [sp, #32]
   145bc:	cmp	ip, #0
   145c0:	beq	1495c <__assert_fail@plt+0x368c>
   145c4:	ldr	ip, [sp, #20]
   145c8:	mov	r0, r5
   145cc:	ldr	r1, [sp, #32]
   145d0:	str	ip, [r1]
   145d4:	ldr	ip, [sp, #24]
   145d8:	ldr	r2, [sp, #2124]	; 0x84c
   145dc:	ldr	r3, [ip]
   145e0:	cmp	r2, r3
   145e4:	bne	149b8 <__assert_fail@plt+0x36e8>
   145e8:	add	sp, sp, #2128	; 0x850
   145ec:	add	sp, sp, #4
   145f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   145f4:	cmn	r9, #1
   145f8:	bne	1460c <__assert_fail@plt+0x333c>
   145fc:	bl	111ec <__errno_location@plt>
   14600:	ldr	r3, [r0]
   14604:	cmp	r3, #7
   14608:	beq	144c8 <__assert_fail@plt+0x31f8>
   1460c:	str	r4, [sp]
   14610:	mov	r0, r6
   14614:	ldr	r1, [sp, #8]
   14618:	add	r3, sp, #56	; 0x38
   1461c:	ldr	r2, [sp, #12]
   14620:	str	r7, [sp, #68]	; 0x44
   14624:	str	sl, [sp, #72]	; 0x48
   14628:	bl	11060 <iconv@plt>
   1462c:	cmn	r0, #1
   14630:	beq	14660 <__assert_fail@plt+0x3390>
   14634:	ldr	r3, [sp, #72]	; 0x48
   14638:	cmp	r3, #0
   1463c:	beq	1467c <__assert_fail@plt+0x33ac>
   14640:	movw	r0, #26012	; 0x659c
   14644:	movw	r1, #25844	; 0x64f4
   14648:	movw	r3, #25612	; 0x640c
   1464c:	movt	r0, #1
   14650:	movt	r1, #1
   14654:	mov	r2, #217	; 0xd9
   14658:	movt	r3, #1
   1465c:	bl	112d0 <__assert_fail@plt>
   14660:	bl	111ec <__errno_location@plt>
   14664:	ldr	r3, [r0]
   14668:	cmp	r3, #84	; 0x54
   1466c:	bne	14640 <__assert_fail@plt+0x3370>
   14670:	ldr	r3, [sp, #72]	; 0x48
   14674:	cmp	r3, #0
   14678:	beq	14640 <__assert_fail@plt+0x3370>
   1467c:	ldr	r0, [sp, #60]	; 0x3c
   14680:	ldr	r3, [sp, #52]	; 0x34
   14684:	sub	r2, r0, #1
   14688:	str	r2, [sp, #60]	; 0x3c
   1468c:	cmp	r2, #0
   14690:	add	r1, r3, #1
   14694:	str	r1, [sp, #52]	; 0x34
   14698:	beq	14880 <__assert_fail@plt+0x35b0>
   1469c:	ldrsb	r1, [r3, #1]
   146a0:	cmp	r1, #0
   146a4:	bge	148c0 <__assert_fail@plt+0x35f0>
   146a8:	sub	r8, r0, #2
   146ac:	add	r0, r3, r0
   146b0:	add	r3, r3, #2
   146b4:	b	146d0 <__assert_fail@plt+0x3400>
   146b8:	ldrsb	r2, [r3]
   146bc:	sub	r1, r8, #1
   146c0:	add	r3, r3, #1
   146c4:	cmp	r2, #0
   146c8:	bge	144c8 <__assert_fail@plt+0x31f8>
   146cc:	mov	r8, r1
   146d0:	cmp	r3, r0
   146d4:	str	r3, [sp, #52]	; 0x34
   146d8:	str	r8, [sp, #60]	; 0x3c
   146dc:	bne	146b8 <__assert_fail@plt+0x33e8>
   146e0:	b	144c8 <__assert_fail@plt+0x31f8>
   146e4:	bl	111ec <__errno_location@plt>
   146e8:	ldr	r3, [r0]
   146ec:	str	r0, [sp, #8]
   146f0:	cmp	r3, #7
   146f4:	beq	149bc <__assert_fail@plt+0x36ec>
   146f8:	cmp	r3, #84	; 0x54
   146fc:	bne	1434c <__assert_fail@plt+0x307c>
   14700:	ldr	r3, [sp, #60]	; 0x3c
   14704:	cmp	r3, #0
   14708:	beq	1434c <__assert_fail@plt+0x307c>
   1470c:	ldr	lr, [sp, #12]
   14710:	mov	r0, r6
   14714:	ldr	ip, [sp, #56]	; 0x38
   14718:	add	r3, sp, #56	; 0x38
   1471c:	str	r4, [sp]
   14720:	ldr	r1, [sp, #16]
   14724:	rsb	sl, r7, ip
   14728:	ldr	r2, [sp, #20]
   1472c:	mov	ip, #1
   14730:	str	lr, [sp, #68]	; 0x44
   14734:	str	ip, [sp, #72]	; 0x48
   14738:	str	r9, [sp, #64]	; 0x40
   1473c:	str	r7, [sp, #56]	; 0x38
   14740:	bl	11060 <iconv@plt>
   14744:	cmn	r0, #1
   14748:	beq	14778 <__assert_fail@plt+0x34a8>
   1474c:	ldr	r3, [sp, #72]	; 0x48
   14750:	cmp	r3, #0
   14754:	beq	14794 <__assert_fail@plt+0x34c4>
   14758:	movw	r0, #26012	; 0x659c
   1475c:	movw	r1, #25844	; 0x64f4
   14760:	movw	r3, #25612	; 0x640c
   14764:	movt	r0, #1
   14768:	movt	r1, #1
   1476c:	mov	r2, #184	; 0xb8
   14770:	movt	r3, #1
   14774:	bl	112d0 <__assert_fail@plt>
   14778:	ldr	ip, [sp, #8]
   1477c:	ldr	r3, [ip]
   14780:	cmp	r3, #84	; 0x54
   14784:	bne	14758 <__assert_fail@plt+0x3488>
   14788:	ldr	r3, [sp, #72]	; 0x48
   1478c:	cmp	r3, #0
   14790:	beq	14758 <__assert_fail@plt+0x3488>
   14794:	ldr	lr, [sp, #60]	; 0x3c
   14798:	ldr	r3, [sp, #52]	; 0x34
   1479c:	sub	r2, lr, #1
   147a0:	str	r2, [sp, #60]	; 0x3c
   147a4:	cmp	r2, #0
   147a8:	add	r2, r3, #1
   147ac:	str	r2, [sp, #52]	; 0x34
   147b0:	beq	1482c <__assert_fail@plt+0x355c>
   147b4:	ldrsb	r2, [r3, #1]
   147b8:	cmp	r2, #0
   147bc:	bge	14840 <__assert_fail@plt+0x3570>
   147c0:	sub	r2, lr, #2
   147c4:	add	lr, r3, lr
   147c8:	add	r3, r3, #2
   147cc:	b	147e8 <__assert_fail@plt+0x3518>
   147d0:	ldrsb	r1, [r3]
   147d4:	sub	r0, r2, #1
   147d8:	add	r3, r3, #1
   147dc:	cmp	r1, #0
   147e0:	bge	147f8 <__assert_fail@plt+0x3528>
   147e4:	mov	r2, r0
   147e8:	cmp	r3, lr
   147ec:	str	r3, [sp, #52]	; 0x34
   147f0:	str	r2, [sp, #60]	; 0x3c
   147f4:	bne	147d0 <__assert_fail@plt+0x3500>
   147f8:	ldr	r3, [sp, #56]	; 0x38
   147fc:	cmp	r2, #0
   14800:	rsb	r3, r7, r3
   14804:	add	ip, r3, sl
   14808:	add	r8, r8, ip
   1480c:	bne	14318 <__assert_fail@plt+0x3048>
   14810:	b	14438 <__assert_fail@plt+0x3168>
   14814:	mov	r0, r9
   14818:	bl	11090 <free@plt>
   1481c:	mov	r0, fp
   14820:	bl	11054 <iconv_close@plt>
   14824:	mvn	r0, #1
   14828:	b	145d4 <__assert_fail@plt+0x3304>
   1482c:	ldr	r3, [sp, #56]	; 0x38
   14830:	rsb	r3, r7, r3
   14834:	add	sl, r3, sl
   14838:	add	r8, r8, sl
   1483c:	b	14438 <__assert_fail@plt+0x3168>
   14840:	ldr	r3, [sp, #56]	; 0x38
   14844:	rsb	r3, r7, r3
   14848:	add	ip, r3, sl
   1484c:	add	r8, r8, ip
   14850:	b	14318 <__assert_fail@plt+0x3048>
   14854:	mov	r0, r9
   14858:	bl	11090 <free@plt>
   1485c:	mov	r0, fp
   14860:	bl	11054 <iconv_close@plt>
   14864:	cmn	r6, #1
   14868:	mvneq	r0, #1
   1486c:	beq	145d4 <__assert_fail@plt+0x3304>
   14870:	mov	r0, r6
   14874:	bl	11054 <iconv_close@plt>
   14878:	mvn	r0, #1
   1487c:	b	145d4 <__assert_fail@plt+0x3304>
   14880:	mov	r8, r2
   14884:	b	1455c <__assert_fail@plt+0x328c>
   14888:	ldrsb	r3, [r4, #4]
   1488c:	cmp	r3, #56	; 0x38
   14890:	bne	141b0 <__assert_fail@plt+0x2ee0>
   14894:	ldrsb	r3, [r4, #5]
   14898:	cmp	r3, #0
   1489c:	bne	141b0 <__assert_fail@plt+0x2ee0>
   148a0:	mvn	r6, #0
   148a4:	b	14224 <__assert_fail@plt+0x2f54>
   148a8:	ldr	r9, [sp, #44]	; 0x2c
   148ac:	mov	r0, r9
   148b0:	bl	11090 <free@plt>
   148b4:	mov	r0, fp
   148b8:	bl	11054 <iconv_close@plt>
   148bc:	b	14870 <__assert_fail@plt+0x35a0>
   148c0:	mov	r8, r2
   148c4:	b	144c8 <__assert_fail@plt+0x31f8>
   148c8:	ldr	ip, [sp, #36]	; 0x24
   148cc:	cmp	ip, #0
   148d0:	ldrne	r3, [sp, #56]	; 0x38
   148d4:	rsbne	r3, r9, r3
   148d8:	strne	r3, [ip]
   148dc:	ldr	ip, [sp, #32]
   148e0:	cmp	ip, #0
   148e4:	beq	1496c <__assert_fail@plt+0x369c>
   148e8:	ldr	r1, [sp, #56]	; 0x38
   148ec:	mov	r0, r9
   148f0:	rsb	r1, r9, r1
   148f4:	add	r1, r1, #1
   148f8:	bl	110f0 <realloc@plt>
   148fc:	subs	r3, r0, #0
   14900:	beq	14814 <__assert_fail@plt+0x3544>
   14904:	ldr	r1, [sp, #56]	; 0x38
   14908:	mov	r2, #0
   1490c:	ldr	ip, [sp, #32]
   14910:	mov	r0, fp
   14914:	rsb	r9, r9, r1
   14918:	add	r1, r3, r9
   1491c:	str	r1, [sp, #56]	; 0x38
   14920:	strb	r2, [r3, r9]
   14924:	str	r3, [ip]
   14928:	bl	11054 <iconv_close@plt>
   1492c:	mov	r0, r5
   14930:	b	145d4 <__assert_fail@plt+0x3304>
   14934:	mov	r0, r4
   14938:	mov	r1, r7
   1493c:	bl	11168 <iconv_open@plt>
   14940:	cmn	r0, #1
   14944:	mov	r6, r0
   14948:	bne	14224 <__assert_fail@plt+0x2f54>
   1494c:	mov	r0, fp
   14950:	bl	11054 <iconv_close@plt>
   14954:	mov	r0, r6
   14958:	b	145d4 <__assert_fail@plt+0x3304>
   1495c:	ldr	r0, [sp, #20]
   14960:	bl	11090 <free@plt>
   14964:	mov	r0, r5
   14968:	b	145d4 <__assert_fail@plt+0x3304>
   1496c:	mov	r0, r9
   14970:	bl	11090 <free@plt>
   14974:	mov	r0, fp
   14978:	bl	11054 <iconv_close@plt>
   1497c:	mov	r0, r5
   14980:	b	145d4 <__assert_fail@plt+0x3304>
   14984:	add	ip, sp, #80	; 0x50
   14988:	add	r7, sp, #76	; 0x4c
   1498c:	str	ip, [sp, #40]	; 0x28
   14990:	ldr	r8, [sp, #28]
   14994:	b	14438 <__assert_fail@plt+0x3168>
   14998:	movw	r0, #26104	; 0x65f8
   1499c:	movw	r1, #25844	; 0x64f4
   149a0:	movw	r3, #25612	; 0x640c
   149a4:	movt	r0, #1
   149a8:	movt	r1, #1
   149ac:	mov	r2, #223	; 0xdf
   149b0:	movt	r3, #1
   149b4:	bl	112d0 <__assert_fail@plt>
   149b8:	bl	110d8 <__stack_chk_fail@plt>
   149bc:	ldr	r3, [sp, #60]	; 0x3c
   149c0:	cmp	r3, #0
   149c4:	beq	1434c <__assert_fail@plt+0x307c>
   149c8:	ldr	r3, [sp, #56]	; 0x38
   149cc:	rsb	r3, r7, r3
   149d0:	add	r8, r8, r3
   149d4:	b	14318 <__assert_fail@plt+0x3048>
   149d8:	movw	r0, #26216	; 0x6668
   149dc:	movw	r1, #25844	; 0x64f4
   149e0:	movw	r3, #25612	; 0x640c
   149e4:	movt	r0, #1
   149e8:	movt	r1, #1
   149ec:	mov	r2, #224	; 0xe0
   149f0:	movt	r3, #1
   149f4:	bl	112d0 <__assert_fail@plt>
   149f8:	movw	r0, #26104	; 0x65f8
   149fc:	movw	r1, #25844	; 0x64f4
   14a00:	movw	r3, #25612	; 0x640c
   14a04:	movt	r0, #1
   14a08:	movt	r1, #1
   14a0c:	mov	r2, #193	; 0xc1
   14a10:	movt	r3, #1
   14a14:	bl	112d0 <__assert_fail@plt>
   14a18:	eor	r1, r1, #-2147483648	; 0x80000000
   14a1c:	b	14a24 <__assert_fail@plt+0x3754>
   14a20:	eor	r3, r3, #-2147483648	; 0x80000000
   14a24:	push	{r4, r5, lr}
   14a28:	lsl	r4, r1, #1
   14a2c:	lsl	r5, r3, #1
   14a30:	teq	r4, r5
   14a34:	teqeq	r0, r2
   14a38:	orrsne	ip, r4, r0
   14a3c:	orrsne	ip, r5, r2
   14a40:	mvnsne	ip, r4, asr #21
   14a44:	mvnsne	ip, r5, asr #21
   14a48:	beq	14c34 <__assert_fail@plt+0x3964>
   14a4c:	lsr	r4, r4, #21
   14a50:	rsbs	r5, r4, r5, lsr #21
   14a54:	rsblt	r5, r5, #0
   14a58:	ble	14a78 <__assert_fail@plt+0x37a8>
   14a5c:	add	r4, r4, r5
   14a60:	eor	r2, r0, r2
   14a64:	eor	r3, r1, r3
   14a68:	eor	r0, r2, r0
   14a6c:	eor	r1, r3, r1
   14a70:	eor	r2, r0, r2
   14a74:	eor	r3, r1, r3
   14a78:	cmp	r5, #54	; 0x36
   14a7c:	pophi	{r4, r5, pc}
   14a80:	tst	r1, #-2147483648	; 0x80000000
   14a84:	lsl	r1, r1, #12
   14a88:	mov	ip, #1048576	; 0x100000
   14a8c:	orr	r1, ip, r1, lsr #12
   14a90:	beq	14a9c <__assert_fail@plt+0x37cc>
   14a94:	rsbs	r0, r0, #0
   14a98:	rsc	r1, r1, #0
   14a9c:	tst	r3, #-2147483648	; 0x80000000
   14aa0:	lsl	r3, r3, #12
   14aa4:	orr	r3, ip, r3, lsr #12
   14aa8:	beq	14ab4 <__assert_fail@plt+0x37e4>
   14aac:	rsbs	r2, r2, #0
   14ab0:	rsc	r3, r3, #0
   14ab4:	teq	r4, r5
   14ab8:	beq	14c1c <__assert_fail@plt+0x394c>
   14abc:	sub	r4, r4, #1
   14ac0:	rsbs	lr, r5, #32
   14ac4:	blt	14ae0 <__assert_fail@plt+0x3810>
   14ac8:	lsl	ip, r2, lr
   14acc:	adds	r0, r0, r2, lsr r5
   14ad0:	adc	r1, r1, #0
   14ad4:	adds	r0, r0, r3, lsl lr
   14ad8:	adcs	r1, r1, r3, asr r5
   14adc:	b	14afc <__assert_fail@plt+0x382c>
   14ae0:	sub	r5, r5, #32
   14ae4:	add	lr, lr, #32
   14ae8:	cmp	r2, #1
   14aec:	lsl	ip, r3, lr
   14af0:	orrcs	ip, ip, #2
   14af4:	adds	r0, r0, r3, asr r5
   14af8:	adcs	r1, r1, r3, asr #31
   14afc:	and	r5, r1, #-2147483648	; 0x80000000
   14b00:	bpl	14b10 <__assert_fail@plt+0x3840>
   14b04:	rsbs	ip, ip, #0
   14b08:	rscs	r0, r0, #0
   14b0c:	rsc	r1, r1, #0
   14b10:	cmp	r1, #1048576	; 0x100000
   14b14:	bcc	14b54 <__assert_fail@plt+0x3884>
   14b18:	cmp	r1, #2097152	; 0x200000
   14b1c:	bcc	14b3c <__assert_fail@plt+0x386c>
   14b20:	lsrs	r1, r1, #1
   14b24:	rrxs	r0, r0
   14b28:	rrx	ip, ip
   14b2c:	add	r4, r4, #1
   14b30:	lsl	r2, r4, #21
   14b34:	cmn	r2, #4194304	; 0x400000
   14b38:	bcs	14c94 <__assert_fail@plt+0x39c4>
   14b3c:	cmp	ip, #-2147483648	; 0x80000000
   14b40:	lsrseq	ip, r0, #1
   14b44:	adcs	r0, r0, #0
   14b48:	adc	r1, r1, r4, lsl #20
   14b4c:	orr	r1, r1, r5
   14b50:	pop	{r4, r5, pc}
   14b54:	lsls	ip, ip, #1
   14b58:	adcs	r0, r0, r0
   14b5c:	adc	r1, r1, r1
   14b60:	tst	r1, #1048576	; 0x100000
   14b64:	sub	r4, r4, #1
   14b68:	bne	14b3c <__assert_fail@plt+0x386c>
   14b6c:	teq	r1, #0
   14b70:	moveq	r1, r0
   14b74:	moveq	r0, #0
   14b78:	clz	r3, r1
   14b7c:	addeq	r3, r3, #32
   14b80:	sub	r3, r3, #11
   14b84:	subs	r2, r3, #32
   14b88:	bge	14bac <__assert_fail@plt+0x38dc>
   14b8c:	adds	r2, r2, #12
   14b90:	ble	14ba8 <__assert_fail@plt+0x38d8>
   14b94:	add	ip, r2, #20
   14b98:	rsb	r2, r2, #12
   14b9c:	lsl	r0, r1, ip
   14ba0:	lsr	r1, r1, r2
   14ba4:	b	14bbc <__assert_fail@plt+0x38ec>
   14ba8:	add	r2, r2, #20
   14bac:	rsble	ip, r2, #32
   14bb0:	lsl	r1, r1, r2
   14bb4:	orrle	r1, r1, r0, lsr ip
   14bb8:	lslle	r0, r0, r2
   14bbc:	subs	r4, r4, r3
   14bc0:	addge	r1, r1, r4, lsl #20
   14bc4:	orrge	r1, r1, r5
   14bc8:	popge	{r4, r5, pc}
   14bcc:	mvn	r4, r4
   14bd0:	subs	r4, r4, #31
   14bd4:	bge	14c10 <__assert_fail@plt+0x3940>
   14bd8:	adds	r4, r4, #12
   14bdc:	bgt	14bf8 <__assert_fail@plt+0x3928>
   14be0:	add	r4, r4, #20
   14be4:	rsb	r2, r4, #32
   14be8:	lsr	r0, r0, r4
   14bec:	orr	r0, r0, r1, lsl r2
   14bf0:	orr	r1, r5, r1, lsr r4
   14bf4:	pop	{r4, r5, pc}
   14bf8:	rsb	r4, r4, #12
   14bfc:	rsb	r2, r4, #32
   14c00:	lsr	r0, r0, r2
   14c04:	orr	r0, r0, r1, lsl r4
   14c08:	mov	r1, r5
   14c0c:	pop	{r4, r5, pc}
   14c10:	lsr	r0, r1, r4
   14c14:	mov	r1, r5
   14c18:	pop	{r4, r5, pc}
   14c1c:	teq	r4, #0
   14c20:	eor	r3, r3, #1048576	; 0x100000
   14c24:	eoreq	r1, r1, #1048576	; 0x100000
   14c28:	addeq	r4, r4, #1
   14c2c:	subne	r5, r5, #1
   14c30:	b	14abc <__assert_fail@plt+0x37ec>
   14c34:	mvns	ip, r4, asr #21
   14c38:	mvnsne	ip, r5, asr #21
   14c3c:	beq	14ca4 <__assert_fail@plt+0x39d4>
   14c40:	teq	r4, r5
   14c44:	teqeq	r0, r2
   14c48:	beq	14c5c <__assert_fail@plt+0x398c>
   14c4c:	orrs	ip, r4, r0
   14c50:	moveq	r1, r3
   14c54:	moveq	r0, r2
   14c58:	pop	{r4, r5, pc}
   14c5c:	teq	r1, r3
   14c60:	movne	r1, #0
   14c64:	movne	r0, #0
   14c68:	popne	{r4, r5, pc}
   14c6c:	lsrs	ip, r4, #21
   14c70:	bne	14c84 <__assert_fail@plt+0x39b4>
   14c74:	lsls	r0, r0, #1
   14c78:	adcs	r1, r1, r1
   14c7c:	orrcs	r1, r1, #-2147483648	; 0x80000000
   14c80:	pop	{r4, r5, pc}
   14c84:	adds	r4, r4, #4194304	; 0x400000
   14c88:	addcc	r1, r1, #1048576	; 0x100000
   14c8c:	popcc	{r4, r5, pc}
   14c90:	and	r5, r1, #-2147483648	; 0x80000000
   14c94:	orr	r1, r5, #2130706432	; 0x7f000000
   14c98:	orr	r1, r1, #15728640	; 0xf00000
   14c9c:	mov	r0, #0
   14ca0:	pop	{r4, r5, pc}
   14ca4:	mvns	ip, r4, asr #21
   14ca8:	movne	r1, r3
   14cac:	movne	r0, r2
   14cb0:	mvnseq	ip, r5, asr #21
   14cb4:	movne	r3, r1
   14cb8:	movne	r2, r0
   14cbc:	orrs	r4, r0, r1, lsl #12
   14cc0:	orrseq	r5, r2, r3, lsl #12
   14cc4:	teqeq	r1, r3
   14cc8:	orrne	r1, r1, #524288	; 0x80000
   14ccc:	pop	{r4, r5, pc}
   14cd0:	teq	r0, #0
   14cd4:	moveq	r1, #0
   14cd8:	bxeq	lr
   14cdc:	push	{r4, r5, lr}
   14ce0:	mov	r4, #1024	; 0x400
   14ce4:	add	r4, r4, #50	; 0x32
   14ce8:	mov	r5, #0
   14cec:	mov	r1, #0
   14cf0:	b	14b6c <__assert_fail@plt+0x389c>
   14cf4:	teq	r0, #0
   14cf8:	moveq	r1, #0
   14cfc:	bxeq	lr
   14d00:	push	{r4, r5, lr}
   14d04:	mov	r4, #1024	; 0x400
   14d08:	add	r4, r4, #50	; 0x32
   14d0c:	ands	r5, r0, #-2147483648	; 0x80000000
   14d10:	rsbmi	r0, r0, #0
   14d14:	mov	r1, #0
   14d18:	b	14b6c <__assert_fail@plt+0x389c>
   14d1c:	lsls	r2, r0, #1
   14d20:	asr	r1, r2, #3
   14d24:	rrx	r1, r1
   14d28:	lsl	r0, r2, #28
   14d2c:	andsne	r3, r2, #-16777216	; 0xff000000
   14d30:	teqne	r3, #-16777216	; 0xff000000
   14d34:	eorne	r1, r1, #939524096	; 0x38000000
   14d38:	bxne	lr
   14d3c:	teq	r2, #0
   14d40:	teqne	r3, #-16777216	; 0xff000000
   14d44:	bxeq	lr
   14d48:	push	{r4, r5, lr}
   14d4c:	mov	r4, #896	; 0x380
   14d50:	and	r5, r1, #-2147483648	; 0x80000000
   14d54:	bic	r1, r1, #-2147483648	; 0x80000000
   14d58:	b	14b6c <__assert_fail@plt+0x389c>
   14d5c:	orrs	r2, r0, r1
   14d60:	bxeq	lr
   14d64:	push	{r4, r5, lr}
   14d68:	mov	r5, #0
   14d6c:	b	14d8c <__assert_fail@plt+0x3abc>
   14d70:	orrs	r2, r0, r1
   14d74:	bxeq	lr
   14d78:	push	{r4, r5, lr}
   14d7c:	ands	r5, r1, #-2147483648	; 0x80000000
   14d80:	bpl	14d8c <__assert_fail@plt+0x3abc>
   14d84:	rsbs	r0, r0, #0
   14d88:	rsc	r1, r1, #0
   14d8c:	mov	r4, #1024	; 0x400
   14d90:	add	r4, r4, #50	; 0x32
   14d94:	lsrs	ip, r1, #22
   14d98:	beq	14b10 <__assert_fail@plt+0x3840>
   14d9c:	mov	r2, #3
   14da0:	lsrs	ip, ip, #3
   14da4:	addne	r2, r2, #3
   14da8:	lsrs	ip, ip, #3
   14dac:	addne	r2, r2, #3
   14db0:	add	r2, r2, ip, lsr #3
   14db4:	rsb	r3, r2, #32
   14db8:	lsl	ip, r0, r3
   14dbc:	lsr	r0, r0, r2
   14dc0:	orr	r0, r0, r1, lsl r3
   14dc4:	lsr	r1, r1, r2
   14dc8:	add	r4, r4, r2
   14dcc:	b	14b10 <__assert_fail@plt+0x3840>
   14dd0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14dd4:	mov	r7, r0
   14dd8:	ldr	r6, [pc, #76]	; 14e2c <__assert_fail@plt+0x3b5c>
   14ddc:	mov	r8, r1
   14de0:	ldr	r5, [pc, #72]	; 14e30 <__assert_fail@plt+0x3b60>
   14de4:	mov	r9, r2
   14de8:	add	r6, pc, r6
   14dec:	bl	11004 <_init@@Base>
   14df0:	add	r5, pc, r5
   14df4:	rsb	r6, r5, r6
   14df8:	asrs	r6, r6, #2
   14dfc:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14e00:	sub	r5, r5, #4
   14e04:	mov	r4, #0
   14e08:	add	r4, r4, #1
   14e0c:	ldr	r3, [r5, #4]!
   14e10:	mov	r0, r7
   14e14:	mov	r1, r8
   14e18:	mov	r2, r9
   14e1c:	blx	r3
   14e20:	cmp	r4, r6
   14e24:	bne	14e08 <__assert_fail@plt+0x3b38>
   14e28:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14e2c:	strdeq	r2, [r1], -r8
   14e30:	andeq	r2, r1, ip, ror #1
   14e34:	bx	lr

Disassembly of section .fini:

00014e38 <_fini@@Base>:
   14e38:	push	{r3, lr}
   14e3c:	pop	{r3, pc}
