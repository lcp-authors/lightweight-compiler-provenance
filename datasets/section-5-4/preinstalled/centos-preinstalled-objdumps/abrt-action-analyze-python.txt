
centos-preinstalled/abrt-action-analyze-python:     file format elf32-littlearm


Disassembly of section .init:

000008a0 <_init@@Base>:
 8a0:	push	{r3, lr}
 8a4:	bl	c14 <main@@Base+0x264>
 8a8:	pop	{r3, pc}

Disassembly of section .plt:

000008ac <dd_opendir@plt-0x14>:
 8ac:	push	{lr}		; (str lr, [sp, #-4]!)
 8b0:	ldr	lr, [pc, #4]	; 8bc <_init@@Base+0x1c>
 8b4:	add	lr, pc, lr
 8b8:	ldr	pc, [lr, #8]!
 8bc:	andeq	r1, r1, r0, asr #13

000008c0 <dd_opendir@plt>:
 8c0:	add	ip, pc, #0, 12
 8c4:	add	ip, ip, #69632	; 0x11000
 8c8:	ldr	pc, [ip, #1728]!	; 0x6c0

000008cc <free@plt>:
 8cc:	add	ip, pc, #0, 12
 8d0:	add	ip, ip, #69632	; 0x11000
 8d4:	ldr	pc, [ip, #1720]!	; 0x6b8

000008d8 <dd_close@plt>:
 8d8:	add	ip, pc, #0, 12
 8dc:	add	ip, ip, #69632	; 0x11000
 8e0:	ldr	pc, [ip, #1712]!	; 0x6b0

000008e4 <libreport_parse_opts@plt>:
 8e4:	add	ip, pc, #0, 12
 8e8:	add	ip, ip, #69632	; 0x11000
 8ec:	ldr	pc, [ip, #1704]!	; 0x6a8

000008f0 <libreport_export_abrt_envvars@plt>:
 8f0:	add	ip, pc, #0, 12
 8f4:	add	ip, ip, #69632	; 0x11000
 8f8:	ldr	pc, [ip, #1696]!	; 0x6a0

000008fc <textdomain@plt>:
 8fc:	add	ip, pc, #0, 12
 900:	add	ip, ip, #69632	; 0x11000
 904:	ldr	pc, [ip, #1688]!	; 0x698

00000908 <memset@plt>:
 908:	add	ip, pc, #0, 12
 90c:	add	ip, ip, #69632	; 0x11000
 910:	ldr	pc, [ip, #1680]!	; 0x690

00000914 <abort@plt>:
 914:	add	ip, pc, #0, 12
 918:	add	ip, ip, #69632	; 0x11000
 91c:	ldr	pc, [ip, #1672]!	; 0x688

00000920 <libreport_str_to_sha1str@plt>:
 920:	add	ip, pc, #0, 12
 924:	add	ip, ip, #69632	; 0x11000
 928:	ldr	pc, [ip, #1664]!	; 0x680

0000092c <dd_load_text@plt>:
 92c:	add	ip, pc, #0, 12
 930:	add	ip, ip, #69632	; 0x11000
 934:	ldr	pc, [ip, #1656]!	; 0x678

00000938 <__stack_chk_fail@plt>:
 938:	add	ip, pc, #0, 12
 93c:	add	ip, ip, #69632	; 0x11000
 940:	ldr	pc, [ip, #1648]!	; 0x670

00000944 <strchrnul@plt>:
 944:	add	ip, pc, #0, 12
 948:	add	ip, ip, #69632	; 0x11000
 94c:	ldr	pc, [ip, #1640]!	; 0x668

00000950 <dcgettext@plt>:
 950:	add	ip, pc, #0, 12
 954:	add	ip, ip, #69632	; 0x11000
 958:	ldr	pc, [ip, #1632]!	; 0x660

0000095c <bindtextdomain@plt>:
 95c:	add	ip, pc, #0, 12
 960:	add	ip, ip, #69632	; 0x11000
 964:	ldr	pc, [ip, #1624]!	; 0x658

00000968 <setlocale@plt>:
 968:	add	ip, pc, #0, 12
 96c:	add	ip, ip, #69632	; 0x11000
 970:	ldr	pc, [ip, #1616]!	; 0x650

00000974 <abrt_init@plt>:
 974:	add	ip, pc, #0, 12
 978:	add	ip, ip, #69632	; 0x11000
 97c:	ldr	pc, [ip, #1608]!	; 0x648

00000980 <dd_save_text@plt>:
 980:	add	ip, pc, #0, 12
 984:	add	ip, ip, #69632	; 0x11000
 988:	ldr	pc, [ip, #1600]!	; 0x640

0000098c <__libc_start_main@plt>:
 98c:	add	ip, pc, #0, 12
 990:	add	ip, ip, #69632	; 0x11000
 994:	ldr	pc, [ip, #1592]!	; 0x638

00000998 <__gmon_start__@plt>:
 998:	add	ip, pc, #0, 12
 99c:	add	ip, ip, #69632	; 0x11000
 9a0:	ldr	pc, [ip, #1584]!	; 0x630

000009a4 <__cxa_finalize@plt>:
 9a4:	add	ip, pc, #0, 12
 9a8:	add	ip, ip, #69632	; 0x11000
 9ac:	ldr	pc, [ip, #1576]!	; 0x628

Disassembly of section .text:

000009b0 <main@@Base>:
 9b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
 9b4:	mov	r7, r1
 9b8:	ldr	r5, [pc, #448]	; b80 <main@@Base+0x1d0>
 9bc:	sub	sp, sp, #128	; 0x80
 9c0:	ldr	r3, [pc, #444]	; b84 <main@@Base+0x1d4>
 9c4:	mov	r9, r0
 9c8:	add	r5, pc, r5
 9cc:	ldr	r1, [pc, #436]	; b88 <main@@Base+0x1d8>
 9d0:	ldr	r4, [pc, #436]	; b8c <main@@Base+0x1dc>
 9d4:	mov	r0, #6
 9d8:	ldr	r6, [r5, r3]
 9dc:	add	r1, pc, r1
 9e0:	add	r4, pc, r4
 9e4:	add	r8, sp, #8
 9e8:	ldr	r3, [r6]
 9ec:	str	r3, [sp, #124]	; 0x7c
 9f0:	bl	968 <setlocale@plt>
 9f4:	ldr	r1, [pc, #404]	; b90 <main@@Base+0x1e0>
 9f8:	mov	r0, r4
 9fc:	add	r1, pc, r1
 a00:	bl	95c <bindtextdomain@plt>
 a04:	mov	r0, r4
 a08:	bl	8fc <textdomain@plt>
 a0c:	mov	r0, r7
 a10:	bl	974 <abrt_init@plt>
 a14:	ldr	r1, [pc, #376]	; b94 <main@@Base+0x1e4>
 a18:	ldr	r3, [pc, #376]	; b98 <main@@Base+0x1e8>
 a1c:	mov	r0, r4
 a20:	add	r1, pc, r1
 a24:	mov	r2, #5
 a28:	add	r3, pc, r3
 a2c:	str	r3, [sp, #4]
 a30:	bl	950 <dcgettext@plt>
 a34:	mov	r1, #0
 a38:	mov	r2, #72	; 0x48
 a3c:	mov	sl, r0
 a40:	mov	r0, r8
 a44:	bl	908 <memset@plt>
 a48:	ldr	r3, [pc, #332]	; b9c <main@@Base+0x1ec>
 a4c:	ldr	r2, [pc, #332]	; ba0 <main@@Base+0x1f0>
 a50:	mov	r1, #118	; 0x76
 a54:	str	r1, [sp, #12]
 a58:	mov	r0, r4
 a5c:	add	r2, pc, r2
 a60:	ldr	r1, [pc, #316]	; ba4 <main@@Base+0x1f4>
 a64:	str	r2, [sp, #16]
 a68:	mov	r2, #5
 a6c:	ldr	r3, [r5, r3]
 a70:	add	r1, pc, r1
 a74:	str	r3, [sp, #20]
 a78:	bl	950 <dcgettext@plt>
 a7c:	ldr	r1, [pc, #292]	; ba8 <main@@Base+0x1f8>
 a80:	mov	r2, #5
 a84:	ldr	ip, [pc, #288]	; bac <main@@Base+0x1fc>
 a88:	mov	lr, #2
 a8c:	add	r1, pc, r1
 a90:	str	lr, [sp, #32]
 a94:	add	ip, pc, ip
 a98:	mov	r3, #100	; 0x64
 a9c:	str	ip, [sp, #48]	; 0x30
 aa0:	str	r3, [sp, #36]	; 0x24
 aa4:	add	r3, sp, #4
 aa8:	str	r3, [sp, #44]	; 0x2c
 aac:	str	r0, [sp, #28]
 ab0:	mov	r0, r4
 ab4:	bl	950 <dcgettext@plt>
 ab8:	mov	r1, r7
 abc:	mov	r2, r8
 ac0:	mov	r3, sl
 ac4:	mov	ip, #6
 ac8:	str	ip, [sp, #56]	; 0x38
 acc:	str	r0, [sp, #52]	; 0x34
 ad0:	mov	r0, r9
 ad4:	bl	8e4 <libreport_parse_opts@plt>
 ad8:	mov	r0, #0
 adc:	bl	8f0 <libreport_export_abrt_envvars@plt>
 ae0:	ldr	r0, [sp, #4]
 ae4:	mov	r1, #0
 ae8:	bl	8c0 <dd_opendir@plt>
 aec:	subs	r4, r0, #0
 af0:	moveq	r0, #1
 af4:	beq	b64 <main@@Base+0x1b4>
 af8:	ldr	r1, [pc, #176]	; bb0 <main@@Base+0x200>
 afc:	add	r5, sp, #80	; 0x50
 b00:	mov	r7, #0
 b04:	add	r1, pc, r1
 b08:	bl	92c <dd_load_text@plt>
 b0c:	mov	r1, #10
 b10:	mov	r8, r0
 b14:	bl	944 <strchrnul@plt>
 b18:	mov	r1, r8
 b1c:	strb	r7, [r0]
 b20:	mov	r0, r5
 b24:	bl	920 <libreport_str_to_sha1str@plt>
 b28:	mov	r0, r8
 b2c:	bl	8cc <free@plt>
 b30:	ldr	r1, [pc, #124]	; bb4 <main@@Base+0x204>
 b34:	mov	r0, r4
 b38:	mov	r2, r5
 b3c:	add	r1, pc, r1
 b40:	bl	980 <dd_save_text@plt>
 b44:	ldr	r1, [pc, #108]	; bb8 <main@@Base+0x208>
 b48:	mov	r0, r4
 b4c:	mov	r2, r5
 b50:	add	r1, pc, r1
 b54:	bl	980 <dd_save_text@plt>
 b58:	mov	r0, r4
 b5c:	bl	8d8 <dd_close@plt>
 b60:	mov	r0, r7
 b64:	ldr	r2, [sp, #124]	; 0x7c
 b68:	ldr	r3, [r6]
 b6c:	cmp	r2, r3
 b70:	bne	b7c <main@@Base+0x1cc>
 b74:	add	sp, sp, #128	; 0x80
 b78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
 b7c:	bl	938 <__stack_chk_fail@plt>
 b80:	andeq	r1, r1, ip, lsr #11
 b84:	andeq	r0, r0, ip, asr r0
 b88:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 b8c:	andeq	r0, r0, r4, lsr #8
 b90:	andeq	r0, r0, r0, lsl r4
 b94:	andeq	r0, r0, r4, lsl #8
 b98:	strdeq	r0, [r0], -r8
 b9c:	andeq	r0, r0, r8, rrx
 ba0:	andeq	r0, r0, r4, lsl r4
 ba4:	andeq	r0, r0, r8, lsl #8
 ba8:	strdeq	r0, [r0], -ip
 bac:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
 bb0:	muleq	r0, r8, r3
 bb4:	andeq	r0, r0, ip, ror #6
 bb8:	andeq	r0, r0, r0, ror #6
 bbc:	mov	fp, #0
 bc0:	mov	lr, #0
 bc4:	pop	{r1}		; (ldr r1, [sp], #4)
 bc8:	mov	r2, sp
 bcc:	push	{r2}		; (str r2, [sp, #-4]!)
 bd0:	push	{r0}		; (str r0, [sp, #-4]!)
 bd4:	ldr	sl, [pc, #40]	; c04 <main@@Base+0x254>
 bd8:	add	r3, pc, #36	; 0x24
 bdc:	add	sl, sl, r3
 be0:	ldr	ip, [pc, #32]	; c08 <main@@Base+0x258>
 be4:	ldr	ip, [sl, ip]
 be8:	push	{ip}		; (str ip, [sp, #-4]!)
 bec:	ldr	r3, [pc, #24]	; c0c <main@@Base+0x25c>
 bf0:	ldr	r3, [sl, r3]
 bf4:	ldr	r0, [pc, #20]	; c10 <main@@Base+0x260>
 bf8:	ldr	r0, [sl, r0]
 bfc:	bl	98c <__libc_start_main@plt>
 c00:	bl	914 <abort@plt>
 c04:	andeq	r1, r1, r8, ror r3
 c08:	andeq	r0, r0, r4, ror r0
 c0c:	andeq	r0, r0, ip, rrx
 c10:	andeq	r0, r0, r0, rrx
 c14:	ldr	r3, [pc, #20]	; c30 <main@@Base+0x280>
 c18:	ldr	r2, [pc, #20]	; c34 <main@@Base+0x284>
 c1c:	add	r3, pc, r3
 c20:	ldr	r2, [r3, r2]
 c24:	cmp	r2, #0
 c28:	bxeq	lr
 c2c:	b	998 <__gmon_start__@plt>
 c30:	andeq	r1, r1, r8, asr r3
 c34:	andeq	r0, r0, r8, ror r0
 c38:	ldr	r2, [pc, #60]	; c7c <main@@Base+0x2cc>
 c3c:	ldr	r0, [pc, #60]	; c80 <main@@Base+0x2d0>
 c40:	add	r2, pc, r2
 c44:	add	r0, pc, r0
 c48:	add	r2, r2, #3
 c4c:	rsb	r2, r0, r2
 c50:	push	{r3, lr}
 c54:	cmp	r2, #6
 c58:	ldr	r3, [pc, #36]	; c84 <main@@Base+0x2d4>
 c5c:	add	r3, pc, r3
 c60:	popls	{r3, pc}
 c64:	ldr	r2, [pc, #28]	; c88 <main@@Base+0x2d8>
 c68:	ldr	r3, [r3, r2]
 c6c:	cmp	r3, #0
 c70:	popeq	{r3, pc}
 c74:	blx	r3
 c78:	pop	{r3, pc}
 c7c:			; <UNDEFINED> instruction: 0x000113bc
 c80:			; <UNDEFINED> instruction: 0x000113b8
 c84:	andeq	r1, r1, r8, lsl r3
 c88:	andeq	r0, r0, r0, ror r0
 c8c:	push	{r3, lr}
 c90:	ldr	r0, [pc, #64]	; cd8 <main@@Base+0x328>
 c94:	ldr	r3, [pc, #64]	; cdc <main@@Base+0x32c>
 c98:	add	r0, pc, r0
 c9c:	ldr	r2, [pc, #60]	; ce0 <main@@Base+0x330>
 ca0:	add	r3, pc, r3
 ca4:	rsb	r3, r0, r3
 ca8:	add	r2, pc, r2
 cac:	asr	r3, r3, #2
 cb0:	add	r3, r3, r3, lsr #31
 cb4:	asrs	r3, r3, #1
 cb8:	popeq	{r3, pc}
 cbc:	ldr	r1, [pc, #32]	; ce4 <main@@Base+0x334>
 cc0:	ldr	r2, [r2, r1]
 cc4:	cmp	r2, #0
 cc8:	popeq	{r3, pc}
 ccc:	mov	r1, r3
 cd0:	blx	r2
 cd4:	pop	{r3, pc}
 cd8:	andeq	r1, r1, r4, ror #6
 cdc:	andeq	r1, r1, ip, asr r3
 ce0:	andeq	r1, r1, ip, asr #5
 ce4:	andeq	r0, r0, ip, ror r0
 ce8:	ldr	r2, [pc, #76]	; d3c <main@@Base+0x38c>
 cec:	push	{r3, lr}
 cf0:	add	r2, pc, r2
 cf4:	ldr	r3, [pc, #68]	; d40 <main@@Base+0x390>
 cf8:	ldrb	r2, [r2]
 cfc:	add	r3, pc, r3
 d00:	cmp	r2, #0
 d04:	popne	{r3, pc}
 d08:	ldr	r2, [pc, #52]	; d44 <main@@Base+0x394>
 d0c:	ldr	r3, [r3, r2]
 d10:	cmp	r3, #0
 d14:	beq	d24 <main@@Base+0x374>
 d18:	ldr	r0, [pc, #40]	; d48 <main@@Base+0x398>
 d1c:	add	r0, pc, r0
 d20:	bl	9a4 <__cxa_finalize@plt>
 d24:	bl	c38 <main@@Base+0x288>
 d28:	ldr	r3, [pc, #28]	; d4c <main@@Base+0x39c>
 d2c:	mov	r2, #1
 d30:	add	r3, pc, r3
 d34:	strb	r2, [r3]
 d38:	pop	{r3, pc}
 d3c:	andeq	r1, r1, ip, lsl #6
 d40:	andeq	r1, r1, r8, ror r2
 d44:	andeq	r0, r0, r0, lsl #1
 d48:	andeq	r1, r1, ip, lsr r1
 d4c:	andeq	r1, r1, ip, asr #5
 d50:	ldr	r0, [pc, #52]	; d8c <main@@Base+0x3dc>
 d54:	push	{r3, lr}
 d58:	add	r0, pc, r0
 d5c:	ldr	r3, [pc, #44]	; d90 <main@@Base+0x3e0>
 d60:	ldr	r2, [r0]
 d64:	add	r3, pc, r3
 d68:	cmp	r2, #0
 d6c:	beq	d84 <main@@Base+0x3d4>
 d70:	ldr	r2, [pc, #28]	; d94 <main@@Base+0x3e4>
 d74:	ldr	r3, [r3, r2]
 d78:	cmp	r3, #0
 d7c:	beq	d84 <main@@Base+0x3d4>
 d80:	blx	r3
 d84:	pop	{r3, lr}
 d88:	b	c8c <main@@Base+0x2dc>
 d8c:	strdeq	r1, [r1], -ip
 d90:	andeq	r1, r1, r0, lsl r2
 d94:	andeq	r0, r0, r4, rrx

00000d98 <__libc_csu_init@@Base>:
 d98:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
 d9c:	mov	r7, r0
 da0:	ldr	r6, [pc, #76]	; df4 <__libc_csu_init@@Base+0x5c>
 da4:	mov	r8, r1
 da8:	ldr	r5, [pc, #72]	; df8 <__libc_csu_init@@Base+0x60>
 dac:	mov	r9, r2
 db0:	add	r6, pc, r6
 db4:	bl	8a0 <_init@@Base>
 db8:	add	r5, pc, r5
 dbc:	rsb	r6, r5, r6
 dc0:	asrs	r6, r6, #2
 dc4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
 dc8:	sub	r5, r5, #4
 dcc:	mov	r4, #0
 dd0:	add	r4, r4, #1
 dd4:	ldr	r3, [r5, #4]!
 dd8:	mov	r0, r7
 ddc:	mov	r1, r8
 de0:	mov	r2, r9
 de4:	blx	r3
 de8:	cmp	r4, r6
 dec:	bne	dd0 <__libc_csu_init@@Base+0x38>
 df0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 df4:	andeq	r1, r1, r0, lsr #1
 df8:	muleq	r1, r4, r0

00000dfc <__libc_csu_fini@@Base>:
 dfc:	bx	lr

Disassembly of section .fini:

00000e00 <_fini@@Base>:
 e00:	push	{r3, lr}
 e04:	pop	{r3, pc}
