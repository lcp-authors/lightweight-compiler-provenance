
centos-preinstalled/nl-cls-list:     file format elf32-littlearm


Disassembly of section .init:

000109d4 <.init>:
   109d4:	push	{r3, lr}
   109d8:	bl	10d58 <exit@plt+0x238>
   109dc:	pop	{r3, pc}

Disassembly of section .plt:

000109e0 <abort@plt-0x14>:
   109e0:	push	{lr}		; (str lr, [sp, #-4]!)
   109e4:	ldr	lr, [pc, #4]	; 109f0 <abort@plt-0x4>
   109e8:	add	lr, pc, lr
   109ec:	ldr	pc, [lr, #8]!
   109f0:	andeq	r1, r1, r0, lsl r6

000109f4 <abort@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #69632	; 0x11000
   109fc:	ldr	pc, [ip, #1552]!	; 0x610

00010a00 <nl_cache_dump_filter@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #69632	; 0x11000
   10a08:	ldr	pc, [ip, #1544]!	; 0x608

00010a0c <__libc_start_main@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #69632	; 0x11000
   10a14:	ldr	pc, [ip, #1536]!	; 0x600

00010a18 <__gmon_start__@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #69632	; 0x11000
   10a20:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a24 <nl_cli_tc_parse_parent@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #69632	; 0x11000
   10a2c:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a30 <nl_cli_print_version@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #69632	; 0x11000
   10a38:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a3c <nl_cli_alloc_socket@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #69632	; 0x11000
   10a44:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a48 <nl_cli_cls_parse_proto@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #69632	; 0x11000
   10a50:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a54 <getopt_long@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #69632	; 0x11000
   10a5c:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a60 <rtnl_tc_get_ifindex@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #69632	; 0x11000
   10a68:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a6c <nl_cli_cls_alloc@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #69632	; 0x11000
   10a74:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a78 <nl_cache_free@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #69632	; 0x11000
   10a80:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a84 <nl_cli_link_alloc_cache@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #69632	; 0x11000
   10a8c:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a90 <__stack_chk_fail@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #69632	; 0x11000
   10a98:	ldr	pc, [ip, #1448]!	; 0x5a8

00010a9c <nl_cli_tc_parse_kind@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #69632	; 0x11000
   10aa4:	ldr	pc, [ip, #1440]!	; 0x5a0

00010aa8 <rtnl_tc_get_parent@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #69632	; 0x11000
   10ab0:	ldr	pc, [ip, #1432]!	; 0x598

00010ab4 <rtnl_link_get_ifindex@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #69632	; 0x11000
   10abc:	ldr	pc, [ip, #1424]!	; 0x590

00010ac0 <puts@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #69632	; 0x11000
   10ac8:	ldr	pc, [ip, #1416]!	; 0x588

00010acc <nl_cli_parse_u32@plt>:
   10acc:	add	ip, pc, #0, 12
   10ad0:	add	ip, ip, #69632	; 0x11000
   10ad4:	ldr	pc, [ip, #1408]!	; 0x580

00010ad8 <nl_cli_connect@plt>:
   10ad8:	add	ip, pc, #0, 12
   10adc:	add	ip, ip, #69632	; 0x11000
   10ae0:	ldr	pc, [ip, #1400]!	; 0x578

00010ae4 <nl_cli_tc_parse_dev@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #69632	; 0x11000
   10aec:	ldr	pc, [ip, #1392]!	; 0x570

00010af0 <nl_cli_cls_alloc_cache@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #69632	; 0x11000
   10af8:	ldr	pc, [ip, #1384]!	; 0x568

00010afc <nl_cache_foreach@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #69632	; 0x11000
   10b04:	ldr	pc, [ip, #1376]!	; 0x560

00010b08 <nl_cli_tc_parse_handle@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #69632	; 0x11000
   10b10:	ldr	pc, [ip, #1368]!	; 0x558

00010b14 <rtnl_cls_set_prio@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #69632	; 0x11000
   10b1c:	ldr	pc, [ip, #1360]!	; 0x550

00010b20 <exit@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #69632	; 0x11000
   10b28:	ldr	pc, [ip, #1352]!	; 0x548

Disassembly of section .text:

00010b2c <.text>:
   10b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b30:	movw	fp, #8496	; 0x2130
   10b34:	movt	fp, #2
   10b38:	sub	sp, sp, #28
   10b3c:	mov	r6, r1
   10b40:	mov	r7, r0
   10b44:	ldr	r3, [fp]
   10b48:	movw	r8, #8512	; 0x2140
   10b4c:	movt	r8, #2
   10b50:	movw	r9, #8504	; 0x2138
   10b54:	add	r5, sp, #16
   10b58:	movt	r9, #2
   10b5c:	str	r3, [sp, #20]
   10b60:	bl	10a3c <nl_cli_alloc_socket@plt>
   10b64:	mov	r1, #0
   10b68:	mov	r4, r1
   10b6c:	str	r0, [r8]
   10b70:	bl	10ad8 <nl_cli_connect@plt>
   10b74:	ldr	r0, [r8]
   10b78:	bl	10a84 <nl_cli_link_alloc_cache@plt>
   10b7c:	str	r0, [sp, #12]
   10b80:	bl	10a6c <nl_cli_cls_alloc@plt>
   10b84:	movw	r3, #8500	; 0x2134
   10b88:	movt	r3, #2
   10b8c:	ldr	r3, [r3]
   10b90:	str	r3, [r8, #32]
   10b94:	mov	sl, r0
   10b98:	str	r5, [sp]
   10b9c:	movw	r2, #3880	; 0xf28
   10ba0:	movw	r3, #8316	; 0x207c
   10ba4:	movt	r2, #1
   10ba8:	movt	r3, #2
   10bac:	mov	r0, r7
   10bb0:	mov	r1, r6
   10bb4:	str	r4, [sp, #16]
   10bb8:	bl	10a54 <getopt_long@plt>
   10bbc:	cmn	r0, #1
   10bc0:	beq	10ccc <exit@plt+0x1ac>
   10bc4:	cmp	r0, #112	; 0x70
   10bc8:	beq	10c70 <exit@plt+0x150>
   10bcc:	ble	10bfc <exit@plt+0xdc>
   10bd0:	movw	r3, #258	; 0x102
   10bd4:	cmp	r0, r3
   10bd8:	beq	10c88 <exit@plt+0x168>
   10bdc:	bgt	10c28 <exit@plt+0x108>
   10be0:	cmp	r0, #118	; 0x76
   10be4:	beq	10c80 <exit@plt+0x160>
   10be8:	movw	r3, #257	; 0x101
   10bec:	cmp	r0, r3
   10bf0:	moveq	r3, #1
   10bf4:	streq	r3, [r8, #4]
   10bf8:	b	10b98 <exit@plt+0x78>
   10bfc:	cmp	r0, #104	; 0x68
   10c00:	beq	10ca8 <exit@plt+0x188>
   10c04:	ble	10c54 <exit@plt+0x134>
   10c08:	cmp	r0, #105	; 0x69
   10c0c:	beq	10c94 <exit@plt+0x174>
   10c10:	cmp	r0, #107	; 0x6b
   10c14:	bne	10b98 <exit@plt+0x78>
   10c18:	mov	r0, sl
   10c1c:	ldr	r1, [r9]
   10c20:	bl	10a9c <nl_cli_tc_parse_kind@plt>
   10c24:	b	10b98 <exit@plt+0x78>
   10c28:	movw	r3, #259	; 0x103
   10c2c:	cmp	r0, r3
   10c30:	beq	10cbc <exit@plt+0x19c>
   10c34:	cmp	r0, #260	; 0x104
   10c38:	bne	10b98 <exit@plt+0x78>
   10c3c:	ldr	r0, [r9]
   10c40:	bl	10acc <nl_cli_parse_u32@plt>
   10c44:	uxth	r1, r0
   10c48:	mov	r0, sl
   10c4c:	bl	10b14 <rtnl_cls_set_prio@plt>
   10c50:	b	10b98 <exit@plt+0x78>
   10c54:	cmp	r0, #100	; 0x64
   10c58:	bne	10b98 <exit@plt+0x78>
   10c5c:	mov	r0, sl
   10c60:	ldr	r1, [sp, #12]
   10c64:	ldr	r2, [r9]
   10c68:	bl	10ae4 <nl_cli_tc_parse_dev@plt>
   10c6c:	b	10b98 <exit@plt+0x78>
   10c70:	mov	r0, sl
   10c74:	ldr	r1, [r9]
   10c78:	bl	10a24 <nl_cli_tc_parse_parent@plt>
   10c7c:	b	10b98 <exit@plt+0x78>
   10c80:	bl	10a30 <nl_cli_print_version@plt>
   10c84:	b	10b98 <exit@plt+0x78>
   10c88:	mov	r3, #2
   10c8c:	str	r3, [r8, #4]
   10c90:	b	10b98 <exit@plt+0x78>
   10c94:	mov	r0, sl
   10c98:	ldr	r1, [r9]
   10c9c:	mov	r2, #0
   10ca0:	bl	10b08 <nl_cli_tc_parse_handle@plt>
   10ca4:	b	10b98 <exit@plt+0x78>
   10ca8:	movw	r0, #3892	; 0xf34
   10cac:	movt	r0, #1
   10cb0:	bl	10ac0 <puts@plt>
   10cb4:	mov	r0, #0
   10cb8:	bl	10b20 <exit@plt>
   10cbc:	mov	r0, sl
   10cc0:	ldr	r1, [r9]
   10cc4:	bl	10a48 <nl_cli_cls_parse_proto@plt>
   10cc8:	b	10b98 <exit@plt+0x78>
   10ccc:	mov	r0, sl
   10cd0:	bl	10a60 <rtnl_tc_get_ifindex@plt>
   10cd4:	cmp	r0, #0
   10cd8:	bne	10d0c <exit@plt+0x1ec>
   10cdc:	movw	r1, #3736	; 0xe98
   10ce0:	ldr	r0, [sp, #12]
   10ce4:	mov	r2, sl
   10ce8:	movt	r1, #1
   10cec:	bl	10afc <nl_cache_foreach@plt>
   10cf0:	ldr	r2, [sp, #20]
   10cf4:	mov	r0, #0
   10cf8:	ldr	r3, [fp]
   10cfc:	cmp	r2, r3
   10d00:	bne	10d18 <exit@plt+0x1f8>
   10d04:	add	sp, sp, #28
   10d08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d0c:	mov	r1, sl
   10d10:	bl	10e50 <exit@plt+0x330>
   10d14:	b	10cf0 <exit@plt+0x1d0>
   10d18:	bl	10a90 <__stack_chk_fail@plt>
   10d1c:	mov	fp, #0
   10d20:	mov	lr, #0
   10d24:	pop	{r1}		; (ldr r1, [sp], #4)
   10d28:	mov	r2, sp
   10d2c:	push	{r2}		; (str r2, [sp, #-4]!)
   10d30:	push	{r0}		; (str r0, [sp, #-4]!)
   10d34:	ldr	ip, [pc, #16]	; 10d4c <exit@plt+0x22c>
   10d38:	push	{ip}		; (str ip, [sp, #-4]!)
   10d3c:	ldr	r0, [pc, #12]	; 10d50 <exit@plt+0x230>
   10d40:	ldr	r3, [pc, #12]	; 10d54 <exit@plt+0x234>
   10d44:	bl	10a0c <__libc_start_main@plt>
   10d48:	bl	109f4 <abort@plt>
   10d4c:	andeq	r0, r1, r4, lsl pc
   10d50:	andeq	r0, r1, ip, lsr #22
   10d54:			; <UNDEFINED> instruction: 0x00010eb0
   10d58:	ldr	r3, [pc, #20]	; 10d74 <exit@plt+0x254>
   10d5c:	ldr	r2, [pc, #20]	; 10d78 <exit@plt+0x258>
   10d60:	add	r3, pc, r3
   10d64:	ldr	r2, [r3, r2]
   10d68:	cmp	r2, #0
   10d6c:	bxeq	lr
   10d70:	b	10a18 <__gmon_start__@plt>
   10d74:	muleq	r1, r8, r2
   10d78:	andeq	r0, r0, r4, ror r0
   10d7c:	push	{r3, lr}
   10d80:	movw	r0, #8492	; 0x212c
   10d84:	ldr	r3, [pc, #36]	; 10db0 <exit@plt+0x290>
   10d88:	movt	r0, #2
   10d8c:	rsb	r3, r0, r3
   10d90:	cmp	r3, #6
   10d94:	popls	{r3, pc}
   10d98:	movw	r3, #0
   10d9c:	movt	r3, #0
   10da0:	cmp	r3, #0
   10da4:	popeq	{r3, pc}
   10da8:	blx	r3
   10dac:	pop	{r3, pc}
   10db0:	andeq	r2, r2, pc, lsr #2
   10db4:	push	{r3, lr}
   10db8:	movw	r0, #8492	; 0x212c
   10dbc:	movw	r3, #8492	; 0x212c
   10dc0:	movt	r0, #2
   10dc4:	movt	r3, #2
   10dc8:	rsb	r3, r0, r3
   10dcc:	asr	r3, r3, #2
   10dd0:	add	r3, r3, r3, lsr #31
   10dd4:	asrs	r1, r3, #1
   10dd8:	popeq	{r3, pc}
   10ddc:	movw	r2, #0
   10de0:	movt	r2, #0
   10de4:	cmp	r2, #0
   10de8:	popeq	{r3, pc}
   10dec:	blx	r2
   10df0:	pop	{r3, pc}
   10df4:	push	{r4, lr}
   10df8:	movw	r4, #8508	; 0x213c
   10dfc:	movt	r4, #2
   10e00:	ldrb	r3, [r4]
   10e04:	cmp	r3, #0
   10e08:	popne	{r4, pc}
   10e0c:	bl	10d7c <exit@plt+0x25c>
   10e10:	mov	r3, #1
   10e14:	strb	r3, [r4]
   10e18:	pop	{r4, pc}
   10e1c:	movw	r0, #7868	; 0x1ebc
   10e20:	movt	r0, #2
   10e24:	push	{r3, lr}
   10e28:	ldr	r3, [r0]
   10e2c:	cmp	r3, #0
   10e30:	beq	10e48 <exit@plt+0x328>
   10e34:	movw	r3, #0
   10e38:	movt	r3, #0
   10e3c:	cmp	r3, #0
   10e40:	beq	10e48 <exit@plt+0x328>
   10e44:	blx	r3
   10e48:	pop	{r3, lr}
   10e4c:	b	10db4 <exit@plt+0x294>
   10e50:	push	{r4, r5, r6, lr}
   10e54:	mov	r6, r0
   10e58:	mov	r0, r1
   10e5c:	mov	r5, r1
   10e60:	bl	10aa8 <rtnl_tc_get_parent@plt>
   10e64:	movw	r4, #8512	; 0x2140
   10e68:	movt	r4, #2
   10e6c:	mov	r1, r6
   10e70:	mov	r2, r0
   10e74:	ldr	r0, [r4], #4
   10e78:	bl	10af0 <nl_cli_cls_alloc_cache@plt>
   10e7c:	mov	r2, r5
   10e80:	mov	r1, r4
   10e84:	mov	r6, r0
   10e88:	bl	10a00 <nl_cache_dump_filter@plt>
   10e8c:	mov	r0, r6
   10e90:	pop	{r4, r5, r6, lr}
   10e94:	b	10a78 <nl_cache_free@plt>
   10e98:	push	{r4, lr}
   10e9c:	mov	r4, r1
   10ea0:	bl	10ab4 <rtnl_link_get_ifindex@plt>
   10ea4:	mov	r1, r4
   10ea8:	pop	{r4, lr}
   10eac:	b	10e50 <exit@plt+0x330>
   10eb0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10eb4:	mov	r7, r0
   10eb8:	ldr	r6, [pc, #76]	; 10f0c <exit@plt+0x3ec>
   10ebc:	mov	r8, r1
   10ec0:	ldr	r5, [pc, #72]	; 10f10 <exit@plt+0x3f0>
   10ec4:	mov	r9, r2
   10ec8:	add	r6, pc, r6
   10ecc:	bl	109d4 <abort@plt-0x20>
   10ed0:	add	r5, pc, r5
   10ed4:	rsb	r6, r5, r6
   10ed8:	asrs	r6, r6, #2
   10edc:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10ee0:	sub	r5, r5, #4
   10ee4:	mov	r4, #0
   10ee8:	add	r4, r4, #1
   10eec:	ldr	r3, [r5, #4]!
   10ef0:	mov	r0, r7
   10ef4:	mov	r1, r8
   10ef8:	mov	r2, r9
   10efc:	blx	r3
   10f00:	cmp	r4, r6
   10f04:	bne	10ee8 <exit@plt+0x3c8>
   10f08:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10f0c:	andeq	r0, r1, r8, ror #31
   10f10:	ldrdeq	r0, [r1], -ip
   10f14:	bx	lr

Disassembly of section .fini:

00010f18 <.fini>:
   10f18:	push	{r3, lr}
   10f1c:	pop	{r3, pc}
