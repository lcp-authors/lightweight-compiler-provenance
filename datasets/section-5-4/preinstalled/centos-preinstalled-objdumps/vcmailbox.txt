
centos-preinstalled/vcmailbox:     file format elf32-littlearm


Disassembly of section .init:

0001082c <_init@@Base>:
   1082c:	push	{r3, lr}
   10830:	bl	10ad0 <_start@@Base+0x3c>
   10834:	pop	{r3, pc}

Disassembly of section .plt:

00010838 <__stack_chk_fail@plt-0x14>:
   10838:	push	{lr}		; (str lr, [sp, #-4]!)
   1083c:	ldr	lr, [pc, #4]	; 10848 <_init@@Base+0x1c>
   10840:	add	lr, pc, lr
   10844:	ldr	pc, [lr, #8]!
   10848:			; <UNDEFINED> instruction: 0x000107b8

0001084c <__stack_chk_fail@plt>:
   1084c:	add	ip, pc, #0, 12
   10850:	add	ip, ip, #16, 20	; 0x10000
   10854:	ldr	pc, [ip, #1976]!	; 0x7b8

00010858 <ioctl@plt>:
   10858:	add	ip, pc, #0, 12
   1085c:	add	ip, ip, #16, 20	; 0x10000
   10860:	ldr	pc, [ip, #1968]!	; 0x7b0

00010864 <open64@plt>:
   10864:	add	ip, pc, #0, 12
   10868:	add	ip, ip, #16, 20	; 0x10000
   1086c:	ldr	pc, [ip, #1960]!	; 0x7a8

00010870 <__libc_start_main@plt>:
   10870:	add	ip, pc, #0, 12
   10874:	add	ip, ip, #16, 20	; 0x10000
   10878:	ldr	pc, [ip, #1952]!	; 0x7a0

0001087c <__gmon_start__@plt>:
   1087c:	add	ip, pc, #0, 12
   10880:	add	ip, ip, #16, 20	; 0x10000
   10884:	ldr	pc, [ip, #1944]!	; 0x798

00010888 <exit@plt>:
   10888:	add	ip, pc, #0, 12
   1088c:	add	ip, ip, #16, 20	; 0x10000
   10890:	ldr	pc, [ip, #1936]!	; 0x790

00010894 <strtoul@plt>:
   10894:	add	ip, pc, #0, 12
   10898:	add	ip, ip, #16, 20	; 0x10000
   1089c:	ldr	pc, [ip, #1928]!	; 0x788

000108a0 <memset@plt>:
   108a0:	add	ip, pc, #0, 12
   108a4:	add	ip, ip, #16, 20	; 0x10000
   108a8:	ldr	pc, [ip, #1920]!	; 0x780

000108ac <putchar@plt>:
   108ac:	add	ip, pc, #0, 12
   108b0:	add	ip, ip, #16, 20	; 0x10000
   108b4:	ldr	pc, [ip, #1912]!	; 0x778

000108b8 <__printf_chk@plt>:
   108b8:	add	ip, pc, #0, 12
   108bc:	add	ip, ip, #16, 20	; 0x10000
   108c0:	ldr	pc, [ip, #1904]!	; 0x770

000108c4 <abort@plt>:
   108c4:	add	ip, pc, #0, 12
   108c8:	add	ip, ip, #16, 20	; 0x10000
   108cc:	ldr	pc, [ip, #1896]!	; 0x768

000108d0 <close@plt>:
   108d0:	add	ip, pc, #0, 12
   108d4:	add	ip, ip, #16, 20	; 0x10000
   108d8:	ldr	pc, [ip, #1888]!	; 0x760

Disassembly of section .text:

000108dc <main@@Base>:
   108dc:	ldr	r3, [pc, #400]	; 10a74 <main@@Base+0x198>
   108e0:	ldr	r2, [pc, #400]	; 10a78 <main@@Base+0x19c>
   108e4:	add	r3, pc, r3
   108e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108ec:	sub	sp, sp, #1024	; 0x400
   108f0:	ldr	sl, [r3, r2]
   108f4:	sub	sp, sp, #12
   108f8:	ldr	r4, [pc, #380]	; 10a7c <main@@Base+0x1a0>
   108fc:	mov	r8, r0
   10900:	mov	r7, r1
   10904:	mov	r1, #0
   10908:	ldr	r3, [sl]
   1090c:	add	r4, pc, r4
   10910:	mov	r0, r4
   10914:	str	r3, [sp, #1028]	; 0x404
   10918:	bl	10864 <open64@plt>
   1091c:	subs	fp, r0, #0
   10920:	blt	10a40 <main@@Base+0x164>
   10924:	add	r6, sp, #8
   10928:	mov	r1, #0
   1092c:	sub	r5, r6, #4
   10930:	mov	r2, #1024	; 0x400
   10934:	mov	r0, r5
   10938:	bl	108a0 <memset@plt>
   1093c:	sub	r3, r8, #2
   10940:	cmp	r3, #252	; 0xfc
   10944:	bhi	10a08 <main@@Base+0x12c>
   10948:	add	r9, r8, #2
   1094c:	mov	r4, #1
   10950:	lsl	r3, r9, #2
   10954:	str	r3, [sp, #4]
   10958:	mov	r1, #0
   1095c:	ldr	r0, [r7, #4]!
   10960:	mov	r2, r1
   10964:	add	r4, r4, #1
   10968:	bl	10894 <strtoul@plt>
   1096c:	cmp	r4, r8
   10970:	str	r0, [r6, #4]!
   10974:	bne	10958 <main@@Base+0x7c>
   10978:	add	r3, r4, #1
   1097c:	add	r2, sp, #1024	; 0x400
   10980:	add	r2, r2, #8
   10984:	mov	r1, #25600	; 0x6400
   10988:	add	r3, r2, r3, lsl #2
   1098c:	mov	r0, fp
   10990:	movt	r1, #49156	; 0xc004
   10994:	mov	r2, r5
   10998:	mov	ip, #0
   1099c:	str	ip, [r3, #-1028]	; 0xfffffbfc
   109a0:	bl	10858 <ioctl@plt>
   109a4:	subs	r7, r0, #0
   109a8:	blt	10a24 <main@@Base+0x148>
   109ac:	mov	r0, fp
   109b0:	ldr	r6, [pc, #200]	; 10a80 <main@@Base+0x1a4>
   109b4:	bl	108d0 <close@plt>
   109b8:	sub	r5, r5, #4
   109bc:	add	r6, pc, r6
   109c0:	mov	r4, #0
   109c4:	add	r4, r4, #1
   109c8:	mov	r0, #1
   109cc:	mov	r1, r6
   109d0:	ldr	r2, [r5, #4]!
   109d4:	bl	108b8 <__printf_chk@plt>
   109d8:	cmp	r4, r9
   109dc:	bne	109c4 <main@@Base+0xe8>
   109e0:	mov	r0, #10
   109e4:	bl	108ac <putchar@plt>
   109e8:	mov	r0, r7
   109ec:	ldr	r2, [sp, #1028]	; 0x404
   109f0:	ldr	r3, [sl]
   109f4:	cmp	r2, r3
   109f8:	bne	10a3c <main@@Base+0x160>
   109fc:	add	sp, sp, #1024	; 0x400
   10a00:	add	sp, sp, #12
   10a04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10a08:	ldr	r1, [pc, #116]	; 10a84 <main@@Base+0x1a8>
   10a0c:	mov	r0, #1
   10a10:	ldr	r2, [r7]
   10a14:	add	r1, pc, r1
   10a18:	bl	108b8 <__printf_chk@plt>
   10a1c:	mov	r0, #1
   10a20:	b	109ec <main@@Base+0x110>
   10a24:	ldr	r1, [pc, #92]	; 10a88 <main@@Base+0x1ac>
   10a28:	mov	r2, r7
   10a2c:	mov	r0, #1
   10a30:	add	r1, pc, r1
   10a34:	bl	108b8 <__printf_chk@plt>
   10a38:	b	109ac <main@@Base+0xd0>
   10a3c:	bl	1084c <__stack_chk_fail@plt>
   10a40:	ldr	r1, [pc, #68]	; 10a8c <main@@Base+0x1b0>
   10a44:	mov	r2, r4
   10a48:	mov	r0, #1
   10a4c:	add	r1, pc, r1
   10a50:	bl	108b8 <__printf_chk@plt>
   10a54:	ldr	r1, [pc, #52]	; 10a90 <main@@Base+0x1b4>
   10a58:	mov	r2, r4
   10a5c:	mov	r0, #1
   10a60:	add	r1, pc, r1
   10a64:	mov	r3, #100	; 0x64
   10a68:	bl	108b8 <__printf_chk@plt>
   10a6c:	mvn	r0, #0
   10a70:	bl	10888 <exit@plt>
   10a74:	andeq	r0, r1, r4, lsl r7
   10a78:	andeq	r0, r0, ip, lsr r0
   10a7c:	andeq	r0, r0, ip, lsr #6
   10a80:	andeq	r0, r0, r8, lsl r3
   10a84:	andeq	r0, r0, r4, lsl #5
   10a88:	andeq	r0, r0, r8, lsl #5
   10a8c:	strdeq	r0, [r0], -r8
   10a90:	andeq	r0, r0, r0, lsl #4

00010a94 <_start@@Base>:
   10a94:	mov	fp, #0
   10a98:	mov	lr, #0
   10a9c:	pop	{r1}		; (ldr r1, [sp], #4)
   10aa0:	mov	r2, sp
   10aa4:	push	{r2}		; (str r2, [sp, #-4]!)
   10aa8:	push	{r0}		; (str r0, [sp, #-4]!)
   10aac:	ldr	ip, [pc, #16]	; 10ac4 <_start@@Base+0x30>
   10ab0:	push	{ip}		; (str ip, [sp, #-4]!)
   10ab4:	ldr	r0, [pc, #12]	; 10ac8 <_start@@Base+0x34>
   10ab8:	ldr	r3, [pc, #12]	; 10acc <_start@@Base+0x38>
   10abc:	bl	10870 <__libc_start_main@plt>
   10ac0:	bl	108c4 <abort@plt>
   10ac4:	andeq	r0, r1, ip, lsr #24
   10ac8:	ldrdeq	r0, [r1], -ip
   10acc:	andeq	r0, r1, r8, asr #23
   10ad0:	ldr	r3, [pc, #20]	; 10aec <_start@@Base+0x58>
   10ad4:	ldr	r2, [pc, #20]	; 10af0 <_start@@Base+0x5c>
   10ad8:	add	r3, pc, r3
   10adc:	ldr	r2, [r3, r2]
   10ae0:	cmp	r2, #0
   10ae4:	bxeq	lr
   10ae8:	b	1087c <__gmon_start__@plt>
   10aec:	andeq	r0, r1, r0, lsr #10
   10af0:	andeq	r0, r0, r0, asr #32
   10af4:	push	{r3, lr}
   10af8:	movw	r0, #4168	; 0x1048
   10afc:	ldr	r3, [pc, #36]	; 10b28 <_start@@Base+0x94>
   10b00:	movt	r0, #2
   10b04:	rsb	r3, r0, r3
   10b08:	cmp	r3, #6
   10b0c:	popls	{r3, pc}
   10b10:	movw	r3, #0
   10b14:	movt	r3, #0
   10b18:	cmp	r3, #0
   10b1c:	popeq	{r3, pc}
   10b20:	blx	r3
   10b24:	pop	{r3, pc}
   10b28:	andeq	r1, r2, fp, asr #32
   10b2c:	push	{r3, lr}
   10b30:	movw	r0, #4168	; 0x1048
   10b34:	movw	r3, #4168	; 0x1048
   10b38:	movt	r0, #2
   10b3c:	movt	r3, #2
   10b40:	rsb	r3, r0, r3
   10b44:	asr	r3, r3, #2
   10b48:	add	r3, r3, r3, lsr #31
   10b4c:	asrs	r1, r3, #1
   10b50:	popeq	{r3, pc}
   10b54:	movw	r2, #0
   10b58:	movt	r2, #0
   10b5c:	cmp	r2, #0
   10b60:	popeq	{r3, pc}
   10b64:	blx	r2
   10b68:	pop	{r3, pc}
   10b6c:	push	{r4, lr}
   10b70:	movw	r4, #4168	; 0x1048
   10b74:	movt	r4, #2
   10b78:	ldrb	r3, [r4]
   10b7c:	cmp	r3, #0
   10b80:	popne	{r4, pc}
   10b84:	bl	10af4 <_start@@Base+0x60>
   10b88:	mov	r3, #1
   10b8c:	strb	r3, [r4]
   10b90:	pop	{r4, pc}
   10b94:	movw	r0, #3796	; 0xed4
   10b98:	movt	r0, #2
   10b9c:	push	{r3, lr}
   10ba0:	ldr	r3, [r0]
   10ba4:	cmp	r3, #0
   10ba8:	beq	10bc0 <_start@@Base+0x12c>
   10bac:	movw	r3, #0
   10bb0:	movt	r3, #0
   10bb4:	cmp	r3, #0
   10bb8:	beq	10bc0 <_start@@Base+0x12c>
   10bbc:	blx	r3
   10bc0:	pop	{r3, lr}
   10bc4:	b	10b2c <_start@@Base+0x98>

00010bc8 <__libc_csu_init@@Base>:
   10bc8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10bcc:	mov	r7, r0
   10bd0:	ldr	r6, [pc, #76]	; 10c24 <__libc_csu_init@@Base+0x5c>
   10bd4:	mov	r8, r1
   10bd8:	ldr	r5, [pc, #72]	; 10c28 <__libc_csu_init@@Base+0x60>
   10bdc:	mov	r9, r2
   10be0:	add	r6, pc, r6
   10be4:	bl	1082c <_init@@Base>
   10be8:	add	r5, pc, r5
   10bec:	rsb	r6, r5, r6
   10bf0:	asrs	r6, r6, #2
   10bf4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10bf8:	sub	r5, r5, #4
   10bfc:	mov	r4, #0
   10c00:	add	r4, r4, #1
   10c04:	ldr	r3, [r5, #4]!
   10c08:	mov	r0, r7
   10c0c:	mov	r1, r8
   10c10:	mov	r2, r9
   10c14:	blx	r3
   10c18:	cmp	r4, r6
   10c1c:	bne	10c00 <__libc_csu_init@@Base+0x38>
   10c20:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10c24:	andeq	r0, r1, r8, ror #5
   10c28:	ldrdeq	r0, [r1], -ip

00010c2c <__libc_csu_fini@@Base>:
   10c2c:	bx	lr

Disassembly of section .fini:

00010c30 <_fini@@Base>:
   10c30:	push	{r3, lr}
   10c34:	pop	{r3, pc}
