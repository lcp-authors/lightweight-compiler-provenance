
centos-preinstalled/p11-kit:     file format elf32-littlearm


Disassembly of section .init:

00011260 <_init@@Base>:
   11260:	push	{r3, lr}
   11264:	bl	115c8 <__assert_fail@plt+0x54>
   11268:	pop	{r3, pc}

Disassembly of section .plt:

0001126c <calloc@plt-0x14>:
   1126c:	push	{lr}		; (str lr, [sp, #-4]!)
   11270:	ldr	lr, [pc, #4]	; 1127c <_init@@Base+0x1c>
   11274:	add	lr, pc, lr
   11278:	ldr	pc, [lr, #8]!
   1127c:	andeq	r4, r1, r4, lsl #27

00011280 <calloc@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #20, 20	; 0x14000
   11288:	ldr	pc, [ip, #3460]!	; 0xd84

0001128c <getpwuid_r@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #20, 20	; 0x14000
   11294:	ldr	pc, [ip, #3452]!	; 0xd7c

00011298 <pthread_mutexattr_init@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #20, 20	; 0x14000
   112a0:	ldr	pc, [ip, #3444]!	; 0xd74

000112a4 <strcmp@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #20, 20	; 0x14000
   112ac:	ldr	pc, [ip, #3436]!	; 0xd6c

000112b0 <strtol@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #20, 20	; 0x14000
   112b8:	ldr	pc, [ip, #3428]!	; 0xd64

000112bc <getuid@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #20, 20	; 0x14000
   112c4:	ldr	pc, [ip, #3420]!	; 0xd5c

000112c8 <free@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #20, 20	; 0x14000
   112d0:	ldr	pc, [ip, #3412]!	; 0xd54

000112d4 <__vsnprintf_chk@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #20, 20	; 0x14000
   112dc:	ldr	pc, [ip, #3404]!	; 0xd4c

000112e0 <memcpy@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #20, 20	; 0x14000
   112e8:	ldr	pc, [ip, #3396]!	; 0xd44

000112ec <pthread_mutex_init@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #20, 20	; 0x14000
   112f4:	ldr	pc, [ip, #3388]!	; 0xd3c

000112f8 <strdup@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #20, 20	; 0x14000
   11300:	ldr	pc, [ip, #3380]!	; 0xd34

00011304 <p11_kit_module_get_name@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #20, 20	; 0x14000
   1130c:	ldr	pc, [ip, #3372]!	; 0xd2c

00011310 <__stack_chk_fail@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #20, 20	; 0x14000
   11318:	ldr	pc, [ip, #3364]!	; 0xd24

0001131c <p11_kit_modules_load_and_initialize@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #20, 20	; 0x14000
   11324:	ldr	pc, [ip, #3356]!	; 0xd1c

00011328 <sysconf@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #20, 20	; 0x14000
   11330:	ldr	pc, [ip, #3348]!	; 0xd14

00011334 <getrlimit@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #20, 20	; 0x14000
   1133c:	ldr	pc, [ip, #3340]!	; 0xd0c

00011340 <dlerror@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #20, 20	; 0x14000
   11348:	ldr	pc, [ip, #3332]!	; 0xd04

0001134c <p11_kit_be_quiet@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #20, 20	; 0x14000
   11354:	ldr	pc, [ip, #3324]!	; 0xcfc

00011358 <fwrite@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #20, 20	; 0x14000
   11360:	ldr	pc, [ip, #3316]!	; 0xcf4

00011364 <p11_kit_space_strdup@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #20, 20	; 0x14000
   1136c:	ldr	pc, [ip, #3308]!	; 0xcec

00011370 <opendir@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #20, 20	; 0x14000
   11378:	ldr	pc, [ip, #3300]!	; 0xce4

0001137c <getenv@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #20, 20	; 0x14000
   11384:	ldr	pc, [ip, #3292]!	; 0xcdc

00011388 <p11_kit_config_option@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #20, 20	; 0x14000
   11390:	ldr	pc, [ip, #3284]!	; 0xcd4

00011394 <puts@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #20, 20	; 0x14000
   1139c:	ldr	pc, [ip, #3276]!	; 0xccc

000113a0 <malloc@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #20, 20	; 0x14000
   113a8:	ldr	pc, [ip, #3268]!	; 0xcc4

000113ac <__libc_start_main@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #20, 20	; 0x14000
   113b4:	ldr	pc, [ip, #3260]!	; 0xcbc

000113b8 <__fxstat@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #20, 20	; 0x14000
   113c0:	ldr	pc, [ip, #3252]!	; 0xcb4

000113c4 <__vfprintf_chk@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #20, 20	; 0x14000
   113cc:	ldr	pc, [ip, #3244]!	; 0xcac

000113d0 <__ctype_tolower_loc@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #20, 20	; 0x14000
   113d8:	ldr	pc, [ip, #3236]!	; 0xca4

000113dc <__gmon_start__@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #20, 20	; 0x14000
   113e4:	ldr	pc, [ip, #3228]!	; 0xc9c

000113e8 <open@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #20, 20	; 0x14000
   113f0:	ldr	pc, [ip, #3220]!	; 0xc94

000113f4 <pthread_mutexattr_settype@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #20, 20	; 0x14000
   113fc:	ldr	pc, [ip, #3212]!	; 0xc8c

00011400 <getopt_long@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #20, 20	; 0x14000
   11408:	ldr	pc, [ip, #3204]!	; 0xc84

0001140c <__ctype_b_loc@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #20, 20	; 0x14000
   11414:	ldr	pc, [ip, #3196]!	; 0xc7c

00011418 <getpid@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #20, 20	; 0x14000
   11420:	ldr	pc, [ip, #3188]!	; 0xc74

00011424 <strlen@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #20, 20	; 0x14000
   1142c:	ldr	pc, [ip, #3180]!	; 0xc6c

00011430 <mmap@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #20, 20	; 0x14000
   11438:	ldr	pc, [ip, #3172]!	; 0xc64

0001143c <strchr@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #20, 20	; 0x14000
   11444:	ldr	pc, [ip, #3164]!	; 0xc5c

00011448 <execv@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #20, 20	; 0x14000
   11450:	ldr	pc, [ip, #3156]!	; 0xc54

00011454 <__errno_location@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #20, 20	; 0x14000
   1145c:	ldr	pc, [ip, #3148]!	; 0xc4c

00011460 <__strdup@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #20, 20	; 0x14000
   11468:	ldr	pc, [ip, #3140]!	; 0xc44

0001146c <memset@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #20, 20	; 0x14000
   11474:	ldr	pc, [ip, #3132]!	; 0xc3c

00011478 <putchar@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #20, 20	; 0x14000
   11480:	ldr	pc, [ip, #3124]!	; 0xc34

00011484 <strncpy@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #20, 20	; 0x14000
   1148c:	ldr	pc, [ip, #3116]!	; 0xc2c

00011490 <__printf_chk@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #20, 20	; 0x14000
   11498:	ldr	pc, [ip, #3108]!	; 0xc24

0001149c <asprintf@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #20, 20	; 0x14000
   114a4:	ldr	pc, [ip, #3100]!	; 0xc1c

000114a8 <__fprintf_chk@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #20, 20	; 0x14000
   114b0:	ldr	pc, [ip, #3092]!	; 0xc14

000114b4 <getauxval@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #20, 20	; 0x14000
   114bc:	ldr	pc, [ip, #3084]!	; 0xc0c

000114c0 <munmap@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #20, 20	; 0x14000
   114c8:	ldr	pc, [ip, #3076]!	; 0xc04

000114cc <putenv@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #20, 20	; 0x14000
   114d4:	ldr	pc, [ip, #3068]!	; 0xbfc

000114d8 <__xpg_strerror_r@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #20, 20	; 0x14000
   114e0:	ldr	pc, [ip, #3060]!	; 0xbf4

000114e4 <readdir@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #20, 20	; 0x14000
   114ec:	ldr	pc, [ip, #3052]!	; 0xbec

000114f0 <fputc@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #20, 20	; 0x14000
   114f8:	ldr	pc, [ip, #3044]!	; 0xbe4

000114fc <p11_kit_be_loud@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #20, 20	; 0x14000
   11504:	ldr	pc, [ip, #3036]!	; 0xbdc

00011508 <dirfd@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #20, 20	; 0x14000
   11510:	ldr	pc, [ip, #3028]!	; 0xbd4

00011514 <strpbrk@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #20, 20	; 0x14000
   1151c:	ldr	pc, [ip, #3020]!	; 0xbcc

00011520 <p11_kit_strerror@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #20, 20	; 0x14000
   11528:	ldr	pc, [ip, #3012]!	; 0xbc4

0001152c <strncmp@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #20, 20	; 0x14000
   11534:	ldr	pc, [ip, #3004]!	; 0xbbc

00011538 <abort@plt>:
   11538:	add	ip, pc, #0, 12
   1153c:	add	ip, ip, #20, 20	; 0x14000
   11540:	ldr	pc, [ip, #2996]!	; 0xbb4

00011544 <close@plt>:
   11544:	add	ip, pc, #0, 12
   11548:	add	ip, ip, #20, 20	; 0x14000
   1154c:	ldr	pc, [ip, #2988]!	; 0xbac

00011550 <closedir@plt>:
   11550:	add	ip, pc, #0, 12
   11554:	add	ip, ip, #20, 20	; 0x14000
   11558:	ldr	pc, [ip, #2980]!	; 0xba4

0001155c <pthread_mutexattr_destroy@plt>:
   1155c:	add	ip, pc, #0, 12
   11560:	add	ip, ip, #20, 20	; 0x14000
   11564:	ldr	pc, [ip, #2972]!	; 0xb9c

00011568 <p11_kit_modules_finalize_and_release@plt>:
   11568:	add	ip, pc, #0, 12
   1156c:	add	ip, ip, #20, 20	; 0x14000
   11570:	ldr	pc, [ip, #2964]!	; 0xb94

00011574 <__assert_fail@plt>:
   11574:	add	ip, pc, #0, 12
   11578:	add	ip, ip, #20, 20	; 0x14000
   1157c:	ldr	pc, [ip, #2956]!	; 0xb8c

Disassembly of section .text:

00011580 <strndup@@Base-0x1c9c>:
   11580:	ldr	r2, [pc]	; 11588 <__assert_fail@plt+0x14>
   11584:	b	12624 <__assert_fail@plt+0x10b0>
   11588:	andeq	r4, r1, r0, lsl #27
   1158c:	mov	fp, #0
   11590:	mov	lr, #0
   11594:	pop	{r1}		; (ldr r1, [sp], #4)
   11598:	mov	r2, sp
   1159c:	push	{r2}		; (str r2, [sp, #-4]!)
   115a0:	push	{r0}		; (str r0, [sp, #-4]!)
   115a4:	ldr	ip, [pc, #16]	; 115bc <__assert_fail@plt+0x48>
   115a8:	push	{ip}		; (str ip, [sp, #-4]!)
   115ac:	ldr	r0, [pc, #12]	; 115c0 <__assert_fail@plt+0x4c>
   115b0:	ldr	r3, [pc, #12]	; 115c4 <__assert_fail@plt+0x50>
   115b4:	bl	113ac <__libc_start_main@plt>
   115b8:	bl	11538 <abort@plt>
   115bc:	muleq	r1, r8, r9
   115c0:	andeq	r1, r1, r0, lsl #11
   115c4:	andeq	r4, r1, r4, lsr r9
   115c8:	ldr	r3, [pc, #20]	; 115e4 <__assert_fail@plt+0x70>
   115cc:	ldr	r2, [pc, #20]	; 115e8 <__assert_fail@plt+0x74>
   115d0:	add	r3, pc, r3
   115d4:	ldr	r2, [r3, r2]
   115d8:	cmp	r2, #0
   115dc:	bxeq	lr
   115e0:	b	113dc <__gmon_start__@plt>
   115e4:	andeq	r4, r1, r8, lsr #20
   115e8:	andeq	r0, r0, r0, lsr #2
   115ec:	push	{r3, lr}
   115f0:	movw	r0, #24896	; 0x6140
   115f4:	ldr	r3, [pc, #36]	; 11620 <__assert_fail@plt+0xac>
   115f8:	movt	r0, #2
   115fc:	rsb	r3, r0, r3
   11600:	cmp	r3, #6
   11604:	popls	{r3, pc}
   11608:	movw	r3, #0
   1160c:	movt	r3, #0
   11610:	cmp	r3, #0
   11614:	popeq	{r3, pc}
   11618:	blx	r3
   1161c:	pop	{r3, pc}
   11620:	andeq	r6, r2, r3, asr #2
   11624:	push	{r3, lr}
   11628:	movw	r0, #24896	; 0x6140
   1162c:	movw	r3, #24896	; 0x6140
   11630:	movt	r0, #2
   11634:	movt	r3, #2
   11638:	rsb	r3, r0, r3
   1163c:	asr	r3, r3, #2
   11640:	add	r3, r3, r3, lsr #31
   11644:	asrs	r1, r3, #1
   11648:	popeq	{r3, pc}
   1164c:	movw	r2, #0
   11650:	movt	r2, #0
   11654:	cmp	r2, #0
   11658:	popeq	{r3, pc}
   1165c:	blx	r2
   11660:	pop	{r3, pc}
   11664:	push	{r4, lr}
   11668:	movw	r4, #24908	; 0x614c
   1166c:	movt	r4, #2
   11670:	ldrb	r3, [r4]
   11674:	cmp	r3, #0
   11678:	popne	{r4, pc}
   1167c:	bl	115ec <__assert_fail@plt+0x78>
   11680:	mov	r3, #1
   11684:	strb	r3, [r4]
   11688:	pop	{r4, pc}
   1168c:	movw	r0, #24228	; 0x5ea4
   11690:	movt	r0, #2
   11694:	push	{r3, lr}
   11698:	ldr	r3, [r0]
   1169c:	cmp	r3, #0
   116a0:	beq	116b8 <__assert_fail@plt+0x144>
   116a4:	movw	r3, #0
   116a8:	movt	r3, #0
   116ac:	cmp	r3, #0
   116b0:	beq	116b8 <__assert_fail@plt+0x144>
   116b4:	blx	r3
   116b8:	pop	{r3, lr}
   116bc:	b	11624 <__assert_fail@plt+0xb0>
   116c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116c4:	movw	r7, #24896	; 0x6140
   116c8:	movt	r7, #2
   116cc:	sub	sp, sp, #1424	; 0x590
   116d0:	sub	sp, sp, #4
   116d4:	mov	r2, #80	; 0x50
   116d8:	ldr	r3, [r7]
   116dc:	mov	r4, r0
   116e0:	mov	r5, r1
   116e4:	add	r0, sp, #156	; 0x9c
   116e8:	mov	r1, #0
   116ec:	movw	r8, #18912	; 0x49e0
   116f0:	str	r3, [sp, #1420]	; 0x58c
   116f4:	bl	1146c <memset@plt>
   116f8:	add	r3, sp, #40	; 0x28
   116fc:	mov	r2, #0
   11700:	movt	r8, #1
   11704:	movw	r6, #18920	; 0x49e8
   11708:	str	r2, [r3], #4
   1170c:	movt	r6, #1
   11710:	str	r2, [r3], #4
   11714:	movw	lr, #18928	; 0x49f0
   11718:	str	r2, [r3], #4
   1171c:	movt	lr, #1
   11720:	str	r2, [r3], #4
   11724:	movw	r0, #18936	; 0x49f8
   11728:	str	r2, [r3], #4
   1172c:	movt	r0, #1
   11730:	str	r2, [r3], #4
   11734:	movw	r1, #18944	; 0x4a00
   11738:	str	r2, [r3], #4
   1173c:	movt	r1, #1
   11740:	str	r2, [r3], #4
   11744:	movw	ip, #18964	; 0x4a14
   11748:	str	r2, [r3], #4
   1174c:	movt	ip, #1
   11750:	str	r2, [r3]
   11754:	movw	r3, #18992	; 0x4a30
   11758:	str	r2, [sp, #32]
   1175c:	movt	r3, #1
   11760:	mov	r2, #113	; 0x71
   11764:	str	lr, [sp, #188]	; 0xbc
   11768:	str	r0, [sp, #204]	; 0xcc
   1176c:	mov	lr, #118	; 0x76
   11770:	str	r1, [sp, #36]	; 0x24
   11774:	mov	r0, #108	; 0x6c
   11778:	mov	r1, #104	; 0x68
   1177c:	str	r8, [sp, #156]	; 0x9c
   11780:	str	r6, [sp, #172]	; 0xac
   11784:	str	ip, [sp, #48]	; 0x30
   11788:	str	r3, [sp, #60]	; 0x3c
   1178c:	str	lr, [sp, #168]	; 0xa8
   11790:	str	lr, [sp, #44]	; 0x2c
   11794:	str	r2, [sp, #184]	; 0xb8
   11798:	str	r2, [sp, #56]	; 0x38
   1179c:	str	r0, [sp, #200]	; 0xc8
   117a0:	str	r1, [sp, #216]	; 0xd8
   117a4:	mov	r0, r4
   117a8:	mov	r1, r5
   117ac:	add	r2, sp, #156	; 0x9c
   117b0:	bl	12480 <__assert_fail@plt+0xf0c>
   117b4:	cmn	r0, #1
   117b8:	beq	1184c <__assert_fail@plt+0x2d8>
   117bc:	cmp	r0, #108	; 0x6c
   117c0:	beq	117a4 <__assert_fail@plt+0x230>
   117c4:	bgt	11804 <__assert_fail@plt+0x290>
   117c8:	cmp	r0, #63	; 0x3f
   117cc:	beq	1181c <__assert_fail@plt+0x2a8>
   117d0:	cmp	r0, #104	; 0x68
   117d4:	bne	1182c <__assert_fail@plt+0x2b8>
   117d8:	add	r0, sp, #32
   117dc:	add	r1, sp, #156	; 0x9c
   117e0:	bl	121e8 <__assert_fail@plt+0xc74>
   117e4:	mov	r0, #0
   117e8:	ldr	r2, [sp, #1420]	; 0x58c
   117ec:	ldr	r3, [r7]
   117f0:	cmp	r2, r3
   117f4:	bne	11f08 <__assert_fail@plt+0x994>
   117f8:	add	sp, sp, #1424	; 0x590
   117fc:	add	sp, sp, #4
   11800:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11804:	cmp	r0, #113	; 0x71
   11808:	beq	11824 <__assert_fail@plt+0x2b0>
   1180c:	cmp	r0, #118	; 0x76
   11810:	bne	1182c <__assert_fail@plt+0x2b8>
   11814:	bl	114fc <p11_kit_be_loud@plt>
   11818:	b	117a4 <__assert_fail@plt+0x230>
   1181c:	mov	r0, #2
   11820:	b	117e8 <__assert_fail@plt+0x274>
   11824:	bl	1134c <p11_kit_be_quiet@plt>
   11828:	b	117a4 <__assert_fail@plt+0x230>
   1182c:	movw	r0, #19016	; 0x4a48
   11830:	movw	r1, #19056	; 0x4a70
   11834:	movw	r3, #18860	; 0x49ac
   11838:	movt	r0, #1
   1183c:	movt	r1, #1
   11840:	movw	r2, #279	; 0x117
   11844:	movt	r3, #1
   11848:	bl	11574 <__assert_fail@plt>
   1184c:	movw	r3, #24904	; 0x6148
   11850:	movt	r3, #2
   11854:	ldr	r3, [r3]
   11858:	cmp	r4, r3
   1185c:	beq	11874 <__assert_fail@plt+0x300>
   11860:	movw	r0, #19072	; 0x4a80
   11864:	movt	r0, #1
   11868:	bl	13938 <secure_getenv@@Base+0x59c>
   1186c:	mov	r0, #2
   11870:	b	117e8 <__assert_fail@plt+0x274>
   11874:	mov	r0, #0
   11878:	bl	1131c <p11_kit_modules_load_and_initialize@plt>
   1187c:	cmp	r0, #0
   11880:	str	r0, [sp, #16]
   11884:	beq	11f0c <__assert_fail@plt+0x998>
   11888:	ldr	r0, [r0]
   1188c:	cmp	r0, #0
   11890:	beq	11be4 <__assert_fail@plt+0x670>
   11894:	ldr	r4, [sp, #16]
   11898:	ldr	ip, [sp, #16]
   1189c:	str	r7, [sp, #20]
   118a0:	add	ip, ip, #4
   118a4:	str	ip, [sp, #8]
   118a8:	movw	ip, #18904	; 0x49d8
   118ac:	movt	ip, #1
   118b0:	str	ip, [sp, #12]
   118b4:	bl	11304 <p11_kit_module_get_name@plt>
   118b8:	movw	r1, #19100	; 0x4a9c
   118bc:	movt	r1, #1
   118c0:	mov	r7, r0
   118c4:	ldr	r0, [r4]
   118c8:	bl	11388 <p11_kit_config_option@plt>
   118cc:	ldr	ip, [sp, #12]
   118d0:	movw	r1, #19108	; 0x4aa4
   118d4:	movt	r1, #1
   118d8:	mov	r2, ip
   118dc:	cmp	r0, #0
   118e0:	mov	r3, r0
   118e4:	str	r0, [sp, #4]
   118e8:	mov	r0, #1
   118ec:	moveq	r3, ip
   118f0:	cmp	r7, #0
   118f4:	movne	r2, r7
   118f8:	bl	11490 <__printf_chk@plt>
   118fc:	ldr	r6, [r4]
   11900:	add	r0, sp, #80	; 0x50
   11904:	ldr	r3, [r6, #12]
   11908:	blx	r3
   1190c:	cmp	r0, #0
   11910:	bne	11ef0 <__assert_fail@plt+0x97c>
   11914:	mov	r1, #32
   11918:	add	r0, sp, #120	; 0x78
   1191c:	bl	11364 <p11_kit_space_strdup@plt>
   11920:	movw	r1, #19148	; 0x4acc
   11924:	movt	r1, #1
   11928:	mov	r2, r0
   1192c:	mov	r4, r0
   11930:	mov	r0, #1
   11934:	bl	11490 <__printf_chk@plt>
   11938:	mov	r0, r4
   1193c:	bl	112c8 <free@plt>
   11940:	mov	r1, #32
   11944:	add	r0, sp, #82	; 0x52
   11948:	bl	11364 <p11_kit_space_strdup@plt>
   1194c:	movw	r1, #19180	; 0x4aec
   11950:	movt	r1, #1
   11954:	mov	r2, r0
   11958:	mov	r4, r0
   1195c:	mov	r0, #1
   11960:	bl	11490 <__printf_chk@plt>
   11964:	mov	r0, r4
   11968:	bl	112c8 <free@plt>
   1196c:	ldrb	r2, [sp, #152]	; 0x98
   11970:	ldrb	r3, [sp, #153]	; 0x99
   11974:	movw	r1, #19212	; 0x4b0c
   11978:	mov	r0, #1
   1197c:	movt	r1, #1
   11980:	bl	11490 <__printf_chk@plt>
   11984:	mov	r2, #256	; 0x100
   11988:	ldr	r3, [r6, #20]
   1198c:	mov	r0, #1
   11990:	str	r2, [sp, #28]
   11994:	add	r1, sp, #396	; 0x18c
   11998:	add	r2, sp, #28
   1199c:	blx	r3
   119a0:	subs	r4, r0, #0
   119a4:	bne	11ef0 <__assert_fail@plt+0x97c>
   119a8:	ldr	r3, [sp, #28]
   119ac:	cmp	r3, #0
   119b0:	addne	r5, sp, #392	; 0x188
   119b4:	beq	11bb8 <__assert_fail@plt+0x644>
   119b8:	ldr	r3, [r6, #28]
   119bc:	add	r1, sp, #236	; 0xec
   119c0:	ldr	r0, [r5, #4]!
   119c4:	blx	r3
   119c8:	cmp	r0, #0
   119cc:	bne	11bf4 <__assert_fail@plt+0x680>
   119d0:	mov	r1, #32
   119d4:	add	r0, sp, #236	; 0xec
   119d8:	bl	11364 <p11_kit_space_strdup@plt>
   119dc:	movw	r1, #19240	; 0x4b28
   119e0:	movt	r1, #1
   119e4:	mov	r2, r0
   119e8:	mov	r8, r0
   119ec:	mov	r0, #1
   119f0:	bl	11490 <__printf_chk@plt>
   119f4:	mov	r0, r8
   119f8:	bl	112c8 <free@plt>
   119fc:	add	r2, sp, #240	; 0xf0
   11a00:	mov	r1, #32
   11a04:	add	r0, sp, #268	; 0x10c
   11a08:	add	fp, r2, #75	; 0x4b
   11a0c:	bl	11364 <p11_kit_space_strdup@plt>
   11a10:	movw	r1, #19256	; 0x4b38
   11a14:	movt	r1, #1
   11a18:	mov	r2, r0
   11a1c:	mov	r8, r0
   11a20:	mov	r0, #1
   11a24:	bl	11490 <__printf_chk@plt>
   11a28:	mov	r0, r8
   11a2c:	bl	112c8 <free@plt>
   11a30:	mov	r1, #16
   11a34:	add	r0, sp, #300	; 0x12c
   11a38:	bl	11364 <p11_kit_space_strdup@plt>
   11a3c:	movw	r1, #19284	; 0x4b54
   11a40:	movt	r1, #1
   11a44:	mov	r8, r0
   11a48:	mov	r2, r0
   11a4c:	mov	r0, #1
   11a50:	bl	11490 <__printf_chk@plt>
   11a54:	mov	r0, r8
   11a58:	bl	112c8 <free@plt>
   11a5c:	add	ip, sp, #240	; 0xf0
   11a60:	add	sl, ip, #91	; 0x5b
   11a64:	mov	r8, fp
   11a68:	ldrb	r9, [r8, #1]!
   11a6c:	tst	r9, #128	; 0x80
   11a70:	beq	11a9c <__assert_fail@plt+0x528>
   11a74:	cmp	r9, #31
   11a78:	bhi	11a9c <__assert_fail@plt+0x528>
   11a7c:	bl	1140c <__ctype_b_loc@plt>
   11a80:	lsl	r9, r9, #1
   11a84:	ldr	r3, [r0]
   11a88:	ldrh	r9, [r3, r9]
   11a8c:	and	r9, r9, #8192	; 0x2000
   11a90:	uxth	r9, r9
   11a94:	cmp	r9, #0
   11a98:	beq	11e80 <__assert_fail@plt+0x90c>
   11a9c:	cmp	r8, sl
   11aa0:	bne	11a68 <__assert_fail@plt+0x4f4>
   11aa4:	add	r0, sp, #316	; 0x13c
   11aa8:	mov	r1, #16
   11aac:	bl	11364 <p11_kit_space_strdup@plt>
   11ab0:	mov	r8, r0
   11ab4:	mov	r2, r8
   11ab8:	movw	r1, #19304	; 0x4b68
   11abc:	mov	r0, #1
   11ac0:	movt	r1, #1
   11ac4:	bl	11490 <__printf_chk@plt>
   11ac8:	mov	r0, r8
   11acc:	bl	112c8 <free@plt>
   11ad0:	movw	r3, #64488	; 0xfbe8
   11ad4:	add	r1, sp, #1424	; 0x590
   11ad8:	movt	r3, #65535	; 0xffff
   11adc:	ldrh	r3, [r1, r3]
   11ae0:	uxth	r3, r3
   11ae4:	cmp	r3, #0
   11ae8:	bne	11e64 <__assert_fail@plt+0x8f0>
   11aec:	movw	r3, #64490	; 0xfbea
   11af0:	add	r2, sp, #1424	; 0x590
   11af4:	movt	r3, #65535	; 0xffff
   11af8:	ldrh	r3, [r2, r3]
   11afc:	uxth	r3, r3
   11b00:	cmp	r3, #0
   11b04:	bne	11e48 <__assert_fail@plt+0x8d4>
   11b08:	movw	r0, #19404	; 0x4bcc
   11b0c:	movt	r0, #1
   11b10:	bl	11394 <puts@plt>
   11b14:	ldr	r3, [sp, #332]	; 0x14c
   11b18:	tst	r3, #1
   11b1c:	bne	11e28 <__assert_fail@plt+0x8b4>
   11b20:	tst	r3, #2
   11b24:	bne	11e08 <__assert_fail@plt+0x894>
   11b28:	tst	r3, #4
   11b2c:	bne	11de8 <__assert_fail@plt+0x874>
   11b30:	tst	r3, #8
   11b34:	bne	11dc8 <__assert_fail@plt+0x854>
   11b38:	tst	r3, #32
   11b3c:	bne	11da8 <__assert_fail@plt+0x834>
   11b40:	tst	r3, #64	; 0x40
   11b44:	bne	11d88 <__assert_fail@plt+0x814>
   11b48:	tst	r3, #256	; 0x100
   11b4c:	bne	11d68 <__assert_fail@plt+0x7f4>
   11b50:	tst	r3, #512	; 0x200
   11b54:	bne	11d48 <__assert_fail@plt+0x7d4>
   11b58:	tst	r3, #1024	; 0x400
   11b5c:	bne	11d28 <__assert_fail@plt+0x7b4>
   11b60:	tst	r3, #2048	; 0x800
   11b64:	bne	11d08 <__assert_fail@plt+0x794>
   11b68:	tst	r3, #65536	; 0x10000
   11b6c:	bne	11ce8 <__assert_fail@plt+0x774>
   11b70:	tst	r3, #131072	; 0x20000
   11b74:	bne	11cc8 <__assert_fail@plt+0x754>
   11b78:	tst	r3, #262144	; 0x40000
   11b7c:	bne	11ca8 <__assert_fail@plt+0x734>
   11b80:	tst	r3, #524288	; 0x80000
   11b84:	bne	11c88 <__assert_fail@plt+0x714>
   11b88:	tst	r3, #1048576	; 0x100000
   11b8c:	bne	11c68 <__assert_fail@plt+0x6f4>
   11b90:	tst	r3, #2097152	; 0x200000
   11b94:	bne	11c48 <__assert_fail@plt+0x6d4>
   11b98:	tst	r3, #4194304	; 0x400000
   11b9c:	bne	11c28 <__assert_fail@plt+0x6b4>
   11ba0:	tst	r3, #8388608	; 0x800000
   11ba4:	bne	11c0c <__assert_fail@plt+0x698>
   11ba8:	ldr	r3, [sp, #28]
   11bac:	add	r4, r4, #1
   11bb0:	cmp	r4, r3
   11bb4:	bcc	119b8 <__assert_fail@plt+0x444>
   11bb8:	mov	r0, r7
   11bbc:	ldr	r4, [sp, #8]
   11bc0:	bl	112c8 <free@plt>
   11bc4:	ldr	r0, [sp, #4]
   11bc8:	bl	112c8 <free@plt>
   11bcc:	ldr	ip, [sp, #8]
   11bd0:	ldr	r0, [ip], #4
   11bd4:	cmp	r0, #0
   11bd8:	str	ip, [sp, #8]
   11bdc:	bne	118b4 <__assert_fail@plt+0x340>
   11be0:	ldr	r7, [sp, #20]
   11be4:	ldr	r0, [sp, #16]
   11be8:	bl	11568 <p11_kit_modules_finalize_and_release@plt>
   11bec:	mov	r0, #0
   11bf0:	b	117e8 <__assert_fail@plt+0x274>
   11bf4:	bl	11520 <p11_kit_strerror@plt>
   11bf8:	mov	r1, r0
   11bfc:	movw	r0, #19116	; 0x4aac
   11c00:	movt	r0, #1
   11c04:	bl	13938 <secure_getenv@@Base+0x59c>
   11c08:	b	11ba8 <__assert_fail@plt+0x634>
   11c0c:	movw	r1, #19420	; 0x4bdc
   11c10:	movw	r2, #19780	; 0x4d44
   11c14:	movt	r1, #1
   11c18:	movt	r2, #1
   11c1c:	mov	r0, #1
   11c20:	bl	11490 <__printf_chk@plt>
   11c24:	b	11ba8 <__assert_fail@plt+0x634>
   11c28:	movw	r1, #19420	; 0x4bdc
   11c2c:	movw	r2, #19764	; 0x4d34
   11c30:	movt	r1, #1
   11c34:	movt	r2, #1
   11c38:	mov	r0, #1
   11c3c:	bl	11490 <__printf_chk@plt>
   11c40:	ldr	r3, [sp, #332]	; 0x14c
   11c44:	b	11ba0 <__assert_fail@plt+0x62c>
   11c48:	movw	r1, #19420	; 0x4bdc
   11c4c:	movw	r2, #19744	; 0x4d20
   11c50:	movt	r1, #1
   11c54:	movt	r2, #1
   11c58:	mov	r0, #1
   11c5c:	bl	11490 <__printf_chk@plt>
   11c60:	ldr	r3, [sp, #332]	; 0x14c
   11c64:	b	11b98 <__assert_fail@plt+0x624>
   11c68:	movw	r1, #19420	; 0x4bdc
   11c6c:	movw	r2, #19724	; 0x4d0c
   11c70:	movt	r1, #1
   11c74:	movt	r2, #1
   11c78:	mov	r0, #1
   11c7c:	bl	11490 <__printf_chk@plt>
   11c80:	ldr	r3, [sp, #332]	; 0x14c
   11c84:	b	11b90 <__assert_fail@plt+0x61c>
   11c88:	movw	r1, #19420	; 0x4bdc
   11c8c:	movw	r2, #19700	; 0x4cf4
   11c90:	movt	r1, #1
   11c94:	movt	r2, #1
   11c98:	mov	r0, #1
   11c9c:	bl	11490 <__printf_chk@plt>
   11ca0:	ldr	r3, [sp, #332]	; 0x14c
   11ca4:	b	11b88 <__assert_fail@plt+0x614>
   11ca8:	movw	r1, #19420	; 0x4bdc
   11cac:	movw	r2, #19684	; 0x4ce4
   11cb0:	movt	r1, #1
   11cb4:	movt	r2, #1
   11cb8:	mov	r0, #1
   11cbc:	bl	11490 <__printf_chk@plt>
   11cc0:	ldr	r3, [sp, #332]	; 0x14c
   11cc4:	b	11b80 <__assert_fail@plt+0x60c>
   11cc8:	movw	r1, #19420	; 0x4bdc
   11ccc:	movw	r2, #19664	; 0x4cd0
   11cd0:	movt	r1, #1
   11cd4:	movt	r2, #1
   11cd8:	mov	r0, #1
   11cdc:	bl	11490 <__printf_chk@plt>
   11ce0:	ldr	r3, [sp, #332]	; 0x14c
   11ce4:	b	11b78 <__assert_fail@plt+0x604>
   11ce8:	movw	r1, #19420	; 0x4bdc
   11cec:	movw	r2, #19644	; 0x4cbc
   11cf0:	movt	r1, #1
   11cf4:	movt	r2, #1
   11cf8:	mov	r0, #1
   11cfc:	bl	11490 <__printf_chk@plt>
   11d00:	ldr	r3, [sp, #332]	; 0x14c
   11d04:	b	11b70 <__assert_fail@plt+0x5fc>
   11d08:	movw	r1, #19420	; 0x4bdc
   11d0c:	movw	r2, #19616	; 0x4ca0
   11d10:	movt	r1, #1
   11d14:	movt	r2, #1
   11d18:	mov	r0, #1
   11d1c:	bl	11490 <__printf_chk@plt>
   11d20:	ldr	r3, [sp, #332]	; 0x14c
   11d24:	b	11b68 <__assert_fail@plt+0x5f4>
   11d28:	movw	r1, #19420	; 0x4bdc
   11d2c:	movw	r2, #19596	; 0x4c8c
   11d30:	movt	r1, #1
   11d34:	movt	r2, #1
   11d38:	mov	r0, #1
   11d3c:	bl	11490 <__printf_chk@plt>
   11d40:	ldr	r3, [sp, #332]	; 0x14c
   11d44:	b	11b60 <__assert_fail@plt+0x5ec>
   11d48:	movw	r1, #19420	; 0x4bdc
   11d4c:	movw	r2, #19572	; 0x4c74
   11d50:	movt	r1, #1
   11d54:	movt	r2, #1
   11d58:	mov	r0, #1
   11d5c:	bl	11490 <__printf_chk@plt>
   11d60:	ldr	r3, [sp, #332]	; 0x14c
   11d64:	b	11b58 <__assert_fail@plt+0x5e4>
   11d68:	movw	r1, #19420	; 0x4bdc
   11d6c:	movw	r2, #19540	; 0x4c54
   11d70:	movt	r1, #1
   11d74:	movt	r2, #1
   11d78:	mov	r0, #1
   11d7c:	bl	11490 <__printf_chk@plt>
   11d80:	ldr	r3, [sp, #332]	; 0x14c
   11d84:	b	11b50 <__assert_fail@plt+0x5dc>
   11d88:	movw	r1, #19420	; 0x4bdc
   11d8c:	movw	r2, #19524	; 0x4c44
   11d90:	movt	r1, #1
   11d94:	movt	r2, #1
   11d98:	mov	r0, #1
   11d9c:	bl	11490 <__printf_chk@plt>
   11da0:	ldr	r3, [sp, #332]	; 0x14c
   11da4:	b	11b48 <__assert_fail@plt+0x5d4>
   11da8:	movw	r1, #19420	; 0x4bdc
   11dac:	movw	r2, #19500	; 0x4c2c
   11db0:	movt	r1, #1
   11db4:	movt	r2, #1
   11db8:	mov	r0, #1
   11dbc:	bl	11490 <__printf_chk@plt>
   11dc0:	ldr	r3, [sp, #332]	; 0x14c
   11dc4:	b	11b40 <__assert_fail@plt+0x5cc>
   11dc8:	movw	r1, #19420	; 0x4bdc
   11dcc:	movw	r2, #19476	; 0x4c14
   11dd0:	movt	r1, #1
   11dd4:	movt	r2, #1
   11dd8:	mov	r0, #1
   11ddc:	bl	11490 <__printf_chk@plt>
   11de0:	ldr	r3, [sp, #332]	; 0x14c
   11de4:	b	11b38 <__assert_fail@plt+0x5c4>
   11de8:	movw	r1, #19420	; 0x4bdc
   11dec:	movw	r2, #19460	; 0x4c04
   11df0:	movt	r1, #1
   11df4:	movt	r2, #1
   11df8:	mov	r0, #1
   11dfc:	bl	11490 <__printf_chk@plt>
   11e00:	ldr	r3, [sp, #332]	; 0x14c
   11e04:	b	11b30 <__assert_fail@plt+0x5bc>
   11e08:	movw	r1, #19420	; 0x4bdc
   11e0c:	movw	r2, #19444	; 0x4bf4
   11e10:	movt	r1, #1
   11e14:	movt	r2, #1
   11e18:	mov	r0, #1
   11e1c:	bl	11490 <__printf_chk@plt>
   11e20:	ldr	r3, [sp, #332]	; 0x14c
   11e24:	b	11b28 <__assert_fail@plt+0x5b4>
   11e28:	movw	r1, #19420	; 0x4bdc
   11e2c:	movw	r2, #19440	; 0x4bf0
   11e30:	movt	r1, #1
   11e34:	movt	r2, #1
   11e38:	mov	r0, #1
   11e3c:	bl	11490 <__printf_chk@plt>
   11e40:	ldr	r3, [sp, #332]	; 0x14c
   11e44:	b	11b20 <__assert_fail@plt+0x5ac>
   11e48:	movw	r1, #19368	; 0x4ba8
   11e4c:	ldrb	r2, [sp, #378]	; 0x17a
   11e50:	movt	r1, #1
   11e54:	ldrb	r3, [sp, #379]	; 0x17b
   11e58:	mov	r0, #1
   11e5c:	bl	11490 <__printf_chk@plt>
   11e60:	b	11b08 <__assert_fail@plt+0x594>
   11e64:	movw	r1, #19332	; 0x4b84
   11e68:	ldrb	r2, [sp, #376]	; 0x178
   11e6c:	movt	r1, #1
   11e70:	ldrb	r3, [sp, #377]	; 0x179
   11e74:	mov	r0, #1
   11e78:	bl	11490 <__printf_chk@plt>
   11e7c:	b	11aec <__assert_fail@plt+0x578>
   11e80:	mov	r0, #49	; 0x31
   11e84:	bl	113a0 <malloc@plt>
   11e88:	subs	r8, r0, #0
   11e8c:	beq	11ab4 <__assert_fail@plt+0x540>
   11e90:	movw	r2, #18860	; 0x49ac
   11e94:	mov	r1, r9
   11e98:	mov	ip, r9
   11e9c:	mov	sl, #58	; 0x3a
   11ea0:	movt	r2, #1
   11ea4:	b	11eb0 <__assert_fail@plt+0x93c>
   11ea8:	add	ip, ip, #3
   11eac:	strb	sl, [r8, r0]
   11eb0:	ldrb	lr, [fp, #1]!
   11eb4:	add	r1, r1, #1
   11eb8:	cmp	r1, #16
   11ebc:	mov	r3, r8
   11ec0:	and	r9, lr, #15
   11ec4:	add	r0, ip, #2
   11ec8:	add	r9, r2, r9
   11ecc:	add	lr, r2, lr, lsr #4
   11ed0:	ldrb	r9, [r9, #24]
   11ed4:	ldrb	lr, [lr, #24]
   11ed8:	strb	lr, [r3, ip]!
   11edc:	strb	r9, [r3, #1]
   11ee0:	bne	11ea8 <__assert_fail@plt+0x934>
   11ee4:	mov	r3, #0
   11ee8:	strb	r3, [r8, r0]
   11eec:	b	11ab4 <__assert_fail@plt+0x540>
   11ef0:	bl	11520 <p11_kit_strerror@plt>
   11ef4:	mov	r1, r0
   11ef8:	movw	r0, #19116	; 0x4aac
   11efc:	movt	r0, #1
   11f00:	bl	13938 <secure_getenv@@Base+0x59c>
   11f04:	b	11bb8 <__assert_fail@plt+0x644>
   11f08:	bl	11310 <__stack_chk_fail@plt>
   11f0c:	mov	r0, #1
   11f10:	b	117e8 <__assert_fail@plt+0x274>
   11f14:	push	{r4, r5, r6, lr}
   11f18:	mov	r5, r0
   11f1c:	mov	r6, r1
   11f20:	add	r0, r0, #2
   11f24:	mov	r1, #4
   11f28:	bl	11280 <calloc@plt>
   11f2c:	subs	r4, r0, #0
   11f30:	beq	11f90 <__assert_fail@plt+0xa1c>
   11f34:	lsl	r5, r5, #2
   11f38:	mov	r0, r4
   11f3c:	mov	r1, r6
   11f40:	movw	r3, #19936	; 0x4de0
   11f44:	mov	r2, r5
   11f48:	add	r5, r4, r5
   11f4c:	movt	r3, #1
   11f50:	str	r3, [r0], #4
   11f54:	bl	112e0 <memcpy@plt>
   11f58:	mov	r3, #0
   11f5c:	mov	r1, r4
   11f60:	str	r3, [r5, #4]
   11f64:	ldr	r0, [r4]
   11f68:	bl	11448 <execv@plt>
   11f6c:	bl	11454 <__errno_location@plt>
   11f70:	movw	r1, #19952	; 0x4df0
   11f74:	movt	r1, #1
   11f78:	ldr	r0, [r0]
   11f7c:	bl	13a38 <secure_getenv@@Base+0x69c>
   11f80:	mov	r0, r4
   11f84:	bl	112c8 <free@plt>
   11f88:	mov	r0, #2
   11f8c:	pop	{r4, r5, r6, pc}
   11f90:	movw	r0, #19888	; 0x4db0
   11f94:	movw	r1, #19920	; 0x4dd0
   11f98:	movt	r0, #1
   11f9c:	movt	r1, #1
   11fa0:	movw	r2, #19804	; 0x4d5c
   11fa4:	movt	r2, #1
   11fa8:	bl	1383c <secure_getenv@@Base+0x4a0>
   11fac:	mov	r0, #1
   11fb0:	pop	{r4, r5, r6, pc}
   11fb4:	push	{r4, r5, r6, r7, lr}
   11fb8:	movw	r4, #24896	; 0x6140
   11fbc:	movt	r4, #2
   11fc0:	ldr	r6, [r1]
   11fc4:	sub	sp, sp, #12
   11fc8:	mov	r5, r1
   11fcc:	ldr	r3, [r4]
   11fd0:	mov	r7, r0
   11fd4:	movw	r1, #20000	; 0x4e20
   11fd8:	mov	r0, r6
   11fdc:	movt	r1, #1
   11fe0:	str	r3, [sp, #4]
   11fe4:	bl	112a4 <strcmp@plt>
   11fe8:	cmp	r0, #0
   11fec:	beq	120d0 <__assert_fail@plt+0xb5c>
   11ff0:	movw	r1, #20008	; 0x4e28
   11ff4:	mov	r0, r6
   11ff8:	movt	r1, #1
   11ffc:	bl	112a4 <strcmp@plt>
   12000:	cmp	r0, #0
   12004:	beq	120b4 <__assert_fail@plt+0xb40>
   12008:	mov	r2, r6
   1200c:	movw	r1, #20040	; 0x4e48
   12010:	movw	r3, #20444	; 0x4fdc
   12014:	movt	r1, #1
   12018:	movt	r3, #1
   1201c:	mov	r0, sp
   12020:	bl	1149c <asprintf@plt>
   12024:	cmp	r0, #0
   12028:	blt	120e0 <__assert_fail@plt+0xb6c>
   1202c:	movw	r0, #20096	; 0x4e80
   12030:	movt	r0, #1
   12034:	bl	1339c <secure_getenv@@Base>
   12038:	cmp	r0, #0
   1203c:	beq	120f8 <__assert_fail@plt+0xb84>
   12040:	ldrb	r1, [r0]
   12044:	movw	r2, #19976	; 0x4e08
   12048:	movt	r2, #1
   1204c:	cmp	r1, #0
   12050:	moveq	r0, r2
   12054:	ldr	r1, [sp]
   12058:	mov	r2, #0
   1205c:	bl	13d1c <secure_getenv@@Base+0x980>
   12060:	subs	r6, r0, #0
   12064:	beq	12104 <__assert_fail@plt+0xb90>
   12068:	mov	r3, #0
   1206c:	mov	r1, r5
   12070:	str	r3, [r5, r7, lsl #2]
   12074:	bl	11448 <execv@plt>
   12078:	ldr	r1, [r5]
   1207c:	movw	r0, #20132	; 0x4ea4
   12080:	movt	r0, #1
   12084:	bl	13938 <secure_getenv@@Base+0x59c>
   12088:	ldr	r0, [sp]
   1208c:	bl	112c8 <free@plt>
   12090:	mov	r0, r6
   12094:	bl	112c8 <free@plt>
   12098:	mov	r0, #2
   1209c:	ldr	r2, [sp, #4]
   120a0:	ldr	r3, [r4]
   120a4:	cmp	r2, r3
   120a8:	bne	12124 <__assert_fail@plt+0xbb0>
   120ac:	add	sp, sp, #12
   120b0:	pop	{r4, r5, r6, r7, pc}
   120b4:	mov	r0, r7
   120b8:	movw	r3, #20024	; 0x4e38
   120bc:	mov	r1, r5
   120c0:	movt	r3, #1
   120c4:	str	r3, [r5]
   120c8:	bl	11f14 <__assert_fail@plt+0x9a0>
   120cc:	b	1209c <__assert_fail@plt+0xb28>
   120d0:	mov	r0, r7
   120d4:	mov	r1, r5
   120d8:	bl	11f14 <__assert_fail@plt+0x9a0>
   120dc:	b	1209c <__assert_fail@plt+0xb28>
   120e0:	movw	r0, #20056	; 0x4e58
   120e4:	ldr	r1, [pc, #60]	; 12128 <__assert_fail@plt+0xbb4>
   120e8:	movt	r0, #1
   120ec:	bl	1383c <secure_getenv@@Base+0x4a0>
   120f0:	mov	r0, #1
   120f4:	b	1209c <__assert_fail@plt+0xb28>
   120f8:	movw	r0, #19976	; 0x4e08
   120fc:	movt	r0, #1
   12100:	b	12054 <__assert_fail@plt+0xae0>
   12104:	movw	r0, #19888	; 0x4db0
   12108:	movw	r1, #20116	; 0x4e94
   1210c:	movt	r0, #1
   12110:	movt	r1, #1
   12114:	ldr	r2, [pc, #12]	; 12128 <__assert_fail@plt+0xbb4>
   12118:	bl	1383c <secure_getenv@@Base+0x4a0>
   1211c:	mov	r0, #1
   12120:	b	1209c <__assert_fail@plt+0xb28>
   12124:	bl	11310 <__stack_chk_fail@plt>
   12128:	andeq	r4, r1, ip, ror #26
   1212c:	push	{r3, r4, r5, r6, r7, lr}
   12130:	mov	r7, r0
   12134:	bl	12eec <__assert_fail@plt+0x1978>
   12138:	ldr	r1, [pc, #152]	; 121d8 <__assert_fail@plt+0xc64>
   1213c:	add	r4, r7, #12
   12140:	ldr	r6, [pc, #148]	; 121dc <__assert_fail@plt+0xc68>
   12144:	add	r1, pc, r1
   12148:	add	r6, pc, r6
   1214c:	mov	r5, r0
   12150:	mov	r0, #1
   12154:	mov	r2, r5
   12158:	bl	11490 <__printf_chk@plt>
   1215c:	ldr	r1, [pc, #124]	; 121e0 <__assert_fail@plt+0xc6c>
   12160:	mov	r2, r5
   12164:	mov	r0, #1
   12168:	add	r1, pc, r1
   1216c:	bl	11490 <__printf_chk@plt>
   12170:	ldr	r2, [r7]
   12174:	mov	ip, r7
   12178:	cmp	r2, #0
   1217c:	bne	12194 <__assert_fail@plt+0xc20>
   12180:	b	121c0 <__assert_fail@plt+0xc4c>
   12184:	mov	ip, r4
   12188:	ldr	r2, [r4], #12
   1218c:	cmp	r2, #0
   12190:	beq	121c0 <__assert_fail@plt+0xc4c>
   12194:	ldrb	r3, [r2]
   12198:	cmp	r3, #0
   1219c:	beq	12184 <__assert_fail@plt+0xc10>
   121a0:	ldr	r3, [ip, #8]
   121a4:	mov	r0, #1
   121a8:	mov	r1, r6
   121ac:	bl	11490 <__printf_chk@plt>
   121b0:	mov	ip, r4
   121b4:	ldr	r2, [r4], #12
   121b8:	cmp	r2, #0
   121bc:	bne	12194 <__assert_fail@plt+0xc20>
   121c0:	ldr	r1, [pc, #28]	; 121e4 <__assert_fail@plt+0xc70>
   121c4:	mov	r2, r5
   121c8:	mov	r0, #1
   121cc:	add	r1, pc, r1
   121d0:	pop	{r3, r4, r5, r6, r7, lr}
   121d4:	b	11490 <__printf_chk@plt>
   121d8:	andeq	r2, r0, r4, lsl #28
   121dc:	andeq	r2, r0, r0, ror lr
   121e0:	andeq	r2, r0, r0, lsl #28
   121e4:			; <UNDEFINED> instruction: 0x00002db8
   121e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   121ec:	sub	sp, sp, #28
   121f0:	ldr	r4, [r0, #4]
   121f4:	mov	sl, r1
   121f8:	ldr	ip, [pc, #596]	; 12454 <__assert_fail@plt+0xee0>
   121fc:	cmp	r4, #0
   12200:	add	ip, pc, ip
   12204:	str	ip, [sp]
   12208:	beq	123dc <__assert_fail@plt+0xe68>
   1220c:	ldr	ip, [pc, #580]	; 12458 <__assert_fail@plt+0xee4>
   12210:	add	r7, r0, #12
   12214:	ldr	r6, [pc, #576]	; 1245c <__assert_fail@plt+0xee8>
   12218:	mov	r9, r0
   1221c:	add	ip, pc, ip
   12220:	str	ip, [sp, #4]
   12224:	ldr	ip, [pc, #564]	; 12460 <__assert_fail@plt+0xeec>
   12228:	add	r6, pc, r6
   1222c:	add	ip, pc, ip
   12230:	str	ip, [sp, #8]
   12234:	ldr	ip, [pc, #552]	; 12464 <__assert_fail@plt+0xef0>
   12238:	add	ip, pc, ip
   1223c:	str	ip, [sp, #12]
   12240:	ldr	ip, [pc, #544]	; 12468 <__assert_fail@plt+0xef4>
   12244:	add	ip, pc, ip
   12248:	str	ip, [sp, #16]
   1224c:	ldr	ip, [pc, #536]	; 1246c <__assert_fail@plt+0xef8>
   12250:	add	ip, pc, ip
   12254:	str	ip, [sp, #20]
   12258:	ldr	fp, [r9]
   1225c:	cmp	fp, #0
   12260:	beq	123b8 <__assert_fail@plt+0xe44>
   12264:	ldr	r5, [sl]
   12268:	cmp	r5, #0
   1226c:	beq	12440 <__assert_fail@plt+0xecc>
   12270:	ldr	r3, [sl, #12]
   12274:	cmp	fp, r3
   12278:	beq	12448 <__assert_fail@plt+0xed4>
   1227c:	add	r3, sl, #16
   12280:	b	12290 <__assert_fail@plt+0xd1c>
   12284:	ldr	r2, [r3, #-4]
   12288:	cmp	fp, r2
   1228c:	beq	122a8 <__assert_fail@plt+0xd34>
   12290:	mov	r5, r3
   12294:	add	r3, r3, #16
   12298:	ldr	r8, [r5]
   1229c:	cmp	r8, #0
   122a0:	bne	12284 <__assert_fail@plt+0xd10>
   122a4:	mov	r5, r8
   122a8:	bl	1140c <__ctype_b_loc@plt>
   122ac:	lsl	r3, fp, #1
   122b0:	ldr	r1, [r0]
   122b4:	ldrh	r3, [r1, r3]
   122b8:	ands	r3, r3, #3072	; 0xc00
   122bc:	beq	123f0 <__assert_fail@plt+0xe7c>
   122c0:	ands	r2, fp, #255	; 0xff
   122c4:	moveq	r3, #0
   122c8:	movne	r3, #1
   122cc:	cmp	r8, #0
   122d0:	moveq	r3, #0
   122d4:	andne	r3, r3, #1
   122d8:	cmp	r3, #0
   122dc:	bne	12414 <__assert_fail@plt+0xea0>
   122e0:	cmp	r8, #0
   122e4:	mov	r0, #1
   122e8:	beq	12400 <__assert_fail@plt+0xe8c>
   122ec:	ldr	r1, [pc, #380]	; 12470 <__assert_fail@plt+0xefc>
   122f0:	mov	r2, r8
   122f4:	add	r1, pc, r1
   122f8:	bl	11490 <__printf_chk@plt>
   122fc:	mov	fp, r0
   12300:	cmp	r5, #0
   12304:	beq	12344 <__assert_fail@plt+0xdd0>
   12308:	ldr	r3, [r5, #4]
   1230c:	cmp	r3, #0
   12310:	beq	12344 <__assert_fail@plt+0xdd0>
   12314:	ldr	ip, [sp, #20]
   12318:	cmp	r8, #0
   1231c:	ldr	r2, [sp, #16]
   12320:	mov	r0, #1
   12324:	ldr	r3, [r9, #8]
   12328:	ldr	r1, [sp, #8]
   1232c:	movne	r2, ip
   12330:	ldr	ip, [sp, #12]
   12334:	cmp	r3, #0
   12338:	moveq	r3, ip
   1233c:	bl	11490 <__printf_chk@plt>
   12340:	add	fp, fp, r0
   12344:	cmp	fp, #21
   12348:	rsble	r8, fp, #22
   1234c:	bgt	12430 <__assert_fail@plt+0xebc>
   12350:	ldr	r3, [pc, #284]	; 12474 <__assert_fail@plt+0xf00>
   12354:	ldr	ip, [sp]
   12358:	ldr	r5, [ip, r3]
   1235c:	sub	r8, r8, #1
   12360:	sub	r8, r8, #1
   12364:	mov	r0, #32
   12368:	ldr	r1, [r5]
   1236c:	bl	114f0 <fputc@plt>
   12370:	cmn	r8, #1
   12374:	bne	12360 <__assert_fail@plt+0xdec>
   12378:	mov	r0, r4
   1237c:	mov	r1, #10
   12380:	bl	1143c <strchr@plt>
   12384:	cmp	r0, #0
   12388:	beq	123e4 <__assert_fail@plt+0xe70>
   1238c:	add	r8, r0, #1
   12390:	mov	r3, r4
   12394:	rsb	r2, r4, r8
   12398:	mov	r0, #1
   1239c:	mov	r1, r6
   123a0:	bl	11490 <__printf_chk@plt>
   123a4:	cmp	r8, #0
   123a8:	beq	123c8 <__assert_fail@plt+0xe54>
   123ac:	mov	r4, r8
   123b0:	mov	r8, #22
   123b4:	b	1235c <__assert_fail@plt+0xde8>
   123b8:	mov	r2, r4
   123bc:	mov	r0, #1
   123c0:	ldr	r1, [sp, #4]
   123c4:	bl	11490 <__printf_chk@plt>
   123c8:	mov	r9, r7
   123cc:	add	r7, r7, #12
   123d0:	ldr	r4, [r7, #-8]
   123d4:	cmp	r4, #0
   123d8:	bne	12258 <__assert_fail@plt+0xce4>
   123dc:	add	sp, sp, #28
   123e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123e4:	mov	r0, r4
   123e8:	bl	11394 <puts@plt>
   123ec:	b	123c8 <__assert_fail@plt+0xe54>
   123f0:	cmp	r8, #0
   123f4:	mov	r2, r3
   123f8:	mov	r0, #1
   123fc:	bne	122ec <__assert_fail@plt+0xd78>
   12400:	ldr	r1, [pc, #112]	; 12478 <__assert_fail@plt+0xf04>
   12404:	add	r1, pc, r1
   12408:	bl	11490 <__printf_chk@plt>
   1240c:	mov	fp, r0
   12410:	b	12300 <__assert_fail@plt+0xd8c>
   12414:	ldr	r1, [pc, #96]	; 1247c <__assert_fail@plt+0xf08>
   12418:	mov	r0, #1
   1241c:	mov	r3, r8
   12420:	add	r1, pc, r1
   12424:	bl	11490 <__printf_chk@plt>
   12428:	mov	fp, r0
   1242c:	b	12300 <__assert_fail@plt+0xd8c>
   12430:	mov	r0, #10
   12434:	mov	r8, #22
   12438:	bl	11478 <putchar@plt>
   1243c:	b	12350 <__assert_fail@plt+0xddc>
   12440:	mov	r8, r5
   12444:	b	122a8 <__assert_fail@plt+0xd34>
   12448:	mov	r8, r5
   1244c:	mov	r5, sl
   12450:	b	122a8 <__assert_fail@plt+0xd34>
   12454:	strdeq	r3, [r1], -r8
   12458:			; <UNDEFINED> instruction: 0x00002db4
   1245c:	ldrdeq	r2, [r0], -r4
   12460:	andeq	r2, r0, r8, asr #27
   12464:	muleq	r0, r4, sp
   12468:	muleq	r0, r0, r0
   1246c:	andeq	r2, r0, r8, ror sp
   12470:	strdeq	r2, [r0], -r0
   12474:	andeq	r0, r0, r4, lsr #2
   12478:	andeq	r2, r0, r8, ror #23
   1247c:			; <UNDEFINED> instruction: 0x00002bb8
   12480:	ldr	r3, [pc, #380]	; 12604 <__assert_fail@plt+0x1090>
   12484:	ldr	ip, [pc, #380]	; 12608 <__assert_fail@plt+0x1094>
   12488:	add	r3, pc, r3
   1248c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12490:	sub	sp, sp, #52	; 0x34
   12494:	ldr	ip, [r3, ip]
   12498:	add	r5, sp, #20
   1249c:	mov	r9, r0
   124a0:	mov	sl, r1
   124a4:	mov	r0, r5
   124a8:	mov	r1, #64	; 0x40
   124ac:	ldr	r3, [ip]
   124b0:	mov	r7, r2
   124b4:	str	ip, [sp, #8]
   124b8:	str	r3, [sp, #44]	; 0x2c
   124bc:	bl	12bb0 <__assert_fail@plt+0x163c>
   124c0:	cmp	r0, #0
   124c4:	beq	125c0 <__assert_fail@plt+0x104c>
   124c8:	ldr	r3, [r7]
   124cc:	cmp	r3, #0
   124d0:	beq	12544 <__assert_fail@plt+0xfd0>
   124d4:	ldr	r3, [pc, #304]	; 1260c <__assert_fail@plt+0x1098>
   124d8:	add	r4, r7, #16
   124dc:	add	r6, sp, #19
   124e0:	mov	r8, r7
   124e4:	add	r3, pc, r3
   124e8:	str	r3, [sp, #12]
   124ec:	bl	1140c <__ctype_b_loc@plt>
   124f0:	mov	fp, r0
   124f4:	b	12518 <__assert_fail@plt+0xfa4>
   124f8:	uxtb	r1, r1
   124fc:	strb	r1, [sp, #19]
   12500:	cmp	r1, #0
   12504:	bne	1258c <__assert_fail@plt+0x1018>
   12508:	mov	r8, r4
   1250c:	ldr	r2, [r4], #16
   12510:	cmp	r2, #0
   12514:	beq	12544 <__assert_fail@plt+0xfd0>
   12518:	ldr	r1, [r8, #12]
   1251c:	ldr	r0, [fp]
   12520:	lsl	r2, r1, #1
   12524:	ldrh	r2, [r0, r2]
   12528:	ands	r2, r2, #3072	; 0xc00
   1252c:	bne	124f8 <__assert_fail@plt+0xf84>
   12530:	strb	r2, [sp, #19]
   12534:	mov	r8, r4
   12538:	ldr	r2, [r4], #16
   1253c:	cmp	r2, #0
   12540:	bne	12518 <__assert_fail@plt+0xfa4>
   12544:	mov	ip, #0
   12548:	ldr	r2, [sp, #20]
   1254c:	mov	r1, sl
   12550:	mov	r3, r7
   12554:	str	ip, [sp]
   12558:	mov	r0, r9
   1255c:	bl	11400 <getopt_long@plt>
   12560:	mov	r4, r0
   12564:	mov	r0, r5
   12568:	bl	12c10 <__assert_fail@plt+0x169c>
   1256c:	mov	r0, r4
   12570:	ldr	r1, [sp, #8]
   12574:	ldr	r2, [sp, #44]	; 0x2c
   12578:	ldr	r3, [r1]
   1257c:	cmp	r2, r3
   12580:	bne	12600 <__assert_fail@plt+0x108c>
   12584:	add	sp, sp, #52	; 0x34
   12588:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1258c:	mov	r2, #1
   12590:	mov	r0, r5
   12594:	mov	r1, r6
   12598:	bl	12e74 <__assert_fail@plt+0x1900>
   1259c:	ldr	r2, [r8, #4]
   125a0:	cmp	r2, #2
   125a4:	beq	125dc <__assert_fail@plt+0x1068>
   125a8:	cmp	r2, #1
   125ac:	bne	12508 <__assert_fail@plt+0xf94>
   125b0:	mov	r0, r5
   125b4:	ldr	r1, [sp, #12]
   125b8:	bl	12e74 <__assert_fail@plt+0x1900>
   125bc:	b	12508 <__assert_fail@plt+0xf94>
   125c0:	ldr	r0, [pc, #72]	; 12610 <__assert_fail@plt+0x109c>
   125c4:	ldr	r1, [pc, #72]	; 12614 <__assert_fail@plt+0x10a0>
   125c8:	add	r0, pc, r0
   125cc:	add	r1, pc, r1
   125d0:	bl	1383c <secure_getenv@@Base+0x4a0>
   125d4:	mvn	r0, #0
   125d8:	b	12570 <__assert_fail@plt+0xffc>
   125dc:	ldr	r3, [pc, #52]	; 12618 <__assert_fail@plt+0x10a4>
   125e0:	mov	r2, #153	; 0x99
   125e4:	ldr	r0, [pc, #48]	; 1261c <__assert_fail@plt+0x10a8>
   125e8:	ldr	r1, [pc, #48]	; 12620 <__assert_fail@plt+0x10ac>
   125ec:	add	r3, pc, r3
   125f0:	add	r0, pc, r0
   125f4:	add	r3, r3, #16
   125f8:	add	r1, pc, r1
   125fc:	bl	11574 <__assert_fail@plt>
   12600:	bl	11310 <__stack_chk_fail@plt>
   12604:	andeq	r3, r1, r0, ror fp
   12608:	andeq	r0, r0, r4, lsl r1
   1260c:	andeq	r2, r0, ip, asr #22
   12610:	andeq	r2, r0, r8, lsl #17
   12614:	andeq	r2, r0, ip, asr r9
   12618:	andeq	r2, r0, ip, lsr r9
   1261c:	andeq	r2, r0, r4, lsl sl
   12620:	andeq	r2, r0, r8, lsr #20
   12624:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12628:	cmp	r0, #1
   1262c:	sub	sp, sp, #52	; 0x34
   12630:	mov	r7, r0
   12634:	mov	r8, r1
   12638:	str	r2, [sp, #28]
   1263c:	ble	129e0 <__assert_fail@plt+0x146c>
   12640:	ldr	r3, [pc, #948]	; 129fc <__assert_fail@plt+0x1488>
   12644:	mov	r4, #1
   12648:	ldr	r2, [pc, #944]	; 12a00 <__assert_fail@plt+0x148c>
   1264c:	add	fp, r1, #4
   12650:	add	r3, pc, r3
   12654:	str	r3, [sp, #32]
   12658:	ldr	r3, [pc, #932]	; 12a04 <__assert_fail@plt+0x1490>
   1265c:	add	r2, pc, r2
   12660:	str	r2, [sp, #24]
   12664:	mov	r2, #0
   12668:	add	r3, pc, r3
   1266c:	str	r3, [sp, #36]	; 0x24
   12670:	ldr	r3, [pc, #912]	; 12a08 <__assert_fail@plt+0x1494>
   12674:	mov	r5, r4
   12678:	mov	r6, r2
   1267c:	add	r3, pc, r3
   12680:	str	r3, [sp, #44]	; 0x2c
   12684:	ldr	r3, [pc, #896]	; 12a0c <__assert_fail@plt+0x1498>
   12688:	add	r3, pc, r3
   1268c:	str	r3, [sp, #40]	; 0x28
   12690:	ldr	r3, [pc, #888]	; 12a10 <__assert_fail@plt+0x149c>
   12694:	add	r3, pc, r3
   12698:	str	r3, [sp, #20]
   1269c:	b	126c0 <__assert_fail@plt+0x114c>
   126a0:	cmp	r6, #0
   126a4:	beq	127ec <__assert_fail@plt+0x1278>
   126a8:	mov	r0, r9
   126ac:	add	r5, r5, #1
   126b0:	str	r0, [r8, r4, lsl #2]
   126b4:	cmp	r5, r7
   126b8:	add	r4, r4, #1
   126bc:	beq	12804 <__assert_fail@plt+0x1290>
   126c0:	ldr	r9, [fp], #4
   126c4:	ldrb	r3, [r9]
   126c8:	cmp	r3, #45	; 0x2d
   126cc:	bne	126a0 <__assert_fail@plt+0x112c>
   126d0:	ldrb	r1, [r9, #1]
   126d4:	cmp	r1, #45	; 0x2d
   126d8:	beq	128a4 <__assert_fail@plt+0x1330>
   126dc:	cmp	r1, #0
   126e0:	beq	126a8 <__assert_fail@plt+0x1134>
   126e4:	ldr	r3, [pc, #808]	; 12a14 <__assert_fail@plt+0x14a0>
   126e8:	mov	r9, #1
   126ec:	ldr	sl, [pc, #804]	; 12a18 <__assert_fail@plt+0x14a4>
   126f0:	add	r3, pc, r3
   126f4:	str	r5, [sp, #8]
   126f8:	mov	r5, r9
   126fc:	ldr	r9, [sp, #20]
   12700:	add	sl, pc, sl
   12704:	str	r4, [sp, #12]
   12708:	str	r7, [sp, #16]
   1270c:	mov	r4, r3
   12710:	mov	r7, fp
   12714:	mov	fp, r8
   12718:	mov	r8, r2
   1271c:	sub	r3, r1, #104	; 0x68
   12720:	cmp	r3, #14
   12724:	addls	pc, pc, r3, lsl #2
   12728:	b	127cc <__assert_fail@plt+0x1258>
   1272c:	b	1279c <__assert_fail@plt+0x1228>
   12730:	b	127cc <__assert_fail@plt+0x1258>
   12734:	b	127cc <__assert_fail@plt+0x1258>
   12738:	b	127cc <__assert_fail@plt+0x1258>
   1273c:	b	12768 <__assert_fail@plt+0x11f4>
   12740:	b	127cc <__assert_fail@plt+0x1258>
   12744:	b	127cc <__assert_fail@plt+0x1258>
   12748:	b	127cc <__assert_fail@plt+0x1258>
   1274c:	b	127cc <__assert_fail@plt+0x1258>
   12750:	b	127b8 <__assert_fail@plt+0x1244>
   12754:	b	127cc <__assert_fail@plt+0x1258>
   12758:	b	127cc <__assert_fail@plt+0x1258>
   1275c:	b	127cc <__assert_fail@plt+0x1258>
   12760:	b	127cc <__assert_fail@plt+0x1258>
   12764:	b	127a4 <__assert_fail@plt+0x1230>
   12768:	mov	r6, r9
   1276c:	ldr	r0, [r7, #-4]
   12770:	add	r5, r5, #1
   12774:	ldrb	r1, [r0, r5]
   12778:	cmp	r1, #0
   1277c:	bne	1271c <__assert_fail@plt+0x11a8>
   12780:	mov	r2, r8
   12784:	ldr	r5, [sp, #8]
   12788:	mov	r8, fp
   1278c:	ldr	r4, [sp, #12]
   12790:	mov	fp, r7
   12794:	ldr	r7, [sp, #16]
   12798:	b	126ac <__assert_fail@plt+0x1138>
   1279c:	mov	r8, #1
   127a0:	b	1276c <__assert_fail@plt+0x11f8>
   127a4:	mov	r0, r4
   127a8:	bl	114cc <putenv@plt>
   127ac:	bl	13b3c <secure_getenv@@Base+0x7a0>
   127b0:	bl	13510 <secure_getenv@@Base+0x174>
   127b4:	b	1276c <__assert_fail@plt+0x11f8>
   127b8:	mov	r0, sl
   127bc:	bl	114cc <putenv@plt>
   127c0:	bl	13b24 <secure_getenv@@Base+0x788>
   127c4:	bl	13510 <secure_getenv@@Base+0x174>
   127c8:	b	1276c <__assert_fail@plt+0x11f8>
   127cc:	cmp	r6, #0
   127d0:	bne	1276c <__assert_fail@plt+0x11f8>
   127d4:	ldr	r0, [pc, #576]	; 12a1c <__assert_fail@plt+0x14a8>
   127d8:	add	r0, pc, r0
   127dc:	bl	13938 <secure_getenv@@Base+0x59c>
   127e0:	mov	r0, #2
   127e4:	add	sp, sp, #52	; 0x34
   127e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127ec:	add	r5, r5, #1
   127f0:	sub	r4, r4, #1
   127f4:	cmp	r5, r7
   127f8:	mov	r6, r9
   127fc:	add	r4, r4, #1
   12800:	bne	126c0 <__assert_fail@plt+0x114c>
   12804:	str	r2, [sp, #4]
   12808:	bl	13510 <secure_getenv@@Base+0x174>
   1280c:	cmp	r6, #0
   12810:	ldr	r2, [sp, #4]
   12814:	beq	129a4 <__assert_fail@plt+0x1430>
   12818:	ldr	r2, [sp, #28]
   1281c:	ldr	r3, [r2]
   12820:	cmp	r3, #0
   12824:	beq	12964 <__assert_fail@plt+0x13f0>
   12828:	ldr	r2, [sp, #28]
   1282c:	mov	r7, #0
   12830:	add	r5, r2, #12
   12834:	mov	r9, r2
   12838:	b	12858 <__assert_fail@plt+0x12e4>
   1283c:	bl	112a4 <strcmp@plt>
   12840:	cmp	r0, #0
   12844:	beq	12984 <__assert_fail@plt+0x1410>
   12848:	mov	r9, r5
   1284c:	ldr	r3, [r5], #12
   12850:	cmp	r3, #0
   12854:	beq	12880 <__assert_fail@plt+0x130c>
   12858:	mov	r0, r3
   1285c:	ldrb	r3, [r3]
   12860:	mov	r1, r6
   12864:	cmp	r3, #0
   12868:	bne	1283c <__assert_fail@plt+0x12c8>
   1286c:	mov	r7, r9
   12870:	mov	r9, r5
   12874:	ldr	r3, [r5], #12
   12878:	cmp	r3, #0
   1287c:	bne	12858 <__assert_fail@plt+0x12e4>
   12880:	cmp	r7, #0
   12884:	beq	12964 <__assert_fail@plt+0x13f0>
   12888:	str	r6, [r8]
   1288c:	mov	r0, r4
   12890:	ldr	r3, [r7, #4]
   12894:	mov	r1, r8
   12898:	blx	r3
   1289c:	add	sp, sp, #52	; 0x34
   128a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a4:	ldrb	r3, [r9, #2]
   128a8:	cmp	r3, #0
   128ac:	beq	129d0 <__assert_fail@plt+0x145c>
   128b0:	mov	r0, r9
   128b4:	ldr	r1, [sp, #24]
   128b8:	str	r2, [sp, #4]
   128bc:	bl	112a4 <strcmp@plt>
   128c0:	ldr	r2, [sp, #4]
   128c4:	cmp	r0, #0
   128c8:	beq	1292c <__assert_fail@plt+0x13b8>
   128cc:	mov	r0, r9
   128d0:	ldr	r1, [sp, #32]
   128d4:	str	r2, [sp, #4]
   128d8:	bl	112a4 <strcmp@plt>
   128dc:	ldr	r2, [sp, #4]
   128e0:	cmp	r0, #0
   128e4:	beq	12948 <__assert_fail@plt+0x13d4>
   128e8:	mov	r0, r9
   128ec:	ldr	r1, [sp, #36]	; 0x24
   128f0:	str	r2, [sp, #4]
   128f4:	bl	112a4 <strcmp@plt>
   128f8:	ldr	r2, [sp, #4]
   128fc:	cmp	r0, #0
   12900:	moveq	r0, r9
   12904:	moveq	r2, #1
   12908:	beq	126ac <__assert_fail@plt+0x1138>
   1290c:	cmp	r6, #0
   12910:	bne	126a8 <__assert_fail@plt+0x1134>
   12914:	ldr	r0, [pc, #260]	; 12a20 <__assert_fail@plt+0x14ac>
   12918:	mov	r1, r9
   1291c:	add	r0, pc, r0
   12920:	bl	13938 <secure_getenv@@Base+0x59c>
   12924:	mov	r0, #2
   12928:	b	127e4 <__assert_fail@plt+0x1270>
   1292c:	ldr	r0, [sp, #40]	; 0x28
   12930:	bl	114cc <putenv@plt>
   12934:	bl	13b3c <secure_getenv@@Base+0x7a0>
   12938:	bl	13510 <secure_getenv@@Base+0x174>
   1293c:	ldr	r0, [fp, #-4]
   12940:	ldr	r2, [sp, #4]
   12944:	b	126ac <__assert_fail@plt+0x1138>
   12948:	ldr	r0, [sp, #44]	; 0x2c
   1294c:	bl	114cc <putenv@plt>
   12950:	bl	13b24 <secure_getenv@@Base+0x788>
   12954:	bl	13510 <secure_getenv@@Base+0x174>
   12958:	ldr	r0, [fp, #-4]
   1295c:	ldr	r2, [sp, #4]
   12960:	b	126ac <__assert_fail@plt+0x1138>
   12964:	bl	12eec <__assert_fail@plt+0x1978>
   12968:	mov	r1, r6
   1296c:	mov	r2, r0
   12970:	ldr	r0, [pc, #172]	; 12a24 <__assert_fail@plt+0x14b0>
   12974:	add	r0, pc, r0
   12978:	bl	13938 <secure_getenv@@Base+0x59c>
   1297c:	mov	r0, #2
   12980:	b	127e4 <__assert_fail@plt+0x1270>
   12984:	str	r6, [r8]
   12988:	mov	r0, r4
   1298c:	str	r9, [sp, #28]
   12990:	mov	r1, r8
   12994:	ldr	r3, [r9, #4]
   12998:	blx	r3
   1299c:	add	sp, sp, #52	; 0x34
   129a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129a4:	cmp	r2, #0
   129a8:	bne	129c0 <__assert_fail@plt+0x144c>
   129ac:	ldr	r0, [pc, #116]	; 12a28 <__assert_fail@plt+0x14b4>
   129b0:	add	r0, pc, r0
   129b4:	bl	13938 <secure_getenv@@Base+0x59c>
   129b8:	mov	r0, #2
   129bc:	b	127e4 <__assert_fail@plt+0x1270>
   129c0:	ldr	r0, [sp, #28]
   129c4:	bl	1212c <__assert_fail@plt+0xbb8>
   129c8:	mov	r0, r6
   129cc:	b	127e4 <__assert_fail@plt+0x1270>
   129d0:	cmp	r6, #0
   129d4:	beq	129ac <__assert_fail@plt+0x1438>
   129d8:	bl	13510 <secure_getenv@@Base+0x174>
   129dc:	b	12818 <__assert_fail@plt+0x12a4>
   129e0:	bl	13510 <secure_getenv@@Base+0x174>
   129e4:	cmp	r7, #1
   129e8:	bne	129ac <__assert_fail@plt+0x1438>
   129ec:	ldr	r0, [sp, #28]
   129f0:	bl	1212c <__assert_fail@plt+0xbb8>
   129f4:	mov	r0, #2
   129f8:	b	127e4 <__assert_fail@plt+0x1270>
   129fc:	andeq	r2, r0, ip, lsl sl
   12a00:	strdeq	r2, [r0], -r0
   12a04:	andeq	r2, r0, ip, lsl sl
   12a08:	strdeq	r2, [r0], -r8
   12a0c:	ldrdeq	r2, [r0], -r0
   12a10:	andeq	r2, r0, ip, lsr r8
   12a14:	andeq	r2, r0, r8, ror #18
   12a18:	andeq	r2, r0, r4, ror r9
   12a1c:	ldrdeq	r2, [r0], -r0
   12a20:	andeq	r2, r0, r0, ror r7
   12a24:	andeq	r2, r0, r0, asr r7
   12a28:	andeq	r2, r0, r4, lsl #13
   12a2c:	push	{r4, r5, r6, lr}
   12a30:	mov	r4, r0
   12a34:	ldr	r5, [r0, #16]
   12a38:	mov	r6, r1
   12a3c:	cmp	r5, #0
   12a40:	beq	12aa0 <__assert_fail@plt+0x152c>
   12a44:	ldr	r0, [r0]
   12a48:	blx	r5
   12a4c:	rsbs	r2, r0, #1
   12a50:	mov	r3, r0
   12a54:	movcc	r2, #0
   12a58:	cmp	r6, #0
   12a5c:	moveq	r2, #0
   12a60:	cmp	r2, #0
   12a64:	bne	12a78 <__assert_fail@plt+0x1504>
   12a68:	mov	r0, #1
   12a6c:	str	r3, [r4]
   12a70:	str	r6, [r4, #12]
   12a74:	pop	{r4, r5, r6, pc}
   12a78:	ldr	r3, [r4, #8]
   12a7c:	ldr	r0, [pc, #64]	; 12ac4 <__assert_fail@plt+0x1550>
   12a80:	ldr	r1, [pc, #64]	; 12ac8 <__assert_fail@plt+0x1554>
   12a84:	orr	r3, r3, #1
   12a88:	add	r0, pc, r0
   12a8c:	str	r3, [r4, #8]
   12a90:	add	r1, pc, r1
   12a94:	bl	1383c <secure_getenv@@Base+0x4a0>
   12a98:	mov	r0, #0
   12a9c:	pop	{r4, r5, r6, pc}
   12aa0:	ldr	r0, [pc, #36]	; 12acc <__assert_fail@plt+0x1558>
   12aa4:	ldr	r1, [pc, #36]	; 12ad0 <__assert_fail@plt+0x155c>
   12aa8:	ldr	r2, [pc, #36]	; 12ad4 <__assert_fail@plt+0x1560>
   12aac:	add	r0, pc, r0
   12ab0:	add	r1, pc, r1
   12ab4:	add	r2, pc, r2
   12ab8:	bl	1383c <secure_getenv@@Base+0x4a0>
   12abc:	mov	r0, r5
   12ac0:	pop	{r4, r5, r6, pc}
   12ac4:	andeq	r2, r0, r8, asr #7
   12ac8:	andeq	r2, r0, r4, ror #12
   12acc:	strdeq	r2, [r0], -ip
   12ad0:			; <UNDEFINED> instruction: 0x000026b8
   12ad4:	andeq	r2, r0, r0, asr #12
   12ad8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12adc:	mov	r5, r2
   12ae0:	mov	r9, r1
   12ae4:	ldr	r8, [sp, #32]
   12ae8:	ldr	r7, [sp, #36]	; 0x24
   12aec:	mov	r1, #0
   12af0:	mov	r2, #24
   12af4:	mov	r4, r0
   12af8:	mov	r6, r3
   12afc:	bl	1146c <memset@plt>
   12b00:	tst	r6, #1
   12b04:	str	r9, [r4]
   12b08:	str	r5, [r4, #4]
   12b0c:	str	r5, [r4, #12]
   12b10:	str	r6, [r4, #8]
   12b14:	str	r8, [r4, #16]
   12b18:	str	r7, [r4, #20]
   12b1c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   12b20:	ldr	r2, [pc, #28]	; 12b44 <__assert_fail@plt+0x15d0>
   12b24:	ldr	r0, [pc, #28]	; 12b48 <__assert_fail@plt+0x15d4>
   12b28:	ldr	r1, [pc, #28]	; 12b4c <__assert_fail@plt+0x15d8>
   12b2c:	add	r2, pc, r2
   12b30:	add	r0, pc, r0
   12b34:	add	r2, r2, #16
   12b38:	add	r1, pc, r1
   12b3c:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   12b40:	b	1383c <secure_getenv@@Base+0x4a0>
   12b44:	andeq	r2, r0, r8, asr #11
   12b48:	andeq	r2, r0, r8, ror r2
   12b4c:	andeq	r2, r0, ip, asr #12
   12b50:	ldr	ip, [pc, #76]	; 12ba4 <__assert_fail@plt+0x1630>
   12b54:	push	{r4, r5, r6, lr}
   12b58:	add	ip, pc, ip
   12b5c:	ldr	r6, [pc, #68]	; 12ba8 <__assert_fail@plt+0x1634>
   12b60:	sub	sp, sp, #8
   12b64:	ldr	lr, [pc, #64]	; 12bac <__assert_fail@plt+0x1638>
   12b68:	mov	r4, r1
   12b6c:	mov	r1, #0
   12b70:	mov	r5, r0
   12b74:	ldr	r6, [ip, r6]
   12b78:	mov	r2, r1
   12b7c:	mov	r3, r1
   12b80:	str	r6, [sp]
   12b84:	ldr	ip, [ip, lr]
   12b88:	str	ip, [sp, #4]
   12b8c:	bl	12ad8 <__assert_fail@plt+0x1564>
   12b90:	mov	r0, r5
   12b94:	mov	r1, r4
   12b98:	add	sp, sp, #8
   12b9c:	pop	{r4, r5, r6, lr}
   12ba0:	b	12a2c <__assert_fail@plt+0x14b8>
   12ba4:	andeq	r3, r1, r0, lsr #9
   12ba8:	andeq	r0, r0, r8, lsl r1
   12bac:	andeq	r0, r0, r0, lsl r1
   12bb0:	ldr	ip, [pc, #76]	; 12c04 <__assert_fail@plt+0x1690>
   12bb4:	mov	r3, #2
   12bb8:	push	{r4, r5, r6, lr}
   12bbc:	add	ip, pc, ip
   12bc0:	ldr	r6, [pc, #64]	; 12c08 <__assert_fail@plt+0x1694>
   12bc4:	sub	sp, sp, #8
   12bc8:	ldr	lr, [pc, #60]	; 12c0c <__assert_fail@plt+0x1698>
   12bcc:	mov	r4, r1
   12bd0:	mov	r1, #0
   12bd4:	mov	r5, r0
   12bd8:	ldr	r6, [ip, r6]
   12bdc:	mov	r2, r1
   12be0:	str	r6, [sp]
   12be4:	ldr	ip, [ip, lr]
   12be8:	str	ip, [sp, #4]
   12bec:	bl	12ad8 <__assert_fail@plt+0x1564>
   12bf0:	mov	r0, r5
   12bf4:	mov	r1, r4
   12bf8:	add	sp, sp, #8
   12bfc:	pop	{r4, r5, r6, lr}
   12c00:	b	12a2c <__assert_fail@plt+0x14b8>
   12c04:	andeq	r3, r1, ip, lsr r4
   12c08:	andeq	r0, r0, r8, lsl r1
   12c0c:	andeq	r0, r0, r0, lsl r1
   12c10:	push	{r4, lr}
   12c14:	subs	r4, r0, #0
   12c18:	beq	12c4c <__assert_fail@plt+0x16d8>
   12c1c:	ldr	r3, [r4, #20]
   12c20:	cmp	r3, #0
   12c24:	beq	12c38 <__assert_fail@plt+0x16c4>
   12c28:	ldr	r0, [r4]
   12c2c:	cmp	r0, #0
   12c30:	beq	12c38 <__assert_fail@plt+0x16c4>
   12c34:	blx	r3
   12c38:	mov	r0, r4
   12c3c:	mov	r1, #0
   12c40:	mov	r2, #24
   12c44:	pop	{r4, lr}
   12c48:	b	1146c <memset@plt>
   12c4c:	ldr	r2, [pc, #28]	; 12c70 <__assert_fail@plt+0x16fc>
   12c50:	ldr	r0, [pc, #28]	; 12c74 <__assert_fail@plt+0x1700>
   12c54:	ldr	r1, [pc, #28]	; 12c78 <__assert_fail@plt+0x1704>
   12c58:	add	r2, pc, r2
   12c5c:	add	r0, pc, r0
   12c60:	add	r2, r2, #40	; 0x28
   12c64:	add	r1, pc, r1
   12c68:	pop	{r4, lr}
   12c6c:	b	1383c <secure_getenv@@Base+0x4a0>
   12c70:	muleq	r0, ip, r4
   12c74:	andeq	r2, r0, ip, asr #2
   12c78:	andeq	r2, r0, r0, asr #10
   12c7c:	push	{r3, lr}
   12c80:	mov	r3, r0
   12c84:	ldr	r2, [r0, #8]
   12c88:	tst	r2, #1
   12c8c:	bne	12cb4 <__assert_fail@plt+0x1740>
   12c90:	cmp	r1, #0
   12c94:	ldrne	r2, [r0, #4]
   12c98:	strne	r2, [r1]
   12c9c:	mov	r2, #0
   12ca0:	ldr	r0, [r0]
   12ca4:	str	r2, [r3]
   12ca8:	str	r2, [r3, #12]
   12cac:	str	r2, [r3, #4]
   12cb0:	pop	{r3, pc}
   12cb4:	ldr	r2, [pc, #32]	; 12cdc <__assert_fail@plt+0x1768>
   12cb8:	ldr	r0, [pc, #32]	; 12ce0 <__assert_fail@plt+0x176c>
   12cbc:	ldr	r1, [pc, #32]	; 12ce4 <__assert_fail@plt+0x1770>
   12cc0:	add	r2, pc, r2
   12cc4:	add	r0, pc, r0
   12cc8:	add	r2, r2, #60	; 0x3c
   12ccc:	add	r1, pc, r1
   12cd0:	bl	1383c <secure_getenv@@Base+0x4a0>
   12cd4:	mov	r0, #0
   12cd8:	pop	{r3, pc}
   12cdc:	andeq	r2, r0, r4, lsr r4
   12ce0:	andeq	r2, r0, r4, ror #1
   12ce4:	andeq	r2, r0, r8, ror #9
   12ce8:	push	{r4}		; (str r4, [sp, #-4]!)
   12cec:	mov	ip, #0
   12cf0:	ldr	r4, [r0, #12]
   12cf4:	ldr	r2, [r0, #8]
   12cf8:	cmp	r4, r1
   12cfc:	str	ip, [r0, #4]
   12d00:	bic	r2, r2, #1
   12d04:	str	r2, [r0, #8]
   12d08:	bls	12d18 <__assert_fail@plt+0x17a4>
   12d0c:	mov	r0, #1
   12d10:	pop	{r4}		; (ldr r4, [sp], #4)
   12d14:	bx	lr
   12d18:	pop	{r4}		; (ldr r4, [sp], #4)
   12d1c:	b	12a2c <__assert_fail@plt+0x14b8>
   12d20:	push	{r3, r4, r5, r6, r7, lr}
   12d24:	mov	r4, r0
   12d28:	ldr	r3, [r0, #8]
   12d2c:	mov	r5, r1
   12d30:	ands	r7, r3, #1
   12d34:	bne	12db0 <__assert_fail@plt+0x183c>
   12d38:	ubfx	r6, r3, #1, #1
   12d3c:	ldr	r2, [r0, #4]
   12d40:	add	r1, r6, r1
   12d44:	mvn	r3, r1
   12d48:	cmp	r3, r2
   12d4c:	bls	12dd8 <__assert_fail@plt+0x1864>
   12d50:	ldr	ip, [r0, #12]
   12d54:	add	r1, r1, r2
   12d58:	cmp	r1, ip
   12d5c:	bls	12d88 <__assert_fail@plt+0x1814>
   12d60:	cmn	ip, #-2147483646	; 0x80000002
   12d64:	bhi	12e00 <__assert_fail@plt+0x188c>
   12d68:	lsls	ip, ip, #1
   12d6c:	moveq	ip, #16
   12d70:	cmp	ip, r1
   12d74:	movcs	r1, ip
   12d78:	bl	12a2c <__assert_fail@plt+0x14b8>
   12d7c:	subs	r7, r0, #0
   12d80:	beq	12e28 <__assert_fail@plt+0x18b4>
   12d84:	ldr	r2, [r4, #4]
   12d88:	ldr	r3, [r4]
   12d8c:	cmp	r6, #0
   12d90:	add	r1, r2, r5
   12d94:	str	r1, [r4, #4]
   12d98:	add	r2, r3, r2
   12d9c:	movne	r3, #0
   12da0:	movne	r0, r2
   12da4:	strbne	r3, [r2, r5]
   12da8:	moveq	r0, r2
   12dac:	pop	{r3, r4, r5, r6, r7, pc}
   12db0:	ldr	r2, [pc, #144]	; 12e48 <__assert_fail@plt+0x18d4>
   12db4:	ldr	r0, [pc, #144]	; 12e4c <__assert_fail@plt+0x18d8>
   12db8:	ldr	r1, [pc, #144]	; 12e50 <__assert_fail@plt+0x18dc>
   12dbc:	add	r2, pc, r2
   12dc0:	add	r0, pc, r0
   12dc4:	add	r2, r2, #80	; 0x50
   12dc8:	add	r1, pc, r1
   12dcc:	bl	1383c <secure_getenv@@Base+0x4a0>
   12dd0:	mov	r0, #0
   12dd4:	pop	{r3, r4, r5, r6, r7, pc}
   12dd8:	ldr	r2, [pc, #116]	; 12e54 <__assert_fail@plt+0x18e0>
   12ddc:	ldr	r0, [pc, #116]	; 12e58 <__assert_fail@plt+0x18e4>
   12de0:	ldr	r1, [pc, #116]	; 12e5c <__assert_fail@plt+0x18e8>
   12de4:	add	r2, pc, r2
   12de8:	add	r0, pc, r0
   12dec:	add	r2, r2, #80	; 0x50
   12df0:	add	r1, pc, r1
   12df4:	bl	1383c <secure_getenv@@Base+0x4a0>
   12df8:	mov	r0, r7
   12dfc:	pop	{r3, r4, r5, r6, r7, pc}
   12e00:	ldr	r2, [pc, #88]	; 12e60 <__assert_fail@plt+0x18ec>
   12e04:	ldr	r0, [pc, #88]	; 12e64 <__assert_fail@plt+0x18f0>
   12e08:	ldr	r1, [pc, #88]	; 12e68 <__assert_fail@plt+0x18f4>
   12e0c:	add	r2, pc, r2
   12e10:	add	r0, pc, r0
   12e14:	add	r2, r2, #80	; 0x50
   12e18:	add	r1, pc, r1
   12e1c:	bl	1383c <secure_getenv@@Base+0x4a0>
   12e20:	mov	r0, r7
   12e24:	pop	{r3, r4, r5, r6, r7, pc}
   12e28:	ldr	r1, [pc, #60]	; 12e6c <__assert_fail@plt+0x18f8>
   12e2c:	ldr	r0, [pc, #60]	; 12e70 <__assert_fail@plt+0x18fc>
   12e30:	add	r1, pc, r1
   12e34:	add	r0, pc, r0
   12e38:	add	r1, r1, #80	; 0x50
   12e3c:	bl	1383c <secure_getenv@@Base+0x4a0>
   12e40:	mov	r0, r7
   12e44:	pop	{r3, r4, r5, r6, r7, pc}
   12e48:	andeq	r2, r0, r8, lsr r3
   12e4c:	andeq	r1, r0, r8, ror #31
   12e50:	andeq	r2, r0, ip, ror #7
   12e54:	andeq	r2, r0, r0, lsl r3
   12e58:	andeq	r1, r0, r0, asr #31
   12e5c:	ldrdeq	r2, [r0], -ip
   12e60:	andeq	r2, r0, r8, ror #5
   12e64:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   12e68:	andeq	r2, r0, r4, ror #7
   12e6c:	andeq	r2, r0, r4, asr #5
   12e70:	andeq	r2, r0, ip, lsl r0
   12e74:	push	{r4, r5, r6, lr}
   12e78:	subs	r4, r2, #0
   12e7c:	mov	r6, r0
   12e80:	mov	r5, r1
   12e84:	blt	12eac <__assert_fail@plt+0x1938>
   12e88:	mov	r0, r6
   12e8c:	mov	r1, r4
   12e90:	bl	12d20 <__assert_fail@plt+0x17ac>
   12e94:	cmp	r0, #0
   12e98:	beq	12ebc <__assert_fail@plt+0x1948>
   12e9c:	mov	r1, r5
   12ea0:	mov	r2, r4
   12ea4:	pop	{r4, r5, r6, lr}
   12ea8:	b	112e0 <memcpy@plt>
   12eac:	mov	r0, r1
   12eb0:	bl	11424 <strlen@plt>
   12eb4:	mov	r4, r0
   12eb8:	b	12e88 <__assert_fail@plt+0x1914>
   12ebc:	ldr	r2, [pc, #28]	; 12ee0 <__assert_fail@plt+0x196c>
   12ec0:	ldr	r0, [pc, #28]	; 12ee4 <__assert_fail@plt+0x1970>
   12ec4:	ldr	r1, [pc, #28]	; 12ee8 <__assert_fail@plt+0x1974>
   12ec8:	add	r2, pc, r2
   12ecc:	add	r0, pc, r0
   12ed0:	add	r2, r2, #100	; 0x64
   12ed4:	add	r1, pc, r1
   12ed8:	pop	{r4, r5, r6, lr}
   12edc:	b	1383c <secure_getenv@@Base+0x4a0>
   12ee0:	andeq	r2, r0, ip, lsr #4
   12ee4:	ldrdeq	r1, [r0], -ip
   12ee8:	andeq	r2, r0, r4, asr #6
   12eec:	ldr	r3, [pc, #16]	; 12f04 <__assert_fail@plt+0x1990>
   12ef0:	ldr	r2, [pc, #16]	; 12f08 <__assert_fail@plt+0x1994>
   12ef4:	add	r3, pc, r3
   12ef8:	ldr	r3, [r3, r2]
   12efc:	ldr	r0, [r3]
   12f00:	bx	lr
   12f04:	andeq	r3, r1, r4, lsl #2
   12f08:	andeq	r0, r0, ip, lsl #2
   12f0c:	ldr	r3, [pc, #136]	; 12f9c <__assert_fail@plt+0x1a28>
   12f10:	ldr	r2, [pc, #136]	; 12fa0 <__assert_fail@plt+0x1a2c>
   12f14:	add	r3, pc, r3
   12f18:	push	{r4, r5, r6, lr}
   12f1c:	sub	sp, sp, #8
   12f20:	ldr	r5, [r3, r2]
   12f24:	mov	r6, r0
   12f28:	mov	r0, sp
   12f2c:	ldr	r3, [r5]
   12f30:	str	r3, [sp, #4]
   12f34:	bl	11298 <pthread_mutexattr_init@plt>
   12f38:	mov	r1, #1
   12f3c:	mov	r0, sp
   12f40:	bl	113f4 <pthread_mutexattr_settype@plt>
   12f44:	mov	r0, r6
   12f48:	mov	r1, sp
   12f4c:	bl	112ec <pthread_mutex_init@plt>
   12f50:	cmp	r0, #0
   12f54:	bne	12f78 <__assert_fail@plt+0x1a04>
   12f58:	mov	r0, sp
   12f5c:	bl	1155c <pthread_mutexattr_destroy@plt>
   12f60:	ldr	r2, [sp, #4]
   12f64:	ldr	r3, [r5]
   12f68:	cmp	r2, r3
   12f6c:	bne	12f98 <__assert_fail@plt+0x1a24>
   12f70:	add	sp, sp, #8
   12f74:	pop	{r4, r5, r6, pc}
   12f78:	ldr	r0, [pc, #36]	; 12fa4 <__assert_fail@plt+0x1a30>
   12f7c:	mov	r2, #180	; 0xb4
   12f80:	ldr	r1, [pc, #32]	; 12fa8 <__assert_fail@plt+0x1a34>
   12f84:	ldr	r3, [pc, #32]	; 12fac <__assert_fail@plt+0x1a38>
   12f88:	add	r0, pc, r0
   12f8c:	add	r1, pc, r1
   12f90:	add	r3, pc, r3
   12f94:	bl	11574 <__assert_fail@plt>
   12f98:	bl	11310 <__stack_chk_fail@plt>
   12f9c:	andeq	r3, r1, r4, ror #1
   12fa0:	andeq	r0, r0, r4, lsl r1
   12fa4:			; <UNDEFINED> instruction: 0x000022b8
   12fa8:	andeq	r2, r0, r0, asr #5
   12fac:	muleq	r0, r4, r2
   12fb0:	push	{r3, lr}
   12fb4:	bl	11340 <dlerror@plt>
   12fb8:	cmp	r0, #0
   12fbc:	popeq	{r3, pc}
   12fc0:	pop	{r3, lr}
   12fc4:	b	112f8 <strdup@plt>
   12fc8:	ldr	ip, [pc, #316]	; 1310c <__assert_fail@plt+0x1b98>
   12fcc:	push	{r4, r5, r6, r7, r8, r9, lr}
   12fd0:	add	ip, pc, ip
   12fd4:	ldr	lr, [pc, #308]	; 13110 <__assert_fail@plt+0x1b9c>
   12fd8:	mov	r7, r3
   12fdc:	sub	sp, sp, #108	; 0x6c
   12fe0:	mov	r9, r0
   12fe4:	mov	r5, r1
   12fe8:	mov	r0, #1
   12fec:	ldr	r6, [ip, lr]
   12ff0:	mov	r1, #12
   12ff4:	mov	r8, r2
   12ff8:	ldr	r3, [r6]
   12ffc:	str	r3, [sp, #100]	; 0x64
   13000:	bl	11280 <calloc@plt>
   13004:	subs	r4, r0, #0
   13008:	beq	130f0 <__assert_fail@plt+0x1b7c>
   1300c:	mov	r0, r9
   13010:	mov	r1, #524288	; 0x80000
   13014:	bl	113e8 <open@plt>
   13018:	cmn	r0, #1
   1301c:	str	r0, [r4]
   13020:	beq	130e0 <__assert_fail@plt+0x1b6c>
   13024:	cmp	r5, #0
   13028:	beq	130b8 <__assert_fail@plt+0x1b44>
   1302c:	ldr	r3, [r5, #16]
   13030:	and	r3, r3, #61440	; 0xf000
   13034:	cmp	r3, #16384	; 0x4000
   13038:	beq	130f8 <__assert_fail@plt+0x1b84>
   1303c:	ldr	r1, [r5, #44]	; 0x2c
   13040:	cmp	r1, #0
   13044:	bne	13074 <__assert_fail@plt+0x1b00>
   13048:	ldr	r3, [pc, #196]	; 13114 <__assert_fail@plt+0x1ba0>
   1304c:	mov	r0, r4
   13050:	add	r3, pc, r3
   13054:	str	r3, [r8]
   13058:	str	r1, [r7]
   1305c:	ldr	r2, [sp, #100]	; 0x64
   13060:	ldr	r3, [r6]
   13064:	cmp	r2, r3
   13068:	bne	13108 <__assert_fail@plt+0x1b94>
   1306c:	add	sp, sp, #108	; 0x6c
   13070:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13074:	ldr	r3, [r4]
   13078:	mov	r5, #0
   1307c:	str	r1, [r4, #8]
   13080:	mov	r0, r5
   13084:	str	r5, [sp, #4]
   13088:	mov	r2, #1
   1308c:	str	r3, [sp]
   13090:	mov	r3, #2
   13094:	bl	11430 <mmap@plt>
   13098:	cmn	r0, #1
   1309c:	str	r0, [r4, #4]
   130a0:	beq	130d8 <__assert_fail@plt+0x1b64>
   130a4:	str	r0, [r8]
   130a8:	mov	r0, r4
   130ac:	ldr	r3, [r4, #8]
   130b0:	str	r3, [r7]
   130b4:	b	1305c <__assert_fail@plt+0x1ae8>
   130b8:	add	r9, sp, #8
   130bc:	mov	r1, r0
   130c0:	mov	r0, #3
   130c4:	mov	r2, r9
   130c8:	bl	113b8 <__fxstat@plt>
   130cc:	cmp	r0, #0
   130d0:	movge	r5, r9
   130d4:	bge	1302c <__assert_fail@plt+0x1ab8>
   130d8:	ldr	r0, [r4]
   130dc:	bl	11544 <close@plt>
   130e0:	mov	r0, r4
   130e4:	bl	112c8 <free@plt>
   130e8:	mov	r0, #0
   130ec:	b	1305c <__assert_fail@plt+0x1ae8>
   130f0:	mov	r0, r4
   130f4:	b	1305c <__assert_fail@plt+0x1ae8>
   130f8:	bl	11454 <__errno_location@plt>
   130fc:	mov	r3, #21
   13100:	str	r3, [r0]
   13104:	b	130d8 <__assert_fail@plt+0x1b64>
   13108:	bl	11310 <__stack_chk_fail@plt>
   1310c:	andeq	r3, r1, r8, lsr #32
   13110:	andeq	r0, r0, r4, lsl r1
   13114:	andeq	r1, r0, r4, lsl #31
   13118:	push	{r4, lr}
   1311c:	mov	r4, r0
   13120:	ldr	r1, [r0, #8]
   13124:	cmp	r1, #0
   13128:	beq	13134 <__assert_fail@plt+0x1bc0>
   1312c:	ldr	r0, [r0, #4]
   13130:	bl	114c0 <munmap@plt>
   13134:	ldr	r0, [r4]
   13138:	bl	11544 <close@plt>
   1313c:	mov	r0, r4
   13140:	pop	{r4, lr}
   13144:	b	112c8 <free@plt>
   13148:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1314c:	mov	r5, r0
   13150:	ldrb	r7, [r1]
   13154:	mov	r6, r2
   13158:	cmp	r7, #0
   1315c:	beq	131c0 <__assert_fail@plt+0x1c4c>
   13160:	add	sl, r1, #1
   13164:	add	r8, r0, r2
   13168:	mov	r0, sl
   1316c:	bl	11424 <strlen@plt>
   13170:	mov	r9, r0
   13174:	b	1317c <__assert_fail@plt+0x1c08>
   13178:	mov	r5, r4
   1317c:	cmp	r5, r8
   13180:	mov	r4, r5
   13184:	sub	r6, r6, #1
   13188:	beq	131c8 <__assert_fail@plt+0x1c54>
   1318c:	ldrb	r3, [r4], #1
   13190:	cmp	r3, #0
   13194:	beq	131d0 <__assert_fail@plt+0x1c5c>
   13198:	cmp	r3, r7
   1319c:	bne	13178 <__assert_fail@plt+0x1c04>
   131a0:	cmp	r9, r6
   131a4:	mov	r0, r4
   131a8:	mov	r1, sl
   131ac:	mov	r2, r9
   131b0:	bhi	131c8 <__assert_fail@plt+0x1c54>
   131b4:	bl	1152c <strncmp@plt>
   131b8:	cmp	r0, #0
   131bc:	bne	13178 <__assert_fail@plt+0x1c04>
   131c0:	mov	r0, r5
   131c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   131c8:	mov	r0, #0
   131cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   131d0:	mov	r0, r3
   131d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   131d8:	push	{r4, r5, r6, lr}
   131dc:	subs	r6, r0, #0
   131e0:	mov	r4, r1
   131e4:	beq	13214 <__assert_fail@plt+0x1ca0>
   131e8:	mov	r0, r1
   131ec:	bl	113a0 <malloc@plt>
   131f0:	subs	r5, r0, #0
   131f4:	beq	1320c <__assert_fail@plt+0x1c98>
   131f8:	mov	r1, r6
   131fc:	mov	r2, r4
   13200:	bl	112e0 <memcpy@plt>
   13204:	mov	r0, r5
   13208:	pop	{r4, r5, r6, pc}
   1320c:	mov	r0, r5
   13210:	pop	{r4, r5, r6, pc}
   13214:	mov	r0, r6
   13218:	pop	{r4, r5, r6, pc}

0001321c <strndup@@Base>:
   1321c:	push	{r4, r5, r6, lr}
   13220:	mov	r6, r0
   13224:	add	r0, r1, #1
   13228:	mov	r4, r1
   1322c:	bl	113a0 <malloc@plt>
   13230:	subs	r5, r0, #0
   13234:	beq	1324c <strndup@@Base+0x30>
   13238:	mov	r1, r6
   1323c:	mov	r2, r4
   13240:	bl	11484 <strncpy@plt>
   13244:	mov	r3, #0
   13248:	strb	r3, [r5, r4]
   1324c:	mov	r0, r5
   13250:	pop	{r4, r5, r6, pc}
   13254:	push	{r0, r1, r2, r3}
   13258:	ldr	r3, [pc, #296]	; 13388 <strndup@@Base+0x16c>
   1325c:	ldr	r2, [pc, #296]	; 1338c <strndup@@Base+0x170>
   13260:	add	r3, pc, r3
   13264:	push	{r4, r5, r6, r7, r8, r9, lr}
   13268:	sub	sp, sp, #12
   1326c:	ldr	r7, [r3, r2]
   13270:	add	r8, sp, #44	; 0x2c
   13274:	ldr	r6, [sp, #40]	; 0x28
   13278:	str	r8, [sp]
   1327c:	ldr	r3, [r7]
   13280:	cmp	r6, #0
   13284:	moveq	r0, #1
   13288:	str	r3, [sp, #4]
   1328c:	beq	13310 <strndup@@Base+0xf4>
   13290:	mov	r0, r6
   13294:	mov	r4, r8
   13298:	bl	11424 <strlen@plt>
   1329c:	mov	r5, r0
   132a0:	b	132a8 <strndup@@Base+0x8c>
   132a4:	mov	r5, r0
   132a8:	add	r4, r4, #4
   132ac:	ldr	r0, [r4, #-4]
   132b0:	str	r4, [sp]
   132b4:	cmp	r0, #0
   132b8:	beq	1330c <strndup@@Base+0xf0>
   132bc:	bl	11424 <strlen@plt>
   132c0:	adds	r0, r0, r5
   132c4:	bcc	132a4 <strndup@@Base+0x88>
   132c8:	ldr	r2, [pc, #192]	; 13390 <strndup@@Base+0x174>
   132cc:	ldr	r0, [pc, #192]	; 13394 <strndup@@Base+0x178>
   132d0:	ldr	r1, [pc, #192]	; 13398 <strndup@@Base+0x17c>
   132d4:	add	r2, pc, r2
   132d8:	add	r0, pc, r0
   132dc:	add	r2, r2, #16
   132e0:	add	r1, pc, r1
   132e4:	bl	1383c <secure_getenv@@Base+0x4a0>
   132e8:	mov	r0, #0
   132ec:	ldr	r2, [sp, #4]
   132f0:	ldr	r3, [r7]
   132f4:	cmp	r2, r3
   132f8:	bne	13384 <strndup@@Base+0x168>
   132fc:	add	sp, sp, #12
   13300:	pop	{r4, r5, r6, r7, r8, r9, lr}
   13304:	add	sp, sp, #16
   13308:	bx	lr
   1330c:	add	r0, r5, #1
   13310:	bl	113a0 <malloc@plt>
   13314:	subs	r9, r0, #0
   13318:	beq	13374 <strndup@@Base+0x158>
   1331c:	cmp	r6, #0
   13320:	str	r8, [sp]
   13324:	beq	1337c <strndup@@Base+0x160>
   13328:	add	r4, sp, #48	; 0x30
   1332c:	mov	r5, r9
   13330:	mov	r0, r6
   13334:	bl	11424 <strlen@plt>
   13338:	mov	r1, r6
   1333c:	mov	r8, r0
   13340:	mov	r0, r5
   13344:	mov	r2, r8
   13348:	add	r5, r5, r8
   1334c:	bl	112e0 <memcpy@plt>
   13350:	str	r4, [sp]
   13354:	add	r4, r4, #4
   13358:	ldr	r6, [r4, #-8]
   1335c:	cmp	r6, #0
   13360:	bne	13330 <strndup@@Base+0x114>
   13364:	mov	r3, #0
   13368:	mov	r0, r9
   1336c:	strb	r3, [r5]
   13370:	b	132ec <strndup@@Base+0xd0>
   13374:	mov	r0, r9
   13378:	b	132ec <strndup@@Base+0xd0>
   1337c:	mov	r5, r9
   13380:	b	13364 <strndup@@Base+0x148>
   13384:	bl	11310 <__stack_chk_fail@plt>
   13388:	muleq	r1, r8, sp
   1338c:	andeq	r0, r0, r4, lsl r1
   13390:	andeq	r1, r0, r0, asr pc
   13394:	ldrdeq	r1, [r0], -r0
   13398:	andeq	r1, r0, ip, ror pc

0001339c <secure_getenv@@Base>:
   1339c:	push	{r4, lr}
   133a0:	mov	r4, r0
   133a4:	mov	r0, #23
   133a8:	bl	114b4 <getauxval@plt>
   133ac:	cmp	r0, #0
   133b0:	bne	133c0 <secure_getenv@@Base+0x24>
   133b4:	mov	r0, r4
   133b8:	pop	{r4, lr}
   133bc:	b	1137c <getenv@plt>
   133c0:	mov	r0, #0
   133c4:	pop	{r4, pc}
   133c8:	ldr	r3, [pc, #308]	; 13504 <secure_getenv@@Base+0x168>
   133cc:	ldr	r2, [pc, #308]	; 13508 <secure_getenv@@Base+0x16c>
   133d0:	add	r3, pc, r3
   133d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   133d8:	mov	r7, r0
   133dc:	ldr	r9, [r3, r2]
   133e0:	sub	sp, sp, #16
   133e4:	ldr	r0, [pc, #288]	; 1350c <secure_getenv@@Base+0x170>
   133e8:	mov	r8, r1
   133ec:	ldr	r3, [r9]
   133f0:	add	r0, pc, r0
   133f4:	str	r3, [sp, #12]
   133f8:	bl	11370 <opendir@plt>
   133fc:	subs	r4, r0, #0
   13400:	beq	1349c <secure_getenv@@Base+0x100>
   13404:	add	r5, sp, #4
   13408:	mov	r6, #0
   1340c:	mov	r0, r4
   13410:	bl	114e4 <readdir@plt>
   13414:	cmp	r0, #0
   13418:	beq	13494 <secure_getenv@@Base+0xf8>
   1341c:	add	r0, r0, #11
   13420:	mov	r1, r5
   13424:	mov	r2, #10
   13428:	str	r6, [sp, #4]
   1342c:	bl	112b0 <strtol@plt>
   13430:	ldr	r3, [sp, #4]
   13434:	cmp	r3, #0
   13438:	mov	sl, r0
   1343c:	beq	1340c <secure_getenv@@Base+0x70>
   13440:	ldrb	r3, [r3]
   13444:	cmp	r3, #0
   13448:	bne	1340c <secure_getenv@@Base+0x70>
   1344c:	mov	r0, r4
   13450:	bl	11508 <dirfd@plt>
   13454:	cmp	r0, sl
   13458:	beq	1340c <secure_getenv@@Base+0x70>
   1345c:	mov	r1, sl
   13460:	mov	r0, r8
   13464:	blx	r7
   13468:	subs	sl, r0, #0
   1346c:	beq	1340c <secure_getenv@@Base+0x70>
   13470:	mov	r0, r4
   13474:	bl	11550 <closedir@plt>
   13478:	ldr	r2, [sp, #12]
   1347c:	mov	r0, sl
   13480:	ldr	r3, [r9]
   13484:	cmp	r2, r3
   13488:	bne	13500 <secure_getenv@@Base+0x164>
   1348c:	add	sp, sp, #16
   13490:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13494:	mov	sl, r0
   13498:	b	13470 <secure_getenv@@Base+0xd4>
   1349c:	mov	r0, #7
   134a0:	add	r1, sp, #4
   134a4:	bl	11334 <getrlimit@plt>
   134a8:	cmp	r0, #0
   134ac:	bne	134f0 <secure_getenv@@Base+0x154>
   134b0:	ldr	r5, [sp, #8]
   134b4:	cmn	r5, #1
   134b8:	beq	134f0 <secure_getenv@@Base+0x154>
   134bc:	cmp	r5, #0
   134c0:	movgt	r4, #0
   134c4:	ble	134e8 <secure_getenv@@Base+0x14c>
   134c8:	mov	r0, r8
   134cc:	mov	r1, r4
   134d0:	blx	r7
   134d4:	subs	sl, r0, #0
   134d8:	bne	13478 <secure_getenv@@Base+0xdc>
   134dc:	add	r4, r4, #1
   134e0:	cmp	r4, r5
   134e4:	bne	134c8 <secure_getenv@@Base+0x12c>
   134e8:	mov	sl, #0
   134ec:	b	13478 <secure_getenv@@Base+0xdc>
   134f0:	mov	r0, #4
   134f4:	bl	11328 <sysconf@plt>
   134f8:	mov	r5, r0
   134fc:	b	134bc <secure_getenv@@Base+0x120>
   13500:	bl	11310 <__stack_chk_fail@plt>
   13504:	andeq	r2, r1, r8, lsr #24
   13508:	andeq	r0, r0, r4, lsl r1
   1350c:	andeq	r1, r0, r4, lsl #29
   13510:	ldr	r0, [pc, #544]	; 13738 <secure_getenv@@Base+0x39c>
   13514:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13518:	add	r0, pc, r0
   1351c:	sub	sp, sp, #12
   13520:	bl	1339c <secure_getenv@@Base>
   13524:	ldr	ip, [pc, #528]	; 1373c <secure_getenv@@Base+0x3a0>
   13528:	add	ip, pc, ip
   1352c:	str	ip, [sp, #4]
   13530:	cmp	r0, #0
   13534:	beq	13544 <secure_getenv@@Base+0x1a8>
   13538:	ldrb	r3, [r0]
   1353c:	cmp	r3, #0
   13540:	bne	13694 <secure_getenv@@Base+0x2f8>
   13544:	ldr	r0, [pc, #500]	; 13740 <secure_getenv@@Base+0x3a4>
   13548:	add	r0, pc, r0
   1354c:	bl	1137c <getenv@plt>
   13550:	subs	r5, r0, #0
   13554:	beq	13730 <secure_getenv@@Base+0x394>
   13558:	ldrb	r4, [r5]
   1355c:	cmp	r4, #97	; 0x61
   13560:	beq	1364c <secure_getenv@@Base+0x2b0>
   13564:	ldr	r1, [pc, #472]	; 13744 <secure_getenv@@Base+0x3a8>
   13568:	mov	r0, r5
   1356c:	add	r1, pc, r1
   13570:	bl	112a4 <strcmp@plt>
   13574:	cmp	r0, #0
   13578:	beq	136c4 <secure_getenv@@Base+0x328>
   1357c:	ldr	sl, [pc, #452]	; 13748 <secure_getenv@@Base+0x3ac>
   13580:	mov	r3, r4
   13584:	ldr	r9, [pc, #448]	; 1374c <secure_getenv@@Base+0x3b0>
   13588:	mov	r7, #0
   1358c:	ldr	ip, [pc, #444]	; 13750 <secure_getenv@@Base+0x3b4>
   13590:	add	sl, pc, sl
   13594:	add	r9, pc, r9
   13598:	add	ip, pc, ip
   1359c:	str	ip, [sp]
   135a0:	cmp	r3, #0
   135a4:	beq	13624 <secure_getenv@@Base+0x288>
   135a8:	mov	r0, r5
   135ac:	mov	r1, sl
   135b0:	bl	11514 <strpbrk@plt>
   135b4:	subs	r6, r0, #0
   135b8:	beq	136b4 <secure_getenv@@Base+0x318>
   135bc:	rsb	r4, r5, r6
   135c0:	add	r8, r9, #8
   135c4:	mov	r0, #3
   135c8:	ldr	fp, [sp]
   135cc:	b	135e4 <secure_getenv@@Base+0x248>
   135d0:	ldr	fp, [r8], #8
   135d4:	cmp	fp, #0
   135d8:	mov	r0, fp
   135dc:	beq	13618 <secure_getenv@@Base+0x27c>
   135e0:	bl	11424 <strlen@plt>
   135e4:	cmp	r0, r4
   135e8:	bne	135d0 <secure_getenv@@Base+0x234>
   135ec:	mov	r0, fp
   135f0:	mov	r1, r5
   135f4:	mov	r2, r4
   135f8:	bl	1152c <strncmp@plt>
   135fc:	cmp	r0, #0
   13600:	ldreq	r3, [r8, #-4]
   13604:	ldr	fp, [r8], #8
   13608:	orreq	r7, r7, r3
   1360c:	cmp	fp, #0
   13610:	mov	r0, fp
   13614:	bne	135e0 <secure_getenv@@Base+0x244>
   13618:	ldrb	r3, [r6]
   1361c:	cmp	r3, #0
   13620:	bne	136a8 <secure_getenv@@Base+0x30c>
   13624:	ldr	ip, [sp, #4]
   13628:	mov	r1, #1
   1362c:	ldr	r3, [pc, #288]	; 13754 <secure_getenv@@Base+0x3b8>
   13630:	ldr	r2, [pc, #288]	; 13758 <secure_getenv@@Base+0x3bc>
   13634:	ldr	r3, [ip, r3]
   13638:	add	r2, pc, r2
   1363c:	strb	r1, [r2, #1]
   13640:	str	r7, [r3]
   13644:	add	sp, sp, #12
   13648:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1364c:	ldrb	r3, [r5, #1]
   13650:	cmp	r3, #108	; 0x6c
   13654:	bne	13564 <secure_getenv@@Base+0x1c8>
   13658:	ldrb	r3, [r5, #2]
   1365c:	cmp	r3, #108	; 0x6c
   13660:	bne	13564 <secure_getenv@@Base+0x1c8>
   13664:	ldrb	r7, [r5, #3]
   13668:	cmp	r7, #0
   1366c:	bne	13564 <secure_getenv@@Base+0x1c8>
   13670:	ldr	r3, [pc, #228]	; 1375c <secure_getenv@@Base+0x3c0>
   13674:	add	r3, pc, r3
   13678:	add	r3, r3, #4
   1367c:	ldr	r2, [r3], #8
   13680:	orr	r7, r7, r2
   13684:	ldr	r2, [r3, #-4]
   13688:	cmp	r2, #0
   1368c:	bne	1367c <secure_getenv@@Base+0x2e0>
   13690:	b	13624 <secure_getenv@@Base+0x288>
   13694:	ldr	r3, [pc, #196]	; 13760 <secure_getenv@@Base+0x3c4>
   13698:	mov	r2, #1
   1369c:	add	r3, pc, r3
   136a0:	strb	r2, [r3]
   136a4:	b	13544 <secure_getenv@@Base+0x1a8>
   136a8:	ldrb	r3, [r6, #1]
   136ac:	add	r5, r6, #1
   136b0:	b	135a0 <secure_getenv@@Base+0x204>
   136b4:	mov	r0, r5
   136b8:	bl	11424 <strlen@plt>
   136bc:	add	r6, r5, r0
   136c0:	b	135bc <secure_getenv@@Base+0x220>
   136c4:	ldr	r3, [pc, #152]	; 13764 <secure_getenv@@Base+0x3c8>
   136c8:	mov	r1, #1
   136cc:	ldr	ip, [sp, #4]
   136d0:	mov	r2, #23
   136d4:	ldr	r0, [pc, #140]	; 13768 <secure_getenv@@Base+0x3cc>
   136d8:	ldr	r4, [pc, #140]	; 1376c <secure_getenv@@Base+0x3d0>
   136dc:	ldr	r5, [ip, r3]
   136e0:	add	r0, pc, r0
   136e4:	ldr	r7, [pc, #132]	; 13770 <secure_getenv@@Base+0x3d4>
   136e8:	add	r4, pc, r4
   136ec:	ldr	r6, [pc, #128]	; 13774 <secure_getenv@@Base+0x3d8>
   136f0:	ldr	r3, [r5]
   136f4:	add	r7, pc, r7
   136f8:	add	r6, pc, r6
   136fc:	bl	11358 <fwrite@plt>
   13700:	mov	r3, r7
   13704:	ldr	r0, [r5]
   13708:	mov	r1, #1
   1370c:	mov	r2, r6
   13710:	bl	114a8 <__fprintf_chk@plt>
   13714:	ldr	r7, [r4, #8]!
   13718:	cmp	r7, #0
   1371c:	bne	13700 <secure_getenv@@Base+0x364>
   13720:	ldr	r1, [r5]
   13724:	mov	r0, #10
   13728:	bl	114f0 <fputc@plt>
   1372c:	b	13624 <secure_getenv@@Base+0x288>
   13730:	mov	r7, r5
   13734:	b	13624 <secure_getenv@@Base+0x288>
   13738:	andeq	r1, r0, r0, ror sp
   1373c:	ldrdeq	r2, [r1], -r0
   13740:	andeq	r1, r0, r0, asr sp
   13744:	andeq	r1, r0, r4, lsl #9
   13748:	andeq	r1, r0, r0, lsr sp
   1374c:	andeq	r2, r1, ip, lsl #18
   13750:	andeq	r1, r0, ip, ror #25
   13754:	andeq	r0, r0, ip, lsr #2
   13758:	andeq	r2, r1, lr, lsl #22
   1375c:	andeq	r2, r1, ip, lsr #16
   13760:	andeq	r2, r1, sl, lsr #21
   13764:	andeq	r0, r0, ip, lsl r1
   13768:	andeq	r1, r0, r8, asr #23
   1376c:			; <UNDEFINED> instruction: 0x000127b8
   13770:	muleq	r0, r0, fp
   13774:	andeq	r1, r0, r8, lsl ip
   13778:	push	{r1, r2, r3}
   1377c:	ldr	r3, [pc, #164]	; 13828 <secure_getenv@@Base+0x48c>
   13780:	ldr	ip, [pc, #164]	; 1382c <secure_getenv@@Base+0x490>
   13784:	add	r3, pc, r3
   13788:	ldr	r1, [pc, #160]	; 13830 <secure_getenv@@Base+0x494>
   1378c:	push	{r4, r5, r6, r7, lr}
   13790:	sub	sp, sp, #8
   13794:	ldr	r4, [r3, ip]
   13798:	ldr	r5, [sp, #28]
   1379c:	ldr	ip, [r4]
   137a0:	str	ip, [sp, #4]
   137a4:	ldr	r1, [r3, r1]
   137a8:	ldr	r1, [r1]
   137ac:	tst	r0, r1
   137b0:	beq	13804 <secure_getenv@@Base+0x468>
   137b4:	ldr	r2, [pc, #120]	; 13834 <secure_getenv@@Base+0x498>
   137b8:	ldr	r6, [r3, r2]
   137bc:	ldr	r7, [r6]
   137c0:	bl	11418 <getpid@plt>
   137c4:	ldr	r2, [pc, #108]	; 13838 <secure_getenv@@Base+0x49c>
   137c8:	mov	r1, #1
   137cc:	add	r2, pc, r2
   137d0:	mov	r3, r0
   137d4:	mov	r0, r7
   137d8:	bl	114a8 <__fprintf_chk@plt>
   137dc:	add	ip, sp, #32
   137e0:	mov	r1, #1
   137e4:	mov	r2, r5
   137e8:	ldr	r0, [r6]
   137ec:	mov	r3, ip
   137f0:	str	ip, [sp]
   137f4:	bl	113c4 <__vfprintf_chk@plt>
   137f8:	ldr	r1, [r6]
   137fc:	mov	r0, #10
   13800:	bl	114f0 <fputc@plt>
   13804:	ldr	r2, [sp, #4]
   13808:	ldr	r3, [r4]
   1380c:	cmp	r2, r3
   13810:	bne	13824 <secure_getenv@@Base+0x488>
   13814:	add	sp, sp, #8
   13818:	pop	{r4, r5, r6, r7, lr}
   1381c:	add	sp, sp, #12
   13820:	bx	lr
   13824:	bl	11310 <__stack_chk_fail@plt>
   13828:	andeq	r2, r1, r4, ror r8
   1382c:	andeq	r0, r0, r4, lsl r1
   13830:	andeq	r0, r0, ip, lsr #2
   13834:	andeq	r0, r0, ip, lsl r1
   13838:	strdeq	r1, [r0], -ip
   1383c:	push	{r0, r1, r2, r3}
   13840:	mov	r1, #1
   13844:	ldr	r0, [pc, #116]	; 138c0 <secure_getenv@@Base+0x524>
   13848:	push	{r4, lr}
   1384c:	add	r0, pc, r0
   13850:	ldr	r4, [pc, #108]	; 138c4 <secure_getenv@@Base+0x528>
   13854:	sub	sp, sp, #8
   13858:	add	ip, sp, #20
   1385c:	ldr	lr, [pc, #100]	; 138c8 <secure_getenv@@Base+0x52c>
   13860:	ldr	r2, [sp, #16]
   13864:	ldr	r4, [r0, r4]
   13868:	mov	r3, ip
   1386c:	str	ip, [sp]
   13870:	ldr	ip, [r4]
   13874:	str	ip, [sp, #4]
   13878:	ldr	r0, [r0, lr]
   1387c:	ldr	r0, [r0]
   13880:	bl	113c4 <__vfprintf_chk@plt>
   13884:	ldr	r3, [pc, #64]	; 138cc <secure_getenv@@Base+0x530>
   13888:	add	r3, pc, r3
   1388c:	ldrb	r3, [r3]
   13890:	cmp	r3, #0
   13894:	bne	138b8 <secure_getenv@@Base+0x51c>
   13898:	ldr	r2, [sp, #4]
   1389c:	ldr	r3, [r4]
   138a0:	cmp	r2, r3
   138a4:	bne	138bc <secure_getenv@@Base+0x520>
   138a8:	add	sp, sp, #8
   138ac:	pop	{r4, lr}
   138b0:	add	sp, sp, #16
   138b4:	bx	lr
   138b8:	bl	11538 <abort@plt>
   138bc:	bl	11310 <__stack_chk_fail@plt>
   138c0:	andeq	r2, r1, ip, lsr #15
   138c4:	andeq	r0, r0, r4, lsl r1
   138c8:	andeq	r0, r0, ip, lsl r1
   138cc:			; <UNDEFINED> instruction: 0x000128be
   138d0:	ldr	r0, [pc, #4]	; 138dc <secure_getenv@@Base+0x540>
   138d4:	add	r0, pc, r0
   138d8:	bx	lr
   138dc:	andeq	r2, r1, r4, ror r8
   138e0:	ldr	r3, [pc, #72]	; 13930 <secure_getenv@@Base+0x594>
   138e4:	ldr	r2, [pc, #72]	; 13934 <secure_getenv@@Base+0x598>
   138e8:	add	r3, pc, r3
   138ec:	push	{r4, r5, r6, lr}
   138f0:	mov	r4, r1
   138f4:	ldr	r3, [r3, r2]
   138f8:	mov	r5, r0
   138fc:	ldr	r3, [r3]
   13900:	blx	r3
   13904:	movw	r3, #511	; 0x1ff
   13908:	cmp	r4, r3
   1390c:	movcs	r4, r3
   13910:	subs	r6, r0, #0
   13914:	popeq	{r4, r5, r6, pc}
   13918:	mov	r1, r5
   1391c:	mov	r2, r4
   13920:	bl	112e0 <memcpy@plt>
   13924:	mov	r3, #0
   13928:	strb	r3, [r6, r4]
   1392c:	pop	{r4, r5, r6, pc}
   13930:	andeq	r2, r1, r0, lsl r7
   13934:	andeq	r0, r0, r8, lsr #2
   13938:	push	{r0, r1, r2, r3}
   1393c:	movw	r1, #511	; 0x1ff
   13940:	push	{r4, r5, r6, r7, lr}
   13944:	sub	sp, sp, #532	; 0x214
   13948:	ldr	r5, [pc, #208]	; 13a20 <secure_getenv@@Base+0x684>
   1394c:	add	ip, sp, #556	; 0x22c
   13950:	ldr	r3, [pc, #204]	; 13a24 <secure_getenv@@Base+0x688>
   13954:	add	r4, sp, #12
   13958:	add	r5, pc, r5
   1395c:	ldr	lr, [sp, #552]	; 0x228
   13960:	mov	r2, #1
   13964:	mov	r0, r4
   13968:	ldr	r6, [r5, r3]
   1396c:	mov	r3, #512	; 0x200
   13970:	str	lr, [sp]
   13974:	movw	r7, #511	; 0x1ff
   13978:	str	ip, [sp, #4]
   1397c:	ldr	lr, [r6]
   13980:	str	ip, [sp, #8]
   13984:	str	lr, [sp, #524]	; 0x20c
   13988:	bl	112d4 <__vsnprintf_chk@plt>
   1398c:	ldr	r2, [pc, #148]	; 13a28 <secure_getenv@@Base+0x68c>
   13990:	add	r1, sp, #528	; 0x210
   13994:	mov	r3, #0
   13998:	add	r2, pc, r2
   1399c:	ldrb	r2, [r2]
   139a0:	cmp	r0, r7
   139a4:	movcc	r7, r0
   139a8:	cmp	r2, r3
   139ac:	add	r2, r1, r7
   139b0:	strb	r3, [r2, #-516]	; 0xfffffdfc
   139b4:	bne	139f8 <secure_getenv@@Base+0x65c>
   139b8:	ldr	r1, [pc, #108]	; 13a2c <secure_getenv@@Base+0x690>
   139bc:	mov	r0, #2
   139c0:	mov	r2, r4
   139c4:	add	r1, pc, r1
   139c8:	bl	13778 <secure_getenv@@Base+0x3dc>
   139cc:	mov	r0, r4
   139d0:	mov	r1, r7
   139d4:	bl	138e0 <secure_getenv@@Base+0x544>
   139d8:	ldr	r2, [sp, #524]	; 0x20c
   139dc:	ldr	r3, [r6]
   139e0:	cmp	r2, r3
   139e4:	bne	13a1c <secure_getenv@@Base+0x680>
   139e8:	add	sp, sp, #532	; 0x214
   139ec:	pop	{r4, r5, r6, r7, lr}
   139f0:	add	sp, sp, #16
   139f4:	bx	lr
   139f8:	ldr	r0, [pc, #48]	; 13a30 <secure_getenv@@Base+0x694>
   139fc:	mov	r1, #1
   13a00:	ldr	r2, [pc, #44]	; 13a34 <secure_getenv@@Base+0x698>
   13a04:	mov	r3, r4
   13a08:	ldr	r0, [r5, r0]
   13a0c:	add	r2, pc, r2
   13a10:	ldr	r0, [r0]
   13a14:	bl	114a8 <__fprintf_chk@plt>
   13a18:	b	139cc <secure_getenv@@Base+0x630>
   13a1c:	bl	11310 <__stack_chk_fail@plt>
   13a20:	andeq	r2, r1, r0, lsr #13
   13a24:	andeq	r0, r0, r4, lsl r1
   13a28:	muleq	r1, r8, r7
   13a2c:	andeq	r1, r0, r4, asr #18
   13a30:	andeq	r0, r0, ip, lsl r1
   13a34:	andeq	r1, r0, ip, ror #17
   13a38:	push	{r1, r2, r3}
   13a3c:	movw	r1, #511	; 0x1ff
   13a40:	push	{r4, r5, r6, r7, r8, lr}
   13a44:	sub	sp, sp, #1040	; 0x410
   13a48:	ldr	lr, [pc, #196]	; 13b14 <secure_getenv@@Base+0x778>
   13a4c:	sub	sp, sp, #4
   13a50:	ldr	r2, [pc, #192]	; 13b18 <secure_getenv@@Base+0x77c>
   13a54:	add	ip, sp, #1072	; 0x430
   13a58:	add	lr, pc, lr
   13a5c:	ldr	r3, [sp, #1068]	; 0x42c
   13a60:	add	r7, sp, #12
   13a64:	mov	r8, r0
   13a68:	ldr	r5, [lr, r2]
   13a6c:	mov	r2, #1
   13a70:	str	r3, [sp]
   13a74:	mov	r0, r7
   13a78:	str	ip, [sp, #4]
   13a7c:	mov	r3, #512	; 0x200
   13a80:	ldr	r4, [r5]
   13a84:	mov	r6, #0
   13a88:	str	ip, [sp, #8]
   13a8c:	str	r4, [sp, #1036]	; 0x40c
   13a90:	bl	112d4 <__vsnprintf_chk@plt>
   13a94:	add	r4, sp, #524	; 0x20c
   13a98:	add	ip, sp, #1040	; 0x410
   13a9c:	movw	r3, #511	; 0x1ff
   13aa0:	ldr	r1, [pc, #116]	; 13b1c <secure_getenv@@Base+0x780>
   13aa4:	mov	r2, #512	; 0x200
   13aa8:	add	r1, pc, r1
   13aac:	cmp	r0, r3
   13ab0:	movcc	r3, r0
   13ab4:	mov	r0, r4
   13ab8:	add	r3, ip, r3
   13abc:	strb	r6, [r3, #-1028]	; 0xfffffbfc
   13ac0:	bl	11484 <strncpy@plt>
   13ac4:	mov	r1, r4
   13ac8:	mov	r2, #512	; 0x200
   13acc:	mov	r0, r8
   13ad0:	bl	114d8 <__xpg_strerror_r@plt>
   13ad4:	ldr	r0, [pc, #68]	; 13b20 <secure_getenv@@Base+0x784>
   13ad8:	mov	r2, r4
   13adc:	mov	r1, r7
   13ae0:	add	r0, pc, r0
   13ae4:	strb	r6, [sp, #1035]	; 0x40b
   13ae8:	bl	13938 <secure_getenv@@Base+0x59c>
   13aec:	ldr	r2, [sp, #1036]	; 0x40c
   13af0:	ldr	r3, [r5]
   13af4:	cmp	r2, r3
   13af8:	bne	13b10 <secure_getenv@@Base+0x774>
   13afc:	add	sp, sp, #1040	; 0x410
   13b00:	add	sp, sp, #4
   13b04:	pop	{r4, r5, r6, r7, r8, lr}
   13b08:	add	sp, sp, #12
   13b0c:	bx	lr
   13b10:	bl	11310 <__stack_chk_fail@plt>
   13b14:	andeq	r2, r1, r0, lsr #11
   13b18:	andeq	r0, r0, r4, lsl r1
   13b1c:	andeq	r1, r0, ip, ror #16
   13b20:	andeq	r1, r0, r4, asr #16
   13b24:	ldr	r3, [pc, #12]	; 13b38 <secure_getenv@@Base+0x79c>
   13b28:	mov	r2, #0
   13b2c:	add	r3, pc, r3
   13b30:	strb	r2, [r3]
   13b34:	bx	lr
   13b38:	andeq	r2, r1, r4, lsl #12
   13b3c:	ldr	r3, [pc, #12]	; 13b50 <secure_getenv@@Base+0x7b4>
   13b40:	mov	r2, #1
   13b44:	add	r3, pc, r3
   13b48:	strb	r2, [r3]
   13b4c:	bx	lr
   13b50:	andeq	r2, r1, ip, ror #11
   13b54:	push	{r3, lr}
   13b58:	ldr	r3, [pc, #40]	; 13b88 <secure_getenv@@Base+0x7ec>
   13b5c:	ldr	r2, [pc, #40]	; 13b8c <secure_getenv@@Base+0x7f0>
   13b60:	add	r3, pc, r3
   13b64:	ldr	r3, [r3, r2]
   13b68:	ldr	r3, [r3]
   13b6c:	blx	r3
   13b70:	cmp	r0, #0
   13b74:	popeq	{r3, pc}
   13b78:	ldrb	r3, [r0]
   13b7c:	cmp	r3, #0
   13b80:	moveq	r0, #0
   13b84:	pop	{r3, pc}
   13b88:	muleq	r1, r8, r4
   13b8c:	andeq	r0, r0, r8, lsr #2
   13b90:	push	{r3, lr}
   13b94:	ldr	r3, [pc, #32]	; 13bbc <secure_getenv@@Base+0x820>
   13b98:	ldr	r2, [pc, #32]	; 13bc0 <secure_getenv@@Base+0x824>
   13b9c:	add	r3, pc, r3
   13ba0:	ldr	r3, [r3, r2]
   13ba4:	ldr	r3, [r3]
   13ba8:	blx	r3
   13bac:	cmp	r0, #0
   13bb0:	movne	r3, #0
   13bb4:	strbne	r3, [r0]
   13bb8:	pop	{r3, pc}
   13bbc:	andeq	r2, r1, ip, asr r4
   13bc0:	andeq	r0, r0, r8, lsr #2
   13bc4:	push	{r4, r5, r6, r7, r8, lr}
   13bc8:	subs	r5, r0, #0
   13bcc:	beq	13c90 <secure_getenv@@Base+0x8f4>
   13bd0:	bl	11424 <strlen@plt>
   13bd4:	add	r4, r5, r0
   13bd8:	cmp	r5, r4
   13bdc:	beq	13c6c <secure_getenv@@Base+0x8d0>
   13be0:	ldr	r6, [pc, #204]	; 13cb4 <secure_getenv@@Base+0x918>
   13be4:	add	r6, pc, r6
   13be8:	b	13bf8 <secure_getenv@@Base+0x85c>
   13bec:	sub	r4, r4, #1
   13bf0:	cmp	r5, r4
   13bf4:	beq	13c6c <secure_getenv@@Base+0x8d0>
   13bf8:	mov	r0, r6
   13bfc:	ldrb	r1, [r4, #-1]
   13c00:	bl	1143c <strchr@plt>
   13c04:	subs	r2, r0, #0
   13c08:	bne	13bec <secure_getenv@@Base+0x850>
   13c0c:	cmp	r5, r4
   13c10:	mov	r8, r4
   13c14:	moveq	r1, r2
   13c18:	beq	13c70 <secure_getenv@@Base+0x8d4>
   13c1c:	ldr	r6, [pc, #148]	; 13cb8 <secure_getenv@@Base+0x91c>
   13c20:	add	r7, r5, #1
   13c24:	mov	r3, r4
   13c28:	add	r6, pc, r6
   13c2c:	b	13c48 <secure_getenv@@Base+0x8ac>
   13c30:	cmp	r3, r7
   13c34:	beq	13c7c <secure_getenv@@Base+0x8e0>
   13c38:	ldrb	r1, [r3, #-2]
   13c3c:	bl	1143c <strchr@plt>
   13c40:	mov	r3, r5
   13c44:	mov	r2, r0
   13c48:	cmp	r2, #0
   13c4c:	mov	r0, r6
   13c50:	mov	r4, r3
   13c54:	sub	r5, r3, #1
   13c58:	beq	13c30 <secure_getenv@@Base+0x894>
   13c5c:	rsb	r1, r3, r8
   13c60:	mov	r0, r4
   13c64:	pop	{r4, r5, r6, r7, r8, lr}
   13c68:	b	1321c <strndup@@Base>
   13c6c:	mov	r1, #0
   13c70:	mov	r0, r4
   13c74:	pop	{r4, r5, r6, r7, r8, lr}
   13c78:	b	1321c <strndup@@Base>
   13c7c:	mov	r4, r5
   13c80:	rsb	r1, r5, r8
   13c84:	mov	r0, r4
   13c88:	pop	{r4, r5, r6, r7, r8, lr}
   13c8c:	b	1321c <strndup@@Base>
   13c90:	ldr	r0, [pc, #36]	; 13cbc <secure_getenv@@Base+0x920>
   13c94:	ldr	r1, [pc, #36]	; 13cc0 <secure_getenv@@Base+0x924>
   13c98:	ldr	r2, [pc, #36]	; 13cc4 <secure_getenv@@Base+0x928>
   13c9c:	add	r0, pc, r0
   13ca0:	add	r1, pc, r1
   13ca4:	add	r2, pc, r2
   13ca8:	bl	1383c <secure_getenv@@Base+0x4a0>
   13cac:	mov	r0, r5
   13cb0:	pop	{r4, r5, r6, r7, r8, pc}
   13cb4:	ldrdeq	r1, [r0], -ip
   13cb8:	muleq	r0, r8, r7
   13cbc:	andeq	r1, r0, ip, lsl #2
   13cc0:	andeq	r1, r0, ip, ror #3
   13cc4:	andeq	r1, r0, r8, lsl #13
   13cc8:	push	{r4, lr}
   13ccc:	subs	r4, r0, #0
   13cd0:	beq	13ce8 <secure_getenv@@Base+0x94c>
   13cd4:	ldrb	r0, [r4]
   13cd8:	subs	r3, r0, #47	; 0x2f
   13cdc:	rsbs	r0, r3, #0
   13ce0:	adcs	r0, r0, r3
   13ce4:	pop	{r4, pc}
   13ce8:	ldr	r2, [pc, #32]	; 13d10 <secure_getenv@@Base+0x974>
   13cec:	ldr	r0, [pc, #32]	; 13d14 <secure_getenv@@Base+0x978>
   13cf0:	ldr	r1, [pc, #32]	; 13d18 <secure_getenv@@Base+0x97c>
   13cf4:	add	r2, pc, r2
   13cf8:	add	r0, pc, r0
   13cfc:	add	r2, r2, #16
   13d00:	add	r1, pc, r1
   13d04:	bl	1383c <secure_getenv@@Base+0x4a0>
   13d08:	mov	r0, r4
   13d0c:	pop	{r4, pc}
   13d10:	andeq	r1, r0, r8, lsr r6
   13d14:	strheq	r1, [r0], -r0
   13d18:	andeq	r1, r0, ip, lsl #3
   13d1c:	push	{r0, r1, r2, r3}
   13d20:	ldr	r3, [pc, #632]	; 13fa0 <secure_getenv@@Base+0xc04>
   13d24:	ldr	r2, [pc, #632]	; 13fa4 <secure_getenv@@Base+0xc08>
   13d28:	add	r3, pc, r3
   13d2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13d30:	sub	sp, sp, #8
   13d34:	ldr	r7, [r3, r2]
   13d38:	ldr	r4, [sp, #40]	; 0x28
   13d3c:	ldr	r3, [r7]
   13d40:	cmp	r4, #0
   13d44:	addne	r6, sp, #44	; 0x2c
   13d48:	strne	r6, [sp]
   13d4c:	movne	sl, r4
   13d50:	movne	r5, #1
   13d54:	str	r3, [sp, #4]
   13d58:	bne	13d64 <secure_getenv@@Base+0x9c8>
   13d5c:	b	13f04 <secure_getenv@@Base+0xb68>
   13d60:	mov	r5, r8
   13d64:	mov	r0, sl
   13d68:	bl	11424 <strlen@plt>
   13d6c:	add	r0, r5, r0
   13d70:	add	r8, r0, #1
   13d74:	cmp	r8, r5
   13d78:	bcc	13edc <secure_getenv@@Base+0xb40>
   13d7c:	ldr	r3, [sp]
   13d80:	add	r2, r3, #4
   13d84:	str	r2, [sp]
   13d88:	ldr	sl, [r3]
   13d8c:	cmp	sl, #0
   13d90:	bne	13d60 <secure_getenv@@Base+0x9c4>
   13d94:	add	r0, r0, #2
   13d98:	bl	113a0 <malloc@plt>
   13d9c:	subs	r5, r0, #0
   13da0:	beq	13f2c <secure_getenv@@Base+0xb90>
   13da4:	mov	r0, r4
   13da8:	str	r6, [sp]
   13dac:	mov	r6, #47	; 0x2f
   13db0:	bl	11424 <strlen@plt>
   13db4:	rsbs	ip, sl, #1
   13db8:	movcc	ip, #0
   13dbc:	cmp	ip, r0
   13dc0:	bcs	13ec4 <secure_getenv@@Base+0xb28>
   13dc4:	sub	r2, r0, #1
   13dc8:	ldrb	r3, [r4, r2]
   13dcc:	cmp	r3, #47	; 0x2f
   13dd0:	cmpne	r3, #0
   13dd4:	beq	13df4 <secure_getenv@@Base+0xa58>
   13dd8:	b	13ec4 <secure_getenv@@Base+0xb28>
   13ddc:	sub	r1, r2, #1
   13de0:	ldrb	r3, [r4, r1]
   13de4:	cmp	r3, #0
   13de8:	cmpne	r3, #47	; 0x2f
   13dec:	bne	13dfc <secure_getenv@@Base+0xa60>
   13df0:	mov	r2, r1
   13df4:	cmp	ip, r2
   13df8:	bcc	13ddc <secure_getenv@@Base+0xa40>
   13dfc:	cmp	sl, #0
   13e00:	beq	13e14 <secure_getenv@@Base+0xa78>
   13e04:	cmp	r2, #0
   13e08:	beq	13ecc <secure_getenv@@Base+0xb30>
   13e0c:	strb	r6, [r5, sl]
   13e10:	add	sl, sl, #1
   13e14:	add	r9, sl, r2
   13e18:	cmp	r9, r8
   13e1c:	bcs	13f54 <secure_getenv@@Base+0xbb8>
   13e20:	mov	r1, r4
   13e24:	add	r0, r5, sl
   13e28:	bl	112e0 <memcpy@plt>
   13e2c:	ldr	r3, [sp]
   13e30:	add	r2, r3, #4
   13e34:	str	r2, [sp]
   13e38:	ldr	r4, [r3]
   13e3c:	cmp	r4, #0
   13e40:	beq	13e74 <secure_getenv@@Base+0xad8>
   13e44:	ldrb	r3, [r4]
   13e48:	cmp	r3, #47	; 0x2f
   13e4c:	bne	13ea8 <secure_getenv@@Base+0xb0c>
   13e50:	add	r3, r4, #1
   13e54:	b	13e68 <secure_getenv@@Base+0xacc>
   13e58:	ldrb	r2, [r3]
   13e5c:	add	r3, r3, #1
   13e60:	cmp	r2, #47	; 0x2f
   13e64:	bne	13ea8 <secure_getenv@@Base+0xb0c>
   13e68:	cmp	r3, #0
   13e6c:	mov	r4, r3
   13e70:	bne	13e58 <secure_getenv@@Base+0xabc>
   13e74:	cmp	r9, r8
   13e78:	movcc	r3, #0
   13e7c:	movcc	r0, r5
   13e80:	strbcc	r3, [r5, r9]
   13e84:	bcs	13f7c <secure_getenv@@Base+0xbe0>
   13e88:	ldr	r2, [sp, #4]
   13e8c:	ldr	r3, [r7]
   13e90:	cmp	r2, r3
   13e94:	bne	13f78 <secure_getenv@@Base+0xbdc>
   13e98:	add	sp, sp, #8
   13e9c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ea0:	add	sp, sp, #16
   13ea4:	bx	lr
   13ea8:	mov	r0, r4
   13eac:	mov	sl, r9
   13eb0:	bl	11424 <strlen@plt>
   13eb4:	rsbs	ip, sl, #1
   13eb8:	movcc	ip, #0
   13ebc:	cmp	ip, r0
   13ec0:	bcc	13dc4 <secure_getenv@@Base+0xa28>
   13ec4:	mov	r2, r0
   13ec8:	b	13dfc <secure_getenv@@Base+0xa60>
   13ecc:	cmp	r4, #0
   13ed0:	bne	13db4 <secure_getenv@@Base+0xa18>
   13ed4:	mov	r9, sl
   13ed8:	b	13e74 <secure_getenv@@Base+0xad8>
   13edc:	ldr	r2, [pc, #196]	; 13fa8 <secure_getenv@@Base+0xc0c>
   13ee0:	ldr	r0, [pc, #196]	; 13fac <secure_getenv@@Base+0xc10>
   13ee4:	ldr	r1, [pc, #196]	; 13fb0 <secure_getenv@@Base+0xc14>
   13ee8:	add	r2, pc, r2
   13eec:	add	r0, pc, r0
   13ef0:	add	r2, r2, #36	; 0x24
   13ef4:	add	r1, pc, r1
   13ef8:	bl	1383c <secure_getenv@@Base+0x4a0>
   13efc:	mov	r0, #0
   13f00:	b	13e88 <secure_getenv@@Base+0xaec>
   13f04:	ldr	r2, [pc, #168]	; 13fb4 <secure_getenv@@Base+0xc18>
   13f08:	ldr	r0, [pc, #168]	; 13fb8 <secure_getenv@@Base+0xc1c>
   13f0c:	ldr	r1, [pc, #168]	; 13fbc <secure_getenv@@Base+0xc20>
   13f10:	add	r2, pc, r2
   13f14:	add	r0, pc, r0
   13f18:	add	r2, r2, #36	; 0x24
   13f1c:	add	r1, pc, r1
   13f20:	bl	1383c <secure_getenv@@Base+0x4a0>
   13f24:	mov	r0, r4
   13f28:	b	13e88 <secure_getenv@@Base+0xaec>
   13f2c:	ldr	r2, [pc, #140]	; 13fc0 <secure_getenv@@Base+0xc24>
   13f30:	ldr	r0, [pc, #140]	; 13fc4 <secure_getenv@@Base+0xc28>
   13f34:	ldr	r1, [pc, #140]	; 13fc8 <secure_getenv@@Base+0xc2c>
   13f38:	add	r2, pc, r2
   13f3c:	add	r0, pc, r0
   13f40:	add	r2, r2, #36	; 0x24
   13f44:	add	r1, pc, r1
   13f48:	bl	1383c <secure_getenv@@Base+0x4a0>
   13f4c:	mov	r0, sl
   13f50:	b	13e88 <secure_getenv@@Base+0xaec>
   13f54:	ldr	r3, [pc, #112]	; 13fcc <secure_getenv@@Base+0xc30>
   13f58:	mov	r2, #246	; 0xf6
   13f5c:	ldr	r0, [pc, #108]	; 13fd0 <secure_getenv@@Base+0xc34>
   13f60:	ldr	r1, [pc, #108]	; 13fd4 <secure_getenv@@Base+0xc38>
   13f64:	add	r3, pc, r3
   13f68:	add	r0, pc, r0
   13f6c:	add	r3, r3, #52	; 0x34
   13f70:	add	r1, pc, r1
   13f74:	bl	11574 <__assert_fail@plt>
   13f78:	bl	11310 <__stack_chk_fail@plt>
   13f7c:	ldr	r3, [pc, #84]	; 13fd8 <secure_getenv@@Base+0xc3c>
   13f80:	movw	r2, #258	; 0x102
   13f84:	ldr	r0, [pc, #80]	; 13fdc <secure_getenv@@Base+0xc40>
   13f88:	ldr	r1, [pc, #80]	; 13fe0 <secure_getenv@@Base+0xc44>
   13f8c:	add	r3, pc, r3
   13f90:	add	r0, pc, r0
   13f94:	add	r3, r3, #52	; 0x34
   13f98:	add	r1, pc, r1
   13f9c:	bl	11574 <__assert_fail@plt>
   13fa0:	ldrdeq	r2, [r1], -r0
   13fa4:	andeq	r0, r0, r4, lsl r1
   13fa8:	andeq	r1, r0, r4, asr #8
   13fac:			; <UNDEFINED> instruction: 0x00000ebc
   13fb0:	ldrdeq	r1, [r0], -r0
   13fb4:	andeq	r1, r0, ip, lsl r4
   13fb8:	muleq	r0, r4, lr
   13fbc:	andeq	r0, r0, r0, ror pc
   13fc0:	strdeq	r1, [r0], -r4
   13fc4:	andeq	r0, r0, ip, ror #28
   13fc8:	muleq	r0, r0, r4
   13fcc:	andeq	r1, r0, r8, asr #7
   13fd0:	andeq	r1, r0, ip, ror r4
   13fd4:	andeq	r1, r0, r4, lsl #9
   13fd8:	andeq	r1, r0, r0, lsr #7
   13fdc:	andeq	r1, r0, r4, ror r4
   13fe0:	andeq	r1, r0, ip, asr r4
   13fe4:	ldr	r3, [pc, #444]	; 141a8 <secure_getenv@@Base+0xe0c>
   13fe8:	ldr	r2, [pc, #444]	; 141ac <secure_getenv@@Base+0xe10>
   13fec:	add	r3, pc, r3
   13ff0:	push	{r4, r5, r6, r7, lr}
   13ff4:	sub	sp, sp, #1072	; 0x430
   13ff8:	ldr	r5, [r3, r2]
   13ffc:	sub	sp, sp, #4
   14000:	mov	r4, r0
   14004:	mov	r0, #23
   14008:	ldr	r3, [r5]
   1400c:	str	r3, [sp, #1068]	; 0x42c
   14010:	bl	114b4 <getauxval@plt>
   14014:	cmp	r0, #0
   14018:	bne	14188 <secure_getenv@@Base+0xdec>
   1401c:	ldrb	r3, [r4]
   14020:	cmp	r3, #0
   14024:	beq	1419c <secure_getenv@@Base+0xe00>
   14028:	cmp	r3, #47	; 0x2f
   1402c:	addeq	r3, r4, #1
   14030:	beq	14040 <secure_getenv@@Base+0xca4>
   14034:	b	140e4 <secure_getenv@@Base+0xd48>
   14038:	cmp	r2, #47	; 0x2f
   1403c:	bne	140e4 <secure_getenv@@Base+0xd48>
   14040:	mov	r4, r3
   14044:	ldrb	r2, [r3], #1
   14048:	cmp	r2, #0
   1404c:	bne	14038 <secure_getenv@@Base+0xc9c>
   14050:	mov	r4, r2
   14054:	ldr	r0, [pc, #340]	; 141b0 <secure_getenv@@Base+0xe14>
   14058:	add	r0, pc, r0
   1405c:	bl	1137c <getenv@plt>
   14060:	subs	r3, r0, #0
   14064:	beq	14074 <secure_getenv@@Base+0xcd8>
   14068:	ldrb	r3, [r3]
   1406c:	cmp	r3, #0
   14070:	bne	14174 <secure_getenv@@Base+0xdd8>
   14074:	mov	r6, #0
   14078:	str	r6, [sp, #12]
   1407c:	bl	11454 <__errno_location@plt>
   14080:	str	r6, [r0]
   14084:	mov	r7, r0
   14088:	bl	112bc <getuid@plt>
   1408c:	add	r1, sp, #16
   14090:	sub	r3, r1, #4
   14094:	add	r2, sp, #44	; 0x2c
   14098:	str	r3, [sp]
   1409c:	mov	r3, #1024	; 0x400
   140a0:	bl	1128c <getpwuid_r@plt>
   140a4:	ldr	r3, [sp, #12]
   140a8:	cmp	r3, r6
   140ac:	beq	14144 <secure_getenv@@Base+0xda8>
   140b0:	ldr	r0, [r3, #20]
   140b4:	mov	r1, r4
   140b8:	mov	r2, r6
   140bc:	bl	13d1c <secure_getenv@@Base+0x980>
   140c0:	mov	r3, r0
   140c4:	ldr	r2, [sp, #1068]	; 0x42c
   140c8:	mov	r0, r3
   140cc:	ldr	r3, [r5]
   140d0:	cmp	r2, r3
   140d4:	bne	141a4 <secure_getenv@@Base+0xe08>
   140d8:	add	sp, sp, #1072	; 0x430
   140dc:	add	sp, sp, #4
   140e0:	pop	{r4, r5, r6, r7, pc}
   140e4:	ldr	r1, [pc, #200]	; 141b4 <secure_getenv@@Base+0xe18>
   140e8:	mov	r0, r4
   140ec:	mov	r2, #7
   140f0:	add	r1, pc, r1
   140f4:	bl	1152c <strncmp@plt>
   140f8:	subs	r6, r0, #0
   140fc:	bne	14054 <secure_getenv@@Base+0xcb8>
   14100:	ldrb	r3, [r4, #7]
   14104:	cmp	r3, #0
   14108:	cmpne	r3, #47	; 0x2f
   1410c:	bne	14054 <secure_getenv@@Base+0xcb8>
   14110:	ldr	r0, [pc, #160]	; 141b8 <secure_getenv@@Base+0xe1c>
   14114:	add	r0, pc, r0
   14118:	bl	1137c <getenv@plt>
   1411c:	subs	r3, r0, #0
   14120:	beq	14054 <secure_getenv@@Base+0xcb8>
   14124:	ldrb	r3, [r3]
   14128:	cmp	r3, #0
   1412c:	beq	14054 <secure_getenv@@Base+0xcb8>
   14130:	add	r1, r4, #8
   14134:	mov	r2, r6
   14138:	bl	13d1c <secure_getenv@@Base+0x980>
   1413c:	mov	r3, r0
   14140:	b	140c4 <secure_getenv@@Base+0xd28>
   14144:	cmp	r0, r6
   14148:	ldrne	r4, [r7]
   1414c:	moveq	r4, #3
   14150:	bl	112bc <getuid@plt>
   14154:	ldr	r1, [pc, #96]	; 141bc <secure_getenv@@Base+0xe20>
   14158:	add	r1, pc, r1
   1415c:	mov	r2, r0
   14160:	mov	r0, r4
   14164:	bl	13a38 <secure_getenv@@Base+0x69c>
   14168:	str	r4, [r7]
   1416c:	mov	r3, #0
   14170:	b	140c4 <secure_getenv@@Base+0xd28>
   14174:	mov	r1, r4
   14178:	mov	r2, #0
   1417c:	bl	13d1c <secure_getenv@@Base+0x980>
   14180:	mov	r3, r0
   14184:	b	140c4 <secure_getenv@@Base+0xd28>
   14188:	bl	11454 <__errno_location@plt>
   1418c:	mov	r2, #1
   14190:	mov	r3, #0
   14194:	str	r2, [r0]
   14198:	b	140c4 <secure_getenv@@Base+0xd28>
   1419c:	mov	r4, r3
   141a0:	b	14054 <secure_getenv@@Base+0xcb8>
   141a4:	bl	11310 <__stack_chk_fail@plt>
   141a8:	andeq	r2, r1, ip
   141ac:	andeq	r0, r0, r4, lsl r1
   141b0:	andeq	r1, r0, r8, asr #7
   141b4:	andeq	r1, r0, r4, ror #6
   141b8:	strdeq	r1, [r0], -ip
   141bc:	ldrdeq	r1, [r0], -r0
   141c0:	push	{r4, lr}
   141c4:	subs	r4, r0, #0
   141c8:	beq	14200 <secure_getenv@@Base+0xe64>
   141cc:	ldrb	r3, [r4]
   141d0:	cmp	r3, #126	; 0x7e
   141d4:	beq	141e4 <secure_getenv@@Base+0xe48>
   141d8:	mov	r0, r4
   141dc:	pop	{r4, lr}
   141e0:	b	11460 <__strdup@plt>
   141e4:	ldrb	r3, [r4, #1]
   141e8:	cmp	r3, #0
   141ec:	cmpne	r3, #47	; 0x2f
   141f0:	bne	141d8 <secure_getenv@@Base+0xe3c>
   141f4:	add	r0, r4, #1
   141f8:	pop	{r4, lr}
   141fc:	b	13fe4 <secure_getenv@@Base+0xc48>
   14200:	ldr	r2, [pc, #32]	; 14228 <secure_getenv@@Base+0xe8c>
   14204:	ldr	r0, [pc, #32]	; 1422c <secure_getenv@@Base+0xe90>
   14208:	ldr	r1, [pc, #32]	; 14230 <secure_getenv@@Base+0xe94>
   1420c:	add	r2, pc, r2
   14210:	add	r0, pc, r0
   14214:	add	r2, r2, #68	; 0x44
   14218:	add	r1, pc, r1
   1421c:	bl	1383c <secure_getenv@@Base+0x4a0>
   14220:	mov	r0, r4
   14224:	pop	{r4, pc}
   14228:	andeq	r1, r0, r0, lsr #2
   1422c:	muleq	r0, r8, fp
   14230:	andeq	r0, r0, r4, ror ip
   14234:	push	{r4, lr}
   14238:	subs	r4, r0, #0
   1423c:	beq	14340 <secure_getenv@@Base+0xfa4>
   14240:	bl	11424 <strlen@plt>
   14244:	add	r1, r4, r0
   14248:	cmp	r4, r1
   1424c:	beq	14284 <secure_getenv@@Base+0xee8>
   14250:	ldrb	r3, [r4, r0]
   14254:	cmp	r3, #0
   14258:	cmpne	r3, #47	; 0x2f
   1425c:	bne	1428c <secure_getenv@@Base+0xef0>
   14260:	sub	r3, r1, #1
   14264:	b	14278 <secure_getenv@@Base+0xedc>
   14268:	ldrb	r2, [r3], #-1
   1426c:	cmp	r2, #0
   14270:	cmpne	r2, #47	; 0x2f
   14274:	bne	1428c <secure_getenv@@Base+0xef0>
   14278:	cmp	r3, r4
   1427c:	mov	r1, r3
   14280:	bne	14268 <secure_getenv@@Base+0xecc>
   14284:	mov	r0, #0
   14288:	pop	{r4, pc}
   1428c:	sub	r3, r1, #1
   14290:	b	142a4 <secure_getenv@@Base+0xf08>
   14294:	ldrb	r1, [r3], #-1
   14298:	cmp	r1, #0
   1429c:	cmpne	r1, #47	; 0x2f
   142a0:	beq	142d8 <secure_getenv@@Base+0xf3c>
   142a4:	cmp	r3, r4
   142a8:	mov	r2, r3
   142ac:	bne	14294 <secure_getenv@@Base+0xef8>
   142b0:	mov	r0, #2
   142b4:	bl	113a0 <malloc@plt>
   142b8:	subs	r3, r0, #0
   142bc:	movne	r2, #47	; 0x2f
   142c0:	movne	r0, r3
   142c4:	strhne	r2, [r3]
   142c8:	beq	14318 <secure_getenv@@Base+0xf7c>
   142cc:	cmp	r0, #0
   142d0:	beq	14318 <secure_getenv@@Base+0xf7c>
   142d4:	pop	{r4, pc}
   142d8:	sub	r2, r2, #1
   142dc:	b	142f4 <secure_getenv@@Base+0xf58>
   142e0:	ldrb	r1, [r3], #-1
   142e4:	cmp	r1, #0
   142e8:	cmpne	r1, #47	; 0x2f
   142ec:	bne	14304 <secure_getenv@@Base+0xf68>
   142f0:	mov	r2, r3
   142f4:	cmp	r2, r4
   142f8:	mov	r3, r2
   142fc:	bne	142e0 <secure_getenv@@Base+0xf44>
   14300:	b	142b0 <secure_getenv@@Base+0xf14>
   14304:	rsb	r1, r4, r2
   14308:	mov	r0, r4
   1430c:	add	r1, r1, #1
   14310:	bl	1321c <strndup@@Base>
   14314:	b	142cc <secure_getenv@@Base+0xf30>
   14318:	ldr	r2, [pc, #72]	; 14368 <secure_getenv@@Base+0xfcc>
   1431c:	ldr	r0, [pc, #72]	; 1436c <secure_getenv@@Base+0xfd0>
   14320:	ldr	r1, [pc, #72]	; 14370 <secure_getenv@@Base+0xfd4>
   14324:	add	r2, pc, r2
   14328:	add	r0, pc, r0
   1432c:	add	r2, r2, #84	; 0x54
   14330:	add	r1, pc, r1
   14334:	bl	1383c <secure_getenv@@Base+0x4a0>
   14338:	mov	r0, #0
   1433c:	pop	{r4, pc}
   14340:	ldr	r2, [pc, #44]	; 14374 <secure_getenv@@Base+0xfd8>
   14344:	ldr	r0, [pc, #44]	; 14378 <secure_getenv@@Base+0xfdc>
   14348:	ldr	r1, [pc, #44]	; 1437c <secure_getenv@@Base+0xfe0>
   1434c:	add	r2, pc, r2
   14350:	add	r0, pc, r0
   14354:	add	r2, r2, #84	; 0x54
   14358:	add	r1, pc, r1
   1435c:	bl	1383c <secure_getenv@@Base+0x4a0>
   14360:	mov	r0, r4
   14364:	pop	{r4, pc}
   14368:	andeq	r1, r0, r8
   1436c:	andeq	r0, r0, r0, lsl #21
   14370:	andeq	r1, r0, ip, lsr #2
   14374:	andeq	r0, r0, r0, ror #31
   14378:	andeq	r0, r0, r8, asr sl
   1437c:	andeq	r0, r0, r4, lsr fp
   14380:	push	{r3, r4, r5, r6, r7, lr}
   14384:	subs	r7, r0, #0
   14388:	mov	r4, r1
   1438c:	beq	143ec <secure_getenv@@Base+0x1050>
   14390:	cmp	r1, #0
   14394:	beq	14414 <secure_getenv@@Base+0x1078>
   14398:	bl	11424 <strlen@plt>
   1439c:	mov	r6, r0
   143a0:	mov	r0, r4
   143a4:	bl	11424 <strlen@plt>
   143a8:	cmp	r6, r0
   143ac:	mov	r5, r0
   143b0:	ble	143e4 <secure_getenv@@Base+0x1048>
   143b4:	mov	r1, r4
   143b8:	mov	r0, r7
   143bc:	mov	r2, r5
   143c0:	bl	1152c <strncmp@plt>
   143c4:	cmp	r0, #0
   143c8:	bne	143e4 <secure_getenv@@Base+0x1048>
   143cc:	ldrb	r0, [r7, r5]
   143d0:	cmp	r0, #0
   143d4:	cmpne	r0, #47	; 0x2f
   143d8:	movne	r0, #0
   143dc:	moveq	r0, #1
   143e0:	pop	{r3, r4, r5, r6, r7, pc}
   143e4:	mov	r0, #0
   143e8:	pop	{r3, r4, r5, r6, r7, pc}
   143ec:	ldr	r2, [pc, #72]	; 1443c <secure_getenv@@Base+0x10a0>
   143f0:	ldr	r0, [pc, #72]	; 14440 <secure_getenv@@Base+0x10a4>
   143f4:	ldr	r1, [pc, #72]	; 14444 <secure_getenv@@Base+0x10a8>
   143f8:	add	r2, pc, r2
   143fc:	add	r0, pc, r0
   14400:	add	r2, r2, #100	; 0x64
   14404:	add	r1, pc, r1
   14408:	bl	1383c <secure_getenv@@Base+0x4a0>
   1440c:	mov	r0, r7
   14410:	pop	{r3, r4, r5, r6, r7, pc}
   14414:	ldr	r2, [pc, #44]	; 14448 <secure_getenv@@Base+0x10ac>
   14418:	ldr	r0, [pc, #44]	; 1444c <secure_getenv@@Base+0x10b0>
   1441c:	ldr	r1, [pc, #44]	; 14450 <secure_getenv@@Base+0x10b4>
   14420:	add	r2, pc, r2
   14424:	add	r0, pc, r0
   14428:	add	r2, r2, #100	; 0x64
   1442c:	add	r1, pc, r1
   14430:	bl	1383c <secure_getenv@@Base+0x4a0>
   14434:	mov	r0, r4
   14438:	pop	{r3, r4, r5, r6, r7, pc}
   1443c:	andeq	r0, r0, r4, lsr pc
   14440:	andeq	r0, r0, ip, lsr #19
   14444:	andeq	r1, r0, r8, rrx
   14448:	andeq	r0, r0, ip, lsl #30
   1444c:	andeq	r0, r0, r4, lsl #19
   14450:	andeq	r1, r0, r0, asr r0
   14454:	cmp	r0, #0
   14458:	push	{r3, r4, r5, r6, r7, lr}
   1445c:	beq	144a4 <secure_getenv@@Base+0x1108>
   14460:	ldrb	r1, [r0]
   14464:	cmp	r1, #0
   14468:	popeq	{r3, r4, r5, r6, r7, pc}
   1446c:	ldr	r6, [pc, #84]	; 144c8 <secure_getenv@@Base+0x112c>
   14470:	add	r4, r0, #1
   14474:	mov	r5, r0
   14478:	mov	r7, #95	; 0x5f
   1447c:	add	r6, pc, r6
   14480:	mov	r0, r6
   14484:	bl	1143c <strchr@plt>
   14488:	cmp	r0, #0
   1448c:	strbeq	r7, [r5]
   14490:	mov	r5, r4
   14494:	ldrb	r1, [r4], #1
   14498:	cmp	r1, #0
   1449c:	bne	14480 <secure_getenv@@Base+0x10e4>
   144a0:	pop	{r3, r4, r5, r6, r7, pc}
   144a4:	ldr	r2, [pc, #32]	; 144cc <secure_getenv@@Base+0x1130>
   144a8:	ldr	r0, [pc, #32]	; 144d0 <secure_getenv@@Base+0x1134>
   144ac:	ldr	r1, [pc, #32]	; 144d4 <secure_getenv@@Base+0x1138>
   144b0:	add	r2, pc, r2
   144b4:	add	r0, pc, r0
   144b8:	add	r2, r2, #116	; 0x74
   144bc:	add	r1, pc, r1
   144c0:	pop	{r3, r4, r5, r6, r7, lr}
   144c4:	b	1383c <secure_getenv@@Base+0x4a0>
   144c8:	andeq	r1, r0, r0, lsr #32
   144cc:	andeq	r0, r0, ip, ror lr
   144d0:	strdeq	r0, [r0], -r4
   144d4:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   144d8:	ldr	r3, [pc, #268]	; 145ec <secure_getenv@@Base+0x1250>
   144dc:	ldr	r2, [pc, #268]	; 145f0 <secure_getenv@@Base+0x1254>
   144e0:	add	r3, pc, r3
   144e4:	push	{r4, r5, r6, r7, lr}
   144e8:	subs	r5, r0, #0
   144ec:	ldr	r6, [r3, r2]
   144f0:	sub	sp, sp, #36	; 0x24
   144f4:	ldr	r3, [r6]
   144f8:	str	r3, [sp, #28]
   144fc:	beq	145c0 <secure_getenv@@Base+0x1224>
   14500:	bl	11424 <strlen@plt>
   14504:	add	r4, sp, #4
   14508:	mov	r1, r0
   1450c:	mov	r0, r4
   14510:	bl	12bb0 <__assert_fail@plt+0x163c>
   14514:	subs	r7, r0, #0
   14518:	beq	14578 <secure_getenv@@Base+0x11dc>
   1451c:	mov	r0, r5
   14520:	bl	11424 <strlen@plt>
   14524:	ldr	r2, [pc, #200]	; 145f4 <secure_getenv@@Base+0x1258>
   14528:	mov	r3, r4
   1452c:	add	r2, pc, r2
   14530:	add	r1, r5, r0
   14534:	mov	r0, r5
   14538:	bl	1480c <secure_getenv@@Base+0x1470>
   1453c:	ldr	r1, [sp, #12]
   14540:	ands	r1, r1, #1
   14544:	bne	14598 <secure_getenv@@Base+0x11fc>
   14548:	mov	r0, r4
   1454c:	bl	12c7c <__assert_fail@plt+0x1708>
   14550:	mov	r5, r0
   14554:	mov	r0, r4
   14558:	bl	12c10 <__assert_fail@plt+0x169c>
   1455c:	mov	r0, r5
   14560:	ldr	r2, [sp, #28]
   14564:	ldr	r3, [r6]
   14568:	cmp	r2, r3
   1456c:	bne	145e8 <secure_getenv@@Base+0x124c>
   14570:	add	sp, sp, #36	; 0x24
   14574:	pop	{r4, r5, r6, r7, pc}
   14578:	ldr	r1, [pc, #120]	; 145f8 <secure_getenv@@Base+0x125c>
   1457c:	ldr	r0, [pc, #120]	; 145fc <secure_getenv@@Base+0x1260>
   14580:	add	r1, pc, r1
   14584:	add	r0, pc, r0
   14588:	add	r1, r1, #132	; 0x84
   1458c:	bl	1383c <secure_getenv@@Base+0x4a0>
   14590:	mov	r0, r7
   14594:	b	14560 <secure_getenv@@Base+0x11c4>
   14598:	ldr	r2, [pc, #96]	; 14600 <secure_getenv@@Base+0x1264>
   1459c:	ldr	r0, [pc, #96]	; 14604 <secure_getenv@@Base+0x1268>
   145a0:	ldr	r1, [pc, #96]	; 14608 <secure_getenv@@Base+0x126c>
   145a4:	add	r2, pc, r2
   145a8:	add	r0, pc, r0
   145ac:	add	r2, r2, #132	; 0x84
   145b0:	add	r1, pc, r1
   145b4:	bl	1383c <secure_getenv@@Base+0x4a0>
   145b8:	mov	r0, #0
   145bc:	b	14560 <secure_getenv@@Base+0x11c4>
   145c0:	ldr	r2, [pc, #68]	; 1460c <secure_getenv@@Base+0x1270>
   145c4:	ldr	r0, [pc, #68]	; 14610 <secure_getenv@@Base+0x1274>
   145c8:	ldr	r1, [pc, #68]	; 14614 <secure_getenv@@Base+0x1278>
   145cc:	add	r2, pc, r2
   145d0:	add	r0, pc, r0
   145d4:	add	r2, r2, #132	; 0x84
   145d8:	add	r1, pc, r1
   145dc:	bl	1383c <secure_getenv@@Base+0x4a0>
   145e0:	mov	r0, r5
   145e4:	b	14560 <secure_getenv@@Base+0x11c4>
   145e8:	bl	11310 <__stack_chk_fail@plt>
   145ec:	andeq	r1, r1, r8, lsl fp
   145f0:	andeq	r0, r0, r4, lsl r1
   145f4:			; <UNDEFINED> instruction: 0x00000fb4
   145f8:	andeq	r0, r0, ip, lsr #27
   145fc:	andeq	r0, r0, ip, asr #17
   14600:	andeq	r0, r0, r8, lsl #27
   14604:	andeq	r0, r0, r0, lsl #16
   14608:	andeq	r0, r0, r4, ror pc
   1460c:	andeq	r0, r0, r0, ror #26
   14610:	ldrdeq	r0, [r0], -r8
   14614:			; <UNDEFINED> instruction: 0x000008b4
   14618:	push	{r4, lr}
   1461c:	mov	r4, r0
   14620:	bl	11424 <strlen@plt>
   14624:	ldr	r2, [pc, #20]	; 14640 <secure_getenv@@Base+0x12a4>
   14628:	mov	r3, #0
   1462c:	add	r2, pc, r2
   14630:	add	r1, r4, r0
   14634:	mov	r0, r4
   14638:	pop	{r4, lr}
   1463c:	b	14644 <secure_getenv@@Base+0x12a8>
   14640:	andeq	r0, r0, r8, lsr #19
   14644:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14648:	cmp	r0, r1
   1464c:	sub	sp, sp, #12
   14650:	mov	r4, r0
   14654:	mov	r7, r1
   14658:	mov	r9, r2
   1465c:	str	r3, [sp, #4]
   14660:	bhi	147c4 <secure_getenv@@Base+0x1428>
   14664:	cmp	r2, #0
   14668:	beq	147a4 <secure_getenv@@Base+0x1408>
   1466c:	rsb	r0, r0, r1
   14670:	add	r0, r0, #1
   14674:	bl	113a0 <malloc@plt>
   14678:	subs	sl, r0, #0
   1467c:	beq	1477c <secure_getenv@@Base+0x13e0>
   14680:	cmp	r4, r7
   14684:	moveq	r6, sl
   14688:	beq	1473c <secure_getenv@@Base+0x13a0>
   1468c:	ldr	r8, [pc, #336]	; 147e4 <secure_getenv@@Base+0x1448>
   14690:	mov	r6, sl
   14694:	add	r8, pc, r8
   14698:	add	r8, r8, #32
   1469c:	b	146c8 <secure_getenv@@Base+0x132c>
   146a0:	mov	r0, r9
   146a4:	mov	r1, r5
   146a8:	bl	1143c <strchr@plt>
   146ac:	cmp	r0, #0
   146b0:	strbeq	r5, [r6]
   146b4:	addne	r4, r4, #1
   146b8:	addeq	r4, r4, #1
   146bc:	addeq	r6, r6, #1
   146c0:	cmp	r7, r4
   146c4:	beq	1473c <secure_getenv@@Base+0x13a0>
   146c8:	ldrb	r5, [r4]
   146cc:	cmp	r5, #37	; 0x25
   146d0:	bne	146a0 <secure_getenv@@Base+0x1304>
   146d4:	add	r3, r4, #1
   146d8:	rsb	r3, r3, r7
   146dc:	cmp	r3, #1
   146e0:	ble	14768 <secure_getenv@@Base+0x13cc>
   146e4:	bl	113d0 <__ctype_tolower_loc@plt>
   146e8:	ldrb	r3, [r4, #1]
   146ec:	ldr	r5, [r0]
   146f0:	mov	r0, r8
   146f4:	ldr	r1, [r5, r3, lsl #2]
   146f8:	bl	1143c <strchr@plt>
   146fc:	ldrb	r2, [r4, #2]
   14700:	ldr	r1, [r5, r2, lsl #2]
   14704:	mov	fp, r0
   14708:	mov	r0, r8
   1470c:	bl	1143c <strchr@plt>
   14710:	cmp	fp, #0
   14714:	cmpne	r0, #0
   14718:	beq	14768 <secure_getenv@@Base+0x13cc>
   1471c:	add	r4, r4, #3
   14720:	rsb	r3, r8, fp
   14724:	cmp	r7, r4
   14728:	rsb	r0, r8, r0
   1472c:	orr	r3, r0, r3, lsl #4
   14730:	add	r6, r6, #1
   14734:	strb	r3, [r6, #-1]
   14738:	bne	146c8 <secure_getenv@@Base+0x132c>
   1473c:	ldr	r3, [sp, #4]
   14740:	cmp	r3, #0
   14744:	mov	r3, #0
   14748:	strb	r3, [r6]
   1474c:	rsbne	r6, sl, r6
   14750:	ldrne	r3, [sp, #4]
   14754:	movne	r0, sl
   14758:	moveq	r0, sl
   1475c:	strne	r6, [r3]
   14760:	add	sp, sp, #12
   14764:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14768:	mov	r0, sl
   1476c:	bl	112c8 <free@plt>
   14770:	mov	r0, #0
   14774:	add	sp, sp, #12
   14778:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1477c:	ldr	r2, [pc, #100]	; 147e8 <secure_getenv@@Base+0x144c>
   14780:	ldr	r0, [pc, #100]	; 147ec <secure_getenv@@Base+0x1450>
   14784:	ldr	r1, [pc, #100]	; 147f0 <secure_getenv@@Base+0x1454>
   14788:	add	r2, pc, r2
   1478c:	add	r0, pc, r0
   14790:	add	r2, r2, #16
   14794:	add	r1, pc, r1
   14798:	bl	1383c <secure_getenv@@Base+0x4a0>
   1479c:	mov	r0, sl
   147a0:	b	14760 <secure_getenv@@Base+0x13c4>
   147a4:	ldr	r0, [pc, #72]	; 147f4 <secure_getenv@@Base+0x1458>
   147a8:	mov	r2, #59	; 0x3b
   147ac:	ldr	r1, [pc, #68]	; 147f8 <secure_getenv@@Base+0x145c>
   147b0:	ldr	r3, [pc, #68]	; 147fc <secure_getenv@@Base+0x1460>
   147b4:	add	r0, pc, r0
   147b8:	add	r1, pc, r1
   147bc:	add	r3, pc, r3
   147c0:	bl	11574 <__assert_fail@plt>
   147c4:	ldr	r0, [pc, #52]	; 14800 <secure_getenv@@Base+0x1464>
   147c8:	mov	r2, #58	; 0x3a
   147cc:	ldr	r1, [pc, #48]	; 14804 <secure_getenv@@Base+0x1468>
   147d0:	ldr	r3, [pc, #48]	; 14808 <secure_getenv@@Base+0x146c>
   147d4:	add	r0, pc, r0
   147d8:	add	r1, pc, r1
   147dc:	add	r3, pc, r3
   147e0:	bl	11574 <__assert_fail@plt>
   147e4:	andeq	r0, r0, r8, lsr #29
   147e8:			; <UNDEFINED> instruction: 0x00000db4
   147ec:	andeq	r0, r0, ip, lsl r6
   147f0:	andeq	r0, r0, r0, lsr #28
   147f4:	andeq	r0, r0, ip, ror #27
   147f8:	ldrdeq	r0, [r0], -r8
   147fc:	andeq	r0, r0, r0, lsl #27
   14800:	andeq	r0, r0, ip, lsr #27
   14804:			; <UNDEFINED> instruction: 0x00000db8
   14808:	andeq	r0, r0, r0, ror #26
   1480c:	ldr	ip, [pc, #264]	; 1491c <secure_getenv@@Base+0x1580>
   14810:	cmp	r0, r1
   14814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14818:	add	ip, pc, ip
   1481c:	ldr	r4, [pc, #252]	; 14920 <secure_getenv@@Base+0x1584>
   14820:	mov	r6, r3
   14824:	mov	r3, ip
   14828:	sub	sp, sp, #20
   1482c:	mov	r5, r1
   14830:	mov	r8, r2
   14834:	ldr	r4, [ip, r4]
   14838:	ldr	r3, [r4]
   1483c:	str	r4, [sp, #4]
   14840:	str	r3, [sp, #12]
   14844:	bhi	148f4 <secure_getenv@@Base+0x1558>
   14848:	beq	148d8 <secure_getenv@@Base+0x153c>
   1484c:	ldr	r7, [pc, #208]	; 14924 <secure_getenv@@Base+0x1588>
   14850:	add	sl, sp, #8
   14854:	mov	r4, r0
   14858:	add	r7, pc, r7
   1485c:	b	1488c <secure_getenv@@Base+0x14f0>
   14860:	mov	r0, r8
   14864:	mov	r1, fp
   14868:	bl	1143c <strchr@plt>
   1486c:	cmp	r0, #0
   14870:	beq	1489c <secure_getenv@@Base+0x1500>
   14874:	mov	r1, r9
   14878:	mov	r0, r6
   1487c:	mov	r2, #1
   14880:	bl	12e74 <__assert_fail@plt+0x1900>
   14884:	cmp	r5, r4
   14888:	beq	148d8 <secure_getenv@@Base+0x153c>
   1488c:	mov	r9, r4
   14890:	ldrb	fp, [r4], #1
   14894:	cmp	fp, #0
   14898:	bne	14860 <secure_getenv@@Base+0x14c4>
   1489c:	and	r2, fp, #15
   148a0:	add	r3, r7, fp, lsr #4
   148a4:	add	r2, r7, r2
   148a8:	mov	r0, r6
   148ac:	ldrb	ip, [r3, #32]
   148b0:	mov	r1, sl
   148b4:	ldrb	r3, [r2, #32]
   148b8:	mov	r2, #3
   148bc:	mov	lr, #37	; 0x25
   148c0:	strb	lr, [sp, #8]
   148c4:	strb	ip, [sp, #9]
   148c8:	strb	r3, [sp, #10]
   148cc:	bl	12e74 <__assert_fail@plt+0x1900>
   148d0:	cmp	r5, r4
   148d4:	bne	1488c <secure_getenv@@Base+0x14f0>
   148d8:	ldr	r1, [sp, #4]
   148dc:	ldr	r2, [sp, #12]
   148e0:	ldr	r3, [r1]
   148e4:	cmp	r2, r3
   148e8:	bne	14918 <secure_getenv@@Base+0x157c>
   148ec:	add	sp, sp, #20
   148f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148f4:	ldr	r3, [pc, #44]	; 14928 <secure_getenv@@Base+0x158c>
   148f8:	mov	r2, #114	; 0x72
   148fc:	ldr	r0, [pc, #40]	; 1492c <secure_getenv@@Base+0x1590>
   14900:	ldr	r1, [pc, #40]	; 14930 <secure_getenv@@Base+0x1594>
   14904:	add	r3, pc, r3
   14908:	add	r0, pc, r0
   1490c:	add	r3, r3, #52	; 0x34
   14910:	add	r1, pc, r1
   14914:	bl	11574 <__assert_fail@plt>
   14918:	bl	11310 <__stack_chk_fail@plt>
   1491c:	andeq	r1, r1, r0, ror #15
   14920:	andeq	r0, r0, r4, lsl r1
   14924:	andeq	r0, r0, r4, ror #25
   14928:	andeq	r0, r0, r8, lsr ip
   1492c:	andeq	r0, r0, r8, ror ip
   14930:	andeq	r0, r0, r0, lsl #25
   14934:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14938:	mov	r7, r0
   1493c:	ldr	r6, [pc, #76]	; 14990 <secure_getenv@@Base+0x15f4>
   14940:	mov	r8, r1
   14944:	ldr	r5, [pc, #72]	; 14994 <secure_getenv@@Base+0x15f8>
   14948:	mov	r9, r2
   1494c:	add	r6, pc, r6
   14950:	bl	11260 <_init@@Base>
   14954:	add	r5, pc, r5
   14958:	rsb	r6, r5, r6
   1495c:	asrs	r6, r6, #2
   14960:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14964:	sub	r5, r5, #4
   14968:	mov	r4, #0
   1496c:	add	r4, r4, #1
   14970:	ldr	r3, [r5, #4]!
   14974:	mov	r0, r7
   14978:	mov	r1, r8
   1497c:	mov	r2, r9
   14980:	blx	r3
   14984:	cmp	r4, r6
   14988:	bne	1496c <secure_getenv@@Base+0x15d0>
   1498c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14990:	andeq	r1, r1, ip, asr #10
   14994:	andeq	r1, r1, r0, asr #10
   14998:	bx	lr

Disassembly of section .fini:

0001499c <_fini@@Base>:
   1499c:	push	{r3, lr}
   149a0:	pop	{r3, pc}
