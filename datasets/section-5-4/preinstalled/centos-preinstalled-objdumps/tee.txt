
centos-preinstalled/tee:     file format elf32-littlearm


Disassembly of section .init:

00010f24 <.init>:
   10f24:	push	{r3, lr}
   10f28:	bl	1147c <close@plt+0x28c>
   10f2c:	pop	{r3, pc}

Disassembly of section .plt:

00010f30 <fdopen@plt-0x14>:
   10f30:	push	{lr}		; (str lr, [sp, #-4]!)
   10f34:	ldr	lr, [pc, #4]	; 10f40 <fdopen@plt-0x4>
   10f38:	add	lr, pc, lr
   10f3c:	ldr	pc, [lr, #8]!
   10f40:	andeq	r5, r1, r0, asr #1

00010f44 <fdopen@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #192]!	; 0xc0

00010f50 <calloc@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #184]!	; 0xb8

00010f5c <fputs_unlocked@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #176]!	; 0xb0

00010f68 <raise@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #168]!	; 0xa8

00010f74 <strcmp@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #160]!	; 0xa0

00010f80 <posix_fadvise64@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #86016	; 0x15000
   10f88:	ldr	pc, [ip, #152]!	; 0x98

00010f8c <read@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #86016	; 0x15000
   10f94:	ldr	pc, [ip, #144]!	; 0x90

00010f98 <fflush@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #86016	; 0x15000
   10fa0:	ldr	pc, [ip, #136]!	; 0x88

00010fa4 <free@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #86016	; 0x15000
   10fac:	ldr	pc, [ip, #128]!	; 0x80

00010fb0 <_exit@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #86016	; 0x15000
   10fb8:	ldr	pc, [ip, #120]!	; 0x78

00010fbc <memcpy@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #86016	; 0x15000
   10fc4:	ldr	pc, [ip, #112]!	; 0x70

00010fc8 <mbsinit@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #86016	; 0x15000
   10fd0:	ldr	pc, [ip, #104]!	; 0x68

00010fd4 <signal@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #86016	; 0x15000
   10fdc:	ldr	pc, [ip, #96]!	; 0x60

00010fe0 <fwrite_unlocked@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #86016	; 0x15000
   10fe8:	ldr	pc, [ip, #88]!	; 0x58

00010fec <memcmp@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #86016	; 0x15000
   10ff4:	ldr	pc, [ip, #80]!	; 0x50

00010ff8 <dcgettext@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #86016	; 0x15000
   11000:	ldr	pc, [ip, #72]!	; 0x48

00011004 <__stack_chk_fail@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #86016	; 0x15000
   1100c:	ldr	pc, [ip, #64]!	; 0x40

00011010 <realloc@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #86016	; 0x15000
   11018:	ldr	pc, [ip, #56]!	; 0x38

0001101c <textdomain@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #86016	; 0x15000
   11024:	ldr	pc, [ip, #48]!	; 0x30

00011028 <iswprint@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #86016	; 0x15000
   11030:	ldr	pc, [ip, #40]!	; 0x28

00011034 <fwrite@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #86016	; 0x15000
   1103c:	ldr	pc, [ip, #32]!

00011040 <lseek64@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #86016	; 0x15000
   11048:	ldr	pc, [ip, #24]!

0001104c <__ctype_get_mb_cur_max@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #86016	; 0x15000
   11054:	ldr	pc, [ip, #16]!

00011058 <strcpy@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #86016	; 0x15000
   11060:	ldr	pc, [ip, #8]!

00011064 <__fpending@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #86016	; 0x15000
   1106c:	ldr	pc, [ip, #0]!

00011070 <mbrtowc@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #20, 20	; 0x14000
   11078:	ldr	pc, [ip, #4088]!	; 0xff8

0001107c <error@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #20, 20	; 0x14000
   11084:	ldr	pc, [ip, #4080]!	; 0xff0

00011088 <open64@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #20, 20	; 0x14000
   11090:	ldr	pc, [ip, #4072]!	; 0xfe8

00011094 <getenv@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #20, 20	; 0x14000
   1109c:	ldr	pc, [ip, #4064]!	; 0xfe0

000110a0 <malloc@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #20, 20	; 0x14000
   110a8:	ldr	pc, [ip, #4056]!	; 0xfd8

000110ac <__libc_start_main@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #20, 20	; 0x14000
   110b4:	ldr	pc, [ip, #4048]!	; 0xfd0

000110b8 <__freading@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #20, 20	; 0x14000
   110c0:	ldr	pc, [ip, #4040]!	; 0xfc8

000110c4 <__gmon_start__@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #20, 20	; 0x14000
   110cc:	ldr	pc, [ip, #4032]!	; 0xfc0

000110d0 <getopt_long@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #20, 20	; 0x14000
   110d8:	ldr	pc, [ip, #4024]!	; 0xfb8

000110dc <__ctype_b_loc@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #20, 20	; 0x14000
   110e4:	ldr	pc, [ip, #4016]!	; 0xfb0

000110e8 <exit@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #20, 20	; 0x14000
   110f0:	ldr	pc, [ip, #4008]!	; 0xfa8

000110f4 <strlen@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #20, 20	; 0x14000
   110fc:	ldr	pc, [ip, #4000]!	; 0xfa0

00011100 <ungetc@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #20, 20	; 0x14000
   11108:	ldr	pc, [ip, #3992]!	; 0xf98

0001110c <fcntl@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #20, 20	; 0x14000
   11114:	ldr	pc, [ip, #3984]!	; 0xf90

00011118 <__errno_location@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #20, 20	; 0x14000
   11120:	ldr	pc, [ip, #3976]!	; 0xf88

00011124 <__cxa_atexit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #20, 20	; 0x14000
   1112c:	ldr	pc, [ip, #3968]!	; 0xf80

00011130 <setvbuf@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #20, 20	; 0x14000
   11138:	ldr	pc, [ip, #3960]!	; 0xf78

0001113c <memset@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #20, 20	; 0x14000
   11144:	ldr	pc, [ip, #3952]!	; 0xf70

00011148 <fscanf@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #20, 20	; 0x14000
   11150:	ldr	pc, [ip, #3944]!	; 0xf68

00011154 <__printf_chk@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #20, 20	; 0x14000
   1115c:	ldr	pc, [ip, #3936]!	; 0xf60

00011160 <fileno@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #20, 20	; 0x14000
   11168:	ldr	pc, [ip, #3928]!	; 0xf58

0001116c <__fprintf_chk@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #20, 20	; 0x14000
   11174:	ldr	pc, [ip, #3920]!	; 0xf50

00011178 <fclose@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #20, 20	; 0x14000
   11180:	ldr	pc, [ip, #3912]!	; 0xf48

00011184 <fseeko64@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #20, 20	; 0x14000
   1118c:	ldr	pc, [ip, #3904]!	; 0xf40

00011190 <__uflow@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #20, 20	; 0x14000
   11198:	ldr	pc, [ip, #3896]!	; 0xf38

0001119c <setlocale@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #20, 20	; 0x14000
   111a4:	ldr	pc, [ip, #3888]!	; 0xf30

000111a8 <strrchr@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #20, 20	; 0x14000
   111b0:	ldr	pc, [ip, #3880]!	; 0xf28

000111b4 <nl_langinfo@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #20, 20	; 0x14000
   111bc:	ldr	pc, [ip, #3872]!	; 0xf20

000111c0 <fopen64@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #20, 20	; 0x14000
   111c8:	ldr	pc, [ip, #3864]!	; 0xf18

000111cc <bindtextdomain@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #20, 20	; 0x14000
   111d4:	ldr	pc, [ip, #3856]!	; 0xf10

000111d8 <strncmp@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #20, 20	; 0x14000
   111e0:	ldr	pc, [ip, #3848]!	; 0xf08

000111e4 <abort@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #20, 20	; 0x14000
   111ec:	ldr	pc, [ip, #3840]!	; 0xf00

000111f0 <close@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #20, 20	; 0x14000
   111f8:	ldr	pc, [ip, #3832]!	; 0xef8

Disassembly of section .text:

000111fc <close_stdout@@Base-0x988>:
   111fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11200:	mov	r6, r0
   11204:	sub	sp, sp, #28
   11208:	ldr	r0, [r1]
   1120c:	mov	r4, r1
   11210:	bl	11e1c <close_stdout@@Base+0x298>
   11214:	ldr	r1, [pc, #468]	; 113f0 <close@plt+0x200>
   11218:	mov	r0, #6
   1121c:	ldr	r5, [pc, #464]	; 113f4 <close@plt+0x204>
   11220:	mov	fp, #1
   11224:	add	r1, pc, r1
   11228:	ldr	r9, [pc, #456]	; 113f8 <close@plt+0x208>
   1122c:	bl	1119c <setlocale@plt>
   11230:	add	r5, pc, r5
   11234:	ldr	r1, [pc, #448]	; 113fc <close@plt+0x20c>
   11238:	add	r9, pc, r9
   1123c:	mov	r0, r5
   11240:	ldr	r8, [pc, #440]	; 11400 <close@plt+0x210>
   11244:	add	r1, pc, r1
   11248:	bl	111cc <bindtextdomain@plt>
   1124c:	mov	r0, r5
   11250:	ldr	r5, [pc, #428]	; 11404 <close@plt+0x214>
   11254:	bl	1101c <textdomain@plt>
   11258:	ldr	r3, [pc, #424]	; 11408 <close@plt+0x218>
   1125c:	add	r8, pc, r8
   11260:	add	r5, pc, r5
   11264:	ldr	r0, [r5, r3]
   11268:	ldr	r3, [pc, #412]	; 1140c <close@plt+0x21c>
   1126c:	add	r3, pc, r3
   11270:	str	r3, [sp, #16]
   11274:	ldr	r3, [pc, #404]	; 11410 <close@plt+0x220>
   11278:	add	r3, pc, r3
   1127c:	str	r3, [sp, #20]
   11280:	bl	148d0 <close_stdout@@Base+0x2d4c>
   11284:	ldr	r2, [pc, #392]	; 11414 <close@plt+0x224>
   11288:	mov	r3, #0
   1128c:	add	r2, pc, r2
   11290:	mov	r7, r3
   11294:	strb	r3, [r2]
   11298:	strb	r3, [r2, #1]
   1129c:	str	r7, [sp]
   112a0:	mov	r0, r6
   112a4:	mov	r1, r4
   112a8:	mov	r2, r9
   112ac:	mov	r3, r8
   112b0:	mov	sl, #0
   112b4:	bl	110d0 <getopt_long@plt>
   112b8:	cmn	r0, #1
   112bc:	beq	11364 <close@plt+0x174>
   112c0:	cmn	r0, #2
   112c4:	beq	1135c <close@plt+0x16c>
   112c8:	ble	112f4 <close@plt+0x104>
   112cc:	cmp	r0, #97	; 0x61
   112d0:	beq	112e8 <close@plt+0xf8>
   112d4:	cmp	r0, #105	; 0x69
   112d8:	bne	11354 <close@plt+0x164>
   112dc:	ldr	r3, [sp, #20]
   112e0:	strb	fp, [r3, #1]
   112e4:	b	1129c <close@plt+0xac>
   112e8:	ldr	r3, [sp, #16]
   112ec:	strb	fp, [r3]
   112f0:	b	1129c <close@plt+0xac>
   112f4:	cmn	r0, #3
   112f8:	bne	11354 <close@plt+0x164>
   112fc:	ldr	r2, [pc, #276]	; 11418 <close@plt+0x228>
   11300:	ldr	r3, [pc, #276]	; 1141c <close@plt+0x22c>
   11304:	ldr	r1, [pc, #276]	; 11420 <close@plt+0x230>
   11308:	ldr	r0, [r5, r2]
   1130c:	ldr	r3, [r5, r3]
   11310:	add	r1, pc, r1
   11314:	ldr	r2, [pc, #264]	; 11424 <close@plt+0x234>
   11318:	ldr	r0, [r0]
   1131c:	ldr	r3, [r3]
   11320:	add	r2, pc, r2
   11324:	ldr	ip, [pc, #252]	; 11428 <close@plt+0x238>
   11328:	stmib	sp, {r1, r2}
   1132c:	ldr	r1, [pc, #248]	; 1142c <close@plt+0x23c>
   11330:	add	ip, pc, ip
   11334:	ldr	r2, [pc, #244]	; 11430 <close@plt+0x240>
   11338:	str	sl, [sp, #12]
   1133c:	add	r1, pc, r1
   11340:	str	ip, [sp]
   11344:	add	r2, pc, r2
   11348:	bl	13b14 <close_stdout@@Base+0x1f90>
   1134c:	mov	r0, sl
   11350:	bl	110e8 <exit@plt>
   11354:	mov	r0, #1
   11358:	bl	11960 <close@plt+0x770>
   1135c:	mov	r0, sl
   11360:	bl	11960 <close@plt+0x770>
   11364:	ldr	r3, [pc, #200]	; 11434 <close@plt+0x244>
   11368:	add	r3, pc, r3
   1136c:	ldrb	r3, [r3, #1]
   11370:	cmp	r3, sl
   11374:	bne	113b0 <close@plt+0x1c0>
   11378:	ldr	r3, [pc, #184]	; 11438 <close@plt+0x248>
   1137c:	ldr	r3, [r5, r3]
   11380:	ldr	r1, [r3]
   11384:	rsb	r0, r1, r6
   11388:	add	r1, r4, r1, lsl #2
   1138c:	bl	11574 <close@plt+0x384>
   11390:	mov	r4, r0
   11394:	mov	r0, #0
   11398:	bl	111f0 <close@plt>
   1139c:	cmp	r0, #0
   113a0:	bne	113c0 <close@plt+0x1d0>
   113a4:	rsbs	r0, r4, #1
   113a8:	movcc	r0, #0
   113ac:	bl	110e8 <exit@plt>
   113b0:	mov	r1, #1
   113b4:	mov	r0, #2
   113b8:	bl	10fd4 <signal@plt>
   113bc:	b	11378 <close@plt+0x188>
   113c0:	bl	11118 <__errno_location@plt>
   113c4:	ldr	r1, [pc, #112]	; 1143c <close@plt+0x24c>
   113c8:	mov	r2, #5
   113cc:	add	r1, pc, r1
   113d0:	ldr	r5, [r0]
   113d4:	mov	r0, #0
   113d8:	bl	10ff8 <dcgettext@plt>
   113dc:	mov	r1, r5
   113e0:	mov	r2, r0
   113e4:	mov	r0, #1
   113e8:	bl	1107c <error@plt>
   113ec:	b	113a4 <close@plt+0x1b4>
   113f0:	andeq	r3, r0, r8, lsl #19
   113f4:			; <UNDEFINED> instruction: 0x000038bc
   113f8:	andeq	r3, r0, r0, asr #19
   113fc:	andeq	r3, r0, ip, ror #18
   11400:	andeq	r4, r1, r0, lsr ip
   11404:	muleq	r1, r8, sp
   11408:	andeq	r0, r0, r8, lsl #2
   1140c:	andeq	r4, r1, r9, lsl #30
   11410:	strdeq	r4, [r1], -sp
   11414:	andeq	r4, r1, r9, ror #29
   11418:	andeq	r0, r0, r8, lsl r1
   1141c:	andeq	r0, r0, r0, lsl #2
   11420:	andeq	r3, r0, r4, asr #17
   11424:	andeq	r3, r0, r8, asr #17
   11428:	muleq	r0, r8, r8
   1142c:	andeq	r3, r0, r8, lsl #17
   11430:	andeq	r3, r0, r4, lsr #15
   11434:	andeq	r4, r1, sp, lsl #28
   11438:	strdeq	r0, [r0], -ip
   1143c:	andeq	r3, r0, r0, lsr r8
   11440:	mov	fp, #0
   11444:	mov	lr, #0
   11448:	pop	{r1}		; (ldr r1, [sp], #4)
   1144c:	mov	r2, sp
   11450:	push	{r2}		; (str r2, [sp, #-4]!)
   11454:	push	{r0}		; (str r0, [sp, #-4]!)
   11458:	ldr	ip, [pc, #16]	; 11470 <close@plt+0x280>
   1145c:	push	{ip}		; (str ip, [sp, #-4]!)
   11460:	ldr	r0, [pc, #12]	; 11474 <close@plt+0x284>
   11464:	ldr	r3, [pc, #12]	; 11478 <close@plt+0x288>
   11468:	bl	110ac <__libc_start_main@plt>
   1146c:	bl	111e4 <abort@plt>
   11470:	andeq	r4, r1, ip, asr #17
   11474:	strdeq	r1, [r1], -ip
   11478:	andeq	r4, r1, r8, ror #16
   1147c:	ldr	r3, [pc, #20]	; 11498 <close@plt+0x2a8>
   11480:	ldr	r2, [pc, #20]	; 1149c <close@plt+0x2ac>
   11484:	add	r3, pc, r3
   11488:	ldr	r2, [r3, r2]
   1148c:	cmp	r2, #0
   11490:	bxeq	lr
   11494:	b	110c4 <__gmon_start__@plt>
   11498:	andeq	r4, r1, r4, ror fp
   1149c:	andeq	r0, r0, ip, lsl #2
   114a0:	push	{r3, lr}
   114a4:	movw	r0, #24956	; 0x617c
   114a8:	ldr	r3, [pc, #36]	; 114d4 <close@plt+0x2e4>
   114ac:	movt	r0, #2
   114b0:	rsb	r3, r0, r3
   114b4:	cmp	r3, #6
   114b8:	popls	{r3, pc}
   114bc:	movw	r3, #0
   114c0:	movt	r3, #0
   114c4:	cmp	r3, #0
   114c8:	popeq	{r3, pc}
   114cc:	blx	r3
   114d0:	pop	{r3, pc}
   114d4:	andeq	r6, r2, pc, ror r1
   114d8:	push	{r3, lr}
   114dc:	movw	r0, #24956	; 0x617c
   114e0:	movw	r3, #24956	; 0x617c
   114e4:	movt	r0, #2
   114e8:	movt	r3, #2
   114ec:	rsb	r3, r0, r3
   114f0:	asr	r3, r3, #2
   114f4:	add	r3, r3, r3, lsr #31
   114f8:	asrs	r1, r3, #1
   114fc:	popeq	{r3, pc}
   11500:	movw	r2, #0
   11504:	movt	r2, #0
   11508:	cmp	r2, #0
   1150c:	popeq	{r3, pc}
   11510:	blx	r2
   11514:	pop	{r3, pc}
   11518:	push	{r4, lr}
   1151c:	movw	r4, #24956	; 0x617c
   11520:	movt	r4, #2
   11524:	ldrb	r3, [r4]
   11528:	cmp	r3, #0
   1152c:	popne	{r4, pc}
   11530:	bl	114a0 <close@plt+0x2b0>
   11534:	mov	r3, #1
   11538:	strb	r3, [r4]
   1153c:	pop	{r4, pc}
   11540:	movw	r0, #24208	; 0x5e90
   11544:	movt	r0, #2
   11548:	push	{r3, lr}
   1154c:	ldr	r3, [r0]
   11550:	cmp	r3, #0
   11554:	beq	1156c <close@plt+0x37c>
   11558:	movw	r3, #0
   1155c:	movt	r3, #0
   11560:	cmp	r3, #0
   11564:	beq	1156c <close@plt+0x37c>
   11568:	blx	r3
   1156c:	pop	{r3, lr}
   11570:	b	114d8 <close@plt+0x2e8>
   11574:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11578:	sub	sp, sp, #8192	; 0x2000
   1157c:	ldr	fp, [pc, #936]	; 1192c <close@plt+0x73c>
   11580:	sub	sp, sp, #36	; 0x24
   11584:	ldr	r3, [pc, #932]	; 11930 <close@plt+0x740>
   11588:	mov	r9, r1
   1158c:	add	fp, pc, fp
   11590:	str	r0, [sp]
   11594:	ldr	r2, [pc, #920]	; 11934 <close@plt+0x744>
   11598:	add	r1, sp, #8192	; 0x2000
   1159c:	ldr	r3, [fp, r3]
   115a0:	add	r2, pc, r2
   115a4:	str	r3, [sp, #8]
   115a8:	ldr	ip, [sp, #8]
   115ac:	ldrb	r2, [r2]
   115b0:	ldr	r3, [ip]
   115b4:	cmp	r2, #0
   115b8:	str	r3, [r1, #28]
   115bc:	beq	1188c <close@plt+0x69c>
   115c0:	ldr	ip, [pc, #880]	; 11938 <close@plt+0x748>
   115c4:	add	ip, pc, ip
   115c8:	str	ip, [sp, #16]
   115cc:	ldr	ip, [sp]
   115d0:	add	r5, ip, #1
   115d4:	cmn	r5, #-1073741823	; 0xc0000001
   115d8:	bhi	11928 <close@plt+0x738>
   115dc:	lsl	r4, r5, #2
   115e0:	mov	r0, r4
   115e4:	bl	13c24 <close_stdout@@Base+0x20a0>
   115e8:	ldr	ip, [sp]
   115ec:	cmp	ip, #0
   115f0:	str	r0, [sp, #4]
   115f4:	ble	118c8 <close@plt+0x6d8>
   115f8:	sub	r3, r4, #4
   115fc:	mov	r4, ip
   11600:	add	r3, r9, r3
   11604:	ldr	r2, [r3, #-4]
   11608:	subs	r4, r4, #1
   1160c:	str	r2, [r3], #-4
   11610:	bne	11604 <close@plt+0x414>
   11614:	ldr	r3, [pc, #800]	; 1193c <close@plt+0x74c>
   11618:	mov	r1, #2
   1161c:	mov	r6, r9
   11620:	mov	r8, #1
   11624:	ldr	r3, [fp, r3]
   11628:	ldr	r0, [r3]
   1162c:	bl	11d44 <close_stdout@@Base+0x1c0>
   11630:	ldr	r3, [pc, #776]	; 11940 <close@plt+0x750>
   11634:	ldr	r7, [sp, #4]
   11638:	mov	r2, #5
   1163c:	ldr	r1, [pc, #768]	; 11944 <close@plt+0x754>
   11640:	mov	r0, r4
   11644:	ldr	fp, [fp, r3]
   11648:	add	r1, pc, r1
   1164c:	ldr	r3, [fp]
   11650:	str	r3, [r7]
   11654:	bl	10ff8 <dcgettext@plt>
   11658:	ldr	ip, [pc, #744]	; 11948 <close@plt+0x758>
   1165c:	mov	r1, r4
   11660:	mov	r2, #2
   11664:	mov	r3, r4
   11668:	add	ip, pc, ip
   1166c:	str	ip, [sp, #12]
   11670:	str	r0, [r6], #4
   11674:	ldr	r0, [fp]
   11678:	bl	11130 <setvbuf@plt>
   1167c:	str	r9, [sp, #20]
   11680:	ldr	sl, [sp, #16]
   11684:	mov	r9, r8
   11688:	b	116c4 <close@plt+0x4d4>
   1168c:	mov	r1, sl
   11690:	bl	11d80 <close_stdout@@Base+0x1fc>
   11694:	mov	r4, r0
   11698:	cmp	r4, #0
   1169c:	str	r4, [r7, #4]!
   116a0:	beq	116f0 <close@plt+0x500>
   116a4:	mov	r1, #0
   116a8:	mov	r0, r4
   116ac:	mov	r3, r1
   116b0:	mov	r2, #2
   116b4:	add	r9, r9, #1
   116b8:	bl	11130 <setvbuf@plt>
   116bc:	cmp	r9, r5
   116c0:	beq	11718 <close@plt+0x528>
   116c4:	ldr	r0, [r6], #4
   116c8:	ldrb	r3, [r0]
   116cc:	cmp	r3, #45	; 0x2d
   116d0:	bne	1168c <close@plt+0x49c>
   116d4:	ldrb	r3, [r0, #1]
   116d8:	cmp	r3, #0
   116dc:	ldreq	r4, [fp]
   116e0:	bne	1168c <close@plt+0x49c>
   116e4:	cmp	r4, #0
   116e8:	str	r4, [r7, #4]!
   116ec:	bne	116a4 <close@plt+0x4b4>
   116f0:	bl	11118 <__errno_location@plt>
   116f4:	add	r9, r9, #1
   116f8:	ldr	r2, [sp, #12]
   116fc:	mov	r8, r4
   11700:	ldr	r3, [r6, #-4]
   11704:	ldr	r1, [r0]
   11708:	mov	r0, r4
   1170c:	bl	1107c <error@plt>
   11710:	cmp	r9, r5
   11714:	bne	116c4 <close@plt+0x4d4>
   11718:	ldr	r9, [sp, #20]
   1171c:	ldr	fp, [pc, #552]	; 1194c <close@plt+0x75c>
   11720:	add	r7, sp, #28
   11724:	add	fp, pc, fp
   11728:	mov	r0, #0
   1172c:	mov	r1, r7
   11730:	mov	r2, #8192	; 0x2000
   11734:	bl	10f8c <read@plt>
   11738:	subs	r6, r0, #0
   1173c:	blt	117b0 <close@plt+0x5c0>
   11740:	beq	117c8 <close@plt+0x5d8>
   11744:	ldr	ip, [sp]
   11748:	cmp	ip, #0
   1174c:	blt	11728 <close@plt+0x538>
   11750:	ldr	sl, [sp, #4]
   11754:	mov	r4, #0
   11758:	b	11768 <close@plt+0x578>
   1175c:	add	r4, r4, #1
   11760:	cmp	r4, r5
   11764:	beq	11728 <close@plt+0x538>
   11768:	ldr	r3, [sl], #4
   1176c:	cmp	r3, #0
   11770:	beq	1175c <close@plt+0x56c>
   11774:	mov	r0, r7
   11778:	mov	r1, r6
   1177c:	mov	r2, #1
   11780:	bl	10fe0 <fwrite_unlocked@plt>
   11784:	cmp	r0, #1
   11788:	beq	1175c <close@plt+0x56c>
   1178c:	bl	11118 <__errno_location@plt>
   11790:	mov	r8, #0
   11794:	mov	r2, fp
   11798:	ldr	r3, [r9, r4, lsl #2]
   1179c:	ldr	r1, [r0]
   117a0:	mov	r0, r8
   117a4:	bl	1107c <error@plt>
   117a8:	str	r8, [sl, #-4]
   117ac:	b	1175c <close@plt+0x56c>
   117b0:	bl	11118 <__errno_location@plt>
   117b4:	ldr	r4, [r0]
   117b8:	cmp	r4, #4
   117bc:	beq	11728 <close@plt+0x538>
   117c0:	cmn	r6, #1
   117c4:	beq	1189c <close@plt+0x6ac>
   117c8:	ldr	ip, [sp]
   117cc:	cmp	ip, #0
   117d0:	ble	1185c <close@plt+0x66c>
   117d4:	ldr	r7, [pc, #372]	; 11950 <close@plt+0x760>
   117d8:	add	r9, r9, #4
   117dc:	ldr	r6, [sp, #4]
   117e0:	mov	r4, #1
   117e4:	add	r7, pc, r7
   117e8:	b	11808 <close@plt+0x618>
   117ec:	ldrb	r3, [r3, #1]
   117f0:	cmp	r3, #0
   117f4:	bne	11818 <close@plt+0x628>
   117f8:	add	r4, r4, #1
   117fc:	add	r6, r6, #4
   11800:	cmp	r4, r5
   11804:	beq	1185c <close@plt+0x66c>
   11808:	ldr	r3, [r9], #4
   1180c:	ldrb	r1, [r3]
   11810:	cmp	r1, #45	; 0x2d
   11814:	beq	117ec <close@plt+0x5fc>
   11818:	ldr	r0, [r6, #4]
   1181c:	cmp	r0, #0
   11820:	beq	117f8 <close@plt+0x608>
   11824:	bl	13e90 <close_stdout@@Base+0x230c>
   11828:	cmp	r0, #0
   1182c:	beq	117f8 <close@plt+0x608>
   11830:	bl	11118 <__errno_location@plt>
   11834:	mov	r8, #0
   11838:	mov	r2, r7
   1183c:	ldr	r3, [r9, #-4]
   11840:	add	r4, r4, #1
   11844:	add	r6, r6, #4
   11848:	ldr	r1, [r0]
   1184c:	mov	r0, r8
   11850:	bl	1107c <error@plt>
   11854:	cmp	r4, r5
   11858:	bne	11808 <close@plt+0x618>
   1185c:	ldr	r0, [sp, #4]
   11860:	bl	10fa4 <free@plt>
   11864:	ldr	ip, [sp, #8]
   11868:	add	r1, sp, #8192	; 0x2000
   1186c:	mov	r0, r8
   11870:	ldr	r2, [r1, #28]
   11874:	ldr	r3, [ip]
   11878:	cmp	r2, r3
   1187c:	bne	11924 <close@plt+0x734>
   11880:	add	sp, sp, #8192	; 0x2000
   11884:	add	sp, sp, #36	; 0x24
   11888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1188c:	ldr	ip, [pc, #192]	; 11954 <close@plt+0x764>
   11890:	add	ip, pc, ip
   11894:	str	ip, [sp, #16]
   11898:	b	115cc <close@plt+0x3dc>
   1189c:	ldr	r1, [pc, #180]	; 11958 <close@plt+0x768>
   118a0:	mov	r0, #0
   118a4:	mov	r2, #5
   118a8:	mov	r8, r0
   118ac:	add	r1, pc, r1
   118b0:	bl	10ff8 <dcgettext@plt>
   118b4:	mov	r1, r4
   118b8:	mov	r2, r0
   118bc:	mov	r0, r8
   118c0:	bl	1107c <error@plt>
   118c4:	b	117c8 <close@plt+0x5d8>
   118c8:	ldr	r3, [pc, #108]	; 1193c <close@plt+0x74c>
   118cc:	mov	r1, #2
   118d0:	mov	r8, #1
   118d4:	ldr	r3, [fp, r3]
   118d8:	ldr	r0, [r3]
   118dc:	bl	11d44 <close_stdout@@Base+0x1c0>
   118e0:	ldr	r3, [pc, #88]	; 11940 <close@plt+0x750>
   118e4:	ldr	ip, [sp, #4]
   118e8:	mov	r2, #5
   118ec:	ldr	r1, [pc, #104]	; 1195c <close@plt+0x76c>
   118f0:	mov	r0, #0
   118f4:	ldr	r4, [fp, r3]
   118f8:	add	r1, pc, r1
   118fc:	ldr	r3, [r4]
   11900:	str	r3, [ip]
   11904:	bl	10ff8 <dcgettext@plt>
   11908:	mov	r1, #0
   1190c:	mov	r2, #2
   11910:	mov	r3, r1
   11914:	str	r0, [r9]
   11918:	ldr	r0, [r4]
   1191c:	bl	11130 <setvbuf@plt>
   11920:	b	1171c <close@plt+0x52c>
   11924:	bl	11004 <__stack_chk_fail@plt>
   11928:	bl	13e38 <close_stdout@@Base+0x22b4>
   1192c:	andeq	r4, r1, ip, ror #20
   11930:	strdeq	r0, [r0], -r8
   11934:	ldrdeq	r4, [r1], -r5
   11938:	andeq	r3, r0, r0, asr #6
   1193c:	andeq	r0, r0, r4, lsl r1
   11940:	andeq	r0, r0, r8, lsl r1
   11944:	ldrdeq	r3, [r0], -r0
   11948:	andeq	r3, r0, r8, ror #11
   1194c:	andeq	r3, r0, ip, lsr #10
   11950:	andeq	r3, r0, ip, ror #8
   11954:	andeq	r3, r0, r8, ror r0
   11958:	andeq	r3, r0, r0, rrx
   1195c:	andeq	r3, r0, r0, lsr #32
   11960:	push	{r4, r5, r6, lr}
   11964:	subs	r4, r0, #0
   11968:	ldr	r5, [pc, #428]	; 11b1c <close@plt+0x92c>
   1196c:	add	r5, pc, r5
   11970:	beq	119b8 <close@plt+0x7c8>
   11974:	ldr	r3, [pc, #420]	; 11b20 <close@plt+0x930>
   11978:	mov	r2, #5
   1197c:	ldr	r1, [pc, #416]	; 11b24 <close@plt+0x934>
   11980:	mov	r0, #0
   11984:	ldr	r3, [r5, r3]
   11988:	add	r1, pc, r1
   1198c:	ldr	r6, [r3]
   11990:	bl	10ff8 <dcgettext@plt>
   11994:	ldr	r3, [pc, #396]	; 11b28 <close@plt+0x938>
   11998:	mov	r1, #1
   1199c:	ldr	r3, [r5, r3]
   119a0:	ldr	r3, [r3]
   119a4:	mov	r2, r0
   119a8:	mov	r0, r6
   119ac:	bl	1116c <__fprintf_chk@plt>
   119b0:	mov	r0, r4
   119b4:	bl	110e8 <exit@plt>
   119b8:	ldr	r1, [pc, #364]	; 11b2c <close@plt+0x93c>
   119bc:	mov	r2, #5
   119c0:	add	r1, pc, r1
   119c4:	bl	10ff8 <dcgettext@plt>
   119c8:	ldr	r3, [pc, #344]	; 11b28 <close@plt+0x938>
   119cc:	ldr	r6, [r5, r3]
   119d0:	ldr	r2, [r6]
   119d4:	mov	r1, r0
   119d8:	mov	r0, #1
   119dc:	bl	11154 <__printf_chk@plt>
   119e0:	ldr	r1, [pc, #328]	; 11b30 <close@plt+0x940>
   119e4:	mov	r2, #5
   119e8:	mov	r0, r4
   119ec:	add	r1, pc, r1
   119f0:	bl	10ff8 <dcgettext@plt>
   119f4:	ldr	r3, [pc, #312]	; 11b34 <close@plt+0x944>
   119f8:	ldr	r5, [r5, r3]
   119fc:	ldr	r1, [r5]
   11a00:	bl	10f5c <fputs_unlocked@plt>
   11a04:	ldr	r1, [pc, #300]	; 11b38 <close@plt+0x948>
   11a08:	mov	r2, #5
   11a0c:	mov	r0, r4
   11a10:	add	r1, pc, r1
   11a14:	bl	10ff8 <dcgettext@plt>
   11a18:	ldr	r1, [r5]
   11a1c:	bl	10f5c <fputs_unlocked@plt>
   11a20:	ldr	r1, [pc, #276]	; 11b3c <close@plt+0x94c>
   11a24:	mov	r2, #5
   11a28:	mov	r0, r4
   11a2c:	add	r1, pc, r1
   11a30:	bl	10ff8 <dcgettext@plt>
   11a34:	ldr	r1, [r5]
   11a38:	bl	10f5c <fputs_unlocked@plt>
   11a3c:	ldr	r1, [pc, #252]	; 11b40 <close@plt+0x950>
   11a40:	mov	r2, #5
   11a44:	mov	r0, r4
   11a48:	add	r1, pc, r1
   11a4c:	bl	10ff8 <dcgettext@plt>
   11a50:	ldr	r1, [r5]
   11a54:	bl	10f5c <fputs_unlocked@plt>
   11a58:	ldr	r1, [pc, #228]	; 11b44 <close@plt+0x954>
   11a5c:	mov	r2, #5
   11a60:	mov	r0, r4
   11a64:	add	r1, pc, r1
   11a68:	bl	10ff8 <dcgettext@plt>
   11a6c:	ldr	r2, [pc, #212]	; 11b48 <close@plt+0x958>
   11a70:	ldr	r3, [pc, #212]	; 11b4c <close@plt+0x95c>
   11a74:	add	r2, pc, r2
   11a78:	add	r3, pc, r3
   11a7c:	mov	r1, r0
   11a80:	mov	r0, #1
   11a84:	bl	11154 <__printf_chk@plt>
   11a88:	mov	r0, #5
   11a8c:	mov	r1, r4
   11a90:	bl	1119c <setlocale@plt>
   11a94:	cmp	r0, #0
   11a98:	beq	11ab4 <close@plt+0x8c4>
   11a9c:	ldr	r1, [pc, #172]	; 11b50 <close@plt+0x960>
   11aa0:	mov	r2, #3
   11aa4:	add	r1, pc, r1
   11aa8:	bl	111d8 <strncmp@plt>
   11aac:	cmp	r0, #0
   11ab0:	bne	11ae8 <close@plt+0x8f8>
   11ab4:	ldr	r1, [pc, #152]	; 11b54 <close@plt+0x964>
   11ab8:	mov	r2, #5
   11abc:	mov	r0, #0
   11ac0:	add	r1, pc, r1
   11ac4:	bl	10ff8 <dcgettext@plt>
   11ac8:	mov	r5, r0
   11acc:	ldr	r0, [r6]
   11ad0:	bl	11c9c <close_stdout@@Base+0x118>
   11ad4:	mov	r1, r5
   11ad8:	mov	r2, r0
   11adc:	mov	r0, #1
   11ae0:	bl	11154 <__printf_chk@plt>
   11ae4:	b	119b0 <close@plt+0x7c0>
   11ae8:	ldr	r1, [pc, #104]	; 11b58 <close@plt+0x968>
   11aec:	mov	r2, #5
   11af0:	mov	r0, r4
   11af4:	add	r1, pc, r1
   11af8:	bl	10ff8 <dcgettext@plt>
   11afc:	mov	r5, r0
   11b00:	ldr	r0, [r6]
   11b04:	bl	11c9c <close_stdout@@Base+0x118>
   11b08:	mov	r1, r5
   11b0c:	mov	r2, r0
   11b10:	mov	r0, #1
   11b14:	bl	11154 <__printf_chk@plt>
   11b18:	b	11ab4 <close@plt+0x8c4>
   11b1c:	andeq	r4, r1, ip, lsl #13
   11b20:	andeq	r0, r0, r4, lsl #2
   11b24:	andeq	r2, r0, r0, lsr #31
   11b28:	andeq	r0, r0, r4, lsr #2
   11b2c:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   11b30:	andeq	r2, r0, r8, lsl #31
   11b34:	andeq	r0, r0, r8, lsl r1
   11b38:	andeq	r3, r0, r4, lsr #32
   11b3c:	andeq	r3, r0, r8, lsr r0
   11b40:	andeq	r3, r0, r4, asr r0
   11b44:	andeq	r3, r0, ip, rrx
   11b48:	andeq	r3, r0, r4, ror r0
   11b4c:	andeq	r3, r0, r0, lsl #1
   11b50:	andeq	r3, r0, ip, ror r0
   11b54:	andeq	r3, r0, ip, lsr #1
   11b58:	andeq	r3, r0, r0, lsr r0
   11b5c:	ldr	r3, [pc, #8]	; 11b6c <close@plt+0x97c>
   11b60:	add	r3, pc, r3
   11b64:	str	r0, [r3]
   11b68:	bx	lr
   11b6c:	andeq	r4, r1, r8, lsl r6
   11b70:	ldr	r3, [pc, #8]	; 11b80 <close@plt+0x990>
   11b74:	add	r3, pc, r3
   11b78:	strb	r0, [r3, #4]
   11b7c:	bx	lr
   11b80:	andeq	r4, r1, r4, lsl #12

00011b84 <close_stdout@@Base>:
   11b84:	push	{r4, r5, r6, r7, lr}
   11b88:	sub	sp, sp, #12
   11b8c:	ldr	r4, [pc, #228]	; 11c78 <close_stdout@@Base+0xf4>
   11b90:	ldr	r3, [pc, #228]	; 11c7c <close_stdout@@Base+0xf8>
   11b94:	add	r4, pc, r4
   11b98:	ldr	r3, [r4, r3]
   11b9c:	ldr	r0, [r3]
   11ba0:	bl	141ac <close_stdout@@Base+0x2628>
   11ba4:	cmp	r0, #0
   11ba8:	beq	11bd0 <close_stdout@@Base+0x4c>
   11bac:	ldr	r3, [pc, #204]	; 11c80 <close_stdout@@Base+0xfc>
   11bb0:	add	r3, pc, r3
   11bb4:	ldrb	r3, [r3, #4]
   11bb8:	cmp	r3, #0
   11bbc:	beq	11bf0 <close_stdout@@Base+0x6c>
   11bc0:	bl	11118 <__errno_location@plt>
   11bc4:	ldr	r3, [r0]
   11bc8:	cmp	r3, #32
   11bcc:	bne	11bf0 <close_stdout@@Base+0x6c>
   11bd0:	ldr	r3, [pc, #172]	; 11c84 <close_stdout@@Base+0x100>
   11bd4:	ldr	r3, [r4, r3]
   11bd8:	ldr	r0, [r3]
   11bdc:	bl	141ac <close_stdout@@Base+0x2628>
   11be0:	cmp	r0, #0
   11be4:	bne	11c44 <close_stdout@@Base+0xc0>
   11be8:	add	sp, sp, #12
   11bec:	pop	{r4, r5, r6, r7, pc}
   11bf0:	ldr	r1, [pc, #144]	; 11c88 <close_stdout@@Base+0x104>
   11bf4:	mov	r0, #0
   11bf8:	mov	r2, #5
   11bfc:	add	r1, pc, r1
   11c00:	bl	10ff8 <dcgettext@plt>
   11c04:	ldr	r3, [pc, #128]	; 11c8c <close_stdout@@Base+0x108>
   11c08:	ldr	r5, [pc, r3]
   11c0c:	cmp	r5, #0
   11c10:	mov	r6, r0
   11c14:	beq	11c54 <close_stdout@@Base+0xd0>
   11c18:	bl	11118 <__errno_location@plt>
   11c1c:	ldr	r7, [r0]
   11c20:	mov	r0, r5
   11c24:	bl	13518 <close_stdout@@Base+0x1994>
   11c28:	ldr	r2, [pc, #96]	; 11c90 <close_stdout@@Base+0x10c>
   11c2c:	str	r6, [sp]
   11c30:	mov	r1, r7
   11c34:	add	r2, pc, r2
   11c38:	mov	r3, r0
   11c3c:	mov	r0, #0
   11c40:	bl	1107c <error@plt>
   11c44:	ldr	r3, [pc, #72]	; 11c94 <close_stdout@@Base+0x110>
   11c48:	ldr	r3, [r4, r3]
   11c4c:	ldr	r0, [r3]
   11c50:	bl	10fb0 <_exit@plt>
   11c54:	bl	11118 <__errno_location@plt>
   11c58:	ldr	r2, [pc, #56]	; 11c98 <close_stdout@@Base+0x114>
   11c5c:	add	r2, pc, r2
   11c60:	mov	r3, r0
   11c64:	mov	r0, r5
   11c68:	ldr	r1, [r3]
   11c6c:	mov	r3, r6
   11c70:	bl	1107c <error@plt>
   11c74:	b	11c44 <close_stdout@@Base+0xc0>
   11c78:	andeq	r4, r1, r4, ror #8
   11c7c:	andeq	r0, r0, r8, lsl r1
   11c80:	andeq	r4, r1, r8, asr #11
   11c84:	andeq	r0, r0, r4, lsl #2
   11c88:	andeq	r3, r0, r4, asr #32
   11c8c:	andeq	r4, r1, r0, ror r5
   11c90:	andeq	r3, r0, r8, lsl r0
   11c94:	andeq	r0, r0, ip, lsl r1
   11c98:	strdeq	r2, [r0], -r4
   11c9c:	ldrb	r3, [r0]
   11ca0:	cmp	r3, #47	; 0x2f
   11ca4:	bne	11cc0 <close_stdout@@Base+0x13c>
   11ca8:	add	r2, r0, #1
   11cac:	mov	r0, r2
   11cb0:	add	r2, r2, #1
   11cb4:	ldrb	r3, [r0]
   11cb8:	cmp	r3, #47	; 0x2f
   11cbc:	beq	11cac <close_stdout@@Base+0x128>
   11cc0:	cmp	r3, #0
   11cc4:	bxeq	lr
   11cc8:	mov	r2, r0
   11ccc:	mov	r1, #0
   11cd0:	cmp	r3, #47	; 0x2f
   11cd4:	moveq	r1, #1
   11cd8:	beq	11ce8 <close_stdout@@Base+0x164>
   11cdc:	cmp	r1, #0
   11ce0:	movne	r0, r2
   11ce4:	movne	r1, #0
   11ce8:	ldrb	r3, [r2, #1]!
   11cec:	cmp	r3, #0
   11cf0:	bne	11cd0 <close_stdout@@Base+0x14c>
   11cf4:	bx	lr
   11cf8:	push	{r4, lr}
   11cfc:	mov	r4, r0
   11d00:	bl	110f4 <strlen@plt>
   11d04:	cmp	r0, #1
   11d08:	popls	{r4, pc}
   11d0c:	sub	r3, r0, #1
   11d10:	ldrb	r2, [r4, r3]
   11d14:	cmp	r2, #47	; 0x2f
   11d18:	popne	{r4, pc}
   11d1c:	mov	r0, r3
   11d20:	cmp	r0, #1
   11d24:	sub	r3, r3, #1
   11d28:	beq	11d3c <close_stdout@@Base+0x1b8>
   11d2c:	ldrb	r2, [r4, r3]
   11d30:	cmp	r2, #47	; 0x2f
   11d34:	popne	{r4, pc}
   11d38:	b	11d1c <close_stdout@@Base+0x198>
   11d3c:	pop	{r4, pc}
   11d40:	b	10f80 <posix_fadvise64@plt>
   11d44:	cmp	r0, #0
   11d48:	push	{r4, r5, r6, lr}
   11d4c:	mov	r6, r1
   11d50:	sub	sp, sp, #16
   11d54:	beq	11d78 <close_stdout@@Base+0x1f4>
   11d58:	mov	r4, #0
   11d5c:	mov	r5, #0
   11d60:	bl	11160 <fileno@plt>
   11d64:	str	r6, [sp, #8]
   11d68:	mov	r2, r4
   11d6c:	mov	r3, r5
   11d70:	strd	r4, [sp]
   11d74:	bl	11d40 <close_stdout@@Base+0x1bc>
   11d78:	add	sp, sp, #16
   11d7c:	pop	{r4, r5, r6, pc}
   11d80:	push	{r4, r5, r6, lr}
   11d84:	mov	r5, r1
   11d88:	bl	111c0 <fopen64@plt>
   11d8c:	subs	r4, r0, #0
   11d90:	beq	11da0 <close_stdout@@Base+0x21c>
   11d94:	bl	11160 <fileno@plt>
   11d98:	cmp	r0, #2
   11d9c:	bls	11da8 <close_stdout@@Base+0x224>
   11da0:	mov	r0, r4
   11da4:	pop	{r4, r5, r6, pc}
   11da8:	bl	13678 <close_stdout@@Base+0x1af4>
   11dac:	subs	r6, r0, #0
   11db0:	blt	11ddc <close_stdout@@Base+0x258>
   11db4:	mov	r0, r4
   11db8:	bl	13e90 <close_stdout@@Base+0x230c>
   11dbc:	cmp	r0, #0
   11dc0:	bne	11dfc <close_stdout@@Base+0x278>
   11dc4:	mov	r1, r5
   11dc8:	mov	r0, r6
   11dcc:	bl	10f44 <fdopen@plt>
   11dd0:	cmp	r0, #0
   11dd4:	beq	11dfc <close_stdout@@Base+0x278>
   11dd8:	pop	{r4, r5, r6, pc}
   11ddc:	bl	11118 <__errno_location@plt>
   11de0:	ldr	r6, [r0]
   11de4:	mov	r5, r0
   11de8:	mov	r0, r4
   11dec:	bl	13e90 <close_stdout@@Base+0x230c>
   11df0:	mov	r0, #0
   11df4:	str	r6, [r5]
   11df8:	pop	{r4, r5, r6, pc}
   11dfc:	bl	11118 <__errno_location@plt>
   11e00:	ldr	r5, [r0]
   11e04:	mov	r4, r0
   11e08:	mov	r0, r6
   11e0c:	bl	111f0 <close@plt>
   11e10:	mov	r0, #0
   11e14:	str	r5, [r4]
   11e18:	pop	{r4, r5, r6, pc}
   11e1c:	push	{r3, r4, r5, r6, r7, lr}
   11e20:	subs	r4, r0, #0
   11e24:	ldr	r5, [pc, #172]	; 11ed8 <close_stdout@@Base+0x354>
   11e28:	add	r5, pc, r5
   11e2c:	beq	11eb4 <close_stdout@@Base+0x330>
   11e30:	mov	r1, #47	; 0x2f
   11e34:	bl	111a8 <strrchr@plt>
   11e38:	subs	r6, r0, #0
   11e3c:	beq	11e98 <close_stdout@@Base+0x314>
   11e40:	add	r7, r6, #1
   11e44:	rsb	r3, r4, r7
   11e48:	cmp	r3, #6
   11e4c:	ble	11e98 <close_stdout@@Base+0x314>
   11e50:	ldr	r1, [pc, #132]	; 11edc <close_stdout@@Base+0x358>
   11e54:	sub	r0, r6, #6
   11e58:	mov	r2, #7
   11e5c:	add	r1, pc, r1
   11e60:	bl	111d8 <strncmp@plt>
   11e64:	cmp	r0, #0
   11e68:	bne	11e98 <close_stdout@@Base+0x314>
   11e6c:	ldr	r1, [pc, #108]	; 11ee0 <close_stdout@@Base+0x35c>
   11e70:	mov	r0, r7
   11e74:	mov	r2, #3
   11e78:	add	r1, pc, r1
   11e7c:	bl	111d8 <strncmp@plt>
   11e80:	cmp	r0, #0
   11e84:	movne	r4, r7
   11e88:	ldreq	r3, [pc, #84]	; 11ee4 <close_stdout@@Base+0x360>
   11e8c:	addeq	r4, r6, #4
   11e90:	ldreq	r3, [r5, r3]
   11e94:	streq	r4, [r3]
   11e98:	ldr	r2, [pc, #72]	; 11ee8 <close_stdout@@Base+0x364>
   11e9c:	ldr	r3, [pc, #72]	; 11eec <close_stdout@@Base+0x368>
   11ea0:	ldr	r2, [r5, r2]
   11ea4:	str	r4, [r2]
   11ea8:	ldr	r3, [r5, r3]
   11eac:	str	r4, [r3]
   11eb0:	pop	{r3, r4, r5, r6, r7, pc}
   11eb4:	ldr	r3, [pc, #52]	; 11ef0 <close_stdout@@Base+0x36c>
   11eb8:	mov	r1, #1
   11ebc:	ldr	r0, [pc, #48]	; 11ef4 <close_stdout@@Base+0x370>
   11ec0:	mov	r2, #55	; 0x37
   11ec4:	ldr	r3, [r5, r3]
   11ec8:	add	r0, pc, r0
   11ecc:	ldr	r3, [r3]
   11ed0:	bl	11034 <fwrite@plt>
   11ed4:	bl	111e4 <abort@plt>
   11ed8:	ldrdeq	r4, [r1], -r0
   11edc:	andeq	r2, r0, r0, lsr lr
   11ee0:	andeq	r2, r0, ip, lsl lr
   11ee4:	andeq	r0, r0, ip, lsr #2
   11ee8:	andeq	r0, r0, r4, lsr #2
   11eec:	andeq	r0, r0, r0, lsr #2
   11ef0:	andeq	r0, r0, r4, lsl #2
   11ef4:	andeq	r2, r0, ip, lsl #27
   11ef8:	push	{r3, lr}
   11efc:	mov	r3, r0
   11f00:	mov	r2, #0
   11f04:	cmp	r1, #8
   11f08:	str	r2, [r3], #4
   11f0c:	add	r3, r3, #4
   11f10:	str	r2, [r0, #4]
   11f14:	str	r2, [r3], #4
   11f18:	str	r2, [r3], #4
   11f1c:	str	r2, [r3], #4
   11f20:	str	r2, [r3], #4
   11f24:	str	r2, [r3], #4
   11f28:	str	r2, [r3], #4
   11f2c:	str	r2, [r3], #4
   11f30:	str	r2, [r3], #4
   11f34:	str	r2, [r3], #4
   11f38:	str	r2, [r3]
   11f3c:	beq	11f48 <close_stdout@@Base+0x3c4>
   11f40:	str	r1, [r0]
   11f44:	pop	{r3, pc}
   11f48:	bl	111e4 <abort@plt>
   11f4c:	push	{r4, r5, r6, lr}
   11f50:	mov	r4, r0
   11f54:	mov	r6, r1
   11f58:	mov	r0, #0
   11f5c:	mov	r1, r4
   11f60:	mov	r2, #5
   11f64:	bl	10ff8 <dcgettext@plt>
   11f68:	cmp	r0, r4
   11f6c:	mov	r5, r0
   11f70:	beq	11f78 <close_stdout@@Base+0x3f4>
   11f74:	pop	{r4, r5, r6, pc}
   11f78:	bl	1422c <close_stdout@@Base+0x26a8>
   11f7c:	ldrb	r3, [r0]
   11f80:	bic	r3, r3, #32
   11f84:	cmp	r3, #85	; 0x55
   11f88:	bne	11ffc <close_stdout@@Base+0x478>
   11f8c:	ldrb	r3, [r0, #1]
   11f90:	bic	r3, r3, #32
   11f94:	cmp	r3, #84	; 0x54
   11f98:	bne	11fe8 <close_stdout@@Base+0x464>
   11f9c:	ldrb	r3, [r0, #2]
   11fa0:	bic	r3, r3, #32
   11fa4:	cmp	r3, #70	; 0x46
   11fa8:	bne	11fe8 <close_stdout@@Base+0x464>
   11fac:	ldrb	r3, [r0, #3]
   11fb0:	cmp	r3, #45	; 0x2d
   11fb4:	bne	11fe8 <close_stdout@@Base+0x464>
   11fb8:	ldrb	r3, [r0, #4]
   11fbc:	cmp	r3, #56	; 0x38
   11fc0:	bne	11fe8 <close_stdout@@Base+0x464>
   11fc4:	ldrb	r3, [r0, #5]
   11fc8:	cmp	r3, #0
   11fcc:	bne	11fe8 <close_stdout@@Base+0x464>
   11fd0:	ldrb	r3, [r5]
   11fd4:	cmp	r3, #96	; 0x60
   11fd8:	beq	12074 <close_stdout@@Base+0x4f0>
   11fdc:	ldr	r0, [pc, #180]	; 12098 <close_stdout@@Base+0x514>
   11fe0:	add	r0, pc, r0
   11fe4:	pop	{r4, r5, r6, pc}
   11fe8:	cmp	r6, #7
   11fec:	beq	12080 <close_stdout@@Base+0x4fc>
   11ff0:	ldr	r0, [pc, #164]	; 1209c <close_stdout@@Base+0x518>
   11ff4:	add	r0, pc, r0
   11ff8:	pop	{r4, r5, r6, pc}
   11ffc:	cmp	r3, #71	; 0x47
   12000:	bne	11fe8 <close_stdout@@Base+0x464>
   12004:	ldrb	r3, [r0, #1]
   12008:	bic	r3, r3, #32
   1200c:	cmp	r3, #66	; 0x42
   12010:	bne	11fe8 <close_stdout@@Base+0x464>
   12014:	ldrb	r3, [r0, #2]
   12018:	cmp	r3, #49	; 0x31
   1201c:	bne	11fe8 <close_stdout@@Base+0x464>
   12020:	ldrb	r3, [r0, #3]
   12024:	cmp	r3, #56	; 0x38
   12028:	bne	11fe8 <close_stdout@@Base+0x464>
   1202c:	ldrb	r3, [r0, #4]
   12030:	cmp	r3, #48	; 0x30
   12034:	bne	11fe8 <close_stdout@@Base+0x464>
   12038:	ldrb	r3, [r0, #5]
   1203c:	cmp	r3, #51	; 0x33
   12040:	bne	11fe8 <close_stdout@@Base+0x464>
   12044:	ldrb	r3, [r0, #6]
   12048:	cmp	r3, #48	; 0x30
   1204c:	bne	11fe8 <close_stdout@@Base+0x464>
   12050:	ldrb	r3, [r0, #7]
   12054:	cmp	r3, #0
   12058:	bne	11fe8 <close_stdout@@Base+0x464>
   1205c:	ldrb	r3, [r5]
   12060:	cmp	r3, #96	; 0x60
   12064:	beq	1208c <close_stdout@@Base+0x508>
   12068:	ldr	r0, [pc, #48]	; 120a0 <close_stdout@@Base+0x51c>
   1206c:	add	r0, pc, r0
   12070:	pop	{r4, r5, r6, pc}
   12074:	ldr	r0, [pc, #40]	; 120a4 <close_stdout@@Base+0x520>
   12078:	add	r0, pc, r0
   1207c:	pop	{r4, r5, r6, pc}
   12080:	ldr	r0, [pc, #32]	; 120a8 <close_stdout@@Base+0x524>
   12084:	add	r0, pc, r0
   12088:	pop	{r4, r5, r6, pc}
   1208c:	ldr	r0, [pc, #24]	; 120ac <close_stdout@@Base+0x528>
   12090:	add	r0, pc, r0
   12094:	pop	{r4, r5, r6, pc}
   12098:	ldrdeq	r2, [r0], -r8
   1209c:	andeq	r2, r0, ip, asr #25
   120a0:	andeq	r2, r0, r0, asr ip
   120a4:	andeq	r2, r0, r4, asr ip
   120a8:	andeq	r2, r0, r0, asr #24
   120ac:	andeq	r2, r0, r8, lsr ip
   120b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   120b4:	sub	sp, sp, #124	; 0x7c
   120b8:	ldr	ip, [pc, #3304]	; 12da8 <close_stdout@@Base+0x1224>
   120bc:	mov	sl, r1
   120c0:	str	r0, [sp, #40]	; 0x28
   120c4:	mov	r8, r3
   120c8:	ldr	r0, [pc, #3292]	; 12dac <close_stdout@@Base+0x1228>
   120cc:	add	ip, pc, ip
   120d0:	str	r2, [sp, #32]
   120d4:	ldr	r1, [sp, #164]	; 0xa4
   120d8:	mov	r3, ip
   120dc:	ldr	r0, [ip, r0]
   120e0:	ldr	r2, [sp, #172]	; 0xac
   120e4:	ubfx	r1, r1, #1, #1
   120e8:	str	r1, [sp, #36]	; 0x24
   120ec:	str	r0, [sp, #56]	; 0x38
   120f0:	ldr	r0, [sp, #168]	; 0xa8
   120f4:	ldr	r1, [sp, #176]	; 0xb0
   120f8:	str	r2, [sp, #72]	; 0x48
   120fc:	str	r0, [sp, #48]	; 0x30
   12100:	ldr	r0, [sp, #56]	; 0x38
   12104:	str	r1, [sp, #68]	; 0x44
   12108:	ldr	r3, [r0]
   1210c:	str	r3, [sp, #116]	; 0x74
   12110:	bl	1104c <__ctype_get_mb_cur_max@plt>
   12114:	ldr	r2, [sp, #160]	; 0xa0
   12118:	str	r0, [sp, #64]	; 0x40
   1211c:	cmp	r2, #8
   12120:	addls	pc, pc, r2, lsl #2
   12124:	b	12c84 <close_stdout@@Base+0x1100>
   12128:	b	1214c <close_stdout@@Base+0x5c8>
   1212c:	b	1299c <close_stdout@@Base+0xe18>
   12130:	b	129cc <close_stdout@@Base+0xe48>
   12134:	b	1287c <close_stdout@@Base+0xcf8>
   12138:	b	128bc <close_stdout@@Base+0xd38>
   1213c:	b	128e8 <close_stdout@@Base+0xd64>
   12140:	b	12908 <close_stdout@@Base+0xd84>
   12144:	b	12908 <close_stdout@@Base+0xd84>
   12148:	b	12908 <close_stdout@@Base+0xd84>
   1214c:	mov	r2, #0
   12150:	str	r2, [sp, #36]	; 0x24
   12154:	mov	r9, r2
   12158:	str	r2, [sp, #24]
   1215c:	str	r2, [sp, #28]
   12160:	str	r2, [sp, #52]	; 0x34
   12164:	ldr	r0, [sp, #36]	; 0x24
   12168:	mov	fp, #0
   1216c:	ldr	r1, [sp, #24]
   12170:	eor	r2, r0, #1
   12174:	eor	r3, r1, #1
   12178:	and	r3, r2, r3
   1217c:	and	r2, r1, r0
   12180:	str	r3, [sp, #44]	; 0x2c
   12184:	str	r2, [sp, #76]	; 0x4c
   12188:	cmn	r8, #1
   1218c:	beq	1250c <close_stdout@@Base+0x988>
   12190:	subs	r3, fp, r8
   12194:	movne	r3, #1
   12198:	cmp	r3, #0
   1219c:	beq	12524 <close_stdout@@Base+0x9a0>
   121a0:	ldr	r3, [sp, #28]
   121a4:	ldr	r0, [sp, #24]
   121a8:	adds	r7, r3, #0
   121ac:	movne	r7, #1
   121b0:	ands	r6, r7, r0
   121b4:	bne	12a10 <close_stdout@@Base+0xe8c>
   121b8:	ldr	r1, [sp, #32]
   121bc:	add	r5, r1, fp
   121c0:	ldrb	r4, [r5]
   121c4:	cmp	r4, #126	; 0x7e
   121c8:	addls	pc, pc, r4, lsl #2
   121cc:	b	12790 <close_stdout@@Base+0xc0c>
   121d0:	b	1269c <close_stdout@@Base+0xb18>
   121d4:	b	12790 <close_stdout@@Base+0xc0c>
   121d8:	b	12790 <close_stdout@@Base+0xc0c>
   121dc:	b	12790 <close_stdout@@Base+0xc0c>
   121e0:	b	12790 <close_stdout@@Base+0xc0c>
   121e4:	b	12790 <close_stdout@@Base+0xc0c>
   121e8:	b	12790 <close_stdout@@Base+0xc0c>
   121ec:	b	12684 <close_stdout@@Base+0xb00>
   121f0:	b	1266c <close_stdout@@Base+0xae8>
   121f4:	b	12694 <close_stdout@@Base+0xb10>
   121f8:	b	1268c <close_stdout@@Base+0xb08>
   121fc:	b	1267c <close_stdout@@Base+0xaf8>
   12200:	b	12674 <close_stdout@@Base+0xaf0>
   12204:	b	12638 <close_stdout@@Base+0xab4>
   12208:	b	12790 <close_stdout@@Base+0xc0c>
   1220c:	b	12790 <close_stdout@@Base+0xc0c>
   12210:	b	12790 <close_stdout@@Base+0xc0c>
   12214:	b	12790 <close_stdout@@Base+0xc0c>
   12218:	b	12790 <close_stdout@@Base+0xc0c>
   1221c:	b	12790 <close_stdout@@Base+0xc0c>
   12220:	b	12790 <close_stdout@@Base+0xc0c>
   12224:	b	12790 <close_stdout@@Base+0xc0c>
   12228:	b	12790 <close_stdout@@Base+0xc0c>
   1222c:	b	12790 <close_stdout@@Base+0xc0c>
   12230:	b	12790 <close_stdout@@Base+0xc0c>
   12234:	b	12790 <close_stdout@@Base+0xc0c>
   12238:	b	12790 <close_stdout@@Base+0xc0c>
   1223c:	b	12790 <close_stdout@@Base+0xc0c>
   12240:	b	12790 <close_stdout@@Base+0xc0c>
   12244:	b	12790 <close_stdout@@Base+0xc0c>
   12248:	b	12790 <close_stdout@@Base+0xc0c>
   1224c:	b	12790 <close_stdout@@Base+0xc0c>
   12250:	b	125c4 <close_stdout@@Base+0xa40>
   12254:	b	125c4 <close_stdout@@Base+0xa40>
   12258:	b	125c4 <close_stdout@@Base+0xa40>
   1225c:	b	125bc <close_stdout@@Base+0xa38>
   12260:	b	125c4 <close_stdout@@Base+0xa40>
   12264:	b	12498 <close_stdout@@Base+0x914>
   12268:	b	125c4 <close_stdout@@Base+0xa40>
   1226c:	b	12738 <close_stdout@@Base+0xbb4>
   12270:	b	125c4 <close_stdout@@Base+0xa40>
   12274:	b	125c4 <close_stdout@@Base+0xa40>
   12278:	b	125c4 <close_stdout@@Base+0xa40>
   1227c:	b	12498 <close_stdout@@Base+0x914>
   12280:	b	12498 <close_stdout@@Base+0x914>
   12284:	b	12498 <close_stdout@@Base+0x914>
   12288:	b	12498 <close_stdout@@Base+0x914>
   1228c:	b	12498 <close_stdout@@Base+0x914>
   12290:	b	12498 <close_stdout@@Base+0x914>
   12294:	b	12498 <close_stdout@@Base+0x914>
   12298:	b	12498 <close_stdout@@Base+0x914>
   1229c:	b	12498 <close_stdout@@Base+0x914>
   122a0:	b	12498 <close_stdout@@Base+0x914>
   122a4:	b	12498 <close_stdout@@Base+0x914>
   122a8:	b	12498 <close_stdout@@Base+0x914>
   122ac:	b	12498 <close_stdout@@Base+0x914>
   122b0:	b	12498 <close_stdout@@Base+0x914>
   122b4:	b	12498 <close_stdout@@Base+0x914>
   122b8:	b	12498 <close_stdout@@Base+0x914>
   122bc:	b	125c4 <close_stdout@@Base+0xa40>
   122c0:	b	125c4 <close_stdout@@Base+0xa40>
   122c4:	b	125c4 <close_stdout@@Base+0xa40>
   122c8:	b	125c4 <close_stdout@@Base+0xa40>
   122cc:	b	123cc <close_stdout@@Base+0x848>
   122d0:	b	12790 <close_stdout@@Base+0xc0c>
   122d4:	b	12498 <close_stdout@@Base+0x914>
   122d8:	b	12498 <close_stdout@@Base+0x914>
   122dc:	b	12498 <close_stdout@@Base+0x914>
   122e0:	b	12498 <close_stdout@@Base+0x914>
   122e4:	b	12498 <close_stdout@@Base+0x914>
   122e8:	b	12498 <close_stdout@@Base+0x914>
   122ec:	b	12498 <close_stdout@@Base+0x914>
   122f0:	b	12498 <close_stdout@@Base+0x914>
   122f4:	b	12498 <close_stdout@@Base+0x914>
   122f8:	b	12498 <close_stdout@@Base+0x914>
   122fc:	b	12498 <close_stdout@@Base+0x914>
   12300:	b	12498 <close_stdout@@Base+0x914>
   12304:	b	12498 <close_stdout@@Base+0x914>
   12308:	b	12498 <close_stdout@@Base+0x914>
   1230c:	b	12498 <close_stdout@@Base+0x914>
   12310:	b	12498 <close_stdout@@Base+0x914>
   12314:	b	12498 <close_stdout@@Base+0x914>
   12318:	b	12498 <close_stdout@@Base+0x914>
   1231c:	b	12498 <close_stdout@@Base+0x914>
   12320:	b	12498 <close_stdout@@Base+0x914>
   12324:	b	12498 <close_stdout@@Base+0x914>
   12328:	b	12498 <close_stdout@@Base+0x914>
   1232c:	b	12498 <close_stdout@@Base+0x914>
   12330:	b	12498 <close_stdout@@Base+0x914>
   12334:	b	12498 <close_stdout@@Base+0x914>
   12338:	b	12498 <close_stdout@@Base+0x914>
   1233c:	b	125c4 <close_stdout@@Base+0xa40>
   12340:	b	1271c <close_stdout@@Base+0xb98>
   12344:	b	12498 <close_stdout@@Base+0x914>
   12348:	b	125c4 <close_stdout@@Base+0xa40>
   1234c:	b	12498 <close_stdout@@Base+0x914>
   12350:	b	125c4 <close_stdout@@Base+0xa40>
   12354:	b	12498 <close_stdout@@Base+0x914>
   12358:	b	12498 <close_stdout@@Base+0x914>
   1235c:	b	12498 <close_stdout@@Base+0x914>
   12360:	b	12498 <close_stdout@@Base+0x914>
   12364:	b	12498 <close_stdout@@Base+0x914>
   12368:	b	12498 <close_stdout@@Base+0x914>
   1236c:	b	12498 <close_stdout@@Base+0x914>
   12370:	b	12498 <close_stdout@@Base+0x914>
   12374:	b	12498 <close_stdout@@Base+0x914>
   12378:	b	12498 <close_stdout@@Base+0x914>
   1237c:	b	12498 <close_stdout@@Base+0x914>
   12380:	b	12498 <close_stdout@@Base+0x914>
   12384:	b	12498 <close_stdout@@Base+0x914>
   12388:	b	12498 <close_stdout@@Base+0x914>
   1238c:	b	12498 <close_stdout@@Base+0x914>
   12390:	b	12498 <close_stdout@@Base+0x914>
   12394:	b	12498 <close_stdout@@Base+0x914>
   12398:	b	12498 <close_stdout@@Base+0x914>
   1239c:	b	12498 <close_stdout@@Base+0x914>
   123a0:	b	12498 <close_stdout@@Base+0x914>
   123a4:	b	12498 <close_stdout@@Base+0x914>
   123a8:	b	12498 <close_stdout@@Base+0x914>
   123ac:	b	12498 <close_stdout@@Base+0x914>
   123b0:	b	12498 <close_stdout@@Base+0x914>
   123b4:	b	12498 <close_stdout@@Base+0x914>
   123b8:	b	12498 <close_stdout@@Base+0x914>
   123bc:	b	125a4 <close_stdout@@Base+0xa20>
   123c0:	b	125c4 <close_stdout@@Base+0xa40>
   123c4:	b	125a4 <close_stdout@@Base+0xa20>
   123c8:	b	125bc <close_stdout@@Base+0xa38>
   123cc:	ldr	r3, [sp, #160]	; 0xa0
   123d0:	cmp	r3, #2
   123d4:	beq	12c60 <close_stdout@@Base+0x10dc>
   123d8:	cmp	r3, #3
   123dc:	bne	12498 <close_stdout@@Base+0x914>
   123e0:	ldr	r1, [sp, #164]	; 0xa4
   123e4:	tst	r1, #4
   123e8:	beq	12498 <close_stdout@@Base+0x914>
   123ec:	add	r3, fp, #2
   123f0:	cmp	r8, r3
   123f4:	bls	12498 <close_stdout@@Base+0x914>
   123f8:	ldrb	r2, [r5, #1]
   123fc:	mov	r1, #1
   12400:	cmp	r2, #63	; 0x3f
   12404:	bne	12498 <close_stdout@@Base+0x914>
   12408:	ldr	r0, [sp, #32]
   1240c:	ldrb	ip, [r0, r3]
   12410:	sub	r0, ip, #33	; 0x21
   12414:	uxtb	r0, r0
   12418:	cmp	r0, #29
   1241c:	bhi	12498 <close_stdout@@Base+0x914>
   12420:	lsl	r1, r1, r0
   12424:	movw	r0, #20929	; 0x51c1
   12428:	movt	r0, #14336	; 0x3800
   1242c:	and	r0, r1, r0
   12430:	cmp	r0, #0
   12434:	beq	12498 <close_stdout@@Base+0x914>
   12438:	ldr	r1, [sp, #36]	; 0x24
   1243c:	cmp	r1, #0
   12440:	bne	125e0 <close_stdout@@Base+0xa5c>
   12444:	cmp	r9, sl
   12448:	mov	r4, ip
   1244c:	mov	fp, r3
   12450:	ldrcc	r0, [sp, #40]	; 0x28
   12454:	strbcc	r2, [r0, r9]
   12458:	add	r2, r9, #1
   1245c:	cmp	sl, r2
   12460:	ldrhi	r0, [sp, #40]	; 0x28
   12464:	movhi	r1, #34	; 0x22
   12468:	strbhi	r1, [r0, r2]
   1246c:	add	r2, r9, #2
   12470:	cmp	sl, r2
   12474:	ldrhi	r0, [sp, #40]	; 0x28
   12478:	movhi	r1, #34	; 0x22
   1247c:	strbhi	r1, [r0, r2]
   12480:	add	r2, r9, #3
   12484:	cmp	sl, r2
   12488:	add	r9, r9, #4
   1248c:	ldrhi	r0, [sp, #40]	; 0x28
   12490:	movhi	r1, #63	; 0x3f
   12494:	strbhi	r1, [r0, r2]
   12498:	ldr	r0, [sp, #44]	; 0x2c
   1249c:	cmp	r0, #0
   124a0:	bne	124c8 <close_stdout@@Base+0x944>
   124a4:	ldr	r1, [sp, #48]	; 0x30
   124a8:	cmp	r1, #0
   124ac:	beq	124c8 <close_stdout@@Base+0x944>
   124b0:	ubfx	r2, r4, #5, #8
   124b4:	and	r3, r4, #31
   124b8:	ldr	r2, [r1, r2, lsl #2]
   124bc:	lsr	r3, r2, r3
   124c0:	tst	r3, #1
   124c4:	bne	124d0 <close_stdout@@Base+0x94c>
   124c8:	cmp	r6, #0
   124cc:	beq	124f0 <close_stdout@@Base+0x96c>
   124d0:	ldr	r2, [sp, #36]	; 0x24
   124d4:	cmp	r2, #0
   124d8:	bne	125e0 <close_stdout@@Base+0xa5c>
   124dc:	cmp	r9, sl
   124e0:	ldrcc	r0, [sp, #40]	; 0x28
   124e4:	movcc	r3, #92	; 0x5c
   124e8:	strbcc	r3, [r0, r9]
   124ec:	add	r9, r9, #1
   124f0:	add	fp, fp, #1
   124f4:	cmp	r9, sl
   124f8:	ldrcc	r1, [sp, #40]	; 0x28
   124fc:	strbcc	r4, [r1, r9]
   12500:	cmn	r8, #1
   12504:	add	r9, r9, #1
   12508:	bne	12190 <close_stdout@@Base+0x60c>
   1250c:	ldr	r2, [sp, #32]
   12510:	ldrb	r3, [r2, fp]
   12514:	adds	r3, r3, #0
   12518:	movne	r3, #1
   1251c:	cmp	r3, #0
   12520:	bne	121a0 <close_stdout@@Base+0x61c>
   12524:	ldr	r3, [sp, #160]	; 0xa0
   12528:	cmp	r9, #0
   1252c:	cmpeq	r3, #2
   12530:	bne	12540 <close_stdout@@Base+0x9bc>
   12534:	ldr	r0, [sp, #36]	; 0x24
   12538:	cmp	r0, #0
   1253c:	bne	125e0 <close_stdout@@Base+0xa5c>
   12540:	ldr	r1, [sp, #36]	; 0x24
   12544:	ldr	r2, [sp, #52]	; 0x34
   12548:	eor	r3, r1, #1
   1254c:	cmp	r2, #0
   12550:	moveq	r3, #0
   12554:	andne	r3, r3, #1
   12558:	cmp	r3, #0
   1255c:	beq	12588 <close_stdout@@Base+0xa04>
   12560:	ldrb	r3, [r2]
   12564:	cmp	r3, #0
   12568:	beq	12588 <close_stdout@@Base+0xa04>
   1256c:	ldr	r1, [sp, #40]	; 0x28
   12570:	cmp	sl, r9
   12574:	strbhi	r3, [r1, r9]
   12578:	ldrb	r3, [r2, #1]!
   1257c:	add	r9, r9, #1
   12580:	cmp	r3, #0
   12584:	bne	12570 <close_stdout@@Base+0x9ec>
   12588:	cmp	r9, sl
   1258c:	movcs	r0, r9
   12590:	ldrcc	r1, [sp, #40]	; 0x28
   12594:	movcc	r3, #0
   12598:	movcc	r0, r9
   1259c:	strbcc	r3, [r1, r9]
   125a0:	b	1261c <close_stdout@@Base+0xa98>
   125a4:	cmn	r8, #1
   125a8:	beq	12c70 <close_stdout@@Base+0x10ec>
   125ac:	subs	r3, r8, #1
   125b0:	movne	r3, #1
   125b4:	cmp	r3, #0
   125b8:	bne	12498 <close_stdout@@Base+0x914>
   125bc:	cmp	fp, #0
   125c0:	bne	12498 <close_stdout@@Base+0x914>
   125c4:	ldr	r3, [sp, #36]	; 0x24
   125c8:	ldr	r0, [sp, #160]	; 0xa0
   125cc:	cmp	r0, #2
   125d0:	movne	r3, #0
   125d4:	andeq	r3, r3, #1
   125d8:	cmp	r3, #0
   125dc:	beq	12498 <close_stdout@@Base+0x914>
   125e0:	ldr	r2, [sp, #164]	; 0xa4
   125e4:	mov	ip, #0
   125e8:	ldr	r0, [sp, #160]	; 0xa0
   125ec:	bic	r3, r2, #2
   125f0:	ldr	r1, [sp, #72]	; 0x48
   125f4:	ldr	r2, [sp, #68]	; 0x44
   125f8:	stm	sp, {r0, r3}
   125fc:	mov	r3, r8
   12600:	str	r1, [sp, #12]
   12604:	mov	r1, sl
   12608:	str	r2, [sp, #16]
   1260c:	ldr	r0, [sp, #40]	; 0x28
   12610:	ldr	r2, [sp, #32]
   12614:	str	ip, [sp, #8]
   12618:	bl	120b0 <close_stdout@@Base+0x52c>
   1261c:	ldr	r1, [sp, #56]	; 0x38
   12620:	ldr	r2, [sp, #116]	; 0x74
   12624:	ldr	r3, [r1]
   12628:	cmp	r2, r3
   1262c:	bne	12d60 <close_stdout@@Base+0x11dc>
   12630:	add	sp, sp, #124	; 0x7c
   12634:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12638:	mov	r3, #114	; 0x72
   1263c:	ldr	r2, [sp, #36]	; 0x24
   12640:	ldr	r0, [sp, #160]	; 0xa0
   12644:	cmp	r0, #2
   12648:	movne	r2, #0
   1264c:	andeq	r2, r2, #1
   12650:	cmp	r2, #0
   12654:	bne	125e0 <close_stdout@@Base+0xa5c>
   12658:	ldr	r1, [sp, #24]
   1265c:	cmp	r1, #0
   12660:	beq	12498 <close_stdout@@Base+0x914>
   12664:	mov	r4, r3
   12668:	b	124d0 <close_stdout@@Base+0x94c>
   1266c:	mov	r3, #98	; 0x62
   12670:	b	12658 <close_stdout@@Base+0xad4>
   12674:	mov	r3, #102	; 0x66
   12678:	b	12658 <close_stdout@@Base+0xad4>
   1267c:	mov	r3, #118	; 0x76
   12680:	b	12658 <close_stdout@@Base+0xad4>
   12684:	mov	r3, #97	; 0x61
   12688:	b	12658 <close_stdout@@Base+0xad4>
   1268c:	mov	r3, #110	; 0x6e
   12690:	b	1263c <close_stdout@@Base+0xab8>
   12694:	mov	r3, #116	; 0x74
   12698:	b	1263c <close_stdout@@Base+0xab8>
   1269c:	ldr	r2, [sp, #24]
   126a0:	cmp	r2, #0
   126a4:	beq	12c4c <close_stdout@@Base+0x10c8>
   126a8:	ldr	r3, [sp, #36]	; 0x24
   126ac:	cmp	r3, #0
   126b0:	bne	125e0 <close_stdout@@Base+0xa5c>
   126b4:	cmp	r9, sl
   126b8:	add	r2, r9, #1
   126bc:	ldrcc	r0, [sp, #40]	; 0x28
   126c0:	movcc	r3, #92	; 0x5c
   126c4:	strbcc	r3, [r0, r9]
   126c8:	add	r3, fp, #1
   126cc:	cmp	r8, r3
   126d0:	bls	12710 <close_stdout@@Base+0xb8c>
   126d4:	ldr	r1, [sp, #32]
   126d8:	ldrb	r3, [r1, r3]
   126dc:	sub	r3, r3, #48	; 0x30
   126e0:	cmp	r3, #9
   126e4:	bhi	12710 <close_stdout@@Base+0xb8c>
   126e8:	cmp	sl, r2
   126ec:	ldrhi	r0, [sp, #40]	; 0x28
   126f0:	movhi	r3, #48	; 0x30
   126f4:	strbhi	r3, [r0, r2]
   126f8:	add	r3, r9, #2
   126fc:	cmp	sl, r3
   12700:	ldrhi	r1, [sp, #40]	; 0x28
   12704:	movhi	r2, #48	; 0x30
   12708:	strbhi	r2, [r1, r3]
   1270c:	add	r2, r9, #3
   12710:	mov	r9, r2
   12714:	mov	r4, #48	; 0x30
   12718:	b	124a4 <close_stdout@@Base+0x920>
   1271c:	ldr	r1, [sp, #76]	; 0x4c
   12720:	cmp	r1, #0
   12724:	beq	12730 <close_stdout@@Base+0xbac>
   12728:	cmp	r7, #0
   1272c:	bne	124f0 <close_stdout@@Base+0x96c>
   12730:	mov	r3, r4
   12734:	b	1263c <close_stdout@@Base+0xab8>
   12738:	ldr	r1, [sp, #160]	; 0xa0
   1273c:	cmp	r1, #2
   12740:	bne	12498 <close_stdout@@Base+0x914>
   12744:	ldr	r2, [sp, #36]	; 0x24
   12748:	cmp	r2, #0
   1274c:	bne	125e0 <close_stdout@@Base+0xa5c>
   12750:	cmp	r9, sl
   12754:	ldrcc	r0, [sp, #40]	; 0x28
   12758:	movcc	r3, #39	; 0x27
   1275c:	strbcc	r3, [r0, r9]
   12760:	add	r3, r9, #1
   12764:	cmp	sl, r3
   12768:	ldrhi	r1, [sp, #40]	; 0x28
   1276c:	movhi	r2, #92	; 0x5c
   12770:	strbhi	r2, [r1, r3]
   12774:	add	r3, r9, #2
   12778:	cmp	sl, r3
   1277c:	add	r9, r9, #3
   12780:	ldrhi	r0, [sp, #40]	; 0x28
   12784:	movhi	r2, #39	; 0x27
   12788:	strbhi	r2, [r0, r3]
   1278c:	b	12498 <close_stdout@@Base+0x914>
   12790:	ldr	r1, [sp, #64]	; 0x40
   12794:	cmp	r1, #1
   12798:	bne	12a90 <close_stdout@@Base+0xf0c>
   1279c:	bl	110dc <__ctype_b_loc@plt>
   127a0:	ldr	r2, [sp, #64]	; 0x40
   127a4:	sxth	r3, r4
   127a8:	str	r2, [sp, #60]	; 0x3c
   127ac:	lsl	r3, r3, #1
   127b0:	ldr	r2, [r0]
   127b4:	ldrh	r2, [r2, r3]
   127b8:	eor	r2, r2, #16384	; 0x4000
   127bc:	ubfx	r2, r2, #14, #1
   127c0:	ldr	r1, [sp, #24]
   127c4:	ands	r2, r2, r1
   127c8:	beq	12498 <close_stdout@@Base+0x914>
   127cc:	ldr	r3, [sp, #60]	; 0x3c
   127d0:	mov	r0, #92	; 0x5c
   127d4:	ldr	r7, [sp, #36]	; 0x24
   127d8:	add	r1, r3, fp
   127dc:	str	r8, [sp, #60]	; 0x3c
   127e0:	ldr	r3, [sp, #40]	; 0x28
   127e4:	b	12848 <close_stdout@@Base+0xcc4>
   127e8:	cmp	r7, #0
   127ec:	bne	12c88 <close_stdout@@Base+0x1104>
   127f0:	add	ip, r9, #1
   127f4:	cmp	r9, sl
   127f8:	strbcc	r0, [r3, r9]
   127fc:	cmp	sl, ip
   12800:	lsrhi	r8, r4, #6
   12804:	addhi	r8, r8, #48	; 0x30
   12808:	strbhi	r8, [r3, ip]
   1280c:	add	ip, r9, #2
   12810:	add	r9, r9, #3
   12814:	cmp	sl, ip
   12818:	ubfxhi	r8, r4, #3, #3
   1281c:	and	r4, r4, #7
   12820:	add	r4, r4, #48	; 0x30
   12824:	addhi	r8, r8, #48	; 0x30
   12828:	strbhi	r8, [r3, ip]
   1282c:	add	fp, fp, #1
   12830:	cmp	r1, fp
   12834:	bls	12874 <close_stdout@@Base+0xcf0>
   12838:	cmp	r9, sl
   1283c:	strbcc	r4, [r3, r9]
   12840:	ldrb	r4, [r5, #1]!
   12844:	add	r9, r9, #1
   12848:	cmp	r2, #0
   1284c:	bne	127e8 <close_stdout@@Base+0xc64>
   12850:	cmp	r6, #0
   12854:	beq	1282c <close_stdout@@Base+0xca8>
   12858:	add	fp, fp, #1
   1285c:	cmp	r9, sl
   12860:	strbcc	r0, [r3, r9]
   12864:	cmp	r1, fp
   12868:	add	r9, r9, #1
   1286c:	mov	r6, #0
   12870:	bhi	12838 <close_stdout@@Base+0xcb4>
   12874:	ldr	r8, [sp, #60]	; 0x3c
   12878:	b	124f4 <close_stdout@@Base+0x970>
   1287c:	ldr	r3, [sp, #36]	; 0x24
   12880:	cmp	r3, #0
   12884:	bne	12d88 <close_stdout@@Base+0x1204>
   12888:	cmp	sl, #0
   1288c:	beq	12ca0 <close_stdout@@Base+0x111c>
   12890:	ldr	r1, [sp, #40]	; 0x28
   12894:	mov	r0, #1
   12898:	ldr	r2, [pc, #1296]	; 12db0 <close_stdout@@Base+0x122c>
   1289c:	mov	r3, #34	; 0x22
   128a0:	str	r0, [sp, #24]
   128a4:	mov	r9, r0
   128a8:	add	r2, pc, r2
   128ac:	str	r0, [sp, #28]
   128b0:	strb	r3, [r1]
   128b4:	str	r2, [sp, #52]	; 0x34
   128b8:	b	12164 <close_stdout@@Base+0x5e0>
   128bc:	ldr	r3, [pc, #1264]	; 12db4 <close_stdout@@Base+0x1230>
   128c0:	mov	r2, #1
   128c4:	mov	r0, #3
   128c8:	str	r2, [sp, #36]	; 0x24
   128cc:	add	r3, pc, r3
   128d0:	str	r2, [sp, #24]
   128d4:	str	r3, [sp, #52]	; 0x34
   128d8:	mov	r9, #0
   128dc:	str	r2, [sp, #28]
   128e0:	str	r0, [sp, #160]	; 0xa0
   128e4:	b	12164 <close_stdout@@Base+0x5e0>
   128e8:	mov	r0, #0
   128ec:	mov	r1, #1
   128f0:	str	r0, [sp, #36]	; 0x24
   128f4:	mov	r9, r0
   128f8:	str	r1, [sp, #24]
   128fc:	str	r0, [sp, #28]
   12900:	str	r0, [sp, #52]	; 0x34
   12904:	b	12164 <close_stdout@@Base+0x5e0>
   12908:	ldr	r3, [sp, #160]	; 0xa0
   1290c:	cmp	r3, #8
   12910:	beq	1293c <close_stdout@@Base+0xdb8>
   12914:	ldr	r0, [pc, #1180]	; 12db8 <close_stdout@@Base+0x1234>
   12918:	mov	r1, r3
   1291c:	add	r0, pc, r0
   12920:	bl	11f4c <close_stdout@@Base+0x3c8>
   12924:	ldr	r1, [sp, #160]	; 0xa0
   12928:	str	r0, [sp, #72]	; 0x48
   1292c:	ldr	r0, [pc, #1160]	; 12dbc <close_stdout@@Base+0x1238>
   12930:	add	r0, pc, r0
   12934:	bl	11f4c <close_stdout@@Base+0x3c8>
   12938:	str	r0, [sp, #68]	; 0x44
   1293c:	ldr	r0, [sp, #36]	; 0x24
   12940:	cmp	r0, #0
   12944:	movne	r9, #0
   12948:	bne	12980 <close_stdout@@Base+0xdfc>
   1294c:	ldr	r1, [sp, #72]	; 0x48
   12950:	ldrb	r3, [r1]
   12954:	cmp	r3, #0
   12958:	beq	12d58 <close_stdout@@Base+0x11d4>
   1295c:	mov	r2, r1
   12960:	ldr	r1, [sp, #40]	; 0x28
   12964:	mov	r9, r0
   12968:	cmp	r9, sl
   1296c:	strbcc	r3, [r1, r9]
   12970:	ldrb	r3, [r2, #1]!
   12974:	add	r9, r9, #1
   12978:	cmp	r3, #0
   1297c:	bne	12968 <close_stdout@@Base+0xde4>
   12980:	ldr	r0, [sp, #68]	; 0x44
   12984:	str	r0, [sp, #52]	; 0x34
   12988:	bl	110f4 <strlen@plt>
   1298c:	mov	r2, #1
   12990:	str	r2, [sp, #24]
   12994:	str	r0, [sp, #28]
   12998:	b	12164 <close_stdout@@Base+0x5e0>
   1299c:	ldr	r3, [pc, #1052]	; 12dc0 <close_stdout@@Base+0x123c>
   129a0:	mov	r2, #0
   129a4:	mov	r1, #1
   129a8:	mov	r0, #2
   129ac:	add	r3, pc, r3
   129b0:	str	r1, [sp, #36]	; 0x24
   129b4:	str	r2, [sp, #24]
   129b8:	mov	r9, r2
   129bc:	str	r1, [sp, #28]
   129c0:	str	r3, [sp, #52]	; 0x34
   129c4:	str	r0, [sp, #160]	; 0xa0
   129c8:	b	12164 <close_stdout@@Base+0x5e0>
   129cc:	ldr	r3, [sp, #36]	; 0x24
   129d0:	cmp	r3, #0
   129d4:	bne	12d64 <close_stdout@@Base+0x11e0>
   129d8:	cmp	sl, #0
   129dc:	beq	12cc0 <close_stdout@@Base+0x113c>
   129e0:	ldr	r1, [sp, #40]	; 0x28
   129e4:	mov	r3, #39	; 0x27
   129e8:	ldr	r2, [sp, #36]	; 0x24
   129ec:	mov	r0, #1
   129f0:	mov	r9, r0
   129f4:	str	r0, [sp, #28]
   129f8:	strb	r3, [r1]
   129fc:	ldr	r3, [pc, #960]	; 12dc4 <close_stdout@@Base+0x1240>
   12a00:	str	r2, [sp, #24]
   12a04:	add	r3, pc, r3
   12a08:	str	r3, [sp, #52]	; 0x34
   12a0c:	b	12164 <close_stdout@@Base+0x5e0>
   12a10:	ldr	r2, [sp, #28]
   12a14:	cmp	r2, #1
   12a18:	add	r4, fp, r2
   12a1c:	movls	r3, #0
   12a20:	movhi	r3, #1
   12a24:	cmn	r8, #1
   12a28:	movne	r3, #0
   12a2c:	cmp	r3, #0
   12a30:	beq	12a40 <close_stdout@@Base+0xebc>
   12a34:	ldr	r0, [sp, #32]
   12a38:	bl	110f4 <strlen@plt>
   12a3c:	mov	r8, r0
   12a40:	cmp	r8, r4
   12a44:	ldrcc	r3, [sp, #32]
   12a48:	movcc	r6, #0
   12a4c:	addcc	r5, r3, fp
   12a50:	bcc	121c0 <close_stdout@@Base+0x63c>
   12a54:	ldr	r0, [sp, #32]
   12a58:	ldr	r1, [sp, #52]	; 0x34
   12a5c:	add	r5, r0, fp
   12a60:	ldr	r2, [sp, #28]
   12a64:	mov	r0, r5
   12a68:	bl	10fec <memcmp@plt>
   12a6c:	cmp	r0, #0
   12a70:	bne	12a88 <close_stdout@@Base+0xf04>
   12a74:	ldr	r1, [sp, #36]	; 0x24
   12a78:	cmp	r1, #0
   12a7c:	bne	125e0 <close_stdout@@Base+0xa5c>
   12a80:	mov	r6, #1
   12a84:	b	121c0 <close_stdout@@Base+0x63c>
   12a88:	mov	r6, #0
   12a8c:	b	121c0 <close_stdout@@Base+0x63c>
   12a90:	add	r7, sp, #108	; 0x6c
   12a94:	cmn	r8, #1
   12a98:	mov	r3, #0
   12a9c:	str	r3, [sp, #108]	; 0x6c
   12aa0:	str	r3, [r7, #4]
   12aa4:	beq	12c90 <close_stdout@@Base+0x110c>
   12aa8:	mov	r1, #0
   12aac:	ldr	r0, [sp, #32]
   12ab0:	mov	ip, #1
   12ab4:	str	r9, [sp, #88]	; 0x58
   12ab8:	str	r6, [sp, #96]	; 0x60
   12abc:	mov	r9, r1
   12ac0:	str	r5, [sp, #100]	; 0x64
   12ac4:	mov	r6, ip
   12ac8:	mov	r5, r7
   12acc:	add	r3, sp, #104	; 0x68
   12ad0:	sub	r0, r0, #1
   12ad4:	str	r3, [sp, #80]	; 0x50
   12ad8:	str	r0, [sp, #84]	; 0x54
   12adc:	str	r1, [sp, #60]	; 0x3c
   12ae0:	str	r4, [sp, #92]	; 0x5c
   12ae4:	ldr	r2, [sp, #32]
   12ae8:	add	r7, r9, fp
   12aec:	add	r0, sp, #104	; 0x68
   12af0:	mov	r3, r5
   12af4:	add	r4, r2, r7
   12af8:	rsb	r2, r7, r8
   12afc:	mov	r1, r4
   12b00:	bl	11070 <mbrtowc@plt>
   12b04:	subs	r2, r0, #0
   12b08:	beq	12c14 <close_stdout@@Base+0x1090>
   12b0c:	cmn	r2, #1
   12b10:	beq	12d3c <close_stdout@@Base+0x11b8>
   12b14:	cmn	r2, #2
   12b18:	beq	12ce0 <close_stdout@@Base+0x115c>
   12b1c:	ldr	r3, [sp, #36]	; 0x24
   12b20:	ldr	r0, [sp, #160]	; 0xa0
   12b24:	cmp	r0, #2
   12b28:	movne	r3, #0
   12b2c:	andeq	r3, r3, #1
   12b30:	cmp	r3, #0
   12b34:	beq	12bf0 <close_stdout@@Base+0x106c>
   12b38:	cmp	r2, #1
   12b3c:	beq	12bf0 <close_stdout@@Base+0x106c>
   12b40:	ldr	r1, [sp, #84]	; 0x54
   12b44:	add	r3, r1, r2
   12b48:	add	r7, r3, r7
   12b4c:	ldrb	r3, [r4, #1]!
   12b50:	sub	r3, r3, #91	; 0x5b
   12b54:	cmp	r3, #33	; 0x21
   12b58:	addls	pc, pc, r3, lsl #2
   12b5c:	b	12be8 <close_stdout@@Base+0x1064>
   12b60:	b	125e0 <close_stdout@@Base+0xa5c>
   12b64:	b	125e0 <close_stdout@@Base+0xa5c>
   12b68:	b	12be8 <close_stdout@@Base+0x1064>
   12b6c:	b	125e0 <close_stdout@@Base+0xa5c>
   12b70:	b	12be8 <close_stdout@@Base+0x1064>
   12b74:	b	125e0 <close_stdout@@Base+0xa5c>
   12b78:	b	12be8 <close_stdout@@Base+0x1064>
   12b7c:	b	12be8 <close_stdout@@Base+0x1064>
   12b80:	b	12be8 <close_stdout@@Base+0x1064>
   12b84:	b	12be8 <close_stdout@@Base+0x1064>
   12b88:	b	12be8 <close_stdout@@Base+0x1064>
   12b8c:	b	12be8 <close_stdout@@Base+0x1064>
   12b90:	b	12be8 <close_stdout@@Base+0x1064>
   12b94:	b	12be8 <close_stdout@@Base+0x1064>
   12b98:	b	12be8 <close_stdout@@Base+0x1064>
   12b9c:	b	12be8 <close_stdout@@Base+0x1064>
   12ba0:	b	12be8 <close_stdout@@Base+0x1064>
   12ba4:	b	12be8 <close_stdout@@Base+0x1064>
   12ba8:	b	12be8 <close_stdout@@Base+0x1064>
   12bac:	b	12be8 <close_stdout@@Base+0x1064>
   12bb0:	b	12be8 <close_stdout@@Base+0x1064>
   12bb4:	b	12be8 <close_stdout@@Base+0x1064>
   12bb8:	b	12be8 <close_stdout@@Base+0x1064>
   12bbc:	b	12be8 <close_stdout@@Base+0x1064>
   12bc0:	b	12be8 <close_stdout@@Base+0x1064>
   12bc4:	b	12be8 <close_stdout@@Base+0x1064>
   12bc8:	b	12be8 <close_stdout@@Base+0x1064>
   12bcc:	b	12be8 <close_stdout@@Base+0x1064>
   12bd0:	b	12be8 <close_stdout@@Base+0x1064>
   12bd4:	b	12be8 <close_stdout@@Base+0x1064>
   12bd8:	b	12be8 <close_stdout@@Base+0x1064>
   12bdc:	b	12be8 <close_stdout@@Base+0x1064>
   12be0:	b	12be8 <close_stdout@@Base+0x1064>
   12be4:	b	125e0 <close_stdout@@Base+0xa5c>
   12be8:	cmp	r4, r7
   12bec:	bne	12b4c <close_stdout@@Base+0xfc8>
   12bf0:	ldr	r0, [sp, #104]	; 0x68
   12bf4:	add	r9, r9, r2
   12bf8:	bl	11028 <iswprint@plt>
   12bfc:	cmp	r0, #0
   12c00:	mov	r0, r5
   12c04:	moveq	r6, #0
   12c08:	bl	10fc8 <mbsinit@plt>
   12c0c:	cmp	r0, #0
   12c10:	beq	12ae4 <close_stdout@@Base+0xf60>
   12c14:	mov	ip, r6
   12c18:	eor	r2, ip, #1
   12c1c:	str	r9, [sp, #60]	; 0x3c
   12c20:	ldr	r4, [sp, #92]	; 0x5c
   12c24:	uxtb	r2, r2
   12c28:	ldr	r9, [sp, #88]	; 0x58
   12c2c:	ldr	r6, [sp, #96]	; 0x60
   12c30:	ldr	r5, [sp, #100]	; 0x64
   12c34:	ldr	r3, [sp, #60]	; 0x3c
   12c38:	cmp	r3, #1
   12c3c:	bls	127c0 <close_stdout@@Base+0xc3c>
   12c40:	ldr	r0, [sp, #24]
   12c44:	and	r2, r2, r0
   12c48:	b	127cc <close_stdout@@Base+0xc48>
   12c4c:	ldr	r2, [sp, #164]	; 0xa4
   12c50:	tst	r2, #1
   12c54:	addne	fp, fp, #1
   12c58:	bne	12188 <close_stdout@@Base+0x604>
   12c5c:	b	12498 <close_stdout@@Base+0x914>
   12c60:	ldr	r0, [sp, #36]	; 0x24
   12c64:	cmp	r0, #0
   12c68:	beq	12498 <close_stdout@@Base+0x914>
   12c6c:	b	125e0 <close_stdout@@Base+0xa5c>
   12c70:	ldr	r2, [sp, #32]
   12c74:	ldrb	r3, [r2, #1]
   12c78:	adds	r3, r3, #0
   12c7c:	movne	r3, #1
   12c80:	b	125b4 <close_stdout@@Base+0xa30>
   12c84:	bl	111e4 <abort@plt>
   12c88:	ldr	r8, [sp, #60]	; 0x3c
   12c8c:	b	125e0 <close_stdout@@Base+0xa5c>
   12c90:	ldr	r0, [sp, #32]
   12c94:	bl	110f4 <strlen@plt>
   12c98:	mov	r8, r0
   12c9c:	b	12aa8 <close_stdout@@Base+0xf24>
   12ca0:	ldr	r2, [pc, #288]	; 12dc8 <close_stdout@@Base+0x1244>
   12ca4:	mov	r1, #1
   12ca8:	mov	r9, r1
   12cac:	str	r1, [sp, #24]
   12cb0:	add	r2, pc, r2
   12cb4:	str	r1, [sp, #28]
   12cb8:	str	r2, [sp, #52]	; 0x34
   12cbc:	b	12164 <close_stdout@@Base+0x5e0>
   12cc0:	ldr	r2, [pc, #260]	; 12dcc <close_stdout@@Base+0x1248>
   12cc4:	mov	r3, #1
   12cc8:	mov	r9, r3
   12ccc:	str	r3, [sp, #28]
   12cd0:	add	r2, pc, r2
   12cd4:	str	sl, [sp, #24]
   12cd8:	str	r2, [sp, #52]	; 0x34
   12cdc:	b	12164 <close_stdout@@Base+0x5e0>
   12ce0:	cmp	r8, r7
   12ce4:	str	r9, [sp, #60]	; 0x3c
   12ce8:	mov	ip, r4
   12cec:	ldr	r6, [sp, #96]	; 0x60
   12cf0:	ldr	r9, [sp, #88]	; 0x58
   12cf4:	ldr	r4, [sp, #92]	; 0x5c
   12cf8:	ldr	r5, [sp, #100]	; 0x64
   12cfc:	bls	12d34 <close_stdout@@Base+0x11b0>
   12d00:	ldrb	r3, [ip]
   12d04:	cmp	r3, #0
   12d08:	beq	12d34 <close_stdout@@Base+0x11b0>
   12d0c:	ldr	r3, [sp, #60]	; 0x3c
   12d10:	b	12d20 <close_stdout@@Base+0x119c>
   12d14:	ldrb	r2, [r5, r3]
   12d18:	cmp	r2, #0
   12d1c:	beq	12d30 <close_stdout@@Base+0x11ac>
   12d20:	add	r3, r3, #1
   12d24:	add	r2, fp, r3
   12d28:	cmp	r8, r2
   12d2c:	bhi	12d14 <close_stdout@@Base+0x1190>
   12d30:	str	r3, [sp, #60]	; 0x3c
   12d34:	mov	r2, #1
   12d38:	b	12c34 <close_stdout@@Base+0x10b0>
   12d3c:	str	r9, [sp, #60]	; 0x3c
   12d40:	mov	r2, #1
   12d44:	ldr	r4, [sp, #92]	; 0x5c
   12d48:	ldr	r6, [sp, #96]	; 0x60
   12d4c:	ldr	r9, [sp, #88]	; 0x58
   12d50:	ldr	r5, [sp, #100]	; 0x64
   12d54:	b	12c34 <close_stdout@@Base+0x10b0>
   12d58:	ldr	r9, [sp, #36]	; 0x24
   12d5c:	b	12980 <close_stdout@@Base+0xdfc>
   12d60:	bl	11004 <__stack_chk_fail@plt>
   12d64:	ldr	r1, [pc, #100]	; 12dd0 <close_stdout@@Base+0x124c>
   12d68:	mov	r3, #0
   12d6c:	mov	r0, #1
   12d70:	str	r3, [sp, #24]
   12d74:	add	r1, pc, r1
   12d78:	str	r0, [sp, #28]
   12d7c:	mov	r9, r3
   12d80:	str	r1, [sp, #52]	; 0x34
   12d84:	b	12164 <close_stdout@@Base+0x5e0>
   12d88:	ldr	r0, [pc, #68]	; 12dd4 <close_stdout@@Base+0x1250>
   12d8c:	mov	r3, #1
   12d90:	mov	r9, #0
   12d94:	str	r3, [sp, #24]
   12d98:	add	r0, pc, r0
   12d9c:	str	r3, [sp, #28]
   12da0:	str	r0, [sp, #52]	; 0x34
   12da4:	b	12164 <close_stdout@@Base+0x5e0>
   12da8:	andeq	r3, r1, ip, lsr #30
   12dac:	strdeq	r0, [r0], -r8
   12db0:	andeq	r2, r0, ip, lsl r4
   12db4:	strdeq	r2, [r0], -r8
   12db8:			; <UNDEFINED> instruction: 0x000023b4
   12dbc:	muleq	r0, r0, r3
   12dc0:	andeq	r2, r0, r4, lsl r3
   12dc4:			; <UNDEFINED> instruction: 0x000022bc
   12dc8:	andeq	r2, r0, r4, lsl r0
   12dcc:	strdeq	r1, [r0], -r0
   12dd0:	andeq	r1, r0, ip, asr #30
   12dd4:	andeq	r1, r0, ip, lsr #30
   12dd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ddc:	sub	sp, sp, #44	; 0x2c
   12de0:	mov	r6, r0
   12de4:	mov	r9, r1
   12de8:	mov	sl, r2
   12dec:	mov	r4, r3
   12df0:	bl	11118 <__errno_location@plt>
   12df4:	ldr	fp, [pc, #412]	; 12f98 <close_stdout@@Base+0x1414>
   12df8:	cmp	r6, #0
   12dfc:	add	fp, pc, fp
   12e00:	ldr	r5, [fp]
   12e04:	ldr	r1, [r0]
   12e08:	mov	r8, r0
   12e0c:	str	r1, [sp, #36]	; 0x24
   12e10:	blt	12f90 <close_stdout@@Base+0x140c>
   12e14:	ldr	r3, [pc, #384]	; 12f9c <close_stdout@@Base+0x1418>
   12e18:	add	r3, pc, r3
   12e1c:	ldr	r3, [r3]
   12e20:	cmp	r6, r3
   12e24:	bcc	12e78 <close_stdout@@Base+0x12f4>
   12e28:	add	r7, r6, #1
   12e2c:	cmn	r7, #-536870911	; 0xe0000001
   12e30:	bhi	12f94 <close_stdout@@Base+0x1410>
   12e34:	add	r3, fp, #4
   12e38:	cmp	r5, r3
   12e3c:	beq	12f68 <close_stdout@@Base+0x13e4>
   12e40:	mov	r0, r5
   12e44:	lsl	r1, r7, #3
   12e48:	bl	13c7c <close_stdout@@Base+0x20f8>
   12e4c:	mov	r5, r0
   12e50:	str	r0, [fp]
   12e54:	ldr	fp, [pc, #324]	; 12fa0 <close_stdout@@Base+0x141c>
   12e58:	mov	r1, #0
   12e5c:	add	fp, pc, fp
   12e60:	ldr	r0, [fp]
   12e64:	rsb	r2, r0, r7
   12e68:	add	r0, r5, r0, lsl #3
   12e6c:	lsl	r2, r2, #3
   12e70:	bl	1113c <memset@plt>
   12e74:	str	r7, [fp]
   12e78:	add	r2, r4, #8
   12e7c:	str	r2, [sp, #32]
   12e80:	ldr	r1, [r4]
   12e84:	add	fp, r5, r6, lsl #3
   12e88:	ldr	lr, [sp, #32]
   12e8c:	mov	r2, r9
   12e90:	ldr	r3, [r4, #4]
   12e94:	ldr	ip, [r5, r6, lsl #3]
   12e98:	ldr	r7, [fp, #4]
   12e9c:	orr	r3, r3, #1
   12ea0:	str	r1, [sp]
   12ea4:	str	r3, [sp, #4]
   12ea8:	mov	r1, ip
   12eac:	str	lr, [sp, #8]
   12eb0:	mov	r0, r7
   12eb4:	ldr	lr, [r4, #40]	; 0x28
   12eb8:	str	r3, [sp, #28]
   12ebc:	mov	r3, sl
   12ec0:	str	lr, [sp, #12]
   12ec4:	ldr	lr, [r4, #44]	; 0x2c
   12ec8:	str	ip, [sp, #24]
   12ecc:	str	lr, [sp, #16]
   12ed0:	bl	120b0 <close_stdout@@Base+0x52c>
   12ed4:	ldr	ip, [sp, #24]
   12ed8:	cmp	ip, r0
   12edc:	bhi	12f54 <close_stdout@@Base+0x13d0>
   12ee0:	ldr	r3, [pc, #188]	; 12fa4 <close_stdout@@Base+0x1420>
   12ee4:	add	r1, r0, #1
   12ee8:	str	r1, [r5, r6, lsl #3]
   12eec:	add	r3, pc, r3
   12ef0:	cmp	r7, r3
   12ef4:	beq	12f08 <close_stdout@@Base+0x1384>
   12ef8:	mov	r0, r7
   12efc:	str	r1, [sp, #24]
   12f00:	bl	10fa4 <free@plt>
   12f04:	ldr	r1, [sp, #24]
   12f08:	mov	r0, r1
   12f0c:	str	r1, [sp, #24]
   12f10:	bl	13c24 <close_stdout@@Base+0x20a0>
   12f14:	ldr	r3, [sp, #28]
   12f18:	ldr	lr, [sp, #32]
   12f1c:	mov	r2, r9
   12f20:	str	r0, [fp, #4]
   12f24:	mov	r7, r0
   12f28:	ldr	ip, [r4]
   12f2c:	str	r3, [sp, #4]
   12f30:	mov	r3, sl
   12f34:	str	lr, [sp, #8]
   12f38:	str	ip, [sp]
   12f3c:	ldr	ip, [r4, #40]	; 0x28
   12f40:	ldr	r1, [sp, #24]
   12f44:	str	ip, [sp, #12]
   12f48:	ldr	ip, [r4, #44]	; 0x2c
   12f4c:	str	ip, [sp, #16]
   12f50:	bl	120b0 <close_stdout@@Base+0x52c>
   12f54:	ldr	r1, [sp, #36]	; 0x24
   12f58:	mov	r0, r7
   12f5c:	str	r1, [r8]
   12f60:	add	sp, sp, #44	; 0x2c
   12f64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f68:	lsl	r1, r7, #3
   12f6c:	mov	r0, #0
   12f70:	str	r3, [sp, #24]
   12f74:	bl	13c7c <close_stdout@@Base+0x20f8>
   12f78:	ldr	r3, [sp, #24]
   12f7c:	mov	r5, r0
   12f80:	ldm	r3, {r0, r1}
   12f84:	str	r5, [fp]
   12f88:	stm	r5, {r0, r1}
   12f8c:	b	12e54 <close_stdout@@Base+0x12d0>
   12f90:	bl	111e4 <abort@plt>
   12f94:	bl	13e38 <close_stdout@@Base+0x22b4>
   12f98:	andeq	r3, r1, ip, ror #6
   12f9c:	andeq	r3, r1, ip, lsl r3
   12fa0:	ldrdeq	r3, [r1], -r8
   12fa4:	muleq	r1, r8, r2
   12fa8:	push	{r4, r5, r6, lr}
   12fac:	mov	r5, r0
   12fb0:	bl	11118 <__errno_location@plt>
   12fb4:	cmp	r5, #0
   12fb8:	mov	r1, #48	; 0x30
   12fbc:	mov	r4, r0
   12fc0:	ldr	r0, [pc, #24]	; 12fe0 <close_stdout@@Base+0x145c>
   12fc4:	ldr	r6, [r4]
   12fc8:	add	r0, pc, r0
   12fcc:	add	r0, r0, #256	; 0x100
   12fd0:	movne	r0, r5
   12fd4:	bl	13df8 <close_stdout@@Base+0x2274>
   12fd8:	str	r6, [r4]
   12fdc:	pop	{r4, r5, r6, pc}
   12fe0:			; <UNDEFINED> instruction: 0x000131bc
   12fe4:	cmp	r0, #0
   12fe8:	beq	12ff4 <close_stdout@@Base+0x1470>
   12fec:	ldr	r0, [r0]
   12ff0:	bx	lr
   12ff4:	ldr	r0, [pc, #12]	; 13008 <close_stdout@@Base+0x1484>
   12ff8:	add	r0, pc, r0
   12ffc:	add	r0, r0, #256	; 0x100
   13000:	ldr	r0, [r0]
   13004:	bx	lr
   13008:	andeq	r3, r1, ip, lsl #3
   1300c:	cmp	r0, #0
   13010:	beq	1301c <close_stdout@@Base+0x1498>
   13014:	str	r1, [r0]
   13018:	bx	lr
   1301c:	ldr	r0, [pc, #12]	; 13030 <close_stdout@@Base+0x14ac>
   13020:	add	r0, pc, r0
   13024:	add	r0, r0, #256	; 0x100
   13028:	str	r1, [r0]
   1302c:	bx	lr
   13030:	andeq	r3, r1, r4, ror #2
   13034:	cmp	r0, #0
   13038:	movne	r3, r0
   1303c:	beq	1306c <close_stdout@@Base+0x14e8>
   13040:	lsr	ip, r1, #5
   13044:	and	r1, r1, #31
   13048:	add	r3, r3, ip, lsl #2
   1304c:	ldr	ip, [r3, #8]
   13050:	lsr	r0, ip, r1
   13054:	eor	r2, r0, r2
   13058:	and	r0, r0, #1
   1305c:	and	r2, r2, #1
   13060:	eor	ip, ip, r2, lsl r1
   13064:	str	ip, [r3, #8]
   13068:	bx	lr
   1306c:	ldr	r3, [pc, #8]	; 1307c <close_stdout@@Base+0x14f8>
   13070:	add	r3, pc, r3
   13074:	add	r3, r3, #256	; 0x100
   13078:	b	13040 <close_stdout@@Base+0x14bc>
   1307c:	andeq	r3, r1, r4, lsl r1
   13080:	subs	r3, r0, #0
   13084:	beq	13094 <close_stdout@@Base+0x1510>
   13088:	ldr	r0, [r3, #4]
   1308c:	str	r1, [r3, #4]
   13090:	bx	lr
   13094:	ldr	r3, [pc, #8]	; 130a4 <close_stdout@@Base+0x1520>
   13098:	add	r3, pc, r3
   1309c:	add	r3, r3, #256	; 0x100
   130a0:	b	13088 <close_stdout@@Base+0x1504>
   130a4:	andeq	r3, r1, ip, ror #1
   130a8:	cmp	r0, #0
   130ac:	push	{r3, lr}
   130b0:	beq	130d4 <close_stdout@@Base+0x1550>
   130b4:	cmp	r2, #0
   130b8:	cmpne	r1, #0
   130bc:	mov	r3, #8
   130c0:	strne	r1, [r0, #40]	; 0x28
   130c4:	str	r3, [r0]
   130c8:	strne	r2, [r0, #44]	; 0x2c
   130cc:	popne	{r3, pc}
   130d0:	bl	111e4 <abort@plt>
   130d4:	ldr	r0, [pc, #8]	; 130e4 <close_stdout@@Base+0x1560>
   130d8:	add	r0, pc, r0
   130dc:	add	r0, r0, #256	; 0x100
   130e0:	b	130b4 <close_stdout@@Base+0x1530>
   130e4:	andeq	r3, r1, ip, lsr #1
   130e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   130ec:	sub	sp, sp, #24
   130f0:	mov	r7, r0
   130f4:	mov	sl, r1
   130f8:	ldr	r4, [sp, #56]	; 0x38
   130fc:	mov	r9, r2
   13100:	mov	r8, r3
   13104:	cmp	r4, #0
   13108:	beq	1315c <close_stdout@@Base+0x15d8>
   1310c:	bl	11118 <__errno_location@plt>
   13110:	ldr	r3, [r4]
   13114:	add	lr, r4, #8
   13118:	mov	r1, sl
   1311c:	mov	r2, r9
   13120:	ldr	r6, [r0]
   13124:	mov	r5, r0
   13128:	str	r3, [sp]
   1312c:	mov	r0, r7
   13130:	ldr	ip, [r4, #4]
   13134:	mov	r3, r8
   13138:	stmib	sp, {ip, lr}
   1313c:	ldr	ip, [r4, #40]	; 0x28
   13140:	str	ip, [sp, #12]
   13144:	ldr	ip, [r4, #44]	; 0x2c
   13148:	str	ip, [sp, #16]
   1314c:	bl	120b0 <close_stdout@@Base+0x52c>
   13150:	str	r6, [r5]
   13154:	add	sp, sp, #24
   13158:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1315c:	ldr	r4, [pc, #8]	; 1316c <close_stdout@@Base+0x15e8>
   13160:	add	r4, pc, r4
   13164:	add	r4, r4, #256	; 0x100
   13168:	b	1310c <close_stdout@@Base+0x1588>
   1316c:	andeq	r3, r1, r4, lsr #32
   13170:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13174:	subs	r4, r3, #0
   13178:	sub	sp, sp, #36	; 0x24
   1317c:	mov	r7, r0
   13180:	mov	r6, r1
   13184:	mov	r5, r2
   13188:	beq	13244 <close_stdout@@Base+0x16c0>
   1318c:	bl	11118 <__errno_location@plt>
   13190:	ldr	r3, [r4]
   13194:	ldr	sl, [r4, #4]
   13198:	add	r9, r4, #8
   1319c:	mov	r8, r0
   131a0:	mov	r0, #0
   131a4:	ldr	r2, [r8]
   131a8:	cmp	r5, r0
   131ac:	orreq	sl, sl, #1
   131b0:	str	r9, [sp, #8]
   131b4:	mov	r1, r0
   131b8:	stm	sp, {r3, sl}
   131bc:	mov	r3, r6
   131c0:	ldr	ip, [r4, #40]	; 0x28
   131c4:	str	r2, [sp, #28]
   131c8:	mov	r2, r7
   131cc:	str	ip, [sp, #12]
   131d0:	ldr	ip, [r4, #44]	; 0x2c
   131d4:	str	ip, [sp, #16]
   131d8:	bl	120b0 <close_stdout@@Base+0x52c>
   131dc:	add	r1, r0, #1
   131e0:	mov	fp, r0
   131e4:	str	r1, [sp, #24]
   131e8:	mov	r0, r1
   131ec:	bl	13c24 <close_stdout@@Base+0x20a0>
   131f0:	ldr	lr, [r4]
   131f4:	str	sl, [sp, #4]
   131f8:	mov	r3, r6
   131fc:	str	r9, [sp, #8]
   13200:	mov	r2, r7
   13204:	str	lr, [sp]
   13208:	ldr	lr, [r4, #40]	; 0x28
   1320c:	ldr	r1, [sp, #24]
   13210:	str	lr, [sp, #12]
   13214:	ldr	lr, [r4, #44]	; 0x2c
   13218:	str	lr, [sp, #16]
   1321c:	str	r0, [sp, #24]
   13220:	bl	120b0 <close_stdout@@Base+0x52c>
   13224:	ldr	r3, [sp, #28]
   13228:	cmp	r5, #0
   1322c:	str	r3, [r8]
   13230:	ldr	ip, [sp, #24]
   13234:	strne	fp, [r5]
   13238:	mov	r0, ip
   1323c:	add	sp, sp, #36	; 0x24
   13240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13244:	ldr	r4, [pc, #8]	; 13254 <close_stdout@@Base+0x16d0>
   13248:	add	r4, pc, r4
   1324c:	add	r4, r4, #256	; 0x100
   13250:	b	1318c <close_stdout@@Base+0x1608>
   13254:	andeq	r2, r1, ip, lsr pc
   13258:	mov	r3, r2
   1325c:	mov	r2, #0
   13260:	b	13170 <close_stdout@@Base+0x15ec>
   13264:	ldr	r2, [pc, #152]	; 13304 <close_stdout@@Base+0x1780>
   13268:	push	{r3, r4, r5, r6, r7, lr}
   1326c:	add	r2, pc, r2
   13270:	ldr	r3, [pc, #144]	; 13308 <close_stdout@@Base+0x1784>
   13274:	ldr	r6, [r2]
   13278:	add	r3, pc, r3
   1327c:	cmp	r6, #1
   13280:	ldr	r7, [r3]
   13284:	movhi	r4, #1
   13288:	movhi	r5, r7
   1328c:	bls	132a8 <close_stdout@@Base+0x1724>
   13290:	ldr	r0, [r5, #12]
   13294:	add	r4, r4, #1
   13298:	bl	10fa4 <free@plt>
   1329c:	cmp	r4, r6
   132a0:	add	r5, r5, #8
   132a4:	bne	13290 <close_stdout@@Base+0x170c>
   132a8:	ldr	r4, [pc, #92]	; 1330c <close_stdout@@Base+0x1788>
   132ac:	ldr	r0, [r7, #4]
   132b0:	add	r4, pc, r4
   132b4:	cmp	r0, r4
   132b8:	beq	132d0 <close_stdout@@Base+0x174c>
   132bc:	bl	10fa4 <free@plt>
   132c0:	ldr	r3, [pc, #72]	; 13310 <close_stdout@@Base+0x178c>
   132c4:	mov	r2, #256	; 0x100
   132c8:	add	r3, pc, r3
   132cc:	stmib	r3, {r2, r4}
   132d0:	ldr	r4, [pc, #60]	; 13314 <close_stdout@@Base+0x1790>
   132d4:	add	r4, pc, r4
   132d8:	add	r5, r4, #4
   132dc:	cmp	r7, r5
   132e0:	beq	132f0 <close_stdout@@Base+0x176c>
   132e4:	mov	r0, r7
   132e8:	bl	10fa4 <free@plt>
   132ec:	str	r5, [r4]
   132f0:	ldr	r3, [pc, #32]	; 13318 <close_stdout@@Base+0x1794>
   132f4:	mov	r2, #1
   132f8:	add	r3, pc, r3
   132fc:	str	r2, [r3]
   13300:	pop	{r3, r4, r5, r6, r7, pc}
   13304:	andeq	r2, r1, r8, asr #29
   13308:	strdeq	r2, [r1], -r0
   1330c:	ldrdeq	r2, [r1], -r4
   13310:	andeq	r2, r1, r0, lsr #29
   13314:	muleq	r1, r4, lr
   13318:	andeq	r2, r1, ip, lsr lr
   1331c:	ldr	r3, [pc, #12]	; 13330 <close_stdout@@Base+0x17ac>
   13320:	mvn	r2, #0
   13324:	add	r3, pc, r3
   13328:	add	r3, r3, #256	; 0x100
   1332c:	b	12dd8 <close_stdout@@Base+0x1254>
   13330:	andeq	r2, r1, r0, ror #28
   13334:	ldr	r3, [pc, #8]	; 13344 <close_stdout@@Base+0x17c0>
   13338:	add	r3, pc, r3
   1333c:	add	r3, r3, #256	; 0x100
   13340:	b	12dd8 <close_stdout@@Base+0x1254>
   13344:	andeq	r2, r1, ip, asr #28
   13348:	mov	r1, r0
   1334c:	mov	r0, #0
   13350:	b	1331c <close_stdout@@Base+0x1798>
   13354:	mov	r2, r1
   13358:	mov	r1, r0
   1335c:	mov	r0, #0
   13360:	b	13334 <close_stdout@@Base+0x17b0>
   13364:	ldr	r3, [pc, #92]	; 133c8 <close_stdout@@Base+0x1844>
   13368:	ldr	ip, [pc, #92]	; 133cc <close_stdout@@Base+0x1848>
   1336c:	add	r3, pc, r3
   13370:	push	{r4, r5, r6, r7, lr}
   13374:	sub	sp, sp, #60	; 0x3c
   13378:	ldr	r4, [r3, ip]
   1337c:	add	r5, sp, #4
   13380:	mov	r7, r2
   13384:	mov	r6, r0
   13388:	mov	r0, r5
   1338c:	ldr	r3, [r4]
   13390:	str	r3, [sp, #52]	; 0x34
   13394:	bl	11ef8 <close_stdout@@Base+0x374>
   13398:	mov	r3, r5
   1339c:	mvn	r2, #0
   133a0:	mov	r0, r6
   133a4:	mov	r1, r7
   133a8:	bl	12dd8 <close_stdout@@Base+0x1254>
   133ac:	ldr	r2, [sp, #52]	; 0x34
   133b0:	ldr	r3, [r4]
   133b4:	cmp	r2, r3
   133b8:	bne	133c4 <close_stdout@@Base+0x1840>
   133bc:	add	sp, sp, #60	; 0x3c
   133c0:	pop	{r4, r5, r6, r7, pc}
   133c4:	bl	11004 <__stack_chk_fail@plt>
   133c8:	andeq	r2, r1, ip, lsl #25
   133cc:	strdeq	r0, [r0], -r8
   133d0:	ldr	ip, [pc, #96]	; 13438 <close_stdout@@Base+0x18b4>
   133d4:	push	{r4, r5, r6, r7, r8, lr}
   133d8:	add	ip, pc, ip
   133dc:	ldr	lr, [pc, #88]	; 1343c <close_stdout@@Base+0x18b8>
   133e0:	sub	sp, sp, #56	; 0x38
   133e4:	mov	r8, r3
   133e8:	add	r5, sp, #4
   133ec:	mov	r7, r2
   133f0:	mov	r6, r0
   133f4:	ldr	r4, [ip, lr]
   133f8:	mov	r0, r5
   133fc:	ldr	r3, [r4]
   13400:	str	r3, [sp, #52]	; 0x34
   13404:	bl	11ef8 <close_stdout@@Base+0x374>
   13408:	mov	r2, r8
   1340c:	mov	r3, r5
   13410:	mov	r0, r6
   13414:	mov	r1, r7
   13418:	bl	12dd8 <close_stdout@@Base+0x1254>
   1341c:	ldr	r2, [sp, #52]	; 0x34
   13420:	ldr	r3, [r4]
   13424:	cmp	r2, r3
   13428:	bne	13434 <close_stdout@@Base+0x18b0>
   1342c:	add	sp, sp, #56	; 0x38
   13430:	pop	{r4, r5, r6, r7, r8, pc}
   13434:	bl	11004 <__stack_chk_fail@plt>
   13438:	andeq	r2, r1, r0, lsr #24
   1343c:	strdeq	r0, [r0], -r8
   13440:	mov	r2, r1
   13444:	mov	r1, r0
   13448:	mov	r0, #0
   1344c:	b	13364 <close_stdout@@Base+0x17e0>
   13450:	mov	ip, r1
   13454:	mov	r3, r2
   13458:	mov	r1, r0
   1345c:	mov	r2, ip
   13460:	mov	r0, #0
   13464:	b	133d0 <close_stdout@@Base+0x184c>
   13468:	push	{r4, r5, r6, r7, r8, lr}
   1346c:	mov	r5, r2
   13470:	ldr	lr, [pc, #136]	; 13500 <close_stdout@@Base+0x197c>
   13474:	mov	r7, r0
   13478:	mov	r6, r1
   1347c:	ldr	r4, [pc, #128]	; 13504 <close_stdout@@Base+0x1980>
   13480:	add	lr, pc, lr
   13484:	sub	sp, sp, #56	; 0x38
   13488:	add	lr, lr, #256	; 0x100
   1348c:	ldr	r8, [pc, #116]	; 13508 <close_stdout@@Base+0x1984>
   13490:	add	r4, pc, r4
   13494:	add	ip, sp, #4
   13498:	ldm	lr!, {r0, r1, r2, r3}
   1349c:	ldr	r4, [r4, r8]
   134a0:	stmia	ip!, {r0, r1, r2, r3}
   134a4:	ldm	lr!, {r0, r1, r2, r3}
   134a8:	ldr	r8, [r4]
   134ac:	stmia	ip!, {r0, r1, r2, r3}
   134b0:	ldm	lr, {r0, r1, r2, r3}
   134b4:	str	r8, [sp, #52]	; 0x34
   134b8:	stm	ip, {r0, r1, r2, r3}
   134bc:	mov	r1, r5
   134c0:	add	r5, sp, #4
   134c4:	mov	r2, #1
   134c8:	mov	r0, r5
   134cc:	bl	13034 <close_stdout@@Base+0x14b0>
   134d0:	mov	r2, r6
   134d4:	mov	r3, r5
   134d8:	mov	r1, r7
   134dc:	mov	r0, #0
   134e0:	bl	12dd8 <close_stdout@@Base+0x1254>
   134e4:	ldr	r2, [sp, #52]	; 0x34
   134e8:	ldr	r3, [r4]
   134ec:	cmp	r2, r3
   134f0:	bne	134fc <close_stdout@@Base+0x1978>
   134f4:	add	sp, sp, #56	; 0x38
   134f8:	pop	{r4, r5, r6, r7, r8, pc}
   134fc:	bl	11004 <__stack_chk_fail@plt>
   13500:	andeq	r2, r1, r4, lsl #26
   13504:	andeq	r2, r1, r8, ror #22
   13508:	strdeq	r0, [r0], -r8
   1350c:	mov	r2, r1
   13510:	mvn	r1, #0
   13514:	b	13468 <close_stdout@@Base+0x18e4>
   13518:	mov	r1, #58	; 0x3a
   1351c:	b	1350c <close_stdout@@Base+0x1988>
   13520:	mov	r2, #58	; 0x3a
   13524:	b	13468 <close_stdout@@Base+0x18e4>
   13528:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1352c:	mov	r5, r2
   13530:	ldr	lr, [pc, #144]	; 135c8 <close_stdout@@Base+0x1a44>
   13534:	mov	r8, r0
   13538:	mov	r9, r1
   1353c:	mov	r7, r3
   13540:	add	lr, pc, lr
   13544:	ldr	r4, [pc, #128]	; 135cc <close_stdout@@Base+0x1a48>
   13548:	add	lr, lr, #256	; 0x100
   1354c:	sub	sp, sp, #56	; 0x38
   13550:	ldr	sl, [pc, #120]	; 135d0 <close_stdout@@Base+0x1a4c>
   13554:	add	r4, pc, r4
   13558:	ldm	lr!, {r0, r1, r2, r3}
   1355c:	add	ip, sp, #4
   13560:	ldr	r4, [r4, sl]
   13564:	ldr	r6, [sp, #88]	; 0x58
   13568:	stmia	ip!, {r0, r1, r2, r3}
   1356c:	ldm	lr!, {r0, r1, r2, r3}
   13570:	ldr	sl, [r4]
   13574:	stmia	ip!, {r0, r1, r2, r3}
   13578:	ldm	lr, {r0, r1, r2, r3}
   1357c:	str	sl, [sp, #52]	; 0x34
   13580:	stm	ip, {r0, r1, r2, r3}
   13584:	mov	r2, r5
   13588:	add	r5, sp, #4
   1358c:	mov	r1, r9
   13590:	mov	r0, r5
   13594:	bl	130a8 <close_stdout@@Base+0x1524>
   13598:	mov	r2, r6
   1359c:	mov	r3, r5
   135a0:	mov	r0, r8
   135a4:	mov	r1, r7
   135a8:	bl	12dd8 <close_stdout@@Base+0x1254>
   135ac:	ldr	r2, [sp, #52]	; 0x34
   135b0:	ldr	r3, [r4]
   135b4:	cmp	r2, r3
   135b8:	bne	135c4 <close_stdout@@Base+0x1a40>
   135bc:	add	sp, sp, #56	; 0x38
   135c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   135c4:	bl	11004 <__stack_chk_fail@plt>
   135c8:	andeq	r2, r1, r4, asr #24
   135cc:	andeq	r2, r1, r4, lsr #21
   135d0:	strdeq	r0, [r0], -r8
   135d4:	push	{lr}		; (str lr, [sp, #-4]!)
   135d8:	sub	sp, sp, #12
   135dc:	mvn	ip, #0
   135e0:	str	ip, [sp]
   135e4:	bl	13528 <close_stdout@@Base+0x19a4>
   135e8:	add	sp, sp, #12
   135ec:	pop	{pc}		; (ldr pc, [sp], #4)
   135f0:	mov	ip, r1
   135f4:	mov	r3, r2
   135f8:	mov	r1, r0
   135fc:	mov	r2, ip
   13600:	mov	r0, #0
   13604:	b	135d4 <close_stdout@@Base+0x1a50>
   13608:	push	{lr}		; (str lr, [sp, #-4]!)
   1360c:	sub	sp, sp, #12
   13610:	mov	lr, r1
   13614:	mov	ip, r2
   13618:	mov	r1, r0
   1361c:	str	r3, [sp]
   13620:	mov	r2, lr
   13624:	mov	r3, ip
   13628:	mov	r0, #0
   1362c:	bl	13528 <close_stdout@@Base+0x19a4>
   13630:	add	sp, sp, #12
   13634:	pop	{pc}		; (ldr pc, [sp], #4)
   13638:	ldr	r3, [pc, #12]	; 1364c <close_stdout@@Base+0x1ac8>
   1363c:	ldr	ip, [pc, #12]	; 13650 <close_stdout@@Base+0x1acc>
   13640:	add	r3, pc, r3
   13644:	ldr	r3, [r3, ip]
   13648:	b	12dd8 <close_stdout@@Base+0x1254>
   1364c:			; <UNDEFINED> instruction: 0x000129b8
   13650:	strdeq	r0, [r0], -r4
   13654:	mov	r2, r1
   13658:	mov	r1, r0
   1365c:	mov	r0, #0
   13660:	b	13638 <close_stdout@@Base+0x1ab4>
   13664:	mvn	r2, #0
   13668:	b	13638 <close_stdout@@Base+0x1ab4>
   1366c:	mov	r1, r0
   13670:	mov	r0, #0
   13674:	b	13664 <close_stdout@@Base+0x1ae0>
   13678:	mov	r1, #0
   1367c:	mov	r2, #3
   13680:	b	13f30 <close_stdout@@Base+0x23ac>
   13684:	push	{r4, r5, r6, r7, lr}
   13688:	cmp	r1, #0
   1368c:	sub	sp, sp, #36	; 0x24
   13690:	ldr	r7, [pc, #896]	; 13a18 <close_stdout@@Base+0x1e94>
   13694:	mov	ip, r3
   13698:	mov	r5, r0
   1369c:	add	r7, pc, r7
   136a0:	ldr	r4, [sp, #56]	; 0x38
   136a4:	ldr	r6, [sp, #60]	; 0x3c
   136a8:	beq	139ec <close_stdout@@Base+0x1e68>
   136ac:	str	r2, [sp]
   136b0:	mov	r3, r1
   136b4:	ldr	r2, [pc, #864]	; 13a1c <close_stdout@@Base+0x1e98>
   136b8:	mov	r1, #1
   136bc:	str	ip, [sp, #4]
   136c0:	add	r2, pc, r2
   136c4:	bl	1116c <__fprintf_chk@plt>
   136c8:	ldr	r1, [pc, #848]	; 13a20 <close_stdout@@Base+0x1e9c>
   136cc:	mov	r2, #5
   136d0:	mov	r0, #0
   136d4:	add	r1, pc, r1
   136d8:	bl	10ff8 <dcgettext@plt>
   136dc:	ldr	r2, [pc, #832]	; 13a24 <close_stdout@@Base+0x1ea0>
   136e0:	movw	ip, #2013	; 0x7dd
   136e4:	mov	r1, #1
   136e8:	ldr	r2, [r7, r2]
   136ec:	str	ip, [sp]
   136f0:	mov	r3, r0
   136f4:	mov	r0, r5
   136f8:	bl	1116c <__fprintf_chk@plt>
   136fc:	ldr	r1, [pc, #804]	; 13a28 <close_stdout@@Base+0x1ea4>
   13700:	mov	r0, #0
   13704:	mov	r2, #5
   13708:	add	r1, pc, r1
   1370c:	bl	10ff8 <dcgettext@plt>
   13710:	mov	r1, r5
   13714:	bl	10f5c <fputs_unlocked@plt>
   13718:	cmp	r6, #9
   1371c:	addls	pc, pc, r6, lsl #2
   13720:	b	13a08 <close_stdout@@Base+0x1e84>
   13724:	b	137b8 <close_stdout@@Base+0x1c34>
   13728:	b	137bc <close_stdout@@Base+0x1c38>
   1372c:	b	137ec <close_stdout@@Base+0x1c68>
   13730:	b	13820 <close_stdout@@Base+0x1c9c>
   13734:	b	1385c <close_stdout@@Base+0x1cd8>
   13738:	b	1389c <close_stdout@@Base+0x1d18>
   1373c:	b	138e4 <close_stdout@@Base+0x1d60>
   13740:	b	13934 <close_stdout@@Base+0x1db0>
   13744:	b	1398c <close_stdout@@Base+0x1e08>
   13748:	b	1374c <close_stdout@@Base+0x1bc8>
   1374c:	ldr	r1, [pc, #728]	; 13a2c <close_stdout@@Base+0x1ea8>
   13750:	mov	r0, #0
   13754:	add	r1, pc, r1
   13758:	mov	r2, #5
   1375c:	bl	10ff8 <dcgettext@plt>
   13760:	ldm	r4, {r3, ip}
   13764:	mov	r1, #1
   13768:	str	ip, [sp]
   1376c:	ldr	ip, [r4, #8]
   13770:	str	ip, [sp, #4]
   13774:	ldr	ip, [r4, #12]
   13778:	str	ip, [sp, #8]
   1377c:	ldr	ip, [r4, #16]
   13780:	str	ip, [sp, #12]
   13784:	ldr	ip, [r4, #20]
   13788:	str	ip, [sp, #16]
   1378c:	ldr	ip, [r4, #24]
   13790:	str	ip, [sp, #20]
   13794:	ldr	ip, [r4, #28]
   13798:	str	ip, [sp, #24]
   1379c:	ldr	ip, [r4, #32]
   137a0:	str	ip, [sp, #28]
   137a4:	mov	r2, r0
   137a8:	mov	r0, r5
   137ac:	bl	1116c <__fprintf_chk@plt>
   137b0:	add	sp, sp, #36	; 0x24
   137b4:	pop	{r4, r5, r6, r7, pc}
   137b8:	bl	111e4 <abort@plt>
   137bc:	ldr	r1, [pc, #620]	; 13a30 <close_stdout@@Base+0x1eac>
   137c0:	mov	r2, #5
   137c4:	mov	r0, #0
   137c8:	add	r1, pc, r1
   137cc:	bl	10ff8 <dcgettext@plt>
   137d0:	ldr	r3, [r4]
   137d4:	mov	r1, #1
   137d8:	mov	r2, r0
   137dc:	mov	r0, r5
   137e0:	add	sp, sp, #36	; 0x24
   137e4:	pop	{r4, r5, r6, r7, lr}
   137e8:	b	1116c <__fprintf_chk@plt>
   137ec:	ldr	r1, [pc, #576]	; 13a34 <close_stdout@@Base+0x1eb0>
   137f0:	mov	r2, #5
   137f4:	mov	r0, #0
   137f8:	add	r1, pc, r1
   137fc:	bl	10ff8 <dcgettext@plt>
   13800:	ldm	r4, {r3, ip}
   13804:	mov	r1, #1
   13808:	str	ip, [sp, #56]	; 0x38
   1380c:	mov	r2, r0
   13810:	mov	r0, r5
   13814:	add	sp, sp, #36	; 0x24
   13818:	pop	{r4, r5, r6, r7, lr}
   1381c:	b	1116c <__fprintf_chk@plt>
   13820:	ldr	r1, [pc, #528]	; 13a38 <close_stdout@@Base+0x1eb4>
   13824:	mov	r2, #5
   13828:	mov	r0, #0
   1382c:	add	r1, pc, r1
   13830:	bl	10ff8 <dcgettext@plt>
   13834:	ldm	r4, {r3, ip}
   13838:	mov	r1, #1
   1383c:	str	ip, [sp, #56]	; 0x38
   13840:	ldr	ip, [r4, #8]
   13844:	str	ip, [sp, #60]	; 0x3c
   13848:	mov	r2, r0
   1384c:	mov	r0, r5
   13850:	add	sp, sp, #36	; 0x24
   13854:	pop	{r4, r5, r6, r7, lr}
   13858:	b	1116c <__fprintf_chk@plt>
   1385c:	ldr	r1, [pc, #472]	; 13a3c <close_stdout@@Base+0x1eb8>
   13860:	mov	r2, #5
   13864:	mov	r0, #0
   13868:	add	r1, pc, r1
   1386c:	bl	10ff8 <dcgettext@plt>
   13870:	ldm	r4, {r3, ip}
   13874:	mov	r1, #1
   13878:	str	ip, [sp]
   1387c:	ldr	ip, [r4, #8]
   13880:	str	ip, [sp, #4]
   13884:	ldr	ip, [r4, #12]
   13888:	str	ip, [sp, #8]
   1388c:	mov	r2, r0
   13890:	mov	r0, r5
   13894:	bl	1116c <__fprintf_chk@plt>
   13898:	b	137b0 <close_stdout@@Base+0x1c2c>
   1389c:	ldr	r1, [pc, #412]	; 13a40 <close_stdout@@Base+0x1ebc>
   138a0:	mov	r2, #5
   138a4:	mov	r0, #0
   138a8:	add	r1, pc, r1
   138ac:	bl	10ff8 <dcgettext@plt>
   138b0:	ldm	r4, {r3, ip}
   138b4:	mov	r1, #1
   138b8:	str	ip, [sp]
   138bc:	ldr	ip, [r4, #8]
   138c0:	str	ip, [sp, #4]
   138c4:	ldr	ip, [r4, #12]
   138c8:	str	ip, [sp, #8]
   138cc:	ldr	ip, [r4, #16]
   138d0:	str	ip, [sp, #12]
   138d4:	mov	r2, r0
   138d8:	mov	r0, r5
   138dc:	bl	1116c <__fprintf_chk@plt>
   138e0:	b	137b0 <close_stdout@@Base+0x1c2c>
   138e4:	ldr	r1, [pc, #344]	; 13a44 <close_stdout@@Base+0x1ec0>
   138e8:	mov	r2, #5
   138ec:	mov	r0, #0
   138f0:	add	r1, pc, r1
   138f4:	bl	10ff8 <dcgettext@plt>
   138f8:	ldm	r4, {r3, ip}
   138fc:	mov	r1, #1
   13900:	str	ip, [sp]
   13904:	ldr	ip, [r4, #8]
   13908:	str	ip, [sp, #4]
   1390c:	ldr	ip, [r4, #12]
   13910:	str	ip, [sp, #8]
   13914:	ldr	ip, [r4, #16]
   13918:	str	ip, [sp, #12]
   1391c:	ldr	ip, [r4, #20]
   13920:	str	ip, [sp, #16]
   13924:	mov	r2, r0
   13928:	mov	r0, r5
   1392c:	bl	1116c <__fprintf_chk@plt>
   13930:	b	137b0 <close_stdout@@Base+0x1c2c>
   13934:	ldr	r1, [pc, #268]	; 13a48 <close_stdout@@Base+0x1ec4>
   13938:	mov	r2, #5
   1393c:	mov	r0, #0
   13940:	add	r1, pc, r1
   13944:	bl	10ff8 <dcgettext@plt>
   13948:	ldm	r4, {r3, ip}
   1394c:	mov	r1, #1
   13950:	str	ip, [sp]
   13954:	ldr	ip, [r4, #8]
   13958:	str	ip, [sp, #4]
   1395c:	ldr	ip, [r4, #12]
   13960:	str	ip, [sp, #8]
   13964:	ldr	ip, [r4, #16]
   13968:	str	ip, [sp, #12]
   1396c:	ldr	ip, [r4, #20]
   13970:	str	ip, [sp, #16]
   13974:	ldr	ip, [r4, #24]
   13978:	str	ip, [sp, #20]
   1397c:	mov	r2, r0
   13980:	mov	r0, r5
   13984:	bl	1116c <__fprintf_chk@plt>
   13988:	b	137b0 <close_stdout@@Base+0x1c2c>
   1398c:	ldr	r1, [pc, #184]	; 13a4c <close_stdout@@Base+0x1ec8>
   13990:	mov	r2, #5
   13994:	mov	r0, #0
   13998:	add	r1, pc, r1
   1399c:	bl	10ff8 <dcgettext@plt>
   139a0:	ldm	r4, {r3, ip}
   139a4:	mov	r1, #1
   139a8:	str	ip, [sp]
   139ac:	ldr	ip, [r4, #8]
   139b0:	str	ip, [sp, #4]
   139b4:	ldr	ip, [r4, #12]
   139b8:	str	ip, [sp, #8]
   139bc:	ldr	ip, [r4, #16]
   139c0:	str	ip, [sp, #12]
   139c4:	ldr	ip, [r4, #20]
   139c8:	str	ip, [sp, #16]
   139cc:	ldr	ip, [r4, #24]
   139d0:	str	ip, [sp, #20]
   139d4:	ldr	ip, [r4, #28]
   139d8:	str	ip, [sp, #24]
   139dc:	mov	r2, r0
   139e0:	mov	r0, r5
   139e4:	bl	1116c <__fprintf_chk@plt>
   139e8:	b	137b0 <close_stdout@@Base+0x1c2c>
   139ec:	str	r3, [sp]
   139f0:	mov	r3, r2
   139f4:	ldr	r2, [pc, #84]	; 13a50 <close_stdout@@Base+0x1ecc>
   139f8:	mov	r1, #1
   139fc:	add	r2, pc, r2
   13a00:	bl	1116c <__fprintf_chk@plt>
   13a04:	b	136c8 <close_stdout@@Base+0x1b44>
   13a08:	ldr	r1, [pc, #68]	; 13a54 <close_stdout@@Base+0x1ed0>
   13a0c:	mov	r0, #0
   13a10:	add	r1, pc, r1
   13a14:	b	13758 <close_stdout@@Base+0x1bd4>
   13a18:	andeq	r2, r1, ip, asr r9
   13a1c:	andeq	r1, r0, r8, asr r6
   13a20:	andeq	r1, r0, r8, asr r6
   13a24:	andeq	r0, r0, r8, lsr #2
   13a28:	andeq	r1, r0, r8, lsr #12
   13a2c:			; <UNDEFINED> instruction: 0x000017b4
   13a30:	andeq	r1, r0, r4, lsr r6
   13a34:	andeq	r1, r0, r4, lsl r6
   13a38:	strdeq	r1, [r0], -r8
   13a3c:	ldrdeq	r1, [r0], -r8
   13a40:			; <UNDEFINED> instruction: 0x000015b8
   13a44:	muleq	r0, r4, r5
   13a48:	andeq	r1, r0, ip, ror #10
   13a4c:	andeq	r1, r0, r0, asr #10
   13a50:	andeq	r1, r0, r8, lsr #6
   13a54:	andeq	r1, r0, ip, lsr #10
   13a58:	push	{r4, r5, lr}
   13a5c:	sub	sp, sp, #12
   13a60:	ldr	r5, [sp, #24]
   13a64:	ldr	ip, [r5]
   13a68:	cmp	ip, #0
   13a6c:	beq	13a88 <close_stdout@@Base+0x1f04>
   13a70:	mov	lr, r5
   13a74:	mov	ip, #0
   13a78:	ldr	r4, [lr, #4]!
   13a7c:	add	ip, ip, #1
   13a80:	cmp	r4, #0
   13a84:	bne	13a78 <close_stdout@@Base+0x1ef4>
   13a88:	stm	sp, {r5, ip}
   13a8c:	bl	13684 <close_stdout@@Base+0x1b00>
   13a90:	add	sp, sp, #12
   13a94:	pop	{r4, r5, pc}
   13a98:	push	{r4, r5, r6, r7, lr}
   13a9c:	sub	sp, sp, #60	; 0x3c
   13aa0:	ldr	r4, [pc, #100]	; 13b0c <close_stdout@@Base+0x1f88>
   13aa4:	mov	ip, #0
   13aa8:	ldr	r5, [pc, #96]	; 13b10 <close_stdout@@Base+0x1f8c>
   13aac:	mov	lr, ip
   13ab0:	add	r4, pc, r4
   13ab4:	ldr	r6, [sp, #80]	; 0x50
   13ab8:	ldr	r7, [r4, r5]
   13abc:	add	r5, sp, #12
   13ac0:	ldr	r4, [r7]
   13ac4:	str	r4, [sp, #52]	; 0x34
   13ac8:	ldr	r4, [r6, ip]
   13acc:	cmp	r4, #0
   13ad0:	str	r4, [r5, ip]
   13ad4:	beq	13ae8 <close_stdout@@Base+0x1f64>
   13ad8:	add	lr, lr, #1
   13adc:	add	ip, ip, #4
   13ae0:	cmp	lr, #10
   13ae4:	bne	13ac8 <close_stdout@@Base+0x1f44>
   13ae8:	stm	sp, {r5, lr}
   13aec:	bl	13684 <close_stdout@@Base+0x1b00>
   13af0:	ldr	r2, [sp, #52]	; 0x34
   13af4:	ldr	r3, [r7]
   13af8:	cmp	r2, r3
   13afc:	bne	13b08 <close_stdout@@Base+0x1f84>
   13b00:	add	sp, sp, #60	; 0x3c
   13b04:	pop	{r4, r5, r6, r7, pc}
   13b08:	bl	11004 <__stack_chk_fail@plt>
   13b0c:	andeq	r2, r1, r8, asr #10
   13b10:	strdeq	r0, [r0], -r8
   13b14:	push	{r3}		; (str r3, [sp, #-4]!)
   13b18:	push	{r4, lr}
   13b1c:	sub	sp, sp, #20
   13b20:	ldr	lr, [pc, #72]	; 13b70 <close_stdout@@Base+0x1fec>
   13b24:	add	ip, sp, #32
   13b28:	ldr	r4, [pc, #68]	; 13b74 <close_stdout@@Base+0x1ff0>
   13b2c:	add	lr, pc, lr
   13b30:	ldr	r3, [sp, #28]
   13b34:	ldr	r4, [lr, r4]
   13b38:	str	ip, [sp]
   13b3c:	str	ip, [sp, #8]
   13b40:	ldr	ip, [r4]
   13b44:	str	ip, [sp, #12]
   13b48:	bl	13a98 <close_stdout@@Base+0x1f14>
   13b4c:	ldr	r2, [sp, #12]
   13b50:	ldr	r3, [r4]
   13b54:	cmp	r2, r3
   13b58:	bne	13b6c <close_stdout@@Base+0x1fe8>
   13b5c:	add	sp, sp, #20
   13b60:	pop	{r4, lr}
   13b64:	add	sp, sp, #4
   13b68:	bx	lr
   13b6c:	bl	11004 <__stack_chk_fail@plt>
   13b70:	andeq	r2, r1, ip, asr #9
   13b74:	strdeq	r0, [r0], -r8
   13b78:	ldr	r1, [pc, #132]	; 13c04 <close_stdout@@Base+0x2080>
   13b7c:	mov	r2, #5
   13b80:	push	{r4, lr}
   13b84:	add	r1, pc, r1
   13b88:	mov	r0, #0
   13b8c:	ldr	r4, [pc, #116]	; 13c08 <close_stdout@@Base+0x2084>
   13b90:	bl	10ff8 <dcgettext@plt>
   13b94:	ldr	r2, [pc, #112]	; 13c0c <close_stdout@@Base+0x2088>
   13b98:	add	r4, pc, r4
   13b9c:	add	r2, pc, r2
   13ba0:	mov	r1, r0
   13ba4:	mov	r0, #1
   13ba8:	bl	11154 <__printf_chk@plt>
   13bac:	ldr	r1, [pc, #92]	; 13c10 <close_stdout@@Base+0x208c>
   13bb0:	mov	r2, #5
   13bb4:	mov	r0, #0
   13bb8:	add	r1, pc, r1
   13bbc:	bl	10ff8 <dcgettext@plt>
   13bc0:	ldr	r2, [pc, #76]	; 13c14 <close_stdout@@Base+0x2090>
   13bc4:	ldr	r3, [pc, #76]	; 13c18 <close_stdout@@Base+0x2094>
   13bc8:	add	r2, pc, r2
   13bcc:	add	r3, pc, r3
   13bd0:	mov	r1, r0
   13bd4:	mov	r0, #1
   13bd8:	bl	11154 <__printf_chk@plt>
   13bdc:	ldr	r1, [pc, #56]	; 13c1c <close_stdout@@Base+0x2098>
   13be0:	mov	r0, #0
   13be4:	mov	r2, #5
   13be8:	add	r1, pc, r1
   13bec:	bl	10ff8 <dcgettext@plt>
   13bf0:	ldr	r3, [pc, #40]	; 13c20 <close_stdout@@Base+0x209c>
   13bf4:	ldr	r3, [r4, r3]
   13bf8:	pop	{r4, lr}
   13bfc:	ldr	r1, [r3]
   13c00:	b	10f5c <fputs_unlocked@plt>
   13c04:	strdeq	r1, [r0], -r4
   13c08:	andeq	r2, r1, r0, ror #8
   13c0c:	strdeq	r1, [r0], -r4
   13c10:	strdeq	r1, [r0], -r0
   13c14:	andeq	r0, r0, r0, lsr #30
   13c18:	andeq	r0, r0, ip, lsr #30
   13c1c:	ldrdeq	r1, [r0], -r4
   13c20:	andeq	r0, r0, r8, lsl r1
   13c24:	push	{r4, lr}
   13c28:	mov	r4, r0
   13c2c:	bl	110a0 <malloc@plt>
   13c30:	rsbs	r3, r0, #1
   13c34:	movcc	r3, #0
   13c38:	cmp	r4, #0
   13c3c:	moveq	r3, #0
   13c40:	cmp	r3, #0
   13c44:	popeq	{r4, pc}
   13c48:	bl	13e38 <close_stdout@@Base+0x22b4>
   13c4c:	push	{r3, r4, r5, lr}
   13c50:	mov	r4, r0
   13c54:	mvn	r0, #0
   13c58:	mov	r5, r1
   13c5c:	bl	1464c <close_stdout@@Base+0x2ac8>
   13c60:	cmp	r0, r4
   13c64:	bcc	13c74 <close_stdout@@Base+0x20f0>
   13c68:	mul	r0, r4, r5
   13c6c:	pop	{r3, r4, r5, lr}
   13c70:	b	13c24 <close_stdout@@Base+0x20a0>
   13c74:	bl	13e38 <close_stdout@@Base+0x22b4>
   13c78:	b	13c24 <close_stdout@@Base+0x20a0>
   13c7c:	rsbs	r3, r1, #1
   13c80:	push	{r4, lr}
   13c84:	movcc	r3, #0
   13c88:	cmp	r0, #0
   13c8c:	mov	r4, r1
   13c90:	moveq	r3, #0
   13c94:	cmp	r3, #0
   13c98:	bne	13cbc <close_stdout@@Base+0x2138>
   13c9c:	bl	11010 <realloc@plt>
   13ca0:	rsbs	r3, r0, #1
   13ca4:	movcc	r3, #0
   13ca8:	cmp	r4, #0
   13cac:	moveq	r3, #0
   13cb0:	cmp	r3, #0
   13cb4:	popeq	{r4, pc}
   13cb8:	bl	13e38 <close_stdout@@Base+0x22b4>
   13cbc:	bl	10fa4 <free@plt>
   13cc0:	mov	r0, #0
   13cc4:	pop	{r4, pc}
   13cc8:	push	{r4, r5, r6, lr}
   13ccc:	mov	r5, r1
   13cd0:	mov	r6, r0
   13cd4:	mov	r1, r2
   13cd8:	mvn	r0, #0
   13cdc:	mov	r4, r2
   13ce0:	bl	1464c <close_stdout@@Base+0x2ac8>
   13ce4:	cmp	r0, r5
   13ce8:	bcc	13cfc <close_stdout@@Base+0x2178>
   13cec:	mov	r0, r6
   13cf0:	mul	r1, r5, r4
   13cf4:	pop	{r4, r5, r6, lr}
   13cf8:	b	13c7c <close_stdout@@Base+0x20f8>
   13cfc:	bl	13e38 <close_stdout@@Base+0x22b4>
   13d00:	push	{r3, r4, r5, r6, r7, lr}
   13d04:	subs	r7, r0, #0
   13d08:	mov	r5, r1
   13d0c:	mov	r6, r2
   13d10:	ldr	r4, [r1]
   13d14:	beq	13d4c <close_stdout@@Base+0x21c8>
   13d18:	movw	r0, #43690	; 0xaaaa
   13d1c:	mov	r1, r2
   13d20:	bfi	r0, r0, #16, #16
   13d24:	bl	1464c <close_stdout@@Base+0x2ac8>
   13d28:	cmp	r4, r0
   13d2c:	addcc	r3, r4, #1
   13d30:	addcc	r4, r4, r3, lsr #1
   13d34:	bcs	13d70 <close_stdout@@Base+0x21ec>
   13d38:	str	r4, [r5]
   13d3c:	mov	r0, r7
   13d40:	mul	r1, r6, r4
   13d44:	pop	{r3, r4, r5, r6, r7, lr}
   13d48:	b	13c7c <close_stdout@@Base+0x20f8>
   13d4c:	cmp	r4, #0
   13d50:	bne	13d38 <close_stdout@@Base+0x21b4>
   13d54:	mov	r0, #64	; 0x40
   13d58:	mov	r1, r2
   13d5c:	bl	1464c <close_stdout@@Base+0x2ac8>
   13d60:	cmp	r0, #0
   13d64:	movne	r4, r0
   13d68:	addeq	r4, r0, #1
   13d6c:	b	13d38 <close_stdout@@Base+0x21b4>
   13d70:	bl	13e38 <close_stdout@@Base+0x22b4>
   13d74:	cmp	r0, #0
   13d78:	push	{r3, lr}
   13d7c:	ldr	r3, [r1]
   13d80:	beq	13dac <close_stdout@@Base+0x2228>
   13d84:	movw	r2, #43689	; 0xaaa9
   13d88:	movt	r2, #43690	; 0xaaaa
   13d8c:	cmp	r3, r2
   13d90:	addls	r2, r3, #1
   13d94:	addls	r3, r3, r2, lsr #1
   13d98:	bhi	13dc4 <close_stdout@@Base+0x2240>
   13d9c:	str	r3, [r1]
   13da0:	mov	r1, r3
   13da4:	pop	{r3, lr}
   13da8:	b	13c7c <close_stdout@@Base+0x20f8>
   13dac:	cmp	r3, #0
   13db0:	moveq	r3, #64	; 0x40
   13db4:	str	r3, [r1]
   13db8:	mov	r1, r3
   13dbc:	pop	{r3, lr}
   13dc0:	b	13c7c <close_stdout@@Base+0x20f8>
   13dc4:	bl	13e38 <close_stdout@@Base+0x22b4>
   13dc8:	push	{r4, lr}
   13dcc:	mov	r4, r0
   13dd0:	bl	13c24 <close_stdout@@Base+0x20a0>
   13dd4:	mov	r2, r4
   13dd8:	mov	r1, #0
   13ddc:	pop	{r4, lr}
   13de0:	b	1113c <memset@plt>
   13de4:	push	{r3, lr}
   13de8:	bl	10f50 <calloc@plt>
   13dec:	cmp	r0, #0
   13df0:	popne	{r3, pc}
   13df4:	bl	13e38 <close_stdout@@Base+0x22b4>
   13df8:	push	{r3, r4, r5, lr}
   13dfc:	mov	r4, r1
   13e00:	mov	r5, r0
   13e04:	mov	r0, r1
   13e08:	bl	13c24 <close_stdout@@Base+0x20a0>
   13e0c:	mov	r1, r5
   13e10:	mov	r2, r4
   13e14:	pop	{r3, r4, r5, lr}
   13e18:	b	10fbc <memcpy@plt>
   13e1c:	push	{r4, lr}
   13e20:	mov	r4, r0
   13e24:	bl	110f4 <strlen@plt>
   13e28:	add	r1, r0, #1
   13e2c:	mov	r0, r4
   13e30:	pop	{r4, lr}
   13e34:	b	13df8 <close_stdout@@Base+0x2274>
   13e38:	ldr	r3, [pc, #64]	; 13e80 <close_stdout@@Base+0x22fc>
   13e3c:	mov	r2, #5
   13e40:	ldr	ip, [pc, #60]	; 13e84 <close_stdout@@Base+0x2300>
   13e44:	mov	r0, #0
   13e48:	add	r3, pc, r3
   13e4c:	ldr	r1, [pc, #52]	; 13e88 <close_stdout@@Base+0x2304>
   13e50:	push	{r4, lr}
   13e54:	add	r1, pc, r1
   13e58:	ldr	r3, [r3, ip]
   13e5c:	ldr	r4, [r3]
   13e60:	bl	10ff8 <dcgettext@plt>
   13e64:	ldr	r2, [pc, #32]	; 13e8c <close_stdout@@Base+0x2308>
   13e68:	mov	r1, #0
   13e6c:	add	r2, pc, r2
   13e70:	mov	r3, r0
   13e74:	mov	r0, r4
   13e78:	bl	1107c <error@plt>
   13e7c:	bl	111e4 <abort@plt>
   13e80:			; <UNDEFINED> instruction: 0x000121b0
   13e84:	andeq	r0, r0, ip, lsl r1
   13e88:	ldrdeq	r1, [r0], -r8
   13e8c:	andeq	r0, r0, r4, ror #27
   13e90:	push	{r4, r5, r6, lr}
   13e94:	sub	sp, sp, #8
   13e98:	mov	r4, r0
   13e9c:	bl	11160 <fileno@plt>
   13ea0:	cmp	r0, #0
   13ea4:	mov	r0, r4
   13ea8:	blt	13f24 <close_stdout@@Base+0x23a0>
   13eac:	bl	110b8 <__freading@plt>
   13eb0:	cmp	r0, #0
   13eb4:	bne	13ef0 <close_stdout@@Base+0x236c>
   13eb8:	mov	r0, r4
   13ebc:	bl	140a4 <close_stdout@@Base+0x2520>
   13ec0:	cmp	r0, #0
   13ec4:	beq	13f20 <close_stdout@@Base+0x239c>
   13ec8:	bl	11118 <__errno_location@plt>
   13ecc:	ldr	r6, [r0]
   13ed0:	mov	r5, r0
   13ed4:	mov	r0, r4
   13ed8:	bl	11178 <fclose@plt>
   13edc:	cmp	r6, #0
   13ee0:	mvnne	r0, #0
   13ee4:	strne	r6, [r5]
   13ee8:	add	sp, sp, #8
   13eec:	pop	{r4, r5, r6, pc}
   13ef0:	mov	r0, r4
   13ef4:	bl	11160 <fileno@plt>
   13ef8:	mov	r1, #1
   13efc:	mov	r2, #0
   13f00:	mov	r3, #0
   13f04:	str	r1, [sp]
   13f08:	bl	11040 <lseek64@plt>
   13f0c:	mvn	r2, #0
   13f10:	mvn	r3, #0
   13f14:	cmp	r1, r3
   13f18:	cmpeq	r0, r2
   13f1c:	bne	13eb8 <close_stdout@@Base+0x2334>
   13f20:	mov	r0, r4
   13f24:	add	sp, sp, #8
   13f28:	pop	{r4, r5, r6, lr}
   13f2c:	b	11178 <fclose@plt>
   13f30:	push	{r1, r2, r3}
   13f34:	movw	ip, #1030	; 0x406
   13f38:	ldr	r3, [pc, #336]	; 14090 <close_stdout@@Base+0x250c>
   13f3c:	push	{r4, r5, r6, r7, r8, lr}
   13f40:	add	r3, pc, r3
   13f44:	ldr	lr, [pc, #328]	; 14094 <close_stdout@@Base+0x2510>
   13f48:	sub	sp, sp, #12
   13f4c:	add	r2, sp, #40	; 0x28
   13f50:	mov	r6, r0
   13f54:	ldr	r1, [sp, #36]	; 0x24
   13f58:	ldr	r4, [r3, lr]
   13f5c:	cmp	r1, ip
   13f60:	str	r2, [sp]
   13f64:	ldr	r3, [r4]
   13f68:	str	r3, [sp, #4]
   13f6c:	bne	13ff0 <close_stdout@@Base+0x246c>
   13f70:	ldr	r8, [pc, #288]	; 14098 <close_stdout@@Base+0x2514>
   13f74:	add	r3, sp, #44	; 0x2c
   13f78:	str	r3, [sp]
   13f7c:	add	r8, pc, r8
   13f80:	ldr	r7, [sp, #40]	; 0x28
   13f84:	ldr	r3, [r8]
   13f88:	mov	r2, r7
   13f8c:	cmp	r3, #0
   13f90:	blt	1407c <close_stdout@@Base+0x24f8>
   13f94:	bl	1110c <fcntl@plt>
   13f98:	subs	r5, r0, #0
   13f9c:	blt	14000 <close_stdout@@Base+0x247c>
   13fa0:	ldr	r3, [pc, #244]	; 1409c <close_stdout@@Base+0x2518>
   13fa4:	mov	r2, #1
   13fa8:	add	r3, pc, r3
   13fac:	str	r2, [r3]
   13fb0:	cmp	r5, #0
   13fb4:	blt	13fcc <close_stdout@@Base+0x2448>
   13fb8:	ldr	r3, [pc, #224]	; 140a0 <close_stdout@@Base+0x251c>
   13fbc:	add	r3, pc, r3
   13fc0:	ldr	r3, [r3]
   13fc4:	cmn	r3, #1
   13fc8:	beq	14030 <close_stdout@@Base+0x24ac>
   13fcc:	ldr	r2, [sp, #4]
   13fd0:	mov	r0, r5
   13fd4:	ldr	r3, [r4]
   13fd8:	cmp	r2, r3
   13fdc:	bne	1408c <close_stdout@@Base+0x2508>
   13fe0:	add	sp, sp, #12
   13fe4:	pop	{r4, r5, r6, r7, r8, lr}
   13fe8:	add	sp, sp, #12
   13fec:	bx	lr
   13ff0:	ldr	r2, [sp, #40]	; 0x28
   13ff4:	bl	1110c <fcntl@plt>
   13ff8:	mov	r5, r0
   13ffc:	b	13fcc <close_stdout@@Base+0x2448>
   14000:	bl	11118 <__errno_location@plt>
   14004:	ldr	r3, [r0]
   14008:	cmp	r3, #22
   1400c:	bne	13fa0 <close_stdout@@Base+0x241c>
   14010:	mov	r0, r6
   14014:	mov	r2, r7
   14018:	mov	r1, #0
   1401c:	bl	13f30 <close_stdout@@Base+0x23ac>
   14020:	subs	r5, r0, #0
   14024:	blt	13fcc <close_stdout@@Base+0x2448>
   14028:	mvn	r3, #0
   1402c:	str	r3, [r8]
   14030:	mov	r0, r5
   14034:	mov	r1, #1
   14038:	bl	1110c <fcntl@plt>
   1403c:	subs	r2, r0, #0
   14040:	blt	1405c <close_stdout@@Base+0x24d8>
   14044:	orr	r2, r2, #1
   14048:	mov	r0, r5
   1404c:	mov	r1, #2
   14050:	bl	1110c <fcntl@plt>
   14054:	cmn	r0, #1
   14058:	bne	13fcc <close_stdout@@Base+0x2448>
   1405c:	bl	11118 <__errno_location@plt>
   14060:	ldr	r7, [r0]
   14064:	mov	r6, r0
   14068:	mov	r0, r5
   1406c:	mvn	r5, #0
   14070:	bl	111f0 <close@plt>
   14074:	str	r7, [r6]
   14078:	b	13fcc <close_stdout@@Base+0x2448>
   1407c:	mov	r1, #0
   14080:	bl	13f30 <close_stdout@@Base+0x23ac>
   14084:	mov	r5, r0
   14088:	b	13fb0 <close_stdout@@Base+0x242c>
   1408c:	bl	11004 <__stack_chk_fail@plt>
   14090:	strheq	r2, [r1], -r8
   14094:	strdeq	r0, [r0], -r8
   14098:	andeq	r2, r1, r8, lsr r3
   1409c:	andeq	r2, r1, ip, lsl #6
   140a0:	strdeq	r2, [r1], -r8
   140a4:	push	{r4, lr}
   140a8:	subs	r4, r0, #0
   140ac:	sub	sp, sp, #8
   140b0:	beq	140c0 <close_stdout@@Base+0x253c>
   140b4:	bl	110b8 <__freading@plt>
   140b8:	cmp	r0, #0
   140bc:	bne	140d0 <close_stdout@@Base+0x254c>
   140c0:	mov	r0, r4
   140c4:	add	sp, sp, #8
   140c8:	pop	{r4, lr}
   140cc:	b	10f98 <fflush@plt>
   140d0:	ldr	r3, [r4]
   140d4:	tst	r3, #256	; 0x100
   140d8:	beq	140c0 <close_stdout@@Base+0x253c>
   140dc:	mov	r3, #1
   140e0:	mov	r0, r4
   140e4:	str	r3, [sp]
   140e8:	mov	r2, #0
   140ec:	mov	r3, #0
   140f0:	bl	14104 <close_stdout@@Base+0x2580>
   140f4:	mov	r0, r4
   140f8:	add	sp, sp, #8
   140fc:	pop	{r4, lr}
   14100:	b	10f98 <fflush@plt>
   14104:	push	{r4, r5, r6, r7, lr}
   14108:	sub	sp, sp, #20
   1410c:	ldmib	r0, {r1, ip}
   14110:	mov	r6, r0
   14114:	ldr	r4, [sp, #40]	; 0x28
   14118:	cmp	ip, r1
   1411c:	beq	14134 <close_stdout@@Base+0x25b0>
   14120:	str	r4, [sp, #40]	; 0x28
   14124:	mov	r0, r6
   14128:	add	sp, sp, #20
   1412c:	pop	{r4, r5, r6, r7, lr}
   14130:	b	11184 <fseeko64@plt>
   14134:	ldr	ip, [r0, #20]
   14138:	ldr	r1, [r0, #16]
   1413c:	cmp	ip, r1
   14140:	bne	14120 <close_stdout@@Base+0x259c>
   14144:	ldr	r7, [r0, #36]	; 0x24
   14148:	cmp	r7, #0
   1414c:	bne	14120 <close_stdout@@Base+0x259c>
   14150:	str	r2, [sp, #12]
   14154:	mvn	r5, #0
   14158:	str	r3, [sp, #8]
   1415c:	bl	11160 <fileno@plt>
   14160:	str	r4, [sp]
   14164:	mvn	r4, #0
   14168:	ldr	r2, [sp, #12]
   1416c:	ldr	r3, [sp, #8]
   14170:	bl	11040 <lseek64@plt>
   14174:	mov	r2, r0
   14178:	mov	r3, r1
   1417c:	cmp	r3, r5
   14180:	cmpeq	r2, r4
   14184:	beq	141a4 <close_stdout@@Base+0x2620>
   14188:	ldr	r1, [r6]
   1418c:	mov	r0, r7
   14190:	strd	r2, [r6, #80]	; 0x50
   14194:	bic	r3, r1, #16
   14198:	str	r3, [r6]
   1419c:	add	sp, sp, #20
   141a0:	pop	{r4, r5, r6, r7, pc}
   141a4:	mvn	r0, #0
   141a8:	b	1419c <close_stdout@@Base+0x2618>
   141ac:	push	{r4, r5, r6, lr}
   141b0:	mov	r4, r0
   141b4:	bl	11064 <__fpending@plt>
   141b8:	mov	r6, r0
   141bc:	mov	r0, r4
   141c0:	ldr	r4, [r4]
   141c4:	bl	13e90 <close_stdout@@Base+0x230c>
   141c8:	and	r4, r4, #32
   141cc:	adds	r5, r0, #0
   141d0:	movne	r5, #1
   141d4:	cmp	r4, #0
   141d8:	bne	141f8 <close_stdout@@Base+0x2674>
   141dc:	cmp	r5, #0
   141e0:	beq	141f0 <close_stdout@@Base+0x266c>
   141e4:	cmp	r6, #0
   141e8:	beq	14214 <close_stdout@@Base+0x2690>
   141ec:	mvn	r4, #0
   141f0:	mov	r0, r4
   141f4:	pop	{r4, r5, r6, pc}
   141f8:	cmp	r5, #0
   141fc:	bne	141ec <close_stdout@@Base+0x2668>
   14200:	bl	11118 <__errno_location@plt>
   14204:	mvn	r4, #0
   14208:	str	r5, [r0]
   1420c:	mov	r0, r4
   14210:	pop	{r4, r5, r6, pc}
   14214:	bl	11118 <__errno_location@plt>
   14218:	ldr	r4, [r0]
   1421c:	subs	r4, r4, #9
   14220:	mvnne	r4, #0
   14224:	mov	r0, r4
   14228:	pop	{r4, r5, r6, pc}
   1422c:	ldr	r3, [pc, #984]	; 1460c <close_stdout@@Base+0x2a88>
   14230:	mov	r0, #14
   14234:	ldr	r2, [pc, #980]	; 14610 <close_stdout@@Base+0x2a8c>
   14238:	add	r3, pc, r3
   1423c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14240:	sub	sp, sp, #132	; 0x84
   14244:	ldr	r6, [r3, r2]
   14248:	ldr	r3, [r6]
   1424c:	str	r3, [sp, #124]	; 0x7c
   14250:	bl	111b4 <nl_langinfo@plt>
   14254:	subs	r5, r0, #0
   14258:	beq	1430c <close_stdout@@Base+0x2788>
   1425c:	ldr	r3, [pc, #944]	; 14614 <close_stdout@@Base+0x2a90>
   14260:	ldr	r4, [pc, r3]
   14264:	cmp	r4, #0
   14268:	beq	14318 <close_stdout@@Base+0x2794>
   1426c:	ldrb	r7, [r4]
   14270:	cmp	r7, #0
   14274:	bne	142a8 <close_stdout@@Base+0x2724>
   14278:	b	142e0 <close_stdout@@Base+0x275c>
   1427c:	mov	r0, r4
   14280:	bl	110f4 <strlen@plt>
   14284:	add	r0, r0, #1
   14288:	add	r7, r4, r0
   1428c:	mov	r0, r7
   14290:	bl	110f4 <strlen@plt>
   14294:	add	r0, r0, #1
   14298:	add	r4, r7, r0
   1429c:	ldrb	r7, [r7, r0]
   142a0:	cmp	r7, #0
   142a4:	beq	142e0 <close_stdout@@Base+0x275c>
   142a8:	mov	r0, r5
   142ac:	mov	r1, r4
   142b0:	bl	10f74 <strcmp@plt>
   142b4:	cmp	r0, #0
   142b8:	beq	142d0 <close_stdout@@Base+0x274c>
   142bc:	cmp	r7, #42	; 0x2a
   142c0:	bne	1427c <close_stdout@@Base+0x26f8>
   142c4:	ldrb	r3, [r4, #1]
   142c8:	cmp	r3, #0
   142cc:	bne	1427c <close_stdout@@Base+0x26f8>
   142d0:	mov	r0, r4
   142d4:	bl	110f4 <strlen@plt>
   142d8:	add	r0, r0, #1
   142dc:	add	r5, r4, r0
   142e0:	ldrb	r3, [r5]
   142e4:	cmp	r3, #0
   142e8:	ldreq	r5, [pc, #808]	; 14618 <close_stdout@@Base+0x2a94>
   142ec:	addeq	r5, pc, r5
   142f0:	ldr	r2, [sp, #124]	; 0x7c
   142f4:	mov	r0, r5
   142f8:	ldr	r3, [r6]
   142fc:	cmp	r2, r3
   14300:	bne	145e0 <close_stdout@@Base+0x2a5c>
   14304:	add	sp, sp, #132	; 0x84
   14308:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1430c:	ldr	r5, [pc, #776]	; 1461c <close_stdout@@Base+0x2a98>
   14310:	add	r5, pc, r5
   14314:	b	1425c <close_stdout@@Base+0x26d8>
   14318:	ldr	r0, [pc, #768]	; 14620 <close_stdout@@Base+0x2a9c>
   1431c:	add	r0, pc, r0
   14320:	bl	11094 <getenv@plt>
   14324:	subs	r8, r0, #0
   14328:	beq	145b8 <close_stdout@@Base+0x2a34>
   1432c:	ldrb	r3, [r8]
   14330:	cmp	r3, #0
   14334:	beq	1454c <close_stdout@@Base+0x29c8>
   14338:	bl	110f4 <strlen@plt>
   1433c:	subs	sl, r0, #0
   14340:	subne	r3, sl, #1
   14344:	bne	1455c <close_stdout@@Base+0x29d8>
   14348:	mov	r9, #0
   1434c:	mov	fp, r9
   14350:	add	r9, sl, r9
   14354:	add	r0, r9, #14
   14358:	bl	110a0 <malloc@plt>
   1435c:	subs	r7, r0, #0
   14360:	beq	145ac <close_stdout@@Base+0x2a28>
   14364:	mov	r1, r8
   14368:	mov	r2, sl
   1436c:	bl	10fbc <memcpy@plt>
   14370:	cmp	fp, #0
   14374:	add	ip, r7, r9
   14378:	movne	r3, #47	; 0x2f
   1437c:	strbne	r3, [r7, sl]
   14380:	ldr	r3, [pc, #668]	; 14624 <close_stdout@@Base+0x2aa0>
   14384:	add	r3, pc, r3
   14388:	ldm	r3!, {r0, r1, r2}
   1438c:	ldrh	r3, [r3]
   14390:	str	r0, [r7, r9]
   14394:	mov	r0, r7
   14398:	str	r1, [ip, #4]
   1439c:	mov	r1, #32768	; 0x8000
   143a0:	strh	r3, [ip, #12]
   143a4:	str	r2, [ip, #8]
   143a8:	bl	11088 <open64@plt>
   143ac:	subs	r8, r0, #0
   143b0:	blt	14574 <close_stdout@@Base+0x29f0>
   143b4:	ldr	r1, [pc, #620]	; 14628 <close_stdout@@Base+0x2aa4>
   143b8:	add	r1, pc, r1
   143bc:	bl	10f44 <fdopen@plt>
   143c0:	subs	fp, r0, #0
   143c4:	beq	145cc <close_stdout@@Base+0x2a48>
   143c8:	ldr	r0, [pc, #604]	; 1462c <close_stdout@@Base+0x2aa8>
   143cc:	add	sl, sp, #20
   143d0:	add	r9, sp, #72	; 0x48
   143d4:	mov	r8, #0
   143d8:	add	r0, pc, r0
   143dc:	str	r0, [sp, #12]
   143e0:	ldr	r3, [fp, #4]
   143e4:	ldr	r2, [fp, #8]
   143e8:	cmp	r3, r2
   143ec:	bcs	144d8 <close_stdout@@Base+0x2954>
   143f0:	add	r2, r3, #1
   143f4:	str	r2, [fp, #4]
   143f8:	ldrb	r0, [r3]
   143fc:	cmp	r0, #32
   14400:	beq	143e0 <close_stdout@@Base+0x285c>
   14404:	sub	r3, r0, #9
   14408:	cmp	r3, #1
   1440c:	bls	143e0 <close_stdout@@Base+0x285c>
   14410:	cmp	r0, #35	; 0x23
   14414:	beq	144ec <close_stdout@@Base+0x2968>
   14418:	mov	r1, fp
   1441c:	bl	11100 <ungetc@plt>
   14420:	mov	r0, fp
   14424:	ldr	r1, [sp, #12]
   14428:	mov	r2, sl
   1442c:	mov	r3, r9
   14430:	bl	11148 <fscanf@plt>
   14434:	cmp	r0, #1
   14438:	ble	1451c <close_stdout@@Base+0x2998>
   1443c:	mov	r0, sl
   14440:	bl	110f4 <strlen@plt>
   14444:	str	r0, [sp, #8]
   14448:	mov	r0, r9
   1444c:	bl	110f4 <strlen@plt>
   14450:	cmp	r8, #0
   14454:	mov	r2, r0
   14458:	bne	14580 <close_stdout@@Base+0x29fc>
   1445c:	ldr	r3, [sp, #8]
   14460:	str	r2, [sp]
   14464:	add	r8, r0, r3
   14468:	add	r0, r8, #3
   1446c:	add	r8, r8, #2
   14470:	bl	110a0 <malloc@plt>
   14474:	ldr	r2, [sp]
   14478:	mov	r3, r0
   1447c:	cmp	r3, #0
   14480:	beq	145e4 <close_stdout@@Base+0x2a60>
   14484:	ldr	r0, [sp, #8]
   14488:	movw	r1, #65534	; 0xfffe
   1448c:	movt	r1, #65535	; 0xffff
   14490:	rsb	r2, r2, r8
   14494:	rsb	r1, r0, r1
   14498:	stm	sp, {r2, r3}
   1449c:	add	r0, r1, r2
   144a0:	mov	r1, sl
   144a4:	add	r0, r3, r0
   144a8:	mov	r4, r3
   144ac:	bl	11058 <strcpy@plt>
   144b0:	ldr	r2, [sp]
   144b4:	ldr	r3, [sp, #4]
   144b8:	mov	r1, r9
   144bc:	sub	r0, r2, #1
   144c0:	add	r0, r3, r0
   144c4:	bl	11058 <strcpy@plt>
   144c8:	ldr	r3, [fp, #4]
   144cc:	ldr	r2, [fp, #8]
   144d0:	cmp	r3, r2
   144d4:	bcc	143f0 <close_stdout@@Base+0x286c>
   144d8:	mov	r0, fp
   144dc:	bl	11190 <__uflow@plt>
   144e0:	cmn	r0, #1
   144e4:	beq	1451c <close_stdout@@Base+0x2998>
   144e8:	b	143fc <close_stdout@@Base+0x2878>
   144ec:	ldr	r3, [fp, #4]
   144f0:	ldr	r2, [fp, #8]
   144f4:	cmp	r3, r2
   144f8:	bcs	14600 <close_stdout@@Base+0x2a7c>
   144fc:	add	r2, r3, #1
   14500:	str	r2, [fp, #4]
   14504:	ldrb	r0, [r3]
   14508:	cmp	r0, #10
   1450c:	cmnne	r0, #1
   14510:	bne	144ec <close_stdout@@Base+0x2968>
   14514:	cmn	r0, #1
   14518:	bne	143e0 <close_stdout@@Base+0x285c>
   1451c:	mov	r0, fp
   14520:	bl	13e90 <close_stdout@@Base+0x230c>
   14524:	cmp	r8, #0
   14528:	beq	14574 <close_stdout@@Base+0x29f0>
   1452c:	mov	r3, #0
   14530:	strb	r3, [r4, r8]
   14534:	mov	r0, r7
   14538:	bl	10fa4 <free@plt>
   1453c:	ldr	r3, [pc, #236]	; 14630 <close_stdout@@Base+0x2aac>
   14540:	add	r3, pc, r3
   14544:	str	r4, [r3]
   14548:	b	1426c <close_stdout@@Base+0x26e8>
   1454c:	ldr	r8, [pc, #224]	; 14634 <close_stdout@@Base+0x2ab0>
   14550:	mov	r3, #7
   14554:	mov	sl, #8
   14558:	add	r8, pc, r8
   1455c:	ldrb	r3, [r8, r3]
   14560:	cmp	r3, #47	; 0x2f
   14564:	movne	r9, #1
   14568:	movne	fp, r9
   1456c:	bne	14350 <close_stdout@@Base+0x27cc>
   14570:	b	14348 <close_stdout@@Base+0x27c4>
   14574:	ldr	r4, [pc, #188]	; 14638 <close_stdout@@Base+0x2ab4>
   14578:	add	r4, pc, r4
   1457c:	b	14534 <close_stdout@@Base+0x29b0>
   14580:	ldr	r0, [sp, #8]
   14584:	str	r2, [sp]
   14588:	add	r3, r0, r2
   1458c:	mov	r0, r4
   14590:	add	r8, r3, r8
   14594:	add	r1, r8, #3
   14598:	add	r8, r8, #2
   1459c:	bl	11010 <realloc@plt>
   145a0:	ldr	r2, [sp]
   145a4:	mov	r3, r0
   145a8:	b	1447c <close_stdout@@Base+0x28f8>
   145ac:	ldr	r4, [pc, #136]	; 1463c <close_stdout@@Base+0x2ab8>
   145b0:	add	r4, pc, r4
   145b4:	b	1453c <close_stdout@@Base+0x29b8>
   145b8:	ldr	r8, [pc, #128]	; 14640 <close_stdout@@Base+0x2abc>
   145bc:	mov	r3, #7
   145c0:	mov	sl, #8
   145c4:	add	r8, pc, r8
   145c8:	b	1455c <close_stdout@@Base+0x29d8>
   145cc:	ldr	r4, [pc, #112]	; 14644 <close_stdout@@Base+0x2ac0>
   145d0:	mov	r0, r8
   145d4:	add	r4, pc, r4
   145d8:	bl	111f0 <close@plt>
   145dc:	b	14534 <close_stdout@@Base+0x29b0>
   145e0:	bl	11004 <__stack_chk_fail@plt>
   145e4:	mov	r0, r4
   145e8:	ldr	r4, [pc, #88]	; 14648 <close_stdout@@Base+0x2ac4>
   145ec:	bl	10fa4 <free@plt>
   145f0:	mov	r0, fp
   145f4:	add	r4, pc, r4
   145f8:	bl	13e90 <close_stdout@@Base+0x230c>
   145fc:	b	14534 <close_stdout@@Base+0x29b0>
   14600:	mov	r0, fp
   14604:	bl	11190 <__uflow@plt>
   14608:	b	14508 <close_stdout@@Base+0x2984>
   1460c:	andeq	r1, r1, r0, asr #27
   14610:	strdeq	r0, [r0], -r8
   14614:	andeq	r2, r1, r8, asr r0
   14618:	andeq	r0, r0, r0, ror #26
   1461c:	muleq	r0, ip, r8
   14620:	andeq	r0, r0, r8, lsr sp
   14624:	andeq	r0, r0, r0, ror #25
   14628:			; <UNDEFINED> instruction: 0x00000cbc
   1462c:	andeq	r0, r0, r0, lsr #25
   14630:	andeq	r1, r1, r8, ror sp
   14634:	andeq	r0, r0, r8, ror #21
   14638:	andeq	r0, r0, r4, lsr r6
   1463c:	strdeq	r0, [r0], -ip
   14640:	andeq	r0, r0, ip, ror sl
   14644:	ldrdeq	r0, [r0], -r8
   14648:			; <UNDEFINED> instruction: 0x000005b8
   1464c:	subs	r2, r1, #1
   14650:	bxeq	lr
   14654:	bcc	1482c <close_stdout@@Base+0x2ca8>
   14658:	cmp	r0, r1
   1465c:	bls	14810 <close_stdout@@Base+0x2c8c>
   14660:	tst	r1, r2
   14664:	beq	1481c <close_stdout@@Base+0x2c98>
   14668:	clz	r3, r0
   1466c:	clz	r2, r1
   14670:	sub	r3, r2, r3
   14674:	rsbs	r3, r3, #31
   14678:	addne	r3, r3, r3, lsl #1
   1467c:	mov	r2, #0
   14680:	addne	pc, pc, r3, lsl #2
   14684:	nop	{0}
   14688:	cmp	r0, r1, lsl #31
   1468c:	adc	r2, r2, r2
   14690:	subcs	r0, r0, r1, lsl #31
   14694:	cmp	r0, r1, lsl #30
   14698:	adc	r2, r2, r2
   1469c:	subcs	r0, r0, r1, lsl #30
   146a0:	cmp	r0, r1, lsl #29
   146a4:	adc	r2, r2, r2
   146a8:	subcs	r0, r0, r1, lsl #29
   146ac:	cmp	r0, r1, lsl #28
   146b0:	adc	r2, r2, r2
   146b4:	subcs	r0, r0, r1, lsl #28
   146b8:	cmp	r0, r1, lsl #27
   146bc:	adc	r2, r2, r2
   146c0:	subcs	r0, r0, r1, lsl #27
   146c4:	cmp	r0, r1, lsl #26
   146c8:	adc	r2, r2, r2
   146cc:	subcs	r0, r0, r1, lsl #26
   146d0:	cmp	r0, r1, lsl #25
   146d4:	adc	r2, r2, r2
   146d8:	subcs	r0, r0, r1, lsl #25
   146dc:	cmp	r0, r1, lsl #24
   146e0:	adc	r2, r2, r2
   146e4:	subcs	r0, r0, r1, lsl #24
   146e8:	cmp	r0, r1, lsl #23
   146ec:	adc	r2, r2, r2
   146f0:	subcs	r0, r0, r1, lsl #23
   146f4:	cmp	r0, r1, lsl #22
   146f8:	adc	r2, r2, r2
   146fc:	subcs	r0, r0, r1, lsl #22
   14700:	cmp	r0, r1, lsl #21
   14704:	adc	r2, r2, r2
   14708:	subcs	r0, r0, r1, lsl #21
   1470c:	cmp	r0, r1, lsl #20
   14710:	adc	r2, r2, r2
   14714:	subcs	r0, r0, r1, lsl #20
   14718:	cmp	r0, r1, lsl #19
   1471c:	adc	r2, r2, r2
   14720:	subcs	r0, r0, r1, lsl #19
   14724:	cmp	r0, r1, lsl #18
   14728:	adc	r2, r2, r2
   1472c:	subcs	r0, r0, r1, lsl #18
   14730:	cmp	r0, r1, lsl #17
   14734:	adc	r2, r2, r2
   14738:	subcs	r0, r0, r1, lsl #17
   1473c:	cmp	r0, r1, lsl #16
   14740:	adc	r2, r2, r2
   14744:	subcs	r0, r0, r1, lsl #16
   14748:	cmp	r0, r1, lsl #15
   1474c:	adc	r2, r2, r2
   14750:	subcs	r0, r0, r1, lsl #15
   14754:	cmp	r0, r1, lsl #14
   14758:	adc	r2, r2, r2
   1475c:	subcs	r0, r0, r1, lsl #14
   14760:	cmp	r0, r1, lsl #13
   14764:	adc	r2, r2, r2
   14768:	subcs	r0, r0, r1, lsl #13
   1476c:	cmp	r0, r1, lsl #12
   14770:	adc	r2, r2, r2
   14774:	subcs	r0, r0, r1, lsl #12
   14778:	cmp	r0, r1, lsl #11
   1477c:	adc	r2, r2, r2
   14780:	subcs	r0, r0, r1, lsl #11
   14784:	cmp	r0, r1, lsl #10
   14788:	adc	r2, r2, r2
   1478c:	subcs	r0, r0, r1, lsl #10
   14790:	cmp	r0, r1, lsl #9
   14794:	adc	r2, r2, r2
   14798:	subcs	r0, r0, r1, lsl #9
   1479c:	cmp	r0, r1, lsl #8
   147a0:	adc	r2, r2, r2
   147a4:	subcs	r0, r0, r1, lsl #8
   147a8:	cmp	r0, r1, lsl #7
   147ac:	adc	r2, r2, r2
   147b0:	subcs	r0, r0, r1, lsl #7
   147b4:	cmp	r0, r1, lsl #6
   147b8:	adc	r2, r2, r2
   147bc:	subcs	r0, r0, r1, lsl #6
   147c0:	cmp	r0, r1, lsl #5
   147c4:	adc	r2, r2, r2
   147c8:	subcs	r0, r0, r1, lsl #5
   147cc:	cmp	r0, r1, lsl #4
   147d0:	adc	r2, r2, r2
   147d4:	subcs	r0, r0, r1, lsl #4
   147d8:	cmp	r0, r1, lsl #3
   147dc:	adc	r2, r2, r2
   147e0:	subcs	r0, r0, r1, lsl #3
   147e4:	cmp	r0, r1, lsl #2
   147e8:	adc	r2, r2, r2
   147ec:	subcs	r0, r0, r1, lsl #2
   147f0:	cmp	r0, r1, lsl #1
   147f4:	adc	r2, r2, r2
   147f8:	subcs	r0, r0, r1, lsl #1
   147fc:	cmp	r0, r1
   14800:	adc	r2, r2, r2
   14804:	subcs	r0, r0, r1
   14808:	mov	r0, r2
   1480c:	bx	lr
   14810:	moveq	r0, #1
   14814:	movne	r0, #0
   14818:	bx	lr
   1481c:	clz	r2, r1
   14820:	rsb	r2, r2, #31
   14824:	lsr	r0, r0, r2
   14828:	bx	lr
   1482c:	cmp	r0, #0
   14830:	mvnne	r0, #0
   14834:	b	14858 <close_stdout@@Base+0x2cd4>
   14838:	cmp	r1, #0
   1483c:	beq	1482c <close_stdout@@Base+0x2ca8>
   14840:	push	{r0, r1, lr}
   14844:	bl	1464c <close_stdout@@Base+0x2ac8>
   14848:	pop	{r1, r2, lr}
   1484c:	mul	r3, r2, r0
   14850:	sub	r1, r1, r3
   14854:	bx	lr
   14858:	push	{r1, lr}
   1485c:	mov	r0, #8
   14860:	bl	10f68 <raise@plt>
   14864:	pop	{r1, pc}
   14868:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1486c:	mov	r7, r0
   14870:	ldr	r6, [pc, #76]	; 148c4 <close_stdout@@Base+0x2d40>
   14874:	mov	r8, r1
   14878:	ldr	r5, [pc, #72]	; 148c8 <close_stdout@@Base+0x2d44>
   1487c:	mov	r9, r2
   14880:	add	r6, pc, r6
   14884:	bl	10f24 <fdopen@plt-0x20>
   14888:	add	r5, pc, r5
   1488c:	rsb	r6, r5, r6
   14890:	asrs	r6, r6, #2
   14894:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14898:	sub	r5, r5, #4
   1489c:	mov	r4, #0
   148a0:	add	r4, r4, #1
   148a4:	ldr	r3, [r5, #4]!
   148a8:	mov	r0, r7
   148ac:	mov	r1, r8
   148b0:	mov	r2, r9
   148b4:	blx	r3
   148b8:	cmp	r4, r6
   148bc:	bne	148a0 <close_stdout@@Base+0x2d1c>
   148c0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   148c4:	andeq	r1, r1, r4, lsl #12
   148c8:	strdeq	r1, [r1], -r8
   148cc:	bx	lr
   148d0:	ldr	r3, [pc, #28]	; 148f4 <close_stdout@@Base+0x2d70>
   148d4:	mov	r1, #0
   148d8:	ldr	r2, [pc, #24]	; 148f8 <close_stdout@@Base+0x2d74>
   148dc:	add	r3, pc, r3
   148e0:	ldr	r3, [r3, r2]
   148e4:	cmp	r3, #0
   148e8:	ldrne	r2, [r3]
   148ec:	moveq	r2, r3
   148f0:	b	11124 <__cxa_atexit@plt>
   148f4:	andeq	r1, r1, ip, lsl r7
   148f8:	andeq	r0, r0, r0, lsl r1

Disassembly of section .fini:

000148fc <.fini>:
   148fc:	push	{r3, lr}
   14900:	pop	{r3, pc}
