
centos-preinstalled/cd-iccdump:     file format elf32-littlearm


Disassembly of section .init:

00000acc <_init@@Base>:
 acc:	push	{r3, lr}
 ad0:	bl	f60 <_start@@Base+0x58>
 ad4:	pop	{r3, pc}

Disassembly of section .plt:

00000ad8 <g_free@plt-0x14>:
 ad8:	push	{lr}		; (str lr, [sp, #-4]!)
 adc:	ldr	lr, [pc, #4]	; ae8 <_init@@Base+0x1c>
 ae0:	add	lr, pc, lr
 ae4:	ldr	pc, [lr, #8]!
 ae8:	andeq	r1, r1, r8, lsl r5

00000aec <g_free@plt>:
 aec:	add	ip, pc, #0, 12
 af0:	add	ip, ip, #69632	; 0x11000
 af4:	ldr	pc, [ip, #1304]!	; 0x518

00000af8 <abort@plt>:
 af8:	add	ip, pc, #0, 12
 afc:	add	ip, ip, #69632	; 0x11000
 b00:	ldr	pc, [ip, #1296]!	; 0x510

00000b04 <__gcc_personality_v0@plt>:
 b04:	add	ip, pc, #0, 12
 b08:	add	ip, ip, #69632	; 0x11000
 b0c:	ldr	pc, [ip, #1288]!	; 0x508

00000b10 <__libc_start_main@plt>:
 b10:	add	ip, pc, #0, 12
 b14:	add	ip, ip, #69632	; 0x11000
 b18:	ldr	pc, [ip, #1280]!	; 0x500

00000b1c <g_print@plt>:
 b1c:	add	ip, pc, #0, 12
 b20:	add	ip, ip, #69632	; 0x11000
 b24:	ldr	pc, [ip, #1272]!	; 0x4f8

00000b28 <g_option_context_free@plt>:
 b28:	add	ip, pc, #0, 12
 b2c:	add	ip, ip, #69632	; 0x11000
 b30:	ldr	pc, [ip, #1264]!	; 0x4f0

00000b34 <__gmon_start__@plt>:
 b34:	add	ip, pc, #0, 12
 b38:	add	ip, ip, #69632	; 0x11000
 b3c:	ldr	pc, [ip, #1256]!	; 0x4e8

00000b40 <g_object_unref@plt>:
 b40:	add	ip, pc, #0, 12
 b44:	add	ip, ip, #69632	; 0x11000
 b48:	ldr	pc, [ip, #1248]!	; 0x4e0

00000b4c <bindtextdomain@plt>:
 b4c:	add	ip, pc, #0, 12
 b50:	add	ip, ip, #69632	; 0x11000
 b54:	ldr	pc, [ip, #1240]!	; 0x4d8

00000b58 <bind_textdomain_codeset@plt>:
 b58:	add	ip, pc, #0, 12
 b5c:	add	ip, ip, #69632	; 0x11000
 b60:	ldr	pc, [ip, #1232]!	; 0x4d0

00000b64 <dcgettext@plt>:
 b64:	add	ip, pc, #0, 12
 b68:	add	ip, ip, #69632	; 0x11000
 b6c:	ldr	pc, [ip, #1224]!	; 0x4c8

00000b70 <cd_icc_load_file@plt>:
 b70:	add	ip, pc, #0, 12
 b74:	add	ip, ip, #69632	; 0x11000
 b78:	ldr	pc, [ip, #1216]!	; 0x4c0

00000b7c <g_option_context_parse@plt>:
 b7c:	add	ip, pc, #0, 12
 b80:	add	ip, ip, #69632	; 0x11000
 b84:	ldr	pc, [ip, #1208]!	; 0x4b8

00000b88 <setlocale@plt>:
 b88:	add	ip, pc, #0, 12
 b8c:	add	ip, ip, #69632	; 0x11000
 b90:	ldr	pc, [ip, #1200]!	; 0x4b0

00000b94 <cmsSetLogErrorHandler@plt>:
 b94:	add	ip, pc, #0, 12
 b98:	add	ip, ip, #69632	; 0x11000
 b9c:	ldr	pc, [ip, #1192]!	; 0x4a8

00000ba0 <g_set_application_name@plt>:
 ba0:	add	ip, pc, #0, 12
 ba4:	add	ip, ip, #69632	; 0x11000
 ba8:	ldr	pc, [ip, #1184]!	; 0x4a0

00000bac <__stack_chk_fail@plt>:
 bac:	add	ip, pc, #0, 12
 bb0:	add	ip, ip, #69632	; 0x11000
 bb4:	ldr	pc, [ip, #1176]!	; 0x498

00000bb8 <textdomain@plt>:
 bb8:	add	ip, pc, #0, 12
 bbc:	add	ip, ip, #69632	; 0x11000
 bc0:	ldr	pc, [ip, #1168]!	; 0x490

00000bc4 <g_option_context_new@plt>:
 bc4:	add	ip, pc, #0, 12
 bc8:	add	ip, ip, #69632	; 0x11000
 bcc:	ldr	pc, [ip, #1160]!	; 0x488

00000bd0 <g_error_free@plt>:
 bd0:	add	ip, pc, #0, 12
 bd4:	add	ip, ip, #69632	; 0x11000
 bd8:	ldr	pc, [ip, #1152]!	; 0x480

00000bdc <cd_icc_new@plt>:
 bdc:	add	ip, pc, #0, 12
 be0:	add	ip, ip, #69632	; 0x11000
 be4:	ldr	pc, [ip, #1144]!	; 0x478

00000be8 <g_file_new_for_path@plt>:
 be8:	add	ip, pc, #0, 12
 bec:	add	ip, ip, #69632	; 0x11000
 bf0:	ldr	pc, [ip, #1136]!	; 0x470

00000bf4 <_Unwind_Resume@plt>:
 bf4:	add	ip, pc, #0, 12
 bf8:	add	ip, ip, #69632	; 0x11000
 bfc:	ldr	pc, [ip, #1128]!	; 0x468

00000c00 <g_log@plt>:
 c00:	add	ip, pc, #0, 12
 c04:	add	ip, ip, #69632	; 0x11000
 c08:	ldr	pc, [ip, #1120]!	; 0x460

00000c0c <__cxa_finalize@plt>:
 c0c:	add	ip, pc, #0, 12
 c10:	add	ip, ip, #69632	; 0x11000
 c14:	ldr	pc, [ip, #1112]!	; 0x458

00000c18 <cd_icc_to_string@plt>:
 c18:	add	ip, pc, #0, 12
 c1c:	add	ip, ip, #69632	; 0x11000
 c20:	ldr	pc, [ip, #1104]!	; 0x450

Disassembly of section .text:

00000c24 <main@@Base>:
     c24:	ldr	r3, [pc, #680]	; ed4 <main@@Base+0x2b0>
     c28:	mov	r2, #0
     c2c:	ldr	ip, [pc, #676]	; ed8 <main@@Base+0x2b4>
     c30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c34:	add	r3, pc, r3
     c38:	sub	sp, sp, #36	; 0x24
     c3c:	ldr	r4, [pc, #664]	; edc <main@@Base+0x2b8>
     c40:	str	r0, [sp, #20]
     c44:	mov	r0, #6
     c48:	str	r1, [sp, #16]
     c4c:	add	r4, pc, r4
     c50:	ldr	ip, [r3, ip]
     c54:	ldr	r1, [pc, #644]	; ee0 <main@@Base+0x2bc>
     c58:	str	r2, [sp, #24]
     c5c:	ldr	r3, [ip]
     c60:	add	r1, pc, r1
     c64:	str	ip, [sp, #12]
     c68:	str	r3, [sp, #28]
     c6c:	bl	b88 <setlocale@plt>
     c70:	ldr	r1, [pc, #620]	; ee4 <main@@Base+0x2c0>
     c74:	mov	r0, r4
     c78:	add	r1, pc, r1
     c7c:	bl	b4c <bindtextdomain@plt>
     c80:	ldr	r1, [pc, #608]	; ee8 <main@@Base+0x2c4>
     c84:	mov	r0, r4
     c88:	add	r1, pc, r1
     c8c:	bl	b58 <bind_textdomain_codeset@plt>
     c90:	mov	r0, r4
     c94:	bl	bb8 <textdomain@plt>
     c98:	ldr	r0, [pc, #588]	; eec <main@@Base+0x2c8>
     c9c:	add	r0, pc, r0
     ca0:	bl	b94 <cmsSetLogErrorHandler@plt>
     ca4:	mov	r0, #0
     ca8:	bl	bc4 <g_option_context_new@plt>
     cac:	ldr	r1, [pc, #572]	; ef0 <main@@Base+0x2cc>
     cb0:	mov	r2, #5
     cb4:	str	r0, [sp, #8]
     cb8:	mov	r0, #0
     cbc:	add	r1, pc, r1
     cc0:	bl	b64 <dcgettext@plt>
     cc4:	bl	ba0 <g_set_application_name@plt>
     cc8:	add	r9, sp, #24
     ccc:	ldr	r0, [sp, #8]
     cd0:	add	r1, sp, #20
     cd4:	add	r2, sp, #16
     cd8:	mov	r3, r9
     cdc:	bl	b7c <g_option_context_parse@plt>
     ce0:	cmp	r0, #0
     ce4:	beq	e1c <main@@Base+0x1f8>
     ce8:	ldr	r3, [sp, #20]
     cec:	mov	r4, #1
     cf0:	ldr	fp, [pc, #508]	; ef4 <main@@Base+0x2d0>
     cf4:	cmp	r3, #1
     cf8:	add	fp, pc, fp
     cfc:	bgt	d44 <main@@Base+0x120>
     d00:	b	dac <main@@Base+0x188>
     d04:	cmp	r6, #0
     d08:	beq	d14 <main@@Base+0xf0>
     d0c:	mov	r0, r6
     d10:	bl	b40 <g_object_unref@plt>
     d14:	cmp	r5, #0
     d18:	beq	d24 <main@@Base+0x100>
     d1c:	mov	r0, r5
     d20:	bl	b40 <g_object_unref@plt>
     d24:	mov	r0, r7
     d28:	bl	aec <g_free@plt>
     d2c:	cmp	r8, #0
     d30:	beq	de8 <main@@Base+0x1c4>
     d34:	ldr	r3, [sp, #20]
     d38:	add	r4, r4, #1
     d3c:	cmp	r3, r4
     d40:	ble	dac <main@@Base+0x188>
     d44:	ldr	r3, [sp, #16]
     d48:	lsl	sl, r4, #2
     d4c:	ldr	r6, [r3, r4, lsl #2]
     d50:	bl	bdc <cd_icc_new@plt>
     d54:	mov	r5, r0
     d58:	mov	r0, r6
     d5c:	bl	be8 <g_file_new_for_path@plt>
     d60:	mov	r2, #0
     d64:	mov	r6, r0
     d68:	mov	r1, r0
     d6c:	str	r9, [sp]
     d70:	mov	r3, r2
     d74:	mov	r0, r5
     d78:	bl	b70 <cd_icc_load_file@plt>
     d7c:	cmp	r0, #0
     d80:	moveq	r7, r0
     d84:	moveq	r8, r7
     d88:	beq	d04 <main@@Base+0xe0>
     d8c:	mov	r0, r5
     d90:	bl	c18 <cd_icc_to_string@plt>
     d94:	mov	r7, r0
     d98:	mov	r0, fp
     d9c:	mov	r1, r7
     da0:	bl	b1c <g_print@plt>
     da4:	mov	r8, #1
     da8:	b	d04 <main@@Base+0xe0>
     dac:	mov	r4, #0
     db0:	ldr	r0, [sp, #8]
     db4:	bl	b28 <g_option_context_free@plt>
     db8:	ldr	r0, [sp, #24]
     dbc:	cmp	r0, #0
     dc0:	beq	dc8 <main@@Base+0x1a4>
     dc4:	bl	bd0 <g_error_free@plt>
     dc8:	ldr	r1, [sp, #12]
     dcc:	mov	r0, r4
     dd0:	ldr	r2, [sp, #28]
     dd4:	ldr	r3, [r1]
     dd8:	cmp	r2, r3
     ddc:	bne	e48 <main@@Base+0x224>
     de0:	add	sp, sp, #36	; 0x24
     de4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     de8:	ldr	r2, [sp, #24]
     dec:	mov	r1, #16
     df0:	ldr	r3, [sp, #16]
     df4:	ldr	r0, [pc, #252]	; ef8 <main@@Base+0x2d4>
     df8:	ldr	ip, [r2, #8]
     dfc:	ldr	r2, [pc, #248]	; efc <main@@Base+0x2d8>
     e00:	add	r0, pc, r0
     e04:	str	ip, [sp]
     e08:	add	r2, pc, r2
     e0c:	ldr	r3, [r3, sl]
     e10:	bl	c00 <g_log@plt>
     e14:	mov	r4, #1
     e18:	b	db0 <main@@Base+0x18c>
     e1c:	ldr	r1, [pc, #220]	; f00 <main@@Base+0x2dc>
     e20:	mov	r2, #5
     e24:	add	r1, pc, r1
     e28:	bl	b64 <dcgettext@plt>
     e2c:	ldr	r3, [sp, #24]
     e30:	ldr	r2, [r3, #8]
     e34:	mov	r1, r0
     e38:	ldr	r0, [pc, #196]	; f04 <main@@Base+0x2e0>
     e3c:	add	r0, pc, r0
     e40:	bl	b1c <g_print@plt>
     e44:	b	e14 <main@@Base+0x1f0>
     e48:	bl	bac <__stack_chk_fail@plt>
     e4c:	mov	r4, r0
     e50:	mov	r0, r7
     e54:	bl	aec <g_free@plt>
     e58:	ldr	r0, [sp, #24]
     e5c:	cmp	r0, #0
     e60:	beq	e68 <main@@Base+0x244>
     e64:	bl	bd0 <g_error_free@plt>
     e68:	mov	r0, r4
     e6c:	bl	bf4 <_Unwind_Resume@plt>
     e70:	mov	r4, r0
     e74:	b	e58 <main@@Base+0x234>
     e78:	mov	r4, r0
     e7c:	cmp	r6, #0
     e80:	beq	e8c <main@@Base+0x268>
     e84:	mov	r0, r6
     e88:	bl	b40 <g_object_unref@plt>
     e8c:	cmp	r5, #0
     e90:	beq	e50 <main@@Base+0x22c>
     e94:	mov	r0, r5
     e98:	bl	b40 <g_object_unref@plt>
     e9c:	b	e50 <main@@Base+0x22c>
     ea0:	mov	r4, r0
     ea4:	mov	r7, #0
     ea8:	b	e7c <main@@Base+0x258>
     eac:	mov	r4, r0
     eb0:	b	e8c <main@@Base+0x268>
     eb4:	b	ea0 <main@@Base+0x27c>
     eb8:	mov	r4, r0
     ebc:	mov	r7, #0
     ec0:	b	e8c <main@@Base+0x268>
     ec4:	mov	r5, #0
     ec8:	mov	r4, r0
     ecc:	mov	r7, r5
     ed0:	b	e8c <main@@Base+0x268>
     ed4:	andeq	r1, r1, r4, asr #7
     ed8:	andeq	r0, r0, ip, lsl #1
     edc:	andeq	r0, r0, r8, ror #10
     ee0:	muleq	r0, r0, r5
     ee4:	andeq	r0, r0, r4, asr #10
     ee8:	andeq	r0, r0, r8, asr #10
     eec:	andeq	r0, r0, r0, asr #8
     ef0:	andeq	r0, r0, ip, lsl r5
     ef4:	andeq	r0, r0, ip, lsl r5
     ef8:	muleq	r0, ip, r3
     efc:	andeq	r0, r0, r0, lsl r4
     f00:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
     f04:	ldrdeq	r0, [r0], -r4

00000f08 <_start@@Base>:
     f08:	mov	fp, #0
     f0c:	mov	lr, #0
     f10:	pop	{r1}		; (ldr r1, [sp], #4)
     f14:	mov	r2, sp
     f18:	push	{r2}		; (str r2, [sp, #-4]!)
     f1c:	push	{r0}		; (str r0, [sp, #-4]!)
     f20:	ldr	sl, [pc, #40]	; f50 <_start@@Base+0x48>
     f24:	add	r3, pc, #36	; 0x24
     f28:	add	sl, sl, r3
     f2c:	ldr	ip, [pc, #32]	; f54 <_start@@Base+0x4c>
     f30:	ldr	ip, [sl, ip]
     f34:	push	{ip}		; (str ip, [sp, #-4]!)
     f38:	ldr	r3, [pc, #24]	; f58 <_start@@Base+0x50>
     f3c:	ldr	r3, [sl, r3]
     f40:	ldr	r0, [pc, #20]	; f5c <_start@@Base+0x54>
     f44:	ldr	r0, [sl, r0]
     f48:	bl	b10 <__libc_start_main@plt>
     f4c:	bl	af8 <abort@plt>
     f50:	strheq	r1, [r1], -r0
     f54:	andeq	r0, r0, r4, ror r0
     f58:	andeq	r0, r0, r8, lsl #1
     f5c:	muleq	r0, r4, r0
     f60:	ldr	r3, [pc, #20]	; f7c <_start@@Base+0x74>
     f64:	ldr	r2, [pc, #20]	; f80 <_start@@Base+0x78>
     f68:	add	r3, pc, r3
     f6c:	ldr	r2, [r3, r2]
     f70:	cmp	r2, #0
     f74:	bxeq	lr
     f78:	b	b34 <__gmon_start__@plt>
     f7c:	muleq	r1, r0, r0
     f80:	andeq	r0, r0, r8, ror r0
     f84:	ldr	r2, [pc, #60]	; fc8 <_start@@Base+0xc0>
     f88:	ldr	r0, [pc, #60]	; fcc <_start@@Base+0xc4>
     f8c:	add	r2, pc, r2
     f90:	add	r0, pc, r0
     f94:	add	r2, r2, #3
     f98:	rsb	r2, r0, r2
     f9c:	push	{r3, lr}
     fa0:	cmp	r2, #6
     fa4:	ldr	r3, [pc, #36]	; fd0 <_start@@Base+0xc8>
     fa8:	add	r3, pc, r3
     fac:	popls	{r3, pc}
     fb0:	ldr	r2, [pc, #28]	; fd4 <_start@@Base+0xcc>
     fb4:	ldr	r3, [r3, r2]
     fb8:	cmp	r3, #0
     fbc:	popeq	{r3, pc}
     fc0:	blx	r3
     fc4:	pop	{r3, pc}
     fc8:	andeq	r1, r1, r8, lsl #2
     fcc:	andeq	r1, r1, r4, lsl #2
     fd0:	andeq	r1, r1, r0, asr r0
     fd4:	andeq	r0, r0, r0, lsl #1
     fd8:	push	{r3, lr}
     fdc:	ldr	r0, [pc, #64]	; 1024 <_start@@Base+0x11c>
     fe0:	ldr	r3, [pc, #64]	; 1028 <_start@@Base+0x120>
     fe4:	add	r0, pc, r0
     fe8:	ldr	r2, [pc, #60]	; 102c <_start@@Base+0x124>
     fec:	add	r3, pc, r3
     ff0:	rsb	r3, r0, r3
     ff4:	add	r2, pc, r2
     ff8:	asr	r3, r3, #2
     ffc:	add	r3, r3, r3, lsr #31
    1000:	asrs	r3, r3, #1
    1004:	popeq	{r3, pc}
    1008:	ldr	r1, [pc, #32]	; 1030 <_start@@Base+0x128>
    100c:	ldr	r2, [r2, r1]
    1010:	cmp	r2, #0
    1014:	popeq	{r3, pc}
    1018:	mov	r1, r3
    101c:	blx	r2
    1020:	pop	{r3, pc}
    1024:	strheq	r1, [r1], -r0
    1028:	andeq	r1, r1, r8, lsr #1
    102c:	andeq	r1, r1, r4
    1030:	andeq	r0, r0, r4, lsl #1
    1034:	ldr	r2, [pc, #76]	; 1088 <_start@@Base+0x180>
    1038:	push	{r3, lr}
    103c:	add	r2, pc, r2
    1040:	ldr	r3, [pc, #68]	; 108c <_start@@Base+0x184>
    1044:	ldrb	r2, [r2]
    1048:	add	r3, pc, r3
    104c:	cmp	r2, #0
    1050:	popne	{r3, pc}
    1054:	ldr	r2, [pc, #52]	; 1090 <_start@@Base+0x188>
    1058:	ldr	r3, [r3, r2]
    105c:	cmp	r3, #0
    1060:	beq	1070 <_start@@Base+0x168>
    1064:	ldr	r0, [pc, #40]	; 1094 <_start@@Base+0x18c>
    1068:	add	r0, pc, r0
    106c:	bl	c0c <__cxa_finalize@plt>
    1070:	bl	f84 <_start@@Base+0x7c>
    1074:	ldr	r3, [pc, #28]	; 1098 <_start@@Base+0x190>
    1078:	mov	r2, #1
    107c:	add	r3, pc, r3
    1080:	strb	r2, [r3]
    1084:	pop	{r3, pc}
    1088:	andeq	r1, r1, r8, asr r0
    108c:			; <UNDEFINED> instruction: 0x00010fb0
    1090:	muleq	r0, r0, r0
    1094:	andeq	r0, r1, r4, lsr lr
    1098:	andeq	r1, r1, r8, lsl r0
    109c:	ldr	r0, [pc, #52]	; 10d8 <_start@@Base+0x1d0>
    10a0:	push	{r3, lr}
    10a4:	add	r0, pc, r0
    10a8:	ldr	r3, [pc, #44]	; 10dc <_start@@Base+0x1d4>
    10ac:	ldr	r2, [r0]
    10b0:	add	r3, pc, r3
    10b4:	cmp	r2, #0
    10b8:	beq	10d0 <_start@@Base+0x1c8>
    10bc:	ldr	r2, [pc, #28]	; 10e0 <_start@@Base+0x1d8>
    10c0:	ldr	r3, [r3, r2]
    10c4:	cmp	r3, #0
    10c8:	beq	10d0 <_start@@Base+0x1c8>
    10cc:	blx	r3
    10d0:	pop	{r3, lr}
    10d4:	b	fd8 <_start@@Base+0xd0>
    10d8:	strdeq	r0, [r1], -r4
    10dc:	andeq	r0, r1, r8, asr #30
    10e0:	andeq	r0, r0, ip, ror r0
    10e4:	push	{r4, lr}
    10e8:	sub	sp, sp, #8
    10ec:	ldr	r0, [pc, #48]	; 1124 <_start@@Base+0x21c>
    10f0:	mov	r4, r1
    10f4:	str	r2, [sp]
    10f8:	mov	r3, r1
    10fc:	ldr	r2, [pc, #36]	; 1128 <_start@@Base+0x220>
    1100:	add	r0, pc, r0
    1104:	mov	r1, #16
    1108:	add	r2, pc, r2
    110c:	bl	c00 <g_log@plt>
    1110:	ldr	r3, [pc, #20]	; 112c <_start@@Base+0x224>
    1114:	add	r3, pc, r3
    1118:	str	r4, [r3]
    111c:	add	sp, sp, #8
    1120:	pop	{r4, pc}
    1124:	muleq	r0, ip, r0
    1128:	muleq	r0, r8, r0
    112c:	andeq	r0, r1, r4, lsl #31

00001130 <__libc_csu_init@@Base>:
    1130:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    1134:	mov	r7, r0
    1138:	ldr	r6, [pc, #76]	; 118c <__libc_csu_init@@Base+0x5c>
    113c:	mov	r8, r1
    1140:	ldr	r5, [pc, #72]	; 1190 <__libc_csu_init@@Base+0x60>
    1144:	mov	r9, r2
    1148:	add	r6, pc, r6
    114c:	bl	acc <_init@@Base>
    1150:	add	r5, pc, r5
    1154:	rsb	r6, r5, r6
    1158:	asrs	r6, r6, #2
    115c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
    1160:	sub	r5, r5, #4
    1164:	mov	r4, #0
    1168:	add	r4, r4, #1
    116c:	ldr	r3, [r5, #4]!
    1170:	mov	r0, r7
    1174:	mov	r1, r8
    1178:	mov	r2, r9
    117c:	blx	r3
    1180:	cmp	r4, r6
    1184:	bne	1168 <__libc_csu_init@@Base+0x38>
    1188:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    118c:	andeq	r0, r1, ip, asr #26
    1190:	andeq	r0, r1, r0, asr #26

00001194 <__libc_csu_fini@@Base>:
    1194:	bx	lr

Disassembly of section .fini:

00001198 <_fini@@Base>:
    1198:	push	{r3, lr}
    119c:	pop	{r3, pc}
