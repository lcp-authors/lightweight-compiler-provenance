
centos-preinstalled/uniq:     file format elf32-littlearm


Disassembly of section .init:

00011104 <.init>:
   11104:	push	{r3, lr}
   11108:	bl	1237c <__assert_fail@plt+0xf58>
   1110c:	pop	{r3, pc}

Disassembly of section .plt:

00011110 <fdopen@plt-0x14>:
   11110:	push	{lr}		; (str lr, [sp, #-4]!)
   11114:	ldr	lr, [pc, #4]	; 11120 <fdopen@plt-0x4>
   11118:	add	lr, pc, lr
   1111c:	ldr	pc, [lr, #8]!
   11120:	andeq	r6, r1, r0, ror #29

00011124 <fdopen@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #90112	; 0x16000
   1112c:	ldr	pc, [ip, #3808]!	; 0xee0

00011130 <calloc@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #90112	; 0x16000
   11138:	ldr	pc, [ip, #3800]!	; 0xed8

0001113c <fputs_unlocked@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #90112	; 0x16000
   11144:	ldr	pc, [ip, #3792]!	; 0xed0

00011148 <raise@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #90112	; 0x16000
   11150:	ldr	pc, [ip, #3784]!	; 0xec8

00011154 <wcrtomb@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #90112	; 0x16000
   1115c:	ldr	pc, [ip, #3776]!	; 0xec0

00011160 <strcmp@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #90112	; 0x16000
   11168:	ldr	pc, [ip, #3768]!	; 0xeb8

0001116c <strtol@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #90112	; 0x16000
   11174:	ldr	pc, [ip, #3760]!	; 0xeb0

00011178 <posix_fadvise64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #90112	; 0x16000
   11180:	ldr	pc, [ip, #3752]!	; 0xea8

00011184 <fflush@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #90112	; 0x16000
   1118c:	ldr	pc, [ip, #3744]!	; 0xea0

00011190 <free@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #90112	; 0x16000
   11198:	ldr	pc, [ip, #3736]!	; 0xe98

0001119c <_exit@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #90112	; 0x16000
   111a4:	ldr	pc, [ip, #3728]!	; 0xe90

000111a8 <memcpy@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #90112	; 0x16000
   111b0:	ldr	pc, [ip, #3720]!	; 0xe88

000111b4 <iswblank@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #90112	; 0x16000
   111bc:	ldr	pc, [ip, #3712]!	; 0xe80

000111c0 <mbsinit@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #90112	; 0x16000
   111c8:	ldr	pc, [ip, #3704]!	; 0xe78

000111cc <fwrite_unlocked@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #90112	; 0x16000
   111d4:	ldr	pc, [ip, #3696]!	; 0xe70

000111d8 <memcmp@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #90112	; 0x16000
   111e0:	ldr	pc, [ip, #3688]!	; 0xe68

000111e4 <dcgettext@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #90112	; 0x16000
   111ec:	ldr	pc, [ip, #3680]!	; 0xe60

000111f0 <__stack_chk_fail@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #90112	; 0x16000
   111f8:	ldr	pc, [ip, #3672]!	; 0xe58

000111fc <dup2@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3664]!	; 0xe50

00011208 <realloc@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3656]!	; 0xe48

00011214 <textdomain@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3648]!	; 0xe40

00011220 <iswprint@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3640]!	; 0xe38

0001122c <fwrite@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3632]!	; 0xe30

00011238 <lseek64@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3624]!	; 0xe28

00011244 <__ctype_get_mb_cur_max@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3616]!	; 0xe20

00011250 <strcpy@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3608]!	; 0xe18

0001125c <__fpending@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3600]!	; 0xe10

00011268 <mbrtowc@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3592]!	; 0xe08

00011274 <error@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3584]!	; 0xe00

00011280 <open64@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3576]!	; 0xdf8

0001128c <strcoll@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3568]!	; 0xdf0

00011298 <getenv@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3560]!	; 0xde8

000112a4 <malloc@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3552]!	; 0xde0

000112b0 <__libc_start_main@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3544]!	; 0xdd8

000112bc <__freading@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3536]!	; 0xdd0

000112c8 <__ctype_toupper_loc@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3528]!	; 0xdc8

000112d4 <__gmon_start__@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3520]!	; 0xdc0

000112e0 <freopen64@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3512]!	; 0xdb8

000112ec <getopt_long@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3504]!	; 0xdb0

000112f8 <__ctype_b_loc@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3496]!	; 0xda8

00011304 <exit@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3488]!	; 0xda0

00011310 <strtoul@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3480]!	; 0xd98

0001131c <strlen@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3472]!	; 0xd90

00011328 <strchr@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3464]!	; 0xd88

00011334 <ungetc@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3456]!	; 0xd80

00011340 <__errno_location@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3448]!	; 0xd78

0001134c <__cxa_atexit@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3440]!	; 0xd70

00011358 <memset@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3432]!	; 0xd68

00011364 <fscanf@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3424]!	; 0xd60

00011370 <__printf_chk@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3416]!	; 0xd58

0001137c <fileno@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #90112	; 0x16000
   11384:	ldr	pc, [ip, #3408]!	; 0xd50

00011388 <__fprintf_chk@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #90112	; 0x16000
   11390:	ldr	pc, [ip, #3400]!	; 0xd48

00011394 <fclose@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #90112	; 0x16000
   1139c:	ldr	pc, [ip, #3392]!	; 0xd40

000113a0 <fseeko64@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #90112	; 0x16000
   113a8:	ldr	pc, [ip, #3384]!	; 0xd38

000113ac <__uflow@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #90112	; 0x16000
   113b4:	ldr	pc, [ip, #3376]!	; 0xd30

000113b8 <__overflow@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #90112	; 0x16000
   113c0:	ldr	pc, [ip, #3368]!	; 0xd28

000113c4 <setlocale@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #90112	; 0x16000
   113cc:	ldr	pc, [ip, #3360]!	; 0xd20

000113d0 <strrchr@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #90112	; 0x16000
   113d8:	ldr	pc, [ip, #3352]!	; 0xd18

000113dc <nl_langinfo@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #90112	; 0x16000
   113e4:	ldr	pc, [ip, #3344]!	; 0xd10

000113e8 <bindtextdomain@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #90112	; 0x16000
   113f0:	ldr	pc, [ip, #3336]!	; 0xd08

000113f4 <towupper@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #90112	; 0x16000
   113fc:	ldr	pc, [ip, #3328]!	; 0xd00

00011400 <strncmp@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #90112	; 0x16000
   11408:	ldr	pc, [ip, #3320]!	; 0xcf8

0001140c <abort@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #90112	; 0x16000
   11414:	ldr	pc, [ip, #3312]!	; 0xcf0

00011418 <close@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #90112	; 0x16000
   11420:	ldr	pc, [ip, #3304]!	; 0xce8

00011424 <__assert_fail@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #90112	; 0x16000
   1142c:	ldr	pc, [ip, #3296]!	; 0xce0

Disassembly of section .text:

00011430 <close_stdout@@Base-0x1f28>:
   11430:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11434:	mov	r9, r0
   11438:	ldr	r7, [pc, #3556]	; 12224 <__assert_fail@plt+0xe00>
   1143c:	sub	sp, sp, #148	; 0x94
   11440:	ldr	r3, [pc, #3552]	; 12228 <__assert_fail@plt+0xe04>
   11444:	mov	r8, r1
   11448:	add	r7, pc, r7
   1144c:	ldr	r0, [pc, #3544]	; 1222c <__assert_fail@plt+0xe08>
   11450:	ldr	r5, [pc, #3544]	; 12230 <__assert_fail@plt+0xe0c>
   11454:	ldr	r3, [r7, r3]
   11458:	add	r0, pc, r0
   1145c:	add	r5, pc, r5
   11460:	ldr	r4, [pc, #3532]	; 12234 <__assert_fail@plt+0xe10>
   11464:	ldr	r3, [r3]
   11468:	add	r4, pc, r4
   1146c:	str	r3, [sp, #140]	; 0x8c
   11470:	bl	11298 <getenv@plt>
   11474:	ldr	r3, [pc, #3516]	; 12238 <__assert_fail@plt+0xe14>
   11478:	add	r3, pc, r3
   1147c:	str	r3, [sp, #80]	; 0x50
   11480:	str	r3, [sp, #76]	; 0x4c
   11484:	adds	sl, r0, #0
   11488:	ldr	r0, [r8]
   1148c:	movne	sl, #1
   11490:	bl	138f8 <close_stdout@@Base+0x5a0>
   11494:	ldr	r1, [pc, #3488]	; 1223c <__assert_fail@plt+0xe18>
   11498:	mov	r0, #6
   1149c:	add	r1, pc, r1
   114a0:	bl	113c4 <setlocale@plt>
   114a4:	ldr	r1, [pc, #3476]	; 12240 <__assert_fail@plt+0xe1c>
   114a8:	mov	r0, r5
   114ac:	add	r1, pc, r1
   114b0:	bl	113e8 <bindtextdomain@plt>
   114b4:	mov	r0, r5
   114b8:	bl	11214 <textdomain@plt>
   114bc:	mov	r0, #3
   114c0:	bl	13704 <close_stdout@@Base+0x3ac>
   114c4:	ldr	r3, [pc, #3448]	; 12244 <__assert_fail@plt+0xe20>
   114c8:	strb	r0, [r4, #20]
   114cc:	ldr	r0, [r7, r3]
   114d0:	bl	16a50 <close_stdout@@Base+0x36f8>
   114d4:	bl	11244 <__ctype_get_mb_cur_max@plt>
   114d8:	cmp	r0, #1
   114dc:	bls	116fc <__assert_fail@plt+0x2d8>
   114e0:	ldr	r3, [pc, #3424]	; 12248 <__assert_fail@plt+0xe24>
   114e4:	add	r3, pc, r3
   114e8:	str	r3, [r4, #24]
   114ec:	ldr	r3, [pc, #3416]	; 1224c <__assert_fail@plt+0xe28>
   114f0:	mov	r2, #0
   114f4:	ldr	r1, [pc, #3412]	; 12250 <__assert_fail@plt+0xe2c>
   114f8:	mov	r4, r2
   114fc:	add	r3, pc, r3
   11500:	ldr	r0, [pc, #3404]	; 12254 <__assert_fail@plt+0xe30>
   11504:	add	r1, pc, r1
   11508:	ldr	lr, [pc, #3400]	; 12258 <__assert_fail@plt+0xe34>
   1150c:	str	r1, [sp, #28]
   11510:	mvn	r1, #0
   11514:	str	r1, [r3, #8]
   11518:	add	lr, pc, lr
   1151c:	ldr	r1, [sp, #28]
   11520:	add	r0, pc, r0
   11524:	str	r2, [sp, #24]
   11528:	mov	r5, r2
   1152c:	add	r1, r1, #28
   11530:	str	lr, [sp, #32]
   11534:	str	r2, [sp, #36]	; 0x24
   11538:	add	r0, r0, #224	; 0xe0
   1153c:	str	r2, [r3, #4]
   11540:	add	lr, lr, #16
   11544:	str	r2, [r3]
   11548:	strb	r2, [r3, #30]
   1154c:	str	r2, [r3, #32]
   11550:	mov	r2, #1
   11554:	str	r1, [sp, #48]	; 0x30
   11558:	mov	r1, #10
   1155c:	str	r0, [sp, #44]	; 0x2c
   11560:	strb	r2, [r3, #28]
   11564:	str	lr, [sp, #52]	; 0x34
   11568:	strb	r2, [r3, #29]
   1156c:	str	r2, [r3, #16]
   11570:	str	r1, [sp, #40]	; 0x28
   11574:	b	115c4 <__assert_fail@plt+0x1a0>
   11578:	cmp	r4, #0
   1157c:	moveq	r6, #0
   11580:	andne	r6, sl, #1
   11584:	cmp	r6, #0
   11588:	beq	115d4 <__assert_fail@plt+0x1b0>
   1158c:	ldr	r3, [pc, #3272]	; 1225c <__assert_fail@plt+0xe38>
   11590:	ldr	r6, [r7, r3]
   11594:	ldr	r3, [r6]
   11598:	cmp	r9, r3
   1159c:	ble	1170c <__assert_fail@plt+0x2e8>
   115a0:	cmp	r4, #2
   115a4:	beq	119b0 <__assert_fail@plt+0x58c>
   115a8:	add	r2, r3, #1
   115ac:	add	lr, sp, #144	; 0x90
   115b0:	str	r2, [r6]
   115b4:	ldr	r2, [r8, r3, lsl #2]
   115b8:	add	r3, lr, r4, lsl #2
   115bc:	add	r4, r4, #1
   115c0:	str	r2, [r3, #-68]	; 0xffffffbc
   115c4:	cmn	r5, #1
   115c8:	bne	11578 <__assert_fail@plt+0x154>
   115cc:	mvn	r5, #0
   115d0:	b	1158c <__assert_fail@plt+0x168>
   115d4:	ldr	fp, [pc, #3204]	; 12260 <__assert_fail@plt+0xe3c>
   115d8:	mov	r0, r9
   115dc:	ldr	r2, [pc, #3200]	; 12264 <__assert_fail@plt+0xe40>
   115e0:	mov	r1, r8
   115e4:	add	fp, pc, fp
   115e8:	str	r6, [sp]
   115ec:	add	r2, pc, r2
   115f0:	mov	r3, fp
   115f4:	bl	112ec <getopt_long@plt>
   115f8:	cmn	r0, #1
   115fc:	mov	r5, r0
   11600:	beq	115cc <__assert_fail@plt+0x1a8>
   11604:	cmp	r0, #100	; 0x64
   11608:	beq	11e0c <__assert_fail@plt+0x9e8>
   1160c:	ble	11664 <__assert_fail@plt+0x240>
   11610:	cmp	r0, #117	; 0x75
   11614:	beq	11dac <__assert_fail@plt+0x988>
   11618:	bgt	11694 <__assert_fail@plt+0x270>
   1161c:	cmp	r0, #105	; 0x69
   11620:	beq	11a78 <__assert_fail@plt+0x654>
   11624:	cmp	r0, #115	; 0x73
   11628:	beq	11a50 <__assert_fail@plt+0x62c>
   1162c:	cmp	r0, #102	; 0x66
   11630:	bne	1168c <__assert_fail@plt+0x268>
   11634:	ldr	r3, [pc, #3116]	; 12268 <__assert_fail@plt+0xe44>
   11638:	mov	r1, #2
   1163c:	str	r1, [sp, #36]	; 0x24
   11640:	ldr	r1, [pc, #3108]	; 1226c <__assert_fail@plt+0xe48>
   11644:	ldr	r3, [r7, r3]
   11648:	add	r1, pc, r1
   1164c:	ldr	r0, [r3]
   11650:	bl	128ac <__assert_fail@plt+0x1488>
   11654:	ldr	r3, [pc, #3092]	; 12270 <__assert_fail@plt+0xe4c>
   11658:	add	r3, pc, r3
   1165c:	str	r0, [r3]
   11660:	b	11578 <__assert_fail@plt+0x154>
   11664:	cmp	r0, #57	; 0x39
   11668:	bgt	116d4 <__assert_fail@plt+0x2b0>
   1166c:	cmp	r0, #48	; 0x30
   11670:	bge	11dc4 <__assert_fail@plt+0x9a0>
   11674:	cmn	r0, #2
   11678:	beq	119ec <__assert_fail@plt+0x5c8>
   1167c:	cmp	r0, #1
   11680:	beq	11d74 <__assert_fail@plt+0x950>
   11684:	cmn	r0, #3
   11688:	beq	11b54 <__assert_fail@plt+0x730>
   1168c:	mov	r0, #1
   11690:	bl	12cac <__assert_fail@plt+0x1888>
   11694:	cmp	r0, #122	; 0x7a
   11698:	beq	11a8c <__assert_fail@plt+0x668>
   1169c:	cmp	r0, #256	; 0x100
   116a0:	beq	119f4 <__assert_fail@plt+0x5d0>
   116a4:	cmp	r0, #119	; 0x77
   116a8:	bne	1168c <__assert_fail@plt+0x268>
   116ac:	ldr	r3, [pc, #2996]	; 12268 <__assert_fail@plt+0xe44>
   116b0:	ldr	r1, [pc, #3004]	; 12274 <__assert_fail@plt+0xe50>
   116b4:	ldr	r3, [r7, r3]
   116b8:	add	r1, pc, r1
   116bc:	ldr	r0, [r3]
   116c0:	bl	128ac <__assert_fail@plt+0x1488>
   116c4:	ldr	r3, [pc, #2988]	; 12278 <__assert_fail@plt+0xe54>
   116c8:	add	r3, pc, r3
   116cc:	str	r0, [r3, #8]
   116d0:	b	11578 <__assert_fail@plt+0x154>
   116d4:	cmp	r0, #68	; 0x44
   116d8:	beq	11a94 <__assert_fail@plt+0x670>
   116dc:	cmp	r0, #99	; 0x63
   116e0:	bne	1168c <__assert_fail@plt+0x268>
   116e4:	ldr	r3, [pc, #2960]	; 1227c <__assert_fail@plt+0xe58>
   116e8:	mov	r1, #1
   116ec:	str	r1, [sp, #24]
   116f0:	add	r3, pc, r3
   116f4:	str	r6, [r3, #16]
   116f8:	b	11578 <__assert_fail@plt+0x154>
   116fc:	ldr	r3, [pc, #2940]	; 12280 <__assert_fail@plt+0xe5c>
   11700:	add	r3, pc, r3
   11704:	str	r3, [r4, #24]
   11708:	b	114ec <__assert_fail@plt+0xc8>
   1170c:	ldr	r3, [pc, #2928]	; 12284 <__assert_fail@plt+0xe60>
   11710:	add	r3, pc, r3
   11714:	ldr	r2, [r3, #36]	; 0x24
   11718:	cmp	r2, #0
   1171c:	bne	11b10 <__assert_fail@plt+0x6ec>
   11720:	ldr	r4, [r3, #16]
   11724:	cmp	r4, #0
   11728:	bne	11738 <__assert_fail@plt+0x314>
   1172c:	ldrb	r3, [r3, #30]
   11730:	cmp	r3, #0
   11734:	bne	12094 <__assert_fail@plt+0xc70>
   11738:	ldr	r1, [sp, #76]	; 0x4c
   1173c:	ldr	r4, [sp, #80]	; 0x50
   11740:	ldrb	r3, [r1]
   11744:	str	r1, [sp, #60]	; 0x3c
   11748:	cmp	r3, #45	; 0x2d
   1174c:	beq	11e34 <__assert_fail@plt+0xa10>
   11750:	ldr	r3, [pc, #2864]	; 12288 <__assert_fail@plt+0xe64>
   11754:	ldr	r1, [pc, #2864]	; 1228c <__assert_fail@plt+0xe68>
   11758:	ldr	r0, [sp, #60]	; 0x3c
   1175c:	ldr	r3, [r7, r3]
   11760:	add	r1, pc, r1
   11764:	ldr	r2, [r3]
   11768:	str	r3, [sp, #36]	; 0x24
   1176c:	bl	135a8 <close_stdout@@Base+0x250>
   11770:	cmp	r0, #0
   11774:	beq	11ff0 <__assert_fail@plt+0xbcc>
   11778:	ldrb	r3, [r4]
   1177c:	cmp	r3, #45	; 0x2d
   11780:	beq	11e24 <__assert_fail@plt+0xa00>
   11784:	ldr	r3, [pc, #2820]	; 12290 <__assert_fail@plt+0xe6c>
   11788:	mov	r0, r4
   1178c:	ldr	r1, [pc, #2816]	; 12294 <__assert_fail@plt+0xe70>
   11790:	ldr	r3, [r7, r3]
   11794:	add	r1, pc, r1
   11798:	ldr	r2, [r3]
   1179c:	bl	135a8 <close_stdout@@Base+0x250>
   117a0:	cmp	r0, #0
   117a4:	beq	11fd0 <__assert_fail@plt+0xbac>
   117a8:	ldr	r2, [sp, #36]	; 0x24
   117ac:	add	r4, sp, #100	; 0x64
   117b0:	mov	r1, #2
   117b4:	add	r8, sp, #120	; 0x78
   117b8:	ldr	r0, [r2]
   117bc:	bl	13518 <close_stdout@@Base+0x1c0>
   117c0:	mov	r0, r4
   117c4:	bl	1375c <close_stdout@@Base+0x404>
   117c8:	mov	r0, r8
   117cc:	bl	1375c <close_stdout@@Base+0x404>
   117d0:	ldr	r3, [pc, #2752]	; 12298 <__assert_fail@plt+0xe74>
   117d4:	add	r3, pc, r3
   117d8:	ldrb	r2, [r3, #29]
   117dc:	cmp	r2, #0
   117e0:	beq	117fc <__assert_fail@plt+0x3d8>
   117e4:	ldrb	r2, [r3, #28]
   117e8:	cmp	r2, #0
   117ec:	beq	117fc <__assert_fail@plt+0x3d8>
   117f0:	ldr	r3, [r3, #16]
   117f4:	cmp	r3, #1
   117f8:	beq	11e74 <__assert_fail@plt+0xa50>
   117fc:	ldr	r2, [sp, #36]	; 0x24
   11800:	mov	r0, r8
   11804:	ldr	r1, [r2]
   11808:	ldr	r2, [sp, #40]	; 0x28
   1180c:	bl	13768 <close_stdout@@Base+0x410>
   11810:	cmp	r0, #0
   11814:	beq	11c70 <__assert_fail@plt+0x84c>
   11818:	ldr	r3, [pc, #2684]	; 1229c <__assert_fail@plt+0xe78>
   1181c:	mov	r0, r8
   11820:	add	lr, sp, #84	; 0x54
   11824:	str	lr, [sp, #20]
   11828:	add	r3, pc, r3
   1182c:	ldr	r3, [r3, #24]
   11830:	blx	r3
   11834:	ldr	r1, [sp, #36]	; 0x24
   11838:	ldr	r2, [sp, #128]	; 0x80
   1183c:	ldr	lr, [sp, #124]	; 0x7c
   11840:	ldr	r3, [r1]
   11844:	add	r1, sp, #132	; 0x84
   11848:	sub	lr, lr, #1
   1184c:	ldr	ip, [r3]
   11850:	tst	ip, #16
   11854:	rsb	r2, r0, r2
   11858:	str	r0, [sp, #28]
   1185c:	add	r2, lr, r2
   11860:	ldm	r1, {r0, r1}
   11864:	str	r2, [sp, #32]
   11868:	ldr	r2, [sp, #20]
   1186c:	stm	r2, {r0, r1}
   11870:	bne	11e50 <__assert_fail@plt+0xa2c>
   11874:	ldr	r9, [pc, #2596]	; 122a0 <__assert_fail@plt+0xe7c>
   11878:	add	r5, sp, #92	; 0x5c
   1187c:	ldr	lr, [pc, #2592]	; 122a4 <__assert_fail@plt+0xe80>
   11880:	mov	sl, #0
   11884:	ldr	r1, [pc, #2588]	; 122a8 <__assert_fail@plt+0xe84>
   11888:	add	r9, pc, r9
   1188c:	add	lr, pc, lr
   11890:	ldr	r2, [pc, #2580]	; 122ac <__assert_fail@plt+0xe88>
   11894:	str	lr, [sp, #44]	; 0x2c
   11898:	mov	fp, #0
   1189c:	ldr	lr, [pc, #2572]	; 122b0 <__assert_fail@plt+0xe8c>
   118a0:	add	r1, pc, r1
   118a4:	add	r2, pc, r2
   118a8:	str	r1, [sp, #64]	; 0x40
   118ac:	add	lr, pc, lr
   118b0:	mov	r1, #1
   118b4:	str	r2, [sp, #56]	; 0x38
   118b8:	str	lr, [sp, #48]	; 0x30
   118bc:	str	r1, [sp, #52]	; 0x34
   118c0:	str	r7, [sp, #68]	; 0x44
   118c4:	add	r0, r4, #12
   118c8:	ldr	r2, [sp, #40]	; 0x28
   118cc:	ldm	r0, {r0, r1}
   118d0:	stm	r5, {r0, r1}
   118d4:	mov	r1, r3
   118d8:	mov	r0, r4
   118dc:	bl	13768 <close_stdout@@Base+0x410>
   118e0:	cmp	r0, #0
   118e4:	beq	12024 <__assert_fail@plt+0xc00>
   118e8:	ldr	r3, [r9, #24]
   118ec:	mov	r0, r4
   118f0:	blx	r3
   118f4:	ldr	r3, [r4, #8]
   118f8:	ldr	r7, [r4, #4]
   118fc:	sub	r7, r7, #1
   11900:	rsb	r3, r0, r3
   11904:	mov	r6, r0
   11908:	add	r7, r7, r3
   1190c:	bl	11244 <__ctype_get_mb_cur_max@plt>
   11910:	cmp	r0, #1
   11914:	bls	11ce8 <__assert_fail@plt+0x8c4>
   11918:	ldm	r5, {r0, r1}
   1191c:	add	ip, sp, #8
   11920:	ldr	lr, [sp, #20]
   11924:	mov	r2, r7
   11928:	ldr	r3, [sp, #32]
   1192c:	stm	sp, {r0, r1}
   11930:	ldm	lr, {r0, r1}
   11934:	stm	ip, {r0, r1}
   11938:	mov	r0, r6
   1193c:	ldr	r1, [sp, #28]
   11940:	bl	129c8 <__assert_fail@plt+0x15a4>
   11944:	rsbs	ip, r0, #1
   11948:	movcc	ip, #0
   1194c:	uxtb	r0, ip
   11950:	mov	r1, #0
   11954:	adds	sl, sl, r0
   11958:	mvn	r3, #0
   1195c:	adc	fp, fp, r1
   11960:	ldr	r1, [sp, #44]	; 0x2c
   11964:	mvn	r2, #0
   11968:	cmp	fp, r3
   1196c:	cmpeq	sl, r2
   11970:	ldr	r3, [r1, #32]
   11974:	mvneq	sl, #1
   11978:	mvneq	fp, #0
   1197c:	cmp	r3, #0
   11980:	beq	11b9c <__assert_fail@plt+0x778>
   11984:	cmp	ip, #0
   11988:	bne	11d08 <__assert_fail@plt+0x8e4>
   1198c:	ldr	r3, [sp, #52]	; 0x34
   11990:	orrs	r2, sl, fp
   11994:	movne	r3, #0
   11998:	str	r3, [sp, #52]	; 0x34
   1199c:	orrs	r1, sl, fp
   119a0:	add	r0, r8, #4
   119a4:	add	r1, r8, #8
   119a8:	beq	11bc4 <__assert_fail@plt+0x7a0>
   119ac:	b	11cd8 <__assert_fail@plt+0x8b4>
   119b0:	ldr	r1, [pc, #2300]	; 122b4 <__assert_fail@plt+0xe90>
   119b4:	mov	r0, #0
   119b8:	mov	r2, #5
   119bc:	add	r1, pc, r1
   119c0:	bl	111e4 <dcgettext@plt>
   119c4:	ldr	r3, [r6]
   119c8:	mov	r4, r0
   119cc:	ldr	r0, [r8, r3, lsl #2]
   119d0:	bl	15148 <close_stdout@@Base+0x1df0>
   119d4:	mov	r2, r4
   119d8:	mov	r3, r0
   119dc:	mov	r0, #0
   119e0:	mov	r1, r0
   119e4:	bl	11274 <error@plt>
   119e8:	b	1168c <__assert_fail@plt+0x268>
   119ec:	mov	r0, r6
   119f0:	bl	12cac <__assert_fail@plt+0x1888>
   119f4:	ldr	r3, [pc, #2156]	; 12268 <__assert_fail@plt+0xe44>
   119f8:	ldr	r3, [r7, r3]
   119fc:	ldr	r1, [r3]
   11a00:	cmp	r1, #0
   11a04:	beq	12010 <__assert_fail@plt+0xbec>
   11a08:	ldr	r3, [pc, #2216]	; 122b8 <__assert_fail@plt+0xe94>
   11a0c:	mov	r2, #4
   11a10:	str	r2, [sp]
   11a14:	ldr	r0, [pc, #2208]	; 122bc <__assert_fail@plt+0xe98>
   11a18:	ldr	ip, [r7, r3]
   11a1c:	ldr	r2, [sp, #44]	; 0x2c
   11a20:	add	r0, pc, r0
   11a24:	ldr	r3, [sp, #48]	; 0x30
   11a28:	ldr	ip, [ip]
   11a2c:	str	ip, [sp, #4]
   11a30:	bl	13274 <__assert_fail@plt+0x1e50>
   11a34:	ldr	lr, [sp, #28]
   11a38:	ldr	r3, [pc, #2176]	; 122c0 <__assert_fail@plt+0xe9c>
   11a3c:	add	r3, pc, r3
   11a40:	add	r0, lr, r0, lsl #2
   11a44:	ldr	r2, [r0, #28]
   11a48:	str	r2, [r3, #36]	; 0x24
   11a4c:	b	11578 <__assert_fail@plt+0x154>
   11a50:	ldr	r3, [pc, #2064]	; 12268 <__assert_fail@plt+0xe44>
   11a54:	ldr	r1, [pc, #2152]	; 122c4 <__assert_fail@plt+0xea0>
   11a58:	ldr	r3, [r7, r3]
   11a5c:	add	r1, pc, r1
   11a60:	ldr	r0, [r3]
   11a64:	bl	128ac <__assert_fail@plt+0x1488>
   11a68:	ldr	r3, [pc, #2136]	; 122c8 <__assert_fail@plt+0xea4>
   11a6c:	add	r3, pc, r3
   11a70:	str	r0, [r3, #4]
   11a74:	b	11578 <__assert_fail@plt+0x154>
   11a78:	ldr	r3, [pc, #2124]	; 122cc <__assert_fail@plt+0xea8>
   11a7c:	mov	r2, #1
   11a80:	add	r3, pc, r3
   11a84:	strb	r2, [r3, #12]
   11a88:	b	11578 <__assert_fail@plt+0x154>
   11a8c:	str	r6, [sp, #40]	; 0x28
   11a90:	b	11578 <__assert_fail@plt+0x154>
   11a94:	ldr	ip, [pc, #2100]	; 122d0 <__assert_fail@plt+0xeac>
   11a98:	mov	r3, #1
   11a9c:	ldr	r2, [pc, #1988]	; 12268 <__assert_fail@plt+0xe44>
   11aa0:	add	ip, pc, ip
   11aa4:	strb	r6, [ip, #29]
   11aa8:	strb	r3, [ip, #30]
   11aac:	ldr	r2, [r7, r2]
   11ab0:	ldr	r1, [r2]
   11ab4:	cmp	r1, #0
   11ab8:	streq	r3, [sp, #24]
   11abc:	streq	r1, [ip, #32]
   11ac0:	beq	11578 <__assert_fail@plt+0x154>
   11ac4:	ldr	lr, [pc, #2028]	; 122b8 <__assert_fail@plt+0xe94>
   11ac8:	mov	r2, #4
   11acc:	str	r2, [sp]
   11ad0:	add	r2, fp, #208	; 0xd0
   11ad4:	ldr	r0, [pc, #2040]	; 122d4 <__assert_fail@plt+0xeb0>
   11ad8:	ldr	lr, [r7, lr]
   11adc:	add	r0, pc, r0
   11ae0:	str	r3, [sp, #24]
   11ae4:	ldr	r3, [sp, #52]	; 0x34
   11ae8:	ldr	lr, [lr]
   11aec:	str	ip, [sp, #16]
   11af0:	str	lr, [sp, #4]
   11af4:	bl	13274 <__assert_fail@plt+0x1e50>
   11af8:	ldr	r3, [sp, #32]
   11afc:	ldr	ip, [sp, #16]
   11b00:	add	r0, r3, r0, lsl #2
   11b04:	ldr	r3, [r0, #16]
   11b08:	str	r3, [ip, #32]
   11b0c:	b	11578 <__assert_fail@plt+0x154>
   11b10:	ldr	lr, [sp, #24]
   11b14:	cmp	lr, #0
   11b18:	bne	1203c <__assert_fail@plt+0xc18>
   11b1c:	ldr	r3, [r3, #16]
   11b20:	cmp	r3, #1
   11b24:	beq	11738 <__assert_fail@plt+0x314>
   11b28:	ldr	r1, [pc, #1960]	; 122d8 <__assert_fail@plt+0xeb4>
   11b2c:	mov	r2, #5
   11b30:	ldr	r0, [sp, #24]
   11b34:	add	r1, pc, r1
   11b38:	bl	111e4 <dcgettext@plt>
   11b3c:	mov	r2, r0
   11b40:	ldr	r0, [sp, #24]
   11b44:	mov	r1, r0
   11b48:	bl	11274 <error@plt>
   11b4c:	mov	r0, #1
   11b50:	bl	12cac <__assert_fail@plt+0x1888>
   11b54:	ldr	r2, [pc, #1844]	; 12290 <__assert_fail@plt+0xe6c>
   11b58:	ldr	r3, [pc, #1916]	; 122dc <__assert_fail@plt+0xeb8>
   11b5c:	ldr	r1, [pc, #1916]	; 122e0 <__assert_fail@plt+0xebc>
   11b60:	ldr	r0, [r7, r2]
   11b64:	ldr	r3, [r7, r3]
   11b68:	add	r1, pc, r1
   11b6c:	ldr	r2, [pc, #1904]	; 122e4 <__assert_fail@plt+0xec0>
   11b70:	ldr	r0, [r0]
   11b74:	add	r2, pc, r2
   11b78:	ldr	r3, [r3]
   11b7c:	stm	sp, {r1, r2, r6}
   11b80:	ldr	r1, [pc, #1888]	; 122e8 <__assert_fail@plt+0xec4>
   11b84:	ldr	r2, [pc, #1888]	; 122ec <__assert_fail@plt+0xec8>
   11b88:	add	r1, pc, r1
   11b8c:	add	r2, pc, r2
   11b90:	bl	155e4 <close_stdout@@Base+0x228c>
   11b94:	mov	r0, r6
   11b98:	bl	11304 <exit@plt>
   11b9c:	cmp	ip, #0
   11ba0:	beq	1199c <__assert_fail@plt+0x578>
   11ba4:	ldr	lr, [sp, #48]	; 0x30
   11ba8:	ldrb	r3, [lr, #30]
   11bac:	cmp	r3, #0
   11bb0:	beq	11c28 <__assert_fail@plt+0x804>
   11bb4:	orrs	r1, sl, fp
   11bb8:	add	r0, r8, #4
   11bbc:	add	r1, r8, #8
   11bc0:	bne	11cd0 <__assert_fail@plt+0x8ac>
   11bc4:	ldr	r2, [sp, #56]	; 0x38
   11bc8:	ldrb	r3, [r2, #29]
   11bcc:	eor	r3, r3, #1
   11bd0:	cmp	r3, #0
   11bd4:	bne	11bec <__assert_fail@plt+0x7c8>
   11bd8:	mov	r2, sl
   11bdc:	mov	r3, fp
   11be0:	str	ip, [sp, #16]
   11be4:	bl	12954 <__assert_fail@plt+0x1530>
   11be8:	ldr	ip, [sp, #16]
   11bec:	cmp	ip, #0
   11bf0:	ldm	r5, {r0, r1}
   11bf4:	ldr	r2, [sp, #20]
   11bf8:	mov	r3, r4
   11bfc:	moveq	sl, #0
   11c00:	movne	r4, r8
   11c04:	moveq	r4, r8
   11c08:	movne	r8, r3
   11c0c:	moveq	fp, #0
   11c10:	moveq	r8, r3
   11c14:	stm	r2, {r0, r1}
   11c18:	strne	r7, [sp, #32]
   11c1c:	strne	r6, [sp, #28]
   11c20:	streq	r7, [sp, #32]
   11c24:	streq	r6, [sp, #28]
   11c28:	ldr	lr, [sp, #36]	; 0x24
   11c2c:	ldr	r3, [lr]
   11c30:	ldr	r2, [r3]
   11c34:	tst	r2, #16
   11c38:	beq	118c4 <__assert_fail@plt+0x4a0>
   11c3c:	orrs	r1, sl, fp
   11c40:	add	r0, r8, #4
   11c44:	add	r1, r8, #8
   11c48:	beq	11e58 <__assert_fail@plt+0xa34>
   11c4c:	ldr	r3, [pc, #1692]	; 122f0 <__assert_fail@plt+0xecc>
   11c50:	add	r3, pc, r3
   11c54:	ldrb	r3, [r3, #28]
   11c58:	eor	r3, r3, #1
   11c5c:	cmp	r3, #0
   11c60:	bne	11c70 <__assert_fail@plt+0x84c>
   11c64:	mov	r2, sl
   11c68:	mov	r3, fp
   11c6c:	bl	12954 <__assert_fail@plt+0x1530>
   11c70:	ldr	r2, [sp, #36]	; 0x24
   11c74:	ldr	r0, [r2]
   11c78:	ldr	r3, [r0]
   11c7c:	tst	r3, #32
   11c80:	bne	11c90 <__assert_fail@plt+0x86c>
   11c84:	bl	16024 <close_stdout@@Base+0x2ccc>
   11c88:	cmp	r0, #0
   11c8c:	beq	11cb8 <__assert_fail@plt+0x894>
   11c90:	ldr	r1, [pc, #1628]	; 122f4 <__assert_fail@plt+0xed0>
   11c94:	mov	r2, #5
   11c98:	mov	r0, #0
   11c9c:	add	r1, pc, r1
   11ca0:	bl	111e4 <dcgettext@plt>
   11ca4:	ldr	r3, [sp, #60]	; 0x3c
   11ca8:	mov	r1, #0
   11cac:	mov	r2, r0
   11cb0:	mov	r0, #1
   11cb4:	bl	11274 <error@plt>
   11cb8:	ldr	r0, [sp, #108]	; 0x6c
   11cbc:	bl	11190 <free@plt>
   11cc0:	ldr	r0, [sp, #128]	; 0x80
   11cc4:	bl	11190 <free@plt>
   11cc8:	mov	r0, #0
   11ccc:	bl	11304 <exit@plt>
   11cd0:	cmp	ip, #0
   11cd4:	bne	11bd8 <__assert_fail@plt+0x7b4>
   11cd8:	ldr	lr, [sp, #64]	; 0x40
   11cdc:	ldrb	r3, [lr, #28]
   11ce0:	eor	r3, r3, #1
   11ce4:	b	11bd0 <__assert_fail@plt+0x7ac>
   11ce8:	mov	r0, r6
   11cec:	ldr	r1, [sp, #28]
   11cf0:	mov	r2, r7
   11cf4:	ldr	r3, [sp, #32]
   11cf8:	bl	127c8 <__assert_fail@plt+0x13a4>
   11cfc:	eor	r0, r0, #1
   11d00:	uxtb	ip, r0
   11d04:	b	1194c <__assert_fail@plt+0x528>
   11d08:	cmp	fp, #0
   11d0c:	cmpeq	sl, #1
   11d10:	bne	11ba4 <__assert_fail@plt+0x780>
   11d14:	cmp	r3, #1
   11d18:	beq	11d30 <__assert_fail@plt+0x90c>
   11d1c:	cmp	r3, #2
   11d20:	bne	11ba4 <__assert_fail@plt+0x780>
   11d24:	ldr	lr, [sp, #52]	; 0x34
   11d28:	cmp	lr, #0
   11d2c:	bne	11ba4 <__assert_fail@plt+0x780>
   11d30:	ldr	r3, [pc, #1368]	; 12290 <__assert_fail@plt+0xe6c>
   11d34:	ldr	r1, [sp, #68]	; 0x44
   11d38:	ldr	r3, [r1, r3]
   11d3c:	ldr	r0, [r3]
   11d40:	ldr	r2, [r0, #24]
   11d44:	ldr	r3, [r0, #20]
   11d48:	cmp	r3, r2
   11d4c:	addcc	r2, r3, #1
   11d50:	strcc	r2, [r0, #20]
   11d54:	ldrcc	r2, [sp, #40]	; 0x28
   11d58:	strbcc	r2, [r3]
   11d5c:	bcc	11ba4 <__assert_fail@plt+0x780>
   11d60:	ldr	r1, [sp, #40]	; 0x28
   11d64:	str	ip, [sp, #16]
   11d68:	bl	113b8 <__overflow@plt>
   11d6c:	ldr	ip, [sp, #16]
   11d70:	b	11ba4 <__assert_fail@plt+0x780>
   11d74:	ldr	r3, [pc, #1260]	; 12268 <__assert_fail@plt+0xe44>
   11d78:	ldr	r6, [r7, r3]
   11d7c:	ldr	r3, [r6]
   11d80:	ldrb	r3, [r3]
   11d84:	cmp	r3, #43	; 0x2b
   11d88:	beq	120c0 <__assert_fail@plt+0xc9c>
   11d8c:	cmp	r4, #2
   11d90:	beq	12204 <__assert_fail@plt+0xde0>
   11d94:	ldr	r2, [r6]
   11d98:	add	r1, sp, #144	; 0x90
   11d9c:	add	r3, r1, r4, lsl #2
   11da0:	add	r4, r4, #1
   11da4:	str	r2, [r3, #-68]	; 0xffffffbc
   11da8:	b	11578 <__assert_fail@plt+0x154>
   11dac:	ldr	r3, [pc, #1348]	; 122f8 <__assert_fail@plt+0xed4>
   11db0:	mov	r2, #1
   11db4:	str	r2, [sp, #24]
   11db8:	add	r3, pc, r3
   11dbc:	strb	r6, [r3, #28]
   11dc0:	b	11578 <__assert_fail@plt+0x154>
   11dc4:	ldr	r2, [sp, #36]	; 0x24
   11dc8:	cmp	r2, #2
   11dcc:	subeq	r3, r0, #48	; 0x30
   11dd0:	beq	1207c <__assert_fail@plt+0xc58>
   11dd4:	ldr	r2, [pc, #1312]	; 122fc <__assert_fail@plt+0xed8>
   11dd8:	movw	r3, #39321	; 0x9999
   11ddc:	movt	r3, #6553	; 0x1999
   11de0:	add	r2, pc, r2
   11de4:	ldr	r2, [r2]
   11de8:	cmp	r2, r3
   11dec:	bls	12068 <__assert_fail@plt+0xc44>
   11df0:	ldr	r3, [pc, #1288]	; 12300 <__assert_fail@plt+0xedc>
   11df4:	mvn	r2, #0
   11df8:	mov	lr, #1
   11dfc:	str	lr, [sp, #36]	; 0x24
   11e00:	add	r3, pc, r3
   11e04:	str	r2, [r3]
   11e08:	b	115c4 <__assert_fail@plt+0x1a0>
   11e0c:	ldr	r3, [pc, #1264]	; 12304 <__assert_fail@plt+0xee0>
   11e10:	mov	r2, #1
   11e14:	str	r2, [sp, #24]
   11e18:	add	r3, pc, r3
   11e1c:	strb	r6, [r3, #29]
   11e20:	b	11578 <__assert_fail@plt+0x154>
   11e24:	ldrb	r3, [r4, #1]
   11e28:	cmp	r3, #0
   11e2c:	beq	117a8 <__assert_fail@plt+0x384>
   11e30:	b	11784 <__assert_fail@plt+0x360>
   11e34:	ldrb	r3, [r1, #1]
   11e38:	cmp	r3, #0
   11e3c:	bne	11750 <__assert_fail@plt+0x32c>
   11e40:	ldr	r3, [pc, #1088]	; 12288 <__assert_fail@plt+0xe64>
   11e44:	ldr	r3, [r7, r3]
   11e48:	str	r3, [sp, #36]	; 0x24
   11e4c:	b	11778 <__assert_fail@plt+0x354>
   11e50:	add	r1, r8, #8
   11e54:	add	r0, r8, #4
   11e58:	ldr	r3, [pc, #1192]	; 12308 <__assert_fail@plt+0xee4>
   11e5c:	mov	sl, #0
   11e60:	mov	fp, #0
   11e64:	add	r3, pc, r3
   11e68:	ldrb	r3, [r3, #29]
   11e6c:	eor	r3, r3, #1
   11e70:	b	11c5c <__assert_fail@plt+0x838>
   11e74:	ldr	r3, [pc, #1168]	; 1230c <__assert_fail@plt+0xee8>
   11e78:	mov	sl, #0
   11e7c:	ldr	r9, [pc, #1164]	; 12310 <__assert_fail@plt+0xeec>
   11e80:	ldr	fp, [pc, #1164]	; 12314 <__assert_fail@plt+0xef0>
   11e84:	add	r3, pc, r3
   11e88:	str	r3, [sp, #28]
   11e8c:	mov	r3, sl
   11e90:	str	sl, [sp, #84]	; 0x54
   11e94:	add	r9, pc, r9
   11e98:	str	sl, [sp, #88]	; 0x58
   11e9c:	add	fp, pc, fp
   11ea0:	mov	sl, r4
   11ea4:	mov	r4, r3
   11ea8:	b	11f28 <__assert_fail@plt+0xb04>
   11eac:	ldr	lr, [sp, #28]
   11eb0:	ldr	r3, [lr, #36]	; 0x24
   11eb4:	cmp	r3, #0
   11eb8:	beq	11edc <__assert_fail@plt+0xab8>
   11ebc:	cmp	r3, #1
   11ec0:	cmpne	r3, #4
   11ec4:	beq	1215c <__assert_fail@plt+0xd38>
   11ec8:	cmp	r4, #0
   11ecc:	beq	11edc <__assert_fail@plt+0xab8>
   11ed0:	sub	r3, r3, #2
   11ed4:	cmp	r3, #1
   11ed8:	bls	1215c <__assert_fail@plt+0xd38>
   11edc:	ldr	r3, [pc, #940]	; 12290 <__assert_fail@plt+0xe6c>
   11ee0:	ldr	r4, [r7, r3]
   11ee4:	ldr	r3, [r4]
   11ee8:	mov	r1, #1
   11eec:	ldr	r2, [sl, #4]
   11ef0:	mov	r4, #1
   11ef4:	ldr	r0, [sl, #8]
   11ef8:	bl	111cc <fwrite_unlocked@plt>
   11efc:	bl	11244 <__ctype_get_mb_cur_max@plt>
   11f00:	cmp	r0, #1
   11f04:	addhi	r3, sp, #92	; 0x5c
   11f08:	ldmhi	r3, {r0, r1}
   11f0c:	addhi	r3, sp, #84	; 0x54
   11f10:	stmhi	r3, {r0, r1}
   11f14:	mov	r3, sl
   11f18:	mov	sl, r8
   11f1c:	mov	r8, r3
   11f20:	str	r6, [sp, #64]	; 0x40
   11f24:	str	r5, [sp, #56]	; 0x38
   11f28:	ldr	r2, [sp, #36]	; 0x24
   11f2c:	ldr	r1, [r2]
   11f30:	ldr	r3, [r1]
   11f34:	tst	r3, #16
   11f38:	bne	12194 <__assert_fail@plt+0xd70>
   11f3c:	mov	r0, sl
   11f40:	ldr	r2, [sp, #40]	; 0x28
   11f44:	bl	13768 <close_stdout@@Base+0x410>
   11f48:	cmp	r0, #0
   11f4c:	beq	12194 <__assert_fail@plt+0xd70>
   11f50:	ldr	r3, [r9, #24]
   11f54:	mov	r0, sl
   11f58:	blx	r3
   11f5c:	ldr	r3, [sl, #8]
   11f60:	ldr	r6, [sl, #4]
   11f64:	sub	r6, r6, #1
   11f68:	rsb	r3, r0, r3
   11f6c:	mov	r5, r0
   11f70:	add	r6, r6, r3
   11f74:	bl	11244 <__ctype_get_mb_cur_max@plt>
   11f78:	cmp	r0, #1
   11f7c:	bls	12110 <__assert_fail@plt+0xcec>
   11f80:	add	r2, sl, #12
   11f84:	ldr	lr, [r8, #4]
   11f88:	add	r3, sp, #92	; 0x5c
   11f8c:	ldm	r2, {r0, r1}
   11f90:	cmp	lr, #0
   11f94:	stm	r3, {r0, r1}
   11f98:	moveq	r0, #1
   11f9c:	bne	12128 <__assert_fail@plt+0xd04>
   11fa0:	mov	r3, r0
   11fa4:	cmp	r3, #0
   11fa8:	bne	11eac <__assert_fail@plt+0xa88>
   11fac:	ldr	r3, [fp, #36]	; 0x24
   11fb0:	cmp	r3, #0
   11fb4:	bne	11edc <__assert_fail@plt+0xab8>
   11fb8:	mov	r3, r8
   11fbc:	ldr	r6, [sp, #64]	; 0x40
   11fc0:	mov	r8, sl
   11fc4:	ldr	r5, [sp, #56]	; 0x38
   11fc8:	mov	sl, r3
   11fcc:	b	11f14 <__assert_fail@plt+0xaf0>
   11fd0:	bl	11340 <__errno_location@plt>
   11fd4:	ldr	r2, [pc, #828]	; 12318 <__assert_fail@plt+0xef4>
   11fd8:	mov	r3, r4
   11fdc:	add	r2, pc, r2
   11fe0:	ldr	r1, [r0]
   11fe4:	mov	r0, #1
   11fe8:	bl	11274 <error@plt>
   11fec:	b	117a8 <__assert_fail@plt+0x384>
   11ff0:	bl	11340 <__errno_location@plt>
   11ff4:	ldr	r2, [pc, #800]	; 1231c <__assert_fail@plt+0xef8>
   11ff8:	ldr	r3, [sp, #60]	; 0x3c
   11ffc:	add	r2, pc, r2
   12000:	ldr	r1, [r0]
   12004:	mov	r0, #1
   12008:	bl	11274 <error@plt>
   1200c:	b	11778 <__assert_fail@plt+0x354>
   12010:	ldr	r3, [pc, #776]	; 12320 <__assert_fail@plt+0xefc>
   12014:	mov	r2, #3
   12018:	add	r3, pc, r3
   1201c:	str	r2, [r3, #36]	; 0x24
   12020:	b	11578 <__assert_fail@plt+0x154>
   12024:	ldr	r2, [sp, #36]	; 0x24
   12028:	ldr	r3, [r2]
   1202c:	ldr	r3, [r3]
   12030:	tst	r3, #32
   12034:	bne	11c70 <__assert_fail@plt+0x84c>
   12038:	b	11c3c <__assert_fail@plt+0x818>
   1203c:	ldr	r1, [pc, #736]	; 12324 <__assert_fail@plt+0xf00>
   12040:	mov	r2, #5
   12044:	mov	r0, #0
   12048:	add	r1, pc, r1
   1204c:	bl	111e4 <dcgettext@plt>
   12050:	mov	r2, r0
   12054:	mov	r0, #0
   12058:	mov	r1, r0
   1205c:	bl	11274 <error@plt>
   12060:	mov	r0, #1
   12064:	bl	12cac <__assert_fail@plt+0x1888>
   12068:	sub	r3, r0, #48	; 0x30
   1206c:	mov	r1, #10
   12070:	mla	r3, r1, r2, r3
   12074:	cmp	r2, r3
   12078:	bhi	11df0 <__assert_fail@plt+0x9cc>
   1207c:	ldr	r2, [pc, #676]	; 12328 <__assert_fail@plt+0xf04>
   12080:	mov	lr, #1
   12084:	str	lr, [sp, #36]	; 0x24
   12088:	add	r2, pc, r2
   1208c:	str	r3, [r2]
   12090:	b	115c4 <__assert_fail@plt+0x1a0>
   12094:	ldr	r1, [pc, #656]	; 1232c <__assert_fail@plt+0xf08>
   12098:	mov	r2, #5
   1209c:	mov	r0, r4
   120a0:	add	r1, pc, r1
   120a4:	bl	111e4 <dcgettext@plt>
   120a8:	mov	r1, r4
   120ac:	mov	r2, r0
   120b0:	mov	r0, r4
   120b4:	bl	11274 <error@plt>
   120b8:	mov	r0, #1
   120bc:	bl	12cac <__assert_fail@plt+0x1888>
   120c0:	bl	13860 <close_stdout@@Base+0x508>
   120c4:	movw	r3, #3503	; 0xdaf
   120c8:	movt	r3, #3
   120cc:	cmp	r0, r3
   120d0:	bgt	11d8c <__assert_fail@plt+0x968>
   120d4:	ldr	ip, [pc, #596]	; 12330 <__assert_fail@plt+0xf0c>
   120d8:	mov	r1, #0
   120dc:	ldr	r0, [r6]
   120e0:	mov	r2, #10
   120e4:	add	ip, pc, ip
   120e8:	add	r3, sp, #72	; 0x48
   120ec:	str	ip, [sp]
   120f0:	bl	15aec <close_stdout@@Base+0x2794>
   120f4:	cmp	r0, #0
   120f8:	bne	11d8c <__assert_fail@plt+0x968>
   120fc:	ldr	r3, [pc, #560]	; 12334 <__assert_fail@plt+0xf10>
   12100:	ldr	r2, [sp, #72]	; 0x48
   12104:	add	r3, pc, r3
   12108:	str	r2, [r3, #4]
   1210c:	b	11578 <__assert_fail@plt+0x154>
   12110:	ldr	r3, [r8, #4]
   12114:	cmp	r3, #0
   12118:	moveq	r0, #1
   1211c:	bne	121ec <__assert_fail@plt+0xdc8>
   12120:	and	r3, r0, #1
   12124:	b	11fa4 <__assert_fail@plt+0xb80>
   12128:	stm	sp, {r0, r1}
   1212c:	add	r1, sp, #84	; 0x54
   12130:	add	lr, sp, #8
   12134:	ldr	r3, [sp, #64]	; 0x40
   12138:	ldm	r1, {r0, r1}
   1213c:	mov	r2, r6
   12140:	stm	lr, {r0, r1}
   12144:	mov	r0, r5
   12148:	ldr	r1, [sp, #56]	; 0x38
   1214c:	bl	129c8 <__assert_fail@plt+0x15a4>
   12150:	adds	r0, r0, #0
   12154:	movne	r0, #1
   12158:	b	11fa0 <__assert_fail@plt+0xb7c>
   1215c:	ldr	r3, [pc, #300]	; 12290 <__assert_fail@plt+0xe6c>
   12160:	ldr	r4, [r7, r3]
   12164:	ldr	r0, [r4]
   12168:	ldr	r3, [r0, #20]
   1216c:	ldr	r2, [r0, #24]
   12170:	cmp	r3, r2
   12174:	addcc	r2, r3, #1
   12178:	strcc	r2, [r0, #20]
   1217c:	ldrcc	r1, [sp, #40]	; 0x28
   12180:	strbcc	r1, [r3]
   12184:	bcc	11ee4 <__assert_fail@plt+0xac0>
   12188:	ldr	r1, [sp, #40]	; 0x28
   1218c:	bl	113b8 <__overflow@plt>
   12190:	b	11ee4 <__assert_fail@plt+0xac0>
   12194:	ldr	r3, [pc, #412]	; 12338 <__assert_fail@plt+0xf14>
   12198:	add	r3, pc, r3
   1219c:	ldr	r3, [r3, #36]	; 0x24
   121a0:	cmp	r3, #4
   121a4:	cmpne	r3, #2
   121a8:	bne	11c70 <__assert_fail@plt+0x84c>
   121ac:	cmp	r4, #0
   121b0:	beq	11c70 <__assert_fail@plt+0x84c>
   121b4:	ldr	r3, [pc, #212]	; 12290 <__assert_fail@plt+0xe6c>
   121b8:	ldr	r3, [r7, r3]
   121bc:	ldr	r0, [r3]
   121c0:	ldr	r3, [r0, #20]
   121c4:	ldr	r2, [r0, #24]
   121c8:	cmp	r3, r2
   121cc:	addcc	r2, r3, #1
   121d0:	strcc	r2, [r0, #20]
   121d4:	ldrcc	lr, [sp, #40]	; 0x28
   121d8:	strbcc	lr, [r3]
   121dc:	bcc	11c70 <__assert_fail@plt+0x84c>
   121e0:	ldr	r1, [sp, #40]	; 0x28
   121e4:	bl	113b8 <__overflow@plt>
   121e8:	b	11c70 <__assert_fail@plt+0x84c>
   121ec:	mov	r0, r5
   121f0:	ldr	r1, [sp, #56]	; 0x38
   121f4:	mov	r2, r6
   121f8:	ldr	r3, [sp, #64]	; 0x40
   121fc:	bl	127c8 <__assert_fail@plt+0x13a4>
   12200:	b	12120 <__assert_fail@plt+0xcfc>
   12204:	ldr	r1, [pc, #304]	; 1233c <__assert_fail@plt+0xf18>
   12208:	mov	r0, #0
   1220c:	mov	r2, #5
   12210:	add	r1, pc, r1
   12214:	bl	111e4 <dcgettext@plt>
   12218:	mov	r4, r0
   1221c:	ldr	r0, [r6]
   12220:	b	119d0 <__assert_fail@plt+0x5ac>
   12224:			; <UNDEFINED> instruction: 0x00016bb0
   12228:	andeq	r0, r0, r4, lsl r1
   1222c:			; <UNDEFINED> instruction: 0x00005db8
   12230:	strdeq	r5, [r0], -r0
   12234:	andeq	r6, r1, r8, lsr sp
   12238:	andeq	r5, r0, r8, lsr #27
   1223c:	andeq	r5, r0, r0, ror sp
   12240:	andeq	r5, r0, r8, ror sp
   12244:	andeq	r0, r0, r8, lsr #2
   12248:	andeq	r1, r0, ip, ror r0
   1224c:	andeq	r6, r1, r4, lsr #25
   12250:	andeq	r5, r0, r0, lsl #11
   12254:	andeq	r6, r1, r8, asr #17
   12258:	andeq	r5, r0, ip, ror #10
   1225c:	andeq	r0, r0, r8, lsl r1
   12260:	andeq	r6, r1, r4, lsl #16
   12264:	andeq	r5, r0, ip, asr #24
   12268:	andeq	r0, r0, r0, asr r1
   1226c:	andeq	r5, r0, r4, lsr ip
   12270:	andeq	r6, r1, r8, asr #22
   12274:	andeq	r5, r0, r8, lsl #24
   12278:	ldrdeq	r6, [r1], -r8
   1227c:			; <UNDEFINED> instruction: 0x00016ab0
   12280:	andeq	r0, r0, ip, ror #26
   12284:	muleq	r1, r0, sl
   12288:	andeq	r0, r0, r4, lsr r1
   1228c:	andeq	r5, r0, r4, asr ip
   12290:	andeq	r0, r0, r8, lsr r1
   12294:	andeq	r5, r0, r4, lsr #24
   12298:	andeq	r6, r1, ip, asr #19
   1229c:	andeq	r6, r1, r8, ror r9
   122a0:	andeq	r6, r1, r8, lsl r9
   122a4:	andeq	r6, r1, r4, lsl r9
   122a8:	andeq	r6, r1, r0, lsl #18
   122ac:	strdeq	r6, [r1], -ip
   122b0:	strdeq	r6, [r1], -r4
   122b4:	muleq	r0, r4, r8
   122b8:	andeq	r0, r0, r4, lsr #2
   122bc:	andeq	r5, r0, r4, asr r8
   122c0:	andeq	r6, r1, r4, ror #14
   122c4:	andeq	r5, r0, r4, asr #16
   122c8:	andeq	r6, r1, r4, lsr r7
   122cc:	andeq	r6, r1, r0, lsr #14
   122d0:	andeq	r6, r1, r0, lsl #14
   122d4:	andeq	r5, r0, r8, lsl #15
   122d8:	andeq	r5, r0, ip, lsl #16
   122dc:	andeq	r0, r0, ip, lsl r1
   122e0:	andeq	r5, r0, r4, lsl #15
   122e4:	andeq	r5, r0, ip, lsl #15
   122e8:	andeq	r5, r0, ip, asr r7
   122ec:			; <UNDEFINED> instruction: 0x000055bc
   122f0:	andeq	r6, r1, r0, asr r5
   122f4:	andeq	r5, r0, r0, lsr #14
   122f8:	andeq	r6, r1, r8, ror #7
   122fc:	andeq	r6, r1, r0, asr #7
   12300:	andeq	r6, r1, r0, lsr #7
   12304:	andeq	r6, r1, r8, lsl #7
   12308:	andeq	r6, r1, ip, lsr r3
   1230c:	andeq	r6, r1, ip, lsl r3
   12310:	andeq	r6, r1, ip, lsl #6
   12314:	andeq	r6, r1, r4, lsl #6
   12318:	ldrdeq	r4, [r0], -r8
   1231c:			; <UNDEFINED> instruction: 0x00004ab8
   12320:	andeq	r6, r1, r8, lsl #3
   12324:	andeq	r5, r0, r8, asr #5
   12328:	andeq	r6, r1, r8, lsl r1
   1232c:	ldrdeq	r5, [r0], -r4
   12330:	andeq	r5, r0, r8, lsr #2
   12334:	muleq	r1, ip, r0
   12338:	andeq	r6, r1, r8
   1233c:	andeq	r5, r0, r0, asr #32
   12340:	mov	fp, #0
   12344:	mov	lr, #0
   12348:	pop	{r1}		; (ldr r1, [sp], #4)
   1234c:	mov	r2, sp
   12350:	push	{r2}		; (str r2, [sp, #-4]!)
   12354:	push	{r0}		; (str r0, [sp, #-4]!)
   12358:	ldr	ip, [pc, #16]	; 12370 <__assert_fail@plt+0xf4c>
   1235c:	push	{ip}		; (str ip, [sp, #-4]!)
   12360:	ldr	r0, [pc, #12]	; 12374 <__assert_fail@plt+0xf50>
   12364:	ldr	r3, [pc, #12]	; 12378 <__assert_fail@plt+0xf54>
   12368:	bl	112b0 <__libc_start_main@plt>
   1236c:	bl	1140c <abort@plt>
   12370:	andeq	r6, r1, ip, asr #20
   12374:	andeq	r1, r1, r0, lsr r4
   12378:	andeq	r6, r1, r8, ror #19
   1237c:	ldr	r3, [pc, #20]	; 12398 <__assert_fail@plt+0xf74>
   12380:	ldr	r2, [pc, #20]	; 1239c <__assert_fail@plt+0xf78>
   12384:	add	r3, pc, r3
   12388:	ldr	r2, [r3, r2]
   1238c:	cmp	r2, #0
   12390:	bxeq	lr
   12394:	b	112d4 <__gmon_start__@plt>
   12398:	andeq	r5, r1, r4, ror ip
   1239c:	andeq	r0, r0, ip, lsr #2
   123a0:	push	{r3, lr}
   123a4:	movw	r0, #33188	; 0x81a4
   123a8:	ldr	r3, [pc, #36]	; 123d4 <__assert_fail@plt+0xfb0>
   123ac:	movt	r0, #2
   123b0:	rsb	r3, r0, r3
   123b4:	cmp	r3, #6
   123b8:	popls	{r3, pc}
   123bc:	movw	r3, #0
   123c0:	movt	r3, #0
   123c4:	cmp	r3, #0
   123c8:	popeq	{r3, pc}
   123cc:	blx	r3
   123d0:	pop	{r3, pc}
   123d4:	andeq	r8, r2, r7, lsr #3
   123d8:	push	{r3, lr}
   123dc:	movw	r0, #33188	; 0x81a4
   123e0:	movw	r3, #33188	; 0x81a4
   123e4:	movt	r0, #2
   123e8:	movt	r3, #2
   123ec:	rsb	r3, r0, r3
   123f0:	asr	r3, r3, #2
   123f4:	add	r3, r3, r3, lsr #31
   123f8:	asrs	r1, r3, #1
   123fc:	popeq	{r3, pc}
   12400:	movw	r2, #0
   12404:	movt	r2, #0
   12408:	cmp	r2, #0
   1240c:	popeq	{r3, pc}
   12410:	blx	r2
   12414:	pop	{r3, pc}
   12418:	push	{r4, lr}
   1241c:	movw	r4, #33188	; 0x81a4
   12420:	movt	r4, #2
   12424:	ldrb	r3, [r4]
   12428:	cmp	r3, #0
   1242c:	popne	{r4, pc}
   12430:	bl	123a0 <__assert_fail@plt+0xf7c>
   12434:	mov	r3, #1
   12438:	strb	r3, [r4]
   1243c:	pop	{r4, pc}
   12440:	movw	r0, #32236	; 0x7dec
   12444:	movt	r0, #2
   12448:	push	{r3, lr}
   1244c:	ldr	r3, [r0]
   12450:	cmp	r3, #0
   12454:	beq	1246c <__assert_fail@plt+0x1048>
   12458:	movw	r3, #0
   1245c:	movt	r3, #0
   12460:	cmp	r3, #0
   12464:	beq	1246c <__assert_fail@plt+0x1048>
   12468:	blx	r3
   1246c:	pop	{r3, lr}
   12470:	b	123d8 <__assert_fail@plt+0xfb4>
   12474:	push	{r3, r4, r5, r6, r7, lr}
   12478:	ldr	r3, [pc, #224]	; 12560 <__assert_fail@plt+0x113c>
   1247c:	ldmib	r0, {r4, r5}
   12480:	add	r3, pc, r3
   12484:	sub	r4, r4, #1
   12488:	ldr	r7, [r3]
   1248c:	cmp	r7, #0
   12490:	beq	12558 <__assert_fail@plt+0x1134>
   12494:	cmp	r4, #0
   12498:	moveq	r3, r4
   1249c:	beq	12534 <__assert_fail@plt+0x1110>
   124a0:	bl	112f8 <__ctype_b_loc@plt>
   124a4:	ldrb	r2, [r5]
   124a8:	mov	r6, #0
   124ac:	mov	r3, r6
   124b0:	lsl	r2, r2, #1
   124b4:	ldr	ip, [r0]
   124b8:	ldrh	r2, [ip, r2]
   124bc:	and	r2, r2, #1
   124c0:	cmp	r2, #0
   124c4:	beq	124ec <__assert_fail@plt+0x10c8>
   124c8:	add	r3, r3, #1
   124cc:	cmp	r4, r3
   124d0:	bls	12534 <__assert_fail@plt+0x1110>
   124d4:	ldrb	r2, [r5, r3]
   124d8:	lsl	r2, r2, #1
   124dc:	ldrh	r2, [ip, r2]
   124e0:	and	r2, r2, #1
   124e4:	cmp	r2, #0
   124e8:	bne	124c8 <__assert_fail@plt+0x10a4>
   124ec:	cmp	r4, r3
   124f0:	bls	12534 <__assert_fail@plt+0x1110>
   124f4:	add	r1, r5, r3
   124f8:	b	12518 <__assert_fail@plt+0x10f4>
   124fc:	add	r3, r3, #1
   12500:	cmp	r4, r3
   12504:	bls	12534 <__assert_fail@plt+0x1110>
   12508:	ldrb	r2, [r1, #1]!
   1250c:	lsl	r2, r2, #1
   12510:	ldrh	r2, [ip, r2]
   12514:	and	r2, r2, #1
   12518:	cmp	r2, #0
   1251c:	beq	124fc <__assert_fail@plt+0x10d8>
   12520:	add	r6, r6, #1
   12524:	cmp	r6, r7
   12528:	bcs	12534 <__assert_fail@plt+0x1110>
   1252c:	cmp	r4, r3
   12530:	bhi	124e4 <__assert_fail@plt+0x10c0>
   12534:	ldr	r2, [pc, #40]	; 12564 <__assert_fail@plt+0x1140>
   12538:	rsb	r4, r3, r4
   1253c:	add	r2, pc, r2
   12540:	ldr	r2, [r2, #4]
   12544:	cmp	r4, r2
   12548:	addls	r0, r3, r4
   1254c:	addhi	r0, r3, r2
   12550:	add	r0, r5, r0
   12554:	pop	{r3, r4, r5, r6, r7, pc}
   12558:	mov	r3, r7
   1255c:	b	12534 <__assert_fail@plt+0x1110>
   12560:	andeq	r5, r1, r0, lsr #26
   12564:	andeq	r5, r1, r4, ror #24
   12568:	ldr	r3, [pc, #580]	; 127b4 <__assert_fail@plt+0x1390>
   1256c:	ldr	r1, [pc, #580]	; 127b8 <__assert_fail@plt+0x1394>
   12570:	add	r3, pc, r3
   12574:	ldr	r2, [pc, #576]	; 127bc <__assert_fail@plt+0x1398>
   12578:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1257c:	add	r2, pc, r2
   12580:	ldr	r1, [r3, r1]
   12584:	sub	sp, sp, #44	; 0x2c
   12588:	ldr	r4, [r2]
   1258c:	add	r5, r0, #12
   12590:	ldr	r8, [r0, #4]
   12594:	ldr	r3, [r1]
   12598:	cmp	r4, #0
   1259c:	str	r1, [sp, #20]
   125a0:	sub	r8, r8, #1
   125a4:	ldr	sl, [r0, #8]
   125a8:	str	r3, [sp, #36]	; 0x24
   125ac:	beq	12718 <__assert_fail@plt+0x12f4>
   125b0:	cmp	r8, #0
   125b4:	beq	1279c <__assert_fail@plt+0x1378>
   125b8:	mov	r3, #0
   125bc:	ldr	r1, [pc, #508]	; 127c0 <__assert_fail@plt+0x139c>
   125c0:	add	r6, sp, #28
   125c4:	add	r9, sp, #24
   125c8:	mov	r4, r3
   125cc:	mov	r7, sl
   125d0:	mov	fp, r8
   125d4:	add	r1, pc, r1
   125d8:	str	r3, [sp, #12]
   125dc:	str	r1, [sp, #16]
   125e0:	ldm	r5, {r0, r1}
   125e4:	mov	r2, fp
   125e8:	mov	r3, r5
   125ec:	stm	r6, {r0, r1}
   125f0:	mov	r1, r7
   125f4:	mov	r0, r9
   125f8:	bl	11268 <mbrtowc@plt>
   125fc:	subs	r7, r0, #0
   12600:	beq	126d4 <__assert_fail@plt+0x12b0>
   12604:	cmn	r7, #2
   12608:	bcc	126d8 <__assert_fail@plt+0x12b4>
   1260c:	ldm	r6, {r0, r1}
   12610:	mov	r7, #1
   12614:	stm	r5, {r0, r1}
   12618:	add	r4, r4, r7
   1261c:	cmp	r8, r4
   12620:	bls	127a4 <__assert_fail@plt+0x1380>
   12624:	str	r9, [sp, #4]
   12628:	b	12644 <__assert_fail@plt+0x1220>
   1262c:	ldm	r6, {r0, r1}
   12630:	mov	r9, #1
   12634:	stm	r5, {r0, r1}
   12638:	add	r4, r4, r9
   1263c:	cmp	r8, r4
   12640:	bls	127a4 <__assert_fail@plt+0x1380>
   12644:	ldm	r5, {r0, r1}
   12648:	add	r7, sl, r4
   1264c:	rsb	fp, r4, r8
   12650:	mov	r3, r5
   12654:	str	r7, [sp, #8]
   12658:	stm	r6, {r0, r1}
   1265c:	mov	r2, fp
   12660:	mov	r1, r7
   12664:	ldr	r0, [sp, #4]
   12668:	bl	11268 <mbrtowc@plt>
   1266c:	subs	r9, r0, #0
   12670:	beq	12700 <__assert_fail@plt+0x12dc>
   12674:	cmn	r9, #2
   12678:	bcs	1262c <__assert_fail@plt+0x1208>
   1267c:	ldr	r0, [sp, #24]
   12680:	bl	111b4 <iswblank@plt>
   12684:	cmp	r0, #0
   12688:	beq	12638 <__assert_fail@plt+0x1214>
   1268c:	ldr	r1, [sp, #16]
   12690:	ldr	r2, [sp, #12]
   12694:	ldr	r9, [sp, #4]
   12698:	ldr	r3, [r1]
   1269c:	add	r2, r2, #1
   126a0:	str	r2, [sp, #12]
   126a4:	cmp	r3, r2
   126a8:	bls	1271c <__assert_fail@plt+0x12f8>
   126ac:	cmp	r8, r4
   126b0:	bhi	125e0 <__assert_fail@plt+0x11bc>
   126b4:	ldr	r1, [sp, #20]
   126b8:	ldr	r2, [sp, #36]	; 0x24
   126bc:	ldr	r0, [sp, #8]
   126c0:	ldr	r3, [r1]
   126c4:	cmp	r2, r3
   126c8:	bne	127b0 <__assert_fail@plt+0x138c>
   126cc:	add	sp, sp, #44	; 0x2c
   126d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126d4:	mov	r7, #1
   126d8:	ldr	r0, [sp, #24]
   126dc:	bl	111b4 <iswblank@plt>
   126e0:	cmp	r0, #0
   126e4:	beq	12618 <__assert_fail@plt+0x11f4>
   126e8:	add	r4, r4, r7
   126ec:	cmp	r8, r4
   126f0:	bls	127a4 <__assert_fail@plt+0x1380>
   126f4:	add	r7, sl, r4
   126f8:	rsb	fp, r4, r8
   126fc:	b	125e0 <__assert_fail@plt+0x11bc>
   12700:	ldr	r0, [sp, #24]
   12704:	mov	r9, #1
   12708:	bl	111b4 <iswblank@plt>
   1270c:	cmp	r0, #0
   12710:	beq	12638 <__assert_fail@plt+0x1214>
   12714:	b	1268c <__assert_fail@plt+0x1268>
   12718:	str	sl, [sp, #8]
   1271c:	ldr	r3, [pc, #160]	; 127c4 <__assert_fail@plt+0x13a0>
   12720:	add	r3, pc, r3
   12724:	ldr	r7, [r3, #4]
   12728:	cmp	r7, #0
   1272c:	beq	126b4 <__assert_fail@plt+0x1290>
   12730:	cmp	r4, r8
   12734:	addcc	r6, sp, #28
   12738:	addcc	r9, sp, #24
   1273c:	movcc	fp, #0
   12740:	bcc	12750 <__assert_fail@plt+0x132c>
   12744:	b	126b4 <__assert_fail@plt+0x1290>
   12748:	cmp	r8, r4
   1274c:	bls	12798 <__assert_fail@plt+0x1374>
   12750:	ldm	r5, {r0, r1}
   12754:	mov	r3, r5
   12758:	rsb	r2, r4, r8
   1275c:	stm	r6, {r0, r1}
   12760:	mov	r0, r9
   12764:	add	r1, sl, r4
   12768:	bl	11268 <mbrtowc@plt>
   1276c:	subs	r3, r0, #0
   12770:	moveq	r3, #1
   12774:	beq	12788 <__assert_fail@plt+0x1364>
   12778:	cmn	r3, #2
   1277c:	ldmcs	r6, {r0, r1}
   12780:	movcs	r3, #1
   12784:	stmcs	r5, {r0, r1}
   12788:	add	fp, fp, #1
   1278c:	add	r4, r4, r3
   12790:	cmp	fp, r7
   12794:	bne	12748 <__assert_fail@plt+0x1324>
   12798:	add	sl, sl, r4
   1279c:	str	sl, [sp, #8]
   127a0:	b	126b4 <__assert_fail@plt+0x1290>
   127a4:	add	r2, sl, r4
   127a8:	str	r2, [sp, #8]
   127ac:	b	1271c <__assert_fail@plt+0x12f8>
   127b0:	bl	111f0 <__stack_chk_fail@plt>
   127b4:	andeq	r5, r1, r8, lsl #21
   127b8:	andeq	r0, r0, r4, lsl r1
   127bc:	andeq	r5, r1, r4, lsr #24
   127c0:	andeq	r5, r1, ip, asr #23
   127c4:	andeq	r5, r1, r0, lsl #21
   127c8:	ldr	ip, [pc, #216]	; 128a8 <__assert_fail@plt+0x1484>
   127cc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127d0:	add	ip, pc, ip
   127d4:	mov	r6, r1
   127d8:	mov	r9, r0
   127dc:	ldr	sl, [ip, #8]
   127e0:	ldrb	r1, [ip, #12]
   127e4:	cmp	r2, sl
   127e8:	movcc	fp, r2
   127ec:	movcs	fp, sl
   127f0:	cmp	r3, sl
   127f4:	movcc	sl, r3
   127f8:	cmp	r1, #0
   127fc:	beq	1288c <__assert_fail@plt+0x1468>
   12800:	add	r4, fp, #1
   12804:	mov	r0, r4
   12808:	bl	156f4 <close_stdout@@Base+0x239c>
   1280c:	mov	r7, r0
   12810:	mov	r0, r4
   12814:	bl	156f4 <close_stdout@@Base+0x239c>
   12818:	cmp	fp, #0
   1281c:	mov	r8, r0
   12820:	beq	12858 <__assert_fail@plt+0x1434>
   12824:	bl	112c8 <__ctype_toupper_loc@plt>
   12828:	mov	ip, #0
   1282c:	ldrb	r2, [r9, ip]
   12830:	ldr	r3, [r0]
   12834:	ldr	r3, [r3, r2, lsl #2]
   12838:	strb	r3, [r7, ip]
   1283c:	ldrb	r5, [r6, ip]
   12840:	ldr	r4, [r0]
   12844:	ldr	r4, [r4, r5, lsl #2]
   12848:	strb	r4, [r8, ip]
   1284c:	add	ip, ip, #1
   12850:	cmp	ip, fp
   12854:	bne	1282c <__assert_fail@plt+0x1408>
   12858:	mov	r1, fp
   1285c:	mov	r3, sl
   12860:	mov	r2, r8
   12864:	mov	r0, r7
   12868:	bl	15a48 <close_stdout@@Base+0x26f0>
   1286c:	adds	r4, r0, #0
   12870:	mov	r0, r7
   12874:	movne	r4, #1
   12878:	bl	11190 <free@plt>
   1287c:	mov	r0, r8
   12880:	bl	11190 <free@plt>
   12884:	mov	r0, r4
   12888:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1288c:	mov	r1, fp
   12890:	mov	r2, r6
   12894:	mov	r3, sl
   12898:	bl	15a48 <close_stdout@@Base+0x26f0>
   1289c:	adds	r0, r0, #0
   128a0:	movne	r0, #1
   128a4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128a8:	ldrdeq	r5, [r1], -r0
   128ac:	ldr	ip, [pc, #144]	; 12944 <__assert_fail@plt+0x1520>
   128b0:	mov	r2, #10
   128b4:	push	{r4, r5, r6, lr}
   128b8:	add	ip, pc, ip
   128bc:	ldr	r4, [pc, #132]	; 12948 <__assert_fail@plt+0x1524>
   128c0:	sub	sp, sp, #16
   128c4:	ldr	lr, [pc, #128]	; 1294c <__assert_fail@plt+0x1528>
   128c8:	mov	r6, r1
   128cc:	add	r3, sp, #8
   128d0:	mov	r1, #0
   128d4:	ldr	r4, [ip, r4]
   128d8:	add	lr, pc, lr
   128dc:	str	lr, [sp]
   128e0:	mov	r5, r0
   128e4:	ldr	ip, [r4]
   128e8:	str	ip, [sp, #12]
   128ec:	bl	15aec <close_stdout@@Base+0x2794>
   128f0:	cmp	r0, #1
   128f4:	bls	12924 <__assert_fail@plt+0x1500>
   128f8:	mov	r1, r6
   128fc:	mov	r2, #5
   12900:	mov	r0, #0
   12904:	bl	111e4 <dcgettext@plt>
   12908:	ldr	r2, [pc, #64]	; 12950 <__assert_fail@plt+0x152c>
   1290c:	mov	r3, r5
   12910:	mov	r1, #0
   12914:	add	r2, pc, r2
   12918:	str	r0, [sp]
   1291c:	mov	r0, #1
   12920:	bl	11274 <error@plt>
   12924:	ldr	r2, [sp, #12]
   12928:	ldr	r3, [r4]
   1292c:	ldr	r0, [sp, #8]
   12930:	cmp	r2, r3
   12934:	bne	12940 <__assert_fail@plt+0x151c>
   12938:	add	sp, sp, #16
   1293c:	pop	{r4, r5, r6, pc}
   12940:	bl	111f0 <__stack_chk_fail@plt>
   12944:	andeq	r5, r1, r0, asr #14
   12948:	andeq	r0, r0, r4, lsl r1
   1294c:	andeq	r4, r0, r4, lsr r9
   12950:	muleq	r0, ip, r1
   12954:	ldr	ip, [pc, #92]	; 129b8 <__assert_fail@plt+0x1594>
   12958:	push	{r4, r5, r6, lr}
   1295c:	add	ip, pc, ip
   12960:	mov	r5, r0
   12964:	ldr	r4, [pc, #80]	; 129bc <__assert_fail@plt+0x1598>
   12968:	ldr	r0, [ip, #16]
   1296c:	mov	r6, r1
   12970:	add	r4, pc, r4
   12974:	cmp	r0, #0
   12978:	beq	1299c <__assert_fail@plt+0x1578>
   1297c:	ldr	r3, [pc, #60]	; 129c0 <__assert_fail@plt+0x159c>
   12980:	mov	r1, #1
   12984:	ldr	r2, [r5]
   12988:	ldr	r0, [r6]
   1298c:	ldr	r3, [r4, r3]
   12990:	pop	{r4, r5, r6, lr}
   12994:	ldr	r3, [r3]
   12998:	b	111cc <fwrite_unlocked@plt>
   1299c:	ldr	r1, [pc, #32]	; 129c4 <__assert_fail@plt+0x15a0>
   129a0:	adds	r2, r2, #1
   129a4:	adc	r3, r3, #0
   129a8:	mov	r0, #1
   129ac:	add	r1, pc, r1
   129b0:	bl	11370 <__printf_chk@plt>
   129b4:	b	1297c <__assert_fail@plt+0x1558>
   129b8:	andeq	r5, r1, r4, asr #16
   129bc:	andeq	r5, r1, r8, lsl #13
   129c0:	andeq	r0, r0, r8, lsr r1
   129c4:	andeq	r4, r0, ip, lsl #2
   129c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   129cc:	sub	sp, sp, #124	; 0x7c
   129d0:	ldr	lr, [pc, #696]	; 12c90 <__assert_fail@plt+0x186c>
   129d4:	add	r4, sp, #100	; 0x64
   129d8:	ldr	r5, [pc, #692]	; 12c94 <__assert_fail@plt+0x1870>
   129dc:	add	ip, sp, #168	; 0xa8
   129e0:	str	r4, [sp, #40]	; 0x28
   129e4:	add	lr, pc, lr
   129e8:	ldr	r4, [pc, #680]	; 12c98 <__assert_fail@plt+0x1874>
   129ec:	add	r5, pc, r5
   129f0:	str	r5, [sp, #52]	; 0x34
   129f4:	mov	fp, r2
   129f8:	ldr	r5, [pc, #668]	; 12c9c <__assert_fail@plt+0x1878>
   129fc:	add	r5, pc, r5
   12a00:	str	r5, [sp, #28]
   12a04:	ldr	r4, [lr, r4]
   12a08:	add	r5, sp, #68	; 0x44
   12a0c:	str	r5, [sp, #44]	; 0x2c
   12a10:	add	r5, sp, #156	; 0x9c
   12a14:	str	r0, [sp, #60]	; 0x3c
   12a18:	str	r4, [sp, #48]	; 0x30
   12a1c:	mov	r4, #0
   12a20:	str	r1, [sp, #64]	; 0x40
   12a24:	ldmib	r5, {r0, r1}
   12a28:	ldr	r5, [sp, #48]	; 0x30
   12a2c:	str	r4, [sp, #32]
   12a30:	add	r4, sp, #76	; 0x4c
   12a34:	str	r4, [sp, #36]	; 0x24
   12a38:	add	r4, sp, #56	; 0x38
   12a3c:	str	r4, [sp, #12]
   12a40:	ldr	r4, [sp, #40]	; 0x28
   12a44:	str	r3, [sp, #80]	; 0x50
   12a48:	ldr	r3, [r5]
   12a4c:	add	r5, sp, #92	; 0x5c
   12a50:	stm	r4, {r0, r1}
   12a54:	ldm	ip, {r0, r1}
   12a58:	mov	ip, #0
   12a5c:	str	r3, [sp, #116]	; 0x74
   12a60:	add	r3, sp, #108	; 0x6c
   12a64:	str	r2, [sp, #76]	; 0x4c
   12a68:	str	r5, [sp, #16]
   12a6c:	str	ip, [sp, #24]
   12a70:	stm	r3, {r0, r1}
   12a74:	add	r0, fp, #1
   12a78:	add	r5, sp, #76	; 0x4c
   12a7c:	bl	156f4 <close_stdout@@Base+0x239c>
   12a80:	ldr	r4, [sp, #24]
   12a84:	add	ip, sp, #68	; 0x44
   12a88:	mov	r1, #0
   12a8c:	ldr	r2, [r5, r4]
   12a90:	add	r2, r2, #1
   12a94:	str	r0, [ip, r4]
   12a98:	str	r0, [sp, #20]
   12a9c:	bl	11358 <memset@plt>
   12aa0:	cmp	fp, #0
   12aa4:	beq	12c7c <__assert_fail@plt+0x1858>
   12aa8:	ldr	r4, [sp, #52]	; 0x34
   12aac:	ldr	r4, [r4, #8]
   12ab0:	cmp	r4, #0
   12ab4:	str	r4, [sp, #8]
   12ab8:	beq	12c84 <__assert_fail@plt+0x1860>
   12abc:	ldr	r5, [sp, #32]
   12ac0:	add	ip, sp, #100	; 0x64
   12ac4:	add	r3, sp, #60	; 0x3c
   12ac8:	mov	r4, #0
   12acc:	add	r8, ip, r5
   12ad0:	ldr	r5, [sp, #24]
   12ad4:	add	r6, sp, #84	; 0x54
   12ad8:	mov	sl, r4
   12adc:	ldr	r3, [r5, r3]
   12ae0:	mov	r5, r8
   12ae4:	str	r3, [sp, #4]
   12ae8:	b	12b14 <__assert_fail@plt+0x16f0>
   12aec:	ldm	r6, {r0, r1}
   12af0:	mov	r9, #1
   12af4:	stm	r5, {r0, r1}
   12af8:	add	sl, sl, r9
   12afc:	add	r4, r4, #1
   12b00:	cmp	sl, fp
   12b04:	bcs	12bd0 <__assert_fail@plt+0x17ac>
   12b08:	ldr	ip, [sp, #8]
   12b0c:	cmp	r4, ip
   12b10:	beq	12bd0 <__assert_fail@plt+0x17ac>
   12b14:	ldr	ip, [sp, #4]
   12b18:	rsb	r2, sl, fp
   12b1c:	ldm	r5, {r0, r1}
   12b20:	mov	r3, r8
   12b24:	add	r7, ip, sl
   12b28:	stm	r6, {r0, r1}
   12b2c:	mov	r1, r7
   12b30:	add	r0, sp, #56	; 0x38
   12b34:	bl	11268 <mbrtowc@plt>
   12b38:	subs	r9, r0, #0
   12b3c:	beq	12bbc <__assert_fail@plt+0x1798>
   12b40:	cmn	r9, #2
   12b44:	bcs	12aec <__assert_fail@plt+0x16c8>
   12b48:	ldr	ip, [sp, #28]
   12b4c:	ldrb	r2, [ip, #12]
   12b50:	cmp	r2, #0
   12b54:	beq	12c14 <__assert_fail@plt+0x17f0>
   12b58:	ldr	r2, [sp, #56]	; 0x38
   12b5c:	mov	r0, r2
   12b60:	str	r2, [sp]
   12b64:	bl	113f4 <towupper@plt>
   12b68:	ldr	r2, [sp]
   12b6c:	cmp	r2, r0
   12b70:	beq	12c14 <__assert_fail@plt+0x17f0>
   12b74:	ldr	ip, [sp, #20]
   12b78:	mov	r1, r0
   12b7c:	add	r2, sp, #92	; 0x5c
   12b80:	mov	lr, #0
   12b84:	add	r0, ip, sl
   12b88:	str	lr, [sp, #92]	; 0x5c
   12b8c:	str	lr, [sp, #96]	; 0x60
   12b90:	bl	11154 <wcrtomb@plt>
   12b94:	cmn	r0, #1
   12b98:	bne	12af8 <__assert_fail@plt+0x16d4>
   12b9c:	ldr	r0, [pc, #252]	; 12ca0 <__assert_fail@plt+0x187c>
   12ba0:	movw	r2, #470	; 0x1d6
   12ba4:	ldr	r1, [pc, #248]	; 12ca4 <__assert_fail@plt+0x1880>
   12ba8:	ldr	r3, [pc, #248]	; 12ca8 <__assert_fail@plt+0x1884>
   12bac:	add	r0, pc, r0
   12bb0:	add	r1, pc, r1
   12bb4:	add	r3, pc, r3
   12bb8:	bl	11424 <__assert_fail@plt>
   12bbc:	mov	r9, #1
   12bc0:	add	sl, sl, r9
   12bc4:	cmp	sl, fp
   12bc8:	add	r4, r4, #1
   12bcc:	bcc	12b08 <__assert_fail@plt+0x16e4>
   12bd0:	ldr	r4, [sp, #24]
   12bd4:	add	r5, sp, #76	; 0x4c
   12bd8:	mov	ip, #0
   12bdc:	str	sl, [r5, r4]
   12be0:	add	r4, r4, #4
   12be4:	cmp	r4, #8
   12be8:	str	r4, [sp, #24]
   12bec:	ldr	r4, [sp, #20]
   12bf0:	ldr	r5, [sp, #32]
   12bf4:	strb	ip, [r4, sl]
   12bf8:	add	r5, r5, #8
   12bfc:	str	r5, [sp, #32]
   12c00:	beq	12c2c <__assert_fail@plt+0x1808>
   12c04:	ldr	ip, [sp, #24]
   12c08:	add	lr, sp, #76	; 0x4c
   12c0c:	ldr	fp, [lr, ip]
   12c10:	b	12a74 <__assert_fail@plt+0x1650>
   12c14:	ldr	ip, [sp, #20]
   12c18:	mov	r1, r7
   12c1c:	mov	r2, r9
   12c20:	add	r0, ip, sl
   12c24:	bl	111a8 <memcpy@plt>
   12c28:	b	12af8 <__assert_fail@plt+0x16d4>
   12c2c:	ldr	r4, [sp, #72]	; 0x48
   12c30:	ldr	r5, [sp, #68]	; 0x44
   12c34:	ldr	r3, [sp, #80]	; 0x50
   12c38:	mov	r2, r4
   12c3c:	ldr	r1, [sp, #76]	; 0x4c
   12c40:	mov	r0, r5
   12c44:	bl	15a48 <close_stdout@@Base+0x26f0>
   12c48:	mov	r6, r0
   12c4c:	mov	r0, r5
   12c50:	bl	11190 <free@plt>
   12c54:	mov	r0, r4
   12c58:	bl	11190 <free@plt>
   12c5c:	ldr	r4, [sp, #48]	; 0x30
   12c60:	ldr	r2, [sp, #116]	; 0x74
   12c64:	mov	r0, r6
   12c68:	ldr	r3, [r4]
   12c6c:	cmp	r2, r3
   12c70:	bne	12c8c <__assert_fail@plt+0x1868>
   12c74:	add	sp, sp, #124	; 0x7c
   12c78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c7c:	mov	sl, fp
   12c80:	b	12bd0 <__assert_fail@plt+0x17ac>
   12c84:	ldr	sl, [sp, #8]
   12c88:	b	12bd0 <__assert_fail@plt+0x17ac>
   12c8c:	bl	111f0 <__stack_chk_fail@plt>
   12c90:	andeq	r5, r1, r4, lsl r6
   12c94:			; <UNDEFINED> instruction: 0x000157b4
   12c98:	andeq	r0, r0, r4, lsl r1
   12c9c:	andeq	r5, r1, r4, lsr #15
   12ca0:	andeq	r3, r0, r4, lsl pc
   12ca4:	andeq	r3, r0, r4, lsr #30
   12ca8:	ldrdeq	r3, [r0], -r0
   12cac:	push	{r4, r5, r6, lr}
   12cb0:	subs	r4, r0, #0
   12cb4:	ldr	r5, [pc, #652]	; 12f48 <__assert_fail@plt+0x1b24>
   12cb8:	add	r5, pc, r5
   12cbc:	beq	12d04 <__assert_fail@plt+0x18e0>
   12cc0:	ldr	r3, [pc, #644]	; 12f4c <__assert_fail@plt+0x1b28>
   12cc4:	mov	r2, #5
   12cc8:	ldr	r1, [pc, #640]	; 12f50 <__assert_fail@plt+0x1b2c>
   12ccc:	mov	r0, #0
   12cd0:	ldr	r3, [r5, r3]
   12cd4:	add	r1, pc, r1
   12cd8:	ldr	r6, [r3]
   12cdc:	bl	111e4 <dcgettext@plt>
   12ce0:	ldr	r3, [pc, #620]	; 12f54 <__assert_fail@plt+0x1b30>
   12ce4:	mov	r1, #1
   12ce8:	ldr	r3, [r5, r3]
   12cec:	ldr	r3, [r3]
   12cf0:	mov	r2, r0
   12cf4:	mov	r0, r6
   12cf8:	bl	11388 <__fprintf_chk@plt>
   12cfc:	mov	r0, r4
   12d00:	bl	11304 <exit@plt>
   12d04:	ldr	r1, [pc, #588]	; 12f58 <__assert_fail@plt+0x1b34>
   12d08:	mov	r2, #5
   12d0c:	add	r1, pc, r1
   12d10:	bl	111e4 <dcgettext@plt>
   12d14:	ldr	r3, [pc, #568]	; 12f54 <__assert_fail@plt+0x1b30>
   12d18:	ldr	r6, [r5, r3]
   12d1c:	ldr	r2, [r6]
   12d20:	mov	r1, r0
   12d24:	mov	r0, #1
   12d28:	bl	11370 <__printf_chk@plt>
   12d2c:	ldr	r1, [pc, #552]	; 12f5c <__assert_fail@plt+0x1b38>
   12d30:	mov	r2, #5
   12d34:	mov	r0, r4
   12d38:	add	r1, pc, r1
   12d3c:	bl	111e4 <dcgettext@plt>
   12d40:	ldr	r3, [pc, #536]	; 12f60 <__assert_fail@plt+0x1b3c>
   12d44:	ldr	r5, [r5, r3]
   12d48:	ldr	r1, [r5]
   12d4c:	bl	1113c <fputs_unlocked@plt>
   12d50:	ldr	r1, [pc, #524]	; 12f64 <__assert_fail@plt+0x1b40>
   12d54:	mov	r2, #5
   12d58:	mov	r0, r4
   12d5c:	add	r1, pc, r1
   12d60:	bl	111e4 <dcgettext@plt>
   12d64:	ldr	r1, [r5]
   12d68:	bl	1113c <fputs_unlocked@plt>
   12d6c:	ldr	r1, [pc, #500]	; 12f68 <__assert_fail@plt+0x1b44>
   12d70:	mov	r2, #5
   12d74:	mov	r0, r4
   12d78:	add	r1, pc, r1
   12d7c:	bl	111e4 <dcgettext@plt>
   12d80:	ldr	r1, [r5]
   12d84:	bl	1113c <fputs_unlocked@plt>
   12d88:	ldr	r1, [pc, #476]	; 12f6c <__assert_fail@plt+0x1b48>
   12d8c:	mov	r2, #5
   12d90:	mov	r0, r4
   12d94:	add	r1, pc, r1
   12d98:	bl	111e4 <dcgettext@plt>
   12d9c:	ldr	r1, [r5]
   12da0:	bl	1113c <fputs_unlocked@plt>
   12da4:	ldr	r1, [pc, #452]	; 12f70 <__assert_fail@plt+0x1b4c>
   12da8:	mov	r2, #5
   12dac:	mov	r0, r4
   12db0:	add	r1, pc, r1
   12db4:	bl	111e4 <dcgettext@plt>
   12db8:	ldr	r1, [r5]
   12dbc:	bl	1113c <fputs_unlocked@plt>
   12dc0:	ldr	r1, [pc, #428]	; 12f74 <__assert_fail@plt+0x1b50>
   12dc4:	mov	r2, #5
   12dc8:	mov	r0, r4
   12dcc:	add	r1, pc, r1
   12dd0:	bl	111e4 <dcgettext@plt>
   12dd4:	ldr	r1, [r5]
   12dd8:	bl	1113c <fputs_unlocked@plt>
   12ddc:	ldr	r1, [pc, #404]	; 12f78 <__assert_fail@plt+0x1b54>
   12de0:	mov	r2, #5
   12de4:	mov	r0, r4
   12de8:	add	r1, pc, r1
   12dec:	bl	111e4 <dcgettext@plt>
   12df0:	ldr	r1, [r5]
   12df4:	bl	1113c <fputs_unlocked@plt>
   12df8:	ldr	r1, [pc, #380]	; 12f7c <__assert_fail@plt+0x1b58>
   12dfc:	mov	r2, #5
   12e00:	mov	r0, r4
   12e04:	add	r1, pc, r1
   12e08:	bl	111e4 <dcgettext@plt>
   12e0c:	ldr	r1, [r5]
   12e10:	bl	1113c <fputs_unlocked@plt>
   12e14:	ldr	r1, [pc, #356]	; 12f80 <__assert_fail@plt+0x1b5c>
   12e18:	mov	r2, #5
   12e1c:	mov	r0, r4
   12e20:	add	r1, pc, r1
   12e24:	bl	111e4 <dcgettext@plt>
   12e28:	ldr	r1, [r5]
   12e2c:	bl	1113c <fputs_unlocked@plt>
   12e30:	ldr	r1, [pc, #332]	; 12f84 <__assert_fail@plt+0x1b60>
   12e34:	mov	r2, #5
   12e38:	mov	r0, r4
   12e3c:	add	r1, pc, r1
   12e40:	bl	111e4 <dcgettext@plt>
   12e44:	ldr	r1, [r5]
   12e48:	bl	1113c <fputs_unlocked@plt>
   12e4c:	ldr	r1, [pc, #308]	; 12f88 <__assert_fail@plt+0x1b64>
   12e50:	mov	r2, #5
   12e54:	mov	r0, r4
   12e58:	add	r1, pc, r1
   12e5c:	bl	111e4 <dcgettext@plt>
   12e60:	ldr	r1, [r5]
   12e64:	bl	1113c <fputs_unlocked@plt>
   12e68:	ldr	r1, [pc, #284]	; 12f8c <__assert_fail@plt+0x1b68>
   12e6c:	mov	r2, #5
   12e70:	mov	r0, r4
   12e74:	add	r1, pc, r1
   12e78:	bl	111e4 <dcgettext@plt>
   12e7c:	ldr	r1, [r5]
   12e80:	bl	1113c <fputs_unlocked@plt>
   12e84:	ldr	r1, [pc, #260]	; 12f90 <__assert_fail@plt+0x1b6c>
   12e88:	mov	r2, #5
   12e8c:	mov	r0, r4
   12e90:	add	r1, pc, r1
   12e94:	bl	111e4 <dcgettext@plt>
   12e98:	ldr	r2, [pc, #244]	; 12f94 <__assert_fail@plt+0x1b70>
   12e9c:	ldr	r3, [pc, #244]	; 12f98 <__assert_fail@plt+0x1b74>
   12ea0:	add	r2, pc, r2
   12ea4:	add	r3, pc, r3
   12ea8:	mov	r1, r0
   12eac:	mov	r0, #1
   12eb0:	bl	11370 <__printf_chk@plt>
   12eb4:	mov	r0, #5
   12eb8:	mov	r1, r4
   12ebc:	bl	113c4 <setlocale@plt>
   12ec0:	cmp	r0, #0
   12ec4:	beq	12ee0 <__assert_fail@plt+0x1abc>
   12ec8:	ldr	r1, [pc, #204]	; 12f9c <__assert_fail@plt+0x1b78>
   12ecc:	mov	r2, #3
   12ed0:	add	r1, pc, r1
   12ed4:	bl	11400 <strncmp@plt>
   12ed8:	cmp	r0, #0
   12edc:	bne	12f14 <__assert_fail@plt+0x1af0>
   12ee0:	ldr	r1, [pc, #184]	; 12fa0 <__assert_fail@plt+0x1b7c>
   12ee4:	mov	r2, #5
   12ee8:	mov	r0, #0
   12eec:	add	r1, pc, r1
   12ef0:	bl	111e4 <dcgettext@plt>
   12ef4:	mov	r5, r0
   12ef8:	ldr	r0, [r6]
   12efc:	bl	13470 <close_stdout@@Base+0x118>
   12f00:	mov	r1, r5
   12f04:	mov	r2, r0
   12f08:	mov	r0, #1
   12f0c:	bl	11370 <__printf_chk@plt>
   12f10:	b	12cfc <__assert_fail@plt+0x18d8>
   12f14:	ldr	r1, [pc, #136]	; 12fa4 <__assert_fail@plt+0x1b80>
   12f18:	mov	r2, #5
   12f1c:	mov	r0, r4
   12f20:	add	r1, pc, r1
   12f24:	bl	111e4 <dcgettext@plt>
   12f28:	mov	r5, r0
   12f2c:	ldr	r0, [r6]
   12f30:	bl	13470 <close_stdout@@Base+0x118>
   12f34:	mov	r1, r5
   12f38:	mov	r2, r0
   12f3c:	mov	r0, #1
   12f40:	bl	11370 <__printf_chk@plt>
   12f44:	b	12ee0 <__assert_fail@plt+0x1abc>
   12f48:	andeq	r5, r1, r0, asr #6
   12f4c:	andeq	r0, r0, r0, lsr #2
   12f50:	andeq	r3, r0, ip, lsl #28
   12f54:	andeq	r0, r0, r4, asr #2
   12f58:	strdeq	r3, [r0], -ip
   12f5c:	strdeq	r3, [r0], -r8
   12f60:	andeq	r0, r0, r8, lsr r1
   12f64:	andeq	r3, r0, r4, lsl #29
   12f68:			; <UNDEFINED> instruction: 0x00003eb4
   12f6c:	andeq	r3, r0, r4, lsr #30
   12f70:	andeq	r3, r0, ip, asr #31
   12f74:	andeq	r3, r0, ip, ror #31
   12f78:	andeq	r4, r0, r8, rrx
   12f7c:	andeq	r4, r0, ip, lsr r1
   12f80:	andeq	r4, r0, r4, ror #2
   12f84:	andeq	r4, r0, r8, ror r1
   12f88:	muleq	r0, r4, r1
   12f8c:	strdeq	r4, [r0], -r0
   12f90:	andeq	r4, r0, r0, lsr #5
   12f94:	andeq	r4, r0, r8, lsr #5
   12f98:			; <UNDEFINED> instruction: 0x000042b4
   12f9c:			; <UNDEFINED> instruction: 0x000042b0
   12fa0:	andeq	r4, r0, r0, ror #5
   12fa4:	andeq	r4, r0, r4, ror #4
   12fa8:	mov	r0, #1
   12fac:	b	12cac <__assert_fail@plt+0x1888>
   12fb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12fb4:	sub	sp, sp, #12
   12fb8:	mov	r7, r1
   12fbc:	mov	r6, r3
   12fc0:	str	r2, [sp]
   12fc4:	mov	sl, r0
   12fc8:	bl	1131c <strlen@plt>
   12fcc:	ldr	fp, [r7]
   12fd0:	cmp	fp, #0
   12fd4:	mov	r8, r0
   12fd8:	beq	1309c <__assert_fail@plt+0x1c78>
   12fdc:	mov	r3, #0
   12fe0:	ldr	r4, [sp]
   12fe4:	str	r3, [sp, #4]
   12fe8:	mov	r5, r3
   12fec:	mvn	r9, #0
   12ff0:	b	1301c <__assert_fail@plt+0x1bf8>
   12ff4:	bl	111d8 <memcmp@plt>
   12ff8:	ldr	r3, [sp, #4]
   12ffc:	cmp	r0, #0
   13000:	movne	r3, #1
   13004:	str	r3, [sp, #4]
   13008:	ldr	fp, [r7, #4]!
   1300c:	add	r5, r5, #1
   13010:	add	r4, r4, r6
   13014:	cmp	fp, #0
   13018:	beq	13078 <__assert_fail@plt+0x1c54>
   1301c:	mov	r0, fp
   13020:	mov	r1, sl
   13024:	mov	r2, r8
   13028:	bl	11400 <strncmp@plt>
   1302c:	cmp	r0, #0
   13030:	mov	r0, fp
   13034:	bne	13008 <__assert_fail@plt+0x1be4>
   13038:	bl	1131c <strlen@plt>
   1303c:	ldr	r3, [sp]
   13040:	mov	r1, r4
   13044:	mov	r2, r6
   13048:	cmp	r0, r8
   1304c:	mla	r0, r6, r9, r3
   13050:	beq	13090 <__assert_fail@plt+0x1c6c>
   13054:	cmn	r9, #1
   13058:	moveq	r9, r5
   1305c:	beq	13008 <__assert_fail@plt+0x1be4>
   13060:	ldr	r3, [sp]
   13064:	cmp	r3, #0
   13068:	bne	12ff4 <__assert_fail@plt+0x1bd0>
   1306c:	mov	r3, #1
   13070:	str	r3, [sp, #4]
   13074:	b	13008 <__assert_fail@plt+0x1be4>
   13078:	ldr	r3, [sp, #4]
   1307c:	cmp	r3, #0
   13080:	bne	130a4 <__assert_fail@plt+0x1c80>
   13084:	mov	r0, r9
   13088:	add	sp, sp, #12
   1308c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13090:	mov	r0, r5
   13094:	add	sp, sp, #12
   13098:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1309c:	mvn	r9, #0
   130a0:	b	13084 <__assert_fail@plt+0x1c60>
   130a4:	mvn	r0, #1
   130a8:	b	13088 <__assert_fail@plt+0x1c64>
   130ac:	cmn	r2, #1
   130b0:	push	{r4, r5, r6, lr}
   130b4:	mov	r4, r0
   130b8:	sub	sp, sp, #8
   130bc:	mov	r5, r1
   130c0:	mov	r0, #0
   130c4:	beq	1311c <__assert_fail@plt+0x1cf8>
   130c8:	ldr	r1, [pc, #100]	; 13134 <__assert_fail@plt+0x1d10>
   130cc:	mov	r2, #5
   130d0:	add	r1, pc, r1
   130d4:	bl	111e4 <dcgettext@plt>
   130d8:	mov	r6, r0
   130dc:	mov	r2, r5
   130e0:	mov	r1, #6
   130e4:	mov	r0, #0
   130e8:	bl	14e40 <close_stdout@@Base+0x1ae8>
   130ec:	mov	r1, r4
   130f0:	mov	r5, r0
   130f4:	mov	r0, #1
   130f8:	bl	15140 <close_stdout@@Base+0x1de8>
   130fc:	mov	r3, r5
   13100:	mov	r2, r6
   13104:	str	r0, [sp]
   13108:	mov	r0, #0
   1310c:	mov	r1, r0
   13110:	bl	11274 <error@plt>
   13114:	add	sp, sp, #8
   13118:	pop	{r4, r5, r6, pc}
   1311c:	ldr	r1, [pc, #20]	; 13138 <__assert_fail@plt+0x1d14>
   13120:	mov	r2, #5
   13124:	add	r1, pc, r1
   13128:	bl	111e4 <dcgettext@plt>
   1312c:	mov	r6, r0
   13130:	b	130dc <__assert_fail@plt+0x1cb8>
   13134:	andeq	r4, r0, r8, asr #7
   13138:	andeq	r4, r0, r8, asr r3
   1313c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13140:	mov	r4, r1
   13144:	ldr	r1, [pc, #276]	; 13260 <__assert_fail@plt+0x1e3c>
   13148:	sub	sp, sp, #12
   1314c:	mov	r7, r0
   13150:	mov	r6, r2
   13154:	add	r1, pc, r1
   13158:	mov	r2, #5
   1315c:	mov	r0, #0
   13160:	bl	111e4 <dcgettext@plt>
   13164:	ldr	r3, [pc, #248]	; 13264 <__assert_fail@plt+0x1e40>
   13168:	ldr	r2, [pc, #248]	; 13268 <__assert_fail@plt+0x1e44>
   1316c:	add	r3, pc, r3
   13170:	ldr	r9, [r3, r2]
   13174:	ldr	r1, [r9]
   13178:	bl	1113c <fputs_unlocked@plt>
   1317c:	ldr	fp, [r7]
   13180:	cmp	fp, #0
   13184:	beq	13224 <__assert_fail@plt+0x1e00>
   13188:	ldr	sl, [pc, #220]	; 1326c <__assert_fail@plt+0x1e48>
   1318c:	mov	r8, #0
   13190:	ldr	r3, [pc, #216]	; 13270 <__assert_fail@plt+0x1e4c>
   13194:	mov	r5, r8
   13198:	add	sl, pc, sl
   1319c:	add	r3, pc, r3
   131a0:	str	r3, [sp, #4]
   131a4:	b	131e0 <__assert_fail@plt+0x1dbc>
   131a8:	mov	r0, fp
   131ac:	ldr	fp, [r9]
   131b0:	bl	15148 <close_stdout@@Base+0x1df0>
   131b4:	mov	r1, #1
   131b8:	mov	r2, sl
   131bc:	mov	r8, r4
   131c0:	mov	r3, r0
   131c4:	mov	r0, fp
   131c8:	bl	11388 <__fprintf_chk@plt>
   131cc:	ldr	fp, [r7, #4]!
   131d0:	add	r5, r5, #1
   131d4:	add	r4, r4, r6
   131d8:	cmp	fp, #0
   131dc:	beq	13224 <__assert_fail@plt+0x1e00>
   131e0:	cmp	r5, #0
   131e4:	mov	r1, r4
   131e8:	mov	r2, r6
   131ec:	mov	r0, r8
   131f0:	beq	131a8 <__assert_fail@plt+0x1d84>
   131f4:	bl	111d8 <memcmp@plt>
   131f8:	cmp	r0, #0
   131fc:	bne	131a8 <__assert_fail@plt+0x1d84>
   13200:	mov	r0, fp
   13204:	ldr	fp, [r9]
   13208:	bl	15148 <close_stdout@@Base+0x1df0>
   1320c:	mov	r1, #1
   13210:	ldr	r2, [sp, #4]
   13214:	mov	r3, r0
   13218:	mov	r0, fp
   1321c:	bl	11388 <__fprintf_chk@plt>
   13220:	b	131cc <__assert_fail@plt+0x1da8>
   13224:	ldr	r0, [r9]
   13228:	ldr	r3, [r0, #20]
   1322c:	ldr	r2, [r0, #24]
   13230:	cmp	r3, r2
   13234:	bcs	13250 <__assert_fail@plt+0x1e2c>
   13238:	add	r1, r3, #1
   1323c:	mov	r2, #10
   13240:	str	r1, [r0, #20]
   13244:	strb	r2, [r3]
   13248:	add	sp, sp, #12
   1324c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13250:	mov	r1, #10
   13254:	add	sp, sp, #12
   13258:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1325c:	b	113b8 <__overflow@plt>
   13260:	andeq	r4, r0, r4, ror #6
   13264:	andeq	r4, r1, ip, lsl #29
   13268:	andeq	r0, r0, r0, lsr #2
   1326c:	andeq	r4, r0, r8, lsr r3
   13270:	andeq	r4, r0, ip, lsr r3
   13274:	push	{r4, r5, r6, r7, r8, lr}
   13278:	mov	r7, r1
   1327c:	ldr	r4, [sp, #24]
   13280:	mov	r1, r2
   13284:	mov	r6, r2
   13288:	mov	r5, r3
   1328c:	mov	r2, r3
   13290:	mov	r8, r0
   13294:	mov	r3, r4
   13298:	mov	r0, r7
   1329c:	bl	12fb0 <__assert_fail@plt+0x1b8c>
   132a0:	subs	r2, r0, #0
   132a4:	blt	132b0 <__assert_fail@plt+0x1e8c>
   132a8:	mov	r0, r2
   132ac:	pop	{r4, r5, r6, r7, r8, pc}
   132b0:	mov	r0, r8
   132b4:	mov	r1, r7
   132b8:	bl	130ac <__assert_fail@plt+0x1c88>
   132bc:	mov	r0, r6
   132c0:	mov	r1, r5
   132c4:	mov	r2, r4
   132c8:	bl	1313c <__assert_fail@plt+0x1d18>
   132cc:	ldr	r3, [sp, #28]
   132d0:	blx	r3
   132d4:	mvn	r0, #0
   132d8:	pop	{r4, r5, r6, r7, r8, pc}
   132dc:	push	{r4, r5, r6, r7, r8, lr}
   132e0:	mov	r8, r0
   132e4:	ldr	r5, [r1]
   132e8:	mov	r6, r3
   132ec:	cmp	r5, #0
   132f0:	beq	13328 <__assert_fail@plt+0x1f04>
   132f4:	mov	r4, r2
   132f8:	mov	r7, r1
   132fc:	b	1330c <__assert_fail@plt+0x1ee8>
   13300:	ldr	r5, [r7, #4]!
   13304:	cmp	r5, #0
   13308:	beq	13328 <__assert_fail@plt+0x1f04>
   1330c:	mov	r1, r4
   13310:	mov	r0, r8
   13314:	mov	r2, r6
   13318:	add	r4, r4, r6
   1331c:	bl	111d8 <memcmp@plt>
   13320:	cmp	r0, #0
   13324:	bne	13300 <__assert_fail@plt+0x1edc>
   13328:	mov	r0, r5
   1332c:	pop	{r4, r5, r6, r7, r8, pc}
   13330:	ldr	r3, [pc, #8]	; 13340 <__assert_fail@plt+0x1f1c>
   13334:	add	r3, pc, r3
   13338:	str	r0, [r3]
   1333c:	bx	lr
   13340:	muleq	r1, r4, lr
   13344:	ldr	r3, [pc, #8]	; 13354 <__assert_fail@plt+0x1f30>
   13348:	add	r3, pc, r3
   1334c:	strb	r0, [r3, #4]
   13350:	bx	lr
   13354:	andeq	r4, r1, r0, lsl #29

00013358 <close_stdout@@Base>:
   13358:	push	{r4, r5, r6, r7, lr}
   1335c:	sub	sp, sp, #12
   13360:	ldr	r4, [pc, #228]	; 1344c <close_stdout@@Base+0xf4>
   13364:	ldr	r3, [pc, #228]	; 13450 <close_stdout@@Base+0xf8>
   13368:	add	r4, pc, r4
   1336c:	ldr	r3, [r4, r3]
   13370:	ldr	r0, [r3]
   13374:	bl	161cc <close_stdout@@Base+0x2e74>
   13378:	cmp	r0, #0
   1337c:	beq	133a4 <close_stdout@@Base+0x4c>
   13380:	ldr	r3, [pc, #204]	; 13454 <close_stdout@@Base+0xfc>
   13384:	add	r3, pc, r3
   13388:	ldrb	r3, [r3, #4]
   1338c:	cmp	r3, #0
   13390:	beq	133c4 <close_stdout@@Base+0x6c>
   13394:	bl	11340 <__errno_location@plt>
   13398:	ldr	r3, [r0]
   1339c:	cmp	r3, #32
   133a0:	bne	133c4 <close_stdout@@Base+0x6c>
   133a4:	ldr	r3, [pc, #172]	; 13458 <close_stdout@@Base+0x100>
   133a8:	ldr	r3, [r4, r3]
   133ac:	ldr	r0, [r3]
   133b0:	bl	161cc <close_stdout@@Base+0x2e74>
   133b4:	cmp	r0, #0
   133b8:	bne	13418 <close_stdout@@Base+0xc0>
   133bc:	add	sp, sp, #12
   133c0:	pop	{r4, r5, r6, r7, pc}
   133c4:	ldr	r1, [pc, #144]	; 1345c <close_stdout@@Base+0x104>
   133c8:	mov	r0, #0
   133cc:	mov	r2, #5
   133d0:	add	r1, pc, r1
   133d4:	bl	111e4 <dcgettext@plt>
   133d8:	ldr	r3, [pc, #128]	; 13460 <close_stdout@@Base+0x108>
   133dc:	ldr	r5, [pc, r3]
   133e0:	cmp	r5, #0
   133e4:	mov	r6, r0
   133e8:	beq	13428 <close_stdout@@Base+0xd0>
   133ec:	bl	11340 <__errno_location@plt>
   133f0:	ldr	r7, [r0]
   133f4:	mov	r0, r5
   133f8:	bl	14ff4 <close_stdout@@Base+0x1c9c>
   133fc:	ldr	r2, [pc, #96]	; 13464 <close_stdout@@Base+0x10c>
   13400:	str	r6, [sp]
   13404:	mov	r1, r7
   13408:	add	r2, pc, r2
   1340c:	mov	r3, r0
   13410:	mov	r0, #0
   13414:	bl	11274 <error@plt>
   13418:	ldr	r3, [pc, #72]	; 13468 <close_stdout@@Base+0x110>
   1341c:	ldr	r3, [r4, r3]
   13420:	ldr	r0, [r3]
   13424:	bl	1119c <_exit@plt>
   13428:	bl	11340 <__errno_location@plt>
   1342c:	ldr	r2, [pc, #56]	; 1346c <close_stdout@@Base+0x114>
   13430:	add	r2, pc, r2
   13434:	mov	r3, r0
   13438:	mov	r0, r5
   1343c:	ldr	r1, [r3]
   13440:	mov	r3, r6
   13444:	bl	11274 <error@plt>
   13448:	b	13418 <close_stdout@@Base+0xc0>
   1344c:	muleq	r1, r0, ip
   13450:	andeq	r0, r0, r8, lsr r1
   13454:	andeq	r4, r1, r4, asr #28
   13458:	andeq	r0, r0, r0, lsr #2
   1345c:	andeq	r4, r0, r0, lsl r1
   13460:	andeq	r4, r1, ip, ror #27
   13464:	andeq	r3, r0, r8, lsr #13
   13468:	andeq	r0, r0, ip, lsr r1
   1346c:	andeq	r3, r0, r4, lsl #13
   13470:	ldrb	r3, [r0]
   13474:	cmp	r3, #47	; 0x2f
   13478:	bne	13494 <close_stdout@@Base+0x13c>
   1347c:	add	r2, r0, #1
   13480:	mov	r0, r2
   13484:	add	r2, r2, #1
   13488:	ldrb	r3, [r0]
   1348c:	cmp	r3, #47	; 0x2f
   13490:	beq	13480 <close_stdout@@Base+0x128>
   13494:	cmp	r3, #0
   13498:	bxeq	lr
   1349c:	mov	r2, r0
   134a0:	mov	r1, #0
   134a4:	cmp	r3, #47	; 0x2f
   134a8:	moveq	r1, #1
   134ac:	beq	134bc <close_stdout@@Base+0x164>
   134b0:	cmp	r1, #0
   134b4:	movne	r0, r2
   134b8:	movne	r1, #0
   134bc:	ldrb	r3, [r2, #1]!
   134c0:	cmp	r3, #0
   134c4:	bne	134a4 <close_stdout@@Base+0x14c>
   134c8:	bx	lr
   134cc:	push	{r4, lr}
   134d0:	mov	r4, r0
   134d4:	bl	1131c <strlen@plt>
   134d8:	cmp	r0, #1
   134dc:	popls	{r4, pc}
   134e0:	sub	r3, r0, #1
   134e4:	ldrb	r2, [r4, r3]
   134e8:	cmp	r2, #47	; 0x2f
   134ec:	popne	{r4, pc}
   134f0:	mov	r0, r3
   134f4:	cmp	r0, #1
   134f8:	sub	r3, r3, #1
   134fc:	beq	13510 <close_stdout@@Base+0x1b8>
   13500:	ldrb	r2, [r4, r3]
   13504:	cmp	r2, #47	; 0x2f
   13508:	popne	{r4, pc}
   1350c:	b	134f0 <close_stdout@@Base+0x198>
   13510:	pop	{r4, pc}
   13514:	b	11178 <posix_fadvise64@plt>
   13518:	cmp	r0, #0
   1351c:	push	{r4, r5, r6, lr}
   13520:	mov	r6, r1
   13524:	sub	sp, sp, #16
   13528:	beq	1354c <close_stdout@@Base+0x1f4>
   1352c:	mov	r4, #0
   13530:	mov	r5, #0
   13534:	bl	1137c <fileno@plt>
   13538:	str	r6, [sp, #8]
   1353c:	mov	r2, r4
   13540:	mov	r3, r5
   13544:	strd	r4, [sp]
   13548:	bl	13514 <close_stdout@@Base+0x1bc>
   1354c:	add	sp, sp, #16
   13550:	pop	{r4, r5, r6, pc}
   13554:	push	{r4, lr}
   13558:	mov	r4, r0
   1355c:	ldr	r0, [pc, #64]	; 135a4 <close_stdout@@Base+0x24c>
   13560:	mov	r1, #0
   13564:	add	r0, pc, r0
   13568:	bl	11280 <open64@plt>
   1356c:	cmp	r4, r0
   13570:	mov	r3, r0
   13574:	moveq	r3, #1
   13578:	beq	1359c <close_stdout@@Base+0x244>
   1357c:	cmp	r3, #0
   13580:	movlt	r3, #0
   13584:	blt	1359c <close_stdout@@Base+0x244>
   13588:	bl	11418 <close@plt>
   1358c:	bl	11340 <__errno_location@plt>
   13590:	mov	r3, #0
   13594:	mov	r2, #9
   13598:	str	r2, [r0]
   1359c:	mov	r0, r3
   135a0:	pop	{r4, pc}
   135a4:	andeq	r3, r0, r8, lsl #31
   135a8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   135ac:	mov	r9, r0
   135b0:	mov	r0, r2
   135b4:	mov	r7, r2
   135b8:	mov	sl, r1
   135bc:	bl	1137c <fileno@plt>
   135c0:	cmp	r0, #1
   135c4:	beq	136f8 <close_stdout@@Base+0x3a0>
   135c8:	cmp	r0, #2
   135cc:	beq	136f0 <close_stdout@@Base+0x398>
   135d0:	cmp	r0, #0
   135d4:	beq	13698 <close_stdout@@Base+0x340>
   135d8:	mov	r0, #2
   135dc:	mov	r1, r0
   135e0:	bl	111fc <dup2@plt>
   135e4:	subs	r5, r0, #2
   135e8:	movne	r5, #1
   135ec:	mov	r0, #1
   135f0:	mov	r1, r0
   135f4:	bl	111fc <dup2@plt>
   135f8:	subs	r6, r0, #1
   135fc:	movne	r6, #1
   13600:	mov	r0, #0
   13604:	mov	r1, r0
   13608:	bl	111fc <dup2@plt>
   1360c:	cmp	r0, #0
   13610:	beq	136a0 <close_stdout@@Base+0x348>
   13614:	mov	r0, #0
   13618:	bl	13554 <close_stdout@@Base+0x1fc>
   1361c:	cmp	r0, #0
   13620:	moveq	r4, r0
   13624:	moveq	r8, #1
   13628:	beq	13664 <close_stdout@@Base+0x30c>
   1362c:	cmp	r6, #0
   13630:	mov	r8, #1
   13634:	bne	136ac <close_stdout@@Base+0x354>
   13638:	cmp	r5, #0
   1363c:	beq	13650 <close_stdout@@Base+0x2f8>
   13640:	mov	r0, #2
   13644:	bl	13554 <close_stdout@@Base+0x1fc>
   13648:	subs	r4, r0, #0
   1364c:	beq	136d8 <close_stdout@@Base+0x380>
   13650:	mov	r0, r9
   13654:	mov	r1, sl
   13658:	mov	r2, r7
   1365c:	bl	112e0 <freopen64@plt>
   13660:	mov	r4, r0
   13664:	bl	11340 <__errno_location@plt>
   13668:	cmp	r5, #0
   1366c:	mov	r7, r0
   13670:	ldr	r5, [r0]
   13674:	bne	136e4 <close_stdout@@Base+0x38c>
   13678:	cmp	r6, #0
   1367c:	bne	136cc <close_stdout@@Base+0x374>
   13680:	cmp	r8, #0
   13684:	bne	136c0 <close_stdout@@Base+0x368>
   13688:	cmp	r4, #0
   1368c:	mov	r0, r4
   13690:	streq	r5, [r7]
   13694:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13698:	mov	r5, r0
   1369c:	mov	r6, r0
   136a0:	cmp	r6, #0
   136a4:	mov	r8, #0
   136a8:	beq	13638 <close_stdout@@Base+0x2e0>
   136ac:	mov	r0, #1
   136b0:	bl	13554 <close_stdout@@Base+0x1fc>
   136b4:	cmp	r0, #0
   136b8:	bne	13638 <close_stdout@@Base+0x2e0>
   136bc:	b	13660 <close_stdout@@Base+0x308>
   136c0:	mov	r0, #0
   136c4:	bl	11418 <close@plt>
   136c8:	b	13688 <close_stdout@@Base+0x330>
   136cc:	mov	r0, #1
   136d0:	bl	11418 <close@plt>
   136d4:	b	13680 <close_stdout@@Base+0x328>
   136d8:	bl	11340 <__errno_location@plt>
   136dc:	ldr	r5, [r0]
   136e0:	mov	r7, r0
   136e4:	mov	r0, #2
   136e8:	bl	11418 <close@plt>
   136ec:	b	13678 <close_stdout@@Base+0x320>
   136f0:	mov	r5, #0
   136f4:	b	135ec <close_stdout@@Base+0x294>
   136f8:	mov	r5, #0
   136fc:	mov	r6, r5
   13700:	b	13600 <close_stdout@@Base+0x2a8>
   13704:	push	{r3, lr}
   13708:	mov	r1, #0
   1370c:	bl	113c4 <setlocale@plt>
   13710:	cmp	r0, #0
   13714:	beq	13750 <close_stdout@@Base+0x3f8>
   13718:	ldrb	r3, [r0]
   1371c:	cmp	r3, #67	; 0x43
   13720:	bne	13738 <close_stdout@@Base+0x3e0>
   13724:	ldrb	r3, [r0, #1]
   13728:	cmp	r3, #0
   1372c:	bne	13738 <close_stdout@@Base+0x3e0>
   13730:	mov	r0, r3
   13734:	pop	{r3, pc}
   13738:	ldr	r1, [pc, #24]	; 13758 <close_stdout@@Base+0x400>
   1373c:	add	r1, pc, r1
   13740:	bl	11160 <strcmp@plt>
   13744:	adds	r0, r0, #0
   13748:	movne	r0, #1
   1374c:	pop	{r3, pc}
   13750:	mov	r0, #1
   13754:	pop	{r3, pc}
   13758:			; <UNDEFINED> instruction: 0x00003dbc
   1375c:	mov	r1, #0
   13760:	mov	r2, #20
   13764:	b	11358 <memset@plt>
   13768:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1376c:	mov	r5, r1
   13770:	ldr	r3, [r1]
   13774:	mov	r9, r0
   13778:	ldr	sl, [r0, #8]
   1377c:	mov	r7, r2
   13780:	tst	r3, #16
   13784:	ldr	r8, [r0]
   13788:	moveq	r4, sl
   1378c:	add	r8, sl, r8
   13790:	beq	137a8 <close_stdout@@Base+0x450>
   13794:	b	1380c <close_stdout@@Base+0x4b4>
   13798:	cmp	r6, r7
   1379c:	strb	r6, [r4]
   137a0:	add	r4, r4, #1
   137a4:	beq	137fc <close_stdout@@Base+0x4a4>
   137a8:	ldmib	r5, {r3, ip}
   137ac:	cmp	r3, ip
   137b0:	bcs	13814 <close_stdout@@Base+0x4bc>
   137b4:	add	ip, r3, #1
   137b8:	str	ip, [r5, #4]
   137bc:	ldrb	r6, [r3]
   137c0:	cmp	r4, r8
   137c4:	bne	13798 <close_stdout@@Base+0x440>
   137c8:	mov	r0, sl
   137cc:	mov	r1, r9
   137d0:	ldr	r4, [r9]
   137d4:	bl	15844 <close_stdout@@Base+0x24ec>
   137d8:	ldr	r8, [r9]
   137dc:	cmp	r6, r7
   137e0:	add	r4, r0, r4
   137e4:	str	r0, [r9, #8]
   137e8:	mov	sl, r0
   137ec:	add	r8, r0, r8
   137f0:	strb	r6, [r4]
   137f4:	add	r4, r4, #1
   137f8:	bne	137a8 <close_stdout@@Base+0x450>
   137fc:	rsb	r4, sl, r4
   13800:	mov	r0, r9
   13804:	str	r4, [r9, #4]
   13808:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1380c:	mov	r0, #0
   13810:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13814:	mov	r0, r5
   13818:	bl	113ac <__uflow@plt>
   1381c:	cmn	r0, #1
   13820:	mov	r6, r0
   13824:	bne	137c0 <close_stdout@@Base+0x468>
   13828:	cmp	r4, sl
   1382c:	beq	1380c <close_stdout@@Base+0x4b4>
   13830:	ldr	r3, [r5]
   13834:	tst	r3, #32
   13838:	bne	1380c <close_stdout@@Base+0x4b4>
   1383c:	ldrb	r3, [r4, #-1]
   13840:	cmp	r3, r7
   13844:	beq	137fc <close_stdout@@Base+0x4a4>
   13848:	mov	r6, r7
   1384c:	b	137c0 <close_stdout@@Base+0x468>
   13850:	mov	r2, #10
   13854:	b	13768 <close_stdout@@Base+0x410>
   13858:	ldr	r0, [r0, #8]
   1385c:	b	11190 <free@plt>
   13860:	ldr	r3, [pc, #132]	; 138ec <close_stdout@@Base+0x594>
   13864:	ldr	r2, [pc, #132]	; 138f0 <close_stdout@@Base+0x598>
   13868:	add	r3, pc, r3
   1386c:	ldr	r0, [pc, #128]	; 138f4 <close_stdout@@Base+0x59c>
   13870:	push	{r4, lr}
   13874:	sub	sp, sp, #8
   13878:	ldr	r4, [r3, r2]
   1387c:	add	r0, pc, r0
   13880:	ldr	r3, [r4]
   13884:	str	r3, [sp, #4]
   13888:	bl	11298 <getenv@plt>
   1388c:	subs	r3, r0, #0
   13890:	beq	138a0 <close_stdout@@Base+0x548>
   13894:	ldrb	r3, [r3]
   13898:	cmp	r3, #0
   1389c:	bne	138c0 <close_stdout@@Base+0x568>
   138a0:	mov	r0, #3504	; 0xdb0
   138a4:	movt	r0, #3
   138a8:	ldr	r2, [sp, #4]
   138ac:	ldr	r3, [r4]
   138b0:	cmp	r2, r3
   138b4:	bne	138e8 <close_stdout@@Base+0x590>
   138b8:	add	sp, sp, #8
   138bc:	pop	{r4, pc}
   138c0:	mov	r2, #10
   138c4:	mov	r1, sp
   138c8:	bl	1116c <strtol@plt>
   138cc:	ldr	r2, [sp]
   138d0:	mov	r3, #3504	; 0xdb0
   138d4:	movt	r3, #3
   138d8:	ldrb	r2, [r2]
   138dc:	cmp	r2, #0
   138e0:	movne	r0, r3
   138e4:	b	138a8 <close_stdout@@Base+0x550>
   138e8:	bl	111f0 <__stack_chk_fail@plt>
   138ec:	muleq	r1, r0, r7
   138f0:	andeq	r0, r0, r4, lsl r1
   138f4:	andeq	r3, r0, r4, lsl #25
   138f8:	push	{r3, r4, r5, r6, r7, lr}
   138fc:	subs	r4, r0, #0
   13900:	ldr	r5, [pc, #172]	; 139b4 <close_stdout@@Base+0x65c>
   13904:	add	r5, pc, r5
   13908:	beq	13990 <close_stdout@@Base+0x638>
   1390c:	mov	r1, #47	; 0x2f
   13910:	bl	113d0 <strrchr@plt>
   13914:	subs	r6, r0, #0
   13918:	beq	13974 <close_stdout@@Base+0x61c>
   1391c:	add	r7, r6, #1
   13920:	rsb	r3, r4, r7
   13924:	cmp	r3, #6
   13928:	ble	13974 <close_stdout@@Base+0x61c>
   1392c:	ldr	r1, [pc, #132]	; 139b8 <close_stdout@@Base+0x660>
   13930:	sub	r0, r6, #6
   13934:	mov	r2, #7
   13938:	add	r1, pc, r1
   1393c:	bl	11400 <strncmp@plt>
   13940:	cmp	r0, #0
   13944:	bne	13974 <close_stdout@@Base+0x61c>
   13948:	ldr	r1, [pc, #108]	; 139bc <close_stdout@@Base+0x664>
   1394c:	mov	r0, r7
   13950:	mov	r2, #3
   13954:	add	r1, pc, r1
   13958:	bl	11400 <strncmp@plt>
   1395c:	cmp	r0, #0
   13960:	movne	r4, r7
   13964:	ldreq	r3, [pc, #84]	; 139c0 <close_stdout@@Base+0x668>
   13968:	addeq	r4, r6, #4
   1396c:	ldreq	r3, [r5, r3]
   13970:	streq	r4, [r3]
   13974:	ldr	r2, [pc, #72]	; 139c4 <close_stdout@@Base+0x66c>
   13978:	ldr	r3, [pc, #72]	; 139c8 <close_stdout@@Base+0x670>
   1397c:	ldr	r2, [r5, r2]
   13980:	str	r4, [r2]
   13984:	ldr	r3, [r5, r3]
   13988:	str	r4, [r3]
   1398c:	pop	{r3, r4, r5, r6, r7, pc}
   13990:	ldr	r3, [pc, #52]	; 139cc <close_stdout@@Base+0x674>
   13994:	mov	r1, #1
   13998:	ldr	r0, [pc, #48]	; 139d0 <close_stdout@@Base+0x678>
   1399c:	mov	r2, #55	; 0x37
   139a0:	ldr	r3, [r5, r3]
   139a4:	add	r0, pc, r0
   139a8:	ldr	r3, [r3]
   139ac:	bl	1122c <fwrite@plt>
   139b0:	bl	1140c <abort@plt>
   139b4:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   139b8:	andeq	r3, r0, r0, lsl ip
   139bc:	strdeq	r3, [r0], -ip
   139c0:	andeq	r0, r0, ip, asr #2
   139c4:	andeq	r0, r0, r4, asr #2
   139c8:	andeq	r0, r0, r0, asr #2
   139cc:	andeq	r0, r0, r0, lsr #2
   139d0:	andeq	r3, r0, ip, ror #22
   139d4:	push	{r3, lr}
   139d8:	mov	r3, r0
   139dc:	mov	r2, #0
   139e0:	cmp	r1, #8
   139e4:	str	r2, [r3], #4
   139e8:	add	r3, r3, #4
   139ec:	str	r2, [r0, #4]
   139f0:	str	r2, [r3], #4
   139f4:	str	r2, [r3], #4
   139f8:	str	r2, [r3], #4
   139fc:	str	r2, [r3], #4
   13a00:	str	r2, [r3], #4
   13a04:	str	r2, [r3], #4
   13a08:	str	r2, [r3], #4
   13a0c:	str	r2, [r3], #4
   13a10:	str	r2, [r3], #4
   13a14:	str	r2, [r3]
   13a18:	beq	13a24 <close_stdout@@Base+0x6cc>
   13a1c:	str	r1, [r0]
   13a20:	pop	{r3, pc}
   13a24:	bl	1140c <abort@plt>
   13a28:	push	{r4, r5, r6, lr}
   13a2c:	mov	r4, r0
   13a30:	mov	r6, r1
   13a34:	mov	r0, #0
   13a38:	mov	r1, r4
   13a3c:	mov	r2, #5
   13a40:	bl	111e4 <dcgettext@plt>
   13a44:	cmp	r0, r4
   13a48:	mov	r5, r0
   13a4c:	beq	13a54 <close_stdout@@Base+0x6fc>
   13a50:	pop	{r4, r5, r6, pc}
   13a54:	bl	1624c <close_stdout@@Base+0x2ef4>
   13a58:	ldrb	r3, [r0]
   13a5c:	bic	r3, r3, #32
   13a60:	cmp	r3, #85	; 0x55
   13a64:	bne	13ad8 <close_stdout@@Base+0x780>
   13a68:	ldrb	r3, [r0, #1]
   13a6c:	bic	r3, r3, #32
   13a70:	cmp	r3, #84	; 0x54
   13a74:	bne	13ac4 <close_stdout@@Base+0x76c>
   13a78:	ldrb	r3, [r0, #2]
   13a7c:	bic	r3, r3, #32
   13a80:	cmp	r3, #70	; 0x46
   13a84:	bne	13ac4 <close_stdout@@Base+0x76c>
   13a88:	ldrb	r3, [r0, #3]
   13a8c:	cmp	r3, #45	; 0x2d
   13a90:	bne	13ac4 <close_stdout@@Base+0x76c>
   13a94:	ldrb	r3, [r0, #4]
   13a98:	cmp	r3, #56	; 0x38
   13a9c:	bne	13ac4 <close_stdout@@Base+0x76c>
   13aa0:	ldrb	r3, [r0, #5]
   13aa4:	cmp	r3, #0
   13aa8:	bne	13ac4 <close_stdout@@Base+0x76c>
   13aac:	ldrb	r3, [r5]
   13ab0:	cmp	r3, #96	; 0x60
   13ab4:	beq	13b50 <close_stdout@@Base+0x7f8>
   13ab8:	ldr	r0, [pc, #180]	; 13b74 <close_stdout@@Base+0x81c>
   13abc:	add	r0, pc, r0
   13ac0:	pop	{r4, r5, r6, pc}
   13ac4:	cmp	r6, #7
   13ac8:	beq	13b5c <close_stdout@@Base+0x804>
   13acc:	ldr	r0, [pc, #164]	; 13b78 <close_stdout@@Base+0x820>
   13ad0:	add	r0, pc, r0
   13ad4:	pop	{r4, r5, r6, pc}
   13ad8:	cmp	r3, #71	; 0x47
   13adc:	bne	13ac4 <close_stdout@@Base+0x76c>
   13ae0:	ldrb	r3, [r0, #1]
   13ae4:	bic	r3, r3, #32
   13ae8:	cmp	r3, #66	; 0x42
   13aec:	bne	13ac4 <close_stdout@@Base+0x76c>
   13af0:	ldrb	r3, [r0, #2]
   13af4:	cmp	r3, #49	; 0x31
   13af8:	bne	13ac4 <close_stdout@@Base+0x76c>
   13afc:	ldrb	r3, [r0, #3]
   13b00:	cmp	r3, #56	; 0x38
   13b04:	bne	13ac4 <close_stdout@@Base+0x76c>
   13b08:	ldrb	r3, [r0, #4]
   13b0c:	cmp	r3, #48	; 0x30
   13b10:	bne	13ac4 <close_stdout@@Base+0x76c>
   13b14:	ldrb	r3, [r0, #5]
   13b18:	cmp	r3, #51	; 0x33
   13b1c:	bne	13ac4 <close_stdout@@Base+0x76c>
   13b20:	ldrb	r3, [r0, #6]
   13b24:	cmp	r3, #48	; 0x30
   13b28:	bne	13ac4 <close_stdout@@Base+0x76c>
   13b2c:	ldrb	r3, [r0, #7]
   13b30:	cmp	r3, #0
   13b34:	bne	13ac4 <close_stdout@@Base+0x76c>
   13b38:	ldrb	r3, [r5]
   13b3c:	cmp	r3, #96	; 0x60
   13b40:	beq	13b68 <close_stdout@@Base+0x810>
   13b44:	ldr	r0, [pc, #48]	; 13b7c <close_stdout@@Base+0x824>
   13b48:	add	r0, pc, r0
   13b4c:	pop	{r4, r5, r6, pc}
   13b50:	ldr	r0, [pc, #40]	; 13b80 <close_stdout@@Base+0x828>
   13b54:	add	r0, pc, r0
   13b58:	pop	{r4, r5, r6, pc}
   13b5c:	ldr	r0, [pc, #32]	; 13b84 <close_stdout@@Base+0x82c>
   13b60:	add	r0, pc, r0
   13b64:	pop	{r4, r5, r6, pc}
   13b68:	ldr	r0, [pc, #24]	; 13b88 <close_stdout@@Base+0x830>
   13b6c:	add	r0, pc, r0
   13b70:	pop	{r4, r5, r6, pc}
   13b74:			; <UNDEFINED> instruction: 0x00003ab8
   13b78:	andeq	r3, r0, ip, lsr #21
   13b7c:	andeq	r3, r0, r0, lsr sl
   13b80:	andeq	r3, r0, r4, lsr sl
   13b84:	andeq	r3, r0, r0, lsr #20
   13b88:	andeq	r3, r0, r8, lsl sl
   13b8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b90:	sub	sp, sp, #124	; 0x7c
   13b94:	ldr	ip, [pc, #3304]	; 14884 <close_stdout@@Base+0x152c>
   13b98:	mov	sl, r1
   13b9c:	str	r0, [sp, #40]	; 0x28
   13ba0:	mov	r8, r3
   13ba4:	ldr	r0, [pc, #3292]	; 14888 <close_stdout@@Base+0x1530>
   13ba8:	add	ip, pc, ip
   13bac:	str	r2, [sp, #32]
   13bb0:	ldr	r1, [sp, #164]	; 0xa4
   13bb4:	mov	r3, ip
   13bb8:	ldr	r0, [ip, r0]
   13bbc:	ldr	r2, [sp, #172]	; 0xac
   13bc0:	ubfx	r1, r1, #1, #1
   13bc4:	str	r1, [sp, #36]	; 0x24
   13bc8:	str	r0, [sp, #56]	; 0x38
   13bcc:	ldr	r0, [sp, #168]	; 0xa8
   13bd0:	ldr	r1, [sp, #176]	; 0xb0
   13bd4:	str	r2, [sp, #72]	; 0x48
   13bd8:	str	r0, [sp, #48]	; 0x30
   13bdc:	ldr	r0, [sp, #56]	; 0x38
   13be0:	str	r1, [sp, #68]	; 0x44
   13be4:	ldr	r3, [r0]
   13be8:	str	r3, [sp, #116]	; 0x74
   13bec:	bl	11244 <__ctype_get_mb_cur_max@plt>
   13bf0:	ldr	r2, [sp, #160]	; 0xa0
   13bf4:	str	r0, [sp, #64]	; 0x40
   13bf8:	cmp	r2, #8
   13bfc:	addls	pc, pc, r2, lsl #2
   13c00:	b	14760 <close_stdout@@Base+0x1408>
   13c04:	b	13c28 <close_stdout@@Base+0x8d0>
   13c08:	b	14478 <close_stdout@@Base+0x1120>
   13c0c:	b	144a8 <close_stdout@@Base+0x1150>
   13c10:	b	14358 <close_stdout@@Base+0x1000>
   13c14:	b	14398 <close_stdout@@Base+0x1040>
   13c18:	b	143c4 <close_stdout@@Base+0x106c>
   13c1c:	b	143e4 <close_stdout@@Base+0x108c>
   13c20:	b	143e4 <close_stdout@@Base+0x108c>
   13c24:	b	143e4 <close_stdout@@Base+0x108c>
   13c28:	mov	r2, #0
   13c2c:	str	r2, [sp, #36]	; 0x24
   13c30:	mov	r9, r2
   13c34:	str	r2, [sp, #24]
   13c38:	str	r2, [sp, #28]
   13c3c:	str	r2, [sp, #52]	; 0x34
   13c40:	ldr	r0, [sp, #36]	; 0x24
   13c44:	mov	fp, #0
   13c48:	ldr	r1, [sp, #24]
   13c4c:	eor	r2, r0, #1
   13c50:	eor	r3, r1, #1
   13c54:	and	r3, r2, r3
   13c58:	and	r2, r1, r0
   13c5c:	str	r3, [sp, #44]	; 0x2c
   13c60:	str	r2, [sp, #76]	; 0x4c
   13c64:	cmn	r8, #1
   13c68:	beq	13fe8 <close_stdout@@Base+0xc90>
   13c6c:	subs	r3, fp, r8
   13c70:	movne	r3, #1
   13c74:	cmp	r3, #0
   13c78:	beq	14000 <close_stdout@@Base+0xca8>
   13c7c:	ldr	r3, [sp, #28]
   13c80:	ldr	r0, [sp, #24]
   13c84:	adds	r7, r3, #0
   13c88:	movne	r7, #1
   13c8c:	ands	r6, r7, r0
   13c90:	bne	144ec <close_stdout@@Base+0x1194>
   13c94:	ldr	r1, [sp, #32]
   13c98:	add	r5, r1, fp
   13c9c:	ldrb	r4, [r5]
   13ca0:	cmp	r4, #126	; 0x7e
   13ca4:	addls	pc, pc, r4, lsl #2
   13ca8:	b	1426c <close_stdout@@Base+0xf14>
   13cac:	b	14178 <close_stdout@@Base+0xe20>
   13cb0:	b	1426c <close_stdout@@Base+0xf14>
   13cb4:	b	1426c <close_stdout@@Base+0xf14>
   13cb8:	b	1426c <close_stdout@@Base+0xf14>
   13cbc:	b	1426c <close_stdout@@Base+0xf14>
   13cc0:	b	1426c <close_stdout@@Base+0xf14>
   13cc4:	b	1426c <close_stdout@@Base+0xf14>
   13cc8:	b	14160 <close_stdout@@Base+0xe08>
   13ccc:	b	14148 <close_stdout@@Base+0xdf0>
   13cd0:	b	14170 <close_stdout@@Base+0xe18>
   13cd4:	b	14168 <close_stdout@@Base+0xe10>
   13cd8:	b	14158 <close_stdout@@Base+0xe00>
   13cdc:	b	14150 <close_stdout@@Base+0xdf8>
   13ce0:	b	14114 <close_stdout@@Base+0xdbc>
   13ce4:	b	1426c <close_stdout@@Base+0xf14>
   13ce8:	b	1426c <close_stdout@@Base+0xf14>
   13cec:	b	1426c <close_stdout@@Base+0xf14>
   13cf0:	b	1426c <close_stdout@@Base+0xf14>
   13cf4:	b	1426c <close_stdout@@Base+0xf14>
   13cf8:	b	1426c <close_stdout@@Base+0xf14>
   13cfc:	b	1426c <close_stdout@@Base+0xf14>
   13d00:	b	1426c <close_stdout@@Base+0xf14>
   13d04:	b	1426c <close_stdout@@Base+0xf14>
   13d08:	b	1426c <close_stdout@@Base+0xf14>
   13d0c:	b	1426c <close_stdout@@Base+0xf14>
   13d10:	b	1426c <close_stdout@@Base+0xf14>
   13d14:	b	1426c <close_stdout@@Base+0xf14>
   13d18:	b	1426c <close_stdout@@Base+0xf14>
   13d1c:	b	1426c <close_stdout@@Base+0xf14>
   13d20:	b	1426c <close_stdout@@Base+0xf14>
   13d24:	b	1426c <close_stdout@@Base+0xf14>
   13d28:	b	1426c <close_stdout@@Base+0xf14>
   13d2c:	b	140a0 <close_stdout@@Base+0xd48>
   13d30:	b	140a0 <close_stdout@@Base+0xd48>
   13d34:	b	140a0 <close_stdout@@Base+0xd48>
   13d38:	b	14098 <close_stdout@@Base+0xd40>
   13d3c:	b	140a0 <close_stdout@@Base+0xd48>
   13d40:	b	13f74 <close_stdout@@Base+0xc1c>
   13d44:	b	140a0 <close_stdout@@Base+0xd48>
   13d48:	b	14214 <close_stdout@@Base+0xebc>
   13d4c:	b	140a0 <close_stdout@@Base+0xd48>
   13d50:	b	140a0 <close_stdout@@Base+0xd48>
   13d54:	b	140a0 <close_stdout@@Base+0xd48>
   13d58:	b	13f74 <close_stdout@@Base+0xc1c>
   13d5c:	b	13f74 <close_stdout@@Base+0xc1c>
   13d60:	b	13f74 <close_stdout@@Base+0xc1c>
   13d64:	b	13f74 <close_stdout@@Base+0xc1c>
   13d68:	b	13f74 <close_stdout@@Base+0xc1c>
   13d6c:	b	13f74 <close_stdout@@Base+0xc1c>
   13d70:	b	13f74 <close_stdout@@Base+0xc1c>
   13d74:	b	13f74 <close_stdout@@Base+0xc1c>
   13d78:	b	13f74 <close_stdout@@Base+0xc1c>
   13d7c:	b	13f74 <close_stdout@@Base+0xc1c>
   13d80:	b	13f74 <close_stdout@@Base+0xc1c>
   13d84:	b	13f74 <close_stdout@@Base+0xc1c>
   13d88:	b	13f74 <close_stdout@@Base+0xc1c>
   13d8c:	b	13f74 <close_stdout@@Base+0xc1c>
   13d90:	b	13f74 <close_stdout@@Base+0xc1c>
   13d94:	b	13f74 <close_stdout@@Base+0xc1c>
   13d98:	b	140a0 <close_stdout@@Base+0xd48>
   13d9c:	b	140a0 <close_stdout@@Base+0xd48>
   13da0:	b	140a0 <close_stdout@@Base+0xd48>
   13da4:	b	140a0 <close_stdout@@Base+0xd48>
   13da8:	b	13ea8 <close_stdout@@Base+0xb50>
   13dac:	b	1426c <close_stdout@@Base+0xf14>
   13db0:	b	13f74 <close_stdout@@Base+0xc1c>
   13db4:	b	13f74 <close_stdout@@Base+0xc1c>
   13db8:	b	13f74 <close_stdout@@Base+0xc1c>
   13dbc:	b	13f74 <close_stdout@@Base+0xc1c>
   13dc0:	b	13f74 <close_stdout@@Base+0xc1c>
   13dc4:	b	13f74 <close_stdout@@Base+0xc1c>
   13dc8:	b	13f74 <close_stdout@@Base+0xc1c>
   13dcc:	b	13f74 <close_stdout@@Base+0xc1c>
   13dd0:	b	13f74 <close_stdout@@Base+0xc1c>
   13dd4:	b	13f74 <close_stdout@@Base+0xc1c>
   13dd8:	b	13f74 <close_stdout@@Base+0xc1c>
   13ddc:	b	13f74 <close_stdout@@Base+0xc1c>
   13de0:	b	13f74 <close_stdout@@Base+0xc1c>
   13de4:	b	13f74 <close_stdout@@Base+0xc1c>
   13de8:	b	13f74 <close_stdout@@Base+0xc1c>
   13dec:	b	13f74 <close_stdout@@Base+0xc1c>
   13df0:	b	13f74 <close_stdout@@Base+0xc1c>
   13df4:	b	13f74 <close_stdout@@Base+0xc1c>
   13df8:	b	13f74 <close_stdout@@Base+0xc1c>
   13dfc:	b	13f74 <close_stdout@@Base+0xc1c>
   13e00:	b	13f74 <close_stdout@@Base+0xc1c>
   13e04:	b	13f74 <close_stdout@@Base+0xc1c>
   13e08:	b	13f74 <close_stdout@@Base+0xc1c>
   13e0c:	b	13f74 <close_stdout@@Base+0xc1c>
   13e10:	b	13f74 <close_stdout@@Base+0xc1c>
   13e14:	b	13f74 <close_stdout@@Base+0xc1c>
   13e18:	b	140a0 <close_stdout@@Base+0xd48>
   13e1c:	b	141f8 <close_stdout@@Base+0xea0>
   13e20:	b	13f74 <close_stdout@@Base+0xc1c>
   13e24:	b	140a0 <close_stdout@@Base+0xd48>
   13e28:	b	13f74 <close_stdout@@Base+0xc1c>
   13e2c:	b	140a0 <close_stdout@@Base+0xd48>
   13e30:	b	13f74 <close_stdout@@Base+0xc1c>
   13e34:	b	13f74 <close_stdout@@Base+0xc1c>
   13e38:	b	13f74 <close_stdout@@Base+0xc1c>
   13e3c:	b	13f74 <close_stdout@@Base+0xc1c>
   13e40:	b	13f74 <close_stdout@@Base+0xc1c>
   13e44:	b	13f74 <close_stdout@@Base+0xc1c>
   13e48:	b	13f74 <close_stdout@@Base+0xc1c>
   13e4c:	b	13f74 <close_stdout@@Base+0xc1c>
   13e50:	b	13f74 <close_stdout@@Base+0xc1c>
   13e54:	b	13f74 <close_stdout@@Base+0xc1c>
   13e58:	b	13f74 <close_stdout@@Base+0xc1c>
   13e5c:	b	13f74 <close_stdout@@Base+0xc1c>
   13e60:	b	13f74 <close_stdout@@Base+0xc1c>
   13e64:	b	13f74 <close_stdout@@Base+0xc1c>
   13e68:	b	13f74 <close_stdout@@Base+0xc1c>
   13e6c:	b	13f74 <close_stdout@@Base+0xc1c>
   13e70:	b	13f74 <close_stdout@@Base+0xc1c>
   13e74:	b	13f74 <close_stdout@@Base+0xc1c>
   13e78:	b	13f74 <close_stdout@@Base+0xc1c>
   13e7c:	b	13f74 <close_stdout@@Base+0xc1c>
   13e80:	b	13f74 <close_stdout@@Base+0xc1c>
   13e84:	b	13f74 <close_stdout@@Base+0xc1c>
   13e88:	b	13f74 <close_stdout@@Base+0xc1c>
   13e8c:	b	13f74 <close_stdout@@Base+0xc1c>
   13e90:	b	13f74 <close_stdout@@Base+0xc1c>
   13e94:	b	13f74 <close_stdout@@Base+0xc1c>
   13e98:	b	14080 <close_stdout@@Base+0xd28>
   13e9c:	b	140a0 <close_stdout@@Base+0xd48>
   13ea0:	b	14080 <close_stdout@@Base+0xd28>
   13ea4:	b	14098 <close_stdout@@Base+0xd40>
   13ea8:	ldr	r3, [sp, #160]	; 0xa0
   13eac:	cmp	r3, #2
   13eb0:	beq	1473c <close_stdout@@Base+0x13e4>
   13eb4:	cmp	r3, #3
   13eb8:	bne	13f74 <close_stdout@@Base+0xc1c>
   13ebc:	ldr	r1, [sp, #164]	; 0xa4
   13ec0:	tst	r1, #4
   13ec4:	beq	13f74 <close_stdout@@Base+0xc1c>
   13ec8:	add	r3, fp, #2
   13ecc:	cmp	r8, r3
   13ed0:	bls	13f74 <close_stdout@@Base+0xc1c>
   13ed4:	ldrb	r2, [r5, #1]
   13ed8:	mov	r1, #1
   13edc:	cmp	r2, #63	; 0x3f
   13ee0:	bne	13f74 <close_stdout@@Base+0xc1c>
   13ee4:	ldr	r0, [sp, #32]
   13ee8:	ldrb	ip, [r0, r3]
   13eec:	sub	r0, ip, #33	; 0x21
   13ef0:	uxtb	r0, r0
   13ef4:	cmp	r0, #29
   13ef8:	bhi	13f74 <close_stdout@@Base+0xc1c>
   13efc:	lsl	r1, r1, r0
   13f00:	movw	r0, #20929	; 0x51c1
   13f04:	movt	r0, #14336	; 0x3800
   13f08:	and	r0, r1, r0
   13f0c:	cmp	r0, #0
   13f10:	beq	13f74 <close_stdout@@Base+0xc1c>
   13f14:	ldr	r1, [sp, #36]	; 0x24
   13f18:	cmp	r1, #0
   13f1c:	bne	140bc <close_stdout@@Base+0xd64>
   13f20:	cmp	r9, sl
   13f24:	mov	r4, ip
   13f28:	mov	fp, r3
   13f2c:	ldrcc	r0, [sp, #40]	; 0x28
   13f30:	strbcc	r2, [r0, r9]
   13f34:	add	r2, r9, #1
   13f38:	cmp	sl, r2
   13f3c:	ldrhi	r0, [sp, #40]	; 0x28
   13f40:	movhi	r1, #34	; 0x22
   13f44:	strbhi	r1, [r0, r2]
   13f48:	add	r2, r9, #2
   13f4c:	cmp	sl, r2
   13f50:	ldrhi	r0, [sp, #40]	; 0x28
   13f54:	movhi	r1, #34	; 0x22
   13f58:	strbhi	r1, [r0, r2]
   13f5c:	add	r2, r9, #3
   13f60:	cmp	sl, r2
   13f64:	add	r9, r9, #4
   13f68:	ldrhi	r0, [sp, #40]	; 0x28
   13f6c:	movhi	r1, #63	; 0x3f
   13f70:	strbhi	r1, [r0, r2]
   13f74:	ldr	r0, [sp, #44]	; 0x2c
   13f78:	cmp	r0, #0
   13f7c:	bne	13fa4 <close_stdout@@Base+0xc4c>
   13f80:	ldr	r1, [sp, #48]	; 0x30
   13f84:	cmp	r1, #0
   13f88:	beq	13fa4 <close_stdout@@Base+0xc4c>
   13f8c:	ubfx	r2, r4, #5, #8
   13f90:	and	r3, r4, #31
   13f94:	ldr	r2, [r1, r2, lsl #2]
   13f98:	lsr	r3, r2, r3
   13f9c:	tst	r3, #1
   13fa0:	bne	13fac <close_stdout@@Base+0xc54>
   13fa4:	cmp	r6, #0
   13fa8:	beq	13fcc <close_stdout@@Base+0xc74>
   13fac:	ldr	r2, [sp, #36]	; 0x24
   13fb0:	cmp	r2, #0
   13fb4:	bne	140bc <close_stdout@@Base+0xd64>
   13fb8:	cmp	r9, sl
   13fbc:	ldrcc	r0, [sp, #40]	; 0x28
   13fc0:	movcc	r3, #92	; 0x5c
   13fc4:	strbcc	r3, [r0, r9]
   13fc8:	add	r9, r9, #1
   13fcc:	add	fp, fp, #1
   13fd0:	cmp	r9, sl
   13fd4:	ldrcc	r1, [sp, #40]	; 0x28
   13fd8:	strbcc	r4, [r1, r9]
   13fdc:	cmn	r8, #1
   13fe0:	add	r9, r9, #1
   13fe4:	bne	13c6c <close_stdout@@Base+0x914>
   13fe8:	ldr	r2, [sp, #32]
   13fec:	ldrb	r3, [r2, fp]
   13ff0:	adds	r3, r3, #0
   13ff4:	movne	r3, #1
   13ff8:	cmp	r3, #0
   13ffc:	bne	13c7c <close_stdout@@Base+0x924>
   14000:	ldr	r3, [sp, #160]	; 0xa0
   14004:	cmp	r9, #0
   14008:	cmpeq	r3, #2
   1400c:	bne	1401c <close_stdout@@Base+0xcc4>
   14010:	ldr	r0, [sp, #36]	; 0x24
   14014:	cmp	r0, #0
   14018:	bne	140bc <close_stdout@@Base+0xd64>
   1401c:	ldr	r1, [sp, #36]	; 0x24
   14020:	ldr	r2, [sp, #52]	; 0x34
   14024:	eor	r3, r1, #1
   14028:	cmp	r2, #0
   1402c:	moveq	r3, #0
   14030:	andne	r3, r3, #1
   14034:	cmp	r3, #0
   14038:	beq	14064 <close_stdout@@Base+0xd0c>
   1403c:	ldrb	r3, [r2]
   14040:	cmp	r3, #0
   14044:	beq	14064 <close_stdout@@Base+0xd0c>
   14048:	ldr	r1, [sp, #40]	; 0x28
   1404c:	cmp	sl, r9
   14050:	strbhi	r3, [r1, r9]
   14054:	ldrb	r3, [r2, #1]!
   14058:	add	r9, r9, #1
   1405c:	cmp	r3, #0
   14060:	bne	1404c <close_stdout@@Base+0xcf4>
   14064:	cmp	r9, sl
   14068:	movcs	r0, r9
   1406c:	ldrcc	r1, [sp, #40]	; 0x28
   14070:	movcc	r3, #0
   14074:	movcc	r0, r9
   14078:	strbcc	r3, [r1, r9]
   1407c:	b	140f8 <close_stdout@@Base+0xda0>
   14080:	cmn	r8, #1
   14084:	beq	1474c <close_stdout@@Base+0x13f4>
   14088:	subs	r3, r8, #1
   1408c:	movne	r3, #1
   14090:	cmp	r3, #0
   14094:	bne	13f74 <close_stdout@@Base+0xc1c>
   14098:	cmp	fp, #0
   1409c:	bne	13f74 <close_stdout@@Base+0xc1c>
   140a0:	ldr	r3, [sp, #36]	; 0x24
   140a4:	ldr	r0, [sp, #160]	; 0xa0
   140a8:	cmp	r0, #2
   140ac:	movne	r3, #0
   140b0:	andeq	r3, r3, #1
   140b4:	cmp	r3, #0
   140b8:	beq	13f74 <close_stdout@@Base+0xc1c>
   140bc:	ldr	r2, [sp, #164]	; 0xa4
   140c0:	mov	ip, #0
   140c4:	ldr	r0, [sp, #160]	; 0xa0
   140c8:	bic	r3, r2, #2
   140cc:	ldr	r1, [sp, #72]	; 0x48
   140d0:	ldr	r2, [sp, #68]	; 0x44
   140d4:	stm	sp, {r0, r3}
   140d8:	mov	r3, r8
   140dc:	str	r1, [sp, #12]
   140e0:	mov	r1, sl
   140e4:	str	r2, [sp, #16]
   140e8:	ldr	r0, [sp, #40]	; 0x28
   140ec:	ldr	r2, [sp, #32]
   140f0:	str	ip, [sp, #8]
   140f4:	bl	13b8c <close_stdout@@Base+0x834>
   140f8:	ldr	r1, [sp, #56]	; 0x38
   140fc:	ldr	r2, [sp, #116]	; 0x74
   14100:	ldr	r3, [r1]
   14104:	cmp	r2, r3
   14108:	bne	1483c <close_stdout@@Base+0x14e4>
   1410c:	add	sp, sp, #124	; 0x7c
   14110:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14114:	mov	r3, #114	; 0x72
   14118:	ldr	r2, [sp, #36]	; 0x24
   1411c:	ldr	r0, [sp, #160]	; 0xa0
   14120:	cmp	r0, #2
   14124:	movne	r2, #0
   14128:	andeq	r2, r2, #1
   1412c:	cmp	r2, #0
   14130:	bne	140bc <close_stdout@@Base+0xd64>
   14134:	ldr	r1, [sp, #24]
   14138:	cmp	r1, #0
   1413c:	beq	13f74 <close_stdout@@Base+0xc1c>
   14140:	mov	r4, r3
   14144:	b	13fac <close_stdout@@Base+0xc54>
   14148:	mov	r3, #98	; 0x62
   1414c:	b	14134 <close_stdout@@Base+0xddc>
   14150:	mov	r3, #102	; 0x66
   14154:	b	14134 <close_stdout@@Base+0xddc>
   14158:	mov	r3, #118	; 0x76
   1415c:	b	14134 <close_stdout@@Base+0xddc>
   14160:	mov	r3, #97	; 0x61
   14164:	b	14134 <close_stdout@@Base+0xddc>
   14168:	mov	r3, #110	; 0x6e
   1416c:	b	14118 <close_stdout@@Base+0xdc0>
   14170:	mov	r3, #116	; 0x74
   14174:	b	14118 <close_stdout@@Base+0xdc0>
   14178:	ldr	r2, [sp, #24]
   1417c:	cmp	r2, #0
   14180:	beq	14728 <close_stdout@@Base+0x13d0>
   14184:	ldr	r3, [sp, #36]	; 0x24
   14188:	cmp	r3, #0
   1418c:	bne	140bc <close_stdout@@Base+0xd64>
   14190:	cmp	r9, sl
   14194:	add	r2, r9, #1
   14198:	ldrcc	r0, [sp, #40]	; 0x28
   1419c:	movcc	r3, #92	; 0x5c
   141a0:	strbcc	r3, [r0, r9]
   141a4:	add	r3, fp, #1
   141a8:	cmp	r8, r3
   141ac:	bls	141ec <close_stdout@@Base+0xe94>
   141b0:	ldr	r1, [sp, #32]
   141b4:	ldrb	r3, [r1, r3]
   141b8:	sub	r3, r3, #48	; 0x30
   141bc:	cmp	r3, #9
   141c0:	bhi	141ec <close_stdout@@Base+0xe94>
   141c4:	cmp	sl, r2
   141c8:	ldrhi	r0, [sp, #40]	; 0x28
   141cc:	movhi	r3, #48	; 0x30
   141d0:	strbhi	r3, [r0, r2]
   141d4:	add	r3, r9, #2
   141d8:	cmp	sl, r3
   141dc:	ldrhi	r1, [sp, #40]	; 0x28
   141e0:	movhi	r2, #48	; 0x30
   141e4:	strbhi	r2, [r1, r3]
   141e8:	add	r2, r9, #3
   141ec:	mov	r9, r2
   141f0:	mov	r4, #48	; 0x30
   141f4:	b	13f80 <close_stdout@@Base+0xc28>
   141f8:	ldr	r1, [sp, #76]	; 0x4c
   141fc:	cmp	r1, #0
   14200:	beq	1420c <close_stdout@@Base+0xeb4>
   14204:	cmp	r7, #0
   14208:	bne	13fcc <close_stdout@@Base+0xc74>
   1420c:	mov	r3, r4
   14210:	b	14118 <close_stdout@@Base+0xdc0>
   14214:	ldr	r1, [sp, #160]	; 0xa0
   14218:	cmp	r1, #2
   1421c:	bne	13f74 <close_stdout@@Base+0xc1c>
   14220:	ldr	r2, [sp, #36]	; 0x24
   14224:	cmp	r2, #0
   14228:	bne	140bc <close_stdout@@Base+0xd64>
   1422c:	cmp	r9, sl
   14230:	ldrcc	r0, [sp, #40]	; 0x28
   14234:	movcc	r3, #39	; 0x27
   14238:	strbcc	r3, [r0, r9]
   1423c:	add	r3, r9, #1
   14240:	cmp	sl, r3
   14244:	ldrhi	r1, [sp, #40]	; 0x28
   14248:	movhi	r2, #92	; 0x5c
   1424c:	strbhi	r2, [r1, r3]
   14250:	add	r3, r9, #2
   14254:	cmp	sl, r3
   14258:	add	r9, r9, #3
   1425c:	ldrhi	r0, [sp, #40]	; 0x28
   14260:	movhi	r2, #39	; 0x27
   14264:	strbhi	r2, [r0, r3]
   14268:	b	13f74 <close_stdout@@Base+0xc1c>
   1426c:	ldr	r1, [sp, #64]	; 0x40
   14270:	cmp	r1, #1
   14274:	bne	1456c <close_stdout@@Base+0x1214>
   14278:	bl	112f8 <__ctype_b_loc@plt>
   1427c:	ldr	r2, [sp, #64]	; 0x40
   14280:	sxth	r3, r4
   14284:	str	r2, [sp, #60]	; 0x3c
   14288:	lsl	r3, r3, #1
   1428c:	ldr	r2, [r0]
   14290:	ldrh	r2, [r2, r3]
   14294:	eor	r2, r2, #16384	; 0x4000
   14298:	ubfx	r2, r2, #14, #1
   1429c:	ldr	r1, [sp, #24]
   142a0:	ands	r2, r2, r1
   142a4:	beq	13f74 <close_stdout@@Base+0xc1c>
   142a8:	ldr	r3, [sp, #60]	; 0x3c
   142ac:	mov	r0, #92	; 0x5c
   142b0:	ldr	r7, [sp, #36]	; 0x24
   142b4:	add	r1, r3, fp
   142b8:	str	r8, [sp, #60]	; 0x3c
   142bc:	ldr	r3, [sp, #40]	; 0x28
   142c0:	b	14324 <close_stdout@@Base+0xfcc>
   142c4:	cmp	r7, #0
   142c8:	bne	14764 <close_stdout@@Base+0x140c>
   142cc:	add	ip, r9, #1
   142d0:	cmp	r9, sl
   142d4:	strbcc	r0, [r3, r9]
   142d8:	cmp	sl, ip
   142dc:	lsrhi	r8, r4, #6
   142e0:	addhi	r8, r8, #48	; 0x30
   142e4:	strbhi	r8, [r3, ip]
   142e8:	add	ip, r9, #2
   142ec:	add	r9, r9, #3
   142f0:	cmp	sl, ip
   142f4:	ubfxhi	r8, r4, #3, #3
   142f8:	and	r4, r4, #7
   142fc:	add	r4, r4, #48	; 0x30
   14300:	addhi	r8, r8, #48	; 0x30
   14304:	strbhi	r8, [r3, ip]
   14308:	add	fp, fp, #1
   1430c:	cmp	r1, fp
   14310:	bls	14350 <close_stdout@@Base+0xff8>
   14314:	cmp	r9, sl
   14318:	strbcc	r4, [r3, r9]
   1431c:	ldrb	r4, [r5, #1]!
   14320:	add	r9, r9, #1
   14324:	cmp	r2, #0
   14328:	bne	142c4 <close_stdout@@Base+0xf6c>
   1432c:	cmp	r6, #0
   14330:	beq	14308 <close_stdout@@Base+0xfb0>
   14334:	add	fp, fp, #1
   14338:	cmp	r9, sl
   1433c:	strbcc	r0, [r3, r9]
   14340:	cmp	r1, fp
   14344:	add	r9, r9, #1
   14348:	mov	r6, #0
   1434c:	bhi	14314 <close_stdout@@Base+0xfbc>
   14350:	ldr	r8, [sp, #60]	; 0x3c
   14354:	b	13fd0 <close_stdout@@Base+0xc78>
   14358:	ldr	r3, [sp, #36]	; 0x24
   1435c:	cmp	r3, #0
   14360:	bne	14864 <close_stdout@@Base+0x150c>
   14364:	cmp	sl, #0
   14368:	beq	1477c <close_stdout@@Base+0x1424>
   1436c:	ldr	r1, [sp, #40]	; 0x28
   14370:	mov	r0, #1
   14374:	ldr	r2, [pc, #1296]	; 1488c <close_stdout@@Base+0x1534>
   14378:	mov	r3, #34	; 0x22
   1437c:	str	r0, [sp, #24]
   14380:	mov	r9, r0
   14384:	add	r2, pc, r2
   14388:	str	r0, [sp, #28]
   1438c:	strb	r3, [r1]
   14390:	str	r2, [sp, #52]	; 0x34
   14394:	b	13c40 <close_stdout@@Base+0x8e8>
   14398:	ldr	r3, [pc, #1264]	; 14890 <close_stdout@@Base+0x1538>
   1439c:	mov	r2, #1
   143a0:	mov	r0, #3
   143a4:	str	r2, [sp, #36]	; 0x24
   143a8:	add	r3, pc, r3
   143ac:	str	r2, [sp, #24]
   143b0:	str	r3, [sp, #52]	; 0x34
   143b4:	mov	r9, #0
   143b8:	str	r2, [sp, #28]
   143bc:	str	r0, [sp, #160]	; 0xa0
   143c0:	b	13c40 <close_stdout@@Base+0x8e8>
   143c4:	mov	r0, #0
   143c8:	mov	r1, #1
   143cc:	str	r0, [sp, #36]	; 0x24
   143d0:	mov	r9, r0
   143d4:	str	r1, [sp, #24]
   143d8:	str	r0, [sp, #28]
   143dc:	str	r0, [sp, #52]	; 0x34
   143e0:	b	13c40 <close_stdout@@Base+0x8e8>
   143e4:	ldr	r3, [sp, #160]	; 0xa0
   143e8:	cmp	r3, #8
   143ec:	beq	14418 <close_stdout@@Base+0x10c0>
   143f0:	ldr	r0, [pc, #1180]	; 14894 <close_stdout@@Base+0x153c>
   143f4:	mov	r1, r3
   143f8:	add	r0, pc, r0
   143fc:	bl	13a28 <close_stdout@@Base+0x6d0>
   14400:	ldr	r1, [sp, #160]	; 0xa0
   14404:	str	r0, [sp, #72]	; 0x48
   14408:	ldr	r0, [pc, #1160]	; 14898 <close_stdout@@Base+0x1540>
   1440c:	add	r0, pc, r0
   14410:	bl	13a28 <close_stdout@@Base+0x6d0>
   14414:	str	r0, [sp, #68]	; 0x44
   14418:	ldr	r0, [sp, #36]	; 0x24
   1441c:	cmp	r0, #0
   14420:	movne	r9, #0
   14424:	bne	1445c <close_stdout@@Base+0x1104>
   14428:	ldr	r1, [sp, #72]	; 0x48
   1442c:	ldrb	r3, [r1]
   14430:	cmp	r3, #0
   14434:	beq	14834 <close_stdout@@Base+0x14dc>
   14438:	mov	r2, r1
   1443c:	ldr	r1, [sp, #40]	; 0x28
   14440:	mov	r9, r0
   14444:	cmp	r9, sl
   14448:	strbcc	r3, [r1, r9]
   1444c:	ldrb	r3, [r2, #1]!
   14450:	add	r9, r9, #1
   14454:	cmp	r3, #0
   14458:	bne	14444 <close_stdout@@Base+0x10ec>
   1445c:	ldr	r0, [sp, #68]	; 0x44
   14460:	str	r0, [sp, #52]	; 0x34
   14464:	bl	1131c <strlen@plt>
   14468:	mov	r2, #1
   1446c:	str	r2, [sp, #24]
   14470:	str	r0, [sp, #28]
   14474:	b	13c40 <close_stdout@@Base+0x8e8>
   14478:	ldr	r3, [pc, #1052]	; 1489c <close_stdout@@Base+0x1544>
   1447c:	mov	r2, #0
   14480:	mov	r1, #1
   14484:	mov	r0, #2
   14488:	add	r3, pc, r3
   1448c:	str	r1, [sp, #36]	; 0x24
   14490:	str	r2, [sp, #24]
   14494:	mov	r9, r2
   14498:	str	r1, [sp, #28]
   1449c:	str	r3, [sp, #52]	; 0x34
   144a0:	str	r0, [sp, #160]	; 0xa0
   144a4:	b	13c40 <close_stdout@@Base+0x8e8>
   144a8:	ldr	r3, [sp, #36]	; 0x24
   144ac:	cmp	r3, #0
   144b0:	bne	14840 <close_stdout@@Base+0x14e8>
   144b4:	cmp	sl, #0
   144b8:	beq	1479c <close_stdout@@Base+0x1444>
   144bc:	ldr	r1, [sp, #40]	; 0x28
   144c0:	mov	r3, #39	; 0x27
   144c4:	ldr	r2, [sp, #36]	; 0x24
   144c8:	mov	r0, #1
   144cc:	mov	r9, r0
   144d0:	str	r0, [sp, #28]
   144d4:	strb	r3, [r1]
   144d8:	ldr	r3, [pc, #960]	; 148a0 <close_stdout@@Base+0x1548>
   144dc:	str	r2, [sp, #24]
   144e0:	add	r3, pc, r3
   144e4:	str	r3, [sp, #52]	; 0x34
   144e8:	b	13c40 <close_stdout@@Base+0x8e8>
   144ec:	ldr	r2, [sp, #28]
   144f0:	cmp	r2, #1
   144f4:	add	r4, fp, r2
   144f8:	movls	r3, #0
   144fc:	movhi	r3, #1
   14500:	cmn	r8, #1
   14504:	movne	r3, #0
   14508:	cmp	r3, #0
   1450c:	beq	1451c <close_stdout@@Base+0x11c4>
   14510:	ldr	r0, [sp, #32]
   14514:	bl	1131c <strlen@plt>
   14518:	mov	r8, r0
   1451c:	cmp	r8, r4
   14520:	ldrcc	r3, [sp, #32]
   14524:	movcc	r6, #0
   14528:	addcc	r5, r3, fp
   1452c:	bcc	13c9c <close_stdout@@Base+0x944>
   14530:	ldr	r0, [sp, #32]
   14534:	ldr	r1, [sp, #52]	; 0x34
   14538:	add	r5, r0, fp
   1453c:	ldr	r2, [sp, #28]
   14540:	mov	r0, r5
   14544:	bl	111d8 <memcmp@plt>
   14548:	cmp	r0, #0
   1454c:	bne	14564 <close_stdout@@Base+0x120c>
   14550:	ldr	r1, [sp, #36]	; 0x24
   14554:	cmp	r1, #0
   14558:	bne	140bc <close_stdout@@Base+0xd64>
   1455c:	mov	r6, #1
   14560:	b	13c9c <close_stdout@@Base+0x944>
   14564:	mov	r6, #0
   14568:	b	13c9c <close_stdout@@Base+0x944>
   1456c:	add	r7, sp, #108	; 0x6c
   14570:	cmn	r8, #1
   14574:	mov	r3, #0
   14578:	str	r3, [sp, #108]	; 0x6c
   1457c:	str	r3, [r7, #4]
   14580:	beq	1476c <close_stdout@@Base+0x1414>
   14584:	mov	r1, #0
   14588:	ldr	r0, [sp, #32]
   1458c:	mov	ip, #1
   14590:	str	r9, [sp, #88]	; 0x58
   14594:	str	r6, [sp, #96]	; 0x60
   14598:	mov	r9, r1
   1459c:	str	r5, [sp, #100]	; 0x64
   145a0:	mov	r6, ip
   145a4:	mov	r5, r7
   145a8:	add	r3, sp, #104	; 0x68
   145ac:	sub	r0, r0, #1
   145b0:	str	r3, [sp, #80]	; 0x50
   145b4:	str	r0, [sp, #84]	; 0x54
   145b8:	str	r1, [sp, #60]	; 0x3c
   145bc:	str	r4, [sp, #92]	; 0x5c
   145c0:	ldr	r2, [sp, #32]
   145c4:	add	r7, r9, fp
   145c8:	add	r0, sp, #104	; 0x68
   145cc:	mov	r3, r5
   145d0:	add	r4, r2, r7
   145d4:	rsb	r2, r7, r8
   145d8:	mov	r1, r4
   145dc:	bl	11268 <mbrtowc@plt>
   145e0:	subs	r2, r0, #0
   145e4:	beq	146f0 <close_stdout@@Base+0x1398>
   145e8:	cmn	r2, #1
   145ec:	beq	14818 <close_stdout@@Base+0x14c0>
   145f0:	cmn	r2, #2
   145f4:	beq	147bc <close_stdout@@Base+0x1464>
   145f8:	ldr	r3, [sp, #36]	; 0x24
   145fc:	ldr	r0, [sp, #160]	; 0xa0
   14600:	cmp	r0, #2
   14604:	movne	r3, #0
   14608:	andeq	r3, r3, #1
   1460c:	cmp	r3, #0
   14610:	beq	146cc <close_stdout@@Base+0x1374>
   14614:	cmp	r2, #1
   14618:	beq	146cc <close_stdout@@Base+0x1374>
   1461c:	ldr	r1, [sp, #84]	; 0x54
   14620:	add	r3, r1, r2
   14624:	add	r7, r3, r7
   14628:	ldrb	r3, [r4, #1]!
   1462c:	sub	r3, r3, #91	; 0x5b
   14630:	cmp	r3, #33	; 0x21
   14634:	addls	pc, pc, r3, lsl #2
   14638:	b	146c4 <close_stdout@@Base+0x136c>
   1463c:	b	140bc <close_stdout@@Base+0xd64>
   14640:	b	140bc <close_stdout@@Base+0xd64>
   14644:	b	146c4 <close_stdout@@Base+0x136c>
   14648:	b	140bc <close_stdout@@Base+0xd64>
   1464c:	b	146c4 <close_stdout@@Base+0x136c>
   14650:	b	140bc <close_stdout@@Base+0xd64>
   14654:	b	146c4 <close_stdout@@Base+0x136c>
   14658:	b	146c4 <close_stdout@@Base+0x136c>
   1465c:	b	146c4 <close_stdout@@Base+0x136c>
   14660:	b	146c4 <close_stdout@@Base+0x136c>
   14664:	b	146c4 <close_stdout@@Base+0x136c>
   14668:	b	146c4 <close_stdout@@Base+0x136c>
   1466c:	b	146c4 <close_stdout@@Base+0x136c>
   14670:	b	146c4 <close_stdout@@Base+0x136c>
   14674:	b	146c4 <close_stdout@@Base+0x136c>
   14678:	b	146c4 <close_stdout@@Base+0x136c>
   1467c:	b	146c4 <close_stdout@@Base+0x136c>
   14680:	b	146c4 <close_stdout@@Base+0x136c>
   14684:	b	146c4 <close_stdout@@Base+0x136c>
   14688:	b	146c4 <close_stdout@@Base+0x136c>
   1468c:	b	146c4 <close_stdout@@Base+0x136c>
   14690:	b	146c4 <close_stdout@@Base+0x136c>
   14694:	b	146c4 <close_stdout@@Base+0x136c>
   14698:	b	146c4 <close_stdout@@Base+0x136c>
   1469c:	b	146c4 <close_stdout@@Base+0x136c>
   146a0:	b	146c4 <close_stdout@@Base+0x136c>
   146a4:	b	146c4 <close_stdout@@Base+0x136c>
   146a8:	b	146c4 <close_stdout@@Base+0x136c>
   146ac:	b	146c4 <close_stdout@@Base+0x136c>
   146b0:	b	146c4 <close_stdout@@Base+0x136c>
   146b4:	b	146c4 <close_stdout@@Base+0x136c>
   146b8:	b	146c4 <close_stdout@@Base+0x136c>
   146bc:	b	146c4 <close_stdout@@Base+0x136c>
   146c0:	b	140bc <close_stdout@@Base+0xd64>
   146c4:	cmp	r4, r7
   146c8:	bne	14628 <close_stdout@@Base+0x12d0>
   146cc:	ldr	r0, [sp, #104]	; 0x68
   146d0:	add	r9, r9, r2
   146d4:	bl	11220 <iswprint@plt>
   146d8:	cmp	r0, #0
   146dc:	mov	r0, r5
   146e0:	moveq	r6, #0
   146e4:	bl	111c0 <mbsinit@plt>
   146e8:	cmp	r0, #0
   146ec:	beq	145c0 <close_stdout@@Base+0x1268>
   146f0:	mov	ip, r6
   146f4:	eor	r2, ip, #1
   146f8:	str	r9, [sp, #60]	; 0x3c
   146fc:	ldr	r4, [sp, #92]	; 0x5c
   14700:	uxtb	r2, r2
   14704:	ldr	r9, [sp, #88]	; 0x58
   14708:	ldr	r6, [sp, #96]	; 0x60
   1470c:	ldr	r5, [sp, #100]	; 0x64
   14710:	ldr	r3, [sp, #60]	; 0x3c
   14714:	cmp	r3, #1
   14718:	bls	1429c <close_stdout@@Base+0xf44>
   1471c:	ldr	r0, [sp, #24]
   14720:	and	r2, r2, r0
   14724:	b	142a8 <close_stdout@@Base+0xf50>
   14728:	ldr	r2, [sp, #164]	; 0xa4
   1472c:	tst	r2, #1
   14730:	addne	fp, fp, #1
   14734:	bne	13c64 <close_stdout@@Base+0x90c>
   14738:	b	13f74 <close_stdout@@Base+0xc1c>
   1473c:	ldr	r0, [sp, #36]	; 0x24
   14740:	cmp	r0, #0
   14744:	beq	13f74 <close_stdout@@Base+0xc1c>
   14748:	b	140bc <close_stdout@@Base+0xd64>
   1474c:	ldr	r2, [sp, #32]
   14750:	ldrb	r3, [r2, #1]
   14754:	adds	r3, r3, #0
   14758:	movne	r3, #1
   1475c:	b	14090 <close_stdout@@Base+0xd38>
   14760:	bl	1140c <abort@plt>
   14764:	ldr	r8, [sp, #60]	; 0x3c
   14768:	b	140bc <close_stdout@@Base+0xd64>
   1476c:	ldr	r0, [sp, #32]
   14770:	bl	1131c <strlen@plt>
   14774:	mov	r8, r0
   14778:	b	14584 <close_stdout@@Base+0x122c>
   1477c:	ldr	r2, [pc, #288]	; 148a4 <close_stdout@@Base+0x154c>
   14780:	mov	r1, #1
   14784:	mov	r9, r1
   14788:	str	r1, [sp, #24]
   1478c:	add	r2, pc, r2
   14790:	str	r1, [sp, #28]
   14794:	str	r2, [sp, #52]	; 0x34
   14798:	b	13c40 <close_stdout@@Base+0x8e8>
   1479c:	ldr	r2, [pc, #260]	; 148a8 <close_stdout@@Base+0x1550>
   147a0:	mov	r3, #1
   147a4:	mov	r9, r3
   147a8:	str	r3, [sp, #28]
   147ac:	add	r2, pc, r2
   147b0:	str	sl, [sp, #24]
   147b4:	str	r2, [sp, #52]	; 0x34
   147b8:	b	13c40 <close_stdout@@Base+0x8e8>
   147bc:	cmp	r8, r7
   147c0:	str	r9, [sp, #60]	; 0x3c
   147c4:	mov	ip, r4
   147c8:	ldr	r6, [sp, #96]	; 0x60
   147cc:	ldr	r9, [sp, #88]	; 0x58
   147d0:	ldr	r4, [sp, #92]	; 0x5c
   147d4:	ldr	r5, [sp, #100]	; 0x64
   147d8:	bls	14810 <close_stdout@@Base+0x14b8>
   147dc:	ldrb	r3, [ip]
   147e0:	cmp	r3, #0
   147e4:	beq	14810 <close_stdout@@Base+0x14b8>
   147e8:	ldr	r3, [sp, #60]	; 0x3c
   147ec:	b	147fc <close_stdout@@Base+0x14a4>
   147f0:	ldrb	r2, [r5, r3]
   147f4:	cmp	r2, #0
   147f8:	beq	1480c <close_stdout@@Base+0x14b4>
   147fc:	add	r3, r3, #1
   14800:	add	r2, fp, r3
   14804:	cmp	r8, r2
   14808:	bhi	147f0 <close_stdout@@Base+0x1498>
   1480c:	str	r3, [sp, #60]	; 0x3c
   14810:	mov	r2, #1
   14814:	b	14710 <close_stdout@@Base+0x13b8>
   14818:	str	r9, [sp, #60]	; 0x3c
   1481c:	mov	r2, #1
   14820:	ldr	r4, [sp, #92]	; 0x5c
   14824:	ldr	r6, [sp, #96]	; 0x60
   14828:	ldr	r9, [sp, #88]	; 0x58
   1482c:	ldr	r5, [sp, #100]	; 0x64
   14830:	b	14710 <close_stdout@@Base+0x13b8>
   14834:	ldr	r9, [sp, #36]	; 0x24
   14838:	b	1445c <close_stdout@@Base+0x1104>
   1483c:	bl	111f0 <__stack_chk_fail@plt>
   14840:	ldr	r1, [pc, #100]	; 148ac <close_stdout@@Base+0x1554>
   14844:	mov	r3, #0
   14848:	mov	r0, #1
   1484c:	str	r3, [sp, #24]
   14850:	add	r1, pc, r1
   14854:	str	r0, [sp, #28]
   14858:	mov	r9, r3
   1485c:	str	r1, [sp, #52]	; 0x34
   14860:	b	13c40 <close_stdout@@Base+0x8e8>
   14864:	ldr	r0, [pc, #68]	; 148b0 <close_stdout@@Base+0x1558>
   14868:	mov	r3, #1
   1486c:	mov	r9, #0
   14870:	str	r3, [sp, #24]
   14874:	add	r0, pc, r0
   14878:	str	r3, [sp, #28]
   1487c:	str	r0, [sp, #52]	; 0x34
   14880:	b	13c40 <close_stdout@@Base+0x8e8>
   14884:	andeq	r4, r1, r0, asr r4
   14888:	andeq	r0, r0, r4, lsl r1
   1488c:	strdeq	r3, [r0], -ip
   14890:	ldrdeq	r3, [r0], -r8
   14894:	muleq	r0, r4, r1
   14898:	andeq	r3, r0, r0, ror r1
   1489c:	strdeq	r3, [r0], -r4
   148a0:	muleq	r0, ip, r0
   148a4:	strdeq	r2, [r0], -r4
   148a8:	ldrdeq	r2, [r0], -r0
   148ac:	andeq	r2, r0, ip, lsr #26
   148b0:	andeq	r2, r0, ip, lsl #26
   148b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148b8:	sub	sp, sp, #44	; 0x2c
   148bc:	mov	r6, r0
   148c0:	mov	r9, r1
   148c4:	mov	sl, r2
   148c8:	mov	r4, r3
   148cc:	bl	11340 <__errno_location@plt>
   148d0:	ldr	fp, [pc, #412]	; 14a74 <close_stdout@@Base+0x171c>
   148d4:	cmp	r6, #0
   148d8:	add	fp, pc, fp
   148dc:	ldr	r5, [fp]
   148e0:	ldr	r1, [r0]
   148e4:	mov	r8, r0
   148e8:	str	r1, [sp, #36]	; 0x24
   148ec:	blt	14a6c <close_stdout@@Base+0x1714>
   148f0:	ldr	r3, [pc, #384]	; 14a78 <close_stdout@@Base+0x1720>
   148f4:	add	r3, pc, r3
   148f8:	ldr	r3, [r3]
   148fc:	cmp	r6, r3
   14900:	bcc	14954 <close_stdout@@Base+0x15fc>
   14904:	add	r7, r6, #1
   14908:	cmn	r7, #-536870911	; 0xe0000001
   1490c:	bhi	14a70 <close_stdout@@Base+0x1718>
   14910:	add	r3, fp, #4
   14914:	cmp	r5, r3
   14918:	beq	14a44 <close_stdout@@Base+0x16ec>
   1491c:	mov	r0, r5
   14920:	lsl	r1, r7, #3
   14924:	bl	1574c <close_stdout@@Base+0x23f4>
   14928:	mov	r5, r0
   1492c:	str	r0, [fp]
   14930:	ldr	fp, [pc, #324]	; 14a7c <close_stdout@@Base+0x1724>
   14934:	mov	r1, #0
   14938:	add	fp, pc, fp
   1493c:	ldr	r0, [fp]
   14940:	rsb	r2, r0, r7
   14944:	add	r0, r5, r0, lsl #3
   14948:	lsl	r2, r2, #3
   1494c:	bl	11358 <memset@plt>
   14950:	str	r7, [fp]
   14954:	add	r2, r4, #8
   14958:	str	r2, [sp, #32]
   1495c:	ldr	r1, [r4]
   14960:	add	fp, r5, r6, lsl #3
   14964:	ldr	lr, [sp, #32]
   14968:	mov	r2, r9
   1496c:	ldr	r3, [r4, #4]
   14970:	ldr	ip, [r5, r6, lsl #3]
   14974:	ldr	r7, [fp, #4]
   14978:	orr	r3, r3, #1
   1497c:	str	r1, [sp]
   14980:	str	r3, [sp, #4]
   14984:	mov	r1, ip
   14988:	str	lr, [sp, #8]
   1498c:	mov	r0, r7
   14990:	ldr	lr, [r4, #40]	; 0x28
   14994:	str	r3, [sp, #28]
   14998:	mov	r3, sl
   1499c:	str	lr, [sp, #12]
   149a0:	ldr	lr, [r4, #44]	; 0x2c
   149a4:	str	ip, [sp, #24]
   149a8:	str	lr, [sp, #16]
   149ac:	bl	13b8c <close_stdout@@Base+0x834>
   149b0:	ldr	ip, [sp, #24]
   149b4:	cmp	ip, r0
   149b8:	bhi	14a30 <close_stdout@@Base+0x16d8>
   149bc:	ldr	r3, [pc, #188]	; 14a80 <close_stdout@@Base+0x1728>
   149c0:	add	r1, r0, #1
   149c4:	str	r1, [r5, r6, lsl #3]
   149c8:	add	r3, pc, r3
   149cc:	cmp	r7, r3
   149d0:	beq	149e4 <close_stdout@@Base+0x168c>
   149d4:	mov	r0, r7
   149d8:	str	r1, [sp, #24]
   149dc:	bl	11190 <free@plt>
   149e0:	ldr	r1, [sp, #24]
   149e4:	mov	r0, r1
   149e8:	str	r1, [sp, #24]
   149ec:	bl	156f4 <close_stdout@@Base+0x239c>
   149f0:	ldr	r3, [sp, #28]
   149f4:	ldr	lr, [sp, #32]
   149f8:	mov	r2, r9
   149fc:	str	r0, [fp, #4]
   14a00:	mov	r7, r0
   14a04:	ldr	ip, [r4]
   14a08:	str	r3, [sp, #4]
   14a0c:	mov	r3, sl
   14a10:	str	lr, [sp, #8]
   14a14:	str	ip, [sp]
   14a18:	ldr	ip, [r4, #40]	; 0x28
   14a1c:	ldr	r1, [sp, #24]
   14a20:	str	ip, [sp, #12]
   14a24:	ldr	ip, [r4, #44]	; 0x2c
   14a28:	str	ip, [sp, #16]
   14a2c:	bl	13b8c <close_stdout@@Base+0x834>
   14a30:	ldr	r1, [sp, #36]	; 0x24
   14a34:	mov	r0, r7
   14a38:	str	r1, [r8]
   14a3c:	add	sp, sp, #44	; 0x2c
   14a40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a44:	lsl	r1, r7, #3
   14a48:	mov	r0, #0
   14a4c:	str	r3, [sp, #24]
   14a50:	bl	1574c <close_stdout@@Base+0x23f4>
   14a54:	ldr	r3, [sp, #24]
   14a58:	mov	r5, r0
   14a5c:	ldm	r3, {r0, r1}
   14a60:	str	r5, [fp]
   14a64:	stm	r5, {r0, r1}
   14a68:	b	14930 <close_stdout@@Base+0x15d8>
   14a6c:	bl	1140c <abort@plt>
   14a70:	bl	15908 <close_stdout@@Base+0x25b0>
   14a74:			; <UNDEFINED> instruction: 0x000138b8
   14a78:	andeq	r3, r1, r8, ror #16
   14a7c:	andeq	r3, r1, r4, lsr #16
   14a80:	andeq	r3, r1, ip, lsl #16
   14a84:	push	{r4, r5, r6, lr}
   14a88:	mov	r5, r0
   14a8c:	bl	11340 <__errno_location@plt>
   14a90:	cmp	r5, #0
   14a94:	mov	r1, #48	; 0x30
   14a98:	mov	r4, r0
   14a9c:	ldr	r0, [pc, #24]	; 14abc <close_stdout@@Base+0x1764>
   14aa0:	ldr	r6, [r4]
   14aa4:	add	r0, pc, r0
   14aa8:	add	r0, r0, #256	; 0x100
   14aac:	movne	r0, r5
   14ab0:	bl	158c8 <close_stdout@@Base+0x2570>
   14ab4:	str	r6, [r4]
   14ab8:	pop	{r4, r5, r6, pc}
   14abc:	andeq	r3, r1, r0, lsr r7
   14ac0:	cmp	r0, #0
   14ac4:	beq	14ad0 <close_stdout@@Base+0x1778>
   14ac8:	ldr	r0, [r0]
   14acc:	bx	lr
   14ad0:	ldr	r0, [pc, #12]	; 14ae4 <close_stdout@@Base+0x178c>
   14ad4:	add	r0, pc, r0
   14ad8:	add	r0, r0, #256	; 0x100
   14adc:	ldr	r0, [r0]
   14ae0:	bx	lr
   14ae4:	andeq	r3, r1, r0, lsl #14
   14ae8:	cmp	r0, #0
   14aec:	beq	14af8 <close_stdout@@Base+0x17a0>
   14af0:	str	r1, [r0]
   14af4:	bx	lr
   14af8:	ldr	r0, [pc, #12]	; 14b0c <close_stdout@@Base+0x17b4>
   14afc:	add	r0, pc, r0
   14b00:	add	r0, r0, #256	; 0x100
   14b04:	str	r1, [r0]
   14b08:	bx	lr
   14b0c:	ldrdeq	r3, [r1], -r8
   14b10:	cmp	r0, #0
   14b14:	movne	r3, r0
   14b18:	beq	14b48 <close_stdout@@Base+0x17f0>
   14b1c:	lsr	ip, r1, #5
   14b20:	and	r1, r1, #31
   14b24:	add	r3, r3, ip, lsl #2
   14b28:	ldr	ip, [r3, #8]
   14b2c:	lsr	r0, ip, r1
   14b30:	eor	r2, r0, r2
   14b34:	and	r0, r0, #1
   14b38:	and	r2, r2, #1
   14b3c:	eor	ip, ip, r2, lsl r1
   14b40:	str	ip, [r3, #8]
   14b44:	bx	lr
   14b48:	ldr	r3, [pc, #8]	; 14b58 <close_stdout@@Base+0x1800>
   14b4c:	add	r3, pc, r3
   14b50:	add	r3, r3, #256	; 0x100
   14b54:	b	14b1c <close_stdout@@Base+0x17c4>
   14b58:	andeq	r3, r1, r8, lsl #13
   14b5c:	subs	r3, r0, #0
   14b60:	beq	14b70 <close_stdout@@Base+0x1818>
   14b64:	ldr	r0, [r3, #4]
   14b68:	str	r1, [r3, #4]
   14b6c:	bx	lr
   14b70:	ldr	r3, [pc, #8]	; 14b80 <close_stdout@@Base+0x1828>
   14b74:	add	r3, pc, r3
   14b78:	add	r3, r3, #256	; 0x100
   14b7c:	b	14b64 <close_stdout@@Base+0x180c>
   14b80:	andeq	r3, r1, r0, ror #12
   14b84:	cmp	r0, #0
   14b88:	push	{r3, lr}
   14b8c:	beq	14bb0 <close_stdout@@Base+0x1858>
   14b90:	cmp	r2, #0
   14b94:	cmpne	r1, #0
   14b98:	mov	r3, #8
   14b9c:	strne	r1, [r0, #40]	; 0x28
   14ba0:	str	r3, [r0]
   14ba4:	strne	r2, [r0, #44]	; 0x2c
   14ba8:	popne	{r3, pc}
   14bac:	bl	1140c <abort@plt>
   14bb0:	ldr	r0, [pc, #8]	; 14bc0 <close_stdout@@Base+0x1868>
   14bb4:	add	r0, pc, r0
   14bb8:	add	r0, r0, #256	; 0x100
   14bbc:	b	14b90 <close_stdout@@Base+0x1838>
   14bc0:	andeq	r3, r1, r0, lsr #12
   14bc4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14bc8:	sub	sp, sp, #24
   14bcc:	mov	r7, r0
   14bd0:	mov	sl, r1
   14bd4:	ldr	r4, [sp, #56]	; 0x38
   14bd8:	mov	r9, r2
   14bdc:	mov	r8, r3
   14be0:	cmp	r4, #0
   14be4:	beq	14c38 <close_stdout@@Base+0x18e0>
   14be8:	bl	11340 <__errno_location@plt>
   14bec:	ldr	r3, [r4]
   14bf0:	add	lr, r4, #8
   14bf4:	mov	r1, sl
   14bf8:	mov	r2, r9
   14bfc:	ldr	r6, [r0]
   14c00:	mov	r5, r0
   14c04:	str	r3, [sp]
   14c08:	mov	r0, r7
   14c0c:	ldr	ip, [r4, #4]
   14c10:	mov	r3, r8
   14c14:	stmib	sp, {ip, lr}
   14c18:	ldr	ip, [r4, #40]	; 0x28
   14c1c:	str	ip, [sp, #12]
   14c20:	ldr	ip, [r4, #44]	; 0x2c
   14c24:	str	ip, [sp, #16]
   14c28:	bl	13b8c <close_stdout@@Base+0x834>
   14c2c:	str	r6, [r5]
   14c30:	add	sp, sp, #24
   14c34:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14c38:	ldr	r4, [pc, #8]	; 14c48 <close_stdout@@Base+0x18f0>
   14c3c:	add	r4, pc, r4
   14c40:	add	r4, r4, #256	; 0x100
   14c44:	b	14be8 <close_stdout@@Base+0x1890>
   14c48:	muleq	r1, r8, r5
   14c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c50:	subs	r4, r3, #0
   14c54:	sub	sp, sp, #36	; 0x24
   14c58:	mov	r7, r0
   14c5c:	mov	r6, r1
   14c60:	mov	r5, r2
   14c64:	beq	14d20 <close_stdout@@Base+0x19c8>
   14c68:	bl	11340 <__errno_location@plt>
   14c6c:	ldr	r3, [r4]
   14c70:	ldr	sl, [r4, #4]
   14c74:	add	r9, r4, #8
   14c78:	mov	r8, r0
   14c7c:	mov	r0, #0
   14c80:	ldr	r2, [r8]
   14c84:	cmp	r5, r0
   14c88:	orreq	sl, sl, #1
   14c8c:	str	r9, [sp, #8]
   14c90:	mov	r1, r0
   14c94:	stm	sp, {r3, sl}
   14c98:	mov	r3, r6
   14c9c:	ldr	ip, [r4, #40]	; 0x28
   14ca0:	str	r2, [sp, #28]
   14ca4:	mov	r2, r7
   14ca8:	str	ip, [sp, #12]
   14cac:	ldr	ip, [r4, #44]	; 0x2c
   14cb0:	str	ip, [sp, #16]
   14cb4:	bl	13b8c <close_stdout@@Base+0x834>
   14cb8:	add	r1, r0, #1
   14cbc:	mov	fp, r0
   14cc0:	str	r1, [sp, #24]
   14cc4:	mov	r0, r1
   14cc8:	bl	156f4 <close_stdout@@Base+0x239c>
   14ccc:	ldr	lr, [r4]
   14cd0:	str	sl, [sp, #4]
   14cd4:	mov	r3, r6
   14cd8:	str	r9, [sp, #8]
   14cdc:	mov	r2, r7
   14ce0:	str	lr, [sp]
   14ce4:	ldr	lr, [r4, #40]	; 0x28
   14ce8:	ldr	r1, [sp, #24]
   14cec:	str	lr, [sp, #12]
   14cf0:	ldr	lr, [r4, #44]	; 0x2c
   14cf4:	str	lr, [sp, #16]
   14cf8:	str	r0, [sp, #24]
   14cfc:	bl	13b8c <close_stdout@@Base+0x834>
   14d00:	ldr	r3, [sp, #28]
   14d04:	cmp	r5, #0
   14d08:	str	r3, [r8]
   14d0c:	ldr	ip, [sp, #24]
   14d10:	strne	fp, [r5]
   14d14:	mov	r0, ip
   14d18:	add	sp, sp, #36	; 0x24
   14d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d20:	ldr	r4, [pc, #8]	; 14d30 <close_stdout@@Base+0x19d8>
   14d24:	add	r4, pc, r4
   14d28:	add	r4, r4, #256	; 0x100
   14d2c:	b	14c68 <close_stdout@@Base+0x1910>
   14d30:			; <UNDEFINED> instruction: 0x000134b0
   14d34:	mov	r3, r2
   14d38:	mov	r2, #0
   14d3c:	b	14c4c <close_stdout@@Base+0x18f4>
   14d40:	ldr	r2, [pc, #152]	; 14de0 <close_stdout@@Base+0x1a88>
   14d44:	push	{r3, r4, r5, r6, r7, lr}
   14d48:	add	r2, pc, r2
   14d4c:	ldr	r3, [pc, #144]	; 14de4 <close_stdout@@Base+0x1a8c>
   14d50:	ldr	r6, [r2]
   14d54:	add	r3, pc, r3
   14d58:	cmp	r6, #1
   14d5c:	ldr	r7, [r3]
   14d60:	movhi	r4, #1
   14d64:	movhi	r5, r7
   14d68:	bls	14d84 <close_stdout@@Base+0x1a2c>
   14d6c:	ldr	r0, [r5, #12]
   14d70:	add	r4, r4, #1
   14d74:	bl	11190 <free@plt>
   14d78:	cmp	r4, r6
   14d7c:	add	r5, r5, #8
   14d80:	bne	14d6c <close_stdout@@Base+0x1a14>
   14d84:	ldr	r4, [pc, #92]	; 14de8 <close_stdout@@Base+0x1a90>
   14d88:	ldr	r0, [r7, #4]
   14d8c:	add	r4, pc, r4
   14d90:	cmp	r0, r4
   14d94:	beq	14dac <close_stdout@@Base+0x1a54>
   14d98:	bl	11190 <free@plt>
   14d9c:	ldr	r3, [pc, #72]	; 14dec <close_stdout@@Base+0x1a94>
   14da0:	mov	r2, #256	; 0x100
   14da4:	add	r3, pc, r3
   14da8:	stmib	r3, {r2, r4}
   14dac:	ldr	r4, [pc, #60]	; 14df0 <close_stdout@@Base+0x1a98>
   14db0:	add	r4, pc, r4
   14db4:	add	r5, r4, #4
   14db8:	cmp	r7, r5
   14dbc:	beq	14dcc <close_stdout@@Base+0x1a74>
   14dc0:	mov	r0, r7
   14dc4:	bl	11190 <free@plt>
   14dc8:	str	r5, [r4]
   14dcc:	ldr	r3, [pc, #32]	; 14df4 <close_stdout@@Base+0x1a9c>
   14dd0:	mov	r2, #1
   14dd4:	add	r3, pc, r3
   14dd8:	str	r2, [r3]
   14ddc:	pop	{r3, r4, r5, r6, r7, pc}
   14de0:	andeq	r3, r1, r4, lsl r4
   14de4:	andeq	r3, r1, ip, lsr r4
   14de8:	andeq	r3, r1, r8, asr #8
   14dec:	andeq	r3, r1, ip, ror #7
   14df0:	andeq	r3, r1, r0, ror #7
   14df4:	andeq	r3, r1, r8, lsl #7
   14df8:	ldr	r3, [pc, #12]	; 14e0c <close_stdout@@Base+0x1ab4>
   14dfc:	mvn	r2, #0
   14e00:	add	r3, pc, r3
   14e04:	add	r3, r3, #256	; 0x100
   14e08:	b	148b4 <close_stdout@@Base+0x155c>
   14e0c:	ldrdeq	r3, [r1], -r4
   14e10:	ldr	r3, [pc, #8]	; 14e20 <close_stdout@@Base+0x1ac8>
   14e14:	add	r3, pc, r3
   14e18:	add	r3, r3, #256	; 0x100
   14e1c:	b	148b4 <close_stdout@@Base+0x155c>
   14e20:	andeq	r3, r1, r0, asr #7
   14e24:	mov	r1, r0
   14e28:	mov	r0, #0
   14e2c:	b	14df8 <close_stdout@@Base+0x1aa0>
   14e30:	mov	r2, r1
   14e34:	mov	r1, r0
   14e38:	mov	r0, #0
   14e3c:	b	14e10 <close_stdout@@Base+0x1ab8>
   14e40:	ldr	r3, [pc, #92]	; 14ea4 <close_stdout@@Base+0x1b4c>
   14e44:	ldr	ip, [pc, #92]	; 14ea8 <close_stdout@@Base+0x1b50>
   14e48:	add	r3, pc, r3
   14e4c:	push	{r4, r5, r6, r7, lr}
   14e50:	sub	sp, sp, #60	; 0x3c
   14e54:	ldr	r4, [r3, ip]
   14e58:	add	r5, sp, #4
   14e5c:	mov	r7, r2
   14e60:	mov	r6, r0
   14e64:	mov	r0, r5
   14e68:	ldr	r3, [r4]
   14e6c:	str	r3, [sp, #52]	; 0x34
   14e70:	bl	139d4 <close_stdout@@Base+0x67c>
   14e74:	mov	r3, r5
   14e78:	mvn	r2, #0
   14e7c:	mov	r0, r6
   14e80:	mov	r1, r7
   14e84:	bl	148b4 <close_stdout@@Base+0x155c>
   14e88:	ldr	r2, [sp, #52]	; 0x34
   14e8c:	ldr	r3, [r4]
   14e90:	cmp	r2, r3
   14e94:	bne	14ea0 <close_stdout@@Base+0x1b48>
   14e98:	add	sp, sp, #60	; 0x3c
   14e9c:	pop	{r4, r5, r6, r7, pc}
   14ea0:	bl	111f0 <__stack_chk_fail@plt>
   14ea4:			; <UNDEFINED> instruction: 0x000131b0
   14ea8:	andeq	r0, r0, r4, lsl r1
   14eac:	ldr	ip, [pc, #96]	; 14f14 <close_stdout@@Base+0x1bbc>
   14eb0:	push	{r4, r5, r6, r7, r8, lr}
   14eb4:	add	ip, pc, ip
   14eb8:	ldr	lr, [pc, #88]	; 14f18 <close_stdout@@Base+0x1bc0>
   14ebc:	sub	sp, sp, #56	; 0x38
   14ec0:	mov	r8, r3
   14ec4:	add	r5, sp, #4
   14ec8:	mov	r7, r2
   14ecc:	mov	r6, r0
   14ed0:	ldr	r4, [ip, lr]
   14ed4:	mov	r0, r5
   14ed8:	ldr	r3, [r4]
   14edc:	str	r3, [sp, #52]	; 0x34
   14ee0:	bl	139d4 <close_stdout@@Base+0x67c>
   14ee4:	mov	r2, r8
   14ee8:	mov	r3, r5
   14eec:	mov	r0, r6
   14ef0:	mov	r1, r7
   14ef4:	bl	148b4 <close_stdout@@Base+0x155c>
   14ef8:	ldr	r2, [sp, #52]	; 0x34
   14efc:	ldr	r3, [r4]
   14f00:	cmp	r2, r3
   14f04:	bne	14f10 <close_stdout@@Base+0x1bb8>
   14f08:	add	sp, sp, #56	; 0x38
   14f0c:	pop	{r4, r5, r6, r7, r8, pc}
   14f10:	bl	111f0 <__stack_chk_fail@plt>
   14f14:	andeq	r3, r1, r4, asr #2
   14f18:	andeq	r0, r0, r4, lsl r1
   14f1c:	mov	r2, r1
   14f20:	mov	r1, r0
   14f24:	mov	r0, #0
   14f28:	b	14e40 <close_stdout@@Base+0x1ae8>
   14f2c:	mov	ip, r1
   14f30:	mov	r3, r2
   14f34:	mov	r1, r0
   14f38:	mov	r2, ip
   14f3c:	mov	r0, #0
   14f40:	b	14eac <close_stdout@@Base+0x1b54>
   14f44:	push	{r4, r5, r6, r7, r8, lr}
   14f48:	mov	r5, r2
   14f4c:	ldr	lr, [pc, #136]	; 14fdc <close_stdout@@Base+0x1c84>
   14f50:	mov	r7, r0
   14f54:	mov	r6, r1
   14f58:	ldr	r4, [pc, #128]	; 14fe0 <close_stdout@@Base+0x1c88>
   14f5c:	add	lr, pc, lr
   14f60:	sub	sp, sp, #56	; 0x38
   14f64:	add	lr, lr, #256	; 0x100
   14f68:	ldr	r8, [pc, #116]	; 14fe4 <close_stdout@@Base+0x1c8c>
   14f6c:	add	r4, pc, r4
   14f70:	add	ip, sp, #4
   14f74:	ldm	lr!, {r0, r1, r2, r3}
   14f78:	ldr	r4, [r4, r8]
   14f7c:	stmia	ip!, {r0, r1, r2, r3}
   14f80:	ldm	lr!, {r0, r1, r2, r3}
   14f84:	ldr	r8, [r4]
   14f88:	stmia	ip!, {r0, r1, r2, r3}
   14f8c:	ldm	lr, {r0, r1, r2, r3}
   14f90:	str	r8, [sp, #52]	; 0x34
   14f94:	stm	ip, {r0, r1, r2, r3}
   14f98:	mov	r1, r5
   14f9c:	add	r5, sp, #4
   14fa0:	mov	r2, #1
   14fa4:	mov	r0, r5
   14fa8:	bl	14b10 <close_stdout@@Base+0x17b8>
   14fac:	mov	r2, r6
   14fb0:	mov	r3, r5
   14fb4:	mov	r1, r7
   14fb8:	mov	r0, #0
   14fbc:	bl	148b4 <close_stdout@@Base+0x155c>
   14fc0:	ldr	r2, [sp, #52]	; 0x34
   14fc4:	ldr	r3, [r4]
   14fc8:	cmp	r2, r3
   14fcc:	bne	14fd8 <close_stdout@@Base+0x1c80>
   14fd0:	add	sp, sp, #56	; 0x38
   14fd4:	pop	{r4, r5, r6, r7, r8, pc}
   14fd8:	bl	111f0 <__stack_chk_fail@plt>
   14fdc:	andeq	r3, r1, r8, ror r2
   14fe0:	andeq	r3, r1, ip, lsl #1
   14fe4:	andeq	r0, r0, r4, lsl r1
   14fe8:	mov	r2, r1
   14fec:	mvn	r1, #0
   14ff0:	b	14f44 <close_stdout@@Base+0x1bec>
   14ff4:	mov	r1, #58	; 0x3a
   14ff8:	b	14fe8 <close_stdout@@Base+0x1c90>
   14ffc:	mov	r2, #58	; 0x3a
   15000:	b	14f44 <close_stdout@@Base+0x1bec>
   15004:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15008:	mov	r5, r2
   1500c:	ldr	lr, [pc, #144]	; 150a4 <close_stdout@@Base+0x1d4c>
   15010:	mov	r8, r0
   15014:	mov	r9, r1
   15018:	mov	r7, r3
   1501c:	add	lr, pc, lr
   15020:	ldr	r4, [pc, #128]	; 150a8 <close_stdout@@Base+0x1d50>
   15024:	add	lr, lr, #256	; 0x100
   15028:	sub	sp, sp, #56	; 0x38
   1502c:	ldr	sl, [pc, #120]	; 150ac <close_stdout@@Base+0x1d54>
   15030:	add	r4, pc, r4
   15034:	ldm	lr!, {r0, r1, r2, r3}
   15038:	add	ip, sp, #4
   1503c:	ldr	r4, [r4, sl]
   15040:	ldr	r6, [sp, #88]	; 0x58
   15044:	stmia	ip!, {r0, r1, r2, r3}
   15048:	ldm	lr!, {r0, r1, r2, r3}
   1504c:	ldr	sl, [r4]
   15050:	stmia	ip!, {r0, r1, r2, r3}
   15054:	ldm	lr, {r0, r1, r2, r3}
   15058:	str	sl, [sp, #52]	; 0x34
   1505c:	stm	ip, {r0, r1, r2, r3}
   15060:	mov	r2, r5
   15064:	add	r5, sp, #4
   15068:	mov	r1, r9
   1506c:	mov	r0, r5
   15070:	bl	14b84 <close_stdout@@Base+0x182c>
   15074:	mov	r2, r6
   15078:	mov	r3, r5
   1507c:	mov	r0, r8
   15080:	mov	r1, r7
   15084:	bl	148b4 <close_stdout@@Base+0x155c>
   15088:	ldr	r2, [sp, #52]	; 0x34
   1508c:	ldr	r3, [r4]
   15090:	cmp	r2, r3
   15094:	bne	150a0 <close_stdout@@Base+0x1d48>
   15098:	add	sp, sp, #56	; 0x38
   1509c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   150a0:	bl	111f0 <__stack_chk_fail@plt>
   150a4:			; <UNDEFINED> instruction: 0x000131b8
   150a8:	andeq	r2, r1, r8, asr #31
   150ac:	andeq	r0, r0, r4, lsl r1
   150b0:	push	{lr}		; (str lr, [sp, #-4]!)
   150b4:	sub	sp, sp, #12
   150b8:	mvn	ip, #0
   150bc:	str	ip, [sp]
   150c0:	bl	15004 <close_stdout@@Base+0x1cac>
   150c4:	add	sp, sp, #12
   150c8:	pop	{pc}		; (ldr pc, [sp], #4)
   150cc:	mov	ip, r1
   150d0:	mov	r3, r2
   150d4:	mov	r1, r0
   150d8:	mov	r2, ip
   150dc:	mov	r0, #0
   150e0:	b	150b0 <close_stdout@@Base+0x1d58>
   150e4:	push	{lr}		; (str lr, [sp, #-4]!)
   150e8:	sub	sp, sp, #12
   150ec:	mov	lr, r1
   150f0:	mov	ip, r2
   150f4:	mov	r1, r0
   150f8:	str	r3, [sp]
   150fc:	mov	r2, lr
   15100:	mov	r3, ip
   15104:	mov	r0, #0
   15108:	bl	15004 <close_stdout@@Base+0x1cac>
   1510c:	add	sp, sp, #12
   15110:	pop	{pc}		; (ldr pc, [sp], #4)
   15114:	ldr	r3, [pc, #12]	; 15128 <close_stdout@@Base+0x1dd0>
   15118:	ldr	ip, [pc, #12]	; 1512c <close_stdout@@Base+0x1dd4>
   1511c:	add	r3, pc, r3
   15120:	ldr	r3, [r3, ip]
   15124:	b	148b4 <close_stdout@@Base+0x155c>
   15128:	ldrdeq	r2, [r1], -ip
   1512c:	andeq	r0, r0, r0, lsl r1
   15130:	mov	r2, r1
   15134:	mov	r1, r0
   15138:	mov	r0, #0
   1513c:	b	15114 <close_stdout@@Base+0x1dbc>
   15140:	mvn	r2, #0
   15144:	b	15114 <close_stdout@@Base+0x1dbc>
   15148:	mov	r1, r0
   1514c:	mov	r0, #0
   15150:	b	15140 <close_stdout@@Base+0x1de8>
   15154:	push	{r4, r5, r6, r7, lr}
   15158:	cmp	r1, #0
   1515c:	sub	sp, sp, #36	; 0x24
   15160:	ldr	r7, [pc, #896]	; 154e8 <close_stdout@@Base+0x2190>
   15164:	mov	ip, r3
   15168:	mov	r5, r0
   1516c:	add	r7, pc, r7
   15170:	ldr	r4, [sp, #56]	; 0x38
   15174:	ldr	r6, [sp, #60]	; 0x3c
   15178:	beq	154bc <close_stdout@@Base+0x2164>
   1517c:	str	r2, [sp]
   15180:	mov	r3, r1
   15184:	ldr	r2, [pc, #864]	; 154ec <close_stdout@@Base+0x2194>
   15188:	mov	r1, #1
   1518c:	str	ip, [sp, #4]
   15190:	add	r2, pc, r2
   15194:	bl	11388 <__fprintf_chk@plt>
   15198:	ldr	r1, [pc, #848]	; 154f0 <close_stdout@@Base+0x2198>
   1519c:	mov	r2, #5
   151a0:	mov	r0, #0
   151a4:	add	r1, pc, r1
   151a8:	bl	111e4 <dcgettext@plt>
   151ac:	ldr	r2, [pc, #832]	; 154f4 <close_stdout@@Base+0x219c>
   151b0:	movw	ip, #2013	; 0x7dd
   151b4:	mov	r1, #1
   151b8:	ldr	r2, [r7, r2]
   151bc:	str	ip, [sp]
   151c0:	mov	r3, r0
   151c4:	mov	r0, r5
   151c8:	bl	11388 <__fprintf_chk@plt>
   151cc:	ldr	r1, [pc, #804]	; 154f8 <close_stdout@@Base+0x21a0>
   151d0:	mov	r0, #0
   151d4:	mov	r2, #5
   151d8:	add	r1, pc, r1
   151dc:	bl	111e4 <dcgettext@plt>
   151e0:	mov	r1, r5
   151e4:	bl	1113c <fputs_unlocked@plt>
   151e8:	cmp	r6, #9
   151ec:	addls	pc, pc, r6, lsl #2
   151f0:	b	154d8 <close_stdout@@Base+0x2180>
   151f4:	b	15288 <close_stdout@@Base+0x1f30>
   151f8:	b	1528c <close_stdout@@Base+0x1f34>
   151fc:	b	152bc <close_stdout@@Base+0x1f64>
   15200:	b	152f0 <close_stdout@@Base+0x1f98>
   15204:	b	1532c <close_stdout@@Base+0x1fd4>
   15208:	b	1536c <close_stdout@@Base+0x2014>
   1520c:	b	153b4 <close_stdout@@Base+0x205c>
   15210:	b	15404 <close_stdout@@Base+0x20ac>
   15214:	b	1545c <close_stdout@@Base+0x2104>
   15218:	b	1521c <close_stdout@@Base+0x1ec4>
   1521c:	ldr	r1, [pc, #728]	; 154fc <close_stdout@@Base+0x21a4>
   15220:	mov	r0, #0
   15224:	add	r1, pc, r1
   15228:	mov	r2, #5
   1522c:	bl	111e4 <dcgettext@plt>
   15230:	ldm	r4, {r3, ip}
   15234:	mov	r1, #1
   15238:	str	ip, [sp]
   1523c:	ldr	ip, [r4, #8]
   15240:	str	ip, [sp, #4]
   15244:	ldr	ip, [r4, #12]
   15248:	str	ip, [sp, #8]
   1524c:	ldr	ip, [r4, #16]
   15250:	str	ip, [sp, #12]
   15254:	ldr	ip, [r4, #20]
   15258:	str	ip, [sp, #16]
   1525c:	ldr	ip, [r4, #24]
   15260:	str	ip, [sp, #20]
   15264:	ldr	ip, [r4, #28]
   15268:	str	ip, [sp, #24]
   1526c:	ldr	ip, [r4, #32]
   15270:	str	ip, [sp, #28]
   15274:	mov	r2, r0
   15278:	mov	r0, r5
   1527c:	bl	11388 <__fprintf_chk@plt>
   15280:	add	sp, sp, #36	; 0x24
   15284:	pop	{r4, r5, r6, r7, pc}
   15288:	bl	1140c <abort@plt>
   1528c:	ldr	r1, [pc, #620]	; 15500 <close_stdout@@Base+0x21a8>
   15290:	mov	r2, #5
   15294:	mov	r0, #0
   15298:	add	r1, pc, r1
   1529c:	bl	111e4 <dcgettext@plt>
   152a0:	ldr	r3, [r4]
   152a4:	mov	r1, #1
   152a8:	mov	r2, r0
   152ac:	mov	r0, r5
   152b0:	add	sp, sp, #36	; 0x24
   152b4:	pop	{r4, r5, r6, r7, lr}
   152b8:	b	11388 <__fprintf_chk@plt>
   152bc:	ldr	r1, [pc, #576]	; 15504 <close_stdout@@Base+0x21ac>
   152c0:	mov	r2, #5
   152c4:	mov	r0, #0
   152c8:	add	r1, pc, r1
   152cc:	bl	111e4 <dcgettext@plt>
   152d0:	ldm	r4, {r3, ip}
   152d4:	mov	r1, #1
   152d8:	str	ip, [sp, #56]	; 0x38
   152dc:	mov	r2, r0
   152e0:	mov	r0, r5
   152e4:	add	sp, sp, #36	; 0x24
   152e8:	pop	{r4, r5, r6, r7, lr}
   152ec:	b	11388 <__fprintf_chk@plt>
   152f0:	ldr	r1, [pc, #528]	; 15508 <close_stdout@@Base+0x21b0>
   152f4:	mov	r2, #5
   152f8:	mov	r0, #0
   152fc:	add	r1, pc, r1
   15300:	bl	111e4 <dcgettext@plt>
   15304:	ldm	r4, {r3, ip}
   15308:	mov	r1, #1
   1530c:	str	ip, [sp, #56]	; 0x38
   15310:	ldr	ip, [r4, #8]
   15314:	str	ip, [sp, #60]	; 0x3c
   15318:	mov	r2, r0
   1531c:	mov	r0, r5
   15320:	add	sp, sp, #36	; 0x24
   15324:	pop	{r4, r5, r6, r7, lr}
   15328:	b	11388 <__fprintf_chk@plt>
   1532c:	ldr	r1, [pc, #472]	; 1550c <close_stdout@@Base+0x21b4>
   15330:	mov	r2, #5
   15334:	mov	r0, #0
   15338:	add	r1, pc, r1
   1533c:	bl	111e4 <dcgettext@plt>
   15340:	ldm	r4, {r3, ip}
   15344:	mov	r1, #1
   15348:	str	ip, [sp]
   1534c:	ldr	ip, [r4, #8]
   15350:	str	ip, [sp, #4]
   15354:	ldr	ip, [r4, #12]
   15358:	str	ip, [sp, #8]
   1535c:	mov	r2, r0
   15360:	mov	r0, r5
   15364:	bl	11388 <__fprintf_chk@plt>
   15368:	b	15280 <close_stdout@@Base+0x1f28>
   1536c:	ldr	r1, [pc, #412]	; 15510 <close_stdout@@Base+0x21b8>
   15370:	mov	r2, #5
   15374:	mov	r0, #0
   15378:	add	r1, pc, r1
   1537c:	bl	111e4 <dcgettext@plt>
   15380:	ldm	r4, {r3, ip}
   15384:	mov	r1, #1
   15388:	str	ip, [sp]
   1538c:	ldr	ip, [r4, #8]
   15390:	str	ip, [sp, #4]
   15394:	ldr	ip, [r4, #12]
   15398:	str	ip, [sp, #8]
   1539c:	ldr	ip, [r4, #16]
   153a0:	str	ip, [sp, #12]
   153a4:	mov	r2, r0
   153a8:	mov	r0, r5
   153ac:	bl	11388 <__fprintf_chk@plt>
   153b0:	b	15280 <close_stdout@@Base+0x1f28>
   153b4:	ldr	r1, [pc, #344]	; 15514 <close_stdout@@Base+0x21bc>
   153b8:	mov	r2, #5
   153bc:	mov	r0, #0
   153c0:	add	r1, pc, r1
   153c4:	bl	111e4 <dcgettext@plt>
   153c8:	ldm	r4, {r3, ip}
   153cc:	mov	r1, #1
   153d0:	str	ip, [sp]
   153d4:	ldr	ip, [r4, #8]
   153d8:	str	ip, [sp, #4]
   153dc:	ldr	ip, [r4, #12]
   153e0:	str	ip, [sp, #8]
   153e4:	ldr	ip, [r4, #16]
   153e8:	str	ip, [sp, #12]
   153ec:	ldr	ip, [r4, #20]
   153f0:	str	ip, [sp, #16]
   153f4:	mov	r2, r0
   153f8:	mov	r0, r5
   153fc:	bl	11388 <__fprintf_chk@plt>
   15400:	b	15280 <close_stdout@@Base+0x1f28>
   15404:	ldr	r1, [pc, #268]	; 15518 <close_stdout@@Base+0x21c0>
   15408:	mov	r2, #5
   1540c:	mov	r0, #0
   15410:	add	r1, pc, r1
   15414:	bl	111e4 <dcgettext@plt>
   15418:	ldm	r4, {r3, ip}
   1541c:	mov	r1, #1
   15420:	str	ip, [sp]
   15424:	ldr	ip, [r4, #8]
   15428:	str	ip, [sp, #4]
   1542c:	ldr	ip, [r4, #12]
   15430:	str	ip, [sp, #8]
   15434:	ldr	ip, [r4, #16]
   15438:	str	ip, [sp, #12]
   1543c:	ldr	ip, [r4, #20]
   15440:	str	ip, [sp, #16]
   15444:	ldr	ip, [r4, #24]
   15448:	str	ip, [sp, #20]
   1544c:	mov	r2, r0
   15450:	mov	r0, r5
   15454:	bl	11388 <__fprintf_chk@plt>
   15458:	b	15280 <close_stdout@@Base+0x1f28>
   1545c:	ldr	r1, [pc, #184]	; 1551c <close_stdout@@Base+0x21c4>
   15460:	mov	r2, #5
   15464:	mov	r0, #0
   15468:	add	r1, pc, r1
   1546c:	bl	111e4 <dcgettext@plt>
   15470:	ldm	r4, {r3, ip}
   15474:	mov	r1, #1
   15478:	str	ip, [sp]
   1547c:	ldr	ip, [r4, #8]
   15480:	str	ip, [sp, #4]
   15484:	ldr	ip, [r4, #12]
   15488:	str	ip, [sp, #8]
   1548c:	ldr	ip, [r4, #16]
   15490:	str	ip, [sp, #12]
   15494:	ldr	ip, [r4, #20]
   15498:	str	ip, [sp, #16]
   1549c:	ldr	ip, [r4, #24]
   154a0:	str	ip, [sp, #20]
   154a4:	ldr	ip, [r4, #28]
   154a8:	str	ip, [sp, #24]
   154ac:	mov	r2, r0
   154b0:	mov	r0, r5
   154b4:	bl	11388 <__fprintf_chk@plt>
   154b8:	b	15280 <close_stdout@@Base+0x1f28>
   154bc:	str	r3, [sp]
   154c0:	mov	r3, r2
   154c4:	ldr	r2, [pc, #84]	; 15520 <close_stdout@@Base+0x21c8>
   154c8:	mov	r1, #1
   154cc:	add	r2, pc, r2
   154d0:	bl	11388 <__fprintf_chk@plt>
   154d4:	b	15198 <close_stdout@@Base+0x1e40>
   154d8:	ldr	r1, [pc, #68]	; 15524 <close_stdout@@Base+0x21cc>
   154dc:	mov	r0, #0
   154e0:	add	r1, pc, r1
   154e4:	b	15228 <close_stdout@@Base+0x1ed0>
   154e8:	andeq	r2, r1, ip, lsl #29
   154ec:	andeq	r2, r0, r0, asr #8
   154f0:	andeq	r2, r0, r0, asr #8
   154f4:	andeq	r0, r0, r8, asr #2
   154f8:	andeq	r2, r0, r0, lsl r4
   154fc:	muleq	r0, ip, r5
   15500:	andeq	r2, r0, ip, lsl r4
   15504:	strdeq	r2, [r0], -ip
   15508:	andeq	r2, r0, r0, ror #7
   1550c:	andeq	r2, r0, r0, asr #7
   15510:	andeq	r2, r0, r0, lsr #7
   15514:	andeq	r2, r0, ip, ror r3
   15518:	andeq	r2, r0, r4, asr r3
   1551c:	andeq	r2, r0, r8, lsr #6
   15520:	andeq	r2, r0, r0, lsl r1
   15524:	andeq	r2, r0, r4, lsl r3
   15528:	push	{r4, r5, lr}
   1552c:	sub	sp, sp, #12
   15530:	ldr	r5, [sp, #24]
   15534:	ldr	ip, [r5]
   15538:	cmp	ip, #0
   1553c:	beq	15558 <close_stdout@@Base+0x2200>
   15540:	mov	lr, r5
   15544:	mov	ip, #0
   15548:	ldr	r4, [lr, #4]!
   1554c:	add	ip, ip, #1
   15550:	cmp	r4, #0
   15554:	bne	15548 <close_stdout@@Base+0x21f0>
   15558:	stm	sp, {r5, ip}
   1555c:	bl	15154 <close_stdout@@Base+0x1dfc>
   15560:	add	sp, sp, #12
   15564:	pop	{r4, r5, pc}
   15568:	push	{r4, r5, r6, r7, lr}
   1556c:	sub	sp, sp, #60	; 0x3c
   15570:	ldr	r4, [pc, #100]	; 155dc <close_stdout@@Base+0x2284>
   15574:	mov	ip, #0
   15578:	ldr	r5, [pc, #96]	; 155e0 <close_stdout@@Base+0x2288>
   1557c:	mov	lr, ip
   15580:	add	r4, pc, r4
   15584:	ldr	r6, [sp, #80]	; 0x50
   15588:	ldr	r7, [r4, r5]
   1558c:	add	r5, sp, #12
   15590:	ldr	r4, [r7]
   15594:	str	r4, [sp, #52]	; 0x34
   15598:	ldr	r4, [r6, ip]
   1559c:	cmp	r4, #0
   155a0:	str	r4, [r5, ip]
   155a4:	beq	155b8 <close_stdout@@Base+0x2260>
   155a8:	add	lr, lr, #1
   155ac:	add	ip, ip, #4
   155b0:	cmp	lr, #10
   155b4:	bne	15598 <close_stdout@@Base+0x2240>
   155b8:	stm	sp, {r5, lr}
   155bc:	bl	15154 <close_stdout@@Base+0x1dfc>
   155c0:	ldr	r2, [sp, #52]	; 0x34
   155c4:	ldr	r3, [r7]
   155c8:	cmp	r2, r3
   155cc:	bne	155d8 <close_stdout@@Base+0x2280>
   155d0:	add	sp, sp, #60	; 0x3c
   155d4:	pop	{r4, r5, r6, r7, pc}
   155d8:	bl	111f0 <__stack_chk_fail@plt>
   155dc:	andeq	r2, r1, r8, ror sl
   155e0:	andeq	r0, r0, r4, lsl r1
   155e4:	push	{r3}		; (str r3, [sp, #-4]!)
   155e8:	push	{r4, lr}
   155ec:	sub	sp, sp, #20
   155f0:	ldr	lr, [pc, #72]	; 15640 <close_stdout@@Base+0x22e8>
   155f4:	add	ip, sp, #32
   155f8:	ldr	r4, [pc, #68]	; 15644 <close_stdout@@Base+0x22ec>
   155fc:	add	lr, pc, lr
   15600:	ldr	r3, [sp, #28]
   15604:	ldr	r4, [lr, r4]
   15608:	str	ip, [sp]
   1560c:	str	ip, [sp, #8]
   15610:	ldr	ip, [r4]
   15614:	str	ip, [sp, #12]
   15618:	bl	15568 <close_stdout@@Base+0x2210>
   1561c:	ldr	r2, [sp, #12]
   15620:	ldr	r3, [r4]
   15624:	cmp	r2, r3
   15628:	bne	1563c <close_stdout@@Base+0x22e4>
   1562c:	add	sp, sp, #20
   15630:	pop	{r4, lr}
   15634:	add	sp, sp, #4
   15638:	bx	lr
   1563c:	bl	111f0 <__stack_chk_fail@plt>
   15640:	strdeq	r2, [r1], -ip
   15644:	andeq	r0, r0, r4, lsl r1
   15648:	ldr	r1, [pc, #132]	; 156d4 <close_stdout@@Base+0x237c>
   1564c:	mov	r2, #5
   15650:	push	{r4, lr}
   15654:	add	r1, pc, r1
   15658:	mov	r0, #0
   1565c:	ldr	r4, [pc, #116]	; 156d8 <close_stdout@@Base+0x2380>
   15660:	bl	111e4 <dcgettext@plt>
   15664:	ldr	r2, [pc, #112]	; 156dc <close_stdout@@Base+0x2384>
   15668:	add	r4, pc, r4
   1566c:	add	r2, pc, r2
   15670:	mov	r1, r0
   15674:	mov	r0, #1
   15678:	bl	11370 <__printf_chk@plt>
   1567c:	ldr	r1, [pc, #92]	; 156e0 <close_stdout@@Base+0x2388>
   15680:	mov	r2, #5
   15684:	mov	r0, #0
   15688:	add	r1, pc, r1
   1568c:	bl	111e4 <dcgettext@plt>
   15690:	ldr	r2, [pc, #76]	; 156e4 <close_stdout@@Base+0x238c>
   15694:	ldr	r3, [pc, #76]	; 156e8 <close_stdout@@Base+0x2390>
   15698:	add	r2, pc, r2
   1569c:	add	r3, pc, r3
   156a0:	mov	r1, r0
   156a4:	mov	r0, #1
   156a8:	bl	11370 <__printf_chk@plt>
   156ac:	ldr	r1, [pc, #56]	; 156ec <close_stdout@@Base+0x2394>
   156b0:	mov	r0, #0
   156b4:	mov	r2, #5
   156b8:	add	r1, pc, r1
   156bc:	bl	111e4 <dcgettext@plt>
   156c0:	ldr	r3, [pc, #40]	; 156f0 <close_stdout@@Base+0x2398>
   156c4:	ldr	r3, [r4, r3]
   156c8:	pop	{r4, lr}
   156cc:	ldr	r1, [r3]
   156d0:	b	1113c <fputs_unlocked@plt>
   156d4:	ldrdeq	r2, [r0], -ip
   156d8:	muleq	r1, r0, r9
   156dc:	ldrdeq	r2, [r0], -ip
   156e0:	ldrdeq	r2, [r0], -r8
   156e4:			; <UNDEFINED> instruction: 0x00001ab0
   156e8:			; <UNDEFINED> instruction: 0x00001abc
   156ec:			; <UNDEFINED> instruction: 0x000021bc
   156f0:	andeq	r0, r0, r8, lsr r1
   156f4:	push	{r4, lr}
   156f8:	mov	r4, r0
   156fc:	bl	112a4 <malloc@plt>
   15700:	rsbs	r3, r0, #1
   15704:	movcc	r3, #0
   15708:	cmp	r4, #0
   1570c:	moveq	r3, #0
   15710:	cmp	r3, #0
   15714:	popeq	{r4, pc}
   15718:	bl	15908 <close_stdout@@Base+0x25b0>
   1571c:	push	{r3, r4, r5, lr}
   15720:	mov	r4, r0
   15724:	mvn	r0, #0
   15728:	mov	r5, r1
   1572c:	bl	167cc <close_stdout@@Base+0x3474>
   15730:	cmp	r0, r4
   15734:	bcc	15744 <close_stdout@@Base+0x23ec>
   15738:	mul	r0, r4, r5
   1573c:	pop	{r3, r4, r5, lr}
   15740:	b	156f4 <close_stdout@@Base+0x239c>
   15744:	bl	15908 <close_stdout@@Base+0x25b0>
   15748:	b	156f4 <close_stdout@@Base+0x239c>
   1574c:	rsbs	r3, r1, #1
   15750:	push	{r4, lr}
   15754:	movcc	r3, #0
   15758:	cmp	r0, #0
   1575c:	mov	r4, r1
   15760:	moveq	r3, #0
   15764:	cmp	r3, #0
   15768:	bne	1578c <close_stdout@@Base+0x2434>
   1576c:	bl	11208 <realloc@plt>
   15770:	rsbs	r3, r0, #1
   15774:	movcc	r3, #0
   15778:	cmp	r4, #0
   1577c:	moveq	r3, #0
   15780:	cmp	r3, #0
   15784:	popeq	{r4, pc}
   15788:	bl	15908 <close_stdout@@Base+0x25b0>
   1578c:	bl	11190 <free@plt>
   15790:	mov	r0, #0
   15794:	pop	{r4, pc}
   15798:	push	{r4, r5, r6, lr}
   1579c:	mov	r5, r1
   157a0:	mov	r6, r0
   157a4:	mov	r1, r2
   157a8:	mvn	r0, #0
   157ac:	mov	r4, r2
   157b0:	bl	167cc <close_stdout@@Base+0x3474>
   157b4:	cmp	r0, r5
   157b8:	bcc	157cc <close_stdout@@Base+0x2474>
   157bc:	mov	r0, r6
   157c0:	mul	r1, r5, r4
   157c4:	pop	{r4, r5, r6, lr}
   157c8:	b	1574c <close_stdout@@Base+0x23f4>
   157cc:	bl	15908 <close_stdout@@Base+0x25b0>
   157d0:	push	{r3, r4, r5, r6, r7, lr}
   157d4:	subs	r7, r0, #0
   157d8:	mov	r5, r1
   157dc:	mov	r6, r2
   157e0:	ldr	r4, [r1]
   157e4:	beq	1581c <close_stdout@@Base+0x24c4>
   157e8:	movw	r0, #43690	; 0xaaaa
   157ec:	mov	r1, r2
   157f0:	bfi	r0, r0, #16, #16
   157f4:	bl	167cc <close_stdout@@Base+0x3474>
   157f8:	cmp	r4, r0
   157fc:	addcc	r3, r4, #1
   15800:	addcc	r4, r4, r3, lsr #1
   15804:	bcs	15840 <close_stdout@@Base+0x24e8>
   15808:	str	r4, [r5]
   1580c:	mov	r0, r7
   15810:	mul	r1, r6, r4
   15814:	pop	{r3, r4, r5, r6, r7, lr}
   15818:	b	1574c <close_stdout@@Base+0x23f4>
   1581c:	cmp	r4, #0
   15820:	bne	15808 <close_stdout@@Base+0x24b0>
   15824:	mov	r0, #64	; 0x40
   15828:	mov	r1, r2
   1582c:	bl	167cc <close_stdout@@Base+0x3474>
   15830:	cmp	r0, #0
   15834:	movne	r4, r0
   15838:	addeq	r4, r0, #1
   1583c:	b	15808 <close_stdout@@Base+0x24b0>
   15840:	bl	15908 <close_stdout@@Base+0x25b0>
   15844:	cmp	r0, #0
   15848:	push	{r3, lr}
   1584c:	ldr	r3, [r1]
   15850:	beq	1587c <close_stdout@@Base+0x2524>
   15854:	movw	r2, #43689	; 0xaaa9
   15858:	movt	r2, #43690	; 0xaaaa
   1585c:	cmp	r3, r2
   15860:	addls	r2, r3, #1
   15864:	addls	r3, r3, r2, lsr #1
   15868:	bhi	15894 <close_stdout@@Base+0x253c>
   1586c:	str	r3, [r1]
   15870:	mov	r1, r3
   15874:	pop	{r3, lr}
   15878:	b	1574c <close_stdout@@Base+0x23f4>
   1587c:	cmp	r3, #0
   15880:	moveq	r3, #64	; 0x40
   15884:	str	r3, [r1]
   15888:	mov	r1, r3
   1588c:	pop	{r3, lr}
   15890:	b	1574c <close_stdout@@Base+0x23f4>
   15894:	bl	15908 <close_stdout@@Base+0x25b0>
   15898:	push	{r4, lr}
   1589c:	mov	r4, r0
   158a0:	bl	156f4 <close_stdout@@Base+0x239c>
   158a4:	mov	r2, r4
   158a8:	mov	r1, #0
   158ac:	pop	{r4, lr}
   158b0:	b	11358 <memset@plt>
   158b4:	push	{r3, lr}
   158b8:	bl	11130 <calloc@plt>
   158bc:	cmp	r0, #0
   158c0:	popne	{r3, pc}
   158c4:	bl	15908 <close_stdout@@Base+0x25b0>
   158c8:	push	{r3, r4, r5, lr}
   158cc:	mov	r4, r1
   158d0:	mov	r5, r0
   158d4:	mov	r0, r1
   158d8:	bl	156f4 <close_stdout@@Base+0x239c>
   158dc:	mov	r1, r5
   158e0:	mov	r2, r4
   158e4:	pop	{r3, r4, r5, lr}
   158e8:	b	111a8 <memcpy@plt>
   158ec:	push	{r4, lr}
   158f0:	mov	r4, r0
   158f4:	bl	1131c <strlen@plt>
   158f8:	add	r1, r0, #1
   158fc:	mov	r0, r4
   15900:	pop	{r4, lr}
   15904:	b	158c8 <close_stdout@@Base+0x2570>
   15908:	ldr	r3, [pc, #64]	; 15950 <close_stdout@@Base+0x25f8>
   1590c:	mov	r2, #5
   15910:	ldr	ip, [pc, #60]	; 15954 <close_stdout@@Base+0x25fc>
   15914:	mov	r0, #0
   15918:	add	r3, pc, r3
   1591c:	ldr	r1, [pc, #52]	; 15958 <close_stdout@@Base+0x2600>
   15920:	push	{r4, lr}
   15924:	add	r1, pc, r1
   15928:	ldr	r3, [r3, ip]
   1592c:	ldr	r4, [r3]
   15930:	bl	111e4 <dcgettext@plt>
   15934:	ldr	r2, [pc, #32]	; 1595c <close_stdout@@Base+0x2604>
   15938:	mov	r1, #0
   1593c:	add	r2, pc, r2
   15940:	mov	r3, r0
   15944:	mov	r0, r4
   15948:	bl	11274 <error@plt>
   1594c:	bl	1140c <abort@plt>
   15950:	andeq	r2, r1, r0, ror #13
   15954:	andeq	r0, r0, ip, lsr r1
   15958:	andeq	r1, r0, r0, asr #31
   1595c:	andeq	r1, r0, r8, ror r1
   15960:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15964:	mov	r9, r1
   15968:	ldr	r1, [pc, #196]	; 15a34 <close_stdout@@Base+0x26dc>
   1596c:	mov	r4, r0
   15970:	mov	r5, r2
   15974:	mov	r0, #0
   15978:	add	r1, pc, r1
   1597c:	mov	r2, #5
   15980:	mov	r8, r3
   15984:	ldr	r7, [sp, #32]
   15988:	bl	111e4 <dcgettext@plt>
   1598c:	mov	r1, r4
   15990:	ldr	r4, [pc, #160]	; 15a38 <close_stdout@@Base+0x26e0>
   15994:	add	r4, pc, r4
   15998:	mov	r2, r0
   1599c:	mov	r0, #0
   159a0:	bl	11274 <error@plt>
   159a4:	ldr	r1, [pc, #144]	; 15a3c <close_stdout@@Base+0x26e4>
   159a8:	mov	r2, #5
   159ac:	mov	r0, #0
   159b0:	add	r1, pc, r1
   159b4:	bl	111e4 <dcgettext@plt>
   159b8:	mov	r2, r0
   159bc:	mov	r0, #0
   159c0:	mov	r1, r0
   159c4:	bl	11274 <error@plt>
   159c8:	ldr	r3, [pc, #112]	; 15a40 <close_stdout@@Base+0x26e8>
   159cc:	ldr	r1, [pc, #112]	; 15a44 <close_stdout@@Base+0x26ec>
   159d0:	mov	r2, #5
   159d4:	mov	r0, #0
   159d8:	ldr	r3, [r4, r3]
   159dc:	add	r1, pc, r1
   159e0:	ldr	r4, [r3]
   159e4:	bl	111e4 <dcgettext@plt>
   159e8:	mov	r2, r9
   159ec:	mov	r3, r5
   159f0:	mov	r1, #6
   159f4:	mov	r6, r0
   159f8:	mov	r0, #0
   159fc:	bl	14eac <close_stdout@@Base+0x1b54>
   15a00:	mov	r2, r8
   15a04:	mov	r3, r7
   15a08:	mov	r1, #6
   15a0c:	mov	r5, r0
   15a10:	mov	r0, #1
   15a14:	bl	14eac <close_stdout@@Base+0x1b54>
   15a18:	mov	r2, r6
   15a1c:	mov	r3, r5
   15a20:	mov	r1, #0
   15a24:	str	r0, [sp, #32]
   15a28:	mov	r0, r4
   15a2c:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   15a30:	b	11274 <error@plt>
   15a34:	andeq	r1, r0, r0, lsl #31
   15a38:	andeq	r2, r1, r4, ror #12
   15a3c:	andeq	r1, r0, r4, ror #30
   15a40:	andeq	r0, r0, ip, lsr r1
   15a44:	andeq	r1, r0, r4, ror #30
   15a48:	push	{r4, r5, r6, r7, r8, lr}
   15a4c:	sub	sp, sp, #8
   15a50:	mov	r6, r1
   15a54:	mov	r5, r2
   15a58:	mov	r8, r3
   15a5c:	mov	r7, r0
   15a60:	bl	166f4 <close_stdout@@Base+0x339c>
   15a64:	mov	r4, r0
   15a68:	bl	11340 <__errno_location@plt>
   15a6c:	ldr	r0, [r0]
   15a70:	cmp	r0, #0
   15a74:	beq	15a8c <close_stdout@@Base+0x2734>
   15a78:	str	r8, [sp]
   15a7c:	mov	r1, r7
   15a80:	mov	r2, r6
   15a84:	mov	r3, r5
   15a88:	bl	15960 <close_stdout@@Base+0x2608>
   15a8c:	mov	r0, r4
   15a90:	add	sp, sp, #8
   15a94:	pop	{r4, r5, r6, r7, r8, pc}
   15a98:	push	{r4, r5, r6, r7, r8, lr}
   15a9c:	sub	sp, sp, #8
   15aa0:	mov	r6, r1
   15aa4:	mov	r5, r2
   15aa8:	mov	r8, r3
   15aac:	mov	r7, r0
   15ab0:	bl	16774 <close_stdout@@Base+0x341c>
   15ab4:	mov	r4, r0
   15ab8:	bl	11340 <__errno_location@plt>
   15abc:	ldr	r0, [r0]
   15ac0:	cmp	r0, #0
   15ac4:	beq	15ae0 <close_stdout@@Base+0x2788>
   15ac8:	sub	r8, r8, #1
   15acc:	mov	r1, r7
   15ad0:	str	r8, [sp]
   15ad4:	sub	r2, r6, #1
   15ad8:	mov	r3, r5
   15adc:	bl	15960 <close_stdout@@Base+0x2608>
   15ae0:	mov	r0, r4
   15ae4:	add	sp, sp, #8
   15ae8:	pop	{r4, r5, r6, r7, r8, pc}
   15aec:	ldr	ip, [pc, #1308]	; 16010 <close_stdout@@Base+0x2cb8>
   15af0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15af4:	mov	sl, r2
   15af8:	ldr	r2, [pc, #1300]	; 16014 <close_stdout@@Base+0x2cbc>
   15afc:	add	ip, pc, ip
   15b00:	mov	r9, r3
   15b04:	sub	sp, sp, #20
   15b08:	mov	r3, ip
   15b0c:	cmp	sl, #36	; 0x24
   15b10:	ldr	r6, [ip, r2]
   15b14:	mov	r5, r0
   15b18:	mov	r7, r1
   15b1c:	ldr	r8, [sp, #56]	; 0x38
   15b20:	ldr	r3, [r6]
   15b24:	str	r3, [sp, #12]
   15b28:	bhi	15ff0 <close_stdout@@Base+0x2c98>
   15b2c:	cmp	r1, #0
   15b30:	addeq	r7, sp, #8
   15b34:	bl	112f8 <__ctype_b_loc@plt>
   15b38:	ldrb	ip, [r5]
   15b3c:	mov	r2, r5
   15b40:	ldr	r1, [r0]
   15b44:	b	15b4c <close_stdout@@Base+0x27f4>
   15b48:	ldrb	ip, [r2, #1]!
   15b4c:	lsl	r3, ip, #1
   15b50:	ldrh	r4, [r1, r3]
   15b54:	and	r4, r4, #8192	; 0x2000
   15b58:	uxth	r4, r4
   15b5c:	cmp	r4, #0
   15b60:	bne	15b48 <close_stdout@@Base+0x27f0>
   15b64:	cmp	ip, #45	; 0x2d
   15b68:	bne	15b88 <close_stdout@@Base+0x2830>
   15b6c:	mov	r0, #4
   15b70:	ldr	r2, [sp, #12]
   15b74:	ldr	r3, [r6]
   15b78:	cmp	r2, r3
   15b7c:	bne	15fec <close_stdout@@Base+0x2c94>
   15b80:	add	sp, sp, #20
   15b84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b88:	bl	11340 <__errno_location@plt>
   15b8c:	mov	r2, sl
   15b90:	mov	r1, r7
   15b94:	str	r4, [r0]
   15b98:	mov	fp, r0
   15b9c:	mov	r0, r5
   15ba0:	bl	11310 <strtoul@plt>
   15ba4:	ldr	r3, [r7]
   15ba8:	cmp	r3, r5
   15bac:	mov	sl, r0
   15bb0:	beq	15d40 <close_stdout@@Base+0x29e8>
   15bb4:	ldr	r0, [fp]
   15bb8:	cmp	r0, #0
   15bbc:	bne	15bec <close_stdout@@Base+0x2894>
   15bc0:	mov	r4, r0
   15bc4:	cmp	r8, #0
   15bc8:	streq	sl, [r9]
   15bcc:	moveq	r0, r4
   15bd0:	beq	15b70 <close_stdout@@Base+0x2818>
   15bd4:	ldrb	r5, [r3]
   15bd8:	cmp	r5, #0
   15bdc:	bne	15bfc <close_stdout@@Base+0x28a4>
   15be0:	mov	r0, r4
   15be4:	str	sl, [r9]
   15be8:	b	15b70 <close_stdout@@Base+0x2818>
   15bec:	cmp	r0, #34	; 0x22
   15bf0:	moveq	r4, #1
   15bf4:	bne	15b6c <close_stdout@@Base+0x2814>
   15bf8:	b	15bc4 <close_stdout@@Base+0x286c>
   15bfc:	mov	r0, r8
   15c00:	mov	r1, r5
   15c04:	str	r3, [sp, #4]
   15c08:	bl	11328 <strchr@plt>
   15c0c:	ldr	r3, [sp, #4]
   15c10:	cmp	r0, #0
   15c14:	beq	15d78 <close_stdout@@Base+0x2a20>
   15c18:	mov	r0, r8
   15c1c:	mov	r1, #48	; 0x30
   15c20:	str	r3, [sp, #4]
   15c24:	bl	11328 <strchr@plt>
   15c28:	ldr	r3, [sp, #4]
   15c2c:	cmp	r0, #0
   15c30:	beq	15c50 <close_stdout@@Base+0x28f8>
   15c34:	ldrb	r2, [r3, #1]
   15c38:	cmp	r2, #68	; 0x44
   15c3c:	beq	15fd4 <close_stdout@@Base+0x2c7c>
   15c40:	cmp	r2, #105	; 0x69
   15c44:	beq	15fbc <close_stdout@@Base+0x2c64>
   15c48:	cmp	r2, #66	; 0x42
   15c4c:	beq	15fd4 <close_stdout@@Base+0x2c7c>
   15c50:	mov	r8, #1
   15c54:	mov	fp, #1024	; 0x400
   15c58:	sub	r5, r5, #66	; 0x42
   15c5c:	cmp	r5, #53	; 0x35
   15c60:	addls	pc, pc, r5, lsl #2
   15c64:	b	15d78 <close_stdout@@Base+0x2a20>
   15c68:	b	15f68 <close_stdout@@Base+0x2c10>
   15c6c:	b	15d78 <close_stdout@@Base+0x2a20>
   15c70:	b	15d78 <close_stdout@@Base+0x2a20>
   15c74:	b	15f28 <close_stdout@@Base+0x2bd0>
   15c78:	b	15d78 <close_stdout@@Base+0x2a20>
   15c7c:	b	15f7c <close_stdout@@Base+0x2c24>
   15c80:	b	15d78 <close_stdout@@Base+0x2a20>
   15c84:	b	15d78 <close_stdout@@Base+0x2a20>
   15c88:	b	15d78 <close_stdout@@Base+0x2a20>
   15c8c:	b	15f08 <close_stdout@@Base+0x2bb0>
   15c90:	b	15d78 <close_stdout@@Base+0x2a20>
   15c94:	b	15ed4 <close_stdout@@Base+0x2b7c>
   15c98:	b	15d78 <close_stdout@@Base+0x2a20>
   15c9c:	b	15d78 <close_stdout@@Base+0x2a20>
   15ca0:	b	15e94 <close_stdout@@Base+0x2b3c>
   15ca4:	b	15d78 <close_stdout@@Base+0x2a20>
   15ca8:	b	15d78 <close_stdout@@Base+0x2a20>
   15cac:	b	15d78 <close_stdout@@Base+0x2a20>
   15cb0:	b	15e54 <close_stdout@@Base+0x2afc>
   15cb4:	b	15d78 <close_stdout@@Base+0x2a20>
   15cb8:	b	15d78 <close_stdout@@Base+0x2a20>
   15cbc:	b	15d78 <close_stdout@@Base+0x2a20>
   15cc0:	b	15d78 <close_stdout@@Base+0x2a20>
   15cc4:	b	15e14 <close_stdout@@Base+0x2abc>
   15cc8:	b	15dd4 <close_stdout@@Base+0x2a7c>
   15ccc:	b	15d78 <close_stdout@@Base+0x2a20>
   15cd0:	b	15d78 <close_stdout@@Base+0x2a20>
   15cd4:	b	15d78 <close_stdout@@Base+0x2a20>
   15cd8:	b	15d78 <close_stdout@@Base+0x2a20>
   15cdc:	b	15d78 <close_stdout@@Base+0x2a20>
   15ce0:	b	15d78 <close_stdout@@Base+0x2a20>
   15ce4:	b	15d78 <close_stdout@@Base+0x2a20>
   15ce8:	b	15dc0 <close_stdout@@Base+0x2a68>
   15cec:	b	15d84 <close_stdout@@Base+0x2a2c>
   15cf0:	b	15d78 <close_stdout@@Base+0x2a20>
   15cf4:	b	15d78 <close_stdout@@Base+0x2a20>
   15cf8:	b	15d78 <close_stdout@@Base+0x2a20>
   15cfc:	b	15f7c <close_stdout@@Base+0x2c24>
   15d00:	b	15d78 <close_stdout@@Base+0x2a20>
   15d04:	b	15d78 <close_stdout@@Base+0x2a20>
   15d08:	b	15d78 <close_stdout@@Base+0x2a20>
   15d0c:	b	15f08 <close_stdout@@Base+0x2bb0>
   15d10:	b	15d78 <close_stdout@@Base+0x2a20>
   15d14:	b	15ed4 <close_stdout@@Base+0x2b7c>
   15d18:	b	15d78 <close_stdout@@Base+0x2a20>
   15d1c:	b	15d78 <close_stdout@@Base+0x2a20>
   15d20:	b	15d78 <close_stdout@@Base+0x2a20>
   15d24:	b	15d78 <close_stdout@@Base+0x2a20>
   15d28:	b	15d78 <close_stdout@@Base+0x2a20>
   15d2c:	b	15d78 <close_stdout@@Base+0x2a20>
   15d30:	b	15e54 <close_stdout@@Base+0x2afc>
   15d34:	b	15d78 <close_stdout@@Base+0x2a20>
   15d38:	b	15d78 <close_stdout@@Base+0x2a20>
   15d3c:	b	15da4 <close_stdout@@Base+0x2a4c>
   15d40:	cmp	r8, #0
   15d44:	beq	15b6c <close_stdout@@Base+0x2814>
   15d48:	ldrb	r5, [r5]
   15d4c:	cmp	r5, #0
   15d50:	beq	15b6c <close_stdout@@Base+0x2814>
   15d54:	mov	r0, r8
   15d58:	mov	r1, r5
   15d5c:	str	r3, [sp, #4]
   15d60:	bl	11328 <strchr@plt>
   15d64:	ldr	r3, [sp, #4]
   15d68:	cmp	r0, #0
   15d6c:	movne	sl, #1
   15d70:	bne	15c18 <close_stdout@@Base+0x28c0>
   15d74:	b	15b6c <close_stdout@@Base+0x2814>
   15d78:	str	sl, [r9]
   15d7c:	orr	r0, r4, #2
   15d80:	b	15b70 <close_stdout@@Base+0x2818>
   15d84:	mov	r2, #0
   15d88:	add	r1, r3, r8
   15d8c:	str	r1, [r7]
   15d90:	ldrb	r3, [r3, r8]
   15d94:	orr	r4, r4, r2
   15d98:	cmp	r3, #0
   15d9c:	orrne	r4, r4, #2
   15da0:	b	15be0 <close_stdout@@Base+0x2888>
   15da4:	cmn	sl, #-2147483647	; 0x80000001
   15da8:	lslls	sl, sl, #1
   15dac:	movls	r2, #0
   15db0:	bls	15d88 <close_stdout@@Base+0x2a30>
   15db4:	mvn	sl, #0
   15db8:	mov	r2, #1
   15dbc:	b	15d88 <close_stdout@@Base+0x2a30>
   15dc0:	cmp	sl, #8388608	; 0x800000
   15dc4:	lslcc	sl, sl, #9
   15dc8:	movcc	r2, #0
   15dcc:	bcc	15d88 <close_stdout@@Base+0x2a30>
   15dd0:	b	15db4 <close_stdout@@Base+0x2a5c>
   15dd4:	mov	r1, fp
   15dd8:	mvn	r0, #0
   15ddc:	str	r3, [sp, #4]
   15de0:	bl	167cc <close_stdout@@Base+0x3474>
   15de4:	ldr	r3, [sp, #4]
   15de8:	mov	r1, #7
   15dec:	mov	r2, #0
   15df0:	cmp	r0, sl
   15df4:	movcs	ip, #0
   15df8:	movcc	ip, #1
   15dfc:	mulcs	sl, fp, sl
   15e00:	mvncc	sl, #0
   15e04:	subs	r1, r1, #1
   15e08:	orr	r2, r2, ip
   15e0c:	bne	15df0 <close_stdout@@Base+0x2a98>
   15e10:	b	15d88 <close_stdout@@Base+0x2a30>
   15e14:	mov	r1, fp
   15e18:	mvn	r0, #0
   15e1c:	str	r3, [sp, #4]
   15e20:	bl	167cc <close_stdout@@Base+0x3474>
   15e24:	ldr	r3, [sp, #4]
   15e28:	mov	r1, #8
   15e2c:	mov	r2, #0
   15e30:	cmp	r0, sl
   15e34:	movcs	ip, #0
   15e38:	movcc	ip, #1
   15e3c:	mulcs	sl, fp, sl
   15e40:	mvncc	sl, #0
   15e44:	subs	r1, r1, #1
   15e48:	orr	r2, r2, ip
   15e4c:	bne	15e30 <close_stdout@@Base+0x2ad8>
   15e50:	b	15d88 <close_stdout@@Base+0x2a30>
   15e54:	mov	r1, fp
   15e58:	mvn	r0, #0
   15e5c:	str	r3, [sp, #4]
   15e60:	bl	167cc <close_stdout@@Base+0x3474>
   15e64:	ldr	r3, [sp, #4]
   15e68:	mov	r1, #4
   15e6c:	mov	r2, #0
   15e70:	cmp	r0, sl
   15e74:	movcs	ip, #0
   15e78:	movcc	ip, #1
   15e7c:	mulcs	sl, fp, sl
   15e80:	mvncc	sl, #0
   15e84:	subs	r1, r1, #1
   15e88:	orr	r2, r2, ip
   15e8c:	bne	15e70 <close_stdout@@Base+0x2b18>
   15e90:	b	15d88 <close_stdout@@Base+0x2a30>
   15e94:	mov	r1, fp
   15e98:	mvn	r0, #0
   15e9c:	str	r3, [sp, #4]
   15ea0:	bl	167cc <close_stdout@@Base+0x3474>
   15ea4:	ldr	r3, [sp, #4]
   15ea8:	mov	r1, #5
   15eac:	mov	r2, #0
   15eb0:	cmp	r0, sl
   15eb4:	movcs	ip, #0
   15eb8:	movcc	ip, #1
   15ebc:	mulcs	sl, fp, sl
   15ec0:	mvncc	sl, #0
   15ec4:	subs	r1, r1, #1
   15ec8:	orr	r2, r2, ip
   15ecc:	bne	15eb0 <close_stdout@@Base+0x2b58>
   15ed0:	b	15d88 <close_stdout@@Base+0x2a30>
   15ed4:	mvn	r0, #0
   15ed8:	mov	r1, fp
   15edc:	str	r3, [sp, #4]
   15ee0:	bl	167cc <close_stdout@@Base+0x3474>
   15ee4:	ldr	r3, [sp, #4]
   15ee8:	cmp	sl, r0
   15eec:	bhi	15fe0 <close_stdout@@Base+0x2c88>
   15ef0:	mul	sl, sl, fp
   15ef4:	cmp	r0, sl
   15ef8:	bcc	15fe0 <close_stdout@@Base+0x2c88>
   15efc:	mul	sl, fp, sl
   15f00:	mov	r2, #0
   15f04:	b	15d88 <close_stdout@@Base+0x2a30>
   15f08:	mvn	r0, #0
   15f0c:	mov	r1, fp
   15f10:	str	r3, [sp, #4]
   15f14:	bl	167cc <close_stdout@@Base+0x3474>
   15f18:	ldr	r3, [sp, #4]
   15f1c:	cmp	sl, r0
   15f20:	bhi	15db4 <close_stdout@@Base+0x2a5c>
   15f24:	b	15efc <close_stdout@@Base+0x2ba4>
   15f28:	mov	r1, fp
   15f2c:	mvn	r0, #0
   15f30:	str	r3, [sp, #4]
   15f34:	bl	167cc <close_stdout@@Base+0x3474>
   15f38:	ldr	r3, [sp, #4]
   15f3c:	mov	r1, #6
   15f40:	mov	r2, #0
   15f44:	cmp	r0, sl
   15f48:	movcs	ip, #0
   15f4c:	movcc	ip, #1
   15f50:	mulcs	sl, fp, sl
   15f54:	mvncc	sl, #0
   15f58:	subs	r1, r1, #1
   15f5c:	orr	r2, r2, ip
   15f60:	bne	15f44 <close_stdout@@Base+0x2bec>
   15f64:	b	15d88 <close_stdout@@Base+0x2a30>
   15f68:	cmp	sl, #4194304	; 0x400000
   15f6c:	lslcc	sl, sl, #10
   15f70:	movcc	r2, #0
   15f74:	bcc	15d88 <close_stdout@@Base+0x2a30>
   15f78:	b	15db4 <close_stdout@@Base+0x2a5c>
   15f7c:	mov	r1, fp
   15f80:	mvn	r0, #0
   15f84:	str	r3, [sp, #4]
   15f88:	bl	167cc <close_stdout@@Base+0x3474>
   15f8c:	ldr	r3, [sp, #4]
   15f90:	mov	r1, #3
   15f94:	mov	r2, #0
   15f98:	cmp	r0, sl
   15f9c:	movcs	ip, #0
   15fa0:	movcc	ip, #1
   15fa4:	mulcs	sl, fp, sl
   15fa8:	mvncc	sl, #0
   15fac:	subs	r1, r1, #1
   15fb0:	orr	r2, r2, ip
   15fb4:	bne	15f98 <close_stdout@@Base+0x2c40>
   15fb8:	b	15d88 <close_stdout@@Base+0x2a30>
   15fbc:	ldrb	r8, [r3, #2]
   15fc0:	mov	fp, #1024	; 0x400
   15fc4:	cmp	r8, #66	; 0x42
   15fc8:	moveq	r8, #3
   15fcc:	movne	r8, #1
   15fd0:	b	15c58 <close_stdout@@Base+0x2900>
   15fd4:	mov	r8, #2
   15fd8:	mov	fp, #1000	; 0x3e8
   15fdc:	b	15c58 <close_stdout@@Base+0x2900>
   15fe0:	mov	r2, #1
   15fe4:	mvn	sl, #0
   15fe8:	b	15d88 <close_stdout@@Base+0x2a30>
   15fec:	bl	111f0 <__stack_chk_fail@plt>
   15ff0:	ldr	r0, [pc, #32]	; 16018 <close_stdout@@Base+0x2cc0>
   15ff4:	mov	r2, #96	; 0x60
   15ff8:	ldr	r1, [pc, #28]	; 1601c <close_stdout@@Base+0x2cc4>
   15ffc:	ldr	r3, [pc, #28]	; 16020 <close_stdout@@Base+0x2cc8>
   16000:	add	r0, pc, r0
   16004:	add	r1, pc, r1
   16008:	add	r3, pc, r3
   1600c:	bl	11424 <__assert_fail@plt>
   16010:	strdeq	r2, [r1], -ip
   16014:	andeq	r0, r0, r4, lsl r1
   16018:	andeq	r1, r0, r4, ror r9
   1601c:	muleq	r0, r8, r9
   16020:	andeq	r1, r0, r0, ror #18
   16024:	push	{r4, r5, r6, lr}
   16028:	sub	sp, sp, #8
   1602c:	mov	r4, r0
   16030:	bl	1137c <fileno@plt>
   16034:	cmp	r0, #0
   16038:	mov	r0, r4
   1603c:	blt	160b8 <close_stdout@@Base+0x2d60>
   16040:	bl	112bc <__freading@plt>
   16044:	cmp	r0, #0
   16048:	bne	16084 <close_stdout@@Base+0x2d2c>
   1604c:	mov	r0, r4
   16050:	bl	160c4 <close_stdout@@Base+0x2d6c>
   16054:	cmp	r0, #0
   16058:	beq	160b4 <close_stdout@@Base+0x2d5c>
   1605c:	bl	11340 <__errno_location@plt>
   16060:	ldr	r6, [r0]
   16064:	mov	r5, r0
   16068:	mov	r0, r4
   1606c:	bl	11394 <fclose@plt>
   16070:	cmp	r6, #0
   16074:	mvnne	r0, #0
   16078:	strne	r6, [r5]
   1607c:	add	sp, sp, #8
   16080:	pop	{r4, r5, r6, pc}
   16084:	mov	r0, r4
   16088:	bl	1137c <fileno@plt>
   1608c:	mov	r1, #1
   16090:	mov	r2, #0
   16094:	mov	r3, #0
   16098:	str	r1, [sp]
   1609c:	bl	11238 <lseek64@plt>
   160a0:	mvn	r2, #0
   160a4:	mvn	r3, #0
   160a8:	cmp	r1, r3
   160ac:	cmpeq	r0, r2
   160b0:	bne	1604c <close_stdout@@Base+0x2cf4>
   160b4:	mov	r0, r4
   160b8:	add	sp, sp, #8
   160bc:	pop	{r4, r5, r6, lr}
   160c0:	b	11394 <fclose@plt>
   160c4:	push	{r4, lr}
   160c8:	subs	r4, r0, #0
   160cc:	sub	sp, sp, #8
   160d0:	beq	160e0 <close_stdout@@Base+0x2d88>
   160d4:	bl	112bc <__freading@plt>
   160d8:	cmp	r0, #0
   160dc:	bne	160f0 <close_stdout@@Base+0x2d98>
   160e0:	mov	r0, r4
   160e4:	add	sp, sp, #8
   160e8:	pop	{r4, lr}
   160ec:	b	11184 <fflush@plt>
   160f0:	ldr	r3, [r4]
   160f4:	tst	r3, #256	; 0x100
   160f8:	beq	160e0 <close_stdout@@Base+0x2d88>
   160fc:	mov	r3, #1
   16100:	mov	r0, r4
   16104:	str	r3, [sp]
   16108:	mov	r2, #0
   1610c:	mov	r3, #0
   16110:	bl	16124 <close_stdout@@Base+0x2dcc>
   16114:	mov	r0, r4
   16118:	add	sp, sp, #8
   1611c:	pop	{r4, lr}
   16120:	b	11184 <fflush@plt>
   16124:	push	{r4, r5, r6, r7, lr}
   16128:	sub	sp, sp, #20
   1612c:	ldmib	r0, {r1, ip}
   16130:	mov	r6, r0
   16134:	ldr	r4, [sp, #40]	; 0x28
   16138:	cmp	ip, r1
   1613c:	beq	16154 <close_stdout@@Base+0x2dfc>
   16140:	str	r4, [sp, #40]	; 0x28
   16144:	mov	r0, r6
   16148:	add	sp, sp, #20
   1614c:	pop	{r4, r5, r6, r7, lr}
   16150:	b	113a0 <fseeko64@plt>
   16154:	ldr	ip, [r0, #20]
   16158:	ldr	r1, [r0, #16]
   1615c:	cmp	ip, r1
   16160:	bne	16140 <close_stdout@@Base+0x2de8>
   16164:	ldr	r7, [r0, #36]	; 0x24
   16168:	cmp	r7, #0
   1616c:	bne	16140 <close_stdout@@Base+0x2de8>
   16170:	str	r2, [sp, #12]
   16174:	mvn	r5, #0
   16178:	str	r3, [sp, #8]
   1617c:	bl	1137c <fileno@plt>
   16180:	str	r4, [sp]
   16184:	mvn	r4, #0
   16188:	ldr	r2, [sp, #12]
   1618c:	ldr	r3, [sp, #8]
   16190:	bl	11238 <lseek64@plt>
   16194:	mov	r2, r0
   16198:	mov	r3, r1
   1619c:	cmp	r3, r5
   161a0:	cmpeq	r2, r4
   161a4:	beq	161c4 <close_stdout@@Base+0x2e6c>
   161a8:	ldr	r1, [r6]
   161ac:	mov	r0, r7
   161b0:	strd	r2, [r6, #80]	; 0x50
   161b4:	bic	r3, r1, #16
   161b8:	str	r3, [r6]
   161bc:	add	sp, sp, #20
   161c0:	pop	{r4, r5, r6, r7, pc}
   161c4:	mvn	r0, #0
   161c8:	b	161bc <close_stdout@@Base+0x2e64>
   161cc:	push	{r4, r5, r6, lr}
   161d0:	mov	r4, r0
   161d4:	bl	1125c <__fpending@plt>
   161d8:	mov	r6, r0
   161dc:	mov	r0, r4
   161e0:	ldr	r4, [r4]
   161e4:	bl	16024 <close_stdout@@Base+0x2ccc>
   161e8:	and	r4, r4, #32
   161ec:	adds	r5, r0, #0
   161f0:	movne	r5, #1
   161f4:	cmp	r4, #0
   161f8:	bne	16218 <close_stdout@@Base+0x2ec0>
   161fc:	cmp	r5, #0
   16200:	beq	16210 <close_stdout@@Base+0x2eb8>
   16204:	cmp	r6, #0
   16208:	beq	16234 <close_stdout@@Base+0x2edc>
   1620c:	mvn	r4, #0
   16210:	mov	r0, r4
   16214:	pop	{r4, r5, r6, pc}
   16218:	cmp	r5, #0
   1621c:	bne	1620c <close_stdout@@Base+0x2eb4>
   16220:	bl	11340 <__errno_location@plt>
   16224:	mvn	r4, #0
   16228:	str	r5, [r0]
   1622c:	mov	r0, r4
   16230:	pop	{r4, r5, r6, pc}
   16234:	bl	11340 <__errno_location@plt>
   16238:	ldr	r4, [r0]
   1623c:	subs	r4, r4, #9
   16240:	mvnne	r4, #0
   16244:	mov	r0, r4
   16248:	pop	{r4, r5, r6, pc}
   1624c:	ldr	r3, [pc, #984]	; 1662c <close_stdout@@Base+0x32d4>
   16250:	mov	r0, #14
   16254:	ldr	r2, [pc, #980]	; 16630 <close_stdout@@Base+0x32d8>
   16258:	add	r3, pc, r3
   1625c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16260:	sub	sp, sp, #132	; 0x84
   16264:	ldr	r6, [r3, r2]
   16268:	ldr	r3, [r6]
   1626c:	str	r3, [sp, #124]	; 0x7c
   16270:	bl	113dc <nl_langinfo@plt>
   16274:	subs	r5, r0, #0
   16278:	beq	1632c <close_stdout@@Base+0x2fd4>
   1627c:	ldr	r3, [pc, #944]	; 16634 <close_stdout@@Base+0x32dc>
   16280:	ldr	r4, [pc, r3]
   16284:	cmp	r4, #0
   16288:	beq	16338 <close_stdout@@Base+0x2fe0>
   1628c:	ldrb	r7, [r4]
   16290:	cmp	r7, #0
   16294:	bne	162c8 <close_stdout@@Base+0x2f70>
   16298:	b	16300 <close_stdout@@Base+0x2fa8>
   1629c:	mov	r0, r4
   162a0:	bl	1131c <strlen@plt>
   162a4:	add	r0, r0, #1
   162a8:	add	r7, r4, r0
   162ac:	mov	r0, r7
   162b0:	bl	1131c <strlen@plt>
   162b4:	add	r0, r0, #1
   162b8:	add	r4, r7, r0
   162bc:	ldrb	r7, [r7, r0]
   162c0:	cmp	r7, #0
   162c4:	beq	16300 <close_stdout@@Base+0x2fa8>
   162c8:	mov	r0, r5
   162cc:	mov	r1, r4
   162d0:	bl	11160 <strcmp@plt>
   162d4:	cmp	r0, #0
   162d8:	beq	162f0 <close_stdout@@Base+0x2f98>
   162dc:	cmp	r7, #42	; 0x2a
   162e0:	bne	1629c <close_stdout@@Base+0x2f44>
   162e4:	ldrb	r3, [r4, #1]
   162e8:	cmp	r3, #0
   162ec:	bne	1629c <close_stdout@@Base+0x2f44>
   162f0:	mov	r0, r4
   162f4:	bl	1131c <strlen@plt>
   162f8:	add	r0, r0, #1
   162fc:	add	r5, r4, r0
   16300:	ldrb	r3, [r5]
   16304:	cmp	r3, #0
   16308:	ldreq	r5, [pc, #808]	; 16638 <close_stdout@@Base+0x32e0>
   1630c:	addeq	r5, pc, r5
   16310:	ldr	r2, [sp, #124]	; 0x7c
   16314:	mov	r0, r5
   16318:	ldr	r3, [r6]
   1631c:	cmp	r2, r3
   16320:	bne	16600 <close_stdout@@Base+0x32a8>
   16324:	add	sp, sp, #132	; 0x84
   16328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1632c:	ldr	r5, [pc, #776]	; 1663c <close_stdout@@Base+0x32e4>
   16330:	add	r5, pc, r5
   16334:	b	1627c <close_stdout@@Base+0x2f24>
   16338:	ldr	r0, [pc, #768]	; 16640 <close_stdout@@Base+0x32e8>
   1633c:	add	r0, pc, r0
   16340:	bl	11298 <getenv@plt>
   16344:	subs	r8, r0, #0
   16348:	beq	165d8 <close_stdout@@Base+0x3280>
   1634c:	ldrb	r3, [r8]
   16350:	cmp	r3, #0
   16354:	beq	1656c <close_stdout@@Base+0x3214>
   16358:	bl	1131c <strlen@plt>
   1635c:	subs	sl, r0, #0
   16360:	subne	r3, sl, #1
   16364:	bne	1657c <close_stdout@@Base+0x3224>
   16368:	mov	r9, #0
   1636c:	mov	fp, r9
   16370:	add	r9, sl, r9
   16374:	add	r0, r9, #14
   16378:	bl	112a4 <malloc@plt>
   1637c:	subs	r7, r0, #0
   16380:	beq	165cc <close_stdout@@Base+0x3274>
   16384:	mov	r1, r8
   16388:	mov	r2, sl
   1638c:	bl	111a8 <memcpy@plt>
   16390:	cmp	fp, #0
   16394:	add	ip, r7, r9
   16398:	movne	r3, #47	; 0x2f
   1639c:	strbne	r3, [r7, sl]
   163a0:	ldr	r3, [pc, #668]	; 16644 <close_stdout@@Base+0x32ec>
   163a4:	add	r3, pc, r3
   163a8:	ldm	r3!, {r0, r1, r2}
   163ac:	ldrh	r3, [r3]
   163b0:	str	r0, [r7, r9]
   163b4:	mov	r0, r7
   163b8:	str	r1, [ip, #4]
   163bc:	mov	r1, #32768	; 0x8000
   163c0:	strh	r3, [ip, #12]
   163c4:	str	r2, [ip, #8]
   163c8:	bl	11280 <open64@plt>
   163cc:	subs	r8, r0, #0
   163d0:	blt	16594 <close_stdout@@Base+0x323c>
   163d4:	ldr	r1, [pc, #620]	; 16648 <close_stdout@@Base+0x32f0>
   163d8:	add	r1, pc, r1
   163dc:	bl	11124 <fdopen@plt>
   163e0:	subs	fp, r0, #0
   163e4:	beq	165ec <close_stdout@@Base+0x3294>
   163e8:	ldr	r0, [pc, #604]	; 1664c <close_stdout@@Base+0x32f4>
   163ec:	add	sl, sp, #20
   163f0:	add	r9, sp, #72	; 0x48
   163f4:	mov	r8, #0
   163f8:	add	r0, pc, r0
   163fc:	str	r0, [sp, #12]
   16400:	ldr	r3, [fp, #4]
   16404:	ldr	r2, [fp, #8]
   16408:	cmp	r3, r2
   1640c:	bcs	164f8 <close_stdout@@Base+0x31a0>
   16410:	add	r2, r3, #1
   16414:	str	r2, [fp, #4]
   16418:	ldrb	r0, [r3]
   1641c:	cmp	r0, #32
   16420:	beq	16400 <close_stdout@@Base+0x30a8>
   16424:	sub	r3, r0, #9
   16428:	cmp	r3, #1
   1642c:	bls	16400 <close_stdout@@Base+0x30a8>
   16430:	cmp	r0, #35	; 0x23
   16434:	beq	1650c <close_stdout@@Base+0x31b4>
   16438:	mov	r1, fp
   1643c:	bl	11334 <ungetc@plt>
   16440:	mov	r0, fp
   16444:	ldr	r1, [sp, #12]
   16448:	mov	r2, sl
   1644c:	mov	r3, r9
   16450:	bl	11364 <fscanf@plt>
   16454:	cmp	r0, #1
   16458:	ble	1653c <close_stdout@@Base+0x31e4>
   1645c:	mov	r0, sl
   16460:	bl	1131c <strlen@plt>
   16464:	str	r0, [sp, #8]
   16468:	mov	r0, r9
   1646c:	bl	1131c <strlen@plt>
   16470:	cmp	r8, #0
   16474:	mov	r2, r0
   16478:	bne	165a0 <close_stdout@@Base+0x3248>
   1647c:	ldr	r3, [sp, #8]
   16480:	str	r2, [sp]
   16484:	add	r8, r0, r3
   16488:	add	r0, r8, #3
   1648c:	add	r8, r8, #2
   16490:	bl	112a4 <malloc@plt>
   16494:	ldr	r2, [sp]
   16498:	mov	r3, r0
   1649c:	cmp	r3, #0
   164a0:	beq	16604 <close_stdout@@Base+0x32ac>
   164a4:	ldr	r0, [sp, #8]
   164a8:	movw	r1, #65534	; 0xfffe
   164ac:	movt	r1, #65535	; 0xffff
   164b0:	rsb	r2, r2, r8
   164b4:	rsb	r1, r0, r1
   164b8:	stm	sp, {r2, r3}
   164bc:	add	r0, r1, r2
   164c0:	mov	r1, sl
   164c4:	add	r0, r3, r0
   164c8:	mov	r4, r3
   164cc:	bl	11250 <strcpy@plt>
   164d0:	ldr	r2, [sp]
   164d4:	ldr	r3, [sp, #4]
   164d8:	mov	r1, r9
   164dc:	sub	r0, r2, #1
   164e0:	add	r0, r3, r0
   164e4:	bl	11250 <strcpy@plt>
   164e8:	ldr	r3, [fp, #4]
   164ec:	ldr	r2, [fp, #8]
   164f0:	cmp	r3, r2
   164f4:	bcc	16410 <close_stdout@@Base+0x30b8>
   164f8:	mov	r0, fp
   164fc:	bl	113ac <__uflow@plt>
   16500:	cmn	r0, #1
   16504:	beq	1653c <close_stdout@@Base+0x31e4>
   16508:	b	1641c <close_stdout@@Base+0x30c4>
   1650c:	ldr	r3, [fp, #4]
   16510:	ldr	r2, [fp, #8]
   16514:	cmp	r3, r2
   16518:	bcs	16620 <close_stdout@@Base+0x32c8>
   1651c:	add	r2, r3, #1
   16520:	str	r2, [fp, #4]
   16524:	ldrb	r0, [r3]
   16528:	cmp	r0, #10
   1652c:	cmnne	r0, #1
   16530:	bne	1650c <close_stdout@@Base+0x31b4>
   16534:	cmn	r0, #1
   16538:	bne	16400 <close_stdout@@Base+0x30a8>
   1653c:	mov	r0, fp
   16540:	bl	16024 <close_stdout@@Base+0x2ccc>
   16544:	cmp	r8, #0
   16548:	beq	16594 <close_stdout@@Base+0x323c>
   1654c:	mov	r3, #0
   16550:	strb	r3, [r4, r8]
   16554:	mov	r0, r7
   16558:	bl	11190 <free@plt>
   1655c:	ldr	r3, [pc, #236]	; 16650 <close_stdout@@Base+0x32f8>
   16560:	add	r3, pc, r3
   16564:	str	r4, [r3]
   16568:	b	1628c <close_stdout@@Base+0x2f34>
   1656c:	ldr	r8, [pc, #224]	; 16654 <close_stdout@@Base+0x32fc>
   16570:	mov	r3, #7
   16574:	mov	sl, #8
   16578:	add	r8, pc, r8
   1657c:	ldrb	r3, [r8, r3]
   16580:	cmp	r3, #47	; 0x2f
   16584:	movne	r9, #1
   16588:	movne	fp, r9
   1658c:	bne	16370 <close_stdout@@Base+0x3018>
   16590:	b	16368 <close_stdout@@Base+0x3010>
   16594:	ldr	r4, [pc, #188]	; 16658 <close_stdout@@Base+0x3300>
   16598:	add	r4, pc, r4
   1659c:	b	16554 <close_stdout@@Base+0x31fc>
   165a0:	ldr	r0, [sp, #8]
   165a4:	str	r2, [sp]
   165a8:	add	r3, r0, r2
   165ac:	mov	r0, r4
   165b0:	add	r8, r3, r8
   165b4:	add	r1, r8, #3
   165b8:	add	r8, r8, #2
   165bc:	bl	11208 <realloc@plt>
   165c0:	ldr	r2, [sp]
   165c4:	mov	r3, r0
   165c8:	b	1649c <close_stdout@@Base+0x3144>
   165cc:	ldr	r4, [pc, #136]	; 1665c <close_stdout@@Base+0x3304>
   165d0:	add	r4, pc, r4
   165d4:	b	1655c <close_stdout@@Base+0x3204>
   165d8:	ldr	r8, [pc, #128]	; 16660 <close_stdout@@Base+0x3308>
   165dc:	mov	r3, #7
   165e0:	mov	sl, #8
   165e4:	add	r8, pc, r8
   165e8:	b	1657c <close_stdout@@Base+0x3224>
   165ec:	ldr	r4, [pc, #112]	; 16664 <close_stdout@@Base+0x330c>
   165f0:	mov	r0, r8
   165f4:	add	r4, pc, r4
   165f8:	bl	11418 <close@plt>
   165fc:	b	16554 <close_stdout@@Base+0x31fc>
   16600:	bl	111f0 <__stack_chk_fail@plt>
   16604:	mov	r0, r4
   16608:	ldr	r4, [pc, #88]	; 16668 <close_stdout@@Base+0x3310>
   1660c:	bl	11190 <free@plt>
   16610:	mov	r0, fp
   16614:	add	r4, pc, r4
   16618:	bl	16024 <close_stdout@@Base+0x2ccc>
   1661c:	b	16554 <close_stdout@@Base+0x31fc>
   16620:	mov	r0, fp
   16624:	bl	113ac <__uflow@plt>
   16628:	b	16528 <close_stdout@@Base+0x31d0>
   1662c:	andeq	r1, r1, r0, lsr #27
   16630:	andeq	r0, r0, r4, lsl r1
   16634:	andeq	r2, r1, r4, lsl #1
   16638:	andeq	r1, r0, ip, lsr #13
   1663c:	ldrdeq	r0, [r0], -ip
   16640:	andeq	r1, r0, r4, lsl #13
   16644:	andeq	r1, r0, ip, lsr #12
   16648:	ldrdeq	r0, [r0], -ip
   1664c:	andeq	r1, r0, r8, ror #11
   16650:	andeq	r1, r1, r4, lsr #27
   16654:	andeq	r1, r0, r4, lsr r4
   16658:	andeq	r0, r0, r4, ror ip
   1665c:	andeq	r0, r0, ip, lsr ip
   16660:	andeq	r1, r0, r8, asr #7
   16664:	andeq	r0, r0, r8, lsl ip
   16668:	strdeq	r0, [r0], -r8
   1666c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16670:	mov	r4, r0
   16674:	mov	r8, r1
   16678:	mov	r5, r2
   1667c:	mov	r6, r3
   16680:	bl	11340 <__errno_location@plt>
   16684:	mov	sl, #0
   16688:	mov	r9, r0
   1668c:	str	sl, [r9]
   16690:	mov	r0, r4
   16694:	mov	r1, r5
   16698:	bl	1128c <strcoll@plt>
   1669c:	subs	r3, r0, #0
   166a0:	mov	r0, r4
   166a4:	beq	166b0 <close_stdout@@Base+0x3358>
   166a8:	mov	r0, r3
   166ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166b0:	bl	1131c <strlen@plt>
   166b4:	add	r7, r0, #1
   166b8:	mov	r0, r5
   166bc:	bl	1131c <strlen@plt>
   166c0:	subs	r8, r8, r7
   166c4:	add	r4, r4, r7
   166c8:	add	r0, r0, #1
   166cc:	add	r5, r5, r0
   166d0:	rsb	r6, r0, r6
   166d4:	beq	166e8 <close_stdout@@Base+0x3390>
   166d8:	cmp	r6, #0
   166dc:	bne	1668c <close_stdout@@Base+0x3334>
   166e0:	mov	r0, #1
   166e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166e8:	subs	r0, r6, #0
   166ec:	mvnne	r0, #0
   166f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   166f4:	cmp	r1, r3
   166f8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   166fc:	mov	r4, r1
   16700:	mov	r5, r3
   16704:	mov	r6, r2
   16708:	mov	r7, r0
   1670c:	beq	1674c <close_stdout@@Base+0x33f4>
   16710:	ldrb	r9, [r7, r4]
   16714:	mov	r3, #0
   16718:	ldrb	r8, [r6, r5]
   1671c:	mov	r0, r7
   16720:	strb	r3, [r7, r4]
   16724:	add	r1, r4, #1
   16728:	strb	r3, [r6, r5]
   1672c:	mov	r2, r6
   16730:	add	r3, r5, #1
   16734:	bl	1666c <close_stdout@@Base+0x3314>
   16738:	strb	r9, [r7, r4]
   1673c:	strb	r8, [r6, r5]
   16740:	mov	r3, r0
   16744:	mov	r0, r3
   16748:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1674c:	mov	r1, r2
   16750:	mov	r2, r4
   16754:	bl	111d8 <memcmp@plt>
   16758:	subs	r8, r0, #0
   1675c:	bne	16710 <close_stdout@@Base+0x33b8>
   16760:	bl	11340 <__errno_location@plt>
   16764:	mov	r3, r8
   16768:	str	r8, [r0]
   1676c:	mov	r0, r3
   16770:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16774:	cmp	r1, r3
   16778:	push	{r4, r5, r6, r7, r8, lr}
   1677c:	mov	r4, r1
   16780:	mov	r5, r3
   16784:	mov	r6, r2
   16788:	mov	r7, r0
   1678c:	beq	167a8 <close_stdout@@Base+0x3450>
   16790:	mov	r0, r7
   16794:	mov	r1, r4
   16798:	mov	r2, r6
   1679c:	mov	r3, r5
   167a0:	pop	{r4, r5, r6, r7, r8, lr}
   167a4:	b	1666c <close_stdout@@Base+0x3314>
   167a8:	mov	r1, r2
   167ac:	mov	r2, r4
   167b0:	bl	111d8 <memcmp@plt>
   167b4:	subs	r8, r0, #0
   167b8:	bne	16790 <close_stdout@@Base+0x3438>
   167bc:	bl	11340 <__errno_location@plt>
   167c0:	str	r8, [r0]
   167c4:	mov	r0, r8
   167c8:	pop	{r4, r5, r6, r7, r8, pc}
   167cc:	subs	r2, r1, #1
   167d0:	bxeq	lr
   167d4:	bcc	169ac <close_stdout@@Base+0x3654>
   167d8:	cmp	r0, r1
   167dc:	bls	16990 <close_stdout@@Base+0x3638>
   167e0:	tst	r1, r2
   167e4:	beq	1699c <close_stdout@@Base+0x3644>
   167e8:	clz	r3, r0
   167ec:	clz	r2, r1
   167f0:	sub	r3, r2, r3
   167f4:	rsbs	r3, r3, #31
   167f8:	addne	r3, r3, r3, lsl #1
   167fc:	mov	r2, #0
   16800:	addne	pc, pc, r3, lsl #2
   16804:	nop	{0}
   16808:	cmp	r0, r1, lsl #31
   1680c:	adc	r2, r2, r2
   16810:	subcs	r0, r0, r1, lsl #31
   16814:	cmp	r0, r1, lsl #30
   16818:	adc	r2, r2, r2
   1681c:	subcs	r0, r0, r1, lsl #30
   16820:	cmp	r0, r1, lsl #29
   16824:	adc	r2, r2, r2
   16828:	subcs	r0, r0, r1, lsl #29
   1682c:	cmp	r0, r1, lsl #28
   16830:	adc	r2, r2, r2
   16834:	subcs	r0, r0, r1, lsl #28
   16838:	cmp	r0, r1, lsl #27
   1683c:	adc	r2, r2, r2
   16840:	subcs	r0, r0, r1, lsl #27
   16844:	cmp	r0, r1, lsl #26
   16848:	adc	r2, r2, r2
   1684c:	subcs	r0, r0, r1, lsl #26
   16850:	cmp	r0, r1, lsl #25
   16854:	adc	r2, r2, r2
   16858:	subcs	r0, r0, r1, lsl #25
   1685c:	cmp	r0, r1, lsl #24
   16860:	adc	r2, r2, r2
   16864:	subcs	r0, r0, r1, lsl #24
   16868:	cmp	r0, r1, lsl #23
   1686c:	adc	r2, r2, r2
   16870:	subcs	r0, r0, r1, lsl #23
   16874:	cmp	r0, r1, lsl #22
   16878:	adc	r2, r2, r2
   1687c:	subcs	r0, r0, r1, lsl #22
   16880:	cmp	r0, r1, lsl #21
   16884:	adc	r2, r2, r2
   16888:	subcs	r0, r0, r1, lsl #21
   1688c:	cmp	r0, r1, lsl #20
   16890:	adc	r2, r2, r2
   16894:	subcs	r0, r0, r1, lsl #20
   16898:	cmp	r0, r1, lsl #19
   1689c:	adc	r2, r2, r2
   168a0:	subcs	r0, r0, r1, lsl #19
   168a4:	cmp	r0, r1, lsl #18
   168a8:	adc	r2, r2, r2
   168ac:	subcs	r0, r0, r1, lsl #18
   168b0:	cmp	r0, r1, lsl #17
   168b4:	adc	r2, r2, r2
   168b8:	subcs	r0, r0, r1, lsl #17
   168bc:	cmp	r0, r1, lsl #16
   168c0:	adc	r2, r2, r2
   168c4:	subcs	r0, r0, r1, lsl #16
   168c8:	cmp	r0, r1, lsl #15
   168cc:	adc	r2, r2, r2
   168d0:	subcs	r0, r0, r1, lsl #15
   168d4:	cmp	r0, r1, lsl #14
   168d8:	adc	r2, r2, r2
   168dc:	subcs	r0, r0, r1, lsl #14
   168e0:	cmp	r0, r1, lsl #13
   168e4:	adc	r2, r2, r2
   168e8:	subcs	r0, r0, r1, lsl #13
   168ec:	cmp	r0, r1, lsl #12
   168f0:	adc	r2, r2, r2
   168f4:	subcs	r0, r0, r1, lsl #12
   168f8:	cmp	r0, r1, lsl #11
   168fc:	adc	r2, r2, r2
   16900:	subcs	r0, r0, r1, lsl #11
   16904:	cmp	r0, r1, lsl #10
   16908:	adc	r2, r2, r2
   1690c:	subcs	r0, r0, r1, lsl #10
   16910:	cmp	r0, r1, lsl #9
   16914:	adc	r2, r2, r2
   16918:	subcs	r0, r0, r1, lsl #9
   1691c:	cmp	r0, r1, lsl #8
   16920:	adc	r2, r2, r2
   16924:	subcs	r0, r0, r1, lsl #8
   16928:	cmp	r0, r1, lsl #7
   1692c:	adc	r2, r2, r2
   16930:	subcs	r0, r0, r1, lsl #7
   16934:	cmp	r0, r1, lsl #6
   16938:	adc	r2, r2, r2
   1693c:	subcs	r0, r0, r1, lsl #6
   16940:	cmp	r0, r1, lsl #5
   16944:	adc	r2, r2, r2
   16948:	subcs	r0, r0, r1, lsl #5
   1694c:	cmp	r0, r1, lsl #4
   16950:	adc	r2, r2, r2
   16954:	subcs	r0, r0, r1, lsl #4
   16958:	cmp	r0, r1, lsl #3
   1695c:	adc	r2, r2, r2
   16960:	subcs	r0, r0, r1, lsl #3
   16964:	cmp	r0, r1, lsl #2
   16968:	adc	r2, r2, r2
   1696c:	subcs	r0, r0, r1, lsl #2
   16970:	cmp	r0, r1, lsl #1
   16974:	adc	r2, r2, r2
   16978:	subcs	r0, r0, r1, lsl #1
   1697c:	cmp	r0, r1
   16980:	adc	r2, r2, r2
   16984:	subcs	r0, r0, r1
   16988:	mov	r0, r2
   1698c:	bx	lr
   16990:	moveq	r0, #1
   16994:	movne	r0, #0
   16998:	bx	lr
   1699c:	clz	r2, r1
   169a0:	rsb	r2, r2, #31
   169a4:	lsr	r0, r0, r2
   169a8:	bx	lr
   169ac:	cmp	r0, #0
   169b0:	mvnne	r0, #0
   169b4:	b	169d8 <close_stdout@@Base+0x3680>
   169b8:	cmp	r1, #0
   169bc:	beq	169ac <close_stdout@@Base+0x3654>
   169c0:	push	{r0, r1, lr}
   169c4:	bl	167cc <close_stdout@@Base+0x3474>
   169c8:	pop	{r1, r2, lr}
   169cc:	mul	r3, r2, r0
   169d0:	sub	r1, r1, r3
   169d4:	bx	lr
   169d8:	push	{r1, lr}
   169dc:	mov	r0, #8
   169e0:	bl	11148 <raise@plt>
   169e4:	pop	{r1, pc}
   169e8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   169ec:	mov	r7, r0
   169f0:	ldr	r6, [pc, #76]	; 16a44 <close_stdout@@Base+0x36ec>
   169f4:	mov	r8, r1
   169f8:	ldr	r5, [pc, #72]	; 16a48 <close_stdout@@Base+0x36f0>
   169fc:	mov	r9, r2
   16a00:	add	r6, pc, r6
   16a04:	bl	11104 <fdopen@plt-0x20>
   16a08:	add	r5, pc, r5
   16a0c:	rsb	r6, r5, r6
   16a10:	asrs	r6, r6, #2
   16a14:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   16a18:	sub	r5, r5, #4
   16a1c:	mov	r4, #0
   16a20:	add	r4, r4, #1
   16a24:	ldr	r3, [r5, #4]!
   16a28:	mov	r0, r7
   16a2c:	mov	r1, r8
   16a30:	mov	r2, r9
   16a34:	blx	r3
   16a38:	cmp	r4, r6
   16a3c:	bne	16a20 <close_stdout@@Base+0x36c8>
   16a40:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16a44:	andeq	r1, r1, r0, ror #7
   16a48:	ldrdeq	r1, [r1], -r4
   16a4c:	bx	lr
   16a50:	ldr	r3, [pc, #28]	; 16a74 <close_stdout@@Base+0x371c>
   16a54:	mov	r1, #0
   16a58:	ldr	r2, [pc, #24]	; 16a78 <close_stdout@@Base+0x3720>
   16a5c:	add	r3, pc, r3
   16a60:	ldr	r3, [r3, r2]
   16a64:	cmp	r3, #0
   16a68:	ldrne	r2, [r3]
   16a6c:	moveq	r2, r3
   16a70:	b	1134c <__cxa_atexit@plt>
   16a74:	muleq	r1, ip, r5
   16a78:	andeq	r0, r0, r0, lsr r1

Disassembly of section .fini:

00016a7c <.fini>:
   16a7c:	push	{r3, lr}
   16a80:	pop	{r3, pc}
