
centos-preinstalled/whereis:     file format elf32-littlearm


Disassembly of section .init:

00010d98 <.init>:
   10d98:	push	{r3, lr}
   10d9c:	bl	114c0 <__assert_fail@plt+0x474>
   10da0:	pop	{r3, pc}

Disassembly of section .plt:

00010da4 <calloc@plt-0x14>:
   10da4:	push	{lr}		; (str lr, [sp, #-4]!)
   10da8:	ldr	lr, [pc, #4]	; 10db4 <calloc@plt-0x4>
   10dac:	add	lr, pc, lr
   10db0:	ldr	pc, [lr, #8]!
   10db4:	andeq	r3, r1, ip, asr #4

00010db8 <calloc@plt>:
   10db8:	add	ip, pc, #0, 12
   10dbc:	add	ip, ip, #77824	; 0x13000
   10dc0:	ldr	pc, [ip, #588]!	; 0x24c

00010dc4 <strcmp@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #77824	; 0x13000
   10dcc:	ldr	pc, [ip, #580]!	; 0x244

00010dd0 <getuid@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #77824	; 0x13000
   10dd8:	ldr	pc, [ip, #572]!	; 0x23c

00010ddc <free@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #77824	; 0x13000
   10de4:	ldr	pc, [ip, #564]!	; 0x234

00010de8 <fgets@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #77824	; 0x13000
   10df0:	ldr	pc, [ip, #556]!	; 0x22c

00010df4 <ferror@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #77824	; 0x13000
   10dfc:	ldr	pc, [ip, #548]!	; 0x224

00010e00 <_exit@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #77824	; 0x13000
   10e08:	ldr	pc, [ip, #540]!	; 0x21c

00010e0c <memcpy@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #77824	; 0x13000
   10e14:	ldr	pc, [ip, #532]!	; 0x214

00010e18 <dcgettext@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #77824	; 0x13000
   10e20:	ldr	pc, [ip, #524]!	; 0x20c

00010e24 <__stack_chk_fail@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #77824	; 0x13000
   10e2c:	ldr	pc, [ip, #516]!	; 0x204

00010e30 <textdomain@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #77824	; 0x13000
   10e38:	ldr	pc, [ip, #508]!	; 0x1fc

00010e3c <err@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #77824	; 0x13000
   10e44:	ldr	pc, [ip, #500]!	; 0x1f4

00010e48 <geteuid@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #77824	; 0x13000
   10e50:	ldr	pc, [ip, #492]!	; 0x1ec

00010e54 <seteuid@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #77824	; 0x13000
   10e5c:	ldr	pc, [ip, #484]!	; 0x1e4

00010e60 <readlink@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #77824	; 0x13000
   10e68:	ldr	pc, [ip, #476]!	; 0x1dc

00010e6c <getegid@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #77824	; 0x13000
   10e74:	ldr	pc, [ip, #468]!	; 0x1d4

00010e78 <_IO_putc@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #77824	; 0x13000
   10e80:	ldr	pc, [ip, #460]!	; 0x1cc

00010e84 <__fpending@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #77824	; 0x13000
   10e8c:	ldr	pc, [ip, #452]!	; 0x1c4

00010e90 <opendir@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #77824	; 0x13000
   10e98:	ldr	pc, [ip, #444]!	; 0x1bc

00010e9c <getenv@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #77824	; 0x13000
   10ea4:	ldr	pc, [ip, #436]!	; 0x1b4

00010ea8 <puts@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #77824	; 0x13000
   10eb0:	ldr	pc, [ip, #428]!	; 0x1ac

00010eb4 <malloc@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #77824	; 0x13000
   10ebc:	ldr	pc, [ip, #420]!	; 0x1a4

00010ec0 <__libc_start_main@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #77824	; 0x13000
   10ec8:	ldr	pc, [ip, #412]!	; 0x19c

00010ecc <__gmon_start__@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #77824	; 0x13000
   10ed4:	ldr	pc, [ip, #404]!	; 0x194

00010ed8 <__ctype_b_loc@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #77824	; 0x13000
   10ee0:	ldr	pc, [ip, #396]!	; 0x18c

00010ee4 <getcwd@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #77824	; 0x13000
   10eec:	ldr	pc, [ip, #388]!	; 0x184

00010ef0 <exit@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #77824	; 0x13000
   10ef8:	ldr	pc, [ip, #380]!	; 0x17c

00010efc <strlen@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #77824	; 0x13000
   10f04:	ldr	pc, [ip, #372]!	; 0x174

00010f08 <strchr@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #77824	; 0x13000
   10f10:	ldr	pc, [ip, #364]!	; 0x16c

00010f14 <warnx@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #77824	; 0x13000
   10f1c:	ldr	pc, [ip, #356]!	; 0x164

00010f20 <__errno_location@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #77824	; 0x13000
   10f28:	ldr	pc, [ip, #348]!	; 0x15c

00010f2c <__strcat_chk@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #77824	; 0x13000
   10f34:	ldr	pc, [ip, #340]!	; 0x154

00010f38 <snprintf@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #77824	; 0x13000
   10f40:	ldr	pc, [ip, #332]!	; 0x14c

00010f44 <__cxa_atexit@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #77824	; 0x13000
   10f4c:	ldr	pc, [ip, #324]!	; 0x144

00010f50 <__vasprintf_chk@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #77824	; 0x13000
   10f58:	ldr	pc, [ip, #316]!	; 0x13c

00010f5c <__strdup@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #77824	; 0x13000
   10f64:	ldr	pc, [ip, #308]!	; 0x134

00010f68 <getgid@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #77824	; 0x13000
   10f70:	ldr	pc, [ip, #300]!	; 0x12c

00010f74 <strncpy@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #77824	; 0x13000
   10f7c:	ldr	pc, [ip, #292]!	; 0x124

00010f80 <__printf_chk@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #77824	; 0x13000
   10f88:	ldr	pc, [ip, #284]!	; 0x11c

00010f8c <__fprintf_chk@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #77824	; 0x13000
   10f94:	ldr	pc, [ip, #276]!	; 0x114

00010f98 <access@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #77824	; 0x13000
   10fa0:	ldr	pc, [ip, #268]!	; 0x10c

00010fa4 <setegid@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #77824	; 0x13000
   10fac:	ldr	pc, [ip, #260]!	; 0x104

00010fb0 <fclose@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #77824	; 0x13000
   10fb8:	ldr	pc, [ip, #252]!	; 0xfc

00010fbc <setlocale@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #77824	; 0x13000
   10fc4:	ldr	pc, [ip, #244]!	; 0xf4

00010fc8 <strrchr@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #77824	; 0x13000
   10fd0:	ldr	pc, [ip, #236]!	; 0xec

00010fd4 <warn@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #77824	; 0x13000
   10fdc:	ldr	pc, [ip, #228]!	; 0xe4

00010fe0 <readdir64@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #77824	; 0x13000
   10fe8:	ldr	pc, [ip, #220]!	; 0xdc

00010fec <fopen64@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #77824	; 0x13000
   10ff4:	ldr	pc, [ip, #212]!	; 0xd4

00010ff8 <bindtextdomain@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #77824	; 0x13000
   11000:	ldr	pc, [ip, #204]!	; 0xcc

00011004 <__xstat64@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #77824	; 0x13000
   1100c:	ldr	pc, [ip, #196]!	; 0xc4

00011010 <fputs@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #77824	; 0x13000
   11018:	ldr	pc, [ip, #188]!	; 0xbc

0001101c <strncmp@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #77824	; 0x13000
   11024:	ldr	pc, [ip, #180]!	; 0xb4

00011028 <abort@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #77824	; 0x13000
   11030:	ldr	pc, [ip, #172]!	; 0xac

00011034 <closedir@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #77824	; 0x13000
   1103c:	ldr	pc, [ip, #164]!	; 0xa4

00011040 <__snprintf_chk@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #77824	; 0x13000
   11048:	ldr	pc, [ip, #156]!	; 0x9c

0001104c <__assert_fail@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #77824	; 0x13000
   11054:	ldr	pc, [ip, #148]!	; 0x94

Disassembly of section .text:

00011058 <.text>:
   11058:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1105c:	movw	r7, #16880	; 0x41f0
   11060:	movt	r7, #2
   11064:	sub	sp, sp, #28
   11068:	mov	r5, r0
   1106c:	mov	r6, r1
   11070:	ldr	r3, [r7]
   11074:	movw	r1, #10920	; 0x2aa8
   11078:	mov	r0, #6
   1107c:	movt	r1, #1
   11080:	mov	r2, #0
   11084:	str	r2, [sp, #12]
   11088:	str	r3, [sp, #20]
   1108c:	bl	10fbc <setlocale@plt>
   11090:	movw	r0, #11520	; 0x2d00
   11094:	movw	r1, #11532	; 0x2d0c
   11098:	movt	r0, #1
   1109c:	movt	r1, #1
   110a0:	bl	10ff8 <bindtextdomain@plt>
   110a4:	movw	r0, #11520	; 0x2d00
   110a8:	movt	r0, #1
   110ac:	bl	10e30 <textdomain@plt>
   110b0:	movw	r0, #8556	; 0x216c
   110b4:	movt	r0, #1
   110b8:	bl	12a4c <__assert_fail@plt+0x1a00>
   110bc:	cmp	r5, #1
   110c0:	beq	11418 <__assert_fail@plt+0x3cc>
   110c4:	mov	r1, #2
   110c8:	add	r0, sp, #12
   110cc:	movw	r2, #16636	; 0x40fc
   110d0:	movt	r2, #2
   110d4:	bl	12108 <__assert_fail@plt+0x10bc>
   110d8:	add	r1, sp, #12
   110dc:	mov	r2, #2
   110e0:	movw	r0, #11552	; 0x2d20
   110e4:	movt	r0, #1
   110e8:	bl	11e34 <__assert_fail@plt+0xde8>
   110ec:	add	r0, sp, #12
   110f0:	mov	r1, #4
   110f4:	ldr	r2, [pc, #896]	; 1147c <__assert_fail@plt+0x430>
   110f8:	bl	12108 <__assert_fail@plt+0x10bc>
   110fc:	add	r1, sp, #12
   11100:	mov	r2, #4
   11104:	movw	r0, #11560	; 0x2d28
   11108:	movt	r0, #1
   1110c:	bl	11e34 <__assert_fail@plt+0xde8>
   11110:	add	r0, sp, #12
   11114:	mov	r1, #8
   11118:	ldr	r2, [pc, #864]	; 11480 <__assert_fail@plt+0x434>
   1111c:	bl	12108 <__assert_fail@plt+0x10bc>
   11120:	cmp	r5, #1
   11124:	mov	r3, #1
   11128:	str	r3, [sp, #16]
   1112c:	movgt	r4, #14
   11130:	ble	11168 <__assert_fail@plt+0x11c>
   11134:	ldr	r0, [r6, r3, lsl #2]
   11138:	lsl	r1, r3, #2
   1113c:	ldrsb	r2, [r0]
   11140:	cmp	r2, #45	; 0x2d
   11144:	beq	11178 <__assert_fail@plt+0x12c>
   11148:	ldr	r1, [sp, #12]
   1114c:	mov	r2, r4
   11150:	bl	11a6c <__assert_fail@plt+0xa20>
   11154:	ldr	r3, [sp, #16]
   11158:	add	r3, r3, #1
   1115c:	str	r3, [sp, #16]
   11160:	cmp	r5, r3
   11164:	bgt	11134 <__assert_fail@plt+0xe8>
   11168:	add	r0, sp, #12
   1116c:	mov	r1, #14
   11170:	bl	115b8 <__assert_fail@plt+0x56c>
   11174:	b	113a4 <__assert_fail@plt+0x358>
   11178:	cmp	r3, #1
   1117c:	ble	11194 <__assert_fail@plt+0x148>
   11180:	add	r1, r6, r1
   11184:	ldr	r3, [r1, #-4]
   11188:	ldrsb	r3, [r3]
   1118c:	cmp	r3, #45	; 0x2d
   11190:	movne	r4, #14
   11194:	adds	sl, r0, #1
   11198:	beq	11154 <__assert_fail@plt+0x108>
   1119c:	ldrb	ip, [r0, #1]
   111a0:	cmp	ip, #0
   111a4:	beq	11154 <__assert_fail@plt+0x108>
   111a8:	movw	r8, #16893	; 0x41fd
   111ac:	movt	r8, #2
   111b0:	mov	r9, #1
   111b4:	sxtb	ip, ip
   111b8:	sub	ip, ip, #66	; 0x42
   111bc:	cmp	ip, #51	; 0x33
   111c0:	ldrls	pc, [pc, ip, lsl #2]
   111c4:	b	11418 <__assert_fail@plt+0x3cc>
   111c8:	andeq	r1, r1, ip, ror #7
   111cc:	andeq	r1, r1, r8, lsl r4
   111d0:	andeq	r1, r1, r8, lsl r4
   111d4:	andeq	r1, r1, r8, lsl r4
   111d8:	andeq	r1, r1, r8, lsl r4
   111dc:	andeq	r1, r1, r8, lsl r4
   111e0:	andeq	r1, r1, r8, lsl r4
   111e4:	andeq	r1, r1, r8, lsl r4
   111e8:	andeq	r1, r1, r8, lsl r4
   111ec:	andeq	r1, r1, r8, lsl r4
   111f0:	andeq	r1, r1, r8, lsl r4
   111f4:	andeq	r1, r1, r0, asr #7
   111f8:	andeq	r1, r1, r8, lsl r4
   111fc:	andeq	r1, r1, r8, lsl r4
   11200:	andeq	r1, r1, r8, lsl r4
   11204:	andeq	r1, r1, r8, lsl r4
   11208:	andeq	r1, r1, r8, lsl r4
   1120c:	muleq	r1, r8, r2
   11210:	andeq	r1, r1, r8, lsl r4
   11214:	andeq	r1, r1, r8, lsl r4
   11218:	andeq	r1, r1, r0, ror r3
   1121c:	andeq	r1, r1, r8, lsl r4
   11220:	andeq	r1, r1, r8, lsl r4
   11224:	andeq	r1, r1, r8, lsl r4
   11228:	andeq	r1, r1, r8, lsl r4
   1122c:	andeq	r1, r1, r8, lsl r4
   11230:	andeq	r1, r1, r8, lsl r4
   11234:	andeq	r1, r1, r8, lsl r4
   11238:	andeq	r1, r1, r8, lsl r4
   1123c:	andeq	r1, r1, r8, lsl r4
   11240:	andeq	r1, r1, r8, lsl r4
   11244:	andeq	r1, r1, r8, lsl r4
   11248:	andeq	r1, r1, r0, ror #6
   1124c:	andeq	r1, r1, r8, lsl r4
   11250:	andeq	r1, r1, r8, lsl r4
   11254:	andeq	r1, r1, r8, lsl r4
   11258:	ldrdeq	r1, [r1], -r8
   1125c:	andeq	r1, r1, r8, lsl r4
   11260:	andeq	r1, r1, r0, asr r3
   11264:	andeq	r1, r1, r8, lsl r4
   11268:	andeq	r1, r1, r8, lsl r4
   1126c:	andeq	r1, r1, r8, lsl r4
   11270:	andeq	r1, r1, r8, lsl r3
   11274:	andeq	r1, r1, r8, lsl #6
   11278:	andeq	r1, r1, r8, lsl r4
   1127c:	andeq	r1, r1, r8, lsl r4
   11280:	andeq	r1, r1, r8, lsl r4
   11284:	andeq	r1, r1, r8, lsl r4
   11288:	andeq	r1, r1, r8, lsl r4
   1128c:	strdeq	r1, [r1], -r8
   11290:	andeq	r1, r1, r8, lsl r4
   11294:	strdeq	r1, [r1], -r0
   11298:	ldrsb	r3, [sl, #1]
   1129c:	cmp	r3, #0
   112a0:	bne	11418 <__assert_fail@plt+0x3cc>
   112a4:	ldr	r3, [sp, #16]
   112a8:	add	r0, sp, #12
   112ac:	mov	r1, #8
   112b0:	add	r3, r3, #1
   112b4:	str	r3, [sp, #16]
   112b8:	bl	115b8 <__assert_fail@plt+0x56c>
   112bc:	mov	r3, #8
   112c0:	str	r3, [sp]
   112c4:	add	r0, sp, #12
   112c8:	add	r1, sp, #16
   112cc:	mov	r2, r5
   112d0:	mov	r3, r6
   112d4:	bl	11f60 <__assert_fail@plt+0xf14>
   112d8:	cmn	sl, #1
   112dc:	beq	11154 <__assert_fail@plt+0x108>
   112e0:	ldrb	ip, [sl, #1]!
   112e4:	cmp	ip, #0
   112e8:	bne	111b4 <__assert_fail@plt+0x168>
   112ec:	b	11154 <__assert_fail@plt+0x108>
   112f0:	strb	r9, [r8]
   112f4:	b	112d8 <__assert_fail@plt+0x28c>
   112f8:	cmp	r4, #14
   112fc:	orrne	r4, r4, #8
   11300:	moveq	r4, #8
   11304:	b	112d8 <__assert_fail@plt+0x28c>
   11308:	cmp	r4, #14
   1130c:	orrne	r4, r4, #4
   11310:	moveq	r4, #4
   11314:	b	112d8 <__assert_fail@plt+0x28c>
   11318:	ldr	fp, [sp, #12]
   1131c:	cmp	fp, #0
   11320:	beq	112d8 <__assert_fail@plt+0x28c>
   11324:	ldr	r3, [fp, #24]
   11328:	cmp	r3, #0
   1132c:	beq	11440 <__assert_fail@plt+0x3f4>
   11330:	ldr	r3, [fp]
   11334:	cmp	r3, #4
   11338:	beq	11428 <__assert_fail@plt+0x3dc>
   1133c:	cmp	r3, #8
   11340:	beq	11464 <__assert_fail@plt+0x418>
   11344:	cmp	r3, #2
   11348:	beq	11450 <__assert_fail@plt+0x404>
   1134c:	bl	11028 <abort@plt>
   11350:	movw	r3, #16888	; 0x41f8
   11354:	movt	r3, #2
   11358:	ldr	r0, [r3]
   1135c:	bl	11844 <__assert_fail@plt+0x7f8>
   11360:	cmp	r4, #14
   11364:	orrne	r4, r4, #2
   11368:	moveq	r4, #2
   1136c:	b	112d8 <__assert_fail@plt+0x28c>
   11370:	mov	r2, #5
   11374:	movw	r1, #11592	; 0x2d48
   11378:	mov	r0, #0
   1137c:	movt	r1, #1
   11380:	bl	10e18 <dcgettext@plt>
   11384:	movw	r2, #16872	; 0x41e8
   11388:	movt	r2, #2
   1138c:	movw	r3, #11604	; 0x2d54
   11390:	movt	r3, #1
   11394:	ldr	r2, [r2]
   11398:	mov	r1, r0
   1139c:	mov	r0, #1
   113a0:	bl	10f80 <__printf_chk@plt>
   113a4:	ldr	r2, [sp, #20]
   113a8:	mov	r0, #0
   113ac:	ldr	r3, [r7]
   113b0:	cmp	r2, r3
   113b4:	bne	11478 <__assert_fail@plt+0x42c>
   113b8:	add	sp, sp, #28
   113bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   113c0:	ldrsb	r3, [sl, #1]
   113c4:	cmp	r3, #0
   113c8:	bne	11418 <__assert_fail@plt+0x3cc>
   113cc:	ldr	r3, [sp, #16]
   113d0:	add	r0, sp, #12
   113d4:	mov	r1, #4
   113d8:	add	r3, r3, #1
   113dc:	str	r3, [sp, #16]
   113e0:	bl	115b8 <__assert_fail@plt+0x56c>
   113e4:	mov	r3, #4
   113e8:	b	112c0 <__assert_fail@plt+0x274>
   113ec:	ldrsb	r3, [sl, #1]
   113f0:	cmp	r3, #0
   113f4:	bne	11418 <__assert_fail@plt+0x3cc>
   113f8:	ldr	r3, [sp, #16]
   113fc:	add	r0, sp, #12
   11400:	mov	r1, #2
   11404:	add	r3, r3, #1
   11408:	str	r3, [sp, #16]
   1140c:	bl	115b8 <__assert_fail@plt+0x56c>
   11410:	mov	r3, #2
   11414:	b	112c0 <__assert_fail@plt+0x274>
   11418:	movw	r3, #16884	; 0x41f4
   1141c:	movt	r3, #2
   11420:	ldr	r0, [r3]
   11424:	bl	11844 <__assert_fail@plt+0x7f8>
   11428:	movw	r1, #11576	; 0x2d38
   1142c:	mov	r0, #1
   11430:	movt	r1, #1
   11434:	bl	10f80 <__printf_chk@plt>
   11438:	ldr	r0, [fp, #24]
   1143c:	bl	10ea8 <puts@plt>
   11440:	ldr	fp, [fp, #28]
   11444:	cmp	fp, #0
   11448:	bne	11324 <__assert_fail@plt+0x2d8>
   1144c:	b	112d8 <__assert_fail@plt+0x28c>
   11450:	movw	r1, #11568	; 0x2d30
   11454:	mov	r0, #1
   11458:	movt	r1, #1
   1145c:	bl	10f80 <__printf_chk@plt>
   11460:	b	11438 <__assert_fail@plt+0x3ec>
   11464:	movw	r1, #11584	; 0x2d40
   11468:	mov	r0, #1
   1146c:	movt	r1, #1
   11470:	bl	10f80 <__printf_chk@plt>
   11474:	b	11438 <__assert_fail@plt+0x3ec>
   11478:	bl	10e24 <__stack_chk_fail@plt>
   1147c:			; <UNDEFINED> instruction: 0x000241b0
   11480:	andeq	r4, r2, ip, asr #3
   11484:	mov	fp, #0
   11488:	mov	lr, #0
   1148c:	pop	{r1}		; (ldr r1, [sp], #4)
   11490:	mov	r2, sp
   11494:	push	{r2}		; (str r2, [sp, #-4]!)
   11498:	push	{r0}		; (str r0, [sp, #-4]!)
   1149c:	ldr	ip, [pc, #16]	; 114b4 <__assert_fail@plt+0x468>
   114a0:	push	{ip}		; (str ip, [sp, #-4]!)
   114a4:	ldr	r0, [pc, #12]	; 114b8 <__assert_fail@plt+0x46c>
   114a8:	ldr	r3, [pc, #12]	; 114bc <__assert_fail@plt+0x470>
   114ac:	bl	10ec0 <__libc_start_main@plt>
   114b0:	bl	11028 <abort@plt>
   114b4:	andeq	r2, r1, r8, asr #20
   114b8:	andeq	r1, r1, r8, asr r0
   114bc:	andeq	r2, r1, r4, ror #19
   114c0:	ldr	r3, [pc, #20]	; 114dc <__assert_fail@plt+0x490>
   114c4:	ldr	r2, [pc, #20]	; 114e0 <__assert_fail@plt+0x494>
   114c8:	add	r3, pc, r3
   114cc:	ldr	r2, [r3, r2]
   114d0:	cmp	r2, #0
   114d4:	bxeq	lr
   114d8:	b	10ecc <__gmon_start__@plt>
   114dc:	andeq	r2, r1, r0, lsr fp
   114e0:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   114e4:	push	{r3, lr}
   114e8:	movw	r0, #16872	; 0x41e8
   114ec:	ldr	r3, [pc, #36]	; 11518 <__assert_fail@plt+0x4cc>
   114f0:	movt	r0, #2
   114f4:	rsb	r3, r0, r3
   114f8:	cmp	r3, #6
   114fc:	popls	{r3, pc}
   11500:	movw	r3, #0
   11504:	movt	r3, #0
   11508:	cmp	r3, #0
   1150c:	popeq	{r3, pc}
   11510:	blx	r3
   11514:	pop	{r3, pc}
   11518:	andeq	r4, r2, fp, ror #3
   1151c:	push	{r3, lr}
   11520:	movw	r0, #16872	; 0x41e8
   11524:	movw	r3, #16872	; 0x41e8
   11528:	movt	r0, #2
   1152c:	movt	r3, #2
   11530:	rsb	r3, r0, r3
   11534:	asr	r3, r3, #2
   11538:	add	r3, r3, r3, lsr #31
   1153c:	asrs	r1, r3, #1
   11540:	popeq	{r3, pc}
   11544:	movw	r2, #0
   11548:	movt	r2, #0
   1154c:	cmp	r2, #0
   11550:	popeq	{r3, pc}
   11554:	blx	r2
   11558:	pop	{r3, pc}
   1155c:	push	{r4, lr}
   11560:	movw	r4, #16892	; 0x41fc
   11564:	movt	r4, #2
   11568:	ldrb	r3, [r4]
   1156c:	cmp	r3, #0
   11570:	popne	{r4, pc}
   11574:	bl	114e4 <__assert_fail@plt+0x498>
   11578:	mov	r3, #1
   1157c:	strb	r3, [r4]
   11580:	pop	{r4, pc}
   11584:	movw	r0, #16132	; 0x3f04
   11588:	movt	r0, #2
   1158c:	push	{r3, lr}
   11590:	ldr	r3, [r0]
   11594:	cmp	r3, #0
   11598:	beq	115b0 <__assert_fail@plt+0x564>
   1159c:	movw	r3, #0
   115a0:	movt	r3, #0
   115a4:	cmp	r3, #0
   115a8:	beq	115b0 <__assert_fail@plt+0x564>
   115ac:	blx	r3
   115b0:	pop	{r3, lr}
   115b4:	b	1151c <__assert_fail@plt+0x4d0>
   115b8:	push	{r4, r5, r6, r7, r8, lr}
   115bc:	mov	r5, #0
   115c0:	ldr	r4, [r0]
   115c4:	mov	r8, r0
   115c8:	mov	r6, r1
   115cc:	str	r5, [r0]
   115d0:	cmp	r4, r5
   115d4:	bne	115f4 <__assert_fail@plt+0x5a8>
   115d8:	pop	{r4, r5, r6, r7, r8, pc}
   115dc:	cmp	r5, #0
   115e0:	mov	r5, r4
   115e4:	streq	r4, [r8]
   115e8:	ldr	r4, [r4, #28]
   115ec:	cmp	r4, #0
   115f0:	beq	11630 <__assert_fail@plt+0x5e4>
   115f4:	ldr	r3, [r4]
   115f8:	tst	r6, r3
   115fc:	beq	115dc <__assert_fail@plt+0x590>
   11600:	ldr	r0, [r4, #24]
   11604:	ldr	r7, [r4, #28]
   11608:	bl	10ddc <free@plt>
   1160c:	mov	r0, r4
   11610:	bl	10ddc <free@plt>
   11614:	cmp	r5, #0
   11618:	mov	r4, r7
   1161c:	strne	r7, [r5, #28]
   11620:	bne	115ec <__assert_fail@plt+0x5a0>
   11624:	mov	r4, r7
   11628:	cmp	r4, #0
   1162c:	bne	115f4 <__assert_fail@plt+0x5a8>
   11630:	pop	{r4, r5, r6, r7, r8, pc}
   11634:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11638:	mov	r8, r0
   1163c:	mov	r0, r1
   11640:	mov	r4, r1
   11644:	bl	10efc <strlen@plt>
   11648:	ldrb	r7, [r4]
   1164c:	sxtb	r9, r7
   11650:	cmp	r9, #115	; 0x73
   11654:	mov	r5, r0
   11658:	beq	11774 <__assert_fail@plt+0x728>
   1165c:	sub	r6, r5, #2
   11660:	add	r2, r4, r6
   11664:	ldrb	r3, [r4, r6]
   11668:	cmp	r3, #46	; 0x2e
   1166c:	bne	11738 <__assert_fail@plt+0x6ec>
   11670:	ldrb	r3, [r2, #1]
   11674:	cmp	r3, #90	; 0x5a
   11678:	bne	11738 <__assert_fail@plt+0x6ec>
   1167c:	ldrb	r3, [r2, #2]
   11680:	cmp	r3, #0
   11684:	bne	11738 <__assert_fail@plt+0x6ec>
   11688:	ldrb	r5, [r8]
   1168c:	cmp	r5, #0
   11690:	beq	116e4 <__assert_fail@plt+0x698>
   11694:	cmp	r7, #0
   11698:	beq	116f0 <__assert_fail@plt+0x6a4>
   1169c:	sxtb	r3, r5
   116a0:	cmp	r9, r3
   116a4:	moveq	r0, r8
   116a8:	moveq	r2, r4
   116ac:	beq	116cc <__assert_fail@plt+0x680>
   116b0:	b	116f0 <__assert_fail@plt+0x6a4>
   116b4:	ldrb	r3, [r2, #1]
   116b8:	mov	r2, r4
   116bc:	cmp	r3, #0
   116c0:	beq	1176c <__assert_fail@plt+0x720>
   116c4:	cmp	r3, r5
   116c8:	bne	1176c <__assert_fail@plt+0x720>
   116cc:	ldrb	r5, [r0, #1]!
   116d0:	add	r4, r4, #1
   116d4:	sub	r6, r6, #1
   116d8:	cmp	r5, #0
   116dc:	bne	116b4 <__assert_fail@plt+0x668>
   116e0:	ldrb	r7, [r2, #1]
   116e4:	cmp	r7, #0
   116e8:	movne	r5, #0
   116ec:	beq	11794 <__assert_fail@plt+0x748>
   116f0:	bl	10ed8 <__ctype_b_loc@plt>
   116f4:	ldr	r2, [r0]
   116f8:	b	11700 <__assert_fail@plt+0x6b4>
   116fc:	ldrb	r7, [r4, #1]!
   11700:	sxtb	r3, r7
   11704:	sxth	r3, r3
   11708:	lsl	r3, r3, #1
   1170c:	ldrh	r0, [r2, r3]
   11710:	and	r0, r0, #2048	; 0x800
   11714:	uxth	r0, r0
   11718:	cmp	r0, #0
   1171c:	bne	116fc <__assert_fail@plt+0x6b0>
   11720:	cmp	r5, #0
   11724:	popne	{r3, r4, r5, r6, r7, r8, r9, pc}
   11728:	cmp	r7, #46	; 0x2e
   1172c:	beq	117c4 <__assert_fail@plt+0x778>
   11730:	mov	r0, r5
   11734:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11738:	sub	r6, r5, #3
   1173c:	add	r3, r4, r6
   11740:	ldrb	r2, [r4, r6]
   11744:	cmp	r2, #46	; 0x2e
   11748:	beq	1179c <__assert_fail@plt+0x750>
   1174c:	sub	r6, r5, #4
   11750:	movw	r1, #10904	; 0x2a98
   11754:	add	r0, r4, r6
   11758:	movt	r1, #1
   1175c:	bl	10dc4 <strcmp@plt>
   11760:	cmp	r0, #0
   11764:	movne	r6, r5
   11768:	b	11688 <__assert_fail@plt+0x63c>
   1176c:	mov	r7, r3
   11770:	b	116f0 <__assert_fail@plt+0x6a4>
   11774:	ldrsb	r3, [r4, #1]
   11778:	cmp	r3, #46	; 0x2e
   1177c:	bne	1165c <__assert_fail@plt+0x610>
   11780:	mov	r0, r8
   11784:	add	r1, r4, #2
   11788:	bl	11634 <__assert_fail@plt+0x5e8>
   1178c:	cmp	r0, #0
   11790:	beq	1165c <__assert_fail@plt+0x610>
   11794:	mov	r0, #1
   11798:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1179c:	ldrb	r2, [r3, #1]
   117a0:	cmp	r2, #103	; 0x67
   117a4:	bne	11828 <__assert_fail@plt+0x7dc>
   117a8:	ldrb	r2, [r3, #2]
   117ac:	cmp	r2, #122	; 0x7a
   117b0:	bne	1174c <__assert_fail@plt+0x700>
   117b4:	ldrb	r3, [r3, #3]
   117b8:	cmp	r3, #0
   117bc:	beq	11688 <__assert_fail@plt+0x63c>
   117c0:	b	1174c <__assert_fail@plt+0x700>
   117c4:	cmp	r6, #1
   117c8:	ble	11794 <__assert_fail@plt+0x748>
   117cc:	ldrb	r3, [r4, #1]
   117d0:	cmp	r3, #0
   117d4:	beq	11794 <__assert_fail@plt+0x748>
   117d8:	cmp	r3, #46	; 0x2e
   117dc:	add	r3, r4, #2
   117e0:	addeq	r4, r4, #1
   117e4:	beq	11814 <__assert_fail@plt+0x7c8>
   117e8:	add	r6, r4, r6
   117ec:	b	11804 <__assert_fail@plt+0x7b8>
   117f0:	ldrb	r2, [r3], #1
   117f4:	cmp	r2, #0
   117f8:	beq	11794 <__assert_fail@plt+0x748>
   117fc:	cmp	r2, #46	; 0x2e
   11800:	beq	11814 <__assert_fail@plt+0x7c8>
   11804:	cmp	r3, r6
   11808:	mov	r4, r3
   1180c:	bne	117f0 <__assert_fail@plt+0x7a4>
   11810:	b	11794 <__assert_fail@plt+0x748>
   11814:	ldrsb	r3, [r4, #1]
   11818:	cmp	r3, #67	; 0x43
   1181c:	beq	11834 <__assert_fail@plt+0x7e8>
   11820:	mov	r0, #0
   11824:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11828:	cmp	r2, #120	; 0x78
   1182c:	beq	117a8 <__assert_fail@plt+0x75c>
   11830:	b	1174c <__assert_fail@plt+0x700>
   11834:	ldrsb	r0, [r4, #2]
   11838:	rsbs	r0, r0, #1
   1183c:	movcc	r0, #0
   11840:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11844:	push	{r4, lr}
   11848:	mov	r2, #5
   1184c:	mov	r4, r0
   11850:	movw	r1, #10912	; 0x2aa0
   11854:	mov	r0, #0
   11858:	movt	r1, #1
   1185c:	bl	10e18 <dcgettext@plt>
   11860:	mov	r1, r4
   11864:	bl	11010 <fputs@plt>
   11868:	mov	r2, #5
   1186c:	movw	r1, #10924	; 0x2aac
   11870:	mov	r0, #0
   11874:	movt	r1, #1
   11878:	bl	10e18 <dcgettext@plt>
   1187c:	movw	r3, #16872	; 0x41e8
   11880:	movt	r3, #2
   11884:	mov	r1, #1
   11888:	ldr	r3, [r3]
   1188c:	mov	r2, r0
   11890:	mov	r0, r4
   11894:	bl	10f8c <__fprintf_chk@plt>
   11898:	mov	r2, #5
   1189c:	movw	r1, #10944	; 0x2ac0
   118a0:	mov	r0, #0
   118a4:	movt	r1, #1
   118a8:	bl	10e18 <dcgettext@plt>
   118ac:	mov	r1, r4
   118b0:	bl	11010 <fputs@plt>
   118b4:	mov	r2, #5
   118b8:	movw	r1, #10956	; 0x2acc
   118bc:	mov	r0, #0
   118c0:	movt	r1, #1
   118c4:	bl	10e18 <dcgettext@plt>
   118c8:	mov	r1, r4
   118cc:	bl	11010 <fputs@plt>
   118d0:	mov	r2, #5
   118d4:	movw	r1, #10996	; 0x2af4
   118d8:	mov	r0, #0
   118dc:	movt	r1, #1
   118e0:	bl	10e18 <dcgettext@plt>
   118e4:	mov	r1, r4
   118e8:	bl	11010 <fputs@plt>
   118ec:	mov	r2, #5
   118f0:	movw	r1, #11040	; 0x2b20
   118f4:	mov	r0, #0
   118f8:	movt	r1, #1
   118fc:	bl	10e18 <dcgettext@plt>
   11900:	mov	r1, r4
   11904:	bl	11010 <fputs@plt>
   11908:	mov	r2, #5
   1190c:	movw	r1, #11080	; 0x2b48
   11910:	mov	r0, #0
   11914:	movt	r1, #1
   11918:	bl	10e18 <dcgettext@plt>
   1191c:	mov	r1, r4
   11920:	bl	11010 <fputs@plt>
   11924:	mov	r2, #5
   11928:	movw	r1, #11116	; 0x2b6c
   1192c:	mov	r0, #0
   11930:	movt	r1, #1
   11934:	bl	10e18 <dcgettext@plt>
   11938:	mov	r1, r4
   1193c:	bl	11010 <fputs@plt>
   11940:	mov	r2, #5
   11944:	movw	r1, #11156	; 0x2b94
   11948:	mov	r0, #0
   1194c:	movt	r1, #1
   11950:	bl	10e18 <dcgettext@plt>
   11954:	mov	r1, r4
   11958:	bl	11010 <fputs@plt>
   1195c:	mov	r2, #5
   11960:	movw	r1, #11196	; 0x2bbc
   11964:	mov	r0, #0
   11968:	movt	r1, #1
   1196c:	bl	10e18 <dcgettext@plt>
   11970:	mov	r1, r4
   11974:	bl	11010 <fputs@plt>
   11978:	mov	r2, #5
   1197c:	movw	r1, #11240	; 0x2be8
   11980:	mov	r0, #0
   11984:	movt	r1, #1
   11988:	bl	10e18 <dcgettext@plt>
   1198c:	mov	r1, r4
   11990:	bl	11010 <fputs@plt>
   11994:	mov	r2, #5
   11998:	movw	r1, #11280	; 0x2c10
   1199c:	mov	r0, #0
   119a0:	movt	r1, #1
   119a4:	bl	10e18 <dcgettext@plt>
   119a8:	mov	r1, r4
   119ac:	bl	11010 <fputs@plt>
   119b0:	mov	r2, #5
   119b4:	movw	r1, #11324	; 0x2c3c
   119b8:	mov	r0, #0
   119bc:	movt	r1, #1
   119c0:	bl	10e18 <dcgettext@plt>
   119c4:	movw	r3, #11352	; 0x2c58
   119c8:	mov	r1, #1
   119cc:	movt	r3, #1
   119d0:	mov	r2, r0
   119d4:	mov	r0, r4
   119d8:	bl	10f8c <__fprintf_chk@plt>
   119dc:	movw	r3, #16884	; 0x41f4
   119e0:	movt	r3, #2
   119e4:	ldr	r0, [r3]
   119e8:	subs	r3, r4, r0
   119ec:	rsbs	r0, r3, #0
   119f0:	adcs	r0, r0, r3
   119f4:	bl	10ef0 <exit@plt>
   119f8:	push	{r1, r2, r3}
   119fc:	movw	r2, #11364	; 0x2c64
   11a00:	push	{r4, lr}
   11a04:	movw	r4, #16880	; 0x41f0
   11a08:	movt	r4, #2
   11a0c:	sub	sp, sp, #12
   11a10:	add	ip, sp, #24
   11a14:	movt	r2, #1
   11a18:	ldr	lr, [r4]
   11a1c:	mov	r1, #1
   11a20:	mov	r3, ip
   11a24:	str	ip, [sp]
   11a28:	str	lr, [sp, #4]
   11a2c:	bl	10f50 <__vasprintf_chk@plt>
   11a30:	cmp	r0, #0
   11a34:	blt	11a5c <__assert_fail@plt+0xa10>
   11a38:	ldr	r2, [sp, #4]
   11a3c:	ldr	r3, [r4]
   11a40:	cmp	r2, r3
   11a44:	bne	11a58 <__assert_fail@plt+0xa0c>
   11a48:	add	sp, sp, #12
   11a4c:	pop	{r4, lr}
   11a50:	add	sp, sp, #12
   11a54:	bx	lr
   11a58:	bl	10e24 <__stack_chk_fail@plt>
   11a5c:	movw	r1, #11372	; 0x2c6c
   11a60:	mov	r0, #1
   11a64:	movt	r1, #1
   11a68:	bl	10e3c <err@plt>
   11a6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a70:	sub	sp, sp, #4096	; 0x1000
   11a74:	sub	sp, sp, #28
   11a78:	movw	ip, #16880	; 0x41f0
   11a7c:	movt	ip, #2
   11a80:	add	lr, sp, #8192	; 0x2000
   11a84:	str	ip, [sp, #12]
   11a88:	movw	r3, #61432	; 0xeff8
   11a8c:	ldr	ip, [ip]
   11a90:	movt	r3, #65535	; 0xffff
   11a94:	mov	r5, r1
   11a98:	mov	r1, #47	; 0x2f
   11a9c:	mov	r4, r0
   11aa0:	mov	r9, r2
   11aa4:	str	ip, [lr, #-4076]	; 0xfffff014
   11aa8:	add	ip, sp, #4096	; 0x1000
   11aac:	add	ip, ip, #24
   11ab0:	mov	r2, #0
   11ab4:	movw	r8, #16893	; 0x41fd
   11ab8:	movt	r8, #2
   11abc:	str	r2, [ip, r3]
   11ac0:	bl	10fc8 <strrchr@plt>
   11ac4:	mov	r2, #4096	; 0x1000
   11ac8:	cmp	r0, #0
   11acc:	addne	r4, r0, #1
   11ad0:	add	r0, sp, #20
   11ad4:	mov	r1, r4
   11ad8:	mov	r4, #0
   11adc:	bl	10f74 <strncpy@plt>
   11ae0:	add	lr, sp, #8192	; 0x2000
   11ae4:	add	r0, sp, #20
   11ae8:	mov	r1, #46	; 0x2e
   11aec:	strb	r4, [lr, #-4077]	; 0xfffff013
   11af0:	bl	10fc8 <strrchr@plt>
   11af4:	ldrsb	r3, [r8]
   11af8:	cmp	r0, #0
   11afc:	strbne	r4, [r0]
   11b00:	cmp	r3, #0
   11b04:	beq	11ca4 <__assert_fail@plt+0xc58>
   11b08:	cmp	r5, #0
   11b0c:	beq	11cbc <__assert_fail@plt+0xc70>
   11b10:	movw	sl, #61432	; 0xeff8
   11b14:	movt	sl, #65535	; 0xffff
   11b18:	mov	r4, #0
   11b1c:	ldr	r3, [r5]
   11b20:	tst	r9, r3
   11b24:	beq	11bbc <__assert_fail@plt+0xb70>
   11b28:	ldr	r7, [r5, #24]
   11b2c:	cmp	r7, #0
   11b30:	beq	11bbc <__assert_fail@plt+0xb70>
   11b34:	mov	r0, r7
   11b38:	bl	10e90 <opendir@plt>
   11b3c:	subs	r6, r0, #0
   11b40:	beq	11bbc <__assert_fail@plt+0xb70>
   11b44:	mov	r0, r6
   11b48:	bl	10fe0 <readdir64@plt>
   11b4c:	cmp	r0, #0
   11b50:	beq	11bb4 <__assert_fail@plt+0xb68>
   11b54:	add	fp, r0, #19
   11b58:	add	r0, sp, #20
   11b5c:	mov	r1, fp
   11b60:	bl	11634 <__assert_fail@plt+0x5e8>
   11b64:	cmp	r0, #0
   11b68:	beq	11b44 <__assert_fail@plt+0xaf8>
   11b6c:	ldrsb	r3, [r8]
   11b70:	cmp	r3, #0
   11b74:	beq	11b88 <__assert_fail@plt+0xb3c>
   11b78:	cmp	r4, #0
   11b7c:	beq	11c7c <__assert_fail@plt+0xc30>
   11b80:	cmp	r4, #1
   11b84:	beq	11c2c <__assert_fail@plt+0xbe0>
   11b88:	movw	r1, #11416	; 0x2c98
   11b8c:	mov	r3, fp
   11b90:	mov	r0, #1
   11b94:	movt	r1, #1
   11b98:	mov	r2, r7
   11b9c:	bl	10f80 <__printf_chk@plt>
   11ba0:	mov	r0, r6
   11ba4:	add	r4, r4, #1
   11ba8:	bl	10fe0 <readdir64@plt>
   11bac:	cmp	r0, #0
   11bb0:	bne	11b54 <__assert_fail@plt+0xb08>
   11bb4:	mov	r0, r6
   11bb8:	bl	11034 <closedir@plt>
   11bbc:	ldr	r5, [r5, #28]
   11bc0:	cmp	r5, #0
   11bc4:	bne	11b1c <__assert_fail@plt+0xad0>
   11bc8:	add	ip, sp, #4096	; 0x1000
   11bcc:	movw	r3, #61432	; 0xeff8
   11bd0:	add	ip, ip, #24
   11bd4:	movt	r3, #65535	; 0xffff
   11bd8:	ldr	r0, [ip, r3]
   11bdc:	bl	10ddc <free@plt>
   11be0:	cmp	r4, #0
   11be4:	beq	11c08 <__assert_fail@plt+0xbbc>
   11be8:	ldrsb	r3, [r8]
   11bec:	cmp	r3, #0
   11bf0:	bne	11c98 <__assert_fail@plt+0xc4c>
   11bf4:	movw	r3, #16888	; 0x41f8
   11bf8:	movt	r3, #2
   11bfc:	mov	r0, #10
   11c00:	ldr	r1, [r3]
   11c04:	bl	10e78 <_IO_putc@plt>
   11c08:	ldr	ip, [sp, #12]
   11c0c:	add	r1, sp, #8192	; 0x2000
   11c10:	ldr	r2, [r1, #-4076]	; 0xfffff014
   11c14:	ldr	r3, [ip]
   11c18:	cmp	r2, r3
   11c1c:	bne	11cd8 <__assert_fail@plt+0xc8c>
   11c20:	add	sp, sp, #4096	; 0x1000
   11c24:	add	sp, sp, #28
   11c28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c2c:	add	ip, sp, #4096	; 0x1000
   11c30:	add	ip, ip, #24
   11c34:	ldr	r3, [ip, sl]
   11c38:	cmp	r3, #0
   11c3c:	beq	11b88 <__assert_fail@plt+0xb3c>
   11c40:	add	r2, sp, #20
   11c44:	stm	sp, {r7, fp}
   11c48:	movw	r1, #11400	; 0x2c88
   11c4c:	mov	r0, r4
   11c50:	movt	r1, #1
   11c54:	bl	10f80 <__printf_chk@plt>
   11c58:	add	lr, sp, #4096	; 0x1000
   11c5c:	add	lr, lr, #24
   11c60:	ldr	r0, [lr, sl]
   11c64:	bl	10ddc <free@plt>
   11c68:	add	r1, sp, #4096	; 0x1000
   11c6c:	add	r1, r1, #24
   11c70:	mov	r2, #0
   11c74:	str	r2, [r1, sl]
   11c78:	b	11ba0 <__assert_fail@plt+0xb54>
   11c7c:	mov	r3, fp
   11c80:	movw	r1, #11364	; 0x2c64
   11c84:	add	r0, sp, #16
   11c88:	movt	r1, #1
   11c8c:	mov	r2, r7
   11c90:	bl	119f8 <__assert_fail@plt+0x9ac>
   11c94:	b	11ba0 <__assert_fail@plt+0xb54>
   11c98:	cmp	r4, #1
   11c9c:	bne	11bf4 <__assert_fail@plt+0xba8>
   11ca0:	b	11c08 <__assert_fail@plt+0xbbc>
   11ca4:	movw	r1, #11396	; 0x2c84
   11ca8:	add	r2, sp, #20
   11cac:	movt	r1, #1
   11cb0:	mov	r0, #1
   11cb4:	bl	10f80 <__printf_chk@plt>
   11cb8:	b	11b08 <__assert_fail@plt+0xabc>
   11cbc:	add	lr, sp, #4096	; 0x1000
   11cc0:	movw	r3, #61432	; 0xeff8
   11cc4:	add	lr, lr, #24
   11cc8:	movt	r3, #65535	; 0xffff
   11ccc:	ldr	r0, [lr, r3]
   11cd0:	bl	10ddc <free@plt>
   11cd4:	b	11c08 <__assert_fail@plt+0xbbc>
   11cd8:	bl	10e24 <__stack_chk_fail@plt>
   11cdc:	push	{r4, r6, r7, r8, r9, sl, fp, lr}
   11ce0:	movw	fp, #16880	; 0x41f0
   11ce4:	movt	fp, #2
   11ce8:	sub	sp, sp, #112	; 0x70
   11cec:	mov	r9, r0
   11cf0:	mov	r4, r1
   11cf4:	ldr	r3, [fp]
   11cf8:	mov	r0, r2
   11cfc:	mov	r1, #4
   11d00:	mov	r8, r2
   11d04:	ldr	sl, [r9]
   11d08:	str	r3, [sp, #108]	; 0x6c
   11d0c:	bl	10f98 <access@plt>
   11d10:	cmp	r0, #0
   11d14:	beq	11d30 <__assert_fail@plt+0xce4>
   11d18:	ldr	r2, [sp, #108]	; 0x6c
   11d1c:	ldr	r3, [fp]
   11d20:	cmp	r2, r3
   11d24:	bne	11e30 <__assert_fail@plt+0xde4>
   11d28:	add	sp, sp, #112	; 0x70
   11d2c:	pop	{r4, r6, r7, r8, r9, sl, fp, pc}
   11d30:	mov	r0, #3
   11d34:	mov	r1, r8
   11d38:	mov	r2, sp
   11d3c:	bl	11004 <__xstat64@plt>
   11d40:	cmp	r0, #0
   11d44:	bne	11d18 <__assert_fail@plt+0xccc>
   11d48:	ldr	r3, [sp, #16]
   11d4c:	and	r3, r3, #61440	; 0xf000
   11d50:	cmp	r3, #16384	; 0x4000
   11d54:	bne	11d18 <__assert_fail@plt+0xccc>
   11d58:	cmp	sl, #0
   11d5c:	beq	11dac <__assert_fail@plt+0xd60>
   11d60:	ldrd	r6, [sp, #96]	; 0x60
   11d64:	ldrd	r2, [sp]
   11d68:	b	11d7c <__assert_fail@plt+0xd30>
   11d6c:	ldr	r1, [sl, #28]
   11d70:	cmp	r1, #0
   11d74:	beq	11dac <__assert_fail@plt+0xd60>
   11d78:	mov	sl, r1
   11d7c:	ldrd	r0, [sl, #16]
   11d80:	cmp	r1, r7
   11d84:	cmpeq	r0, r6
   11d88:	bne	11d6c <__assert_fail@plt+0xd20>
   11d8c:	ldrd	r0, [sl, #8]
   11d90:	cmp	r1, r3
   11d94:	cmpeq	r0, r2
   11d98:	bne	11d6c <__assert_fail@plt+0xd20>
   11d9c:	ldr	r1, [sl]
   11da0:	cmp	r1, r4
   11da4:	bne	11d6c <__assert_fail@plt+0xd20>
   11da8:	b	11d18 <__assert_fail@plt+0xccc>
   11dac:	mov	r0, #1
   11db0:	mov	r1, #32
   11db4:	bl	10db8 <calloc@plt>
   11db8:	subs	r6, r0, #0
   11dbc:	bne	11dd4 <__assert_fail@plt+0xd88>
   11dc0:	movw	r1, #11424	; 0x2ca0
   11dc4:	mov	r0, #1
   11dc8:	movt	r1, #1
   11dcc:	mov	r2, #32
   11dd0:	bl	10e3c <err@plt>
   11dd4:	ldrd	r2, [sp, #96]	; 0x60
   11dd8:	mov	r0, r8
   11ddc:	str	r4, [r6]
   11de0:	strd	r2, [r6, #16]
   11de4:	ldrd	r2, [sp]
   11de8:	strd	r2, [r6, #8]
   11dec:	bl	127bc <__assert_fail@plt+0x1770>
   11df0:	str	r0, [r6, #24]
   11df4:	ldr	r3, [r9]
   11df8:	cmp	r3, #0
   11dfc:	streq	r6, [r9]
   11e00:	beq	11d18 <__assert_fail@plt+0xccc>
   11e04:	cmp	sl, #0
   11e08:	strne	r6, [sl, #28]
   11e0c:	bne	11d18 <__assert_fail@plt+0xccc>
   11e10:	movw	r0, #11452	; 0x2cbc
   11e14:	movw	r1, #11460	; 0x2cc4
   11e18:	movw	r3, #10888	; 0x2a88
   11e1c:	movt	r0, #1
   11e20:	movt	r1, #1
   11e24:	mov	r2, #218	; 0xda
   11e28:	movt	r3, #1
   11e2c:	bl	1104c <__assert_fail@plt>
   11e30:	bl	10e24 <__stack_chk_fail@plt>
   11e34:	push	{r4, r5, r6, r7, r8, lr}
   11e38:	mov	r5, r1
   11e3c:	mov	r6, r2
   11e40:	bl	10e9c <getenv@plt>
   11e44:	cmp	r0, #0
   11e48:	popeq	{r4, r5, r6, r7, r8, pc}
   11e4c:	bl	10f5c <__strdup@plt>
   11e50:	subs	r7, r0, #0
   11e54:	beq	11f50 <__assert_fail@plt+0xf04>
   11e58:	ldrb	r1, [r7]
   11e5c:	cmp	r1, #58	; 0x3a
   11e60:	bne	11f48 <__assert_fail@plt+0xefc>
   11e64:	add	r3, r7, #1
   11e68:	mov	r2, r3
   11e6c:	ldrb	r1, [r3], #1
   11e70:	cmp	r1, #58	; 0x3a
   11e74:	beq	11e68 <__assert_fail@plt+0xe1c>
   11e78:	cmp	r1, #0
   11e7c:	beq	11f10 <__assert_fail@plt+0xec4>
   11e80:	add	r1, r2, #1
   11e84:	b	11e90 <__assert_fail@plt+0xe44>
   11e88:	cmp	r3, #58	; 0x3a
   11e8c:	beq	11f38 <__assert_fail@plt+0xeec>
   11e90:	mov	r4, r1
   11e94:	add	r1, r1, #1
   11e98:	ldrb	r3, [r4]
   11e9c:	cmp	r3, #0
   11ea0:	bne	11e88 <__assert_fail@plt+0xe3c>
   11ea4:	cmp	r2, #0
   11ea8:	movne	r8, #0
   11eac:	beq	11f10 <__assert_fail@plt+0xec4>
   11eb0:	mov	r0, r5
   11eb4:	mov	r1, r6
   11eb8:	bl	11cdc <__assert_fail@plt+0xc90>
   11ebc:	ldrb	ip, [r4]
   11ec0:	cmp	ip, #58	; 0x3a
   11ec4:	bne	11f30 <__assert_fail@plt+0xee4>
   11ec8:	add	r3, r4, #1
   11ecc:	mov	r2, r3
   11ed0:	ldrb	ip, [r3], #1
   11ed4:	cmp	ip, #58	; 0x3a
   11ed8:	beq	11ecc <__assert_fail@plt+0xe80>
   11edc:	cmp	ip, #0
   11ee0:	beq	11f10 <__assert_fail@plt+0xec4>
   11ee4:	add	r1, r2, #1
   11ee8:	b	11ef4 <__assert_fail@plt+0xea8>
   11eec:	cmp	r3, #58	; 0x3a
   11ef0:	beq	11f1c <__assert_fail@plt+0xed0>
   11ef4:	mov	r4, r1
   11ef8:	add	r1, r1, #1
   11efc:	ldrb	r3, [r4]
   11f00:	cmp	r3, #0
   11f04:	bne	11eec <__assert_fail@plt+0xea0>
   11f08:	cmp	r2, #0
   11f0c:	bne	11eb0 <__assert_fail@plt+0xe64>
   11f10:	mov	r0, r7
   11f14:	pop	{r4, r5, r6, r7, r8, lr}
   11f18:	b	10ddc <free@plt>
   11f1c:	cmp	r2, #0
   11f20:	strb	r8, [r4]
   11f24:	mov	r4, r1
   11f28:	bne	11eb0 <__assert_fail@plt+0xe64>
   11f2c:	b	11f10 <__assert_fail@plt+0xec4>
   11f30:	mov	r2, r4
   11f34:	b	11edc <__assert_fail@plt+0xe90>
   11f38:	mov	r3, #0
   11f3c:	strb	r3, [r4]
   11f40:	mov	r4, r1
   11f44:	b	11ea4 <__assert_fail@plt+0xe58>
   11f48:	mov	r2, r7
   11f4c:	b	11e78 <__assert_fail@plt+0xe2c>
   11f50:	movw	r1, #11484	; 0x2cdc
   11f54:	mov	r0, #1
   11f58:	movt	r1, #1
   11f5c:	bl	10e3c <err@plt>
   11f60:	push	{r4, r5, r6, r7, r8, lr}
   11f64:	mov	r5, r2
   11f68:	ldr	r2, [r1]
   11f6c:	mov	r4, r1
   11f70:	mov	r7, r0
   11f74:	mov	r6, r3
   11f78:	cmp	r5, r2
   11f7c:	ldr	r8, [sp, #24]
   11f80:	pople	{r4, r5, r6, r7, r8, pc}
   11f84:	ldr	r2, [r3, r2, lsl #2]
   11f88:	ldrsb	r3, [r2]
   11f8c:	cmp	r3, #45	; 0x2d
   11f90:	bne	11fa8 <__assert_fail@plt+0xf5c>
   11f94:	pop	{r4, r5, r6, r7, r8, pc}
   11f98:	ldr	r2, [r6, ip, lsl #2]
   11f9c:	ldrsb	r3, [r2]
   11fa0:	cmp	r3, #45	; 0x2d
   11fa4:	popeq	{r4, r5, r6, r7, r8, pc}
   11fa8:	mov	r0, r7
   11fac:	mov	r1, r8
   11fb0:	bl	11cdc <__assert_fail@plt+0xc90>
   11fb4:	ldr	ip, [r4]
   11fb8:	add	ip, ip, #1
   11fbc:	str	ip, [r4]
   11fc0:	cmp	r5, ip
   11fc4:	bgt	11f98 <__assert_fail@plt+0xf4c>
   11fc8:	pop	{r4, r5, r6, r7, r8, pc}
   11fcc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11fd0:	movw	r6, #16880	; 0x41f0
   11fd4:	sub	sp, sp, #4096	; 0x1000
   11fd8:	movt	r6, #2
   11fdc:	sub	sp, sp, #12
   11fe0:	mov	r8, r2
   11fe4:	ldr	r3, [r6]
   11fe8:	add	r5, sp, #4
   11fec:	add	ip, sp, #8192	; 0x2000
   11ff0:	mov	r9, r0
   11ff4:	mov	sl, r1
   11ff8:	mov	r0, r5
   11ffc:	mov	r1, r2
   12000:	mov	r2, #4096	; 0x1000
   12004:	str	r3, [ip, #-4092]	; 0xfffff004
   12008:	bl	10f74 <strncpy@plt>
   1200c:	add	r2, sp, #8192	; 0x2000
   12010:	mov	r0, r5
   12014:	mov	r1, #42	; 0x2a
   12018:	mov	r4, #0
   1201c:	strb	r4, [r2, #-4093]	; 0xfffff003
   12020:	bl	10f08 <strchr@plt>
   12024:	subs	r7, r0, #0
   12028:	beq	120c0 <__assert_fail@plt+0x1074>
   1202c:	strb	r4, [r7]
   12030:	mov	r0, r5
   12034:	bl	10e90 <opendir@plt>
   12038:	subs	r4, r0, #0
   1203c:	beq	120c0 <__assert_fail@plt+0x1074>
   12040:	rsb	fp, r7, r5
   12044:	add	fp, fp, #4096	; 0x1000
   12048:	mov	r0, r4
   1204c:	bl	10fe0 <readdir64@plt>
   12050:	cmp	r0, #0
   12054:	beq	120b8 <__assert_fail@plt+0x106c>
   12058:	ldrb	r3, [r0, #19]
   1205c:	cmp	r3, #46	; 0x2e
   12060:	beq	120e0 <__assert_fail@plt+0x1094>
   12064:	add	r3, r0, #19
   12068:	mov	r1, fp
   1206c:	movw	r2, #12528	; 0x30f0
   12070:	mov	r0, r7
   12074:	movt	r2, #1
   12078:	bl	10f38 <snprintf@plt>
   1207c:	mov	r1, #42	; 0x2a
   12080:	mov	r0, r8
   12084:	bl	10f08 <strchr@plt>
   12088:	mov	r2, #4096	; 0x1000
   1208c:	add	r1, r0, #1
   12090:	mov	r0, r5
   12094:	bl	10f2c <__strcat_chk@plt>
   12098:	mov	r0, r9
   1209c:	mov	r1, sl
   120a0:	mov	r2, r5
   120a4:	bl	11cdc <__assert_fail@plt+0xc90>
   120a8:	mov	r0, r4
   120ac:	bl	10fe0 <readdir64@plt>
   120b0:	cmp	r0, #0
   120b4:	bne	12058 <__assert_fail@plt+0x100c>
   120b8:	mov	r0, r4
   120bc:	bl	11034 <closedir@plt>
   120c0:	add	r3, sp, #8192	; 0x2000
   120c4:	ldr	r2, [r3, #-4092]	; 0xfffff004
   120c8:	ldr	r3, [r6]
   120cc:	cmp	r2, r3
   120d0:	bne	12104 <__assert_fail@plt+0x10b8>
   120d4:	add	sp, sp, #4096	; 0x1000
   120d8:	add	sp, sp, #12
   120dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120e0:	ldrb	r3, [r0, #20]
   120e4:	cmp	r3, #0
   120e8:	beq	12048 <__assert_fail@plt+0xffc>
   120ec:	cmp	r3, #46	; 0x2e
   120f0:	bne	12064 <__assert_fail@plt+0x1018>
   120f4:	ldrb	r3, [r0, #21]
   120f8:	cmp	r3, #0
   120fc:	beq	12048 <__assert_fail@plt+0xffc>
   12100:	b	12064 <__assert_fail@plt+0x1018>
   12104:	bl	10e24 <__stack_chk_fail@plt>
   12108:	push	{r3, r4, r5, r6, r7, lr}
   1210c:	mov	r6, r0
   12110:	ldr	r4, [r2]
   12114:	mov	r7, r1
   12118:	cmp	r4, #0
   1211c:	popeq	{r3, r4, r5, r6, r7, pc}
   12120:	mov	r5, r2
   12124:	b	12138 <__assert_fail@plt+0x10ec>
   12128:	bl	11fcc <__assert_fail@plt+0xf80>
   1212c:	ldr	r4, [r5, #4]!
   12130:	cmp	r4, #0
   12134:	beq	12168 <__assert_fail@plt+0x111c>
   12138:	mov	r1, #42	; 0x2a
   1213c:	mov	r0, r4
   12140:	bl	10f08 <strchr@plt>
   12144:	mov	r2, r4
   12148:	mov	r1, r7
   1214c:	cmp	r0, #0
   12150:	mov	r0, r6
   12154:	bne	12128 <__assert_fail@plt+0x10dc>
   12158:	bl	11cdc <__assert_fail@plt+0xc90>
   1215c:	ldr	r4, [r5, #4]!
   12160:	cmp	r4, #0
   12164:	bne	12138 <__assert_fail@plt+0x10ec>
   12168:	pop	{r3, r4, r5, r6, r7, pc}
   1216c:	movw	r3, #16888	; 0x41f8
   12170:	movt	r3, #2
   12174:	push	{r4, r5, r6, lr}
   12178:	ldr	r4, [r3]
   1217c:	mov	r0, r4
   12180:	bl	10e84 <__fpending@plt>
   12184:	mov	r6, r0
   12188:	mov	r0, r4
   1218c:	bl	10df4 <ferror@plt>
   12190:	mov	r5, r0
   12194:	mov	r0, r4
   12198:	bl	10fb0 <fclose@plt>
   1219c:	adds	r4, r0, #0
   121a0:	movne	r4, #1
   121a4:	cmp	r5, #0
   121a8:	bne	12220 <__assert_fail@plt+0x11d4>
   121ac:	cmp	r4, #0
   121b0:	beq	121cc <__assert_fail@plt+0x1180>
   121b4:	cmp	r6, #0
   121b8:	beq	12270 <__assert_fail@plt+0x1224>
   121bc:	bl	10f20 <__errno_location@plt>
   121c0:	ldr	r3, [r0]
   121c4:	cmp	r3, #32
   121c8:	bne	12284 <__assert_fail@plt+0x1238>
   121cc:	movw	r3, #16884	; 0x41f4
   121d0:	movt	r3, #2
   121d4:	ldr	r4, [r3]
   121d8:	mov	r0, r4
   121dc:	bl	10e84 <__fpending@plt>
   121e0:	mov	r6, r0
   121e4:	mov	r0, r4
   121e8:	bl	10df4 <ferror@plt>
   121ec:	mov	r5, r0
   121f0:	mov	r0, r4
   121f4:	bl	10fb0 <fclose@plt>
   121f8:	adds	r4, r0, #0
   121fc:	movne	r4, #1
   12200:	cmp	r5, #0
   12204:	beq	1224c <__assert_fail@plt+0x1200>
   12208:	cmp	r4, #0
   1220c:	bne	12218 <__assert_fail@plt+0x11cc>
   12210:	bl	10f20 <__errno_location@plt>
   12214:	str	r4, [r0]
   12218:	mov	r0, #1
   1221c:	bl	10e00 <_exit@plt>
   12220:	cmp	r4, #0
   12224:	bne	121bc <__assert_fail@plt+0x1170>
   12228:	bl	10f20 <__errno_location@plt>
   1222c:	str	r4, [r0]
   12230:	mov	r2, #5
   12234:	movw	r1, #11508	; 0x2cf4
   12238:	mov	r0, #0
   1223c:	movt	r1, #1
   12240:	bl	10e18 <dcgettext@plt>
   12244:	bl	10f14 <warnx@plt>
   12248:	b	12218 <__assert_fail@plt+0x11cc>
   1224c:	cmp	r4, #0
   12250:	popeq	{r4, r5, r6, pc}
   12254:	cmp	r6, #0
   12258:	bne	12218 <__assert_fail@plt+0x11cc>
   1225c:	bl	10f20 <__errno_location@plt>
   12260:	ldr	r3, [r0]
   12264:	cmp	r3, #9
   12268:	bne	12218 <__assert_fail@plt+0x11cc>
   1226c:	pop	{r4, r5, r6, pc}
   12270:	bl	10f20 <__errno_location@plt>
   12274:	ldr	r3, [r0]
   12278:	cmp	r3, #9
   1227c:	bne	121c4 <__assert_fail@plt+0x1178>
   12280:	b	121cc <__assert_fail@plt+0x1180>
   12284:	cmp	r3, #0
   12288:	beq	12230 <__assert_fail@plt+0x11e4>
   1228c:	mov	r2, #5
   12290:	movw	r1, #11508	; 0x2cf4
   12294:	mov	r0, #0
   12298:	movt	r1, #1
   1229c:	bl	10e18 <dcgettext@plt>
   122a0:	bl	10fd4 <warn@plt>
   122a4:	b	12218 <__assert_fail@plt+0x11cc>
   122a8:	ldr	r3, [pc, #196]	; 12374 <__assert_fail@plt+0x1328>
   122ac:	ldr	r2, [pc, #196]	; 12378 <__assert_fail@plt+0x132c>
   122b0:	add	r3, pc, r3
   122b4:	push	{r4, r5, r6, r7, lr}
   122b8:	sub	sp, sp, #116	; 0x74
   122bc:	ldr	r4, [r3, r2]
   122c0:	mov	r5, r1
   122c4:	mov	r1, #47	; 0x2f
   122c8:	mov	r6, r0
   122cc:	ldr	r3, [r4]
   122d0:	str	r3, [sp, #108]	; 0x6c
   122d4:	bl	10fc8 <strrchr@plt>
   122d8:	mov	r3, #0
   122dc:	str	r3, [r5]
   122e0:	subs	r7, r0, #0
   122e4:	beq	1231c <__assert_fail@plt+0x12d0>
   122e8:	ldr	r1, [pc, #140]	; 1237c <__assert_fail@plt+0x1330>
   122ec:	mov	r2, #4
   122f0:	add	r1, pc, r1
   122f4:	bl	1101c <strncmp@plt>
   122f8:	cmp	r0, #0
   122fc:	bne	1231c <__assert_fail@plt+0x12d0>
   12300:	bl	10ed8 <__ctype_b_loc@plt>
   12304:	ldrsb	r3, [r7, #4]
   12308:	lsl	r3, r3, #1
   1230c:	ldr	r2, [r0]
   12310:	ldrh	r3, [r2, r3]
   12314:	tst	r3, #2048	; 0x800
   12318:	bne	12338 <__assert_fail@plt+0x12ec>
   1231c:	mov	r0, #0
   12320:	ldr	r2, [sp, #108]	; 0x6c
   12324:	ldr	r3, [r4]
   12328:	cmp	r2, r3
   1232c:	bne	12370 <__assert_fail@plt+0x1324>
   12330:	add	sp, sp, #116	; 0x74
   12334:	pop	{r4, r5, r6, r7, pc}
   12338:	mov	r1, r6
   1233c:	mov	r0, #3
   12340:	mov	r2, sp
   12344:	bl	11004 <__xstat64@plt>
   12348:	cmp	r0, #0
   1234c:	bne	1231c <__assert_fail@plt+0x12d0>
   12350:	ldr	r3, [sp, #16]
   12354:	and	r3, r3, #61440	; 0xf000
   12358:	cmp	r3, #24576	; 0x6000
   1235c:	bne	1231c <__assert_fail@plt+0x12d0>
   12360:	mov	r0, #1
   12364:	add	r7, r7, r0
   12368:	str	r7, [r5]
   1236c:	b	12320 <__assert_fail@plt+0x12d4>
   12370:	bl	10e24 <__stack_chk_fail@plt>
   12374:	andeq	r1, r1, r8, asr #26
   12378:	andeq	r0, r0, ip, ror #1
   1237c:	andeq	r0, r0, ip, asr #27
   12380:	ldr	r3, [pc, #748]	; 12674 <__assert_fail@plt+0x1628>
   12384:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12388:	mov	r5, r0
   1238c:	ldr	r0, [pc, #740]	; 12678 <__assert_fail@plt+0x162c>
   12390:	add	r3, pc, r3
   12394:	sub	sp, sp, #4096	; 0x1000
   12398:	ldrsb	r2, [r5]
   1239c:	sub	sp, sp, #36	; 0x24
   123a0:	mov	r6, r1
   123a4:	ldr	r0, [r3, r0]
   123a8:	add	r1, sp, #8192	; 0x2000
   123ac:	cmp	r2, #47	; 0x2f
   123b0:	ldr	r3, [r0]
   123b4:	str	r0, [sp, #12]
   123b8:	str	r3, [r1, #-4068]	; 0xfffff01c
   123bc:	beq	1262c <__assert_fail@plt+0x15e0>
   123c0:	mov	r0, r6
   123c4:	movw	r1, #4095	; 0xfff
   123c8:	bl	10ee4 <getcwd@plt>
   123cc:	cmp	r0, #0
   123d0:	beq	1257c <__assert_fail@plt+0x1530>
   123d4:	mov	r0, r6
   123d8:	bl	10efc <strlen@plt>
   123dc:	add	r4, r6, r0
   123e0:	ldrsb	r3, [r4, #-1]
   123e4:	cmp	r3, #47	; 0x2f
   123e8:	addne	r4, r4, #1
   123ec:	movne	r3, #47	; 0x2f
   123f0:	strbne	r3, [r6, r0]
   123f4:	movw	fp, #61432	; 0xeff8
   123f8:	movt	fp, #65535	; 0xffff
   123fc:	ldrb	r2, [r5]
   12400:	mov	r7, #0
   12404:	add	r3, r6, #1
   12408:	add	r9, sp, #24
   1240c:	str	r3, [sp, #20]
   12410:	mov	r3, fp
   12414:	mov	sl, r7
   12418:	mov	fp, r7
   1241c:	mov	r7, r3
   12420:	cmp	r2, #0
   12424:	beq	1254c <__assert_fail@plt+0x1500>
   12428:	sxtb	r1, r2
   1242c:	cmp	r1, #47	; 0x2f
   12430:	beq	125c0 <__assert_fail@plt+0x1574>
   12434:	cmp	r1, #46	; 0x2e
   12438:	beq	125cc <__assert_fail@plt+0x1580>
   1243c:	rsb	r1, r6, r4
   12440:	cmp	r1, #4096	; 0x1000
   12444:	bge	125a0 <__assert_fail@plt+0x1554>
   12448:	add	r1, r5, #1
   1244c:	b	1245c <__assert_fail@plt+0x1410>
   12450:	rsb	r3, r6, r4
   12454:	cmp	r3, #4096	; 0x1000
   12458:	bge	125a0 <__assert_fail@plt+0x1554>
   1245c:	strb	r2, [r4], #1
   12460:	mov	r5, r1
   12464:	ldrb	r2, [r1], #1
   12468:	cmp	r2, #47	; 0x2f
   1246c:	cmpne	r2, #0
   12470:	moveq	ip, #0
   12474:	movne	ip, #1
   12478:	bne	12450 <__assert_fail@plt+0x1404>
   1247c:	cmp	sl, #256	; 0x100
   12480:	str	r5, [sp, #16]
   12484:	add	sl, sl, #1
   12488:	str	sl, [sp, #8]
   1248c:	bgt	12654 <__assert_fail@plt+0x1608>
   12490:	strb	ip, [r4]
   12494:	mov	r0, r6
   12498:	mov	r1, r9
   1249c:	mov	r2, #4096	; 0x1000
   124a0:	str	ip, [sp, #4]
   124a4:	bl	10e60 <readlink@plt>
   124a8:	ldr	ip, [sp, #4]
   124ac:	subs	r8, r0, #0
   124b0:	blt	1263c <__assert_fail@plt+0x15f0>
   124b4:	add	r1, sp, #4096	; 0x1000
   124b8:	strb	ip, [r9, r8]
   124bc:	add	r1, r1, #32
   124c0:	ldrb	r1, [r1, r7]
   124c4:	sxtb	r2, r1
   124c8:	cmp	r2, #47	; 0x2f
   124cc:	moveq	sl, r6
   124d0:	beq	124ec <__assert_fail@plt+0x14a0>
   124d4:	sub	r4, r4, #1
   124d8:	mov	sl, r4
   124dc:	sub	r4, r4, #1
   124e0:	ldrsb	r3, [sl]
   124e4:	cmp	r3, #47	; 0x2f
   124e8:	bne	124d8 <__assert_fail@plt+0x148c>
   124ec:	mov	r0, r5
   124f0:	bl	10efc <strlen@plt>
   124f4:	mov	r4, r0
   124f8:	add	r0, r8, r0
   124fc:	add	r0, r0, #1
   12500:	bl	10eb4 <malloc@plt>
   12504:	subs	r5, r0, #0
   12508:	beq	12668 <__assert_fail@plt+0x161c>
   1250c:	mov	r1, r9
   12510:	mov	r2, r8
   12514:	bl	10e0c <memcpy@plt>
   12518:	ldr	r1, [sp, #16]
   1251c:	add	r2, r4, #1
   12520:	add	r0, r5, r8
   12524:	bl	10e0c <memcpy@plt>
   12528:	mov	r0, fp
   1252c:	bl	10ddc <free@plt>
   12530:	mov	fp, r5
   12534:	mov	r3, #47	; 0x2f
   12538:	add	r4, sl, #1
   1253c:	strb	r3, [sl]
   12540:	ldr	sl, [sp, #8]
   12544:	ldrb	r2, [r5]
   12548:	b	12420 <__assert_fail@plt+0x13d4>
   1254c:	add	r3, r6, #1
   12550:	mov	r7, fp
   12554:	cmp	r4, r3
   12558:	beq	12568 <__assert_fail@plt+0x151c>
   1255c:	ldrsb	r3, [r4, #-1]
   12560:	cmp	r3, #47	; 0x2f
   12564:	subeq	r4, r4, #1
   12568:	mov	r0, r7
   1256c:	mov	r3, #0
   12570:	strb	r3, [r4]
   12574:	bl	10ddc <free@plt>
   12578:	mov	r0, r6
   1257c:	add	r1, sp, #8192	; 0x2000
   12580:	ldr	r2, [r1, #-4068]	; 0xfffff01c
   12584:	ldr	r1, [sp, #12]
   12588:	ldr	r3, [r1]
   1258c:	cmp	r2, r3
   12590:	bne	12670 <__assert_fail@plt+0x1624>
   12594:	add	sp, sp, #4096	; 0x1000
   12598:	add	sp, sp, #36	; 0x24
   1259c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125a0:	bl	10f20 <__errno_location@plt>
   125a4:	mov	r7, fp
   125a8:	mov	r3, #36	; 0x24
   125ac:	str	r3, [r0]
   125b0:	mov	r0, r7
   125b4:	bl	10ddc <free@plt>
   125b8:	mov	r0, #0
   125bc:	b	1257c <__assert_fail@plt+0x1530>
   125c0:	ldrb	r2, [r5, #1]
   125c4:	add	r5, r5, #1
   125c8:	b	12420 <__assert_fail@plt+0x13d4>
   125cc:	ldrb	r0, [r5, #1]
   125d0:	sxtb	r1, r0
   125d4:	cmp	r1, #0
   125d8:	cmpne	r1, #47	; 0x2f
   125dc:	addeq	r5, r5, #1
   125e0:	moveq	r2, r0
   125e4:	beq	12420 <__assert_fail@plt+0x13d4>
   125e8:	cmp	r1, #46	; 0x2e
   125ec:	bne	1243c <__assert_fail@plt+0x13f0>
   125f0:	ldrb	r1, [r5, #2]
   125f4:	cmp	r1, #0
   125f8:	cmpne	r1, #47	; 0x2f
   125fc:	bne	1243c <__assert_fail@plt+0x13f0>
   12600:	add	r5, r5, #2
   12604:	ldr	r2, [sp, #20]
   12608:	b	1261c <__assert_fail@plt+0x15d0>
   1260c:	sub	r4, r4, #1
   12610:	ldrsb	r3, [r4, #-1]
   12614:	cmp	r3, #47	; 0x2f
   12618:	beq	12624 <__assert_fail@plt+0x15d8>
   1261c:	cmp	r4, r2
   12620:	bhi	1260c <__assert_fail@plt+0x15c0>
   12624:	mov	r2, r1
   12628:	b	12420 <__assert_fail@plt+0x13d4>
   1262c:	strb	r2, [r6]
   12630:	add	r5, r5, #1
   12634:	add	r4, r6, #1
   12638:	b	123f4 <__assert_fail@plt+0x13a8>
   1263c:	bl	10f20 <__errno_location@plt>
   12640:	ldr	r2, [r0]
   12644:	cmp	r2, #22
   12648:	bne	12668 <__assert_fail@plt+0x161c>
   1264c:	mov	sl, r4
   12650:	b	12534 <__assert_fail@plt+0x14e8>
   12654:	bl	10f20 <__errno_location@plt>
   12658:	mov	r7, fp
   1265c:	mov	r3, #40	; 0x28
   12660:	str	r3, [r0]
   12664:	b	125b0 <__assert_fail@plt+0x1564>
   12668:	mov	r7, fp
   1266c:	b	125b0 <__assert_fail@plt+0x1564>
   12670:	bl	10e24 <__stack_chk_fail@plt>
   12674:	andeq	r1, r1, r8, ror #24
   12678:	andeq	r0, r0, ip, ror #1
   1267c:	ldr	r3, [pc, #292]	; 127a8 <__assert_fail@plt+0x175c>
   12680:	cmp	r0, #0
   12684:	ldr	r2, [pc, #288]	; 127ac <__assert_fail@plt+0x1760>
   12688:	add	r3, pc, r3
   1268c:	push	{r4, r5, r6, r7, lr}
   12690:	sub	sp, sp, #532	; 0x214
   12694:	ldr	r5, [r3, r2]
   12698:	ldr	r3, [r5]
   1269c:	str	r3, [sp, #524]	; 0x20c
   126a0:	beq	1278c <__assert_fail@plt+0x1740>
   126a4:	ldrsb	r3, [r0]
   126a8:	cmp	r3, #0
   126ac:	beq	1278c <__assert_fail@plt+0x1740>
   126b0:	add	r4, sp, #12
   126b4:	ldr	r2, [pc, #244]	; 127b0 <__assert_fail@plt+0x1764>
   126b8:	mov	r1, #256	; 0x100
   126bc:	str	r0, [sp, #4]
   126c0:	mov	r3, r1
   126c4:	add	r2, pc, r2
   126c8:	mov	r0, r4
   126cc:	str	r2, [sp]
   126d0:	mov	r2, #1
   126d4:	bl	11040 <__snprintf_chk@plt>
   126d8:	ldr	r1, [pc, #212]	; 127b4 <__assert_fail@plt+0x1768>
   126dc:	mov	r0, r4
   126e0:	add	r1, pc, r1
   126e4:	bl	10fec <fopen64@plt>
   126e8:	subs	r7, r0, #0
   126ec:	beq	1278c <__assert_fail@plt+0x1740>
   126f0:	add	r6, sp, #268	; 0x10c
   126f4:	mov	r1, #256	; 0x100
   126f8:	mov	r2, r7
   126fc:	mov	r0, r6
   12700:	bl	10de8 <fgets@plt>
   12704:	cmp	r0, #0
   12708:	beq	12764 <__assert_fail@plt+0x1718>
   1270c:	mov	r0, r6
   12710:	bl	10efc <strlen@plt>
   12714:	cmp	r0, #1
   12718:	bls	12764 <__assert_fail@plt+0x1718>
   1271c:	add	r3, sp, #528	; 0x210
   12720:	ldr	r2, [pc, #144]	; 127b8 <__assert_fail@plt+0x176c>
   12724:	add	ip, r3, r0
   12728:	mov	r1, #256	; 0x100
   1272c:	str	r6, [sp, #4]
   12730:	mov	r3, r1
   12734:	mov	r6, #0
   12738:	add	r2, pc, r2
   1273c:	mov	r0, r4
   12740:	str	r2, [sp]
   12744:	mov	r2, #1
   12748:	strb	r6, [ip, #-261]	; 0xfffffefb
   1274c:	bl	11040 <__snprintf_chk@plt>
   12750:	mov	r0, r4
   12754:	mov	r1, r6
   12758:	bl	10f98 <access@plt>
   1275c:	cmp	r0, r6
   12760:	beq	12794 <__assert_fail@plt+0x1748>
   12764:	mov	r4, #0
   12768:	mov	r0, r7
   1276c:	bl	10fb0 <fclose@plt>
   12770:	mov	r0, r4
   12774:	ldr	r2, [sp, #524]	; 0x20c
   12778:	ldr	r3, [r5]
   1277c:	cmp	r2, r3
   12780:	bne	127a4 <__assert_fail@plt+0x1758>
   12784:	add	sp, sp, #532	; 0x214
   12788:	pop	{r4, r5, r6, r7, pc}
   1278c:	mov	r0, #0
   12790:	b	12774 <__assert_fail@plt+0x1728>
   12794:	mov	r0, r4
   12798:	bl	10f5c <__strdup@plt>
   1279c:	mov	r4, r0
   127a0:	b	12768 <__assert_fail@plt+0x171c>
   127a4:	bl	10e24 <__stack_chk_fail@plt>
   127a8:	andeq	r1, r1, r0, ror r9
   127ac:	andeq	r0, r0, ip, ror #1
   127b0:	andeq	r0, r0, r0, lsl #20
   127b4:	andeq	r0, r0, ip, asr #19
   127b8:	andeq	r0, r0, r4, lsr #19
   127bc:	ldr	r3, [pc, #200]	; 1288c <__assert_fail@plt+0x1840>
   127c0:	ldr	r2, [pc, #200]	; 12890 <__assert_fail@plt+0x1844>
   127c4:	add	r3, pc, r3
   127c8:	push	{r4, r5, r6, r7, lr}
   127cc:	sub	sp, sp, #4096	; 0x1000
   127d0:	ldr	r4, [r3, r2]
   127d4:	sub	sp, sp, #20
   127d8:	add	r2, sp, #8192	; 0x2000
   127dc:	subs	r7, r0, #0
   127e0:	ldr	r3, [r4]
   127e4:	str	r3, [r2, #-4084]	; 0xfffff00c
   127e8:	beq	12880 <__assert_fail@plt+0x1834>
   127ec:	ldrsb	r3, [r7]
   127f0:	cmp	r3, #0
   127f4:	moveq	r0, r3
   127f8:	beq	12848 <__assert_fail@plt+0x17fc>
   127fc:	add	r6, sp, #16
   12800:	sub	r5, r6, #8
   12804:	mov	r1, r5
   12808:	bl	12380 <__assert_fail@plt+0x1334>
   1280c:	cmp	r0, #0
   12810:	beq	12874 <__assert_fail@plt+0x1828>
   12814:	sub	r1, r6, #12
   12818:	mov	r0, r5
   1281c:	bl	122a8 <__assert_fail@plt+0x125c>
   12820:	cmp	r0, #0
   12824:	beq	12868 <__assert_fail@plt+0x181c>
   12828:	add	r2, sp, #4096	; 0x1000
   1282c:	movw	r3, #61428	; 0xeff4
   12830:	add	r2, r2, #16
   12834:	movt	r3, #65535	; 0xffff
   12838:	ldr	r0, [r2, r3]
   1283c:	bl	1267c <__assert_fail@plt+0x1630>
   12840:	cmp	r0, #0
   12844:	beq	12868 <__assert_fail@plt+0x181c>
   12848:	add	r3, sp, #8192	; 0x2000
   1284c:	ldr	r2, [r3, #-4084]	; 0xfffff00c
   12850:	ldr	r3, [r4]
   12854:	cmp	r2, r3
   12858:	bne	12888 <__assert_fail@plt+0x183c>
   1285c:	add	sp, sp, #4096	; 0x1000
   12860:	add	sp, sp, #20
   12864:	pop	{r4, r5, r6, r7, pc}
   12868:	mov	r0, r5
   1286c:	bl	10f5c <__strdup@plt>
   12870:	b	12848 <__assert_fail@plt+0x17fc>
   12874:	mov	r0, r7
   12878:	bl	10f5c <__strdup@plt>
   1287c:	b	12848 <__assert_fail@plt+0x17fc>
   12880:	mov	r0, r7
   12884:	b	12848 <__assert_fail@plt+0x17fc>
   12888:	bl	10e24 <__stack_chk_fail@plt>
   1288c:	andeq	r1, r1, r4, lsr r8
   12890:	andeq	r0, r0, ip, ror #1
   12894:	ldr	r3, [pc, #320]	; 129dc <__assert_fail@plt+0x1990>
   12898:	ldr	r2, [pc, #320]	; 129e0 <__assert_fail@plt+0x1994>
   1289c:	add	r3, pc, r3
   128a0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   128a4:	sub	sp, sp, #4096	; 0x1000
   128a8:	ldr	r4, [r3, r2]
   128ac:	sub	sp, sp, #16
   128b0:	add	r2, sp, #8192	; 0x2000
   128b4:	subs	r5, r0, #0
   128b8:	ldr	r3, [r4]
   128bc:	str	r3, [r2, #-4084]	; 0xfffff00c
   128c0:	beq	129a0 <__assert_fail@plt+0x1954>
   128c4:	ldrsb	r3, [r5]
   128c8:	cmp	r3, #0
   128cc:	beq	129a0 <__assert_fail@plt+0x1954>
   128d0:	bl	10e48 <geteuid@plt>
   128d4:	mov	sl, r0
   128d8:	bl	10e6c <getegid@plt>
   128dc:	mov	r8, r0
   128e0:	bl	10f68 <getgid@plt>
   128e4:	bl	10fa4 <setegid@plt>
   128e8:	cmp	r0, #0
   128ec:	blt	129a0 <__assert_fail@plt+0x1954>
   128f0:	bl	10dd0 <getuid@plt>
   128f4:	bl	10e54 <seteuid@plt>
   128f8:	cmp	r0, #0
   128fc:	blt	129a0 <__assert_fail@plt+0x1954>
   12900:	bl	10f20 <__errno_location@plt>
   12904:	add	r7, sp, #16
   12908:	mov	r9, #0
   1290c:	mov	r6, r0
   12910:	mov	r0, r5
   12914:	sub	r5, r7, #8
   12918:	str	r9, [r6]
   1291c:	mov	r1, r5
   12920:	bl	12380 <__assert_fail@plt+0x1334>
   12924:	cmp	r0, #0
   12928:	beq	129a8 <__assert_fail@plt+0x195c>
   1292c:	sub	r1, r7, #12
   12930:	mov	r0, r5
   12934:	bl	122a8 <__assert_fail@plt+0x125c>
   12938:	cmp	r0, r9
   1293c:	bne	129b4 <__assert_fail@plt+0x1968>
   12940:	mov	r0, r5
   12944:	mov	r9, #0
   12948:	bl	10f5c <__strdup@plt>
   1294c:	mov	r7, r0
   12950:	mov	r0, r8
   12954:	bl	10fa4 <setegid@plt>
   12958:	cmp	r0, #0
   1295c:	blt	12998 <__assert_fail@plt+0x194c>
   12960:	mov	r0, sl
   12964:	bl	10e54 <seteuid@plt>
   12968:	cmp	r0, #0
   1296c:	blt	12998 <__assert_fail@plt+0x194c>
   12970:	mov	r0, r7
   12974:	str	r9, [r6]
   12978:	add	r3, sp, #8192	; 0x2000
   1297c:	ldr	r2, [r3, #-4084]	; 0xfffff00c
   12980:	ldr	r3, [r4]
   12984:	cmp	r2, r3
   12988:	bne	129d8 <__assert_fail@plt+0x198c>
   1298c:	add	sp, sp, #4096	; 0x1000
   12990:	add	sp, sp, #16
   12994:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12998:	mov	r0, r7
   1299c:	bl	10ddc <free@plt>
   129a0:	mov	r0, #0
   129a4:	b	12978 <__assert_fail@plt+0x192c>
   129a8:	ldr	r9, [r6]
   129ac:	mov	r7, r0
   129b0:	b	12950 <__assert_fail@plt+0x1904>
   129b4:	add	r2, sp, #4096	; 0x1000
   129b8:	movw	r3, #61428	; 0xeff4
   129bc:	add	r2, r2, #16
   129c0:	movt	r3, #65535	; 0xffff
   129c4:	ldr	r0, [r2, r3]
   129c8:	bl	1267c <__assert_fail@plt+0x1630>
   129cc:	subs	r7, r0, #0
   129d0:	bne	12950 <__assert_fail@plt+0x1904>
   129d4:	b	12940 <__assert_fail@plt+0x18f4>
   129d8:	bl	10e24 <__stack_chk_fail@plt>
   129dc:	andeq	r1, r1, ip, asr r7
   129e0:	andeq	r0, r0, ip, ror #1
   129e4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   129e8:	mov	r7, r0
   129ec:	ldr	r6, [pc, #76]	; 12a40 <__assert_fail@plt+0x19f4>
   129f0:	mov	r8, r1
   129f4:	ldr	r5, [pc, #72]	; 12a44 <__assert_fail@plt+0x19f8>
   129f8:	mov	r9, r2
   129fc:	add	r6, pc, r6
   12a00:	bl	10d98 <calloc@plt-0x20>
   12a04:	add	r5, pc, r5
   12a08:	rsb	r6, r5, r6
   12a0c:	asrs	r6, r6, #2
   12a10:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   12a14:	sub	r5, r5, #4
   12a18:	mov	r4, #0
   12a1c:	add	r4, r4, #1
   12a20:	ldr	r3, [r5, #4]!
   12a24:	mov	r0, r7
   12a28:	mov	r1, r8
   12a2c:	mov	r2, r9
   12a30:	blx	r3
   12a34:	cmp	r4, r6
   12a38:	bne	12a1c <__assert_fail@plt+0x19d0>
   12a3c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12a40:	strdeq	r1, [r1], -ip
   12a44:	strdeq	r1, [r1], -r0
   12a48:	bx	lr
   12a4c:	ldr	r3, [pc, #28]	; 12a70 <__assert_fail@plt+0x1a24>
   12a50:	mov	r1, #0
   12a54:	ldr	r2, [pc, #24]	; 12a74 <__assert_fail@plt+0x1a28>
   12a58:	add	r3, pc, r3
   12a5c:	ldr	r3, [r3, r2]
   12a60:	cmp	r3, #0
   12a64:	ldrne	r2, [r3]
   12a68:	moveq	r2, r3
   12a6c:	b	10f44 <__cxa_atexit@plt>
   12a70:	andeq	r1, r1, r0, lsr #11
   12a74:	strdeq	r0, [r0], -r4

Disassembly of section .fini:

00012a78 <.fini>:
   12a78:	push	{r3, lr}
   12a7c:	pop	{r3, pc}
