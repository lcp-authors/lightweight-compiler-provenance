
centos-preinstalled/pathchk:     file format elf32-littlearm


Disassembly of section .init:

00010e94 <.init>:
   10e94:	push	{r3, lr}
   10e98:	bl	118ac <strspn@plt+0x770>
   10e9c:	pop	{r3, pc}

Disassembly of section .plt:

00010ea0 <fdopen@plt-0x14>:
   10ea0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ea4:	ldr	lr, [pc, #4]	; 10eb0 <fdopen@plt-0x4>
   10ea8:	add	lr, pc, lr
   10eac:	ldr	pc, [lr, #8]!
   10eb0:	andeq	r5, r1, r0, asr r1

00010eb4 <fdopen@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #86016	; 0x15000
   10ebc:	ldr	pc, [ip, #336]!	; 0x150

00010ec0 <calloc@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #86016	; 0x15000
   10ec8:	ldr	pc, [ip, #328]!	; 0x148

00010ecc <fputs_unlocked@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #86016	; 0x15000
   10ed4:	ldr	pc, [ip, #320]!	; 0x140

00010ed8 <raise@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #86016	; 0x15000
   10ee0:	ldr	pc, [ip, #312]!	; 0x138

00010ee4 <strcmp@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #86016	; 0x15000
   10eec:	ldr	pc, [ip, #304]!	; 0x130

00010ef0 <pathconf@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #86016	; 0x15000
   10ef8:	ldr	pc, [ip, #296]!	; 0x128

00010efc <fflush@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #86016	; 0x15000
   10f04:	ldr	pc, [ip, #288]!	; 0x120

00010f08 <free@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #86016	; 0x15000
   10f10:	ldr	pc, [ip, #280]!	; 0x118

00010f14 <_exit@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #86016	; 0x15000
   10f1c:	ldr	pc, [ip, #272]!	; 0x110

00010f20 <memcpy@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #86016	; 0x15000
   10f28:	ldr	pc, [ip, #264]!	; 0x108

00010f2c <mbsinit@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #86016	; 0x15000
   10f34:	ldr	pc, [ip, #256]!	; 0x100

00010f38 <memcmp@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #86016	; 0x15000
   10f40:	ldr	pc, [ip, #248]!	; 0xf8

00010f44 <dcgettext@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #86016	; 0x15000
   10f4c:	ldr	pc, [ip, #240]!	; 0xf0

00010f50 <__stack_chk_fail@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #232]!	; 0xe8

00010f5c <realloc@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #224]!	; 0xe0

00010f68 <textdomain@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #216]!	; 0xd8

00010f74 <iswprint@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #208]!	; 0xd0

00010f80 <fwrite@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #86016	; 0x15000
   10f88:	ldr	pc, [ip, #200]!	; 0xc8

00010f8c <lseek64@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #86016	; 0x15000
   10f94:	ldr	pc, [ip, #192]!	; 0xc0

00010f98 <__ctype_get_mb_cur_max@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #86016	; 0x15000
   10fa0:	ldr	pc, [ip, #184]!	; 0xb8

00010fa4 <strcpy@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #86016	; 0x15000
   10fac:	ldr	pc, [ip, #176]!	; 0xb0

00010fb0 <__fpending@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #86016	; 0x15000
   10fb8:	ldr	pc, [ip, #168]!	; 0xa8

00010fbc <mbrtowc@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #86016	; 0x15000
   10fc4:	ldr	pc, [ip, #160]!	; 0xa0

00010fc8 <error@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #86016	; 0x15000
   10fd0:	ldr	pc, [ip, #152]!	; 0x98

00010fd4 <open64@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #86016	; 0x15000
   10fdc:	ldr	pc, [ip, #144]!	; 0x90

00010fe0 <getenv@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #86016	; 0x15000
   10fe8:	ldr	pc, [ip, #136]!	; 0x88

00010fec <malloc@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #86016	; 0x15000
   10ff4:	ldr	pc, [ip, #128]!	; 0x80

00010ff8 <__libc_start_main@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #86016	; 0x15000
   11000:	ldr	pc, [ip, #120]!	; 0x78

00011004 <__freading@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #86016	; 0x15000
   1100c:	ldr	pc, [ip, #112]!	; 0x70

00011010 <__gmon_start__@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #86016	; 0x15000
   11018:	ldr	pc, [ip, #104]!	; 0x68

0001101c <getopt_long@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #86016	; 0x15000
   11024:	ldr	pc, [ip, #96]!	; 0x60

00011028 <__ctype_b_loc@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #86016	; 0x15000
   11030:	ldr	pc, [ip, #88]!	; 0x58

00011034 <exit@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #86016	; 0x15000
   1103c:	ldr	pc, [ip, #80]!	; 0x50

00011040 <strlen@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #86016	; 0x15000
   11048:	ldr	pc, [ip, #72]!	; 0x48

0001104c <strchr@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #86016	; 0x15000
   11054:	ldr	pc, [ip, #64]!	; 0x40

00011058 <ungetc@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #86016	; 0x15000
   11060:	ldr	pc, [ip, #56]!	; 0x38

00011064 <__errno_location@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #86016	; 0x15000
   1106c:	ldr	pc, [ip, #48]!	; 0x30

00011070 <__cxa_atexit@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #86016	; 0x15000
   11078:	ldr	pc, [ip, #40]!	; 0x28

0001107c <memset@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #86016	; 0x15000
   11084:	ldr	pc, [ip, #32]!

00011088 <fscanf@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #86016	; 0x15000
   11090:	ldr	pc, [ip, #24]!

00011094 <__printf_chk@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #86016	; 0x15000
   1109c:	ldr	pc, [ip, #16]!

000110a0 <fileno@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #86016	; 0x15000
   110a8:	ldr	pc, [ip, #8]!

000110ac <__fprintf_chk@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #86016	; 0x15000
   110b4:	ldr	pc, [ip, #0]!

000110b8 <fclose@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #20, 20	; 0x14000
   110c0:	ldr	pc, [ip, #4088]!	; 0xff8

000110c4 <fseeko64@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #20, 20	; 0x14000
   110cc:	ldr	pc, [ip, #4080]!	; 0xff0

000110d0 <__uflow@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #20, 20	; 0x14000
   110d8:	ldr	pc, [ip, #4072]!	; 0xfe8

000110dc <setlocale@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #20, 20	; 0x14000
   110e4:	ldr	pc, [ip, #4064]!	; 0xfe0

000110e8 <strrchr@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #20, 20	; 0x14000
   110f0:	ldr	pc, [ip, #4056]!	; 0xfd8

000110f4 <nl_langinfo@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #20, 20	; 0x14000
   110fc:	ldr	pc, [ip, #4048]!	; 0xfd0

00011100 <bindtextdomain@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #20, 20	; 0x14000
   11108:	ldr	pc, [ip, #4040]!	; 0xfc8

0001110c <strncmp@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #20, 20	; 0x14000
   11114:	ldr	pc, [ip, #4032]!	; 0xfc0

00011118 <abort@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #20, 20	; 0x14000
   11120:	ldr	pc, [ip, #4024]!	; 0xfb8

00011124 <close@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #20, 20	; 0x14000
   1112c:	ldr	pc, [ip, #4016]!	; 0xfb0

00011130 <__lxstat64@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #20, 20	; 0x14000
   11138:	ldr	pc, [ip, #4008]!	; 0xfa8

0001113c <strspn@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #20, 20	; 0x14000
   11144:	ldr	pc, [ip, #4000]!	; 0xfa0

Disassembly of section .text:

00011148 <close_stdout@@Base-0xa60>:
   11148:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1114c:	sub	sp, sp, #188	; 0xbc
   11150:	ldr	r4, [pc, #1700]	; 117fc <strspn@plt+0x6c0>
   11154:	mov	r7, #0
   11158:	ldr	r3, [pc, #1696]	; 11800 <strspn@plt+0x6c4>
   1115c:	mov	r6, r1
   11160:	add	r4, pc, r4
   11164:	str	r0, [sp, #20]
   11168:	str	r7, [sp, #24]
   1116c:	mov	r9, r7
   11170:	ldr	r3, [r4, r3]
   11174:	ldr	r0, [r1]
   11178:	ldr	sl, [pc, #1668]	; 11804 <strspn@plt+0x6c8>
   1117c:	ldr	r3, [r3]
   11180:	add	sl, pc, sl
   11184:	ldr	r8, [pc, #1660]	; 11808 <strspn@plt+0x6cc>
   11188:	ldr	r5, [pc, #1660]	; 1180c <strspn@plt+0x6d0>
   1118c:	str	r3, [sp, #180]	; 0xb4
   11190:	bl	11d64 <close_stdout@@Base+0x1bc>
   11194:	ldr	r1, [pc, #1652]	; 11810 <strspn@plt+0x6d4>
   11198:	mov	r0, #6
   1119c:	add	r8, pc, r8
   111a0:	add	r5, pc, r5
   111a4:	add	r1, pc, r1
   111a8:	bl	110dc <setlocale@plt>
   111ac:	ldr	r1, [pc, #1632]	; 11814 <strspn@plt+0x6d8>
   111b0:	mov	r0, sl
   111b4:	add	r1, pc, r1
   111b8:	bl	11100 <bindtextdomain@plt>
   111bc:	mov	r0, sl
   111c0:	bl	10f68 <textdomain@plt>
   111c4:	ldr	r3, [pc, #1612]	; 11818 <strspn@plt+0x6dc>
   111c8:	ldr	r0, [r4, r3]
   111cc:	bl	14698 <close_stdout@@Base+0x2af0>
   111d0:	str	r9, [sp]
   111d4:	mov	r1, r6
   111d8:	ldr	r0, [sp, #20]
   111dc:	mov	r2, r8
   111e0:	mov	r3, r5
   111e4:	mov	sl, #0
   111e8:	bl	1101c <getopt_long@plt>
   111ec:	cmn	r0, #1
   111f0:	beq	112cc <strspn@plt+0x190>
   111f4:	cmp	r0, #80	; 0x50
   111f8:	beq	112c4 <strspn@plt+0x188>
   111fc:	bgt	11218 <strspn@plt+0xdc>
   11200:	cmn	r0, #3
   11204:	beq	11240 <strspn@plt+0x104>
   11208:	cmn	r0, #2
   1120c:	bne	112bc <strspn@plt+0x180>
   11210:	mov	r0, sl
   11214:	bl	119a4 <strspn@plt+0x868>
   11218:	cmp	r0, #112	; 0x70
   1121c:	beq	11234 <strspn@plt+0xf8>
   11220:	cmp	r0, #256	; 0x100
   11224:	bne	112bc <strspn@plt+0x180>
   11228:	mov	r7, #1
   1122c:	str	r7, [sp, #24]
   11230:	b	111d0 <strspn@plt+0x94>
   11234:	mov	r2, #1
   11238:	str	r2, [sp, #24]
   1123c:	b	111d0 <strspn@plt+0x94>
   11240:	ldr	r2, [pc, #1492]	; 1181c <strspn@plt+0x6e0>
   11244:	ldr	r3, [pc, #1492]	; 11820 <strspn@plt+0x6e4>
   11248:	ldr	r1, [pc, #1492]	; 11824 <strspn@plt+0x6e8>
   1124c:	ldr	r0, [r4, r2]
   11250:	ldr	r3, [r4, r3]
   11254:	add	r1, pc, r1
   11258:	ldr	r2, [pc, #1480]	; 11828 <strspn@plt+0x6ec>
   1125c:	ldr	r0, [r0]
   11260:	ldr	r3, [r3]
   11264:	add	r2, pc, r2
   11268:	ldr	ip, [pc, #1468]	; 1182c <strspn@plt+0x6f0>
   1126c:	stmib	sp, {r1, r2}
   11270:	ldr	r1, [pc, #1464]	; 11830 <strspn@plt+0x6f4>
   11274:	add	ip, pc, ip
   11278:	ldr	r2, [pc, #1460]	; 11834 <strspn@plt+0x6f8>
   1127c:	str	sl, [sp, #12]
   11280:	add	r1, pc, r1
   11284:	str	ip, [sp]
   11288:	add	r2, pc, r2
   1128c:	bl	13a50 <close_stdout@@Base+0x1ea8>
   11290:	mov	r0, sl
   11294:	bl	11034 <exit@plt>
   11298:	ldr	r1, [pc, #1432]	; 11838 <strspn@plt+0x6fc>
   1129c:	mov	r2, #5
   112a0:	mov	r0, sl
   112a4:	add	r1, pc, r1
   112a8:	bl	10f44 <dcgettext@plt>
   112ac:	mov	r1, sl
   112b0:	mov	r2, r0
   112b4:	mov	r0, sl
   112b8:	bl	10fc8 <error@plt>
   112bc:	mov	r0, #1
   112c0:	bl	119a4 <strspn@plt+0x868>
   112c4:	mov	r7, #1
   112c8:	b	111d0 <strspn@plt+0x94>
   112cc:	ldr	r3, [pc, #1384]	; 1183c <strspn@plt+0x700>
   112d0:	ldr	r2, [sp, #20]
   112d4:	ldr	ip, [r4, r3]
   112d8:	ldr	r3, [ip]
   112dc:	cmp	r3, r2
   112e0:	beq	11298 <strspn@plt+0x15c>
   112e4:	ldr	r2, [pc, #1364]	; 11840 <strspn@plt+0x704>
   112e8:	mov	r3, #1
   112ec:	str	r3, [sp, #28]
   112f0:	add	r2, pc, r2
   112f4:	ldr	r3, [pc, #1352]	; 11844 <strspn@plt+0x708>
   112f8:	str	r2, [sp, #32]
   112fc:	ldr	r2, [pc, #1348]	; 11848 <strspn@plt+0x70c>
   11300:	add	r3, pc, r3
   11304:	str	r3, [sp, #56]	; 0x38
   11308:	add	r2, pc, r2
   1130c:	ldr	r3, [pc, #1336]	; 1184c <strspn@plt+0x710>
   11310:	str	r2, [sp, #52]	; 0x34
   11314:	ldr	r2, [pc, #1332]	; 11850 <strspn@plt+0x714>
   11318:	add	r3, pc, r3
   1131c:	str	r7, [sp, #36]	; 0x24
   11320:	mov	r7, ip
   11324:	add	r2, pc, r2
   11328:	str	r3, [sp, #60]	; 0x3c
   1132c:	str	r2, [sp, #48]	; 0x30
   11330:	str	r6, [sp, #40]	; 0x28
   11334:	ldr	r3, [r7]
   11338:	ldr	r2, [sp, #20]
   1133c:	cmp	r2, r3
   11340:	ble	11734 <strspn@plt+0x5f8>
   11344:	ldr	r2, [sp, #40]	; 0x28
   11348:	ldr	r6, [r2, r3, lsl #2]
   1134c:	mov	r0, r6
   11350:	bl	11040 <strlen@plt>
   11354:	ldr	r3, [sp, #36]	; 0x24
   11358:	cmp	r3, #0
   1135c:	mov	r4, r0
   11360:	movne	r0, r6
   11364:	bne	11598 <strspn@plt+0x45c>
   11368:	ldr	r2, [sp, #24]
   1136c:	cmp	r2, #0
   11370:	bne	11744 <strspn@plt+0x608>
   11374:	mov	r0, #3
   11378:	mov	r1, r6
   1137c:	add	r2, sp, #72	; 0x48
   11380:	bl	11130 <__lxstat64@plt>
   11384:	cmp	r0, #0
   11388:	beq	116b8 <strspn@plt+0x57c>
   1138c:	bl	11064 <__errno_location@plt>
   11390:	ldr	r1, [r0]
   11394:	mov	r9, r0
   11398:	cmp	r1, #2
   1139c:	bne	1170c <strspn@plt+0x5d0>
   113a0:	cmp	r4, #0
   113a4:	beq	1170c <strspn@plt+0x5d0>
   113a8:	cmp	r4, #255	; 0xff
   113ac:	bls	113f8 <strspn@plt+0x2bc>
   113b0:	ldrb	r3, [r6]
   113b4:	cmp	r3, #47	; 0x2f
   113b8:	beq	117b8 <strspn@plt+0x67c>
   113bc:	ldr	r8, [pc, #1168]	; 11854 <strspn@plt+0x718>
   113c0:	add	r8, pc, r8
   113c4:	mov	r5, #0
   113c8:	mov	r0, r8
   113cc:	str	r5, [r9]
   113d0:	mov	r1, #4
   113d4:	bl	10ef0 <pathconf@plt>
   113d8:	cmp	r0, #0
   113dc:	blt	117c4 <strspn@plt+0x688>
   113e0:	mov	r5, r0
   113e4:	cmp	r4, r5
   113e8:	bcs	11778 <strspn@plt+0x63c>
   113ec:	ldr	r2, [sp, #24]
   113f0:	cmp	r2, #0
   113f4:	bne	11704 <strspn@plt+0x5c8>
   113f8:	mov	r3, r6
   113fc:	ldrb	r2, [r3]
   11400:	cmp	r2, #47	; 0x2f
   11404:	beq	11664 <strspn@plt+0x528>
   11408:	cmp	r2, #0
   1140c:	beq	116b8 <strspn@plt+0x57c>
   11410:	ldrb	r2, [r3, #1]
   11414:	cmp	r2, #0
   11418:	cmpne	r2, #47	; 0x2f
   1141c:	beq	11664 <strspn@plt+0x528>
   11420:	add	r1, r3, #2
   11424:	mov	r0, #1
   11428:	mov	r3, r1
   1142c:	ldrb	r2, [r1], #1
   11430:	add	r0, r0, #1
   11434:	cmp	r2, #0
   11438:	cmpne	r2, #47	; 0x2f
   1143c:	moveq	r2, #0
   11440:	movne	r2, #1
   11444:	bne	11428 <strspn@plt+0x2ec>
   11448:	cmp	r0, #14
   1144c:	bls	113fc <strspn@plt+0x2c0>
   11450:	mov	ip, r2
   11454:	mov	r9, r6
   11458:	str	r7, [sp, #44]	; 0x2c
   1145c:	mov	sl, #14
   11460:	mov	r7, r6
   11464:	mov	r8, #0
   11468:	mov	r6, ip
   1146c:	ldrb	r4, [r9]
   11470:	cmp	r4, #47	; 0x2f
   11474:	bne	116c0 <strspn@plt+0x584>
   11478:	add	r3, r9, #1
   1147c:	mov	r5, r3
   11480:	ldrb	r4, [r3], #1
   11484:	cmp	r4, #47	; 0x2f
   11488:	beq	1147c <strspn@plt+0x340>
   1148c:	cmp	r4, #0
   11490:	beq	116b4 <strspn@plt+0x578>
   11494:	cmp	r6, #0
   11498:	bne	1166c <strspn@plt+0x530>
   1149c:	ldr	r9, [sp, #32]
   114a0:	cmp	r7, r5
   114a4:	movne	r9, r7
   114a8:	bl	11064 <__errno_location@plt>
   114ac:	mov	r1, #3
   114b0:	mov	fp, r0
   114b4:	mov	r0, r9
   114b8:	str	r8, [fp]
   114bc:	strb	r8, [r5]
   114c0:	bl	10ef0 <pathconf@plt>
   114c4:	strb	r4, [r5]
   114c8:	cmp	r0, #0
   114cc:	movge	sl, r0
   114d0:	blt	11674 <strspn@plt+0x538>
   114d4:	ldrb	r4, [r5, #1]
   114d8:	cmp	r4, #0
   114dc:	cmpne	r4, #47	; 0x2f
   114e0:	addeq	r9, r5, #1
   114e4:	moveq	r1, #1
   114e8:	beq	1150c <strspn@plt+0x3d0>
   114ec:	add	r3, r5, #2
   114f0:	mov	r1, #1
   114f4:	mov	r9, r3
   114f8:	ldrb	r4, [r3], #1
   114fc:	add	r1, r1, #1
   11500:	cmp	r4, #0
   11504:	cmpne	r4, #47	; 0x2f
   11508:	bne	114f4 <strspn@plt+0x3b8>
   1150c:	cmp	sl, r1
   11510:	bcs	1146c <strspn@plt+0x330>
   11514:	mov	r6, #0
   11518:	mov	r2, #5
   1151c:	mov	fp, r1
   11520:	strb	r6, [r9]
   11524:	ldr	r1, [sp, #56]	; 0x38
   11528:	mov	r0, r6
   1152c:	ldr	r7, [sp, #44]	; 0x2c
   11530:	bl	10f44 <dcgettext@plt>
   11534:	mov	r8, r0
   11538:	mov	r0, r5
   1153c:	bl	135b4 <close_stdout@@Base+0x1a0c>
   11540:	mov	r5, r6
   11544:	mov	r2, r8
   11548:	str	fp, [sp]
   1154c:	mov	r3, sl
   11550:	mov	r1, r6
   11554:	str	r0, [sp, #4]
   11558:	mov	r0, r6
   1155c:	bl	10fc8 <error@plt>
   11560:	strb	r4, [r9]
   11564:	ldr	r2, [sp, #28]
   11568:	ldr	r3, [r7]
   1156c:	and	r2, r5, r2
   11570:	str	r2, [sp, #28]
   11574:	add	r3, r3, #1
   11578:	str	r3, [r7]
   1157c:	b	11334 <strspn@plt+0x1f8>
   11580:	cmp	r6, r0
   11584:	beq	116c8 <strspn@plt+0x58c>
   11588:	ldrb	r3, [r0, #-1]
   1158c:	cmp	r3, #47	; 0x2f
   11590:	beq	116c8 <strspn@plt+0x58c>
   11594:	add	r0, r0, #1
   11598:	mov	r1, #45	; 0x2d
   1159c:	bl	1104c <strchr@plt>
   115a0:	cmp	r0, #0
   115a4:	bne	11580 <strspn@plt+0x444>
   115a8:	cmp	r4, #0
   115ac:	beq	1174c <strspn@plt+0x610>
   115b0:	ldr	r3, [sp, #24]
   115b4:	cmp	r3, #0
   115b8:	beq	11374 <strspn@plt+0x238>
   115bc:	ldr	r1, [pc, #660]	; 11858 <strspn@plt+0x71c>
   115c0:	mov	r0, r6
   115c4:	add	r1, pc, r1
   115c8:	bl	1113c <strspn@plt>
   115cc:	ldrb	r3, [r6, r0]
   115d0:	add	r8, r6, r0
   115d4:	cmp	r3, #0
   115d8:	moveq	r5, #256	; 0x100
   115dc:	beq	113e4 <strspn@plt+0x2a8>
   115e0:	mov	r5, #0
   115e4:	add	r3, sp, #64	; 0x40
   115e8:	rsb	r2, r0, r4
   115ec:	mov	r1, r8
   115f0:	mov	r0, r5
   115f4:	str	r5, [sp, #64]	; 0x40
   115f8:	str	r5, [sp, #68]	; 0x44
   115fc:	bl	10fbc <mbrtowc@plt>
   11600:	ldr	r1, [pc, #596]	; 1185c <strspn@plt+0x720>
   11604:	mov	r2, #5
   11608:	add	r1, pc, r1
   1160c:	mov	r9, r0
   11610:	mov	r0, r5
   11614:	bl	10f44 <dcgettext@plt>
   11618:	cmp	r9, #16
   1161c:	mov	r2, r8
   11620:	mov	r1, #6
   11624:	movls	r3, r9
   11628:	movhi	r3, #1
   1162c:	mov	r4, r0
   11630:	mov	r0, #1
   11634:	bl	13318 <close_stdout@@Base+0x1770>
   11638:	mov	r1, r6
   1163c:	mov	r8, r0
   11640:	mov	r0, r5
   11644:	bl	135ac <close_stdout@@Base+0x1a04>
   11648:	mov	r2, r4
   1164c:	mov	r3, r8
   11650:	mov	r1, r5
   11654:	str	r0, [sp]
   11658:	mov	r0, r5
   1165c:	bl	10fc8 <error@plt>
   11660:	b	11564 <strspn@plt+0x428>
   11664:	add	r3, r3, #1
   11668:	b	113fc <strspn@plt+0x2c0>
   1166c:	mov	sl, r6
   11670:	b	114d4 <strspn@plt+0x398>
   11674:	ldr	r1, [fp]
   11678:	cmp	r1, #0
   1167c:	beq	1172c <strspn@plt+0x5f0>
   11680:	cmp	r1, #2
   11684:	beq	11724 <strspn@plt+0x5e8>
   11688:	mov	r3, #0
   1168c:	strb	r3, [r5]
   11690:	ldr	r1, [fp]
   11694:	mov	r3, r9
   11698:	mov	r0, #0
   1169c:	ldr	r2, [sp, #52]	; 0x34
   116a0:	ldr	r7, [sp, #44]	; 0x2c
   116a4:	bl	10fc8 <error@plt>
   116a8:	strb	r4, [r5]
   116ac:	mov	r5, #0
   116b0:	b	11564 <strspn@plt+0x428>
   116b4:	ldr	r7, [sp, #44]	; 0x2c
   116b8:	mov	r5, #1
   116bc:	b	11564 <strspn@plt+0x428>
   116c0:	mov	r5, r9
   116c4:	b	1148c <strspn@plt+0x350>
   116c8:	ldr	r1, [pc, #400]	; 11860 <strspn@plt+0x724>
   116cc:	mov	r2, #5
   116d0:	mov	r0, #0
   116d4:	mov	r5, #0
   116d8:	add	r1, pc, r1
   116dc:	bl	10f44 <dcgettext@plt>
   116e0:	mov	r4, r0
   116e4:	mov	r0, r6
   116e8:	bl	135b4 <close_stdout@@Base+0x1a0c>
   116ec:	mov	r2, r4
   116f0:	mov	r3, r0
   116f4:	mov	r0, #0
   116f8:	mov	r1, r0
   116fc:	bl	10fc8 <error@plt>
   11700:	b	11564 <strspn@plt+0x428>
   11704:	mov	ip, #14
   11708:	b	11454 <strspn@plt+0x318>
   1170c:	mov	r3, r6
   11710:	mov	r0, #0
   11714:	ldr	r2, [sp, #48]	; 0x30
   11718:	mov	r5, #0
   1171c:	bl	10fc8 <error@plt>
   11720:	b	11564 <strspn@plt+0x428>
   11724:	mov	r6, sl
   11728:	b	114d4 <strspn@plt+0x398>
   1172c:	mvn	sl, #0
   11730:	b	114d4 <strspn@plt+0x398>
   11734:	ldr	r3, [sp, #28]
   11738:	rsbs	r0, r3, #1
   1173c:	movcc	r0, #0
   11740:	bl	11034 <exit@plt>
   11744:	cmp	r4, #0
   11748:	bne	115bc <strspn@plt+0x480>
   1174c:	ldr	r1, [pc, #272]	; 11864 <strspn@plt+0x728>
   11750:	mov	r2, #5
   11754:	mov	r0, #0
   11758:	mov	r5, #0
   1175c:	add	r1, pc, r1
   11760:	bl	10f44 <dcgettext@plt>
   11764:	mov	r2, r0
   11768:	mov	r0, #0
   1176c:	mov	r1, r0
   11770:	bl	10fc8 <error@plt>
   11774:	b	11564 <strspn@plt+0x428>
   11778:	ldr	r1, [sp, #60]	; 0x3c
   1177c:	mov	r2, #5
   11780:	mov	r0, #0
   11784:	bl	10f44 <dcgettext@plt>
   11788:	mov	r8, r0
   1178c:	mov	r0, r6
   11790:	bl	135b4 <close_stdout@@Base+0x1a0c>
   11794:	sub	r3, r5, #1
   11798:	mov	r2, r8
   1179c:	str	r4, [sp]
   117a0:	mov	r5, #0
   117a4:	str	r0, [sp, #4]
   117a8:	mov	r0, #0
   117ac:	mov	r1, r0
   117b0:	bl	10fc8 <error@plt>
   117b4:	b	11564 <strspn@plt+0x428>
   117b8:	ldr	r8, [pc, #168]	; 11868 <strspn@plt+0x72c>
   117bc:	add	r8, pc, r8
   117c0:	b	113c4 <strspn@plt+0x288>
   117c4:	ldr	r9, [r9]
   117c8:	cmp	r9, r5
   117cc:	beq	113e0 <strspn@plt+0x2a4>
   117d0:	ldr	r1, [pc, #148]	; 1186c <strspn@plt+0x730>
   117d4:	mov	r0, r5
   117d8:	mov	r2, #5
   117dc:	add	r1, pc, r1
   117e0:	bl	10f44 <dcgettext@plt>
   117e4:	mov	r1, r9
   117e8:	mov	r3, r8
   117ec:	mov	r2, r0
   117f0:	mov	r0, r5
   117f4:	bl	10fc8 <error@plt>
   117f8:	b	11564 <strspn@plt+0x428>
   117fc:	muleq	r1, r8, lr
   11800:	andeq	r0, r0, ip, ror #1
   11804:	strdeq	r3, [r0], -ip
   11808:	strdeq	r3, [r0], -r4
   1180c:	strdeq	r4, [r1], -ip
   11810:	muleq	r0, r8, r7
   11814:	muleq	r0, r4, r7
   11818:	strdeq	r0, [r0], -ip
   1181c:	andeq	r0, r0, r8, lsl #2
   11820:	strdeq	r0, [r0], -r4
   11824:	andeq	r3, r0, ip, lsl r7
   11828:	andeq	r3, r0, ip, lsl r7
   1182c:	strdeq	r3, [r0], -r0
   11830:	ldrdeq	r3, [r0], -ip
   11834:	strdeq	r3, [r0], -r0
   11838:	strdeq	r3, [r0], -r0
   1183c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11840:	andeq	r3, r0, r4, asr r6
   11844:			; <UNDEFINED> instruction: 0x000037b8
   11848:	andeq	r3, r0, r0, lsr #16
   1184c:	andeq	r3, r0, ip, ror #14
   11850:	andeq	r3, r0, r4, lsl #16
   11854:	andeq	r3, r0, r4, lsl #11
   11858:	andeq	r3, r0, ip, lsl r4
   1185c:	andeq	r3, r0, ip, lsl r4
   11860:	andeq	r3, r0, ip, asr #5
   11864:	andeq	r3, r0, r4, ror r2
   11868:	andeq	r3, r0, r4, lsl #3
   1186c:	andeq	r3, r0, r4, ror r2
   11870:	mov	fp, #0
   11874:	mov	lr, #0
   11878:	pop	{r1}		; (ldr r1, [sp], #4)
   1187c:	mov	r2, sp
   11880:	push	{r2}		; (str r2, [sp, #-4]!)
   11884:	push	{r0}		; (str r0, [sp, #-4]!)
   11888:	ldr	ip, [pc, #16]	; 118a0 <strspn@plt+0x764>
   1188c:	push	{ip}		; (str ip, [sp, #-4]!)
   11890:	ldr	r0, [pc, #12]	; 118a4 <strspn@plt+0x768>
   11894:	ldr	r3, [pc, #12]	; 118a8 <strspn@plt+0x76c>
   11898:	bl	10ff8 <__libc_start_main@plt>
   1189c:	bl	11118 <abort@plt>
   118a0:	muleq	r1, r4, r6
   118a4:	andeq	r1, r1, r8, asr #2
   118a8:	andeq	r4, r1, r0, lsr r6
   118ac:	ldr	r3, [pc, #20]	; 118c8 <strspn@plt+0x78c>
   118b0:	ldr	r2, [pc, #20]	; 118cc <strspn@plt+0x790>
   118b4:	add	r3, pc, r3
   118b8:	ldr	r2, [r3, r2]
   118bc:	cmp	r2, #0
   118c0:	bxeq	lr
   118c4:	b	11010 <__gmon_start__@plt>
   118c8:	andeq	r4, r1, r4, asr #14
   118cc:	andeq	r0, r0, r0, lsl #2
   118d0:	push	{r3, lr}
   118d4:	movw	r0, #24940	; 0x616c
   118d8:	ldr	r3, [pc, #36]	; 11904 <strspn@plt+0x7c8>
   118dc:	movt	r0, #2
   118e0:	rsb	r3, r0, r3
   118e4:	cmp	r3, #6
   118e8:	popls	{r3, pc}
   118ec:	movw	r3, #0
   118f0:	movt	r3, #0
   118f4:	cmp	r3, #0
   118f8:	popeq	{r3, pc}
   118fc:	blx	r3
   11900:	pop	{r3, pc}
   11904:	andeq	r6, r2, pc, ror #2
   11908:	push	{r3, lr}
   1190c:	movw	r0, #24940	; 0x616c
   11910:	movw	r3, #24940	; 0x616c
   11914:	movt	r0, #2
   11918:	movt	r3, #2
   1191c:	rsb	r3, r0, r3
   11920:	asr	r3, r3, #2
   11924:	add	r3, r3, r3, lsr #31
   11928:	asrs	r1, r3, #1
   1192c:	popeq	{r3, pc}
   11930:	movw	r2, #0
   11934:	movt	r2, #0
   11938:	cmp	r2, #0
   1193c:	popeq	{r3, pc}
   11940:	blx	r2
   11944:	pop	{r3, pc}
   11948:	push	{r4, lr}
   1194c:	movw	r4, #24940	; 0x616c
   11950:	movt	r4, #2
   11954:	ldrb	r3, [r4]
   11958:	cmp	r3, #0
   1195c:	popne	{r4, pc}
   11960:	bl	118d0 <strspn@plt+0x794>
   11964:	mov	r3, #1
   11968:	strb	r3, [r4]
   1196c:	pop	{r4, pc}
   11970:	movw	r0, #24224	; 0x5ea0
   11974:	movt	r0, #2
   11978:	push	{r3, lr}
   1197c:	ldr	r3, [r0]
   11980:	cmp	r3, #0
   11984:	beq	1199c <strspn@plt+0x860>
   11988:	movw	r3, #0
   1198c:	movt	r3, #0
   11990:	cmp	r3, #0
   11994:	beq	1199c <strspn@plt+0x860>
   11998:	blx	r3
   1199c:	pop	{r3, lr}
   119a0:	b	11908 <strspn@plt+0x7cc>
   119a4:	push	{r4, r5, r6, lr}
   119a8:	subs	r4, r0, #0
   119ac:	ldr	r5, [pc, #400]	; 11b44 <strspn@plt+0xa08>
   119b0:	add	r5, pc, r5
   119b4:	beq	119fc <strspn@plt+0x8c0>
   119b8:	ldr	r3, [pc, #392]	; 11b48 <strspn@plt+0xa0c>
   119bc:	mov	r2, #5
   119c0:	ldr	r1, [pc, #388]	; 11b4c <strspn@plt+0xa10>
   119c4:	mov	r0, #0
   119c8:	ldr	r3, [r5, r3]
   119cc:	add	r1, pc, r1
   119d0:	ldr	r6, [r3]
   119d4:	bl	10f44 <dcgettext@plt>
   119d8:	ldr	r3, [pc, #368]	; 11b50 <strspn@plt+0xa14>
   119dc:	mov	r1, #1
   119e0:	ldr	r3, [r5, r3]
   119e4:	ldr	r3, [r3]
   119e8:	mov	r2, r0
   119ec:	mov	r0, r6
   119f0:	bl	110ac <__fprintf_chk@plt>
   119f4:	mov	r0, r4
   119f8:	bl	11034 <exit@plt>
   119fc:	ldr	r1, [pc, #336]	; 11b54 <strspn@plt+0xa18>
   11a00:	mov	r2, #5
   11a04:	add	r1, pc, r1
   11a08:	bl	10f44 <dcgettext@plt>
   11a0c:	ldr	r3, [pc, #316]	; 11b50 <strspn@plt+0xa14>
   11a10:	ldr	r6, [r5, r3]
   11a14:	ldr	r2, [r6]
   11a18:	mov	r1, r0
   11a1c:	mov	r0, #1
   11a20:	bl	11094 <__printf_chk@plt>
   11a24:	ldr	r1, [pc, #300]	; 11b58 <strspn@plt+0xa1c>
   11a28:	mov	r2, #5
   11a2c:	mov	r0, r4
   11a30:	add	r1, pc, r1
   11a34:	bl	10f44 <dcgettext@plt>
   11a38:	ldr	r3, [pc, #284]	; 11b5c <strspn@plt+0xa20>
   11a3c:	ldr	r5, [r5, r3]
   11a40:	ldr	r1, [r5]
   11a44:	bl	10ecc <fputs_unlocked@plt>
   11a48:	ldr	r1, [pc, #272]	; 11b60 <strspn@plt+0xa24>
   11a4c:	mov	r2, #5
   11a50:	mov	r0, r4
   11a54:	add	r1, pc, r1
   11a58:	bl	10f44 <dcgettext@plt>
   11a5c:	ldr	r1, [r5]
   11a60:	bl	10ecc <fputs_unlocked@plt>
   11a64:	ldr	r1, [pc, #248]	; 11b64 <strspn@plt+0xa28>
   11a68:	mov	r2, #5
   11a6c:	mov	r0, r4
   11a70:	add	r1, pc, r1
   11a74:	bl	10f44 <dcgettext@plt>
   11a78:	ldr	r1, [r5]
   11a7c:	bl	10ecc <fputs_unlocked@plt>
   11a80:	ldr	r1, [pc, #224]	; 11b68 <strspn@plt+0xa2c>
   11a84:	mov	r2, #5
   11a88:	mov	r0, r4
   11a8c:	add	r1, pc, r1
   11a90:	bl	10f44 <dcgettext@plt>
   11a94:	ldr	r2, [pc, #208]	; 11b6c <strspn@plt+0xa30>
   11a98:	ldr	r3, [pc, #208]	; 11b70 <strspn@plt+0xa34>
   11a9c:	add	r2, pc, r2
   11aa0:	add	r3, pc, r3
   11aa4:	mov	r1, r0
   11aa8:	mov	r0, #1
   11aac:	bl	11094 <__printf_chk@plt>
   11ab0:	mov	r0, #5
   11ab4:	mov	r1, r4
   11ab8:	bl	110dc <setlocale@plt>
   11abc:	cmp	r0, #0
   11ac0:	beq	11adc <strspn@plt+0x9a0>
   11ac4:	ldr	r1, [pc, #168]	; 11b74 <strspn@plt+0xa38>
   11ac8:	mov	r2, #3
   11acc:	add	r1, pc, r1
   11ad0:	bl	1110c <strncmp@plt>
   11ad4:	cmp	r0, #0
   11ad8:	bne	11b10 <strspn@plt+0x9d4>
   11adc:	ldr	r1, [pc, #148]	; 11b78 <strspn@plt+0xa3c>
   11ae0:	mov	r2, #5
   11ae4:	mov	r0, #0
   11ae8:	add	r1, pc, r1
   11aec:	bl	10f44 <dcgettext@plt>
   11af0:	mov	r5, r0
   11af4:	ldr	r0, [r6]
   11af8:	bl	11cc0 <close_stdout@@Base+0x118>
   11afc:	mov	r1, r5
   11b00:	mov	r2, r0
   11b04:	mov	r0, #1
   11b08:	bl	11094 <__printf_chk@plt>
   11b0c:	b	119f4 <strspn@plt+0x8b8>
   11b10:	ldr	r1, [pc, #100]	; 11b7c <strspn@plt+0xa40>
   11b14:	mov	r2, #5
   11b18:	mov	r0, r4
   11b1c:	add	r1, pc, r1
   11b20:	bl	10f44 <dcgettext@plt>
   11b24:	mov	r5, r0
   11b28:	ldr	r0, [r6]
   11b2c:	bl	11cc0 <close_stdout@@Base+0x118>
   11b30:	mov	r1, r5
   11b34:	mov	r2, r0
   11b38:	mov	r0, #1
   11b3c:	bl	11094 <__printf_chk@plt>
   11b40:	b	11adc <strspn@plt+0x9a0>
   11b44:	andeq	r4, r1, r8, asr #12
   11b48:	strdeq	r0, [r0], -r8
   11b4c:	andeq	r2, r0, r0, lsl #26
   11b50:	andeq	r0, r0, r4, lsl r1
   11b54:	strdeq	r2, [r0], -r0
   11b58:	andeq	r2, r0, r4, ror #25
   11b5c:	andeq	r0, r0, r8, lsl #2
   11b60:	andeq	r2, r0, r4, lsr #27
   11b64:			; <UNDEFINED> instruction: 0x00002db8
   11b68:	ldrdeq	r2, [r0], -r4
   11b6c:	ldrdeq	r2, [r0], -ip
   11b70:	andeq	r2, r0, r8, ror #27
   11b74:	andeq	r2, r0, r4, ror #27
   11b78:	andeq	r2, r0, r4, lsl lr
   11b7c:	muleq	r0, r8, sp
   11b80:	ldr	r3, [pc, #8]	; 11b90 <strspn@plt+0xa54>
   11b84:	add	r3, pc, r3
   11b88:	str	r0, [r3]
   11b8c:	bx	lr
   11b90:	andeq	r4, r1, r4, ror #11
   11b94:	ldr	r3, [pc, #8]	; 11ba4 <strspn@plt+0xa68>
   11b98:	add	r3, pc, r3
   11b9c:	strb	r0, [r3, #4]
   11ba0:	bx	lr
   11ba4:	ldrdeq	r4, [r1], -r0

00011ba8 <close_stdout@@Base>:
   11ba8:	push	{r4, r5, r6, r7, lr}
   11bac:	sub	sp, sp, #12
   11bb0:	ldr	r4, [pc, #228]	; 11c9c <close_stdout@@Base+0xf4>
   11bb4:	ldr	r3, [pc, #228]	; 11ca0 <close_stdout@@Base+0xf8>
   11bb8:	add	r4, pc, r4
   11bbc:	ldr	r3, [r4, r3]
   11bc0:	ldr	r0, [r3]
   11bc4:	bl	13dcc <close_stdout@@Base+0x2224>
   11bc8:	cmp	r0, #0
   11bcc:	beq	11bf4 <close_stdout@@Base+0x4c>
   11bd0:	ldr	r3, [pc, #204]	; 11ca4 <close_stdout@@Base+0xfc>
   11bd4:	add	r3, pc, r3
   11bd8:	ldrb	r3, [r3, #4]
   11bdc:	cmp	r3, #0
   11be0:	beq	11c14 <close_stdout@@Base+0x6c>
   11be4:	bl	11064 <__errno_location@plt>
   11be8:	ldr	r3, [r0]
   11bec:	cmp	r3, #32
   11bf0:	bne	11c14 <close_stdout@@Base+0x6c>
   11bf4:	ldr	r3, [pc, #172]	; 11ca8 <close_stdout@@Base+0x100>
   11bf8:	ldr	r3, [r4, r3]
   11bfc:	ldr	r0, [r3]
   11c00:	bl	13dcc <close_stdout@@Base+0x2224>
   11c04:	cmp	r0, #0
   11c08:	bne	11c68 <close_stdout@@Base+0xc0>
   11c0c:	add	sp, sp, #12
   11c10:	pop	{r4, r5, r6, r7, pc}
   11c14:	ldr	r1, [pc, #144]	; 11cac <close_stdout@@Base+0x104>
   11c18:	mov	r0, #0
   11c1c:	mov	r2, #5
   11c20:	add	r1, pc, r1
   11c24:	bl	10f44 <dcgettext@plt>
   11c28:	ldr	r3, [pc, #128]	; 11cb0 <close_stdout@@Base+0x108>
   11c2c:	ldr	r5, [pc, r3]
   11c30:	cmp	r5, #0
   11c34:	mov	r6, r0
   11c38:	beq	11c78 <close_stdout@@Base+0xd0>
   11c3c:	bl	11064 <__errno_location@plt>
   11c40:	ldr	r7, [r0]
   11c44:	mov	r0, r5
   11c48:	bl	13460 <close_stdout@@Base+0x18b8>
   11c4c:	ldr	r2, [pc, #96]	; 11cb4 <close_stdout@@Base+0x10c>
   11c50:	str	r6, [sp]
   11c54:	mov	r1, r7
   11c58:	add	r2, pc, r2
   11c5c:	mov	r3, r0
   11c60:	mov	r0, #0
   11c64:	bl	10fc8 <error@plt>
   11c68:	ldr	r3, [pc, #72]	; 11cb8 <close_stdout@@Base+0x110>
   11c6c:	ldr	r3, [r4, r3]
   11c70:	ldr	r0, [r3]
   11c74:	bl	10f14 <_exit@plt>
   11c78:	bl	11064 <__errno_location@plt>
   11c7c:	ldr	r2, [pc, #56]	; 11cbc <close_stdout@@Base+0x114>
   11c80:	add	r2, pc, r2
   11c84:	mov	r3, r0
   11c88:	mov	r0, r5
   11c8c:	ldr	r1, [r3]
   11c90:	mov	r3, r6
   11c94:	bl	10fc8 <error@plt>
   11c98:	b	11c68 <close_stdout@@Base+0xc0>
   11c9c:	andeq	r4, r1, r0, asr #8
   11ca0:	andeq	r0, r0, r8, lsl #2
   11ca4:	muleq	r1, r4, r5
   11ca8:	strdeq	r0, [r0], -r8
   11cac:	strdeq	r2, [r0], -r8
   11cb0:	andeq	r4, r1, ip, lsr r5
   11cb4:	andeq	r2, r0, ip, asr #29
   11cb8:	andeq	r0, r0, ip, lsl #2
   11cbc:	andeq	r2, r0, r8, lsr #29
   11cc0:	ldrb	r3, [r0]
   11cc4:	cmp	r3, #47	; 0x2f
   11cc8:	bne	11ce4 <close_stdout@@Base+0x13c>
   11ccc:	add	r2, r0, #1
   11cd0:	mov	r0, r2
   11cd4:	add	r2, r2, #1
   11cd8:	ldrb	r3, [r0]
   11cdc:	cmp	r3, #47	; 0x2f
   11ce0:	beq	11cd0 <close_stdout@@Base+0x128>
   11ce4:	cmp	r3, #0
   11ce8:	bxeq	lr
   11cec:	mov	r2, r0
   11cf0:	mov	r1, #0
   11cf4:	cmp	r3, #47	; 0x2f
   11cf8:	moveq	r1, #1
   11cfc:	beq	11d0c <close_stdout@@Base+0x164>
   11d00:	cmp	r1, #0
   11d04:	movne	r0, r2
   11d08:	movne	r1, #0
   11d0c:	ldrb	r3, [r2, #1]!
   11d10:	cmp	r3, #0
   11d14:	bne	11cf4 <close_stdout@@Base+0x14c>
   11d18:	bx	lr
   11d1c:	push	{r4, lr}
   11d20:	mov	r4, r0
   11d24:	bl	11040 <strlen@plt>
   11d28:	cmp	r0, #1
   11d2c:	popls	{r4, pc}
   11d30:	sub	r3, r0, #1
   11d34:	ldrb	r2, [r4, r3]
   11d38:	cmp	r2, #47	; 0x2f
   11d3c:	popne	{r4, pc}
   11d40:	mov	r0, r3
   11d44:	cmp	r0, #1
   11d48:	sub	r3, r3, #1
   11d4c:	beq	11d60 <close_stdout@@Base+0x1b8>
   11d50:	ldrb	r2, [r4, r3]
   11d54:	cmp	r2, #47	; 0x2f
   11d58:	popne	{r4, pc}
   11d5c:	b	11d40 <close_stdout@@Base+0x198>
   11d60:	pop	{r4, pc}
   11d64:	push	{r3, r4, r5, r6, r7, lr}
   11d68:	subs	r4, r0, #0
   11d6c:	ldr	r5, [pc, #172]	; 11e20 <close_stdout@@Base+0x278>
   11d70:	add	r5, pc, r5
   11d74:	beq	11dfc <close_stdout@@Base+0x254>
   11d78:	mov	r1, #47	; 0x2f
   11d7c:	bl	110e8 <strrchr@plt>
   11d80:	subs	r6, r0, #0
   11d84:	beq	11de0 <close_stdout@@Base+0x238>
   11d88:	add	r7, r6, #1
   11d8c:	rsb	r3, r4, r7
   11d90:	cmp	r3, #6
   11d94:	ble	11de0 <close_stdout@@Base+0x238>
   11d98:	ldr	r1, [pc, #132]	; 11e24 <close_stdout@@Base+0x27c>
   11d9c:	sub	r0, r6, #6
   11da0:	mov	r2, #7
   11da4:	add	r1, pc, r1
   11da8:	bl	1110c <strncmp@plt>
   11dac:	cmp	r0, #0
   11db0:	bne	11de0 <close_stdout@@Base+0x238>
   11db4:	ldr	r1, [pc, #108]	; 11e28 <close_stdout@@Base+0x280>
   11db8:	mov	r0, r7
   11dbc:	mov	r2, #3
   11dc0:	add	r1, pc, r1
   11dc4:	bl	1110c <strncmp@plt>
   11dc8:	cmp	r0, #0
   11dcc:	movne	r4, r7
   11dd0:	ldreq	r3, [pc, #84]	; 11e2c <close_stdout@@Base+0x284>
   11dd4:	addeq	r4, r6, #4
   11dd8:	ldreq	r3, [r5, r3]
   11ddc:	streq	r4, [r3]
   11de0:	ldr	r2, [pc, #72]	; 11e30 <close_stdout@@Base+0x288>
   11de4:	ldr	r3, [pc, #72]	; 11e34 <close_stdout@@Base+0x28c>
   11de8:	ldr	r2, [r5, r2]
   11dec:	str	r4, [r2]
   11df0:	ldr	r3, [r5, r3]
   11df4:	str	r4, [r3]
   11df8:	pop	{r3, r4, r5, r6, r7, pc}
   11dfc:	ldr	r3, [pc, #52]	; 11e38 <close_stdout@@Base+0x290>
   11e00:	mov	r1, #1
   11e04:	ldr	r0, [pc, #48]	; 11e3c <close_stdout@@Base+0x294>
   11e08:	mov	r2, #55	; 0x37
   11e0c:	ldr	r3, [r5, r3]
   11e10:	add	r0, pc, r0
   11e14:	ldr	r3, [r3]
   11e18:	bl	10f80 <fwrite@plt>
   11e1c:	bl	11118 <abort@plt>
   11e20:	andeq	r4, r1, r8, lsl #5
   11e24:	andeq	r2, r0, r0, asr #27
   11e28:	andeq	r2, r0, ip, lsr #27
   11e2c:	andeq	r0, r0, ip, lsl r1
   11e30:	andeq	r0, r0, r4, lsl r1
   11e34:	andeq	r0, r0, r0, lsl r1
   11e38:	strdeq	r0, [r0], -r8
   11e3c:	andeq	r2, r0, ip, lsl sp
   11e40:	push	{r3, lr}
   11e44:	mov	r3, r0
   11e48:	mov	r2, #0
   11e4c:	cmp	r1, #8
   11e50:	str	r2, [r3], #4
   11e54:	add	r3, r3, #4
   11e58:	str	r2, [r0, #4]
   11e5c:	str	r2, [r3], #4
   11e60:	str	r2, [r3], #4
   11e64:	str	r2, [r3], #4
   11e68:	str	r2, [r3], #4
   11e6c:	str	r2, [r3], #4
   11e70:	str	r2, [r3], #4
   11e74:	str	r2, [r3], #4
   11e78:	str	r2, [r3], #4
   11e7c:	str	r2, [r3], #4
   11e80:	str	r2, [r3]
   11e84:	beq	11e90 <close_stdout@@Base+0x2e8>
   11e88:	str	r1, [r0]
   11e8c:	pop	{r3, pc}
   11e90:	bl	11118 <abort@plt>
   11e94:	push	{r4, r5, r6, lr}
   11e98:	mov	r4, r0
   11e9c:	mov	r6, r1
   11ea0:	mov	r0, #0
   11ea4:	mov	r1, r4
   11ea8:	mov	r2, #5
   11eac:	bl	10f44 <dcgettext@plt>
   11eb0:	cmp	r0, r4
   11eb4:	mov	r5, r0
   11eb8:	beq	11ec0 <close_stdout@@Base+0x318>
   11ebc:	pop	{r4, r5, r6, pc}
   11ec0:	bl	13e4c <close_stdout@@Base+0x22a4>
   11ec4:	ldrb	r3, [r0]
   11ec8:	bic	r3, r3, #32
   11ecc:	cmp	r3, #85	; 0x55
   11ed0:	bne	11f44 <close_stdout@@Base+0x39c>
   11ed4:	ldrb	r3, [r0, #1]
   11ed8:	bic	r3, r3, #32
   11edc:	cmp	r3, #84	; 0x54
   11ee0:	bne	11f30 <close_stdout@@Base+0x388>
   11ee4:	ldrb	r3, [r0, #2]
   11ee8:	bic	r3, r3, #32
   11eec:	cmp	r3, #70	; 0x46
   11ef0:	bne	11f30 <close_stdout@@Base+0x388>
   11ef4:	ldrb	r3, [r0, #3]
   11ef8:	cmp	r3, #45	; 0x2d
   11efc:	bne	11f30 <close_stdout@@Base+0x388>
   11f00:	ldrb	r3, [r0, #4]
   11f04:	cmp	r3, #56	; 0x38
   11f08:	bne	11f30 <close_stdout@@Base+0x388>
   11f0c:	ldrb	r3, [r0, #5]
   11f10:	cmp	r3, #0
   11f14:	bne	11f30 <close_stdout@@Base+0x388>
   11f18:	ldrb	r3, [r5]
   11f1c:	cmp	r3, #96	; 0x60
   11f20:	beq	11fbc <close_stdout@@Base+0x414>
   11f24:	ldr	r0, [pc, #180]	; 11fe0 <close_stdout@@Base+0x438>
   11f28:	add	r0, pc, r0
   11f2c:	pop	{r4, r5, r6, pc}
   11f30:	cmp	r6, #7
   11f34:	beq	11fc8 <close_stdout@@Base+0x420>
   11f38:	ldr	r0, [pc, #164]	; 11fe4 <close_stdout@@Base+0x43c>
   11f3c:	add	r0, pc, r0
   11f40:	pop	{r4, r5, r6, pc}
   11f44:	cmp	r3, #71	; 0x47
   11f48:	bne	11f30 <close_stdout@@Base+0x388>
   11f4c:	ldrb	r3, [r0, #1]
   11f50:	bic	r3, r3, #32
   11f54:	cmp	r3, #66	; 0x42
   11f58:	bne	11f30 <close_stdout@@Base+0x388>
   11f5c:	ldrb	r3, [r0, #2]
   11f60:	cmp	r3, #49	; 0x31
   11f64:	bne	11f30 <close_stdout@@Base+0x388>
   11f68:	ldrb	r3, [r0, #3]
   11f6c:	cmp	r3, #56	; 0x38
   11f70:	bne	11f30 <close_stdout@@Base+0x388>
   11f74:	ldrb	r3, [r0, #4]
   11f78:	cmp	r3, #48	; 0x30
   11f7c:	bne	11f30 <close_stdout@@Base+0x388>
   11f80:	ldrb	r3, [r0, #5]
   11f84:	cmp	r3, #51	; 0x33
   11f88:	bne	11f30 <close_stdout@@Base+0x388>
   11f8c:	ldrb	r3, [r0, #6]
   11f90:	cmp	r3, #48	; 0x30
   11f94:	bne	11f30 <close_stdout@@Base+0x388>
   11f98:	ldrb	r3, [r0, #7]
   11f9c:	cmp	r3, #0
   11fa0:	bne	11f30 <close_stdout@@Base+0x388>
   11fa4:	ldrb	r3, [r5]
   11fa8:	cmp	r3, #96	; 0x60
   11fac:	beq	11fd4 <close_stdout@@Base+0x42c>
   11fb0:	ldr	r0, [pc, #48]	; 11fe8 <close_stdout@@Base+0x440>
   11fb4:	add	r0, pc, r0
   11fb8:	pop	{r4, r5, r6, pc}
   11fbc:	ldr	r0, [pc, #40]	; 11fec <close_stdout@@Base+0x444>
   11fc0:	add	r0, pc, r0
   11fc4:	pop	{r4, r5, r6, pc}
   11fc8:	ldr	r0, [pc, #32]	; 11ff0 <close_stdout@@Base+0x448>
   11fcc:	add	r0, pc, r0
   11fd0:	pop	{r4, r5, r6, pc}
   11fd4:	ldr	r0, [pc, #24]	; 11ff4 <close_stdout@@Base+0x44c>
   11fd8:	add	r0, pc, r0
   11fdc:	pop	{r4, r5, r6, pc}
   11fe0:	andeq	r2, r0, r8, ror #24
   11fe4:	andeq	r2, r0, ip, asr ip
   11fe8:	andeq	r2, r0, r0, ror #23
   11fec:	andeq	r2, r0, r4, ror #23
   11ff0:	ldrdeq	r2, [r0], -r0
   11ff4:	andeq	r2, r0, r8, asr #23
   11ff8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ffc:	sub	sp, sp, #124	; 0x7c
   12000:	ldr	ip, [pc, #3304]	; 12cf0 <close_stdout@@Base+0x1148>
   12004:	mov	sl, r1
   12008:	str	r0, [sp, #40]	; 0x28
   1200c:	mov	r8, r3
   12010:	ldr	r0, [pc, #3292]	; 12cf4 <close_stdout@@Base+0x114c>
   12014:	add	ip, pc, ip
   12018:	str	r2, [sp, #32]
   1201c:	ldr	r1, [sp, #164]	; 0xa4
   12020:	mov	r3, ip
   12024:	ldr	r0, [ip, r0]
   12028:	ldr	r2, [sp, #172]	; 0xac
   1202c:	ubfx	r1, r1, #1, #1
   12030:	str	r1, [sp, #36]	; 0x24
   12034:	str	r0, [sp, #56]	; 0x38
   12038:	ldr	r0, [sp, #168]	; 0xa8
   1203c:	ldr	r1, [sp, #176]	; 0xb0
   12040:	str	r2, [sp, #72]	; 0x48
   12044:	str	r0, [sp, #48]	; 0x30
   12048:	ldr	r0, [sp, #56]	; 0x38
   1204c:	str	r1, [sp, #68]	; 0x44
   12050:	ldr	r3, [r0]
   12054:	str	r3, [sp, #116]	; 0x74
   12058:	bl	10f98 <__ctype_get_mb_cur_max@plt>
   1205c:	ldr	r2, [sp, #160]	; 0xa0
   12060:	str	r0, [sp, #64]	; 0x40
   12064:	cmp	r2, #8
   12068:	addls	pc, pc, r2, lsl #2
   1206c:	b	12bcc <close_stdout@@Base+0x1024>
   12070:	b	12094 <close_stdout@@Base+0x4ec>
   12074:	b	128e4 <close_stdout@@Base+0xd3c>
   12078:	b	12914 <close_stdout@@Base+0xd6c>
   1207c:	b	127c4 <close_stdout@@Base+0xc1c>
   12080:	b	12804 <close_stdout@@Base+0xc5c>
   12084:	b	12830 <close_stdout@@Base+0xc88>
   12088:	b	12850 <close_stdout@@Base+0xca8>
   1208c:	b	12850 <close_stdout@@Base+0xca8>
   12090:	b	12850 <close_stdout@@Base+0xca8>
   12094:	mov	r2, #0
   12098:	str	r2, [sp, #36]	; 0x24
   1209c:	mov	r9, r2
   120a0:	str	r2, [sp, #24]
   120a4:	str	r2, [sp, #28]
   120a8:	str	r2, [sp, #52]	; 0x34
   120ac:	ldr	r0, [sp, #36]	; 0x24
   120b0:	mov	fp, #0
   120b4:	ldr	r1, [sp, #24]
   120b8:	eor	r2, r0, #1
   120bc:	eor	r3, r1, #1
   120c0:	and	r3, r2, r3
   120c4:	and	r2, r1, r0
   120c8:	str	r3, [sp, #44]	; 0x2c
   120cc:	str	r2, [sp, #76]	; 0x4c
   120d0:	cmn	r8, #1
   120d4:	beq	12454 <close_stdout@@Base+0x8ac>
   120d8:	subs	r3, fp, r8
   120dc:	movne	r3, #1
   120e0:	cmp	r3, #0
   120e4:	beq	1246c <close_stdout@@Base+0x8c4>
   120e8:	ldr	r3, [sp, #28]
   120ec:	ldr	r0, [sp, #24]
   120f0:	adds	r7, r3, #0
   120f4:	movne	r7, #1
   120f8:	ands	r6, r7, r0
   120fc:	bne	12958 <close_stdout@@Base+0xdb0>
   12100:	ldr	r1, [sp, #32]
   12104:	add	r5, r1, fp
   12108:	ldrb	r4, [r5]
   1210c:	cmp	r4, #126	; 0x7e
   12110:	addls	pc, pc, r4, lsl #2
   12114:	b	126d8 <close_stdout@@Base+0xb30>
   12118:	b	125e4 <close_stdout@@Base+0xa3c>
   1211c:	b	126d8 <close_stdout@@Base+0xb30>
   12120:	b	126d8 <close_stdout@@Base+0xb30>
   12124:	b	126d8 <close_stdout@@Base+0xb30>
   12128:	b	126d8 <close_stdout@@Base+0xb30>
   1212c:	b	126d8 <close_stdout@@Base+0xb30>
   12130:	b	126d8 <close_stdout@@Base+0xb30>
   12134:	b	125cc <close_stdout@@Base+0xa24>
   12138:	b	125b4 <close_stdout@@Base+0xa0c>
   1213c:	b	125dc <close_stdout@@Base+0xa34>
   12140:	b	125d4 <close_stdout@@Base+0xa2c>
   12144:	b	125c4 <close_stdout@@Base+0xa1c>
   12148:	b	125bc <close_stdout@@Base+0xa14>
   1214c:	b	12580 <close_stdout@@Base+0x9d8>
   12150:	b	126d8 <close_stdout@@Base+0xb30>
   12154:	b	126d8 <close_stdout@@Base+0xb30>
   12158:	b	126d8 <close_stdout@@Base+0xb30>
   1215c:	b	126d8 <close_stdout@@Base+0xb30>
   12160:	b	126d8 <close_stdout@@Base+0xb30>
   12164:	b	126d8 <close_stdout@@Base+0xb30>
   12168:	b	126d8 <close_stdout@@Base+0xb30>
   1216c:	b	126d8 <close_stdout@@Base+0xb30>
   12170:	b	126d8 <close_stdout@@Base+0xb30>
   12174:	b	126d8 <close_stdout@@Base+0xb30>
   12178:	b	126d8 <close_stdout@@Base+0xb30>
   1217c:	b	126d8 <close_stdout@@Base+0xb30>
   12180:	b	126d8 <close_stdout@@Base+0xb30>
   12184:	b	126d8 <close_stdout@@Base+0xb30>
   12188:	b	126d8 <close_stdout@@Base+0xb30>
   1218c:	b	126d8 <close_stdout@@Base+0xb30>
   12190:	b	126d8 <close_stdout@@Base+0xb30>
   12194:	b	126d8 <close_stdout@@Base+0xb30>
   12198:	b	1250c <close_stdout@@Base+0x964>
   1219c:	b	1250c <close_stdout@@Base+0x964>
   121a0:	b	1250c <close_stdout@@Base+0x964>
   121a4:	b	12504 <close_stdout@@Base+0x95c>
   121a8:	b	1250c <close_stdout@@Base+0x964>
   121ac:	b	123e0 <close_stdout@@Base+0x838>
   121b0:	b	1250c <close_stdout@@Base+0x964>
   121b4:	b	12680 <close_stdout@@Base+0xad8>
   121b8:	b	1250c <close_stdout@@Base+0x964>
   121bc:	b	1250c <close_stdout@@Base+0x964>
   121c0:	b	1250c <close_stdout@@Base+0x964>
   121c4:	b	123e0 <close_stdout@@Base+0x838>
   121c8:	b	123e0 <close_stdout@@Base+0x838>
   121cc:	b	123e0 <close_stdout@@Base+0x838>
   121d0:	b	123e0 <close_stdout@@Base+0x838>
   121d4:	b	123e0 <close_stdout@@Base+0x838>
   121d8:	b	123e0 <close_stdout@@Base+0x838>
   121dc:	b	123e0 <close_stdout@@Base+0x838>
   121e0:	b	123e0 <close_stdout@@Base+0x838>
   121e4:	b	123e0 <close_stdout@@Base+0x838>
   121e8:	b	123e0 <close_stdout@@Base+0x838>
   121ec:	b	123e0 <close_stdout@@Base+0x838>
   121f0:	b	123e0 <close_stdout@@Base+0x838>
   121f4:	b	123e0 <close_stdout@@Base+0x838>
   121f8:	b	123e0 <close_stdout@@Base+0x838>
   121fc:	b	123e0 <close_stdout@@Base+0x838>
   12200:	b	123e0 <close_stdout@@Base+0x838>
   12204:	b	1250c <close_stdout@@Base+0x964>
   12208:	b	1250c <close_stdout@@Base+0x964>
   1220c:	b	1250c <close_stdout@@Base+0x964>
   12210:	b	1250c <close_stdout@@Base+0x964>
   12214:	b	12314 <close_stdout@@Base+0x76c>
   12218:	b	126d8 <close_stdout@@Base+0xb30>
   1221c:	b	123e0 <close_stdout@@Base+0x838>
   12220:	b	123e0 <close_stdout@@Base+0x838>
   12224:	b	123e0 <close_stdout@@Base+0x838>
   12228:	b	123e0 <close_stdout@@Base+0x838>
   1222c:	b	123e0 <close_stdout@@Base+0x838>
   12230:	b	123e0 <close_stdout@@Base+0x838>
   12234:	b	123e0 <close_stdout@@Base+0x838>
   12238:	b	123e0 <close_stdout@@Base+0x838>
   1223c:	b	123e0 <close_stdout@@Base+0x838>
   12240:	b	123e0 <close_stdout@@Base+0x838>
   12244:	b	123e0 <close_stdout@@Base+0x838>
   12248:	b	123e0 <close_stdout@@Base+0x838>
   1224c:	b	123e0 <close_stdout@@Base+0x838>
   12250:	b	123e0 <close_stdout@@Base+0x838>
   12254:	b	123e0 <close_stdout@@Base+0x838>
   12258:	b	123e0 <close_stdout@@Base+0x838>
   1225c:	b	123e0 <close_stdout@@Base+0x838>
   12260:	b	123e0 <close_stdout@@Base+0x838>
   12264:	b	123e0 <close_stdout@@Base+0x838>
   12268:	b	123e0 <close_stdout@@Base+0x838>
   1226c:	b	123e0 <close_stdout@@Base+0x838>
   12270:	b	123e0 <close_stdout@@Base+0x838>
   12274:	b	123e0 <close_stdout@@Base+0x838>
   12278:	b	123e0 <close_stdout@@Base+0x838>
   1227c:	b	123e0 <close_stdout@@Base+0x838>
   12280:	b	123e0 <close_stdout@@Base+0x838>
   12284:	b	1250c <close_stdout@@Base+0x964>
   12288:	b	12664 <close_stdout@@Base+0xabc>
   1228c:	b	123e0 <close_stdout@@Base+0x838>
   12290:	b	1250c <close_stdout@@Base+0x964>
   12294:	b	123e0 <close_stdout@@Base+0x838>
   12298:	b	1250c <close_stdout@@Base+0x964>
   1229c:	b	123e0 <close_stdout@@Base+0x838>
   122a0:	b	123e0 <close_stdout@@Base+0x838>
   122a4:	b	123e0 <close_stdout@@Base+0x838>
   122a8:	b	123e0 <close_stdout@@Base+0x838>
   122ac:	b	123e0 <close_stdout@@Base+0x838>
   122b0:	b	123e0 <close_stdout@@Base+0x838>
   122b4:	b	123e0 <close_stdout@@Base+0x838>
   122b8:	b	123e0 <close_stdout@@Base+0x838>
   122bc:	b	123e0 <close_stdout@@Base+0x838>
   122c0:	b	123e0 <close_stdout@@Base+0x838>
   122c4:	b	123e0 <close_stdout@@Base+0x838>
   122c8:	b	123e0 <close_stdout@@Base+0x838>
   122cc:	b	123e0 <close_stdout@@Base+0x838>
   122d0:	b	123e0 <close_stdout@@Base+0x838>
   122d4:	b	123e0 <close_stdout@@Base+0x838>
   122d8:	b	123e0 <close_stdout@@Base+0x838>
   122dc:	b	123e0 <close_stdout@@Base+0x838>
   122e0:	b	123e0 <close_stdout@@Base+0x838>
   122e4:	b	123e0 <close_stdout@@Base+0x838>
   122e8:	b	123e0 <close_stdout@@Base+0x838>
   122ec:	b	123e0 <close_stdout@@Base+0x838>
   122f0:	b	123e0 <close_stdout@@Base+0x838>
   122f4:	b	123e0 <close_stdout@@Base+0x838>
   122f8:	b	123e0 <close_stdout@@Base+0x838>
   122fc:	b	123e0 <close_stdout@@Base+0x838>
   12300:	b	123e0 <close_stdout@@Base+0x838>
   12304:	b	124ec <close_stdout@@Base+0x944>
   12308:	b	1250c <close_stdout@@Base+0x964>
   1230c:	b	124ec <close_stdout@@Base+0x944>
   12310:	b	12504 <close_stdout@@Base+0x95c>
   12314:	ldr	r3, [sp, #160]	; 0xa0
   12318:	cmp	r3, #2
   1231c:	beq	12ba8 <close_stdout@@Base+0x1000>
   12320:	cmp	r3, #3
   12324:	bne	123e0 <close_stdout@@Base+0x838>
   12328:	ldr	r1, [sp, #164]	; 0xa4
   1232c:	tst	r1, #4
   12330:	beq	123e0 <close_stdout@@Base+0x838>
   12334:	add	r3, fp, #2
   12338:	cmp	r8, r3
   1233c:	bls	123e0 <close_stdout@@Base+0x838>
   12340:	ldrb	r2, [r5, #1]
   12344:	mov	r1, #1
   12348:	cmp	r2, #63	; 0x3f
   1234c:	bne	123e0 <close_stdout@@Base+0x838>
   12350:	ldr	r0, [sp, #32]
   12354:	ldrb	ip, [r0, r3]
   12358:	sub	r0, ip, #33	; 0x21
   1235c:	uxtb	r0, r0
   12360:	cmp	r0, #29
   12364:	bhi	123e0 <close_stdout@@Base+0x838>
   12368:	lsl	r1, r1, r0
   1236c:	movw	r0, #20929	; 0x51c1
   12370:	movt	r0, #14336	; 0x3800
   12374:	and	r0, r1, r0
   12378:	cmp	r0, #0
   1237c:	beq	123e0 <close_stdout@@Base+0x838>
   12380:	ldr	r1, [sp, #36]	; 0x24
   12384:	cmp	r1, #0
   12388:	bne	12528 <close_stdout@@Base+0x980>
   1238c:	cmp	r9, sl
   12390:	mov	r4, ip
   12394:	mov	fp, r3
   12398:	ldrcc	r0, [sp, #40]	; 0x28
   1239c:	strbcc	r2, [r0, r9]
   123a0:	add	r2, r9, #1
   123a4:	cmp	sl, r2
   123a8:	ldrhi	r0, [sp, #40]	; 0x28
   123ac:	movhi	r1, #34	; 0x22
   123b0:	strbhi	r1, [r0, r2]
   123b4:	add	r2, r9, #2
   123b8:	cmp	sl, r2
   123bc:	ldrhi	r0, [sp, #40]	; 0x28
   123c0:	movhi	r1, #34	; 0x22
   123c4:	strbhi	r1, [r0, r2]
   123c8:	add	r2, r9, #3
   123cc:	cmp	sl, r2
   123d0:	add	r9, r9, #4
   123d4:	ldrhi	r0, [sp, #40]	; 0x28
   123d8:	movhi	r1, #63	; 0x3f
   123dc:	strbhi	r1, [r0, r2]
   123e0:	ldr	r0, [sp, #44]	; 0x2c
   123e4:	cmp	r0, #0
   123e8:	bne	12410 <close_stdout@@Base+0x868>
   123ec:	ldr	r1, [sp, #48]	; 0x30
   123f0:	cmp	r1, #0
   123f4:	beq	12410 <close_stdout@@Base+0x868>
   123f8:	ubfx	r2, r4, #5, #8
   123fc:	and	r3, r4, #31
   12400:	ldr	r2, [r1, r2, lsl #2]
   12404:	lsr	r3, r2, r3
   12408:	tst	r3, #1
   1240c:	bne	12418 <close_stdout@@Base+0x870>
   12410:	cmp	r6, #0
   12414:	beq	12438 <close_stdout@@Base+0x890>
   12418:	ldr	r2, [sp, #36]	; 0x24
   1241c:	cmp	r2, #0
   12420:	bne	12528 <close_stdout@@Base+0x980>
   12424:	cmp	r9, sl
   12428:	ldrcc	r0, [sp, #40]	; 0x28
   1242c:	movcc	r3, #92	; 0x5c
   12430:	strbcc	r3, [r0, r9]
   12434:	add	r9, r9, #1
   12438:	add	fp, fp, #1
   1243c:	cmp	r9, sl
   12440:	ldrcc	r1, [sp, #40]	; 0x28
   12444:	strbcc	r4, [r1, r9]
   12448:	cmn	r8, #1
   1244c:	add	r9, r9, #1
   12450:	bne	120d8 <close_stdout@@Base+0x530>
   12454:	ldr	r2, [sp, #32]
   12458:	ldrb	r3, [r2, fp]
   1245c:	adds	r3, r3, #0
   12460:	movne	r3, #1
   12464:	cmp	r3, #0
   12468:	bne	120e8 <close_stdout@@Base+0x540>
   1246c:	ldr	r3, [sp, #160]	; 0xa0
   12470:	cmp	r9, #0
   12474:	cmpeq	r3, #2
   12478:	bne	12488 <close_stdout@@Base+0x8e0>
   1247c:	ldr	r0, [sp, #36]	; 0x24
   12480:	cmp	r0, #0
   12484:	bne	12528 <close_stdout@@Base+0x980>
   12488:	ldr	r1, [sp, #36]	; 0x24
   1248c:	ldr	r2, [sp, #52]	; 0x34
   12490:	eor	r3, r1, #1
   12494:	cmp	r2, #0
   12498:	moveq	r3, #0
   1249c:	andne	r3, r3, #1
   124a0:	cmp	r3, #0
   124a4:	beq	124d0 <close_stdout@@Base+0x928>
   124a8:	ldrb	r3, [r2]
   124ac:	cmp	r3, #0
   124b0:	beq	124d0 <close_stdout@@Base+0x928>
   124b4:	ldr	r1, [sp, #40]	; 0x28
   124b8:	cmp	sl, r9
   124bc:	strbhi	r3, [r1, r9]
   124c0:	ldrb	r3, [r2, #1]!
   124c4:	add	r9, r9, #1
   124c8:	cmp	r3, #0
   124cc:	bne	124b8 <close_stdout@@Base+0x910>
   124d0:	cmp	r9, sl
   124d4:	movcs	r0, r9
   124d8:	ldrcc	r1, [sp, #40]	; 0x28
   124dc:	movcc	r3, #0
   124e0:	movcc	r0, r9
   124e4:	strbcc	r3, [r1, r9]
   124e8:	b	12564 <close_stdout@@Base+0x9bc>
   124ec:	cmn	r8, #1
   124f0:	beq	12bb8 <close_stdout@@Base+0x1010>
   124f4:	subs	r3, r8, #1
   124f8:	movne	r3, #1
   124fc:	cmp	r3, #0
   12500:	bne	123e0 <close_stdout@@Base+0x838>
   12504:	cmp	fp, #0
   12508:	bne	123e0 <close_stdout@@Base+0x838>
   1250c:	ldr	r3, [sp, #36]	; 0x24
   12510:	ldr	r0, [sp, #160]	; 0xa0
   12514:	cmp	r0, #2
   12518:	movne	r3, #0
   1251c:	andeq	r3, r3, #1
   12520:	cmp	r3, #0
   12524:	beq	123e0 <close_stdout@@Base+0x838>
   12528:	ldr	r2, [sp, #164]	; 0xa4
   1252c:	mov	ip, #0
   12530:	ldr	r0, [sp, #160]	; 0xa0
   12534:	bic	r3, r2, #2
   12538:	ldr	r1, [sp, #72]	; 0x48
   1253c:	ldr	r2, [sp, #68]	; 0x44
   12540:	stm	sp, {r0, r3}
   12544:	mov	r3, r8
   12548:	str	r1, [sp, #12]
   1254c:	mov	r1, sl
   12550:	str	r2, [sp, #16]
   12554:	ldr	r0, [sp, #40]	; 0x28
   12558:	ldr	r2, [sp, #32]
   1255c:	str	ip, [sp, #8]
   12560:	bl	11ff8 <close_stdout@@Base+0x450>
   12564:	ldr	r1, [sp, #56]	; 0x38
   12568:	ldr	r2, [sp, #116]	; 0x74
   1256c:	ldr	r3, [r1]
   12570:	cmp	r2, r3
   12574:	bne	12ca8 <close_stdout@@Base+0x1100>
   12578:	add	sp, sp, #124	; 0x7c
   1257c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12580:	mov	r3, #114	; 0x72
   12584:	ldr	r2, [sp, #36]	; 0x24
   12588:	ldr	r0, [sp, #160]	; 0xa0
   1258c:	cmp	r0, #2
   12590:	movne	r2, #0
   12594:	andeq	r2, r2, #1
   12598:	cmp	r2, #0
   1259c:	bne	12528 <close_stdout@@Base+0x980>
   125a0:	ldr	r1, [sp, #24]
   125a4:	cmp	r1, #0
   125a8:	beq	123e0 <close_stdout@@Base+0x838>
   125ac:	mov	r4, r3
   125b0:	b	12418 <close_stdout@@Base+0x870>
   125b4:	mov	r3, #98	; 0x62
   125b8:	b	125a0 <close_stdout@@Base+0x9f8>
   125bc:	mov	r3, #102	; 0x66
   125c0:	b	125a0 <close_stdout@@Base+0x9f8>
   125c4:	mov	r3, #118	; 0x76
   125c8:	b	125a0 <close_stdout@@Base+0x9f8>
   125cc:	mov	r3, #97	; 0x61
   125d0:	b	125a0 <close_stdout@@Base+0x9f8>
   125d4:	mov	r3, #110	; 0x6e
   125d8:	b	12584 <close_stdout@@Base+0x9dc>
   125dc:	mov	r3, #116	; 0x74
   125e0:	b	12584 <close_stdout@@Base+0x9dc>
   125e4:	ldr	r2, [sp, #24]
   125e8:	cmp	r2, #0
   125ec:	beq	12b94 <close_stdout@@Base+0xfec>
   125f0:	ldr	r3, [sp, #36]	; 0x24
   125f4:	cmp	r3, #0
   125f8:	bne	12528 <close_stdout@@Base+0x980>
   125fc:	cmp	r9, sl
   12600:	add	r2, r9, #1
   12604:	ldrcc	r0, [sp, #40]	; 0x28
   12608:	movcc	r3, #92	; 0x5c
   1260c:	strbcc	r3, [r0, r9]
   12610:	add	r3, fp, #1
   12614:	cmp	r8, r3
   12618:	bls	12658 <close_stdout@@Base+0xab0>
   1261c:	ldr	r1, [sp, #32]
   12620:	ldrb	r3, [r1, r3]
   12624:	sub	r3, r3, #48	; 0x30
   12628:	cmp	r3, #9
   1262c:	bhi	12658 <close_stdout@@Base+0xab0>
   12630:	cmp	sl, r2
   12634:	ldrhi	r0, [sp, #40]	; 0x28
   12638:	movhi	r3, #48	; 0x30
   1263c:	strbhi	r3, [r0, r2]
   12640:	add	r3, r9, #2
   12644:	cmp	sl, r3
   12648:	ldrhi	r1, [sp, #40]	; 0x28
   1264c:	movhi	r2, #48	; 0x30
   12650:	strbhi	r2, [r1, r3]
   12654:	add	r2, r9, #3
   12658:	mov	r9, r2
   1265c:	mov	r4, #48	; 0x30
   12660:	b	123ec <close_stdout@@Base+0x844>
   12664:	ldr	r1, [sp, #76]	; 0x4c
   12668:	cmp	r1, #0
   1266c:	beq	12678 <close_stdout@@Base+0xad0>
   12670:	cmp	r7, #0
   12674:	bne	12438 <close_stdout@@Base+0x890>
   12678:	mov	r3, r4
   1267c:	b	12584 <close_stdout@@Base+0x9dc>
   12680:	ldr	r1, [sp, #160]	; 0xa0
   12684:	cmp	r1, #2
   12688:	bne	123e0 <close_stdout@@Base+0x838>
   1268c:	ldr	r2, [sp, #36]	; 0x24
   12690:	cmp	r2, #0
   12694:	bne	12528 <close_stdout@@Base+0x980>
   12698:	cmp	r9, sl
   1269c:	ldrcc	r0, [sp, #40]	; 0x28
   126a0:	movcc	r3, #39	; 0x27
   126a4:	strbcc	r3, [r0, r9]
   126a8:	add	r3, r9, #1
   126ac:	cmp	sl, r3
   126b0:	ldrhi	r1, [sp, #40]	; 0x28
   126b4:	movhi	r2, #92	; 0x5c
   126b8:	strbhi	r2, [r1, r3]
   126bc:	add	r3, r9, #2
   126c0:	cmp	sl, r3
   126c4:	add	r9, r9, #3
   126c8:	ldrhi	r0, [sp, #40]	; 0x28
   126cc:	movhi	r2, #39	; 0x27
   126d0:	strbhi	r2, [r0, r3]
   126d4:	b	123e0 <close_stdout@@Base+0x838>
   126d8:	ldr	r1, [sp, #64]	; 0x40
   126dc:	cmp	r1, #1
   126e0:	bne	129d8 <close_stdout@@Base+0xe30>
   126e4:	bl	11028 <__ctype_b_loc@plt>
   126e8:	ldr	r2, [sp, #64]	; 0x40
   126ec:	sxth	r3, r4
   126f0:	str	r2, [sp, #60]	; 0x3c
   126f4:	lsl	r3, r3, #1
   126f8:	ldr	r2, [r0]
   126fc:	ldrh	r2, [r2, r3]
   12700:	eor	r2, r2, #16384	; 0x4000
   12704:	ubfx	r2, r2, #14, #1
   12708:	ldr	r1, [sp, #24]
   1270c:	ands	r2, r2, r1
   12710:	beq	123e0 <close_stdout@@Base+0x838>
   12714:	ldr	r3, [sp, #60]	; 0x3c
   12718:	mov	r0, #92	; 0x5c
   1271c:	ldr	r7, [sp, #36]	; 0x24
   12720:	add	r1, r3, fp
   12724:	str	r8, [sp, #60]	; 0x3c
   12728:	ldr	r3, [sp, #40]	; 0x28
   1272c:	b	12790 <close_stdout@@Base+0xbe8>
   12730:	cmp	r7, #0
   12734:	bne	12bd0 <close_stdout@@Base+0x1028>
   12738:	add	ip, r9, #1
   1273c:	cmp	r9, sl
   12740:	strbcc	r0, [r3, r9]
   12744:	cmp	sl, ip
   12748:	lsrhi	r8, r4, #6
   1274c:	addhi	r8, r8, #48	; 0x30
   12750:	strbhi	r8, [r3, ip]
   12754:	add	ip, r9, #2
   12758:	add	r9, r9, #3
   1275c:	cmp	sl, ip
   12760:	ubfxhi	r8, r4, #3, #3
   12764:	and	r4, r4, #7
   12768:	add	r4, r4, #48	; 0x30
   1276c:	addhi	r8, r8, #48	; 0x30
   12770:	strbhi	r8, [r3, ip]
   12774:	add	fp, fp, #1
   12778:	cmp	r1, fp
   1277c:	bls	127bc <close_stdout@@Base+0xc14>
   12780:	cmp	r9, sl
   12784:	strbcc	r4, [r3, r9]
   12788:	ldrb	r4, [r5, #1]!
   1278c:	add	r9, r9, #1
   12790:	cmp	r2, #0
   12794:	bne	12730 <close_stdout@@Base+0xb88>
   12798:	cmp	r6, #0
   1279c:	beq	12774 <close_stdout@@Base+0xbcc>
   127a0:	add	fp, fp, #1
   127a4:	cmp	r9, sl
   127a8:	strbcc	r0, [r3, r9]
   127ac:	cmp	r1, fp
   127b0:	add	r9, r9, #1
   127b4:	mov	r6, #0
   127b8:	bhi	12780 <close_stdout@@Base+0xbd8>
   127bc:	ldr	r8, [sp, #60]	; 0x3c
   127c0:	b	1243c <close_stdout@@Base+0x894>
   127c4:	ldr	r3, [sp, #36]	; 0x24
   127c8:	cmp	r3, #0
   127cc:	bne	12cd0 <close_stdout@@Base+0x1128>
   127d0:	cmp	sl, #0
   127d4:	beq	12be8 <close_stdout@@Base+0x1040>
   127d8:	ldr	r1, [sp, #40]	; 0x28
   127dc:	mov	r0, #1
   127e0:	ldr	r2, [pc, #1296]	; 12cf8 <close_stdout@@Base+0x1150>
   127e4:	mov	r3, #34	; 0x22
   127e8:	str	r0, [sp, #24]
   127ec:	mov	r9, r0
   127f0:	add	r2, pc, r2
   127f4:	str	r0, [sp, #28]
   127f8:	strb	r3, [r1]
   127fc:	str	r2, [sp, #52]	; 0x34
   12800:	b	120ac <close_stdout@@Base+0x504>
   12804:	ldr	r3, [pc, #1264]	; 12cfc <close_stdout@@Base+0x1154>
   12808:	mov	r2, #1
   1280c:	mov	r0, #3
   12810:	str	r2, [sp, #36]	; 0x24
   12814:	add	r3, pc, r3
   12818:	str	r2, [sp, #24]
   1281c:	str	r3, [sp, #52]	; 0x34
   12820:	mov	r9, #0
   12824:	str	r2, [sp, #28]
   12828:	str	r0, [sp, #160]	; 0xa0
   1282c:	b	120ac <close_stdout@@Base+0x504>
   12830:	mov	r0, #0
   12834:	mov	r1, #1
   12838:	str	r0, [sp, #36]	; 0x24
   1283c:	mov	r9, r0
   12840:	str	r1, [sp, #24]
   12844:	str	r0, [sp, #28]
   12848:	str	r0, [sp, #52]	; 0x34
   1284c:	b	120ac <close_stdout@@Base+0x504>
   12850:	ldr	r3, [sp, #160]	; 0xa0
   12854:	cmp	r3, #8
   12858:	beq	12884 <close_stdout@@Base+0xcdc>
   1285c:	ldr	r0, [pc, #1180]	; 12d00 <close_stdout@@Base+0x1158>
   12860:	mov	r1, r3
   12864:	add	r0, pc, r0
   12868:	bl	11e94 <close_stdout@@Base+0x2ec>
   1286c:	ldr	r1, [sp, #160]	; 0xa0
   12870:	str	r0, [sp, #72]	; 0x48
   12874:	ldr	r0, [pc, #1160]	; 12d04 <close_stdout@@Base+0x115c>
   12878:	add	r0, pc, r0
   1287c:	bl	11e94 <close_stdout@@Base+0x2ec>
   12880:	str	r0, [sp, #68]	; 0x44
   12884:	ldr	r0, [sp, #36]	; 0x24
   12888:	cmp	r0, #0
   1288c:	movne	r9, #0
   12890:	bne	128c8 <close_stdout@@Base+0xd20>
   12894:	ldr	r1, [sp, #72]	; 0x48
   12898:	ldrb	r3, [r1]
   1289c:	cmp	r3, #0
   128a0:	beq	12ca0 <close_stdout@@Base+0x10f8>
   128a4:	mov	r2, r1
   128a8:	ldr	r1, [sp, #40]	; 0x28
   128ac:	mov	r9, r0
   128b0:	cmp	r9, sl
   128b4:	strbcc	r3, [r1, r9]
   128b8:	ldrb	r3, [r2, #1]!
   128bc:	add	r9, r9, #1
   128c0:	cmp	r3, #0
   128c4:	bne	128b0 <close_stdout@@Base+0xd08>
   128c8:	ldr	r0, [sp, #68]	; 0x44
   128cc:	str	r0, [sp, #52]	; 0x34
   128d0:	bl	11040 <strlen@plt>
   128d4:	mov	r2, #1
   128d8:	str	r2, [sp, #24]
   128dc:	str	r0, [sp, #28]
   128e0:	b	120ac <close_stdout@@Base+0x504>
   128e4:	ldr	r3, [pc, #1052]	; 12d08 <close_stdout@@Base+0x1160>
   128e8:	mov	r2, #0
   128ec:	mov	r1, #1
   128f0:	mov	r0, #2
   128f4:	add	r3, pc, r3
   128f8:	str	r1, [sp, #36]	; 0x24
   128fc:	str	r2, [sp, #24]
   12900:	mov	r9, r2
   12904:	str	r1, [sp, #28]
   12908:	str	r3, [sp, #52]	; 0x34
   1290c:	str	r0, [sp, #160]	; 0xa0
   12910:	b	120ac <close_stdout@@Base+0x504>
   12914:	ldr	r3, [sp, #36]	; 0x24
   12918:	cmp	r3, #0
   1291c:	bne	12cac <close_stdout@@Base+0x1104>
   12920:	cmp	sl, #0
   12924:	beq	12c08 <close_stdout@@Base+0x1060>
   12928:	ldr	r1, [sp, #40]	; 0x28
   1292c:	mov	r3, #39	; 0x27
   12930:	ldr	r2, [sp, #36]	; 0x24
   12934:	mov	r0, #1
   12938:	mov	r9, r0
   1293c:	str	r0, [sp, #28]
   12940:	strb	r3, [r1]
   12944:	ldr	r3, [pc, #960]	; 12d0c <close_stdout@@Base+0x1164>
   12948:	str	r2, [sp, #24]
   1294c:	add	r3, pc, r3
   12950:	str	r3, [sp, #52]	; 0x34
   12954:	b	120ac <close_stdout@@Base+0x504>
   12958:	ldr	r2, [sp, #28]
   1295c:	cmp	r2, #1
   12960:	add	r4, fp, r2
   12964:	movls	r3, #0
   12968:	movhi	r3, #1
   1296c:	cmn	r8, #1
   12970:	movne	r3, #0
   12974:	cmp	r3, #0
   12978:	beq	12988 <close_stdout@@Base+0xde0>
   1297c:	ldr	r0, [sp, #32]
   12980:	bl	11040 <strlen@plt>
   12984:	mov	r8, r0
   12988:	cmp	r8, r4
   1298c:	ldrcc	r3, [sp, #32]
   12990:	movcc	r6, #0
   12994:	addcc	r5, r3, fp
   12998:	bcc	12108 <close_stdout@@Base+0x560>
   1299c:	ldr	r0, [sp, #32]
   129a0:	ldr	r1, [sp, #52]	; 0x34
   129a4:	add	r5, r0, fp
   129a8:	ldr	r2, [sp, #28]
   129ac:	mov	r0, r5
   129b0:	bl	10f38 <memcmp@plt>
   129b4:	cmp	r0, #0
   129b8:	bne	129d0 <close_stdout@@Base+0xe28>
   129bc:	ldr	r1, [sp, #36]	; 0x24
   129c0:	cmp	r1, #0
   129c4:	bne	12528 <close_stdout@@Base+0x980>
   129c8:	mov	r6, #1
   129cc:	b	12108 <close_stdout@@Base+0x560>
   129d0:	mov	r6, #0
   129d4:	b	12108 <close_stdout@@Base+0x560>
   129d8:	add	r7, sp, #108	; 0x6c
   129dc:	cmn	r8, #1
   129e0:	mov	r3, #0
   129e4:	str	r3, [sp, #108]	; 0x6c
   129e8:	str	r3, [r7, #4]
   129ec:	beq	12bd8 <close_stdout@@Base+0x1030>
   129f0:	mov	r1, #0
   129f4:	ldr	r0, [sp, #32]
   129f8:	mov	ip, #1
   129fc:	str	r9, [sp, #88]	; 0x58
   12a00:	str	r6, [sp, #96]	; 0x60
   12a04:	mov	r9, r1
   12a08:	str	r5, [sp, #100]	; 0x64
   12a0c:	mov	r6, ip
   12a10:	mov	r5, r7
   12a14:	add	r3, sp, #104	; 0x68
   12a18:	sub	r0, r0, #1
   12a1c:	str	r3, [sp, #80]	; 0x50
   12a20:	str	r0, [sp, #84]	; 0x54
   12a24:	str	r1, [sp, #60]	; 0x3c
   12a28:	str	r4, [sp, #92]	; 0x5c
   12a2c:	ldr	r2, [sp, #32]
   12a30:	add	r7, r9, fp
   12a34:	add	r0, sp, #104	; 0x68
   12a38:	mov	r3, r5
   12a3c:	add	r4, r2, r7
   12a40:	rsb	r2, r7, r8
   12a44:	mov	r1, r4
   12a48:	bl	10fbc <mbrtowc@plt>
   12a4c:	subs	r2, r0, #0
   12a50:	beq	12b5c <close_stdout@@Base+0xfb4>
   12a54:	cmn	r2, #1
   12a58:	beq	12c84 <close_stdout@@Base+0x10dc>
   12a5c:	cmn	r2, #2
   12a60:	beq	12c28 <close_stdout@@Base+0x1080>
   12a64:	ldr	r3, [sp, #36]	; 0x24
   12a68:	ldr	r0, [sp, #160]	; 0xa0
   12a6c:	cmp	r0, #2
   12a70:	movne	r3, #0
   12a74:	andeq	r3, r3, #1
   12a78:	cmp	r3, #0
   12a7c:	beq	12b38 <close_stdout@@Base+0xf90>
   12a80:	cmp	r2, #1
   12a84:	beq	12b38 <close_stdout@@Base+0xf90>
   12a88:	ldr	r1, [sp, #84]	; 0x54
   12a8c:	add	r3, r1, r2
   12a90:	add	r7, r3, r7
   12a94:	ldrb	r3, [r4, #1]!
   12a98:	sub	r3, r3, #91	; 0x5b
   12a9c:	cmp	r3, #33	; 0x21
   12aa0:	addls	pc, pc, r3, lsl #2
   12aa4:	b	12b30 <close_stdout@@Base+0xf88>
   12aa8:	b	12528 <close_stdout@@Base+0x980>
   12aac:	b	12528 <close_stdout@@Base+0x980>
   12ab0:	b	12b30 <close_stdout@@Base+0xf88>
   12ab4:	b	12528 <close_stdout@@Base+0x980>
   12ab8:	b	12b30 <close_stdout@@Base+0xf88>
   12abc:	b	12528 <close_stdout@@Base+0x980>
   12ac0:	b	12b30 <close_stdout@@Base+0xf88>
   12ac4:	b	12b30 <close_stdout@@Base+0xf88>
   12ac8:	b	12b30 <close_stdout@@Base+0xf88>
   12acc:	b	12b30 <close_stdout@@Base+0xf88>
   12ad0:	b	12b30 <close_stdout@@Base+0xf88>
   12ad4:	b	12b30 <close_stdout@@Base+0xf88>
   12ad8:	b	12b30 <close_stdout@@Base+0xf88>
   12adc:	b	12b30 <close_stdout@@Base+0xf88>
   12ae0:	b	12b30 <close_stdout@@Base+0xf88>
   12ae4:	b	12b30 <close_stdout@@Base+0xf88>
   12ae8:	b	12b30 <close_stdout@@Base+0xf88>
   12aec:	b	12b30 <close_stdout@@Base+0xf88>
   12af0:	b	12b30 <close_stdout@@Base+0xf88>
   12af4:	b	12b30 <close_stdout@@Base+0xf88>
   12af8:	b	12b30 <close_stdout@@Base+0xf88>
   12afc:	b	12b30 <close_stdout@@Base+0xf88>
   12b00:	b	12b30 <close_stdout@@Base+0xf88>
   12b04:	b	12b30 <close_stdout@@Base+0xf88>
   12b08:	b	12b30 <close_stdout@@Base+0xf88>
   12b0c:	b	12b30 <close_stdout@@Base+0xf88>
   12b10:	b	12b30 <close_stdout@@Base+0xf88>
   12b14:	b	12b30 <close_stdout@@Base+0xf88>
   12b18:	b	12b30 <close_stdout@@Base+0xf88>
   12b1c:	b	12b30 <close_stdout@@Base+0xf88>
   12b20:	b	12b30 <close_stdout@@Base+0xf88>
   12b24:	b	12b30 <close_stdout@@Base+0xf88>
   12b28:	b	12b30 <close_stdout@@Base+0xf88>
   12b2c:	b	12528 <close_stdout@@Base+0x980>
   12b30:	cmp	r4, r7
   12b34:	bne	12a94 <close_stdout@@Base+0xeec>
   12b38:	ldr	r0, [sp, #104]	; 0x68
   12b3c:	add	r9, r9, r2
   12b40:	bl	10f74 <iswprint@plt>
   12b44:	cmp	r0, #0
   12b48:	mov	r0, r5
   12b4c:	moveq	r6, #0
   12b50:	bl	10f2c <mbsinit@plt>
   12b54:	cmp	r0, #0
   12b58:	beq	12a2c <close_stdout@@Base+0xe84>
   12b5c:	mov	ip, r6
   12b60:	eor	r2, ip, #1
   12b64:	str	r9, [sp, #60]	; 0x3c
   12b68:	ldr	r4, [sp, #92]	; 0x5c
   12b6c:	uxtb	r2, r2
   12b70:	ldr	r9, [sp, #88]	; 0x58
   12b74:	ldr	r6, [sp, #96]	; 0x60
   12b78:	ldr	r5, [sp, #100]	; 0x64
   12b7c:	ldr	r3, [sp, #60]	; 0x3c
   12b80:	cmp	r3, #1
   12b84:	bls	12708 <close_stdout@@Base+0xb60>
   12b88:	ldr	r0, [sp, #24]
   12b8c:	and	r2, r2, r0
   12b90:	b	12714 <close_stdout@@Base+0xb6c>
   12b94:	ldr	r2, [sp, #164]	; 0xa4
   12b98:	tst	r2, #1
   12b9c:	addne	fp, fp, #1
   12ba0:	bne	120d0 <close_stdout@@Base+0x528>
   12ba4:	b	123e0 <close_stdout@@Base+0x838>
   12ba8:	ldr	r0, [sp, #36]	; 0x24
   12bac:	cmp	r0, #0
   12bb0:	beq	123e0 <close_stdout@@Base+0x838>
   12bb4:	b	12528 <close_stdout@@Base+0x980>
   12bb8:	ldr	r2, [sp, #32]
   12bbc:	ldrb	r3, [r2, #1]
   12bc0:	adds	r3, r3, #0
   12bc4:	movne	r3, #1
   12bc8:	b	124fc <close_stdout@@Base+0x954>
   12bcc:	bl	11118 <abort@plt>
   12bd0:	ldr	r8, [sp, #60]	; 0x3c
   12bd4:	b	12528 <close_stdout@@Base+0x980>
   12bd8:	ldr	r0, [sp, #32]
   12bdc:	bl	11040 <strlen@plt>
   12be0:	mov	r8, r0
   12be4:	b	129f0 <close_stdout@@Base+0xe48>
   12be8:	ldr	r2, [pc, #288]	; 12d10 <close_stdout@@Base+0x1168>
   12bec:	mov	r1, #1
   12bf0:	mov	r9, r1
   12bf4:	str	r1, [sp, #24]
   12bf8:	add	r2, pc, r2
   12bfc:	str	r1, [sp, #28]
   12c00:	str	r2, [sp, #52]	; 0x34
   12c04:	b	120ac <close_stdout@@Base+0x504>
   12c08:	ldr	r2, [pc, #260]	; 12d14 <close_stdout@@Base+0x116c>
   12c0c:	mov	r3, #1
   12c10:	mov	r9, r3
   12c14:	str	r3, [sp, #28]
   12c18:	add	r2, pc, r2
   12c1c:	str	sl, [sp, #24]
   12c20:	str	r2, [sp, #52]	; 0x34
   12c24:	b	120ac <close_stdout@@Base+0x504>
   12c28:	cmp	r8, r7
   12c2c:	str	r9, [sp, #60]	; 0x3c
   12c30:	mov	ip, r4
   12c34:	ldr	r6, [sp, #96]	; 0x60
   12c38:	ldr	r9, [sp, #88]	; 0x58
   12c3c:	ldr	r4, [sp, #92]	; 0x5c
   12c40:	ldr	r5, [sp, #100]	; 0x64
   12c44:	bls	12c7c <close_stdout@@Base+0x10d4>
   12c48:	ldrb	r3, [ip]
   12c4c:	cmp	r3, #0
   12c50:	beq	12c7c <close_stdout@@Base+0x10d4>
   12c54:	ldr	r3, [sp, #60]	; 0x3c
   12c58:	b	12c68 <close_stdout@@Base+0x10c0>
   12c5c:	ldrb	r2, [r5, r3]
   12c60:	cmp	r2, #0
   12c64:	beq	12c78 <close_stdout@@Base+0x10d0>
   12c68:	add	r3, r3, #1
   12c6c:	add	r2, fp, r3
   12c70:	cmp	r8, r2
   12c74:	bhi	12c5c <close_stdout@@Base+0x10b4>
   12c78:	str	r3, [sp, #60]	; 0x3c
   12c7c:	mov	r2, #1
   12c80:	b	12b7c <close_stdout@@Base+0xfd4>
   12c84:	str	r9, [sp, #60]	; 0x3c
   12c88:	mov	r2, #1
   12c8c:	ldr	r4, [sp, #92]	; 0x5c
   12c90:	ldr	r6, [sp, #96]	; 0x60
   12c94:	ldr	r9, [sp, #88]	; 0x58
   12c98:	ldr	r5, [sp, #100]	; 0x64
   12c9c:	b	12b7c <close_stdout@@Base+0xfd4>
   12ca0:	ldr	r9, [sp, #36]	; 0x24
   12ca4:	b	128c8 <close_stdout@@Base+0xd20>
   12ca8:	bl	10f50 <__stack_chk_fail@plt>
   12cac:	ldr	r1, [pc, #100]	; 12d18 <close_stdout@@Base+0x1170>
   12cb0:	mov	r3, #0
   12cb4:	mov	r0, #1
   12cb8:	str	r3, [sp, #24]
   12cbc:	add	r1, pc, r1
   12cc0:	str	r0, [sp, #28]
   12cc4:	mov	r9, r3
   12cc8:	str	r1, [sp, #52]	; 0x34
   12ccc:	b	120ac <close_stdout@@Base+0x504>
   12cd0:	ldr	r0, [pc, #68]	; 12d1c <close_stdout@@Base+0x1174>
   12cd4:	mov	r3, #1
   12cd8:	mov	r9, #0
   12cdc:	str	r3, [sp, #24]
   12ce0:	add	r0, pc, r0
   12ce4:	str	r3, [sp, #28]
   12ce8:	str	r0, [sp, #52]	; 0x34
   12cec:	b	120ac <close_stdout@@Base+0x504>
   12cf0:	andeq	r3, r1, r4, ror #31
   12cf4:	andeq	r0, r0, ip, ror #1
   12cf8:	andeq	r2, r0, ip, lsr #7
   12cfc:	andeq	r2, r0, r8, lsl #7
   12d00:	andeq	r2, r0, r4, asr #6
   12d04:	andeq	r2, r0, r0, lsr #6
   12d08:	andeq	r2, r0, r4, lsr #5
   12d0c:	andeq	r2, r0, ip, asr #4
   12d10:	andeq	r1, r0, r4, lsr #31
   12d14:	andeq	r1, r0, r0, lsl #31
   12d18:	ldrdeq	r1, [r0], -ip
   12d1c:			; <UNDEFINED> instruction: 0x00001ebc
   12d20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d24:	sub	sp, sp, #44	; 0x2c
   12d28:	mov	r6, r0
   12d2c:	mov	r9, r1
   12d30:	mov	sl, r2
   12d34:	mov	r4, r3
   12d38:	bl	11064 <__errno_location@plt>
   12d3c:	ldr	fp, [pc, #412]	; 12ee0 <close_stdout@@Base+0x1338>
   12d40:	cmp	r6, #0
   12d44:	add	fp, pc, fp
   12d48:	ldr	r5, [fp]
   12d4c:	ldr	r1, [r0]
   12d50:	mov	r8, r0
   12d54:	str	r1, [sp, #36]	; 0x24
   12d58:	blt	12ed8 <close_stdout@@Base+0x1330>
   12d5c:	ldr	r3, [pc, #384]	; 12ee4 <close_stdout@@Base+0x133c>
   12d60:	add	r3, pc, r3
   12d64:	ldr	r3, [r3]
   12d68:	cmp	r6, r3
   12d6c:	bcc	12dc0 <close_stdout@@Base+0x1218>
   12d70:	add	r7, r6, #1
   12d74:	cmn	r7, #-536870911	; 0xe0000001
   12d78:	bhi	12edc <close_stdout@@Base+0x1334>
   12d7c:	add	r3, fp, #4
   12d80:	cmp	r5, r3
   12d84:	beq	12eb0 <close_stdout@@Base+0x1308>
   12d88:	mov	r0, r5
   12d8c:	lsl	r1, r7, #3
   12d90:	bl	13bb8 <close_stdout@@Base+0x2010>
   12d94:	mov	r5, r0
   12d98:	str	r0, [fp]
   12d9c:	ldr	fp, [pc, #324]	; 12ee8 <close_stdout@@Base+0x1340>
   12da0:	mov	r1, #0
   12da4:	add	fp, pc, fp
   12da8:	ldr	r0, [fp]
   12dac:	rsb	r2, r0, r7
   12db0:	add	r0, r5, r0, lsl #3
   12db4:	lsl	r2, r2, #3
   12db8:	bl	1107c <memset@plt>
   12dbc:	str	r7, [fp]
   12dc0:	add	r2, r4, #8
   12dc4:	str	r2, [sp, #32]
   12dc8:	ldr	r1, [r4]
   12dcc:	add	fp, r5, r6, lsl #3
   12dd0:	ldr	lr, [sp, #32]
   12dd4:	mov	r2, r9
   12dd8:	ldr	r3, [r4, #4]
   12ddc:	ldr	ip, [r5, r6, lsl #3]
   12de0:	ldr	r7, [fp, #4]
   12de4:	orr	r3, r3, #1
   12de8:	str	r1, [sp]
   12dec:	str	r3, [sp, #4]
   12df0:	mov	r1, ip
   12df4:	str	lr, [sp, #8]
   12df8:	mov	r0, r7
   12dfc:	ldr	lr, [r4, #40]	; 0x28
   12e00:	str	r3, [sp, #28]
   12e04:	mov	r3, sl
   12e08:	str	lr, [sp, #12]
   12e0c:	ldr	lr, [r4, #44]	; 0x2c
   12e10:	str	ip, [sp, #24]
   12e14:	str	lr, [sp, #16]
   12e18:	bl	11ff8 <close_stdout@@Base+0x450>
   12e1c:	ldr	ip, [sp, #24]
   12e20:	cmp	ip, r0
   12e24:	bhi	12e9c <close_stdout@@Base+0x12f4>
   12e28:	ldr	r3, [pc, #188]	; 12eec <close_stdout@@Base+0x1344>
   12e2c:	add	r1, r0, #1
   12e30:	str	r1, [r5, r6, lsl #3]
   12e34:	add	r3, pc, r3
   12e38:	cmp	r7, r3
   12e3c:	beq	12e50 <close_stdout@@Base+0x12a8>
   12e40:	mov	r0, r7
   12e44:	str	r1, [sp, #24]
   12e48:	bl	10f08 <free@plt>
   12e4c:	ldr	r1, [sp, #24]
   12e50:	mov	r0, r1
   12e54:	str	r1, [sp, #24]
   12e58:	bl	13b60 <close_stdout@@Base+0x1fb8>
   12e5c:	ldr	r3, [sp, #28]
   12e60:	ldr	lr, [sp, #32]
   12e64:	mov	r2, r9
   12e68:	str	r0, [fp, #4]
   12e6c:	mov	r7, r0
   12e70:	ldr	ip, [r4]
   12e74:	str	r3, [sp, #4]
   12e78:	mov	r3, sl
   12e7c:	str	lr, [sp, #8]
   12e80:	str	ip, [sp]
   12e84:	ldr	ip, [r4, #40]	; 0x28
   12e88:	ldr	r1, [sp, #24]
   12e8c:	str	ip, [sp, #12]
   12e90:	ldr	ip, [r4, #44]	; 0x2c
   12e94:	str	ip, [sp, #16]
   12e98:	bl	11ff8 <close_stdout@@Base+0x450>
   12e9c:	ldr	r1, [sp, #36]	; 0x24
   12ea0:	mov	r0, r7
   12ea4:	str	r1, [r8]
   12ea8:	add	sp, sp, #44	; 0x2c
   12eac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12eb0:	lsl	r1, r7, #3
   12eb4:	mov	r0, #0
   12eb8:	str	r3, [sp, #24]
   12ebc:	bl	13bb8 <close_stdout@@Base+0x2010>
   12ec0:	ldr	r3, [sp, #24]
   12ec4:	mov	r5, r0
   12ec8:	ldm	r3, {r0, r1}
   12ecc:	str	r5, [fp]
   12ed0:	stm	r5, {r0, r1}
   12ed4:	b	12d9c <close_stdout@@Base+0x11f4>
   12ed8:	bl	11118 <abort@plt>
   12edc:	bl	13d74 <close_stdout@@Base+0x21cc>
   12ee0:	andeq	r3, r1, r4, lsl r4
   12ee4:	andeq	r3, r1, r4, asr #7
   12ee8:	andeq	r3, r1, r0, lsl #7
   12eec:	andeq	r3, r1, r0, asr #6
   12ef0:	push	{r4, r5, r6, lr}
   12ef4:	mov	r5, r0
   12ef8:	bl	11064 <__errno_location@plt>
   12efc:	cmp	r5, #0
   12f00:	mov	r1, #48	; 0x30
   12f04:	mov	r4, r0
   12f08:	ldr	r0, [pc, #24]	; 12f28 <close_stdout@@Base+0x1380>
   12f0c:	ldr	r6, [r4]
   12f10:	add	r0, pc, r0
   12f14:	add	r0, r0, #256	; 0x100
   12f18:	movne	r0, r5
   12f1c:	bl	13d34 <close_stdout@@Base+0x218c>
   12f20:	str	r6, [r4]
   12f24:	pop	{r4, r5, r6, pc}
   12f28:	andeq	r3, r1, r4, ror #4
   12f2c:	cmp	r0, #0
   12f30:	beq	12f3c <close_stdout@@Base+0x1394>
   12f34:	ldr	r0, [r0]
   12f38:	bx	lr
   12f3c:	ldr	r0, [pc, #12]	; 12f50 <close_stdout@@Base+0x13a8>
   12f40:	add	r0, pc, r0
   12f44:	add	r0, r0, #256	; 0x100
   12f48:	ldr	r0, [r0]
   12f4c:	bx	lr
   12f50:	andeq	r3, r1, r4, lsr r2
   12f54:	cmp	r0, #0
   12f58:	beq	12f64 <close_stdout@@Base+0x13bc>
   12f5c:	str	r1, [r0]
   12f60:	bx	lr
   12f64:	ldr	r0, [pc, #12]	; 12f78 <close_stdout@@Base+0x13d0>
   12f68:	add	r0, pc, r0
   12f6c:	add	r0, r0, #256	; 0x100
   12f70:	str	r1, [r0]
   12f74:	bx	lr
   12f78:	andeq	r3, r1, ip, lsl #4
   12f7c:	cmp	r0, #0
   12f80:	movne	r3, r0
   12f84:	beq	12fb4 <close_stdout@@Base+0x140c>
   12f88:	lsr	ip, r1, #5
   12f8c:	and	r1, r1, #31
   12f90:	add	r3, r3, ip, lsl #2
   12f94:	ldr	ip, [r3, #8]
   12f98:	lsr	r0, ip, r1
   12f9c:	eor	r2, r0, r2
   12fa0:	and	r0, r0, #1
   12fa4:	and	r2, r2, #1
   12fa8:	eor	ip, ip, r2, lsl r1
   12fac:	str	ip, [r3, #8]
   12fb0:	bx	lr
   12fb4:	ldr	r3, [pc, #8]	; 12fc4 <close_stdout@@Base+0x141c>
   12fb8:	add	r3, pc, r3
   12fbc:	add	r3, r3, #256	; 0x100
   12fc0:	b	12f88 <close_stdout@@Base+0x13e0>
   12fc4:			; <UNDEFINED> instruction: 0x000131bc
   12fc8:	subs	r3, r0, #0
   12fcc:	beq	12fdc <close_stdout@@Base+0x1434>
   12fd0:	ldr	r0, [r3, #4]
   12fd4:	str	r1, [r3, #4]
   12fd8:	bx	lr
   12fdc:	ldr	r3, [pc, #8]	; 12fec <close_stdout@@Base+0x1444>
   12fe0:	add	r3, pc, r3
   12fe4:	add	r3, r3, #256	; 0x100
   12fe8:	b	12fd0 <close_stdout@@Base+0x1428>
   12fec:	muleq	r1, r4, r1
   12ff0:	cmp	r0, #0
   12ff4:	push	{r3, lr}
   12ff8:	beq	1301c <close_stdout@@Base+0x1474>
   12ffc:	cmp	r2, #0
   13000:	cmpne	r1, #0
   13004:	mov	r3, #8
   13008:	strne	r1, [r0, #40]	; 0x28
   1300c:	str	r3, [r0]
   13010:	strne	r2, [r0, #44]	; 0x2c
   13014:	popne	{r3, pc}
   13018:	bl	11118 <abort@plt>
   1301c:	ldr	r0, [pc, #8]	; 1302c <close_stdout@@Base+0x1484>
   13020:	add	r0, pc, r0
   13024:	add	r0, r0, #256	; 0x100
   13028:	b	12ffc <close_stdout@@Base+0x1454>
   1302c:	andeq	r3, r1, r4, asr r1
   13030:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13034:	sub	sp, sp, #24
   13038:	mov	r7, r0
   1303c:	mov	sl, r1
   13040:	ldr	r4, [sp, #56]	; 0x38
   13044:	mov	r9, r2
   13048:	mov	r8, r3
   1304c:	cmp	r4, #0
   13050:	beq	130a4 <close_stdout@@Base+0x14fc>
   13054:	bl	11064 <__errno_location@plt>
   13058:	ldr	r3, [r4]
   1305c:	add	lr, r4, #8
   13060:	mov	r1, sl
   13064:	mov	r2, r9
   13068:	ldr	r6, [r0]
   1306c:	mov	r5, r0
   13070:	str	r3, [sp]
   13074:	mov	r0, r7
   13078:	ldr	ip, [r4, #4]
   1307c:	mov	r3, r8
   13080:	stmib	sp, {ip, lr}
   13084:	ldr	ip, [r4, #40]	; 0x28
   13088:	str	ip, [sp, #12]
   1308c:	ldr	ip, [r4, #44]	; 0x2c
   13090:	str	ip, [sp, #16]
   13094:	bl	11ff8 <close_stdout@@Base+0x450>
   13098:	str	r6, [r5]
   1309c:	add	sp, sp, #24
   130a0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130a4:	ldr	r4, [pc, #8]	; 130b4 <close_stdout@@Base+0x150c>
   130a8:	add	r4, pc, r4
   130ac:	add	r4, r4, #256	; 0x100
   130b0:	b	13054 <close_stdout@@Base+0x14ac>
   130b4:	andeq	r3, r1, ip, asr #1
   130b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130bc:	subs	r4, r3, #0
   130c0:	sub	sp, sp, #36	; 0x24
   130c4:	mov	r7, r0
   130c8:	mov	r6, r1
   130cc:	mov	r5, r2
   130d0:	beq	1318c <close_stdout@@Base+0x15e4>
   130d4:	bl	11064 <__errno_location@plt>
   130d8:	ldr	r3, [r4]
   130dc:	ldr	sl, [r4, #4]
   130e0:	add	r9, r4, #8
   130e4:	mov	r8, r0
   130e8:	mov	r0, #0
   130ec:	ldr	r2, [r8]
   130f0:	cmp	r5, r0
   130f4:	orreq	sl, sl, #1
   130f8:	str	r9, [sp, #8]
   130fc:	mov	r1, r0
   13100:	stm	sp, {r3, sl}
   13104:	mov	r3, r6
   13108:	ldr	ip, [r4, #40]	; 0x28
   1310c:	str	r2, [sp, #28]
   13110:	mov	r2, r7
   13114:	str	ip, [sp, #12]
   13118:	ldr	ip, [r4, #44]	; 0x2c
   1311c:	str	ip, [sp, #16]
   13120:	bl	11ff8 <close_stdout@@Base+0x450>
   13124:	add	r1, r0, #1
   13128:	mov	fp, r0
   1312c:	str	r1, [sp, #24]
   13130:	mov	r0, r1
   13134:	bl	13b60 <close_stdout@@Base+0x1fb8>
   13138:	ldr	lr, [r4]
   1313c:	str	sl, [sp, #4]
   13140:	mov	r3, r6
   13144:	str	r9, [sp, #8]
   13148:	mov	r2, r7
   1314c:	str	lr, [sp]
   13150:	ldr	lr, [r4, #40]	; 0x28
   13154:	ldr	r1, [sp, #24]
   13158:	str	lr, [sp, #12]
   1315c:	ldr	lr, [r4, #44]	; 0x2c
   13160:	str	lr, [sp, #16]
   13164:	str	r0, [sp, #24]
   13168:	bl	11ff8 <close_stdout@@Base+0x450>
   1316c:	ldr	r3, [sp, #28]
   13170:	cmp	r5, #0
   13174:	str	r3, [r8]
   13178:	ldr	ip, [sp, #24]
   1317c:	strne	fp, [r5]
   13180:	mov	r0, ip
   13184:	add	sp, sp, #36	; 0x24
   13188:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1318c:	ldr	r4, [pc, #8]	; 1319c <close_stdout@@Base+0x15f4>
   13190:	add	r4, pc, r4
   13194:	add	r4, r4, #256	; 0x100
   13198:	b	130d4 <close_stdout@@Base+0x152c>
   1319c:	andeq	r2, r1, r4, ror #31
   131a0:	mov	r3, r2
   131a4:	mov	r2, #0
   131a8:	b	130b8 <close_stdout@@Base+0x1510>
   131ac:	ldr	r2, [pc, #152]	; 1324c <close_stdout@@Base+0x16a4>
   131b0:	push	{r3, r4, r5, r6, r7, lr}
   131b4:	add	r2, pc, r2
   131b8:	ldr	r3, [pc, #144]	; 13250 <close_stdout@@Base+0x16a8>
   131bc:	ldr	r6, [r2]
   131c0:	add	r3, pc, r3
   131c4:	cmp	r6, #1
   131c8:	ldr	r7, [r3]
   131cc:	movhi	r4, #1
   131d0:	movhi	r5, r7
   131d4:	bls	131f0 <close_stdout@@Base+0x1648>
   131d8:	ldr	r0, [r5, #12]
   131dc:	add	r4, r4, #1
   131e0:	bl	10f08 <free@plt>
   131e4:	cmp	r4, r6
   131e8:	add	r5, r5, #8
   131ec:	bne	131d8 <close_stdout@@Base+0x1630>
   131f0:	ldr	r4, [pc, #92]	; 13254 <close_stdout@@Base+0x16ac>
   131f4:	ldr	r0, [r7, #4]
   131f8:	add	r4, pc, r4
   131fc:	cmp	r0, r4
   13200:	beq	13218 <close_stdout@@Base+0x1670>
   13204:	bl	10f08 <free@plt>
   13208:	ldr	r3, [pc, #72]	; 13258 <close_stdout@@Base+0x16b0>
   1320c:	mov	r2, #256	; 0x100
   13210:	add	r3, pc, r3
   13214:	stmib	r3, {r2, r4}
   13218:	ldr	r4, [pc, #60]	; 1325c <close_stdout@@Base+0x16b4>
   1321c:	add	r4, pc, r4
   13220:	add	r5, r4, #4
   13224:	cmp	r7, r5
   13228:	beq	13238 <close_stdout@@Base+0x1690>
   1322c:	mov	r0, r7
   13230:	bl	10f08 <free@plt>
   13234:	str	r5, [r4]
   13238:	ldr	r3, [pc, #32]	; 13260 <close_stdout@@Base+0x16b8>
   1323c:	mov	r2, #1
   13240:	add	r3, pc, r3
   13244:	str	r2, [r3]
   13248:	pop	{r3, r4, r5, r6, r7, pc}
   1324c:	andeq	r2, r1, r0, ror pc
   13250:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   13254:	andeq	r2, r1, ip, ror pc
   13258:	andeq	r2, r1, r8, asr #30
   1325c:	andeq	r2, r1, ip, lsr pc
   13260:	andeq	r2, r1, r4, ror #29
   13264:	ldr	r3, [pc, #12]	; 13278 <close_stdout@@Base+0x16d0>
   13268:	mvn	r2, #0
   1326c:	add	r3, pc, r3
   13270:	add	r3, r3, #256	; 0x100
   13274:	b	12d20 <close_stdout@@Base+0x1178>
   13278:	andeq	r2, r1, r8, lsl #30
   1327c:	ldr	r3, [pc, #8]	; 1328c <close_stdout@@Base+0x16e4>
   13280:	add	r3, pc, r3
   13284:	add	r3, r3, #256	; 0x100
   13288:	b	12d20 <close_stdout@@Base+0x1178>
   1328c:	strdeq	r2, [r1], -r4
   13290:	mov	r1, r0
   13294:	mov	r0, #0
   13298:	b	13264 <close_stdout@@Base+0x16bc>
   1329c:	mov	r2, r1
   132a0:	mov	r1, r0
   132a4:	mov	r0, #0
   132a8:	b	1327c <close_stdout@@Base+0x16d4>
   132ac:	ldr	r3, [pc, #92]	; 13310 <close_stdout@@Base+0x1768>
   132b0:	ldr	ip, [pc, #92]	; 13314 <close_stdout@@Base+0x176c>
   132b4:	add	r3, pc, r3
   132b8:	push	{r4, r5, r6, r7, lr}
   132bc:	sub	sp, sp, #60	; 0x3c
   132c0:	ldr	r4, [r3, ip]
   132c4:	add	r5, sp, #4
   132c8:	mov	r7, r2
   132cc:	mov	r6, r0
   132d0:	mov	r0, r5
   132d4:	ldr	r3, [r4]
   132d8:	str	r3, [sp, #52]	; 0x34
   132dc:	bl	11e40 <close_stdout@@Base+0x298>
   132e0:	mov	r3, r5
   132e4:	mvn	r2, #0
   132e8:	mov	r0, r6
   132ec:	mov	r1, r7
   132f0:	bl	12d20 <close_stdout@@Base+0x1178>
   132f4:	ldr	r2, [sp, #52]	; 0x34
   132f8:	ldr	r3, [r4]
   132fc:	cmp	r2, r3
   13300:	bne	1330c <close_stdout@@Base+0x1764>
   13304:	add	sp, sp, #60	; 0x3c
   13308:	pop	{r4, r5, r6, r7, pc}
   1330c:	bl	10f50 <__stack_chk_fail@plt>
   13310:	andeq	r2, r1, r4, asr #26
   13314:	andeq	r0, r0, ip, ror #1
   13318:	ldr	ip, [pc, #96]	; 13380 <close_stdout@@Base+0x17d8>
   1331c:	push	{r4, r5, r6, r7, r8, lr}
   13320:	add	ip, pc, ip
   13324:	ldr	lr, [pc, #88]	; 13384 <close_stdout@@Base+0x17dc>
   13328:	sub	sp, sp, #56	; 0x38
   1332c:	mov	r8, r3
   13330:	add	r5, sp, #4
   13334:	mov	r7, r2
   13338:	mov	r6, r0
   1333c:	ldr	r4, [ip, lr]
   13340:	mov	r0, r5
   13344:	ldr	r3, [r4]
   13348:	str	r3, [sp, #52]	; 0x34
   1334c:	bl	11e40 <close_stdout@@Base+0x298>
   13350:	mov	r2, r8
   13354:	mov	r3, r5
   13358:	mov	r0, r6
   1335c:	mov	r1, r7
   13360:	bl	12d20 <close_stdout@@Base+0x1178>
   13364:	ldr	r2, [sp, #52]	; 0x34
   13368:	ldr	r3, [r4]
   1336c:	cmp	r2, r3
   13370:	bne	1337c <close_stdout@@Base+0x17d4>
   13374:	add	sp, sp, #56	; 0x38
   13378:	pop	{r4, r5, r6, r7, r8, pc}
   1337c:	bl	10f50 <__stack_chk_fail@plt>
   13380:	ldrdeq	r2, [r1], -r8
   13384:	andeq	r0, r0, ip, ror #1
   13388:	mov	r2, r1
   1338c:	mov	r1, r0
   13390:	mov	r0, #0
   13394:	b	132ac <close_stdout@@Base+0x1704>
   13398:	mov	ip, r1
   1339c:	mov	r3, r2
   133a0:	mov	r1, r0
   133a4:	mov	r2, ip
   133a8:	mov	r0, #0
   133ac:	b	13318 <close_stdout@@Base+0x1770>
   133b0:	push	{r4, r5, r6, r7, r8, lr}
   133b4:	mov	r5, r2
   133b8:	ldr	lr, [pc, #136]	; 13448 <close_stdout@@Base+0x18a0>
   133bc:	mov	r7, r0
   133c0:	mov	r6, r1
   133c4:	ldr	r4, [pc, #128]	; 1344c <close_stdout@@Base+0x18a4>
   133c8:	add	lr, pc, lr
   133cc:	sub	sp, sp, #56	; 0x38
   133d0:	add	lr, lr, #256	; 0x100
   133d4:	ldr	r8, [pc, #116]	; 13450 <close_stdout@@Base+0x18a8>
   133d8:	add	r4, pc, r4
   133dc:	add	ip, sp, #4
   133e0:	ldm	lr!, {r0, r1, r2, r3}
   133e4:	ldr	r4, [r4, r8]
   133e8:	stmia	ip!, {r0, r1, r2, r3}
   133ec:	ldm	lr!, {r0, r1, r2, r3}
   133f0:	ldr	r8, [r4]
   133f4:	stmia	ip!, {r0, r1, r2, r3}
   133f8:	ldm	lr, {r0, r1, r2, r3}
   133fc:	str	r8, [sp, #52]	; 0x34
   13400:	stm	ip, {r0, r1, r2, r3}
   13404:	mov	r1, r5
   13408:	add	r5, sp, #4
   1340c:	mov	r2, #1
   13410:	mov	r0, r5
   13414:	bl	12f7c <close_stdout@@Base+0x13d4>
   13418:	mov	r2, r6
   1341c:	mov	r3, r5
   13420:	mov	r1, r7
   13424:	mov	r0, #0
   13428:	bl	12d20 <close_stdout@@Base+0x1178>
   1342c:	ldr	r2, [sp, #52]	; 0x34
   13430:	ldr	r3, [r4]
   13434:	cmp	r2, r3
   13438:	bne	13444 <close_stdout@@Base+0x189c>
   1343c:	add	sp, sp, #56	; 0x38
   13440:	pop	{r4, r5, r6, r7, r8, pc}
   13444:	bl	10f50 <__stack_chk_fail@plt>
   13448:	andeq	r2, r1, ip, lsr #27
   1344c:	andeq	r2, r1, r0, lsr #24
   13450:	andeq	r0, r0, ip, ror #1
   13454:	mov	r2, r1
   13458:	mvn	r1, #0
   1345c:	b	133b0 <close_stdout@@Base+0x1808>
   13460:	mov	r1, #58	; 0x3a
   13464:	b	13454 <close_stdout@@Base+0x18ac>
   13468:	mov	r2, #58	; 0x3a
   1346c:	b	133b0 <close_stdout@@Base+0x1808>
   13470:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13474:	mov	r5, r2
   13478:	ldr	lr, [pc, #144]	; 13510 <close_stdout@@Base+0x1968>
   1347c:	mov	r8, r0
   13480:	mov	r9, r1
   13484:	mov	r7, r3
   13488:	add	lr, pc, lr
   1348c:	ldr	r4, [pc, #128]	; 13514 <close_stdout@@Base+0x196c>
   13490:	add	lr, lr, #256	; 0x100
   13494:	sub	sp, sp, #56	; 0x38
   13498:	ldr	sl, [pc, #120]	; 13518 <close_stdout@@Base+0x1970>
   1349c:	add	r4, pc, r4
   134a0:	ldm	lr!, {r0, r1, r2, r3}
   134a4:	add	ip, sp, #4
   134a8:	ldr	r4, [r4, sl]
   134ac:	ldr	r6, [sp, #88]	; 0x58
   134b0:	stmia	ip!, {r0, r1, r2, r3}
   134b4:	ldm	lr!, {r0, r1, r2, r3}
   134b8:	ldr	sl, [r4]
   134bc:	stmia	ip!, {r0, r1, r2, r3}
   134c0:	ldm	lr, {r0, r1, r2, r3}
   134c4:	str	sl, [sp, #52]	; 0x34
   134c8:	stm	ip, {r0, r1, r2, r3}
   134cc:	mov	r2, r5
   134d0:	add	r5, sp, #4
   134d4:	mov	r1, r9
   134d8:	mov	r0, r5
   134dc:	bl	12ff0 <close_stdout@@Base+0x1448>
   134e0:	mov	r2, r6
   134e4:	mov	r3, r5
   134e8:	mov	r0, r8
   134ec:	mov	r1, r7
   134f0:	bl	12d20 <close_stdout@@Base+0x1178>
   134f4:	ldr	r2, [sp, #52]	; 0x34
   134f8:	ldr	r3, [r4]
   134fc:	cmp	r2, r3
   13500:	bne	1350c <close_stdout@@Base+0x1964>
   13504:	add	sp, sp, #56	; 0x38
   13508:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1350c:	bl	10f50 <__stack_chk_fail@plt>
   13510:	andeq	r2, r1, ip, ror #25
   13514:	andeq	r2, r1, ip, asr fp
   13518:	andeq	r0, r0, ip, ror #1
   1351c:	push	{lr}		; (str lr, [sp, #-4]!)
   13520:	sub	sp, sp, #12
   13524:	mvn	ip, #0
   13528:	str	ip, [sp]
   1352c:	bl	13470 <close_stdout@@Base+0x18c8>
   13530:	add	sp, sp, #12
   13534:	pop	{pc}		; (ldr pc, [sp], #4)
   13538:	mov	ip, r1
   1353c:	mov	r3, r2
   13540:	mov	r1, r0
   13544:	mov	r2, ip
   13548:	mov	r0, #0
   1354c:	b	1351c <close_stdout@@Base+0x1974>
   13550:	push	{lr}		; (str lr, [sp, #-4]!)
   13554:	sub	sp, sp, #12
   13558:	mov	lr, r1
   1355c:	mov	ip, r2
   13560:	mov	r1, r0
   13564:	str	r3, [sp]
   13568:	mov	r2, lr
   1356c:	mov	r3, ip
   13570:	mov	r0, #0
   13574:	bl	13470 <close_stdout@@Base+0x18c8>
   13578:	add	sp, sp, #12
   1357c:	pop	{pc}		; (ldr pc, [sp], #4)
   13580:	ldr	r3, [pc, #12]	; 13594 <close_stdout@@Base+0x19ec>
   13584:	ldr	ip, [pc, #12]	; 13598 <close_stdout@@Base+0x19f0>
   13588:	add	r3, pc, r3
   1358c:	ldr	r3, [r3, ip]
   13590:	b	12d20 <close_stdout@@Base+0x1178>
   13594:	andeq	r2, r1, r0, ror sl
   13598:	andeq	r0, r0, r8, ror #1
   1359c:	mov	r2, r1
   135a0:	mov	r1, r0
   135a4:	mov	r0, #0
   135a8:	b	13580 <close_stdout@@Base+0x19d8>
   135ac:	mvn	r2, #0
   135b0:	b	13580 <close_stdout@@Base+0x19d8>
   135b4:	mov	r1, r0
   135b8:	mov	r0, #0
   135bc:	b	135ac <close_stdout@@Base+0x1a04>
   135c0:	push	{r4, r5, r6, r7, lr}
   135c4:	cmp	r1, #0
   135c8:	sub	sp, sp, #36	; 0x24
   135cc:	ldr	r7, [pc, #896]	; 13954 <close_stdout@@Base+0x1dac>
   135d0:	mov	ip, r3
   135d4:	mov	r5, r0
   135d8:	add	r7, pc, r7
   135dc:	ldr	r4, [sp, #56]	; 0x38
   135e0:	ldr	r6, [sp, #60]	; 0x3c
   135e4:	beq	13928 <close_stdout@@Base+0x1d80>
   135e8:	str	r2, [sp]
   135ec:	mov	r3, r1
   135f0:	ldr	r2, [pc, #864]	; 13958 <close_stdout@@Base+0x1db0>
   135f4:	mov	r1, #1
   135f8:	str	ip, [sp, #4]
   135fc:	add	r2, pc, r2
   13600:	bl	110ac <__fprintf_chk@plt>
   13604:	ldr	r1, [pc, #848]	; 1395c <close_stdout@@Base+0x1db4>
   13608:	mov	r2, #5
   1360c:	mov	r0, #0
   13610:	add	r1, pc, r1
   13614:	bl	10f44 <dcgettext@plt>
   13618:	ldr	r2, [pc, #832]	; 13960 <close_stdout@@Base+0x1db8>
   1361c:	movw	ip, #2013	; 0x7dd
   13620:	mov	r1, #1
   13624:	ldr	r2, [r7, r2]
   13628:	str	ip, [sp]
   1362c:	mov	r3, r0
   13630:	mov	r0, r5
   13634:	bl	110ac <__fprintf_chk@plt>
   13638:	ldr	r1, [pc, #804]	; 13964 <close_stdout@@Base+0x1dbc>
   1363c:	mov	r0, #0
   13640:	mov	r2, #5
   13644:	add	r1, pc, r1
   13648:	bl	10f44 <dcgettext@plt>
   1364c:	mov	r1, r5
   13650:	bl	10ecc <fputs_unlocked@plt>
   13654:	cmp	r6, #9
   13658:	addls	pc, pc, r6, lsl #2
   1365c:	b	13944 <close_stdout@@Base+0x1d9c>
   13660:	b	136f4 <close_stdout@@Base+0x1b4c>
   13664:	b	136f8 <close_stdout@@Base+0x1b50>
   13668:	b	13728 <close_stdout@@Base+0x1b80>
   1366c:	b	1375c <close_stdout@@Base+0x1bb4>
   13670:	b	13798 <close_stdout@@Base+0x1bf0>
   13674:	b	137d8 <close_stdout@@Base+0x1c30>
   13678:	b	13820 <close_stdout@@Base+0x1c78>
   1367c:	b	13870 <close_stdout@@Base+0x1cc8>
   13680:	b	138c8 <close_stdout@@Base+0x1d20>
   13684:	b	13688 <close_stdout@@Base+0x1ae0>
   13688:	ldr	r1, [pc, #728]	; 13968 <close_stdout@@Base+0x1dc0>
   1368c:	mov	r0, #0
   13690:	add	r1, pc, r1
   13694:	mov	r2, #5
   13698:	bl	10f44 <dcgettext@plt>
   1369c:	ldm	r4, {r3, ip}
   136a0:	mov	r1, #1
   136a4:	str	ip, [sp]
   136a8:	ldr	ip, [r4, #8]
   136ac:	str	ip, [sp, #4]
   136b0:	ldr	ip, [r4, #12]
   136b4:	str	ip, [sp, #8]
   136b8:	ldr	ip, [r4, #16]
   136bc:	str	ip, [sp, #12]
   136c0:	ldr	ip, [r4, #20]
   136c4:	str	ip, [sp, #16]
   136c8:	ldr	ip, [r4, #24]
   136cc:	str	ip, [sp, #20]
   136d0:	ldr	ip, [r4, #28]
   136d4:	str	ip, [sp, #24]
   136d8:	ldr	ip, [r4, #32]
   136dc:	str	ip, [sp, #28]
   136e0:	mov	r2, r0
   136e4:	mov	r0, r5
   136e8:	bl	110ac <__fprintf_chk@plt>
   136ec:	add	sp, sp, #36	; 0x24
   136f0:	pop	{r4, r5, r6, r7, pc}
   136f4:	bl	11118 <abort@plt>
   136f8:	ldr	r1, [pc, #620]	; 1396c <close_stdout@@Base+0x1dc4>
   136fc:	mov	r2, #5
   13700:	mov	r0, #0
   13704:	add	r1, pc, r1
   13708:	bl	10f44 <dcgettext@plt>
   1370c:	ldr	r3, [r4]
   13710:	mov	r1, #1
   13714:	mov	r2, r0
   13718:	mov	r0, r5
   1371c:	add	sp, sp, #36	; 0x24
   13720:	pop	{r4, r5, r6, r7, lr}
   13724:	b	110ac <__fprintf_chk@plt>
   13728:	ldr	r1, [pc, #576]	; 13970 <close_stdout@@Base+0x1dc8>
   1372c:	mov	r2, #5
   13730:	mov	r0, #0
   13734:	add	r1, pc, r1
   13738:	bl	10f44 <dcgettext@plt>
   1373c:	ldm	r4, {r3, ip}
   13740:	mov	r1, #1
   13744:	str	ip, [sp, #56]	; 0x38
   13748:	mov	r2, r0
   1374c:	mov	r0, r5
   13750:	add	sp, sp, #36	; 0x24
   13754:	pop	{r4, r5, r6, r7, lr}
   13758:	b	110ac <__fprintf_chk@plt>
   1375c:	ldr	r1, [pc, #528]	; 13974 <close_stdout@@Base+0x1dcc>
   13760:	mov	r2, #5
   13764:	mov	r0, #0
   13768:	add	r1, pc, r1
   1376c:	bl	10f44 <dcgettext@plt>
   13770:	ldm	r4, {r3, ip}
   13774:	mov	r1, #1
   13778:	str	ip, [sp, #56]	; 0x38
   1377c:	ldr	ip, [r4, #8]
   13780:	str	ip, [sp, #60]	; 0x3c
   13784:	mov	r2, r0
   13788:	mov	r0, r5
   1378c:	add	sp, sp, #36	; 0x24
   13790:	pop	{r4, r5, r6, r7, lr}
   13794:	b	110ac <__fprintf_chk@plt>
   13798:	ldr	r1, [pc, #472]	; 13978 <close_stdout@@Base+0x1dd0>
   1379c:	mov	r2, #5
   137a0:	mov	r0, #0
   137a4:	add	r1, pc, r1
   137a8:	bl	10f44 <dcgettext@plt>
   137ac:	ldm	r4, {r3, ip}
   137b0:	mov	r1, #1
   137b4:	str	ip, [sp]
   137b8:	ldr	ip, [r4, #8]
   137bc:	str	ip, [sp, #4]
   137c0:	ldr	ip, [r4, #12]
   137c4:	str	ip, [sp, #8]
   137c8:	mov	r2, r0
   137cc:	mov	r0, r5
   137d0:	bl	110ac <__fprintf_chk@plt>
   137d4:	b	136ec <close_stdout@@Base+0x1b44>
   137d8:	ldr	r1, [pc, #412]	; 1397c <close_stdout@@Base+0x1dd4>
   137dc:	mov	r2, #5
   137e0:	mov	r0, #0
   137e4:	add	r1, pc, r1
   137e8:	bl	10f44 <dcgettext@plt>
   137ec:	ldm	r4, {r3, ip}
   137f0:	mov	r1, #1
   137f4:	str	ip, [sp]
   137f8:	ldr	ip, [r4, #8]
   137fc:	str	ip, [sp, #4]
   13800:	ldr	ip, [r4, #12]
   13804:	str	ip, [sp, #8]
   13808:	ldr	ip, [r4, #16]
   1380c:	str	ip, [sp, #12]
   13810:	mov	r2, r0
   13814:	mov	r0, r5
   13818:	bl	110ac <__fprintf_chk@plt>
   1381c:	b	136ec <close_stdout@@Base+0x1b44>
   13820:	ldr	r1, [pc, #344]	; 13980 <close_stdout@@Base+0x1dd8>
   13824:	mov	r2, #5
   13828:	mov	r0, #0
   1382c:	add	r1, pc, r1
   13830:	bl	10f44 <dcgettext@plt>
   13834:	ldm	r4, {r3, ip}
   13838:	mov	r1, #1
   1383c:	str	ip, [sp]
   13840:	ldr	ip, [r4, #8]
   13844:	str	ip, [sp, #4]
   13848:	ldr	ip, [r4, #12]
   1384c:	str	ip, [sp, #8]
   13850:	ldr	ip, [r4, #16]
   13854:	str	ip, [sp, #12]
   13858:	ldr	ip, [r4, #20]
   1385c:	str	ip, [sp, #16]
   13860:	mov	r2, r0
   13864:	mov	r0, r5
   13868:	bl	110ac <__fprintf_chk@plt>
   1386c:	b	136ec <close_stdout@@Base+0x1b44>
   13870:	ldr	r1, [pc, #268]	; 13984 <close_stdout@@Base+0x1ddc>
   13874:	mov	r2, #5
   13878:	mov	r0, #0
   1387c:	add	r1, pc, r1
   13880:	bl	10f44 <dcgettext@plt>
   13884:	ldm	r4, {r3, ip}
   13888:	mov	r1, #1
   1388c:	str	ip, [sp]
   13890:	ldr	ip, [r4, #8]
   13894:	str	ip, [sp, #4]
   13898:	ldr	ip, [r4, #12]
   1389c:	str	ip, [sp, #8]
   138a0:	ldr	ip, [r4, #16]
   138a4:	str	ip, [sp, #12]
   138a8:	ldr	ip, [r4, #20]
   138ac:	str	ip, [sp, #16]
   138b0:	ldr	ip, [r4, #24]
   138b4:	str	ip, [sp, #20]
   138b8:	mov	r2, r0
   138bc:	mov	r0, r5
   138c0:	bl	110ac <__fprintf_chk@plt>
   138c4:	b	136ec <close_stdout@@Base+0x1b44>
   138c8:	ldr	r1, [pc, #184]	; 13988 <close_stdout@@Base+0x1de0>
   138cc:	mov	r2, #5
   138d0:	mov	r0, #0
   138d4:	add	r1, pc, r1
   138d8:	bl	10f44 <dcgettext@plt>
   138dc:	ldm	r4, {r3, ip}
   138e0:	mov	r1, #1
   138e4:	str	ip, [sp]
   138e8:	ldr	ip, [r4, #8]
   138ec:	str	ip, [sp, #4]
   138f0:	ldr	ip, [r4, #12]
   138f4:	str	ip, [sp, #8]
   138f8:	ldr	ip, [r4, #16]
   138fc:	str	ip, [sp, #12]
   13900:	ldr	ip, [r4, #20]
   13904:	str	ip, [sp, #16]
   13908:	ldr	ip, [r4, #24]
   1390c:	str	ip, [sp, #20]
   13910:	ldr	ip, [r4, #28]
   13914:	str	ip, [sp, #24]
   13918:	mov	r2, r0
   1391c:	mov	r0, r5
   13920:	bl	110ac <__fprintf_chk@plt>
   13924:	b	136ec <close_stdout@@Base+0x1b44>
   13928:	str	r3, [sp]
   1392c:	mov	r3, r2
   13930:	ldr	r2, [pc, #84]	; 1398c <close_stdout@@Base+0x1de4>
   13934:	mov	r1, #1
   13938:	add	r2, pc, r2
   1393c:	bl	110ac <__fprintf_chk@plt>
   13940:	b	13604 <close_stdout@@Base+0x1a5c>
   13944:	ldr	r1, [pc, #68]	; 13990 <close_stdout@@Base+0x1de8>
   13948:	mov	r0, #0
   1394c:	add	r1, pc, r1
   13950:	b	13694 <close_stdout@@Base+0x1aec>
   13954:	andeq	r2, r1, r0, lsr #20
   13958:	strdeq	r1, [r0], -r4
   1395c:	strdeq	r1, [r0], -r4
   13960:	andeq	r0, r0, r8, lsl r1
   13964:	andeq	r1, r0, r4, asr #11
   13968:	andeq	r1, r0, r0, asr r7
   1396c:	ldrdeq	r1, [r0], -r0
   13970:			; <UNDEFINED> instruction: 0x000015b0
   13974:	muleq	r0, r4, r5
   13978:	andeq	r1, r0, r4, ror r5
   1397c:	andeq	r1, r0, r4, asr r5
   13980:	andeq	r1, r0, r0, lsr r5
   13984:	andeq	r1, r0, r8, lsl #10
   13988:	ldrdeq	r1, [r0], -ip
   1398c:	andeq	r1, r0, r4, asr #5
   13990:	andeq	r1, r0, r8, asr #9
   13994:	push	{r4, r5, lr}
   13998:	sub	sp, sp, #12
   1399c:	ldr	r5, [sp, #24]
   139a0:	ldr	ip, [r5]
   139a4:	cmp	ip, #0
   139a8:	beq	139c4 <close_stdout@@Base+0x1e1c>
   139ac:	mov	lr, r5
   139b0:	mov	ip, #0
   139b4:	ldr	r4, [lr, #4]!
   139b8:	add	ip, ip, #1
   139bc:	cmp	r4, #0
   139c0:	bne	139b4 <close_stdout@@Base+0x1e0c>
   139c4:	stm	sp, {r5, ip}
   139c8:	bl	135c0 <close_stdout@@Base+0x1a18>
   139cc:	add	sp, sp, #12
   139d0:	pop	{r4, r5, pc}
   139d4:	push	{r4, r5, r6, r7, lr}
   139d8:	sub	sp, sp, #60	; 0x3c
   139dc:	ldr	r4, [pc, #100]	; 13a48 <close_stdout@@Base+0x1ea0>
   139e0:	mov	ip, #0
   139e4:	ldr	r5, [pc, #96]	; 13a4c <close_stdout@@Base+0x1ea4>
   139e8:	mov	lr, ip
   139ec:	add	r4, pc, r4
   139f0:	ldr	r6, [sp, #80]	; 0x50
   139f4:	ldr	r7, [r4, r5]
   139f8:	add	r5, sp, #12
   139fc:	ldr	r4, [r7]
   13a00:	str	r4, [sp, #52]	; 0x34
   13a04:	ldr	r4, [r6, ip]
   13a08:	cmp	r4, #0
   13a0c:	str	r4, [r5, ip]
   13a10:	beq	13a24 <close_stdout@@Base+0x1e7c>
   13a14:	add	lr, lr, #1
   13a18:	add	ip, ip, #4
   13a1c:	cmp	lr, #10
   13a20:	bne	13a04 <close_stdout@@Base+0x1e5c>
   13a24:	stm	sp, {r5, lr}
   13a28:	bl	135c0 <close_stdout@@Base+0x1a18>
   13a2c:	ldr	r2, [sp, #52]	; 0x34
   13a30:	ldr	r3, [r7]
   13a34:	cmp	r2, r3
   13a38:	bne	13a44 <close_stdout@@Base+0x1e9c>
   13a3c:	add	sp, sp, #60	; 0x3c
   13a40:	pop	{r4, r5, r6, r7, pc}
   13a44:	bl	10f50 <__stack_chk_fail@plt>
   13a48:	andeq	r2, r1, ip, lsl #12
   13a4c:	andeq	r0, r0, ip, ror #1
   13a50:	push	{r3}		; (str r3, [sp, #-4]!)
   13a54:	push	{r4, lr}
   13a58:	sub	sp, sp, #20
   13a5c:	ldr	lr, [pc, #72]	; 13aac <close_stdout@@Base+0x1f04>
   13a60:	add	ip, sp, #32
   13a64:	ldr	r4, [pc, #68]	; 13ab0 <close_stdout@@Base+0x1f08>
   13a68:	add	lr, pc, lr
   13a6c:	ldr	r3, [sp, #28]
   13a70:	ldr	r4, [lr, r4]
   13a74:	str	ip, [sp]
   13a78:	str	ip, [sp, #8]
   13a7c:	ldr	ip, [r4]
   13a80:	str	ip, [sp, #12]
   13a84:	bl	139d4 <close_stdout@@Base+0x1e2c>
   13a88:	ldr	r2, [sp, #12]
   13a8c:	ldr	r3, [r4]
   13a90:	cmp	r2, r3
   13a94:	bne	13aa8 <close_stdout@@Base+0x1f00>
   13a98:	add	sp, sp, #20
   13a9c:	pop	{r4, lr}
   13aa0:	add	sp, sp, #4
   13aa4:	bx	lr
   13aa8:	bl	10f50 <__stack_chk_fail@plt>
   13aac:	muleq	r1, r0, r5
   13ab0:	andeq	r0, r0, ip, ror #1
   13ab4:	ldr	r1, [pc, #132]	; 13b40 <close_stdout@@Base+0x1f98>
   13ab8:	mov	r2, #5
   13abc:	push	{r4, lr}
   13ac0:	add	r1, pc, r1
   13ac4:	mov	r0, #0
   13ac8:	ldr	r4, [pc, #116]	; 13b44 <close_stdout@@Base+0x1f9c>
   13acc:	bl	10f44 <dcgettext@plt>
   13ad0:	ldr	r2, [pc, #112]	; 13b48 <close_stdout@@Base+0x1fa0>
   13ad4:	add	r4, pc, r4
   13ad8:	add	r2, pc, r2
   13adc:	mov	r1, r0
   13ae0:	mov	r0, #1
   13ae4:	bl	11094 <__printf_chk@plt>
   13ae8:	ldr	r1, [pc, #92]	; 13b4c <close_stdout@@Base+0x1fa4>
   13aec:	mov	r2, #5
   13af0:	mov	r0, #0
   13af4:	add	r1, pc, r1
   13af8:	bl	10f44 <dcgettext@plt>
   13afc:	ldr	r2, [pc, #76]	; 13b50 <close_stdout@@Base+0x1fa8>
   13b00:	ldr	r3, [pc, #76]	; 13b54 <close_stdout@@Base+0x1fac>
   13b04:	add	r2, pc, r2
   13b08:	add	r3, pc, r3
   13b0c:	mov	r1, r0
   13b10:	mov	r0, #1
   13b14:	bl	11094 <__printf_chk@plt>
   13b18:	ldr	r1, [pc, #56]	; 13b58 <close_stdout@@Base+0x1fb0>
   13b1c:	mov	r0, #0
   13b20:	mov	r2, #5
   13b24:	add	r1, pc, r1
   13b28:	bl	10f44 <dcgettext@plt>
   13b2c:	ldr	r3, [pc, #40]	; 13b5c <close_stdout@@Base+0x1fb4>
   13b30:	ldr	r3, [r4, r3]
   13b34:	pop	{r4, lr}
   13b38:	ldr	r1, [r3]
   13b3c:	b	10ecc <fputs_unlocked@plt>
   13b40:	muleq	r0, r0, r3
   13b44:	andeq	r2, r1, r4, lsr #10
   13b48:	muleq	r0, r0, r3
   13b4c:	andeq	r1, r0, ip, lsl #7
   13b50:	andeq	r0, r0, r4, ror sp
   13b54:	andeq	r0, r0, r0, lsl #27
   13b58:	andeq	r1, r0, r0, ror r3
   13b5c:	andeq	r0, r0, r8, lsl #2
   13b60:	push	{r4, lr}
   13b64:	mov	r4, r0
   13b68:	bl	10fec <malloc@plt>
   13b6c:	rsbs	r3, r0, #1
   13b70:	movcc	r3, #0
   13b74:	cmp	r4, #0
   13b78:	moveq	r3, #0
   13b7c:	cmp	r3, #0
   13b80:	popeq	{r4, pc}
   13b84:	bl	13d74 <close_stdout@@Base+0x21cc>
   13b88:	push	{r3, r4, r5, lr}
   13b8c:	mov	r4, r0
   13b90:	mvn	r0, #0
   13b94:	mov	r5, r1
   13b98:	bl	14414 <close_stdout@@Base+0x286c>
   13b9c:	cmp	r0, r4
   13ba0:	bcc	13bb0 <close_stdout@@Base+0x2008>
   13ba4:	mul	r0, r4, r5
   13ba8:	pop	{r3, r4, r5, lr}
   13bac:	b	13b60 <close_stdout@@Base+0x1fb8>
   13bb0:	bl	13d74 <close_stdout@@Base+0x21cc>
   13bb4:	b	13b60 <close_stdout@@Base+0x1fb8>
   13bb8:	rsbs	r3, r1, #1
   13bbc:	push	{r4, lr}
   13bc0:	movcc	r3, #0
   13bc4:	cmp	r0, #0
   13bc8:	mov	r4, r1
   13bcc:	moveq	r3, #0
   13bd0:	cmp	r3, #0
   13bd4:	bne	13bf8 <close_stdout@@Base+0x2050>
   13bd8:	bl	10f5c <realloc@plt>
   13bdc:	rsbs	r3, r0, #1
   13be0:	movcc	r3, #0
   13be4:	cmp	r4, #0
   13be8:	moveq	r3, #0
   13bec:	cmp	r3, #0
   13bf0:	popeq	{r4, pc}
   13bf4:	bl	13d74 <close_stdout@@Base+0x21cc>
   13bf8:	bl	10f08 <free@plt>
   13bfc:	mov	r0, #0
   13c00:	pop	{r4, pc}
   13c04:	push	{r4, r5, r6, lr}
   13c08:	mov	r5, r1
   13c0c:	mov	r6, r0
   13c10:	mov	r1, r2
   13c14:	mvn	r0, #0
   13c18:	mov	r4, r2
   13c1c:	bl	14414 <close_stdout@@Base+0x286c>
   13c20:	cmp	r0, r5
   13c24:	bcc	13c38 <close_stdout@@Base+0x2090>
   13c28:	mov	r0, r6
   13c2c:	mul	r1, r5, r4
   13c30:	pop	{r4, r5, r6, lr}
   13c34:	b	13bb8 <close_stdout@@Base+0x2010>
   13c38:	bl	13d74 <close_stdout@@Base+0x21cc>
   13c3c:	push	{r3, r4, r5, r6, r7, lr}
   13c40:	subs	r7, r0, #0
   13c44:	mov	r5, r1
   13c48:	mov	r6, r2
   13c4c:	ldr	r4, [r1]
   13c50:	beq	13c88 <close_stdout@@Base+0x20e0>
   13c54:	movw	r0, #43690	; 0xaaaa
   13c58:	mov	r1, r2
   13c5c:	bfi	r0, r0, #16, #16
   13c60:	bl	14414 <close_stdout@@Base+0x286c>
   13c64:	cmp	r4, r0
   13c68:	addcc	r3, r4, #1
   13c6c:	addcc	r4, r4, r3, lsr #1
   13c70:	bcs	13cac <close_stdout@@Base+0x2104>
   13c74:	str	r4, [r5]
   13c78:	mov	r0, r7
   13c7c:	mul	r1, r6, r4
   13c80:	pop	{r3, r4, r5, r6, r7, lr}
   13c84:	b	13bb8 <close_stdout@@Base+0x2010>
   13c88:	cmp	r4, #0
   13c8c:	bne	13c74 <close_stdout@@Base+0x20cc>
   13c90:	mov	r0, #64	; 0x40
   13c94:	mov	r1, r2
   13c98:	bl	14414 <close_stdout@@Base+0x286c>
   13c9c:	cmp	r0, #0
   13ca0:	movne	r4, r0
   13ca4:	addeq	r4, r0, #1
   13ca8:	b	13c74 <close_stdout@@Base+0x20cc>
   13cac:	bl	13d74 <close_stdout@@Base+0x21cc>
   13cb0:	cmp	r0, #0
   13cb4:	push	{r3, lr}
   13cb8:	ldr	r3, [r1]
   13cbc:	beq	13ce8 <close_stdout@@Base+0x2140>
   13cc0:	movw	r2, #43689	; 0xaaa9
   13cc4:	movt	r2, #43690	; 0xaaaa
   13cc8:	cmp	r3, r2
   13ccc:	addls	r2, r3, #1
   13cd0:	addls	r3, r3, r2, lsr #1
   13cd4:	bhi	13d00 <close_stdout@@Base+0x2158>
   13cd8:	str	r3, [r1]
   13cdc:	mov	r1, r3
   13ce0:	pop	{r3, lr}
   13ce4:	b	13bb8 <close_stdout@@Base+0x2010>
   13ce8:	cmp	r3, #0
   13cec:	moveq	r3, #64	; 0x40
   13cf0:	str	r3, [r1]
   13cf4:	mov	r1, r3
   13cf8:	pop	{r3, lr}
   13cfc:	b	13bb8 <close_stdout@@Base+0x2010>
   13d00:	bl	13d74 <close_stdout@@Base+0x21cc>
   13d04:	push	{r4, lr}
   13d08:	mov	r4, r0
   13d0c:	bl	13b60 <close_stdout@@Base+0x1fb8>
   13d10:	mov	r2, r4
   13d14:	mov	r1, #0
   13d18:	pop	{r4, lr}
   13d1c:	b	1107c <memset@plt>
   13d20:	push	{r3, lr}
   13d24:	bl	10ec0 <calloc@plt>
   13d28:	cmp	r0, #0
   13d2c:	popne	{r3, pc}
   13d30:	bl	13d74 <close_stdout@@Base+0x21cc>
   13d34:	push	{r3, r4, r5, lr}
   13d38:	mov	r4, r1
   13d3c:	mov	r5, r0
   13d40:	mov	r0, r1
   13d44:	bl	13b60 <close_stdout@@Base+0x1fb8>
   13d48:	mov	r1, r5
   13d4c:	mov	r2, r4
   13d50:	pop	{r3, r4, r5, lr}
   13d54:	b	10f20 <memcpy@plt>
   13d58:	push	{r4, lr}
   13d5c:	mov	r4, r0
   13d60:	bl	11040 <strlen@plt>
   13d64:	add	r1, r0, #1
   13d68:	mov	r0, r4
   13d6c:	pop	{r4, lr}
   13d70:	b	13d34 <close_stdout@@Base+0x218c>
   13d74:	ldr	r3, [pc, #64]	; 13dbc <close_stdout@@Base+0x2214>
   13d78:	mov	r2, #5
   13d7c:	ldr	ip, [pc, #60]	; 13dc0 <close_stdout@@Base+0x2218>
   13d80:	mov	r0, #0
   13d84:	add	r3, pc, r3
   13d88:	ldr	r1, [pc, #52]	; 13dc4 <close_stdout@@Base+0x221c>
   13d8c:	push	{r4, lr}
   13d90:	add	r1, pc, r1
   13d94:	ldr	r3, [r3, ip]
   13d98:	ldr	r4, [r3]
   13d9c:	bl	10f44 <dcgettext@plt>
   13da0:	ldr	r2, [pc, #32]	; 13dc8 <close_stdout@@Base+0x2220>
   13da4:	mov	r1, #0
   13da8:	add	r2, pc, r2
   13dac:	mov	r3, r0
   13db0:	mov	r0, r4
   13db4:	bl	10fc8 <error@plt>
   13db8:	bl	11118 <abort@plt>
   13dbc:	andeq	r2, r1, r4, ror r2
   13dc0:	andeq	r0, r0, ip, lsl #2
   13dc4:	andeq	r1, r0, r4, ror r1
   13dc8:	andeq	r0, r0, r0, lsl #27
   13dcc:	push	{r4, r5, r6, lr}
   13dd0:	mov	r4, r0
   13dd4:	bl	10fb0 <__fpending@plt>
   13dd8:	mov	r6, r0
   13ddc:	mov	r0, r4
   13de0:	ldr	r4, [r4]
   13de4:	bl	1426c <close_stdout@@Base+0x26c4>
   13de8:	and	r4, r4, #32
   13dec:	adds	r5, r0, #0
   13df0:	movne	r5, #1
   13df4:	cmp	r4, #0
   13df8:	bne	13e18 <close_stdout@@Base+0x2270>
   13dfc:	cmp	r5, #0
   13e00:	beq	13e10 <close_stdout@@Base+0x2268>
   13e04:	cmp	r6, #0
   13e08:	beq	13e34 <close_stdout@@Base+0x228c>
   13e0c:	mvn	r4, #0
   13e10:	mov	r0, r4
   13e14:	pop	{r4, r5, r6, pc}
   13e18:	cmp	r5, #0
   13e1c:	bne	13e0c <close_stdout@@Base+0x2264>
   13e20:	bl	11064 <__errno_location@plt>
   13e24:	mvn	r4, #0
   13e28:	str	r5, [r0]
   13e2c:	mov	r0, r4
   13e30:	pop	{r4, r5, r6, pc}
   13e34:	bl	11064 <__errno_location@plt>
   13e38:	ldr	r4, [r0]
   13e3c:	subs	r4, r4, #9
   13e40:	mvnne	r4, #0
   13e44:	mov	r0, r4
   13e48:	pop	{r4, r5, r6, pc}
   13e4c:	ldr	r3, [pc, #984]	; 1422c <close_stdout@@Base+0x2684>
   13e50:	mov	r0, #14
   13e54:	ldr	r2, [pc, #980]	; 14230 <close_stdout@@Base+0x2688>
   13e58:	add	r3, pc, r3
   13e5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e60:	sub	sp, sp, #132	; 0x84
   13e64:	ldr	r6, [r3, r2]
   13e68:	ldr	r3, [r6]
   13e6c:	str	r3, [sp, #124]	; 0x7c
   13e70:	bl	110f4 <nl_langinfo@plt>
   13e74:	subs	r5, r0, #0
   13e78:	beq	13f2c <close_stdout@@Base+0x2384>
   13e7c:	ldr	r3, [pc, #944]	; 14234 <close_stdout@@Base+0x268c>
   13e80:	ldr	r4, [pc, r3]
   13e84:	cmp	r4, #0
   13e88:	beq	13f38 <close_stdout@@Base+0x2390>
   13e8c:	ldrb	r7, [r4]
   13e90:	cmp	r7, #0
   13e94:	bne	13ec8 <close_stdout@@Base+0x2320>
   13e98:	b	13f00 <close_stdout@@Base+0x2358>
   13e9c:	mov	r0, r4
   13ea0:	bl	11040 <strlen@plt>
   13ea4:	add	r0, r0, #1
   13ea8:	add	r7, r4, r0
   13eac:	mov	r0, r7
   13eb0:	bl	11040 <strlen@plt>
   13eb4:	add	r0, r0, #1
   13eb8:	add	r4, r7, r0
   13ebc:	ldrb	r7, [r7, r0]
   13ec0:	cmp	r7, #0
   13ec4:	beq	13f00 <close_stdout@@Base+0x2358>
   13ec8:	mov	r0, r5
   13ecc:	mov	r1, r4
   13ed0:	bl	10ee4 <strcmp@plt>
   13ed4:	cmp	r0, #0
   13ed8:	beq	13ef0 <close_stdout@@Base+0x2348>
   13edc:	cmp	r7, #42	; 0x2a
   13ee0:	bne	13e9c <close_stdout@@Base+0x22f4>
   13ee4:	ldrb	r3, [r4, #1]
   13ee8:	cmp	r3, #0
   13eec:	bne	13e9c <close_stdout@@Base+0x22f4>
   13ef0:	mov	r0, r4
   13ef4:	bl	11040 <strlen@plt>
   13ef8:	add	r0, r0, #1
   13efc:	add	r5, r4, r0
   13f00:	ldrb	r3, [r5]
   13f04:	cmp	r3, #0
   13f08:	ldreq	r5, [pc, #808]	; 14238 <close_stdout@@Base+0x2690>
   13f0c:	addeq	r5, pc, r5
   13f10:	ldr	r2, [sp, #124]	; 0x7c
   13f14:	mov	r0, r5
   13f18:	ldr	r3, [r6]
   13f1c:	cmp	r2, r3
   13f20:	bne	14200 <close_stdout@@Base+0x2658>
   13f24:	add	sp, sp, #132	; 0x84
   13f28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f2c:	ldr	r5, [pc, #776]	; 1423c <close_stdout@@Base+0x2694>
   13f30:	add	r5, pc, r5
   13f34:	b	13e7c <close_stdout@@Base+0x22d4>
   13f38:	ldr	r0, [pc, #768]	; 14240 <close_stdout@@Base+0x2698>
   13f3c:	add	r0, pc, r0
   13f40:	bl	10fe0 <getenv@plt>
   13f44:	subs	r8, r0, #0
   13f48:	beq	141d8 <close_stdout@@Base+0x2630>
   13f4c:	ldrb	r3, [r8]
   13f50:	cmp	r3, #0
   13f54:	beq	1416c <close_stdout@@Base+0x25c4>
   13f58:	bl	11040 <strlen@plt>
   13f5c:	subs	sl, r0, #0
   13f60:	subne	r3, sl, #1
   13f64:	bne	1417c <close_stdout@@Base+0x25d4>
   13f68:	mov	r9, #0
   13f6c:	mov	fp, r9
   13f70:	add	r9, sl, r9
   13f74:	add	r0, r9, #14
   13f78:	bl	10fec <malloc@plt>
   13f7c:	subs	r7, r0, #0
   13f80:	beq	141cc <close_stdout@@Base+0x2624>
   13f84:	mov	r1, r8
   13f88:	mov	r2, sl
   13f8c:	bl	10f20 <memcpy@plt>
   13f90:	cmp	fp, #0
   13f94:	add	ip, r7, r9
   13f98:	movne	r3, #47	; 0x2f
   13f9c:	strbne	r3, [r7, sl]
   13fa0:	ldr	r3, [pc, #668]	; 14244 <close_stdout@@Base+0x269c>
   13fa4:	add	r3, pc, r3
   13fa8:	ldm	r3!, {r0, r1, r2}
   13fac:	ldrh	r3, [r3]
   13fb0:	str	r0, [r7, r9]
   13fb4:	mov	r0, r7
   13fb8:	str	r1, [ip, #4]
   13fbc:	mov	r1, #32768	; 0x8000
   13fc0:	strh	r3, [ip, #12]
   13fc4:	str	r2, [ip, #8]
   13fc8:	bl	10fd4 <open64@plt>
   13fcc:	subs	r8, r0, #0
   13fd0:	blt	14194 <close_stdout@@Base+0x25ec>
   13fd4:	ldr	r1, [pc, #620]	; 14248 <close_stdout@@Base+0x26a0>
   13fd8:	add	r1, pc, r1
   13fdc:	bl	10eb4 <fdopen@plt>
   13fe0:	subs	fp, r0, #0
   13fe4:	beq	141ec <close_stdout@@Base+0x2644>
   13fe8:	ldr	r0, [pc, #604]	; 1424c <close_stdout@@Base+0x26a4>
   13fec:	add	sl, sp, #20
   13ff0:	add	r9, sp, #72	; 0x48
   13ff4:	mov	r8, #0
   13ff8:	add	r0, pc, r0
   13ffc:	str	r0, [sp, #12]
   14000:	ldr	r3, [fp, #4]
   14004:	ldr	r2, [fp, #8]
   14008:	cmp	r3, r2
   1400c:	bcs	140f8 <close_stdout@@Base+0x2550>
   14010:	add	r2, r3, #1
   14014:	str	r2, [fp, #4]
   14018:	ldrb	r0, [r3]
   1401c:	cmp	r0, #32
   14020:	beq	14000 <close_stdout@@Base+0x2458>
   14024:	sub	r3, r0, #9
   14028:	cmp	r3, #1
   1402c:	bls	14000 <close_stdout@@Base+0x2458>
   14030:	cmp	r0, #35	; 0x23
   14034:	beq	1410c <close_stdout@@Base+0x2564>
   14038:	mov	r1, fp
   1403c:	bl	11058 <ungetc@plt>
   14040:	mov	r0, fp
   14044:	ldr	r1, [sp, #12]
   14048:	mov	r2, sl
   1404c:	mov	r3, r9
   14050:	bl	11088 <fscanf@plt>
   14054:	cmp	r0, #1
   14058:	ble	1413c <close_stdout@@Base+0x2594>
   1405c:	mov	r0, sl
   14060:	bl	11040 <strlen@plt>
   14064:	str	r0, [sp, #8]
   14068:	mov	r0, r9
   1406c:	bl	11040 <strlen@plt>
   14070:	cmp	r8, #0
   14074:	mov	r2, r0
   14078:	bne	141a0 <close_stdout@@Base+0x25f8>
   1407c:	ldr	r3, [sp, #8]
   14080:	str	r2, [sp]
   14084:	add	r8, r0, r3
   14088:	add	r0, r8, #3
   1408c:	add	r8, r8, #2
   14090:	bl	10fec <malloc@plt>
   14094:	ldr	r2, [sp]
   14098:	mov	r3, r0
   1409c:	cmp	r3, #0
   140a0:	beq	14204 <close_stdout@@Base+0x265c>
   140a4:	ldr	r0, [sp, #8]
   140a8:	movw	r1, #65534	; 0xfffe
   140ac:	movt	r1, #65535	; 0xffff
   140b0:	rsb	r2, r2, r8
   140b4:	rsb	r1, r0, r1
   140b8:	stm	sp, {r2, r3}
   140bc:	add	r0, r1, r2
   140c0:	mov	r1, sl
   140c4:	add	r0, r3, r0
   140c8:	mov	r4, r3
   140cc:	bl	10fa4 <strcpy@plt>
   140d0:	ldr	r2, [sp]
   140d4:	ldr	r3, [sp, #4]
   140d8:	mov	r1, r9
   140dc:	sub	r0, r2, #1
   140e0:	add	r0, r3, r0
   140e4:	bl	10fa4 <strcpy@plt>
   140e8:	ldr	r3, [fp, #4]
   140ec:	ldr	r2, [fp, #8]
   140f0:	cmp	r3, r2
   140f4:	bcc	14010 <close_stdout@@Base+0x2468>
   140f8:	mov	r0, fp
   140fc:	bl	110d0 <__uflow@plt>
   14100:	cmn	r0, #1
   14104:	beq	1413c <close_stdout@@Base+0x2594>
   14108:	b	1401c <close_stdout@@Base+0x2474>
   1410c:	ldr	r3, [fp, #4]
   14110:	ldr	r2, [fp, #8]
   14114:	cmp	r3, r2
   14118:	bcs	14220 <close_stdout@@Base+0x2678>
   1411c:	add	r2, r3, #1
   14120:	str	r2, [fp, #4]
   14124:	ldrb	r0, [r3]
   14128:	cmp	r0, #10
   1412c:	cmnne	r0, #1
   14130:	bne	1410c <close_stdout@@Base+0x2564>
   14134:	cmn	r0, #1
   14138:	bne	14000 <close_stdout@@Base+0x2458>
   1413c:	mov	r0, fp
   14140:	bl	1426c <close_stdout@@Base+0x26c4>
   14144:	cmp	r8, #0
   14148:	beq	14194 <close_stdout@@Base+0x25ec>
   1414c:	mov	r3, #0
   14150:	strb	r3, [r4, r8]
   14154:	mov	r0, r7
   14158:	bl	10f08 <free@plt>
   1415c:	ldr	r3, [pc, #236]	; 14250 <close_stdout@@Base+0x26a8>
   14160:	add	r3, pc, r3
   14164:	str	r4, [r3]
   14168:	b	13e8c <close_stdout@@Base+0x22e4>
   1416c:	ldr	r8, [pc, #224]	; 14254 <close_stdout@@Base+0x26ac>
   14170:	mov	r3, #7
   14174:	mov	sl, #8
   14178:	add	r8, pc, r8
   1417c:	ldrb	r3, [r8, r3]
   14180:	cmp	r3, #47	; 0x2f
   14184:	movne	r9, #1
   14188:	movne	fp, r9
   1418c:	bne	13f70 <close_stdout@@Base+0x23c8>
   14190:	b	13f68 <close_stdout@@Base+0x23c0>
   14194:	ldr	r4, [pc, #188]	; 14258 <close_stdout@@Base+0x26b0>
   14198:	add	r4, pc, r4
   1419c:	b	14154 <close_stdout@@Base+0x25ac>
   141a0:	ldr	r0, [sp, #8]
   141a4:	str	r2, [sp]
   141a8:	add	r3, r0, r2
   141ac:	mov	r0, r4
   141b0:	add	r8, r3, r8
   141b4:	add	r1, r8, #3
   141b8:	add	r8, r8, #2
   141bc:	bl	10f5c <realloc@plt>
   141c0:	ldr	r2, [sp]
   141c4:	mov	r3, r0
   141c8:	b	1409c <close_stdout@@Base+0x24f4>
   141cc:	ldr	r4, [pc, #136]	; 1425c <close_stdout@@Base+0x26b4>
   141d0:	add	r4, pc, r4
   141d4:	b	1415c <close_stdout@@Base+0x25b4>
   141d8:	ldr	r8, [pc, #128]	; 14260 <close_stdout@@Base+0x26b8>
   141dc:	mov	r3, #7
   141e0:	mov	sl, #8
   141e4:	add	r8, pc, r8
   141e8:	b	1417c <close_stdout@@Base+0x25d4>
   141ec:	ldr	r4, [pc, #112]	; 14264 <close_stdout@@Base+0x26bc>
   141f0:	mov	r0, r8
   141f4:	add	r4, pc, r4
   141f8:	bl	11124 <close@plt>
   141fc:	b	14154 <close_stdout@@Base+0x25ac>
   14200:	bl	10f50 <__stack_chk_fail@plt>
   14204:	mov	r0, r4
   14208:	ldr	r4, [pc, #88]	; 14268 <close_stdout@@Base+0x26c0>
   1420c:	bl	10f08 <free@plt>
   14210:	mov	r0, fp
   14214:	add	r4, pc, r4
   14218:	bl	1426c <close_stdout@@Base+0x26c4>
   1421c:	b	14154 <close_stdout@@Base+0x25ac>
   14220:	mov	r0, fp
   14224:	bl	110d0 <__uflow@plt>
   14228:	b	14128 <close_stdout@@Base+0x2580>
   1422c:	andeq	r2, r1, r0, lsr #3
   14230:	andeq	r0, r0, ip, ror #1
   14234:	andeq	r2, r1, r4, lsr #8
   14238:	andeq	r1, r0, r8, lsl r0
   1423c:	andeq	r0, r0, ip, lsl #20
   14240:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   14244:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   14248:	andeq	r0, r0, r4, ror pc
   1424c:	andeq	r0, r0, r8, asr pc
   14250:	andeq	r2, r1, r4, asr #2
   14254:	andeq	r0, r0, r0, lsr #27
   14258:	andeq	r0, r0, r4, lsr #15
   1425c:	andeq	r0, r0, ip, ror #14
   14260:	andeq	r0, r0, r4, lsr sp
   14264:	andeq	r0, r0, r8, asr #14
   14268:	andeq	r0, r0, r8, lsr #14
   1426c:	push	{r4, r5, r6, lr}
   14270:	sub	sp, sp, #8
   14274:	mov	r4, r0
   14278:	bl	110a0 <fileno@plt>
   1427c:	cmp	r0, #0
   14280:	mov	r0, r4
   14284:	blt	14300 <close_stdout@@Base+0x2758>
   14288:	bl	11004 <__freading@plt>
   1428c:	cmp	r0, #0
   14290:	bne	142cc <close_stdout@@Base+0x2724>
   14294:	mov	r0, r4
   14298:	bl	1430c <close_stdout@@Base+0x2764>
   1429c:	cmp	r0, #0
   142a0:	beq	142fc <close_stdout@@Base+0x2754>
   142a4:	bl	11064 <__errno_location@plt>
   142a8:	ldr	r6, [r0]
   142ac:	mov	r5, r0
   142b0:	mov	r0, r4
   142b4:	bl	110b8 <fclose@plt>
   142b8:	cmp	r6, #0
   142bc:	mvnne	r0, #0
   142c0:	strne	r6, [r5]
   142c4:	add	sp, sp, #8
   142c8:	pop	{r4, r5, r6, pc}
   142cc:	mov	r0, r4
   142d0:	bl	110a0 <fileno@plt>
   142d4:	mov	r1, #1
   142d8:	mov	r2, #0
   142dc:	mov	r3, #0
   142e0:	str	r1, [sp]
   142e4:	bl	10f8c <lseek64@plt>
   142e8:	mvn	r2, #0
   142ec:	mvn	r3, #0
   142f0:	cmp	r1, r3
   142f4:	cmpeq	r0, r2
   142f8:	bne	14294 <close_stdout@@Base+0x26ec>
   142fc:	mov	r0, r4
   14300:	add	sp, sp, #8
   14304:	pop	{r4, r5, r6, lr}
   14308:	b	110b8 <fclose@plt>
   1430c:	push	{r4, lr}
   14310:	subs	r4, r0, #0
   14314:	sub	sp, sp, #8
   14318:	beq	14328 <close_stdout@@Base+0x2780>
   1431c:	bl	11004 <__freading@plt>
   14320:	cmp	r0, #0
   14324:	bne	14338 <close_stdout@@Base+0x2790>
   14328:	mov	r0, r4
   1432c:	add	sp, sp, #8
   14330:	pop	{r4, lr}
   14334:	b	10efc <fflush@plt>
   14338:	ldr	r3, [r4]
   1433c:	tst	r3, #256	; 0x100
   14340:	beq	14328 <close_stdout@@Base+0x2780>
   14344:	mov	r3, #1
   14348:	mov	r0, r4
   1434c:	str	r3, [sp]
   14350:	mov	r2, #0
   14354:	mov	r3, #0
   14358:	bl	1436c <close_stdout@@Base+0x27c4>
   1435c:	mov	r0, r4
   14360:	add	sp, sp, #8
   14364:	pop	{r4, lr}
   14368:	b	10efc <fflush@plt>
   1436c:	push	{r4, r5, r6, r7, lr}
   14370:	sub	sp, sp, #20
   14374:	ldmib	r0, {r1, ip}
   14378:	mov	r6, r0
   1437c:	ldr	r4, [sp, #40]	; 0x28
   14380:	cmp	ip, r1
   14384:	beq	1439c <close_stdout@@Base+0x27f4>
   14388:	str	r4, [sp, #40]	; 0x28
   1438c:	mov	r0, r6
   14390:	add	sp, sp, #20
   14394:	pop	{r4, r5, r6, r7, lr}
   14398:	b	110c4 <fseeko64@plt>
   1439c:	ldr	ip, [r0, #20]
   143a0:	ldr	r1, [r0, #16]
   143a4:	cmp	ip, r1
   143a8:	bne	14388 <close_stdout@@Base+0x27e0>
   143ac:	ldr	r7, [r0, #36]	; 0x24
   143b0:	cmp	r7, #0
   143b4:	bne	14388 <close_stdout@@Base+0x27e0>
   143b8:	str	r2, [sp, #12]
   143bc:	mvn	r5, #0
   143c0:	str	r3, [sp, #8]
   143c4:	bl	110a0 <fileno@plt>
   143c8:	str	r4, [sp]
   143cc:	mvn	r4, #0
   143d0:	ldr	r2, [sp, #12]
   143d4:	ldr	r3, [sp, #8]
   143d8:	bl	10f8c <lseek64@plt>
   143dc:	mov	r2, r0
   143e0:	mov	r3, r1
   143e4:	cmp	r3, r5
   143e8:	cmpeq	r2, r4
   143ec:	beq	1440c <close_stdout@@Base+0x2864>
   143f0:	ldr	r1, [r6]
   143f4:	mov	r0, r7
   143f8:	strd	r2, [r6, #80]	; 0x50
   143fc:	bic	r3, r1, #16
   14400:	str	r3, [r6]
   14404:	add	sp, sp, #20
   14408:	pop	{r4, r5, r6, r7, pc}
   1440c:	mvn	r0, #0
   14410:	b	14404 <close_stdout@@Base+0x285c>
   14414:	subs	r2, r1, #1
   14418:	bxeq	lr
   1441c:	bcc	145f4 <close_stdout@@Base+0x2a4c>
   14420:	cmp	r0, r1
   14424:	bls	145d8 <close_stdout@@Base+0x2a30>
   14428:	tst	r1, r2
   1442c:	beq	145e4 <close_stdout@@Base+0x2a3c>
   14430:	clz	r3, r0
   14434:	clz	r2, r1
   14438:	sub	r3, r2, r3
   1443c:	rsbs	r3, r3, #31
   14440:	addne	r3, r3, r3, lsl #1
   14444:	mov	r2, #0
   14448:	addne	pc, pc, r3, lsl #2
   1444c:	nop	{0}
   14450:	cmp	r0, r1, lsl #31
   14454:	adc	r2, r2, r2
   14458:	subcs	r0, r0, r1, lsl #31
   1445c:	cmp	r0, r1, lsl #30
   14460:	adc	r2, r2, r2
   14464:	subcs	r0, r0, r1, lsl #30
   14468:	cmp	r0, r1, lsl #29
   1446c:	adc	r2, r2, r2
   14470:	subcs	r0, r0, r1, lsl #29
   14474:	cmp	r0, r1, lsl #28
   14478:	adc	r2, r2, r2
   1447c:	subcs	r0, r0, r1, lsl #28
   14480:	cmp	r0, r1, lsl #27
   14484:	adc	r2, r2, r2
   14488:	subcs	r0, r0, r1, lsl #27
   1448c:	cmp	r0, r1, lsl #26
   14490:	adc	r2, r2, r2
   14494:	subcs	r0, r0, r1, lsl #26
   14498:	cmp	r0, r1, lsl #25
   1449c:	adc	r2, r2, r2
   144a0:	subcs	r0, r0, r1, lsl #25
   144a4:	cmp	r0, r1, lsl #24
   144a8:	adc	r2, r2, r2
   144ac:	subcs	r0, r0, r1, lsl #24
   144b0:	cmp	r0, r1, lsl #23
   144b4:	adc	r2, r2, r2
   144b8:	subcs	r0, r0, r1, lsl #23
   144bc:	cmp	r0, r1, lsl #22
   144c0:	adc	r2, r2, r2
   144c4:	subcs	r0, r0, r1, lsl #22
   144c8:	cmp	r0, r1, lsl #21
   144cc:	adc	r2, r2, r2
   144d0:	subcs	r0, r0, r1, lsl #21
   144d4:	cmp	r0, r1, lsl #20
   144d8:	adc	r2, r2, r2
   144dc:	subcs	r0, r0, r1, lsl #20
   144e0:	cmp	r0, r1, lsl #19
   144e4:	adc	r2, r2, r2
   144e8:	subcs	r0, r0, r1, lsl #19
   144ec:	cmp	r0, r1, lsl #18
   144f0:	adc	r2, r2, r2
   144f4:	subcs	r0, r0, r1, lsl #18
   144f8:	cmp	r0, r1, lsl #17
   144fc:	adc	r2, r2, r2
   14500:	subcs	r0, r0, r1, lsl #17
   14504:	cmp	r0, r1, lsl #16
   14508:	adc	r2, r2, r2
   1450c:	subcs	r0, r0, r1, lsl #16
   14510:	cmp	r0, r1, lsl #15
   14514:	adc	r2, r2, r2
   14518:	subcs	r0, r0, r1, lsl #15
   1451c:	cmp	r0, r1, lsl #14
   14520:	adc	r2, r2, r2
   14524:	subcs	r0, r0, r1, lsl #14
   14528:	cmp	r0, r1, lsl #13
   1452c:	adc	r2, r2, r2
   14530:	subcs	r0, r0, r1, lsl #13
   14534:	cmp	r0, r1, lsl #12
   14538:	adc	r2, r2, r2
   1453c:	subcs	r0, r0, r1, lsl #12
   14540:	cmp	r0, r1, lsl #11
   14544:	adc	r2, r2, r2
   14548:	subcs	r0, r0, r1, lsl #11
   1454c:	cmp	r0, r1, lsl #10
   14550:	adc	r2, r2, r2
   14554:	subcs	r0, r0, r1, lsl #10
   14558:	cmp	r0, r1, lsl #9
   1455c:	adc	r2, r2, r2
   14560:	subcs	r0, r0, r1, lsl #9
   14564:	cmp	r0, r1, lsl #8
   14568:	adc	r2, r2, r2
   1456c:	subcs	r0, r0, r1, lsl #8
   14570:	cmp	r0, r1, lsl #7
   14574:	adc	r2, r2, r2
   14578:	subcs	r0, r0, r1, lsl #7
   1457c:	cmp	r0, r1, lsl #6
   14580:	adc	r2, r2, r2
   14584:	subcs	r0, r0, r1, lsl #6
   14588:	cmp	r0, r1, lsl #5
   1458c:	adc	r2, r2, r2
   14590:	subcs	r0, r0, r1, lsl #5
   14594:	cmp	r0, r1, lsl #4
   14598:	adc	r2, r2, r2
   1459c:	subcs	r0, r0, r1, lsl #4
   145a0:	cmp	r0, r1, lsl #3
   145a4:	adc	r2, r2, r2
   145a8:	subcs	r0, r0, r1, lsl #3
   145ac:	cmp	r0, r1, lsl #2
   145b0:	adc	r2, r2, r2
   145b4:	subcs	r0, r0, r1, lsl #2
   145b8:	cmp	r0, r1, lsl #1
   145bc:	adc	r2, r2, r2
   145c0:	subcs	r0, r0, r1, lsl #1
   145c4:	cmp	r0, r1
   145c8:	adc	r2, r2, r2
   145cc:	subcs	r0, r0, r1
   145d0:	mov	r0, r2
   145d4:	bx	lr
   145d8:	moveq	r0, #1
   145dc:	movne	r0, #0
   145e0:	bx	lr
   145e4:	clz	r2, r1
   145e8:	rsb	r2, r2, #31
   145ec:	lsr	r0, r0, r2
   145f0:	bx	lr
   145f4:	cmp	r0, #0
   145f8:	mvnne	r0, #0
   145fc:	b	14620 <close_stdout@@Base+0x2a78>
   14600:	cmp	r1, #0
   14604:	beq	145f4 <close_stdout@@Base+0x2a4c>
   14608:	push	{r0, r1, lr}
   1460c:	bl	14414 <close_stdout@@Base+0x286c>
   14610:	pop	{r1, r2, lr}
   14614:	mul	r3, r2, r0
   14618:	sub	r1, r1, r3
   1461c:	bx	lr
   14620:	push	{r1, lr}
   14624:	mov	r0, #8
   14628:	bl	10ed8 <raise@plt>
   1462c:	pop	{r1, pc}
   14630:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14634:	mov	r7, r0
   14638:	ldr	r6, [pc, #76]	; 1468c <close_stdout@@Base+0x2ae4>
   1463c:	mov	r8, r1
   14640:	ldr	r5, [pc, #72]	; 14690 <close_stdout@@Base+0x2ae8>
   14644:	mov	r9, r2
   14648:	add	r6, pc, r6
   1464c:	bl	10e94 <fdopen@plt-0x20>
   14650:	add	r5, pc, r5
   14654:	rsb	r6, r5, r6
   14658:	asrs	r6, r6, #2
   1465c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14660:	sub	r5, r5, #4
   14664:	mov	r4, #0
   14668:	add	r4, r4, #1
   1466c:	ldr	r3, [r5, #4]!
   14670:	mov	r0, r7
   14674:	mov	r1, r8
   14678:	mov	r2, r9
   1467c:	blx	r3
   14680:	cmp	r4, r6
   14684:	bne	14668 <close_stdout@@Base+0x2ac0>
   14688:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1468c:	andeq	r1, r1, ip, asr #16
   14690:	andeq	r1, r1, r0, asr #16
   14694:	bx	lr
   14698:	ldr	r3, [pc, #28]	; 146bc <close_stdout@@Base+0x2b14>
   1469c:	mov	r1, #0
   146a0:	ldr	r2, [pc, #24]	; 146c0 <close_stdout@@Base+0x2b18>
   146a4:	add	r3, pc, r3
   146a8:	ldr	r3, [r3, r2]
   146ac:	cmp	r3, #0
   146b0:	ldrne	r2, [r3]
   146b4:	moveq	r2, r3
   146b8:	b	11070 <__cxa_atexit@plt>
   146bc:	andeq	r1, r1, r4, asr r9
   146c0:	andeq	r0, r0, r4, lsl #2

Disassembly of section .fini:

000146c4 <.fini>:
   146c4:	push	{r3, lr}
   146c8:	pop	{r3, pc}
