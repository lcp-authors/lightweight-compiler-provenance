
centos-preinstalled/abrt-merge-pstoreoops:     file format elf32-littlearm


Disassembly of section .init:

000009c4 <_init@@Base>:
 9c4:	push	{r3, lr}
 9c8:	bl	e28 <main@@Base+0x318>
 9cc:	pop	{r3, pc}

Disassembly of section .plt:

000009d0 <qsort@plt-0x14>:
 9d0:	push	{lr}		; (str lr, [sp, #-4]!)
 9d4:	ldr	lr, [pc, #4]	; 9e0 <_init@@Base+0x1c>
 9d8:	add	lr, pc, lr
 9dc:	ldr	pc, [lr, #8]!
 9e0:	andeq	r1, r1, r4, lsl #11

000009e4 <qsort@plt>:
 9e4:	add	ip, pc, #0, 12
 9e8:	add	ip, ip, #69632	; 0x11000
 9ec:	ldr	pc, [ip, #1412]!	; 0x584

000009f0 <libreport_parse_opts@plt>:
 9f0:	add	ip, pc, #0, 12
 9f4:	add	ip, ip, #69632	; 0x11000
 9f8:	ldr	pc, [ip, #1404]!	; 0x57c

000009fc <libreport_export_abrt_envvars@plt>:
 9fc:	add	ip, pc, #0, 12
 a00:	add	ip, ip, #69632	; 0x11000
 a04:	ldr	pc, [ip, #1396]!	; 0x574

00000a08 <textdomain@plt>:
 a08:	add	ip, pc, #0, 12
 a0c:	add	ip, ip, #69632	; 0x11000
 a10:	ldr	pc, [ip, #1388]!	; 0x56c

00000a14 <memset@plt>:
 a14:	add	ip, pc, #0, 12
 a18:	add	ip, ip, #69632	; 0x11000
 a1c:	ldr	pc, [ip, #1380]!	; 0x564

00000a20 <abort@plt>:
 a20:	add	ip, pc, #0, 12
 a24:	add	ip, ip, #69632	; 0x11000
 a28:	ldr	pc, [ip, #1372]!	; 0x55c

00000a2c <unlink@plt>:
 a2c:	add	ip, pc, #0, 12
 a30:	add	ip, ip, #69632	; 0x11000
 a34:	ldr	pc, [ip, #1364]!	; 0x554

00000a38 <libreport_xzalloc@plt>:
 a38:	add	ip, pc, #0, 12
 a3c:	add	ip, ip, #69632	; 0x11000
 a40:	ldr	pc, [ip, #1356]!	; 0x54c

00000a44 <fread@plt>:
 a44:	add	ip, pc, #0, 12
 a48:	add	ip, ip, #69632	; 0x11000
 a4c:	ldr	pc, [ip, #1348]!	; 0x544

00000a50 <__stack_chk_fail@plt>:
 a50:	add	ip, pc, #0, 12
 a54:	add	ip, ip, #69632	; 0x11000
 a58:	ldr	pc, [ip, #1340]!	; 0x53c

00000a5c <dcgettext@plt>:
 a5c:	add	ip, pc, #0, 12
 a60:	add	ip, ip, #69632	; 0x11000
 a64:	ldr	pc, [ip, #1332]!	; 0x534

00000a68 <log_wrapper@plt>:
 a68:	add	ip, pc, #0, 12
 a6c:	add	ip, ip, #69632	; 0x11000
 a70:	ldr	pc, [ip, #1324]!	; 0x52c

00000a74 <bindtextdomain@plt>:
 a74:	add	ip, pc, #0, 12
 a78:	add	ip, ip, #69632	; 0x11000
 a7c:	ldr	pc, [ip, #1316]!	; 0x524

00000a80 <setlocale@plt>:
 a80:	add	ip, pc, #0, 12
 a84:	add	ip, ip, #69632	; 0x11000
 a88:	ldr	pc, [ip, #1308]!	; 0x51c

00000a8c <fgets@plt>:
 a8c:	add	ip, pc, #0, 12
 a90:	add	ip, ip, #69632	; 0x11000
 a94:	ldr	pc, [ip, #1300]!	; 0x514

00000a98 <fclose@plt>:
 a98:	add	ip, pc, #0, 12
 a9c:	add	ip, ip, #69632	; 0x11000
 aa0:	ldr	pc, [ip, #1292]!	; 0x50c

00000aa4 <abrt_init@plt>:
 aa4:	add	ip, pc, #0, 12
 aa8:	add	ip, ip, #69632	; 0x11000
 aac:	ldr	pc, [ip, #1284]!	; 0x504

00000ab0 <sscanf@plt>:
 ab0:	add	ip, pc, #0, 12
 ab4:	add	ip, ip, #69632	; 0x11000
 ab8:	ldr	pc, [ip, #1276]!	; 0x4fc

00000abc <fopen64@plt>:
 abc:	add	ip, pc, #0, 12
 ac0:	add	ip, ip, #69632	; 0x11000
 ac4:	ldr	pc, [ip, #1268]!	; 0x4f4

00000ac8 <libreport_xrealloc@plt>:
 ac8:	add	ip, pc, #0, 12
 acc:	add	ip, ip, #69632	; 0x11000
 ad0:	ldr	pc, [ip, #1260]!	; 0x4ec

00000ad4 <fputs@plt>:
 ad4:	add	ip, pc, #0, 12
 ad8:	add	ip, ip, #69632	; 0x11000
 adc:	ldr	pc, [ip, #1252]!	; 0x4e4

00000ae0 <__libc_start_main@plt>:
 ae0:	add	ip, pc, #0, 12
 ae4:	add	ip, ip, #69632	; 0x11000
 ae8:	ldr	pc, [ip, #1244]!	; 0x4dc

00000aec <__gmon_start__@plt>:
 aec:	add	ip, pc, #0, 12
 af0:	add	ip, ip, #69632	; 0x11000
 af4:	ldr	pc, [ip, #1236]!	; 0x4d4

00000af8 <__cxa_finalize@plt>:
 af8:	add	ip, pc, #0, 12
 afc:	add	ip, ip, #69632	; 0x11000
 b00:	ldr	pc, [ip, #1228]!	; 0x4cc

00000b04 <__strndup@plt>:
 b04:	add	ip, pc, #0, 12
 b08:	add	ip, ip, #69632	; 0x11000
 b0c:	ldr	pc, [ip, #1220]!	; 0x4c4

Disassembly of section .text:

00000b10 <main@@Base>:
     b10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
     b14:	mov	r6, r1
     b18:	ldr	r8, [pc, #624]	; d90 <main@@Base+0x280>
     b1c:	sub	sp, sp, #124	; 0x7c
     b20:	ldr	r3, [pc, #620]	; d94 <main@@Base+0x284>
     b24:	mov	r7, r0
     b28:	add	r8, pc, r8
     b2c:	ldr	r1, [pc, #612]	; d98 <main@@Base+0x288>
     b30:	ldr	r4, [pc, #612]	; d9c <main@@Base+0x28c>
     b34:	mov	r0, #6
     b38:	ldr	r9, [r8, r3]
     b3c:	add	r1, pc, r1
     b40:	add	r4, pc, r4
     b44:	add	r5, sp, #20
     b48:	ldr	r3, [r9]
     b4c:	str	r3, [sp, #116]	; 0x74
     b50:	bl	a80 <setlocale@plt>
     b54:	ldr	r1, [pc, #580]	; da0 <main@@Base+0x290>
     b58:	mov	r0, r4
     b5c:	add	r1, pc, r1
     b60:	bl	a74 <bindtextdomain@plt>
     b64:	mov	r0, r4
     b68:	bl	a08 <textdomain@plt>
     b6c:	mov	r0, r6
     b70:	bl	aa4 <abrt_init@plt>
     b74:	ldr	r1, [pc, #552]	; da4 <main@@Base+0x294>
     b78:	mov	r0, r4
     b7c:	mov	r2, #5
     b80:	add	r1, pc, r1
     b84:	bl	a5c <dcgettext@plt>
     b88:	mov	r1, #0
     b8c:	mov	r2, #96	; 0x60
     b90:	mov	sl, r0
     b94:	mov	r0, r5
     b98:	bl	a14 <memset@plt>
     b9c:	ldr	r3, [pc, #516]	; da8 <main@@Base+0x298>
     ba0:	ldr	r2, [pc, #516]	; dac <main@@Base+0x29c>
     ba4:	mov	r1, #118	; 0x76
     ba8:	str	r1, [sp, #24]
     bac:	mov	r0, r4
     bb0:	add	r2, pc, r2
     bb4:	ldr	r1, [pc, #500]	; db0 <main@@Base+0x2a0>
     bb8:	str	r2, [sp, #28]
     bbc:	mov	r2, #5
     bc0:	ldr	r3, [r8, r3]
     bc4:	add	r1, pc, r1
     bc8:	str	r3, [sp, #32]
     bcc:	bl	a5c <dcgettext@plt>
     bd0:	ldr	r1, [pc, #476]	; db4 <main@@Base+0x2a4>
     bd4:	mov	r2, #5
     bd8:	mov	r3, #111	; 0x6f
     bdc:	str	r3, [sp, #48]	; 0x30
     be0:	add	r1, pc, r1
     be4:	str	r0, [sp, #40]	; 0x28
     be8:	mov	r0, r4
     bec:	bl	a5c <dcgettext@plt>
     bf0:	ldr	r1, [pc, #448]	; db8 <main@@Base+0x2a8>
     bf4:	mov	r2, #5
     bf8:	mov	r3, #100	; 0x64
     bfc:	add	r1, pc, r1
     c00:	str	r3, [sp, #72]	; 0x48
     c04:	str	r0, [sp, #64]	; 0x40
     c08:	mov	r0, r4
     c0c:	bl	a5c <dcgettext@plt>
     c10:	mov	r2, r5
     c14:	mov	r3, sl
     c18:	mov	r1, r6
     c1c:	mov	ip, #6
     c20:	str	ip, [sp, #92]	; 0x5c
     c24:	str	r0, [sp, #88]	; 0x58
     c28:	mov	r0, r7
     c2c:	bl	9f0 <libreport_parse_opts@plt>
     c30:	mov	sl, r0
     c34:	mov	r0, #0
     c38:	bl	9fc <libreport_export_abrt_envvars@plt>
     c3c:	mov	r0, #4
     c40:	bl	a38 <libreport_xzalloc@plt>
     c44:	mov	r5, r0
     c48:	ldr	r0, [r6]
     c4c:	cmp	r0, #0
     c50:	movne	r4, #0
     c54:	movne	r7, r4
     c58:	beq	ca0 <main@@Base+0x190>
     c5c:	bl	ff4 <main@@Base+0x4e4>
     c60:	lsl	fp, r4, #2
     c64:	cmp	r0, #0
     c68:	str	r0, [r5, r4, lsl #2]
     c6c:	beq	c8c <main@@Base+0x17c>
     c70:	mov	r0, r5
     c74:	add	r1, fp, #8
     c78:	bl	ac8 <libreport_xrealloc@plt>
     c7c:	add	r4, r4, #1
     c80:	add	fp, r0, fp
     c84:	mov	r5, r0
     c88:	str	r7, [fp, #4]
     c8c:	ldr	r0, [r6, #4]!
     c90:	cmp	r0, #0
     c94:	bne	c5c <main@@Base+0x14c>
     c98:	cmp	r4, #0
     c9c:	bne	cbc <main@@Base+0x1ac>
     ca0:	ldr	r2, [sp, #116]	; 0x74
     ca4:	mov	r0, #0
     ca8:	ldr	r3, [r9]
     cac:	cmp	r2, r3
     cb0:	bne	d8c <main@@Base+0x27c>
     cb4:	add	sp, sp, #124	; 0x7c
     cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
     cbc:	ldr	r3, [pc, #248]	; dbc <main@@Base+0x2ac>
     cc0:	mov	r1, r4
     cc4:	mov	r0, r5
     cc8:	mov	r2, #4
     ccc:	add	r3, pc, r3
     cd0:	bl	9e4 <qsort@plt>
     cd4:	tst	sl, #2
     cd8:	bne	d58 <main@@Base+0x248>
     cdc:	tst	sl, #4
     ce0:	beq	ca0 <main@@Base+0x190>
     ce4:	ldr	r4, [r5]
     ce8:	cmp	r4, #0
     cec:	beq	ca0 <main@@Base+0x190>
     cf0:	ldr	r8, [pc, #200]	; dc0 <main@@Base+0x2b0>
     cf4:	mov	r6, #1
     cf8:	ldr	sl, [pc, #196]	; dc4 <main@@Base+0x2b4>
     cfc:	ldr	r7, [pc, #196]	; dc8 <main@@Base+0x2b8>
     d00:	add	r8, pc, r8
     d04:	add	sl, pc, sl
     d08:	add	r7, pc, r7
     d0c:	b	d1c <main@@Base+0x20c>
     d10:	ldr	r4, [r5, #4]!
     d14:	cmp	r4, #0
     d18:	beq	ca0 <main@@Base+0x190>
     d1c:	ldr	r0, [r4, #8]
     d20:	bl	a2c <unlink@plt>
     d24:	cmp	r0, #0
     d28:	beq	d10 <main@@Base+0x200>
     d2c:	str	r6, [sp]
     d30:	mov	r0, #3
     d34:	str	r6, [sp, #4]
     d38:	mov	r1, r8
     d3c:	str	r7, [sp, #8]
     d40:	mov	r2, #142	; 0x8e
     d44:	ldr	ip, [r4, #8]
     d48:	mov	r3, sl
     d4c:	str	ip, [sp, #12]
     d50:	bl	a68 <log_wrapper@plt>
     d54:	b	d10 <main@@Base+0x200>
     d58:	ldr	r3, [r5]
     d5c:	cmp	r3, #0
     d60:	beq	cdc <main@@Base+0x1cc>
     d64:	ldr	r2, [pc, #96]	; dcc <main@@Base+0x2bc>
     d68:	mov	r4, r5
     d6c:	ldr	r6, [r8, r2]
     d70:	ldr	r0, [r3, #12]
     d74:	ldr	r1, [r6]
     d78:	bl	ad4 <fputs@plt>
     d7c:	ldr	r3, [r4, #4]!
     d80:	cmp	r3, #0
     d84:	bne	d70 <main@@Base+0x260>
     d88:	b	cdc <main@@Base+0x1cc>
     d8c:	bl	a50 <__stack_chk_fail@plt>
     d90:	andeq	r1, r1, r4, lsr r4
     d94:	andeq	r0, r0, r0, ror r0
     d98:	andeq	r0, r0, r4, ror r6
     d9c:	andeq	r0, r0, r4, ror r6
     da0:	andeq	r0, r0, r0, ror #12
     da4:	andeq	r0, r0, r0, asr r6
     da8:	andeq	r0, r0, ip, ror r0
     dac:	andeq	r0, r0, r8, ror r6
     db0:	andeq	r0, r0, ip, ror #12
     db4:	andeq	r0, r0, ip, asr r6
     db8:	andeq	r0, r0, r4, asr r6
     dbc:	ldrdeq	r0, [r0], -r8
     dc0:	andeq	r0, r0, r0, ror r5
     dc4:	muleq	r0, r0, r4
     dc8:	andeq	r0, r0, r0, lsl #11
     dcc:	andeq	r0, r0, r4, lsl #1
     dd0:	mov	fp, #0
     dd4:	mov	lr, #0
     dd8:	pop	{r1}		; (ldr r1, [sp], #4)
     ddc:	mov	r2, sp
     de0:	push	{r2}		; (str r2, [sp, #-4]!)
     de4:	push	{r0}		; (str r0, [sp, #-4]!)
     de8:	ldr	sl, [pc, #40]	; e18 <main@@Base+0x308>
     dec:	add	r3, pc, #36	; 0x24
     df0:	add	sl, sl, r3
     df4:	ldr	ip, [pc, #32]	; e1c <main@@Base+0x30c>
     df8:	ldr	ip, [sl, ip]
     dfc:	push	{ip}		; (str ip, [sp, #-4]!)
     e00:	ldr	r3, [pc, #24]	; e20 <main@@Base+0x310>
     e04:	ldr	r3, [sl, r3]
     e08:	ldr	r0, [pc, #20]	; e24 <main@@Base+0x314>
     e0c:	ldr	r0, [sl, r0]
     e10:	bl	ae0 <__libc_start_main@plt>
     e14:	bl	a20 <abort@plt>
     e18:	andeq	r1, r1, ip, asr #2
     e1c:	andeq	r0, r0, ip, lsl #1
     e20:	andeq	r0, r0, r0, lsl #1
     e24:	andeq	r0, r0, r4, ror r0
     e28:	ldr	r3, [pc, #20]	; e44 <main@@Base+0x334>
     e2c:	ldr	r2, [pc, #20]	; e48 <main@@Base+0x338>
     e30:	add	r3, pc, r3
     e34:	ldr	r2, [r3, r2]
     e38:	cmp	r2, #0
     e3c:	bxeq	lr
     e40:	b	aec <__gmon_start__@plt>
     e44:	andeq	r1, r1, ip, lsr #2
     e48:	muleq	r0, r0, r0
     e4c:	ldr	r2, [pc, #60]	; e90 <main@@Base+0x380>
     e50:	ldr	r0, [pc, #60]	; e94 <main@@Base+0x384>
     e54:	add	r2, pc, r2
     e58:	add	r0, pc, r0
     e5c:	add	r2, r2, #3
     e60:	rsb	r2, r0, r2
     e64:	push	{r3, lr}
     e68:	cmp	r2, #6
     e6c:	ldr	r3, [pc, #36]	; e98 <main@@Base+0x388>
     e70:	add	r3, pc, r3
     e74:	popls	{r3, pc}
     e78:	ldr	r2, [pc, #28]	; e9c <main@@Base+0x38c>
     e7c:	ldr	r3, [r3, r2]
     e80:	cmp	r3, #0
     e84:	popeq	{r3, pc}
     e88:	blx	r3
     e8c:	pop	{r3, pc}
     e90:	andeq	r1, r1, r8, lsr #3
     e94:	andeq	r1, r1, r4, lsr #3
     e98:	andeq	r1, r1, ip, ror #1
     e9c:	andeq	r0, r0, r8, lsl #1
     ea0:	push	{r3, lr}
     ea4:	ldr	r0, [pc, #64]	; eec <main@@Base+0x3dc>
     ea8:	ldr	r3, [pc, #64]	; ef0 <main@@Base+0x3e0>
     eac:	add	r0, pc, r0
     eb0:	ldr	r2, [pc, #60]	; ef4 <main@@Base+0x3e4>
     eb4:	add	r3, pc, r3
     eb8:	rsb	r3, r0, r3
     ebc:	add	r2, pc, r2
     ec0:	asr	r3, r3, #2
     ec4:	add	r3, r3, r3, lsr #31
     ec8:	asrs	r3, r3, #1
     ecc:	popeq	{r3, pc}
     ed0:	ldr	r1, [pc, #32]	; ef8 <main@@Base+0x3e8>
     ed4:	ldr	r2, [r2, r1]
     ed8:	cmp	r2, #0
     edc:	popeq	{r3, pc}
     ee0:	mov	r1, r3
     ee4:	blx	r2
     ee8:	pop	{r3, pc}
     eec:	andeq	r1, r1, r0, asr r1
     ef0:	andeq	r1, r1, r8, asr #2
     ef4:	andeq	r1, r1, r0, lsr #1
     ef8:	muleq	r0, r4, r0
     efc:	ldr	r2, [pc, #76]	; f50 <main@@Base+0x440>
     f00:	push	{r3, lr}
     f04:	add	r2, pc, r2
     f08:	ldr	r3, [pc, #68]	; f54 <main@@Base+0x444>
     f0c:	ldrb	r2, [r2]
     f10:	add	r3, pc, r3
     f14:	cmp	r2, #0
     f18:	popne	{r3, pc}
     f1c:	ldr	r2, [pc, #52]	; f58 <main@@Base+0x448>
     f20:	ldr	r3, [r3, r2]
     f24:	cmp	r3, #0
     f28:	beq	f38 <main@@Base+0x428>
     f2c:	ldr	r0, [pc, #40]	; f5c <main@@Base+0x44c>
     f30:	add	r0, pc, r0
     f34:	bl	af8 <__cxa_finalize@plt>
     f38:	bl	e4c <main@@Base+0x33c>
     f3c:	ldr	r3, [pc, #28]	; f60 <main@@Base+0x450>
     f40:	mov	r2, #1
     f44:	add	r3, pc, r3
     f48:	strb	r2, [r3]
     f4c:	pop	{r3, pc}
     f50:	strdeq	r1, [r1], -r8
     f54:	andeq	r1, r1, ip, asr #32
     f58:	muleq	r0, r8, r0
     f5c:	strdeq	r0, [r1], -r0	; <UNPREDICTABLE>
     f60:	strheq	r1, [r1], -r8
     f64:	ldr	r0, [pc, #52]	; fa0 <main@@Base+0x490>
     f68:	push	{r3, lr}
     f6c:	add	r0, pc, r0
     f70:	ldr	r3, [pc, #44]	; fa4 <main@@Base+0x494>
     f74:	ldr	r2, [r0]
     f78:	add	r3, pc, r3
     f7c:	cmp	r2, #0
     f80:	beq	f98 <main@@Base+0x488>
     f84:	ldr	r2, [pc, #28]	; fa8 <main@@Base+0x498>
     f88:	ldr	r3, [r3, r2]
     f8c:	cmp	r3, #0
     f90:	beq	f98 <main@@Base+0x488>
     f94:	blx	r3
     f98:	pop	{r3, lr}
     f9c:	b	ea0 <main@@Base+0x390>
     fa0:			; <UNDEFINED> instruction: 0x00010eb0
     fa4:	andeq	r0, r1, r4, ror #31
     fa8:	andeq	r0, r0, r8, ror r0
     fac:	ldr	r3, [r0]
     fb0:	ldr	r2, [r1]
     fb4:	ldr	r0, [r3]
     fb8:	ldr	r1, [r2]
     fbc:	cmp	r0, r1
     fc0:	bcc	fec <main@@Base+0x4dc>
     fc4:	bhi	fe4 <main@@Base+0x4d4>
     fc8:	ldr	r1, [r3, #4]
     fcc:	ldr	r3, [r2, #4]
     fd0:	cmp	r1, r3
     fd4:	bhi	fec <main@@Base+0x4dc>
     fd8:	movcs	r0, #0
     fdc:	movcc	r0, #1
     fe0:	bx	lr
     fe4:	mov	r0, #1
     fe8:	bx	lr
     fec:	mvn	r0, #0
     ff0:	bx	lr
     ff4:	ldr	r3, [pc, #284]	; 1118 <main@@Base+0x608>
     ff8:	ldr	r2, [pc, #284]	; 111c <main@@Base+0x60c>
     ffc:	add	r3, pc, r3
    1000:	ldr	r1, [pc, #280]	; 1120 <main@@Base+0x610>
    1004:	push	{r4, r5, r6, r7, r8, lr}
    1008:	sub	sp, sp, #16384	; 0x4000
    100c:	ldr	r6, [r3, r2]
    1010:	sub	sp, sp, #16
    1014:	add	r2, sp, #16384	; 0x4000
    1018:	add	r1, pc, r1
    101c:	mov	r8, r0
    1020:	ldr	r3, [r6]
    1024:	str	r3, [r2, #12]
    1028:	bl	abc <fopen64@plt>
    102c:	subs	r5, r0, #0
    1030:	beq	110c <main@@Base+0x5fc>
    1034:	add	r4, sp, #16
    1038:	mov	r1, #16384	; 0x4000
    103c:	sub	r7, r4, #4
    1040:	mov	r2, r5
    1044:	mov	r0, r7
    1048:	bl	a8c <fgets@plt>
    104c:	cmp	r0, #0
    1050:	beq	1074 <main@@Base+0x564>
    1054:	ldr	r1, [pc, #200]	; 1124 <main@@Base+0x614>
    1058:	mov	r0, r7
    105c:	sub	r2, r4, #12
    1060:	sub	r3, r4, #8
    1064:	add	r1, pc, r1
    1068:	bl	ab0 <sscanf@plt>
    106c:	cmp	r0, #2
    1070:	beq	10a4 <main@@Base+0x594>
    1074:	mov	r4, #0
    1078:	mov	r0, r5
    107c:	bl	a98 <fclose@plt>
    1080:	mov	r0, r4
    1084:	add	r3, sp, #16384	; 0x4000
    1088:	ldr	r2, [r3, #12]
    108c:	ldr	r3, [r6]
    1090:	cmp	r2, r3
    1094:	bne	1114 <main@@Base+0x604>
    1098:	add	sp, sp, #16384	; 0x4000
    109c:	add	sp, sp, #16
    10a0:	pop	{r4, r5, r6, r7, r8, pc}
    10a4:	mov	r0, #16
    10a8:	bl	a38 <libreport_xzalloc@plt>
    10ac:	add	r2, sp, #16384	; 0x4000
    10b0:	add	r2, r2, #16
    10b4:	movw	r3, #49140	; 0xbff4
    10b8:	movt	r3, #65535	; 0xffff
    10bc:	movw	ip, #49144	; 0xbff8
    10c0:	movt	ip, #65535	; 0xffff
    10c4:	mov	r1, #1
    10c8:	ldr	lr, [r2, r3]
    10cc:	mov	r2, #16384	; 0x4000
    10d0:	mov	r3, r5
    10d4:	mov	r4, r0
    10d8:	mov	r0, r7
    10dc:	str	lr, [r4]
    10e0:	add	lr, sp, #16384	; 0x4000
    10e4:	add	lr, lr, #16
    10e8:	str	r8, [r4, #8]
    10ec:	ldr	ip, [lr, ip]
    10f0:	str	ip, [r4, #4]
    10f4:	bl	a44 <fread@plt>
    10f8:	mov	r1, r0
    10fc:	mov	r0, r7
    1100:	bl	b04 <__strndup@plt>
    1104:	str	r0, [r4, #12]
    1108:	b	1078 <main@@Base+0x568>
    110c:	mov	r0, r5
    1110:	b	1084 <main@@Base+0x574>
    1114:	bl	a50 <__stack_chk_fail@plt>
    1118:	andeq	r0, r1, r0, ror #30
    111c:	andeq	r0, r0, r0, ror r0
    1120:	andeq	r0, r0, r4, lsl #3
    1124:	andeq	r0, r0, ip, lsr r1

00001128 <__libc_csu_init@@Base>:
    1128:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    112c:	mov	r7, r0
    1130:	ldr	r6, [pc, #76]	; 1184 <__libc_csu_init@@Base+0x5c>
    1134:	mov	r8, r1
    1138:	ldr	r5, [pc, #72]	; 1188 <__libc_csu_init@@Base+0x60>
    113c:	mov	r9, r2
    1140:	add	r6, pc, r6
    1144:	bl	9c4 <_init@@Base>
    1148:	add	r5, pc, r5
    114c:	rsb	r6, r5, r6
    1150:	asrs	r6, r6, #2
    1154:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
    1158:	sub	r5, r5, #4
    115c:	mov	r4, #0
    1160:	add	r4, r4, #1
    1164:	ldr	r3, [r5, #4]!
    1168:	mov	r0, r7
    116c:	mov	r1, r8
    1170:	mov	r2, r9
    1174:	blx	r3
    1178:	cmp	r4, r6
    117c:	bne	1160 <__libc_csu_init@@Base+0x38>
    1180:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    1184:	ldrdeq	r0, [r1], -r8
    1188:	andeq	r0, r1, ip, asr #25

0000118c <__libc_csu_fini@@Base>:
    118c:	bx	lr

Disassembly of section .fini:

00001190 <_fini@@Base>:
    1190:	push	{r3, lr}
    1194:	pop	{r3, pc}
