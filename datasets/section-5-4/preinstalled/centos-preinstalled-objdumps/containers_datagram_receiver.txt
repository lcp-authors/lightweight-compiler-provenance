
centos-preinstalled/containers_datagram_receiver:     file format elf32-littlearm


Disassembly of section .init:

00010868 <_init@@Base>:
   10868:	push	{r3, lr}
   1086c:	bl	10ab8 <_start@@Base+0x3c>
   10870:	pop	{r3, pc}

Disassembly of section .plt:

00010874 <vc_container_net_maximum_datagram_size@plt-0x14>:
   10874:	push	{lr}		; (str lr, [sp, #-4]!)
   10878:	ldr	lr, [pc, #4]	; 10884 <_init@@Base+0x1c>
   1087c:	add	lr, pc, lr
   10880:	ldr	pc, [lr, #8]!
   10884:	andeq	r0, r1, ip, ror r7

00010888 <vc_container_net_maximum_datagram_size@plt>:
   10888:	add	ip, pc, #0, 12
   1088c:	add	ip, ip, #16, 20	; 0x10000
   10890:	ldr	pc, [ip, #1916]!	; 0x77c

00010894 <__stack_chk_fail@plt>:
   10894:	add	ip, pc, #0, 12
   10898:	add	ip, ip, #16, 20	; 0x10000
   1089c:	ldr	pc, [ip, #1908]!	; 0x774

000108a0 <_IO_putc@plt>:
   108a0:	add	ip, pc, #0, 12
   108a4:	add	ip, ip, #16, 20	; 0x10000
   108a8:	ldr	pc, [ip, #1900]!	; 0x76c

000108ac <vc_container_net_read@plt>:
   108ac:	add	ip, pc, #0, 12
   108b0:	add	ip, ip, #16, 20	; 0x10000
   108b4:	ldr	pc, [ip, #1892]!	; 0x764

000108b8 <malloc@plt>:
   108b8:	add	ip, pc, #0, 12
   108bc:	add	ip, ip, #16, 20	; 0x10000
   108c0:	ldr	pc, [ip, #1884]!	; 0x75c

000108c4 <__libc_start_main@plt>:
   108c4:	add	ip, pc, #0, 12
   108c8:	add	ip, ip, #16, 20	; 0x10000
   108cc:	ldr	pc, [ip, #1876]!	; 0x754

000108d0 <__gmon_start__@plt>:
   108d0:	add	ip, pc, #0, 12
   108d4:	add	ip, ip, #16, 20	; 0x10000
   108d8:	ldr	pc, [ip, #1868]!	; 0x74c

000108dc <vc_container_net_status@plt>:
   108dc:	add	ip, pc, #0, 12
   108e0:	add	ip, ip, #16, 20	; 0x10000
   108e4:	ldr	pc, [ip, #1860]!	; 0x744

000108e8 <__printf_chk@plt>:
   108e8:	add	ip, pc, #0, 12
   108ec:	add	ip, ip, #16, 20	; 0x10000
   108f0:	ldr	pc, [ip, #1852]!	; 0x73c

000108f4 <vc_container_net_open@plt>:
   108f4:	add	ip, pc, #0, 12
   108f8:	add	ip, ip, #16, 20	; 0x10000
   108fc:	ldr	pc, [ip, #1844]!	; 0x734

00010900 <vc_container_net_close@plt>:
   10900:	add	ip, pc, #0, 12
   10904:	add	ip, ip, #16, 20	; 0x10000
   10908:	ldr	pc, [ip, #1836]!	; 0x72c

0001090c <abort@plt>:
   1090c:	add	ip, pc, #0, 12
   10910:	add	ip, ip, #16, 20	; 0x10000
   10914:	ldr	pc, [ip, #1828]!	; 0x724

Disassembly of section .text:

00010918 <main@@Base>:
   10918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1091c:	cmp	r0, #1
   10920:	ldr	r8, [pc, #312]	; 10a60 <main@@Base+0x148>
   10924:	sub	sp, sp, #12
   10928:	ldr	r3, [pc, #308]	; 10a64 <main@@Base+0x14c>
   1092c:	add	r8, pc, r8
   10930:	ldr	fp, [r8, r3]
   10934:	ldr	r3, [fp]
   10938:	str	r3, [sp, #4]
   1093c:	ble	10a20 <main@@Base+0x108>
   10940:	mov	r0, #0
   10944:	ldr	r1, [r1, #4]
   10948:	mov	r2, r0
   1094c:	mov	r3, sp
   10950:	bl	108f4 <vc_container_net_open@plt>
   10954:	subs	r9, r0, #0
   10958:	beq	109e4 <main@@Base+0xcc>
   1095c:	bl	10888 <vc_container_net_maximum_datagram_size@plt>
   10960:	mov	sl, r0
   10964:	bl	108b8 <malloc@plt>
   10968:	subs	r7, r0, #0
   1096c:	beq	10a3c <main@@Base+0x124>
   10970:	mov	r0, r9
   10974:	mov	r1, r7
   10978:	mov	r2, sl
   1097c:	bl	108ac <vc_container_net_read@plt>
   10980:	cmp	r0, #0
   10984:	beq	109b0 <main@@Base+0x98>
   10988:	ldr	r3, [pc, #216]	; 10a68 <main@@Base+0x150>
   1098c:	mov	r4, r0
   10990:	mov	r5, r7
   10994:	ldr	r6, [r8, r3]
   10998:	ldrb	r0, [r5], #1
   1099c:	ldr	r1, [r6]
   109a0:	bl	108a0 <_IO_putc@plt>
   109a4:	subs	r4, r4, #1
   109a8:	bne	10998 <main@@Base+0x80>
   109ac:	b	10970 <main@@Base+0x58>
   109b0:	mov	r0, r9
   109b4:	bl	108dc <vc_container_net_status@plt>
   109b8:	cmp	r0, #0
   109bc:	bne	10a00 <main@@Base+0xe8>
   109c0:	mov	r0, r9
   109c4:	bl	10900 <vc_container_net_close@plt>
   109c8:	mov	r0, #0
   109cc:	ldr	r2, [sp, #4]
   109d0:	ldr	r3, [fp]
   109d4:	cmp	r2, r3
   109d8:	bne	10a5c <main@@Base+0x144>
   109dc:	add	sp, sp, #12
   109e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   109e4:	ldr	r1, [pc, #128]	; 10a6c <main@@Base+0x154>
   109e8:	mov	r0, #1
   109ec:	ldr	r2, [sp]
   109f0:	add	r1, pc, r1
   109f4:	bl	108e8 <__printf_chk@plt>
   109f8:	mov	r0, #2
   109fc:	b	109cc <main@@Base+0xb4>
   10a00:	mov	r0, r9
   10a04:	bl	108dc <vc_container_net_status@plt>
   10a08:	ldr	r1, [pc, #96]	; 10a70 <main@@Base+0x158>
   10a0c:	add	r1, pc, r1
   10a10:	mov	r2, r0
   10a14:	mov	r0, #1
   10a18:	bl	108e8 <__printf_chk@plt>
   10a1c:	b	109c0 <main@@Base+0xa8>
   10a20:	ldr	r2, [r1]
   10a24:	mov	r0, #1
   10a28:	ldr	r1, [pc, #68]	; 10a74 <main@@Base+0x15c>
   10a2c:	add	r1, pc, r1
   10a30:	bl	108e8 <__printf_chk@plt>
   10a34:	mov	r0, #1
   10a38:	b	109cc <main@@Base+0xb4>
   10a3c:	mov	r0, r9
   10a40:	bl	10900 <vc_container_net_close@plt>
   10a44:	ldr	r1, [pc, #44]	; 10a78 <main@@Base+0x160>
   10a48:	mov	r0, #1
   10a4c:	add	r1, pc, r1
   10a50:	bl	108e8 <__printf_chk@plt>
   10a54:	mov	r0, #3
   10a58:	b	109cc <main@@Base+0xb4>
   10a5c:	bl	10894 <__stack_chk_fail@plt>
   10a60:	andeq	r0, r1, ip, asr #13
   10a64:	andeq	r0, r0, ip, lsr r0
   10a68:	andeq	r0, r0, r4, asr #32
   10a6c:	andeq	r0, r0, r4, asr #4
   10a70:	andeq	r0, r0, r8, ror #4
   10a74:	strdeq	r0, [r0], -r4
   10a78:	andeq	r0, r0, ip, lsl #4

00010a7c <_start@@Base>:
   10a7c:	mov	fp, #0
   10a80:	mov	lr, #0
   10a84:	pop	{r1}		; (ldr r1, [sp], #4)
   10a88:	mov	r2, sp
   10a8c:	push	{r2}		; (str r2, [sp, #-4]!)
   10a90:	push	{r0}		; (str r0, [sp, #-4]!)
   10a94:	ldr	ip, [pc, #16]	; 10aac <_start@@Base+0x30>
   10a98:	push	{ip}		; (str ip, [sp, #-4]!)
   10a9c:	ldr	r0, [pc, #12]	; 10ab0 <_start@@Base+0x34>
   10aa0:	ldr	r3, [pc, #12]	; 10ab4 <_start@@Base+0x38>
   10aa4:	bl	108c4 <__libc_start_main@plt>
   10aa8:	bl	1090c <abort@plt>
   10aac:	andeq	r0, r1, r4, lsl ip
   10ab0:	andeq	r0, r1, r8, lsl r9
   10ab4:			; <UNDEFINED> instruction: 0x00010bb0
   10ab8:	ldr	r3, [pc, #20]	; 10ad4 <_start@@Base+0x58>
   10abc:	ldr	r2, [pc, #20]	; 10ad8 <_start@@Base+0x5c>
   10ac0:	add	r3, pc, r3
   10ac4:	ldr	r2, [r3, r2]
   10ac8:	cmp	r2, #0
   10acc:	bxeq	lr
   10ad0:	b	108d0 <__gmon_start__@plt>
   10ad4:	andeq	r0, r1, r8, lsr r5
   10ad8:	andeq	r0, r0, r0, asr #32
   10adc:	push	{r3, lr}
   10ae0:	movw	r0, #4172	; 0x104c
   10ae4:	ldr	r3, [pc, #36]	; 10b10 <_start@@Base+0x94>
   10ae8:	movt	r0, #2
   10aec:	rsb	r3, r0, r3
   10af0:	cmp	r3, #6
   10af4:	popls	{r3, pc}
   10af8:	movw	r3, #0
   10afc:	movt	r3, #0
   10b00:	cmp	r3, #0
   10b04:	popeq	{r3, pc}
   10b08:	blx	r3
   10b0c:	pop	{r3, pc}
   10b10:	andeq	r1, r2, pc, asr #32
   10b14:	push	{r3, lr}
   10b18:	movw	r0, #4172	; 0x104c
   10b1c:	movw	r3, #4172	; 0x104c
   10b20:	movt	r0, #2
   10b24:	movt	r3, #2
   10b28:	rsb	r3, r0, r3
   10b2c:	asr	r3, r3, #2
   10b30:	add	r3, r3, r3, lsr #31
   10b34:	asrs	r1, r3, #1
   10b38:	popeq	{r3, pc}
   10b3c:	movw	r2, #0
   10b40:	movt	r2, #0
   10b44:	cmp	r2, #0
   10b48:	popeq	{r3, pc}
   10b4c:	blx	r2
   10b50:	pop	{r3, pc}
   10b54:	push	{r4, lr}
   10b58:	movw	r4, #4172	; 0x104c
   10b5c:	movt	r4, #2
   10b60:	ldrb	r3, [r4]
   10b64:	cmp	r3, #0
   10b68:	popne	{r4, pc}
   10b6c:	bl	10adc <_start@@Base+0x60>
   10b70:	mov	r3, #1
   10b74:	strb	r3, [r4]
   10b78:	pop	{r4, pc}
   10b7c:	movw	r0, #3796	; 0xed4
   10b80:	movt	r0, #2
   10b84:	push	{r3, lr}
   10b88:	ldr	r3, [r0]
   10b8c:	cmp	r3, #0
   10b90:	beq	10ba8 <_start@@Base+0x12c>
   10b94:	movw	r3, #0
   10b98:	movt	r3, #0
   10b9c:	cmp	r3, #0
   10ba0:	beq	10ba8 <_start@@Base+0x12c>
   10ba4:	blx	r3
   10ba8:	pop	{r3, lr}
   10bac:	b	10b14 <_start@@Base+0x98>

00010bb0 <__libc_csu_init@@Base>:
   10bb0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10bb4:	mov	r7, r0
   10bb8:	ldr	r6, [pc, #76]	; 10c0c <__libc_csu_init@@Base+0x5c>
   10bbc:	mov	r8, r1
   10bc0:	ldr	r5, [pc, #72]	; 10c10 <__libc_csu_init@@Base+0x60>
   10bc4:	mov	r9, r2
   10bc8:	add	r6, pc, r6
   10bcc:	bl	10868 <_init@@Base>
   10bd0:	add	r5, pc, r5
   10bd4:	rsb	r6, r5, r6
   10bd8:	asrs	r6, r6, #2
   10bdc:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10be0:	sub	r5, r5, #4
   10be4:	mov	r4, #0
   10be8:	add	r4, r4, #1
   10bec:	ldr	r3, [r5, #4]!
   10bf0:	mov	r0, r7
   10bf4:	mov	r1, r8
   10bf8:	mov	r2, r9
   10bfc:	blx	r3
   10c00:	cmp	r4, r6
   10c04:	bne	10be8 <__libc_csu_init@@Base+0x38>
   10c08:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10c0c:	andeq	r0, r1, r0, lsl #6
   10c10:	strdeq	r0, [r1], -r4

00010c14 <__libc_csu_fini@@Base>:
   10c14:	bx	lr

Disassembly of section .fini:

00010c18 <_fini@@Base>:
   10c18:	push	{r3, lr}
   10c1c:	pop	{r3, pc}
