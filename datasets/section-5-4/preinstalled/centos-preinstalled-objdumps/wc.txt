
centos-preinstalled/wc:     file format elf32-littlearm


Disassembly of section .init:

0001121c <.init>:
   1121c:	push	{r3, lr}
   11220:	bl	12138 <__assert_fail@plt+0xba8>
   11224:	pop	{r3, pc}

Disassembly of section .plt:

00011228 <fdopen@plt-0x14>:
   11228:	push	{lr}		; (str lr, [sp, #-4]!)
   1122c:	ldr	lr, [pc, #4]	; 11238 <fdopen@plt-0x4>
   11230:	add	lr, pc, lr
   11234:	ldr	pc, [lr, #8]!
   11238:	andeq	r7, r1, r8, asr #27

0001123c <fdopen@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #94208	; 0x17000
   11244:	ldr	pc, [ip, #3528]!	; 0xdc8

00011248 <calloc@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #94208	; 0x17000
   11250:	ldr	pc, [ip, #3520]!	; 0xdc0

00011254 <fputs_unlocked@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #94208	; 0x17000
   1125c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011260 <raise@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #94208	; 0x17000
   11268:	ldr	pc, [ip, #3504]!	; 0xdb0

0001126c <strcmp@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #94208	; 0x17000
   11274:	ldr	pc, [ip, #3496]!	; 0xda8

00011278 <posix_fadvise64@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #94208	; 0x17000
   11280:	ldr	pc, [ip, #3488]!	; 0xda0

00011284 <read@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #94208	; 0x17000
   1128c:	ldr	pc, [ip, #3480]!	; 0xd98

00011290 <fflush@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #94208	; 0x17000
   11298:	ldr	pc, [ip, #3472]!	; 0xd90

0001129c <wcwidth@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #94208	; 0x17000
   112a4:	ldr	pc, [ip, #3464]!	; 0xd88

000112a8 <__memmove_chk@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #94208	; 0x17000
   112b0:	ldr	pc, [ip, #3456]!	; 0xd80

000112b4 <free@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #94208	; 0x17000
   112bc:	ldr	pc, [ip, #3448]!	; 0xd78

000112c0 <ferror@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #94208	; 0x17000
   112c8:	ldr	pc, [ip, #3440]!	; 0xd70

000112cc <_exit@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #94208	; 0x17000
   112d4:	ldr	pc, [ip, #3432]!	; 0xd68

000112d8 <memcpy@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #94208	; 0x17000
   112e0:	ldr	pc, [ip, #3424]!	; 0xd60

000112e4 <mbsinit@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #94208	; 0x17000
   112ec:	ldr	pc, [ip, #3416]!	; 0xd58

000112f0 <memcmp@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #94208	; 0x17000
   112f8:	ldr	pc, [ip, #3408]!	; 0xd50

000112fc <_obstack_newchunk@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #94208	; 0x17000
   11304:	ldr	pc, [ip, #3400]!	; 0xd48

00011308 <dcgettext@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #94208	; 0x17000
   11310:	ldr	pc, [ip, #3392]!	; 0xd40

00011314 <__stack_chk_fail@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #94208	; 0x17000
   1131c:	ldr	pc, [ip, #3384]!	; 0xd38

00011320 <obstack_free@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #94208	; 0x17000
   11328:	ldr	pc, [ip, #3376]!	; 0xd30

0001132c <_obstack_begin@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #94208	; 0x17000
   11334:	ldr	pc, [ip, #3368]!	; 0xd28

00011338 <sysconf@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #94208	; 0x17000
   11340:	ldr	pc, [ip, #3360]!	; 0xd20

00011344 <realloc@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #94208	; 0x17000
   1134c:	ldr	pc, [ip, #3352]!	; 0xd18

00011350 <textdomain@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #94208	; 0x17000
   11358:	ldr	pc, [ip, #3344]!	; 0xd10

0001135c <iswcntrl@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #94208	; 0x17000
   11364:	ldr	pc, [ip, #3336]!	; 0xd08

00011368 <iswprint@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #94208	; 0x17000
   11370:	ldr	pc, [ip, #3328]!	; 0xd00

00011374 <__fxstat64@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #94208	; 0x17000
   1137c:	ldr	pc, [ip, #3320]!	; 0xcf8

00011380 <fwrite@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #94208	; 0x17000
   11388:	ldr	pc, [ip, #3312]!	; 0xcf0

0001138c <lseek64@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #94208	; 0x17000
   11394:	ldr	pc, [ip, #3304]!	; 0xce8

00011398 <__ctype_get_mb_cur_max@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #94208	; 0x17000
   113a0:	ldr	pc, [ip, #3296]!	; 0xce0

000113a4 <strcpy@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #94208	; 0x17000
   113ac:	ldr	pc, [ip, #3288]!	; 0xcd8

000113b0 <__fpending@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #94208	; 0x17000
   113b8:	ldr	pc, [ip, #3280]!	; 0xcd0

000113bc <mbrtowc@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #94208	; 0x17000
   113c4:	ldr	pc, [ip, #3272]!	; 0xcc8

000113c8 <error@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #94208	; 0x17000
   113d0:	ldr	pc, [ip, #3264]!	; 0xcc0

000113d4 <open64@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #94208	; 0x17000
   113dc:	ldr	pc, [ip, #3256]!	; 0xcb8

000113e0 <getenv@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #94208	; 0x17000
   113e8:	ldr	pc, [ip, #3248]!	; 0xcb0

000113ec <malloc@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #94208	; 0x17000
   113f4:	ldr	pc, [ip, #3240]!	; 0xca8

000113f8 <__libc_start_main@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #94208	; 0x17000
   11400:	ldr	pc, [ip, #3232]!	; 0xca0

00011404 <__freading@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #94208	; 0x17000
   1140c:	ldr	pc, [ip, #3224]!	; 0xc98

00011410 <__gmon_start__@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #94208	; 0x17000
   11418:	ldr	pc, [ip, #3216]!	; 0xc90

0001141c <getopt_long@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #94208	; 0x17000
   11424:	ldr	pc, [ip, #3208]!	; 0xc88

00011428 <__ctype_b_loc@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #94208	; 0x17000
   11430:	ldr	pc, [ip, #3200]!	; 0xc80

00011434 <exit@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #94208	; 0x17000
   1143c:	ldr	pc, [ip, #3192]!	; 0xc78

00011440 <feof@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #94208	; 0x17000
   11448:	ldr	pc, [ip, #3184]!	; 0xc70

0001144c <iswspace@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #94208	; 0x17000
   11454:	ldr	pc, [ip, #3176]!	; 0xc68

00011458 <strlen@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #94208	; 0x17000
   11460:	ldr	pc, [ip, #3168]!	; 0xc60

00011464 <ungetc@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #94208	; 0x17000
   1146c:	ldr	pc, [ip, #3160]!	; 0xc58

00011470 <__errno_location@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #94208	; 0x17000
   11478:	ldr	pc, [ip, #3152]!	; 0xc50

0001147c <__cxa_atexit@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #94208	; 0x17000
   11484:	ldr	pc, [ip, #3144]!	; 0xc48

00011488 <setvbuf@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #94208	; 0x17000
   11490:	ldr	pc, [ip, #3136]!	; 0xc40

00011494 <memset@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #94208	; 0x17000
   1149c:	ldr	pc, [ip, #3128]!	; 0xc38

000114a0 <fscanf@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #94208	; 0x17000
   114a8:	ldr	pc, [ip, #3120]!	; 0xc30

000114ac <fgetc@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #94208	; 0x17000
   114b4:	ldr	pc, [ip, #3112]!	; 0xc28

000114b8 <__printf_chk@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #94208	; 0x17000
   114c0:	ldr	pc, [ip, #3104]!	; 0xc20

000114c4 <fileno@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #94208	; 0x17000
   114cc:	ldr	pc, [ip, #3096]!	; 0xc18

000114d0 <__fprintf_chk@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #94208	; 0x17000
   114d8:	ldr	pc, [ip, #3088]!	; 0xc10

000114dc <memchr@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #94208	; 0x17000
   114e4:	ldr	pc, [ip, #3080]!	; 0xc08

000114e8 <fclose@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #94208	; 0x17000
   114f0:	ldr	pc, [ip, #3072]!	; 0xc00

000114f4 <fseeko64@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #94208	; 0x17000
   114fc:	ldr	pc, [ip, #3064]!	; 0xbf8

00011500 <__uflow@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #94208	; 0x17000
   11508:	ldr	pc, [ip, #3056]!	; 0xbf0

0001150c <__overflow@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #94208	; 0x17000
   11514:	ldr	pc, [ip, #3048]!	; 0xbe8

00011518 <setlocale@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #94208	; 0x17000
   11520:	ldr	pc, [ip, #3040]!	; 0xbe0

00011524 <strrchr@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #94208	; 0x17000
   1152c:	ldr	pc, [ip, #3032]!	; 0xbd8

00011530 <nl_langinfo@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #94208	; 0x17000
   11538:	ldr	pc, [ip, #3024]!	; 0xbd0

0001153c <fopen64@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #94208	; 0x17000
   11544:	ldr	pc, [ip, #3016]!	; 0xbc8

00011548 <bindtextdomain@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #94208	; 0x17000
   11550:	ldr	pc, [ip, #3008]!	; 0xbc0

00011554 <getdelim@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #94208	; 0x17000
   1155c:	ldr	pc, [ip, #3000]!	; 0xbb8

00011560 <__xstat64@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #94208	; 0x17000
   11568:	ldr	pc, [ip, #2992]!	; 0xbb0

0001156c <strncmp@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #94208	; 0x17000
   11574:	ldr	pc, [ip, #2984]!	; 0xba8

00011578 <abort@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #94208	; 0x17000
   11580:	ldr	pc, [ip, #2976]!	; 0xba0

00011584 <close@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #94208	; 0x17000
   1158c:	ldr	pc, [ip, #2968]!	; 0xb98

00011590 <__assert_fail@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #94208	; 0x17000
   11598:	ldr	pc, [ip, #2960]!	; 0xb90

Disassembly of section .text:

000115a0 <close_stdout@@Base-0x1d04>:
   115a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115a4:	vpush	{d8-d9}
   115a8:	sub	sp, sp, #340	; 0x154
   115ac:	ldr	r4, [pc, #2684]	; 12030 <__assert_fail@plt+0xaa0>
   115b0:	mov	r6, r0
   115b4:	ldr	r3, [pc, #2680]	; 12034 <__assert_fail@plt+0xaa4>
   115b8:	mov	r5, r1
   115bc:	add	r4, pc, r4
   115c0:	ldr	ip, [pc, #2672]	; 12038 <__assert_fail@plt+0xaa8>
   115c4:	ldr	r0, [r1]
   115c8:	ldr	r3, [r4, r3]
   115cc:	add	ip, pc, ip
   115d0:	str	ip, [sp, #40]	; 0x28
   115d4:	ldr	r8, [pc, #2656]	; 1203c <__assert_fail@plt+0xaac>
   115d8:	ldr	r3, [r3]
   115dc:	add	r8, pc, r8
   115e0:	ldr	r7, [pc, #2648]	; 12040 <__assert_fail@plt+0xab0>
   115e4:	ldr	sl, [pc, #2648]	; 12044 <__assert_fail@plt+0xab4>
   115e8:	str	r3, [sp, #332]	; 0x14c
   115ec:	bl	13678 <close_stdout@@Base+0x3d4>
   115f0:	ldr	r1, [pc, #2640]	; 12048 <__assert_fail@plt+0xab8>
   115f4:	mov	r0, #6
   115f8:	ldr	r9, [pc, #2636]	; 1204c <__assert_fail@plt+0xabc>
   115fc:	add	r7, pc, r7
   11600:	add	r1, pc, r1
   11604:	add	sl, pc, sl
   11608:	bl	11518 <setlocale@plt>
   1160c:	ldr	r1, [pc, #2620]	; 12050 <__assert_fail@plt+0xac0>
   11610:	mov	r0, r8
   11614:	add	r9, pc, r9
   11618:	add	r1, pc, r1
   1161c:	bl	11548 <bindtextdomain@plt>
   11620:	mov	r0, r8
   11624:	bl	11350 <textdomain@plt>
   11628:	ldr	ip, [pc, #2596]	; 12054 <__assert_fail@plt+0xac4>
   1162c:	ldr	r3, [pc, #2596]	; 12058 <__assert_fail@plt+0xac8>
   11630:	add	ip, pc, ip
   11634:	str	ip, [sp, #48]	; 0x30
   11638:	ldr	ip, [pc, #2588]	; 1205c <__assert_fail@plt+0xacc>
   1163c:	add	ip, pc, ip
   11640:	str	ip, [sp, #60]	; 0x3c
   11644:	ldr	r0, [r4, r3]
   11648:	bl	170b4 <close_stdout@@Base+0x3e10>
   1164c:	ldr	r0, [pc, #2572]	; 12060 <__assert_fail@plt+0xad0>
   11650:	mov	r1, #0
   11654:	mov	r2, #1
   11658:	mov	r3, r1
   1165c:	ldr	r0, [r4, r0]
   11660:	str	r0, [sp, #56]	; 0x38
   11664:	ldr	r0, [r0]
   11668:	bl	11488 <setvbuf@plt>
   1166c:	ldr	r1, [pc, #2544]	; 12064 <__assert_fail@plt+0xad4>
   11670:	mov	r0, #0
   11674:	mov	r2, #0
   11678:	add	r1, pc, r1
   1167c:	mov	fp, r0
   11680:	mov	r3, #0
   11684:	strb	r0, [r1, #10]
   11688:	strb	r0, [r1, #9]
   1168c:	strb	r0, [r1, #8]
   11690:	strb	r0, [r1]
   11694:	strb	r0, [r1, #11]
   11698:	strd	r2, [r1, #48]	; 0x30
   1169c:	strd	r2, [r1, #40]	; 0x28
   116a0:	strd	r2, [r1, #32]
   116a4:	strd	r2, [r1, #24]
   116a8:	strd	r2, [r1, #16]
   116ac:	ldr	r3, [pc, #2484]	; 12068 <__assert_fail@plt+0xad8>
   116b0:	mov	r8, #0
   116b4:	mov	r0, r6
   116b8:	str	r8, [sp]
   116bc:	mov	r1, r5
   116c0:	mov	r2, r7
   116c4:	add	r3, pc, r3
   116c8:	bl	1141c <getopt_long@plt>
   116cc:	cmn	r0, #1
   116d0:	beq	117cc <__assert_fail@plt+0x23c>
   116d4:	cmp	r0, #99	; 0x63
   116d8:	beq	117bc <__assert_fail@plt+0x22c>
   116dc:	ble	1170c <__assert_fail@plt+0x17c>
   116e0:	cmp	r0, #109	; 0x6d
   116e4:	beq	11760 <__assert_fail@plt+0x1d0>
   116e8:	ble	11748 <__assert_fail@plt+0x1b8>
   116ec:	cmp	r0, #119	; 0x77
   116f0:	beq	1173c <__assert_fail@plt+0x1ac>
   116f4:	cmp	r0, #256	; 0x100
   116f8:	bne	11724 <__assert_fail@plt+0x194>
   116fc:	ldr	r3, [pc, #2408]	; 1206c <__assert_fail@plt+0xadc>
   11700:	ldr	r3, [r4, r3]
   11704:	ldr	fp, [r3]
   11708:	b	116ac <__assert_fail@plt+0x11c>
   1170c:	cmn	r0, #2
   11710:	beq	1176c <__assert_fail@plt+0x1dc>
   11714:	cmp	r0, #76	; 0x4c
   11718:	beq	1172c <__assert_fail@plt+0x19c>
   1171c:	cmn	r0, #3
   11720:	beq	11774 <__assert_fail@plt+0x1e4>
   11724:	mov	r0, #1
   11728:	bl	12f38 <__assert_fail@plt+0x19a8>
   1172c:	ldr	ip, [sp, #60]	; 0x3c
   11730:	mov	r3, #1
   11734:	strb	r3, [ip, #11]
   11738:	b	116ac <__assert_fail@plt+0x11c>
   1173c:	mov	r3, #1
   11740:	strb	r3, [r9, #8]
   11744:	b	116ac <__assert_fail@plt+0x11c>
   11748:	cmp	r0, #108	; 0x6c
   1174c:	bne	11724 <__assert_fail@plt+0x194>
   11750:	ldr	ip, [sp, #48]	; 0x30
   11754:	mov	r3, #1
   11758:	strb	r3, [ip]
   1175c:	b	116ac <__assert_fail@plt+0x11c>
   11760:	mov	r3, #1
   11764:	strb	r3, [sl, #9]
   11768:	b	116ac <__assert_fail@plt+0x11c>
   1176c:	mov	r0, r8
   11770:	bl	12f38 <__assert_fail@plt+0x19a8>
   11774:	ldr	r3, [pc, #2292]	; 12070 <__assert_fail@plt+0xae0>
   11778:	ldr	r1, [pc, #2292]	; 12074 <__assert_fail@plt+0xae4>
   1177c:	ldr	r2, [pc, #2292]	; 12078 <__assert_fail@plt+0xae8>
   11780:	ldr	r3, [r4, r3]
   11784:	add	r1, pc, r1
   11788:	ldr	r4, [sp, #56]	; 0x38
   1178c:	add	r2, pc, r2
   11790:	ldr	r0, [r4]
   11794:	str	r8, [sp, #8]
   11798:	ldr	r3, [r3]
   1179c:	stm	sp, {r1, r2}
   117a0:	ldr	r1, [pc, #2260]	; 1207c <__assert_fail@plt+0xaec>
   117a4:	ldr	r2, [pc, #2260]	; 12080 <__assert_fail@plt+0xaf0>
   117a8:	add	r1, pc, r1
   117ac:	add	r2, pc, r2
   117b0:	bl	15744 <close_stdout@@Base+0x24a0>
   117b4:	mov	r0, r8
   117b8:	bl	11434 <exit@plt>
   117bc:	ldr	ip, [sp, #40]	; 0x28
   117c0:	mov	r3, #1
   117c4:	strb	r3, [ip, #10]
   117c8:	b	116ac <__assert_fail@plt+0x11c>
   117cc:	ldr	r3, [pc, #2224]	; 12084 <__assert_fail@plt+0xaf4>
   117d0:	add	r3, pc, r3
   117d4:	ldrb	r2, [r3]
   117d8:	cmp	r2, r8
   117dc:	bne	1181c <__assert_fail@plt+0x28c>
   117e0:	ldrb	r2, [r3, #8]
   117e4:	cmp	r2, r8
   117e8:	bne	1181c <__assert_fail@plt+0x28c>
   117ec:	ldrb	r2, [r3, #9]
   117f0:	cmp	r2, r8
   117f4:	bne	1181c <__assert_fail@plt+0x28c>
   117f8:	ldrb	r2, [r3, #10]
   117fc:	cmp	r2, r8
   11800:	bne	1181c <__assert_fail@plt+0x28c>
   11804:	ldrb	r2, [r3, #11]
   11808:	cmp	r2, r8
   1180c:	moveq	r2, #1
   11810:	strbeq	r2, [r3, #10]
   11814:	strbeq	r2, [r3, #8]
   11818:	strbeq	r2, [r3]
   1181c:	cmp	fp, #0
   11820:	ldr	r3, [pc, #2144]	; 12088 <__assert_fail@plt+0xaf8>
   11824:	beq	11e1c <__assert_fail@plt+0x88c>
   11828:	ldr	r7, [r4, r3]
   1182c:	ldr	r3, [r7]
   11830:	cmp	r6, r3
   11834:	bgt	11940 <__assert_fail@plt+0x3b0>
   11838:	ldrb	r3, [fp]
   1183c:	cmp	r3, #45	; 0x2d
   11840:	beq	11c34 <__assert_fail@plt+0x6a4>
   11844:	ldr	r1, [pc, #2112]	; 1208c <__assert_fail@plt+0xafc>
   11848:	mov	r0, fp
   1184c:	add	r1, pc, r1
   11850:	bl	1153c <fopen64@plt>
   11854:	subs	r4, r0, #0
   11858:	beq	11fb0 <__assert_fail@plt+0xa20>
   1185c:	mov	r0, r4
   11860:	bl	114c4 <fileno@plt>
   11864:	add	r2, sp, #80	; 0x50
   11868:	mov	r1, r0
   1186c:	mov	r0, #3
   11870:	bl	11374 <__fxstat64@plt>
   11874:	cmp	r0, #0
   11878:	bne	1188c <__assert_fail@plt+0x2fc>
   1187c:	ldr	r3, [sp, #96]	; 0x60
   11880:	and	r3, r3, #61440	; 0xf000
   11884:	cmp	r3, #32768	; 0x8000
   11888:	beq	11ec8 <__assert_fail@plt+0x938>
   1188c:	mov	r0, r4
   11890:	mov	r7, #0
   11894:	str	r7, [sp, #60]	; 0x3c
   11898:	bl	13160 <__assert_fail@plt+0x1bd0>
   1189c:	ldr	r5, [sp, #60]	; 0x3c
   118a0:	mov	r6, r5
   118a4:	mov	r8, r0
   118a8:	cmp	r8, #0
   118ac:	beq	11c50 <__assert_fail@plt+0x6c0>
   118b0:	cmp	r6, #0
   118b4:	beq	119b4 <__assert_fail@plt+0x424>
   118b8:	movw	r3, #9362	; 0x2492
   118bc:	movt	r3, #585	; 0x249
   118c0:	cmp	r6, r3
   118c4:	bhi	11c50 <__assert_fail@plt+0x6c0>
   118c8:	mov	r0, #112	; 0x70
   118cc:	mul	r0, r0, r6
   118d0:	bl	15854 <close_stdout@@Base+0x25b0>
   118d4:	cmp	r6, #1
   118d8:	str	r0, [sp, #56]	; 0x38
   118dc:	beq	11e58 <__assert_fail@plt+0x8c8>
   118e0:	ldr	r7, [sp, #56]	; 0x38
   118e4:	mov	r4, #0
   118e8:	b	11908 <__assert_fail@plt+0x378>
   118ec:	mov	r0, #3
   118f0:	add	r2, r7, #8
   118f4:	bl	11560 <__xstat64@plt>
   118f8:	add	r4, r4, #1
   118fc:	str	r0, [r7], #112	; 0x70
   11900:	cmp	r6, r4
   11904:	beq	119cc <__assert_fail@plt+0x43c>
   11908:	ldr	r1, [r5, r4, lsl #2]
   1190c:	cmp	r1, #0
   11910:	beq	1192c <__assert_fail@plt+0x39c>
   11914:	ldrb	r3, [r1]
   11918:	cmp	r3, #45	; 0x2d
   1191c:	bne	118ec <__assert_fail@plt+0x35c>
   11920:	ldrb	r3, [r1, #1]
   11924:	cmp	r3, #0
   11928:	bne	118ec <__assert_fail@plt+0x35c>
   1192c:	mov	r1, #0
   11930:	add	r2, r7, #8
   11934:	mov	r0, #3
   11938:	bl	11374 <__fxstat64@plt>
   1193c:	b	118f8 <__assert_fail@plt+0x368>
   11940:	ldr	r1, [pc, #1864]	; 12090 <__assert_fail@plt+0xb00>
   11944:	mov	r2, #5
   11948:	mov	r0, #0
   1194c:	add	r1, pc, r1
   11950:	bl	11308 <dcgettext@plt>
   11954:	ldr	r3, [r7]
   11958:	mov	r6, r0
   1195c:	ldr	r0, [r5, r3, lsl #2]
   11960:	bl	14ec8 <close_stdout@@Base+0x1c24>
   11964:	mov	r2, r6
   11968:	mov	r3, r0
   1196c:	mov	r0, #0
   11970:	mov	r1, r0
   11974:	bl	113c8 <error@plt>
   11978:	ldr	r3, [pc, #1812]	; 12094 <__assert_fail@plt+0xb04>
   1197c:	ldr	r1, [pc, #1812]	; 12098 <__assert_fail@plt+0xb08>
   11980:	mov	r2, #5
   11984:	mov	r0, #0
   11988:	ldr	r3, [r4, r3]
   1198c:	add	r1, pc, r1
   11990:	ldr	r4, [r3]
   11994:	bl	11308 <dcgettext@plt>
   11998:	ldr	r2, [pc, #1788]	; 1209c <__assert_fail@plt+0xb0c>
   1199c:	mov	r1, #1
   119a0:	add	r2, pc, r2
   119a4:	mov	r3, r0
   119a8:	mov	r0, r4
   119ac:	bl	114d0 <__fprintf_chk@plt>
   119b0:	b	11724 <__assert_fail@plt+0x194>
   119b4:	mov	r0, #112	; 0x70
   119b8:	bl	15854 <close_stdout@@Base+0x25b0>
   119bc:	str	r0, [sp, #56]	; 0x38
   119c0:	ldr	r4, [sp, #56]	; 0x38
   119c4:	mov	r3, #1
   119c8:	str	r3, [r4]
   119cc:	cmp	r6, #0
   119d0:	ble	119e4 <__assert_fail@plt+0x454>
   119d4:	ldr	r5, [sp, #56]	; 0x38
   119d8:	ldr	r3, [r5]
   119dc:	cmp	r3, #0
   119e0:	ble	11c74 <__assert_fail@plt+0x6e4>
   119e4:	mov	r2, #1
   119e8:	ldr	r7, [pc, #1712]	; 120a0 <__assert_fail@plt+0xb10>
   119ec:	add	r5, sp, #80	; 0x50
   119f0:	ldr	ip, [pc, #1708]	; 120a4 <__assert_fail@plt+0xb14>
   119f4:	mov	r4, #0
   119f8:	add	r7, pc, r7
   119fc:	ldr	r3, [pc, #1700]	; 120a8 <__assert_fail@plt+0xb18>
   11a00:	add	ip, pc, ip
   11a04:	str	r7, [sp, #64]	; 0x40
   11a08:	str	ip, [sp, #68]	; 0x44
   11a0c:	add	r3, pc, r3
   11a10:	ldr	r7, [pc, #1684]	; 120ac <__assert_fail@plt+0xb1c>
   11a14:	mov	r9, #1
   11a18:	ldr	ip, [pc, #1680]	; 120b0 <__assert_fail@plt+0xb20>
   11a1c:	add	r7, pc, r7
   11a20:	str	r7, [sp, #72]	; 0x48
   11a24:	add	ip, pc, ip
   11a28:	ldr	r7, [pc, #1668]	; 120b4 <__assert_fail@plt+0xb24>
   11a2c:	str	ip, [sp, #76]	; 0x4c
   11a30:	ldr	ip, [pc, #1664]	; 120b8 <__assert_fail@plt+0xb28>
   11a34:	add	r7, pc, r7
   11a38:	str	r2, [r3, #4]
   11a3c:	add	ip, pc, ip
   11a40:	str	r7, [sp, #48]	; 0x30
   11a44:	str	ip, [sp, #40]	; 0x28
   11a48:	b	11ac0 <__assert_fail@plt+0x530>
   11a4c:	ldrb	r3, [fp, #1]
   11a50:	cmp	r3, #0
   11a54:	bne	11ae8 <__assert_fail@plt+0x558>
   11a58:	ldrb	r2, [sl]
   11a5c:	cmp	r2, #45	; 0x2d
   11a60:	beq	11ba8 <__assert_fail@plt+0x618>
   11a64:	ldrb	r7, [sl]
   11a68:	cmp	r7, #0
   11a6c:	bne	11af0 <__assert_fail@plt+0x560>
   11a70:	mov	r0, r8
   11a74:	bl	13234 <__assert_fail@plt+0x1ca4>
   11a78:	mov	sl, r0
   11a7c:	mov	r0, fp
   11a80:	bl	14d74 <close_stdout@@Base+0x1ad0>
   11a84:	ldr	r1, [sp, #40]	; 0x28
   11a88:	mov	r2, #5
   11a8c:	mov	r9, r0
   11a90:	mov	r0, r7
   11a94:	bl	11308 <dcgettext@plt>
   11a98:	ldr	r2, [pc, #1564]	; 120bc <__assert_fail@plt+0xb2c>
   11a9c:	str	sl, [sp]
   11aa0:	mov	r3, r9
   11aa4:	add	r2, pc, r2
   11aa8:	mov	r1, r7
   11aac:	str	r0, [sp, #4]
   11ab0:	mov	r0, r7
   11ab4:	bl	113c8 <error@plt>
   11ab8:	mov	r9, #0
   11abc:	add	r4, r4, #112	; 0x70
   11ac0:	mov	r0, r8
   11ac4:	mov	r1, r5
   11ac8:	bl	13194 <__assert_fail@plt+0x1c04>
   11acc:	subs	sl, r0, #0
   11ad0:	beq	11bf4 <__assert_fail@plt+0x664>
   11ad4:	cmp	fp, #0
   11ad8:	beq	11ff0 <__assert_fail@plt+0xa60>
   11adc:	ldrb	r3, [fp]
   11ae0:	cmp	r3, #45	; 0x2d
   11ae4:	beq	11a4c <__assert_fail@plt+0x4bc>
   11ae8:	mov	r3, #0
   11aec:	b	11a64 <__assert_fail@plt+0x4d4>
   11af0:	cmp	r3, #0
   11af4:	bne	11ab8 <__assert_fail@plt+0x528>
   11af8:	cmp	r6, #0
   11afc:	ldrb	r3, [sl]
   11b00:	ldr	ip, [sp, #56]	; 0x38
   11b04:	movne	r7, r4
   11b08:	moveq	r7, #0
   11b0c:	cmp	r3, #45	; 0x2d
   11b10:	add	r7, ip, r7
   11b14:	beq	11b80 <__assert_fail@plt+0x5f0>
   11b18:	mov	r0, sl
   11b1c:	mov	r1, #0
   11b20:	bl	113d4 <open64@plt>
   11b24:	cmn	r0, #1
   11b28:	beq	11c54 <__assert_fail@plt+0x6c4>
   11b2c:	mov	r2, r7
   11b30:	mov	r1, sl
   11b34:	str	r0, [sp, #36]	; 0x24
   11b38:	bl	1245c <__assert_fail@plt+0xecc>
   11b3c:	ldr	r3, [sp, #36]	; 0x24
   11b40:	mov	r7, r0
   11b44:	mov	r0, r3
   11b48:	bl	11584 <close@plt>
   11b4c:	cmp	r0, #0
   11b50:	moveq	r0, r7
   11b54:	beq	11b74 <__assert_fail@plt+0x5e4>
   11b58:	bl	11470 <__errno_location@plt>
   11b5c:	mov	r3, sl
   11b60:	ldr	r2, [sp, #72]	; 0x48
   11b64:	ldr	r1, [r0]
   11b68:	mov	r0, #0
   11b6c:	bl	113c8 <error@plt>
   11b70:	mov	r0, #0
   11b74:	and	r9, r0, r9
   11b78:	uxtb	r9, r9
   11b7c:	b	11abc <__assert_fail@plt+0x52c>
   11b80:	ldrb	r0, [sl, #1]
   11b84:	cmp	r0, #0
   11b88:	bne	11b18 <__assert_fail@plt+0x588>
   11b8c:	mov	r2, r7
   11b90:	ldr	r7, [sp, #48]	; 0x30
   11b94:	mov	r1, sl
   11b98:	mov	r3, #1
   11b9c:	strb	r3, [r7, #60]	; 0x3c
   11ba0:	bl	1245c <__assert_fail@plt+0xecc>
   11ba4:	b	11b74 <__assert_fail@plt+0x5e4>
   11ba8:	ldrb	r7, [sl, #1]
   11bac:	cmp	r7, #0
   11bb0:	bne	11a64 <__assert_fail@plt+0x4d4>
   11bb4:	ldr	r1, [pc, #1284]	; 120c0 <__assert_fail@plt+0xb30>
   11bb8:	mov	r2, #5
   11bbc:	mov	r0, r7
   11bc0:	add	r1, pc, r1
   11bc4:	bl	11308 <dcgettext@plt>
   11bc8:	mov	r2, r0
   11bcc:	mov	r0, sl
   11bd0:	str	r2, [sp, #36]	; 0x24
   11bd4:	bl	14ec8 <close_stdout@@Base+0x1c24>
   11bd8:	mov	r1, r7
   11bdc:	ldr	r2, [sp, #36]	; 0x24
   11be0:	mov	r3, r0
   11be4:	mov	r0, r7
   11be8:	bl	113c8 <error@plt>
   11bec:	mov	r3, #1
   11bf0:	b	11a64 <__assert_fail@plt+0x4d4>
   11bf4:	ldr	r3, [sp, #80]	; 0x50
   11bf8:	cmp	r3, #3
   11bfc:	beq	11c50 <__assert_fail@plt+0x6c0>
   11c00:	cmp	r3, #4
   11c04:	beq	11dd8 <__assert_fail@plt+0x848>
   11c08:	cmp	r3, #2
   11c0c:	beq	11d00 <__assert_fail@plt+0x770>
   11c10:	ldr	r3, [pc, #1196]	; 120c4 <__assert_fail@plt+0xb34>
   11c14:	mov	r2, #740	; 0x2e4
   11c18:	ldr	r0, [pc, #1192]	; 120c8 <__assert_fail@plt+0xb38>
   11c1c:	ldr	r1, [pc, #1192]	; 120cc <__assert_fail@plt+0xb3c>
   11c20:	add	r3, pc, r3
   11c24:	add	r0, pc, r0
   11c28:	add	r3, r3, #8
   11c2c:	add	r1, pc, r1
   11c30:	bl	11590 <__assert_fail@plt>
   11c34:	ldrb	r3, [fp, #1]
   11c38:	cmp	r3, #0
   11c3c:	bne	11844 <__assert_fail@plt+0x2b4>
   11c40:	ldr	r3, [pc, #1160]	; 120d0 <__assert_fail@plt+0xb40>
   11c44:	ldr	r3, [r4, r3]
   11c48:	ldr	r4, [r3]
   11c4c:	b	1185c <__assert_fail@plt+0x2cc>
   11c50:	bl	15a68 <close_stdout@@Base+0x27c4>
   11c54:	bl	11470 <__errno_location@plt>
   11c58:	mov	r3, sl
   11c5c:	ldr	r2, [sp, #76]	; 0x4c
   11c60:	ldr	r1, [r0]
   11c64:	mov	r0, #0
   11c68:	bl	113c8 <error@plt>
   11c6c:	mov	r0, #0
   11c70:	b	11b74 <__assert_fail@plt+0x5e4>
   11c74:	mov	lr, #112	; 0x70
   11c78:	mov	r0, #0
   11c7c:	mov	r1, #0
   11c80:	mov	ip, r5
   11c84:	mla	lr, lr, r6, r5
   11c88:	mov	r4, #1
   11c8c:	b	11c9c <__assert_fail@plt+0x70c>
   11c90:	add	ip, ip, #112	; 0x70
   11c94:	cmp	ip, lr
   11c98:	beq	11ccc <__assert_fail@plt+0x73c>
   11c9c:	ldr	r3, [ip]
   11ca0:	cmp	r3, #0
   11ca4:	bne	11c90 <__assert_fail@plt+0x700>
   11ca8:	ldr	r3, [ip, #24]
   11cac:	and	r3, r3, #61440	; 0xf000
   11cb0:	cmp	r3, #32768	; 0x8000
   11cb4:	movne	r4, #7
   11cb8:	bne	11c90 <__assert_fail@plt+0x700>
   11cbc:	ldrd	r2, [ip, #56]	; 0x38
   11cc0:	adds	r0, r0, r2
   11cc4:	adc	r1, r1, r3
   11cc8:	b	11c90 <__assert_fail@plt+0x700>
   11ccc:	mov	r5, #1
   11cd0:	b	11ce4 <__assert_fail@plt+0x754>
   11cd4:	mov	r2, #10
   11cd8:	mov	r3, #0
   11cdc:	add	r5, r5, #1
   11ce0:	bl	166cc <close_stdout@@Base+0x3428>
   11ce4:	cmp	r1, #0
   11ce8:	cmpeq	r0, #9
   11cec:	bhi	11cd4 <__assert_fail@plt+0x744>
   11cf0:	cmp	r5, r4
   11cf4:	movge	r2, r5
   11cf8:	movlt	r2, r4
   11cfc:	b	119e8 <__assert_fail@plt+0x458>
   11d00:	cmp	fp, #0
   11d04:	movne	r3, #0
   11d08:	andeq	r3, r9, #1
   11d0c:	cmp	r3, #0
   11d10:	beq	11d28 <__assert_fail@plt+0x798>
   11d14:	mov	r0, r8
   11d18:	bl	13234 <__assert_fail@plt+0x1ca4>
   11d1c:	subs	r1, r0, #0
   11d20:	movne	r9, #1
   11d24:	beq	11f84 <__assert_fail@plt+0x9f4>
   11d28:	ldr	ip, [sp, #60]	; 0x3c
   11d2c:	cmp	ip, #0
   11d30:	bne	11ebc <__assert_fail@plt+0x92c>
   11d34:	mov	r0, r8
   11d38:	bl	13234 <__assert_fail@plt+0x1ca4>
   11d3c:	cmp	r0, #1
   11d40:	bls	11da8 <__assert_fail@plt+0x818>
   11d44:	ldr	r3, [pc, #904]	; 120d4 <__assert_fail@plt+0xb44>
   11d48:	mov	r2, #5
   11d4c:	ldr	r1, [pc, #900]	; 120d8 <__assert_fail@plt+0xb48>
   11d50:	mov	r0, #0
   11d54:	add	r3, pc, r3
   11d58:	add	r1, pc, r1
   11d5c:	ldrd	r4, [r3, #32]
   11d60:	ldrd	r6, [r3, #24]
   11d64:	ldrd	sl, [r3, #16]
   11d68:	strd	r4, [sp, #40]	; 0x28
   11d6c:	ldrd	r4, [r3, #40]	; 0x28
   11d70:	strd	r4, [sp, #48]	; 0x30
   11d74:	ldrd	r4, [r3, #48]	; 0x30
   11d78:	bl	11308 <dcgettext@plt>
   11d7c:	ldrd	r2, [sp, #40]	; 0x28
   11d80:	mov	r1, fp
   11d84:	strd	r4, [sp, #16]
   11d88:	strd	r2, [sp]
   11d8c:	mov	r2, r6
   11d90:	mov	r3, r7
   11d94:	ldrd	r6, [sp, #48]	; 0x30
   11d98:	strd	r6, [sp, #8]
   11d9c:	str	r0, [sp, #24]
   11da0:	mov	r0, sl
   11da4:	bl	12230 <__assert_fail@plt+0xca0>
   11da8:	mov	r0, r8
   11dac:	bl	13254 <__assert_fail@plt+0x1cc4>
   11db0:	ldr	r0, [sp, #56]	; 0x38
   11db4:	bl	112b4 <free@plt>
   11db8:	ldr	r3, [pc, #796]	; 120dc <__assert_fail@plt+0xb4c>
   11dbc:	add	r3, pc, r3
   11dc0:	ldrb	r3, [r3, #60]	; 0x3c
   11dc4:	cmp	r3, #0
   11dc8:	bne	11e90 <__assert_fail@plt+0x900>
   11dcc:	rsbs	r0, r9, #1
   11dd0:	movcc	r0, #0
   11dd4:	bl	11434 <exit@plt>
   11dd8:	bl	11470 <__errno_location@plt>
   11ddc:	ldr	r1, [pc, #764]	; 120e0 <__assert_fail@plt+0xb50>
   11de0:	mov	r2, #5
   11de4:	mov	r9, sl
   11de8:	add	r1, pc, r1
   11dec:	ldr	r4, [r0]
   11df0:	mov	r0, sl
   11df4:	bl	11308 <dcgettext@plt>
   11df8:	mov	r5, r0
   11dfc:	mov	r0, fp
   11e00:	bl	14d74 <close_stdout@@Base+0x1ad0>
   11e04:	mov	r1, r4
   11e08:	mov	r2, r5
   11e0c:	mov	r3, r0
   11e10:	mov	r0, sl
   11e14:	bl	113c8 <error@plt>
   11e18:	b	11d28 <__assert_fail@plt+0x798>
   11e1c:	ldr	r3, [r4, r3]
   11e20:	ldr	r3, [r3]
   11e24:	cmp	r6, r3
   11e28:	addgt	r5, r5, r3, lsl #2
   11e2c:	rsbgt	r6, r3, r6
   11e30:	ldrle	r5, [pc, #684]	; 120e4 <__assert_fail@plt+0xb54>
   11e34:	movle	r6, #1
   11e38:	addle	r5, pc, r5
   11e3c:	addle	r5, r5, #56	; 0x38
   11e40:	mov	r0, r5
   11e44:	mov	ip, #0
   11e48:	str	ip, [sp, #60]	; 0x3c
   11e4c:	bl	13138 <__assert_fail@plt+0x1ba8>
   11e50:	mov	r8, r0
   11e54:	b	118a8 <__assert_fail@plt+0x318>
   11e58:	ldr	r3, [pc, #648]	; 120e8 <__assert_fail@plt+0xb58>
   11e5c:	add	r3, pc, r3
   11e60:	ldrb	r2, [r3, #8]
   11e64:	ldrb	r0, [r3]
   11e68:	ldrb	r1, [r3, #9]
   11e6c:	add	r0, r0, r2
   11e70:	ldrb	r2, [r3, #10]
   11e74:	add	r1, r0, r1
   11e78:	ldrb	r3, [r3, #11]
   11e7c:	add	r2, r1, r2
   11e80:	add	r3, r2, r3
   11e84:	cmp	r3, #1
   11e88:	bne	118e0 <__assert_fail@plt+0x350>
   11e8c:	b	119c0 <__assert_fail@plt+0x430>
   11e90:	mov	r0, #0
   11e94:	bl	11584 <close@plt>
   11e98:	cmp	r0, #0
   11e9c:	beq	11dcc <__assert_fail@plt+0x83c>
   11ea0:	bl	11470 <__errno_location@plt>
   11ea4:	ldr	r2, [pc, #576]	; 120ec <__assert_fail@plt+0xb5c>
   11ea8:	add	r2, pc, r2
   11eac:	ldr	r1, [r0]
   11eb0:	mov	r0, #1
   11eb4:	bl	113c8 <error@plt>
   11eb8:	b	11dcc <__assert_fail@plt+0x83c>
   11ebc:	add	r0, sp, #188	; 0xbc
   11ec0:	bl	1507c <close_stdout@@Base+0x1dd8>
   11ec4:	b	11d34 <__assert_fail@plt+0x7a4>
   11ec8:	ldrd	r0, [sp, #128]	; 0x80
   11ecc:	vmov.f64	d8, #96	; 0x3f000000  0.5
   11ed0:	bl	1666c <close_stdout@@Base+0x33c8>
   11ed4:	vmov	d9, r0, r1
   11ed8:	bl	13618 <close_stdout@@Base+0x374>
   11edc:	vldr	d7, [pc, #324]	; 12028 <__assert_fail@plt+0xa98>
   11ee0:	vmul.f64	d0, d0, d8
   11ee4:	vcmpe.f64	d0, d7
   11ee8:	vmrs	APSR_nzcv, fpscr
   11eec:	vmovgt.f64	d0, d7
   11ef0:	ble	11fa4 <__assert_fail@plt+0xa14>
   11ef4:	vcmpe.f64	d0, d9
   11ef8:	vmrs	APSR_nzcv, fpscr
   11efc:	blt	1188c <__assert_fail@plt+0x2fc>
   11f00:	add	r5, sp, #188	; 0xbc
   11f04:	mov	r0, r5
   11f08:	bl	14fec <close_stdout@@Base+0x1d48>
   11f0c:	mov	r0, r4
   11f10:	mov	r1, r5
   11f14:	bl	150ac <close_stdout@@Base+0x1e08>
   11f18:	cmp	r0, #0
   11f1c:	beq	11f30 <__assert_fail@plt+0x9a0>
   11f20:	mov	r0, r4
   11f24:	bl	15ac0 <close_stdout@@Base+0x281c>
   11f28:	cmp	r0, #0
   11f2c:	beq	11f64 <__assert_fail@plt+0x9d4>
   11f30:	ldr	r1, [pc, #440]	; 120f0 <__assert_fail@plt+0xb60>
   11f34:	mov	r2, #5
   11f38:	mov	r0, #0
   11f3c:	add	r1, pc, r1
   11f40:	bl	11308 <dcgettext@plt>
   11f44:	mov	r4, r0
   11f48:	mov	r0, fp
   11f4c:	bl	14ec8 <close_stdout@@Base+0x1c24>
   11f50:	mov	r2, r4
   11f54:	mov	r1, #0
   11f58:	mov	r3, r0
   11f5c:	mov	r0, #1
   11f60:	bl	113c8 <error@plt>
   11f64:	ldr	r5, [sp, #192]	; 0xc0
   11f68:	mov	r6, #1
   11f6c:	str	r6, [sp, #60]	; 0x3c
   11f70:	ldr	r6, [sp, #188]	; 0xbc
   11f74:	mov	r0, r5
   11f78:	bl	13138 <__assert_fail@plt+0x1ba8>
   11f7c:	mov	r8, r0
   11f80:	b	118a8 <__assert_fail@plt+0x318>
   11f84:	ldr	r3, [pc, #360]	; 120f4 <__assert_fail@plt+0xb64>
   11f88:	mov	ip, #1
   11f8c:	ldr	r2, [sp, #56]	; 0x38
   11f90:	add	r3, pc, r3
   11f94:	strb	ip, [r3, #60]	; 0x3c
   11f98:	bl	1245c <__assert_fail@plt+0xecc>
   11f9c:	mov	r9, r0
   11fa0:	b	11d28 <__assert_fail@plt+0x798>
   11fa4:	bl	13618 <close_stdout@@Base+0x374>
   11fa8:	vmul.f64	d0, d0, d8
   11fac:	b	11ef4 <__assert_fail@plt+0x964>
   11fb0:	bl	11470 <__errno_location@plt>
   11fb4:	ldr	r1, [pc, #316]	; 120f8 <__assert_fail@plt+0xb68>
   11fb8:	mov	r2, #5
   11fbc:	add	r1, pc, r1
   11fc0:	ldr	r5, [r0]
   11fc4:	mov	r0, r4
   11fc8:	bl	11308 <dcgettext@plt>
   11fcc:	mov	r6, r0
   11fd0:	mov	r0, fp
   11fd4:	bl	14ec8 <close_stdout@@Base+0x1c24>
   11fd8:	mov	r1, r5
   11fdc:	mov	r2, r6
   11fe0:	mov	r3, r0
   11fe4:	mov	r0, #1
   11fe8:	bl	113c8 <error@plt>
   11fec:	b	1185c <__assert_fail@plt+0x2cc>
   11ff0:	ldrb	r3, [sl]
   11ff4:	cmp	r3, #0
   11ff8:	bne	11af8 <__assert_fail@plt+0x568>
   11ffc:	ldr	r1, [sp, #64]	; 0x40
   12000:	mov	r0, fp
   12004:	mov	r2, #5
   12008:	bl	11308 <dcgettext@plt>
   1200c:	mov	r1, fp
   12010:	ldr	r2, [sp, #68]	; 0x44
   12014:	mov	r3, r0
   12018:	mov	r0, fp
   1201c:	bl	113c8 <error@plt>
   12020:	b	11ab8 <__assert_fail@plt+0x528>
   12024:	nop	{0}
   12028:	andeq	r0, r0, r0
   1202c:	cmnmi	r4, r0
   12030:	andeq	r7, r1, ip, lsr sl
   12034:	andeq	r0, r0, r8, lsr r1
   12038:	strdeq	r7, [r1], -ip
   1203c:	andeq	r5, r0, r4, ror pc
   12040:	andeq	r6, r0, ip, asr #32
   12044:	andeq	r7, r1, r4, asr #23
   12048:	andeq	r6, r0, r0, lsl r0
   1204c:			; <UNDEFINED> instruction: 0x00017bb4
   12050:	strdeq	r5, [r0], -ip
   12054:	muleq	r1, r8, fp
   12058:	andeq	r0, r0, r8, asr #2
   1205c:	andeq	r7, r1, ip, lsl #23
   12060:	andeq	r0, r0, ip, asr r1
   12064:	andeq	r7, r1, r0, asr fp
   12068:	andeq	r7, r1, r8, lsl #15
   1206c:	andeq	r0, r0, r4, ror r1
   12070:	andeq	r0, r0, r0, asr #2
   12074:	andeq	r5, r0, r8, lsr #29
   12078:	andeq	r5, r0, ip, lsr #29
   1207c:	andeq	r5, r0, r0, lsl #29
   12080:	andeq	r5, r0, r0, lsr #27
   12084:	strdeq	r7, [r1], -r8
   12088:	andeq	r0, r0, ip, lsr r1
   1208c:	andeq	r5, r0, ip, asr #28
   12090:	andeq	r5, r0, r4, lsl #26
   12094:	andeq	r0, r0, r4, asr #2
   12098:	ldrdeq	r5, [r0], -r8
   1209c:	andeq	r5, r0, ip, lsr pc
   120a0:	andeq	r5, r0, r4, ror #26
   120a4:	andeq	r5, r0, ip, ror #27
   120a8:			; <UNDEFINED> instruction: 0x000177bc
   120ac:	ldrdeq	r5, [r0], -r0
   120b0:	andeq	r5, r0, r8, asr #27
   120b4:	muleq	r1, r4, r7
   120b8:	andeq	r5, r0, r0, lsr #26
   120bc:	ldrdeq	r5, [r0], -r8
   120c0:	andeq	r5, r0, ip, asr fp
   120c4:	andeq	r5, r0, r8, asr #9
   120c8:	andeq	r5, r0, r4, asr #21
   120cc:	andeq	r5, r0, r4, ror #21
   120d0:	andeq	r0, r0, r8, asr r1
   120d4:	andeq	r7, r1, r4, ror r4
   120d8:	andeq	r5, r0, r0, lsr sl
   120dc:	andeq	r7, r1, ip, lsl #8
   120e0:	strdeq	r5, [r0], -r0
   120e4:	muleq	r1, r0, r3
   120e8:	andeq	r7, r1, ip, ror #6
   120ec:	andeq	r5, r0, r8, ror #17
   120f0:	andeq	r5, r0, ip, ror r7
   120f4:	andeq	r7, r1, r8, lsr r2
   120f8:	andeq	r5, r0, r0, ror #13
   120fc:	mov	fp, #0
   12100:	mov	lr, #0
   12104:	pop	{r1}		; (ldr r1, [sp], #4)
   12108:	mov	r2, sp
   1210c:	push	{r2}		; (str r2, [sp, #-4]!)
   12110:	push	{r0}		; (str r0, [sp, #-4]!)
   12114:	ldr	ip, [pc, #16]	; 1212c <__assert_fail@plt+0xb9c>
   12118:	push	{ip}		; (str ip, [sp, #-4]!)
   1211c:	ldr	r0, [pc, #12]	; 12130 <__assert_fail@plt+0xba0>
   12120:	ldr	r3, [pc, #12]	; 12134 <__assert_fail@plt+0xba4>
   12124:	bl	113f8 <__libc_start_main@plt>
   12128:	bl	11578 <abort@plt>
   1212c:	strheq	r7, [r1], -r0
   12130:	andeq	r1, r1, r0, lsr #11
   12134:	andeq	r7, r1, ip, asr #32
   12138:	ldr	r3, [pc, #20]	; 12154 <__assert_fail@plt+0xbc4>
   1213c:	ldr	r2, [pc, #20]	; 12158 <__assert_fail@plt+0xbc8>
   12140:	add	r3, pc, r3
   12144:	ldr	r2, [r3, r2]
   12148:	cmp	r2, #0
   1214c:	bxeq	lr
   12150:	b	11410 <__gmon_start__@plt>
   12154:			; <UNDEFINED> instruction: 0x00016eb8
   12158:	andeq	r0, r0, r0, asr r1
   1215c:	push	{r3, lr}
   12160:	movw	r0, #37316	; 0x91c4
   12164:	ldr	r3, [pc, #36]	; 12190 <__assert_fail@plt+0xc00>
   12168:	movt	r0, #2
   1216c:	rsb	r3, r0, r3
   12170:	cmp	r3, #6
   12174:	popls	{r3, pc}
   12178:	movw	r3, #0
   1217c:	movt	r3, #0
   12180:	cmp	r3, #0
   12184:	popeq	{r3, pc}
   12188:	blx	r3
   1218c:	pop	{r3, pc}
   12190:	andeq	r9, r2, r7, asr #3
   12194:	push	{r3, lr}
   12198:	movw	r0, #37316	; 0x91c4
   1219c:	movw	r3, #37316	; 0x91c4
   121a0:	movt	r0, #2
   121a4:	movt	r3, #2
   121a8:	rsb	r3, r0, r3
   121ac:	asr	r3, r3, #2
   121b0:	add	r3, r3, r3, lsr #31
   121b4:	asrs	r1, r3, #1
   121b8:	popeq	{r3, pc}
   121bc:	movw	r2, #0
   121c0:	movt	r2, #0
   121c4:	cmp	r2, #0
   121c8:	popeq	{r3, pc}
   121cc:	blx	r2
   121d0:	pop	{r3, pc}
   121d4:	push	{r4, lr}
   121d8:	movw	r4, #37320	; 0x91c8
   121dc:	movt	r4, #2
   121e0:	ldrb	r3, [r4]
   121e4:	cmp	r3, #0
   121e8:	popne	{r4, pc}
   121ec:	bl	1215c <__assert_fail@plt+0xbcc>
   121f0:	mov	r3, #1
   121f4:	strb	r3, [r4]
   121f8:	pop	{r4, pc}
   121fc:	movw	r0, #36432	; 0x8e50
   12200:	movt	r0, #2
   12204:	push	{r3, lr}
   12208:	ldr	r3, [r0]
   1220c:	cmp	r3, #0
   12210:	beq	12228 <__assert_fail@plt+0xc98>
   12214:	movw	r3, #0
   12218:	movt	r3, #0
   1221c:	cmp	r3, #0
   12220:	beq	12228 <__assert_fail@plt+0xc98>
   12224:	blx	r3
   12228:	pop	{r3, lr}
   1222c:	b	12194 <__assert_fail@plt+0xc04>
   12230:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12234:	mov	r4, r2
   12238:	ldr	r6, [pc, #484]	; 12424 <__assert_fail@plt+0xe94>
   1223c:	mov	r5, r3
   12240:	ldr	r2, [pc, #480]	; 12428 <__assert_fail@plt+0xe98>
   12244:	sub	sp, sp, #36	; 0x24
   12248:	add	r6, pc, r6
   1224c:	ldr	r3, [pc, #472]	; 1242c <__assert_fail@plt+0xe9c>
   12250:	ldr	r7, [pc, #472]	; 12430 <__assert_fail@plt+0xea0>
   12254:	ldr	r8, [r6, r2]
   12258:	add	r3, pc, r3
   1225c:	add	r7, pc, r7
   12260:	ldr	r9, [sp, #96]	; 0x60
   12264:	ldrb	ip, [r3]
   12268:	add	r7, r7, #1
   1226c:	ldr	r2, [r8]
   12270:	cmp	ip, #0
   12274:	str	r2, [sp, #28]
   12278:	bne	1232c <__assert_fail@plt+0xd9c>
   1227c:	ldr	r3, [pc, #432]	; 12434 <__assert_fail@plt+0xea4>
   12280:	add	r3, pc, r3
   12284:	ldrb	r2, [r3, #8]
   12288:	cmp	r2, #0
   1228c:	bne	123e0 <__assert_fail@plt+0xe50>
   12290:	ldr	r3, [pc, #416]	; 12438 <__assert_fail@plt+0xea8>
   12294:	add	r3, pc, r3
   12298:	ldrb	r2, [r3, #9]
   1229c:	cmp	r2, #0
   122a0:	bne	123b0 <__assert_fail@plt+0xe20>
   122a4:	ldr	r3, [pc, #400]	; 1243c <__assert_fail@plt+0xeac>
   122a8:	add	r3, pc, r3
   122ac:	ldrb	r2, [r3, #10]
   122b0:	cmp	r2, #0
   122b4:	bne	12380 <__assert_fail@plt+0xdf0>
   122b8:	ldr	r3, [pc, #384]	; 12440 <__assert_fail@plt+0xeb0>
   122bc:	add	r3, pc, r3
   122c0:	ldrb	r2, [r3, #11]
   122c4:	cmp	r2, #0
   122c8:	bne	12358 <__assert_fail@plt+0xdc8>
   122cc:	cmp	r9, #0
   122d0:	beq	122e8 <__assert_fail@plt+0xd58>
   122d4:	ldr	r1, [pc, #360]	; 12444 <__assert_fail@plt+0xeb4>
   122d8:	mov	r2, r9
   122dc:	mov	r0, #1
   122e0:	add	r1, pc, r1
   122e4:	bl	114b8 <__printf_chk@plt>
   122e8:	ldr	r3, [pc, #344]	; 12448 <__assert_fail@plt+0xeb8>
   122ec:	ldr	r3, [r6, r3]
   122f0:	ldr	r0, [r3]
   122f4:	ldr	r3, [r0, #20]
   122f8:	ldr	r2, [r0, #24]
   122fc:	cmp	r3, r2
   12300:	addcc	r1, r3, #1
   12304:	strcc	r1, [r0, #20]
   12308:	movcc	r2, #10
   1230c:	strbcc	r2, [r3]
   12310:	bcs	12418 <__assert_fail@plt+0xe88>
   12314:	ldr	r2, [sp, #28]
   12318:	ldr	r3, [r8]
   1231c:	cmp	r2, r3
   12320:	bne	12414 <__assert_fail@plt+0xe84>
   12324:	add	sp, sp, #36	; 0x24
   12328:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1232c:	add	r2, sp, #4
   12330:	ldr	sl, [r3, #4]
   12334:	bl	134a0 <close_stdout@@Base+0x1fc>
   12338:	ldr	r7, [pc, #268]	; 1244c <__assert_fail@plt+0xebc>
   1233c:	add	r7, pc, r7
   12340:	mov	r2, sl
   12344:	mov	r3, r0
   12348:	mov	r0, #1
   1234c:	add	r1, r7, r0
   12350:	bl	114b8 <__printf_chk@plt>
   12354:	b	1227c <__assert_fail@plt+0xcec>
   12358:	ldrd	r0, [sp, #88]	; 0x58
   1235c:	add	r2, sp, #4
   12360:	ldr	r4, [r3, #4]
   12364:	bl	134a0 <close_stdout@@Base+0x1fc>
   12368:	mov	r1, r7
   1236c:	mov	r2, r4
   12370:	mov	r3, r0
   12374:	mov	r0, #1
   12378:	bl	114b8 <__printf_chk@plt>
   1237c:	b	122cc <__assert_fail@plt+0xd3c>
   12380:	ldrd	r0, [sp, #80]	; 0x50
   12384:	add	r2, sp, #4
   12388:	ldr	r4, [r3, #4]
   1238c:	bl	134a0 <close_stdout@@Base+0x1fc>
   12390:	mov	r1, r7
   12394:	ldr	r7, [pc, #180]	; 12450 <__assert_fail@plt+0xec0>
   12398:	mov	r2, r4
   1239c:	add	r7, pc, r7
   123a0:	mov	r3, r0
   123a4:	mov	r0, #1
   123a8:	bl	114b8 <__printf_chk@plt>
   123ac:	b	122b8 <__assert_fail@plt+0xd28>
   123b0:	ldrd	r0, [sp, #72]	; 0x48
   123b4:	add	r2, sp, #4
   123b8:	ldr	r4, [r3, #4]
   123bc:	bl	134a0 <close_stdout@@Base+0x1fc>
   123c0:	mov	r1, r7
   123c4:	ldr	r7, [pc, #136]	; 12454 <__assert_fail@plt+0xec4>
   123c8:	mov	r2, r4
   123cc:	add	r7, pc, r7
   123d0:	mov	r3, r0
   123d4:	mov	r0, #1
   123d8:	bl	114b8 <__printf_chk@plt>
   123dc:	b	122a4 <__assert_fail@plt+0xd14>
   123e0:	mov	r1, r5
   123e4:	add	r2, sp, #4
   123e8:	mov	r0, r4
   123ec:	ldr	sl, [r3, #4]
   123f0:	bl	134a0 <close_stdout@@Base+0x1fc>
   123f4:	mov	r1, r7
   123f8:	ldr	r7, [pc, #88]	; 12458 <__assert_fail@plt+0xec8>
   123fc:	mov	r2, sl
   12400:	add	r7, pc, r7
   12404:	mov	r3, r0
   12408:	mov	r0, #1
   1240c:	bl	114b8 <__printf_chk@plt>
   12410:	b	12290 <__assert_fail@plt+0xd00>
   12414:	bl	11314 <__stack_chk_fail@plt>
   12418:	mov	r1, #10
   1241c:	bl	1150c <__overflow@plt>
   12420:	b	12314 <__assert_fail@plt+0xd84>
   12424:			; <UNDEFINED> instruction: 0x00016db0
   12428:	andeq	r0, r0, r8, lsr r1
   1242c:	andeq	r6, r1, r0, ror pc
   12430:	andeq	r4, r0, ip, lsl #29
   12434:	andeq	r6, r1, r8, asr #30
   12438:	andeq	r6, r1, r4, lsr pc
   1243c:	andeq	r6, r1, r0, lsr #30
   12440:	andeq	r6, r1, ip, lsl #30
   12444:	andeq	r4, r0, r8, lsl lr
   12448:	andeq	r0, r0, ip, asr r1
   1244c:	andeq	r4, r0, ip, lsr #27
   12450:	andeq	r4, r0, ip, asr #26
   12454:	andeq	r4, r0, ip, lsl sp
   12458:	andeq	r4, r0, r8, ror #25
   1245c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12460:	sub	sp, sp, #16384	; 0x4000
   12464:	ldr	fp, [pc, #2704]	; 12efc <__assert_fail@plt+0x196c>
   12468:	sub	sp, sp, #164	; 0xa4
   1246c:	ldr	r3, [pc, #2700]	; 12f00 <__assert_fail@plt+0x1970>
   12470:	cmp	r1, #0
   12474:	add	fp, pc, fp
   12478:	str	r1, [sp, #112]	; 0x70
   1247c:	str	r0, [sp, #108]	; 0x6c
   12480:	add	r0, sp, #16384	; 0x4000
   12484:	ldr	r3, [fp, r3]
   12488:	mov	r6, r2
   1248c:	ldrne	r7, [sp, #112]	; 0x70
   12490:	str	r3, [sp, #116]	; 0x74
   12494:	ldr	r3, [r3]
   12498:	strne	r7, [sp, #124]	; 0x7c
   1249c:	str	r3, [r0, #156]	; 0x9c
   124a0:	beq	12d9c <__assert_fail@plt+0x180c>
   124a4:	bl	11398 <__ctype_get_mb_cur_max@plt>
   124a8:	cmp	r0, #1
   124ac:	bls	12960 <__assert_fail@plt+0x13d0>
   124b0:	ldr	r3, [pc, #2636]	; 12f04 <__assert_fail@plt+0x1974>
   124b4:	add	r3, pc, r3
   124b8:	ldrb	r7, [r3, #10]
   124bc:	ldrb	r3, [r3, #9]
   124c0:	eor	r1, r7, #1
   124c4:	eor	r4, r3, #1
   124c8:	orr	r1, r3, r1
   124cc:	and	r7, r4, r7
   124d0:	str	r3, [sp, #120]	; 0x78
   124d4:	ldr	r3, [pc, #2604]	; 12f08 <__assert_fail@plt+0x1978>
   124d8:	add	r3, pc, r3
   124dc:	ldrb	r2, [r3, #8]
   124e0:	cmp	r2, #0
   124e4:	ldrbeq	r5, [r3, #11]
   124e8:	movne	r5, #1
   124ec:	cmp	r1, #0
   124f0:	bne	12508 <__assert_fail@plt+0xf78>
   124f4:	ldr	r3, [pc, #2576]	; 12f0c <__assert_fail@plt+0x197c>
   124f8:	add	r3, pc, r3
   124fc:	ldrb	r3, [r3]
   12500:	cmp	r3, #0
   12504:	beq	125c8 <__assert_fail@plt+0x1038>
   12508:	mov	r2, #0
   1250c:	mov	r3, #0
   12510:	mov	r1, #2
   12514:	strd	r2, [sp]
   12518:	str	r1, [sp, #8]
   1251c:	ldr	r0, [sp, #108]	; 0x6c
   12520:	bl	13460 <close_stdout@@Base+0x1bc>
   12524:	cmp	r7, #0
   12528:	beq	12540 <__assert_fail@plt+0xfb0>
   1252c:	ldr	r3, [pc, #2524]	; 12f10 <__assert_fail@plt+0x1980>
   12530:	add	r3, pc, r3
   12534:	ldrb	r3, [r3]
   12538:	cmp	r3, #0
   1253c:	beq	125d4 <__assert_fail@plt+0x1044>
   12540:	eor	r5, r5, #1
   12544:	tst	r4, r5
   12548:	beq	126a0 <__assert_fail@plt+0x1110>
   1254c:	ldr	fp, [sp, #108]	; 0x6c
   12550:	mov	r9, #0
   12554:	mov	r8, #0
   12558:	mov	r4, #0
   1255c:	strd	r8, [sp, #80]	; 0x50
   12560:	mov	r5, #0
   12564:	add	r9, sp, #152	; 0x98
   12568:	mov	r6, r4
   1256c:	mov	r7, r5
   12570:	mov	r0, fp
   12574:	mov	r1, r9
   12578:	mov	r2, #16384	; 0x4000
   1257c:	bl	15254 <close_stdout@@Base+0x1fb0>
   12580:	subs	sl, r0, #0
   12584:	beq	12834 <__assert_fail@plt+0x12a4>
   12588:	cmn	sl, #1
   1258c:	beq	12924 <__assert_fail@plt+0x1394>
   12590:	add	r8, r9, sl
   12594:	mov	r0, r9
   12598:	b	125a8 <__assert_fail@plt+0x1018>
   1259c:	adds	r4, r4, #1
   125a0:	add	r0, r0, #1
   125a4:	adc	r5, r5, #0
   125a8:	mov	r1, #10
   125ac:	rsb	r2, r0, r8
   125b0:	bl	114dc <memchr@plt>
   125b4:	cmp	r0, #0
   125b8:	bne	1259c <__assert_fail@plt+0x100c>
   125bc:	adds	r6, r6, sl
   125c0:	adc	r7, r7, #0
   125c4:	b	12570 <__assert_fail@plt+0xfe0>
   125c8:	cmp	r5, #0
   125cc:	beq	12524 <__assert_fail@plt+0xf94>
   125d0:	b	12508 <__assert_fail@plt+0xf78>
   125d4:	cmp	r5, #0
   125d8:	bne	126a0 <__assert_fail@plt+0x1110>
   125dc:	ldr	r0, [r6]
   125e0:	cmp	r0, #0
   125e4:	ble	125fc <__assert_fail@plt+0x106c>
   125e8:	mov	r0, #3
   125ec:	ldr	r1, [sp, #108]	; 0x6c
   125f0:	add	r2, r6, #8
   125f4:	bl	11374 <__fxstat64@plt>
   125f8:	str	r0, [r6]
   125fc:	cmp	r0, #0
   12600:	bne	12614 <__assert_fail@plt+0x1084>
   12604:	ldr	r3, [r6, #24]
   12608:	and	r3, r3, #61440	; 0xf000
   1260c:	cmp	r3, #32768	; 0x8000
   12610:	beq	12e68 <__assert_fail@plt+0x18d8>
   12614:	mov	r5, #0
   12618:	mov	r1, #2
   1261c:	str	r5, [sp]
   12620:	mov	r2, r5
   12624:	str	r5, [sp, #4]
   12628:	mov	r3, r5
   1262c:	ldr	r0, [sp, #108]	; 0x6c
   12630:	add	r9, sp, #152	; 0x98
   12634:	str	r1, [sp, #8]
   12638:	bl	13460 <close_stdout@@Base+0x1bc>
   1263c:	str	r5, [sp, #80]	; 0x50
   12640:	str	r5, [sp, #84]	; 0x54
   12644:	ldrd	r4, [sp, #80]	; 0x50
   12648:	ldr	r6, [sp, #108]	; 0x6c
   1264c:	b	12660 <__assert_fail@plt+0x10d0>
   12650:	cmn	r0, #1
   12654:	beq	12db8 <__assert_fail@plt+0x1828>
   12658:	adds	r4, r4, r0
   1265c:	adc	r5, r5, #0
   12660:	mov	r0, r6
   12664:	mov	r1, r9
   12668:	mov	r2, #16384	; 0x4000
   1266c:	bl	15254 <close_stdout@@Base+0x1fb0>
   12670:	cmp	r0, #0
   12674:	bne	12650 <__assert_fail@plt+0x10c0>
   12678:	mov	sl, #0
   1267c:	mov	fp, #0
   12680:	mov	r9, #1
   12684:	strd	r4, [sp, #80]	; 0x50
   12688:	strd	sl, [sp, #88]	; 0x58
   1268c:	mov	r6, sl
   12690:	mov	r7, fp
   12694:	mov	r4, sl
   12698:	mov	r5, fp
   1269c:	b	12850 <__assert_fail@plt+0x12c0>
   126a0:	bl	11398 <__ctype_get_mb_cur_max@plt>
   126a4:	cmp	r0, #1
   126a8:	bls	12a38 <__assert_fail@plt+0x14a8>
   126ac:	mov	r8, #0
   126b0:	mov	r9, #0
   126b4:	strd	r8, [sp, #56]	; 0x38
   126b8:	add	r9, sp, #16384	; 0x4000
   126bc:	add	r9, r9, #160	; 0xa0
   126c0:	movw	r3, #49128	; 0xbfe8
   126c4:	movt	r3, #65535	; 0xffff
   126c8:	mov	r2, #0
   126cc:	add	r7, sp, #136	; 0x88
   126d0:	mov	r0, #0
   126d4:	mov	r1, #0
   126d8:	str	r2, [r9, r3]
   126dc:	strd	r0, [sp, #88]	; 0x58
   126e0:	movw	r9, #49124	; 0xbfe4
   126e4:	mov	r6, r2
   126e8:	movt	r9, #65535	; 0xffff
   126ec:	mov	r8, r2
   126f0:	str	r9, [sp, #68]	; 0x44
   126f4:	add	r9, sp, #152	; 0x98
   126f8:	str	r9, [sp, #88]	; 0x58
   126fc:	mov	r9, r2
   12700:	add	ip, sp, #160	; 0xa0
   12704:	mov	r4, r0
   12708:	mov	r5, r1
   1270c:	str	ip, [sp, #104]	; 0x68
   12710:	add	ip, sp, #144	; 0x90
   12714:	str	r2, [r7, #4]
   12718:	strd	r0, [sp, #72]	; 0x48
   1271c:	strd	r0, [sp, #80]	; 0x50
   12720:	strd	r0, [sp, #48]	; 0x30
   12724:	str	ip, [sp, #64]	; 0x40
   12728:	strd	r4, [sp, #96]	; 0x60
   1272c:	ldr	ip, [sp, #88]	; 0x58
   12730:	rsb	r2, r6, #16384	; 0x4000
   12734:	ldr	r0, [sp, #108]	; 0x6c
   12738:	add	r1, ip, r6
   1273c:	bl	15254 <close_stdout@@Base+0x1fb0>
   12740:	cmp	r0, #0
   12744:	beq	12d34 <__assert_fail@plt+0x17a4>
   12748:	cmn	r0, #1
   1274c:	beq	12d70 <__assert_fail@plt+0x17e0>
   12750:	ldrd	r2, [sp, #80]	; 0x50
   12754:	add	r6, r6, r0
   12758:	ldr	sl, [sp, #88]	; 0x58
   1275c:	mov	r1, r9
   12760:	adds	r2, r2, r0
   12764:	str	r8, [sp, #36]	; 0x24
   12768:	adc	r3, r3, #0
   1276c:	strd	r2, [sp, #80]	; 0x50
   12770:	cmp	r1, #0
   12774:	bne	12bec <__assert_fail@plt+0x165c>
   12778:	ldr	r2, [pc, #1940]	; 12f14 <__assert_fail@plt+0x1984>
   1277c:	ldrb	r3, [sl]
   12780:	ldr	r0, [fp, r2]
   12784:	and	r2, r3, #31
   12788:	lsr	lr, r3, #5
   1278c:	ldr	r0, [r0, lr, lsl #2]
   12790:	lsr	r2, r0, r2
   12794:	tst	r2, #1
   12798:	beq	12bec <__assert_fail@plt+0x165c>
   1279c:	add	r9, sp, #16384	; 0x4000
   127a0:	ldr	r8, [sp, #68]	; 0x44
   127a4:	add	r9, r9, #160	; 0xa0
   127a8:	mov	r0, r3
   127ac:	str	r3, [r9, r8]
   127b0:	mov	r9, #1
   127b4:	adds	r4, r4, #1
   127b8:	sub	r2, r0, #9
   127bc:	add	sl, sl, r9
   127c0:	rsb	r6, r9, r6
   127c4:	adc	r5, r5, #0
   127c8:	cmp	r2, #23
   127cc:	addls	pc, pc, r2, lsl #2
   127d0:	b	12ef4 <__assert_fail@plt+0x1964>
   127d4:	b	12a00 <__assert_fail@plt+0x1470>
   127d8:	b	12990 <__assert_fail@plt+0x1400>
   127dc:	b	129c0 <__assert_fail@plt+0x1430>
   127e0:	b	129a0 <__assert_fail@plt+0x1410>
   127e4:	b	129a0 <__assert_fail@plt+0x1410>
   127e8:	b	12ef4 <__assert_fail@plt+0x1964>
   127ec:	b	12ef4 <__assert_fail@plt+0x1964>
   127f0:	b	12ef4 <__assert_fail@plt+0x1964>
   127f4:	b	12ef4 <__assert_fail@plt+0x1964>
   127f8:	b	12ef4 <__assert_fail@plt+0x1964>
   127fc:	b	12ef4 <__assert_fail@plt+0x1964>
   12800:	b	12ef4 <__assert_fail@plt+0x1964>
   12804:	b	12ef4 <__assert_fail@plt+0x1964>
   12808:	b	12ef4 <__assert_fail@plt+0x1964>
   1280c:	b	12ef4 <__assert_fail@plt+0x1964>
   12810:	b	12ef4 <__assert_fail@plt+0x1964>
   12814:	b	12ef4 <__assert_fail@plt+0x1964>
   12818:	b	12ef4 <__assert_fail@plt+0x1964>
   1281c:	b	12ef4 <__assert_fail@plt+0x1964>
   12820:	b	12ef4 <__assert_fail@plt+0x1964>
   12824:	b	12ef4 <__assert_fail@plt+0x1964>
   12828:	b	12ef4 <__assert_fail@plt+0x1964>
   1282c:	b	12ef4 <__assert_fail@plt+0x1964>
   12830:	b	12a24 <__assert_fail@plt+0x1494>
   12834:	mov	sl, #0
   12838:	mov	fp, #0
   1283c:	strd	r6, [sp, #80]	; 0x50
   12840:	mov	r9, #1
   12844:	mov	r6, sl
   12848:	mov	r7, fp
   1284c:	strd	sl, [sp, #88]	; 0x58
   12850:	ldr	r3, [pc, #1728]	; 12f18 <__assert_fail@plt+0x1988>
   12854:	ldr	r8, [sp, #120]	; 0x78
   12858:	add	r3, pc, r3
   1285c:	ldrb	r3, [r3, #9]
   12860:	strd	sl, [sp, #16]
   12864:	cmp	r8, r3
   12868:	ldr	r8, [sp, #112]	; 0x70
   1286c:	ldrdlt	r0, [sp, #80]	; 0x50
   12870:	str	r8, [sp, #24]
   12874:	strdlt	r0, [sp, #88]	; 0x58
   12878:	mov	r0, r4
   1287c:	ldrd	r2, [sp, #88]	; 0x58
   12880:	mov	r1, r5
   12884:	strd	r2, [sp]
   12888:	ldrd	r2, [sp, #80]	; 0x50
   1288c:	strd	r2, [sp, #8]
   12890:	mov	r2, r6
   12894:	mov	r3, r7
   12898:	bl	12230 <__assert_fail@plt+0xca0>
   1289c:	ldr	r1, [pc, #1656]	; 12f1c <__assert_fail@plt+0x198c>
   128a0:	ldr	r8, [sp, #116]	; 0x74
   128a4:	mov	r0, r9
   128a8:	add	r1, pc, r1
   128ac:	ldrd	r2, [r1, #16]
   128b0:	adds	r2, r2, r4
   128b4:	adc	r3, r3, r5
   128b8:	strd	r2, [r1, #16]
   128bc:	ldrd	r2, [r1, #24]
   128c0:	ldrd	r4, [r1, #32]
   128c4:	adds	r2, r2, r6
   128c8:	adc	r3, r3, r7
   128cc:	ldrd	r6, [sp, #88]	; 0x58
   128d0:	strd	r2, [r1, #24]
   128d4:	adds	r4, r4, r6
   128d8:	ldrd	r2, [r1, #40]	; 0x28
   128dc:	adc	r5, r5, r7
   128e0:	ldrd	r6, [sp, #80]	; 0x50
   128e4:	strd	r4, [r1, #32]
   128e8:	adds	r2, r2, r6
   128ec:	adc	r3, r3, r7
   128f0:	ldrd	r6, [r1, #48]	; 0x30
   128f4:	strd	r2, [r1, #40]	; 0x28
   128f8:	cmp	fp, r7
   128fc:	cmpeq	sl, r6
   12900:	add	r7, sp, #16384	; 0x4000
   12904:	strdhi	sl, [r1, #48]	; 0x30
   12908:	ldr	r2, [r7, #156]	; 0x9c
   1290c:	ldr	r3, [r8]
   12910:	cmp	r2, r3
   12914:	bne	12ef0 <__assert_fail@plt+0x1960>
   12918:	add	sp, sp, #16384	; 0x4000
   1291c:	add	sp, sp, #164	; 0xa4
   12920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12924:	strd	r6, [sp, #80]	; 0x50
   12928:	bl	11470 <__errno_location@plt>
   1292c:	ldr	r2, [pc, #1516]	; 12f20 <__assert_fail@plt+0x1990>
   12930:	mov	r9, #0
   12934:	mov	sl, #0
   12938:	mov	fp, #0
   1293c:	ldr	r3, [sp, #124]	; 0x7c
   12940:	add	r2, pc, r2
   12944:	strd	sl, [sp, #88]	; 0x58
   12948:	mov	r6, sl
   1294c:	mov	r7, fp
   12950:	ldr	r1, [r0]
   12954:	mov	r0, r9
   12958:	bl	113c8 <error@plt>
   1295c:	b	12850 <__assert_fail@plt+0x12c0>
   12960:	ldr	r3, [pc, #1468]	; 12f24 <__assert_fail@plt+0x1994>
   12964:	mov	r8, #0
   12968:	mov	r4, #1
   1296c:	str	r8, [sp, #120]	; 0x78
   12970:	add	r3, pc, r3
   12974:	ldrb	r2, [r3, #10]
   12978:	cmp	r2, #0
   1297c:	ldrbeq	r7, [r3, #9]
   12980:	movne	r7, #1
   12984:	movne	r1, #0
   12988:	eoreq	r1, r7, #1
   1298c:	b	124d4 <__assert_fail@plt+0xf44>
   12990:	ldrd	r8, [sp, #96]	; 0x60
   12994:	adds	r8, r8, #1
   12998:	adc	r9, r9, #0
   1299c:	strd	r8, [sp, #96]	; 0x60
   129a0:	ldrd	r2, [sp, #56]	; 0x38
   129a4:	ldrd	r8, [sp, #72]	; 0x48
   129a8:	cmp	r9, r3
   129ac:	cmpeq	r8, r2
   129b0:	mov	r8, #0
   129b4:	mov	r9, #0
   129b8:	strdcc	r2, [sp, #72]	; 0x48
   129bc:	strd	r8, [sp, #56]	; 0x38
   129c0:	ldr	r8, [sp, #36]	; 0x24
   129c4:	mov	r9, #0
   129c8:	mov	r3, r9
   129cc:	mov	r9, #0
   129d0:	str	r9, [sp, #36]	; 0x24
   129d4:	uxtb	r8, r8
   129d8:	mov	r2, r8
   129dc:	ldrd	r8, [sp, #48]	; 0x30
   129e0:	adds	r8, r8, r2
   129e4:	adc	r9, r9, r3
   129e8:	strd	r8, [sp, #48]	; 0x30
   129ec:	cmp	r6, #0
   129f0:	bne	12770 <__assert_fail@plt+0x11e0>
   129f4:	ldr	r8, [sp, #36]	; 0x24
   129f8:	mov	r9, r1
   129fc:	b	1272c <__assert_fail@plt+0x119c>
   12a00:	ldrd	r2, [sp, #56]	; 0x38
   12a04:	mvn	r8, #7
   12a08:	mvn	r9, #0
   12a0c:	and	r2, r2, r8
   12a10:	and	r3, r3, r9
   12a14:	adds	r8, r2, #8
   12a18:	adc	r9, r3, #0
   12a1c:	strd	r8, [sp, #56]	; 0x38
   12a20:	b	129c0 <__assert_fail@plt+0x1430>
   12a24:	ldrd	r8, [sp, #56]	; 0x38
   12a28:	adds	r8, r8, #1
   12a2c:	adc	r9, r9, #0
   12a30:	strd	r8, [sp, #56]	; 0x38
   12a34:	b	129c0 <__assert_fail@plt+0x1430>
   12a38:	mov	sl, #0
   12a3c:	mov	fp, #0
   12a40:	mov	r6, sl
   12a44:	mov	r7, fp
   12a48:	mov	r8, #0
   12a4c:	mov	r4, sl
   12a50:	mov	r5, fp
   12a54:	add	ip, sp, #151	; 0x97
   12a58:	add	r9, sp, #152	; 0x98
   12a5c:	strd	sl, [sp, #56]	; 0x38
   12a60:	strd	sl, [sp, #80]	; 0x50
   12a64:	str	ip, [sp, #64]	; 0x40
   12a68:	strd	r4, [sp, #48]	; 0x30
   12a6c:	str	r9, [sp, #68]	; 0x44
   12a70:	ldr	r0, [sp, #108]	; 0x6c
   12a74:	mov	r2, #16384	; 0x4000
   12a78:	ldr	r1, [sp, #68]	; 0x44
   12a7c:	bl	15254 <close_stdout@@Base+0x1fb0>
   12a80:	cmp	r0, #0
   12a84:	beq	12dfc <__assert_fail@plt+0x186c>
   12a88:	cmn	r0, #1
   12a8c:	beq	12e3c <__assert_fail@plt+0x18ac>
   12a90:	ldrd	r2, [sp, #80]	; 0x50
   12a94:	strd	r4, [sp, #56]	; 0x38
   12a98:	mov	r5, r8
   12a9c:	adds	r2, r2, r0
   12aa0:	ldrd	r8, [sp, #56]	; 0x38
   12aa4:	adc	r3, r3, #0
   12aa8:	strd	r2, [sp, #80]	; 0x50
   12aac:	ldr	r3, [sp, #64]	; 0x40
   12ab0:	add	r1, r3, r0
   12ab4:	mov	r4, r1
   12ab8:	ldrb	ip, [r3, #1]!
   12abc:	sub	r0, ip, #9
   12ac0:	cmp	r0, #23
   12ac4:	addls	pc, pc, r0, lsl #2
   12ac8:	b	12bac <__assert_fail@plt+0x161c>
   12acc:	b	12b84 <__assert_fail@plt+0x15f4>
   12ad0:	b	12b2c <__assert_fail@plt+0x159c>
   12ad4:	b	12b54 <__assert_fail@plt+0x15c4>
   12ad8:	b	12b3c <__assert_fail@plt+0x15ac>
   12adc:	b	12b3c <__assert_fail@plt+0x15ac>
   12ae0:	b	12bac <__assert_fail@plt+0x161c>
   12ae4:	b	12bac <__assert_fail@plt+0x161c>
   12ae8:	b	12bac <__assert_fail@plt+0x161c>
   12aec:	b	12bac <__assert_fail@plt+0x161c>
   12af0:	b	12bac <__assert_fail@plt+0x161c>
   12af4:	b	12bac <__assert_fail@plt+0x161c>
   12af8:	b	12bac <__assert_fail@plt+0x161c>
   12afc:	b	12bac <__assert_fail@plt+0x161c>
   12b00:	b	12bac <__assert_fail@plt+0x161c>
   12b04:	b	12bac <__assert_fail@plt+0x161c>
   12b08:	b	12bac <__assert_fail@plt+0x161c>
   12b0c:	b	12bac <__assert_fail@plt+0x161c>
   12b10:	b	12bac <__assert_fail@plt+0x161c>
   12b14:	b	12bac <__assert_fail@plt+0x161c>
   12b18:	b	12bac <__assert_fail@plt+0x161c>
   12b1c:	b	12bac <__assert_fail@plt+0x161c>
   12b20:	b	12bac <__assert_fail@plt+0x161c>
   12b24:	b	12bac <__assert_fail@plt+0x161c>
   12b28:	b	12ba0 <__assert_fail@plt+0x1610>
   12b2c:	ldrd	r0, [sp, #48]	; 0x30
   12b30:	adds	r0, r0, #1
   12b34:	adc	r1, r1, #0
   12b38:	strd	r0, [sp, #48]	; 0x30
   12b3c:	cmp	r9, fp
   12b40:	cmpeq	r8, sl
   12b44:	movcc	r8, sl
   12b48:	movcc	r9, fp
   12b4c:	mov	sl, #0
   12b50:	mov	fp, #0
   12b54:	uxtb	r0, r5
   12b58:	mov	r1, #0
   12b5c:	adds	r6, r6, r0
   12b60:	mov	r5, #0
   12b64:	adc	r7, r7, r1
   12b68:	cmp	r3, r4
   12b6c:	bne	12ab8 <__assert_fail@plt+0x1528>
   12b70:	mov	r3, r5
   12b74:	mov	r4, r8
   12b78:	mov	r5, r9
   12b7c:	mov	r8, r3
   12b80:	b	12a70 <__assert_fail@plt+0x14e0>
   12b84:	mvn	r0, #7
   12b88:	and	sl, sl, r0
   12b8c:	mvn	r1, #0
   12b90:	adds	sl, sl, #8
   12b94:	and	fp, fp, r1
   12b98:	adc	fp, fp, #0
   12b9c:	b	12b54 <__assert_fail@plt+0x15c4>
   12ba0:	adds	sl, sl, #1
   12ba4:	adc	fp, fp, #0
   12ba8:	b	12b54 <__assert_fail@plt+0x15c4>
   12bac:	str	r3, [sp, #40]	; 0x28
   12bb0:	str	ip, [sp, #44]	; 0x2c
   12bb4:	bl	11428 <__ctype_b_loc@plt>
   12bb8:	ldr	ip, [sp, #44]	; 0x2c
   12bbc:	ldr	r3, [sp, #40]	; 0x28
   12bc0:	lsl	ip, ip, #1
   12bc4:	ldr	r0, [r0]
   12bc8:	ldrh	r0, [r0, ip]
   12bcc:	tst	r0, #16384	; 0x4000
   12bd0:	beq	12b68 <__assert_fail@plt+0x15d8>
   12bd4:	adds	sl, sl, #1
   12bd8:	adc	fp, fp, #0
   12bdc:	tst	r0, #8192	; 0x2000
   12be0:	bne	12b54 <__assert_fail@plt+0x15c4>
   12be4:	mov	r5, #1
   12be8:	b	12b68 <__assert_fail@plt+0x15d8>
   12bec:	ldm	r7, {r0, r1}
   12bf0:	mov	r2, r6
   12bf4:	ldr	ip, [sp, #64]	; 0x40
   12bf8:	mov	r3, r7
   12bfc:	ldr	r8, [sp, #104]	; 0x68
   12c00:	stm	ip, {r0, r1}
   12c04:	sub	r0, r8, #28
   12c08:	mov	r1, sl
   12c0c:	bl	113bc <mbrtowc@plt>
   12c10:	cmn	r0, #2
   12c14:	mov	r9, r0
   12c18:	beq	12cf4 <__assert_fail@plt+0x1764>
   12c1c:	cmn	r0, #1
   12c20:	addeq	sl, sl, #1
   12c24:	subeq	r6, r6, #1
   12c28:	moveq	r1, #1
   12c2c:	beq	129ec <__assert_fail@plt+0x145c>
   12c30:	mov	r0, r7
   12c34:	bl	112e4 <mbsinit@plt>
   12c38:	rsbs	r1, r0, #1
   12c3c:	movcc	r1, #0
   12c40:	cmp	r9, #0
   12c44:	bne	12ce0 <__assert_fail@plt+0x1750>
   12c48:	add	r0, sp, #16384	; 0x4000
   12c4c:	ldr	ip, [sp, #68]	; 0x44
   12c50:	adds	r4, r4, #1
   12c54:	add	r0, r0, #160	; 0xa0
   12c58:	add	sl, sl, #1
   12c5c:	sub	r6, r6, #1
   12c60:	adc	r5, r5, #0
   12c64:	mov	r3, r9
   12c68:	str	r9, [r0, ip]
   12c6c:	mov	r0, r3
   12c70:	str	r1, [sp, #44]	; 0x2c
   12c74:	str	r3, [sp, #40]	; 0x28
   12c78:	bl	11368 <iswprint@plt>
   12c7c:	ldr	r1, [sp, #44]	; 0x2c
   12c80:	ldr	r3, [sp, #40]	; 0x28
   12c84:	cmp	r0, #0
   12c88:	beq	129ec <__assert_fail@plt+0x145c>
   12c8c:	mov	r0, r3
   12c90:	bl	1129c <wcwidth@plt>
   12c94:	ldr	r1, [sp, #44]	; 0x2c
   12c98:	cmp	r0, #0
   12c9c:	ble	12cb0 <__assert_fail@plt+0x1720>
   12ca0:	ldrd	r8, [sp, #56]	; 0x38
   12ca4:	adds	r8, r8, r0
   12ca8:	adc	r9, r9, r0, asr #31
   12cac:	strd	r8, [sp, #56]	; 0x38
   12cb0:	add	ip, sp, #16384	; 0x4000
   12cb4:	ldr	r9, [sp, #68]	; 0x44
   12cb8:	add	ip, ip, #160	; 0xa0
   12cbc:	ldr	r0, [ip, r9]
   12cc0:	str	r1, [sp, #44]	; 0x2c
   12cc4:	bl	1144c <iswspace@plt>
   12cc8:	ldr	r1, [sp, #44]	; 0x2c
   12ccc:	cmp	r0, #0
   12cd0:	bne	129c0 <__assert_fail@plt+0x1430>
   12cd4:	mov	r8, #1
   12cd8:	str	r8, [sp, #36]	; 0x24
   12cdc:	b	129ec <__assert_fail@plt+0x145c>
   12ce0:	add	ip, sp, #16384	; 0x4000
   12ce4:	ldr	r8, [sp, #68]	; 0x44
   12ce8:	add	ip, ip, #160	; 0xa0
   12cec:	ldr	r0, [ip, r8]
   12cf0:	b	127b4 <__assert_fail@plt+0x1224>
   12cf4:	ldr	r9, [sp, #64]	; 0x40
   12cf8:	cmp	r6, #0
   12cfc:	ldr	r8, [sp, #36]	; 0x24
   12d00:	ldm	r9, {r0, r1}
   12d04:	stm	r7, {r0, r1}
   12d08:	beq	12d2c <__assert_fail@plt+0x179c>
   12d0c:	cmp	r6, #16384	; 0x4000
   12d10:	ldr	r0, [sp, #88]	; 0x58
   12d14:	addeq	sl, sl, #1
   12d18:	movw	r3, #16385	; 0x4001
   12d1c:	movweq	r6, #16383	; 0x3fff
   12d20:	mov	r1, sl
   12d24:	mov	r2, r6
   12d28:	bl	112a8 <__memmove_chk@plt>
   12d2c:	mov	r9, #1
   12d30:	b	1272c <__assert_fail@plt+0x119c>
   12d34:	strd	r4, [sp, #88]	; 0x58
   12d38:	mov	r9, #1
   12d3c:	ldrd	r4, [sp, #96]	; 0x60
   12d40:	ldrd	r6, [sp, #56]	; 0x38
   12d44:	ldrd	sl, [sp, #72]	; 0x48
   12d48:	ldrd	r0, [sp, #48]	; 0x30
   12d4c:	cmp	fp, r7
   12d50:	cmpeq	sl, r6
   12d54:	movcc	sl, r6
   12d58:	uxtb	r6, r8
   12d5c:	movcc	fp, r7
   12d60:	adds	r6, r6, r0
   12d64:	mov	r7, #0
   12d68:	adc	r7, r7, r1
   12d6c:	b	12850 <__assert_fail@plt+0x12c0>
   12d70:	strd	r4, [sp, #88]	; 0x58
   12d74:	bl	11470 <__errno_location@plt>
   12d78:	ldr	r2, [pc, #424]	; 12f28 <__assert_fail@plt+0x1998>
   12d7c:	mov	r9, #0
   12d80:	ldr	r3, [sp, #124]	; 0x7c
   12d84:	add	r2, pc, r2
   12d88:	ldrd	r4, [sp, #96]	; 0x60
   12d8c:	ldr	r1, [r0]
   12d90:	mov	r0, r9
   12d94:	bl	113c8 <error@plt>
   12d98:	b	12d40 <__assert_fail@plt+0x17b0>
   12d9c:	mov	r0, r1
   12da0:	ldr	r1, [pc, #388]	; 12f2c <__assert_fail@plt+0x199c>
   12da4:	mov	r2, #5
   12da8:	add	r1, pc, r1
   12dac:	bl	11308 <dcgettext@plt>
   12db0:	str	r0, [sp, #124]	; 0x7c
   12db4:	b	124a4 <__assert_fail@plt+0xf14>
   12db8:	strd	r4, [sp, #80]	; 0x50
   12dbc:	bl	11470 <__errno_location@plt>
   12dc0:	ldr	r2, [pc, #360]	; 12f30 <__assert_fail@plt+0x19a0>
   12dc4:	mov	r9, #0
   12dc8:	mov	sl, #0
   12dcc:	mov	fp, #0
   12dd0:	ldr	r3, [sp, #124]	; 0x7c
   12dd4:	add	r2, pc, r2
   12dd8:	strd	sl, [sp, #88]	; 0x58
   12ddc:	mov	r6, sl
   12de0:	mov	r7, fp
   12de4:	mov	r4, sl
   12de8:	mov	r5, fp
   12dec:	ldr	r1, [r0]
   12df0:	mov	r0, r9
   12df4:	bl	113c8 <error@plt>
   12df8:	b	12850 <__assert_fail@plt+0x12c0>
   12dfc:	strd	r4, [sp, #56]	; 0x38
   12e00:	mov	r9, #1
   12e04:	ldrd	r4, [sp, #48]	; 0x30
   12e08:	ldrd	r2, [sp, #56]	; 0x38
   12e0c:	mov	r0, #0
   12e10:	mov	r1, #0
   12e14:	strd	r0, [sp, #88]	; 0x58
   12e18:	cmp	fp, r3
   12e1c:	cmpeq	sl, r2
   12e20:	movcc	sl, r2
   12e24:	uxtb	r2, r8
   12e28:	movcc	fp, r3
   12e2c:	adds	r6, r6, r2
   12e30:	mov	r3, #0
   12e34:	adc	r7, r7, r3
   12e38:	b	12850 <__assert_fail@plt+0x12c0>
   12e3c:	strd	r4, [sp, #56]	; 0x38
   12e40:	bl	11470 <__errno_location@plt>
   12e44:	ldr	r2, [pc, #232]	; 12f34 <__assert_fail@plt+0x19a4>
   12e48:	mov	r9, #0
   12e4c:	ldr	r3, [sp, #124]	; 0x7c
   12e50:	add	r2, pc, r2
   12e54:	ldrd	r4, [sp, #48]	; 0x30
   12e58:	ldr	r1, [r0]
   12e5c:	mov	r0, r9
   12e60:	bl	113c8 <error@plt>
   12e64:	b	12e08 <__assert_fail@plt+0x1878>
   12e68:	mov	r9, #1
   12e6c:	ldr	r0, [sp, #108]	; 0x6c
   12e70:	str	r9, [sp]
   12e74:	mov	r2, #0
   12e78:	mov	r3, #0
   12e7c:	mvn	r6, #0
   12e80:	bl	1138c <lseek64@plt>
   12e84:	mvn	r7, #0
   12e88:	mov	r4, r0
   12e8c:	mov	r5, r1
   12e90:	cmp	r5, r7
   12e94:	cmpeq	r4, r6
   12e98:	beq	12614 <__assert_fail@plt+0x1084>
   12e9c:	mov	r3, #2
   12ea0:	ldr	r0, [sp, #108]	; 0x6c
   12ea4:	str	r3, [sp]
   12ea8:	mov	r2, #0
   12eac:	mov	r3, #0
   12eb0:	bl	1138c <lseek64@plt>
   12eb4:	cmp	r1, r7
   12eb8:	cmpeq	r0, r6
   12ebc:	beq	12614 <__assert_fail@plt+0x1084>
   12ec0:	cmp	r0, r4
   12ec4:	sbcs	ip, r1, r5
   12ec8:	mov	sl, #0
   12ecc:	mov	fp, #0
   12ed0:	strdlt	sl, [sp, #80]	; 0x50
   12ed4:	blt	12688 <__assert_fail@plt+0x10f8>
   12ed8:	mov	r6, r0
   12edc:	mov	r7, r1
   12ee0:	subs	r6, r6, r4
   12ee4:	sbc	r7, r7, r5
   12ee8:	strd	r6, [sp, #80]	; 0x50
   12eec:	b	12688 <__assert_fail@plt+0x10f8>
   12ef0:	bl	11314 <__stack_chk_fail@plt>
   12ef4:	mov	r3, r0
   12ef8:	b	12c6c <__assert_fail@plt+0x16dc>
   12efc:	andeq	r6, r1, r4, lsl #23
   12f00:	andeq	r0, r0, r8, lsr r1
   12f04:	andeq	r6, r1, r4, lsl sp
   12f08:	strdeq	r6, [r1], -r0
   12f0c:	ldrdeq	r6, [r1], -r0
   12f10:	muleq	r1, r8, ip
   12f14:	andeq	r0, r0, r0, lsr r1
   12f18:	andeq	r6, r1, r0, ror r9
   12f1c:	andeq	r6, r1, r0, lsr #18
   12f20:	andeq	r4, r0, ip, lsr #29
   12f24:	andeq	r6, r1, r8, asr r8
   12f28:	andeq	r4, r0, r8, ror #20
   12f2c:	andeq	r4, r0, r4, asr r3
   12f30:	andeq	r4, r0, r8, lsl sl
   12f34:	muleq	r0, ip, r9
   12f38:	push	{r4, r5, r6, lr}
   12f3c:	subs	r4, r0, #0
   12f40:	ldr	r5, [pc, #432]	; 130f8 <__assert_fail@plt+0x1b68>
   12f44:	add	r5, pc, r5
   12f48:	beq	12f90 <__assert_fail@plt+0x1a00>
   12f4c:	ldr	r3, [pc, #424]	; 130fc <__assert_fail@plt+0x1b6c>
   12f50:	mov	r2, #5
   12f54:	ldr	r1, [pc, #420]	; 13100 <__assert_fail@plt+0x1b70>
   12f58:	mov	r0, #0
   12f5c:	ldr	r3, [r5, r3]
   12f60:	add	r1, pc, r1
   12f64:	ldr	r6, [r3]
   12f68:	bl	11308 <dcgettext@plt>
   12f6c:	ldr	r3, [pc, #400]	; 13104 <__assert_fail@plt+0x1b74>
   12f70:	mov	r1, #1
   12f74:	ldr	r3, [r5, r3]
   12f78:	ldr	r3, [r3]
   12f7c:	mov	r2, r0
   12f80:	mov	r0, r6
   12f84:	bl	114d0 <__fprintf_chk@plt>
   12f88:	mov	r0, r4
   12f8c:	bl	11434 <exit@plt>
   12f90:	ldr	r1, [pc, #368]	; 13108 <__assert_fail@plt+0x1b78>
   12f94:	mov	r2, #5
   12f98:	add	r1, pc, r1
   12f9c:	bl	11308 <dcgettext@plt>
   12fa0:	ldr	r3, [pc, #348]	; 13104 <__assert_fail@plt+0x1b74>
   12fa4:	ldr	r6, [r5, r3]
   12fa8:	ldr	r2, [r6]
   12fac:	mov	r3, r2
   12fb0:	mov	r1, r0
   12fb4:	mov	r0, #1
   12fb8:	bl	114b8 <__printf_chk@plt>
   12fbc:	ldr	r1, [pc, #328]	; 1310c <__assert_fail@plt+0x1b7c>
   12fc0:	mov	r2, #5
   12fc4:	mov	r0, r4
   12fc8:	add	r1, pc, r1
   12fcc:	bl	11308 <dcgettext@plt>
   12fd0:	ldr	r3, [pc, #312]	; 13110 <__assert_fail@plt+0x1b80>
   12fd4:	ldr	r5, [r5, r3]
   12fd8:	ldr	r1, [r5]
   12fdc:	bl	11254 <fputs_unlocked@plt>
   12fe0:	ldr	r1, [pc, #300]	; 13114 <__assert_fail@plt+0x1b84>
   12fe4:	mov	r2, #5
   12fe8:	mov	r0, r4
   12fec:	add	r1, pc, r1
   12ff0:	bl	11308 <dcgettext@plt>
   12ff4:	ldr	r1, [r5]
   12ff8:	bl	11254 <fputs_unlocked@plt>
   12ffc:	ldr	r1, [pc, #276]	; 13118 <__assert_fail@plt+0x1b88>
   13000:	mov	r2, #5
   13004:	mov	r0, r4
   13008:	add	r1, pc, r1
   1300c:	bl	11308 <dcgettext@plt>
   13010:	ldr	r1, [r5]
   13014:	bl	11254 <fputs_unlocked@plt>
   13018:	ldr	r1, [pc, #252]	; 1311c <__assert_fail@plt+0x1b8c>
   1301c:	mov	r2, #5
   13020:	mov	r0, r4
   13024:	add	r1, pc, r1
   13028:	bl	11308 <dcgettext@plt>
   1302c:	ldr	r1, [r5]
   13030:	bl	11254 <fputs_unlocked@plt>
   13034:	ldr	r1, [pc, #228]	; 13120 <__assert_fail@plt+0x1b90>
   13038:	mov	r2, #5
   1303c:	mov	r0, r4
   13040:	add	r1, pc, r1
   13044:	bl	11308 <dcgettext@plt>
   13048:	ldr	r2, [pc, #212]	; 13124 <__assert_fail@plt+0x1b94>
   1304c:	ldr	r3, [pc, #212]	; 13128 <__assert_fail@plt+0x1b98>
   13050:	add	r2, pc, r2
   13054:	add	r3, pc, r3
   13058:	mov	r1, r0
   1305c:	mov	r0, #1
   13060:	bl	114b8 <__printf_chk@plt>
   13064:	mov	r0, #5
   13068:	mov	r1, r4
   1306c:	bl	11518 <setlocale@plt>
   13070:	cmp	r0, #0
   13074:	beq	13090 <__assert_fail@plt+0x1b00>
   13078:	ldr	r1, [pc, #172]	; 1312c <__assert_fail@plt+0x1b9c>
   1307c:	mov	r2, #3
   13080:	add	r1, pc, r1
   13084:	bl	1156c <strncmp@plt>
   13088:	cmp	r0, #0
   1308c:	bne	130c4 <__assert_fail@plt+0x1b34>
   13090:	ldr	r1, [pc, #152]	; 13130 <__assert_fail@plt+0x1ba0>
   13094:	mov	r2, #5
   13098:	mov	r0, #0
   1309c:	add	r1, pc, r1
   130a0:	bl	11308 <dcgettext@plt>
   130a4:	mov	r5, r0
   130a8:	ldr	r0, [r6]
   130ac:	bl	133bc <close_stdout@@Base+0x118>
   130b0:	mov	r1, r5
   130b4:	mov	r2, r0
   130b8:	mov	r0, #1
   130bc:	bl	114b8 <__printf_chk@plt>
   130c0:	b	12f88 <__assert_fail@plt+0x19f8>
   130c4:	ldr	r1, [pc, #104]	; 13134 <__assert_fail@plt+0x1ba4>
   130c8:	mov	r2, #5
   130cc:	mov	r0, r4
   130d0:	add	r1, pc, r1
   130d4:	bl	11308 <dcgettext@plt>
   130d8:	mov	r5, r0
   130dc:	ldr	r0, [r6]
   130e0:	bl	133bc <close_stdout@@Base+0x118>
   130e4:	mov	r1, r5
   130e8:	mov	r2, r0
   130ec:	mov	r0, #1
   130f0:	bl	114b8 <__printf_chk@plt>
   130f4:	b	13090 <__assert_fail@plt+0x1b00>
   130f8:	strheq	r6, [r1], -r4
   130fc:	andeq	r0, r0, r4, asr #2
   13100:	andeq	r4, r0, ip, lsr #3
   13104:	andeq	r0, r0, r8, ror #2
   13108:	muleq	r0, ip, r1
   1310c:			; <UNDEFINED> instruction: 0x000041b4
   13110:	andeq	r0, r0, ip, asr r1
   13114:	andeq	r4, r0, ip, lsr #7
   13118:	andeq	r4, r0, r4, asr #9
   1311c:	ldrdeq	r4, [r0], -r8
   13120:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   13124:	strdeq	r4, [r0], -ip
   13128:	andeq	r4, r0, r8, lsl #10
   1312c:	andeq	r4, r0, r4, lsl #10
   13130:	andeq	r4, r0, r4, lsr r5
   13134:			; <UNDEFINED> instruction: 0x000044b8
   13138:	push	{r4, lr}
   1313c:	mov	r4, r0
   13140:	mov	r0, #24
   13144:	bl	113ec <malloc@plt>
   13148:	cmp	r0, #0
   1314c:	strne	r4, [r0, #16]
   13150:	strne	r4, [r0, #20]
   13154:	movne	r3, #0
   13158:	strne	r3, [r0]
   1315c:	pop	{r4, pc}
   13160:	push	{r4, lr}
   13164:	mov	r4, r0
   13168:	mov	r0, #24
   1316c:	bl	113ec <malloc@plt>
   13170:	cmp	r0, #0
   13174:	popeq	{r4, pc}
   13178:	mov	r3, #0
   1317c:	str	r4, [r0]
   13180:	str	r3, [r0, #8]
   13184:	str	r3, [r0, #12]
   13188:	str	r3, [r0, #4]
   1318c:	str	r3, [r0, #16]
   13190:	pop	{r4, pc}
   13194:	push	{r3, r4, r5, lr}
   13198:	mov	r4, r0
   1319c:	ldr	r3, [r0]
   131a0:	mov	r5, r1
   131a4:	cmp	r3, #0
   131a8:	beq	131e0 <__assert_fail@plt+0x1c50>
   131ac:	add	r0, r0, #8
   131b0:	add	r1, r4, #12
   131b4:	mov	r2, #0
   131b8:	bl	11554 <getdelim@plt>
   131bc:	cmp	r0, #0
   131c0:	blt	13214 <__assert_fail@plt+0x1c84>
   131c4:	mov	r3, #1
   131c8:	str	r3, [r5]
   131cc:	ldmib	r4, {r2, r3}
   131d0:	add	r2, r2, #1
   131d4:	str	r2, [r4, #4]
   131d8:	mov	r0, r3
   131dc:	pop	{r3, r4, r5, pc}
   131e0:	ldr	r3, [r0, #20]
   131e4:	ldr	r3, [r3]
   131e8:	cmp	r3, #0
   131ec:	movne	r3, #1
   131f0:	strne	r3, [r1]
   131f4:	ldrne	r3, [r0, #20]
   131f8:	moveq	r2, #2
   131fc:	streq	r2, [r1]
   13200:	addne	r2, r3, #4
   13204:	strne	r2, [r0, #20]
   13208:	ldrne	r3, [r3]
   1320c:	mov	r0, r3
   13210:	pop	{r3, r4, r5, pc}
   13214:	ldr	r0, [r4]
   13218:	bl	11440 <feof@plt>
   1321c:	mov	r3, #0
   13220:	cmp	r0, r3
   13224:	moveq	r0, #4
   13228:	movne	r0, #2
   1322c:	str	r0, [r5]
   13230:	b	131d8 <__assert_fail@plt+0x1c48>
   13234:	ldr	r3, [r0]
   13238:	cmp	r3, #0
   1323c:	ldreq	r2, [r0, #20]
   13240:	ldreq	r3, [r0, #16]
   13244:	ldrne	r0, [r0, #4]
   13248:	rsbeq	r0, r3, r2
   1324c:	asreq	r0, r0, #2
   13250:	bx	lr
   13254:	push	{r4, lr}
   13258:	mov	r4, r0
   1325c:	ldr	r3, [r0]
   13260:	cmp	r3, #0
   13264:	beq	13270 <__assert_fail@plt+0x1ce0>
   13268:	ldr	r0, [r0, #8]
   1326c:	bl	112b4 <free@plt>
   13270:	mov	r0, r4
   13274:	pop	{r4, lr}
   13278:	b	112b4 <free@plt>
   1327c:	ldr	r3, [pc, #8]	; 1328c <__assert_fail@plt+0x1cfc>
   13280:	add	r3, pc, r3
   13284:	str	r0, [r3]
   13288:	bx	lr
   1328c:	andeq	r5, r1, r8, lsl #31
   13290:	ldr	r3, [pc, #8]	; 132a0 <__assert_fail@plt+0x1d10>
   13294:	add	r3, pc, r3
   13298:	strb	r0, [r3, #4]
   1329c:	bx	lr
   132a0:	andeq	r5, r1, r4, ror pc

000132a4 <close_stdout@@Base>:
   132a4:	push	{r4, r5, r6, r7, lr}
   132a8:	sub	sp, sp, #12
   132ac:	ldr	r4, [pc, #228]	; 13398 <close_stdout@@Base+0xf4>
   132b0:	ldr	r3, [pc, #228]	; 1339c <close_stdout@@Base+0xf8>
   132b4:	add	r4, pc, r4
   132b8:	ldr	r3, [r4, r3]
   132bc:	ldr	r0, [r3]
   132c0:	bl	15c68 <close_stdout@@Base+0x29c4>
   132c4:	cmp	r0, #0
   132c8:	beq	132f0 <close_stdout@@Base+0x4c>
   132cc:	ldr	r3, [pc, #204]	; 133a0 <close_stdout@@Base+0xfc>
   132d0:	add	r3, pc, r3
   132d4:	ldrb	r3, [r3, #4]
   132d8:	cmp	r3, #0
   132dc:	beq	13310 <close_stdout@@Base+0x6c>
   132e0:	bl	11470 <__errno_location@plt>
   132e4:	ldr	r3, [r0]
   132e8:	cmp	r3, #32
   132ec:	bne	13310 <close_stdout@@Base+0x6c>
   132f0:	ldr	r3, [pc, #172]	; 133a4 <close_stdout@@Base+0x100>
   132f4:	ldr	r3, [r4, r3]
   132f8:	ldr	r0, [r3]
   132fc:	bl	15c68 <close_stdout@@Base+0x29c4>
   13300:	cmp	r0, #0
   13304:	bne	13364 <close_stdout@@Base+0xc0>
   13308:	add	sp, sp, #12
   1330c:	pop	{r4, r5, r6, r7, pc}
   13310:	ldr	r1, [pc, #144]	; 133a8 <close_stdout@@Base+0x104>
   13314:	mov	r0, #0
   13318:	mov	r2, #5
   1331c:	add	r1, pc, r1
   13320:	bl	11308 <dcgettext@plt>
   13324:	ldr	r3, [pc, #128]	; 133ac <close_stdout@@Base+0x108>
   13328:	ldr	r5, [pc, r3]
   1332c:	cmp	r5, #0
   13330:	mov	r6, r0
   13334:	beq	13374 <close_stdout@@Base+0xd0>
   13338:	bl	11470 <__errno_location@plt>
   1333c:	ldr	r7, [r0]
   13340:	mov	r0, r5
   13344:	bl	14d74 <close_stdout@@Base+0x1ad0>
   13348:	ldr	r2, [pc, #96]	; 133b0 <close_stdout@@Base+0x10c>
   1334c:	str	r6, [sp]
   13350:	mov	r1, r7
   13354:	add	r2, pc, r2
   13358:	mov	r3, r0
   1335c:	mov	r0, #0
   13360:	bl	113c8 <error@plt>
   13364:	ldr	r3, [pc, #72]	; 133b4 <close_stdout@@Base+0x110>
   13368:	ldr	r3, [r4, r3]
   1336c:	ldr	r0, [r3]
   13370:	bl	112cc <_exit@plt>
   13374:	bl	11470 <__errno_location@plt>
   13378:	ldr	r2, [pc, #56]	; 133b8 <close_stdout@@Base+0x114>
   1337c:	add	r2, pc, r2
   13380:	mov	r3, r0
   13384:	mov	r0, r5
   13388:	ldr	r1, [r3]
   1338c:	mov	r3, r6
   13390:	bl	113c8 <error@plt>
   13394:	b	13364 <close_stdout@@Base+0xc0>
   13398:	andeq	r5, r1, r4, asr #26
   1339c:	andeq	r0, r0, ip, asr r1
   133a0:	andeq	r5, r1, r8, lsr pc
   133a4:	andeq	r0, r0, r4, asr #2
   133a8:	andeq	r4, r0, r0, asr #9
   133ac:	andeq	r5, r1, r0, ror #29
   133b0:	muleq	r0, r4, r4
   133b4:	andeq	r0, r0, r0, ror #2
   133b8:	andeq	r4, r0, r0, ror r4
   133bc:	ldrb	r3, [r0]
   133c0:	cmp	r3, #47	; 0x2f
   133c4:	bne	133e0 <close_stdout@@Base+0x13c>
   133c8:	add	r2, r0, #1
   133cc:	mov	r0, r2
   133d0:	add	r2, r2, #1
   133d4:	ldrb	r3, [r0]
   133d8:	cmp	r3, #47	; 0x2f
   133dc:	beq	133cc <close_stdout@@Base+0x128>
   133e0:	cmp	r3, #0
   133e4:	bxeq	lr
   133e8:	mov	r2, r0
   133ec:	mov	r1, #0
   133f0:	cmp	r3, #47	; 0x2f
   133f4:	moveq	r1, #1
   133f8:	beq	13408 <close_stdout@@Base+0x164>
   133fc:	cmp	r1, #0
   13400:	movne	r0, r2
   13404:	movne	r1, #0
   13408:	ldrb	r3, [r2, #1]!
   1340c:	cmp	r3, #0
   13410:	bne	133f0 <close_stdout@@Base+0x14c>
   13414:	bx	lr
   13418:	push	{r4, lr}
   1341c:	mov	r4, r0
   13420:	bl	11458 <strlen@plt>
   13424:	cmp	r0, #1
   13428:	popls	{r4, pc}
   1342c:	sub	r3, r0, #1
   13430:	ldrb	r2, [r4, r3]
   13434:	cmp	r2, #47	; 0x2f
   13438:	popne	{r4, pc}
   1343c:	mov	r0, r3
   13440:	cmp	r0, #1
   13444:	sub	r3, r3, #1
   13448:	beq	1345c <close_stdout@@Base+0x1b8>
   1344c:	ldrb	r2, [r4, r3]
   13450:	cmp	r2, #47	; 0x2f
   13454:	popne	{r4, pc}
   13458:	b	1343c <close_stdout@@Base+0x198>
   1345c:	pop	{r4, pc}
   13460:	b	11278 <posix_fadvise64@plt>
   13464:	cmp	r0, #0
   13468:	push	{r4, r5, r6, lr}
   1346c:	mov	r6, r1
   13470:	sub	sp, sp, #16
   13474:	beq	13498 <close_stdout@@Base+0x1f4>
   13478:	mov	r4, #0
   1347c:	mov	r5, #0
   13480:	bl	114c4 <fileno@plt>
   13484:	str	r6, [sp, #8]
   13488:	mov	r2, r4
   1348c:	mov	r3, r5
   13490:	strd	r4, [sp]
   13494:	bl	13460 <close_stdout@@Base+0x1bc>
   13498:	add	sp, sp, #16
   1349c:	pop	{r4, r5, r6, pc}
   134a0:	push	{r3, r4, r5, r6, r7, lr}
   134a4:	add	r6, r2, #19
   134a8:	mov	r4, r0
   134ac:	mov	r5, r1
   134b0:	mov	r3, #0
   134b4:	strb	r3, [r2, #20]
   134b8:	mov	r0, r4
   134bc:	mov	r1, r5
   134c0:	mov	r2, #10
   134c4:	mov	r3, #0
   134c8:	bl	166cc <close_stdout@@Base+0x3428>
   134cc:	mov	r7, r6
   134d0:	mov	r0, r4
   134d4:	mov	r1, r5
   134d8:	mov	r3, #0
   134dc:	add	ip, r2, #48	; 0x30
   134e0:	mov	r2, #10
   134e4:	strb	ip, [r6], #-1
   134e8:	bl	166cc <close_stdout@@Base+0x3428>
   134ec:	mov	r4, r0
   134f0:	mov	r5, r1
   134f4:	orrs	r3, r4, r5
   134f8:	bne	134b8 <close_stdout@@Base+0x214>
   134fc:	mov	r0, r7
   13500:	pop	{r3, r4, r5, r6, r7, pc}
   13504:	push	{r4, lr}
   13508:	mov	r4, r0
   1350c:	bl	1129c <wcwidth@plt>
   13510:	cmp	r0, #0
   13514:	popge	{r4, pc}
   13518:	mov	r0, r4
   1351c:	bl	1135c <iswcntrl@plt>
   13520:	rsbs	r0, r0, #1
   13524:	movcc	r0, #0
   13528:	pop	{r4, pc}
   1352c:	push	{r3, r4, r5, lr}
   13530:	mov	r3, r1
   13534:	mov	r4, r1
   13538:	ldr	r1, [r3], #16
   1353c:	mov	r5, r0
   13540:	cmp	r1, r3
   13544:	strne	r1, [r0]
   13548:	beq	1356c <close_stdout@@Base+0x2c8>
   1354c:	ldr	r3, [r4, #4]
   13550:	str	r3, [r5, #4]
   13554:	ldrb	r3, [r4, #8]
   13558:	cmp	r3, #0
   1355c:	strb	r3, [r5, #8]
   13560:	ldrne	r3, [r4, #12]
   13564:	strne	r3, [r5, #12]
   13568:	pop	{r3, r4, r5, pc}
   1356c:	add	r3, r0, #16
   13570:	ldr	r2, [r4, #4]
   13574:	mov	r0, r3
   13578:	bl	112d8 <memcpy@plt>
   1357c:	str	r0, [r5]
   13580:	b	1354c <close_stdout@@Base+0x2a8>
   13584:	ldr	r3, [pc, #32]	; 135ac <close_stdout@@Base+0x308>
   13588:	lsr	r2, r0, #5
   1358c:	ldr	r1, [pc, #28]	; 135b0 <close_stdout@@Base+0x30c>
   13590:	and	r0, r0, #31
   13594:	add	r3, pc, r3
   13598:	ldr	r3, [r3, r1]
   1359c:	ldr	r3, [r3, r2, lsl #2]
   135a0:	lsr	r0, r3, r0
   135a4:	and	r0, r0, #1
   135a8:	bx	lr
   135ac:	andeq	r5, r1, r4, ror #20
   135b0:	andeq	r0, r0, r0, lsr r1
   135b4:	andeq	r0, r0, r0
   135b8:	push	{r3, lr}
   135bc:	vpush	{d8}
   135c0:	mov	r0, #85	; 0x55
   135c4:	bl	11338 <sysconf@plt>
   135c8:	vmov	s15, r0
   135cc:	mov	r0, #30
   135d0:	vcvt.f64.s32	d8, s15
   135d4:	bl	11338 <sysconf@plt>
   135d8:	vcmpe.f64	d8, #0.0
   135dc:	vmrs	APSR_nzcv, fpscr
   135e0:	vmov	s15, r0
   135e4:	vcvt.f64.s32	d0, s15
   135e8:	blt	13604 <close_stdout@@Base+0x360>
   135ec:	vcmpe.f64	d0, #0.0
   135f0:	vmrs	APSR_nzcv, fpscr
   135f4:	vmulge.f64	d0, d8, d0
   135f8:	blt	13604 <close_stdout@@Base+0x360>
   135fc:	vpop	{d8}
   13600:	pop	{r3, pc}
   13604:	vpop	{d8}
   13608:	vldr	d0, [pc]	; 13610 <close_stdout@@Base+0x36c>
   1360c:	pop	{r3, pc}
   13610:	andeq	r0, r0, r0
   13614:	orrsmi	r0, r0, r0
   13618:	push	{r3, lr}
   1361c:	vpush	{d8}
   13620:	mov	r0, #86	; 0x56
   13624:	bl	11338 <sysconf@plt>
   13628:	vmov	s15, r0
   1362c:	mov	r0, #30
   13630:	vcvt.f64.s32	d8, s15
   13634:	bl	11338 <sysconf@plt>
   13638:	vcmpe.f64	d8, #0.0
   1363c:	vmrs	APSR_nzcv, fpscr
   13640:	vmov	s15, r0
   13644:	vcvt.f64.s32	d0, s15
   13648:	blt	13664 <close_stdout@@Base+0x3c0>
   1364c:	vcmpe.f64	d0, #0.0
   13650:	vmrs	APSR_nzcv, fpscr
   13654:	blt	13664 <close_stdout@@Base+0x3c0>
   13658:	vmul.f64	d0, d0, d8
   1365c:	vpop	{d8}
   13660:	pop	{r3, pc}
   13664:	bl	135b8 <close_stdout@@Base+0x314>
   13668:	vmov.f64	d8, #80	; 0x3e800000  0.250
   1366c:	vmul.f64	d0, d0, d8
   13670:	vpop	{d8}
   13674:	pop	{r3, pc}
   13678:	push	{r3, r4, r5, r6, r7, lr}
   1367c:	subs	r4, r0, #0
   13680:	ldr	r5, [pc, #172]	; 13734 <close_stdout@@Base+0x490>
   13684:	add	r5, pc, r5
   13688:	beq	13710 <close_stdout@@Base+0x46c>
   1368c:	mov	r1, #47	; 0x2f
   13690:	bl	11524 <strrchr@plt>
   13694:	subs	r6, r0, #0
   13698:	beq	136f4 <close_stdout@@Base+0x450>
   1369c:	add	r7, r6, #1
   136a0:	rsb	r3, r4, r7
   136a4:	cmp	r3, #6
   136a8:	ble	136f4 <close_stdout@@Base+0x450>
   136ac:	ldr	r1, [pc, #132]	; 13738 <close_stdout@@Base+0x494>
   136b0:	sub	r0, r6, #6
   136b4:	mov	r2, #7
   136b8:	add	r1, pc, r1
   136bc:	bl	1156c <strncmp@plt>
   136c0:	cmp	r0, #0
   136c4:	bne	136f4 <close_stdout@@Base+0x450>
   136c8:	ldr	r1, [pc, #108]	; 1373c <close_stdout@@Base+0x498>
   136cc:	mov	r0, r7
   136d0:	mov	r2, #3
   136d4:	add	r1, pc, r1
   136d8:	bl	1156c <strncmp@plt>
   136dc:	cmp	r0, #0
   136e0:	movne	r4, r7
   136e4:	ldreq	r3, [pc, #84]	; 13740 <close_stdout@@Base+0x49c>
   136e8:	addeq	r4, r6, #4
   136ec:	ldreq	r3, [r5, r3]
   136f0:	streq	r4, [r3]
   136f4:	ldr	r2, [pc, #72]	; 13744 <close_stdout@@Base+0x4a0>
   136f8:	ldr	r3, [pc, #72]	; 13748 <close_stdout@@Base+0x4a4>
   136fc:	ldr	r2, [r5, r2]
   13700:	str	r4, [r2]
   13704:	ldr	r3, [r5, r3]
   13708:	str	r4, [r3]
   1370c:	pop	{r3, r4, r5, r6, r7, pc}
   13710:	ldr	r3, [pc, #52]	; 1374c <close_stdout@@Base+0x4a8>
   13714:	mov	r1, #1
   13718:	ldr	r0, [pc, #48]	; 13750 <close_stdout@@Base+0x4ac>
   1371c:	mov	r2, #55	; 0x37
   13720:	ldr	r3, [r5, r3]
   13724:	add	r0, pc, r0
   13728:	ldr	r3, [r3]
   1372c:	bl	11380 <fwrite@plt>
   13730:	bl	11578 <abort@plt>
   13734:	andeq	r5, r1, r4, ror r9
   13738:	muleq	r0, r0, r1
   1373c:	andeq	r4, r0, ip, ror r1
   13740:	andeq	r0, r0, r0, ror r1
   13744:	andeq	r0, r0, r8, ror #2
   13748:	andeq	r0, r0, r4, ror #2
   1374c:	andeq	r0, r0, r4, asr #2
   13750:	andeq	r4, r0, ip, ror #1
   13754:	push	{r3, lr}
   13758:	mov	r3, r0
   1375c:	mov	r2, #0
   13760:	cmp	r1, #8
   13764:	str	r2, [r3], #4
   13768:	add	r3, r3, #4
   1376c:	str	r2, [r0, #4]
   13770:	str	r2, [r3], #4
   13774:	str	r2, [r3], #4
   13778:	str	r2, [r3], #4
   1377c:	str	r2, [r3], #4
   13780:	str	r2, [r3], #4
   13784:	str	r2, [r3], #4
   13788:	str	r2, [r3], #4
   1378c:	str	r2, [r3], #4
   13790:	str	r2, [r3], #4
   13794:	str	r2, [r3]
   13798:	beq	137a4 <close_stdout@@Base+0x500>
   1379c:	str	r1, [r0]
   137a0:	pop	{r3, pc}
   137a4:	bl	11578 <abort@plt>
   137a8:	push	{r4, r5, r6, lr}
   137ac:	mov	r4, r0
   137b0:	mov	r6, r1
   137b4:	mov	r0, #0
   137b8:	mov	r1, r4
   137bc:	mov	r2, #5
   137c0:	bl	11308 <dcgettext@plt>
   137c4:	cmp	r0, r4
   137c8:	mov	r5, r0
   137cc:	beq	137d4 <close_stdout@@Base+0x530>
   137d0:	pop	{r4, r5, r6, pc}
   137d4:	bl	15ce8 <close_stdout@@Base+0x2a44>
   137d8:	ldrb	r3, [r0]
   137dc:	bic	r3, r3, #32
   137e0:	cmp	r3, #85	; 0x55
   137e4:	bne	13858 <close_stdout@@Base+0x5b4>
   137e8:	ldrb	r3, [r0, #1]
   137ec:	bic	r3, r3, #32
   137f0:	cmp	r3, #84	; 0x54
   137f4:	bne	13844 <close_stdout@@Base+0x5a0>
   137f8:	ldrb	r3, [r0, #2]
   137fc:	bic	r3, r3, #32
   13800:	cmp	r3, #70	; 0x46
   13804:	bne	13844 <close_stdout@@Base+0x5a0>
   13808:	ldrb	r3, [r0, #3]
   1380c:	cmp	r3, #45	; 0x2d
   13810:	bne	13844 <close_stdout@@Base+0x5a0>
   13814:	ldrb	r3, [r0, #4]
   13818:	cmp	r3, #56	; 0x38
   1381c:	bne	13844 <close_stdout@@Base+0x5a0>
   13820:	ldrb	r3, [r0, #5]
   13824:	cmp	r3, #0
   13828:	bne	13844 <close_stdout@@Base+0x5a0>
   1382c:	ldrb	r3, [r5]
   13830:	cmp	r3, #96	; 0x60
   13834:	beq	138d0 <close_stdout@@Base+0x62c>
   13838:	ldr	r0, [pc, #180]	; 138f4 <close_stdout@@Base+0x650>
   1383c:	add	r0, pc, r0
   13840:	pop	{r4, r5, r6, pc}
   13844:	cmp	r6, #7
   13848:	beq	138dc <close_stdout@@Base+0x638>
   1384c:	ldr	r0, [pc, #164]	; 138f8 <close_stdout@@Base+0x654>
   13850:	add	r0, pc, r0
   13854:	pop	{r4, r5, r6, pc}
   13858:	cmp	r3, #71	; 0x47
   1385c:	bne	13844 <close_stdout@@Base+0x5a0>
   13860:	ldrb	r3, [r0, #1]
   13864:	bic	r3, r3, #32
   13868:	cmp	r3, #66	; 0x42
   1386c:	bne	13844 <close_stdout@@Base+0x5a0>
   13870:	ldrb	r3, [r0, #2]
   13874:	cmp	r3, #49	; 0x31
   13878:	bne	13844 <close_stdout@@Base+0x5a0>
   1387c:	ldrb	r3, [r0, #3]
   13880:	cmp	r3, #56	; 0x38
   13884:	bne	13844 <close_stdout@@Base+0x5a0>
   13888:	ldrb	r3, [r0, #4]
   1388c:	cmp	r3, #48	; 0x30
   13890:	bne	13844 <close_stdout@@Base+0x5a0>
   13894:	ldrb	r3, [r0, #5]
   13898:	cmp	r3, #51	; 0x33
   1389c:	bne	13844 <close_stdout@@Base+0x5a0>
   138a0:	ldrb	r3, [r0, #6]
   138a4:	cmp	r3, #48	; 0x30
   138a8:	bne	13844 <close_stdout@@Base+0x5a0>
   138ac:	ldrb	r3, [r0, #7]
   138b0:	cmp	r3, #0
   138b4:	bne	13844 <close_stdout@@Base+0x5a0>
   138b8:	ldrb	r3, [r5]
   138bc:	cmp	r3, #96	; 0x60
   138c0:	beq	138e8 <close_stdout@@Base+0x644>
   138c4:	ldr	r0, [pc, #48]	; 138fc <close_stdout@@Base+0x658>
   138c8:	add	r0, pc, r0
   138cc:	pop	{r4, r5, r6, pc}
   138d0:	ldr	r0, [pc, #40]	; 13900 <close_stdout@@Base+0x65c>
   138d4:	add	r0, pc, r0
   138d8:	pop	{r4, r5, r6, pc}
   138dc:	ldr	r0, [pc, #32]	; 13904 <close_stdout@@Base+0x660>
   138e0:	add	r0, pc, r0
   138e4:	pop	{r4, r5, r6, pc}
   138e8:	ldr	r0, [pc, #24]	; 13908 <close_stdout@@Base+0x664>
   138ec:	add	r0, pc, r0
   138f0:	pop	{r4, r5, r6, pc}
   138f4:	andeq	r4, r0, r8, lsr r0
   138f8:	andeq	r4, r0, ip, lsr #32
   138fc:			; <UNDEFINED> instruction: 0x00003fb0
   13900:			; <UNDEFINED> instruction: 0x00003fb4
   13904:	andeq	r3, r0, r0, lsr #31
   13908:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   1390c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13910:	sub	sp, sp, #124	; 0x7c
   13914:	ldr	ip, [pc, #3304]	; 14604 <close_stdout@@Base+0x1360>
   13918:	mov	sl, r1
   1391c:	str	r0, [sp, #40]	; 0x28
   13920:	mov	r8, r3
   13924:	ldr	r0, [pc, #3292]	; 14608 <close_stdout@@Base+0x1364>
   13928:	add	ip, pc, ip
   1392c:	str	r2, [sp, #32]
   13930:	ldr	r1, [sp, #164]	; 0xa4
   13934:	mov	r3, ip
   13938:	ldr	r0, [ip, r0]
   1393c:	ldr	r2, [sp, #172]	; 0xac
   13940:	ubfx	r1, r1, #1, #1
   13944:	str	r1, [sp, #36]	; 0x24
   13948:	str	r0, [sp, #56]	; 0x38
   1394c:	ldr	r0, [sp, #168]	; 0xa8
   13950:	ldr	r1, [sp, #176]	; 0xb0
   13954:	str	r2, [sp, #72]	; 0x48
   13958:	str	r0, [sp, #48]	; 0x30
   1395c:	ldr	r0, [sp, #56]	; 0x38
   13960:	str	r1, [sp, #68]	; 0x44
   13964:	ldr	r3, [r0]
   13968:	str	r3, [sp, #116]	; 0x74
   1396c:	bl	11398 <__ctype_get_mb_cur_max@plt>
   13970:	ldr	r2, [sp, #160]	; 0xa0
   13974:	str	r0, [sp, #64]	; 0x40
   13978:	cmp	r2, #8
   1397c:	addls	pc, pc, r2, lsl #2
   13980:	b	144e0 <close_stdout@@Base+0x123c>
   13984:	b	139a8 <close_stdout@@Base+0x704>
   13988:	b	141f8 <close_stdout@@Base+0xf54>
   1398c:	b	14228 <close_stdout@@Base+0xf84>
   13990:	b	140d8 <close_stdout@@Base+0xe34>
   13994:	b	14118 <close_stdout@@Base+0xe74>
   13998:	b	14144 <close_stdout@@Base+0xea0>
   1399c:	b	14164 <close_stdout@@Base+0xec0>
   139a0:	b	14164 <close_stdout@@Base+0xec0>
   139a4:	b	14164 <close_stdout@@Base+0xec0>
   139a8:	mov	r2, #0
   139ac:	str	r2, [sp, #36]	; 0x24
   139b0:	mov	r9, r2
   139b4:	str	r2, [sp, #24]
   139b8:	str	r2, [sp, #28]
   139bc:	str	r2, [sp, #52]	; 0x34
   139c0:	ldr	r0, [sp, #36]	; 0x24
   139c4:	mov	fp, #0
   139c8:	ldr	r1, [sp, #24]
   139cc:	eor	r2, r0, #1
   139d0:	eor	r3, r1, #1
   139d4:	and	r3, r2, r3
   139d8:	and	r2, r1, r0
   139dc:	str	r3, [sp, #44]	; 0x2c
   139e0:	str	r2, [sp, #76]	; 0x4c
   139e4:	cmn	r8, #1
   139e8:	beq	13d68 <close_stdout@@Base+0xac4>
   139ec:	subs	r3, fp, r8
   139f0:	movne	r3, #1
   139f4:	cmp	r3, #0
   139f8:	beq	13d80 <close_stdout@@Base+0xadc>
   139fc:	ldr	r3, [sp, #28]
   13a00:	ldr	r0, [sp, #24]
   13a04:	adds	r7, r3, #0
   13a08:	movne	r7, #1
   13a0c:	ands	r6, r7, r0
   13a10:	bne	1426c <close_stdout@@Base+0xfc8>
   13a14:	ldr	r1, [sp, #32]
   13a18:	add	r5, r1, fp
   13a1c:	ldrb	r4, [r5]
   13a20:	cmp	r4, #126	; 0x7e
   13a24:	addls	pc, pc, r4, lsl #2
   13a28:	b	13fec <close_stdout@@Base+0xd48>
   13a2c:	b	13ef8 <close_stdout@@Base+0xc54>
   13a30:	b	13fec <close_stdout@@Base+0xd48>
   13a34:	b	13fec <close_stdout@@Base+0xd48>
   13a38:	b	13fec <close_stdout@@Base+0xd48>
   13a3c:	b	13fec <close_stdout@@Base+0xd48>
   13a40:	b	13fec <close_stdout@@Base+0xd48>
   13a44:	b	13fec <close_stdout@@Base+0xd48>
   13a48:	b	13ee0 <close_stdout@@Base+0xc3c>
   13a4c:	b	13ec8 <close_stdout@@Base+0xc24>
   13a50:	b	13ef0 <close_stdout@@Base+0xc4c>
   13a54:	b	13ee8 <close_stdout@@Base+0xc44>
   13a58:	b	13ed8 <close_stdout@@Base+0xc34>
   13a5c:	b	13ed0 <close_stdout@@Base+0xc2c>
   13a60:	b	13e94 <close_stdout@@Base+0xbf0>
   13a64:	b	13fec <close_stdout@@Base+0xd48>
   13a68:	b	13fec <close_stdout@@Base+0xd48>
   13a6c:	b	13fec <close_stdout@@Base+0xd48>
   13a70:	b	13fec <close_stdout@@Base+0xd48>
   13a74:	b	13fec <close_stdout@@Base+0xd48>
   13a78:	b	13fec <close_stdout@@Base+0xd48>
   13a7c:	b	13fec <close_stdout@@Base+0xd48>
   13a80:	b	13fec <close_stdout@@Base+0xd48>
   13a84:	b	13fec <close_stdout@@Base+0xd48>
   13a88:	b	13fec <close_stdout@@Base+0xd48>
   13a8c:	b	13fec <close_stdout@@Base+0xd48>
   13a90:	b	13fec <close_stdout@@Base+0xd48>
   13a94:	b	13fec <close_stdout@@Base+0xd48>
   13a98:	b	13fec <close_stdout@@Base+0xd48>
   13a9c:	b	13fec <close_stdout@@Base+0xd48>
   13aa0:	b	13fec <close_stdout@@Base+0xd48>
   13aa4:	b	13fec <close_stdout@@Base+0xd48>
   13aa8:	b	13fec <close_stdout@@Base+0xd48>
   13aac:	b	13e20 <close_stdout@@Base+0xb7c>
   13ab0:	b	13e20 <close_stdout@@Base+0xb7c>
   13ab4:	b	13e20 <close_stdout@@Base+0xb7c>
   13ab8:	b	13e18 <close_stdout@@Base+0xb74>
   13abc:	b	13e20 <close_stdout@@Base+0xb7c>
   13ac0:	b	13cf4 <close_stdout@@Base+0xa50>
   13ac4:	b	13e20 <close_stdout@@Base+0xb7c>
   13ac8:	b	13f94 <close_stdout@@Base+0xcf0>
   13acc:	b	13e20 <close_stdout@@Base+0xb7c>
   13ad0:	b	13e20 <close_stdout@@Base+0xb7c>
   13ad4:	b	13e20 <close_stdout@@Base+0xb7c>
   13ad8:	b	13cf4 <close_stdout@@Base+0xa50>
   13adc:	b	13cf4 <close_stdout@@Base+0xa50>
   13ae0:	b	13cf4 <close_stdout@@Base+0xa50>
   13ae4:	b	13cf4 <close_stdout@@Base+0xa50>
   13ae8:	b	13cf4 <close_stdout@@Base+0xa50>
   13aec:	b	13cf4 <close_stdout@@Base+0xa50>
   13af0:	b	13cf4 <close_stdout@@Base+0xa50>
   13af4:	b	13cf4 <close_stdout@@Base+0xa50>
   13af8:	b	13cf4 <close_stdout@@Base+0xa50>
   13afc:	b	13cf4 <close_stdout@@Base+0xa50>
   13b00:	b	13cf4 <close_stdout@@Base+0xa50>
   13b04:	b	13cf4 <close_stdout@@Base+0xa50>
   13b08:	b	13cf4 <close_stdout@@Base+0xa50>
   13b0c:	b	13cf4 <close_stdout@@Base+0xa50>
   13b10:	b	13cf4 <close_stdout@@Base+0xa50>
   13b14:	b	13cf4 <close_stdout@@Base+0xa50>
   13b18:	b	13e20 <close_stdout@@Base+0xb7c>
   13b1c:	b	13e20 <close_stdout@@Base+0xb7c>
   13b20:	b	13e20 <close_stdout@@Base+0xb7c>
   13b24:	b	13e20 <close_stdout@@Base+0xb7c>
   13b28:	b	13c28 <close_stdout@@Base+0x984>
   13b2c:	b	13fec <close_stdout@@Base+0xd48>
   13b30:	b	13cf4 <close_stdout@@Base+0xa50>
   13b34:	b	13cf4 <close_stdout@@Base+0xa50>
   13b38:	b	13cf4 <close_stdout@@Base+0xa50>
   13b3c:	b	13cf4 <close_stdout@@Base+0xa50>
   13b40:	b	13cf4 <close_stdout@@Base+0xa50>
   13b44:	b	13cf4 <close_stdout@@Base+0xa50>
   13b48:	b	13cf4 <close_stdout@@Base+0xa50>
   13b4c:	b	13cf4 <close_stdout@@Base+0xa50>
   13b50:	b	13cf4 <close_stdout@@Base+0xa50>
   13b54:	b	13cf4 <close_stdout@@Base+0xa50>
   13b58:	b	13cf4 <close_stdout@@Base+0xa50>
   13b5c:	b	13cf4 <close_stdout@@Base+0xa50>
   13b60:	b	13cf4 <close_stdout@@Base+0xa50>
   13b64:	b	13cf4 <close_stdout@@Base+0xa50>
   13b68:	b	13cf4 <close_stdout@@Base+0xa50>
   13b6c:	b	13cf4 <close_stdout@@Base+0xa50>
   13b70:	b	13cf4 <close_stdout@@Base+0xa50>
   13b74:	b	13cf4 <close_stdout@@Base+0xa50>
   13b78:	b	13cf4 <close_stdout@@Base+0xa50>
   13b7c:	b	13cf4 <close_stdout@@Base+0xa50>
   13b80:	b	13cf4 <close_stdout@@Base+0xa50>
   13b84:	b	13cf4 <close_stdout@@Base+0xa50>
   13b88:	b	13cf4 <close_stdout@@Base+0xa50>
   13b8c:	b	13cf4 <close_stdout@@Base+0xa50>
   13b90:	b	13cf4 <close_stdout@@Base+0xa50>
   13b94:	b	13cf4 <close_stdout@@Base+0xa50>
   13b98:	b	13e20 <close_stdout@@Base+0xb7c>
   13b9c:	b	13f78 <close_stdout@@Base+0xcd4>
   13ba0:	b	13cf4 <close_stdout@@Base+0xa50>
   13ba4:	b	13e20 <close_stdout@@Base+0xb7c>
   13ba8:	b	13cf4 <close_stdout@@Base+0xa50>
   13bac:	b	13e20 <close_stdout@@Base+0xb7c>
   13bb0:	b	13cf4 <close_stdout@@Base+0xa50>
   13bb4:	b	13cf4 <close_stdout@@Base+0xa50>
   13bb8:	b	13cf4 <close_stdout@@Base+0xa50>
   13bbc:	b	13cf4 <close_stdout@@Base+0xa50>
   13bc0:	b	13cf4 <close_stdout@@Base+0xa50>
   13bc4:	b	13cf4 <close_stdout@@Base+0xa50>
   13bc8:	b	13cf4 <close_stdout@@Base+0xa50>
   13bcc:	b	13cf4 <close_stdout@@Base+0xa50>
   13bd0:	b	13cf4 <close_stdout@@Base+0xa50>
   13bd4:	b	13cf4 <close_stdout@@Base+0xa50>
   13bd8:	b	13cf4 <close_stdout@@Base+0xa50>
   13bdc:	b	13cf4 <close_stdout@@Base+0xa50>
   13be0:	b	13cf4 <close_stdout@@Base+0xa50>
   13be4:	b	13cf4 <close_stdout@@Base+0xa50>
   13be8:	b	13cf4 <close_stdout@@Base+0xa50>
   13bec:	b	13cf4 <close_stdout@@Base+0xa50>
   13bf0:	b	13cf4 <close_stdout@@Base+0xa50>
   13bf4:	b	13cf4 <close_stdout@@Base+0xa50>
   13bf8:	b	13cf4 <close_stdout@@Base+0xa50>
   13bfc:	b	13cf4 <close_stdout@@Base+0xa50>
   13c00:	b	13cf4 <close_stdout@@Base+0xa50>
   13c04:	b	13cf4 <close_stdout@@Base+0xa50>
   13c08:	b	13cf4 <close_stdout@@Base+0xa50>
   13c0c:	b	13cf4 <close_stdout@@Base+0xa50>
   13c10:	b	13cf4 <close_stdout@@Base+0xa50>
   13c14:	b	13cf4 <close_stdout@@Base+0xa50>
   13c18:	b	13e00 <close_stdout@@Base+0xb5c>
   13c1c:	b	13e20 <close_stdout@@Base+0xb7c>
   13c20:	b	13e00 <close_stdout@@Base+0xb5c>
   13c24:	b	13e18 <close_stdout@@Base+0xb74>
   13c28:	ldr	r3, [sp, #160]	; 0xa0
   13c2c:	cmp	r3, #2
   13c30:	beq	144bc <close_stdout@@Base+0x1218>
   13c34:	cmp	r3, #3
   13c38:	bne	13cf4 <close_stdout@@Base+0xa50>
   13c3c:	ldr	r1, [sp, #164]	; 0xa4
   13c40:	tst	r1, #4
   13c44:	beq	13cf4 <close_stdout@@Base+0xa50>
   13c48:	add	r3, fp, #2
   13c4c:	cmp	r8, r3
   13c50:	bls	13cf4 <close_stdout@@Base+0xa50>
   13c54:	ldrb	r2, [r5, #1]
   13c58:	mov	r1, #1
   13c5c:	cmp	r2, #63	; 0x3f
   13c60:	bne	13cf4 <close_stdout@@Base+0xa50>
   13c64:	ldr	r0, [sp, #32]
   13c68:	ldrb	ip, [r0, r3]
   13c6c:	sub	r0, ip, #33	; 0x21
   13c70:	uxtb	r0, r0
   13c74:	cmp	r0, #29
   13c78:	bhi	13cf4 <close_stdout@@Base+0xa50>
   13c7c:	lsl	r1, r1, r0
   13c80:	movw	r0, #20929	; 0x51c1
   13c84:	movt	r0, #14336	; 0x3800
   13c88:	and	r0, r1, r0
   13c8c:	cmp	r0, #0
   13c90:	beq	13cf4 <close_stdout@@Base+0xa50>
   13c94:	ldr	r1, [sp, #36]	; 0x24
   13c98:	cmp	r1, #0
   13c9c:	bne	13e3c <close_stdout@@Base+0xb98>
   13ca0:	cmp	r9, sl
   13ca4:	mov	r4, ip
   13ca8:	mov	fp, r3
   13cac:	ldrcc	r0, [sp, #40]	; 0x28
   13cb0:	strbcc	r2, [r0, r9]
   13cb4:	add	r2, r9, #1
   13cb8:	cmp	sl, r2
   13cbc:	ldrhi	r0, [sp, #40]	; 0x28
   13cc0:	movhi	r1, #34	; 0x22
   13cc4:	strbhi	r1, [r0, r2]
   13cc8:	add	r2, r9, #2
   13ccc:	cmp	sl, r2
   13cd0:	ldrhi	r0, [sp, #40]	; 0x28
   13cd4:	movhi	r1, #34	; 0x22
   13cd8:	strbhi	r1, [r0, r2]
   13cdc:	add	r2, r9, #3
   13ce0:	cmp	sl, r2
   13ce4:	add	r9, r9, #4
   13ce8:	ldrhi	r0, [sp, #40]	; 0x28
   13cec:	movhi	r1, #63	; 0x3f
   13cf0:	strbhi	r1, [r0, r2]
   13cf4:	ldr	r0, [sp, #44]	; 0x2c
   13cf8:	cmp	r0, #0
   13cfc:	bne	13d24 <close_stdout@@Base+0xa80>
   13d00:	ldr	r1, [sp, #48]	; 0x30
   13d04:	cmp	r1, #0
   13d08:	beq	13d24 <close_stdout@@Base+0xa80>
   13d0c:	ubfx	r2, r4, #5, #8
   13d10:	and	r3, r4, #31
   13d14:	ldr	r2, [r1, r2, lsl #2]
   13d18:	lsr	r3, r2, r3
   13d1c:	tst	r3, #1
   13d20:	bne	13d2c <close_stdout@@Base+0xa88>
   13d24:	cmp	r6, #0
   13d28:	beq	13d4c <close_stdout@@Base+0xaa8>
   13d2c:	ldr	r2, [sp, #36]	; 0x24
   13d30:	cmp	r2, #0
   13d34:	bne	13e3c <close_stdout@@Base+0xb98>
   13d38:	cmp	r9, sl
   13d3c:	ldrcc	r0, [sp, #40]	; 0x28
   13d40:	movcc	r3, #92	; 0x5c
   13d44:	strbcc	r3, [r0, r9]
   13d48:	add	r9, r9, #1
   13d4c:	add	fp, fp, #1
   13d50:	cmp	r9, sl
   13d54:	ldrcc	r1, [sp, #40]	; 0x28
   13d58:	strbcc	r4, [r1, r9]
   13d5c:	cmn	r8, #1
   13d60:	add	r9, r9, #1
   13d64:	bne	139ec <close_stdout@@Base+0x748>
   13d68:	ldr	r2, [sp, #32]
   13d6c:	ldrb	r3, [r2, fp]
   13d70:	adds	r3, r3, #0
   13d74:	movne	r3, #1
   13d78:	cmp	r3, #0
   13d7c:	bne	139fc <close_stdout@@Base+0x758>
   13d80:	ldr	r3, [sp, #160]	; 0xa0
   13d84:	cmp	r9, #0
   13d88:	cmpeq	r3, #2
   13d8c:	bne	13d9c <close_stdout@@Base+0xaf8>
   13d90:	ldr	r0, [sp, #36]	; 0x24
   13d94:	cmp	r0, #0
   13d98:	bne	13e3c <close_stdout@@Base+0xb98>
   13d9c:	ldr	r1, [sp, #36]	; 0x24
   13da0:	ldr	r2, [sp, #52]	; 0x34
   13da4:	eor	r3, r1, #1
   13da8:	cmp	r2, #0
   13dac:	moveq	r3, #0
   13db0:	andne	r3, r3, #1
   13db4:	cmp	r3, #0
   13db8:	beq	13de4 <close_stdout@@Base+0xb40>
   13dbc:	ldrb	r3, [r2]
   13dc0:	cmp	r3, #0
   13dc4:	beq	13de4 <close_stdout@@Base+0xb40>
   13dc8:	ldr	r1, [sp, #40]	; 0x28
   13dcc:	cmp	sl, r9
   13dd0:	strbhi	r3, [r1, r9]
   13dd4:	ldrb	r3, [r2, #1]!
   13dd8:	add	r9, r9, #1
   13ddc:	cmp	r3, #0
   13de0:	bne	13dcc <close_stdout@@Base+0xb28>
   13de4:	cmp	r9, sl
   13de8:	movcs	r0, r9
   13dec:	ldrcc	r1, [sp, #40]	; 0x28
   13df0:	movcc	r3, #0
   13df4:	movcc	r0, r9
   13df8:	strbcc	r3, [r1, r9]
   13dfc:	b	13e78 <close_stdout@@Base+0xbd4>
   13e00:	cmn	r8, #1
   13e04:	beq	144cc <close_stdout@@Base+0x1228>
   13e08:	subs	r3, r8, #1
   13e0c:	movne	r3, #1
   13e10:	cmp	r3, #0
   13e14:	bne	13cf4 <close_stdout@@Base+0xa50>
   13e18:	cmp	fp, #0
   13e1c:	bne	13cf4 <close_stdout@@Base+0xa50>
   13e20:	ldr	r3, [sp, #36]	; 0x24
   13e24:	ldr	r0, [sp, #160]	; 0xa0
   13e28:	cmp	r0, #2
   13e2c:	movne	r3, #0
   13e30:	andeq	r3, r3, #1
   13e34:	cmp	r3, #0
   13e38:	beq	13cf4 <close_stdout@@Base+0xa50>
   13e3c:	ldr	r2, [sp, #164]	; 0xa4
   13e40:	mov	ip, #0
   13e44:	ldr	r0, [sp, #160]	; 0xa0
   13e48:	bic	r3, r2, #2
   13e4c:	ldr	r1, [sp, #72]	; 0x48
   13e50:	ldr	r2, [sp, #68]	; 0x44
   13e54:	stm	sp, {r0, r3}
   13e58:	mov	r3, r8
   13e5c:	str	r1, [sp, #12]
   13e60:	mov	r1, sl
   13e64:	str	r2, [sp, #16]
   13e68:	ldr	r0, [sp, #40]	; 0x28
   13e6c:	ldr	r2, [sp, #32]
   13e70:	str	ip, [sp, #8]
   13e74:	bl	1390c <close_stdout@@Base+0x668>
   13e78:	ldr	r1, [sp, #56]	; 0x38
   13e7c:	ldr	r2, [sp, #116]	; 0x74
   13e80:	ldr	r3, [r1]
   13e84:	cmp	r2, r3
   13e88:	bne	145bc <close_stdout@@Base+0x1318>
   13e8c:	add	sp, sp, #124	; 0x7c
   13e90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e94:	mov	r3, #114	; 0x72
   13e98:	ldr	r2, [sp, #36]	; 0x24
   13e9c:	ldr	r0, [sp, #160]	; 0xa0
   13ea0:	cmp	r0, #2
   13ea4:	movne	r2, #0
   13ea8:	andeq	r2, r2, #1
   13eac:	cmp	r2, #0
   13eb0:	bne	13e3c <close_stdout@@Base+0xb98>
   13eb4:	ldr	r1, [sp, #24]
   13eb8:	cmp	r1, #0
   13ebc:	beq	13cf4 <close_stdout@@Base+0xa50>
   13ec0:	mov	r4, r3
   13ec4:	b	13d2c <close_stdout@@Base+0xa88>
   13ec8:	mov	r3, #98	; 0x62
   13ecc:	b	13eb4 <close_stdout@@Base+0xc10>
   13ed0:	mov	r3, #102	; 0x66
   13ed4:	b	13eb4 <close_stdout@@Base+0xc10>
   13ed8:	mov	r3, #118	; 0x76
   13edc:	b	13eb4 <close_stdout@@Base+0xc10>
   13ee0:	mov	r3, #97	; 0x61
   13ee4:	b	13eb4 <close_stdout@@Base+0xc10>
   13ee8:	mov	r3, #110	; 0x6e
   13eec:	b	13e98 <close_stdout@@Base+0xbf4>
   13ef0:	mov	r3, #116	; 0x74
   13ef4:	b	13e98 <close_stdout@@Base+0xbf4>
   13ef8:	ldr	r2, [sp, #24]
   13efc:	cmp	r2, #0
   13f00:	beq	144a8 <close_stdout@@Base+0x1204>
   13f04:	ldr	r3, [sp, #36]	; 0x24
   13f08:	cmp	r3, #0
   13f0c:	bne	13e3c <close_stdout@@Base+0xb98>
   13f10:	cmp	r9, sl
   13f14:	add	r2, r9, #1
   13f18:	ldrcc	r0, [sp, #40]	; 0x28
   13f1c:	movcc	r3, #92	; 0x5c
   13f20:	strbcc	r3, [r0, r9]
   13f24:	add	r3, fp, #1
   13f28:	cmp	r8, r3
   13f2c:	bls	13f6c <close_stdout@@Base+0xcc8>
   13f30:	ldr	r1, [sp, #32]
   13f34:	ldrb	r3, [r1, r3]
   13f38:	sub	r3, r3, #48	; 0x30
   13f3c:	cmp	r3, #9
   13f40:	bhi	13f6c <close_stdout@@Base+0xcc8>
   13f44:	cmp	sl, r2
   13f48:	ldrhi	r0, [sp, #40]	; 0x28
   13f4c:	movhi	r3, #48	; 0x30
   13f50:	strbhi	r3, [r0, r2]
   13f54:	add	r3, r9, #2
   13f58:	cmp	sl, r3
   13f5c:	ldrhi	r1, [sp, #40]	; 0x28
   13f60:	movhi	r2, #48	; 0x30
   13f64:	strbhi	r2, [r1, r3]
   13f68:	add	r2, r9, #3
   13f6c:	mov	r9, r2
   13f70:	mov	r4, #48	; 0x30
   13f74:	b	13d00 <close_stdout@@Base+0xa5c>
   13f78:	ldr	r1, [sp, #76]	; 0x4c
   13f7c:	cmp	r1, #0
   13f80:	beq	13f8c <close_stdout@@Base+0xce8>
   13f84:	cmp	r7, #0
   13f88:	bne	13d4c <close_stdout@@Base+0xaa8>
   13f8c:	mov	r3, r4
   13f90:	b	13e98 <close_stdout@@Base+0xbf4>
   13f94:	ldr	r1, [sp, #160]	; 0xa0
   13f98:	cmp	r1, #2
   13f9c:	bne	13cf4 <close_stdout@@Base+0xa50>
   13fa0:	ldr	r2, [sp, #36]	; 0x24
   13fa4:	cmp	r2, #0
   13fa8:	bne	13e3c <close_stdout@@Base+0xb98>
   13fac:	cmp	r9, sl
   13fb0:	ldrcc	r0, [sp, #40]	; 0x28
   13fb4:	movcc	r3, #39	; 0x27
   13fb8:	strbcc	r3, [r0, r9]
   13fbc:	add	r3, r9, #1
   13fc0:	cmp	sl, r3
   13fc4:	ldrhi	r1, [sp, #40]	; 0x28
   13fc8:	movhi	r2, #92	; 0x5c
   13fcc:	strbhi	r2, [r1, r3]
   13fd0:	add	r3, r9, #2
   13fd4:	cmp	sl, r3
   13fd8:	add	r9, r9, #3
   13fdc:	ldrhi	r0, [sp, #40]	; 0x28
   13fe0:	movhi	r2, #39	; 0x27
   13fe4:	strbhi	r2, [r0, r3]
   13fe8:	b	13cf4 <close_stdout@@Base+0xa50>
   13fec:	ldr	r1, [sp, #64]	; 0x40
   13ff0:	cmp	r1, #1
   13ff4:	bne	142ec <close_stdout@@Base+0x1048>
   13ff8:	bl	11428 <__ctype_b_loc@plt>
   13ffc:	ldr	r2, [sp, #64]	; 0x40
   14000:	sxth	r3, r4
   14004:	str	r2, [sp, #60]	; 0x3c
   14008:	lsl	r3, r3, #1
   1400c:	ldr	r2, [r0]
   14010:	ldrh	r2, [r2, r3]
   14014:	eor	r2, r2, #16384	; 0x4000
   14018:	ubfx	r2, r2, #14, #1
   1401c:	ldr	r1, [sp, #24]
   14020:	ands	r2, r2, r1
   14024:	beq	13cf4 <close_stdout@@Base+0xa50>
   14028:	ldr	r3, [sp, #60]	; 0x3c
   1402c:	mov	r0, #92	; 0x5c
   14030:	ldr	r7, [sp, #36]	; 0x24
   14034:	add	r1, r3, fp
   14038:	str	r8, [sp, #60]	; 0x3c
   1403c:	ldr	r3, [sp, #40]	; 0x28
   14040:	b	140a4 <close_stdout@@Base+0xe00>
   14044:	cmp	r7, #0
   14048:	bne	144e4 <close_stdout@@Base+0x1240>
   1404c:	add	ip, r9, #1
   14050:	cmp	r9, sl
   14054:	strbcc	r0, [r3, r9]
   14058:	cmp	sl, ip
   1405c:	lsrhi	r8, r4, #6
   14060:	addhi	r8, r8, #48	; 0x30
   14064:	strbhi	r8, [r3, ip]
   14068:	add	ip, r9, #2
   1406c:	add	r9, r9, #3
   14070:	cmp	sl, ip
   14074:	ubfxhi	r8, r4, #3, #3
   14078:	and	r4, r4, #7
   1407c:	add	r4, r4, #48	; 0x30
   14080:	addhi	r8, r8, #48	; 0x30
   14084:	strbhi	r8, [r3, ip]
   14088:	add	fp, fp, #1
   1408c:	cmp	r1, fp
   14090:	bls	140d0 <close_stdout@@Base+0xe2c>
   14094:	cmp	r9, sl
   14098:	strbcc	r4, [r3, r9]
   1409c:	ldrb	r4, [r5, #1]!
   140a0:	add	r9, r9, #1
   140a4:	cmp	r2, #0
   140a8:	bne	14044 <close_stdout@@Base+0xda0>
   140ac:	cmp	r6, #0
   140b0:	beq	14088 <close_stdout@@Base+0xde4>
   140b4:	add	fp, fp, #1
   140b8:	cmp	r9, sl
   140bc:	strbcc	r0, [r3, r9]
   140c0:	cmp	r1, fp
   140c4:	add	r9, r9, #1
   140c8:	mov	r6, #0
   140cc:	bhi	14094 <close_stdout@@Base+0xdf0>
   140d0:	ldr	r8, [sp, #60]	; 0x3c
   140d4:	b	13d50 <close_stdout@@Base+0xaac>
   140d8:	ldr	r3, [sp, #36]	; 0x24
   140dc:	cmp	r3, #0
   140e0:	bne	145e4 <close_stdout@@Base+0x1340>
   140e4:	cmp	sl, #0
   140e8:	beq	144fc <close_stdout@@Base+0x1258>
   140ec:	ldr	r1, [sp, #40]	; 0x28
   140f0:	mov	r0, #1
   140f4:	ldr	r2, [pc, #1296]	; 1460c <close_stdout@@Base+0x1368>
   140f8:	mov	r3, #34	; 0x22
   140fc:	str	r0, [sp, #24]
   14100:	mov	r9, r0
   14104:	add	r2, pc, r2
   14108:	str	r0, [sp, #28]
   1410c:	strb	r3, [r1]
   14110:	str	r2, [sp, #52]	; 0x34
   14114:	b	139c0 <close_stdout@@Base+0x71c>
   14118:	ldr	r3, [pc, #1264]	; 14610 <close_stdout@@Base+0x136c>
   1411c:	mov	r2, #1
   14120:	mov	r0, #3
   14124:	str	r2, [sp, #36]	; 0x24
   14128:	add	r3, pc, r3
   1412c:	str	r2, [sp, #24]
   14130:	str	r3, [sp, #52]	; 0x34
   14134:	mov	r9, #0
   14138:	str	r2, [sp, #28]
   1413c:	str	r0, [sp, #160]	; 0xa0
   14140:	b	139c0 <close_stdout@@Base+0x71c>
   14144:	mov	r0, #0
   14148:	mov	r1, #1
   1414c:	str	r0, [sp, #36]	; 0x24
   14150:	mov	r9, r0
   14154:	str	r1, [sp, #24]
   14158:	str	r0, [sp, #28]
   1415c:	str	r0, [sp, #52]	; 0x34
   14160:	b	139c0 <close_stdout@@Base+0x71c>
   14164:	ldr	r3, [sp, #160]	; 0xa0
   14168:	cmp	r3, #8
   1416c:	beq	14198 <close_stdout@@Base+0xef4>
   14170:	ldr	r0, [pc, #1180]	; 14614 <close_stdout@@Base+0x1370>
   14174:	mov	r1, r3
   14178:	add	r0, pc, r0
   1417c:	bl	137a8 <close_stdout@@Base+0x504>
   14180:	ldr	r1, [sp, #160]	; 0xa0
   14184:	str	r0, [sp, #72]	; 0x48
   14188:	ldr	r0, [pc, #1160]	; 14618 <close_stdout@@Base+0x1374>
   1418c:	add	r0, pc, r0
   14190:	bl	137a8 <close_stdout@@Base+0x504>
   14194:	str	r0, [sp, #68]	; 0x44
   14198:	ldr	r0, [sp, #36]	; 0x24
   1419c:	cmp	r0, #0
   141a0:	movne	r9, #0
   141a4:	bne	141dc <close_stdout@@Base+0xf38>
   141a8:	ldr	r1, [sp, #72]	; 0x48
   141ac:	ldrb	r3, [r1]
   141b0:	cmp	r3, #0
   141b4:	beq	145b4 <close_stdout@@Base+0x1310>
   141b8:	mov	r2, r1
   141bc:	ldr	r1, [sp, #40]	; 0x28
   141c0:	mov	r9, r0
   141c4:	cmp	r9, sl
   141c8:	strbcc	r3, [r1, r9]
   141cc:	ldrb	r3, [r2, #1]!
   141d0:	add	r9, r9, #1
   141d4:	cmp	r3, #0
   141d8:	bne	141c4 <close_stdout@@Base+0xf20>
   141dc:	ldr	r0, [sp, #68]	; 0x44
   141e0:	str	r0, [sp, #52]	; 0x34
   141e4:	bl	11458 <strlen@plt>
   141e8:	mov	r2, #1
   141ec:	str	r2, [sp, #24]
   141f0:	str	r0, [sp, #28]
   141f4:	b	139c0 <close_stdout@@Base+0x71c>
   141f8:	ldr	r3, [pc, #1052]	; 1461c <close_stdout@@Base+0x1378>
   141fc:	mov	r2, #0
   14200:	mov	r1, #1
   14204:	mov	r0, #2
   14208:	add	r3, pc, r3
   1420c:	str	r1, [sp, #36]	; 0x24
   14210:	str	r2, [sp, #24]
   14214:	mov	r9, r2
   14218:	str	r1, [sp, #28]
   1421c:	str	r3, [sp, #52]	; 0x34
   14220:	str	r0, [sp, #160]	; 0xa0
   14224:	b	139c0 <close_stdout@@Base+0x71c>
   14228:	ldr	r3, [sp, #36]	; 0x24
   1422c:	cmp	r3, #0
   14230:	bne	145c0 <close_stdout@@Base+0x131c>
   14234:	cmp	sl, #0
   14238:	beq	1451c <close_stdout@@Base+0x1278>
   1423c:	ldr	r1, [sp, #40]	; 0x28
   14240:	mov	r3, #39	; 0x27
   14244:	ldr	r2, [sp, #36]	; 0x24
   14248:	mov	r0, #1
   1424c:	mov	r9, r0
   14250:	str	r0, [sp, #28]
   14254:	strb	r3, [r1]
   14258:	ldr	r3, [pc, #960]	; 14620 <close_stdout@@Base+0x137c>
   1425c:	str	r2, [sp, #24]
   14260:	add	r3, pc, r3
   14264:	str	r3, [sp, #52]	; 0x34
   14268:	b	139c0 <close_stdout@@Base+0x71c>
   1426c:	ldr	r2, [sp, #28]
   14270:	cmp	r2, #1
   14274:	add	r4, fp, r2
   14278:	movls	r3, #0
   1427c:	movhi	r3, #1
   14280:	cmn	r8, #1
   14284:	movne	r3, #0
   14288:	cmp	r3, #0
   1428c:	beq	1429c <close_stdout@@Base+0xff8>
   14290:	ldr	r0, [sp, #32]
   14294:	bl	11458 <strlen@plt>
   14298:	mov	r8, r0
   1429c:	cmp	r8, r4
   142a0:	ldrcc	r3, [sp, #32]
   142a4:	movcc	r6, #0
   142a8:	addcc	r5, r3, fp
   142ac:	bcc	13a1c <close_stdout@@Base+0x778>
   142b0:	ldr	r0, [sp, #32]
   142b4:	ldr	r1, [sp, #52]	; 0x34
   142b8:	add	r5, r0, fp
   142bc:	ldr	r2, [sp, #28]
   142c0:	mov	r0, r5
   142c4:	bl	112f0 <memcmp@plt>
   142c8:	cmp	r0, #0
   142cc:	bne	142e4 <close_stdout@@Base+0x1040>
   142d0:	ldr	r1, [sp, #36]	; 0x24
   142d4:	cmp	r1, #0
   142d8:	bne	13e3c <close_stdout@@Base+0xb98>
   142dc:	mov	r6, #1
   142e0:	b	13a1c <close_stdout@@Base+0x778>
   142e4:	mov	r6, #0
   142e8:	b	13a1c <close_stdout@@Base+0x778>
   142ec:	add	r7, sp, #108	; 0x6c
   142f0:	cmn	r8, #1
   142f4:	mov	r3, #0
   142f8:	str	r3, [sp, #108]	; 0x6c
   142fc:	str	r3, [r7, #4]
   14300:	beq	144ec <close_stdout@@Base+0x1248>
   14304:	mov	r1, #0
   14308:	ldr	r0, [sp, #32]
   1430c:	mov	ip, #1
   14310:	str	r9, [sp, #88]	; 0x58
   14314:	str	r6, [sp, #96]	; 0x60
   14318:	mov	r9, r1
   1431c:	str	r5, [sp, #100]	; 0x64
   14320:	mov	r6, ip
   14324:	mov	r5, r7
   14328:	add	r3, sp, #104	; 0x68
   1432c:	sub	r0, r0, #1
   14330:	str	r3, [sp, #80]	; 0x50
   14334:	str	r0, [sp, #84]	; 0x54
   14338:	str	r1, [sp, #60]	; 0x3c
   1433c:	str	r4, [sp, #92]	; 0x5c
   14340:	ldr	r2, [sp, #32]
   14344:	add	r7, r9, fp
   14348:	add	r0, sp, #104	; 0x68
   1434c:	mov	r3, r5
   14350:	add	r4, r2, r7
   14354:	rsb	r2, r7, r8
   14358:	mov	r1, r4
   1435c:	bl	113bc <mbrtowc@plt>
   14360:	subs	r2, r0, #0
   14364:	beq	14470 <close_stdout@@Base+0x11cc>
   14368:	cmn	r2, #1
   1436c:	beq	14598 <close_stdout@@Base+0x12f4>
   14370:	cmn	r2, #2
   14374:	beq	1453c <close_stdout@@Base+0x1298>
   14378:	ldr	r3, [sp, #36]	; 0x24
   1437c:	ldr	r0, [sp, #160]	; 0xa0
   14380:	cmp	r0, #2
   14384:	movne	r3, #0
   14388:	andeq	r3, r3, #1
   1438c:	cmp	r3, #0
   14390:	beq	1444c <close_stdout@@Base+0x11a8>
   14394:	cmp	r2, #1
   14398:	beq	1444c <close_stdout@@Base+0x11a8>
   1439c:	ldr	r1, [sp, #84]	; 0x54
   143a0:	add	r3, r1, r2
   143a4:	add	r7, r3, r7
   143a8:	ldrb	r3, [r4, #1]!
   143ac:	sub	r3, r3, #91	; 0x5b
   143b0:	cmp	r3, #33	; 0x21
   143b4:	addls	pc, pc, r3, lsl #2
   143b8:	b	14444 <close_stdout@@Base+0x11a0>
   143bc:	b	13e3c <close_stdout@@Base+0xb98>
   143c0:	b	13e3c <close_stdout@@Base+0xb98>
   143c4:	b	14444 <close_stdout@@Base+0x11a0>
   143c8:	b	13e3c <close_stdout@@Base+0xb98>
   143cc:	b	14444 <close_stdout@@Base+0x11a0>
   143d0:	b	13e3c <close_stdout@@Base+0xb98>
   143d4:	b	14444 <close_stdout@@Base+0x11a0>
   143d8:	b	14444 <close_stdout@@Base+0x11a0>
   143dc:	b	14444 <close_stdout@@Base+0x11a0>
   143e0:	b	14444 <close_stdout@@Base+0x11a0>
   143e4:	b	14444 <close_stdout@@Base+0x11a0>
   143e8:	b	14444 <close_stdout@@Base+0x11a0>
   143ec:	b	14444 <close_stdout@@Base+0x11a0>
   143f0:	b	14444 <close_stdout@@Base+0x11a0>
   143f4:	b	14444 <close_stdout@@Base+0x11a0>
   143f8:	b	14444 <close_stdout@@Base+0x11a0>
   143fc:	b	14444 <close_stdout@@Base+0x11a0>
   14400:	b	14444 <close_stdout@@Base+0x11a0>
   14404:	b	14444 <close_stdout@@Base+0x11a0>
   14408:	b	14444 <close_stdout@@Base+0x11a0>
   1440c:	b	14444 <close_stdout@@Base+0x11a0>
   14410:	b	14444 <close_stdout@@Base+0x11a0>
   14414:	b	14444 <close_stdout@@Base+0x11a0>
   14418:	b	14444 <close_stdout@@Base+0x11a0>
   1441c:	b	14444 <close_stdout@@Base+0x11a0>
   14420:	b	14444 <close_stdout@@Base+0x11a0>
   14424:	b	14444 <close_stdout@@Base+0x11a0>
   14428:	b	14444 <close_stdout@@Base+0x11a0>
   1442c:	b	14444 <close_stdout@@Base+0x11a0>
   14430:	b	14444 <close_stdout@@Base+0x11a0>
   14434:	b	14444 <close_stdout@@Base+0x11a0>
   14438:	b	14444 <close_stdout@@Base+0x11a0>
   1443c:	b	14444 <close_stdout@@Base+0x11a0>
   14440:	b	13e3c <close_stdout@@Base+0xb98>
   14444:	cmp	r4, r7
   14448:	bne	143a8 <close_stdout@@Base+0x1104>
   1444c:	ldr	r0, [sp, #104]	; 0x68
   14450:	add	r9, r9, r2
   14454:	bl	11368 <iswprint@plt>
   14458:	cmp	r0, #0
   1445c:	mov	r0, r5
   14460:	moveq	r6, #0
   14464:	bl	112e4 <mbsinit@plt>
   14468:	cmp	r0, #0
   1446c:	beq	14340 <close_stdout@@Base+0x109c>
   14470:	mov	ip, r6
   14474:	eor	r2, ip, #1
   14478:	str	r9, [sp, #60]	; 0x3c
   1447c:	ldr	r4, [sp, #92]	; 0x5c
   14480:	uxtb	r2, r2
   14484:	ldr	r9, [sp, #88]	; 0x58
   14488:	ldr	r6, [sp, #96]	; 0x60
   1448c:	ldr	r5, [sp, #100]	; 0x64
   14490:	ldr	r3, [sp, #60]	; 0x3c
   14494:	cmp	r3, #1
   14498:	bls	1401c <close_stdout@@Base+0xd78>
   1449c:	ldr	r0, [sp, #24]
   144a0:	and	r2, r2, r0
   144a4:	b	14028 <close_stdout@@Base+0xd84>
   144a8:	ldr	r2, [sp, #164]	; 0xa4
   144ac:	tst	r2, #1
   144b0:	addne	fp, fp, #1
   144b4:	bne	139e4 <close_stdout@@Base+0x740>
   144b8:	b	13cf4 <close_stdout@@Base+0xa50>
   144bc:	ldr	r0, [sp, #36]	; 0x24
   144c0:	cmp	r0, #0
   144c4:	beq	13cf4 <close_stdout@@Base+0xa50>
   144c8:	b	13e3c <close_stdout@@Base+0xb98>
   144cc:	ldr	r2, [sp, #32]
   144d0:	ldrb	r3, [r2, #1]
   144d4:	adds	r3, r3, #0
   144d8:	movne	r3, #1
   144dc:	b	13e10 <close_stdout@@Base+0xb6c>
   144e0:	bl	11578 <abort@plt>
   144e4:	ldr	r8, [sp, #60]	; 0x3c
   144e8:	b	13e3c <close_stdout@@Base+0xb98>
   144ec:	ldr	r0, [sp, #32]
   144f0:	bl	11458 <strlen@plt>
   144f4:	mov	r8, r0
   144f8:	b	14304 <close_stdout@@Base+0x1060>
   144fc:	ldr	r2, [pc, #288]	; 14624 <close_stdout@@Base+0x1380>
   14500:	mov	r1, #1
   14504:	mov	r9, r1
   14508:	str	r1, [sp, #24]
   1450c:	add	r2, pc, r2
   14510:	str	r1, [sp, #28]
   14514:	str	r2, [sp, #52]	; 0x34
   14518:	b	139c0 <close_stdout@@Base+0x71c>
   1451c:	ldr	r2, [pc, #260]	; 14628 <close_stdout@@Base+0x1384>
   14520:	mov	r3, #1
   14524:	mov	r9, r3
   14528:	str	r3, [sp, #28]
   1452c:	add	r2, pc, r2
   14530:	str	sl, [sp, #24]
   14534:	str	r2, [sp, #52]	; 0x34
   14538:	b	139c0 <close_stdout@@Base+0x71c>
   1453c:	cmp	r8, r7
   14540:	str	r9, [sp, #60]	; 0x3c
   14544:	mov	ip, r4
   14548:	ldr	r6, [sp, #96]	; 0x60
   1454c:	ldr	r9, [sp, #88]	; 0x58
   14550:	ldr	r4, [sp, #92]	; 0x5c
   14554:	ldr	r5, [sp, #100]	; 0x64
   14558:	bls	14590 <close_stdout@@Base+0x12ec>
   1455c:	ldrb	r3, [ip]
   14560:	cmp	r3, #0
   14564:	beq	14590 <close_stdout@@Base+0x12ec>
   14568:	ldr	r3, [sp, #60]	; 0x3c
   1456c:	b	1457c <close_stdout@@Base+0x12d8>
   14570:	ldrb	r2, [r5, r3]
   14574:	cmp	r2, #0
   14578:	beq	1458c <close_stdout@@Base+0x12e8>
   1457c:	add	r3, r3, #1
   14580:	add	r2, fp, r3
   14584:	cmp	r8, r2
   14588:	bhi	14570 <close_stdout@@Base+0x12cc>
   1458c:	str	r3, [sp, #60]	; 0x3c
   14590:	mov	r2, #1
   14594:	b	14490 <close_stdout@@Base+0x11ec>
   14598:	str	r9, [sp, #60]	; 0x3c
   1459c:	mov	r2, #1
   145a0:	ldr	r4, [sp, #92]	; 0x5c
   145a4:	ldr	r6, [sp, #96]	; 0x60
   145a8:	ldr	r9, [sp, #88]	; 0x58
   145ac:	ldr	r5, [sp, #100]	; 0x64
   145b0:	b	14490 <close_stdout@@Base+0x11ec>
   145b4:	ldr	r9, [sp, #36]	; 0x24
   145b8:	b	141dc <close_stdout@@Base+0xf38>
   145bc:	bl	11314 <__stack_chk_fail@plt>
   145c0:	ldr	r1, [pc, #100]	; 1462c <close_stdout@@Base+0x1388>
   145c4:	mov	r3, #0
   145c8:	mov	r0, #1
   145cc:	str	r3, [sp, #24]
   145d0:	add	r1, pc, r1
   145d4:	str	r0, [sp, #28]
   145d8:	mov	r9, r3
   145dc:	str	r1, [sp, #52]	; 0x34
   145e0:	b	139c0 <close_stdout@@Base+0x71c>
   145e4:	ldr	r0, [pc, #68]	; 14630 <close_stdout@@Base+0x138c>
   145e8:	mov	r3, #1
   145ec:	mov	r9, #0
   145f0:	str	r3, [sp, #24]
   145f4:	add	r0, pc, r0
   145f8:	str	r3, [sp, #28]
   145fc:	str	r0, [sp, #52]	; 0x34
   14600:	b	139c0 <close_stdout@@Base+0x71c>
   14604:	ldrdeq	r5, [r1], -r0
   14608:	andeq	r0, r0, r8, lsr r1
   1460c:	andeq	r3, r0, ip, ror r7
   14610:	andeq	r3, r0, r8, asr r7
   14614:	andeq	r3, r0, r4, lsl r7
   14618:	strdeq	r3, [r0], -r0
   1461c:	andeq	r3, r0, r4, ror r6
   14620:	andeq	r3, r0, ip, lsl r6
   14624:	andeq	r3, r0, r4, ror r3
   14628:	andeq	r3, r0, r0, asr r3
   1462c:	andeq	r3, r0, ip, lsr #5
   14630:	andeq	r3, r0, ip, lsl #5
   14634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14638:	sub	sp, sp, #44	; 0x2c
   1463c:	mov	r6, r0
   14640:	mov	r9, r1
   14644:	mov	sl, r2
   14648:	mov	r4, r3
   1464c:	bl	11470 <__errno_location@plt>
   14650:	ldr	fp, [pc, #412]	; 147f4 <close_stdout@@Base+0x1550>
   14654:	cmp	r6, #0
   14658:	add	fp, pc, fp
   1465c:	ldr	r5, [fp]
   14660:	ldr	r1, [r0]
   14664:	mov	r8, r0
   14668:	str	r1, [sp, #36]	; 0x24
   1466c:	blt	147ec <close_stdout@@Base+0x1548>
   14670:	ldr	r3, [pc, #384]	; 147f8 <close_stdout@@Base+0x1554>
   14674:	add	r3, pc, r3
   14678:	ldr	r3, [r3]
   1467c:	cmp	r6, r3
   14680:	bcc	146d4 <close_stdout@@Base+0x1430>
   14684:	add	r7, r6, #1
   14688:	cmn	r7, #-536870911	; 0xe0000001
   1468c:	bhi	147f0 <close_stdout@@Base+0x154c>
   14690:	add	r3, fp, #4
   14694:	cmp	r5, r3
   14698:	beq	147c4 <close_stdout@@Base+0x1520>
   1469c:	mov	r0, r5
   146a0:	lsl	r1, r7, #3
   146a4:	bl	158ac <close_stdout@@Base+0x2608>
   146a8:	mov	r5, r0
   146ac:	str	r0, [fp]
   146b0:	ldr	fp, [pc, #324]	; 147fc <close_stdout@@Base+0x1558>
   146b4:	mov	r1, #0
   146b8:	add	fp, pc, fp
   146bc:	ldr	r0, [fp]
   146c0:	rsb	r2, r0, r7
   146c4:	add	r0, r5, r0, lsl #3
   146c8:	lsl	r2, r2, #3
   146cc:	bl	11494 <memset@plt>
   146d0:	str	r7, [fp]
   146d4:	add	r2, r4, #8
   146d8:	str	r2, [sp, #32]
   146dc:	ldr	r1, [r4]
   146e0:	add	fp, r5, r6, lsl #3
   146e4:	ldr	lr, [sp, #32]
   146e8:	mov	r2, r9
   146ec:	ldr	r3, [r4, #4]
   146f0:	ldr	ip, [r5, r6, lsl #3]
   146f4:	ldr	r7, [fp, #4]
   146f8:	orr	r3, r3, #1
   146fc:	str	r1, [sp]
   14700:	str	r3, [sp, #4]
   14704:	mov	r1, ip
   14708:	str	lr, [sp, #8]
   1470c:	mov	r0, r7
   14710:	ldr	lr, [r4, #40]	; 0x28
   14714:	str	r3, [sp, #28]
   14718:	mov	r3, sl
   1471c:	str	lr, [sp, #12]
   14720:	ldr	lr, [r4, #44]	; 0x2c
   14724:	str	ip, [sp, #24]
   14728:	str	lr, [sp, #16]
   1472c:	bl	1390c <close_stdout@@Base+0x668>
   14730:	ldr	ip, [sp, #24]
   14734:	cmp	ip, r0
   14738:	bhi	147b0 <close_stdout@@Base+0x150c>
   1473c:	ldr	r3, [pc, #188]	; 14800 <close_stdout@@Base+0x155c>
   14740:	add	r1, r0, #1
   14744:	str	r1, [r5, r6, lsl #3]
   14748:	add	r3, pc, r3
   1474c:	cmp	r7, r3
   14750:	beq	14764 <close_stdout@@Base+0x14c0>
   14754:	mov	r0, r7
   14758:	str	r1, [sp, #24]
   1475c:	bl	112b4 <free@plt>
   14760:	ldr	r1, [sp, #24]
   14764:	mov	r0, r1
   14768:	str	r1, [sp, #24]
   1476c:	bl	15854 <close_stdout@@Base+0x25b0>
   14770:	ldr	r3, [sp, #28]
   14774:	ldr	lr, [sp, #32]
   14778:	mov	r2, r9
   1477c:	str	r0, [fp, #4]
   14780:	mov	r7, r0
   14784:	ldr	ip, [r4]
   14788:	str	r3, [sp, #4]
   1478c:	mov	r3, sl
   14790:	str	lr, [sp, #8]
   14794:	str	ip, [sp]
   14798:	ldr	ip, [r4, #40]	; 0x28
   1479c:	ldr	r1, [sp, #24]
   147a0:	str	ip, [sp, #12]
   147a4:	ldr	ip, [r4, #44]	; 0x2c
   147a8:	str	ip, [sp, #16]
   147ac:	bl	1390c <close_stdout@@Base+0x668>
   147b0:	ldr	r1, [sp, #36]	; 0x24
   147b4:	mov	r0, r7
   147b8:	str	r1, [r8]
   147bc:	add	sp, sp, #44	; 0x2c
   147c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147c4:	lsl	r1, r7, #3
   147c8:	mov	r0, #0
   147cc:	str	r3, [sp, #24]
   147d0:	bl	158ac <close_stdout@@Base+0x2608>
   147d4:	ldr	r3, [sp, #24]
   147d8:	mov	r5, r0
   147dc:	ldm	r3, {r0, r1}
   147e0:	str	r5, [fp]
   147e4:	stm	r5, {r0, r1}
   147e8:	b	146b0 <close_stdout@@Base+0x140c>
   147ec:	bl	11578 <abort@plt>
   147f0:	bl	15a68 <close_stdout@@Base+0x27c4>
   147f4:	andeq	r4, r1, r8, asr fp
   147f8:	andeq	r4, r1, r8, lsl #22
   147fc:	andeq	r4, r1, r4, asr #21
   14800:	andeq	r4, r1, ip, asr #21
   14804:	push	{r4, r5, r6, lr}
   14808:	mov	r5, r0
   1480c:	bl	11470 <__errno_location@plt>
   14810:	cmp	r5, #0
   14814:	mov	r1, #48	; 0x30
   14818:	mov	r4, r0
   1481c:	ldr	r0, [pc, #24]	; 1483c <close_stdout@@Base+0x1598>
   14820:	ldr	r6, [r4]
   14824:	add	r0, pc, r0
   14828:	add	r0, r0, #256	; 0x100
   1482c:	movne	r0, r5
   14830:	bl	15a28 <close_stdout@@Base+0x2784>
   14834:	str	r6, [r4]
   14838:	pop	{r4, r5, r6, pc}
   1483c:	strdeq	r4, [r1], -r0
   14840:	cmp	r0, #0
   14844:	beq	14850 <close_stdout@@Base+0x15ac>
   14848:	ldr	r0, [r0]
   1484c:	bx	lr
   14850:	ldr	r0, [pc, #12]	; 14864 <close_stdout@@Base+0x15c0>
   14854:	add	r0, pc, r0
   14858:	add	r0, r0, #256	; 0x100
   1485c:	ldr	r0, [r0]
   14860:	bx	lr
   14864:	andeq	r4, r1, r0, asr #19
   14868:	cmp	r0, #0
   1486c:	beq	14878 <close_stdout@@Base+0x15d4>
   14870:	str	r1, [r0]
   14874:	bx	lr
   14878:	ldr	r0, [pc, #12]	; 1488c <close_stdout@@Base+0x15e8>
   1487c:	add	r0, pc, r0
   14880:	add	r0, r0, #256	; 0x100
   14884:	str	r1, [r0]
   14888:	bx	lr
   1488c:	muleq	r1, r8, r9
   14890:	cmp	r0, #0
   14894:	movne	r3, r0
   14898:	beq	148c8 <close_stdout@@Base+0x1624>
   1489c:	lsr	ip, r1, #5
   148a0:	and	r1, r1, #31
   148a4:	add	r3, r3, ip, lsl #2
   148a8:	ldr	ip, [r3, #8]
   148ac:	lsr	r0, ip, r1
   148b0:	eor	r2, r0, r2
   148b4:	and	r0, r0, #1
   148b8:	and	r2, r2, #1
   148bc:	eor	ip, ip, r2, lsl r1
   148c0:	str	ip, [r3, #8]
   148c4:	bx	lr
   148c8:	ldr	r3, [pc, #8]	; 148d8 <close_stdout@@Base+0x1634>
   148cc:	add	r3, pc, r3
   148d0:	add	r3, r3, #256	; 0x100
   148d4:	b	1489c <close_stdout@@Base+0x15f8>
   148d8:	andeq	r4, r1, r8, asr #18
   148dc:	subs	r3, r0, #0
   148e0:	beq	148f0 <close_stdout@@Base+0x164c>
   148e4:	ldr	r0, [r3, #4]
   148e8:	str	r1, [r3, #4]
   148ec:	bx	lr
   148f0:	ldr	r3, [pc, #8]	; 14900 <close_stdout@@Base+0x165c>
   148f4:	add	r3, pc, r3
   148f8:	add	r3, r3, #256	; 0x100
   148fc:	b	148e4 <close_stdout@@Base+0x1640>
   14900:	andeq	r4, r1, r0, lsr #18
   14904:	cmp	r0, #0
   14908:	push	{r3, lr}
   1490c:	beq	14930 <close_stdout@@Base+0x168c>
   14910:	cmp	r2, #0
   14914:	cmpne	r1, #0
   14918:	mov	r3, #8
   1491c:	strne	r1, [r0, #40]	; 0x28
   14920:	str	r3, [r0]
   14924:	strne	r2, [r0, #44]	; 0x2c
   14928:	popne	{r3, pc}
   1492c:	bl	11578 <abort@plt>
   14930:	ldr	r0, [pc, #8]	; 14940 <close_stdout@@Base+0x169c>
   14934:	add	r0, pc, r0
   14938:	add	r0, r0, #256	; 0x100
   1493c:	b	14910 <close_stdout@@Base+0x166c>
   14940:	andeq	r4, r1, r0, ror #17
   14944:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14948:	sub	sp, sp, #24
   1494c:	mov	r7, r0
   14950:	mov	sl, r1
   14954:	ldr	r4, [sp, #56]	; 0x38
   14958:	mov	r9, r2
   1495c:	mov	r8, r3
   14960:	cmp	r4, #0
   14964:	beq	149b8 <close_stdout@@Base+0x1714>
   14968:	bl	11470 <__errno_location@plt>
   1496c:	ldr	r3, [r4]
   14970:	add	lr, r4, #8
   14974:	mov	r1, sl
   14978:	mov	r2, r9
   1497c:	ldr	r6, [r0]
   14980:	mov	r5, r0
   14984:	str	r3, [sp]
   14988:	mov	r0, r7
   1498c:	ldr	ip, [r4, #4]
   14990:	mov	r3, r8
   14994:	stmib	sp, {ip, lr}
   14998:	ldr	ip, [r4, #40]	; 0x28
   1499c:	str	ip, [sp, #12]
   149a0:	ldr	ip, [r4, #44]	; 0x2c
   149a4:	str	ip, [sp, #16]
   149a8:	bl	1390c <close_stdout@@Base+0x668>
   149ac:	str	r6, [r5]
   149b0:	add	sp, sp, #24
   149b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   149b8:	ldr	r4, [pc, #8]	; 149c8 <close_stdout@@Base+0x1724>
   149bc:	add	r4, pc, r4
   149c0:	add	r4, r4, #256	; 0x100
   149c4:	b	14968 <close_stdout@@Base+0x16c4>
   149c8:	andeq	r4, r1, r8, asr r8
   149cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   149d0:	subs	r4, r3, #0
   149d4:	sub	sp, sp, #36	; 0x24
   149d8:	mov	r7, r0
   149dc:	mov	r6, r1
   149e0:	mov	r5, r2
   149e4:	beq	14aa0 <close_stdout@@Base+0x17fc>
   149e8:	bl	11470 <__errno_location@plt>
   149ec:	ldr	r3, [r4]
   149f0:	ldr	sl, [r4, #4]
   149f4:	add	r9, r4, #8
   149f8:	mov	r8, r0
   149fc:	mov	r0, #0
   14a00:	ldr	r2, [r8]
   14a04:	cmp	r5, r0
   14a08:	orreq	sl, sl, #1
   14a0c:	str	r9, [sp, #8]
   14a10:	mov	r1, r0
   14a14:	stm	sp, {r3, sl}
   14a18:	mov	r3, r6
   14a1c:	ldr	ip, [r4, #40]	; 0x28
   14a20:	str	r2, [sp, #28]
   14a24:	mov	r2, r7
   14a28:	str	ip, [sp, #12]
   14a2c:	ldr	ip, [r4, #44]	; 0x2c
   14a30:	str	ip, [sp, #16]
   14a34:	bl	1390c <close_stdout@@Base+0x668>
   14a38:	add	r1, r0, #1
   14a3c:	mov	fp, r0
   14a40:	str	r1, [sp, #24]
   14a44:	mov	r0, r1
   14a48:	bl	15854 <close_stdout@@Base+0x25b0>
   14a4c:	ldr	lr, [r4]
   14a50:	str	sl, [sp, #4]
   14a54:	mov	r3, r6
   14a58:	str	r9, [sp, #8]
   14a5c:	mov	r2, r7
   14a60:	str	lr, [sp]
   14a64:	ldr	lr, [r4, #40]	; 0x28
   14a68:	ldr	r1, [sp, #24]
   14a6c:	str	lr, [sp, #12]
   14a70:	ldr	lr, [r4, #44]	; 0x2c
   14a74:	str	lr, [sp, #16]
   14a78:	str	r0, [sp, #24]
   14a7c:	bl	1390c <close_stdout@@Base+0x668>
   14a80:	ldr	r3, [sp, #28]
   14a84:	cmp	r5, #0
   14a88:	str	r3, [r8]
   14a8c:	ldr	ip, [sp, #24]
   14a90:	strne	fp, [r5]
   14a94:	mov	r0, ip
   14a98:	add	sp, sp, #36	; 0x24
   14a9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14aa0:	ldr	r4, [pc, #8]	; 14ab0 <close_stdout@@Base+0x180c>
   14aa4:	add	r4, pc, r4
   14aa8:	add	r4, r4, #256	; 0x100
   14aac:	b	149e8 <close_stdout@@Base+0x1744>
   14ab0:	andeq	r4, r1, r0, ror r7
   14ab4:	mov	r3, r2
   14ab8:	mov	r2, #0
   14abc:	b	149cc <close_stdout@@Base+0x1728>
   14ac0:	ldr	r2, [pc, #152]	; 14b60 <close_stdout@@Base+0x18bc>
   14ac4:	push	{r3, r4, r5, r6, r7, lr}
   14ac8:	add	r2, pc, r2
   14acc:	ldr	r3, [pc, #144]	; 14b64 <close_stdout@@Base+0x18c0>
   14ad0:	ldr	r6, [r2]
   14ad4:	add	r3, pc, r3
   14ad8:	cmp	r6, #1
   14adc:	ldr	r7, [r3]
   14ae0:	movhi	r4, #1
   14ae4:	movhi	r5, r7
   14ae8:	bls	14b04 <close_stdout@@Base+0x1860>
   14aec:	ldr	r0, [r5, #12]
   14af0:	add	r4, r4, #1
   14af4:	bl	112b4 <free@plt>
   14af8:	cmp	r4, r6
   14afc:	add	r5, r5, #8
   14b00:	bne	14aec <close_stdout@@Base+0x1848>
   14b04:	ldr	r4, [pc, #92]	; 14b68 <close_stdout@@Base+0x18c4>
   14b08:	ldr	r0, [r7, #4]
   14b0c:	add	r4, pc, r4
   14b10:	cmp	r0, r4
   14b14:	beq	14b2c <close_stdout@@Base+0x1888>
   14b18:	bl	112b4 <free@plt>
   14b1c:	ldr	r3, [pc, #72]	; 14b6c <close_stdout@@Base+0x18c8>
   14b20:	mov	r2, #256	; 0x100
   14b24:	add	r3, pc, r3
   14b28:	stmib	r3, {r2, r4}
   14b2c:	ldr	r4, [pc, #60]	; 14b70 <close_stdout@@Base+0x18cc>
   14b30:	add	r4, pc, r4
   14b34:	add	r5, r4, #4
   14b38:	cmp	r7, r5
   14b3c:	beq	14b4c <close_stdout@@Base+0x18a8>
   14b40:	mov	r0, r7
   14b44:	bl	112b4 <free@plt>
   14b48:	str	r5, [r4]
   14b4c:	ldr	r3, [pc, #32]	; 14b74 <close_stdout@@Base+0x18d0>
   14b50:	mov	r2, #1
   14b54:	add	r3, pc, r3
   14b58:	str	r2, [r3]
   14b5c:	pop	{r3, r4, r5, r6, r7, pc}
   14b60:			; <UNDEFINED> instruction: 0x000146b4
   14b64:	ldrdeq	r4, [r1], -ip
   14b68:	andeq	r4, r1, r8, lsl #14
   14b6c:	andeq	r4, r1, ip, lsl #13
   14b70:	andeq	r4, r1, r0, lsl #13
   14b74:	andeq	r4, r1, r8, lsr #12
   14b78:	ldr	r3, [pc, #12]	; 14b8c <close_stdout@@Base+0x18e8>
   14b7c:	mvn	r2, #0
   14b80:	add	r3, pc, r3
   14b84:	add	r3, r3, #256	; 0x100
   14b88:	b	14634 <close_stdout@@Base+0x1390>
   14b8c:	muleq	r1, r4, r6
   14b90:	ldr	r3, [pc, #8]	; 14ba0 <close_stdout@@Base+0x18fc>
   14b94:	add	r3, pc, r3
   14b98:	add	r3, r3, #256	; 0x100
   14b9c:	b	14634 <close_stdout@@Base+0x1390>
   14ba0:	andeq	r4, r1, r0, lsl #13
   14ba4:	mov	r1, r0
   14ba8:	mov	r0, #0
   14bac:	b	14b78 <close_stdout@@Base+0x18d4>
   14bb0:	mov	r2, r1
   14bb4:	mov	r1, r0
   14bb8:	mov	r0, #0
   14bbc:	b	14b90 <close_stdout@@Base+0x18ec>
   14bc0:	ldr	r3, [pc, #92]	; 14c24 <close_stdout@@Base+0x1980>
   14bc4:	ldr	ip, [pc, #92]	; 14c28 <close_stdout@@Base+0x1984>
   14bc8:	add	r3, pc, r3
   14bcc:	push	{r4, r5, r6, r7, lr}
   14bd0:	sub	sp, sp, #60	; 0x3c
   14bd4:	ldr	r4, [r3, ip]
   14bd8:	add	r5, sp, #4
   14bdc:	mov	r7, r2
   14be0:	mov	r6, r0
   14be4:	mov	r0, r5
   14be8:	ldr	r3, [r4]
   14bec:	str	r3, [sp, #52]	; 0x34
   14bf0:	bl	13754 <close_stdout@@Base+0x4b0>
   14bf4:	mov	r3, r5
   14bf8:	mvn	r2, #0
   14bfc:	mov	r0, r6
   14c00:	mov	r1, r7
   14c04:	bl	14634 <close_stdout@@Base+0x1390>
   14c08:	ldr	r2, [sp, #52]	; 0x34
   14c0c:	ldr	r3, [r4]
   14c10:	cmp	r2, r3
   14c14:	bne	14c20 <close_stdout@@Base+0x197c>
   14c18:	add	sp, sp, #60	; 0x3c
   14c1c:	pop	{r4, r5, r6, r7, pc}
   14c20:	bl	11314 <__stack_chk_fail@plt>
   14c24:	andeq	r4, r1, r0, lsr r4
   14c28:	andeq	r0, r0, r8, lsr r1
   14c2c:	ldr	ip, [pc, #96]	; 14c94 <close_stdout@@Base+0x19f0>
   14c30:	push	{r4, r5, r6, r7, r8, lr}
   14c34:	add	ip, pc, ip
   14c38:	ldr	lr, [pc, #88]	; 14c98 <close_stdout@@Base+0x19f4>
   14c3c:	sub	sp, sp, #56	; 0x38
   14c40:	mov	r8, r3
   14c44:	add	r5, sp, #4
   14c48:	mov	r7, r2
   14c4c:	mov	r6, r0
   14c50:	ldr	r4, [ip, lr]
   14c54:	mov	r0, r5
   14c58:	ldr	r3, [r4]
   14c5c:	str	r3, [sp, #52]	; 0x34
   14c60:	bl	13754 <close_stdout@@Base+0x4b0>
   14c64:	mov	r2, r8
   14c68:	mov	r3, r5
   14c6c:	mov	r0, r6
   14c70:	mov	r1, r7
   14c74:	bl	14634 <close_stdout@@Base+0x1390>
   14c78:	ldr	r2, [sp, #52]	; 0x34
   14c7c:	ldr	r3, [r4]
   14c80:	cmp	r2, r3
   14c84:	bne	14c90 <close_stdout@@Base+0x19ec>
   14c88:	add	sp, sp, #56	; 0x38
   14c8c:	pop	{r4, r5, r6, r7, r8, pc}
   14c90:	bl	11314 <__stack_chk_fail@plt>
   14c94:	andeq	r4, r1, r4, asr #7
   14c98:	andeq	r0, r0, r8, lsr r1
   14c9c:	mov	r2, r1
   14ca0:	mov	r1, r0
   14ca4:	mov	r0, #0
   14ca8:	b	14bc0 <close_stdout@@Base+0x191c>
   14cac:	mov	ip, r1
   14cb0:	mov	r3, r2
   14cb4:	mov	r1, r0
   14cb8:	mov	r2, ip
   14cbc:	mov	r0, #0
   14cc0:	b	14c2c <close_stdout@@Base+0x1988>
   14cc4:	push	{r4, r5, r6, r7, r8, lr}
   14cc8:	mov	r5, r2
   14ccc:	ldr	lr, [pc, #136]	; 14d5c <close_stdout@@Base+0x1ab8>
   14cd0:	mov	r7, r0
   14cd4:	mov	r6, r1
   14cd8:	ldr	r4, [pc, #128]	; 14d60 <close_stdout@@Base+0x1abc>
   14cdc:	add	lr, pc, lr
   14ce0:	sub	sp, sp, #56	; 0x38
   14ce4:	add	lr, lr, #256	; 0x100
   14ce8:	ldr	r8, [pc, #116]	; 14d64 <close_stdout@@Base+0x1ac0>
   14cec:	add	r4, pc, r4
   14cf0:	add	ip, sp, #4
   14cf4:	ldm	lr!, {r0, r1, r2, r3}
   14cf8:	ldr	r4, [r4, r8]
   14cfc:	stmia	ip!, {r0, r1, r2, r3}
   14d00:	ldm	lr!, {r0, r1, r2, r3}
   14d04:	ldr	r8, [r4]
   14d08:	stmia	ip!, {r0, r1, r2, r3}
   14d0c:	ldm	lr, {r0, r1, r2, r3}
   14d10:	str	r8, [sp, #52]	; 0x34
   14d14:	stm	ip, {r0, r1, r2, r3}
   14d18:	mov	r1, r5
   14d1c:	add	r5, sp, #4
   14d20:	mov	r2, #1
   14d24:	mov	r0, r5
   14d28:	bl	14890 <close_stdout@@Base+0x15ec>
   14d2c:	mov	r2, r6
   14d30:	mov	r3, r5
   14d34:	mov	r1, r7
   14d38:	mov	r0, #0
   14d3c:	bl	14634 <close_stdout@@Base+0x1390>
   14d40:	ldr	r2, [sp, #52]	; 0x34
   14d44:	ldr	r3, [r4]
   14d48:	cmp	r2, r3
   14d4c:	bne	14d58 <close_stdout@@Base+0x1ab4>
   14d50:	add	sp, sp, #56	; 0x38
   14d54:	pop	{r4, r5, r6, r7, r8, pc}
   14d58:	bl	11314 <__stack_chk_fail@plt>
   14d5c:	andeq	r4, r1, r8, lsr r5
   14d60:	andeq	r4, r1, ip, lsl #6
   14d64:	andeq	r0, r0, r8, lsr r1
   14d68:	mov	r2, r1
   14d6c:	mvn	r1, #0
   14d70:	b	14cc4 <close_stdout@@Base+0x1a20>
   14d74:	mov	r1, #58	; 0x3a
   14d78:	b	14d68 <close_stdout@@Base+0x1ac4>
   14d7c:	mov	r2, #58	; 0x3a
   14d80:	b	14cc4 <close_stdout@@Base+0x1a20>
   14d84:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14d88:	mov	r5, r2
   14d8c:	ldr	lr, [pc, #144]	; 14e24 <close_stdout@@Base+0x1b80>
   14d90:	mov	r8, r0
   14d94:	mov	r9, r1
   14d98:	mov	r7, r3
   14d9c:	add	lr, pc, lr
   14da0:	ldr	r4, [pc, #128]	; 14e28 <close_stdout@@Base+0x1b84>
   14da4:	add	lr, lr, #256	; 0x100
   14da8:	sub	sp, sp, #56	; 0x38
   14dac:	ldr	sl, [pc, #120]	; 14e2c <close_stdout@@Base+0x1b88>
   14db0:	add	r4, pc, r4
   14db4:	ldm	lr!, {r0, r1, r2, r3}
   14db8:	add	ip, sp, #4
   14dbc:	ldr	r4, [r4, sl]
   14dc0:	ldr	r6, [sp, #88]	; 0x58
   14dc4:	stmia	ip!, {r0, r1, r2, r3}
   14dc8:	ldm	lr!, {r0, r1, r2, r3}
   14dcc:	ldr	sl, [r4]
   14dd0:	stmia	ip!, {r0, r1, r2, r3}
   14dd4:	ldm	lr, {r0, r1, r2, r3}
   14dd8:	str	sl, [sp, #52]	; 0x34
   14ddc:	stm	ip, {r0, r1, r2, r3}
   14de0:	mov	r2, r5
   14de4:	add	r5, sp, #4
   14de8:	mov	r1, r9
   14dec:	mov	r0, r5
   14df0:	bl	14904 <close_stdout@@Base+0x1660>
   14df4:	mov	r2, r6
   14df8:	mov	r3, r5
   14dfc:	mov	r0, r8
   14e00:	mov	r1, r7
   14e04:	bl	14634 <close_stdout@@Base+0x1390>
   14e08:	ldr	r2, [sp, #52]	; 0x34
   14e0c:	ldr	r3, [r4]
   14e10:	cmp	r2, r3
   14e14:	bne	14e20 <close_stdout@@Base+0x1b7c>
   14e18:	add	sp, sp, #56	; 0x38
   14e1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14e20:	bl	11314 <__stack_chk_fail@plt>
   14e24:	andeq	r4, r1, r8, ror r4
   14e28:	andeq	r4, r1, r8, asr #4
   14e2c:	andeq	r0, r0, r8, lsr r1
   14e30:	push	{lr}		; (str lr, [sp, #-4]!)
   14e34:	sub	sp, sp, #12
   14e38:	mvn	ip, #0
   14e3c:	str	ip, [sp]
   14e40:	bl	14d84 <close_stdout@@Base+0x1ae0>
   14e44:	add	sp, sp, #12
   14e48:	pop	{pc}		; (ldr pc, [sp], #4)
   14e4c:	mov	ip, r1
   14e50:	mov	r3, r2
   14e54:	mov	r1, r0
   14e58:	mov	r2, ip
   14e5c:	mov	r0, #0
   14e60:	b	14e30 <close_stdout@@Base+0x1b8c>
   14e64:	push	{lr}		; (str lr, [sp, #-4]!)
   14e68:	sub	sp, sp, #12
   14e6c:	mov	lr, r1
   14e70:	mov	ip, r2
   14e74:	mov	r1, r0
   14e78:	str	r3, [sp]
   14e7c:	mov	r2, lr
   14e80:	mov	r3, ip
   14e84:	mov	r0, #0
   14e88:	bl	14d84 <close_stdout@@Base+0x1ae0>
   14e8c:	add	sp, sp, #12
   14e90:	pop	{pc}		; (ldr pc, [sp], #4)
   14e94:	ldr	r3, [pc, #12]	; 14ea8 <close_stdout@@Base+0x1c04>
   14e98:	ldr	ip, [pc, #12]	; 14eac <close_stdout@@Base+0x1c08>
   14e9c:	add	r3, pc, r3
   14ea0:	ldr	r3, [r3, ip]
   14ea4:	b	14634 <close_stdout@@Base+0x1390>
   14ea8:	andeq	r4, r1, ip, asr r1
   14eac:	andeq	r0, r0, ip, lsr #2
   14eb0:	mov	r2, r1
   14eb4:	mov	r1, r0
   14eb8:	mov	r0, #0
   14ebc:	b	14e94 <close_stdout@@Base+0x1bf0>
   14ec0:	mvn	r2, #0
   14ec4:	b	14e94 <close_stdout@@Base+0x1bf0>
   14ec8:	mov	r1, r0
   14ecc:	mov	r0, #0
   14ed0:	b	14ec0 <close_stdout@@Base+0x1c1c>
   14ed4:	ldr	r3, [pc, #264]	; 14fe4 <close_stdout@@Base+0x1d40>
   14ed8:	ldr	r1, [pc, #264]	; 14fe8 <close_stdout@@Base+0x1d44>
   14edc:	add	r3, pc, r3
   14ee0:	push	{r4, r5, r6, lr}
   14ee4:	sub	sp, sp, #8
   14ee8:	ldr	r6, [r3, r1]
   14eec:	mov	r4, r0
   14ef0:	ldr	r2, [r0, #24]
   14ef4:	ldr	r5, [r0, #20]
   14ef8:	ldr	ip, [r0, #36]	; 0x24
   14efc:	rsb	r3, r5, r2
   14f00:	cmp	r2, r5
   14f04:	sub	r3, r3, #1
   14f08:	str	r3, [sp]
   14f0c:	ldr	r3, [r6]
   14f10:	str	r3, [sp, #4]
   14f14:	ldrbeq	r3, [r0, #52]	; 0x34
   14f18:	orreq	r3, r3, #2
   14f1c:	strbeq	r3, [r0, #52]	; 0x34
   14f20:	add	r3, r2, ip
   14f24:	ldr	r0, [r0, #16]
   14f28:	bic	r3, r3, ip
   14f2c:	ldr	r1, [r4, #28]
   14f30:	rsb	r2, r0, r3
   14f34:	str	r3, [r4, #24]
   14f38:	rsb	r0, r0, r1
   14f3c:	cmp	r2, r0
   14f40:	ldr	r2, [r4, #68]	; 0x44
   14f44:	ldr	r0, [r4, #72]	; 0x48
   14f48:	movgt	r3, r1
   14f4c:	strgt	r1, [r4, #24]
   14f50:	add	r1, r2, #4
   14f54:	str	r3, [r4, #20]
   14f58:	cmp	r0, r1
   14f5c:	bcc	14fcc <close_stdout@@Base+0x1d28>
   14f60:	str	r5, [r2]
   14f64:	ldr	r3, [r4, #112]	; 0x70
   14f68:	ldr	r0, [r4, #116]	; 0x74
   14f6c:	add	r1, r3, #4
   14f70:	ldr	r2, [r4, #68]	; 0x44
   14f74:	cmp	r0, r1
   14f78:	add	r2, r2, #4
   14f7c:	str	r2, [r4, #68]	; 0x44
   14f80:	bcs	14f94 <close_stdout@@Base+0x1cf0>
   14f84:	add	r0, r4, #100	; 0x64
   14f88:	mov	r1, #4
   14f8c:	bl	112fc <_obstack_newchunk@plt>
   14f90:	ldr	r3, [r4, #112]	; 0x70
   14f94:	ldr	r0, [sp]
   14f98:	ldr	r2, [sp, #4]
   14f9c:	str	r0, [r3]
   14fa0:	ldr	r3, [r4]
   14fa4:	ldr	r1, [r4, #112]	; 0x70
   14fa8:	add	r3, r3, #1
   14fac:	str	r3, [r4]
   14fb0:	ldr	r3, [r6]
   14fb4:	add	r1, r1, #4
   14fb8:	str	r1, [r4, #112]	; 0x70
   14fbc:	cmp	r2, r3
   14fc0:	bne	14fe0 <close_stdout@@Base+0x1d3c>
   14fc4:	add	sp, sp, #8
   14fc8:	pop	{r4, r5, r6, pc}
   14fcc:	add	r0, r4, #56	; 0x38
   14fd0:	mov	r1, #4
   14fd4:	bl	112fc <_obstack_newchunk@plt>
   14fd8:	ldr	r2, [r4, #68]	; 0x44
   14fdc:	b	14f60 <close_stdout@@Base+0x1cbc>
   14fe0:	bl	11314 <__stack_chk_fail@plt>
   14fe4:	andeq	r4, r1, ip, lsl r1
   14fe8:	andeq	r0, r0, r8, lsr r1
   14fec:	ldr	r3, [pc, #124]	; 15070 <close_stdout@@Base+0x1dcc>
   14ff0:	push	{r4, r5, r6, r7, lr}
   14ff4:	add	r3, pc, r3
   14ff8:	ldr	lr, [pc, #116]	; 15074 <close_stdout@@Base+0x1dd0>
   14ffc:	mov	r5, r0
   15000:	ldr	ip, [pc, #112]	; 15078 <close_stdout@@Base+0x1dd4>
   15004:	mov	r4, #0
   15008:	str	r4, [r5]
   1500c:	sub	sp, sp, #12
   15010:	str	r4, [r5, #4]
   15014:	mov	r1, r4
   15018:	str	r4, [r5, #8]
   1501c:	mov	r2, r4
   15020:	ldr	r6, [r3, lr]
   15024:	add	r0, r0, #12
   15028:	ldr	r7, [r3, ip]
   1502c:	mov	r3, r6
   15030:	str	r7, [sp]
   15034:	bl	1132c <_obstack_begin@plt>
   15038:	mov	r3, r6
   1503c:	mov	r1, r4
   15040:	mov	r2, r4
   15044:	str	r7, [sp]
   15048:	add	r0, r5, #56	; 0x38
   1504c:	bl	1132c <_obstack_begin@plt>
   15050:	mov	r1, r4
   15054:	str	r7, [sp]
   15058:	mov	r3, r6
   1505c:	add	r0, r5, #100	; 0x64
   15060:	mov	r2, r4
   15064:	bl	1132c <_obstack_begin@plt>
   15068:	add	sp, sp, #12
   1506c:	pop	{r4, r5, r6, r7, pc}
   15070:	andeq	r4, r1, r4
   15074:	andeq	r0, r0, ip, asr #2
   15078:	andeq	r0, r0, r4, lsr r1
   1507c:	push	{r4, lr}
   15080:	mov	r1, #0
   15084:	mov	r4, r0
   15088:	add	r0, r0, #12
   1508c:	bl	11320 <obstack_free@plt>
   15090:	add	r0, r4, #56	; 0x38
   15094:	mov	r1, #0
   15098:	bl	11320 <obstack_free@plt>
   1509c:	add	r0, r4, #100	; 0x64
   150a0:	mov	r1, #0
   150a4:	pop	{r4, lr}
   150a8:	b	11320 <obstack_free@plt>
   150ac:	push	{r3, r4, r5, r6, r7, lr}
   150b0:	mov	r4, r1
   150b4:	add	r7, r1, #12
   150b8:	mov	r6, r0
   150bc:	b	150d0 <close_stdout@@Base+0x1e2c>
   150c0:	cmp	r5, #0
   150c4:	str	r2, [r4, #24]
   150c8:	strb	r5, [r3]
   150cc:	beq	1511c <close_stdout@@Base+0x1e78>
   150d0:	mov	r0, r6
   150d4:	bl	114ac <fgetc@plt>
   150d8:	ldr	r3, [r4, #24]
   150dc:	cmn	r0, #1
   150e0:	mov	r5, r0
   150e4:	beq	15128 <close_stdout@@Base+0x1e84>
   150e8:	ldr	r1, [r4, #28]
   150ec:	add	r2, r3, #1
   150f0:	cmp	r2, r1
   150f4:	bls	150c0 <close_stdout@@Base+0x1e1c>
   150f8:	mov	r0, r7
   150fc:	mov	r1, #1
   15100:	bl	112fc <_obstack_newchunk@plt>
   15104:	ldr	r3, [r4, #24]
   15108:	cmp	r5, #0
   1510c:	add	r2, r3, #1
   15110:	str	r2, [r4, #24]
   15114:	strb	r5, [r3]
   15118:	bne	150d0 <close_stdout@@Base+0x1e2c>
   1511c:	mov	r0, r4
   15120:	bl	14ed4 <close_stdout@@Base+0x1c30>
   15124:	b	150d0 <close_stdout@@Base+0x1e2c>
   15128:	ldr	r2, [r4, #20]
   1512c:	cmp	r3, r2
   15130:	beq	15158 <close_stdout@@Base+0x1eb4>
   15134:	ldr	r1, [r4, #28]
   15138:	add	r2, r3, #1
   1513c:	cmp	r2, r1
   15140:	bhi	1523c <close_stdout@@Base+0x1f98>
   15144:	str	r2, [r4, #24]
   15148:	mov	r0, r4
   1514c:	mov	r2, #0
   15150:	strb	r2, [r3]
   15154:	bl	14ed4 <close_stdout@@Base+0x1c30>
   15158:	ldr	r3, [r4, #68]	; 0x44
   1515c:	ldr	r1, [r4, #72]	; 0x48
   15160:	add	r2, r3, #4
   15164:	cmp	r1, r2
   15168:	bcc	15228 <close_stdout@@Base+0x1f84>
   1516c:	mov	r2, #0
   15170:	str	r2, [r3]
   15174:	ldr	r3, [r4, #68]	; 0x44
   15178:	ldr	r0, [r4, #64]	; 0x40
   1517c:	add	r3, r3, #4
   15180:	ldr	ip, [r4, #72]	; 0x48
   15184:	cmp	r3, r0
   15188:	str	r3, [r4, #68]	; 0x44
   1518c:	ldr	r1, [r4, #60]	; 0x3c
   15190:	ldrbeq	r2, [r4, #96]	; 0x60
   15194:	str	r0, [r4, #4]
   15198:	orreq	r2, r2, #2
   1519c:	ldr	r0, [r4, #104]	; 0x68
   151a0:	strbeq	r2, [r4, #96]	; 0x60
   151a4:	ldr	r2, [r4, #80]	; 0x50
   151a8:	add	r3, r3, r2
   151ac:	bic	r2, r3, r2
   151b0:	str	r2, [r4, #68]	; 0x44
   151b4:	rsb	r3, r1, r2
   151b8:	rsb	r1, r1, ip
   151bc:	cmp	r3, r1
   151c0:	ldr	r3, [r4, #112]	; 0x70
   151c4:	ldr	r1, [r4, #108]	; 0x6c
   151c8:	movgt	r2, ip
   151cc:	strgt	ip, [r4, #68]	; 0x44
   151d0:	cmp	r3, r1
   151d4:	str	r2, [r4, #64]	; 0x40
   151d8:	ldr	ip, [r4, #124]	; 0x7c
   151dc:	ldrbeq	r2, [r4, #140]	; 0x8c
   151e0:	add	r3, r3, ip
   151e4:	str	r1, [r4, #8]
   151e8:	orreq	r2, r2, #2
   151ec:	bic	r3, r3, ip
   151f0:	strbeq	r2, [r4, #140]	; 0x8c
   151f4:	rsb	ip, r0, r3
   151f8:	ldr	r2, [r4, #116]	; 0x74
   151fc:	str	r3, [r4, #112]	; 0x70
   15200:	rsb	r0, r0, r2
   15204:	cmp	ip, r0
   15208:	mov	r0, r6
   1520c:	strgt	r2, [r4, #112]	; 0x70
   15210:	movgt	r3, r2
   15214:	str	r3, [r4, #108]	; 0x6c
   15218:	bl	112c0 <ferror@plt>
   1521c:	rsbs	r0, r0, #1
   15220:	movcc	r0, #0
   15224:	pop	{r3, r4, r5, r6, r7, pc}
   15228:	add	r0, r4, #56	; 0x38
   1522c:	mov	r1, #4
   15230:	bl	112fc <_obstack_newchunk@plt>
   15234:	ldr	r3, [r4, #68]	; 0x44
   15238:	b	1516c <close_stdout@@Base+0x1ec8>
   1523c:	add	r0, r4, #12
   15240:	mov	r1, #1
   15244:	bl	112fc <_obstack_newchunk@plt>
   15248:	ldr	r3, [r4, #24]
   1524c:	add	r2, r3, #1
   15250:	b	15144 <close_stdout@@Base+0x1ea0>
   15254:	push	{r4, r5, r6, r7, r8, lr}
   15258:	mov	r8, #57344	; 0xe000
   1525c:	movt	r8, #32767	; 0x7fff
   15260:	mov	r7, r0
   15264:	mov	r6, r1
   15268:	mov	r4, r2
   1526c:	mov	r0, r7
   15270:	mov	r1, r6
   15274:	mov	r2, r4
   15278:	bl	11284 <read@plt>
   1527c:	subs	r5, r0, #0
   15280:	bge	152ac <close_stdout@@Base+0x2008>
   15284:	bl	11470 <__errno_location@plt>
   15288:	ldr	r3, [r0]
   1528c:	cmp	r3, #4
   15290:	beq	1526c <close_stdout@@Base+0x1fc8>
   15294:	cmp	r3, #22
   15298:	bne	152ac <close_stdout@@Base+0x2008>
   1529c:	cmp	r4, r8
   152a0:	mov	r4, #57344	; 0xe000
   152a4:	movt	r4, #32767	; 0x7fff
   152a8:	bhi	1526c <close_stdout@@Base+0x1fc8>
   152ac:	mov	r0, r5
   152b0:	pop	{r4, r5, r6, r7, r8, pc}
   152b4:	push	{r4, r5, r6, r7, lr}
   152b8:	cmp	r1, #0
   152bc:	sub	sp, sp, #36	; 0x24
   152c0:	ldr	r7, [pc, #896]	; 15648 <close_stdout@@Base+0x23a4>
   152c4:	mov	ip, r3
   152c8:	mov	r5, r0
   152cc:	add	r7, pc, r7
   152d0:	ldr	r4, [sp, #56]	; 0x38
   152d4:	ldr	r6, [sp, #60]	; 0x3c
   152d8:	beq	1561c <close_stdout@@Base+0x2378>
   152dc:	str	r2, [sp]
   152e0:	mov	r3, r1
   152e4:	ldr	r2, [pc, #864]	; 1564c <close_stdout@@Base+0x23a8>
   152e8:	mov	r1, #1
   152ec:	str	ip, [sp, #4]
   152f0:	add	r2, pc, r2
   152f4:	bl	114d0 <__fprintf_chk@plt>
   152f8:	ldr	r1, [pc, #848]	; 15650 <close_stdout@@Base+0x23ac>
   152fc:	mov	r2, #5
   15300:	mov	r0, #0
   15304:	add	r1, pc, r1
   15308:	bl	11308 <dcgettext@plt>
   1530c:	ldr	r2, [pc, #832]	; 15654 <close_stdout@@Base+0x23b0>
   15310:	movw	ip, #2013	; 0x7dd
   15314:	mov	r1, #1
   15318:	ldr	r2, [r7, r2]
   1531c:	str	ip, [sp]
   15320:	mov	r3, r0
   15324:	mov	r0, r5
   15328:	bl	114d0 <__fprintf_chk@plt>
   1532c:	ldr	r1, [pc, #804]	; 15658 <close_stdout@@Base+0x23b4>
   15330:	mov	r0, #0
   15334:	mov	r2, #5
   15338:	add	r1, pc, r1
   1533c:	bl	11308 <dcgettext@plt>
   15340:	mov	r1, r5
   15344:	bl	11254 <fputs_unlocked@plt>
   15348:	cmp	r6, #9
   1534c:	addls	pc, pc, r6, lsl #2
   15350:	b	15638 <close_stdout@@Base+0x2394>
   15354:	b	153e8 <close_stdout@@Base+0x2144>
   15358:	b	153ec <close_stdout@@Base+0x2148>
   1535c:	b	1541c <close_stdout@@Base+0x2178>
   15360:	b	15450 <close_stdout@@Base+0x21ac>
   15364:	b	1548c <close_stdout@@Base+0x21e8>
   15368:	b	154cc <close_stdout@@Base+0x2228>
   1536c:	b	15514 <close_stdout@@Base+0x2270>
   15370:	b	15564 <close_stdout@@Base+0x22c0>
   15374:	b	155bc <close_stdout@@Base+0x2318>
   15378:	b	1537c <close_stdout@@Base+0x20d8>
   1537c:	ldr	r1, [pc, #728]	; 1565c <close_stdout@@Base+0x23b8>
   15380:	mov	r0, #0
   15384:	add	r1, pc, r1
   15388:	mov	r2, #5
   1538c:	bl	11308 <dcgettext@plt>
   15390:	ldm	r4, {r3, ip}
   15394:	mov	r1, #1
   15398:	str	ip, [sp]
   1539c:	ldr	ip, [r4, #8]
   153a0:	str	ip, [sp, #4]
   153a4:	ldr	ip, [r4, #12]
   153a8:	str	ip, [sp, #8]
   153ac:	ldr	ip, [r4, #16]
   153b0:	str	ip, [sp, #12]
   153b4:	ldr	ip, [r4, #20]
   153b8:	str	ip, [sp, #16]
   153bc:	ldr	ip, [r4, #24]
   153c0:	str	ip, [sp, #20]
   153c4:	ldr	ip, [r4, #28]
   153c8:	str	ip, [sp, #24]
   153cc:	ldr	ip, [r4, #32]
   153d0:	str	ip, [sp, #28]
   153d4:	mov	r2, r0
   153d8:	mov	r0, r5
   153dc:	bl	114d0 <__fprintf_chk@plt>
   153e0:	add	sp, sp, #36	; 0x24
   153e4:	pop	{r4, r5, r6, r7, pc}
   153e8:	bl	11578 <abort@plt>
   153ec:	ldr	r1, [pc, #620]	; 15660 <close_stdout@@Base+0x23bc>
   153f0:	mov	r2, #5
   153f4:	mov	r0, #0
   153f8:	add	r1, pc, r1
   153fc:	bl	11308 <dcgettext@plt>
   15400:	ldr	r3, [r4]
   15404:	mov	r1, #1
   15408:	mov	r2, r0
   1540c:	mov	r0, r5
   15410:	add	sp, sp, #36	; 0x24
   15414:	pop	{r4, r5, r6, r7, lr}
   15418:	b	114d0 <__fprintf_chk@plt>
   1541c:	ldr	r1, [pc, #576]	; 15664 <close_stdout@@Base+0x23c0>
   15420:	mov	r2, #5
   15424:	mov	r0, #0
   15428:	add	r1, pc, r1
   1542c:	bl	11308 <dcgettext@plt>
   15430:	ldm	r4, {r3, ip}
   15434:	mov	r1, #1
   15438:	str	ip, [sp, #56]	; 0x38
   1543c:	mov	r2, r0
   15440:	mov	r0, r5
   15444:	add	sp, sp, #36	; 0x24
   15448:	pop	{r4, r5, r6, r7, lr}
   1544c:	b	114d0 <__fprintf_chk@plt>
   15450:	ldr	r1, [pc, #528]	; 15668 <close_stdout@@Base+0x23c4>
   15454:	mov	r2, #5
   15458:	mov	r0, #0
   1545c:	add	r1, pc, r1
   15460:	bl	11308 <dcgettext@plt>
   15464:	ldm	r4, {r3, ip}
   15468:	mov	r1, #1
   1546c:	str	ip, [sp, #56]	; 0x38
   15470:	ldr	ip, [r4, #8]
   15474:	str	ip, [sp, #60]	; 0x3c
   15478:	mov	r2, r0
   1547c:	mov	r0, r5
   15480:	add	sp, sp, #36	; 0x24
   15484:	pop	{r4, r5, r6, r7, lr}
   15488:	b	114d0 <__fprintf_chk@plt>
   1548c:	ldr	r1, [pc, #472]	; 1566c <close_stdout@@Base+0x23c8>
   15490:	mov	r2, #5
   15494:	mov	r0, #0
   15498:	add	r1, pc, r1
   1549c:	bl	11308 <dcgettext@plt>
   154a0:	ldm	r4, {r3, ip}
   154a4:	mov	r1, #1
   154a8:	str	ip, [sp]
   154ac:	ldr	ip, [r4, #8]
   154b0:	str	ip, [sp, #4]
   154b4:	ldr	ip, [r4, #12]
   154b8:	str	ip, [sp, #8]
   154bc:	mov	r2, r0
   154c0:	mov	r0, r5
   154c4:	bl	114d0 <__fprintf_chk@plt>
   154c8:	b	153e0 <close_stdout@@Base+0x213c>
   154cc:	ldr	r1, [pc, #412]	; 15670 <close_stdout@@Base+0x23cc>
   154d0:	mov	r2, #5
   154d4:	mov	r0, #0
   154d8:	add	r1, pc, r1
   154dc:	bl	11308 <dcgettext@plt>
   154e0:	ldm	r4, {r3, ip}
   154e4:	mov	r1, #1
   154e8:	str	ip, [sp]
   154ec:	ldr	ip, [r4, #8]
   154f0:	str	ip, [sp, #4]
   154f4:	ldr	ip, [r4, #12]
   154f8:	str	ip, [sp, #8]
   154fc:	ldr	ip, [r4, #16]
   15500:	str	ip, [sp, #12]
   15504:	mov	r2, r0
   15508:	mov	r0, r5
   1550c:	bl	114d0 <__fprintf_chk@plt>
   15510:	b	153e0 <close_stdout@@Base+0x213c>
   15514:	ldr	r1, [pc, #344]	; 15674 <close_stdout@@Base+0x23d0>
   15518:	mov	r2, #5
   1551c:	mov	r0, #0
   15520:	add	r1, pc, r1
   15524:	bl	11308 <dcgettext@plt>
   15528:	ldm	r4, {r3, ip}
   1552c:	mov	r1, #1
   15530:	str	ip, [sp]
   15534:	ldr	ip, [r4, #8]
   15538:	str	ip, [sp, #4]
   1553c:	ldr	ip, [r4, #12]
   15540:	str	ip, [sp, #8]
   15544:	ldr	ip, [r4, #16]
   15548:	str	ip, [sp, #12]
   1554c:	ldr	ip, [r4, #20]
   15550:	str	ip, [sp, #16]
   15554:	mov	r2, r0
   15558:	mov	r0, r5
   1555c:	bl	114d0 <__fprintf_chk@plt>
   15560:	b	153e0 <close_stdout@@Base+0x213c>
   15564:	ldr	r1, [pc, #268]	; 15678 <close_stdout@@Base+0x23d4>
   15568:	mov	r2, #5
   1556c:	mov	r0, #0
   15570:	add	r1, pc, r1
   15574:	bl	11308 <dcgettext@plt>
   15578:	ldm	r4, {r3, ip}
   1557c:	mov	r1, #1
   15580:	str	ip, [sp]
   15584:	ldr	ip, [r4, #8]
   15588:	str	ip, [sp, #4]
   1558c:	ldr	ip, [r4, #12]
   15590:	str	ip, [sp, #8]
   15594:	ldr	ip, [r4, #16]
   15598:	str	ip, [sp, #12]
   1559c:	ldr	ip, [r4, #20]
   155a0:	str	ip, [sp, #16]
   155a4:	ldr	ip, [r4, #24]
   155a8:	str	ip, [sp, #20]
   155ac:	mov	r2, r0
   155b0:	mov	r0, r5
   155b4:	bl	114d0 <__fprintf_chk@plt>
   155b8:	b	153e0 <close_stdout@@Base+0x213c>
   155bc:	ldr	r1, [pc, #184]	; 1567c <close_stdout@@Base+0x23d8>
   155c0:	mov	r2, #5
   155c4:	mov	r0, #0
   155c8:	add	r1, pc, r1
   155cc:	bl	11308 <dcgettext@plt>
   155d0:	ldm	r4, {r3, ip}
   155d4:	mov	r1, #1
   155d8:	str	ip, [sp]
   155dc:	ldr	ip, [r4, #8]
   155e0:	str	ip, [sp, #4]
   155e4:	ldr	ip, [r4, #12]
   155e8:	str	ip, [sp, #8]
   155ec:	ldr	ip, [r4, #16]
   155f0:	str	ip, [sp, #12]
   155f4:	ldr	ip, [r4, #20]
   155f8:	str	ip, [sp, #16]
   155fc:	ldr	ip, [r4, #24]
   15600:	str	ip, [sp, #20]
   15604:	ldr	ip, [r4, #28]
   15608:	str	ip, [sp, #24]
   1560c:	mov	r2, r0
   15610:	mov	r0, r5
   15614:	bl	114d0 <__fprintf_chk@plt>
   15618:	b	153e0 <close_stdout@@Base+0x213c>
   1561c:	str	r3, [sp]
   15620:	mov	r3, r2
   15624:	ldr	r2, [pc, #84]	; 15680 <close_stdout@@Base+0x23dc>
   15628:	mov	r1, #1
   1562c:	add	r2, pc, r2
   15630:	bl	114d0 <__fprintf_chk@plt>
   15634:	b	152f8 <close_stdout@@Base+0x2054>
   15638:	ldr	r1, [pc, #68]	; 15684 <close_stdout@@Base+0x23e0>
   1563c:	mov	r0, #0
   15640:	add	r1, pc, r1
   15644:	b	15388 <close_stdout@@Base+0x20e4>
   15648:	andeq	r3, r1, ip, lsr #26
   1564c:	andeq	r2, r0, r4, ror #11
   15650:	andeq	r2, r0, r4, ror #11
   15654:	andeq	r0, r0, ip, ror #2
   15658:			; <UNDEFINED> instruction: 0x000025b4
   1565c:	andeq	r2, r0, r0, asr #14
   15660:	andeq	r2, r0, r0, asr #11
   15664:	andeq	r2, r0, r0, lsr #11
   15668:	andeq	r2, r0, r4, lsl #11
   1566c:	andeq	r2, r0, r4, ror #10
   15670:	andeq	r2, r0, r4, asr #10
   15674:	andeq	r2, r0, r0, lsr #10
   15678:	strdeq	r2, [r0], -r8
   1567c:	andeq	r2, r0, ip, asr #9
   15680:			; <UNDEFINED> instruction: 0x000022b4
   15684:			; <UNDEFINED> instruction: 0x000024b8
   15688:	push	{r4, r5, lr}
   1568c:	sub	sp, sp, #12
   15690:	ldr	r5, [sp, #24]
   15694:	ldr	ip, [r5]
   15698:	cmp	ip, #0
   1569c:	beq	156b8 <close_stdout@@Base+0x2414>
   156a0:	mov	lr, r5
   156a4:	mov	ip, #0
   156a8:	ldr	r4, [lr, #4]!
   156ac:	add	ip, ip, #1
   156b0:	cmp	r4, #0
   156b4:	bne	156a8 <close_stdout@@Base+0x2404>
   156b8:	stm	sp, {r5, ip}
   156bc:	bl	152b4 <close_stdout@@Base+0x2010>
   156c0:	add	sp, sp, #12
   156c4:	pop	{r4, r5, pc}
   156c8:	push	{r4, r5, r6, r7, lr}
   156cc:	sub	sp, sp, #60	; 0x3c
   156d0:	ldr	r4, [pc, #100]	; 1573c <close_stdout@@Base+0x2498>
   156d4:	mov	ip, #0
   156d8:	ldr	r5, [pc, #96]	; 15740 <close_stdout@@Base+0x249c>
   156dc:	mov	lr, ip
   156e0:	add	r4, pc, r4
   156e4:	ldr	r6, [sp, #80]	; 0x50
   156e8:	ldr	r7, [r4, r5]
   156ec:	add	r5, sp, #12
   156f0:	ldr	r4, [r7]
   156f4:	str	r4, [sp, #52]	; 0x34
   156f8:	ldr	r4, [r6, ip]
   156fc:	cmp	r4, #0
   15700:	str	r4, [r5, ip]
   15704:	beq	15718 <close_stdout@@Base+0x2474>
   15708:	add	lr, lr, #1
   1570c:	add	ip, ip, #4
   15710:	cmp	lr, #10
   15714:	bne	156f8 <close_stdout@@Base+0x2454>
   15718:	stm	sp, {r5, lr}
   1571c:	bl	152b4 <close_stdout@@Base+0x2010>
   15720:	ldr	r2, [sp, #52]	; 0x34
   15724:	ldr	r3, [r7]
   15728:	cmp	r2, r3
   1572c:	bne	15738 <close_stdout@@Base+0x2494>
   15730:	add	sp, sp, #60	; 0x3c
   15734:	pop	{r4, r5, r6, r7, pc}
   15738:	bl	11314 <__stack_chk_fail@plt>
   1573c:	andeq	r3, r1, r8, lsl r9
   15740:	andeq	r0, r0, r8, lsr r1
   15744:	push	{r3}		; (str r3, [sp, #-4]!)
   15748:	push	{r4, lr}
   1574c:	sub	sp, sp, #20
   15750:	ldr	lr, [pc, #72]	; 157a0 <close_stdout@@Base+0x24fc>
   15754:	add	ip, sp, #32
   15758:	ldr	r4, [pc, #68]	; 157a4 <close_stdout@@Base+0x2500>
   1575c:	add	lr, pc, lr
   15760:	ldr	r3, [sp, #28]
   15764:	ldr	r4, [lr, r4]
   15768:	str	ip, [sp]
   1576c:	str	ip, [sp, #8]
   15770:	ldr	ip, [r4]
   15774:	str	ip, [sp, #12]
   15778:	bl	156c8 <close_stdout@@Base+0x2424>
   1577c:	ldr	r2, [sp, #12]
   15780:	ldr	r3, [r4]
   15784:	cmp	r2, r3
   15788:	bne	1579c <close_stdout@@Base+0x24f8>
   1578c:	add	sp, sp, #20
   15790:	pop	{r4, lr}
   15794:	add	sp, sp, #4
   15798:	bx	lr
   1579c:	bl	11314 <__stack_chk_fail@plt>
   157a0:	muleq	r1, ip, r8
   157a4:	andeq	r0, r0, r8, lsr r1
   157a8:	ldr	r1, [pc, #132]	; 15834 <close_stdout@@Base+0x2590>
   157ac:	mov	r2, #5
   157b0:	push	{r4, lr}
   157b4:	add	r1, pc, r1
   157b8:	mov	r0, #0
   157bc:	ldr	r4, [pc, #116]	; 15838 <close_stdout@@Base+0x2594>
   157c0:	bl	11308 <dcgettext@plt>
   157c4:	ldr	r2, [pc, #112]	; 1583c <close_stdout@@Base+0x2598>
   157c8:	add	r4, pc, r4
   157cc:	add	r2, pc, r2
   157d0:	mov	r1, r0
   157d4:	mov	r0, #1
   157d8:	bl	114b8 <__printf_chk@plt>
   157dc:	ldr	r1, [pc, #92]	; 15840 <close_stdout@@Base+0x259c>
   157e0:	mov	r2, #5
   157e4:	mov	r0, #0
   157e8:	add	r1, pc, r1
   157ec:	bl	11308 <dcgettext@plt>
   157f0:	ldr	r2, [pc, #76]	; 15844 <close_stdout@@Base+0x25a0>
   157f4:	ldr	r3, [pc, #76]	; 15848 <close_stdout@@Base+0x25a4>
   157f8:	add	r2, pc, r2
   157fc:	add	r3, pc, r3
   15800:	mov	r1, r0
   15804:	mov	r0, #1
   15808:	bl	114b8 <__printf_chk@plt>
   1580c:	ldr	r1, [pc, #56]	; 1584c <close_stdout@@Base+0x25a8>
   15810:	mov	r0, #0
   15814:	mov	r2, #5
   15818:	add	r1, pc, r1
   1581c:	bl	11308 <dcgettext@plt>
   15820:	ldr	r3, [pc, #40]	; 15850 <close_stdout@@Base+0x25ac>
   15824:	ldr	r3, [r4, r3]
   15828:	pop	{r4, lr}
   1582c:	ldr	r1, [r3]
   15830:	b	11254 <fputs_unlocked@plt>
   15834:	andeq	r2, r0, r0, lsl #7
   15838:	andeq	r3, r1, r0, lsr r8
   1583c:	andeq	r2, r0, r0, lsl #7
   15840:	andeq	r2, r0, ip, ror r3
   15844:	andeq	r1, r0, r4, asr sp
   15848:	andeq	r1, r0, r0, ror #26
   1584c:	andeq	r2, r0, r0, ror #6
   15850:	andeq	r0, r0, ip, asr r1
   15854:	push	{r4, lr}
   15858:	mov	r4, r0
   1585c:	bl	113ec <malloc@plt>
   15860:	rsbs	r3, r0, #1
   15864:	movcc	r3, #0
   15868:	cmp	r4, #0
   1586c:	moveq	r3, #0
   15870:	cmp	r3, #0
   15874:	popeq	{r4, pc}
   15878:	bl	15a68 <close_stdout@@Base+0x27c4>
   1587c:	push	{r3, r4, r5, lr}
   15880:	mov	r4, r0
   15884:	mvn	r0, #0
   15888:	mov	r5, r1
   1588c:	bl	16108 <close_stdout@@Base+0x2e64>
   15890:	cmp	r0, r4
   15894:	bcc	158a4 <close_stdout@@Base+0x2600>
   15898:	mul	r0, r4, r5
   1589c:	pop	{r3, r4, r5, lr}
   158a0:	b	15854 <close_stdout@@Base+0x25b0>
   158a4:	bl	15a68 <close_stdout@@Base+0x27c4>
   158a8:	b	15854 <close_stdout@@Base+0x25b0>
   158ac:	rsbs	r3, r1, #1
   158b0:	push	{r4, lr}
   158b4:	movcc	r3, #0
   158b8:	cmp	r0, #0
   158bc:	mov	r4, r1
   158c0:	moveq	r3, #0
   158c4:	cmp	r3, #0
   158c8:	bne	158ec <close_stdout@@Base+0x2648>
   158cc:	bl	11344 <realloc@plt>
   158d0:	rsbs	r3, r0, #1
   158d4:	movcc	r3, #0
   158d8:	cmp	r4, #0
   158dc:	moveq	r3, #0
   158e0:	cmp	r3, #0
   158e4:	popeq	{r4, pc}
   158e8:	bl	15a68 <close_stdout@@Base+0x27c4>
   158ec:	bl	112b4 <free@plt>
   158f0:	mov	r0, #0
   158f4:	pop	{r4, pc}
   158f8:	push	{r4, r5, r6, lr}
   158fc:	mov	r5, r1
   15900:	mov	r6, r0
   15904:	mov	r1, r2
   15908:	mvn	r0, #0
   1590c:	mov	r4, r2
   15910:	bl	16108 <close_stdout@@Base+0x2e64>
   15914:	cmp	r0, r5
   15918:	bcc	1592c <close_stdout@@Base+0x2688>
   1591c:	mov	r0, r6
   15920:	mul	r1, r5, r4
   15924:	pop	{r4, r5, r6, lr}
   15928:	b	158ac <close_stdout@@Base+0x2608>
   1592c:	bl	15a68 <close_stdout@@Base+0x27c4>
   15930:	push	{r3, r4, r5, r6, r7, lr}
   15934:	subs	r7, r0, #0
   15938:	mov	r5, r1
   1593c:	mov	r6, r2
   15940:	ldr	r4, [r1]
   15944:	beq	1597c <close_stdout@@Base+0x26d8>
   15948:	movw	r0, #43690	; 0xaaaa
   1594c:	mov	r1, r2
   15950:	bfi	r0, r0, #16, #16
   15954:	bl	16108 <close_stdout@@Base+0x2e64>
   15958:	cmp	r4, r0
   1595c:	addcc	r3, r4, #1
   15960:	addcc	r4, r4, r3, lsr #1
   15964:	bcs	159a0 <close_stdout@@Base+0x26fc>
   15968:	str	r4, [r5]
   1596c:	mov	r0, r7
   15970:	mul	r1, r6, r4
   15974:	pop	{r3, r4, r5, r6, r7, lr}
   15978:	b	158ac <close_stdout@@Base+0x2608>
   1597c:	cmp	r4, #0
   15980:	bne	15968 <close_stdout@@Base+0x26c4>
   15984:	mov	r0, #64	; 0x40
   15988:	mov	r1, r2
   1598c:	bl	16108 <close_stdout@@Base+0x2e64>
   15990:	cmp	r0, #0
   15994:	movne	r4, r0
   15998:	addeq	r4, r0, #1
   1599c:	b	15968 <close_stdout@@Base+0x26c4>
   159a0:	bl	15a68 <close_stdout@@Base+0x27c4>
   159a4:	cmp	r0, #0
   159a8:	push	{r3, lr}
   159ac:	ldr	r3, [r1]
   159b0:	beq	159dc <close_stdout@@Base+0x2738>
   159b4:	movw	r2, #43689	; 0xaaa9
   159b8:	movt	r2, #43690	; 0xaaaa
   159bc:	cmp	r3, r2
   159c0:	addls	r2, r3, #1
   159c4:	addls	r3, r3, r2, lsr #1
   159c8:	bhi	159f4 <close_stdout@@Base+0x2750>
   159cc:	str	r3, [r1]
   159d0:	mov	r1, r3
   159d4:	pop	{r3, lr}
   159d8:	b	158ac <close_stdout@@Base+0x2608>
   159dc:	cmp	r3, #0
   159e0:	moveq	r3, #64	; 0x40
   159e4:	str	r3, [r1]
   159e8:	mov	r1, r3
   159ec:	pop	{r3, lr}
   159f0:	b	158ac <close_stdout@@Base+0x2608>
   159f4:	bl	15a68 <close_stdout@@Base+0x27c4>
   159f8:	push	{r4, lr}
   159fc:	mov	r4, r0
   15a00:	bl	15854 <close_stdout@@Base+0x25b0>
   15a04:	mov	r2, r4
   15a08:	mov	r1, #0
   15a0c:	pop	{r4, lr}
   15a10:	b	11494 <memset@plt>
   15a14:	push	{r3, lr}
   15a18:	bl	11248 <calloc@plt>
   15a1c:	cmp	r0, #0
   15a20:	popne	{r3, pc}
   15a24:	bl	15a68 <close_stdout@@Base+0x27c4>
   15a28:	push	{r3, r4, r5, lr}
   15a2c:	mov	r4, r1
   15a30:	mov	r5, r0
   15a34:	mov	r0, r1
   15a38:	bl	15854 <close_stdout@@Base+0x25b0>
   15a3c:	mov	r1, r5
   15a40:	mov	r2, r4
   15a44:	pop	{r3, r4, r5, lr}
   15a48:	b	112d8 <memcpy@plt>
   15a4c:	push	{r4, lr}
   15a50:	mov	r4, r0
   15a54:	bl	11458 <strlen@plt>
   15a58:	add	r1, r0, #1
   15a5c:	mov	r0, r4
   15a60:	pop	{r4, lr}
   15a64:	b	15a28 <close_stdout@@Base+0x2784>
   15a68:	ldr	r3, [pc, #64]	; 15ab0 <close_stdout@@Base+0x280c>
   15a6c:	mov	r2, #5
   15a70:	ldr	ip, [pc, #60]	; 15ab4 <close_stdout@@Base+0x2810>
   15a74:	mov	r0, #0
   15a78:	add	r3, pc, r3
   15a7c:	ldr	r1, [pc, #52]	; 15ab8 <close_stdout@@Base+0x2814>
   15a80:	push	{r4, lr}
   15a84:	add	r1, pc, r1
   15a88:	ldr	r3, [r3, ip]
   15a8c:	ldr	r4, [r3]
   15a90:	bl	11308 <dcgettext@plt>
   15a94:	ldr	r2, [pc, #32]	; 15abc <close_stdout@@Base+0x2818>
   15a98:	mov	r1, #0
   15a9c:	add	r2, pc, r2
   15aa0:	mov	r3, r0
   15aa4:	mov	r0, r4
   15aa8:	bl	113c8 <error@plt>
   15aac:	bl	11578 <abort@plt>
   15ab0:	andeq	r3, r1, r0, lsl #11
   15ab4:	andeq	r0, r0, r0, ror #2
   15ab8:	andeq	r2, r0, r4, ror #2
   15abc:	andeq	r1, r0, r0, asr sp
   15ac0:	push	{r4, r5, r6, lr}
   15ac4:	sub	sp, sp, #8
   15ac8:	mov	r4, r0
   15acc:	bl	114c4 <fileno@plt>
   15ad0:	cmp	r0, #0
   15ad4:	mov	r0, r4
   15ad8:	blt	15b54 <close_stdout@@Base+0x28b0>
   15adc:	bl	11404 <__freading@plt>
   15ae0:	cmp	r0, #0
   15ae4:	bne	15b20 <close_stdout@@Base+0x287c>
   15ae8:	mov	r0, r4
   15aec:	bl	15b60 <close_stdout@@Base+0x28bc>
   15af0:	cmp	r0, #0
   15af4:	beq	15b50 <close_stdout@@Base+0x28ac>
   15af8:	bl	11470 <__errno_location@plt>
   15afc:	ldr	r6, [r0]
   15b00:	mov	r5, r0
   15b04:	mov	r0, r4
   15b08:	bl	114e8 <fclose@plt>
   15b0c:	cmp	r6, #0
   15b10:	mvnne	r0, #0
   15b14:	strne	r6, [r5]
   15b18:	add	sp, sp, #8
   15b1c:	pop	{r4, r5, r6, pc}
   15b20:	mov	r0, r4
   15b24:	bl	114c4 <fileno@plt>
   15b28:	mov	r1, #1
   15b2c:	mov	r2, #0
   15b30:	mov	r3, #0
   15b34:	str	r1, [sp]
   15b38:	bl	1138c <lseek64@plt>
   15b3c:	mvn	r2, #0
   15b40:	mvn	r3, #0
   15b44:	cmp	r1, r3
   15b48:	cmpeq	r0, r2
   15b4c:	bne	15ae8 <close_stdout@@Base+0x2844>
   15b50:	mov	r0, r4
   15b54:	add	sp, sp, #8
   15b58:	pop	{r4, r5, r6, lr}
   15b5c:	b	114e8 <fclose@plt>
   15b60:	push	{r4, lr}
   15b64:	subs	r4, r0, #0
   15b68:	sub	sp, sp, #8
   15b6c:	beq	15b7c <close_stdout@@Base+0x28d8>
   15b70:	bl	11404 <__freading@plt>
   15b74:	cmp	r0, #0
   15b78:	bne	15b8c <close_stdout@@Base+0x28e8>
   15b7c:	mov	r0, r4
   15b80:	add	sp, sp, #8
   15b84:	pop	{r4, lr}
   15b88:	b	11290 <fflush@plt>
   15b8c:	ldr	r3, [r4]
   15b90:	tst	r3, #256	; 0x100
   15b94:	beq	15b7c <close_stdout@@Base+0x28d8>
   15b98:	mov	r3, #1
   15b9c:	mov	r0, r4
   15ba0:	str	r3, [sp]
   15ba4:	mov	r2, #0
   15ba8:	mov	r3, #0
   15bac:	bl	15bc0 <close_stdout@@Base+0x291c>
   15bb0:	mov	r0, r4
   15bb4:	add	sp, sp, #8
   15bb8:	pop	{r4, lr}
   15bbc:	b	11290 <fflush@plt>
   15bc0:	push	{r4, r5, r6, r7, lr}
   15bc4:	sub	sp, sp, #20
   15bc8:	ldmib	r0, {r1, ip}
   15bcc:	mov	r6, r0
   15bd0:	ldr	r4, [sp, #40]	; 0x28
   15bd4:	cmp	ip, r1
   15bd8:	beq	15bf0 <close_stdout@@Base+0x294c>
   15bdc:	str	r4, [sp, #40]	; 0x28
   15be0:	mov	r0, r6
   15be4:	add	sp, sp, #20
   15be8:	pop	{r4, r5, r6, r7, lr}
   15bec:	b	114f4 <fseeko64@plt>
   15bf0:	ldr	ip, [r0, #20]
   15bf4:	ldr	r1, [r0, #16]
   15bf8:	cmp	ip, r1
   15bfc:	bne	15bdc <close_stdout@@Base+0x2938>
   15c00:	ldr	r7, [r0, #36]	; 0x24
   15c04:	cmp	r7, #0
   15c08:	bne	15bdc <close_stdout@@Base+0x2938>
   15c0c:	str	r2, [sp, #12]
   15c10:	mvn	r5, #0
   15c14:	str	r3, [sp, #8]
   15c18:	bl	114c4 <fileno@plt>
   15c1c:	str	r4, [sp]
   15c20:	mvn	r4, #0
   15c24:	ldr	r2, [sp, #12]
   15c28:	ldr	r3, [sp, #8]
   15c2c:	bl	1138c <lseek64@plt>
   15c30:	mov	r2, r0
   15c34:	mov	r3, r1
   15c38:	cmp	r3, r5
   15c3c:	cmpeq	r2, r4
   15c40:	beq	15c60 <close_stdout@@Base+0x29bc>
   15c44:	ldr	r1, [r6]
   15c48:	mov	r0, r7
   15c4c:	strd	r2, [r6, #80]	; 0x50
   15c50:	bic	r3, r1, #16
   15c54:	str	r3, [r6]
   15c58:	add	sp, sp, #20
   15c5c:	pop	{r4, r5, r6, r7, pc}
   15c60:	mvn	r0, #0
   15c64:	b	15c58 <close_stdout@@Base+0x29b4>
   15c68:	push	{r4, r5, r6, lr}
   15c6c:	mov	r4, r0
   15c70:	bl	113b0 <__fpending@plt>
   15c74:	mov	r6, r0
   15c78:	mov	r0, r4
   15c7c:	ldr	r4, [r4]
   15c80:	bl	15ac0 <close_stdout@@Base+0x281c>
   15c84:	and	r4, r4, #32
   15c88:	adds	r5, r0, #0
   15c8c:	movne	r5, #1
   15c90:	cmp	r4, #0
   15c94:	bne	15cb4 <close_stdout@@Base+0x2a10>
   15c98:	cmp	r5, #0
   15c9c:	beq	15cac <close_stdout@@Base+0x2a08>
   15ca0:	cmp	r6, #0
   15ca4:	beq	15cd0 <close_stdout@@Base+0x2a2c>
   15ca8:	mvn	r4, #0
   15cac:	mov	r0, r4
   15cb0:	pop	{r4, r5, r6, pc}
   15cb4:	cmp	r5, #0
   15cb8:	bne	15ca8 <close_stdout@@Base+0x2a04>
   15cbc:	bl	11470 <__errno_location@plt>
   15cc0:	mvn	r4, #0
   15cc4:	str	r5, [r0]
   15cc8:	mov	r0, r4
   15ccc:	pop	{r4, r5, r6, pc}
   15cd0:	bl	11470 <__errno_location@plt>
   15cd4:	ldr	r4, [r0]
   15cd8:	subs	r4, r4, #9
   15cdc:	mvnne	r4, #0
   15ce0:	mov	r0, r4
   15ce4:	pop	{r4, r5, r6, pc}
   15ce8:	ldr	r3, [pc, #984]	; 160c8 <close_stdout@@Base+0x2e24>
   15cec:	mov	r0, #14
   15cf0:	ldr	r2, [pc, #980]	; 160cc <close_stdout@@Base+0x2e28>
   15cf4:	add	r3, pc, r3
   15cf8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15cfc:	sub	sp, sp, #132	; 0x84
   15d00:	ldr	r6, [r3, r2]
   15d04:	ldr	r3, [r6]
   15d08:	str	r3, [sp, #124]	; 0x7c
   15d0c:	bl	11530 <nl_langinfo@plt>
   15d10:	subs	r5, r0, #0
   15d14:	beq	15dc8 <close_stdout@@Base+0x2b24>
   15d18:	ldr	r3, [pc, #944]	; 160d0 <close_stdout@@Base+0x2e2c>
   15d1c:	ldr	r4, [pc, r3]
   15d20:	cmp	r4, #0
   15d24:	beq	15dd4 <close_stdout@@Base+0x2b30>
   15d28:	ldrb	r7, [r4]
   15d2c:	cmp	r7, #0
   15d30:	bne	15d64 <close_stdout@@Base+0x2ac0>
   15d34:	b	15d9c <close_stdout@@Base+0x2af8>
   15d38:	mov	r0, r4
   15d3c:	bl	11458 <strlen@plt>
   15d40:	add	r0, r0, #1
   15d44:	add	r7, r4, r0
   15d48:	mov	r0, r7
   15d4c:	bl	11458 <strlen@plt>
   15d50:	add	r0, r0, #1
   15d54:	add	r4, r7, r0
   15d58:	ldrb	r7, [r7, r0]
   15d5c:	cmp	r7, #0
   15d60:	beq	15d9c <close_stdout@@Base+0x2af8>
   15d64:	mov	r0, r5
   15d68:	mov	r1, r4
   15d6c:	bl	1126c <strcmp@plt>
   15d70:	cmp	r0, #0
   15d74:	beq	15d8c <close_stdout@@Base+0x2ae8>
   15d78:	cmp	r7, #42	; 0x2a
   15d7c:	bne	15d38 <close_stdout@@Base+0x2a94>
   15d80:	ldrb	r3, [r4, #1]
   15d84:	cmp	r3, #0
   15d88:	bne	15d38 <close_stdout@@Base+0x2a94>
   15d8c:	mov	r0, r4
   15d90:	bl	11458 <strlen@plt>
   15d94:	add	r0, r0, #1
   15d98:	add	r5, r4, r0
   15d9c:	ldrb	r3, [r5]
   15da0:	cmp	r3, #0
   15da4:	ldreq	r5, [pc, #808]	; 160d4 <close_stdout@@Base+0x2e30>
   15da8:	addeq	r5, pc, r5
   15dac:	ldr	r2, [sp, #124]	; 0x7c
   15db0:	mov	r0, r5
   15db4:	ldr	r3, [r6]
   15db8:	cmp	r2, r3
   15dbc:	bne	1609c <close_stdout@@Base+0x2df8>
   15dc0:	add	sp, sp, #132	; 0x84
   15dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dc8:	ldr	r5, [pc, #776]	; 160d8 <close_stdout@@Base+0x2e34>
   15dcc:	add	r5, pc, r5
   15dd0:	b	15d18 <close_stdout@@Base+0x2a74>
   15dd4:	ldr	r0, [pc, #768]	; 160dc <close_stdout@@Base+0x2e38>
   15dd8:	add	r0, pc, r0
   15ddc:	bl	113e0 <getenv@plt>
   15de0:	subs	r8, r0, #0
   15de4:	beq	16074 <close_stdout@@Base+0x2dd0>
   15de8:	ldrb	r3, [r8]
   15dec:	cmp	r3, #0
   15df0:	beq	16008 <close_stdout@@Base+0x2d64>
   15df4:	bl	11458 <strlen@plt>
   15df8:	subs	sl, r0, #0
   15dfc:	subne	r3, sl, #1
   15e00:	bne	16018 <close_stdout@@Base+0x2d74>
   15e04:	mov	r9, #0
   15e08:	mov	fp, r9
   15e0c:	add	r9, sl, r9
   15e10:	add	r0, r9, #14
   15e14:	bl	113ec <malloc@plt>
   15e18:	subs	r7, r0, #0
   15e1c:	beq	16068 <close_stdout@@Base+0x2dc4>
   15e20:	mov	r1, r8
   15e24:	mov	r2, sl
   15e28:	bl	112d8 <memcpy@plt>
   15e2c:	cmp	fp, #0
   15e30:	add	ip, r7, r9
   15e34:	movne	r3, #47	; 0x2f
   15e38:	strbne	r3, [r7, sl]
   15e3c:	ldr	r3, [pc, #668]	; 160e0 <close_stdout@@Base+0x2e3c>
   15e40:	add	r3, pc, r3
   15e44:	ldm	r3!, {r0, r1, r2}
   15e48:	ldrh	r3, [r3]
   15e4c:	str	r0, [r7, r9]
   15e50:	mov	r0, r7
   15e54:	str	r1, [ip, #4]
   15e58:	mov	r1, #32768	; 0x8000
   15e5c:	strh	r3, [ip, #12]
   15e60:	str	r2, [ip, #8]
   15e64:	bl	113d4 <open64@plt>
   15e68:	subs	r8, r0, #0
   15e6c:	blt	16030 <close_stdout@@Base+0x2d8c>
   15e70:	ldr	r1, [pc, #620]	; 160e4 <close_stdout@@Base+0x2e40>
   15e74:	add	r1, pc, r1
   15e78:	bl	1123c <fdopen@plt>
   15e7c:	subs	fp, r0, #0
   15e80:	beq	16088 <close_stdout@@Base+0x2de4>
   15e84:	ldr	r0, [pc, #604]	; 160e8 <close_stdout@@Base+0x2e44>
   15e88:	add	sl, sp, #20
   15e8c:	add	r9, sp, #72	; 0x48
   15e90:	mov	r8, #0
   15e94:	add	r0, pc, r0
   15e98:	str	r0, [sp, #12]
   15e9c:	ldr	r3, [fp, #4]
   15ea0:	ldr	r2, [fp, #8]
   15ea4:	cmp	r3, r2
   15ea8:	bcs	15f94 <close_stdout@@Base+0x2cf0>
   15eac:	add	r2, r3, #1
   15eb0:	str	r2, [fp, #4]
   15eb4:	ldrb	r0, [r3]
   15eb8:	cmp	r0, #32
   15ebc:	beq	15e9c <close_stdout@@Base+0x2bf8>
   15ec0:	sub	r3, r0, #9
   15ec4:	cmp	r3, #1
   15ec8:	bls	15e9c <close_stdout@@Base+0x2bf8>
   15ecc:	cmp	r0, #35	; 0x23
   15ed0:	beq	15fa8 <close_stdout@@Base+0x2d04>
   15ed4:	mov	r1, fp
   15ed8:	bl	11464 <ungetc@plt>
   15edc:	mov	r0, fp
   15ee0:	ldr	r1, [sp, #12]
   15ee4:	mov	r2, sl
   15ee8:	mov	r3, r9
   15eec:	bl	114a0 <fscanf@plt>
   15ef0:	cmp	r0, #1
   15ef4:	ble	15fd8 <close_stdout@@Base+0x2d34>
   15ef8:	mov	r0, sl
   15efc:	bl	11458 <strlen@plt>
   15f00:	str	r0, [sp, #8]
   15f04:	mov	r0, r9
   15f08:	bl	11458 <strlen@plt>
   15f0c:	cmp	r8, #0
   15f10:	mov	r2, r0
   15f14:	bne	1603c <close_stdout@@Base+0x2d98>
   15f18:	ldr	r3, [sp, #8]
   15f1c:	str	r2, [sp]
   15f20:	add	r8, r0, r3
   15f24:	add	r0, r8, #3
   15f28:	add	r8, r8, #2
   15f2c:	bl	113ec <malloc@plt>
   15f30:	ldr	r2, [sp]
   15f34:	mov	r3, r0
   15f38:	cmp	r3, #0
   15f3c:	beq	160a0 <close_stdout@@Base+0x2dfc>
   15f40:	ldr	r0, [sp, #8]
   15f44:	movw	r1, #65534	; 0xfffe
   15f48:	movt	r1, #65535	; 0xffff
   15f4c:	rsb	r2, r2, r8
   15f50:	rsb	r1, r0, r1
   15f54:	stm	sp, {r2, r3}
   15f58:	add	r0, r1, r2
   15f5c:	mov	r1, sl
   15f60:	add	r0, r3, r0
   15f64:	mov	r4, r3
   15f68:	bl	113a4 <strcpy@plt>
   15f6c:	ldr	r2, [sp]
   15f70:	ldr	r3, [sp, #4]
   15f74:	mov	r1, r9
   15f78:	sub	r0, r2, #1
   15f7c:	add	r0, r3, r0
   15f80:	bl	113a4 <strcpy@plt>
   15f84:	ldr	r3, [fp, #4]
   15f88:	ldr	r2, [fp, #8]
   15f8c:	cmp	r3, r2
   15f90:	bcc	15eac <close_stdout@@Base+0x2c08>
   15f94:	mov	r0, fp
   15f98:	bl	11500 <__uflow@plt>
   15f9c:	cmn	r0, #1
   15fa0:	beq	15fd8 <close_stdout@@Base+0x2d34>
   15fa4:	b	15eb8 <close_stdout@@Base+0x2c14>
   15fa8:	ldr	r3, [fp, #4]
   15fac:	ldr	r2, [fp, #8]
   15fb0:	cmp	r3, r2
   15fb4:	bcs	160bc <close_stdout@@Base+0x2e18>
   15fb8:	add	r2, r3, #1
   15fbc:	str	r2, [fp, #4]
   15fc0:	ldrb	r0, [r3]
   15fc4:	cmp	r0, #10
   15fc8:	cmnne	r0, #1
   15fcc:	bne	15fa8 <close_stdout@@Base+0x2d04>
   15fd0:	cmn	r0, #1
   15fd4:	bne	15e9c <close_stdout@@Base+0x2bf8>
   15fd8:	mov	r0, fp
   15fdc:	bl	15ac0 <close_stdout@@Base+0x281c>
   15fe0:	cmp	r8, #0
   15fe4:	beq	16030 <close_stdout@@Base+0x2d8c>
   15fe8:	mov	r3, #0
   15fec:	strb	r3, [r4, r8]
   15ff0:	mov	r0, r7
   15ff4:	bl	112b4 <free@plt>
   15ff8:	ldr	r3, [pc, #236]	; 160ec <close_stdout@@Base+0x2e48>
   15ffc:	add	r3, pc, r3
   16000:	str	r4, [r3]
   16004:	b	15d28 <close_stdout@@Base+0x2a84>
   16008:	ldr	r8, [pc, #224]	; 160f0 <close_stdout@@Base+0x2e4c>
   1600c:	mov	r3, #7
   16010:	mov	sl, #8
   16014:	add	r8, pc, r8
   16018:	ldrb	r3, [r8, r3]
   1601c:	cmp	r3, #47	; 0x2f
   16020:	movne	r9, #1
   16024:	movne	fp, r9
   16028:	bne	15e0c <close_stdout@@Base+0x2b68>
   1602c:	b	15e04 <close_stdout@@Base+0x2b60>
   16030:	ldr	r4, [pc, #188]	; 160f4 <close_stdout@@Base+0x2e50>
   16034:	add	r4, pc, r4
   16038:	b	15ff0 <close_stdout@@Base+0x2d4c>
   1603c:	ldr	r0, [sp, #8]
   16040:	str	r2, [sp]
   16044:	add	r3, r0, r2
   16048:	mov	r0, r4
   1604c:	add	r8, r3, r8
   16050:	add	r1, r8, #3
   16054:	add	r8, r8, #2
   16058:	bl	11344 <realloc@plt>
   1605c:	ldr	r2, [sp]
   16060:	mov	r3, r0
   16064:	b	15f38 <close_stdout@@Base+0x2c94>
   16068:	ldr	r4, [pc, #136]	; 160f8 <close_stdout@@Base+0x2e54>
   1606c:	add	r4, pc, r4
   16070:	b	15ff8 <close_stdout@@Base+0x2d54>
   16074:	ldr	r8, [pc, #128]	; 160fc <close_stdout@@Base+0x2e58>
   16078:	mov	r3, #7
   1607c:	mov	sl, #8
   16080:	add	r8, pc, r8
   16084:	b	16018 <close_stdout@@Base+0x2d74>
   16088:	ldr	r4, [pc, #112]	; 16100 <close_stdout@@Base+0x2e5c>
   1608c:	mov	r0, r8
   16090:	add	r4, pc, r4
   16094:	bl	11584 <close@plt>
   16098:	b	15ff0 <close_stdout@@Base+0x2d4c>
   1609c:	bl	11314 <__stack_chk_fail@plt>
   160a0:	mov	r0, r4
   160a4:	ldr	r4, [pc, #88]	; 16104 <close_stdout@@Base+0x2e60>
   160a8:	bl	112b4 <free@plt>
   160ac:	mov	r0, fp
   160b0:	add	r4, pc, r4
   160b4:	bl	15ac0 <close_stdout@@Base+0x281c>
   160b8:	b	15ff0 <close_stdout@@Base+0x2d4c>
   160bc:	mov	r0, fp
   160c0:	bl	11500 <__uflow@plt>
   160c4:	b	15fc4 <close_stdout@@Base+0x2d20>
   160c8:	andeq	r3, r1, r4, lsl #6
   160cc:	andeq	r0, r0, r8, lsr r1
   160d0:	andeq	r3, r1, r8, lsr #12
   160d4:	andeq	r1, r0, r0, ror #28
   160d8:	andeq	r1, r0, r4, asr #16
   160dc:	andeq	r1, r0, r8, lsr lr
   160e0:	andeq	r1, r0, r0, ror #27
   160e4:	andeq	r1, r0, r4, lsr #16
   160e8:	muleq	r0, ip, sp
   160ec:	andeq	r3, r1, r8, asr #6
   160f0:	andeq	r1, r0, r8, ror #23
   160f4:	ldrdeq	r1, [r0], -ip
   160f8:	andeq	r1, r0, r4, lsr #11
   160fc:	andeq	r1, r0, ip, ror fp
   16100:	andeq	r1, r0, r0, lsl #11
   16104:	andeq	r1, r0, r0, ror #10
   16108:	subs	r2, r1, #1
   1610c:	bxeq	lr
   16110:	bcc	162e8 <close_stdout@@Base+0x3044>
   16114:	cmp	r0, r1
   16118:	bls	162cc <close_stdout@@Base+0x3028>
   1611c:	tst	r1, r2
   16120:	beq	162d8 <close_stdout@@Base+0x3034>
   16124:	clz	r3, r0
   16128:	clz	r2, r1
   1612c:	sub	r3, r2, r3
   16130:	rsbs	r3, r3, #31
   16134:	addne	r3, r3, r3, lsl #1
   16138:	mov	r2, #0
   1613c:	addne	pc, pc, r3, lsl #2
   16140:	nop	{0}
   16144:	cmp	r0, r1, lsl #31
   16148:	adc	r2, r2, r2
   1614c:	subcs	r0, r0, r1, lsl #31
   16150:	cmp	r0, r1, lsl #30
   16154:	adc	r2, r2, r2
   16158:	subcs	r0, r0, r1, lsl #30
   1615c:	cmp	r0, r1, lsl #29
   16160:	adc	r2, r2, r2
   16164:	subcs	r0, r0, r1, lsl #29
   16168:	cmp	r0, r1, lsl #28
   1616c:	adc	r2, r2, r2
   16170:	subcs	r0, r0, r1, lsl #28
   16174:	cmp	r0, r1, lsl #27
   16178:	adc	r2, r2, r2
   1617c:	subcs	r0, r0, r1, lsl #27
   16180:	cmp	r0, r1, lsl #26
   16184:	adc	r2, r2, r2
   16188:	subcs	r0, r0, r1, lsl #26
   1618c:	cmp	r0, r1, lsl #25
   16190:	adc	r2, r2, r2
   16194:	subcs	r0, r0, r1, lsl #25
   16198:	cmp	r0, r1, lsl #24
   1619c:	adc	r2, r2, r2
   161a0:	subcs	r0, r0, r1, lsl #24
   161a4:	cmp	r0, r1, lsl #23
   161a8:	adc	r2, r2, r2
   161ac:	subcs	r0, r0, r1, lsl #23
   161b0:	cmp	r0, r1, lsl #22
   161b4:	adc	r2, r2, r2
   161b8:	subcs	r0, r0, r1, lsl #22
   161bc:	cmp	r0, r1, lsl #21
   161c0:	adc	r2, r2, r2
   161c4:	subcs	r0, r0, r1, lsl #21
   161c8:	cmp	r0, r1, lsl #20
   161cc:	adc	r2, r2, r2
   161d0:	subcs	r0, r0, r1, lsl #20
   161d4:	cmp	r0, r1, lsl #19
   161d8:	adc	r2, r2, r2
   161dc:	subcs	r0, r0, r1, lsl #19
   161e0:	cmp	r0, r1, lsl #18
   161e4:	adc	r2, r2, r2
   161e8:	subcs	r0, r0, r1, lsl #18
   161ec:	cmp	r0, r1, lsl #17
   161f0:	adc	r2, r2, r2
   161f4:	subcs	r0, r0, r1, lsl #17
   161f8:	cmp	r0, r1, lsl #16
   161fc:	adc	r2, r2, r2
   16200:	subcs	r0, r0, r1, lsl #16
   16204:	cmp	r0, r1, lsl #15
   16208:	adc	r2, r2, r2
   1620c:	subcs	r0, r0, r1, lsl #15
   16210:	cmp	r0, r1, lsl #14
   16214:	adc	r2, r2, r2
   16218:	subcs	r0, r0, r1, lsl #14
   1621c:	cmp	r0, r1, lsl #13
   16220:	adc	r2, r2, r2
   16224:	subcs	r0, r0, r1, lsl #13
   16228:	cmp	r0, r1, lsl #12
   1622c:	adc	r2, r2, r2
   16230:	subcs	r0, r0, r1, lsl #12
   16234:	cmp	r0, r1, lsl #11
   16238:	adc	r2, r2, r2
   1623c:	subcs	r0, r0, r1, lsl #11
   16240:	cmp	r0, r1, lsl #10
   16244:	adc	r2, r2, r2
   16248:	subcs	r0, r0, r1, lsl #10
   1624c:	cmp	r0, r1, lsl #9
   16250:	adc	r2, r2, r2
   16254:	subcs	r0, r0, r1, lsl #9
   16258:	cmp	r0, r1, lsl #8
   1625c:	adc	r2, r2, r2
   16260:	subcs	r0, r0, r1, lsl #8
   16264:	cmp	r0, r1, lsl #7
   16268:	adc	r2, r2, r2
   1626c:	subcs	r0, r0, r1, lsl #7
   16270:	cmp	r0, r1, lsl #6
   16274:	adc	r2, r2, r2
   16278:	subcs	r0, r0, r1, lsl #6
   1627c:	cmp	r0, r1, lsl #5
   16280:	adc	r2, r2, r2
   16284:	subcs	r0, r0, r1, lsl #5
   16288:	cmp	r0, r1, lsl #4
   1628c:	adc	r2, r2, r2
   16290:	subcs	r0, r0, r1, lsl #4
   16294:	cmp	r0, r1, lsl #3
   16298:	adc	r2, r2, r2
   1629c:	subcs	r0, r0, r1, lsl #3
   162a0:	cmp	r0, r1, lsl #2
   162a4:	adc	r2, r2, r2
   162a8:	subcs	r0, r0, r1, lsl #2
   162ac:	cmp	r0, r1, lsl #1
   162b0:	adc	r2, r2, r2
   162b4:	subcs	r0, r0, r1, lsl #1
   162b8:	cmp	r0, r1
   162bc:	adc	r2, r2, r2
   162c0:	subcs	r0, r0, r1
   162c4:	mov	r0, r2
   162c8:	bx	lr
   162cc:	moveq	r0, #1
   162d0:	movne	r0, #0
   162d4:	bx	lr
   162d8:	clz	r2, r1
   162dc:	rsb	r2, r2, #31
   162e0:	lsr	r0, r0, r2
   162e4:	bx	lr
   162e8:	cmp	r0, #0
   162ec:	mvnne	r0, #0
   162f0:	b	16708 <close_stdout@@Base+0x3464>
   162f4:	cmp	r1, #0
   162f8:	beq	162e8 <close_stdout@@Base+0x3044>
   162fc:	push	{r0, r1, lr}
   16300:	bl	16108 <close_stdout@@Base+0x2e64>
   16304:	pop	{r1, r2, lr}
   16308:	mul	r3, r2, r0
   1630c:	sub	r1, r1, r3
   16310:	bx	lr
   16314:	eor	r1, r1, #-2147483648	; 0x80000000
   16318:	b	16320 <close_stdout@@Base+0x307c>
   1631c:	eor	r3, r3, #-2147483648	; 0x80000000
   16320:	push	{r4, r5, lr}
   16324:	lsl	r4, r1, #1
   16328:	lsl	r5, r3, #1
   1632c:	teq	r4, r5
   16330:	teqeq	r0, r2
   16334:	orrsne	ip, r4, r0
   16338:	orrsne	ip, r5, r2
   1633c:	mvnsne	ip, r4, asr #21
   16340:	mvnsne	ip, r5, asr #21
   16344:	beq	16530 <close_stdout@@Base+0x328c>
   16348:	lsr	r4, r4, #21
   1634c:	rsbs	r5, r4, r5, lsr #21
   16350:	rsblt	r5, r5, #0
   16354:	ble	16374 <close_stdout@@Base+0x30d0>
   16358:	add	r4, r4, r5
   1635c:	eor	r2, r0, r2
   16360:	eor	r3, r1, r3
   16364:	eor	r0, r2, r0
   16368:	eor	r1, r3, r1
   1636c:	eor	r2, r0, r2
   16370:	eor	r3, r1, r3
   16374:	cmp	r5, #54	; 0x36
   16378:	pophi	{r4, r5, pc}
   1637c:	tst	r1, #-2147483648	; 0x80000000
   16380:	lsl	r1, r1, #12
   16384:	mov	ip, #1048576	; 0x100000
   16388:	orr	r1, ip, r1, lsr #12
   1638c:	beq	16398 <close_stdout@@Base+0x30f4>
   16390:	rsbs	r0, r0, #0
   16394:	rsc	r1, r1, #0
   16398:	tst	r3, #-2147483648	; 0x80000000
   1639c:	lsl	r3, r3, #12
   163a0:	orr	r3, ip, r3, lsr #12
   163a4:	beq	163b0 <close_stdout@@Base+0x310c>
   163a8:	rsbs	r2, r2, #0
   163ac:	rsc	r3, r3, #0
   163b0:	teq	r4, r5
   163b4:	beq	16518 <close_stdout@@Base+0x3274>
   163b8:	sub	r4, r4, #1
   163bc:	rsbs	lr, r5, #32
   163c0:	blt	163dc <close_stdout@@Base+0x3138>
   163c4:	lsl	ip, r2, lr
   163c8:	adds	r0, r0, r2, lsr r5
   163cc:	adc	r1, r1, #0
   163d0:	adds	r0, r0, r3, lsl lr
   163d4:	adcs	r1, r1, r3, asr r5
   163d8:	b	163f8 <close_stdout@@Base+0x3154>
   163dc:	sub	r5, r5, #32
   163e0:	add	lr, lr, #32
   163e4:	cmp	r2, #1
   163e8:	lsl	ip, r3, lr
   163ec:	orrcs	ip, ip, #2
   163f0:	adds	r0, r0, r3, asr r5
   163f4:	adcs	r1, r1, r3, asr #31
   163f8:	and	r5, r1, #-2147483648	; 0x80000000
   163fc:	bpl	1640c <close_stdout@@Base+0x3168>
   16400:	rsbs	ip, ip, #0
   16404:	rscs	r0, r0, #0
   16408:	rsc	r1, r1, #0
   1640c:	cmp	r1, #1048576	; 0x100000
   16410:	bcc	16450 <close_stdout@@Base+0x31ac>
   16414:	cmp	r1, #2097152	; 0x200000
   16418:	bcc	16438 <close_stdout@@Base+0x3194>
   1641c:	lsrs	r1, r1, #1
   16420:	rrxs	r0, r0
   16424:	rrx	ip, ip
   16428:	add	r4, r4, #1
   1642c:	lsl	r2, r4, #21
   16430:	cmn	r2, #4194304	; 0x400000
   16434:	bcs	16590 <close_stdout@@Base+0x32ec>
   16438:	cmp	ip, #-2147483648	; 0x80000000
   1643c:	lsrseq	ip, r0, #1
   16440:	adcs	r0, r0, #0
   16444:	adc	r1, r1, r4, lsl #20
   16448:	orr	r1, r1, r5
   1644c:	pop	{r4, r5, pc}
   16450:	lsls	ip, ip, #1
   16454:	adcs	r0, r0, r0
   16458:	adc	r1, r1, r1
   1645c:	tst	r1, #1048576	; 0x100000
   16460:	sub	r4, r4, #1
   16464:	bne	16438 <close_stdout@@Base+0x3194>
   16468:	teq	r1, #0
   1646c:	moveq	r1, r0
   16470:	moveq	r0, #0
   16474:	clz	r3, r1
   16478:	addeq	r3, r3, #32
   1647c:	sub	r3, r3, #11
   16480:	subs	r2, r3, #32
   16484:	bge	164a8 <close_stdout@@Base+0x3204>
   16488:	adds	r2, r2, #12
   1648c:	ble	164a4 <close_stdout@@Base+0x3200>
   16490:	add	ip, r2, #20
   16494:	rsb	r2, r2, #12
   16498:	lsl	r0, r1, ip
   1649c:	lsr	r1, r1, r2
   164a0:	b	164b8 <close_stdout@@Base+0x3214>
   164a4:	add	r2, r2, #20
   164a8:	rsble	ip, r2, #32
   164ac:	lsl	r1, r1, r2
   164b0:	orrle	r1, r1, r0, lsr ip
   164b4:	lslle	r0, r0, r2
   164b8:	subs	r4, r4, r3
   164bc:	addge	r1, r1, r4, lsl #20
   164c0:	orrge	r1, r1, r5
   164c4:	popge	{r4, r5, pc}
   164c8:	mvn	r4, r4
   164cc:	subs	r4, r4, #31
   164d0:	bge	1650c <close_stdout@@Base+0x3268>
   164d4:	adds	r4, r4, #12
   164d8:	bgt	164f4 <close_stdout@@Base+0x3250>
   164dc:	add	r4, r4, #20
   164e0:	rsb	r2, r4, #32
   164e4:	lsr	r0, r0, r4
   164e8:	orr	r0, r0, r1, lsl r2
   164ec:	orr	r1, r5, r1, lsr r4
   164f0:	pop	{r4, r5, pc}
   164f4:	rsb	r4, r4, #12
   164f8:	rsb	r2, r4, #32
   164fc:	lsr	r0, r0, r2
   16500:	orr	r0, r0, r1, lsl r4
   16504:	mov	r1, r5
   16508:	pop	{r4, r5, pc}
   1650c:	lsr	r0, r1, r4
   16510:	mov	r1, r5
   16514:	pop	{r4, r5, pc}
   16518:	teq	r4, #0
   1651c:	eor	r3, r3, #1048576	; 0x100000
   16520:	eoreq	r1, r1, #1048576	; 0x100000
   16524:	addeq	r4, r4, #1
   16528:	subne	r5, r5, #1
   1652c:	b	163b8 <close_stdout@@Base+0x3114>
   16530:	mvns	ip, r4, asr #21
   16534:	mvnsne	ip, r5, asr #21
   16538:	beq	165a0 <close_stdout@@Base+0x32fc>
   1653c:	teq	r4, r5
   16540:	teqeq	r0, r2
   16544:	beq	16558 <close_stdout@@Base+0x32b4>
   16548:	orrs	ip, r4, r0
   1654c:	moveq	r1, r3
   16550:	moveq	r0, r2
   16554:	pop	{r4, r5, pc}
   16558:	teq	r1, r3
   1655c:	movne	r1, #0
   16560:	movne	r0, #0
   16564:	popne	{r4, r5, pc}
   16568:	lsrs	ip, r4, #21
   1656c:	bne	16580 <close_stdout@@Base+0x32dc>
   16570:	lsls	r0, r0, #1
   16574:	adcs	r1, r1, r1
   16578:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1657c:	pop	{r4, r5, pc}
   16580:	adds	r4, r4, #4194304	; 0x400000
   16584:	addcc	r1, r1, #1048576	; 0x100000
   16588:	popcc	{r4, r5, pc}
   1658c:	and	r5, r1, #-2147483648	; 0x80000000
   16590:	orr	r1, r5, #2130706432	; 0x7f000000
   16594:	orr	r1, r1, #15728640	; 0xf00000
   16598:	mov	r0, #0
   1659c:	pop	{r4, r5, pc}
   165a0:	mvns	ip, r4, asr #21
   165a4:	movne	r1, r3
   165a8:	movne	r0, r2
   165ac:	mvnseq	ip, r5, asr #21
   165b0:	movne	r3, r1
   165b4:	movne	r2, r0
   165b8:	orrs	r4, r0, r1, lsl #12
   165bc:	orrseq	r5, r2, r3, lsl #12
   165c0:	teqeq	r1, r3
   165c4:	orrne	r1, r1, #524288	; 0x80000
   165c8:	pop	{r4, r5, pc}
   165cc:	teq	r0, #0
   165d0:	moveq	r1, #0
   165d4:	bxeq	lr
   165d8:	push	{r4, r5, lr}
   165dc:	mov	r4, #1024	; 0x400
   165e0:	add	r4, r4, #50	; 0x32
   165e4:	mov	r5, #0
   165e8:	mov	r1, #0
   165ec:	b	16468 <close_stdout@@Base+0x31c4>
   165f0:	teq	r0, #0
   165f4:	moveq	r1, #0
   165f8:	bxeq	lr
   165fc:	push	{r4, r5, lr}
   16600:	mov	r4, #1024	; 0x400
   16604:	add	r4, r4, #50	; 0x32
   16608:	ands	r5, r0, #-2147483648	; 0x80000000
   1660c:	rsbmi	r0, r0, #0
   16610:	mov	r1, #0
   16614:	b	16468 <close_stdout@@Base+0x31c4>
   16618:	lsls	r2, r0, #1
   1661c:	asr	r1, r2, #3
   16620:	rrx	r1, r1
   16624:	lsl	r0, r2, #28
   16628:	andsne	r3, r2, #-16777216	; 0xff000000
   1662c:	teqne	r3, #-16777216	; 0xff000000
   16630:	eorne	r1, r1, #939524096	; 0x38000000
   16634:	bxne	lr
   16638:	teq	r2, #0
   1663c:	teqne	r3, #-16777216	; 0xff000000
   16640:	bxeq	lr
   16644:	push	{r4, r5, lr}
   16648:	mov	r4, #896	; 0x380
   1664c:	and	r5, r1, #-2147483648	; 0x80000000
   16650:	bic	r1, r1, #-2147483648	; 0x80000000
   16654:	b	16468 <close_stdout@@Base+0x31c4>
   16658:	orrs	r2, r0, r1
   1665c:	bxeq	lr
   16660:	push	{r4, r5, lr}
   16664:	mov	r5, #0
   16668:	b	16688 <close_stdout@@Base+0x33e4>
   1666c:	orrs	r2, r0, r1
   16670:	bxeq	lr
   16674:	push	{r4, r5, lr}
   16678:	ands	r5, r1, #-2147483648	; 0x80000000
   1667c:	bpl	16688 <close_stdout@@Base+0x33e4>
   16680:	rsbs	r0, r0, #0
   16684:	rsc	r1, r1, #0
   16688:	mov	r4, #1024	; 0x400
   1668c:	add	r4, r4, #50	; 0x32
   16690:	lsrs	ip, r1, #22
   16694:	beq	1640c <close_stdout@@Base+0x3168>
   16698:	mov	r2, #3
   1669c:	lsrs	ip, ip, #3
   166a0:	addne	r2, r2, #3
   166a4:	lsrs	ip, ip, #3
   166a8:	addne	r2, r2, #3
   166ac:	add	r2, r2, ip, lsr #3
   166b0:	rsb	r3, r2, #32
   166b4:	lsl	ip, r0, r3
   166b8:	lsr	r0, r0, r2
   166bc:	orr	r0, r0, r1, lsl r3
   166c0:	lsr	r1, r1, r2
   166c4:	add	r4, r4, r2
   166c8:	b	1640c <close_stdout@@Base+0x3168>
   166cc:	cmp	r3, #0
   166d0:	cmpeq	r2, #0
   166d4:	bne	166ec <close_stdout@@Base+0x3448>
   166d8:	cmp	r1, #0
   166dc:	cmpeq	r0, #0
   166e0:	mvnne	r1, #0
   166e4:	mvnne	r0, #0
   166e8:	b	16708 <close_stdout@@Base+0x3464>
   166ec:	sub	sp, sp, #8
   166f0:	push	{sp, lr}
   166f4:	bl	16754 <close_stdout@@Base+0x34b0>
   166f8:	ldr	lr, [sp, #4]
   166fc:	add	sp, sp, #8
   16700:	pop	{r2, r3}
   16704:	bx	lr
   16708:	push	{r1, lr}
   1670c:	mov	r0, #8
   16710:	bl	11260 <raise@plt>
   16714:	pop	{r1, pc}
   16718:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1671c:	mov	r8, r2
   16720:	mov	r6, r0
   16724:	mov	r7, r1
   16728:	mov	sl, r3
   1672c:	ldr	r9, [sp, #32]
   16730:	bl	16790 <close_stdout@@Base+0x34ec>
   16734:	umull	r4, r5, r8, r0
   16738:	mul	r8, r8, r1
   1673c:	mla	r2, r0, sl, r8
   16740:	add	r5, r2, r5
   16744:	subs	r4, r6, r4
   16748:	sbc	r5, r7, r5
   1674c:	strd	r4, [r9]
   16750:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16754:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16758:	mov	r8, r2
   1675c:	mov	r6, r0
   16760:	mov	r7, r1
   16764:	mov	r5, r3
   16768:	ldr	r9, [sp, #32]
   1676c:	bl	16c1c <close_stdout@@Base+0x3978>
   16770:	mul	r3, r0, r5
   16774:	umull	r4, r5, r0, r8
   16778:	mla	r8, r8, r1, r3
   1677c:	add	r5, r8, r5
   16780:	subs	r4, r6, r4
   16784:	sbc	r5, r7, r5
   16788:	strd	r4, [r9]
   1678c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16790:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16794:	rsbs	r4, r0, #0
   16798:	rsc	r5, r1, #0
   1679c:	cmp	r1, #0
   167a0:	mvn	r6, #0
   167a4:	sub	sp, sp, #12
   167a8:	movge	r4, r0
   167ac:	movge	r5, r1
   167b0:	movge	r6, #0
   167b4:	cmp	r3, #0
   167b8:	blt	169f0 <close_stdout@@Base+0x374c>
   167bc:	cmp	r3, #0
   167c0:	mov	sl, r4
   167c4:	mov	ip, r5
   167c8:	mov	r0, r2
   167cc:	mov	r1, r3
   167d0:	mov	r8, r2
   167d4:	mov	r7, r4
   167d8:	mov	r9, r5
   167dc:	bne	168d4 <close_stdout@@Base+0x3630>
   167e0:	cmp	r2, r5
   167e4:	bls	16910 <close_stdout@@Base+0x366c>
   167e8:	clz	r3, r2
   167ec:	cmp	r3, #0
   167f0:	rsbne	r2, r3, #32
   167f4:	lslne	r8, r0, r3
   167f8:	lsrne	r2, r4, r2
   167fc:	lslne	r7, r4, r3
   16800:	orrne	r9, r2, r5, lsl r3
   16804:	lsr	r4, r8, #16
   16808:	uxth	sl, r8
   1680c:	mov	r1, r4
   16810:	mov	r0, r9
   16814:	bl	16108 <close_stdout@@Base+0x2e64>
   16818:	mov	r1, r4
   1681c:	mov	fp, r0
   16820:	mov	r0, r9
   16824:	bl	162f4 <close_stdout@@Base+0x3050>
   16828:	mul	r0, sl, fp
   1682c:	lsr	r2, r7, #16
   16830:	orr	r1, r2, r1, lsl #16
   16834:	cmp	r0, r1
   16838:	bls	1685c <close_stdout@@Base+0x35b8>
   1683c:	adds	r1, r1, r8
   16840:	sub	r3, fp, #1
   16844:	bcs	16858 <close_stdout@@Base+0x35b4>
   16848:	cmp	r0, r1
   1684c:	subhi	fp, fp, #2
   16850:	addhi	r1, r1, r8
   16854:	bhi	1685c <close_stdout@@Base+0x35b8>
   16858:	mov	fp, r3
   1685c:	rsb	r9, r0, r1
   16860:	mov	r1, r4
   16864:	uxth	r7, r7
   16868:	mov	r0, r9
   1686c:	bl	16108 <close_stdout@@Base+0x2e64>
   16870:	mov	r1, r4
   16874:	mov	r5, r0
   16878:	mov	r0, r9
   1687c:	bl	162f4 <close_stdout@@Base+0x3050>
   16880:	mul	sl, sl, r5
   16884:	orr	r1, r7, r1, lsl #16
   16888:	cmp	sl, r1
   1688c:	bls	168ac <close_stdout@@Base+0x3608>
   16890:	adds	r8, r1, r8
   16894:	sub	r3, r5, #1
   16898:	bcs	168a8 <close_stdout@@Base+0x3604>
   1689c:	cmp	sl, r8
   168a0:	subhi	r5, r5, #2
   168a4:	bhi	168ac <close_stdout@@Base+0x3608>
   168a8:	mov	r5, r3
   168ac:	orr	r3, r5, fp, lsl #16
   168b0:	mov	r4, #0
   168b4:	cmp	r6, #0
   168b8:	mov	r0, r3
   168bc:	mov	r1, r4
   168c0:	beq	168cc <close_stdout@@Base+0x3628>
   168c4:	rsbs	r0, r0, #0
   168c8:	rsc	r1, r1, #0
   168cc:	add	sp, sp, #12
   168d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168d4:	cmp	r3, r5
   168d8:	movhi	r4, #0
   168dc:	movhi	r3, r4
   168e0:	bhi	168b4 <close_stdout@@Base+0x3610>
   168e4:	clz	r5, r1
   168e8:	cmp	r5, #0
   168ec:	bne	16adc <close_stdout@@Base+0x3838>
   168f0:	cmp	r1, ip
   168f4:	cmpcs	r2, sl
   168f8:	movhi	r4, #0
   168fc:	movls	r4, #1
   16900:	movls	r3, #1
   16904:	movls	r4, r5
   16908:	movhi	r3, r4
   1690c:	b	168b4 <close_stdout@@Base+0x3610>
   16910:	cmp	r2, #0
   16914:	bne	16928 <close_stdout@@Base+0x3684>
   16918:	mov	r1, r2
   1691c:	mov	r0, #1
   16920:	bl	16108 <close_stdout@@Base+0x2e64>
   16924:	mov	r8, r0
   16928:	clz	r3, r8
   1692c:	cmp	r3, #0
   16930:	bne	16a00 <close_stdout@@Base+0x375c>
   16934:	rsb	r9, r8, r9
   16938:	lsr	r5, r8, #16
   1693c:	uxth	sl, r8
   16940:	mov	r4, #1
   16944:	mov	r1, r5
   16948:	mov	r0, r9
   1694c:	bl	16108 <close_stdout@@Base+0x2e64>
   16950:	mov	r1, r5
   16954:	mov	fp, r0
   16958:	mov	r0, r9
   1695c:	bl	162f4 <close_stdout@@Base+0x3050>
   16960:	mul	r0, sl, fp
   16964:	lsr	r2, r7, #16
   16968:	orr	r1, r2, r1, lsl #16
   1696c:	cmp	r0, r1
   16970:	bls	16990 <close_stdout@@Base+0x36ec>
   16974:	adds	r1, r1, r8
   16978:	sub	r3, fp, #1
   1697c:	bcs	16bfc <close_stdout@@Base+0x3958>
   16980:	cmp	r0, r1
   16984:	subhi	fp, fp, #2
   16988:	addhi	r1, r1, r8
   1698c:	bls	16bfc <close_stdout@@Base+0x3958>
   16990:	rsb	r2, r0, r1
   16994:	mov	r1, r5
   16998:	str	r2, [sp]
   1699c:	uxth	r7, r7
   169a0:	mov	r0, r2
   169a4:	bl	16108 <close_stdout@@Base+0x2e64>
   169a8:	ldr	r2, [sp]
   169ac:	mov	r1, r5
   169b0:	mov	r9, r0
   169b4:	mov	r0, r2
   169b8:	bl	162f4 <close_stdout@@Base+0x3050>
   169bc:	mul	sl, sl, r9
   169c0:	orr	r1, r7, r1, lsl #16
   169c4:	cmp	sl, r1
   169c8:	bls	169e8 <close_stdout@@Base+0x3744>
   169cc:	adds	r8, r1, r8
   169d0:	sub	r3, r9, #1
   169d4:	bcs	169e4 <close_stdout@@Base+0x3740>
   169d8:	cmp	sl, r8
   169dc:	subhi	r9, r9, #2
   169e0:	bhi	169e8 <close_stdout@@Base+0x3744>
   169e4:	mov	r9, r3
   169e8:	orr	r3, r9, fp, lsl #16
   169ec:	b	168b4 <close_stdout@@Base+0x3610>
   169f0:	mvn	r6, r6
   169f4:	rsbs	r2, r2, #0
   169f8:	rsc	r3, r3, #0
   169fc:	b	167bc <close_stdout@@Base+0x3518>
   16a00:	lsl	r8, r8, r3
   16a04:	rsb	fp, r3, #32
   16a08:	lsr	r4, r9, fp
   16a0c:	lsr	fp, r7, fp
   16a10:	lsr	r5, r8, #16
   16a14:	orr	fp, fp, r9, lsl r3
   16a18:	mov	r0, r4
   16a1c:	lsl	r7, r7, r3
   16a20:	mov	r1, r5
   16a24:	uxth	sl, r8
   16a28:	bl	16108 <close_stdout@@Base+0x2e64>
   16a2c:	mov	r1, r5
   16a30:	mov	r3, r0
   16a34:	mov	r0, r4
   16a38:	str	r3, [sp]
   16a3c:	bl	162f4 <close_stdout@@Base+0x3050>
   16a40:	ldr	r3, [sp]
   16a44:	lsr	r2, fp, #16
   16a48:	mul	r0, sl, r3
   16a4c:	orr	r1, r2, r1, lsl #16
   16a50:	cmp	r0, r1
   16a54:	bls	16a74 <close_stdout@@Base+0x37d0>
   16a58:	adds	r1, r1, r8
   16a5c:	sub	r2, r3, #1
   16a60:	bcs	16c14 <close_stdout@@Base+0x3970>
   16a64:	cmp	r0, r1
   16a68:	subhi	r3, r3, #2
   16a6c:	addhi	r1, r1, r8
   16a70:	bls	16c14 <close_stdout@@Base+0x3970>
   16a74:	rsb	r9, r0, r1
   16a78:	mov	r1, r5
   16a7c:	str	r3, [sp]
   16a80:	uxth	fp, fp
   16a84:	mov	r0, r9
   16a88:	bl	16108 <close_stdout@@Base+0x2e64>
   16a8c:	mov	r1, r5
   16a90:	mov	r4, r0
   16a94:	mov	r0, r9
   16a98:	bl	162f4 <close_stdout@@Base+0x3050>
   16a9c:	mul	r9, sl, r4
   16aa0:	ldr	r3, [sp]
   16aa4:	orr	r1, fp, r1, lsl #16
   16aa8:	cmp	r9, r1
   16aac:	bls	16ad0 <close_stdout@@Base+0x382c>
   16ab0:	adds	r1, r1, r8
   16ab4:	sub	r2, r4, #1
   16ab8:	bcs	16acc <close_stdout@@Base+0x3828>
   16abc:	cmp	r9, r1
   16ac0:	subhi	r4, r4, #2
   16ac4:	addhi	r1, r1, r8
   16ac8:	bhi	16ad0 <close_stdout@@Base+0x382c>
   16acc:	mov	r4, r2
   16ad0:	rsb	r9, r9, r1
   16ad4:	orr	r4, r4, r3, lsl #16
   16ad8:	b	16944 <close_stdout@@Base+0x36a0>
   16adc:	rsb	sl, r5, #32
   16ae0:	lsl	r3, r2, r5
   16ae4:	lsr	r0, r2, sl
   16ae8:	lsr	r2, ip, sl
   16aec:	orr	r4, r0, r1, lsl r5
   16af0:	lsr	sl, r7, sl
   16af4:	mov	r0, r2
   16af8:	orr	sl, sl, ip, lsl r5
   16afc:	lsr	r9, r4, #16
   16b00:	str	r3, [sp, #4]
   16b04:	str	r2, [sp]
   16b08:	uxth	fp, r4
   16b0c:	mov	r1, r9
   16b10:	bl	16108 <close_stdout@@Base+0x2e64>
   16b14:	ldr	r2, [sp]
   16b18:	mov	r1, r9
   16b1c:	mov	r8, r0
   16b20:	mov	r0, r2
   16b24:	bl	162f4 <close_stdout@@Base+0x3050>
   16b28:	mul	r0, fp, r8
   16b2c:	lsr	r2, sl, #16
   16b30:	orr	r1, r2, r1, lsl #16
   16b34:	cmp	r0, r1
   16b38:	bls	16b58 <close_stdout@@Base+0x38b4>
   16b3c:	adds	r1, r1, r4
   16b40:	sub	r2, r8, #1
   16b44:	bcs	16c0c <close_stdout@@Base+0x3968>
   16b48:	cmp	r0, r1
   16b4c:	subhi	r8, r8, #2
   16b50:	addhi	r1, r1, r4
   16b54:	bls	16c0c <close_stdout@@Base+0x3968>
   16b58:	rsb	ip, r0, r1
   16b5c:	mov	r1, r9
   16b60:	str	ip, [sp]
   16b64:	mov	r0, ip
   16b68:	bl	16108 <close_stdout@@Base+0x2e64>
   16b6c:	ldr	ip, [sp]
   16b70:	mov	r1, r9
   16b74:	mov	r2, r0
   16b78:	mov	r0, ip
   16b7c:	str	r2, [sp]
   16b80:	bl	162f4 <close_stdout@@Base+0x3050>
   16b84:	ldr	r2, [sp]
   16b88:	uxth	ip, sl
   16b8c:	mul	fp, fp, r2
   16b90:	orr	ip, ip, r1, lsl #16
   16b94:	cmp	fp, ip
   16b98:	bls	16bb8 <close_stdout@@Base+0x3914>
   16b9c:	adds	ip, ip, r4
   16ba0:	sub	r1, r2, #1
   16ba4:	bcs	16c04 <close_stdout@@Base+0x3960>
   16ba8:	cmp	fp, ip
   16bac:	subhi	r2, r2, #2
   16bb0:	addhi	ip, ip, r4
   16bb4:	bls	16c04 <close_stdout@@Base+0x3960>
   16bb8:	ldr	r0, [sp, #4]
   16bbc:	orr	r1, r2, r8, lsl #16
   16bc0:	rsb	fp, fp, ip
   16bc4:	umull	r2, r3, r1, r0
   16bc8:	cmp	fp, r3
   16bcc:	bcc	16bf0 <close_stdout@@Base+0x394c>
   16bd0:	movne	r4, #0
   16bd4:	moveq	r4, #1
   16bd8:	cmp	r2, r7, lsl r5
   16bdc:	movls	r4, #0
   16be0:	andhi	r4, r4, #1
   16be4:	cmp	r4, #0
   16be8:	moveq	r3, r1
   16bec:	beq	168b4 <close_stdout@@Base+0x3610>
   16bf0:	sub	r3, r1, #1
   16bf4:	mov	r4, #0
   16bf8:	b	168b4 <close_stdout@@Base+0x3610>
   16bfc:	mov	fp, r3
   16c00:	b	16990 <close_stdout@@Base+0x36ec>
   16c04:	mov	r2, r1
   16c08:	b	16bb8 <close_stdout@@Base+0x3914>
   16c0c:	mov	r8, r2
   16c10:	b	16b58 <close_stdout@@Base+0x38b4>
   16c14:	mov	r3, r2
   16c18:	b	16a74 <close_stdout@@Base+0x37d0>
   16c1c:	cmp	r3, #0
   16c20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c24:	mov	r6, r0
   16c28:	sub	sp, sp, #12
   16c2c:	mov	r5, r1
   16c30:	mov	r7, r0
   16c34:	mov	r4, r2
   16c38:	mov	r8, r1
   16c3c:	bne	16d1c <close_stdout@@Base+0x3a78>
   16c40:	cmp	r2, r1
   16c44:	bls	16d58 <close_stdout@@Base+0x3ab4>
   16c48:	clz	r3, r2
   16c4c:	cmp	r3, #0
   16c50:	rsbne	r8, r3, #32
   16c54:	lslne	r4, r2, r3
   16c58:	lsrne	r8, r0, r8
   16c5c:	lslne	r7, r0, r3
   16c60:	orrne	r8, r8, r1, lsl r3
   16c64:	lsr	r5, r4, #16
   16c68:	uxth	sl, r4
   16c6c:	mov	r1, r5
   16c70:	mov	r0, r8
   16c74:	bl	16108 <close_stdout@@Base+0x2e64>
   16c78:	mov	r1, r5
   16c7c:	mov	r9, r0
   16c80:	mov	r0, r8
   16c84:	bl	162f4 <close_stdout@@Base+0x3050>
   16c88:	mul	r0, sl, r9
   16c8c:	lsr	r3, r7, #16
   16c90:	orr	r1, r3, r1, lsl #16
   16c94:	cmp	r0, r1
   16c98:	bls	16cbc <close_stdout@@Base+0x3a18>
   16c9c:	adds	r1, r1, r4
   16ca0:	sub	r2, r9, #1
   16ca4:	bcs	16cb8 <close_stdout@@Base+0x3a14>
   16ca8:	cmp	r0, r1
   16cac:	subhi	r9, r9, #2
   16cb0:	addhi	r1, r1, r4
   16cb4:	bhi	16cbc <close_stdout@@Base+0x3a18>
   16cb8:	mov	r9, r2
   16cbc:	rsb	r8, r0, r1
   16cc0:	mov	r1, r5
   16cc4:	uxth	r7, r7
   16cc8:	mov	r0, r8
   16ccc:	bl	16108 <close_stdout@@Base+0x2e64>
   16cd0:	mov	r1, r5
   16cd4:	mov	r6, r0
   16cd8:	mov	r0, r8
   16cdc:	bl	162f4 <close_stdout@@Base+0x3050>
   16ce0:	mul	sl, sl, r6
   16ce4:	orr	r1, r7, r1, lsl #16
   16ce8:	cmp	sl, r1
   16cec:	bls	16d08 <close_stdout@@Base+0x3a64>
   16cf0:	adds	r4, r1, r4
   16cf4:	sub	r3, r6, #1
   16cf8:	bcs	17004 <close_stdout@@Base+0x3d60>
   16cfc:	cmp	sl, r4
   16d00:	subhi	r6, r6, #2
   16d04:	bls	17004 <close_stdout@@Base+0x3d60>
   16d08:	orr	r0, r6, r9, lsl #16
   16d0c:	mov	r6, #0
   16d10:	mov	r1, r6
   16d14:	add	sp, sp, #12
   16d18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d1c:	cmp	r3, r1
   16d20:	movhi	r6, #0
   16d24:	movhi	r0, r6
   16d28:	bhi	16d10 <close_stdout@@Base+0x3a6c>
   16d2c:	clz	r7, r3
   16d30:	cmp	r7, #0
   16d34:	bne	16e34 <close_stdout@@Base+0x3b90>
   16d38:	cmp	r3, r1
   16d3c:	cmpcs	r2, r6
   16d40:	movhi	r6, #0
   16d44:	movls	r6, #1
   16d48:	movls	r0, #1
   16d4c:	movls	r6, r7
   16d50:	movhi	r0, r6
   16d54:	b	16d10 <close_stdout@@Base+0x3a6c>
   16d58:	cmp	r2, #0
   16d5c:	bne	16d70 <close_stdout@@Base+0x3acc>
   16d60:	mov	r1, r2
   16d64:	mov	r0, #1
   16d68:	bl	16108 <close_stdout@@Base+0x2e64>
   16d6c:	mov	r4, r0
   16d70:	clz	r3, r4
   16d74:	cmp	r3, #0
   16d78:	bne	16f30 <close_stdout@@Base+0x3c8c>
   16d7c:	rsb	r5, r4, r5
   16d80:	lsr	r8, r4, #16
   16d84:	uxth	sl, r4
   16d88:	mov	r6, #1
   16d8c:	mov	r1, r8
   16d90:	mov	r0, r5
   16d94:	bl	16108 <close_stdout@@Base+0x2e64>
   16d98:	mov	r1, r8
   16d9c:	mov	r9, r0
   16da0:	mov	r0, r5
   16da4:	bl	162f4 <close_stdout@@Base+0x3050>
   16da8:	mul	r0, sl, r9
   16dac:	lsr	r3, r7, #16
   16db0:	orr	r1, r3, r1, lsl #16
   16db4:	cmp	r0, r1
   16db8:	bls	16dd8 <close_stdout@@Base+0x3b34>
   16dbc:	adds	r1, r1, r4
   16dc0:	sub	r2, r9, #1
   16dc4:	bcs	1700c <close_stdout@@Base+0x3d68>
   16dc8:	cmp	r0, r1
   16dcc:	subhi	r9, r9, #2
   16dd0:	addhi	r1, r1, r4
   16dd4:	bls	1700c <close_stdout@@Base+0x3d68>
   16dd8:	rsb	fp, r0, r1
   16ddc:	mov	r1, r8
   16de0:	uxth	r7, r7
   16de4:	mov	r0, fp
   16de8:	bl	16108 <close_stdout@@Base+0x2e64>
   16dec:	mov	r1, r8
   16df0:	mov	r5, r0
   16df4:	mov	r0, fp
   16df8:	bl	162f4 <close_stdout@@Base+0x3050>
   16dfc:	mul	sl, sl, r5
   16e00:	orr	r1, r7, r1, lsl #16
   16e04:	cmp	sl, r1
   16e08:	bls	16e24 <close_stdout@@Base+0x3b80>
   16e0c:	adds	r4, r1, r4
   16e10:	sub	r3, r5, #1
   16e14:	bcs	17014 <close_stdout@@Base+0x3d70>
   16e18:	cmp	sl, r4
   16e1c:	subhi	r5, r5, #2
   16e20:	bls	17014 <close_stdout@@Base+0x3d70>
   16e24:	orr	r0, r5, r9, lsl #16
   16e28:	mov	r1, r6
   16e2c:	add	sp, sp, #12
   16e30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e34:	rsb	r1, r7, #32
   16e38:	lsl	r0, r2, r7
   16e3c:	lsr	r2, r2, r1
   16e40:	lsr	fp, r5, r1
   16e44:	orr	r8, r2, r3, lsl r7
   16e48:	lsr	r1, r6, r1
   16e4c:	str	r0, [sp, #4]
   16e50:	orr	r5, r1, r5, lsl r7
   16e54:	lsr	r9, r8, #16
   16e58:	mov	r0, fp
   16e5c:	uxth	sl, r8
   16e60:	mov	r1, r9
   16e64:	bl	16108 <close_stdout@@Base+0x2e64>
   16e68:	mov	r1, r9
   16e6c:	mov	r4, r0
   16e70:	mov	r0, fp
   16e74:	bl	162f4 <close_stdout@@Base+0x3050>
   16e78:	mul	r0, sl, r4
   16e7c:	lsr	ip, r5, #16
   16e80:	orr	r1, ip, r1, lsl #16
   16e84:	cmp	r0, r1
   16e88:	bls	16e9c <close_stdout@@Base+0x3bf8>
   16e8c:	adds	r1, r1, r8
   16e90:	sub	r2, r4, #1
   16e94:	bcc	17030 <close_stdout@@Base+0x3d8c>
   16e98:	mov	r4, r2
   16e9c:	rsb	ip, r0, r1
   16ea0:	mov	r1, r9
   16ea4:	str	ip, [sp]
   16ea8:	uxth	r5, r5
   16eac:	mov	r0, ip
   16eb0:	bl	16108 <close_stdout@@Base+0x2e64>
   16eb4:	ldr	ip, [sp]
   16eb8:	mov	r1, r9
   16ebc:	mov	fp, r0
   16ec0:	mov	r0, ip
   16ec4:	bl	162f4 <close_stdout@@Base+0x3050>
   16ec8:	mul	sl, sl, fp
   16ecc:	orr	r1, r5, r1, lsl #16
   16ed0:	cmp	sl, r1
   16ed4:	bls	16ee8 <close_stdout@@Base+0x3c44>
   16ed8:	adds	r1, r1, r8
   16edc:	sub	r2, fp, #1
   16ee0:	bcc	1701c <close_stdout@@Base+0x3d78>
   16ee4:	mov	fp, r2
   16ee8:	ldr	r3, [sp, #4]
   16eec:	orr	r0, fp, r4, lsl #16
   16ef0:	rsb	sl, sl, r1
   16ef4:	umull	r4, r5, r0, r3
   16ef8:	cmp	sl, r5
   16efc:	bcc	16f1c <close_stdout@@Base+0x3c78>
   16f00:	movne	r3, #0
   16f04:	moveq	r3, #1
   16f08:	cmp	r4, r6, lsl r7
   16f0c:	movls	r6, #0
   16f10:	andhi	r6, r3, #1
   16f14:	cmp	r6, #0
   16f18:	beq	16d10 <close_stdout@@Base+0x3a6c>
   16f1c:	mov	r6, #0
   16f20:	sub	r0, r0, #1
   16f24:	mov	r1, r6
   16f28:	add	sp, sp, #12
   16f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f30:	lsl	r4, r4, r3
   16f34:	rsb	r9, r3, #32
   16f38:	lsr	r2, r5, r9
   16f3c:	lsr	r9, r6, r9
   16f40:	lsr	r8, r4, #16
   16f44:	orr	r9, r9, r5, lsl r3
   16f48:	mov	r0, r2
   16f4c:	lsl	r7, r6, r3
   16f50:	mov	r1, r8
   16f54:	str	r2, [sp]
   16f58:	bl	16108 <close_stdout@@Base+0x2e64>
   16f5c:	ldr	r2, [sp]
   16f60:	mov	r1, r8
   16f64:	uxth	sl, r4
   16f68:	mov	fp, r0
   16f6c:	mov	r0, r2
   16f70:	bl	162f4 <close_stdout@@Base+0x3050>
   16f74:	mul	r0, sl, fp
   16f78:	lsr	r3, r9, #16
   16f7c:	orr	r1, r3, r1, lsl #16
   16f80:	cmp	r0, r1
   16f84:	bls	16fa4 <close_stdout@@Base+0x3d00>
   16f88:	adds	r1, r1, r4
   16f8c:	sub	r3, fp, #1
   16f90:	bcs	17044 <close_stdout@@Base+0x3da0>
   16f94:	cmp	r0, r1
   16f98:	subhi	fp, fp, #2
   16f9c:	addhi	r1, r1, r4
   16fa0:	bls	17044 <close_stdout@@Base+0x3da0>
   16fa4:	rsb	r5, r0, r1
   16fa8:	mov	r1, r8
   16fac:	uxth	r9, r9
   16fb0:	mov	r0, r5
   16fb4:	bl	16108 <close_stdout@@Base+0x2e64>
   16fb8:	mov	r1, r8
   16fbc:	mov	r6, r0
   16fc0:	mov	r0, r5
   16fc4:	bl	162f4 <close_stdout@@Base+0x3050>
   16fc8:	mul	r5, sl, r6
   16fcc:	orr	r1, r9, r1, lsl #16
   16fd0:	cmp	r5, r1
   16fd4:	bls	16ff8 <close_stdout@@Base+0x3d54>
   16fd8:	adds	r1, r1, r4
   16fdc:	sub	r3, r6, #1
   16fe0:	bcs	16ff4 <close_stdout@@Base+0x3d50>
   16fe4:	cmp	r5, r1
   16fe8:	subhi	r6, r6, #2
   16fec:	addhi	r1, r1, r4
   16ff0:	bhi	16ff8 <close_stdout@@Base+0x3d54>
   16ff4:	mov	r6, r3
   16ff8:	rsb	r5, r5, r1
   16ffc:	orr	r6, r6, fp, lsl #16
   17000:	b	16d8c <close_stdout@@Base+0x3ae8>
   17004:	mov	r6, r3
   17008:	b	16d08 <close_stdout@@Base+0x3a64>
   1700c:	mov	r9, r2
   17010:	b	16dd8 <close_stdout@@Base+0x3b34>
   17014:	mov	r5, r3
   17018:	b	16e24 <close_stdout@@Base+0x3b80>
   1701c:	cmp	sl, r1
   17020:	subhi	fp, fp, #2
   17024:	addhi	r1, r1, r8
   17028:	bhi	16ee8 <close_stdout@@Base+0x3c44>
   1702c:	b	16ee4 <close_stdout@@Base+0x3c40>
   17030:	cmp	r0, r1
   17034:	subhi	r4, r4, #2
   17038:	addhi	r1, r1, r8
   1703c:	bhi	16e9c <close_stdout@@Base+0x3bf8>
   17040:	b	16e98 <close_stdout@@Base+0x3bf4>
   17044:	mov	fp, r3
   17048:	b	16fa4 <close_stdout@@Base+0x3d00>
   1704c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   17050:	mov	r7, r0
   17054:	ldr	r6, [pc, #76]	; 170a8 <close_stdout@@Base+0x3e04>
   17058:	mov	r8, r1
   1705c:	ldr	r5, [pc, #72]	; 170ac <close_stdout@@Base+0x3e08>
   17060:	mov	r9, r2
   17064:	add	r6, pc, r6
   17068:	bl	1121c <fdopen@plt-0x20>
   1706c:	add	r5, pc, r5
   17070:	rsb	r6, r5, r6
   17074:	asrs	r6, r6, #2
   17078:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1707c:	sub	r5, r5, #4
   17080:	mov	r4, #0
   17084:	add	r4, r4, #1
   17088:	ldr	r3, [r5, #4]!
   1708c:	mov	r0, r7
   17090:	mov	r1, r8
   17094:	mov	r2, r9
   17098:	blx	r3
   1709c:	cmp	r4, r6
   170a0:	bne	17084 <close_stdout@@Base+0x3de0>
   170a4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   170a8:	andeq	r1, r1, r0, ror #27
   170ac:	ldrdeq	r1, [r1], -r4
   170b0:	bx	lr
   170b4:	ldr	r3, [pc, #28]	; 170d8 <close_stdout@@Base+0x3e34>
   170b8:	mov	r1, #0
   170bc:	ldr	r2, [pc, #24]	; 170dc <close_stdout@@Base+0x3e38>
   170c0:	add	r3, pc, r3
   170c4:	ldr	r3, [r3, r2]
   170c8:	cmp	r3, #0
   170cc:	ldrne	r2, [r3]
   170d0:	moveq	r2, r3
   170d4:	b	1147c <__cxa_atexit@plt>
   170d8:	andeq	r1, r1, r8, lsr pc
   170dc:	andeq	r0, r0, r4, asr r1

Disassembly of section .fini:

000170e0 <.fini>:
   170e0:	push	{r3, lr}
   170e4:	pop	{r3, pc}
