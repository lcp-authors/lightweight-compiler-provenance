
centos-preinstalled/nl-list-caches:     file format elf32-littlearm


Disassembly of section .init:

00010698 <.init>:
   10698:	push	{r3, lr}
   1069c:	bl	107f4 <exit@plt+0xac>
   106a0:	pop	{r3, pc}

Disassembly of section .plt:

000106a4 <abort@plt-0x14>:
   106a4:	push	{lr}		; (str lr, [sp, #-4]!)
   106a8:	ldr	lr, [pc, #4]	; 106b4 <abort@plt-0x4>
   106ac:	add	lr, pc, lr
   106b0:	ldr	pc, [lr, #8]!
   106b4:	andeq	r0, r1, ip, asr #18

000106b8 <abort@plt>:
   106b8:	add	ip, pc, #0, 12
   106bc:	add	ip, ip, #16, 20	; 0x10000
   106c0:	ldr	pc, [ip, #2380]!	; 0x94c

000106c4 <__libc_start_main@plt>:
   106c4:	add	ip, pc, #0, 12
   106c8:	add	ip, ip, #16, 20	; 0x10000
   106cc:	ldr	pc, [ip, #2372]!	; 0x944

000106d0 <__gmon_start__@plt>:
   106d0:	add	ip, pc, #0, 12
   106d4:	add	ip, ip, #16, 20	; 0x10000
   106d8:	ldr	pc, [ip, #2364]!	; 0x93c

000106dc <__printf_chk@plt>:
   106dc:	add	ip, pc, #0, 12
   106e0:	add	ip, ip, #16, 20	; 0x10000
   106e4:	ldr	pc, [ip, #2356]!	; 0x934

000106e8 <putchar@plt>:
   106e8:	add	ip, pc, #0, 12
   106ec:	add	ip, ip, #16, 20	; 0x10000
   106f0:	ldr	pc, [ip, #2348]!	; 0x92c

000106f4 <strcasecmp@plt>:
   106f4:	add	ip, pc, #0, 12
   106f8:	add	ip, ip, #16, 20	; 0x10000
   106fc:	ldr	pc, [ip, #2340]!	; 0x924

00010700 <memset@plt>:
   10700:	add	ip, pc, #0, 12
   10704:	add	ip, ip, #16, 20	; 0x10000
   10708:	ldr	pc, [ip, #2332]!	; 0x91c

0001070c <fwrite@plt>:
   1070c:	add	ip, pc, #0, 12
   10710:	add	ip, ip, #16, 20	; 0x10000
   10714:	ldr	pc, [ip, #2324]!	; 0x914

00010718 <nl_nlfamily2str@plt>:
   10718:	add	ip, pc, #0, 12
   1071c:	add	ip, ip, #16, 20	; 0x10000
   10720:	ldr	pc, [ip, #2316]!	; 0x90c

00010724 <__stack_chk_fail@plt>:
   10724:	add	ip, pc, #0, 12
   10728:	add	ip, ip, #16, 20	; 0x10000
   1072c:	ldr	pc, [ip, #2308]!	; 0x904

00010730 <nl_cache_ops_foreach@plt>:
   10730:	add	ip, pc, #0, 12
   10734:	add	ip, ip, #16, 20	; 0x10000
   10738:	ldr	pc, [ip, #2300]!	; 0x8fc

0001073c <puts@plt>:
   1073c:	add	ip, pc, #0, 12
   10740:	add	ip, ip, #16, 20	; 0x10000
   10744:	ldr	pc, [ip, #2292]!	; 0x8f4

00010748 <exit@plt>:
   10748:	add	ip, pc, #0, 12
   1074c:	add	ip, ip, #16, 20	; 0x10000
   10750:	ldr	pc, [ip, #2284]!	; 0x8ec

Disassembly of section .text:

00010754 <.text>:
   10754:	cmp	r0, #1
   10758:	push	{r3, lr}
   1075c:	ble	10778 <exit@plt+0x30>
   10760:	ldr	r0, [r1, #4]
   10764:	movw	r1, #3608	; 0xe18
   10768:	movt	r1, #1
   1076c:	bl	106f4 <strcasecmp@plt>
   10770:	cmp	r0, #0
   10774:	beq	10790 <exit@plt+0x48>
   10778:	mov	r1, #0
   1077c:	movw	r0, #2284	; 0x8ec
   10780:	movt	r0, #1
   10784:	bl	10730 <nl_cache_ops_foreach@plt>
   10788:	mov	r0, #0
   1078c:	pop	{r3, pc}
   10790:	movw	r3, #4176	; 0x1050
   10794:	movt	r3, #2
   10798:	movw	r0, #3612	; 0xe1c
   1079c:	mov	r1, #1
   107a0:	ldr	r3, [r3]
   107a4:	movt	r0, #1
   107a8:	mov	r2, #22
   107ac:	bl	1070c <fwrite@plt>
   107b0:	mov	r0, #1
   107b4:	bl	10748 <exit@plt>
   107b8:	mov	fp, #0
   107bc:	mov	lr, #0
   107c0:	pop	{r1}		; (ldr r1, [sp], #4)
   107c4:	mov	r2, sp
   107c8:	push	{r2}		; (str r2, [sp, #-4]!)
   107cc:	push	{r0}		; (str r0, [sp, #-4]!)
   107d0:	ldr	ip, [pc, #16]	; 107e8 <exit@plt+0xa0>
   107d4:	push	{ip}		; (str ip, [sp, #-4]!)
   107d8:	ldr	r0, [pc, #12]	; 107ec <exit@plt+0xa4>
   107dc:	ldr	r3, [pc, #12]	; 107f0 <exit@plt+0xa8>
   107e0:	bl	106c4 <__libc_start_main@plt>
   107e4:	bl	106b8 <abort@plt>
   107e8:	strdeq	r0, [r1], -r8
   107ec:	andeq	r0, r1, r4, asr r7
   107f0:	muleq	r1, r4, fp
   107f4:	ldr	r3, [pc, #20]	; 10810 <exit@plt+0xc8>
   107f8:	ldr	r2, [pc, #20]	; 10814 <exit@plt+0xcc>
   107fc:	add	r3, pc, r3
   10800:	ldr	r2, [r3, r2]
   10804:	cmp	r2, #0
   10808:	bxeq	lr
   1080c:	b	106d0 <__gmon_start__@plt>
   10810:	strdeq	r0, [r1], -ip
   10814:	andeq	r0, r0, r0, asr #32
   10818:	push	{r3, lr}
   1081c:	movw	r0, #4168	; 0x1048
   10820:	ldr	r3, [pc, #36]	; 1084c <exit@plt+0x104>
   10824:	movt	r0, #2
   10828:	rsb	r3, r0, r3
   1082c:	cmp	r3, #6
   10830:	popls	{r3, pc}
   10834:	movw	r3, #0
   10838:	movt	r3, #0
   1083c:	cmp	r3, #0
   10840:	popeq	{r3, pc}
   10844:	blx	r3
   10848:	pop	{r3, pc}
   1084c:	andeq	r1, r2, fp, asr #32
   10850:	push	{r3, lr}
   10854:	movw	r0, #4168	; 0x1048
   10858:	movw	r3, #4168	; 0x1048
   1085c:	movt	r0, #2
   10860:	movt	r3, #2
   10864:	rsb	r3, r0, r3
   10868:	asr	r3, r3, #2
   1086c:	add	r3, r3, r3, lsr #31
   10870:	asrs	r1, r3, #1
   10874:	popeq	{r3, pc}
   10878:	movw	r2, #0
   1087c:	movt	r2, #0
   10880:	cmp	r2, #0
   10884:	popeq	{r3, pc}
   10888:	blx	r2
   1088c:	pop	{r3, pc}
   10890:	push	{r4, lr}
   10894:	movw	r4, #4180	; 0x1054
   10898:	movt	r4, #2
   1089c:	ldrb	r3, [r4]
   108a0:	cmp	r3, #0
   108a4:	popne	{r4, pc}
   108a8:	bl	10818 <exit@plt+0xd0>
   108ac:	mov	r3, #1
   108b0:	strb	r3, [r4]
   108b4:	pop	{r4, pc}
   108b8:	movw	r0, #3772	; 0xebc
   108bc:	movt	r0, #2
   108c0:	push	{r3, lr}
   108c4:	ldr	r3, [r0]
   108c8:	cmp	r3, #0
   108cc:	beq	108e4 <exit@plt+0x19c>
   108d0:	movw	r3, #0
   108d4:	movt	r3, #0
   108d8:	cmp	r3, #0
   108dc:	beq	108e4 <exit@plt+0x19c>
   108e0:	blx	r3
   108e4:	pop	{r3, lr}
   108e8:	b	10850 <exit@plt+0x108>
   108ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   108f0:	movw	r9, #4168	; 0x1048
   108f4:	movt	r9, #2
   108f8:	sub	sp, sp, #116	; 0x74
   108fc:	mov	r7, r0
   10900:	mov	r2, #64	; 0x40
   10904:	ldr	r3, [r9]
   10908:	add	r1, sp, #44	; 0x2c
   1090c:	ldr	r0, [r0, #8]
   10910:	movw	r6, #3100	; 0xc1c
   10914:	ldr	r4, [r7, #4]
   10918:	movt	r6, #1
   1091c:	ldr	r8, [r7]
   10920:	movw	r5, #3096	; 0xc18
   10924:	str	r3, [sp, #108]	; 0x6c
   10928:	bl	10718 <nl_nlfamily2str@plt>
   1092c:	ldr	r1, [r7, #28]
   10930:	movt	r5, #1
   10934:	ldr	ip, [r7, #32]
   10938:	mov	r3, r4
   1093c:	cmp	r1, #0
   10940:	mov	r2, r8
   10944:	moveq	r1, r6
   10948:	movne	r1, r5
   1094c:	cmp	ip, #0
   10950:	str	r1, [sp, #4]
   10954:	movw	r1, #3108	; 0xc24
   10958:	movt	r1, #1
   1095c:	moveq	ip, r6
   10960:	movne	ip, r5
   10964:	str	ip, [sp, #8]
   10968:	str	r0, [sp]
   1096c:	mov	r0, #1
   10970:	bl	106dc <__printf_chk@plt>
   10974:	ldr	r4, [r7, #76]	; 0x4c
   10978:	cmp	r4, #0
   1097c:	beq	10a88 <exit@plt+0x340>
   10980:	ldr	ip, [r4, #12]
   10984:	movw	r3, #3084	; 0xc0c
   10988:	ldr	fp, [r4, #16]
   1098c:	movt	r3, #1
   10990:	cmp	ip, #0
   10994:	ldr	sl, [r4, #20]
   10998:	ldm	r3, {r0, r1, r2}
   1099c:	moveq	r3, r6
   109a0:	movne	r3, r5
   109a4:	cmp	fp, #0
   109a8:	ldr	lr, [r4, #36]	; 0x24
   109ac:	add	r8, sp, #32
   109b0:	moveq	fp, r6
   109b4:	movne	fp, r5
   109b8:	cmp	sl, #0
   109bc:	ldr	ip, [r4, #48]	; 0x30
   109c0:	stm	r8, {r0, r1, r2}
   109c4:	moveq	sl, r6
   109c8:	movne	sl, r5
   109cc:	cmp	lr, #0
   109d0:	ldr	r0, [r4, #8]
   109d4:	movne	r6, r5
   109d8:	cmp	ip, #0
   109dc:	str	r6, [sp, #28]
   109e0:	ldr	r5, [r4, #4]
   109e4:	ldr	r6, [r4]
   109e8:	beq	10b70 <exit@plt+0x428>
   109ec:	str	r3, [sp, #24]
   109f0:	add	r1, sp, #44	; 0x2c
   109f4:	mov	r2, #64	; 0x40
   109f8:	blx	ip
   109fc:	ldr	r3, [sp, #24]
   10a00:	ldr	ip, [sp, #28]
   10a04:	mov	r2, r6
   10a08:	str	r3, [sp]
   10a0c:	movw	r1, #3196	; 0xc7c
   10a10:	mov	r3, r5
   10a14:	str	sl, [sp, #8]
   10a18:	str	r0, [sp, #16]
   10a1c:	movt	r1, #1
   10a20:	str	fp, [sp, #4]
   10a24:	mov	r0, #1
   10a28:	str	ip, [sp, #12]
   10a2c:	movw	sl, #3104	; 0xc20
   10a30:	bl	106dc <__printf_chk@plt>
   10a34:	movw	r6, #3384	; 0xd38
   10a38:	movt	sl, #1
   10a3c:	movt	r6, #1
   10a40:	mov	r5, #0
   10a44:	ldr	r3, [r4, #24]
   10a48:	cmp	r3, #0
   10a4c:	beq	10a70 <exit@plt+0x328>
   10a50:	cmp	r5, #0
   10a54:	movw	r1, #3388	; 0xd3c
   10a58:	mov	r0, #1
   10a5c:	movt	r1, #1
   10a60:	movne	r2, sl
   10a64:	moveq	r2, r6
   10a68:	ldr	r3, [r8, r5, lsl #2]
   10a6c:	bl	106dc <__printf_chk@plt>
   10a70:	add	r5, r5, #1
   10a74:	add	r4, r4, #4
   10a78:	cmp	r5, #3
   10a7c:	bne	10a44 <exit@plt+0x2fc>
   10a80:	mov	r0, #10
   10a84:	bl	106e8 <putchar@plt>
   10a88:	ldr	r5, [r7, #88]	; 0x58
   10a8c:	cmp	r5, #0
   10a90:	beq	10ac0 <exit@plt+0x378>
   10a94:	ldr	ip, [r5, #4]
   10a98:	movw	r1, #3396	; 0xd44
   10a9c:	ldr	r3, [r5]
   10aa0:	movt	r1, #1
   10aa4:	ldr	r2, [r5, #8]
   10aa8:	mov	r0, #1
   10aac:	str	ip, [sp]
   10ab0:	bl	106dc <__printf_chk@plt>
   10ab4:	ldr	r3, [r5, #20]
   10ab8:	cmp	r3, #0
   10abc:	bne	10ad8 <exit@plt+0x390>
   10ac0:	ldr	r2, [sp, #108]	; 0x6c
   10ac4:	ldr	r3, [r9]
   10ac8:	cmp	r2, r3
   10acc:	bne	10b90 <exit@plt+0x448>
   10ad0:	add	sp, sp, #116	; 0x74
   10ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10ad8:	movw	r0, #3460	; 0xd84
   10adc:	movt	r0, #1
   10ae0:	bl	1073c <puts@plt>
   10ae4:	ldr	r3, [r5, #20]
   10ae8:	cmp	r3, #0
   10aec:	ble	10ac0 <exit@plt+0x378>
   10af0:	mov	r4, #0
   10af4:	movw	r8, #3100	; 0xc1c
   10af8:	movw	r7, #3096	; 0xc18
   10afc:	movt	r8, #1
   10b00:	movt	r7, #1
   10b04:	mov	r6, r4
   10b08:	ldr	r3, [r5, #16]
   10b0c:	mov	r0, #1
   10b10:	movw	r1, #3476	; 0xd94
   10b14:	movt	r1, #1
   10b18:	add	ip, r3, r4
   10b1c:	add	r6, r6, r0
   10b20:	ldr	r3, [r3, r4]
   10b24:	add	r4, r4, #20
   10b28:	ldr	lr, [ip, #12]
   10b2c:	ldr	r2, [ip, #4]
   10b30:	ldr	sl, [ip, #8]
   10b34:	cmp	lr, #0
   10b38:	ldr	ip, [ip, #16]
   10b3c:	moveq	lr, r8
   10b40:	movne	lr, r7
   10b44:	cmp	ip, #0
   10b48:	str	sl, [sp]
   10b4c:	str	lr, [sp, #4]
   10b50:	moveq	ip, r8
   10b54:	movne	ip, r7
   10b58:	str	ip, [sp, #8]
   10b5c:	bl	106dc <__printf_chk@plt>
   10b60:	ldr	r3, [r5, #20]
   10b64:	cmp	r3, r6
   10b68:	bgt	10b08 <exit@plt+0x3c0>
   10b6c:	b	10ac0 <exit@plt+0x378>
   10b70:	mov	r1, ip
   10b74:	add	r0, sp, #44	; 0x2c
   10b78:	mov	r2, #64	; 0x40
   10b7c:	str	r3, [sp, #24]
   10b80:	bl	10700 <memset@plt>
   10b84:	add	r0, sp, #44	; 0x2c
   10b88:	ldr	r3, [sp, #24]
   10b8c:	b	10a00 <exit@plt+0x2b8>
   10b90:	bl	10724 <__stack_chk_fail@plt>
   10b94:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10b98:	mov	r7, r0
   10b9c:	ldr	r6, [pc, #76]	; 10bf0 <exit@plt+0x4a8>
   10ba0:	mov	r8, r1
   10ba4:	ldr	r5, [pc, #72]	; 10bf4 <exit@plt+0x4ac>
   10ba8:	mov	r9, r2
   10bac:	add	r6, pc, r6
   10bb0:	bl	10698 <abort@plt-0x20>
   10bb4:	add	r5, pc, r5
   10bb8:	rsb	r6, r5, r6
   10bbc:	asrs	r6, r6, #2
   10bc0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10bc4:	sub	r5, r5, #4
   10bc8:	mov	r4, #0
   10bcc:	add	r4, r4, #1
   10bd0:	ldr	r3, [r5, #4]!
   10bd4:	mov	r0, r7
   10bd8:	mov	r1, r8
   10bdc:	mov	r2, r9
   10be0:	blx	r3
   10be4:	cmp	r4, r6
   10be8:	bne	10bcc <exit@plt+0x484>
   10bec:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10bf0:	andeq	r0, r1, r4, lsl #6
   10bf4:	strdeq	r0, [r1], -r8
   10bf8:	bx	lr

Disassembly of section .fini:

00010bfc <.fini>:
   10bfc:	push	{r3, lr}
   10c00:	pop	{r3, pc}
