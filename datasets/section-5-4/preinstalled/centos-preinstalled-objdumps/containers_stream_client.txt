
centos-preinstalled/containers_stream_client:     file format elf32-littlearm


Disassembly of section .init:

000109ec <_init@@Base>:
   109ec:	push	{r3, lr}
   109f0:	bl	10d38 <_start@@Base+0x3c>
   109f4:	pop	{r3, pc}

Disassembly of section .plt:

000109f8 <_IO_getc@plt-0x14>:
   109f8:	push	{lr}		; (str lr, [sp, #-4]!)
   109fc:	ldr	lr, [pc, #4]	; 10a08 <_init@@Base+0x1c>
   10a00:	add	lr, pc, lr
   10a04:	ldr	pc, [lr, #8]!
   10a08:	strdeq	r1, [r1], -r8

00010a0c <_IO_getc@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #69632	; 0x11000
   10a14:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a18 <select@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #69632	; 0x11000
   10a20:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a24 <__stack_chk_fail@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #69632	; 0x11000
   10a2c:	ldr	pc, [ip, #1512]!	; 0x5e8

00010a30 <vc_container_net_write@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #69632	; 0x11000
   10a38:	ldr	pc, [ip, #1504]!	; 0x5e0

00010a3c <vc_container_net_control@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #69632	; 0x11000
   10a44:	ldr	pc, [ip, #1496]!	; 0x5d8

00010a48 <_IO_putc@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #69632	; 0x11000
   10a50:	ldr	pc, [ip, #1488]!	; 0x5d0

00010a54 <tcsetattr@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #69632	; 0x11000
   10a5c:	ldr	pc, [ip, #1480]!	; 0x5c8

00010a60 <vc_container_net_read@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #69632	; 0x11000
   10a68:	ldr	pc, [ip, #1472]!	; 0x5c0

00010a6c <__libc_start_main@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #69632	; 0x11000
   10a74:	ldr	pc, [ip, #1464]!	; 0x5b8

00010a78 <__gmon_start__@plt>:
   10a78:	add	ip, pc, #0, 12
   10a7c:	add	ip, ip, #69632	; 0x11000
   10a80:	ldr	pc, [ip, #1456]!	; 0x5b0

00010a84 <vc_container_net_status@plt>:
   10a84:	add	ip, pc, #0, 12
   10a88:	add	ip, ip, #69632	; 0x11000
   10a8c:	ldr	pc, [ip, #1448]!	; 0x5a8

00010a90 <__printf_chk@plt>:
   10a90:	add	ip, pc, #0, 12
   10a94:	add	ip, ip, #69632	; 0x11000
   10a98:	ldr	pc, [ip, #1440]!	; 0x5a0

00010a9c <vc_container_net_open@plt>:
   10a9c:	add	ip, pc, #0, 12
   10aa0:	add	ip, ip, #69632	; 0x11000
   10aa4:	ldr	pc, [ip, #1432]!	; 0x598

00010aa8 <vc_container_net_close@plt>:
   10aa8:	add	ip, pc, #0, 12
   10aac:	add	ip, ip, #69632	; 0x11000
   10ab0:	ldr	pc, [ip, #1424]!	; 0x590

00010ab4 <abort@plt>:
   10ab4:	add	ip, pc, #0, 12
   10ab8:	add	ip, ip, #69632	; 0x11000
   10abc:	ldr	pc, [ip, #1416]!	; 0x588

00010ac0 <tcgetattr@plt>:
   10ac0:	add	ip, pc, #0, 12
   10ac4:	add	ip, ip, #69632	; 0x11000
   10ac8:	ldr	pc, [ip, #1408]!	; 0x580

Disassembly of section .text:

00010acc <main@@Base>:
   10acc:	ldr	r3, [pc, #528]	; 10ce4 <main@@Base+0x218>
   10ad0:	cmp	r0, #2
   10ad4:	ldr	r2, [pc, #524]	; 10ce8 <main@@Base+0x21c>
   10ad8:	add	r3, pc, r3
   10adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10ae0:	sub	sp, sp, #2064	; 0x810
   10ae4:	ldr	r2, [r3, r2]
   10ae8:	sub	sp, sp, #4
   10aec:	ldr	r3, [r2]
   10af0:	str	r2, [sp]
   10af4:	str	r3, [sp, #2060]	; 0x80c
   10af8:	ble	10ca8 <main@@Base+0x1dc>
   10afc:	ldr	r0, [r1, #4]
   10b00:	mov	r2, #1
   10b04:	ldr	r1, [r1, #8]
   10b08:	add	r3, sp, #8
   10b0c:	bl	10a9c <vc_container_net_open@plt>
   10b10:	subs	r5, r0, #0
   10b14:	beq	10cc4 <main@@Base+0x1f8>
   10b18:	mov	r1, #2
   10b1c:	mov	r2, #33	; 0x21
   10b20:	bl	10e30 <_start@@Base+0x134>
   10b24:	mov	r0, #1
   10b28:	bl	10e94 <nb_set_nonblocking_input@@Base>
   10b2c:	ldr	r3, [pc, #440]	; 10cec <main@@Base+0x220>
   10b30:	add	r9, sp, #1040	; 0x410
   10b34:	add	r6, sp, #12
   10b38:	add	r3, pc, r3
   10b3c:	str	r3, [sp, #4]
   10b40:	bl	10f14 <nb_char_available@@Base>
   10b44:	sub	r8, r9, #4
   10b48:	mov	r4, #0
   10b4c:	cmp	r0, #0
   10b50:	beq	10bd4 <main@@Base+0x108>
   10b54:	bl	10fac <nb_get_char@@Base>
   10b58:	cmp	r0, #26
   10b5c:	beq	10c04 <main@@Base+0x138>
   10b60:	add	r1, sp, #2064	; 0x810
   10b64:	cmp	r0, #13
   10b68:	add	r3, r1, r4
   10b6c:	add	r7, r4, #1
   10b70:	strb	r0, [r3, #-2052]	; 0xfffff7fc
   10b74:	beq	10c38 <main@@Base+0x16c>
   10b78:	movw	r3, #1023	; 0x3ff
   10b7c:	cmp	r7, r3
   10b80:	cmpne	r0, #10
   10b84:	movne	r4, r7
   10b88:	movne	r7, #1
   10b8c:	beq	10c54 <main@@Base+0x188>
   10b90:	mov	r0, r5
   10b94:	mov	r1, r8
   10b98:	movw	r2, #1023	; 0x3ff
   10b9c:	bl	10a60 <vc_container_net_read@plt>
   10ba0:	cmp	r0, #0
   10ba4:	beq	10bdc <main@@Base+0x110>
   10ba8:	sub	fp, r9, #5
   10bac:	mov	sl, r0
   10bb0:	ldrb	r0, [fp, #1]!
   10bb4:	bl	10fd8 <nb_put_char@@Base>
   10bb8:	subs	sl, sl, #1
   10bbc:	bne	10bb0 <main@@Base+0xe4>
   10bc0:	cmp	r7, #0
   10bc4:	beq	10c04 <main@@Base+0x138>
   10bc8:	bl	10f14 <nb_char_available@@Base>
   10bcc:	cmp	r0, #0
   10bd0:	bne	10b54 <main@@Base+0x88>
   10bd4:	mov	r7, #1
   10bd8:	b	10b90 <main@@Base+0xc4>
   10bdc:	mov	r0, r5
   10be0:	bl	10a84 <vc_container_net_status@plt>
   10be4:	cmp	r0, #0
   10be8:	cmpne	r0, #14
   10bec:	mov	r2, r0
   10bf0:	beq	10bc0 <main@@Base+0xf4>
   10bf4:	ldr	r1, [pc, #244]	; 10cf0 <main@@Base+0x224>
   10bf8:	mov	r0, #1
   10bfc:	add	r1, pc, r1
   10c00:	bl	10a90 <__printf_chk@plt>
   10c04:	mov	r0, #0
   10c08:	bl	10e94 <nb_set_nonblocking_input@@Base>
   10c0c:	mov	r0, r5
   10c10:	bl	10aa8 <vc_container_net_close@plt>
   10c14:	mov	r0, #0
   10c18:	ldr	r1, [sp]
   10c1c:	ldr	r2, [sp, #2060]	; 0x80c
   10c20:	ldr	r3, [r1]
   10c24:	cmp	r2, r3
   10c28:	bne	10ce0 <main@@Base+0x214>
   10c2c:	add	sp, sp, #2064	; 0x810
   10c30:	add	sp, sp, #4
   10c34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10c38:	mov	r0, #10
   10c3c:	bl	10fd8 <nb_put_char@@Base>
   10c40:	add	r2, sp, #2064	; 0x810
   10c44:	add	r3, r2, r7
   10c48:	add	r7, r4, #2
   10c4c:	mov	r2, #10
   10c50:	strb	r2, [r3, #-2052]	; 0xfffff7fc
   10c54:	mov	r4, r7
   10c58:	mov	r7, #0
   10c5c:	mov	r0, r5
   10c60:	add	r1, r6, r7
   10c64:	mov	r2, r4
   10c68:	bl	10a30 <vc_container_net_write@plt>
   10c6c:	subs	r3, r0, #0
   10c70:	beq	10c84 <main@@Base+0x1b8>
   10c74:	subs	r4, r4, r3
   10c78:	add	r7, r7, r3
   10c7c:	bne	10c5c <main@@Base+0x190>
   10c80:	b	10bd4 <main@@Base+0x108>
   10c84:	mov	r0, r5
   10c88:	mov	r4, r3
   10c8c:	bl	10a84 <vc_container_net_status@plt>
   10c90:	ldr	r1, [sp, #4]
   10c94:	mov	r7, r4
   10c98:	mov	r2, r0
   10c9c:	mov	r0, #1
   10ca0:	bl	10a90 <__printf_chk@plt>
   10ca4:	b	10b90 <main@@Base+0xc4>
   10ca8:	ldr	r2, [r1]
   10cac:	mov	r0, #1
   10cb0:	ldr	r1, [pc, #60]	; 10cf4 <main@@Base+0x228>
   10cb4:	add	r1, pc, r1
   10cb8:	bl	10a90 <__printf_chk@plt>
   10cbc:	mov	r0, #1
   10cc0:	b	10c18 <main@@Base+0x14c>
   10cc4:	ldr	r1, [pc, #44]	; 10cf8 <main@@Base+0x22c>
   10cc8:	mov	r0, #1
   10ccc:	ldr	r2, [sp, #8]
   10cd0:	add	r1, pc, r1
   10cd4:	bl	10a90 <__printf_chk@plt>
   10cd8:	mov	r0, #2
   10cdc:	b	10c18 <main@@Base+0x14c>
   10ce0:	bl	10a24 <__stack_chk_fail@plt>
   10ce4:	andeq	r1, r1, r0, lsr #10
   10ce8:	andeq	r0, r0, ip, asr #32
   10cec:	andeq	r0, r0, r0, ror r5
   10cf0:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   10cf4:			; <UNDEFINED> instruction: 0x000003b4
   10cf8:			; <UNDEFINED> instruction: 0x000003b4

00010cfc <_start@@Base>:
   10cfc:	mov	fp, #0
   10d00:	mov	lr, #0
   10d04:	pop	{r1}		; (ldr r1, [sp], #4)
   10d08:	mov	r2, sp
   10d0c:	push	{r2}		; (str r2, [sp, #-4]!)
   10d10:	push	{r0}		; (str r0, [sp, #-4]!)
   10d14:	ldr	ip, [pc, #16]	; 10d2c <_start@@Base+0x30>
   10d18:	push	{ip}		; (str ip, [sp, #-4]!)
   10d1c:	ldr	r0, [pc, #12]	; 10d30 <_start@@Base+0x34>
   10d20:	ldr	r3, [pc, #12]	; 10d34 <_start@@Base+0x38>
   10d24:	bl	10a6c <__libc_start_main@plt>
   10d28:	bl	10ab4 <abort@plt>
   10d2c:	andeq	r1, r1, ip, asr r0
   10d30:	andeq	r0, r1, ip, asr #21
   10d34:	strdeq	r0, [r1], -r8
   10d38:	ldr	r3, [pc, #20]	; 10d54 <_start@@Base+0x58>
   10d3c:	ldr	r2, [pc, #20]	; 10d58 <_start@@Base+0x5c>
   10d40:	add	r3, pc, r3
   10d44:	ldr	r2, [r3, r2]
   10d48:	cmp	r2, #0
   10d4c:	bxeq	lr
   10d50:	b	10a78 <__gmon_start__@plt>
   10d54:			; <UNDEFINED> instruction: 0x000112b8
   10d58:	andeq	r0, r0, r0, asr r0
   10d5c:	push	{r3, lr}
   10d60:	movw	r0, #8288	; 0x2060
   10d64:	ldr	r3, [pc, #36]	; 10d90 <_start@@Base+0x94>
   10d68:	movt	r0, #2
   10d6c:	rsb	r3, r0, r3
   10d70:	cmp	r3, #6
   10d74:	popls	{r3, pc}
   10d78:	movw	r3, #0
   10d7c:	movt	r3, #0
   10d80:	cmp	r3, #0
   10d84:	popeq	{r3, pc}
   10d88:	blx	r3
   10d8c:	pop	{r3, pc}
   10d90:	andeq	r2, r2, r3, rrx
   10d94:	push	{r3, lr}
   10d98:	movw	r0, #8288	; 0x2060
   10d9c:	movw	r3, #8288	; 0x2060
   10da0:	movt	r0, #2
   10da4:	movt	r3, #2
   10da8:	rsb	r3, r0, r3
   10dac:	asr	r3, r3, #2
   10db0:	add	r3, r3, r3, lsr #31
   10db4:	asrs	r1, r3, #1
   10db8:	popeq	{r3, pc}
   10dbc:	movw	r2, #0
   10dc0:	movt	r2, #0
   10dc4:	cmp	r2, #0
   10dc8:	popeq	{r3, pc}
   10dcc:	blx	r2
   10dd0:	pop	{r3, pc}
   10dd4:	push	{r4, lr}
   10dd8:	movw	r4, #8288	; 0x2060
   10ddc:	movt	r4, #2
   10de0:	ldrb	r3, [r4]
   10de4:	cmp	r3, #0
   10de8:	popne	{r4, pc}
   10dec:	bl	10d5c <_start@@Base+0x60>
   10df0:	mov	r3, #1
   10df4:	strb	r3, [r4]
   10df8:	pop	{r4, pc}
   10dfc:	movw	r0, #7892	; 0x1ed4
   10e00:	movt	r0, #2
   10e04:	push	{r3, lr}
   10e08:	ldr	r3, [r0]
   10e0c:	cmp	r3, #0
   10e10:	beq	10e28 <_start@@Base+0x12c>
   10e14:	movw	r3, #0
   10e18:	movt	r3, #0
   10e1c:	cmp	r3, #0
   10e20:	beq	10e28 <_start@@Base+0x12c>
   10e24:	blx	r3
   10e28:	pop	{r3, lr}
   10e2c:	b	10d94 <_start@@Base+0x98>
   10e30:	ldr	ip, [pc, #84]	; 10e8c <_start@@Base+0x190>
   10e34:	push	{r1, r2, r3}
   10e38:	add	ip, pc, ip
   10e3c:	push	{r4, lr}
   10e40:	sub	sp, sp, #12
   10e44:	ldr	lr, [pc, #68]	; 10e90 <_start@@Base+0x194>
   10e48:	add	r3, sp, #24
   10e4c:	mov	r1, #2
   10e50:	mov	r2, r3
   10e54:	ldr	r4, [ip, lr]
   10e58:	str	r3, [sp]
   10e5c:	ldr	r3, [r4]
   10e60:	str	r3, [sp, #4]
   10e64:	bl	10a3c <vc_container_net_control@plt>
   10e68:	ldr	r2, [sp, #4]
   10e6c:	ldr	r3, [r4]
   10e70:	cmp	r2, r3
   10e74:	bne	10e88 <_start@@Base+0x18c>
   10e78:	add	sp, sp, #12
   10e7c:	pop	{r4, lr}
   10e80:	add	sp, sp, #12
   10e84:	bx	lr
   10e88:	bl	10a24 <__stack_chk_fail@plt>
   10e8c:	andeq	r1, r1, r0, asr #3
   10e90:	andeq	r0, r0, ip, asr #32

00010e94 <nb_set_nonblocking_input@@Base>:
   10e94:	ldr	r3, [pc, #112]	; 10f0c <nb_set_nonblocking_input@@Base+0x78>
   10e98:	ldr	r2, [pc, #112]	; 10f10 <nb_set_nonblocking_input@@Base+0x7c>
   10e9c:	add	r3, pc, r3
   10ea0:	push	{r4, r5, r6, lr}
   10ea4:	sub	sp, sp, #64	; 0x40
   10ea8:	ldr	r4, [r3, r2]
   10eac:	mov	r6, r0
   10eb0:	mov	r1, sp
   10eb4:	mov	r0, #0
   10eb8:	ldr	r3, [r4]
   10ebc:	str	r3, [sp, #60]	; 0x3c
   10ec0:	bl	10ac0 <tcgetattr@plt>
   10ec4:	cmp	r6, #0
   10ec8:	ldr	r3, [sp, #12]
   10ecc:	mov	r0, #0
   10ed0:	movne	r2, #1
   10ed4:	mov	r1, r0
   10ed8:	bicne	r3, r3, #2
   10edc:	orreq	r3, r3, #2
   10ee0:	str	r3, [sp, #12]
   10ee4:	strbne	r2, [sp, #23]
   10ee8:	mov	r2, sp
   10eec:	bl	10a54 <tcsetattr@plt>
   10ef0:	ldr	r2, [sp, #60]	; 0x3c
   10ef4:	ldr	r3, [r4]
   10ef8:	cmp	r2, r3
   10efc:	bne	10f08 <nb_set_nonblocking_input@@Base+0x74>
   10f00:	add	sp, sp, #64	; 0x40
   10f04:	pop	{r4, r5, r6, pc}
   10f08:	bl	10a24 <__stack_chk_fail@plt>
   10f0c:	andeq	r1, r1, ip, asr r1
   10f10:	andeq	r0, r0, ip, asr #32

00010f14 <nb_char_available@@Base>:
   10f14:	ldr	ip, [pc, #136]	; 10fa4 <nb_char_available@@Base+0x90>
   10f18:	mov	r0, #0
   10f1c:	push	{r4, lr}
   10f20:	add	ip, pc, ip
   10f24:	ldr	lr, [pc, #124]	; 10fa8 <nb_char_available@@Base+0x94>
   10f28:	sub	sp, sp, #152	; 0x98
   10f2c:	add	r3, sp, #152	; 0x98
   10f30:	mov	r2, r0
   10f34:	add	r1, sp, #144	; 0x90
   10f38:	ldr	r4, [ip, lr]
   10f3c:	str	r0, [sp, #12]
   10f40:	str	r0, [r3, #-136]!	; 0xffffff78
   10f44:	ldr	r0, [r4]
   10f48:	str	r0, [sp, #148]	; 0x94
   10f4c:	str	r2, [r3, #4]!
   10f50:	cmp	r3, r1
   10f54:	bne	10f4c <nb_char_available@@Base+0x38>
   10f58:	ldr	r0, [sp, #20]
   10f5c:	add	r1, sp, #152	; 0x98
   10f60:	mov	r2, #0
   10f64:	add	ip, sp, #12
   10f68:	mov	r3, r2
   10f6c:	orr	r0, r0, #1
   10f70:	str	r0, [r1, #-132]!	; 0xffffff7c
   10f74:	mov	r0, #1
   10f78:	str	ip, [sp]
   10f7c:	bl	10a18 <select@plt>
   10f80:	ldr	r2, [sp, #148]	; 0x94
   10f84:	ldr	r3, [r4]
   10f88:	ldr	r0, [sp, #20]
   10f8c:	cmp	r2, r3
   10f90:	and	r0, r0, #1
   10f94:	bne	10fa0 <nb_char_available@@Base+0x8c>
   10f98:	add	sp, sp, #152	; 0x98
   10f9c:	pop	{r4, pc}
   10fa0:	bl	10a24 <__stack_chk_fail@plt>
   10fa4:	ldrdeq	r1, [r1], -r8
   10fa8:	andeq	r0, r0, ip, asr #32

00010fac <nb_get_char@@Base>:
   10fac:	push	{r3, lr}
   10fb0:	ldr	r3, [pc, #24]	; 10fd0 <nb_get_char@@Base+0x24>
   10fb4:	ldr	r2, [pc, #24]	; 10fd4 <nb_get_char@@Base+0x28>
   10fb8:	add	r3, pc, r3
   10fbc:	ldr	r3, [r3, r2]
   10fc0:	ldr	r0, [r3]
   10fc4:	bl	10a0c <_IO_getc@plt>
   10fc8:	uxtb	r0, r0
   10fcc:	pop	{r3, pc}
   10fd0:	andeq	r1, r1, r0, asr #32
   10fd4:	andeq	r0, r0, r4, asr r0

00010fd8 <nb_put_char@@Base>:
   10fd8:	ldr	r3, [pc, #16]	; 10ff0 <nb_put_char@@Base+0x18>
   10fdc:	ldr	r2, [pc, #16]	; 10ff4 <nb_put_char@@Base+0x1c>
   10fe0:	add	r3, pc, r3
   10fe4:	ldr	r3, [r3, r2]
   10fe8:	ldr	r1, [r3]
   10fec:	b	10a48 <_IO_putc@plt>
   10ff0:	andeq	r1, r1, r8, lsl r0
   10ff4:	andeq	r0, r0, r8, asr r0

00010ff8 <__libc_csu_init@@Base>:
   10ff8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10ffc:	mov	r7, r0
   11000:	ldr	r6, [pc, #76]	; 11054 <__libc_csu_init@@Base+0x5c>
   11004:	mov	r8, r1
   11008:	ldr	r5, [pc, #72]	; 11058 <__libc_csu_init@@Base+0x60>
   1100c:	mov	r9, r2
   11010:	add	r6, pc, r6
   11014:	bl	109ec <_init@@Base>
   11018:	add	r5, pc, r5
   1101c:	rsb	r6, r5, r6
   11020:	asrs	r6, r6, #2
   11024:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   11028:	sub	r5, r5, #4
   1102c:	mov	r4, #0
   11030:	add	r4, r4, #1
   11034:	ldr	r3, [r5, #4]!
   11038:	mov	r0, r7
   1103c:	mov	r1, r8
   11040:	mov	r2, r9
   11044:	blx	r3
   11048:	cmp	r4, r6
   1104c:	bne	11030 <__libc_csu_init@@Base+0x38>
   11050:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11054:			; <UNDEFINED> instruction: 0x00010eb8
   11058:	andeq	r0, r1, ip, lsr #29

0001105c <__libc_csu_fini@@Base>:
   1105c:	bx	lr

Disassembly of section .fini:

00011060 <_fini@@Base>:
   11060:	push	{r3, lr}
   11064:	pop	{r3, pc}
