
centos-preinstalled/sleep:     file format elf32-littlearm


Disassembly of section .init:

00010ecc <.init>:
   10ecc:	push	{r3, lr}
   10ed0:	bl	114d0 <close@plt+0x368>
   10ed4:	pop	{r3, pc}

Disassembly of section .plt:

00010ed8 <fdopen@plt-0x14>:
   10ed8:	push	{lr}		; (str lr, [sp, #-4]!)
   10edc:	ldr	lr, [pc, #4]	; 10ee8 <fdopen@plt-0x4>
   10ee0:	add	lr, pc, lr
   10ee4:	ldr	pc, [lr, #8]!
   10ee8:	andeq	r5, r1, r8, lsl r1

00010eec <fdopen@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #86016	; 0x15000
   10ef4:	ldr	pc, [ip, #280]!	; 0x118

00010ef8 <calloc@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #86016	; 0x15000
   10f00:	ldr	pc, [ip, #272]!	; 0x110

00010f04 <fputs_unlocked@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #86016	; 0x15000
   10f0c:	ldr	pc, [ip, #264]!	; 0x108

00010f10 <raise@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #86016	; 0x15000
   10f18:	ldr	pc, [ip, #256]!	; 0x100

00010f1c <strcmp@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #86016	; 0x15000
   10f24:	ldr	pc, [ip, #248]!	; 0xf8

00010f28 <fflush@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #86016	; 0x15000
   10f30:	ldr	pc, [ip, #240]!	; 0xf0

00010f34 <free@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #86016	; 0x15000
   10f3c:	ldr	pc, [ip, #232]!	; 0xe8

00010f40 <nanosleep@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #86016	; 0x15000
   10f48:	ldr	pc, [ip, #224]!	; 0xe0

00010f4c <_exit@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #86016	; 0x15000
   10f54:	ldr	pc, [ip, #216]!	; 0xd8

00010f58 <memcpy@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #86016	; 0x15000
   10f60:	ldr	pc, [ip, #208]!	; 0xd0

00010f64 <mbsinit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #86016	; 0x15000
   10f6c:	ldr	pc, [ip, #200]!	; 0xc8

00010f70 <memcmp@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #86016	; 0x15000
   10f78:	ldr	pc, [ip, #192]!	; 0xc0

00010f7c <dcgettext@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #86016	; 0x15000
   10f84:	ldr	pc, [ip, #184]!	; 0xb8

00010f88 <__stack_chk_fail@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #86016	; 0x15000
   10f90:	ldr	pc, [ip, #176]!	; 0xb0

00010f94 <realloc@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #86016	; 0x15000
   10f9c:	ldr	pc, [ip, #168]!	; 0xa8

00010fa0 <textdomain@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #86016	; 0x15000
   10fa8:	ldr	pc, [ip, #160]!	; 0xa0

00010fac <iswprint@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #86016	; 0x15000
   10fb4:	ldr	pc, [ip, #152]!	; 0x98

00010fb8 <fwrite@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #86016	; 0x15000
   10fc0:	ldr	pc, [ip, #144]!	; 0x90

00010fc4 <lseek64@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #86016	; 0x15000
   10fcc:	ldr	pc, [ip, #136]!	; 0x88

00010fd0 <__ctype_get_mb_cur_max@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #86016	; 0x15000
   10fd8:	ldr	pc, [ip, #128]!	; 0x80

00010fdc <strcpy@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #86016	; 0x15000
   10fe4:	ldr	pc, [ip, #120]!	; 0x78

00010fe8 <__fpending@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #86016	; 0x15000
   10ff0:	ldr	pc, [ip, #112]!	; 0x70

00010ff4 <mbrtowc@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #86016	; 0x15000
   10ffc:	ldr	pc, [ip, #104]!	; 0x68

00011000 <error@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #86016	; 0x15000
   11008:	ldr	pc, [ip, #96]!	; 0x60

0001100c <open64@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #86016	; 0x15000
   11014:	ldr	pc, [ip, #88]!	; 0x58

00011018 <getenv@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #86016	; 0x15000
   11020:	ldr	pc, [ip, #80]!	; 0x50

00011024 <malloc@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #86016	; 0x15000
   1102c:	ldr	pc, [ip, #72]!	; 0x48

00011030 <__libc_start_main@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #86016	; 0x15000
   11038:	ldr	pc, [ip, #64]!	; 0x40

0001103c <__freading@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #86016	; 0x15000
   11044:	ldr	pc, [ip, #56]!	; 0x38

00011048 <__gmon_start__@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #86016	; 0x15000
   11050:	ldr	pc, [ip, #48]!	; 0x30

00011054 <getopt_long@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #86016	; 0x15000
   1105c:	ldr	pc, [ip, #40]!	; 0x28

00011060 <__ctype_b_loc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #86016	; 0x15000
   11068:	ldr	pc, [ip, #32]!

0001106c <exit@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #86016	; 0x15000
   11074:	ldr	pc, [ip, #24]!

00011078 <strlen@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #86016	; 0x15000
   11080:	ldr	pc, [ip, #16]!

00011084 <ungetc@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #86016	; 0x15000
   1108c:	ldr	pc, [ip, #8]!

00011090 <__errno_location@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #86016	; 0x15000
   11098:	ldr	pc, [ip, #0]!

0001109c <__cxa_atexit@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #20, 20	; 0x14000
   110a4:	ldr	pc, [ip, #4088]!	; 0xff8

000110a8 <memset@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #20, 20	; 0x14000
   110b0:	ldr	pc, [ip, #4080]!	; 0xff0

000110b4 <fscanf@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #20, 20	; 0x14000
   110bc:	ldr	pc, [ip, #4072]!	; 0xfe8

000110c0 <__printf_chk@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #20, 20	; 0x14000
   110c8:	ldr	pc, [ip, #4064]!	; 0xfe0

000110cc <fileno@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #20, 20	; 0x14000
   110d4:	ldr	pc, [ip, #4056]!	; 0xfd8

000110d8 <__fprintf_chk@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #20, 20	; 0x14000
   110e0:	ldr	pc, [ip, #4048]!	; 0xfd0

000110e4 <fclose@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #20, 20	; 0x14000
   110ec:	ldr	pc, [ip, #4040]!	; 0xfc8

000110f0 <fseeko64@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #20, 20	; 0x14000
   110f8:	ldr	pc, [ip, #4032]!	; 0xfc0

000110fc <strtod_l@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #20, 20	; 0x14000
   11104:	ldr	pc, [ip, #4024]!	; 0xfb8

00011108 <__uflow@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #20, 20	; 0x14000
   11110:	ldr	pc, [ip, #4016]!	; 0xfb0

00011114 <setlocale@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #20, 20	; 0x14000
   1111c:	ldr	pc, [ip, #4008]!	; 0xfa8

00011120 <strrchr@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #20, 20	; 0x14000
   11128:	ldr	pc, [ip, #4000]!	; 0xfa0

0001112c <nl_langinfo@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #20, 20	; 0x14000
   11134:	ldr	pc, [ip, #3992]!	; 0xf98

00011138 <newlocale@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #20, 20	; 0x14000
   11140:	ldr	pc, [ip, #3984]!	; 0xf90

00011144 <bindtextdomain@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #20, 20	; 0x14000
   1114c:	ldr	pc, [ip, #3976]!	; 0xf88

00011150 <strncmp@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #20, 20	; 0x14000
   11158:	ldr	pc, [ip, #3968]!	; 0xf80

0001115c <abort@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #20, 20	; 0x14000
   11164:	ldr	pc, [ip, #3960]!	; 0xf78

00011168 <close@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #20, 20	; 0x14000
   11170:	ldr	pc, [ip, #3952]!	; 0xf70

Disassembly of section .text:

00011178 <usage@@Base-0x450>:
   11178:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1117c:	vpush	{d8}
   11180:	sub	sp, sp, #60	; 0x3c
   11184:	ldr	r7, [pc, #708]	; 11450 <close@plt+0x2e8>
   11188:	mov	r6, r0
   1118c:	ldr	r3, [pc, #704]	; 11454 <close@plt+0x2ec>
   11190:	mov	r5, r1
   11194:	add	r7, pc, r7
   11198:	ldr	r8, [pc, #696]	; 11458 <close@plt+0x2f0>
   1119c:	ldr	r0, [r1]
   111a0:	mov	r4, #0
   111a4:	ldr	r3, [r7, r3]
   111a8:	add	r8, pc, r8
   111ac:	ldr	r9, [pc, #680]	; 1145c <close@plt+0x2f4>
   111b0:	ldr	r3, [r3]
   111b4:	add	r9, pc, r9
   111b8:	str	r3, [sp, #52]	; 0x34
   111bc:	bl	11af4 <close_stdout@@Base+0x2c8>
   111c0:	mov	r1, r8
   111c4:	mov	r0, #6
   111c8:	bl	11114 <setlocale@plt>
   111cc:	ldr	r1, [pc, #652]	; 11460 <close@plt+0x2f8>
   111d0:	mov	r0, r9
   111d4:	add	r1, pc, r1
   111d8:	bl	11144 <bindtextdomain@plt>
   111dc:	mov	r0, r9
   111e0:	bl	10fa0 <textdomain@plt>
   111e4:	ldr	r3, [pc, #632]	; 11464 <close@plt+0x2fc>
   111e8:	ldr	r9, [pc, #632]	; 11468 <close@plt+0x300>
   111ec:	ldr	r0, [r7, r3]
   111f0:	add	r9, pc, r9
   111f4:	bl	1466c <close_stdout@@Base+0x2e40>
   111f8:	ldr	r3, [pc, #620]	; 1146c <close@plt+0x304>
   111fc:	ldr	ip, [pc, #620]	; 11470 <close@plt+0x308>
   11200:	mov	r0, r6
   11204:	ldr	lr, [pc, #616]	; 11474 <close@plt+0x30c>
   11208:	mov	r1, r5
   1120c:	ldr	r3, [r7, r3]
   11210:	ldr	r2, [pc, #608]	; 11478 <close@plt+0x310>
   11214:	add	lr, pc, lr
   11218:	ldr	sl, [r3]
   1121c:	add	r2, pc, r2
   11220:	ldr	r3, [pc, #596]	; 1147c <close@plt+0x314>
   11224:	str	sl, [sp]
   11228:	add	r3, pc, r3
   1122c:	ldr	ip, [r7, ip]
   11230:	str	lr, [sp, #12]
   11234:	str	r9, [sp, #8]
   11238:	str	ip, [sp, #4]
   1123c:	str	r4, [sp, #16]
   11240:	bl	119e8 <close_stdout@@Base+0x1bc>
   11244:	str	r4, [sp]
   11248:	mov	r2, r8
   1124c:	mov	r0, r6
   11250:	mov	r1, r5
   11254:	mov	r3, r4
   11258:	bl	11054 <getopt_long@plt>
   1125c:	cmn	r0, #1
   11260:	beq	1126c <close@plt+0x104>
   11264:	mov	r0, #1
   11268:	bl	115c8 <usage@@Base>
   1126c:	cmp	r6, #1
   11270:	beq	11410 <close@plt+0x2a8>
   11274:	ldr	r3, [pc, #516]	; 11480 <close@plt+0x318>
   11278:	ldr	r3, [r7, r3]
   1127c:	ldr	r4, [r3]
   11280:	cmp	r6, r4
   11284:	ble	1143c <close@plt+0x2d4>
   11288:	ldr	r3, [pc, #500]	; 11484 <close@plt+0x31c>
   1128c:	add	r5, r5, r4, lsl #2
   11290:	ldr	r2, [pc, #496]	; 11488 <close@plt+0x320>
   11294:	add	r9, sp, #36	; 0x24
   11298:	add	r8, sp, #40	; 0x28
   1129c:	mov	sl, #1
   112a0:	add	r2, pc, r2
   112a4:	str	r2, [sp, #28]
   112a8:	ldr	r7, [r7, r3]
   112ac:	vldr	d8, [pc, #404]	; 11448 <close@plt+0x2e0>
   112b0:	ldr	r0, [r5], #4
   112b4:	mov	r1, r9
   112b8:	mov	r2, r8
   112bc:	mov	r3, r7
   112c0:	bl	13be8 <close_stdout@@Base+0x23bc>
   112c4:	cmp	r0, #0
   112c8:	beq	1139c <close@plt+0x234>
   112cc:	vldr	d7, [sp, #40]	; 0x28
   112d0:	vcmpe.f64	d7, #0.0
   112d4:	vmrs	APSR_nzcv, fpscr
   112d8:	blt	1139c <close@plt+0x234>
   112dc:	ldr	r3, [sp, #36]	; 0x24
   112e0:	ldrb	r2, [r3]
   112e4:	cmp	r2, #0
   112e8:	beq	113d8 <close@plt+0x270>
   112ec:	ldrb	r3, [r3, #1]
   112f0:	cmp	r3, #0
   112f4:	bne	1139c <close@plt+0x234>
   112f8:	sub	r2, r2, #100	; 0x64
   112fc:	cmp	r2, #15
   11300:	addls	pc, pc, r2, lsl #2
   11304:	b	1139c <close@plt+0x234>
   11308:	b	11388 <close@plt+0x220>
   1130c:	b	1139c <close@plt+0x234>
   11310:	b	1139c <close@plt+0x234>
   11314:	b	1139c <close@plt+0x234>
   11318:	b	11348 <close@plt+0x1e0>
   1131c:	b	1139c <close@plt+0x234>
   11320:	b	1139c <close@plt+0x234>
   11324:	b	1139c <close@plt+0x234>
   11328:	b	1139c <close@plt+0x234>
   1132c:	b	11394 <close@plt+0x22c>
   11330:	b	1139c <close@plt+0x234>
   11334:	b	1139c <close@plt+0x234>
   11338:	b	1139c <close@plt+0x234>
   1133c:	b	1139c <close@plt+0x234>
   11340:	b	1139c <close@plt+0x234>
   11344:	b	113d8 <close@plt+0x270>
   11348:	mov	r3, #3600	; 0xe10
   1134c:	vmov	s11, r3
   11350:	vcvt.f64.s32	d6, s11
   11354:	vmul.f64	d7, d7, d6
   11358:	add	r4, r4, #1
   1135c:	cmp	r4, r6
   11360:	vadd.f64	d8, d8, d7
   11364:	bne	112b0 <close@plt+0x148>
   11368:	cmp	sl, #0
   1136c:	beq	11264 <close@plt+0xfc>
   11370:	vmov.f64	d0, d8
   11374:	bl	13b5c <close_stdout@@Base+0x2330>
   11378:	cmp	r0, #0
   1137c:	bne	113e0 <close@plt+0x278>
   11380:	mov	r0, #0
   11384:	bl	1106c <exit@plt>
   11388:	movw	r3, #20864	; 0x5180
   1138c:	movt	r3, #1
   11390:	b	1134c <close@plt+0x1e4>
   11394:	mov	r3, #60	; 0x3c
   11398:	b	1134c <close@plt+0x1e4>
   1139c:	ldr	r1, [sp, #28]
   113a0:	mov	r2, #5
   113a4:	mov	r0, #0
   113a8:	mov	sl, r0
   113ac:	bl	10f7c <dcgettext@plt>
   113b0:	mov	fp, r0
   113b4:	ldr	r0, [r5, #-4]
   113b8:	bl	13344 <close_stdout@@Base+0x1b18>
   113bc:	mov	r2, fp
   113c0:	mov	r1, sl
   113c4:	mov	r3, r0
   113c8:	mov	r0, sl
   113cc:	bl	11000 <error@plt>
   113d0:	vldr	d7, [sp, #40]	; 0x28
   113d4:	b	11358 <close@plt+0x1f0>
   113d8:	mov	r3, #1
   113dc:	b	1134c <close@plt+0x1e4>
   113e0:	bl	11090 <__errno_location@plt>
   113e4:	ldr	r1, [pc, #160]	; 1148c <close@plt+0x324>
   113e8:	mov	r2, #5
   113ec:	add	r1, pc, r1
   113f0:	ldr	r4, [r0]
   113f4:	mov	r0, #0
   113f8:	bl	10f7c <dcgettext@plt>
   113fc:	mov	r1, r4
   11400:	mov	r2, r0
   11404:	mov	r0, #1
   11408:	bl	11000 <error@plt>
   1140c:	b	11380 <close@plt+0x218>
   11410:	ldr	r1, [pc, #120]	; 11490 <close@plt+0x328>
   11414:	mov	r2, #5
   11418:	mov	r0, r4
   1141c:	add	r1, pc, r1
   11420:	bl	10f7c <dcgettext@plt>
   11424:	mov	r1, r4
   11428:	mov	r2, r0
   1142c:	mov	r0, r4
   11430:	bl	11000 <error@plt>
   11434:	mov	r0, r6
   11438:	bl	115c8 <usage@@Base>
   1143c:	vldr	d8, [pc, #4]	; 11448 <close@plt+0x2e0>
   11440:	b	11370 <close@plt+0x208>
   11444:	nop	{0}
	...
   11450:	andeq	r4, r1, r4, ror #28
   11454:	andeq	r0, r0, r8, ror #1
   11458:	andeq	r3, r0, r4, ror #15
   1145c:	andeq	r3, r0, r8, lsl r7
   11460:			; <UNDEFINED> instruction: 0x000037bc
   11464:	strdeq	r0, [r0], -r8
   11468:			; <UNDEFINED> instruction: 0x000037bc
   1146c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11470:	andeq	r0, r0, r8, lsl #2
   11474:	andeq	r3, r0, r8, lsr #15
   11478:	andeq	r3, r0, r8, lsl #15
   1147c:	andeq	r3, r0, r0, lsr #13
   11480:	andeq	r0, r0, ip, ror #1
   11484:	andeq	r0, r0, ip, lsl r1
   11488:	andeq	r3, r0, r8, lsr r7
   1148c:	andeq	r3, r0, r8, lsl #12
   11490:	andeq	r3, r0, ip, lsr #11
   11494:	mov	fp, #0
   11498:	mov	lr, #0
   1149c:	pop	{r1}		; (ldr r1, [sp], #4)
   114a0:	mov	r2, sp
   114a4:	push	{r2}		; (str r2, [sp, #-4]!)
   114a8:	push	{r0}		; (str r0, [sp, #-4]!)
   114ac:	ldr	ip, [pc, #16]	; 114c4 <close@plt+0x35c>
   114b0:	push	{ip}		; (str ip, [sp, #-4]!)
   114b4:	ldr	r0, [pc, #12]	; 114c8 <close@plt+0x360>
   114b8:	ldr	r3, [pc, #12]	; 114cc <close@plt+0x364>
   114bc:	bl	11030 <__libc_start_main@plt>
   114c0:	bl	1115c <abort@plt>
   114c4:	andeq	r4, r1, r8, ror #12
   114c8:	andeq	r1, r1, r8, ror r1
   114cc:	andeq	r4, r1, r4, lsl #12
   114d0:	ldr	r3, [pc, #20]	; 114ec <close@plt+0x384>
   114d4:	ldr	r2, [pc, #20]	; 114f0 <close@plt+0x388>
   114d8:	add	r3, pc, r3
   114dc:	ldr	r2, [r3, r2]
   114e0:	cmp	r2, #0
   114e4:	bxeq	lr
   114e8:	b	11048 <__gmon_start__@plt>
   114ec:	andeq	r4, r1, r0, lsr #22
   114f0:	strdeq	r0, [r0], -ip
   114f4:	push	{r3, lr}
   114f8:	movw	r0, #24948	; 0x6174
   114fc:	ldr	r3, [pc, #36]	; 11528 <close@plt+0x3c0>
   11500:	movt	r0, #2
   11504:	rsb	r3, r0, r3
   11508:	cmp	r3, #6
   1150c:	popls	{r3, pc}
   11510:	movw	r3, #0
   11514:	movt	r3, #0
   11518:	cmp	r3, #0
   1151c:	popeq	{r3, pc}
   11520:	blx	r3
   11524:	pop	{r3, pc}
   11528:	andeq	r6, r2, r7, ror r1
   1152c:	push	{r3, lr}
   11530:	movw	r0, #24948	; 0x6174
   11534:	movw	r3, #24948	; 0x6174
   11538:	movt	r0, #2
   1153c:	movt	r3, #2
   11540:	rsb	r3, r0, r3
   11544:	asr	r3, r3, #2
   11548:	add	r3, r3, r3, lsr #31
   1154c:	asrs	r1, r3, #1
   11550:	popeq	{r3, pc}
   11554:	movw	r2, #0
   11558:	movt	r2, #0
   1155c:	cmp	r2, #0
   11560:	popeq	{r3, pc}
   11564:	blx	r2
   11568:	pop	{r3, pc}
   1156c:	push	{r4, lr}
   11570:	movw	r4, #24948	; 0x6174
   11574:	movt	r4, #2
   11578:	ldrb	r3, [r4]
   1157c:	cmp	r3, #0
   11580:	popne	{r4, pc}
   11584:	bl	114f4 <close@plt+0x38c>
   11588:	mov	r3, #1
   1158c:	strb	r3, [r4]
   11590:	pop	{r4, pc}
   11594:	movw	r0, #24240	; 0x5eb0
   11598:	movt	r0, #2
   1159c:	push	{r3, lr}
   115a0:	ldr	r3, [r0]
   115a4:	cmp	r3, #0
   115a8:	beq	115c0 <close@plt+0x458>
   115ac:	movw	r3, #0
   115b0:	movt	r3, #0
   115b4:	cmp	r3, #0
   115b8:	beq	115c0 <close@plt+0x458>
   115bc:	blx	r3
   115c0:	pop	{r3, lr}
   115c4:	b	1152c <close@plt+0x3c4>

000115c8 <usage@@Base>:
   115c8:	push	{r4, r5, r6, lr}
   115cc:	subs	r4, r0, #0
   115d0:	ldr	r5, [pc, #376]	; 11750 <usage@@Base+0x188>
   115d4:	add	r5, pc, r5
   115d8:	beq	11620 <usage@@Base+0x58>
   115dc:	ldr	r3, [pc, #368]	; 11754 <usage@@Base+0x18c>
   115e0:	mov	r2, #5
   115e4:	ldr	r1, [pc, #364]	; 11758 <usage@@Base+0x190>
   115e8:	mov	r0, #0
   115ec:	ldr	r3, [r5, r3]
   115f0:	add	r1, pc, r1
   115f4:	ldr	r6, [r3]
   115f8:	bl	10f7c <dcgettext@plt>
   115fc:	ldr	r3, [pc, #344]	; 1175c <usage@@Base+0x194>
   11600:	mov	r1, #1
   11604:	ldr	r3, [r5, r3]
   11608:	ldr	r3, [r3]
   1160c:	mov	r2, r0
   11610:	mov	r0, r6
   11614:	bl	110d8 <__fprintf_chk@plt>
   11618:	mov	r0, r4
   1161c:	bl	1106c <exit@plt>
   11620:	ldr	r1, [pc, #312]	; 11760 <usage@@Base+0x198>
   11624:	mov	r2, #5
   11628:	add	r1, pc, r1
   1162c:	bl	10f7c <dcgettext@plt>
   11630:	ldr	r3, [pc, #292]	; 1175c <usage@@Base+0x194>
   11634:	ldr	r6, [r5, r3]
   11638:	ldr	r2, [r6]
   1163c:	mov	r3, r2
   11640:	mov	r1, r0
   11644:	mov	r0, #1
   11648:	bl	110c0 <__printf_chk@plt>
   1164c:	ldr	r1, [pc, #272]	; 11764 <usage@@Base+0x19c>
   11650:	mov	r2, #5
   11654:	mov	r0, r4
   11658:	add	r1, pc, r1
   1165c:	bl	10f7c <dcgettext@plt>
   11660:	ldr	r3, [pc, #256]	; 11768 <usage@@Base+0x1a0>
   11664:	ldr	r5, [r5, r3]
   11668:	ldr	r1, [r5]
   1166c:	bl	10f04 <fputs_unlocked@plt>
   11670:	ldr	r1, [pc, #244]	; 1176c <usage@@Base+0x1a4>
   11674:	mov	r2, #5
   11678:	mov	r0, r4
   1167c:	add	r1, pc, r1
   11680:	bl	10f7c <dcgettext@plt>
   11684:	ldr	r1, [r5]
   11688:	bl	10f04 <fputs_unlocked@plt>
   1168c:	ldr	r1, [pc, #220]	; 11770 <usage@@Base+0x1a8>
   11690:	mov	r2, #5
   11694:	mov	r0, r4
   11698:	add	r1, pc, r1
   1169c:	bl	10f7c <dcgettext@plt>
   116a0:	ldr	r2, [pc, #204]	; 11774 <usage@@Base+0x1ac>
   116a4:	ldr	r3, [pc, #204]	; 11778 <usage@@Base+0x1b0>
   116a8:	add	r2, pc, r2
   116ac:	add	r3, pc, r3
   116b0:	mov	r1, r0
   116b4:	mov	r0, #1
   116b8:	bl	110c0 <__printf_chk@plt>
   116bc:	mov	r0, #5
   116c0:	mov	r1, r4
   116c4:	bl	11114 <setlocale@plt>
   116c8:	cmp	r0, #0
   116cc:	beq	116e8 <usage@@Base+0x120>
   116d0:	ldr	r1, [pc, #164]	; 1177c <usage@@Base+0x1b4>
   116d4:	mov	r2, #3
   116d8:	add	r1, pc, r1
   116dc:	bl	11150 <strncmp@plt>
   116e0:	cmp	r0, #0
   116e4:	bne	1171c <usage@@Base+0x154>
   116e8:	ldr	r1, [pc, #144]	; 11780 <usage@@Base+0x1b8>
   116ec:	mov	r2, #5
   116f0:	mov	r0, #0
   116f4:	add	r1, pc, r1
   116f8:	bl	10f7c <dcgettext@plt>
   116fc:	mov	r5, r0
   11700:	ldr	r0, [r6]
   11704:	bl	11944 <close_stdout@@Base+0x118>
   11708:	mov	r1, r5
   1170c:	mov	r2, r0
   11710:	mov	r0, #1
   11714:	bl	110c0 <__printf_chk@plt>
   11718:	b	11618 <usage@@Base+0x50>
   1171c:	ldr	r1, [pc, #96]	; 11784 <usage@@Base+0x1bc>
   11720:	mov	r2, #5
   11724:	mov	r0, r4
   11728:	add	r1, pc, r1
   1172c:	bl	10f7c <dcgettext@plt>
   11730:	mov	r5, r0
   11734:	ldr	r0, [r6]
   11738:	bl	11944 <close_stdout@@Base+0x118>
   1173c:	mov	r1, r5
   11740:	mov	r2, r0
   11744:	mov	r0, #1
   11748:	bl	110c0 <__printf_chk@plt>
   1174c:	b	116e8 <usage@@Base+0x120>
   11750:	andeq	r4, r1, r4, lsr #20
   11754:	strdeq	r0, [r0], -r4
   11758:	strheq	r3, [r0], -r0
   1175c:	andeq	r0, r0, r4, lsl r1
   11760:	andeq	r3, r0, r0, lsr #1
   11764:	strdeq	r3, [r0], -r0
   11768:	andeq	r0, r0, r4, lsl #2
   1176c:	strdeq	r3, [r0], -ip
   11770:	andeq	r3, r0, r8, lsl r2
   11774:	andeq	r3, r0, r0, lsr #4
   11778:	andeq	r3, r0, ip, lsr #4
   1177c:	andeq	r3, r0, r8, lsr #4
   11780:	andeq	r3, r0, r8, asr r2
   11784:	ldrdeq	r3, [r0], -ip

00011788 <c_strtod@@Base>:
   11788:	push	{r4, r5, r6, lr}
   1178c:	mov	r6, r0
   11790:	ldr	r5, [pc, #96]	; 117f8 <c_strtod@@Base+0x70>
   11794:	mov	r4, r1
   11798:	add	r5, pc, r5
   1179c:	ldr	r2, [r5]
   117a0:	cmp	r2, #0
   117a4:	beq	117d8 <c_strtod@@Base+0x50>
   117a8:	ldr	r3, [pc, #76]	; 117fc <c_strtod@@Base+0x74>
   117ac:	ldr	r2, [pc, r3]
   117b0:	cmp	r2, #0
   117b4:	beq	117c8 <c_strtod@@Base+0x40>
   117b8:	mov	r0, r6
   117bc:	mov	r1, r4
   117c0:	pop	{r4, r5, r6, lr}
   117c4:	b	110fc <strtod_l@plt>
   117c8:	cmp	r4, #0
   117cc:	vldr	d0, [pc, #28]	; 117f0 <c_strtod@@Base+0x68>
   117d0:	strne	r6, [r4]
   117d4:	pop	{r4, r5, r6, pc}
   117d8:	ldr	r1, [pc, #32]	; 11800 <c_strtod@@Base+0x78>
   117dc:	movw	r0, #8127	; 0x1fbf
   117e0:	add	r1, pc, r1
   117e4:	bl	11138 <newlocale@plt>
   117e8:	str	r0, [r5]
   117ec:	b	117a8 <c_strtod@@Base+0x20>
	...
   117f8:	ldrdeq	r4, [r1], -r8
   117fc:	andeq	r4, r1, r4, asr #19
   11800:	andeq	r3, r0, r8, lsr r2
   11804:	ldr	r3, [pc, #8]	; 11814 <c_strtod@@Base+0x8c>
   11808:	add	r3, pc, r3
   1180c:	str	r0, [r3]
   11810:	bx	lr
   11814:	andeq	r4, r1, ip, ror #18
   11818:	ldr	r3, [pc, #8]	; 11828 <c_strtod@@Base+0xa0>
   1181c:	add	r3, pc, r3
   11820:	strb	r0, [r3, #4]
   11824:	bx	lr
   11828:	andeq	r4, r1, r8, asr r9

0001182c <close_stdout@@Base>:
   1182c:	push	{r4, r5, r6, r7, lr}
   11830:	sub	sp, sp, #12
   11834:	ldr	r4, [pc, #228]	; 11920 <close_stdout@@Base+0xf4>
   11838:	ldr	r3, [pc, #228]	; 11924 <close_stdout@@Base+0xf8>
   1183c:	add	r4, pc, r4
   11840:	ldr	r3, [r4, r3]
   11844:	ldr	r0, [r3]
   11848:	bl	13cb8 <close_stdout@@Base+0x248c>
   1184c:	cmp	r0, #0
   11850:	beq	11878 <close_stdout@@Base+0x4c>
   11854:	ldr	r3, [pc, #204]	; 11928 <close_stdout@@Base+0xfc>
   11858:	add	r3, pc, r3
   1185c:	ldrb	r3, [r3, #4]
   11860:	cmp	r3, #0
   11864:	beq	11898 <close_stdout@@Base+0x6c>
   11868:	bl	11090 <__errno_location@plt>
   1186c:	ldr	r3, [r0]
   11870:	cmp	r3, #32
   11874:	bne	11898 <close_stdout@@Base+0x6c>
   11878:	ldr	r3, [pc, #172]	; 1192c <close_stdout@@Base+0x100>
   1187c:	ldr	r3, [r4, r3]
   11880:	ldr	r0, [r3]
   11884:	bl	13cb8 <close_stdout@@Base+0x248c>
   11888:	cmp	r0, #0
   1188c:	bne	118ec <close_stdout@@Base+0xc0>
   11890:	add	sp, sp, #12
   11894:	pop	{r4, r5, r6, r7, pc}
   11898:	ldr	r1, [pc, #144]	; 11930 <close_stdout@@Base+0x104>
   1189c:	mov	r0, #0
   118a0:	mov	r2, #5
   118a4:	add	r1, pc, r1
   118a8:	bl	10f7c <dcgettext@plt>
   118ac:	ldr	r3, [pc, #128]	; 11934 <close_stdout@@Base+0x108>
   118b0:	ldr	r5, [pc, r3]
   118b4:	cmp	r5, #0
   118b8:	mov	r6, r0
   118bc:	beq	118fc <close_stdout@@Base+0xd0>
   118c0:	bl	11090 <__errno_location@plt>
   118c4:	ldr	r7, [r0]
   118c8:	mov	r0, r5
   118cc:	bl	131f0 <close_stdout@@Base+0x19c4>
   118d0:	ldr	r2, [pc, #96]	; 11938 <close_stdout@@Base+0x10c>
   118d4:	str	r6, [sp]
   118d8:	mov	r1, r7
   118dc:	add	r2, pc, r2
   118e0:	mov	r3, r0
   118e4:	mov	r0, #0
   118e8:	bl	11000 <error@plt>
   118ec:	ldr	r3, [pc, #72]	; 1193c <close_stdout@@Base+0x110>
   118f0:	ldr	r3, [r4, r3]
   118f4:	ldr	r0, [r3]
   118f8:	bl	10f4c <_exit@plt>
   118fc:	bl	11090 <__errno_location@plt>
   11900:	ldr	r2, [pc, #56]	; 11940 <close_stdout@@Base+0x114>
   11904:	add	r2, pc, r2
   11908:	mov	r3, r0
   1190c:	mov	r0, r5
   11910:	ldr	r1, [r3]
   11914:	mov	r3, r6
   11918:	bl	11000 <error@plt>
   1191c:	b	118ec <close_stdout@@Base+0xc0>
   11920:			; <UNDEFINED> instruction: 0x000147bc
   11924:	andeq	r0, r0, r4, lsl #2
   11928:	andeq	r4, r1, ip, lsl r9
   1192c:	strdeq	r0, [r0], -r4
   11930:	andeq	r3, r0, r8, ror r1
   11934:	andeq	r4, r1, r4, asr #17
   11938:	andeq	r3, r0, ip, asr #2
   1193c:	andeq	r0, r0, ip, lsl #2
   11940:	andeq	r3, r0, r8, lsr #2
   11944:	ldrb	r3, [r0]
   11948:	cmp	r3, #47	; 0x2f
   1194c:	bne	11968 <close_stdout@@Base+0x13c>
   11950:	add	r2, r0, #1
   11954:	mov	r0, r2
   11958:	add	r2, r2, #1
   1195c:	ldrb	r3, [r0]
   11960:	cmp	r3, #47	; 0x2f
   11964:	beq	11954 <close_stdout@@Base+0x128>
   11968:	cmp	r3, #0
   1196c:	bxeq	lr
   11970:	mov	r2, r0
   11974:	mov	r1, #0
   11978:	cmp	r3, #47	; 0x2f
   1197c:	moveq	r1, #1
   11980:	beq	11990 <close_stdout@@Base+0x164>
   11984:	cmp	r1, #0
   11988:	movne	r0, r2
   1198c:	movne	r1, #0
   11990:	ldrb	r3, [r2, #1]!
   11994:	cmp	r3, #0
   11998:	bne	11978 <close_stdout@@Base+0x14c>
   1199c:	bx	lr
   119a0:	push	{r4, lr}
   119a4:	mov	r4, r0
   119a8:	bl	11078 <strlen@plt>
   119ac:	cmp	r0, #1
   119b0:	popls	{r4, pc}
   119b4:	sub	r3, r0, #1
   119b8:	ldrb	r2, [r4, r3]
   119bc:	cmp	r2, #47	; 0x2f
   119c0:	popne	{r4, pc}
   119c4:	mov	r0, r3
   119c8:	cmp	r0, #1
   119cc:	sub	r3, r3, #1
   119d0:	beq	119e4 <close_stdout@@Base+0x1b8>
   119d4:	ldrb	r2, [r4, r3]
   119d8:	cmp	r2, #47	; 0x2f
   119dc:	popne	{r4, pc}
   119e0:	b	119c4 <close_stdout@@Base+0x198>
   119e4:	pop	{r4, pc}
   119e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119ec:	mov	r9, r3
   119f0:	ldr	r4, [pc, #224]	; 11ad8 <close_stdout@@Base+0x2ac>
   119f4:	sub	sp, sp, #28
   119f8:	ldr	ip, [pc, #220]	; 11adc <close_stdout@@Base+0x2b0>
   119fc:	cmp	r0, #2
   11a00:	add	r4, pc, r4
   11a04:	ldr	r5, [pc, #212]	; 11ae0 <close_stdout@@Base+0x2b4>
   11a08:	mov	r7, #0
   11a0c:	mov	sl, r2
   11a10:	ldr	r6, [r4, ip]
   11a14:	ldr	r8, [sp, #64]	; 0x40
   11a18:	ldr	fp, [sp, #68]	; 0x44
   11a1c:	ldr	r3, [r6]
   11a20:	str	r3, [sp, #20]
   11a24:	ldr	r5, [r4, r5]
   11a28:	ldr	ip, [r5]
   11a2c:	str	r7, [r5]
   11a30:	beq	11a60 <close_stdout@@Base+0x234>
   11a34:	ldr	r3, [pc, #168]	; 11ae4 <close_stdout@@Base+0x2b8>
   11a38:	mov	r2, #0
   11a3c:	ldr	r0, [sp, #20]
   11a40:	ldr	r1, [r6]
   11a44:	str	ip, [r5]
   11a48:	ldr	r3, [r4, r3]
   11a4c:	cmp	r0, r1
   11a50:	str	r2, [r3]
   11a54:	bne	11ad4 <close_stdout@@Base+0x2a8>
   11a58:	add	sp, sp, #28
   11a5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11a60:	ldr	r2, [pc, #128]	; 11ae8 <close_stdout@@Base+0x2bc>
   11a64:	ldr	r3, [pc, #128]	; 11aec <close_stdout@@Base+0x2c0>
   11a68:	str	r7, [sp]
   11a6c:	add	r2, pc, r2
   11a70:	add	r3, pc, r3
   11a74:	str	ip, [sp, #12]
   11a78:	bl	11054 <getopt_long@plt>
   11a7c:	ldr	ip, [sp, #12]
   11a80:	cmn	r0, #1
   11a84:	beq	11a34 <close_stdout@@Base+0x208>
   11a88:	cmp	r0, #104	; 0x68
   11a8c:	beq	11ac8 <close_stdout@@Base+0x29c>
   11a90:	cmp	r0, #118	; 0x76
   11a94:	bne	11a34 <close_stdout@@Base+0x208>
   11a98:	ldr	ip, [pc, #80]	; 11af0 <close_stdout@@Base+0x2c4>
   11a9c:	add	r0, sp, #72	; 0x48
   11aa0:	str	r0, [sp, #16]
   11aa4:	mov	r1, sl
   11aa8:	mov	r2, r9
   11aac:	mov	r3, r8
   11ab0:	ldr	ip, [r4, ip]
   11ab4:	str	r0, [sp]
   11ab8:	ldr	r0, [ip]
   11abc:	bl	13764 <close_stdout@@Base+0x1f38>
   11ac0:	mov	r0, #0
   11ac4:	bl	1106c <exit@plt>
   11ac8:	mov	r0, r7
   11acc:	blx	fp
   11ad0:	b	11a98 <close_stdout@@Base+0x26c>
   11ad4:	bl	10f88 <__stack_chk_fail@plt>
   11ad8:	strdeq	r4, [r1], -r8
   11adc:	andeq	r0, r0, r8, ror #1
   11ae0:	andeq	r0, r0, r0, lsr #2
   11ae4:	andeq	r0, r0, ip, ror #1
   11ae8:	andeq	r2, r0, r4, asr #31
   11aec:	andeq	r4, r1, ip, lsr r4
   11af0:	andeq	r0, r0, r4, lsl #2
   11af4:	push	{r3, r4, r5, r6, r7, lr}
   11af8:	subs	r4, r0, #0
   11afc:	ldr	r5, [pc, #172]	; 11bb0 <close_stdout@@Base+0x384>
   11b00:	add	r5, pc, r5
   11b04:	beq	11b8c <close_stdout@@Base+0x360>
   11b08:	mov	r1, #47	; 0x2f
   11b0c:	bl	11120 <strrchr@plt>
   11b10:	subs	r6, r0, #0
   11b14:	beq	11b70 <close_stdout@@Base+0x344>
   11b18:	add	r7, r6, #1
   11b1c:	rsb	r3, r4, r7
   11b20:	cmp	r3, #6
   11b24:	ble	11b70 <close_stdout@@Base+0x344>
   11b28:	ldr	r1, [pc, #132]	; 11bb4 <close_stdout@@Base+0x388>
   11b2c:	sub	r0, r6, #6
   11b30:	mov	r2, #7
   11b34:	add	r1, pc, r1
   11b38:	bl	11150 <strncmp@plt>
   11b3c:	cmp	r0, #0
   11b40:	bne	11b70 <close_stdout@@Base+0x344>
   11b44:	ldr	r1, [pc, #108]	; 11bb8 <close_stdout@@Base+0x38c>
   11b48:	mov	r0, r7
   11b4c:	mov	r2, #3
   11b50:	add	r1, pc, r1
   11b54:	bl	11150 <strncmp@plt>
   11b58:	cmp	r0, #0
   11b5c:	movne	r4, r7
   11b60:	ldreq	r3, [pc, #84]	; 11bbc <close_stdout@@Base+0x390>
   11b64:	addeq	r4, r6, #4
   11b68:	ldreq	r3, [r5, r3]
   11b6c:	streq	r4, [r3]
   11b70:	ldr	r2, [pc, #72]	; 11bc0 <close_stdout@@Base+0x394>
   11b74:	ldr	r3, [pc, #72]	; 11bc4 <close_stdout@@Base+0x398>
   11b78:	ldr	r2, [r5, r2]
   11b7c:	str	r4, [r2]
   11b80:	ldr	r3, [r5, r3]
   11b84:	str	r4, [r3]
   11b88:	pop	{r3, r4, r5, r6, r7, pc}
   11b8c:	ldr	r3, [pc, #52]	; 11bc8 <close_stdout@@Base+0x39c>
   11b90:	mov	r1, #1
   11b94:	ldr	r0, [pc, #48]	; 11bcc <close_stdout@@Base+0x3a0>
   11b98:	mov	r2, #55	; 0x37
   11b9c:	ldr	r3, [r5, r3]
   11ba0:	add	r0, pc, r0
   11ba4:	ldr	r3, [r3]
   11ba8:	bl	10fb8 <fwrite@plt>
   11bac:	bl	1115c <abort@plt>
   11bb0:	strdeq	r4, [r1], -r8
   11bb4:	andeq	r2, r0, r8, asr #30
   11bb8:	andeq	r2, r0, r4, lsr pc
   11bbc:	andeq	r0, r0, r4, lsr #2
   11bc0:	andeq	r0, r0, r4, lsl r1
   11bc4:	andeq	r0, r0, r0, lsl r1
   11bc8:	strdeq	r0, [r0], -r4
   11bcc:	andeq	r2, r0, r4, lsr #29
   11bd0:	push	{r3, lr}
   11bd4:	mov	r3, r0
   11bd8:	mov	r2, #0
   11bdc:	cmp	r1, #8
   11be0:	str	r2, [r3], #4
   11be4:	add	r3, r3, #4
   11be8:	str	r2, [r0, #4]
   11bec:	str	r2, [r3], #4
   11bf0:	str	r2, [r3], #4
   11bf4:	str	r2, [r3], #4
   11bf8:	str	r2, [r3], #4
   11bfc:	str	r2, [r3], #4
   11c00:	str	r2, [r3], #4
   11c04:	str	r2, [r3], #4
   11c08:	str	r2, [r3], #4
   11c0c:	str	r2, [r3], #4
   11c10:	str	r2, [r3]
   11c14:	beq	11c20 <close_stdout@@Base+0x3f4>
   11c18:	str	r1, [r0]
   11c1c:	pop	{r3, pc}
   11c20:	bl	1115c <abort@plt>
   11c24:	push	{r4, r5, r6, lr}
   11c28:	mov	r4, r0
   11c2c:	mov	r6, r1
   11c30:	mov	r0, #0
   11c34:	mov	r1, r4
   11c38:	mov	r2, #5
   11c3c:	bl	10f7c <dcgettext@plt>
   11c40:	cmp	r0, r4
   11c44:	mov	r5, r0
   11c48:	beq	11c50 <close_stdout@@Base+0x424>
   11c4c:	pop	{r4, r5, r6, pc}
   11c50:	bl	13e20 <close_stdout@@Base+0x25f4>
   11c54:	ldrb	r3, [r0]
   11c58:	bic	r3, r3, #32
   11c5c:	cmp	r3, #85	; 0x55
   11c60:	bne	11cd4 <close_stdout@@Base+0x4a8>
   11c64:	ldrb	r3, [r0, #1]
   11c68:	bic	r3, r3, #32
   11c6c:	cmp	r3, #84	; 0x54
   11c70:	bne	11cc0 <close_stdout@@Base+0x494>
   11c74:	ldrb	r3, [r0, #2]
   11c78:	bic	r3, r3, #32
   11c7c:	cmp	r3, #70	; 0x46
   11c80:	bne	11cc0 <close_stdout@@Base+0x494>
   11c84:	ldrb	r3, [r0, #3]
   11c88:	cmp	r3, #45	; 0x2d
   11c8c:	bne	11cc0 <close_stdout@@Base+0x494>
   11c90:	ldrb	r3, [r0, #4]
   11c94:	cmp	r3, #56	; 0x38
   11c98:	bne	11cc0 <close_stdout@@Base+0x494>
   11c9c:	ldrb	r3, [r0, #5]
   11ca0:	cmp	r3, #0
   11ca4:	bne	11cc0 <close_stdout@@Base+0x494>
   11ca8:	ldrb	r3, [r5]
   11cac:	cmp	r3, #96	; 0x60
   11cb0:	beq	11d4c <close_stdout@@Base+0x520>
   11cb4:	ldr	r0, [pc, #180]	; 11d70 <close_stdout@@Base+0x544>
   11cb8:	add	r0, pc, r0
   11cbc:	pop	{r4, r5, r6, pc}
   11cc0:	cmp	r6, #7
   11cc4:	beq	11d58 <close_stdout@@Base+0x52c>
   11cc8:	ldr	r0, [pc, #164]	; 11d74 <close_stdout@@Base+0x548>
   11ccc:	add	r0, pc, r0
   11cd0:	pop	{r4, r5, r6, pc}
   11cd4:	cmp	r3, #71	; 0x47
   11cd8:	bne	11cc0 <close_stdout@@Base+0x494>
   11cdc:	ldrb	r3, [r0, #1]
   11ce0:	bic	r3, r3, #32
   11ce4:	cmp	r3, #66	; 0x42
   11ce8:	bne	11cc0 <close_stdout@@Base+0x494>
   11cec:	ldrb	r3, [r0, #2]
   11cf0:	cmp	r3, #49	; 0x31
   11cf4:	bne	11cc0 <close_stdout@@Base+0x494>
   11cf8:	ldrb	r3, [r0, #3]
   11cfc:	cmp	r3, #56	; 0x38
   11d00:	bne	11cc0 <close_stdout@@Base+0x494>
   11d04:	ldrb	r3, [r0, #4]
   11d08:	cmp	r3, #48	; 0x30
   11d0c:	bne	11cc0 <close_stdout@@Base+0x494>
   11d10:	ldrb	r3, [r0, #5]
   11d14:	cmp	r3, #51	; 0x33
   11d18:	bne	11cc0 <close_stdout@@Base+0x494>
   11d1c:	ldrb	r3, [r0, #6]
   11d20:	cmp	r3, #48	; 0x30
   11d24:	bne	11cc0 <close_stdout@@Base+0x494>
   11d28:	ldrb	r3, [r0, #7]
   11d2c:	cmp	r3, #0
   11d30:	bne	11cc0 <close_stdout@@Base+0x494>
   11d34:	ldrb	r3, [r5]
   11d38:	cmp	r3, #96	; 0x60
   11d3c:	beq	11d64 <close_stdout@@Base+0x538>
   11d40:	ldr	r0, [pc, #48]	; 11d78 <close_stdout@@Base+0x54c>
   11d44:	add	r0, pc, r0
   11d48:	pop	{r4, r5, r6, pc}
   11d4c:	ldr	r0, [pc, #40]	; 11d7c <close_stdout@@Base+0x550>
   11d50:	add	r0, pc, r0
   11d54:	pop	{r4, r5, r6, pc}
   11d58:	ldr	r0, [pc, #32]	; 11d80 <close_stdout@@Base+0x554>
   11d5c:	add	r0, pc, r0
   11d60:	pop	{r4, r5, r6, pc}
   11d64:	ldr	r0, [pc, #24]	; 11d84 <close_stdout@@Base+0x558>
   11d68:	add	r0, pc, r0
   11d6c:	pop	{r4, r5, r6, pc}
   11d70:	strdeq	r2, [r0], -r0
   11d74:	andeq	r2, r0, r4, ror #27
   11d78:	andeq	r2, r0, r8, ror #26
   11d7c:	andeq	r2, r0, ip, ror #26
   11d80:	andeq	r2, r0, r8, asr sp
   11d84:	andeq	r2, r0, r0, asr sp
   11d88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11d8c:	sub	sp, sp, #124	; 0x7c
   11d90:	ldr	ip, [pc, #3304]	; 12a80 <close_stdout@@Base+0x1254>
   11d94:	mov	sl, r1
   11d98:	str	r0, [sp, #40]	; 0x28
   11d9c:	mov	r8, r3
   11da0:	ldr	r0, [pc, #3292]	; 12a84 <close_stdout@@Base+0x1258>
   11da4:	add	ip, pc, ip
   11da8:	str	r2, [sp, #32]
   11dac:	ldr	r1, [sp, #164]	; 0xa4
   11db0:	mov	r3, ip
   11db4:	ldr	r0, [ip, r0]
   11db8:	ldr	r2, [sp, #172]	; 0xac
   11dbc:	ubfx	r1, r1, #1, #1
   11dc0:	str	r1, [sp, #36]	; 0x24
   11dc4:	str	r0, [sp, #56]	; 0x38
   11dc8:	ldr	r0, [sp, #168]	; 0xa8
   11dcc:	ldr	r1, [sp, #176]	; 0xb0
   11dd0:	str	r2, [sp, #72]	; 0x48
   11dd4:	str	r0, [sp, #48]	; 0x30
   11dd8:	ldr	r0, [sp, #56]	; 0x38
   11ddc:	str	r1, [sp, #68]	; 0x44
   11de0:	ldr	r3, [r0]
   11de4:	str	r3, [sp, #116]	; 0x74
   11de8:	bl	10fd0 <__ctype_get_mb_cur_max@plt>
   11dec:	ldr	r2, [sp, #160]	; 0xa0
   11df0:	str	r0, [sp, #64]	; 0x40
   11df4:	cmp	r2, #8
   11df8:	addls	pc, pc, r2, lsl #2
   11dfc:	b	1295c <close_stdout@@Base+0x1130>
   11e00:	b	11e24 <close_stdout@@Base+0x5f8>
   11e04:	b	12674 <close_stdout@@Base+0xe48>
   11e08:	b	126a4 <close_stdout@@Base+0xe78>
   11e0c:	b	12554 <close_stdout@@Base+0xd28>
   11e10:	b	12594 <close_stdout@@Base+0xd68>
   11e14:	b	125c0 <close_stdout@@Base+0xd94>
   11e18:	b	125e0 <close_stdout@@Base+0xdb4>
   11e1c:	b	125e0 <close_stdout@@Base+0xdb4>
   11e20:	b	125e0 <close_stdout@@Base+0xdb4>
   11e24:	mov	r2, #0
   11e28:	str	r2, [sp, #36]	; 0x24
   11e2c:	mov	r9, r2
   11e30:	str	r2, [sp, #24]
   11e34:	str	r2, [sp, #28]
   11e38:	str	r2, [sp, #52]	; 0x34
   11e3c:	ldr	r0, [sp, #36]	; 0x24
   11e40:	mov	fp, #0
   11e44:	ldr	r1, [sp, #24]
   11e48:	eor	r2, r0, #1
   11e4c:	eor	r3, r1, #1
   11e50:	and	r3, r2, r3
   11e54:	and	r2, r1, r0
   11e58:	str	r3, [sp, #44]	; 0x2c
   11e5c:	str	r2, [sp, #76]	; 0x4c
   11e60:	cmn	r8, #1
   11e64:	beq	121e4 <close_stdout@@Base+0x9b8>
   11e68:	subs	r3, fp, r8
   11e6c:	movne	r3, #1
   11e70:	cmp	r3, #0
   11e74:	beq	121fc <close_stdout@@Base+0x9d0>
   11e78:	ldr	r3, [sp, #28]
   11e7c:	ldr	r0, [sp, #24]
   11e80:	adds	r7, r3, #0
   11e84:	movne	r7, #1
   11e88:	ands	r6, r7, r0
   11e8c:	bne	126e8 <close_stdout@@Base+0xebc>
   11e90:	ldr	r1, [sp, #32]
   11e94:	add	r5, r1, fp
   11e98:	ldrb	r4, [r5]
   11e9c:	cmp	r4, #126	; 0x7e
   11ea0:	addls	pc, pc, r4, lsl #2
   11ea4:	b	12468 <close_stdout@@Base+0xc3c>
   11ea8:	b	12374 <close_stdout@@Base+0xb48>
   11eac:	b	12468 <close_stdout@@Base+0xc3c>
   11eb0:	b	12468 <close_stdout@@Base+0xc3c>
   11eb4:	b	12468 <close_stdout@@Base+0xc3c>
   11eb8:	b	12468 <close_stdout@@Base+0xc3c>
   11ebc:	b	12468 <close_stdout@@Base+0xc3c>
   11ec0:	b	12468 <close_stdout@@Base+0xc3c>
   11ec4:	b	1235c <close_stdout@@Base+0xb30>
   11ec8:	b	12344 <close_stdout@@Base+0xb18>
   11ecc:	b	1236c <close_stdout@@Base+0xb40>
   11ed0:	b	12364 <close_stdout@@Base+0xb38>
   11ed4:	b	12354 <close_stdout@@Base+0xb28>
   11ed8:	b	1234c <close_stdout@@Base+0xb20>
   11edc:	b	12310 <close_stdout@@Base+0xae4>
   11ee0:	b	12468 <close_stdout@@Base+0xc3c>
   11ee4:	b	12468 <close_stdout@@Base+0xc3c>
   11ee8:	b	12468 <close_stdout@@Base+0xc3c>
   11eec:	b	12468 <close_stdout@@Base+0xc3c>
   11ef0:	b	12468 <close_stdout@@Base+0xc3c>
   11ef4:	b	12468 <close_stdout@@Base+0xc3c>
   11ef8:	b	12468 <close_stdout@@Base+0xc3c>
   11efc:	b	12468 <close_stdout@@Base+0xc3c>
   11f00:	b	12468 <close_stdout@@Base+0xc3c>
   11f04:	b	12468 <close_stdout@@Base+0xc3c>
   11f08:	b	12468 <close_stdout@@Base+0xc3c>
   11f0c:	b	12468 <close_stdout@@Base+0xc3c>
   11f10:	b	12468 <close_stdout@@Base+0xc3c>
   11f14:	b	12468 <close_stdout@@Base+0xc3c>
   11f18:	b	12468 <close_stdout@@Base+0xc3c>
   11f1c:	b	12468 <close_stdout@@Base+0xc3c>
   11f20:	b	12468 <close_stdout@@Base+0xc3c>
   11f24:	b	12468 <close_stdout@@Base+0xc3c>
   11f28:	b	1229c <close_stdout@@Base+0xa70>
   11f2c:	b	1229c <close_stdout@@Base+0xa70>
   11f30:	b	1229c <close_stdout@@Base+0xa70>
   11f34:	b	12294 <close_stdout@@Base+0xa68>
   11f38:	b	1229c <close_stdout@@Base+0xa70>
   11f3c:	b	12170 <close_stdout@@Base+0x944>
   11f40:	b	1229c <close_stdout@@Base+0xa70>
   11f44:	b	12410 <close_stdout@@Base+0xbe4>
   11f48:	b	1229c <close_stdout@@Base+0xa70>
   11f4c:	b	1229c <close_stdout@@Base+0xa70>
   11f50:	b	1229c <close_stdout@@Base+0xa70>
   11f54:	b	12170 <close_stdout@@Base+0x944>
   11f58:	b	12170 <close_stdout@@Base+0x944>
   11f5c:	b	12170 <close_stdout@@Base+0x944>
   11f60:	b	12170 <close_stdout@@Base+0x944>
   11f64:	b	12170 <close_stdout@@Base+0x944>
   11f68:	b	12170 <close_stdout@@Base+0x944>
   11f6c:	b	12170 <close_stdout@@Base+0x944>
   11f70:	b	12170 <close_stdout@@Base+0x944>
   11f74:	b	12170 <close_stdout@@Base+0x944>
   11f78:	b	12170 <close_stdout@@Base+0x944>
   11f7c:	b	12170 <close_stdout@@Base+0x944>
   11f80:	b	12170 <close_stdout@@Base+0x944>
   11f84:	b	12170 <close_stdout@@Base+0x944>
   11f88:	b	12170 <close_stdout@@Base+0x944>
   11f8c:	b	12170 <close_stdout@@Base+0x944>
   11f90:	b	12170 <close_stdout@@Base+0x944>
   11f94:	b	1229c <close_stdout@@Base+0xa70>
   11f98:	b	1229c <close_stdout@@Base+0xa70>
   11f9c:	b	1229c <close_stdout@@Base+0xa70>
   11fa0:	b	1229c <close_stdout@@Base+0xa70>
   11fa4:	b	120a4 <close_stdout@@Base+0x878>
   11fa8:	b	12468 <close_stdout@@Base+0xc3c>
   11fac:	b	12170 <close_stdout@@Base+0x944>
   11fb0:	b	12170 <close_stdout@@Base+0x944>
   11fb4:	b	12170 <close_stdout@@Base+0x944>
   11fb8:	b	12170 <close_stdout@@Base+0x944>
   11fbc:	b	12170 <close_stdout@@Base+0x944>
   11fc0:	b	12170 <close_stdout@@Base+0x944>
   11fc4:	b	12170 <close_stdout@@Base+0x944>
   11fc8:	b	12170 <close_stdout@@Base+0x944>
   11fcc:	b	12170 <close_stdout@@Base+0x944>
   11fd0:	b	12170 <close_stdout@@Base+0x944>
   11fd4:	b	12170 <close_stdout@@Base+0x944>
   11fd8:	b	12170 <close_stdout@@Base+0x944>
   11fdc:	b	12170 <close_stdout@@Base+0x944>
   11fe0:	b	12170 <close_stdout@@Base+0x944>
   11fe4:	b	12170 <close_stdout@@Base+0x944>
   11fe8:	b	12170 <close_stdout@@Base+0x944>
   11fec:	b	12170 <close_stdout@@Base+0x944>
   11ff0:	b	12170 <close_stdout@@Base+0x944>
   11ff4:	b	12170 <close_stdout@@Base+0x944>
   11ff8:	b	12170 <close_stdout@@Base+0x944>
   11ffc:	b	12170 <close_stdout@@Base+0x944>
   12000:	b	12170 <close_stdout@@Base+0x944>
   12004:	b	12170 <close_stdout@@Base+0x944>
   12008:	b	12170 <close_stdout@@Base+0x944>
   1200c:	b	12170 <close_stdout@@Base+0x944>
   12010:	b	12170 <close_stdout@@Base+0x944>
   12014:	b	1229c <close_stdout@@Base+0xa70>
   12018:	b	123f4 <close_stdout@@Base+0xbc8>
   1201c:	b	12170 <close_stdout@@Base+0x944>
   12020:	b	1229c <close_stdout@@Base+0xa70>
   12024:	b	12170 <close_stdout@@Base+0x944>
   12028:	b	1229c <close_stdout@@Base+0xa70>
   1202c:	b	12170 <close_stdout@@Base+0x944>
   12030:	b	12170 <close_stdout@@Base+0x944>
   12034:	b	12170 <close_stdout@@Base+0x944>
   12038:	b	12170 <close_stdout@@Base+0x944>
   1203c:	b	12170 <close_stdout@@Base+0x944>
   12040:	b	12170 <close_stdout@@Base+0x944>
   12044:	b	12170 <close_stdout@@Base+0x944>
   12048:	b	12170 <close_stdout@@Base+0x944>
   1204c:	b	12170 <close_stdout@@Base+0x944>
   12050:	b	12170 <close_stdout@@Base+0x944>
   12054:	b	12170 <close_stdout@@Base+0x944>
   12058:	b	12170 <close_stdout@@Base+0x944>
   1205c:	b	12170 <close_stdout@@Base+0x944>
   12060:	b	12170 <close_stdout@@Base+0x944>
   12064:	b	12170 <close_stdout@@Base+0x944>
   12068:	b	12170 <close_stdout@@Base+0x944>
   1206c:	b	12170 <close_stdout@@Base+0x944>
   12070:	b	12170 <close_stdout@@Base+0x944>
   12074:	b	12170 <close_stdout@@Base+0x944>
   12078:	b	12170 <close_stdout@@Base+0x944>
   1207c:	b	12170 <close_stdout@@Base+0x944>
   12080:	b	12170 <close_stdout@@Base+0x944>
   12084:	b	12170 <close_stdout@@Base+0x944>
   12088:	b	12170 <close_stdout@@Base+0x944>
   1208c:	b	12170 <close_stdout@@Base+0x944>
   12090:	b	12170 <close_stdout@@Base+0x944>
   12094:	b	1227c <close_stdout@@Base+0xa50>
   12098:	b	1229c <close_stdout@@Base+0xa70>
   1209c:	b	1227c <close_stdout@@Base+0xa50>
   120a0:	b	12294 <close_stdout@@Base+0xa68>
   120a4:	ldr	r3, [sp, #160]	; 0xa0
   120a8:	cmp	r3, #2
   120ac:	beq	12938 <close_stdout@@Base+0x110c>
   120b0:	cmp	r3, #3
   120b4:	bne	12170 <close_stdout@@Base+0x944>
   120b8:	ldr	r1, [sp, #164]	; 0xa4
   120bc:	tst	r1, #4
   120c0:	beq	12170 <close_stdout@@Base+0x944>
   120c4:	add	r3, fp, #2
   120c8:	cmp	r8, r3
   120cc:	bls	12170 <close_stdout@@Base+0x944>
   120d0:	ldrb	r2, [r5, #1]
   120d4:	mov	r1, #1
   120d8:	cmp	r2, #63	; 0x3f
   120dc:	bne	12170 <close_stdout@@Base+0x944>
   120e0:	ldr	r0, [sp, #32]
   120e4:	ldrb	ip, [r0, r3]
   120e8:	sub	r0, ip, #33	; 0x21
   120ec:	uxtb	r0, r0
   120f0:	cmp	r0, #29
   120f4:	bhi	12170 <close_stdout@@Base+0x944>
   120f8:	lsl	r1, r1, r0
   120fc:	movw	r0, #20929	; 0x51c1
   12100:	movt	r0, #14336	; 0x3800
   12104:	and	r0, r1, r0
   12108:	cmp	r0, #0
   1210c:	beq	12170 <close_stdout@@Base+0x944>
   12110:	ldr	r1, [sp, #36]	; 0x24
   12114:	cmp	r1, #0
   12118:	bne	122b8 <close_stdout@@Base+0xa8c>
   1211c:	cmp	r9, sl
   12120:	mov	r4, ip
   12124:	mov	fp, r3
   12128:	ldrcc	r0, [sp, #40]	; 0x28
   1212c:	strbcc	r2, [r0, r9]
   12130:	add	r2, r9, #1
   12134:	cmp	sl, r2
   12138:	ldrhi	r0, [sp, #40]	; 0x28
   1213c:	movhi	r1, #34	; 0x22
   12140:	strbhi	r1, [r0, r2]
   12144:	add	r2, r9, #2
   12148:	cmp	sl, r2
   1214c:	ldrhi	r0, [sp, #40]	; 0x28
   12150:	movhi	r1, #34	; 0x22
   12154:	strbhi	r1, [r0, r2]
   12158:	add	r2, r9, #3
   1215c:	cmp	sl, r2
   12160:	add	r9, r9, #4
   12164:	ldrhi	r0, [sp, #40]	; 0x28
   12168:	movhi	r1, #63	; 0x3f
   1216c:	strbhi	r1, [r0, r2]
   12170:	ldr	r0, [sp, #44]	; 0x2c
   12174:	cmp	r0, #0
   12178:	bne	121a0 <close_stdout@@Base+0x974>
   1217c:	ldr	r1, [sp, #48]	; 0x30
   12180:	cmp	r1, #0
   12184:	beq	121a0 <close_stdout@@Base+0x974>
   12188:	ubfx	r2, r4, #5, #8
   1218c:	and	r3, r4, #31
   12190:	ldr	r2, [r1, r2, lsl #2]
   12194:	lsr	r3, r2, r3
   12198:	tst	r3, #1
   1219c:	bne	121a8 <close_stdout@@Base+0x97c>
   121a0:	cmp	r6, #0
   121a4:	beq	121c8 <close_stdout@@Base+0x99c>
   121a8:	ldr	r2, [sp, #36]	; 0x24
   121ac:	cmp	r2, #0
   121b0:	bne	122b8 <close_stdout@@Base+0xa8c>
   121b4:	cmp	r9, sl
   121b8:	ldrcc	r0, [sp, #40]	; 0x28
   121bc:	movcc	r3, #92	; 0x5c
   121c0:	strbcc	r3, [r0, r9]
   121c4:	add	r9, r9, #1
   121c8:	add	fp, fp, #1
   121cc:	cmp	r9, sl
   121d0:	ldrcc	r1, [sp, #40]	; 0x28
   121d4:	strbcc	r4, [r1, r9]
   121d8:	cmn	r8, #1
   121dc:	add	r9, r9, #1
   121e0:	bne	11e68 <close_stdout@@Base+0x63c>
   121e4:	ldr	r2, [sp, #32]
   121e8:	ldrb	r3, [r2, fp]
   121ec:	adds	r3, r3, #0
   121f0:	movne	r3, #1
   121f4:	cmp	r3, #0
   121f8:	bne	11e78 <close_stdout@@Base+0x64c>
   121fc:	ldr	r3, [sp, #160]	; 0xa0
   12200:	cmp	r9, #0
   12204:	cmpeq	r3, #2
   12208:	bne	12218 <close_stdout@@Base+0x9ec>
   1220c:	ldr	r0, [sp, #36]	; 0x24
   12210:	cmp	r0, #0
   12214:	bne	122b8 <close_stdout@@Base+0xa8c>
   12218:	ldr	r1, [sp, #36]	; 0x24
   1221c:	ldr	r2, [sp, #52]	; 0x34
   12220:	eor	r3, r1, #1
   12224:	cmp	r2, #0
   12228:	moveq	r3, #0
   1222c:	andne	r3, r3, #1
   12230:	cmp	r3, #0
   12234:	beq	12260 <close_stdout@@Base+0xa34>
   12238:	ldrb	r3, [r2]
   1223c:	cmp	r3, #0
   12240:	beq	12260 <close_stdout@@Base+0xa34>
   12244:	ldr	r1, [sp, #40]	; 0x28
   12248:	cmp	sl, r9
   1224c:	strbhi	r3, [r1, r9]
   12250:	ldrb	r3, [r2, #1]!
   12254:	add	r9, r9, #1
   12258:	cmp	r3, #0
   1225c:	bne	12248 <close_stdout@@Base+0xa1c>
   12260:	cmp	r9, sl
   12264:	movcs	r0, r9
   12268:	ldrcc	r1, [sp, #40]	; 0x28
   1226c:	movcc	r3, #0
   12270:	movcc	r0, r9
   12274:	strbcc	r3, [r1, r9]
   12278:	b	122f4 <close_stdout@@Base+0xac8>
   1227c:	cmn	r8, #1
   12280:	beq	12948 <close_stdout@@Base+0x111c>
   12284:	subs	r3, r8, #1
   12288:	movne	r3, #1
   1228c:	cmp	r3, #0
   12290:	bne	12170 <close_stdout@@Base+0x944>
   12294:	cmp	fp, #0
   12298:	bne	12170 <close_stdout@@Base+0x944>
   1229c:	ldr	r3, [sp, #36]	; 0x24
   122a0:	ldr	r0, [sp, #160]	; 0xa0
   122a4:	cmp	r0, #2
   122a8:	movne	r3, #0
   122ac:	andeq	r3, r3, #1
   122b0:	cmp	r3, #0
   122b4:	beq	12170 <close_stdout@@Base+0x944>
   122b8:	ldr	r2, [sp, #164]	; 0xa4
   122bc:	mov	ip, #0
   122c0:	ldr	r0, [sp, #160]	; 0xa0
   122c4:	bic	r3, r2, #2
   122c8:	ldr	r1, [sp, #72]	; 0x48
   122cc:	ldr	r2, [sp, #68]	; 0x44
   122d0:	stm	sp, {r0, r3}
   122d4:	mov	r3, r8
   122d8:	str	r1, [sp, #12]
   122dc:	mov	r1, sl
   122e0:	str	r2, [sp, #16]
   122e4:	ldr	r0, [sp, #40]	; 0x28
   122e8:	ldr	r2, [sp, #32]
   122ec:	str	ip, [sp, #8]
   122f0:	bl	11d88 <close_stdout@@Base+0x55c>
   122f4:	ldr	r1, [sp, #56]	; 0x38
   122f8:	ldr	r2, [sp, #116]	; 0x74
   122fc:	ldr	r3, [r1]
   12300:	cmp	r2, r3
   12304:	bne	12a38 <close_stdout@@Base+0x120c>
   12308:	add	sp, sp, #124	; 0x7c
   1230c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12310:	mov	r3, #114	; 0x72
   12314:	ldr	r2, [sp, #36]	; 0x24
   12318:	ldr	r0, [sp, #160]	; 0xa0
   1231c:	cmp	r0, #2
   12320:	movne	r2, #0
   12324:	andeq	r2, r2, #1
   12328:	cmp	r2, #0
   1232c:	bne	122b8 <close_stdout@@Base+0xa8c>
   12330:	ldr	r1, [sp, #24]
   12334:	cmp	r1, #0
   12338:	beq	12170 <close_stdout@@Base+0x944>
   1233c:	mov	r4, r3
   12340:	b	121a8 <close_stdout@@Base+0x97c>
   12344:	mov	r3, #98	; 0x62
   12348:	b	12330 <close_stdout@@Base+0xb04>
   1234c:	mov	r3, #102	; 0x66
   12350:	b	12330 <close_stdout@@Base+0xb04>
   12354:	mov	r3, #118	; 0x76
   12358:	b	12330 <close_stdout@@Base+0xb04>
   1235c:	mov	r3, #97	; 0x61
   12360:	b	12330 <close_stdout@@Base+0xb04>
   12364:	mov	r3, #110	; 0x6e
   12368:	b	12314 <close_stdout@@Base+0xae8>
   1236c:	mov	r3, #116	; 0x74
   12370:	b	12314 <close_stdout@@Base+0xae8>
   12374:	ldr	r2, [sp, #24]
   12378:	cmp	r2, #0
   1237c:	beq	12924 <close_stdout@@Base+0x10f8>
   12380:	ldr	r3, [sp, #36]	; 0x24
   12384:	cmp	r3, #0
   12388:	bne	122b8 <close_stdout@@Base+0xa8c>
   1238c:	cmp	r9, sl
   12390:	add	r2, r9, #1
   12394:	ldrcc	r0, [sp, #40]	; 0x28
   12398:	movcc	r3, #92	; 0x5c
   1239c:	strbcc	r3, [r0, r9]
   123a0:	add	r3, fp, #1
   123a4:	cmp	r8, r3
   123a8:	bls	123e8 <close_stdout@@Base+0xbbc>
   123ac:	ldr	r1, [sp, #32]
   123b0:	ldrb	r3, [r1, r3]
   123b4:	sub	r3, r3, #48	; 0x30
   123b8:	cmp	r3, #9
   123bc:	bhi	123e8 <close_stdout@@Base+0xbbc>
   123c0:	cmp	sl, r2
   123c4:	ldrhi	r0, [sp, #40]	; 0x28
   123c8:	movhi	r3, #48	; 0x30
   123cc:	strbhi	r3, [r0, r2]
   123d0:	add	r3, r9, #2
   123d4:	cmp	sl, r3
   123d8:	ldrhi	r1, [sp, #40]	; 0x28
   123dc:	movhi	r2, #48	; 0x30
   123e0:	strbhi	r2, [r1, r3]
   123e4:	add	r2, r9, #3
   123e8:	mov	r9, r2
   123ec:	mov	r4, #48	; 0x30
   123f0:	b	1217c <close_stdout@@Base+0x950>
   123f4:	ldr	r1, [sp, #76]	; 0x4c
   123f8:	cmp	r1, #0
   123fc:	beq	12408 <close_stdout@@Base+0xbdc>
   12400:	cmp	r7, #0
   12404:	bne	121c8 <close_stdout@@Base+0x99c>
   12408:	mov	r3, r4
   1240c:	b	12314 <close_stdout@@Base+0xae8>
   12410:	ldr	r1, [sp, #160]	; 0xa0
   12414:	cmp	r1, #2
   12418:	bne	12170 <close_stdout@@Base+0x944>
   1241c:	ldr	r2, [sp, #36]	; 0x24
   12420:	cmp	r2, #0
   12424:	bne	122b8 <close_stdout@@Base+0xa8c>
   12428:	cmp	r9, sl
   1242c:	ldrcc	r0, [sp, #40]	; 0x28
   12430:	movcc	r3, #39	; 0x27
   12434:	strbcc	r3, [r0, r9]
   12438:	add	r3, r9, #1
   1243c:	cmp	sl, r3
   12440:	ldrhi	r1, [sp, #40]	; 0x28
   12444:	movhi	r2, #92	; 0x5c
   12448:	strbhi	r2, [r1, r3]
   1244c:	add	r3, r9, #2
   12450:	cmp	sl, r3
   12454:	add	r9, r9, #3
   12458:	ldrhi	r0, [sp, #40]	; 0x28
   1245c:	movhi	r2, #39	; 0x27
   12460:	strbhi	r2, [r0, r3]
   12464:	b	12170 <close_stdout@@Base+0x944>
   12468:	ldr	r1, [sp, #64]	; 0x40
   1246c:	cmp	r1, #1
   12470:	bne	12768 <close_stdout@@Base+0xf3c>
   12474:	bl	11060 <__ctype_b_loc@plt>
   12478:	ldr	r2, [sp, #64]	; 0x40
   1247c:	sxth	r3, r4
   12480:	str	r2, [sp, #60]	; 0x3c
   12484:	lsl	r3, r3, #1
   12488:	ldr	r2, [r0]
   1248c:	ldrh	r2, [r2, r3]
   12490:	eor	r2, r2, #16384	; 0x4000
   12494:	ubfx	r2, r2, #14, #1
   12498:	ldr	r1, [sp, #24]
   1249c:	ands	r2, r2, r1
   124a0:	beq	12170 <close_stdout@@Base+0x944>
   124a4:	ldr	r3, [sp, #60]	; 0x3c
   124a8:	mov	r0, #92	; 0x5c
   124ac:	ldr	r7, [sp, #36]	; 0x24
   124b0:	add	r1, r3, fp
   124b4:	str	r8, [sp, #60]	; 0x3c
   124b8:	ldr	r3, [sp, #40]	; 0x28
   124bc:	b	12520 <close_stdout@@Base+0xcf4>
   124c0:	cmp	r7, #0
   124c4:	bne	12960 <close_stdout@@Base+0x1134>
   124c8:	add	ip, r9, #1
   124cc:	cmp	r9, sl
   124d0:	strbcc	r0, [r3, r9]
   124d4:	cmp	sl, ip
   124d8:	lsrhi	r8, r4, #6
   124dc:	addhi	r8, r8, #48	; 0x30
   124e0:	strbhi	r8, [r3, ip]
   124e4:	add	ip, r9, #2
   124e8:	add	r9, r9, #3
   124ec:	cmp	sl, ip
   124f0:	ubfxhi	r8, r4, #3, #3
   124f4:	and	r4, r4, #7
   124f8:	add	r4, r4, #48	; 0x30
   124fc:	addhi	r8, r8, #48	; 0x30
   12500:	strbhi	r8, [r3, ip]
   12504:	add	fp, fp, #1
   12508:	cmp	r1, fp
   1250c:	bls	1254c <close_stdout@@Base+0xd20>
   12510:	cmp	r9, sl
   12514:	strbcc	r4, [r3, r9]
   12518:	ldrb	r4, [r5, #1]!
   1251c:	add	r9, r9, #1
   12520:	cmp	r2, #0
   12524:	bne	124c0 <close_stdout@@Base+0xc94>
   12528:	cmp	r6, #0
   1252c:	beq	12504 <close_stdout@@Base+0xcd8>
   12530:	add	fp, fp, #1
   12534:	cmp	r9, sl
   12538:	strbcc	r0, [r3, r9]
   1253c:	cmp	r1, fp
   12540:	add	r9, r9, #1
   12544:	mov	r6, #0
   12548:	bhi	12510 <close_stdout@@Base+0xce4>
   1254c:	ldr	r8, [sp, #60]	; 0x3c
   12550:	b	121cc <close_stdout@@Base+0x9a0>
   12554:	ldr	r3, [sp, #36]	; 0x24
   12558:	cmp	r3, #0
   1255c:	bne	12a60 <close_stdout@@Base+0x1234>
   12560:	cmp	sl, #0
   12564:	beq	12978 <close_stdout@@Base+0x114c>
   12568:	ldr	r1, [sp, #40]	; 0x28
   1256c:	mov	r0, #1
   12570:	ldr	r2, [pc, #1296]	; 12a88 <close_stdout@@Base+0x125c>
   12574:	mov	r3, #34	; 0x22
   12578:	str	r0, [sp, #24]
   1257c:	mov	r9, r0
   12580:	add	r2, pc, r2
   12584:	str	r0, [sp, #28]
   12588:	strb	r3, [r1]
   1258c:	str	r2, [sp, #52]	; 0x34
   12590:	b	11e3c <close_stdout@@Base+0x610>
   12594:	ldr	r3, [pc, #1264]	; 12a8c <close_stdout@@Base+0x1260>
   12598:	mov	r2, #1
   1259c:	mov	r0, #3
   125a0:	str	r2, [sp, #36]	; 0x24
   125a4:	add	r3, pc, r3
   125a8:	str	r2, [sp, #24]
   125ac:	str	r3, [sp, #52]	; 0x34
   125b0:	mov	r9, #0
   125b4:	str	r2, [sp, #28]
   125b8:	str	r0, [sp, #160]	; 0xa0
   125bc:	b	11e3c <close_stdout@@Base+0x610>
   125c0:	mov	r0, #0
   125c4:	mov	r1, #1
   125c8:	str	r0, [sp, #36]	; 0x24
   125cc:	mov	r9, r0
   125d0:	str	r1, [sp, #24]
   125d4:	str	r0, [sp, #28]
   125d8:	str	r0, [sp, #52]	; 0x34
   125dc:	b	11e3c <close_stdout@@Base+0x610>
   125e0:	ldr	r3, [sp, #160]	; 0xa0
   125e4:	cmp	r3, #8
   125e8:	beq	12614 <close_stdout@@Base+0xde8>
   125ec:	ldr	r0, [pc, #1180]	; 12a90 <close_stdout@@Base+0x1264>
   125f0:	mov	r1, r3
   125f4:	add	r0, pc, r0
   125f8:	bl	11c24 <close_stdout@@Base+0x3f8>
   125fc:	ldr	r1, [sp, #160]	; 0xa0
   12600:	str	r0, [sp, #72]	; 0x48
   12604:	ldr	r0, [pc, #1160]	; 12a94 <close_stdout@@Base+0x1268>
   12608:	add	r0, pc, r0
   1260c:	bl	11c24 <close_stdout@@Base+0x3f8>
   12610:	str	r0, [sp, #68]	; 0x44
   12614:	ldr	r0, [sp, #36]	; 0x24
   12618:	cmp	r0, #0
   1261c:	movne	r9, #0
   12620:	bne	12658 <close_stdout@@Base+0xe2c>
   12624:	ldr	r1, [sp, #72]	; 0x48
   12628:	ldrb	r3, [r1]
   1262c:	cmp	r3, #0
   12630:	beq	12a30 <close_stdout@@Base+0x1204>
   12634:	mov	r2, r1
   12638:	ldr	r1, [sp, #40]	; 0x28
   1263c:	mov	r9, r0
   12640:	cmp	r9, sl
   12644:	strbcc	r3, [r1, r9]
   12648:	ldrb	r3, [r2, #1]!
   1264c:	add	r9, r9, #1
   12650:	cmp	r3, #0
   12654:	bne	12640 <close_stdout@@Base+0xe14>
   12658:	ldr	r0, [sp, #68]	; 0x44
   1265c:	str	r0, [sp, #52]	; 0x34
   12660:	bl	11078 <strlen@plt>
   12664:	mov	r2, #1
   12668:	str	r2, [sp, #24]
   1266c:	str	r0, [sp, #28]
   12670:	b	11e3c <close_stdout@@Base+0x610>
   12674:	ldr	r3, [pc, #1052]	; 12a98 <close_stdout@@Base+0x126c>
   12678:	mov	r2, #0
   1267c:	mov	r1, #1
   12680:	mov	r0, #2
   12684:	add	r3, pc, r3
   12688:	str	r1, [sp, #36]	; 0x24
   1268c:	str	r2, [sp, #24]
   12690:	mov	r9, r2
   12694:	str	r1, [sp, #28]
   12698:	str	r3, [sp, #52]	; 0x34
   1269c:	str	r0, [sp, #160]	; 0xa0
   126a0:	b	11e3c <close_stdout@@Base+0x610>
   126a4:	ldr	r3, [sp, #36]	; 0x24
   126a8:	cmp	r3, #0
   126ac:	bne	12a3c <close_stdout@@Base+0x1210>
   126b0:	cmp	sl, #0
   126b4:	beq	12998 <close_stdout@@Base+0x116c>
   126b8:	ldr	r1, [sp, #40]	; 0x28
   126bc:	mov	r3, #39	; 0x27
   126c0:	ldr	r2, [sp, #36]	; 0x24
   126c4:	mov	r0, #1
   126c8:	mov	r9, r0
   126cc:	str	r0, [sp, #28]
   126d0:	strb	r3, [r1]
   126d4:	ldr	r3, [pc, #960]	; 12a9c <close_stdout@@Base+0x1270>
   126d8:	str	r2, [sp, #24]
   126dc:	add	r3, pc, r3
   126e0:	str	r3, [sp, #52]	; 0x34
   126e4:	b	11e3c <close_stdout@@Base+0x610>
   126e8:	ldr	r2, [sp, #28]
   126ec:	cmp	r2, #1
   126f0:	add	r4, fp, r2
   126f4:	movls	r3, #0
   126f8:	movhi	r3, #1
   126fc:	cmn	r8, #1
   12700:	movne	r3, #0
   12704:	cmp	r3, #0
   12708:	beq	12718 <close_stdout@@Base+0xeec>
   1270c:	ldr	r0, [sp, #32]
   12710:	bl	11078 <strlen@plt>
   12714:	mov	r8, r0
   12718:	cmp	r8, r4
   1271c:	ldrcc	r3, [sp, #32]
   12720:	movcc	r6, #0
   12724:	addcc	r5, r3, fp
   12728:	bcc	11e98 <close_stdout@@Base+0x66c>
   1272c:	ldr	r0, [sp, #32]
   12730:	ldr	r1, [sp, #52]	; 0x34
   12734:	add	r5, r0, fp
   12738:	ldr	r2, [sp, #28]
   1273c:	mov	r0, r5
   12740:	bl	10f70 <memcmp@plt>
   12744:	cmp	r0, #0
   12748:	bne	12760 <close_stdout@@Base+0xf34>
   1274c:	ldr	r1, [sp, #36]	; 0x24
   12750:	cmp	r1, #0
   12754:	bne	122b8 <close_stdout@@Base+0xa8c>
   12758:	mov	r6, #1
   1275c:	b	11e98 <close_stdout@@Base+0x66c>
   12760:	mov	r6, #0
   12764:	b	11e98 <close_stdout@@Base+0x66c>
   12768:	add	r7, sp, #108	; 0x6c
   1276c:	cmn	r8, #1
   12770:	mov	r3, #0
   12774:	str	r3, [sp, #108]	; 0x6c
   12778:	str	r3, [r7, #4]
   1277c:	beq	12968 <close_stdout@@Base+0x113c>
   12780:	mov	r1, #0
   12784:	ldr	r0, [sp, #32]
   12788:	mov	ip, #1
   1278c:	str	r9, [sp, #88]	; 0x58
   12790:	str	r6, [sp, #96]	; 0x60
   12794:	mov	r9, r1
   12798:	str	r5, [sp, #100]	; 0x64
   1279c:	mov	r6, ip
   127a0:	mov	r5, r7
   127a4:	add	r3, sp, #104	; 0x68
   127a8:	sub	r0, r0, #1
   127ac:	str	r3, [sp, #80]	; 0x50
   127b0:	str	r0, [sp, #84]	; 0x54
   127b4:	str	r1, [sp, #60]	; 0x3c
   127b8:	str	r4, [sp, #92]	; 0x5c
   127bc:	ldr	r2, [sp, #32]
   127c0:	add	r7, r9, fp
   127c4:	add	r0, sp, #104	; 0x68
   127c8:	mov	r3, r5
   127cc:	add	r4, r2, r7
   127d0:	rsb	r2, r7, r8
   127d4:	mov	r1, r4
   127d8:	bl	10ff4 <mbrtowc@plt>
   127dc:	subs	r2, r0, #0
   127e0:	beq	128ec <close_stdout@@Base+0x10c0>
   127e4:	cmn	r2, #1
   127e8:	beq	12a14 <close_stdout@@Base+0x11e8>
   127ec:	cmn	r2, #2
   127f0:	beq	129b8 <close_stdout@@Base+0x118c>
   127f4:	ldr	r3, [sp, #36]	; 0x24
   127f8:	ldr	r0, [sp, #160]	; 0xa0
   127fc:	cmp	r0, #2
   12800:	movne	r3, #0
   12804:	andeq	r3, r3, #1
   12808:	cmp	r3, #0
   1280c:	beq	128c8 <close_stdout@@Base+0x109c>
   12810:	cmp	r2, #1
   12814:	beq	128c8 <close_stdout@@Base+0x109c>
   12818:	ldr	r1, [sp, #84]	; 0x54
   1281c:	add	r3, r1, r2
   12820:	add	r7, r3, r7
   12824:	ldrb	r3, [r4, #1]!
   12828:	sub	r3, r3, #91	; 0x5b
   1282c:	cmp	r3, #33	; 0x21
   12830:	addls	pc, pc, r3, lsl #2
   12834:	b	128c0 <close_stdout@@Base+0x1094>
   12838:	b	122b8 <close_stdout@@Base+0xa8c>
   1283c:	b	122b8 <close_stdout@@Base+0xa8c>
   12840:	b	128c0 <close_stdout@@Base+0x1094>
   12844:	b	122b8 <close_stdout@@Base+0xa8c>
   12848:	b	128c0 <close_stdout@@Base+0x1094>
   1284c:	b	122b8 <close_stdout@@Base+0xa8c>
   12850:	b	128c0 <close_stdout@@Base+0x1094>
   12854:	b	128c0 <close_stdout@@Base+0x1094>
   12858:	b	128c0 <close_stdout@@Base+0x1094>
   1285c:	b	128c0 <close_stdout@@Base+0x1094>
   12860:	b	128c0 <close_stdout@@Base+0x1094>
   12864:	b	128c0 <close_stdout@@Base+0x1094>
   12868:	b	128c0 <close_stdout@@Base+0x1094>
   1286c:	b	128c0 <close_stdout@@Base+0x1094>
   12870:	b	128c0 <close_stdout@@Base+0x1094>
   12874:	b	128c0 <close_stdout@@Base+0x1094>
   12878:	b	128c0 <close_stdout@@Base+0x1094>
   1287c:	b	128c0 <close_stdout@@Base+0x1094>
   12880:	b	128c0 <close_stdout@@Base+0x1094>
   12884:	b	128c0 <close_stdout@@Base+0x1094>
   12888:	b	128c0 <close_stdout@@Base+0x1094>
   1288c:	b	128c0 <close_stdout@@Base+0x1094>
   12890:	b	128c0 <close_stdout@@Base+0x1094>
   12894:	b	128c0 <close_stdout@@Base+0x1094>
   12898:	b	128c0 <close_stdout@@Base+0x1094>
   1289c:	b	128c0 <close_stdout@@Base+0x1094>
   128a0:	b	128c0 <close_stdout@@Base+0x1094>
   128a4:	b	128c0 <close_stdout@@Base+0x1094>
   128a8:	b	128c0 <close_stdout@@Base+0x1094>
   128ac:	b	128c0 <close_stdout@@Base+0x1094>
   128b0:	b	128c0 <close_stdout@@Base+0x1094>
   128b4:	b	128c0 <close_stdout@@Base+0x1094>
   128b8:	b	128c0 <close_stdout@@Base+0x1094>
   128bc:	b	122b8 <close_stdout@@Base+0xa8c>
   128c0:	cmp	r4, r7
   128c4:	bne	12824 <close_stdout@@Base+0xff8>
   128c8:	ldr	r0, [sp, #104]	; 0x68
   128cc:	add	r9, r9, r2
   128d0:	bl	10fac <iswprint@plt>
   128d4:	cmp	r0, #0
   128d8:	mov	r0, r5
   128dc:	moveq	r6, #0
   128e0:	bl	10f64 <mbsinit@plt>
   128e4:	cmp	r0, #0
   128e8:	beq	127bc <close_stdout@@Base+0xf90>
   128ec:	mov	ip, r6
   128f0:	eor	r2, ip, #1
   128f4:	str	r9, [sp, #60]	; 0x3c
   128f8:	ldr	r4, [sp, #92]	; 0x5c
   128fc:	uxtb	r2, r2
   12900:	ldr	r9, [sp, #88]	; 0x58
   12904:	ldr	r6, [sp, #96]	; 0x60
   12908:	ldr	r5, [sp, #100]	; 0x64
   1290c:	ldr	r3, [sp, #60]	; 0x3c
   12910:	cmp	r3, #1
   12914:	bls	12498 <close_stdout@@Base+0xc6c>
   12918:	ldr	r0, [sp, #24]
   1291c:	and	r2, r2, r0
   12920:	b	124a4 <close_stdout@@Base+0xc78>
   12924:	ldr	r2, [sp, #164]	; 0xa4
   12928:	tst	r2, #1
   1292c:	addne	fp, fp, #1
   12930:	bne	11e60 <close_stdout@@Base+0x634>
   12934:	b	12170 <close_stdout@@Base+0x944>
   12938:	ldr	r0, [sp, #36]	; 0x24
   1293c:	cmp	r0, #0
   12940:	beq	12170 <close_stdout@@Base+0x944>
   12944:	b	122b8 <close_stdout@@Base+0xa8c>
   12948:	ldr	r2, [sp, #32]
   1294c:	ldrb	r3, [r2, #1]
   12950:	adds	r3, r3, #0
   12954:	movne	r3, #1
   12958:	b	1228c <close_stdout@@Base+0xa60>
   1295c:	bl	1115c <abort@plt>
   12960:	ldr	r8, [sp, #60]	; 0x3c
   12964:	b	122b8 <close_stdout@@Base+0xa8c>
   12968:	ldr	r0, [sp, #32]
   1296c:	bl	11078 <strlen@plt>
   12970:	mov	r8, r0
   12974:	b	12780 <close_stdout@@Base+0xf54>
   12978:	ldr	r2, [pc, #288]	; 12aa0 <close_stdout@@Base+0x1274>
   1297c:	mov	r1, #1
   12980:	mov	r9, r1
   12984:	str	r1, [sp, #24]
   12988:	add	r2, pc, r2
   1298c:	str	r1, [sp, #28]
   12990:	str	r2, [sp, #52]	; 0x34
   12994:	b	11e3c <close_stdout@@Base+0x610>
   12998:	ldr	r2, [pc, #260]	; 12aa4 <close_stdout@@Base+0x1278>
   1299c:	mov	r3, #1
   129a0:	mov	r9, r3
   129a4:	str	r3, [sp, #28]
   129a8:	add	r2, pc, r2
   129ac:	str	sl, [sp, #24]
   129b0:	str	r2, [sp, #52]	; 0x34
   129b4:	b	11e3c <close_stdout@@Base+0x610>
   129b8:	cmp	r8, r7
   129bc:	str	r9, [sp, #60]	; 0x3c
   129c0:	mov	ip, r4
   129c4:	ldr	r6, [sp, #96]	; 0x60
   129c8:	ldr	r9, [sp, #88]	; 0x58
   129cc:	ldr	r4, [sp, #92]	; 0x5c
   129d0:	ldr	r5, [sp, #100]	; 0x64
   129d4:	bls	12a0c <close_stdout@@Base+0x11e0>
   129d8:	ldrb	r3, [ip]
   129dc:	cmp	r3, #0
   129e0:	beq	12a0c <close_stdout@@Base+0x11e0>
   129e4:	ldr	r3, [sp, #60]	; 0x3c
   129e8:	b	129f8 <close_stdout@@Base+0x11cc>
   129ec:	ldrb	r2, [r5, r3]
   129f0:	cmp	r2, #0
   129f4:	beq	12a08 <close_stdout@@Base+0x11dc>
   129f8:	add	r3, r3, #1
   129fc:	add	r2, fp, r3
   12a00:	cmp	r8, r2
   12a04:	bhi	129ec <close_stdout@@Base+0x11c0>
   12a08:	str	r3, [sp, #60]	; 0x3c
   12a0c:	mov	r2, #1
   12a10:	b	1290c <close_stdout@@Base+0x10e0>
   12a14:	str	r9, [sp, #60]	; 0x3c
   12a18:	mov	r2, #1
   12a1c:	ldr	r4, [sp, #92]	; 0x5c
   12a20:	ldr	r6, [sp, #96]	; 0x60
   12a24:	ldr	r9, [sp, #88]	; 0x58
   12a28:	ldr	r5, [sp, #100]	; 0x64
   12a2c:	b	1290c <close_stdout@@Base+0x10e0>
   12a30:	ldr	r9, [sp, #36]	; 0x24
   12a34:	b	12658 <close_stdout@@Base+0xe2c>
   12a38:	bl	10f88 <__stack_chk_fail@plt>
   12a3c:	ldr	r1, [pc, #100]	; 12aa8 <close_stdout@@Base+0x127c>
   12a40:	mov	r3, #0
   12a44:	mov	r0, #1
   12a48:	str	r3, [sp, #24]
   12a4c:	add	r1, pc, r1
   12a50:	str	r0, [sp, #28]
   12a54:	mov	r9, r3
   12a58:	str	r1, [sp, #52]	; 0x34
   12a5c:	b	11e3c <close_stdout@@Base+0x610>
   12a60:	ldr	r0, [pc, #68]	; 12aac <close_stdout@@Base+0x1280>
   12a64:	mov	r3, #1
   12a68:	mov	r9, #0
   12a6c:	str	r3, [sp, #24]
   12a70:	add	r0, pc, r0
   12a74:	str	r3, [sp, #28]
   12a78:	str	r0, [sp, #52]	; 0x34
   12a7c:	b	11e3c <close_stdout@@Base+0x610>
   12a80:	andeq	r4, r1, r4, asr r2
   12a84:	andeq	r0, r0, r8, ror #1
   12a88:	andeq	r2, r0, r4, lsr r5
   12a8c:	andeq	r2, r0, r0, lsl r5
   12a90:	andeq	r2, r0, ip, asr #9
   12a94:	andeq	r2, r0, r8, lsr #9
   12a98:	andeq	r2, r0, ip, lsr #8
   12a9c:	ldrdeq	r2, [r0], -r4
   12aa0:	andeq	r2, r0, ip, lsr #2
   12aa4:	andeq	r2, r0, r8, lsl #2
   12aa8:	andeq	r2, r0, r4, rrx
   12aac:	andeq	r2, r0, r4, asr #32
   12ab0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12ab4:	sub	sp, sp, #44	; 0x2c
   12ab8:	mov	r6, r0
   12abc:	mov	r9, r1
   12ac0:	mov	sl, r2
   12ac4:	mov	r4, r3
   12ac8:	bl	11090 <__errno_location@plt>
   12acc:	ldr	fp, [pc, #412]	; 12c70 <close_stdout@@Base+0x1444>
   12ad0:	cmp	r6, #0
   12ad4:	add	fp, pc, fp
   12ad8:	ldr	r5, [fp]
   12adc:	ldr	r1, [r0]
   12ae0:	mov	r8, r0
   12ae4:	str	r1, [sp, #36]	; 0x24
   12ae8:	blt	12c68 <close_stdout@@Base+0x143c>
   12aec:	ldr	r3, [pc, #384]	; 12c74 <close_stdout@@Base+0x1448>
   12af0:	add	r3, pc, r3
   12af4:	ldr	r3, [r3]
   12af8:	cmp	r6, r3
   12afc:	bcc	12b50 <close_stdout@@Base+0x1324>
   12b00:	add	r7, r6, #1
   12b04:	cmn	r7, #-536870911	; 0xe0000001
   12b08:	bhi	12c6c <close_stdout@@Base+0x1440>
   12b0c:	add	r3, fp, #4
   12b10:	cmp	r5, r3
   12b14:	beq	12c40 <close_stdout@@Base+0x1414>
   12b18:	mov	r0, r5
   12b1c:	lsl	r1, r7, #3
   12b20:	bl	13948 <close_stdout@@Base+0x211c>
   12b24:	mov	r5, r0
   12b28:	str	r0, [fp]
   12b2c:	ldr	fp, [pc, #324]	; 12c78 <close_stdout@@Base+0x144c>
   12b30:	mov	r1, #0
   12b34:	add	fp, pc, fp
   12b38:	ldr	r0, [fp]
   12b3c:	rsb	r2, r0, r7
   12b40:	add	r0, r5, r0, lsl #3
   12b44:	lsl	r2, r2, #3
   12b48:	bl	110a8 <memset@plt>
   12b4c:	str	r7, [fp]
   12b50:	add	r2, r4, #8
   12b54:	str	r2, [sp, #32]
   12b58:	ldr	r1, [r4]
   12b5c:	add	fp, r5, r6, lsl #3
   12b60:	ldr	lr, [sp, #32]
   12b64:	mov	r2, r9
   12b68:	ldr	r3, [r4, #4]
   12b6c:	ldr	ip, [r5, r6, lsl #3]
   12b70:	ldr	r7, [fp, #4]
   12b74:	orr	r3, r3, #1
   12b78:	str	r1, [sp]
   12b7c:	str	r3, [sp, #4]
   12b80:	mov	r1, ip
   12b84:	str	lr, [sp, #8]
   12b88:	mov	r0, r7
   12b8c:	ldr	lr, [r4, #40]	; 0x28
   12b90:	str	r3, [sp, #28]
   12b94:	mov	r3, sl
   12b98:	str	lr, [sp, #12]
   12b9c:	ldr	lr, [r4, #44]	; 0x2c
   12ba0:	str	ip, [sp, #24]
   12ba4:	str	lr, [sp, #16]
   12ba8:	bl	11d88 <close_stdout@@Base+0x55c>
   12bac:	ldr	ip, [sp, #24]
   12bb0:	cmp	ip, r0
   12bb4:	bhi	12c2c <close_stdout@@Base+0x1400>
   12bb8:	ldr	r3, [pc, #188]	; 12c7c <close_stdout@@Base+0x1450>
   12bbc:	add	r1, r0, #1
   12bc0:	str	r1, [r5, r6, lsl #3]
   12bc4:	add	r3, pc, r3
   12bc8:	cmp	r7, r3
   12bcc:	beq	12be0 <close_stdout@@Base+0x13b4>
   12bd0:	mov	r0, r7
   12bd4:	str	r1, [sp, #24]
   12bd8:	bl	10f34 <free@plt>
   12bdc:	ldr	r1, [sp, #24]
   12be0:	mov	r0, r1
   12be4:	str	r1, [sp, #24]
   12be8:	bl	138f0 <close_stdout@@Base+0x20c4>
   12bec:	ldr	r3, [sp, #28]
   12bf0:	ldr	lr, [sp, #32]
   12bf4:	mov	r2, r9
   12bf8:	str	r0, [fp, #4]
   12bfc:	mov	r7, r0
   12c00:	ldr	ip, [r4]
   12c04:	str	r3, [sp, #4]
   12c08:	mov	r3, sl
   12c0c:	str	lr, [sp, #8]
   12c10:	str	ip, [sp]
   12c14:	ldr	ip, [r4, #40]	; 0x28
   12c18:	ldr	r1, [sp, #24]
   12c1c:	str	ip, [sp, #12]
   12c20:	ldr	ip, [r4, #44]	; 0x2c
   12c24:	str	ip, [sp, #16]
   12c28:	bl	11d88 <close_stdout@@Base+0x55c>
   12c2c:	ldr	r1, [sp, #36]	; 0x24
   12c30:	mov	r0, r7
   12c34:	str	r1, [r8]
   12c38:	add	sp, sp, #44	; 0x2c
   12c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c40:	lsl	r1, r7, #3
   12c44:	mov	r0, #0
   12c48:	str	r3, [sp, #24]
   12c4c:	bl	13948 <close_stdout@@Base+0x211c>
   12c50:	ldr	r3, [sp, #24]
   12c54:	mov	r5, r0
   12c58:	ldm	r3, {r0, r1}
   12c5c:	str	r5, [fp]
   12c60:	stm	r5, {r0, r1}
   12c64:	b	12b2c <close_stdout@@Base+0x1300>
   12c68:	bl	1115c <abort@plt>
   12c6c:	bl	13b04 <close_stdout@@Base+0x22d8>
   12c70:	andeq	r3, r1, ip, lsl #13
   12c74:	andeq	r3, r1, ip, lsr r6
   12c78:	strdeq	r3, [r1], -r8
   12c7c:			; <UNDEFINED> instruction: 0x000135bc
   12c80:	push	{r4, r5, r6, lr}
   12c84:	mov	r5, r0
   12c88:	bl	11090 <__errno_location@plt>
   12c8c:	cmp	r5, #0
   12c90:	mov	r1, #48	; 0x30
   12c94:	mov	r4, r0
   12c98:	ldr	r0, [pc, #24]	; 12cb8 <close_stdout@@Base+0x148c>
   12c9c:	ldr	r6, [r4]
   12ca0:	add	r0, pc, r0
   12ca4:	add	r0, r0, #256	; 0x100
   12ca8:	movne	r0, r5
   12cac:	bl	13ac4 <close_stdout@@Base+0x2298>
   12cb0:	str	r6, [r4]
   12cb4:	pop	{r4, r5, r6, pc}
   12cb8:	andeq	r3, r1, r0, ror #9
   12cbc:	cmp	r0, #0
   12cc0:	beq	12ccc <close_stdout@@Base+0x14a0>
   12cc4:	ldr	r0, [r0]
   12cc8:	bx	lr
   12ccc:	ldr	r0, [pc, #12]	; 12ce0 <close_stdout@@Base+0x14b4>
   12cd0:	add	r0, pc, r0
   12cd4:	add	r0, r0, #256	; 0x100
   12cd8:	ldr	r0, [r0]
   12cdc:	bx	lr
   12ce0:			; <UNDEFINED> instruction: 0x000134b0
   12ce4:	cmp	r0, #0
   12ce8:	beq	12cf4 <close_stdout@@Base+0x14c8>
   12cec:	str	r1, [r0]
   12cf0:	bx	lr
   12cf4:	ldr	r0, [pc, #12]	; 12d08 <close_stdout@@Base+0x14dc>
   12cf8:	add	r0, pc, r0
   12cfc:	add	r0, r0, #256	; 0x100
   12d00:	str	r1, [r0]
   12d04:	bx	lr
   12d08:	andeq	r3, r1, r8, lsl #9
   12d0c:	cmp	r0, #0
   12d10:	movne	r3, r0
   12d14:	beq	12d44 <close_stdout@@Base+0x1518>
   12d18:	lsr	ip, r1, #5
   12d1c:	and	r1, r1, #31
   12d20:	add	r3, r3, ip, lsl #2
   12d24:	ldr	ip, [r3, #8]
   12d28:	lsr	r0, ip, r1
   12d2c:	eor	r2, r0, r2
   12d30:	and	r0, r0, #1
   12d34:	and	r2, r2, #1
   12d38:	eor	ip, ip, r2, lsl r1
   12d3c:	str	ip, [r3, #8]
   12d40:	bx	lr
   12d44:	ldr	r3, [pc, #8]	; 12d54 <close_stdout@@Base+0x1528>
   12d48:	add	r3, pc, r3
   12d4c:	add	r3, r3, #256	; 0x100
   12d50:	b	12d18 <close_stdout@@Base+0x14ec>
   12d54:	andeq	r3, r1, r8, lsr r4
   12d58:	subs	r3, r0, #0
   12d5c:	beq	12d6c <close_stdout@@Base+0x1540>
   12d60:	ldr	r0, [r3, #4]
   12d64:	str	r1, [r3, #4]
   12d68:	bx	lr
   12d6c:	ldr	r3, [pc, #8]	; 12d7c <close_stdout@@Base+0x1550>
   12d70:	add	r3, pc, r3
   12d74:	add	r3, r3, #256	; 0x100
   12d78:	b	12d60 <close_stdout@@Base+0x1534>
   12d7c:	andeq	r3, r1, r0, lsl r4
   12d80:	cmp	r0, #0
   12d84:	push	{r3, lr}
   12d88:	beq	12dac <close_stdout@@Base+0x1580>
   12d8c:	cmp	r2, #0
   12d90:	cmpne	r1, #0
   12d94:	mov	r3, #8
   12d98:	strne	r1, [r0, #40]	; 0x28
   12d9c:	str	r3, [r0]
   12da0:	strne	r2, [r0, #44]	; 0x2c
   12da4:	popne	{r3, pc}
   12da8:	bl	1115c <abort@plt>
   12dac:	ldr	r0, [pc, #8]	; 12dbc <close_stdout@@Base+0x1590>
   12db0:	add	r0, pc, r0
   12db4:	add	r0, r0, #256	; 0x100
   12db8:	b	12d8c <close_stdout@@Base+0x1560>
   12dbc:	ldrdeq	r3, [r1], -r0
   12dc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12dc4:	sub	sp, sp, #24
   12dc8:	mov	r7, r0
   12dcc:	mov	sl, r1
   12dd0:	ldr	r4, [sp, #56]	; 0x38
   12dd4:	mov	r9, r2
   12dd8:	mov	r8, r3
   12ddc:	cmp	r4, #0
   12de0:	beq	12e34 <close_stdout@@Base+0x1608>
   12de4:	bl	11090 <__errno_location@plt>
   12de8:	ldr	r3, [r4]
   12dec:	add	lr, r4, #8
   12df0:	mov	r1, sl
   12df4:	mov	r2, r9
   12df8:	ldr	r6, [r0]
   12dfc:	mov	r5, r0
   12e00:	str	r3, [sp]
   12e04:	mov	r0, r7
   12e08:	ldr	ip, [r4, #4]
   12e0c:	mov	r3, r8
   12e10:	stmib	sp, {ip, lr}
   12e14:	ldr	ip, [r4, #40]	; 0x28
   12e18:	str	ip, [sp, #12]
   12e1c:	ldr	ip, [r4, #44]	; 0x2c
   12e20:	str	ip, [sp, #16]
   12e24:	bl	11d88 <close_stdout@@Base+0x55c>
   12e28:	str	r6, [r5]
   12e2c:	add	sp, sp, #24
   12e30:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e34:	ldr	r4, [pc, #8]	; 12e44 <close_stdout@@Base+0x1618>
   12e38:	add	r4, pc, r4
   12e3c:	add	r4, r4, #256	; 0x100
   12e40:	b	12de4 <close_stdout@@Base+0x15b8>
   12e44:	andeq	r3, r1, r8, asr #6
   12e48:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e4c:	subs	r4, r3, #0
   12e50:	sub	sp, sp, #36	; 0x24
   12e54:	mov	r7, r0
   12e58:	mov	r6, r1
   12e5c:	mov	r5, r2
   12e60:	beq	12f1c <close_stdout@@Base+0x16f0>
   12e64:	bl	11090 <__errno_location@plt>
   12e68:	ldr	r3, [r4]
   12e6c:	ldr	sl, [r4, #4]
   12e70:	add	r9, r4, #8
   12e74:	mov	r8, r0
   12e78:	mov	r0, #0
   12e7c:	ldr	r2, [r8]
   12e80:	cmp	r5, r0
   12e84:	orreq	sl, sl, #1
   12e88:	str	r9, [sp, #8]
   12e8c:	mov	r1, r0
   12e90:	stm	sp, {r3, sl}
   12e94:	mov	r3, r6
   12e98:	ldr	ip, [r4, #40]	; 0x28
   12e9c:	str	r2, [sp, #28]
   12ea0:	mov	r2, r7
   12ea4:	str	ip, [sp, #12]
   12ea8:	ldr	ip, [r4, #44]	; 0x2c
   12eac:	str	ip, [sp, #16]
   12eb0:	bl	11d88 <close_stdout@@Base+0x55c>
   12eb4:	add	r1, r0, #1
   12eb8:	mov	fp, r0
   12ebc:	str	r1, [sp, #24]
   12ec0:	mov	r0, r1
   12ec4:	bl	138f0 <close_stdout@@Base+0x20c4>
   12ec8:	ldr	lr, [r4]
   12ecc:	str	sl, [sp, #4]
   12ed0:	mov	r3, r6
   12ed4:	str	r9, [sp, #8]
   12ed8:	mov	r2, r7
   12edc:	str	lr, [sp]
   12ee0:	ldr	lr, [r4, #40]	; 0x28
   12ee4:	ldr	r1, [sp, #24]
   12ee8:	str	lr, [sp, #12]
   12eec:	ldr	lr, [r4, #44]	; 0x2c
   12ef0:	str	lr, [sp, #16]
   12ef4:	str	r0, [sp, #24]
   12ef8:	bl	11d88 <close_stdout@@Base+0x55c>
   12efc:	ldr	r3, [sp, #28]
   12f00:	cmp	r5, #0
   12f04:	str	r3, [r8]
   12f08:	ldr	ip, [sp, #24]
   12f0c:	strne	fp, [r5]
   12f10:	mov	r0, ip
   12f14:	add	sp, sp, #36	; 0x24
   12f18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f1c:	ldr	r4, [pc, #8]	; 12f2c <close_stdout@@Base+0x1700>
   12f20:	add	r4, pc, r4
   12f24:	add	r4, r4, #256	; 0x100
   12f28:	b	12e64 <close_stdout@@Base+0x1638>
   12f2c:	andeq	r3, r1, r0, ror #4
   12f30:	mov	r3, r2
   12f34:	mov	r2, #0
   12f38:	b	12e48 <close_stdout@@Base+0x161c>
   12f3c:	ldr	r2, [pc, #152]	; 12fdc <close_stdout@@Base+0x17b0>
   12f40:	push	{r3, r4, r5, r6, r7, lr}
   12f44:	add	r2, pc, r2
   12f48:	ldr	r3, [pc, #144]	; 12fe0 <close_stdout@@Base+0x17b4>
   12f4c:	ldr	r6, [r2]
   12f50:	add	r3, pc, r3
   12f54:	cmp	r6, #1
   12f58:	ldr	r7, [r3]
   12f5c:	movhi	r4, #1
   12f60:	movhi	r5, r7
   12f64:	bls	12f80 <close_stdout@@Base+0x1754>
   12f68:	ldr	r0, [r5, #12]
   12f6c:	add	r4, r4, #1
   12f70:	bl	10f34 <free@plt>
   12f74:	cmp	r4, r6
   12f78:	add	r5, r5, #8
   12f7c:	bne	12f68 <close_stdout@@Base+0x173c>
   12f80:	ldr	r4, [pc, #92]	; 12fe4 <close_stdout@@Base+0x17b8>
   12f84:	ldr	r0, [r7, #4]
   12f88:	add	r4, pc, r4
   12f8c:	cmp	r0, r4
   12f90:	beq	12fa8 <close_stdout@@Base+0x177c>
   12f94:	bl	10f34 <free@plt>
   12f98:	ldr	r3, [pc, #72]	; 12fe8 <close_stdout@@Base+0x17bc>
   12f9c:	mov	r2, #256	; 0x100
   12fa0:	add	r3, pc, r3
   12fa4:	stmib	r3, {r2, r4}
   12fa8:	ldr	r4, [pc, #60]	; 12fec <close_stdout@@Base+0x17c0>
   12fac:	add	r4, pc, r4
   12fb0:	add	r5, r4, #4
   12fb4:	cmp	r7, r5
   12fb8:	beq	12fc8 <close_stdout@@Base+0x179c>
   12fbc:	mov	r0, r7
   12fc0:	bl	10f34 <free@plt>
   12fc4:	str	r5, [r4]
   12fc8:	ldr	r3, [pc, #32]	; 12ff0 <close_stdout@@Base+0x17c4>
   12fcc:	mov	r2, #1
   12fd0:	add	r3, pc, r3
   12fd4:	str	r2, [r3]
   12fd8:	pop	{r3, r4, r5, r6, r7, pc}
   12fdc:	andeq	r3, r1, r8, ror #3
   12fe0:	andeq	r3, r1, r0, lsl r2
   12fe4:	strdeq	r3, [r1], -r8
   12fe8:	andeq	r3, r1, r0, asr #3
   12fec:			; <UNDEFINED> instruction: 0x000131b4
   12ff0:	andeq	r3, r1, ip, asr r1
   12ff4:	ldr	r3, [pc, #12]	; 13008 <close_stdout@@Base+0x17dc>
   12ff8:	mvn	r2, #0
   12ffc:	add	r3, pc, r3
   13000:	add	r3, r3, #256	; 0x100
   13004:	b	12ab0 <close_stdout@@Base+0x1284>
   13008:	andeq	r3, r1, r4, lsl #3
   1300c:	ldr	r3, [pc, #8]	; 1301c <close_stdout@@Base+0x17f0>
   13010:	add	r3, pc, r3
   13014:	add	r3, r3, #256	; 0x100
   13018:	b	12ab0 <close_stdout@@Base+0x1284>
   1301c:	andeq	r3, r1, r0, ror r1
   13020:	mov	r1, r0
   13024:	mov	r0, #0
   13028:	b	12ff4 <close_stdout@@Base+0x17c8>
   1302c:	mov	r2, r1
   13030:	mov	r1, r0
   13034:	mov	r0, #0
   13038:	b	1300c <close_stdout@@Base+0x17e0>
   1303c:	ldr	r3, [pc, #92]	; 130a0 <close_stdout@@Base+0x1874>
   13040:	ldr	ip, [pc, #92]	; 130a4 <close_stdout@@Base+0x1878>
   13044:	add	r3, pc, r3
   13048:	push	{r4, r5, r6, r7, lr}
   1304c:	sub	sp, sp, #60	; 0x3c
   13050:	ldr	r4, [r3, ip]
   13054:	add	r5, sp, #4
   13058:	mov	r7, r2
   1305c:	mov	r6, r0
   13060:	mov	r0, r5
   13064:	ldr	r3, [r4]
   13068:	str	r3, [sp, #52]	; 0x34
   1306c:	bl	11bd0 <close_stdout@@Base+0x3a4>
   13070:	mov	r3, r5
   13074:	mvn	r2, #0
   13078:	mov	r0, r6
   1307c:	mov	r1, r7
   13080:	bl	12ab0 <close_stdout@@Base+0x1284>
   13084:	ldr	r2, [sp, #52]	; 0x34
   13088:	ldr	r3, [r4]
   1308c:	cmp	r2, r3
   13090:	bne	1309c <close_stdout@@Base+0x1870>
   13094:	add	sp, sp, #60	; 0x3c
   13098:	pop	{r4, r5, r6, r7, pc}
   1309c:	bl	10f88 <__stack_chk_fail@plt>
   130a0:			; <UNDEFINED> instruction: 0x00012fb4
   130a4:	andeq	r0, r0, r8, ror #1
   130a8:	ldr	ip, [pc, #96]	; 13110 <close_stdout@@Base+0x18e4>
   130ac:	push	{r4, r5, r6, r7, r8, lr}
   130b0:	add	ip, pc, ip
   130b4:	ldr	lr, [pc, #88]	; 13114 <close_stdout@@Base+0x18e8>
   130b8:	sub	sp, sp, #56	; 0x38
   130bc:	mov	r8, r3
   130c0:	add	r5, sp, #4
   130c4:	mov	r7, r2
   130c8:	mov	r6, r0
   130cc:	ldr	r4, [ip, lr]
   130d0:	mov	r0, r5
   130d4:	ldr	r3, [r4]
   130d8:	str	r3, [sp, #52]	; 0x34
   130dc:	bl	11bd0 <close_stdout@@Base+0x3a4>
   130e0:	mov	r2, r8
   130e4:	mov	r3, r5
   130e8:	mov	r0, r6
   130ec:	mov	r1, r7
   130f0:	bl	12ab0 <close_stdout@@Base+0x1284>
   130f4:	ldr	r2, [sp, #52]	; 0x34
   130f8:	ldr	r3, [r4]
   130fc:	cmp	r2, r3
   13100:	bne	1310c <close_stdout@@Base+0x18e0>
   13104:	add	sp, sp, #56	; 0x38
   13108:	pop	{r4, r5, r6, r7, r8, pc}
   1310c:	bl	10f88 <__stack_chk_fail@plt>
   13110:	andeq	r2, r1, r8, asr #30
   13114:	andeq	r0, r0, r8, ror #1
   13118:	mov	r2, r1
   1311c:	mov	r1, r0
   13120:	mov	r0, #0
   13124:	b	1303c <close_stdout@@Base+0x1810>
   13128:	mov	ip, r1
   1312c:	mov	r3, r2
   13130:	mov	r1, r0
   13134:	mov	r2, ip
   13138:	mov	r0, #0
   1313c:	b	130a8 <close_stdout@@Base+0x187c>
   13140:	push	{r4, r5, r6, r7, r8, lr}
   13144:	mov	r5, r2
   13148:	ldr	lr, [pc, #136]	; 131d8 <close_stdout@@Base+0x19ac>
   1314c:	mov	r7, r0
   13150:	mov	r6, r1
   13154:	ldr	r4, [pc, #128]	; 131dc <close_stdout@@Base+0x19b0>
   13158:	add	lr, pc, lr
   1315c:	sub	sp, sp, #56	; 0x38
   13160:	add	lr, lr, #256	; 0x100
   13164:	ldr	r8, [pc, #116]	; 131e0 <close_stdout@@Base+0x19b4>
   13168:	add	r4, pc, r4
   1316c:	add	ip, sp, #4
   13170:	ldm	lr!, {r0, r1, r2, r3}
   13174:	ldr	r4, [r4, r8]
   13178:	stmia	ip!, {r0, r1, r2, r3}
   1317c:	ldm	lr!, {r0, r1, r2, r3}
   13180:	ldr	r8, [r4]
   13184:	stmia	ip!, {r0, r1, r2, r3}
   13188:	ldm	lr, {r0, r1, r2, r3}
   1318c:	str	r8, [sp, #52]	; 0x34
   13190:	stm	ip, {r0, r1, r2, r3}
   13194:	mov	r1, r5
   13198:	add	r5, sp, #4
   1319c:	mov	r2, #1
   131a0:	mov	r0, r5
   131a4:	bl	12d0c <close_stdout@@Base+0x14e0>
   131a8:	mov	r2, r6
   131ac:	mov	r3, r5
   131b0:	mov	r1, r7
   131b4:	mov	r0, #0
   131b8:	bl	12ab0 <close_stdout@@Base+0x1284>
   131bc:	ldr	r2, [sp, #52]	; 0x34
   131c0:	ldr	r3, [r4]
   131c4:	cmp	r2, r3
   131c8:	bne	131d4 <close_stdout@@Base+0x19a8>
   131cc:	add	sp, sp, #56	; 0x38
   131d0:	pop	{r4, r5, r6, r7, r8, pc}
   131d4:	bl	10f88 <__stack_chk_fail@plt>
   131d8:	andeq	r3, r1, r8, lsr #32
   131dc:	muleq	r1, r0, lr
   131e0:	andeq	r0, r0, r8, ror #1
   131e4:	mov	r2, r1
   131e8:	mvn	r1, #0
   131ec:	b	13140 <close_stdout@@Base+0x1914>
   131f0:	mov	r1, #58	; 0x3a
   131f4:	b	131e4 <close_stdout@@Base+0x19b8>
   131f8:	mov	r2, #58	; 0x3a
   131fc:	b	13140 <close_stdout@@Base+0x1914>
   13200:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13204:	mov	r5, r2
   13208:	ldr	lr, [pc, #144]	; 132a0 <close_stdout@@Base+0x1a74>
   1320c:	mov	r8, r0
   13210:	mov	r9, r1
   13214:	mov	r7, r3
   13218:	add	lr, pc, lr
   1321c:	ldr	r4, [pc, #128]	; 132a4 <close_stdout@@Base+0x1a78>
   13220:	add	lr, lr, #256	; 0x100
   13224:	sub	sp, sp, #56	; 0x38
   13228:	ldr	sl, [pc, #120]	; 132a8 <close_stdout@@Base+0x1a7c>
   1322c:	add	r4, pc, r4
   13230:	ldm	lr!, {r0, r1, r2, r3}
   13234:	add	ip, sp, #4
   13238:	ldr	r4, [r4, sl]
   1323c:	ldr	r6, [sp, #88]	; 0x58
   13240:	stmia	ip!, {r0, r1, r2, r3}
   13244:	ldm	lr!, {r0, r1, r2, r3}
   13248:	ldr	sl, [r4]
   1324c:	stmia	ip!, {r0, r1, r2, r3}
   13250:	ldm	lr, {r0, r1, r2, r3}
   13254:	str	sl, [sp, #52]	; 0x34
   13258:	stm	ip, {r0, r1, r2, r3}
   1325c:	mov	r2, r5
   13260:	add	r5, sp, #4
   13264:	mov	r1, r9
   13268:	mov	r0, r5
   1326c:	bl	12d80 <close_stdout@@Base+0x1554>
   13270:	mov	r2, r6
   13274:	mov	r3, r5
   13278:	mov	r0, r8
   1327c:	mov	r1, r7
   13280:	bl	12ab0 <close_stdout@@Base+0x1284>
   13284:	ldr	r2, [sp, #52]	; 0x34
   13288:	ldr	r3, [r4]
   1328c:	cmp	r2, r3
   13290:	bne	1329c <close_stdout@@Base+0x1a70>
   13294:	add	sp, sp, #56	; 0x38
   13298:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1329c:	bl	10f88 <__stack_chk_fail@plt>
   132a0:	andeq	r2, r1, r8, ror #30
   132a4:	andeq	r2, r1, ip, asr #27
   132a8:	andeq	r0, r0, r8, ror #1
   132ac:	push	{lr}		; (str lr, [sp, #-4]!)
   132b0:	sub	sp, sp, #12
   132b4:	mvn	ip, #0
   132b8:	str	ip, [sp]
   132bc:	bl	13200 <close_stdout@@Base+0x19d4>
   132c0:	add	sp, sp, #12
   132c4:	pop	{pc}		; (ldr pc, [sp], #4)
   132c8:	mov	ip, r1
   132cc:	mov	r3, r2
   132d0:	mov	r1, r0
   132d4:	mov	r2, ip
   132d8:	mov	r0, #0
   132dc:	b	132ac <close_stdout@@Base+0x1a80>
   132e0:	push	{lr}		; (str lr, [sp, #-4]!)
   132e4:	sub	sp, sp, #12
   132e8:	mov	lr, r1
   132ec:	mov	ip, r2
   132f0:	mov	r1, r0
   132f4:	str	r3, [sp]
   132f8:	mov	r2, lr
   132fc:	mov	r3, ip
   13300:	mov	r0, #0
   13304:	bl	13200 <close_stdout@@Base+0x19d4>
   13308:	add	sp, sp, #12
   1330c:	pop	{pc}		; (ldr pc, [sp], #4)
   13310:	ldr	r3, [pc, #12]	; 13324 <close_stdout@@Base+0x1af8>
   13314:	ldr	ip, [pc, #12]	; 13328 <close_stdout@@Base+0x1afc>
   13318:	add	r3, pc, r3
   1331c:	ldr	r3, [r3, ip]
   13320:	b	12ab0 <close_stdout@@Base+0x1284>
   13324:	andeq	r2, r1, r0, ror #25
   13328:	andeq	r0, r0, r4, ror #1
   1332c:	mov	r2, r1
   13330:	mov	r1, r0
   13334:	mov	r0, #0
   13338:	b	13310 <close_stdout@@Base+0x1ae4>
   1333c:	mvn	r2, #0
   13340:	b	13310 <close_stdout@@Base+0x1ae4>
   13344:	mov	r1, r0
   13348:	mov	r0, #0
   1334c:	b	1333c <close_stdout@@Base+0x1b10>
   13350:	push	{r4, r5, r6, r7, lr}
   13354:	cmp	r1, #0
   13358:	sub	sp, sp, #36	; 0x24
   1335c:	ldr	r7, [pc, #896]	; 136e4 <close_stdout@@Base+0x1eb8>
   13360:	mov	ip, r3
   13364:	mov	r5, r0
   13368:	add	r7, pc, r7
   1336c:	ldr	r4, [sp, #56]	; 0x38
   13370:	ldr	r6, [sp, #60]	; 0x3c
   13374:	beq	136b8 <close_stdout@@Base+0x1e8c>
   13378:	str	r2, [sp]
   1337c:	mov	r3, r1
   13380:	ldr	r2, [pc, #864]	; 136e8 <close_stdout@@Base+0x1ebc>
   13384:	mov	r1, #1
   13388:	str	ip, [sp, #4]
   1338c:	add	r2, pc, r2
   13390:	bl	110d8 <__fprintf_chk@plt>
   13394:	ldr	r1, [pc, #848]	; 136ec <close_stdout@@Base+0x1ec0>
   13398:	mov	r2, #5
   1339c:	mov	r0, #0
   133a0:	add	r1, pc, r1
   133a4:	bl	10f7c <dcgettext@plt>
   133a8:	ldr	r2, [pc, #832]	; 136f0 <close_stdout@@Base+0x1ec4>
   133ac:	movw	ip, #2013	; 0x7dd
   133b0:	mov	r1, #1
   133b4:	ldr	r2, [r7, r2]
   133b8:	str	ip, [sp]
   133bc:	mov	r3, r0
   133c0:	mov	r0, r5
   133c4:	bl	110d8 <__fprintf_chk@plt>
   133c8:	ldr	r1, [pc, #804]	; 136f4 <close_stdout@@Base+0x1ec8>
   133cc:	mov	r0, #0
   133d0:	mov	r2, #5
   133d4:	add	r1, pc, r1
   133d8:	bl	10f7c <dcgettext@plt>
   133dc:	mov	r1, r5
   133e0:	bl	10f04 <fputs_unlocked@plt>
   133e4:	cmp	r6, #9
   133e8:	addls	pc, pc, r6, lsl #2
   133ec:	b	136d4 <close_stdout@@Base+0x1ea8>
   133f0:	b	13484 <close_stdout@@Base+0x1c58>
   133f4:	b	13488 <close_stdout@@Base+0x1c5c>
   133f8:	b	134b8 <close_stdout@@Base+0x1c8c>
   133fc:	b	134ec <close_stdout@@Base+0x1cc0>
   13400:	b	13528 <close_stdout@@Base+0x1cfc>
   13404:	b	13568 <close_stdout@@Base+0x1d3c>
   13408:	b	135b0 <close_stdout@@Base+0x1d84>
   1340c:	b	13600 <close_stdout@@Base+0x1dd4>
   13410:	b	13658 <close_stdout@@Base+0x1e2c>
   13414:	b	13418 <close_stdout@@Base+0x1bec>
   13418:	ldr	r1, [pc, #728]	; 136f8 <close_stdout@@Base+0x1ecc>
   1341c:	mov	r0, #0
   13420:	add	r1, pc, r1
   13424:	mov	r2, #5
   13428:	bl	10f7c <dcgettext@plt>
   1342c:	ldm	r4, {r3, ip}
   13430:	mov	r1, #1
   13434:	str	ip, [sp]
   13438:	ldr	ip, [r4, #8]
   1343c:	str	ip, [sp, #4]
   13440:	ldr	ip, [r4, #12]
   13444:	str	ip, [sp, #8]
   13448:	ldr	ip, [r4, #16]
   1344c:	str	ip, [sp, #12]
   13450:	ldr	ip, [r4, #20]
   13454:	str	ip, [sp, #16]
   13458:	ldr	ip, [r4, #24]
   1345c:	str	ip, [sp, #20]
   13460:	ldr	ip, [r4, #28]
   13464:	str	ip, [sp, #24]
   13468:	ldr	ip, [r4, #32]
   1346c:	str	ip, [sp, #28]
   13470:	mov	r2, r0
   13474:	mov	r0, r5
   13478:	bl	110d8 <__fprintf_chk@plt>
   1347c:	add	sp, sp, #36	; 0x24
   13480:	pop	{r4, r5, r6, r7, pc}
   13484:	bl	1115c <abort@plt>
   13488:	ldr	r1, [pc, #620]	; 136fc <close_stdout@@Base+0x1ed0>
   1348c:	mov	r2, #5
   13490:	mov	r0, #0
   13494:	add	r1, pc, r1
   13498:	bl	10f7c <dcgettext@plt>
   1349c:	ldr	r3, [r4]
   134a0:	mov	r1, #1
   134a4:	mov	r2, r0
   134a8:	mov	r0, r5
   134ac:	add	sp, sp, #36	; 0x24
   134b0:	pop	{r4, r5, r6, r7, lr}
   134b4:	b	110d8 <__fprintf_chk@plt>
   134b8:	ldr	r1, [pc, #576]	; 13700 <close_stdout@@Base+0x1ed4>
   134bc:	mov	r2, #5
   134c0:	mov	r0, #0
   134c4:	add	r1, pc, r1
   134c8:	bl	10f7c <dcgettext@plt>
   134cc:	ldm	r4, {r3, ip}
   134d0:	mov	r1, #1
   134d4:	str	ip, [sp, #56]	; 0x38
   134d8:	mov	r2, r0
   134dc:	mov	r0, r5
   134e0:	add	sp, sp, #36	; 0x24
   134e4:	pop	{r4, r5, r6, r7, lr}
   134e8:	b	110d8 <__fprintf_chk@plt>
   134ec:	ldr	r1, [pc, #528]	; 13704 <close_stdout@@Base+0x1ed8>
   134f0:	mov	r2, #5
   134f4:	mov	r0, #0
   134f8:	add	r1, pc, r1
   134fc:	bl	10f7c <dcgettext@plt>
   13500:	ldm	r4, {r3, ip}
   13504:	mov	r1, #1
   13508:	str	ip, [sp, #56]	; 0x38
   1350c:	ldr	ip, [r4, #8]
   13510:	str	ip, [sp, #60]	; 0x3c
   13514:	mov	r2, r0
   13518:	mov	r0, r5
   1351c:	add	sp, sp, #36	; 0x24
   13520:	pop	{r4, r5, r6, r7, lr}
   13524:	b	110d8 <__fprintf_chk@plt>
   13528:	ldr	r1, [pc, #472]	; 13708 <close_stdout@@Base+0x1edc>
   1352c:	mov	r2, #5
   13530:	mov	r0, #0
   13534:	add	r1, pc, r1
   13538:	bl	10f7c <dcgettext@plt>
   1353c:	ldm	r4, {r3, ip}
   13540:	mov	r1, #1
   13544:	str	ip, [sp]
   13548:	ldr	ip, [r4, #8]
   1354c:	str	ip, [sp, #4]
   13550:	ldr	ip, [r4, #12]
   13554:	str	ip, [sp, #8]
   13558:	mov	r2, r0
   1355c:	mov	r0, r5
   13560:	bl	110d8 <__fprintf_chk@plt>
   13564:	b	1347c <close_stdout@@Base+0x1c50>
   13568:	ldr	r1, [pc, #412]	; 1370c <close_stdout@@Base+0x1ee0>
   1356c:	mov	r2, #5
   13570:	mov	r0, #0
   13574:	add	r1, pc, r1
   13578:	bl	10f7c <dcgettext@plt>
   1357c:	ldm	r4, {r3, ip}
   13580:	mov	r1, #1
   13584:	str	ip, [sp]
   13588:	ldr	ip, [r4, #8]
   1358c:	str	ip, [sp, #4]
   13590:	ldr	ip, [r4, #12]
   13594:	str	ip, [sp, #8]
   13598:	ldr	ip, [r4, #16]
   1359c:	str	ip, [sp, #12]
   135a0:	mov	r2, r0
   135a4:	mov	r0, r5
   135a8:	bl	110d8 <__fprintf_chk@plt>
   135ac:	b	1347c <close_stdout@@Base+0x1c50>
   135b0:	ldr	r1, [pc, #344]	; 13710 <close_stdout@@Base+0x1ee4>
   135b4:	mov	r2, #5
   135b8:	mov	r0, #0
   135bc:	add	r1, pc, r1
   135c0:	bl	10f7c <dcgettext@plt>
   135c4:	ldm	r4, {r3, ip}
   135c8:	mov	r1, #1
   135cc:	str	ip, [sp]
   135d0:	ldr	ip, [r4, #8]
   135d4:	str	ip, [sp, #4]
   135d8:	ldr	ip, [r4, #12]
   135dc:	str	ip, [sp, #8]
   135e0:	ldr	ip, [r4, #16]
   135e4:	str	ip, [sp, #12]
   135e8:	ldr	ip, [r4, #20]
   135ec:	str	ip, [sp, #16]
   135f0:	mov	r2, r0
   135f4:	mov	r0, r5
   135f8:	bl	110d8 <__fprintf_chk@plt>
   135fc:	b	1347c <close_stdout@@Base+0x1c50>
   13600:	ldr	r1, [pc, #268]	; 13714 <close_stdout@@Base+0x1ee8>
   13604:	mov	r2, #5
   13608:	mov	r0, #0
   1360c:	add	r1, pc, r1
   13610:	bl	10f7c <dcgettext@plt>
   13614:	ldm	r4, {r3, ip}
   13618:	mov	r1, #1
   1361c:	str	ip, [sp]
   13620:	ldr	ip, [r4, #8]
   13624:	str	ip, [sp, #4]
   13628:	ldr	ip, [r4, #12]
   1362c:	str	ip, [sp, #8]
   13630:	ldr	ip, [r4, #16]
   13634:	str	ip, [sp, #12]
   13638:	ldr	ip, [r4, #20]
   1363c:	str	ip, [sp, #16]
   13640:	ldr	ip, [r4, #24]
   13644:	str	ip, [sp, #20]
   13648:	mov	r2, r0
   1364c:	mov	r0, r5
   13650:	bl	110d8 <__fprintf_chk@plt>
   13654:	b	1347c <close_stdout@@Base+0x1c50>
   13658:	ldr	r1, [pc, #184]	; 13718 <close_stdout@@Base+0x1eec>
   1365c:	mov	r2, #5
   13660:	mov	r0, #0
   13664:	add	r1, pc, r1
   13668:	bl	10f7c <dcgettext@plt>
   1366c:	ldm	r4, {r3, ip}
   13670:	mov	r1, #1
   13674:	str	ip, [sp]
   13678:	ldr	ip, [r4, #8]
   1367c:	str	ip, [sp, #4]
   13680:	ldr	ip, [r4, #12]
   13684:	str	ip, [sp, #8]
   13688:	ldr	ip, [r4, #16]
   1368c:	str	ip, [sp, #12]
   13690:	ldr	ip, [r4, #20]
   13694:	str	ip, [sp, #16]
   13698:	ldr	ip, [r4, #24]
   1369c:	str	ip, [sp, #20]
   136a0:	ldr	ip, [r4, #28]
   136a4:	str	ip, [sp, #24]
   136a8:	mov	r2, r0
   136ac:	mov	r0, r5
   136b0:	bl	110d8 <__fprintf_chk@plt>
   136b4:	b	1347c <close_stdout@@Base+0x1c50>
   136b8:	str	r3, [sp]
   136bc:	mov	r3, r2
   136c0:	ldr	r2, [pc, #84]	; 1371c <close_stdout@@Base+0x1ef0>
   136c4:	mov	r1, #1
   136c8:	add	r2, pc, r2
   136cc:	bl	110d8 <__fprintf_chk@plt>
   136d0:	b	13394 <close_stdout@@Base+0x1b68>
   136d4:	ldr	r1, [pc, #68]	; 13720 <close_stdout@@Base+0x1ef4>
   136d8:	mov	r0, #0
   136dc:	add	r1, pc, r1
   136e0:	b	13424 <close_stdout@@Base+0x1bf8>
   136e4:	muleq	r1, r0, ip
   136e8:	andeq	r1, r0, ip, ror r7
   136ec:	andeq	r1, r0, ip, ror r7
   136f0:	andeq	r0, r0, r8, lsl r1
   136f4:	andeq	r1, r0, ip, asr #14
   136f8:	ldrdeq	r1, [r0], -r8
   136fc:	andeq	r1, r0, r8, asr r7
   13700:	andeq	r1, r0, r8, lsr r7
   13704:	andeq	r1, r0, ip, lsl r7
   13708:	strdeq	r1, [r0], -ip
   1370c:	ldrdeq	r1, [r0], -ip
   13710:			; <UNDEFINED> instruction: 0x000016b8
   13714:	muleq	r0, r0, r6
   13718:	andeq	r1, r0, r4, ror #12
   1371c:	andeq	r1, r0, ip, asr #8
   13720:	andeq	r1, r0, r0, asr r6
   13724:	push	{r4, r5, lr}
   13728:	sub	sp, sp, #12
   1372c:	ldr	r5, [sp, #24]
   13730:	ldr	ip, [r5]
   13734:	cmp	ip, #0
   13738:	beq	13754 <close_stdout@@Base+0x1f28>
   1373c:	mov	lr, r5
   13740:	mov	ip, #0
   13744:	ldr	r4, [lr, #4]!
   13748:	add	ip, ip, #1
   1374c:	cmp	r4, #0
   13750:	bne	13744 <close_stdout@@Base+0x1f18>
   13754:	stm	sp, {r5, ip}
   13758:	bl	13350 <close_stdout@@Base+0x1b24>
   1375c:	add	sp, sp, #12
   13760:	pop	{r4, r5, pc}
   13764:	push	{r4, r5, r6, r7, lr}
   13768:	sub	sp, sp, #60	; 0x3c
   1376c:	ldr	r4, [pc, #100]	; 137d8 <close_stdout@@Base+0x1fac>
   13770:	mov	ip, #0
   13774:	ldr	r5, [pc, #96]	; 137dc <close_stdout@@Base+0x1fb0>
   13778:	mov	lr, ip
   1377c:	add	r4, pc, r4
   13780:	ldr	r6, [sp, #80]	; 0x50
   13784:	ldr	r7, [r4, r5]
   13788:	add	r5, sp, #12
   1378c:	ldr	r4, [r7]
   13790:	str	r4, [sp, #52]	; 0x34
   13794:	ldr	r4, [r6, ip]
   13798:	cmp	r4, #0
   1379c:	str	r4, [r5, ip]
   137a0:	beq	137b4 <close_stdout@@Base+0x1f88>
   137a4:	add	lr, lr, #1
   137a8:	add	ip, ip, #4
   137ac:	cmp	lr, #10
   137b0:	bne	13794 <close_stdout@@Base+0x1f68>
   137b4:	stm	sp, {r5, lr}
   137b8:	bl	13350 <close_stdout@@Base+0x1b24>
   137bc:	ldr	r2, [sp, #52]	; 0x34
   137c0:	ldr	r3, [r7]
   137c4:	cmp	r2, r3
   137c8:	bne	137d4 <close_stdout@@Base+0x1fa8>
   137cc:	add	sp, sp, #60	; 0x3c
   137d0:	pop	{r4, r5, r6, r7, pc}
   137d4:	bl	10f88 <__stack_chk_fail@plt>
   137d8:	andeq	r2, r1, ip, ror r8
   137dc:	andeq	r0, r0, r8, ror #1
   137e0:	push	{r3}		; (str r3, [sp, #-4]!)
   137e4:	push	{r4, lr}
   137e8:	sub	sp, sp, #20
   137ec:	ldr	lr, [pc, #72]	; 1383c <close_stdout@@Base+0x2010>
   137f0:	add	ip, sp, #32
   137f4:	ldr	r4, [pc, #68]	; 13840 <close_stdout@@Base+0x2014>
   137f8:	add	lr, pc, lr
   137fc:	ldr	r3, [sp, #28]
   13800:	ldr	r4, [lr, r4]
   13804:	str	ip, [sp]
   13808:	str	ip, [sp, #8]
   1380c:	ldr	ip, [r4]
   13810:	str	ip, [sp, #12]
   13814:	bl	13764 <close_stdout@@Base+0x1f38>
   13818:	ldr	r2, [sp, #12]
   1381c:	ldr	r3, [r4]
   13820:	cmp	r2, r3
   13824:	bne	13838 <close_stdout@@Base+0x200c>
   13828:	add	sp, sp, #20
   1382c:	pop	{r4, lr}
   13830:	add	sp, sp, #4
   13834:	bx	lr
   13838:	bl	10f88 <__stack_chk_fail@plt>
   1383c:	andeq	r2, r1, r0, lsl #16
   13840:	andeq	r0, r0, r8, ror #1
   13844:	ldr	r1, [pc, #132]	; 138d0 <close_stdout@@Base+0x20a4>
   13848:	mov	r2, #5
   1384c:	push	{r4, lr}
   13850:	add	r1, pc, r1
   13854:	mov	r0, #0
   13858:	ldr	r4, [pc, #116]	; 138d4 <close_stdout@@Base+0x20a8>
   1385c:	bl	10f7c <dcgettext@plt>
   13860:	ldr	r2, [pc, #112]	; 138d8 <close_stdout@@Base+0x20ac>
   13864:	add	r4, pc, r4
   13868:	add	r2, pc, r2
   1386c:	mov	r1, r0
   13870:	mov	r0, #1
   13874:	bl	110c0 <__printf_chk@plt>
   13878:	ldr	r1, [pc, #92]	; 138dc <close_stdout@@Base+0x20b0>
   1387c:	mov	r2, #5
   13880:	mov	r0, #0
   13884:	add	r1, pc, r1
   13888:	bl	10f7c <dcgettext@plt>
   1388c:	ldr	r2, [pc, #76]	; 138e0 <close_stdout@@Base+0x20b4>
   13890:	ldr	r3, [pc, #76]	; 138e4 <close_stdout@@Base+0x20b8>
   13894:	add	r2, pc, r2
   13898:	add	r3, pc, r3
   1389c:	mov	r1, r0
   138a0:	mov	r0, #1
   138a4:	bl	110c0 <__printf_chk@plt>
   138a8:	ldr	r1, [pc, #56]	; 138e8 <close_stdout@@Base+0x20bc>
   138ac:	mov	r0, #0
   138b0:	mov	r2, #5
   138b4:	add	r1, pc, r1
   138b8:	bl	10f7c <dcgettext@plt>
   138bc:	ldr	r3, [pc, #40]	; 138ec <close_stdout@@Base+0x20c0>
   138c0:	ldr	r3, [r4, r3]
   138c4:	pop	{r4, lr}
   138c8:	ldr	r1, [r3]
   138cc:	b	10f04 <fputs_unlocked@plt>
   138d0:	andeq	r1, r0, r8, lsl r5
   138d4:	muleq	r1, r4, r7
   138d8:	andeq	r1, r0, r8, lsl r5
   138dc:	andeq	r1, r0, r4, lsl r5
   138e0:	andeq	r1, r0, r4, lsr r0
   138e4:	andeq	r1, r0, r0, asr #32
   138e8:	strdeq	r1, [r0], -r8
   138ec:	andeq	r0, r0, r4, lsl #2
   138f0:	push	{r4, lr}
   138f4:	mov	r4, r0
   138f8:	bl	11024 <malloc@plt>
   138fc:	rsbs	r3, r0, #1
   13900:	movcc	r3, #0
   13904:	cmp	r4, #0
   13908:	moveq	r3, #0
   1390c:	cmp	r3, #0
   13910:	popeq	{r4, pc}
   13914:	bl	13b04 <close_stdout@@Base+0x22d8>
   13918:	push	{r3, r4, r5, lr}
   1391c:	mov	r4, r0
   13920:	mvn	r0, #0
   13924:	mov	r5, r1
   13928:	bl	143e8 <close_stdout@@Base+0x2bbc>
   1392c:	cmp	r0, r4
   13930:	bcc	13940 <close_stdout@@Base+0x2114>
   13934:	mul	r0, r4, r5
   13938:	pop	{r3, r4, r5, lr}
   1393c:	b	138f0 <close_stdout@@Base+0x20c4>
   13940:	bl	13b04 <close_stdout@@Base+0x22d8>
   13944:	b	138f0 <close_stdout@@Base+0x20c4>
   13948:	rsbs	r3, r1, #1
   1394c:	push	{r4, lr}
   13950:	movcc	r3, #0
   13954:	cmp	r0, #0
   13958:	mov	r4, r1
   1395c:	moveq	r3, #0
   13960:	cmp	r3, #0
   13964:	bne	13988 <close_stdout@@Base+0x215c>
   13968:	bl	10f94 <realloc@plt>
   1396c:	rsbs	r3, r0, #1
   13970:	movcc	r3, #0
   13974:	cmp	r4, #0
   13978:	moveq	r3, #0
   1397c:	cmp	r3, #0
   13980:	popeq	{r4, pc}
   13984:	bl	13b04 <close_stdout@@Base+0x22d8>
   13988:	bl	10f34 <free@plt>
   1398c:	mov	r0, #0
   13990:	pop	{r4, pc}
   13994:	push	{r4, r5, r6, lr}
   13998:	mov	r5, r1
   1399c:	mov	r6, r0
   139a0:	mov	r1, r2
   139a4:	mvn	r0, #0
   139a8:	mov	r4, r2
   139ac:	bl	143e8 <close_stdout@@Base+0x2bbc>
   139b0:	cmp	r0, r5
   139b4:	bcc	139c8 <close_stdout@@Base+0x219c>
   139b8:	mov	r0, r6
   139bc:	mul	r1, r5, r4
   139c0:	pop	{r4, r5, r6, lr}
   139c4:	b	13948 <close_stdout@@Base+0x211c>
   139c8:	bl	13b04 <close_stdout@@Base+0x22d8>
   139cc:	push	{r3, r4, r5, r6, r7, lr}
   139d0:	subs	r7, r0, #0
   139d4:	mov	r5, r1
   139d8:	mov	r6, r2
   139dc:	ldr	r4, [r1]
   139e0:	beq	13a18 <close_stdout@@Base+0x21ec>
   139e4:	movw	r0, #43690	; 0xaaaa
   139e8:	mov	r1, r2
   139ec:	bfi	r0, r0, #16, #16
   139f0:	bl	143e8 <close_stdout@@Base+0x2bbc>
   139f4:	cmp	r4, r0
   139f8:	addcc	r3, r4, #1
   139fc:	addcc	r4, r4, r3, lsr #1
   13a00:	bcs	13a3c <close_stdout@@Base+0x2210>
   13a04:	str	r4, [r5]
   13a08:	mov	r0, r7
   13a0c:	mul	r1, r6, r4
   13a10:	pop	{r3, r4, r5, r6, r7, lr}
   13a14:	b	13948 <close_stdout@@Base+0x211c>
   13a18:	cmp	r4, #0
   13a1c:	bne	13a04 <close_stdout@@Base+0x21d8>
   13a20:	mov	r0, #64	; 0x40
   13a24:	mov	r1, r2
   13a28:	bl	143e8 <close_stdout@@Base+0x2bbc>
   13a2c:	cmp	r0, #0
   13a30:	movne	r4, r0
   13a34:	addeq	r4, r0, #1
   13a38:	b	13a04 <close_stdout@@Base+0x21d8>
   13a3c:	bl	13b04 <close_stdout@@Base+0x22d8>
   13a40:	cmp	r0, #0
   13a44:	push	{r3, lr}
   13a48:	ldr	r3, [r1]
   13a4c:	beq	13a78 <close_stdout@@Base+0x224c>
   13a50:	movw	r2, #43689	; 0xaaa9
   13a54:	movt	r2, #43690	; 0xaaaa
   13a58:	cmp	r3, r2
   13a5c:	addls	r2, r3, #1
   13a60:	addls	r3, r3, r2, lsr #1
   13a64:	bhi	13a90 <close_stdout@@Base+0x2264>
   13a68:	str	r3, [r1]
   13a6c:	mov	r1, r3
   13a70:	pop	{r3, lr}
   13a74:	b	13948 <close_stdout@@Base+0x211c>
   13a78:	cmp	r3, #0
   13a7c:	moveq	r3, #64	; 0x40
   13a80:	str	r3, [r1]
   13a84:	mov	r1, r3
   13a88:	pop	{r3, lr}
   13a8c:	b	13948 <close_stdout@@Base+0x211c>
   13a90:	bl	13b04 <close_stdout@@Base+0x22d8>
   13a94:	push	{r4, lr}
   13a98:	mov	r4, r0
   13a9c:	bl	138f0 <close_stdout@@Base+0x20c4>
   13aa0:	mov	r2, r4
   13aa4:	mov	r1, #0
   13aa8:	pop	{r4, lr}
   13aac:	b	110a8 <memset@plt>
   13ab0:	push	{r3, lr}
   13ab4:	bl	10ef8 <calloc@plt>
   13ab8:	cmp	r0, #0
   13abc:	popne	{r3, pc}
   13ac0:	bl	13b04 <close_stdout@@Base+0x22d8>
   13ac4:	push	{r3, r4, r5, lr}
   13ac8:	mov	r4, r1
   13acc:	mov	r5, r0
   13ad0:	mov	r0, r1
   13ad4:	bl	138f0 <close_stdout@@Base+0x20c4>
   13ad8:	mov	r1, r5
   13adc:	mov	r2, r4
   13ae0:	pop	{r3, r4, r5, lr}
   13ae4:	b	10f58 <memcpy@plt>
   13ae8:	push	{r4, lr}
   13aec:	mov	r4, r0
   13af0:	bl	11078 <strlen@plt>
   13af4:	add	r1, r0, #1
   13af8:	mov	r0, r4
   13afc:	pop	{r4, lr}
   13b00:	b	13ac4 <close_stdout@@Base+0x2298>
   13b04:	ldr	r3, [pc, #64]	; 13b4c <close_stdout@@Base+0x2320>
   13b08:	mov	r2, #5
   13b0c:	ldr	ip, [pc, #60]	; 13b50 <close_stdout@@Base+0x2324>
   13b10:	mov	r0, #0
   13b14:	add	r3, pc, r3
   13b18:	ldr	r1, [pc, #52]	; 13b54 <close_stdout@@Base+0x2328>
   13b1c:	push	{r4, lr}
   13b20:	add	r1, pc, r1
   13b24:	ldr	r3, [r3, ip]
   13b28:	ldr	r4, [r3]
   13b2c:	bl	10f7c <dcgettext@plt>
   13b30:	ldr	r2, [pc, #32]	; 13b58 <close_stdout@@Base+0x232c>
   13b34:	mov	r1, #0
   13b38:	add	r2, pc, r2
   13b3c:	mov	r3, r0
   13b40:	mov	r0, r4
   13b44:	bl	11000 <error@plt>
   13b48:	bl	1115c <abort@plt>
   13b4c:	andeq	r2, r1, r4, ror #9
   13b50:	andeq	r0, r0, ip, lsl #2
   13b54:	strdeq	r1, [r0], -ip
   13b58:	strdeq	r0, [r0], -r4
   13b5c:	ldr	r3, [pc, #124]	; 13be0 <close_stdout@@Base+0x23b4>
   13b60:	ldr	r2, [pc, #124]	; 13be4 <close_stdout@@Base+0x23b8>
   13b64:	add	r3, pc, r3
   13b68:	push	{r4, r5, r6, r7, lr}
   13b6c:	sub	sp, sp, #20
   13b70:	ldr	r7, [r3, r2]
   13b74:	add	r5, sp, #4
   13b78:	mov	r6, #0
   13b7c:	mov	r0, r5
   13b80:	ldr	r3, [r7]
   13b84:	str	r3, [sp, #12]
   13b88:	bl	13d38 <close_stdout@@Base+0x250c>
   13b8c:	bl	11090 <__errno_location@plt>
   13b90:	mov	r4, r0
   13b94:	b	13ba4 <close_stdout@@Base+0x2378>
   13b98:	ldr	r3, [r4]
   13b9c:	bics	r2, r3, #4
   13ba0:	bne	13bd4 <close_stdout@@Base+0x23a8>
   13ba4:	str	r6, [r4]
   13ba8:	mov	r0, r5
   13bac:	mov	r1, #0
   13bb0:	bl	10f40 <nanosleep@plt>
   13bb4:	cmp	r0, #0
   13bb8:	bne	13b98 <close_stdout@@Base+0x236c>
   13bbc:	ldr	r2, [sp, #12]
   13bc0:	ldr	r3, [r7]
   13bc4:	cmp	r2, r3
   13bc8:	bne	13bdc <close_stdout@@Base+0x23b0>
   13bcc:	add	sp, sp, #20
   13bd0:	pop	{r4, r5, r6, r7, pc}
   13bd4:	mvn	r0, #0
   13bd8:	b	13bbc <close_stdout@@Base+0x2390>
   13bdc:	bl	10f88 <__stack_chk_fail@plt>
   13be0:	muleq	r1, r4, r4
   13be4:	andeq	r0, r0, r8, ror #1
   13be8:	ldr	ip, [pc, #192]	; 13cb0 <close_stdout@@Base+0x2484>
   13bec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13bf0:	mov	r6, r0
   13bf4:	ldr	r0, [pc, #184]	; 13cb4 <close_stdout@@Base+0x2488>
   13bf8:	add	ip, pc, ip
   13bfc:	mov	sl, r3
   13c00:	sub	sp, sp, #8
   13c04:	mov	r9, r2
   13c08:	mov	r4, r1
   13c0c:	ldr	r5, [ip, r0]
   13c10:	mov	r1, ip
   13c14:	mov	r8, #0
   13c18:	ldr	r3, [r5]
   13c1c:	str	r3, [sp, #4]
   13c20:	bl	11090 <__errno_location@plt>
   13c24:	mov	r1, sp
   13c28:	mov	r7, r0
   13c2c:	mov	r0, r6
   13c30:	str	r8, [r7]
   13c34:	blx	sl
   13c38:	ldr	r3, [sp]
   13c3c:	cmp	r3, r6
   13c40:	beq	13c90 <close_stdout@@Base+0x2464>
   13c44:	cmp	r4, r8
   13c48:	beq	13c98 <close_stdout@@Base+0x246c>
   13c4c:	vcmp.f64	d0, #0.0
   13c50:	vmrs	APSR_nzcv, fpscr
   13c54:	moveq	r0, #1
   13c58:	bne	13c80 <close_stdout@@Base+0x2454>
   13c5c:	cmp	r4, #0
   13c60:	strne	r3, [r4]
   13c64:	ldr	r2, [sp, #4]
   13c68:	vstr	d0, [r9]
   13c6c:	ldr	r3, [r5]
   13c70:	cmp	r2, r3
   13c74:	bne	13cac <close_stdout@@Base+0x2480>
   13c78:	add	sp, sp, #8
   13c7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c80:	ldr	r0, [r7]
   13c84:	subs	r0, r0, #34	; 0x22
   13c88:	movne	r0, #1
   13c8c:	b	13c5c <close_stdout@@Base+0x2430>
   13c90:	mov	r0, r8
   13c94:	b	13c5c <close_stdout@@Base+0x2430>
   13c98:	ldrb	r2, [r3]
   13c9c:	cmp	r2, r8
   13ca0:	movne	r0, r4
   13ca4:	bne	13c64 <close_stdout@@Base+0x2438>
   13ca8:	b	13c4c <close_stdout@@Base+0x2420>
   13cac:	bl	10f88 <__stack_chk_fail@plt>
   13cb0:	andeq	r2, r1, r0, lsl #8
   13cb4:	andeq	r0, r0, r8, ror #1
   13cb8:	push	{r4, r5, r6, lr}
   13cbc:	mov	r4, r0
   13cc0:	bl	10fe8 <__fpending@plt>
   13cc4:	mov	r6, r0
   13cc8:	mov	r0, r4
   13ccc:	ldr	r4, [r4]
   13cd0:	bl	14240 <close_stdout@@Base+0x2a14>
   13cd4:	and	r4, r4, #32
   13cd8:	adds	r5, r0, #0
   13cdc:	movne	r5, #1
   13ce0:	cmp	r4, #0
   13ce4:	bne	13d04 <close_stdout@@Base+0x24d8>
   13ce8:	cmp	r5, #0
   13cec:	beq	13cfc <close_stdout@@Base+0x24d0>
   13cf0:	cmp	r6, #0
   13cf4:	beq	13d20 <close_stdout@@Base+0x24f4>
   13cf8:	mvn	r4, #0
   13cfc:	mov	r0, r4
   13d00:	pop	{r4, r5, r6, pc}
   13d04:	cmp	r5, #0
   13d08:	bne	13cf8 <close_stdout@@Base+0x24cc>
   13d0c:	bl	11090 <__errno_location@plt>
   13d10:	mvn	r4, #0
   13d14:	str	r5, [r0]
   13d18:	mov	r0, r4
   13d1c:	pop	{r4, r5, r6, pc}
   13d20:	bl	11090 <__errno_location@plt>
   13d24:	ldr	r4, [r0]
   13d28:	subs	r4, r4, #9
   13d2c:	mvnne	r4, #0
   13d30:	mov	r0, r4
   13d34:	pop	{r4, r5, r6, pc}
   13d38:	vldr	d7, [pc, #200]	; 13e08 <close_stdout@@Base+0x25dc>
   13d3c:	vcmpe.f64	d0, d7
   13d40:	push	{r4}		; (str r4, [sp, #-4]!)
   13d44:	vmrs	APSR_nzcv, fpscr
   13d48:	ble	13df4 <close_stdout@@Base+0x25c8>
   13d4c:	vldr	d7, [pc, #188]	; 13e10 <close_stdout@@Base+0x25e4>
   13d50:	vcmpe.f64	d0, d7
   13d54:	vmrs	APSR_nzcv, fpscr
   13d58:	bpl	13ddc <close_stdout@@Base+0x25b0>
   13d5c:	vcvt.s32.f64	s11, d0
   13d60:	vldr	d7, [pc, #176]	; 13e18 <close_stdout@@Base+0x25ec>
   13d64:	movw	r3, #12193	; 0x2fa1
   13d68:	movt	r3, #17592	; 0x44b8
   13d6c:	mov	r1, #51712	; 0xca00
   13d70:	movt	r1, #15258	; 0x3b9a
   13d74:	vcvt.f64.s32	d6, s11
   13d78:	vsub.f64	d0, d0, d6
   13d7c:	vmul.f64	d0, d0, d7
   13d80:	vcvt.s32.f64	s13, d0
   13d84:	vmov	r4, s13
   13d88:	vcvt.f64.s32	d7, s13
   13d8c:	vcmpe.f64	d7, d0
   13d90:	vmrs	APSR_nzcv, fpscr
   13d94:	movpl	r2, #0
   13d98:	movmi	r2, #1
   13d9c:	add	r2, r2, r4
   13da0:	vmov	r4, s11
   13da4:	smull	ip, r3, r3, r2
   13da8:	asr	ip, r2, #31
   13dac:	rsb	r3, ip, r3, asr #28
   13db0:	add	ip, r3, r4
   13db4:	mls	r3, r1, r3, r2
   13db8:	cmp	r3, #0
   13dbc:	addlt	r3, r3, #998244352	; 0x3b800000
   13dc0:	sublt	ip, ip, #1
   13dc4:	addlt	r3, r3, #1753088	; 0x1ac000
   13dc8:	str	ip, [r0]
   13dcc:	addlt	r3, r3, #2560	; 0xa00
   13dd0:	str	r3, [r0, #4]
   13dd4:	pop	{r4}		; (ldr r4, [sp], #4)
   13dd8:	bx	lr
   13ddc:	movw	r3, #51711	; 0xc9ff
   13de0:	mvn	r2, #-2147483648	; 0x80000000
   13de4:	movt	r3, #15258	; 0x3b9a
   13de8:	stm	r0, {r2, r3}
   13dec:	pop	{r4}		; (ldr r4, [sp], #4)
   13df0:	bx	lr
   13df4:	mov	r2, #-2147483648	; 0x80000000
   13df8:	mov	r3, #0
   13dfc:	stm	r0, {r2, r3}
   13e00:	pop	{r4}		; (ldr r4, [sp], #4)
   13e04:	bx	lr
   13e08:	andeq	r0, r0, r0
   13e0c:	mvngt	r0, r0
   13e10:	andeq	r0, r0, r0
   13e14:	mvnmi	r0, r0
   13e18:	andeq	r0, r0, r0
   13e1c:	bicmi	ip, sp, r5, ror #26
   13e20:	ldr	r3, [pc, #984]	; 14200 <close_stdout@@Base+0x29d4>
   13e24:	mov	r0, #14
   13e28:	ldr	r2, [pc, #980]	; 14204 <close_stdout@@Base+0x29d8>
   13e2c:	add	r3, pc, r3
   13e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e34:	sub	sp, sp, #132	; 0x84
   13e38:	ldr	r6, [r3, r2]
   13e3c:	ldr	r3, [r6]
   13e40:	str	r3, [sp, #124]	; 0x7c
   13e44:	bl	1112c <nl_langinfo@plt>
   13e48:	subs	r5, r0, #0
   13e4c:	beq	13f00 <close_stdout@@Base+0x26d4>
   13e50:	ldr	r3, [pc, #944]	; 14208 <close_stdout@@Base+0x29dc>
   13e54:	ldr	r4, [pc, r3]
   13e58:	cmp	r4, #0
   13e5c:	beq	13f0c <close_stdout@@Base+0x26e0>
   13e60:	ldrb	r7, [r4]
   13e64:	cmp	r7, #0
   13e68:	bne	13e9c <close_stdout@@Base+0x2670>
   13e6c:	b	13ed4 <close_stdout@@Base+0x26a8>
   13e70:	mov	r0, r4
   13e74:	bl	11078 <strlen@plt>
   13e78:	add	r0, r0, #1
   13e7c:	add	r7, r4, r0
   13e80:	mov	r0, r7
   13e84:	bl	11078 <strlen@plt>
   13e88:	add	r0, r0, #1
   13e8c:	add	r4, r7, r0
   13e90:	ldrb	r7, [r7, r0]
   13e94:	cmp	r7, #0
   13e98:	beq	13ed4 <close_stdout@@Base+0x26a8>
   13e9c:	mov	r0, r5
   13ea0:	mov	r1, r4
   13ea4:	bl	10f1c <strcmp@plt>
   13ea8:	cmp	r0, #0
   13eac:	beq	13ec4 <close_stdout@@Base+0x2698>
   13eb0:	cmp	r7, #42	; 0x2a
   13eb4:	bne	13e70 <close_stdout@@Base+0x2644>
   13eb8:	ldrb	r3, [r4, #1]
   13ebc:	cmp	r3, #0
   13ec0:	bne	13e70 <close_stdout@@Base+0x2644>
   13ec4:	mov	r0, r4
   13ec8:	bl	11078 <strlen@plt>
   13ecc:	add	r0, r0, #1
   13ed0:	add	r5, r4, r0
   13ed4:	ldrb	r3, [r5]
   13ed8:	cmp	r3, #0
   13edc:	ldreq	r5, [pc, #808]	; 1420c <close_stdout@@Base+0x29e0>
   13ee0:	addeq	r5, pc, r5
   13ee4:	ldr	r2, [sp, #124]	; 0x7c
   13ee8:	mov	r0, r5
   13eec:	ldr	r3, [r6]
   13ef0:	cmp	r2, r3
   13ef4:	bne	141d4 <close_stdout@@Base+0x29a8>
   13ef8:	add	sp, sp, #132	; 0x84
   13efc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f00:	ldr	r5, [pc, #776]	; 14210 <close_stdout@@Base+0x29e4>
   13f04:	add	r5, pc, r5
   13f08:	b	13e50 <close_stdout@@Base+0x2624>
   13f0c:	ldr	r0, [pc, #768]	; 14214 <close_stdout@@Base+0x29e8>
   13f10:	add	r0, pc, r0
   13f14:	bl	11018 <getenv@plt>
   13f18:	subs	r8, r0, #0
   13f1c:	beq	141ac <close_stdout@@Base+0x2980>
   13f20:	ldrb	r3, [r8]
   13f24:	cmp	r3, #0
   13f28:	beq	14140 <close_stdout@@Base+0x2914>
   13f2c:	bl	11078 <strlen@plt>
   13f30:	subs	sl, r0, #0
   13f34:	subne	r3, sl, #1
   13f38:	bne	14150 <close_stdout@@Base+0x2924>
   13f3c:	mov	r9, #0
   13f40:	mov	fp, r9
   13f44:	add	r9, sl, r9
   13f48:	add	r0, r9, #14
   13f4c:	bl	11024 <malloc@plt>
   13f50:	subs	r7, r0, #0
   13f54:	beq	141a0 <close_stdout@@Base+0x2974>
   13f58:	mov	r1, r8
   13f5c:	mov	r2, sl
   13f60:	bl	10f58 <memcpy@plt>
   13f64:	cmp	fp, #0
   13f68:	add	ip, r7, r9
   13f6c:	movne	r3, #47	; 0x2f
   13f70:	strbne	r3, [r7, sl]
   13f74:	ldr	r3, [pc, #668]	; 14218 <close_stdout@@Base+0x29ec>
   13f78:	add	r3, pc, r3
   13f7c:	ldm	r3!, {r0, r1, r2}
   13f80:	ldrh	r3, [r3]
   13f84:	str	r0, [r7, r9]
   13f88:	mov	r0, r7
   13f8c:	str	r1, [ip, #4]
   13f90:	mov	r1, #32768	; 0x8000
   13f94:	strh	r3, [ip, #12]
   13f98:	str	r2, [ip, #8]
   13f9c:	bl	1100c <open64@plt>
   13fa0:	subs	r8, r0, #0
   13fa4:	blt	14168 <close_stdout@@Base+0x293c>
   13fa8:	ldr	r1, [pc, #620]	; 1421c <close_stdout@@Base+0x29f0>
   13fac:	add	r1, pc, r1
   13fb0:	bl	10eec <fdopen@plt>
   13fb4:	subs	fp, r0, #0
   13fb8:	beq	141c0 <close_stdout@@Base+0x2994>
   13fbc:	ldr	r0, [pc, #604]	; 14220 <close_stdout@@Base+0x29f4>
   13fc0:	add	sl, sp, #20
   13fc4:	add	r9, sp, #72	; 0x48
   13fc8:	mov	r8, #0
   13fcc:	add	r0, pc, r0
   13fd0:	str	r0, [sp, #12]
   13fd4:	ldr	r3, [fp, #4]
   13fd8:	ldr	r2, [fp, #8]
   13fdc:	cmp	r3, r2
   13fe0:	bcs	140cc <close_stdout@@Base+0x28a0>
   13fe4:	add	r2, r3, #1
   13fe8:	str	r2, [fp, #4]
   13fec:	ldrb	r0, [r3]
   13ff0:	cmp	r0, #32
   13ff4:	beq	13fd4 <close_stdout@@Base+0x27a8>
   13ff8:	sub	r3, r0, #9
   13ffc:	cmp	r3, #1
   14000:	bls	13fd4 <close_stdout@@Base+0x27a8>
   14004:	cmp	r0, #35	; 0x23
   14008:	beq	140e0 <close_stdout@@Base+0x28b4>
   1400c:	mov	r1, fp
   14010:	bl	11084 <ungetc@plt>
   14014:	mov	r0, fp
   14018:	ldr	r1, [sp, #12]
   1401c:	mov	r2, sl
   14020:	mov	r3, r9
   14024:	bl	110b4 <fscanf@plt>
   14028:	cmp	r0, #1
   1402c:	ble	14110 <close_stdout@@Base+0x28e4>
   14030:	mov	r0, sl
   14034:	bl	11078 <strlen@plt>
   14038:	str	r0, [sp, #8]
   1403c:	mov	r0, r9
   14040:	bl	11078 <strlen@plt>
   14044:	cmp	r8, #0
   14048:	mov	r2, r0
   1404c:	bne	14174 <close_stdout@@Base+0x2948>
   14050:	ldr	r3, [sp, #8]
   14054:	str	r2, [sp]
   14058:	add	r8, r0, r3
   1405c:	add	r0, r8, #3
   14060:	add	r8, r8, #2
   14064:	bl	11024 <malloc@plt>
   14068:	ldr	r2, [sp]
   1406c:	mov	r3, r0
   14070:	cmp	r3, #0
   14074:	beq	141d8 <close_stdout@@Base+0x29ac>
   14078:	ldr	r0, [sp, #8]
   1407c:	movw	r1, #65534	; 0xfffe
   14080:	movt	r1, #65535	; 0xffff
   14084:	rsb	r2, r2, r8
   14088:	rsb	r1, r0, r1
   1408c:	stm	sp, {r2, r3}
   14090:	add	r0, r1, r2
   14094:	mov	r1, sl
   14098:	add	r0, r3, r0
   1409c:	mov	r4, r3
   140a0:	bl	10fdc <strcpy@plt>
   140a4:	ldr	r2, [sp]
   140a8:	ldr	r3, [sp, #4]
   140ac:	mov	r1, r9
   140b0:	sub	r0, r2, #1
   140b4:	add	r0, r3, r0
   140b8:	bl	10fdc <strcpy@plt>
   140bc:	ldr	r3, [fp, #4]
   140c0:	ldr	r2, [fp, #8]
   140c4:	cmp	r3, r2
   140c8:	bcc	13fe4 <close_stdout@@Base+0x27b8>
   140cc:	mov	r0, fp
   140d0:	bl	11108 <__uflow@plt>
   140d4:	cmn	r0, #1
   140d8:	beq	14110 <close_stdout@@Base+0x28e4>
   140dc:	b	13ff0 <close_stdout@@Base+0x27c4>
   140e0:	ldr	r3, [fp, #4]
   140e4:	ldr	r2, [fp, #8]
   140e8:	cmp	r3, r2
   140ec:	bcs	141f4 <close_stdout@@Base+0x29c8>
   140f0:	add	r2, r3, #1
   140f4:	str	r2, [fp, #4]
   140f8:	ldrb	r0, [r3]
   140fc:	cmp	r0, #10
   14100:	cmnne	r0, #1
   14104:	bne	140e0 <close_stdout@@Base+0x28b4>
   14108:	cmn	r0, #1
   1410c:	bne	13fd4 <close_stdout@@Base+0x27a8>
   14110:	mov	r0, fp
   14114:	bl	14240 <close_stdout@@Base+0x2a14>
   14118:	cmp	r8, #0
   1411c:	beq	14168 <close_stdout@@Base+0x293c>
   14120:	mov	r3, #0
   14124:	strb	r3, [r4, r8]
   14128:	mov	r0, r7
   1412c:	bl	10f34 <free@plt>
   14130:	ldr	r3, [pc, #236]	; 14224 <close_stdout@@Base+0x29f8>
   14134:	add	r3, pc, r3
   14138:	str	r4, [r3]
   1413c:	b	13e60 <close_stdout@@Base+0x2634>
   14140:	ldr	r8, [pc, #224]	; 14228 <close_stdout@@Base+0x29fc>
   14144:	mov	r3, #7
   14148:	mov	sl, #8
   1414c:	add	r8, pc, r8
   14150:	ldrb	r3, [r8, r3]
   14154:	cmp	r3, #47	; 0x2f
   14158:	movne	r9, #1
   1415c:	movne	fp, r9
   14160:	bne	13f44 <close_stdout@@Base+0x2718>
   14164:	b	13f3c <close_stdout@@Base+0x2710>
   14168:	ldr	r4, [pc, #188]	; 1422c <close_stdout@@Base+0x2a00>
   1416c:	add	r4, pc, r4
   14170:	b	14128 <close_stdout@@Base+0x28fc>
   14174:	ldr	r0, [sp, #8]
   14178:	str	r2, [sp]
   1417c:	add	r3, r0, r2
   14180:	mov	r0, r4
   14184:	add	r8, r3, r8
   14188:	add	r1, r8, #3
   1418c:	add	r8, r8, #2
   14190:	bl	10f94 <realloc@plt>
   14194:	ldr	r2, [sp]
   14198:	mov	r3, r0
   1419c:	b	14070 <close_stdout@@Base+0x2844>
   141a0:	ldr	r4, [pc, #136]	; 14230 <close_stdout@@Base+0x2a04>
   141a4:	add	r4, pc, r4
   141a8:	b	14130 <close_stdout@@Base+0x2904>
   141ac:	ldr	r8, [pc, #128]	; 14234 <close_stdout@@Base+0x2a08>
   141b0:	mov	r3, #7
   141b4:	mov	sl, #8
   141b8:	add	r8, pc, r8
   141bc:	b	14150 <close_stdout@@Base+0x2924>
   141c0:	ldr	r4, [pc, #112]	; 14238 <close_stdout@@Base+0x2a0c>
   141c4:	mov	r0, r8
   141c8:	add	r4, pc, r4
   141cc:	bl	11168 <close@plt>
   141d0:	b	14128 <close_stdout@@Base+0x28fc>
   141d4:	bl	10f88 <__stack_chk_fail@plt>
   141d8:	mov	r0, r4
   141dc:	ldr	r4, [pc, #88]	; 1423c <close_stdout@@Base+0x2a10>
   141e0:	bl	10f34 <free@plt>
   141e4:	mov	r0, fp
   141e8:	add	r4, pc, r4
   141ec:	bl	14240 <close_stdout@@Base+0x2a14>
   141f0:	b	14128 <close_stdout@@Base+0x28fc>
   141f4:	mov	r0, fp
   141f8:	bl	11108 <__uflow@plt>
   141fc:	b	140fc <close_stdout@@Base+0x28d0>
   14200:	andeq	r2, r1, ip, asr #3
   14204:	andeq	r0, r0, r8, ror #1
   14208:	andeq	r2, r1, ip, asr r4
   1420c:	andeq	r0, r0, ip, asr pc
   14210:	andeq	r0, r0, r8, lsl #21
   14214:	andeq	r0, r0, r4, lsr pc
   14218:	ldrdeq	r0, [r0], -ip
   1421c:			; <UNDEFINED> instruction: 0x00000eb8
   14220:	muleq	r0, ip, lr
   14224:	andeq	r2, r1, ip, ror r1
   14228:	andeq	r0, r0, r4, ror #25
   1422c:	andeq	r0, r0, r0, lsr #16
   14230:	andeq	r0, r0, r8, ror #15
   14234:	andeq	r0, r0, r8, ror ip
   14238:	andeq	r0, r0, r4, asr #15
   1423c:	andeq	r0, r0, r4, lsr #15
   14240:	push	{r4, r5, r6, lr}
   14244:	sub	sp, sp, #8
   14248:	mov	r4, r0
   1424c:	bl	110cc <fileno@plt>
   14250:	cmp	r0, #0
   14254:	mov	r0, r4
   14258:	blt	142d4 <close_stdout@@Base+0x2aa8>
   1425c:	bl	1103c <__freading@plt>
   14260:	cmp	r0, #0
   14264:	bne	142a0 <close_stdout@@Base+0x2a74>
   14268:	mov	r0, r4
   1426c:	bl	142e0 <close_stdout@@Base+0x2ab4>
   14270:	cmp	r0, #0
   14274:	beq	142d0 <close_stdout@@Base+0x2aa4>
   14278:	bl	11090 <__errno_location@plt>
   1427c:	ldr	r6, [r0]
   14280:	mov	r5, r0
   14284:	mov	r0, r4
   14288:	bl	110e4 <fclose@plt>
   1428c:	cmp	r6, #0
   14290:	mvnne	r0, #0
   14294:	strne	r6, [r5]
   14298:	add	sp, sp, #8
   1429c:	pop	{r4, r5, r6, pc}
   142a0:	mov	r0, r4
   142a4:	bl	110cc <fileno@plt>
   142a8:	mov	r1, #1
   142ac:	mov	r2, #0
   142b0:	mov	r3, #0
   142b4:	str	r1, [sp]
   142b8:	bl	10fc4 <lseek64@plt>
   142bc:	mvn	r2, #0
   142c0:	mvn	r3, #0
   142c4:	cmp	r1, r3
   142c8:	cmpeq	r0, r2
   142cc:	bne	14268 <close_stdout@@Base+0x2a3c>
   142d0:	mov	r0, r4
   142d4:	add	sp, sp, #8
   142d8:	pop	{r4, r5, r6, lr}
   142dc:	b	110e4 <fclose@plt>
   142e0:	push	{r4, lr}
   142e4:	subs	r4, r0, #0
   142e8:	sub	sp, sp, #8
   142ec:	beq	142fc <close_stdout@@Base+0x2ad0>
   142f0:	bl	1103c <__freading@plt>
   142f4:	cmp	r0, #0
   142f8:	bne	1430c <close_stdout@@Base+0x2ae0>
   142fc:	mov	r0, r4
   14300:	add	sp, sp, #8
   14304:	pop	{r4, lr}
   14308:	b	10f28 <fflush@plt>
   1430c:	ldr	r3, [r4]
   14310:	tst	r3, #256	; 0x100
   14314:	beq	142fc <close_stdout@@Base+0x2ad0>
   14318:	mov	r3, #1
   1431c:	mov	r0, r4
   14320:	str	r3, [sp]
   14324:	mov	r2, #0
   14328:	mov	r3, #0
   1432c:	bl	14340 <close_stdout@@Base+0x2b14>
   14330:	mov	r0, r4
   14334:	add	sp, sp, #8
   14338:	pop	{r4, lr}
   1433c:	b	10f28 <fflush@plt>
   14340:	push	{r4, r5, r6, r7, lr}
   14344:	sub	sp, sp, #20
   14348:	ldmib	r0, {r1, ip}
   1434c:	mov	r6, r0
   14350:	ldr	r4, [sp, #40]	; 0x28
   14354:	cmp	ip, r1
   14358:	beq	14370 <close_stdout@@Base+0x2b44>
   1435c:	str	r4, [sp, #40]	; 0x28
   14360:	mov	r0, r6
   14364:	add	sp, sp, #20
   14368:	pop	{r4, r5, r6, r7, lr}
   1436c:	b	110f0 <fseeko64@plt>
   14370:	ldr	ip, [r0, #20]
   14374:	ldr	r1, [r0, #16]
   14378:	cmp	ip, r1
   1437c:	bne	1435c <close_stdout@@Base+0x2b30>
   14380:	ldr	r7, [r0, #36]	; 0x24
   14384:	cmp	r7, #0
   14388:	bne	1435c <close_stdout@@Base+0x2b30>
   1438c:	str	r2, [sp, #12]
   14390:	mvn	r5, #0
   14394:	str	r3, [sp, #8]
   14398:	bl	110cc <fileno@plt>
   1439c:	str	r4, [sp]
   143a0:	mvn	r4, #0
   143a4:	ldr	r2, [sp, #12]
   143a8:	ldr	r3, [sp, #8]
   143ac:	bl	10fc4 <lseek64@plt>
   143b0:	mov	r2, r0
   143b4:	mov	r3, r1
   143b8:	cmp	r3, r5
   143bc:	cmpeq	r2, r4
   143c0:	beq	143e0 <close_stdout@@Base+0x2bb4>
   143c4:	ldr	r1, [r6]
   143c8:	mov	r0, r7
   143cc:	strd	r2, [r6, #80]	; 0x50
   143d0:	bic	r3, r1, #16
   143d4:	str	r3, [r6]
   143d8:	add	sp, sp, #20
   143dc:	pop	{r4, r5, r6, r7, pc}
   143e0:	mvn	r0, #0
   143e4:	b	143d8 <close_stdout@@Base+0x2bac>
   143e8:	subs	r2, r1, #1
   143ec:	bxeq	lr
   143f0:	bcc	145c8 <close_stdout@@Base+0x2d9c>
   143f4:	cmp	r0, r1
   143f8:	bls	145ac <close_stdout@@Base+0x2d80>
   143fc:	tst	r1, r2
   14400:	beq	145b8 <close_stdout@@Base+0x2d8c>
   14404:	clz	r3, r0
   14408:	clz	r2, r1
   1440c:	sub	r3, r2, r3
   14410:	rsbs	r3, r3, #31
   14414:	addne	r3, r3, r3, lsl #1
   14418:	mov	r2, #0
   1441c:	addne	pc, pc, r3, lsl #2
   14420:	nop	{0}
   14424:	cmp	r0, r1, lsl #31
   14428:	adc	r2, r2, r2
   1442c:	subcs	r0, r0, r1, lsl #31
   14430:	cmp	r0, r1, lsl #30
   14434:	adc	r2, r2, r2
   14438:	subcs	r0, r0, r1, lsl #30
   1443c:	cmp	r0, r1, lsl #29
   14440:	adc	r2, r2, r2
   14444:	subcs	r0, r0, r1, lsl #29
   14448:	cmp	r0, r1, lsl #28
   1444c:	adc	r2, r2, r2
   14450:	subcs	r0, r0, r1, lsl #28
   14454:	cmp	r0, r1, lsl #27
   14458:	adc	r2, r2, r2
   1445c:	subcs	r0, r0, r1, lsl #27
   14460:	cmp	r0, r1, lsl #26
   14464:	adc	r2, r2, r2
   14468:	subcs	r0, r0, r1, lsl #26
   1446c:	cmp	r0, r1, lsl #25
   14470:	adc	r2, r2, r2
   14474:	subcs	r0, r0, r1, lsl #25
   14478:	cmp	r0, r1, lsl #24
   1447c:	adc	r2, r2, r2
   14480:	subcs	r0, r0, r1, lsl #24
   14484:	cmp	r0, r1, lsl #23
   14488:	adc	r2, r2, r2
   1448c:	subcs	r0, r0, r1, lsl #23
   14490:	cmp	r0, r1, lsl #22
   14494:	adc	r2, r2, r2
   14498:	subcs	r0, r0, r1, lsl #22
   1449c:	cmp	r0, r1, lsl #21
   144a0:	adc	r2, r2, r2
   144a4:	subcs	r0, r0, r1, lsl #21
   144a8:	cmp	r0, r1, lsl #20
   144ac:	adc	r2, r2, r2
   144b0:	subcs	r0, r0, r1, lsl #20
   144b4:	cmp	r0, r1, lsl #19
   144b8:	adc	r2, r2, r2
   144bc:	subcs	r0, r0, r1, lsl #19
   144c0:	cmp	r0, r1, lsl #18
   144c4:	adc	r2, r2, r2
   144c8:	subcs	r0, r0, r1, lsl #18
   144cc:	cmp	r0, r1, lsl #17
   144d0:	adc	r2, r2, r2
   144d4:	subcs	r0, r0, r1, lsl #17
   144d8:	cmp	r0, r1, lsl #16
   144dc:	adc	r2, r2, r2
   144e0:	subcs	r0, r0, r1, lsl #16
   144e4:	cmp	r0, r1, lsl #15
   144e8:	adc	r2, r2, r2
   144ec:	subcs	r0, r0, r1, lsl #15
   144f0:	cmp	r0, r1, lsl #14
   144f4:	adc	r2, r2, r2
   144f8:	subcs	r0, r0, r1, lsl #14
   144fc:	cmp	r0, r1, lsl #13
   14500:	adc	r2, r2, r2
   14504:	subcs	r0, r0, r1, lsl #13
   14508:	cmp	r0, r1, lsl #12
   1450c:	adc	r2, r2, r2
   14510:	subcs	r0, r0, r1, lsl #12
   14514:	cmp	r0, r1, lsl #11
   14518:	adc	r2, r2, r2
   1451c:	subcs	r0, r0, r1, lsl #11
   14520:	cmp	r0, r1, lsl #10
   14524:	adc	r2, r2, r2
   14528:	subcs	r0, r0, r1, lsl #10
   1452c:	cmp	r0, r1, lsl #9
   14530:	adc	r2, r2, r2
   14534:	subcs	r0, r0, r1, lsl #9
   14538:	cmp	r0, r1, lsl #8
   1453c:	adc	r2, r2, r2
   14540:	subcs	r0, r0, r1, lsl #8
   14544:	cmp	r0, r1, lsl #7
   14548:	adc	r2, r2, r2
   1454c:	subcs	r0, r0, r1, lsl #7
   14550:	cmp	r0, r1, lsl #6
   14554:	adc	r2, r2, r2
   14558:	subcs	r0, r0, r1, lsl #6
   1455c:	cmp	r0, r1, lsl #5
   14560:	adc	r2, r2, r2
   14564:	subcs	r0, r0, r1, lsl #5
   14568:	cmp	r0, r1, lsl #4
   1456c:	adc	r2, r2, r2
   14570:	subcs	r0, r0, r1, lsl #4
   14574:	cmp	r0, r1, lsl #3
   14578:	adc	r2, r2, r2
   1457c:	subcs	r0, r0, r1, lsl #3
   14580:	cmp	r0, r1, lsl #2
   14584:	adc	r2, r2, r2
   14588:	subcs	r0, r0, r1, lsl #2
   1458c:	cmp	r0, r1, lsl #1
   14590:	adc	r2, r2, r2
   14594:	subcs	r0, r0, r1, lsl #1
   14598:	cmp	r0, r1
   1459c:	adc	r2, r2, r2
   145a0:	subcs	r0, r0, r1
   145a4:	mov	r0, r2
   145a8:	bx	lr
   145ac:	moveq	r0, #1
   145b0:	movne	r0, #0
   145b4:	bx	lr
   145b8:	clz	r2, r1
   145bc:	rsb	r2, r2, #31
   145c0:	lsr	r0, r0, r2
   145c4:	bx	lr
   145c8:	cmp	r0, #0
   145cc:	mvnne	r0, #0
   145d0:	b	145f4 <close_stdout@@Base+0x2dc8>
   145d4:	cmp	r1, #0
   145d8:	beq	145c8 <close_stdout@@Base+0x2d9c>
   145dc:	push	{r0, r1, lr}
   145e0:	bl	143e8 <close_stdout@@Base+0x2bbc>
   145e4:	pop	{r1, r2, lr}
   145e8:	mul	r3, r2, r0
   145ec:	sub	r1, r1, r3
   145f0:	bx	lr
   145f4:	push	{r1, lr}
   145f8:	mov	r0, #8
   145fc:	bl	10f10 <raise@plt>
   14600:	pop	{r1, pc}
   14604:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14608:	mov	r7, r0
   1460c:	ldr	r6, [pc, #76]	; 14660 <close_stdout@@Base+0x2e34>
   14610:	mov	r8, r1
   14614:	ldr	r5, [pc, #72]	; 14664 <close_stdout@@Base+0x2e38>
   14618:	mov	r9, r2
   1461c:	add	r6, pc, r6
   14620:	bl	10ecc <fdopen@plt-0x20>
   14624:	add	r5, pc, r5
   14628:	rsb	r6, r5, r6
   1462c:	asrs	r6, r6, #2
   14630:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14634:	sub	r5, r5, #4
   14638:	mov	r4, #0
   1463c:	add	r4, r4, #1
   14640:	ldr	r3, [r5, #4]!
   14644:	mov	r0, r7
   14648:	mov	r1, r8
   1464c:	mov	r2, r9
   14650:	blx	r3
   14654:	cmp	r4, r6
   14658:	bne	1463c <close_stdout@@Base+0x2e10>
   1465c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14660:	andeq	r1, r1, r8, lsl #17
   14664:	andeq	r1, r1, ip, ror r8
   14668:	bx	lr
   1466c:	ldr	r3, [pc, #28]	; 14690 <close_stdout@@Base+0x2e64>
   14670:	mov	r1, #0
   14674:	ldr	r2, [pc, #24]	; 14694 <close_stdout@@Base+0x2e68>
   14678:	add	r3, pc, r3
   1467c:	ldr	r3, [r3, r2]
   14680:	cmp	r3, #0
   14684:	ldrne	r2, [r3]
   14688:	moveq	r2, r3
   1468c:	b	1109c <__cxa_atexit@plt>
   14690:	andeq	r1, r1, r0, lsl #19
   14694:	andeq	r0, r0, r0, lsl #2

Disassembly of section .fini:

00014698 <.fini>:
   14698:	push	{r3, lr}
   1469c:	pop	{r3, pc}
