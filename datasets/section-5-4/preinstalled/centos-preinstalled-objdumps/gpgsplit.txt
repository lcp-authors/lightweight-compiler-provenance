
centos-preinstalled/gpgsplit:     file format elf32-littlearm


Disassembly of section .init:

000111d8 <_init@@Base>:
   111d8:	push	{r3, lr}
   111dc:	bl	117f0 <__assert_fail@plt+0x2a4>
   111e0:	pop	{r3, pc}

Disassembly of section .plt:

000111e4 <gcry_xmalloc@plt-0x14>:
   111e4:	push	{lr}		; (str lr, [sp, #-4]!)
   111e8:	ldr	lr, [pc, #4]	; 111f4 <_init@@Base+0x1c>
   111ec:	add	lr, pc, lr
   111f0:	ldr	pc, [lr, #8]!
   111f4:	andeq	r7, r1, ip, lsl #28

000111f8 <gcry_xmalloc@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #94208	; 0x17000
   11200:	ldr	pc, [ip, #3596]!	; 0xe0c

00011204 <strstr@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #94208	; 0x17000
   1120c:	ldr	pc, [ip, #3588]!	; 0xe04

00011210 <gcry_malloc@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #94208	; 0x17000
   11218:	ldr	pc, [ip, #3580]!	; 0xdfc

0001121c <getpwnam@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #94208	; 0x17000
   11224:	ldr	pc, [ip, #3572]!	; 0xdf4

00011228 <iconv_close@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #94208	; 0x17000
   11230:	ldr	pc, [ip, #3564]!	; 0xdec

00011234 <iconv@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #94208	; 0x17000
   1123c:	ldr	pc, [ip, #3556]!	; 0xde4

00011240 <strcmp@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #94208	; 0x17000
   11248:	ldr	pc, [ip, #3548]!	; 0xddc

0001124c <strtol@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #94208	; 0x17000
   11254:	ldr	pc, [ip, #3540]!	; 0xdd4

00011258 <getpwuid@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #94208	; 0x17000
   11260:	ldr	pc, [ip, #3532]!	; 0xdcc

00011264 <inflate@plt>:
   11264:	add	ip, pc, #0, 12
   11268:	add	ip, ip, #94208	; 0x17000
   1126c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011270 <fflush@plt>:
   11270:	add	ip, pc, #0, 12
   11274:	add	ip, ip, #94208	; 0x17000
   11278:	ldr	pc, [ip, #3516]!	; 0xdbc

0001127c <getuid@plt>:
   1127c:	add	ip, pc, #0, 12
   11280:	add	ip, ip, #94208	; 0x17000
   11284:	ldr	pc, [ip, #3508]!	; 0xdb4

00011288 <ferror@plt>:
   11288:	add	ip, pc, #0, 12
   1128c:	add	ip, ip, #94208	; 0x17000
   11290:	ldr	pc, [ip, #3500]!	; 0xdac

00011294 <memcpy@plt>:
   11294:	add	ip, pc, #0, 12
   11298:	add	ip, ip, #94208	; 0x17000
   1129c:	ldr	pc, [ip, #3492]!	; 0xda4

000112a0 <time@plt>:
   112a0:	add	ip, pc, #0, 12
   112a4:	add	ip, ip, #94208	; 0x17000
   112a8:	ldr	pc, [ip, #3484]!	; 0xd9c

000112ac <gcry_free@plt>:
   112ac:	add	ip, pc, #0, 12
   112b0:	add	ip, ip, #94208	; 0x17000
   112b4:	ldr	pc, [ip, #3476]!	; 0xd94

000112b8 <_IO_getc@plt>:
   112b8:	add	ip, pc, #0, 12
   112bc:	add	ip, ip, #94208	; 0x17000
   112c0:	ldr	pc, [ip, #3468]!	; 0xd8c

000112c4 <stpcpy@plt>:
   112c4:	add	ip, pc, #0, 12
   112c8:	add	ip, ip, #94208	; 0x17000
   112cc:	ldr	pc, [ip, #3460]!	; 0xd84

000112d0 <dcgettext@plt>:
   112d0:	add	ip, pc, #0, 12
   112d4:	add	ip, ip, #94208	; 0x17000
   112d8:	ldr	pc, [ip, #3452]!	; 0xd7c

000112dc <__stack_chk_fail@plt>:
   112dc:	add	ip, pc, #0, 12
   112e0:	add	ip, ip, #94208	; 0x17000
   112e4:	ldr	pc, [ip, #3444]!	; 0xd74

000112e8 <BZ2_bzDecompressInit@plt>:
   112e8:	add	ip, pc, #0, 12
   112ec:	add	ip, ip, #94208	; 0x17000
   112f0:	ldr	pc, [ip, #3436]!	; 0xd6c

000112f4 <BZ2_bzDecompressEnd@plt>:
   112f4:	add	ip, pc, #0, 12
   112f8:	add	ip, ip, #94208	; 0x17000
   112fc:	ldr	pc, [ip, #3428]!	; 0xd64

00011300 <_IO_putc@plt>:
   11300:	add	ip, pc, #0, 12
   11304:	add	ip, ip, #94208	; 0x17000
   11308:	ldr	pc, [ip, #3420]!	; 0xd5c

0001130c <fwrite@plt>:
   1130c:	add	ip, pc, #0, 12
   11310:	add	ip, ip, #94208	; 0x17000
   11314:	ldr	pc, [ip, #3412]!	; 0xd54

00011318 <strcpy@plt>:
   11318:	add	ip, pc, #0, 12
   1131c:	add	ip, ip, #94208	; 0x17000
   11320:	ldr	pc, [ip, #3404]!	; 0xd4c

00011324 <open64@plt>:
   11324:	add	ip, pc, #0, 12
   11328:	add	ip, ip, #94208	; 0x17000
   1132c:	ldr	pc, [ip, #3396]!	; 0xd44

00011330 <getenv@plt>:
   11330:	add	ip, pc, #0, 12
   11334:	add	ip, ip, #94208	; 0x17000
   11338:	ldr	pc, [ip, #3388]!	; 0xd3c

0001133c <gcry_strdup@plt>:
   1133c:	add	ip, pc, #0, 12
   11340:	add	ip, ip, #94208	; 0x17000
   11344:	ldr	pc, [ip, #3380]!	; 0xd34

00011348 <puts@plt>:
   11348:	add	ip, pc, #0, 12
   1134c:	add	ip, ip, #94208	; 0x17000
   11350:	ldr	pc, [ip, #3372]!	; 0xd2c

00011354 <iconv_open@plt>:
   11354:	add	ip, pc, #0, 12
   11358:	add	ip, ip, #94208	; 0x17000
   1135c:	ldr	pc, [ip, #3364]!	; 0xd24

00011360 <__libc_start_main@plt>:
   11360:	add	ip, pc, #0, 12
   11364:	add	ip, ip, #94208	; 0x17000
   11368:	ldr	pc, [ip, #3356]!	; 0xd1c

0001136c <strerror@plt>:
   1136c:	add	ip, pc, #0, 12
   11370:	add	ip, ip, #94208	; 0x17000
   11374:	ldr	pc, [ip, #3348]!	; 0xd14

00011378 <__vfprintf_chk@plt>:
   11378:	add	ip, pc, #0, 12
   1137c:	add	ip, ip, #94208	; 0x17000
   11380:	ldr	pc, [ip, #3340]!	; 0xd0c

00011384 <localtime@plt>:
   11384:	add	ip, pc, #0, 12
   11388:	add	ip, ip, #94208	; 0x17000
   1138c:	ldr	pc, [ip, #3332]!	; 0xd04

00011390 <__ctype_tolower_loc@plt>:
   11390:	add	ip, pc, #0, 12
   11394:	add	ip, ip, #94208	; 0x17000
   11398:	ldr	pc, [ip, #3324]!	; 0xcfc

0001139c <__ctype_toupper_loc@plt>:
   1139c:	add	ip, pc, #0, 12
   113a0:	add	ip, ip, #94208	; 0x17000
   113a4:	ldr	pc, [ip, #3316]!	; 0xcf4

000113a8 <__gmon_start__@plt>:
   113a8:	add	ip, pc, #0, 12
   113ac:	add	ip, ip, #94208	; 0x17000
   113b0:	ldr	pc, [ip, #3308]!	; 0xcec

000113b4 <__ctype_b_loc@plt>:
   113b4:	add	ip, pc, #0, 12
   113b8:	add	ip, ip, #94208	; 0x17000
   113bc:	ldr	pc, [ip, #3300]!	; 0xce4

000113c0 <getpid@plt>:
   113c0:	add	ip, pc, #0, 12
   113c4:	add	ip, ip, #94208	; 0x17000
   113c8:	ldr	pc, [ip, #3292]!	; 0xcdc

000113cc <exit@plt>:
   113cc:	add	ip, pc, #0, 12
   113d0:	add	ip, ip, #94208	; 0x17000
   113d4:	ldr	pc, [ip, #3284]!	; 0xcd4

000113d8 <feof@plt>:
   113d8:	add	ip, pc, #0, 12
   113dc:	add	ip, ip, #94208	; 0x17000
   113e0:	ldr	pc, [ip, #3276]!	; 0xccc

000113e4 <inflateEnd@plt>:
   113e4:	add	ip, pc, #0, 12
   113e8:	add	ip, ip, #94208	; 0x17000
   113ec:	ldr	pc, [ip, #3268]!	; 0xcc4

000113f0 <strtoul@plt>:
   113f0:	add	ip, pc, #0, 12
   113f4:	add	ip, ip, #94208	; 0x17000
   113f8:	ldr	pc, [ip, #3260]!	; 0xcbc

000113fc <strlen@plt>:
   113fc:	add	ip, pc, #0, 12
   11400:	add	ip, ip, #94208	; 0x17000
   11404:	ldr	pc, [ip, #3252]!	; 0xcb4

00011408 <strchr@plt>:
   11408:	add	ip, pc, #0, 12
   1140c:	add	ip, ip, #94208	; 0x17000
   11410:	ldr	pc, [ip, #3244]!	; 0xcac

00011414 <__errno_location@plt>:
   11414:	add	ip, pc, #0, 12
   11418:	add	ip, ip, #94208	; 0x17000
   1141c:	ldr	pc, [ip, #3236]!	; 0xca4

00011420 <__sprintf_chk@plt>:
   11420:	add	ip, pc, #0, 12
   11424:	add	ip, ip, #94208	; 0x17000
   11428:	ldr	pc, [ip, #3228]!	; 0xc9c

0001142c <setvbuf@plt>:
   1142c:	add	ip, pc, #0, 12
   11430:	add	ip, ip, #94208	; 0x17000
   11434:	ldr	pc, [ip, #3220]!	; 0xc94

00011438 <memset@plt>:
   11438:	add	ip, pc, #0, 12
   1143c:	add	ip, ip, #94208	; 0x17000
   11440:	ldr	pc, [ip, #3212]!	; 0xc8c

00011444 <strncpy@plt>:
   11444:	add	ip, pc, #0, 12
   11448:	add	ip, ip, #94208	; 0x17000
   1144c:	ldr	pc, [ip, #3204]!	; 0xc84

00011450 <gcry_xstrdup@plt>:
   11450:	add	ip, pc, #0, 12
   11454:	add	ip, ip, #94208	; 0x17000
   11458:	ldr	pc, [ip, #3196]!	; 0xc7c

0001145c <__printf_chk@plt>:
   1145c:	add	ip, pc, #0, 12
   11460:	add	ip, ip, #94208	; 0x17000
   11464:	ldr	pc, [ip, #3188]!	; 0xc74

00011468 <write@plt>:
   11468:	add	ip, pc, #0, 12
   1146c:	add	ip, ip, #94208	; 0x17000
   11470:	ldr	pc, [ip, #3180]!	; 0xc6c

00011474 <fileno@plt>:
   11474:	add	ip, pc, #0, 12
   11478:	add	ip, ip, #94208	; 0x17000
   1147c:	ldr	pc, [ip, #3172]!	; 0xc64

00011480 <fopencookie@plt>:
   11480:	add	ip, pc, #0, 12
   11484:	add	ip, ip, #94208	; 0x17000
   11488:	ldr	pc, [ip, #3164]!	; 0xc5c

0001148c <BZ2_bzDecompress@plt>:
   1148c:	add	ip, pc, #0, 12
   11490:	add	ip, ip, #94208	; 0x17000
   11494:	ldr	pc, [ip, #3156]!	; 0xc54

00011498 <__fprintf_chk@plt>:
   11498:	add	ip, pc, #0, 12
   1149c:	add	ip, ip, #94208	; 0x17000
   114a0:	ldr	pc, [ip, #3148]!	; 0xc4c

000114a4 <fclose@plt>:
   114a4:	add	ip, pc, #0, 12
   114a8:	add	ip, ip, #94208	; 0x17000
   114ac:	ldr	pc, [ip, #3140]!	; 0xc44

000114b0 <gcry_realloc@plt>:
   114b0:	add	ip, pc, #0, 12
   114b4:	add	ip, ip, #94208	; 0x17000
   114b8:	ldr	pc, [ip, #3132]!	; 0xc3c

000114bc <inflateInit_@plt>:
   114bc:	add	ip, pc, #0, 12
   114c0:	add	ip, ip, #94208	; 0x17000
   114c4:	ldr	pc, [ip, #3124]!	; 0xc34

000114c8 <strrchr@plt>:
   114c8:	add	ip, pc, #0, 12
   114cc:	add	ip, ip, #94208	; 0x17000
   114d0:	ldr	pc, [ip, #3116]!	; 0xc2c

000114d4 <nl_langinfo@plt>:
   114d4:	add	ip, pc, #0, 12
   114d8:	add	ip, ip, #94208	; 0x17000
   114dc:	ldr	pc, [ip, #3108]!	; 0xc24

000114e0 <inflateInit2_@plt>:
   114e0:	add	ip, pc, #0, 12
   114e4:	add	ip, ip, #94208	; 0x17000
   114e8:	ldr	pc, [ip, #3100]!	; 0xc1c

000114ec <fopen64@plt>:
   114ec:	add	ip, pc, #0, 12
   114f0:	add	ip, ip, #94208	; 0x17000
   114f4:	ldr	pc, [ip, #3092]!	; 0xc14

000114f8 <socket@plt>:
   114f8:	add	ip, pc, #0, 12
   114fc:	add	ip, ip, #94208	; 0x17000
   11500:	ldr	pc, [ip, #3084]!	; 0xc0c

00011504 <isatty@plt>:
   11504:	add	ip, pc, #0, 12
   11508:	add	ip, ip, #94208	; 0x17000
   1150c:	ldr	pc, [ip, #3076]!	; 0xc04

00011510 <fputs@plt>:
   11510:	add	ip, pc, #0, 12
   11514:	add	ip, ip, #94208	; 0x17000
   11518:	ldr	pc, [ip, #3068]!	; 0xbfc

0001151c <strncmp@plt>:
   1151c:	add	ip, pc, #0, 12
   11520:	add	ip, ip, #94208	; 0x17000
   11524:	ldr	pc, [ip, #3060]!	; 0xbf4

00011528 <abort@plt>:
   11528:	add	ip, pc, #0, 12
   1152c:	add	ip, ip, #94208	; 0x17000
   11530:	ldr	pc, [ip, #3052]!	; 0xbec

00011534 <close@plt>:
   11534:	add	ip, pc, #0, 12
   11538:	add	ip, ip, #94208	; 0x17000
   1153c:	ldr	pc, [ip, #3044]!	; 0xbe4

00011540 <connect@plt>:
   11540:	add	ip, pc, #0, 12
   11544:	add	ip, ip, #94208	; 0x17000
   11548:	ldr	pc, [ip, #3036]!	; 0xbdc

0001154c <__assert_fail@plt>:
   1154c:	add	ip, pc, #0, 12
   11550:	add	ip, ip, #94208	; 0x17000
   11554:	ldr	pc, [ip, #3028]!	; 0xbd4

Disassembly of section .text:

00011558 <.text>:
   11558:	push	{r3, r4, r5, lr}
   1155c:	movw	r5, #37316	; 0x91c4
   11560:	movt	r5, #2
   11564:	mov	r0, #11
   11568:	bl	12e70 <__assert_fail@plt+0x1924>
   1156c:	ldr	r1, [r5]
   11570:	bl	11510 <fputs@plt>
   11574:	mov	r0, #12
   11578:	bl	12e70 <__assert_fail@plt+0x1924>
   1157c:	subs	r2, r0, #0
   11580:	beq	11594 <__assert_fail@plt+0x48>
   11584:	movw	r1, #33144	; 0x8178
   11588:	mov	r0, #1
   1158c:	movt	r1, #1
   11590:	bl	1145c <__printf_chk@plt>
   11594:	mov	r0, #13
   11598:	mov	r4, #20
   1159c:	bl	12e70 <__assert_fail@plt+0x1924>
   115a0:	movw	r1, #31088	; 0x7970
   115a4:	movt	r1, #1
   115a8:	mov	r2, r0
   115ac:	mov	r0, #1
   115b0:	bl	1145c <__printf_chk@plt>
   115b4:	mov	r0, r4
   115b8:	add	r4, r4, #1
   115bc:	bl	12e70 <__assert_fail@plt+0x1924>
   115c0:	cmp	r0, #0
   115c4:	beq	115cc <__assert_fail@plt+0x80>
   115c8:	bl	11348 <puts@plt>
   115cc:	cmp	r4, #30
   115d0:	bne	115b4 <__assert_fail@plt+0x68>
   115d4:	mov	r0, #14
   115d8:	bl	12e70 <__assert_fail@plt+0x1924>
   115dc:	cmp	r0, #0
   115e0:	beq	115e8 <__assert_fail@plt+0x9c>
   115e4:	bl	11348 <puts@plt>
   115e8:	mov	r0, #10
   115ec:	bl	12e70 <__assert_fail@plt+0x1924>
   115f0:	cmp	r0, #0
   115f4:	beq	115fc <__assert_fail@plt+0xb0>
   115f8:	bl	11348 <puts@plt>
   115fc:	mov	r0, #15
   11600:	bl	12e70 <__assert_fail@plt+0x1924>
   11604:	cmp	r0, #0
   11608:	beq	11614 <__assert_fail@plt+0xc8>
   1160c:	ldr	r1, [r5]
   11610:	bl	11510 <fputs@plt>
   11614:	mov	r0, #18
   11618:	bl	12e70 <__assert_fail@plt+0x1924>
   1161c:	cmp	r0, #0
   11620:	beq	1162c <__assert_fail@plt+0xe0>
   11624:	ldr	r1, [r5]
   11628:	bl	11510 <fputs@plt>
   1162c:	mov	r0, r4
   11630:	add	r4, r4, #1
   11634:	bl	12e70 <__assert_fail@plt+0x1924>
   11638:	cmp	r0, #0
   1163c:	beq	11648 <__assert_fail@plt+0xfc>
   11640:	ldr	r1, [r5]
   11644:	bl	11510 <fputs@plt>
   11648:	cmp	r4, #40	; 0x28
   1164c:	bne	1162c <__assert_fail@plt+0xe0>
   11650:	ldr	r0, [r5]
   11654:	pop	{r3, r4, r5, lr}
   11658:	b	11270 <fflush@plt>
   1165c:	movw	r3, #37296	; 0x91b0
   11660:	movt	r3, #2
   11664:	push	{r4, r5, r6, r7, r8, r9, lr}
   11668:	sub	sp, sp, #84	; 0x54
   1166c:	ldr	r3, [r3]
   11670:	movw	r5, #37324	; 0x91cc
   11674:	ldr	r4, [pc, #308]	; 117b0 <__assert_fail@plt+0x264>
   11678:	movt	r5, #2
   1167c:	str	r0, [sp, #12]
   11680:	movw	r0, #31484	; 0x7afc
   11684:	str	r1, [sp, #8]
   11688:	movt	r0, #1
   1168c:	mov	r1, #1
   11690:	sub	r9, r4, #4
   11694:	str	r3, [sp, #76]	; 0x4c
   11698:	mov	r8, #2
   1169c:	bl	150b8 <__assert_fail@plt+0x3b6c>
   116a0:	movw	r7, #501	; 0x1f5
   116a4:	movw	r0, #6376	; 0x18e8
   116a8:	movt	r0, #1
   116ac:	bl	14594 <__assert_fail@plt+0x3048>
   116b0:	mov	r6, #1
   116b4:	add	r2, sp, #12
   116b8:	add	r3, sp, #8
   116bc:	str	r6, [sp, #28]
   116c0:	str	r2, [sp, #20]
   116c4:	str	r3, [sp, #24]
   116c8:	mov	r0, #0
   116cc:	str	r4, [sp]
   116d0:	mov	r1, r0
   116d4:	mov	r2, r0
   116d8:	add	r3, sp, #20
   116dc:	bl	13bc8 <__assert_fail@plt+0x267c>
   116e0:	cmp	r0, #0
   116e4:	beq	11744 <__assert_fail@plt+0x1f8>
   116e8:	ldr	r3, [sp, #36]	; 0x24
   116ec:	cmp	r3, #500	; 0x1f4
   116f0:	streq	r6, [r5, #8]
   116f4:	beq	116c8 <__assert_fail@plt+0x17c>
   116f8:	bgt	11718 <__assert_fail@plt+0x1cc>
   116fc:	cmp	r3, #112	; 0x70
   11700:	beq	11738 <__assert_fail@plt+0x1ec>
   11704:	cmp	r3, #118	; 0x76
   11708:	streq	r6, [r5, #16]
   1170c:	beq	116c8 <__assert_fail@plt+0x17c>
   11710:	str	r8, [sp, #32]
   11714:	b	116c8 <__assert_fail@plt+0x17c>
   11718:	cmp	r3, r7
   1171c:	streq	r6, [r5, #20]
   11720:	beq	116c8 <__assert_fail@plt+0x17c>
   11724:	movw	r2, #502	; 0x1f6
   11728:	cmp	r3, r2
   1172c:	streq	r6, [r5, #12]
   11730:	beq	116c8 <__assert_fail@plt+0x17c>
   11734:	b	11710 <__assert_fail@plt+0x1c4>
   11738:	ldr	r3, [sp, #44]	; 0x2c
   1173c:	str	r3, [r9]
   11740:	b	116c8 <__assert_fail@plt+0x17c>
   11744:	bl	15050 <__assert_fail@plt+0x3b04>
   11748:	cmp	r0, #0
   1174c:	bne	117a0 <__assert_fail@plt+0x254>
   11750:	ldr	r3, [sp, #12]
   11754:	cmp	r3, #0
   11758:	ldrne	r3, [sp, #8]
   1175c:	beq	117a8 <__assert_fail@plt+0x25c>
   11760:	ldr	r0, [r3]
   11764:	bl	119d8 <__assert_fail@plt+0x48c>
   11768:	ldr	r3, [sp, #12]
   1176c:	ldr	r2, [sp, #8]
   11770:	sub	r3, r3, #1
   11774:	str	r3, [sp, #12]
   11778:	cmp	r3, #0
   1177c:	add	r3, r2, #4
   11780:	str	r3, [sp, #8]
   11784:	bne	11760 <__assert_fail@plt+0x214>
   11788:	mov	r0, #0
   1178c:	bl	15050 <__assert_fail@plt+0x3b04>
   11790:	cmp	r0, #0
   11794:	movne	r0, #2
   11798:	moveq	r0, #0
   1179c:	bl	113cc <exit@plt>
   117a0:	mov	r0, #2
   117a4:	bl	113cc <exit@plt>
   117a8:	bl	119d8 <__assert_fail@plt+0x48c>
   117ac:	b	11788 <__assert_fail@plt+0x23c>
   117b0:	andeq	r9, r2, r8, lsr r1
   117b4:	mov	fp, #0
   117b8:	mov	lr, #0
   117bc:	pop	{r1}		; (ldr r1, [sp], #4)
   117c0:	mov	r2, sp
   117c4:	push	{r2}		; (str r2, [sp, #-4]!)
   117c8:	push	{r0}		; (str r0, [sp, #-4]!)
   117cc:	ldr	ip, [pc, #16]	; 117e4 <__assert_fail@plt+0x298>
   117d0:	push	{ip}		; (str ip, [sp, #-4]!)
   117d4:	ldr	r0, [pc, #12]	; 117e8 <__assert_fail@plt+0x29c>
   117d8:	ldr	r3, [pc, #12]	; 117ec <__assert_fail@plt+0x2a0>
   117dc:	bl	11360 <__libc_start_main@plt>
   117e0:	bl	11528 <abort@plt>
   117e4:	andeq	r7, r1, r8, lsr #14
   117e8:	andeq	r1, r1, ip, asr r6
   117ec:	andeq	r7, r1, r4, asr #13
   117f0:	ldr	r3, [pc, #20]	; 1180c <__assert_fail@plt+0x2c0>
   117f4:	ldr	r2, [pc, #20]	; 11810 <__assert_fail@plt+0x2c4>
   117f8:	add	r3, pc, r3
   117fc:	ldr	r2, [r3, r2]
   11800:	cmp	r2, #0
   11804:	bxeq	lr
   11808:	b	113a8 <__gmon_start__@plt>
   1180c:	andeq	r7, r1, r0, lsl #16
   11810:	andeq	r0, r0, ip, lsr #2
   11814:	push	{r3, lr}
   11818:	movw	r0, #37296	; 0x91b0
   1181c:	ldr	r3, [pc, #36]	; 11848 <__assert_fail@plt+0x2fc>
   11820:	movt	r0, #2
   11824:	rsb	r3, r0, r3
   11828:	cmp	r3, #6
   1182c:	popls	{r3, pc}
   11830:	movw	r3, #0
   11834:	movt	r3, #0
   11838:	cmp	r3, #0
   1183c:	popeq	{r3, pc}
   11840:	blx	r3
   11844:	pop	{r3, pc}
   11848:			; <UNDEFINED> instruction: 0x000291b3
   1184c:	push	{r3, lr}
   11850:	movw	r0, #37296	; 0x91b0
   11854:	movw	r3, #37296	; 0x91b0
   11858:	movt	r0, #2
   1185c:	movt	r3, #2
   11860:	rsb	r3, r0, r3
   11864:	asr	r3, r3, #2
   11868:	add	r3, r3, r3, lsr #31
   1186c:	asrs	r1, r3, #1
   11870:	popeq	{r3, pc}
   11874:	movw	r2, #0
   11878:	movt	r2, #0
   1187c:	cmp	r2, #0
   11880:	popeq	{r3, pc}
   11884:	blx	r2
   11888:	pop	{r3, pc}
   1188c:	push	{r4, lr}
   11890:	movw	r4, #37320	; 0x91c8
   11894:	movt	r4, #2
   11898:	ldrb	r3, [r4]
   1189c:	cmp	r3, #0
   118a0:	popne	{r4, pc}
   118a4:	bl	11814 <__assert_fail@plt+0x2c8>
   118a8:	mov	r3, #1
   118ac:	strb	r3, [r4]
   118b0:	pop	{r4, pc}
   118b4:	movw	r0, #36572	; 0x8edc
   118b8:	movt	r0, #2
   118bc:	push	{r3, lr}
   118c0:	ldr	r3, [r0]
   118c4:	cmp	r3, #0
   118c8:	beq	118e0 <__assert_fail@plt+0x394>
   118cc:	movw	r3, #0
   118d0:	movt	r3, #0
   118d4:	cmp	r3, #0
   118d8:	beq	118e0 <__assert_fail@plt+0x394>
   118dc:	blx	r3
   118e0:	pop	{r3, lr}
   118e4:	b	1184c <__assert_fail@plt+0x300>
   118e8:	sub	r0, r0, #1
   118ec:	cmp	r0, #40	; 0x28
   118f0:	movwls	r3, #30524	; 0x773c
   118f4:	movtls	r3, #1
   118f8:	ldrls	r0, [r3, r0, lsl #2]
   118fc:	movhi	r0, #0
   11900:	bx	lr
   11904:	push	{r3, r4, r5, lr}
   11908:	mov	r4, r1
   1190c:	mov	r5, r0
   11910:	bl	112b8 <_IO_getc@plt>
   11914:	cmn	r0, #1
   11918:	beq	1194c <__assert_fail@plt+0x400>
   1191c:	lsl	r3, r0, #8
   11920:	mov	r0, r5
   11924:	str	r3, [r4]
   11928:	bl	112b8 <_IO_getc@plt>
   1192c:	cmn	r0, #1
   11930:	mov	r3, r0
   11934:	beq	1194c <__assert_fail@plt+0x400>
   11938:	ldr	r2, [r4]
   1193c:	mov	r0, #0
   11940:	orr	r3, r2, r3
   11944:	str	r3, [r4]
   11948:	pop	{r3, r4, r5, pc}
   1194c:	mvn	r0, #0
   11950:	pop	{r3, r4, r5, pc}
   11954:	push	{r4, r5, r6, lr}
   11958:	movw	r4, #37296	; 0x91b0
   1195c:	movt	r4, #2
   11960:	sub	sp, sp, #8
   11964:	mov	r5, r1
   11968:	mov	r6, r0
   1196c:	ldr	r3, [r4]
   11970:	mov	r1, sp
   11974:	str	r3, [sp, #4]
   11978:	bl	11904 <__assert_fail@plt+0x3b8>
   1197c:	cmp	r0, #0
   11980:	bne	119cc <__assert_fail@plt+0x480>
   11984:	ldr	r3, [sp]
   11988:	mov	r0, r6
   1198c:	mov	r1, sp
   11990:	lsl	r3, r3, #16
   11994:	str	r3, [r5]
   11998:	bl	11904 <__assert_fail@plt+0x3b8>
   1199c:	cmp	r0, #0
   119a0:	bne	119cc <__assert_fail@plt+0x480>
   119a4:	ldr	r2, [r5]
   119a8:	ldr	r3, [sp]
   119ac:	orr	r3, r2, r3
   119b0:	str	r3, [r5]
   119b4:	ldr	r2, [sp, #4]
   119b8:	ldr	r3, [r4]
   119bc:	cmp	r2, r3
   119c0:	bne	119d4 <__assert_fail@plt+0x488>
   119c4:	add	sp, sp, #8
   119c8:	pop	{r4, r5, r6, pc}
   119cc:	mvn	r0, #0
   119d0:	b	119b4 <__assert_fail@plt+0x468>
   119d4:	bl	112dc <__stack_chk_fail@plt>
   119d8:	movw	ip, #37296	; 0x91b0
   119dc:	movt	ip, #2
   119e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119e4:	cmp	r0, #0
   119e8:	ldr	r3, [ip]
   119ec:	sub	sp, sp, #148	; 0x94
   119f0:	str	ip, [sp, #32]
   119f4:	str	r0, [sp, #36]	; 0x24
   119f8:	str	r3, [sp, #140]	; 0x8c
   119fc:	beq	11a18 <__assert_fail@plt+0x4cc>
   11a00:	ldrb	r3, [r0]
   11a04:	cmp	r3, #45	; 0x2d
   11a08:	bne	11cec <__assert_fail@plt+0x7a0>
   11a0c:	ldrb	r3, [r0, #1]
   11a10:	cmp	r3, #0
   11a14:	bne	11cec <__assert_fail@plt+0x7a0>
   11a18:	movw	r3, #37312	; 0x91c0
   11a1c:	movt	r3, #2
   11a20:	movw	ip, #30700	; 0x77ec
   11a24:	movt	ip, #1
   11a28:	ldr	sl, [r3]
   11a2c:	str	ip, [sp, #36]	; 0x24
   11a30:	movw	fp, #37324	; 0x91cc
   11a34:	movt	fp, #2
   11a38:	movw	ip, #37172	; 0x9134
   11a3c:	movt	ip, #2
   11a40:	str	ip, [sp, #44]	; 0x2c
   11a44:	mov	r0, sl
   11a48:	mov	r5, #0
   11a4c:	str	r5, [sp, #56]	; 0x38
   11a50:	bl	112b8 <_IO_getc@plt>
   11a54:	cmn	r0, #1
   11a58:	mov	r1, r0
   11a5c:	beq	11c9c <__assert_fail@plt+0x750>
   11a60:	tst	r0, #128	; 0x80
   11a64:	strb	r0, [sp, #120]	; 0x78
   11a68:	beq	11c90 <__assert_fail@plt+0x744>
   11a6c:	ands	r0, r0, #64	; 0x40
   11a70:	bne	11c10 <__assert_fail@plt+0x6c4>
   11a74:	and	r5, r1, #3
   11a78:	ubfx	r6, r1, #2, #4
   11a7c:	cmp	r5, #3
   11a80:	beq	11cd4 <__assert_fail@plt+0x788>
   11a84:	mov	r4, #1
   11a88:	ldr	r3, [sp, #56]	; 0x38
   11a8c:	lsl	r5, r4, r5
   11a90:	add	r7, sp, #120	; 0x78
   11a94:	mov	r0, sl
   11a98:	lsl	r3, r3, #8
   11a9c:	str	r3, [sp, #56]	; 0x38
   11aa0:	bl	112b8 <_IO_getc@plt>
   11aa4:	cmn	r0, #1
   11aa8:	beq	11ed4 <__assert_fail@plt+0x988>
   11aac:	ldr	r3, [sp, #56]	; 0x38
   11ab0:	subs	r5, r5, #1
   11ab4:	add	r4, r4, #1
   11ab8:	strb	r0, [r7, #1]!
   11abc:	orr	r3, r0, r3
   11ac0:	str	r3, [sp, #56]	; 0x38
   11ac4:	bne	11a94 <__assert_fail@plt+0x548>
   11ac8:	mov	r0, r3
   11acc:	ldr	r3, [fp]
   11ad0:	movw	ip, #37324	; 0x91cc
   11ad4:	str	r0, [sp, #60]	; 0x3c
   11ad8:	movt	ip, #2
   11adc:	cmp	r3, #0
   11ae0:	str	ip, [sp, #20]
   11ae4:	movwne	r7, #37172	; 0x9134
   11ae8:	movne	r0, r3
   11aec:	movtne	r7, #2
   11af0:	beq	11d60 <__assert_fail@plt+0x814>
   11af4:	ldr	r3, [fp, #4]
   11af8:	sub	r2, r6, #1
   11afc:	ldr	r1, [r7]
   11b00:	add	r3, r3, #1
   11b04:	str	r3, [fp, #4]
   11b08:	cmp	r2, #62	; 0x3e
   11b0c:	ldrls	pc, [pc, r2, lsl #2]
   11b10:	b	12000 <__assert_fail@plt+0xab4>
   11b14:	andeq	r1, r1, r8, lsr pc
   11b18:	andeq	r1, r1, ip, lsl #27
   11b1c:	andeq	r1, r1, r8, lsl #30
   11b20:	andeq	r1, r1, r4, lsl pc
   11b24:	andeq	r1, r1, r0, lsr #30
   11b28:	andeq	r1, r1, ip, lsr #30
   11b2c:	andeq	r1, r1, ip, lsl #31
   11b30:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   11b34:			; <UNDEFINED> instruction: 0x00011fb8
   11b38:	andeq	r1, r1, r4, asr #31
   11b3c:	ldrdeq	r1, [r1], -r0
   11b40:	ldrdeq	r1, [r1], -ip
   11b44:	andeq	r1, r1, r8, ror #31
   11b48:	strdeq	r1, [r1], -r4
   11b4c:	andeq	r2, r1, r0
   11b50:	andeq	r1, r1, ip, asr pc
   11b54:	andeq	r1, r1, r8, ror #30
   11b58:	andeq	r1, r1, r4, ror pc
   11b5c:	andeq	r1, r1, r0, lsl #31
   11b60:	andeq	r2, r1, r0
   11b64:	andeq	r2, r1, r0
   11b68:	andeq	r2, r1, r0
   11b6c:	andeq	r2, r1, r0
   11b70:	andeq	r2, r1, r0
   11b74:	andeq	r2, r1, r0
   11b78:	andeq	r2, r1, r0
   11b7c:	andeq	r2, r1, r0
   11b80:	andeq	r2, r1, r0
   11b84:	andeq	r2, r1, r0
   11b88:	andeq	r2, r1, r0
   11b8c:	andeq	r2, r1, r0
   11b90:	andeq	r2, r1, r0
   11b94:	andeq	r2, r1, r0
   11b98:	andeq	r2, r1, r0
   11b9c:	andeq	r2, r1, r0
   11ba0:	andeq	r2, r1, r0
   11ba4:	andeq	r2, r1, r0
   11ba8:	andeq	r2, r1, r0
   11bac:	andeq	r2, r1, r0
   11bb0:	andeq	r2, r1, r0
   11bb4:	andeq	r2, r1, r0
   11bb8:	andeq	r2, r1, r0
   11bbc:	andeq	r2, r1, r0
   11bc0:	andeq	r2, r1, r0
   11bc4:	andeq	r2, r1, r0
   11bc8:	andeq	r2, r1, r0
   11bcc:	andeq	r2, r1, r0
   11bd0:	andeq	r2, r1, r0
   11bd4:	andeq	r2, r1, r0
   11bd8:	andeq	r2, r1, r0
   11bdc:	andeq	r2, r1, r0
   11be0:	andeq	r2, r1, r0
   11be4:	andeq	r2, r1, r0
   11be8:	andeq	r2, r1, r0
   11bec:	andeq	r2, r1, r0
   11bf0:	andeq	r2, r1, r0
   11bf4:	andeq	r2, r1, r0
   11bf8:	andeq	r2, r1, r0
   11bfc:	andeq	r2, r1, r0
   11c00:	andeq	r2, r1, r0
   11c04:	andeq	r1, r1, r4, asr #30
   11c08:	andeq	r2, r1, r0
   11c0c:	andeq	r1, r1, r0, asr pc
   11c10:	mov	r0, sl
   11c14:	and	r6, r1, #63	; 0x3f
   11c18:	bl	112b8 <_IO_getc@plt>
   11c1c:	cmn	r0, #1
   11c20:	beq	11ed4 <__assert_fail@plt+0x988>
   11c24:	cmp	r0, #191	; 0xbf
   11c28:	strb	r0, [sp, #121]	; 0x79
   11c2c:	strle	r0, [sp, #56]	; 0x38
   11c30:	movle	r4, #2
   11c34:	ble	11acc <__assert_fail@plt+0x580>
   11c38:	cmp	r0, #223	; 0xdf
   11c3c:	ble	11d28 <__assert_fail@plt+0x7dc>
   11c40:	cmp	r0, #255	; 0xff
   11c44:	strne	r0, [sp, #56]	; 0x38
   11c48:	movne	r4, #2
   11c4c:	movne	r5, #1
   11c50:	bne	11acc <__assert_fail@plt+0x580>
   11c54:	mov	r0, sl
   11c58:	add	r1, sp, #56	; 0x38
   11c5c:	bl	11954 <__assert_fail@plt+0x408>
   11c60:	subs	r5, r0, #0
   11c64:	bne	11ed4 <__assert_fail@plt+0x988>
   11c68:	ldr	r0, [sp, #56]	; 0x38
   11c6c:	mov	r4, #6
   11c70:	lsr	r3, r0, #16
   11c74:	lsr	r2, r0, #24
   11c78:	strb	r3, [sp, #123]	; 0x7b
   11c7c:	lsr	r3, r0, #8
   11c80:	strb	r0, [sp, #125]	; 0x7d
   11c84:	strb	r2, [sp, #122]	; 0x7a
   11c88:	strb	r3, [sp, #124]	; 0x7c
   11c8c:	b	11acc <__assert_fail@plt+0x580>
   11c90:	movw	r0, #31008	; 0x7920
   11c94:	movt	r0, #1
   11c98:	bl	15274 <__assert_fail@plt+0x3d28>
   11c9c:	movw	r3, #37312	; 0x91c0
   11ca0:	movt	r3, #2
   11ca4:	ldr	r3, [r3]
   11ca8:	cmp	sl, r3
   11cac:	beq	11cb8 <__assert_fail@plt+0x76c>
   11cb0:	mov	r0, sl
   11cb4:	bl	114a4 <fclose@plt>
   11cb8:	ldr	ip, [sp, #32]
   11cbc:	ldr	r2, [sp, #140]	; 0x8c
   11cc0:	ldr	r3, [ip]
   11cc4:	cmp	r2, r3
   11cc8:	bne	12acc <__assert_fail@plt+0x1580>
   11ccc:	add	sp, sp, #148	; 0x94
   11cd0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11cd4:	cmp	r6, #8
   11cd8:	str	r0, [sp, #56]	; 0x38
   11cdc:	mov	r4, #1
   11ce0:	movne	r5, #2
   11ce4:	moveq	r5, #3
   11ce8:	b	11acc <__assert_fail@plt+0x580>
   11cec:	movw	r1, #30980	; 0x7904
   11cf0:	ldr	r0, [sp, #36]	; 0x24
   11cf4:	movt	r1, #1
   11cf8:	bl	114ec <fopen64@plt>
   11cfc:	subs	sl, r0, #0
   11d00:	bne	11a30 <__assert_fail@plt+0x4e4>
   11d04:	bl	11414 <__errno_location@plt>
   11d08:	ldr	r0, [r0]
   11d0c:	bl	1136c <strerror@plt>
   11d10:	ldr	r1, [sp, #36]	; 0x24
   11d14:	mov	r2, r0
   11d18:	movw	r0, #30984	; 0x7908
   11d1c:	movt	r0, #1
   11d20:	bl	15274 <__assert_fail@plt+0x3d28>
   11d24:	b	11cb8 <__assert_fail@plt+0x76c>
   11d28:	sub	r3, r0, #192	; 0xc0
   11d2c:	mov	r0, sl
   11d30:	lsl	r3, r3, #8
   11d34:	str	r3, [sp, #56]	; 0x38
   11d38:	bl	112b8 <_IO_getc@plt>
   11d3c:	cmn	r0, #1
   11d40:	beq	11ed4 <__assert_fail@plt+0x988>
   11d44:	ldr	r3, [sp, #56]	; 0x38
   11d48:	mov	r4, #3
   11d4c:	strb	r0, [sp, #122]	; 0x7a
   11d50:	add	r3, r3, #192	; 0xc0
   11d54:	add	r0, r3, r0
   11d58:	str	r0, [sp, #56]	; 0x38
   11d5c:	b	11acc <__assert_fail@plt+0x580>
   11d60:	ldr	ip, [sp, #44]	; 0x2c
   11d64:	movw	r7, #37172	; 0x9134
   11d68:	movt	r7, #2
   11d6c:	ldr	r0, [ip]
   11d70:	bl	113fc <strlen@plt>
   11d74:	add	r0, r0, #100	; 0x64
   11d78:	bl	111f8 <gcry_xmalloc@plt>
   11d7c:	ldr	ip, [sp, #20]
   11d80:	mov	r3, r0
   11d84:	str	r3, [ip]
   11d88:	b	11af4 <__assert_fail@plt+0x5a8>
   11d8c:	movw	r2, #30728	; 0x7808
   11d90:	movt	r2, #1
   11d94:	stm	sp, {r1, r3}
   11d98:	movw	r3, #31028	; 0x7934
   11d9c:	str	r2, [sp, #12]
   11da0:	movt	r3, #1
   11da4:	str	r6, [sp, #8]
   11da8:	mov	r1, #1
   11dac:	mvn	r2, #0
   11db0:	bl	11420 <__sprintf_chk@plt>
   11db4:	ldr	r3, [fp, #12]
   11db8:	ldr	ip, [fp]
   11dbc:	cmp	r3, #0
   11dc0:	str	ip, [sp, #24]
   11dc4:	beq	12154 <__assert_fail@plt+0xc08>
   11dc8:	movw	r3, #37316	; 0x91c4
   11dcc:	movt	r3, #2
   11dd0:	ldr	r9, [r3]
   11dd4:	ldr	r3, [fp, #20]
   11dd8:	cmp	r3, #0
   11ddc:	beq	11dec <__assert_fail@plt+0x8a0>
   11de0:	bic	r3, r6, #2
   11de4:	cmp	r3, #5
   11de8:	beq	1242c <__assert_fail@plt+0xee0>
   11dec:	ldr	r3, [fp, #8]
   11df0:	cmp	r3, #0
   11df4:	bne	11e18 <__assert_fail@plt+0x8cc>
   11df8:	add	r6, sp, #119	; 0x77
   11dfc:	ldrb	r0, [r6, #1]!
   11e00:	mov	r1, r9
   11e04:	bl	11300 <_IO_putc@plt>
   11e08:	cmn	r0, #1
   11e0c:	beq	12118 <__assert_fail@plt+0xbcc>
   11e10:	subs	r4, r4, #1
   11e14:	bne	11dfc <__assert_fail@plt+0x8b0>
   11e18:	cmp	r5, #0
   11e1c:	beq	121c4 <__assert_fail@plt+0xc78>
   11e20:	mov	r6, #1
   11e24:	mov	r7, r6
   11e28:	cmp	r5, #1
   11e2c:	beq	121a0 <__assert_fail@plt+0xc54>
   11e30:	cmp	r5, #2
   11e34:	beq	121f4 <__assert_fail@plt+0xca8>
   11e38:	ldr	r3, [fp, #8]
   11e3c:	mov	r5, #0
   11e40:	str	r5, [sp, #60]	; 0x3c
   11e44:	cmp	r3, r5
   11e48:	beq	11e60 <__assert_fail@plt+0x914>
   11e4c:	b	12258 <__assert_fail@plt+0xd0c>
   11e50:	mov	r1, r9
   11e54:	bl	11300 <_IO_putc@plt>
   11e58:	cmn	r0, #1
   11e5c:	beq	12118 <__assert_fail@plt+0xbcc>
   11e60:	mov	r0, sl
   11e64:	bl	112b8 <_IO_getc@plt>
   11e68:	cmn	r0, #1
   11e6c:	bne	11e50 <__assert_fail@plt+0x904>
   11e70:	mov	r0, sl
   11e74:	bl	113d8 <feof@plt>
   11e78:	cmp	r0, #0
   11e7c:	beq	11ec4 <__assert_fail@plt+0x978>
   11e80:	ldr	r3, [sp, #60]	; 0x3c
   11e84:	cmp	r3, #0
   11e88:	bne	11eb4 <__assert_fail@plt+0x968>
   11e8c:	b	128a0 <__assert_fail@plt+0x1354>
   11e90:	mov	r1, r9
   11e94:	bl	11300 <_IO_putc@plt>
   11e98:	cmn	r0, #1
   11e9c:	beq	12118 <__assert_fail@plt+0xbcc>
   11ea0:	ldr	r3, [sp, #60]	; 0x3c
   11ea4:	sub	r3, r3, #1
   11ea8:	str	r3, [sp, #60]	; 0x3c
   11eac:	cmp	r3, #0
   11eb0:	beq	128a0 <__assert_fail@plt+0x1354>
   11eb4:	mov	r0, sl
   11eb8:	bl	112b8 <_IO_getc@plt>
   11ebc:	cmn	r0, #1
   11ec0:	bne	11e90 <__assert_fail@plt+0x944>
   11ec4:	ldr	ip, [sp, #20]
   11ec8:	ldr	r3, [ip, #12]
   11ecc:	cmp	r3, #0
   11ed0:	beq	12640 <__assert_fail@plt+0x10f4>
   11ed4:	mov	r0, sl
   11ed8:	bl	11288 <ferror@plt>
   11edc:	cmp	r0, #0
   11ee0:	beq	1292c <__assert_fail@plt+0x13e0>
   11ee4:	bl	11414 <__errno_location@plt>
   11ee8:	ldr	r0, [r0]
   11eec:	bl	1136c <strerror@plt>
   11ef0:	ldr	r1, [sp, #36]	; 0x24
   11ef4:	mov	r2, r0
   11ef8:	movw	r0, #31424	; 0x7ac0
   11efc:	movt	r0, #1
   11f00:	bl	15274 <__assert_fail@plt+0x3d28>
   11f04:	b	11c9c <__assert_fail@plt+0x750>
   11f08:	movw	r2, #30712	; 0x77f8
   11f0c:	movt	r2, #1
   11f10:	b	11d94 <__assert_fail@plt+0x848>
   11f14:	movw	r2, #30720	; 0x7800
   11f18:	movt	r2, #1
   11f1c:	b	11d94 <__assert_fail@plt+0x848>
   11f20:	movw	r2, #30732	; 0x780c
   11f24:	movt	r2, #1
   11f28:	b	11d94 <__assert_fail@plt+0x848>
   11f2c:	movw	r2, #30744	; 0x7818
   11f30:	movt	r2, #1
   11f34:	b	11d94 <__assert_fail@plt+0x848>
   11f38:	movw	r2, #30704	; 0x77f0
   11f3c:	movt	r2, #1
   11f40:	b	11d94 <__assert_fail@plt+0x848>
   11f44:	movw	r2, #30856	; 0x7888
   11f48:	movt	r2, #1
   11f4c:	b	11d94 <__assert_fail@plt+0x848>
   11f50:	movw	r2, #30896	; 0x78b0
   11f54:	movt	r2, #1
   11f58:	b	11d94 <__assert_fail@plt+0x848>
   11f5c:	movw	r2, #30852	; 0x7884
   11f60:	movt	r2, #1
   11f64:	b	11d94 <__assert_fail@plt+0x848>
   11f68:	movw	r2, #30864	; 0x7890
   11f6c:	movt	r2, #1
   11f70:	b	11d94 <__assert_fail@plt+0x848>
   11f74:	movw	r2, #30876	; 0x789c
   11f78:	movt	r2, #1
   11f7c:	b	11d94 <__assert_fail@plt+0x848>
   11f80:	movw	r2, #30892	; 0x78ac
   11f84:	movt	r2, #1
   11f88:	b	11d94 <__assert_fail@plt+0x848>
   11f8c:	movw	r2, #30756	; 0x7824
   11f90:	movt	r2, #1
   11f94:	b	11d94 <__assert_fail@plt+0x848>
   11f98:	ldr	lr, [fp, #8]
   11f9c:	movw	ip, #30916	; 0x78c4
   11fa0:	movt	ip, #1
   11fa4:	movw	r2, #30772	; 0x7834
   11fa8:	cmp	lr, #0
   11fac:	movt	r2, #1
   11fb0:	movne	r2, ip
   11fb4:	b	11d94 <__assert_fail@plt+0x848>
   11fb8:	movw	r2, #30784	; 0x7840
   11fbc:	movt	r2, #1
   11fc0:	b	11d94 <__assert_fail@plt+0x848>
   11fc4:	movw	r2, #30796	; 0x784c
   11fc8:	movt	r2, #1
   11fcc:	b	11d94 <__assert_fail@plt+0x848>
   11fd0:	movw	r2, #30804	; 0x7854
   11fd4:	movt	r2, #1
   11fd8:	b	11d94 <__assert_fail@plt+0x848>
   11fdc:	movw	r2, #30816	; 0x7860
   11fe0:	movt	r2, #1
   11fe4:	b	11d94 <__assert_fail@plt+0x848>
   11fe8:	movw	r2, #30828	; 0x786c
   11fec:	movt	r2, #1
   11ff0:	b	11d94 <__assert_fail@plt+0x848>
   11ff4:	movw	r2, #30836	; 0x7874
   11ff8:	movt	r2, #1
   11ffc:	b	11d94 <__assert_fail@plt+0x848>
   12000:	movw	r2, #30908	; 0x78bc
   12004:	movt	r2, #1
   12008:	b	11d94 <__assert_fail@plt+0x848>
   1200c:	mov	r2, #3
   12010:	cmp	r3, #1
   12014:	bls	12950 <__assert_fail@plt+0x1404>
   12018:	ldrb	ip, [r1]
   1201c:	sub	r0, r3, #2
   12020:	ldrb	r3, [r1, #1]
   12024:	add	r1, r1, #2
   12028:	orr	r3, r3, ip, lsl #8
   1202c:	add	r3, r3, #7
   12030:	lsr	r3, r3, #3
   12034:	cmp	r0, r3
   12038:	bcc	12950 <__assert_fail@plt+0x1404>
   1203c:	add	r4, r1, r3
   12040:	sub	r2, r2, #1
   12044:	rsb	r3, r3, r0
   12048:	cmp	r3, #1
   1204c:	bls	12950 <__assert_fail@plt+0x1404>
   12050:	ldrb	r0, [r4]
   12054:	sub	r1, r3, #2
   12058:	ldrb	r3, [r4, #1]
   1205c:	add	r4, r4, #2
   12060:	orr	r3, r3, r0, lsl #8
   12064:	add	r3, r3, #7
   12068:	lsr	r3, r3, #3
   1206c:	cmp	r1, r3
   12070:	bcc	12950 <__assert_fail@plt+0x1404>
   12074:	subs	r2, r2, #1
   12078:	add	r4, r4, r3
   1207c:	rsb	r3, r3, r1
   12080:	bne	12048 <__assert_fail@plt+0xafc>
   12084:	subs	r4, r4, r5
   12088:	beq	12950 <__assert_fail@plt+0x1404>
   1208c:	ldrb	r3, [sp, #120]	; 0x78
   12090:	tst	r3, #64	; 0x40
   12094:	beq	12964 <__assert_fail@plt+0x1418>
   12098:	orr	r0, r6, #192	; 0xc0
   1209c:	mov	r1, r9
   120a0:	bl	11300 <_IO_putc@plt>
   120a4:	cmn	r0, #1
   120a8:	beq	12118 <__assert_fail@plt+0xbcc>
   120ac:	cmp	r4, #191	; 0xbf
   120b0:	bls	12a3c <__assert_fail@plt+0x14f0>
   120b4:	cmp	r4, #8384	; 0x20c0
   120b8:	bcs	129d0 <__assert_fail@plt+0x1484>
   120bc:	sub	r6, r4, #192	; 0xc0
   120c0:	mov	r1, r9
   120c4:	lsr	r0, r6, #8
   120c8:	add	r0, r0, #192	; 0xc0
   120cc:	bl	11300 <_IO_putc@plt>
   120d0:	cmn	r0, #1
   120d4:	beq	12118 <__assert_fail@plt+0xbcc>
   120d8:	uxtb	r0, r6
   120dc:	mov	r1, r9
   120e0:	bl	11300 <_IO_putc@plt>
   120e4:	cmn	r0, #1
   120e8:	beq	12118 <__assert_fail@plt+0xbcc>
   120ec:	cmp	r4, #0
   120f0:	addgt	r4, r5, r4
   120f4:	bgt	12104 <__assert_fail@plt+0xbb8>
   120f8:	b	128a0 <__assert_fail@plt+0x1354>
   120fc:	cmp	r5, r4
   12100:	beq	128a0 <__assert_fail@plt+0x1354>
   12104:	ldrb	r0, [r5], #1
   12108:	mov	r1, r9
   1210c:	bl	11300 <_IO_putc@plt>
   12110:	cmn	r0, #1
   12114:	bne	120fc <__assert_fail@plt+0xbb0>
   12118:	bl	11414 <__errno_location@plt>
   1211c:	ldr	r0, [r0]
   12120:	bl	1136c <strerror@plt>
   12124:	ldr	r1, [sp, #24]
   12128:	mov	r2, r0
   1212c:	movw	r0, #31400	; 0x7aa8
   12130:	movt	r0, #1
   12134:	bl	15274 <__assert_fail@plt+0x3d28>
   12138:	ldr	ip, [sp, #20]
   1213c:	ldr	r3, [ip, #12]
   12140:	cmp	r3, #0
   12144:	bne	11c9c <__assert_fail@plt+0x750>
   12148:	mov	r0, r9
   1214c:	bl	114a4 <fclose@plt>
   12150:	b	11c9c <__assert_fail@plt+0x750>
   12154:	ldr	r3, [fp, #16]
   12158:	cmp	r3, #0
   1215c:	bne	12488 <__assert_fail@plt+0xf3c>
   12160:	movw	r1, #31064	; 0x7958
   12164:	ldr	r0, [sp, #24]
   12168:	movt	r1, #1
   1216c:	bl	114ec <fopen64@plt>
   12170:	subs	r9, r0, #0
   12174:	bne	11dd4 <__assert_fail@plt+0x888>
   12178:	bl	11414 <__errno_location@plt>
   1217c:	ldr	r0, [r0]
   12180:	bl	1136c <strerror@plt>
   12184:	ldr	r1, [sp, #24]
   12188:	mov	r2, r0
   1218c:	movw	r0, #31068	; 0x795c
   12190:	movt	r0, #1
   12194:	bl	15274 <__assert_fail@plt+0x3d28>
   12198:	mov	r0, #1
   1219c:	bl	113cc <exit@plt>
   121a0:	cmp	r6, #0
   121a4:	beq	124f0 <__assert_fail@plt+0xfa4>
   121a8:	ldr	r6, [sp, #60]	; 0x3c
   121ac:	sub	r3, r6, #224	; 0xe0
   121b0:	cmp	r3, #30
   121b4:	bhi	12b20 <__assert_fail@plt+0x15d4>
   121b8:	cmp	r6, #191	; 0xbf
   121bc:	bgt	123c8 <__assert_fail@plt+0xe7c>
   121c0:	str	r6, [sp, #60]	; 0x3c
   121c4:	cmp	r4, #0
   121c8:	addne	r5, sp, #119	; 0x77
   121cc:	bne	121dc <__assert_fail@plt+0xc90>
   121d0:	b	11e80 <__assert_fail@plt+0x934>
   121d4:	subs	r4, r4, #1
   121d8:	beq	11e80 <__assert_fail@plt+0x934>
   121dc:	ldrb	r0, [r5, #1]!
   121e0:	mov	r1, r9
   121e4:	bl	11300 <_IO_putc@plt>
   121e8:	cmn	r0, #1
   121ec:	bne	121d4 <__assert_fail@plt+0xc88>
   121f0:	b	12118 <__assert_fail@plt+0xbcc>
   121f4:	ldr	r3, [sp, #60]	; 0x3c
   121f8:	cmp	r3, #0
   121fc:	bne	12af4 <__assert_fail@plt+0x15a8>
   12200:	mov	r0, sl
   12204:	add	r1, sp, #64	; 0x40
   12208:	bl	11904 <__assert_fail@plt+0x3b8>
   1220c:	cmp	r0, #0
   12210:	bne	11ec4 <__assert_fail@plt+0x978>
   12214:	ldr	r2, [sp, #64]	; 0x40
   12218:	add	ip, sp, #144	; 0x90
   1221c:	add	r3, ip, r4
   12220:	add	r8, sp, #119	; 0x77
   12224:	add	r4, r4, #2
   12228:	lsr	r1, r2, #8
   1222c:	strb	r2, [r3, #-23]	; 0xffffffe9
   12230:	strb	r1, [r3, #-24]	; 0xffffffe8
   12234:	b	12240 <__assert_fail@plt+0xcf4>
   12238:	subs	r4, r4, #1
   1223c:	beq	1249c <__assert_fail@plt+0xf50>
   12240:	ldrb	r0, [r8, #1]!
   12244:	mov	r1, r9
   12248:	bl	11300 <_IO_putc@plt>
   1224c:	cmn	r0, #1
   12250:	bne	12238 <__assert_fail@plt+0xcec>
   12254:	b	12118 <__assert_fail@plt+0xbcc>
   12258:	mov	r0, sl
   1225c:	bl	112b8 <_IO_getc@plt>
   12260:	cmn	r0, #1
   12264:	mov	r8, r0
   12268:	beq	11ec4 <__assert_fail@plt+0x978>
   1226c:	sub	r3, r0, #1
   12270:	cmp	r3, #1
   12274:	bls	1265c <__assert_fail@plt+0x1110>
   12278:	cmp	r0, #3
   1227c:	bne	12a54 <__assert_fail@plt+0x1508>
   12280:	mov	r0, #2048	; 0x800
   12284:	add	ip, sp, #64	; 0x40
   12288:	str	r5, [sp, #64]	; 0x40
   1228c:	mov	r7, r5
   12290:	str	ip, [sp, #28]
   12294:	mov	r8, r5
   12298:	str	r5, [sp, #68]	; 0x44
   1229c:	str	r5, [sp, #72]	; 0x48
   122a0:	str	r5, [sp, #76]	; 0x4c
   122a4:	str	r5, [sp, #80]	; 0x50
   122a8:	str	r5, [sp, #84]	; 0x54
   122ac:	str	r5, [sp, #88]	; 0x58
   122b0:	str	r5, [sp, #92]	; 0x5c
   122b4:	str	r5, [sp, #96]	; 0x60
   122b8:	str	r5, [sp, #100]	; 0x64
   122bc:	str	r5, [sp, #104]	; 0x68
   122c0:	str	r5, [sp, #108]	; 0x6c
   122c4:	bl	111f8 <gcry_xmalloc@plt>
   122c8:	str	r0, [sp, #40]	; 0x28
   122cc:	mov	r0, #8192	; 0x2000
   122d0:	bl	111f8 <gcry_xmalloc@plt>
   122d4:	str	r5, [sp, #68]	; 0x44
   122d8:	str	fp, [sp, #48]	; 0x30
   122dc:	mov	r4, r0
   122e0:	cmp	r7, #2048	; 0x800
   122e4:	bcs	1232c <__assert_fail@plt+0xde0>
   122e8:	cmp	r7, #0
   122ec:	ldr	ip, [sp, #40]	; 0x28
   122f0:	rsb	r6, r7, #2048	; 0x800
   122f4:	mov	fp, #0
   122f8:	ldreq	r3, [sp, #40]	; 0x28
   122fc:	add	r5, ip, r7
   12300:	streq	r3, [sp, #64]	; 0x40
   12304:	mov	r0, sl
   12308:	bl	112b8 <_IO_getc@plt>
   1230c:	cmn	r0, #1
   12310:	beq	12324 <__assert_fail@plt+0xdd8>
   12314:	strb	r0, [r5, fp]
   12318:	add	fp, fp, #1
   1231c:	cmp	r6, fp
   12320:	bgt	12304 <__assert_fail@plt+0xdb8>
   12324:	add	r3, fp, r7
   12328:	str	r3, [sp, #68]	; 0x44
   1232c:	cmp	r8, #0
   12330:	mov	r1, #8192	; 0x2000
   12334:	str	r4, [sp, #80]	; 0x50
   12338:	str	r1, [sp, #84]	; 0x54
   1233c:	bne	12364 <__assert_fail@plt+0xe18>
   12340:	mov	r1, r8
   12344:	ldr	r0, [sp, #28]
   12348:	mov	r2, r8
   1234c:	bl	112e8 <BZ2_bzDecompressInit@plt>
   12350:	cmp	r0, #0
   12354:	bne	12a80 <__assert_fail@plt+0x1534>
   12358:	ldr	r7, [sp, #68]	; 0x44
   1235c:	mov	r8, #1
   12360:	b	122e0 <__assert_fail@plt+0xd94>
   12364:	ldr	r0, [sp, #28]
   12368:	bl	1148c <BZ2_bzDecompress@plt>
   1236c:	adds	r5, r0, #2
   12370:	mov	r6, r0
   12374:	movne	r5, #1
   12378:	bics	r2, r0, #4
   1237c:	moveq	r7, #0
   12380:	andne	r7, r5, #1
   12384:	cmp	r7, #0
   12388:	bne	12abc <__assert_fail@plt+0x1570>
   1238c:	ldr	r3, [sp, #84]	; 0x54
   12390:	cmp	r3, #8192	; 0x2000
   12394:	bne	123b0 <__assert_fail@plt+0xe64>
   12398:	b	12408 <__assert_fail@plt+0xebc>
   1239c:	ldr	r3, [sp, #84]	; 0x54
   123a0:	add	r7, r7, #1
   123a4:	rsb	r3, r3, #8192	; 0x2000
   123a8:	cmp	r7, r3
   123ac:	bcs	12408 <__assert_fail@plt+0xebc>
   123b0:	ldrb	r0, [r4, r7]
   123b4:	mov	r1, r9
   123b8:	bl	11300 <_IO_putc@plt>
   123bc:	cmn	r0, #1
   123c0:	bne	1239c <__assert_fail@plt+0xe50>
   123c4:	b	12118 <__assert_fail@plt+0xbcc>
   123c8:	cmp	r6, #223	; 0xdf
   123cc:	ble	12600 <__assert_fail@plt+0x10b4>
   123d0:	cmp	r6, #255	; 0xff
   123d4:	beq	128e0 <__assert_fail@plt+0x1394>
   123d8:	cmp	r4, #0
   123dc:	addne	r8, sp, #119	; 0x77
   123e0:	bne	123f0 <__assert_fail@plt+0xea4>
   123e4:	b	125b0 <__assert_fail@plt+0x1064>
   123e8:	subs	r4, r4, #1
   123ec:	beq	125b0 <__assert_fail@plt+0x1064>
   123f0:	ldrb	r0, [r8, #1]!
   123f4:	mov	r1, r9
   123f8:	bl	11300 <_IO_putc@plt>
   123fc:	cmn	r0, #1
   12400:	bne	123e8 <__assert_fail@plt+0xe9c>
   12404:	b	12118 <__assert_fail@plt+0xbcc>
   12408:	cmp	r6, #4
   1240c:	moveq	r5, #0
   12410:	andne	r5, r5, #1
   12414:	cmp	r5, #0
   12418:	bne	12358 <__assert_fail@plt+0xe0c>
   1241c:	ldr	r0, [sp, #28]
   12420:	ldr	fp, [sp, #48]	; 0x30
   12424:	bl	112f4 <BZ2_bzDecompressEnd@plt>
   12428:	b	11e70 <__assert_fail@plt+0x924>
   1242c:	cmp	r6, #5
   12430:	ldr	r0, [sp, #60]	; 0x3c
   12434:	movne	r6, #14
   12438:	moveq	r6, #6
   1243c:	bl	111f8 <gcry_xmalloc@plt>
   12440:	ldr	r3, [sp, #60]	; 0x3c
   12444:	cmp	r3, #0
   12448:	mov	r5, r0
   1244c:	beq	12950 <__assert_fail@plt+0x1404>
   12450:	mov	r7, #0
   12454:	mov	r4, r7
   12458:	b	12474 <__assert_fail@plt+0xf28>
   1245c:	ldr	r3, [sp, #60]	; 0x3c
   12460:	add	r7, r7, #1
   12464:	strb	r0, [r5, r4]
   12468:	cmp	r7, r3
   1246c:	mov	r4, r7
   12470:	bcs	12518 <__assert_fail@plt+0xfcc>
   12474:	mov	r0, sl
   12478:	bl	112b8 <_IO_getc@plt>
   1247c:	cmn	r0, #1
   12480:	bne	1245c <__assert_fail@plt+0xf10>
   12484:	b	11ec4 <__assert_fail@plt+0x978>
   12488:	movw	r0, #31048	; 0x7948
   1248c:	ldr	r1, [sp, #24]
   12490:	movt	r0, #1
   12494:	bl	1521c <__assert_fail@plt+0x3cd0>
   12498:	b	12160 <__assert_fail@plt+0xc14>
   1249c:	ldr	r3, [sp, #64]	; 0x40
   124a0:	cmp	r3, #0
   124a4:	beq	11e80 <__assert_fail@plt+0x934>
   124a8:	b	124c0 <__assert_fail@plt+0xf74>
   124ac:	ldr	r3, [sp, #64]	; 0x40
   124b0:	sub	r3, r3, #1
   124b4:	str	r3, [sp, #64]	; 0x40
   124b8:	cmp	r3, #0
   124bc:	beq	124e8 <__assert_fail@plt+0xf9c>
   124c0:	mov	r0, sl
   124c4:	bl	112b8 <_IO_getc@plt>
   124c8:	cmn	r0, #1
   124cc:	beq	11ec4 <__assert_fail@plt+0x978>
   124d0:	mov	r1, r9
   124d4:	bl	11300 <_IO_putc@plt>
   124d8:	cmn	r0, #1
   124dc:	bne	124ac <__assert_fail@plt+0xf60>
   124e0:	b	12118 <__assert_fail@plt+0xbcc>
   124e4:	mov	r6, #0
   124e8:	mov	r4, #0
   124ec:	b	11e28 <__assert_fail@plt+0x8dc>
   124f0:	mov	r0, sl
   124f4:	bl	112b8 <_IO_getc@plt>
   124f8:	cmn	r0, #1
   124fc:	mov	r6, r0
   12500:	beq	11ec4 <__assert_fail@plt+0x978>
   12504:	add	r1, sp, #144	; 0x90
   12508:	add	r3, r1, r4
   1250c:	add	r4, r4, #1
   12510:	strb	r0, [r3, #-24]	; 0xffffffe8
   12514:	b	121b8 <__assert_fail@plt+0xc6c>
   12518:	cmp	r3, #0
   1251c:	beq	12950 <__assert_fail@plt+0x1404>
   12520:	ldrb	r2, [r5]
   12524:	sub	r1, r2, #2
   12528:	cmp	r1, #2
   1252c:	bhi	12950 <__assert_fail@plt+0x1404>
   12530:	cmp	r2, #4
   12534:	beq	12a90 <__assert_fail@plt+0x1544>
   12538:	cmp	r3, #7
   1253c:	bls	12950 <__assert_fail@plt+0x1404>
   12540:	add	r1, r5, #8
   12544:	mov	r0, #8
   12548:	ldrb	r2, [r1, #-1]
   1254c:	rsb	r3, r0, r3
   12550:	sub	r2, r2, #1
   12554:	cmp	r2, #19
   12558:	ldrls	pc, [pc, r2, lsl #2]
   1255c:	b	12950 <__assert_fail@plt+0x1404>
   12560:	andeq	r2, r1, r0, asr #18
   12564:	andeq	r2, r1, r0, asr #18
   12568:	andeq	r2, r1, r0, asr #18
   1256c:	andeq	r2, r1, r0, asr r9
   12570:	andeq	r2, r1, r0, asr r9
   12574:	andeq	r2, r1, r0, asr r9
   12578:	andeq	r2, r1, r0, asr r9
   1257c:	andeq	r2, r1, r0, asr r9
   12580:	andeq	r2, r1, r0, asr r9
   12584:	andeq	r2, r1, r0, asr r9
   12588:	andeq	r2, r1, r0, asr r9
   1258c:	andeq	r2, r1, r0, asr r9
   12590:	andeq	r2, r1, r0, asr r9
   12594:	andeq	r2, r1, r0, asr r9
   12598:	andeq	r2, r1, r0, asr r9
   1259c:	andeq	r2, r1, ip
   125a0:	andeq	r2, r1, r8, asr #18
   125a4:	andeq	r2, r1, r0, asr r9
   125a8:	andeq	r2, r1, r0, asr r9
   125ac:	andeq	r2, r1, ip
   125b0:	and	r3, r6, #31
   125b4:	lsl	r3, r7, r3
   125b8:	str	r3, [sp, #64]	; 0x40
   125bc:	cmp	r3, #0
   125c0:	bne	125ec <__assert_fail@plt+0x10a0>
   125c4:	b	124e4 <__assert_fail@plt+0xf98>
   125c8:	mov	r1, r9
   125cc:	bl	11300 <_IO_putc@plt>
   125d0:	cmn	r0, #1
   125d4:	beq	12118 <__assert_fail@plt+0xbcc>
   125d8:	ldr	r3, [sp, #64]	; 0x40
   125dc:	sub	r3, r3, #1
   125e0:	str	r3, [sp, #64]	; 0x40
   125e4:	cmp	r3, #0
   125e8:	beq	124e4 <__assert_fail@plt+0xf98>
   125ec:	mov	r0, sl
   125f0:	bl	112b8 <_IO_getc@plt>
   125f4:	cmn	r0, #1
   125f8:	bne	125c8 <__assert_fail@plt+0x107c>
   125fc:	b	11ec4 <__assert_fail@plt+0x978>
   12600:	sub	r3, r6, #192	; 0xc0
   12604:	mov	r0, sl
   12608:	lsl	r3, r3, #8
   1260c:	str	r3, [sp, #60]	; 0x3c
   12610:	bl	112b8 <_IO_getc@plt>
   12614:	cmn	r0, #1
   12618:	beq	11ec4 <__assert_fail@plt+0x978>
   1261c:	ldr	r3, [sp, #60]	; 0x3c
   12620:	add	ip, sp, #144	; 0x90
   12624:	add	r2, ip, r4
   12628:	add	r4, r4, #1
   1262c:	add	r3, r3, #192	; 0xc0
   12630:	strb	r0, [r2, #-24]	; 0xffffffe8
   12634:	add	r0, r3, r0
   12638:	str	r0, [sp, #60]	; 0x3c
   1263c:	b	121c4 <__assert_fail@plt+0xc78>
   12640:	bl	11414 <__errno_location@plt>
   12644:	ldr	r5, [r0]
   12648:	mov	r4, r0
   1264c:	mov	r0, r9
   12650:	bl	114a4 <fclose@plt>
   12654:	str	r5, [r4]
   12658:	b	11ed4 <__assert_fail@plt+0x988>
   1265c:	mov	r0, #2048	; 0x800
   12660:	add	ip, sp, #64	; 0x40
   12664:	str	r5, [sp, #64]	; 0x40
   12668:	mov	r6, r5
   1266c:	str	ip, [sp, #28]
   12670:	str	r5, [sp, #68]	; 0x44
   12674:	str	r5, [sp, #72]	; 0x48
   12678:	str	r5, [sp, #76]	; 0x4c
   1267c:	str	r5, [sp, #80]	; 0x50
   12680:	str	r5, [sp, #84]	; 0x54
   12684:	str	r5, [sp, #88]	; 0x58
   12688:	str	r5, [sp, #92]	; 0x5c
   1268c:	str	r5, [sp, #96]	; 0x60
   12690:	str	r5, [sp, #100]	; 0x64
   12694:	str	r5, [sp, #104]	; 0x68
   12698:	str	r5, [sp, #108]	; 0x6c
   1269c:	str	r5, [sp, #112]	; 0x70
   126a0:	str	r5, [sp, #116]	; 0x74
   126a4:	bl	111f8 <gcry_xmalloc@plt>
   126a8:	str	r0, [sp, #40]	; 0x28
   126ac:	mov	r0, #8192	; 0x2000
   126b0:	bl	111f8 <gcry_xmalloc@plt>
   126b4:	str	fp, [sp, #52]	; 0x34
   126b8:	mov	fp, r5
   126bc:	str	r5, [sp, #68]	; 0x44
   126c0:	str	r8, [sp, #48]	; 0x30
   126c4:	mov	r7, r0
   126c8:	cmp	r6, #2048	; 0x800
   126cc:	bcs	12714 <__assert_fail@plt+0x11c8>
   126d0:	cmp	r6, #0
   126d4:	rsb	r4, r6, #2048	; 0x800
   126d8:	mov	r8, #0
   126dc:	ldreq	ip, [sp, #40]	; 0x28
   126e0:	streq	ip, [sp, #64]	; 0x40
   126e4:	ldr	ip, [sp, #40]	; 0x28
   126e8:	add	r5, ip, r6
   126ec:	mov	r0, sl
   126f0:	bl	112b8 <_IO_getc@plt>
   126f4:	cmn	r0, #1
   126f8:	beq	127c4 <__assert_fail@plt+0x1278>
   126fc:	strb	r0, [r5, r8]
   12700:	add	r8, r8, #1
   12704:	cmp	r4, r8
   12708:	bgt	126ec <__assert_fail@plt+0x11a0>
   1270c:	add	r3, r8, r6
   12710:	str	r3, [sp, #68]	; 0x44
   12714:	cmp	fp, #0
   12718:	mov	r1, #8192	; 0x2000
   1271c:	str	r7, [sp, #76]	; 0x4c
   12720:	str	r1, [sp, #80]	; 0x50
   12724:	bne	1275c <__assert_fail@plt+0x1210>
   12728:	ldr	ip, [sp, #48]	; 0x30
   1272c:	cmp	ip, #1
   12730:	beq	127f4 <__assert_fail@plt+0x12a8>
   12734:	movw	r1, #31176	; 0x79c8
   12738:	ldr	r0, [sp, #28]
   1273c:	movt	r1, #1
   12740:	mov	r2, #56	; 0x38
   12744:	bl	114bc <inflateInit_@plt>
   12748:	cmp	r0, #0
   1274c:	bne	12aa4 <__assert_fail@plt+0x1558>
   12750:	ldr	r6, [sp, #68]	; 0x44
   12754:	mov	fp, #1
   12758:	b	126c8 <__assert_fail@plt+0x117c>
   1275c:	ldr	r0, [sp, #28]
   12760:	mov	r1, #2
   12764:	bl	11264 <inflate@plt>
   12768:	adds	r4, r0, #5
   1276c:	mov	r5, r0
   12770:	movne	r4, #1
   12774:	cmp	r0, #1
   12778:	movls	r6, #0
   1277c:	andhi	r6, r4, #1
   12780:	cmp	r6, #0
   12784:	bne	12a68 <__assert_fail@plt+0x151c>
   12788:	ldr	r3, [sp, #80]	; 0x50
   1278c:	cmp	r3, #8192	; 0x2000
   12790:	bne	127ac <__assert_fail@plt+0x1260>
   12794:	b	12810 <__assert_fail@plt+0x12c4>
   12798:	ldr	r3, [sp, #80]	; 0x50
   1279c:	add	r6, r6, #1
   127a0:	rsb	r3, r3, #8192	; 0x2000
   127a4:	cmp	r6, r3
   127a8:	bcs	12810 <__assert_fail@plt+0x12c4>
   127ac:	ldrb	r0, [r7, r6]
   127b0:	mov	r1, r9
   127b4:	bl	11300 <_IO_putc@plt>
   127b8:	cmn	r0, #1
   127bc:	bne	12798 <__assert_fail@plt+0x124c>
   127c0:	b	12118 <__assert_fail@plt+0xbcc>
   127c4:	cmp	r4, r8
   127c8:	ldr	ip, [sp, #48]	; 0x30
   127cc:	add	r3, r8, r6
   127d0:	movle	r4, #0
   127d4:	movgt	r4, #1
   127d8:	cmp	ip, #1
   127dc:	movne	r4, #0
   127e0:	cmp	r4, #0
   127e4:	ldrne	ip, [sp, #40]	; 0x28
   127e8:	strbne	r0, [ip, r3]
   127ec:	addne	r3, r3, #1
   127f0:	b	12710 <__assert_fail@plt+0x11c4>
   127f4:	movw	r2, #31176	; 0x79c8
   127f8:	ldr	r0, [sp, #28]
   127fc:	movt	r2, #1
   12800:	mvn	r1, #12
   12804:	mov	r3, #56	; 0x38
   12808:	bl	114e0 <inflateInit2_@plt>
   1280c:	b	12748 <__assert_fail@plt+0x11fc>
   12810:	cmp	r5, #1
   12814:	moveq	r4, #0
   12818:	andne	r4, r4, #1
   1281c:	cmp	r4, #0
   12820:	bne	12750 <__assert_fail@plt+0x1204>
   12824:	movw	r6, #37304	; 0x91b8
   12828:	movt	r6, #2
   1282c:	movw	r0, #31264	; 0x7a20
   12830:	mov	r1, #1
   12834:	ldr	r3, [r6]
   12838:	movt	r0, #1
   1283c:	mov	r2, #16
   12840:	ldr	fp, [sp, #52]	; 0x34
   12844:	bl	1130c <fwrite@plt>
   12848:	ldr	r3, [sp, #68]	; 0x44
   1284c:	cmp	r3, #0
   12850:	movne	r3, r4
   12854:	beq	12888 <__assert_fail@plt+0x133c>
   12858:	ldr	ip, [sp, #64]	; 0x40
   1285c:	mov	r1, #1
   12860:	movw	r2, #31284	; 0x7a34
   12864:	ldr	r0, [r6]
   12868:	movt	r2, #1
   1286c:	add	r4, r4, r1
   12870:	ldrb	r3, [ip, r3]
   12874:	bl	11498 <__fprintf_chk@plt>
   12878:	ldr	r2, [sp, #68]	; 0x44
   1287c:	mov	r3, r4
   12880:	cmp	r4, r2
   12884:	bcc	12858 <__assert_fail@plt+0x130c>
   12888:	ldr	r1, [r6]
   1288c:	mov	r0, #10
   12890:	bl	11300 <_IO_putc@plt>
   12894:	ldr	r0, [sp, #28]
   12898:	bl	113e4 <inflateEnd@plt>
   1289c:	b	11e70 <__assert_fail@plt+0x924>
   128a0:	ldr	r3, [fp, #12]
   128a4:	cmp	r3, #0
   128a8:	bne	11a44 <__assert_fail@plt+0x4f8>
   128ac:	mov	r0, r9
   128b0:	bl	114a4 <fclose@plt>
   128b4:	cmp	r0, #0
   128b8:	beq	11a44 <__assert_fail@plt+0x4f8>
   128bc:	bl	11414 <__errno_location@plt>
   128c0:	ldr	r0, [r0]
   128c4:	bl	1136c <strerror@plt>
   128c8:	ldr	r1, [sp, #24]
   128cc:	mov	r2, r0
   128d0:	movw	r0, #31376	; 0x7a90
   128d4:	movt	r0, #1
   128d8:	bl	15274 <__assert_fail@plt+0x3d28>
   128dc:	b	11a44 <__assert_fail@plt+0x4f8>
   128e0:	mov	r0, sl
   128e4:	add	r1, sp, #60	; 0x3c
   128e8:	bl	11954 <__assert_fail@plt+0x408>
   128ec:	cmp	r0, #0
   128f0:	bne	11ec4 <__assert_fail@plt+0x978>
   128f4:	ldr	r3, [sp, #60]	; 0x3c
   128f8:	add	r1, r4, #3
   128fc:	add	r2, sp, #144	; 0x90
   12900:	add	r1, r2, r1
   12904:	add	r2, r2, r4
   12908:	lsr	r0, r3, #24
   1290c:	add	r4, r4, #4
   12910:	strb	r0, [r2, #-24]	; 0xffffffe8
   12914:	lsr	r0, r3, #16
   12918:	strb	r0, [r2, #-23]	; 0xffffffe9
   1291c:	lsr	r0, r3, #8
   12920:	strb	r0, [r2, #-22]	; 0xffffffea
   12924:	strb	r3, [r1, #-24]	; 0xffffffe8
   12928:	b	121c4 <__assert_fail@plt+0xc78>
   1292c:	ldr	r1, [sp, #36]	; 0x24
   12930:	movw	r0, #31448	; 0x7ad8
   12934:	movt	r0, #1
   12938:	bl	15274 <__assert_fail@plt+0x3d28>
   1293c:	b	11c9c <__assert_fail@plt+0x750>
   12940:	mov	r2, #2
   12944:	b	12010 <__assert_fail@plt+0xac4>
   12948:	mov	r2, #4
   1294c:	b	12010 <__assert_fail@plt+0xac4>
   12950:	movw	r0, #31096	; 0x7978
   12954:	movt	r0, #1
   12958:	bl	15274 <__assert_fail@plt+0x3d28>
   1295c:	mov	r0, #1
   12960:	bl	113cc <exit@plt>
   12964:	cmp	r4, #255	; 0xff
   12968:	lsl	r6, r6, #2
   1296c:	orrls	r6, r6, #128	; 0x80
   12970:	bls	12980 <__assert_fail@plt+0x1434>
   12974:	cmp	r4, #65536	; 0x10000
   12978:	orrcc	r6, r6, #129	; 0x81
   1297c:	orrcs	r6, r6, #130	; 0x82
   12980:	mov	r0, r6
   12984:	mov	r1, r9
   12988:	bl	11300 <_IO_putc@plt>
   1298c:	cmn	r0, #1
   12990:	beq	12118 <__assert_fail@plt+0xbcc>
   12994:	tst	r6, #2
   12998:	bne	12a10 <__assert_fail@plt+0x14c4>
   1299c:	tst	r6, #3
   129a0:	beq	129b8 <__assert_fail@plt+0x146c>
   129a4:	lsr	r0, r4, #8
   129a8:	mov	r1, r9
   129ac:	bl	11300 <_IO_putc@plt>
   129b0:	cmn	r0, #1
   129b4:	beq	12118 <__assert_fail@plt+0xbcc>
   129b8:	uxtb	r0, r4
   129bc:	mov	r1, r9
   129c0:	bl	11300 <_IO_putc@plt>
   129c4:	cmn	r0, #1
   129c8:	bne	120ec <__assert_fail@plt+0xba0>
   129cc:	b	12118 <__assert_fail@plt+0xbcc>
   129d0:	mov	r0, #255	; 0xff
   129d4:	mov	r1, r9
   129d8:	bl	11300 <_IO_putc@plt>
   129dc:	cmn	r0, #1
   129e0:	beq	12118 <__assert_fail@plt+0xbcc>
   129e4:	lsr	r0, r4, #24
   129e8:	mov	r1, r9
   129ec:	bl	11300 <_IO_putc@plt>
   129f0:	cmn	r0, #1
   129f4:	beq	12118 <__assert_fail@plt+0xbcc>
   129f8:	lsr	r0, r4, #16
   129fc:	mov	r1, r9
   12a00:	bl	11300 <_IO_putc@plt>
   12a04:	cmn	r0, #1
   12a08:	bne	129a4 <__assert_fail@plt+0x1458>
   12a0c:	b	12118 <__assert_fail@plt+0xbcc>
   12a10:	lsr	r0, r4, #24
   12a14:	mov	r1, r9
   12a18:	bl	11300 <_IO_putc@plt>
   12a1c:	cmn	r0, #1
   12a20:	beq	12118 <__assert_fail@plt+0xbcc>
   12a24:	lsr	r0, r4, #16
   12a28:	mov	r1, r9
   12a2c:	bl	11300 <_IO_putc@plt>
   12a30:	cmn	r0, #1
   12a34:	bne	1299c <__assert_fail@plt+0x1450>
   12a38:	b	12118 <__assert_fail@plt+0xbcc>
   12a3c:	mov	r0, r4
   12a40:	mov	r1, r9
   12a44:	bl	11300 <_IO_putc@plt>
   12a48:	cmn	r0, #1
   12a4c:	bne	120ec <__assert_fail@plt+0xba0>
   12a50:	b	12118 <__assert_fail@plt+0xbcc>
   12a54:	mov	r1, r0
   12a58:	movw	r0, #31340	; 0x7a6c
   12a5c:	movt	r0, #1
   12a60:	bl	15274 <__assert_fail@plt+0x3d28>
   12a64:	b	11ec4 <__assert_fail@plt+0x978>
   12a68:	ldr	r1, [sp, #88]	; 0x58
   12a6c:	cmp	r1, #0
   12a70:	beq	12b10 <__assert_fail@plt+0x15c4>
   12a74:	movw	r0, #31204	; 0x79e4
   12a78:	movt	r0, #1
   12a7c:	bl	152e8 <__assert_fail@plt+0x3d9c>
   12a80:	mov	r1, r0
   12a84:	movw	r0, #31292	; 0x7a3c
   12a88:	movt	r0, #1
   12a8c:	bl	152e8 <__assert_fail@plt+0x3d9c>
   12a90:	cmp	r3, #5
   12a94:	bls	12950 <__assert_fail@plt+0x1404>
   12a98:	add	r1, r5, #6
   12a9c:	mov	r0, #6
   12aa0:	b	12548 <__assert_fail@plt+0xffc>
   12aa4:	ldr	r1, [sp, #88]	; 0x58
   12aa8:	cmp	r1, #0
   12aac:	beq	12ad0 <__assert_fail@plt+0x1584>
   12ab0:	movw	r0, #31184	; 0x79d0
   12ab4:	movt	r0, #1
   12ab8:	bl	152e8 <__assert_fail@plt+0x3d9c>
   12abc:	mov	r1, r0
   12ac0:	movw	r0, #31312	; 0x7a50
   12ac4:	movt	r0, #1
   12ac8:	bl	152e8 <__assert_fail@plt+0x3d9c>
   12acc:	bl	112dc <__stack_chk_fail@plt>
   12ad0:	cmn	r0, #4
   12ad4:	beq	12b3c <__assert_fail@plt+0x15f0>
   12ad8:	movw	r3, #30960	; 0x78f0
   12adc:	cmn	r0, #6
   12ae0:	movt	r3, #1
   12ae4:	movw	r1, #30932	; 0x78d4
   12ae8:	movt	r1, #1
   12aec:	moveq	r1, r3
   12af0:	b	12ab0 <__assert_fail@plt+0x1564>
   12af4:	movw	r0, #31168	; 0x79c0
   12af8:	movw	r1, #31156	; 0x79b4
   12afc:	movt	r0, #1
   12b00:	movt	r1, #1
   12b04:	movw	r2, #670	; 0x29e
   12b08:	ldr	r3, [pc, #56]	; 12b48 <__assert_fail@plt+0x15fc>
   12b0c:	bl	1154c <__assert_fail@plt>
   12b10:	mov	r1, r0
   12b14:	movw	r0, #31232	; 0x7a00
   12b18:	movt	r0, #1
   12b1c:	bl	152e8 <__assert_fail@plt+0x3d9c>
   12b20:	movw	r0, #31136	; 0x79a0
   12b24:	movw	r1, #31156	; 0x79b4
   12b28:	movt	r0, #1
   12b2c:	movt	r1, #1
   12b30:	movw	r2, #619	; 0x26b
   12b34:	ldr	r3, [pc, #12]	; 12b48 <__assert_fail@plt+0x15fc>
   12b38:	bl	1154c <__assert_fail@plt>
   12b3c:	movw	r1, #30948	; 0x78e4
   12b40:	movt	r1, #1
   12b44:	b	12ab0 <__assert_fail@plt+0x1564>
   12b48:	andeq	r7, r1, r0, ror #15
   12b4c:	ldr	ip, [r0, #8]
   12b50:	push	{r4, r5, r6, lr}
   12b54:	ands	r3, ip, #32768	; 0x8000
   12b58:	mov	r4, r0
   12b5c:	mov	r5, r1
   12b60:	mov	r6, r2
   12b64:	bne	12bac <__assert_fail@plt+0x1660>
   12b68:	ldr	r2, [r0]
   12b6c:	orr	ip, ip, #32768	; 0x8000
   12b70:	str	r3, [r0, #28]
   12b74:	str	ip, [r0, #8]
   12b78:	str	r3, [r0, #32]
   12b7c:	str	r3, [r0, #36]	; 0x24
   12b80:	str	r3, [r0, #12]
   12b84:	ldr	r2, [r2]
   12b88:	str	r3, [r0, #40]	; 0x28
   12b8c:	cmp	r2, #0
   12b90:	str	r3, [r0, #44]	; 0x2c
   12b94:	str	r3, [r0, #48]	; 0x30
   12b98:	str	r3, [r0, #52]	; 0x34
   12b9c:	blt	12d24 <__assert_fail@plt+0x17d8>
   12ba0:	mov	r3, #0
   12ba4:	str	r3, [r4, #24]
   12ba8:	pop	{r4, r5, r6, pc}
   12bac:	ldr	r3, [r0, #12]
   12bb0:	cmp	r3, #0
   12bb4:	beq	12ba0 <__assert_fail@plt+0x1654>
   12bb8:	cmp	r1, #0
   12bbc:	beq	12c68 <__assert_fail@plt+0x171c>
   12bc0:	ldr	r3, [r0, #16]
   12bc4:	cmn	r3, #6
   12bc8:	beq	12c4c <__assert_fail@plt+0x1700>
   12bcc:	cmn	r3, #5
   12bd0:	beq	12cc8 <__assert_fail@plt+0x177c>
   12bd4:	cmn	r3, #4
   12bd8:	beq	12ce4 <__assert_fail@plt+0x1798>
   12bdc:	cmn	r3, #3
   12be0:	beq	12d30 <__assert_fail@plt+0x17e4>
   12be4:	cmn	r3, #7
   12be8:	beq	12d4c <__assert_fail@plt+0x1800>
   12bec:	cmn	r3, #10
   12bf0:	beq	12d68 <__assert_fail@plt+0x181c>
   12bf4:	cmn	r3, #11
   12bf8:	mov	r2, #5
   12bfc:	movweq	r1, #30948	; 0x78e4
   12c00:	movwne	r1, #32072	; 0x7d48
   12c04:	moveq	r0, #0
   12c08:	movteq	r1, #1
   12c0c:	movne	r0, #0
   12c10:	movtne	r1, #1
   12c14:	bl	112d0 <dcgettext@plt>
   12c18:	mov	r3, r0
   12c1c:	movw	r0, #32088	; 0x7d58
   12c20:	mov	r1, r5
   12c24:	ldr	r2, [r6]
   12c28:	movt	r0, #1
   12c2c:	bl	15274 <__assert_fail@plt+0x3d28>
   12c30:	ldr	r3, [r4, #12]
   12c34:	cmp	r3, #1
   12c38:	moveq	r3, #0
   12c3c:	streq	r3, [r4, #12]
   12c40:	beq	12ba0 <__assert_fail@plt+0x1654>
   12c44:	mov	r0, #2
   12c48:	bl	113cc <exit@plt>
   12c4c:	movw	r1, #31952	; 0x7cd0
   12c50:	mov	r0, #0
   12c54:	movt	r1, #1
   12c58:	mov	r2, #5
   12c5c:	bl	112d0 <dcgettext@plt>
   12c60:	mov	r3, r0
   12c64:	b	12c1c <__assert_fail@plt+0x16d0>
   12c68:	ldr	r6, [r0, #40]	; 0x28
   12c6c:	movw	r2, #31908	; 0x7ca4
   12c70:	ldr	r3, [r0, #16]
   12c74:	movt	r2, #1
   12c78:	cmp	r6, #0
   12c7c:	mov	r0, r1
   12c80:	moveq	r6, r2
   12c84:	cmn	r3, #3
   12c88:	beq	12d84 <__assert_fail@plt+0x1838>
   12c8c:	cmn	r3, #6
   12c90:	beq	12da0 <__assert_fail@plt+0x1854>
   12c94:	cmn	r3, #7
   12c98:	beq	12dbc <__assert_fail@plt+0x1870>
   12c9c:	cmn	r3, #8
   12ca0:	beq	12dd8 <__assert_fail@plt+0x188c>
   12ca4:	cmn	r3, #11
   12ca8:	beq	12d00 <__assert_fail@plt+0x17b4>
   12cac:	mov	r2, #5
   12cb0:	movw	r1, #32260	; 0x7e04
   12cb4:	movt	r1, #1
   12cb8:	bl	112d0 <dcgettext@plt>
   12cbc:	mov	r1, r6
   12cc0:	bl	15274 <__assert_fail@plt+0x3d28>
   12cc4:	b	12c30 <__assert_fail@plt+0x16e4>
   12cc8:	movw	r1, #31976	; 0x7ce8
   12ccc:	mov	r0, #0
   12cd0:	movt	r1, #1
   12cd4:	mov	r2, #5
   12cd8:	bl	112d0 <dcgettext@plt>
   12cdc:	mov	r3, r0
   12ce0:	b	12c1c <__assert_fail@plt+0x16d0>
   12ce4:	movw	r1, #31988	; 0x7cf4
   12ce8:	mov	r0, #0
   12cec:	movt	r1, #1
   12cf0:	mov	r2, #5
   12cf4:	bl	112d0 <dcgettext@plt>
   12cf8:	mov	r3, r0
   12cfc:	b	12c1c <__assert_fail@plt+0x16d0>
   12d00:	mov	r2, #5
   12d04:	movw	r1, #32244	; 0x7df4
   12d08:	movt	r1, #1
   12d0c:	bl	112d0 <dcgettext@plt>
   12d10:	mov	r1, r0
   12d14:	movw	r0, #31444	; 0x7ad4
   12d18:	movt	r0, #1
   12d1c:	bl	15274 <__assert_fail@plt+0x3d28>
   12d20:	b	12c30 <__assert_fail@plt+0x16e4>
   12d24:	movw	r0, #31916	; 0x7cac
   12d28:	movt	r0, #1
   12d2c:	bl	15320 <__assert_fail@plt+0x3dd4>
   12d30:	movw	r1, #32008	; 0x7d08
   12d34:	mov	r0, #0
   12d38:	movt	r1, #1
   12d3c:	mov	r2, #5
   12d40:	bl	112d0 <dcgettext@plt>
   12d44:	mov	r3, r0
   12d48:	b	12c1c <__assert_fail@plt+0x16d0>
   12d4c:	movw	r1, #32028	; 0x7d1c
   12d50:	mov	r0, #0
   12d54:	movt	r1, #1
   12d58:	mov	r2, #5
   12d5c:	bl	112d0 <dcgettext@plt>
   12d60:	mov	r3, r0
   12d64:	b	12c1c <__assert_fail@plt+0x16d0>
   12d68:	movw	r1, #32044	; 0x7d2c
   12d6c:	mov	r0, #0
   12d70:	movt	r1, #1
   12d74:	mov	r2, #5
   12d78:	bl	112d0 <dcgettext@plt>
   12d7c:	mov	r3, r0
   12d80:	b	12c1c <__assert_fail@plt+0x16d0>
   12d84:	mov	r2, #5
   12d88:	movw	r1, #32100	; 0x7d64
   12d8c:	movt	r1, #1
   12d90:	bl	112d0 <dcgettext@plt>
   12d94:	mov	r1, r6
   12d98:	bl	15274 <__assert_fail@plt+0x3d28>
   12d9c:	b	12c30 <__assert_fail@plt+0x16e4>
   12da0:	mov	r2, #5
   12da4:	movw	r1, #32140	; 0x7d8c
   12da8:	movt	r1, #1
   12dac:	bl	112d0 <dcgettext@plt>
   12db0:	mov	r1, r6
   12db4:	bl	15274 <__assert_fail@plt+0x3d28>
   12db8:	b	12c30 <__assert_fail@plt+0x16e4>
   12dbc:	mov	r2, #5
   12dc0:	movw	r1, #32184	; 0x7db8
   12dc4:	movt	r1, #1
   12dc8:	bl	112d0 <dcgettext@plt>
   12dcc:	mov	r1, r6
   12dd0:	bl	15274 <__assert_fail@plt+0x3d28>
   12dd4:	b	12c30 <__assert_fail@plt+0x16e4>
   12dd8:	mov	r2, #5
   12ddc:	movw	r1, #32212	; 0x7dd4
   12de0:	movt	r1, #1
   12de4:	bl	112d0 <dcgettext@plt>
   12de8:	mov	r1, r6
   12dec:	bl	15274 <__assert_fail@plt+0x3d28>
   12df0:	b	12c30 <__assert_fail@plt+0x16e4>
   12df4:	tst	r2, #16
   12df8:	and	ip, r2, #7
   12dfc:	push	{r4, lr}
   12e00:	moveq	r2, #10
   12e04:	movne	r2, #0
   12e08:	cmp	ip, #3
   12e0c:	mov	r4, r1
   12e10:	str	ip, [r0]
   12e14:	beq	12e38 <__assert_fail@plt+0x18ec>
   12e18:	cmp	ip, #4
   12e1c:	beq	12e54 <__assert_fail@plt+0x1908>
   12e20:	cmp	ip, #1
   12e24:	strne	r3, [r1]
   12e28:	movne	r2, #1
   12e2c:	beq	12e38 <__assert_fail@plt+0x18ec>
   12e30:	mov	r0, r2
   12e34:	pop	{r4, pc}
   12e38:	mov	r0, r3
   12e3c:	mov	r1, #0
   12e40:	bl	1124c <strtol@plt>
   12e44:	mov	r2, #0
   12e48:	str	r0, [r4]
   12e4c:	mov	r0, r2
   12e50:	pop	{r4, pc}
   12e54:	mov	r0, r3
   12e58:	mov	r1, #0
   12e5c:	bl	113f0 <strtoul@plt>
   12e60:	mov	r2, #0
   12e64:	str	r0, [r4]
   12e68:	mov	r0, r2
   12e6c:	pop	{r4, pc}
   12e70:	movw	r3, #37348	; 0x91e4
   12e74:	movt	r3, #2
   12e78:	push	{r4, lr}
   12e7c:	mov	r4, r0
   12e80:	ldr	r3, [r3]
   12e84:	cmp	r3, #0
   12e88:	beq	12e98 <__assert_fail@plt+0x194c>
   12e8c:	blx	r3
   12e90:	cmp	r0, #0
   12e94:	popne	{r4, pc}
   12e98:	sub	r4, r4, #10
   12e9c:	cmp	r4, #31
   12ea0:	ldrls	pc, [pc, r4, lsl #2]
   12ea4:	b	12f7c <__assert_fail@plt+0x1a30>
   12ea8:	andeq	r2, r1, r8, lsr #30
   12eac:	andeq	r2, r1, r4, lsr pc
   12eb0:	andeq	r2, r1, ip, ror pc
   12eb4:	andeq	r2, r1, r0, asr #30
   12eb8:	andeq	r2, r1, ip, asr #30
   12ebc:	andeq	r2, r1, r8, asr pc
   12ec0:	andeq	r2, r1, r4, ror #30
   12ec4:	andeq	r2, r1, ip, ror pc
   12ec8:	andeq	r2, r1, ip, ror pc
   12ecc:	andeq	r2, r1, ip, ror pc
   12ed0:	andeq	r2, r1, ip, ror pc
   12ed4:	andeq	r2, r1, ip, ror pc
   12ed8:	andeq	r2, r1, ip, ror pc
   12edc:	andeq	r2, r1, ip, ror pc
   12ee0:	andeq	r2, r1, ip, ror pc
   12ee4:	andeq	r2, r1, ip, ror pc
   12ee8:	andeq	r2, r1, ip, ror pc
   12eec:	andeq	r2, r1, ip, ror pc
   12ef0:	andeq	r2, r1, ip, ror pc
   12ef4:	andeq	r2, r1, ip, ror pc
   12ef8:	andeq	r2, r1, ip, ror pc
   12efc:	andeq	r2, r1, ip, ror pc
   12f00:	andeq	r2, r1, ip, ror pc
   12f04:	andeq	r2, r1, ip, ror pc
   12f08:	andeq	r2, r1, ip, ror pc
   12f0c:	andeq	r2, r1, ip, ror pc
   12f10:	andeq	r2, r1, ip, ror pc
   12f14:	andeq	r2, r1, ip, ror pc
   12f18:	andeq	r2, r1, ip, ror pc
   12f1c:	andeq	r2, r1, ip, ror pc
   12f20:	andeq	r2, r1, r0, ror pc
   12f24:	andeq	r2, r1, r0, ror pc
   12f28:	movw	r0, #32284	; 0x7e1c
   12f2c:	movt	r0, #1
   12f30:	pop	{r4, pc}
   12f34:	movw	r0, #33140	; 0x8174
   12f38:	movt	r0, #1
   12f3c:	pop	{r4, pc}
   12f40:	movw	r0, #33136	; 0x8170
   12f44:	movt	r0, #1
   12f48:	pop	{r4, pc}
   12f4c:	movw	r0, #33084	; 0x813c
   12f50:	movt	r0, #1
   12f54:	pop	{r4, pc}
   12f58:	movw	r0, #32960	; 0x80c0
   12f5c:	movt	r0, #1
   12f60:	pop	{r4, pc}
   12f64:	movw	r0, #32364	; 0x7e6c
   12f68:	movt	r0, #1
   12f6c:	pop	{r4, pc}
   12f70:	movw	r0, #33880	; 0x8458
   12f74:	movt	r0, #1
   12f78:	pop	{r4, pc}
   12f7c:	mov	r0, #0
   12f80:	pop	{r4, pc}
   12f84:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f88:	movw	r5, #37316	; 0x91c4
   12f8c:	movt	r5, #2
   12f90:	mov	sl, r0
   12f94:	mov	r9, r1
   12f98:	bl	11558 <__assert_fail@plt+0xc>
   12f9c:	ldr	r1, [r5]
   12fa0:	mov	r0, #10
   12fa4:	bl	11300 <_IO_putc@plt>
   12fa8:	mov	r0, #41	; 0x29
   12fac:	bl	12e70 <__assert_fail@plt+0x1924>
   12fb0:	bl	11348 <puts@plt>
   12fb4:	ldr	r3, [sl, #12]
   12fb8:	cmp	r3, #0
   12fbc:	beq	131d8 <__assert_fail@plt+0x1c8c>
   12fc0:	ldr	r7, [sl]
   12fc4:	cmp	r7, #0
   12fc8:	beq	13084 <__assert_fail@plt+0x1b38>
   12fcc:	add	r4, sl, #16
   12fd0:	mov	r6, sl
   12fd4:	mov	r7, #0
   12fd8:	b	12ffc <__assert_fail@plt+0x1ab0>
   12fdc:	cmp	r8, r7
   12fe0:	ble	12fec <__assert_fail@plt+0x1aa0>
   12fe4:	cmp	r8, #34	; 0x22
   12fe8:	movle	r7, r8
   12fec:	mov	r6, r4
   12ff0:	ldr	r3, [r4], #16
   12ff4:	cmp	r3, #0
   12ff8:	beq	13080 <__assert_fail@plt+0x1b34>
   12ffc:	ldr	r0, [r6, #4]
   13000:	cmp	r0, #0
   13004:	beq	12fec <__assert_fail@plt+0x1aa0>
   13008:	ldr	r3, [r6, #12]
   1300c:	cmp	r3, #0
   13010:	beq	133b8 <__assert_fail@plt+0x1e6c>
   13014:	ldrb	fp, [r3]
   13018:	cmp	fp, #64	; 0x40
   1301c:	beq	12fec <__assert_fail@plt+0x1aa0>
   13020:	bl	113fc <strlen@plt>
   13024:	cmp	fp, #124	; 0x7c
   13028:	mov	r8, r0
   1302c:	bne	12fdc <__assert_fail@plt+0x1a90>
   13030:	bl	17448 <__assert_fail@plt+0x5efc>
   13034:	ldr	r3, [r6, #12]
   13038:	add	r2, r3, #1
   1303c:	ldrb	r3, [r3, #1]
   13040:	cmp	r3, #61	; 0x3d
   13044:	beq	13058 <__assert_fail@plt+0x1b0c>
   13048:	cmp	r3, #0
   1304c:	cmpne	r3, #124	; 0x7c
   13050:	add	r8, r8, #1
   13054:	beq	12fdc <__assert_fail@plt+0x1a90>
   13058:	cmp	r0, #0
   1305c:	beq	1306c <__assert_fail@plt+0x1b20>
   13060:	and	r3, r3, #192	; 0xc0
   13064:	cmp	r3, #128	; 0x80
   13068:	addne	r8, r8, #1
   1306c:	ldrb	r3, [r2, #1]!
   13070:	cmp	r3, #124	; 0x7c
   13074:	cmpne	r3, #0
   13078:	bne	13058 <__assert_fail@plt+0x1b0c>
   1307c:	b	12fdc <__assert_fail@plt+0x1a90>
   13080:	ldr	r3, [sl, #12]
   13084:	ldrb	r3, [r3]
   13088:	add	r7, r7, #10
   1308c:	cmp	r3, #64	; 0x40
   13090:	beq	130a0 <__assert_fail@plt+0x1b54>
   13094:	movw	r0, #33152	; 0x8180
   13098:	movt	r0, #1
   1309c:	bl	11348 <puts@plt>
   130a0:	ldr	r3, [sl]
   130a4:	cmp	r3, #0
   130a8:	addne	r8, sl, #16
   130ac:	beq	131c4 <__assert_fail@plt+0x1c78>
   130b0:	mov	r0, #0
   130b4:	ldr	r1, [sl, #12]
   130b8:	mov	r2, #5
   130bc:	bl	112d0 <dcgettext@plt>
   130c0:	subs	r6, r0, #0
   130c4:	beq	130d4 <__assert_fail@plt+0x1b88>
   130c8:	ldrb	r3, [r6]
   130cc:	cmp	r3, #64	; 0x40
   130d0:	beq	132dc <__assert_fail@plt+0x1d90>
   130d4:	ldr	r2, [sl]
   130d8:	cmp	r2, #255	; 0xff
   130dc:	bgt	132b0 <__assert_fail@plt+0x1d64>
   130e0:	movw	r1, #33164	; 0x818c
   130e4:	mov	r0, #1
   130e8:	movt	r1, #1
   130ec:	bl	1145c <__printf_chk@plt>
   130f0:	ldr	r3, [sl, #4]
   130f4:	cmp	r3, #0
   130f8:	movne	r4, #3
   130fc:	beq	133c4 <__assert_fail@plt+0x1e78>
   13100:	ldr	r2, [sl]
   13104:	movw	r1, #33176	; 0x8198
   13108:	mov	r0, #1
   1310c:	movt	r1, #1
   13110:	cmp	r2, #255	; 0xff
   13114:	movgt	r2, #32
   13118:	movle	r2, #44	; 0x2c
   1311c:	bl	1145c <__printf_chk@plt>
   13120:	cmp	r6, #0
   13124:	add	r4, r4, r0
   13128:	beq	13138 <__assert_fail@plt+0x1bec>
   1312c:	ldrb	r3, [r6]
   13130:	cmp	r3, #124	; 0x7c
   13134:	beq	1331c <__assert_fail@plt+0x1dd0>
   13138:	movw	r0, #33172	; 0x8194
   1313c:	mov	r2, #3
   13140:	mov	r1, #1
   13144:	movt	r0, #1
   13148:	ldr	r3, [r5]
   1314c:	add	r4, r4, r2
   13150:	bl	1130c <fwrite@plt>
   13154:	cmp	r7, r4
   13158:	ble	13178 <__assert_fail@plt+0x1c2c>
   1315c:	add	r4, r4, #1
   13160:	mov	r0, #32
   13164:	ldr	r1, [r5]
   13168:	bl	11300 <_IO_putc@plt>
   1316c:	cmp	r4, r7
   13170:	bne	1315c <__assert_fail@plt+0x1c10>
   13174:	mov	r4, r7
   13178:	cmp	r6, #0
   1317c:	beq	131a8 <__assert_fail@plt+0x1c5c>
   13180:	ldrb	r0, [r6]
   13184:	cmp	r0, #0
   13188:	beq	131a8 <__assert_fail@plt+0x1c5c>
   1318c:	cmp	r7, r4
   13190:	blt	13380 <__assert_fail@plt+0x1e34>
   13194:	cmp	r0, #10
   13198:	bne	1326c <__assert_fail@plt+0x1d20>
   1319c:	ldrb	r3, [r6, #1]
   131a0:	cmp	r3, #0
   131a4:	bne	13288 <__assert_fail@plt+0x1d3c>
   131a8:	mov	r0, #10
   131ac:	ldr	r1, [r5]
   131b0:	bl	11300 <_IO_putc@plt>
   131b4:	mov	sl, r8
   131b8:	ldr	r3, [r8], #16
   131bc:	cmp	r3, #0
   131c0:	bne	130b0 <__assert_fail@plt+0x1b64>
   131c4:	tst	r9, #32
   131c8:	beq	131d8 <__assert_fail@plt+0x1c8c>
   131cc:	movw	r0, #33184	; 0x81a0
   131d0:	movt	r0, #1
   131d4:	bl	11348 <puts@plt>
   131d8:	mov	r0, #19
   131dc:	bl	12e70 <__assert_fail@plt+0x1924>
   131e0:	subs	r4, r0, #0
   131e4:	beq	1325c <__assert_fail@plt+0x1d10>
   131e8:	ldr	r1, [r5]
   131ec:	mov	r0, #10
   131f0:	bl	11300 <_IO_putc@plt>
   131f4:	mov	r0, r4
   131f8:	movw	r1, #33240	; 0x81d8
   131fc:	movt	r1, #1
   13200:	bl	11204 <strstr@plt>
   13204:	movw	r3, #37316	; 0x91c4
   13208:	movt	r3, #2
   1320c:	subs	r6, r0, #0
   13210:	beq	133f0 <__assert_fail@plt+0x1ea4>
   13214:	cmp	r6, r4
   13218:	beq	13230 <__assert_fail@plt+0x1ce4>
   1321c:	mov	r0, r4
   13220:	ldr	r3, [r3]
   13224:	rsb	r1, r4, r6
   13228:	mov	r2, #1
   1322c:	bl	1130c <fwrite@plt>
   13230:	ldr	r3, [r5]
   13234:	movw	r0, #33248	; 0x81e0
   13238:	mov	r1, #1
   1323c:	movt	r0, #1
   13240:	mov	r2, #21
   13244:	movw	r4, #37316	; 0x91c4
   13248:	bl	1130c <fwrite@plt>
   1324c:	ldrb	r3, [r6, #7]
   13250:	movt	r4, #2
   13254:	cmp	r3, #0
   13258:	bne	133e0 <__assert_fail@plt+0x1e94>
   1325c:	ldr	r0, [r5]
   13260:	bl	11270 <fflush@plt>
   13264:	mov	r0, #0
   13268:	bl	113cc <exit@plt>
   1326c:	ldr	r1, [r5]
   13270:	bl	11300 <_IO_putc@plt>
   13274:	ldrb	r0, [r6, #1]
   13278:	add	r6, r6, #1
   1327c:	cmp	r0, #0
   13280:	bne	13194 <__assert_fail@plt+0x1c48>
   13284:	b	131a8 <__assert_fail@plt+0x1c5c>
   13288:	ldr	r1, [r5]
   1328c:	mov	r4, #0
   13290:	bl	11300 <_IO_putc@plt>
   13294:	add	r4, r4, #1
   13298:	mov	r0, #32
   1329c:	ldr	r1, [r5]
   132a0:	bl	11300 <_IO_putc@plt>
   132a4:	cmp	r4, r7
   132a8:	bne	13294 <__assert_fail@plt+0x1d48>
   132ac:	b	13274 <__assert_fail@plt+0x1d28>
   132b0:	movw	r0, #33172	; 0x8194
   132b4:	mov	r2, #3
   132b8:	mov	r1, #1
   132bc:	movt	r0, #1
   132c0:	ldr	r3, [r5]
   132c4:	mov	r4, r2
   132c8:	bl	1130c <fwrite@plt>
   132cc:	ldr	r3, [sl, #4]
   132d0:	cmp	r3, #0
   132d4:	bne	13100 <__assert_fail@plt+0x1bb4>
   132d8:	b	13154 <__assert_fail@plt+0x1c08>
   132dc:	ldrb	r0, [r6, #1]
   132e0:	cmp	r0, #0
   132e4:	beq	131b4 <__assert_fail@plt+0x1c68>
   132e8:	add	r6, r6, #1
   132ec:	cmp	r0, #10
   132f0:	bne	13300 <__assert_fail@plt+0x1db4>
   132f4:	ldrb	r3, [r6, #1]
   132f8:	cmp	r3, #0
   132fc:	beq	131a8 <__assert_fail@plt+0x1c5c>
   13300:	ldr	r1, [r5]
   13304:	add	r6, r6, #1
   13308:	bl	11300 <_IO_putc@plt>
   1330c:	ldrb	r0, [r6]
   13310:	cmp	r0, #0
   13314:	bne	132ec <__assert_fail@plt+0x1da0>
   13318:	b	131a8 <__assert_fail@plt+0x1c5c>
   1331c:	ldrb	r0, [r6, #1]
   13320:	add	sl, r6, #1
   13324:	cmp	r0, #61	; 0x3d
   13328:	beq	13350 <__assert_fail@plt+0x1e04>
   1332c:	mov	r0, #32
   13330:	ldr	r1, [r5]
   13334:	bl	11300 <_IO_putc@plt>
   13338:	ldrb	r0, [r6, #1]
   1333c:	add	r4, r4, #1
   13340:	cmp	r0, #124	; 0x7c
   13344:	cmpne	r0, #0
   13348:	moveq	r6, sl
   1334c:	beq	13374 <__assert_fail@plt+0x1e28>
   13350:	add	sl, r6, #2
   13354:	ldr	r1, [r5]
   13358:	mov	r6, sl
   1335c:	bl	11300 <_IO_putc@plt>
   13360:	ldrb	r0, [sl], #1
   13364:	add	r4, r4, #1
   13368:	cmp	r0, #124	; 0x7c
   1336c:	cmpne	r0, #0
   13370:	bne	13354 <__assert_fail@plt+0x1e08>
   13374:	cmp	r0, #0
   13378:	addne	r6, r6, #1
   1337c:	b	13138 <__assert_fail@plt+0x1bec>
   13380:	mov	r0, #10
   13384:	ldr	r1, [r5]
   13388:	bl	11300 <_IO_putc@plt>
   1338c:	mov	r4, #0
   13390:	add	r4, r4, #1
   13394:	mov	r0, #32
   13398:	ldr	r1, [r5]
   1339c:	bl	11300 <_IO_putc@plt>
   133a0:	cmp	r4, r7
   133a4:	bne	13390 <__assert_fail@plt+0x1e44>
   133a8:	ldrb	r0, [r6]
   133ac:	cmp	r0, #0
   133b0:	bne	13194 <__assert_fail@plt+0x1c48>
   133b4:	b	131a8 <__assert_fail@plt+0x1c5c>
   133b8:	bl	113fc <strlen@plt>
   133bc:	mov	r8, r0
   133c0:	b	12fdc <__assert_fail@plt+0x1a90>
   133c4:	cmp	r6, #0
   133c8:	beq	133d8 <__assert_fail@plt+0x1e8c>
   133cc:	ldrb	r3, [r6]
   133d0:	cmp	r3, #124	; 0x7c
   133d4:	beq	13400 <__assert_fail@plt+0x1eb4>
   133d8:	mov	r4, #3
   133dc:	b	1315c <__assert_fail@plt+0x1c10>
   133e0:	add	r0, r6, #7
   133e4:	ldr	r1, [r4]
   133e8:	bl	11510 <fputs@plt>
   133ec:	b	1325c <__assert_fail@plt+0x1d10>
   133f0:	mov	r0, r4
   133f4:	ldr	r1, [r3]
   133f8:	bl	11510 <fputs@plt>
   133fc:	b	1325c <__assert_fail@plt+0x1d10>
   13400:	mov	r0, #32
   13404:	ldr	r1, [r5]
   13408:	add	fp, r6, #1
   1340c:	bl	11300 <_IO_putc@plt>
   13410:	mov	r4, #4
   13414:	b	13424 <__assert_fail@plt+0x1ed8>
   13418:	ldr	r1, [r5]
   1341c:	add	r4, r4, #1
   13420:	bl	11300 <_IO_putc@plt>
   13424:	mov	r6, fp
   13428:	add	fp, fp, #1
   1342c:	ldrb	r0, [r6]
   13430:	cmp	r0, #124	; 0x7c
   13434:	cmpne	r0, #0
   13438:	bne	13418 <__assert_fail@plt+0x1ecc>
   1343c:	cmp	r0, #0
   13440:	movne	r6, fp
   13444:	b	132cc <__assert_fail@plt+0x1d80>
   13448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1344c:	sub	sp, sp, #20
   13450:	mov	r4, r0
   13454:	str	r1, [sp, #8]
   13458:	mov	r1, #0
   1345c:	mov	r2, r1
   13460:	bl	12b4c <__assert_fail@plt+0x1600>
   13464:	ldr	fp, [r4]
   13468:	ldr	r7, [r4, #28]
   1346c:	ldr	r8, [r4, #4]
   13470:	ldr	r5, [fp]
   13474:	mov	r1, fp
   13478:	adds	r3, r5, #0
   1347c:	mov	r2, r8
   13480:	ldr	r6, [r8]
   13484:	movne	r3, #1
   13488:	cmp	r7, #0
   1348c:	movne	r3, #0
   13490:	cmp	r3, #0
   13494:	beq	134b0 <__assert_fail@plt+0x1f64>
   13498:	ldr	r3, [r4, #8]
   1349c:	tst	r3, #16
   134a0:	bne	13548 <__assert_fail@plt+0x1ffc>
   134a4:	sub	r5, r5, #1
   134a8:	add	r6, r6, #4
   134ac:	mov	r7, #1
   134b0:	cmp	r5, #0
   134b4:	beq	13628 <__assert_fail@plt+0x20dc>
   134b8:	ldr	r0, [r4, #36]	; 0x24
   134bc:	ldr	r9, [r6]
   134c0:	cmp	r0, #0
   134c4:	str	r9, [r4, #40]	; 0x28
   134c8:	bne	13540 <__assert_fail@plt+0x1ff4>
   134cc:	mov	r2, #1
   134d0:	ldrb	r3, [r9]
   134d4:	cmp	r3, #45	; 0x2d
   134d8:	beq	13550 <__assert_fail@plt+0x2004>
   134dc:	ldr	r1, [r4, #32]
   134e0:	cmp	r1, #0
   134e4:	bne	13664 <__assert_fail@plt+0x2118>
   134e8:	ldr	r3, [r4, #8]
   134ec:	tst	r3, #4
   134f0:	bne	13634 <__assert_fail@plt+0x20e8>
   134f4:	cmp	r5, #0
   134f8:	str	r2, [r4, #36]	; 0x24
   134fc:	beq	13620 <__assert_fail@plt+0x20d4>
   13500:	ldr	r1, [r4, #36]	; 0x24
   13504:	ldr	r9, [r6]
   13508:	cmp	r1, #0
   1350c:	str	r9, [r4, #40]	; 0x28
   13510:	beq	134d0 <__assert_fail@plt+0x1f84>
   13514:	ands	r3, r3, #2
   13518:	streq	r3, [r4, #16]
   1351c:	moveq	r1, fp
   13520:	moveq	r2, r8
   13524:	bne	13634 <__assert_fail@plt+0x20e8>
   13528:	str	r5, [r1]
   1352c:	str	r6, [r2]
   13530:	ldr	r0, [r4, #16]
   13534:	str	r7, [r4, #28]
   13538:	add	sp, sp, #20
   1353c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13540:	ldr	r3, [r4, #8]
   13544:	b	13514 <__assert_fail@plt+0x1fc8>
   13548:	mov	r7, #0
   1354c:	b	134b8 <__assert_fail@plt+0x1f6c>
   13550:	ldrb	r3, [r9, #1]
   13554:	cmp	r3, #45	; 0x2d
   13558:	beq	135ec <__assert_fail@plt+0x20a0>
   1355c:	cmp	r3, #0
   13560:	beq	134dc <__assert_fail@plt+0x1f90>
   13564:	ldr	r1, [r4, #32]
   13568:	cmp	r1, #0
   1356c:	bne	13664 <__assert_fail@plt+0x2118>
   13570:	ldr	r2, [r4, #8]
   13574:	mov	r3, #1
   13578:	str	r3, [r4, #32]
   1357c:	tst	r2, #32
   13580:	beq	13660 <__assert_fail@plt+0x2114>
   13584:	ldr	r0, [sp, #8]
   13588:	ldr	sl, [r0]
   1358c:	cmp	sl, #0
   13590:	beq	13b00 <__assert_fail@plt+0x25b4>
   13594:	add	r3, r9, r3
   13598:	add	r9, r0, #16
   1359c:	mov	r2, r1
   135a0:	mov	r1, r0
   135a4:	ldr	r0, [r1, #4]
   135a8:	cmp	r0, #0
   135ac:	beq	135d0 <__assert_fail@plt+0x2084>
   135b0:	mov	r1, r3
   135b4:	str	r2, [sp, #4]
   135b8:	str	r3, [sp]
   135bc:	bl	11240 <strcmp@plt>
   135c0:	ldr	r2, [sp, #4]
   135c4:	ldr	r3, [sp]
   135c8:	cmp	r0, #0
   135cc:	beq	13954 <__assert_fail@plt+0x2408>
   135d0:	mov	r1, r9
   135d4:	ldr	r0, [r9], #16
   135d8:	add	r2, r2, #1
   135dc:	cmp	r0, #0
   135e0:	bne	135a4 <__assert_fail@plt+0x2058>
   135e4:	mov	r1, #1
   135e8:	b	13678 <__assert_fail@plt+0x212c>
   135ec:	str	r0, [r4, #32]
   135f0:	ldrb	sl, [r9, #2]
   135f4:	cmp	sl, #0
   135f8:	bne	1380c <__assert_fail@plt+0x22c0>
   135fc:	ldr	r3, [r4, #8]
   13600:	tst	r3, #8
   13604:	bne	1380c <__assert_fail@plt+0x22c0>
   13608:	sub	r5, r5, #1
   1360c:	str	r2, [r4, #36]	; 0x24
   13610:	cmp	r5, #0
   13614:	add	r6, r6, #4
   13618:	add	r7, r7, #1
   1361c:	bne	13500 <__assert_fail@plt+0x1fb4>
   13620:	mov	r1, fp
   13624:	mov	r2, r8
   13628:	mov	r5, #0
   1362c:	str	r5, [r4, #16]
   13630:	b	13528 <__assert_fail@plt+0x1fdc>
   13634:	mvn	r0, #0
   13638:	mov	r3, #2
   1363c:	str	r9, [r4, #24]
   13640:	sub	r5, r5, #1
   13644:	add	r6, r6, #4
   13648:	add	r7, r7, #1
   1364c:	mov	r1, fp
   13650:	mov	r2, r8
   13654:	str	r0, [r4, #16]
   13658:	str	r3, [r4, #20]
   1365c:	b	13528 <__assert_fail@plt+0x1fdc>
   13660:	mov	r1, r3
   13664:	ldr	r3, [sp, #8]
   13668:	ldr	sl, [r3]
   1366c:	add	r3, r9, r1
   13670:	cmp	sl, #0
   13674:	beq	13af4 <__assert_fail@plt+0x25a8>
   13678:	ldrb	r0, [r3]
   1367c:	ldr	r2, [sp, #8]
   13680:	cmp	sl, r0
   13684:	beq	137ac <__assert_fail@plt+0x2260>
   13688:	add	r9, r2, #16
   1368c:	b	1369c <__assert_fail@plt+0x2150>
   13690:	cmp	sl, r0
   13694:	add	r9, r2, #16
   13698:	beq	13718 <__assert_fail@plt+0x21cc>
   1369c:	ldr	sl, [r9]
   136a0:	mov	r2, r9
   136a4:	cmp	sl, #0
   136a8:	bne	13690 <__assert_fail@plt+0x2144>
   136ac:	mov	r9, #0
   136b0:	cmp	r0, #104	; 0x68
   136b4:	cmpne	r0, #63	; 0x3f
   136b8:	beq	13b98 <__assert_fail@plt+0x264c>
   136bc:	ldr	r2, [r2, #8]
   136c0:	add	r1, r1, #1
   136c4:	str	r3, [r4, #24]
   136c8:	tst	r2, #128	; 0x80
   136cc:	str	r1, [r4, #32]
   136d0:	mvneq	r2, #1
   136d4:	mvnne	r2, #6
   136d8:	str	r2, [r4, #16]
   136dc:	ldrb	r3, [r3, #1]
   136e0:	cmp	r3, #0
   136e4:	beq	136f8 <__assert_fail@plt+0x21ac>
   136e8:	cmp	r9, #0
   136ec:	moveq	r1, fp
   136f0:	moveq	r2, r8
   136f4:	beq	13528 <__assert_fail@plt+0x1fdc>
   136f8:	mov	r3, #0
   136fc:	sub	r5, r5, #1
   13700:	add	r6, r6, #4
   13704:	add	r7, r7, #1
   13708:	mov	r1, fp
   1370c:	mov	r2, r8
   13710:	str	r3, [r4, #32]
   13714:	b	13528 <__assert_fail@plt+0x1fdc>
   13718:	mov	r9, #0
   1371c:	ldr	r2, [r2, #8]
   13720:	str	sl, [r4, #16]
   13724:	ands	r0, r2, #7
   13728:	beq	1379c <__assert_fail@plt+0x2250>
   1372c:	ldrb	r1, [r3, #1]
   13730:	cmp	r1, #0
   13734:	beq	1375c <__assert_fail@plt+0x2210>
   13738:	cmp	r9, #0
   1373c:	bne	1375c <__assert_fail@plt+0x2210>
   13740:	add	r3, r3, #1
   13744:	add	r0, r4, #20
   13748:	add	r1, r4, #24
   1374c:	bl	12df4 <__assert_fail@plt+0x18a8>
   13750:	ldr	fp, [r4]
   13754:	ldr	r8, [r4, #4]
   13758:	b	136f8 <__assert_fail@plt+0x21ac>
   1375c:	ldr	r3, [r6, #4]
   13760:	cmp	r3, #0
   13764:	beq	137c0 <__assert_fail@plt+0x2274>
   13768:	ldrb	r1, [r3]
   1376c:	cmp	r1, #45	; 0x2d
   13770:	bne	137e0 <__assert_fail@plt+0x2294>
   13774:	ldrb	r1, [r3, #1]
   13778:	cmp	r1, #0
   1377c:	beq	137e0 <__assert_fail@plt+0x2294>
   13780:	tst	r2, #8
   13784:	beq	137e0 <__assert_fail@plt+0x2294>
   13788:	mov	r2, #0
   1378c:	movw	r3, #33888	; 0x8460
   13790:	str	r2, [r4, #20]
   13794:	movt	r3, #1
   13798:	b	136dc <__assert_fail@plt+0x2190>
   1379c:	add	r1, r1, #1
   137a0:	str	r0, [r4, #20]
   137a4:	str	r1, [r4, #32]
   137a8:	b	136dc <__assert_fail@plt+0x2190>
   137ac:	mov	r9, #0
   137b0:	cmp	sl, #0
   137b4:	bne	1371c <__assert_fail@plt+0x21d0>
   137b8:	ldrb	r0, [r3]
   137bc:	b	136b0 <__assert_fail@plt+0x2164>
   137c0:	tst	r2, #8
   137c4:	strne	r3, [r4, #20]
   137c8:	mvneq	r2, #2
   137cc:	movwne	r3, #33888	; 0x8460
   137d0:	movweq	r3, #33888	; 0x8460
   137d4:	streq	r2, [r4, #16]
   137d8:	movt	r3, #1
   137dc:	b	136dc <__assert_fail@plt+0x2190>
   137e0:	add	r0, r4, #20
   137e4:	add	r1, r4, #24
   137e8:	bl	12df4 <__assert_fail@plt+0x18a8>
   137ec:	sub	r5, r5, #1
   137f0:	movw	r3, #33888	; 0x8460
   137f4:	add	r6, r6, #4
   137f8:	add	r7, r7, #1
   137fc:	ldr	fp, [r4]
   13800:	movt	r3, #1
   13804:	ldr	r8, [r4, #4]
   13808:	b	136dc <__assert_fail@plt+0x2190>
   1380c:	add	r8, r9, #2
   13810:	mov	r1, #61	; 0x3d
   13814:	mov	r0, r8
   13818:	bl	11408 <strchr@plt>
   1381c:	cmp	r0, #0
   13820:	str	r0, [sp, #12]
   13824:	movne	r3, #0
   13828:	strbne	r3, [r0]
   1382c:	ldrbne	sl, [r9, #2]
   13830:	cmp	sl, #0
   13834:	beq	138d4 <__assert_fail@plt+0x2388>
   13838:	ldr	r0, [sp, #8]
   1383c:	ldr	r3, [r0]
   13840:	cmp	r3, #0
   13844:	beq	138d4 <__assert_fail@plt+0x2388>
   13848:	add	sl, r0, #16
   1384c:	mov	r2, r0
   13850:	mov	fp, #0
   13854:	mov	r9, sl
   13858:	ldr	r0, [r2, #4]
   1385c:	cmp	r0, #0
   13860:	beq	13874 <__assert_fail@plt+0x2328>
   13864:	mov	r1, r8
   13868:	bl	11240 <strcmp@plt>
   1386c:	cmp	r0, #0
   13870:	beq	13970 <__assert_fail@plt+0x2424>
   13874:	mov	r2, r9
   13878:	ldr	r1, [r9], #16
   1387c:	add	fp, fp, #1
   13880:	cmp	r1, #0
   13884:	bne	13858 <__assert_fail@plt+0x230c>
   13888:	mov	r0, r8
   1388c:	mov	r9, r1
   13890:	bl	113fc <strlen@plt>
   13894:	ldr	r2, [sp, #8]
   13898:	mov	fp, sl
   1389c:	mov	sl, r0
   138a0:	ldr	r0, [r2, #4]
   138a4:	cmp	r0, #0
   138a8:	beq	138c0 <__assert_fail@plt+0x2374>
   138ac:	mov	r1, r8
   138b0:	mov	r2, sl
   138b4:	bl	1151c <strncmp@plt>
   138b8:	cmp	r0, #0
   138bc:	beq	139e0 <__assert_fail@plt+0x2494>
   138c0:	mov	r2, fp
   138c4:	ldr	r1, [fp], #16
   138c8:	add	r9, r9, #1
   138cc:	cmp	r1, #0
   138d0:	bne	138a0 <__assert_fail@plt+0x2354>
   138d4:	mvn	r9, #0
   138d8:	ldr	r3, [sp, #12]
   138dc:	cmp	r3, #0
   138e0:	ldrne	r0, [sp, #12]
   138e4:	movne	r3, #61	; 0x3d
   138e8:	strbne	r3, [r0]
   138ec:	cmp	r9, #0
   138f0:	blt	13990 <__assert_fail@plt+0x2444>
   138f4:	ldr	r3, [sp, #8]
   138f8:	add	r2, r3, r9, lsl #4
   138fc:	ldr	r3, [r3, r9, lsl #4]
   13900:	ldr	r2, [r2, #8]
   13904:	tst	r2, #7
   13908:	str	r3, [r4, #16]
   1390c:	beq	13978 <__assert_fail@plt+0x242c>
   13910:	ldr	r3, [sp, #12]
   13914:	cmp	r3, #0
   13918:	beq	13b2c <__assert_fail@plt+0x25e0>
   1391c:	ldrb	r3, [r3, #1]
   13920:	cmp	r3, #0
   13924:	beq	13b14 <__assert_fail@plt+0x25c8>
   13928:	ldr	r0, [sp, #12]
   1392c:	adds	r3, r0, #1
   13930:	beq	13b14 <__assert_fail@plt+0x25c8>
   13934:	add	r0, r4, #20
   13938:	add	r1, r4, #24
   1393c:	bl	12df4 <__assert_fail@plt+0x18a8>
   13940:	sub	r5, r5, #1
   13944:	add	r6, r6, #4
   13948:	add	r7, r7, #1
   1394c:	ldm	r4, {r1, r2}
   13950:	b	13528 <__assert_fail@plt+0x1fdc>
   13954:	ldr	r1, [sp, #8]
   13958:	ldr	r0, [sp, #8]
   1395c:	ldr	sl, [r1, r2, lsl #4]
   13960:	mov	r1, #1
   13964:	add	r2, r0, r2, lsl #4
   13968:	mov	r9, r1
   1396c:	b	137b0 <__assert_fail@plt+0x2264>
   13970:	mov	r9, fp
   13974:	b	138d8 <__assert_fail@plt+0x238c>
   13978:	ldr	r3, [sp, #12]
   1397c:	cmp	r3, #0
   13980:	beq	13b68 <__assert_fail@plt+0x261c>
   13984:	mvn	r3, #5
   13988:	str	r3, [r4, #20]
   1398c:	b	13940 <__assert_fail@plt+0x23f4>
   13990:	movw	r0, #33272	; 0x81f8
   13994:	mov	r1, r8
   13998:	movt	r0, #1
   1399c:	bl	11240 <strcmp@plt>
   139a0:	cmp	r0, #0
   139a4:	beq	13b98 <__assert_fail@plt+0x264c>
   139a8:	movw	r0, #30972	; 0x78fc
   139ac:	mov	r1, r8
   139b0:	movt	r0, #1
   139b4:	bl	11240 <strcmp@plt>
   139b8:	cmp	r0, #0
   139bc:	bne	13a48 <__assert_fail@plt+0x24fc>
   139c0:	ldr	r3, [r4, #8]
   139c4:	ands	sl, r3, #64	; 0x40
   139c8:	beq	13b74 <__assert_fail@plt+0x2628>
   139cc:	cmn	r9, #2
   139d0:	bne	13b80 <__assert_fail@plt+0x2634>
   139d4:	mvn	r3, #7
   139d8:	str	r3, [r4, #16]
   139dc:	b	13940 <__assert_fail@plt+0x23f4>
   139e0:	ldr	r2, [sp, #8]
   139e4:	add	r3, r9, #1
   139e8:	ldr	r1, [r2, r3, lsl #4]
   139ec:	lsl	r3, r3, #4
   139f0:	add	r2, r2, r3
   139f4:	cmp	r1, #0
   139f8:	beq	138d8 <__assert_fail@plt+0x238c>
   139fc:	ldr	r0, [sp, #8]
   13a00:	sub	r3, r3, #16
   13a04:	add	fp, r0, r3
   13a08:	b	13a20 <__assert_fail@plt+0x24d4>
   13a0c:	add	r2, fp, #32
   13a10:	add	fp, fp, #16
   13a14:	ldr	r1, [fp, #16]
   13a18:	cmp	r1, #0
   13a1c:	beq	138d8 <__assert_fail@plt+0x238c>
   13a20:	ldr	r0, [r2, #4]
   13a24:	cmp	r0, #0
   13a28:	beq	13a0c <__assert_fail@plt+0x24c0>
   13a2c:	mov	r1, r8
   13a30:	mov	r2, sl
   13a34:	bl	1151c <strncmp@plt>
   13a38:	cmp	r0, #0
   13a3c:	bne	13a0c <__assert_fail@plt+0x24c0>
   13a40:	mvn	r9, #1
   13a44:	b	138d8 <__assert_fail@plt+0x238c>
   13a48:	movw	r0, #33280	; 0x8200
   13a4c:	mov	r1, r8
   13a50:	movt	r0, #1
   13a54:	bl	11240 <strcmp@plt>
   13a58:	subs	sl, r0, #0
   13a5c:	beq	13bb4 <__assert_fail@plt+0x2668>
   13a60:	movw	r0, #33292	; 0x820c
   13a64:	mov	r1, r8
   13a68:	movt	r0, #1
   13a6c:	bl	11240 <strcmp@plt>
   13a70:	cmp	r0, #0
   13a74:	bne	139cc <__assert_fail@plt+0x2480>
   13a78:	ldr	r1, [sp, #8]
   13a7c:	ldr	r3, [r1]
   13a80:	cmp	r3, #0
   13a84:	beq	13acc <__assert_fail@plt+0x2580>
   13a88:	ldr	r3, [sp, #8]
   13a8c:	add	r4, r3, #16
   13a90:	mov	r7, r3
   13a94:	ldr	r2, [r7, #4]
   13a98:	cmp	r2, #0
   13a9c:	beq	13abc <__assert_fail@plt+0x2570>
   13aa0:	ldr	r3, [r7, #8]
   13aa4:	tst	r3, #64	; 0x40
   13aa8:	bne	13abc <__assert_fail@plt+0x2570>
   13aac:	movw	r1, #33352	; 0x8248
   13ab0:	mov	r0, #1
   13ab4:	movt	r1, #1
   13ab8:	bl	1145c <__printf_chk@plt>
   13abc:	mov	r7, r4
   13ac0:	ldr	r3, [r4], #16
   13ac4:	cmp	r3, #0
   13ac8:	bne	13a94 <__assert_fail@plt+0x2548>
   13acc:	movw	r3, #37316	; 0x91c4
   13ad0:	movt	r3, #2
   13ad4:	movw	r0, #33308	; 0x821c
   13ad8:	mov	r1, #1
   13adc:	ldr	r3, [r3]
   13ae0:	movt	r0, #1
   13ae4:	mov	r2, #43	; 0x2b
   13ae8:	bl	1130c <fwrite@plt>
   13aec:	mov	r0, #0
   13af0:	bl	113cc <exit@plt>
   13af4:	ldrb	r0, [r9, r1]
   13af8:	ldr	r2, [sp, #8]
   13afc:	b	136ac <__assert_fail@plt+0x2160>
   13b00:	mov	r1, r3
   13b04:	ldrb	r0, [r9, #1]
   13b08:	add	r3, r9, #1
   13b0c:	ldr	r2, [sp, #8]
   13b10:	b	136ac <__assert_fail@plt+0x2160>
   13b14:	tst	r2, #8
   13b18:	movne	r3, #0
   13b1c:	mvneq	r3, #2
   13b20:	strne	r3, [r4, #20]
   13b24:	streq	r3, [r4, #16]
   13b28:	b	13940 <__assert_fail@plt+0x23f4>
   13b2c:	ldr	r3, [r6, #4]
   13b30:	cmp	r3, #0
   13b34:	beq	13b14 <__assert_fail@plt+0x25c8>
   13b38:	ldrb	r1, [r3]
   13b3c:	cmp	r1, #45	; 0x2d
   13b40:	beq	13b60 <__assert_fail@plt+0x2614>
   13b44:	add	r0, r4, #20
   13b48:	add	r1, r4, #24
   13b4c:	sub	r5, r5, #1
   13b50:	add	r6, r6, #4
   13b54:	add	r7, r7, #1
   13b58:	bl	12df4 <__assert_fail@plt+0x18a8>
   13b5c:	b	13940 <__assert_fail@plt+0x23f4>
   13b60:	tst	r2, #8
   13b64:	beq	13b44 <__assert_fail@plt+0x25f8>
   13b68:	ldr	r3, [sp, #12]
   13b6c:	str	r3, [r4, #20]
   13b70:	b	13940 <__assert_fail@plt+0x23f4>
   13b74:	bl	11558 <__assert_fail@plt+0xc>
   13b78:	mov	r0, sl
   13b7c:	bl	113cc <exit@plt>
   13b80:	cmn	r9, #1
   13b84:	bne	13ba4 <__assert_fail@plt+0x2658>
   13b88:	mvn	r3, #1
   13b8c:	str	r8, [r4, #24]
   13b90:	str	r3, [r4, #16]
   13b94:	b	13940 <__assert_fail@plt+0x23f4>
   13b98:	ldr	r0, [sp, #8]
   13b9c:	ldr	r1, [r4, #8]
   13ba0:	bl	12f84 <__assert_fail@plt+0x1a38>
   13ba4:	ldr	r1, [sp, #8]
   13ba8:	ldr	r3, [r1, r9, lsl #4]
   13bac:	str	r3, [r4, #16]
   13bb0:	b	13940 <__assert_fail@plt+0x23f4>
   13bb4:	mov	r0, #16
   13bb8:	bl	12e70 <__assert_fail@plt+0x1924>
   13bbc:	bl	11348 <puts@plt>
   13bc0:	mov	r0, sl
   13bc4:	bl	113cc <exit@plt>
   13bc8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bcc:	movw	ip, #37296	; 0x91b0
   13bd0:	sub	sp, sp, #252	; 0xfc
   13bd4:	movt	ip, #2
   13bd8:	subs	r5, r0, #0
   13bdc:	mov	fp, r2
   13be0:	str	r3, [sp, #8]
   13be4:	ldr	r3, [ip]
   13be8:	str	ip, [sp, #16]
   13bec:	ldr	sl, [sp, #288]	; 0x120
   13bf0:	str	r3, [sp, #244]	; 0xf4
   13bf4:	ldr	r0, [sp, #8]
   13bf8:	beq	14118 <__assert_fail@plt+0x2bcc>
   13bfc:	mov	r3, #0
   13c00:	str	r3, [sp, #12]
   13c04:	bl	12b4c <__assert_fail@plt+0x1600>
   13c08:	ldr	ip, [sp, #12]
   13c0c:	mov	r7, ip
   13c10:	mov	r4, ip
   13c14:	mov	r9, ip
   13c18:	str	ip, [sp, #24]
   13c1c:	str	ip, [sp, #20]
   13c20:	mov	r0, r5
   13c24:	bl	112b8 <_IO_getc@plt>
   13c28:	cmn	r0, #1
   13c2c:	mov	r6, r0
   13c30:	movne	r3, #0
   13c34:	moveq	r3, #1
   13c38:	cmn	r0, #1
   13c3c:	cmpne	r0, #10
   13c40:	bne	13c88 <__assert_fail@plt+0x273c>
   13c44:	cmn	r0, #1
   13c48:	ldrne	r2, [fp]
   13c4c:	addne	r2, r2, #1
   13c50:	strne	r2, [fp]
   13c54:	cmn	r9, #1
   13c58:	beq	13fb8 <__assert_fail@plt+0x2a6c>
   13c5c:	cmp	r9, #2
   13c60:	beq	13ce8 <__assert_fail@plt+0x279c>
   13c64:	cmp	r9, #3
   13c68:	beq	13fec <__assert_fail@plt+0x2aa0>
   13c6c:	cmp	r9, #4
   13c70:	beq	1401c <__assert_fail@plt+0x2ad0>
   13c74:	cmp	r3, #0
   13c78:	bne	1409c <__assert_fail@plt+0x2b50>
   13c7c:	mov	r4, r3
   13c80:	mov	r9, r3
   13c84:	b	13c20 <__assert_fail@plt+0x26d4>
   13c88:	cmn	r9, #1
   13c8c:	beq	13c20 <__assert_fail@plt+0x26d4>
   13c90:	cmp	r9, #0
   13c94:	bne	13cac <__assert_fail@plt+0x2760>
   13c98:	bics	r0, r6, #127	; 0x7f
   13c9c:	beq	13db4 <__assert_fail@plt+0x2868>
   13ca0:	cmp	r6, #35	; 0x23
   13ca4:	beq	13ec8 <__assert_fail@plt+0x297c>
   13ca8:	b	13ccc <__assert_fail@plt+0x2780>
   13cac:	cmp	r9, #1
   13cb0:	beq	13c20 <__assert_fail@plt+0x26d4>
   13cb4:	cmp	r9, #2
   13cb8:	beq	13dd0 <__assert_fail@plt+0x2884>
   13cbc:	cmp	r9, #3
   13cc0:	beq	13ed0 <__assert_fail@plt+0x2984>
   13cc4:	cmp	r9, #4
   13cc8:	beq	13f24 <__assert_fail@plt+0x29d8>
   13ccc:	cmp	r4, #98	; 0x62
   13cd0:	bls	13ee8 <__assert_fail@plt+0x299c>
   13cd4:	ldr	ip, [sp, #8]
   13cd8:	mvn	r3, #3
   13cdc:	mvn	r9, #0
   13ce0:	str	r3, [ip, #16]
   13ce4:	b	13c20 <__assert_fail@plt+0x26d4>
   13ce8:	ldr	r8, [sl]
   13cec:	add	ip, sp, #248	; 0xf8
   13cf0:	mov	r7, #0
   13cf4:	add	r4, ip, r4
   13cf8:	cmp	r8, r7
   13cfc:	strb	r7, [r4, #-204]	; 0xffffff34
   13d00:	beq	140f0 <__assert_fail@plt+0x2ba4>
   13d04:	add	r6, sl, #16
   13d08:	mov	r9, sl
   13d0c:	ldr	r0, [r9, #4]
   13d10:	cmp	r0, #0
   13d14:	beq	13d28 <__assert_fail@plt+0x27dc>
   13d18:	add	r1, sp, #44	; 0x2c
   13d1c:	bl	11240 <strcmp@plt>
   13d20:	cmp	r0, #0
   13d24:	beq	13d40 <__assert_fail@plt+0x27f4>
   13d28:	mov	r9, r6
   13d2c:	ldr	r8, [r6], #16
   13d30:	add	r7, r7, #1
   13d34:	cmp	r8, #0
   13d38:	bne	13d0c <__assert_fail@plt+0x27c0>
   13d3c:	b	140f8 <__assert_fail@plt+0x2bac>
   13d40:	ldr	r6, [r9, #8]
   13d44:	ldr	ip, [sp, #8]
   13d48:	ands	r3, r6, #64	; 0x40
   13d4c:	str	r8, [ip, #16]
   13d50:	bne	13da8 <__assert_fail@plt+0x285c>
   13d54:	cmp	r8, #0
   13d58:	bne	1423c <__assert_fail@plt+0x2cf0>
   13d5c:	movw	r1, #33360	; 0x8250
   13d60:	add	r0, sp, #44	; 0x2c
   13d64:	movt	r1, #1
   13d68:	bl	11240 <strcmp@plt>
   13d6c:	cmp	r0, #0
   13d70:	beq	13da8 <__assert_fail@plt+0x285c>
   13d74:	ldr	ip, [sp, #8]
   13d78:	ldr	r8, [ip, #52]	; 0x34
   13d7c:	cmp	r8, #0
   13d80:	bne	13d94 <__assert_fail@plt+0x2848>
   13d84:	b	13f50 <__assert_fail@plt+0x2a04>
   13d88:	ldr	r8, [r8]
   13d8c:	cmp	r8, #0
   13d90:	beq	13f50 <__assert_fail@plt+0x2a04>
   13d94:	add	r0, r8, #4
   13d98:	add	r1, sp, #44	; 0x2c
   13d9c:	bl	11240 <strcmp@plt>
   13da0:	cmp	r0, #0
   13da4:	bne	13d88 <__assert_fail@plt+0x283c>
   13da8:	mov	r4, r0
   13dac:	mov	r9, r0
   13db0:	b	13c20 <__assert_fail@plt+0x26d4>
   13db4:	bl	113b4 <__ctype_b_loc@plt>
   13db8:	lsl	r3, r6, #1
   13dbc:	ldr	r2, [r0]
   13dc0:	ldrh	r3, [r2, r3]
   13dc4:	tst	r3, #8192	; 0x2000
   13dc8:	bne	13c20 <__assert_fail@plt+0x26d4>
   13dcc:	b	13ca0 <__assert_fail@plt+0x2754>
   13dd0:	bics	r8, r6, #127	; 0x7f
   13dd4:	bne	13ccc <__assert_fail@plt+0x2780>
   13dd8:	bl	113b4 <__ctype_b_loc@plt>
   13ddc:	lsl	r3, r6, #1
   13de0:	ldr	r2, [r0]
   13de4:	mov	r9, r0
   13de8:	ldrh	r3, [r2, r3]
   13dec:	tst	r3, #8192	; 0x2000
   13df0:	beq	13ccc <__assert_fail@plt+0x2780>
   13df4:	ldr	r7, [sl]
   13df8:	add	r1, sp, #248	; 0xf8
   13dfc:	add	r4, r1, r4
   13e00:	cmp	r7, #0
   13e04:	strb	r8, [r4, #-204]	; 0xffffff34
   13e08:	beq	143fc <__assert_fail@plt+0x2eb0>
   13e0c:	add	r6, sl, #16
   13e10:	mov	r4, r8
   13e14:	mov	r8, sl
   13e18:	ldr	r0, [r8, #4]
   13e1c:	cmp	r0, #0
   13e20:	beq	13e34 <__assert_fail@plt+0x28e8>
   13e24:	add	r1, sp, #44	; 0x2c
   13e28:	bl	11240 <strcmp@plt>
   13e2c:	cmp	r0, #0
   13e30:	beq	13fc4 <__assert_fail@plt+0x2a78>
   13e34:	mov	r8, r6
   13e38:	ldr	r7, [r6], #16
   13e3c:	add	r4, r4, #1
   13e40:	cmp	r7, #0
   13e44:	bne	13e18 <__assert_fail@plt+0x28cc>
   13e48:	ldr	r8, [r8, #8]
   13e4c:	mov	r3, #0
   13e50:	ldr	ip, [sp, #8]
   13e54:	tst	r8, #64	; 0x40
   13e58:	str	r3, [ip, #16]
   13e5c:	bne	13ec4 <__assert_fail@plt+0x2978>
   13e60:	movw	r1, #33384	; 0x8268
   13e64:	add	r0, sp, #44	; 0x2c
   13e68:	movt	r1, #1
   13e6c:	bl	11240 <strcmp@plt>
   13e70:	cmp	r0, #0
   13e74:	beq	14250 <__assert_fail@plt+0x2d04>
   13e78:	movw	r1, #33360	; 0x8250
   13e7c:	add	r0, sp, #44	; 0x2c
   13e80:	movt	r1, #1
   13e84:	bl	11240 <strcmp@plt>
   13e88:	cmp	r0, #0
   13e8c:	beq	14278 <__assert_fail@plt+0x2d2c>
   13e90:	ldr	ip, [sp, #8]
   13e94:	ldr	r6, [ip, #52]	; 0x34
   13e98:	cmp	r6, #0
   13e9c:	bne	13eb0 <__assert_fail@plt+0x2964>
   13ea0:	b	1443c <__assert_fail@plt+0x2ef0>
   13ea4:	ldr	r6, [r6]
   13ea8:	cmp	r6, #0
   13eac:	beq	1443c <__assert_fail@plt+0x2ef0>
   13eb0:	add	r0, r6, #4
   13eb4:	add	r1, sp, #44	; 0x2c
   13eb8:	bl	11240 <strcmp@plt>
   13ebc:	cmp	r0, #0
   13ec0:	bne	13ea4 <__assert_fail@plt+0x2958>
   13ec4:	mov	r7, r4
   13ec8:	mov	r9, #1
   13ecc:	b	13c20 <__assert_fail@plt+0x26d4>
   13ed0:	bics	r0, r6, #127	; 0x7f
   13ed4:	beq	13f00 <__assert_fail@plt+0x29b4>
   13ed8:	strb	r6, [sp, #44]	; 0x2c
   13edc:	mov	r4, #1
   13ee0:	mov	r9, #4
   13ee4:	b	13c20 <__assert_fail@plt+0x26d4>
   13ee8:	mov	r9, #2
   13eec:	add	r0, sp, #248	; 0xf8
   13ef0:	add	r3, r0, r4
   13ef4:	add	r4, r4, #1
   13ef8:	strb	r6, [r3, #-204]	; 0xffffff34
   13efc:	b	13c20 <__assert_fail@plt+0x26d4>
   13f00:	bl	113b4 <__ctype_b_loc@plt>
   13f04:	lsl	r3, r6, #1
   13f08:	ldr	r2, [r0]
   13f0c:	ldrh	r3, [r2, r3]
   13f10:	tst	r3, #8192	; 0x2000
   13f14:	strbeq	r6, [sp, #44]	; 0x2c
   13f18:	moveq	r4, #1
   13f1c:	moveq	r9, #4
   13f20:	b	13c20 <__assert_fail@plt+0x26d4>
   13f24:	ldr	ip, [sp, #20]
   13f28:	cmp	ip, #0
   13f2c:	beq	141e8 <__assert_fail@plt+0x2c9c>
   13f30:	ldr	r2, [sp, #24]
   13f34:	mov	r8, r4
   13f38:	sub	r3, r2, #1
   13f3c:	cmp	r4, r3
   13f40:	bcs	14128 <__assert_fail@plt+0x2bdc>
   13f44:	add	r4, r4, #1
   13f48:	strb	r6, [ip, r8]
   13f4c:	b	13c20 <__assert_fail@plt+0x26d4>
   13f50:	tst	r6, #128	; 0x80
   13f54:	mvneq	r8, #1
   13f58:	mvnne	r8, #6
   13f5c:	ldr	ip, [sp, #8]
   13f60:	str	r8, [ip, #16]
   13f64:	ldr	ip, [sp, #16]
   13f68:	mov	r0, r8
   13f6c:	ldr	r2, [sp, #244]	; 0xf4
   13f70:	ldr	r3, [ip]
   13f74:	cmp	r2, r3
   13f78:	bne	144a8 <__assert_fail@plt+0x2f5c>
   13f7c:	add	sp, sp, #252	; 0xfc
   13f80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f84:	str	r1, [sp, #20]
   13f88:	ldr	ip, [sp, #20]
   13f8c:	mov	r3, #0
   13f90:	add	r4, ip, #1
   13f94:	strb	r3, [ip]
   13f98:	mov	r0, r4
   13f9c:	bl	15c70 <__assert_fail@plt+0x4724>
   13fa0:	cmp	r4, #0
   13fa4:	beq	14080 <__assert_fail@plt+0x2b34>
   13fa8:	ldr	ip, [sp, #20]
   13fac:	ldrb	r3, [ip, #1]
   13fb0:	cmp	r3, #0
   13fb4:	beq	14080 <__assert_fail@plt+0x2b34>
   13fb8:	ldr	ip, [sp, #8]
   13fbc:	ldr	r8, [ip, #16]
   13fc0:	b	13f64 <__assert_fail@plt+0x2a18>
   13fc4:	ldr	r8, [r8, #8]
   13fc8:	ldr	ip, [sp, #8]
   13fcc:	tst	r8, #64	; 0x40
   13fd0:	str	r7, [ip, #16]
   13fd4:	bne	13ec4 <__assert_fail@plt+0x2978>
   13fd8:	cmp	r7, #0
   13fdc:	beq	13e60 <__assert_fail@plt+0x2914>
   13fe0:	mov	r7, r4
   13fe4:	mov	r9, #3
   13fe8:	b	13c20 <__assert_fail@plt+0x26d4>
   13fec:	ldr	r3, [sp, #12]
   13ff0:	cmp	r3, #0
   13ff4:	bne	14160 <__assert_fail@plt+0x2c14>
   13ff8:	add	r7, sl, r7, lsl #4
   13ffc:	ldr	r3, [r7, #8]
   14000:	tst	r3, #7
   14004:	bne	14158 <__assert_fail@plt+0x2c0c>
   14008:	ldr	ip, [sp, #8]
   1400c:	mov	r3, #0
   14010:	ldr	r8, [ip, #16]
   14014:	str	r3, [ip, #20]
   14018:	b	13f64 <__assert_fail@plt+0x2a18>
   1401c:	ldr	r3, [sp, #12]
   14020:	ldr	r5, [sp, #20]
   14024:	cmp	r3, #0
   14028:	beq	14170 <__assert_fail@plt+0x2c24>
   1402c:	cmp	r5, #0
   14030:	beq	1422c <__assert_fail@plt+0x2ce0>
   14034:	mov	r3, #0
   14038:	strb	r3, [r5, r4]
   1403c:	ldrb	r3, [r5]
   14040:	cmp	r3, #0
   14044:	beq	14080 <__assert_fail@plt+0x2b34>
   14048:	cmp	r3, #32
   1404c:	beq	13f88 <__assert_fail@plt+0x2a3c>
   14050:	cmp	r3, #9
   14054:	beq	13f88 <__assert_fail@plt+0x2a3c>
   14058:	add	r2, r5, #1
   1405c:	b	14070 <__assert_fail@plt+0x2b24>
   14060:	cmp	r3, #32
   14064:	beq	13f84 <__assert_fail@plt+0x2a38>
   14068:	cmp	r3, #9
   1406c:	beq	13f84 <__assert_fail@plt+0x2a38>
   14070:	mov	r1, r2
   14074:	ldrb	r3, [r2], #1
   14078:	cmp	r3, #0
   1407c:	bne	14060 <__assert_fail@plt+0x2b14>
   14080:	mov	r0, r5
   14084:	bl	112ac <gcry_free@plt>
   14088:	ldr	ip, [sp, #8]
   1408c:	mvn	r3, #9
   14090:	mov	r8, r3
   14094:	str	r3, [ip, #16]
   14098:	b	13f64 <__assert_fail@plt+0x2a18>
   1409c:	ldr	ip, [sp, #8]
   140a0:	ldr	r0, [ip, #52]	; 0x34
   140a4:	cmp	r0, #0
   140a8:	bne	140b4 <__assert_fail@plt+0x2b68>
   140ac:	b	140c4 <__assert_fail@plt+0x2b78>
   140b0:	mov	r0, r4
   140b4:	ldr	r4, [r0]
   140b8:	bl	112ac <gcry_free@plt>
   140bc:	cmp	r4, #0
   140c0:	bne	140b0 <__assert_fail@plt+0x2b64>
   140c4:	ldr	ip, [sp, #8]
   140c8:	mov	r3, #0
   140cc:	mov	r0, r5
   140d0:	str	r3, [ip, #52]	; 0x34
   140d4:	bl	11288 <ferror@plt>
   140d8:	subs	r8, r0, #0
   140dc:	beq	13f5c <__assert_fail@plt+0x2a10>
   140e0:	ldr	ip, [sp, #8]
   140e4:	mvn	r8, #4
   140e8:	str	r8, [ip, #16]
   140ec:	b	13f64 <__assert_fail@plt+0x2a18>
   140f0:	mov	r7, r8
   140f4:	mov	r9, sl
   140f8:	ldr	r6, [r9, #8]
   140fc:	mov	r4, #0
   14100:	ldr	ip, [sp, #8]
   14104:	tst	r6, #64	; 0x40
   14108:	str	r4, [ip, #16]
   1410c:	beq	13d5c <__assert_fail@plt+0x2810>
   14110:	mov	r9, r4
   14114:	b	13c20 <__assert_fail@plt+0x26d4>
   14118:	mov	r1, sl
   1411c:	bl	13448 <__assert_fail@plt+0x1efc>
   14120:	mov	r8, r0
   14124:	b	13f64 <__assert_fail@plt+0x2a18>
   14128:	ldr	r3, [sp, #24]
   1412c:	ldr	r0, [sp, #20]
   14130:	add	r3, r3, #50	; 0x32
   14134:	str	r3, [sp, #24]
   14138:	mov	r1, r3
   1413c:	bl	114b0 <gcry_realloc@plt>
   14140:	cmp	r0, #0
   14144:	beq	1448c <__assert_fail@plt+0x2f40>
   14148:	add	r4, r4, #1
   1414c:	strb	r6, [r0, r8]
   14150:	str	r0, [sp, #20]
   14154:	b	13c20 <__assert_fail@plt+0x26d4>
   14158:	tst	r3, #8
   1415c:	bne	14008 <__assert_fail@plt+0x2abc>
   14160:	ldr	ip, [sp, #8]
   14164:	mvn	r8, #2
   14168:	str	r8, [ip, #16]
   1416c:	b	13f64 <__assert_fail@plt+0x2a18>
   14170:	add	r7, sl, r7, lsl #4
   14174:	ldr	r3, [r7, #8]
   14178:	tst	r3, #7
   1417c:	beq	1422c <__assert_fail@plt+0x2ce0>
   14180:	ldr	ip, [sp, #20]
   14184:	cmp	ip, #0
   14188:	beq	1445c <__assert_fail@plt+0x2f10>
   1418c:	ldr	r3, [sp, #12]
   14190:	ldr	ip, [sp, #20]
   14194:	strb	r3, [ip, r4]
   14198:	ldr	r0, [sp, #20]
   1419c:	bl	15c70 <__assert_fail@plt+0x4724>
   141a0:	ldr	ip, [sp, #20]
   141a4:	ldrb	r3, [ip]
   141a8:	cmp	r3, #34	; 0x22
   141ac:	movne	r4, ip
   141b0:	beq	14408 <__assert_fail@plt+0x2ebc>
   141b4:	ldr	ip, [sp, #8]
   141b8:	mov	r3, r4
   141bc:	ldr	r2, [r7, #8]
   141c0:	add	r0, ip, #20
   141c4:	add	r1, ip, #24
   141c8:	bl	12df4 <__assert_fail@plt+0x18a8>
   141cc:	cmp	r0, #0
   141d0:	bne	13fb8 <__assert_fail@plt+0x2a6c>
   141d4:	ldr	r0, [sp, #20]
   141d8:	bl	112ac <gcry_free@plt>
   141dc:	ldr	ip, [sp, #8]
   141e0:	ldr	r8, [ip, #16]
   141e4:	b	13f64 <__assert_fail@plt+0x2a18>
   141e8:	cmp	r4, #98	; 0x62
   141ec:	mov	r8, r4
   141f0:	bls	13eec <__assert_fail@plt+0x29a0>
   141f4:	mov	r0, #150	; 0x96
   141f8:	bl	11210 <gcry_malloc@plt>
   141fc:	cmp	r0, #0
   14200:	str	r0, [sp, #20]
   14204:	beq	1447c <__assert_fail@plt+0x2f30>
   14208:	mov	r2, r4
   1420c:	add	r1, sp, #44	; 0x2c
   14210:	bl	11294 <memcpy@plt>
   14214:	ldr	ip, [sp, #20]
   14218:	mov	r2, #150	; 0x96
   1421c:	add	r4, r4, #1
   14220:	str	r2, [sp, #24]
   14224:	strb	r6, [ip, r8]
   14228:	b	13c20 <__assert_fail@plt+0x26d4>
   1422c:	ldr	ip, [sp, #8]
   14230:	mvn	r8, #5
   14234:	str	r8, [ip, #16]
   14238:	b	13f64 <__assert_fail@plt+0x2a18>
   1423c:	ands	r2, r6, #7
   14240:	bne	14264 <__assert_fail@plt+0x2d18>
   14244:	ldr	ip, [sp, #8]
   14248:	str	r2, [ip, #20]
   1424c:	b	13f64 <__assert_fail@plt+0x2a18>
   14250:	mov	r3, #1
   14254:	mov	r7, r4
   14258:	str	r3, [sp, #12]
   1425c:	mov	r9, #3
   14260:	b	13c20 <__assert_fail@plt+0x26d4>
   14264:	tst	r6, #8
   14268:	beq	14160 <__assert_fail@plt+0x2c14>
   1426c:	ldr	ip, [sp, #8]
   14270:	str	r3, [ip, #20]
   14274:	b	13f64 <__assert_fail@plt+0x2a18>
   14278:	str	sl, [sp, #36]	; 0x24
   1427c:	mov	r8, r0
   14280:	mov	sl, r0
   14284:	str	r4, [sp, #28]
   14288:	str	fp, [sp, #32]
   1428c:	mov	r0, r5
   14290:	bl	112b8 <_IO_getc@plt>
   14294:	cmp	r0, #10
   14298:	mov	r4, r0
   1429c:	moveq	fp, #1
   142a0:	beq	142b4 <__assert_fail@plt+0x2d68>
   142a4:	cmn	r0, #1
   142a8:	movne	fp, #0
   142ac:	moveq	fp, #1
   142b0:	moveq	r4, #10
   142b4:	lsl	r6, r4, #1
   142b8:	bic	r7, r4, #127	; 0x7f
   142bc:	cmp	sl, #3
   142c0:	ldrls	pc, [pc, sl, lsl #2]
   142c4:	b	14390 <__assert_fail@plt+0x2e44>
   142c8:	andeq	r4, r1, r4, asr r3
   142cc:	andeq	r4, r1, ip, lsr r3
   142d0:	andeq	r4, r1, r4, lsr #6
   142d4:	ldrdeq	r4, [r1], -r8
   142d8:	ldr	ip, [sp, #8]
   142dc:	add	r0, sp, #248	; 0xf8
   142e0:	add	r3, r0, r8
   142e4:	mov	r1, #0
   142e8:	ldr	sl, [ip, #52]	; 0x34
   142ec:	strb	r1, [r3, #-104]	; 0xffffff98
   142f0:	cmp	sl, #0
   142f4:	bne	14308 <__assert_fail@plt+0x2dbc>
   142f8:	b	143c0 <__assert_fail@plt+0x2e74>
   142fc:	ldr	sl, [sl]
   14300:	cmp	sl, #0
   14304:	beq	143c0 <__assert_fail@plt+0x2e74>
   14308:	add	r0, sl, #4
   1430c:	add	r1, sp, #144	; 0x90
   14310:	bl	11240 <strcmp@plt>
   14314:	cmp	r0, #0
   14318:	bne	142fc <__assert_fail@plt+0x2db0>
   1431c:	mov	sl, r0
   14320:	b	142bc <__assert_fail@plt+0x2d70>
   14324:	ldr	r3, [r9]
   14328:	ldrh	r3, [r3, r6]
   1432c:	tst	r3, #8192	; 0x2000
   14330:	beq	14390 <__assert_fail@plt+0x2e44>
   14334:	mov	sl, #0
   14338:	b	142bc <__assert_fail@plt+0x2d70>
   1433c:	ldr	r3, [r9]
   14340:	ldrh	r3, [r3, r6]
   14344:	tst	r3, #8192	; 0x2000
   14348:	beq	14378 <__assert_fail@plt+0x2e2c>
   1434c:	mov	sl, #3
   14350:	b	142bc <__assert_fail@plt+0x2d70>
   14354:	cmp	r7, #0
   14358:	bne	1436c <__assert_fail@plt+0x2e20>
   1435c:	ldr	r3, [r9]
   14360:	ldrh	r3, [r3, r6]
   14364:	tst	r3, #8192	; 0x2000
   14368:	bne	14390 <__assert_fail@plt+0x2e44>
   1436c:	mov	sl, #1
   14370:	mov	r8, #0
   14374:	b	142bc <__assert_fail@plt+0x2d70>
   14378:	cmp	r8, #98	; 0x62
   1437c:	movhi	sl, #2
   14380:	addls	r0, sp, #248	; 0xf8
   14384:	addls	r2, r0, r8
   14388:	addls	r8, r8, #1
   1438c:	strbls	r4, [r2, #-104]	; 0xffffff98
   14390:	cmp	fp, #0
   14394:	beq	1428c <__assert_fail@plt+0x2d40>
   14398:	ldr	fp, [sp, #32]
   1439c:	ldr	r4, [sp, #28]
   143a0:	ldr	sl, [sp, #36]	; 0x24
   143a4:	ldr	r3, [fp]
   143a8:	mov	r7, r4
   143ac:	mov	r4, #0
   143b0:	add	r3, r3, #1
   143b4:	mov	r9, r4
   143b8:	str	r3, [fp]
   143bc:	b	13c20 <__assert_fail@plt+0x26d4>
   143c0:	add	r0, r8, #8
   143c4:	bl	11210 <gcry_malloc@plt>
   143c8:	subs	r3, r0, #0
   143cc:	beq	1447c <__assert_fail@plt+0x2f30>
   143d0:	add	r0, r3, #4
   143d4:	add	r1, sp, #144	; 0x90
   143d8:	str	r3, [sp, #4]
   143dc:	bl	11318 <strcpy@plt>
   143e0:	ldr	ip, [sp, #8]
   143e4:	mov	sl, #0
   143e8:	ldr	r3, [sp, #4]
   143ec:	ldr	r2, [ip, #52]	; 0x34
   143f0:	str	r2, [r3]
   143f4:	str	r3, [ip, #52]	; 0x34
   143f8:	b	142bc <__assert_fail@plt+0x2d70>
   143fc:	mov	r4, r7
   14400:	mov	r8, sl
   14404:	b	13e48 <__assert_fail@plt+0x28fc>
   14408:	ldr	ip, [sp, #20]
   1440c:	add	r4, ip, #1
   14410:	ldrb	r3, [ip, #1]
   14414:	cmp	r3, #0
   14418:	beq	141b4 <__assert_fail@plt+0x2c68>
   1441c:	mov	r0, r4
   14420:	bl	113fc <strlen@plt>
   14424:	sub	r0, r0, #1
   14428:	ldrb	r3, [r4, r0]
   1442c:	cmp	r3, #34	; 0x22
   14430:	moveq	r3, #0
   14434:	strbeq	r3, [r4, r0]
   14438:	b	141b4 <__assert_fail@plt+0x2c68>
   1443c:	ldr	ip, [sp, #8]
   14440:	tst	r8, #128	; 0x80
   14444:	mov	r7, r4
   14448:	mvn	r9, #0
   1444c:	mvnne	r3, #6
   14450:	mvneq	r3, #1
   14454:	str	r3, [ip, #16]
   14458:	b	13c20 <__assert_fail@plt+0x26d4>
   1445c:	add	r0, sp, #248	; 0xf8
   14460:	add	r4, r0, r4
   14464:	add	r0, sp, #44	; 0x2c
   14468:	strb	ip, [r4, #-204]	; 0xffffff34
   1446c:	bl	1133c <gcry_strdup@plt>
   14470:	cmp	r0, #0
   14474:	str	r0, [sp, #20]
   14478:	bne	14198 <__assert_fail@plt+0x2c4c>
   1447c:	ldr	ip, [sp, #8]
   14480:	mvn	r8, #10
   14484:	str	r8, [ip, #16]
   14488:	b	13f64 <__assert_fail@plt+0x2a18>
   1448c:	ldr	r0, [sp, #20]
   14490:	bl	112ac <gcry_free@plt>
   14494:	ldr	ip, [sp, #8]
   14498:	mvn	r3, #10
   1449c:	mov	r8, r3
   144a0:	str	r3, [ip, #16]
   144a4:	b	13f64 <__assert_fail@plt+0x2a18>
   144a8:	bl	112dc <__stack_chk_fail@plt>
   144ac:	cmp	r0, #0
   144b0:	push	{r4, r5, r6, r7, lr}
   144b4:	sub	sp, sp, #12
   144b8:	beq	144d4 <__assert_fail@plt+0x2f88>
   144bc:	cmp	r0, #1
   144c0:	beq	14544 <__assert_fail@plt+0x2ff8>
   144c4:	cmp	r0, #2
   144c8:	beq	14530 <__assert_fail@plt+0x2fe4>
   144cc:	add	sp, sp, #12
   144d0:	pop	{r4, r5, r6, r7, pc}
   144d4:	movw	r4, #37304	; 0x91b8
   144d8:	movt	r4, #2
   144dc:	mov	r0, #11
   144e0:	ldr	r5, [r4]
   144e4:	bl	12e70 <__assert_fail@plt+0x1924>
   144e8:	mov	r6, r0
   144ec:	mov	r0, #13
   144f0:	bl	12e70 <__assert_fail@plt+0x1924>
   144f4:	mov	r7, r0
   144f8:	mov	r0, #14
   144fc:	bl	12e70 <__assert_fail@plt+0x1924>
   14500:	str	r7, [sp]
   14504:	mov	r3, r6
   14508:	mov	r1, #1
   1450c:	movw	r2, #33392	; 0x8270
   14510:	movt	r2, #1
   14514:	str	r0, [sp, #4]
   14518:	mov	r0, r5
   1451c:	bl	11498 <__fprintf_chk@plt>
   14520:	ldr	r0, [r4]
   14524:	add	sp, sp, #12
   14528:	pop	{r4, r5, r6, r7, lr}
   1452c:	b	11270 <fflush@plt>
   14530:	mov	r0, #41	; 0x29
   14534:	bl	12e70 <__assert_fail@plt+0x1924>
   14538:	bl	11348 <puts@plt>
   1453c:	mov	r0, #0
   14540:	bl	113cc <exit@plt>
   14544:	mov	r0, #40	; 0x28
   14548:	movw	r4, #37304	; 0x91b8
   1454c:	bl	12e70 <__assert_fail@plt+0x1924>
   14550:	movt	r4, #2
   14554:	ldr	r1, [r4]
   14558:	mov	r5, r0
   1455c:	bl	11510 <fputs@plt>
   14560:	ldrb	r3, [r5]
   14564:	cmp	r3, #0
   14568:	beq	1458c <__assert_fail@plt+0x3040>
   1456c:	mov	r0, r5
   14570:	bl	113fc <strlen@plt>
   14574:	ldrb	r3, [r5, r0]
   14578:	cmp	r3, #10
   1457c:	beq	1458c <__assert_fail@plt+0x3040>
   14580:	ldr	r1, [r4]
   14584:	mov	r0, #10
   14588:	bl	11300 <_IO_putc@plt>
   1458c:	mov	r0, #2
   14590:	bl	113cc <exit@plt>
   14594:	movw	r3, #37348	; 0x91e4
   14598:	movt	r3, #2
   1459c:	str	r0, [r3]
   145a0:	bx	lr
   145a4:	push	{r4, lr}
   145a8:	mov	r4, r0
   145ac:	ldr	r0, [r0]
   145b0:	cmp	r0, #2
   145b4:	cmnne	r0, #1
   145b8:	beq	145c0 <__assert_fail@plt+0x3074>
   145bc:	bl	11534 <close@plt>
   145c0:	mov	r0, r4
   145c4:	bl	112ac <gcry_free@plt>
   145c8:	movw	r3, #37288	; 0x91a8
   145cc:	movt	r3, #2
   145d0:	mvn	r2, #0
   145d4:	mov	r0, #0
   145d8:	str	r2, [r3]
   145dc:	pop	{r4, pc}
   145e0:	push	{r4, r5, r6, r7, r8, r9, lr}
   145e4:	movw	r7, #37352	; 0x91e8
   145e8:	movt	r7, #2
   145ec:	mov	r5, r0
   145f0:	sub	sp, sp, #28
   145f4:	mov	r6, r1
   145f8:	ldr	r0, [r7]
   145fc:	cmp	r0, #0
   14600:	beq	14638 <__assert_fail@plt+0x30ec>
   14604:	movw	r2, #37304	; 0x91b8
   14608:	movt	r2, #2
   1460c:	ldr	r3, [r2]
   14610:	cmp	r0, r3
   14614:	beq	14630 <__assert_fail@plt+0x30e4>
   14618:	movw	r2, #37316	; 0x91c4
   1461c:	movt	r2, #2
   14620:	ldr	r3, [r2]
   14624:	cmp	r0, r3
   14628:	beq	14630 <__assert_fail@plt+0x30e4>
   1462c:	bl	114a4 <fclose@plt>
   14630:	mov	r3, #0
   14634:	str	r3, [r7]
   14638:	cmp	r5, #0
   1463c:	beq	1466c <__assert_fail@plt+0x3120>
   14640:	ldrb	r3, [r5]
   14644:	cmp	r3, #45	; 0x2d
   14648:	bne	14718 <__assert_fail@plt+0x31cc>
   1464c:	ldrb	r3, [r5, #1]
   14650:	cmp	r3, #0
   14654:	bne	14718 <__assert_fail@plt+0x31cc>
   14658:	movw	r3, #37304	; 0x91b8
   1465c:	movt	r3, #2
   14660:	ldr	r0, [r3]
   14664:	bl	11474 <fileno@plt>
   14668:	mov	r6, r0
   1466c:	mov	r8, #0
   14670:	mov	r0, #20
   14674:	movw	r4, #37288	; 0x91a8
   14678:	bl	111f8 <gcry_xmalloc@plt>
   1467c:	movw	r3, #17828	; 0x45a4
   14680:	movt	r3, #1
   14684:	str	r3, [sp, #20]
   14688:	add	r3, sp, #24
   1468c:	mov	lr, #0
   14690:	str	lr, [sp, #16]
   14694:	movt	r4, #2
   14698:	add	r2, sp, #8
   1469c:	str	lr, [sp, #8]
   146a0:	mov	ip, r0
   146a4:	ldmdb	r3, {r0, r1}
   146a8:	movw	r3, #19584	; 0x4c80
   146ac:	movt	r3, #1
   146b0:	str	r3, [sp, #12]
   146b4:	stm	sp, {r0, r1}
   146b8:	mov	r0, ip
   146bc:	str	r6, [r4]
   146c0:	movw	r1, #33504	; 0x82e0
   146c4:	ldm	r2, {r2, r3}
   146c8:	movt	r1, #1
   146cc:	str	r8, [ip, #8]
   146d0:	str	r6, [ip]
   146d4:	strb	lr, [ip, #16]
   146d8:	str	lr, [ip, #4]
   146dc:	str	lr, [ip, #12]
   146e0:	bl	11480 <fopencookie@plt>
   146e4:	subs	r4, r0, #0
   146e8:	beq	14890 <__assert_fail@plt+0x3344>
   146ec:	mov	r1, #0
   146f0:	mov	r0, r4
   146f4:	mov	r3, r1
   146f8:	mov	r2, #1
   146fc:	bl	1142c <setvbuf@plt>
   14700:	mov	r3, #0
   14704:	str	r4, [r7]
   14708:	str	r8, [r7, #4]
   1470c:	str	r3, [r7, #8]
   14710:	add	sp, sp, #28
   14714:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14718:	movw	r1, #33492	; 0x82d4
   1471c:	mov	r0, r5
   14720:	movt	r1, #1
   14724:	mov	r2, #9
   14728:	bl	1151c <strncmp@plt>
   1472c:	subs	r4, r0, #0
   14730:	bne	14824 <__assert_fail@plt+0x32d8>
   14734:	ldrb	r3, [r5, #9]
   14738:	cmp	r3, #0
   1473c:	beq	14824 <__assert_fail@plt+0x32d8>
   14740:	adds	r5, r5, #9
   14744:	beq	148c8 <__assert_fail@plt+0x337c>
   14748:	mov	r0, r5
   1474c:	bl	113fc <strlen@plt>
   14750:	add	r0, r0, #20
   14754:	bl	111f8 <gcry_xmalloc@plt>
   14758:	mov	r1, r5
   1475c:	mov	r6, r0
   14760:	add	r0, r0, #16
   14764:	bl	11318 <strcpy@plt>
   14768:	mov	r2, #1
   1476c:	mvn	r3, #0
   14770:	str	r4, [r6, #4]
   14774:	str	r4, [r6, #12]
   14778:	mov	r8, r2
   1477c:	mov	r4, r3
   14780:	str	r2, [r6, #8]
   14784:	str	r3, [r6]
   14788:	add	r9, sp, #8
   1478c:	movw	r3, #37288	; 0x91a8
   14790:	movt	r3, #2
   14794:	mov	r1, #0
   14798:	mov	r2, #16
   1479c:	mov	r0, r9
   147a0:	str	r4, [r3]
   147a4:	bl	11438 <memset@plt>
   147a8:	add	r2, sp, #24
   147ac:	movw	r3, #17828	; 0x45a4
   147b0:	movt	r3, #1
   147b4:	str	r3, [sp, #20]
   147b8:	ldmdb	r2, {r0, r1}
   147bc:	movw	r3, #19584	; 0x4c80
   147c0:	movt	r3, #1
   147c4:	str	r3, [sp, #12]
   147c8:	ldm	r9, {r2, r3}
   147cc:	stm	sp, {r0, r1}
   147d0:	mov	r0, r6
   147d4:	movw	r1, #33504	; 0x82e0
   147d8:	movt	r1, #1
   147dc:	bl	11480 <fopencookie@plt>
   147e0:	subs	r4, r0, #0
   147e4:	bne	146ec <__assert_fail@plt+0x31a0>
   147e8:	bl	11414 <__errno_location@plt>
   147ec:	movw	r4, #37304	; 0x91b8
   147f0:	movt	r4, #2
   147f4:	ldr	r6, [r4]
   147f8:	ldr	r0, [r0]
   147fc:	bl	1136c <strerror@plt>
   14800:	movw	r2, #33412	; 0x8284
   14804:	mov	r3, r5
   14808:	mov	r1, #1
   1480c:	movt	r2, #1
   14810:	str	r0, [sp]
   14814:	mov	r0, r6
   14818:	bl	11498 <__fprintf_chk@plt>
   1481c:	ldr	r4, [r4]
   14820:	b	14700 <__assert_fail@plt+0x31b4>
   14824:	mov	r0, r5
   14828:	bl	113fc <strlen@plt>
   1482c:	add	r0, r0, #20
   14830:	bl	111f8 <gcry_xmalloc@plt>
   14834:	mov	r1, r5
   14838:	mov	r6, r0
   1483c:	add	r0, r0, #16
   14840:	bl	11318 <strcpy@plt>
   14844:	mov	r3, #0
   14848:	str	r3, [r6, #4]
   1484c:	str	r3, [r6, #12]
   14850:	str	r3, [r6, #8]
   14854:	b	14868 <__assert_fail@plt+0x331c>
   14858:	bl	11414 <__errno_location@plt>
   1485c:	ldr	r3, [r0]
   14860:	cmp	r3, #4
   14864:	bne	14888 <__assert_fail@plt+0x333c>
   14868:	mov	r0, r5
   1486c:	movw	r1, #1089	; 0x441
   14870:	movw	r2, #438	; 0x1b6
   14874:	bl	11324 <open64@plt>
   14878:	cmn	r0, #1
   1487c:	mov	r4, r0
   14880:	str	r0, [r6]
   14884:	beq	14858 <__assert_fail@plt+0x330c>
   14888:	mov	r8, #0
   1488c:	b	14788 <__assert_fail@plt+0x323c>
   14890:	bl	11414 <__errno_location@plt>
   14894:	movw	r4, #37304	; 0x91b8
   14898:	movt	r4, #2
   1489c:	ldr	r5, [r4]
   148a0:	ldr	r0, [r0]
   148a4:	bl	1136c <strerror@plt>
   148a8:	mov	r3, r6
   148ac:	movw	r2, #33448	; 0x82a8
   148b0:	mov	r1, #1
   148b4:	movt	r2, #1
   148b8:	str	r0, [sp]
   148bc:	mov	r0, r5
   148c0:	bl	11498 <__fprintf_chk@plt>
   148c4:	b	1481c <__assert_fail@plt+0x32d0>
   148c8:	mov	r8, #1
   148cc:	b	14670 <__assert_fail@plt+0x3124>
   148d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   148d4:	movw	r4, #37352	; 0x91e8
   148d8:	movt	r4, #2
   148dc:	movw	r7, #37296	; 0x91b0
   148e0:	movt	r7, #2
   148e4:	mov	r6, r0
   148e8:	ldr	r3, [r4]
   148ec:	sub	sp, sp, #36	; 0x24
   148f0:	ldr	r0, [r7]
   148f4:	mov	r5, r1
   148f8:	cmp	r3, #0
   148fc:	mov	r9, r2
   14900:	str	r0, [sp, #28]
   14904:	beq	14be8 <__assert_fail@plt+0x369c>
   14908:	ldr	r3, [r4, #8]
   1490c:	movw	r8, #37352	; 0x91e8
   14910:	movt	r8, #2
   14914:	cmp	r3, #0
   14918:	beq	14ac0 <__assert_fail@plt+0x3574>
   1491c:	cmp	r6, #1
   14920:	moveq	r3, #0
   14924:	streq	r3, [r8, #8]
   14928:	beq	14a68 <__assert_fail@plt+0x351c>
   1492c:	mov	r0, #10
   14930:	ldr	r1, [r8]
   14934:	bl	11300 <_IO_putc@plt>
   14938:	mov	r3, #0
   1493c:	str	r3, [r8, #8]
   14940:	ldr	r3, [r4, #12]
   14944:	movw	r8, #37352	; 0x91e8
   14948:	movt	r8, #2
   1494c:	cmp	r3, #0
   14950:	bne	14adc <__assert_fail@plt+0x3590>
   14954:	ldr	r3, [r4, #16]
   14958:	movw	r1, #37352	; 0x91e8
   1495c:	movt	r1, #2
   14960:	cmp	r3, #0
   14964:	bne	14974 <__assert_fail@plt+0x3428>
   14968:	ldr	r3, [r1, #4]
   1496c:	cmp	r3, #0
   14970:	beq	14980 <__assert_fail@plt+0x3434>
   14974:	ldr	r0, [pc, #768]	; 14c7c <__assert_fail@plt+0x3730>
   14978:	ldr	r1, [r4]
   1497c:	bl	11510 <fputs@plt>
   14980:	ldr	r2, [r4, #100]	; 0x64
   14984:	movw	r3, #37352	; 0x91e8
   14988:	movt	r3, #2
   1498c:	cmp	r2, #0
   14990:	beq	14acc <__assert_fail@plt+0x3580>
   14994:	ldr	r8, [r4, #104]	; 0x68
   14998:	movw	r3, #37352	; 0x91e8
   1499c:	movt	r3, #2
   149a0:	cmp	r8, #0
   149a4:	beq	14bc4 <__assert_fail@plt+0x3678>
   149a8:	ldr	sl, [r3]
   149ac:	bl	113c0 <getpid@plt>
   149b0:	mov	fp, r0
   149b4:	blx	r8
   149b8:	movw	r2, #33564	; 0x831c
   149bc:	mov	r3, fp
   149c0:	mov	r1, #1
   149c4:	movt	r2, #1
   149c8:	str	r0, [sp]
   149cc:	mov	r0, sl
   149d0:	bl	11498 <__fprintf_chk@plt>
   149d4:	ldr	r3, [r4, #12]
   149d8:	movw	r1, #37352	; 0x91e8
   149dc:	movt	r1, #2
   149e0:	cmp	r3, #0
   149e4:	beq	149f4 <__assert_fail@plt+0x34a8>
   149e8:	ldr	r3, [r1, #4]
   149ec:	cmp	r3, #0
   149f0:	beq	14a00 <__assert_fail@plt+0x34b4>
   149f4:	mov	r0, #58	; 0x3a
   149f8:	ldr	r1, [r4]
   149fc:	bl	11300 <_IO_putc@plt>
   14a00:	cmp	r5, #0
   14a04:	beq	14a18 <__assert_fail@plt+0x34cc>
   14a08:	ldrb	r3, [r5]
   14a0c:	cmp	r3, #8
   14a10:	addeq	r5, r5, #1
   14a14:	beq	14a24 <__assert_fail@plt+0x34d8>
   14a18:	mov	r0, #32
   14a1c:	ldr	r1, [r4]
   14a20:	bl	11300 <_IO_putc@plt>
   14a24:	cmp	r6, #7
   14a28:	ldrls	pc, [pc, r6, lsl #2]
   14a2c:	b	14a50 <__assert_fail@plt+0x3504>
   14a30:	andeq	r4, r1, r8, ror #20
   14a34:	andeq	r4, r1, r8, ror #20
   14a38:	andeq	r4, r1, r8, ror #20
   14a3c:	andeq	r4, r1, r8, ror #20
   14a40:	andeq	r4, r1, r8, ror #20
   14a44:	andeq	r4, r1, r0, ror fp
   14a48:	andeq	r4, r1, ip, lsl #23
   14a4c:	andeq	r4, r1, r8, lsr #23
   14a50:	movw	r2, #33616	; 0x8350
   14a54:	ldr	r0, [r4]
   14a58:	movt	r2, #1
   14a5c:	mov	r1, #1
   14a60:	mov	r3, r6
   14a64:	bl	11498 <__fprintf_chk@plt>
   14a68:	cmp	r5, #0
   14a6c:	beq	14a98 <__assert_fail@plt+0x354c>
   14a70:	mov	r3, r9
   14a74:	ldr	r0, [r4]
   14a78:	mov	r1, #1
   14a7c:	mov	r2, r5
   14a80:	bl	11378 <__vfprintf_chk@plt>
   14a84:	ldrb	r3, [r5]
   14a88:	movw	r8, #37352	; 0x91e8
   14a8c:	movt	r8, #2
   14a90:	cmp	r3, #0
   14a94:	bne	14b50 <__assert_fail@plt+0x3604>
   14a98:	cmp	r6, #5
   14a9c:	beq	14c24 <__assert_fail@plt+0x36d8>
   14aa0:	cmp	r6, #6
   14aa4:	beq	14c44 <__assert_fail@plt+0x36f8>
   14aa8:	ldr	r2, [sp, #28]
   14aac:	ldr	r3, [r7]
   14ab0:	cmp	r2, r3
   14ab4:	bne	14c40 <__assert_fail@plt+0x36f4>
   14ab8:	add	sp, sp, #36	; 0x24
   14abc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ac0:	cmp	r6, #1
   14ac4:	bne	14940 <__assert_fail@plt+0x33f4>
   14ac8:	b	14a68 <__assert_fail@plt+0x351c>
   14acc:	ldr	r3, [r3, #4]
   14ad0:	cmp	r3, #0
   14ad4:	beq	149d4 <__assert_fail@plt+0x3488>
   14ad8:	b	14994 <__assert_fail@plt+0x3448>
   14adc:	ldr	r0, [r8, #4]
   14ae0:	cmp	r0, #0
   14ae4:	bne	14954 <__assert_fail@plt+0x3408>
   14ae8:	bl	112a0 <time@plt>
   14aec:	add	r3, sp, #32
   14af0:	str	r0, [r3, #-8]!
   14af4:	mov	r0, r3
   14af8:	bl	11384 <localtime@plt>
   14afc:	movw	r2, #33532	; 0x82fc
   14b00:	movt	r2, #1
   14b04:	ldr	r1, [r0, #16]
   14b08:	mov	ip, r0
   14b0c:	ldr	r3, [r0, #20]
   14b10:	add	r1, r1, #1
   14b14:	str	r1, [sp]
   14b18:	ldr	lr, [r0, #12]
   14b1c:	add	r3, r3, #1888	; 0x760
   14b20:	ldr	r0, [r8]
   14b24:	add	r3, r3, #12
   14b28:	mov	r1, #1
   14b2c:	str	lr, [sp, #4]
   14b30:	ldr	lr, [ip, #8]
   14b34:	str	lr, [sp, #8]
   14b38:	ldr	lr, [ip, #4]
   14b3c:	str	lr, [sp, #12]
   14b40:	ldr	ip, [ip]
   14b44:	str	ip, [sp, #16]
   14b48:	bl	11498 <__fprintf_chk@plt>
   14b4c:	b	14954 <__assert_fail@plt+0x3408>
   14b50:	mov	r0, r5
   14b54:	bl	113fc <strlen@plt>
   14b58:	add	r0, r5, r0
   14b5c:	ldrb	r3, [r0, #-1]
   14b60:	cmp	r3, #10
   14b64:	movne	r3, #1
   14b68:	strne	r3, [r8, #8]
   14b6c:	b	14a98 <__assert_fail@plt+0x354c>
   14b70:	movw	r0, #33584	; 0x8330
   14b74:	mov	r1, #1
   14b78:	mov	r2, #7
   14b7c:	ldr	r3, [r4]
   14b80:	movt	r0, #1
   14b84:	bl	1130c <fwrite@plt>
   14b88:	b	14a68 <__assert_fail@plt+0x351c>
   14b8c:	movw	r0, #33592	; 0x8338
   14b90:	mov	r1, #1
   14b94:	mov	r2, #13
   14b98:	ldr	r3, [r4]
   14b9c:	movt	r0, #1
   14ba0:	bl	1130c <fwrite@plt>
   14ba4:	b	14a68 <__assert_fail@plt+0x351c>
   14ba8:	movw	r0, #33608	; 0x8348
   14bac:	mov	r1, #1
   14bb0:	mov	r2, #5
   14bb4:	ldr	r3, [r4]
   14bb8:	movt	r0, #1
   14bbc:	bl	1130c <fwrite@plt>
   14bc0:	b	14a68 <__assert_fail@plt+0x351c>
   14bc4:	ldr	r8, [r3]
   14bc8:	bl	113c0 <getpid@plt>
   14bcc:	movw	r2, #33576	; 0x8328
   14bd0:	mov	r1, #1
   14bd4:	movt	r2, #1
   14bd8:	mov	r3, r0
   14bdc:	mov	r0, r8
   14be0:	bl	11498 <__fprintf_chk@plt>
   14be4:	b	149d4 <__assert_fail@plt+0x3488>
   14be8:	movw	r0, #30700	; 0x77ec
   14bec:	mvn	r1, #0
   14bf0:	movt	r0, #1
   14bf4:	bl	145e0 <__assert_fail@plt+0x3094>
   14bf8:	ldr	r3, [r4]
   14bfc:	cmp	r3, #0
   14c00:	bne	14908 <__assert_fail@plt+0x33bc>
   14c04:	movw	r0, #33508	; 0x82e4
   14c08:	movw	r1, #33520	; 0x82f0
   14c0c:	movw	r3, #33404	; 0x827c
   14c10:	movt	r0, #1
   14c14:	movt	r1, #1
   14c18:	movw	r2, #451	; 0x1c3
   14c1c:	movt	r3, #1
   14c20:	bl	1154c <__assert_fail@plt>
   14c24:	ldr	r2, [r4, #8]
   14c28:	movw	r3, #37352	; 0x91e8
   14c2c:	movt	r3, #2
   14c30:	cmp	r2, #0
   14c34:	bne	14c5c <__assert_fail@plt+0x3710>
   14c38:	mov	r0, #2
   14c3c:	bl	113cc <exit@plt>
   14c40:	bl	112dc <__stack_chk_fail@plt>
   14c44:	ldr	r2, [r4, #8]
   14c48:	movw	r3, #37352	; 0x91e8
   14c4c:	movt	r3, #2
   14c50:	cmp	r2, #0
   14c54:	bne	14c6c <__assert_fail@plt+0x3720>
   14c58:	bl	11528 <abort@plt>
   14c5c:	ldr	r1, [r3]
   14c60:	mov	r0, #10
   14c64:	bl	11300 <_IO_putc@plt>
   14c68:	b	14c38 <__assert_fail@plt+0x36ec>
   14c6c:	ldr	r1, [r3]
   14c70:	mov	r0, #10
   14c74:	bl	11300 <_IO_putc@plt>
   14c78:	b	14c58 <__assert_fail@plt+0x370c>
   14c7c:	strdeq	r9, [r2], -ip
   14c80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14c84:	movw	r8, #37296	; 0x91b0
   14c88:	movt	r8, #2
   14c8c:	ldr	r3, [r0, #8]
   14c90:	mov	sl, r2
   14c94:	sub	sp, sp, #128	; 0x80
   14c98:	ldr	r2, [r8]
   14c9c:	cmp	r3, #0
   14ca0:	mov	r7, r0
   14ca4:	mov	r5, r1
   14ca8:	ldr	r6, [r0]
   14cac:	str	r2, [sp, #124]	; 0x7c
   14cb0:	bne	14d80 <__assert_fail@plt+0x3834>
   14cb4:	movw	r9, #37288	; 0x91a8
   14cb8:	cmn	r6, #1
   14cbc:	movt	r9, #2
   14cc0:	str	r6, [r9]
   14cc4:	bne	14e34 <__assert_fail@plt+0x38e8>
   14cc8:	movw	r3, #37352	; 0x91e8
   14ccc:	movt	r3, #2
   14cd0:	ldr	r3, [r3, #108]	; 0x6c
   14cd4:	cmp	r3, #0
   14cd8:	bne	14d3c <__assert_fail@plt+0x37f0>
   14cdc:	ldr	r3, [r7]
   14ce0:	cmn	r3, #1
   14ce4:	beq	14d3c <__assert_fail@plt+0x37f0>
   14ce8:	movw	r4, #37304	; 0x91b8
   14cec:	movt	r4, #2
   14cf0:	ldr	r0, [r4]
   14cf4:	bl	11474 <fileno@plt>
   14cf8:	bl	11504 <isatty@plt>
   14cfc:	cmp	r0, #0
   14d00:	beq	14d3c <__assert_fail@plt+0x37f0>
   14d04:	ldrb	r3, [r7, #16]
   14d08:	cmp	r3, #0
   14d0c:	beq	14e80 <__assert_fail@plt+0x3934>
   14d10:	bl	11414 <__errno_location@plt>
   14d14:	ldr	r4, [r4]
   14d18:	ldr	r0, [r0]
   14d1c:	bl	1136c <strerror@plt>
   14d20:	movw	r2, #33716	; 0x83b4
   14d24:	mov	r1, #1
   14d28:	movt	r2, #1
   14d2c:	add	r3, r7, #16
   14d30:	str	r0, [sp]
   14d34:	mov	r0, r4
   14d38:	bl	11498 <__fprintf_chk@plt>
   14d3c:	ldr	r3, [r7, #12]
   14d40:	cmp	r3, #0
   14d44:	beq	14d64 <__assert_fail@plt+0x3818>
   14d48:	ldr	r0, [r7]
   14d4c:	cmn	r0, #1
   14d50:	beq	14d64 <__assert_fail@plt+0x3818>
   14d54:	bl	11534 <close@plt>
   14d58:	mvn	r3, #0
   14d5c:	str	r3, [r7]
   14d60:	str	r3, [r9]
   14d64:	ldr	r2, [sp, #124]	; 0x7c
   14d68:	mov	r0, sl
   14d6c:	ldr	r3, [r8]
   14d70:	cmp	r2, r3
   14d74:	bne	14fe4 <__assert_fail@plt+0x3a98>
   14d78:	add	sp, sp, #128	; 0x80
   14d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14d80:	cmn	r6, #1
   14d84:	movwne	r9, #37288	; 0x91a8
   14d88:	movtne	r9, #2
   14d8c:	strne	r6, [r9]
   14d90:	bne	14e34 <__assert_fail@plt+0x38e8>
   14d94:	mov	r6, #0
   14d98:	mov	r0, #1
   14d9c:	str	r6, [r7, #12]
   14da0:	mov	r2, r6
   14da4:	mov	r1, r0
   14da8:	bl	114f8 <socket@plt>
   14dac:	cmn	r0, #1
   14db0:	mov	r4, r0
   14db4:	str	r0, [r7]
   14db8:	beq	14eb4 <__assert_fail@plt+0x3968>
   14dbc:	add	r9, r7, #16
   14dc0:	mov	r1, r6
   14dc4:	mov	r2, #110	; 0x6e
   14dc8:	add	r0, sp, #12
   14dcc:	bl	11438 <memset@plt>
   14dd0:	mov	r1, r9
   14dd4:	mov	r2, #107	; 0x6b
   14dd8:	add	r0, sp, #14
   14ddc:	mov	r6, #1
   14de0:	strh	r6, [sp, #12]
   14de4:	bl	11444 <strncpy@plt>
   14de8:	add	r0, sp, #14
   14dec:	bl	113fc <strlen@plt>
   14df0:	add	r1, sp, #12
   14df4:	add	r2, r0, #2
   14df8:	mov	r0, r4
   14dfc:	bl	11540 <connect@plt>
   14e00:	cmn	r0, #1
   14e04:	beq	14f18 <__assert_fail@plt+0x39cc>
   14e08:	ldr	r3, [r7]
   14e0c:	cmn	r3, #1
   14e10:	beq	14fe8 <__assert_fail@plt+0x3a9c>
   14e14:	movw	r9, #37288	; 0x91a8
   14e18:	movt	r9, #2
   14e1c:	mov	r6, r3
   14e20:	mov	r2, #0
   14e24:	str	r3, [r9]
   14e28:	mov	r3, #1
   14e2c:	str	r2, [r7, #4]
   14e30:	str	r3, [r7, #12]
   14e34:	cmp	sl, #0
   14e38:	beq	14d64 <__assert_fail@plt+0x3818>
   14e3c:	mov	r4, sl
   14e40:	b	14e4c <__assert_fail@plt+0x3900>
   14e44:	cmp	r4, #0
   14e48:	beq	14d64 <__assert_fail@plt+0x3818>
   14e4c:	mov	r1, r5
   14e50:	mov	r2, r4
   14e54:	mov	r0, r6
   14e58:	bl	11468 <write@plt>
   14e5c:	cmp	r0, #0
   14e60:	rsbge	r4, r0, r4
   14e64:	addge	r5, r5, r0
   14e68:	bge	14e44 <__assert_fail@plt+0x38f8>
   14e6c:	bl	11414 <__errno_location@plt>
   14e70:	ldr	r3, [r0]
   14e74:	cmp	r3, #4
   14e78:	bne	14cc8 <__assert_fail@plt+0x377c>
   14e7c:	b	14e44 <__assert_fail@plt+0x38f8>
   14e80:	bl	11414 <__errno_location@plt>
   14e84:	ldr	r4, [r4]
   14e88:	ldr	r5, [r7]
   14e8c:	ldr	r0, [r0]
   14e90:	bl	1136c <strerror@plt>
   14e94:	mov	r3, r5
   14e98:	movw	r2, #33744	; 0x83d0
   14e9c:	mov	r1, #1
   14ea0:	movt	r2, #1
   14ea4:	str	r0, [sp]
   14ea8:	mov	r0, r4
   14eac:	bl	11498 <__fprintf_chk@plt>
   14eb0:	b	14d3c <__assert_fail@plt+0x37f0>
   14eb4:	ldr	r3, [r7, #4]
   14eb8:	cmp	r3, r6
   14ebc:	beq	14efc <__assert_fail@plt+0x39b0>
   14ec0:	movw	r3, #37352	; 0x91e8
   14ec4:	movt	r3, #2
   14ec8:	ldr	r3, [r3, #108]	; 0x6c
   14ecc:	cmp	r3, #0
   14ed0:	bne	14f10 <__assert_fail@plt+0x39c4>
   14ed4:	ldr	r2, [r7, #4]
   14ed8:	cmp	r2, #0
   14edc:	moveq	r2, #1
   14ee0:	streq	r2, [r7, #4]
   14ee4:	mvn	r2, #0
   14ee8:	str	r2, [r7]
   14eec:	movw	r9, #37288	; 0x91a8
   14ef0:	movt	r9, #2
   14ef4:	str	r2, [r9]
   14ef8:	b	14cd4 <__assert_fail@plt+0x3788>
   14efc:	movw	r4, #37352	; 0x91e8
   14f00:	movt	r4, #2
   14f04:	ldr	r3, [r4, #108]	; 0x6c
   14f08:	cmp	r3, #0
   14f0c:	beq	14f50 <__assert_fail@plt+0x3a04>
   14f10:	ldr	r2, [r7]
   14f14:	b	14eec <__assert_fail@plt+0x39a0>
   14f18:	ldr	r3, [r7, #4]
   14f1c:	movw	r4, #37352	; 0x91e8
   14f20:	movt	r4, #2
   14f24:	cmp	r3, #0
   14f28:	bne	14f38 <__assert_fail@plt+0x39ec>
   14f2c:	ldr	r3, [r4, #108]	; 0x6c
   14f30:	cmp	r3, #0
   14f34:	beq	14f98 <__assert_fail@plt+0x3a4c>
   14f38:	ldr	r0, [r7]
   14f3c:	bl	11534 <close@plt>
   14f40:	mvn	r3, #0
   14f44:	str	r3, [r7]
   14f48:	ldr	r3, [r4, #108]	; 0x6c
   14f4c:	b	14ecc <__assert_fail@plt+0x3980>
   14f50:	movw	r4, #37304	; 0x91b8
   14f54:	movt	r4, #2
   14f58:	ldr	r0, [r4]
   14f5c:	bl	11474 <fileno@plt>
   14f60:	bl	11504 <isatty@plt>
   14f64:	cmp	r0, #0
   14f68:	beq	14e08 <__assert_fail@plt+0x38bc>
   14f6c:	bl	11414 <__errno_location@plt>
   14f70:	ldr	r4, [r4]
   14f74:	ldr	r0, [r0]
   14f78:	bl	1136c <strerror@plt>
   14f7c:	movw	r2, #33644	; 0x836c
   14f80:	mov	r1, #1
   14f84:	movt	r2, #1
   14f88:	mov	r3, r0
   14f8c:	mov	r0, r4
   14f90:	bl	11498 <__fprintf_chk@plt>
   14f94:	b	14e08 <__assert_fail@plt+0x38bc>
   14f98:	movw	r5, #37304	; 0x91b8
   14f9c:	movt	r5, #2
   14fa0:	ldr	r0, [r5]
   14fa4:	bl	11474 <fileno@plt>
   14fa8:	bl	11504 <isatty@plt>
   14fac:	cmp	r0, #0
   14fb0:	beq	14f38 <__assert_fail@plt+0x39ec>
   14fb4:	bl	11414 <__errno_location@plt>
   14fb8:	ldr	r5, [r5]
   14fbc:	ldr	r0, [r0]
   14fc0:	bl	1136c <strerror@plt>
   14fc4:	mov	r1, r6
   14fc8:	mov	r3, r9
   14fcc:	movw	r2, #33688	; 0x8398
   14fd0:	movt	r2, #1
   14fd4:	str	r0, [sp]
   14fd8:	mov	r0, r5
   14fdc:	bl	11498 <__fprintf_chk@plt>
   14fe0:	b	14f38 <__assert_fail@plt+0x39ec>
   14fe4:	bl	112dc <__stack_chk_fail@plt>
   14fe8:	movw	r4, #37352	; 0x91e8
   14fec:	movt	r4, #2
   14ff0:	b	14f48 <__assert_fail@plt+0x39fc>
   14ff4:	push	{r1, r2, r3}
   14ff8:	mov	r0, #6
   14ffc:	push	{r4, lr}
   15000:	movw	r4, #37296	; 0x91b0
   15004:	movt	r4, #2
   15008:	sub	sp, sp, #12
   1500c:	add	r3, sp, #24
   15010:	movw	r1, #33788	; 0x83fc
   15014:	ldr	ip, [r4]
   15018:	movt	r1, #1
   1501c:	mov	r2, r3
   15020:	str	r3, [sp]
   15024:	str	ip, [sp, #4]
   15028:	bl	148d0 <__assert_fail@plt+0x3384>
   1502c:	ldr	r2, [sp, #4]
   15030:	ldr	r3, [r4]
   15034:	cmp	r2, r3
   15038:	bne	1504c <__assert_fail@plt+0x3b00>
   1503c:	add	sp, sp, #12
   15040:	pop	{r4, lr}
   15044:	add	sp, sp, #12
   15048:	bx	lr
   1504c:	bl	112dc <__stack_chk_fail@plt>
   15050:	cmp	r0, #0
   15054:	movw	r3, #37352	; 0x91e8
   15058:	movt	r3, #2
   1505c:	movne	r2, #0
   15060:	ldr	r0, [r3, #112]	; 0x70
   15064:	strne	r2, [r3, #112]	; 0x70
   15068:	bx	lr
   1506c:	movw	r3, #37352	; 0x91e8
   15070:	movt	r3, #2
   15074:	ldr	r2, [r3, #112]	; 0x70
   15078:	add	r2, r2, #1
   1507c:	str	r2, [r3, #112]	; 0x70
   15080:	bx	lr
   15084:	movw	r3, #30700	; 0x77ec
   15088:	cmp	r0, #0
   1508c:	movt	r3, #1
   15090:	mvn	r1, #0
   15094:	moveq	r0, r3
   15098:	b	145e0 <__assert_fail@plt+0x3094>
   1509c:	mov	r1, r0
   150a0:	mov	r0, #0
   150a4:	b	145e0 <__assert_fail@plt+0x3094>
   150a8:	movw	r3, #37352	; 0x91e8
   150ac:	movt	r3, #2
   150b0:	str	r0, [r3, #104]	; 0x68
   150b4:	bx	lr
   150b8:	cmp	r0, #0
   150bc:	push	{r3, r4, r5, lr}
   150c0:	movw	r4, #37352	; 0x91e8
   150c4:	mov	r5, r1
   150c8:	movt	r4, #2
   150cc:	beq	150e8 <__assert_fail@plt+0x3b9c>
   150d0:	mov	r1, r0
   150d4:	mov	r2, #79	; 0x4f
   150d8:	add	r0, r4, #20
   150dc:	bl	11444 <strncpy@plt>
   150e0:	mov	r3, #0
   150e4:	strb	r3, [r4, #99]	; 0x63
   150e8:	and	r3, r5, #1
   150ec:	and	r2, r5, #2
   150f0:	str	r3, [r4, #16]
   150f4:	and	r3, r5, #4
   150f8:	str	r2, [r4, #12]
   150fc:	and	r5, r5, #256	; 0x100
   15100:	str	r3, [r4, #100]	; 0x64
   15104:	str	r5, [r4, #108]	; 0x6c
   15108:	pop	{r3, r4, r5, pc}
   1510c:	cmp	r0, #0
   15110:	beq	15164 <__assert_fail@plt+0x3c18>
   15114:	movw	r3, #37352	; 0x91e8
   15118:	movt	r3, #2
   1511c:	ldr	r2, [r3, #16]
   15120:	ldr	r1, [r3, #12]
   15124:	adds	r2, r2, #0
   15128:	movne	r2, #1
   1512c:	cmp	r1, #0
   15130:	str	r2, [r0]
   15134:	orrne	r2, r2, #2
   15138:	strne	r2, [r0]
   1513c:	ldr	r2, [r3, #100]	; 0x64
   15140:	ldr	r3, [r3, #108]	; 0x6c
   15144:	cmp	r2, #0
   15148:	ldrne	r2, [r0]
   1514c:	orrne	r2, r2, #4
   15150:	strne	r2, [r0]
   15154:	cmp	r3, #0
   15158:	ldrne	r3, [r0]
   1515c:	orrne	r3, r3, #256	; 0x100
   15160:	strne	r3, [r0]
   15164:	ldr	r0, [pc]	; 1516c <__assert_fail@plt+0x3c20>
   15168:	bx	lr
   1516c:	strdeq	r9, [r2], -ip
   15170:	movw	r3, #37352	; 0x91e8
   15174:	movt	r3, #2
   15178:	push	{r4, lr}
   1517c:	mov	r4, r0
   15180:	ldr	r0, [r3]
   15184:	cmp	r0, #0
   15188:	beq	151ac <__assert_fail@plt+0x3c60>
   1518c:	bl	11474 <fileno@plt>
   15190:	subs	r2, r0, r4
   15194:	rsbs	r3, r2, #0
   15198:	adcs	r3, r3, r2
   1519c:	cmn	r0, #1
   151a0:	moveq	r3, #0
   151a4:	cmp	r3, #0
   151a8:	bne	151d0 <__assert_fail@plt+0x3c84>
   151ac:	movw	r3, #37288	; 0x91a8
   151b0:	movt	r3, #2
   151b4:	ldr	r3, [r3]
   151b8:	cmn	r3, #1
   151bc:	beq	151c8 <__assert_fail@plt+0x3c7c>
   151c0:	cmp	r4, r3
   151c4:	beq	151d0 <__assert_fail@plt+0x3c84>
   151c8:	mov	r0, #0
   151cc:	pop	{r4, pc}
   151d0:	mov	r0, #1
   151d4:	pop	{r4, pc}
   151d8:	movw	r3, #37352	; 0x91e8
   151dc:	movt	r3, #2
   151e0:	ldr	r0, [r3]
   151e4:	cmp	r0, #0
   151e8:	movweq	r3, #37304	; 0x91b8
   151ec:	movteq	r3, #2
   151f0:	ldreq	r0, [r3]
   151f4:	b	11474 <fileno@plt>
   151f8:	movw	r3, #37352	; 0x91e8
   151fc:	movt	r3, #2
   15200:	ldr	r0, [r3]
   15204:	cmp	r0, #0
   15208:	movweq	r3, #37304	; 0x91b8
   1520c:	movteq	r3, #2
   15210:	ldreq	r0, [r3]
   15214:	bx	lr
   15218:	b	148d0 <__assert_fail@plt+0x3384>
   1521c:	push	{r0, r1, r2, r3}
   15220:	mov	r0, #2
   15224:	push	{r4, lr}
   15228:	movw	r4, #37296	; 0x91b0
   1522c:	movt	r4, #2
   15230:	sub	sp, sp, #8
   15234:	add	r3, sp, #20
   15238:	ldr	ip, [r4]
   1523c:	mov	r2, r3
   15240:	ldr	r1, [sp, #16]
   15244:	str	r3, [sp]
   15248:	str	ip, [sp, #4]
   1524c:	bl	148d0 <__assert_fail@plt+0x3384>
   15250:	ldr	r2, [sp, #4]
   15254:	ldr	r3, [r4]
   15258:	cmp	r2, r3
   1525c:	bne	15270 <__assert_fail@plt+0x3d24>
   15260:	add	sp, sp, #8
   15264:	pop	{r4, lr}
   15268:	add	sp, sp, #16
   1526c:	bx	lr
   15270:	bl	112dc <__stack_chk_fail@plt>
   15274:	push	{r0, r1, r2, r3}
   15278:	mov	r0, #4
   1527c:	push	{r4, lr}
   15280:	movw	r4, #37296	; 0x91b0
   15284:	movt	r4, #2
   15288:	sub	sp, sp, #8
   1528c:	add	r3, sp, #20
   15290:	ldr	ip, [r4]
   15294:	mov	r2, r3
   15298:	ldr	r1, [sp, #16]
   1529c:	str	r3, [sp]
   152a0:	str	ip, [sp, #4]
   152a4:	bl	148d0 <__assert_fail@plt+0x3384>
   152a8:	movw	r3, #37352	; 0x91e8
   152ac:	movt	r3, #2
   152b0:	movw	r1, #29999	; 0x752f
   152b4:	ldr	r2, [r3, #112]	; 0x70
   152b8:	cmp	r2, r1
   152bc:	addle	r2, r2, #1
   152c0:	strle	r2, [r3, #112]	; 0x70
   152c4:	ldr	r2, [sp, #4]
   152c8:	ldr	r3, [r4]
   152cc:	cmp	r2, r3
   152d0:	bne	152e4 <__assert_fail@plt+0x3d98>
   152d4:	add	sp, sp, #8
   152d8:	pop	{r4, lr}
   152dc:	add	sp, sp, #16
   152e0:	bx	lr
   152e4:	bl	112dc <__stack_chk_fail@plt>
   152e8:	push	{r0, r1, r2, r3}
   152ec:	movw	r3, #37296	; 0x91b0
   152f0:	movt	r3, #2
   152f4:	mov	r0, #5
   152f8:	push	{lr}		; (str lr, [sp, #-4]!)
   152fc:	sub	sp, sp, #12
   15300:	add	ip, sp, #20
   15304:	ldr	r3, [r3]
   15308:	ldr	r1, [sp, #16]
   1530c:	mov	r2, ip
   15310:	str	ip, [sp]
   15314:	str	r3, [sp, #4]
   15318:	bl	148d0 <__assert_fail@plt+0x3384>
   1531c:	bl	11528 <abort@plt>
   15320:	push	{r0, r1, r2, r3}
   15324:	movw	r3, #37296	; 0x91b0
   15328:	movt	r3, #2
   1532c:	mov	r0, #6
   15330:	push	{lr}		; (str lr, [sp, #-4]!)
   15334:	sub	sp, sp, #12
   15338:	add	ip, sp, #20
   1533c:	ldr	r3, [r3]
   15340:	ldr	r1, [sp, #16]
   15344:	mov	r2, ip
   15348:	str	ip, [sp]
   1534c:	str	r3, [sp, #4]
   15350:	bl	148d0 <__assert_fail@plt+0x3384>
   15354:	bl	11528 <abort@plt>
   15358:	push	{r0, r1, r2, r3}
   1535c:	mov	r0, #7
   15360:	push	{r4, lr}
   15364:	movw	r4, #37296	; 0x91b0
   15368:	movt	r4, #2
   1536c:	sub	sp, sp, #8
   15370:	add	r3, sp, #20
   15374:	ldr	ip, [r4]
   15378:	mov	r2, r3
   1537c:	ldr	r1, [sp, #16]
   15380:	str	r3, [sp]
   15384:	str	ip, [sp, #4]
   15388:	bl	148d0 <__assert_fail@plt+0x3384>
   1538c:	ldr	r2, [sp, #4]
   15390:	ldr	r3, [r4]
   15394:	cmp	r2, r3
   15398:	bne	153ac <__assert_fail@plt+0x3e60>
   1539c:	add	sp, sp, #8
   153a0:	pop	{r4, lr}
   153a4:	add	sp, sp, #16
   153a8:	bx	lr
   153ac:	bl	112dc <__stack_chk_fail@plt>
   153b0:	push	{r0, r1, r2, r3}
   153b4:	push	{r4, lr}
   153b8:	sub	sp, sp, #8
   153bc:	movw	r4, #37296	; 0x91b0
   153c0:	movt	r4, #2
   153c4:	ldr	r1, [sp, #16]
   153c8:	add	r3, sp, #20
   153cc:	ldr	ip, [r4]
   153d0:	adds	r0, r1, #0
   153d4:	mov	r2, r3
   153d8:	str	r3, [sp]
   153dc:	movne	r0, #1
   153e0:	str	ip, [sp, #4]
   153e4:	bl	148d0 <__assert_fail@plt+0x3384>
   153e8:	ldr	r2, [sp, #4]
   153ec:	ldr	r3, [r4]
   153f0:	cmp	r2, r3
   153f4:	bne	15408 <__assert_fail@plt+0x3ebc>
   153f8:	add	sp, sp, #8
   153fc:	pop	{r4, lr}
   15400:	add	sp, sp, #16
   15404:	bx	lr
   15408:	bl	112dc <__stack_chk_fail@plt>
   1540c:	push	{r4, r5, r6, lr}
   15410:	subs	r6, r0, #0
   15414:	mov	r4, r1
   15418:	mov	r5, r2
   1541c:	beq	1542c <__assert_fail@plt+0x3ee0>
   15420:	ldrb	r3, [r6]
   15424:	cmp	r3, #0
   15428:	bne	15490 <__assert_fail@plt+0x3f44>
   1542c:	cmp	r5, #0
   15430:	bne	1544c <__assert_fail@plt+0x3f00>
   15434:	cmp	r6, #0
   15438:	popeq	{r4, r5, r6, pc}
   1543c:	movw	r0, #31480	; 0x7af8
   15440:	movt	r0, #1
   15444:	pop	{r4, r5, r6, lr}
   15448:	b	153b0 <__assert_fail@plt+0x3e64>
   1544c:	movw	r0, #33824	; 0x8420
   15450:	ldrb	r1, [r4]
   15454:	movt	r0, #1
   15458:	bl	153b0 <__assert_fail@plt+0x3e64>
   1545c:	cmp	r5, #1
   15460:	beq	15434 <__assert_fail@plt+0x3ee8>
   15464:	add	r5, r4, r5
   15468:	sub	r5, r5, #1
   1546c:	ldrb	r1, [r4, #1]!
   15470:	movw	r0, #31284	; 0x7a34
   15474:	movt	r0, #1
   15478:	bl	153b0 <__assert_fail@plt+0x3e64>
   1547c:	cmp	r4, r5
   15480:	bne	1546c <__assert_fail@plt+0x3f20>
   15484:	cmp	r6, #0
   15488:	bne	1543c <__assert_fail@plt+0x3ef0>
   1548c:	pop	{r4, r5, r6, pc}
   15490:	movw	r0, #33820	; 0x841c
   15494:	mov	r1, r6
   15498:	movt	r0, #1
   1549c:	bl	15358 <__assert_fail@plt+0x3e0c>
   154a0:	b	1542c <__assert_fail@plt+0x3ee0>
   154a4:	push	{lr}		; (str lr, [sp, #-4]!)
   154a8:	sub	sp, sp, #12
   154ac:	mov	r3, r1
   154b0:	movw	r1, #33788	; 0x83fc
   154b4:	str	r2, [sp]
   154b8:	movt	r1, #1
   154bc:	mov	r2, r0
   154c0:	mov	r0, #6
   154c4:	bl	14ff4 <__assert_fail@plt+0x3aa8>
   154c8:	bl	11528 <abort@plt>
   154cc:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   154d0:	subs	r5, r0, #0
   154d4:	mov	fp, r1
   154d8:	mov	r8, r2
   154dc:	beq	15674 <__assert_fail@plt+0x4128>
   154e0:	ldrb	r3, [r5]
   154e4:	cmp	r3, #0
   154e8:	beq	15664 <__assert_fail@plt+0x4118>
   154ec:	mov	r7, #0
   154f0:	mov	r6, r5
   154f4:	mov	r4, r7
   154f8:	cmp	r3, #58	; 0x3a
   154fc:	cmpne	r3, #37	; 0x25
   15500:	mov	r1, r3
   15504:	mov	r0, fp
   15508:	add	r4, r4, #1
   1550c:	beq	15524 <__assert_fail@plt+0x3fd8>
   15510:	cmp	fp, #0
   15514:	beq	15528 <__assert_fail@plt+0x3fdc>
   15518:	bl	11408 <strchr@plt>
   1551c:	cmp	r0, #0
   15520:	beq	15528 <__assert_fail@plt+0x3fdc>
   15524:	add	r7, r7, #1
   15528:	ldrb	r3, [r6, #1]!
   1552c:	cmp	r3, #0
   15530:	bne	154f8 <__assert_fail@plt+0x3fac>
   15534:	add	r4, r4, r7, lsl #1
   15538:	add	r0, r4, #1
   1553c:	cmp	r8, #0
   15540:	bne	15628 <__assert_fail@plt+0x40dc>
   15544:	bl	11210 <gcry_malloc@plt>
   15548:	subs	r9, r0, #0
   1554c:	beq	15674 <__assert_fail@plt+0x4128>
   15550:	ldrb	r1, [r5]
   15554:	cmp	r1, #0
   15558:	beq	1566c <__assert_fail@plt+0x4120>
   1555c:	add	r5, r5, #1
   15560:	mov	r4, #0
   15564:	mov	r6, #37	; 0x25
   15568:	mov	sl, #50	; 0x32
   1556c:	mov	r8, #51	; 0x33
   15570:	mov	r7, #97	; 0x61
   15574:	b	155ec <__assert_fail@plt+0x40a0>
   15578:	cmp	r1, #37	; 0x25
   1557c:	beq	15634 <__assert_fail@plt+0x40e8>
   15580:	cmp	fp, #0
   15584:	beq	15654 <__assert_fail@plt+0x4108>
   15588:	mov	r0, fp
   1558c:	bl	11408 <strchr@plt>
   15590:	cmp	r0, #0
   15594:	beq	15654 <__assert_fail@plt+0x4108>
   15598:	strb	r6, [r9, r4]
   1559c:	add	r0, r4, #1
   155a0:	ldrb	r2, [r5, #-1]
   155a4:	add	r0, r9, r0
   155a8:	add	r1, r4, #2
   155ac:	add	r4, r4, #3
   155b0:	add	r1, r9, r1
   155b4:	lsr	r2, r2, #4
   155b8:	cmp	r2, #9
   155bc:	addle	r2, r2, #48	; 0x30
   155c0:	addgt	r2, r2, #87	; 0x57
   155c4:	strb	r2, [r0]
   155c8:	ldrb	r2, [r5, #-1]
   155cc:	and	r2, r2, #15
   155d0:	cmp	r2, #9
   155d4:	addle	r2, r2, #48	; 0x30
   155d8:	addgt	r2, r2, #87	; 0x57
   155dc:	strb	r2, [r1]
   155e0:	ldrb	r1, [r5], #1
   155e4:	cmp	r1, #0
   155e8:	beq	15618 <__assert_fail@plt+0x40cc>
   155ec:	cmp	r1, #58	; 0x3a
   155f0:	bne	15578 <__assert_fail@plt+0x402c>
   155f4:	add	r1, r4, #2
   155f8:	mov	r2, r9
   155fc:	strb	r6, [r2, r4]!
   15600:	add	r4, r4, #3
   15604:	strb	r8, [r2, #1]
   15608:	strb	r7, [r9, r1]
   1560c:	ldrb	r1, [r5], #1
   15610:	cmp	r1, #0
   15614:	bne	155ec <__assert_fail@plt+0x40a0>
   15618:	mov	r2, #0
   1561c:	mov	r0, r9
   15620:	strb	r2, [r9, r4]
   15624:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15628:	bl	111f8 <gcry_xmalloc@plt>
   1562c:	mov	r9, r0
   15630:	b	15550 <__assert_fail@plt+0x4004>
   15634:	add	r0, r4, #2
   15638:	mov	r2, r9
   1563c:	strb	r1, [r2, r4]!
   15640:	mov	r3, #53	; 0x35
   15644:	strb	sl, [r2, #1]
   15648:	add	r4, r4, #3
   1564c:	strb	r3, [r9, r0]
   15650:	b	155e0 <__assert_fail@plt+0x4094>
   15654:	ldrb	r2, [r5, #-1]
   15658:	strb	r2, [r9, r4]
   1565c:	add	r4, r4, #1
   15660:	b	155e0 <__assert_fail@plt+0x4094>
   15664:	mov	r0, #1
   15668:	b	1553c <__assert_fail@plt+0x3ff0>
   1566c:	mov	r4, r1
   15670:	b	15618 <__assert_fail@plt+0x40cc>
   15674:	mov	r0, #0
   15678:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1567c:	cmp	r1, #0
   15680:	push	{r4, lr}
   15684:	mov	r4, r0
   15688:	beq	156b8 <__assert_fail@plt+0x416c>
   1568c:	mov	r0, r1
   15690:	bl	1121c <getpwnam@plt>
   15694:	cmp	r0, #0
   15698:	popeq	{r4, pc}
   1569c:	cmp	r4, #0
   156a0:	ldr	r0, [r0, #20]
   156a4:	bne	156b0 <__assert_fail@plt+0x4164>
   156a8:	pop	{r4, lr}
   156ac:	b	1133c <gcry_strdup@plt>
   156b0:	pop	{r4, lr}
   156b4:	b	11450 <gcry_xstrdup@plt>
   156b8:	bl	1127c <getuid@plt>
   156bc:	bl	11258 <getpwuid@plt>
   156c0:	cmp	r0, #0
   156c4:	bne	1569c <__assert_fail@plt+0x4150>
   156c8:	pop	{r4, pc}
   156cc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   156d0:	movw	r6, #37296	; 0x91b0
   156d4:	movt	r6, #2
   156d8:	sub	sp, sp, #136	; 0x88
   156dc:	mov	sl, r0
   156e0:	mov	r0, r1
   156e4:	ldr	r3, [r6]
   156e8:	mov	r4, r2
   156ec:	mov	r9, r1
   156f0:	str	r3, [sp, #132]	; 0x84
   156f4:	bl	113fc <strlen@plt>
   156f8:	mov	r7, r0
   156fc:	ldr	r0, [r4]
   15700:	cmp	r0, #0
   15704:	str	r0, [sp, #4]
   15708:	addeq	r7, r7, #1
   1570c:	beq	1574c <__assert_fail@plt+0x4200>
   15710:	bl	113fc <strlen@plt>
   15714:	add	r7, r7, #2
   15718:	add	r8, r4, #124	; 0x7c
   1571c:	add	r5, sp, #4
   15720:	add	r7, r7, r0
   15724:	b	1573c <__assert_fail@plt+0x41f0>
   15728:	bl	113fc <strlen@plt>
   1572c:	cmp	r4, r8
   15730:	add	r0, r0, #1
   15734:	add	r7, r7, r0
   15738:	beq	15800 <__assert_fail@plt+0x42b4>
   1573c:	ldr	r0, [r4, #4]!
   15740:	cmp	r0, #0
   15744:	str	r0, [r5, #4]!
   15748:	bne	15728 <__assert_fail@plt+0x41dc>
   1574c:	ldrb	r3, [r9]
   15750:	add	r7, r7, #1
   15754:	cmp	r3, #126	; 0x7e
   15758:	movne	r4, #0
   1575c:	movne	r5, #1
   15760:	movne	r8, r4
   15764:	beq	1581c <__assert_fail@plt+0x42d0>
   15768:	cmp	sl, #0
   1576c:	mov	r0, r7
   15770:	bne	157f4 <__assert_fail@plt+0x42a8>
   15774:	bl	11210 <gcry_malloc@plt>
   15778:	subs	r7, r0, #0
   1577c:	beq	1592c <__assert_fail@plt+0x43e0>
   15780:	cmp	r4, #0
   15784:	beq	158a4 <__assert_fail@plt+0x4358>
   15788:	mov	r1, r4
   1578c:	mov	r0, r7
   15790:	bl	112c4 <stpcpy@plt>
   15794:	add	r1, r9, r5
   15798:	bl	112c4 <stpcpy@plt>
   1579c:	mov	r5, r0
   157a0:	mov	r0, r8
   157a4:	bl	112ac <gcry_free@plt>
   157a8:	ldr	r1, [sp, #4]
   157ac:	cmp	r1, #0
   157b0:	beq	157d8 <__assert_fail@plt+0x428c>
   157b4:	add	r4, sp, #4
   157b8:	mov	r8, #47	; 0x2f
   157bc:	mov	r0, r5
   157c0:	strb	r8, [r0], #1
   157c4:	bl	112c4 <stpcpy@plt>
   157c8:	ldr	r1, [r4, #4]!
   157cc:	cmp	r1, #0
   157d0:	mov	r5, r0
   157d4:	bne	157bc <__assert_fail@plt+0x4270>
   157d8:	ldr	r2, [sp, #132]	; 0x84
   157dc:	mov	r0, r7
   157e0:	ldr	r3, [r6]
   157e4:	cmp	r2, r3
   157e8:	bne	15954 <__assert_fail@plt+0x4408>
   157ec:	add	sp, sp, #136	; 0x88
   157f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157f4:	bl	111f8 <gcry_xmalloc@plt>
   157f8:	mov	r7, r0
   157fc:	b	15780 <__assert_fail@plt+0x4234>
   15800:	cmp	sl, #0
   15804:	bne	1593c <__assert_fail@plt+0x43f0>
   15808:	bl	11414 <__errno_location@plt>
   1580c:	mov	r7, sl
   15810:	mov	r3, #22
   15814:	str	r3, [r0]
   15818:	b	157d8 <__assert_fail@plt+0x428c>
   1581c:	ldrb	r3, [r9, #1]
   15820:	cmp	r3, #47	; 0x2f
   15824:	cmpne	r3, #0
   15828:	beq	158cc <__assert_fail@plt+0x4380>
   1582c:	cmp	sl, #0
   15830:	add	r0, r9, #1
   15834:	beq	158b8 <__assert_fail@plt+0x436c>
   15838:	bl	11450 <gcry_xstrdup@plt>
   1583c:	mov	r4, r0
   15840:	mov	r1, #47	; 0x2f
   15844:	mov	r0, r4
   15848:	bl	11408 <strchr@plt>
   1584c:	cmp	r0, #0
   15850:	movne	r3, #0
   15854:	strbne	r3, [r0]
   15858:	mov	r0, r4
   1585c:	bl	113fc <strlen@plt>
   15860:	mov	r1, r4
   15864:	add	r5, r0, #1
   15868:	mov	r0, sl
   1586c:	bl	1567c <__assert_fail@plt+0x4130>
   15870:	mov	r8, r0
   15874:	mov	r0, r4
   15878:	bl	112ac <gcry_free@plt>
   1587c:	cmp	r8, #0
   15880:	beq	15924 <__assert_fail@plt+0x43d8>
   15884:	mov	r0, r8
   15888:	mov	r4, r8
   1588c:	bl	113fc <strlen@plt>
   15890:	cmp	sl, #0
   15894:	add	r7, r7, r0
   15898:	mov	r0, r7
   1589c:	beq	15774 <__assert_fail@plt+0x4228>
   158a0:	b	157f4 <__assert_fail@plt+0x42a8>
   158a4:	mov	r1, r9
   158a8:	mov	r0, r7
   158ac:	bl	112c4 <stpcpy@plt>
   158b0:	mov	r5, r0
   158b4:	b	157a0 <__assert_fail@plt+0x4254>
   158b8:	bl	1133c <gcry_strdup@plt>
   158bc:	subs	r4, r0, #0
   158c0:	bne	15840 <__assert_fail@plt+0x42f4>
   158c4:	mov	r7, sl
   158c8:	b	157d8 <__assert_fail@plt+0x428c>
   158cc:	movw	r0, #33868	; 0x844c
   158d0:	movt	r0, #1
   158d4:	bl	11330 <getenv@plt>
   158d8:	subs	r4, r0, #0
   158dc:	movne	r8, #0
   158e0:	beq	15904 <__assert_fail@plt+0x43b8>
   158e4:	ldrb	r3, [r4]
   158e8:	cmp	r3, #0
   158ec:	beq	1591c <__assert_fail@plt+0x43d0>
   158f0:	mov	r0, r4
   158f4:	mov	r5, #1
   158f8:	bl	113fc <strlen@plt>
   158fc:	add	r7, r7, r0
   15900:	b	15768 <__assert_fail@plt+0x421c>
   15904:	mov	r1, r4
   15908:	mov	r0, sl
   1590c:	bl	1567c <__assert_fail@plt+0x4130>
   15910:	subs	r8, r0, #0
   15914:	mov	r4, r8
   15918:	bne	158e4 <__assert_fail@plt+0x4398>
   1591c:	mov	r5, #1
   15920:	b	15768 <__assert_fail@plt+0x421c>
   15924:	mov	r4, r8
   15928:	b	1591c <__assert_fail@plt+0x43d0>
   1592c:	mov	r0, r8
   15930:	mov	r7, sl
   15934:	bl	112ac <gcry_free@plt>
   15938:	b	157d8 <__assert_fail@plt+0x428c>
   1593c:	movw	r0, #33852	; 0x843c
   15940:	movw	r2, #33832	; 0x8428
   15944:	movt	r0, #1
   15948:	movt	r2, #1
   1594c:	movw	r1, #374	; 0x176
   15950:	bl	154a4 <__assert_fail@plt+0x3f58>
   15954:	bl	112dc <__stack_chk_fail@plt>
   15958:	push	{r4, r5, r6, r7, r8, lr}
   1595c:	movw	r7, #37296	; 0x91b0
   15960:	movt	r7, #2
   15964:	sub	sp, sp, #200	; 0xc8
   15968:	mov	r4, r1
   1596c:	ldr	r3, [r7]
   15970:	str	r0, [sp, #4]
   15974:	str	r3, [sp, #196]	; 0xc4
   15978:	bl	113fc <strlen@plt>
   1597c:	mov	r5, r0
   15980:	ldr	r0, [r4]
   15984:	cmp	r0, #0
   15988:	str	r0, [sp, #8]
   1598c:	beq	159c4 <__assert_fail@plt+0x4478>
   15990:	bl	113fc <strlen@plt>
   15994:	add	r8, r4, #184	; 0xb8
   15998:	add	r6, sp, #8
   1599c:	add	r5, r5, r0
   159a0:	b	159b4 <__assert_fail@plt+0x4468>
   159a4:	bl	113fc <strlen@plt>
   159a8:	cmp	r4, r8
   159ac:	add	r5, r5, r0
   159b0:	beq	15a18 <__assert_fail@plt+0x44cc>
   159b4:	ldr	r0, [r4, #4]!
   159b8:	cmp	r0, #0
   159bc:	str	r0, [r6, #4]!
   159c0:	bne	159a4 <__assert_fail@plt+0x4458>
   159c4:	add	r0, r5, #1
   159c8:	bl	11210 <gcry_malloc@plt>
   159cc:	subs	r5, r0, #0
   159d0:	beq	159f8 <__assert_fail@plt+0x44ac>
   159d4:	ldr	r1, [sp, #4]
   159d8:	cmp	r1, #0
   159dc:	beq	159f8 <__assert_fail@plt+0x44ac>
   159e0:	add	r4, sp, #4
   159e4:	mov	r0, r5
   159e8:	bl	112c4 <stpcpy@plt>
   159ec:	ldr	r1, [r4, #4]!
   159f0:	cmp	r1, #0
   159f4:	bne	159e8 <__assert_fail@plt+0x449c>
   159f8:	mov	r3, r5
   159fc:	ldr	r2, [sp, #196]	; 0xc4
   15a00:	mov	r0, r3
   15a04:	ldr	r3, [r7]
   15a08:	cmp	r2, r3
   15a0c:	bne	15a2c <__assert_fail@plt+0x44e0>
   15a10:	add	sp, sp, #200	; 0xc8
   15a14:	pop	{r4, r5, r6, r7, r8, pc}
   15a18:	bl	11414 <__errno_location@plt>
   15a1c:	mov	r2, #22
   15a20:	mov	r3, #0
   15a24:	str	r2, [r0]
   15a28:	b	159fc <__assert_fail@plt+0x44b0>
   15a2c:	bl	112dc <__stack_chk_fail@plt>
   15a30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a34:	subs	r6, r1, #0
   15a38:	sub	sp, sp, #12
   15a3c:	mov	r9, r0
   15a40:	beq	15b0c <__assert_fail@plt+0x45c0>
   15a44:	str	r2, [sp, #4]
   15a48:	bl	1139c <__ctype_toupper_loc@plt>
   15a4c:	ldr	r2, [sp, #4]
   15a50:	sub	r6, r6, #1
   15a54:	mov	r8, r9
   15a58:	mov	fp, r2
   15a5c:	ldrb	r3, [fp], #1
   15a60:	ldr	r1, [r0]
   15a64:	ldr	sl, [r1, r3, lsl #2]
   15a68:	b	15a80 <__assert_fail@plt+0x4534>
   15a6c:	cmp	r6, #0
   15a70:	add	r9, r9, #1
   15a74:	sub	r3, r6, #1
   15a78:	beq	15b0c <__assert_fail@plt+0x45c0>
   15a7c:	mov	r6, r3
   15a80:	mov	r0, r8
   15a84:	ldrb	r3, [r8], #1
   15a88:	add	r7, r6, #1
   15a8c:	ldr	r3, [r1, r3, lsl #2]
   15a90:	cmp	r3, sl
   15a94:	bne	15a6c <__assert_fail@plt+0x4520>
   15a98:	cmp	r6, #0
   15a9c:	ldrb	r4, [r2, #1]
   15aa0:	beq	15af4 <__assert_fail@plt+0x45a8>
   15aa4:	ldrb	ip, [r9, #1]
   15aa8:	ldr	r3, [r1, r4, lsl #2]
   15aac:	ldr	ip, [r1, ip, lsl #2]
   15ab0:	cmp	ip, r3
   15ab4:	bne	15af4 <__assert_fail@plt+0x45a8>
   15ab8:	add	r7, r9, r7
   15abc:	add	r3, r9, #2
   15ac0:	mov	ip, fp
   15ac4:	str	r2, [sp]
   15ac8:	b	15ae4 <__assert_fail@plt+0x4598>
   15acc:	ldrb	r4, [ip, #1]!
   15ad0:	ldrb	r5, [r3], #1
   15ad4:	ldr	r2, [r1, r4, lsl #2]
   15ad8:	ldr	r5, [r1, r5, lsl #2]
   15adc:	cmp	r5, r2
   15ae0:	bne	15b04 <__assert_fail@plt+0x45b8>
   15ae4:	cmp	r3, r7
   15ae8:	bne	15acc <__assert_fail@plt+0x4580>
   15aec:	ldr	r2, [sp]
   15af0:	ldrb	r4, [ip, #1]
   15af4:	cmp	r4, #0
   15af8:	bne	15a6c <__assert_fail@plt+0x4520>
   15afc:	add	sp, sp, #12
   15b00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b04:	ldr	r2, [sp]
   15b08:	b	15af4 <__assert_fail@plt+0x45a8>
   15b0c:	mov	r0, r6
   15b10:	add	sp, sp, #12
   15b14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b18:	cmp	r1, #0
   15b1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   15b20:	beq	15bf0 <__assert_fail@plt+0x46a4>
   15b24:	mov	fp, r2
   15b28:	sub	r8, r1, #1
   15b2c:	ldrb	sl, [fp], #1
   15b30:	sub	r3, sl, #97	; 0x61
   15b34:	cmp	r3, #25
   15b38:	andls	sl, sl, #223	; 0xdf
   15b3c:	b	15b54 <__assert_fail@plt+0x4608>
   15b40:	cmp	r8, #0
   15b44:	sub	r3, r8, #1
   15b48:	beq	15be4 <__assert_fail@plt+0x4698>
   15b4c:	mov	r8, r3
   15b50:	mov	r0, r7
   15b54:	mov	r7, r0
   15b58:	ldrb	r3, [r7], #1
   15b5c:	sub	r1, r3, #97	; 0x61
   15b60:	cmp	r1, #25
   15b64:	bicls	r3, r3, #32
   15b68:	cmp	r3, sl
   15b6c:	bne	15b40 <__assert_fail@plt+0x45f4>
   15b70:	cmp	r8, #0
   15b74:	ldrbeq	r1, [r2, #1]
   15b78:	beq	15bc4 <__assert_fail@plt+0x4678>
   15b7c:	mov	ip, fp
   15b80:	mov	r6, r0
   15b84:	mov	r4, r8
   15b88:	b	15b94 <__assert_fail@plt+0x4648>
   15b8c:	subs	r4, r4, #1
   15b90:	beq	15bd4 <__assert_fail@plt+0x4688>
   15b94:	ldrb	r3, [r6, #1]!
   15b98:	mov	r9, ip
   15b9c:	sub	r1, r3, #97	; 0x61
   15ba0:	cmp	r1, #25
   15ba4:	ldrb	r1, [ip], #1
   15ba8:	bicls	r3, r3, #32
   15bac:	sub	r5, r1, #97	; 0x61
   15bb0:	cmp	r5, #25
   15bb4:	mov	r5, r1
   15bb8:	bicls	r5, r1, #32
   15bbc:	cmp	r3, r5
   15bc0:	beq	15b8c <__assert_fail@plt+0x4640>
   15bc4:	cmp	r1, #0
   15bc8:	bne	15b40 <__assert_fail@plt+0x45f4>
   15bcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   15bd0:	bx	lr
   15bd4:	ldrb	r1, [r9, #1]
   15bd8:	cmp	r1, #0
   15bdc:	bne	15b40 <__assert_fail@plt+0x45f4>
   15be0:	b	15bcc <__assert_fail@plt+0x4680>
   15be4:	mov	r0, r8
   15be8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   15bec:	bx	lr
   15bf0:	mov	r0, r1
   15bf4:	b	15bcc <__assert_fail@plt+0x4680>
   15bf8:	push	{r4, lr}
   15bfc:	subs	r4, r2, #0
   15c00:	sub	sp, sp, #8
   15c04:	beq	15c4c <__assert_fail@plt+0x4700>
   15c08:	cmp	r0, #0
   15c0c:	beq	15c54 <__assert_fail@plt+0x4708>
   15c10:	subs	r3, r4, #1
   15c14:	beq	15c68 <__assert_fail@plt+0x471c>
   15c18:	ldrb	r2, [r1]
   15c1c:	mov	ip, r0
   15c20:	cmp	r2, #0
   15c24:	bne	15c38 <__assert_fail@plt+0x46ec>
   15c28:	b	15c44 <__assert_fail@plt+0x46f8>
   15c2c:	ldrb	r2, [r1, #1]!
   15c30:	cmp	r2, #0
   15c34:	beq	15c44 <__assert_fail@plt+0x46f8>
   15c38:	subs	r3, r3, #1
   15c3c:	strb	r2, [ip], #1
   15c40:	bne	15c2c <__assert_fail@plt+0x46e0>
   15c44:	mov	r3, #0
   15c48:	strb	r3, [ip]
   15c4c:	add	sp, sp, #8
   15c50:	pop	{r4, pc}
   15c54:	mov	r0, r4
   15c58:	str	r1, [sp, #4]
   15c5c:	bl	111f8 <gcry_xmalloc@plt>
   15c60:	ldr	r1, [sp, #4]
   15c64:	b	15c10 <__assert_fail@plt+0x46c4>
   15c68:	mov	ip, r0
   15c6c:	b	15c44 <__assert_fail@plt+0x46f8>
   15c70:	push	{r3, r4, r5, lr}
   15c74:	mov	r5, r0
   15c78:	ldrb	r4, [r0]
   15c7c:	cmp	r4, #0
   15c80:	beq	15d24 <__assert_fail@plt+0x47d8>
   15c84:	bl	113b4 <__ctype_b_loc@plt>
   15c88:	mov	r2, r5
   15c8c:	ldr	r1, [r0]
   15c90:	b	15ca0 <__assert_fail@plt+0x4754>
   15c94:	ldrb	r4, [r2, #1]!
   15c98:	cmp	r4, #0
   15c9c:	beq	15d24 <__assert_fail@plt+0x47d8>
   15ca0:	lsl	r4, r4, #1
   15ca4:	ldrh	r3, [r1, r4]
   15ca8:	and	r3, r3, #8192	; 0x2000
   15cac:	uxth	r3, r3
   15cb0:	cmp	r3, #0
   15cb4:	bne	15c94 <__assert_fail@plt+0x4748>
   15cb8:	ldrb	r1, [r2]
   15cbc:	cmp	r1, #0
   15cc0:	strb	r1, [r5]
   15cc4:	subne	r2, r2, #1
   15cc8:	movne	ip, r3
   15ccc:	movne	r1, r5
   15cd0:	beq	15d2c <__assert_fail@plt+0x47e0>
   15cd4:	ldrb	r3, [r2, #1]!
   15cd8:	ldr	r4, [r0]
   15cdc:	lsl	r3, r3, #1
   15ce0:	ldrh	r3, [r4, r3]
   15ce4:	and	r3, r3, #8192	; 0x2000
   15ce8:	uxth	r3, r3
   15cec:	cmp	r3, #0
   15cf0:	moveq	ip, r3
   15cf4:	beq	15d00 <__assert_fail@plt+0x47b4>
   15cf8:	cmp	ip, #0
   15cfc:	moveq	ip, r1
   15d00:	ldrb	r3, [r2, #1]
   15d04:	cmp	r3, #0
   15d08:	strb	r3, [r1, #1]!
   15d0c:	bne	15cd4 <__assert_fail@plt+0x4788>
   15d10:	cmp	ip, #0
   15d14:	beq	15d2c <__assert_fail@plt+0x47e0>
   15d18:	strb	r3, [ip]
   15d1c:	mov	r0, r5
   15d20:	pop	{r3, r4, r5, pc}
   15d24:	mov	r3, #0
   15d28:	strb	r3, [r5]
   15d2c:	mov	r0, r5
   15d30:	pop	{r3, r4, r5, pc}
   15d34:	push	{r3, r4, r5, lr}
   15d38:	mov	r5, r0
   15d3c:	ldrb	r4, [r0]
   15d40:	cmp	r4, #0
   15d44:	beq	15d90 <__assert_fail@plt+0x4844>
   15d48:	bl	113b4 <__ctype_b_loc@plt>
   15d4c:	mov	r3, r5
   15d50:	mov	r1, #0
   15d54:	ldr	ip, [r0]
   15d58:	lsl	r4, r4, #1
   15d5c:	ldrh	r2, [ip, r4]
   15d60:	and	r2, r2, #8192	; 0x2000
   15d64:	uxth	r2, r2
   15d68:	cmp	r2, #0
   15d6c:	moveq	r1, r2
   15d70:	beq	15d7c <__assert_fail@plt+0x4830>
   15d74:	cmp	r1, #0
   15d78:	moveq	r1, r3
   15d7c:	ldrb	r4, [r3, #1]!
   15d80:	cmp	r4, #0
   15d84:	bne	15d58 <__assert_fail@plt+0x480c>
   15d88:	cmp	r1, #0
   15d8c:	strbne	r4, [r1]
   15d90:	mov	r0, r5
   15d94:	pop	{r3, r4, r5, pc}
   15d98:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15d9c:	subs	sl, r1, #0
   15da0:	mov	r9, r0
   15da4:	mov	r7, r2
   15da8:	beq	15e00 <__assert_fail@plt+0x48b4>
   15dac:	add	r8, sl, r0
   15db0:	mov	r4, r0
   15db4:	mov	r6, #0
   15db8:	ldrb	r1, [r4]
   15dbc:	mov	r0, r7
   15dc0:	bl	11408 <strchr@plt>
   15dc4:	mov	r5, r4
   15dc8:	add	r4, r4, #1
   15dcc:	cmp	r0, #0
   15dd0:	moveq	r6, r0
   15dd4:	beq	15de0 <__assert_fail@plt+0x4894>
   15dd8:	cmp	r6, #0
   15ddc:	moveq	r6, r5
   15de0:	cmp	r4, r8
   15de4:	bne	15db8 <__assert_fail@plt+0x486c>
   15de8:	cmp	r6, #0
   15dec:	beq	15e00 <__assert_fail@plt+0x48b4>
   15df0:	mov	r3, #0
   15df4:	rsb	r0, r9, r6
   15df8:	strb	r3, [r6]
   15dfc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e00:	mov	r0, sl
   15e04:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e08:	movw	r2, #33876	; 0x8454
   15e0c:	movt	r2, #1
   15e10:	b	15d98 <__assert_fail@plt+0x484c>
   15e14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e18:	subs	sl, r1, #0
   15e1c:	mov	r9, r0
   15e20:	mov	r7, r2
   15e24:	beq	15e74 <__assert_fail@plt+0x4928>
   15e28:	add	r8, r0, sl
   15e2c:	mov	r4, r0
   15e30:	mov	r6, #0
   15e34:	ldrb	r1, [r4]
   15e38:	mov	r0, r7
   15e3c:	bl	11408 <strchr@plt>
   15e40:	mov	r5, r4
   15e44:	add	r4, r4, #1
   15e48:	cmp	r0, #0
   15e4c:	moveq	r6, r0
   15e50:	beq	15e5c <__assert_fail@plt+0x4910>
   15e54:	cmp	r6, #0
   15e58:	moveq	r6, r5
   15e5c:	cmp	r4, r8
   15e60:	bne	15e34 <__assert_fail@plt+0x48e8>
   15e64:	cmp	r6, #0
   15e68:	beq	15e74 <__assert_fail@plt+0x4928>
   15e6c:	rsb	r0, r9, r6
   15e70:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e74:	mov	r0, sl
   15e78:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15e7c:	movw	r2, #33876	; 0x8454
   15e80:	movt	r2, #1
   15e84:	b	15e14 <__assert_fail@plt+0x48c8>
   15e88:	push	{r4, lr}
   15e8c:	mov	r1, #47	; 0x2f
   15e90:	mov	r4, r0
   15e94:	bl	114c8 <strrchr@plt>
   15e98:	cmp	r0, #0
   15e9c:	beq	15eac <__assert_fail@plt+0x4960>
   15ea0:	add	r0, r0, #1
   15ea4:	pop	{r4, lr}
   15ea8:	b	11450 <gcry_xstrdup@plt>
   15eac:	mov	r0, r4
   15eb0:	pop	{r4, lr}
   15eb4:	b	11450 <gcry_xstrdup@plt>
   15eb8:	push	{r4, r5, r6, lr}
   15ebc:	mov	r1, #47	; 0x2f
   15ec0:	mov	r5, r0
   15ec4:	bl	114c8 <strrchr@plt>
   15ec8:	cmp	r0, #0
   15ecc:	beq	15efc <__assert_fail@plt+0x49b0>
   15ed0:	rsb	r4, r5, r0
   15ed4:	add	r0, r4, #1
   15ed8:	bl	111f8 <gcry_xmalloc@plt>
   15edc:	mov	r1, r5
   15ee0:	mov	r2, r4
   15ee4:	mov	r6, r0
   15ee8:	bl	11444 <strncpy@plt>
   15eec:	mov	r3, #0
   15ef0:	mov	r0, r6
   15ef4:	strb	r3, [r6, r4]
   15ef8:	pop	{r4, r5, r6, pc}
   15efc:	movw	r0, #33132	; 0x816c
   15f00:	movt	r0, #1
   15f04:	pop	{r4, r5, r6, lr}
   15f08:	b	11450 <gcry_xstrdup@plt>
   15f0c:	push	{r0, r1, r2, r3}
   15f10:	mov	r0, #1
   15f14:	push	{r4, lr}
   15f18:	movw	r4, #37296	; 0x91b0
   15f1c:	movt	r4, #2
   15f20:	sub	sp, sp, #8
   15f24:	add	r3, sp, #20
   15f28:	ldr	ip, [r4]
   15f2c:	mov	r2, r3
   15f30:	ldr	r1, [sp, #16]
   15f34:	str	r3, [sp]
   15f38:	str	ip, [sp, #4]
   15f3c:	bl	156cc <__assert_fail@plt+0x4180>
   15f40:	ldr	r2, [sp, #4]
   15f44:	ldr	r3, [r4]
   15f48:	cmp	r2, r3
   15f4c:	bne	15f60 <__assert_fail@plt+0x4a14>
   15f50:	add	sp, sp, #8
   15f54:	pop	{r4, lr}
   15f58:	add	sp, sp, #16
   15f5c:	bx	lr
   15f60:	bl	112dc <__stack_chk_fail@plt>
   15f64:	push	{r0, r1, r2, r3}
   15f68:	mov	r0, #0
   15f6c:	push	{r4, lr}
   15f70:	movw	r4, #37296	; 0x91b0
   15f74:	movt	r4, #2
   15f78:	sub	sp, sp, #8
   15f7c:	add	r3, sp, #20
   15f80:	ldr	ip, [r4]
   15f84:	mov	r2, r3
   15f88:	ldr	r1, [sp, #16]
   15f8c:	str	r3, [sp]
   15f90:	str	ip, [sp, #4]
   15f94:	bl	156cc <__assert_fail@plt+0x4180>
   15f98:	ldr	r2, [sp, #4]
   15f9c:	ldr	r3, [r4]
   15fa0:	cmp	r2, r3
   15fa4:	bne	15fb8 <__assert_fail@plt+0x4a6c>
   15fa8:	add	sp, sp, #8
   15fac:	pop	{r4, lr}
   15fb0:	add	sp, sp, #16
   15fb4:	bx	lr
   15fb8:	bl	112dc <__stack_chk_fail@plt>
   15fbc:	b	11240 <strcmp@plt>
   15fc0:	ldrb	r3, [r0]
   15fc4:	sub	r2, r3, #48	; 0x30
   15fc8:	uxtb	r1, r2
   15fcc:	cmp	r1, #9
   15fd0:	lslls	r3, r2, #4
   15fd4:	bls	16000 <__assert_fail@plt+0x4ab4>
   15fd8:	sub	r2, r3, #65	; 0x41
   15fdc:	cmp	r2, #5
   15fe0:	subls	r3, r3, #55	; 0x37
   15fe4:	lslls	r3, r3, #4
   15fe8:	bls	16000 <__assert_fail@plt+0x4ab4>
   15fec:	sub	r2, r3, #97	; 0x61
   15ff0:	cmp	r2, #5
   15ff4:	bhi	1604c <__assert_fail@plt+0x4b00>
   15ff8:	sub	r3, r3, #87	; 0x57
   15ffc:	lsl	r3, r3, #4
   16000:	ldrb	r2, [r0, #1]
   16004:	sub	r1, r2, #48	; 0x30
   16008:	uxtb	ip, r1
   1600c:	cmp	ip, #9
   16010:	bls	1602c <__assert_fail@plt+0x4ae0>
   16014:	sub	r1, r2, #65	; 0x41
   16018:	cmp	r1, #5
   1601c:	bhi	16034 <__assert_fail@plt+0x4ae8>
   16020:	sub	r2, r2, #55	; 0x37
   16024:	add	r0, r2, r3
   16028:	bx	lr
   1602c:	add	r0, r1, r3
   16030:	bx	lr
   16034:	sub	r1, r2, #97	; 0x61
   16038:	cmp	r1, #5
   1603c:	bhi	1604c <__assert_fail@plt+0x4b00>
   16040:	sub	r2, r2, #87	; 0x57
   16044:	add	r0, r2, r3
   16048:	bx	lr
   1604c:	mvn	r0, #0
   16050:	bx	lr
   16054:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16058:	subs	r4, r2, #0
   1605c:	mov	r7, r0
   16060:	mov	r8, r3
   16064:	ldr	r9, [sp, #32]
   16068:	beq	161a4 <__assert_fail@plt+0x4c58>
   1606c:	mov	r5, r1
   16070:	mov	r6, #0
   16074:	b	160b0 <__assert_fail@plt+0x4b64>
   16078:	cmp	r0, r8
   1607c:	beq	160c0 <__assert_fail@plt+0x4b74>
   16080:	cmp	r0, r9
   16084:	beq	160c0 <__assert_fail@plt+0x4b74>
   16088:	orrs	r3, r8, r9
   1608c:	beq	16098 <__assert_fail@plt+0x4b4c>
   16090:	cmp	r0, #92	; 0x5c
   16094:	beq	160c0 <__assert_fail@plt+0x4b74>
   16098:	mov	r1, r7
   1609c:	add	r6, r6, #1
   160a0:	bl	11300 <_IO_putc@plt>
   160a4:	subs	r4, r4, #1
   160a8:	add	r6, r6, #1
   160ac:	beq	1611c <__assert_fail@plt+0x4bd0>
   160b0:	ldrb	r0, [r5], #1
   160b4:	cmp	r0, #127	; 0x7f
   160b8:	cmpne	r0, #31
   160bc:	bhi	16078 <__assert_fail@plt+0x4b2c>
   160c0:	mov	r0, #92	; 0x5c
   160c4:	mov	r1, r7
   160c8:	bl	11300 <_IO_putc@plt>
   160cc:	ldrb	r3, [r5, #-1]
   160d0:	cmp	r3, #10
   160d4:	beq	16140 <__assert_fail@plt+0x4bf4>
   160d8:	cmp	r3, #13
   160dc:	beq	16154 <__assert_fail@plt+0x4c08>
   160e0:	cmp	r3, #12
   160e4:	beq	16168 <__assert_fail@plt+0x4c1c>
   160e8:	cmp	r3, #11
   160ec:	beq	1617c <__assert_fail@plt+0x4c30>
   160f0:	cmp	r3, #8
   160f4:	beq	16190 <__assert_fail@plt+0x4c44>
   160f8:	cmp	r3, #0
   160fc:	bne	16124 <__assert_fail@plt+0x4bd8>
   16100:	mov	r0, #48	; 0x30
   16104:	mov	r1, r7
   16108:	bl	11300 <_IO_putc@plt>
   1610c:	subs	r4, r4, #1
   16110:	add	r6, r6, #2
   16114:	add	r6, r6, #1
   16118:	bne	160b0 <__assert_fail@plt+0x4b64>
   1611c:	mov	r0, r6
   16120:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16124:	movw	r2, #33884	; 0x845c
   16128:	mov	r0, r7
   1612c:	movt	r2, #1
   16130:	mov	r1, #1
   16134:	bl	11498 <__fprintf_chk@plt>
   16138:	add	r6, r6, #4
   1613c:	b	160a4 <__assert_fail@plt+0x4b58>
   16140:	mov	r0, #110	; 0x6e
   16144:	mov	r1, r7
   16148:	bl	11300 <_IO_putc@plt>
   1614c:	add	r6, r6, #2
   16150:	b	160a4 <__assert_fail@plt+0x4b58>
   16154:	mov	r0, #114	; 0x72
   16158:	mov	r1, r7
   1615c:	bl	11300 <_IO_putc@plt>
   16160:	add	r6, r6, #2
   16164:	b	160a4 <__assert_fail@plt+0x4b58>
   16168:	mov	r0, #102	; 0x66
   1616c:	mov	r1, r7
   16170:	bl	11300 <_IO_putc@plt>
   16174:	add	r6, r6, #2
   16178:	b	160a4 <__assert_fail@plt+0x4b58>
   1617c:	mov	r0, #118	; 0x76
   16180:	mov	r1, r7
   16184:	bl	11300 <_IO_putc@plt>
   16188:	add	r6, r6, #2
   1618c:	b	160a4 <__assert_fail@plt+0x4b58>
   16190:	mov	r0, #98	; 0x62
   16194:	mov	r1, r7
   16198:	bl	11300 <_IO_putc@plt>
   1619c:	add	r6, r6, #2
   161a0:	b	160a4 <__assert_fail@plt+0x4b58>
   161a4:	mov	r6, r4
   161a8:	b	1611c <__assert_fail@plt+0x4bd0>
   161ac:	push	{lr}		; (str lr, [sp, #-4]!)
   161b0:	sub	sp, sp, #12
   161b4:	mov	ip, #0
   161b8:	str	ip, [sp]
   161bc:	bl	16054 <__assert_fail@plt+0x4b08>
   161c0:	add	sp, sp, #12
   161c4:	pop	{pc}		; (ldr pc, [sp], #4)
   161c8:	cmp	r2, #0
   161cc:	push	{r4, r5, r6, lr}
   161d0:	mov	r5, r0
   161d4:	sub	sp, sp, #8
   161d8:	beq	1620c <__assert_fail@plt+0x4cc0>
   161dc:	ldrsb	r0, [r1]
   161e0:	cmp	r0, #0
   161e4:	blt	16224 <__assert_fail@plt+0x4cd8>
   161e8:	sub	r4, r2, #1
   161ec:	mov	ip, r1
   161f0:	add	r4, r1, r4
   161f4:	b	16204 <__assert_fail@plt+0x4cb8>
   161f8:	ldrsb	lr, [ip, #1]!
   161fc:	cmp	lr, #0
   16200:	blt	16224 <__assert_fail@plt+0x4cd8>
   16204:	cmp	ip, r4
   16208:	bne	161f8 <__assert_fail@plt+0x4cac>
   1620c:	mov	ip, #0
   16210:	mov	r0, r5
   16214:	str	ip, [sp]
   16218:	bl	16054 <__assert_fail@plt+0x4b08>
   1621c:	add	sp, sp, #8
   16220:	pop	{r4, r5, r6, pc}
   16224:	mov	r0, r1
   16228:	mov	r1, r2
   1622c:	mov	r2, r3
   16230:	bl	176a8 <__assert_fail@plt+0x615c>
   16234:	mov	r4, r0
   16238:	bl	113fc <strlen@plt>
   1623c:	mov	r1, r5
   16240:	mov	r6, r0
   16244:	mov	r0, r4
   16248:	bl	11510 <fputs@plt>
   1624c:	mov	r0, r4
   16250:	bl	112ac <gcry_free@plt>
   16254:	mov	r0, r6
   16258:	add	sp, sp, #8
   1625c:	pop	{r4, r5, r6, pc}
   16260:	push	{r4, r5, r6, r7, lr}
   16264:	subs	r4, r1, #0
   16268:	mov	r6, r0
   1626c:	sub	sp, sp, #12
   16270:	mov	r5, r2
   16274:	mov	r7, r3
   16278:	mov	r0, r4
   1627c:	beq	1629c <__assert_fail@plt+0x4d50>
   16280:	bl	113fc <strlen@plt>
   16284:	str	r7, [sp]
   16288:	mov	r1, r4
   1628c:	mov	r3, r5
   16290:	mov	r2, r0
   16294:	mov	r0, r6
   16298:	bl	16054 <__assert_fail@plt+0x4b08>
   1629c:	add	sp, sp, #12
   162a0:	pop	{r4, r5, r6, r7, pc}
   162a4:	push	{r4, r5, r6, lr}
   162a8:	subs	r4, r1, #0
   162ac:	mov	r6, r0
   162b0:	sub	sp, sp, #8
   162b4:	mov	r5, r2
   162b8:	mov	r0, r4
   162bc:	beq	162e0 <__assert_fail@plt+0x4d94>
   162c0:	bl	113fc <strlen@plt>
   162c4:	mov	ip, #0
   162c8:	mov	r1, r4
   162cc:	mov	r3, r5
   162d0:	str	ip, [sp]
   162d4:	mov	r2, r0
   162d8:	mov	r0, r6
   162dc:	bl	16054 <__assert_fail@plt+0x4b08>
   162e0:	add	sp, sp, #8
   162e4:	pop	{r4, r5, r6, pc}
   162e8:	push	{r4, r5, r6, lr}
   162ec:	subs	r4, r1, #0
   162f0:	mov	r6, r0
   162f4:	mov	r5, r2
   162f8:	mov	r0, r4
   162fc:	beq	1631c <__assert_fail@plt+0x4dd0>
   16300:	bl	113fc <strlen@plt>
   16304:	mov	r1, r4
   16308:	mov	r3, r5
   1630c:	mov	r2, r0
   16310:	mov	r0, r6
   16314:	pop	{r4, r5, r6, lr}
   16318:	b	161c8 <__assert_fail@plt+0x4c7c>
   1631c:	pop	{r4, r5, r6, pc}
   16320:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16324:	subs	r5, r1, #0
   16328:	sub	sp, sp, #12
   1632c:	mov	r6, r0
   16330:	mov	r7, r2
   16334:	beq	164b0 <__assert_fail@plt+0x4f64>
   16338:	add	lr, r0, r5
   1633c:	mov	r1, r0
   16340:	mov	r0, #1
   16344:	b	1636c <__assert_fail@plt+0x4e20>
   16348:	cmp	r3, r7
   1634c:	beq	1637c <__assert_fail@plt+0x4e30>
   16350:	cmp	r7, #0
   16354:	beq	16360 <__assert_fail@plt+0x4e14>
   16358:	cmp	r3, #92	; 0x5c
   1635c:	beq	16390 <__assert_fail@plt+0x4e44>
   16360:	add	r0, r0, #1
   16364:	cmp	r1, lr
   16368:	beq	1639c <__assert_fail@plt+0x4e50>
   1636c:	ldrb	r3, [r1], #1
   16370:	cmp	r3, #127	; 0x7f
   16374:	cmpne	r3, #31
   16378:	bhi	16348 <__assert_fail@plt+0x4dfc>
   1637c:	sub	ip, r3, #10
   16380:	cmp	ip, #3
   16384:	bls	16484 <__assert_fail@plt+0x4f38>
   16388:	tst	r3, #247	; 0xf7
   1638c:	beq	16484 <__assert_fail@plt+0x4f38>
   16390:	cmp	r1, lr
   16394:	add	r0, r0, #5
   16398:	bne	1636c <__assert_fail@plt+0x4e20>
   1639c:	bl	111f8 <gcry_xmalloc@plt>
   163a0:	mov	r8, #92	; 0x5c
   163a4:	mov	sl, #48	; 0x30
   163a8:	mov	fp, #98	; 0x62
   163ac:	mov	r9, r0
   163b0:	mov	r4, r0
   163b4:	b	163e0 <__assert_fail@plt+0x4e94>
   163b8:	cmp	r3, r7
   163bc:	beq	163f0 <__assert_fail@plt+0x4ea4>
   163c0:	cmp	r7, #0
   163c4:	beq	163d0 <__assert_fail@plt+0x4e84>
   163c8:	cmp	r3, #92	; 0x5c
   163cc:	beq	163f0 <__assert_fail@plt+0x4ea4>
   163d0:	strb	r3, [r4]
   163d4:	add	r4, r4, #1
   163d8:	subs	r5, r5, #1
   163dc:	beq	16470 <__assert_fail@plt+0x4f24>
   163e0:	ldrb	r3, [r6], #1
   163e4:	cmp	r3, #127	; 0x7f
   163e8:	cmpne	r3, #31
   163ec:	bhi	163b8 <__assert_fail@plt+0x4e6c>
   163f0:	strb	r8, [r4]
   163f4:	ldrb	r3, [r6, #-1]
   163f8:	cmp	r3, #10
   163fc:	moveq	r3, #110	; 0x6e
   16400:	strbeq	r3, [r4, #1]
   16404:	addeq	r4, r4, #2
   16408:	beq	163d8 <__assert_fail@plt+0x4e8c>
   1640c:	cmp	r3, #13
   16410:	moveq	r3, #114	; 0x72
   16414:	strbeq	r3, [r4, #1]
   16418:	addeq	r4, r4, #2
   1641c:	beq	163d8 <__assert_fail@plt+0x4e8c>
   16420:	cmp	r3, #12
   16424:	moveq	r3, #102	; 0x66
   16428:	strbeq	r3, [r4, #1]
   1642c:	addeq	r4, r4, #2
   16430:	beq	163d8 <__assert_fail@plt+0x4e8c>
   16434:	cmp	r3, #11
   16438:	moveq	r3, #118	; 0x76
   1643c:	strbeq	r3, [r4, #1]
   16440:	addeq	r4, r4, #2
   16444:	beq	163d8 <__assert_fail@plt+0x4e8c>
   16448:	cmp	r3, #8
   1644c:	strbeq	fp, [r4, #1]
   16450:	addeq	r4, r4, #2
   16454:	beq	163d8 <__assert_fail@plt+0x4e8c>
   16458:	cmp	r3, #0
   1645c:	bne	1648c <__assert_fail@plt+0x4f40>
   16460:	subs	r5, r5, #1
   16464:	strb	sl, [r4, #1]
   16468:	add	r4, r4, #2
   1646c:	bne	163e0 <__assert_fail@plt+0x4e94>
   16470:	mov	r3, #0
   16474:	mov	r0, r9
   16478:	strb	r3, [r4]
   1647c:	add	sp, sp, #12
   16480:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16484:	add	r0, r0, #2
   16488:	b	16364 <__assert_fail@plt+0x4e18>
   1648c:	str	r3, [sp]
   16490:	add	r0, r4, #1
   16494:	movw	r3, #33884	; 0x845c
   16498:	mov	r1, #1
   1649c:	movt	r3, #1
   164a0:	mvn	r2, #0
   164a4:	add	r4, r4, #4
   164a8:	bl	11420 <__sprintf_chk@plt>
   164ac:	b	163d8 <__assert_fail@plt+0x4e8c>
   164b0:	mov	r0, #1
   164b4:	bl	111f8 <gcry_xmalloc@plt>
   164b8:	mov	r9, r0
   164bc:	mov	r4, r0
   164c0:	b	16470 <__assert_fail@plt+0x4f24>
   164c4:	ldrb	r3, [r0]
   164c8:	cmp	r3, #0
   164cc:	beq	164f4 <__assert_fail@plt+0x4fa8>
   164d0:	mov	r2, r0
   164d4:	mov	r0, #0
   164d8:	and	r3, r3, #192	; 0xc0
   164dc:	cmp	r3, #128	; 0x80
   164e0:	ldrb	r3, [r2, #1]!
   164e4:	addne	r0, r0, #1
   164e8:	cmp	r3, #0
   164ec:	bne	164d8 <__assert_fail@plt+0x4f8c>
   164f0:	bx	lr
   164f4:	mov	r0, r3
   164f8:	bx	lr
   164fc:	sub	r0, r0, #65	; 0x41
   16500:	cmp	r0, #25
   16504:	movhi	r0, #0
   16508:	movls	r0, #1
   1650c:	bx	lr
   16510:	sub	r0, r0, #97	; 0x61
   16514:	cmp	r0, #25
   16518:	movhi	r0, #0
   1651c:	movls	r0, #1
   16520:	bx	lr
   16524:	sub	r3, r0, #97	; 0x61
   16528:	cmp	r3, #25
   1652c:	bicls	r0, r0, #32
   16530:	bx	lr
   16534:	sub	r3, r0, #65	; 0x41
   16538:	cmp	r3, #25
   1653c:	orrls	r0, r0, #32
   16540:	bx	lr
   16544:	cmp	r0, r1
   16548:	push	{r4, r5, r6}
   1654c:	beq	165f4 <__assert_fail@plt+0x50a8>
   16550:	ldrb	r3, [r0]
   16554:	cmp	r3, #0
   16558:	beq	165c4 <__assert_fail@plt+0x5078>
   1655c:	ldrb	r2, [r1]
   16560:	cmp	r2, #0
   16564:	beq	16600 <__assert_fail@plt+0x50b4>
   16568:	mov	ip, r1
   1656c:	b	16580 <__assert_fail@plt+0x5034>
   16570:	ldrb	r2, [ip, #1]
   16574:	mov	ip, r4
   16578:	cmp	r2, #0
   1657c:	beq	16600 <__assert_fail@plt+0x50b4>
   16580:	cmp	r3, r2
   16584:	mov	r1, r2
   16588:	sub	r5, r2, #97	; 0x61
   1658c:	sub	r6, r3, #97	; 0x61
   16590:	add	r4, ip, #1
   16594:	mov	r2, r3
   16598:	beq	165b4 <__assert_fail@plt+0x5068>
   1659c:	cmp	r6, #25
   165a0:	bicls	r2, r3, #32
   165a4:	cmp	r5, #25
   165a8:	bicls	r1, r1, #32
   165ac:	cmp	r2, r1
   165b0:	bne	16608 <__assert_fail@plt+0x50bc>
   165b4:	ldrb	r3, [r0, #1]!
   165b8:	mov	r1, r4
   165bc:	cmp	r3, #0
   165c0:	bne	16570 <__assert_fail@plt+0x5024>
   165c4:	ldrb	r0, [r1]
   165c8:	cmp	r3, r0
   165cc:	beq	165f4 <__assert_fail@plt+0x50a8>
   165d0:	sub	r2, r3, #97	; 0x61
   165d4:	cmp	r2, #25
   165d8:	sub	r2, r0, #97	; 0x61
   165dc:	bicls	r3, r3, #32
   165e0:	cmp	r2, #25
   165e4:	bicls	r0, r0, #32
   165e8:	rsb	r0, r0, r3
   165ec:	pop	{r4, r5, r6}
   165f0:	bx	lr
   165f4:	mov	r0, #0
   165f8:	pop	{r4, r5, r6}
   165fc:	bx	lr
   16600:	mov	r0, #0
   16604:	b	165d0 <__assert_fail@plt+0x5084>
   16608:	mov	r1, ip
   1660c:	ldrb	r0, [r1]
   16610:	cmp	r3, r0
   16614:	bne	165d0 <__assert_fail@plt+0x5084>
   16618:	b	165f4 <__assert_fail@plt+0x50a8>
   1661c:	cmp	r2, #0
   16620:	cmpne	r0, r1
   16624:	push	{r4, r5, r6}
   16628:	moveq	r0, #0
   1662c:	beq	16690 <__assert_fail@plt+0x5144>
   16630:	add	r2, r1, r2
   16634:	sub	r5, r0, #1
   16638:	add	r1, r1, #1
   1663c:	b	16650 <__assert_fail@plt+0x5104>
   16640:	cmp	ip, #0
   16644:	beq	1668c <__assert_fail@plt+0x5140>
   16648:	cmp	ip, r3
   1664c:	bne	1668c <__assert_fail@plt+0x5140>
   16650:	ldrb	r3, [r5, #1]!
   16654:	sub	r0, r3, #65	; 0x41
   16658:	orr	r4, r3, #32
   1665c:	cmp	r0, #25
   16660:	movhi	r4, r3
   16664:	ldrb	r3, [r1, #-1]
   16668:	uxtb	ip, r4
   1666c:	sub	r6, r3, #65	; 0x41
   16670:	orr	r0, r3, #32
   16674:	cmp	r6, #25
   16678:	movhi	r0, r3
   1667c:	cmp	r1, r2
   16680:	uxtb	r3, r0
   16684:	add	r1, r1, #1
   16688:	bne	16640 <__assert_fail@plt+0x50f4>
   1668c:	rsb	r0, r0, r4
   16690:	pop	{r4, r5, r6}
   16694:	bx	lr
   16698:	cmp	r0, r1
   1669c:	push	{r4, r5, r6, r7, r8, r9}
   166a0:	beq	16724 <__assert_fail@plt+0x51d8>
   166a4:	cmp	r2, #0
   166a8:	beq	166fc <__assert_fail@plt+0x51b0>
   166ac:	sub	r0, r0, #1
   166b0:	sub	r1, r1, #1
   166b4:	ldrb	r3, [r0, #1]!
   166b8:	ldrb	ip, [r1, #1]!
   166bc:	sub	r6, r3, #97	; 0x61
   166c0:	cmp	r3, ip
   166c4:	mov	r8, r3
   166c8:	beq	166f4 <__assert_fail@plt+0x51a8>
   166cc:	cmp	r6, #25
   166d0:	sub	r7, ip, #97	; 0x61
   166d4:	bic	r5, r3, #32
   166d8:	bic	r4, ip, #32
   166dc:	movhi	r5, r3
   166e0:	cmp	r7, #25
   166e4:	mov	r9, ip
   166e8:	movhi	r4, ip
   166ec:	cmp	r5, r4
   166f0:	bne	16708 <__assert_fail@plt+0x51bc>
   166f4:	subs	r2, r2, #1
   166f8:	bne	166b4 <__assert_fail@plt+0x5168>
   166fc:	mov	r0, r2
   16700:	pop	{r4, r5, r6, r7, r8, r9}
   16704:	bx	lr
   16708:	cmp	r6, #25
   1670c:	bicls	r8, r3, #32
   16710:	cmp	r7, #25
   16714:	bicls	r9, ip, #32
   16718:	rsb	r0, r9, r8
   1671c:	pop	{r4, r5, r6, r7, r8, r9}
   16720:	bx	lr
   16724:	mov	r0, #0
   16728:	pop	{r4, r5, r6, r7, r8, r9}
   1672c:	bx	lr
   16730:	cmp	r0, r1
   16734:	push	{r4}		; (str r4, [sp, #-4]!)
   16738:	beq	167b4 <__assert_fail@plt+0x5268>
   1673c:	ldrb	r3, [r0]
   16740:	cmp	r3, #0
   16744:	beq	16790 <__assert_fail@plt+0x5244>
   16748:	ldrb	r2, [r1]
   1674c:	cmp	r2, #0
   16750:	beq	167a0 <__assert_fail@plt+0x5254>
   16754:	cmp	r3, r2
   16758:	bne	167a0 <__assert_fail@plt+0x5254>
   1675c:	add	r3, r0, #1
   16760:	add	r2, r1, #1
   16764:	b	1677c <__assert_fail@plt+0x5230>
   16768:	ldrb	r4, [r2], #1
   1676c:	cmp	r4, #0
   16770:	beq	167a0 <__assert_fail@plt+0x5254>
   16774:	cmp	ip, r4
   16778:	bne	167a0 <__assert_fail@plt+0x5254>
   1677c:	mov	r0, r3
   16780:	ldrb	ip, [r3], #1
   16784:	mov	r1, r2
   16788:	cmp	ip, #0
   1678c:	bne	16768 <__assert_fail@plt+0x521c>
   16790:	ldrb	r3, [r1]
   16794:	cmp	r3, #0
   16798:	moveq	r0, r3
   1679c:	beq	167ac <__assert_fail@plt+0x5260>
   167a0:	ldrsb	r0, [r0]
   167a4:	ldrsb	r3, [r1]
   167a8:	rsb	r0, r3, r0
   167ac:	pop	{r4}		; (ldr r4, [sp], #4)
   167b0:	bx	lr
   167b4:	mov	r0, #0
   167b8:	pop	{r4}		; (ldr r4, [sp], #4)
   167bc:	bx	lr
   167c0:	push	{r3, r4, r5, r6, r7, lr}
   167c4:	subs	r5, r3, #0
   167c8:	mov	r4, r0
   167cc:	mov	r6, r2
   167d0:	beq	16810 <__assert_fail@plt+0x52c4>
   167d4:	cmp	r5, r1
   167d8:	bhi	16818 <__assert_fail@plt+0x52cc>
   167dc:	rsb	r7, r5, r1
   167e0:	adds	r7, r0, r7
   167e4:	bcc	167f8 <__assert_fail@plt+0x52ac>
   167e8:	b	16818 <__assert_fail@plt+0x52cc>
   167ec:	add	r4, r4, #1
   167f0:	cmp	r7, r4
   167f4:	bcc	16818 <__assert_fail@plt+0x52cc>
   167f8:	mov	r0, r4
   167fc:	mov	r1, r6
   16800:	mov	r2, r5
   16804:	bl	16698 <__assert_fail@plt+0x514c>
   16808:	cmp	r0, #0
   1680c:	bne	167ec <__assert_fail@plt+0x52a0>
   16810:	mov	r0, r4
   16814:	pop	{r3, r4, r5, r6, r7, pc}
   16818:	mov	r0, #0
   1681c:	pop	{r3, r4, r5, r6, r7, pc}
   16820:	push	{r3, r4, r5, lr}
   16824:	mov	r5, r0
   16828:	ldrb	r4, [r0]
   1682c:	cmp	r4, #0
   16830:	beq	16854 <__assert_fail@plt+0x5308>
   16834:	bl	11390 <__ctype_tolower_loc@plt>
   16838:	sub	r3, r5, #1
   1683c:	ldr	r2, [r0]
   16840:	ldr	r2, [r2, r4, lsl #2]
   16844:	strb	r2, [r3, #1]!
   16848:	ldrb	r4, [r3, #1]
   1684c:	cmp	r4, #0
   16850:	bne	1683c <__assert_fail@plt+0x52f0>
   16854:	mov	r0, r5
   16858:	pop	{r3, r4, r5, pc}
   1685c:	push	{r4, r5, r6, r7, r8, lr}
   16860:	subs	r4, r2, #0
   16864:	beq	168a0 <__assert_fail@plt+0x5354>
   16868:	sub	r8, r0, #1
   1686c:	sub	r7, r1, #1
   16870:	ldrb	r6, [r8, #1]!
   16874:	ldrb	r5, [r7, #1]!
   16878:	cmp	r6, r5
   1687c:	beq	16898 <__assert_fail@plt+0x534c>
   16880:	bl	1139c <__ctype_toupper_loc@plt>
   16884:	ldr	r3, [r0]
   16888:	ldr	r2, [r3, r6, lsl #2]
   1688c:	ldr	r3, [r3, r5, lsl #2]
   16890:	cmp	r2, r3
   16894:	bne	168a8 <__assert_fail@plt+0x535c>
   16898:	subs	r4, r4, #1
   1689c:	bne	16870 <__assert_fail@plt+0x5324>
   168a0:	mov	r0, r4
   168a4:	pop	{r4, r5, r6, r7, r8, pc}
   168a8:	rsb	r0, r5, r6
   168ac:	pop	{r4, r5, r6, r7, r8, pc}
   168b0:	mov	r2, #1
   168b4:	b	154cc <__assert_fail@plt+0x3f80>
   168b8:	mov	r2, #0
   168bc:	b	154cc <__assert_fail@plt+0x3f80>
   168c0:	push	{r0, r1, r2, r3}
   168c4:	push	{r4, lr}
   168c8:	sub	sp, sp, #8
   168cc:	movw	r4, #37296	; 0x91b0
   168d0:	movt	r4, #2
   168d4:	ldr	r0, [sp, #16]
   168d8:	ldr	r3, [r4]
   168dc:	cmp	r0, #0
   168e0:	str	r3, [sp, #4]
   168e4:	beq	16914 <__assert_fail@plt+0x53c8>
   168e8:	add	r1, sp, #20
   168ec:	str	r1, [sp]
   168f0:	bl	15958 <__assert_fail@plt+0x440c>
   168f4:	ldr	r2, [sp, #4]
   168f8:	ldr	r3, [r4]
   168fc:	cmp	r2, r3
   16900:	bne	16924 <__assert_fail@plt+0x53d8>
   16904:	add	sp, sp, #8
   16908:	pop	{r4, lr}
   1690c:	add	sp, sp, #16
   16910:	bx	lr
   16914:	movw	r0, #33880	; 0x8458
   16918:	movt	r0, #1
   1691c:	bl	1133c <gcry_strdup@plt>
   16920:	b	168f4 <__assert_fail@plt+0x53a8>
   16924:	bl	112dc <__stack_chk_fail@plt>
   16928:	push	{r0, r1, r2, r3}
   1692c:	push	{r4, lr}
   16930:	sub	sp, sp, #8
   16934:	movw	r4, #37296	; 0x91b0
   16938:	movt	r4, #2
   1693c:	ldr	r0, [sp, #16]
   16940:	ldr	r3, [r4]
   16944:	cmp	r0, #0
   16948:	str	r3, [sp, #4]
   1694c:	beq	16984 <__assert_fail@plt+0x5438>
   16950:	add	r1, sp, #20
   16954:	str	r1, [sp]
   16958:	bl	15958 <__assert_fail@plt+0x440c>
   1695c:	cmp	r0, #0
   16960:	beq	16998 <__assert_fail@plt+0x544c>
   16964:	ldr	r2, [sp, #4]
   16968:	ldr	r3, [r4]
   1696c:	cmp	r2, r3
   16970:	bne	16994 <__assert_fail@plt+0x5448>
   16974:	add	sp, sp, #8
   16978:	pop	{r4, lr}
   1697c:	add	sp, sp, #16
   16980:	bx	lr
   16984:	movw	r0, #33880	; 0x8458
   16988:	movt	r0, #1
   1698c:	bl	11450 <gcry_xstrdup@plt>
   16990:	b	1695c <__assert_fail@plt+0x5410>
   16994:	bl	112dc <__stack_chk_fail@plt>
   16998:	bl	11414 <__errno_location@plt>
   1699c:	ldr	r3, [r0]
   169a0:	cmp	r3, #22
   169a4:	movw	r3, #37304	; 0x91b8
   169a8:	movt	r3, #2
   169ac:	movweq	r0, #33892	; 0x8464
   169b0:	movwne	r0, #33932	; 0x848c
   169b4:	moveq	r1, #1
   169b8:	ldreq	r3, [r3]
   169bc:	movteq	r0, #1
   169c0:	moveq	r2, #37	; 0x25
   169c4:	movne	r1, #1
   169c8:	ldrne	r3, [r3]
   169cc:	movtne	r0, #1
   169d0:	movne	r2, #22
   169d4:	bl	1130c <fwrite@plt>
   169d8:	mov	r0, #2
   169dc:	bl	113cc <exit@plt>
   169e0:	push	{r4, r5, r6, r7, r8, lr}
   169e4:	mov	r7, r0
   169e8:	mov	r8, r1
   169ec:	mov	r6, r2
   169f0:	bl	11414 <__errno_location@plt>
   169f4:	movw	r4, #37468	; 0x925c
   169f8:	movt	r4, #2
   169fc:	ldr	r3, [r0]
   16a00:	mov	r5, r0
   16a04:	cmp	r3, #22
   16a08:	beq	16a4c <__assert_fail@plt+0x5500>
   16a0c:	ldr	r0, [r4, #8]
   16a10:	cmp	r0, #0
   16a14:	beq	16aa0 <__assert_fail@plt+0x5554>
   16a18:	mov	r3, #1
   16a1c:	str	r3, [r4, #8]
   16a20:	cmp	r6, #0
   16a24:	popeq	{r4, r5, r6, r7, r8, pc}
   16a28:	movw	r3, #37292	; 0x91ac
   16a2c:	movt	r3, #2
   16a30:	mov	r1, #0
   16a34:	movw	r2, #34052	; 0x8504
   16a38:	str	r1, [r4, #12]
   16a3c:	movt	r2, #1
   16a40:	str	r1, [r4, #16]
   16a44:	str	r2, [r3]
   16a48:	pop	{r4, r5, r6, r7, r8, pc}
   16a4c:	cmp	r7, #0
   16a50:	beq	16a6c <__assert_fail@plt+0x5520>
   16a54:	movw	r1, #33976	; 0x84b8
   16a58:	mov	r0, r7
   16a5c:	movt	r1, #1
   16a60:	bl	11240 <strcmp@plt>
   16a64:	cmp	r0, #0
   16a68:	beq	16acc <__assert_fail@plt+0x5580>
   16a6c:	mov	r3, #1
   16a70:	ldr	r0, [r4, #4]
   16a74:	str	r3, [r4, #4]
   16a78:	cmp	r0, #0
   16a7c:	bne	16a20 <__assert_fail@plt+0x54d4>
   16a80:	mov	r2, #5
   16a84:	movw	r1, #33984	; 0x84c0
   16a88:	movt	r1, #1
   16a8c:	bl	112d0 <dcgettext@plt>
   16a90:	mov	r1, r8
   16a94:	mov	r2, r7
   16a98:	bl	1521c <__assert_fail@plt+0x3cd0>
   16a9c:	b	16a20 <__assert_fail@plt+0x54d4>
   16aa0:	mov	r2, #5
   16aa4:	movw	r1, #34028	; 0x84ec
   16aa8:	movt	r1, #1
   16aac:	bl	112d0 <dcgettext@plt>
   16ab0:	mov	r7, r0
   16ab4:	ldr	r0, [r5]
   16ab8:	bl	1136c <strerror@plt>
   16abc:	mov	r1, r0
   16ac0:	mov	r0, r7
   16ac4:	bl	1521c <__assert_fail@plt+0x3cd0>
   16ac8:	b	16a18 <__assert_fail@plt+0x54cc>
   16acc:	mov	r3, #1
   16ad0:	ldr	r0, [r4]
   16ad4:	str	r3, [r4]
   16ad8:	b	16a78 <__assert_fail@plt+0x552c>
   16adc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16ae0:	movw	r4, #37296	; 0x91b0
   16ae4:	sub	sp, sp, #92	; 0x5c
   16ae8:	movt	r4, #2
   16aec:	movw	ip, #37468	; 0x925c
   16af0:	mov	r9, #0
   16af4:	str	ip, [sp, #32]
   16af8:	ldr	ip, [r4]
   16afc:	str	r1, [sp, #28]
   16b00:	str	r4, [sp, #44]	; 0x2c
   16b04:	movw	r4, #37468	; 0x925c
   16b08:	str	ip, [sp, #84]	; 0x54
   16b0c:	movt	r4, #2
   16b10:	ldr	ip, [sp, #28]
   16b14:	str	r4, [sp, #32]
   16b18:	cmp	ip, #0
   16b1c:	str	r0, [sp, #36]	; 0x24
   16b20:	str	r2, [sp, #16]
   16b24:	str	r3, [sp, #40]	; 0x28
   16b28:	str	r9, [sp, #12]
   16b2c:	str	r9, [sp, #24]
   16b30:	beq	16c3c <__assert_fail@plt+0x56f0>
   16b34:	ldr	ip, [sp, #36]	; 0x24
   16b38:	mov	r6, #0
   16b3c:	mov	r7, r6
   16b40:	mov	sl, r6
   16b44:	add	r4, ip, #1
   16b48:	ldr	r5, [sp, #28]
   16b4c:	ldr	fp, [sp, #24]
   16b50:	b	16bac <__assert_fail@plt+0x5660>
   16b54:	add	r2, r3, #64	; 0x40
   16b58:	lsr	r1, r3, #7
   16b5c:	uxtb	r2, r2
   16b60:	cmp	r2, #61	; 0x3d
   16b64:	movls	r2, #0
   16b68:	andhi	r2, r1, #1
   16b6c:	cmp	r2, #0
   16b70:	beq	16bb8 <__assert_fail@plt+0x566c>
   16b74:	cmp	fp, #0
   16b78:	beq	16b9c <__assert_fail@plt+0x5650>
   16b7c:	str	r3, [sp]
   16b80:	mov	r0, fp
   16b84:	movw	r3, #34064	; 0x8510
   16b88:	mov	r1, #1
   16b8c:	movt	r3, #1
   16b90:	mvn	r2, #0
   16b94:	bl	11420 <__sprintf_chk@plt>
   16b98:	add	fp, fp, #4
   16b9c:	add	r6, r6, #4
   16ba0:	subs	r5, r5, #1
   16ba4:	add	r4, r4, #1
   16ba8:	beq	16c18 <__assert_fail@plt+0x56cc>
   16bac:	cmp	r9, #0
   16bb0:	ldrb	r3, [r4, #-1]
   16bb4:	bne	16b54 <__assert_fail@plt+0x5608>
   16bb8:	cmp	sl, #0
   16bbc:	bne	16c84 <__assert_fail@plt+0x5738>
   16bc0:	tst	r3, #128	; 0x80
   16bc4:	bne	16ed4 <__assert_fail@plt+0x5988>
   16bc8:	ldr	ip, [sp, #16]
   16bcc:	cmn	ip, #1
   16bd0:	beq	16bf8 <__assert_fail@plt+0x56ac>
   16bd4:	cmp	r3, #127	; 0x7f
   16bd8:	cmpne	r3, #31
   16bdc:	bls	16d98 <__assert_fail@plt+0x584c>
   16be0:	cmp	r3, ip
   16be4:	beq	16d98 <__assert_fail@plt+0x584c>
   16be8:	cmp	ip, #0
   16bec:	beq	16bf8 <__assert_fail@plt+0x56ac>
   16bf0:	cmp	r3, #92	; 0x5c
   16bf4:	beq	16d98 <__assert_fail@plt+0x584c>
   16bf8:	cmp	fp, #0
   16bfc:	add	r6, r6, #1
   16c00:	strbne	r3, [fp]
   16c04:	addne	fp, fp, #1
   16c08:	subs	r5, r5, #1
   16c0c:	mov	r9, #0
   16c10:	add	r4, r4, #1
   16c14:	bne	16bac <__assert_fail@plt+0x5660>
   16c18:	ldr	r4, [sp, #24]
   16c1c:	cmp	r4, #0
   16c20:	bne	16c50 <__assert_fail@plt+0x5704>
   16c24:	add	r0, r6, #1
   16c28:	bl	111f8 <gcry_xmalloc@plt>
   16c2c:	ldr	ip, [sp, #28]
   16c30:	cmp	ip, #0
   16c34:	str	r0, [sp, #24]
   16c38:	bne	16b34 <__assert_fail@plt+0x55e8>
   16c3c:	ldr	r4, [sp, #24]
   16c40:	ldr	fp, [sp, #24]
   16c44:	cmp	r4, #0
   16c48:	ldr	r6, [sp, #28]
   16c4c:	beq	16c24 <__assert_fail@plt+0x56d8>
   16c50:	ldr	ip, [sp, #40]	; 0x28
   16c54:	cmp	ip, #0
   16c58:	bne	170c4 <__assert_fail@plt+0x5b78>
   16c5c:	ldr	r4, [sp, #40]	; 0x28
   16c60:	ldr	r0, [sp, #24]
   16c64:	strb	r4, [fp]
   16c68:	ldr	ip, [sp, #44]	; 0x2c
   16c6c:	ldr	r2, [sp, #84]	; 0x54
   16c70:	ldr	r3, [ip]
   16c74:	cmp	r2, r3
   16c78:	bne	17228 <__assert_fail@plt+0x5cdc>
   16c7c:	add	sp, sp, #92	; 0x5c
   16c80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c84:	eor	r2, r3, #128	; 0x80
   16c88:	cmp	r2, #63	; 0x3f
   16c8c:	bls	16d18 <__assert_fail@plt+0x57cc>
   16c90:	cmp	fp, #0
   16c94:	beq	16d00 <__assert_fail@plt+0x57b4>
   16c98:	cmp	r7, #0
   16c9c:	beq	16ce0 <__assert_fail@plt+0x5794>
   16ca0:	add	r8, sp, #76	; 0x4c
   16ca4:	mov	sl, fp
   16ca8:	add	r9, r8, r7
   16cac:	ldrb	ip, [r8], #1
   16cb0:	mov	r0, sl
   16cb4:	movw	r3, #34064	; 0x8510
   16cb8:	mov	r1, #1
   16cbc:	movt	r3, #1
   16cc0:	mvn	r2, #0
   16cc4:	str	ip, [sp]
   16cc8:	add	sl, sl, #4
   16ccc:	bl	11420 <__sprintf_chk@plt>
   16cd0:	cmp	r8, r9
   16cd4:	bne	16cac <__assert_fail@plt+0x5760>
   16cd8:	ldrb	r3, [r4, #-1]
   16cdc:	add	fp, fp, r7, lsl #2
   16ce0:	str	r3, [sp]
   16ce4:	mov	r0, fp
   16ce8:	movw	r3, #34064	; 0x8510
   16cec:	mov	r1, #1
   16cf0:	movt	r3, #1
   16cf4:	mvn	r2, #0
   16cf8:	bl	11420 <__sprintf_chk@plt>
   16cfc:	add	fp, fp, #4
   16d00:	add	r3, r7, #1
   16d04:	mov	r7, #0
   16d08:	mov	sl, r7
   16d0c:	mov	r9, #1
   16d10:	add	r6, r6, r3, lsl #2
   16d14:	b	16ba0 <__assert_fail@plt+0x5654>
   16d18:	ldr	ip, [sp, #12]
   16d1c:	add	r0, sp, #88	; 0x58
   16d20:	subs	sl, sl, #1
   16d24:	add	r1, r0, r7
   16d28:	add	r8, r7, #1
   16d2c:	and	r2, r3, #63	; 0x3f
   16d30:	orr	ip, r2, ip, lsl #6
   16d34:	strb	r3, [r1, #-12]
   16d38:	str	ip, [sp, #12]
   16d3c:	movne	r7, r8
   16d40:	movne	r9, #0
   16d44:	bne	16ba0 <__assert_fail@plt+0x5654>
   16d48:	ldr	ip, [sp, #32]
   16d4c:	ldr	r3, [ip, #12]
   16d50:	cmp	r3, #0
   16d54:	beq	16f44 <__assert_fail@plt+0x59f8>
   16d58:	cmp	fp, #0
   16d5c:	beq	16d88 <__assert_fail@plt+0x583c>
   16d60:	add	r9, sp, #76	; 0x4c
   16d64:	mov	r3, sl
   16d68:	ldrb	r2, [r9, r3]
   16d6c:	strb	r2, [fp, r3]
   16d70:	add	r3, r3, #1
   16d74:	cmp	r8, r3
   16d78:	bgt	16d68 <__assert_fail@plt+0x581c>
   16d7c:	bic	r7, r7, r7, asr #31
   16d80:	add	r7, r7, #1
   16d84:	add	fp, fp, r7
   16d88:	mov	r7, #0
   16d8c:	add	r6, r6, r8
   16d90:	mov	r9, r7
   16d94:	b	16ba0 <__assert_fail@plt+0x5654>
   16d98:	cmp	fp, #0
   16d9c:	movne	r3, #92	; 0x5c
   16da0:	strbne	r3, [fp]
   16da4:	ldrbne	r3, [r4, #-1]
   16da8:	addne	fp, fp, #1
   16dac:	cmp	r3, #13
   16db0:	ldrls	pc, [pc, r3, lsl #2]
   16db4:	b	16ea4 <__assert_fail@plt+0x5958>
   16db8:	andeq	r6, r1, r4, lsl #29
   16dbc:	andeq	r6, r1, r4, lsr #29
   16dc0:	andeq	r6, r1, r4, lsr #29
   16dc4:	andeq	r6, r1, r4, lsr #29
   16dc8:	andeq	r6, r1, r4, lsr #29
   16dcc:	andeq	r6, r1, r4, lsr #29
   16dd0:	andeq	r6, r1, r4, lsr #29
   16dd4:	andeq	r6, r1, r4, lsr #29
   16dd8:	andeq	r6, r1, r4, ror #28
   16ddc:	andeq	r6, r1, r4, lsr #29
   16de0:	andeq	r6, r1, ip, asr #28
   16de4:	andeq	r6, r1, ip, lsr #28
   16de8:	andeq	r6, r1, r0, lsl lr
   16dec:	strdeq	r6, [r1], -r0
   16df0:	cmp	fp, #0
   16df4:	add	r6, r6, #2
   16df8:	beq	16c08 <__assert_fail@plt+0x56bc>
   16dfc:	mov	r3, #114	; 0x72
   16e00:	add	fp, fp, #1
   16e04:	strb	r3, [fp, #-1]
   16e08:	mov	r9, #0
   16e0c:	b	16ba0 <__assert_fail@plt+0x5654>
   16e10:	cmp	fp, #0
   16e14:	add	r6, r6, #2
   16e18:	beq	1700c <__assert_fail@plt+0x5ac0>
   16e1c:	mov	r3, #102	; 0x66
   16e20:	add	fp, fp, #1
   16e24:	strb	r3, [fp, #-1]
   16e28:	b	16c08 <__assert_fail@plt+0x56bc>
   16e2c:	cmp	fp, #0
   16e30:	add	r6, r6, #2
   16e34:	beq	1700c <__assert_fail@plt+0x5ac0>
   16e38:	mov	r3, #118	; 0x76
   16e3c:	add	fp, fp, #1
   16e40:	strb	r3, [fp, #-1]
   16e44:	mov	r9, #0
   16e48:	b	16ba0 <__assert_fail@plt+0x5654>
   16e4c:	cmp	fp, #0
   16e50:	add	r6, r6, #2
   16e54:	movne	r3, #110	; 0x6e
   16e58:	addne	fp, fp, #1
   16e5c:	strbne	r3, [fp, #-1]
   16e60:	b	16c08 <__assert_fail@plt+0x56bc>
   16e64:	cmp	fp, #0
   16e68:	add	r6, r6, #2
   16e6c:	beq	16c08 <__assert_fail@plt+0x56bc>
   16e70:	mov	r3, #98	; 0x62
   16e74:	add	fp, fp, #1
   16e78:	strb	r3, [fp, #-1]
   16e7c:	mov	r9, #0
   16e80:	b	16ba0 <__assert_fail@plt+0x5654>
   16e84:	cmp	fp, #0
   16e88:	add	r6, r6, #2
   16e8c:	beq	16c08 <__assert_fail@plt+0x56bc>
   16e90:	mov	r3, #48	; 0x30
   16e94:	add	fp, fp, #1
   16e98:	strb	r3, [fp, #-1]
   16e9c:	mov	r9, #0
   16ea0:	b	16ba0 <__assert_fail@plt+0x5654>
   16ea4:	cmp	fp, #0
   16ea8:	add	r6, r6, #4
   16eac:	beq	1700c <__assert_fail@plt+0x5ac0>
   16eb0:	str	r3, [sp]
   16eb4:	mov	r0, fp
   16eb8:	movw	r3, #33884	; 0x845c
   16ebc:	mov	r1, #1
   16ec0:	movt	r3, #1
   16ec4:	mvn	r2, #0
   16ec8:	add	fp, fp, #3
   16ecc:	bl	11420 <__sprintf_chk@plt>
   16ed0:	b	16c08 <__assert_fail@plt+0x56bc>
   16ed4:	and	r2, r3, #224	; 0xe0
   16ed8:	cmp	r2, #192	; 0xc0
   16edc:	beq	16f84 <__assert_fail@plt+0x5a38>
   16ee0:	and	r2, r3, #240	; 0xf0
   16ee4:	cmp	r2, #224	; 0xe0
   16ee8:	beq	16fd0 <__assert_fail@plt+0x5a84>
   16eec:	and	r2, r3, #248	; 0xf8
   16ef0:	cmp	r2, #240	; 0xf0
   16ef4:	beq	16fec <__assert_fail@plt+0x5aa0>
   16ef8:	and	r2, r3, #252	; 0xfc
   16efc:	cmp	r2, #248	; 0xf8
   16f00:	beq	1708c <__assert_fail@plt+0x5b40>
   16f04:	and	r2, r3, #254	; 0xfe
   16f08:	cmp	r2, #252	; 0xfc
   16f0c:	beq	170a8 <__assert_fail@plt+0x5b5c>
   16f10:	cmp	fp, #0
   16f14:	beq	16f38 <__assert_fail@plt+0x59ec>
   16f18:	str	r3, [sp]
   16f1c:	mov	r0, fp
   16f20:	movw	r3, #34064	; 0x8510
   16f24:	mov	r1, #1
   16f28:	movt	r3, #1
   16f2c:	mvn	r2, #0
   16f30:	bl	11420 <__sprintf_chk@plt>
   16f34:	add	fp, fp, #4
   16f38:	add	r6, r6, #4
   16f3c:	mov	r9, #1
   16f40:	b	16ba0 <__assert_fail@plt+0x5654>
   16f44:	ldr	ip, [sp, #40]	; 0x28
   16f48:	cmp	ip, #0
   16f4c:	beq	16fa0 <__assert_fail@plt+0x5a54>
   16f50:	cmp	fp, #0
   16f54:	beq	16d88 <__assert_fail@plt+0x583c>
   16f58:	add	r9, sp, #76	; 0x4c
   16f5c:	mov	r3, sl
   16f60:	ldrb	r2, [r9, r3]
   16f64:	strb	r2, [fp, r3]
   16f68:	add	r3, r3, #1
   16f6c:	cmp	r8, r3
   16f70:	bgt	16f60 <__assert_fail@plt+0x5a14>
   16f74:	bic	r3, r7, r7, asr #31
   16f78:	add	r3, r3, #1
   16f7c:	add	fp, fp, r3
   16f80:	b	16d88 <__assert_fail@plt+0x583c>
   16f84:	mov	r7, #1
   16f88:	mov	r9, sl
   16f8c:	strb	r3, [sp, #76]	; 0x4c
   16f90:	mov	sl, r7
   16f94:	and	r3, r3, #31
   16f98:	str	r3, [sp, #12]
   16f9c:	b	16ba0 <__assert_fail@plt+0x5654>
   16fa0:	ldr	ip, [sp, #12]
   16fa4:	sub	r3, ip, #128	; 0x80
   16fa8:	cmp	r3, #127	; 0x7f
   16fac:	bhi	17014 <__assert_fail@plt+0x5ac8>
   16fb0:	cmp	fp, #0
   16fb4:	add	r6, r6, #1
   16fb8:	beq	17008 <__assert_fail@plt+0x5abc>
   16fbc:	strb	ip, [fp]
   16fc0:	mov	r7, r8
   16fc4:	add	fp, fp, #1
   16fc8:	ldr	r9, [sp, #40]	; 0x28
   16fcc:	b	16ba0 <__assert_fail@plt+0x5654>
   16fd0:	mov	r9, sl
   16fd4:	strb	r3, [sp, #76]	; 0x4c
   16fd8:	mov	r7, #1
   16fdc:	and	r3, r3, #15
   16fe0:	mov	sl, #2
   16fe4:	str	r3, [sp, #12]
   16fe8:	b	16ba0 <__assert_fail@plt+0x5654>
   16fec:	mov	r9, sl
   16ff0:	strb	r3, [sp, #76]	; 0x4c
   16ff4:	mov	r7, #1
   16ff8:	and	r3, r3, #7
   16ffc:	mov	sl, #3
   17000:	str	r3, [sp, #12]
   17004:	b	16ba0 <__assert_fail@plt+0x5654>
   17008:	mov	r7, r8
   1700c:	mov	r9, fp
   17010:	b	16ba0 <__assert_fail@plt+0x5654>
   17014:	cmp	fp, #0
   17018:	beq	1707c <__assert_fail@plt+0x5b30>
   1701c:	ldr	ip, [sp, #40]	; 0x28
   17020:	add	r9, sp, #76	; 0x4c
   17024:	str	sl, [sp, #48]	; 0x30
   17028:	str	r4, [sp, #52]	; 0x34
   1702c:	mov	r4, fp
   17030:	mov	sl, ip
   17034:	str	fp, [sp, #20]
   17038:	ldrb	r2, [r9, sl]
   1703c:	mov	r0, r4
   17040:	movw	r3, #34064	; 0x8510
   17044:	add	sl, sl, #1
   17048:	movt	r3, #1
   1704c:	mov	r1, #1
   17050:	str	r2, [sp]
   17054:	mvn	r2, #0
   17058:	bl	11420 <__sprintf_chk@plt>
   1705c:	cmp	r8, sl
   17060:	add	r4, r4, #4
   17064:	bgt	17038 <__assert_fail@plt+0x5aec>
   17068:	bic	r3, r7, r7, asr #31
   1706c:	ldr	sl, [sp, #48]	; 0x30
   17070:	add	r3, r3, #1
   17074:	ldr	r4, [sp, #52]	; 0x34
   17078:	add	fp, fp, r3, lsl #2
   1707c:	mov	r7, #0
   17080:	add	r6, r6, r8, lsl #2
   17084:	mov	r9, r7
   17088:	b	16ba0 <__assert_fail@plt+0x5654>
   1708c:	mov	r9, sl
   17090:	strb	r3, [sp, #76]	; 0x4c
   17094:	mov	r7, #1
   17098:	and	r3, r3, #3
   1709c:	mov	sl, #4
   170a0:	str	r3, [sp, #12]
   170a4:	b	16ba0 <__assert_fail@plt+0x5654>
   170a8:	mov	r9, sl
   170ac:	strb	r3, [sp, #76]	; 0x4c
   170b0:	mov	r7, #1
   170b4:	and	r3, r3, #1
   170b8:	mov	sl, #5
   170bc:	str	r3, [sp, #12]
   170c0:	b	16ba0 <__assert_fail@plt+0x5654>
   170c4:	movw	r4, #37292	; 0x91ac
   170c8:	movt	r4, #2
   170cc:	mov	r6, #0
   170d0:	movw	r1, #33976	; 0x84b8
   170d4:	ldr	r0, [r4]
   170d8:	movt	r1, #1
   170dc:	strb	r6, [fp]
   170e0:	bl	11354 <iconv_open@plt>
   170e4:	cmn	r0, #1
   170e8:	mov	r5, r0
   170ec:	beq	171ec <__assert_fail@plt+0x5ca0>
   170f0:	ldr	ip, [sp, #24]
   170f4:	rsb	r2, ip, fp
   170f8:	str	r2, [sp, #68]	; 0x44
   170fc:	add	r3, r2, #1
   17100:	str	ip, [sp, #60]	; 0x3c
   17104:	lsl	r0, r3, #4
   17108:	str	r0, [sp, #72]	; 0x48
   1710c:	cmp	r3, r0, lsr #4
   17110:	bne	1722c <__assert_fail@plt+0x5ce0>
   17114:	bl	111f8 <gcry_xmalloc@plt>
   17118:	add	r3, sp, #72	; 0x48
   1711c:	add	r1, sp, #60	; 0x3c
   17120:	str	r3, [sp]
   17124:	add	r2, sp, #68	; 0x44
   17128:	add	r3, sp, #64	; 0x40
   1712c:	mov	r7, r0
   17130:	mov	r0, r5
   17134:	str	r7, [sp, #64]	; 0x40
   17138:	bl	11234 <iconv@plt>
   1713c:	cmn	r0, #1
   17140:	beq	17164 <__assert_fail@plt+0x5c18>
   17144:	ldr	r3, [sp, #64]	; 0x40
   17148:	ldr	r0, [sp, #24]
   1714c:	strb	r6, [r3]
   17150:	bl	112ac <gcry_free@plt>
   17154:	mov	r0, r5
   17158:	bl	11228 <iconv_close@plt>
   1715c:	mov	r0, r7
   17160:	b	16c68 <__assert_fail@plt+0x571c>
   17164:	movw	r6, #37468	; 0x925c
   17168:	movt	r6, #2
   1716c:	ldr	r0, [r6, #20]
   17170:	cmp	r0, #0
   17174:	beq	171ac <__assert_fail@plt+0x5c60>
   17178:	ldr	r0, [sp, #24]
   1717c:	mov	r3, #1
   17180:	str	r3, [r6, #20]
   17184:	bl	112ac <gcry_free@plt>
   17188:	mov	r0, r7
   1718c:	bl	112ac <gcry_free@plt>
   17190:	ldr	r0, [sp, #36]	; 0x24
   17194:	ldr	r1, [sp, #28]
   17198:	mov	r3, #0
   1719c:	ldr	r2, [sp, #16]
   171a0:	bl	16adc <__assert_fail@plt+0x5590>
   171a4:	mov	r7, r0
   171a8:	b	17154 <__assert_fail@plt+0x5c08>
   171ac:	mov	r2, #5
   171b0:	movw	r1, #34084	; 0x8524
   171b4:	movt	r1, #1
   171b8:	bl	112d0 <dcgettext@plt>
   171bc:	mov	r8, r0
   171c0:	bl	11414 <__errno_location@plt>
   171c4:	ldr	r4, [r4]
   171c8:	ldr	r0, [r0]
   171cc:	bl	1136c <strerror@plt>
   171d0:	mov	r2, r4
   171d4:	movw	r1, #33976	; 0x84b8
   171d8:	movt	r1, #1
   171dc:	mov	r3, r0
   171e0:	mov	r0, r8
   171e4:	bl	1521c <__assert_fail@plt+0x3cd0>
   171e8:	b	17178 <__assert_fail@plt+0x5c2c>
   171ec:	ldr	r0, [r4]
   171f0:	mov	r2, #1
   171f4:	movw	r1, #33976	; 0x84b8
   171f8:	movt	r1, #1
   171fc:	bl	169e0 <__assert_fail@plt+0x5494>
   17200:	ldr	r0, [sp, #24]
   17204:	bl	112ac <gcry_free@plt>
   17208:	movw	r3, #37468	; 0x925c
   1720c:	movt	r3, #2
   17210:	ldr	r0, [sp, #36]	; 0x24
   17214:	ldr	r1, [sp, #28]
   17218:	ldr	r2, [sp, #16]
   1721c:	ldr	r3, [r3, #16]
   17220:	bl	16adc <__assert_fail@plt+0x5590>
   17224:	b	16c68 <__assert_fail@plt+0x571c>
   17228:	bl	112dc <__stack_chk_fail@plt>
   1722c:	movw	r0, #34072	; 0x8518
   17230:	movw	r2, #33956	; 0x84a4
   17234:	movt	r0, #1
   17238:	movt	r2, #1
   1723c:	movw	r1, #586	; 0x24a
   17240:	bl	154a4 <__assert_fail@plt+0x3f58>
   17244:	push	{r4, r5, r6, lr}
   17248:	subs	r4, r0, #0
   1724c:	beq	17380 <__assert_fail@plt+0x5e34>
   17250:	mov	r0, r4
   17254:	bl	113fc <strlen@plt>
   17258:	cmp	r0, #3
   1725c:	bhi	17348 <__assert_fail@plt+0x5dfc>
   17260:	ldrb	r3, [r4]
   17264:	mov	r5, r4
   17268:	cmp	r3, #0
   1726c:	bne	1729c <__assert_fail@plt+0x5d50>
   17270:	movw	r2, #37292	; 0x91ac
   17274:	movw	r3, #37468	; 0x925c
   17278:	movt	r2, #2
   1727c:	movt	r3, #2
   17280:	mov	r0, #0
   17284:	movw	r1, #34052	; 0x8504
   17288:	str	r0, [r3, #12]
   1728c:	movt	r1, #1
   17290:	str	r0, [r3, #16]
   17294:	str	r1, [r2]
   17298:	pop	{r4, r5, r6, pc}
   1729c:	movw	r1, #34056	; 0x8508
   172a0:	mov	r0, r5
   172a4:	movt	r1, #1
   172a8:	bl	16544 <__assert_fail@plt+0x4ff8>
   172ac:	cmp	r0, #0
   172b0:	beq	17270 <__assert_fail@plt+0x5d24>
   172b4:	movw	r1, #34132	; 0x8554
   172b8:	mov	r0, r5
   172bc:	movt	r1, #1
   172c0:	bl	16544 <__assert_fail@plt+0x4ff8>
   172c4:	cmp	r0, #0
   172c8:	beq	17270 <__assert_fail@plt+0x5d24>
   172cc:	movw	r1, #34136	; 0x8558
   172d0:	mov	r0, r5
   172d4:	movt	r1, #1
   172d8:	bl	16544 <__assert_fail@plt+0x4ff8>
   172dc:	cmp	r0, #0
   172e0:	beq	17270 <__assert_fail@plt+0x5d24>
   172e4:	movw	r1, #34144	; 0x8560
   172e8:	mov	r0, r5
   172ec:	movt	r1, #1
   172f0:	bl	16544 <__assert_fail@plt+0x4ff8>
   172f4:	cmp	r0, #0
   172f8:	beq	17270 <__assert_fail@plt+0x5d24>
   172fc:	movw	r1, #34160	; 0x8570
   17300:	mov	r0, r5
   17304:	movt	r1, #1
   17308:	movw	r6, #33976	; 0x84b8
   1730c:	bl	16544 <__assert_fail@plt+0x4ff8>
   17310:	movt	r6, #1
   17314:	cmp	r0, #0
   17318:	bne	17390 <__assert_fail@plt+0x5e44>
   1731c:	movw	r2, #37292	; 0x91ac
   17320:	movw	r3, #37468	; 0x925c
   17324:	movt	r2, #2
   17328:	movt	r3, #2
   1732c:	mov	r1, #0
   17330:	mov	ip, #1
   17334:	str	r6, [r2]
   17338:	mov	r0, r1
   1733c:	str	ip, [r3, #12]
   17340:	str	r1, [r3, #16]
   17344:	pop	{r4, r5, r6, pc}
   17348:	movw	r1, #34128	; 0x8550
   1734c:	mov	r0, r4
   17350:	movt	r1, #1
   17354:	mov	r2, #3
   17358:	bl	16698 <__assert_fail@plt+0x514c>
   1735c:	cmp	r0, #0
   17360:	bne	17260 <__assert_fail@plt+0x5d14>
   17364:	ldrb	r3, [r4, #3]
   17368:	cmp	r3, #45	; 0x2d
   1736c:	cmpne	r3, #95	; 0x5f
   17370:	addne	r5, r4, #3
   17374:	addeq	r5, r4, #4
   17378:	ldrbeq	r3, [r4, #4]
   1737c:	b	17268 <__assert_fail@plt+0x5d1c>
   17380:	mov	r0, #14
   17384:	bl	114d4 <nl_langinfo@plt>
   17388:	mov	r4, r0
   1738c:	b	17250 <__assert_fail@plt+0x5d04>
   17390:	mov	r0, r5
   17394:	mov	r1, r6
   17398:	bl	16544 <__assert_fail@plt+0x4ff8>
   1739c:	cmp	r0, #0
   173a0:	beq	1731c <__assert_fail@plt+0x5dd0>
   173a4:	mov	r0, r4
   173a8:	mov	r1, r6
   173ac:	bl	11354 <iconv_open@plt>
   173b0:	cmn	r0, #1
   173b4:	mov	r5, r0
   173b8:	beq	17408 <__assert_fail@plt+0x5ebc>
   173bc:	bl	11228 <iconv_close@plt>
   173c0:	mov	r0, r6
   173c4:	mov	r1, r4
   173c8:	bl	11354 <iconv_open@plt>
   173cc:	cmn	r0, #1
   173d0:	mov	r5, r0
   173d4:	beq	17420 <__assert_fail@plt+0x5ed4>
   173d8:	bl	11228 <iconv_close@plt>
   173dc:	movw	r2, #37292	; 0x91ac
   173e0:	movw	r3, #37468	; 0x925c
   173e4:	movt	r2, #2
   173e8:	movt	r3, #2
   173ec:	mov	r1, #0
   173f0:	str	r4, [r2]
   173f4:	mov	r0, r1
   173f8:	mov	r2, #1
   173fc:	str	r1, [r3, #12]
   17400:	str	r2, [r3, #16]
   17404:	pop	{r4, r5, r6, pc}
   17408:	mov	r0, r4
   1740c:	mov	r1, r6
   17410:	mov	r2, #0
   17414:	bl	169e0 <__assert_fail@plt+0x5494>
   17418:	mov	r0, r5
   1741c:	pop	{r4, r5, r6, pc}
   17420:	mov	r0, r6
   17424:	mov	r1, r4
   17428:	mov	r2, #0
   1742c:	bl	169e0 <__assert_fail@plt+0x5494>
   17430:	mov	r0, r5
   17434:	pop	{r4, r5, r6, pc}
   17438:	movw	r3, #37292	; 0x91ac
   1743c:	movt	r3, #2
   17440:	ldr	r0, [r3]
   17444:	bx	lr
   17448:	movw	r3, #37468	; 0x925c
   1744c:	movt	r3, #2
   17450:	ldr	r0, [r3, #12]
   17454:	bx	lr
   17458:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1745c:	movw	r5, #37468	; 0x925c
   17460:	movt	r5, #2
   17464:	movw	r4, #37296	; 0x91b0
   17468:	movt	r4, #2
   1746c:	sub	sp, sp, #36	; 0x24
   17470:	ldr	r6, [r5, #12]
   17474:	mov	r7, r0
   17478:	ldr	r3, [r4]
   1747c:	cmp	r6, #0
   17480:	str	r3, [sp, #28]
   17484:	bne	17550 <__assert_fail@plt+0x6004>
   17488:	ldr	r2, [r5, #16]
   1748c:	cmp	r2, #0
   17490:	bne	17558 <__assert_fail@plt+0x600c>
   17494:	ldrb	r3, [r0]
   17498:	cmp	r3, #0
   1749c:	beq	17634 <__assert_fail@plt+0x60e8>
   174a0:	mov	ip, r0
   174a4:	tst	r3, #128	; 0x80
   174a8:	ldrb	r3, [ip, #1]!
   174ac:	addeq	r2, r2, #1
   174b0:	addne	r2, r2, #2
   174b4:	cmp	r3, #0
   174b8:	bne	174a4 <__assert_fail@plt+0x5f58>
   174bc:	add	r0, r2, #1
   174c0:	bl	111f8 <gcry_xmalloc@plt>
   174c4:	ldrb	r3, [r7]
   174c8:	cmp	r3, #0
   174cc:	beq	1769c <__assert_fail@plt+0x6150>
   174d0:	add	r1, r7, #1
   174d4:	mov	r2, r0
   174d8:	b	174e8 <__assert_fail@plt+0x5f9c>
   174dc:	ldrb	r3, [r1], #1
   174e0:	cmp	r3, #0
   174e4:	beq	17530 <__assert_fail@plt+0x5fe4>
   174e8:	tst	r3, #128	; 0x80
   174ec:	strbeq	r3, [r2]
   174f0:	addeq	r2, r2, #1
   174f4:	beq	174dc <__assert_fail@plt+0x5f90>
   174f8:	lsr	r3, r3, #6
   174fc:	mov	ip, r2
   17500:	mvn	r3, r3, lsl #26
   17504:	mvn	r3, r3, lsr #26
   17508:	strb	r3, [ip], #2
   1750c:	ldrb	r3, [r1, #-1]
   17510:	and	r3, r3, #63	; 0x3f
   17514:	mvn	r3, r3, lsl #25
   17518:	mvn	r3, r3, lsr #25
   1751c:	strb	r3, [r2, #1]
   17520:	ldrb	r3, [r1], #1
   17524:	mov	r2, ip
   17528:	cmp	r3, #0
   1752c:	bne	174e8 <__assert_fail@plt+0x5f9c>
   17530:	mov	r3, #0
   17534:	strb	r3, [r2]
   17538:	ldr	r2, [sp, #28]
   1753c:	ldr	r3, [r4]
   17540:	cmp	r2, r3
   17544:	bne	176a4 <__assert_fail@plt+0x6158>
   17548:	add	sp, sp, #36	; 0x24
   1754c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17550:	bl	11450 <gcry_xstrdup@plt>
   17554:	b	17538 <__assert_fail@plt+0x5fec>
   17558:	movw	r9, #37292	; 0x91ac
   1755c:	movt	r9, #2
   17560:	movw	r0, #33976	; 0x84b8
   17564:	movt	r0, #1
   17568:	ldr	r1, [r9]
   1756c:	bl	11354 <iconv_open@plt>
   17570:	cmn	r0, #1
   17574:	mov	r8, r0
   17578:	beq	1767c <__assert_fail@plt+0x6130>
   1757c:	ldrb	r3, [r7]
   17580:	cmp	r3, #0
   17584:	moveq	r6, r3
   17588:	moveq	r0, #1
   1758c:	beq	175b0 <__assert_fail@plt+0x6064>
   17590:	mov	r2, r7
   17594:	tst	r3, #128	; 0x80
   17598:	ldrb	r3, [r2, #1]!
   1759c:	addeq	r6, r6, #1
   175a0:	addne	r6, r6, #6
   175a4:	cmp	r3, #0
   175a8:	bne	17594 <__assert_fail@plt+0x6048>
   175ac:	add	r0, r6, #1
   175b0:	bl	111f8 <gcry_xmalloc@plt>
   175b4:	str	r7, [sp, #12]
   175b8:	mov	sl, r0
   175bc:	mov	r0, r7
   175c0:	bl	113fc <strlen@plt>
   175c4:	add	r3, sp, #24
   175c8:	add	r1, sp, #12
   175cc:	str	r3, [sp]
   175d0:	add	r2, sp, #20
   175d4:	add	r3, sp, #16
   175d8:	str	sl, [sp, #16]
   175dc:	str	r6, [sp, #24]
   175e0:	str	r0, [sp, #20]
   175e4:	mov	r0, r8
   175e8:	bl	11234 <iconv@plt>
   175ec:	cmn	r0, #1
   175f0:	beq	17610 <__assert_fail@plt+0x60c4>
   175f4:	ldr	r3, [sp, #16]
   175f8:	mov	r2, #0
   175fc:	strb	r2, [r3]
   17600:	mov	r0, r8
   17604:	bl	11228 <iconv_close@plt>
   17608:	mov	r0, sl
   1760c:	b	17538 <__assert_fail@plt+0x5fec>
   17610:	ldr	r0, [r5, #24]
   17614:	cmp	r0, #0
   17618:	beq	1763c <__assert_fail@plt+0x60f0>
   1761c:	mov	r1, r7
   17620:	mov	r0, sl
   17624:	mov	r3, #1
   17628:	str	r3, [r5, #24]
   1762c:	bl	11318 <strcpy@plt>
   17630:	b	17600 <__assert_fail@plt+0x60b4>
   17634:	mov	r0, #1
   17638:	b	174c0 <__assert_fail@plt+0x5f74>
   1763c:	mov	r2, #5
   17640:	movw	r1, #34084	; 0x8524
   17644:	movt	r1, #1
   17648:	bl	112d0 <dcgettext@plt>
   1764c:	mov	fp, r0
   17650:	bl	11414 <__errno_location@plt>
   17654:	ldr	r6, [r9]
   17658:	ldr	r0, [r0]
   1765c:	bl	1136c <strerror@plt>
   17660:	mov	r1, r6
   17664:	movw	r2, #33976	; 0x84b8
   17668:	movt	r2, #1
   1766c:	mov	r3, r0
   17670:	mov	r0, fp
   17674:	bl	1521c <__assert_fail@plt+0x3cd0>
   17678:	b	1761c <__assert_fail@plt+0x60d0>
   1767c:	ldr	r1, [r9]
   17680:	mov	r2, #1
   17684:	movw	r0, #33976	; 0x84b8
   17688:	movt	r0, #1
   1768c:	bl	169e0 <__assert_fail@plt+0x5494>
   17690:	mov	r0, r7
   17694:	bl	17458 <__assert_fail@plt+0x5f0c>
   17698:	b	17538 <__assert_fail@plt+0x5fec>
   1769c:	mov	r2, r0
   176a0:	b	17530 <__assert_fail@plt+0x5fe4>
   176a4:	bl	112dc <__stack_chk_fail@plt>
   176a8:	movw	r3, #37468	; 0x925c
   176ac:	movt	r3, #2
   176b0:	ldr	r3, [r3, #16]
   176b4:	b	16adc <__assert_fail@plt+0x5590>
   176b8:	b	11354 <iconv_open@plt>
   176bc:	b	11234 <iconv@plt>
   176c0:	b	11228 <iconv_close@plt>
   176c4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   176c8:	mov	r7, r0
   176cc:	ldr	r6, [pc, #76]	; 17720 <__assert_fail@plt+0x61d4>
   176d0:	mov	r8, r1
   176d4:	ldr	r5, [pc, #72]	; 17724 <__assert_fail@plt+0x61d8>
   176d8:	mov	r9, r2
   176dc:	add	r6, pc, r6
   176e0:	bl	111d8 <_init@@Base>
   176e4:	add	r5, pc, r5
   176e8:	rsb	r6, r5, r6
   176ec:	asrs	r6, r6, #2
   176f0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   176f4:	sub	r5, r5, #4
   176f8:	mov	r4, #0
   176fc:	add	r4, r4, #1
   17700:	ldr	r3, [r5, #4]!
   17704:	mov	r0, r7
   17708:	mov	r1, r8
   1770c:	mov	r2, r9
   17710:	blx	r3
   17714:	cmp	r4, r6
   17718:	bne	176fc <__assert_fail@plt+0x61b0>
   1771c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17720:	strdeq	r1, [r1], -r4
   17724:	andeq	r1, r1, r8, ror #15
   17728:	bx	lr

Disassembly of section .fini:

0001772c <_fini@@Base>:
   1772c:	push	{r3, lr}
   17730:	pop	{r3, pc}
