
centos-preinstalled/gpg-agent:     file format elf32-littlearm


Disassembly of section .init:

00013930 <_init@@Base>:
   13930:	push	{r3, lr}
   13934:	bl	16454 <__assert_fail@plt+0x1dfc>
   13938:	pop	{r3, pc}

Disassembly of section .plt:

0001393c <fdopen@plt-0x14>:
   1393c:	push	{lr}		; (str lr, [sp, #-4]!)
   13940:	ldr	lr, [pc, #4]	; 1394c <_init@@Base+0x1c>
   13944:	add	lr, pc, lr
   13948:	ldr	pc, [lr, #8]!
   1394c:			; <UNDEFINED> instruction: 0x000476b4

00013950 <fdopen@plt>:
   13950:	add	ip, pc, #0, 12
   13954:	add	ip, ip, #290816	; 0x47000
   13958:	ldr	pc, [ip, #1716]!	; 0x6b4

0001395c <pth_init@plt>:
   1395c:	add	ip, pc, #0, 12
   13960:	add	ip, ip, #290816	; 0x47000
   13964:	ldr	pc, [ip, #1708]!	; 0x6ac

00013968 <pth_event@plt>:
   13968:	add	ip, pc, #0, 12
   1396c:	add	ip, ip, #290816	; 0x47000
   13970:	ldr	pc, [ip, #1700]!	; 0x6a4

00013974 <calloc@plt>:
   13974:	add	ip, pc, #0, 12
   13978:	add	ip, ip, #290816	; 0x47000
   1397c:	ldr	pc, [ip, #1692]!	; 0x69c

00013980 <pth_mutex_init@plt>:
   13980:	add	ip, pc, #0, 12
   13984:	add	ip, ip, #290816	; 0x47000
   13988:	ldr	pc, [ip, #1684]!	; 0x694

0001398c <gcry_xmalloc@plt>:
   1398c:	add	ip, pc, #0, 12
   13990:	add	ip, ip, #290816	; 0x47000
   13994:	ldr	pc, [ip, #1676]!	; 0x68c

00013998 <strstr@plt>:
   13998:	add	ip, pc, #0, 12
   1399c:	add	ip, ip, #290816	; 0x47000
   139a0:	ldr	pc, [ip, #1668]!	; 0x684

000139a4 <raise@plt>:
   139a4:	add	ip, pc, #0, 12
   139a8:	add	ip, ip, #290816	; 0x47000
   139ac:	ldr	pc, [ip, #1660]!	; 0x67c

000139b0 <gcry_sexp_build_array@plt>:
   139b0:	add	ip, pc, #0, 12
   139b4:	add	ip, ip, #290816	; 0x47000
   139b8:	ldr	pc, [ip, #1652]!	; 0x674

000139bc <gmtime_r@plt>:
   139bc:	add	ip, pc, #0, 12
   139c0:	add	ip, ip, #290816	; 0x47000
   139c4:	ldr	pc, [ip, #1644]!	; 0x66c

000139c8 <gcry_malloc@plt>:
   139c8:	add	ip, pc, #0, 12
   139cc:	add	ip, ip, #290816	; 0x47000
   139d0:	ldr	pc, [ip, #1636]!	; 0x664

000139d4 <gcry_mpi_cmp@plt>:
   139d4:	add	ip, pc, #0, 12
   139d8:	add	ip, ip, #290816	; 0x47000
   139dc:	ldr	pc, [ip, #1628]!	; 0x65c

000139e0 <gcry_cipher_get_algo_blklen@plt>:
   139e0:	add	ip, pc, #0, 12
   139e4:	add	ip, ip, #290816	; 0x47000
   139e8:	ldr	pc, [ip, #1620]!	; 0x654

000139ec <getpwnam@plt>:
   139ec:	add	ip, pc, #0, 12
   139f0:	add	ip, ip, #290816	; 0x47000
   139f4:	ldr	pc, [ip, #1612]!	; 0x64c

000139f8 <fsync@plt>:
   139f8:	add	ip, pc, #0, 12
   139fc:	add	ip, ip, #290816	; 0x47000
   13a00:	ldr	pc, [ip, #1604]!	; 0x644

00013a04 <iconv_close@plt>:
   13a04:	add	ip, pc, #0, 12
   13a08:	add	ip, ip, #290816	; 0x47000
   13a0c:	ldr	pc, [ip, #1596]!	; 0x63c

00013a10 <pth_event_free@plt>:
   13a10:	add	ip, pc, #0, 12
   13a14:	add	ip, ip, #290816	; 0x47000
   13a18:	ldr	pc, [ip, #1588]!	; 0x634

00013a1c <iconv@plt>:
   13a1c:	add	ip, pc, #0, 12
   13a20:	add	ip, ip, #290816	; 0x47000
   13a24:	ldr	pc, [ip, #1580]!	; 0x62c

00013a28 <strcmp@plt>:
   13a28:	add	ip, pc, #0, 12
   13a2c:	add	ip, ip, #290816	; 0x47000
   13a30:	ldr	pc, [ip, #1572]!	; 0x624

00013a34 <gcry_sexp_cadr@plt>:
   13a34:	add	ip, pc, #0, 12
   13a38:	add	ip, ip, #290816	; 0x47000
   13a3c:	ldr	pc, [ip, #1564]!	; 0x61c

00013a40 <gcry_md_get_algo_dlen@plt>:
   13a40:	add	ip, pc, #0, 12
   13a44:	add	ip, ip, #290816	; 0x47000
   13a48:	ldr	pc, [ip, #1556]!	; 0x614

00013a4c <strtol@plt>:
   13a4c:	add	ip, pc, #0, 12
   13a50:	add	ip, ip, #290816	; 0x47000
   13a54:	ldr	pc, [ip, #1548]!	; 0x60c

00013a58 <gcry_calloc_secure@plt>:
   13a58:	add	ip, pc, #0, 12
   13a5c:	add	ip, ip, #290816	; 0x47000
   13a60:	ldr	pc, [ip, #1540]!	; 0x604

00013a64 <gpg_strerror@plt>:
   13a64:	add	ip, pc, #0, 12
   13a68:	add	ip, ip, #290816	; 0x47000
   13a6c:	ldr	pc, [ip, #1532]!	; 0x5fc

00013a70 <getpwuid@plt>:
   13a70:	add	ip, pc, #0, 12
   13a74:	add	ip, ip, #290816	; 0x47000
   13a78:	ldr	pc, [ip, #1524]!	; 0x5f4

00013a7c <strcspn@plt>:
   13a7c:	add	ip, pc, #0, 12
   13a80:	add	ip, ip, #290816	; 0x47000
   13a84:	ldr	pc, [ip, #1516]!	; 0x5ec

00013a88 <times@plt>:
   13a88:	add	ip, pc, #0, 12
   13a8c:	add	ip, ip, #290816	; 0x47000
   13a90:	ldr	pc, [ip, #1508]!	; 0x5e4

00013a94 <pth_waitpid@plt>:
   13a94:	add	ip, pc, #0, 12
   13a98:	add	ip, ip, #290816	; 0x47000
   13a9c:	ldr	pc, [ip, #1500]!	; 0x5dc

00013aa0 <assuan_set_assuan_log_stream@plt>:
   13aa0:	add	ip, pc, #0, 12
   13aa4:	add	ip, ip, #290816	; 0x47000
   13aa8:	ldr	pc, [ip, #1492]!	; 0x5d4

00013aac <gcry_cipher_open@plt>:
   13aac:	add	ip, pc, #0, 12
   13ab0:	add	ip, ip, #290816	; 0x47000
   13ab4:	ldr	pc, [ip, #1484]!	; 0x5cc

00013ab8 <setrlimit64@plt>:
   13ab8:	add	ip, pc, #0, 12
   13abc:	add	ip, ip, #290816	; 0x47000
   13ac0:	ldr	pc, [ip, #1476]!	; 0x5c4

00013ac4 <read@plt>:
   13ac4:	add	ip, pc, #0, 12
   13ac8:	add	ip, ip, #290816	; 0x47000
   13acc:	ldr	pc, [ip, #1468]!	; 0x5bc

00013ad0 <pth_ctrl@plt>:
   13ad0:	add	ip, pc, #0, 12
   13ad4:	add	ip, ip, #290816	; 0x47000
   13ad8:	ldr	pc, [ip, #1460]!	; 0x5b4

00013adc <mktime@plt>:
   13adc:	add	ip, pc, #0, 12
   13ae0:	add	ip, ip, #290816	; 0x47000
   13ae4:	ldr	pc, [ip, #1452]!	; 0x5ac

00013ae8 <fflush@plt>:
   13ae8:	add	ip, pc, #0, 12
   13aec:	add	ip, ip, #290816	; 0x47000
   13af0:	ldr	pc, [ip, #1444]!	; 0x5a4

00013af4 <pth_self@plt>:
   13af4:	add	ip, pc, #0, 12
   13af8:	add	ip, ip, #290816	; 0x47000
   13afc:	ldr	pc, [ip, #1436]!	; 0x59c

00013b00 <gcry_md_close@plt>:
   13b00:	add	ip, pc, #0, 12
   13b04:	add	ip, ip, #290816	; 0x47000
   13b08:	ldr	pc, [ip, #1428]!	; 0x594

00013b0c <getuid@plt>:
   13b0c:	add	ip, pc, #0, 12
   13b10:	add	ip, ip, #290816	; 0x47000
   13b14:	ldr	pc, [ip, #1420]!	; 0x58c

00013b18 <sigprocmask@plt>:
   13b18:	add	ip, pc, #0, 12
   13b1c:	add	ip, ip, #290816	; 0x47000
   13b20:	ldr	pc, [ip, #1412]!	; 0x584

00013b24 <memmove@plt>:
   13b24:	add	ip, pc, #0, 12
   13b28:	add	ip, ip, #290816	; 0x47000
   13b2c:	ldr	pc, [ip, #1404]!	; 0x57c

00013b30 <free@plt>:
   13b30:	add	ip, pc, #0, 12
   13b34:	add	ip, ip, #290816	; 0x47000
   13b38:	ldr	pc, [ip, #1396]!	; 0x574

00013b3c <gcry_md_read@plt>:
   13b3c:	add	ip, pc, #0, 12
   13b40:	add	ip, ip, #290816	; 0x47000
   13b44:	ldr	pc, [ip, #1388]!	; 0x56c

00013b48 <gcry_md_open@plt>:
   13b48:	add	ip, pc, #0, 12
   13b4c:	add	ip, ip, #290816	; 0x47000
   13b50:	ldr	pc, [ip, #1380]!	; 0x564

00013b54 <fgets@plt>:
   13b54:	add	ip, pc, #0, 12
   13b58:	add	ip, ip, #290816	; 0x47000
   13b5c:	ldr	pc, [ip, #1372]!	; 0x55c

00013b60 <gcry_cipher_setkey@plt>:
   13b60:	add	ip, pc, #0, 12
   13b64:	add	ip, ip, #290816	; 0x47000
   13b68:	ldr	pc, [ip, #1364]!	; 0x554

00013b6c <gpg_err_code_from_errno@plt>:
   13b6c:	add	ip, pc, #0, 12
   13b70:	add	ip, ip, #290816	; 0x47000
   13b74:	ldr	pc, [ip, #1356]!	; 0x54c

00013b78 <pth_attr_set@plt>:
   13b78:	add	ip, pc, #0, 12
   13b7c:	add	ip, ip, #290816	; 0x47000
   13b80:	ldr	pc, [ip, #1348]!	; 0x544

00013b84 <ferror@plt>:
   13b84:	add	ip, pc, #0, 12
   13b88:	add	ip, ip, #290816	; 0x47000
   13b8c:	ldr	pc, [ip, #1340]!	; 0x53c

00013b90 <_exit@plt>:
   13b90:	add	ip, pc, #0, 12
   13b94:	add	ip, ip, #290816	; 0x47000
   13b98:	ldr	pc, [ip, #1332]!	; 0x534

00013b9c <pth_select@plt>:
   13b9c:	add	ip, pc, #0, 12
   13ba0:	add	ip, ip, #290816	; 0x47000
   13ba4:	ldr	pc, [ip, #1324]!	; 0x52c

00013ba8 <memcpy@plt>:
   13ba8:	add	ip, pc, #0, 12
   13bac:	add	ip, ip, #290816	; 0x47000
   13bb0:	ldr	pc, [ip, #1316]!	; 0x524

00013bb4 <__memset_chk@plt>:
   13bb4:	add	ip, pc, #0, 12
   13bb8:	add	ip, ip, #290816	; 0x47000
   13bbc:	ldr	pc, [ip, #1308]!	; 0x51c

00013bc0 <execvp@plt>:
   13bc0:	add	ip, pc, #0, 12
   13bc4:	add	ip, ip, #290816	; 0x47000
   13bc8:	ldr	pc, [ip, #1300]!	; 0x514

00013bcc <pth_spawn@plt>:
   13bcc:	add	ip, pc, #0, 12
   13bd0:	add	ip, ip, #290816	; 0x47000
   13bd4:	ldr	pc, [ip, #1292]!	; 0x50c

00013bd8 <gcry_sexp_nth_data@plt>:
   13bd8:	add	ip, pc, #0, 12
   13bdc:	add	ip, ip, #290816	; 0x47000
   13be0:	ldr	pc, [ip, #1284]!	; 0x504

00013be4 <gcry_sexp_release@plt>:
   13be4:	add	ip, pc, #0, 12
   13be8:	add	ip, ip, #290816	; 0x47000
   13bec:	ldr	pc, [ip, #1276]!	; 0x4fc

00013bf0 <gcry_sexp_sscan@plt>:
   13bf0:	add	ip, pc, #0, 12
   13bf4:	add	ip, ip, #290816	; 0x47000
   13bf8:	ldr	pc, [ip, #1268]!	; 0x4f4

00013bfc <assuan_set_assuan_log_prefix@plt>:
   13bfc:	add	ip, pc, #0, 12
   13c00:	add	ip, ip, #290816	; 0x47000
   13c04:	ldr	pc, [ip, #1260]!	; 0x4ec

00013c08 <time@plt>:
   13c08:	add	ip, pc, #0, 12
   13c0c:	add	ip, ip, #290816	; 0x47000
   13c10:	ldr	pc, [ip, #1252]!	; 0x4e4

00013c14 <pth_event_isolate@plt>:
   13c14:	add	ip, pc, #0, 12
   13c18:	add	ip, ip, #290816	; 0x47000
   13c1c:	ldr	pc, [ip, #1244]!	; 0x4dc

00013c20 <rmdir@plt>:
   13c20:	add	ip, pc, #0, 12
   13c24:	add	ip, ip, #290816	; 0x47000
   13c28:	ldr	pc, [ip, #1236]!	; 0x4d4

00013c2c <assuan_write_status@plt>:
   13c2c:	add	ip, pc, #0, 12
   13c30:	add	ip, ip, #290816	; 0x47000
   13c34:	ldr	pc, [ip, #1228]!	; 0x4cc

00013c38 <pth_sigmask@plt>:
   13c38:	add	ip, pc, #0, 12
   13c3c:	add	ip, ip, #290816	; 0x47000
   13c40:	ldr	pc, [ip, #1220]!	; 0x4c4

00013c44 <gcry_free@plt>:
   13c44:	add	ip, pc, #0, 12
   13c48:	add	ip, ip, #290816	; 0x47000
   13c4c:	ldr	pc, [ip, #1212]!	; 0x4bc

00013c50 <sendmsg@plt>:
   13c50:	add	ip, pc, #0, 12
   13c54:	add	ip, ip, #290816	; 0x47000
   13c58:	ldr	pc, [ip, #1204]!	; 0x4b4

00013c5c <_IO_getc@plt>:
   13c5c:	add	ip, pc, #0, 12
   13c60:	add	ip, ip, #290816	; 0x47000
   13c64:	ldr	pc, [ip, #1196]!	; 0x4ac

00013c68 <ftell@plt>:
   13c68:	add	ip, pc, #0, 12
   13c6c:	add	ip, ip, #290816	; 0x47000
   13c70:	ldr	pc, [ip, #1188]!	; 0x4a4

00013c74 <assuan_sock_bind@plt>:
   13c74:	add	ip, pc, #0, 12
   13c78:	add	ip, ip, #290816	; 0x47000
   13c7c:	ldr	pc, [ip, #1180]!	; 0x49c

00013c80 <memcmp@plt>:
   13c80:	add	ip, pc, #0, 12
   13c84:	add	ip, ip, #290816	; 0x47000
   13c88:	ldr	pc, [ip, #1172]!	; 0x494

00013c8c <gcry_md_write@plt>:
   13c8c:	add	ip, pc, #0, 12
   13c90:	add	ip, ip, #290816	; 0x47000
   13c94:	ldr	pc, [ip, #1164]!	; 0x48c

00013c98 <sleep@plt>:
   13c98:	add	ip, pc, #0, 12
   13c9c:	add	ip, ip, #290816	; 0x47000
   13ca0:	ldr	pc, [ip, #1156]!	; 0x484

00013ca4 <assuan_process@plt>:
   13ca4:	add	ip, pc, #0, 12
   13ca8:	add	ip, ip, #290816	; 0x47000
   13cac:	ldr	pc, [ip, #1148]!	; 0x47c

00013cb0 <stpcpy@plt>:
   13cb0:	add	ip, pc, #0, 12
   13cb4:	add	ip, ip, #290816	; 0x47000
   13cb8:	ldr	pc, [ip, #1140]!	; 0x474

00013cbc <assuan_register_reset_notify@plt>:
   13cbc:	add	ip, pc, #0, 12
   13cc0:	add	ip, ip, #290816	; 0x47000
   13cc4:	ldr	pc, [ip, #1132]!	; 0x46c

00013cc8 <dcgettext@plt>:
   13cc8:	add	ip, pc, #0, 12
   13ccc:	add	ip, ip, #290816	; 0x47000
   13cd0:	ldr	pc, [ip, #1124]!	; 0x464

00013cd4 <gcry_strerror@plt>:
   13cd4:	add	ip, pc, #0, 12
   13cd8:	add	ip, ip, #290816	; 0x47000
   13cdc:	ldr	pc, [ip, #1116]!	; 0x45c

00013ce0 <__strncpy_chk@plt>:
   13ce0:	add	ip, pc, #0, 12
   13ce4:	add	ip, ip, #290816	; 0x47000
   13ce8:	ldr	pc, [ip, #1108]!	; 0x454

00013cec <__stack_chk_fail@plt>:
   13cec:	add	ip, pc, #0, 12
   13cf0:	add	ip, ip, #290816	; 0x47000
   13cf4:	ldr	pc, [ip, #1100]!	; 0x44c

00013cf8 <rewind@plt>:
   13cf8:	add	ip, pc, #0, 12
   13cfc:	add	ip, ip, #290816	; 0x47000
   13d00:	ldr	pc, [ip, #1092]!	; 0x444

00013d04 <sysconf@plt>:
   13d04:	add	ip, pc, #0, 12
   13d08:	add	ip, ip, #290816	; 0x47000
   13d0c:	ldr	pc, [ip, #1084]!	; 0x43c

00013d10 <assuan_write_line@plt>:
   13d10:	add	ip, pc, #0, 12
   13d14:	add	ip, ip, #290816	; 0x47000
   13d18:	ldr	pc, [ip, #1076]!	; 0x434

00013d1c <dup2@plt>:
   13d1c:	add	ip, pc, #0, 12
   13d20:	add	ip, ip, #290816	; 0x47000
   13d24:	ldr	pc, [ip, #1068]!	; 0x42c

00013d28 <getrlimit64@plt>:
   13d28:	add	ip, pc, #0, 12
   13d2c:	add	ip, ip, #290816	; 0x47000
   13d30:	ldr	pc, [ip, #1060]!	; 0x424

00013d34 <realloc@plt>:
   13d34:	add	ip, pc, #0, 12
   13d38:	add	ip, ip, #290816	; 0x47000
   13d3c:	ldr	pc, [ip, #1052]!	; 0x41c

00013d40 <dup@plt>:
   13d40:	add	ip, pc, #0, 12
   13d44:	add	ip, ip, #290816	; 0x47000
   13d48:	ldr	pc, [ip, #1044]!	; 0x414

00013d4c <pth_attr_destroy@plt>:
   13d4c:	add	ip, pc, #0, 12
   13d50:	add	ip, ip, #290816	; 0x47000
   13d54:	ldr	pc, [ip, #1036]!	; 0x40c

00013d58 <__fdelt_chk@plt>:
   13d58:	add	ip, pc, #0, 12
   13d5c:	add	ip, ip, #290816	; 0x47000
   13d60:	ldr	pc, [ip, #1028]!	; 0x404

00013d64 <pth_read@plt>:
   13d64:	add	ip, pc, #0, 12
   13d68:	add	ip, ip, #290816	; 0x47000
   13d6c:	ldr	pc, [ip, #1020]!	; 0x3fc

00013d70 <gcry_check_version@plt>:
   13d70:	add	ip, pc, #0, 12
   13d74:	add	ip, ip, #290816	; 0x47000
   13d78:	ldr	pc, [ip, #1012]!	; 0x3f4

00013d7c <textdomain@plt>:
   13d7c:	add	ip, pc, #0, 12
   13d80:	add	ip, ip, #290816	; 0x47000
   13d84:	ldr	pc, [ip, #1004]!	; 0x3ec

00013d88 <tmpfile64@plt>:
   13d88:	add	ip, pc, #0, 12
   13d8c:	add	ip, ip, #290816	; 0x47000
   13d90:	ldr	pc, [ip, #996]!	; 0x3e4

00013d94 <chdir@plt>:
   13d94:	add	ip, pc, #0, 12
   13d98:	add	ip, ip, #290816	; 0x47000
   13d9c:	ldr	pc, [ip, #988]!	; 0x3dc

00013da0 <geteuid@plt>:
   13da0:	add	ip, pc, #0, 12
   13da4:	add	ip, ip, #290816	; 0x47000
   13da8:	ldr	pc, [ip, #980]!	; 0x3d4

00013dac <assuan_begin_confidential@plt>:
   13dac:	add	ip, pc, #0, 12
   13db0:	add	ip, ip, #290816	; 0x47000
   13db4:	ldr	pc, [ip, #972]!	; 0x3cc

00013db8 <gcry_md_reset@plt>:
   13db8:	add	ip, pc, #0, 12
   13dbc:	add	ip, ip, #290816	; 0x47000
   13dc0:	ldr	pc, [ip, #964]!	; 0x3c4

00013dc4 <__assuan_socket@plt>:
   13dc4:	add	ip, pc, #0, 12
   13dc8:	add	ip, ip, #290816	; 0x47000
   13dcc:	ldr	pc, [ip, #956]!	; 0x3bc

00013dd0 <assuan_inquire@plt>:
   13dd0:	add	ip, pc, #0, 12
   13dd4:	add	ip, ip, #290816	; 0x47000
   13dd8:	ldr	pc, [ip, #948]!	; 0x3b4

00013ddc <__fxstat64@plt>:
   13ddc:	add	ip, pc, #0, 12
   13de0:	add	ip, ip, #290816	; 0x47000
   13de4:	ldr	pc, [ip, #940]!	; 0x3ac

00013de8 <assuan_end_confidential@plt>:
   13de8:	add	ip, pc, #0, 12
   13dec:	add	ip, ip, #290816	; 0x47000
   13df0:	ldr	pc, [ip, #932]!	; 0x3a4

00013df4 <sigaction@plt>:
   13df4:	add	ip, pc, #0, 12
   13df8:	add	ip, ip, #290816	; 0x47000
   13dfc:	ldr	pc, [ip, #924]!	; 0x39c

00013e00 <__memcpy_chk@plt>:
   13e00:	add	ip, pc, #0, 12
   13e04:	add	ip, ip, #290816	; 0x47000
   13e08:	ldr	pc, [ip, #916]!	; 0x394

00013e0c <_IO_putc@plt>:
   13e0c:	add	ip, pc, #0, 12
   13e10:	add	ip, ip, #290816	; 0x47000
   13e14:	ldr	pc, [ip, #908]!	; 0x38c

00013e18 <fwrite@plt>:
   13e18:	add	ip, pc, #0, 12
   13e1c:	add	ip, ip, #290816	; 0x47000
   13e20:	ldr	pc, [ip, #900]!	; 0x384

00013e24 <__assuan_connect@plt>:
   13e24:	add	ip, pc, #0, 12
   13e28:	add	ip, ip, #290816	; 0x47000
   13e2c:	ldr	pc, [ip, #892]!	; 0x37c

00013e30 <lseek64@plt>:
   13e30:	add	ip, pc, #0, 12
   13e34:	add	ip, ip, #290816	; 0x47000
   13e38:	ldr	pc, [ip, #884]!	; 0x374

00013e3c <assuan_set_pointer@plt>:
   13e3c:	add	ip, pc, #0, 12
   13e40:	add	ip, ip, #290816	; 0x47000
   13e44:	ldr	pc, [ip, #876]!	; 0x36c

00013e48 <gcry_cipher_encrypt@plt>:
   13e48:	add	ip, pc, #0, 12
   13e4c:	add	ip, ip, #290816	; 0x47000
   13e50:	ldr	pc, [ip, #868]!	; 0x364

00013e54 <assuan_set_okay_line@plt>:
   13e54:	add	ip, pc, #0, 12
   13e58:	add	ip, ip, #290816	; 0x47000
   13e5c:	ldr	pc, [ip, #860]!	; 0x35c

00013e60 <waitpid@plt>:
   13e60:	add	ip, pc, #0, 12
   13e64:	add	ip, ip, #290816	; 0x47000
   13e68:	ldr	pc, [ip, #852]!	; 0x354

00013e6c <__assuan_pipe@plt>:
   13e6c:	add	ip, pc, #0, 12
   13e70:	add	ip, ip, #290816	; 0x47000
   13e74:	ldr	pc, [ip, #844]!	; 0x34c

00013e78 <strcpy@plt>:
   13e78:	add	ip, pc, #0, 12
   13e7c:	add	ip, ip, #290816	; 0x47000
   13e80:	ldr	pc, [ip, #836]!	; 0x344

00013e84 <gcry_sexp_find_token@plt>:
   13e84:	add	ip, pc, #0, 12
   13e88:	add	ip, ip, #290816	; 0x47000
   13e8c:	ldr	pc, [ip, #828]!	; 0x33c

00013e90 <assuan_register_post_cmd_notify@plt>:
   13e90:	add	ip, pc, #0, 12
   13e94:	add	ip, ip, #290816	; 0x47000
   13e98:	ldr	pc, [ip, #820]!	; 0x334

00013e9c <fread@plt>:
   13e9c:	add	ip, pc, #0, 12
   13ea0:	add	ip, ip, #290816	; 0x47000
   13ea4:	ldr	pc, [ip, #812]!	; 0x32c

00013ea8 <bind_textdomain_codeset@plt>:
   13ea8:	add	ip, pc, #0, 12
   13eac:	add	ip, ip, #290816	; 0x47000
   13eb0:	ldr	pc, [ip, #804]!	; 0x324

00013eb4 <gcry_pk_get_nbits@plt>:
   13eb4:	add	ip, pc, #0, 12
   13eb8:	add	ip, ip, #290816	; 0x47000
   13ebc:	ldr	pc, [ip, #796]!	; 0x31c

00013ec0 <assuan_get_flag@plt>:
   13ec0:	add	ip, pc, #0, 12
   13ec4:	add	ip, ip, #290816	; 0x47000
   13ec8:	ldr	pc, [ip, #788]!	; 0x314

00013ecc <assuan_set_io_monitor@plt>:
   13ecc:	add	ip, pc, #0, 12
   13ed0:	add	ip, ip, #290816	; 0x47000
   13ed4:	ldr	pc, [ip, #780]!	; 0x30c

00013ed8 <pth_select_ev@plt>:
   13ed8:	add	ip, pc, #0, 12
   13edc:	add	ip, ip, #290816	; 0x47000
   13ee0:	ldr	pc, [ip, #772]!	; 0x304

00013ee4 <opendir@plt>:
   13ee4:	add	ip, pc, #0, 12
   13ee8:	add	ip, ip, #290816	; 0x47000
   13eec:	ldr	pc, [ip, #764]!	; 0x2fc

00013ef0 <assuan_transact@plt>:
   13ef0:	add	ip, pc, #0, 12
   13ef4:	add	ip, ip, #290816	; 0x47000
   13ef8:	ldr	pc, [ip, #756]!	; 0x2f4

00013efc <open64@plt>:
   13efc:	add	ip, pc, #0, 12
   13f00:	add	ip, ip, #290816	; 0x47000
   13f04:	ldr	pc, [ip, #748]!	; 0x2ec

00013f08 <gcry_pk_map_name@plt>:
   13f08:	add	ip, pc, #0, 12
   13f0c:	add	ip, ip, #290816	; 0x47000
   13f10:	ldr	pc, [ip, #740]!	; 0x2e4

00013f14 <getenv@plt>:
   13f14:	add	ip, pc, #0, 12
   13f18:	add	ip, ip, #290816	; 0x47000
   13f1c:	ldr	pc, [ip, #732]!	; 0x2dc

00013f20 <assuan_sock_get_nonce@plt>:
   13f20:	add	ip, pc, #0, 12
   13f24:	add	ip, ip, #290816	; 0x47000
   13f28:	ldr	pc, [ip, #724]!	; 0x2d4

00013f2c <gcry_strdup@plt>:
   13f2c:	add	ip, pc, #0, 12
   13f30:	add	ip, ip, #290816	; 0x47000
   13f34:	ldr	pc, [ip, #716]!	; 0x2cc

00013f38 <assuan_pipe_connect@plt>:
   13f38:	add	ip, pc, #0, 12
   13f3c:	add	ip, ip, #290816	; 0x47000
   13f40:	ldr	pc, [ip, #708]!	; 0x2c4

00013f44 <gcry_malloc_secure@plt>:
   13f44:	add	ip, pc, #0, 12
   13f48:	add	ip, ip, #290816	; 0x47000
   13f4c:	ldr	pc, [ip, #700]!	; 0x2bc

00013f50 <puts@plt>:
   13f50:	add	ip, pc, #0, 12
   13f54:	add	ip, ip, #290816	; 0x47000
   13f58:	ldr	pc, [ip, #692]!	; 0x2b4

00013f5c <gcry_xrealloc@plt>:
   13f5c:	add	ip, pc, #0, 12
   13f60:	add	ip, ip, #290816	; 0x47000
   13f64:	ldr	pc, [ip, #684]!	; 0x2ac

00013f68 <malloc@plt>:
   13f68:	add	ip, pc, #0, 12
   13f6c:	add	ip, ip, #290816	; 0x47000
   13f70:	ldr	pc, [ip, #676]!	; 0x2a4

00013f74 <__assuan_spawn@plt>:
   13f74:	add	ip, pc, #0, 12
   13f78:	add	ip, ip, #290816	; 0x47000
   13f7c:	ldr	pc, [ip, #668]!	; 0x29c

00013f80 <iconv_open@plt>:
   13f80:	add	ip, pc, #0, 12
   13f84:	add	ip, ip, #290816	; 0x47000
   13f88:	ldr	pc, [ip, #660]!	; 0x294

00013f8c <sigaddset@plt>:
   13f8c:	add	ip, pc, #0, 12
   13f90:	add	ip, ip, #290816	; 0x47000
   13f94:	ldr	pc, [ip, #652]!	; 0x28c

00013f98 <__libc_start_main@plt>:
   13f98:	add	ip, pc, #0, 12
   13f9c:	add	ip, ip, #290816	; 0x47000
   13fa0:	ldr	pc, [ip, #644]!	; 0x284

00013fa4 <strerror@plt>:
   13fa4:	add	ip, pc, #0, 12
   13fa8:	add	ip, ip, #290816	; 0x47000
   13fac:	ldr	pc, [ip, #636]!	; 0x27c

00013fb0 <strftime@plt>:
   13fb0:	add	ip, pc, #0, 12
   13fb4:	add	ip, ip, #290816	; 0x47000
   13fb8:	ldr	pc, [ip, #628]!	; 0x274

00013fbc <gcry_sexp_nth_mpi@plt>:
   13fbc:	add	ip, pc, #0, 12
   13fc0:	add	ip, ip, #290816	; 0x47000
   13fc4:	ldr	pc, [ip, #620]!	; 0x26c

00013fc8 <__vfprintf_chk@plt>:
   13fc8:	add	ip, pc, #0, 12
   13fcc:	add	ip, ip, #290816	; 0x47000
   13fd0:	ldr	pc, [ip, #612]!	; 0x264

00013fd4 <localtime@plt>:
   13fd4:	add	ip, pc, #0, 12
   13fd8:	add	ip, ip, #290816	; 0x47000
   13fdc:	ldr	pc, [ip, #604]!	; 0x25c

00013fe0 <assuan_fdopen@plt>:
   13fe0:	add	ip, pc, #0, 12
   13fe4:	add	ip, ip, #290816	; 0x47000
   13fe8:	ldr	pc, [ip, #596]!	; 0x254

00013fec <__ctype_tolower_loc@plt>:
   13fec:	add	ip, pc, #0, 12
   13ff0:	add	ip, ip, #290816	; 0x47000
   13ff4:	ldr	pc, [ip, #588]!	; 0x24c

00013ff8 <gcry_md_map_name@plt>:
   13ff8:	add	ip, pc, #0, 12
   13ffc:	add	ip, ip, #290816	; 0x47000
   14000:	ldr	pc, [ip, #580]!	; 0x244

00014004 <__ctype_toupper_loc@plt>:
   14004:	add	ip, pc, #0, 12
   14008:	add	ip, ip, #290816	; 0x47000
   1400c:	ldr	pc, [ip, #572]!	; 0x23c

00014010 <pth_accept@plt>:
   14010:	add	ip, pc, #0, 12
   14014:	add	ip, ip, #290816	; 0x47000
   14018:	ldr	pc, [ip, #564]!	; 0x234

0001401c <__gmon_start__@plt>:
   1401c:	add	ip, pc, #0, 12
   14020:	add	ip, ip, #290816	; 0x47000
   14024:	ldr	pc, [ip, #556]!	; 0x22c

00014028 <kill@plt>:
   14028:	add	ip, pc, #0, 12
   1402c:	add	ip, ip, #290816	; 0x47000
   14030:	ldr	pc, [ip, #548]!	; 0x224

00014034 <__ctype_b_loc@plt>:
   14034:	add	ip, pc, #0, 12
   14038:	add	ip, ip, #290816	; 0x47000
   1403c:	ldr	pc, [ip, #540]!	; 0x21c

00014040 <getpid@plt>:
   14040:	add	ip, pc, #0, 12
   14044:	add	ip, ip, #290816	; 0x47000
   14048:	ldr	pc, [ip, #532]!	; 0x214

0001404c <exit@plt>:
   1404c:	add	ip, pc, #0, 12
   14050:	add	ip, ip, #290816	; 0x47000
   14054:	ldr	pc, [ip, #524]!	; 0x20c

00014058 <assuan_register_command@plt>:
   14058:	add	ip, pc, #0, 12
   1405c:	add	ip, ip, #290816	; 0x47000
   14060:	ldr	pc, [ip, #516]!	; 0x204

00014064 <feof@plt>:
   14064:	add	ip, pc, #0, 12
   14068:	add	ip, ip, #290816	; 0x47000
   1406c:	ldr	pc, [ip, #508]!	; 0x1fc

00014070 <assuan_new@plt>:
   14070:	add	ip, pc, #0, 12
   14074:	add	ip, ip, #290816	; 0x47000
   14078:	ldr	pc, [ip, #500]!	; 0x1f4

0001407c <strtoul@plt>:
   1407c:	add	ip, pc, #0, 12
   14080:	add	ip, ip, #290816	; 0x47000
   14084:	ldr	pc, [ip, #492]!	; 0x1ec

00014088 <ttyname@plt>:
   14088:	add	ip, pc, #0, 12
   1408c:	add	ip, ip, #290816	; 0x47000
   14090:	ldr	pc, [ip, #484]!	; 0x1e4

00014094 <strlen@plt>:
   14094:	add	ip, pc, #0, 12
   14098:	add	ip, ip, #290816	; 0x47000
   1409c:	ldr	pc, [ip, #476]!	; 0x1dc

000140a0 <setsid@plt>:
   140a0:	add	ip, pc, #0, 12
   140a4:	add	ip, ip, #290816	; 0x47000
   140a8:	ldr	pc, [ip, #468]!	; 0x1d4

000140ac <strchr@plt>:
   140ac:	add	ip, pc, #0, 12
   140b0:	add	ip, ip, #290816	; 0x47000
   140b4:	ldr	pc, [ip, #460]!	; 0x1cc

000140b8 <assuan_sock_close@plt>:
   140b8:	add	ip, pc, #0, 12
   140bc:	add	ip, ip, #290816	; 0x47000
   140c0:	ldr	pc, [ip, #452]!	; 0x1c4

000140c4 <setenv@plt>:
   140c4:	add	ip, pc, #0, 12
   140c8:	add	ip, ip, #290816	; 0x47000
   140cc:	ldr	pc, [ip, #444]!	; 0x1bc

000140d0 <pth_attr_new@plt>:
   140d0:	add	ip, pc, #0, 12
   140d4:	add	ip, ip, #290816	; 0x47000
   140d8:	ldr	pc, [ip, #436]!	; 0x1b4

000140dc <memrchr@plt>:
   140dc:	add	ip, pc, #0, 12
   140e0:	add	ip, ip, #290816	; 0x47000
   140e4:	ldr	pc, [ip, #428]!	; 0x1ac

000140e8 <assuan_init_pipe_server@plt>:
   140e8:	add	ip, pc, #0, 12
   140ec:	add	ip, ip, #290816	; 0x47000
   140f0:	ldr	pc, [ip, #420]!	; 0x1a4

000140f4 <gcry_md_algo_info@plt>:
   140f4:	add	ip, pc, #0, 12
   140f8:	add	ip, ip, #290816	; 0x47000
   140fc:	ldr	pc, [ip, #412]!	; 0x19c

00014100 <pth_event_status@plt>:
   14100:	add	ip, pc, #0, 12
   14104:	add	ip, ip, #290816	; 0x47000
   14108:	ldr	pc, [ip, #404]!	; 0x194

0001410c <execv@plt>:
   1410c:	add	ip, pc, #0, 12
   14110:	add	ip, ip, #290816	; 0x47000
   14114:	ldr	pc, [ip, #396]!	; 0x18c

00014118 <__open64_2@plt>:
   14118:	add	ip, pc, #0, 12
   1411c:	add	ip, ip, #290816	; 0x47000
   14120:	ldr	pc, [ip, #388]!	; 0x184

00014124 <__assuan_close@plt>:
   14124:	add	ip, pc, #0, 12
   14128:	add	ip, ip, #290816	; 0x47000
   1412c:	ldr	pc, [ip, #380]!	; 0x17c

00014130 <assuan_sock_new@plt>:
   14130:	add	ip, pc, #0, 12
   14134:	add	ip, ip, #290816	; 0x47000
   14138:	ldr	pc, [ip, #372]!	; 0x174

0001413c <assuan_send_data@plt>:
   1413c:	add	ip, pc, #0, 12
   14140:	add	ip, ip, #290816	; 0x47000
   14144:	ldr	pc, [ip, #364]!	; 0x16c

00014148 <__errno_location@plt>:
   14148:	add	ip, pc, #0, 12
   1414c:	add	ip, ip, #290816	; 0x47000
   14150:	ldr	pc, [ip, #356]!	; 0x164

00014154 <gcry_cipher_setiv@plt>:
   14154:	add	ip, pc, #0, 12
   14158:	add	ip, ip, #290816	; 0x47000
   1415c:	ldr	pc, [ip, #348]!	; 0x15c

00014160 <__strcat_chk@plt>:
   14160:	add	ip, pc, #0, 12
   14164:	add	ip, ip, #290816	; 0x47000
   14168:	ldr	pc, [ip, #340]!	; 0x154

0001416c <strncasecmp@plt>:
   1416c:	add	ip, pc, #0, 12
   14170:	add	ip, ip, #290816	; 0x47000
   14174:	ldr	pc, [ip, #332]!	; 0x14c

00014178 <__sprintf_chk@plt>:
   14178:	add	ip, pc, #0, 12
   1417c:	add	ip, ip, #290816	; 0x47000
   14180:	ldr	pc, [ip, #324]!	; 0x144

00014184 <__cxa_atexit@plt>:
   14184:	add	ip, pc, #0, 12
   14188:	add	ip, ip, #290816	; 0x47000
   1418c:	ldr	pc, [ip, #316]!	; 0x13c

00014190 <gcry_calloc@plt>:
   14190:	add	ip, pc, #0, 12
   14194:	add	ip, ip, #290816	; 0x47000
   14198:	ldr	pc, [ip, #308]!	; 0x134

0001419c <mkdir@plt>:
   1419c:	add	ip, pc, #0, 12
   141a0:	add	ip, ip, #290816	; 0x47000
   141a4:	ldr	pc, [ip, #300]!	; 0x12c

000141a8 <gcry_md_algo_name@plt>:
   141a8:	add	ip, pc, #0, 12
   141ac:	add	ip, ip, #290816	; 0x47000
   141b0:	ldr	pc, [ip, #292]!	; 0x124

000141b4 <setvbuf@plt>:
   141b4:	add	ip, pc, #0, 12
   141b8:	add	ip, ip, #290816	; 0x47000
   141bc:	ldr	pc, [ip, #284]!	; 0x11c

000141c0 <assuan_register_option_handler@plt>:
   141c0:	add	ip, pc, #0, 12
   141c4:	add	ip, ip, #290816	; 0x47000
   141c8:	ldr	pc, [ip, #276]!	; 0x114

000141cc <memset@plt>:
   141cc:	add	ip, pc, #0, 12
   141d0:	add	ip, ip, #290816	; 0x47000
   141d4:	ldr	pc, [ip, #268]!	; 0x10c

000141d8 <gcry_sexp_nth_string@plt>:
   141d8:	add	ip, pc, #0, 12
   141dc:	add	ip, ip, #290816	; 0x47000
   141e0:	ldr	pc, [ip, #260]!	; 0x104

000141e4 <strncpy@plt>:
   141e4:	add	ip, pc, #0, 12
   141e8:	add	ip, ip, #290816	; 0x47000
   141ec:	ldr	pc, [ip, #252]!	; 0xfc

000141f0 <gcry_xstrdup@plt>:
   141f0:	add	ip, pc, #0, 12
   141f4:	add	ip, ip, #290816	; 0x47000
   141f8:	ldr	pc, [ip, #244]!	; 0xf4

000141fc <gmtime@plt>:
   141fc:	add	ip, pc, #0, 12
   14200:	add	ip, ip, #290816	; 0x47000
   14204:	ldr	pc, [ip, #236]!	; 0xec

00014208 <gcry_sexp_build@plt>:
   14208:	add	ip, pc, #0, 12
   1420c:	add	ip, ip, #290816	; 0x47000
   14210:	ldr	pc, [ip, #228]!	; 0xe4

00014214 <__printf_chk@plt>:
   14214:	add	ip, pc, #0, 12
   14218:	add	ip, ip, #290816	; 0x47000
   1421c:	ldr	pc, [ip, #220]!	; 0xdc

00014220 <pth_mutex_release@plt>:
   14220:	add	ip, pc, #0, 12
   14224:	add	ip, ip, #290816	; 0x47000
   14228:	ldr	pc, [ip, #212]!	; 0xd4

0001422c <write@plt>:
   1422c:	add	ip, pc, #0, 12
   14230:	add	ip, ip, #290816	; 0x47000
   14234:	ldr	pc, [ip, #204]!	; 0xcc

00014238 <assuan_accept@plt>:
   14238:	add	ip, pc, #0, 12
   1423c:	add	ip, ip, #290816	; 0x47000
   14240:	ldr	pc, [ip, #196]!	; 0xc4

00014244 <fileno@plt>:
   14244:	add	ip, pc, #0, 12
   14248:	add	ip, ip, #290816	; 0x47000
   1424c:	ldr	pc, [ip, #188]!	; 0xbc

00014250 <gcry_pk_sign@plt>:
   14250:	add	ip, pc, #0, 12
   14254:	add	ip, ip, #290816	; 0x47000
   14258:	ldr	pc, [ip, #180]!	; 0xb4

0001425c <fopencookie@plt>:
   1425c:	add	ip, pc, #0, 12
   14260:	add	ip, ip, #290816	; 0x47000
   14264:	ldr	pc, [ip, #172]!	; 0xac

00014268 <gcry_mpi_release@plt>:
   14268:	add	ip, pc, #0, 12
   1426c:	add	ip, ip, #290816	; 0x47000
   14270:	ldr	pc, [ip, #164]!	; 0xa4

00014274 <__fprintf_chk@plt>:
   14274:	add	ip, pc, #0, 12
   14278:	add	ip, ip, #290816	; 0x47000
   1427c:	ldr	pc, [ip, #156]!	; 0x9c

00014280 <memchr@plt>:
   14280:	add	ip, pc, #0, 12
   14284:	add	ip, ip, #290816	; 0x47000
   14288:	ldr	pc, [ip, #148]!	; 0x94

0001428c <gcry_pk_testkey@plt>:
   1428c:	add	ip, pc, #0, 12
   14290:	add	ip, ip, #290816	; 0x47000
   14294:	ldr	pc, [ip, #140]!	; 0x8c

00014298 <gcry_sexp_sprint@plt>:
   14298:	add	ip, pc, #0, 12
   1429c:	add	ip, ip, #290816	; 0x47000
   142a0:	ldr	pc, [ip, #132]!	; 0x84

000142a4 <pth_kill@plt>:
   142a4:	add	ip, pc, #0, 12
   142a8:	add	ip, ip, #290816	; 0x47000
   142ac:	ldr	pc, [ip, #124]!	; 0x7c

000142b0 <access@plt>:
   142b0:	add	ip, pc, #0, 12
   142b4:	add	ip, ip, #290816	; 0x47000
   142b8:	ldr	pc, [ip, #116]!	; 0x74

000142bc <pth_event_concat@plt>:
   142bc:	add	ip, pc, #0, 12
   142c0:	add	ip, ip, #290816	; 0x47000
   142c4:	ldr	pc, [ip, #108]!	; 0x6c

000142c8 <fclose@plt>:
   142c8:	add	ip, pc, #0, 12
   142cc:	add	ip, ip, #290816	; 0x47000
   142d0:	ldr	pc, [ip, #100]!	; 0x64

000142d4 <gcry_realloc@plt>:
   142d4:	add	ip, pc, #0, 12
   142d8:	add	ip, ip, #290816	; 0x47000
   142dc:	ldr	pc, [ip, #92]!	; 0x5c

000142e0 <pipe@plt>:
   142e0:	add	ip, pc, #0, 12
   142e4:	add	ip, ip, #290816	; 0x47000
   142e8:	ldr	pc, [ip, #84]!	; 0x54

000142ec <fseeko64@plt>:
   142ec:	add	ip, pc, #0, 12
   142f0:	add	ip, ip, #290816	; 0x47000
   142f4:	ldr	pc, [ip, #76]!	; 0x4c

000142f8 <assuan_set_error@plt>:
   142f8:	add	ip, pc, #0, 12
   142fc:	add	ip, ip, #290816	; 0x47000
   14300:	ldr	pc, [ip, #68]!	; 0x44

00014304 <gcry_mpi_scan@plt>:
   14304:	add	ip, pc, #0, 12
   14308:	add	ip, ip, #290816	; 0x47000
   1430c:	ldr	pc, [ip, #60]!	; 0x3c

00014310 <gcry_mpi_aprint@plt>:
   14310:	add	ip, pc, #0, 12
   14314:	add	ip, ip, #290816	; 0x47000
   14318:	ldr	pc, [ip, #52]!	; 0x34

0001431c <gcry_cipher_decrypt@plt>:
   1431c:	add	ip, pc, #0, 12
   14320:	add	ip, ip, #290816	; 0x47000
   14324:	ldr	pc, [ip, #44]!	; 0x2c

00014328 <__assuan_socketpair@plt>:
   14328:	add	ip, pc, #0, 12
   1432c:	add	ip, ip, #290816	; 0x47000
   14330:	ldr	pc, [ip, #36]!	; 0x24

00014334 <gcry_md_hash_buffer@plt>:
   14334:	add	ip, pc, #0, 12
   14338:	add	ip, ip, #290816	; 0x47000
   1433c:	ldr	pc, [ip, #28]!

00014340 <assuan_init_socket_server@plt>:
   14340:	add	ip, pc, #0, 12
   14344:	add	ip, ip, #290816	; 0x47000
   14348:	ldr	pc, [ip, #20]!

0001434c <setlocale@plt>:
   1434c:	add	ip, pc, #0, 12
   14350:	add	ip, ip, #290816	; 0x47000
   14354:	ldr	pc, [ip, #12]!

00014358 <sigemptyset@plt>:
   14358:	add	ip, pc, #0, 12
   1435c:	add	ip, ip, #290816	; 0x47000
   14360:	ldr	pc, [ip, #4]!

00014364 <pth_mutex_acquire@plt>:
   14364:	add	ip, pc, #0, 12
   14368:	add	ip, ip, #286720	; 0x46000
   1436c:	ldr	pc, [ip, #4092]!	; 0xffc

00014370 <gcry_sexp_nth@plt>:
   14370:	add	ip, pc, #0, 12
   14374:	add	ip, ip, #286720	; 0x46000
   14378:	ldr	pc, [ip, #4084]!	; 0xff4

0001437c <fork@plt>:
   1437c:	add	ip, pc, #0, 12
   14380:	add	ip, ip, #286720	; 0x46000
   14384:	ldr	pc, [ip, #4076]!	; 0xfec

00014388 <assuan_release@plt>:
   14388:	add	ip, pc, #0, 12
   1438c:	add	ip, ip, #286720	; 0x46000
   14390:	ldr	pc, [ip, #4068]!	; 0xfe4

00014394 <putenv@plt>:
   14394:	add	ip, pc, #0, 12
   14398:	add	ip, ip, #286720	; 0x46000
   1439c:	ldr	pc, [ip, #4060]!	; 0xfdc

000143a0 <gcry_md_ctl@plt>:
   143a0:	add	ip, pc, #0, 12
   143a4:	add	ip, ip, #286720	; 0x46000
   143a8:	ldr	pc, [ip, #4052]!	; 0xfd4

000143ac <pth_connect@plt>:
   143ac:	add	ip, pc, #0, 12
   143b0:	add	ip, ip, #286720	; 0x46000
   143b4:	ldr	pc, [ip, #4044]!	; 0xfcc

000143b8 <strrchr@plt>:
   143b8:	add	ip, pc, #0, 12
   143bc:	add	ip, ip, #286720	; 0x46000
   143c0:	ldr	pc, [ip, #4036]!	; 0xfc4

000143c4 <listen@plt>:
   143c4:	add	ip, pc, #0, 12
   143c8:	add	ip, ip, #286720	; 0x46000
   143cc:	ldr	pc, [ip, #4028]!	; 0xfbc

000143d0 <gcry_set_outofcore_handler@plt>:
   143d0:	add	ip, pc, #0, 12
   143d4:	add	ip, ip, #286720	; 0x46000
   143d8:	ldr	pc, [ip, #4020]!	; 0xfb4

000143dc <nl_langinfo@plt>:
   143dc:	add	ip, pc, #0, 12
   143e0:	add	ip, ip, #286720	; 0x46000
   143e4:	ldr	pc, [ip, #4012]!	; 0xfac

000143e8 <pth_fork@plt>:
   143e8:	add	ip, pc, #0, 12
   143ec:	add	ip, ip, #286720	; 0x46000
   143f0:	ldr	pc, [ip, #4004]!	; 0xfa4

000143f4 <pth_sleep@plt>:
   143f4:	add	ip, pc, #0, 12
   143f8:	add	ip, ip, #286720	; 0x46000
   143fc:	ldr	pc, [ip, #3996]!	; 0xf9c

00014400 <clearerr@plt>:
   14400:	add	ip, pc, #0, 12
   14404:	add	ip, ip, #286720	; 0x46000
   14408:	ldr	pc, [ip, #3988]!	; 0xf94

0001440c <assuan_set_gpg_err_source@plt>:
   1440c:	add	ip, pc, #0, 12
   14410:	add	ip, ip, #286720	; 0x46000
   14414:	ldr	pc, [ip, #3980]!	; 0xf8c

00014418 <pth_yield@plt>:
   14418:	add	ip, pc, #0, 12
   1441c:	add	ip, ip, #286720	; 0x46000
   14420:	ldr	pc, [ip, #3972]!	; 0xf84

00014424 <readdir64@plt>:
   14424:	add	ip, pc, #0, 12
   14428:	add	ip, ip, #286720	; 0x46000
   1442c:	ldr	pc, [ip, #3964]!	; 0xf7c

00014430 <assuan_sock_check_nonce@plt>:
   14430:	add	ip, pc, #0, 12
   14434:	add	ip, ip, #286720	; 0x46000
   14438:	ldr	pc, [ip, #3956]!	; 0xf74

0001443c <mkdtemp@plt>:
   1443c:	add	ip, pc, #0, 12
   14440:	add	ip, ip, #286720	; 0x46000
   14444:	ldr	pc, [ip, #3948]!	; 0xf6c

00014448 <timegm@plt>:
   14448:	add	ip, pc, #0, 12
   1444c:	add	ip, ip, #286720	; 0x46000
   14450:	ldr	pc, [ip, #3940]!	; 0xf64

00014454 <assuan_set_malloc_hooks@plt>:
   14454:	add	ip, pc, #0, 12
   14458:	add	ip, ip, #286720	; 0x46000
   1445c:	ldr	pc, [ip, #3932]!	; 0xf5c

00014460 <assuan_set_flag@plt>:
   14460:	add	ip, pc, #0, 12
   14464:	add	ip, ip, #286720	; 0x46000
   14468:	ldr	pc, [ip, #3924]!	; 0xf54

0001446c <gcry_create_nonce@plt>:
   1446c:	add	ip, pc, #0, 12
   14470:	add	ip, ip, #286720	; 0x46000
   14474:	ldr	pc, [ip, #3916]!	; 0xf4c

00014478 <remove@plt>:
   14478:	add	ip, pc, #0, 12
   1447c:	add	ip, ip, #286720	; 0x46000
   14480:	ldr	pc, [ip, #3908]!	; 0xf44

00014484 <recvmsg@plt>:
   14484:	add	ip, pc, #0, 12
   14488:	add	ip, ip, #286720	; 0x46000
   1448c:	ldr	pc, [ip, #3900]!	; 0xf3c

00014490 <fopen64@plt>:
   14490:	add	ip, pc, #0, 12
   14494:	add	ip, ip, #286720	; 0x46000
   14498:	ldr	pc, [ip, #3892]!	; 0xf34

0001449c <pth_write@plt>:
   1449c:	add	ip, pc, #0, 12
   144a0:	add	ip, ip, #286720	; 0x46000
   144a4:	ldr	pc, [ip, #3884]!	; 0xf2c

000144a8 <pth_join@plt>:
   144a8:	add	ip, pc, #0, 12
   144ac:	add	ip, ip, #286720	; 0x46000
   144b0:	ldr	pc, [ip, #3876]!	; 0xf24

000144b4 <pth_usleep@plt>:
   144b4:	add	ip, pc, #0, 12
   144b8:	add	ip, ip, #286720	; 0x46000
   144bc:	ldr	pc, [ip, #3868]!	; 0xf1c

000144c0 <gcry_control@plt>:
   144c0:	add	ip, pc, #0, 12
   144c4:	add	ip, ip, #286720	; 0x46000
   144c8:	ldr	pc, [ip, #3860]!	; 0xf14

000144cc <assuan_set_system_hooks@plt>:
   144cc:	add	ip, pc, #0, 12
   144d0:	add	ip, ip, #286720	; 0x46000
   144d4:	ldr	pc, [ip, #3852]!	; 0xf0c

000144d8 <gcry_sexp_dump@plt>:
   144d8:	add	ip, pc, #0, 12
   144dc:	add	ip, ip, #286720	; 0x46000
   144e0:	ldr	pc, [ip, #3844]!	; 0xf04

000144e4 <pth_fdmode@plt>:
   144e4:	add	ip, pc, #0, 12
   144e8:	add	ip, ip, #286720	; 0x46000
   144ec:	ldr	pc, [ip, #3836]!	; 0xefc

000144f0 <assuan_get_pointer@plt>:
   144f0:	add	ip, pc, #0, 12
   144f4:	add	ip, ip, #286720	; 0x46000
   144f8:	ldr	pc, [ip, #3828]!	; 0xef4

000144fc <socket@plt>:
   144fc:	add	ip, pc, #0, 12
   14500:	add	ip, ip, #286720	; 0x46000
   14504:	ldr	pc, [ip, #3820]!	; 0xeec

00014508 <bindtextdomain@plt>:
   14508:	add	ip, pc, #0, 12
   1450c:	add	ip, ip, #286720	; 0x46000
   14510:	ldr	pc, [ip, #3812]!	; 0xee4

00014514 <assuan_set_log_stream@plt>:
   14514:	add	ip, pc, #0, 12
   14518:	add	ip, ip, #286720	; 0x46000
   1451c:	ldr	pc, [ip, #3804]!	; 0xedc

00014520 <pth_timeout@plt>:
   14520:	add	ip, pc, #0, 12
   14524:	add	ip, ip, #286720	; 0x46000
   14528:	ldr	pc, [ip, #3796]!	; 0xed4

0001452c <gcry_pk_genkey@plt>:
   1452c:	add	ip, pc, #0, 12
   14530:	add	ip, ip, #286720	; 0x46000
   14534:	ldr	pc, [ip, #3788]!	; 0xecc

00014538 <gcry_xcalloc@plt>:
   14538:	add	ip, pc, #0, 12
   1453c:	add	ip, ip, #286720	; 0x46000
   14540:	ldr	pc, [ip, #3780]!	; 0xec4

00014544 <assuan_get_pid@plt>:
   14544:	add	ip, pc, #0, 12
   14548:	add	ip, ip, #286720	; 0x46000
   1454c:	ldr	pc, [ip, #3772]!	; 0xebc

00014550 <gcry_set_fatalerror_handler@plt>:
   14550:	add	ip, pc, #0, 12
   14554:	add	ip, ip, #286720	; 0x46000
   14558:	ldr	pc, [ip, #3764]!	; 0xeb4

0001455c <gcry_mpi_invm@plt>:
   1455c:	add	ip, pc, #0, 12
   14560:	add	ip, ip, #286720	; 0x46000
   14564:	ldr	pc, [ip, #3756]!	; 0xeac

00014568 <gcry_set_log_handler@plt>:
   14568:	add	ip, pc, #0, 12
   1456c:	add	ip, ip, #286720	; 0x46000
   14570:	ldr	pc, [ip, #3748]!	; 0xea4

00014574 <fseek@plt>:
   14574:	add	ip, pc, #0, 12
   14578:	add	ip, ip, #286720	; 0x46000
   1457c:	ldr	pc, [ip, #3740]!	; 0xe9c

00014580 <gpg_err_code_from_syserror@plt>:
   14580:	add	ip, pc, #0, 12
   14584:	add	ip, ip, #286720	; 0x46000
   14588:	ldr	pc, [ip, #3732]!	; 0xe94

0001458c <__xstat64@plt>:
   1458c:	add	ip, pc, #0, 12
   14590:	add	ip, ip, #286720	; 0x46000
   14594:	ldr	pc, [ip, #3724]!	; 0xe8c

00014598 <isatty@plt>:
   14598:	add	ip, pc, #0, 12
   1459c:	add	ip, ip, #286720	; 0x46000
   145a0:	ldr	pc, [ip, #3716]!	; 0xe84

000145a4 <unsetenv@plt>:
   145a4:	add	ip, pc, #0, 12
   145a8:	add	ip, ip, #286720	; 0x46000
   145ac:	ldr	pc, [ip, #3708]!	; 0xe7c

000145b0 <fputs@plt>:
   145b0:	add	ip, pc, #0, 12
   145b4:	add	ip, ip, #286720	; 0x46000
   145b8:	ldr	pc, [ip, #3700]!	; 0xe74

000145bc <strncmp@plt>:
   145bc:	add	ip, pc, #0, 12
   145c0:	add	ip, ip, #286720	; 0x46000
   145c4:	ldr	pc, [ip, #3692]!	; 0xe6c

000145c8 <abort@plt>:
   145c8:	add	ip, pc, #0, 12
   145cc:	add	ip, ip, #286720	; 0x46000
   145d0:	ldr	pc, [ip, #3684]!	; 0xe64

000145d4 <gcry_cipher_close@plt>:
   145d4:	add	ip, pc, #0, 12
   145d8:	add	ip, ip, #286720	; 0x46000
   145dc:	ldr	pc, [ip, #3676]!	; 0xe5c

000145e0 <gcry_pk_decrypt@plt>:
   145e0:	add	ip, pc, #0, 12
   145e4:	add	ip, ip, #286720	; 0x46000
   145e8:	ldr	pc, [ip, #3668]!	; 0xe54

000145ec <close@plt>:
   145ec:	add	ip, pc, #0, 12
   145f0:	add	ip, ip, #286720	; 0x46000
   145f4:	ldr	pc, [ip, #3660]!	; 0xe4c

000145f8 <dcngettext@plt>:
   145f8:	add	ip, pc, #0, 12
   145fc:	add	ip, ip, #286720	; 0x46000
   14600:	ldr	pc, [ip, #3652]!	; 0xe44

00014604 <gcry_sexp_canon_len@plt>:
   14604:	add	ip, pc, #0, 12
   14608:	add	ip, ip, #286720	; 0x46000
   1460c:	ldr	pc, [ip, #3644]!	; 0xe3c

00014610 <gcry_pk_get_keygrip@plt>:
   14610:	add	ip, pc, #0, 12
   14614:	add	ip, ip, #286720	; 0x46000
   14618:	ldr	pc, [ip, #3636]!	; 0xe34

0001461c <connect@plt>:
   1461c:	add	ip, pc, #0, 12
   14620:	add	ip, ip, #286720	; 0x46000
   14624:	ldr	pc, [ip, #3628]!	; 0xe2c

00014628 <closedir@plt>:
   14628:	add	ip, pc, #0, 12
   1462c:	add	ip, ip, #286720	; 0x46000
   14630:	ldr	pc, [ip, #3620]!	; 0xe24

00014634 <assuan_sock_init@plt>:
   14634:	add	ip, pc, #0, 12
   14638:	add	ip, ip, #286720	; 0x46000
   1463c:	ldr	pc, [ip, #3612]!	; 0xe1c

00014640 <assuan_socket_connect@plt>:
   14640:	add	ip, pc, #0, 12
   14644:	add	ip, ip, #286720	; 0x46000
   14648:	ldr	pc, [ip, #3604]!	; 0xe14

0001464c <__snprintf_chk@plt>:
   1464c:	add	ip, pc, #0, 12
   14650:	add	ip, ip, #286720	; 0x46000
   14654:	ldr	pc, [ip, #3596]!	; 0xe0c

00014658 <__assert_fail@plt>:
   14658:	add	ip, pc, #0, 12
   1465c:	add	ip, ip, #286720	; 0x46000
   14660:	ldr	pc, [ip, #3588]!	; 0xe04

Disassembly of section .text:

00014668 <.text>:
   14668:	push	{r4, r5, r6, r7, r8, lr}
   1466c:	movw	r8, #47296	; 0xb8c0
   14670:	movt	r8, #5
   14674:	sub	sp, sp, #8
   14678:	ldr	r3, [r0]
   1467c:	add	r5, sp, #8
   14680:	ldr	r2, [r8]
   14684:	mov	r7, r0
   14688:	ldr	r4, [r1]
   1468c:	mov	r6, r1
   14690:	str	r3, [r5, #-8]!
   14694:	str	r2, [sp, #4]
   14698:	cmp	r4, #0
   1469c:	ldr	r2, [sp]
   146a0:	ble	146f0 <__assert_fail@plt+0x98>
   146a4:	ldrb	r3, [r2]
   146a8:	cmp	r3, #40	; 0x28
   146ac:	addeq	r2, r2, #1
   146b0:	addeq	r4, r4, #1
   146b4:	streq	r2, [sp]
   146b8:	beq	14698 <__assert_fail@plt+0x40>
   146bc:	cmp	r3, #41	; 0x29
   146c0:	addeq	r2, r2, #1
   146c4:	subeq	r4, r4, #1
   146c8:	streq	r2, [sp]
   146cc:	beq	14698 <__assert_fail@plt+0x40>
   146d0:	mov	r0, sp
   146d4:	bl	24bd0 <__assert_fail@plt+0x10578>
   146d8:	cmp	r0, #0
   146dc:	beq	14700 <__assert_fail@plt+0xa8>
   146e0:	ldr	r2, [sp]
   146e4:	add	r3, r2, r0
   146e8:	str	r3, [sp]
   146ec:	b	14698 <__assert_fail@plt+0x40>
   146f0:	str	r2, [r7]
   146f4:	mov	r0, #0
   146f8:	str	r4, [r6]
   146fc:	b	14708 <__assert_fail@plt+0xb0>
   14700:	mov	r0, #83	; 0x53
   14704:	movt	r0, #1024	; 0x400
   14708:	ldr	r2, [sp, #4]
   1470c:	ldr	r3, [r8]
   14710:	cmp	r2, r3
   14714:	beq	1471c <__assert_fail@plt+0xc4>
   14718:	bl	13cec <__stack_chk_fail@plt>
   1471c:	add	sp, sp, #8
   14720:	pop	{r4, r5, r6, r7, r8, pc}
   14724:	push	{r3, lr}
   14728:	movw	r0, #34708	; 0x8794
   1472c:	movw	r1, #34632	; 0x8748
   14730:	movt	r0, #4
   14734:	movt	r1, #4
   14738:	movw	r2, #1334	; 0x536
   1473c:	ldr	r3, [pc]	; 14744 <__assert_fail@plt+0xec>
   14740:	bl	14658 <__assert_fail@plt>
   14744:	strdeq	r8, [r4], -r4
   14748:	push	{r3, r4, r5, lr}
   1474c:	movw	r5, #47316	; 0xb8d4
   14750:	movt	r5, #5
   14754:	mov	r0, #11
   14758:	bl	3d0cc <__assert_fail@plt+0x28a74>
   1475c:	ldr	r1, [r5]
   14760:	bl	145b0 <fputs@plt>
   14764:	mov	r0, #12
   14768:	bl	3d0cc <__assert_fail@plt+0x28a74>
   1476c:	subs	r2, r0, #0
   14770:	beq	14784 <__assert_fail@plt+0x12c>
   14774:	movw	r1, #36932	; 0x9044
   14778:	mov	r0, #1
   1477c:	movt	r1, #4
   14780:	bl	14214 <__printf_chk@plt>
   14784:	mov	r0, #13
   14788:	mov	r4, #20
   1478c:	bl	3d0cc <__assert_fail@plt+0x28a74>
   14790:	movw	r1, #4836	; 0x12e4
   14794:	movt	r1, #4
   14798:	mov	r2, r0
   1479c:	mov	r0, #1
   147a0:	bl	14214 <__printf_chk@plt>
   147a4:	mov	r0, r4
   147a8:	add	r4, r4, #1
   147ac:	bl	3d0cc <__assert_fail@plt+0x28a74>
   147b0:	cmp	r0, #0
   147b4:	beq	147bc <__assert_fail@plt+0x164>
   147b8:	bl	13f50 <puts@plt>
   147bc:	cmp	r4, #30
   147c0:	bne	147a4 <__assert_fail@plt+0x14c>
   147c4:	mov	r0, #14
   147c8:	bl	3d0cc <__assert_fail@plt+0x28a74>
   147cc:	cmp	r0, #0
   147d0:	beq	147d8 <__assert_fail@plt+0x180>
   147d4:	bl	13f50 <puts@plt>
   147d8:	mov	r0, #10
   147dc:	bl	3d0cc <__assert_fail@plt+0x28a74>
   147e0:	cmp	r0, #0
   147e4:	beq	147ec <__assert_fail@plt+0x194>
   147e8:	bl	13f50 <puts@plt>
   147ec:	mov	r0, #15
   147f0:	bl	3d0cc <__assert_fail@plt+0x28a74>
   147f4:	cmp	r0, #0
   147f8:	beq	14804 <__assert_fail@plt+0x1ac>
   147fc:	ldr	r1, [r5]
   14800:	bl	145b0 <fputs@plt>
   14804:	mov	r0, #18
   14808:	bl	3d0cc <__assert_fail@plt+0x28a74>
   1480c:	cmp	r0, #0
   14810:	beq	1481c <__assert_fail@plt+0x1c4>
   14814:	ldr	r1, [r5]
   14818:	bl	145b0 <fputs@plt>
   1481c:	mov	r0, r4
   14820:	add	r4, r4, #1
   14824:	bl	3d0cc <__assert_fail@plt+0x28a74>
   14828:	cmp	r0, #0
   1482c:	beq	14838 <__assert_fail@plt+0x1e0>
   14830:	ldr	r1, [r5]
   14834:	bl	145b0 <fputs@plt>
   14838:	cmp	r4, #40	; 0x28
   1483c:	bne	1481c <__assert_fail@plt+0x1c4>
   14840:	ldr	r0, [r5]
   14844:	pop	{r3, r4, r5, lr}
   14848:	b	13ae8 <fflush@plt>
   1484c:	movw	r2, #47296	; 0xb8c0
   14850:	movt	r2, #5
   14854:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14858:	sub	sp, sp, #836	; 0x344
   1485c:	ldr	r3, [r2]
   14860:	movw	fp, #47324	; 0xb8dc
   14864:	str	r2, [sp, #68]	; 0x44
   14868:	movt	fp, #5
   1486c:	str	r1, [sp, #72]	; 0x48
   14870:	str	r3, [sp, #828]	; 0x33c
   14874:	str	r0, [sp, #76]	; 0x4c
   14878:	bl	32344 <__assert_fail@plt+0x1dcec>
   1487c:	add	r2, fp, #72	; 0x48
   14880:	mov	r1, #0
   14884:	str	r0, [fp, #68]	; 0x44
   14888:	mov	r0, #1
   1488c:	bl	13b18 <sigprocmask@plt>
   14890:	cmp	r0, #0
   14894:	movw	r0, #31124	; 0x7994
   14898:	movt	r0, #1
   1489c:	moveq	r3, #1
   148a0:	streq	r3, [fp, #200]	; 0xc8
   148a4:	bl	3e7f0 <__assert_fail@plt+0x2a198>
   148a8:	mov	r0, #28
   148ac:	bl	144c0 <gcry_control@plt>
   148b0:	mov	r1, #5
   148b4:	movw	r0, #3500	; 0xdac
   148b8:	movt	r0, #4
   148bc:	movw	r3, #46196	; 0xb474
   148c0:	movt	r3, #5
   148c4:	str	r3, [sp, #64]	; 0x40
   148c8:	bl	3f314 <__assert_fail@plt+0x2acbc>
   148cc:	bl	2b65c <__assert_fail@plt+0x17004>
   148d0:	bl	2b760 <__assert_fail@plt+0x17108>
   148d4:	ldr	lr, [sp, #64]	; 0x40
   148d8:	mov	r0, #47	; 0x2f
   148dc:	movw	r3, #30484	; 0x7714
   148e0:	add	r1, lr, #856	; 0x358
   148e4:	movt	r3, #1
   148e8:	str	r3, [lr, #860]	; 0x35c
   148ec:	bl	144c0 <gcry_control@plt>
   148f0:	subs	r4, r0, #0
   148f4:	bne	15f2c <__assert_fail@plt+0x18d4>
   148f8:	movw	r0, #3556	; 0xde4
   148fc:	movt	r0, #4
   14900:	bl	13d70 <gcry_check_version@plt>
   14904:	subs	r5, r0, #0
   14908:	beq	160dc <__assert_fail@plt+0x1a84>
   1490c:	add	r0, sp, #92	; 0x5c
   14910:	movw	r2, #14792	; 0x39c8
   14914:	movw	r3, #17108	; 0x42d4
   14918:	movt	r2, #1
   1491c:	movt	r3, #1
   14920:	str	r2, [sp, #92]	; 0x5c
   14924:	str	r3, [sp, #96]	; 0x60
   14928:	movw	r3, #15428	; 0x3c44
   1492c:	movt	r3, #1
   14930:	str	r3, [sp, #100]	; 0x64
   14934:	bl	14454 <assuan_set_malloc_hooks@plt>
   14938:	mov	r0, r4
   1493c:	bl	3f368 <__assert_fail@plt+0x2ad10>
   14940:	movw	r9, #48116	; 0xbbf4
   14944:	bl	13bfc <assuan_set_assuan_log_prefix@plt>
   14948:	mov	r0, #4
   1494c:	bl	1440c <assuan_set_gpg_err_source@plt>
   14950:	ldr	r1, [sp, #64]	; 0x40
   14954:	movt	r9, #5
   14958:	add	r0, r1, #912	; 0x390
   1495c:	bl	144cc <assuan_set_system_hooks@plt>
   14960:	bl	14634 <assuan_sock_init@plt>
   14964:	bl	2e9c8 <__assert_fail@plt+0x1a370>
   14968:	mov	r0, #22
   1496c:	bl	144c0 <gcry_control@plt>
   14970:	bl	2c5b0 <__assert_fail@plt+0x17f58>
   14974:	mov	r1, r4
   14978:	mov	r0, r4
   1497c:	bl	1687c <__assert_fail@plt+0x2224>
   14980:	movw	r0, #3600	; 0xe10
   14984:	movt	r0, #4
   14988:	mov	r3, #1
   1498c:	str	r3, [r9, #36]	; 0x24
   14990:	bl	13f14 <getenv@plt>
   14994:	subs	r5, r0, #0
   14998:	streq	r5, [sp, #32]
   1499c:	beq	149b0 <__assert_fail@plt+0x358>
   149a0:	bl	14094 <strlen@plt>
   149a4:	cmp	r0, #2
   149a8:	strls	r4, [sp, #32]
   149ac:	bhi	14b30 <__assert_fail@plt+0x4d8>
   149b0:	bl	2c980 <__assert_fail@plt+0x18328>
   149b4:	str	r0, [r9, #20]
   149b8:	bl	39698 <__assert_fail@plt+0x25040>
   149bc:	cmp	r0, #0
   149c0:	str	r0, [r9, #24]
   149c4:	beq	15d74 <__assert_fail@plt+0x171c>
   149c8:	movw	r4, #2040	; 0x7f8
   149cc:	movw	r6, #1432	; 0x598
   149d0:	movt	r4, #4
   149d4:	movt	r6, #4
   149d8:	mov	r5, #1
   149dc:	b	149f4 <__assert_fail@plt+0x39c>
   149e0:	add	r3, r6, r5, lsl #2
   149e4:	add	r5, r5, #1
   149e8:	ldr	r4, [r3, #44]	; 0x2c
   149ec:	cmp	r4, #0
   149f0:	beq	14a2c <__assert_fail@plt+0x3d4>
   149f4:	mov	r0, r4
   149f8:	bl	13f14 <getenv@plt>
   149fc:	subs	r2, r0, #0
   14a00:	beq	149e0 <__assert_fail@plt+0x388>
   14a04:	mov	r1, r4
   14a08:	ldr	r0, [r9, #24]
   14a0c:	bl	39804 <__assert_fail@plt+0x251ac>
   14a10:	cmp	r0, #0
   14a14:	beq	149e0 <__assert_fail@plt+0x388>
   14a18:	bl	13a64 <gpg_strerror@plt>
   14a1c:	mov	r1, r0
   14a20:	movw	r0, #3608	; 0xe18
   14a24:	movt	r0, #4
   14a28:	bl	3f544 <__assert_fail@plt+0x2aeec>
   14a2c:	mov	r0, r4
   14a30:	bl	14088 <ttyname@plt>
   14a34:	subs	r2, r0, #0
   14a38:	beq	14a54 <__assert_fail@plt+0x3fc>
   14a3c:	movw	r1, #2048	; 0x800
   14a40:	ldr	r0, [r9, #24]
   14a44:	movt	r1, #4
   14a48:	bl	39804 <__assert_fail@plt+0x251ac>
   14a4c:	cmp	r0, #0
   14a50:	bne	14a18 <__assert_fail@plt+0x3c0>
   14a54:	movw	r0, #3652	; 0xe44
   14a58:	movt	r0, #4
   14a5c:	bl	13f14 <getenv@plt>
   14a60:	movw	r4, #48116	; 0xbbf4
   14a64:	movt	r4, #5
   14a68:	cmp	r0, #0
   14a6c:	str	r0, [r9, #28]
   14a70:	beq	14a7c <__assert_fail@plt+0x424>
   14a74:	bl	141f0 <gcry_xstrdup@plt>
   14a78:	str	r0, [r4, #28]
   14a7c:	movw	r0, #3664	; 0xe50
   14a80:	movt	r0, #4
   14a84:	bl	13f14 <getenv@plt>
   14a88:	movw	r4, #48116	; 0xbbf4
   14a8c:	movt	r4, #5
   14a90:	cmp	r0, #0
   14a94:	str	r0, [r9, #32]
   14a98:	beq	14aa4 <__assert_fail@plt+0x44c>
   14a9c:	bl	141f0 <gcry_xstrdup@plt>
   14aa0:	str	r0, [r4, #32]
   14aa4:	mov	r3, #65	; 0x41
   14aa8:	ldr	r8, [sp, #76]	; 0x4c
   14aac:	str	r3, [sp, #112]	; 0x70
   14ab0:	mov	r3, #0
   14ab4:	str	r3, [sp, #24]
   14ab8:	movw	r4, #510	; 0x1fe
   14abc:	ldr	r3, [sp, #72]	; 0x48
   14ac0:	movw	r7, #511	; 0x1ff
   14ac4:	add	r6, sp, #76	; 0x4c
   14ac8:	add	r5, sp, #72	; 0x48
   14acc:	mov	r2, #1
   14ad0:	str	r6, [sp, #104]	; 0x68
   14ad4:	str	r5, [sp, #108]	; 0x6c
   14ad8:	str	r2, [sp, #28]
   14adc:	str	r3, [sp, #20]
   14ae0:	movw	sl, #46196	; 0xb474
   14ae4:	movt	sl, #5
   14ae8:	add	r1, sl, #8
   14aec:	add	r0, sp, #104	; 0x68
   14af0:	bl	3d6a4 <__assert_fail@plt+0x2904c>
   14af4:	cmp	r0, #0
   14af8:	beq	14b94 <__assert_fail@plt+0x53c>
   14afc:	ldr	r2, [sp, #120]	; 0x78
   14b00:	sub	r3, r2, #504	; 0x1f8
   14b04:	sub	r3, r3, #1
   14b08:	cmp	r3, #1
   14b0c:	bls	14b6c <__assert_fail@plt+0x514>
   14b10:	cmp	r2, #504	; 0x1f8
   14b14:	beq	14b7c <__assert_fail@plt+0x524>
   14b18:	cmp	r2, r4
   14b1c:	beq	14b88 <__assert_fail@plt+0x530>
   14b20:	cmp	r2, r7
   14b24:	ldreq	r3, [sp, #128]	; 0x80
   14b28:	streq	r3, [r9, #20]
   14b2c:	b	14ae0 <__assert_fail@plt+0x488>
   14b30:	sub	r3, r0, #3
   14b34:	add	r2, r5, r3
   14b38:	ldrb	r3, [r5, r3]
   14b3c:	subs	r3, r3, #99	; 0x63
   14b40:	bne	14b5c <__assert_fail@plt+0x504>
   14b44:	ldrb	r3, [r2, #1]
   14b48:	subs	r3, r3, #115	; 0x73
   14b4c:	bne	14b5c <__assert_fail@plt+0x504>
   14b50:	ldrb	r3, [r2, #2]
   14b54:	subs	r3, r3, #104	; 0x68
   14b58:	ldrbeq	r3, [r2, #3]
   14b5c:	rsbs	r3, r3, #1
   14b60:	movcc	r3, #0
   14b64:	str	r3, [sp, #32]
   14b68:	b	149b0 <__assert_fail@plt+0x358>
   14b6c:	ldr	lr, [sp, #24]
   14b70:	add	lr, lr, #1
   14b74:	str	lr, [sp, #24]
   14b78:	b	14ae0 <__assert_fail@plt+0x488>
   14b7c:	mov	r0, #0
   14b80:	str	r0, [sp, #28]
   14b84:	b	14ae0 <__assert_fail@plt+0x488>
   14b88:	mov	r1, #0
   14b8c:	str	r1, [sp, #28]
   14b90:	b	14ae0 <__assert_fail@plt+0x488>
   14b94:	mov	r3, r0
   14b98:	mov	r1, #32768	; 0x8000
   14b9c:	mov	r2, r3
   14ba0:	mov	r0, #24
   14ba4:	str	r3, [sp, #12]
   14ba8:	bl	144c0 <gcry_control@plt>
   14bac:	ldr	r2, [sp, #28]
   14bb0:	ldr	r3, [sp, #12]
   14bb4:	cmp	r2, #0
   14bb8:	str	r3, [sl]
   14bbc:	ldreq	r4, [sp, #28]
   14bc0:	bne	15ad0 <__assert_fail@plt+0x1478>
   14bc4:	mov	r3, #0
   14bc8:	str	r6, [sp, #104]	; 0x68
   14bcc:	str	r3, [sp, #40]	; 0x28
   14bd0:	mov	lr, #0
   14bd4:	ldr	r3, [sp, #20]
   14bd8:	movw	r2, #47324	; 0xb8dc
   14bdc:	ldr	r6, [pc, #3932]	; 15b40 <__assert_fail@plt+0x14e8>
   14be0:	movt	r2, #5
   14be4:	str	r8, [sp, #76]	; 0x4c
   14be8:	str	r3, [sp, #72]	; 0x48
   14bec:	mov	r3, #1
   14bf0:	str	lr, [sp, #20]
   14bf4:	str	lr, [sp, #56]	; 0x38
   14bf8:	str	r5, [sp, #108]	; 0x6c
   14bfc:	str	lr, [sp, #48]	; 0x30
   14c00:	str	lr, [sp, #60]	; 0x3c
   14c04:	str	lr, [sp, #52]	; 0x34
   14c08:	str	lr, [sp, #44]	; 0x2c
   14c0c:	str	r3, [sp, #112]	; 0x70
   14c10:	str	r2, [sp, #36]	; 0x24
   14c14:	cmp	r4, #0
   14c18:	beq	14df8 <__assert_fail@plt+0x7a0>
   14c1c:	movw	r1, #18760	; 0x4948
   14c20:	mov	r0, r4
   14c24:	movt	r1, #4
   14c28:	mov	r7, #0
   14c2c:	str	r7, [sp, #80]	; 0x50
   14c30:	bl	14490 <fopen64@plt>
   14c34:	subs	r5, r0, #0
   14c38:	beq	14f84 <__assert_fail@plt+0x92c>
   14c3c:	ldr	r2, [sp, #24]
   14c40:	cmp	r2, #0
   14c44:	bne	14f4c <__assert_fail@plt+0x8f4>
   14c48:	ldr	r3, [sp, #24]
   14c4c:	str	r3, [sp, #28]
   14c50:	mov	sl, #1
   14c54:	movw	r7, #537	; 0x219
   14c58:	movw	r8, #545	; 0x221
   14c5c:	str	r6, [sp]
   14c60:	mov	r0, r5
   14c64:	mov	r1, r4
   14c68:	add	r2, sp, #80	; 0x50
   14c6c:	add	r3, sp, #104	; 0x68
   14c70:	bl	3de24 <__assert_fail@plt+0x297cc>
   14c74:	cmp	r0, #0
   14c78:	beq	14dc8 <__assert_fail@plt+0x770>
   14c7c:	add	r0, sp, #104	; 0x68
   14c80:	mov	r1, #0
   14c84:	bl	1687c <__assert_fail@plt+0x2224>
   14c88:	cmp	r0, #0
   14c8c:	bne	14c5c <__assert_fail@plt+0x604>
   14c90:	ldr	r3, [sp, #120]	; 0x78
   14c94:	cmp	r3, #516	; 0x204
   14c98:	beq	14ef0 <__assert_fail@plt+0x898>
   14c9c:	ble	14cec <__assert_fail@plt+0x694>
   14ca0:	cmp	r3, r7
   14ca4:	beq	14efc <__assert_fail@plt+0x8a4>
   14ca8:	bgt	14d28 <__assert_fail@plt+0x6d0>
   14cac:	movw	r2, #522	; 0x20a
   14cb0:	cmp	r3, r2
   14cb4:	beq	14eb4 <__assert_fail@plt+0x85c>
   14cb8:	bgt	14da0 <__assert_fail@plt+0x748>
   14cbc:	cmp	r3, #520	; 0x208
   14cc0:	beq	14f14 <__assert_fail@plt+0x8bc>
   14cc4:	bgt	14f04 <__assert_fail@plt+0x8ac>
   14cc8:	movw	r2, #517	; 0x205
   14ccc:	cmp	r3, r2
   14cd0:	streq	sl, [r9, #16]
   14cd4:	beq	14c5c <__assert_fail@plt+0x604>
   14cd8:	cmp	r5, #0
   14cdc:	moveq	r3, #2
   14ce0:	movne	r3, #1
   14ce4:	str	r3, [sp, #116]	; 0x74
   14ce8:	b	14c5c <__assert_fail@plt+0x604>
   14cec:	cmp	r3, #504	; 0x1f8
   14cf0:	beq	14f24 <__assert_fail@plt+0x8cc>
   14cf4:	bgt	14d60 <__assert_fail@plt+0x708>
   14cf8:	cmp	r3, #500	; 0x1f4
   14cfc:	streq	r0, [r9, #4]
   14d00:	beq	14c5c <__assert_fail@plt+0x604>
   14d04:	ble	14e38 <__assert_fail@plt+0x7e0>
   14d08:	movw	r2, #502	; 0x1f6
   14d0c:	cmp	r3, r2
   14d10:	beq	14e80 <__assert_fail@plt+0x828>
   14d14:	movle	r1, #1
   14d18:	strle	r1, [sp, #20]
   14d1c:	movgt	r1, #3
   14d20:	strgt	r1, [sp, #20]
   14d24:	b	14c5c <__assert_fail@plt+0x604>
   14d28:	cmp	r3, r8
   14d2c:	streq	sl, [r9, #124]	; 0x7c
   14d30:	beq	14c5c <__assert_fail@plt+0x604>
   14d34:	bgt	14e00 <__assert_fail@plt+0x7a8>
   14d38:	movw	r2, #539	; 0x21b
   14d3c:	cmp	r3, r2
   14d40:	beq	14e8c <__assert_fail@plt+0x834>
   14d44:	movlt	lr, #0
   14d48:	strlt	lr, [r9, #36]	; 0x24
   14d4c:	blt	14c5c <__assert_fail@plt+0x604>
   14d50:	cmp	r3, #544	; 0x220
   14d54:	streq	sl, [r9, #120]	; 0x78
   14d58:	beq	14c5c <__assert_fail@plt+0x604>
   14d5c:	b	14cd8 <__assert_fail@plt+0x680>
   14d60:	movw	r2, #511	; 0x1ff
   14d64:	cmp	r3, r2
   14d68:	beq	14ea8 <__assert_fail@plt+0x850>
   14d6c:	cmp	r3, #512	; 0x200
   14d70:	blt	14e6c <__assert_fail@plt+0x814>
   14d74:	movw	r2, #514	; 0x202
   14d78:	cmp	r3, r2
   14d7c:	beq	14ec4 <__assert_fail@plt+0x86c>
   14d80:	movgt	r2, #1
   14d84:	strgt	r2, [sp, #44]	; 0x2c
   14d88:	bgt	14c5c <__assert_fail@plt+0x604>
   14d8c:	cmp	r3, #512	; 0x200
   14d90:	moveq	r3, #1
   14d94:	streq	r3, [sp, #60]	; 0x3c
   14d98:	beq	14c5c <__assert_fail@plt+0x604>
   14d9c:	b	14cd8 <__assert_fail@plt+0x680>
   14da0:	cmp	r3, #524	; 0x20c
   14da4:	beq	14ee0 <__assert_fail@plt+0x888>
   14da8:	blt	14ed0 <__assert_fail@plt+0x878>
   14dac:	movw	r2, #525	; 0x20d
   14db0:	cmp	r3, r2
   14db4:	bne	14cd8 <__assert_fail@plt+0x680>
   14db8:	ldr	r0, [sp, #128]	; 0x80
   14dbc:	bl	141f0 <gcry_xstrdup@plt>
   14dc0:	str	r0, [fp, #20]
   14dc4:	b	14c5c <__assert_fail@plt+0x604>
   14dc8:	cmp	r5, #0
   14dcc:	mov	sl, r0
   14dd0:	beq	14fd0 <__assert_fail@plt+0x978>
   14dd4:	mov	r0, r5
   14dd8:	bl	142c8 <fclose@plt>
   14ddc:	ldr	r0, [fp, #64]	; 0x40
   14de0:	cmp	r4, r0
   14de4:	beq	14df4 <__assert_fail@plt+0x79c>
   14de8:	bl	13c44 <gcry_free@plt>
   14dec:	ldr	r2, [sp, #36]	; 0x24
   14df0:	str	r4, [r2, #64]	; 0x40
   14df4:	mov	r4, sl
   14df8:	mov	r5, #0
   14dfc:	b	14c50 <__assert_fail@plt+0x5f8>
   14e00:	movw	lr, #547	; 0x223
   14e04:	cmp	r3, lr
   14e08:	beq	14c5c <__assert_fail@plt+0x604>
   14e0c:	strlt	sl, [r9, #128]	; 0x80
   14e10:	blt	14c5c <__assert_fail@plt+0x604>
   14e14:	movw	r2, #549	; 0x225
   14e18:	cmp	r3, r2
   14e1c:	bne	14cd8 <__assert_fail@plt+0x680>
   14e20:	ldr	r1, [sp, #124]	; 0x7c
   14e24:	cmp	r1, #0
   14e28:	beq	14f70 <__assert_fail@plt+0x918>
   14e2c:	ldr	r0, [sp, #128]	; 0x80
   14e30:	str	r0, [sp, #40]	; 0x28
   14e34:	b	14c5c <__assert_fail@plt+0x604>
   14e38:	cmp	r3, #99	; 0x63
   14e3c:	moveq	r0, #1
   14e40:	streq	r0, [sp, #32]
   14e44:	beq	14c5c <__assert_fail@plt+0x604>
   14e48:	cmp	r3, #115	; 0x73
   14e4c:	moveq	r1, #0
   14e50:	streq	r1, [sp, #32]
   14e54:	beq	14c5c <__assert_fail@plt+0x604>
   14e58:	cmp	r5, #0
   14e5c:	moveq	r3, #2
   14e60:	movne	r3, #1
   14e64:	str	r3, [sp, #116]	; 0x74
   14e68:	b	14c5c <__assert_fail@plt+0x604>
   14e6c:	cmp	r3, #508	; 0x1fc
   14e70:	bne	14f44 <__assert_fail@plt+0x8ec>
   14e74:	ldr	r2, [sp, #128]	; 0x80
   14e78:	str	r2, [sp, #56]	; 0x38
   14e7c:	b	14c5c <__assert_fail@plt+0x604>
   14e80:	mov	r0, #2
   14e84:	str	r0, [sp, #20]
   14e88:	b	14c5c <__assert_fail@plt+0x604>
   14e8c:	ldr	r0, [sp, #128]	; 0x80
   14e90:	bl	2d480 <__assert_fail@plt+0x18e28>
   14e94:	cmn	r0, #1
   14e98:	beq	14fbc <__assert_fail@plt+0x964>
   14e9c:	mov	r1, #0
   14ea0:	bl	2d280 <__assert_fail@plt+0x18c28>
   14ea4:	b	14c5c <__assert_fail@plt+0x604>
   14ea8:	ldr	r3, [sp, #128]	; 0x80
   14eac:	str	r3, [r9, #20]
   14eb0:	b	14c5c <__assert_fail@plt+0x604>
   14eb4:	ldr	r0, [sp, #128]	; 0x80
   14eb8:	bl	141f0 <gcry_xstrdup@plt>
   14ebc:	str	r0, [fp, #16]
   14ec0:	b	14c5c <__assert_fail@plt+0x604>
   14ec4:	ldr	lr, [sp, #128]	; 0x80
   14ec8:	str	lr, [sp, #48]	; 0x30
   14ecc:	b	14c5c <__assert_fail@plt+0x604>
   14ed0:	ldr	r0, [sp, #128]	; 0x80
   14ed4:	bl	141f0 <gcry_xstrdup@plt>
   14ed8:	str	r0, [fp, #24]
   14edc:	b	14c5c <__assert_fail@plt+0x604>
   14ee0:	ldr	r0, [sp, #128]	; 0x80
   14ee4:	bl	141f0 <gcry_xstrdup@plt>
   14ee8:	str	r0, [fp, #28]
   14eec:	b	14db8 <__assert_fail@plt+0x760>
   14ef0:	mov	r3, #1
   14ef4:	str	r3, [sp, #52]	; 0x34
   14ef8:	b	14c5c <__assert_fail@plt+0x604>
   14efc:	str	sl, [r9, #36]	; 0x24
   14f00:	b	14c5c <__assert_fail@plt+0x604>
   14f04:	ldr	r0, [sp, #128]	; 0x80
   14f08:	bl	141f0 <gcry_xstrdup@plt>
   14f0c:	str	r0, [fp, #12]
   14f10:	b	14c5c <__assert_fail@plt+0x604>
   14f14:	ldr	r0, [sp, #128]	; 0x80
   14f18:	bl	141f0 <gcry_xstrdup@plt>
   14f1c:	str	r0, [fp, #8]
   14f20:	b	14c5c <__assert_fail@plt+0x604>
   14f24:	cmp	r5, #0
   14f28:	bne	14c5c <__assert_fail@plt+0x604>
   14f2c:	mov	r0, r4
   14f30:	bl	13c44 <gcry_free@plt>
   14f34:	ldr	r0, [sp, #128]	; 0x80
   14f38:	bl	141f0 <gcry_xstrdup@plt>
   14f3c:	mov	r4, r0
   14f40:	b	14c14 <__assert_fail@plt+0x5bc>
   14f44:	bge	14c5c <__assert_fail@plt+0x604>
   14f48:	b	14cd8 <__assert_fail@plt+0x680>
   14f4c:	mov	r0, r7
   14f50:	mov	r2, #5
   14f54:	movw	r1, #3728	; 0xe90
   14f58:	movt	r1, #4
   14f5c:	bl	13cc8 <dcgettext@plt>
   14f60:	mov	r1, r4
   14f64:	str	r7, [sp, #28]
   14f68:	bl	3f478 <__assert_fail@plt+0x2ae20>
   14f6c:	b	14c50 <__assert_fail@plt+0x5f8>
   14f70:	movw	r0, #3756	; 0xeac
   14f74:	movt	r0, #4
   14f78:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   14f7c:	str	r0, [sp, #40]	; 0x28
   14f80:	b	14c5c <__assert_fail@plt+0x604>
   14f84:	ldr	lr, [sp, #28]
   14f88:	cmp	lr, r7
   14f8c:	beq	16314 <__assert_fail@plt+0x1cbc>
   14f90:	ldr	r1, [sp, #24]
   14f94:	cmp	r1, r7
   14f98:	bne	15984 <__assert_fail@plt+0x132c>
   14f9c:	ldr	r0, [fp, #64]	; 0x40
   14fa0:	bl	13c44 <gcry_free@plt>
   14fa4:	mov	r0, #0
   14fa8:	str	r4, [fp, #64]	; 0x40
   14fac:	mov	r4, r0
   14fb0:	bl	13c44 <gcry_free@plt>
   14fb4:	str	r4, [sp, #28]
   14fb8:	b	14c50 <__assert_fail@plt+0x5f8>
   14fbc:	ldr	r0, [sp, #128]	; 0x80
   14fc0:	mov	r1, #0
   14fc4:	mov	r2, #10
   14fc8:	bl	1407c <strtoul@plt>
   14fcc:	b	14e9c <__assert_fail@plt+0x844>
   14fd0:	mov	r0, r4
   14fd4:	bl	13c44 <gcry_free@plt>
   14fd8:	mov	r0, r5
   14fdc:	bl	3f2ac <__assert_fail@plt+0x2ac54>
   14fe0:	cmp	r0, #0
   14fe4:	bne	1630c <__assert_fail@plt+0x1cb4>
   14fe8:	bl	16d04 <__assert_fail@plt+0x26ac>
   14fec:	movw	r0, #30732	; 0x780c
   14ff0:	movt	r0, #1
   14ff4:	bl	4055c <__assert_fail@plt+0x2bf04>
   14ff8:	cmp	r0, #0
   14ffc:	bne	160c4 <__assert_fail@plt+0x1a6c>
   15000:	bl	206dc <__assert_fail@plt+0xc084>
   15004:	add	r3, sp, #160	; 0xa0
   15008:	str	r3, [sp, #16]
   1500c:	bl	29d24 <__assert_fail@plt+0x156cc>
   15010:	bl	279d0 <__assert_fail@plt+0x13378>
   15014:	bl	2c974 <__assert_fail@plt+0x1831c>
   15018:	mov	r1, r5
   1501c:	mov	r4, r0
   15020:	ldr	r0, [r9, #20]
   15024:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   15028:	add	r2, sp, #160	; 0xa0
   1502c:	mov	r1, r0
   15030:	mov	r6, r0
   15034:	mov	r0, #3
   15038:	bl	1458c <__xstat64@plt>
   1503c:	cmp	r0, #0
   15040:	beq	159a0 <__assert_fail@plt+0x1348>
   15044:	bl	14148 <__errno_location@plt>
   15048:	ldr	r3, [r0]
   1504c:	mov	r7, r0
   15050:	cmp	r3, #2
   15054:	bne	15b0c <__assert_fail@plt+0x14b4>
   15058:	ldrb	r3, [r4]
   1505c:	cmp	r3, #126	; 0x7e
   15060:	beq	15d38 <__assert_fail@plt+0x16e0>
   15064:	mov	r1, r4
   15068:	mov	r0, r6
   1506c:	bl	13a28 <strcmp@plt>
   15070:	cmp	r0, #0
   15074:	bne	150a0 <__assert_fail@plt+0xa48>
   15078:	mov	r0, r6
   1507c:	mov	r1, #448	; 0x1c0
   15080:	bl	1419c <mkdir@plt>
   15084:	cmp	r0, #0
   15088:	bne	15d08 <__assert_fail@plt+0x16b0>
   1508c:	ldr	r3, [r9, #8]
   15090:	cmp	r3, #0
   15094:	beq	15cec <__assert_fail@plt+0x1694>
   15098:	mov	r0, r6
   1509c:	bl	17030 <__assert_fail@plt+0x29d8>
   150a0:	mov	r0, r6
   150a4:	bl	13c44 <gcry_free@plt>
   150a8:	ldr	r3, [sp, #44]	; 0x2c
   150ac:	ldr	lr, [sp, #56]	; 0x38
   150b0:	cmp	lr, #0
   150b4:	moveq	r3, #0
   150b8:	andne	r3, r3, #1
   150bc:	cmp	r3, #0
   150c0:	bne	15aa4 <__assert_fail@plt+0x144c>
   150c4:	ldr	r0, [sp, #20]
   150c8:	cmp	r0, #3
   150cc:	beq	162d8 <__assert_fail@plt+0x1c80>
   150d0:	ldr	r1, [sp, #20]
   150d4:	cmp	r1, #2
   150d8:	beq	162d0 <__assert_fail@plt+0x1c78>
   150dc:	ldr	r2, [sp, #20]
   150e0:	cmp	r2, #0
   150e4:	bne	16114 <__assert_fail@plt+0x1abc>
   150e8:	ldr	r3, [sp, #44]	; 0x2c
   150ec:	ldr	lr, [sp, #52]	; 0x34
   150f0:	orrs	r3, r3, lr
   150f4:	beq	163f8 <__assert_fail@plt+0x1da0>
   150f8:	movw	r0, #4448	; 0x1160
   150fc:	movw	r1, #4456	; 0x1168
   15100:	movt	r0, #4
   15104:	movt	r1, #4
   15108:	bl	13ea8 <bind_textdomain_codeset@plt>
   1510c:	ldr	r0, [sp, #48]	; 0x30
   15110:	cmp	r0, #0
   15114:	beq	15134 <__assert_fail@plt+0xadc>
   15118:	bl	3f2e0 <__assert_fail@plt+0x2ac88>
   1511c:	ldr	r0, [sp, #20]
   15120:	mov	r1, #7
   15124:	bl	3f314 <__assert_fail@plt+0x2acbc>
   15128:	ldr	r0, [sp, #48]	; 0x30
   1512c:	bl	141f0 <gcry_xstrdup@plt>
   15130:	str	r0, [fp, #4]
   15134:	ldr	r3, [r9]
   15138:	tst	r3, #1024	; 0x400
   1513c:	bne	15a98 <__assert_fail@plt+0x1440>
   15140:	ldr	r3, [fp, #12]
   15144:	movw	r4, #47324	; 0xb8dc
   15148:	movt	r4, #5
   1514c:	cmp	r3, #0
   15150:	beq	15dc8 <__assert_fail@plt+0x1770>
   15154:	ldr	r3, [fp, #16]
   15158:	movw	r4, #47324	; 0xb8dc
   1515c:	movt	r4, #5
   15160:	cmp	r3, #0
   15164:	beq	15d9c <__assert_fail@plt+0x1744>
   15168:	ldr	r1, [sp, #44]	; 0x2c
   1516c:	cmp	r1, #0
   15170:	bne	15a48 <__assert_fail@plt+0x13f0>
   15174:	ldr	r2, [sp, #52]	; 0x34
   15178:	cmp	r2, #0
   1517c:	beq	15868 <__assert_fail@plt+0x1210>
   15180:	ldr	r3, [r9, #124]	; 0x7c
   15184:	cmp	r3, #0
   15188:	bne	15198 <__assert_fail@plt+0xb40>
   1518c:	ldr	r3, [sp, #76]	; 0x4c
   15190:	cmp	r3, #0
   15194:	beq	15d8c <__assert_fail@plt+0x1734>
   15198:	movw	r0, #4576	; 0x11e0
   1519c:	movw	r1, #4560	; 0x11d0
   151a0:	movt	r0, #4
   151a4:	movt	r1, #4
   151a8:	bl	17cbc <__assert_fail@plt+0x3664>
   151ac:	ldr	r3, [r9, #128]	; 0x80
   151b0:	movw	r4, #47324	; 0xb8dc
   151b4:	movt	r4, #5
   151b8:	cmp	r3, #0
   151bc:	str	r0, [fp, #36]	; 0x24
   151c0:	beq	151dc <__assert_fail@plt+0xb84>
   151c4:	movw	r0, #4604	; 0x11fc
   151c8:	movw	r1, #4588	; 0x11ec
   151cc:	movt	r0, #4
   151d0:	movt	r1, #4
   151d4:	bl	17cbc <__assert_fail@plt+0x3664>
   151d8:	str	r0, [r4, #40]	; 0x28
   151dc:	movw	r4, #47324	; 0xb8dc
   151e0:	movt	r4, #5
   151e4:	add	r2, r4, #48	; 0x30
   151e8:	ldr	r0, [fp, #36]	; 0x24
   151ec:	mov	r1, #0
   151f0:	bl	17de0 <__assert_fail@plt+0x3788>
   151f4:	ldr	r3, [r9, #128]	; 0x80
   151f8:	cmp	r3, #0
   151fc:	mvneq	r3, #0
   15200:	streq	r3, [sp, #20]
   15204:	str	r0, [sp, #24]
   15208:	beq	15220 <__assert_fail@plt+0xbc8>
   1520c:	ldr	r0, [r4, #40]	; 0x28
   15210:	add	r2, r4, #56	; 0x38
   15214:	mov	r1, #1
   15218:	bl	17de0 <__assert_fail@plt+0x3788>
   1521c:	str	r0, [sp, #20]
   15220:	ldr	r3, [sp, #76]	; 0x4c
   15224:	cmp	r3, #0
   15228:	beq	15238 <__assert_fail@plt+0xbe0>
   1522c:	bl	14040 <getpid@plt>
   15230:	ldr	lr, [sp, #64]	; 0x40
   15234:	str	r0, [lr, #4]
   15238:	mov	r0, #0
   1523c:	bl	13ae8 <fflush@plt>
   15240:	bl	1437c <fork@plt>
   15244:	cmn	r0, #1
   15248:	mov	r4, r0
   1524c:	beq	16040 <__assert_fail@plt+0x19e8>
   15250:	cmp	r0, #0
   15254:	bne	15b4c <__assert_fail@plt+0x14f4>
   15258:	ldr	r2, [sp, #60]	; 0x3c
   1525c:	cmp	r2, #0
   15260:	bne	152e8 <__assert_fail@plt+0xc90>
   15264:	mov	r4, r2
   15268:	mov	r0, r4
   1526c:	bl	3f3cc <__assert_fail@plt+0x2ad74>
   15270:	cmp	r0, #0
   15274:	bne	152b0 <__assert_fail@plt+0xc58>
   15278:	ldr	r3, [sp, #24]
   1527c:	cmp	r4, r3
   15280:	beq	152b0 <__assert_fail@plt+0xc58>
   15284:	mov	r0, r4
   15288:	bl	145ec <close@plt>
   1528c:	cmp	r0, #0
   15290:	bne	152b0 <__assert_fail@plt+0xc58>
   15294:	adds	r1, r4, #0
   15298:	movw	r0, #5004	; 0x138c
   1529c:	movt	r0, #4
   152a0:	movne	r1, #1
   152a4:	bl	14118 <__open64_2@plt>
   152a8:	cmn	r0, #1
   152ac:	beq	163c8 <__assert_fail@plt+0x1d70>
   152b0:	add	r4, r4, #1
   152b4:	cmp	r4, #3
   152b8:	bne	15268 <__assert_fail@plt+0xc10>
   152bc:	bl	140a0 <setsid@plt>
   152c0:	cmn	r0, #1
   152c4:	beq	163a0 <__assert_fail@plt+0x1d48>
   152c8:	add	r0, sp, #160	; 0xa0
   152cc:	bl	3f368 <__assert_fail@plt+0x2ad10>
   152d0:	ldr	r1, [sp, #160]	; 0xa0
   152d4:	mov	r0, #0
   152d8:	orr	r1, r1, #256	; 0x100
   152dc:	bl	3f314 <__assert_fail@plt+0x2acbc>
   152e0:	mov	r3, #1
   152e4:	str	r3, [r9, #104]	; 0x68
   152e8:	movw	r0, #37288	; 0x91a8
   152ec:	movt	r0, #4
   152f0:	bl	13d94 <chdir@plt>
   152f4:	subs	r6, r0, #0
   152f8:	bne	16378 <__assert_fail@plt+0x1d20>
   152fc:	add	r7, sp, #832	; 0x340
   15300:	mov	r5, #1
   15304:	str	r5, [r7, #-196]!	; 0xffffff3c
   15308:	add	r0, r7, #4
   1530c:	bl	14358 <sigemptyset@plt>
   15310:	mov	r1, r7
   15314:	mov	r2, r6
   15318:	mov	r0, #13
   1531c:	str	r6, [sp, #768]	; 0x300
   15320:	bl	13df4 <sigaction@plt>
   15324:	mov	r0, #11
   15328:	bl	3d0cc <__assert_fail@plt+0x28a74>
   1532c:	mov	r4, r0
   15330:	mov	r0, #13
   15334:	bl	3d0cc <__assert_fail@plt+0x28a74>
   15338:	mov	r1, r4
   1533c:	ldr	r4, [pc, #2048]	; 15b44 <__assert_fail@plt+0x14ec>
   15340:	add	r8, r4, #20
   15344:	mov	r2, r0
   15348:	movw	r0, #5092	; 0x13e4
   1534c:	movt	r0, #4
   15350:	bl	3f478 <__assert_fail@plt+0x2ae20>
   15354:	ldr	r3, [r9, #128]	; 0x80
   15358:	ldr	lr, [sp, #20]
   1535c:	cmp	r3, #0
   15360:	mvneq	lr, #0
   15364:	str	lr, [sp, #20]
   15368:	bl	140d0 <pth_attr_new@plt>
   1536c:	mov	r1, #2
   15370:	mov	r2, r6
   15374:	str	r0, [sp, #32]
   15378:	bl	13b78 <pth_attr_set@plt>
   1537c:	mov	r1, #4
   15380:	mov	r2, #262144	; 0x40000
   15384:	ldr	r0, [sp, #32]
   15388:	bl	13b78 <pth_attr_set@plt>
   1538c:	add	r0, sp, #380	; 0x17c
   15390:	bl	14358 <sigemptyset@plt>
   15394:	add	r0, sp, #640	; 0x280
   15398:	mov	r5, #1
   1539c:	bl	14358 <sigemptyset@plt>
   153a0:	ldr	sl, [r4, #4]!
   153a4:	mov	r1, r7
   153a8:	mov	r2, #0
   153ac:	str	r5, [sp, #636]	; 0x27c
   153b0:	mov	r0, sl
   153b4:	str	r6, [sp, #768]	; 0x300
   153b8:	bl	13df4 <sigaction@plt>
   153bc:	add	r0, sp, #380	; 0x17c
   153c0:	mov	r1, sl
   153c4:	bl	13f8c <sigaddset@plt>
   153c8:	cmp	r4, r8
   153cc:	bne	15394 <__assert_fail@plt+0xd3c>
   153d0:	add	r1, sp, #380	; 0x17c
   153d4:	mov	r2, #0
   153d8:	mov	r0, r5
   153dc:	add	r4, sp, #632	; 0x278
   153e0:	bl	13c38 <pth_sigmask@plt>
   153e4:	add	r2, sp, #84	; 0x54
   153e8:	mov	r0, #8
   153ec:	add	r1, sp, #380	; 0x17c
   153f0:	bl	13968 <pth_event@plt>
   153f4:	add	r3, sp, #504	; 0x1f8
   153f8:	mov	r2, #0
   153fc:	str	r5, [r9, #40]	; 0x28
   15400:	mov	r6, r0
   15404:	str	r2, [r3, #4]!
   15408:	cmp	r3, r4
   1540c:	bne	15404 <__assert_fail@plt+0xdac>
   15410:	ldr	r0, [sp, #24]
   15414:	bl	13d58 <__fdelt_chk@plt>
   15418:	ldr	lr, [sp, #24]
   1541c:	add	r1, sp, #832	; 0x340
   15420:	ands	r3, lr, #-2147483617	; 0x8000001f
   15424:	ldr	lr, [sp, #20]
   15428:	submi	r3, r3, #1
   1542c:	mvnmi	r3, r3, lsl #27
   15430:	mvnmi	r3, r3, lsr #27
   15434:	addmi	r3, r3, #1
   15438:	cmn	lr, #1
   1543c:	add	r2, r1, r0, lsl #2
   15440:	mov	r0, #1
   15444:	lsl	r0, r0, r3
   15448:	str	r0, [sp, #48]	; 0x30
   1544c:	ldr	r1, [r2, #-324]	; 0xfffffebc
   15450:	orr	r3, r1, r0
   15454:	str	r3, [r2, #-324]	; 0xfffffebc
   15458:	beq	15d2c <__assert_fail@plt+0x16d4>
   1545c:	mov	r0, lr
   15460:	bl	13d58 <__fdelt_chk@plt>
   15464:	ldr	r1, [sp, #20]
   15468:	add	lr, sp, #832	; 0x340
   1546c:	ldr	sl, [sp, #20]
   15470:	and	r3, r1, #-2147483617	; 0x8000001f
   15474:	mov	ip, #1
   15478:	cmp	r3, #0
   1547c:	mov	r2, r3
   15480:	sublt	r2, r3, #1
   15484:	mvnlt	r2, r2, lsl #27
   15488:	mvnlt	r2, r2, lsr #27
   1548c:	addlt	r2, r2, #1
   15490:	add	r0, lr, r0, lsl #2
   15494:	ldr	lr, [sp, #24]
   15498:	ldr	r1, [r0, #-324]	; 0xfffffebc
   1549c:	cmp	sl, lr
   154a0:	movlt	sl, lr
   154a4:	orr	r2, r1, ip, lsl r2
   154a8:	str	r2, [r0, #-324]	; 0xfffffebc
   154ac:	cmp	r3, #0
   154b0:	mov	r2, #1
   154b4:	sublt	r3, r3, #1
   154b8:	mov	r5, #0
   154bc:	movw	r0, #5252	; 0x1484
   154c0:	movw	r1, #5164	; 0x142c
   154c4:	mvnlt	r3, r3, lsl #27
   154c8:	movt	r0, #4
   154cc:	mvnlt	r3, r3, lsr #27
   154d0:	addlt	r3, r3, #1
   154d4:	lsl	r2, r2, r3
   154d8:	movt	r1, #4
   154dc:	str	r2, [sp, #36]	; 0x24
   154e0:	str	r0, [sp, #40]	; 0x28
   154e4:	str	r1, [sp, #44]	; 0x2c
   154e8:	mov	r0, #1
   154ec:	add	r1, sp, #380	; 0x17c
   154f0:	mov	r2, #0
   154f4:	bl	13c38 <pth_sigmask@plt>
   154f8:	ldr	r3, [fp, #44]	; 0x2c
   154fc:	cmp	r3, #0
   15500:	beq	15528 <__assert_fail@plt+0xed0>
   15504:	mov	r0, #1008	; 0x3f0
   15508:	bl	13ad0 <pth_ctrl@plt>
   1550c:	cmp	r0, #1
   15510:	beq	157fc <__assert_fail@plt+0x11a4>
   15514:	add	r3, sp, #504	; 0x1f8
   15518:	mov	r2, #0
   1551c:	str	r2, [r3, #4]!
   15520:	cmp	r3, r4
   15524:	bne	1551c <__assert_fail@plt+0xec4>
   15528:	cmp	r5, #0
   1552c:	beq	159cc <__assert_fail@plt+0x1374>
   15530:	mov	r0, r7
   15534:	add	r1, sp, #508	; 0x1fc
   15538:	mov	r2, #128	; 0x80
   1553c:	bl	13ba8 <memcpy@plt>
   15540:	mov	r1, r5
   15544:	mov	r2, #0
   15548:	mov	r0, r6
   1554c:	bl	142bc <pth_event_concat@plt>
   15550:	mov	r3, #0
   15554:	mov	r2, r3
   15558:	stm	sp, {r3, r6}
   1555c:	add	r0, sl, #1
   15560:	mov	r1, r7
   15564:	bl	13ed8 <pth_select_ev@plt>
   15568:	mov	r8, r0
   1556c:	mov	r0, r5
   15570:	bl	13c14 <pth_event_isolate@plt>
   15574:	cmn	r8, #1
   15578:	mov	r0, r6
   1557c:	beq	15704 <__assert_fail@plt+0x10ac>
   15580:	bl	14100 <pth_event_status@plt>
   15584:	cmp	r0, #1
   15588:	beq	156f8 <__assert_fail@plt+0x10a0>
   1558c:	mov	r0, r6
   15590:	bl	14100 <pth_event_status@plt>
   15594:	cmp	r0, #2
   15598:	beq	156f8 <__assert_fail@plt+0x10a0>
   1559c:	cmp	r5, #0
   155a0:	beq	155c4 <__assert_fail@plt+0xf6c>
   155a4:	mov	r0, r5
   155a8:	bl	14100 <pth_event_status@plt>
   155ac:	cmp	r0, #1
   155b0:	beq	15784 <__assert_fail@plt+0x112c>
   155b4:	mov	r0, r5
   155b8:	bl	14100 <pth_event_status@plt>
   155bc:	cmp	r0, #2
   155c0:	beq	15784 <__assert_fail@plt+0x112c>
   155c4:	mov	r0, #0
   155c8:	add	r1, sp, #380	; 0x17c
   155cc:	mov	r2, r0
   155d0:	bl	13c38 <pth_sigmask@plt>
   155d4:	ldr	r2, [fp, #44]	; 0x2c
   155d8:	cmp	r2, #0
   155dc:	str	r2, [sp, #28]
   155e0:	beq	15894 <__assert_fail@plt+0x123c>
   155e4:	ldr	r8, [fp, #44]	; 0x2c
   155e8:	cmp	r8, #0
   155ec:	bne	154e8 <__assert_fail@plt+0xe90>
   155f0:	ldr	lr, [sp, #20]
   155f4:	cmn	lr, #1
   155f8:	beq	154e8 <__assert_fail@plt+0xe90>
   155fc:	mov	r0, lr
   15600:	bl	13d58 <__fdelt_chk@plt>
   15604:	add	r1, sp, #832	; 0x340
   15608:	ldr	r2, [sp, #36]	; 0x24
   1560c:	add	r0, r1, r0, lsl #2
   15610:	ldr	r3, [r0, #-196]	; 0xffffff3c
   15614:	tst	r2, r3
   15618:	beq	154e8 <__assert_fail@plt+0xe90>
   1561c:	ldr	r0, [sp, #20]
   15620:	add	r1, sp, #268	; 0x10c
   15624:	add	r2, sp, #88	; 0x58
   15628:	mov	r3, #110	; 0x6e
   1562c:	str	r3, [sp, #88]	; 0x58
   15630:	bl	14010 <pth_accept@plt>
   15634:	cmn	r0, #1
   15638:	mov	r9, r0
   1563c:	beq	15c94 <__assert_fail@plt+0x163c>
   15640:	mov	r0, #1
   15644:	mov	r1, #132	; 0x84
   15648:	bl	14190 <gcry_calloc@plt>
   1564c:	cmp	r0, #0
   15650:	str	r0, [sp, #28]
   15654:	beq	15e1c <__assert_fail@plt+0x17c4>
   15658:	bl	39698 <__assert_fail@plt+0x25040>
   1565c:	ldr	lr, [sp, #28]
   15660:	cmp	r0, #0
   15664:	str	r0, [lr, #12]
   15668:	beq	15dec <__assert_fail@plt+0x1794>
   1566c:	ldr	r0, [sp, #28]
   15670:	bl	173d4 <__assert_fail@plt+0x2d7c>
   15674:	ldr	r0, [sp, #40]	; 0x28
   15678:	mov	r3, #50	; 0x32
   1567c:	mov	r1, #49	; 0x31
   15680:	mov	r2, #1
   15684:	stm	sp, {r0, r9}
   15688:	add	r0, sp, #776	; 0x308
   1568c:	bl	1464c <__snprintf_chk@plt>
   15690:	mov	r1, #1
   15694:	add	r2, sp, #776	; 0x308
   15698:	ldr	r0, [sp, #32]
   1569c:	strb	r8, [sp, #825]	; 0x339
   156a0:	bl	13b78 <pth_attr_set@plt>
   156a4:	ldr	r1, [sp, #28]
   156a8:	ldr	r0, [sp, #32]
   156ac:	ldr	r2, [sp, #28]
   156b0:	str	r9, [r1]
   156b4:	movw	r1, #31588	; 0x7b64
   156b8:	movt	r1, #1
   156bc:	bl	13bcc <pth_spawn@plt>
   156c0:	cmp	r0, #0
   156c4:	bne	154e8 <__assert_fail@plt+0xe90>
   156c8:	bl	14148 <__errno_location@plt>
   156cc:	ldr	r0, [r0]
   156d0:	bl	13fa4 <strerror@plt>
   156d4:	mov	r1, r0
   156d8:	movw	r0, #5272	; 0x1498
   156dc:	movt	r0, #4
   156e0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   156e4:	mov	r0, r9
   156e8:	bl	140b8 <assuan_sock_close@plt>
   156ec:	ldr	r0, [sp, #28]
   156f0:	bl	13c44 <gcry_free@plt>
   156f4:	b	154e8 <__assert_fail@plt+0xe90>
   156f8:	ldr	r0, [sp, #84]	; 0x54
   156fc:	bl	183bc <__assert_fail@plt+0x3d64>
   15700:	b	1559c <__assert_fail@plt+0xf44>
   15704:	bl	14100 <pth_event_status@plt>
   15708:	cmp	r0, #1
   1570c:	beq	1579c <__assert_fail@plt+0x1144>
   15710:	mov	r0, r6
   15714:	bl	14100 <pth_event_status@plt>
   15718:	cmp	r0, #2
   1571c:	beq	1579c <__assert_fail@plt+0x1144>
   15720:	cmp	r5, #0
   15724:	beq	15748 <__assert_fail@plt+0x10f0>
   15728:	mov	r0, r5
   1572c:	bl	14100 <pth_event_status@plt>
   15730:	cmp	r0, #1
   15734:	beq	1579c <__assert_fail@plt+0x1144>
   15738:	mov	r0, r5
   1573c:	bl	14100 <pth_event_status@plt>
   15740:	cmp	r0, #2
   15744:	beq	1579c <__assert_fail@plt+0x1144>
   15748:	mov	r2, #5
   1574c:	movw	r1, #5108	; 0x13f4
   15750:	mov	r0, #0
   15754:	movt	r1, #4
   15758:	bl	13cc8 <dcgettext@plt>
   1575c:	mov	r8, r0
   15760:	bl	14148 <__errno_location@plt>
   15764:	ldr	r0, [r0]
   15768:	bl	13fa4 <strerror@plt>
   1576c:	mov	r1, r0
   15770:	mov	r0, r8
   15774:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15778:	mov	r0, #1
   1577c:	bl	143f4 <pth_sleep@plt>
   15780:	b	154e8 <__assert_fail@plt+0xe90>
   15784:	mov	r0, r5
   15788:	mov	r1, #1
   1578c:	bl	13a10 <pth_event_free@plt>
   15790:	mov	r5, #0
   15794:	bl	18080 <__assert_fail@plt+0x3a28>
   15798:	b	155c4 <__assert_fail@plt+0xf6c>
   1579c:	mov	r0, r6
   157a0:	bl	14100 <pth_event_status@plt>
   157a4:	cmp	r0, #1
   157a8:	beq	15888 <__assert_fail@plt+0x1230>
   157ac:	mov	r0, r6
   157b0:	bl	14100 <pth_event_status@plt>
   157b4:	cmp	r0, #2
   157b8:	beq	15888 <__assert_fail@plt+0x1230>
   157bc:	cmp	r5, #0
   157c0:	beq	154e8 <__assert_fail@plt+0xe90>
   157c4:	mov	r0, r5
   157c8:	bl	14100 <pth_event_status@plt>
   157cc:	cmp	r0, #1
   157d0:	beq	157e4 <__assert_fail@plt+0x118c>
   157d4:	mov	r0, r5
   157d8:	bl	14100 <pth_event_status@plt>
   157dc:	cmp	r0, #2
   157e0:	bne	154e8 <__assert_fail@plt+0xe90>
   157e4:	mov	r0, r5
   157e8:	mov	r1, #1
   157ec:	bl	13a10 <pth_event_free@plt>
   157f0:	mov	r5, #0
   157f4:	bl	18080 <__assert_fail@plt+0x3a28>
   157f8:	b	154e8 <__assert_fail@plt+0xe90>
   157fc:	mov	r8, r0
   15800:	mov	r0, r6
   15804:	mov	r1, r8
   15808:	bl	13a10 <pth_event_free@plt>
   1580c:	cmp	r5, #0
   15810:	beq	15820 <__assert_fail@plt+0x11c8>
   15814:	mov	r0, r5
   15818:	mov	r1, r8
   1581c:	bl	13a10 <pth_event_free@plt>
   15820:	bl	1780c <__assert_fail@plt+0x31b4>
   15824:	mov	r2, #5
   15828:	movw	r1, #3044	; 0xbe4
   1582c:	mov	r0, #0
   15830:	movt	r1, #4
   15834:	bl	13cc8 <dcgettext@plt>
   15838:	mov	r5, r0
   1583c:	mov	r0, #11
   15840:	bl	3d0cc <__assert_fail@plt+0x28a74>
   15844:	mov	r4, r0
   15848:	mov	r0, #13
   1584c:	bl	3d0cc <__assert_fail@plt+0x28a74>
   15850:	mov	r1, r4
   15854:	mov	r2, r0
   15858:	mov	r0, r5
   1585c:	bl	3f478 <__assert_fail@plt+0x2ae20>
   15860:	ldr	r0, [sp, #24]
   15864:	bl	140b8 <assuan_sock_close@plt>
   15868:	ldr	r1, [sp, #68]	; 0x44
   1586c:	mov	r0, #0
   15870:	ldr	r2, [sp, #828]	; 0x33c
   15874:	ldr	r3, [r1]
   15878:	cmp	r2, r3
   1587c:	bne	1639c <__assert_fail@plt+0x1d44>
   15880:	add	sp, sp, #836	; 0x344
   15884:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15888:	ldr	r0, [sp, #84]	; 0x54
   1588c:	bl	183bc <__assert_fail@plt+0x3d64>
   15890:	b	157bc <__assert_fail@plt+0x1164>
   15894:	ldr	r0, [sp, #24]
   15898:	bl	13d58 <__fdelt_chk@plt>
   1589c:	add	lr, sp, #832	; 0x340
   158a0:	add	r0, lr, r0, lsl #2
   158a4:	ldr	r3, [r0, #-196]	; 0xffffff3c
   158a8:	ldr	r0, [sp, #48]	; 0x30
   158ac:	tst	r0, r3
   158b0:	beq	155e4 <__assert_fail@plt+0xf8c>
   158b4:	ldr	r0, [sp, #24]
   158b8:	add	r1, sp, #268	; 0x10c
   158bc:	add	r2, sp, #88	; 0x58
   158c0:	mov	r3, #110	; 0x6e
   158c4:	str	r3, [sp, #88]	; 0x58
   158c8:	bl	14010 <pth_accept@plt>
   158cc:	cmn	r0, #1
   158d0:	mov	r8, r0
   158d4:	beq	15aec <__assert_fail@plt+0x1494>
   158d8:	mov	r0, #1
   158dc:	mov	r1, #132	; 0x84
   158e0:	bl	14190 <gcry_calloc@plt>
   158e4:	subs	r9, r0, #0
   158e8:	beq	15e74 <__assert_fail@plt+0x181c>
   158ec:	bl	39698 <__assert_fail@plt+0x25040>
   158f0:	cmp	r0, #0
   158f4:	str	r0, [r9, #12]
   158f8:	beq	15e44 <__assert_fail@plt+0x17ec>
   158fc:	ldr	lr, [sp, #44]	; 0x2c
   15900:	mov	r1, #49	; 0x31
   15904:	mov	r2, #1
   15908:	mov	r3, #50	; 0x32
   1590c:	add	r0, sp, #776	; 0x308
   15910:	str	r8, [sp, #4]
   15914:	str	lr, [sp]
   15918:	bl	1464c <__snprintf_chk@plt>
   1591c:	ldr	r3, [sp, #28]
   15920:	mov	r1, #1
   15924:	add	r2, sp, #776	; 0x308
   15928:	ldr	r0, [sp, #32]
   1592c:	strb	r3, [sp, #825]	; 0x339
   15930:	bl	13b78 <pth_attr_set@plt>
   15934:	str	r8, [r9]
   15938:	movw	r1, #30896	; 0x78b0
   1593c:	ldr	r0, [sp, #32]
   15940:	movt	r1, #1
   15944:	mov	r2, r9
   15948:	bl	13bcc <pth_spawn@plt>
   1594c:	cmp	r0, #0
   15950:	bne	155e4 <__assert_fail@plt+0xf8c>
   15954:	bl	14148 <__errno_location@plt>
   15958:	ldr	r0, [r0]
   1595c:	bl	13fa4 <strerror@plt>
   15960:	mov	r1, r0
   15964:	movw	r0, #5184	; 0x1440
   15968:	movt	r0, #4
   1596c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15970:	mov	r0, r8
   15974:	bl	140b8 <assuan_sock_close@plt>
   15978:	mov	r0, r9
   1597c:	bl	13c44 <gcry_free@plt>
   15980:	b	155e4 <__assert_fail@plt+0xf8c>
   15984:	mov	r2, #5
   15988:	movw	r1, #3692	; 0xe6c
   1598c:	movt	r1, #4
   15990:	bl	13cc8 <dcgettext@plt>
   15994:	mov	r1, r4
   15998:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1599c:	b	14f9c <__assert_fail@plt+0x944>
   159a0:	ldr	r3, [sp, #176]	; 0xb0
   159a4:	and	r3, r3, #61440	; 0xf000
   159a8:	cmp	r3, #16384	; 0x4000
   159ac:	beq	15098 <__assert_fail@plt+0xa40>
   159b0:	mov	r2, #5
   159b4:	movw	r1, #3820	; 0xeec
   159b8:	movt	r1, #4
   159bc:	bl	13cc8 <dcgettext@plt>
   159c0:	mov	r1, r6
   159c4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   159c8:	b	150a0 <__assert_fail@plt+0xa48>
   159cc:	mov	r2, r5
   159d0:	add	r0, sp, #160	; 0xa0
   159d4:	mov	r1, #2
   159d8:	bl	14520 <pth_timeout@plt>
   159dc:	ldr	r3, [sp, #164]	; 0xa4
   159e0:	ldr	r2, [sp, #160]	; 0xa0
   159e4:	mov	r0, #16
   159e8:	cmp	r3, #10
   159ec:	addgt	r2, r2, #1
   159f0:	movgt	r3, r5
   159f4:	str	r3, [sp, #164]	; 0xa4
   159f8:	ldr	r3, [sp, #16]
   159fc:	str	r2, [sp, #160]	; 0xa0
   15a00:	ldm	r3, {r1, r2}
   15a04:	bl	13968 <pth_event@plt>
   15a08:	add	r1, sp, #508	; 0x1fc
   15a0c:	mov	r2, #128	; 0x80
   15a10:	mov	r5, r0
   15a14:	mov	r0, r7
   15a18:	bl	13ba8 <memcpy@plt>
   15a1c:	cmp	r5, #0
   15a20:	bne	15540 <__assert_fail@plt+0xee8>
   15a24:	str	r5, [sp]
   15a28:	add	r0, sl, #1
   15a2c:	str	r6, [sp, #4]
   15a30:	mov	r1, r7
   15a34:	mov	r2, r5
   15a38:	mov	r3, r5
   15a3c:	bl	13ed8 <pth_select_ev@plt>
   15a40:	mov	r8, r0
   15a44:	b	15574 <__assert_fail@plt+0xf1c>
   15a48:	mov	r0, #1
   15a4c:	mov	r1, #132	; 0x84
   15a50:	bl	14190 <gcry_calloc@plt>
   15a54:	subs	r4, r0, #0
   15a58:	beq	162e8 <__assert_fail@plt+0x1c90>
   15a5c:	bl	39698 <__assert_fail@plt+0x25040>
   15a60:	cmp	r0, #0
   15a64:	str	r0, [r4, #12]
   15a68:	beq	1634c <__assert_fail@plt+0x1cf4>
   15a6c:	mov	r0, r4
   15a70:	bl	173d4 <__assert_fail@plt+0x2d7c>
   15a74:	mvn	r1, #0
   15a78:	mov	r0, r4
   15a7c:	mov	r2, r1
   15a80:	bl	1b7f0 <__assert_fail@plt+0x7198>
   15a84:	mov	r0, r4
   15a88:	bl	174c0 <__assert_fail@plt+0x2e68>
   15a8c:	mov	r0, r4
   15a90:	bl	13c44 <gcry_free@plt>
   15a94:	b	15868 <__assert_fail@plt+0x1210>
   15a98:	bl	3f454 <__assert_fail@plt+0x2adfc>
   15a9c:	bl	13aa0 <assuan_set_assuan_log_stream@plt>
   15aa0:	b	15140 <__assert_fail@plt+0xae8>
   15aa4:	bl	14040 <getpid@plt>
   15aa8:	mov	r1, r0
   15aac:	movw	r0, #3856	; 0xf10
   15ab0:	movt	r0, #4
   15ab4:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   15ab8:	ldr	r0, [sp, #56]	; 0x38
   15abc:	bl	2c72c <__assert_fail@plt+0x180d4>
   15ac0:	movw	r0, #3900	; 0xf3c
   15ac4:	movt	r0, #4
   15ac8:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   15acc:	b	150c4 <__assert_fail@plt+0xa6c>
   15ad0:	mov	r2, r3
   15ad4:	movw	r1, #3676	; 0xe5c
   15ad8:	ldr	r0, [r9, #20]
   15adc:	movt	r1, #4
   15ae0:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   15ae4:	mov	r4, r0
   15ae8:	b	14bc4 <__assert_fail@plt+0x56c>
   15aec:	bl	14148 <__errno_location@plt>
   15af0:	ldr	r0, [r0]
   15af4:	bl	13fa4 <strerror@plt>
   15af8:	mov	r1, r0
   15afc:	movw	r0, #5144	; 0x1418
   15b00:	movt	r0, #4
   15b04:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15b08:	b	155e4 <__assert_fail@plt+0xf8c>
   15b0c:	movw	r1, #3792	; 0xed0
   15b10:	movt	r1, #4
   15b14:	mov	r0, r5
   15b18:	mov	r2, #5
   15b1c:	bl	13cc8 <dcgettext@plt>
   15b20:	mov	r4, r0
   15b24:	ldr	r0, [r7]
   15b28:	bl	13fa4 <strerror@plt>
   15b2c:	mov	r1, r6
   15b30:	mov	r2, r0
   15b34:	mov	r0, r4
   15b38:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15b3c:	b	150a0 <__assert_fail@plt+0xa48>
   15b40:	andeq	fp, r5, ip, ror r4
   15b44:	ldrdeq	r0, [r4], -r4
   15b48:	andeq	fp, r5, r4, lsr #18
   15b4c:	ldr	r0, [sp, #24]
   15b50:	bl	145ec <close@plt>
   15b54:	bl	342b0 <__assert_fail@plt+0x1fc58>
   15b58:	cmp	r0, #0
   15b5c:	beq	15d1c <__assert_fail@plt+0x16c4>
   15b60:	ldr	r3, [fp, #200]	; 0xc8
   15b64:	cmp	r3, #0
   15b68:	bne	15cb4 <__assert_fail@plt+0x165c>
   15b6c:	movw	r0, #4712	; 0x1268
   15b70:	movt	r0, #4
   15b74:	bl	3f478 <__assert_fail@plt+0x2ae20>
   15b78:	movw	r1, #4736	; 0x1280
   15b7c:	add	r0, sp, #84	; 0x54
   15b80:	movt	r1, #4
   15b84:	ldr	r2, [fp, #36]	; 0x24
   15b88:	mov	r3, r4
   15b8c:	movw	r5, #47324	; 0xb8dc
   15b90:	bl	3932c <__assert_fail@plt+0x24cd4>
   15b94:	movt	r5, #5
   15b98:	cmp	r0, #0
   15b9c:	blt	15ed4 <__assert_fail@plt+0x187c>
   15ba0:	ldr	r3, [r9, #128]	; 0x80
   15ba4:	cmp	r3, #0
   15ba8:	bne	15e9c <__assert_fail@plt+0x1844>
   15bac:	ldr	r1, [fp, #36]	; 0x24
   15bb0:	mov	r2, #0
   15bb4:	movw	r3, #47324	; 0xb8dc
   15bb8:	movt	r3, #5
   15bbc:	ldr	r0, [sp, #40]	; 0x28
   15bc0:	strb	r2, [r1]
   15bc4:	ldr	r1, [r9, #128]	; 0x80
   15bc8:	cmp	r1, r2
   15bcc:	ldrne	r3, [r3, #40]	; 0x28
   15bd0:	strbne	r2, [r3]
   15bd4:	cmp	r0, #0
   15bd8:	beq	15c1c <__assert_fail@plt+0x15c4>
   15bdc:	movw	r1, #20152	; 0x4eb8
   15be0:	movt	r1, #4
   15be4:	bl	14490 <fopen64@plt>
   15be8:	subs	r5, r0, #0
   15bec:	beq	16090 <__assert_fail@plt+0x1a38>
   15bf0:	mov	r1, r5
   15bf4:	ldr	r0, [sp, #84]	; 0x54
   15bf8:	bl	145b0 <fputs@plt>
   15bfc:	mov	r0, #10
   15c00:	mov	r1, r5
   15c04:	bl	13e0c <_IO_putc@plt>
   15c08:	ldr	r3, [r9, #128]	; 0x80
   15c0c:	cmp	r3, #0
   15c10:	bne	1605c <__assert_fail@plt+0x1a04>
   15c14:	mov	r0, r5
   15c18:	bl	142c8 <fclose@plt>
   15c1c:	ldr	r3, [sp, #76]	; 0x4c
   15c20:	cmp	r3, #0
   15c24:	beq	15f40 <__assert_fail@plt+0x18e8>
   15c28:	ldr	r0, [sp, #84]	; 0x54
   15c2c:	bl	14394 <putenv@plt>
   15c30:	cmp	r0, #0
   15c34:	bne	15f10 <__assert_fail@plt+0x18b8>
   15c38:	ldr	r3, [r9, #128]	; 0x80
   15c3c:	movw	r5, #48116	; 0xbbf4
   15c40:	movt	r5, #5
   15c44:	cmp	r3, #0
   15c48:	bne	15ee4 <__assert_fail@plt+0x188c>
   15c4c:	ldr	r1, [fp, #68]	; 0x44
   15c50:	mov	r0, #3
   15c54:	bl	320a8 <__assert_fail@plt+0x1da50>
   15c58:	ldr	r1, [sp, #72]	; 0x48
   15c5c:	ldr	r0, [r1]
   15c60:	bl	13bc0 <execvp@plt>
   15c64:	bl	14148 <__errno_location@plt>
   15c68:	ldr	r0, [r0]
   15c6c:	bl	13fa4 <strerror@plt>
   15c70:	mov	r1, r0
   15c74:	movw	r0, #4876	; 0x130c
   15c78:	movt	r0, #4
   15c7c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15c80:	mov	r0, r4
   15c84:	mov	r1, #15
   15c88:	bl	14028 <kill@plt>
   15c8c:	mov	r0, #1
   15c90:	bl	1404c <exit@plt>
   15c94:	bl	14148 <__errno_location@plt>
   15c98:	ldr	r0, [r0]
   15c9c:	bl	13fa4 <strerror@plt>
   15ca0:	mov	r1, r0
   15ca4:	movw	r0, #5224	; 0x1468
   15ca8:	movt	r0, #4
   15cac:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15cb0:	b	154e8 <__assert_fail@plt+0xe90>
   15cb4:	mov	r0, #2
   15cb8:	ldr	r1, [pc, #-376]	; 15b48 <__assert_fail@plt+0x14f0>
   15cbc:	mov	r2, #0
   15cc0:	bl	13b18 <sigprocmask@plt>
   15cc4:	cmp	r0, #0
   15cc8:	beq	15b78 <__assert_fail@plt+0x1520>
   15ccc:	bl	14148 <__errno_location@plt>
   15cd0:	ldr	r0, [r0]
   15cd4:	bl	13fa4 <strerror@plt>
   15cd8:	mov	r1, r0
   15cdc:	movw	r0, #4676	; 0x1244
   15ce0:	movt	r0, #4
   15ce4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15ce8:	b	15b78 <__assert_fail@plt+0x1520>
   15cec:	mov	r2, #5
   15cf0:	movw	r1, #1764	; 0x6e4
   15cf4:	movt	r1, #4
   15cf8:	bl	13cc8 <dcgettext@plt>
   15cfc:	mov	r1, r6
   15d00:	bl	3f478 <__assert_fail@plt+0x2ae20>
   15d04:	b	15098 <__assert_fail@plt+0xa40>
   15d08:	movw	r1, #1728	; 0x6c0
   15d0c:	mov	r0, #0
   15d10:	movt	r1, #4
   15d14:	mov	r2, #5
   15d18:	b	15b1c <__assert_fail@plt+0x14c4>
   15d1c:	movw	r0, #4640	; 0x1220
   15d20:	movt	r0, #4
   15d24:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15d28:	b	15b60 <__assert_fail@plt+0x1508>
   15d2c:	ldr	sl, [sp, #24]
   15d30:	mov	r3, #-2147483617	; 0x8000001f
   15d34:	b	154ac <__assert_fail@plt+0xe54>
   15d38:	mov	r0, r6
   15d3c:	add	r4, r4, #1
   15d40:	bl	14094 <strlen@plt>
   15d44:	mov	r5, r0
   15d48:	mov	r0, r4
   15d4c:	bl	14094 <strlen@plt>
   15d50:	cmp	r5, r0
   15d54:	bcc	150a0 <__assert_fail@plt+0xa48>
   15d58:	rsb	r0, r0, r5
   15d5c:	mov	r1, r4
   15d60:	add	r0, r6, r0
   15d64:	bl	13a28 <strcmp@plt>
   15d68:	cmp	r0, #0
   15d6c:	beq	15078 <__assert_fail@plt+0xa20>
   15d70:	b	150a0 <__assert_fail@plt+0xa48>
   15d74:	bl	14580 <gpg_err_code_from_syserror@plt>
   15d78:	cmp	r0, #0
   15d7c:	uxthne	r0, r0
   15d80:	orrne	r0, r0, #67108864	; 0x4000000
   15d84:	bne	14a18 <__assert_fail@plt+0x3c0>
   15d88:	b	149c8 <__assert_fail@plt+0x370>
   15d8c:	movw	r0, #2040	; 0x7f8
   15d90:	movt	r0, #4
   15d94:	bl	145a4 <unsetenv@plt>
   15d98:	b	15198 <__assert_fail@plt+0xb40>
   15d9c:	movw	r0, #2056	; 0x808
   15da0:	movt	r0, #4
   15da4:	bl	13f14 <getenv@plt>
   15da8:	cmp	r0, #0
   15dac:	beq	15168 <__assert_fail@plt+0xb10>
   15db0:	movw	r0, #2056	; 0x808
   15db4:	movt	r0, #4
   15db8:	bl	13f14 <getenv@plt>
   15dbc:	bl	141f0 <gcry_xstrdup@plt>
   15dc0:	str	r0, [r4, #16]
   15dc4:	b	15168 <__assert_fail@plt+0xb10>
   15dc8:	mov	r0, #1
   15dcc:	bl	14088 <ttyname@plt>
   15dd0:	cmp	r0, #0
   15dd4:	beq	15154 <__assert_fail@plt+0xafc>
   15dd8:	mov	r0, #1
   15ddc:	bl	14088 <ttyname@plt>
   15de0:	bl	141f0 <gcry_xstrdup@plt>
   15de4:	str	r0, [r4, #12]
   15de8:	b	15154 <__assert_fail@plt+0xafc>
   15dec:	bl	14148 <__errno_location@plt>
   15df0:	ldr	r0, [r0]
   15df4:	bl	13fa4 <strerror@plt>
   15df8:	mov	r1, r0
   15dfc:	movw	r0, #4512	; 0x11a0
   15e00:	movt	r0, #4
   15e04:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15e08:	ldr	r0, [sp, #28]
   15e0c:	bl	13c44 <gcry_free@plt>
   15e10:	mov	r0, r9
   15e14:	bl	140b8 <assuan_sock_close@plt>
   15e18:	b	154e8 <__assert_fail@plt+0xe90>
   15e1c:	bl	14148 <__errno_location@plt>
   15e20:	ldr	r0, [r0]
   15e24:	bl	13fa4 <strerror@plt>
   15e28:	mov	r1, r0
   15e2c:	movw	r0, #4464	; 0x1170
   15e30:	movt	r0, #4
   15e34:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15e38:	mov	r0, r9
   15e3c:	bl	140b8 <assuan_sock_close@plt>
   15e40:	b	154e8 <__assert_fail@plt+0xe90>
   15e44:	bl	14148 <__errno_location@plt>
   15e48:	ldr	r0, [r0]
   15e4c:	bl	13fa4 <strerror@plt>
   15e50:	mov	r1, r0
   15e54:	movw	r0, #4512	; 0x11a0
   15e58:	movt	r0, #4
   15e5c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15e60:	mov	r0, r9
   15e64:	bl	13c44 <gcry_free@plt>
   15e68:	mov	r0, r8
   15e6c:	bl	140b8 <assuan_sock_close@plt>
   15e70:	b	155e4 <__assert_fail@plt+0xf8c>
   15e74:	bl	14148 <__errno_location@plt>
   15e78:	ldr	r0, [r0]
   15e7c:	bl	13fa4 <strerror@plt>
   15e80:	mov	r1, r0
   15e84:	movw	r0, #4464	; 0x1170
   15e88:	movt	r0, #4
   15e8c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15e90:	mov	r0, r8
   15e94:	bl	140b8 <assuan_sock_close@plt>
   15e98:	b	155e4 <__assert_fail@plt+0xf8c>
   15e9c:	ldr	r2, [r5, #40]	; 0x28
   15ea0:	movw	r1, #4776	; 0x12a8
   15ea4:	add	r0, sp, #88	; 0x58
   15ea8:	movt	r1, #4
   15eac:	bl	3932c <__assert_fail@plt+0x24cd4>
   15eb0:	cmp	r0, #0
   15eb4:	blt	15ed4 <__assert_fail@plt+0x187c>
   15eb8:	add	r0, sp, #160	; 0xa0
   15ebc:	movw	r1, #4796	; 0x12bc
   15ec0:	mov	r2, r4
   15ec4:	movt	r1, #4
   15ec8:	bl	3932c <__assert_fail@plt+0x24cd4>
   15ecc:	cmp	r0, #0
   15ed0:	bge	15bac <__assert_fail@plt+0x1554>
   15ed4:	movw	r0, #4760	; 0x1298
   15ed8:	movt	r0, #4
   15edc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   15ee0:	b	15c80 <__assert_fail@plt+0x1628>
   15ee4:	ldr	r0, [sp, #88]	; 0x58
   15ee8:	bl	14394 <putenv@plt>
   15eec:	cmp	r0, #0
   15ef0:	bne	15f10 <__assert_fail@plt+0x18b8>
   15ef4:	ldr	r3, [r5, #128]	; 0x80
   15ef8:	cmp	r3, #0
   15efc:	beq	15c4c <__assert_fail@plt+0x15f4>
   15f00:	ldr	r0, [sp, #160]	; 0xa0
   15f04:	bl	14394 <putenv@plt>
   15f08:	cmp	r0, #0
   15f0c:	beq	15c4c <__assert_fail@plt+0x15f4>
   15f10:	bl	14148 <__errno_location@plt>
   15f14:	ldr	r0, [r0]
   15f18:	bl	13fa4 <strerror@plt>
   15f1c:	mov	r1, r0
   15f20:	movw	r0, #4844	; 0x12ec
   15f24:	movt	r0, #4
   15f28:	b	15c7c <__assert_fail@plt+0x1624>
   15f2c:	bl	13a64 <gpg_strerror@plt>
   15f30:	mov	r1, r0
   15f34:	movw	r0, #3512	; 0xdb8
   15f38:	movt	r0, #4
   15f3c:	bl	3f544 <__assert_fail@plt+0x2aeec>
   15f40:	ldr	r1, [sp, #32]
   15f44:	cmp	r1, #0
   15f48:	beq	15ff4 <__assert_fail@plt+0x199c>
   15f4c:	ldr	r0, [sp, #84]	; 0x54
   15f50:	mov	r1, #61	; 0x3d
   15f54:	bl	140ac <strchr@plt>
   15f58:	mov	r4, #32
   15f5c:	movw	r1, #4908	; 0x132c
   15f60:	movt	r1, #4
   15f64:	strb	r4, [r0]
   15f68:	mov	r0, #1
   15f6c:	ldr	r2, [sp, #84]	; 0x54
   15f70:	bl	14214 <__printf_chk@plt>
   15f74:	ldr	r3, [r9, #128]	; 0x80
   15f78:	cmp	r3, #0
   15f7c:	beq	15fc8 <__assert_fail@plt+0x1970>
   15f80:	ldr	r0, [sp, #88]	; 0x58
   15f84:	mov	r1, #61	; 0x3d
   15f88:	bl	140ac <strchr@plt>
   15f8c:	movw	r1, #4908	; 0x132c
   15f90:	movt	r1, #4
   15f94:	strb	r4, [r0]
   15f98:	mov	r0, #1
   15f9c:	ldr	r2, [sp, #88]	; 0x58
   15fa0:	bl	14214 <__printf_chk@plt>
   15fa4:	ldr	r0, [sp, #160]	; 0xa0
   15fa8:	mov	r1, #61	; 0x3d
   15fac:	bl	140ac <strchr@plt>
   15fb0:	movw	r1, #4908	; 0x132c
   15fb4:	movt	r1, #4
   15fb8:	strb	r4, [r0]
   15fbc:	mov	r0, #1
   15fc0:	ldr	r2, [sp, #160]	; 0xa0
   15fc4:	bl	14214 <__printf_chk@plt>
   15fc8:	ldr	r0, [sp, #84]	; 0x54
   15fcc:	bl	13c44 <gcry_free@plt>
   15fd0:	ldr	r3, [r9, #128]	; 0x80
   15fd4:	cmp	r3, #0
   15fd8:	beq	15fec <__assert_fail@plt+0x1994>
   15fdc:	ldr	r0, [sp, #88]	; 0x58
   15fe0:	bl	13c44 <gcry_free@plt>
   15fe4:	ldr	r0, [sp, #160]	; 0xa0
   15fe8:	bl	13c44 <gcry_free@plt>
   15fec:	mov	r0, #0
   15ff0:	bl	1404c <exit@plt>
   15ff4:	movw	r1, #4920	; 0x1338
   15ff8:	mov	r0, #1
   15ffc:	movt	r1, #4
   16000:	ldr	r2, [sp, #84]	; 0x54
   16004:	bl	14214 <__printf_chk@plt>
   16008:	ldr	r3, [r9, #128]	; 0x80
   1600c:	cmp	r3, #0
   16010:	beq	15fc8 <__assert_fail@plt+0x1970>
   16014:	ldr	r2, [sp, #88]	; 0x58
   16018:	movw	r1, #4948	; 0x1354
   1601c:	mov	r0, #1
   16020:	movt	r1, #4
   16024:	bl	14214 <__printf_chk@plt>
   16028:	movw	r1, #4976	; 0x1370
   1602c:	ldr	r2, [sp, #160]	; 0xa0
   16030:	movt	r1, #4
   16034:	mov	r0, #1
   16038:	bl	14214 <__printf_chk@plt>
   1603c:	b	15fc8 <__assert_fail@plt+0x1970>
   16040:	bl	14148 <__errno_location@plt>
   16044:	ldr	r0, [r0]
   16048:	bl	13fa4 <strerror@plt>
   1604c:	mov	r1, r0
   16050:	movw	r0, #4620	; 0x120c
   16054:	movt	r0, #4
   16058:	bl	3f544 <__assert_fail@plt+0x2aeec>
   1605c:	mov	r1, r5
   16060:	ldr	r0, [sp, #88]	; 0x58
   16064:	bl	145b0 <fputs@plt>
   16068:	mov	r1, r5
   1606c:	mov	r0, #10
   16070:	bl	13e0c <_IO_putc@plt>
   16074:	mov	r1, r5
   16078:	ldr	r0, [sp, #160]	; 0xa0
   1607c:	bl	145b0 <fputs@plt>
   16080:	mov	r1, r5
   16084:	mov	r0, #10
   16088:	bl	13e0c <_IO_putc@plt>
   1608c:	b	15c14 <__assert_fail@plt+0x15bc>
   16090:	mov	r2, #5
   16094:	movw	r1, #4816	; 0x12d0
   16098:	movt	r1, #4
   1609c:	bl	13cc8 <dcgettext@plt>
   160a0:	mov	r5, r0
   160a4:	bl	14148 <__errno_location@plt>
   160a8:	ldr	r0, [r0]
   160ac:	bl	13fa4 <strerror@plt>
   160b0:	ldr	r1, [sp, #40]	; 0x28
   160b4:	mov	r2, r0
   160b8:	mov	r0, r5
   160bc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   160c0:	b	15c1c <__assert_fail@plt+0x15c4>
   160c4:	movw	r0, #3776	; 0xec0
   160c8:	movt	r0, #4
   160cc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   160d0:	bl	1780c <__assert_fail@plt+0x31b4>
   160d4:	mov	r0, #1
   160d8:	bl	1404c <exit@plt>
   160dc:	mov	r2, #5
   160e0:	movw	r1, #3564	; 0xdec
   160e4:	movt	r1, #4
   160e8:	bl	13cc8 <dcgettext@plt>
   160ec:	mov	r4, r0
   160f0:	mov	r0, r5
   160f4:	bl	13d70 <gcry_check_version@plt>
   160f8:	movw	r1, #2472	; 0x9a8
   160fc:	movw	r2, #3556	; 0xde4
   16100:	movt	r1, #4
   16104:	movt	r2, #4
   16108:	mov	r3, r0
   1610c:	mov	r0, r4
   16110:	bl	3f544 <__assert_fail@plt+0x2aeec>
   16114:	mov	r2, #0
   16118:	ldr	r0, [r9, #20]
   1611c:	movw	r1, #3676	; 0xe5c
   16120:	movt	r1, #4
   16124:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   16128:	mov	r1, #0
   1612c:	mov	r4, #8
   16130:	mov	r5, #24
   16134:	mov	r7, r0
   16138:	bl	3bf94 <__assert_fail@plt+0x2793c>
   1613c:	mov	r2, #16
   16140:	movw	r1, #3912	; 0xf48
   16144:	movt	r1, #4
   16148:	mov	r3, r0
   1614c:	mov	r6, r0
   16150:	mov	r0, #1
   16154:	bl	14214 <__printf_chk@plt>
   16158:	mov	r0, r7
   1615c:	bl	13c44 <gcry_free@plt>
   16160:	mov	r0, r6
   16164:	bl	13c44 <gcry_free@plt>
   16168:	mov	r2, r4
   1616c:	mov	r3, r4
   16170:	str	r4, [sp, #4]
   16174:	str	r5, [sp]
   16178:	movw	r1, #3944	; 0xf68
   1617c:	mov	r0, #1
   16180:	movt	r1, #4
   16184:	bl	14214 <__printf_chk@plt>
   16188:	mov	r2, r5
   1618c:	mov	r3, #600	; 0x258
   16190:	movw	r1, #4008	; 0xfa8
   16194:	mov	r0, #1
   16198:	movt	r1, #4
   1619c:	bl	14214 <__printf_chk@plt>
   161a0:	mov	r2, r5
   161a4:	movw	r3, #1800	; 0x708
   161a8:	movw	r1, #4036	; 0xfc4
   161ac:	mov	r0, #1
   161b0:	movt	r1, #4
   161b4:	bl	14214 <__printf_chk@plt>
   161b8:	mov	r2, r5
   161bc:	movw	r3, #7200	; 0x1c20
   161c0:	movw	r1, #4068	; 0xfe4
   161c4:	mov	r0, #1
   161c8:	movt	r1, #4
   161cc:	bl	14214 <__printf_chk@plt>
   161d0:	movw	r3, #7200	; 0x1c20
   161d4:	mov	r2, r5
   161d8:	movw	r1, #4092	; 0xffc
   161dc:	mov	r0, #1
   161e0:	movt	r1, #4
   161e4:	bl	14214 <__printf_chk@plt>
   161e8:	mov	r2, r4
   161ec:	movw	r1, #4120	; 0x1018
   161f0:	mov	r0, #1
   161f4:	movt	r1, #4
   161f8:	bl	14214 <__printf_chk@plt>
   161fc:	mov	r2, r5
   16200:	mov	r3, r4
   16204:	movw	r1, #4160	; 0x1040
   16208:	mov	r0, #1
   1620c:	movt	r1, #4
   16210:	bl	14214 <__printf_chk@plt>
   16214:	mov	r0, #1
   16218:	mov	r3, r0
   1621c:	mov	r2, r5
   16220:	movw	r1, #4188	; 0x105c
   16224:	movt	r1, #4
   16228:	bl	14214 <__printf_chk@plt>
   1622c:	mov	r2, r5
   16230:	movw	r1, #4224	; 0x1080
   16234:	mov	r0, #1
   16238:	movt	r1, #4
   1623c:	bl	14214 <__printf_chk@plt>
   16240:	mov	r3, #0
   16244:	mov	r2, r5
   16248:	movw	r1, #4256	; 0x10a0
   1624c:	mov	r0, #1
   16250:	movt	r1, #4
   16254:	bl	14214 <__printf_chk@plt>
   16258:	mov	r2, r4
   1625c:	movw	r1, #4288	; 0x10c0
   16260:	mov	r0, #1
   16264:	movt	r1, #4
   16268:	bl	14214 <__printf_chk@plt>
   1626c:	mov	r2, r4
   16270:	movw	r1, #4320	; 0x10e0
   16274:	mov	r0, #1
   16278:	movt	r1, #4
   1627c:	bl	14214 <__printf_chk@plt>
   16280:	mov	r2, r4
   16284:	movw	r1, #4336	; 0x10f0
   16288:	mov	r0, #1
   1628c:	movt	r1, #4
   16290:	bl	14214 <__printf_chk@plt>
   16294:	mov	r2, r4
   16298:	movw	r1, #4368	; 0x1110
   1629c:	mov	r0, #1
   162a0:	movt	r1, #4
   162a4:	bl	14214 <__printf_chk@plt>
   162a8:	mov	r2, r4
   162ac:	movw	r1, #4396	; 0x112c
   162b0:	mov	r0, #1
   162b4:	movt	r1, #4
   162b8:	bl	14214 <__printf_chk@plt>
   162bc:	movw	r1, #4420	; 0x1144
   162c0:	mov	r0, #1
   162c4:	movt	r1, #4
   162c8:	mov	r2, #0
   162cc:	bl	14214 <__printf_chk@plt>
   162d0:	mov	r0, #0
   162d4:	bl	17c44 <__assert_fail@plt+0x35ec>
   162d8:	ldr	r0, [r9, #36]	; 0x24
   162dc:	rsbs	r0, r0, #1
   162e0:	movcc	r0, #0
   162e4:	bl	17c44 <__assert_fail@plt+0x35ec>
   162e8:	bl	14148 <__errno_location@plt>
   162ec:	ldr	r0, [r0]
   162f0:	bl	13fa4 <strerror@plt>
   162f4:	mov	r1, r0
   162f8:	movw	r0, #4464	; 0x1170
   162fc:	movt	r0, #4
   16300:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   16304:	mov	r0, #1
   16308:	bl	17c44 <__assert_fail@plt+0x35ec>
   1630c:	mov	r0, #2
   16310:	bl	1404c <exit@plt>
   16314:	mov	r2, #5
   16318:	movw	r1, #3188	; 0xc74
   1631c:	movt	r1, #4
   16320:	bl	13cc8 <dcgettext@plt>
   16324:	mov	r5, r0
   16328:	bl	14148 <__errno_location@plt>
   1632c:	ldr	r0, [r0]
   16330:	bl	13fa4 <strerror@plt>
   16334:	mov	r1, r4
   16338:	mov	r2, r0
   1633c:	mov	r0, r5
   16340:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   16344:	mov	r0, #2
   16348:	bl	1404c <exit@plt>
   1634c:	bl	14148 <__errno_location@plt>
   16350:	ldr	r0, [r0]
   16354:	bl	13fa4 <strerror@plt>
   16358:	mov	r1, r0
   1635c:	movw	r0, #4512	; 0x11a0
   16360:	movt	r0, #4
   16364:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   16368:	mov	r0, r4
   1636c:	bl	13c44 <gcry_free@plt>
   16370:	mov	r0, #1
   16374:	bl	17c44 <__assert_fail@plt+0x35ec>
   16378:	bl	14148 <__errno_location@plt>
   1637c:	ldr	r0, [r0]
   16380:	bl	13fa4 <strerror@plt>
   16384:	mov	r1, r0
   16388:	movw	r0, #5068	; 0x13cc
   1638c:	movt	r0, #4
   16390:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   16394:	mov	r0, #1
   16398:	bl	1404c <exit@plt>
   1639c:	bl	13cec <__stack_chk_fail@plt>
   163a0:	bl	14148 <__errno_location@plt>
   163a4:	ldr	r0, [r0]
   163a8:	bl	13fa4 <strerror@plt>
   163ac:	mov	r1, r0
   163b0:	movw	r0, #5044	; 0x13b4
   163b4:	movt	r0, #4
   163b8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   163bc:	bl	1780c <__assert_fail@plt+0x31b4>
   163c0:	mov	r0, #1
   163c4:	bl	1404c <exit@plt>
   163c8:	bl	14148 <__errno_location@plt>
   163cc:	ldr	r0, [r0]
   163d0:	bl	13fa4 <strerror@plt>
   163d4:	movw	r1, #5004	; 0x138c
   163d8:	movt	r1, #4
   163dc:	mov	r2, r0
   163e0:	movw	r0, #5016	; 0x1398
   163e4:	movt	r0, #4
   163e8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   163ec:	bl	1780c <__assert_fail@plt+0x31b4>
   163f0:	mov	r0, #1
   163f4:	bl	1404c <exit@plt>
   163f8:	ldr	r0, [sp, #20]
   163fc:	mov	r1, #1
   16400:	bl	3f314 <__assert_fail@plt+0x2acbc>
   16404:	ldr	r0, [sp, #20]
   16408:	mov	r1, r0
   1640c:	bl	17124 <__assert_fail@plt+0x2acc>
   16410:	ldr	r0, [sp, #20]
   16414:	bl	17c44 <__assert_fail@plt+0x35ec>
   16418:	mov	fp, #0
   1641c:	mov	lr, #0
   16420:	pop	{r1}		; (ldr r1, [sp], #4)
   16424:	mov	r2, sp
   16428:	push	{r2}		; (str r2, [sp, #-4]!)
   1642c:	push	{r0}		; (str r0, [sp, #-4]!)
   16430:	ldr	ip, [pc, #16]	; 16448 <__assert_fail@plt+0x1df0>
   16434:	push	{ip}		; (str ip, [sp, #-4]!)
   16438:	ldr	r0, [pc, #12]	; 1644c <__assert_fail@plt+0x1df4>
   1643c:	ldr	r3, [pc, #12]	; 16450 <__assert_fail@plt+0x1df8>
   16440:	bl	13f98 <__libc_start_main@plt>
   16444:	bl	145c8 <abort@plt>
   16448:	andeq	r0, r4, r8, asr r5
   1644c:	andeq	r4, r1, ip, asr #16
   16450:	strdeq	r0, [r4], -r4
   16454:	ldr	r3, [pc, #20]	; 16470 <__assert_fail@plt+0x1e18>
   16458:	ldr	r2, [pc, #20]	; 16474 <__assert_fail@plt+0x1e1c>
   1645c:	add	r3, pc, r3
   16460:	ldr	r2, [r3, r2]
   16464:	cmp	r2, #0
   16468:	bxeq	lr
   1646c:	b	1401c <__gmon_start__@plt>
   16470:	muleq	r4, ip, fp
   16474:	andeq	r0, r0, r8, ror #8
   16478:	push	{r3, lr}
   1647c:	movw	r0, #47296	; 0xb8c0
   16480:	ldr	r3, [pc, #36]	; 164ac <__assert_fail@plt+0x1e54>
   16484:	movt	r0, #5
   16488:	rsb	r3, r0, r3
   1648c:	cmp	r3, #6
   16490:	popls	{r3, pc}
   16494:	movw	r3, #0
   16498:	movt	r3, #0
   1649c:	cmp	r3, #0
   164a0:	popeq	{r3, pc}
   164a4:	blx	r3
   164a8:	pop	{r3, pc}
   164ac:	andeq	fp, r5, r3, asr #17
   164b0:	push	{r3, lr}
   164b4:	movw	r0, #47296	; 0xb8c0
   164b8:	movw	r3, #47296	; 0xb8c0
   164bc:	movt	r0, #5
   164c0:	movt	r3, #5
   164c4:	rsb	r3, r0, r3
   164c8:	asr	r3, r3, #2
   164cc:	add	r3, r3, r3, lsr #31
   164d0:	asrs	r1, r3, #1
   164d4:	popeq	{r3, pc}
   164d8:	movw	r2, #0
   164dc:	movt	r2, #0
   164e0:	cmp	r2, #0
   164e4:	popeq	{r3, pc}
   164e8:	blx	r2
   164ec:	pop	{r3, pc}
   164f0:	push	{r4, lr}
   164f4:	movw	r4, #47320	; 0xb8d8
   164f8:	movt	r4, #5
   164fc:	ldrb	r3, [r4]
   16500:	cmp	r3, #0
   16504:	popne	{r4, pc}
   16508:	bl	16478 <__assert_fail@plt+0x1e20>
   1650c:	mov	r3, #1
   16510:	strb	r3, [r4]
   16514:	pop	{r4, pc}
   16518:	movw	r0, #44756	; 0xaed4
   1651c:	movt	r0, #5
   16520:	push	{r3, lr}
   16524:	ldr	r3, [r0]
   16528:	cmp	r3, #0
   1652c:	beq	16544 <__assert_fail@plt+0x1eec>
   16530:	movw	r3, #0
   16534:	movt	r3, #0
   16538:	cmp	r3, #0
   1653c:	beq	16544 <__assert_fail@plt+0x1eec>
   16540:	blx	r3
   16544:	pop	{r3, lr}
   16548:	b	164b0 <__assert_fail@plt+0x1e58>
   1654c:	cmp	r2, #0
   16550:	ldr	r2, [sp]
   16554:	beq	16560 <__assert_fail@plt+0x1f08>
   16558:	mov	r0, #0
   1655c:	bx	lr
   16560:	mov	r0, r1
   16564:	mov	r1, r3
   16568:	b	13a94 <pth_waitpid@plt>
   1656c:	b	13a94 <pth_waitpid@plt>
   16570:	b	13b9c <pth_select@plt>
   16574:	push	{r4, r5, r6, r7, r8, r9, lr}
   16578:	movw	r8, #47296	; 0xb8c0
   1657c:	movt	r8, #5
   16580:	sub	sp, sp, #148	; 0x94
   16584:	mov	r5, r1
   16588:	mov	r1, #0
   1658c:	ldr	ip, [r8]
   16590:	mov	r0, r5
   16594:	mov	r6, r2
   16598:	mov	r7, r3
   1659c:	str	ip, [sp, #140]	; 0x8c
   165a0:	bl	144e4 <pth_fdmode@plt>
   165a4:	cmn	r0, #1
   165a8:	mov	r4, r0
   165ac:	beq	16690 <__assert_fail@plt+0x2038>
   165b0:	cmp	r0, #1
   165b4:	bne	165cc <__assert_fail@plt+0x1f74>
   165b8:	b	16604 <__assert_fail@plt+0x1fac>
   165bc:	bl	14148 <__errno_location@plt>
   165c0:	ldr	ip, [r0]
   165c4:	cmp	ip, #4
   165c8:	bne	165e8 <__assert_fail@plt+0x1f90>
   165cc:	mov	r0, r5
   165d0:	mov	r1, r6
   165d4:	mov	r2, r7
   165d8:	bl	13c50 <sendmsg@plt>
   165dc:	cmn	r0, #1
   165e0:	mov	r4, r0
   165e4:	beq	165bc <__assert_fail@plt+0x1f64>
   165e8:	ldr	r2, [sp, #140]	; 0x8c
   165ec:	mov	r0, r4
   165f0:	ldr	r3, [r8]
   165f4:	cmp	r2, r3
   165f8:	bne	166a0 <__assert_fail@plt+0x2048>
   165fc:	add	sp, sp, #148	; 0x94
   16600:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16604:	add	ip, sp, #8
   16608:	add	r2, sp, #136	; 0x88
   1660c:	mov	r3, #0
   16610:	str	r3, [ip, #4]!
   16614:	cmp	ip, r2
   16618:	bne	16610 <__assert_fail@plt+0x1fb8>
   1661c:	mov	r0, r5
   16620:	add	r9, r5, #1
   16624:	bl	13d58 <__fdelt_chk@plt>
   16628:	asr	r3, r5, #31
   1662c:	mov	r2, #1
   16630:	mov	r4, #0
   16634:	lsr	r3, r3, #27
   16638:	add	r1, r5, r3
   1663c:	and	r1, r1, #31
   16640:	rsb	r3, r3, r1
   16644:	add	r1, sp, #144	; 0x90
   16648:	add	r0, r1, r0, lsl #2
   1664c:	ldr	r1, [r0, #-132]	; 0xffffff7c
   16650:	orr	r3, r1, r2, lsl r3
   16654:	str	r3, [r0, #-132]	; 0xffffff7c
   16658:	mov	r1, #0
   1665c:	str	r4, [sp]
   16660:	mov	r3, r1
   16664:	mov	r0, r9
   16668:	add	r2, sp, #12
   1666c:	bl	13b9c <pth_select@plt>
   16670:	cmp	r0, #0
   16674:	bge	165cc <__assert_fail@plt+0x1f74>
   16678:	bl	14148 <__errno_location@plt>
   1667c:	ldr	r3, [r0]
   16680:	cmp	r3, #4
   16684:	beq	16658 <__assert_fail@plt+0x2000>
   16688:	mvn	r4, #0
   1668c:	b	165e8 <__assert_fail@plt+0x1f90>
   16690:	bl	14148 <__errno_location@plt>
   16694:	mov	r3, #9
   16698:	str	r3, [r0]
   1669c:	b	165e8 <__assert_fail@plt+0x1f90>
   166a0:	bl	13cec <__stack_chk_fail@plt>
   166a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   166a8:	movw	r8, #47296	; 0xb8c0
   166ac:	movt	r8, #5
   166b0:	sub	sp, sp, #148	; 0x94
   166b4:	mov	r5, r1
   166b8:	mov	r1, #0
   166bc:	ldr	ip, [r8]
   166c0:	mov	r0, r5
   166c4:	mov	r6, r2
   166c8:	mov	r7, r3
   166cc:	str	ip, [sp, #140]	; 0x8c
   166d0:	bl	144e4 <pth_fdmode@plt>
   166d4:	cmn	r0, #1
   166d8:	mov	r4, r0
   166dc:	beq	167c0 <__assert_fail@plt+0x2168>
   166e0:	cmp	r0, #1
   166e4:	bne	166fc <__assert_fail@plt+0x20a4>
   166e8:	b	16734 <__assert_fail@plt+0x20dc>
   166ec:	bl	14148 <__errno_location@plt>
   166f0:	ldr	ip, [r0]
   166f4:	cmp	ip, #4
   166f8:	bne	16718 <__assert_fail@plt+0x20c0>
   166fc:	mov	r0, r5
   16700:	mov	r1, r6
   16704:	mov	r2, r7
   16708:	bl	14484 <recvmsg@plt>
   1670c:	cmn	r0, #1
   16710:	mov	r4, r0
   16714:	beq	166ec <__assert_fail@plt+0x2094>
   16718:	ldr	r2, [sp, #140]	; 0x8c
   1671c:	mov	r0, r4
   16720:	ldr	r3, [r8]
   16724:	cmp	r2, r3
   16728:	bne	167d0 <__assert_fail@plt+0x2178>
   1672c:	add	sp, sp, #148	; 0x94
   16730:	pop	{r4, r5, r6, r7, r8, r9, pc}
   16734:	add	ip, sp, #8
   16738:	add	r2, sp, #136	; 0x88
   1673c:	mov	r3, #0
   16740:	str	r3, [ip, #4]!
   16744:	cmp	ip, r2
   16748:	bne	16740 <__assert_fail@plt+0x20e8>
   1674c:	mov	r0, r5
   16750:	add	r9, r5, #1
   16754:	bl	13d58 <__fdelt_chk@plt>
   16758:	asr	r3, r5, #31
   1675c:	mov	r2, #1
   16760:	mov	r4, #0
   16764:	lsr	r3, r3, #27
   16768:	add	r1, r5, r3
   1676c:	and	r1, r1, #31
   16770:	rsb	r3, r3, r1
   16774:	add	r1, sp, #144	; 0x90
   16778:	add	r0, r1, r0, lsl #2
   1677c:	ldr	r1, [r0, #-132]	; 0xffffff7c
   16780:	orr	r3, r1, r2, lsl r3
   16784:	str	r3, [r0, #-132]	; 0xffffff7c
   16788:	mov	r2, #0
   1678c:	str	r4, [sp]
   16790:	mov	r3, r2
   16794:	mov	r0, r9
   16798:	add	r1, sp, #12
   1679c:	bl	13b9c <pth_select@plt>
   167a0:	cmp	r0, #0
   167a4:	bge	166fc <__assert_fail@plt+0x20a4>
   167a8:	bl	14148 <__errno_location@plt>
   167ac:	ldr	r3, [r0]
   167b0:	cmp	r3, #4
   167b4:	beq	16788 <__assert_fail@plt+0x2130>
   167b8:	mvn	r4, #0
   167bc:	b	16718 <__assert_fail@plt+0x20c0>
   167c0:	bl	14148 <__errno_location@plt>
   167c4:	mov	r3, #9
   167c8:	str	r3, [r0]
   167cc:	b	16718 <__assert_fail@plt+0x20c0>
   167d0:	bl	13cec <__stack_chk_fail@plt>
   167d4:	mov	r0, r1
   167d8:	mov	r1, r2
   167dc:	mov	r2, r3
   167e0:	b	1449c <pth_write@plt>
   167e4:	b	1449c <pth_write@plt>
   167e8:	mov	r0, r1
   167ec:	mov	r1, r2
   167f0:	mov	r2, r3
   167f4:	b	13d64 <pth_read@plt>
   167f8:	b	13d64 <pth_read@plt>
   167fc:	mov	r0, r1
   16800:	b	144b4 <pth_usleep@plt>
   16804:	b	143ac <pth_connect@plt>
   16808:	b	14010 <pth_accept@plt>
   1680c:	push	{r3, lr}
   16810:	ldr	r0, [r0]
   16814:	bl	13b30 <free@plt>
   16818:	mov	r0, #0
   1681c:	pop	{r3, pc}
   16820:	push	{r4, r5, r6, lr}
   16824:	mov	r6, r0
   16828:	mov	r0, #20
   1682c:	bl	13f68 <malloc@plt>
   16830:	subs	r5, r0, #0
   16834:	beq	16870 <__assert_fail@plt+0x2218>
   16838:	bl	13980 <pth_mutex_init@plt>
   1683c:	cmp	r0, #0
   16840:	bne	16860 <__assert_fail@plt+0x2208>
   16844:	bl	14148 <__errno_location@plt>
   16848:	ldr	r4, [r0]
   1684c:	cmp	r4, #0
   16850:	beq	16860 <__assert_fail@plt+0x2208>
   16854:	mov	r0, r5
   16858:	bl	13b30 <free@plt>
   1685c:	b	16868 <__assert_fail@plt+0x2210>
   16860:	mov	r4, #0
   16864:	str	r5, [r6]
   16868:	mov	r0, r4
   1686c:	pop	{r4, r5, r6, pc}
   16870:	mov	r4, #12
   16874:	mov	r0, r4
   16878:	pop	{r4, r5, r6, pc}
   1687c:	push	{r4, r5, r6, lr}
   16880:	subs	r4, r0, #0
   16884:	beq	169c4 <__assert_fail@plt+0x236c>
   16888:	ldr	r3, [r4, #16]
   1688c:	movw	r2, #529	; 0x211
   16890:	cmp	r3, r2
   16894:	beq	16cbc <__assert_fail@plt+0x2664>
   16898:	bgt	168f8 <__assert_fail@plt+0x22a0>
   1689c:	movw	r2, #513	; 0x201
   168a0:	cmp	r3, r2
   168a4:	beq	16cd4 <__assert_fail@plt+0x267c>
   168a8:	ble	1694c <__assert_fail@plt+0x22f4>
   168ac:	movw	r2, #519	; 0x207
   168b0:	cmp	r3, r2
   168b4:	beq	16b0c <__assert_fail@plt+0x24b4>
   168b8:	cmp	r3, #520	; 0x208
   168bc:	blt	16a94 <__assert_fail@plt+0x243c>
   168c0:	movw	r2, #527	; 0x20f
   168c4:	cmp	r3, r2
   168c8:	beq	16ca4 <__assert_fail@plt+0x264c>
   168cc:	cmp	r3, #528	; 0x210
   168d0:	bge	16b24 <__assert_fail@plt+0x24cc>
   168d4:	movw	r2, #526	; 0x20e
   168d8:	cmp	r3, r2
   168dc:	bne	16c4c <__assert_fail@plt+0x25f4>
   168e0:	ldr	r2, [r4, #24]
   168e4:	movw	r3, #48116	; 0xbbf4
   168e8:	movt	r3, #5
   168ec:	mov	r1, #1
   168f0:	str	r2, [r3, #48]	; 0x30
   168f4:	b	16a34 <__assert_fail@plt+0x23dc>
   168f8:	movw	r2, #535	; 0x217
   168fc:	cmp	r3, r2
   16900:	beq	16cec <__assert_fail@plt+0x2694>
   16904:	cmp	r3, #536	; 0x218
   16908:	blt	16988 <__assert_fail@plt+0x2330>
   1690c:	movw	r2, #541	; 0x21d
   16910:	cmp	r3, r2
   16914:	beq	16af4 <__assert_fail@plt+0x249c>
   16918:	ble	16a6c <__assert_fail@plt+0x2414>
   1691c:	movw	r2, #543	; 0x21f
   16920:	cmp	r3, r2
   16924:	beq	16c8c <__assert_fail@plt+0x2634>
   16928:	blt	16b3c <__assert_fail@plt+0x24e4>
   1692c:	cmp	r3, #548	; 0x224
   16930:	bne	16c4c <__assert_fail@plt+0x25f4>
   16934:	movw	r3, #48116	; 0xbbf4
   16938:	movt	r3, #5
   1693c:	mov	r2, #1
   16940:	mov	r1, r2
   16944:	str	r2, [r3, #52]	; 0x34
   16948:	b	16a34 <__assert_fail@plt+0x23dc>
   1694c:	movw	r2, #505	; 0x1f9
   16950:	cmp	r3, r2
   16954:	beq	16c6c <__assert_fail@plt+0x2614>
   16958:	bgt	16ac4 <__assert_fail@plt+0x246c>
   1695c:	cmp	r3, #113	; 0x71
   16960:	beq	16c1c <__assert_fail@plt+0x25c4>
   16964:	cmp	r3, #118	; 0x76
   16968:	bne	16c4c <__assert_fail@plt+0x25f4>
   1696c:	movw	r3, #48116	; 0xbbf4
   16970:	movt	r3, #5
   16974:	mov	r1, #1
   16978:	ldr	r2, [r3, #4]
   1697c:	add	r2, r2, r1
   16980:	str	r2, [r3, #4]
   16984:	b	16a34 <__assert_fail@plt+0x23dc>
   16988:	cmp	r3, #532	; 0x214
   1698c:	beq	16c54 <__assert_fail@plt+0x25fc>
   16990:	bgt	16a3c <__assert_fail@plt+0x23e4>
   16994:	movw	r2, #530	; 0x212
   16998:	cmp	r3, r2
   1699c:	beq	16c34 <__assert_fail@plt+0x25dc>
   169a0:	add	r2, r2, #1
   169a4:	cmp	r3, r2
   169a8:	bne	16c4c <__assert_fail@plt+0x25f4>
   169ac:	movw	r3, #48116	; 0xbbf4
   169b0:	movt	r3, #5
   169b4:	mov	r2, #1
   169b8:	mov	r1, r2
   169bc:	str	r2, [r3, #80]	; 0x50
   169c0:	b	16a34 <__assert_fail@plt+0x23dc>
   169c4:	mov	r2, #1
   169c8:	movw	r3, #48116	; 0xbbf4
   169cc:	movt	r3, #5
   169d0:	mov	r1, r2
   169d4:	movw	r0, #7200	; 0x1c20
   169d8:	mov	r6, #600	; 0x258
   169dc:	movw	r5, #1800	; 0x708
   169e0:	mov	ip, #8
   169e4:	str	r4, [r3, #8]
   169e8:	str	r4, [r3, #4]
   169ec:	str	r4, [r3]
   169f0:	str	r4, [r3, #56]	; 0x38
   169f4:	str	r4, [r3, #44]	; 0x2c
   169f8:	str	r4, [r3, #60]	; 0x3c
   169fc:	str	r4, [r3, #48]	; 0x30
   16a00:	str	r4, [r3, #80]	; 0x50
   16a04:	str	r4, [r3, #92]	; 0x5c
   16a08:	str	r4, [r3, #96]	; 0x60
   16a0c:	str	r4, [r3, #100]	; 0x64
   16a10:	str	r4, [r3, #108]	; 0x6c
   16a14:	str	r4, [r3, #52]	; 0x34
   16a18:	str	r6, [r3, #64]	; 0x40
   16a1c:	str	r5, [r3, #68]	; 0x44
   16a20:	str	ip, [r3, #84]	; 0x54
   16a24:	str	r0, [r3, #72]	; 0x48
   16a28:	str	r0, [r3, #76]	; 0x4c
   16a2c:	str	r2, [r3, #88]	; 0x58
   16a30:	str	r2, [r3, #112]	; 0x70
   16a34:	mov	r0, r1
   16a38:	pop	{r4, r5, r6, pc}
   16a3c:	movw	r2, #533	; 0x215
   16a40:	cmp	r3, r2
   16a44:	beq	16b6c <__assert_fail@plt+0x2514>
   16a48:	add	r2, r2, #1
   16a4c:	cmp	r3, r2
   16a50:	bne	16c4c <__assert_fail@plt+0x25f4>
   16a54:	ldr	r2, [r4, #24]
   16a58:	movw	r3, #48116	; 0xbbf4
   16a5c:	movt	r3, #5
   16a60:	mov	r1, #1
   16a64:	str	r2, [r3, #92]	; 0x5c
   16a68:	b	16a34 <__assert_fail@plt+0x23dc>
   16a6c:	cmp	r3, #536	; 0x218
   16a70:	beq	16b54 <__assert_fail@plt+0x24fc>
   16a74:	cmp	r3, #540	; 0x21c
   16a78:	bne	16c4c <__assert_fail@plt+0x25f4>
   16a7c:	movw	r3, #48116	; 0xbbf4
   16a80:	movt	r3, #5
   16a84:	mov	r2, #1
   16a88:	mov	r1, r2
   16a8c:	str	r2, [r3, #108]	; 0x6c
   16a90:	b	16a34 <__assert_fail@plt+0x23dc>
   16a94:	movw	r2, #514	; 0x202
   16a98:	cmp	r3, r2
   16a9c:	beq	16b9c <__assert_fail@plt+0x2544>
   16aa0:	add	r2, r2, #4
   16aa4:	cmp	r3, r2
   16aa8:	bne	16c4c <__assert_fail@plt+0x25f4>
   16aac:	ldr	r2, [r4, #24]
   16ab0:	movw	r3, #48116	; 0xbbf4
   16ab4:	movt	r3, #5
   16ab8:	mov	r1, #1
   16abc:	str	r2, [r3, #44]	; 0x2c
   16ac0:	b	16a34 <__assert_fail@plt+0x23dc>
   16ac4:	movw	r2, #506	; 0x1fa
   16ac8:	cmp	r3, r2
   16acc:	beq	16b84 <__assert_fail@plt+0x252c>
   16ad0:	add	r2, r2, #1
   16ad4:	cmp	r3, r2
   16ad8:	bne	16c4c <__assert_fail@plt+0x25f4>
   16adc:	ldr	r2, [r4, #24]
   16ae0:	movw	r3, #47324	; 0xb8dc
   16ae4:	movt	r3, #5
   16ae8:	mov	r1, #1
   16aec:	str	r2, [r3]
   16af0:	b	16a34 <__assert_fail@plt+0x23dc>
   16af4:	movw	r3, #48116	; 0xbbf4
   16af8:	movt	r3, #5
   16afc:	mov	r2, #1
   16b00:	mov	r1, r2
   16b04:	str	r2, [r3, #112]	; 0x70
   16b08:	b	16a34 <__assert_fail@plt+0x23dc>
   16b0c:	ldr	r2, [r4, #24]
   16b10:	movw	r3, #48116	; 0xbbf4
   16b14:	movt	r3, #5
   16b18:	mov	r1, #1
   16b1c:	str	r2, [r3, #60]	; 0x3c
   16b20:	b	16a34 <__assert_fail@plt+0x23dc>
   16b24:	ldr	r2, [r4, #24]
   16b28:	movw	r3, #48116	; 0xbbf4
   16b2c:	movt	r3, #5
   16b30:	mov	r1, #1
   16b34:	str	r2, [r3, #68]	; 0x44
   16b38:	b	16a34 <__assert_fail@plt+0x23dc>
   16b3c:	movw	r3, #48116	; 0xbbf4
   16b40:	movt	r3, #5
   16b44:	mov	r2, #0
   16b48:	mov	r1, #1
   16b4c:	str	r2, [r3, #112]	; 0x70
   16b50:	b	16a34 <__assert_fail@plt+0x23dc>
   16b54:	movw	r3, #48116	; 0xbbf4
   16b58:	movt	r3, #5
   16b5c:	mov	r2, #1
   16b60:	mov	r1, r2
   16b64:	str	r2, [r3, #100]	; 0x64
   16b68:	b	16a34 <__assert_fail@plt+0x23dc>
   16b6c:	ldr	r2, [r4, #24]
   16b70:	movw	r3, #48116	; 0xbbf4
   16b74:	movt	r3, #5
   16b78:	mov	r1, #1
   16b7c:	str	r2, [r3, #88]	; 0x58
   16b80:	b	16a34 <__assert_fail@plt+0x23dc>
   16b84:	movw	r3, #48116	; 0xbbf4
   16b88:	movt	r3, #5
   16b8c:	mvn	r2, #0
   16b90:	mov	r1, #1
   16b94:	str	r2, [r3]
   16b98:	b	16a34 <__assert_fail@plt+0x23dc>
   16b9c:	cmp	r1, #0
   16ba0:	beq	16a34 <__assert_fail@plt+0x23dc>
   16ba4:	movw	r5, #47324	; 0xb8dc
   16ba8:	movt	r5, #5
   16bac:	ldr	r0, [r5, #4]
   16bb0:	cmp	r0, #0
   16bb4:	ldreq	r0, [r4, #24]
   16bb8:	beq	16be0 <__assert_fail@plt+0x2588>
   16bbc:	ldr	r6, [r4, #24]
   16bc0:	cmp	r6, #0
   16bc4:	beq	16bdc <__assert_fail@plt+0x2584>
   16bc8:	mov	r1, r6
   16bcc:	bl	13a28 <strcmp@plt>
   16bd0:	cmp	r0, #0
   16bd4:	moveq	r1, #1
   16bd8:	beq	16a34 <__assert_fail@plt+0x23dc>
   16bdc:	mov	r0, r6
   16be0:	bl	3f2e0 <__assert_fail@plt+0x2ac88>
   16be4:	movw	r3, #48116	; 0xbbf4
   16be8:	movt	r3, #5
   16bec:	ldr	r3, [r3]
   16bf0:	tst	r3, #1024	; 0x400
   16bf4:	beq	16c00 <__assert_fail@plt+0x25a8>
   16bf8:	bl	3f454 <__assert_fail@plt+0x2adfc>
   16bfc:	bl	13aa0 <assuan_set_assuan_log_stream@plt>
   16c00:	ldr	r0, [r5, #4]
   16c04:	bl	13c44 <gcry_free@plt>
   16c08:	ldr	r0, [r4, #24]
   16c0c:	bl	13f2c <gcry_strdup@plt>
   16c10:	mov	r1, #1
   16c14:	str	r0, [r5, #4]
   16c18:	b	16a34 <__assert_fail@plt+0x23dc>
   16c1c:	movw	r3, #48116	; 0xbbf4
   16c20:	movt	r3, #5
   16c24:	mov	r2, #1
   16c28:	mov	r1, r2
   16c2c:	str	r2, [r3, #8]
   16c30:	b	16a34 <__assert_fail@plt+0x23dc>
   16c34:	ldr	r2, [r4, #24]
   16c38:	movw	r3, #48116	; 0xbbf4
   16c3c:	movt	r3, #5
   16c40:	mov	r1, #1
   16c44:	str	r2, [r3, #76]	; 0x4c
   16c48:	b	16a34 <__assert_fail@plt+0x23dc>
   16c4c:	mov	r1, #0
   16c50:	b	16a34 <__assert_fail@plt+0x23dc>
   16c54:	ldr	r2, [r4, #24]
   16c58:	movw	r3, #48116	; 0xbbf4
   16c5c:	movt	r3, #5
   16c60:	mov	r1, #1
   16c64:	str	r2, [r3, #84]	; 0x54
   16c68:	b	16a34 <__assert_fail@plt+0x23dc>
   16c6c:	movw	r3, #48116	; 0xbbf4
   16c70:	movt	r3, #5
   16c74:	ldr	r0, [r4, #24]
   16c78:	mov	r1, #1
   16c7c:	ldr	r2, [r3]
   16c80:	orr	r2, r0, r2
   16c84:	str	r2, [r3]
   16c88:	b	16a34 <__assert_fail@plt+0x23dc>
   16c8c:	movw	r3, #48116	; 0xbbf4
   16c90:	movt	r3, #5
   16c94:	mov	r2, #1
   16c98:	mov	r1, r2
   16c9c:	str	r2, [r3, #116]	; 0x74
   16ca0:	b	16a34 <__assert_fail@plt+0x23dc>
   16ca4:	ldr	r2, [r4, #24]
   16ca8:	movw	r3, #48116	; 0xbbf4
   16cac:	movt	r3, #5
   16cb0:	mov	r1, #1
   16cb4:	str	r2, [r3, #64]	; 0x40
   16cb8:	b	16a34 <__assert_fail@plt+0x23dc>
   16cbc:	ldr	r2, [r4, #24]
   16cc0:	movw	r3, #48116	; 0xbbf4
   16cc4:	movt	r3, #5
   16cc8:	mov	r1, #1
   16ccc:	str	r2, [r3, #72]	; 0x48
   16cd0:	b	16a34 <__assert_fail@plt+0x23dc>
   16cd4:	movw	r3, #48116	; 0xbbf4
   16cd8:	movt	r3, #5
   16cdc:	mov	r2, #1
   16ce0:	mov	r1, r2
   16ce4:	str	r2, [r3, #56]	; 0x38
   16ce8:	b	16a34 <__assert_fail@plt+0x23dc>
   16cec:	ldr	r2, [r4, #24]
   16cf0:	movw	r3, #48116	; 0xbbf4
   16cf4:	movt	r3, #5
   16cf8:	mov	r1, #1
   16cfc:	str	r2, [r3, #96]	; 0x60
   16d00:	b	16a34 <__assert_fail@plt+0x23dc>
   16d04:	movw	r3, #47324	; 0xb8dc
   16d08:	movt	r3, #5
   16d0c:	push	{r4, r5, r6, r7, lr}
   16d10:	sub	sp, sp, #28
   16d14:	ldr	r5, [r3]
   16d18:	cmp	r5, #0
   16d1c:	beq	16f94 <__assert_fail@plt+0x293c>
   16d20:	ldrb	r3, [r5]
   16d24:	sub	r3, r3, #48	; 0x30
   16d28:	cmp	r3, #9
   16d2c:	bls	16df4 <__assert_fail@plt+0x279c>
   16d30:	mov	r4, #0
   16d34:	mov	r6, r4
   16d38:	movw	r1, #1592	; 0x638
   16d3c:	mov	r0, r5
   16d40:	movt	r1, #4
   16d44:	bl	13a28 <strcmp@plt>
   16d48:	cmp	r0, #0
   16d4c:	beq	16e10 <__assert_fail@plt+0x27b8>
   16d50:	cmp	r6, #0
   16d54:	movgt	r3, #0
   16d58:	andle	r3, r4, #1
   16d5c:	cmp	r3, #0
   16d60:	bne	16e10 <__assert_fail@plt+0x27b8>
   16d64:	movw	r1, #1600	; 0x640
   16d68:	mov	r0, r5
   16d6c:	movt	r1, #4
   16d70:	bl	13a28 <strcmp@plt>
   16d74:	cmp	r0, #0
   16d78:	bne	16ef0 <__assert_fail@plt+0x2898>
   16d7c:	movw	r4, #48116	; 0xbbf4
   16d80:	movt	r4, #5
   16d84:	mov	r1, #0
   16d88:	mov	r3, #1024	; 0x400
   16d8c:	str	r3, [r4]
   16d90:	ldr	r2, [r4, #4]
   16d94:	movw	r3, #48116	; 0xbbf4
   16d98:	movt	r3, #5
   16d9c:	cmp	r2, #0
   16da0:	moveq	r2, #1
   16da4:	streq	r2, [r3, #4]
   16da8:	ldr	r2, [r4, #8]
   16dac:	movw	r3, #48116	; 0xbbf4
   16db0:	movt	r3, #5
   16db4:	cmp	r2, #0
   16db8:	movne	r2, #0
   16dbc:	strne	r2, [r3, #8]
   16dc0:	cmp	r1, #0
   16dc4:	beq	16dd4 <__assert_fail@plt+0x277c>
   16dc8:	mov	r0, #20
   16dcc:	mov	r1, #2
   16dd0:	bl	144c0 <gcry_control@plt>
   16dd4:	ldr	r3, [r4]
   16dd8:	and	r3, r3, #4
   16ddc:	cmp	r3, #0
   16de0:	beq	16e20 <__assert_fail@plt+0x27c8>
   16de4:	mov	r1, #1
   16de8:	mov	r0, #20
   16dec:	bl	144c0 <gcry_control@plt>
   16df0:	b	16e20 <__assert_fail@plt+0x27c8>
   16df4:	mov	r0, r5
   16df8:	mov	r1, #0
   16dfc:	mov	r2, #10
   16e00:	mov	r4, #1
   16e04:	bl	13a4c <strtol@plt>
   16e08:	mov	r6, r0
   16e0c:	b	16d38 <__assert_fail@plt+0x26e0>
   16e10:	movw	r4, #48116	; 0xbbf4
   16e14:	movt	r4, #5
   16e18:	mov	r3, #0
   16e1c:	str	r3, [r4]
   16e20:	mov	r0, #19
   16e24:	ldr	r1, [r4, #4]
   16e28:	bl	144c0 <gcry_control@plt>
   16e2c:	ldr	r0, [r4]
   16e30:	cmp	r0, #0
   16e34:	beq	16ee8 <__assert_fail@plt+0x2890>
   16e38:	tst	r0, #1
   16e3c:	movw	ip, #18888	; 0x49c8
   16e40:	movw	r1, #1516	; 0x5ec
   16e44:	movt	ip, #4
   16e48:	movt	r1, #4
   16e4c:	movw	r2, #1528	; 0x5f8
   16e50:	movt	r2, #4
   16e54:	movw	r3, #1536	; 0x600
   16e58:	moveq	r1, ip
   16e5c:	tst	r0, #2
   16e60:	movt	r3, #4
   16e64:	movw	r4, #1544	; 0x608
   16e68:	moveq	r2, ip
   16e6c:	tst	r0, #4
   16e70:	movt	r4, #4
   16e74:	movw	lr, #1552	; 0x610
   16e78:	moveq	r3, ip
   16e7c:	tst	r0, #32
   16e80:	movt	lr, #4
   16e84:	movw	r5, #1560	; 0x618
   16e88:	moveq	r6, ip
   16e8c:	movne	r6, r4
   16e90:	tst	r0, #64	; 0x40
   16e94:	movt	r5, #4
   16e98:	movw	r4, #1572	; 0x624
   16e9c:	moveq	r7, ip
   16ea0:	movne	r7, lr
   16ea4:	tst	r0, #128	; 0x80
   16ea8:	movt	r4, #4
   16eac:	movw	lr, #1584	; 0x630
   16eb0:	moveq	r5, ip
   16eb4:	tst	r0, #512	; 0x200
   16eb8:	movt	lr, #4
   16ebc:	str	r6, [sp]
   16ec0:	moveq	r4, ip
   16ec4:	tst	r0, #1024	; 0x400
   16ec8:	str	r7, [sp, #4]
   16ecc:	movw	r0, #1668	; 0x684
   16ed0:	movne	ip, lr
   16ed4:	str	r5, [sp, #8]
   16ed8:	movt	r0, #4
   16edc:	str	r4, [sp, #12]
   16ee0:	str	ip, [sp, #16]
   16ee4:	bl	3f478 <__assert_fail@plt+0x2ae20>
   16ee8:	add	sp, sp, #28
   16eec:	pop	{r4, r5, r6, r7, pc}
   16ef0:	cmp	r6, #2
   16ef4:	movgt	r3, #0
   16ef8:	andle	r3, r4, #1
   16efc:	cmp	r3, #0
   16f00:	bne	16d7c <__assert_fail@plt+0x2724>
   16f04:	movw	r1, #1608	; 0x648
   16f08:	mov	r0, r5
   16f0c:	movt	r1, #4
   16f10:	bl	13a28 <strcmp@plt>
   16f14:	cmp	r0, #0
   16f18:	beq	16fb0 <__assert_fail@plt+0x2958>
   16f1c:	cmp	r6, #5
   16f20:	movgt	r3, #0
   16f24:	andle	r3, r4, #1
   16f28:	cmp	r3, #0
   16f2c:	bne	16fb0 <__assert_fail@plt+0x2958>
   16f30:	movw	r1, #1620	; 0x654
   16f34:	mov	r0, r5
   16f38:	movt	r1, #4
   16f3c:	bl	13a28 <strcmp@plt>
   16f40:	cmp	r0, #0
   16f44:	beq	16fc8 <__assert_fail@plt+0x2970>
   16f48:	cmp	r6, #8
   16f4c:	movgt	r6, #0
   16f50:	andle	r6, r4, #1
   16f54:	cmp	r6, #0
   16f58:	bne	16fc8 <__assert_fail@plt+0x2970>
   16f5c:	movw	r1, #1628	; 0x65c
   16f60:	mov	r0, r5
   16f64:	movt	r1, #4
   16f68:	bl	13a28 <strcmp@plt>
   16f6c:	cmp	r0, #0
   16f70:	beq	16fe0 <__assert_fail@plt+0x2988>
   16f74:	cmp	r4, #0
   16f78:	beq	17000 <__assert_fail@plt+0x29a8>
   16f7c:	movw	r4, #48116	; 0xbbf4
   16f80:	movt	r4, #5
   16f84:	mvn	r3, #512	; 0x200
   16f88:	mov	r1, #2
   16f8c:	str	r3, [r4]
   16f90:	b	16d90 <__assert_fail@plt+0x2738>
   16f94:	movw	r4, #48116	; 0xbbf4
   16f98:	movt	r4, #5
   16f9c:	ldr	r1, [r4]
   16fa0:	cmp	r1, #0
   16fa4:	beq	16e20 <__assert_fail@plt+0x27c8>
   16fa8:	and	r1, r1, #2
   16fac:	b	16d90 <__assert_fail@plt+0x2738>
   16fb0:	movw	r4, #48116	; 0xbbf4
   16fb4:	movt	r4, #5
   16fb8:	movw	r3, #1025	; 0x401
   16fbc:	mov	r1, #0
   16fc0:	str	r3, [r4]
   16fc4:	b	16d90 <__assert_fail@plt+0x2738>
   16fc8:	movw	r4, #48116	; 0xbbf4
   16fcc:	movt	r4, #5
   16fd0:	movw	r3, #1089	; 0x441
   16fd4:	mov	r1, #0
   16fd8:	str	r3, [r4]
   16fdc:	b	16d90 <__assert_fail@plt+0x2738>
   16fe0:	cmp	r4, #0
   16fe4:	movw	r4, #48116	; 0xbbf4
   16fe8:	movt	r4, #5
   16fec:	mvn	r3, #0
   16ff0:	moveq	r1, #2
   16ff4:	str	r3, [r4]
   16ff8:	beq	16d90 <__assert_fail@plt+0x2738>
   16ffc:	b	16f84 <__assert_fail@plt+0x292c>
   17000:	mov	r2, #5
   17004:	movw	r1, #1636	; 0x664
   17008:	mov	r0, #0
   1700c:	movt	r1, #4
   17010:	movw	r4, #48116	; 0xbbf4
   17014:	movt	r4, #5
   17018:	bl	13cc8 <dcgettext@plt>
   1701c:	mov	r1, r5
   17020:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   17024:	mov	r3, #0
   17028:	str	r3, [r4]
   1702c:	b	16e20 <__assert_fail@plt+0x27c8>
   17030:	push	{r4, r5, r6, r7, lr}
   17034:	movw	r4, #47296	; 0xb8c0
   17038:	movt	r4, #5
   1703c:	sub	sp, sp, #116	; 0x74
   17040:	mov	r2, #0
   17044:	movw	r1, #1708	; 0x6ac
   17048:	ldr	r3, [r4]
   1704c:	movt	r1, #4
   17050:	str	r3, [sp, #108]	; 0x6c
   17054:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   17058:	mov	r2, sp
   1705c:	mov	r5, r0
   17060:	mov	r0, #3
   17064:	mov	r1, r5
   17068:	bl	1458c <__xstat64@plt>
   1706c:	cmp	r0, #0
   17070:	beq	17088 <__assert_fail@plt+0x2a30>
   17074:	bl	14148 <__errno_location@plt>
   17078:	ldr	r3, [r0]
   1707c:	mov	r6, r0
   17080:	cmp	r3, #2
   17084:	beq	170a8 <__assert_fail@plt+0x2a50>
   17088:	mov	r0, r5
   1708c:	bl	13c44 <gcry_free@plt>
   17090:	ldr	r2, [sp, #108]	; 0x6c
   17094:	ldr	r3, [r4]
   17098:	cmp	r2, r3
   1709c:	bne	17120 <__assert_fail@plt+0x2ac8>
   170a0:	add	sp, sp, #116	; 0x74
   170a4:	pop	{r4, r5, r6, r7, pc}
   170a8:	mov	r0, r5
   170ac:	mov	r1, #448	; 0x1c0
   170b0:	bl	1419c <mkdir@plt>
   170b4:	cmp	r0, #0
   170b8:	bne	170ec <__assert_fail@plt+0x2a94>
   170bc:	movw	r3, #48116	; 0xbbf4
   170c0:	movt	r3, #5
   170c4:	ldr	r3, [r3, #8]
   170c8:	cmp	r3, #0
   170cc:	bne	17088 <__assert_fail@plt+0x2a30>
   170d0:	mov	r2, #5
   170d4:	movw	r1, #1764	; 0x6e4
   170d8:	movt	r1, #4
   170dc:	bl	13cc8 <dcgettext@plt>
   170e0:	mov	r1, r5
   170e4:	bl	3f478 <__assert_fail@plt+0x2ae20>
   170e8:	b	17088 <__assert_fail@plt+0x2a30>
   170ec:	mov	r2, #5
   170f0:	movw	r1, #1728	; 0x6c0
   170f4:	mov	r0, #0
   170f8:	movt	r1, #4
   170fc:	bl	13cc8 <dcgettext@plt>
   17100:	mov	r7, r0
   17104:	ldr	r0, [r6]
   17108:	bl	13fa4 <strerror@plt>
   1710c:	mov	r1, r5
   17110:	mov	r2, r0
   17114:	mov	r0, r7
   17118:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1711c:	b	17088 <__assert_fail@plt+0x2a30>
   17120:	bl	13cec <__stack_chk_fail@plt>
   17124:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17128:	movw	r4, #47296	; 0xb8c0
   1712c:	movt	r4, #5
   17130:	sub	sp, sp, #8
   17134:	subs	r6, r1, #0
   17138:	mov	r2, #0
   1713c:	ldr	r3, [r4]
   17140:	mov	r5, r0
   17144:	str	r2, [sp]
   17148:	str	r3, [sp, #4]
   1714c:	bne	171a8 <__assert_fail@plt+0x2b50>
   17150:	movw	r0, #1788	; 0x6fc
   17154:	movt	r0, #4
   17158:	bl	13f14 <getenv@plt>
   1715c:	subs	r3, r0, #0
   17160:	beq	17170 <__assert_fail@plt+0x2b18>
   17164:	ldrb	r3, [r3]
   17168:	cmp	r3, #0
   1716c:	bne	172a4 <__assert_fail@plt+0x2c4c>
   17170:	mov	r0, r5
   17174:	mov	r1, #1
   17178:	bl	17124 <__assert_fail@plt+0x2acc>
   1717c:	cmp	r0, #0
   17180:	beq	1724c <__assert_fail@plt+0x2bf4>
   17184:	cmp	r5, #0
   17188:	beq	17288 <__assert_fail@plt+0x2c30>
   1718c:	mvn	r0, #0
   17190:	ldr	r2, [sp, #4]
   17194:	ldr	r3, [r4]
   17198:	cmp	r2, r3
   1719c:	bne	173d0 <__assert_fail@plt+0x2d78>
   171a0:	add	sp, sp, #8
   171a4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   171a8:	movw	r3, #48116	; 0xbbf4
   171ac:	movt	r3, #5
   171b0:	movw	r1, #4576	; 0x11e0
   171b4:	movt	r1, #4
   171b8:	ldr	r0, [r3, #20]
   171bc:	mvn	r9, #0
   171c0:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   171c4:	mov	r7, r0
   171c8:	mov	r0, sp
   171cc:	bl	14070 <assuan_new@plt>
   171d0:	subs	r8, r0, #0
   171d4:	beq	17208 <__assert_fail@plt+0x2bb0>
   171d8:	mov	r0, r7
   171dc:	bl	13c44 <gcry_free@plt>
   171e0:	cmp	r6, #0
   171e4:	beq	17254 <__assert_fail@plt+0x2bfc>
   171e8:	orrs	r6, r6, r5
   171ec:	beq	1726c <__assert_fail@plt+0x2c14>
   171f0:	ldr	r0, [sp]
   171f4:	cmp	r0, #0
   171f8:	beq	1718c <__assert_fail@plt+0x2b34>
   171fc:	bl	14388 <assuan_release@plt>
   17200:	mvn	r0, #0
   17204:	b	17190 <__assert_fail@plt+0x2b38>
   17208:	mov	r3, r8
   1720c:	mov	r2, r9
   17210:	mov	r1, r7
   17214:	ldr	r0, [sp]
   17218:	bl	14640 <assuan_socket_connect@plt>
   1721c:	mov	r8, r0
   17220:	mov	r0, r7
   17224:	bl	13c44 <gcry_free@plt>
   17228:	cmp	r8, #0
   1722c:	bne	171e0 <__assert_fail@plt+0x2b88>
   17230:	movw	r3, #48116	; 0xbbf4
   17234:	movt	r3, #5
   17238:	ldr	r3, [r3, #8]
   1723c:	orrs	r3, r5, r3
   17240:	beq	1733c <__assert_fail@plt+0x2ce4>
   17244:	ldr	r0, [sp]
   17248:	bl	14388 <assuan_release@plt>
   1724c:	mov	r0, #0
   17250:	b	17190 <__assert_fail@plt+0x2b38>
   17254:	mov	r0, r5
   17258:	mov	r1, #1
   1725c:	bl	17124 <__assert_fail@plt+0x2acc>
   17260:	cmp	r0, #0
   17264:	bne	171e8 <__assert_fail@plt+0x2b90>
   17268:	b	1724c <__assert_fail@plt+0x2bf4>
   1726c:	mov	r0, r8
   17270:	bl	13a64 <gpg_strerror@plt>
   17274:	mov	r1, r0
   17278:	movw	r0, #1940	; 0x794
   1727c:	movt	r0, #4
   17280:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   17284:	b	171f0 <__assert_fail@plt+0x2b98>
   17288:	mov	r2, #5
   1728c:	mov	r0, r5
   17290:	movw	r1, #1804	; 0x70c
   17294:	movt	r1, #4
   17298:	bl	13cc8 <dcgettext@plt>
   1729c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   172a0:	b	1718c <__assert_fail@plt+0x2b34>
   172a4:	bl	141f0 <gcry_xstrdup@plt>
   172a8:	mov	r1, #58	; 0x3a
   172ac:	mov	r7, r0
   172b0:	bl	140ac <strchr@plt>
   172b4:	subs	sl, r0, #0
   172b8:	beq	1736c <__assert_fail@plt+0x2d14>
   172bc:	cmp	r7, sl
   172c0:	beq	1736c <__assert_fail@plt+0x2d14>
   172c4:	add	r8, sl, #1
   172c8:	strb	r6, [sl]
   172cc:	mov	r1, r6
   172d0:	mov	r2, #10
   172d4:	mov	r0, r8
   172d8:	bl	13a4c <strtol@plt>
   172dc:	ldrb	r3, [sl, #1]
   172e0:	cmp	r3, #58	; 0x3a
   172e4:	cmpne	r3, #0
   172e8:	mov	r9, r0
   172ec:	beq	17308 <__assert_fail@plt+0x2cb0>
   172f0:	add	ip, sl, #2
   172f4:	mov	r8, ip
   172f8:	ldrb	r3, [ip], #1
   172fc:	cmp	r3, #58	; 0x3a
   17300:	cmpne	r3, #0
   17304:	bne	172f4 <__assert_fail@plt+0x2c9c>
   17308:	cmp	r3, #0
   1730c:	moveq	r8, r3
   17310:	bne	173b0 <__assert_fail@plt+0x2d58>
   17314:	mov	r0, r7
   17318:	bl	13c44 <gcry_free@plt>
   1731c:	cmp	r5, #0
   17320:	beq	1734c <__assert_fail@plt+0x2cf4>
   17324:	mov	r0, r5
   17328:	mov	r1, #1
   1732c:	bl	17124 <__assert_fail@plt+0x2acc>
   17330:	subs	r0, r0, #0
   17334:	mvnne	r0, #0
   17338:	b	17190 <__assert_fail@plt+0x2b38>
   1733c:	movw	r0, #1972	; 0x7b4
   17340:	movt	r0, #4
   17344:	bl	3f478 <__assert_fail@plt+0x2ae20>
   17348:	b	17244 <__assert_fail@plt+0x2bec>
   1734c:	mov	r0, r5
   17350:	mov	r2, #5
   17354:	movw	r1, #1892	; 0x764
   17358:	movt	r1, #4
   1735c:	bl	13cc8 <dcgettext@plt>
   17360:	mov	r1, r8
   17364:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   17368:	b	17324 <__assert_fail@plt+0x2ccc>
   1736c:	mov	r0, r7
   17370:	bl	13c44 <gcry_free@plt>
   17374:	mov	r0, r5
   17378:	mov	r1, #1
   1737c:	bl	17124 <__assert_fail@plt+0x2acc>
   17380:	cmp	r0, #0
   17384:	beq	1724c <__assert_fail@plt+0x2bf4>
   17388:	cmp	r5, #0
   1738c:	bne	1718c <__assert_fail@plt+0x2b34>
   17390:	mov	r2, #5
   17394:	mov	r0, r5
   17398:	movw	r1, #1844	; 0x734
   1739c:	movt	r1, #4
   173a0:	bl	13cc8 <dcgettext@plt>
   173a4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   173a8:	mvn	r0, #0
   173ac:	b	17190 <__assert_fail@plt+0x2b38>
   173b0:	add	r0, r8, #1
   173b4:	mov	r1, #0
   173b8:	mov	r2, #10
   173bc:	bl	13a4c <strtol@plt>
   173c0:	cmp	r0, #1
   173c4:	mov	r8, r0
   173c8:	beq	171c8 <__assert_fail@plt+0x2b70>
   173cc:	b	17314 <__assert_fail@plt+0x2cbc>
   173d0:	bl	13cec <__stack_chk_fail@plt>
   173d4:	push	{r3, r4, r5, lr}
   173d8:	mov	r4, r0
   173dc:	ldr	r0, [r0, #12]
   173e0:	cmp	r0, #0
   173e4:	beq	174a0 <__assert_fail@plt+0x2e48>
   173e8:	movw	r5, #47324	; 0xb8dc
   173ec:	movt	r5, #5
   173f0:	movw	r1, #2040	; 0x7f8
   173f4:	movt	r1, #4
   173f8:	ldr	r2, [r5, #8]
   173fc:	bl	39804 <__assert_fail@plt+0x251ac>
   17400:	ldr	r2, [r5, #12]
   17404:	movw	r1, #2048	; 0x800
   17408:	ldr	r0, [r4, #12]
   1740c:	movt	r1, #4
   17410:	bl	39804 <__assert_fail@plt+0x251ac>
   17414:	ldr	r2, [r5, #16]
   17418:	movw	r1, #2056	; 0x808
   1741c:	ldr	r0, [r4, #12]
   17420:	movt	r1, #4
   17424:	bl	39804 <__assert_fail@plt+0x251ac>
   17428:	ldr	r2, [r5, #20]
   1742c:	movw	r1, #2064	; 0x810
   17430:	ldr	r0, [r4, #12]
   17434:	movt	r1, #4
   17438:	bl	39804 <__assert_fail@plt+0x251ac>
   1743c:	movw	r1, #2076	; 0x81c
   17440:	ldr	r0, [r4, #12]
   17444:	movt	r1, #4
   17448:	mov	r2, #0
   1744c:	bl	39804 <__assert_fail@plt+0x251ac>
   17450:	ldr	r0, [r4, #16]
   17454:	cmp	r0, #0
   17458:	beq	17460 <__assert_fail@plt+0x2e08>
   1745c:	bl	13c44 <gcry_free@plt>
   17460:	ldr	r0, [r5, #24]
   17464:	cmp	r0, #0
   17468:	beq	17470 <__assert_fail@plt+0x2e18>
   1746c:	bl	13f2c <gcry_strdup@plt>
   17470:	ldr	r3, [r4, #20]
   17474:	str	r0, [r4, #16]
   17478:	cmp	r3, #0
   1747c:	beq	17488 <__assert_fail@plt+0x2e30>
   17480:	mov	r0, r3
   17484:	bl	13c44 <gcry_free@plt>
   17488:	ldr	r0, [r5, #28]
   1748c:	cmp	r0, #0
   17490:	beq	17498 <__assert_fail@plt+0x2e40>
   17494:	bl	13f2c <gcry_strdup@plt>
   17498:	str	r0, [r4, #20]
   1749c:	pop	{r3, r4, r5, pc}
   174a0:	movw	r0, #2008	; 0x7d8
   174a4:	movw	r1, #2028	; 0x7ec
   174a8:	movw	r3, #1432	; 0x598
   174ac:	movt	r0, #4
   174b0:	movt	r1, #4
   174b4:	movw	r2, #1339	; 0x53b
   174b8:	movt	r3, #4
   174bc:	bl	14658 <__assert_fail@plt>
   174c0:	push	{r4, lr}
   174c4:	mov	r4, r0
   174c8:	ldr	r0, [r0, #12]
   174cc:	bl	396f8 <__assert_fail@plt+0x250a0>
   174d0:	ldr	r0, [r4, #16]
   174d4:	cmp	r0, #0
   174d8:	beq	174e0 <__assert_fail@plt+0x2e88>
   174dc:	bl	13c44 <gcry_free@plt>
   174e0:	ldr	r0, [r4, #20]
   174e4:	cmp	r0, #0
   174e8:	popeq	{r4, pc}
   174ec:	pop	{r4, lr}
   174f0:	b	13c44 <gcry_free@plt>
   174f4:	push	{r3, lr}
   174f8:	bl	2edf0 <__assert_fail@plt+0x1a798>
   174fc:	mov	r0, #0
   17500:	pop	{r3, pc}
   17504:	push	{r4, r5, r6, r7, r8, r9, lr}
   17508:	movw	r5, #47296	; 0xb8c0
   1750c:	movt	r5, #5
   17510:	sub	sp, sp, #44	; 0x2c
   17514:	movw	r4, #47324	; 0xb8dc
   17518:	movt	r4, #5
   1751c:	add	r3, sp, #40	; 0x28
   17520:	ldr	r2, [r5]
   17524:	ldr	r1, [r4, #32]
   17528:	mov	r7, r0
   1752c:	mov	r0, #0
   17530:	str	r0, [r3, #-24]!	; 0xffffffe8
   17534:	mov	r0, r3
   17538:	str	r2, [sp, #36]	; 0x24
   1753c:	add	r3, r1, #1
   17540:	str	r3, [r4, #32]
   17544:	bl	14070 <assuan_new@plt>
   17548:	subs	r6, r0, #0
   1754c:	beq	175e0 <__assert_fail@plt+0x2f88>
   17550:	bl	13a64 <gpg_strerror@plt>
   17554:	mov	r1, r0
   17558:	movw	r0, #2096	; 0x830
   1755c:	movt	r0, #4
   17560:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   17564:	mov	r0, r7
   17568:	bl	13c44 <gcry_free@plt>
   1756c:	ldr	r0, [sp, #16]
   17570:	cmp	r0, #0
   17574:	beq	1757c <__assert_fail@plt+0x2f24>
   17578:	bl	14388 <assuan_release@plt>
   1757c:	cmp	r6, #0
   17580:	beq	175b8 <__assert_fail@plt+0x2f60>
   17584:	ldr	r3, [r4, #36]	; 0x24
   17588:	movw	r0, #2316	; 0x90c
   1758c:	movt	r0, #4
   17590:	cmp	r3, #0
   17594:	movne	r2, #0
   17598:	strbne	r2, [r3]
   1759c:	ldr	r3, [r4, #40]	; 0x28
   175a0:	cmp	r3, #0
   175a4:	movne	r2, #0
   175a8:	strbne	r2, [r3]
   175ac:	mov	r3, #2
   175b0:	str	r3, [r4, #44]	; 0x2c
   175b4:	bl	3f478 <__assert_fail@plt+0x2ae20>
   175b8:	ldr	r1, [sp, #36]	; 0x24
   175bc:	mov	r0, #0
   175c0:	ldr	r2, [r5]
   175c4:	ldr	r3, [r4, #32]
   175c8:	cmp	r1, r2
   175cc:	sub	r3, r3, #1
   175d0:	str	r3, [r4, #32]
   175d4:	bne	17710 <__assert_fail@plt+0x30b8>
   175d8:	add	sp, sp, #44	; 0x2c
   175dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   175e0:	mov	r3, r6
   175e4:	ldr	r0, [sp, #16]
   175e8:	mov	r1, r7
   175ec:	mvn	r2, #0
   175f0:	bl	14640 <assuan_socket_connect@plt>
   175f4:	subs	r6, r0, #0
   175f8:	beq	17614 <__assert_fail@plt+0x2fbc>
   175fc:	bl	13a64 <gpg_strerror@plt>
   17600:	mov	r1, r0
   17604:	movw	r0, #2132	; 0x854
   17608:	movt	r0, #4
   1760c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   17610:	b	17564 <__assert_fail@plt+0x2f0c>
   17614:	mov	r1, #100	; 0x64
   17618:	add	r0, sp, #20
   1761c:	bl	2ed78 <__assert_fail@plt+0x1a720>
   17620:	add	r3, sp, #20
   17624:	ldr	r0, [sp, #16]
   17628:	movw	r1, #2168	; 0x878
   1762c:	str	r6, [sp]
   17630:	movt	r1, #4
   17634:	str	r6, [sp, #4]
   17638:	movw	r2, #29940	; 0x74f4
   1763c:	str	r6, [sp, #8]
   17640:	movt	r2, #1
   17644:	str	r6, [sp, #12]
   17648:	bl	13ef0 <assuan_transact@plt>
   1764c:	mov	r2, #1
   17650:	movw	r1, #18888	; 0x49c8
   17654:	movt	r1, #4
   17658:	mov	r8, r0
   1765c:	add	r0, sp, #20
   17660:	bl	2edf0 <__assert_fail@plt+0x1a798>
   17664:	add	r0, sp, #20
   17668:	mov	r1, r6
   1766c:	bl	2eecc <__assert_fail@plt+0x1a874>
   17670:	adds	r3, r8, #0
   17674:	movne	r3, #1
   17678:	cmp	r0, #0
   1767c:	orreq	r3, r3, #1
   17680:	mov	r9, r0
   17684:	cmp	r3, #0
   17688:	bne	176c4 <__assert_fail@plt+0x306c>
   1768c:	mov	r1, r6
   17690:	mov	r2, #10
   17694:	bl	1407c <strtoul@plt>
   17698:	mov	r8, r0
   1769c:	bl	14040 <getpid@plt>
   176a0:	cmp	r8, r0
   176a4:	beq	176ec <__assert_fail@plt+0x3094>
   176a8:	movw	r0, #2232	; 0x8b8
   176ac:	movt	r0, #4
   176b0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   176b4:	mov	r6, #1
   176b8:	mov	r0, r9
   176bc:	bl	13c44 <gcry_free@plt>
   176c0:	b	17564 <__assert_fail@plt+0x2f0c>
   176c4:	mov	r0, r8
   176c8:	mov	r6, #1
   176cc:	bl	13a64 <gpg_strerror@plt>
   176d0:	movw	r1, #2168	; 0x878
   176d4:	movt	r1, #4
   176d8:	mov	r2, r0
   176dc:	movw	r0, #2180	; 0x884
   176e0:	movt	r0, #4
   176e4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   176e8:	b	176b8 <__assert_fail@plt+0x3060>
   176ec:	movw	r3, #48116	; 0xbbf4
   176f0:	movt	r3, #5
   176f4:	ldr	r3, [r3, #4]
   176f8:	cmp	r3, #1
   176fc:	ble	176b8 <__assert_fail@plt+0x3060>
   17700:	movw	r0, #2276	; 0x8e4
   17704:	movt	r0, #4
   17708:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1770c:	b	176b8 <__assert_fail@plt+0x3060>
   17710:	bl	13cec <__stack_chk_fail@plt>
   17714:	push	{r4, lr}
   17718:	bl	13af4 <pth_self@plt>
   1771c:	subs	r4, r0, #0
   17720:	beq	1772c <__assert_fail@plt+0x30d4>
   17724:	mov	r0, #0
   17728:	pop	{r4, pc}
   1772c:	bl	1395c <pth_init@plt>
   17730:	cmp	r0, #0
   17734:	bne	17744 <__assert_fail@plt+0x30ec>
   17738:	bl	14148 <__errno_location@plt>
   1773c:	ldr	r0, [r0]
   17740:	pop	{r4, pc}
   17744:	mov	r0, r4
   17748:	pop	{r4, pc}
   1774c:	push	{r3, lr}
   17750:	bl	1395c <pth_init@plt>
   17754:	cmp	r0, #0
   17758:	bne	17768 <__assert_fail@plt+0x3110>
   1775c:	bl	14148 <__errno_location@plt>
   17760:	ldr	r0, [r0]
   17764:	pop	{r3, pc}
   17768:	mov	r0, #0
   1776c:	pop	{r3, pc}
   17770:	push	{r3, lr}
   17774:	ldr	r0, [r0]
   17778:	bl	14220 <pth_mutex_release@plt>
   1777c:	cmp	r0, #0
   17780:	bne	17790 <__assert_fail@plt+0x3138>
   17784:	bl	14148 <__errno_location@plt>
   17788:	ldr	r0, [r0]
   1778c:	pop	{r3, pc}
   17790:	mov	r0, #0
   17794:	pop	{r3, pc}
   17798:	mov	r1, #0
   1779c:	ldr	r0, [r0]
   177a0:	push	{r3, lr}
   177a4:	mov	r2, r1
   177a8:	bl	14364 <pth_mutex_acquire@plt>
   177ac:	cmp	r0, #0
   177b0:	bne	177c0 <__assert_fail@plt+0x3168>
   177b4:	bl	14148 <__errno_location@plt>
   177b8:	ldr	r0, [r0]
   177bc:	pop	{r3, pc}
   177c0:	mov	r0, #0
   177c4:	pop	{r3, pc}
   177c8:	push	{r3, r4, r5, lr}
   177cc:	mov	r4, r0
   177d0:	bl	14478 <remove@plt>
   177d4:	mov	r0, r4
   177d8:	mov	r1, #47	; 0x2f
   177dc:	bl	143b8 <strrchr@plt>
   177e0:	subs	r5, r0, #0
   177e4:	beq	17800 <__assert_fail@plt+0x31a8>
   177e8:	mov	r3, #0
   177ec:	mov	r0, r4
   177f0:	strb	r3, [r5]
   177f4:	bl	13c20 <rmdir@plt>
   177f8:	mov	r3, #47	; 0x2f
   177fc:	strb	r3, [r5]
   17800:	mov	r3, #0
   17804:	strb	r3, [r4]
   17808:	pop	{r3, r4, r5, pc}
   1780c:	push	{r4, lr}
   17810:	movw	r4, #47324	; 0xb8dc
   17814:	movt	r4, #5
   17818:	ldr	r0, [r4, #36]	; 0x24
   1781c:	cmp	r0, #0
   17820:	beq	17830 <__assert_fail@plt+0x31d8>
   17824:	ldrb	r3, [r0]
   17828:	cmp	r3, #0
   1782c:	bne	17850 <__assert_fail@plt+0x31f8>
   17830:	ldr	r0, [r4, #40]	; 0x28
   17834:	cmp	r0, #0
   17838:	popeq	{r4, pc}
   1783c:	ldrb	r3, [r0]
   17840:	cmp	r3, #0
   17844:	popeq	{r4, pc}
   17848:	pop	{r4, lr}
   1784c:	b	177c8 <__assert_fail@plt+0x3170>
   17850:	bl	177c8 <__assert_fail@plt+0x3170>
   17854:	b	17830 <__assert_fail@plt+0x31d8>
   17858:	push	{r4, r5, r6, lr}
   1785c:	mov	r2, #5
   17860:	mov	r4, r0
   17864:	movw	r1, #2360	; 0x938
   17868:	mov	r0, #0
   1786c:	movt	r1, #4
   17870:	bl	13cc8 <dcgettext@plt>
   17874:	mov	r6, r0
   17878:	bl	14148 <__errno_location@plt>
   1787c:	ldr	r5, [r4]
   17880:	ldr	r0, [r0]
   17884:	bl	13fa4 <strerror@plt>
   17888:	mov	r1, r5
   1788c:	mov	r2, r0
   17890:	mov	r0, r6
   17894:	bl	3f478 <__assert_fail@plt+0x2ae20>
   17898:	ldr	r0, [r4]
   1789c:	bl	140b8 <assuan_sock_close@plt>
   178a0:	mov	r0, r4
   178a4:	bl	13c44 <gcry_free@plt>
   178a8:	mvn	r0, #0
   178ac:	pop	{r4, r5, r6, pc}
   178b0:	push	{r4, r5, r6, lr}
   178b4:	mov	r4, r0
   178b8:	ldr	r1, [pc, #208]	; 17990 <__assert_fail@plt+0x3338>
   178bc:	ldr	r0, [r0]
   178c0:	bl	14430 <assuan_sock_check_nonce@plt>
   178c4:	cmp	r0, #0
   178c8:	bne	1797c <__assert_fail@plt+0x3324>
   178cc:	movw	r5, #48116	; 0xbbf4
   178d0:	movt	r5, #5
   178d4:	mov	r0, r4
   178d8:	bl	173d4 <__assert_fail@plt+0x2d7c>
   178dc:	ldr	r3, [r5, #4]
   178e0:	cmp	r3, #0
   178e4:	bne	1794c <__assert_fail@plt+0x32f4>
   178e8:	mov	r0, r4
   178ec:	mvn	r1, #0
   178f0:	ldr	r2, [r4]
   178f4:	bl	1b7f0 <__assert_fail@plt+0x7198>
   178f8:	ldr	r3, [r5, #4]
   178fc:	cmp	r3, #0
   17900:	bne	1791c <__assert_fail@plt+0x32c4>
   17904:	mov	r0, r4
   17908:	bl	174c0 <__assert_fail@plt+0x2e68>
   1790c:	mov	r0, r4
   17910:	bl	13c44 <gcry_free@plt>
   17914:	mov	r0, #0
   17918:	pop	{r4, r5, r6, pc}
   1791c:	mov	r2, #5
   17920:	movw	r1, #2652	; 0xa5c
   17924:	mov	r0, #0
   17928:	movt	r1, #4
   1792c:	bl	13cc8 <dcgettext@plt>
   17930:	mov	r5, r0
   17934:	bl	13af4 <pth_self@plt>
   17938:	ldr	r2, [r4]
   1793c:	mov	r1, r0
   17940:	mov	r0, r5
   17944:	bl	3f478 <__assert_fail@plt+0x2ae20>
   17948:	b	17904 <__assert_fail@plt+0x32ac>
   1794c:	mov	r2, #5
   17950:	movw	r1, #2612	; 0xa34
   17954:	mov	r0, #0
   17958:	movt	r1, #4
   1795c:	bl	13cc8 <dcgettext@plt>
   17960:	mov	r6, r0
   17964:	bl	13af4 <pth_self@plt>
   17968:	ldr	r2, [r4]
   1796c:	mov	r1, r0
   17970:	mov	r0, r6
   17974:	bl	3f478 <__assert_fail@plt+0x2ae20>
   17978:	b	178e8 <__assert_fail@plt+0x3290>
   1797c:	mov	r0, r4
   17980:	bl	17858 <__assert_fail@plt+0x3200>
   17984:	cmp	r0, #0
   17988:	bne	17914 <__assert_fail@plt+0x32bc>
   1798c:	b	178cc <__assert_fail@plt+0x3274>
   17990:	andeq	fp, r5, ip, lsl #18
   17994:	sub	r0, r0, #1
   17998:	push	{r4, r5, r6, lr}
   1799c:	cmp	r0, #40	; 0x28
   179a0:	ldrls	pc, [pc, r0, lsl #2]
   179a4:	b	17ad4 <__assert_fail@plt+0x347c>
   179a8:			; <UNDEFINED> instruction: 0x00017ab0
   179ac:	ldrdeq	r7, [r1], -r4
   179b0:	ldrdeq	r7, [r1], -r4
   179b4:	ldrdeq	r7, [r1], -r4
   179b8:	ldrdeq	r7, [r1], -r4
   179bc:	ldrdeq	r7, [r1], -r4
   179c0:	ldrdeq	r7, [r1], -r4
   179c4:	ldrdeq	r7, [r1], -r4
   179c8:	ldrdeq	r7, [r1], -r4
   179cc:	ldrdeq	r7, [r1], -r4
   179d0:	andeq	r7, r1, r8, asr #21
   179d4:	ldrdeq	r7, [r1], -r4
   179d8:	andeq	r7, r1, ip, asr #20
   179dc:	ldrdeq	r7, [r1], -r4
   179e0:	ldrdeq	r7, [r1], -r4
   179e4:	ldrdeq	r7, [r1], -r4
   179e8:	andeq	r7, r1, r8, asr sl
   179ec:	ldrdeq	r7, [r1], -r4
   179f0:	andeq	r7, r1, r4, ror #20
   179f4:	andeq	r7, r1, ip, ror sl
   179f8:	ldrdeq	r7, [r1], -r4
   179fc:	ldrdeq	r7, [r1], -r4
   17a00:	ldrdeq	r7, [r1], -r4
   17a04:	ldrdeq	r7, [r1], -r4
   17a08:	ldrdeq	r7, [r1], -r4
   17a0c:	ldrdeq	r7, [r1], -r4
   17a10:	ldrdeq	r7, [r1], -r4
   17a14:	ldrdeq	r7, [r1], -r4
   17a18:	ldrdeq	r7, [r1], -r4
   17a1c:	ldrdeq	r7, [r1], -r4
   17a20:	ldrdeq	r7, [r1], -r4
   17a24:	ldrdeq	r7, [r1], -r4
   17a28:	ldrdeq	r7, [r1], -r4
   17a2c:	ldrdeq	r7, [r1], -r4
   17a30:	ldrdeq	r7, [r1], -r4
   17a34:	ldrdeq	r7, [r1], -r4
   17a38:	ldrdeq	r7, [r1], -r4
   17a3c:	ldrdeq	r7, [r1], -r4
   17a40:	ldrdeq	r7, [r1], -r4
   17a44:			; <UNDEFINED> instruction: 0x00017ab0
   17a48:	muleq	r1, r8, sl
   17a4c:	movw	r0, #2416	; 0x970
   17a50:	movt	r0, #4
   17a54:	pop	{r4, r5, r6, pc}
   17a58:	movw	r0, #2424	; 0x978
   17a5c:	movt	r0, #4
   17a60:	pop	{r4, r5, r6, pc}
   17a64:	movw	r1, #2436	; 0x984
   17a68:	mov	r0, #0
   17a6c:	movt	r1, #4
   17a70:	mov	r2, #5
   17a74:	pop	{r4, r5, r6, lr}
   17a78:	b	13cc8 <dcgettext@plt>
   17a7c:	movw	r4, #47324	; 0xb8dc
   17a80:	movt	r4, #5
   17a84:	ldr	r5, [r4, #52]	; 0x34
   17a88:	cmp	r5, #0
   17a8c:	beq	17adc <__assert_fail@plt+0x3484>
   17a90:	mov	r0, r5
   17a94:	pop	{r4, r5, r6, pc}
   17a98:	movw	r1, #2528	; 0x9e0
   17a9c:	mov	r0, #0
   17aa0:	movt	r1, #4
   17aa4:	mov	r2, #5
   17aa8:	pop	{r4, r5, r6, lr}
   17aac:	b	13cc8 <dcgettext@plt>
   17ab0:	movw	r1, #2484	; 0x9b4
   17ab4:	mov	r0, #0
   17ab8:	movt	r1, #4
   17abc:	mov	r2, #5
   17ac0:	pop	{r4, r5, r6, lr}
   17ac4:	b	13cc8 <dcgettext@plt>
   17ac8:	movw	r0, #2396	; 0x95c
   17acc:	movt	r0, #4
   17ad0:	pop	{r4, r5, r6, pc}
   17ad4:	mov	r0, #0
   17ad8:	pop	{r4, r5, r6, pc}
   17adc:	movw	r6, #46196	; 0xb474
   17ae0:	movt	r6, #5
   17ae4:	ldr	r3, [r6]
   17ae8:	cmp	r3, #0
   17aec:	beq	17b04 <__assert_fail@plt+0x34ac>
   17af0:	mov	r0, #24
   17af4:	mov	r1, r5
   17af8:	mov	r2, r5
   17afc:	bl	144c0 <gcry_control@plt>
   17b00:	str	r5, [r6]
   17b04:	mov	r0, #0
   17b08:	bl	13d70 <gcry_check_version@plt>
   17b0c:	mov	r6, r0
   17b10:	bl	14094 <strlen@plt>
   17b14:	add	r0, r0, #11
   17b18:	bl	1398c <gcry_xmalloc@plt>
   17b1c:	movw	r3, #2472	; 0x9a8
   17b20:	movt	r3, #4
   17b24:	movw	r2, #37396	; 0x9214
   17b28:	movt	r2, #4
   17b2c:	ldrh	r2, [r2]
   17b30:	mov	r5, r0
   17b34:	ldm	r3!, {r0, r1}
   17b38:	strh	r2, [r5, #9]
   17b3c:	ldrb	r3, [r3]
   17b40:	str	r0, [r5]
   17b44:	add	r0, r5, #10
   17b48:	str	r1, [r5, #4]
   17b4c:	mov	r1, r6
   17b50:	strb	r3, [r5, #8]
   17b54:	bl	13e78 <strcpy@plt>
   17b58:	str	r5, [r4, #52]	; 0x34
   17b5c:	mov	r0, r5
   17b60:	pop	{r4, r5, r6, pc}
   17b64:	push	{r4, r5, r6, lr}
   17b68:	mov	r4, r0
   17b6c:	ldr	r1, [pc, #204]	; 17c40 <__assert_fail@plt+0x35e8>
   17b70:	ldr	r0, [r0]
   17b74:	bl	14430 <assuan_sock_check_nonce@plt>
   17b78:	cmp	r0, #0
   17b7c:	bne	17c2c <__assert_fail@plt+0x35d4>
   17b80:	movw	r5, #48116	; 0xbbf4
   17b84:	movt	r5, #5
   17b88:	mov	r0, r4
   17b8c:	bl	173d4 <__assert_fail@plt+0x2d7c>
   17b90:	ldr	r3, [r5, #4]
   17b94:	cmp	r3, #0
   17b98:	bne	17bfc <__assert_fail@plt+0x35a4>
   17b9c:	mov	r0, r4
   17ba0:	ldr	r1, [r4]
   17ba4:	bl	1f2d8 <__assert_fail@plt+0xac80>
   17ba8:	ldr	r3, [r5, #4]
   17bac:	cmp	r3, #0
   17bb0:	bne	17bcc <__assert_fail@plt+0x3574>
   17bb4:	mov	r0, r4
   17bb8:	bl	174c0 <__assert_fail@plt+0x2e68>
   17bbc:	mov	r0, r4
   17bc0:	bl	13c44 <gcry_free@plt>
   17bc4:	mov	r0, #0
   17bc8:	pop	{r4, r5, r6, pc}
   17bcc:	mov	r2, #5
   17bd0:	movw	r1, #2648	; 0xa58
   17bd4:	mov	r0, #0
   17bd8:	movt	r1, #4
   17bdc:	bl	13cc8 <dcgettext@plt>
   17be0:	mov	r5, r0
   17be4:	bl	13af4 <pth_self@plt>
   17be8:	ldr	r2, [r4]
   17bec:	mov	r1, r0
   17bf0:	mov	r0, r5
   17bf4:	bl	3f478 <__assert_fail@plt+0x2ae20>
   17bf8:	b	17bb4 <__assert_fail@plt+0x355c>
   17bfc:	mov	r2, #5
   17c00:	movw	r1, #2608	; 0xa30
   17c04:	mov	r0, #0
   17c08:	movt	r1, #4
   17c0c:	bl	13cc8 <dcgettext@plt>
   17c10:	mov	r6, r0
   17c14:	bl	13af4 <pth_self@plt>
   17c18:	ldr	r2, [r4]
   17c1c:	mov	r1, r0
   17c20:	mov	r0, r6
   17c24:	bl	3f478 <__assert_fail@plt+0x2ae20>
   17c28:	b	17b9c <__assert_fail@plt+0x3544>
   17c2c:	mov	r0, r4
   17c30:	bl	17858 <__assert_fail@plt+0x3200>
   17c34:	cmp	r0, #0
   17c38:	bne	17bc4 <__assert_fail@plt+0x356c>
   17c3c:	b	17b80 <__assert_fail@plt+0x3528>
   17c40:	andeq	fp, r5, r4, lsl r9
   17c44:	push	{r3, r4, r5, lr}
   17c48:	movw	r4, #48116	; 0xbbf4
   17c4c:	movt	r4, #5
   17c50:	mov	r5, r0
   17c54:	ldr	r3, [r4]
   17c58:	tst	r3, #128	; 0x80
   17c5c:	bne	17c80 <__assert_fail@plt+0x3628>
   17c60:	cmp	r3, #0
   17c64:	bne	17cb0 <__assert_fail@plt+0x3658>
   17c68:	mov	r0, #25
   17c6c:	bl	144c0 <gcry_control@plt>
   17c70:	cmp	r5, #0
   17c74:	beq	17c98 <__assert_fail@plt+0x3640>
   17c78:	mov	r0, r5
   17c7c:	bl	1404c <exit@plt>
   17c80:	mov	r0, #23
   17c84:	bl	144c0 <gcry_control@plt>
   17c88:	mov	r0, #13
   17c8c:	bl	144c0 <gcry_control@plt>
   17c90:	ldr	r3, [r4]
   17c94:	b	17c60 <__assert_fail@plt+0x3608>
   17c98:	mov	r0, r5
   17c9c:	bl	3f2ac <__assert_fail@plt+0x2ac54>
   17ca0:	cmp	r0, #0
   17ca4:	movne	r5, #2
   17ca8:	moveq	r5, #0
   17cac:	b	17c78 <__assert_fail@plt+0x3620>
   17cb0:	mov	r0, #14
   17cb4:	bl	144c0 <gcry_control@plt>
   17cb8:	b	17c68 <__assert_fail@plt+0x3610>
   17cbc:	movw	r3, #48116	; 0xbbf4
   17cc0:	movt	r3, #5
   17cc4:	push	{r4, r5, r6, lr}
   17cc8:	mov	r2, r0
   17ccc:	ldr	r5, [r3, #36]	; 0x24
   17cd0:	cmp	r5, #0
   17cd4:	beq	17d1c <__assert_fail@plt+0x36c4>
   17cd8:	mov	r1, r2
   17cdc:	ldr	r0, [r3, #20]
   17ce0:	mov	r2, #0
   17ce4:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   17ce8:	mov	r4, r0
   17cec:	mov	r0, r4
   17cf0:	mov	r1, #58	; 0x3a
   17cf4:	bl	140ac <strchr@plt>
   17cf8:	subs	r5, r0, #0
   17cfc:	bne	17dc0 <__assert_fail@plt+0x3768>
   17d00:	mov	r0, r4
   17d04:	bl	14094 <strlen@plt>
   17d08:	add	r0, r0, #1
   17d0c:	cmp	r0, #107	; 0x6b
   17d10:	bhi	17da0 <__assert_fail@plt+0x3748>
   17d14:	mov	r0, r4
   17d18:	pop	{r4, r5, r6, pc}
   17d1c:	mov	r0, r1
   17d20:	bl	141f0 <gcry_xstrdup@plt>
   17d24:	mov	r1, #47	; 0x2f
   17d28:	mov	r4, r0
   17d2c:	bl	143b8 <strrchr@plt>
   17d30:	subs	r6, r0, #0
   17d34:	beq	17d8c <__assert_fail@plt+0x3734>
   17d38:	strb	r5, [r6]
   17d3c:	mov	r0, r4
   17d40:	bl	1443c <mkdtemp@plt>
   17d44:	cmp	r0, #0
   17d48:	movne	r3, #47	; 0x2f
   17d4c:	strbne	r3, [r6]
   17d50:	bne	17cec <__assert_fail@plt+0x3694>
   17d54:	mov	r2, #5
   17d58:	movw	r1, #1728	; 0x6c0
   17d5c:	movt	r1, #4
   17d60:	bl	13cc8 <dcgettext@plt>
   17d64:	mov	r5, r0
   17d68:	bl	14148 <__errno_location@plt>
   17d6c:	ldr	r0, [r0]
   17d70:	bl	13fa4 <strerror@plt>
   17d74:	mov	r1, r4
   17d78:	mov	r2, r0
   17d7c:	mov	r0, r5
   17d80:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   17d84:	mov	r0, #2
   17d88:	bl	17c44 <__assert_fail@plt+0x35ec>
   17d8c:	movw	r0, #2028	; 0x7ec
   17d90:	movw	r1, #1505	; 0x5e1
   17d94:	movt	r0, #4
   17d98:	ldr	r2, [pc, #60]	; 17ddc <__assert_fail@plt+0x3784>
   17d9c:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   17da0:	mov	r2, #5
   17da4:	mov	r0, r5
   17da8:	movw	r1, #2732	; 0xaac
   17dac:	movt	r1, #4
   17db0:	bl	13cc8 <dcgettext@plt>
   17db4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   17db8:	mov	r0, #2
   17dbc:	bl	17c44 <__assert_fail@plt+0x35ec>
   17dc0:	movw	r0, #2688	; 0xa80
   17dc4:	movw	r1, #26248	; 0x6688
   17dc8:	movt	r0, #4
   17dcc:	movt	r1, #4
   17dd0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   17dd4:	mov	r0, #2
   17dd8:	bl	17c44 <__assert_fail@plt+0x35ec>
   17ddc:			; <UNDEFINED> instruction: 0x000405b0
   17de0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17de4:	sub	sp, sp, #12
   17de8:	mov	r6, r0
   17dec:	mov	r0, #1
   17df0:	str	r1, [sp, #4]
   17df4:	mov	sl, r2
   17df8:	mov	r1, r0
   17dfc:	mov	r2, #0
   17e00:	bl	14130 <assuan_sock_new@plt>
   17e04:	cmn	r0, #1
   17e08:	mov	r4, r0
   17e0c:	beq	17fc0 <__assert_fail@plt+0x3968>
   17e10:	mov	r0, #110	; 0x6e
   17e14:	mov	r9, #1
   17e18:	bl	1398c <gcry_xmalloc@plt>
   17e1c:	mov	r2, #110	; 0x6e
   17e20:	mov	r1, #0
   17e24:	mov	r5, r0
   17e28:	bl	141cc <memset@plt>
   17e2c:	mov	r0, r6
   17e30:	strh	r9, [r5]
   17e34:	bl	14094 <strlen@plt>
   17e38:	add	r2, r0, r9
   17e3c:	cmp	r2, #107	; 0x6b
   17e40:	bhi	18034 <__assert_fail@plt+0x39dc>
   17e44:	add	r8, r5, #2
   17e48:	add	r7, r0, #2
   17e4c:	mov	r1, r6
   17e50:	movw	fp, #48116	; 0xbbf4
   17e54:	mov	r0, r8
   17e58:	movt	fp, #5
   17e5c:	bl	13ba8 <memcpy@plt>
   17e60:	mov	r2, r7
   17e64:	mov	r0, r4
   17e68:	mov	r1, r5
   17e6c:	bl	13c74 <assuan_sock_bind@plt>
   17e70:	ldr	r2, [fp, #36]	; 0x24
   17e74:	cmp	r2, #0
   17e78:	beq	17f1c <__assert_fail@plt+0x38c4>
   17e7c:	cmn	r0, #1
   17e80:	beq	17f4c <__assert_fail@plt+0x38f4>
   17e84:	mov	r0, r5
   17e88:	mov	r1, r7
   17e8c:	mov	r2, sl
   17e90:	bl	13f20 <assuan_sock_get_nonce@plt>
   17e94:	subs	r5, r0, #0
   17e98:	bne	17f28 <__assert_fail@plt+0x38d0>
   17e9c:	mov	r0, r4
   17ea0:	mov	r1, #5
   17ea4:	bl	143c4 <listen@plt>
   17ea8:	cmn	r0, #1
   17eac:	beq	17ff8 <__assert_fail@plt+0x39a0>
   17eb0:	ldr	r3, [fp, #4]
   17eb4:	cmp	r3, #0
   17eb8:	beq	17ed8 <__assert_fail@plt+0x3880>
   17ebc:	movw	r1, #2976	; 0xba0
   17ec0:	mov	r0, #0
   17ec4:	movt	r1, #4
   17ec8:	mov	r2, #5
   17ecc:	bl	13cc8 <dcgettext@plt>
   17ed0:	mov	r1, r8
   17ed4:	bl	3f478 <__assert_fail@plt+0x2ae20>
   17ed8:	mov	r0, r4
   17edc:	add	sp, sp, #12
   17ee0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17ee4:	ldr	r3, [sp, #4]
   17ee8:	cmp	r3, #0
   17eec:	bne	17f04 <__assert_fail@plt+0x38ac>
   17ef0:	mov	r0, r9
   17ef4:	mov	r1, r9
   17ef8:	bl	17124 <__assert_fail@plt+0x2acc>
   17efc:	subs	r9, r0, #0
   17f00:	beq	18058 <__assert_fail@plt+0x3a00>
   17f04:	mov	r0, r6
   17f08:	bl	14478 <remove@plt>
   17f0c:	mov	r0, r4
   17f10:	mov	r1, r5
   17f14:	mov	r2, r7
   17f18:	bl	13c74 <assuan_sock_bind@plt>
   17f1c:	cmn	r0, #1
   17f20:	beq	17f5c <__assert_fail@plt+0x3904>
   17f24:	b	17e84 <__assert_fail@plt+0x382c>
   17f28:	mov	r2, #5
   17f2c:	movw	r1, #2880	; 0xb40
   17f30:	mov	r0, #0
   17f34:	movt	r1, #4
   17f38:	bl	13cc8 <dcgettext@plt>
   17f3c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   17f40:	cmn	r5, #1
   17f44:	bne	17e9c <__assert_fail@plt+0x3844>
   17f48:	b	17f5c <__assert_fail@plt+0x3904>
   17f4c:	bl	14148 <__errno_location@plt>
   17f50:	ldr	r2, [r0]
   17f54:	cmp	r2, #98	; 0x62
   17f58:	beq	17ee4 <__assert_fail@plt+0x388c>
   17f5c:	mov	r2, #5
   17f60:	movw	r1, #2916	; 0xb64
   17f64:	mov	r0, #0
   17f68:	movt	r1, #4
   17f6c:	bl	13cc8 <dcgettext@plt>
   17f70:	mov	r5, r0
   17f74:	bl	14148 <__errno_location@plt>
   17f78:	ldr	r0, [r0]
   17f7c:	bl	13b6c <gpg_err_code_from_errno@plt>
   17f80:	cmp	r0, #0
   17f84:	uxthne	r2, r0
   17f88:	orrne	r0, r2, #67108864	; 0x4000000
   17f8c:	bl	13a64 <gpg_strerror@plt>
   17f90:	mov	r1, r8
   17f94:	mov	r2, r0
   17f98:	mov	r0, r5
   17f9c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   17fa0:	mov	r0, r4
   17fa4:	bl	140b8 <assuan_sock_close@plt>
   17fa8:	ldr	r3, [fp, #36]	; 0x24
   17fac:	cmp	r3, #0
   17fb0:	movne	r3, #0
   17fb4:	strbne	r3, [r6]
   17fb8:	mov	r0, #2
   17fbc:	bl	17c44 <__assert_fail@plt+0x35ec>
   17fc0:	mov	r2, #5
   17fc4:	movw	r1, #2760	; 0xac8
   17fc8:	mov	r0, #0
   17fcc:	movt	r1, #4
   17fd0:	bl	13cc8 <dcgettext@plt>
   17fd4:	mov	r4, r0
   17fd8:	bl	14148 <__errno_location@plt>
   17fdc:	ldr	r0, [r0]
   17fe0:	bl	13fa4 <strerror@plt>
   17fe4:	mov	r1, r0
   17fe8:	mov	r0, r4
   17fec:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   17ff0:	mov	r0, #2
   17ff4:	bl	17c44 <__assert_fail@plt+0x35ec>
   17ff8:	mov	r2, #5
   17ffc:	movw	r1, #2952	; 0xb88
   18000:	mov	r0, #0
   18004:	movt	r1, #4
   18008:	bl	13cc8 <dcgettext@plt>
   1800c:	mov	r5, r0
   18010:	bl	14148 <__errno_location@plt>
   18014:	ldr	r0, [r0]
   18018:	bl	13fa4 <strerror@plt>
   1801c:	mov	r1, r0
   18020:	mov	r0, r5
   18024:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   18028:	mov	r0, r4
   1802c:	bl	140b8 <assuan_sock_close@plt>
   18030:	b	17fb8 <__assert_fail@plt+0x3960>
   18034:	mov	r2, #5
   18038:	movw	r1, #2788	; 0xae4
   1803c:	mov	r0, #0
   18040:	movt	r1, #4
   18044:	bl	13cc8 <dcgettext@plt>
   18048:	mov	r1, r6
   1804c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   18050:	mov	r0, #2
   18054:	bl	17c44 <__assert_fail@plt+0x35ec>
   18058:	mov	r2, #5
   1805c:	movw	r1, #2820	; 0xb04
   18060:	movt	r1, #4
   18064:	bl	13cc8 <dcgettext@plt>
   18068:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1806c:	strb	r9, [r6]
   18070:	mov	r0, r4
   18074:	bl	140b8 <assuan_sock_close@plt>
   18078:	mov	r0, #2
   1807c:	bl	17c44 <__assert_fail@plt+0x35ec>
   18080:	push	{r3, r4, r5, r6, r7, lr}
   18084:	movw	r4, #47324	; 0xb8dc
   18088:	movt	r4, #5
   1808c:	ldr	r0, [r4, #60]	; 0x3c
   18090:	cmp	r0, #0
   18094:	beq	18194 <__assert_fail@plt+0x3b3c>
   18098:	bl	29e34 <__assert_fail@plt+0x157dc>
   1809c:	movw	r3, #46196	; 0xb474
   180a0:	movt	r3, #5
   180a4:	ldr	r0, [r3, #4]
   180a8:	cmn	r0, #1
   180ac:	beq	180c0 <__assert_fail@plt+0x3a68>
   180b0:	mov	r1, #0
   180b4:	bl	14028 <kill@plt>
   180b8:	cmp	r0, #0
   180bc:	bne	181c0 <__assert_fail@plt+0x3b68>
   180c0:	mov	r0, #0
   180c4:	ldr	r6, [r4, #60]	; 0x3c
   180c8:	bl	13c08 <time@plt>
   180cc:	movw	r5, #47324	; 0xb8dc
   180d0:	add	r6, r6, #59	; 0x3b
   180d4:	movt	r5, #5
   180d8:	cmp	r6, r0
   180dc:	popge	{r3, r4, r5, r6, r7, pc}
   180e0:	movw	r3, #48116	; 0xbbf4
   180e4:	movt	r3, #5
   180e8:	ldr	r2, [r3, #36]	; 0x24
   180ec:	cmp	r2, #0
   180f0:	beq	18184 <__assert_fail@plt+0x3b2c>
   180f4:	ldr	r2, [r5, #32]
   180f8:	cmp	r2, #0
   180fc:	bne	18184 <__assert_fail@plt+0x3b2c>
   18100:	ldr	r5, [r5, #44]	; 0x2c
   18104:	cmp	r5, #0
   18108:	bne	18184 <__assert_fail@plt+0x3b2c>
   1810c:	ldr	r0, [r3, #20]
   18110:	movw	r1, #4576	; 0x11e0
   18114:	mov	r2, r5
   18118:	movt	r1, #4
   1811c:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   18120:	subs	r7, r0, #0
   18124:	beq	18184 <__assert_fail@plt+0x3b2c>
   18128:	bl	140d0 <pth_attr_new@plt>
   1812c:	mov	r2, r5
   18130:	mov	r1, #2
   18134:	mov	r6, r0
   18138:	bl	13b78 <pth_attr_set@plt>
   1813c:	mov	r1, #4
   18140:	mov	r2, #262144	; 0x40000
   18144:	mov	r0, r6
   18148:	bl	13b78 <pth_attr_set@plt>
   1814c:	mov	r1, #1
   18150:	mov	r0, r6
   18154:	movw	r2, #3060	; 0xbf4
   18158:	movt	r2, #4
   1815c:	bl	13b78 <pth_attr_set@plt>
   18160:	mov	r0, r6
   18164:	mov	r2, r7
   18168:	movw	r1, #29956	; 0x7504
   1816c:	movt	r1, #1
   18170:	bl	13bcc <pth_spawn@plt>
   18174:	cmp	r0, #0
   18178:	beq	181a0 <__assert_fail@plt+0x3b48>
   1817c:	mov	r0, r6
   18180:	bl	13d4c <pth_attr_destroy@plt>
   18184:	mov	r0, #0
   18188:	bl	13c08 <time@plt>
   1818c:	str	r0, [r4, #60]	; 0x3c
   18190:	pop	{r3, r4, r5, r6, r7, pc}
   18194:	bl	13c08 <time@plt>
   18198:	str	r0, [r4, #60]	; 0x3c
   1819c:	b	18098 <__assert_fail@plt+0x3a40>
   181a0:	bl	14148 <__errno_location@plt>
   181a4:	ldr	r0, [r0]
   181a8:	bl	13fa4 <strerror@plt>
   181ac:	mov	r1, r0
   181b0:	movw	r0, #3080	; 0xc08
   181b4:	movt	r0, #4
   181b8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   181bc:	b	1817c <__assert_fail@plt+0x3b24>
   181c0:	movw	r3, #48116	; 0xbbf4
   181c4:	movt	r3, #5
   181c8:	mov	r2, #2
   181cc:	str	r2, [r4, #44]	; 0x2c
   181d0:	ldr	r3, [r3, #8]
   181d4:	cmp	r3, #0
   181d8:	bne	18210 <__assert_fail@plt+0x3bb8>
   181dc:	movw	r0, #3004	; 0xbbc
   181e0:	movt	r0, #4
   181e4:	bl	3f478 <__assert_fail@plt+0x2ae20>
   181e8:	mov	r0, #11
   181ec:	bl	3d0cc <__assert_fail@plt+0x28a74>
   181f0:	mov	r4, r0
   181f4:	mov	r0, #13
   181f8:	bl	3d0cc <__assert_fail@plt+0x28a74>
   181fc:	mov	r1, r4
   18200:	mov	r2, r0
   18204:	movw	r0, #3044	; 0xbe4
   18208:	movt	r0, #4
   1820c:	bl	3f478 <__assert_fail@plt+0x2ae20>
   18210:	bl	1780c <__assert_fail@plt+0x31b4>
   18214:	mov	r0, #0
   18218:	bl	17c44 <__assert_fail@plt+0x35ec>
   1821c:	movw	r3, #47324	; 0xb8dc
   18220:	movt	r3, #5
   18224:	ldr	r0, [r3, #36]	; 0x24
   18228:	cmp	r0, #0
   1822c:	bxeq	lr
   18230:	ldrb	r3, [r0]
   18234:	cmp	r3, #0
   18238:	moveq	r0, #0
   1823c:	bx	lr
   18240:	movw	r3, #47324	; 0xb8dc
   18244:	movt	r3, #5
   18248:	ldr	r0, [r3, #40]	; 0x28
   1824c:	cmp	r0, #0
   18250:	bxeq	lr
   18254:	ldrb	r3, [r0]
   18258:	cmp	r3, #0
   1825c:	moveq	r0, #0
   18260:	bx	lr
   18264:	push	{r4, r5, r6, r7, r8, lr}
   18268:	movw	r7, #47296	; 0xb8c0
   1826c:	movt	r7, #5
   18270:	sub	sp, sp, #80	; 0x50
   18274:	movw	r4, #47324	; 0xb8dc
   18278:	movt	r4, #5
   1827c:	ldr	r3, [r7]
   18280:	movw	r0, #3124	; 0xc34
   18284:	movt	r0, #4
   18288:	mov	r5, #0
   1828c:	str	r3, [sp, #76]	; 0x4c
   18290:	bl	3f478 <__assert_fail@plt+0x2ae20>
   18294:	bl	21ad8 <__assert_fail@plt+0xd480>
   18298:	ldr	r0, [r4, #64]	; 0x40
   1829c:	str	r5, [sp, #12]
   182a0:	cmp	r0, r5
   182a4:	beq	18360 <__assert_fail@plt+0x3d08>
   182a8:	movw	r1, #18760	; 0x4948
   182ac:	movt	r1, #4
   182b0:	bl	14490 <fopen64@plt>
   182b4:	subs	r6, r0, #0
   182b8:	beq	1837c <__assert_fail@plt+0x3d24>
   182bc:	mov	r0, r5
   182c0:	mov	r1, #1
   182c4:	bl	1687c <__assert_fail@plt+0x2224>
   182c8:	add	r3, sp, #80	; 0x50
   182cc:	str	r5, [sp, #24]
   182d0:	mov	r2, #1
   182d4:	str	r5, [r3, #-64]!	; 0xffffffc0
   182d8:	mov	r8, r2
   182dc:	str	r5, [sp, #32]
   182e0:	str	r5, [sp, #36]	; 0x24
   182e4:	str	r5, [sp, #40]	; 0x28
   182e8:	str	r5, [sp, #44]	; 0x2c
   182ec:	str	r5, [sp, #48]	; 0x30
   182f0:	str	r5, [sp, #52]	; 0x34
   182f4:	str	r5, [sp, #56]	; 0x38
   182f8:	str	r5, [sp, #60]	; 0x3c
   182fc:	str	r5, [sp, #64]	; 0x40
   18300:	str	r5, [sp, #68]	; 0x44
   18304:	str	r5, [sp, #72]	; 0x48
   18308:	ldr	r5, [pc, #168]	; 183b8 <__assert_fail@plt+0x3d60>
   1830c:	str	r2, [sp, #28]
   18310:	str	r3, [sp, #20]
   18314:	ldr	r1, [r4, #64]	; 0x40
   18318:	mov	r0, r6
   1831c:	str	r5, [sp]
   18320:	add	r2, sp, #12
   18324:	add	r3, sp, #20
   18328:	bl	3de24 <__assert_fail@plt+0x297cc>
   1832c:	cmp	r0, #0
   18330:	beq	18354 <__assert_fail@plt+0x3cfc>
   18334:	ldr	r3, [sp, #36]	; 0x24
   18338:	cmn	r3, #1
   1833c:	strlt	r8, [sp, #32]
   18340:	blt	18314 <__assert_fail@plt+0x3cbc>
   18344:	add	r0, sp, #20
   18348:	mov	r1, #1
   1834c:	bl	1687c <__assert_fail@plt+0x2224>
   18350:	b	18314 <__assert_fail@plt+0x3cbc>
   18354:	mov	r0, r6
   18358:	bl	142c8 <fclose@plt>
   1835c:	bl	16d04 <__assert_fail@plt+0x26ac>
   18360:	bl	27ce0 <__assert_fail@plt+0x13688>
   18364:	ldr	r2, [sp, #76]	; 0x4c
   18368:	ldr	r3, [r7]
   1836c:	cmp	r2, r3
   18370:	bne	183b4 <__assert_fail@plt+0x3d5c>
   18374:	add	sp, sp, #80	; 0x50
   18378:	pop	{r4, r5, r6, r7, r8, pc}
   1837c:	mov	r2, #5
   18380:	movw	r1, #3188	; 0xc74
   18384:	movt	r1, #4
   18388:	bl	13cc8 <dcgettext@plt>
   1838c:	mov	r5, r0
   18390:	bl	14148 <__errno_location@plt>
   18394:	ldr	r4, [r4, #64]	; 0x40
   18398:	ldr	r0, [r0]
   1839c:	bl	13fa4 <strerror@plt>
   183a0:	mov	r1, r4
   183a4:	mov	r2, r0
   183a8:	mov	r0, r5
   183ac:	bl	3f478 <__assert_fail@plt+0x2ae20>
   183b0:	b	18360 <__assert_fail@plt+0x3d08>
   183b4:	bl	13cec <__stack_chk_fail@plt>
   183b8:	andeq	fp, r5, ip, ror r4
   183bc:	sub	r3, r0, #1
   183c0:	push	{r4, lr}
   183c4:	cmp	r3, #14
   183c8:	ldrls	pc, [pc, r3, lsl #2]
   183cc:	b	184e4 <__assert_fail@plt+0x3e8c>
   183d0:	andeq	r8, r1, ip, asr #8
   183d4:	andeq	r8, r1, r4, asr r4
   183d8:	andeq	r8, r1, r4, ror #9
   183dc:	andeq	r8, r1, r4, ror #9
   183e0:	andeq	r8, r1, r4, ror #9
   183e4:	andeq	r8, r1, r4, ror #9
   183e8:	andeq	r8, r1, r4, ror #9
   183ec:	andeq	r8, r1, r4, ror #9
   183f0:	andeq	r8, r1, r4, ror #9
   183f4:	muleq	r1, r4, r4
   183f8:	andeq	r8, r1, r4, ror #9
   183fc:			; <UNDEFINED> instruction: 0x000184bc
   18400:	andeq	r8, r1, r4, ror #9
   18404:	andeq	r8, r1, r4, ror #9
   18408:	andeq	r8, r1, ip, lsl #8
   1840c:	movw	r4, #47324	; 0xb8dc
   18410:	movt	r4, #5
   18414:	ldr	r3, [r4, #44]	; 0x2c
   18418:	cmp	r3, #0
   1841c:	bne	184f8 <__assert_fail@plt+0x3ea0>
   18420:	movw	r0, #3312	; 0xcf0
   18424:	movt	r0, #4
   18428:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1842c:	ldr	r3, [r4, #44]	; 0x2c
   18430:	add	r3, r3, #1
   18434:	str	r3, [r4, #44]	; 0x2c
   18438:	cmp	r3, #2
   1843c:	movwgt	r0, #3400	; 0xd48
   18440:	movtgt	r0, #4
   18444:	pople	{r4, pc}
   18448:	b	1845c <__assert_fail@plt+0x3e04>
   1844c:	pop	{r4, lr}
   18450:	b	18264 <__assert_fail@plt+0x3c0c>
   18454:	movw	r0, #3420	; 0xd5c
   18458:	movt	r0, #4
   1845c:	bl	3f478 <__assert_fail@plt+0x2ae20>
   18460:	mov	r0, #11
   18464:	bl	3d0cc <__assert_fail@plt+0x28a74>
   18468:	mov	r4, r0
   1846c:	mov	r0, #13
   18470:	bl	3d0cc <__assert_fail@plt+0x28a74>
   18474:	mov	r1, r4
   18478:	mov	r2, r0
   1847c:	movw	r0, #3044	; 0xbe4
   18480:	movt	r0, #4
   18484:	bl	3f478 <__assert_fail@plt+0x2ae20>
   18488:	bl	1780c <__assert_fail@plt+0x31b4>
   1848c:	mov	r0, #0
   18490:	bl	17c44 <__assert_fail@plt+0x35ec>
   18494:	movw	r0, #3212	; 0xc8c
   18498:	movt	r0, #4
   1849c:	bl	3f478 <__assert_fail@plt+0x2ae20>
   184a0:	bl	3f454 <__assert_fail@plt+0x2adfc>
   184a4:	mov	r1, r0
   184a8:	mov	r0, #1024	; 0x400
   184ac:	bl	13ad0 <pth_ctrl@plt>
   184b0:	bl	2070c <__assert_fail@plt+0xc0b4>
   184b4:	pop	{r4, lr}
   184b8:	b	29d70 <__assert_fail@plt+0x15718>
   184bc:	movw	r3, #48116	; 0xbbf4
   184c0:	movt	r3, #5
   184c4:	ldr	r3, [r3, #4]
   184c8:	cmp	r3, #0
   184cc:	beq	184dc <__assert_fail@plt+0x3e84>
   184d0:	movw	r0, #3264	; 0xcc0
   184d4:	movt	r0, #4
   184d8:	bl	3f478 <__assert_fail@plt+0x2ae20>
   184dc:	pop	{r4, lr}
   184e0:	b	1b7cc <__assert_fail@plt+0x7174>
   184e4:	mov	r1, r0
   184e8:	movw	r0, #3460	; 0xd84
   184ec:	pop	{r4, lr}
   184f0:	movt	r0, #4
   184f4:	b	3f478 <__assert_fail@plt+0x2ae20>
   184f8:	mov	r0, #1008	; 0x3f0
   184fc:	bl	13ad0 <pth_ctrl@plt>
   18500:	mov	r1, r0
   18504:	movw	r0, #3352	; 0xd18
   18508:	movt	r0, #4
   1850c:	bl	3f478 <__assert_fail@plt+0x2ae20>
   18510:	b	1842c <__assert_fail@plt+0x3dd4>
   18514:	ldrb	r3, [r0]
   18518:	cmp	r3, #45	; 0x2d
   1851c:	bxne	lr
   18520:	ldrb	r3, [r0, #1]
   18524:	cmp	r3, #45	; 0x2d
   18528:	bxne	lr
   1852c:	mov	r1, r0
   18530:	b	1853c <__assert_fail@plt+0x3ee4>
   18534:	ldrb	r3, [r1, #2]
   18538:	mov	r1, r2
   1853c:	cmp	r3, #0
   18540:	add	r0, r1, #1
   18544:	mov	r2, r0
   18548:	bxeq	lr
   1854c:	cmp	r3, #9
   18550:	cmpne	r3, #32
   18554:	bne	18534 <__assert_fail@plt+0x3edc>
   18558:	cmp	r3, #9
   1855c:	cmpne	r3, #32
   18560:	bne	18518 <__assert_fail@plt+0x3ec0>
   18564:	add	r2, r0, #1
   18568:	mov	r0, r2
   1856c:	ldrb	r3, [r2], #1
   18570:	cmp	r3, #32
   18574:	cmpne	r3, #9
   18578:	beq	18568 <__assert_fail@plt+0x3f10>
   1857c:	cmp	r3, #45	; 0x2d
   18580:	beq	18520 <__assert_fail@plt+0x3ec8>
   18584:	bx	lr
   18588:	push	{r3, lr}
   1858c:	bl	144f0 <assuan_get_pointer@plt>
   18590:	mov	r3, #0
   18594:	ldr	r2, [r0, #4]
   18598:	str	r3, [r2, #16]
   1859c:	pop	{r3, pc}
   185a0:	push	{r3, r4, r5, r6, r7, lr}
   185a4:	mov	r4, r2
   185a8:	mov	r5, r0
   185ac:	mov	r7, r3
   185b0:	bl	144f0 <assuan_get_pointer@plt>
   185b4:	adds	r5, r5, #0
   185b8:	movne	r5, #1
   185bc:	cmp	r4, #0
   185c0:	movne	r5, #0
   185c4:	cmp	r5, #0
   185c8:	mov	r6, r0
   185cc:	beq	18628 <__assert_fail@plt+0x3fd0>
   185d0:	ldr	r3, [sp, #24]
   185d4:	cmp	r3, #14
   185d8:	bls	18628 <__assert_fail@plt+0x3fd0>
   185dc:	movw	r1, #15696	; 0x3d50
   185e0:	mov	r0, r7
   185e4:	movt	r1, #4
   185e8:	mov	r2, #15
   185ec:	bl	145bc <strncmp@plt>
   185f0:	cmp	r0, #0
   185f4:	bne	18628 <__assert_fail@plt+0x3fd0>
   185f8:	ldr	r3, [sp, #24]
   185fc:	cmp	r3, #15
   18600:	beq	18614 <__assert_fail@plt+0x3fbc>
   18604:	ldrb	r3, [r7, #15]
   18608:	cmp	r3, #32
   1860c:	cmpne	r3, #9
   18610:	bne	18628 <__assert_fail@plt+0x3fd0>
   18614:	ldr	r2, [r6, #4]
   18618:	mov	r3, #1
   1861c:	mov	r0, r3
   18620:	str	r3, [r2, #16]
   18624:	pop	{r3, r4, r5, r6, r7, pc}
   18628:	ldr	r3, [r6, #4]
   1862c:	ldr	r0, [r3, #16]
   18630:	adds	r0, r0, #0
   18634:	movne	r0, #1
   18638:	pop	{r3, r4, r5, r6, r7, pc}
   1863c:	push	{r4, r5, r6, lr}
   18640:	mov	r4, r1
   18644:	mov	r6, r2
   18648:	bl	144f0 <assuan_get_pointer@plt>
   1864c:	movw	r1, #15712	; 0x3d60
   18650:	movt	r1, #4
   18654:	mov	r5, r0
   18658:	mov	r0, r4
   1865c:	bl	13a28 <strcmp@plt>
   18660:	cmp	r0, #0
   18664:	beq	1870c <__assert_fail@plt+0x40b4>
   18668:	movw	r1, #6220	; 0x184c
   1866c:	mov	r0, r4
   18670:	movt	r1, #4
   18674:	bl	13a28 <strcmp@plt>
   18678:	cmp	r0, #0
   1867c:	beq	1871c <__assert_fail@plt+0x40c4>
   18680:	movw	r1, #6072	; 0x17b8
   18684:	mov	r0, r4
   18688:	movt	r1, #4
   1868c:	bl	13a28 <strcmp@plt>
   18690:	cmp	r0, #0
   18694:	bne	186b4 <__assert_fail@plt+0x405c>
   18698:	movw	r3, #48116	; 0xbbf4
   1869c:	movt	r3, #5
   186a0:	ldr	r3, [r3, #120]	; 0x78
   186a4:	cmp	r3, #0
   186a8:	beq	18760 <__assert_fail@plt+0x4108>
   186ac:	mov	r0, #0
   186b0:	pop	{r4, r5, r6, pc}
   186b4:	movw	r1, #6080	; 0x17c0
   186b8:	mov	r0, r4
   186bc:	movt	r1, #4
   186c0:	bl	13a28 <strcmp@plt>
   186c4:	cmp	r0, #0
   186c8:	beq	18734 <__assert_fail@plt+0x40dc>
   186cc:	movw	r1, #6088	; 0x17c8
   186d0:	mov	r0, r4
   186d4:	movt	r1, #4
   186d8:	bl	13a28 <strcmp@plt>
   186dc:	cmp	r0, #0
   186e0:	bne	18778 <__assert_fail@plt+0x4120>
   186e4:	ldr	r0, [r5, #16]
   186e8:	cmp	r0, #0
   186ec:	beq	186f4 <__assert_fail@plt+0x409c>
   186f0:	bl	13c44 <gcry_free@plt>
   186f4:	mov	r0, r6
   186f8:	bl	13f2c <gcry_strdup@plt>
   186fc:	cmp	r0, #0
   18700:	str	r0, [r5, #16]
   18704:	bne	186ac <__assert_fail@plt+0x4054>
   18708:	b	187b4 <__assert_fail@plt+0x415c>
   1870c:	ldr	r0, [r5, #12]
   18710:	mov	r1, r6
   18714:	pop	{r4, r5, r6, lr}
   18718:	b	39780 <__assert_fail@plt+0x25128>
   1871c:	ldr	r0, [r5, #12]
   18720:	mov	r2, r6
   18724:	movw	r1, #2040	; 0x7f8
   18728:	movt	r1, #4
   1872c:	pop	{r4, r5, r6, lr}
   18730:	b	39804 <__assert_fail@plt+0x251ac>
   18734:	movw	r3, #48116	; 0xbbf4
   18738:	movt	r3, #5
   1873c:	ldr	r3, [r3, #120]	; 0x78
   18740:	cmp	r3, #0
   18744:	bne	186ac <__assert_fail@plt+0x4054>
   18748:	ldr	r0, [r5, #12]
   1874c:	mov	r2, r6
   18750:	movw	r1, #2056	; 0x808
   18754:	movt	r1, #4
   18758:	pop	{r4, r5, r6, lr}
   1875c:	b	39804 <__assert_fail@plt+0x251ac>
   18760:	ldr	r0, [r5, #12]
   18764:	mov	r2, r6
   18768:	movw	r1, #2048	; 0x800
   1876c:	movt	r1, #4
   18770:	pop	{r4, r5, r6, lr}
   18774:	b	39804 <__assert_fail@plt+0x251ac>
   18778:	movw	r1, #6100	; 0x17d4
   1877c:	mov	r0, r4
   18780:	movt	r1, #4
   18784:	bl	13a28 <strcmp@plt>
   18788:	cmp	r0, #0
   1878c:	bne	187cc <__assert_fail@plt+0x4174>
   18790:	ldr	r0, [r5, #20]
   18794:	cmp	r0, #0
   18798:	beq	187a0 <__assert_fail@plt+0x4148>
   1879c:	bl	13c44 <gcry_free@plt>
   187a0:	mov	r0, r6
   187a4:	bl	13f2c <gcry_strdup@plt>
   187a8:	cmp	r0, #0
   187ac:	str	r0, [r5, #20]
   187b0:	bne	186ac <__assert_fail@plt+0x4054>
   187b4:	bl	14580 <gpg_err_code_from_syserror@plt>
   187b8:	cmp	r0, #0
   187bc:	beq	186ac <__assert_fail@plt+0x4054>
   187c0:	uxth	r0, r0
   187c4:	orr	r0, r0, #67108864	; 0x4000000
   187c8:	pop	{r4, r5, r6, pc}
   187cc:	movw	r1, #6112	; 0x17e0
   187d0:	mov	r0, r4
   187d4:	movt	r1, #4
   187d8:	bl	13a28 <strcmp@plt>
   187dc:	cmp	r0, #0
   187e0:	beq	18830 <__assert_fail@plt+0x41d8>
   187e4:	movw	r1, #15720	; 0x3d68
   187e8:	mov	r0, r4
   187ec:	movt	r1, #4
   187f0:	bl	13a28 <strcmp@plt>
   187f4:	cmp	r0, #0
   187f8:	beq	18874 <__assert_fail@plt+0x421c>
   187fc:	movw	r1, #15740	; 0x3d7c
   18800:	mov	r0, r4
   18804:	movt	r1, #4
   18808:	bl	13a28 <strcmp@plt>
   1880c:	cmp	r0, #0
   18810:	bne	18848 <__assert_fail@plt+0x41f0>
   18814:	ldrb	r3, [r6]
   18818:	ldr	r4, [r5, #4]
   1881c:	cmp	r3, #0
   18820:	moveq	r0, #0
   18824:	bne	1888c <__assert_fail@plt+0x4234>
   18828:	str	r0, [r4, #8]
   1882c:	b	186ac <__assert_fail@plt+0x4054>
   18830:	ldr	r0, [r5, #12]
   18834:	mov	r2, r6
   18838:	movw	r1, #2064	; 0x810
   1883c:	movt	r1, #4
   18840:	pop	{r4, r5, r6, lr}
   18844:	b	39804 <__assert_fail@plt+0x251ac>
   18848:	mov	r0, r4
   1884c:	movw	r1, #15764	; 0x3d94
   18850:	movt	r1, #4
   18854:	bl	13a28 <strcmp@plt>
   18858:	cmp	r0, #0
   1885c:	ldreq	r3, [r5, #4]
   18860:	moveq	r2, #1
   18864:	movne	r0, #174	; 0xae
   18868:	movtne	r0, #1024	; 0x400
   1886c:	streq	r2, [r3, #24]
   18870:	pop	{r4, r5, r6, pc}
   18874:	ldr	r0, [r5, #12]
   18878:	mov	r2, r6
   1887c:	movw	r1, #2076	; 0x81c
   18880:	movt	r1, #4
   18884:	pop	{r4, r5, r6, lr}
   18888:	b	39804 <__assert_fail@plt+0x251ac>
   1888c:	mov	r0, r6
   18890:	mov	r1, #0
   18894:	mov	r2, #10
   18898:	bl	13a4c <strtol@plt>
   1889c:	b	18828 <__assert_fail@plt+0x41d0>
   188a0:	push	{r3, r4, r5, lr}
   188a4:	bl	144f0 <assuan_get_pointer@plt>
   188a8:	mov	r1, #0
   188ac:	mov	r2, #20
   188b0:	mov	r5, r1
   188b4:	mov	r4, r0
   188b8:	add	r0, r0, #100	; 0x64
   188bc:	bl	141cc <memset@plt>
   188c0:	ldr	r3, [r4, #4]
   188c4:	str	r5, [r4, #120]	; 0x78
   188c8:	str	r5, [r4, #92]	; 0x5c
   188cc:	ldr	r0, [r3, #12]
   188d0:	bl	13c44 <gcry_free@plt>
   188d4:	ldr	r3, [r4, #4]
   188d8:	mov	r0, r5
   188dc:	str	r5, [r3, #12]
   188e0:	pop	{r3, r4, r5, pc}
   188e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   188e8:	movw	r6, #47296	; 0xb8c0
   188ec:	movt	r6, #5
   188f0:	sub	sp, sp, #72	; 0x48
   188f4:	mov	r4, r1
   188f8:	mov	r9, r0
   188fc:	ldr	r3, [r6]
   18900:	str	r3, [sp, #68]	; 0x44
   18904:	bl	144f0 <assuan_get_pointer@plt>
   18908:	movw	r1, #15788	; 0x3dac
   1890c:	movt	r1, #4
   18910:	mov	r8, r0
   18914:	mov	r0, r4
   18918:	bl	13a28 <strcmp@plt>
   1891c:	cmp	r0, #0
   18920:	beq	18acc <__assert_fail@plt+0x4474>
   18924:	ldrb	r3, [r4]
   18928:	cmp	r3, #112	; 0x70
   1892c:	bne	18998 <__assert_fail@plt+0x4340>
   18930:	ldrb	r3, [r4, #1]
   18934:	cmp	r3, #105	; 0x69
   18938:	bne	18998 <__assert_fail@plt+0x4340>
   1893c:	ldrb	r3, [r4, #2]
   18940:	cmp	r3, #100	; 0x64
   18944:	bne	18998 <__assert_fail@plt+0x4340>
   18948:	ldrb	r3, [r4, #3]
   1894c:	cmp	r3, #0
   18950:	bne	18998 <__assert_fail@plt+0x4340>
   18954:	bl	14040 <getpid@plt>
   18958:	mov	r1, #50	; 0x32
   1895c:	mov	r2, #1
   18960:	mov	r3, r1
   18964:	str	r0, [sp, #4]
   18968:	movw	ip, #15796	; 0x3db4
   1896c:	add	r0, sp, #16
   18970:	movt	ip, #4
   18974:	str	ip, [sp]
   18978:	bl	1464c <__snprintf_chk@plt>
   1897c:	add	r0, sp, #16
   18980:	bl	14094 <strlen@plt>
   18984:	add	r1, sp, #16
   18988:	mov	r2, r0
   1898c:	mov	r0, r9
   18990:	bl	1413c <assuan_send_data@plt>
   18994:	b	18ae0 <__assert_fail@plt+0x4488>
   18998:	movw	r1, #29376	; 0x72c0
   1899c:	mov	r0, r4
   189a0:	movt	r1, #4
   189a4:	bl	13a28 <strcmp@plt>
   189a8:	cmp	r0, #0
   189ac:	beq	18af8 <__assert_fail@plt+0x44a0>
   189b0:	movw	r1, #15800	; 0x3db8
   189b4:	mov	r0, r4
   189b8:	movt	r1, #4
   189bc:	bl	13a28 <strcmp@plt>
   189c0:	cmp	r0, #0
   189c4:	beq	18b74 <__assert_fail@plt+0x451c>
   189c8:	movw	r1, #15816	; 0x3dc8
   189cc:	mov	r0, r4
   189d0:	movt	r1, #4
   189d4:	bl	13a28 <strcmp@plt>
   189d8:	cmp	r0, #0
   189dc:	beq	18bcc <__assert_fail@plt+0x4574>
   189e0:	movw	r1, #15828	; 0x3dd4
   189e4:	mov	r0, r4
   189e8:	movt	r1, #4
   189ec:	bl	13a28 <strcmp@plt>
   189f0:	cmp	r0, #0
   189f4:	beq	18be0 <__assert_fail@plt+0x4588>
   189f8:	movw	r1, #15840	; 0x3de0
   189fc:	mov	r0, r4
   18a00:	movt	r1, #4
   18a04:	bl	13a28 <strcmp@plt>
   18a08:	cmp	r0, #0
   18a0c:	beq	18b1c <__assert_fail@plt+0x44c4>
   18a10:	movw	r1, #15856	; 0x3df0
   18a14:	mov	r0, r4
   18a18:	movt	r1, #4
   18a1c:	bl	13a28 <strcmp@plt>
   18a20:	cmp	r0, #0
   18a24:	beq	18b1c <__assert_fail@plt+0x44c4>
   18a28:	movw	r1, #15880	; 0x3e08
   18a2c:	mov	r0, r4
   18a30:	movt	r1, #4
   18a34:	mov	r2, #14
   18a38:	bl	145bc <strncmp@plt>
   18a3c:	cmp	r0, #0
   18a40:	bne	18c74 <__assert_fail@plt+0x461c>
   18a44:	ldrb	r3, [r4, #14]
   18a48:	cmp	r3, #9
   18a4c:	beq	18a64 <__assert_fail@plt+0x440c>
   18a50:	tst	r3, #223	; 0xdf
   18a54:	bne	18c74 <__assert_fail@plt+0x461c>
   18a58:	cmp	r3, #32
   18a5c:	add	r0, r4, #14
   18a60:	bne	18a7c <__assert_fail@plt+0x4424>
   18a64:	add	r4, r4, #15
   18a68:	mov	r0, r4
   18a6c:	ldrb	r3, [r4], #1
   18a70:	cmp	r3, #32
   18a74:	cmpne	r3, #9
   18a78:	beq	18a68 <__assert_fail@plt+0x4410>
   18a7c:	cmp	r3, #0
   18a80:	beq	18ac0 <__assert_fail@plt+0x4468>
   18a84:	ldrb	r3, [r0]
   18a88:	cmp	r3, #0
   18a8c:	beq	18ac0 <__assert_fail@plt+0x4468>
   18a90:	cmp	r3, #32
   18a94:	cmpne	r3, #9
   18a98:	beq	18be8 <__assert_fail@plt+0x4590>
   18a9c:	add	r2, r0, #1
   18aa0:	b	18ab0 <__assert_fail@plt+0x4458>
   18aa4:	cmp	r3, #9
   18aa8:	cmpne	r3, #32
   18aac:	beq	18bec <__assert_fail@plt+0x4594>
   18ab0:	mov	ip, r2
   18ab4:	ldrb	r3, [r2], #1
   18ab8:	cmp	r3, #0
   18abc:	bne	18aa4 <__assert_fail@plt+0x444c>
   18ac0:	mov	r0, #128	; 0x80
   18ac4:	movt	r0, #1024	; 0x400
   18ac8:	b	18ae0 <__assert_fail@plt+0x4488>
   18acc:	movw	r1, #2416	; 0x970
   18ad0:	mov	r0, r9
   18ad4:	mov	r2, #6
   18ad8:	movt	r1, #4
   18adc:	bl	1413c <assuan_send_data@plt>
   18ae0:	ldr	r2, [sp, #68]	; 0x44
   18ae4:	ldr	r3, [r6]
   18ae8:	cmp	r2, r3
   18aec:	bne	18ca8 <__assert_fail@plt+0x4650>
   18af0:	add	sp, sp, #72	; 0x48
   18af4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   18af8:	bl	1821c <__assert_fail@plt+0x3bc4>
   18afc:	subs	r4, r0, #0
   18b00:	beq	18b80 <__assert_fail@plt+0x4528>
   18b04:	bl	14094 <strlen@plt>
   18b08:	mov	r1, r4
   18b0c:	mov	r2, r0
   18b10:	mov	r0, r9
   18b14:	bl	1413c <assuan_send_data@plt>
   18b18:	b	18ae0 <__assert_fail@plt+0x4488>
   18b1c:	add	r7, sp, #72	; 0x48
   18b20:	mov	r3, #0
   18b24:	movw	sl, #48116	; 0xbbf4
   18b28:	movt	sl, #5
   18b2c:	str	r3, [r7, #-60]!	; 0xffffffc4
   18b30:	b	18b58 <__assert_fail@plt+0x4500>
   18b34:	ldrb	r3, [r4, #5]
   18b38:	mov	r1, r5
   18b3c:	mov	r2, #0
   18b40:	cmp	r3, #116	; 0x74
   18b44:	ldreq	r0, [sl, #24]
   18b48:	ldrne	r0, [r8, #12]
   18b4c:	bl	3990c <__assert_fail@plt+0x252b4>
   18b50:	cmp	r0, #0
   18b54:	bne	18b8c <__assert_fail@plt+0x4534>
   18b58:	mov	r0, r7
   18b5c:	mov	r1, #0
   18b60:	bl	3965c <__assert_fail@plt+0x25004>
   18b64:	subs	r5, r0, #0
   18b68:	bne	18b34 <__assert_fail@plt+0x44dc>
   18b6c:	mov	r0, r5
   18b70:	b	18ae0 <__assert_fail@plt+0x4488>
   18b74:	bl	18240 <__assert_fail@plt+0x3be8>
   18b78:	subs	r4, r0, #0
   18b7c:	bne	18b04 <__assert_fail@plt+0x44ac>
   18b80:	mov	r0, #58	; 0x3a
   18b84:	movt	r0, #1024	; 0x400
   18b88:	b	18ae0 <__assert_fail@plt+0x4488>
   18b8c:	mov	r1, r5
   18b90:	mov	r2, r0
   18b94:	movw	r0, #15872	; 0x3e00
   18b98:	movt	r0, #4
   18b9c:	bl	2ed14 <__assert_fail@plt+0x1a6bc>
   18ba0:	subs	r5, r0, #0
   18ba4:	beq	18c90 <__assert_fail@plt+0x4638>
   18ba8:	bl	14094 <strlen@plt>
   18bac:	mov	r1, r5
   18bb0:	add	r2, r0, #1
   18bb4:	mov	r0, r9
   18bb8:	bl	1413c <assuan_send_data@plt>
   18bbc:	subs	r1, r0, #0
   18bc0:	beq	18c5c <__assert_fail@plt+0x4604>
   18bc4:	mov	r0, r1
   18bc8:	b	18ae0 <__assert_fail@plt+0x4488>
   18bcc:	bl	29e1c <__assert_fail@plt+0x157c4>
   18bd0:	cmp	r0, #0
   18bd4:	beq	18c54 <__assert_fail@plt+0x45fc>
   18bd8:	mov	r0, #0
   18bdc:	b	18ae0 <__assert_fail@plt+0x4488>
   18be0:	bl	24f90 <__assert_fail@plt+0x10938>
   18be4:	b	18958 <__assert_fail@plt+0x4300>
   18be8:	mov	ip, r0
   18bec:	ldrb	r3, [ip, #1]
   18bf0:	mov	r2, #0
   18bf4:	add	r4, ip, #1
   18bf8:	strb	r2, [ip]
   18bfc:	cmp	r3, #9
   18c00:	cmpne	r3, #32
   18c04:	bne	18c20 <__assert_fail@plt+0x45c8>
   18c08:	add	r2, ip, #2
   18c0c:	mov	r4, r2
   18c10:	ldrb	r3, [r2], #1
   18c14:	cmp	r3, #32
   18c18:	cmpne	r3, #9
   18c1c:	beq	18c0c <__assert_fail@plt+0x45b4>
   18c20:	cmp	r3, #0
   18c24:	beq	18ac0 <__assert_fail@plt+0x4468>
   18c28:	movw	r1, #15896	; 0x3e18
   18c2c:	movt	r1, #4
   18c30:	bl	13a28 <strcmp@plt>
   18c34:	cmp	r0, #0
   18c38:	bne	18c54 <__assert_fail@plt+0x45fc>
   18c3c:	mov	r0, r4
   18c40:	movw	r1, #15912	; 0x3e28
   18c44:	movt	r1, #4
   18c48:	bl	13a28 <strcmp@plt>
   18c4c:	cmp	r0, #0
   18c50:	beq	18bd8 <__assert_fail@plt+0x4580>
   18c54:	mov	r0, #67108865	; 0x4000001
   18c58:	b	18ae0 <__assert_fail@plt+0x4488>
   18c5c:	mov	r0, r9
   18c60:	mov	r2, r1
   18c64:	bl	1413c <assuan_send_data@plt>
   18c68:	cmp	r0, #0
   18c6c:	beq	18b58 <__assert_fail@plt+0x4500>
   18c70:	b	18ae0 <__assert_fail@plt+0x4488>
   18c74:	mov	r0, r9
   18c78:	mov	r1, #280	; 0x118
   18c7c:	movw	r2, #15920	; 0x3e30
   18c80:	movt	r1, #1024	; 0x400
   18c84:	movt	r2, #4
   18c88:	bl	142f8 <assuan_set_error@plt>
   18c8c:	b	18ae0 <__assert_fail@plt+0x4488>
   18c90:	bl	14580 <gpg_err_code_from_syserror@plt>
   18c94:	cmp	r0, #0
   18c98:	uxthne	r0, r0
   18c9c:	orrne	r0, r0, #67108864	; 0x4000000
   18ca0:	bne	18c68 <__assert_fail@plt+0x4610>
   18ca4:	b	18b58 <__assert_fail@plt+0x4500>
   18ca8:	bl	13cec <__stack_chk_fail@plt>
   18cac:	push	{r3, lr}
   18cb0:	bl	18264 <__assert_fail@plt+0x3c0c>
   18cb4:	mov	r0, #0
   18cb8:	pop	{r3, pc}
   18cbc:	push	{r4, r5, r6, r7, r8, lr}
   18cc0:	bl	144f0 <assuan_get_pointer@plt>
   18cc4:	mov	r8, r0
   18cc8:	bl	39698 <__assert_fail@plt+0x25040>
   18ccc:	subs	r7, r0, #0
   18cd0:	beq	18dd4 <__assert_fail@plt+0x477c>
   18cd4:	movw	r4, #2048	; 0x800
   18cd8:	movw	r6, #6836	; 0x1ab4
   18cdc:	movt	r4, #4
   18ce0:	movt	r6, #4
   18ce4:	mov	r5, #1
   18ce8:	b	18cfc <__assert_fail@plt+0x46a4>
   18cec:	ldr	r4, [r6, r5, lsl #2]
   18cf0:	add	r5, r5, #1
   18cf4:	cmp	r4, #0
   18cf8:	beq	18d48 <__assert_fail@plt+0x46f0>
   18cfc:	mov	r1, r4
   18d00:	ldr	r0, [r8, #12]
   18d04:	bl	39880 <__assert_fail@plt+0x25228>
   18d08:	mov	r1, r4
   18d0c:	subs	r2, r0, #0
   18d10:	mov	r0, r7
   18d14:	beq	18cec <__assert_fail@plt+0x4694>
   18d18:	bl	39804 <__assert_fail@plt+0x251ac>
   18d1c:	subs	r4, r0, #0
   18d20:	beq	18cec <__assert_fail@plt+0x4694>
   18d24:	mov	r6, #0
   18d28:	mov	r0, r7
   18d2c:	bl	396f8 <__assert_fail@plt+0x250a0>
   18d30:	mov	r0, r6
   18d34:	bl	13c44 <gcry_free@plt>
   18d38:	mov	r0, #0
   18d3c:	bl	13c44 <gcry_free@plt>
   18d40:	mov	r0, r4
   18d44:	pop	{r4, r5, r6, r7, r8, pc}
   18d48:	ldr	r0, [r8, #16]
   18d4c:	cmp	r0, #0
   18d50:	beq	18dbc <__assert_fail@plt+0x4764>
   18d54:	bl	13f2c <gcry_strdup@plt>
   18d58:	subs	r6, r0, #0
   18d5c:	beq	18db0 <__assert_fail@plt+0x4758>
   18d60:	ldr	r0, [r8, #20]
   18d64:	cmp	r0, #0
   18d68:	beq	18dcc <__assert_fail@plt+0x4774>
   18d6c:	bl	13f2c <gcry_strdup@plt>
   18d70:	subs	r8, r0, #0
   18d74:	beq	18dec <__assert_fail@plt+0x4794>
   18d78:	movw	r5, #48116	; 0xbbf4
   18d7c:	movt	r5, #5
   18d80:	mov	r4, #0
   18d84:	ldr	r0, [r5, #24]
   18d88:	bl	396f8 <__assert_fail@plt+0x250a0>
   18d8c:	ldr	r0, [r5, #28]
   18d90:	str	r7, [r5, #24]
   18d94:	bl	13c44 <gcry_free@plt>
   18d98:	ldr	r0, [r5, #32]
   18d9c:	str	r6, [r5, #28]
   18da0:	bl	13c44 <gcry_free@plt>
   18da4:	str	r8, [r5, #32]
   18da8:	mov	r0, r4
   18dac:	pop	{r4, r5, r6, r7, r8, pc}
   18db0:	bl	14580 <gpg_err_code_from_syserror@plt>
   18db4:	cmp	r0, #0
   18db8:	bne	18de0 <__assert_fail@plt+0x4788>
   18dbc:	ldr	r0, [r8, #20]
   18dc0:	mov	r6, #0
   18dc4:	cmp	r0, #0
   18dc8:	bne	18d6c <__assert_fail@plt+0x4714>
   18dcc:	mov	r8, #0
   18dd0:	b	18d78 <__assert_fail@plt+0x4720>
   18dd4:	bl	14580 <gpg_err_code_from_syserror@plt>
   18dd8:	cmp	r0, #0
   18ddc:	beq	18cd4 <__assert_fail@plt+0x467c>
   18de0:	uxth	r0, r0
   18de4:	orr	r4, r0, #67108864	; 0x4000000
   18de8:	b	18d24 <__assert_fail@plt+0x46cc>
   18dec:	bl	14580 <gpg_err_code_from_syserror@plt>
   18df0:	cmp	r0, #0
   18df4:	beq	18dcc <__assert_fail@plt+0x4774>
   18df8:	uxth	r0, r0
   18dfc:	orr	r4, r0, #67108864	; 0x4000000
   18e00:	b	18d28 <__assert_fail@plt+0x46d0>
   18e04:	push	{r4, r5, r6, lr}
   18e08:	mov	r4, r1
   18e0c:	ldrb	r3, [r1]
   18e10:	mov	r6, r0
   18e14:	cmp	r3, #32
   18e18:	bne	18e34 <__assert_fail@plt+0x47dc>
   18e1c:	add	r3, r1, #1
   18e20:	mov	r4, r3
   18e24:	add	r3, r3, #1
   18e28:	ldrb	r2, [r4]
   18e2c:	cmp	r2, #32
   18e30:	beq	18e20 <__assert_fail@plt+0x47c8>
   18e34:	mov	r1, #32
   18e38:	mov	r0, r4
   18e3c:	bl	140ac <strchr@plt>
   18e40:	subs	r1, r0, #0
   18e44:	beq	18e74 <__assert_fail@plt+0x481c>
   18e48:	ldrb	r3, [r1, #1]
   18e4c:	mov	r0, #0
   18e50:	add	r2, r1, #1
   18e54:	strb	r0, [r1]
   18e58:	cmp	r3, #32
   18e5c:	bne	18e6c <__assert_fail@plt+0x4814>
   18e60:	ldrb	r3, [r2, #1]!
   18e64:	cmp	r3, #32
   18e68:	beq	18e60 <__assert_fail@plt+0x4808>
   18e6c:	cmp	r3, #0
   18e70:	bne	18f20 <__assert_fail@plt+0x48c8>
   18e74:	ldrb	r3, [r4]
   18e78:	cmp	r3, #0
   18e7c:	beq	18ee8 <__assert_fail@plt+0x4890>
   18e80:	movw	r3, #47528	; 0xb9a8
   18e84:	movt	r3, #5
   18e88:	ldr	r5, [r3]
   18e8c:	cmp	r5, #0
   18e90:	bne	18eac <__assert_fail@plt+0x4854>
   18e94:	mov	r0, #58	; 0x3a
   18e98:	movt	r0, #1024	; 0x400
   18e9c:	pop	{r4, r5, r6, pc}
   18ea0:	ldr	r5, [r5]
   18ea4:	cmp	r5, #0
   18ea8:	beq	18e94 <__assert_fail@plt+0x483c>
   18eac:	add	r0, r5, #12
   18eb0:	mov	r1, r4
   18eb4:	bl	13a28 <strcmp@plt>
   18eb8:	cmp	r0, #0
   18ebc:	bne	18ea0 <__assert_fail@plt+0x4848>
   18ec0:	ldr	r1, [r5, #4]
   18ec4:	mov	r0, r6
   18ec8:	ldr	r2, [r5, #8]
   18ecc:	add	r1, r5, r1
   18ed0:	add	r1, r1, #12
   18ed4:	bl	1413c <assuan_send_data@plt>
   18ed8:	subs	r4, r0, #0
   18edc:	bne	18f04 <__assert_fail@plt+0x48ac>
   18ee0:	mov	r0, r4
   18ee4:	pop	{r4, r5, r6, pc}
   18ee8:	mov	r0, r6
   18eec:	mov	r1, #280	; 0x118
   18ef0:	movw	r2, #15964	; 0x3e5c
   18ef4:	movt	r1, #1024	; 0x400
   18ef8:	movt	r2, #4
   18efc:	pop	{r4, r5, r6, lr}
   18f00:	b	142f8 <assuan_set_error@plt>
   18f04:	bl	13a64 <gpg_strerror@plt>
   18f08:	mov	r1, r0
   18f0c:	movw	r0, #15980	; 0x3e6c
   18f10:	movt	r0, #4
   18f14:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   18f18:	mov	r0, r4
   18f1c:	pop	{r4, r5, r6, pc}
   18f20:	mov	r0, r6
   18f24:	mov	r1, #280	; 0x118
   18f28:	movw	r2, #15944	; 0x3e48
   18f2c:	movt	r1, #1024	; 0x400
   18f30:	movt	r2, #4
   18f34:	pop	{r4, r5, r6, lr}
   18f38:	b	142f8 <assuan_set_error@plt>
   18f3c:	push	{r4, r5, r6, lr}
   18f40:	mov	r4, r1
   18f44:	mov	r6, r0
   18f48:	bl	144f0 <assuan_get_pointer@plt>
   18f4c:	ldrb	r3, [r4]
   18f50:	cmp	r3, #32
   18f54:	mov	r5, r0
   18f58:	bne	18f74 <__assert_fail@plt+0x491c>
   18f5c:	add	r3, r4, #1
   18f60:	mov	r4, r3
   18f64:	add	r3, r3, #1
   18f68:	ldrb	r2, [r4]
   18f6c:	cmp	r2, #32
   18f70:	beq	18f60 <__assert_fail@plt+0x4908>
   18f74:	mov	r1, #32
   18f78:	mov	r0, r4
   18f7c:	bl	140ac <strchr@plt>
   18f80:	cmp	r0, #0
   18f84:	movne	r2, #0
   18f88:	strbne	r2, [r0]
   18f8c:	ldrb	r3, [r4]
   18f90:	cmp	r3, #0
   18f94:	addne	r2, r4, #1
   18f98:	movne	r1, #32
   18f9c:	beq	18fe8 <__assert_fail@plt+0x4990>
   18fa0:	cmp	r3, #43	; 0x2b
   18fa4:	strbeq	r1, [r2, #-1]
   18fa8:	ldrb	r3, [r2], #1
   18fac:	cmp	r3, #0
   18fb0:	bne	18fa0 <__assert_fail@plt+0x4948>
   18fb4:	ldr	r3, [r5, #4]
   18fb8:	ldr	r0, [r3, #12]
   18fbc:	bl	13c44 <gcry_free@plt>
   18fc0:	mov	r0, r4
   18fc4:	ldr	r4, [r5, #4]
   18fc8:	bl	13f2c <gcry_strdup@plt>
   18fcc:	ldr	r3, [r5, #4]
   18fd0:	str	r0, [r4, #12]
   18fd4:	ldr	r3, [r3, #12]
   18fd8:	cmp	r3, #0
   18fdc:	beq	19004 <__assert_fail@plt+0x49ac>
   18fe0:	mov	r0, #0
   18fe4:	pop	{r4, r5, r6, pc}
   18fe8:	mov	r0, r6
   18fec:	mov	r1, #280	; 0x118
   18ff0:	movw	r2, #16008	; 0x3e88
   18ff4:	movt	r1, #1024	; 0x400
   18ff8:	movt	r2, #4
   18ffc:	pop	{r4, r5, r6, lr}
   19000:	b	142f8 <assuan_set_error@plt>
   19004:	bl	14580 <gpg_err_code_from_syserror@plt>
   19008:	cmp	r0, #0
   1900c:	beq	18fe0 <__assert_fail@plt+0x4988>
   19010:	uxth	r0, r0
   19014:	orr	r0, r0, #67108864	; 0x4000000
   19018:	pop	{r4, r5, r6, pc}
   1901c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   19020:	mov	r4, r1
   19024:	ldrb	r3, [r1]
   19028:	mov	r5, r0
   1902c:	cmp	r3, #32
   19030:	bne	1904c <__assert_fail@plt+0x49f4>
   19034:	add	r3, r1, #1
   19038:	mov	r4, r3
   1903c:	add	r3, r3, #1
   19040:	ldrb	r2, [r4]
   19044:	cmp	r2, #32
   19048:	beq	19038 <__assert_fail@plt+0x49e0>
   1904c:	mov	r0, r4
   19050:	mov	r1, #32
   19054:	bl	140ac <strchr@plt>
   19058:	cmp	r0, #0
   1905c:	beq	19094 <__assert_fail@plt+0x4a3c>
   19060:	ldrb	r2, [r0, #1]
   19064:	mov	r1, #0
   19068:	add	r6, r0, #1
   1906c:	strb	r1, [r0]
   19070:	cmp	r2, #32
   19074:	bne	1908c <__assert_fail@plt+0x4a34>
   19078:	add	r3, r0, #2
   1907c:	mov	r6, r3
   19080:	ldrb	r2, [r3], #1
   19084:	cmp	r2, #32
   19088:	beq	1907c <__assert_fail@plt+0x4a24>
   1908c:	cmp	r2, #0
   19090:	bne	19114 <__assert_fail@plt+0x4abc>
   19094:	ldrb	r3, [r4]
   19098:	mov	r9, #0
   1909c:	mov	r6, r9
   190a0:	cmp	r3, #0
   190a4:	beq	19148 <__assert_fail@plt+0x4af0>
   190a8:	movw	r8, #47528	; 0xb9a8
   190ac:	movt	r8, #5
   190b0:	ldr	r5, [r8]
   190b4:	cmp	r5, #0
   190b8:	beq	19104 <__assert_fail@plt+0x4aac>
   190bc:	mov	r7, #0
   190c0:	b	190d8 <__assert_fail@plt+0x4a80>
   190c4:	ldr	r3, [r5]
   190c8:	mov	r7, r5
   190cc:	cmp	r3, #0
   190d0:	mov	r5, r3
   190d4:	beq	19104 <__assert_fail@plt+0x4aac>
   190d8:	add	r0, r5, #12
   190dc:	mov	r1, r4
   190e0:	bl	13a28 <strcmp@plt>
   190e4:	cmp	r0, #0
   190e8:	bne	190c4 <__assert_fail@plt+0x4a6c>
   190ec:	cmp	r7, #0
   190f0:	beq	191cc <__assert_fail@plt+0x4b74>
   190f4:	ldr	r3, [r5]
   190f8:	str	r3, [r7]
   190fc:	mov	r0, r5
   19100:	bl	13c44 <gcry_free@plt>
   19104:	cmp	r9, #0
   19108:	bne	19164 <__assert_fail@plt+0x4b0c>
   1910c:	mov	r0, #0
   19110:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   19114:	mov	r1, #32
   19118:	mov	r0, r6
   1911c:	bl	140ac <strchr@plt>
   19120:	mov	r1, #0
   19124:	cmp	r0, #0
   19128:	movne	r3, #0
   1912c:	strbne	r3, [r0]
   19130:	mov	r0, r6
   19134:	bl	2e8a0 <__assert_fail@plt+0x1a248>
   19138:	ldrb	r3, [r4]
   1913c:	cmp	r3, #0
   19140:	mov	r9, r0
   19144:	bne	190a8 <__assert_fail@plt+0x4a50>
   19148:	mov	r0, r5
   1914c:	mov	r1, #280	; 0x118
   19150:	movw	r2, #15964	; 0x3e5c
   19154:	movt	r1, #1024	; 0x400
   19158:	movt	r2, #4
   1915c:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   19160:	b	142f8 <assuan_set_error@plt>
   19164:	mov	r0, r4
   19168:	bl	14094 <strlen@plt>
   1916c:	add	r3, r9, #16
   19170:	add	r0, r3, r0
   19174:	bl	139c8 <gcry_malloc@plt>
   19178:	subs	r5, r0, #0
   1917c:	beq	191d8 <__assert_fail@plt+0x4b80>
   19180:	str	r9, [r5, #8]
   19184:	mov	r0, r4
   19188:	bl	14094 <strlen@plt>
   1918c:	mov	r1, r4
   19190:	add	r3, r0, #1
   19194:	add	r0, r5, #12
   19198:	str	r3, [r5, #4]
   1919c:	bl	13e78 <strcpy@plt>
   191a0:	ldr	r0, [r5, #4]
   191a4:	mov	r1, r6
   191a8:	mov	r2, r9
   191ac:	add	r0, r5, r0
   191b0:	add	r0, r0, #12
   191b4:	bl	13ba8 <memcpy@plt>
   191b8:	ldr	r3, [r8]
   191bc:	mov	r0, #0
   191c0:	str	r5, [r8]
   191c4:	str	r3, [r5]
   191c8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   191cc:	ldr	r3, [r5]
   191d0:	str	r3, [r8]
   191d4:	b	190fc <__assert_fail@plt+0x4aa4>
   191d8:	bl	14580 <gpg_err_code_from_syserror@plt>
   191dc:	cmp	r0, #0
   191e0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   191e4:	uxth	r0, r0
   191e8:	orr	r4, r0, #67108864	; 0x4000000
   191ec:	mov	r0, r4
   191f0:	bl	13a64 <gpg_strerror@plt>
   191f4:	mov	r1, r0
   191f8:	movw	r0, #16032	; 0x3ea0
   191fc:	movt	r0, #4
   19200:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   19204:	mov	r0, r4
   19208:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1920c:	push	{r3, r4, r5, lr}
   19210:	mov	r5, r1
   19214:	mov	r4, r0
   19218:	bl	144f0 <assuan_get_pointer@plt>
   1921c:	mov	r1, r5
   19220:	mov	r2, r4
   19224:	pop	{r3, r4, r5, lr}
   19228:	b	28e90 <__assert_fail@plt+0x14838>
   1922c:	push	{r4, r5, r6, lr}
   19230:	mov	r5, r0
   19234:	mov	r0, r1
   19238:	mov	r4, r1
   1923c:	bl	14094 <strlen@plt>
   19240:	mov	r1, r4
   19244:	mov	r6, r0
   19248:	mov	r0, r5
   1924c:	bl	13998 <strstr@plt>
   19250:	subs	r2, r0, #0
   19254:	beq	1929c <__assert_fail@plt+0x4c44>
   19258:	cmp	r2, r5
   1925c:	beq	19278 <__assert_fail@plt+0x4c20>
   19260:	ldrb	r3, [r2, #-1]
   19264:	cmp	r3, #32
   19268:	cmpne	r3, #9
   1926c:	movne	r0, #0
   19270:	moveq	r0, #1
   19274:	popne	{r4, r5, r6, pc}
   19278:	ldrb	r0, [r2, r6]
   1927c:	tst	r0, #223	; 0xdf
   19280:	beq	19294 <__assert_fail@plt+0x4c3c>
   19284:	subs	r3, r0, #9
   19288:	rsbs	r0, r3, #0
   1928c:	adcs	r0, r0, r3
   19290:	pop	{r4, r5, r6, pc}
   19294:	mov	r0, #1
   19298:	pop	{r4, r5, r6, pc}
   1929c:	mov	r0, r2
   192a0:	pop	{r4, r5, r6, pc}
   192a4:	push	{r4, r5, r6, lr}
   192a8:	mov	r6, r1
   192ac:	mov	r5, r0
   192b0:	bl	144f0 <assuan_get_pointer@plt>
   192b4:	movw	r1, #16060	; 0x3ebc
   192b8:	movt	r1, #4
   192bc:	mov	r4, r0
   192c0:	mov	r0, r6
   192c4:	bl	1922c <__assert_fail@plt+0x4bd4>
   192c8:	cmp	r0, #0
   192cc:	mov	r0, r4
   192d0:	movne	r1, r5
   192d4:	moveq	r1, #0
   192d8:	bl	2b180 <__assert_fail@plt+0x16b28>
   192dc:	subs	r4, r0, #0
   192e0:	beq	192f8 <__assert_fail@plt+0x4ca0>
   192e4:	bl	13a64 <gpg_strerror@plt>
   192e8:	mov	r1, r0
   192ec:	movw	r0, #16068	; 0x3ec4
   192f0:	movt	r0, #4
   192f4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   192f8:	mov	r0, r4
   192fc:	pop	{r4, r5, r6, pc}
   19300:	push	{r4, r5, r6, lr}
   19304:	mov	r5, r0
   19308:	mov	r0, r1
   1930c:	mov	r4, r1
   19310:	bl	14094 <strlen@plt>
   19314:	mov	r1, r4
   19318:	mov	r6, r0
   1931c:	mov	r0, r5
   19320:	bl	13998 <strstr@plt>
   19324:	subs	r2, r0, #0
   19328:	beq	19378 <__assert_fail@plt+0x4d20>
   1932c:	cmp	r2, r5
   19330:	beq	1934c <__assert_fail@plt+0x4cf4>
   19334:	ldrb	r3, [r2, #-1]
   19338:	cmp	r3, #32
   1933c:	cmpne	r3, #9
   19340:	movne	r0, #0
   19344:	moveq	r0, #1
   19348:	popne	{r4, r5, r6, pc}
   1934c:	ldrb	r0, [r2, r6]
   19350:	tst	r0, #223	; 0xdf
   19354:	beq	19370 <__assert_fail@plt+0x4d18>
   19358:	cmp	r0, #9
   1935c:	beq	19370 <__assert_fail@plt+0x4d18>
   19360:	subs	r3, r0, #61	; 0x3d
   19364:	rsbs	r0, r3, #0
   19368:	adcs	r0, r0, r3
   1936c:	pop	{r4, r5, r6, pc}
   19370:	mov	r0, #1
   19374:	pop	{r4, r5, r6, pc}
   19378:	mov	r0, r2
   1937c:	pop	{r4, r5, r6, pc}
   19380:	push	{r4, lr}
   19384:	bl	27ba4 <__assert_fail@plt+0x1354c>
   19388:	subs	r4, r0, #0
   1938c:	beq	193a4 <__assert_fail@plt+0x4d4c>
   19390:	bl	13a64 <gpg_strerror@plt>
   19394:	mov	r1, r0
   19398:	movw	r0, #16096	; 0x3ee0
   1939c:	movt	r0, #4
   193a0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   193a4:	mov	r0, r4
   193a8:	pop	{r4, pc}
   193ac:	push	{r4, r5, r6, lr}
   193b0:	sub	sp, sp, #8
   193b4:	mov	r4, r1
   193b8:	mov	r6, r0
   193bc:	bl	144f0 <assuan_get_pointer@plt>
   193c0:	ldrb	r3, [r4]
   193c4:	cmp	r3, #32
   193c8:	mov	r5, r0
   193cc:	bne	193e8 <__assert_fail@plt+0x4d90>
   193d0:	add	r3, r4, #1
   193d4:	mov	r4, r3
   193d8:	add	r3, r3, #1
   193dc:	ldrb	r2, [r4]
   193e0:	cmp	r2, #32
   193e4:	beq	193d4 <__assert_fail@plt+0x4d7c>
   193e8:	mov	r0, r4
   193ec:	mov	r1, #32
   193f0:	bl	140ac <strchr@plt>
   193f4:	cmp	r0, #0
   193f8:	movne	r2, #0
   193fc:	strbne	r2, [r0]
   19400:	ldrb	r3, [r4]
   19404:	cmp	r3, #0
   19408:	beq	19470 <__assert_fail@plt+0x4e18>
   1940c:	cmp	r3, #88	; 0x58
   19410:	beq	1945c <__assert_fail@plt+0x4e04>
   19414:	add	r2, r4, #1
   19418:	mov	r1, #32
   1941c:	cmp	r3, #43	; 0x2b
   19420:	strbeq	r1, [r2, #-1]
   19424:	ldrb	r3, [r2], #1
   19428:	cmp	r3, #0
   1942c:	bne	1941c <__assert_fail@plt+0x4dc4>
   19430:	mov	r3, #0
   19434:	mov	r1, r4
   19438:	mov	r0, r5
   1943c:	mov	r2, r3
   19440:	str	r3, [sp]
   19444:	bl	2116c <__assert_fail@plt+0xcb14>
   19448:	subs	r4, r0, #0
   1944c:	bne	19490 <__assert_fail@plt+0x4e38>
   19450:	mov	r0, r4
   19454:	add	sp, sp, #8
   19458:	pop	{r4, r5, r6, pc}
   1945c:	ldrb	r2, [r4, #1]
   19460:	cmp	r2, #0
   19464:	moveq	r4, r2
   19468:	beq	19430 <__assert_fail@plt+0x4dd8>
   1946c:	b	19414 <__assert_fail@plt+0x4dbc>
   19470:	mov	r0, r6
   19474:	mov	r1, #280	; 0x118
   19478:	movw	r2, #16008	; 0x3e88
   1947c:	movt	r1, #1024	; 0x400
   19480:	movt	r2, #4
   19484:	add	sp, sp, #8
   19488:	pop	{r4, r5, r6, lr}
   1948c:	b	142f8 <assuan_set_error@plt>
   19490:	bl	13a64 <gpg_strerror@plt>
   19494:	mov	r1, r0
   19498:	movw	r0, #16128	; 0x3f00
   1949c:	movt	r0, #4
   194a0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   194a4:	mov	r0, r4
   194a8:	add	sp, sp, #8
   194ac:	pop	{r4, r5, r6, pc}
   194b0:	push	{r3, r4, r5, lr}
   194b4:	mov	r4, r1
   194b8:	ldrb	r3, [r1]
   194bc:	mov	r5, r0
   194c0:	cmp	r3, #32
   194c4:	bne	194e0 <__assert_fail@plt+0x4e88>
   194c8:	add	r3, r1, #1
   194cc:	mov	r4, r3
   194d0:	add	r3, r3, #1
   194d4:	ldrb	r2, [r4]
   194d8:	cmp	r2, #32
   194dc:	beq	194cc <__assert_fail@plt+0x4e74>
   194e0:	mov	r0, r4
   194e4:	mov	r1, #32
   194e8:	bl	140ac <strchr@plt>
   194ec:	cmp	r0, #0
   194f0:	movne	r2, #0
   194f4:	strbne	r2, [r0]
   194f8:	ldrb	r3, [r4]
   194fc:	cmp	r3, #0
   19500:	beq	19514 <__assert_fail@plt+0x4ebc>
   19504:	mov	r0, r4
   19508:	bl	14094 <strlen@plt>
   1950c:	cmp	r0, #50	; 0x32
   19510:	bls	19530 <__assert_fail@plt+0x4ed8>
   19514:	mov	r0, r5
   19518:	mov	r1, #280	; 0x118
   1951c:	movw	r2, #16168	; 0x3f28
   19520:	movt	r1, #1024	; 0x400
   19524:	movt	r2, #4
   19528:	pop	{r3, r4, r5, lr}
   1952c:	b	142f8 <assuan_set_error@plt>
   19530:	mov	r2, #0
   19534:	mov	r0, r4
   19538:	mov	r3, r2
   1953c:	mov	r1, #3
   19540:	bl	21bb4 <__assert_fail@plt+0xd55c>
   19544:	mov	r0, #0
   19548:	pop	{r3, r4, r5, pc}
   1954c:	push	{r4, r5, lr}
   19550:	movw	r4, #47296	; 0xb8c0
   19554:	movt	r4, #5
   19558:	sub	sp, sp, #12
   1955c:	ldr	r3, [r4]
   19560:	mov	r1, sp
   19564:	str	r3, [sp, #4]
   19568:	bl	2eecc <__assert_fail@plt+0x1a874>
   1956c:	subs	r5, r0, #0
   19570:	beq	19588 <__assert_fail@plt+0x4f30>
   19574:	mov	r1, #0
   19578:	ldr	r2, [sp]
   1957c:	bl	141cc <memset@plt>
   19580:	mov	r0, r5
   19584:	bl	13c44 <gcry_free@plt>
   19588:	ldr	r2, [sp, #4]
   1958c:	ldr	r3, [r4]
   19590:	cmp	r2, r3
   19594:	bne	195a0 <__assert_fail@plt+0x4f48>
   19598:	add	sp, sp, #12
   1959c:	pop	{r4, r5, pc}
   195a0:	bl	13cec <__stack_chk_fail@plt>
   195a4:	push	{r4, lr}
   195a8:	mov	r4, r0
   195ac:	bl	144f0 <assuan_get_pointer@plt>
   195b0:	movw	r3, #48116	; 0xbbf4
   195b4:	movt	r3, #5
   195b8:	ldr	r3, [r3, #36]	; 0x24
   195bc:	cmp	r3, #0
   195c0:	beq	195dc <__assert_fail@plt+0x4f84>
   195c4:	ldr	r3, [r0, #4]
   195c8:	mov	r2, #1
   195cc:	movw	r0, #16383	; 0x3fff
   195d0:	movt	r0, #1024	; 0x400
   195d4:	str	r2, [r3, #20]
   195d8:	pop	{r4, pc}
   195dc:	mov	r0, r4
   195e0:	mov	r1, #60	; 0x3c
   195e4:	movw	r2, #16196	; 0x3f44
   195e8:	movt	r1, #1024	; 0x400
   195ec:	movt	r2, #4
   195f0:	pop	{r4, lr}
   195f4:	b	142f8 <assuan_set_error@plt>
   195f8:	push	{r4, r5, r6, r7, lr}
   195fc:	movw	r5, #47296	; 0xb8c0
   19600:	movt	r5, #5
   19604:	sub	sp, sp, #52	; 0x34
   19608:	mov	r7, r1
   1960c:	mov	r4, r0
   19610:	ldr	r3, [r5]
   19614:	str	r3, [sp, #44]	; 0x2c
   19618:	bl	144f0 <assuan_get_pointer@plt>
   1961c:	mov	r3, #0
   19620:	mov	r6, r0
   19624:	ldrb	ip, [r7, r3]
   19628:	bic	lr, ip, #32
   1962c:	sub	r2, ip, #48	; 0x30
   19630:	sub	lr, lr, #65	; 0x41
   19634:	cmp	r2, #9
   19638:	cmphi	lr, #5
   1963c:	bls	1978c <__assert_fail@plt+0x5134>
   19640:	cmp	ip, #9
   19644:	cmpne	ip, #32
   19648:	moveq	ip, #0
   1964c:	movne	ip, #1
   19650:	bne	1975c <__assert_fail@plt+0x5104>
   19654:	bic	r2, r3, #8
   19658:	cmp	r2, #32
   1965c:	bne	1975c <__assert_fail@plt+0x5104>
   19660:	cmp	r3, #32
   19664:	movweq	r3, #16244	; 0x3f74
   19668:	movteq	r3, #4
   1966c:	moveq	lr, sp
   19670:	moveq	ip, #8
   19674:	ldmeq	r3, {r0, r1, r2}
   19678:	moveq	r3, sp
   1967c:	movne	lr, sp
   19680:	stmiaeq	r3!, {r0, r1}
   19684:	mov	r1, r7
   19688:	strbeq	r2, [r3]
   1968c:	ldrb	r3, [r1], #1
   19690:	cmp	r3, #96	; 0x60
   19694:	andhi	r3, r3, #223	; 0xdf
   19698:	strb	r3, [lr, ip]
   1969c:	add	ip, ip, #1
   196a0:	mov	r0, r1
   196a4:	cmp	ip, #39	; 0x27
   196a8:	ble	1968c <__assert_fail@plt+0x5034>
   196ac:	ldrb	r3, [r1]
   196b0:	add	r2, sp, #48	; 0x30
   196b4:	add	ip, r2, ip
   196b8:	mov	r2, #0
   196bc:	cmp	r3, #32
   196c0:	cmpne	r3, #9
   196c4:	strb	r2, [ip, #-48]	; 0xffffffd0
   196c8:	bne	196e4 <__assert_fail@plt+0x508c>
   196cc:	add	r1, r1, #1
   196d0:	mov	r0, r1
   196d4:	ldrb	r3, [r1], #1
   196d8:	cmp	r3, #32
   196dc:	cmpne	r3, #9
   196e0:	beq	196d0 <__assert_fail@plt+0x5078>
   196e4:	cmp	r3, #80	; 0x50
   196e8:	cmpne	r3, #83	; 0x53
   196ec:	bne	19794 <__assert_fail@plt+0x513c>
   196f0:	ldrb	r2, [r0, #1]
   196f4:	cmp	r2, #9
   196f8:	cmpne	r2, #32
   196fc:	bne	19794 <__assert_fail@plt+0x513c>
   19700:	cmp	r2, #9
   19704:	cmpne	r2, #32
   19708:	add	r1, r0, #1
   1970c:	addeq	r0, r0, #2
   19710:	bne	19728 <__assert_fail@plt+0x50d0>
   19714:	mov	r1, r0
   19718:	ldrb	r2, [r0], #1
   1971c:	cmp	r2, #32
   19720:	cmpne	r2, #9
   19724:	beq	19714 <__assert_fail@plt+0x50bc>
   19728:	mov	r0, r6
   1972c:	mov	r2, sp
   19730:	bl	27d10 <__assert_fail@plt+0x136b8>
   19734:	subs	r4, r0, #0
   19738:	moveq	r0, r4
   1973c:	beq	19774 <__assert_fail@plt+0x511c>
   19740:	bl	13a64 <gpg_strerror@plt>
   19744:	mov	r1, r0
   19748:	movw	r0, #16288	; 0x3fa0
   1974c:	movt	r0, #4
   19750:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   19754:	mov	r0, r4
   19758:	b	19774 <__assert_fail@plt+0x511c>
   1975c:	mov	r1, #280	; 0x118
   19760:	movw	r2, #16224	; 0x3f60
   19764:	mov	r0, r4
   19768:	movt	r1, #1024	; 0x400
   1976c:	movt	r2, #4
   19770:	bl	142f8 <assuan_set_error@plt>
   19774:	ldr	r2, [sp, #44]	; 0x2c
   19778:	ldr	r3, [r5]
   1977c:	cmp	r2, r3
   19780:	bne	197b0 <__assert_fail@plt+0x5158>
   19784:	add	sp, sp, #52	; 0x34
   19788:	pop	{r4, r5, r6, r7, pc}
   1978c:	add	r3, r3, #1
   19790:	b	19624 <__assert_fail@plt+0x4fcc>
   19794:	mov	r0, r4
   19798:	mov	r1, #280	; 0x118
   1979c:	movw	r2, #16256	; 0x3f80
   197a0:	movt	r1, #1024	; 0x400
   197a4:	movt	r2, #4
   197a8:	bl	142f8 <assuan_set_error@plt>
   197ac:	b	19774 <__assert_fail@plt+0x511c>
   197b0:	bl	13cec <__stack_chk_fail@plt>
   197b4:	push	{r4, r5, r6, r7, lr}
   197b8:	movw	r4, #47296	; 0xb8c0
   197bc:	movt	r4, #5
   197c0:	sub	sp, sp, #52	; 0x34
   197c4:	mov	r7, r1
   197c8:	mov	r5, r0
   197cc:	ldr	r3, [r4]
   197d0:	str	r3, [sp, #44]	; 0x2c
   197d4:	bl	144f0 <assuan_get_pointer@plt>
   197d8:	mov	r2, #0
   197dc:	mov	r6, r0
   197e0:	ldrb	r3, [r7, r2]
   197e4:	bic	lr, r3, #32
   197e8:	sub	ip, r3, #48	; 0x30
   197ec:	sub	lr, lr, #65	; 0x41
   197f0:	cmp	ip, #9
   197f4:	cmphi	lr, #5
   197f8:	bls	198dc <__assert_fail@plt+0x5284>
   197fc:	cmp	r3, #0
   19800:	bne	198ac <__assert_fail@plt+0x5254>
   19804:	bic	r1, r2, #8
   19808:	cmp	r1, #32
   1980c:	bne	198ac <__assert_fail@plt+0x5254>
   19810:	cmp	r2, #32
   19814:	movweq	r2, #16244	; 0x3f74
   19818:	movteq	r2, #4
   1981c:	moveq	r3, #8
   19820:	rsb	r7, r3, r7
   19824:	ldmeq	r2, {r0, r1, r2}
   19828:	moveq	lr, sp
   1982c:	moveq	ip, sp
   19830:	movne	ip, sp
   19834:	stmiaeq	lr!, {r0, r1}
   19838:	strbeq	r2, [lr]
   1983c:	ldrb	r2, [r7, r3]
   19840:	cmp	r2, #96	; 0x60
   19844:	andhi	r2, r2, #223	; 0xdf
   19848:	strb	r2, [ip, r3]
   1984c:	add	r3, r3, #1
   19850:	cmp	r3, #39	; 0x27
   19854:	ble	1983c <__assert_fail@plt+0x51e4>
   19858:	add	r2, sp, #48	; 0x30
   1985c:	mov	lr, #0
   19860:	add	r3, r2, r3
   19864:	mov	r0, r6
   19868:	mov	r1, sp
   1986c:	mov	r2, lr
   19870:	strb	lr, [r3, #-48]	; 0xffffffd0
   19874:	bl	27a1c <__assert_fail@plt+0x133c4>
   19878:	subs	r5, r0, #0
   1987c:	beq	198e4 <__assert_fail@plt+0x528c>
   19880:	uxth	r3, r5
   19884:	cmp	r3, #98	; 0x62
   19888:	beq	198e4 <__assert_fail@plt+0x528c>
   1988c:	cmn	r5, #1
   19890:	beq	198a0 <__assert_fail@plt+0x5248>
   19894:	movw	r2, #16383	; 0x3fff
   19898:	cmp	r3, r2
   1989c:	bne	198ec <__assert_fail@plt+0x5294>
   198a0:	mov	r0, #98	; 0x62
   198a4:	movt	r0, #1024	; 0x400
   198a8:	b	198c4 <__assert_fail@plt+0x526c>
   198ac:	mov	r1, #280	; 0x118
   198b0:	movw	r2, #16224	; 0x3f60
   198b4:	mov	r0, r5
   198b8:	movt	r1, #1024	; 0x400
   198bc:	movt	r2, #4
   198c0:	bl	142f8 <assuan_set_error@plt>
   198c4:	ldr	r2, [sp, #44]	; 0x2c
   198c8:	ldr	r3, [r4]
   198cc:	cmp	r2, r3
   198d0:	bne	19908 <__assert_fail@plt+0x52b0>
   198d4:	add	sp, sp, #52	; 0x34
   198d8:	pop	{r4, r5, r6, r7, pc}
   198dc:	add	r2, r2, #1
   198e0:	b	197e0 <__assert_fail@plt+0x5188>
   198e4:	mov	r0, r5
   198e8:	b	198c4 <__assert_fail@plt+0x526c>
   198ec:	bl	13a64 <gpg_strerror@plt>
   198f0:	mov	r1, r0
   198f4:	movw	r0, #16320	; 0x3fc0
   198f8:	movt	r0, #4
   198fc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   19900:	mov	r0, r5
   19904:	b	198c4 <__assert_fail@plt+0x526c>
   19908:	bl	13cec <__stack_chk_fail@plt>
   1990c:	push	{r3, r4, r5, r6, r7, lr}
   19910:	mov	r4, r2
   19914:	mov	r6, r1
   19918:	mov	r7, r0
   1991c:	bl	13dac <assuan_begin_confidential@plt>
   19920:	mov	r0, r4
   19924:	bl	14094 <strlen@plt>
   19928:	cmp	r6, #0
   1992c:	mov	r5, r0
   19930:	bne	19978 <__assert_fail@plt+0x5320>
   19934:	lsl	r0, r0, #1
   19938:	add	r0, r0, #1
   1993c:	bl	13f44 <gcry_malloc_secure@plt>
   19940:	subs	r6, r0, #0
   19944:	beq	1998c <__assert_fail@plt+0x5334>
   19948:	mov	r0, r4
   1994c:	mov	r1, r5
   19950:	mov	r2, r6
   19954:	bl	2e26c <__assert_fail@plt+0x19c14>
   19958:	mov	r0, r7
   1995c:	mov	r1, r6
   19960:	bl	13e54 <assuan_set_okay_line@plt>
   19964:	mov	r4, r0
   19968:	mov	r0, r6
   1996c:	bl	13c44 <gcry_free@plt>
   19970:	mov	r0, r4
   19974:	pop	{r3, r4, r5, r6, r7, pc}
   19978:	mov	r0, r7
   1997c:	mov	r1, r4
   19980:	mov	r2, r5
   19984:	pop	{r3, r4, r5, r6, r7, lr}
   19988:	b	1413c <assuan_send_data@plt>
   1998c:	bl	14580 <gpg_err_code_from_syserror@plt>
   19990:	cmp	r0, #0
   19994:	uxthne	r4, r0
   19998:	orrne	r4, r4, #67108864	; 0x4000000
   1999c:	moveq	r4, r0
   199a0:	b	19970 <__assert_fail@plt+0x5318>
   199a4:	push	{r4, r5, r6, lr}
   199a8:	movw	r4, #47296	; 0xb8c0
   199ac:	movt	r4, #5
   199b0:	sub	sp, sp, #8
   199b4:	mov	r6, r0
   199b8:	mov	r0, r1
   199bc:	ldr	r3, [r4]
   199c0:	mov	r1, sp
   199c4:	str	r3, [sp, #4]
   199c8:	bl	2eecc <__assert_fail@plt+0x1a874>
   199cc:	subs	r5, r0, #0
   199d0:	beq	19a1c <__assert_fail@plt+0x53c4>
   199d4:	mov	r0, r6
   199d8:	mov	r1, r5
   199dc:	ldr	r2, [sp]
   199e0:	bl	1413c <assuan_send_data@plt>
   199e4:	mov	r1, #0
   199e8:	ldr	r2, [sp]
   199ec:	mov	r6, r0
   199f0:	mov	r0, r5
   199f4:	bl	141cc <memset@plt>
   199f8:	mov	r0, r5
   199fc:	bl	13c44 <gcry_free@plt>
   19a00:	mov	r0, r6
   19a04:	ldr	r2, [sp, #4]
   19a08:	ldr	r3, [r4]
   19a0c:	cmp	r2, r3
   19a10:	bne	19a30 <__assert_fail@plt+0x53d8>
   19a14:	add	sp, sp, #8
   19a18:	pop	{r4, r5, r6, pc}
   19a1c:	bl	14580 <gpg_err_code_from_syserror@plt>
   19a20:	cmp	r0, #0
   19a24:	uxthne	r0, r0
   19a28:	orrne	r0, r0, #67108864	; 0x4000000
   19a2c:	b	19a04 <__assert_fail@plt+0x53ac>
   19a30:	bl	13cec <__stack_chk_fail@plt>
   19a34:	push	{r4, r5, r6, lr}
   19a38:	movw	r4, #47296	; 0xb8c0
   19a3c:	movt	r4, #5
   19a40:	sub	sp, sp, #40	; 0x28
   19a44:	mov	r5, r0
   19a48:	ldr	r3, [r4]
   19a4c:	str	r3, [sp, #36]	; 0x24
   19a50:	bl	144f0 <assuan_get_pointer@plt>
   19a54:	mov	r3, #1024	; 0x400
   19a58:	movw	r1, #16352	; 0x3fe0
   19a5c:	str	r3, [sp]
   19a60:	movt	r1, #4
   19a64:	add	r2, sp, #12
   19a68:	add	r3, sp, #16
   19a6c:	mov	r6, r0
   19a70:	mov	r0, r5
   19a74:	bl	13dd0 <assuan_inquire@plt>
   19a78:	cmp	r0, #0
   19a7c:	beq	19a98 <__assert_fail@plt+0x5440>
   19a80:	ldr	r2, [sp, #36]	; 0x24
   19a84:	ldr	r3, [r4]
   19a88:	cmp	r2, r3
   19a8c:	bne	19b10 <__assert_fail@plt+0x54b8>
   19a90:	add	sp, sp, #40	; 0x28
   19a94:	pop	{r4, r5, r6, pc}
   19a98:	mov	r1, #512	; 0x200
   19a9c:	add	r0, sp, #20
   19aa0:	bl	2ed78 <__assert_fail@plt+0x1a720>
   19aa4:	mov	r0, r6
   19aa8:	add	r3, sp, #20
   19aac:	ldr	r1, [sp, #12]
   19ab0:	ldr	r2, [sp, #16]
   19ab4:	bl	24690 <__assert_fail@plt+0x10038>
   19ab8:	mov	r6, r0
   19abc:	ldr	r0, [sp, #12]
   19ac0:	bl	13c44 <gcry_free@plt>
   19ac4:	cmp	r6, #0
   19ac8:	beq	19af4 <__assert_fail@plt+0x549c>
   19acc:	add	r0, sp, #20
   19ad0:	bl	1954c <__assert_fail@plt+0x4ef4>
   19ad4:	mov	r0, r6
   19ad8:	bl	13a64 <gpg_strerror@plt>
   19adc:	mov	r1, r0
   19ae0:	movw	r0, #16364	; 0x3fec
   19ae4:	movt	r0, #4
   19ae8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   19aec:	mov	r0, r6
   19af0:	b	19a80 <__assert_fail@plt+0x5428>
   19af4:	mov	r0, r5
   19af8:	add	r1, sp, #20
   19afc:	bl	199a4 <__assert_fail@plt+0x534c>
   19b00:	subs	r6, r0, #0
   19b04:	moveq	r0, r6
   19b08:	beq	19a80 <__assert_fail@plt+0x5428>
   19b0c:	b	19ad4 <__assert_fail@plt+0x547c>
   19b10:	bl	13cec <__stack_chk_fail@plt>
   19b14:	push	{r4, r5, r6, r7, r8, lr}
   19b18:	movw	r4, #47296	; 0xb8c0
   19b1c:	movt	r4, #5
   19b20:	sub	sp, sp, #40	; 0x28
   19b24:	mov	r6, r0
   19b28:	ldr	r3, [r4]
   19b2c:	str	r3, [sp, #36]	; 0x24
   19b30:	bl	144f0 <assuan_get_pointer@plt>
   19b34:	mov	r3, #4096	; 0x1000
   19b38:	movw	r1, #16392	; 0x4008
   19b3c:	str	r3, [sp]
   19b40:	movt	r1, #4
   19b44:	add	r2, sp, #12
   19b48:	add	r3, sp, #16
   19b4c:	mov	r5, r0
   19b50:	mov	r0, r6
   19b54:	bl	13dd0 <assuan_inquire@plt>
   19b58:	cmp	r0, #0
   19b5c:	movne	r6, r0
   19b60:	beq	19b80 <__assert_fail@plt+0x5528>
   19b64:	ldr	r2, [sp, #36]	; 0x24
   19b68:	mov	r0, r6
   19b6c:	ldr	r3, [r4]
   19b70:	cmp	r2, r3
   19b74:	bne	19c1c <__assert_fail@plt+0x55c4>
   19b78:	add	sp, sp, #40	; 0x28
   19b7c:	pop	{r4, r5, r6, r7, r8, pc}
   19b80:	add	r7, sp, #20
   19b84:	mov	r1, #512	; 0x200
   19b88:	mov	r0, r7
   19b8c:	bl	2ed78 <__assert_fail@plt+0x1a720>
   19b90:	ldr	r1, [r5, #4]
   19b94:	ldr	r2, [sp, #12]
   19b98:	mov	r0, r5
   19b9c:	ldr	r3, [sp, #16]
   19ba0:	ldr	r1, [r1, #12]
   19ba4:	str	r7, [sp]
   19ba8:	bl	23c84 <__assert_fail@plt+0xf62c>
   19bac:	mov	r8, r0
   19bb0:	ldr	r0, [sp, #12]
   19bb4:	bl	13c44 <gcry_free@plt>
   19bb8:	cmp	r8, #0
   19bbc:	beq	19be8 <__assert_fail@plt+0x5590>
   19bc0:	mov	r0, r7
   19bc4:	bl	1954c <__assert_fail@plt+0x4ef4>
   19bc8:	mov	r0, r8
   19bcc:	mov	r6, r8
   19bd0:	bl	13a64 <gpg_strerror@plt>
   19bd4:	mov	r1, r0
   19bd8:	movw	r0, #16404	; 0x4014
   19bdc:	movt	r0, #4
   19be0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   19be4:	b	19c00 <__assert_fail@plt+0x55a8>
   19be8:	mov	r0, r6
   19bec:	mov	r1, r7
   19bf0:	bl	199a4 <__assert_fail@plt+0x534c>
   19bf4:	subs	r8, r0, #0
   19bf8:	moveq	r6, r8
   19bfc:	bne	19bc8 <__assert_fail@plt+0x5570>
   19c00:	ldr	r3, [r5, #4]
   19c04:	ldr	r0, [r3, #12]
   19c08:	bl	13c44 <gcry_free@plt>
   19c0c:	ldr	r3, [r5, #4]
   19c10:	mov	r2, #0
   19c14:	str	r2, [r3, #12]
   19c18:	b	19b64 <__assert_fail@plt+0x550c>
   19c1c:	bl	13cec <__stack_chk_fail@plt>
   19c20:	push	{r4, r5, r6, r7, lr}
   19c24:	movw	r5, #47296	; 0xb8c0
   19c28:	movt	r5, #5
   19c2c:	sub	sp, sp, #28
   19c30:	mov	r7, r0
   19c34:	ldr	r3, [r5]
   19c38:	str	r3, [sp, #20]
   19c3c:	bl	144f0 <assuan_get_pointer@plt>
   19c40:	movw	r3, #48116	; 0xbbf4
   19c44:	movt	r3, #5
   19c48:	ldr	r3, [r3, #108]	; 0x6c
   19c4c:	cmp	r3, #0
   19c50:	movne	r6, #0
   19c54:	mov	r4, r0
   19c58:	bne	19c70 <__assert_fail@plt+0x5618>
   19c5c:	ldr	r3, [r0, #4]
   19c60:	ldr	r6, [r3, #8]
   19c64:	cmp	r6, #0
   19c68:	movne	r6, #2
   19c6c:	moveq	r6, #0
   19c70:	mov	r1, #512	; 0x200
   19c74:	add	r0, sp, #4
   19c78:	bl	2ed78 <__assert_fail@plt+0x1a720>
   19c7c:	ldr	r1, [r4, #4]
   19c80:	mov	r3, r6
   19c84:	add	r2, sp, #4
   19c88:	mov	r0, r4
   19c8c:	ldr	r1, [r1, #12]
   19c90:	bl	23b90 <__assert_fail@plt+0xf538>
   19c94:	subs	r6, r0, #0
   19c98:	beq	19cf0 <__assert_fail@plt+0x5698>
   19c9c:	add	r0, sp, #4
   19ca0:	bl	1954c <__assert_fail@plt+0x4ef4>
   19ca4:	mov	r0, r6
   19ca8:	bl	13a64 <gpg_strerror@plt>
   19cac:	mov	r1, r0
   19cb0:	movw	r0, #16436	; 0x4034
   19cb4:	movt	r0, #4
   19cb8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   19cbc:	ldr	r3, [r4, #4]
   19cc0:	ldr	r0, [r3, #12]
   19cc4:	bl	13c44 <gcry_free@plt>
   19cc8:	ldr	ip, [sp, #20]
   19ccc:	ldr	r1, [r5]
   19cd0:	mov	r2, #0
   19cd4:	ldr	r3, [r4, #4]
   19cd8:	mov	r0, r6
   19cdc:	cmp	ip, r1
   19ce0:	str	r2, [r3, #12]
   19ce4:	bne	19d08 <__assert_fail@plt+0x56b0>
   19ce8:	add	sp, sp, #28
   19cec:	pop	{r4, r5, r6, r7, pc}
   19cf0:	mov	r0, r7
   19cf4:	add	r1, sp, #4
   19cf8:	bl	199a4 <__assert_fail@plt+0x534c>
   19cfc:	subs	r6, r0, #0
   19d00:	beq	19cbc <__assert_fail@plt+0x5664>
   19d04:	b	19ca4 <__assert_fail@plt+0x564c>
   19d08:	bl	13cec <__stack_chk_fail@plt>
   19d0c:	mov	r3, #0
   19d10:	push	{r4, r5, r6}
   19d14:	ldrb	ip, [r1, r3]
   19d18:	and	r4, ip, #223	; 0xdf
   19d1c:	sub	r5, ip, #48	; 0x30
   19d20:	sub	r6, r4, #65	; 0x41
   19d24:	cmp	r5, #9
   19d28:	cmphi	r6, #5
   19d2c:	bls	19d58 <__assert_fail@plt+0x5700>
   19d30:	cmp	ip, #9
   19d34:	beq	19d40 <__assert_fail@plt+0x56e8>
   19d38:	cmp	r4, #0
   19d3c:	bne	19d60 <__assert_fail@plt+0x5708>
   19d40:	ands	r1, r3, #1
   19d44:	bne	19d78 <__assert_fail@plt+0x5720>
   19d48:	mov	r0, r1
   19d4c:	str	r3, [r2]
   19d50:	pop	{r4, r5, r6}
   19d54:	bx	lr
   19d58:	add	r3, r3, #1
   19d5c:	b	19d14 <__assert_fail@plt+0x56bc>
   19d60:	mov	r1, #280	; 0x118
   19d64:	movw	r2, #16464	; 0x4050
   19d68:	movt	r1, #1024	; 0x400
   19d6c:	movt	r2, #4
   19d70:	pop	{r4, r5, r6}
   19d74:	b	142f8 <assuan_set_error@plt>
   19d78:	mov	r1, #280	; 0x118
   19d7c:	movw	r2, #16484	; 0x4064
   19d80:	movt	r1, #1024	; 0x400
   19d84:	movt	r2, #4
   19d88:	pop	{r4, r5, r6}
   19d8c:	b	142f8 <assuan_set_error@plt>
   19d90:	push	{r4, r5, r6, r7, r8, lr}
   19d94:	movw	r6, #47296	; 0xb8c0
   19d98:	movt	r6, #5
   19d9c:	sub	sp, sp, #16
   19da0:	mov	r4, r1
   19da4:	mov	r8, r0
   19da8:	ldr	r3, [r6]
   19dac:	str	r3, [sp, #12]
   19db0:	bl	144f0 <assuan_get_pointer@plt>
   19db4:	movw	r1, #16508	; 0x407c
   19db8:	movt	r1, #4
   19dbc:	mov	r5, r0
   19dc0:	mov	r0, r4
   19dc4:	bl	19300 <__assert_fail@plt+0x4ca8>
   19dc8:	cmp	r0, #0
   19dcc:	beq	19fb4 <__assert_fail@plt+0x595c>
   19dd0:	movw	r1, #16516	; 0x4084
   19dd4:	mov	r0, r4
   19dd8:	movt	r1, #4
   19ddc:	bl	1922c <__assert_fail@plt+0x4bd4>
   19de0:	cmp	r0, #0
   19de4:	beq	19eec <__assert_fail@plt+0x5894>
   19de8:	mov	r7, #2
   19dec:	mov	r0, r4
   19df0:	bl	18514 <__assert_fail@plt+0x3ebc>
   19df4:	mov	r4, r0
   19df8:	add	r2, sp, #16
   19dfc:	mov	r3, #0
   19e00:	str	r7, [r5, #24]
   19e04:	mov	r0, r8
   19e08:	str	r3, [r2, #-12]!
   19e0c:	mov	r1, r4
   19e10:	bl	19d0c <__assert_fail@plt+0x56b4>
   19e14:	cmp	r0, #0
   19e18:	bne	19ed4 <__assert_fail@plt+0x587c>
   19e1c:	ldr	r3, [sp, #4]
   19e20:	movw	r2, #1025	; 0x401
   19e24:	cmp	r7, r2
   19e28:	lsr	r3, r3, #1
   19e2c:	str	r3, [sp, #4]
   19e30:	beq	1a06c <__assert_fail@plt+0x5a14>
   19e34:	bic	r2, r3, #4
   19e38:	cmp	r2, #16
   19e3c:	bne	1a034 <__assert_fail@plt+0x59dc>
   19e40:	cmp	r3, #0
   19e44:	str	r3, [r5, #92]	; 0x5c
   19e48:	add	r0, r5, #28
   19e4c:	mov	r3, #0
   19e50:	str	r3, [sp, #4]
   19e54:	beq	19ed0 <__assert_fail@plt+0x5878>
   19e58:	mov	r3, #0
   19e5c:	ldrb	r2, [r4]
   19e60:	add	r3, r0, r3
   19e64:	cmp	r2, #57	; 0x39
   19e68:	lslls	r2, r2, #4
   19e6c:	andls	r1, r2, #240	; 0xf0
   19e70:	bls	19e88 <__assert_fail@plt+0x5830>
   19e74:	cmp	r2, #70	; 0x46
   19e78:	subls	r1, r2, #55	; 0x37
   19e7c:	subhi	r1, r2, #87	; 0x57
   19e80:	lsl	r1, r1, #4
   19e84:	uxtb	r1, r1
   19e88:	ldrb	r2, [r4, #1]
   19e8c:	cmp	r2, #57	; 0x39
   19e90:	subls	r2, r2, #48	; 0x30
   19e94:	uxtbls	r2, r2
   19e98:	bls	19eac <__assert_fail@plt+0x5854>
   19e9c:	cmp	r2, #70	; 0x46
   19ea0:	subls	r2, r2, #55	; 0x37
   19ea4:	subhi	r2, r2, #87	; 0x57
   19ea8:	uxtb	r2, r2
   19eac:	add	r2, r2, r1
   19eb0:	strb	r2, [r3]
   19eb4:	ldr	r3, [sp, #4]
   19eb8:	add	r4, r4, #2
   19ebc:	ldr	r2, [r5, #92]	; 0x5c
   19ec0:	add	r3, r3, #1
   19ec4:	str	r3, [sp, #4]
   19ec8:	cmp	r2, r3
   19ecc:	bhi	19e5c <__assert_fail@plt+0x5804>
   19ed0:	mov	r0, #0
   19ed4:	ldr	r2, [sp, #12]
   19ed8:	ldr	r3, [r6]
   19edc:	cmp	r2, r3
   19ee0:	bne	1a0bc <__assert_fail@plt+0x5a64>
   19ee4:	add	sp, sp, #16
   19ee8:	pop	{r4, r5, r6, r7, r8, pc}
   19eec:	movw	r1, #16528	; 0x4090
   19ef0:	mov	r0, r4
   19ef4:	movt	r1, #4
   19ef8:	bl	1922c <__assert_fail@plt+0x4bd4>
   19efc:	cmp	r0, #0
   19f00:	bne	1a064 <__assert_fail@plt+0x5a0c>
   19f04:	movw	r1, #16544	; 0x40a0
   19f08:	mov	r0, r4
   19f0c:	movt	r1, #4
   19f10:	bl	1922c <__assert_fail@plt+0x4bd4>
   19f14:	cmp	r0, #0
   19f18:	bne	1a078 <__assert_fail@plt+0x5a20>
   19f1c:	movw	r1, #16560	; 0x40b0
   19f20:	mov	r0, r4
   19f24:	movt	r1, #4
   19f28:	bl	1922c <__assert_fail@plt+0x4bd4>
   19f2c:	cmp	r0, #0
   19f30:	bne	1a080 <__assert_fail@plt+0x5a28>
   19f34:	movw	r1, #16576	; 0x40c0
   19f38:	mov	r0, r4
   19f3c:	movt	r1, #4
   19f40:	bl	1922c <__assert_fail@plt+0x4bd4>
   19f44:	cmp	r0, #0
   19f48:	bne	1a0a4 <__assert_fail@plt+0x5a4c>
   19f4c:	movw	r1, #16592	; 0x40d0
   19f50:	mov	r0, r4
   19f54:	movt	r1, #4
   19f58:	bl	1922c <__assert_fail@plt+0x4bd4>
   19f5c:	cmp	r0, #0
   19f60:	bne	1a0ac <__assert_fail@plt+0x5a54>
   19f64:	movw	r1, #16608	; 0x40e0
   19f68:	mov	r0, r4
   19f6c:	movt	r1, #4
   19f70:	bl	1922c <__assert_fail@plt+0x4bd4>
   19f74:	cmp	r0, #0
   19f78:	bne	1a0b4 <__assert_fail@plt+0x5a5c>
   19f7c:	movw	r1, #16620	; 0x40ec
   19f80:	mov	r0, r4
   19f84:	movt	r1, #4
   19f88:	bl	1922c <__assert_fail@plt+0x4bd4>
   19f8c:	cmp	r0, #0
   19f90:	movwne	r7, #1025	; 0x401
   19f94:	bne	19dec <__assert_fail@plt+0x5794>
   19f98:	mov	r0, r8
   19f9c:	mov	r1, #280	; 0x118
   19fa0:	movw	r2, #16640	; 0x4100
   19fa4:	movt	r1, #1024	; 0x400
   19fa8:	movt	r2, #4
   19fac:	bl	142f8 <assuan_set_error@plt>
   19fb0:	b	19ed4 <__assert_fail@plt+0x587c>
   19fb4:	mov	r0, r4
   19fb8:	bl	18514 <__assert_fail@plt+0x3ebc>
   19fbc:	add	r1, sp, #8
   19fc0:	mov	r2, #10
   19fc4:	bl	1407c <strtoul@plt>
   19fc8:	ldr	r4, [sp, #8]
   19fcc:	ldrb	r3, [r4]
   19fd0:	cmp	r3, #9
   19fd4:	cmpne	r3, #32
   19fd8:	mov	r7, r0
   19fdc:	bne	19ff8 <__assert_fail@plt+0x59a0>
   19fe0:	add	r3, r4, #1
   19fe4:	mov	r4, r3
   19fe8:	ldrb	r2, [r3], #1
   19fec:	cmp	r2, #32
   19ff0:	cmpne	r2, #9
   19ff4:	beq	19fe4 <__assert_fail@plt+0x598c>
   19ff8:	cmp	r7, #0
   19ffc:	beq	1a01c <__assert_fail@plt+0x59c4>
   1a000:	mov	r2, #0
   1a004:	mov	r0, r7
   1a008:	mov	r3, r2
   1a00c:	mov	r1, #8
   1a010:	bl	140f4 <gcry_md_algo_info@plt>
   1a014:	cmp	r0, #0
   1a018:	beq	19df8 <__assert_fail@plt+0x57a0>
   1a01c:	mov	r0, r8
   1a020:	mov	r1, #84	; 0x54
   1a024:	mov	r2, #0
   1a028:	movt	r1, #1024	; 0x400
   1a02c:	bl	142f8 <assuan_set_error@plt>
   1a030:	b	19ed4 <__assert_fail@plt+0x587c>
   1a034:	cmp	r2, #24
   1a038:	beq	19e40 <__assert_fail@plt+0x57e8>
   1a03c:	bic	r2, r3, #16
   1a040:	cmp	r2, #32
   1a044:	beq	19e40 <__assert_fail@plt+0x57e8>
   1a048:	cmp	r3, #64	; 0x40
   1a04c:	bne	1a088 <__assert_fail@plt+0x5a30>
   1a050:	str	r3, [r5, #92]	; 0x5c
   1a054:	add	r0, r5, #28
   1a058:	mov	r3, #0
   1a05c:	str	r3, [sp, #4]
   1a060:	b	19e58 <__assert_fail@plt+0x5800>
   1a064:	mov	r7, #11
   1a068:	b	19dec <__assert_fail@plt+0x5794>
   1a06c:	cmp	r3, #36	; 0x24
   1a070:	bne	19e34 <__assert_fail@plt+0x57dc>
   1a074:	b	1a050 <__assert_fail@plt+0x59f8>
   1a078:	mov	r7, #8
   1a07c:	b	19dec <__assert_fail@plt+0x5794>
   1a080:	mov	r7, #9
   1a084:	b	19dec <__assert_fail@plt+0x5794>
   1a088:	mov	r0, r8
   1a08c:	mov	r1, #280	; 0x118
   1a090:	movw	r2, #16664	; 0x4118
   1a094:	movt	r1, #1024	; 0x400
   1a098:	movt	r2, #4
   1a09c:	bl	142f8 <assuan_set_error@plt>
   1a0a0:	b	19ed4 <__assert_fail@plt+0x587c>
   1a0a4:	mov	r7, #10
   1a0a8:	b	19dec <__assert_fail@plt+0x5794>
   1a0ac:	mov	r7, #3
   1a0b0:	b	19dec <__assert_fail@plt+0x5794>
   1a0b4:	mov	r7, #1
   1a0b8:	b	19dec <__assert_fail@plt+0x5794>
   1a0bc:	bl	13cec <__stack_chk_fail@plt>
   1a0c0:	movw	r3, #48116	; 0xbbf4
   1a0c4:	movt	r3, #5
   1a0c8:	push	{r4, r5, r6, r7, r8, lr}
   1a0cc:	movw	r4, #47296	; 0xb8c0
   1a0d0:	movt	r4, #5
   1a0d4:	ldr	r3, [r3, #116]	; 0x74
   1a0d8:	sub	sp, sp, #8
   1a0dc:	mov	r6, r1
   1a0e0:	ldr	r2, [r4]
   1a0e4:	cmp	r3, #0
   1a0e8:	mov	r7, r0
   1a0ec:	str	r2, [sp, #4]
   1a0f0:	beq	1a1a8 <__assert_fail@plt+0x5b50>
   1a0f4:	ldrb	r3, [r1]
   1a0f8:	cmp	r3, #0
   1a0fc:	beq	1a134 <__assert_fail@plt+0x5adc>
   1a100:	cmp	r3, #32
   1a104:	cmpne	r3, #9
   1a108:	moveq	ip, r1
   1a10c:	beq	1a154 <__assert_fail@plt+0x5afc>
   1a110:	add	r2, r1, #1
   1a114:	b	1a124 <__assert_fail@plt+0x5acc>
   1a118:	cmp	r3, #9
   1a11c:	cmpne	r3, #32
   1a120:	beq	1a154 <__assert_fail@plt+0x5afc>
   1a124:	mov	ip, r2
   1a128:	ldrb	r3, [r2], #1
   1a12c:	cmp	r3, #0
   1a130:	bne	1a118 <__assert_fail@plt+0x5ac0>
   1a134:	mov	r0, #128	; 0x80
   1a138:	movt	r0, #1024	; 0x400
   1a13c:	ldr	r2, [sp, #4]
   1a140:	ldr	r3, [r4]
   1a144:	cmp	r2, r3
   1a148:	bne	1a2c8 <__assert_fail@plt+0x5c70>
   1a14c:	add	sp, sp, #8
   1a150:	pop	{r4, r5, r6, r7, r8, pc}
   1a154:	mov	r5, ip
   1a158:	mov	r3, #0
   1a15c:	strb	r3, [r5], #1
   1a160:	ldrb	r3, [ip, #1]
   1a164:	cmp	r3, #0
   1a168:	beq	1a19c <__assert_fail@plt+0x5b44>
   1a16c:	cmp	r3, #9
   1a170:	cmpne	r3, #32
   1a174:	bne	1a1c0 <__assert_fail@plt+0x5b68>
   1a178:	add	ip, ip, #2
   1a17c:	b	1a18c <__assert_fail@plt+0x5b34>
   1a180:	cmp	r3, #32
   1a184:	cmpne	r3, #9
   1a188:	bne	1a1c0 <__assert_fail@plt+0x5b68>
   1a18c:	mov	r5, ip
   1a190:	ldrb	r3, [ip], #1
   1a194:	cmp	r3, #0
   1a198:	bne	1a180 <__assert_fail@plt+0x5b28>
   1a19c:	mov	r0, #69	; 0x45
   1a1a0:	movt	r0, #1024	; 0x400
   1a1a4:	b	1a13c <__assert_fail@plt+0x5ae4>
   1a1a8:	mov	r1, #60	; 0x3c
   1a1ac:	movw	r2, #16692	; 0x4134
   1a1b0:	movt	r1, #1024	; 0x400
   1a1b4:	movt	r2, #4
   1a1b8:	bl	142f8 <assuan_set_error@plt>
   1a1bc:	b	1a13c <__assert_fail@plt+0x5ae4>
   1a1c0:	cmp	r3, #45	; 0x2d
   1a1c4:	bne	1a19c <__assert_fail@plt+0x5b44>
   1a1c8:	ldrb	r3, [r5, #1]
   1a1cc:	cmp	r3, #49	; 0x31
   1a1d0:	bne	1a19c <__assert_fail@plt+0x5b44>
   1a1d4:	ldrb	r3, [r5, #2]
   1a1d8:	add	r8, r5, #2
   1a1dc:	cmp	r3, #32
   1a1e0:	cmpne	r3, #9
   1a1e4:	bne	1a200 <__assert_fail@plt+0x5ba8>
   1a1e8:	add	r5, r5, #3
   1a1ec:	mov	r8, r5
   1a1f0:	ldrb	r3, [r5], #1
   1a1f4:	cmp	r3, #32
   1a1f8:	cmpne	r3, #9
   1a1fc:	beq	1a1ec <__assert_fail@plt+0x5b94>
   1a200:	add	r2, sp, #8
   1a204:	mov	r3, #0
   1a208:	mov	r0, r7
   1a20c:	mov	r1, r8
   1a210:	str	r3, [r2, #-8]!
   1a214:	mov	r2, sp
   1a218:	bl	19d0c <__assert_fail@plt+0x56b4>
   1a21c:	subs	r5, r0, #0
   1a220:	bne	1a278 <__assert_fail@plt+0x5c20>
   1a224:	ldr	r3, [sp]
   1a228:	strb	r5, [r8, r3]
   1a22c:	ldrb	r3, [r8]
   1a230:	cmp	r3, #0
   1a234:	beq	1a280 <__assert_fail@plt+0x5c28>
   1a238:	mov	r0, r8
   1a23c:	bl	14094 <strlen@plt>
   1a240:	mov	r3, r5
   1a244:	mov	r1, r8
   1a248:	add	r2, r0, #1
   1a24c:	mov	r0, r8
   1a250:	bl	2e27c <__assert_fail@plt+0x19c24>
   1a254:	cmp	r0, #0
   1a258:	beq	1a2cc <__assert_fail@plt+0x5c74>
   1a25c:	mov	r0, r6
   1a260:	mov	r2, r8
   1a264:	mov	r1, #1
   1a268:	mvn	r3, #0
   1a26c:	bl	21bb4 <__assert_fail@plt+0xd55c>
   1a270:	subs	r5, r0, #0
   1a274:	bne	1a2a8 <__assert_fail@plt+0x5c50>
   1a278:	mov	r0, r5
   1a27c:	b	1a13c <__assert_fail@plt+0x5ae4>
   1a280:	mov	r0, r7
   1a284:	mov	r1, #69	; 0x45
   1a288:	movw	r2, #16724	; 0x4154
   1a28c:	movt	r1, #1024	; 0x400
   1a290:	movt	r2, #4
   1a294:	mov	r8, r3
   1a298:	bl	142f8 <assuan_set_error@plt>
   1a29c:	mov	r5, r0
   1a2a0:	cmp	r5, #0
   1a2a4:	beq	1a25c <__assert_fail@plt+0x5c04>
   1a2a8:	mov	r0, r5
   1a2ac:	bl	13a64 <gpg_strerror@plt>
   1a2b0:	mov	r1, r0
   1a2b4:	movw	r0, #16748	; 0x416c
   1a2b8:	movt	r0, #4
   1a2bc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1a2c0:	mov	r0, r5
   1a2c4:	b	1a13c <__assert_fail@plt+0x5ae4>
   1a2c8:	bl	13cec <__stack_chk_fail@plt>
   1a2cc:	mov	r0, r7
   1a2d0:	mov	r1, #280	; 0x118
   1a2d4:	movw	r2, #16464	; 0x4050
   1a2d8:	movt	r1, #1024	; 0x400
   1a2dc:	movt	r2, #4
   1a2e0:	bl	142f8 <assuan_set_error@plt>
   1a2e4:	mov	r5, r0
   1a2e8:	b	1a2a0 <__assert_fail@plt+0x5c48>
   1a2ec:	push	{r4, r5, r6, r7, r8, lr}
   1a2f0:	movw	r4, #47296	; 0xb8c0
   1a2f4:	movt	r4, #5
   1a2f8:	sub	sp, sp, #8
   1a2fc:	add	r3, sp, #8
   1a300:	mov	r7, r2
   1a304:	ldr	ip, [r4]
   1a308:	mov	r2, sp
   1a30c:	mov	lr, #0
   1a310:	mov	r6, r0
   1a314:	str	lr, [r3, #-8]!
   1a318:	mov	r8, r1
   1a31c:	str	ip, [sp, #4]
   1a320:	bl	19d0c <__assert_fail@plt+0x56b4>
   1a324:	subs	r5, r0, #0
   1a328:	bne	1a370 <__assert_fail@plt+0x5d18>
   1a32c:	ldr	r3, [sp]
   1a330:	lsr	r2, r3, #1
   1a334:	str	r2, [sp]
   1a338:	cmp	r2, #20
   1a33c:	beq	1a35c <__assert_fail@plt+0x5d04>
   1a340:	mov	r0, r6
   1a344:	mov	r1, #280	; 0x118
   1a348:	movw	r2, #16788	; 0x4194
   1a34c:	movt	r1, #1024	; 0x400
   1a350:	movt	r2, #4
   1a354:	bl	142f8 <assuan_set_error@plt>
   1a358:	b	1a374 <__assert_fail@plt+0x5d1c>
   1a35c:	mov	r0, r8
   1a360:	mov	r1, r7
   1a364:	bl	2dfd8 <__assert_fail@plt+0x19980>
   1a368:	cmp	r0, #0
   1a36c:	blt	1a38c <__assert_fail@plt+0x5d34>
   1a370:	mov	r0, r5
   1a374:	ldr	r2, [sp, #4]
   1a378:	ldr	r3, [r4]
   1a37c:	cmp	r2, r3
   1a380:	bne	1a3a8 <__assert_fail@plt+0x5d50>
   1a384:	add	sp, sp, #8
   1a388:	pop	{r4, r5, r6, r7, r8, pc}
   1a38c:	mov	r0, r6
   1a390:	mov	r1, #59	; 0x3b
   1a394:	movw	r2, #16816	; 0x41b0
   1a398:	movt	r1, #1024	; 0x400
   1a39c:	movt	r2, #4
   1a3a0:	bl	142f8 <assuan_set_error@plt>
   1a3a4:	b	1a374 <__assert_fail@plt+0x5d1c>
   1a3a8:	bl	13cec <__stack_chk_fail@plt>
   1a3ac:	push	{r4, r5, r6, r7, lr}
   1a3b0:	movw	r4, #47296	; 0xb8c0
   1a3b4:	movt	r4, #5
   1a3b8:	sub	sp, sp, #52	; 0x34
   1a3bc:	mov	r6, r1
   1a3c0:	mov	r7, r0
   1a3c4:	ldr	r3, [r4]
   1a3c8:	str	r3, [sp, #44]	; 0x2c
   1a3cc:	bl	144f0 <assuan_get_pointer@plt>
   1a3d0:	mov	r1, r6
   1a3d4:	add	r2, sp, #24
   1a3d8:	mov	r3, #0
   1a3dc:	str	r3, [sp, #16]
   1a3e0:	str	r3, [sp, #20]
   1a3e4:	mov	r5, r0
   1a3e8:	mov	r0, r7
   1a3ec:	bl	1a2ec <__assert_fail@plt+0x5c94>
   1a3f0:	subs	ip, r0, #0
   1a3f4:	beq	1a440 <__assert_fail@plt+0x5de8>
   1a3f8:	ldr	r0, [sp, #16]
   1a3fc:	mov	r6, ip
   1a400:	bl	13be4 <gcry_sexp_release@plt>
   1a404:	ldr	r0, [sp, #20]
   1a408:	bl	13c44 <gcry_free@plt>
   1a40c:	mov	r0, r6
   1a410:	bl	13a64 <gpg_strerror@plt>
   1a414:	mov	r1, r0
   1a418:	movw	r0, #16872	; 0x41e8
   1a41c:	movt	r0, #4
   1a420:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1a424:	mov	r0, r6
   1a428:	ldr	r2, [sp, #44]	; 0x2c
   1a42c:	ldr	r3, [r4]
   1a430:	cmp	r2, r3
   1a434:	bne	1a520 <__assert_fail@plt+0x5ec8>
   1a438:	add	sp, sp, #52	; 0x34
   1a43c:	pop	{r4, r5, r6, r7, pc}
   1a440:	ldr	r1, [r5, #4]
   1a444:	add	lr, sp, #16
   1a448:	ldr	r6, [r5, #128]	; 0x80
   1a44c:	add	r2, sp, #24
   1a450:	mov	r0, r5
   1a454:	add	r3, sp, #20
   1a458:	ldr	r1, [r1, #12]
   1a45c:	add	r6, r6, #1
   1a460:	str	r6, [r5, #128]	; 0x80
   1a464:	str	ip, [sp]
   1a468:	stmib	sp, {ip, lr}
   1a46c:	bl	22634 <__assert_fail@plt+0xdfdc>
   1a470:	subs	r6, r0, #0
   1a474:	bne	1a4e8 <__assert_fail@plt+0x5e90>
   1a478:	ldr	r1, [sp, #16]
   1a47c:	cmp	r1, #0
   1a480:	beq	1a4d4 <__assert_fail@plt+0x5e7c>
   1a484:	mov	r0, r5
   1a488:	bl	24a5c <__assert_fail@plt+0x10404>
   1a48c:	ldr	r2, [r5, #4]
   1a490:	ldr	r3, [r5, #128]	; 0x80
   1a494:	sub	r3, r3, #1
   1a498:	mov	r7, r0
   1a49c:	ldr	r0, [r2, #12]
   1a4a0:	str	r3, [r5, #128]	; 0x80
   1a4a4:	bl	13c44 <gcry_free@plt>
   1a4a8:	ldr	r3, [r5, #4]
   1a4ac:	ldr	r0, [sp, #16]
   1a4b0:	str	r6, [r3, #12]
   1a4b4:	bl	13be4 <gcry_sexp_release@plt>
   1a4b8:	ldr	r0, [sp, #20]
   1a4bc:	bl	13c44 <gcry_free@plt>
   1a4c0:	cmp	r7, #0
   1a4c4:	moveq	r0, r7
   1a4c8:	beq	1a428 <__assert_fail@plt+0x5dd0>
   1a4cc:	mov	r6, r7
   1a4d0:	b	1a40c <__assert_fail@plt+0x5db4>
   1a4d4:	movw	r0, #16824	; 0x41b8
   1a4d8:	movt	r0, #4
   1a4dc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1a4e0:	mov	r6, #69	; 0x45
   1a4e4:	movt	r6, #1024	; 0x400
   1a4e8:	ldr	r2, [r5, #4]
   1a4ec:	ldr	r3, [r5, #128]	; 0x80
   1a4f0:	ldr	r0, [r2, #12]
   1a4f4:	sub	r3, r3, #1
   1a4f8:	str	r3, [r5, #128]	; 0x80
   1a4fc:	bl	13c44 <gcry_free@plt>
   1a500:	ldr	r3, [r5, #4]
   1a504:	mov	r2, #0
   1a508:	ldr	r0, [sp, #16]
   1a50c:	str	r2, [r3, #12]
   1a510:	bl	13be4 <gcry_sexp_release@plt>
   1a514:	ldr	r0, [sp, #20]
   1a518:	bl	13c44 <gcry_free@plt>
   1a51c:	b	1a40c <__assert_fail@plt+0x5db4>
   1a520:	bl	13cec <__stack_chk_fail@plt>
   1a524:	push	{r4, r5, r6, lr}
   1a528:	mov	r5, r1
   1a52c:	mov	r6, r0
   1a530:	bl	144f0 <assuan_get_pointer@plt>
   1a534:	mov	r1, r5
   1a538:	mov	r4, r0
   1a53c:	mov	r0, r6
   1a540:	add	r2, r4, #100	; 0x64
   1a544:	bl	1a2ec <__assert_fail@plt+0x5c94>
   1a548:	cmp	r0, #0
   1a54c:	moveq	r3, #1
   1a550:	streq	r3, [r4, #120]	; 0x78
   1a554:	pop	{r4, r5, r6, pc}
   1a558:	push	{r4, r5, r6, r7, r8, lr}
   1a55c:	movw	r4, #47296	; 0xb8c0
   1a560:	movt	r4, #5
   1a564:	sub	sp, sp, #32
   1a568:	mov	r6, r1
   1a56c:	mov	r5, r0
   1a570:	ldr	r3, [r4]
   1a574:	str	r3, [sp, #28]
   1a578:	bl	144f0 <assuan_get_pointer@plt>
   1a57c:	mov	r1, r6
   1a580:	add	r2, sp, #8
   1a584:	mov	r3, #0
   1a588:	str	r3, [sp, #4]
   1a58c:	mov	r7, r0
   1a590:	mov	r0, r5
   1a594:	bl	1a2ec <__assert_fail@plt+0x5c94>
   1a598:	cmp	r0, #0
   1a59c:	beq	1a5b8 <__assert_fail@plt+0x5f60>
   1a5a0:	ldr	r1, [sp, #28]
   1a5a4:	ldr	r3, [r4]
   1a5a8:	cmp	r1, r3
   1a5ac:	bne	1a684 <__assert_fail@plt+0x602c>
   1a5b0:	add	sp, sp, #32
   1a5b4:	pop	{r4, r5, r6, r7, r8, pc}
   1a5b8:	mov	r0, r7
   1a5bc:	add	r1, sp, #8
   1a5c0:	add	r2, sp, #4
   1a5c4:	bl	22ed0 <__assert_fail@plt+0xe878>
   1a5c8:	subs	r6, r0, #0
   1a5cc:	beq	1a5f0 <__assert_fail@plt+0x5f98>
   1a5d0:	mov	r0, r6
   1a5d4:	bl	13a64 <gpg_strerror@plt>
   1a5d8:	mov	r1, r0
   1a5dc:	movw	r0, #16916	; 0x4214
   1a5e0:	movt	r0, #4
   1a5e4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1a5e8:	mov	r0, r6
   1a5ec:	b	1a5a0 <__assert_fail@plt+0x5f48>
   1a5f0:	ldr	r0, [sp, #4]
   1a5f4:	mov	r1, #1
   1a5f8:	mov	r2, r6
   1a5fc:	mov	r3, r6
   1a600:	bl	14298 <gcry_sexp_sprint@plt>
   1a604:	subs	r8, r0, #0
   1a608:	beq	1a688 <__assert_fail@plt+0x6030>
   1a60c:	bl	139c8 <gcry_malloc@plt>
   1a610:	subs	r7, r0, #0
   1a614:	beq	1a668 <__assert_fail@plt+0x6010>
   1a618:	mov	r2, r7
   1a61c:	mov	r3, r8
   1a620:	ldr	r0, [sp, #4]
   1a624:	mov	r1, #1
   1a628:	bl	14298 <gcry_sexp_sprint@plt>
   1a62c:	subs	r2, r0, #0
   1a630:	beq	1a6a4 <__assert_fail@plt+0x604c>
   1a634:	mov	r0, r5
   1a638:	mov	r1, r7
   1a63c:	bl	1413c <assuan_send_data@plt>
   1a640:	mov	r5, r0
   1a644:	mov	r0, r7
   1a648:	mov	r6, r5
   1a64c:	bl	13c44 <gcry_free@plt>
   1a650:	ldr	r0, [sp, #4]
   1a654:	bl	13be4 <gcry_sexp_release@plt>
   1a658:	cmp	r6, #0
   1a65c:	moveq	r0, r5
   1a660:	beq	1a5a0 <__assert_fail@plt+0x5f48>
   1a664:	b	1a5d0 <__assert_fail@plt+0x5f78>
   1a668:	bl	14580 <gpg_err_code_from_syserror@plt>
   1a66c:	cmp	r0, #0
   1a670:	uxthne	r0, r0
   1a674:	orrne	r5, r0, #67108864	; 0x4000000
   1a678:	moveq	r5, r6
   1a67c:	movne	r6, r5
   1a680:	b	1a650 <__assert_fail@plt+0x5ff8>
   1a684:	bl	13cec <__stack_chk_fail@plt>
   1a688:	movw	r0, #16900	; 0x4204
   1a68c:	movw	r1, #16904	; 0x4208
   1a690:	movt	r0, #4
   1a694:	movt	r1, #4
   1a698:	movw	r2, #815	; 0x32f
   1a69c:	ldr	r3, [pc, #28]	; 1a6c0 <__assert_fail@plt+0x6068>
   1a6a0:	bl	14658 <__assert_fail@plt>
   1a6a4:	movw	r0, #16900	; 0x4204
   1a6a8:	movw	r1, #16904	; 0x4208
   1a6ac:	movt	r0, #4
   1a6b0:	movt	r1, #4
   1a6b4:	movw	r2, #822	; 0x336
   1a6b8:	ldr	r3, [pc]	; 1a6c0 <__assert_fail@plt+0x6068>
   1a6bc:	bl	14658 <__assert_fail@plt>
   1a6c0:	andeq	r1, r4, ip, asr #21
   1a6c4:	push	{r4, lr}
   1a6c8:	movw	r4, #47296	; 0xb8c0
   1a6cc:	movt	r4, #5
   1a6d0:	sub	sp, sp, #24
   1a6d4:	ldr	r3, [r4]
   1a6d8:	mov	r2, sp
   1a6dc:	str	r3, [sp, #20]
   1a6e0:	bl	1a2ec <__assert_fail@plt+0x5c94>
   1a6e4:	cmp	r0, #0
   1a6e8:	bne	1a708 <__assert_fail@plt+0x60b0>
   1a6ec:	mov	r0, sp
   1a6f0:	bl	23540 <__assert_fail@plt+0xeee8>
   1a6f4:	mov	r3, #17
   1a6f8:	movt	r3, #1024	; 0x400
   1a6fc:	cmp	r0, #0
   1a700:	movne	r0, r3
   1a704:	moveq	r0, #0
   1a708:	ldr	r2, [sp, #20]
   1a70c:	ldr	r3, [r4]
   1a710:	cmp	r2, r3
   1a714:	bne	1a720 <__assert_fail@plt+0x60c8>
   1a718:	add	sp, sp, #24
   1a71c:	pop	{r4, pc}
   1a720:	bl	13cec <__stack_chk_fail@plt>
   1a724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a728:	movw	r6, #47296	; 0xb8c0
   1a72c:	movt	r6, #5
   1a730:	sub	sp, sp, #60	; 0x3c
   1a734:	mov	r4, r1
   1a738:	mov	r9, r0
   1a73c:	ldr	r3, [r6]
   1a740:	str	r3, [sp, #52]	; 0x34
   1a744:	bl	144f0 <assuan_get_pointer@plt>
   1a748:	mov	r2, #5
   1a74c:	movw	r1, #16944	; 0x4230
   1a750:	movt	r1, #4
   1a754:	str	r0, [sp, #12]
   1a758:	mov	r0, #0
   1a75c:	bl	13cc8 <dcgettext@plt>
   1a760:	movw	r1, #16976	; 0x4250
   1a764:	movt	r1, #4
   1a768:	str	r0, [sp, #16]
   1a76c:	mov	r0, r4
   1a770:	bl	1922c <__assert_fail@plt+0x4bd4>
   1a774:	movw	r1, #16984	; 0x4258
   1a778:	movt	r1, #4
   1a77c:	str	r0, [sp, #8]
   1a780:	mov	r0, r4
   1a784:	bl	1922c <__assert_fail@plt+0x4bd4>
   1a788:	movw	r1, #16992	; 0x4260
   1a78c:	movt	r1, #4
   1a790:	str	r0, [sp, #20]
   1a794:	mov	r0, r4
   1a798:	bl	1922c <__assert_fail@plt+0x4bd4>
   1a79c:	movw	r1, #17004	; 0x426c
   1a7a0:	movt	r1, #4
   1a7a4:	mov	r8, r0
   1a7a8:	mov	r0, r4
   1a7ac:	bl	19300 <__assert_fail@plt+0x4ca8>
   1a7b0:	cmp	r0, #0
   1a7b4:	beq	1a848 <__assert_fail@plt+0x61f0>
   1a7b8:	movw	r1, #17004	; 0x426c
   1a7bc:	mov	r0, r4
   1a7c0:	movt	r1, #4
   1a7c4:	bl	13998 <strstr@plt>
   1a7c8:	subs	r3, r0, #0
   1a7cc:	beq	1aa60 <__assert_fail@plt+0x6408>
   1a7d0:	cmp	r4, r3
   1a7d4:	beq	1a7e8 <__assert_fail@plt+0x6190>
   1a7d8:	ldrb	r2, [r3, #-1]
   1a7dc:	cmp	r2, #32
   1a7e0:	cmpne	r2, #9
   1a7e4:	bne	1aa60 <__assert_fail@plt+0x6408>
   1a7e8:	ldrb	r2, [r3, #8]
   1a7ec:	cmp	r2, #0
   1a7f0:	beq	1aa60 <__assert_fail@plt+0x6408>
   1a7f4:	cmp	r2, #9
   1a7f8:	cmpne	r2, #32
   1a7fc:	beq	1a808 <__assert_fail@plt+0x61b0>
   1a800:	cmp	r2, #61	; 0x3d
   1a804:	bne	1aa60 <__assert_fail@plt+0x6408>
   1a808:	ldrb	r2, [r3, #9]
   1a80c:	add	r0, r3, #9
   1a810:	cmp	r2, #32
   1a814:	bne	1a82c <__assert_fail@plt+0x61d4>
   1a818:	add	r3, r3, #10
   1a81c:	mov	r0, r3
   1a820:	ldrb	r2, [r3], #1
   1a824:	cmp	r2, #32
   1a828:	beq	1a81c <__assert_fail@plt+0x61c4>
   1a82c:	cmp	r2, #0
   1a830:	beq	1aa60 <__assert_fail@plt+0x6408>
   1a834:	cmp	r2, #9
   1a838:	beq	1aa60 <__assert_fail@plt+0x6408>
   1a83c:	mov	r1, #0
   1a840:	mov	r2, #10
   1a844:	bl	13a4c <strtol@plt>
   1a848:	str	r0, [sp, #28]
   1a84c:	movw	r1, #17016	; 0x4278
   1a850:	mov	r0, r4
   1a854:	movt	r1, #4
   1a858:	bl	1922c <__assert_fail@plt+0x4bd4>
   1a85c:	str	r0, [sp, #24]
   1a860:	mov	r0, r4
   1a864:	bl	18514 <__assert_fail@plt+0x3ebc>
   1a868:	mov	r1, #32
   1a86c:	mov	r7, r0
   1a870:	bl	140ac <strchr@plt>
   1a874:	cmp	r0, #0
   1a878:	beq	1abf4 <__assert_fail@plt+0x659c>
   1a87c:	ldrb	r3, [r0, #1]
   1a880:	mov	r2, #0
   1a884:	add	r4, r0, #1
   1a888:	strb	r2, [r0]
   1a88c:	cmp	r3, #32
   1a890:	bne	1a8ac <__assert_fail@plt+0x6254>
   1a894:	add	r3, r0, #2
   1a898:	mov	r4, r3
   1a89c:	add	r3, r3, #1
   1a8a0:	ldrb	r2, [r4]
   1a8a4:	cmp	r2, #32
   1a8a8:	beq	1a898 <__assert_fail@plt+0x6240>
   1a8ac:	mov	r0, r4
   1a8b0:	mov	r1, #32
   1a8b4:	bl	140ac <strchr@plt>
   1a8b8:	cmp	r0, #0
   1a8bc:	beq	1ac04 <__assert_fail@plt+0x65ac>
   1a8c0:	ldrb	r3, [r0, #1]
   1a8c4:	mov	r2, #0
   1a8c8:	add	r5, r0, #1
   1a8cc:	strb	r2, [r0]
   1a8d0:	cmp	r3, #32
   1a8d4:	bne	1a8f0 <__assert_fail@plt+0x6298>
   1a8d8:	add	r3, r0, #2
   1a8dc:	mov	r5, r3
   1a8e0:	add	r3, r3, #1
   1a8e4:	ldrb	r2, [r5]
   1a8e8:	cmp	r2, #32
   1a8ec:	beq	1a8dc <__assert_fail@plt+0x6284>
   1a8f0:	mov	r0, r5
   1a8f4:	mov	r1, #32
   1a8f8:	bl	140ac <strchr@plt>
   1a8fc:	cmp	r0, #0
   1a900:	moveq	sl, r0
   1a904:	beq	1a950 <__assert_fail@plt+0x62f8>
   1a908:	ldrb	r3, [r0, #1]
   1a90c:	mov	r2, #0
   1a910:	add	sl, r0, #1
   1a914:	strb	r2, [r0]
   1a918:	cmp	r3, #32
   1a91c:	bne	1a938 <__assert_fail@plt+0x62e0>
   1a920:	add	r3, r0, #2
   1a924:	mov	sl, r3
   1a928:	add	r3, r3, #1
   1a92c:	ldrb	r2, [sl]
   1a930:	cmp	r2, #32
   1a934:	beq	1a924 <__assert_fail@plt+0x62cc>
   1a938:	mov	r0, sl
   1a93c:	mov	r1, #32
   1a940:	bl	140ac <strchr@plt>
   1a944:	cmp	r0, #0
   1a948:	movne	r3, #0
   1a94c:	strbne	r3, [r0]
   1a950:	cmp	r7, #0
   1a954:	beq	1aa30 <__assert_fail@plt+0x63d8>
   1a958:	ldrb	fp, [r7]
   1a95c:	cmp	fp, #0
   1a960:	beq	1aa30 <__assert_fail@plt+0x63d8>
   1a964:	mov	r0, r7
   1a968:	bl	14094 <strlen@plt>
   1a96c:	cmp	r0, #50	; 0x32
   1a970:	bhi	1aa30 <__assert_fail@plt+0x63d8>
   1a974:	cmp	sl, #0
   1a978:	beq	1acc0 <__assert_fail@plt+0x6668>
   1a97c:	cmp	fp, #88	; 0x58
   1a980:	bne	1a990 <__assert_fail@plt+0x6338>
   1a984:	ldrb	r3, [r7, #1]
   1a988:	cmp	r3, #0
   1a98c:	moveq	r7, #0
   1a990:	ldrb	r3, [r4]
   1a994:	cmp	r3, #88	; 0x58
   1a998:	bne	1a9a8 <__assert_fail@plt+0x6350>
   1a99c:	ldrb	r3, [r4, #1]
   1a9a0:	cmp	r3, #0
   1a9a4:	moveq	r4, #0
   1a9a8:	ldrb	r3, [r5]
   1a9ac:	cmp	r3, #88	; 0x58
   1a9b0:	bne	1a9c0 <__assert_fail@plt+0x6368>
   1a9b4:	ldrb	r3, [r5, #1]
   1a9b8:	cmp	r3, #0
   1a9bc:	moveq	r5, #0
   1a9c0:	ldrb	r3, [sl]
   1a9c4:	cmp	r3, #88	; 0x58
   1a9c8:	beq	1aa6c <__assert_fail@plt+0x6414>
   1a9cc:	cmp	r7, #0
   1a9d0:	beq	1aa80 <__assert_fail@plt+0x6428>
   1a9d4:	add	r2, sp, #44	; 0x2c
   1a9d8:	mov	r0, r7
   1a9dc:	mov	r1, #2
   1a9e0:	bl	21d64 <__assert_fail@plt+0xd70c>
   1a9e4:	subs	r2, r0, #0
   1a9e8:	beq	1aa80 <__assert_fail@plt+0x6428>
   1a9ec:	mov	r0, r9
   1a9f0:	ldr	r1, [sp, #8]
   1a9f4:	bl	1990c <__assert_fail@plt+0x52b4>
   1a9f8:	mov	fp, r0
   1a9fc:	add	r0, sp, #44	; 0x2c
   1aa00:	bl	21ed0 <__assert_fail@plt+0xd878>
   1aa04:	cmp	fp, #0
   1aa08:	moveq	r0, fp
   1aa0c:	beq	1aa48 <__assert_fail@plt+0x63f0>
   1aa10:	mov	r0, fp
   1aa14:	bl	13a64 <gpg_strerror@plt>
   1aa18:	mov	r1, r0
   1aa1c:	movw	r0, #17060	; 0x42a4
   1aa20:	movt	r0, #4
   1aa24:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1aa28:	mov	r0, fp
   1aa2c:	b	1aa48 <__assert_fail@plt+0x63f0>
   1aa30:	mov	r1, #280	; 0x118
   1aa34:	movw	r2, #16168	; 0x3f28
   1aa38:	mov	r0, r9
   1aa3c:	movt	r1, #1024	; 0x400
   1aa40:	movt	r2, #4
   1aa44:	bl	142f8 <assuan_set_error@plt>
   1aa48:	ldr	r2, [sp, #52]	; 0x34
   1aa4c:	ldr	r3, [r6]
   1aa50:	cmp	r2, r3
   1aa54:	bne	1ace4 <__assert_fail@plt+0x668c>
   1aa58:	add	sp, sp, #60	; 0x3c
   1aa5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aa60:	mov	r3, #1
   1aa64:	str	r3, [sp, #28]
   1aa68:	b	1a84c <__assert_fail@plt+0x61f4>
   1aa6c:	ldrb	r3, [sl, #1]
   1aa70:	cmp	r3, #0
   1aa74:	moveq	sl, #0
   1aa78:	cmp	r7, #0
   1aa7c:	bne	1a9d4 <__assert_fail@plt+0x637c>
   1aa80:	cmp	r8, #0
   1aa84:	bne	1ac10 <__assert_fail@plt+0x65b8>
   1aa88:	cmp	r4, #0
   1aa8c:	beq	1aab8 <__assert_fail@plt+0x6460>
   1aa90:	ldrb	r3, [r4]
   1aa94:	cmp	r3, #0
   1aa98:	beq	1aab8 <__assert_fail@plt+0x6460>
   1aa9c:	add	r2, r4, #1
   1aaa0:	mov	r1, #32
   1aaa4:	cmp	r3, #43	; 0x2b
   1aaa8:	strbeq	r1, [r2, #-1]
   1aaac:	ldrb	r3, [r2], #1
   1aab0:	cmp	r3, #0
   1aab4:	bne	1aaa4 <__assert_fail@plt+0x644c>
   1aab8:	cmp	r5, #0
   1aabc:	beq	1aae8 <__assert_fail@plt+0x6490>
   1aac0:	ldrb	r3, [r5]
   1aac4:	cmp	r3, #0
   1aac8:	beq	1aae8 <__assert_fail@plt+0x6490>
   1aacc:	add	r2, r5, #1
   1aad0:	mov	r1, #32
   1aad4:	cmp	r3, #43	; 0x2b
   1aad8:	strbeq	r1, [r2, #-1]
   1aadc:	ldrb	r3, [r2], #1
   1aae0:	cmp	r3, #0
   1aae4:	bne	1aad4 <__assert_fail@plt+0x647c>
   1aae8:	cmp	sl, #0
   1aaec:	beq	1ab18 <__assert_fail@plt+0x64c0>
   1aaf0:	ldrb	r3, [sl]
   1aaf4:	cmp	r3, #0
   1aaf8:	beq	1ab18 <__assert_fail@plt+0x64c0>
   1aafc:	add	r2, sl, #1
   1ab00:	mov	r1, #32
   1ab04:	cmp	r3, #43	; 0x2b
   1ab08:	strbeq	r1, [r2, #-1]
   1ab0c:	ldrb	r3, [r2], #1
   1ab10:	cmp	r3, #0
   1ab14:	bne	1ab04 <__assert_fail@plt+0x64ac>
   1ab18:	str	sl, [sp, #32]
   1ab1c:	mov	r8, #0
   1ab20:	ldr	sl, [sp, #28]
   1ab24:	mov	r3, r4
   1ab28:	str	r7, [sp, #36]	; 0x24
   1ab2c:	mov	r7, r8
   1ab30:	ldr	r8, [sp, #16]
   1ab34:	str	r9, [sp, #16]
   1ab38:	ldr	r9, [sp, #12]
   1ab3c:	str	r6, [sp, #12]
   1ab40:	str	r3, [sp]
   1ab44:	add	r1, sp, #40	; 0x28
   1ab48:	ldr	r3, [sp, #24]
   1ab4c:	mov	r0, r9
   1ab50:	ldr	r2, [sp, #32]
   1ab54:	str	r3, [sp, #4]
   1ab58:	mov	r3, r5
   1ab5c:	bl	20e4c <__assert_fail@plt+0xc7f4>
   1ab60:	mov	fp, r0
   1ab64:	mov	r0, r7
   1ab68:	bl	13c44 <gcry_free@plt>
   1ab6c:	cmp	fp, #0
   1ab70:	bne	1acdc <__assert_fail@plt+0x6684>
   1ab74:	ldr	r3, [sp, #20]
   1ab78:	cmp	r3, #0
   1ab7c:	bne	1ac94 <__assert_fail@plt+0x663c>
   1ab80:	cmp	sl, #0
   1ab84:	ble	1ac1c <__assert_fail@plt+0x65c4>
   1ab88:	mov	r7, #0
   1ab8c:	b	1abbc <__assert_fail@plt+0x6564>
   1ab90:	ldr	r6, [sp, #48]	; 0x30
   1ab94:	ldr	r1, [sp, #40]	; 0x28
   1ab98:	mov	r0, r6
   1ab9c:	bl	13a28 <strcmp@plt>
   1aba0:	cmp	r0, #0
   1aba4:	mov	r0, r6
   1aba8:	bne	1ac5c <__assert_fail@plt+0x6604>
   1abac:	add	r7, r7, #1
   1abb0:	bl	13c44 <gcry_free@plt>
   1abb4:	cmp	r7, sl
   1abb8:	beq	1ac1c <__assert_fail@plt+0x65c4>
   1abbc:	mov	r3, #0
   1abc0:	str	r4, [sp]
   1abc4:	str	r3, [sp, #4]
   1abc8:	mov	r0, r9
   1abcc:	add	r1, sp, #48	; 0x30
   1abd0:	mov	r2, r8
   1abd4:	mov	r3, r5
   1abd8:	bl	20e4c <__assert_fail@plt+0xc7f4>
   1abdc:	subs	fp, r0, #0
   1abe0:	beq	1ab90 <__assert_fail@plt+0x6538>
   1abe4:	ldr	r6, [sp, #12]
   1abe8:	ldr	r0, [sp, #40]	; 0x28
   1abec:	bl	13c44 <gcry_free@plt>
   1abf0:	b	1aa04 <__assert_fail@plt+0x63ac>
   1abf4:	mov	r4, r0
   1abf8:	mov	r5, r0
   1abfc:	mov	sl, r0
   1ac00:	b	1a950 <__assert_fail@plt+0x62f8>
   1ac04:	mov	r5, r0
   1ac08:	mov	sl, r0
   1ac0c:	b	1a950 <__assert_fail@plt+0x62f8>
   1ac10:	mov	fp, #58	; 0x3a
   1ac14:	movt	fp, #1024	; 0x400
   1ac18:	b	1aa10 <__assert_fail@plt+0x63b8>
   1ac1c:	ldr	r7, [sp, #36]	; 0x24
   1ac20:	ldr	r9, [sp, #16]
   1ac24:	ldr	r6, [sp, #12]
   1ac28:	cmp	r7, #0
   1ac2c:	beq	1ac44 <__assert_fail@plt+0x65ec>
   1ac30:	mov	r0, r7
   1ac34:	mov	r1, #3
   1ac38:	ldr	r2, [sp, #40]	; 0x28
   1ac3c:	mov	r3, #0
   1ac40:	bl	21bb4 <__assert_fail@plt+0xd55c>
   1ac44:	mov	r0, r9
   1ac48:	ldr	r1, [sp, #8]
   1ac4c:	ldr	r2, [sp, #40]	; 0x28
   1ac50:	bl	1990c <__assert_fail@plt+0x52b4>
   1ac54:	mov	fp, r0
   1ac58:	b	1abe8 <__assert_fail@plt+0x6590>
   1ac5c:	bl	13c44 <gcry_free@plt>
   1ac60:	ldr	r0, [sp, #40]	; 0x28
   1ac64:	bl	13c44 <gcry_free@plt>
   1ac68:	mov	r2, #5
   1ac6c:	mov	r0, fp
   1ac70:	movw	r1, #17032	; 0x4288
   1ac74:	movt	r1, #4
   1ac78:	bl	13cc8 <dcgettext@plt>
   1ac7c:	mov	r1, fp
   1ac80:	bl	3bf9c <__assert_fail@plt+0x27944>
   1ac84:	subs	r7, r0, #0
   1ac88:	beq	1ace8 <__assert_fail@plt+0x6690>
   1ac8c:	mov	r3, r7
   1ac90:	b	1ab40 <__assert_fail@plt+0x64e8>
   1ac94:	mov	r0, r9
   1ac98:	ldr	r1, [sp, #40]	; 0x28
   1ac9c:	mov	r2, fp
   1aca0:	bl	24244 <__assert_fail@plt+0xfbec>
   1aca4:	cmp	r0, #0
   1aca8:	beq	1ab80 <__assert_fail@plt+0x6528>
   1acac:	ldr	r0, [sp, #40]	; 0x28
   1acb0:	mov	r7, fp
   1acb4:	bl	13c44 <gcry_free@plt>
   1acb8:	mov	r3, r4
   1acbc:	b	1ab40 <__assert_fail@plt+0x64e8>
   1acc0:	mov	r0, r9
   1acc4:	mov	r1, #280	; 0x118
   1acc8:	movw	r2, #16008	; 0x3e88
   1accc:	movt	r1, #1024	; 0x400
   1acd0:	movt	r2, #4
   1acd4:	bl	142f8 <assuan_set_error@plt>
   1acd8:	b	1aa48 <__assert_fail@plt+0x63f0>
   1acdc:	ldr	r6, [sp, #12]
   1ace0:	b	1aa10 <__assert_fail@plt+0x63b8>
   1ace4:	bl	13cec <__stack_chk_fail@plt>
   1ace8:	ldr	r7, [sp, #36]	; 0x24
   1acec:	ldr	r9, [sp, #16]
   1acf0:	ldr	r6, [sp, #12]
   1acf4:	bl	14580 <gpg_err_code_from_syserror@plt>
   1acf8:	cmp	r0, #0
   1acfc:	uxthne	fp, r0
   1ad00:	orrne	fp, fp, #67108864	; 0x4000000
   1ad04:	bne	1abe8 <__assert_fail@plt+0x6590>
   1ad08:	b	1ac28 <__assert_fail@plt+0x65d0>
   1ad0c:	push	{r1, r2, r3}
   1ad10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ad14:	sub	sp, sp, #964	; 0x3c4
   1ad18:	add	r6, sp, #1004	; 0x3ec
   1ad1c:	movw	r8, #47296	; 0xb8c0
   1ad20:	movt	r8, #5
   1ad24:	ldr	lr, [r6, #-4]
   1ad28:	ldr	r2, [r0, #4]
   1ad2c:	add	r1, sp, #1000	; 0x3e8
   1ad30:	ldr	r3, [r8]
   1ad34:	cmp	lr, #0
   1ad38:	str	r1, [sp]
   1ad3c:	add	ip, sp, #4
   1ad40:	ldr	r0, [r2]
   1ad44:	mov	r5, #92	; 0x5c
   1ad48:	str	r3, [sp, #956]	; 0x3bc
   1ad4c:	mov	r2, #0
   1ad50:	ldr	r1, [sp, #996]	; 0x3e4
   1ad54:	mov	r9, #114	; 0x72
   1ad58:	mov	r7, #110	; 0x6e
   1ad5c:	movw	r4, #946	; 0x3b2
   1ad60:	mov	sl, #32
   1ad64:	beq	1ad8c <__assert_fail@plt+0x6734>
   1ad68:	cmp	r2, #0
   1ad6c:	bne	1ae08 <__assert_fail@plt+0x67b0>
   1ad70:	ldrb	r3, [lr]
   1ad74:	cmp	r3, #0
   1ad78:	bne	1adec <__assert_fail@plt+0x6794>
   1ad7c:	add	r6, r6, #4
   1ad80:	ldr	lr, [r6, #-4]
   1ad84:	cmp	lr, #0
   1ad88:	bne	1ad68 <__assert_fail@plt+0x6710>
   1ad8c:	add	r2, sp, #4
   1ad90:	strb	lr, [ip]
   1ad94:	bl	13c2c <assuan_write_status@plt>
   1ad98:	ldr	r2, [sp, #956]	; 0x3bc
   1ad9c:	ldr	r3, [r8]
   1ada0:	cmp	r2, r3
   1ada4:	bne	1ae28 <__assert_fail@plt+0x67d0>
   1ada8:	add	sp, sp, #964	; 0x3c4
   1adac:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1adb0:	add	sp, sp, #12
   1adb4:	bx	lr
   1adb8:	cmp	r3, #13
   1adbc:	strbne	r3, [ip]
   1adc0:	addne	ip, ip, #1
   1adc4:	moveq	r3, ip
   1adc8:	strbeq	r5, [r3], #2
   1adcc:	strbeq	r9, [ip, #1]
   1add0:	moveq	ip, r3
   1add4:	ldrb	r3, [lr, #1]!
   1add8:	add	r2, r2, #1
   1addc:	cmp	r3, #0
   1ade0:	beq	1ad7c <__assert_fail@plt+0x6724>
   1ade4:	cmp	r2, r4
   1ade8:	bhi	1ad7c <__assert_fail@plt+0x6724>
   1adec:	cmp	r3, #10
   1adf0:	bne	1adb8 <__assert_fail@plt+0x6760>
   1adf4:	mov	r3, ip
   1adf8:	strb	r5, [r3], #2
   1adfc:	strb	r7, [ip, #1]
   1ae00:	mov	ip, r3
   1ae04:	b	1add4 <__assert_fail@plt+0x677c>
   1ae08:	strb	sl, [ip]
   1ae0c:	add	r2, r2, #1
   1ae10:	ldrb	r3, [lr]
   1ae14:	add	ip, ip, #1
   1ae18:	cmp	r3, #0
   1ae1c:	bne	1ade4 <__assert_fail@plt+0x678c>
   1ae20:	add	r6, r6, #4
   1ae24:	b	1ad80 <__assert_fail@plt+0x6728>
   1ae28:	bl	13cec <__stack_chk_fail@plt>
   1ae2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1ae30:	movw	r4, #47296	; 0xb8c0
   1ae34:	movt	r4, #5
   1ae38:	sub	sp, sp, #136	; 0x88
   1ae3c:	mov	sl, r2
   1ae40:	mov	r8, r3
   1ae44:	ldr	lr, [r4]
   1ae48:	add	r2, sp, #40	; 0x28
   1ae4c:	add	r3, sp, #44	; 0x2c
   1ae50:	mov	ip, #0
   1ae54:	mov	r9, r0
   1ae58:	mov	r7, r1
   1ae5c:	str	lr, [sp, #132]	; 0x84
   1ae60:	str	ip, [sp, #36]	; 0x24
   1ae64:	str	ip, [sp, #44]	; 0x2c
   1ae68:	str	ip, [sp, #48]	; 0x30
   1ae6c:	str	ip, [sp, #52]	; 0x34
   1ae70:	ldr	r6, [sp, #172]	; 0xac
   1ae74:	bl	235d4 <__assert_fail@plt+0xef7c>
   1ae78:	subs	r5, r0, #0
   1ae7c:	beq	1aed4 <__assert_fail@plt+0x687c>
   1ae80:	cmp	r6, #0
   1ae84:	beq	1ae94 <__assert_fail@plt+0x683c>
   1ae88:	uxth	r3, r5
   1ae8c:	cmp	r3, #27
   1ae90:	beq	1aed0 <__assert_fail@plt+0x6878>
   1ae94:	ldr	r0, [sp, #36]	; 0x24
   1ae98:	bl	13c44 <gcry_free@plt>
   1ae9c:	ldr	r0, [sp, #44]	; 0x2c
   1aea0:	bl	13c44 <gcry_free@plt>
   1aea4:	ldr	r0, [sp, #48]	; 0x30
   1aea8:	bl	13c44 <gcry_free@plt>
   1aeac:	ldr	r0, [sp, #52]	; 0x34
   1aeb0:	bl	13c44 <gcry_free@plt>
   1aeb4:	ldr	r2, [sp, #132]	; 0x84
   1aeb8:	ldr	r3, [r4]
   1aebc:	mov	r0, r5
   1aec0:	cmp	r2, r3
   1aec4:	bne	1b158 <__assert_fail@plt+0x6b00>
   1aec8:	add	sp, sp, #136	; 0x88
   1aecc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aed0:	mov	r5, #1
   1aed4:	mov	r0, r7
   1aed8:	mov	r1, #20
   1aedc:	add	r2, sp, #88	; 0x58
   1aee0:	bl	2e26c <__assert_fail@plt+0x19c14>
   1aee4:	ldr	r3, [sp, #176]	; 0xb0
   1aee8:	cmp	r3, #0
   1aeec:	ble	1b134 <__assert_fail@plt+0x6adc>
   1aef0:	mov	r1, #20
   1aef4:	str	r3, [sp, #4]
   1aef8:	movw	r2, #29480	; 0x7328
   1aefc:	mov	r3, r1
   1af00:	movt	r2, #4
   1af04:	add	r0, sp, #68	; 0x44
   1af08:	str	r2, [sp]
   1af0c:	mov	r2, #1
   1af10:	bl	1464c <__snprintf_chk@plt>
   1af14:	ldr	ip, [sp, #180]	; 0xb4
   1af18:	mov	r3, #0
   1af1c:	strb	r3, [sp, #60]	; 0x3c
   1af20:	cmp	ip, #0
   1af24:	movne	r3, #68	; 0x44
   1af28:	strhne	r3, [sp, #60]	; 0x3c
   1af2c:	cmp	r6, #0
   1af30:	bne	1b11c <__assert_fail@plt+0x6ac4>
   1af34:	ldr	r3, [sp, #184]	; 0xb8
   1af38:	cmp	r3, #0
   1af3c:	bne	1b104 <__assert_fail@plt+0x6aac>
   1af40:	ldrb	r3, [sp, #60]	; 0x3c
   1af44:	cmp	r3, #0
   1af48:	moveq	r3, #45	; 0x2d
   1af4c:	strheq	r3, [sp, #60]	; 0x3c
   1af50:	cmp	r5, #0
   1af54:	movwne	r6, #17096	; 0x42c8
   1af58:	movtne	r6, #4
   1af5c:	bne	1af8c <__assert_fail@plt+0x6934>
   1af60:	ldr	r3, [sp, #40]	; 0x28
   1af64:	cmp	r3, #1
   1af68:	blt	1b0c4 <__assert_fail@plt+0x6a6c>
   1af6c:	cmp	r3, #2
   1af70:	movwle	r6, #17456	; 0x4430
   1af74:	movtle	r6, #4
   1af78:	ble	1af8c <__assert_fail@plt+0x6934>
   1af7c:	cmp	r3, #3
   1af80:	movweq	r6, #22244	; 0x56e4
   1af84:	movteq	r6, #4
   1af88:	bne	1b0c4 <__assert_fail@plt+0x6a6c>
   1af8c:	ldr	r5, [sp, #168]	; 0xa8
   1af90:	cmp	r5, #0
   1af94:	bne	1b0d0 <__assert_fail@plt+0x6a78>
   1af98:	ldr	r0, [sp, #44]	; 0x2c
   1af9c:	cmp	r0, #0
   1afa0:	beq	1afb8 <__assert_fail@plt+0x6960>
   1afa4:	add	r1, sp, #48	; 0x30
   1afa8:	add	r2, sp, #52	; 0x34
   1afac:	bl	26e1c <__assert_fail@plt+0x127c4>
   1afb0:	subs	r5, r0, #0
   1afb4:	bne	1ae94 <__assert_fail@plt+0x683c>
   1afb8:	cmp	r8, #0
   1afbc:	beq	1b044 <__assert_fail@plt+0x69ec>
   1afc0:	ldr	lr, [sp, #52]	; 0x34
   1afc4:	movw	r0, #17096	; 0x42c8
   1afc8:	ldr	ip, [sp, #36]	; 0x24
   1afcc:	movt	r0, #4
   1afd0:	cmp	lr, #0
   1afd4:	ldr	r3, [sp, #48]	; 0x30
   1afd8:	mov	r2, r6
   1afdc:	add	r1, sp, #88	; 0x58
   1afe0:	moveq	lr, r0
   1afe4:	cmp	ip, #0
   1afe8:	str	lr, [sp]
   1afec:	moveq	ip, r0
   1aff0:	cmp	r3, #0
   1aff4:	str	ip, [sp, #4]
   1aff8:	add	ip, sp, #60	; 0x3c
   1affc:	moveq	r3, r0
   1b000:	str	ip, [sp, #12]
   1b004:	add	r0, sp, #68	; 0x44
   1b008:	str	r0, [sp, #8]
   1b00c:	movw	r0, #17108	; 0x42d4
   1b010:	movt	r0, #4
   1b014:	bl	2ed14 <__assert_fail@plt+0x1a6bc>
   1b018:	subs	r6, r0, #0
   1b01c:	beq	1b140 <__assert_fail@plt+0x6ae8>
   1b020:	bl	14094 <strlen@plt>
   1b024:	mov	r1, r6
   1b028:	mov	r2, r0
   1b02c:	mov	r0, sl
   1b030:	bl	1413c <assuan_send_data@plt>
   1b034:	mov	r5, r0
   1b038:	mov	r0, r6
   1b03c:	bl	13c44 <gcry_free@plt>
   1b040:	b	1ae94 <__assert_fail@plt+0x683c>
   1b044:	ldr	r2, [sp, #48]	; 0x30
   1b048:	movw	r3, #17096	; 0x42c8
   1b04c:	ldr	lr, [sp, #52]	; 0x34
   1b050:	movt	r3, #4
   1b054:	cmp	r2, #0
   1b058:	ldr	ip, [sp, #36]	; 0x24
   1b05c:	movw	r1, #17096	; 0x42c8
   1b060:	movt	r1, #4
   1b064:	moveq	r2, r3
   1b068:	cmp	lr, #0
   1b06c:	str	r2, [sp]
   1b070:	mov	r0, r9
   1b074:	moveq	lr, r1
   1b078:	cmp	ip, #0
   1b07c:	str	r3, [sp, #8]
   1b080:	add	r2, sp, #88	; 0x58
   1b084:	moveq	ip, r1
   1b088:	str	r3, [sp, #12]
   1b08c:	str	lr, [sp, #4]
   1b090:	add	r1, sp, #60	; 0x3c
   1b094:	add	lr, sp, #68	; 0x44
   1b098:	str	ip, [sp, #16]
   1b09c:	str	r1, [sp, #24]
   1b0a0:	mov	ip, #0
   1b0a4:	mov	r3, r6
   1b0a8:	str	lr, [sp, #20]
   1b0ac:	movw	r1, #17100	; 0x42cc
   1b0b0:	str	ip, [sp, #28]
   1b0b4:	movt	r1, #4
   1b0b8:	bl	1ad0c <__assert_fail@plt+0x66b4>
   1b0bc:	mov	r5, r0
   1b0c0:	b	1ae94 <__assert_fail@plt+0x683c>
   1b0c4:	movw	r6, #37612	; 0x92ec
   1b0c8:	movt	r6, #4
   1b0cc:	b	1af8c <__assert_fail@plt+0x6934>
   1b0d0:	mov	r1, r7
   1b0d4:	mov	r0, r9
   1b0d8:	add	r2, sp, #56	; 0x38
   1b0dc:	bl	22e78 <__assert_fail@plt+0xe820>
   1b0e0:	cmp	r0, #0
   1b0e4:	bne	1af98 <__assert_fail@plt+0x6940>
   1b0e8:	ldr	r0, [sp, #56]	; 0x38
   1b0ec:	add	r1, sp, #36	; 0x24
   1b0f0:	mov	r2, #4
   1b0f4:	bl	39ff4 <__assert_fail@plt+0x2599c>
   1b0f8:	ldr	r0, [sp, #56]	; 0x38
   1b0fc:	bl	13be4 <gcry_sexp_release@plt>
   1b100:	b	1af98 <__assert_fail@plt+0x6940>
   1b104:	movw	r1, #16912	; 0x4210
   1b108:	add	r0, sp, #60	; 0x3c
   1b10c:	movt	r1, #4
   1b110:	mov	r2, #5
   1b114:	bl	14160 <__strcat_chk@plt>
   1b118:	b	1af40 <__assert_fail@plt+0x68e8>
   1b11c:	movw	r1, #16284	; 0x3f9c
   1b120:	add	r0, sp, #60	; 0x3c
   1b124:	movt	r1, #4
   1b128:	mov	r2, #5
   1b12c:	bl	14160 <__strcat_chk@plt>
   1b130:	b	1af34 <__assert_fail@plt+0x68dc>
   1b134:	mov	r3, #45	; 0x2d
   1b138:	strh	r3, [sp, #68]	; 0x44
   1b13c:	b	1af14 <__assert_fail@plt+0x68bc>
   1b140:	bl	14580 <gpg_err_code_from_syserror@plt>
   1b144:	cmp	r0, #0
   1b148:	uxthne	r0, r0
   1b14c:	orrne	r5, r0, #67108864	; 0x4000000
   1b150:	moveq	r5, r6
   1b154:	b	1b038 <__assert_fail@plt+0x69e0>
   1b158:	bl	13cec <__stack_chk_fail@plt>
   1b15c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b160:	movw	r7, #47296	; 0xb8c0
   1b164:	movt	r7, #5
   1b168:	sub	sp, sp, #124	; 0x7c
   1b16c:	mov	r4, r1
   1b170:	mov	r8, r0
   1b174:	ldr	r3, [r7]
   1b178:	str	r3, [sp, #116]	; 0x74
   1b17c:	bl	144f0 <assuan_get_pointer@plt>
   1b180:	movw	r1, #17136	; 0x42f0
   1b184:	movt	r1, #4
   1b188:	mov	r9, r0
   1b18c:	mov	r0, r4
   1b190:	bl	1922c <__assert_fail@plt+0x4bd4>
   1b194:	cmp	r0, #0
   1b198:	str	r0, [sp, #36]	; 0x24
   1b19c:	bne	1b328 <__assert_fail@plt+0x6cd0>
   1b1a0:	mov	r0, r4
   1b1a4:	movw	r1, #17148	; 0x42fc
   1b1a8:	movt	r1, #4
   1b1ac:	bl	1922c <__assert_fail@plt+0x4bd4>
   1b1b0:	movw	r1, #16976	; 0x4250
   1b1b4:	movt	r1, #4
   1b1b8:	mov	r5, r0
   1b1bc:	mov	r0, r4
   1b1c0:	bl	1922c <__assert_fail@plt+0x4bd4>
   1b1c4:	movw	r1, #17156	; 0x4304
   1b1c8:	movt	r1, #4
   1b1cc:	mov	fp, r0
   1b1d0:	mov	r0, r4
   1b1d4:	bl	1922c <__assert_fail@plt+0x4bd4>
   1b1d8:	movw	r1, #17168	; 0x4310
   1b1dc:	movt	r1, #4
   1b1e0:	str	r0, [sp, #28]
   1b1e4:	mov	r0, r4
   1b1e8:	bl	1922c <__assert_fail@plt+0x4bd4>
   1b1ec:	mov	r3, r0
   1b1f0:	adds	r3, r3, #0
   1b1f4:	mov	r0, r4
   1b1f8:	movne	r3, #1
   1b1fc:	str	r3, [sp, #32]
   1b200:	subs	r3, r5, #2
   1b204:	rsbs	r4, r3, #0
   1b208:	adcs	r4, r4, r3
   1b20c:	bl	18514 <__assert_fail@plt+0x3ebc>
   1b210:	ldr	ip, [sp, #32]
   1b214:	orrs	ip, r4, ip
   1b218:	ldreq	r6, [sp, #36]	; 0x24
   1b21c:	mov	r3, r0
   1b220:	bne	1b60c <__assert_fail@plt+0x6fb4>
   1b224:	cmp	r5, #0
   1b228:	beq	1b444 <__assert_fail@plt+0x6dec>
   1b22c:	movw	r3, #48116	; 0xbbf4
   1b230:	movt	r3, #5
   1b234:	movw	r1, #1708	; 0x6ac
   1b238:	mov	r2, #0
   1b23c:	ldr	r0, [r3, #20]
   1b240:	movt	r1, #4
   1b244:	bl	3b648 <__assert_fail@plt+0x26ff0>
   1b248:	subs	sl, r0, #0
   1b24c:	beq	1b5a0 <__assert_fail@plt+0x6f48>
   1b250:	bl	13ee4 <opendir@plt>
   1b254:	subs	r5, r0, #0
   1b258:	beq	1b5e0 <__assert_fail@plt+0x6f88>
   1b25c:	mov	r0, sl
   1b260:	bl	13c44 <gcry_free@plt>
   1b264:	mov	r0, r5
   1b268:	bl	14424 <readdir64@plt>
   1b26c:	subs	sl, r0, #0
   1b270:	beq	1b4c8 <__assert_fail@plt+0x6e70>
   1b274:	add	r4, sl, #19
   1b278:	mov	r0, r4
   1b27c:	bl	14094 <strlen@plt>
   1b280:	cmp	r0, #44	; 0x2c
   1b284:	bne	1b264 <__assert_fail@plt+0x6c0c>
   1b288:	add	r0, sl, #59	; 0x3b
   1b28c:	movw	r1, #17180	; 0x431c
   1b290:	movt	r1, #4
   1b294:	bl	13a28 <strcmp@plt>
   1b298:	subs	sl, r0, #0
   1b29c:	bne	1b264 <__assert_fail@plt+0x6c0c>
   1b2a0:	mov	r1, r4
   1b2a4:	mov	r2, #40	; 0x28
   1b2a8:	add	r0, sp, #72	; 0x48
   1b2ac:	bl	141e4 <strncpy@plt>
   1b2b0:	add	r0, sp, #72	; 0x48
   1b2b4:	add	r1, sp, #52	; 0x34
   1b2b8:	mov	r2, #20
   1b2bc:	strb	sl, [sp, #112]	; 0x70
   1b2c0:	bl	2dfd8 <__assert_fail@plt+0x19980>
   1b2c4:	cmp	r0, #0
   1b2c8:	blt	1b264 <__assert_fail@plt+0x6c0c>
   1b2cc:	ldr	ip, [sp, #32]
   1b2d0:	str	sl, [sp, #48]	; 0x30
   1b2d4:	cmp	ip, #0
   1b2d8:	str	sl, [sp, #44]	; 0x2c
   1b2dc:	str	sl, [sp, #40]	; 0x28
   1b2e0:	beq	1b4ec <__assert_fail@plt+0x6e94>
   1b2e4:	add	r3, sp, #48	; 0x30
   1b2e8:	add	r2, sp, #40	; 0x28
   1b2ec:	str	r3, [sp]
   1b2f0:	mov	r0, r6
   1b2f4:	add	r1, sp, #72	; 0x48
   1b2f8:	add	r3, sp, #44	; 0x2c
   1b2fc:	bl	1f250 <__assert_fail@plt+0xabf8>
   1b300:	subs	r2, r0, #0
   1b304:	beq	1b538 <__assert_fail@plt+0x6ee0>
   1b308:	uxth	r3, r2
   1b30c:	cmp	r3, #27
   1b310:	bne	1b530 <__assert_fail@plt+0x6ed8>
   1b314:	mov	ip, sl
   1b318:	ldr	r2, [sp, #44]	; 0x2c
   1b31c:	ldr	r3, [sp, #40]	; 0x28
   1b320:	ldr	lr, [sp, #48]	; 0x30
   1b324:	b	1b4fc <__assert_fail@plt+0x6ea4>
   1b328:	movw	r1, #16976	; 0x4250
   1b32c:	mov	r0, r4
   1b330:	movt	r1, #4
   1b334:	bl	1922c <__assert_fail@plt+0x4bd4>
   1b338:	movw	r1, #17156	; 0x4304
   1b33c:	movt	r1, #4
   1b340:	mov	fp, r0
   1b344:	mov	r0, r4
   1b348:	bl	1922c <__assert_fail@plt+0x4bd4>
   1b34c:	str	r0, [sp, #28]
   1b350:	mov	r0, r4
   1b354:	bl	18514 <__assert_fail@plt+0x3ebc>
   1b358:	bl	1f17c <__assert_fail@plt+0xab24>
   1b35c:	mov	r6, r0
   1b360:	cmp	r6, #0
   1b364:	beq	1b5d4 <__assert_fail@plt+0x6f7c>
   1b368:	add	r4, sp, #48	; 0x30
   1b36c:	mov	r5, #1
   1b370:	str	r4, [sp]
   1b374:	mov	r0, r6
   1b378:	add	r1, sp, #72	; 0x48
   1b37c:	add	r2, sp, #40	; 0x28
   1b380:	add	r3, sp, #44	; 0x2c
   1b384:	bl	1f1cc <__assert_fail@plt+0xab74>
   1b388:	cmp	r0, #0
   1b38c:	bne	1b54c <__assert_fail@plt+0x6ef4>
   1b390:	add	r0, sp, #72	; 0x48
   1b394:	add	r1, sp, #52	; 0x34
   1b398:	mov	r2, #20
   1b39c:	bl	2dfd8 <__assert_fail@plt+0x19980>
   1b3a0:	cmp	r0, #0
   1b3a4:	blt	1b370 <__assert_fail@plt+0x6d18>
   1b3a8:	ldr	r2, [sp, #44]	; 0x2c
   1b3ac:	mov	r0, r9
   1b3b0:	ldr	r3, [sp, #40]	; 0x28
   1b3b4:	add	r1, sp, #52	; 0x34
   1b3b8:	ldr	ip, [sp, #48]	; 0x30
   1b3bc:	ldr	lr, [sp, #28]
   1b3c0:	str	r2, [sp, #8]
   1b3c4:	mov	r2, r8
   1b3c8:	str	r3, [sp, #12]
   1b3cc:	mov	r3, fp
   1b3d0:	str	lr, [sp]
   1b3d4:	str	r5, [sp, #4]
   1b3d8:	str	ip, [sp, #16]
   1b3dc:	bl	1ae2c <__assert_fail@plt+0x67d4>
   1b3e0:	subs	r2, r0, #0
   1b3e4:	beq	1b370 <__assert_fail@plt+0x6d18>
   1b3e8:	mov	r4, r2
   1b3ec:	mov	r0, r6
   1b3f0:	str	r2, [sp, #24]
   1b3f4:	bl	1f1c8 <__assert_fail@plt+0xab70>
   1b3f8:	ldr	r2, [sp, #24]
   1b3fc:	cmp	r2, #0
   1b400:	beq	1b428 <__assert_fail@plt+0x6dd0>
   1b404:	uxth	r2, r4
   1b408:	cmp	r2, #27
   1b40c:	beq	1b428 <__assert_fail@plt+0x6dd0>
   1b410:	mov	r0, r4
   1b414:	bl	13a64 <gpg_strerror@plt>
   1b418:	mov	r1, r0
   1b41c:	movw	r0, #17188	; 0x4324
   1b420:	movt	r0, #4
   1b424:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1b428:	ldr	r2, [sp, #116]	; 0x74
   1b42c:	mov	r0, r4
   1b430:	ldr	r3, [r7]
   1b434:	cmp	r2, r3
   1b438:	bne	1b608 <__assert_fail@plt+0x6fb0>
   1b43c:	add	sp, sp, #124	; 0x7c
   1b440:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b444:	mov	r1, r3
   1b448:	add	r2, sp, #52	; 0x34
   1b44c:	mov	r0, r8
   1b450:	str	r3, [sp, #24]
   1b454:	bl	1a2ec <__assert_fail@plt+0x5c94>
   1b458:	ldr	r3, [sp, #24]
   1b45c:	subs	r2, r0, #0
   1b460:	bne	1b3e8 <__assert_fail@plt+0x6d90>
   1b464:	ldr	ip, [sp, #32]
   1b468:	str	r5, [sp, #48]	; 0x30
   1b46c:	cmp	ip, #0
   1b470:	str	r5, [sp, #44]	; 0x2c
   1b474:	str	r5, [sp, #40]	; 0x28
   1b478:	beq	1b558 <__assert_fail@plt+0x6f00>
   1b47c:	mov	r1, r3
   1b480:	add	r2, sp, #40	; 0x28
   1b484:	add	r3, sp, #48	; 0x30
   1b488:	mov	r0, r6
   1b48c:	str	r3, [sp]
   1b490:	add	r3, sp, #44	; 0x2c
   1b494:	bl	1f250 <__assert_fail@plt+0xabf8>
   1b498:	cmp	r0, #0
   1b49c:	mov	r4, r0
   1b4a0:	mov	r2, r0
   1b4a4:	beq	1b5bc <__assert_fail@plt+0x6f64>
   1b4a8:	uxth	r1, r0
   1b4ac:	cmp	r1, #27
   1b4b0:	bne	1b3ec <__assert_fail@plt+0x6d94>
   1b4b4:	ldr	ip, [sp, #48]	; 0x30
   1b4b8:	ldr	r2, [sp, #44]	; 0x2c
   1b4bc:	ldr	r3, [sp, #40]	; 0x28
   1b4c0:	str	ip, [sp, #36]	; 0x24
   1b4c4:	b	1b564 <__assert_fail@plt+0x6f0c>
   1b4c8:	mov	r4, sl
   1b4cc:	mov	r2, sl
   1b4d0:	mov	r0, r6
   1b4d4:	str	r2, [sp, #24]
   1b4d8:	bl	1f1c8 <__assert_fail@plt+0xab70>
   1b4dc:	mov	r0, r5
   1b4e0:	bl	14628 <closedir@plt>
   1b4e4:	ldr	r2, [sp, #24]
   1b4e8:	b	1b3fc <__assert_fail@plt+0x6da4>
   1b4ec:	ldr	lr, [sp, #32]
   1b4f0:	mov	r3, lr
   1b4f4:	mov	r2, lr
   1b4f8:	mov	ip, lr
   1b4fc:	ldr	r1, [sp, #28]
   1b500:	mov	r0, r9
   1b504:	str	r2, [sp, #8]
   1b508:	mov	r2, r8
   1b50c:	str	r3, [sp, #12]
   1b510:	mov	r3, fp
   1b514:	str	r1, [sp]
   1b518:	add	r1, sp, #52	; 0x34
   1b51c:	str	ip, [sp, #4]
   1b520:	str	lr, [sp, #16]
   1b524:	bl	1ae2c <__assert_fail@plt+0x67d4>
   1b528:	subs	r2, r0, #0
   1b52c:	beq	1b264 <__assert_fail@plt+0x6c0c>
   1b530:	mov	r4, r2
   1b534:	b	1b4d0 <__assert_fail@plt+0x6e78>
   1b538:	ldr	r2, [sp, #44]	; 0x2c
   1b53c:	mov	ip, #1
   1b540:	ldr	r3, [sp, #40]	; 0x28
   1b544:	ldr	lr, [sp, #48]	; 0x30
   1b548:	b	1b4fc <__assert_fail@plt+0x6ea4>
   1b54c:	mov	r4, #0
   1b550:	mov	r2, r4
   1b554:	b	1b3ec <__assert_fail@plt+0x6d94>
   1b558:	ldr	r3, [sp, #32]
   1b55c:	mov	r2, r3
   1b560:	mov	r5, r3
   1b564:	ldr	ip, [sp, #28]
   1b568:	mov	r0, r9
   1b56c:	str	r2, [sp, #8]
   1b570:	add	r1, sp, #52	; 0x34
   1b574:	str	r3, [sp, #12]
   1b578:	mov	r2, r8
   1b57c:	str	ip, [sp]
   1b580:	mov	r3, fp
   1b584:	ldr	ip, [sp, #36]	; 0x24
   1b588:	str	r5, [sp, #4]
   1b58c:	str	ip, [sp, #16]
   1b590:	bl	1ae2c <__assert_fail@plt+0x67d4>
   1b594:	mov	r4, r0
   1b598:	mov	r2, r0
   1b59c:	b	1b3ec <__assert_fail@plt+0x6d94>
   1b5a0:	bl	14580 <gpg_err_code_from_syserror@plt>
   1b5a4:	cmp	r0, #0
   1b5a8:	beq	1b594 <__assert_fail@plt+0x6f3c>
   1b5ac:	uxth	r3, r0
   1b5b0:	orr	r4, r3, #67108864	; 0x4000000
   1b5b4:	mov	r2, r4
   1b5b8:	b	1b3ec <__assert_fail@plt+0x6d94>
   1b5bc:	ldr	ip, [sp, #48]	; 0x30
   1b5c0:	mov	r5, #1
   1b5c4:	ldr	r2, [sp, #44]	; 0x2c
   1b5c8:	ldr	r3, [sp, #40]	; 0x28
   1b5cc:	str	ip, [sp, #36]	; 0x24
   1b5d0:	b	1b564 <__assert_fail@plt+0x6f0c>
   1b5d4:	mov	r4, r6
   1b5d8:	mov	r2, r6
   1b5dc:	b	1b3ec <__assert_fail@plt+0x6d94>
   1b5e0:	bl	14580 <gpg_err_code_from_syserror@plt>
   1b5e4:	cmp	r0, #0
   1b5e8:	uxthne	r3, r0
   1b5ec:	moveq	r4, r0
   1b5f0:	mov	r0, sl
   1b5f4:	orrne	r4, r3, #67108864	; 0x4000000
   1b5f8:	str	r4, [sp, #24]
   1b5fc:	bl	13c44 <gcry_free@plt>
   1b600:	ldr	r2, [sp, #24]
   1b604:	b	1b3ec <__assert_fail@plt+0x6d94>
   1b608:	bl	13cec <__stack_chk_fail@plt>
   1b60c:	str	r0, [sp, #24]
   1b610:	bl	1f17c <__assert_fail@plt+0xab24>
   1b614:	cmp	r4, #0
   1b618:	ldr	r3, [sp, #24]
   1b61c:	mov	r6, r0
   1b620:	beq	1b224 <__assert_fail@plt+0x6bcc>
   1b624:	b	1b360 <__assert_fail@plt+0x6d08>
   1b628:	push	{r4, r5, r6, r7, r8, lr}
   1b62c:	movw	r6, #47296	; 0xb8c0
   1b630:	movt	r6, #5
   1b634:	sub	sp, sp, #96	; 0x60
   1b638:	movw	r5, #48248	; 0xbc78
   1b63c:	movt	r5, #5
   1b640:	ldr	r3, [r6]
   1b644:	movw	r4, #17216	; 0x4340
   1b648:	movt	r4, #4
   1b64c:	add	r7, sp, #64	; 0x40
   1b650:	str	r3, [sp, #92]	; 0x5c
   1b654:	bl	144f0 <assuan_get_pointer@plt>
   1b658:	ldr	ip, [r5]
   1b65c:	mov	r1, #25
   1b660:	mov	r3, r1
   1b664:	mov	r2, #1
   1b668:	str	r4, [sp]
   1b66c:	str	ip, [sp, #4]
   1b670:	mov	r8, r0
   1b674:	add	r0, sp, #8
   1b678:	bl	1464c <__snprintf_chk@plt>
   1b67c:	ldr	r2, [r5, #4]
   1b680:	mov	r1, #25
   1b684:	str	r4, [sp]
   1b688:	mov	r3, r1
   1b68c:	add	r0, sp, #36	; 0x24
   1b690:	str	r2, [sp, #4]
   1b694:	mov	r2, #1
   1b698:	bl	1464c <__snprintf_chk@plt>
   1b69c:	ldr	r2, [r5, #8]
   1b6a0:	mov	r1, #25
   1b6a4:	str	r4, [sp]
   1b6a8:	mov	r3, r1
   1b6ac:	mov	r0, r7
   1b6b0:	str	r2, [sp, #4]
   1b6b4:	mov	r2, #1
   1b6b8:	bl	1464c <__snprintf_chk@plt>
   1b6bc:	add	r2, sp, #8
   1b6c0:	add	r3, sp, #36	; 0x24
   1b6c4:	mov	ip, #0
   1b6c8:	str	r7, [sp]
   1b6cc:	mov	r0, r8
   1b6d0:	movw	r1, #17220	; 0x4344
   1b6d4:	str	ip, [sp, #4]
   1b6d8:	movt	r1, #4
   1b6dc:	bl	1ad0c <__assert_fail@plt+0x66b4>
   1b6e0:	ldr	r2, [sp, #92]	; 0x5c
   1b6e4:	ldr	r3, [r6]
   1b6e8:	cmp	r2, r3
   1b6ec:	bne	1b6f8 <__assert_fail@plt+0x70a0>
   1b6f0:	add	sp, sp, #96	; 0x60
   1b6f4:	pop	{r4, r5, r6, r7, r8, pc}
   1b6f8:	bl	13cec <__stack_chk_fail@plt>
   1b6fc:	push	{r4, r5, lr}
   1b700:	movw	r4, #47296	; 0xb8c0
   1b704:	movt	r4, #5
   1b708:	sub	sp, sp, #116	; 0x74
   1b70c:	subs	r5, r0, #0
   1b710:	ldr	r3, [r4]
   1b714:	str	r3, [sp, #108]	; 0x6c
   1b718:	beq	1b794 <__assert_fail@plt+0x713c>
   1b71c:	ldr	r3, [r5, #4]
   1b720:	cmp	r3, #0
   1b724:	beq	1b79c <__assert_fail@plt+0x7144>
   1b728:	ldr	r0, [r3, #24]
   1b72c:	cmp	r0, #0
   1b730:	bne	1b74c <__assert_fail@plt+0x70f4>
   1b734:	ldr	r2, [sp, #108]	; 0x6c
   1b738:	ldr	r3, [r4]
   1b73c:	cmp	r2, r3
   1b740:	bne	1b7a4 <__assert_fail@plt+0x714c>
   1b744:	add	sp, sp, #116	; 0x74
   1b748:	pop	{r4, r5, pc}
   1b74c:	str	r1, [sp, #4]
   1b750:	add	r0, sp, #8
   1b754:	mov	r1, #99	; 0x63
   1b758:	mov	r2, #1
   1b75c:	movw	r3, #17236	; 0x4354
   1b760:	movt	r3, #4
   1b764:	str	r3, [sp]
   1b768:	mov	r3, #100	; 0x64
   1b76c:	bl	1464c <__snprintf_chk@plt>
   1b770:	ldr	r3, [r5, #4]
   1b774:	mov	ip, #0
   1b778:	add	r1, sp, #8
   1b77c:	mov	r2, ip
   1b780:	ldr	r0, [r3]
   1b784:	mov	r3, ip
   1b788:	str	ip, [sp]
   1b78c:	bl	13dd0 <assuan_inquire@plt>
   1b790:	b	1b734 <__assert_fail@plt+0x70dc>
   1b794:	mov	r0, r5
   1b798:	b	1b734 <__assert_fail@plt+0x70dc>
   1b79c:	mov	r0, r3
   1b7a0:	b	1b734 <__assert_fail@plt+0x70dc>
   1b7a4:	bl	13cec <__stack_chk_fail@plt>
   1b7a8:	movw	r3, #48248	; 0xbc78
   1b7ac:	movt	r3, #5
   1b7b0:	ldr	r1, [r3, #4]
   1b7b4:	ldr	r2, [r3]
   1b7b8:	add	r1, r1, #1
   1b7bc:	str	r1, [r3, #4]
   1b7c0:	add	r2, r2, #1
   1b7c4:	str	r2, [r3]
   1b7c8:	bx	lr
   1b7cc:	movw	r3, #48248	; 0xbc78
   1b7d0:	movt	r3, #5
   1b7d4:	ldr	r1, [r3, #8]
   1b7d8:	ldr	r2, [r3]
   1b7dc:	add	r1, r1, #1
   1b7e0:	str	r1, [r3, #8]
   1b7e4:	add	r2, r2, #1
   1b7e8:	str	r2, [r3]
   1b7ec:	bx	lr
   1b7f0:	push	{r4, r5, r6, r7, r8, lr}
   1b7f4:	movw	r8, #47296	; 0xb8c0
   1b7f8:	movt	r8, #5
   1b7fc:	sub	sp, sp, #16
   1b800:	add	r3, sp, #16
   1b804:	mov	r7, r0
   1b808:	ldr	ip, [r8]
   1b80c:	mov	r0, #0
   1b810:	str	r0, [r3, #-16]!
   1b814:	mov	r0, sp
   1b818:	mov	r4, r1
   1b81c:	mov	r5, r2
   1b820:	str	ip, [sp, #12]
   1b824:	bl	14070 <assuan_new@plt>
   1b828:	cmp	r0, #0
   1b82c:	bne	1ba3c <__assert_fail@plt+0x73e4>
   1b830:	cmn	r5, #1
   1b834:	cmneq	r4, #1
   1b838:	movne	r2, #0
   1b83c:	moveq	r2, #1
   1b840:	beq	1b9f4 <__assert_fail@plt+0x739c>
   1b844:	cmn	r4, #1
   1b848:	movne	r1, r4
   1b84c:	ldrne	r0, [sp]
   1b850:	moveq	r1, r5
   1b854:	ldreq	r0, [sp]
   1b858:	moveq	r2, #2
   1b85c:	bl	14340 <assuan_init_socket_server@plt>
   1b860:	cmp	r0, #0
   1b864:	bne	1ba20 <__assert_fail@plt+0x73c8>
   1b868:	movw	r5, #15696	; 0x3d50
   1b86c:	ldr	r6, [sp]
   1b870:	ldr	r4, [pc, #484]	; 1ba5c <__assert_fail@plt+0x7404>
   1b874:	movt	r5, #4
   1b878:	b	1b88c <__assert_fail@plt+0x7234>
   1b87c:	add	r4, r4, #12
   1b880:	ldr	r5, [r4, #-4]
   1b884:	cmp	r5, #0
   1b888:	beq	1b8c0 <__assert_fail@plt+0x7268>
   1b88c:	mov	r1, r5
   1b890:	mov	r0, r6
   1b894:	ldm	r4, {r2, r3}
   1b898:	bl	14058 <assuan_register_command@plt>
   1b89c:	cmp	r0, #0
   1b8a0:	beq	1b87c <__assert_fail@plt+0x7224>
   1b8a4:	bl	13a64 <gpg_strerror@plt>
   1b8a8:	mov	r1, r0
   1b8ac:	movw	r0, #17400	; 0x43f8
   1b8b0:	movt	r0, #4
   1b8b4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1b8b8:	mov	r0, #2
   1b8bc:	bl	17c44 <__assert_fail@plt+0x35ec>
   1b8c0:	movw	r1, #34184	; 0x8588
   1b8c4:	mov	r0, r6
   1b8c8:	movt	r1, #1
   1b8cc:	movw	r4, #16383	; 0x3fff
   1b8d0:	bl	13e90 <assuan_register_post_cmd_notify@plt>
   1b8d4:	mov	r0, r6
   1b8d8:	movw	r1, #34976	; 0x88a0
   1b8dc:	movt	r1, #1
   1b8e0:	bl	13cbc <assuan_register_reset_notify@plt>
   1b8e4:	mov	r0, r6
   1b8e8:	movw	r1, #34364	; 0x863c
   1b8ec:	movt	r1, #1
   1b8f0:	bl	141c0 <assuan_register_option_handler@plt>
   1b8f4:	ldr	r0, [sp]
   1b8f8:	mov	r1, r7
   1b8fc:	bl	13e3c <assuan_set_pointer@plt>
   1b900:	mov	r1, #28
   1b904:	mov	r0, #1
   1b908:	bl	14538 <gcry_xcalloc@plt>
   1b90c:	ldr	r1, [sp]
   1b910:	mvn	r2, #0
   1b914:	mov	r3, r0
   1b918:	str	r0, [r7, #4]
   1b91c:	str	r2, [r3, #4]
   1b920:	mov	r0, #1
   1b924:	str	r1, [r3]
   1b928:	mov	r2, r5
   1b92c:	str	r0, [r3, #8]
   1b930:	mov	r0, r1
   1b934:	ldrb	r3, [r7, #96]	; 0x60
   1b938:	movw	r1, #34208	; 0x85a0
   1b93c:	movt	r1, #1
   1b940:	bfi	r3, r5, #0, #1
   1b944:	strb	r3, [r7, #96]	; 0x60
   1b948:	bl	13ecc <assuan_set_io_monitor@plt>
   1b94c:	ldr	r0, [sp]
   1b950:	bl	14238 <assuan_accept@plt>
   1b954:	uxth	r2, r0
   1b958:	cmp	r2, r4
   1b95c:	beq	1b9ac <__assert_fail@plt+0x7354>
   1b960:	cmn	r0, #1
   1b964:	beq	1b9ac <__assert_fail@plt+0x7354>
   1b968:	cmp	r0, #0
   1b96c:	bne	1b998 <__assert_fail@plt+0x7340>
   1b970:	ldr	r0, [sp]
   1b974:	bl	13ca4 <assuan_process@plt>
   1b978:	cmp	r0, #0
   1b97c:	beq	1b94c <__assert_fail@plt+0x72f4>
   1b980:	bl	13a64 <gpg_strerror@plt>
   1b984:	mov	r1, r0
   1b988:	movw	r0, #17368	; 0x43d8
   1b98c:	movt	r0, #4
   1b990:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1b994:	b	1b94c <__assert_fail@plt+0x72f4>
   1b998:	bl	13a64 <gpg_strerror@plt>
   1b99c:	mov	r1, r0
   1b9a0:	movw	r0, #17340	; 0x43bc
   1b9a4:	movt	r0, #4
   1b9a8:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1b9ac:	mov	r0, r7
   1b9b0:	bl	29ffc <__assert_fail@plt+0x159a4>
   1b9b4:	mov	r0, r7
   1b9b8:	bl	21868 <__assert_fail@plt+0xd210>
   1b9bc:	ldr	r0, [sp]
   1b9c0:	bl	14388 <assuan_release@plt>
   1b9c4:	ldr	r0, [r7, #4]
   1b9c8:	ldr	r4, [r0, #20]
   1b9cc:	cmp	r4, #0
   1b9d0:	bne	1ba18 <__assert_fail@plt+0x73c0>
   1b9d4:	bl	13c44 <gcry_free@plt>
   1b9d8:	ldr	r2, [sp, #12]
   1b9dc:	ldr	r3, [r8]
   1b9e0:	str	r4, [r7, #4]
   1b9e4:	cmp	r2, r3
   1b9e8:	bne	1ba58 <__assert_fail@plt+0x7400>
   1b9ec:	add	sp, sp, #16
   1b9f0:	pop	{r4, r5, r6, r7, r8, pc}
   1b9f4:	bl	13fe0 <assuan_fdopen@plt>
   1b9f8:	str	r0, [sp, #4]
   1b9fc:	mov	r0, #1
   1ba00:	bl	13fe0 <assuan_fdopen@plt>
   1ba04:	add	r1, sp, #4
   1ba08:	str	r0, [sp, #8]
   1ba0c:	ldr	r0, [sp]
   1ba10:	bl	140e8 <assuan_init_pipe_server@plt>
   1ba14:	b	1b860 <__assert_fail@plt+0x7208>
   1ba18:	mov	r0, #0
   1ba1c:	bl	17c44 <__assert_fail@plt+0x35ec>
   1ba20:	bl	13a64 <gpg_strerror@plt>
   1ba24:	mov	r1, r0
   1ba28:	movw	r0, #17300	; 0x4394
   1ba2c:	movt	r0, #4
   1ba30:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1ba34:	mov	r0, #2
   1ba38:	bl	17c44 <__assert_fail@plt+0x35ec>
   1ba3c:	bl	13a64 <gpg_strerror@plt>
   1ba40:	mov	r1, r0
   1ba44:	movw	r0, #17260	; 0x436c
   1ba48:	movt	r0, #4
   1ba4c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1ba50:	mov	r0, #2
   1ba54:	bl	17c44 <__assert_fail@plt+0x35ec>
   1ba58:	bl	13cec <__stack_chk_fail@plt>
   1ba5c:	ldrdeq	r1, [r4], -ip
   1ba60:	push	{r4, lr}
   1ba64:	subs	r4, r0, #0
   1ba68:	popeq	{r4, pc}
   1ba6c:	ldr	r0, [r4, #4]
   1ba70:	bl	142c8 <fclose@plt>
   1ba74:	ldr	r0, [r4]
   1ba78:	bl	13c44 <gcry_free@plt>
   1ba7c:	mov	r0, r4
   1ba80:	pop	{r4, lr}
   1ba84:	b	13c44 <gcry_free@plt>
   1ba88:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1ba8c:	mov	r7, r0
   1ba90:	mov	r8, r1
   1ba94:	mov	r0, #1
   1ba98:	mov	r1, #72	; 0x48
   1ba9c:	bl	14190 <gcry_calloc@plt>
   1baa0:	subs	r4, r0, #0
   1baa4:	beq	1bb0c <__assert_fail@plt+0x74b4>
   1baa8:	movw	r3, #48116	; 0xbbf4
   1baac:	movt	r3, #5
   1bab0:	movw	r1, #18736	; 0x4930
   1bab4:	mov	r2, #0
   1bab8:	ldr	r0, [r3, #20]
   1babc:	movt	r1, #4
   1bac0:	bl	3b648 <__assert_fail@plt+0x26ff0>
   1bac4:	cmp	r0, #0
   1bac8:	str	r0, [r4]
   1bacc:	beq	1bbb4 <__assert_fail@plt+0x755c>
   1bad0:	cmp	r8, #0
   1bad4:	movw	r6, #18760	; 0x4948
   1bad8:	movw	r5, #18732	; 0x492c
   1badc:	movt	r6, #4
   1bae0:	movt	r5, #4
   1bae4:	moveq	r1, r6
   1bae8:	movne	r1, r5
   1baec:	bl	14490 <fopen64@plt>
   1baf0:	cmp	r0, #0
   1baf4:	str	r0, [r4, #4]
   1baf8:	beq	1bb24 <__assert_fail@plt+0x74cc>
   1bafc:	mov	r5, #0
   1bb00:	str	r4, [r7]
   1bb04:	mov	r0, r5
   1bb08:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1bb0c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1bb10:	cmp	r0, #0
   1bb14:	uxthne	r5, r0
   1bb18:	orrne	r5, r5, #67108864	; 0x4000000
   1bb1c:	bne	1bb00 <__assert_fail@plt+0x74a8>
   1bb20:	b	1bafc <__assert_fail@plt+0x74a4>
   1bb24:	bl	14148 <__errno_location@plt>
   1bb28:	ldr	r3, [r0]
   1bb2c:	cmp	r3, #2
   1bb30:	beq	1bbcc <__assert_fail@plt+0x7574>
   1bb34:	bl	14580 <gpg_err_code_from_syserror@plt>
   1bb38:	cmp	r0, #0
   1bb3c:	moveq	r6, r0
   1bb40:	moveq	r5, r6
   1bb44:	uxthne	r5, r0
   1bb48:	movne	r6, #1
   1bb4c:	orrne	r5, r5, #67108864	; 0x4000000
   1bb50:	movw	r1, #18788	; 0x4964
   1bb54:	movt	r1, #4
   1bb58:	mov	r0, #0
   1bb5c:	mov	r2, #5
   1bb60:	bl	13cc8 <dcgettext@plt>
   1bb64:	ldr	r8, [r4]
   1bb68:	mov	r9, r0
   1bb6c:	mov	r0, r5
   1bb70:	bl	13a64 <gpg_strerror@plt>
   1bb74:	mov	r1, r8
   1bb78:	mov	r2, r0
   1bb7c:	mov	r0, r9
   1bb80:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1bb84:	cmp	r6, #0
   1bb88:	beq	1bb00 <__assert_fail@plt+0x74a8>
   1bb8c:	ldr	r0, [r4, #4]
   1bb90:	cmp	r0, #0
   1bb94:	beq	1bb9c <__assert_fail@plt+0x7544>
   1bb98:	bl	142c8 <fclose@plt>
   1bb9c:	ldr	r0, [r4]
   1bba0:	bl	13c44 <gcry_free@plt>
   1bba4:	mov	r0, r4
   1bba8:	bl	13c44 <gcry_free@plt>
   1bbac:	mov	r0, r5
   1bbb0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1bbb4:	bl	14580 <gpg_err_code_from_syserror@plt>
   1bbb8:	cmp	r0, #0
   1bbbc:	uxthne	r0, r0
   1bbc0:	orrne	r5, r0, #67108864	; 0x4000000
   1bbc4:	bne	1bb8c <__assert_fail@plt+0x7534>
   1bbc8:	b	1bafc <__assert_fail@plt+0x74a4>
   1bbcc:	movw	r1, #18748	; 0x493c
   1bbd0:	ldr	r0, [r4]
   1bbd4:	movt	r1, #4
   1bbd8:	bl	34354 <__assert_fail@plt+0x1fcfc>
   1bbdc:	subs	r9, r0, #0
   1bbe0:	beq	1bc20 <__assert_fail@plt+0x75c8>
   1bbe4:	mov	r1, r9
   1bbe8:	movw	r0, #17728	; 0x4540
   1bbec:	movt	r0, #4
   1bbf0:	bl	35c7c <__assert_fail@plt+0x21624>
   1bbf4:	mov	r0, r9
   1bbf8:	bl	34ea0 <__assert_fail@plt+0x20848>
   1bbfc:	cmp	r8, #0
   1bc00:	ldr	r0, [r4]
   1bc04:	moveq	r1, r6
   1bc08:	movne	r1, r5
   1bc0c:	bl	14490 <fopen64@plt>
   1bc10:	cmp	r0, #0
   1bc14:	str	r0, [r4, #4]
   1bc18:	bne	1bafc <__assert_fail@plt+0x74a4>
   1bc1c:	b	1bb34 <__assert_fail@plt+0x74dc>
   1bc20:	bl	14580 <gpg_err_code_from_syserror@plt>
   1bc24:	movw	r1, #18764	; 0x494c
   1bc28:	movt	r1, #4
   1bc2c:	cmp	r0, #0
   1bc30:	uxthne	r0, r0
   1bc34:	moveq	r6, r0
   1bc38:	orrne	r5, r0, #67108864	; 0x4000000
   1bc3c:	movne	r6, #1
   1bc40:	moveq	r5, r6
   1bc44:	mov	r0, #0
   1bc48:	b	1bb5c <__assert_fail@plt+0x7504>
   1bc4c:	push	{r4, r5, r6, r7, r8, r9, lr}
   1bc50:	movw	r7, #47296	; 0xb8c0
   1bc54:	movt	r7, #5
   1bc58:	sub	sp, sp, #276	; 0x114
   1bc5c:	mov	r5, r0
   1bc60:	mov	r2, #0
   1bc64:	ldr	r3, [r7]
   1bc68:	str	r2, [r0, #12]
   1bc6c:	ldr	r0, [r0, #4]
   1bc70:	str	r3, [sp, #268]	; 0x10c
   1bc74:	bl	14400 <clearerr@plt>
   1bc78:	add	r0, sp, #12
   1bc7c:	mov	r1, #255	; 0xff
   1bc80:	ldr	r2, [r5, #4]
   1bc84:	bl	13b54 <fgets@plt>
   1bc88:	cmp	r0, #0
   1bc8c:	beq	1bdc8 <__assert_fail@plt+0x7770>
   1bc90:	ldrb	r4, [sp, #12]
   1bc94:	ldr	r6, [r5, #8]
   1bc98:	cmp	r4, #0
   1bc9c:	add	r6, r6, #1
   1bca0:	str	r6, [r5, #8]
   1bca4:	beq	1bd80 <__assert_fail@plt+0x7728>
   1bca8:	add	r0, sp, #12
   1bcac:	bl	14094 <strlen@plt>
   1bcb0:	add	r2, sp, #272	; 0x110
   1bcb4:	add	r0, r2, r0
   1bcb8:	ldrb	r3, [r0, #-261]	; 0xfffffefb
   1bcbc:	cmp	r3, #10
   1bcc0:	bne	1bd80 <__assert_fail@plt+0x7728>
   1bcc4:	cmp	r4, #32
   1bcc8:	cmpne	r4, #9
   1bccc:	addne	r1, sp, #12
   1bcd0:	bne	1bcec <__assert_fail@plt+0x7694>
   1bcd4:	add	r3, sp, #13
   1bcd8:	mov	r1, r3
   1bcdc:	ldrb	r4, [r3], #1
   1bce0:	cmp	r4, #32
   1bce4:	cmpne	r4, #9
   1bce8:	beq	1bcd8 <__assert_fail@plt+0x7680>
   1bcec:	cmp	r4, #10
   1bcf0:	cmpne	r4, #0
   1bcf4:	movne	r3, #0
   1bcf8:	moveq	r3, #1
   1bcfc:	beq	1bc78 <__assert_fail@plt+0x7620>
   1bd00:	cmp	r4, #35	; 0x23
   1bd04:	beq	1bc78 <__assert_fail@plt+0x7620>
   1bd08:	cmp	r4, #33	; 0x21
   1bd0c:	str	r3, [r5, #16]
   1bd10:	mov	r2, r1
   1bd14:	beq	1bf48 <__assert_fail@plt+0x78f0>
   1bd18:	ldrb	r3, [r1]
   1bd1c:	mov	r0, r1
   1bd20:	add	r1, r5, #27
   1bd24:	mov	r2, #0
   1bd28:	and	r4, r3, #223	; 0xdf
   1bd2c:	sub	ip, r3, #48	; 0x30
   1bd30:	sub	lr, r4, #65	; 0x41
   1bd34:	cmp	ip, #9
   1bd38:	cmphi	lr, #5
   1bd3c:	movhi	ip, #0
   1bd40:	movls	ip, #1
   1bd44:	bls	1bdf4 <__assert_fail@plt+0x779c>
   1bd48:	cmp	r2, #40	; 0x28
   1bd4c:	add	r2, r5, r2
   1bd50:	strb	ip, [r2, #28]
   1bd54:	beq	1be1c <__assert_fail@plt+0x77c4>
   1bd58:	ldr	r1, [r5]
   1bd5c:	mov	r2, r6
   1bd60:	movw	r0, #18812	; 0x497c
   1bd64:	movt	r0, #4
   1bd68:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1bd6c:	mov	r0, #89	; 0x59
   1bd70:	movt	r0, #1024	; 0x400
   1bd74:	b	1bdb0 <__assert_fail@plt+0x7758>
   1bd78:	cmp	r0, #10
   1bd7c:	beq	1bd90 <__assert_fail@plt+0x7738>
   1bd80:	ldr	r0, [r5, #4]
   1bd84:	bl	13c5c <_IO_getc@plt>
   1bd88:	cmn	r0, #1
   1bd8c:	bne	1bd78 <__assert_fail@plt+0x7720>
   1bd90:	ldrb	r0, [sp, #12]
   1bd94:	mov	r2, #75	; 0x4b
   1bd98:	mov	r3, #97	; 0x61
   1bd9c:	movt	r2, #1024	; 0x400
   1bda0:	cmp	r0, #0
   1bda4:	movt	r3, #1024	; 0x400
   1bda8:	moveq	r0, r2
   1bdac:	movne	r0, r3
   1bdb0:	ldr	r2, [sp, #268]	; 0x10c
   1bdb4:	ldr	r3, [r7]
   1bdb8:	cmp	r2, r3
   1bdbc:	bne	1bfb8 <__assert_fail@plt+0x7960>
   1bdc0:	add	sp, sp, #276	; 0x114
   1bdc4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1bdc8:	ldr	r0, [r5, #4]
   1bdcc:	bl	14064 <feof@plt>
   1bdd0:	cmp	r0, #0
   1bdd4:	movwne	r0, #16383	; 0x3fff
   1bdd8:	movtne	r0, #1024	; 0x400
   1bddc:	bne	1bdb0 <__assert_fail@plt+0x7758>
   1bde0:	bl	14580 <gpg_err_code_from_syserror@plt>
   1bde4:	cmp	r0, #0
   1bde8:	uxthne	r0, r0
   1bdec:	orrne	r0, r0, #67108864	; 0x4000000
   1bdf0:	b	1bdb0 <__assert_fail@plt+0x7758>
   1bdf4:	cmp	r2, #40	; 0x28
   1bdf8:	beq	1be14 <__assert_fail@plt+0x77bc>
   1bdfc:	cmp	r3, #96	; 0x60
   1be00:	add	r2, r2, #1
   1be04:	movls	r4, r3
   1be08:	ldrb	r3, [r0, #1]!
   1be0c:	strb	r4, [r1, #1]!
   1be10:	b	1bd28 <__assert_fail@plt+0x76d0>
   1be14:	mov	r2, #0
   1be18:	strb	r2, [r5, #68]	; 0x44
   1be1c:	sub	r2, r3, #9
   1be20:	cmp	r3, #32
   1be24:	cmpne	r2, #1
   1be28:	bhi	1bd58 <__assert_fail@plt+0x7700>
   1be2c:	mov	r2, #10
   1be30:	add	r1, sp, #8
   1be34:	bl	13a4c <strtol@plt>
   1be38:	ldr	r4, [sp, #8]
   1be3c:	ldrb	r3, [r4]
   1be40:	sub	r2, r3, #9
   1be44:	cmp	r3, #32
   1be48:	cmpne	r2, #1
   1be4c:	mov	r6, r0
   1be50:	bhi	1bfa0 <__assert_fail@plt+0x7948>
   1be54:	cmn	r0, #1
   1be58:	blt	1bfa0 <__assert_fail@plt+0x7948>
   1be5c:	mov	r3, #0
   1be60:	str	r6, [r5, #20]
   1be64:	str	r3, [r5, #24]
   1be68:	ldrb	r3, [r4]
   1be6c:	cmp	r3, #0
   1be70:	movne	r9, #1
   1be74:	beq	1bf38 <__assert_fail@plt+0x78e0>
   1be78:	cmp	r3, #32
   1be7c:	cmpne	r3, #9
   1be80:	bne	1beb0 <__assert_fail@plt+0x7858>
   1be84:	cmp	r3, #10
   1be88:	beq	1bf38 <__assert_fail@plt+0x78e0>
   1be8c:	add	r2, r4, #1
   1be90:	b	1be9c <__assert_fail@plt+0x7844>
   1be94:	cmp	r3, #10
   1be98:	beq	1bf38 <__assert_fail@plt+0x78e0>
   1be9c:	mov	r4, r2
   1bea0:	ldrb	r3, [r2], #1
   1bea4:	cmp	r3, #32
   1bea8:	cmpne	r3, #9
   1beac:	beq	1be94 <__assert_fail@plt+0x783c>
   1beb0:	cmp	r3, #0
   1beb4:	cmpne	r3, #10
   1beb8:	beq	1bf38 <__assert_fail@plt+0x78e0>
   1bebc:	movw	r1, #18884	; 0x49c4
   1bec0:	mov	r0, r4
   1bec4:	movt	r1, #4
   1bec8:	bl	13a7c <strcspn@plt>
   1becc:	ldrb	r3, [r4, r0]
   1bed0:	mov	r6, r0
   1bed4:	add	r8, r4, r0
   1bed8:	cmp	r3, #61	; 0x3d
   1bedc:	beq	1bf80 <__assert_fail@plt+0x7928>
   1bee0:	cmp	r0, #7
   1bee4:	bne	1bf0c <__assert_fail@plt+0x78b4>
   1bee8:	mov	r0, r4
   1beec:	movw	r1, #18964	; 0x4a14
   1bef0:	mov	r2, r6
   1bef4:	movt	r1, #4
   1bef8:	bl	13c80 <memcmp@plt>
   1befc:	cmp	r0, #0
   1bf00:	streq	r9, [r5, #24]
   1bf04:	moveq	r4, r8
   1bf08:	beq	1bf2c <__assert_fail@plt+0x78d4>
   1bf0c:	ldr	r1, [r5]
   1bf10:	movw	r0, #18972	; 0x4a1c
   1bf14:	ldr	r2, [r5, #8]
   1bf18:	mov	r3, r6
   1bf1c:	str	r4, [sp]
   1bf20:	movt	r0, #4
   1bf24:	mov	r4, r8
   1bf28:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1bf2c:	ldrb	r3, [r4]
   1bf30:	cmp	r3, #0
   1bf34:	bne	1be78 <__assert_fail@plt+0x7820>
   1bf38:	mov	r3, #1
   1bf3c:	mov	r0, #0
   1bf40:	str	r3, [r5, #12]
   1bf44:	b	1bdb0 <__assert_fail@plt+0x7758>
   1bf48:	ldrb	r3, [r1, #1]
   1bf4c:	mov	r0, #1
   1bf50:	add	r1, r1, #1
   1bf54:	str	r0, [r5, #16]
   1bf58:	cmp	r3, #32
   1bf5c:	cmpne	r3, #9
   1bf60:	bne	1bd1c <__assert_fail@plt+0x76c4>
   1bf64:	add	r2, r2, #2
   1bf68:	mov	r1, r2
   1bf6c:	ldrb	r3, [r2], #1
   1bf70:	cmp	r3, #32
   1bf74:	cmpne	r3, #9
   1bf78:	beq	1bf68 <__assert_fail@plt+0x7910>
   1bf7c:	b	1bd1c <__assert_fail@plt+0x76c4>
   1bf80:	movw	r0, #18892	; 0x49cc
   1bf84:	ldr	r1, [r5]
   1bf88:	movt	r0, #4
   1bf8c:	ldr	r2, [r5, #8]
   1bf90:	add	r4, r4, #1
   1bf94:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1bf98:	add	r4, r4, r6
   1bf9c:	b	1bf2c <__assert_fail@plt+0x78d4>
   1bfa0:	movw	r0, #18844	; 0x499c
   1bfa4:	ldr	r1, [r5]
   1bfa8:	movt	r0, #4
   1bfac:	ldr	r2, [r5, #8]
   1bfb0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1bfb4:	b	1be5c <__assert_fail@plt+0x7804>
   1bfb8:	bl	13cec <__stack_chk_fail@plt>
   1bfbc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1bfc0:	mov	r4, #0
   1bfc4:	ldr	r8, [pc, #156]	; 1c068 <__assert_fail@plt+0x7a10>
   1bfc8:	mov	r6, r0
   1bfcc:	mov	r7, r1
   1bfd0:	mov	r9, r2
   1bfd4:	mov	r5, r4
   1bfd8:	subs	r0, r6, #0
   1bfdc:	beq	1bff0 <__assert_fail@plt+0x7998>
   1bfe0:	ldr	r1, [r8, r4]
   1bfe4:	bl	13a28 <strcmp@plt>
   1bfe8:	cmp	r0, #0
   1bfec:	beq	1c02c <__assert_fail@plt+0x79d4>
   1bff0:	subs	r0, r7, #0
   1bff4:	add	r3, r8, r4
   1bff8:	add	r4, r4, #44	; 0x2c
   1bffc:	beq	1c010 <__assert_fail@plt+0x79b8>
   1c000:	ldr	r1, [r3, #4]
   1c004:	bl	13a28 <strcmp@plt>
   1c008:	cmp	r0, #0
   1c00c:	beq	1c02c <__assert_fail@plt+0x79d4>
   1c010:	add	r5, r5, #1
   1c014:	cmp	r5, #5
   1c018:	bne	1bfd8 <__assert_fail@plt+0x7980>
   1c01c:	mov	ip, #27
   1c020:	movt	ip, #1024	; 0x400
   1c024:	mov	r0, ip
   1c028:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1c02c:	movw	r3, #17728	; 0x4540
   1c030:	movt	r3, #4
   1c034:	mov	r2, #44	; 0x2c
   1c038:	mov	r4, r9
   1c03c:	mla	r5, r2, r5, r3
   1c040:	mov	ip, #0
   1c044:	add	r5, r5, #680	; 0x2a8
   1c048:	ldm	r5!, {r0, r1, r2, r3}
   1c04c:	stmia	r4!, {r0, r1, r2, r3}
   1c050:	ldm	r5!, {r0, r1, r2, r3}
   1c054:	stmia	r4!, {r0, r1, r2, r3}
   1c058:	ldm	r5, {r0, r1, r2}
   1c05c:	stm	r4, {r0, r1, r2}
   1c060:	mov	r0, ip
   1c064:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1c068:	andeq	r4, r4, r8, ror #15
   1c06c:	add	r1, r0, #36	; 0x24
   1c070:	ldr	r0, [r0, #24]
   1c074:	push	{r3, lr}
   1c078:	bl	13a28 <strcmp@plt>
   1c07c:	subs	r0, r0, #0
   1c080:	mvnne	r0, #0
   1c084:	pop	{r3, pc}
   1c088:	cmp	r0, #0
   1c08c:	beq	1c094 <__assert_fail@plt+0x7a3c>
   1c090:	b	142d4 <gcry_realloc@plt>
   1c094:	mov	r0, r1
   1c098:	b	13f44 <gcry_malloc_secure@plt>
   1c09c:	push	{r4, r5, r6, lr}
   1c0a0:	mov	r6, r0
   1c0a4:	add	r0, r1, #1
   1c0a8:	mov	r4, r1
   1c0ac:	bl	139c8 <gcry_malloc@plt>
   1c0b0:	subs	r5, r0, #0
   1c0b4:	beq	1c0cc <__assert_fail@plt+0x7a74>
   1c0b8:	mov	r1, r6
   1c0bc:	mov	r2, r4
   1c0c0:	bl	13ba8 <memcpy@plt>
   1c0c4:	mov	r3, #0
   1c0c8:	strb	r3, [r5, r4]
   1c0cc:	mov	r0, r5
   1c0d0:	pop	{r4, r5, r6, pc}
   1c0d4:	sub	sp, sp, #16
   1c0d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c0dc:	sub	sp, sp, #60	; 0x3c
   1c0e0:	ldr	lr, [pc, #748]	; 1c3d4 <__assert_fail@plt+0x7d7c>
   1c0e4:	add	ip, sp, #100	; 0x64
   1c0e8:	ldr	r7, [sp, #144]	; 0x90
   1c0ec:	movw	r4, #47296	; 0xb8c0
   1c0f0:	movt	r4, #5
   1c0f4:	str	r0, [sp, #20]
   1c0f8:	cmp	r7, #0
   1c0fc:	str	r4, [sp, #8]
   1c100:	stm	ip, {r1, r2, r3}
   1c104:	add	r9, sp, #44	; 0x2c
   1c108:	ldm	lr, {r0, r1}
   1c10c:	mov	r3, #0
   1c110:	ldrne	r6, [sp, #120]	; 0x78
   1c114:	ldreq	r6, [sp, #112]	; 0x70
   1c118:	ldr	r4, [r4]
   1c11c:	ldr	ip, [sp, #148]	; 0x94
   1c120:	ldr	r2, [sp, #156]	; 0x9c
   1c124:	stm	r9, {r0, r1}
   1c128:	mov	r0, r6
   1c12c:	str	r4, [sp, #52]	; 0x34
   1c130:	str	ip, [sp, #28]
   1c134:	str	r2, [sp, #24]
   1c138:	str	r3, [sp, #36]	; 0x24
   1c13c:	str	r3, [sp, #40]	; 0x28
   1c140:	bl	14094 <strlen@plt>
   1c144:	movw	r1, #19012	; 0x4a44
   1c148:	movt	r1, #4
   1c14c:	ldr	r8, [sp, #152]	; 0x98
   1c150:	mov	r4, r0
   1c154:	mov	r0, #0
   1c158:	bl	345a4 <__assert_fail@plt+0x1ff4c>
   1c15c:	subs	r5, r0, #0
   1c160:	beq	1c39c <__assert_fail@plt+0x7d44>
   1c164:	add	r0, r4, #5
   1c168:	lsl	r0, r0, #2
   1c16c:	bl	139c8 <gcry_malloc@plt>
   1c170:	cmp	r0, #0
   1c174:	str	r0, [sp, #4]
   1c178:	beq	1c3bc <__assert_fail@plt+0x7d64>
   1c17c:	movw	r0, #19016	; 0x4a48
   1c180:	mov	r1, r5
   1c184:	movt	r0, #4
   1c188:	add	r9, r9, r7, lsl #2
   1c18c:	bl	35c7c <__assert_fail@plt+0x21624>
   1c190:	ldr	r2, [sp, #28]
   1c194:	ldr	ip, [sp, #4]
   1c198:	add	r3, sp, #104	; 0x68
   1c19c:	cmp	r2, #0
   1c1a0:	str	r9, [ip]
   1c1a4:	str	r3, [ip, #4]
   1c1a8:	beq	1c350 <__assert_fail@plt+0x7cf8>
   1c1ac:	movw	r0, #19024	; 0x4a50
   1c1b0:	mov	r1, r5
   1c1b4:	movt	r0, #4
   1c1b8:	mov	r9, #16
   1c1bc:	bl	35c7c <__assert_fail@plt+0x21624>
   1c1c0:	mov	ip, #3
   1c1c4:	str	ip, [sp, #16]
   1c1c8:	mov	r2, #12
   1c1cc:	ldr	ip, [sp, #4]
   1c1d0:	add	r3, sp, #28
   1c1d4:	str	r3, [ip, #8]
   1c1d8:	cmp	r4, #0
   1c1dc:	beq	1c280 <__assert_fail@plt+0x7c28>
   1c1e0:	ldr	r3, [sp, #16]
   1c1e4:	mov	sl, #0
   1c1e8:	ldr	ip, [sp, #4]
   1c1ec:	mov	fp, sl
   1c1f0:	add	r9, ip, r3, lsl #2
   1c1f4:	lsl	ip, r4, #2
   1c1f8:	str	ip, [sp, #12]
   1c1fc:	movw	r1, #19036	; 0x4a5c
   1c200:	mov	r0, r5
   1c204:	movt	r1, #4
   1c208:	ldrb	r2, [r6, fp]
   1c20c:	bl	36500 <__assert_fail@plt+0x21ea8>
   1c210:	cmp	r7, #0
   1c214:	moveq	r3, sl
   1c218:	beq	1c254 <__assert_fail@plt+0x7bfc>
   1c21c:	ldr	r2, [sp, #108]	; 0x6c
   1c220:	ldrb	r0, [r6, fp]
   1c224:	ldrb	r3, [r2]
   1c228:	cmp	r3, r0
   1c22c:	mov	r3, #0
   1c230:	bne	1c244 <__assert_fail@plt+0x7bec>
   1c234:	b	1c254 <__assert_fail@plt+0x7bfc>
   1c238:	ldrb	r1, [r2, #1]!
   1c23c:	cmp	r1, r0
   1c240:	beq	1c31c <__assert_fail@plt+0x7cc4>
   1c244:	add	r3, r3, #1
   1c248:	cmp	r3, r4
   1c24c:	bne	1c238 <__assert_fail@plt+0x7be0>
   1c250:	ldr	r3, [sp, #12]
   1c254:	add	fp, fp, #1
   1c258:	add	r3, r8, r3
   1c25c:	cmp	fp, r4
   1c260:	str	r3, [r9, sl]
   1c264:	add	sl, sl, #4
   1c268:	bne	1c1fc <__assert_fail@plt+0x7ba4>
   1c26c:	ldr	r4, [sp, #16]
   1c270:	add	r3, fp, r4
   1c274:	add	r9, r3, #1
   1c278:	lsl	r2, r3, #2
   1c27c:	lsl	r9, r9, #2
   1c280:	mov	r1, r5
   1c284:	movw	r0, #19044	; 0x4a64
   1c288:	movt	r0, #4
   1c28c:	str	r2, [sp]
   1c290:	bl	35c7c <__assert_fail@plt+0x21624>
   1c294:	ldr	r2, [sp]
   1c298:	ldr	ip, [sp, #4]
   1c29c:	mov	r3, #0
   1c2a0:	mov	r0, r3
   1c2a4:	add	r1, sp, #24
   1c2a8:	str	r1, [ip, r2]
   1c2ac:	mov	r1, r5
   1c2b0:	str	r3, [ip, r9]
   1c2b4:	bl	35768 <__assert_fail@plt+0x21110>
   1c2b8:	mov	r0, r5
   1c2bc:	bl	3515c <__assert_fail@plt+0x20b04>
   1c2c0:	subs	r2, r0, #0
   1c2c4:	beq	1c324 <__assert_fail@plt+0x7ccc>
   1c2c8:	bl	14580 <gpg_err_code_from_syserror@plt>
   1c2cc:	cmp	r0, #0
   1c2d0:	uxthne	r4, r0
   1c2d4:	orrne	r4, r4, #67108864	; 0x4000000
   1c2d8:	beq	1c364 <__assert_fail@plt+0x7d0c>
   1c2dc:	mov	r0, r5
   1c2e0:	bl	34ea0 <__assert_fail@plt+0x20848>
   1c2e4:	ldr	r0, [sp, #4]
   1c2e8:	bl	13c44 <gcry_free@plt>
   1c2ec:	ldr	r0, [sp, #40]	; 0x28
   1c2f0:	bl	13c44 <gcry_free@plt>
   1c2f4:	mov	r0, r4
   1c2f8:	ldr	r4, [sp, #8]
   1c2fc:	ldr	r2, [sp, #52]	; 0x34
   1c300:	ldr	r3, [r4]
   1c304:	cmp	r2, r3
   1c308:	bne	1c3d0 <__assert_fail@plt+0x7d78>
   1c30c:	add	sp, sp, #60	; 0x3c
   1c310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c314:	add	sp, sp, #16
   1c318:	bx	lr
   1c31c:	lsl	r3, r3, #2
   1c320:	b	1c254 <__assert_fail@plt+0x7bfc>
   1c324:	mov	r0, r5
   1c328:	add	r1, sp, #40	; 0x28
   1c32c:	bl	34ea4 <__assert_fail@plt+0x2084c>
   1c330:	subs	r6, r0, #0
   1c334:	beq	1c36c <__assert_fail@plt+0x7d14>
   1c338:	bl	14580 <gpg_err_code_from_syserror@plt>
   1c33c:	cmp	r0, #0
   1c340:	beq	1c364 <__assert_fail@plt+0x7d0c>
   1c344:	uxth	r0, r0
   1c348:	orr	r4, r0, #67108864	; 0x4000000
   1c34c:	b	1c2dc <__assert_fail@plt+0x7c84>
   1c350:	mov	r3, #2
   1c354:	mov	r9, #12
   1c358:	mov	r2, #8
   1c35c:	str	r3, [sp, #16]
   1c360:	b	1c1d8 <__assert_fail@plt+0x7b80>
   1c364:	mov	r4, r0
   1c368:	b	1c2dc <__assert_fail@plt+0x7c84>
   1c36c:	add	r0, sp, #36	; 0x24
   1c370:	mov	r1, r6
   1c374:	ldr	r2, [sp, #40]	; 0x28
   1c378:	ldr	r3, [sp, #4]
   1c37c:	bl	139b0 <gcry_sexp_build_array@plt>
   1c380:	subs	r4, r0, #0
   1c384:	movne	r5, r6
   1c388:	ldreq	r3, [sp, #36]	; 0x24
   1c38c:	moveq	r5, r4
   1c390:	ldreq	ip, [sp, #20]
   1c394:	streq	r3, [ip]
   1c398:	b	1c2dc <__assert_fail@plt+0x7c84>
   1c39c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1c3a0:	cmp	r0, #0
   1c3a4:	streq	r5, [sp, #4]
   1c3a8:	moveq	r4, r5
   1c3ac:	uxthne	r0, r0
   1c3b0:	strne	r5, [sp, #4]
   1c3b4:	orrne	r4, r0, #67108864	; 0x4000000
   1c3b8:	b	1c2dc <__assert_fail@plt+0x7c84>
   1c3bc:	bl	14580 <gpg_err_code_from_syserror@plt>
   1c3c0:	cmp	r0, #0
   1c3c4:	bne	1c344 <__assert_fail@plt+0x7cec>
   1c3c8:	ldr	r4, [sp, #4]
   1c3cc:	b	1c2dc <__assert_fail@plt+0x7c84>
   1c3d0:	bl	13cec <__stack_chk_fail@plt>
   1c3d4:	andeq	r4, r4, r4, asr #17
   1c3d8:	push	{r3, r4, r5, lr}
   1c3dc:	subs	r5, r0, #0
   1c3e0:	popeq	{r3, r4, r5, pc}
   1c3e4:	ldr	r0, [r5]
   1c3e8:	cmp	r0, #0
   1c3ec:	movne	r4, r5
   1c3f0:	beq	1c404 <__assert_fail@plt+0x7dac>
   1c3f4:	bl	14268 <gcry_mpi_release@plt>
   1c3f8:	ldr	r0, [r4, #4]!
   1c3fc:	cmp	r0, #0
   1c400:	bne	1c3f4 <__assert_fail@plt+0x7d9c>
   1c404:	mov	r0, r5
   1c408:	pop	{r3, r4, r5, lr}
   1c40c:	b	13c44 <gcry_free@plt>
   1c410:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c414:	mov	r4, r0
   1c418:	mov	r0, r1
   1c41c:	mov	r6, r1
   1c420:	mov	sl, r2
   1c424:	mov	r9, r3
   1c428:	bl	14094 <strlen@plt>
   1c42c:	ldr	r8, [sp, #32]
   1c430:	cmp	r0, #40	; 0x28
   1c434:	bne	1c4d0 <__assert_fail@plt+0x7e78>
   1c438:	mov	r3, #0
   1c43c:	cmp	r9, #0
   1c440:	str	r3, [sl]
   1c444:	mov	r1, #0
   1c448:	strne	r3, [r9]
   1c44c:	cmp	r8, #0
   1c450:	ldr	r0, [r4, #4]
   1c454:	mov	r2, r1
   1c458:	movne	r3, #0
   1c45c:	strne	r3, [r8]
   1c460:	bl	14574 <fseek@plt>
   1c464:	mov	r3, #0
   1c468:	ldr	r0, [r4, #4]
   1c46c:	add	r7, r4, #28
   1c470:	str	r3, [r4, #8]
   1c474:	bl	14400 <clearerr@plt>
   1c478:	mov	r0, r4
   1c47c:	bl	1bc4c <__assert_fail@plt+0x75f4>
   1c480:	subs	r5, r0, #0
   1c484:	bne	1c4c8 <__assert_fail@plt+0x7e70>
   1c488:	ldr	ip, [r4, #12]
   1c48c:	cmp	ip, #0
   1c490:	beq	1c478 <__assert_fail@plt+0x7e20>
   1c494:	mov	r0, r6
   1c498:	mov	r1, r7
   1c49c:	bl	13a28 <strcmp@plt>
   1c4a0:	cmp	r0, #0
   1c4a4:	bne	1c478 <__assert_fail@plt+0x7e20>
   1c4a8:	ldr	r3, [r4, #16]
   1c4ac:	cmp	r9, #0
   1c4b0:	str	r3, [sl]
   1c4b4:	ldrne	r3, [r4, #20]
   1c4b8:	strne	r3, [r9]
   1c4bc:	cmp	r8, #0
   1c4c0:	ldrne	r3, [r4, #24]
   1c4c4:	strne	r3, [r8]
   1c4c8:	mov	r0, r5
   1c4cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c4d0:	movw	r0, #19060	; 0x4a74
   1c4d4:	movw	r1, #19084	; 0x4a8c
   1c4d8:	movt	r0, #4
   1c4dc:	movt	r1, #4
   1c4e0:	movw	r2, #929	; 0x3a1
   1c4e4:	ldr	r3, [pc]	; 1c4ec <__assert_fail@plt+0x7e94>
   1c4e8:	bl	14658 <__assert_fail@plt>
   1c4ec:	andeq	r4, r4, ip, asr #17
   1c4f0:	push	{r4, r5, lr}
   1c4f4:	movw	r4, #47296	; 0xb8c0
   1c4f8:	movt	r4, #5
   1c4fc:	sub	sp, sp, #28
   1c500:	subs	r5, r0, #0
   1c504:	ldr	r3, [r4]
   1c508:	str	r3, [sp, #20]
   1c50c:	beq	1c584 <__assert_fail@plt+0x7f2c>
   1c510:	bl	14094 <strlen@plt>
   1c514:	cmp	r0, #40	; 0x28
   1c518:	beq	1c538 <__assert_fail@plt+0x7ee0>
   1c51c:	mov	r0, #0
   1c520:	ldr	r2, [sp, #20]
   1c524:	ldr	r3, [r4]
   1c528:	cmp	r2, r3
   1c52c:	bne	1c59c <__assert_fail@plt+0x7f44>
   1c530:	add	sp, sp, #28
   1c534:	pop	{r4, r5, pc}
   1c538:	add	r0, sp, #8
   1c53c:	mov	r1, #0
   1c540:	bl	1ba88 <__assert_fail@plt+0x7430>
   1c544:	subs	r3, r0, #0
   1c548:	bne	1c51c <__assert_fail@plt+0x7ec4>
   1c54c:	str	r3, [sp]
   1c550:	mov	r1, r5
   1c554:	ldr	r0, [sp, #8]
   1c558:	add	r2, sp, #12
   1c55c:	add	r3, sp, #16
   1c560:	bl	1c410 <__assert_fail@plt+0x7db8>
   1c564:	cmp	r0, #0
   1c568:	beq	1c58c <__assert_fail@plt+0x7f34>
   1c56c:	mov	r3, #0
   1c570:	str	r3, [sp, #16]
   1c574:	ldr	r0, [sp, #8]
   1c578:	bl	1ba60 <__assert_fail@plt+0x7408>
   1c57c:	ldr	r0, [sp, #16]
   1c580:	b	1c520 <__assert_fail@plt+0x7ec8>
   1c584:	mov	r0, r5
   1c588:	b	1c520 <__assert_fail@plt+0x7ec8>
   1c58c:	ldr	r3, [sp, #12]
   1c590:	cmp	r3, #0
   1c594:	beq	1c574 <__assert_fail@plt+0x7f1c>
   1c598:	b	1c56c <__assert_fail@plt+0x7f14>
   1c59c:	bl	13cec <__stack_chk_fail@plt>
   1c5a0:	push	{r4, r5, lr}
   1c5a4:	movw	r4, #47296	; 0xb8c0
   1c5a8:	movt	r4, #5
   1c5ac:	sub	sp, sp, #20
   1c5b0:	mov	r2, #4
   1c5b4:	mov	r5, r1
   1c5b8:	ldr	ip, [r4]
   1c5bc:	add	r1, sp, #8
   1c5c0:	add	r3, sp, r2
   1c5c4:	str	ip, [sp, #12]
   1c5c8:	bl	35900 <__assert_fail@plt+0x212a8>
   1c5cc:	cmp	r0, #0
   1c5d0:	bne	1c600 <__assert_fail@plt+0x7fa8>
   1c5d4:	ldr	r3, [sp, #4]
   1c5d8:	cmp	r3, #4
   1c5dc:	movwne	r0, #16383	; 0x3fff
   1c5e0:	movtne	r0, #1024	; 0x400
   1c5e4:	beq	1c614 <__assert_fail@plt+0x7fbc>
   1c5e8:	ldr	r2, [sp, #12]
   1c5ec:	ldr	r3, [r4]
   1c5f0:	cmp	r2, r3
   1c5f4:	bne	1c63c <__assert_fail@plt+0x7fe4>
   1c5f8:	add	sp, sp, #20
   1c5fc:	pop	{r4, r5, pc}
   1c600:	bl	14580 <gpg_err_code_from_syserror@plt>
   1c604:	cmp	r0, #0
   1c608:	uxthne	r0, r0
   1c60c:	orrne	r0, r0, #67108864	; 0x4000000
   1c610:	b	1c5e8 <__assert_fail@plt+0x7f90>
   1c614:	ldrb	r3, [sp, #9]
   1c618:	ldrb	ip, [sp, #8]
   1c61c:	ldrb	r1, [sp, #11]
   1c620:	lsl	r3, r3, #16
   1c624:	ldrb	r2, [sp, #10]
   1c628:	orr	r3, r3, ip, lsl #24
   1c62c:	orr	r3, r3, r1
   1c630:	orr	r3, r3, r2, lsl #8
   1c634:	str	r3, [r5]
   1c638:	b	1c5e8 <__assert_fail@plt+0x7f90>
   1c63c:	bl	13cec <__stack_chk_fail@plt>
   1c640:	push	{r4, r5, lr}
   1c644:	movw	r4, #47296	; 0xb8c0
   1c648:	movt	r4, #5
   1c64c:	sub	sp, sp, #12
   1c650:	mov	r5, r2
   1c654:	ldr	ip, [r4]
   1c658:	mov	r3, sp
   1c65c:	str	ip, [sp, #4]
   1c660:	bl	35900 <__assert_fail@plt+0x212a8>
   1c664:	cmp	r0, #0
   1c668:	bne	1c69c <__assert_fail@plt+0x8044>
   1c66c:	ldr	r0, [sp]
   1c670:	movw	r3, #16383	; 0x3fff
   1c674:	movt	r3, #1024	; 0x400
   1c678:	cmp	r0, r5
   1c67c:	movne	r0, r3
   1c680:	moveq	r0, #0
   1c684:	ldr	r1, [sp, #4]
   1c688:	ldr	r3, [r4]
   1c68c:	cmp	r1, r3
   1c690:	bne	1c6b0 <__assert_fail@plt+0x8058>
   1c694:	add	sp, sp, #12
   1c698:	pop	{r4, r5, pc}
   1c69c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1c6a0:	cmp	r0, #0
   1c6a4:	uxthne	r0, r0
   1c6a8:	orrne	r0, r0, #67108864	; 0x4000000
   1c6ac:	b	1c684 <__assert_fail@plt+0x802c>
   1c6b0:	bl	13cec <__stack_chk_fail@plt>
   1c6b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1c6b8:	movw	r4, #47296	; 0xb8c0
   1c6bc:	movt	r4, #5
   1c6c0:	sub	sp, sp, #8
   1c6c4:	add	ip, sp, #8
   1c6c8:	mov	r7, r1
   1c6cc:	ldr	lr, [r4]
   1c6d0:	mov	r1, sp
   1c6d4:	mov	r5, #0
   1c6d8:	mov	r9, r2
   1c6dc:	str	r5, [ip, #-8]!
   1c6e0:	mov	r8, r3
   1c6e4:	str	lr, [sp, #4]
   1c6e8:	mov	sl, r0
   1c6ec:	bl	1c5a0 <__assert_fail@plt+0x7f48>
   1c6f0:	subs	r6, r0, #0
   1c6f4:	bne	1c74c <__assert_fail@plt+0x80f4>
   1c6f8:	ldr	r0, [sp]
   1c6fc:	cmp	r7, r5
   1c700:	add	r0, r0, #1
   1c704:	bne	1c770 <__assert_fail@plt+0x8118>
   1c708:	bl	139c8 <gcry_malloc@plt>
   1c70c:	mov	r5, r0
   1c710:	cmp	r5, #0
   1c714:	beq	1c77c <__assert_fail@plt+0x8124>
   1c718:	mov	r0, sl
   1c71c:	mov	r1, r5
   1c720:	ldr	r2, [sp]
   1c724:	bl	1c640 <__assert_fail@plt+0x7fe8>
   1c728:	cmp	r0, #0
   1c72c:	bne	1c748 <__assert_fail@plt+0x80f0>
   1c730:	ldr	r3, [sp]
   1c734:	cmp	r8, #0
   1c738:	strb	r0, [r5, r3]
   1c73c:	str	r5, [r9]
   1c740:	strne	r3, [r8]
   1c744:	b	1c754 <__assert_fail@plt+0x80fc>
   1c748:	mov	r6, r0
   1c74c:	mov	r0, r5
   1c750:	bl	13c44 <gcry_free@plt>
   1c754:	ldr	r2, [sp, #4]
   1c758:	mov	r0, r6
   1c75c:	ldr	r3, [r4]
   1c760:	cmp	r2, r3
   1c764:	bne	1c794 <__assert_fail@plt+0x813c>
   1c768:	add	sp, sp, #8
   1c76c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1c770:	bl	13f44 <gcry_malloc_secure@plt>
   1c774:	mov	r5, r0
   1c778:	b	1c710 <__assert_fail@plt+0x80b8>
   1c77c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1c780:	cmp	r0, #0
   1c784:	uxthne	r0, r0
   1c788:	orrne	r6, r0, #67108864	; 0x4000000
   1c78c:	bne	1c74c <__assert_fail@plt+0x80f4>
   1c790:	b	1c754 <__assert_fail@plt+0x80fc>
   1c794:	bl	13cec <__stack_chk_fail@plt>
   1c798:	push	{r3, r4, r5, r6, r7, lr}
   1c79c:	mov	r4, r1
   1c7a0:	movw	r1, #19100	; 0x4a9c
   1c7a4:	movt	r1, #4
   1c7a8:	bl	13a28 <strcmp@plt>
   1c7ac:	cmp	r0, #0
   1c7b0:	beq	1c7bc <__assert_fail@plt+0x8164>
   1c7b4:	mov	r0, #0
   1c7b8:	pop	{r3, r4, r5, r6, r7, pc}
   1c7bc:	ldr	r6, [r4, #16]
   1c7c0:	ldr	r5, [r4, #20]
   1c7c4:	ldr	r7, [r4, #12]
   1c7c8:	mov	r0, r6
   1c7cc:	mov	r1, r5
   1c7d0:	bl	139d4 <gcry_mpi_cmp@plt>
   1c7d4:	cmp	r0, #0
   1c7d8:	ble	1c7f4 <__assert_fail@plt+0x819c>
   1c7dc:	ldr	r2, [r4, #16]
   1c7e0:	mov	r0, #0
   1c7e4:	ldr	r3, [r4, #20]
   1c7e8:	str	r2, [r4, #20]
   1c7ec:	str	r3, [r4, #16]
   1c7f0:	pop	{r3, r4, r5, r6, r7, pc}
   1c7f4:	mov	r0, r7
   1c7f8:	mov	r1, r6
   1c7fc:	mov	r2, r5
   1c800:	bl	1455c <gcry_mpi_invm@plt>
   1c804:	b	1c7b4 <__assert_fail@plt+0x815c>
   1c808:	push	{r3, lr}
   1c80c:	mov	r3, r0
   1c810:	mov	r0, r1
   1c814:	mov	r1, r3
   1c818:	bl	35768 <__assert_fail@plt+0x21110>
   1c81c:	cmn	r0, #1
   1c820:	beq	1c82c <__assert_fail@plt+0x81d4>
   1c824:	mov	r0, #0
   1c828:	pop	{r3, pc}
   1c82c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1c830:	cmp	r0, #0
   1c834:	uxthne	r0, r0
   1c838:	orrne	r0, r0, #67108864	; 0x4000000
   1c83c:	pop	{r3, pc}
   1c840:	push	{r4, lr}
   1c844:	movw	r0, #19108	; 0x4aa4
   1c848:	mov	r4, r2
   1c84c:	movt	r0, #4
   1c850:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1c854:	mov	r0, r4
   1c858:	mov	r1, #6
   1c85c:	pop	{r4, lr}
   1c860:	b	1c808 <__assert_fail@plt+0x81b0>
   1c864:	push	{r4, lr}
   1c868:	movw	r0, #19156	; 0x4ad4
   1c86c:	mov	r4, r2
   1c870:	movt	r0, #4
   1c874:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1c878:	mov	r0, r4
   1c87c:	mov	r1, #6
   1c880:	pop	{r4, lr}
   1c884:	b	1c808 <__assert_fail@plt+0x81b0>
   1c888:	mov	r0, r2
   1c88c:	mov	r1, #6
   1c890:	b	1c808 <__assert_fail@plt+0x81b0>
   1c894:	push	{r4, lr}
   1c898:	mov	r4, r0
   1c89c:	bl	14610 <gcry_pk_get_keygrip@plt>
   1c8a0:	cmp	r0, #0
   1c8a4:	beq	1c8b0 <__assert_fail@plt+0x8258>
   1c8a8:	mov	r0, #0
   1c8ac:	pop	{r4, pc}
   1c8b0:	mov	r0, r4
   1c8b4:	bl	1428c <gcry_pk_testkey@plt>
   1c8b8:	mov	r3, #63	; 0x3f
   1c8bc:	movt	r3, #1024	; 0x400
   1c8c0:	cmp	r0, #0
   1c8c4:	moveq	r0, r3
   1c8c8:	pop	{r4, pc}
   1c8cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c8d0:	sub	sp, sp, #36	; 0x24
   1c8d4:	mov	r4, r3
   1c8d8:	movw	r6, #47296	; 0xb8c0
   1c8dc:	ldr	r3, [sp, #76]	; 0x4c
   1c8e0:	movt	r6, #5
   1c8e4:	mov	r5, r1
   1c8e8:	mov	r7, r2
   1c8ec:	ldr	ip, [r6]
   1c8f0:	mov	r1, #0
   1c8f4:	str	r3, [sp, #4]
   1c8f8:	add	r2, sp, #24
   1c8fc:	ldr	r3, [sp, #80]	; 0x50
   1c900:	mov	fp, r0
   1c904:	str	ip, [sp, #28]
   1c908:	str	r3, [sp, #8]
   1c90c:	ldr	r3, [sp, #84]	; 0x54
   1c910:	str	r3, [sp, #12]
   1c914:	ldr	r3, [sp, #88]	; 0x58
   1c918:	str	r3, [sp, #16]
   1c91c:	bl	13bd8 <gcry_sexp_nth_data@plt>
   1c920:	subs	r8, r0, #0
   1c924:	beq	1c950 <__assert_fail@plt+0x82f8>
   1c928:	ldr	r2, [sp, #24]
   1c92c:	cmp	r2, #10
   1c930:	beq	1c9b4 <__assert_fail@plt+0x835c>
   1c934:	cmp	r2, #21
   1c938:	beq	1ca70 <__assert_fail@plt+0x8418>
   1c93c:	cmp	r2, #20
   1c940:	beq	1cac4 <__assert_fail@plt+0x846c>
   1c944:	cmp	r2, #11
   1c948:	beq	1ca88 <__assert_fail@plt+0x8430>
   1c94c:	mov	r8, #0
   1c950:	mov	sl, #83	; 0x53
   1c954:	movt	sl, #1024	; 0x400
   1c958:	mov	r9, r8
   1c95c:	mov	r4, r8
   1c960:	mov	r5, r8
   1c964:	mov	r7, r8
   1c968:	mov	r0, r7
   1c96c:	bl	13be4 <gcry_sexp_release@plt>
   1c970:	mov	r0, r5
   1c974:	bl	13be4 <gcry_sexp_release@plt>
   1c978:	mov	r0, r4
   1c97c:	bl	13be4 <gcry_sexp_release@plt>
   1c980:	mov	r0, r8
   1c984:	bl	13c44 <gcry_free@plt>
   1c988:	mov	r0, #0
   1c98c:	bl	13c44 <gcry_free@plt>
   1c990:	mov	r0, r9
   1c994:	bl	1c3d8 <__assert_fail@plt+0x7d80>
   1c998:	ldr	r2, [sp, #28]
   1c99c:	mov	r0, sl
   1c9a0:	ldr	r3, [r6]
   1c9a4:	cmp	r2, r3
   1c9a8:	bne	1ccd8 <__assert_fail@plt+0x8680>
   1c9ac:	add	sp, sp, #36	; 0x24
   1c9b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c9b4:	movw	r1, #19248	; 0x4b30
   1c9b8:	movt	r1, #4
   1c9bc:	bl	145bc <strncmp@plt>
   1c9c0:	cmp	r0, #0
   1c9c4:	bne	1c94c <__assert_fail@plt+0x82f4>
   1c9c8:	str	r0, [sp, #20]
   1c9cc:	mov	r0, r4
   1c9d0:	bl	14094 <strlen@plt>
   1c9d4:	mov	r1, #4
   1c9d8:	mov	sl, r0
   1c9dc:	add	r0, r0, #1
   1c9e0:	bl	14190 <gcry_calloc@plt>
   1c9e4:	subs	r9, r0, #0
   1c9e8:	beq	1cc28 <__assert_fail@plt+0x85d0>
   1c9ec:	mov	r1, r5
   1c9f0:	mov	r0, fp
   1c9f4:	mov	r2, #0
   1c9f8:	bl	13e84 <gcry_sexp_find_token@plt>
   1c9fc:	subs	r7, r0, #0
   1ca00:	beq	1caac <__assert_fail@plt+0x8454>
   1ca04:	cmp	sl, #0
   1ca08:	beq	1cadc <__assert_fail@plt+0x8484>
   1ca0c:	sub	r8, r9, #4
   1ca10:	add	sl, r4, sl
   1ca14:	b	1ca44 <__assert_fail@plt+0x83ec>
   1ca18:	mov	r1, #1
   1ca1c:	mov	r2, r1
   1ca20:	bl	13fbc <gcry_sexp_nth_mpi@plt>
   1ca24:	cmp	r0, #0
   1ca28:	beq	1ca5c <__assert_fail@plt+0x8404>
   1ca2c:	str	r0, [r8, #4]!
   1ca30:	add	r4, r4, #1
   1ca34:	mov	r0, r5
   1ca38:	bl	13be4 <gcry_sexp_release@plt>
   1ca3c:	cmp	r4, sl
   1ca40:	beq	1cadc <__assert_fail@plt+0x8484>
   1ca44:	mov	r0, r7
   1ca48:	mov	r1, r4
   1ca4c:	mov	r2, #1
   1ca50:	bl	13e84 <gcry_sexp_find_token@plt>
   1ca54:	subs	r5, r0, #0
   1ca58:	bne	1ca18 <__assert_fail@plt+0x83c0>
   1ca5c:	mov	r8, #0
   1ca60:	mov	sl, #83	; 0x53
   1ca64:	mov	r4, r8
   1ca68:	movt	sl, #1024	; 0x400
   1ca6c:	b	1c968 <__assert_fail@plt+0x8310>
   1ca70:	movw	r1, #19260	; 0x4b3c
   1ca74:	movt	r1, #4
   1ca78:	bl	145bc <strncmp@plt>
   1ca7c:	cmp	r0, #0
   1ca80:	beq	1c9c8 <__assert_fail@plt+0x8370>
   1ca84:	b	1c94c <__assert_fail@plt+0x82f4>
   1ca88:	movw	r1, #26452	; 0x6754
   1ca8c:	movt	r1, #4
   1ca90:	bl	145bc <strncmp@plt>
   1ca94:	cmp	r0, #0
   1ca98:	moveq	r3, #1
   1ca9c:	moveq	r4, r7
   1caa0:	streq	r3, [sp, #20]
   1caa4:	bne	1c94c <__assert_fail@plt+0x82f4>
   1caa8:	b	1c9cc <__assert_fail@plt+0x8374>
   1caac:	mov	sl, #83	; 0x53
   1cab0:	mov	r8, r7
   1cab4:	movt	sl, #1024	; 0x400
   1cab8:	mov	r4, r7
   1cabc:	mov	r5, r7
   1cac0:	b	1c968 <__assert_fail@plt+0x8310>
   1cac4:	movw	r1, #26504	; 0x6788
   1cac8:	movt	r1, #4
   1cacc:	bl	145bc <strncmp@plt>
   1cad0:	cmp	r0, #0
   1cad4:	beq	1c9c8 <__assert_fail@plt+0x8370>
   1cad8:	b	1c94c <__assert_fail@plt+0x82f4>
   1cadc:	ldr	r2, [sp, #72]	; 0x48
   1cae0:	ands	r8, r2, #2
   1cae4:	beq	1cb80 <__assert_fail@plt+0x8528>
   1cae8:	movw	r1, #19284	; 0x4b54
   1caec:	mov	r0, r7
   1caf0:	movt	r1, #4
   1caf4:	mov	r2, #5
   1caf8:	bl	13e84 <gcry_sexp_find_token@plt>
   1cafc:	subs	r5, r0, #0
   1cb00:	beq	1cc60 <__assert_fail@plt+0x8608>
   1cb04:	mov	r1, #1
   1cb08:	bl	141d8 <gcry_sexp_nth_string@plt>
   1cb0c:	subs	r8, r0, #0
   1cb10:	beq	1cc80 <__assert_fail@plt+0x8628>
   1cb14:	movw	r1, #19292	; 0x4b5c
   1cb18:	movt	r1, #4
   1cb1c:	bl	13a28 <strcmp@plt>
   1cb20:	cmp	r0, #0
   1cb24:	beq	1cc74 <__assert_fail@plt+0x861c>
   1cb28:	movw	r1, #19304	; 0x4b68
   1cb2c:	mov	r0, r8
   1cb30:	movt	r1, #4
   1cb34:	bl	13a28 <strcmp@plt>
   1cb38:	cmp	r0, #0
   1cb3c:	beq	1cc90 <__assert_fail@plt+0x8638>
   1cb40:	movw	r1, #19316	; 0x4b74
   1cb44:	mov	r0, r8
   1cb48:	movt	r1, #4
   1cb4c:	bl	13a28 <strcmp@plt>
   1cb50:	cmp	r0, #0
   1cb54:	bne	1cb78 <__assert_fail@plt+0x8520>
   1cb58:	movw	r4, #19212	; 0x4b0c
   1cb5c:	movt	r4, #4
   1cb60:	mov	r0, r8
   1cb64:	bl	13c44 <gcry_free@plt>
   1cb68:	mov	r0, r4
   1cb6c:	bl	13f2c <gcry_strdup@plt>
   1cb70:	subs	r8, r0, #0
   1cb74:	beq	1ccbc <__assert_fail@plt+0x8664>
   1cb78:	mov	r0, r5
   1cb7c:	bl	13be4 <gcry_sexp_release@plt>
   1cb80:	mov	r3, #0
   1cb84:	mov	r0, fp
   1cb88:	mov	r2, r3
   1cb8c:	movw	r1, #19328	; 0x4b80
   1cb90:	movt	r1, #4
   1cb94:	str	r3, [sp, #24]
   1cb98:	bl	13e84 <gcry_sexp_find_token@plt>
   1cb9c:	subs	r4, r0, #0
   1cba0:	beq	1cc14 <__assert_fail@plt+0x85bc>
   1cba4:	add	r2, sp, #24
   1cba8:	mov	r1, #1
   1cbac:	bl	13bd8 <gcry_sexp_nth_data@plt>
   1cbb0:	cmp	r0, #0
   1cbb4:	beq	1cc14 <__assert_fail@plt+0x85bc>
   1cbb8:	ldr	r1, [sp, #24]
   1cbbc:	bl	1c09c <__assert_fail@plt+0x7a44>
   1cbc0:	subs	fp, r0, #0
   1cbc4:	beq	1cc9c <__assert_fail@plt+0x8644>
   1cbc8:	ldr	r3, [sp, #4]
   1cbcc:	mov	r5, #0
   1cbd0:	cmp	r3, #0
   1cbd4:	ldrne	r2, [sp, #20]
   1cbd8:	strne	r2, [r3]
   1cbdc:	ldr	r3, [sp, #8]
   1cbe0:	str	r9, [r3]
   1cbe4:	ldr	r3, [sp, #16]
   1cbe8:	str	fp, [r3]
   1cbec:	ldr	r3, [sp, #12]
   1cbf0:	str	r8, [r3]
   1cbf4:	mov	r0, r7
   1cbf8:	mov	sl, #0
   1cbfc:	bl	13be4 <gcry_sexp_release@plt>
   1cc00:	mov	r0, r5
   1cc04:	bl	13be4 <gcry_sexp_release@plt>
   1cc08:	mov	r0, r4
   1cc0c:	bl	13be4 <gcry_sexp_release@plt>
   1cc10:	b	1c998 <__assert_fail@plt+0x8340>
   1cc14:	mov	r1, #6
   1cc18:	movw	r0, #19204	; 0x4b04
   1cc1c:	str	r1, [sp, #24]
   1cc20:	movt	r0, #4
   1cc24:	b	1cbbc <__assert_fail@plt+0x8564>
   1cc28:	bl	14580 <gpg_err_code_from_syserror@plt>
   1cc2c:	cmp	r0, #0
   1cc30:	beq	1cc50 <__assert_fail@plt+0x85f8>
   1cc34:	uxth	r4, r0
   1cc38:	mov	r8, r9
   1cc3c:	orr	sl, r4, #67108864	; 0x4000000
   1cc40:	mov	r5, r9
   1cc44:	mov	r4, r9
   1cc48:	mov	r7, r9
   1cc4c:	b	1c968 <__assert_fail@plt+0x8310>
   1cc50:	mov	r4, r0
   1cc54:	mov	r5, r0
   1cc58:	mov	r7, r0
   1cc5c:	b	1cbf4 <__assert_fail@plt+0x859c>
   1cc60:	mov	sl, #187	; 0xbb
   1cc64:	mov	r8, r5
   1cc68:	movt	sl, #1024	; 0x400
   1cc6c:	mov	r4, r5
   1cc70:	b	1c968 <__assert_fail@plt+0x8310>
   1cc74:	movw	r4, #19236	; 0x4b24
   1cc78:	movt	r4, #4
   1cc7c:	b	1cb60 <__assert_fail@plt+0x8508>
   1cc80:	mov	sl, #187	; 0xbb
   1cc84:	mov	r4, r8
   1cc88:	movt	sl, #1024	; 0x400
   1cc8c:	b	1c968 <__assert_fail@plt+0x8310>
   1cc90:	movw	r4, #19224	; 0x4b18
   1cc94:	movt	r4, #4
   1cc98:	b	1cb60 <__assert_fail@plt+0x8508>
   1cc9c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1cca0:	cmp	r0, #0
   1cca4:	uxthne	r0, r0
   1cca8:	movne	r5, fp
   1ccac:	orrne	sl, r0, #67108864	; 0x4000000
   1ccb0:	bne	1c968 <__assert_fail@plt+0x8310>
   1ccb4:	mov	r5, r0
   1ccb8:	b	1cbf4 <__assert_fail@plt+0x859c>
   1ccbc:	bl	14580 <gpg_err_code_from_syserror@plt>
   1ccc0:	cmp	r0, #0
   1ccc4:	beq	1ccdc <__assert_fail@plt+0x8684>
   1ccc8:	uxth	sl, r0
   1cccc:	mov	r4, r8
   1ccd0:	orr	sl, sl, #67108864	; 0x4000000
   1ccd4:	b	1c968 <__assert_fail@plt+0x8310>
   1ccd8:	bl	13cec <__stack_chk_fail@plt>
   1ccdc:	mov	r4, r8
   1cce0:	b	1cbf4 <__assert_fail@plt+0x859c>
   1cce4:	push	{r3, lr}
   1cce8:	mov	r3, #0
   1ccec:	bl	35994 <__assert_fail@plt+0x2133c>
   1ccf0:	cmp	r0, #0
   1ccf4:	popeq	{r3, pc}
   1ccf8:	bl	14580 <gpg_err_code_from_syserror@plt>
   1ccfc:	cmp	r0, #0
   1cd00:	uxthne	r0, r0
   1cd04:	orrne	r0, r0, #67108864	; 0x4000000
   1cd08:	pop	{r3, pc}
   1cd0c:	push	{r4, r5, r6, r7, lr}
   1cd10:	movw	r7, #47296	; 0xb8c0
   1cd14:	movt	r7, #5
   1cd18:	sub	sp, sp, #8192	; 0x2000
   1cd1c:	sub	sp, sp, #12
   1cd20:	mov	r5, r1
   1cd24:	ldr	r3, [r7]
   1cd28:	add	r1, sp, #8192	; 0x2000
   1cd2c:	movw	r4, #57336	; 0xdff8
   1cd30:	mov	r6, r0
   1cd34:	movt	r4, #65535	; 0xffff
   1cd38:	str	r3, [r1, #4]
   1cd3c:	b	1cd68 <__assert_fail@plt+0x8710>
   1cd40:	add	r1, sp, #8192	; 0x2000
   1cd44:	add	r1, r1, #8
   1cd48:	ldr	r2, [r1, r4]
   1cd4c:	cmp	r2, #0
   1cd50:	beq	1cdc4 <__assert_fail@plt+0x876c>
   1cd54:	mov	r0, r6
   1cd58:	add	r1, sp, #4
   1cd5c:	bl	35994 <__assert_fail@plt+0x2133c>
   1cd60:	cmp	r0, #0
   1cd64:	bne	1cdb8 <__assert_fail@plt+0x8760>
   1cd68:	mov	r3, sp
   1cd6c:	mov	r0, r5
   1cd70:	add	r1, sp, #4
   1cd74:	mov	r2, #8192	; 0x2000
   1cd78:	bl	35900 <__assert_fail@plt+0x212a8>
   1cd7c:	subs	r3, r0, #0
   1cd80:	beq	1cd40 <__assert_fail@plt+0x86e8>
   1cd84:	bl	14580 <gpg_err_code_from_syserror@plt>
   1cd88:	cmp	r0, #0
   1cd8c:	beq	1cd98 <__assert_fail@plt+0x8740>
   1cd90:	uxth	r0, r0
   1cd94:	orr	r0, r0, #67108864	; 0x4000000
   1cd98:	add	r3, sp, #8192	; 0x2000
   1cd9c:	ldr	r2, [r3, #4]
   1cda0:	ldr	r3, [r7]
   1cda4:	cmp	r2, r3
   1cda8:	bne	1cdcc <__assert_fail@plt+0x8774>
   1cdac:	add	sp, sp, #8192	; 0x2000
   1cdb0:	add	sp, sp, #12
   1cdb4:	pop	{r4, r5, r6, r7, pc}
   1cdb8:	bl	14580 <gpg_err_code_from_syserror@plt>
   1cdbc:	cmp	r0, #0
   1cdc0:	bne	1cd90 <__assert_fail@plt+0x8738>
   1cdc4:	mov	r0, #0
   1cdc8:	b	1cd98 <__assert_fail@plt+0x8740>
   1cdcc:	bl	13cec <__stack_chk_fail@plt>
   1cdd0:	push	{r4, r5, r6, lr}
   1cdd4:	movw	r4, #47296	; 0xb8c0
   1cdd8:	movt	r4, #5
   1cddc:	sub	sp, sp, #8
   1cde0:	mov	ip, r1
   1cde4:	mov	r2, #4
   1cde8:	ldr	r6, [r4]
   1cdec:	mov	r1, sp
   1cdf0:	mov	r3, #0
   1cdf4:	lsr	lr, ip, #16
   1cdf8:	strb	ip, [sp, #3]
   1cdfc:	lsr	r5, ip, #24
   1ce00:	str	r6, [sp, #4]
   1ce04:	lsr	ip, ip, #8
   1ce08:	strb	r5, [sp]
   1ce0c:	strb	lr, [sp, #1]
   1ce10:	strb	ip, [sp, #2]
   1ce14:	bl	35994 <__assert_fail@plt+0x2133c>
   1ce18:	cmp	r0, #0
   1ce1c:	beq	1ce30 <__assert_fail@plt+0x87d8>
   1ce20:	bl	14580 <gpg_err_code_from_syserror@plt>
   1ce24:	cmp	r0, #0
   1ce28:	uxthne	r0, r0
   1ce2c:	orrne	r0, r0, #67108864	; 0x4000000
   1ce30:	ldr	r2, [sp, #4]
   1ce34:	ldr	r3, [r4]
   1ce38:	cmp	r2, r3
   1ce3c:	bne	1ce48 <__assert_fail@plt+0x87f0>
   1ce40:	add	sp, sp, #8
   1ce44:	pop	{r4, r5, r6, pc}
   1ce48:	bl	13cec <__stack_chk_fail@plt>
   1ce4c:	push	{r4, r5, r6, lr}
   1ce50:	mov	r5, r1
   1ce54:	mov	r1, r2
   1ce58:	mov	r4, r2
   1ce5c:	mov	r6, r0
   1ce60:	bl	1cdd0 <__assert_fail@plt+0x8778>
   1ce64:	cmp	r0, #0
   1ce68:	popne	{r4, r5, r6, pc}
   1ce6c:	mov	r0, r6
   1ce70:	mov	r1, r5
   1ce74:	mov	r2, r4
   1ce78:	pop	{r4, r5, r6, lr}
   1ce7c:	b	1cce4 <__assert_fail@plt+0x868c>
   1ce80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ce84:	movw	r8, #47296	; 0xb8c0
   1ce88:	movt	r8, #5
   1ce8c:	sub	sp, sp, #68	; 0x44
   1ce90:	sub	sl, r2, #4
   1ce94:	mov	r3, #0
   1ce98:	ldr	r2, [r8]
   1ce9c:	add	r9, sp, #64	; 0x40
   1cea0:	mov	r4, r3
   1cea4:	str	r1, [sp, #4]
   1cea8:	str	r3, [r9, #-52]!	; 0xffffffcc
   1ceac:	str	r2, [sp, #60]	; 0x3c
   1ceb0:	mov	r0, #5
   1ceb4:	mov	r1, r9
   1ceb8:	add	r2, sp, #16
   1cebc:	ldr	r3, [sl, #4]!
   1cec0:	bl	14310 <gcry_mpi_aprint@plt>
   1cec4:	subs	r5, r0, #0
   1cec8:	bne	1cf38 <__assert_fail@plt+0x88e0>
   1cecc:	ldr	r6, [sp, #16]
   1ced0:	cmp	r6, #20
   1ced4:	bhi	1cf5c <__assert_fail@plt+0x8904>
   1ced8:	rsb	fp, r6, #20
   1cedc:	add	r3, sp, #20
   1cee0:	add	r0, r3, r4
   1cee4:	mov	r1, r5
   1cee8:	mov	r2, fp
   1ceec:	bl	141cc <memset@plt>
   1cef0:	ldr	r7, [sp, #12]
   1cef4:	add	r3, sp, #20
   1cef8:	add	r0, fp, r4
   1cefc:	mov	r2, r6
   1cf00:	add	r0, r3, r0
   1cf04:	mov	r1, r7
   1cf08:	add	r4, r4, #20
   1cf0c:	bl	13ba8 <memcpy@plt>
   1cf10:	mov	r0, r7
   1cf14:	bl	13c44 <gcry_free@plt>
   1cf18:	cmp	r4, #40	; 0x28
   1cf1c:	str	r5, [sp, #12]
   1cf20:	bne	1ceb0 <__assert_fail@plt+0x8858>
   1cf24:	ldr	r0, [sp, #4]
   1cf28:	add	r1, sp, #20
   1cf2c:	mov	r2, r4
   1cf30:	bl	1ce4c <__assert_fail@plt+0x87f4>
   1cf34:	mov	r5, r0
   1cf38:	ldr	r0, [sp, #12]
   1cf3c:	bl	13c44 <gcry_free@plt>
   1cf40:	ldr	r2, [sp, #60]	; 0x3c
   1cf44:	ldr	r3, [r8]
   1cf48:	mov	r0, r5
   1cf4c:	cmp	r2, r3
   1cf50:	bne	1cf68 <__assert_fail@plt+0x8910>
   1cf54:	add	sp, sp, #68	; 0x44
   1cf58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1cf5c:	mov	r5, #63	; 0x3f
   1cf60:	movt	r5, #1024	; 0x400
   1cf64:	b	1cf38 <__assert_fail@plt+0x88e0>
   1cf68:	bl	13cec <__stack_chk_fail@plt>
   1cf6c:	push	{r4, r5, r6, lr}
   1cf70:	movw	r4, #47296	; 0xb8c0
   1cf74:	movt	r4, #5
   1cf78:	sub	sp, sp, #16
   1cf7c:	ldr	r3, [r2]
   1cf80:	mov	r6, r1
   1cf84:	ldr	ip, [r4]
   1cf88:	mov	r0, #5
   1cf8c:	add	r1, sp, #4
   1cf90:	add	r2, sp, #8
   1cf94:	str	ip, [sp, #12]
   1cf98:	bl	14310 <gcry_mpi_aprint@plt>
   1cf9c:	subs	r5, r0, #0
   1cfa0:	bne	1cfbc <__assert_fail@plt+0x8964>
   1cfa4:	mov	r0, r6
   1cfa8:	ldmib	sp, {r1, r2}
   1cfac:	bl	1ce4c <__assert_fail@plt+0x87f4>
   1cfb0:	mov	r5, r0
   1cfb4:	ldr	r0, [sp, #4]
   1cfb8:	bl	13c44 <gcry_free@plt>
   1cfbc:	ldr	r2, [sp, #12]
   1cfc0:	mov	r0, r5
   1cfc4:	ldr	r3, [r4]
   1cfc8:	cmp	r2, r3
   1cfcc:	bne	1cfd8 <__assert_fail@plt+0x8980>
   1cfd0:	add	sp, sp, #16
   1cfd4:	pop	{r4, r5, r6, pc}
   1cfd8:	bl	13cec <__stack_chk_fail@plt>
   1cfdc:	push	{r3, r4, r5, lr}
   1cfe0:	mov	r5, r0
   1cfe4:	mov	r0, r1
   1cfe8:	mov	r4, r1
   1cfec:	bl	14094 <strlen@plt>
   1cff0:	mov	r1, r4
   1cff4:	mov	r2, r0
   1cff8:	mov	r0, r5
   1cffc:	pop	{r3, r4, r5, lr}
   1d000:	b	1ce4c <__assert_fail@plt+0x87f4>
   1d004:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d008:	movw	r7, #47296	; 0xb8c0
   1d00c:	movt	r7, #5
   1d010:	sub	sp, sp, #28
   1d014:	mov	r0, #0
   1d018:	add	r9, sp, #12
   1d01c:	ldr	ip, [r7]
   1d020:	mov	r4, r0
   1d024:	mov	fp, r1
   1d028:	mov	sl, r2
   1d02c:	mov	r3, r0
   1d030:	mov	r5, r0
   1d034:	mov	r6, r0
   1d038:	str	ip, [sp, #20]
   1d03c:	str	r0, [sp, #4]
   1d040:	str	r0, [sp, #8]
   1d044:	add	r2, sp, #4
   1d048:	ldr	r3, [sl, r3, lsl #2]
   1d04c:	add	r1, r2, r4
   1d050:	mov	r0, #1
   1d054:	add	r2, r9, r4
   1d058:	bl	14310 <gcry_mpi_aprint@plt>
   1d05c:	subs	r8, r0, #0
   1d060:	bne	1d098 <__assert_fail@plt+0x8a40>
   1d064:	add	r5, r5, #1
   1d068:	ldr	r2, [r9, r4]
   1d06c:	cmp	r5, #2
   1d070:	add	r4, r4, #4
   1d074:	add	r2, r2, #4
   1d078:	mov	r3, r5
   1d07c:	add	r6, r6, r2
   1d080:	bne	1d044 <__assert_fail@plt+0x89ec>
   1d084:	mov	r1, r6
   1d088:	mov	r0, fp
   1d08c:	bl	1cdd0 <__assert_fail@plt+0x8778>
   1d090:	subs	r8, r0, #0
   1d094:	beq	1d0c4 <__assert_fail@plt+0x8a6c>
   1d098:	ldr	r0, [sp, #4]
   1d09c:	bl	13c44 <gcry_free@plt>
   1d0a0:	ldr	r0, [sp, #8]
   1d0a4:	bl	13c44 <gcry_free@plt>
   1d0a8:	ldr	r2, [sp, #20]
   1d0ac:	ldr	r3, [r7]
   1d0b0:	mov	r0, r8
   1d0b4:	cmp	r2, r3
   1d0b8:	bne	1d0f4 <__assert_fail@plt+0x8a9c>
   1d0bc:	add	sp, sp, #28
   1d0c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d0c4:	mov	r0, fp
   1d0c8:	ldr	r1, [sp, #4]
   1d0cc:	ldr	r2, [sp, #12]
   1d0d0:	bl	1ce4c <__assert_fail@plt+0x87f4>
   1d0d4:	subs	r8, r0, #0
   1d0d8:	bne	1d098 <__assert_fail@plt+0x8a40>
   1d0dc:	mov	r0, fp
   1d0e0:	ldr	r1, [sp, #8]
   1d0e4:	ldr	r2, [sp, #16]
   1d0e8:	bl	1ce4c <__assert_fail@plt+0x87f4>
   1d0ec:	mov	r8, r0
   1d0f0:	b	1d098 <__assert_fail@plt+0x8a40>
   1d0f4:	bl	13cec <__stack_chk_fail@plt>
   1d0f8:	push	{r4, r5, r6, r7, lr}
   1d0fc:	movw	r4, #47296	; 0xb8c0
   1d100:	movt	r4, #5
   1d104:	sub	sp, sp, #12
   1d108:	mov	r7, r1
   1d10c:	mov	r1, #1
   1d110:	ldr	r3, [r4]
   1d114:	str	r3, [sp, #4]
   1d118:	bl	14370 <gcry_sexp_nth@plt>
   1d11c:	subs	r6, r0, #0
   1d120:	beq	1d164 <__assert_fail@plt+0x8b0c>
   1d124:	mov	r1, #0
   1d128:	mov	r2, sp
   1d12c:	bl	13bd8 <gcry_sexp_nth_data@plt>
   1d130:	cmp	r0, #0
   1d134:	beq	1d164 <__assert_fail@plt+0x8b0c>
   1d138:	ldr	r1, [sp]
   1d13c:	bl	1c09c <__assert_fail@plt+0x7a44>
   1d140:	cmp	r0, #0
   1d144:	strne	r0, [r7]
   1d148:	movne	r5, #0
   1d14c:	bne	1d16c <__assert_fail@plt+0x8b14>
   1d150:	bl	14148 <__errno_location@plt>
   1d154:	ldr	r0, [r0]
   1d158:	bl	13b6c <gpg_err_code_from_errno@plt>
   1d15c:	mov	r5, r0
   1d160:	b	1d16c <__assert_fail@plt+0x8b14>
   1d164:	mov	r5, #83	; 0x53
   1d168:	movt	r5, #1024	; 0x400
   1d16c:	mov	r0, r6
   1d170:	bl	13be4 <gcry_sexp_release@plt>
   1d174:	ldr	r2, [sp, #4]
   1d178:	ldr	r3, [r4]
   1d17c:	mov	r0, r5
   1d180:	cmp	r2, r3
   1d184:	bne	1d190 <__assert_fail@plt+0x8b38>
   1d188:	add	sp, sp, #12
   1d18c:	pop	{r4, r5, r6, r7, pc}
   1d190:	bl	13cec <__stack_chk_fail@plt>
   1d194:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d198:	movw	r4, #47296	; 0xb8c0
   1d19c:	movt	r4, #5
   1d1a0:	sub	sp, sp, #100	; 0x64
   1d1a4:	mov	r7, r1
   1d1a8:	mov	r8, r0
   1d1ac:	ldr	r3, [r4]
   1d1b0:	mov	r0, r1
   1d1b4:	add	r1, sp, #28
   1d1b8:	mov	r5, #0
   1d1bc:	mov	r9, r2
   1d1c0:	str	r5, [sp, #24]
   1d1c4:	str	r3, [sp, #92]	; 0x5c
   1d1c8:	str	r5, [sp, #28]
   1d1cc:	str	r5, [sp, #36]	; 0x24
   1d1d0:	bl	1d0f8 <__assert_fail@plt+0x8aa0>
   1d1d4:	subs	r6, r0, #0
   1d1d8:	beq	1d220 <__assert_fail@plt+0x8bc8>
   1d1dc:	ldr	r0, [sp, #24]
   1d1e0:	bl	1c3d8 <__assert_fail@plt+0x7d80>
   1d1e4:	ldr	r0, [sp, #32]
   1d1e8:	bl	13c44 <gcry_free@plt>
   1d1ec:	ldr	r0, [sp, #36]	; 0x24
   1d1f0:	bl	13c44 <gcry_free@plt>
   1d1f4:	ldr	r0, [sp, #28]
   1d1f8:	bl	13c44 <gcry_free@plt>
   1d1fc:	mov	r0, r5
   1d200:	bl	13c44 <gcry_free@plt>
   1d204:	ldr	r2, [sp, #92]	; 0x5c
   1d208:	ldr	r3, [r4]
   1d20c:	mov	r0, r6
   1d210:	cmp	r2, r3
   1d214:	bne	1d4cc <__assert_fail@plt+0x8e74>
   1d218:	add	sp, sp, #100	; 0x64
   1d21c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d220:	ldr	r1, [sp, #28]
   1d224:	add	r2, sp, #48	; 0x30
   1d228:	bl	1bfbc <__assert_fail@plt+0x7964>
   1d22c:	subs	r6, r0, #0
   1d230:	bne	1d1dc <__assert_fail@plt+0x8b84>
   1d234:	ldr	ip, [sp, #88]	; 0x58
   1d238:	mov	r0, r7
   1d23c:	add	lr, sp, #32
   1d240:	ldr	r1, [sp, #52]	; 0x34
   1d244:	ldr	r2, [sp, #56]	; 0x38
   1d248:	add	r7, sp, #24
   1d24c:	str	ip, [sp]
   1d250:	add	ip, sp, #36	; 0x24
   1d254:	stmib	sp, {r6, r7}
   1d258:	ldr	r3, [sp, #60]	; 0x3c
   1d25c:	str	lr, [sp, #12]
   1d260:	str	ip, [sp, #16]
   1d264:	bl	1c8cc <__assert_fail@plt+0x8274>
   1d268:	subs	r6, r0, #0
   1d26c:	bne	1d1dc <__assert_fail@plt+0x8b84>
   1d270:	str	r6, [sp]
   1d274:	movw	r3, #19336	; 0x4b88
   1d278:	str	r6, [sp, #4]
   1d27c:	movt	r3, #4
   1d280:	mov	r1, r6
   1d284:	str	r3, [sp, #8]
   1d288:	mov	r2, r6
   1d28c:	mov	r3, #1
   1d290:	ldr	r7, [sp, #32]
   1d294:	ldr	r5, [sp, #24]
   1d298:	bl	34448 <__assert_fail@plt+0x1fdf0>
   1d29c:	subs	sl, r0, #0
   1d2a0:	beq	1d474 <__assert_fail@plt+0x8e1c>
   1d2a4:	ldr	r3, [sp, #88]	; 0x58
   1d2a8:	tst	r3, #2
   1d2ac:	beq	1d34c <__assert_fail@plt+0x8cf4>
   1d2b0:	cmp	r7, #0
   1d2b4:	beq	1d34c <__assert_fail@plt+0x8cf4>
   1d2b8:	ldr	fp, [pc, #560]	; 1d4f0 <__assert_fail@plt+0x8e98>
   1d2bc:	ldr	r0, [fp, #32]
   1d2c0:	cmp	r0, #0
   1d2c4:	beq	1d2d8 <__assert_fail@plt+0x8c80>
   1d2c8:	mov	r1, r7
   1d2cc:	bl	13a28 <strcmp@plt>
   1d2d0:	cmp	r0, #0
   1d2d4:	beq	1d444 <__assert_fail@plt+0x8dec>
   1d2d8:	add	r6, r6, #1
   1d2dc:	add	fp, fp, #44	; 0x2c
   1d2e0:	cmp	r6, #5
   1d2e4:	bne	1d2bc <__assert_fail@plt+0x8c64>
   1d2e8:	mov	r1, #0
   1d2ec:	mov	r0, sl
   1d2f0:	bl	1cfdc <__assert_fail@plt+0x8984>
   1d2f4:	subs	r6, r0, #0
   1d2f8:	beq	1d45c <__assert_fail@plt+0x8e04>
   1d2fc:	mov	r7, #0
   1d300:	mov	r5, r7
   1d304:	mov	fp, r7
   1d308:	mov	r0, sl
   1d30c:	bl	34ea0 <__assert_fail@plt+0x20848>
   1d310:	cmp	r6, #0
   1d314:	bne	1d438 <__assert_fail@plt+0x8de0>
   1d318:	mov	r2, r7
   1d31c:	mov	r0, r8
   1d320:	mov	r1, r5
   1d324:	bl	1ce4c <__assert_fail@plt+0x87f4>
   1d328:	subs	r6, r0, #0
   1d32c:	bne	1d1dc <__assert_fail@plt+0x8b84>
   1d330:	cmp	r9, #0
   1d334:	mov	r0, r8
   1d338:	ldreq	r1, [sp, #36]	; 0x24
   1d33c:	movne	r1, r9
   1d340:	bl	1cfdc <__assert_fail@plt+0x8984>
   1d344:	mov	r6, r0
   1d348:	b	1d1dc <__assert_fail@plt+0x8b84>
   1d34c:	mov	r0, sl
   1d350:	ldr	r1, [sp, #48]	; 0x30
   1d354:	bl	1cfdc <__assert_fail@plt+0x8984>
   1d358:	subs	r6, r0, #0
   1d35c:	bne	1d2fc <__assert_fail@plt+0x8ca4>
   1d360:	ldr	r3, [r5]
   1d364:	cmp	r3, #0
   1d368:	movne	r7, #0
   1d36c:	beq	1d3d4 <__assert_fail@plt+0x8d7c>
   1d370:	mov	r0, #1
   1d374:	add	r1, sp, #40	; 0x28
   1d378:	add	r2, sp, #44	; 0x2c
   1d37c:	str	r7, [sp, #40]	; 0x28
   1d380:	bl	14310 <gcry_mpi_aprint@plt>
   1d384:	subs	r6, r0, #0
   1d388:	beq	1d3a4 <__assert_fail@plt+0x8d4c>
   1d38c:	mov	r7, #0
   1d390:	ldr	r0, [sp, #40]	; 0x28
   1d394:	bl	13c44 <gcry_free@plt>
   1d398:	mov	r5, r7
   1d39c:	mov	fp, r7
   1d3a0:	b	1d308 <__assert_fail@plt+0x8cb0>
   1d3a4:	ldr	r1, [sp, #40]	; 0x28
   1d3a8:	mov	r0, sl
   1d3ac:	ldr	r2, [sp, #44]	; 0x2c
   1d3b0:	bl	1ce4c <__assert_fail@plt+0x87f4>
   1d3b4:	mov	r6, r0
   1d3b8:	ldr	r0, [sp, #40]	; 0x28
   1d3bc:	bl	13c44 <gcry_free@plt>
   1d3c0:	cmp	r6, #0
   1d3c4:	bne	1d2fc <__assert_fail@plt+0x8ca4>
   1d3c8:	ldr	r3, [r5, #4]!
   1d3cc:	cmp	r3, #0
   1d3d0:	bne	1d370 <__assert_fail@plt+0x8d18>
   1d3d4:	mov	r0, sl
   1d3d8:	bl	35460 <__assert_fail@plt+0x20e08>
   1d3dc:	cmn	r0, #1
   1d3e0:	mov	r7, r0
   1d3e4:	beq	1d494 <__assert_fail@plt+0x8e3c>
   1d3e8:	mov	r1, #0
   1d3ec:	mov	r0, sl
   1d3f0:	mov	r2, r1
   1d3f4:	bl	3535c <__assert_fail@plt+0x20d04>
   1d3f8:	cmp	r0, #0
   1d3fc:	mov	r6, r0
   1d400:	mov	r5, r0
   1d404:	bne	1d2fc <__assert_fail@plt+0x8ca4>
   1d408:	mov	r0, r7
   1d40c:	bl	139c8 <gcry_malloc@plt>
   1d410:	subs	fp, r0, #0
   1d414:	beq	1d4d0 <__assert_fail@plt+0x8e78>
   1d418:	mov	r0, sl
   1d41c:	mov	r1, fp
   1d420:	mov	r2, r7
   1d424:	bl	1c640 <__assert_fail@plt+0x7fe8>
   1d428:	subs	r6, r0, #0
   1d42c:	moveq	r5, fp
   1d430:	movne	r7, r5
   1d434:	b	1d308 <__assert_fail@plt+0x8cb0>
   1d438:	mov	r0, fp
   1d43c:	bl	13c44 <gcry_free@plt>
   1d440:	b	1d1dc <__assert_fail@plt+0x8b84>
   1d444:	movw	r3, #17728	; 0x4540
   1d448:	movt	r3, #4
   1d44c:	mov	r2, #44	; 0x2c
   1d450:	mla	r3, r2, r6, r3
   1d454:	ldr	r1, [r3, #680]	; 0x2a8
   1d458:	b	1d2ec <__assert_fail@plt+0x8c94>
   1d45c:	mov	r1, r7
   1d460:	mov	r0, sl
   1d464:	bl	1cfdc <__assert_fail@plt+0x8984>
   1d468:	subs	r6, r0, #0
   1d46c:	bne	1d2fc <__assert_fail@plt+0x8ca4>
   1d470:	b	1d360 <__assert_fail@plt+0x8d08>
   1d474:	bl	14580 <gpg_err_code_from_syserror@plt>
   1d478:	mov	r7, #0
   1d47c:	mov	fp, r7
   1d480:	mov	r5, r7
   1d484:	cmp	r0, #0
   1d488:	uxthne	r0, r0
   1d48c:	orrne	r6, r0, #67108864	; 0x4000000
   1d490:	b	1d310 <__assert_fail@plt+0x8cb8>
   1d494:	bl	14580 <gpg_err_code_from_syserror@plt>
   1d498:	cmp	r0, #0
   1d49c:	bne	1d4b4 <__assert_fail@plt+0x8e5c>
   1d4a0:	mov	r6, #0
   1d4a4:	mov	r7, r6
   1d4a8:	mov	r5, r6
   1d4ac:	mov	fp, r6
   1d4b0:	b	1d308 <__assert_fail@plt+0x8cb0>
   1d4b4:	mov	r7, #0
   1d4b8:	uxth	r6, r0
   1d4bc:	orr	r6, r6, #67108864	; 0x4000000
   1d4c0:	mov	r5, r7
   1d4c4:	mov	fp, r7
   1d4c8:	b	1d308 <__assert_fail@plt+0x8cb0>
   1d4cc:	bl	13cec <__stack_chk_fail@plt>
   1d4d0:	bl	14580 <gpg_err_code_from_syserror@plt>
   1d4d4:	cmp	r0, #0
   1d4d8:	beq	1d4a0 <__assert_fail@plt+0x8e48>
   1d4dc:	uxth	r6, r0
   1d4e0:	mov	r5, fp
   1d4e4:	orr	r6, r6, #67108864	; 0x4000000
   1d4e8:	mov	r7, fp
   1d4ec:	b	1d308 <__assert_fail@plt+0x8cb0>
   1d4f0:	andeq	r4, r4, r8, ror #15
   1d4f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d4f8:	movw	fp, #47296	; 0xb8c0
   1d4fc:	movt	fp, #5
   1d500:	sub	sp, sp, #316	; 0x13c
   1d504:	mov	ip, #0
   1d508:	mov	r6, r0
   1d50c:	ldr	r4, [fp]
   1d510:	mov	r0, ip
   1d514:	str	r2, [sp, #68]	; 0x44
   1d518:	mov	r1, ip
   1d51c:	str	ip, [sp]
   1d520:	mov	r2, ip
   1d524:	str	ip, [sp, #4]
   1d528:	movw	lr, #19340	; 0x4b8c
   1d52c:	mov	r3, #1
   1d530:	movt	lr, #4
   1d534:	str	lr, [sp, #8]
   1d538:	str	r4, [sp, #308]	; 0x134
   1d53c:	str	ip, [sp, #80]	; 0x50
   1d540:	str	ip, [sp, #72]	; 0x48
   1d544:	str	ip, [sp, #76]	; 0x4c
   1d548:	bl	34448 <__assert_fail@plt+0x1fdf0>
   1d54c:	cmp	r0, #0
   1d550:	str	r0, [sp, #60]	; 0x3c
   1d554:	beq	1dbf8 <__assert_fail@plt+0x95a0>
   1d558:	movw	r4, #48116	; 0xbbf4
   1d55c:	movt	r4, #5
   1d560:	ldr	r5, [r4, #52]	; 0x34
   1d564:	cmp	r5, #0
   1d568:	bne	1d5e0 <__assert_fail@plt+0x8f88>
   1d56c:	movw	r1, #19344	; 0x4b90
   1d570:	mov	r0, r6
   1d574:	movt	r1, #4
   1d578:	add	r2, sp, #88	; 0x58
   1d57c:	str	r5, [sp, #92]	; 0x5c
   1d580:	str	r5, [sp, #76]	; 0x4c
   1d584:	bl	2a9f4 <__assert_fail@plt+0x1639c>
   1d588:	uxth	r3, r0
   1d58c:	mov	r7, r0
   1d590:	cmp	r3, #110	; 0x6e
   1d594:	beq	1dc0c <__assert_fail@plt+0x95b4>
   1d598:	cmp	r7, #0
   1d59c:	bne	1dbc0 <__assert_fail@plt+0x9568>
   1d5a0:	ldr	r3, [sp, #92]	; 0x5c
   1d5a4:	cmp	r3, #0
   1d5a8:	beq	1dc6c <__assert_fail@plt+0x9614>
   1d5ac:	mov	r0, r6
   1d5b0:	ldr	r1, [sp, #88]	; 0x58
   1d5b4:	add	r2, sp, #96	; 0x60
   1d5b8:	bl	2a8a0 <__assert_fail@plt+0x16248>
   1d5bc:	subs	r5, r0, #0
   1d5c0:	beq	1dacc <__assert_fail@plt+0x9474>
   1d5c4:	ldr	r3, [r4, #4]
   1d5c8:	cmp	r3, #0
   1d5cc:	bne	1da40 <__assert_fail@plt+0x93e8>
   1d5d0:	ldr	r0, [sp, #92]	; 0x5c
   1d5d4:	bl	13c44 <gcry_free@plt>
   1d5d8:	ldr	r0, [sp, #88]	; 0x58
   1d5dc:	bl	13c44 <gcry_free@plt>
   1d5e0:	mov	ip, #0
   1d5e4:	str	ip, [sp, #56]	; 0x38
   1d5e8:	ldr	r0, [r4, #20]
   1d5ec:	movw	r1, #1708	; 0x6ac
   1d5f0:	mov	r2, #0
   1d5f4:	movt	r1, #4
   1d5f8:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   1d5fc:	subs	r4, r0, #0
   1d600:	beq	1da90 <__assert_fail@plt+0x9438>
   1d604:	bl	14094 <strlen@plt>
   1d608:	add	r0, r0, #46	; 0x2e
   1d60c:	bl	139c8 <gcry_malloc@plt>
   1d610:	subs	sl, r0, #0
   1d614:	beq	1dab8 <__assert_fail@plt+0x9460>
   1d618:	mov	r1, r4
   1d61c:	bl	13cb0 <stpcpy@plt>
   1d620:	movw	r3, #37288	; 0x91a8
   1d624:	movt	r3, #4
   1d628:	ldrh	r3, [r3]
   1d62c:	mov	r5, r0
   1d630:	mov	r0, r4
   1d634:	strh	r3, [r5]
   1d638:	bl	13c44 <gcry_free@plt>
   1d63c:	add	r0, sp, #80	; 0x50
   1d640:	mov	r1, #0
   1d644:	bl	1ba88 <__assert_fail@plt+0x7430>
   1d648:	cmp	r0, #0
   1d64c:	bne	1d814 <__assert_fail@plt+0x91bc>
   1d650:	ldr	r0, [sp, #80]	; 0x50
   1d654:	add	r5, r5, #1
   1d658:	str	r5, [sp, #64]	; 0x40
   1d65c:	movw	r5, #17180	; 0x431c
   1d660:	movt	r5, #4
   1d664:	bl	1bc4c <__assert_fail@plt+0x75f4>
   1d668:	cmp	r0, #0
   1d66c:	bne	1d8e8 <__assert_fail@plt+0x9290>
   1d670:	ldr	r0, [sp, #80]	; 0x50
   1d674:	ldr	r3, [r0, #12]
   1d678:	cmp	r3, #0
   1d67c:	beq	1d664 <__assert_fail@plt+0x900c>
   1d680:	ldr	r6, [r0, #16]
   1d684:	cmp	r6, #0
   1d688:	bne	1d664 <__assert_fail@plt+0x900c>
   1d68c:	add	r4, r0, #28
   1d690:	mov	r0, r4
   1d694:	bl	14094 <strlen@plt>
   1d698:	cmp	r0, #40	; 0x28
   1d69c:	bne	1ded0 <__assert_fail@plt+0x9878>
   1d6a0:	mov	r1, r4
   1d6a4:	ldr	r0, [sp, #64]	; 0x40
   1d6a8:	bl	13cb0 <stpcpy@plt>
   1d6ac:	ldrb	r2, [r5, #4]
   1d6b0:	movw	r1, #19760	; 0x4d30
   1d6b4:	movt	r1, #4
   1d6b8:	mov	r3, r0
   1d6bc:	ldr	r0, [r5]
   1d6c0:	strb	r2, [r3, #4]
   1d6c4:	str	r0, [r3]
   1d6c8:	mov	r0, sl
   1d6cc:	bl	34354 <__assert_fail@plt+0x1fcfc>
   1d6d0:	subs	r9, r0, #0
   1d6d4:	beq	1da1c <__assert_fail@plt+0x93c4>
   1d6d8:	bl	3504c <__assert_fail@plt+0x209f4>
   1d6dc:	add	r2, sp, #184	; 0xb8
   1d6e0:	mov	r1, r0
   1d6e4:	mov	r0, #3
   1d6e8:	bl	13ddc <__fxstat64@plt>
   1d6ec:	subs	r8, r0, #0
   1d6f0:	beq	1d868 <__assert_fail@plt+0x9210>
   1d6f4:	bl	14580 <gpg_err_code_from_syserror@plt>
   1d6f8:	cmp	r0, #0
   1d6fc:	beq	1d94c <__assert_fail@plt+0x92f4>
   1d700:	uxth	r0, r0
   1d704:	mov	r8, r6
   1d708:	orr	r4, r0, #67108864	; 0x4000000
   1d70c:	mov	r7, r6
   1d710:	mov	r0, r9
   1d714:	bl	34ea0 <__assert_fail@plt+0x20848>
   1d718:	cmp	r4, #0
   1d71c:	bne	1d8a0 <__assert_fail@plt+0x9248>
   1d720:	mov	r3, r6
   1d724:	mov	r1, r4
   1d728:	mov	r2, r8
   1d72c:	add	r0, sp, #72	; 0x48
   1d730:	bl	13bf0 <gcry_sexp_sscan@plt>
   1d734:	mov	r6, r0
   1d738:	mov	r0, r8
   1d73c:	bl	13c44 <gcry_free@plt>
   1d740:	cmp	r6, #0
   1d744:	bne	1d814 <__assert_fail@plt+0x91bc>
   1d748:	ldr	r0, [sp, #72]	; 0x48
   1d74c:	add	r1, sp, #184	; 0xb8
   1d750:	str	r4, [sp, #184]	; 0xb8
   1d754:	bl	1d0f8 <__assert_fail@plt+0x8aa0>
   1d758:	cmp	r0, #0
   1d75c:	bne	1d814 <__assert_fail@plt+0x91bc>
   1d760:	ldr	r1, [sp, #184]	; 0xb8
   1d764:	add	r2, sp, #96	; 0x60
   1d768:	bl	1bfbc <__assert_fail@plt+0x7964>
   1d76c:	mov	r6, r0
   1d770:	ldr	r0, [sp, #184]	; 0xb8
   1d774:	bl	13c44 <gcry_free@plt>
   1d778:	cmp	r6, #0
   1d77c:	bne	1d814 <__assert_fail@plt+0x91bc>
   1d780:	add	r6, sp, #96	; 0x60
   1d784:	add	ip, sp, #140	; 0x8c
   1d788:	add	lr, sp, #184	; 0xb8
   1d78c:	str	ip, [sp, #52]	; 0x34
   1d790:	ldm	r6!, {r0, r1, r2, r3}
   1d794:	add	r7, sp, #312	; 0x138
   1d798:	str	lr, [sp, #4]
   1d79c:	add	r8, sp, #84	; 0x54
   1d7a0:	str	r4, [r7, #-220]!	; 0xffffff24
   1d7a4:	add	lr, sp, #88	; 0x58
   1d7a8:	ldr	r9, [sp, #100]	; 0x64
   1d7ac:	stmia	ip!, {r0, r1, r2, r3}
   1d7b0:	ldm	r6!, {r0, r1, r2, r3}
   1d7b4:	str	r8, [sp, #12]
   1d7b8:	str	r7, [sp, #8]
   1d7bc:	ldr	r8, [sp, #104]	; 0x68
   1d7c0:	stmia	ip!, {r0, r1, r2, r3}
   1d7c4:	ldm	r6, {r0, r1, r2}
   1d7c8:	ldr	r7, [sp, #108]	; 0x6c
   1d7cc:	ldr	r6, [sp, #136]	; 0x88
   1d7d0:	str	r4, [sp, #88]	; 0x58
   1d7d4:	stm	ip, {r0, r1, r2}
   1d7d8:	mov	r3, r7
   1d7dc:	ldr	r0, [sp, #72]	; 0x48
   1d7e0:	mov	r1, r9
   1d7e4:	str	r6, [sp]
   1d7e8:	mov	r2, r8
   1d7ec:	str	lr, [sp, #16]
   1d7f0:	bl	1c8cc <__assert_fail@plt+0x8274>
   1d7f4:	cmp	r0, #0
   1d7f8:	beq	1d960 <__assert_fail@plt+0x9308>
   1d7fc:	ldr	r0, [sp, #92]	; 0x5c
   1d800:	bl	1c3d8 <__assert_fail@plt+0x7d80>
   1d804:	ldr	r0, [sp, #88]	; 0x58
   1d808:	bl	13c44 <gcry_free@plt>
   1d80c:	ldr	r0, [sp, #84]	; 0x54
   1d810:	bl	13c44 <gcry_free@plt>
   1d814:	ldr	r0, [sp, #72]	; 0x48
   1d818:	bl	13be4 <gcry_sexp_release@plt>
   1d81c:	ldr	r0, [sp, #76]	; 0x4c
   1d820:	bl	13be4 <gcry_sexp_release@plt>
   1d824:	ldr	r0, [sp, #68]	; 0x44
   1d828:	mov	r1, #5
   1d82c:	bl	1c808 <__assert_fail@plt+0x81b0>
   1d830:	mov	r4, r0
   1d834:	ldr	r0, [sp, #60]	; 0x3c
   1d838:	bl	34ea0 <__assert_fail@plt+0x20848>
   1d83c:	ldr	r0, [sp, #80]	; 0x50
   1d840:	bl	1ba60 <__assert_fail@plt+0x7408>
   1d844:	mov	r0, sl
   1d848:	bl	13c44 <gcry_free@plt>
   1d84c:	ldr	r2, [sp, #308]	; 0x134
   1d850:	ldr	r3, [fp]
   1d854:	mov	r0, r4
   1d858:	cmp	r2, r3
   1d85c:	bne	1decc <__assert_fail@plt+0x9874>
   1d860:	add	sp, sp, #316	; 0x13c
   1d864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d868:	ldr	r0, [sp, #232]	; 0xe8
   1d86c:	bl	139c8 <gcry_malloc@plt>
   1d870:	subs	r7, r0, #0
   1d874:	beq	1da70 <__assert_fail@plt+0x9418>
   1d878:	mov	r0, r9
   1d87c:	mov	r1, r7
   1d880:	ldr	r2, [sp, #232]	; 0xe8
   1d884:	bl	1c640 <__assert_fail@plt+0x7fe8>
   1d888:	subs	r4, r0, #0
   1d88c:	movne	r6, r8
   1d890:	movne	r8, r6
   1d894:	ldreq	r6, [sp, #232]	; 0xe8
   1d898:	moveq	r8, r7
   1d89c:	b	1d710 <__assert_fail@plt+0x90b8>
   1d8a0:	mov	r0, r7
   1d8a4:	bl	13c44 <gcry_free@plt>
   1d8a8:	ldr	r6, [sp, #80]	; 0x50
   1d8ac:	mov	r0, r4
   1d8b0:	ldr	r7, [r6]
   1d8b4:	ldr	r4, [r6, #8]
   1d8b8:	bl	13a64 <gpg_strerror@plt>
   1d8bc:	add	r3, r6, #28
   1d8c0:	mov	r1, r7
   1d8c4:	mov	r2, r4
   1d8c8:	str	r0, [sp]
   1d8cc:	movw	r0, #19764	; 0x4d34
   1d8d0:	movt	r0, #4
   1d8d4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1d8d8:	ldr	r0, [sp, #80]	; 0x50
   1d8dc:	bl	1bc4c <__assert_fail@plt+0x75f4>
   1d8e0:	cmp	r0, #0
   1d8e4:	beq	1d670 <__assert_fail@plt+0x9018>
   1d8e8:	mov	r1, #0
   1d8ec:	ldr	r0, [sp, #60]	; 0x3c
   1d8f0:	mov	r2, r1
   1d8f4:	bl	3535c <__assert_fail@plt+0x20d04>
   1d8f8:	cmp	r0, #0
   1d8fc:	bne	1dc5c <__assert_fail@plt+0x9604>
   1d900:	ldr	r0, [sp, #72]	; 0x48
   1d904:	bl	13be4 <gcry_sexp_release@plt>
   1d908:	ldr	r0, [sp, #76]	; 0x4c
   1d90c:	bl	13be4 <gcry_sexp_release@plt>
   1d910:	ldr	r0, [sp, #68]	; 0x44
   1d914:	mov	r1, #12
   1d918:	bl	1c808 <__assert_fail@plt+0x81b0>
   1d91c:	subs	r4, r0, #0
   1d920:	bne	1d834 <__assert_fail@plt+0x91dc>
   1d924:	ldr	r1, [sp, #56]	; 0x38
   1d928:	ldr	r0, [sp, #68]	; 0x44
   1d92c:	bl	1cdd0 <__assert_fail@plt+0x8778>
   1d930:	subs	r4, r0, #0
   1d934:	bne	1d834 <__assert_fail@plt+0x91dc>
   1d938:	ldr	r0, [sp, #68]	; 0x44
   1d93c:	ldr	r1, [sp, #60]	; 0x3c
   1d940:	bl	1cd0c <__assert_fail@plt+0x86b4>
   1d944:	mov	r4, r0
   1d948:	b	1d834 <__assert_fail@plt+0x91dc>
   1d94c:	mov	r4, #0
   1d950:	mov	r6, r4
   1d954:	mov	r8, r4
   1d958:	mov	r7, r4
   1d95c:	b	1d710 <__assert_fail@plt+0x90b8>
   1d960:	add	ip, sp, #152	; 0x98
   1d964:	str	r8, [sp, #148]	; 0x94
   1d968:	str	r7, [sp, #152]	; 0x98
   1d96c:	mov	lr, sp
   1d970:	str	r6, [sp, #180]	; 0xb4
   1d974:	str	r9, [sp, #144]	; 0x90
   1d978:	ldm	ip!, {r0, r1, r2, r3}
   1d97c:	ldr	r6, [sp, #88]	; 0x58
   1d980:	ldr	r8, [sp, #84]	; 0x54
   1d984:	ldr	r7, [sp, #92]	; 0x5c
   1d988:	str	r6, [sp, #44]	; 0x2c
   1d98c:	str	r4, [sp, #32]
   1d990:	str	r8, [sp, #36]	; 0x24
   1d994:	str	r7, [sp, #40]	; 0x28
   1d998:	stmia	lr!, {r0, r1, r2, r3}
   1d99c:	ldm	ip, {r0, r1, r2, r3}
   1d9a0:	stm	lr, {r0, r1, r2, r3}
   1d9a4:	add	r0, sp, #76	; 0x4c
   1d9a8:	ldr	ip, [sp, #52]	; 0x34
   1d9ac:	ldm	ip, {r1, r2, r3}
   1d9b0:	bl	1c0d4 <__assert_fail@plt+0x7a7c>
   1d9b4:	mov	r6, r0
   1d9b8:	ldr	r0, [sp, #92]	; 0x5c
   1d9bc:	bl	1c3d8 <__assert_fail@plt+0x7d80>
   1d9c0:	ldr	r0, [sp, #88]	; 0x58
   1d9c4:	bl	13c44 <gcry_free@plt>
   1d9c8:	ldr	r0, [sp, #84]	; 0x54
   1d9cc:	bl	13c44 <gcry_free@plt>
   1d9d0:	cmp	r6, #0
   1d9d4:	bne	1d814 <__assert_fail@plt+0x91bc>
   1d9d8:	ldr	r0, [sp, #72]	; 0x48
   1d9dc:	bl	13be4 <gcry_sexp_release@plt>
   1d9e0:	ldr	r0, [sp, #60]	; 0x3c
   1d9e4:	ldr	r1, [sp, #76]	; 0x4c
   1d9e8:	mov	r2, r4
   1d9ec:	str	r4, [sp, #72]	; 0x48
   1d9f0:	bl	1d194 <__assert_fail@plt+0x8b3c>
   1d9f4:	cmp	r0, #0
   1d9f8:	bne	1d814 <__assert_fail@plt+0x91bc>
   1d9fc:	ldr	ip, [sp, #56]	; 0x38
   1da00:	ldr	r0, [sp, #76]	; 0x4c
   1da04:	add	ip, ip, #1
   1da08:	str	ip, [sp, #56]	; 0x38
   1da0c:	bl	13be4 <gcry_sexp_release@plt>
   1da10:	str	r4, [sp, #76]	; 0x4c
   1da14:	ldr	r0, [sp, #80]	; 0x50
   1da18:	b	1d664 <__assert_fail@plt+0x900c>
   1da1c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1da20:	cmp	r0, #0
   1da24:	uxthne	r4, r0
   1da28:	orrne	r4, r4, #67108864	; 0x4000000
   1da2c:	moveq	r4, r0
   1da30:	mov	r7, #0
   1da34:	mov	r8, r7
   1da38:	mov	r6, r7
   1da3c:	b	1d718 <__assert_fail@plt+0x90c0>
   1da40:	mov	r2, #5
   1da44:	movw	r1, #19496	; 0x4c28
   1da48:	mov	r0, #0
   1da4c:	movt	r1, #4
   1da50:	bl	13cc8 <dcgettext@plt>
   1da54:	mov	r6, r0
   1da58:	mov	r0, r5
   1da5c:	bl	13a64 <gpg_strerror@plt>
   1da60:	mov	r1, r0
   1da64:	mov	r0, r6
   1da68:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1da6c:	b	1d5d0 <__assert_fail@plt+0x8f78>
   1da70:	bl	14580 <gpg_err_code_from_syserror@plt>
   1da74:	cmp	r0, #0
   1da78:	beq	1d94c <__assert_fail@plt+0x92f4>
   1da7c:	uxth	r0, r0
   1da80:	mov	r8, r7
   1da84:	orr	r4, r0, #67108864	; 0x4000000
   1da88:	mov	r6, r7
   1da8c:	b	1d710 <__assert_fail@plt+0x90b8>
   1da90:	bl	14580 <gpg_err_code_from_syserror@plt>
   1da94:	mov	r5, r0
   1da98:	ldr	r0, [sp, #72]	; 0x48
   1da9c:	bl	13be4 <gcry_sexp_release@plt>
   1daa0:	ldr	r0, [sp, #76]	; 0x4c
   1daa4:	bl	13be4 <gcry_sexp_release@plt>
   1daa8:	cmp	r5, #0
   1daac:	bne	1df08 <__assert_fail@plt+0x98b0>
   1dab0:	mov	sl, r5
   1dab4:	b	1d910 <__assert_fail@plt+0x92b8>
   1dab8:	bl	14580 <gpg_err_code_from_syserror@plt>
   1dabc:	mov	r5, r0
   1dac0:	mov	r0, r4
   1dac4:	bl	13c44 <gcry_free@plt>
   1dac8:	b	1da98 <__assert_fail@plt+0x9440>
   1dacc:	mov	r1, r5
   1dad0:	mov	r2, r5
   1dad4:	mov	r3, r5
   1dad8:	ldr	r0, [sp, #96]	; 0x60
   1dadc:	bl	14604 <gcry_sexp_canon_len@plt>
   1dae0:	mov	r1, r5
   1dae4:	ldr	r2, [sp, #96]	; 0x60
   1dae8:	mov	r3, r0
   1daec:	add	r0, sp, #140	; 0x8c
   1daf0:	bl	13bf0 <gcry_sexp_sscan@plt>
   1daf4:	cmp	r0, #0
   1daf8:	bne	1dd3c <__assert_fail@plt+0x96e4>
   1dafc:	ldr	r0, [sp, #140]	; 0x8c
   1db00:	add	r1, sp, #288	; 0x120
   1db04:	bl	1c894 <__assert_fail@plt+0x823c>
   1db08:	subs	r7, r0, #0
   1db0c:	bne	1dcd0 <__assert_fail@plt+0x9678>
   1db10:	add	r0, sp, #288	; 0x120
   1db14:	bl	23540 <__assert_fail@plt+0xeee8>
   1db18:	cmp	r0, #0
   1db1c:	addeq	r8, sp, #184	; 0xb8
   1db20:	bne	1dd70 <__assert_fail@plt+0x9718>
   1db24:	mov	r0, r6
   1db28:	mov	r2, r8
   1db2c:	movw	r1, #19700	; 0x4cf4
   1db30:	movt	r1, #4
   1db34:	bl	2a9f4 <__assert_fail@plt+0x1639c>
   1db38:	cmp	r0, #0
   1db3c:	movw	r0, #19716	; 0x4d04
   1db40:	bne	1dd5c <__assert_fail@plt+0x9704>
   1db44:	ldr	r1, [sp, #184]	; 0xb8
   1db48:	movt	r0, #4
   1db4c:	bl	2ed14 <__assert_fail@plt+0x1a6bc>
   1db50:	mov	r5, r0
   1db54:	ldr	r0, [sp, #184]	; 0xb8
   1db58:	bl	13c44 <gcry_free@plt>
   1db5c:	cmp	r5, #0
   1db60:	beq	1deb8 <__assert_fail@plt+0x9860>
   1db64:	ldr	r0, [sp, #96]	; 0x60
   1db68:	bl	13c44 <gcry_free@plt>
   1db6c:	ldr	r0, [sp, #92]	; 0x5c
   1db70:	bl	13c44 <gcry_free@plt>
   1db74:	ldr	r0, [sp, #88]	; 0x58
   1db78:	bl	13c44 <gcry_free@plt>
   1db7c:	ldr	r1, [sp, #140]	; 0x8c
   1db80:	str	r1, [sp, #76]	; 0x4c
   1db84:	mov	r2, r5
   1db88:	ldr	r0, [sp, #60]	; 0x3c
   1db8c:	bl	1d194 <__assert_fail@plt+0x8b3c>
   1db90:	mov	r6, r0
   1db94:	ldr	r0, [sp, #76]	; 0x4c
   1db98:	bl	13be4 <gcry_sexp_release@plt>
   1db9c:	mov	r0, r5
   1dba0:	mov	r3, #0
   1dba4:	str	r3, [sp, #76]	; 0x4c
   1dba8:	bl	13c44 <gcry_free@plt>
   1dbac:	cmp	r6, #0
   1dbb0:	bne	1dc04 <__assert_fail@plt+0x95ac>
   1dbb4:	mov	ip, #1
   1dbb8:	str	ip, [sp, #56]	; 0x38
   1dbbc:	b	1d5e8 <__assert_fail@plt+0x8f90>
   1dbc0:	mov	r2, #5
   1dbc4:	movw	r1, #19428	; 0x4be4
   1dbc8:	mov	r0, #0
   1dbcc:	movt	r1, #4
   1dbd0:	bl	13cc8 <dcgettext@plt>
   1dbd4:	mov	r5, r0
   1dbd8:	mov	r0, r7
   1dbdc:	bl	13a64 <gpg_strerror@plt>
   1dbe0:	mov	r1, r0
   1dbe4:	mov	r0, r5
   1dbe8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1dbec:	ldr	r0, [sp, #92]	; 0x5c
   1dbf0:	bl	13c44 <gcry_free@plt>
   1dbf4:	b	1d5e0 <__assert_fail@plt+0x8f88>
   1dbf8:	bl	14580 <gpg_err_code_from_syserror@plt>
   1dbfc:	cmp	r0, #0
   1dc00:	beq	1dcc0 <__assert_fail@plt+0x9668>
   1dc04:	mov	sl, #0
   1dc08:	b	1d814 <__assert_fail@plt+0x91bc>
   1dc0c:	mov	r0, r6
   1dc10:	add	r1, sp, #92	; 0x5c
   1dc14:	bl	2a1cc <__assert_fail@plt+0x15b74>
   1dc18:	subs	r7, r0, #0
   1dc1c:	beq	1dd08 <__assert_fail@plt+0x96b0>
   1dc20:	ldr	r3, [r4, #4]
   1dc24:	cmp	r3, #0
   1dc28:	beq	1d5e0 <__assert_fail@plt+0x8f88>
   1dc2c:	mov	r2, #5
   1dc30:	mov	r0, r5
   1dc34:	movw	r1, #19356	; 0x4b9c
   1dc38:	movt	r1, #4
   1dc3c:	bl	13cc8 <dcgettext@plt>
   1dc40:	mov	r5, r0
   1dc44:	mov	r0, r7
   1dc48:	bl	13a64 <gpg_strerror@plt>
   1dc4c:	mov	r1, r0
   1dc50:	mov	r0, r5
   1dc54:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1dc58:	b	1d5e0 <__assert_fail@plt+0x8f88>
   1dc5c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1dc60:	cmp	r0, #0
   1dc64:	bne	1d814 <__assert_fail@plt+0x91bc>
   1dc68:	b	1d900 <__assert_fail@plt+0x92a8>
   1dc6c:	movw	r1, #19484	; 0x4c1c
   1dc70:	mov	r0, r6
   1dc74:	movt	r1, #4
   1dc78:	add	r2, sp, #92	; 0x5c
   1dc7c:	bl	2a9f4 <__assert_fail@plt+0x1639c>
   1dc80:	subs	r5, r0, #0
   1dc84:	beq	1d5ac <__assert_fail@plt+0x8f54>
   1dc88:	mov	r2, #5
   1dc8c:	mov	r0, r7
   1dc90:	movw	r1, #19356	; 0x4b9c
   1dc94:	movt	r1, #4
   1dc98:	bl	13cc8 <dcgettext@plt>
   1dc9c:	mov	r6, r0
   1dca0:	mov	r0, r5
   1dca4:	bl	13a64 <gpg_strerror@plt>
   1dca8:	mov	r1, r0
   1dcac:	mov	r0, r6
   1dcb0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1dcb4:	ldr	r0, [sp, #88]	; 0x58
   1dcb8:	bl	13c44 <gcry_free@plt>
   1dcbc:	b	1d5e0 <__assert_fail@plt+0x8f88>
   1dcc0:	ldr	ip, [sp, #60]	; 0x3c
   1dcc4:	str	ip, [sp, #56]	; 0x38
   1dcc8:	mov	sl, ip
   1dccc:	b	1d900 <__assert_fail@plt+0x92a8>
   1dcd0:	bl	13cd4 <gcry_strerror@plt>
   1dcd4:	mov	r1, r0
   1dcd8:	movw	r0, #19580	; 0x4c7c
   1dcdc:	movt	r0, #4
   1dce0:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   1dce4:	ldr	r0, [sp, #96]	; 0x60
   1dce8:	bl	13c44 <gcry_free@plt>
   1dcec:	ldr	r0, [sp, #140]	; 0x8c
   1dcf0:	bl	13be4 <gcry_sexp_release@plt>
   1dcf4:	ldr	r0, [sp, #92]	; 0x5c
   1dcf8:	bl	13c44 <gcry_free@plt>
   1dcfc:	ldr	r0, [sp, #88]	; 0x58
   1dd00:	bl	13c44 <gcry_free@plt>
   1dd04:	b	1d5e0 <__assert_fail@plt+0x8f88>
   1dd08:	mov	r2, #5
   1dd0c:	movw	r1, #19400	; 0x4bc8
   1dd10:	movt	r1, #4
   1dd14:	bl	13cc8 <dcgettext@plt>
   1dd18:	ldr	r1, [sp, #92]	; 0x5c
   1dd1c:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1dd20:	mov	r0, r6
   1dd24:	add	r2, sp, #88	; 0x58
   1dd28:	movw	r1, #19344	; 0x4b90
   1dd2c:	movt	r1, #4
   1dd30:	bl	2a9f4 <__assert_fail@plt+0x1639c>
   1dd34:	mov	r7, r0
   1dd38:	b	1d598 <__assert_fail@plt+0x8f40>
   1dd3c:	bl	13a64 <gpg_strerror@plt>
   1dd40:	mov	r1, r0
   1dd44:	movw	r0, #19528	; 0x4c48
   1dd48:	movt	r0, #4
   1dd4c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1dd50:	ldr	r0, [sp, #96]	; 0x60
   1dd54:	bl	13c44 <gcry_free@plt>
   1dd58:	b	1d5d0 <__assert_fail@plt+0x8f78>
   1dd5c:	ldr	r1, [sp, #92]	; 0x5c
   1dd60:	movt	r0, #4
   1dd64:	bl	2ed14 <__assert_fail@plt+0x1a6bc>
   1dd68:	mov	r5, r0
   1dd6c:	b	1db5c <__assert_fail@plt+0x9504>
   1dd70:	ldr	r0, [sp, #92]	; 0x5c
   1dd74:	ldr	r1, [sp, #88]	; 0x58
   1dd78:	bl	26740 <__assert_fail@plt+0x120e8>
   1dd7c:	subs	r9, r0, #0
   1dd80:	beq	1dea0 <__assert_fail@plt+0x9848>
   1dd84:	add	r8, sp, #184	; 0xb8
   1dd88:	mov	r1, r9
   1dd8c:	ldr	r0, [sp, #96]	; 0x60
   1dd90:	mov	r2, r8
   1dd94:	bl	26934 <__assert_fail@plt+0x122dc>
   1dd98:	mov	r5, r0
   1dd9c:	mov	r0, r9
   1dda0:	bl	13c44 <gcry_free@plt>
   1dda4:	cmp	r5, #0
   1dda8:	beq	1de08 <__assert_fail@plt+0x97b0>
   1ddac:	mov	r2, #5
   1ddb0:	mov	r0, r7
   1ddb4:	movw	r1, #19632	; 0x4cb0
   1ddb8:	movt	r1, #4
   1ddbc:	bl	13cc8 <dcgettext@plt>
   1ddc0:	mov	r6, r0
   1ddc4:	mov	r0, r5
   1ddc8:	bl	13a64 <gpg_strerror@plt>
   1ddcc:	mov	r1, r0
   1ddd0:	mov	r0, r6
   1ddd4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1ddd8:	ldr	r0, [sp, #96]	; 0x60
   1dddc:	bl	13c44 <gcry_free@plt>
   1dde0:	ldr	r0, [sp, #140]	; 0x8c
   1dde4:	bl	13be4 <gcry_sexp_release@plt>
   1dde8:	ldr	r0, [sp, #92]	; 0x5c
   1ddec:	bl	13c44 <gcry_free@plt>
   1ddf0:	ldr	r0, [sp, #88]	; 0x58
   1ddf4:	bl	13c44 <gcry_free@plt>
   1ddf8:	cmp	r5, #0
   1ddfc:	bne	1d5e0 <__assert_fail@plt+0x8f88>
   1de00:	ldr	r1, [sp, #76]	; 0x4c
   1de04:	b	1db84 <__assert_fail@plt+0x952c>
   1de08:	ldr	r0, [sp, #96]	; 0x60
   1de0c:	bl	13c44 <gcry_free@plt>
   1de10:	ldr	ip, [sp, #184]	; 0xb8
   1de14:	mov	r2, r5
   1de18:	mov	r1, r5
   1de1c:	mov	r3, r5
   1de20:	mov	r0, ip
   1de24:	str	ip, [sp, #96]	; 0x60
   1de28:	bl	14604 <gcry_sexp_canon_len@plt>
   1de2c:	subs	r2, r0, #0
   1de30:	beq	1deec <__assert_fail@plt+0x9894>
   1de34:	add	r0, sp, #288	; 0x120
   1de38:	ldr	r1, [sp, #96]	; 0x60
   1de3c:	mov	r3, r5
   1de40:	bl	223fc <__assert_fail@plt+0xdda4>
   1de44:	subs	r7, r0, #0
   1de48:	beq	1db24 <__assert_fail@plt+0x94cc>
   1de4c:	mov	r2, #5
   1de50:	mov	r0, r5
   1de54:	movw	r1, #19676	; 0x4cdc
   1de58:	movt	r1, #4
   1de5c:	bl	13cc8 <dcgettext@plt>
   1de60:	mov	r5, r0
   1de64:	mov	r0, r7
   1de68:	bl	13a64 <gpg_strerror@plt>
   1de6c:	mov	r1, r0
   1de70:	mov	r0, r5
   1de74:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1de78:	ldr	r0, [sp, #96]	; 0x60
   1de7c:	bl	13c44 <gcry_free@plt>
   1de80:	ldr	r0, [sp, #140]	; 0x8c
   1de84:	bl	13be4 <gcry_sexp_release@plt>
   1de88:	ldr	r0, [sp, #92]	; 0x5c
   1de8c:	bl	13c44 <gcry_free@plt>
   1de90:	ldr	r0, [sp, #88]	; 0x58
   1de94:	bl	13c44 <gcry_free@plt>
   1de98:	mov	r5, r7
   1de9c:	b	1ddf8 <__assert_fail@plt+0x97a0>
   1dea0:	bl	14580 <gpg_err_code_from_syserror@plt>
   1dea4:	cmp	r0, #0
   1dea8:	uxthne	r0, r0
   1deac:	orrne	r5, r0, #67108864	; 0x4000000
   1deb0:	moveq	r5, r0
   1deb4:	b	1ddd8 <__assert_fail@plt+0x9780>
   1deb8:	bl	14580 <gpg_err_code_from_syserror@plt>
   1debc:	cmp	r0, #0
   1dec0:	uxthne	r5, r0
   1dec4:	orrne	r5, r5, #67108864	; 0x4000000
   1dec8:	b	1ddd8 <__assert_fail@plt+0x9780>
   1decc:	bl	13cec <__stack_chk_fail@plt>
   1ded0:	movw	r0, #19728	; 0x4d10
   1ded4:	movw	r1, #19084	; 0x4a8c
   1ded8:	movt	r0, #4
   1dedc:	movt	r1, #4
   1dee0:	movw	r2, #2341	; 0x925
   1dee4:	ldr	r3, [pc, #36]	; 1df10 <__assert_fail@plt+0x98b8>
   1dee8:	bl	14658 <__assert_fail@plt>
   1deec:	movw	r0, #19664	; 0x4cd0
   1def0:	movw	r1, #19084	; 0x4a8c
   1def4:	movt	r0, #4
   1def8:	movt	r1, #4
   1defc:	movw	r2, #2199	; 0x897
   1df00:	ldr	r3, [pc, #12]	; 1df14 <__assert_fail@plt+0x98bc>
   1df04:	bl	14658 <__assert_fail@plt>
   1df08:	mov	sl, #0
   1df0c:	b	1d824 <__assert_fail@plt+0x91cc>
   1df10:	strdeq	r4, [r4], -r4	; <UNPREDICTABLE>
   1df14:	andeq	r4, r4, r0, ror #17
   1df18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1df1c:	movw	r5, #47296	; 0xb8c0
   1df20:	movt	r5, #5
   1df24:	sub	sp, sp, #156	; 0x9c
   1df28:	add	r9, sp, #104	; 0x68
   1df2c:	mov	r6, #0
   1df30:	ldr	ip, [r5]
   1df34:	mov	sl, r2
   1df38:	str	r1, [sp, #84]	; 0x54
   1df3c:	mov	r2, r9
   1df40:	str	r3, [sp, #76]	; 0x4c
   1df44:	mov	r1, r6
   1df48:	str	ip, [sp, #148]	; 0x94
   1df4c:	mov	r3, r6
   1df50:	ldr	ip, [sp, #192]	; 0xc0
   1df54:	str	r9, [sp, #48]	; 0x30
   1df58:	str	r6, [sp, #88]	; 0x58
   1df5c:	str	r0, [sp, #52]	; 0x34
   1df60:	str	ip, [sp, #80]	; 0x50
   1df64:	bl	1c6b4 <__assert_fail@plt+0x805c>
   1df68:	subs	r4, r0, #0
   1df6c:	bne	1e0bc <__assert_fail@plt+0x9a64>
   1df70:	ldr	r7, [sp, #104]	; 0x68
   1df74:	mov	r1, r4
   1df78:	add	r2, sp, #104	; 0x68
   1df7c:	mov	r0, r7
   1df80:	bl	1bfbc <__assert_fail@plt+0x7964>
   1df84:	subs	r4, r0, #0
   1df88:	strne	r6, [sp, #60]	; 0x3c
   1df8c:	movne	r8, r6
   1df90:	bne	1e080 <__assert_fail@plt+0x9a28>
   1df94:	ldr	r3, [sp, #144]	; 0x90
   1df98:	ands	r3, r3, #2
   1df9c:	bne	1e0cc <__assert_fail@plt+0x9a74>
   1dfa0:	str	r3, [sp, #60]	; 0x3c
   1dfa4:	ldr	r9, [sp, #116]	; 0x74
   1dfa8:	cmp	sl, #0
   1dfac:	ldr	ip, [sp, #112]	; 0x70
   1dfb0:	moveq	ip, r9
   1dfb4:	str	r9, [sp, #72]	; 0x48
   1dfb8:	mov	r0, ip
   1dfbc:	str	ip, [sp, #68]	; 0x44
   1dfc0:	bl	14094 <strlen@plt>
   1dfc4:	mov	r1, #4
   1dfc8:	str	r0, [sp, #56]	; 0x38
   1dfcc:	add	r0, r0, #1
   1dfd0:	bl	14190 <gcry_calloc@plt>
   1dfd4:	subs	r6, r0, #0
   1dfd8:	beq	1e2d4 <__assert_fail@plt+0x9c7c>
   1dfdc:	ldr	ip, [sp, #56]	; 0x38
   1dfe0:	cmp	ip, #0
   1dfe4:	beq	1e1c8 <__assert_fail@plt+0x9b70>
   1dfe8:	ldr	r4, [sp, #52]	; 0x34
   1dfec:	mov	fp, #0
   1dff0:	sub	r9, r6, #4
   1dff4:	mov	r8, fp
   1dff8:	str	r9, [sp, #64]	; 0x40
   1dffc:	mov	r9, fp
   1e000:	cmp	sl, #0
   1e004:	beq	1e020 <__assert_fail@plt+0x99c8>
   1e008:	ldr	ip, [sp, #68]	; 0x44
   1e00c:	ldr	r0, [sp, #72]	; 0x48
   1e010:	ldrb	r1, [ip, r9]
   1e014:	bl	140ac <strchr@plt>
   1e018:	rsbs	fp, r0, #1
   1e01c:	movcc	fp, #0
   1e020:	mov	r1, fp
   1e024:	mov	r0, r4
   1e028:	add	r2, sp, #92	; 0x5c
   1e02c:	add	r3, sp, #96	; 0x60
   1e030:	str	r8, [sp, #92]	; 0x5c
   1e034:	bl	1c6b4 <__assert_fail@plt+0x805c>
   1e038:	subs	r1, r0, #0
   1e03c:	bne	1e17c <__assert_fail@plt+0x9b24>
   1e040:	ldr	r3, [sp, #96]	; 0x60
   1e044:	cmp	r3, #520	; 0x208
   1e048:	bls	1e184 <__assert_fail@plt+0x9b2c>
   1e04c:	movw	r1, #19796	; 0x4d54
   1e050:	mov	r2, #5
   1e054:	movt	r1, #4
   1e058:	mov	r4, #67	; 0x43
   1e05c:	bl	13cc8 <dcgettext@plt>
   1e060:	mov	r1, #4096	; 0x1000
   1e064:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1e068:	ldr	r0, [sp, #92]	; 0x5c
   1e06c:	bl	13c44 <gcry_free@plt>
   1e070:	mov	r0, r6
   1e074:	mov	r6, #0
   1e078:	bl	1c3d8 <__assert_fail@plt+0x7d80>
   1e07c:	mov	r8, r6
   1e080:	mov	r0, r6
   1e084:	bl	1c3d8 <__assert_fail@plt+0x7d80>
   1e088:	ldr	r0, [sp, #60]	; 0x3c
   1e08c:	bl	13c44 <gcry_free@plt>
   1e090:	mov	r0, r7
   1e094:	bl	13c44 <gcry_free@plt>
   1e098:	mov	r0, r8
   1e09c:	bl	13c44 <gcry_free@plt>
   1e0a0:	ldr	r2, [sp, #148]	; 0x94
   1e0a4:	ldr	r3, [r5]
   1e0a8:	mov	r0, r4
   1e0ac:	cmp	r2, r3
   1e0b0:	bne	1e2ec <__assert_fail@plt+0x9c94>
   1e0b4:	add	sp, sp, #156	; 0x9c
   1e0b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e0bc:	mov	r7, r6
   1e0c0:	str	r7, [sp, #60]	; 0x3c
   1e0c4:	mov	r8, r7
   1e0c8:	b	1e080 <__assert_fail@plt+0x9a28>
   1e0cc:	mov	r1, r4
   1e0d0:	mov	r3, r4
   1e0d4:	ldr	r0, [sp, #52]	; 0x34
   1e0d8:	add	r2, sp, #100	; 0x64
   1e0dc:	bl	1c6b4 <__assert_fail@plt+0x805c>
   1e0e0:	subs	r4, r0, #0
   1e0e4:	bne	1e16c <__assert_fail@plt+0x9b14>
   1e0e8:	ldr	r9, [sp, #100]	; 0x64
   1e0ec:	movw	r1, #19236	; 0x4b24
   1e0f0:	movt	r1, #4
   1e0f4:	mov	r0, r9
   1e0f8:	str	r9, [sp, #60]	; 0x3c
   1e0fc:	bl	13a28 <strcmp@plt>
   1e100:	cmp	r0, r6
   1e104:	beq	1e294 <__assert_fail@plt+0x9c3c>
   1e108:	movw	r1, #19224	; 0x4b18
   1e10c:	ldr	r0, [sp, #60]	; 0x3c
   1e110:	movt	r1, #4
   1e114:	bl	13a28 <strcmp@plt>
   1e118:	cmp	r0, r6
   1e11c:	beq	1e2c8 <__assert_fail@plt+0x9c70>
   1e120:	movw	r1, #19212	; 0x4b0c
   1e124:	ldr	r0, [sp, #60]	; 0x3c
   1e128:	movt	r1, #4
   1e12c:	bl	13a28 <strcmp@plt>
   1e130:	cmp	r0, r6
   1e134:	bne	1dfa4 <__assert_fail@plt+0x994c>
   1e138:	movw	r6, #19316	; 0x4b74
   1e13c:	movt	r6, #4
   1e140:	ldr	r0, [sp, #60]	; 0x3c
   1e144:	bl	13c44 <gcry_free@plt>
   1e148:	mov	r0, r6
   1e14c:	bl	13f2c <gcry_strdup@plt>
   1e150:	cmp	r0, #0
   1e154:	str	r0, [sp, #60]	; 0x3c
   1e158:	bne	1dfa4 <__assert_fail@plt+0x994c>
   1e15c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1e160:	cmp	r0, #0
   1e164:	uxthne	r4, r0
   1e168:	orrne	r4, r4, #67108864	; 0x4000000
   1e16c:	mov	r6, #0
   1e170:	str	r6, [sp, #60]	; 0x3c
   1e174:	mov	r8, r6
   1e178:	b	1e080 <__assert_fail@plt+0x9a28>
   1e17c:	mov	r4, r1
   1e180:	b	1e068 <__assert_fail@plt+0x9a10>
   1e184:	str	r1, [sp]
   1e188:	add	r0, sp, #100	; 0x64
   1e18c:	mov	r1, #1
   1e190:	ldr	r2, [sp, #92]	; 0x5c
   1e194:	bl	14304 <gcry_mpi_scan@plt>
   1e198:	subs	r1, r0, #0
   1e19c:	bne	1e17c <__assert_fail@plt+0x9b24>
   1e1a0:	ldr	ip, [sp, #64]	; 0x40
   1e1a4:	add	r9, r9, #1
   1e1a8:	ldr	r3, [sp, #100]	; 0x64
   1e1ac:	ldr	r0, [sp, #92]	; 0x5c
   1e1b0:	str	r3, [ip, #4]!
   1e1b4:	str	ip, [sp, #64]	; 0x40
   1e1b8:	bl	13c44 <gcry_free@plt>
   1e1bc:	ldr	ip, [sp, #56]	; 0x38
   1e1c0:	cmp	r9, ip
   1e1c4:	bne	1e000 <__assert_fail@plt+0x99a8>
   1e1c8:	ldr	r9, [sp, #76]	; 0x4c
   1e1cc:	cmp	r9, #0
   1e1d0:	moveq	r8, r9
   1e1d4:	bne	1e2a0 <__assert_fail@plt+0x9c48>
   1e1d8:	ldr	r2, [sp, #116]	; 0x74
   1e1dc:	cmp	sl, #0
   1e1e0:	ldr	r3, [sp, #128]	; 0x80
   1e1e4:	ldr	r0, [sp, #112]	; 0x70
   1e1e8:	moveq	r0, r2
   1e1ec:	cmp	r3, #0
   1e1f0:	beq	1e204 <__assert_fail@plt+0x9bac>
   1e1f4:	mov	r1, r6
   1e1f8:	blx	r3
   1e1fc:	subs	r4, r0, #0
   1e200:	bne	1e080 <__assert_fail@plt+0x9a28>
   1e204:	add	lr, sp, #116	; 0x74
   1e208:	ldr	r9, [sp, #60]	; 0x3c
   1e20c:	cmp	r8, #0
   1e210:	mov	ip, sp
   1e214:	ldm	lr!, {r0, r1, r2, r3}
   1e218:	movw	r4, #18888	; 0x49c8
   1e21c:	str	sl, [sp, #32]
   1e220:	movt	r4, #4
   1e224:	str	r9, [sp, #36]	; 0x24
   1e228:	movne	r4, r8
   1e22c:	str	r6, [sp, #40]	; 0x28
   1e230:	str	r4, [sp, #44]	; 0x2c
   1e234:	stmia	ip!, {r0, r1, r2, r3}
   1e238:	ldm	lr, {r0, r1, r2, r3}
   1e23c:	stm	ip, {r0, r1, r2, r3}
   1e240:	add	r0, sp, #88	; 0x58
   1e244:	ldr	ip, [sp, #48]	; 0x30
   1e248:	ldm	ip, {r1, r2, r3}
   1e24c:	bl	1c0d4 <__assert_fail@plt+0x7a7c>
   1e250:	subs	r4, r0, #0
   1e254:	bne	1e080 <__assert_fail@plt+0x9a28>
   1e258:	ldr	r9, [sp, #80]	; 0x50
   1e25c:	cmp	r9, #0
   1e260:	beq	1e284 <__assert_fail@plt+0x9c2c>
   1e264:	add	lr, sp, #104	; 0x68
   1e268:	mov	ip, r9
   1e26c:	ldm	lr!, {r0, r1, r2, r3}
   1e270:	stmia	ip!, {r0, r1, r2, r3}
   1e274:	ldm	lr!, {r0, r1, r2, r3}
   1e278:	stmia	ip!, {r0, r1, r2, r3}
   1e27c:	ldm	lr, {r0, r1, r2}
   1e280:	stm	ip, {r0, r1, r2}
   1e284:	ldr	r3, [sp, #88]	; 0x58
   1e288:	ldr	ip, [sp, #84]	; 0x54
   1e28c:	str	r3, [ip]
   1e290:	b	1e080 <__assert_fail@plt+0x9a28>
   1e294:	movw	r6, #19292	; 0x4b5c
   1e298:	movt	r6, #4
   1e29c:	b	1e140 <__assert_fail@plt+0x9ae8>
   1e2a0:	mov	r1, #0
   1e2a4:	ldr	r0, [sp, #52]	; 0x34
   1e2a8:	mov	r3, r1
   1e2ac:	add	r2, sp, #100	; 0x64
   1e2b0:	bl	1c6b4 <__assert_fail@plt+0x805c>
   1e2b4:	subs	r4, r0, #0
   1e2b8:	movne	r8, #0
   1e2bc:	bne	1e080 <__assert_fail@plt+0x9a28>
   1e2c0:	ldr	r8, [sp, #100]	; 0x64
   1e2c4:	b	1e1d8 <__assert_fail@plt+0x9b80>
   1e2c8:	movw	r6, #19304	; 0x4b68
   1e2cc:	movt	r6, #4
   1e2d0:	b	1e140 <__assert_fail@plt+0x9ae8>
   1e2d4:	bl	14580 <gpg_err_code_from_syserror@plt>
   1e2d8:	cmp	r0, #0
   1e2dc:	uxthne	r0, r0
   1e2e0:	orrne	r4, r0, #67108864	; 0x4000000
   1e2e4:	bne	1e070 <__assert_fail@plt+0x9a18>
   1e2e8:	b	1e1c8 <__assert_fail@plt+0x9b70>
   1e2ec:	bl	13cec <__stack_chk_fail@plt>
   1e2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2f4:	movw	r5, #47296	; 0xb8c0
   1e2f8:	movt	r5, #5
   1e2fc:	sub	sp, sp, #172	; 0xac
   1e300:	mov	r8, r1
   1e304:	add	r1, sp, #168	; 0xa8
   1e308:	ldr	lr, [r5]
   1e30c:	mov	r7, r2
   1e310:	mov	r2, #1
   1e314:	mov	ip, #0
   1e318:	mov	r9, r0
   1e31c:	str	ip, [r1, #-100]!	; 0xffffff9c
   1e320:	mov	r0, r8
   1e324:	mov	r3, r2
   1e328:	str	ip, [sp]
   1e32c:	str	lr, [sp, #164]	; 0xa4
   1e330:	bl	1df18 <__assert_fail@plt+0x98c0>
   1e334:	cmp	r0, #0
   1e338:	bne	1e43c <__assert_fail@plt+0x9de4>
   1e33c:	mov	r6, r0
   1e340:	mov	r4, r0
   1e344:	mov	sl, r0
   1e348:	movw	fp, #16383	; 0x3fff
   1e34c:	mov	r0, r8
   1e350:	bl	356c8 <__assert_fail@plt+0x21070>
   1e354:	cmn	r0, #1
   1e358:	beq	1e380 <__assert_fail@plt+0x9d28>
   1e35c:	uxtb	r0, r0
   1e360:	cmp	r0, #1
   1e364:	beq	1e420 <__assert_fail@plt+0x9dc8>
   1e368:	cmp	r0, #2
   1e36c:	mov	r0, r8
   1e370:	moveq	r4, #1
   1e374:	bl	356c8 <__assert_fail@plt+0x21070>
   1e378:	cmn	r0, #1
   1e37c:	bne	1e35c <__assert_fail@plt+0x9d04>
   1e380:	mov	r0, r8
   1e384:	bl	3515c <__assert_fail@plt+0x20b04>
   1e388:	cmp	r0, #0
   1e38c:	bne	1e468 <__assert_fail@plt+0x9e10>
   1e390:	mov	fp, #0
   1e394:	mov	r2, #5
   1e398:	mov	r0, fp
   1e39c:	movw	r1, #16944	; 0x4230
   1e3a0:	movt	r1, #4
   1e3a4:	ldr	sl, [sp, #68]	; 0x44
   1e3a8:	str	fp, [sp, #72]	; 0x48
   1e3ac:	str	fp, [sp, #80]	; 0x50
   1e3b0:	bl	13cc8 <dcgettext@plt>
   1e3b4:	add	r1, sp, #100	; 0x64
   1e3b8:	str	fp, [sp, #84]	; 0x54
   1e3bc:	str	r0, [sp, #52]	; 0x34
   1e3c0:	mov	r0, sl
   1e3c4:	bl	1c894 <__assert_fail@plt+0x823c>
   1e3c8:	subs	r8, r0, #0
   1e3cc:	beq	1e484 <__assert_fail@plt+0x9e2c>
   1e3d0:	str	fp, [sp, #48]	; 0x30
   1e3d4:	mov	fp, #0
   1e3d8:	mov	r0, fp
   1e3dc:	bl	13c44 <gcry_free@plt>
   1e3e0:	ldr	r0, [sp, #72]	; 0x48
   1e3e4:	bl	13c44 <gcry_free@plt>
   1e3e8:	ldr	r0, [sp, #48]	; 0x30
   1e3ec:	bl	13c44 <gcry_free@plt>
   1e3f0:	ldr	r0, [sp, #84]	; 0x54
   1e3f4:	bl	13c44 <gcry_free@plt>
   1e3f8:	ldr	r0, [sp, #80]	; 0x50
   1e3fc:	bl	13c44 <gcry_free@plt>
   1e400:	ldr	r0, [sp, #68]	; 0x44
   1e404:	bl	13be4 <gcry_sexp_release@plt>
   1e408:	cmp	r8, #0
   1e40c:	bne	1e444 <__assert_fail@plt+0x9dec>
   1e410:	mov	r0, r7
   1e414:	mov	r1, #6
   1e418:	bl	1c808 <__assert_fail@plt+0x81b0>
   1e41c:	b	1e450 <__assert_fail@plt+0x9df8>
   1e420:	mov	r0, r8
   1e424:	add	r1, sp, #96	; 0x60
   1e428:	str	sl, [sp, #96]	; 0x60
   1e42c:	bl	1c5a0 <__assert_fail@plt+0x7f48>
   1e430:	cmp	r0, #0
   1e434:	ldreq	r6, [sp, #96]	; 0x60
   1e438:	b	1e34c <__assert_fail@plt+0x9cf4>
   1e43c:	ldr	r0, [sp, #68]	; 0x44
   1e440:	bl	13be4 <gcry_sexp_release@plt>
   1e444:	mov	r0, r7
   1e448:	mov	r1, #5
   1e44c:	bl	1c808 <__assert_fail@plt+0x81b0>
   1e450:	ldr	r2, [sp, #164]	; 0xa4
   1e454:	ldr	r3, [r5]
   1e458:	cmp	r2, r3
   1e45c:	bne	1e888 <__assert_fail@plt+0xa230>
   1e460:	add	sp, sp, #172	; 0xac
   1e464:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e468:	bl	14580 <gpg_err_code_from_syserror@plt>
   1e46c:	cmp	r0, #0
   1e470:	beq	1e34c <__assert_fail@plt+0x9cf4>
   1e474:	uxth	r0, r0
   1e478:	cmp	r0, fp
   1e47c:	bne	1e34c <__assert_fail@plt+0x9cf4>
   1e480:	b	1e390 <__assert_fail@plt+0x9d38>
   1e484:	add	r0, sp, #100	; 0x64
   1e488:	bl	23540 <__assert_fail@plt+0xeee8>
   1e48c:	cmp	r0, fp
   1e490:	streq	r8, [sp, #48]	; 0x30
   1e494:	beq	1e3d4 <__assert_fail@plt+0x9d7c>
   1e498:	mov	r0, sl
   1e49c:	add	r1, sp, #84	; 0x54
   1e4a0:	mov	r2, #4
   1e4a4:	bl	39ff4 <__assert_fail@plt+0x2599c>
   1e4a8:	subs	r8, r0, #0
   1e4ac:	bne	1e3d0 <__assert_fail@plt+0x9d78>
   1e4b0:	movw	r1, #19328	; 0x4b80
   1e4b4:	mov	r0, sl
   1e4b8:	movt	r1, #4
   1e4bc:	mov	r2, r8
   1e4c0:	bl	13e84 <gcry_sexp_find_token@plt>
   1e4c4:	subs	fp, r0, #0
   1e4c8:	beq	1e620 <__assert_fail@plt+0x9fc8>
   1e4cc:	mov	r1, #1
   1e4d0:	add	r2, sp, #96	; 0x60
   1e4d4:	bl	13bd8 <gcry_sexp_nth_data@plt>
   1e4d8:	cmp	r0, #0
   1e4dc:	beq	1e620 <__assert_fail@plt+0x9fc8>
   1e4e0:	ldr	r1, [sp, #96]	; 0x60
   1e4e4:	bl	1c09c <__assert_fail@plt+0x7a44>
   1e4e8:	cmp	r0, #0
   1e4ec:	str	r0, [sp, #48]	; 0x30
   1e4f0:	beq	1e88c <__assert_fail@plt+0xa234>
   1e4f4:	mov	r0, fp
   1e4f8:	bl	13be4 <gcry_sexp_release@plt>
   1e4fc:	mov	r2, #5
   1e500:	mov	r0, r8
   1e504:	movw	r1, #19944	; 0x4de8
   1e508:	movt	r1, #4
   1e50c:	bl	13cc8 <dcgettext@plt>
   1e510:	ldr	r2, [sp, #84]	; 0x54
   1e514:	ldr	r3, [sp, #48]	; 0x30
   1e518:	mov	r1, r0
   1e51c:	add	r0, sp, #80	; 0x50
   1e520:	bl	3932c <__assert_fail@plt+0x24cd4>
   1e524:	cmp	r0, #0
   1e528:	blt	1e63c <__assert_fail@plt+0x9fe4>
   1e52c:	mov	r0, #2
   1e530:	mov	r1, #141	; 0x8d
   1e534:	bl	13a58 <gcry_calloc_secure@plt>
   1e538:	subs	fp, r0, #0
   1e53c:	beq	1e63c <__assert_fail@plt+0x9fe4>
   1e540:	add	r0, fp, #5632	; 0x1600
   1e544:	add	ip, fp, #36	; 0x24
   1e548:	add	r0, r0, #8
   1e54c:	mov	r2, #100	; 0x64
   1e550:	mov	r1, #1
   1e554:	str	r2, [fp, #32]
   1e558:	str	r1, [fp, #8]
   1e55c:	mov	r8, r5
   1e560:	str	r2, [r0, #32]
   1e564:	mov	r3, #0
   1e568:	movw	r2, #49260	; 0xc06c
   1e56c:	str	r0, [sp, #56]	; 0x38
   1e570:	movt	r2, #1
   1e574:	str	r1, [r0, #8]
   1e578:	str	r2, [r0, #20]
   1e57c:	mov	r5, ip
   1e580:	str	ip, [r0, #24]
   1e584:	str	r4, [sp, #60]	; 0x3c
   1e588:	b	1e5d4 <__assert_fail@plt+0x9f7c>
   1e58c:	ldrb	r3, [fp, #36]	; 0x24
   1e590:	cmp	r3, #0
   1e594:	beq	1e650 <__assert_fail@plt+0x9ff8>
   1e598:	ldr	r1, [sp, #56]	; 0x38
   1e59c:	mov	r0, r9
   1e5a0:	mov	r2, r4
   1e5a4:	mov	r3, r4
   1e5a8:	str	r1, [sp]
   1e5ac:	ldr	r1, [sp, #52]	; 0x34
   1e5b0:	bl	208a0 <__assert_fail@plt+0xc248>
   1e5b4:	cmn	r0, #1
   1e5b8:	bne	1e650 <__assert_fail@plt+0x9ff8>
   1e5bc:	mov	r0, r4
   1e5c0:	movw	r1, #17032	; 0x4288
   1e5c4:	mov	r2, #5
   1e5c8:	movt	r1, #4
   1e5cc:	bl	13cc8 <dcgettext@plt>
   1e5d0:	mov	r3, r0
   1e5d4:	ldr	r1, [sp, #80]	; 0x50
   1e5d8:	mov	r0, r9
   1e5dc:	str	fp, [sp]
   1e5e0:	mov	r2, #0
   1e5e4:	bl	208a0 <__assert_fail@plt+0xc248>
   1e5e8:	subs	r4, r0, #0
   1e5ec:	beq	1e58c <__assert_fail@plt+0x9f34>
   1e5f0:	mov	ip, r5
   1e5f4:	mov	r5, r8
   1e5f8:	mov	r8, r4
   1e5fc:	ldr	r2, [fp, #32]
   1e600:	cmp	r2, #0
   1e604:	addne	r2, ip, r2
   1e608:	movne	r3, #0
   1e60c:	beq	1e3d8 <__assert_fail@plt+0x9d80>
   1e610:	strb	r3, [ip], #1
   1e614:	cmp	ip, r2
   1e618:	bne	1e610 <__assert_fail@plt+0x9fb8>
   1e61c:	b	1e3d8 <__assert_fail@plt+0x9d80>
   1e620:	mov	r8, #83	; 0x53
   1e624:	movt	r8, #1024	; 0x400
   1e628:	mov	r0, fp
   1e62c:	mov	sl, #0
   1e630:	str	sl, [sp, #48]	; 0x30
   1e634:	bl	13be4 <gcry_sexp_release@plt>
   1e638:	b	1e3d4 <__assert_fail@plt+0x9d7c>
   1e63c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1e640:	cmp	r0, #0
   1e644:	uxthne	r8, r0
   1e648:	orrne	r8, r8, #67108864	; 0x4000000
   1e64c:	b	1e3d4 <__assert_fail@plt+0x9d7c>
   1e650:	mov	r2, #0
   1e654:	mov	r1, #1
   1e658:	mov	r3, r2
   1e65c:	mov	r0, sl
   1e660:	mov	ip, r5
   1e664:	ldr	r4, [sp, #60]	; 0x3c
   1e668:	str	ip, [sp, #44]	; 0x2c
   1e66c:	bl	14298 <gcry_sexp_sprint@plt>
   1e670:	mov	r5, r8
   1e674:	mov	r8, r0
   1e678:	bl	13f44 <gcry_malloc_secure@plt>
   1e67c:	ldr	ip, [sp, #44]	; 0x2c
   1e680:	subs	r9, r0, #0
   1e684:	beq	1e8cc <__assert_fail@plt+0xa274>
   1e688:	mov	r3, r8
   1e68c:	mov	r1, #1
   1e690:	mov	r2, r9
   1e694:	mov	r0, sl
   1e698:	str	ip, [sp, #44]	; 0x2c
   1e69c:	bl	14298 <gcry_sexp_sprint@plt>
   1e6a0:	ldr	ip, [sp, #44]	; 0x2c
   1e6a4:	add	r2, sp, #72	; 0x48
   1e6a8:	add	r3, sp, #76	; 0x4c
   1e6ac:	mov	r0, r9
   1e6b0:	mov	r1, ip
   1e6b4:	bl	250a0 <__assert_fail@plt+0x10a48>
   1e6b8:	mov	r8, r0
   1e6bc:	mov	r0, r9
   1e6c0:	bl	13c44 <gcry_free@plt>
   1e6c4:	cmp	r8, #0
   1e6c8:	ldr	ip, [sp, #44]	; 0x2c
   1e6cc:	bne	1e5fc <__assert_fail@plt+0x9fa4>
   1e6d0:	add	r0, sp, #100	; 0x64
   1e6d4:	ldr	r1, [sp, #72]	; 0x48
   1e6d8:	ldr	r2, [sp, #76]	; 0x4c
   1e6dc:	mov	r3, #0
   1e6e0:	str	ip, [sp, #44]	; 0x2c
   1e6e4:	bl	223fc <__assert_fail@plt+0xdda4>
   1e6e8:	ldr	ip, [sp, #44]	; 0x2c
   1e6ec:	subs	r8, r0, #0
   1e6f0:	bne	1e5fc <__assert_fail@plt+0x9fa4>
   1e6f4:	add	r9, sp, #120	; 0x78
   1e6f8:	add	r8, sp, #99	; 0x63
   1e6fc:	add	sl, sp, #119	; 0x77
   1e700:	str	r5, [sp, #52]	; 0x34
   1e704:	str	sl, [sp, #56]	; 0x38
   1e708:	mov	r5, ip
   1e70c:	mov	sl, r9
   1e710:	ldrb	lr, [r8, #1]!
   1e714:	mov	r0, sl
   1e718:	movw	r3, #19860	; 0x4d94
   1e71c:	mov	r1, #1
   1e720:	movt	r3, #4
   1e724:	mvn	r2, #0
   1e728:	str	lr, [sp]
   1e72c:	add	sl, sl, #2
   1e730:	bl	14178 <__sprintf_chk@plt>
   1e734:	ldr	lr, [sp, #56]	; 0x38
   1e738:	cmp	r8, lr
   1e73c:	bne	1e710 <__assert_fail@plt+0xa0b8>
   1e740:	mov	ip, r5
   1e744:	mov	r0, r9
   1e748:	mov	r2, ip
   1e74c:	mov	r1, #4
   1e750:	mov	r3, r6
   1e754:	str	ip, [sp, #44]	; 0x2c
   1e758:	ldr	r5, [sp, #52]	; 0x34
   1e75c:	bl	21bb4 <__assert_fail@plt+0xd55c>
   1e760:	ldr	ip, [sp, #44]	; 0x2c
   1e764:	subs	r8, r0, #0
   1e768:	bne	1e5fc <__assert_fail@plt+0x9fa4>
   1e76c:	ldr	sl, [sp, #84]	; 0x54
   1e770:	add	r0, sp, #88	; 0x58
   1e774:	mov	r1, #1
   1e778:	str	sl, [sp, #52]	; 0x34
   1e77c:	bl	1ba88 <__assert_fail@plt+0x7430>
   1e780:	ldr	ip, [sp, #44]	; 0x2c
   1e784:	subs	r8, r0, #0
   1e788:	bne	1e5fc <__assert_fail@plt+0x9fa4>
   1e78c:	str	r8, [sp]
   1e790:	mov	r1, r9
   1e794:	ldr	r0, [sp, #88]	; 0x58
   1e798:	add	r2, sp, #92	; 0x5c
   1e79c:	mov	r3, r8
   1e7a0:	bl	1c410 <__assert_fail@plt+0x7db8>
   1e7a4:	ldr	ip, [sp, #44]	; 0x2c
   1e7a8:	cmp	r0, #0
   1e7ac:	beq	1e874 <__assert_fail@plt+0xa21c>
   1e7b0:	uxth	r2, r0
   1e7b4:	movw	r3, #16383	; 0x3fff
   1e7b8:	cmp	r2, r3
   1e7bc:	bne	1e874 <__assert_fail@plt+0xa21c>
   1e7c0:	mov	r0, r8
   1e7c4:	bl	13c08 <time@plt>
   1e7c8:	str	r0, [sp, #96]	; 0x60
   1e7cc:	add	r0, sp, #96	; 0x60
   1e7d0:	bl	13fd4 <localtime@plt>
   1e7d4:	cmp	r4, #0
   1e7d8:	movw	r1, #18888	; 0x49c8
   1e7dc:	movt	r1, #4
   1e7e0:	moveq	r4, r1
   1e7e4:	mov	r2, r0
   1e7e8:	ldr	r0, [sp, #88]	; 0x58
   1e7ec:	ldr	lr, [r2, #12]
   1e7f0:	ldr	sl, [r2, #8]
   1e7f4:	ldr	r3, [r2, #20]
   1e7f8:	str	lr, [sp, #56]	; 0x38
   1e7fc:	ldr	lr, [r2, #4]
   1e800:	add	r3, r3, #1888	; 0x760
   1e804:	str	sl, [sp, #40]	; 0x28
   1e808:	add	r3, r3, #12
   1e80c:	ldr	sl, [sp, #56]	; 0x38
   1e810:	str	lr, [sp, #60]	; 0x3c
   1e814:	ldr	lr, [r2, #16]
   1e818:	ldr	r2, [r2]
   1e81c:	ldr	r0, [r0, #4]
   1e820:	add	lr, lr, #1
   1e824:	ldr	r1, [sp, #60]	; 0x3c
   1e828:	str	sl, [sp, #4]
   1e82c:	str	lr, [sp]
   1e830:	ldr	sl, [sp, #52]	; 0x34
   1e834:	ldr	lr, [sp, #40]	; 0x28
   1e838:	str	r2, [sp, #16]
   1e83c:	movw	r2, #19848	; 0x4d88
   1e840:	movt	r2, #4
   1e844:	str	r1, [sp, #12]
   1e848:	str	lr, [sp, #8]
   1e84c:	mov	r1, #1
   1e850:	movne	r4, r2
   1e854:	str	sl, [sp, #20]
   1e858:	movw	r2, #19868	; 0x4d9c
   1e85c:	str	r9, [sp, #24]
   1e860:	movt	r2, #4
   1e864:	str	r6, [sp, #28]
   1e868:	str	r4, [sp, #32]
   1e86c:	bl	14274 <__fprintf_chk@plt>
   1e870:	ldr	ip, [sp, #44]	; 0x2c
   1e874:	ldr	r0, [sp, #88]	; 0x58
   1e878:	str	ip, [sp, #44]	; 0x2c
   1e87c:	bl	1ba60 <__assert_fail@plt+0x7408>
   1e880:	ldr	ip, [sp, #44]	; 0x2c
   1e884:	b	1e5fc <__assert_fail@plt+0x9fa4>
   1e888:	bl	13cec <__stack_chk_fail@plt>
   1e88c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1e890:	cmp	r0, #0
   1e894:	uxthne	r8, r0
   1e898:	orrne	r8, r8, #67108864	; 0x4000000
   1e89c:	bne	1e628 <__assert_fail@plt+0x9fd0>
   1e8a0:	mov	r0, fp
   1e8a4:	bl	13be4 <gcry_sexp_release@plt>
   1e8a8:	mov	r2, #5
   1e8ac:	ldr	r0, [sp, #48]	; 0x30
   1e8b0:	movw	r1, #19944	; 0x4de8
   1e8b4:	movt	r1, #4
   1e8b8:	bl	13cc8 <dcgettext@plt>
   1e8bc:	movw	r3, #18888	; 0x49c8
   1e8c0:	ldr	r2, [sp, #84]	; 0x54
   1e8c4:	movt	r3, #4
   1e8c8:	b	1e518 <__assert_fail@plt+0x9ec0>
   1e8cc:	bl	14580 <gpg_err_code_from_syserror@plt>
   1e8d0:	ldr	ip, [sp, #44]	; 0x2c
   1e8d4:	subs	r8, r0, #0
   1e8d8:	beq	1e8f4 <__assert_fail@plt+0xa29c>
   1e8dc:	uxth	r8, r8
   1e8e0:	mov	r0, r9
   1e8e4:	bl	13c44 <gcry_free@plt>
   1e8e8:	orr	r8, r8, #67108864	; 0x4000000
   1e8ec:	ldr	ip, [sp, #44]	; 0x2c
   1e8f0:	b	1e5fc <__assert_fail@plt+0x9fa4>
   1e8f4:	str	ip, [sp, #44]	; 0x2c
   1e8f8:	bl	13c44 <gcry_free@plt>
   1e8fc:	ldr	ip, [sp, #44]	; 0x2c
   1e900:	b	1e6d0 <__assert_fail@plt+0xa078>
   1e904:	push	{r4, r5, r6, r7, r8, lr}
   1e908:	sub	sp, sp, #16
   1e90c:	mov	ip, #0
   1e910:	mov	r6, r0
   1e914:	str	ip, [sp]
   1e918:	mov	r0, ip
   1e91c:	str	ip, [sp, #4]
   1e920:	mov	r4, r1
   1e924:	mov	r7, r2
   1e928:	mov	r1, ip
   1e92c:	mov	r2, ip
   1e930:	mov	r8, r3
   1e934:	movw	ip, #19336	; 0x4b88
   1e938:	mov	r3, #1
   1e93c:	movt	ip, #4
   1e940:	str	ip, [sp, #8]
   1e944:	bl	34448 <__assert_fail@plt+0x1fdf0>
   1e948:	subs	r5, r0, #0
   1e94c:	beq	1e9b0 <__assert_fail@plt+0xa358>
   1e950:	mov	r2, r4
   1e954:	mov	r1, r6
   1e958:	bl	1cce4 <__assert_fail@plt+0x868c>
   1e95c:	subs	r4, r0, #0
   1e960:	beq	1e978 <__assert_fail@plt+0xa320>
   1e964:	mov	r0, r5
   1e968:	bl	34ea0 <__assert_fail@plt+0x20848>
   1e96c:	mov	r0, r4
   1e970:	add	sp, sp, #16
   1e974:	pop	{r4, r5, r6, r7, r8, pc}
   1e978:	mov	r1, r4
   1e97c:	mov	r2, r4
   1e980:	mov	r0, r5
   1e984:	bl	3535c <__assert_fail@plt+0x20d04>
   1e988:	subs	r4, r0, #0
   1e98c:	bne	1e964 <__assert_fail@plt+0xa30c>
   1e990:	mov	r2, r4
   1e994:	mov	r3, r4
   1e998:	str	r8, [sp]
   1e99c:	mov	r1, r7
   1e9a0:	mov	r0, r5
   1e9a4:	bl	1df18 <__assert_fail@plt+0x98c0>
   1e9a8:	mov	r4, r0
   1e9ac:	b	1e964 <__assert_fail@plt+0xa30c>
   1e9b0:	bl	14580 <gpg_err_code_from_syserror@plt>
   1e9b4:	cmp	r0, #0
   1e9b8:	uxthne	r4, r0
   1e9bc:	orrne	r4, r4, #67108864	; 0x4000000
   1e9c0:	moveq	r4, r0
   1e9c4:	b	1e96c <__assert_fail@plt+0xa314>
   1e9c8:	push	{r4, r5, r6, lr}
   1e9cc:	movw	r4, #47296	; 0xb8c0
   1e9d0:	movt	r4, #5
   1e9d4:	sub	sp, sp, #40	; 0x28
   1e9d8:	mov	ip, #0
   1e9dc:	mov	r0, r1
   1e9e0:	ldr	lr, [r4]
   1e9e4:	add	r3, sp, #4
   1e9e8:	mov	r5, r2
   1e9ec:	mov	r1, ip
   1e9f0:	mov	r2, sp
   1e9f4:	str	ip, [sp]
   1e9f8:	str	lr, [sp, #36]	; 0x24
   1e9fc:	str	ip, [sp, #8]
   1ea00:	bl	1c6b4 <__assert_fail@plt+0x805c>
   1ea04:	subs	r3, r0, #0
   1ea08:	beq	1ea40 <__assert_fail@plt+0xa3e8>
   1ea0c:	ldr	r0, [sp]
   1ea10:	bl	13c44 <gcry_free@plt>
   1ea14:	ldr	r0, [sp, #8]
   1ea18:	bl	13be4 <gcry_sexp_release@plt>
   1ea1c:	mov	r0, r5
   1ea20:	mov	r1, #5
   1ea24:	bl	1c808 <__assert_fail@plt+0x81b0>
   1ea28:	ldr	r2, [sp, #36]	; 0x24
   1ea2c:	ldr	r3, [r4]
   1ea30:	cmp	r2, r3
   1ea34:	bne	1eaa4 <__assert_fail@plt+0xa44c>
   1ea38:	add	sp, sp, #40	; 0x28
   1ea3c:	pop	{r4, r5, r6, pc}
   1ea40:	ldm	sp, {r0, r1}
   1ea44:	add	r2, sp, #8
   1ea48:	bl	1e904 <__assert_fail@plt+0xa2ac>
   1ea4c:	subs	r3, r0, #0
   1ea50:	bne	1ea0c <__assert_fail@plt+0xa3b4>
   1ea54:	add	r1, sp, #12
   1ea58:	ldr	r0, [sp, #8]
   1ea5c:	str	r3, [sp, #12]
   1ea60:	str	r3, [sp, #16]
   1ea64:	str	r3, [sp, #20]
   1ea68:	str	r3, [sp, #24]
   1ea6c:	str	r3, [sp, #28]
   1ea70:	strb	r3, [sp, #32]
   1ea74:	bl	1c894 <__assert_fail@plt+0x823c>
   1ea78:	mov	r6, r0
   1ea7c:	ldr	r0, [sp]
   1ea80:	bl	13c44 <gcry_free@plt>
   1ea84:	ldr	r0, [sp, #8]
   1ea88:	bl	13be4 <gcry_sexp_release@plt>
   1ea8c:	cmp	r6, #0
   1ea90:	bne	1ea1c <__assert_fail@plt+0xa3c4>
   1ea94:	mov	r0, r5
   1ea98:	mov	r1, #6
   1ea9c:	bl	1c808 <__assert_fail@plt+0x81b0>
   1eaa0:	b	1ea28 <__assert_fail@plt+0xa3d0>
   1eaa4:	bl	13cec <__stack_chk_fail@plt>
   1eaa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1eaac:	movw	r4, #47296	; 0xb8c0
   1eab0:	movt	r4, #5
   1eab4:	sub	sp, sp, #244	; 0xf4
   1eab8:	mov	ip, #0
   1eabc:	mov	r5, r1
   1eac0:	ldr	lr, [r4]
   1eac4:	mov	r7, r0
   1eac8:	mov	r6, r2
   1eacc:	mov	r0, r1
   1ead0:	add	r2, sp, #28
   1ead4:	mov	r1, ip
   1ead8:	add	r3, sp, #32
   1eadc:	str	lr, [sp, #236]	; 0xec
   1eae0:	str	ip, [sp, #28]
   1eae4:	str	ip, [sp, #36]	; 0x24
   1eae8:	str	ip, [sp, #24]
   1eaec:	bl	1c6b4 <__assert_fail@plt+0x805c>
   1eaf0:	cmp	r0, #0
   1eaf4:	beq	1eb48 <__assert_fail@plt+0xa4f0>
   1eaf8:	mov	r5, #0
   1eafc:	mov	r0, r6
   1eb00:	mov	r1, #5
   1eb04:	bl	1c808 <__assert_fail@plt+0x81b0>
   1eb08:	mov	r8, r0
   1eb0c:	ldr	r0, [sp, #24]
   1eb10:	bl	13be4 <gcry_sexp_release@plt>
   1eb14:	ldr	r0, [sp, #28]
   1eb18:	bl	13c44 <gcry_free@plt>
   1eb1c:	ldr	r0, [sp, #36]	; 0x24
   1eb20:	bl	13c44 <gcry_free@plt>
   1eb24:	mov	r0, r5
   1eb28:	bl	13c44 <gcry_free@plt>
   1eb2c:	ldr	r2, [sp, #236]	; 0xec
   1eb30:	ldr	r3, [r4]
   1eb34:	mov	r0, r8
   1eb38:	cmp	r2, r3
   1eb3c:	bne	1ed14 <__assert_fail@plt+0xa6bc>
   1eb40:	add	sp, sp, #244	; 0xf4
   1eb44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1eb48:	ldr	r1, [sp, #32]
   1eb4c:	add	r2, sp, #24
   1eb50:	ldr	r0, [sp, #28]
   1eb54:	add	r3, sp, #64	; 0x40
   1eb58:	bl	1e904 <__assert_fail@plt+0xa2ac>
   1eb5c:	subs	r1, r0, #0
   1eb60:	bne	1eaf8 <__assert_fail@plt+0xa4a0>
   1eb64:	mov	r0, r5
   1eb68:	add	r2, sp, #36	; 0x24
   1eb6c:	add	r3, sp, #40	; 0x28
   1eb70:	bl	1c6b4 <__assert_fail@plt+0x805c>
   1eb74:	cmp	r0, #0
   1eb78:	bne	1eaf8 <__assert_fail@plt+0xa4a0>
   1eb7c:	mov	r0, r5
   1eb80:	add	r1, sp, #44	; 0x2c
   1eb84:	bl	1c5a0 <__assert_fail@plt+0x7f48>
   1eb88:	cmp	r0, #0
   1eb8c:	bne	1eaf8 <__assert_fail@plt+0xa4a0>
   1eb90:	ldr	r5, [sp, #100]	; 0x64
   1eb94:	cmp	r5, #0
   1eb98:	moveq	r5, #2
   1eb9c:	mov	r0, r5
   1eba0:	bl	13a40 <gcry_md_get_algo_dlen@plt>
   1eba4:	subs	r8, r0, #0
   1eba8:	beq	1eaf8 <__assert_fail@plt+0xa4a0>
   1ebac:	mov	r0, r5
   1ebb0:	ldr	r2, [sp, #36]	; 0x24
   1ebb4:	add	r1, sp, #172	; 0xac
   1ebb8:	ldr	r3, [sp, #40]	; 0x28
   1ebbc:	bl	14334 <gcry_md_hash_buffer@plt>
   1ebc0:	add	r1, sp, #108	; 0x6c
   1ebc4:	ldr	r0, [sp, #24]
   1ebc8:	bl	1c894 <__assert_fail@plt+0x823c>
   1ebcc:	subs	r9, r0, #0
   1ebd0:	bne	1eaf8 <__assert_fail@plt+0xa4a0>
   1ebd4:	str	r5, [r7, #24]
   1ebd8:	mov	r2, r8
   1ebdc:	add	r1, sp, #172	; 0xac
   1ebe0:	add	r0, r7, #28
   1ebe4:	bl	13ba8 <memcpy@plt>
   1ebe8:	ldr	r3, [sp, #104]	; 0x68
   1ebec:	add	ip, sp, #108	; 0x6c
   1ebf0:	add	r5, r7, #100	; 0x64
   1ebf4:	tst	r3, #1
   1ebf8:	ldrb	r3, [r7, #96]	; 0x60
   1ebfc:	str	r8, [r7, #92]	; 0x5c
   1ec00:	mov	lr, #1
   1ec04:	bfine	r3, r9, #0, #1
   1ec08:	orreq	r3, r3, #1
   1ec0c:	strb	r3, [r7, #96]	; 0x60
   1ec10:	mov	r8, #0
   1ec14:	ldm	ip!, {r0, r1, r2, r3}
   1ec18:	str	lr, [r7, #120]	; 0x78
   1ec1c:	str	r8, [sp, #48]	; 0x30
   1ec20:	str	r0, [r7, #100]	; 0x64
   1ec24:	ldr	r0, [ip]
   1ec28:	str	r1, [r5, #4]
   1ec2c:	mov	r1, #20
   1ec30:	str	r2, [r5, #8]
   1ec34:	add	r2, sp, #128	; 0x80
   1ec38:	str	r0, [r5, #16]
   1ec3c:	mov	r0, r5
   1ec40:	str	r3, [r5, #12]
   1ec44:	bl	2e26c <__assert_fail@plt+0x19c14>
   1ec48:	add	r0, sp, #128	; 0x80
   1ec4c:	bl	14094 <strlen@plt>
   1ec50:	cmp	r0, #40	; 0x28
   1ec54:	addne	r8, sp, #56	; 0x38
   1ec58:	beq	1ed3c <__assert_fail@plt+0xa6e4>
   1ec5c:	mov	r2, r8
   1ec60:	mov	r1, r5
   1ec64:	mov	r0, r7
   1ec68:	bl	22e78 <__assert_fail@plt+0xe820>
   1ec6c:	subs	r8, r0, #0
   1ec70:	beq	1ed18 <__assert_fail@plt+0xa6c0>
   1ec74:	mov	r9, #0
   1ec78:	mov	r5, r9
   1ec7c:	mov	r3, r9
   1ec80:	mov	fp, r9
   1ec84:	mov	sl, r9
   1ec88:	mov	r0, r5
   1ec8c:	str	r3, [sp, #16]
   1ec90:	bl	13c44 <gcry_free@plt>
   1ec94:	ldr	r3, [sp, #16]
   1ec98:	mov	r5, #0
   1ec9c:	mov	r7, r5
   1eca0:	cmp	sl, #0
   1eca4:	beq	1ecb8 <__assert_fail@plt+0xa660>
   1eca8:	mov	r0, sl
   1ecac:	str	r3, [sp, #16]
   1ecb0:	bl	34ea0 <__assert_fail@plt+0x20848>
   1ecb4:	ldr	r3, [sp, #16]
   1ecb8:	mov	r0, fp
   1ecbc:	str	r3, [sp, #16]
   1ecc0:	bl	13be4 <gcry_sexp_release@plt>
   1ecc4:	ldr	r0, [sp, #48]	; 0x30
   1ecc8:	bl	13be4 <gcry_sexp_release@plt>
   1eccc:	ldr	r3, [sp, #16]
   1ecd0:	mov	r0, r3
   1ecd4:	bl	13be4 <gcry_sexp_release@plt>
   1ecd8:	mov	r0, r9
   1ecdc:	bl	1c3d8 <__assert_fail@plt+0x7d80>
   1ece0:	cmp	r8, #0
   1ece4:	bne	1eafc <__assert_fail@plt+0xa4a4>
   1ece8:	mov	r0, r6
   1ecec:	mov	r1, #14
   1ecf0:	bl	1c808 <__assert_fail@plt+0x81b0>
   1ecf4:	subs	r8, r0, #0
   1ecf8:	bne	1eb0c <__assert_fail@plt+0xa4b4>
   1ecfc:	mov	r0, r6
   1ed00:	mov	r2, r7
   1ed04:	mov	r1, r5
   1ed08:	bl	1ce4c <__assert_fail@plt+0x87f4>
   1ed0c:	mov	r8, r0
   1ed10:	b	1eb0c <__assert_fail@plt+0xa4b4>
   1ed14:	bl	13cec <__stack_chk_fail@plt>
   1ed18:	ldr	r0, [sp, #56]	; 0x38
   1ed1c:	add	r1, sp, #60	; 0x3c
   1ed20:	mov	r2, #4
   1ed24:	bl	39ff4 <__assert_fail@plt+0x2599c>
   1ed28:	subs	r8, r0, #0
   1ed2c:	beq	1edfc <__assert_fail@plt+0xa7a4>
   1ed30:	ldr	r0, [sp, #56]	; 0x38
   1ed34:	bl	13be4 <gcry_sexp_release@plt>
   1ed38:	b	1ec74 <__assert_fail@plt+0xa61c>
   1ed3c:	mov	r1, r8
   1ed40:	add	r0, sp, #52	; 0x34
   1ed44:	bl	1ba88 <__assert_fail@plt+0x7430>
   1ed48:	add	r8, sp, #56	; 0x38
   1ed4c:	subs	r3, r0, #0
   1ed50:	bne	1ec5c <__assert_fail@plt+0xa604>
   1ed54:	add	r0, sp, #60	; 0x3c
   1ed58:	add	r1, sp, #128	; 0x80
   1ed5c:	str	r0, [sp]
   1ed60:	mov	r2, r8
   1ed64:	ldr	r0, [sp, #52]	; 0x34
   1ed68:	bl	1c410 <__assert_fail@plt+0x7db8>
   1ed6c:	cmp	r0, #0
   1ed70:	bne	1ed80 <__assert_fail@plt+0xa728>
   1ed74:	ldr	r3, [sp, #56]	; 0x38
   1ed78:	cmp	r3, #0
   1ed7c:	beq	1ed88 <__assert_fail@plt+0xa730>
   1ed80:	mov	r3, #0
   1ed84:	str	r3, [sp, #60]	; 0x3c
   1ed88:	ldr	r0, [sp, #52]	; 0x34
   1ed8c:	bl	1ba60 <__assert_fail@plt+0x7408>
   1ed90:	ldr	r3, [sp, #60]	; 0x3c
   1ed94:	cmp	r3, #0
   1ed98:	bne	1ec5c <__assert_fail@plt+0xa604>
   1ed9c:	mov	r2, #5
   1eda0:	mov	r5, #1
   1eda4:	movw	r1, #20164	; 0x4ec4
   1eda8:	str	r5, [r7, #124]	; 0x7c
   1edac:	movt	r1, #4
   1edb0:	mov	r0, #0
   1edb4:	bl	13cc8 <dcgettext@plt>
   1edb8:	movw	r3, #50416	; 0xc4f0
   1edbc:	add	r2, sp, #48	; 0x30
   1edc0:	movt	r3, #1
   1edc4:	str	r3, [sp]
   1edc8:	mov	r3, #4
   1edcc:	mov	r9, #0
   1edd0:	mov	r1, r0
   1edd4:	mov	r0, r7
   1edd8:	bl	2376c <__assert_fail@plt+0xf114>
   1eddc:	str	r9, [r7, #124]	; 0x7c
   1ede0:	subs	r8, r0, #0
   1ede4:	beq	1eed0 <__assert_fail@plt+0xa878>
   1ede8:	mov	r5, r9
   1edec:	mov	r3, r9
   1edf0:	mov	fp, r9
   1edf4:	mov	sl, r9
   1edf8:	b	1ec88 <__assert_fail@plt+0xa630>
   1edfc:	movw	r1, #19328	; 0x4b80
   1ee00:	ldr	r0, [sp, #56]	; 0x38
   1ee04:	movt	r1, #4
   1ee08:	mov	r2, r8
   1ee0c:	bl	13e84 <gcry_sexp_find_token@plt>
   1ee10:	subs	r9, r0, #0
   1ee14:	beq	1efb0 <__assert_fail@plt+0xa958>
   1ee18:	mov	r1, #1
   1ee1c:	bl	141d8 <gcry_sexp_nth_string@plt>
   1ee20:	mov	r5, r0
   1ee24:	mov	r0, r9
   1ee28:	bl	13be4 <gcry_sexp_release@plt>
   1ee2c:	ldr	r0, [sp, #56]	; 0x38
   1ee30:	bl	13be4 <gcry_sexp_release@plt>
   1ee34:	mov	r2, #5
   1ee38:	mov	r0, r8
   1ee3c:	movw	r1, #20060	; 0x4e5c
   1ee40:	movt	r1, #4
   1ee44:	bl	13cc8 <dcgettext@plt>
   1ee48:	cmp	r5, #0
   1ee4c:	ldr	r1, [sp, #60]	; 0x3c
   1ee50:	movne	r2, r5
   1ee54:	beq	1efd4 <__assert_fail@plt+0xa97c>
   1ee58:	bl	2ed14 <__assert_fail@plt+0x1a6bc>
   1ee5c:	mov	r9, r0
   1ee60:	ldr	r0, [sp, #60]	; 0x3c
   1ee64:	bl	13c44 <gcry_free@plt>
   1ee68:	mov	r0, r5
   1ee6c:	bl	13c44 <gcry_free@plt>
   1ee70:	mov	r2, #5
   1ee74:	movw	r1, #20148	; 0x4eb4
   1ee78:	mov	r0, #0
   1ee7c:	movt	r1, #4
   1ee80:	bl	13cc8 <dcgettext@plt>
   1ee84:	mov	r2, #5
   1ee88:	movw	r1, #20156	; 0x4ebc
   1ee8c:	movt	r1, #4
   1ee90:	mov	r5, r0
   1ee94:	mov	r0, #0
   1ee98:	bl	13cc8 <dcgettext@plt>
   1ee9c:	mov	ip, #0
   1eea0:	mov	r2, r5
   1eea4:	mov	r1, r9
   1eea8:	str	ip, [sp]
   1eeac:	mov	r3, r0
   1eeb0:	mov	r0, r7
   1eeb4:	bl	2116c <__assert_fail@plt+0xcb14>
   1eeb8:	mov	r8, r0
   1eebc:	mov	r0, r9
   1eec0:	bl	13c44 <gcry_free@plt>
   1eec4:	cmp	r8, #0
   1eec8:	beq	1ed9c <__assert_fail@plt+0xa744>
   1eecc:	b	1ec74 <__assert_fail@plt+0xa61c>
   1eed0:	ldr	r0, [sp, #48]	; 0x30
   1eed4:	mov	r1, r5
   1eed8:	bl	14370 <gcry_sexp_nth@plt>
   1eedc:	subs	fp, r0, #0
   1eee0:	beq	1f150 <__assert_fail@plt+0xaaf8>
   1eee4:	str	r8, [sp]
   1eee8:	mov	r3, r5
   1eeec:	str	r8, [sp, #4]
   1eef0:	movw	r2, #19336	; 0x4b88
   1eef4:	mov	r0, r8
   1eef8:	movt	r2, #4
   1eefc:	mov	r1, r8
   1ef00:	str	r2, [sp, #8]
   1ef04:	mov	r2, r8
   1ef08:	bl	34448 <__assert_fail@plt+0x1fdf0>
   1ef0c:	subs	sl, r0, #0
   1ef10:	beq	1f12c <__assert_fail@plt+0xaad4>
   1ef14:	ldr	r1, [sp, #64]	; 0x40
   1ef18:	bl	1cfdc <__assert_fail@plt+0x8984>
   1ef1c:	cmp	r0, #0
   1ef20:	movne	r8, r0
   1ef24:	movne	r5, r9
   1ef28:	movne	r3, r9
   1ef2c:	bne	1ec88 <__assert_fail@plt+0xa630>
   1ef30:	ldr	r0, [sp, #80]	; 0x50
   1ef34:	bl	14094 <strlen@plt>
   1ef38:	mov	r1, #4
   1ef3c:	mov	r5, r0
   1ef40:	add	r0, r0, #1
   1ef44:	bl	14190 <gcry_calloc@plt>
   1ef48:	subs	r9, r0, #0
   1ef4c:	beq	1f030 <__assert_fail@plt+0xa9d8>
   1ef50:	mov	r7, r8
   1ef54:	cmp	r7, r5
   1ef58:	beq	1f000 <__assert_fail@plt+0xa9a8>
   1ef5c:	ldr	r1, [sp, #80]	; 0x50
   1ef60:	mov	r0, fp
   1ef64:	mov	r2, #1
   1ef68:	add	r1, r1, r7
   1ef6c:	bl	13e84 <gcry_sexp_find_token@plt>
   1ef70:	subs	r3, r0, #0
   1ef74:	beq	1eff4 <__assert_fail@plt+0xa99c>
   1ef78:	mov	r2, #5
   1ef7c:	mov	r1, #1
   1ef80:	str	r3, [sp, #16]
   1ef84:	bl	13fbc <gcry_sexp_nth_mpi@plt>
   1ef88:	ldr	r3, [sp, #16]
   1ef8c:	subs	r2, r0, #0
   1ef90:	beq	1efe4 <__assert_fail@plt+0xa98c>
   1ef94:	mov	r0, r3
   1ef98:	str	r2, [sp, #16]
   1ef9c:	bl	13be4 <gcry_sexp_release@plt>
   1efa0:	ldr	r2, [sp, #16]
   1efa4:	str	r2, [r9, r7, lsl #2]
   1efa8:	add	r7, r7, #1
   1efac:	b	1ef54 <__assert_fail@plt+0xa8fc>
   1efb0:	bl	13be4 <gcry_sexp_release@plt>
   1efb4:	ldr	r0, [sp, #56]	; 0x38
   1efb8:	bl	13be4 <gcry_sexp_release@plt>
   1efbc:	mov	r0, r9
   1efc0:	movw	r1, #20060	; 0x4e5c
   1efc4:	mov	r2, #5
   1efc8:	movt	r1, #4
   1efcc:	bl	13cc8 <dcgettext@plt>
   1efd0:	ldr	r1, [sp, #60]	; 0x3c
   1efd4:	movw	r2, #18888	; 0x49c8
   1efd8:	mov	r5, #0
   1efdc:	movt	r2, #4
   1efe0:	b	1ee58 <__assert_fail@plt+0xa800>
   1efe4:	mov	r8, #63	; 0x3f
   1efe8:	movt	r8, #1024	; 0x400
   1efec:	mov	r5, #0
   1eff0:	b	1ec88 <__assert_fail@plt+0xa630>
   1eff4:	mov	r8, #83	; 0x53
   1eff8:	movt	r8, #1024	; 0x400
   1effc:	b	1efec <__assert_fail@plt+0xa994>
   1f000:	add	r0, sp, #64	; 0x40
   1f004:	ldr	r3, [sp, #92]	; 0x5c
   1f008:	mov	r1, sl
   1f00c:	mov	r2, r9
   1f010:	blx	r3
   1f014:	cmp	r0, #0
   1f018:	str	r0, [sp, #20]
   1f01c:	beq	1f050 <__assert_fail@plt+0xa9f8>
   1f020:	mov	r5, #0
   1f024:	mov	r8, r0
   1f028:	mov	r3, r5
   1f02c:	b	1ec88 <__assert_fail@plt+0xa630>
   1f030:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f034:	cmp	r0, #0
   1f038:	beq	1f0a4 <__assert_fail@plt+0xaa4c>
   1f03c:	uxth	r8, r0
   1f040:	mov	r5, r9
   1f044:	orr	r8, r8, #67108864	; 0x4000000
   1f048:	mov	r3, r9
   1f04c:	b	1ec88 <__assert_fail@plt+0xa630>
   1f050:	mov	r0, sl
   1f054:	bl	35460 <__assert_fail@plt+0x20e08>
   1f058:	cmn	r0, #1
   1f05c:	mov	r7, r0
   1f060:	beq	1f104 <__assert_fail@plt+0xaaac>
   1f064:	bl	139c8 <gcry_malloc@plt>
   1f068:	subs	r5, r0, #0
   1f06c:	beq	1f0e8 <__assert_fail@plt+0xaa90>
   1f070:	ldr	r1, [sp, #20]
   1f074:	mov	r0, sl
   1f078:	mov	r2, r1
   1f07c:	bl	3535c <__assert_fail@plt+0x20d04>
   1f080:	subs	r3, r0, #0
   1f084:	beq	1f0c0 <__assert_fail@plt+0xaa68>
   1f088:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f08c:	cmp	r0, #0
   1f090:	beq	1f0b4 <__assert_fail@plt+0xaa5c>
   1f094:	uxth	r0, r0
   1f098:	ldr	r3, [sp, #20]
   1f09c:	orr	r8, r0, #67108864	; 0x4000000
   1f0a0:	b	1ec88 <__assert_fail@plt+0xa630>
   1f0a4:	mov	r7, r9
   1f0a8:	mov	r5, r9
   1f0ac:	mov	r3, #0
   1f0b0:	b	1eca0 <__assert_fail@plt+0xa648>
   1f0b4:	mov	r7, r0
   1f0b8:	mov	r5, r0
   1f0bc:	b	1f0ac <__assert_fail@plt+0xaa54>
   1f0c0:	mov	r0, sl
   1f0c4:	mov	r1, r5
   1f0c8:	mov	r2, r7
   1f0cc:	str	r3, [sp, #16]
   1f0d0:	bl	1c640 <__assert_fail@plt+0x7fe8>
   1f0d4:	ldr	r3, [sp, #16]
   1f0d8:	cmp	r0, #0
   1f0dc:	beq	1f0ac <__assert_fail@plt+0xaa54>
   1f0e0:	mov	r8, r0
   1f0e4:	b	1ec88 <__assert_fail@plt+0xa630>
   1f0e8:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f0ec:	cmp	r0, #0
   1f0f0:	beq	1f124 <__assert_fail@plt+0xaacc>
   1f0f4:	uxth	r8, r0
   1f0f8:	mov	r3, r5
   1f0fc:	orr	r8, r8, #67108864	; 0x4000000
   1f100:	b	1ec88 <__assert_fail@plt+0xa630>
   1f104:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f108:	cmp	r0, #0
   1f10c:	beq	1f0b4 <__assert_fail@plt+0xaa5c>
   1f110:	ldr	r5, [sp, #20]
   1f114:	uxth	r0, r0
   1f118:	orr	r8, r0, #67108864	; 0x4000000
   1f11c:	mov	r3, r5
   1f120:	b	1ec88 <__assert_fail@plt+0xa630>
   1f124:	mov	r7, r5
   1f128:	b	1f0ac <__assert_fail@plt+0xaa54>
   1f12c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f130:	cmp	r0, #0
   1f134:	beq	1f16c <__assert_fail@plt+0xab14>
   1f138:	uxth	r8, r0
   1f13c:	mov	r9, sl
   1f140:	orr	r8, r8, #67108864	; 0x4000000
   1f144:	mov	r5, sl
   1f148:	mov	r3, sl
   1f14c:	b	1ec88 <__assert_fail@plt+0xa630>
   1f150:	mov	r8, #83	; 0x53
   1f154:	mov	r9, fp
   1f158:	movt	r8, #1024	; 0x400
   1f15c:	mov	r5, fp
   1f160:	mov	r3, fp
   1f164:	mov	sl, fp
   1f168:	b	1ec88 <__assert_fail@plt+0xa630>
   1f16c:	mov	r7, sl
   1f170:	mov	r5, sl
   1f174:	mov	r9, sl
   1f178:	b	1f0ac <__assert_fail@plt+0xaa54>
   1f17c:	push	{r4, lr}
   1f180:	movw	r4, #47296	; 0xb8c0
   1f184:	movt	r4, #5
   1f188:	sub	sp, sp, #8
   1f18c:	mov	r1, #0
   1f190:	ldr	r3, [r4]
   1f194:	mov	r0, sp
   1f198:	str	r3, [sp, #4]
   1f19c:	bl	1ba88 <__assert_fail@plt+0x7430>
   1f1a0:	ldr	r2, [sp, #4]
   1f1a4:	ldr	r3, [r4]
   1f1a8:	cmp	r0, #0
   1f1ac:	ldreq	r0, [sp]
   1f1b0:	movne	r0, #0
   1f1b4:	cmp	r2, r3
   1f1b8:	bne	1f1c4 <__assert_fail@plt+0xab6c>
   1f1bc:	add	sp, sp, #8
   1f1c0:	pop	{r4, pc}
   1f1c4:	bl	13cec <__stack_chk_fail@plt>
   1f1c8:	b	1ba60 <__assert_fail@plt+0x7408>
   1f1cc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1f1d0:	mov	r4, r0
   1f1d4:	ldr	r6, [sp, #32]
   1f1d8:	mov	r9, r1
   1f1dc:	mov	r7, r2
   1f1e0:	mov	r8, r3
   1f1e4:	b	1f1f4 <__assert_fail@plt+0xab9c>
   1f1e8:	ldr	ip, [r4, #12]
   1f1ec:	cmp	ip, #0
   1f1f0:	bne	1f20c <__assert_fail@plt+0xabb4>
   1f1f4:	mov	r0, r4
   1f1f8:	bl	1bc4c <__assert_fail@plt+0x75f4>
   1f1fc:	subs	r5, r0, #0
   1f200:	beq	1f1e8 <__assert_fail@plt+0xab90>
   1f204:	mov	r0, r5
   1f208:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1f20c:	cmp	r9, #0
   1f210:	beq	1f220 <__assert_fail@plt+0xabc8>
   1f214:	mov	r0, r9
   1f218:	add	r1, r4, #28
   1f21c:	bl	13e78 <strcpy@plt>
   1f220:	cmp	r7, #0
   1f224:	ldrne	r3, [r4, #16]
   1f228:	strne	r3, [r7]
   1f22c:	cmp	r8, #0
   1f230:	ldrne	r3, [r4, #20]
   1f234:	strne	r3, [r8]
   1f238:	cmp	r6, #0
   1f23c:	beq	1f204 <__assert_fail@plt+0xabac>
   1f240:	ldr	r3, [r4, #24]
   1f244:	mov	r0, r5
   1f248:	str	r3, [r6]
   1f24c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1f250:	push	{r4, r5, r6, lr}
   1f254:	movw	r5, #47296	; 0xb8c0
   1f258:	sub	sp, sp, #56	; 0x38
   1f25c:	movt	r5, #5
   1f260:	add	r4, sp, #8
   1f264:	mov	ip, #0
   1f268:	ldr	lr, [r5]
   1f26c:	ldr	r6, [sp, #72]	; 0x48
   1f270:	str	lr, [sp, #52]	; 0x34
   1f274:	ldrb	lr, [r1, ip]
   1f278:	cmp	lr, #96	; 0x60
   1f27c:	andhi	lr, lr, #223	; 0xdf
   1f280:	strb	lr, [r4, ip]
   1f284:	add	ip, ip, #1
   1f288:	cmp	ip, #40	; 0x28
   1f28c:	bne	1f274 <__assert_fail@plt+0xac1c>
   1f290:	mov	r1, r4
   1f294:	str	r6, [sp]
   1f298:	mov	ip, #0
   1f29c:	strb	ip, [sp, #48]	; 0x30
   1f2a0:	bl	1c410 <__assert_fail@plt+0x7db8>
   1f2a4:	ldr	r1, [sp, #52]	; 0x34
   1f2a8:	mov	r3, #27
   1f2ac:	ldr	r2, [r5]
   1f2b0:	movt	r3, #1024	; 0x400
   1f2b4:	movw	ip, #16383	; 0x3fff
   1f2b8:	uxth	r4, r0
   1f2bc:	cmp	r4, ip
   1f2c0:	moveq	r0, r3
   1f2c4:	cmp	r1, r2
   1f2c8:	bne	1f2d4 <__assert_fail@plt+0xac7c>
   1f2cc:	add	sp, sp, #56	; 0x38
   1f2d0:	pop	{r4, r5, r6, pc}
   1f2d4:	bl	13cec <__stack_chk_fail@plt>
   1f2d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f2dc:	movw	sl, #47296	; 0xb8c0
   1f2e0:	movt	sl, #5
   1f2e4:	ldr	r6, [pc, #1520]	; 1f8dc <__assert_fail@plt+0xb284>
   1f2e8:	sub	sp, sp, #52	; 0x34
   1f2ec:	movw	r7, #48116	; 0xbbf4
   1f2f0:	ldr	r3, [sl]
   1f2f4:	movt	r7, #5
   1f2f8:	mov	r4, r0
   1f2fc:	mov	r8, r1
   1f300:	str	r3, [sp, #44]	; 0x2c
   1f304:	ldr	r5, [r6, #4]!
   1f308:	cmp	r5, #0
   1f30c:	beq	1f364 <__assert_fail@plt+0xad0c>
   1f310:	ldr	r0, [r7, #24]
   1f314:	mov	r1, r5
   1f318:	bl	39880 <__assert_fail@plt+0x25228>
   1f31c:	subs	r2, r0, #0
   1f320:	beq	1f304 <__assert_fail@plt+0xacac>
   1f324:	mov	r1, r5
   1f328:	ldr	r0, [r4, #12]
   1f32c:	bl	39804 <__assert_fail@plt+0x251ac>
   1f330:	cmp	r0, #0
   1f334:	beq	1f304 <__assert_fail@plt+0xacac>
   1f338:	bl	13a64 <gpg_strerror@plt>
   1f33c:	mov	r1, r0
   1f340:	movw	r0, #20632	; 0x5098
   1f344:	movt	r0, #4
   1f348:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1f34c:	ldr	r2, [sp, #44]	; 0x2c
   1f350:	ldr	r3, [sl]
   1f354:	cmp	r2, r3
   1f358:	bne	1f8d8 <__assert_fail@plt+0xb280>
   1f35c:	add	sp, sp, #52	; 0x34
   1f360:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f364:	ldr	r3, [r4, #16]
   1f368:	cmp	r3, #0
   1f36c:	beq	1f728 <__assert_fail@plt+0xb0d0>
   1f370:	ldr	r3, [r4, #20]
   1f374:	cmp	r3, #0
   1f378:	beq	1f6f4 <__assert_fail@plt+0xb09c>
   1f37c:	mov	r0, r8
   1f380:	movw	r1, #19336	; 0x4b88
   1f384:	movt	r1, #4
   1f388:	bl	348d4 <__assert_fail@plt+0x2027c>
   1f38c:	subs	r5, r0, #0
   1f390:	beq	1f76c <__assert_fail@plt+0xb114>
   1f394:	mov	r1, #0
   1f398:	mov	r2, #2
   1f39c:	mov	r3, r1
   1f3a0:	bl	3673c <__assert_fail@plt+0x220e4>
   1f3a4:	cmp	r0, #0
   1f3a8:	bne	1f4d4 <__assert_fail@plt+0xae7c>
   1f3ac:	movw	r6, #48116	; 0xbbf4
   1f3b0:	movw	ip, #47160	; 0xb838
   1f3b4:	movt	r6, #5
   1f3b8:	movt	ip, #5
   1f3bc:	str	sl, [sp, #28]
   1f3c0:	str	r4, [sp, #24]
   1f3c4:	mov	sl, r6
   1f3c8:	mov	fp, ip
   1f3cc:	b	1f47c <__assert_fail@plt+0xae24>
   1f3d0:	ldr	r3, [sl, #4]
   1f3d4:	cmp	r3, #1
   1f3d8:	ble	1f3ec <__assert_fail@plt+0xad94>
   1f3dc:	movw	r0, #20324	; 0x4f64
   1f3e0:	ldr	r1, [sp, #40]	; 0x28
   1f3e4:	movt	r0, #4
   1f3e8:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1f3ec:	ldr	r6, [sp, #40]	; 0x28
   1f3f0:	cmp	r6, #0
   1f3f4:	bne	1f518 <__assert_fail@plt+0xaec0>
   1f3f8:	mov	r4, #1
   1f3fc:	mov	r8, #0
   1f400:	cmp	r4, #0
   1f404:	beq	1f434 <__assert_fail@plt+0xaddc>
   1f408:	ldr	r3, [sl, #4]
   1f40c:	cmp	r3, #1
   1f410:	ble	1f420 <__assert_fail@plt+0xadc8>
   1f414:	movw	r0, #20604	; 0x507c
   1f418:	movt	r0, #4
   1f41c:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1f420:	mov	r0, r5
   1f424:	mov	r1, #1
   1f428:	bl	1cdd0 <__assert_fail@plt+0x8778>
   1f42c:	subs	r7, r0, #0
   1f430:	beq	1f504 <__assert_fail@plt+0xaeac>
   1f434:	cmp	r6, #0
   1f438:	beq	1f444 <__assert_fail@plt+0xadec>
   1f43c:	mov	r0, r6
   1f440:	bl	34ea0 <__assert_fail@plt+0x20848>
   1f444:	cmp	r8, #0
   1f448:	beq	1f454 <__assert_fail@plt+0xadfc>
   1f44c:	mov	r0, r8
   1f450:	bl	34ea0 <__assert_fail@plt+0x20848>
   1f454:	ldr	r0, [sp, #36]	; 0x24
   1f458:	bl	13c44 <gcry_free@plt>
   1f45c:	cmp	r7, #0
   1f460:	bne	1f560 <__assert_fail@plt+0xaf08>
   1f464:	mov	r0, r5
   1f468:	bl	356c8 <__assert_fail@plt+0x21070>
   1f46c:	cmn	r0, #1
   1f470:	beq	1f560 <__assert_fail@plt+0xaf08>
   1f474:	mov	r1, r5
   1f478:	bl	35850 <__assert_fail@plt+0x211f8>
   1f47c:	mov	r0, r5
   1f480:	mov	r1, #1
   1f484:	add	r2, sp, #36	; 0x24
   1f488:	add	r3, sp, #40	; 0x28
   1f48c:	mov	r4, #0
   1f490:	str	r4, [sp, #36]	; 0x24
   1f494:	bl	1c6b4 <__assert_fail@plt+0x805c>
   1f498:	subs	r7, r0, #0
   1f49c:	beq	1f3d0 <__assert_fail@plt+0xad78>
   1f4a0:	mov	r6, r4
   1f4a4:	mov	r8, r4
   1f4a8:	mov	r0, r5
   1f4ac:	bl	350d0 <__assert_fail@plt+0x20a78>
   1f4b0:	cmp	r0, #0
   1f4b4:	beq	1f400 <__assert_fail@plt+0xada8>
   1f4b8:	mov	r0, r7
   1f4bc:	bl	13a64 <gpg_strerror@plt>
   1f4c0:	mov	r1, r0
   1f4c4:	movw	r0, #20560	; 0x5050
   1f4c8:	movt	r0, #4
   1f4cc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1f4d0:	b	1f400 <__assert_fail@plt+0xada8>
   1f4d4:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f4d8:	cmp	r0, #0
   1f4dc:	uxthne	r0, r0
   1f4e0:	orrne	r0, r0, #67108864	; 0x4000000
   1f4e4:	bl	13a64 <gpg_strerror@plt>
   1f4e8:	mov	r1, r0
   1f4ec:	movw	r0, #20272	; 0x4f30
   1f4f0:	movt	r0, #4
   1f4f4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1f4f8:	mov	r0, r5
   1f4fc:	bl	34ea0 <__assert_fail@plt+0x20848>
   1f500:	b	1f34c <__assert_fail@plt+0xacf4>
   1f504:	mov	r0, r5
   1f508:	mov	r1, #5
   1f50c:	bl	1c808 <__assert_fail@plt+0x81b0>
   1f510:	mov	r7, r0
   1f514:	b	1f434 <__assert_fail@plt+0xaddc>
   1f518:	ldr	r2, [sp, #36]	; 0x24
   1f51c:	mov	r3, #0
   1f520:	ldrb	r1, [r2]
   1f524:	ldrb	r2, [fp, r3, lsl #4]
   1f528:	movw	r9, #47160	; 0xb838
   1f52c:	lsl	ip, r3, #4
   1f530:	movt	r9, #5
   1f534:	cmp	r1, r2
   1f538:	beq	1f574 <__assert_fail@plt+0xaf1c>
   1f53c:	add	r3, r3, #1
   1f540:	cmp	r3, #8
   1f544:	bne	1f524 <__assert_fail@plt+0xaecc>
   1f548:	ldr	r3, [sl, #4]
   1f54c:	cmp	r3, #0
   1f550:	bne	1f7d0 <__assert_fail@plt+0xb178>
   1f554:	mov	r4, #1
   1f558:	mov	r6, #0
   1f55c:	b	1f3fc <__assert_fail@plt+0xada4>
   1f560:	ldr	r4, [sp, #24]
   1f564:	ldr	sl, [sp, #28]
   1f568:	mov	r0, r4
   1f56c:	bl	29ffc <__assert_fail@plt+0x159a4>
   1f570:	b	1f4f8 <__assert_fail@plt+0xaea0>
   1f574:	adds	r4, r9, ip
   1f578:	beq	1f8d0 <__assert_fail@plt+0xb278>
   1f57c:	ldr	r0, [r4, #12]
   1f580:	movw	r8, #19336	; 0x4b88
   1f584:	movt	r8, #4
   1f588:	str	r8, [sp, #8]
   1f58c:	cmp	r0, #0
   1f590:	str	ip, [sp, #16]
   1f594:	movne	r0, #0
   1f598:	movwne	r2, #49288	; 0xc088
   1f59c:	movweq	r2, #17108	; 0x42d4
   1f5a0:	movtne	r2, #1
   1f5a4:	movteq	r2, #1
   1f5a8:	movwne	r3, #15428	; 0x3c44
   1f5ac:	movweq	r3, #15428	; 0x3c44
   1f5b0:	mov	r1, r0
   1f5b4:	movt	r3, #1
   1f5b8:	stm	sp, {r2, r3}
   1f5bc:	mov	r2, r0
   1f5c0:	mov	r3, #1
   1f5c4:	bl	34448 <__assert_fail@plt+0x1fdf0>
   1f5c8:	ldr	ip, [sp, #16]
   1f5cc:	cmp	r0, #0
   1f5d0:	mov	r6, r0
   1f5d4:	beq	1f7b0 <__assert_fail@plt+0xb158>
   1f5d8:	mov	r1, #0
   1f5dc:	mov	r2, #2
   1f5e0:	mov	r3, r1
   1f5e4:	str	ip, [sp, #16]
   1f5e8:	bl	3673c <__assert_fail@plt+0x220e4>
   1f5ec:	ldr	ip, [sp, #16]
   1f5f0:	subs	r3, r0, #0
   1f5f4:	beq	1f618 <__assert_fail@plt+0xafc0>
   1f5f8:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f5fc:	cmp	r0, #0
   1f600:	beq	1f764 <__assert_fail@plt+0xb10c>
   1f604:	uxth	r7, r0
   1f608:	mov	r4, #0
   1f60c:	orr	r7, r7, #67108864	; 0x4000000
   1f610:	mov	r8, r4
   1f614:	b	1f4a8 <__assert_fail@plt+0xae50>
   1f618:	ldr	r1, [sp, #36]	; 0x24
   1f61c:	mov	r0, r6
   1f620:	ldr	r2, [sp, #40]	; 0x28
   1f624:	add	r1, r1, #1
   1f628:	str	r3, [sp, #20]
   1f62c:	sub	r2, r2, #1
   1f630:	str	ip, [sp, #16]
   1f634:	bl	1cce4 <__assert_fail@plt+0x868c>
   1f638:	ldr	r3, [sp, #20]
   1f63c:	subs	r2, r0, #0
   1f640:	movne	r4, r3
   1f644:	movne	r7, r2
   1f648:	movne	r8, r4
   1f64c:	bne	1f4a8 <__assert_fail@plt+0xae50>
   1f650:	mov	r0, r6
   1f654:	str	r2, [sp, #20]
   1f658:	bl	35578 <__assert_fail@plt+0x20f20>
   1f65c:	ldr	r2, [sp, #20]
   1f660:	mov	r3, #1
   1f664:	stmib	sp, {r2, r8}
   1f668:	mov	r0, r2
   1f66c:	str	r2, [sp]
   1f670:	mov	r1, r2
   1f674:	bl	34448 <__assert_fail@plt+0x1fdf0>
   1f678:	ldr	ip, [sp, #16]
   1f67c:	subs	r8, r0, #0
   1f680:	beq	1f8a0 <__assert_fail@plt+0xb248>
   1f684:	ldr	r3, [sl, #4]
   1f688:	cmp	r3, #0
   1f68c:	bne	1f7f8 <__assert_fail@plt+0xb1a0>
   1f690:	ldr	r3, [r4, #4]
   1f694:	mov	r1, r6
   1f698:	str	ip, [sp, #16]
   1f69c:	mov	r2, r8
   1f6a0:	ldr	r0, [sp, #24]
   1f6a4:	blx	r3
   1f6a8:	ldr	r3, [sl, #4]
   1f6ac:	ldr	ip, [sp, #16]
   1f6b0:	cmp	r3, #0
   1f6b4:	mov	r7, r0
   1f6b8:	beq	1f7e8 <__assert_fail@plt+0xb190>
   1f6bc:	cmp	r0, #0
   1f6c0:	ldr	r1, [r4, #8]
   1f6c4:	beq	1f818 <__assert_fail@plt+0xb1c0>
   1f6c8:	ldrb	r9, [r9, ip]
   1f6cc:	mov	r4, #1
   1f6d0:	str	r1, [sp, #20]
   1f6d4:	bl	13a64 <gpg_strerror@plt>
   1f6d8:	ldr	r1, [sp, #20]
   1f6dc:	mov	r2, r9
   1f6e0:	mov	r3, r0
   1f6e4:	movw	r0, #20440	; 0x4fd8
   1f6e8:	movt	r0, #4
   1f6ec:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1f6f0:	b	1f4a8 <__assert_fail@plt+0xae50>
   1f6f4:	movw	r3, #48116	; 0xbbf4
   1f6f8:	movt	r3, #5
   1f6fc:	ldr	r0, [r3, #32]
   1f700:	cmp	r0, #0
   1f704:	beq	1f37c <__assert_fail@plt+0xad24>
   1f708:	bl	13f2c <gcry_strdup@plt>
   1f70c:	cmp	r0, #0
   1f710:	str	r0, [r4, #20]
   1f714:	bne	1f37c <__assert_fail@plt+0xad24>
   1f718:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f71c:	cmp	r0, #0
   1f720:	beq	1f37c <__assert_fail@plt+0xad24>
   1f724:	b	1f758 <__assert_fail@plt+0xb100>
   1f728:	movw	r3, #48116	; 0xbbf4
   1f72c:	movt	r3, #5
   1f730:	ldr	r0, [r3, #28]
   1f734:	cmp	r0, #0
   1f738:	beq	1f370 <__assert_fail@plt+0xad18>
   1f73c:	bl	13f2c <gcry_strdup@plt>
   1f740:	cmp	r0, #0
   1f744:	str	r0, [r4, #16]
   1f748:	bne	1f370 <__assert_fail@plt+0xad18>
   1f74c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f750:	cmp	r0, #0
   1f754:	beq	1f370 <__assert_fail@plt+0xad18>
   1f758:	uxth	r0, r0
   1f75c:	orr	r0, r0, #67108864	; 0x4000000
   1f760:	b	1f338 <__assert_fail@plt+0xace0>
   1f764:	mov	r4, r0
   1f768:	b	1f3fc <__assert_fail@plt+0xada4>
   1f76c:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f770:	mov	r2, #5
   1f774:	movw	r1, #20228	; 0x4f04
   1f778:	movt	r1, #4
   1f77c:	cmp	r0, #0
   1f780:	uxthne	r0, r0
   1f784:	orrne	r5, r0, #67108864	; 0x4000000
   1f788:	moveq	r5, r0
   1f78c:	mov	r0, #0
   1f790:	bl	13cc8 <dcgettext@plt>
   1f794:	mov	r4, r0
   1f798:	mov	r0, r5
   1f79c:	bl	13a64 <gpg_strerror@plt>
   1f7a0:	mov	r1, r0
   1f7a4:	mov	r0, r4
   1f7a8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1f7ac:	b	1f34c <__assert_fail@plt+0xacf4>
   1f7b0:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f7b4:	cmp	r0, #0
   1f7b8:	beq	1f7e0 <__assert_fail@plt+0xb188>
   1f7bc:	uxth	r0, r0
   1f7c0:	mov	r4, r6
   1f7c4:	orr	r7, r0, #67108864	; 0x4000000
   1f7c8:	mov	r8, r6
   1f7cc:	b	1f4a8 <__assert_fail@plt+0xae50>
   1f7d0:	movw	r0, #20360	; 0x4f88
   1f7d4:	movt	r0, #4
   1f7d8:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1f7dc:	b	1f554 <__assert_fail@plt+0xaefc>
   1f7e0:	mov	r4, r6
   1f7e4:	b	1f3fc <__assert_fail@plt+0xada4>
   1f7e8:	cmp	r0, #0
   1f7ec:	beq	1f828 <__assert_fail@plt+0xb1d0>
   1f7f0:	mov	r4, #1
   1f7f4:	b	1f4a8 <__assert_fail@plt+0xae50>
   1f7f8:	ldrb	r2, [r9, ip]
   1f7fc:	movw	r0, #20396	; 0x4fac
   1f800:	ldr	r1, [r4, #8]
   1f804:	movt	r0, #4
   1f808:	str	ip, [sp, #16]
   1f80c:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1f810:	ldr	ip, [sp, #16]
   1f814:	b	1f690 <__assert_fail@plt+0xb038>
   1f818:	movw	r0, #20484	; 0x5004
   1f81c:	ldrb	r2, [r9, ip]
   1f820:	movt	r0, #4
   1f824:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1f828:	mov	r0, r8
   1f82c:	bl	35460 <__assert_fail@plt+0x20e08>
   1f830:	ldr	r3, [sl, #4]
   1f834:	cmp	r3, #1
   1f838:	mov	r4, r0
   1f83c:	ble	1f850 <__assert_fail@plt+0xb1f8>
   1f840:	movw	r0, #20524	; 0x502c
   1f844:	mov	r1, r4
   1f848:	movt	r0, #4
   1f84c:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1f850:	mov	r1, #0
   1f854:	mov	r0, r8
   1f858:	mov	r2, r1
   1f85c:	bl	3535c <__assert_fail@plt+0x20d04>
   1f860:	cmp	r0, #0
   1f864:	mov	r7, r0
   1f868:	mov	r9, r0
   1f86c:	bne	1f7f0 <__assert_fail@plt+0xb198>
   1f870:	mov	r1, r4
   1f874:	mov	r0, r5
   1f878:	bl	1cdd0 <__assert_fail@plt+0x8778>
   1f87c:	subs	r7, r0, #0
   1f880:	bne	1f7f0 <__assert_fail@plt+0xb198>
   1f884:	mov	r0, r5
   1f888:	mov	r1, r8
   1f88c:	bl	1cd0c <__assert_fail@plt+0x86b4>
   1f890:	subs	r7, r0, #0
   1f894:	beq	1f8bc <__assert_fail@plt+0xb264>
   1f898:	mov	r4, r9
   1f89c:	b	1f4a8 <__assert_fail@plt+0xae50>
   1f8a0:	bl	14580 <gpg_err_code_from_syserror@plt>
   1f8a4:	cmp	r0, #0
   1f8a8:	beq	1f764 <__assert_fail@plt+0xb10c>
   1f8ac:	uxth	r0, r0
   1f8b0:	mov	r4, r8
   1f8b4:	orr	r7, r0, #67108864	; 0x4000000
   1f8b8:	b	1f4a8 <__assert_fail@plt+0xae50>
   1f8bc:	mov	r0, r5
   1f8c0:	bl	35274 <__assert_fail@plt+0x20c1c>
   1f8c4:	subs	r7, r0, #0
   1f8c8:	bne	1f898 <__assert_fail@plt+0xb240>
   1f8cc:	b	1f43c <__assert_fail@plt+0xade4>
   1f8d0:	mov	r6, r4
   1f8d4:	b	1f3f8 <__assert_fail@plt+0xada0>
   1f8d8:	bl	13cec <__stack_chk_fail@plt>
   1f8dc:	andeq	r4, r4, r0, lsl r9
   1f8e0:	push	{r4, r5, lr}
   1f8e4:	movw	r5, #47532	; 0xb9ac
   1f8e8:	sub	sp, sp, #20
   1f8ec:	movt	r5, #5
   1f8f0:	mov	r4, #0
   1f8f4:	movw	r1, #20944	; 0x51d0
   1f8f8:	mov	r3, r4
   1f8fc:	ldr	r0, [r5]
   1f900:	mov	r2, r4
   1f904:	str	r4, [sp]
   1f908:	str	r4, [sp, #4]
   1f90c:	movt	r1, #4
   1f910:	str	r4, [sp, #8]
   1f914:	str	r4, [sp, #12]
   1f918:	bl	13ef0 <assuan_transact@plt>
   1f91c:	mov	r0, r4
   1f920:	mov	r3, #1
   1f924:	str	r3, [r5, #4]
   1f928:	add	sp, sp, #20
   1f92c:	pop	{r4, r5, pc}
   1f930:	push	{r3, r4, r5, lr}
   1f934:	movw	r3, #47532	; 0xb9ac
   1f938:	movt	r3, #5
   1f93c:	mov	r4, r0
   1f940:	mov	r2, #0
   1f944:	mov	r0, r3
   1f948:	ldr	r5, [r3]
   1f94c:	str	r2, [r0], #8
   1f950:	bl	14220 <pth_mutex_release@plt>
   1f954:	cmp	r0, #0
   1f958:	bne	1f978 <__assert_fail@plt+0xb320>
   1f95c:	movw	r0, #20968	; 0x51e8
   1f960:	movt	r0, #4
   1f964:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1f968:	mov	r3, #63	; 0x3f
   1f96c:	cmp	r4, #0
   1f970:	movt	r3, #1024	; 0x400
   1f974:	moveq	r4, r3
   1f978:	mov	r0, r5
   1f97c:	bl	14388 <assuan_release@plt>
   1f980:	mov	r0, r4
   1f984:	pop	{r3, r4, r5, pc}
   1f988:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f98c:	movw	r5, #47296	; 0xb8c0
   1f990:	movt	r5, #5
   1f994:	sub	sp, sp, #84	; 0x54
   1f998:	add	r6, sp, #36	; 0x24
   1f99c:	mov	r1, #60	; 0x3c
   1f9a0:	ldr	r3, [r5]
   1f9a4:	mov	r2, #0
   1f9a8:	mov	r7, r0
   1f9ac:	mov	r0, r6
   1f9b0:	movw	r4, #47532	; 0xb9ac
   1f9b4:	movt	r4, #5
   1f9b8:	str	r3, [sp, #76]	; 0x4c
   1f9bc:	bl	14520 <pth_timeout@plt>
   1f9c0:	ldm	r6, {r1, r2}
   1f9c4:	mov	r0, #16
   1f9c8:	bl	13968 <pth_event@plt>
   1f9cc:	mov	r1, #0
   1f9d0:	mov	r6, r0
   1f9d4:	mov	r2, r0
   1f9d8:	add	r0, r4, #8
   1f9dc:	bl	14364 <pth_mutex_acquire@plt>
   1f9e0:	cmp	r0, #0
   1f9e4:	mov	r0, r6
   1f9e8:	bne	1fa18 <__assert_fail@plt+0xb3c0>
   1f9ec:	bl	14100 <pth_event_status@plt>
   1f9f0:	cmp	r0, #1
   1f9f4:	beq	1fa50 <__assert_fail@plt+0xb3f8>
   1f9f8:	mov	r0, r6
   1f9fc:	bl	14100 <pth_event_status@plt>
   1fa00:	cmp	r0, #2
   1fa04:	beq	1fa50 <__assert_fail@plt+0xb3f8>
   1fa08:	mov	r4, #63	; 0x3f
   1fa0c:	movt	r4, #1024	; 0x400
   1fa10:	mov	r7, r4
   1fa14:	b	1fa5c <__assert_fail@plt+0xb404>
   1fa18:	mov	r1, #0
   1fa1c:	bl	13a10 <pth_event_free@plt>
   1fa20:	ldr	r3, [r4]
   1fa24:	str	r7, [r4, #28]
   1fa28:	cmp	r3, #0
   1fa2c:	beq	1fa9c <__assert_fail@plt+0xb444>
   1fa30:	mov	r6, #0
   1fa34:	ldr	r2, [sp, #76]	; 0x4c
   1fa38:	mov	r0, r6
   1fa3c:	ldr	r3, [r5]
   1fa40:	cmp	r2, r3
   1fa44:	bne	2006c <__assert_fail@plt+0xba14>
   1fa48:	add	sp, sp, #84	; 0x54
   1fa4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1fa50:	mov	r4, #62	; 0x3e
   1fa54:	movt	r4, #1024	; 0x400
   1fa58:	mov	r7, r4
   1fa5c:	mov	r0, r6
   1fa60:	mov	r1, #0
   1fa64:	bl	13a10 <pth_event_free@plt>
   1fa68:	mov	r2, #5
   1fa6c:	movw	r1, #21036	; 0x522c
   1fa70:	mov	r0, #0
   1fa74:	movt	r1, #4
   1fa78:	mov	r6, r7
   1fa7c:	bl	13cc8 <dcgettext@plt>
   1fa80:	mov	r7, r0
   1fa84:	mov	r0, r4
   1fa88:	bl	13a64 <gpg_strerror@plt>
   1fa8c:	mov	r1, r0
   1fa90:	mov	r0, r7
   1fa94:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1fa98:	b	1fa34 <__assert_fail@plt+0xb3dc>
   1fa9c:	movw	r8, #48116	; 0xbbf4
   1faa0:	movt	r8, #5
   1faa4:	ldr	r3, [r8, #4]
   1faa8:	cmp	r3, #0
   1faac:	bne	1fe8c <__assert_fail@plt+0xb834>
   1fab0:	mov	r0, #0
   1fab4:	bl	13ae8 <fflush@plt>
   1fab8:	subs	r6, r0, #0
   1fabc:	bne	1fe44 <__assert_fail@plt+0xb7ec>
   1fac0:	ldr	r9, [r8, #44]	; 0x2c
   1fac4:	cmp	r9, #0
   1fac8:	beq	1fe14 <__assert_fail@plt+0xb7bc>
   1facc:	ldrb	r3, [r9]
   1fad0:	cmp	r3, #0
   1fad4:	beq	1fe14 <__assert_fail@plt+0xb7bc>
   1fad8:	mov	r0, r9
   1fadc:	mov	r1, #47	; 0x2f
   1fae0:	bl	143b8 <strrchr@plt>
   1fae4:	ldr	sl, [r8, #124]	; 0x7c
   1fae8:	cmp	r0, #0
   1faec:	addne	r9, r0, #1
   1faf0:	cmp	sl, #0
   1faf4:	str	r9, [sp, #56]	; 0x38
   1faf8:	beq	1fedc <__assert_fail@plt+0xb884>
   1fafc:	mov	r3, #0
   1fb00:	str	r3, [sp, #60]	; 0x3c
   1fb04:	ldr	r9, [r8, #104]	; 0x68
   1fb08:	cmp	r9, #0
   1fb0c:	movne	sl, #0
   1fb10:	beq	1fe9c <__assert_fail@plt+0xb844>
   1fb14:	add	r2, sp, #80	; 0x50
   1fb18:	add	r0, sp, #28
   1fb1c:	add	r3, r2, sl, lsl #2
   1fb20:	mvn	r2, #0
   1fb24:	str	r2, [r3, #-36]	; 0xffffffdc
   1fb28:	bl	14070 <assuan_new@plt>
   1fb2c:	subs	r9, r0, #0
   1fb30:	bne	1fe28 <__assert_fail@plt+0xb7d0>
   1fb34:	ldr	r1, [r8, #44]	; 0x2c
   1fb38:	mov	r2, #128	; 0x80
   1fb3c:	ldr	r0, [sp, #28]
   1fb40:	movw	r3, #304	; 0x130
   1fb44:	str	r2, [sp, #8]
   1fb48:	movt	r3, #2
   1fb4c:	str	r7, [sp, #4]
   1fb50:	add	r2, sp, #56	; 0x38
   1fb54:	str	r3, [sp]
   1fb58:	add	r3, sp, #44	; 0x2c
   1fb5c:	bl	13f38 <assuan_pipe_connect@plt>
   1fb60:	movw	r3, #48116	; 0xbbf4
   1fb64:	movt	r3, #5
   1fb68:	cmp	r0, #0
   1fb6c:	bne	1fff8 <__assert_fail@plt+0xb9a0>
   1fb70:	ldr	r3, [r3]
   1fb74:	movw	r9, #47532	; 0xb9ac
   1fb78:	ldr	r0, [sp, #28]
   1fb7c:	movt	r9, #5
   1fb80:	tst	r3, #1024	; 0x400
   1fb84:	str	r0, [r4]
   1fb88:	bne	1ffe4 <__assert_fail@plt+0xb98c>
   1fb8c:	ldr	r9, [r8, #56]	; 0x38
   1fb90:	mov	ip, #0
   1fb94:	movw	lr, #21004	; 0x520c
   1fb98:	movt	lr, #4
   1fb9c:	cmp	r9, ip
   1fba0:	mov	r2, ip
   1fba4:	movw	r1, #21020	; 0x521c
   1fba8:	str	ip, [sp]
   1fbac:	movt	r1, #4
   1fbb0:	mov	r3, ip
   1fbb4:	movne	r1, lr
   1fbb8:	str	ip, [sp, #4]
   1fbbc:	str	ip, [sp, #8]
   1fbc0:	str	ip, [sp, #12]
   1fbc4:	bl	13ef0 <assuan_transact@plt>
   1fbc8:	subs	r9, r0, #0
   1fbcc:	bne	1ffd8 <__assert_fail@plt+0xb980>
   1fbd0:	movw	r1, #2048	; 0x800
   1fbd4:	ldr	r0, [r7, #12]
   1fbd8:	movt	r1, #4
   1fbdc:	bl	39880 <__assert_fail@plt+0x25228>
   1fbe0:	add	r3, sp, #32
   1fbe4:	str	r3, [sp, #20]
   1fbe8:	subs	r2, r0, #0
   1fbec:	beq	1fc40 <__assert_fail@plt+0xb5e8>
   1fbf0:	movw	r1, #21240	; 0x52f8
   1fbf4:	mov	r0, r3
   1fbf8:	movt	r1, #4
   1fbfc:	bl	3932c <__assert_fail@plt+0x24cd4>
   1fc00:	cmp	r0, #0
   1fc04:	blt	20038 <__assert_fail@plt+0xb9e0>
   1fc08:	ldr	r0, [r4]
   1fc0c:	mov	r2, r9
   1fc10:	mov	r3, r9
   1fc14:	ldr	r1, [sp, #32]
   1fc18:	str	r9, [sp]
   1fc1c:	str	r9, [sp, #4]
   1fc20:	str	r9, [sp, #8]
   1fc24:	str	r9, [sp, #12]
   1fc28:	bl	13ef0 <assuan_transact@plt>
   1fc2c:	mov	r9, r0
   1fc30:	ldr	r0, [sp, #32]
   1fc34:	bl	13c44 <gcry_free@plt>
   1fc38:	cmp	r9, #0
   1fc3c:	bne	20028 <__assert_fail@plt+0xb9d0>
   1fc40:	movw	r1, #2056	; 0x808
   1fc44:	ldr	r0, [r7, #12]
   1fc48:	movt	r1, #4
   1fc4c:	bl	39880 <__assert_fail@plt+0x25228>
   1fc50:	subs	r2, r0, #0
   1fc54:	beq	1fcac <__assert_fail@plt+0xb654>
   1fc58:	movw	r1, #21260	; 0x530c
   1fc5c:	ldr	r0, [sp, #20]
   1fc60:	movt	r1, #4
   1fc64:	bl	3932c <__assert_fail@plt+0x24cd4>
   1fc68:	cmp	r0, #0
   1fc6c:	blt	20038 <__assert_fail@plt+0xb9e0>
   1fc70:	mov	ip, #0
   1fc74:	ldr	r0, [r4]
   1fc78:	ldr	r1, [sp, #32]
   1fc7c:	mov	r2, ip
   1fc80:	str	ip, [sp]
   1fc84:	mov	r3, ip
   1fc88:	str	ip, [sp, #4]
   1fc8c:	str	ip, [sp, #8]
   1fc90:	str	ip, [sp, #12]
   1fc94:	bl	13ef0 <assuan_transact@plt>
   1fc98:	mov	r9, r0
   1fc9c:	ldr	r0, [sp, #32]
   1fca0:	bl	13c44 <gcry_free@plt>
   1fca4:	cmp	r9, #0
   1fca8:	bne	20028 <__assert_fail@plt+0xb9d0>
   1fcac:	ldr	r2, [r7, #16]
   1fcb0:	cmp	r2, #0
   1fcb4:	beq	1fd0c <__assert_fail@plt+0xb6b4>
   1fcb8:	movw	r1, #21280	; 0x5320
   1fcbc:	ldr	r0, [sp, #20]
   1fcc0:	movt	r1, #4
   1fcc4:	bl	3932c <__assert_fail@plt+0x24cd4>
   1fcc8:	cmp	r0, #0
   1fccc:	blt	20058 <__assert_fail@plt+0xba00>
   1fcd0:	mov	ip, #0
   1fcd4:	ldr	r0, [r4]
   1fcd8:	ldr	r1, [sp, #32]
   1fcdc:	mov	r2, ip
   1fce0:	str	ip, [sp]
   1fce4:	mov	r3, ip
   1fce8:	str	ip, [sp, #4]
   1fcec:	str	ip, [sp, #8]
   1fcf0:	str	ip, [sp, #12]
   1fcf4:	bl	13ef0 <assuan_transact@plt>
   1fcf8:	mov	r9, r0
   1fcfc:	ldr	r0, [sp, #32]
   1fd00:	bl	13c44 <gcry_free@plt>
   1fd04:	cmp	r9, #0
   1fd08:	bne	20028 <__assert_fail@plt+0xb9d0>
   1fd0c:	ldr	r2, [r7, #20]
   1fd10:	cmp	r2, #0
   1fd14:	beq	1fd6c <__assert_fail@plt+0xb714>
   1fd18:	movw	r1, #21300	; 0x5334
   1fd1c:	ldr	r0, [sp, #20]
   1fd20:	movt	r1, #4
   1fd24:	bl	3932c <__assert_fail@plt+0x24cd4>
   1fd28:	cmp	r0, #0
   1fd2c:	blt	20058 <__assert_fail@plt+0xba00>
   1fd30:	mov	ip, #0
   1fd34:	ldr	r0, [r4]
   1fd38:	ldr	r1, [sp, #32]
   1fd3c:	mov	r2, ip
   1fd40:	str	ip, [sp]
   1fd44:	mov	r3, ip
   1fd48:	str	ip, [sp, #4]
   1fd4c:	str	ip, [sp, #8]
   1fd50:	str	ip, [sp, #12]
   1fd54:	bl	13ef0 <assuan_transact@plt>
   1fd58:	mov	r9, r0
   1fd5c:	ldr	r0, [sp, #32]
   1fd60:	bl	13c44 <gcry_free@plt>
   1fd64:	cmp	r9, #0
   1fd68:	bne	20028 <__assert_fail@plt+0xb9d0>
   1fd6c:	movw	fp, #21032	; 0x5228
   1fd70:	ldr	r9, [pc, #808]	; 200a0 <__assert_fail@plt+0xba48>
   1fd74:	movt	fp, #4
   1fd78:	mov	sl, #0
   1fd7c:	b	1fdd8 <__assert_fail@plt+0xb780>
   1fd80:	mov	r2, fp
   1fd84:	movw	r1, #21324	; 0x534c
   1fd88:	ldr	r0, [sp, #20]
   1fd8c:	movt	r1, #4
   1fd90:	bl	3932c <__assert_fail@plt+0x24cd4>
   1fd94:	cmp	r0, #0
   1fd98:	blt	20058 <__assert_fail@plt+0xba00>
   1fd9c:	mov	r2, #0
   1fda0:	ldr	r0, [r4]
   1fda4:	ldr	r1, [sp, #32]
   1fda8:	mov	r3, r2
   1fdac:	add	r9, r9, #8
   1fdb0:	str	sl, [sp]
   1fdb4:	str	sl, [sp, #4]
   1fdb8:	str	sl, [sp, #8]
   1fdbc:	str	sl, [sp, #12]
   1fdc0:	bl	13ef0 <assuan_transact@plt>
   1fdc4:	ldr	r0, [sp, #32]
   1fdc8:	bl	13c44 <gcry_free@plt>
   1fdcc:	ldr	fp, [r9, #-4]
   1fdd0:	cmp	fp, #0
   1fdd4:	beq	1ff0c <__assert_fail@plt+0xb8b4>
   1fdd8:	ldr	r1, [r9]
   1fddc:	mov	r0, #0
   1fde0:	mov	r2, #5
   1fde4:	bl	13cc8 <dcgettext@plt>
   1fde8:	ldrb	r1, [r0]
   1fdec:	mov	r3, r0
   1fdf0:	cmp	r1, #124	; 0x7c
   1fdf4:	bne	1fd80 <__assert_fail@plt+0xb728>
   1fdf8:	add	r0, r0, #1
   1fdfc:	str	r3, [sp, #16]
   1fe00:	bl	140ac <strchr@plt>
   1fe04:	ldr	r3, [sp, #16]
   1fe08:	cmp	r0, #0
   1fe0c:	addne	r3, r0, #1
   1fe10:	b	1fd80 <__assert_fail@plt+0xb728>
   1fe14:	mov	r0, #2
   1fe18:	bl	2ca10 <__assert_fail@plt+0x183b8>
   1fe1c:	mov	r9, r0
   1fe20:	str	r0, [r8, #44]	; 0x2c
   1fe24:	b	1fad8 <__assert_fail@plt+0xb480>
   1fe28:	bl	13a64 <gpg_strerror@plt>
   1fe2c:	mov	r6, r9
   1fe30:	mov	r1, r0
   1fe34:	movw	r0, #2096	; 0x830
   1fe38:	movt	r0, #4
   1fe3c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1fe40:	b	1fa34 <__assert_fail@plt+0xb3dc>
   1fe44:	bl	14148 <__errno_location@plt>
   1fe48:	mov	r4, r0
   1fe4c:	ldr	r0, [r0]
   1fe50:	bl	13b6c <gpg_err_code_from_errno@plt>
   1fe54:	cmp	r0, #0
   1fe58:	uxthne	r6, r0
   1fe5c:	moveq	r6, r0
   1fe60:	ldr	r0, [r4]
   1fe64:	orrne	r6, r6, #67108864	; 0x4000000
   1fe68:	bl	13fa4 <strerror@plt>
   1fe6c:	mov	r1, r0
   1fe70:	movw	r0, #21108	; 0x5274
   1fe74:	movt	r0, #4
   1fe78:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   1fe7c:	mov	r0, r6
   1fe80:	bl	1f930 <__assert_fail@plt+0xb2d8>
   1fe84:	mov	r6, r0
   1fe88:	b	1fa34 <__assert_fail@plt+0xb3dc>
   1fe8c:	movw	r0, #21080	; 0x5258
   1fe90:	movt	r0, #4
   1fe94:	bl	3f478 <__assert_fail@plt+0x2ae20>
   1fe98:	b	1fab0 <__assert_fail@plt+0xb458>
   1fe9c:	bl	3f434 <__assert_fail@plt+0x2addc>
   1fea0:	cmn	r0, #1
   1fea4:	moveq	sl, #1
   1fea8:	beq	1febc <__assert_fail@plt+0xb864>
   1feac:	bl	3f434 <__assert_fail@plt+0x2addc>
   1feb0:	mov	sl, #2
   1feb4:	mov	r9, #1
   1feb8:	str	r0, [sp, #44]	; 0x2c
   1febc:	movw	r3, #47304	; 0xb8c8
   1fec0:	movt	r3, #5
   1fec4:	ldr	r0, [r3]
   1fec8:	bl	14244 <fileno@plt>
   1fecc:	add	r2, sp, #80	; 0x50
   1fed0:	add	r9, r2, r9, lsl #2
   1fed4:	str	r0, [r9, #-36]	; 0xffffffdc
   1fed8:	b	1fb14 <__assert_fail@plt+0xb4bc>
   1fedc:	movw	r1, #2040	; 0x7f8
   1fee0:	ldr	r0, [r7, #12]
   1fee4:	movt	r1, #4
   1fee8:	bl	39880 <__assert_fail@plt+0x25228>
   1feec:	cmp	r0, #0
   1fef0:	beq	1fafc <__assert_fail@plt+0xb4a4>
   1fef4:	movw	r3, #21144	; 0x5298
   1fef8:	str	r0, [sp, #64]	; 0x40
   1fefc:	movt	r3, #4
   1ff00:	str	sl, [sp, #68]	; 0x44
   1ff04:	str	r3, [sp, #60]	; 0x3c
   1ff08:	b	1fb04 <__assert_fail@plt+0xb4ac>
   1ff0c:	ldr	r8, [r8, #60]	; 0x3c
   1ff10:	cmp	r8, #0
   1ff14:	beq	20080 <__assert_fail@plt+0xba28>
   1ff18:	movw	r1, #5004	; 0x138c
   1ff1c:	mov	r0, r8
   1ff20:	movt	r1, #4
   1ff24:	bl	13a28 <strcmp@plt>
   1ff28:	cmp	r0, #0
   1ff2c:	beq	1ff7c <__assert_fail@plt+0xb924>
   1ff30:	mov	r2, r8
   1ff34:	movw	r1, #21348	; 0x5364
   1ff38:	ldr	r0, [sp, #20]
   1ff3c:	movt	r1, #4
   1ff40:	bl	3932c <__assert_fail@plt+0x24cd4>
   1ff44:	cmp	r0, #0
   1ff48:	blt	1ff7c <__assert_fail@plt+0xb924>
   1ff4c:	mov	r1, #0
   1ff50:	ldr	r0, [r4]
   1ff54:	mov	r2, r1
   1ff58:	str	r1, [sp]
   1ff5c:	str	r1, [sp, #4]
   1ff60:	mov	r3, r1
   1ff64:	str	r1, [sp, #8]
   1ff68:	str	r1, [sp, #12]
   1ff6c:	ldr	r1, [sp, #32]
   1ff70:	bl	13ef0 <assuan_transact@plt>
   1ff74:	ldr	r0, [sp, #32]
   1ff78:	bl	13c44 <gcry_free@plt>
   1ff7c:	ldr	r0, [r4]
   1ff80:	mov	ip, #0
   1ff84:	ldr	r3, [sp, #20]
   1ff88:	movw	r1, #2168	; 0x878
   1ff8c:	str	ip, [sp]
   1ff90:	movt	r1, #4
   1ff94:	str	ip, [sp, #4]
   1ff98:	movw	r2, #164	; 0xa4
   1ff9c:	str	ip, [sp, #8]
   1ffa0:	movt	r2, #2
   1ffa4:	str	ip, [sp, #12]
   1ffa8:	bl	13ef0 <assuan_transact@plt>
   1ffac:	cmp	r0, #0
   1ffb0:	bne	20070 <__assert_fail@plt+0xba18>
   1ffb4:	ldr	r1, [sp, #32]
   1ffb8:	cmn	r1, #1
   1ffbc:	beq	20090 <__assert_fail@plt+0xba38>
   1ffc0:	mov	r0, r7
   1ffc4:	bl	1b6fc <__assert_fail@plt+0x70a4>
   1ffc8:	uxth	r0, r0
   1ffcc:	cmp	r0, #99	; 0x63
   1ffd0:	bne	1fa30 <__assert_fail@plt+0xb3d8>
   1ffd4:	movt	r0, #1024	; 0x400
   1ffd8:	bl	1f930 <__assert_fail@plt+0xb2d8>
   1ffdc:	mov	r6, r0
   1ffe0:	b	1fa34 <__assert_fail@plt+0xb3dc>
   1ffe4:	movw	r0, #21200	; 0x52d0
   1ffe8:	movt	r0, #4
   1ffec:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   1fff0:	ldr	r0, [r9]
   1fff4:	b	1fb8c <__assert_fail@plt+0xb534>
   1fff8:	bl	13a64 <gpg_strerror@plt>
   1fffc:	mov	r1, r0
   20000:	movw	r0, #21156	; 0x52a4
   20004:	movt	r0, #4
   20008:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2000c:	ldr	r0, [sp, #28]
   20010:	bl	14388 <assuan_release@plt>
   20014:	mov	r0, #85	; 0x55
   20018:	movt	r0, #1024	; 0x400
   2001c:	bl	1f930 <__assert_fail@plt+0xb2d8>
   20020:	mov	r6, r0
   20024:	b	1fa34 <__assert_fail@plt+0xb3dc>
   20028:	mov	r0, r9
   2002c:	bl	1f930 <__assert_fail@plt+0xb2d8>
   20030:	mov	r6, r0
   20034:	b	1fa34 <__assert_fail@plt+0xb3dc>
   20038:	bl	14580 <gpg_err_code_from_syserror@plt>
   2003c:	cmp	r0, #0
   20040:	uxthne	r0, r0
   20044:	orrne	r6, r0, #67108864	; 0x4000000
   20048:	mov	r0, r6
   2004c:	bl	1f930 <__assert_fail@plt+0xb2d8>
   20050:	mov	r6, r0
   20054:	b	1fa34 <__assert_fail@plt+0xb3dc>
   20058:	bl	14580 <gpg_err_code_from_syserror@plt>
   2005c:	cmp	r0, #0
   20060:	uxthne	r0, r0
   20064:	orrne	r0, r0, #67108864	; 0x4000000
   20068:	b	1ffd8 <__assert_fail@plt+0xb980>
   2006c:	bl	13cec <__stack_chk_fail@plt>
   20070:	movw	r0, #21372	; 0x537c
   20074:	movt	r0, #4
   20078:	bl	3f478 <__assert_fail@plt+0x2ae20>
   2007c:	b	1fa34 <__assert_fail@plt+0xb3dc>
   20080:	bl	1821c <__assert_fail@plt+0x3bc4>
   20084:	subs	r8, r0, #0
   20088:	bne	1ff30 <__assert_fail@plt+0xb8d8>
   2008c:	b	1ff7c <__assert_fail@plt+0xb924>
   20090:	movw	r0, #21416	; 0x53a8
   20094:	movt	r0, #4
   20098:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2009c:	b	1fa34 <__assert_fail@plt+0xb3dc>
   200a0:			; <UNDEFINED> instruction: 0x000451b4
   200a4:	push	{r4, r5, r6, lr}
   200a8:	movw	r4, #47296	; 0xb8c0
   200ac:	movt	r4, #5
   200b0:	sub	sp, sp, #56	; 0x38
   200b4:	cmp	r2, #49	; 0x31
   200b8:	mov	r5, r2
   200bc:	ldr	r3, [r4]
   200c0:	mov	r6, r0
   200c4:	str	r3, [sp, #52]	; 0x34
   200c8:	bhi	200f0 <__assert_fail@plt+0xba98>
   200cc:	cmp	r2, #0
   200d0:	bne	200f4 <__assert_fail@plt+0xba9c>
   200d4:	ldr	r2, [sp, #52]	; 0x34
   200d8:	mov	r0, #0
   200dc:	ldr	r3, [r4]
   200e0:	cmp	r2, r3
   200e4:	bne	2012c <__assert_fail@plt+0xbad4>
   200e8:	add	sp, sp, #56	; 0x38
   200ec:	pop	{r4, r5, r6, pc}
   200f0:	mov	r5, #49	; 0x31
   200f4:	mov	r2, r5
   200f8:	mov	r3, #50	; 0x32
   200fc:	mov	r0, sp
   20100:	bl	13ce0 <__strncpy_chk@plt>
   20104:	add	r3, sp, #56	; 0x38
   20108:	add	r5, r3, r5
   2010c:	mov	r3, #0
   20110:	mov	r0, sp
   20114:	mov	r1, r3
   20118:	mov	r2, #10
   2011c:	strb	r3, [r5, #-56]	; 0xffffffc8
   20120:	bl	1407c <strtoul@plt>
   20124:	str	r0, [r6]
   20128:	b	200d4 <__assert_fail@plt+0xba7c>
   2012c:	bl	13cec <__stack_chk_fail@plt>
   20130:	push	{r4, r5, r6, r7, r8, lr}
   20134:	movw	r7, #47296	; 0xb8c0
   20138:	movt	r7, #5
   2013c:	sub	sp, sp, #152	; 0x98
   20140:	mov	r4, #0
   20144:	mov	r6, r0
   20148:	ldr	r3, [r7]
   2014c:	add	r0, sp, #12
   20150:	mov	r8, r1
   20154:	str	r3, [sp, #148]	; 0x94
   20158:	bl	14358 <sigemptyset@plt>
   2015c:	add	r1, sp, #8
   20160:	mov	r2, r4
   20164:	mov	r0, #2
   20168:	str	r4, [sp, #8]
   2016c:	str	r4, [sp, #140]	; 0x8c
   20170:	bl	13df4 <sigaction@plt>
   20174:	add	r1, sp, #12
   20178:	mov	r2, r4
   2017c:	mov	r0, #2
   20180:	bl	13b18 <sigprocmask@plt>
   20184:	cmp	r8, r4
   20188:	beq	201a4 <__assert_fail@plt+0xbb4c>
   2018c:	ldr	r2, [sp, #148]	; 0x94
   20190:	ldr	r3, [r7]
   20194:	cmp	r2, r3
   20198:	bne	20224 <__assert_fail@plt+0xbbcc>
   2019c:	add	sp, sp, #152	; 0x98
   201a0:	pop	{r4, r5, r6, r7, r8, pc}
   201a4:	add	r5, sp, #152	; 0x98
   201a8:	mov	r0, #25
   201ac:	str	r8, [r5, #-152]!	; 0xffffff68
   201b0:	bl	144c0 <gcry_control@plt>
   201b4:	mov	r0, sp
   201b8:	add	r1, sp, #4
   201bc:	bl	3965c <__assert_fail@plt+0x25004>
   201c0:	subs	r4, r0, #0
   201c4:	beq	2018c <__assert_fail@plt+0xbb34>
   201c8:	ldr	r3, [sp, #4]
   201cc:	cmp	r3, #0
   201d0:	beq	20200 <__assert_fail@plt+0xbba8>
   201d4:	movw	r1, #2064	; 0x810
   201d8:	movt	r1, #4
   201dc:	bl	13a28 <strcmp@plt>
   201e0:	cmp	r0, #0
   201e4:	beq	20200 <__assert_fail@plt+0xbba8>
   201e8:	movw	r1, #2076	; 0x81c
   201ec:	mov	r0, r4
   201f0:	movt	r1, #4
   201f4:	bl	13a28 <strcmp@plt>
   201f8:	cmp	r0, #0
   201fc:	bne	201b4 <__assert_fail@plt+0xbb5c>
   20200:	mov	r1, r4
   20204:	ldr	r0, [r6, #12]
   20208:	bl	39880 <__assert_fail@plt+0x25228>
   2020c:	subs	r1, r0, #0
   20210:	beq	201b4 <__assert_fail@plt+0xbb5c>
   20214:	mov	r0, r4
   20218:	mov	r2, #1
   2021c:	bl	140c4 <setenv@plt>
   20220:	b	201b4 <__assert_fail@plt+0xbb5c>
   20224:	bl	13cec <__stack_chk_fail@plt>
   20228:	push	{r4, r5, r6, r7, lr}
   2022c:	movw	r5, #47296	; 0xb8c0
   20230:	movt	r5, #5
   20234:	sub	sp, sp, #36	; 0x24
   20238:	mov	r7, r1
   2023c:	mov	r6, r0
   20240:	ldr	r3, [r5]
   20244:	mov	r0, r1
   20248:	mov	r2, #7
   2024c:	movw	r1, #21448	; 0x53c8
   20250:	movt	r1, #4
   20254:	str	r3, [sp, #28]
   20258:	bl	145bc <strncmp@plt>
   2025c:	cmp	r0, #0
   20260:	bne	20368 <__assert_fail@plt+0xbd10>
   20264:	ldrb	r3, [r7, #7]
   20268:	tst	r3, #223	; 0xdf
   2026c:	bne	20368 <__assert_fail@plt+0xbd10>
   20270:	cmp	r3, #32
   20274:	add	r4, r7, #7
   20278:	bne	20294 <__assert_fail@plt+0xbc3c>
   2027c:	add	r1, r7, #8
   20280:	mov	r4, r1
   20284:	add	r1, r1, #1
   20288:	ldrb	r3, [r4]
   2028c:	cmp	r3, #32
   20290:	beq	20280 <__assert_fail@plt+0xbc28>
   20294:	mov	r0, r4
   20298:	bl	14094 <strlen@plt>
   2029c:	add	r0, r0, #1
   202a0:	bl	13f44 <gcry_malloc_secure@plt>
   202a4:	subs	r7, r0, #0
   202a8:	beq	20484 <__assert_fail@plt+0xbe2c>
   202ac:	add	r2, r7, #1
   202b0:	mov	lr, #32
   202b4:	b	202d4 <__assert_fail@plt+0xbc7c>
   202b8:	cmp	r3, #43	; 0x2b
   202bc:	strbeq	lr, [r2, #-1]
   202c0:	addeq	r4, r4, #1
   202c4:	beq	202d0 <__assert_fail@plt+0xbc78>
   202c8:	add	r4, r4, #1
   202cc:	strb	r3, [r2, #-1]
   202d0:	add	r2, r2, #1
   202d4:	ldrb	r3, [r4]
   202d8:	sub	ip, r2, #1
   202dc:	tst	r3, #223	; 0xdf
   202e0:	beq	20398 <__assert_fail@plt+0xbd40>
   202e4:	cmp	r3, #9
   202e8:	beq	20398 <__assert_fail@plt+0xbd40>
   202ec:	cmp	r3, #37	; 0x25
   202f0:	bne	202b8 <__assert_fail@plt+0xbc60>
   202f4:	ldrb	r1, [r4, #1]
   202f8:	cmp	r1, #0
   202fc:	beq	202c8 <__assert_fail@plt+0xbc70>
   20300:	ldrb	r0, [r4, #2]
   20304:	cmp	r0, #0
   20308:	beq	202c8 <__assert_fail@plt+0xbc70>
   2030c:	cmp	r1, #57	; 0x39
   20310:	lslls	r1, r1, #4
   20314:	andls	r1, r1, #240	; 0xf0
   20318:	bls	20330 <__assert_fail@plt+0xbcd8>
   2031c:	cmp	r1, #70	; 0x46
   20320:	subls	r1, r1, #55	; 0x37
   20324:	subhi	r1, r1, #87	; 0x57
   20328:	lsl	r1, r1, #4
   2032c:	uxtb	r1, r1
   20330:	cmp	r0, #57	; 0x39
   20334:	subls	r3, r0, #48	; 0x30
   20338:	uxtbls	r3, r3
   2033c:	bls	20350 <__assert_fail@plt+0xbcf8>
   20340:	cmp	r0, #70	; 0x46
   20344:	subls	r3, r0, #55	; 0x37
   20348:	subhi	r3, r0, #87	; 0x57
   2034c:	uxtb	r3, r3
   20350:	add	r3, r3, r1
   20354:	add	r4, r4, #3
   20358:	ands	r3, r3, #255	; 0xff
   2035c:	moveq	r3, #255	; 0xff
   20360:	strb	r3, [r2, #-1]
   20364:	b	202d0 <__assert_fail@plt+0xbc78>
   20368:	mov	r1, r7
   2036c:	movw	r0, #21456	; 0x53d0
   20370:	movt	r0, #4
   20374:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   20378:	movw	r0, #281	; 0x119
   2037c:	movt	r0, #1024	; 0x400
   20380:	ldr	r2, [sp, #28]
   20384:	ldr	r3, [r5]
   20388:	cmp	r2, r3
   2038c:	bne	20498 <__assert_fail@plt+0xbe40>
   20390:	add	sp, sp, #36	; 0x24
   20394:	pop	{r4, r5, r6, r7, pc}
   20398:	movw	r3, #48116	; 0xbbf4
   2039c:	movt	r3, #5
   203a0:	movw	r2, #43691	; 0xaaab
   203a4:	movt	r2, #43690	; 0xaaaa
   203a8:	ldr	r3, [r3, #84]	; 0x54
   203ac:	mov	r0, #0
   203b0:	strb	r0, [ip]
   203b4:	umull	r1, r2, r2, r3
   203b8:	add	r1, r3, r2, lsr #1
   203bc:	cmp	r1, r0
   203c0:	ble	2047c <__assert_fail@plt+0xbe24>
   203c4:	ldrb	r3, [r7]
   203c8:	cmp	r3, #0
   203cc:	moveq	r0, r3
   203d0:	beq	20464 <__assert_fail@plt+0xbe0c>
   203d4:	mov	r2, r7
   203d8:	cmp	r3, #9
   203dc:	cmpne	r3, #32
   203e0:	ldrb	r3, [r2, #1]!
   203e4:	addne	r0, r0, #1
   203e8:	cmp	r3, #0
   203ec:	bne	203d8 <__assert_fail@plt+0xbd80>
   203f0:	cmp	r1, r0
   203f4:	movlt	r4, #100	; 0x64
   203f8:	bge	20464 <__assert_fail@plt+0xbe0c>
   203fc:	mov	r1, r7
   20400:	mov	r2, #1
   20404:	mov	r0, #0
   20408:	bl	24244 <__assert_fail@plt+0xfbec>
   2040c:	mov	r1, #20
   20410:	mov	r3, r1
   20414:	movw	r2, #29480	; 0x7328
   20418:	movt	r2, #4
   2041c:	str	r2, [sp]
   20420:	mov	r2, #1
   20424:	cmp	r0, #0
   20428:	add	r0, sp, #8
   2042c:	rsbne	r4, r4, #0
   20430:	str	r4, [sp, #4]
   20434:	bl	1464c <__snprintf_chk@plt>
   20438:	add	r0, sp, #8
   2043c:	bl	14094 <strlen@plt>
   20440:	add	r1, sp, #8
   20444:	mov	r2, r0
   20448:	mov	r0, r6
   2044c:	bl	1413c <assuan_send_data@plt>
   20450:	mov	r4, r0
   20454:	mov	r0, r7
   20458:	bl	13c44 <gcry_free@plt>
   2045c:	mov	r0, r4
   20460:	b	20380 <__assert_fail@plt+0xbd28>
   20464:	add	r0, r0, r0, lsl #2
   20468:	lsl	r0, r0, #1
   2046c:	bl	3f934 <__assert_fail@plt+0x2b2dc>
   20470:	add	r0, r0, r0, lsl #2
   20474:	lsl	r4, r0, #1
   20478:	b	203fc <__assert_fail@plt+0xbda4>
   2047c:	mov	r4, r0
   20480:	b	203fc <__assert_fail@plt+0xbda4>
   20484:	bl	14580 <gpg_err_code_from_syserror@plt>
   20488:	cmp	r0, #0
   2048c:	uxthne	r0, r0
   20490:	orrne	r0, r0, #67108864	; 0x4000000
   20494:	b	20380 <__assert_fail@plt+0xbd28>
   20498:	bl	13cec <__stack_chk_fail@plt>
   2049c:	push	{r4, r5, r6, r7, r8, lr}
   204a0:	movw	r5, #47296	; 0xb8c0
   204a4:	movt	r5, #5
   204a8:	sub	sp, sp, #1024	; 0x400
   204ac:	mov	r2, #5
   204b0:	movw	r1, #21600	; 0x5460
   204b4:	ldr	r3, [r5]
   204b8:	movt	r1, #4
   204bc:	mov	r0, #0
   204c0:	mov	r4, #0
   204c4:	movw	r6, #47532	; 0xb9ac
   204c8:	movt	r6, #5
   204cc:	str	r3, [sp, #1020]	; 0x3fc
   204d0:	bl	13cc8 <dcgettext@plt>
   204d4:	movw	r1, #21612	; 0x546c
   204d8:	movt	r1, #4
   204dc:	bl	3bf9c <__assert_fail@plt+0x27944>
   204e0:	movw	r1, #1001	; 0x3e9
   204e4:	mov	r2, #1
   204e8:	movw	ip, #18888	; 0x49c8
   204ec:	movw	r3, #21620	; 0x5474
   204f0:	movt	ip, #4
   204f4:	movt	r3, #4
   204f8:	str	r3, [sp]
   204fc:	movw	r3, #1002	; 0x3ea
   20500:	mov	r7, r0
   20504:	cmp	r7, r4
   20508:	add	r0, sp, #16
   2050c:	movne	ip, r7
   20510:	str	ip, [sp, #4]
   20514:	bl	1464c <__snprintf_chk@plt>
   20518:	mov	r0, r7
   2051c:	strb	r4, [sp, #1017]	; 0x3f9
   20520:	bl	13c44 <gcry_free@plt>
   20524:	ldr	r0, [r6]
   20528:	mov	r2, r4
   2052c:	str	r4, [sp]
   20530:	mov	r3, r4
   20534:	str	r4, [sp, #4]
   20538:	add	r1, sp, #16
   2053c:	str	r4, [sp, #8]
   20540:	str	r4, [sp, #12]
   20544:	bl	13ef0 <assuan_transact@plt>
   20548:	cmp	r0, #103	; 0x67
   2054c:	beq	20568 <__assert_fail@plt+0xbf10>
   20550:	uxth	r2, r0
   20554:	movw	r3, #275	; 0x113
   20558:	cmp	r2, r3
   2055c:	beq	20568 <__assert_fail@plt+0xbf10>
   20560:	cmp	r0, r4
   20564:	bne	20624 <__assert_fail@plt+0xbfcc>
   20568:	movw	r0, #21640	; 0x5488
   2056c:	mov	r1, #0
   20570:	movt	r0, #4
   20574:	bl	3a584 <__assert_fail@plt+0x25f2c>
   20578:	subs	r8, r0, #0
   2057c:	movne	r4, r8
   20580:	beq	2063c <__assert_fail@plt+0xbfe4>
   20584:	mov	r0, r4
   20588:	movw	r1, #21612	; 0x546c
   2058c:	movt	r1, #4
   20590:	mov	r4, #0
   20594:	bl	3bf9c <__assert_fail@plt+0x27944>
   20598:	mov	r7, r0
   2059c:	mov	r0, r8
   205a0:	bl	13c44 <gcry_free@plt>
   205a4:	cmp	r7, r4
   205a8:	movw	r1, #1001	; 0x3e9
   205ac:	movw	r2, #18888	; 0x49c8
   205b0:	movw	r3, #21668	; 0x54a4
   205b4:	movt	r2, #4
   205b8:	movt	r3, #4
   205bc:	movne	r2, r7
   205c0:	str	r3, [sp]
   205c4:	add	r0, sp, #16
   205c8:	movw	r3, #1002	; 0x3ea
   205cc:	str	r2, [sp, #4]
   205d0:	mov	r2, #1
   205d4:	bl	1464c <__snprintf_chk@plt>
   205d8:	mov	r0, r7
   205dc:	strb	r4, [sp, #1017]	; 0x3f9
   205e0:	bl	13c44 <gcry_free@plt>
   205e4:	ldr	r0, [r6]
   205e8:	add	r1, sp, #16
   205ec:	str	r4, [sp]
   205f0:	mov	r2, r4
   205f4:	str	r4, [sp, #4]
   205f8:	mov	r3, r4
   205fc:	str	r4, [sp, #8]
   20600:	str	r4, [sp, #12]
   20604:	bl	13ef0 <assuan_transact@plt>
   20608:	cmp	r0, #103	; 0x67
   2060c:	moveq	r0, r4
   20610:	beq	20624 <__assert_fail@plt+0xbfcc>
   20614:	uxth	r4, r0
   20618:	movw	r3, #275	; 0x113
   2061c:	cmp	r4, r3
   20620:	moveq	r0, #0
   20624:	ldr	r2, [sp, #1020]	; 0x3fc
   20628:	ldr	r3, [r5]
   2062c:	cmp	r2, r3
   20630:	bne	20674 <__assert_fail@plt+0xc01c>
   20634:	add	sp, sp, #1024	; 0x400
   20638:	pop	{r4, r5, r6, r7, r8, pc}
   2063c:	mov	r2, #5
   20640:	movw	r1, #21640	; 0x5488
   20644:	movt	r1, #4
   20648:	bl	13cc8 <dcgettext@plt>
   2064c:	mov	r4, r0
   20650:	mov	r1, r0
   20654:	movw	r0, #21640	; 0x5488
   20658:	movt	r0, #4
   2065c:	bl	13a28 <strcmp@plt>
   20660:	movw	r3, #21496	; 0x53f8
   20664:	movt	r3, #4
   20668:	cmp	r0, #0
   2066c:	moveq	r4, r3
   20670:	b	20584 <__assert_fail@plt+0xbf2c>
   20674:	bl	13cec <__stack_chk_fail@plt>
   20678:	subs	r3, r1, #0
   2067c:	push	{r4, r5, r6, lr}
   20680:	mov	r4, r0
   20684:	mov	r6, r2
   20688:	beq	206d4 <__assert_fail@plt+0xc07c>
   2068c:	ldr	r5, [r0]
   20690:	cmp	r5, #0
   20694:	beq	206a4 <__assert_fail@plt+0xc04c>
   20698:	movw	r0, #273	; 0x111
   2069c:	movt	r0, #1024	; 0x400
   206a0:	pop	{r4, r5, r6, pc}
   206a4:	ldr	r3, [r0, #4]
   206a8:	cmp	r3, r2
   206ac:	bls	20698 <__assert_fail@plt+0xc040>
   206b0:	ldr	r0, [r0, #8]
   206b4:	bl	13ba8 <memcpy@plt>
   206b8:	ldr	r3, [r4, #8]
   206bc:	mov	r0, r5
   206c0:	strb	r5, [r3, r6]
   206c4:	ldr	r3, [r4]
   206c8:	add	r3, r3, #1
   206cc:	str	r3, [r4]
   206d0:	pop	{r4, r5, r6, pc}
   206d4:	mov	r0, r3
   206d8:	pop	{r4, r5, r6, pc}
   206dc:	push	{r4, lr}
   206e0:	movw	r4, #47532	; 0xb9ac
   206e4:	movt	r4, #5
   206e8:	ldr	r3, [r4, #32]
   206ec:	cmp	r3, #0
   206f0:	popne	{r4, pc}
   206f4:	add	r0, r4, #8
   206f8:	bl	13980 <pth_mutex_init@plt>
   206fc:	cmp	r0, #0
   20700:	movne	r3, #1
   20704:	strne	r3, [r4, #32]
   20708:	pop	{r4, pc}
   2070c:	push	{r4, r5, r6, lr}
   20710:	movw	r4, #47532	; 0xb9ac
   20714:	movt	r4, #5
   20718:	movw	r0, #21688	; 0x54b8
   2071c:	movt	r0, #4
   20720:	bl	3f478 <__assert_fail@plt+0x2ae20>
   20724:	ldr	r3, [r4, #16]
   20728:	tst	r3, #1
   2072c:	beq	20790 <__assert_fail@plt+0xc138>
   20730:	tst	r3, #2
   20734:	beq	20780 <__assert_fail@plt+0xc128>
   20738:	movw	r0, #21752	; 0x54f8
   2073c:	ldr	r1, [r4, #20]
   20740:	movt	r0, #4
   20744:	ldr	r2, [r4, #24]
   20748:	bl	3f60c <__assert_fail@plt+0x2afb4>
   2074c:	movw	r0, #33896	; 0x8468
   20750:	movt	r0, #4
   20754:	bl	3f60c <__assert_fail@plt+0x2afb4>
   20758:	ldr	r5, [r4]
   2075c:	mov	r0, r5
   20760:	bl	14544 <assuan_get_pid@plt>
   20764:	mov	r1, r5
   20768:	ldr	r3, [r4, #36]	; 0x24
   2076c:	pop	{r4, r5, r6, lr}
   20770:	mov	r2, r0
   20774:	movw	r0, #21780	; 0x5514
   20778:	movt	r0, #4
   2077c:	b	3f478 <__assert_fail@plt+0x2ae20>
   20780:	movw	r0, #21740	; 0x54ec
   20784:	movt	r0, #4
   20788:	bl	3f60c <__assert_fail@plt+0x2afb4>
   2078c:	b	2074c <__assert_fail@plt+0xc0f4>
   20790:	movw	r0, #21724	; 0x54dc
   20794:	movt	r0, #4
   20798:	bl	3f60c <__assert_fail@plt+0x2afb4>
   2079c:	b	2074c <__assert_fail@plt+0xc0f4>
   207a0:	cmp	r1, #0
   207a4:	push	{r4, lr}
   207a8:	sub	sp, sp, #8
   207ac:	ble	20870 <__assert_fail@plt+0xc218>
   207b0:	mov	r2, #0
   207b4:	mov	r0, sp
   207b8:	bl	14520 <pth_timeout@plt>
   207bc:	ldm	sp, {r1, r2}
   207c0:	mov	r0, #16
   207c4:	bl	13968 <pth_event@plt>
   207c8:	mov	r1, #0
   207cc:	mov	r4, r0
   207d0:	mov	r2, r0
   207d4:	ldr	r0, [pc, #192]	; 2089c <__assert_fail@plt+0xc244>
   207d8:	bl	14364 <pth_mutex_acquire@plt>
   207dc:	cmp	r0, #0
   207e0:	mov	r0, r4
   207e4:	beq	20820 <__assert_fail@plt+0xc1c8>
   207e8:	mov	r1, #0
   207ec:	bl	13a10 <pth_event_free@plt>
   207f0:	ldr	r0, [pc, #164]	; 2089c <__assert_fail@plt+0xc244>
   207f4:	bl	14220 <pth_mutex_release@plt>
   207f8:	subs	r4, r0, #0
   207fc:	movne	r4, #0
   20800:	bne	20814 <__assert_fail@plt+0xc1bc>
   20804:	movw	r0, #21840	; 0x5550
   20808:	movw	r1, #515	; 0x203
   2080c:	movt	r0, #4
   20810:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   20814:	mov	r0, r4
   20818:	add	sp, sp, #8
   2081c:	pop	{r4, pc}
   20820:	bl	14100 <pth_event_status@plt>
   20824:	cmp	r0, #1
   20828:	moveq	r3, #62	; 0x3e
   2082c:	movteq	r3, #1024	; 0x400
   20830:	beq	20854 <__assert_fail@plt+0xc1fc>
   20834:	mov	r0, r4
   20838:	bl	14100 <pth_event_status@plt>
   2083c:	mov	r2, #62	; 0x3e
   20840:	movt	r2, #1024	; 0x400
   20844:	mov	r3, #63	; 0x3f
   20848:	movt	r3, #1024	; 0x400
   2084c:	cmp	r0, #2
   20850:	moveq	r3, r2
   20854:	mov	r0, r4
   20858:	mov	r1, #0
   2085c:	mov	r4, r3
   20860:	bl	13a10 <pth_event_free@plt>
   20864:	mov	r0, r4
   20868:	add	sp, sp, #8
   2086c:	pop	{r4, pc}
   20870:	ldr	r0, [pc, #36]	; 2089c <__assert_fail@plt+0xc244>
   20874:	mov	r1, #1
   20878:	mov	r2, #0
   2087c:	bl	14364 <pth_mutex_acquire@plt>
   20880:	cmp	r0, #0
   20884:	moveq	r4, #173	; 0xad
   20888:	movteq	r4, #1024	; 0x400
   2088c:	bne	207f0 <__assert_fail@plt+0xc198>
   20890:	mov	r0, r4
   20894:	add	sp, sp, #8
   20898:	pop	{r4, pc}
   2089c:			; <UNDEFINED> instruction: 0x0005b9b4
   208a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   208a4:	movw	r6, #48116	; 0xbbf4
   208a8:	movt	r6, #5
   208ac:	movw	r5, #47296	; 0xb8c0
   208b0:	movt	r5, #5
   208b4:	sub	sp, sp, #1040	; 0x410
   208b8:	ldr	ip, [r6, #16]
   208bc:	mov	r7, r0
   208c0:	ldr	r0, [r5]
   208c4:	sub	sp, sp, #12
   208c8:	cmp	ip, #0
   208cc:	mov	r9, r1
   208d0:	mov	r8, r2
   208d4:	mov	fp, r3
   208d8:	str	r0, [sp, #1044]	; 0x414
   208dc:	movne	r0, #0
   208e0:	ldr	r4, [sp, #1088]	; 0x440
   208e4:	bne	20904 <__assert_fail@plt+0xc2ac>
   208e8:	cmp	r4, #0
   208ec:	beq	208fc <__assert_fail@plt+0xc2a4>
   208f0:	ldr	r3, [r4, #32]
   208f4:	cmp	r3, #0
   208f8:	bne	20920 <__assert_fail@plt+0xc2c8>
   208fc:	mov	r0, #55	; 0x37
   20900:	movt	r0, #1024	; 0x400
   20904:	ldr	r2, [sp, #1044]	; 0x414
   20908:	ldr	r3, [r5]
   2090c:	cmp	r2, r3
   20910:	bne	20e48 <__assert_fail@plt+0xc7f0>
   20914:	add	sp, sp, #1040	; 0x410
   20918:	add	sp, sp, #12
   2091c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20920:	cmp	r1, #0
   20924:	beq	20cf0 <__assert_fail@plt+0xc698>
   20928:	cmp	r2, #0
   2092c:	beq	20d2c <__assert_fail@plt+0xc6d4>
   20930:	movw	r1, #22220	; 0x56cc
   20934:	mov	r0, r8
   20938:	movt	r1, #4
   2093c:	bl	13998 <strstr@plt>
   20940:	adds	sl, r0, #0
   20944:	movne	sl, #1
   20948:	mov	r0, r7
   2094c:	bl	1f988 <__assert_fail@plt+0xb330>
   20950:	subs	ip, r0, #0
   20954:	movne	r0, ip
   20958:	bne	20904 <__assert_fail@plt+0xc2ac>
   2095c:	movw	r1, #1001	; 0x3e9
   20960:	mov	r2, #1
   20964:	str	r9, [sp, #4]
   20968:	movw	r3, #22060	; 0x562c
   2096c:	add	r0, sp, #40	; 0x28
   20970:	movt	r3, #4
   20974:	str	r3, [sp]
   20978:	movw	r3, #1002	; 0x3ea
   2097c:	str	ip, [sp, #20]
   20980:	bl	1464c <__snprintf_chk@plt>
   20984:	ldr	ip, [sp, #20]
   20988:	movw	r7, #47532	; 0xb9ac
   2098c:	movt	r7, #5
   20990:	add	r1, sp, #40	; 0x28
   20994:	ldr	r0, [r7]
   20998:	mov	r2, ip
   2099c:	str	ip, [sp]
   209a0:	mov	r3, ip
   209a4:	str	ip, [sp, #4]
   209a8:	str	ip, [sp, #8]
   209ac:	str	ip, [sp, #12]
   209b0:	strb	ip, [sp, #1041]	; 0x411
   209b4:	bl	13ef0 <assuan_transact@plt>
   209b8:	cmp	r0, #0
   209bc:	bne	20bd4 <__assert_fail@plt+0xc57c>
   209c0:	cmp	r8, #0
   209c4:	beq	20de4 <__assert_fail@plt+0xc78c>
   209c8:	movw	r1, #1001	; 0x3e9
   209cc:	mov	r2, #1
   209d0:	str	r8, [sp, #4]
   209d4:	movw	r3, #22072	; 0x5638
   209d8:	add	r0, sp, #40	; 0x28
   209dc:	movt	r3, #4
   209e0:	str	r3, [sp]
   209e4:	movw	r3, #1002	; 0x3ea
   209e8:	bl	1464c <__snprintf_chk@plt>
   209ec:	mov	ip, #0
   209f0:	ldr	r0, [r7]
   209f4:	add	r1, sp, #40	; 0x28
   209f8:	mov	r2, ip
   209fc:	str	ip, [sp]
   20a00:	str	ip, [sp, #4]
   20a04:	mov	r3, ip
   20a08:	str	ip, [sp, #8]
   20a0c:	str	ip, [sp, #12]
   20a10:	strb	ip, [sp, #1041]	; 0x411
   20a14:	bl	13ef0 <assuan_transact@plt>
   20a18:	cmp	r0, #0
   20a1c:	bne	20bd4 <__assert_fail@plt+0xc57c>
   20a20:	ldr	r3, [r4, #16]
   20a24:	cmp	r3, #0
   20a28:	beq	20a38 <__assert_fail@plt+0xc3e0>
   20a2c:	ldr	r3, [r6, #84]	; 0x54
   20a30:	cmp	r3, #0
   20a34:	bne	20e1c <__assert_fail@plt+0xc7c4>
   20a38:	cmp	fp, #0
   20a3c:	beq	20a98 <__assert_fail@plt+0xc440>
   20a40:	movw	r1, #1001	; 0x3e9
   20a44:	mov	r2, #1
   20a48:	str	fp, [sp, #4]
   20a4c:	movw	r3, #22088	; 0x5648
   20a50:	add	r0, sp, #40	; 0x28
   20a54:	movt	r3, #4
   20a58:	str	r3, [sp]
   20a5c:	movw	r3, #1002	; 0x3ea
   20a60:	bl	1464c <__snprintf_chk@plt>
   20a64:	mov	ip, #0
   20a68:	ldr	r0, [r7]
   20a6c:	add	r1, sp, #40	; 0x28
   20a70:	mov	r2, ip
   20a74:	str	ip, [sp]
   20a78:	str	ip, [sp, #4]
   20a7c:	mov	r3, ip
   20a80:	str	ip, [sp, #8]
   20a84:	str	ip, [sp, #12]
   20a88:	strb	ip, [sp, #1041]	; 0x411
   20a8c:	bl	13ef0 <assuan_transact@plt>
   20a90:	cmp	r0, #0
   20a94:	bne	20bd4 <__assert_fail@plt+0xc57c>
   20a98:	ldr	r2, [r4, #12]
   20a9c:	ldr	r3, [r4, #8]
   20aa0:	cmp	r2, r3
   20aa4:	bge	20dc0 <__assert_fail@plt+0xc768>
   20aa8:	ldr	r2, [r4, #32]
   20aac:	movw	r9, #552	; 0x228
   20ab0:	movt	r9, #2
   20ab4:	mov	r8, r4
   20ab8:	mov	r3, #0
   20abc:	strb	r3, [r8, #36]!	; 0x24
   20ac0:	str	r2, [sp, #32]
   20ac4:	str	r8, [sp, #36]	; 0x24
   20ac8:	str	r3, [sp, #28]
   20acc:	mov	r1, #2
   20ad0:	ldr	r0, [r7]
   20ad4:	bl	13ec0 <assuan_get_flag@plt>
   20ad8:	mov	fp, r0
   20adc:	ldr	r0, [r7]
   20ae0:	bl	13dac <assuan_begin_confidential@plt>
   20ae4:	ldr	r0, [r7]
   20ae8:	mov	r3, #0
   20aec:	str	r9, [sp]
   20af0:	str	r3, [sp, #12]
   20af4:	movw	r1, #22128	; 0x5670
   20af8:	stmib	sp, {r0, r3}
   20afc:	movt	r1, #4
   20b00:	add	r3, sp, #28
   20b04:	movw	r2, #1656	; 0x678
   20b08:	movt	r2, #2
   20b0c:	bl	13ef0 <assuan_transact@plt>
   20b10:	mov	r2, fp
   20b14:	mov	r1, #2
   20b18:	mov	r6, r0
   20b1c:	ldr	r0, [r7]
   20b20:	bl	14460 <assuan_set_flag@plt>
   20b24:	cmp	r6, #0
   20b28:	bne	20bdc <__assert_fail@plt+0xc584>
   20b2c:	ldr	fp, [r4]
   20b30:	cmp	fp, #0
   20b34:	beq	20b90 <__assert_fail@plt+0xc538>
   20b38:	ldrb	r6, [r8]
   20b3c:	sub	r3, r6, #48	; 0x30
   20b40:	cmp	r3, #9
   20b44:	bhi	20b5c <__assert_fail@plt+0xc504>
   20b48:	mov	r3, r8
   20b4c:	ldrb	r6, [r3, #1]!
   20b50:	sub	r2, r6, #48	; 0x30
   20b54:	cmp	r2, #9
   20b58:	bls	20b4c <__assert_fail@plt+0xc4f4>
   20b5c:	cmp	r6, #0
   20b60:	bne	20d9c <__assert_fail@plt+0xc744>
   20b64:	ldr	r3, [r4, #4]
   20b68:	mov	r0, r8
   20b6c:	cmp	r3, #0
   20b70:	beq	20d94 <__assert_fail@plt+0xc73c>
   20b74:	str	r3, [sp, #20]
   20b78:	bl	14094 <strlen@plt>
   20b7c:	ldr	r3, [sp, #20]
   20b80:	cmp	r0, r3
   20b84:	bhi	20e2c <__assert_fail@plt+0xc7d4>
   20b88:	cmp	fp, r0
   20b8c:	bhi	20e00 <__assert_fail@plt+0xc7a8>
   20b90:	ldr	r3, [r4, #20]
   20b94:	cmp	r3, #0
   20b98:	beq	20bd0 <__assert_fail@plt+0xc578>
   20b9c:	mov	r2, #0
   20ba0:	mov	r0, r4
   20ba4:	str	r2, [r4, #28]
   20ba8:	blx	r3
   20bac:	cmn	r0, #1
   20bb0:	beq	20d84 <__assert_fail@plt+0xc72c>
   20bb4:	uxth	r3, r0
   20bb8:	cmp	r3, #11
   20bbc:	beq	20d50 <__assert_fail@plt+0xc6f8>
   20bc0:	cmp	r3, #87	; 0x57
   20bc4:	beq	20d50 <__assert_fail@plt+0xc6f8>
   20bc8:	cmp	r0, #0
   20bcc:	bne	20bd4 <__assert_fail@plt+0xc57c>
   20bd0:	mov	r0, #0
   20bd4:	bl	1f930 <__assert_fail@plt+0xb2d8>
   20bd8:	b	20904 <__assert_fail@plt+0xc2ac>
   20bdc:	ubfx	r3, r6, #24, #7
   20be0:	uxth	r2, r6
   20be4:	cmp	r3, #0
   20be8:	beq	20c00 <__assert_fail@plt+0xc5a8>
   20bec:	movw	r1, #277	; 0x115
   20bf0:	cmp	r2, r1
   20bf4:	lsleq	r3, r3, #24
   20bf8:	orreq	r6, r3, #99	; 0x63
   20bfc:	uxtheq	r2, r6
   20c00:	movw	r3, #273	; 0x111
   20c04:	cmp	r2, r3
   20c08:	beq	20c18 <__assert_fail@plt+0xc5c0>
   20c0c:	mov	r0, r6
   20c10:	bl	1f930 <__assert_fail@plt+0xb2d8>
   20c14:	b	20904 <__assert_fail@plt+0xc2ac>
   20c18:	cmp	sl, #0
   20c1c:	mov	r2, #5
   20c20:	movwne	r1, #22136	; 0x5678
   20c24:	movweq	r1, #22152	; 0x5688
   20c28:	movne	r0, #0
   20c2c:	movtne	r1, #4
   20c30:	moveq	r0, sl
   20c34:	movteq	r1, #4
   20c38:	bl	13cc8 <dcgettext@plt>
   20c3c:	cmp	r0, #0
   20c40:	mov	r6, r0
   20c44:	beq	20b2c <__assert_fail@plt+0xc4d4>
   20c48:	ldr	r3, [r4, #12]
   20c4c:	ldr	r2, [r4, #8]
   20c50:	add	r3, r3, #1
   20c54:	str	r3, [r4, #12]
   20c58:	cmp	r2, r3
   20c5c:	ble	20dc0 <__assert_fail@plt+0xc768>
   20c60:	ldr	r3, [r4, #32]
   20c64:	mov	fp, #0
   20c68:	mov	r2, #5
   20c6c:	mov	r0, fp
   20c70:	strb	fp, [r4, #36]	; 0x24
   20c74:	movw	r1, #22100	; 0x5654
   20c78:	movt	r1, #4
   20c7c:	str	r3, [sp, #32]
   20c80:	str	r8, [sp, #36]	; 0x24
   20c84:	str	fp, [sp, #28]
   20c88:	bl	13cc8 <dcgettext@plt>
   20c8c:	str	r6, [sp, #4]
   20c90:	mov	r2, #1
   20c94:	movw	r1, #1001	; 0x3e9
   20c98:	movw	r3, #1002	; 0x3ea
   20c9c:	str	r0, [sp]
   20ca0:	add	r0, sp, #40	; 0x28
   20ca4:	ldr	lr, [r4, #12]
   20ca8:	add	lr, lr, r2
   20cac:	str	lr, [sp, #8]
   20cb0:	ldr	lr, [r4, #8]
   20cb4:	str	lr, [sp, #12]
   20cb8:	bl	1464c <__snprintf_chk@plt>
   20cbc:	ldr	r0, [r7]
   20cc0:	mov	r2, fp
   20cc4:	str	fp, [sp]
   20cc8:	str	fp, [sp, #4]
   20ccc:	mov	r3, fp
   20cd0:	str	fp, [sp, #8]
   20cd4:	add	r1, sp, #40	; 0x28
   20cd8:	str	fp, [sp, #12]
   20cdc:	strb	fp, [sp, #1041]	; 0x411
   20ce0:	bl	13ef0 <assuan_transact@plt>
   20ce4:	cmp	r0, fp
   20ce8:	beq	20acc <__assert_fail@plt+0xc474>
   20cec:	b	20bd4 <__assert_fail@plt+0xc57c>
   20cf0:	ldr	r3, [r4]
   20cf4:	mov	r0, r1
   20cf8:	cmp	r3, #0
   20cfc:	movwne	r1, #21892	; 0x5584
   20d00:	movweq	r1, #21972	; 0x55d4
   20d04:	movne	r2, #5
   20d08:	movtne	r1, #4
   20d0c:	moveq	r2, #5
   20d10:	movteq	r1, #4
   20d14:	bl	13cc8 <dcgettext@plt>
   20d18:	cmp	r8, #0
   20d1c:	mov	r9, r0
   20d20:	bne	20930 <__assert_fail@plt+0xc2d8>
   20d24:	cmp	r0, #0
   20d28:	beq	20d48 <__assert_fail@plt+0xc6f0>
   20d2c:	movw	r1, #22220	; 0x56cc
   20d30:	mov	r0, r9
   20d34:	movt	r1, #4
   20d38:	bl	13998 <strstr@plt>
   20d3c:	cmp	r0, #0
   20d40:	movne	sl, #1
   20d44:	bne	20948 <__assert_fail@plt+0xc2f0>
   20d48:	mov	sl, #0
   20d4c:	b	20948 <__assert_fail@plt+0xc2f0>
   20d50:	cmp	sl, #0
   20d54:	mov	r2, #5
   20d58:	movwne	r1, #22216	; 0x56c8
   20d5c:	movweq	r1, #22224	; 0x56d0
   20d60:	movne	r0, #0
   20d64:	movtne	r1, #4
   20d68:	moveq	r0, sl
   20d6c:	movteq	r1, #4
   20d70:	bl	13cc8 <dcgettext@plt>
   20d74:	cmp	r0, #0
   20d78:	mov	r6, r0
   20d7c:	bne	20c48 <__assert_fail@plt+0xc5f0>
   20d80:	b	20bd0 <__assert_fail@plt+0xc578>
   20d84:	ldr	r6, [r4, #28]
   20d88:	cmp	r6, #0
   20d8c:	bne	20c48 <__assert_fail@plt+0xc5f0>
   20d90:	b	20bd4 <__assert_fail@plt+0xc57c>
   20d94:	bl	14094 <strlen@plt>
   20d98:	b	20b88 <__assert_fail@plt+0xc530>
   20d9c:	movw	r1, #22172	; 0x569c
   20da0:	mov	r0, #0
   20da4:	movt	r1, #4
   20da8:	mov	r2, #5
   20dac:	bl	13cc8 <dcgettext@plt>
   20db0:	mov	r6, r0
   20db4:	cmp	r6, #0
   20db8:	beq	20b90 <__assert_fail@plt+0xc538>
   20dbc:	b	20c48 <__assert_fail@plt+0xc5f0>
   20dc0:	ldr	r0, [r4]
   20dc4:	mov	r2, #87	; 0x57
   20dc8:	mov	r3, #11
   20dcc:	movt	r2, #1024	; 0x400
   20dd0:	cmp	r0, #0
   20dd4:	movt	r3, #1024	; 0x400
   20dd8:	movne	r0, r2
   20ddc:	moveq	r0, r3
   20de0:	b	20bd4 <__assert_fail@plt+0xc57c>
   20de4:	movw	r3, #22536	; 0x5808
   20de8:	cmp	sl, #0
   20dec:	movt	r3, #4
   20df0:	movw	r8, #21880	; 0x5578
   20df4:	movt	r8, #4
   20df8:	movne	r8, r3
   20dfc:	b	209c8 <__assert_fail@plt+0xc370>
   20e00:	movw	r1, #22200	; 0x56b8
   20e04:	mov	r0, #0
   20e08:	movt	r1, #4
   20e0c:	mov	r2, #5
   20e10:	bl	13cc8 <dcgettext@plt>
   20e14:	mov	r6, r0
   20e18:	b	20db4 <__assert_fail@plt+0xc75c>
   20e1c:	bl	2049c <__assert_fail@plt+0xbe44>
   20e20:	cmp	r0, #0
   20e24:	beq	20a38 <__assert_fail@plt+0xc3e0>
   20e28:	b	20bd4 <__assert_fail@plt+0xc57c>
   20e2c:	mov	r0, r6
   20e30:	movw	r1, #22136	; 0x5678
   20e34:	mov	r2, #5
   20e38:	movt	r1, #4
   20e3c:	bl	13cc8 <dcgettext@plt>
   20e40:	mov	r6, r0
   20e44:	b	20db4 <__assert_fail@plt+0xc75c>
   20e48:	bl	13cec <__stack_chk_fail@plt>
   20e4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e50:	movw	r5, #48116	; 0xbbf4
   20e54:	movt	r5, #5
   20e58:	movw	r4, #47296	; 0xb8c0
   20e5c:	movt	r4, #5
   20e60:	mov	r6, r1
   20e64:	ldr	r7, [r5, #16]
   20e68:	sub	sp, sp, #1040	; 0x410
   20e6c:	ldr	r1, [r4]
   20e70:	sub	sp, sp, #12
   20e74:	cmp	r7, #0
   20e78:	mov	ip, #0
   20e7c:	mov	r8, r2
   20e80:	mov	r9, r3
   20e84:	movne	r0, #11
   20e88:	str	r1, [sp, #1044]	; 0x414
   20e8c:	str	ip, [r6]
   20e90:	movtne	r0, #1024	; 0x400
   20e94:	ldr	sl, [sp, #1088]	; 0x440
   20e98:	beq	20eb8 <__assert_fail@plt+0xc860>
   20e9c:	ldr	r2, [sp, #1044]	; 0x414
   20ea0:	ldr	r3, [r4]
   20ea4:	cmp	r2, r3
   20ea8:	bne	21168 <__assert_fail@plt+0xcb10>
   20eac:	add	sp, sp, #1040	; 0x410
   20eb0:	add	sp, sp, #12
   20eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20eb8:	bl	1f988 <__assert_fail@plt+0xb330>
   20ebc:	cmp	r0, #0
   20ec0:	bne	20e9c <__assert_fail@plt+0xc844>
   20ec4:	cmp	r9, #0
   20ec8:	beq	210f8 <__assert_fail@plt+0xcaa0>
   20ecc:	cmp	r8, #0
   20ed0:	beq	2113c <__assert_fail@plt+0xcae4>
   20ed4:	add	fp, sp, #40	; 0x28
   20ed8:	movw	r3, #22060	; 0x562c
   20edc:	str	r8, [sp, #4]
   20ee0:	movt	r3, #4
   20ee4:	movw	r1, #1001	; 0x3e9
   20ee8:	str	r3, [sp]
   20eec:	mov	r0, fp
   20ef0:	mov	r2, #1
   20ef4:	movw	r3, #1002	; 0x3ea
   20ef8:	bl	1464c <__snprintf_chk@plt>
   20efc:	movw	r8, #47532	; 0xb9ac
   20f00:	movt	r8, #5
   20f04:	mov	ip, #0
   20f08:	mov	r1, fp
   20f0c:	ldr	r0, [r8]
   20f10:	mov	r2, ip
   20f14:	str	ip, [sp]
   20f18:	mov	r3, ip
   20f1c:	str	ip, [sp, #4]
   20f20:	str	ip, [sp, #8]
   20f24:	str	ip, [sp, #12]
   20f28:	strb	ip, [sp, #1041]	; 0x411
   20f2c:	bl	13ef0 <assuan_transact@plt>
   20f30:	subs	ip, r0, #0
   20f34:	bne	210e4 <__assert_fail@plt+0xca8c>
   20f38:	movw	r1, #1001	; 0x3e9
   20f3c:	mov	r2, #1
   20f40:	str	r9, [sp, #4]
   20f44:	movw	r3, #22072	; 0x5638
   20f48:	mov	r0, fp
   20f4c:	movt	r3, #4
   20f50:	str	r3, [sp]
   20f54:	movw	r3, #1002	; 0x3ea
   20f58:	str	ip, [sp, #20]
   20f5c:	bl	1464c <__snprintf_chk@plt>
   20f60:	ldr	ip, [sp, #20]
   20f64:	mov	r1, fp
   20f68:	ldr	r0, [r8]
   20f6c:	mov	r2, ip
   20f70:	str	ip, [sp]
   20f74:	str	ip, [sp, #4]
   20f78:	mov	r3, ip
   20f7c:	str	ip, [sp, #8]
   20f80:	str	ip, [sp, #12]
   20f84:	strb	ip, [sp, #1041]	; 0x411
   20f88:	bl	13ef0 <assuan_transact@plt>
   20f8c:	cmp	r0, #0
   20f90:	bne	210e4 <__assert_fail@plt+0xca8c>
   20f94:	ldr	r3, [sp, #1092]	; 0x444
   20f98:	cmp	r3, #0
   20f9c:	beq	20fac <__assert_fail@plt+0xc954>
   20fa0:	ldr	r3, [r5, #84]	; 0x54
   20fa4:	cmp	r3, #0
   20fa8:	bne	21158 <__assert_fail@plt+0xcb00>
   20fac:	cmp	sl, #0
   20fb0:	beq	2100c <__assert_fail@plt+0xc9b4>
   20fb4:	movw	r1, #1001	; 0x3e9
   20fb8:	mov	r2, #1
   20fbc:	str	sl, [sp, #4]
   20fc0:	movw	r3, #22088	; 0x5648
   20fc4:	mov	r0, fp
   20fc8:	movt	r3, #4
   20fcc:	str	r3, [sp]
   20fd0:	movw	r3, #1002	; 0x3ea
   20fd4:	bl	1464c <__snprintf_chk@plt>
   20fd8:	mov	ip, #0
   20fdc:	ldr	r0, [r8]
   20fe0:	mov	r1, fp
   20fe4:	mov	r2, ip
   20fe8:	str	ip, [sp]
   20fec:	str	ip, [sp, #4]
   20ff0:	mov	r3, ip
   20ff4:	str	ip, [sp, #8]
   20ff8:	str	ip, [sp, #12]
   20ffc:	strb	ip, [sp, #1041]	; 0x411
   21000:	bl	13ef0 <assuan_transact@plt>
   21004:	cmp	r0, #0
   21008:	bne	210e4 <__assert_fail@plt+0xca8c>
   2100c:	movw	r0, #506	; 0x1fa
   21010:	mov	r5, #0
   21014:	mov	r3, #496	; 0x1f0
   21018:	str	r5, [sp, #28]
   2101c:	str	r5, [sp, #36]	; 0x24
   21020:	str	r3, [sp, #32]
   21024:	bl	13f44 <gcry_malloc_secure@plt>
   21028:	cmp	r0, r5
   2102c:	str	r0, [sp, #36]	; 0x24
   21030:	beq	210d0 <__assert_fail@plt+0xca78>
   21034:	mov	r1, #2
   21038:	ldr	r0, [r8]
   2103c:	bl	13ec0 <assuan_get_flag@plt>
   21040:	mov	r7, r0
   21044:	ldr	r0, [r8]
   21048:	bl	13dac <assuan_begin_confidential@plt>
   2104c:	ldr	r0, [r8]
   21050:	add	r3, sp, #28
   21054:	str	r5, [sp, #8]
   21058:	str	r5, [sp, #12]
   2105c:	movw	r1, #552	; 0x228
   21060:	str	r0, [sp, #4]
   21064:	movt	r1, #2
   21068:	movw	r2, #1656	; 0x678
   2106c:	str	r1, [sp]
   21070:	movt	r2, #2
   21074:	movw	r1, #22128	; 0x5670
   21078:	movt	r1, #4
   2107c:	bl	13ef0 <assuan_transact@plt>
   21080:	mov	r2, r7
   21084:	mov	r1, #2
   21088:	mov	r5, r0
   2108c:	ldr	r0, [r8]
   21090:	bl	14460 <assuan_set_flag@plt>
   21094:	cmp	r5, #0
   21098:	beq	210ec <__assert_fail@plt+0xca94>
   2109c:	ubfx	r3, r5, #24, #7
   210a0:	cmp	r3, #0
   210a4:	beq	210bc <__assert_fail@plt+0xca64>
   210a8:	uxth	r1, r5
   210ac:	movw	r2, #277	; 0x115
   210b0:	cmp	r1, r2
   210b4:	lsleq	r3, r3, #24
   210b8:	orreq	r5, r3, #99	; 0x63
   210bc:	ldr	r0, [sp, #36]	; 0x24
   210c0:	bl	13c44 <gcry_free@plt>
   210c4:	mov	r0, r5
   210c8:	bl	1f930 <__assert_fail@plt+0xb2d8>
   210cc:	b	20e9c <__assert_fail@plt+0xc844>
   210d0:	bl	14580 <gpg_err_code_from_syserror@plt>
   210d4:	cmp	r0, #0
   210d8:	uxthne	r0, r0
   210dc:	orrne	r7, r0, #67108864	; 0x4000000
   210e0:	mov	r0, r7
   210e4:	bl	1f930 <__assert_fail@plt+0xb2d8>
   210e8:	b	20e9c <__assert_fail@plt+0xc844>
   210ec:	ldr	r3, [sp, #36]	; 0x24
   210f0:	str	r3, [r6]
   210f4:	b	210c4 <__assert_fail@plt+0xca6c>
   210f8:	cmp	r8, #0
   210fc:	beq	21120 <__assert_fail@plt+0xcac8>
   21100:	movw	r1, #22220	; 0x56cc
   21104:	mov	r0, r8
   21108:	movt	r1, #4
   2110c:	bl	13998 <strstr@plt>
   21110:	cmp	r0, #0
   21114:	movwne	r9, #22220	; 0x56cc
   21118:	movtne	r9, #4
   2111c:	bne	20ed4 <__assert_fail@plt+0xc87c>
   21120:	movw	r1, #22228	; 0x56d4
   21124:	mov	r0, #0
   21128:	movt	r1, #4
   2112c:	mov	r2, #5
   21130:	bl	13cc8 <dcgettext@plt>
   21134:	mov	r9, r0
   21138:	b	20ecc <__assert_fail@plt+0xc874>
   2113c:	movw	r3, #22240	; 0x56e0
   21140:	movt	r3, #4
   21144:	add	fp, sp, #40	; 0x28
   21148:	ldm	r3, {r0, r1}
   2114c:	str	r0, [sp, #40]	; 0x28
   21150:	strh	r1, [sp, #44]	; 0x2c
   21154:	b	20efc <__assert_fail@plt+0xc8a4>
   21158:	bl	2049c <__assert_fail@plt+0xbe44>
   2115c:	cmp	r0, #0
   21160:	beq	20fac <__assert_fail@plt+0xc954>
   21164:	b	210e4 <__assert_fail@plt+0xca8c>
   21168:	bl	13cec <__stack_chk_fail@plt>
   2116c:	push	{r4, r5, r6, r7, r8, r9, lr}
   21170:	movw	r4, #47296	; 0xb8c0
   21174:	movt	r4, #5
   21178:	sub	sp, sp, #1024	; 0x400
   2117c:	mov	r9, r2
   21180:	sub	sp, sp, #4
   21184:	ldr	r2, [r4]
   21188:	mov	r5, r1
   2118c:	mov	r8, r3
   21190:	str	r2, [sp, #1020]	; 0x3fc
   21194:	bl	1f988 <__assert_fail@plt+0xb330>
   21198:	cmp	r0, #0
   2119c:	bne	2132c <__assert_fail@plt+0xccd4>
   211a0:	cmp	r5, #0
   211a4:	beq	213d8 <__assert_fail@plt+0xcd80>
   211a8:	add	r7, sp, #16
   211ac:	movw	r3, #22060	; 0x562c
   211b0:	str	r5, [sp, #4]
   211b4:	movt	r3, #4
   211b8:	movw	r1, #1001	; 0x3e9
   211bc:	str	r3, [sp]
   211c0:	mov	r0, r7
   211c4:	mov	r2, #1
   211c8:	movw	r3, #1002	; 0x3ea
   211cc:	bl	1464c <__snprintf_chk@plt>
   211d0:	movw	r5, #47532	; 0xb9ac
   211d4:	movt	r5, #5
   211d8:	mov	ip, #0
   211dc:	mov	r1, r7
   211e0:	ldr	r0, [r5]
   211e4:	mov	r2, ip
   211e8:	str	ip, [sp]
   211ec:	mov	r3, ip
   211f0:	str	ip, [sp, #4]
   211f4:	str	ip, [sp, #8]
   211f8:	str	ip, [sp, #12]
   211fc:	strb	ip, [sp, #1017]	; 0x3f9
   21200:	bl	13ef0 <assuan_transact@plt>
   21204:	subs	r6, r0, #0
   21208:	bne	21348 <__assert_fail@plt+0xccf0>
   2120c:	cmp	r9, #0
   21210:	beq	21268 <__assert_fail@plt+0xcc10>
   21214:	movw	r1, #1001	; 0x3e9
   21218:	mov	r2, #1
   2121c:	str	r9, [sp, #4]
   21220:	movw	r3, #22248	; 0x56e8
   21224:	mov	r0, r7
   21228:	movt	r3, #4
   2122c:	str	r3, [sp]
   21230:	movw	r3, #1002	; 0x3ea
   21234:	bl	1464c <__snprintf_chk@plt>
   21238:	ldr	r0, [r5]
   2123c:	mov	r2, r6
   21240:	str	r6, [sp]
   21244:	str	r6, [sp, #4]
   21248:	mov	r3, r6
   2124c:	str	r6, [sp, #8]
   21250:	mov	r1, r7
   21254:	str	r6, [sp, #12]
   21258:	strb	r6, [sp, #1017]	; 0x3f9
   2125c:	bl	13ef0 <assuan_transact@plt>
   21260:	cmp	r0, #0
   21264:	bne	21328 <__assert_fail@plt+0xccd0>
   21268:	cmp	r8, #0
   2126c:	beq	212d4 <__assert_fail@plt+0xcc7c>
   21270:	ldr	r3, [sp, #1056]	; 0x420
   21274:	cmp	r3, #0
   21278:	bne	21374 <__assert_fail@plt+0xcd1c>
   2127c:	movw	r1, #1001	; 0x3e9
   21280:	mov	r2, #1
   21284:	str	r8, [sp, #4]
   21288:	movw	r3, #22260	; 0x56f4
   2128c:	mov	r0, r7
   21290:	movt	r3, #4
   21294:	str	r3, [sp]
   21298:	movw	r3, #1002	; 0x3ea
   2129c:	bl	1464c <__snprintf_chk@plt>
   212a0:	mov	ip, #0
   212a4:	ldr	r0, [r5]
   212a8:	mov	r1, r7
   212ac:	mov	r2, ip
   212b0:	str	ip, [sp]
   212b4:	str	ip, [sp, #4]
   212b8:	mov	r3, ip
   212bc:	str	ip, [sp, #8]
   212c0:	str	ip, [sp, #12]
   212c4:	strb	ip, [sp, #1017]	; 0x3f9
   212c8:	bl	13ef0 <assuan_transact@plt>
   212cc:	cmp	r0, #0
   212d0:	bne	21328 <__assert_fail@plt+0xccd0>
   212d4:	mov	r1, #0
   212d8:	ldr	r0, [r5]
   212dc:	mov	r2, r1
   212e0:	str	r1, [sp]
   212e4:	str	r1, [sp, #4]
   212e8:	mov	r3, r1
   212ec:	str	r1, [sp, #8]
   212f0:	str	r1, [sp, #12]
   212f4:	movw	r1, #22288	; 0x5710
   212f8:	movt	r1, #4
   212fc:	bl	13ef0 <assuan_transact@plt>
   21300:	cmp	r0, #0
   21304:	beq	21328 <__assert_fail@plt+0xccd0>
   21308:	ubfx	r3, r0, #24, #7
   2130c:	cmp	r3, #0
   21310:	beq	21328 <__assert_fail@plt+0xccd0>
   21314:	uxth	r1, r0
   21318:	movw	r2, #277	; 0x115
   2131c:	cmp	r1, r2
   21320:	lsleq	r3, r3, #24
   21324:	orreq	r0, r3, #99	; 0x63
   21328:	bl	1f930 <__assert_fail@plt+0xb2d8>
   2132c:	ldr	r2, [sp, #1020]	; 0x3fc
   21330:	ldr	r3, [r4]
   21334:	cmp	r2, r3
   21338:	bne	213f4 <__assert_fail@plt+0xcd9c>
   2133c:	add	sp, sp, #1024	; 0x400
   21340:	add	sp, sp, #4
   21344:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21348:	ubfx	r3, r6, #24, #7
   2134c:	cmp	r3, #0
   21350:	beq	21368 <__assert_fail@plt+0xcd10>
   21354:	uxth	r1, r6
   21358:	movw	r2, #277	; 0x115
   2135c:	cmp	r1, r2
   21360:	lsleq	r3, r3, #24
   21364:	orreq	r6, r3, #99	; 0x63
   21368:	mov	r0, r6
   2136c:	bl	1f930 <__assert_fail@plt+0xb2d8>
   21370:	b	2132c <__assert_fail@plt+0xccd4>
   21374:	movw	r1, #1001	; 0x3e9
   21378:	mov	r2, #1
   2137c:	str	r8, [sp, #4]
   21380:	movw	r3, #22276	; 0x5704
   21384:	mov	r0, r7
   21388:	movt	r3, #4
   2138c:	str	r3, [sp]
   21390:	movw	r3, #1002	; 0x3ea
   21394:	bl	1464c <__snprintf_chk@plt>
   21398:	mov	ip, #0
   2139c:	ldr	r0, [r5]
   213a0:	mov	r2, ip
   213a4:	mov	r3, ip
   213a8:	mov	r1, r7
   213ac:	str	ip, [sp]
   213b0:	str	ip, [sp, #4]
   213b4:	str	ip, [sp, #8]
   213b8:	str	ip, [sp, #12]
   213bc:	strb	ip, [sp, #1017]	; 0x3f9
   213c0:	bl	13ef0 <assuan_transact@plt>
   213c4:	movw	r3, #275	; 0x113
   213c8:	uxth	r2, r0
   213cc:	cmp	r2, r3
   213d0:	bne	212cc <__assert_fail@plt+0xcc74>
   213d4:	b	2127c <__assert_fail@plt+0xcc24>
   213d8:	movw	r3, #22240	; 0x56e0
   213dc:	movt	r3, #4
   213e0:	add	r7, sp, #16
   213e4:	ldm	r3, {r0, r1}
   213e8:	str	r0, [sp, #16]
   213ec:	strh	r1, [sp, #20]
   213f0:	b	211d0 <__assert_fail@plt+0xcb78>
   213f4:	bl	13cec <__stack_chk_fail@plt>
   213f8:	push	{r4, r5, r6, r7, r8, lr}
   213fc:	movw	r4, #47296	; 0xb8c0
   21400:	movt	r4, #5
   21404:	sub	sp, sp, #1024	; 0x400
   21408:	mov	r5, r1
   2140c:	mov	r8, r2
   21410:	ldr	r3, [r4]
   21414:	str	r3, [sp, #1020]	; 0x3fc
   21418:	bl	1f988 <__assert_fail@plt+0xb330>
   2141c:	cmp	r0, #0
   21420:	bne	21544 <__assert_fail@plt+0xceec>
   21424:	cmp	r5, #0
   21428:	beq	21588 <__assert_fail@plt+0xcf30>
   2142c:	add	r7, sp, #16
   21430:	movw	r3, #22060	; 0x562c
   21434:	str	r5, [sp, #4]
   21438:	movt	r3, #4
   2143c:	movw	r1, #1001	; 0x3e9
   21440:	str	r3, [sp]
   21444:	mov	r0, r7
   21448:	mov	r2, #1
   2144c:	movw	r3, #1002	; 0x3ea
   21450:	bl	1464c <__snprintf_chk@plt>
   21454:	movw	r6, #47532	; 0xb9ac
   21458:	movt	r6, #5
   2145c:	mov	ip, #0
   21460:	mov	r1, r7
   21464:	ldr	r0, [r6]
   21468:	mov	r2, ip
   2146c:	str	ip, [sp]
   21470:	mov	r3, ip
   21474:	str	ip, [sp, #4]
   21478:	str	ip, [sp, #8]
   2147c:	str	ip, [sp, #12]
   21480:	strb	ip, [sp, #1017]	; 0x3f9
   21484:	bl	13ef0 <assuan_transact@plt>
   21488:	subs	r5, r0, #0
   2148c:	bne	2155c <__assert_fail@plt+0xcf04>
   21490:	cmp	r8, #0
   21494:	beq	214ec <__assert_fail@plt+0xce94>
   21498:	movw	r1, #1001	; 0x3e9
   2149c:	mov	r2, #1
   214a0:	str	r8, [sp, #4]
   214a4:	movw	r3, #22248	; 0x56e8
   214a8:	mov	r0, r7
   214ac:	movt	r3, #4
   214b0:	str	r3, [sp]
   214b4:	movw	r3, #1002	; 0x3ea
   214b8:	bl	1464c <__snprintf_chk@plt>
   214bc:	ldr	r0, [r6]
   214c0:	mov	r2, r5
   214c4:	str	r5, [sp]
   214c8:	str	r5, [sp, #4]
   214cc:	mov	r1, r7
   214d0:	str	r5, [sp, #8]
   214d4:	mov	r3, r5
   214d8:	str	r5, [sp, #12]
   214dc:	strb	r5, [sp, #1017]	; 0x3f9
   214e0:	bl	13ef0 <assuan_transact@plt>
   214e4:	cmp	r0, #0
   214e8:	bne	21540 <__assert_fail@plt+0xcee8>
   214ec:	mov	r1, #0
   214f0:	ldr	r0, [r6]
   214f4:	mov	r2, r1
   214f8:	str	r1, [sp]
   214fc:	str	r1, [sp, #4]
   21500:	mov	r3, r1
   21504:	str	r1, [sp, #8]
   21508:	str	r1, [sp, #12]
   2150c:	movw	r1, #20944	; 0x51d0
   21510:	movt	r1, #4
   21514:	bl	13ef0 <assuan_transact@plt>
   21518:	cmp	r0, #0
   2151c:	beq	21540 <__assert_fail@plt+0xcee8>
   21520:	ubfx	r3, r0, #24, #7
   21524:	cmp	r3, #0
   21528:	beq	21540 <__assert_fail@plt+0xcee8>
   2152c:	uxth	r1, r0
   21530:	movw	r2, #277	; 0x115
   21534:	cmp	r1, r2
   21538:	lsleq	r3, r3, #24
   2153c:	orreq	r0, r3, #99	; 0x63
   21540:	bl	1f930 <__assert_fail@plt+0xb2d8>
   21544:	ldr	r2, [sp, #1020]	; 0x3fc
   21548:	ldr	r3, [r4]
   2154c:	cmp	r2, r3
   21550:	bne	215a4 <__assert_fail@plt+0xcf4c>
   21554:	add	sp, sp, #1024	; 0x400
   21558:	pop	{r4, r5, r6, r7, r8, pc}
   2155c:	ubfx	r3, r5, #24, #7
   21560:	cmp	r3, #0
   21564:	beq	2157c <__assert_fail@plt+0xcf24>
   21568:	uxth	r1, r5
   2156c:	movw	r2, #277	; 0x115
   21570:	cmp	r1, r2
   21574:	lsleq	r3, r3, #24
   21578:	orreq	r5, r3, #99	; 0x63
   2157c:	mov	r0, r5
   21580:	bl	1f930 <__assert_fail@plt+0xb2d8>
   21584:	b	21544 <__assert_fail@plt+0xceec>
   21588:	movw	r3, #22240	; 0x56e0
   2158c:	movt	r3, #4
   21590:	add	r7, sp, #16
   21594:	ldm	r3, {r0, r1}
   21598:	str	r0, [sp, #16]
   2159c:	strh	r1, [sp, #20]
   215a0:	b	21454 <__assert_fail@plt+0xcdfc>
   215a4:	bl	13cec <__stack_chk_fail@plt>
   215a8:	push	{r4, r5, r6, r7, r8, lr}
   215ac:	movw	r4, #47296	; 0xb8c0
   215b0:	movt	r4, #5
   215b4:	sub	sp, sp, #1024	; 0x400
   215b8:	mov	r5, r1
   215bc:	mov	r8, r2
   215c0:	ldr	r3, [r4]
   215c4:	str	r3, [sp, #1020]	; 0x3fc
   215c8:	bl	1f988 <__assert_fail@plt+0xb330>
   215cc:	cmp	r0, #0
   215d0:	bne	21708 <__assert_fail@plt+0xd0b0>
   215d4:	cmp	r5, #0
   215d8:	beq	21764 <__assert_fail@plt+0xd10c>
   215dc:	add	r7, sp, #16
   215e0:	movw	r3, #22060	; 0x562c
   215e4:	str	r5, [sp, #4]
   215e8:	movt	r3, #4
   215ec:	movw	r1, #1001	; 0x3e9
   215f0:	str	r3, [sp]
   215f4:	mov	r0, r7
   215f8:	mov	r2, #1
   215fc:	movw	r3, #1002	; 0x3ea
   21600:	bl	1464c <__snprintf_chk@plt>
   21604:	movw	r5, #47532	; 0xb9ac
   21608:	movt	r5, #5
   2160c:	mov	ip, #0
   21610:	mov	r1, r7
   21614:	ldr	r0, [r5]
   21618:	mov	r2, ip
   2161c:	str	ip, [sp]
   21620:	mov	r3, ip
   21624:	str	ip, [sp, #4]
   21628:	str	ip, [sp, #8]
   2162c:	str	ip, [sp, #12]
   21630:	strb	ip, [sp, #1017]	; 0x3f9
   21634:	bl	13ef0 <assuan_transact@plt>
   21638:	subs	r6, r0, #0
   2163c:	bne	2175c <__assert_fail@plt+0xd104>
   21640:	cmp	r8, #0
   21644:	beq	2169c <__assert_fail@plt+0xd044>
   21648:	movw	r1, #1001	; 0x3e9
   2164c:	mov	r2, #1
   21650:	str	r8, [sp, #4]
   21654:	movw	r3, #22248	; 0x56e8
   21658:	mov	r0, r7
   2165c:	movt	r3, #4
   21660:	str	r3, [sp]
   21664:	movw	r3, #1002	; 0x3ea
   21668:	bl	1464c <__snprintf_chk@plt>
   2166c:	ldr	r0, [r5]
   21670:	mov	r2, r6
   21674:	str	r6, [sp]
   21678:	str	r6, [sp, #4]
   2167c:	mov	r1, r7
   21680:	str	r6, [sp, #8]
   21684:	mov	r3, r6
   21688:	str	r6, [sp, #12]
   2168c:	strb	r6, [sp, #1017]	; 0x3f9
   21690:	bl	13ef0 <assuan_transact@plt>
   21694:	cmp	r0, #0
   21698:	bne	2175c <__assert_fail@plt+0xd104>
   2169c:	bl	140d0 <pth_attr_new@plt>
   216a0:	mov	r1, #2
   216a4:	mov	r2, #1
   216a8:	mov	r7, #0
   216ac:	mov	r6, r0
   216b0:	bl	13b78 <pth_attr_set@plt>
   216b4:	mov	r1, #4
   216b8:	mov	r2, #262144	; 0x40000
   216bc:	mov	r0, r6
   216c0:	bl	13b78 <pth_attr_set@plt>
   216c4:	mov	r1, #1
   216c8:	mov	r0, r6
   216cc:	movw	r2, #22296	; 0x5718
   216d0:	movt	r2, #4
   216d4:	bl	13b78 <pth_attr_set@plt>
   216d8:	mov	r0, r6
   216dc:	mov	r2, r7
   216e0:	movw	r1, #63712	; 0xf8e0
   216e4:	movt	r1, #1
   216e8:	str	r7, [r5, #4]
   216ec:	bl	13bcc <pth_spawn@plt>
   216f0:	cmp	r0, r7
   216f4:	str	r0, [r5, #36]	; 0x24
   216f8:	beq	21720 <__assert_fail@plt+0xd0c8>
   216fc:	mov	r0, r6
   21700:	bl	13d4c <pth_attr_destroy@plt>
   21704:	mov	r0, r7
   21708:	ldr	r1, [sp, #1020]	; 0x3fc
   2170c:	ldr	r3, [r4]
   21710:	cmp	r1, r3
   21714:	bne	21780 <__assert_fail@plt+0xd128>
   21718:	add	sp, sp, #1024	; 0x400
   2171c:	pop	{r4, r5, r6, r7, r8, pc}
   21720:	bl	14580 <gpg_err_code_from_syserror@plt>
   21724:	cmp	r0, #0
   21728:	uxthne	r5, r0
   2172c:	orrne	r5, r5, #67108864	; 0x4000000
   21730:	moveq	r5, r0
   21734:	bl	14148 <__errno_location@plt>
   21738:	ldr	r0, [r0]
   2173c:	bl	13fa4 <strerror@plt>
   21740:	mov	r1, r0
   21744:	movw	r0, #22312	; 0x5728
   21748:	movt	r0, #4
   2174c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   21750:	mov	r0, r6
   21754:	bl	13d4c <pth_attr_destroy@plt>
   21758:	mov	r0, r5
   2175c:	bl	1f930 <__assert_fail@plt+0xb2d8>
   21760:	b	21708 <__assert_fail@plt+0xd0b0>
   21764:	movw	r3, #22240	; 0x56e0
   21768:	movt	r3, #4
   2176c:	add	r7, sp, #16
   21770:	ldm	r3, {r0, r1}
   21774:	str	r0, [sp, #16]
   21778:	strh	r1, [sp, #20]
   2177c:	b	21604 <__assert_fail@plt+0xcfac>
   21780:	bl	13cec <__stack_chk_fail@plt>
   21784:	push	{r3, r4, r5, lr}
   21788:	movw	r4, #47532	; 0xb9ac
   2178c:	movt	r4, #5
   21790:	ldr	r3, [r4, #36]	; 0x24
   21794:	cmp	r3, #0
   21798:	beq	217f4 <__assert_fail@plt+0xd19c>
   2179c:	ldr	r0, [r4]
   217a0:	cmp	r0, #0
   217a4:	beq	217f4 <__assert_fail@plt+0xd19c>
   217a8:	bl	14544 <assuan_get_pid@plt>
   217ac:	add	r3, r0, #1
   217b0:	mov	r5, r0
   217b4:	cmp	r3, #1
   217b8:	bls	217c8 <__assert_fail@plt+0xd170>
   217bc:	ldr	r1, [r4, #4]
   217c0:	cmp	r1, #0
   217c4:	beq	21824 <__assert_fail@plt+0xd1cc>
   217c8:	ldr	r0, [r4, #36]	; 0x24
   217cc:	mov	r1, #0
   217d0:	bl	144a8 <pth_join@plt>
   217d4:	cmp	r0, #0
   217d8:	beq	21804 <__assert_fail@plt+0xd1ac>
   217dc:	mov	r3, #0
   217e0:	str	r3, [r4, #36]	; 0x24
   217e4:	mov	r0, r3
   217e8:	str	r3, [r4, #28]
   217ec:	pop	{r3, r4, r5, lr}
   217f0:	b	1f930 <__assert_fail@plt+0xb2d8>
   217f4:	movw	r0, #22356	; 0x5754
   217f8:	movt	r0, #4
   217fc:	pop	{r3, r4, r5, lr}
   21800:	b	3f5b4 <__assert_fail@plt+0x2af5c>
   21804:	bl	14148 <__errno_location@plt>
   21808:	ldr	r0, [r0]
   2180c:	bl	13fa4 <strerror@plt>
   21810:	mov	r1, r0
   21814:	movw	r0, #22412	; 0x578c
   21818:	movt	r0, #4
   2181c:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21820:	b	217dc <__assert_fail@plt+0xd184>
   21824:	mov	r2, #1
   21828:	bl	13e60 <waitpid@plt>
   2182c:	cmn	r0, #1
   21830:	beq	217c8 <__assert_fail@plt+0xd170>
   21834:	cmp	r5, r0
   21838:	beq	21854 <__assert_fail@plt+0xd1fc>
   2183c:	cmp	r5, #0
   21840:	ble	217c8 <__assert_fail@plt+0xd170>
   21844:	mov	r0, r5
   21848:	mov	r1, #2
   2184c:	bl	14028 <kill@plt>
   21850:	b	217c8 <__assert_fail@plt+0xd170>
   21854:	mov	r1, #1
   21858:	ldr	r0, [r4]
   2185c:	mov	r2, r1
   21860:	bl	14460 <assuan_set_flag@plt>
   21864:	b	217c8 <__assert_fail@plt+0xd170>
   21868:	movw	r3, #47532	; 0xb9ac
   2186c:	movt	r3, #5
   21870:	ldr	r2, [r3]
   21874:	cmp	r2, #0
   21878:	bxeq	lr
   2187c:	ldr	r2, [r3, #36]	; 0x24
   21880:	cmp	r2, #0
   21884:	bxeq	lr
   21888:	ldr	r3, [r3, #28]
   2188c:	cmp	r3, r0
   21890:	bxne	lr
   21894:	b	21784 <__assert_fail@plt+0xd12c>
   21898:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   2189c:	bl	2d180 <__assert_fail@plt+0x18b28>
   218a0:	movw	r7, #47572	; 0xb9d4
   218a4:	movt	r7, #5
   218a8:	ldr	r5, [r7]
   218ac:	cmp	r5, #0
   218b0:	mov	r8, r0
   218b4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   218b8:	movw	r6, #48116	; 0xbbf4
   218bc:	movt	r6, #5
   218c0:	mov	r4, #0
   218c4:	ldr	r3, [r5, #16]
   218c8:	cmp	r3, #0
   218cc:	bne	21910 <__assert_fail@plt+0xd2b8>
   218d0:	ldr	r0, [r5, #20]
   218d4:	cmp	r0, #0
   218d8:	beq	21910 <__assert_fail@plt+0xd2b8>
   218dc:	ldr	r2, [r5, #12]
   218e0:	cmp	r2, #0
   218e4:	blt	21910 <__assert_fail@plt+0xd2b8>
   218e8:	ldr	r3, [r5, #8]
   218ec:	add	r3, r2, r3
   218f0:	cmp	r8, r3
   218f4:	ble	21910 <__assert_fail@plt+0xd2b8>
   218f8:	ldr	r3, [r6]
   218fc:	tst	r3, #64	; 0x40
   21900:	bne	21a3c <__assert_fail@plt+0xd3e4>
   21904:	bl	13c44 <gcry_free@plt>
   21908:	str	r4, [r5, #20]
   2190c:	str	r8, [r5, #8]
   21910:	ldr	r5, [r5]
   21914:	cmp	r5, #0
   21918:	bne	218c4 <__assert_fail@plt+0xd26c>
   2191c:	ldr	r4, [r7]
   21920:	cmp	r4, #0
   21924:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   21928:	movw	r9, #48116	; 0xbbf4
   2192c:	movt	r9, #5
   21930:	mov	r6, r9
   21934:	ldr	r3, [r4, #24]
   21938:	cmp	r3, #4
   2193c:	ldr	r3, [r4, #16]
   21940:	ldreq	r2, [r9, #76]	; 0x4c
   21944:	ldrne	r2, [r9, #72]	; 0x48
   21948:	cmp	r3, #0
   2194c:	bne	21984 <__assert_fail@plt+0xd32c>
   21950:	ldr	r0, [r4, #20]
   21954:	cmp	r0, #0
   21958:	beq	21984 <__assert_fail@plt+0xd32c>
   2195c:	ldr	r3, [r4, #4]
   21960:	add	r2, r2, r3
   21964:	cmp	r2, r8
   21968:	bcs	21984 <__assert_fail@plt+0xd32c>
   2196c:	ldr	r3, [r9]
   21970:	tst	r3, #64	; 0x40
   21974:	bne	21a20 <__assert_fail@plt+0xd3c8>
   21978:	bl	13c44 <gcry_free@plt>
   2197c:	str	r5, [r4, #20]
   21980:	str	r8, [r4, #8]
   21984:	ldr	r4, [r4]
   21988:	cmp	r4, #0
   2198c:	bne	21934 <__assert_fail@plt+0xd2dc>
   21990:	ldr	r5, [r7]
   21994:	cmp	r5, #0
   21998:	bne	219b4 <__assert_fail@plt+0xd35c>
   2199c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   219a0:	ldr	r6, [r5]
   219a4:	cmp	r6, #0
   219a8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   219ac:	mov	r4, r5
   219b0:	mov	r5, r6
   219b4:	ldr	r3, [r5, #20]
   219b8:	cmp	r3, #0
   219bc:	bne	219a0 <__assert_fail@plt+0xd348>
   219c0:	ldr	r3, [r5, #12]
   219c4:	cmp	r3, #0
   219c8:	blt	219a0 <__assert_fail@plt+0xd348>
   219cc:	ldr	r3, [r5, #8]
   219d0:	add	r3, r3, #1792	; 0x700
   219d4:	add	r3, r3, #8
   219d8:	cmp	r8, r3
   219dc:	ble	219a0 <__assert_fail@plt+0xd348>
   219e0:	ldr	r2, [r5, #16]
   219e4:	cmp	r2, #0
   219e8:	bne	21a54 <__assert_fail@plt+0xd3fc>
   219ec:	ldr	r3, [r9]
   219f0:	ldr	r6, [r5]
   219f4:	tst	r3, #64	; 0x40
   219f8:	bne	21a80 <__assert_fail@plt+0xd428>
   219fc:	mov	r0, r5
   21a00:	mov	r5, r4
   21a04:	bl	13c44 <gcry_free@plt>
   21a08:	cmp	r4, #0
   21a0c:	streq	r6, [r7]
   21a10:	strne	r6, [r4]
   21a14:	cmp	r6, #0
   21a18:	bne	219ac <__assert_fail@plt+0xd354>
   21a1c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   21a20:	movw	r0, #22584	; 0x5838
   21a24:	add	r1, r4, #28
   21a28:	movt	r0, #4
   21a2c:	ldr	r2, [r6, #72]	; 0x48
   21a30:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21a34:	ldr	r0, [r4, #20]
   21a38:	b	21978 <__assert_fail@plt+0xd320>
   21a3c:	movw	r0, #22544	; 0x5810
   21a40:	add	r1, r5, #28
   21a44:	movt	r0, #4
   21a48:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21a4c:	ldr	r0, [r5, #20]
   21a50:	b	21904 <__assert_fail@plt+0xd2ac>
   21a54:	movw	r0, #22624	; 0x5860
   21a58:	add	r1, r5, #28
   21a5c:	movt	r0, #4
   21a60:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   21a64:	ldr	r6, [r5]
   21a68:	ldr	r3, [r5, #8]
   21a6c:	cmp	r6, #0
   21a70:	add	r3, r3, #600	; 0x258
   21a74:	str	r3, [r5, #8]
   21a78:	bne	219ac <__assert_fail@plt+0xd354>
   21a7c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   21a80:	movw	r0, #22684	; 0x589c
   21a84:	add	r1, r5, #28
   21a88:	movt	r0, #4
   21a8c:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21a90:	b	219fc <__assert_fail@plt+0xd3a4>
   21a94:	push	{r3, r4, r5, r6, r7, lr}
   21a98:	bic	r3, r1, #31
   21a9c:	mov	r7, r0
   21aa0:	add	r0, r3, #43	; 0x2b
   21aa4:	mov	r5, r1
   21aa8:	add	r6, r3, #32
   21aac:	bl	13f44 <gcry_malloc_secure@plt>
   21ab0:	subs	r4, r0, #0
   21ab4:	beq	21ad0 <__assert_fail@plt+0xd478>
   21ab8:	str	r6, [r4]
   21abc:	mov	r1, r7
   21ac0:	str	r5, [r4, #4]
   21ac4:	mov	r2, r5
   21ac8:	add	r0, r4, #8
   21acc:	bl	13ba8 <memcpy@plt>
   21ad0:	mov	r0, r4
   21ad4:	pop	{r3, r4, r5, r6, r7, pc}
   21ad8:	push	{r4, r5, r6, lr}
   21adc:	movw	r6, #48116	; 0xbbf4
   21ae0:	movt	r6, #5
   21ae4:	ldr	r3, [r6]
   21ae8:	tst	r3, #64	; 0x40
   21aec:	bne	21ba4 <__assert_fail@plt+0xd54c>
   21af0:	movw	r3, #47572	; 0xb9d4
   21af4:	movt	r3, #5
   21af8:	ldr	r4, [r3]
   21afc:	cmp	r4, #0
   21b00:	popeq	{r4, r5, r6, pc}
   21b04:	mov	r5, #0
   21b08:	b	21b38 <__assert_fail@plt+0xd4e0>
   21b0c:	ldr	r3, [r4, #20]
   21b10:	cmp	r3, #0
   21b14:	beq	21b2c <__assert_fail@plt+0xd4d4>
   21b18:	ldr	r3, [r6]
   21b1c:	tst	r3, #64	; 0x40
   21b20:	bne	21b90 <__assert_fail@plt+0xd538>
   21b24:	str	r5, [r4, #8]
   21b28:	str	r5, [r4, #12]
   21b2c:	ldr	r4, [r4]
   21b30:	cmp	r4, #0
   21b34:	beq	21b74 <__assert_fail@plt+0xd51c>
   21b38:	ldr	r3, [r4, #16]
   21b3c:	cmp	r3, #0
   21b40:	bne	21b0c <__assert_fail@plt+0xd4b4>
   21b44:	ldr	r0, [r4, #20]
   21b48:	cmp	r0, #0
   21b4c:	beq	21b2c <__assert_fail@plt+0xd4d4>
   21b50:	ldr	r3, [r6]
   21b54:	tst	r3, #64	; 0x40
   21b58:	bne	21b78 <__assert_fail@plt+0xd520>
   21b5c:	bl	13c44 <gcry_free@plt>
   21b60:	str	r5, [r4, #20]
   21b64:	str	r5, [r4, #8]
   21b68:	ldr	r4, [r4]
   21b6c:	cmp	r4, #0
   21b70:	bne	21b38 <__assert_fail@plt+0xd4e0>
   21b74:	pop	{r4, r5, r6, pc}
   21b78:	movw	r0, #22744	; 0x58d8
   21b7c:	add	r1, r4, #28
   21b80:	movt	r0, #4
   21b84:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21b88:	ldr	r0, [r4, #20]
   21b8c:	b	21b5c <__assert_fail@plt+0xd504>
   21b90:	movw	r0, #22764	; 0x58ec
   21b94:	add	r1, r4, #28
   21b98:	movt	r0, #4
   21b9c:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21ba0:	b	21b24 <__assert_fail@plt+0xd4cc>
   21ba4:	movw	r0, #22724	; 0x58c4
   21ba8:	movt	r0, #4
   21bac:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21bb0:	b	21af0 <__assert_fail@plt+0xd498>
   21bb4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21bb8:	movw	r4, #48116	; 0xbbf4
   21bbc:	movt	r4, #5
   21bc0:	mov	r8, r1
   21bc4:	mov	r5, r0
   21bc8:	mov	r9, r2
   21bcc:	ldr	r1, [r4]
   21bd0:	mov	r7, r3
   21bd4:	tst	r1, #64	; 0x40
   21bd8:	bne	21cbc <__assert_fail@plt+0xd664>
   21bdc:	bl	21898 <__assert_fail@plt+0xd240>
   21be0:	cmp	r7, #0
   21be4:	bne	21bf4 <__assert_fail@plt+0xd59c>
   21be8:	cmp	r8, #4
   21bec:	ldreq	r7, [r4, #68]	; 0x44
   21bf0:	ldrne	r7, [r4, #64]	; 0x40
   21bf4:	cmp	r8, #0
   21bf8:	cmpne	r7, #0
   21bfc:	beq	21cb4 <__assert_fail@plt+0xd65c>
   21c00:	movw	sl, #47572	; 0xb9d4
   21c04:	movt	sl, #5
   21c08:	ldr	r4, [sl]
   21c0c:	cmp	r4, #0
   21c10:	beq	21c40 <__assert_fail@plt+0xd5e8>
   21c14:	ldr	ip, [r4, #16]
   21c18:	add	r0, r4, #28
   21c1c:	mov	r1, r5
   21c20:	cmp	ip, #0
   21c24:	bne	21c34 <__assert_fail@plt+0xd5dc>
   21c28:	bl	13a28 <strcmp@plt>
   21c2c:	subs	r6, r0, #0
   21c30:	beq	21cd8 <__assert_fail@plt+0xd680>
   21c34:	ldr	r4, [r4]
   21c38:	cmp	r4, #0
   21c3c:	bne	21c14 <__assert_fail@plt+0xd5bc>
   21c40:	cmp	r9, #0
   21c44:	beq	21cb4 <__assert_fail@plt+0xd65c>
   21c48:	mov	r0, r5
   21c4c:	bl	14094 <strlen@plt>
   21c50:	add	r1, r0, #32
   21c54:	mov	r0, #1
   21c58:	bl	14190 <gcry_calloc@plt>
   21c5c:	subs	r4, r0, #0
   21c60:	beq	21d3c <__assert_fail@plt+0xd6e4>
   21c64:	mov	r1, r5
   21c68:	add	r0, r4, #28
   21c6c:	bl	13e78 <strcpy@plt>
   21c70:	bl	2d180 <__assert_fail@plt+0x18b28>
   21c74:	str	r7, [r4, #12]
   21c78:	str	r8, [r4, #24]
   21c7c:	mov	r3, r0
   21c80:	mov	r0, r9
   21c84:	str	r3, [r4, #8]
   21c88:	str	r3, [r4, #4]
   21c8c:	bl	14094 <strlen@plt>
   21c90:	add	r1, r0, #1
   21c94:	mov	r0, r9
   21c98:	bl	21a94 <__assert_fail@plt+0xd43c>
   21c9c:	cmp	r0, #0
   21ca0:	str	r0, [r4, #20]
   21ca4:	beq	21d4c <__assert_fail@plt+0xd6f4>
   21ca8:	ldr	r3, [sl]
   21cac:	str	r4, [sl]
   21cb0:	str	r3, [r4]
   21cb4:	mov	r0, #0
   21cb8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   21cbc:	mov	r2, r3
   21cc0:	movw	r0, #22796	; 0x590c
   21cc4:	mov	r1, r5
   21cc8:	movt	r0, #4
   21ccc:	mov	r3, r8
   21cd0:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21cd4:	b	21bdc <__assert_fail@plt+0xd584>
   21cd8:	ldr	r0, [r4, #20]
   21cdc:	cmp	r0, #0
   21ce0:	beq	21cec <__assert_fail@plt+0xd694>
   21ce4:	bl	13c44 <gcry_free@plt>
   21ce8:	str	r6, [r4, #20]
   21cec:	cmp	r9, #0
   21cf0:	beq	21cb4 <__assert_fail@plt+0xd65c>
   21cf4:	bl	2d180 <__assert_fail@plt+0x18b28>
   21cf8:	str	r7, [r4, #12]
   21cfc:	str	r8, [r4, #24]
   21d00:	mov	r3, r0
   21d04:	mov	r0, r9
   21d08:	str	r3, [r4, #8]
   21d0c:	str	r3, [r4, #4]
   21d10:	bl	14094 <strlen@plt>
   21d14:	add	r1, r0, #1
   21d18:	mov	r0, r9
   21d1c:	bl	21a94 <__assert_fail@plt+0xd43c>
   21d20:	cmp	r0, #0
   21d24:	str	r0, [r4, #20]
   21d28:	bne	21cb4 <__assert_fail@plt+0xd65c>
   21d2c:	movw	r0, #22844	; 0x593c
   21d30:	movt	r0, #4
   21d34:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   21d38:	b	21cb4 <__assert_fail@plt+0xd65c>
   21d3c:	movw	r0, #22892	; 0x596c
   21d40:	movt	r0, #4
   21d44:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   21d48:	b	21cb4 <__assert_fail@plt+0xd65c>
   21d4c:	movw	r0, #22844	; 0x593c
   21d50:	movt	r0, #4
   21d54:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   21d58:	mov	r0, r4
   21d5c:	bl	13c44 <gcry_free@plt>
   21d60:	b	21cb4 <__assert_fail@plt+0xd65c>
   21d64:	cmp	r1, #0
   21d68:	push	{r4, r5, r6, r7, r8, lr}
   21d6c:	mov	r6, r0
   21d70:	mov	r8, r2
   21d74:	beq	21ec8 <__assert_fail@plt+0xd870>
   21d78:	movw	r7, #48116	; 0xbbf4
   21d7c:	movt	r7, #5
   21d80:	ldr	r3, [r7]
   21d84:	tst	r3, #64	; 0x40
   21d88:	bne	21e84 <__assert_fail@plt+0xd82c>
   21d8c:	bl	21898 <__assert_fail@plt+0xd240>
   21d90:	movw	r3, #47572	; 0xb9d4
   21d94:	movt	r3, #5
   21d98:	ldr	r5, [r3]
   21d9c:	cmp	r5, #0
   21da0:	beq	21e0c <__assert_fail@plt+0xd7b4>
   21da4:	mov	r4, r5
   21da8:	ldr	r3, [r4, #16]
   21dac:	add	r0, r4, #28
   21db0:	mov	r1, r6
   21db4:	cmp	r3, #0
   21db8:	bne	21dd4 <__assert_fail@plt+0xd77c>
   21dbc:	ldr	r3, [r4, #20]
   21dc0:	cmp	r3, #0
   21dc4:	beq	21dd4 <__assert_fail@plt+0xd77c>
   21dc8:	bl	13a28 <strcmp@plt>
   21dcc:	cmp	r0, #0
   21dd0:	beq	21e54 <__assert_fail@plt+0xd7fc>
   21dd4:	ldr	r4, [r4]
   21dd8:	cmp	r4, #0
   21ddc:	bne	21da8 <__assert_fail@plt+0xd750>
   21de0:	ldr	r3, [r5, #20]
   21de4:	add	r0, r5, #28
   21de8:	mov	r1, r6
   21dec:	cmp	r3, #0
   21df0:	beq	21e00 <__assert_fail@plt+0xd7a8>
   21df4:	bl	13a28 <strcmp@plt>
   21df8:	cmp	r0, #0
   21dfc:	beq	21e24 <__assert_fail@plt+0xd7cc>
   21e00:	ldr	r5, [r5]
   21e04:	cmp	r5, #0
   21e08:	bne	21de0 <__assert_fail@plt+0xd788>
   21e0c:	ldr	r3, [r7]
   21e10:	tst	r3, #64	; 0x40
   21e14:	bne	21eb8 <__assert_fail@plt+0xd860>
   21e18:	mov	r0, #0
   21e1c:	str	r0, [r8]
   21e20:	pop	{r4, r5, r6, r7, r8, pc}
   21e24:	bl	2d180 <__assert_fail@plt+0x18b28>
   21e28:	ldr	r3, [r7]
   21e2c:	tst	r3, #64	; 0x40
   21e30:	str	r0, [r5, #8]
   21e34:	bne	21e98 <__assert_fail@plt+0xd840>
   21e38:	ldr	r3, [r5, #16]
   21e3c:	add	r3, r3, #1
   21e40:	str	r3, [r5, #16]
   21e44:	str	r5, [r8]
   21e48:	ldr	r0, [r5, #20]
   21e4c:	add	r0, r0, #8
   21e50:	pop	{r4, r5, r6, r7, r8, pc}
   21e54:	bl	2d180 <__assert_fail@plt+0x18b28>
   21e58:	ldr	r3, [r7]
   21e5c:	tst	r3, #64	; 0x40
   21e60:	str	r0, [r4, #8]
   21e64:	bne	21ea8 <__assert_fail@plt+0xd850>
   21e68:	ldr	r3, [r4, #16]
   21e6c:	add	r3, r3, #1
   21e70:	str	r3, [r4, #16]
   21e74:	str	r4, [r8]
   21e78:	ldr	r0, [r4, #20]
   21e7c:	add	r0, r0, #8
   21e80:	pop	{r4, r5, r6, r7, r8, pc}
   21e84:	movw	r0, #22940	; 0x599c
   21e88:	mov	r1, r6
   21e8c:	movt	r0, #4
   21e90:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21e94:	b	21d8c <__assert_fail@plt+0xd734>
   21e98:	movw	r0, #22980	; 0x59c4
   21e9c:	movt	r0, #4
   21ea0:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21ea4:	b	21e38 <__assert_fail@plt+0xd7e0>
   21ea8:	movw	r0, #22968	; 0x59b8
   21eac:	movt	r0, #4
   21eb0:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21eb4:	b	21e68 <__assert_fail@plt+0xd810>
   21eb8:	movw	r0, #23000	; 0x59d8
   21ebc:	movt	r0, #4
   21ec0:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   21ec4:	b	21e18 <__assert_fail@plt+0xd7c0>
   21ec8:	mov	r0, r1
   21ecc:	pop	{r4, r5, r6, r7, r8, pc}
   21ed0:	movw	r3, #47572	; 0xb9d4
   21ed4:	movt	r3, #5
   21ed8:	ldr	r1, [r3]
   21edc:	cmp	r1, #0
   21ee0:	bxeq	lr
   21ee4:	ldr	r3, [r0]
   21ee8:	cmp	r1, r3
   21eec:	bne	21efc <__assert_fail@plt+0xd8a4>
   21ef0:	b	21f0c <__assert_fail@plt+0xd8b4>
   21ef4:	cmp	r1, r3
   21ef8:	beq	21f0c <__assert_fail@plt+0xd8b4>
   21efc:	ldr	r1, [r1]
   21f00:	cmp	r1, #0
   21f04:	bne	21ef4 <__assert_fail@plt+0xd89c>
   21f08:	bx	lr
   21f0c:	ldr	r3, [r1, #16]
   21f10:	cmp	r3, #0
   21f14:	subne	r3, r3, #1
   21f18:	strne	r3, [r1, #16]
   21f1c:	bxne	lr
   21f20:	movw	r0, #23012	; 0x59e4
   21f24:	add	r1, r1, #28
   21f28:	movt	r0, #4
   21f2c:	b	3f4d0 <__assert_fail@plt+0x2ae78>
   21f30:	bx	lr
   21f34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   21f38:	movw	r5, #47296	; 0xb8c0
   21f3c:	ldr	r4, [r0, #24]
   21f40:	movt	r5, #5
   21f44:	sub	sp, sp, #64	; 0x40
   21f48:	mov	r1, r0
   21f4c:	ldr	r2, [r5]
   21f50:	ldr	r3, [r4, #8]
   21f54:	cmp	r3, #0
   21f58:	str	r2, [sp, #60]	; 0x3c
   21f5c:	bne	22184 <__assert_fail@plt+0xdb2c>
   21f60:	add	r8, sp, #28
   21f64:	str	r3, [r4, #12]
   21f68:	ldr	r0, [r4, #4]
   21f6c:	add	r3, sp, #8
   21f70:	add	r1, r1, #36	; 0x24
   21f74:	str	r3, [sp]
   21f78:	mov	r2, r8
   21f7c:	add	r3, r4, #8
   21f80:	bl	25a88 <__assert_fail@plt+0x11430>
   21f84:	subs	r7, r0, #0
   21f88:	bne	2207c <__assert_fail@plt+0xda24>
   21f8c:	movw	r6, #48116	; 0xbbf4
   21f90:	movt	r6, #5
   21f94:	ldr	r3, [r6, #96]	; 0x60
   21f98:	cmp	r3, #0
   21f9c:	beq	2207c <__assert_fail@plt+0xda24>
   21fa0:	ldr	r3, [r4]
   21fa4:	ldr	r3, [r3, #128]	; 0x80
   21fa8:	cmp	r3, #0
   21fac:	bne	2207c <__assert_fail@plt+0xda24>
   21fb0:	ldrb	r3, [sp, #28]
   21fb4:	cmp	r3, #0
   21fb8:	beq	22098 <__assert_fail@plt+0xda40>
   21fbc:	add	r0, sp, #12
   21fc0:	bl	2d1c4 <__assert_fail@plt+0x18b6c>
   21fc4:	ldrb	r3, [sp, #28]
   21fc8:	cmp	r3, #0
   21fcc:	beq	22164 <__assert_fail@plt+0xdb0c>
   21fd0:	mov	r0, r8
   21fd4:	bl	14094 <strlen@plt>
   21fd8:	cmp	r0, #15
   21fdc:	bne	221a4 <__assert_fail@plt+0xdb4c>
   21fe0:	ldrb	r3, [sp, #36]	; 0x24
   21fe4:	cmp	r3, #84	; 0x54
   21fe8:	bne	221a4 <__assert_fail@plt+0xdb4c>
   21fec:	ldm	r8, {r0, r1, r2, r3}
   21ff0:	add	r9, sp, #44	; 0x2c
   21ff4:	mov	ip, r9
   21ff8:	lsr	lr, r3, #16
   21ffc:	stmia	ip!, {r0, r1, r2}
   22000:	strh	r3, [ip], #2
   22004:	strb	lr, [ip]
   22008:	strb	r7, [sp, #59]	; 0x3b
   2200c:	mov	r0, r9
   22010:	ldr	r1, [r6, #96]	; 0x60
   22014:	bl	2dd24 <__assert_fail@plt+0x196cc>
   22018:	subs	sl, r0, #0
   2201c:	movne	r7, sl
   22020:	bne	2207c <__assert_fail@plt+0xda24>
   22024:	add	r0, sp, #12
   22028:	mov	r1, r9
   2202c:	bl	13a28 <strcmp@plt>
   22030:	cmp	r0, #0
   22034:	ble	2207c <__assert_fail@plt+0xda24>
   22038:	mov	r2, #5
   2203c:	mov	r0, sl
   22040:	movw	r1, #23332	; 0x5b24
   22044:	movt	r1, #4
   22048:	bl	13cc8 <dcgettext@plt>
   2204c:	mov	r1, r8
   22050:	add	r2, sp, #32
   22054:	add	r3, sp, #34	; 0x22
   22058:	bl	2ed14 <__assert_fail@plt+0x1a6bc>
   2205c:	subs	r8, r0, #0
   22060:	bne	220b4 <__assert_fail@plt+0xda5c>
   22064:	bl	14580 <gpg_err_code_from_syserror@plt>
   22068:	cmp	r0, #0
   2206c:	moveq	r7, r0
   22070:	beq	2207c <__assert_fail@plt+0xda24>
   22074:	uxth	r0, r0
   22078:	orr	r7, r0, #67108864	; 0x4000000
   2207c:	ldr	r2, [sp, #60]	; 0x3c
   22080:	mov	r0, r7
   22084:	ldr	r3, [r5]
   22088:	cmp	r2, r3
   2208c:	bne	22180 <__assert_fail@plt+0xdb28>
   22090:	add	sp, sp, #64	; 0x40
   22094:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   22098:	mov	r2, #5
   2209c:	movw	r1, #23240	; 0x5ac8
   220a0:	movt	r1, #4
   220a4:	bl	13cc8 <dcgettext@plt>
   220a8:	bl	13f2c <gcry_strdup@plt>
   220ac:	subs	r8, r0, #0
   220b0:	beq	22170 <__assert_fail@plt+0xdb18>
   220b4:	ldr	r6, [r6, #80]	; 0x50
   220b8:	cmp	r6, #0
   220bc:	beq	22110 <__assert_fail@plt+0xdab8>
   220c0:	mov	r2, #5
   220c4:	movw	r1, #23420	; 0x5b7c
   220c8:	mov	r0, #0
   220cc:	movt	r1, #4
   220d0:	ldr	r6, [r4]
   220d4:	bl	13cc8 <dcgettext@plt>
   220d8:	mov	r3, #0
   220dc:	mov	r1, r8
   220e0:	str	r3, [sp]
   220e4:	mov	r2, r0
   220e8:	mov	r0, r6
   220ec:	bl	2116c <__assert_fail@plt+0xcb14>
   220f0:	cmp	r0, #0
   220f4:	bne	22100 <__assert_fail@plt+0xdaa8>
   220f8:	mov	r3, #1
   220fc:	str	r3, [r4, #12]
   22100:	mov	r0, r8
   22104:	mov	r7, #0
   22108:	bl	13c44 <gcry_free@plt>
   2210c:	b	2207c <__assert_fail@plt+0xda24>
   22110:	mov	r2, #5
   22114:	movw	r1, #23420	; 0x5b7c
   22118:	mov	r0, r6
   2211c:	movt	r1, #4
   22120:	ldr	r7, [r4]
   22124:	bl	13cc8 <dcgettext@plt>
   22128:	mov	r2, #5
   2212c:	movw	r1, #23440	; 0x5b90
   22130:	movt	r1, #4
   22134:	mov	r9, r0
   22138:	mov	r0, r6
   2213c:	bl	13cc8 <dcgettext@plt>
   22140:	mov	r2, r9
   22144:	str	r6, [sp]
   22148:	mov	r1, r8
   2214c:	mov	r3, r0
   22150:	mov	r0, r7
   22154:	bl	2116c <__assert_fail@plt+0xcb14>
   22158:	cmp	r0, #0
   2215c:	bne	22100 <__assert_fail@plt+0xdaa8>
   22160:	b	220f8 <__assert_fail@plt+0xdaa0>
   22164:	add	r9, sp, #64	; 0x40
   22168:	strb	r7, [r9, #-20]!	; 0xffffffec
   2216c:	b	2200c <__assert_fail@plt+0xd9b4>
   22170:	bl	14580 <gpg_err_code_from_syserror@plt>
   22174:	cmp	r0, #0
   22178:	bne	22074 <__assert_fail@plt+0xda1c>
   2217c:	b	2207c <__assert_fail@plt+0xda24>
   22180:	bl	13cec <__stack_chk_fail@plt>
   22184:	movw	r0, #23204	; 0x5aa4
   22188:	movw	r1, #23228	; 0x5abc
   2218c:	movw	r3, #23060	; 0x5a14
   22190:	movt	r0, #4
   22194:	movt	r1, #4
   22198:	mov	r2, #144	; 0x90
   2219c:	movt	r3, #4
   221a0:	bl	14658 <__assert_fail@plt>
   221a4:	movw	r0, #23312	; 0x5b10
   221a8:	mov	r1, #133	; 0x85
   221ac:	movt	r0, #4
   221b0:	ldr	r2, [pc]	; 221b8 <__assert_fail@plt+0xdb60>
   221b4:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   221b8:	andeq	r5, r4, r8, lsr #20
   221bc:	push	{r4, r5, r6, r7, r8, r9, lr}
   221c0:	movw	r4, #47296	; 0xb8c0
   221c4:	movt	r4, #5
   221c8:	sub	sp, sp, #172	; 0xac
   221cc:	mov	r5, #0
   221d0:	add	r2, sp, #116	; 0x74
   221d4:	ldr	r3, [r4]
   221d8:	mov	r7, r1
   221dc:	str	r5, [r1]
   221e0:	mov	r1, #20
   221e4:	str	r3, [sp, #164]	; 0xa4
   221e8:	bl	2e26c <__assert_fail@plt+0x19c14>
   221ec:	movw	r2, #17180	; 0x431c
   221f0:	movt	r2, #4
   221f4:	movw	ip, #48116	; 0xbbf4
   221f8:	movt	ip, #5
   221fc:	ldm	r2, {r0, r1}
   22200:	mov	r3, r5
   22204:	add	r2, sp, #116	; 0x74
   22208:	strb	r1, [sp, #160]	; 0xa0
   2220c:	movw	r1, #1708	; 0x6ac
   22210:	str	r0, [sp, #156]	; 0x9c
   22214:	movt	r1, #4
   22218:	ldr	r0, [ip, #20]
   2221c:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   22220:	movw	r1, #19760	; 0x4d30
   22224:	movt	r1, #4
   22228:	mov	r5, r0
   2222c:	bl	14490 <fopen64@plt>
   22230:	subs	r6, r0, #0
   22234:	beq	22334 <__assert_fail@plt+0xdcdc>
   22238:	bl	14244 <fileno@plt>
   2223c:	add	r2, sp, #8
   22240:	mov	r1, r0
   22244:	mov	r0, #3
   22248:	bl	13ddc <__fxstat64@plt>
   2224c:	cmp	r0, #0
   22250:	bne	222e8 <__assert_fail@plt+0xdc90>
   22254:	ldr	r8, [sp, #56]	; 0x38
   22258:	add	r0, r8, #1
   2225c:	bl	139c8 <gcry_malloc@plt>
   22260:	subs	r9, r0, #0
   22264:	beq	22280 <__assert_fail@plt+0xdc28>
   22268:	mov	r1, r8
   2226c:	mov	r2, #1
   22270:	mov	r3, r6
   22274:	bl	13e9c <fread@plt>
   22278:	cmp	r0, #1
   2227c:	beq	2238c <__assert_fail@plt+0xdd34>
   22280:	bl	14580 <gpg_err_code_from_syserror@plt>
   22284:	cmp	r0, #0
   22288:	moveq	r7, r0
   2228c:	uxthne	r7, r0
   22290:	orrne	r7, r7, #67108864	; 0x4000000
   22294:	bl	14148 <__errno_location@plt>
   22298:	ldr	r0, [r0]
   2229c:	bl	13fa4 <strerror@plt>
   222a0:	mov	r1, r5
   222a4:	mov	r2, r0
   222a8:	movw	r0, #23488	; 0x5bc0
   222ac:	movt	r0, #4
   222b0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   222b4:	mov	r0, r5
   222b8:	bl	13c44 <gcry_free@plt>
   222bc:	mov	r0, r6
   222c0:	bl	142c8 <fclose@plt>
   222c4:	mov	r0, r9
   222c8:	bl	13c44 <gcry_free@plt>
   222cc:	mov	r0, r7
   222d0:	ldr	r2, [sp, #164]	; 0xa4
   222d4:	ldr	r3, [r4]
   222d8:	cmp	r2, r3
   222dc:	bne	223f8 <__assert_fail@plt+0xdda0>
   222e0:	add	sp, sp, #172	; 0xac
   222e4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   222e8:	bl	14580 <gpg_err_code_from_syserror@plt>
   222ec:	cmp	r0, #0
   222f0:	uxthne	r7, r0
   222f4:	orrne	r7, r7, #67108864	; 0x4000000
   222f8:	moveq	r7, r0
   222fc:	bl	14148 <__errno_location@plt>
   22300:	ldr	r0, [r0]
   22304:	bl	13fa4 <strerror@plt>
   22308:	mov	r1, r5
   2230c:	mov	r2, r0
   22310:	movw	r0, #23464	; 0x5ba8
   22314:	movt	r0, #4
   22318:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2231c:	mov	r0, r5
   22320:	bl	13c44 <gcry_free@plt>
   22324:	mov	r0, r6
   22328:	bl	142c8 <fclose@plt>
   2232c:	mov	r0, r7
   22330:	b	222d0 <__assert_fail@plt+0xdc78>
   22334:	bl	14580 <gpg_err_code_from_syserror@plt>
   22338:	cmp	r0, #0
   2233c:	beq	22364 <__assert_fail@plt+0xdd0c>
   22340:	uxth	r6, r0
   22344:	movw	r3, #32849	; 0x8051
   22348:	cmp	r6, r3
   2234c:	orr	r6, r6, #67108864	; 0x4000000
   22350:	bne	22368 <__assert_fail@plt+0xdd10>
   22354:	mov	r0, r5
   22358:	bl	13c44 <gcry_free@plt>
   2235c:	mov	r0, r6
   22360:	b	222d0 <__assert_fail@plt+0xdc78>
   22364:	mov	r6, r0
   22368:	bl	14148 <__errno_location@plt>
   2236c:	ldr	r0, [r0]
   22370:	bl	13fa4 <strerror@plt>
   22374:	mov	r1, r5
   22378:	mov	r2, r0
   2237c:	movw	r0, #18788	; 0x4964
   22380:	movt	r0, #4
   22384:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   22388:	b	22354 <__assert_fail@plt+0xdcfc>
   2238c:	mov	r3, r8
   22390:	mov	r1, sp
   22394:	mov	r2, r9
   22398:	add	r0, sp, #4
   2239c:	bl	13bf0 <gcry_sexp_sscan@plt>
   223a0:	mov	r8, r0
   223a4:	mov	r0, r5
   223a8:	bl	13c44 <gcry_free@plt>
   223ac:	mov	r0, r6
   223b0:	bl	142c8 <fclose@plt>
   223b4:	mov	r0, r9
   223b8:	bl	13c44 <gcry_free@plt>
   223bc:	cmp	r8, #0
   223c0:	ldreq	r3, [sp, #4]
   223c4:	moveq	r0, r8
   223c8:	streq	r3, [r7]
   223cc:	beq	222d0 <__assert_fail@plt+0xdc78>
   223d0:	mov	r0, r8
   223d4:	ldr	r5, [sp]
   223d8:	bl	13a64 <gpg_strerror@plt>
   223dc:	mov	r1, r5
   223e0:	mov	r2, r0
   223e4:	movw	r0, #23512	; 0x5bd8
   223e8:	movt	r0, #4
   223ec:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   223f0:	mov	r0, r8
   223f4:	b	222d0 <__assert_fail@plt+0xdc78>
   223f8:	bl	13cec <__stack_chk_fail@plt>
   223fc:	push	{r4, r5, r6, r7, r8, r9, lr}
   22400:	movw	r4, #47296	; 0xb8c0
   22404:	movt	r4, #5
   22408:	sub	sp, sp, #60	; 0x3c
   2240c:	mov	r8, r1
   22410:	mov	r7, r2
   22414:	ldr	ip, [r4]
   22418:	mov	r1, #20
   2241c:	add	r2, sp, #4
   22420:	mov	r6, r3
   22424:	str	ip, [sp, #52]	; 0x34
   22428:	bl	2e26c <__assert_fail@plt+0x19c14>
   2242c:	movw	ip, #17180	; 0x431c
   22430:	movt	ip, #4
   22434:	movw	lr, #48116	; 0xbbf4
   22438:	movt	lr, #5
   2243c:	ldm	ip, {r0, r1}
   22440:	add	r2, sp, #4
   22444:	mov	r3, #0
   22448:	strb	r1, [sp, #48]	; 0x30
   2244c:	movw	r1, #1708	; 0x6ac
   22450:	str	r0, [sp, #44]	; 0x2c
   22454:	movt	r1, #4
   22458:	ldr	r0, [lr, #20]
   2245c:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   22460:	cmp	r6, #0
   22464:	movwne	r1, #577	; 0x241
   22468:	mov	r5, r0
   2246c:	beq	2256c <__assert_fail@plt+0xdf14>
   22470:	mov	r0, r5
   22474:	mov	r2, #416	; 0x1a0
   22478:	bl	13efc <open64@plt>
   2247c:	subs	r6, r0, #0
   22480:	blt	22524 <__assert_fail@plt+0xdecc>
   22484:	movw	r1, #23588	; 0x5c24
   22488:	movt	r1, #4
   2248c:	bl	13950 <fdopen@plt>
   22490:	subs	r9, r0, #0
   22494:	beq	22610 <__assert_fail@plt+0xdfb8>
   22498:	mov	r0, r8
   2249c:	mov	r1, r7
   224a0:	mov	r2, #1
   224a4:	mov	r3, r9
   224a8:	bl	13e18 <fwrite@plt>
   224ac:	cmp	r0, #1
   224b0:	beq	225a0 <__assert_fail@plt+0xdf48>
   224b4:	bl	14148 <__errno_location@plt>
   224b8:	mov	r7, r0
   224bc:	ldr	r0, [r0]
   224c0:	bl	13b6c <gpg_err_code_from_errno@plt>
   224c4:	cmp	r0, #0
   224c8:	uxthne	r6, r0
   224cc:	moveq	r6, r0
   224d0:	ldr	r0, [r7]
   224d4:	orrne	r6, r6, #67108864	; 0x4000000
   224d8:	bl	13fa4 <strerror@plt>
   224dc:	mov	r1, r5
   224e0:	mov	r2, r0
   224e4:	movw	r0, #23592	; 0x5c28
   224e8:	movt	r0, #4
   224ec:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   224f0:	mov	r0, r9
   224f4:	bl	142c8 <fclose@plt>
   224f8:	mov	r0, r5
   224fc:	bl	14478 <remove@plt>
   22500:	mov	r0, r5
   22504:	bl	13c44 <gcry_free@plt>
   22508:	ldr	r2, [sp, #52]	; 0x34
   2250c:	mov	r0, r6
   22510:	ldr	r3, [r4]
   22514:	cmp	r2, r3
   22518:	bne	22630 <__assert_fail@plt+0xdfd8>
   2251c:	add	sp, sp, #60	; 0x3c
   22520:	pop	{r4, r5, r6, r7, r8, r9, pc}
   22524:	bl	14148 <__errno_location@plt>
   22528:	mov	r7, r0
   2252c:	ldr	r0, [r0]
   22530:	bl	13b6c <gpg_err_code_from_errno@plt>
   22534:	cmp	r0, #0
   22538:	moveq	r6, r0
   2253c:	uxthne	r6, r0
   22540:	orrne	r6, r6, #67108864	; 0x4000000
   22544:	ldr	r0, [r7]
   22548:	bl	13fa4 <strerror@plt>
   2254c:	mov	r1, r5
   22550:	mov	r2, r0
   22554:	movw	r0, #18764	; 0x494c
   22558:	movt	r0, #4
   2255c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   22560:	mov	r0, r5
   22564:	bl	13c44 <gcry_free@plt>
   22568:	b	22508 <__assert_fail@plt+0xdeb0>
   2256c:	mov	r1, r6
   22570:	bl	142b0 <access@plt>
   22574:	cmp	r0, #0
   22578:	movne	r1, #193	; 0xc1
   2257c:	bne	22470 <__assert_fail@plt+0xde18>
   22580:	mov	r1, r5
   22584:	movw	r0, #23548	; 0x5bfc
   22588:	movt	r0, #4
   2258c:	mov	r6, #67108865	; 0x4000001
   22590:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   22594:	mov	r0, r5
   22598:	bl	13c44 <gcry_free@plt>
   2259c:	b	22508 <__assert_fail@plt+0xdeb0>
   225a0:	mov	r0, r9
   225a4:	bl	142c8 <fclose@plt>
   225a8:	subs	r6, r0, #0
   225ac:	beq	22600 <__assert_fail@plt+0xdfa8>
   225b0:	bl	14148 <__errno_location@plt>
   225b4:	mov	r7, r0
   225b8:	ldr	r0, [r0]
   225bc:	bl	13b6c <gpg_err_code_from_errno@plt>
   225c0:	cmp	r0, #0
   225c4:	uxthne	r6, r0
   225c8:	moveq	r6, r0
   225cc:	ldr	r0, [r7]
   225d0:	orrne	r6, r6, #67108864	; 0x4000000
   225d4:	bl	13fa4 <strerror@plt>
   225d8:	mov	r1, r5
   225dc:	mov	r2, r0
   225e0:	movw	r0, #23616	; 0x5c40
   225e4:	movt	r0, #4
   225e8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   225ec:	mov	r0, r5
   225f0:	bl	14478 <remove@plt>
   225f4:	mov	r0, r5
   225f8:	bl	13c44 <gcry_free@plt>
   225fc:	b	22508 <__assert_fail@plt+0xdeb0>
   22600:	bl	1b7a8 <__assert_fail@plt+0x7150>
   22604:	mov	r0, r5
   22608:	bl	13c44 <gcry_free@plt>
   2260c:	b	22508 <__assert_fail@plt+0xdeb0>
   22610:	bl	14148 <__errno_location@plt>
   22614:	ldr	r8, [r0]
   22618:	mov	r7, r0
   2261c:	mov	r0, r6
   22620:	bl	145ec <close@plt>
   22624:	str	r8, [r7]
   22628:	mov	r0, r8
   2262c:	b	22530 <__assert_fail@plt+0xded8>
   22630:	bl	13cec <__stack_chk_fail@plt>
   22634:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22638:	sub	sp, sp, #156	; 0x9c
   2263c:	movw	r4, #47296	; 0xb8c0
   22640:	movt	r4, #5
   22644:	ldr	r6, [sp, #200]	; 0xc8
   22648:	subs	fp, r3, #0
   2264c:	ldr	r3, [r4]
   22650:	mov	r7, r2
   22654:	mov	r9, r0
   22658:	mov	r2, #0
   2265c:	mov	r8, r1
   22660:	str	r2, [r6]
   22664:	mov	r0, r7
   22668:	strne	r2, [fp]
   2266c:	add	r1, sp, #68	; 0x44
   22670:	str	r3, [sp, #148]	; 0x94
   22674:	ldr	sl, [sp, #196]	; 0xc4
   22678:	bl	221bc <__assert_fail@plt+0xdb64>
   2267c:	cmp	r0, #0
   22680:	movne	r5, r0
   22684:	beq	226a4 <__assert_fail@plt+0xe04c>
   22688:	ldr	r2, [sp, #148]	; 0x94
   2268c:	mov	r0, r5
   22690:	ldr	r3, [r4]
   22694:	cmp	r2, r3
   22698:	bne	22dbc <__assert_fail@plt+0xe764>
   2269c:	add	sp, sp, #156	; 0x9c
   226a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   226a4:	ldr	r0, [sp, #68]	; 0x44
   226a8:	add	r1, sp, #60	; 0x3c
   226ac:	add	r2, sp, #64	; 0x40
   226b0:	bl	2b7dc <__assert_fail@plt+0x17184>
   226b4:	subs	r5, r0, #0
   226b8:	bne	22688 <__assert_fail@plt+0xe030>
   226bc:	ldr	r0, [sp, #60]	; 0x3c
   226c0:	bl	2666c <__assert_fail@plt+0x12014>
   226c4:	cmp	r0, #2
   226c8:	beq	227d8 <__assert_fail@plt+0xe180>
   226cc:	cmp	r0, #3
   226d0:	beq	22784 <__assert_fail@plt+0xe12c>
   226d4:	cmp	r0, #1
   226d8:	beq	2270c <__assert_fail@plt+0xe0b4>
   226dc:	movw	r0, #23792	; 0x5cf0
   226e0:	movt	r0, #4
   226e4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   226e8:	mov	r5, #7
   226ec:	movt	r5, #1024	; 0x400
   226f0:	ldr	r0, [sp, #68]	; 0x44
   226f4:	bl	13be4 <gcry_sexp_release@plt>
   226f8:	mov	r3, #0
   226fc:	str	r3, [sp, #68]	; 0x44
   22700:	ldr	r0, [sp, #60]	; 0x3c
   22704:	bl	13c44 <gcry_free@plt>
   22708:	b	22688 <__assert_fail@plt+0xe030>
   2270c:	ldr	r0, [sp, #68]	; 0x44
   22710:	bl	13be4 <gcry_sexp_release@plt>
   22714:	str	r5, [sp, #68]	; 0x44
   22718:	mov	r1, #0
   2271c:	ldr	r0, [sp, #60]	; 0x3c
   22720:	mov	r2, r1
   22724:	mov	r3, r1
   22728:	bl	14604 <gcry_sexp_canon_len@plt>
   2272c:	add	r1, sp, #88	; 0x58
   22730:	ldr	r2, [sp, #60]	; 0x3c
   22734:	mov	r7, r0
   22738:	add	r0, sp, #68	; 0x44
   2273c:	mov	r3, r7
   22740:	bl	13bf0 <gcry_sexp_sscan@plt>
   22744:	cmp	r7, #0
   22748:	ldr	r1, [sp, #60]	; 0x3c
   2274c:	mov	r5, r0
   22750:	beq	22c34 <__assert_fail@plt+0xe5dc>
   22754:	add	r3, r1, r7
   22758:	mov	r2, #0
   2275c:	strb	r2, [r1], #1
   22760:	cmp	r1, r3
   22764:	bne	2275c <__assert_fail@plt+0xe104>
   22768:	ldr	r0, [sp, #60]	; 0x3c
   2276c:	bl	13c44 <gcry_free@plt>
   22770:	cmp	r5, #0
   22774:	bne	22c04 <__assert_fail@plt+0xe5ac>
   22778:	ldr	r3, [sp, #68]	; 0x44
   2277c:	str	r3, [r6]
   22780:	b	22688 <__assert_fail@plt+0xe030>
   22784:	cmp	fp, #0
   22788:	beq	22c28 <__assert_fail@plt+0xe5d0>
   2278c:	ldr	r0, [sp, #60]	; 0x3c
   22790:	add	r1, sp, #88	; 0x58
   22794:	bl	26c3c <__assert_fail@plt+0x125e4>
   22798:	subs	r5, r0, #0
   2279c:	beq	22c3c <__assert_fail@plt+0xe5e4>
   227a0:	mov	r0, r5
   227a4:	mov	r7, r5
   227a8:	bl	13a64 <gpg_strerror@plt>
   227ac:	mov	r1, r0
   227b0:	movw	r0, #23764	; 0x5cd4
   227b4:	movt	r0, #4
   227b8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   227bc:	ldr	r0, [sp, #68]	; 0x44
   227c0:	bl	13be4 <gcry_sexp_release@plt>
   227c4:	cmp	r7, #0
   227c8:	mov	r3, #0
   227cc:	str	r3, [sp, #68]	; 0x44
   227d0:	beq	22718 <__assert_fail@plt+0xe0c0>
   227d4:	b	22700 <__assert_fail@plt+0xe0a8>
   227d8:	mov	r2, r5
   227dc:	movw	r1, #19328	; 0x4b80
   227e0:	ldr	r0, [sp, #68]	; 0x44
   227e4:	movt	r1, #4
   227e8:	bl	13e84 <gcry_sexp_find_token@plt>
   227ec:	subs	r5, r0, #0
   227f0:	beq	22c7c <__assert_fail@plt+0xe624>
   227f4:	mov	r1, #1
   227f8:	bl	141d8 <gcry_sexp_nth_string@plt>
   227fc:	str	r0, [sp, #28]
   22800:	mov	r0, r5
   22804:	bl	13be4 <gcry_sexp_release@plt>
   22808:	cmp	r8, #0
   2280c:	beq	22c8c <__assert_fail@plt+0xe634>
   22810:	ldr	r3, [sp, #28]
   22814:	cmp	r3, #0
   22818:	beq	22cf0 <__assert_fail@plt+0xe698>
   2281c:	ldr	r3, [sp, #28]
   22820:	str	r3, [sp, #24]
   22824:	add	r2, sp, #152	; 0x98
   22828:	ldr	r0, [sp, #24]
   2282c:	mov	r3, #0
   22830:	str	r3, [sp, #20]
   22834:	str	r3, [r2, #-64]!	; 0xffffffc0
   22838:	str	r2, [sp, #32]
   2283c:	bl	14094 <strlen@plt>
   22840:	ldr	r3, [sp, #20]
   22844:	mov	r5, r3
   22848:	str	r3, [sp, #12]
   2284c:	mov	ip, r0
   22850:	mov	r0, r8
   22854:	str	ip, [sp, #16]
   22858:	bl	14094 <strlen@plt>
   2285c:	ldr	r1, [sp, #68]	; 0x44
   22860:	mov	r2, #1
   22864:	ldr	r3, [sp, #12]
   22868:	mov	fp, r2
   2286c:	ldr	ip, [sp, #16]
   22870:	str	r9, [sp, #36]	; 0x24
   22874:	mov	r9, r5
   22878:	str	r7, [sp, #40]	; 0x28
   2287c:	str	sl, [sp, #44]	; 0x2c
   22880:	mov	sl, r8
   22884:	str	r6, [sp, #48]	; 0x30
   22888:	mov	r8, r3
   2288c:	str	r4, [sp, #52]	; 0x34
   22890:	mov	r6, ip
   22894:	mov	r4, r1
   22898:	mov	r7, r0
   2289c:	cmp	r7, #0
   228a0:	beq	229a8 <__assert_fail@plt+0xe350>
   228a4:	mov	r5, #0
   228a8:	mov	r1, r5
   228ac:	b	228fc <__assert_fail@plt+0xe2a4>
   228b0:	cmp	r3, #70	; 0x46
   228b4:	beq	22968 <__assert_fail@plt+0xe310>
   228b8:	cmp	r3, #99	; 0x63
   228bc:	beq	22944 <__assert_fail@plt+0xe2ec>
   228c0:	cmp	r3, #37	; 0x25
   228c4:	beq	22928 <__assert_fail@plt+0xe2d0>
   228c8:	cmp	r8, #0
   228cc:	addeq	r9, r9, #2
   228d0:	movne	r3, r8
   228d4:	movne	r2, #37	; 0x25
   228d8:	strbne	r2, [r3], #2
   228dc:	movne	r1, #0
   228e0:	ldrbne	r2, [sl, r5]
   228e4:	moveq	r1, r8
   228e8:	strbne	r2, [r8, #1]
   228ec:	movne	r8, r3
   228f0:	add	r5, r5, #1
   228f4:	cmp	r5, r7
   228f8:	beq	229a8 <__assert_fail@plt+0xe350>
   228fc:	cmp	r1, #0
   22900:	ldrb	r3, [sl, r5]
   22904:	bne	228b0 <__assert_fail@plt+0xe258>
   22908:	cmp	r3, #37	; 0x25
   2290c:	moveq	r1, #1
   22910:	beq	228f0 <__assert_fail@plt+0xe298>
   22914:	cmp	r8, #0
   22918:	strbne	r3, [r8]
   2291c:	addeq	r9, r9, #1
   22920:	addne	r8, r8, #1
   22924:	b	228f0 <__assert_fail@plt+0xe298>
   22928:	cmp	r8, #0
   2292c:	strbne	r3, [r8]
   22930:	addeq	r9, r9, #1
   22934:	addne	r8, r8, #1
   22938:	movne	r1, #0
   2293c:	moveq	r1, r8
   22940:	b	228f0 <__assert_fail@plt+0xe298>
   22944:	cmp	r8, #0
   22948:	beq	22bcc <__assert_fail@plt+0xe574>
   2294c:	mov	r0, r8
   22950:	ldr	r1, [sp, #24]
   22954:	mov	r2, r6
   22958:	add	r8, r8, r6
   2295c:	bl	13ba8 <memcpy@plt>
   22960:	mov	r1, #0
   22964:	b	228f0 <__assert_fail@plt+0xe298>
   22968:	adds	r3, r4, #0
   2296c:	ldr	r1, [sp, #88]	; 0x58
   22970:	movne	r3, #1
   22974:	cmp	r1, #0
   22978:	movne	r3, #0
   2297c:	cmp	r3, #0
   22980:	bne	22bd8 <__assert_fail@plt+0xe580>
   22984:	cmp	r1, #0
   22988:	beq	228f0 <__assert_fail@plt+0xe298>
   2298c:	cmp	r8, #0
   22990:	beq	22bf0 <__assert_fail@plt+0xe598>
   22994:	mov	r0, r8
   22998:	bl	13cb0 <stpcpy@plt>
   2299c:	mov	r1, #0
   229a0:	mov	r8, r0
   229a4:	b	228f0 <__assert_fail@plt+0xe298>
   229a8:	cmp	fp, #1
   229ac:	beq	22dc0 <__assert_fail@plt+0xe768>
   229b0:	cmp	fp, #2
   229b4:	beq	229c0 <__assert_fail@plt+0xe368>
   229b8:	add	fp, fp, #1
   229bc:	b	2289c <__assert_fail@plt+0xe244>
   229c0:	ldr	r2, [sp, #20]
   229c4:	mov	r5, r9
   229c8:	ldr	r7, [sp, #40]	; 0x28
   229cc:	add	fp, r2, r5
   229d0:	ldr	r9, [sp, #36]	; 0x24
   229d4:	cmp	r8, fp
   229d8:	mov	r2, #0
   229dc:	ldr	sl, [sp, #44]	; 0x2c
   229e0:	ldr	r6, [sp, #48]	; 0x30
   229e4:	ldr	r4, [sp, #52]	; 0x34
   229e8:	strb	r2, [r8]
   229ec:	bne	22e34 <__assert_fail@plt+0xe7dc>
   229f0:	ldr	r0, [sp, #88]	; 0x58
   229f4:	bl	13c44 <gcry_free@plt>
   229f8:	ldr	r0, [sp, #28]
   229fc:	bl	13c44 <gcry_free@plt>
   22a00:	mov	r0, r7
   22a04:	mov	r1, #20
   22a08:	add	r2, sp, #104	; 0x68
   22a0c:	bl	2e26c <__assert_fail@plt+0x19c14>
   22a10:	ldr	r3, [sp, #192]	; 0xc0
   22a14:	cmp	r3, #0
   22a18:	beq	22a94 <__assert_fail@plt+0xe43c>
   22a1c:	add	r7, sp, #76	; 0x4c
   22a20:	b	22a40 <__assert_fail@plt+0xe3e8>
   22a24:	mov	r0, r9
   22a28:	mov	r1, #60	; 0x3c
   22a2c:	bl	207a0 <__assert_fail@plt+0xc148>
   22a30:	cmp	r0, #0
   22a34:	bne	22a94 <__assert_fail@plt+0xe43c>
   22a38:	mov	r0, #1
   22a3c:	bl	143f4 <pth_sleep@plt>
   22a40:	ldr	r1, [sp, #192]	; 0xc0
   22a44:	add	r0, sp, #104	; 0x68
   22a48:	add	r2, sp, #88	; 0x58
   22a4c:	bl	21d64 <__assert_fail@plt+0xd70c>
   22a50:	subs	r1, r0, #0
   22a54:	beq	22a80 <__assert_fail@plt+0xe428>
   22a58:	mov	r2, #0
   22a5c:	add	r3, sp, #72	; 0x48
   22a60:	ldr	r0, [sp, #60]	; 0x3c
   22a64:	str	r7, [sp]
   22a68:	bl	25a88 <__assert_fail@plt+0x11430>
   22a6c:	mov	r5, r0
   22a70:	add	r0, sp, #88	; 0x58
   22a74:	bl	21ed0 <__assert_fail@plt+0xd878>
   22a78:	cmp	r5, #0
   22a7c:	beq	22d08 <__assert_fail@plt+0xe6b0>
   22a80:	mov	r0, r9
   22a84:	mov	r1, #0
   22a88:	bl	207a0 <__assert_fail@plt+0xc148>
   22a8c:	cmp	r0, #0
   22a90:	bne	22a24 <__assert_fail@plt+0xe3cc>
   22a94:	mov	r0, #1
   22a98:	mov	r1, #140	; 0x8c
   22a9c:	bl	13a58 <gcry_calloc_secure@plt>
   22aa0:	subs	r7, r0, #0
   22aa4:	beq	22d88 <__assert_fail@plt+0xe730>
   22aa8:	ldr	lr, [sp, #60]	; 0x3c
   22aac:	mov	ip, #0
   22ab0:	mov	r0, #16
   22ab4:	str	ip, [r7]
   22ab8:	mov	r2, ip
   22abc:	movw	r1, #7988	; 0x1f34
   22ac0:	mov	r3, ip
   22ac4:	movt	r1, #2
   22ac8:	str	r1, [r7, #20]
   22acc:	mov	r1, #100	; 0x64
   22ad0:	str	r1, [r7, #32]
   22ad4:	mov	r1, #3
   22ad8:	stmib	r7, {r0, r1}
   22adc:	add	r1, sp, #88	; 0x58
   22ae0:	mov	r0, r9
   22ae4:	str	r1, [r7, #24]
   22ae8:	str	r7, [sp]
   22aec:	ldr	r1, [sp, #20]
   22af0:	str	r9, [sp, #88]	; 0x58
   22af4:	str	ip, [sp, #96]	; 0x60
   22af8:	str	ip, [sp, #100]	; 0x64
   22afc:	str	lr, [sp, #92]	; 0x5c
   22b00:	bl	208a0 <__assert_fail@plt+0xc248>
   22b04:	subs	r5, r0, #0
   22b08:	bne	22cdc <__assert_fail@plt+0xe684>
   22b0c:	ldr	r0, [sp, #96]	; 0x60
   22b10:	cmp	r0, #0
   22b14:	beq	22e50 <__assert_fail@plt+0xe7f8>
   22b18:	ldr	r3, [sp, #100]	; 0x64
   22b1c:	cmp	r3, #0
   22b20:	beq	22ca0 <__assert_fail@plt+0xe648>
   22b24:	mov	r1, r5
   22b28:	mov	r2, r5
   22b2c:	mov	r3, r5
   22b30:	bl	14604 <gcry_sexp_canon_len@plt>
   22b34:	add	r1, sp, #80	; 0x50
   22b38:	ldr	r2, [sp, #96]	; 0x60
   22b3c:	mov	r3, r0
   22b40:	mov	r8, r0
   22b44:	add	r0, sp, #84	; 0x54
   22b48:	bl	13bf0 <gcry_sexp_sscan@plt>
   22b4c:	subs	sl, r0, #0
   22b50:	beq	22d1c <__assert_fail@plt+0xe6c4>
   22b54:	ldr	r9, [sp, #80]	; 0x50
   22b58:	bl	13a64 <gpg_strerror@plt>
   22b5c:	mov	r1, r9
   22b60:	mov	r2, r0
   22b64:	movw	r0, #23512	; 0x5bd8
   22b68:	movt	r0, #4
   22b6c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   22b70:	ldr	r3, [sp, #96]	; 0x60
   22b74:	cmp	r8, #0
   22b78:	addne	r8, r3, r8
   22b7c:	mov	r0, r3
   22b80:	beq	22b94 <__assert_fail@plt+0xe53c>
   22b84:	strb	r5, [r3], #1
   22b88:	cmp	r3, r8
   22b8c:	bne	22b84 <__assert_fail@plt+0xe52c>
   22b90:	ldr	r0, [sp, #96]	; 0x60
   22b94:	bl	13c44 <gcry_free@plt>
   22b98:	mov	r0, r7
   22b9c:	mov	r5, sl
   22ba0:	bl	13c44 <gcry_free@plt>
   22ba4:	mov	r0, r5
   22ba8:	bl	13a64 <gpg_strerror@plt>
   22bac:	mov	r1, r0
   22bb0:	movw	r0, #23724	; 0x5cac
   22bb4:	movt	r0, #4
   22bb8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   22bbc:	ldr	r0, [sp, #20]
   22bc0:	mov	r7, r5
   22bc4:	bl	13c44 <gcry_free@plt>
   22bc8:	b	227bc <__assert_fail@plt+0xe164>
   22bcc:	add	r9, r9, r6
   22bd0:	mov	r1, r8
   22bd4:	b	228f0 <__assert_fail@plt+0xe298>
   22bd8:	ldr	r1, [sp, #32]
   22bdc:	mov	r0, r4
   22be0:	mov	r2, #4
   22be4:	bl	39ff4 <__assert_fail@plt+0x2599c>
   22be8:	ldr	r1, [sp, #88]	; 0x58
   22bec:	b	22984 <__assert_fail@plt+0xe32c>
   22bf0:	mov	r0, r1
   22bf4:	bl	14094 <strlen@plt>
   22bf8:	mov	r1, r8
   22bfc:	add	r9, r9, r0
   22c00:	b	228f0 <__assert_fail@plt+0xe298>
   22c04:	mov	r0, r5
   22c08:	ldr	r6, [sp, #88]	; 0x58
   22c0c:	bl	13a64 <gpg_strerror@plt>
   22c10:	mov	r1, r6
   22c14:	mov	r2, r0
   22c18:	movw	r0, #23512	; 0x5bd8
   22c1c:	movt	r0, #4
   22c20:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   22c24:	b	22688 <__assert_fail@plt+0xe030>
   22c28:	mov	r5, #54	; 0x36
   22c2c:	movt	r5, #1024	; 0x400
   22c30:	b	226f0 <__assert_fail@plt+0xe098>
   22c34:	mov	r0, r1
   22c38:	b	2276c <__assert_fail@plt+0xe114>
   22c3c:	ldr	r0, [sp, #88]	; 0x58
   22c40:	mov	r1, r5
   22c44:	mov	r2, r5
   22c48:	mov	r3, r5
   22c4c:	bl	14604 <gcry_sexp_canon_len@plt>
   22c50:	subs	r7, r0, #0
   22c54:	beq	22ddc <__assert_fail@plt+0xe784>
   22c58:	bl	139c8 <gcry_malloc@plt>
   22c5c:	cmp	r0, #0
   22c60:	str	r0, [fp]
   22c64:	beq	22da0 <__assert_fail@plt+0xe748>
   22c68:	mov	r2, r7
   22c6c:	ldr	r1, [sp, #88]	; 0x58
   22c70:	bl	13ba8 <memcpy@plt>
   22c74:	mov	r7, #1
   22c78:	b	227bc <__assert_fail@plt+0xe164>
   22c7c:	bl	13be4 <gcry_sexp_release@plt>
   22c80:	cmp	r8, #0
   22c84:	streq	r8, [sp, #28]
   22c88:	bne	22cf0 <__assert_fail@plt+0xe698>
   22c8c:	ldr	r0, [sp, #28]
   22c90:	mov	r2, #0
   22c94:	str	r2, [sp, #20]
   22c98:	bl	13c44 <gcry_free@plt>
   22c9c:	b	22a00 <__assert_fail@plt+0xe3a8>
   22ca0:	cmp	sl, #0
   22ca4:	add	r8, r7, #36	; 0x24
   22ca8:	moveq	r3, r5
   22cac:	beq	22cbc <__assert_fail@plt+0xe664>
   22cb0:	add	r0, sp, #104	; 0x68
   22cb4:	blx	sl
   22cb8:	mov	r3, r0
   22cbc:	add	r0, sp, #104	; 0x68
   22cc0:	mov	r2, r8
   22cc4:	ldr	r1, [sp, #192]	; 0xc0
   22cc8:	bl	21bb4 <__assert_fail@plt+0xd55c>
   22ccc:	ldr	r0, [sp, #60]	; 0x3c
   22cd0:	bl	13c44 <gcry_free@plt>
   22cd4:	ldr	r3, [sp, #96]	; 0x60
   22cd8:	str	r3, [sp, #60]	; 0x3c
   22cdc:	mov	r0, r7
   22ce0:	bl	13c44 <gcry_free@plt>
   22ce4:	cmp	r5, #0
   22ce8:	beq	22bbc <__assert_fail@plt+0xe564>
   22cec:	b	22ba4 <__assert_fail@plt+0xe54c>
   22cf0:	mov	r3, #0
   22cf4:	str	r3, [sp, #28]
   22cf8:	movw	r3, #18888	; 0x49c8
   22cfc:	movt	r3, #4
   22d00:	str	r3, [sp, #24]
   22d04:	b	22824 <__assert_fail@plt+0xe1cc>
   22d08:	ldr	r0, [sp, #60]	; 0x3c
   22d0c:	bl	13c44 <gcry_free@plt>
   22d10:	ldr	r3, [sp, #72]	; 0x48
   22d14:	str	r3, [sp, #60]	; 0x3c
   22d18:	b	22bbc <__assert_fail@plt+0xe564>
   22d1c:	mov	r0, r9
   22d20:	ldr	r1, [sp, #84]	; 0x54
   22d24:	bl	24a5c <__assert_fail@plt+0x10404>
   22d28:	mov	r9, r0
   22d2c:	ldr	r0, [sp, #84]	; 0x54
   22d30:	bl	13be4 <gcry_sexp_release@plt>
   22d34:	cmp	r9, #0
   22d38:	beq	22ccc <__assert_fail@plt+0xe674>
   22d3c:	mov	r0, r9
   22d40:	bl	13a64 <gpg_strerror@plt>
   22d44:	mov	r1, r0
   22d48:	movw	r0, #23688	; 0x5c88
   22d4c:	movt	r0, #4
   22d50:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   22d54:	cmp	r8, #0
   22d58:	ldr	r3, [sp, #96]	; 0x60
   22d5c:	addne	r8, r3, r8
   22d60:	beq	22d70 <__assert_fail@plt+0xe718>
   22d64:	strb	sl, [r3], #1
   22d68:	cmp	r3, r8
   22d6c:	bne	22d64 <__assert_fail@plt+0xe70c>
   22d70:	ldr	r0, [sp, #96]	; 0x60
   22d74:	mov	r5, r9
   22d78:	bl	13c44 <gcry_free@plt>
   22d7c:	mov	r0, r7
   22d80:	bl	13c44 <gcry_free@plt>
   22d84:	b	22ba4 <__assert_fail@plt+0xe54c>
   22d88:	bl	14580 <gpg_err_code_from_syserror@plt>
   22d8c:	cmp	r0, #0
   22d90:	uxthne	r0, r0
   22d94:	orrne	r5, r0, #67108864	; 0x4000000
   22d98:	moveq	r5, r0
   22d9c:	b	22ce4 <__assert_fail@plt+0xe68c>
   22da0:	bl	14580 <gpg_err_code_from_syserror@plt>
   22da4:	cmp	r0, #0
   22da8:	uxthne	r5, r0
   22dac:	orrne	r5, r5, #67108864	; 0x4000000
   22db0:	bne	227a0 <__assert_fail@plt+0xe148>
   22db4:	mov	r7, r5
   22db8:	b	227bc <__assert_fail@plt+0xe164>
   22dbc:	bl	13cec <__stack_chk_fail@plt>
   22dc0:	add	r0, r9, #1
   22dc4:	bl	139c8 <gcry_malloc@plt>
   22dc8:	cmp	r0, #0
   22dcc:	str	r0, [sp, #20]
   22dd0:	beq	22df8 <__assert_fail@plt+0xe7a0>
   22dd4:	ldr	r8, [sp, #20]
   22dd8:	b	229b8 <__assert_fail@plt+0xe360>
   22ddc:	movw	r0, #34916	; 0x8864
   22de0:	movw	r1, #23228	; 0x5abc
   22de4:	movt	r0, #4
   22de8:	movt	r1, #4
   22dec:	movw	r2, #595	; 0x253
   22df0:	ldr	r3, [pc, #116]	; 22e6c <__assert_fail@plt+0xe814>
   22df4:	bl	14658 <__assert_fail@plt>
   22df8:	ldr	r0, [sp, #88]	; 0x58
   22dfc:	ldr	r9, [sp, #36]	; 0x24
   22e00:	ldr	r7, [sp, #40]	; 0x28
   22e04:	ldr	sl, [sp, #44]	; 0x2c
   22e08:	ldr	r6, [sp, #48]	; 0x30
   22e0c:	ldr	r4, [sp, #52]	; 0x34
   22e10:	bl	13c44 <gcry_free@plt>
   22e14:	bl	14580 <gpg_err_code_from_syserror@plt>
   22e18:	cmp	r0, #0
   22e1c:	beq	229f8 <__assert_fail@plt+0xe3a0>
   22e20:	uxth	r5, r0
   22e24:	ldr	r0, [sp, #28]
   22e28:	orr	r5, r5, #67108864	; 0x4000000
   22e2c:	bl	13c44 <gcry_free@plt>
   22e30:	b	22bbc <__assert_fail@plt+0xe564>
   22e34:	movw	r0, #23640	; 0x5c58
   22e38:	movw	r1, #23228	; 0x5abc
   22e3c:	movt	r0, #4
   22e40:	movt	r1, #4
   22e44:	movw	r2, #310	; 0x136
   22e48:	ldr	r3, [pc, #32]	; 22e70 <__assert_fail@plt+0xe818>
   22e4c:	bl	14658 <__assert_fail@plt>
   22e50:	movw	r0, #23668	; 0x5c74
   22e54:	movw	r1, #23228	; 0x5abc
   22e58:	movt	r0, #4
   22e5c:	movt	r1, #4
   22e60:	movw	r2, #399	; 0x18f
   22e64:	ldr	r3, [pc, #8]	; 22e74 <__assert_fail@plt+0xe81c>
   22e68:	bl	14658 <__assert_fail@plt>
   22e6c:	andeq	r5, r4, r8, asr sl
   22e70:	andeq	r5, r4, r8, lsr sl
   22e74:	andeq	r5, r4, ip, asr #20
   22e78:	push	{r4, r5, lr}
   22e7c:	movw	r4, #47296	; 0xb8c0
   22e80:	movt	r4, #5
   22e84:	sub	sp, sp, #12
   22e88:	mov	r5, r2
   22e8c:	mov	r0, r1
   22e90:	ldr	r3, [r4]
   22e94:	mov	r2, #0
   22e98:	mov	r1, sp
   22e9c:	str	r2, [r5]
   22ea0:	str	r3, [sp, #4]
   22ea4:	bl	221bc <__assert_fail@plt+0xdb64>
   22ea8:	ldr	r2, [sp, #4]
   22eac:	cmp	r0, #0
   22eb0:	ldreq	r3, [sp]
   22eb4:	streq	r3, [r5]
   22eb8:	ldr	r3, [r4]
   22ebc:	cmp	r2, r3
   22ec0:	bne	22ecc <__assert_fail@plt+0xe874>
   22ec4:	add	sp, sp, #12
   22ec8:	pop	{r4, r5, pc}
   22ecc:	bl	13cec <__stack_chk_fail@plt>
   22ed0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ed4:	movw	r4, #47296	; 0xb8c0
   22ed8:	movt	r4, #5
   22edc:	sub	sp, sp, #100	; 0x64
   22ee0:	mov	r7, r2
   22ee4:	mov	r0, r1
   22ee8:	ldr	r3, [r4]
   22eec:	mov	r2, #0
   22ef0:	add	r1, sp, #28
   22ef4:	str	r2, [r7]
   22ef8:	str	r3, [sp, #92]	; 0x5c
   22efc:	bl	221bc <__assert_fail@plt+0xdb64>
   22f00:	subs	r2, r0, #0
   22f04:	movne	r0, r2
   22f08:	beq	22f24 <__assert_fail@plt+0xe8cc>
   22f0c:	ldr	r2, [sp, #92]	; 0x5c
   22f10:	ldr	r3, [r4]
   22f14:	cmp	r2, r3
   22f18:	bne	234e4 <__assert_fail@plt+0xee8c>
   22f1c:	add	sp, sp, #100	; 0x64
   22f20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   22f24:	movw	r1, #26504	; 0x6788
   22f28:	ldr	r0, [sp, #28]
   22f2c:	movt	r1, #4
   22f30:	bl	13e84 <gcry_sexp_find_token@plt>
   22f34:	cmp	r0, #0
   22f38:	str	r0, [sp, #48]	; 0x30
   22f3c:	beq	232a4 <__assert_fail@plt+0xec4c>
   22f40:	bl	13a34 <gcry_sexp_cadr@plt>
   22f44:	mov	r5, r0
   22f48:	ldr	r0, [sp, #48]	; 0x30
   22f4c:	bl	13be4 <gcry_sexp_release@plt>
   22f50:	mov	r0, r5
   22f54:	add	r2, sp, #52	; 0x34
   22f58:	mov	r1, #0
   22f5c:	str	r5, [sp, #48]	; 0x30
   22f60:	bl	13bd8 <gcry_sexp_nth_data@plt>
   22f64:	ldr	r5, [sp, #52]	; 0x34
   22f68:	cmp	r5, #3
   22f6c:	mov	r6, r0
   22f70:	beq	22f9c <__assert_fail@plt+0xe944>
   22f74:	movw	r0, #23832	; 0x5d18
   22f78:	movt	r0, #4
   22f7c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   22f80:	ldr	r0, [sp, #48]	; 0x30
   22f84:	bl	13be4 <gcry_sexp_release@plt>
   22f88:	ldr	r0, [sp, #28]
   22f8c:	bl	13be4 <gcry_sexp_release@plt>
   22f90:	mov	r0, #7
   22f94:	movt	r0, #1024	; 0x400
   22f98:	b	22f0c <__assert_fail@plt+0xe8b4>
   22f9c:	movw	r1, #20684	; 0x50cc
   22fa0:	mov	r2, r5
   22fa4:	movt	r1, #4
   22fa8:	bl	13c80 <memcmp@plt>
   22fac:	cmp	r0, #0
   22fb0:	bne	2308c <__assert_fail@plt+0xea34>
   22fb4:	movw	r9, #23820	; 0x5d0c
   22fb8:	movt	r9, #4
   22fbc:	mov	r0, r5
   22fc0:	movw	r3, #20684	; 0x50cc
   22fc4:	movt	r3, #4
   22fc8:	str	r3, [sp, #8]
   22fcc:	mov	r3, #2
   22fd0:	str	r3, [sp, #16]
   22fd4:	mov	r1, #4
   22fd8:	bl	14190 <gcry_calloc@plt>
   22fdc:	cmp	r0, #0
   22fe0:	str	r0, [sp, #4]
   22fe4:	beq	23460 <__assert_fail@plt+0xee08>
   22fe8:	ldrb	r3, [r9]
   22fec:	cmp	r3, #0
   22ff0:	str	r3, [sp, #12]
   22ff4:	beq	23108 <__assert_fail@plt+0xeab0>
   22ff8:	mov	fp, r9
   22ffc:	ldr	r5, [sp, #4]
   23000:	mov	r6, #0
   23004:	b	23040 <__assert_fail@plt+0xe9e8>
   23008:	mov	r2, #5
   2300c:	mov	r1, #1
   23010:	bl	13fbc <gcry_sexp_nth_mpi@plt>
   23014:	str	r0, [r5]
   23018:	mov	r0, sl
   2301c:	bl	13be4 <gcry_sexp_release@plt>
   23020:	ldr	r2, [r5], #4
   23024:	cmp	r2, #0
   23028:	beq	23278 <__assert_fail@plt+0xec20>
   2302c:	ldrb	r3, [fp, #1]
   23030:	add	r6, r6, #1
   23034:	add	fp, fp, #1
   23038:	cmp	r3, #0
   2303c:	beq	23108 <__assert_fail@plt+0xeab0>
   23040:	ldr	r0, [sp, #48]	; 0x30
   23044:	mov	r1, fp
   23048:	mov	r2, #1
   2304c:	bl	13e84 <gcry_sexp_find_token@plt>
   23050:	subs	sl, r0, #0
   23054:	bne	23008 <__assert_fail@plt+0xe9b0>
   23058:	cmp	r6, #0
   2305c:	beq	23080 <__assert_fail@plt+0xea28>
   23060:	ldr	r0, [sp, #4]
   23064:	mov	r5, sl
   23068:	sub	r7, r0, #4
   2306c:	add	r5, r5, #1
   23070:	ldr	r0, [r7, #4]!
   23074:	bl	14268 <gcry_mpi_release@plt>
   23078:	cmp	r5, r6
   2307c:	bne	2306c <__assert_fail@plt+0xea14>
   23080:	ldr	r0, [sp, #4]
   23084:	bl	13c44 <gcry_free@plt>
   23088:	b	22f80 <__assert_fail@plt+0xe928>
   2308c:	movw	r1, #20704	; 0x50e0
   23090:	mov	r0, r6
   23094:	movt	r1, #4
   23098:	mov	r2, r5
   2309c:	bl	13c80 <memcmp@plt>
   230a0:	cmp	r0, #0
   230a4:	bne	230cc <__assert_fail@plt+0xea74>
   230a8:	movw	r9, #20716	; 0x50ec
   230ac:	movw	r3, #20704	; 0x50e0
   230b0:	movt	r9, #4
   230b4:	movt	r3, #4
   230b8:	mov	r0, #5
   230bc:	str	r3, [sp, #8]
   230c0:	mov	r3, #4
   230c4:	str	r3, [sp, #16]
   230c8:	b	22fd4 <__assert_fail@plt+0xe97c>
   230cc:	mov	r0, r6
   230d0:	movw	r1, #23828	; 0x5d14
   230d4:	mov	r2, r5
   230d8:	movt	r1, #4
   230dc:	bl	13c80 <memcmp@plt>
   230e0:	cmp	r0, #0
   230e4:	bne	22f74 <__assert_fail@plt+0xe91c>
   230e8:	movw	r9, #23824	; 0x5d10
   230ec:	movw	r3, #23828	; 0x5d14
   230f0:	movt	r9, #4
   230f4:	movt	r3, #4
   230f8:	str	r5, [sp, #16]
   230fc:	mov	r0, #4
   23100:	str	r3, [sp, #8]
   23104:	b	22fd4 <__assert_fail@plt+0xe97c>
   23108:	ldr	r0, [sp, #48]	; 0x30
   2310c:	bl	13be4 <gcry_sexp_release@plt>
   23110:	mov	r3, #0
   23114:	mov	r2, r3
   23118:	movw	r1, #23864	; 0x5d38
   2311c:	ldr	r0, [sp, #28]
   23120:	movt	r1, #4
   23124:	str	r3, [sp, #48]	; 0x30
   23128:	str	r3, [sp, #32]
   2312c:	str	r3, [sp, #40]	; 0x28
   23130:	bl	13e84 <gcry_sexp_find_token@plt>
   23134:	subs	fp, r0, #0
   23138:	beq	2314c <__assert_fail@plt+0xeaf4>
   2313c:	mov	r1, #1
   23140:	add	r2, sp, #40	; 0x28
   23144:	bl	13bd8 <gcry_sexp_nth_data@plt>
   23148:	str	r0, [sp, #32]
   2314c:	mov	r3, #0
   23150:	movw	r1, #19328	; 0x4b80
   23154:	mov	r2, r3
   23158:	movt	r1, #4
   2315c:	ldr	r0, [sp, #28]
   23160:	str	r3, [sp, #36]	; 0x24
   23164:	str	r3, [sp, #44]	; 0x2c
   23168:	bl	13e84 <gcry_sexp_find_token@plt>
   2316c:	subs	r2, r0, #0
   23170:	str	r2, [sp, #20]
   23174:	beq	23188 <__assert_fail@plt+0xeb30>
   23178:	mov	r1, #1
   2317c:	add	r2, sp, #44	; 0x2c
   23180:	bl	13bd8 <gcry_sexp_nth_data@plt>
   23184:	str	r0, [sp, #36]	; 0x24
   23188:	ldr	r0, [sp, #28]
   2318c:	mov	r5, #0
   23190:	bl	13be4 <gcry_sexp_release@plt>
   23194:	ldr	r3, [sp, #16]
   23198:	str	r5, [sp, #28]
   2319c:	rsb	r0, r3, r3, lsl #3
   231a0:	add	r0, r0, #42	; 0x2a
   231a4:	bl	139c8 <gcry_malloc@plt>
   231a8:	subs	r6, r0, #0
   231ac:	beq	2348c <__assert_fail@plt+0xee34>
   231b0:	movw	r3, #23868	; 0x5d3c
   231b4:	movt	r3, #4
   231b8:	ldm	r3!, {r0, r1, r2}
   231bc:	str	r0, [r6]
   231c0:	add	r0, r6, #12
   231c4:	str	r1, [r6, #4]
   231c8:	str	r2, [r6, #8]
   231cc:	ldr	r1, [sp, #8]
   231d0:	bl	13cb0 <stpcpy@plt>
   231d4:	ldr	r2, [sp, #12]
   231d8:	cmp	r2, #0
   231dc:	moveq	r5, r2
   231e0:	mov	r3, r0
   231e4:	beq	23304 <__assert_fail@plt+0xecac>
   231e8:	ldr	r0, [sp, #12]
   231ec:	movw	ip, #23884	; 0x5d4c
   231f0:	movt	ip, #4
   231f4:	mov	r2, #40	; 0x28
   231f8:	mov	r8, r2
   231fc:	strb	r2, [r3]
   23200:	strb	r0, [r3, #1]
   23204:	add	lr, sp, #52	; 0x34
   23208:	ldr	r0, [ip]
   2320c:	add	r3, r3, #6
   23210:	ldrb	r1, [ip, #4]
   23214:	ldr	r2, [sp, #4]
   23218:	str	r0, [r3, #-4]
   2321c:	strb	r1, [r3]
   23220:	ldrb	r1, [r9, #1]!
   23224:	add	r5, r5, #1
   23228:	str	r2, [lr, #4]!
   2322c:	cmp	r1, #0
   23230:	beq	23304 <__assert_fail@plt+0xecac>
   23234:	ldr	r0, [ip]
   23238:	cmp	r5, #9
   2323c:	ldrb	sl, [ip, #4]
   23240:	add	r2, r2, #4
   23244:	strb	r8, [r3]
   23248:	add	r3, r3, #6
   2324c:	strb	r1, [r3, #-5]
   23250:	str	r0, [r3, #-4]
   23254:	strb	sl, [r3]
   23258:	bne	23220 <__assert_fail@plt+0xebc8>
   2325c:	movw	r0, #23892	; 0x5d54
   23260:	movw	r1, #23228	; 0x5abc
   23264:	movt	r0, #4
   23268:	movt	r1, #4
   2326c:	movw	r2, #819	; 0x333
   23270:	ldr	r3, [pc, #708]	; 2353c <__assert_fail@plt+0xeee4>
   23274:	bl	14658 <__assert_fail@plt>
   23278:	cmp	r6, #0
   2327c:	beq	23080 <__assert_fail@plt+0xea28>
   23280:	ldr	r1, [sp, #4]
   23284:	mov	r5, r2
   23288:	sub	r7, r1, #4
   2328c:	add	r5, r5, #1
   23290:	ldr	r0, [r7, #4]!
   23294:	bl	14268 <gcry_mpi_release@plt>
   23298:	cmp	r5, r6
   2329c:	bne	2328c <__assert_fail@plt+0xec34>
   232a0:	b	23080 <__assert_fail@plt+0xea28>
   232a4:	mov	r2, r0
   232a8:	movw	r1, #19260	; 0x4b3c
   232ac:	ldr	r0, [sp, #28]
   232b0:	movt	r1, #4
   232b4:	bl	13e84 <gcry_sexp_find_token@plt>
   232b8:	cmp	r0, #0
   232bc:	str	r0, [sp, #48]	; 0x30
   232c0:	bne	22f40 <__assert_fail@plt+0xe8e8>
   232c4:	mov	r2, r0
   232c8:	movw	r1, #26452	; 0x6754
   232cc:	ldr	r0, [sp, #28]
   232d0:	movt	r1, #4
   232d4:	bl	13e84 <gcry_sexp_find_token@plt>
   232d8:	cmp	r0, #0
   232dc:	str	r0, [sp, #48]	; 0x30
   232e0:	bne	22f40 <__assert_fail@plt+0xe8e8>
   232e4:	movw	r0, #23792	; 0x5cf0
   232e8:	movt	r0, #4
   232ec:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   232f0:	ldr	r0, [sp, #28]
   232f4:	bl	13be4 <gcry_sexp_release@plt>
   232f8:	mov	r0, #7
   232fc:	movt	r0, #1024	; 0x400
   23300:	b	22f0c <__assert_fail@plt+0xe8b4>
   23304:	ldr	r2, [sp, #32]
   23308:	mov	r1, #41	; 0x29
   2330c:	add	ip, r3, #1
   23310:	strb	r1, [r3]
   23314:	cmp	r2, #0
   23318:	beq	2336c <__assert_fail@plt+0xed14>
   2331c:	movw	r2, #23936	; 0x5d80
   23320:	movt	r2, #4
   23324:	add	lr, r5, #1
   23328:	ldm	r2!, {r0, r1}
   2332c:	cmp	lr, #8
   23330:	ldrb	r2, [r2]
   23334:	str	r0, [r3, #1]
   23338:	str	r1, [ip, #4]
   2333c:	strb	r2, [ip, #8]
   23340:	add	ip, r3, #9
   23344:	bhi	234e8 <__assert_fail@plt+0xee90>
   23348:	add	r3, sp, #96	; 0x60
   2334c:	add	r0, sp, #96	; 0x60
   23350:	add	lr, r3, lr, lsl #2
   23354:	add	r2, r0, r5, lsl #2
   23358:	add	r5, r5, #2
   2335c:	add	r1, sp, #40	; 0x28
   23360:	add	r3, sp, #32
   23364:	str	r1, [r2, #-40]	; 0xffffffd8
   23368:	str	r3, [lr, #-40]	; 0xffffffd8
   2336c:	ldr	r3, [sp, #36]	; 0x24
   23370:	cmp	r3, #0
   23374:	beq	233c8 <__assert_fail@plt+0xed70>
   23378:	movw	r3, #23992	; 0x5db8
   2337c:	movt	r3, #4
   23380:	add	lr, r5, #1
   23384:	ldm	r3!, {r0, r1, r2}
   23388:	cmp	lr, #8
   2338c:	ldrb	r3, [r3]
   23390:	str	r0, [ip]
   23394:	str	r1, [ip, #4]
   23398:	str	r2, [ip, #8]
   2339c:	strb	r3, [ip, #12]!
   233a0:	bhi	23520 <__assert_fail@plt+0xeec8>
   233a4:	add	r1, sp, #96	; 0x60
   233a8:	add	r0, sp, #96	; 0x60
   233ac:	add	lr, r1, lr, lsl #2
   233b0:	add	r2, r0, r5, lsl #2
   233b4:	add	r5, r5, #2
   233b8:	add	r1, sp, #44	; 0x2c
   233bc:	add	r3, sp, #36	; 0x24
   233c0:	str	r1, [r2, #-40]	; 0xffffffd8
   233c4:	str	r3, [lr, #-40]	; 0xffffffd8
   233c8:	cmp	r5, #8
   233cc:	mov	r3, #41	; 0x29
   233d0:	mov	lr, #0
   233d4:	strb	r3, [ip]
   233d8:	strb	lr, [ip, #1]
   233dc:	bhi	23504 <__assert_fail@plt+0xeeac>
   233e0:	add	r1, sp, #96	; 0x60
   233e4:	mov	r2, r6
   233e8:	add	r5, r1, r5, lsl #2
   233ec:	add	r3, sp, #56	; 0x38
   233f0:	mov	r1, lr
   233f4:	add	r0, sp, #48	; 0x30
   233f8:	str	lr, [r5, #-40]	; 0xffffffd8
   233fc:	bl	139b0 <gcry_sexp_build_array@plt>
   23400:	mov	r5, r0
   23404:	mov	r0, r6
   23408:	bl	13c44 <gcry_free@plt>
   2340c:	ldr	r2, [sp, #4]
   23410:	ldr	r0, [r2]
   23414:	cmp	r0, #0
   23418:	ldrne	r6, [sp, #4]
   2341c:	beq	23430 <__assert_fail@plt+0xedd8>
   23420:	bl	14268 <gcry_mpi_release@plt>
   23424:	ldr	r0, [r6, #4]!
   23428:	cmp	r0, #0
   2342c:	bne	23420 <__assert_fail@plt+0xedc8>
   23430:	ldr	r0, [sp, #4]
   23434:	bl	13c44 <gcry_free@plt>
   23438:	mov	r0, fp
   2343c:	bl	13be4 <gcry_sexp_release@plt>
   23440:	ldr	r0, [sp, #20]
   23444:	bl	13be4 <gcry_sexp_release@plt>
   23448:	cmp	r5, #0
   2344c:	movne	r0, r5
   23450:	ldreq	r3, [sp, #48]	; 0x30
   23454:	moveq	r0, r5
   23458:	streq	r3, [r7]
   2345c:	b	22f0c <__assert_fail@plt+0xe8b4>
   23460:	bl	14580 <gpg_err_code_from_syserror@plt>
   23464:	cmp	r0, #0
   23468:	uxthne	r5, r0
   2346c:	moveq	r5, r0
   23470:	orrne	r5, r5, #67108864	; 0x4000000
   23474:	ldr	r0, [sp, #48]	; 0x30
   23478:	bl	13be4 <gcry_sexp_release@plt>
   2347c:	ldr	r0, [sp, #28]
   23480:	bl	13be4 <gcry_sexp_release@plt>
   23484:	mov	r0, r5
   23488:	b	22f0c <__assert_fail@plt+0xe8b4>
   2348c:	bl	14580 <gpg_err_code_from_syserror@plt>
   23490:	ldr	r1, [sp, #4]
   23494:	cmp	r0, #0
   23498:	uxthne	r6, r0
   2349c:	moveq	r6, r0
   234a0:	ldr	r0, [r1]
   234a4:	orrne	r6, r6, #67108864	; 0x4000000
   234a8:	cmp	r0, #0
   234ac:	ldrne	r5, [sp, #4]
   234b0:	beq	234c4 <__assert_fail@plt+0xee6c>
   234b4:	bl	14268 <gcry_mpi_release@plt>
   234b8:	ldr	r0, [r5, #4]!
   234bc:	cmp	r0, #0
   234c0:	bne	234b4 <__assert_fail@plt+0xee5c>
   234c4:	ldr	r0, [sp, #4]
   234c8:	bl	13c44 <gcry_free@plt>
   234cc:	mov	r0, fp
   234d0:	bl	13be4 <gcry_sexp_release@plt>
   234d4:	ldr	r0, [sp, #20]
   234d8:	bl	13be4 <gcry_sexp_release@plt>
   234dc:	mov	r0, r6
   234e0:	b	22f0c <__assert_fail@plt+0xe8b4>
   234e4:	bl	13cec <__stack_chk_fail@plt>
   234e8:	movw	r0, #23948	; 0x5d8c
   234ec:	movw	r1, #23228	; 0x5abc
   234f0:	movt	r0, #4
   234f4:	movt	r1, #4
   234f8:	movw	r2, #826	; 0x33a
   234fc:	ldr	r3, [pc, #56]	; 2353c <__assert_fail@plt+0xeee4>
   23500:	bl	14658 <__assert_fail@plt>
   23504:	movw	r0, #23892	; 0x5d54
   23508:	movw	r1, #23228	; 0x5abc
   2350c:	movt	r0, #4
   23510:	movt	r1, #4
   23514:	movw	r2, #839	; 0x347
   23518:	ldr	r3, [pc, #28]	; 2353c <__assert_fail@plt+0xeee4>
   2351c:	bl	14658 <__assert_fail@plt>
   23520:	movw	r0, #23948	; 0x5d8c
   23524:	movw	r1, #23228	; 0x5abc
   23528:	movt	r0, #4
   2352c:	movt	r1, #4
   23530:	movw	r2, #833	; 0x341
   23534:	ldr	r3, [pc]	; 2353c <__assert_fail@plt+0xeee4>
   23538:	bl	14658 <__assert_fail@plt>
   2353c:	andeq	r5, r4, ip, ror #20
   23540:	push	{r4, r5, r6, lr}
   23544:	movw	r4, #47296	; 0xb8c0
   23548:	movt	r4, #5
   2354c:	sub	sp, sp, #56	; 0x38
   23550:	mov	r1, #20
   23554:	add	r2, sp, #4
   23558:	ldr	r3, [r4]
   2355c:	str	r3, [sp, #52]	; 0x34
   23560:	bl	2e26c <__assert_fail@plt+0x19c14>
   23564:	movw	r3, #17180	; 0x431c
   23568:	movt	r3, #4
   2356c:	movw	ip, #48116	; 0xbbf4
   23570:	movt	ip, #5
   23574:	ldm	r3, {r0, r1}
   23578:	add	r2, sp, #4
   2357c:	mov	r3, #0
   23580:	strb	r1, [sp, #48]	; 0x30
   23584:	movw	r1, #1708	; 0x6ac
   23588:	str	r0, [sp, #44]	; 0x2c
   2358c:	movt	r1, #4
   23590:	ldr	r0, [ip, #20]
   23594:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   23598:	mov	r1, #4
   2359c:	mov	r5, r0
   235a0:	bl	142b0 <access@plt>
   235a4:	mov	r6, r0
   235a8:	mov	r0, r5
   235ac:	bl	13c44 <gcry_free@plt>
   235b0:	ldr	r2, [sp, #52]	; 0x34
   235b4:	ldr	r3, [r4]
   235b8:	subs	r0, r6, #0
   235bc:	mvnne	r0, #0
   235c0:	cmp	r2, r3
   235c4:	bne	235d0 <__assert_fail@plt+0xef78>
   235c8:	add	sp, sp, #56	; 0x38
   235cc:	pop	{r4, r5, r6, pc}
   235d0:	bl	13cec <__stack_chk_fail@plt>
   235d4:	push	{r4, r5, r6, r7, r8, r9, lr}
   235d8:	movw	r4, #47296	; 0xb8c0
   235dc:	movt	r4, #5
   235e0:	subs	r7, r2, #0
   235e4:	mov	r5, r3
   235e8:	sub	sp, sp, #20
   235ec:	ldr	r0, [r4]
   235f0:	movne	r3, #0
   235f4:	strne	r3, [r7]
   235f8:	cmp	r5, #0
   235fc:	str	r0, [sp, #12]
   23600:	movne	r3, #0
   23604:	mov	r0, r1
   23608:	strne	r3, [r5]
   2360c:	add	r1, sp, #8
   23610:	bl	221bc <__assert_fail@plt+0xdb64>
   23614:	subs	r6, r0, #0
   23618:	beq	23650 <__assert_fail@plt+0xeff8>
   2361c:	uxth	r0, r6
   23620:	mov	r3, #27
   23624:	movw	r2, #32849	; 0x8051
   23628:	movt	r3, #1024	; 0x400
   2362c:	cmp	r0, r2
   23630:	movne	r0, r6
   23634:	moveq	r0, r3
   23638:	ldr	r2, [sp, #12]
   2363c:	ldr	r3, [r4]
   23640:	cmp	r2, r3
   23644:	bne	23748 <__assert_fail@plt+0xf0f0>
   23648:	add	sp, sp, #20
   2364c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   23650:	mov	r1, sp
   23654:	add	r2, sp, #4
   23658:	ldr	r0, [sp, #8]
   2365c:	bl	2b7dc <__assert_fail@plt+0x17184>
   23660:	mov	r8, r0
   23664:	ldr	r0, [sp, #8]
   23668:	bl	13be4 <gcry_sexp_release@plt>
   2366c:	cmp	r8, #0
   23670:	movne	r0, r8
   23674:	bne	23638 <__assert_fail@plt+0xefe0>
   23678:	ldr	r0, [sp]
   2367c:	bl	2666c <__assert_fail@plt+0x12014>
   23680:	subs	r9, r0, #0
   23684:	ble	236d8 <__assert_fail@plt+0xf080>
   23688:	cmp	r9, #2
   2368c:	ble	236e4 <__assert_fail@plt+0xf08c>
   23690:	cmp	r9, #3
   23694:	bne	236d8 <__assert_fail@plt+0xf080>
   23698:	cmp	r5, #0
   2369c:	beq	236e4 <__assert_fail@plt+0xf08c>
   236a0:	add	r1, sp, #8
   236a4:	ldr	r0, [sp]
   236a8:	bl	26c3c <__assert_fail@plt+0x125e4>
   236ac:	subs	r8, r0, #0
   236b0:	beq	236ec <__assert_fail@plt+0xf094>
   236b4:	cmp	r7, #0
   236b8:	moveq	r6, #0
   236bc:	andne	r6, r6, #1
   236c0:	cmp	r6, #0
   236c4:	strne	r9, [r7]
   236c8:	ldr	r0, [sp]
   236cc:	bl	13c44 <gcry_free@plt>
   236d0:	mov	r0, r8
   236d4:	b	23638 <__assert_fail@plt+0xefe0>
   236d8:	mov	r8, #7
   236dc:	movt	r8, #1024	; 0x400
   236e0:	b	236c8 <__assert_fail@plt+0xf070>
   236e4:	mov	r6, #1
   236e8:	b	236b4 <__assert_fail@plt+0xf05c>
   236ec:	ldr	r0, [sp, #8]
   236f0:	mov	r1, r8
   236f4:	mov	r2, r8
   236f8:	mov	r3, r8
   236fc:	bl	14604 <gcry_sexp_canon_len@plt>
   23700:	subs	r6, r0, #0
   23704:	beq	2374c <__assert_fail@plt+0xf0f4>
   23708:	bl	139c8 <gcry_malloc@plt>
   2370c:	cmp	r0, #0
   23710:	str	r0, [r5]
   23714:	beq	2372c <__assert_fail@plt+0xf0d4>
   23718:	mov	r2, r6
   2371c:	ldr	r1, [sp, #8]
   23720:	bl	13ba8 <memcpy@plt>
   23724:	mov	r6, #1
   23728:	b	236b4 <__assert_fail@plt+0xf05c>
   2372c:	bl	14580 <gpg_err_code_from_syserror@plt>
   23730:	cmp	r0, #0
   23734:	beq	236e4 <__assert_fail@plt+0xf08c>
   23738:	uxth	r8, r0
   2373c:	mov	r6, #0
   23740:	orr	r8, r8, #67108864	; 0x4000000
   23744:	b	236b4 <__assert_fail@plt+0xf05c>
   23748:	bl	13cec <__stack_chk_fail@plt>
   2374c:	movw	r0, #34916	; 0x8864
   23750:	movw	r1, #23228	; 0x5abc
   23754:	movt	r0, #4
   23758:	movt	r1, #4
   2375c:	movw	r2, #933	; 0x3a5
   23760:	ldr	r3, [pc]	; 23768 <__assert_fail@plt+0xf110>
   23764:	bl	14658 <__assert_fail@plt>
   23768:	andeq	r5, r4, r8, lsl #21
   2376c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23770:	movw	r4, #47296	; 0xb8c0
   23774:	movt	r4, #5
   23778:	ldr	ip, [r0, #120]	; 0x78
   2377c:	sub	sp, sp, #68	; 0x44
   23780:	mov	r7, r2
   23784:	ldr	r5, [r4]
   23788:	cmp	ip, #0
   2378c:	mov	r6, r0
   23790:	mov	ip, #0
   23794:	ldr	r2, [sp, #104]	; 0x68
   23798:	str	r5, [sp, #60]	; 0x3c
   2379c:	moveq	r5, #17
   237a0:	str	ip, [sp, #20]
   237a4:	movteq	r5, #1024	; 0x400
   237a8:	str	ip, [sp, #24]
   237ac:	str	ip, [sp, #28]
   237b0:	bne	237d0 <__assert_fail@plt+0xf178>
   237b4:	ldr	r2, [sp, #60]	; 0x3c
   237b8:	mov	r0, r5
   237bc:	ldr	r3, [r4]
   237c0:	cmp	r2, r3
   237c4:	bne	23b30 <__assert_fail@plt+0xf4d8>
   237c8:	add	sp, sp, #68	; 0x44
   237cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   237d0:	str	r3, [sp]
   237d4:	add	r3, sp, #20
   237d8:	str	r2, [sp, #4]
   237dc:	add	r2, r0, #100	; 0x64
   237e0:	str	r3, [sp, #8]
   237e4:	add	r3, sp, #28
   237e8:	bl	22634 <__assert_fail@plt+0xdfdc>
   237ec:	subs	r5, r0, #0
   237f0:	bne	2391c <__assert_fail@plt+0xf2c4>
   237f4:	ldr	r8, [sp, #20]
   237f8:	cmp	r8, #0
   237fc:	beq	23a84 <__assert_fail@plt+0xf42c>
   23800:	ldr	r0, [r6, #24]
   23804:	movw	r3, #1025	; 0x401
   23808:	cmp	r0, r3
   2380c:	beq	23930 <__assert_fail@plt+0xf2d8>
   23810:	ldrb	r8, [r6, #96]	; 0x60
   23814:	add	r9, r6, #28
   23818:	ldr	sl, [r6, #92]	; 0x5c
   2381c:	sbfx	r8, r8, #0, #1
   23820:	cmp	r8, #0
   23824:	bne	23950 <__assert_fail@plt+0xf2f8>
   23828:	bl	141a8 <gcry_md_algo_name@plt>
   2382c:	subs	r6, r0, #0
   23830:	beq	23848 <__assert_fail@plt+0xf1f0>
   23834:	bl	14094 <strlen@plt>
   23838:	cmp	r0, #15
   2383c:	movls	r5, r8
   23840:	addls	r8, sp, #40	; 0x28
   23844:	bls	23870 <__assert_fail@plt+0xf218>
   23848:	add	r8, sp, #40	; 0x28
   2384c:	b	23888 <__assert_fail@plt+0xf230>
   23850:	bl	13fec <__ctype_tolower_loc@plt>
   23854:	ldrb	r2, [r6, r5]
   23858:	ldr	r3, [r0]
   2385c:	mov	r0, r6
   23860:	ldr	r3, [r3, r2, lsl #2]
   23864:	strb	r3, [r8, r5]
   23868:	add	r5, r5, #1
   2386c:	bl	14094 <strlen@plt>
   23870:	cmp	r5, r0
   23874:	bcc	23850 <__assert_fail@plt+0xf1f8>
   23878:	add	r3, sp, #64	; 0x40
   2387c:	add	r5, r3, r5
   23880:	mov	r3, #0
   23884:	strb	r3, [r5, #-24]	; 0xffffffe8
   23888:	str	sl, [sp]
   2388c:	mov	r3, r8
   23890:	str	r9, [sp, #4]
   23894:	movw	r2, #24244	; 0x5eb4
   23898:	add	r0, sp, #32
   2389c:	movt	r2, #4
   238a0:	mov	r1, #0
   238a4:	bl	14208 <gcry_sexp_build@plt>
   238a8:	mov	r5, r0
   238ac:	ldr	r8, [sp, #32]
   238b0:	cmp	r5, #0
   238b4:	bne	238fc <__assert_fail@plt+0xf2a4>
   238b8:	movw	r6, #48116	; 0xbbf4
   238bc:	movt	r6, #5
   238c0:	ldr	r3, [r6]
   238c4:	tst	r3, #4
   238c8:	bne	239bc <__assert_fail@plt+0xf364>
   238cc:	mov	r1, r8
   238d0:	ldr	r2, [sp, #20]
   238d4:	add	r0, sp, #24
   238d8:	bl	14250 <gcry_pk_sign@plt>
   238dc:	mov	r9, r0
   238e0:	mov	r0, r8
   238e4:	bl	13be4 <gcry_sexp_release@plt>
   238e8:	cmp	r9, #0
   238ec:	bne	23998 <__assert_fail@plt+0xf340>
   238f0:	ldr	r5, [r6]
   238f4:	ands	r5, r5, #4
   238f8:	bne	239d4 <__assert_fail@plt+0xf37c>
   238fc:	ldr	r8, [sp, #20]
   23900:	ldr	r3, [sp, #24]
   23904:	mov	r0, r8
   23908:	str	r3, [r7]
   2390c:	bl	13be4 <gcry_sexp_release@plt>
   23910:	ldr	r0, [sp, #28]
   23914:	bl	13c44 <gcry_free@plt>
   23918:	b	237b4 <__assert_fail@plt+0xf15c>
   2391c:	movw	r0, #24060	; 0x5dfc
   23920:	movt	r0, #4
   23924:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   23928:	ldr	r8, [sp, #20]
   2392c:	b	23900 <__assert_fail@plt+0xf2a8>
   23930:	ldr	r9, [r6, #92]	; 0x5c
   23934:	mov	r0, r8
   23938:	bl	13eb4 <gcry_pk_get_nbits@plt>
   2393c:	cmp	r9, #0
   23940:	bne	239f4 <__assert_fail@plt+0xf39c>
   23944:	mov	r5, #66	; 0x42
   23948:	movt	r5, #1024	; 0x400
   2394c:	b	23900 <__assert_fail@plt+0xf2a8>
   23950:	str	r5, [sp]
   23954:	mov	r2, r9
   23958:	mov	r3, sl
   2395c:	add	r0, sp, #36	; 0x24
   23960:	mov	r1, #5
   23964:	bl	14304 <gcry_mpi_scan@plt>
   23968:	subs	r5, r0, #0
   2396c:	bne	238ac <__assert_fail@plt+0xf254>
   23970:	mov	r1, r5
   23974:	add	r0, sp, #32
   23978:	ldr	r3, [sp, #36]	; 0x24
   2397c:	movw	r2, #24280	; 0x5ed8
   23980:	movt	r2, #4
   23984:	bl	14208 <gcry_sexp_build@plt>
   23988:	mov	r5, r0
   2398c:	ldr	r0, [sp, #36]	; 0x24
   23990:	bl	14268 <gcry_mpi_release@plt>
   23994:	b	238ac <__assert_fail@plt+0xf254>
   23998:	mov	r0, r9
   2399c:	mov	r5, r9
   239a0:	bl	13a64 <gpg_strerror@plt>
   239a4:	mov	r1, r0
   239a8:	movw	r0, #24320	; 0x5f00
   239ac:	movt	r0, #4
   239b0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   239b4:	ldr	r8, [sp, #20]
   239b8:	b	23900 <__assert_fail@plt+0xf2a8>
   239bc:	movw	r0, #24312	; 0x5ef8
   239c0:	movt	r0, #4
   239c4:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   239c8:	ldr	r0, [sp, #20]
   239cc:	bl	144d8 <gcry_sexp_dump@plt>
   239d0:	b	238cc <__assert_fail@plt+0xf274>
   239d4:	movw	r0, #24340	; 0x5f14
   239d8:	movt	r0, #4
   239dc:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   239e0:	ldr	r0, [sp, #24]
   239e4:	bl	144d8 <gcry_sexp_dump@plt>
   239e8:	mov	r5, r9
   239ec:	ldr	r8, [sp, #20]
   239f0:	b	23900 <__assert_fail@plt+0xf2a8>
   239f4:	add	r0, r0, #7
   239f8:	add	r3, r9, #12
   239fc:	lsr	sl, r0, #3
   23a00:	cmp	sl, r3
   23a04:	bcc	23944 <__assert_fail@plt+0xf2ec>
   23a08:	mov	r0, sl
   23a0c:	bl	139c8 <gcry_malloc@plt>
   23a10:	subs	r8, r0, #0
   23a14:	beq	23b34 <__assert_fail@plt+0xf4dc>
   23a18:	rsb	fp, r9, sl
   23a1c:	mov	r3, #1
   23a20:	sub	r2, fp, #3
   23a24:	strb	r5, [r8]
   23a28:	cmp	r2, #7
   23a2c:	strb	r3, [r8, #1]
   23a30:	bls	23b70 <__assert_fail@plt+0xf518>
   23a34:	add	r0, r8, #2
   23a38:	mov	r1, #255	; 0xff
   23a3c:	bl	141cc <memset@plt>
   23a40:	add	r0, r8, fp
   23a44:	add	r1, r6, #28
   23a48:	mov	r2, r9
   23a4c:	strb	r5, [r0, #-1]
   23a50:	bl	13ba8 <memcpy@plt>
   23a54:	mov	r1, r5
   23a58:	str	r8, [sp]
   23a5c:	mov	r3, sl
   23a60:	movw	r2, #24212	; 0x5e94
   23a64:	add	r0, sp, #36	; 0x24
   23a68:	movt	r2, #4
   23a6c:	bl	14208 <gcry_sexp_build@plt>
   23a70:	mov	r5, r0
   23a74:	mov	r0, r8
   23a78:	bl	13c44 <gcry_free@plt>
   23a7c:	ldr	r8, [sp, #36]	; 0x24
   23a80:	b	238b0 <__assert_fail@plt+0xf258>
   23a84:	ldr	ip, [sp, #28]
   23a88:	add	lr, sp, #36	; 0x24
   23a8c:	ldr	r2, [r6, #92]	; 0x5c
   23a90:	mov	r0, r6
   23a94:	ldr	r3, [r6, #24]
   23a98:	add	r1, r6, #28
   23a9c:	str	lr, [sp, #4]
   23aa0:	str	ip, [sp]
   23aa4:	str	r8, [sp, #36]	; 0x24
   23aa8:	bl	28a7c <__assert_fail@plt+0x14424>
   23aac:	subs	r5, r0, #0
   23ab0:	beq	23acc <__assert_fail@plt+0xf474>
   23ab4:	bl	13a64 <gpg_strerror@plt>
   23ab8:	mov	r1, r0
   23abc:	movw	r0, #24092	; 0x5e1c
   23ac0:	movt	r0, #4
   23ac4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   23ac8:	b	238fc <__assert_fail@plt+0xf2a4>
   23acc:	mov	r3, r5
   23ad0:	ldr	r0, [sp, #36]	; 0x24
   23ad4:	mov	r1, r5
   23ad8:	mov	r2, r5
   23adc:	bl	14604 <gcry_sexp_canon_len@plt>
   23ae0:	subs	r3, r0, #0
   23ae4:	beq	23b50 <__assert_fail@plt+0xf4f8>
   23ae8:	mov	r1, r5
   23aec:	ldr	r2, [sp, #36]	; 0x24
   23af0:	add	r0, sp, #24
   23af4:	bl	13bf0 <gcry_sexp_sscan@plt>
   23af8:	mov	r5, r0
   23afc:	ldr	r0, [sp, #36]	; 0x24
   23b00:	bl	13c44 <gcry_free@plt>
   23b04:	cmp	r5, #0
   23b08:	moveq	r5, r8
   23b0c:	ldreq	r8, [sp, #20]
   23b10:	beq	23900 <__assert_fail@plt+0xf2a8>
   23b14:	mov	r0, r5
   23b18:	bl	13a64 <gpg_strerror@plt>
   23b1c:	mov	r1, r0
   23b20:	movw	r0, #24136	; 0x5e48
   23b24:	movt	r0, #4
   23b28:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   23b2c:	b	238fc <__assert_fail@plt+0xf2a4>
   23b30:	bl	13cec <__stack_chk_fail@plt>
   23b34:	bl	14580 <gpg_err_code_from_syserror@plt>
   23b38:	mov	r8, #0
   23b3c:	cmp	r0, #0
   23b40:	uxthne	r0, r0
   23b44:	orrne	r5, r0, #67108864	; 0x4000000
   23b48:	moveq	r5, r0
   23b4c:	b	238b0 <__assert_fail@plt+0xf258>
   23b50:	movw	r0, #16900	; 0x4204
   23b54:	movw	r1, #24124	; 0x5e3c
   23b58:	movw	r3, #24008	; 0x5dc8
   23b5c:	movt	r0, #4
   23b60:	movt	r1, #4
   23b64:	mov	r2, #169	; 0xa9
   23b68:	movt	r3, #4
   23b6c:	bl	14658 <__assert_fail@plt>
   23b70:	movw	r0, #24204	; 0x5e8c
   23b74:	movw	r1, #24124	; 0x5e3c
   23b78:	movt	r0, #4
   23b7c:	movt	r1, #4
   23b80:	mov	r2, #107	; 0x6b
   23b84:	ldr	r3, [pc]	; 23b8c <__assert_fail@plt+0xf534>
   23b88:	bl	14658 <__assert_fail@plt>
   23b8c:	ldrdeq	r5, [r4], -r8
   23b90:	push	{r4, r5, r6, r7, r8, lr}
   23b94:	movw	r4, #47296	; 0xb8c0
   23b98:	movt	r4, #5
   23b9c:	sub	sp, sp, #16
   23ba0:	add	ip, sp, #16
   23ba4:	mov	r5, #0
   23ba8:	ldr	lr, [r4]
   23bac:	mov	r7, r2
   23bb0:	str	r5, [ip, #-8]!
   23bb4:	mov	r2, ip
   23bb8:	str	r5, [sp]
   23bbc:	str	lr, [sp, #12]
   23bc0:	bl	2376c <__assert_fail@plt+0xf114>
   23bc4:	subs	r6, r0, #0
   23bc8:	bne	23c18 <__assert_fail@plt+0xf5c0>
   23bcc:	ldr	r0, [sp, #8]
   23bd0:	mov	r1, #1
   23bd4:	mov	r2, r6
   23bd8:	mov	r3, r6
   23bdc:	bl	14298 <gcry_sexp_sprint@plt>
   23be0:	subs	r8, r0, #0
   23be4:	beq	23c64 <__assert_fail@plt+0xf60c>
   23be8:	bl	1398c <gcry_xmalloc@plt>
   23bec:	mov	r3, r8
   23bf0:	mov	r1, #1
   23bf4:	mov	r2, r0
   23bf8:	mov	r5, r0
   23bfc:	ldr	r0, [sp, #8]
   23c00:	bl	14298 <gcry_sexp_sprint@plt>
   23c04:	subs	r2, r0, #0
   23c08:	beq	23c48 <__assert_fail@plt+0xf5f0>
   23c0c:	mov	r0, r7
   23c10:	mov	r1, r5
   23c14:	bl	2edf0 <__assert_fail@plt+0x1a798>
   23c18:	ldr	r0, [sp, #8]
   23c1c:	bl	13be4 <gcry_sexp_release@plt>
   23c20:	mov	r0, r5
   23c24:	bl	13c44 <gcry_free@plt>
   23c28:	ldr	r2, [sp, #12]
   23c2c:	ldr	r3, [r4]
   23c30:	mov	r0, r6
   23c34:	cmp	r2, r3
   23c38:	bne	23c44 <__assert_fail@plt+0xf5ec>
   23c3c:	add	sp, sp, #16
   23c40:	pop	{r4, r5, r6, r7, r8, pc}
   23c44:	bl	13cec <__stack_chk_fail@plt>
   23c48:	movw	r0, #16900	; 0x4204
   23c4c:	movw	r1, #24124	; 0x5e3c
   23c50:	movt	r0, #4
   23c54:	movt	r1, #4
   23c58:	mov	r2, #252	; 0xfc
   23c5c:	ldr	r3, [pc, #28]	; 23c80 <__assert_fail@plt+0xf628>
   23c60:	bl	14658 <__assert_fail@plt>
   23c64:	movw	r0, #16900	; 0x4204
   23c68:	movw	r1, #24124	; 0x5e3c
   23c6c:	movt	r0, #4
   23c70:	movt	r1, #4
   23c74:	mov	r2, #249	; 0xf9
   23c78:	ldr	r3, [pc]	; 23c80 <__assert_fail@plt+0xf628>
   23c7c:	bl	14658 <__assert_fail@plt>
   23c80:	andeq	r5, r4, ip, ror #27
   23c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23c88:	movw	r4, #47296	; 0xb8c0
   23c8c:	movt	r4, #5
   23c90:	mov	r6, r0
   23c94:	ldr	r0, [r0, #120]	; 0x78
   23c98:	sub	sp, sp, #108	; 0x6c
   23c9c:	ldr	lr, [r4]
   23ca0:	mov	r5, r1
   23ca4:	mov	r1, #0
   23ca8:	cmp	r0, r1
   23cac:	str	r1, [sp, #16]
   23cb0:	mov	r7, r2
   23cb4:	str	r1, [sp, #20]
   23cb8:	mov	r8, r3
   23cbc:	str	lr, [sp, #100]	; 0x64
   23cc0:	str	r1, [sp, #24]
   23cc4:	str	r1, [sp, #28]
   23cc8:	str	r1, [sp, #32]
   23ccc:	ldr	r9, [sp, #144]	; 0x90
   23cd0:	bne	23d2c <__assert_fail@plt+0xf6d4>
   23cd4:	movw	r0, #24368	; 0x5f30
   23cd8:	movt	r0, #4
   23cdc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   23ce0:	mov	r5, #17
   23ce4:	movt	r5, #1024	; 0x400
   23ce8:	ldr	r0, [sp, #16]
   23cec:	bl	13be4 <gcry_sexp_release@plt>
   23cf0:	ldr	r0, [sp, #24]
   23cf4:	bl	13be4 <gcry_sexp_release@plt>
   23cf8:	ldr	r0, [sp, #20]
   23cfc:	bl	13be4 <gcry_sexp_release@plt>
   23d00:	ldr	r0, [sp, #32]
   23d04:	bl	13c44 <gcry_free@plt>
   23d08:	ldr	r0, [sp, #28]
   23d0c:	bl	13c44 <gcry_free@plt>
   23d10:	ldr	r2, [sp, #100]	; 0x64
   23d14:	ldr	r3, [r4]
   23d18:	mov	r0, r5
   23d1c:	cmp	r2, r3
   23d20:	bne	23fc0 <__assert_fail@plt+0xf968>
   23d24:	add	sp, sp, #108	; 0x6c
   23d28:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   23d2c:	add	r0, sp, #20
   23d30:	bl	13bf0 <gcry_sexp_sscan@plt>
   23d34:	cmp	r0, #0
   23d38:	bne	23db0 <__assert_fail@plt+0xf758>
   23d3c:	movw	sl, #48116	; 0xbbf4
   23d40:	movt	sl, #5
   23d44:	add	fp, r6, #100	; 0x64
   23d48:	ldr	r3, [sl]
   23d4c:	tst	r3, #4
   23d50:	bne	23e98 <__assert_fail@plt+0xf840>
   23d54:	mov	r1, r5
   23d58:	mov	r2, fp
   23d5c:	mov	r0, #0
   23d60:	add	r3, sp, #16
   23d64:	str	r0, [sp, #4]
   23d68:	mov	fp, #2
   23d6c:	str	r3, [sp, #8]
   23d70:	mov	r0, r6
   23d74:	str	fp, [sp]
   23d78:	add	r3, sp, #28
   23d7c:	bl	22634 <__assert_fail@plt+0xdfdc>
   23d80:	subs	r5, r0, #0
   23d84:	beq	23dd0 <__assert_fail@plt+0xf778>
   23d88:	uxth	r2, r5
   23d8c:	movw	r3, #32849	; 0x8051
   23d90:	cmp	r2, r3
   23d94:	moveq	r5, #17
   23d98:	movteq	r5, #1024	; 0x400
   23d9c:	beq	23ce8 <__assert_fail@plt+0xf690>
   23da0:	movw	r0, #24060	; 0x5dfc
   23da4:	movt	r0, #4
   23da8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   23dac:	b	23ce8 <__assert_fail@plt+0xf690>
   23db0:	bl	13a64 <gpg_strerror@plt>
   23db4:	mov	r5, #79	; 0x4f
   23db8:	movt	r5, #1024	; 0x400
   23dbc:	mov	r1, r0
   23dc0:	movw	r0, #24412	; 0x5f5c
   23dc4:	movt	r0, #4
   23dc8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   23dcc:	b	23ce8 <__assert_fail@plt+0xf690>
   23dd0:	ldr	r2, [sp, #16]
   23dd4:	cmp	r2, #0
   23dd8:	beq	23f00 <__assert_fail@plt+0xf8a8>
   23ddc:	add	r0, sp, #24
   23de0:	ldr	r1, [sp, #20]
   23de4:	bl	145e0 <gcry_pk_decrypt@plt>
   23de8:	subs	r5, r0, #0
   23dec:	bne	23ee8 <__assert_fail@plt+0xf890>
   23df0:	ldr	r3, [sl]
   23df4:	tst	r3, #4
   23df8:	bne	23ec4 <__assert_fail@plt+0xf86c>
   23dfc:	mov	r2, #0
   23e00:	ldr	r0, [sp, #24]
   23e04:	mov	r3, r2
   23e08:	mov	r1, #1
   23e0c:	bl	14298 <gcry_sexp_sprint@plt>
   23e10:	cmp	r0, #0
   23e14:	str	r0, [sp, #36]	; 0x24
   23e18:	beq	23fe4 <__assert_fail@plt+0xf98c>
   23e1c:	bl	1398c <gcry_xmalloc@plt>
   23e20:	mov	r1, #1
   23e24:	ldr	r3, [sp, #36]	; 0x24
   23e28:	mov	ip, r0
   23e2c:	mov	r2, r0
   23e30:	ldr	r0, [sp, #24]
   23e34:	str	ip, [sp, #32]
   23e38:	bl	14298 <gcry_sexp_sprint@plt>
   23e3c:	cmp	r0, #0
   23e40:	mov	r2, r0
   23e44:	str	r0, [sp, #36]	; 0x24
   23e48:	beq	23fc4 <__assert_fail@plt+0xf96c>
   23e4c:	ldr	r1, [sp, #32]
   23e50:	ldrb	r3, [r1]
   23e54:	cmp	r3, #40	; 0x28
   23e58:	beq	23edc <__assert_fail@plt+0xf884>
   23e5c:	mov	r0, r9
   23e60:	mov	r2, #8
   23e64:	movw	r1, #24564	; 0x5ff4
   23e68:	movt	r1, #4
   23e6c:	bl	2edf0 <__assert_fail@plt+0x1a798>
   23e70:	mov	r0, r9
   23e74:	ldr	r1, [sp, #32]
   23e78:	ldr	r2, [sp, #36]	; 0x24
   23e7c:	bl	2edf0 <__assert_fail@plt+0x1a798>
   23e80:	mov	r0, r9
   23e84:	movw	r1, #29984	; 0x7520
   23e88:	mov	r2, #2
   23e8c:	movt	r1, #4
   23e90:	bl	2edf0 <__assert_fail@plt+0x1a798>
   23e94:	b	23ce8 <__assert_fail@plt+0xf690>
   23e98:	mov	r1, fp
   23e9c:	mov	r2, #20
   23ea0:	movw	r0, #24448	; 0x5f80
   23ea4:	movt	r0, #4
   23ea8:	bl	3f668 <__assert_fail@plt+0x2b010>
   23eac:	movw	r0, #24460	; 0x5f8c
   23eb0:	mov	r1, r7
   23eb4:	movt	r0, #4
   23eb8:	mov	r2, r8
   23ebc:	bl	3f668 <__assert_fail@plt+0x2b010>
   23ec0:	b	23d54 <__assert_fail@plt+0xf6fc>
   23ec4:	movw	r0, #24544	; 0x5fe0
   23ec8:	movt	r0, #4
   23ecc:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   23ed0:	ldr	r0, [sp, #24]
   23ed4:	bl	144d8 <gcry_sexp_dump@plt>
   23ed8:	b	23dfc <__assert_fail@plt+0xf7a4>
   23edc:	mov	r0, r9
   23ee0:	bl	2edf0 <__assert_fail@plt+0x1a798>
   23ee4:	b	23ce8 <__assert_fail@plt+0xf690>
   23ee8:	bl	13a64 <gpg_strerror@plt>
   23eec:	mov	r1, r0
   23ef0:	movw	r0, #24520	; 0x5fc8
   23ef4:	movt	r0, #4
   23ef8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   23efc:	b	23ce8 <__assert_fail@plt+0xf690>
   23f00:	mov	r2, r5
   23f04:	mov	r3, r5
   23f08:	mov	r1, r8
   23f0c:	mov	r0, r7
   23f10:	bl	14604 <gcry_sexp_canon_len@plt>
   23f14:	cmp	r0, #0
   23f18:	moveq	r5, #83	; 0x53
   23f1c:	movteq	r5, #1024	; 0x400
   23f20:	beq	23ce8 <__assert_fail@plt+0xf690>
   23f24:	add	ip, sp, #36	; 0x24
   23f28:	ldr	r2, [sp, #28]
   23f2c:	mov	r0, r6
   23f30:	mov	r1, r7
   23f34:	add	r3, sp, #32
   23f38:	str	ip, [sp]
   23f3c:	bl	28c80 <__assert_fail@plt+0x14628>
   23f40:	subs	r5, r0, #0
   23f44:	beq	23f60 <__assert_fail@plt+0xf908>
   23f48:	bl	13a64 <gpg_strerror@plt>
   23f4c:	mov	r1, r0
   23f50:	movw	r0, #24472	; 0x5f98
   23f54:	movt	r0, #4
   23f58:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   23f5c:	b	23ce8 <__assert_fail@plt+0xf690>
   23f60:	ldr	r2, [sp, #36]	; 0x24
   23f64:	mov	r1, #1
   23f68:	add	r0, sp, #40	; 0x28
   23f6c:	movw	r3, #24508	; 0x5fbc
   23f70:	movt	r3, #4
   23f74:	str	r2, [sp]
   23f78:	mov	r2, #60	; 0x3c
   23f7c:	bl	14178 <__sprintf_chk@plt>
   23f80:	add	r0, sp, #40	; 0x28
   23f84:	bl	14094 <strlen@plt>
   23f88:	add	r1, sp, #40	; 0x28
   23f8c:	mov	r2, r0
   23f90:	mov	r0, r9
   23f94:	bl	2edf0 <__assert_fail@plt+0x1a798>
   23f98:	mov	r0, r9
   23f9c:	ldr	r1, [sp, #32]
   23fa0:	ldr	r2, [sp, #36]	; 0x24
   23fa4:	bl	2edf0 <__assert_fail@plt+0x1a798>
   23fa8:	mov	r0, r9
   23fac:	mov	r2, fp
   23fb0:	movw	r1, #29984	; 0x7520
   23fb4:	movt	r1, #4
   23fb8:	bl	2edf0 <__assert_fail@plt+0x1a798>
   23fbc:	b	23ce8 <__assert_fail@plt+0xf690>
   23fc0:	bl	13cec <__stack_chk_fail@plt>
   23fc4:	movw	r0, #16900	; 0x4204
   23fc8:	movw	r1, #24552	; 0x5fe8
   23fcc:	movw	r3, #24352	; 0x5f20
   23fd0:	movt	r0, #4
   23fd4:	movt	r1, #4
   23fd8:	mov	r2, #128	; 0x80
   23fdc:	movt	r3, #4
   23fe0:	bl	14658 <__assert_fail@plt>
   23fe4:	movw	r0, #16900	; 0x4204
   23fe8:	movw	r1, #24552	; 0x5fe8
   23fec:	movw	r3, #24352	; 0x5f20
   23ff0:	movt	r0, #4
   23ff4:	movt	r1, #4
   23ff8:	mov	r2, #125	; 0x7d
   23ffc:	movt	r3, #4
   24000:	bl	14658 <__assert_fail@plt>
   24004:	movw	r3, #48116	; 0xbbf4
   24008:	movt	r3, #5
   2400c:	push	{r4, r5, r6, r7, lr}
   24010:	mov	r5, r1
   24014:	ldr	r4, [r3, #80]	; 0x50
   24018:	sub	sp, sp, #12
   2401c:	mov	r6, r0
   24020:	mov	r7, r2
   24024:	cmp	r4, #0
   24028:	movw	r1, #24604	; 0x601c
   2402c:	beq	24068 <__assert_fail@plt+0xfa10>
   24030:	movt	r1, #4
   24034:	mov	r2, #5
   24038:	mov	r0, #0
   2403c:	bl	13cc8 <dcgettext@plt>
   24040:	mov	r1, r5
   24044:	mov	r2, r0
   24048:	mov	r0, r6
   2404c:	bl	213f8 <__assert_fail@plt+0xcda0>
   24050:	mov	r3, #99	; 0x63
   24054:	movt	r3, #1024	; 0x400
   24058:	cmp	r0, #0
   2405c:	moveq	r0, r3
   24060:	add	sp, sp, #12
   24064:	pop	{r4, r5, r6, r7, pc}
   24068:	mov	r0, r4
   2406c:	movt	r1, #4
   24070:	mov	r2, #5
   24074:	bl	13cc8 <dcgettext@plt>
   24078:	str	r4, [sp]
   2407c:	mov	r1, r5
   24080:	mov	r2, r7
   24084:	mov	r3, r0
   24088:	mov	r0, r6
   2408c:	bl	2116c <__assert_fail@plt+0xcb14>
   24090:	add	sp, sp, #12
   24094:	pop	{r4, r5, r6, r7, pc}
   24098:	push	{r3, r4, r5, lr}
   2409c:	mov	r2, #5
   240a0:	mov	r4, r1
   240a4:	mov	r5, r0
   240a8:	movw	r1, #24628	; 0x6034
   240ac:	mov	r0, #0
   240b0:	movt	r1, #4
   240b4:	bl	13cc8 <dcgettext@plt>
   240b8:	mov	r1, r4
   240bc:	mov	r2, r0
   240c0:	mov	r0, r5
   240c4:	pop	{r3, r4, r5, lr}
   240c8:	b	24004 <__assert_fail@plt+0xf9ac>
   240cc:	add	r1, r0, #36	; 0x24
   240d0:	ldr	r0, [r0, #24]
   240d4:	push	{r3, lr}
   240d8:	bl	13a28 <strcmp@plt>
   240dc:	subs	r0, r0, #0
   240e0:	mvnne	r0, #0
   240e4:	pop	{r3, pc}
   240e8:	push	{r4, r5, r6, r7, r8, lr}
   240ec:	movw	r4, #47296	; 0xb8c0
   240f0:	movt	r4, #5
   240f4:	sub	sp, sp, #32
   240f8:	mov	r7, r1
   240fc:	add	r1, sp, #8
   24100:	ldr	ip, [r4]
   24104:	mov	r8, r2
   24108:	mov	r6, r0
   2410c:	str	ip, [sp, #28]
   24110:	bl	14610 <gcry_pk_get_keygrip@plt>
   24114:	cmp	r0, #0
   24118:	beq	241d0 <__assert_fail@plt+0xfb78>
   2411c:	mov	r2, #0
   24120:	mov	r0, r6
   24124:	mov	r3, r2
   24128:	mov	r1, #1
   2412c:	bl	14298 <gcry_sexp_sprint@plt>
   24130:	cmp	r0, #0
   24134:	str	r0, [sp]
   24138:	beq	24224 <__assert_fail@plt+0xfbcc>
   2413c:	bl	13f44 <gcry_malloc_secure@plt>
   24140:	subs	r5, r0, #0
   24144:	beq	241e4 <__assert_fail@plt+0xfb8c>
   24148:	mov	r0, r6
   2414c:	mov	r1, #1
   24150:	mov	r2, r5
   24154:	ldr	r3, [sp]
   24158:	bl	14298 <gcry_sexp_sprint@plt>
   2415c:	cmp	r0, #0
   24160:	str	r0, [sp]
   24164:	beq	24204 <__assert_fail@plt+0xfbac>
   24168:	cmp	r7, #0
   2416c:	beq	241f8 <__assert_fail@plt+0xfba0>
   24170:	mov	r1, r7
   24174:	mov	r0, r5
   24178:	add	r2, sp, #4
   2417c:	mov	r3, sp
   24180:	bl	250a0 <__assert_fail@plt+0x10a48>
   24184:	subs	r6, r0, #0
   24188:	mov	r0, r5
   2418c:	bne	241b0 <__assert_fail@plt+0xfb58>
   24190:	bl	13c44 <gcry_free@plt>
   24194:	ldm	sp, {r2, r5}
   24198:	add	r0, sp, #8
   2419c:	mov	r3, r8
   241a0:	mov	r1, r5
   241a4:	bl	223fc <__assert_fail@plt+0xdda4>
   241a8:	mov	r6, r0
   241ac:	mov	r0, r5
   241b0:	bl	13c44 <gcry_free@plt>
   241b4:	mov	r0, r6
   241b8:	ldr	r2, [sp, #28]
   241bc:	ldr	r3, [r4]
   241c0:	cmp	r2, r3
   241c4:	bne	24200 <__assert_fail@plt+0xfba8>
   241c8:	add	sp, sp, #32
   241cc:	pop	{r4, r5, r6, r7, r8, pc}
   241d0:	movw	r0, #24652	; 0x604c
   241d4:	movt	r0, #4
   241d8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   241dc:	mov	r0, #67108865	; 0x4000001
   241e0:	b	241b8 <__assert_fail@plt+0xfb60>
   241e4:	bl	14580 <gpg_err_code_from_syserror@plt>
   241e8:	cmp	r0, #0
   241ec:	uxthne	r0, r0
   241f0:	orrne	r0, r0, #67108864	; 0x4000000
   241f4:	b	241b8 <__assert_fail@plt+0xfb60>
   241f8:	mov	r2, r0
   241fc:	b	24198 <__assert_fail@plt+0xfb40>
   24200:	bl	13cec <__stack_chk_fail@plt>
   24204:	movw	r0, #16900	; 0x4204
   24208:	movw	r1, #24680	; 0x6068
   2420c:	movw	r3, #24576	; 0x6000
   24210:	movt	r0, #4
   24214:	movt	r1, #4
   24218:	mov	r2, #53	; 0x35
   2421c:	movt	r3, #4
   24220:	bl	14658 <__assert_fail@plt>
   24224:	movw	r0, #16900	; 0x4204
   24228:	movw	r1, #24680	; 0x6068
   2422c:	movw	r3, #24576	; 0x6000
   24230:	movt	r0, #4
   24234:	movt	r1, #4
   24238:	mov	r2, #48	; 0x30
   2423c:	movt	r3, #4
   24240:	bl	14658 <__assert_fail@plt>
   24244:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24248:	movw	r5, #47296	; 0xb8c0
   2424c:	movt	r5, #5
   24250:	cmp	r1, #0
   24254:	sub	sp, sp, #76	; 0x4c
   24258:	movw	r6, #18888	; 0x49c8
   2425c:	ldr	r3, [r5]
   24260:	movt	r6, #4
   24264:	movw	r4, #48116	; 0xbbf4
   24268:	movne	r6, r1
   2426c:	movt	r4, #5
   24270:	str	r0, [sp, #20]
   24274:	mov	r0, r6
   24278:	mov	r8, r2
   2427c:	ldr	r7, [r4, #84]	; 0x54
   24280:	str	r3, [sp, #68]	; 0x44
   24284:	ldr	r9, [r4, #88]	; 0x58
   24288:	bl	3bba8 <__assert_fail@plt+0x27550>
   2428c:	cmp	r7, r0
   24290:	bls	24314 <__assert_fail@plt+0xfcbc>
   24294:	cmp	r8, #0
   24298:	beq	242c0 <__assert_fail@plt+0xfc68>
   2429c:	mov	r7, #31
   242a0:	movt	r7, #1024	; 0x400
   242a4:	ldr	r2, [sp, #68]	; 0x44
   242a8:	mov	r0, r7
   242ac:	ldr	r3, [r5]
   242b0:	cmp	r2, r3
   242b4:	bne	2468c <__assert_fail@plt+0x10034>
   242b8:	add	sp, sp, #76	; 0x4c
   242bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   242c0:	mov	r3, #5
   242c4:	movw	r1, #24692	; 0x6074
   242c8:	str	r3, [sp]
   242cc:	movt	r1, #4
   242d0:	mov	r3, r7
   242d4:	movw	r2, #24796	; 0x60dc
   242d8:	mov	r0, r8
   242dc:	movt	r2, #4
   242e0:	bl	145f8 <dcngettext@plt>
   242e4:	mov	r1, r7
   242e8:	bl	2ed14 <__assert_fail@plt+0x1a6bc>
   242ec:	subs	sl, r0, #0
   242f0:	beq	24600 <__assert_fail@plt+0xffa8>
   242f4:	mov	r1, sl
   242f8:	ldr	r0, [sp, #20]
   242fc:	bl	24098 <__assert_fail@plt+0xfa40>
   24300:	mov	r7, r0
   24304:	mov	r0, sl
   24308:	bl	13c44 <gcry_free@plt>
   2430c:	cmp	r7, #0
   24310:	bne	242a4 <__assert_fail@plt+0xfc4c>
   24314:	ldrb	r1, [r6]
   24318:	cmp	r1, #0
   2431c:	str	r1, [sp, #16]
   24320:	moveq	r7, r1
   24324:	beq	24368 <__assert_fail@plt+0xfd10>
   24328:	ldr	fp, [sp, #16]
   2432c:	mov	sl, r6
   24330:	mov	r7, #0
   24334:	tst	fp, #128	; 0x80
   24338:	bne	2435c <__assert_fail@plt+0xfd04>
   2433c:	bl	14034 <__ctype_b_loc@plt>
   24340:	lsl	r3, fp, #1
   24344:	movw	r1, #2052	; 0x804
   24348:	ldr	r0, [r0]
   2434c:	ldrh	r3, [r0, r3]
   24350:	and	r1, r3, r1
   24354:	cmp	r1, #0
   24358:	addne	r7, r7, #1
   2435c:	ldrb	fp, [sl, #1]!
   24360:	cmp	fp, #0
   24364:	bne	24334 <__assert_fail@plt+0xfcdc>
   24368:	cmp	r9, r7
   2436c:	bhi	2445c <__assert_fail@plt+0xfe04>
   24370:	ldr	sl, [sp, #16]
   24374:	cmp	sl, #0
   24378:	beq	244c0 <__assert_fail@plt+0xfe68>
   2437c:	ldr	r3, [r4, #92]	; 0x5c
   24380:	movw	r7, #48116	; 0xbbf4
   24384:	movt	r7, #5
   24388:	cmp	r3, #0
   2438c:	beq	24454 <__assert_fail@plt+0xfdfc>
   24390:	mov	r0, #6
   24394:	bl	2ca10 <__assert_fail@plt+0x183b8>
   24398:	mov	sl, r0
   2439c:	bl	2c750 <__assert_fail@plt+0x180f8>
   243a0:	subs	r9, r0, #0
   243a4:	beq	24618 <__assert_fail@plt+0xffc0>
   243a8:	mov	r0, r6
   243ac:	bl	14094 <strlen@plt>
   243b0:	mov	r2, #1
   243b4:	mov	r3, r9
   243b8:	mov	r1, r0
   243bc:	mov	r0, r6
   243c0:	bl	13e18 <fwrite@plt>
   243c4:	cmp	r0, #1
   243c8:	mov	ip, r0
   243cc:	beq	24530 <__assert_fail@plt+0xfed8>
   243d0:	bl	14580 <gpg_err_code_from_syserror@plt>
   243d4:	mov	r2, #5
   243d8:	movw	r1, #25192	; 0x6268
   243dc:	movt	r1, #4
   243e0:	cmp	r0, #0
   243e4:	uxthne	r7, r0
   243e8:	moveq	r7, r0
   243ec:	mov	r0, #0
   243f0:	orrne	r7, r7, #67108864	; 0x4000000
   243f4:	bl	13cc8 <dcgettext@plt>
   243f8:	mov	sl, r0
   243fc:	mov	r0, r7
   24400:	bl	13a64 <gpg_strerror@plt>
   24404:	mov	r1, r0
   24408:	mov	r0, sl
   2440c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   24410:	mov	r0, r9
   24414:	bl	142c8 <fclose@plt>
   24418:	movw	r1, #25244	; 0x629c
   2441c:	mov	r0, #0
   24420:	movt	r1, #4
   24424:	mov	r2, #5
   24428:	bl	13cc8 <dcgettext@plt>
   2442c:	cmp	r8, #0
   24430:	bne	2429c <__assert_fail@plt+0xfc44>
   24434:	mov	r1, r0
   24438:	ldr	r0, [sp, #20]
   2443c:	bl	24098 <__assert_fail@plt+0xfa40>
   24440:	subs	r7, r0, #0
   24444:	bne	242a4 <__assert_fail@plt+0xfc4c>
   24448:	ldrb	r3, [r6]
   2444c:	cmp	r3, #0
   24450:	beq	244c0 <__assert_fail@plt+0xfe68>
   24454:	mov	r7, #0
   24458:	b	242a4 <__assert_fail@plt+0xfc4c>
   2445c:	cmp	r8, #0
   24460:	bne	2429c <__assert_fail@plt+0xfc44>
   24464:	mov	r3, #5
   24468:	movw	r1, #24904	; 0x6148
   2446c:	str	r3, [sp]
   24470:	movt	r1, #4
   24474:	mov	r3, r9
   24478:	movw	r2, #25028	; 0x61c4
   2447c:	mov	r0, r8
   24480:	movt	r2, #4
   24484:	bl	145f8 <dcngettext@plt>
   24488:	mov	r1, r9
   2448c:	bl	2ed14 <__assert_fail@plt+0x1a6bc>
   24490:	subs	r9, r0, #0
   24494:	beq	24674 <__assert_fail@plt+0x1001c>
   24498:	mov	r1, r9
   2449c:	ldr	r0, [sp, #20]
   244a0:	bl	24098 <__assert_fail@plt+0xfa40>
   244a4:	mov	r7, r0
   244a8:	mov	r0, r9
   244ac:	bl	13c44 <gcry_free@plt>
   244b0:	cmp	r7, #0
   244b4:	bne	242a4 <__assert_fail@plt+0xfc4c>
   244b8:	ldrb	sl, [r6]
   244bc:	b	24374 <__assert_fail@plt+0xfd1c>
   244c0:	ldr	r0, [r4, #80]	; 0x50
   244c4:	cmp	r0, #0
   244c8:	beq	24518 <__assert_fail@plt+0xfec0>
   244cc:	movw	r1, #25364	; 0x6314
   244d0:	mov	r0, #0
   244d4:	movt	r1, #4
   244d8:	mov	r2, #5
   244dc:	bl	13cc8 <dcgettext@plt>
   244e0:	mov	r4, r0
   244e4:	cmp	r8, #0
   244e8:	bne	2429c <__assert_fail@plt+0xfc44>
   244ec:	mov	r2, #5
   244f0:	mov	r0, r8
   244f4:	movw	r1, #25584	; 0x63f0
   244f8:	movt	r1, #4
   244fc:	bl	13cc8 <dcgettext@plt>
   24500:	mov	r1, r4
   24504:	mov	r2, r0
   24508:	ldr	r0, [sp, #20]
   2450c:	bl	24004 <__assert_fail@plt+0xf9ac>
   24510:	mov	r7, r0
   24514:	b	242a4 <__assert_fail@plt+0xfc4c>
   24518:	movw	r1, #25440	; 0x6360
   2451c:	mov	r2, #5
   24520:	movt	r1, #4
   24524:	bl	13cc8 <dcgettext@plt>
   24528:	mov	r4, r0
   2452c:	b	244e4 <__assert_fail@plt+0xfe8c>
   24530:	mov	r0, r9
   24534:	str	ip, [sp, #12]
   24538:	bl	13cf8 <rewind@plt>
   2453c:	ldr	r1, [r7, #92]	; 0x5c
   24540:	mov	r0, r9
   24544:	movw	r2, #25232	; 0x6290
   24548:	movw	r3, #25240	; 0x6298
   2454c:	movt	r2, #4
   24550:	movt	r3, #4
   24554:	str	r1, [sp, #36]	; 0x24
   24558:	str	r2, [sp, #28]
   2455c:	mov	r2, #0
   24560:	str	r3, [sp, #32]
   24564:	str	r2, [sp, #40]	; 0x28
   24568:	bl	14244 <fileno@plt>
   2456c:	mvn	r3, #0
   24570:	add	lr, sp, #24
   24574:	str	r3, [sp]
   24578:	add	r1, sp, #28
   2457c:	str	lr, [sp, #4]
   24580:	mov	r2, r0
   24584:	mov	r0, sl
   24588:	bl	326b4 <__assert_fail@plt+0x1e05c>
   2458c:	ldr	ip, [sp, #12]
   24590:	subs	r2, r0, #0
   24594:	movne	sl, ip
   24598:	beq	2465c <__assert_fail@plt+0x10004>
   2459c:	mov	r0, r9
   245a0:	bl	13cf8 <rewind@plt>
   245a4:	mov	r0, r6
   245a8:	bl	14094 <strlen@plt>
   245ac:	movw	r3, #34079	; 0x851f
   245b0:	movt	r3, #20971	; 0x51eb
   245b4:	mov	r2, #100	; 0x64
   245b8:	add	r0, r0, #99	; 0x63
   245bc:	umull	r1, r3, r3, r0
   245c0:	lsr	r7, r3, #5
   245c4:	mul	r7, r2, r7
   245c8:	cmp	r7, #0
   245cc:	ble	245e4 <__assert_fail@plt+0xff8c>
   245d0:	mov	r0, #255	; 0xff
   245d4:	mov	r1, r9
   245d8:	bl	13e0c <_IO_putc@plt>
   245dc:	subs	r7, r7, #1
   245e0:	bne	245d0 <__assert_fail@plt+0xff78>
   245e4:	mov	r0, r9
   245e8:	bl	13ae8 <fflush@plt>
   245ec:	mov	r0, r9
   245f0:	bl	142c8 <fclose@plt>
   245f4:	cmp	sl, #0
   245f8:	beq	24448 <__assert_fail@plt+0xfdf0>
   245fc:	b	24418 <__assert_fail@plt+0xfdc0>
   24600:	bl	14580 <gpg_err_code_from_syserror@plt>
   24604:	cmp	r0, #0
   24608:	uxthne	r0, r0
   2460c:	orrne	r7, r0, #67108864	; 0x4000000
   24610:	bne	242a4 <__assert_fail@plt+0xfc4c>
   24614:	b	24510 <__assert_fail@plt+0xfeb8>
   24618:	bl	14580 <gpg_err_code_from_syserror@plt>
   2461c:	mov	r2, #5
   24620:	movw	r1, #25156	; 0x6244
   24624:	movt	r1, #4
   24628:	cmp	r0, #0
   2462c:	uxthne	r0, r0
   24630:	orrne	r7, r0, #67108864	; 0x4000000
   24634:	moveq	r7, r0
   24638:	mov	r0, #0
   2463c:	bl	13cc8 <dcgettext@plt>
   24640:	mov	r9, r0
   24644:	mov	r0, r7
   24648:	bl	13a64 <gpg_strerror@plt>
   2464c:	mov	r1, r0
   24650:	mov	r0, r9
   24654:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   24658:	b	24418 <__assert_fail@plt+0xfdc0>
   2465c:	mov	r0, sl
   24660:	ldr	r1, [sp, #24]
   24664:	bl	32784 <__assert_fail@plt+0x1e12c>
   24668:	adds	sl, r0, #0
   2466c:	movne	sl, #1
   24670:	b	2459c <__assert_fail@plt+0xff44>
   24674:	bl	14580 <gpg_err_code_from_syserror@plt>
   24678:	cmp	r0, #0
   2467c:	uxthne	r7, r0
   24680:	orrne	r7, r7, #67108864	; 0x4000000
   24684:	moveq	r7, r8
   24688:	b	242a4 <__assert_fail@plt+0xfc4c>
   2468c:	bl	13cec <__stack_chk_fail@plt>
   24690:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24694:	movw	r9, #47296	; 0xb8c0
   24698:	movt	r9, #5
   2469c:	sub	sp, sp, #36	; 0x24
   246a0:	mov	lr, r2
   246a4:	mov	r4, r0
   246a8:	ldr	ip, [r9]
   246ac:	mov	r2, r1
   246b0:	str	r3, [sp, #12]
   246b4:	add	r0, sp, #20
   246b8:	mov	r3, lr
   246bc:	mov	r1, #0
   246c0:	str	ip, [sp, #28]
   246c4:	bl	13bf0 <gcry_sexp_sscan@plt>
   246c8:	subs	r7, r0, #0
   246cc:	beq	24708 <__assert_fail@plt+0x100b0>
   246d0:	bl	13a64 <gpg_strerror@plt>
   246d4:	mov	fp, #79	; 0x4f
   246d8:	movt	fp, #1024	; 0x400
   246dc:	mov	r1, r0
   246e0:	movw	r0, #25616	; 0x6410
   246e4:	movt	r0, #4
   246e8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   246ec:	ldr	r2, [sp, #28]
   246f0:	mov	r0, fp
   246f4:	ldr	r3, [r9]
   246f8:	cmp	r2, r3
   246fc:	bne	24a1c <__assert_fail@plt+0x103c4>
   24700:	add	sp, sp, #36	; 0x24
   24704:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24708:	mov	r2, #5
   2470c:	movw	r1, #25648	; 0x6430
   24710:	movt	r1, #4
   24714:	bl	13cc8 <dcgettext@plt>
   24718:	mov	r2, #5
   2471c:	movw	r1, #16944	; 0x4230
   24720:	movt	r1, #4
   24724:	mov	r8, r0
   24728:	mov	r0, r7
   2472c:	bl	13cc8 <dcgettext@plt>
   24730:	mov	r1, #140	; 0x8c
   24734:	str	r0, [sp, #8]
   24738:	mov	r0, #2
   2473c:	bl	13a58 <gcry_calloc_secure@plt>
   24740:	mov	r3, #1
   24744:	mov	r1, #100	; 0x64
   24748:	mov	r2, #3
   2474c:	add	r6, r0, #5568	; 0x15c0
   24750:	add	ip, r0, #5632	; 0x1600
   24754:	add	r6, r6, #32
   24758:	mov	r5, r0
   2475c:	str	r3, [r5, #16]
   24760:	mov	r0, r7
   24764:	str	r1, [r5, #32]
   24768:	movw	r3, #16588	; 0x40cc
   2476c:	str	r2, [r5, #8]
   24770:	movt	r3, #2
   24774:	str	r1, [ip]
   24778:	add	r7, r5, #36	; 0x24
   2477c:	str	r2, [r6, #8]
   24780:	str	r3, [r6, #20]
   24784:	str	r7, [r6, #24]
   24788:	mov	r3, r0
   2478c:	str	r5, [sp]
   24790:	mov	r0, r4
   24794:	mov	r1, r8
   24798:	mov	r2, #0
   2479c:	bl	208a0 <__assert_fail@plt+0xc248>
   247a0:	subs	sl, r0, #0
   247a4:	bne	24978 <__assert_fail@plt+0x10320>
   247a8:	mov	r0, r4
   247ac:	mov	r1, r7
   247b0:	mov	r2, sl
   247b4:	bl	24244 <__assert_fail@plt+0xfbec>
   247b8:	subs	fp, r0, #0
   247bc:	strne	sl, [r5, #12]
   247c0:	movne	r0, sl
   247c4:	strne	sl, [r6, #12]
   247c8:	bne	24788 <__assert_fail@plt+0x10130>
   247cc:	ldrb	r3, [r5, #36]	; 0x24
   247d0:	cmp	r3, #0
   247d4:	beq	24828 <__assert_fail@plt+0x101d0>
   247d8:	str	r6, [sp]
   247dc:	mov	r0, r4
   247e0:	ldr	r1, [sp, #8]
   247e4:	mov	r2, fp
   247e8:	mov	r3, fp
   247ec:	bl	208a0 <__assert_fail@plt+0xc248>
   247f0:	cmn	r0, #1
   247f4:	mov	sl, r0
   247f8:	bne	24814 <__assert_fail@plt+0x101bc>
   247fc:	mov	r0, fp
   24800:	movw	r1, #17032	; 0x4288
   24804:	mov	r2, #5
   24808:	movt	r1, #4
   2480c:	bl	13cc8 <dcgettext@plt>
   24810:	b	24788 <__assert_fail@plt+0x10130>
   24814:	cmp	r0, #0
   24818:	bne	24978 <__assert_fail@plt+0x10320>
   2481c:	ldrb	r3, [r5, #36]	; 0x24
   24820:	cmp	r3, #0
   24824:	bne	24834 <__assert_fail@plt+0x101dc>
   24828:	mov	r0, r5
   2482c:	mov	r5, #0
   24830:	bl	13c44 <gcry_free@plt>
   24834:	ldr	r1, [sp, #20]
   24838:	add	r0, sp, #24
   2483c:	bl	1452c <gcry_pk_genkey@plt>
   24840:	mov	r4, r0
   24844:	ldr	r0, [sp, #20]
   24848:	bl	13be4 <gcry_sexp_release@plt>
   2484c:	cmp	r4, #0
   24850:	bne	24950 <__assert_fail@plt+0x102f8>
   24854:	movw	r1, #26452	; 0x6754
   24858:	ldr	r0, [sp, #24]
   2485c:	movt	r1, #4
   24860:	mov	r2, r4
   24864:	bl	13e84 <gcry_sexp_find_token@plt>
   24868:	subs	r7, r0, #0
   2486c:	beq	24998 <__assert_fail@plt+0x10340>
   24870:	movw	r1, #19248	; 0x4b30
   24874:	ldr	r0, [sp, #24]
   24878:	movt	r1, #4
   2487c:	mov	r2, r4
   24880:	bl	13e84 <gcry_sexp_find_token@plt>
   24884:	subs	r8, r0, #0
   24888:	beq	249c0 <__assert_fail@plt+0x10368>
   2488c:	movw	r6, #48116	; 0xbbf4
   24890:	movt	r6, #5
   24894:	ldr	r0, [sp, #24]
   24898:	bl	13be4 <gcry_sexp_release@plt>
   2489c:	ldr	r3, [r6]
   248a0:	str	r4, [sp, #24]
   248a4:	tst	r3, #4
   248a8:	bne	249d8 <__assert_fail@plt+0x10380>
   248ac:	cmp	r5, #0
   248b0:	mov	r2, #0
   248b4:	addne	r1, r5, #36	; 0x24
   248b8:	mov	r0, r7
   248bc:	moveq	r1, r5
   248c0:	bl	240e8 <__assert_fail@plt+0xfa90>
   248c4:	mov	r4, r0
   248c8:	mov	r0, r5
   248cc:	bl	13c44 <gcry_free@plt>
   248d0:	mov	r0, r7
   248d4:	bl	13be4 <gcry_sexp_release@plt>
   248d8:	cmp	r4, #0
   248dc:	bne	249e8 <__assert_fail@plt+0x10390>
   248e0:	ldr	r3, [r6]
   248e4:	tst	r3, #4
   248e8:	bne	24988 <__assert_fail@plt+0x10330>
   248ec:	mov	r2, #0
   248f0:	mov	r0, r8
   248f4:	mov	r3, r2
   248f8:	mov	r1, #1
   248fc:	bl	14298 <gcry_sexp_sprint@plt>
   24900:	subs	r5, r0, #0
   24904:	beq	24a20 <__assert_fail@plt+0x103c8>
   24908:	bl	139c8 <gcry_malloc@plt>
   2490c:	subs	r4, r0, #0
   24910:	beq	249f8 <__assert_fail@plt+0x103a0>
   24914:	mov	r2, r4
   24918:	mov	r3, r5
   2491c:	mov	r0, r8
   24920:	mov	r1, #1
   24924:	bl	14298 <gcry_sexp_sprint@plt>
   24928:	subs	r2, r0, #0
   2492c:	beq	24a3c <__assert_fail@plt+0x103e4>
   24930:	ldr	r0, [sp, #12]
   24934:	mov	r1, r4
   24938:	bl	2edf0 <__assert_fail@plt+0x1a798>
   2493c:	mov	r0, r8
   24940:	bl	13be4 <gcry_sexp_release@plt>
   24944:	mov	r0, r4
   24948:	bl	13c44 <gcry_free@plt>
   2494c:	b	246ec <__assert_fail@plt+0x10094>
   24950:	mov	r0, r4
   24954:	mov	fp, r4
   24958:	bl	13a64 <gpg_strerror@plt>
   2495c:	mov	r1, r0
   24960:	movw	r0, #25704	; 0x6468
   24964:	movt	r0, #4
   24968:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2496c:	mov	r0, r5
   24970:	bl	13c44 <gcry_free@plt>
   24974:	b	246ec <__assert_fail@plt+0x10094>
   24978:	mov	r0, r5
   2497c:	mov	fp, sl
   24980:	bl	13c44 <gcry_free@plt>
   24984:	b	246ec <__assert_fail@plt+0x10094>
   24988:	movw	r0, #25804	; 0x64cc
   2498c:	movt	r0, #4
   24990:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   24994:	b	248ec <__assert_fail@plt+0x10294>
   24998:	movw	r0, #25732	; 0x6484
   2499c:	movt	r0, #4
   249a0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   249a4:	ldr	r0, [sp, #24]
   249a8:	mov	fp, #79	; 0x4f
   249ac:	bl	13be4 <gcry_sexp_release@plt>
   249b0:	mov	r0, r5
   249b4:	bl	13c44 <gcry_free@plt>
   249b8:	movt	fp, #1024	; 0x400
   249bc:	b	246ec <__assert_fail@plt+0x10094>
   249c0:	movw	r0, #25732	; 0x6484
   249c4:	movt	r0, #4
   249c8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   249cc:	mov	r0, r7
   249d0:	bl	13be4 <gcry_sexp_release@plt>
   249d4:	b	249a4 <__assert_fail@plt+0x1034c>
   249d8:	movw	r0, #25780	; 0x64b4
   249dc:	movt	r0, #4
   249e0:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   249e4:	b	248ac <__assert_fail@plt+0x10254>
   249e8:	mov	r0, r8
   249ec:	mov	fp, r4
   249f0:	bl	13be4 <gcry_sexp_release@plt>
   249f4:	b	246ec <__assert_fail@plt+0x10094>
   249f8:	bl	14580 <gpg_err_code_from_syserror@plt>
   249fc:	cmp	r0, #0
   24a00:	uxthne	ip, r0
   24a04:	mov	r0, r7
   24a08:	orrne	fp, ip, #67108864	; 0x4000000
   24a0c:	bl	13be4 <gcry_sexp_release@plt>
   24a10:	mov	r0, r8
   24a14:	bl	13be4 <gcry_sexp_release@plt>
   24a18:	b	246ec <__assert_fail@plt+0x10094>
   24a1c:	bl	13cec <__stack_chk_fail@plt>
   24a20:	movw	r0, #16900	; 0x4204
   24a24:	movw	r1, #24680	; 0x6068
   24a28:	movt	r0, #4
   24a2c:	movt	r1, #4
   24a30:	movw	r2, #403	; 0x193
   24a34:	ldr	r3, [pc, #28]	; 24a58 <__assert_fail@plt+0x10400>
   24a38:	bl	14658 <__assert_fail@plt>
   24a3c:	movw	r0, #16900	; 0x4204
   24a40:	movw	r1, #24680	; 0x6068
   24a44:	movt	r0, #4
   24a48:	movt	r1, #4
   24a4c:	movw	r2, #413	; 0x19d
   24a50:	ldr	r3, [pc]	; 24a58 <__assert_fail@plt+0x10400>
   24a54:	bl	14658 <__assert_fail@plt>
   24a58:	andeq	r6, r4, ip
   24a5c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24a60:	sub	sp, sp, #20
   24a64:	mov	r2, #5
   24a68:	mov	r5, r0
   24a6c:	str	r1, [sp, #12]
   24a70:	mov	r0, #0
   24a74:	movw	r1, #25828	; 0x64e4
   24a78:	movt	r1, #4
   24a7c:	bl	13cc8 <dcgettext@plt>
   24a80:	mov	r2, #5
   24a84:	movw	r1, #16944	; 0x4230
   24a88:	movt	r1, #4
   24a8c:	mov	r9, r0
   24a90:	mov	r0, #0
   24a94:	bl	13cc8 <dcgettext@plt>
   24a98:	mov	r1, #140	; 0x8c
   24a9c:	mov	sl, r0
   24aa0:	mov	r0, #2
   24aa4:	bl	13a58 <gcry_calloc_secure@plt>
   24aa8:	mov	lr, #0
   24aac:	mov	r3, #1
   24ab0:	mov	r1, #100	; 0x64
   24ab4:	mov	r2, #3
   24ab8:	add	r7, r0, #5568	; 0x15c0
   24abc:	mov	r6, r0
   24ac0:	add	r7, r7, #32
   24ac4:	add	r0, r0, #5632	; 0x1600
   24ac8:	str	r3, [r6, #16]
   24acc:	add	r8, r6, #36	; 0x24
   24ad0:	str	r1, [r6, #32]
   24ad4:	movw	r3, #16588	; 0x40cc
   24ad8:	str	r2, [r6, #8]
   24adc:	movt	r3, #2
   24ae0:	str	r1, [r0]
   24ae4:	str	r2, [r7, #8]
   24ae8:	str	r3, [r7, #20]
   24aec:	str	r8, [r7, #24]
   24af0:	mov	r1, r9
   24af4:	mov	r2, #0
   24af8:	str	r6, [sp]
   24afc:	mov	r3, lr
   24b00:	mov	r0, r5
   24b04:	bl	208a0 <__assert_fail@plt+0xc248>
   24b08:	mov	r1, r8
   24b0c:	subs	r4, r0, #0
   24b10:	mov	r0, r5
   24b14:	mov	r2, r4
   24b18:	bne	24ba0 <__assert_fail@plt+0x10548>
   24b1c:	bl	24244 <__assert_fail@plt+0xfbec>
   24b20:	mov	r1, sl
   24b24:	mov	lr, r4
   24b28:	subs	fp, r0, #0
   24b2c:	mov	r0, r5
   24b30:	strne	r4, [r6, #12]
   24b34:	mov	r2, fp
   24b38:	mov	r3, fp
   24b3c:	strne	r4, [r7, #12]
   24b40:	bne	24af0 <__assert_fail@plt+0x10498>
   24b44:	ldrb	lr, [r6, #36]	; 0x24
   24b48:	cmp	lr, #0
   24b4c:	beq	24b80 <__assert_fail@plt+0x10528>
   24b50:	str	r7, [sp]
   24b54:	bl	208a0 <__assert_fail@plt+0xc248>
   24b58:	movw	r1, #17032	; 0x4288
   24b5c:	mov	r2, #5
   24b60:	movt	r1, #4
   24b64:	mov	r4, r0
   24b68:	cmn	r4, #1
   24b6c:	mov	r0, fp
   24b70:	bne	24bb4 <__assert_fail@plt+0x1055c>
   24b74:	bl	13cc8 <dcgettext@plt>
   24b78:	mov	lr, r0
   24b7c:	b	24af0 <__assert_fail@plt+0x10498>
   24b80:	mov	r0, r6
   24b84:	mov	r6, #0
   24b88:	bl	13c44 <gcry_free@plt>
   24b8c:	mov	r1, r6
   24b90:	ldr	r0, [sp, #12]
   24b94:	mov	r2, #1
   24b98:	bl	240e8 <__assert_fail@plt+0xfa90>
   24b9c:	mov	r4, r0
   24ba0:	mov	r0, r6
   24ba4:	bl	13c44 <gcry_free@plt>
   24ba8:	mov	r0, r4
   24bac:	add	sp, sp, #20
   24bb0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24bb4:	cmp	r4, #0
   24bb8:	bne	24ba0 <__assert_fail@plt+0x10548>
   24bbc:	ldrb	r3, [r6, #36]	; 0x24
   24bc0:	cmp	r3, #0
   24bc4:	beq	24b80 <__assert_fail@plt+0x10528>
   24bc8:	mov	r1, r8
   24bcc:	b	24b90 <__assert_fail@plt+0x10538>
   24bd0:	ldr	r1, [r0]
   24bd4:	push	{r4, r5}
   24bd8:	ldrb	ip, [r1]
   24bdc:	sub	r2, ip, #48	; 0x30
   24be0:	uxtb	r3, r2
   24be4:	cmp	r3, #9
   24be8:	bhi	24c28 <__assert_fail@plt+0x105d0>
   24bec:	add	r1, r1, #1
   24bf0:	mov	r3, #0
   24bf4:	add	r3, r3, r3, lsl #2
   24bf8:	ldrb	ip, [r1], #1
   24bfc:	add	r3, r2, r3, lsl #1
   24c00:	sub	r2, ip, #48	; 0x30
   24c04:	uxtb	r4, r2
   24c08:	cmp	r4, #9
   24c0c:	bls	24bf4 <__assert_fail@plt+0x1059c>
   24c10:	cmp	r3, #0
   24c14:	beq	24c2c <__assert_fail@plt+0x105d4>
   24c18:	cmp	ip, #58	; 0x3a
   24c1c:	moveq	r5, r1
   24c20:	streq	r5, [r0]
   24c24:	beq	24c2c <__assert_fail@plt+0x105d4>
   24c28:	mov	r3, #0
   24c2c:	mov	r0, r3
   24c30:	pop	{r4, r5}
   24c34:	bx	lr
   24c38:	push	{r3, r4, r5, r6, r7, lr}
   24c3c:	mov	r6, r0
   24c40:	mov	r0, r2
   24c44:	mov	r4, r1
   24c48:	mov	r5, r2
   24c4c:	bl	14094 <strlen@plt>
   24c50:	cmp	r4, r0
   24c54:	beq	24c60 <__assert_fail@plt+0x10608>
   24c58:	mov	r0, #0
   24c5c:	pop	{r3, r4, r5, r6, r7, pc}
   24c60:	ldr	r7, [r6]
   24c64:	mov	r1, r5
   24c68:	mov	r2, r4
   24c6c:	mov	r0, r7
   24c70:	bl	13c80 <memcmp@plt>
   24c74:	cmp	r0, #0
   24c78:	bne	24c58 <__assert_fail@plt+0x10600>
   24c7c:	add	r4, r7, r4
   24c80:	mov	r0, #1
   24c84:	str	r4, [r6]
   24c88:	pop	{r3, r4, r5, r6, r7, pc}
   24c8c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c90:	movw	r4, #47296	; 0xb8c0
   24c94:	movt	r4, #5
   24c98:	mov	sl, r2
   24c9c:	sub	sp, sp, #36	; 0x24
   24ca0:	mov	r9, r3
   24ca4:	ldr	r2, [r4]
   24ca8:	mov	r5, r0
   24cac:	mov	r7, r1
   24cb0:	str	r2, [sp, #28]
   24cb4:	bl	14094 <strlen@plt>
   24cb8:	cmp	r5, #0
   24cbc:	cmpne	r9, #0
   24cc0:	mov	r8, r0
   24cc4:	bne	24ce8 <__assert_fail@plt+0x10690>
   24cc8:	mov	r0, #55	; 0x37
   24ccc:	movt	r0, #1024	; 0x400
   24cd0:	ldr	r2, [sp, #28]
   24cd4:	ldr	r3, [r4]
   24cd8:	cmp	r2, r3
   24cdc:	bne	24ec8 <__assert_fail@plt+0x10870>
   24ce0:	add	sp, sp, #36	; 0x24
   24ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   24ce8:	cmp	r7, #0
   24cec:	beq	24cc8 <__assert_fail@plt+0x10670>
   24cf0:	add	r0, sp, #24
   24cf4:	mov	r1, #2
   24cf8:	mov	r2, #1
   24cfc:	bl	13b48 <gcry_md_open@plt>
   24d00:	cmp	r0, #0
   24d04:	bne	24cd0 <__assert_fail@plt+0x10678>
   24d08:	movw	r3, #65528	; 0xfff8
   24d0c:	add	r6, r8, #8
   24d10:	movt	r3, #65535	; 0xffff
   24d14:	cmp	r6, sl
   24d18:	movcs	sl, r6
   24d1c:	rsb	r3, r8, r3
   24d20:	mov	ip, r0
   24d24:	add	r3, r3, sl
   24d28:	str	sl, [sp, #8]
   24d2c:	mov	sl, r0
   24d30:	ldr	r0, [sp, #24]
   24d34:	str	r4, [sp, #20]
   24d38:	mov	fp, ip
   24d3c:	mov	r4, ip
   24d40:	str	r3, [sp, #12]
   24d44:	str	r9, [sp, #4]
   24d48:	ldr	r2, [sp, #8]
   24d4c:	cmp	r2, r6
   24d50:	bls	24ec0 <__assert_fail@plt+0x10868>
   24d54:	ldr	r9, [sp, #12]
   24d58:	b	24d64 <__assert_fail@plt+0x1070c>
   24d5c:	ldr	r0, [sp, #24]
   24d60:	rsb	r9, r6, r9
   24d64:	mov	r1, r7
   24d68:	mov	r2, #8
   24d6c:	bl	13c8c <gcry_md_write@plt>
   24d70:	ldr	r0, [sp, #24]
   24d74:	mov	r1, r5
   24d78:	mov	r2, r8
   24d7c:	bl	13c8c <gcry_md_write@plt>
   24d80:	cmp	r9, r6
   24d84:	bhi	24d5c <__assert_fail@plt+0x10704>
   24d88:	ldr	r0, [sp, #24]
   24d8c:	cmp	r9, #7
   24d90:	bhi	24e80 <__assert_fail@plt+0x10828>
   24d94:	mov	r2, r9
   24d98:	mov	r1, r7
   24d9c:	bl	13c8c <gcry_md_write@plt>
   24da0:	mov	r2, #0
   24da4:	mov	r1, #5
   24da8:	mov	r3, r2
   24dac:	ldr	r0, [sp, #24]
   24db0:	bl	143a0 <gcry_md_ctl@plt>
   24db4:	mov	r0, #2
   24db8:	bl	13a40 <gcry_md_get_algo_dlen@plt>
   24dbc:	ldr	r3, [sp, #4]
   24dc0:	rsb	r2, fp, #16
   24dc4:	mov	r1, #2
   24dc8:	add	r9, r3, fp
   24dcc:	add	sl, sl, #1
   24dd0:	cmp	r0, r2
   24dd4:	movcc	fp, r0
   24dd8:	movcs	fp, r2
   24ddc:	ldr	r0, [sp, #24]
   24de0:	bl	13b3c <gcry_md_read@plt>
   24de4:	add	r4, r4, fp
   24de8:	mov	r2, fp
   24dec:	mov	fp, r4
   24df0:	mov	r1, r0
   24df4:	mov	r0, r9
   24df8:	bl	13ba8 <memcpy@plt>
   24dfc:	cmp	r4, #15
   24e00:	bhi	24eac <__assert_fail@plt+0x10854>
   24e04:	ldr	r0, [sp, #24]
   24e08:	mov	ip, #0
   24e0c:	str	ip, [sp]
   24e10:	bl	13db8 <gcry_md_reset@plt>
   24e14:	ldr	ip, [sp]
   24e18:	str	r4, [sp, #16]
   24e1c:	mov	r4, sl
   24e20:	ldr	r9, [sp, #24]
   24e24:	mov	sl, ip
   24e28:	b	24e50 <__assert_fail@plt+0x107f8>
   24e2c:	add	sl, sl, #1
   24e30:	add	r2, r9, r3
   24e34:	cmp	sl, r4
   24e38:	add	r3, r3, #1
   24e3c:	str	r3, [r9, #4]
   24e40:	mov	r3, #0
   24e44:	strb	r3, [r2, #12]
   24e48:	bge	24ea0 <__assert_fail@plt+0x10848>
   24e4c:	mov	r9, r0
   24e50:	ldr	r3, [r9, #4]
   24e54:	ldr	r2, [r9, #8]
   24e58:	cmp	r3, r2
   24e5c:	movne	r0, r9
   24e60:	bne	24e2c <__assert_fail@plt+0x107d4>
   24e64:	mov	r1, #0
   24e68:	mov	r0, r9
   24e6c:	mov	r2, r1
   24e70:	bl	13c8c <gcry_md_write@plt>
   24e74:	ldr	r3, [r9, #4]
   24e78:	ldr	r0, [sp, #24]
   24e7c:	b	24e2c <__assert_fail@plt+0x107d4>
   24e80:	mov	r1, r7
   24e84:	mov	r2, #8
   24e88:	bl	13c8c <gcry_md_write@plt>
   24e8c:	sub	r2, r9, #8
   24e90:	ldr	r0, [sp, #24]
   24e94:	mov	r1, r5
   24e98:	bl	13c8c <gcry_md_write@plt>
   24e9c:	b	24da0 <__assert_fail@plt+0x10748>
   24ea0:	mov	sl, r4
   24ea4:	ldr	r4, [sp, #16]
   24ea8:	b	24d48 <__assert_fail@plt+0x106f0>
   24eac:	ldr	r0, [sp, #24]
   24eb0:	ldr	r4, [sp, #20]
   24eb4:	bl	13b00 <gcry_md_close@plt>
   24eb8:	mov	r0, #0
   24ebc:	b	24cd0 <__assert_fail@plt+0x10678>
   24ec0:	ldr	r9, [sp, #8]
   24ec4:	b	24d8c <__assert_fail@plt+0x10734>
   24ec8:	bl	13cec <__stack_chk_fail@plt>
   24ecc:	push	{r4, r5, lr}
   24ed0:	movw	r4, #47296	; 0xb8c0
   24ed4:	movt	r4, #5
   24ed8:	sub	sp, sp, #44	; 0x2c
   24edc:	mov	r5, r0
   24ee0:	add	r0, sp, #4
   24ee4:	ldr	r3, [r4]
   24ee8:	str	r3, [sp, #36]	; 0x24
   24eec:	bl	13a88 <times@plt>
   24ef0:	mov	r2, r5
   24ef4:	movw	r0, #26068	; 0x65d4
   24ef8:	movw	r1, #26088	; 0x65e8
   24efc:	movt	r0, #4
   24f00:	movt	r1, #4
   24f04:	add	r3, sp, #20
   24f08:	ldr	r5, [sp, #4]
   24f0c:	bl	24c8c <__assert_fail@plt+0x10634>
   24f10:	cmp	r0, #0
   24f14:	bne	24f64 <__assert_fail@plt+0x1090c>
   24f18:	add	r0, sp, #4
   24f1c:	bl	13a88 <times@plt>
   24f20:	ldr	r3, [sp, #4]
   24f24:	vldr	d5, [pc, #84]	; 24f80 <__assert_fail@plt+0x10928>
   24f28:	vldr	d6, [pc, #88]	; 24f88 <__assert_fail@plt+0x10930>
   24f2c:	rsb	r3, r5, r3
   24f30:	ldr	r2, [sp, #36]	; 0x24
   24f34:	vmov	s14, r3
   24f38:	ldr	r3, [r4]
   24f3c:	vcvt.f64.s32	d7, s14
   24f40:	cmp	r2, r3
   24f44:	vdiv.f64	d7, d7, d5
   24f48:	vmul.f64	d7, d7, d6
   24f4c:	vcvt.u32.f64	s13, d7
   24f50:	vmov	r0, s13
   24f54:	bne	24f60 <__assert_fail@plt+0x10908>
   24f58:	add	sp, sp, #44	; 0x2c
   24f5c:	pop	{r4, r5, pc}
   24f60:	bl	13cec <__stack_chk_fail@plt>
   24f64:	movw	r0, #26100	; 0x65f4
   24f68:	movw	r2, #25860	; 0x6504
   24f6c:	movt	r0, #4
   24f70:	movt	r2, #4
   24f74:	mov	r1, #140	; 0x8c
   24f78:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   24f7c:	nop	{0}
   24f80:	andeq	r0, r0, r0
   24f84:	smlawbmi	lr, r0, r4, r8
   24f88:	andeq	r0, r0, r0
   24f8c:	ldrdmi	r1, [r3, #-32]!	; 0xffffffe0
   24f90:	push	{r4, r5, r6, r7, r8, lr}
   24f94:	movw	r8, #47576	; 0xb9d8
   24f98:	movt	r8, #5
   24f9c:	ldr	r0, [r8]
   24fa0:	cmp	r0, #65536	; 0x10000
   24fa4:	movcs	r4, r0
   24fa8:	movcc	r4, #65536	; 0x10000
   24fac:	cmp	r0, #0
   24fb0:	beq	24fbc <__assert_fail@plt+0x10964>
   24fb4:	mov	r0, r4
   24fb8:	pop	{r4, r5, r6, r7, r8, pc}
   24fbc:	movw	r7, #48116	; 0xbbf4
   24fc0:	movt	r7, #5
   24fc4:	mov	r6, #16
   24fc8:	mov	r4, #65536	; 0x10000
   24fcc:	mov	r0, r4
   24fd0:	bl	24ecc <__assert_fail@plt+0x10874>
   24fd4:	ldr	r3, [r7, #4]
   24fd8:	mov	r1, r4
   24fdc:	cmp	r3, #1
   24fe0:	mov	r5, r0
   24fe4:	movw	r0, #26112	; 0x6600
   24fe8:	mov	r2, r5
   24fec:	movt	r0, #4
   24ff0:	ble	24ff8 <__assert_fail@plt+0x109a0>
   24ff4:	bl	3f478 <__assert_fail@plt+0x2ae20>
   24ff8:	cmp	r5, #100	; 0x64
   24ffc:	bhi	25080 <__assert_fail@plt+0x10a28>
   25000:	subs	r6, r6, #1
   25004:	lsl	r4, r4, #1
   25008:	bne	24fcc <__assert_fail@plt+0x10974>
   2500c:	vldr	d5, [pc, #124]	; 25090 <__assert_fail@plt+0x10a38>
   25010:	vmov	s13, r5
   25014:	ldr	r3, [r7, #4]
   25018:	vcvt.f64.u32	d7, s13
   2501c:	vldr	d6, [pc, #116]	; 25098 <__assert_fail@plt+0x10a40>
   25020:	vdiv.f64	d7, d5, d7
   25024:	vmul.f64	d7, d7, d6
   25028:	vcvt.u32.f64	s13, d7
   2502c:	vmov	r5, s13
   25030:	lsr	r5, r5, #10
   25034:	lsl	r5, r5, #10
   25038:	cmp	r5, #65536	; 0x10000
   2503c:	movcs	r4, r5
   25040:	movcc	r4, #65536	; 0x10000
   25044:	cmp	r5, #65536	; 0x10000
   25048:	movcc	r4, #65536	; 0x10000
   2504c:	movcc	r5, r4
   25050:	cmp	r3, #0
   25054:	beq	25074 <__assert_fail@plt+0x10a1c>
   25058:	mov	r0, r5
   2505c:	bl	24ecc <__assert_fail@plt+0x10874>
   25060:	mov	r1, r5
   25064:	mov	r2, r0
   25068:	movw	r0, #26144	; 0x6620
   2506c:	movt	r0, #4
   25070:	bl	3f478 <__assert_fail@plt+0x2ae20>
   25074:	str	r5, [r8]
   25078:	mov	r0, r4
   2507c:	pop	{r4, r5, r6, r7, r8, pc}
   25080:	vmov	s13, r4
   25084:	vcvt.f64.u32	d5, s13
   25088:	b	25010 <__assert_fail@plt+0x109b8>
   2508c:	nop	{0}
	...
   2509c:	subsmi	r0, r9, r0
   250a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   250a4:	movw	lr, #26192	; 0x6650
   250a8:	movt	lr, #4
   250ac:	mov	r5, r0
   250b0:	mov	sl, r1
   250b4:	mov	r7, r2
   250b8:	mov	r8, r3
   250bc:	movw	r4, #47296	; 0xb8c0
   250c0:	ldm	lr!, {r0, r1, r2, r3}
   250c4:	movt	r4, #5
   250c8:	sub	sp, sp, #236	; 0xec
   250cc:	mov	r6, #0
   250d0:	ldr	r9, [r4]
   250d4:	add	ip, sp, #156	; 0x9c
   250d8:	str	r6, [sp, #112]	; 0x70
   250dc:	ldr	lr, [lr]
   250e0:	stmia	ip!, {r0, r1, r2, r3}
   250e4:	add	r0, sp, #175	; 0xaf
   250e8:	strh	lr, [ip], #2
   250ec:	lsr	lr, lr, #16
   250f0:	strb	lr, [ip]
   250f4:	str	r9, [sp, #228]	; 0xe4
   250f8:	bl	2d1c4 <__assert_fail@plt+0x18b6c>
   250fc:	ldrb	r2, [r5]
   25100:	mov	r3, #41	; 0x29
   25104:	str	r5, [sp, #108]	; 0x6c
   25108:	cmp	r2, #40	; 0x28
   2510c:	strb	r3, [sp, #190]	; 0xbe
   25110:	beq	25138 <__assert_fail@plt+0x10ae0>
   25114:	mov	r6, #83	; 0x53
   25118:	movt	r6, #1024	; 0x400
   2511c:	ldr	r2, [sp, #228]	; 0xe4
   25120:	mov	r0, r6
   25124:	ldr	r3, [r4]
   25128:	cmp	r2, r3
   2512c:	bne	253cc <__assert_fail@plt+0x10d74>
   25130:	add	sp, sp, #236	; 0xec
   25134:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25138:	ldrb	r0, [r5, #1]
   2513c:	add	r3, r5, #1
   25140:	ldr	fp, [sp, #112]	; 0x70
   25144:	sub	r2, r0, #48	; 0x30
   25148:	str	r3, [sp, #108]	; 0x6c
   2514c:	add	r3, fp, #1
   25150:	str	r3, [sp, #112]	; 0x70
   25154:	uxtb	r3, r2
   25158:	cmp	r3, #9
   2515c:	bhi	25114 <__assert_fail@plt+0x10abc>
   25160:	add	r1, r5, #2
   25164:	add	r6, r6, r6, lsl #2
   25168:	mov	r3, r1
   2516c:	ldrb	r0, [r1], #1
   25170:	add	r6, r2, r6, lsl #1
   25174:	sub	r2, r0, #48	; 0x30
   25178:	uxtb	ip, r2
   2517c:	cmp	ip, #9
   25180:	bls	25164 <__assert_fail@plt+0x10b0c>
   25184:	cmp	r6, #0
   25188:	beq	25114 <__assert_fail@plt+0x10abc>
   2518c:	cmp	r0, #58	; 0x3a
   25190:	bne	25114 <__assert_fail@plt+0x10abc>
   25194:	cmp	r6, #11
   25198:	mov	r0, r1
   2519c:	str	r1, [sp, #108]	; 0x6c
   251a0:	beq	251b0 <__assert_fail@plt+0x10b58>
   251a4:	mov	r6, #104	; 0x68
   251a8:	movt	r6, #1024	; 0x400
   251ac:	b	2511c <__assert_fail@plt+0x10ac4>
   251b0:	mov	r2, r6
   251b4:	movw	r1, #26452	; 0x6754
   251b8:	movt	r1, #4
   251bc:	str	r3, [sp, #52]	; 0x34
   251c0:	bl	13c80 <memcmp@plt>
   251c4:	ldr	r3, [sp, #52]	; 0x34
   251c8:	subs	r6, r0, #0
   251cc:	bne	251a4 <__assert_fail@plt+0x10b4c>
   251d0:	ldrb	r2, [r3, #12]
   251d4:	add	r9, r3, #12
   251d8:	str	r9, [sp, #60]	; 0x3c
   251dc:	cmp	r2, #40	; 0x28
   251e0:	str	r9, [sp, #108]	; 0x6c
   251e4:	bne	251a4 <__assert_fail@plt+0x10b4c>
   251e8:	add	r9, sp, #232	; 0xe8
   251ec:	add	r3, r3, #13
   251f0:	add	fp, fp, #2
   251f4:	str	fp, [sp, #112]	; 0x70
   251f8:	str	r3, [r9, #-124]!	; 0xffffff84
   251fc:	mov	r0, r9
   25200:	bl	24bd0 <__assert_fail@plt+0x10578>
   25204:	subs	ip, r0, #0
   25208:	beq	25114 <__assert_fail@plt+0x10abc>
   2520c:	movw	r2, #20684	; 0x50cc
   25210:	str	r8, [sp, #56]	; 0x38
   25214:	ldr	fp, [pc, #2144]	; 25a7c <__assert_fail@plt+0x11424>
   25218:	mov	r8, r7
   2521c:	movt	r2, #4
   25220:	mov	r7, r5
   25224:	mov	r5, ip
   25228:	mov	ip, r4
   2522c:	mov	r4, r6
   25230:	b	25244 <__assert_fail@plt+0x10bec>
   25234:	ldr	r2, [fp, #20]!
   25238:	add	r4, r4, #1
   2523c:	cmp	r2, #0
   25240:	beq	253d0 <__assert_fail@plt+0x10d78>
   25244:	mov	r0, r9
   25248:	mov	r1, r5
   2524c:	str	ip, [sp, #52]	; 0x34
   25250:	bl	24c38 <__assert_fail@plt+0x105e0>
   25254:	ldr	ip, [sp, #52]	; 0x34
   25258:	cmp	r0, #0
   2525c:	beq	25234 <__assert_fail@plt+0x10bdc>
   25260:	movw	r2, #25860	; 0x6504
   25264:	movt	r2, #4
   25268:	mov	r3, r4
   2526c:	mov	r1, #20
   25270:	mla	r3, r1, r3, r2
   25274:	mov	r4, ip
   25278:	mov	r5, r7
   2527c:	mov	r7, r8
   25280:	ldr	r8, [sp, #56]	; 0x38
   25284:	mov	fp, #0
   25288:	str	r4, [sp, #56]	; 0x38
   2528c:	str	fp, [sp, #76]	; 0x4c
   25290:	ldr	ip, [r3, #28]
   25294:	ldr	r1, [r3, #32]
   25298:	ldr	r2, [r3, #36]	; 0x24
   2529c:	mov	r4, ip
   252a0:	str	fp, [sp, #72]	; 0x48
   252a4:	str	r3, [sp, #80]	; 0x50
   252a8:	str	r1, [sp, #64]	; 0x40
   252ac:	ldrb	r1, [r4, fp]
   252b0:	cmp	r1, #0
   252b4:	beq	253f8 <__assert_fail@plt+0x10da0>
   252b8:	ldr	ip, [sp, #64]	; 0x40
   252bc:	cmp	fp, ip
   252c0:	ldreq	ip, [sp, #108]	; 0x6c
   252c4:	ldrne	r3, [sp, #108]	; 0x6c
   252c8:	moveq	r3, ip
   252cc:	streq	ip, [sp, #72]	; 0x48
   252d0:	ldrb	r0, [r3]
   252d4:	cmp	r0, #40	; 0x28
   252d8:	bne	253f0 <__assert_fail@plt+0x10d98>
   252dc:	ldr	ip, [sp, #112]	; 0x70
   252e0:	mov	r0, r9
   252e4:	add	r3, r3, #1
   252e8:	str	r1, [sp, #52]	; 0x34
   252ec:	str	r3, [sp, #108]	; 0x6c
   252f0:	add	r3, ip, #1
   252f4:	str	r2, [sp, #48]	; 0x30
   252f8:	str	r3, [sp, #112]	; 0x70
   252fc:	bl	24bd0 <__assert_fail@plt+0x10578>
   25300:	ldr	r1, [sp, #52]	; 0x34
   25304:	ldr	r2, [sp, #48]	; 0x30
   25308:	subs	ip, r0, #0
   2530c:	beq	253f0 <__assert_fail@plt+0x10d98>
   25310:	cmp	ip, #1
   25314:	beq	253e0 <__assert_fail@plt+0x10d88>
   25318:	cmp	ip, #5
   2531c:	bne	253f0 <__assert_fail@plt+0x10d98>
   25320:	mov	r2, ip
   25324:	movw	r1, #19284	; 0x4b54
   25328:	ldr	r0, [sp, #108]	; 0x6c
   2532c:	movt	r1, #4
   25330:	str	ip, [sp, #52]	; 0x34
   25334:	bl	13c80 <memcmp@plt>
   25338:	ldr	ip, [sp, #52]	; 0x34
   2533c:	orrs	r0, r0, fp
   25340:	bne	253f0 <__assert_fail@plt+0x10d98>
   25344:	ldr	r4, [sp, #80]	; 0x50
   25348:	ldr	r3, [r4, #40]	; 0x28
   2534c:	cmp	r3, #0
   25350:	beq	253f0 <__assert_fail@plt+0x10d98>
   25354:	ldr	r3, [sp, #108]	; 0x6c
   25358:	movw	r4, #26188	; 0x664c
   2535c:	movt	r4, #4
   25360:	mov	r2, #2
   25364:	str	r2, [sp, #64]	; 0x40
   25368:	mov	r0, r9
   2536c:	add	r3, r3, ip
   25370:	str	r2, [sp, #48]	; 0x30
   25374:	str	r3, [sp, #108]	; 0x6c
   25378:	bl	24bd0 <__assert_fail@plt+0x10578>
   2537c:	ldr	r2, [sp, #48]	; 0x30
   25380:	cmp	r0, #0
   25384:	beq	253f0 <__assert_fail@plt+0x10d98>
   25388:	ldr	r1, [sp, #108]	; 0x6c
   2538c:	add	r3, r1, r0
   25390:	str	r3, [sp, #108]	; 0x6c
   25394:	ldrb	r1, [r1, r0]
   25398:	cmp	r1, #41	; 0x29
   2539c:	bne	253f0 <__assert_fail@plt+0x10d98>
   253a0:	ldr	ip, [sp, #76]	; 0x4c
   253a4:	cmp	fp, r2
   253a8:	ldr	r1, [sp, #112]	; 0x70
   253ac:	add	fp, fp, #1
   253b0:	moveq	ip, r3
   253b4:	add	r3, r3, #1
   253b8:	str	ip, [sp, #76]	; 0x4c
   253bc:	str	r3, [sp, #108]	; 0x6c
   253c0:	sub	r3, r1, #1
   253c4:	str	r3, [sp, #112]	; 0x70
   253c8:	b	252ac <__assert_fail@plt+0x10c54>
   253cc:	bl	13cec <__stack_chk_fail@plt>
   253d0:	mov	r6, #84	; 0x54
   253d4:	mov	r4, ip
   253d8:	movt	r6, #1024	; 0x400
   253dc:	b	2511c <__assert_fail@plt+0x10ac4>
   253e0:	ldr	r3, [sp, #108]	; 0x6c
   253e4:	ldrb	r0, [r3]
   253e8:	cmp	r0, r1
   253ec:	beq	25368 <__assert_fail@plt+0x10d10>
   253f0:	ldr	r4, [sp, #56]	; 0x38
   253f4:	b	25114 <__assert_fail@plt+0x10abc>
   253f8:	ldr	r3, [sp, #108]	; 0x6c
   253fc:	ldr	r4, [sp, #56]	; 0x38
   25400:	ldrb	r2, [r3]
   25404:	cmp	r2, #41	; 0x29
   25408:	bne	25114 <__assert_fail@plt+0x10abc>
   2540c:	ldr	fp, [sp, #72]	; 0x48
   25410:	ldr	ip, [sp, #76]	; 0x4c
   25414:	cmp	ip, #0
   25418:	cmpne	fp, #0
   2541c:	beq	25114 <__assert_fail@plt+0x10abc>
   25420:	ldr	fp, [sp, #112]	; 0x70
   25424:	add	r2, r3, #1
   25428:	str	r2, [sp, #108]	; 0x6c
   2542c:	sub	fp, fp, #1
   25430:	str	fp, [sp, #112]	; 0x70
   25434:	cmp	fp, #1
   25438:	bne	25494 <__assert_fail@plt+0x10e3c>
   2543c:	mov	r0, r9
   25440:	add	r1, sp, #112	; 0x70
   25444:	str	r3, [sp, #52]	; 0x34
   25448:	bl	14668 <__assert_fail@plt+0x10>
   2544c:	ldr	r3, [sp, #52]	; 0x34
   25450:	cmp	r0, #0
   25454:	bne	2548c <__assert_fail@plt+0x10e34>
   25458:	ldr	r2, [sp, #112]	; 0x70
   2545c:	cmp	r2, #0
   25460:	bne	255fc <__assert_fail@plt+0x10fa4>
   25464:	ldr	ip, [sp, #108]	; 0x6c
   25468:	add	r0, sp, #116	; 0x74
   2546c:	mov	r1, #2
   25470:	str	r3, [sp, #52]	; 0x34
   25474:	sub	ip, ip, #1
   25478:	str	ip, [sp, #100]	; 0x64
   2547c:	bl	13b48 <gcry_md_open@plt>
   25480:	ldr	r3, [sp, #52]	; 0x34
   25484:	cmp	r0, #0
   25488:	beq	254b0 <__assert_fail@plt+0x10e58>
   2548c:	mov	r6, r0
   25490:	b	2511c <__assert_fail@plt+0x10ac4>
   25494:	movw	r0, #26212	; 0x6664
   25498:	movw	r1, #26100	; 0x65f4
   2549c:	movt	r0, #4
   254a0:	movt	r1, #4
   254a4:	movw	r2, #502	; 0x1f6
   254a8:	ldr	r3, [pc, #1488]	; 25a80 <__assert_fail@plt+0x11428>
   254ac:	bl	14658 <__assert_fail@plt>
   254b0:	ldr	r1, [sp, #60]	; 0x3c
   254b4:	ldr	r0, [sp, #116]	; 0x74
   254b8:	rsb	r2, r1, r3
   254bc:	bl	13c8c <gcry_md_write@plt>
   254c0:	ldr	r0, [sp, #116]	; 0x74
   254c4:	add	r1, sp, #156	; 0x9c
   254c8:	mov	r2, #35	; 0x23
   254cc:	bl	13c8c <gcry_md_write@plt>
   254d0:	ldr	ip, [sp, #72]	; 0x48
   254d4:	ldr	r9, [sp, #76]	; 0x4c
   254d8:	mov	r2, fp
   254dc:	ldr	r0, [sp, #116]	; 0x74
   254e0:	movw	r1, #29984	; 0x7520
   254e4:	movt	r1, #4
   254e8:	rsb	r9, ip, r9
   254ec:	str	r9, [sp, #60]	; 0x3c
   254f0:	bl	13c8c <gcry_md_write@plt>
   254f4:	mov	r1, #2
   254f8:	ldr	r0, [sp, #116]	; 0x74
   254fc:	bl	13b3c <gcry_md_read@plt>
   25500:	add	ip, sp, #136	; 0x88
   25504:	add	r9, r9, #1
   25508:	str	r9, [sp, #88]	; 0x58
   2550c:	mov	lr, r0
   25510:	ldr	r0, [r0]
   25514:	ldr	r1, [lr, #4]
   25518:	ldr	r2, [lr, #8]
   2551c:	ldr	r3, [lr, #12]
   25520:	stmia	ip!, {r0, r1, r2, r3}
   25524:	ldr	r0, [lr, #16]
   25528:	str	r0, [ip]
   2552c:	ldr	r0, [sp, #116]	; 0x74
   25530:	bl	13b00 <gcry_md_close@plt>
   25534:	mov	r3, fp
   25538:	add	r0, sp, #120	; 0x78
   2553c:	mov	r1, #7
   25540:	mov	r2, #3
   25544:	bl	13aac <gcry_cipher_open@plt>
   25548:	cmp	r0, #0
   2554c:	bne	2548c <__assert_fail@plt+0x10e34>
   25550:	mov	r0, #7
   25554:	bl	139e0 <gcry_cipher_get_algo_blklen@plt>
   25558:	ldr	fp, [sp, #60]	; 0x3c
   2555c:	add	r9, fp, #42	; 0x2a
   25560:	add	r9, r9, r0
   25564:	mov	r1, r0
   25568:	str	r0, [sp, #56]	; 0x38
   2556c:	mov	r0, r9
   25570:	str	r9, [sp, #92]	; 0x5c
   25574:	bl	3f934 <__assert_fail@plt+0x2b2dc>
   25578:	ldr	ip, [sp, #56]	; 0x38
   2557c:	mul	r0, r0, ip
   25580:	str	r0, [sp, #80]	; 0x50
   25584:	ldr	r0, [sp, #92]	; 0x5c
   25588:	bl	13f44 <gcry_malloc_secure@plt>
   2558c:	cmp	r0, #0
   25590:	str	r0, [sp, #64]	; 0x40
   25594:	beq	25a64 <__assert_fail@plt+0x1140c>
   25598:	ldr	r9, [sp, #56]	; 0x38
   2559c:	add	r3, r9, #4
   255a0:	lsl	r3, r3, #1
   255a4:	str	r3, [sp, #84]	; 0x54
   255a8:	mov	r0, r3
   255ac:	bl	139c8 <gcry_malloc@plt>
   255b0:	subs	fp, r0, #0
   255b4:	str	fp, [sp, #60]	; 0x3c
   255b8:	beq	25a50 <__assert_fail@plt+0x113f8>
   255bc:	ldr	r1, [sp, #84]	; 0x54
   255c0:	bl	1446c <gcry_create_nonce@plt>
   255c4:	ldr	r0, [sp, #120]	; 0x78
   255c8:	ldr	r1, [sp, #60]	; 0x3c
   255cc:	ldr	r2, [sp, #56]	; 0x38
   255d0:	bl	14154 <gcry_cipher_setiv@plt>
   255d4:	subs	r9, r0, #0
   255d8:	beq	25618 <__assert_fail@plt+0x10fc0>
   255dc:	ldr	r0, [sp, #120]	; 0x78
   255e0:	bl	145d4 <gcry_cipher_close@plt>
   255e4:	ldr	r0, [sp, #60]	; 0x3c
   255e8:	mov	r6, r9
   255ec:	bl	13c44 <gcry_free@plt>
   255f0:	ldr	r0, [sp, #64]	; 0x40
   255f4:	bl	13c44 <gcry_free@plt>
   255f8:	b	2511c <__assert_fail@plt+0x10ac4>
   255fc:	movw	r0, #26224	; 0x6670
   25600:	movw	r1, #26100	; 0x65f4
   25604:	movt	r0, #4
   25608:	movt	r1, #4
   2560c:	movw	r2, #506	; 0x1fa
   25610:	ldr	r3, [pc, #1128]	; 25a80 <__assert_fail@plt+0x11428>
   25614:	bl	14658 <__assert_fail@plt>
   25618:	mov	r0, #16
   2561c:	bl	13f44 <gcry_malloc_secure@plt>
   25620:	subs	fp, r0, #0
   25624:	beq	259ac <__assert_fail@plt+0x11354>
   25628:	ldr	ip, [sp, #84]	; 0x54
   2562c:	sub	r9, ip, #8
   25630:	ldr	ip, [sp, #60]	; 0x3c
   25634:	add	r9, ip, r9
   25638:	bl	24f90 <__assert_fail@plt+0x10938>
   2563c:	mov	r3, fp
   25640:	mov	r1, r9
   25644:	mov	r2, r0
   25648:	mov	r0, sl
   2564c:	bl	24c8c <__assert_fail@plt+0x10634>
   25650:	subs	r9, r0, #0
   25654:	bne	2566c <__assert_fail@plt+0x11014>
   25658:	ldr	r0, [sp, #120]	; 0x78
   2565c:	mov	r1, fp
   25660:	mov	r2, #16
   25664:	bl	13b60 <gcry_cipher_setkey@plt>
   25668:	mov	r9, r0
   2566c:	mov	r0, fp
   25670:	bl	13c44 <gcry_free@plt>
   25674:	cmp	r9, #0
   25678:	bne	255dc <__assert_fail@plt+0x10f84>
   2567c:	ldr	sl, [sp, #64]	; 0x40
   25680:	mov	r3, #40	; 0x28
   25684:	ldr	fp, [sp, #64]	; 0x40
   25688:	ldr	r1, [sp, #72]	; 0x48
   2568c:	strb	r3, [sl], #2
   25690:	mov	r0, sl
   25694:	strb	r3, [fp, #1]
   25698:	ldr	r2, [sp, #88]	; 0x58
   2569c:	bl	13ba8 <memcpy@plt>
   256a0:	movw	lr, #26232	; 0x6678
   256a4:	movt	lr, #4
   256a8:	ldr	fp, [sp, #88]	; 0x58
   256ac:	add	ip, sp, #136	; 0x88
   256b0:	str	ip, [sp, #44]	; 0x2c
   256b4:	ldm	lr!, {r0, r1, r2, r3}
   256b8:	add	ip, sl, fp
   256bc:	add	fp, ip, #17
   256c0:	str	fp, [sp, #68]	; 0x44
   256c4:	add	fp, ip, #39	; 0x27
   256c8:	str	fp, [sp, #96]	; 0x60
   256cc:	ldr	fp, [sp, #88]	; 0x58
   256d0:	ldrb	lr, [lr]
   256d4:	str	r0, [sl, fp]
   256d8:	mov	sl, #41	; 0x29
   256dc:	ldr	fp, [sp, #44]	; 0x2c
   256e0:	str	r1, [ip, #4]
   256e4:	str	r2, [ip, #8]
   256e8:	str	r3, [ip, #12]
   256ec:	ldm	fp!, {r0, r1, r2, r3}
   256f0:	strb	lr, [ip, #16]
   256f4:	ldr	lr, [sp, #68]	; 0x44
   256f8:	str	r0, [ip, #17]
   256fc:	str	r1, [lr, #4]
   25700:	ldr	r0, [fp]
   25704:	ldr	lr, [sp, #56]	; 0x38
   25708:	ldr	fp, [sp, #60]	; 0x3c
   2570c:	add	r1, fp, lr
   25710:	ldr	fp, [sp, #68]	; 0x44
   25714:	str	r0, [fp, #16]
   25718:	str	r2, [fp, #8]
   2571c:	mov	r2, lr
   25720:	str	r3, [fp, #12]
   25724:	ldr	r0, [sp, #96]	; 0x60
   25728:	strb	sl, [ip, #37]	; 0x25
   2572c:	strb	sl, [ip, #38]	; 0x26
   25730:	bl	13ba8 <memcpy@plt>
   25734:	ldr	ip, [sp, #96]	; 0x60
   25738:	ldr	sl, [sp, #56]	; 0x38
   2573c:	ldr	fp, [sp, #64]	; 0x40
   25740:	add	r3, ip, sl
   25744:	ldr	ip, [sp, #92]	; 0x5c
   25748:	rsb	r3, fp, r3
   2574c:	cmp	ip, r3
   25750:	bne	25a20 <__assert_fail@plt+0x113c8>
   25754:	mov	r3, r9
   25758:	str	r9, [sp]
   2575c:	ldr	r1, [sp, #64]	; 0x40
   25760:	ldr	r2, [sp, #80]	; 0x50
   25764:	ldr	r0, [sp, #120]	; 0x78
   25768:	bl	13e48 <gcry_cipher_encrypt@plt>
   2576c:	mov	r9, r0
   25770:	ldr	r0, [sp, #120]	; 0x78
   25774:	bl	145d4 <gcry_cipher_close@plt>
   25778:	cmp	r9, #0
   2577c:	bne	255e4 <__assert_fail@plt+0x10f8c>
   25780:	bl	24f90 <__assert_fail@plt+0x10938>
   25784:	add	sl, sp, #192	; 0xc0
   25788:	mov	r1, #35	; 0x23
   2578c:	movw	r2, #15796	; 0x3db4
   25790:	mov	r3, r1
   25794:	movt	r2, #4
   25798:	str	r2, [sp]
   2579c:	mov	r2, #1
   257a0:	str	r0, [sp, #4]
   257a4:	mov	r0, sl
   257a8:	bl	1464c <__snprintf_chk@plt>
   257ac:	mov	r0, sl
   257b0:	bl	14094 <strlen@plt>
   257b4:	ldr	fp, [sp, #80]	; 0x50
   257b8:	str	sl, [sp, #4]
   257bc:	add	r1, sp, #128	; 0x80
   257c0:	ldr	sl, [sp, #56]	; 0x38
   257c4:	add	ip, sp, #132	; 0x84
   257c8:	str	fp, [sp, #24]
   257cc:	movw	r3, #18888	; 0x49c8
   257d0:	str	fp, [sp, #32]
   257d4:	movt	r3, #4
   257d8:	str	r1, [sp, #12]
   257dc:	movw	r2, #26340	; 0x66e4
   257e0:	str	r3, [sp, #20]
   257e4:	movt	r2, #4
   257e8:	str	r3, [sp, #36]	; 0x24
   257ec:	mov	r1, #25
   257f0:	str	sl, [sp, #8]
   257f4:	add	r3, sp, #124	; 0x7c
   257f8:	str	sl, [sp, #16]
   257fc:	str	ip, [sp, #28]
   25800:	str	r0, [sp]
   25804:	movw	r0, #26276	; 0x66a4
   25808:	movt	r0, #4
   2580c:	bl	2ed14 <__assert_fail@plt+0x1a6bc>
   25810:	subs	fp, r0, #0
   25814:	beq	259f8 <__assert_fail@plt+0x113a0>
   25818:	bl	14094 <strlen@plt>
   2581c:	ldr	ip, [sp, #84]	; 0x54
   25820:	ldr	r9, [sp, #60]	; 0x3c
   25824:	sub	r1, ip, #8
   25828:	ldr	lr, [sp, #124]	; 0x7c
   2582c:	add	r1, r9, r1
   25830:	ldr	r2, [sp, #56]	; 0x38
   25834:	add	r3, fp, lr
   25838:	ldr	ip, [r1, #4]
   2583c:	str	r0, [sp, #68]	; 0x44
   25840:	ldr	r0, [r1]
   25844:	mov	r1, r9
   25848:	str	r0, [fp, lr]
   2584c:	ldr	r0, [sp, #128]	; 0x80
   25850:	str	ip, [r3, #4]
   25854:	add	r0, fp, r0
   25858:	bl	13ba8 <memcpy@plt>
   2585c:	ldr	r0, [sp, #132]	; 0x84
   25860:	ldr	r2, [sp, #80]	; 0x50
   25864:	ldr	r1, [sp, #64]	; 0x40
   25868:	add	r0, fp, r0
   2586c:	bl	13ba8 <memcpy@plt>
   25870:	ldr	r0, [sp, #60]	; 0x3c
   25874:	bl	13c44 <gcry_free@plt>
   25878:	ldr	r0, [sp, #64]	; 0x40
   2587c:	bl	13c44 <gcry_free@plt>
   25880:	ldr	ip, [sp, #72]	; 0x48
   25884:	ldr	lr, [sp, #76]	; 0x4c
   25888:	rsb	sl, r5, ip
   2588c:	ldr	ip, [sp, #100]	; 0x64
   25890:	ldr	r3, [sp, #68]	; 0x44
   25894:	rsb	r9, lr, ip
   25898:	add	r0, sl, r9
   2589c:	add	r0, r0, #45	; 0x2d
   258a0:	add	r0, r0, r3
   258a4:	str	r0, [r8]
   258a8:	bl	139c8 <gcry_malloc@plt>
   258ac:	cmp	r0, #0
   258b0:	mov	ip, r0
   258b4:	str	r0, [r7]
   258b8:	beq	259c4 <__assert_fail@plt+0x1136c>
   258bc:	movw	r3, #26368	; 0x6700
   258c0:	movt	r3, #4
   258c4:	sub	lr, sl, #4
   258c8:	add	sl, r0, #14
   258cc:	ldm	r3!, {r0, r1, r2}
   258d0:	str	sl, [sp, #56]	; 0x38
   258d4:	add	sl, sl, lr
   258d8:	str	sl, [sp, #60]	; 0x3c
   258dc:	ldrh	r3, [r3]
   258e0:	str	r0, [ip]
   258e4:	str	r1, [ip, #4]
   258e8:	add	r1, r5, #4
   258ec:	str	r2, [ip, #8]
   258f0:	mov	r2, lr
   258f4:	strh	r3, [ip, #12]
   258f8:	add	r5, sp, #156	; 0x9c
   258fc:	ldr	r0, [sp, #56]	; 0x38
   25900:	bl	13ba8 <memcpy@plt>
   25904:	ldr	r0, [sp, #60]	; 0x3c
   25908:	mov	r1, fp
   2590c:	ldr	r2, [sp, #68]	; 0x44
   25910:	bl	13ba8 <memcpy@plt>
   25914:	ldr	ip, [sp, #60]	; 0x3c
   25918:	ldr	r3, [sp, #68]	; 0x44
   2591c:	str	r4, [sp, #60]	; 0x3c
   25920:	add	sl, ip, r3
   25924:	add	ip, sp, #188	; 0xbc
   25928:	str	ip, [sp, #56]	; 0x38
   2592c:	mov	ip, sl
   25930:	mov	lr, r5
   25934:	ldr	r4, [sp, #56]	; 0x38
   25938:	ldm	lr!, {r0, r1, r2, r3}
   2593c:	add	r5, r5, #16
   25940:	add	ip, ip, #16
   25944:	cmp	lr, r4
   25948:	str	r0, [ip, #-16]
   2594c:	str	r1, [ip, #-12]
   25950:	str	r2, [ip, #-8]
   25954:	str	r3, [ip, #-4]
   25958:	bne	25930 <__assert_fail@plt+0x112d8>
   2595c:	ldrh	r3, [r5]
   25960:	add	sl, sl, #35	; 0x23
   25964:	ldrb	lr, [r5, #2]
   25968:	mov	r2, r9
   2596c:	ldr	r0, [sp, #76]	; 0x4c
   25970:	add	r9, sl, r9
   25974:	ldr	r4, [sp, #60]	; 0x3c
   25978:	add	r1, r0, #1
   2597c:	strh	r3, [ip]
   25980:	mov	r0, sl
   25984:	strb	lr, [ip, #2]
   25988:	bl	13ba8 <memcpy@plt>
   2598c:	ldr	r2, [r7]
   25990:	ldr	r3, [r8]
   25994:	rsb	r2, r2, r9
   25998:	cmp	r2, r3
   2599c:	bne	259dc <__assert_fail@plt+0x11384>
   259a0:	mov	r0, fp
   259a4:	bl	13c44 <gcry_free@plt>
   259a8:	b	2511c <__assert_fail@plt+0x10ac4>
   259ac:	bl	14580 <gpg_err_code_from_syserror@plt>
   259b0:	cmp	r0, #0
   259b4:	uxthne	r0, r0
   259b8:	orrne	r9, r0, #67108864	; 0x4000000
   259bc:	moveq	r9, r0
   259c0:	b	25674 <__assert_fail@plt+0x1101c>
   259c4:	bl	14580 <gpg_err_code_from_syserror@plt>
   259c8:	cmp	r0, #0
   259cc:	uxthne	r0, r0
   259d0:	orrne	r6, r0, #67108864	; 0x4000000
   259d4:	moveq	r6, r0
   259d8:	b	259a0 <__assert_fail@plt+0x11348>
   259dc:	movw	r0, #26384	; 0x6710
   259e0:	movw	r1, #26100	; 0x65f4
   259e4:	movt	r0, #4
   259e8:	movt	r1, #4
   259ec:	movw	r2, #555	; 0x22b
   259f0:	ldr	r3, [pc, #136]	; 25a80 <__assert_fail@plt+0x11428>
   259f4:	bl	14658 <__assert_fail@plt>
   259f8:	bl	14580 <gpg_err_code_from_syserror@plt>
   259fc:	subs	sl, r0, #0
   25a00:	ldr	r0, [sp, #60]	; 0x3c
   25a04:	beq	25a3c <__assert_fail@plt+0x113e4>
   25a08:	bl	13c44 <gcry_free@plt>
   25a0c:	uxth	r6, sl
   25a10:	ldr	r0, [sp, #64]	; 0x40
   25a14:	orr	r6, r6, #67108864	; 0x4000000
   25a18:	bl	13c44 <gcry_free@plt>
   25a1c:	b	2511c <__assert_fail@plt+0x10ac4>
   25a20:	movw	r0, #26252	; 0x668c
   25a24:	movw	r1, #26100	; 0x65f4
   25a28:	movt	r0, #4
   25a2c:	movt	r1, #4
   25a30:	movw	r2, #351	; 0x15f
   25a34:	ldr	r3, [pc, #72]	; 25a84 <__assert_fail@plt+0x1142c>
   25a38:	bl	14658 <__assert_fail@plt>
   25a3c:	str	r9, [sp, #68]	; 0x44
   25a40:	bl	13c44 <gcry_free@plt>
   25a44:	ldr	r0, [sp, #64]	; 0x40
   25a48:	bl	13c44 <gcry_free@plt>
   25a4c:	b	25880 <__assert_fail@plt+0x11228>
   25a50:	movw	r9, #32854	; 0x8056
   25a54:	movt	r9, #1024	; 0x400
   25a58:	mov	sl, #0
   25a5c:	str	sl, [sp, #60]	; 0x3c
   25a60:	b	255dc <__assert_fail@plt+0x10f84>
   25a64:	bl	14580 <gpg_err_code_from_syserror@plt>
   25a68:	cmp	r0, #0
   25a6c:	uxthne	r9, r0
   25a70:	orrne	r9, r9, #67108864	; 0x4000000
   25a74:	bne	25a58 <__assert_fail@plt+0x11400>
   25a78:	b	25598 <__assert_fail@plt+0x10f40>
   25a7c:	andeq	r6, r4, ip, lsl r5
   25a80:	andeq	r6, r4, r8, lsr #11
   25a84:			; <UNDEFINED> instruction: 0x000465b8
   25a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25a8c:	subs	r7, r2, #0
   25a90:	movw	r4, #47296	; 0xb8c0
   25a94:	movt	r4, #5
   25a98:	mov	r8, r3
   25a9c:	movne	r3, #0
   25aa0:	ldr	r2, [r4]
   25aa4:	sub	sp, sp, #116	; 0x74
   25aa8:	strbne	r3, [r7]
   25aac:	mov	r5, r0
   25ab0:	ldrb	r3, [r0]
   25ab4:	mov	sl, r1
   25ab8:	ldr	r9, [sp, #152]	; 0x98
   25abc:	cmp	r3, #40	; 0x28
   25ac0:	str	r2, [sp, #108]	; 0x6c
   25ac4:	str	r0, [sp, #52]	; 0x34
   25ac8:	beq	25af0 <__assert_fail@plt+0x11498>
   25acc:	mov	r6, #83	; 0x53
   25ad0:	movt	r6, #1024	; 0x400
   25ad4:	ldr	r2, [sp, #108]	; 0x6c
   25ad8:	mov	r0, r6
   25adc:	ldr	r3, [r4]
   25ae0:	cmp	r2, r3
   25ae4:	bne	25d24 <__assert_fail@plt+0x116cc>
   25ae8:	add	sp, sp, #116	; 0x74
   25aec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25af0:	ldrb	r0, [r0, #1]
   25af4:	add	r3, r5, #1
   25af8:	str	r3, [sp, #52]	; 0x34
   25afc:	sub	r3, r0, #48	; 0x30
   25b00:	uxtb	r2, r3
   25b04:	cmp	r2, #9
   25b08:	bhi	25acc <__assert_fail@plt+0x11474>
   25b0c:	add	r1, r5, #2
   25b10:	mov	r2, #0
   25b14:	add	r2, r2, r2, lsl #2
   25b18:	mov	fp, r1
   25b1c:	ldrb	r0, [r1], #1
   25b20:	add	r2, r3, r2, lsl #1
   25b24:	sub	r3, r0, #48	; 0x30
   25b28:	uxtb	ip, r3
   25b2c:	cmp	ip, #9
   25b30:	bls	25b14 <__assert_fail@plt+0x114bc>
   25b34:	cmp	r2, #0
   25b38:	beq	25acc <__assert_fail@plt+0x11474>
   25b3c:	cmp	r0, #58	; 0x3a
   25b40:	bne	25acc <__assert_fail@plt+0x11474>
   25b44:	cmp	r2, #21
   25b48:	mov	r0, r1
   25b4c:	str	r1, [sp, #52]	; 0x34
   25b50:	beq	25b60 <__assert_fail@plt+0x11508>
   25b54:	mov	r6, #104	; 0x68
   25b58:	movt	r6, #1024	; 0x400
   25b5c:	b	25ad4 <__assert_fail@plt+0x1147c>
   25b60:	movw	r1, #19260	; 0x4b3c
   25b64:	movt	r1, #4
   25b68:	bl	13c80 <memcmp@plt>
   25b6c:	subs	r6, r0, #0
   25b70:	bne	25b54 <__assert_fail@plt+0x114fc>
   25b74:	ldrb	r3, [fp, #22]
   25b78:	add	r2, fp, #22
   25b7c:	str	r2, [sp, #52]	; 0x34
   25b80:	cmp	r3, #40	; 0x28
   25b84:	bne	25b54 <__assert_fail@plt+0x114fc>
   25b88:	add	r3, sp, #112	; 0x70
   25b8c:	add	fp, fp, #23
   25b90:	str	fp, [r3, #-60]!	; 0xffffffc4
   25b94:	mov	r0, r3
   25b98:	str	r3, [sp, #16]
   25b9c:	bl	24bd0 <__assert_fail@plt+0x10578>
   25ba0:	subs	r3, r0, #0
   25ba4:	beq	25acc <__assert_fail@plt+0x11474>
   25ba8:	movw	r2, #20684	; 0x50cc
   25bac:	mov	ip, r4
   25bb0:	ldr	fp, [pc, #2732]	; 26664 <__assert_fail@plt+0x1200c>
   25bb4:	movt	r2, #4
   25bb8:	mov	r4, r3
   25bbc:	b	25bcc <__assert_fail@plt+0x11574>
   25bc0:	ldr	r2, [fp, #20]!
   25bc4:	cmp	r2, #0
   25bc8:	beq	25d28 <__assert_fail@plt+0x116d0>
   25bcc:	ldr	r0, [sp, #16]
   25bd0:	mov	r1, r4
   25bd4:	str	ip, [sp, #12]
   25bd8:	bl	24c38 <__assert_fail@plt+0x105e0>
   25bdc:	ldr	ip, [sp, #12]
   25be0:	cmp	r0, #0
   25be4:	beq	25bc0 <__assert_fail@plt+0x11568>
   25be8:	ldr	r3, [sp, #52]	; 0x34
   25bec:	cmp	r7, #0
   25bf0:	mov	r4, ip
   25bf4:	movne	fp, #1
   25bf8:	str	r3, [sp, #20]
   25bfc:	bne	25c68 <__assert_fail@plt+0x11610>
   25c00:	b	25c74 <__assert_fail@plt+0x1161c>
   25c04:	ldr	r0, [sp, #16]
   25c08:	add	r3, r3, #1
   25c0c:	str	r3, [sp, #52]	; 0x34
   25c10:	bl	24bd0 <__assert_fail@plt+0x10578>
   25c14:	subs	r3, r0, #0
   25c18:	beq	25acc <__assert_fail@plt+0x11474>
   25c1c:	mov	r1, r3
   25c20:	movw	r2, #26412	; 0x672c
   25c24:	ldr	r0, [sp, #16]
   25c28:	movt	r2, #4
   25c2c:	str	r3, [sp, #12]
   25c30:	bl	24c38 <__assert_fail@plt+0x105e0>
   25c34:	ldr	r3, [sp, #12]
   25c38:	cmp	r0, #0
   25c3c:	bne	25d40 <__assert_fail@plt+0x116e8>
   25c40:	ldr	r2, [sp, #52]	; 0x34
   25c44:	add	r1, sp, #56	; 0x38
   25c48:	ldr	r0, [sp, #16]
   25c4c:	add	r3, r2, r3
   25c50:	str	fp, [sp, #56]	; 0x38
   25c54:	str	r3, [sp, #52]	; 0x34
   25c58:	bl	14668 <__assert_fail@plt+0x10>
   25c5c:	cmp	r0, #0
   25c60:	bne	25d38 <__assert_fail@plt+0x116e0>
   25c64:	ldr	r3, [sp, #52]	; 0x34
   25c68:	ldrb	r2, [r3]
   25c6c:	cmp	r2, #40	; 0x28
   25c70:	beq	25c04 <__assert_fail@plt+0x115ac>
   25c74:	ldr	r3, [sp, #20]
   25c78:	mov	r7, #1
   25c7c:	str	r3, [sp, #52]	; 0x34
   25c80:	b	25ca8 <__assert_fail@plt+0x11650>
   25c84:	ldr	r2, [sp, #52]	; 0x34
   25c88:	add	r1, sp, #56	; 0x38
   25c8c:	ldr	r0, [sp, #16]
   25c90:	add	r3, r2, fp
   25c94:	str	r7, [sp, #56]	; 0x38
   25c98:	str	r3, [sp, #52]	; 0x34
   25c9c:	bl	14668 <__assert_fail@plt+0x10>
   25ca0:	cmp	r0, #0
   25ca4:	bne	25d38 <__assert_fail@plt+0x116e0>
   25ca8:	ldr	r1, [sp, #52]	; 0x34
   25cac:	ldrb	r3, [r1]
   25cb0:	str	r1, [sp, #20]
   25cb4:	cmp	r3, #40	; 0x28
   25cb8:	bne	25acc <__assert_fail@plt+0x11474>
   25cbc:	ldr	r0, [sp, #16]
   25cc0:	add	r3, r1, #1
   25cc4:	str	r3, [sp, #52]	; 0x34
   25cc8:	bl	24bd0 <__assert_fail@plt+0x10578>
   25ccc:	subs	fp, r0, #0
   25cd0:	beq	25acc <__assert_fail@plt+0x11474>
   25cd4:	movw	r2, #26428	; 0x673c
   25cd8:	ldr	r0, [sp, #16]
   25cdc:	movt	r2, #4
   25ce0:	mov	r1, fp
   25ce4:	bl	24c38 <__assert_fail@plt+0x105e0>
   25ce8:	cmp	r0, #0
   25cec:	beq	25c84 <__assert_fail@plt+0x1162c>
   25cf0:	ldr	r0, [sp, #16]
   25cf4:	bl	24bd0 <__assert_fail@plt+0x10578>
   25cf8:	subs	r1, r0, #0
   25cfc:	beq	25acc <__assert_fail@plt+0x11474>
   25d00:	movw	r2, #26340	; 0x66e4
   25d04:	ldr	r0, [sp, #16]
   25d08:	movt	r2, #4
   25d0c:	bl	24c38 <__assert_fail@plt+0x105e0>
   25d10:	cmp	r0, #0
   25d14:	bne	25d90 <__assert_fail@plt+0x11738>
   25d18:	mov	r6, #105	; 0x69
   25d1c:	movt	r6, #1024	; 0x400
   25d20:	b	25ad4 <__assert_fail@plt+0x1147c>
   25d24:	bl	13cec <__stack_chk_fail@plt>
   25d28:	mov	r6, #84	; 0x54
   25d2c:	mov	r4, ip
   25d30:	movt	r6, #1024	; 0x400
   25d34:	b	25ad4 <__assert_fail@plt+0x1147c>
   25d38:	mov	r6, r0
   25d3c:	b	25ad4 <__assert_fail@plt+0x1147c>
   25d40:	ldr	r0, [sp, #16]
   25d44:	bl	24bd0 <__assert_fail@plt+0x10578>
   25d48:	cmp	r0, #0
   25d4c:	beq	25acc <__assert_fail@plt+0x11474>
   25d50:	cmp	r0, #15
   25d54:	bne	25b54 <__assert_fail@plt+0x114fc>
   25d58:	ldr	r3, [sp, #52]	; 0x34
   25d5c:	mov	r2, #0
   25d60:	ldr	r1, [r3, #8]
   25d64:	ldr	fp, [r3]
   25d68:	ldr	r0, [r3, #4]
   25d6c:	str	r1, [r7, #8]
   25d70:	str	fp, [r7]
   25d74:	str	r0, [r7, #4]
   25d78:	ldrh	r1, [r3, #12]
   25d7c:	ldrb	r3, [r3, #14]
   25d80:	strb	r2, [r7, #15]
   25d84:	strh	r1, [r7, #12]
   25d88:	strb	r3, [r7, #14]
   25d8c:	b	25c74 <__assert_fail@plt+0x1161c>
   25d90:	ldr	r3, [sp, #52]	; 0x34
   25d94:	ldrb	r2, [r3]
   25d98:	cmp	r2, #40	; 0x28
   25d9c:	bne	25acc <__assert_fail@plt+0x11474>
   25da0:	ldrb	r2, [r3, #1]
   25da4:	cmp	r2, #40	; 0x28
   25da8:	bne	25acc <__assert_fail@plt+0x11474>
   25dac:	ldr	r0, [sp, #16]
   25db0:	add	r3, r3, #2
   25db4:	str	r3, [sp, #52]	; 0x34
   25db8:	bl	24bd0 <__assert_fail@plt+0x10578>
   25dbc:	subs	r1, r0, #0
   25dc0:	beq	25acc <__assert_fail@plt+0x11474>
   25dc4:	movw	r2, #26440	; 0x6748
   25dc8:	ldr	r0, [sp, #16]
   25dcc:	movt	r2, #4
   25dd0:	bl	24c38 <__assert_fail@plt+0x105e0>
   25dd4:	cmp	r0, #0
   25dd8:	beq	25d18 <__assert_fail@plt+0x116c0>
   25ddc:	ldr	r0, [sp, #16]
   25de0:	bl	24bd0 <__assert_fail@plt+0x10578>
   25de4:	cmp	r0, #8
   25de8:	beq	25df8 <__assert_fail@plt+0x117a0>
   25dec:	mov	r6, #106	; 0x6a
   25df0:	movt	r6, #1024	; 0x400
   25df4:	b	25ad4 <__assert_fail@plt+0x1147c>
   25df8:	ldr	r2, [sp, #52]	; 0x34
   25dfc:	ldr	r0, [sp, #16]
   25e00:	add	r3, r2, #8
   25e04:	str	r3, [sp, #52]	; 0x34
   25e08:	str	r2, [sp, #32]
   25e0c:	bl	24bd0 <__assert_fail@plt+0x10578>
   25e10:	subs	fp, r0, #0
   25e14:	beq	25dec <__assert_fail@plt+0x11794>
   25e18:	ldr	r0, [sp, #52]	; 0x34
   25e1c:	ldrb	r3, [r0, fp]
   25e20:	cmp	r3, #41	; 0x29
   25e24:	bne	25acc <__assert_fail@plt+0x11474>
   25e28:	mov	r1, #0
   25e2c:	mov	r2, #10
   25e30:	bl	1407c <strtoul@plt>
   25e34:	subs	r7, r0, #0
   25e38:	beq	25dec <__assert_fail@plt+0x11794>
   25e3c:	cmp	r7, #255	; 0xff
   25e40:	andls	r2, r7, #15
   25e44:	lsrls	r3, r7, #4
   25e48:	addls	r2, r2, #16
   25e4c:	addls	r3, r3, #6
   25e50:	lslls	r7, r2, r3
   25e54:	cmp	r7, #65536	; 0x10000
   25e58:	bcc	25dec <__assert_fail@plt+0x11794>
   25e5c:	ldr	r3, [sp, #52]	; 0x34
   25e60:	ldr	r0, [sp, #16]
   25e64:	add	r3, r3, fp
   25e68:	add	r3, r3, #1
   25e6c:	str	r3, [sp, #52]	; 0x34
   25e70:	bl	24bd0 <__assert_fail@plt+0x10578>
   25e74:	cmp	r0, #16
   25e78:	bne	25dec <__assert_fail@plt+0x11794>
   25e7c:	ldr	fp, [sp, #52]	; 0x34
   25e80:	add	r3, fp, #16
   25e84:	str	r3, [sp, #52]	; 0x34
   25e88:	ldrb	r3, [fp, #16]
   25e8c:	cmp	r3, #41	; 0x29
   25e90:	bne	25acc <__assert_fail@plt+0x11474>
   25e94:	ldr	r0, [sp, #16]
   25e98:	add	r3, fp, #17
   25e9c:	str	r3, [sp, #52]	; 0x34
   25ea0:	bl	24bd0 <__assert_fail@plt+0x10578>
   25ea4:	cmp	r0, #0
   25ea8:	str	r0, [sp, #28]
   25eac:	beq	25acc <__assert_fail@plt+0x11474>
   25eb0:	ldr	r3, [sp, #52]	; 0x34
   25eb4:	mov	r0, #7
   25eb8:	str	r3, [sp, #36]	; 0x24
   25ebc:	bl	139e0 <gcry_cipher_get_algo_blklen@plt>
   25ec0:	ldr	r1, [sp, #28]
   25ec4:	cmp	r1, #3
   25ec8:	str	r0, [sp, #24]
   25ecc:	bls	25dec <__assert_fail@plt+0x11794>
   25ed0:	mov	r0, r1
   25ed4:	ldr	r1, [sp, #24]
   25ed8:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   25edc:	cmp	r1, #0
   25ee0:	bne	25dec <__assert_fail@plt+0x11794>
   25ee4:	mov	r1, #7
   25ee8:	mov	r2, #3
   25eec:	mov	r3, #1
   25ef0:	add	r0, sp, #64	; 0x40
   25ef4:	bl	13aac <gcry_cipher_open@plt>
   25ef8:	cmp	r0, #0
   25efc:	bne	25d38 <__assert_fail@plt+0x116e0>
   25f00:	ldr	r0, [sp, #28]
   25f04:	bl	13f44 <gcry_malloc_secure@plt>
   25f08:	cmp	r0, #0
   25f0c:	str	r0, [sp, #16]
   25f10:	beq	25f44 <__assert_fail@plt+0x118ec>
   25f14:	mov	r1, fp
   25f18:	ldr	r0, [sp, #64]	; 0x40
   25f1c:	mov	r2, #16
   25f20:	bl	14154 <gcry_cipher_setiv@plt>
   25f24:	subs	fp, r0, #0
   25f28:	beq	25f5c <__assert_fail@plt+0x11904>
   25f2c:	ldr	r0, [sp, #64]	; 0x40
   25f30:	bl	145d4 <gcry_cipher_close@plt>
   25f34:	ldr	r0, [sp, #16]
   25f38:	mov	r6, fp
   25f3c:	bl	13c44 <gcry_free@plt>
   25f40:	b	25ad4 <__assert_fail@plt+0x1147c>
   25f44:	bl	14580 <gpg_err_code_from_syserror@plt>
   25f48:	cmp	r0, #0
   25f4c:	uxthne	fp, r0
   25f50:	orrne	fp, fp, #67108864	; 0x4000000
   25f54:	bne	25f2c <__assert_fail@plt+0x118d4>
   25f58:	b	25f14 <__assert_fail@plt+0x118bc>
   25f5c:	mov	r0, #16
   25f60:	bl	13f44 <gcry_malloc_secure@plt>
   25f64:	subs	ip, r0, #0
   25f68:	beq	26018 <__assert_fail@plt+0x119c0>
   25f6c:	mov	r3, ip
   25f70:	mov	r0, sl
   25f74:	ldr	r1, [sp, #32]
   25f78:	mov	r2, r7
   25f7c:	str	ip, [sp, #12]
   25f80:	bl	24c8c <__assert_fail@plt+0x10634>
   25f84:	ldr	ip, [sp, #12]
   25f88:	subs	fp, r0, #0
   25f8c:	bne	25fa8 <__assert_fail@plt+0x11950>
   25f90:	mov	r1, ip
   25f94:	ldr	r0, [sp, #64]	; 0x40
   25f98:	mov	r2, #16
   25f9c:	bl	13b60 <gcry_cipher_setkey@plt>
   25fa0:	ldr	ip, [sp, #12]
   25fa4:	mov	fp, r0
   25fa8:	mov	r0, ip
   25fac:	bl	13c44 <gcry_free@plt>
   25fb0:	cmp	fp, #0
   25fb4:	bne	25f2c <__assert_fail@plt+0x118d4>
   25fb8:	ldr	sl, [sp, #28]
   25fbc:	ldr	r3, [sp, #36]	; 0x24
   25fc0:	ldr	r1, [sp, #16]
   25fc4:	mov	r2, sl
   25fc8:	str	sl, [sp]
   25fcc:	ldr	r0, [sp, #64]	; 0x40
   25fd0:	bl	1431c <gcry_cipher_decrypt@plt>
   25fd4:	mov	fp, r0
   25fd8:	ldr	r0, [sp, #64]	; 0x40
   25fdc:	bl	145d4 <gcry_cipher_close@plt>
   25fe0:	cmp	fp, #0
   25fe4:	bne	25f34 <__assert_fail@plt+0x118dc>
   25fe8:	ldr	sl, [sp, #16]
   25fec:	ldrb	r3, [sl]
   25ff0:	cmp	r3, #40	; 0x28
   25ff4:	beq	26030 <__assert_fail@plt+0x119d8>
   25ff8:	ldrb	r3, [sl, #1]
   25ffc:	cmp	r3, #40	; 0x28
   26000:	beq	26030 <__assert_fail@plt+0x119d8>
   26004:	mov	r0, sl
   26008:	mov	r6, #11
   2600c:	bl	13c44 <gcry_free@plt>
   26010:	movt	r6, #1024	; 0x400
   26014:	b	25ad4 <__assert_fail@plt+0x1147c>
   26018:	bl	14580 <gpg_err_code_from_syserror@plt>
   2601c:	cmp	r0, #0
   26020:	uxthne	r0, r0
   26024:	orrne	fp, r0, #67108864	; 0x4000000
   26028:	moveq	fp, r0
   2602c:	b	25fb0 <__assert_fail@plt+0x11958>
   26030:	mov	r2, #0
   26034:	ldr	r0, [sp, #16]
   26038:	mov	r3, r2
   2603c:	ldr	r1, [sp, #28]
   26040:	bl	14604 <gcry_sexp_canon_len@plt>
   26044:	cmp	r0, #0
   26048:	beq	26060 <__assert_fail@plt+0x11a08>
   2604c:	ldr	sl, [sp, #24]
   26050:	add	r3, r0, sl
   26054:	ldr	sl, [sp, #28]
   26058:	cmp	sl, r3
   2605c:	bls	26074 <__assert_fail@plt+0x11a1c>
   26060:	ldr	r0, [sp, #16]
   26064:	mov	r6, #11
   26068:	bl	13c44 <gcry_free@plt>
   2606c:	movt	r6, #1024	; 0x400
   26070:	b	25ad4 <__assert_fail@plt+0x1147c>
   26074:	ldr	sl, [sp, #20]
   26078:	rsb	sl, r5, sl
   2607c:	str	sl, [sp, #32]
   26080:	cmp	sl, #25
   26084:	bhi	26108 <__assert_fail@plt+0x11ab0>
   26088:	mov	r5, #0
   2608c:	mov	r6, #59	; 0x3b
   26090:	movt	r6, #1024	; 0x400
   26094:	mov	fp, r5
   26098:	mov	r7, r5
   2609c:	str	r5, [sp, #20]
   260a0:	ldr	sl, [sp, #16]
   260a4:	ldr	r2, [sp, #28]
   260a8:	mov	r3, sl
   260ac:	add	r1, sl, r2
   260b0:	mov	r2, #0
   260b4:	strb	r2, [r3], #1
   260b8:	cmp	r3, r1
   260bc:	bne	260b4 <__assert_fail@plt+0x11a5c>
   260c0:	ldr	r0, [sp, #16]
   260c4:	bl	13c44 <gcry_free@plt>
   260c8:	cmp	r6, #0
   260cc:	bne	25ad4 <__assert_fail@plt+0x1147c>
   260d0:	ldrb	r3, [r7]
   260d4:	str	r7, [sp, #64]	; 0x40
   260d8:	cmp	r3, #40	; 0x28
   260dc:	beq	26508 <__assert_fail@plt+0x11eb0>
   260e0:	mov	r6, #83	; 0x53
   260e4:	movt	r6, #1024	; 0x400
   260e8:	ldr	sl, [sp, #20]
   260ec:	mov	r3, r7
   260f0:	mov	r2, #0
   260f4:	add	r1, r7, sl
   260f8:	cmp	r3, r1
   260fc:	beq	264fc <__assert_fail@plt+0x11ea4>
   26100:	strb	r2, [r3], #1
   26104:	b	260f8 <__assert_fail@plt+0x11aa0>
   26108:	mov	r1, #0
   2610c:	mov	r0, r5
   26110:	mov	r2, r1
   26114:	mov	r3, r1
   26118:	bl	14604 <gcry_sexp_canon_len@plt>
   2611c:	subs	r7, r0, #0
   26120:	beq	26088 <__assert_fail@plt+0x11a30>
   26124:	mov	r1, #0
   26128:	ldr	r0, [sp, #16]
   2612c:	mov	r2, r1
   26130:	mov	r3, r1
   26134:	bl	14604 <gcry_sexp_canon_len@plt>
   26138:	cmp	r0, #0
   2613c:	beq	26088 <__assert_fail@plt+0x11a30>
   26140:	add	r0, r0, r7
   26144:	str	r0, [sp, #20]
   26148:	bl	13f44 <gcry_malloc_secure@plt>
   2614c:	subs	r7, r0, #0
   26150:	beq	26230 <__assert_fail@plt+0x11bd8>
   26154:	movw	ip, #26448	; 0x6750
   26158:	movt	ip, #4
   2615c:	ldr	sl, [sp, #32]
   26160:	add	lr, r7, #15
   26164:	ldm	ip!, {r0, r1, r2, r3}
   26168:	sub	ip, sl, #25
   2616c:	add	sl, lr, ip
   26170:	str	sl, [sp, #36]	; 0x24
   26174:	str	r0, [r7]
   26178:	mov	r0, lr
   2617c:	str	r1, [r7, #4]
   26180:	add	r1, r5, #25
   26184:	str	r2, [r7, #8]
   26188:	mov	r2, ip
   2618c:	str	r3, [r7, #12]
   26190:	bl	13ba8 <memcpy@plt>
   26194:	ldr	sl, [sp, #16]
   26198:	ldrb	r3, [sl]
   2619c:	str	sl, [sp, #60]	; 0x3c
   261a0:	cmp	r3, #40	; 0x28
   261a4:	beq	261b4 <__assert_fail@plt+0x11b5c>
   261a8:	ldrb	r3, [sl, #1]
   261ac:	cmp	r3, #40	; 0x28
   261b0:	bne	26088 <__assert_fail@plt+0x11a30>
   261b4:	add	fp, sp, #112	; 0x70
   261b8:	ldr	sl, [sp, #16]
   261bc:	add	sl, sl, #2
   261c0:	str	sl, [sp, #24]
   261c4:	str	sl, [fp, #-52]!	; 0xffffffcc
   261c8:	ldr	sl, [sp, #60]	; 0x3c
   261cc:	ldrb	r3, [sl]
   261d0:	cmp	r3, #40	; 0x28
   261d4:	bne	26274 <__assert_fail@plt+0x11c1c>
   261d8:	mov	r0, fp
   261dc:	add	sl, sl, #1
   261e0:	str	sl, [sp, #60]	; 0x3c
   261e4:	bl	24bd0 <__assert_fail@plt+0x10578>
   261e8:	subs	r3, r0, #0
   261ec:	beq	26254 <__assert_fail@plt+0x11bfc>
   261f0:	ldr	r2, [sp, #60]	; 0x3c
   261f4:	mov	r0, fp
   261f8:	add	r3, r2, r3
   261fc:	str	r3, [sp, #60]	; 0x3c
   26200:	bl	24bd0 <__assert_fail@plt+0x10578>
   26204:	cmp	r0, #0
   26208:	beq	26254 <__assert_fail@plt+0x11bfc>
   2620c:	ldr	r1, [sp, #60]	; 0x3c
   26210:	add	r3, r1, r0
   26214:	str	r3, [sp, #60]	; 0x3c
   26218:	ldrb	r2, [r1, r0]
   2621c:	cmp	r2, #41	; 0x29
   26220:	bne	26254 <__assert_fail@plt+0x11bfc>
   26224:	add	r3, r3, #1
   26228:	str	r3, [sp, #60]	; 0x3c
   2622c:	b	261c8 <__assert_fail@plt+0x11b70>
   26230:	bl	14580 <gpg_err_code_from_syserror@plt>
   26234:	mov	r5, #0
   26238:	mov	fp, r5
   2623c:	str	r5, [sp, #20]
   26240:	cmp	r0, #0
   26244:	uxthne	r6, r0
   26248:	orrne	r6, r6, #67108864	; 0x4000000
   2624c:	moveq	r6, r7
   26250:	b	260a0 <__assert_fail@plt+0x11a48>
   26254:	ldr	sl, [sp, #20]
   26258:	mov	r3, r7
   2625c:	mov	r2, #0
   26260:	add	r1, r7, sl
   26264:	cmp	r3, r1
   26268:	beq	263fc <__assert_fail@plt+0x11da4>
   2626c:	strb	r2, [r3], #1
   26270:	b	26264 <__assert_fail@plt+0x11c0c>
   26274:	cmp	r3, #41	; 0x29
   26278:	str	sl, [sp, #8]
   2627c:	bne	26254 <__assert_fail@plt+0x11bfc>
   26280:	add	r3, sl, #1
   26284:	str	r3, [sp, #60]	; 0x3c
   26288:	ldrb	r3, [sl, #1]
   2628c:	cmp	r3, #40	; 0x28
   26290:	bne	26254 <__assert_fail@plt+0x11bfc>
   26294:	add	fp, sp, #112	; 0x70
   26298:	add	r3, sl, #2
   2629c:	str	r3, [fp, #-52]!	; 0xffffffcc
   262a0:	mov	r0, fp
   262a4:	bl	24bd0 <__assert_fail@plt+0x10578>
   262a8:	movw	r2, #26464	; 0x6760
   262ac:	movt	r2, #4
   262b0:	mov	r1, r0
   262b4:	mov	r0, fp
   262b8:	bl	24c38 <__assert_fail@plt+0x105e0>
   262bc:	cmp	r0, #0
   262c0:	beq	26254 <__assert_fail@plt+0x11bfc>
   262c4:	mov	r0, fp
   262c8:	bl	24bd0 <__assert_fail@plt+0x10578>
   262cc:	movw	r2, #26440	; 0x6748
   262d0:	movt	r2, #4
   262d4:	mov	r1, r0
   262d8:	mov	r0, fp
   262dc:	bl	24c38 <__assert_fail@plt+0x105e0>
   262e0:	cmp	r0, #0
   262e4:	beq	26254 <__assert_fail@plt+0x11bfc>
   262e8:	mov	r0, fp
   262ec:	bl	24bd0 <__assert_fail@plt+0x10578>
   262f0:	cmp	r0, #20
   262f4:	bne	26254 <__assert_fail@plt+0x11bfc>
   262f8:	ldr	lr, [sp, #60]	; 0x3c
   262fc:	add	ip, sp, #68	; 0x44
   26300:	add	sl, lr, #20
   26304:	str	sl, [sp, #40]	; 0x28
   26308:	ldrb	sl, [lr, #20]
   2630c:	ldr	r0, [lr]
   26310:	ldr	r1, [lr, #4]
   26314:	str	sl, [sp, #44]	; 0x2c
   26318:	ldr	sl, [sp, #40]	; 0x28
   2631c:	ldr	r2, [lr, #8]
   26320:	ldr	r3, [lr, #12]
   26324:	str	sl, [sp, #60]	; 0x3c
   26328:	ldr	sl, [sp, #44]	; 0x2c
   2632c:	stmia	ip!, {r0, r1, r2, r3}
   26330:	cmp	sl, #41	; 0x29
   26334:	ldr	r0, [lr, #16]
   26338:	str	r0, [ip]
   2633c:	bne	26254 <__assert_fail@plt+0x11bfc>
   26340:	ldr	sl, [sp, #8]
   26344:	ldr	r1, [sp, #24]
   26348:	ldr	r0, [sp, #36]	; 0x24
   2634c:	rsb	r2, r1, sl
   26350:	add	r3, r0, r2
   26354:	str	r3, [sp, #24]
   26358:	bl	13ba8 <memcpy@plt>
   2635c:	ldr	sl, [sp, #32]
   26360:	ldrb	r3, [r5, sl]
   26364:	add	r5, r5, sl
   26368:	str	r5, [sp, #60]	; 0x3c
   2636c:	cmp	r3, #40	; 0x28
   26370:	bne	264e0 <__assert_fail@plt+0x11e88>
   26374:	mov	r0, fp
   26378:	add	r1, sp, #64	; 0x40
   2637c:	mov	r3, #1
   26380:	add	r5, r5, #1
   26384:	str	r3, [sp, #64]	; 0x40
   26388:	str	r5, [sp, #60]	; 0x3c
   2638c:	bl	14668 <__assert_fail@plt+0x10>
   26390:	subs	r2, r0, #0
   26394:	bne	26460 <__assert_fail@plt+0x11e08>
   26398:	ldr	sl, [sp, #60]	; 0x3c
   2639c:	ldrb	r2, [sl]
   263a0:	cmp	r2, #40	; 0x28
   263a4:	movne	r5, #0
   263a8:	beq	26484 <__assert_fail@plt+0x11e2c>
   263ac:	mov	r0, fp
   263b0:	add	r1, sp, #64	; 0x40
   263b4:	mov	r2, #2
   263b8:	str	r2, [sp, #64]	; 0x40
   263bc:	bl	14668 <__assert_fail@plt+0x10>
   263c0:	subs	r2, r0, #0
   263c4:	bne	26464 <__assert_fail@plt+0x11e0c>
   263c8:	ldr	r2, [sp, #60]	; 0x3c
   263cc:	ldrb	r1, [r2, #-1]
   263d0:	cmp	r1, #41	; 0x29
   263d4:	bne	26420 <__assert_fail@plt+0x11dc8>
   263d8:	cmp	r5, #0
   263dc:	mov	r1, sl
   263e0:	ldr	r0, [sp, #24]
   263e4:	rsb	r2, sl, r2
   263e8:	ldrne	r3, [sp, #24]
   263ec:	moveq	fp, r5
   263f0:	rsbne	fp, r7, r3
   263f4:	bl	13ba8 <memcpy@plt>
   263f8:	b	260a0 <__assert_fail@plt+0x11a48>
   263fc:	mov	r5, #0
   26400:	mov	r0, r7
   26404:	bl	13c44 <gcry_free@plt>
   26408:	mov	r6, #83	; 0x53
   2640c:	mov	fp, r5
   26410:	movt	r6, #1024	; 0x400
   26414:	str	r5, [sp, #20]
   26418:	mov	r7, r5
   2641c:	b	260a0 <__assert_fail@plt+0x11a48>
   26420:	movw	r0, #26484	; 0x6774
   26424:	movw	r1, #26100	; 0x65f4
   26428:	movt	r0, #4
   2642c:	movt	r1, #4
   26430:	movw	r2, #759	; 0x2f7
   26434:	ldr	r3, [pc, #556]	; 26668 <__assert_fail@plt+0x12010>
   26438:	bl	14658 <__assert_fail@plt>
   2643c:	mov	r0, fp
   26440:	add	r1, sp, #64	; 0x40
   26444:	mov	r2, #1
   26448:	str	r2, [sp, #64]	; 0x40
   2644c:	bl	14668 <__assert_fail@plt+0x10>
   26450:	subs	r2, r0, #0
   26454:	ldreq	r5, [sp, #60]	; 0x3c
   26458:	rsbeq	r5, sl, r5
   2645c:	beq	264b4 <__assert_fail@plt+0x11e5c>
   26460:	mov	r5, #0
   26464:	ldr	sl, [sp, #20]
   26468:	mov	r3, r7
   2646c:	mov	r1, #0
   26470:	add	r0, r7, sl
   26474:	cmp	r3, r0
   26478:	beq	264bc <__assert_fail@plt+0x11e64>
   2647c:	strb	r1, [r3], #1
   26480:	b	26474 <__assert_fail@plt+0x11e1c>
   26484:	mov	r0, fp
   26488:	add	r2, sl, #1
   2648c:	str	r2, [sp, #60]	; 0x3c
   26490:	bl	24bd0 <__assert_fail@plt+0x10578>
   26494:	movw	r2, #26412	; 0x672c
   26498:	movt	r2, #4
   2649c:	mov	r1, r0
   264a0:	mov	r0, fp
   264a4:	bl	24c38 <__assert_fail@plt+0x105e0>
   264a8:	cmp	r0, #0
   264ac:	moveq	r5, r0
   264b0:	bne	2643c <__assert_fail@plt+0x11de4>
   264b4:	str	sl, [sp, #60]	; 0x3c
   264b8:	b	263ac <__assert_fail@plt+0x11d54>
   264bc:	mov	r0, r7
   264c0:	str	r2, [sp, #12]
   264c4:	bl	13c44 <gcry_free@plt>
   264c8:	ldr	r2, [sp, #12]
   264cc:	mov	fp, #0
   264d0:	str	fp, [sp, #20]
   264d4:	mov	r7, fp
   264d8:	mov	r6, r2
   264dc:	b	260a0 <__assert_fail@plt+0x11a48>
   264e0:	movw	r0, #26472	; 0x6768
   264e4:	movw	r1, #26100	; 0x65f4
   264e8:	movt	r0, #4
   264ec:	movt	r1, #4
   264f0:	mov	r2, #732	; 0x2dc
   264f4:	ldr	r3, [pc, #364]	; 26668 <__assert_fail@plt+0x12010>
   264f8:	bl	14658 <__assert_fail@plt>
   264fc:	mov	r0, r7
   26500:	bl	13c44 <gcry_free@plt>
   26504:	b	25ad4 <__assert_fail@plt+0x1147c>
   26508:	add	r0, sp, #64	; 0x40
   2650c:	add	r3, r7, #1
   26510:	str	r3, [sp, #64]	; 0x40
   26514:	bl	24bd0 <__assert_fail@plt+0x10578>
   26518:	subs	r1, r0, #0
   2651c:	beq	260e0 <__assert_fail@plt+0x11a88>
   26520:	movw	r2, #26452	; 0x6754
   26524:	add	r0, sp, #64	; 0x40
   26528:	movt	r2, #4
   2652c:	bl	24c38 <__assert_fail@plt+0x105e0>
   26530:	cmp	r0, #0
   26534:	bne	26544 <__assert_fail@plt+0x11eec>
   26538:	mov	r6, #104	; 0x68
   2653c:	movt	r6, #1024	; 0x400
   26540:	b	260e8 <__assert_fail@plt+0x11a90>
   26544:	ldr	r6, [sp, #64]	; 0x40
   26548:	ldrb	r3, [r6]
   2654c:	cmp	r3, #40	; 0x28
   26550:	bne	26538 <__assert_fail@plt+0x11ee0>
   26554:	add	r0, sp, #64	; 0x40
   26558:	add	r3, r6, #1
   2655c:	str	r3, [sp, #64]	; 0x40
   26560:	bl	24bd0 <__assert_fail@plt+0x10578>
   26564:	cmp	r0, #0
   26568:	ldrne	r3, [sp, #64]	; 0x40
   2656c:	addne	r3, r3, r0
   26570:	strne	r3, [sp, #64]	; 0x40
   26574:	beq	260e0 <__assert_fail@plt+0x11a88>
   26578:	ldrb	r2, [r3]
   2657c:	cmp	r2, #40	; 0x28
   26580:	bne	265dc <__assert_fail@plt+0x11f84>
   26584:	add	r0, sp, #64	; 0x40
   26588:	add	r3, r3, #1
   2658c:	str	r3, [sp, #64]	; 0x40
   26590:	bl	24bd0 <__assert_fail@plt+0x10578>
   26594:	subs	r3, r0, #0
   26598:	beq	260e0 <__assert_fail@plt+0x11a88>
   2659c:	ldr	r2, [sp, #64]	; 0x40
   265a0:	add	r0, sp, #64	; 0x40
   265a4:	add	r3, r2, r3
   265a8:	str	r3, [sp, #64]	; 0x40
   265ac:	bl	24bd0 <__assert_fail@plt+0x10578>
   265b0:	cmp	r0, #0
   265b4:	beq	260e0 <__assert_fail@plt+0x11a88>
   265b8:	ldr	r2, [sp, #64]	; 0x40
   265bc:	add	r3, r2, r0
   265c0:	str	r3, [sp, #64]	; 0x40
   265c4:	ldrb	r2, [r2, r0]
   265c8:	cmp	r2, #41	; 0x29
   265cc:	bne	260e0 <__assert_fail@plt+0x11a88>
   265d0:	add	r3, r3, #1
   265d4:	str	r3, [sp, #64]	; 0x40
   265d8:	b	26578 <__assert_fail@plt+0x11f20>
   265dc:	cmp	r2, #41	; 0x29
   265e0:	bne	260e0 <__assert_fail@plt+0x11a88>
   265e4:	add	ip, r3, #1
   265e8:	mov	r2, r6
   265ec:	rsb	r3, r6, ip
   265f0:	mov	r0, #2
   265f4:	add	r1, sp, #88	; 0x58
   265f8:	str	ip, [sp, #64]	; 0x40
   265fc:	bl	14334 <gcry_md_hash_buffer@plt>
   26600:	add	r1, sp, #88	; 0x58
   26604:	add	r0, sp, #68	; 0x44
   26608:	mov	r2, #20
   2660c:	bl	13c80 <memcmp@plt>
   26610:	subs	r6, r0, #0
   26614:	movne	r6, #106	; 0x6a
   26618:	movtne	r6, #1024	; 0x400
   2661c:	bne	260e8 <__assert_fail@plt+0x11a90>
   26620:	cmp	r5, #0
   26624:	beq	26644 <__assert_fail@plt+0x11fec>
   26628:	ldr	sl, [sp, #20]
   2662c:	add	r1, r5, fp
   26630:	add	r1, r7, r1
   26634:	add	r0, r7, fp
   26638:	rsb	r2, fp, sl
   2663c:	rsb	r2, r5, r2
   26640:	bl	13b24 <memmove@plt>
   26644:	mov	r1, #0
   26648:	str	r7, [r8]
   2664c:	mov	r0, r7
   26650:	mov	r2, r1
   26654:	mov	r3, r1
   26658:	bl	14604 <gcry_sexp_canon_len@plt>
   2665c:	str	r0, [r9]
   26660:	b	25ad4 <__assert_fail@plt+0x1147c>
   26664:	andeq	r6, r4, ip, lsl r5
   26668:	andeq	r6, r4, r8, asr #11
   2666c:	push	{r4, lr}
   26670:	ldrb	r3, [r0]
   26674:	cmp	r3, #40	; 0x28
   26678:	beq	26684 <__assert_fail@plt+0x1202c>
   2667c:	mov	r0, #0
   26680:	pop	{r4, pc}
   26684:	ldrb	r1, [r0, #1]
   26688:	sub	r3, r1, #48	; 0x30
   2668c:	uxtb	r2, r3
   26690:	cmp	r2, #9
   26694:	bhi	2667c <__assert_fail@plt+0x12024>
   26698:	add	r0, r0, #2
   2669c:	mov	r2, #0
   266a0:	add	r2, r2, r2, lsl #2
   266a4:	mov	r4, r0
   266a8:	ldrb	r1, [r0], #1
   266ac:	add	r2, r3, r2, lsl #1
   266b0:	sub	r3, r1, #48	; 0x30
   266b4:	uxtb	ip, r3
   266b8:	cmp	ip, #9
   266bc:	bls	266a0 <__assert_fail@plt+0x12048>
   266c0:	cmp	r2, #0
   266c4:	beq	26700 <__assert_fail@plt+0x120a8>
   266c8:	cmp	r1, #58	; 0x3a
   266cc:	bne	2667c <__assert_fail@plt+0x12024>
   266d0:	cmp	r2, #21
   266d4:	beq	26708 <__assert_fail@plt+0x120b0>
   266d8:	cmp	r2, #20
   266dc:	beq	26724 <__assert_fail@plt+0x120cc>
   266e0:	cmp	r2, #11
   266e4:	bne	2667c <__assert_fail@plt+0x12024>
   266e8:	movw	r1, #26452	; 0x6754
   266ec:	movt	r1, #4
   266f0:	bl	13c80 <memcmp@plt>
   266f4:	rsbs	r0, r0, #1
   266f8:	movcc	r0, #0
   266fc:	pop	{r4, pc}
   26700:	mov	r0, r2
   26704:	pop	{r4, pc}
   26708:	movw	r1, #19260	; 0x4b3c
   2670c:	movt	r1, #4
   26710:	bl	13c80 <memcmp@plt>
   26714:	cmp	r0, #0
   26718:	moveq	r0, #2
   2671c:	movne	r0, #0
   26720:	pop	{r4, pc}
   26724:	movw	r1, #26504	; 0x6788
   26728:	movt	r1, #4
   2672c:	bl	13c80 <memcmp@plt>
   26730:	cmp	r0, #0
   26734:	moveq	r0, #3
   26738:	movne	r0, #0
   2673c:	pop	{r4, pc}
   26740:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   26744:	movw	r5, #47296	; 0xb8c0
   26748:	movt	r5, #5
   2674c:	ldrb	r4, [r0]
   26750:	sub	sp, sp, #24
   26754:	mov	sl, r0
   26758:	ldr	r3, [r5]
   2675c:	cmp	r4, #0
   26760:	mov	r7, r1
   26764:	str	r3, [sp, #20]
   26768:	beq	267a0 <__assert_fail@plt+0x12148>
   2676c:	ldrb	r4, [r0, #1]
   26770:	cmp	r4, #0
   26774:	beq	267a0 <__assert_fail@plt+0x12148>
   26778:	mov	r3, r0
   2677c:	mov	r4, #0
   26780:	b	26790 <__assert_fail@plt+0x12138>
   26784:	ldrb	r2, [r3, #1]
   26788:	cmp	r2, #0
   2678c:	beq	267a0 <__assert_fail@plt+0x12148>
   26790:	ldrb	r2, [r3, #2]!
   26794:	add	r4, r4, #1
   26798:	cmp	r2, #0
   2679c:	bne	26784 <__assert_fail@plt+0x1212c>
   267a0:	mov	r0, r7
   267a4:	bl	14094 <strlen@plt>
   267a8:	add	r0, r4, r0
   267ac:	add	r0, r0, #43	; 0x2b
   267b0:	bl	139c8 <gcry_malloc@plt>
   267b4:	subs	r6, r0, #0
   267b8:	beq	26914 <__assert_fail@plt+0x122bc>
   267bc:	add	r9, sp, #24
   267c0:	movw	ip, #52429	; 0xcccd
   267c4:	add	r0, r6, #1
   267c8:	movt	ip, #52428	; 0xcccc
   267cc:	mov	r3, #58	; 0x3a
   267d0:	mov	r8, sp
   267d4:	strb	r3, [r9, #-6]!
   267d8:	mov	r1, r9
   267dc:	mov	r2, #40	; 0x28
   267e0:	mov	r3, #0
   267e4:	strb	r2, [r6]
   267e8:	strb	r3, [sp, #19]
   267ec:	umull	r3, r2, ip, r4
   267f0:	sub	r1, r1, #1
   267f4:	lsr	r2, r2, #3
   267f8:	add	r3, r2, r2, lsl #2
   267fc:	sub	r3, r4, r3, lsl #1
   26800:	mov	r4, r2
   26804:	add	r3, r3, #48	; 0x30
   26808:	strb	r3, [r1]
   2680c:	cmp	r2, #0
   26810:	cmpne	r8, r1
   26814:	bcc	267ec <__assert_fail@plt+0x12194>
   26818:	bl	13cb0 <stpcpy@plt>
   2681c:	ldrb	r2, [sl]
   26820:	cmp	r2, #0
   26824:	mov	r4, r0
   26828:	bne	2688c <__assert_fail@plt+0x12234>
   2682c:	b	26898 <__assert_fail@plt+0x12240>
   26830:	cmp	r2, #57	; 0x39
   26834:	add	r4, r4, #1
   26838:	lslls	r2, r2, #4
   2683c:	andls	r3, r2, #240	; 0xf0
   26840:	bls	26858 <__assert_fail@plt+0x12200>
   26844:	cmp	r2, #70	; 0x46
   26848:	subls	r3, r2, #55	; 0x37
   2684c:	subhi	r3, r2, #87	; 0x57
   26850:	lsl	r3, r3, #4
   26854:	uxtb	r3, r3
   26858:	cmp	ip, #57	; 0x39
   2685c:	subls	r2, ip, #48	; 0x30
   26860:	uxtbls	r2, r2
   26864:	bls	26878 <__assert_fail@plt+0x12220>
   26868:	cmp	ip, #70	; 0x46
   2686c:	subls	r2, ip, #55	; 0x37
   26870:	subhi	r2, ip, #87	; 0x57
   26874:	uxtb	r2, r2
   26878:	add	r2, r2, r3
   2687c:	strb	r2, [r4, #-1]
   26880:	ldrb	r2, [sl, #2]!
   26884:	cmp	r2, #0
   26888:	beq	26898 <__assert_fail@plt+0x12240>
   2688c:	ldrb	ip, [sl, #1]
   26890:	cmp	ip, #0
   26894:	bne	26830 <__assert_fail@plt+0x121d8>
   26898:	mov	r0, r7
   2689c:	bl	14094 <strlen@plt>
   268a0:	movw	ip, #52429	; 0xcccd
   268a4:	movt	ip, #52428	; 0xcccc
   268a8:	mov	r3, r9
   268ac:	mov	r1, #58	; 0x3a
   268b0:	strb	r1, [sp, #18]
   268b4:	mov	r2, r0
   268b8:	mov	r0, #0
   268bc:	strb	r0, [sp, #19]
   268c0:	umull	r0, r1, ip, r2
   268c4:	sub	r3, r3, #1
   268c8:	lsr	r1, r1, #3
   268cc:	add	r0, r1, r1, lsl #2
   268d0:	sub	r0, r2, r0, lsl #1
   268d4:	mov	r2, r1
   268d8:	add	r1, r0, #48	; 0x30
   268dc:	strb	r1, [r3]
   268e0:	cmp	r2, #0
   268e4:	cmpne	r8, r3
   268e8:	movcs	r9, #0
   268ec:	movcc	r9, #1
   268f0:	bcc	268c0 <__assert_fail@plt+0x12268>
   268f4:	mov	r1, r3
   268f8:	mov	r0, r4
   268fc:	bl	13cb0 <stpcpy@plt>
   26900:	mov	r1, r7
   26904:	bl	13cb0 <stpcpy@plt>
   26908:	mov	r3, #41	; 0x29
   2690c:	strb	r9, [r0, #1]
   26910:	strb	r3, [r0]
   26914:	ldr	r2, [sp, #20]
   26918:	mov	r0, r6
   2691c:	ldr	r3, [r5]
   26920:	cmp	r2, r3
   26924:	bne	26930 <__assert_fail@plt+0x122d8>
   26928:	add	sp, sp, #24
   2692c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   26930:	bl	13cec <__stack_chk_fail@plt>
   26934:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26938:	movw	r4, #47296	; 0xb8c0
   2693c:	movt	r4, #5
   26940:	sub	sp, sp, #36	; 0x24
   26944:	mov	r8, r1
   26948:	mov	r1, #0
   2694c:	ldr	ip, [r4]
   26950:	mov	r3, r1
   26954:	mov	fp, r2
   26958:	mov	r2, r1
   2695c:	mov	r9, r0
   26960:	str	ip, [sp, #28]
   26964:	bl	14604 <gcry_sexp_canon_len@plt>
   26968:	mov	r1, #0
   2696c:	mov	r3, r1
   26970:	mov	r2, r1
   26974:	mov	r6, r0
   26978:	mov	r0, r8
   2697c:	bl	14604 <gcry_sexp_canon_len@plt>
   26980:	cmp	r6, #0
   26984:	cmpne	r0, #0
   26988:	mov	r5, r0
   2698c:	moveq	r7, #55	; 0x37
   26990:	movne	r3, #0
   26994:	moveq	r3, #1
   26998:	movteq	r7, #1024	; 0x400
   2699c:	bne	269bc <__assert_fail@plt+0x12364>
   269a0:	ldr	r2, [sp, #28]
   269a4:	mov	r0, r7
   269a8:	ldr	r3, [r4]
   269ac:	cmp	r2, r3
   269b0:	bne	26c18 <__assert_fail@plt+0x125c0>
   269b4:	add	sp, sp, #36	; 0x24
   269b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   269bc:	ldrb	r2, [r9]
   269c0:	str	r9, [sp, #24]
   269c4:	cmp	r2, #40	; 0x28
   269c8:	beq	269d8 <__assert_fail@plt+0x12380>
   269cc:	mov	r7, #83	; 0x53
   269d0:	movt	r7, #1024	; 0x400
   269d4:	b	269a0 <__assert_fail@plt+0x12348>
   269d8:	ldrb	r0, [r9, #1]
   269dc:	add	r2, r9, #1
   269e0:	str	r2, [sp, #24]
   269e4:	sub	r2, r0, #48	; 0x30
   269e8:	uxtb	r1, r2
   269ec:	cmp	r1, #9
   269f0:	bhi	269cc <__assert_fail@plt+0x12374>
   269f4:	add	r1, r9, #2
   269f8:	add	r3, r3, r3, lsl #2
   269fc:	mov	sl, r1
   26a00:	ldrb	r0, [r1], #1
   26a04:	add	r3, r2, r3, lsl #1
   26a08:	sub	r2, r0, #48	; 0x30
   26a0c:	uxtb	ip, r2
   26a10:	cmp	ip, #9
   26a14:	bls	269f8 <__assert_fail@plt+0x123a0>
   26a18:	cmp	r3, #0
   26a1c:	beq	269cc <__assert_fail@plt+0x12374>
   26a20:	cmp	r0, #58	; 0x3a
   26a24:	bne	269cc <__assert_fail@plt+0x12374>
   26a28:	cmp	r3, #10
   26a2c:	mov	r0, r1
   26a30:	str	r1, [sp, #24]
   26a34:	beq	26a44 <__assert_fail@plt+0x123ec>
   26a38:	mov	r7, #104	; 0x68
   26a3c:	movt	r7, #1024	; 0x400
   26a40:	b	269a0 <__assert_fail@plt+0x12348>
   26a44:	mov	r2, r3
   26a48:	movw	r1, #19248	; 0x4b30
   26a4c:	movt	r1, #4
   26a50:	bl	13c80 <memcmp@plt>
   26a54:	subs	r7, r0, #0
   26a58:	bne	26a38 <__assert_fail@plt+0x123e0>
   26a5c:	ldrb	r3, [sl, #11]
   26a60:	add	r2, sl, #11
   26a64:	str	r2, [sp, #24]
   26a68:	cmp	r3, #40	; 0x28
   26a6c:	bne	26a38 <__assert_fail@plt+0x123e0>
   26a70:	add	r3, sp, #32
   26a74:	add	sl, sl, #12
   26a78:	str	sl, [r3, #-8]!
   26a7c:	mov	r0, r3
   26a80:	str	r3, [sp, #8]
   26a84:	bl	24bd0 <__assert_fail@plt+0x10578>
   26a88:	ldr	r3, [sp, #8]
   26a8c:	cmp	r0, #0
   26a90:	beq	269cc <__assert_fail@plt+0x12374>
   26a94:	ldr	sl, [sp, #24]
   26a98:	mov	ip, r4
   26a9c:	mov	r4, r3
   26aa0:	add	sl, sl, r0
   26aa4:	str	sl, [sp, #24]
   26aa8:	b	26b14 <__assert_fail@plt+0x124bc>
   26aac:	cmp	r2, #40	; 0x28
   26ab0:	bne	26c1c <__assert_fail@plt+0x125c4>
   26ab4:	mov	r0, r4
   26ab8:	str	ip, [sp, #8]
   26abc:	add	sl, sl, #1
   26ac0:	str	sl, [sp, #24]
   26ac4:	bl	24bd0 <__assert_fail@plt+0x10578>
   26ac8:	ldr	ip, [sp, #8]
   26acc:	subs	r2, r0, #0
   26ad0:	beq	26c1c <__assert_fail@plt+0x125c4>
   26ad4:	ldr	r1, [sp, #24]
   26ad8:	mov	r0, r4
   26adc:	add	r2, r1, r2
   26ae0:	str	r2, [sp, #24]
   26ae4:	bl	24bd0 <__assert_fail@plt+0x10578>
   26ae8:	ldr	ip, [sp, #8]
   26aec:	cmp	r0, #0
   26af0:	beq	26c1c <__assert_fail@plt+0x125c4>
   26af4:	ldr	r2, [sp, #24]
   26af8:	add	sl, r2, r0
   26afc:	str	sl, [sp, #24]
   26b00:	ldrb	r2, [r2, r0]
   26b04:	cmp	r2, #41	; 0x29
   26b08:	bne	26c1c <__assert_fail@plt+0x125c4>
   26b0c:	add	sl, sl, #1
   26b10:	str	sl, [sp, #24]
   26b14:	ldrb	r2, [sl]
   26b18:	cmp	r2, #41	; 0x29
   26b1c:	bne	26aac <__assert_fail@plt+0x12454>
   26b20:	add	r0, r6, r5
   26b24:	mov	r4, ip
   26b28:	add	r0, r0, #32
   26b2c:	add	r3, sl, #1
   26b30:	str	r2, [sp, #20]
   26b34:	str	r3, [sp, #24]
   26b38:	bl	139c8 <gcry_malloc@plt>
   26b3c:	cmp	r0, #0
   26b40:	mov	ip, r0
   26b44:	str	r0, [fp]
   26b48:	beq	26c24 <__assert_fail@plt+0x125cc>
   26b4c:	movw	lr, #26500	; 0x6784
   26b50:	movt	lr, #4
   26b54:	add	fp, r9, #14
   26b58:	str	fp, [sp, #4]
   26b5c:	ldm	lr!, {r0, r1, r2, r3}
   26b60:	rsb	fp, fp, sl
   26b64:	str	fp, [sp, #16]
   26b68:	str	r0, [ip]
   26b6c:	str	r1, [ip, #4]
   26b70:	ldm	lr!, {r0, r1}
   26b74:	str	r3, [ip, #12]
   26b78:	str	r2, [ip, #8]
   26b7c:	mov	r2, fp
   26b80:	ldrb	r3, [lr]
   26b84:	str	r0, [ip, #16]
   26b88:	str	r1, [ip, #20]
   26b8c:	strb	r3, [ip, #24]!
   26b90:	mov	r0, ip
   26b94:	ldr	r1, [sp, #4]
   26b98:	str	ip, [sp, #12]
   26b9c:	bl	13ba8 <memcpy@plt>
   26ba0:	movw	ip, #26528	; 0x67a0
   26ba4:	movt	ip, #4
   26ba8:	ldr	lr, [sp, #12]
   26bac:	ldm	ip!, {r0, r1, r2, r3}
   26bb0:	add	lr, lr, fp
   26bb4:	str	lr, [sp, #4]
   26bb8:	ldr	lr, [sp, #12]
   26bbc:	str	r0, [lr, fp]
   26bc0:	ldr	fp, [sp, #4]
   26bc4:	ldrh	r0, [ip]
   26bc8:	ldrb	ip, [ip, #2]
   26bcc:	str	r1, [fp, #4]
   26bd0:	mov	r1, r8
   26bd4:	str	r2, [fp, #8]
   26bd8:	mov	r2, r5
   26bdc:	strh	r0, [fp, #16]
   26be0:	str	r3, [fp, #12]
   26be4:	strb	ip, [fp, #18]!
   26be8:	mov	r0, fp
   26bec:	str	fp, [sp]
   26bf0:	bl	13ba8 <memcpy@plt>
   26bf4:	ldr	ip, [sp, #20]
   26bf8:	add	r0, fp, r5
   26bfc:	rsb	r2, sl, r9
   26c00:	mov	r1, sl
   26c04:	add	r2, r2, r6
   26c08:	add	r0, r0, #1
   26c0c:	strb	ip, [fp, r5]
   26c10:	bl	13ba8 <memcpy@plt>
   26c14:	b	269a0 <__assert_fail@plt+0x12348>
   26c18:	bl	13cec <__stack_chk_fail@plt>
   26c1c:	mov	r4, ip
   26c20:	b	269cc <__assert_fail@plt+0x12374>
   26c24:	bl	14580 <gpg_err_code_from_syserror@plt>
   26c28:	cmp	r0, #0
   26c2c:	uxthne	r0, r0
   26c30:	orrne	r7, r0, #67108864	; 0x4000000
   26c34:	moveq	r7, r0
   26c38:	b	269a0 <__assert_fail@plt+0x12348>
   26c3c:	push	{r4, r5, r6, r7, r8, lr}
   26c40:	movw	r4, #47296	; 0xb8c0
   26c44:	movt	r4, #5
   26c48:	ldrb	r3, [r0]
   26c4c:	sub	sp, sp, #8
   26c50:	mov	r6, r1
   26c54:	ldr	r2, [r4]
   26c58:	cmp	r3, #40	; 0x28
   26c5c:	str	r0, [sp]
   26c60:	str	r2, [sp, #4]
   26c64:	beq	26c8c <__assert_fail@plt+0x12634>
   26c68:	mov	r5, #83	; 0x53
   26c6c:	movt	r5, #1024	; 0x400
   26c70:	ldr	r2, [sp, #4]
   26c74:	mov	r0, r5
   26c78:	ldr	r3, [r4]
   26c7c:	cmp	r2, r3
   26c80:	bne	26e18 <__assert_fail@plt+0x127c0>
   26c84:	add	sp, sp, #8
   26c88:	pop	{r4, r5, r6, r7, r8, pc}
   26c8c:	ldrb	ip, [r0, #1]
   26c90:	add	r3, r0, #1
   26c94:	str	r3, [sp]
   26c98:	sub	r3, ip, #48	; 0x30
   26c9c:	uxtb	r2, r3
   26ca0:	cmp	r2, #9
   26ca4:	bhi	26c68 <__assert_fail@plt+0x12610>
   26ca8:	add	r0, r0, #2
   26cac:	mov	r2, #0
   26cb0:	add	r2, r2, r2, lsl #2
   26cb4:	mov	r7, r0
   26cb8:	ldrb	ip, [r0], #1
   26cbc:	add	r2, r3, r2, lsl #1
   26cc0:	sub	r3, ip, #48	; 0x30
   26cc4:	uxtb	r1, r3
   26cc8:	cmp	r1, #9
   26ccc:	bls	26cb0 <__assert_fail@plt+0x12658>
   26cd0:	cmp	r2, #0
   26cd4:	beq	26c68 <__assert_fail@plt+0x12610>
   26cd8:	cmp	ip, #58	; 0x3a
   26cdc:	bne	26c68 <__assert_fail@plt+0x12610>
   26ce0:	cmp	r2, #20
   26ce4:	str	r0, [sp]
   26ce8:	beq	26cf8 <__assert_fail@plt+0x126a0>
   26cec:	mov	r5, #104	; 0x68
   26cf0:	movt	r5, #1024	; 0x400
   26cf4:	b	26c70 <__assert_fail@plt+0x12618>
   26cf8:	movw	r1, #26504	; 0x6788
   26cfc:	movt	r1, #4
   26d00:	bl	13c80 <memcmp@plt>
   26d04:	subs	r5, r0, #0
   26d08:	bne	26cec <__assert_fail@plt+0x12694>
   26d0c:	ldrb	r3, [r7, #21]
   26d10:	add	r2, r7, #21
   26d14:	str	r2, [sp]
   26d18:	cmp	r3, #40	; 0x28
   26d1c:	bne	26cec <__assert_fail@plt+0x12694>
   26d20:	add	r8, sp, #8
   26d24:	mov	r0, sp
   26d28:	add	r7, r7, #22
   26d2c:	str	r7, [r8, #-8]!
   26d30:	bl	24bd0 <__assert_fail@plt+0x10578>
   26d34:	cmp	r0, #0
   26d38:	beq	26c68 <__assert_fail@plt+0x12610>
   26d3c:	ldr	r3, [sp]
   26d40:	add	r3, r3, r0
   26d44:	str	r3, [sp]
   26d48:	b	26d88 <__assert_fail@plt+0x12730>
   26d4c:	ldr	r3, [sp]
   26d50:	mov	r0, sp
   26d54:	add	r7, r3, r7
   26d58:	str	r7, [sp]
   26d5c:	bl	24bd0 <__assert_fail@plt+0x10578>
   26d60:	cmp	r0, #0
   26d64:	beq	26c68 <__assert_fail@plt+0x12610>
   26d68:	ldr	r2, [sp]
   26d6c:	add	r3, r2, r0
   26d70:	str	r3, [sp]
   26d74:	ldrb	r2, [r2, r0]
   26d78:	cmp	r2, #41	; 0x29
   26d7c:	bne	26c68 <__assert_fail@plt+0x12610>
   26d80:	add	r3, r3, #1
   26d84:	str	r3, [sp]
   26d88:	ldrb	r2, [r3]
   26d8c:	cmp	r2, #41	; 0x29
   26d90:	beq	26cec <__assert_fail@plt+0x12694>
   26d94:	cmp	r2, #40	; 0x28
   26d98:	bne	26c68 <__assert_fail@plt+0x12610>
   26d9c:	mov	r0, sp
   26da0:	add	r3, r3, #1
   26da4:	str	r3, [sp]
   26da8:	bl	24bd0 <__assert_fail@plt+0x10578>
   26dac:	subs	r7, r0, #0
   26db0:	beq	26c68 <__assert_fail@plt+0x12610>
   26db4:	movw	r2, #26548	; 0x67b4
   26db8:	mov	r0, sp
   26dbc:	movt	r2, #4
   26dc0:	mov	r1, r7
   26dc4:	bl	24c38 <__assert_fail@plt+0x105e0>
   26dc8:	cmp	r0, #0
   26dcc:	beq	26d4c <__assert_fail@plt+0x126f4>
   26dd0:	mov	r0, sp
   26dd4:	bl	24bd0 <__assert_fail@plt+0x10578>
   26dd8:	subs	r1, r0, #0
   26ddc:	beq	26c68 <__assert_fail@plt+0x12610>
   26de0:	mov	r0, sp
   26de4:	movw	r2, #26560	; 0x67c0
   26de8:	movt	r2, #4
   26dec:	bl	24c38 <__assert_fail@plt+0x105e0>
   26df0:	cmp	r0, #0
   26df4:	moveq	r5, #121	; 0x79
   26df8:	movteq	r5, #1024	; 0x400
   26dfc:	beq	26c70 <__assert_fail@plt+0x12618>
   26e00:	ldr	r3, [sp]
   26e04:	ldrb	r2, [r3]
   26e08:	cmp	r2, #40	; 0x28
   26e0c:	streq	r3, [r6]
   26e10:	bne	26c68 <__assert_fail@plt+0x12610>
   26e14:	b	26c70 <__assert_fail@plt+0x12618>
   26e18:	bl	13cec <__stack_chk_fail@plt>
   26e1c:	push	{r4, r5, r6, r7, r8, lr}
   26e20:	subs	r6, r1, #0
   26e24:	mov	r4, r2
   26e28:	movne	r3, #0
   26e2c:	strne	r3, [r6]
   26e30:	cmp	r2, #0
   26e34:	movne	r3, #0
   26e38:	strne	r3, [r2]
   26e3c:	ldrb	r3, [r0]
   26e40:	cmp	r3, #40	; 0x28
   26e44:	beq	26e54 <__assert_fail@plt+0x127fc>
   26e48:	mov	r0, #83	; 0x53
   26e4c:	movt	r0, #1024	; 0x400
   26e50:	pop	{r4, r5, r6, r7, r8, pc}
   26e54:	ldrb	r2, [r0, #1]
   26e58:	sub	r3, r2, #48	; 0x30
   26e5c:	uxtb	r2, r3
   26e60:	cmp	r2, #9
   26e64:	bhi	26e48 <__assert_fail@plt+0x127f0>
   26e68:	add	r0, r0, #2
   26e6c:	mov	r5, #0
   26e70:	add	r5, r5, r5, lsl #2
   26e74:	ldrb	r2, [r0], #1
   26e78:	add	r5, r3, r5, lsl #1
   26e7c:	sub	r3, r2, #48	; 0x30
   26e80:	uxtb	r1, r3
   26e84:	cmp	r1, #9
   26e88:	bls	26e70 <__assert_fail@plt+0x12818>
   26e8c:	cmp	r5, #0
   26e90:	beq	26e48 <__assert_fail@plt+0x127f0>
   26e94:	cmp	r2, #58	; 0x3a
   26e98:	bne	26e48 <__assert_fail@plt+0x127f0>
   26e9c:	cmp	r6, #0
   26ea0:	mov	r7, r0
   26ea4:	beq	26ec0 <__assert_fail@plt+0x12868>
   26ea8:	mov	r1, r5
   26eac:	mov	r2, #0
   26eb0:	bl	2e26c <__assert_fail@plt+0x19c14>
   26eb4:	cmp	r0, #0
   26eb8:	str	r0, [r6]
   26ebc:	beq	26f88 <__assert_fail@plt+0x12930>
   26ec0:	ldrb	r2, [r7, r5]
   26ec4:	add	r5, r7, r5
   26ec8:	sub	r3, r2, #48	; 0x30
   26ecc:	uxtb	r2, r3
   26ed0:	cmp	r2, #9
   26ed4:	bhi	26f0c <__assert_fail@plt+0x128b4>
   26ed8:	add	r5, r5, #1
   26edc:	mov	r7, #0
   26ee0:	add	r7, r7, r7, lsl #2
   26ee4:	ldrb	r2, [r5], #1
   26ee8:	add	r7, r3, r7, lsl #1
   26eec:	sub	r3, r2, #48	; 0x30
   26ef0:	uxtb	r1, r3
   26ef4:	cmp	r1, #9
   26ef8:	bls	26ee0 <__assert_fail@plt+0x12888>
   26efc:	cmp	r7, #0
   26f00:	beq	26f0c <__assert_fail@plt+0x128b4>
   26f04:	cmp	r2, #58	; 0x3a
   26f08:	beq	26f30 <__assert_fail@plt+0x128d8>
   26f0c:	cmp	r6, #0
   26f10:	beq	26e48 <__assert_fail@plt+0x127f0>
   26f14:	ldr	r0, [r6]
   26f18:	bl	13c44 <gcry_free@plt>
   26f1c:	mov	r3, #0
   26f20:	mov	r0, #83	; 0x53
   26f24:	str	r3, [r6]
   26f28:	movt	r0, #1024	; 0x400
   26f2c:	pop	{r4, r5, r6, r7, r8, pc}
   26f30:	cmp	r4, #0
   26f34:	mov	r8, r5
   26f38:	beq	26fa0 <__assert_fail@plt+0x12948>
   26f3c:	add	r0, r7, #1
   26f40:	bl	139c8 <gcry_malloc@plt>
   26f44:	cmp	r0, #0
   26f48:	mov	r5, r0
   26f4c:	str	r0, [r4]
   26f50:	beq	26f74 <__assert_fail@plt+0x1291c>
   26f54:	mov	r2, r7
   26f58:	mov	r1, r8
   26f5c:	bl	13ba8 <memcpy@plt>
   26f60:	ldr	r2, [r4]
   26f64:	mov	r3, #0
   26f68:	mov	r0, r3
   26f6c:	strb	r3, [r2, r7]
   26f70:	pop	{r4, r5, r6, r7, r8, pc}
   26f74:	cmp	r6, #0
   26f78:	beq	26f88 <__assert_fail@plt+0x12930>
   26f7c:	ldr	r0, [r6]
   26f80:	bl	13c44 <gcry_free@plt>
   26f84:	str	r5, [r6]
   26f88:	bl	14580 <gpg_err_code_from_syserror@plt>
   26f8c:	cmp	r0, #0
   26f90:	beq	26fa0 <__assert_fail@plt+0x12948>
   26f94:	uxth	r0, r0
   26f98:	orr	r0, r0, #67108864	; 0x4000000
   26f9c:	pop	{r4, r5, r6, r7, r8, pc}
   26fa0:	mov	r0, #0
   26fa4:	pop	{r4, r5, r6, r7, r8, pc}
   26fa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26fac:	sub	sp, sp, #308	; 0x134
   26fb0:	movw	ip, #47296	; 0xb8c0
   26fb4:	movt	ip, #5
   26fb8:	ldr	r4, [sp, #344]	; 0x158
   26fbc:	mov	r7, r0
   26fc0:	str	ip, [sp, #12]
   26fc4:	str	r2, [sp, #16]
   26fc8:	str	r4, [sp, #24]
   26fcc:	ldr	r4, [sp, #12]
   26fd0:	ldr	ip, [r2]
   26fd4:	str	r3, [sp, #20]
   26fd8:	ldr	lr, [r4]
   26fdc:	ldr	r4, [sp, #24]
   26fe0:	ldr	r2, [r3]
   26fe4:	str	r1, [sp, #28]
   26fe8:	movw	r1, #18760	; 0x4948
   26fec:	ldr	r3, [r4]
   26ff0:	movt	r1, #4
   26ff4:	str	lr, [sp, #300]	; 0x12c
   26ff8:	str	ip, [sp, #32]
   26ffc:	str	r2, [sp, #40]	; 0x28
   27000:	str	r3, [sp, #36]	; 0x24
   27004:	bl	14490 <fopen64@plt>
   27008:	subs	r4, r0, #0
   2700c:	beq	2760c <__assert_fail@plt+0x12fb4>
   27010:	mov	r5, #0
   27014:	mov	r6, r5
   27018:	add	r0, sp, #44	; 0x2c
   2701c:	mov	r1, #255	; 0xff
   27020:	mov	r2, r4
   27024:	bl	13b54 <fgets@plt>
   27028:	cmp	r0, #0
   2702c:	beq	27170 <__assert_fail@plt+0x12b18>
   27030:	ldrb	r3, [sp, #44]	; 0x2c
   27034:	add	r5, r5, #1
   27038:	cmp	r3, #0
   2703c:	beq	2706c <__assert_fail@plt+0x12a14>
   27040:	add	r0, sp, #44	; 0x2c
   27044:	bl	14094 <strlen@plt>
   27048:	add	ip, sp, #304	; 0x130
   2704c:	sub	r0, r0, #1
   27050:	add	r3, ip, r0
   27054:	ldrb	r2, [r3, #-260]	; 0xfffffefc
   27058:	cmp	r2, #10
   2705c:	bne	2706c <__assert_fail@plt+0x12a14>
   27060:	b	270d4 <__assert_fail@plt+0x12a7c>
   27064:	cmp	r0, #10
   27068:	beq	2707c <__assert_fail@plt+0x12a24>
   2706c:	mov	r0, r4
   27070:	bl	13c5c <_IO_getc@plt>
   27074:	cmn	r0, #1
   27078:	bne	27064 <__assert_fail@plt+0x12a0c>
   2707c:	ldrb	r6, [sp, #44]	; 0x2c
   27080:	mov	r2, #75	; 0x4b
   27084:	movt	r2, #1024	; 0x400
   27088:	mov	r3, #97	; 0x61
   2708c:	cmp	r6, #0
   27090:	movt	r3, #1024	; 0x400
   27094:	movw	r1, #27324	; 0x6abc
   27098:	mov	r0, #0
   2709c:	moveq	r6, r2
   270a0:	movt	r1, #4
   270a4:	mov	r2, #5
   270a8:	movne	r6, r3
   270ac:	bl	13cc8 <dcgettext@plt>
   270b0:	mov	r8, r0
   270b4:	mov	r0, r6
   270b8:	bl	13a64 <gpg_strerror@plt>
   270bc:	mov	r1, r7
   270c0:	mov	r2, r5
   270c4:	mov	r3, r0
   270c8:	mov	r0, r8
   270cc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   270d0:	b	27018 <__assert_fail@plt+0x129c0>
   270d4:	mov	r2, #0
   270d8:	strb	r2, [r3, #-260]	; 0xfffffefc
   270dc:	ldrb	r3, [sp, #44]	; 0x2c
   270e0:	cmp	r3, #9
   270e4:	cmpne	r3, #32
   270e8:	bne	274d4 <__assert_fail@plt+0x12e7c>
   270ec:	add	r2, sp, #45	; 0x2d
   270f0:	mov	r9, r2
   270f4:	ldrb	r3, [r2], #1
   270f8:	cmp	r3, #32
   270fc:	cmpne	r3, #9
   27100:	beq	270f0 <__assert_fail@plt+0x12a98>
   27104:	cmp	r3, #0
   27108:	cmpne	r3, #35	; 0x23
   2710c:	beq	27018 <__assert_fail@plt+0x129c0>
   27110:	movw	r1, #27348	; 0x6ad4
   27114:	mov	r0, r9
   27118:	movt	r1, #4
   2711c:	mov	r2, #15
   27120:	bl	145bc <strncmp@plt>
   27124:	cmp	r0, #0
   27128:	bne	271cc <__assert_fail@plt+0x12b74>
   2712c:	ldrb	r3, [r9, #15]
   27130:	tst	r3, #223	; 0xdf
   27134:	bne	271c4 <__assert_fail@plt+0x12b6c>
   27138:	ldr	ip, [sp, #28]
   2713c:	cmp	ip, #0
   27140:	bne	2739c <__assert_fail@plt+0x12d44>
   27144:	mov	r0, ip
   27148:	mov	r2, #5
   2714c:	movw	r1, #27364	; 0x6ae4
   27150:	movt	r1, #4
   27154:	bl	13cc8 <dcgettext@plt>
   27158:	movw	r1, #27348	; 0x6ad4
   2715c:	mov	r2, r7
   27160:	movt	r1, #4
   27164:	mov	r3, r5
   27168:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2716c:	b	27018 <__assert_fail@plt+0x129c0>
   27170:	cmp	r6, #0
   27174:	beq	274b0 <__assert_fail@plt+0x12e58>
   27178:	mov	r0, r4
   2717c:	bl	142c8 <fclose@plt>
   27180:	ldr	r3, [sp, #32]
   27184:	mov	r0, r6
   27188:	ldr	r4, [sp, #16]
   2718c:	ldr	ip, [sp, #300]	; 0x12c
   27190:	ldr	r2, [sp, #40]	; 0x28
   27194:	str	r3, [r4]
   27198:	ldr	r4, [sp, #12]
   2719c:	ldr	r3, [sp, #36]	; 0x24
   271a0:	ldr	r1, [r4]
   271a4:	ldr	r4, [sp, #24]
   271a8:	cmp	ip, r1
   271ac:	ldr	ip, [sp, #20]
   271b0:	str	r2, [ip]
   271b4:	str	r3, [r4]
   271b8:	bne	27694 <__assert_fail@plt+0x1303c>
   271bc:	add	sp, sp, #308	; 0x134
   271c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   271c4:	cmp	r3, #9
   271c8:	beq	27138 <__assert_fail@plt+0x12ae0>
   271cc:	ldr	r0, [sp, #36]	; 0x24
   271d0:	ldr	r3, [sp, #40]	; 0x28
   271d4:	cmp	r0, r3
   271d8:	beq	274dc <__assert_fail@plt+0x12e84>
   271dc:	ldr	r1, [sp, #32]
   271e0:	add	r0, r0, r0, lsl #1
   271e4:	mov	r3, #0
   271e8:	add	r8, r1, r0, lsl #3
   271ec:	strb	r3, [r1, r0, lsl #3]
   271f0:	add	r2, r8, #2
   271f4:	strb	r3, [r8, #1]
   271f8:	strb	r3, [r2], #1
   271fc:	strb	r3, [r2]
   27200:	ldrb	r3, [r9]
   27204:	cmp	r3, #33	; 0x21
   27208:	beq	2750c <__assert_fail@plt+0x12eb4>
   2720c:	add	r1, r8, #4
   27210:	mov	r0, r9
   27214:	mov	r2, #20
   27218:	bl	2e0f8 <__assert_fail@plt+0x19aa0>
   2721c:	cmp	r0, #0
   27220:	movwlt	r1, #27464	; 0x6b48
   27224:	movlt	r0, #0
   27228:	movtlt	r1, #4
   2722c:	blt	27554 <__assert_fail@plt+0x12efc>
   27230:	ldrb	r3, [r9, r0]
   27234:	add	r9, r9, r0
   27238:	cmp	r3, #32
   2723c:	cmpne	r3, #9
   27240:	bne	2725c <__assert_fail@plt+0x12c04>
   27244:	add	r2, r9, #1
   27248:	mov	r9, r2
   2724c:	ldrb	r3, [r2], #1
   27250:	cmp	r3, #32
   27254:	cmpne	r3, #9
   27258:	beq	27248 <__assert_fail@plt+0x12bf0>
   2725c:	cmp	r3, #0
   27260:	cmpne	r3, #42	; 0x2a
   27264:	movne	r0, #0
   27268:	moveq	r0, #1
   2726c:	beq	2738c <__assert_fail@plt+0x12d34>
   27270:	and	r3, r3, #223	; 0xdf
   27274:	cmp	r3, #80	; 0x50
   27278:	bne	27574 <__assert_fail@plt+0x12f1c>
   2727c:	ldrb	r3, [r8]
   27280:	orr	r3, r3, #2
   27284:	strb	r3, [r8]
   27288:	ldrb	ip, [r9, #1]
   2728c:	add	r9, r9, #1
   27290:	tst	ip, #223	; 0xdf
   27294:	beq	27374 <__assert_fail@plt+0x12d1c>
   27298:	cmp	ip, #9
   2729c:	bne	27548 <__assert_fail@plt+0x12ef0>
   272a0:	cmp	ip, #32
   272a4:	cmpne	ip, #9
   272a8:	bne	272c4 <__assert_fail@plt+0x12c6c>
   272ac:	add	lr, r9, #1
   272b0:	mov	r9, lr
   272b4:	ldrb	ip, [lr], #1
   272b8:	cmp	ip, #32
   272bc:	cmpne	ip, #9
   272c0:	beq	272b0 <__assert_fail@plt+0x12c58>
   272c4:	cmp	ip, #0
   272c8:	beq	2737c <__assert_fail@plt+0x12d24>
   272cc:	ldrb	r3, [r9]
   272d0:	cmp	r3, #0
   272d4:	beq	27418 <__assert_fail@plt+0x12dc0>
   272d8:	cmp	r3, #61	; 0x3d
   272dc:	beq	27484 <__assert_fail@plt+0x12e2c>
   272e0:	cmp	r3, #32
   272e4:	beq	274c8 <__assert_fail@plt+0x12e70>
   272e8:	cmp	r3, #9
   272ec:	beq	274c8 <__assert_fail@plt+0x12e70>
   272f0:	add	sl, r9, #1
   272f4:	mov	lr, #0
   272f8:	mov	r3, sl
   272fc:	b	27318 <__assert_fail@plt+0x12cc0>
   27300:	cmp	r1, #61	; 0x3d
   27304:	beq	2748c <__assert_fail@plt+0x12e34>
   27308:	cmp	r1, #32
   2730c:	beq	27444 <__assert_fail@plt+0x12dec>
   27310:	cmp	r1, #9
   27314:	beq	27444 <__assert_fail@plt+0x12dec>
   27318:	mov	r2, r3
   2731c:	ldrb	r1, [r3], #1
   27320:	add	lr, lr, #1
   27324:	cmp	r1, #0
   27328:	bne	27300 <__assert_fail@plt+0x12ca8>
   2732c:	mov	fp, lr
   27330:	cmp	fp, #5
   27334:	mov	sl, r2
   27338:	beq	27454 <__assert_fail@plt+0x12dfc>
   2733c:	cmp	fp, #2
   27340:	bne	27420 <__assert_fail@plt+0x12dc8>
   27344:	movw	r1, #27612	; 0x6bdc
   27348:	mov	r0, r9
   2734c:	movt	r1, #4
   27350:	mov	r2, fp
   27354:	bl	13c80 <memcmp@plt>
   27358:	cmp	r0, #0
   2735c:	bne	27420 <__assert_fail@plt+0x12dc8>
   27360:	ldrb	r3, [r8]
   27364:	mov	r9, sl
   27368:	orr	r3, r3, #16
   2736c:	strb	r3, [r8]
   27370:	ldrb	ip, [r9]
   27374:	cmp	ip, #0
   27378:	bne	272a0 <__assert_fail@plt+0x12c48>
   2737c:	ldr	r3, [sp, #36]	; 0x24
   27380:	add	r3, r3, #1
   27384:	str	r3, [sp, #36]	; 0x24
   27388:	b	27018 <__assert_fail@plt+0x129c0>
   2738c:	ldrb	r3, [r8]
   27390:	orr	r3, r3, #6
   27394:	strb	r3, [r8]
   27398:	b	27288 <__assert_fail@plt+0x12c30>
   2739c:	bl	2c9bc <__assert_fail@plt+0x18364>
   273a0:	mov	r2, #0
   273a4:	movw	r1, #27408	; 0x6b10
   273a8:	movt	r1, #4
   273ac:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   273b0:	mov	r1, r7
   273b4:	mov	r8, r0
   273b8:	bl	13a28 <strcmp@plt>
   273bc:	cmp	r0, #0
   273c0:	beq	2758c <__assert_fail@plt+0x12f34>
   273c4:	mov	r0, r8
   273c8:	mov	r1, #0
   273cc:	bl	142b0 <access@plt>
   273d0:	cmp	r0, #0
   273d4:	beq	273e8 <__assert_fail@plt+0x12d90>
   273d8:	bl	14148 <__errno_location@plt>
   273dc:	ldr	r3, [r0]
   273e0:	cmp	r3, #2
   273e4:	beq	27654 <__assert_fail@plt+0x12ffc>
   273e8:	add	r3, sp, #36	; 0x24
   273ec:	mov	r0, r8
   273f0:	str	r3, [sp]
   273f4:	mov	r1, #0
   273f8:	add	r2, sp, #32
   273fc:	add	r3, sp, #40	; 0x28
   27400:	bl	26fa8 <__assert_fail@plt+0x12950>
   27404:	cmp	r0, #0
   27408:	movne	r6, r0
   2740c:	mov	r0, r8
   27410:	bl	13c44 <gcry_free@plt>
   27414:	b	27018 <__assert_fail@plt+0x129c0>
   27418:	mov	fp, r3
   2741c:	mov	sl, r9
   27420:	mov	r2, r9
   27424:	str	r5, [sp]
   27428:	mov	r1, fp
   2742c:	movw	r0, #27616	; 0x6be0
   27430:	mov	r3, r7
   27434:	movt	r0, #4
   27438:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2743c:	mov	r9, sl
   27440:	b	27370 <__assert_fail@plt+0x12d18>
   27444:	mov	fp, lr
   27448:	cmp	fp, #5
   2744c:	add	sl, r9, lr
   27450:	bne	2733c <__assert_fail@plt+0x12ce4>
   27454:	movw	r1, #27604	; 0x6bd4
   27458:	mov	r0, r9
   2745c:	movt	r1, #4
   27460:	mov	r2, fp
   27464:	bl	13c80 <memcmp@plt>
   27468:	cmp	r0, #0
   2746c:	bne	27420 <__assert_fail@plt+0x12dc8>
   27470:	ldrb	r3, [r8]
   27474:	mov	r9, sl
   27478:	orr	r3, r3, #8
   2747c:	strb	r3, [r8]
   27480:	b	27370 <__assert_fail@plt+0x12d18>
   27484:	add	sl, r9, #1
   27488:	mov	lr, #0
   2748c:	movw	r0, #27536	; 0x6b90
   27490:	mov	r1, r7
   27494:	movt	r0, #4
   27498:	mov	r2, r5
   2749c:	add	r9, sl, lr
   274a0:	mov	r6, #89	; 0x59
   274a4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   274a8:	movt	r6, #1024	; 0x400
   274ac:	b	27370 <__assert_fail@plt+0x12d18>
   274b0:	mov	r0, r4
   274b4:	bl	14064 <feof@plt>
   274b8:	cmp	r0, #0
   274bc:	beq	275c4 <__assert_fail@plt+0x12f6c>
   274c0:	mov	r6, #0
   274c4:	b	27178 <__assert_fail@plt+0x12b20>
   274c8:	mov	fp, #0
   274cc:	mov	lr, fp
   274d0:	b	27448 <__assert_fail@plt+0x12df0>
   274d4:	add	r9, sp, #44	; 0x2c
   274d8:	b	27104 <__assert_fail@plt+0x12aac>
   274dc:	add	r8, r0, #20
   274e0:	ldr	r0, [sp, #32]
   274e4:	add	r1, r8, r8, lsl #1
   274e8:	lsl	r1, r1, #3
   274ec:	bl	142d4 <gcry_realloc@plt>
   274f0:	subs	r3, r0, #0
   274f4:	beq	27674 <__assert_fail@plt+0x1301c>
   274f8:	ldr	r0, [sp, #36]	; 0x24
   274fc:	mov	r1, r3
   27500:	str	r3, [sp, #32]
   27504:	str	r8, [sp, #40]	; 0x28
   27508:	b	271e0 <__assert_fail@plt+0x12b88>
   2750c:	ldrb	r3, [r1, r0, lsl #3]
   27510:	add	r2, r9, #1
   27514:	orr	r3, r3, #1
   27518:	strb	r3, [r1, r0, lsl #3]
   2751c:	ldrb	r3, [r9, #1]
   27520:	cmp	r3, #9
   27524:	cmpne	r3, #32
   27528:	bne	2768c <__assert_fail@plt+0x13034>
   2752c:	add	r3, r9, #2
   27530:	mov	r9, r3
   27534:	ldrb	r2, [r3], #1
   27538:	cmp	r2, #32
   2753c:	cmpne	r2, #9
   27540:	beq	27530 <__assert_fail@plt+0x12ed8>
   27544:	b	2720c <__assert_fail@plt+0x12bb4>
   27548:	movw	r1, #27500	; 0x6b6c
   2754c:	movt	r1, #4
   27550:	mov	r0, #0
   27554:	mov	r2, #5
   27558:	bl	13cc8 <dcgettext@plt>
   2755c:	mov	r1, r7
   27560:	mov	r2, r5
   27564:	mov	r6, #89	; 0x59
   27568:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2756c:	movt	r6, #1024	; 0x400
   27570:	b	27018 <__assert_fail@plt+0x129c0>
   27574:	cmp	r3, #83	; 0x53
   27578:	bne	275b4 <__assert_fail@plt+0x12f5c>
   2757c:	ldrb	r3, [r8]
   27580:	orr	r3, r3, #4
   27584:	strb	r3, [r8]
   27588:	b	27288 <__assert_fail@plt+0x12c30>
   2758c:	mov	r2, #5
   27590:	movw	r1, #27364	; 0x6ae4
   27594:	movt	r1, #4
   27598:	bl	13cc8 <dcgettext@plt>
   2759c:	movw	r1, #27348	; 0x6ad4
   275a0:	mov	r2, r7
   275a4:	movt	r1, #4
   275a8:	mov	r3, r5
   275ac:	bl	3f478 <__assert_fail@plt+0x2ae20>
   275b0:	b	2740c <__assert_fail@plt+0x12db4>
   275b4:	movw	r1, #27500	; 0x6b6c
   275b8:	mov	r2, #5
   275bc:	movt	r1, #4
   275c0:	b	27558 <__assert_fail@plt+0x12f00>
   275c4:	bl	14580 <gpg_err_code_from_syserror@plt>
   275c8:	mov	r2, #5
   275cc:	movw	r1, #27656	; 0x6c08
   275d0:	movt	r1, #4
   275d4:	cmp	r0, #0
   275d8:	uxthne	r6, r0
   275dc:	mov	r0, #0
   275e0:	orrne	r6, r6, #67108864	; 0x4000000
   275e4:	bl	13cc8 <dcgettext@plt>
   275e8:	mov	r8, r0
   275ec:	mov	r0, r6
   275f0:	bl	13a64 <gpg_strerror@plt>
   275f4:	mov	r1, r7
   275f8:	mov	r2, r5
   275fc:	mov	r3, r0
   27600:	mov	r0, r8
   27604:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   27608:	b	27178 <__assert_fail@plt+0x12b20>
   2760c:	bl	14580 <gpg_err_code_from_syserror@plt>
   27610:	mov	r2, #5
   27614:	movw	r1, #27300	; 0x6aa4
   27618:	movt	r1, #4
   2761c:	cmp	r0, #0
   27620:	uxthne	r0, r0
   27624:	orrne	r6, r0, #67108864	; 0x4000000
   27628:	moveq	r6, r0
   2762c:	mov	r0, #0
   27630:	bl	13cc8 <dcgettext@plt>
   27634:	mov	r4, r0
   27638:	mov	r0, r6
   2763c:	bl	13a64 <gpg_strerror@plt>
   27640:	mov	r1, r7
   27644:	mov	r2, r0
   27648:	mov	r0, r4
   2764c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   27650:	b	27180 <__assert_fail@plt+0x12b28>
   27654:	mov	r2, #5
   27658:	movw	r1, #27424	; 0x6b20
   2765c:	mov	r0, #0
   27660:	movt	r1, #4
   27664:	bl	13cc8 <dcgettext@plt>
   27668:	mov	r1, r8
   2766c:	bl	3f478 <__assert_fail@plt+0x2ae20>
   27670:	b	2740c <__assert_fail@plt+0x12db4>
   27674:	bl	14580 <gpg_err_code_from_syserror@plt>
   27678:	cmp	r0, #0
   2767c:	uxthne	r6, r0
   27680:	orrne	r6, r6, #67108864	; 0x4000000
   27684:	bne	27178 <__assert_fail@plt+0x12b20>
   27688:	b	274c0 <__assert_fail@plt+0x12e68>
   2768c:	mov	r9, r2
   27690:	b	2720c <__assert_fail@plt+0x12bb4>
   27694:	bl	13cec <__stack_chk_fail@plt>
   27698:	push	{r3, r4, r5, r6, r7, lr}
   2769c:	mov	r5, r0
   276a0:	mov	r0, r1
   276a4:	mov	r6, r1
   276a8:	bl	14094 <strlen@plt>
   276ac:	ldrb	r2, [r5]
   276b0:	cmp	r2, #47	; 0x2f
   276b4:	bne	27758 <__assert_fail@plt+0x13100>
   276b8:	ldrb	r3, [r5, #1]
   276bc:	add	r4, r5, #1
   276c0:	cmp	r3, #0
   276c4:	beq	27764 <__assert_fail@plt+0x1310c>
   276c8:	mov	r2, r4
   276cc:	mov	ip, #0
   276d0:	cmp	r3, #47	; 0x2f
   276d4:	ldrb	r3, [r2, #1]!
   276d8:	addeq	ip, ip, #1
   276dc:	cmp	r3, #0
   276e0:	bne	276d0 <__assert_fail@plt+0x13078>
   276e4:	mul	r7, r0, ip
   276e8:	mov	r0, r5
   276ec:	bl	14094 <strlen@plt>
   276f0:	add	r0, r0, r7
   276f4:	add	r0, r0, #1
   276f8:	bl	139c8 <gcry_malloc@plt>
   276fc:	subs	r7, r0, #0
   27700:	beq	27750 <__assert_fail@plt+0x130f8>
   27704:	ldrb	r3, [r5, #1]
   27708:	mov	r0, r7
   2770c:	cmp	r3, #0
   27710:	bne	27724 <__assert_fail@plt+0x130cc>
   27714:	b	27748 <__assert_fail@plt+0x130f0>
   27718:	ldrb	r3, [r4, #1]!
   2771c:	cmp	r3, #0
   27720:	beq	27748 <__assert_fail@plt+0x130f0>
   27724:	cmp	r3, #47	; 0x2f
   27728:	strbne	r3, [r0]
   2772c:	addne	r0, r0, #1
   27730:	bne	27718 <__assert_fail@plt+0x130c0>
   27734:	mov	r1, r6
   27738:	bl	13cb0 <stpcpy@plt>
   2773c:	ldrb	r3, [r4, #1]!
   27740:	cmp	r3, #0
   27744:	bne	27724 <__assert_fail@plt+0x130cc>
   27748:	mov	r3, #0
   2774c:	strb	r3, [r0]
   27750:	mov	r0, r7
   27754:	pop	{r3, r4, r5, r6, r7, pc}
   27758:	mov	r0, r5
   2775c:	pop	{r3, r4, r5, r6, r7, lr}
   27760:	b	13f2c <gcry_strdup@plt>
   27764:	mov	r7, r3
   27768:	b	276e8 <__assert_fail@plt+0x13090>
   2776c:	mov	r1, #0
   27770:	movw	r0, #47580	; 0xb9dc
   27774:	push	{r3, lr}
   27778:	mov	r2, r1
   2777c:	movt	r0, #5
   27780:	bl	14364 <pth_mutex_acquire@plt>
   27784:	cmp	r0, #0
   27788:	popne	{r3, pc}
   2778c:	movw	r0, #27692	; 0x6c2c
   27790:	movw	r1, #27724	; 0x6c4c
   27794:	movt	r0, #4
   27798:	movt	r1, #4
   2779c:	bl	3f544 <__assert_fail@plt+0x2aeec>
   277a0:	push	{r3, lr}
   277a4:	movw	r0, #47580	; 0xb9dc
   277a8:	movt	r0, #5
   277ac:	bl	14220 <pth_mutex_release@plt>
   277b0:	cmp	r0, #0
   277b4:	popne	{r3, pc}
   277b8:	movw	r0, #27736	; 0x6c58
   277bc:	movw	r1, #27724	; 0x6c4c
   277c0:	movt	r0, #4
   277c4:	movt	r1, #4
   277c8:	bl	3f544 <__assert_fail@plt+0x2aeec>
   277cc:	push	{r4, r5, r6, r7, lr}
   277d0:	movw	r4, #47296	; 0xb8c0
   277d4:	movt	r4, #5
   277d8:	sub	sp, sp, #28
   277dc:	mov	r3, #20
   277e0:	mov	r1, #24
   277e4:	ldr	r2, [r4]
   277e8:	mov	r0, r3
   277ec:	str	r3, [sp, #16]
   277f0:	str	r2, [sp, #20]
   277f4:	bl	14190 <gcry_calloc@plt>
   277f8:	cmp	r0, #0
   277fc:	str	r0, [sp, #8]
   27800:	beq	27994 <__assert_fail@plt+0x1333c>
   27804:	movw	r3, #48116	; 0xbbf4
   27808:	movt	r3, #5
   2780c:	mov	r6, #0
   27810:	movw	r1, #27408	; 0x6b10
   27814:	ldr	r0, [r3, #20]
   27818:	mov	r2, r6
   2781c:	movt	r1, #4
   27820:	str	r6, [sp, #12]
   27824:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   27828:	mov	r1, r6
   2782c:	mov	r5, r0
   27830:	bl	142b0 <access@plt>
   27834:	cmp	r0, r6
   27838:	moveq	r1, #1
   2783c:	bne	278d0 <__assert_fail@plt+0x13278>
   27840:	add	r3, sp, #12
   27844:	add	r2, sp, #8
   27848:	str	r3, [sp]
   2784c:	mov	r0, r5
   27850:	add	r3, sp, #16
   27854:	bl	26fa8 <__assert_fail@plt+0x12950>
   27858:	mov	r6, r0
   2785c:	mov	r0, r5
   27860:	bl	13c44 <gcry_free@plt>
   27864:	cmp	r6, #0
   27868:	bne	2794c <__assert_fail@plt+0x132f4>
   2786c:	ldr	r1, [sp, #12]
   27870:	ldr	r0, [sp, #8]
   27874:	cmp	r1, #0
   27878:	addne	r1, r1, r1, lsl #1
   2787c:	moveq	r1, #24
   27880:	lslne	r1, r1, #3
   27884:	bl	142d4 <gcry_realloc@plt>
   27888:	subs	r6, r0, #0
   2788c:	beq	279a8 <__assert_fail@plt+0x13350>
   27890:	movw	r5, #47580	; 0xb9dc
   27894:	movt	r5, #5
   27898:	bl	2776c <__assert_fail@plt+0x13114>
   2789c:	ldr	r0, [r5, #20]
   278a0:	bl	13c44 <gcry_free@plt>
   278a4:	ldr	r3, [sp, #12]
   278a8:	str	r6, [r5, #20]
   278ac:	str	r3, [r5, #24]
   278b0:	bl	277a0 <__assert_fail@plt+0x13148>
   278b4:	mov	r0, #0
   278b8:	ldr	r2, [sp, #20]
   278bc:	ldr	r3, [r4]
   278c0:	cmp	r2, r3
   278c4:	bne	279cc <__assert_fail@plt+0x13374>
   278c8:	add	sp, sp, #28
   278cc:	pop	{r4, r5, r6, r7, pc}
   278d0:	bl	14148 <__errno_location@plt>
   278d4:	ldr	r3, [r0]
   278d8:	cmp	r3, #2
   278dc:	beq	27924 <__assert_fail@plt+0x132cc>
   278e0:	bl	14580 <gpg_err_code_from_syserror@plt>
   278e4:	mov	r2, #5
   278e8:	movw	r1, #27300	; 0x6aa4
   278ec:	movt	r1, #4
   278f0:	cmp	r0, #0
   278f4:	uxthne	r7, r0
   278f8:	moveq	r7, r0
   278fc:	mov	r0, #0
   27900:	orrne	r7, r7, #67108864	; 0x4000000
   27904:	bl	13cc8 <dcgettext@plt>
   27908:	mov	r6, r0
   2790c:	mov	r0, r7
   27910:	bl	13a64 <gpg_strerror@plt>
   27914:	mov	r1, r5
   27918:	mov	r2, r0
   2791c:	mov	r0, r6
   27920:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   27924:	mov	r0, r5
   27928:	bl	13c44 <gcry_free@plt>
   2792c:	bl	2c9bc <__assert_fail@plt+0x18364>
   27930:	movw	r1, #27408	; 0x6b10
   27934:	mov	r2, #0
   27938:	movt	r1, #4
   2793c:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   27940:	mov	r1, #0
   27944:	mov	r5, r0
   27948:	b	27840 <__assert_fail@plt+0x131e8>
   2794c:	ldr	r0, [sp, #8]
   27950:	bl	13c44 <gcry_free@plt>
   27954:	uxth	r2, r6
   27958:	movw	r3, #32849	; 0x8051
   2795c:	cmp	r2, r3
   27960:	movne	r0, r6
   27964:	bne	278b8 <__assert_fail@plt+0x13260>
   27968:	movw	r5, #47580	; 0xb9dc
   2796c:	movt	r5, #5
   27970:	mov	r6, #0
   27974:	bl	2776c <__assert_fail@plt+0x13114>
   27978:	ldr	r0, [r5, #20]
   2797c:	bl	13c44 <gcry_free@plt>
   27980:	str	r6, [r5, #20]
   27984:	str	r6, [r5, #24]
   27988:	bl	277a0 <__assert_fail@plt+0x13148>
   2798c:	mov	r0, r6
   27990:	b	278b8 <__assert_fail@plt+0x13260>
   27994:	bl	14580 <gpg_err_code_from_syserror@plt>
   27998:	cmp	r0, #0
   2799c:	uxthne	r0, r0
   279a0:	orrne	r0, r0, #67108864	; 0x4000000
   279a4:	b	278b8 <__assert_fail@plt+0x13260>
   279a8:	bl	14580 <gpg_err_code_from_syserror@plt>
   279ac:	cmp	r0, #0
   279b0:	uxthne	r6, r0
   279b4:	orrne	r6, r6, #67108864	; 0x4000000
   279b8:	moveq	r6, r0
   279bc:	ldr	r0, [sp, #8]
   279c0:	bl	13c44 <gcry_free@plt>
   279c4:	mov	r0, r6
   279c8:	b	278b8 <__assert_fail@plt+0x13260>
   279cc:	bl	13cec <__stack_chk_fail@plt>
   279d0:	push	{r4, lr}
   279d4:	movw	r4, #47580	; 0xb9dc
   279d8:	movt	r4, #5
   279dc:	ldr	r3, [r4, #28]
   279e0:	cmp	r3, #0
   279e4:	popne	{r4, pc}
   279e8:	mov	r0, r4
   279ec:	bl	13980 <pth_mutex_init@plt>
   279f0:	cmp	r0, #0
   279f4:	movne	r3, #1
   279f8:	strne	r3, [r4, #28]
   279fc:	popne	{r4, pc}
   27a00:	bl	14148 <__errno_location@plt>
   27a04:	ldr	r0, [r0]
   27a08:	bl	13fa4 <strerror@plt>
   27a0c:	mov	r1, r0
   27a10:	movw	r0, #27768	; 0x6c78
   27a14:	movt	r0, #4
   27a18:	bl	3f544 <__assert_fail@plt+0x2aeec>
   27a1c:	push	{r4, r5, r6, r7, r8, r9, lr}
   27a20:	movw	r6, #47296	; 0xb8c0
   27a24:	movt	r6, #5
   27a28:	subs	r7, r2, #0
   27a2c:	sub	sp, sp, #28
   27a30:	mov	r8, r0
   27a34:	ldr	r3, [r6]
   27a38:	mov	r0, r1
   27a3c:	mov	r2, #20
   27a40:	mov	r1, sp
   27a44:	str	r3, [sp, #20]
   27a48:	movne	r3, #0
   27a4c:	strne	r3, [r7]
   27a50:	bl	2e0f8 <__assert_fail@plt+0x19aa0>
   27a54:	cmp	r0, #0
   27a58:	movlt	r0, #55	; 0x37
   27a5c:	movtlt	r0, #1024	; 0x400
   27a60:	blt	27a8c <__assert_fail@plt+0x13434>
   27a64:	movw	r5, #47580	; 0xb9dc
   27a68:	movt	r5, #5
   27a6c:	ldr	r4, [r5, #20]
   27a70:	cmp	r4, #0
   27a74:	beq	27b64 <__assert_fail@plt+0x1350c>
   27a78:	ldr	r5, [r5, #24]
   27a7c:	cmp	r5, #0
   27a80:	bne	27ab0 <__assert_fail@plt+0x13458>
   27a84:	mov	r0, #98	; 0x62
   27a88:	movt	r0, #1024	; 0x400
   27a8c:	ldr	r2, [sp, #20]
   27a90:	ldr	r3, [r6]
   27a94:	cmp	r2, r3
   27a98:	bne	27ba0 <__assert_fail@plt+0x13548>
   27a9c:	add	sp, sp, #28
   27aa0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   27aa4:	subs	r5, r5, #1
   27aa8:	add	r4, r4, #24
   27aac:	beq	27a84 <__assert_fail@plt+0x1342c>
   27ab0:	add	r0, r4, #4
   27ab4:	mov	r1, sp
   27ab8:	mov	r2, #20
   27abc:	bl	13c80 <memcmp@plt>
   27ac0:	cmp	r0, #0
   27ac4:	bne	27aa4 <__assert_fail@plt+0x1344c>
   27ac8:	ldrb	r2, [r4]
   27acc:	sbfx	r0, r2, #0, #1
   27ad0:	uxtb	r0, r0
   27ad4:	cmp	r0, #0
   27ad8:	beq	27aec <__assert_fail@plt+0x13494>
   27adc:	cmp	r7, #0
   27ae0:	movne	r3, #1
   27ae4:	strne	r3, [r7]
   27ae8:	ldrbne	r2, [r4]
   27aec:	sbfx	r3, r2, #3, #1
   27af0:	cmp	r3, #0
   27af4:	bne	27b0c <__assert_fail@plt+0x134b4>
   27af8:	tst	r2, #16
   27afc:	bne	27b40 <__assert_fail@plt+0x134e8>
   27b00:	cmp	r0, #0
   27b04:	beq	27a8c <__assert_fail@plt+0x13434>
   27b08:	b	27a84 <__assert_fail@plt+0x1342c>
   27b0c:	mov	r0, r8
   27b10:	movw	r1, #27852	; 0x6ccc
   27b14:	movw	r2, #27604	; 0x6bd4
   27b18:	movt	r1, #4
   27b1c:	movt	r2, #4
   27b20:	mov	r3, #0
   27b24:	bl	1ad0c <__assert_fail@plt+0x66b4>
   27b28:	cmp	r0, #0
   27b2c:	bne	27a8c <__assert_fail@plt+0x13434>
   27b30:	ldrb	r0, [r4]
   27b34:	sbfx	r0, r0, #0, #1
   27b38:	uxtb	r0, r0
   27b3c:	b	27b00 <__assert_fail@plt+0x134a8>
   27b40:	mov	r0, r8
   27b44:	movw	r1, #27852	; 0x6ccc
   27b48:	movw	r2, #27612	; 0x6bdc
   27b4c:	movt	r1, #4
   27b50:	movt	r2, #4
   27b54:	bl	1ad0c <__assert_fail@plt+0x66b4>
   27b58:	cmp	r0, #0
   27b5c:	beq	27b30 <__assert_fail@plt+0x134d8>
   27b60:	b	27a8c <__assert_fail@plt+0x13434>
   27b64:	bl	277cc <__assert_fail@plt+0x13174>
   27b68:	subs	r9, r0, #0
   27b6c:	bne	27b80 <__assert_fail@plt+0x13528>
   27b70:	ldr	r4, [r5, #20]
   27b74:	cmp	r4, #0
   27b78:	beq	27a84 <__assert_fail@plt+0x1342c>
   27b7c:	b	27a78 <__assert_fail@plt+0x13420>
   27b80:	mov	r2, #5
   27b84:	mov	r0, r4
   27b88:	movw	r1, #27800	; 0x6c98
   27b8c:	movt	r1, #4
   27b90:	bl	13cc8 <dcgettext@plt>
   27b94:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   27b98:	mov	r0, r9
   27b9c:	b	27a8c <__assert_fail@plt+0x13434>
   27ba0:	bl	13cec <__stack_chk_fail@plt>
   27ba4:	push	{r4, r5, r6, r7, r8, r9, lr}
   27ba8:	movw	r4, #47580	; 0xb9dc
   27bac:	movt	r4, #5
   27bb0:	movw	r7, #47296	; 0xb8c0
   27bb4:	movt	r7, #5
   27bb8:	sub	sp, sp, #60	; 0x3c
   27bbc:	ldr	r5, [r4, #20]
   27bc0:	mov	r6, r0
   27bc4:	ldr	r3, [r7]
   27bc8:	cmp	r5, #0
   27bcc:	str	r3, [sp, #52]	; 0x34
   27bd0:	beq	27ca0 <__assert_fail@plt+0x13648>
   27bd4:	bl	2776c <__assert_fail@plt+0x13114>
   27bd8:	ldr	r5, [r4, #24]
   27bdc:	ldr	r4, [r4, #20]
   27be0:	cmp	r5, #0
   27be4:	movne	r9, #32
   27be8:	movne	r8, #10
   27bec:	bne	27c00 <__assert_fail@plt+0x135a8>
   27bf0:	b	27c80 <__assert_fail@plt+0x13628>
   27bf4:	subs	r5, r5, #1
   27bf8:	add	r4, r4, #24
   27bfc:	beq	27c80 <__assert_fail@plt+0x13628>
   27c00:	ldrb	r3, [r4]
   27c04:	tst	r3, #1
   27c08:	bne	27bf4 <__assert_fail@plt+0x1359c>
   27c0c:	mov	r2, sp
   27c10:	add	r0, r4, #4
   27c14:	mov	r1, #20
   27c18:	bl	2e26c <__assert_fail@plt+0x19c14>
   27c1c:	strb	r9, [sp, #40]	; 0x28
   27c20:	ldrb	r3, [r4]
   27c24:	and	r2, r3, #6
   27c28:	cmp	r2, #6
   27c2c:	moveq	r3, #42	; 0x2a
   27c30:	beq	27c4c <__assert_fail@plt+0x135f4>
   27c34:	tst	r3, #4
   27c38:	movne	r3, #83	; 0x53
   27c3c:	bne	27c4c <__assert_fail@plt+0x135f4>
   27c40:	tst	r3, #2
   27c44:	moveq	r3, #32
   27c48:	movne	r3, #80	; 0x50
   27c4c:	mov	r1, sp
   27c50:	mov	r2, #43	; 0x2b
   27c54:	mov	r0, r6
   27c58:	strb	r3, [sp, #41]	; 0x29
   27c5c:	strb	r8, [sp, #42]	; 0x2a
   27c60:	bl	1413c <assuan_send_data@plt>
   27c64:	mov	r1, #0
   27c68:	mov	r0, r6
   27c6c:	mov	r2, r1
   27c70:	add	r4, r4, #24
   27c74:	bl	1413c <assuan_send_data@plt>
   27c78:	subs	r5, r5, #1
   27c7c:	bne	27c00 <__assert_fail@plt+0x135a8>
   27c80:	bl	277a0 <__assert_fail@plt+0x13148>
   27c84:	mov	r0, #0
   27c88:	ldr	r2, [sp, #52]	; 0x34
   27c8c:	ldr	r3, [r7]
   27c90:	cmp	r2, r3
   27c94:	bne	27cdc <__assert_fail@plt+0x13684>
   27c98:	add	sp, sp, #60	; 0x3c
   27c9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   27ca0:	bl	277cc <__assert_fail@plt+0x13174>
   27ca4:	subs	r8, r0, #0
   27ca8:	bne	27cbc <__assert_fail@plt+0x13664>
   27cac:	ldr	r0, [r4, #20]
   27cb0:	cmp	r0, #0
   27cb4:	beq	27c88 <__assert_fail@plt+0x13630>
   27cb8:	b	27bd4 <__assert_fail@plt+0x1357c>
   27cbc:	mov	r2, #5
   27cc0:	mov	r0, r5
   27cc4:	movw	r1, #27800	; 0x6c98
   27cc8:	movt	r1, #4
   27ccc:	bl	13cc8 <dcgettext@plt>
   27cd0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   27cd4:	mov	r0, r8
   27cd8:	b	27c88 <__assert_fail@plt+0x13630>
   27cdc:	bl	13cec <__stack_chk_fail@plt>
   27ce0:	push	{r4, lr}
   27ce4:	movw	r4, #47580	; 0xb9dc
   27ce8:	bl	2776c <__assert_fail@plt+0x13114>
   27cec:	movt	r4, #5
   27cf0:	ldr	r0, [r4, #20]
   27cf4:	bl	13c44 <gcry_free@plt>
   27cf8:	mov	r3, #0
   27cfc:	str	r3, [r4, #20]
   27d00:	str	r3, [r4, #24]
   27d04:	bl	277a0 <__assert_fail@plt+0x13148>
   27d08:	pop	{r4, lr}
   27d0c:	b	1b7a8 <__assert_fail@plt+0x7150>
   27d10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27d14:	movw	r4, #47296	; 0xb8c0
   27d18:	movt	r4, #5
   27d1c:	movw	r5, #48116	; 0xbbf4
   27d20:	movt	r5, #5
   27d24:	sub	sp, sp, #36	; 0x24
   27d28:	ldr	ip, [r4]
   27d2c:	mov	r8, r1
   27d30:	mov	r7, r0
   27d34:	mov	r6, r2
   27d38:	ldr	r0, [r5, #20]
   27d3c:	mov	r2, #0
   27d40:	movw	r1, #27408	; 0x6b10
   27d44:	movt	r1, #4
   27d48:	mov	r9, r3
   27d4c:	str	ip, [sp, #28]
   27d50:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   27d54:	mov	r1, #2
   27d58:	mov	sl, r0
   27d5c:	bl	142b0 <access@plt>
   27d60:	cmp	r0, #0
   27d64:	beq	27da0 <__assert_fail@plt+0x13748>
   27d68:	bl	14148 <__errno_location@plt>
   27d6c:	ldr	r3, [r0]
   27d70:	cmp	r3, #2
   27d74:	beq	27da0 <__assert_fail@plt+0x13748>
   27d78:	mov	r0, sl
   27d7c:	bl	13c44 <gcry_free@plt>
   27d80:	movw	r0, #32875	; 0x806b
   27d84:	movt	r0, #1024	; 0x400
   27d88:	ldr	r2, [sp, #28]
   27d8c:	ldr	r3, [r4]
   27d90:	cmp	r2, r3
   27d94:	bne	281cc <__assert_fail@plt+0x13b74>
   27d98:	add	sp, sp, #36	; 0x24
   27d9c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27da0:	mov	r0, sl
   27da4:	bl	13c44 <gcry_free@plt>
   27da8:	mov	r0, r7
   27dac:	add	r2, sp, #24
   27db0:	mov	r1, r6
   27db4:	bl	27a1c <__assert_fail@plt+0x133c4>
   27db8:	cmp	r0, #0
   27dbc:	beq	27e10 <__assert_fail@plt+0x137b8>
   27dc0:	ldr	r3, [r5, #112]	; 0x70
   27dc4:	cmp	r3, #0
   27dc8:	moveq	r0, #60	; 0x3c
   27dcc:	movteq	r0, #1024	; 0x400
   27dd0:	beq	27d88 <__assert_fail@plt+0x13730>
   27dd4:	ldr	fp, [sp, #24]
   27dd8:	cmp	fp, #0
   27ddc:	beq	27e18 <__assert_fail@plt+0x137c0>
   27de0:	mov	r0, #98	; 0x62
   27de4:	movt	r0, #1024	; 0x400
   27de8:	b	27d88 <__assert_fail@plt+0x13730>
   27dec:	mov	r0, sl
   27df0:	bl	13c44 <gcry_free@plt>
   27df4:	ldr	r0, [sp, #12]
   27df8:	bl	13c44 <gcry_free@plt>
   27dfc:	bl	14580 <gpg_err_code_from_syserror@plt>
   27e00:	cmp	r0, #0
   27e04:	uxthne	r0, r0
   27e08:	orrne	r0, r0, #67108864	; 0x4000000
   27e0c:	bne	27d88 <__assert_fail@plt+0x13730>
   27e10:	mov	r0, #0
   27e14:	b	27d88 <__assert_fail@plt+0x13730>
   27e18:	movw	r1, #27880	; 0x6ce8
   27e1c:	mov	r0, r8
   27e20:	movt	r1, #4
   27e24:	bl	27698 <__assert_fail@plt+0x13040>
   27e28:	cmp	r0, #0
   27e2c:	str	r0, [sp, #12]
   27e30:	beq	27dfc <__assert_fail@plt+0x137a4>
   27e34:	mov	r2, #5
   27e38:	movw	r1, #27888	; 0x6cf0
   27e3c:	mov	r0, fp
   27e40:	movt	r1, #4
   27e44:	bl	13cc8 <dcgettext@plt>
   27e48:	ldr	r1, [sp, #12]
   27e4c:	bl	2ed14 <__assert_fail@plt+0x1a6bc>
   27e50:	subs	sl, r0, #0
   27e54:	beq	27df4 <__assert_fail@plt+0x1379c>
   27e58:	mov	r2, #5
   27e5c:	movw	r1, #27968	; 0x6d40
   27e60:	mov	r0, fp
   27e64:	movt	r1, #4
   27e68:	bl	13cc8 <dcgettext@plt>
   27e6c:	mov	r2, #5
   27e70:	movw	r1, #27972	; 0x6d44
   27e74:	movt	r1, #4
   27e78:	mov	ip, r0
   27e7c:	mov	r0, fp
   27e80:	str	ip, [sp, #8]
   27e84:	bl	13cc8 <dcgettext@plt>
   27e88:	ldr	ip, [sp, #8]
   27e8c:	mov	r1, sl
   27e90:	mov	r2, ip
   27e94:	mov	r3, r0
   27e98:	mov	r0, #1
   27e9c:	str	r0, [sp]
   27ea0:	mov	r0, r7
   27ea4:	bl	2116c <__assert_fail@plt+0xcb14>
   27ea8:	str	r0, [sp, #16]
   27eac:	mov	r0, sl
   27eb0:	bl	13c44 <gcry_free@plt>
   27eb4:	ldr	r1, [sp, #16]
   27eb8:	cmp	r1, #0
   27ebc:	beq	28070 <__assert_fail@plt+0x13a18>
   27ec0:	uxth	r3, r1
   27ec4:	cmp	r3, #114	; 0x72
   27ec8:	streq	fp, [sp, #20]
   27ecc:	bne	28060 <__assert_fail@plt+0x13a08>
   27ed0:	mov	r0, r6
   27ed4:	bl	14094 <strlen@plt>
   27ed8:	add	fp, r0, #1
   27edc:	add	fp, r0, fp, lsr #1
   27ee0:	add	r0, fp, #1
   27ee4:	bl	139c8 <gcry_malloc@plt>
   27ee8:	subs	sl, r0, #0
   27eec:	beq	27df4 <__assert_fail@plt+0x1379c>
   27ef0:	mov	r0, sl
   27ef4:	mov	r1, r6
   27ef8:	mov	ip, #58	; 0x3a
   27efc:	ldrb	r2, [r1]
   27f00:	mov	r3, r0
   27f04:	cmp	r2, #0
   27f08:	beq	27f1c <__assert_fail@plt+0x138c4>
   27f0c:	strb	r2, [r3], #1
   27f10:	ldrb	r2, [r1, #1]
   27f14:	cmp	r2, #0
   27f18:	bne	28034 <__assert_fail@plt+0x139dc>
   27f1c:	mov	r0, #0
   27f20:	strb	r0, [r3]
   27f24:	mov	r0, sl
   27f28:	bl	14094 <strlen@plt>
   27f2c:	cmp	fp, r0
   27f30:	bcc	28294 <__assert_fail@plt+0x13c3c>
   27f34:	ldr	r1, [sp, #20]
   27f38:	cmp	r1, #0
   27f3c:	beq	27fe4 <__assert_fail@plt+0x1398c>
   27f40:	mov	r2, #5
   27f44:	movw	r1, #28000	; 0x6d60
   27f48:	mov	r0, #0
   27f4c:	movt	r1, #4
   27f50:	bl	13cc8 <dcgettext@plt>
   27f54:	ldr	r1, [sp, #12]
   27f58:	mov	r2, sl
   27f5c:	bl	2ed14 <__assert_fail@plt+0x1a6bc>
   27f60:	subs	fp, r0, #0
   27f64:	beq	27dec <__assert_fail@plt+0x13794>
   27f68:	mov	r2, #5
   27f6c:	movw	r1, #28092	; 0x6dbc
   27f70:	mov	r0, #0
   27f74:	movt	r1, #4
   27f78:	bl	13cc8 <dcgettext@plt>
   27f7c:	mov	r2, #5
   27f80:	movw	r1, #28100	; 0x6dc4
   27f84:	movt	r1, #4
   27f88:	mov	ip, r0
   27f8c:	mov	r0, #0
   27f90:	str	ip, [sp, #8]
   27f94:	bl	13cc8 <dcgettext@plt>
   27f98:	ldr	ip, [sp, #8]
   27f9c:	mov	r1, #1
   27fa0:	str	r1, [sp]
   27fa4:	mov	r1, fp
   27fa8:	mov	r2, ip
   27fac:	mov	r3, r0
   27fb0:	mov	r0, r7
   27fb4:	bl	2116c <__assert_fail@plt+0xcb14>
   27fb8:	str	r0, [sp, #16]
   27fbc:	mov	r0, fp
   27fc0:	bl	13c44 <gcry_free@plt>
   27fc4:	ldr	r2, [sp, #16]
   27fc8:	uxth	r3, r2
   27fcc:	cmp	r3, #114	; 0x72
   27fd0:	beq	281c0 <__assert_fail@plt+0x13b68>
   27fd4:	cmp	r2, #0
   27fd8:	moveq	r0, #1
   27fdc:	streq	r0, [sp, #20]
   27fe0:	bne	28058 <__assert_fail@plt+0x13a00>
   27fe4:	bl	2776c <__assert_fail@plt+0x13114>
   27fe8:	bl	27ce0 <__assert_fail@plt+0x13688>
   27fec:	mov	r0, r7
   27ff0:	mov	r1, r6
   27ff4:	add	r2, sp, #24
   27ff8:	bl	27a1c <__assert_fail@plt+0x133c4>
   27ffc:	cmp	r0, #0
   28000:	beq	28010 <__assert_fail@plt+0x139b8>
   28004:	ldr	r6, [sp, #24]
   28008:	cmp	r6, #0
   2800c:	beq	2807c <__assert_fail@plt+0x13a24>
   28010:	bl	277a0 <__assert_fail@plt+0x13148>
   28014:	mov	r0, sl
   28018:	bl	13c44 <gcry_free@plt>
   2801c:	ldr	r0, [sp, #12]
   28020:	bl	13c44 <gcry_free@plt>
   28024:	ldr	r0, [sp, #24]
   28028:	cmp	r0, #0
   2802c:	beq	27d88 <__assert_fail@plt+0x13730>
   28030:	b	27de0 <__assert_fail@plt+0x13788>
   28034:	strb	r2, [r0, #1]
   28038:	add	r3, r1, #2
   2803c:	ldrb	r2, [r1, #2]
   28040:	mov	r1, r3
   28044:	cmp	r2, #0
   28048:	strbne	ip, [r0, #2]
   2804c:	addeq	r0, r0, #2
   28050:	addne	r0, r0, #3
   28054:	b	27efc <__assert_fail@plt+0x138a4>
   28058:	mov	r0, sl
   2805c:	bl	13c44 <gcry_free@plt>
   28060:	ldr	r0, [sp, #12]
   28064:	bl	13c44 <gcry_free@plt>
   28068:	ldr	r0, [sp, #16]
   2806c:	b	27d88 <__assert_fail@plt+0x13730>
   28070:	mov	r2, #1
   28074:	str	r2, [sp, #20]
   28078:	b	27ed0 <__assert_fail@plt+0x13878>
   2807c:	ldr	r0, [r5, #20]
   28080:	mov	r2, r6
   28084:	movw	r1, #27408	; 0x6b10
   28088:	movt	r1, #4
   2808c:	bl	3b5f0 <__assert_fail@plt+0x26f98>
   28090:	mov	r1, r6
   28094:	mov	r5, r0
   28098:	bl	142b0 <access@plt>
   2809c:	cmp	r0, #0
   280a0:	beq	280b4 <__assert_fail@plt+0x13a5c>
   280a4:	bl	14148 <__errno_location@plt>
   280a8:	ldr	r3, [r0]
   280ac:	cmp	r3, #2
   280b0:	beq	28264 <__assert_fail@plt+0x13c0c>
   280b4:	movw	r1, #18732	; 0x492c
   280b8:	mov	r0, r5
   280bc:	movt	r1, #4
   280c0:	bl	34354 <__assert_fail@plt+0x1fcfc>
   280c4:	subs	r6, r0, #0
   280c8:	beq	28200 <__assert_fail@plt+0x13ba8>
   280cc:	mov	r1, r6
   280d0:	movw	r0, #28112	; 0x6dd0
   280d4:	movt	r0, #4
   280d8:	bl	35c7c <__assert_fail@plt+0x21624>
   280dc:	ldr	r0, [sp, #12]
   280e0:	bl	13c44 <gcry_free@plt>
   280e4:	mov	r0, r8
   280e8:	movw	r1, #28112	; 0x6dd0
   280ec:	movt	r1, #4
   280f0:	bl	27698 <__assert_fail@plt+0x13040>
   280f4:	subs	r7, r0, #0
   280f8:	beq	28110 <__assert_fail@plt+0x13ab8>
   280fc:	mov	r0, r8
   28100:	mov	r1, #10
   28104:	bl	140ac <strchr@plt>
   28108:	cmp	r0, #0
   2810c:	beq	28254 <__assert_fail@plt+0x13bfc>
   28110:	mov	r0, r8
   28114:	bl	14094 <strlen@plt>
   28118:	mov	r3, #0
   2811c:	mov	r1, r8
   28120:	str	r3, [sp]
   28124:	mov	r2, r0
   28128:	mov	r0, r6
   2812c:	bl	36a60 <__assert_fail@plt+0x22408>
   28130:	ldr	r0, [sp, #20]
   28134:	cmp	r9, #83	; 0x53
   28138:	movw	r3, #18888	; 0x49c8
   2813c:	movt	r3, #4
   28140:	movw	r1, #27872	; 0x6ce0
   28144:	movt	r1, #4
   28148:	movne	r1, r3
   2814c:	cmp	r0, #0
   28150:	str	r1, [sp, #4]
   28154:	movw	r2, #27868	; 0x6cdc
   28158:	str	r9, [sp]
   2815c:	movt	r2, #4
   28160:	movw	r1, #28116	; 0x6dd4
   28164:	movne	r2, r3
   28168:	movt	r1, #4
   2816c:	mov	r3, sl
   28170:	mov	r0, r6
   28174:	bl	36500 <__assert_fail@plt+0x21ea8>
   28178:	mov	r0, r6
   2817c:	bl	3515c <__assert_fail@plt+0x20b04>
   28180:	cmp	r0, #0
   28184:	bne	281e8 <__assert_fail@plt+0x13b90>
   28188:	mov	r0, r6
   2818c:	bl	34ea0 <__assert_fail@plt+0x20848>
   28190:	cmp	r0, #0
   28194:	bne	281d0 <__assert_fail@plt+0x13b78>
   28198:	bl	27ce0 <__assert_fail@plt+0x13688>
   2819c:	mov	r0, r5
   281a0:	bl	13c44 <gcry_free@plt>
   281a4:	bl	277a0 <__assert_fail@plt+0x13148>
   281a8:	mov	r0, sl
   281ac:	bl	13c44 <gcry_free@plt>
   281b0:	mov	r0, r7
   281b4:	bl	13c44 <gcry_free@plt>
   281b8:	ldr	r0, [sp, #16]
   281bc:	b	27d88 <__assert_fail@plt+0x13730>
   281c0:	mov	r3, #0
   281c4:	str	r3, [sp, #20]
   281c8:	b	27fe4 <__assert_fail@plt+0x1398c>
   281cc:	bl	13cec <__stack_chk_fail@plt>
   281d0:	bl	14580 <gpg_err_code_from_syserror@plt>
   281d4:	cmp	r0, #0
   281d8:	uxthne	r0, r0
   281dc:	orrne	r0, r0, #67108864	; 0x4000000
   281e0:	str	r0, [sp, #16]
   281e4:	b	28198 <__assert_fail@plt+0x13b40>
   281e8:	bl	14580 <gpg_err_code_from_syserror@plt>
   281ec:	cmp	r0, #0
   281f0:	uxthne	r0, r0
   281f4:	orrne	r0, r0, #67108864	; 0x4000000
   281f8:	str	r0, [sp, #16]
   281fc:	b	28188 <__assert_fail@plt+0x13b30>
   28200:	bl	14580 <gpg_err_code_from_syserror@plt>
   28204:	cmp	r0, #0
   28208:	uxthne	r0, r0
   2820c:	orrne	r6, r0, #67108864	; 0x4000000
   28210:	moveq	r6, r0
   28214:	mov	r0, r6
   28218:	bl	13a64 <gpg_strerror@plt>
   2821c:	mov	r1, r5
   28220:	mov	r2, r0
   28224:	movw	r0, #18788	; 0x4964
   28228:	movt	r0, #4
   2822c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   28230:	mov	r0, r5
   28234:	bl	13c44 <gcry_free@plt>
   28238:	bl	277a0 <__assert_fail@plt+0x13148>
   2823c:	mov	r0, sl
   28240:	bl	13c44 <gcry_free@plt>
   28244:	ldr	r0, [sp, #12]
   28248:	bl	13c44 <gcry_free@plt>
   2824c:	mov	r0, r6
   28250:	b	27d88 <__assert_fail@plt+0x13730>
   28254:	mov	r0, r7
   28258:	mov	r1, r6
   2825c:	bl	35c7c <__assert_fail@plt+0x21624>
   28260:	b	28130 <__assert_fail@plt+0x13ad8>
   28264:	movw	r1, #28108	; 0x6dcc
   28268:	mov	r0, r5
   2826c:	movt	r1, #4
   28270:	bl	34354 <__assert_fail@plt+0x1fcfc>
   28274:	subs	r6, r0, #0
   28278:	beq	282b4 <__assert_fail@plt+0x13c5c>
   2827c:	mov	r1, r6
   28280:	ldr	r0, [pc, #92]	; 282e4 <__assert_fail@plt+0x13c8c>
   28284:	bl	35c7c <__assert_fail@plt+0x21624>
   28288:	mov	r0, r6
   2828c:	bl	34ea0 <__assert_fail@plt+0x20848>
   28290:	b	280b4 <__assert_fail@plt+0x13a5c>
   28294:	movw	r0, #27976	; 0x6d48
   28298:	movw	r1, #27724	; 0x6c4c
   2829c:	movw	r3, #26596	; 0x67e4
   282a0:	movt	r0, #4
   282a4:	movt	r1, #4
   282a8:	movw	r2, #503	; 0x1f7
   282ac:	movt	r3, #4
   282b0:	bl	14658 <__assert_fail@plt>
   282b4:	bl	14580 <gpg_err_code_from_syserror@plt>
   282b8:	cmp	r0, #0
   282bc:	uxthne	r0, r0
   282c0:	orrne	r6, r0, #67108864	; 0x4000000
   282c4:	moveq	r6, r0
   282c8:	mov	r0, r6
   282cc:	bl	13a64 <gpg_strerror@plt>
   282d0:	mov	r1, r5
   282d4:	mov	r2, r0
   282d8:	movw	r0, #18764	; 0x494c
   282dc:	movt	r0, #4
   282e0:	b	2822c <__assert_fail@plt+0x13bd4>
   282e4:	strdeq	r6, [r4], -r4
   282e8:	ldr	r1, [r0]
   282ec:	push	{r4, r5}
   282f0:	ldrb	ip, [r1]
   282f4:	sub	r2, ip, #48	; 0x30
   282f8:	uxtb	r3, r2
   282fc:	cmp	r3, #9
   28300:	bhi	28340 <__assert_fail@plt+0x13ce8>
   28304:	add	r1, r1, #1
   28308:	mov	r3, #0
   2830c:	add	r3, r3, r3, lsl #2
   28310:	ldrb	ip, [r1], #1
   28314:	add	r3, r2, r3, lsl #1
   28318:	sub	r2, ip, #48	; 0x30
   2831c:	uxtb	r4, r2
   28320:	cmp	r4, #9
   28324:	bls	2830c <__assert_fail@plt+0x13cb4>
   28328:	cmp	r3, #0
   2832c:	beq	28344 <__assert_fail@plt+0x13cec>
   28330:	cmp	ip, #58	; 0x3a
   28334:	moveq	r5, r1
   28338:	streq	r5, [r0]
   2833c:	beq	28344 <__assert_fail@plt+0x13cec>
   28340:	mov	r3, #0
   28344:	mov	r0, r3
   28348:	pop	{r4, r5}
   2834c:	bx	lr
   28350:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28354:	sub	sp, sp, #44	; 0x2c
   28358:	movw	r7, #47296	; 0xb8c0
   2835c:	movt	r7, #5
   28360:	str	r2, [sp, #12]
   28364:	mov	r5, r0
   28368:	ldr	ip, [sp, #12]
   2836c:	mov	r0, r1
   28370:	ldr	r3, [r7]
   28374:	mov	r2, #0
   28378:	add	r1, sp, #28
   2837c:	str	r2, [ip]
   28380:	add	r2, sp, #32
   28384:	str	r3, [sp, #36]	; 0x24
   28388:	bl	26e1c <__assert_fail@plt+0x127c4>
   2838c:	cmp	r0, #0
   28390:	bne	283fc <__assert_fail@plt+0x13da4>
   28394:	ldr	r4, [sp, #28]
   28398:	mov	r0, r4
   2839c:	bl	14094 <strlen@plt>
   283a0:	cmp	r0, #20
   283a4:	mov	r6, r0
   283a8:	beq	28504 <__assert_fail@plt+0x13eac>
   283ac:	mov	sl, #0
   283b0:	mov	r8, sl
   283b4:	mov	r0, r5
   283b8:	add	r1, sp, #20
   283bc:	bl	2a1cc <__assert_fail@plt+0x15b74>
   283c0:	subs	r4, r0, #0
   283c4:	beq	28414 <__assert_fail@plt+0x13dbc>
   283c8:	uxth	r1, r4
   283cc:	cmp	r1, #112	; 0x70
   283d0:	beq	284c0 <__assert_fail@plt+0x13e68>
   283d4:	bl	13a64 <gpg_strerror@plt>
   283d8:	mov	r1, r0
   283dc:	movw	r0, #28176	; 0x6e10
   283e0:	movt	r0, #4
   283e4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   283e8:	ldr	r0, [sp, #28]
   283ec:	bl	13c44 <gcry_free@plt>
   283f0:	ldr	r0, [sp, #32]
   283f4:	bl	13c44 <gcry_free@plt>
   283f8:	mov	r0, r4
   283fc:	ldr	r2, [sp, #36]	; 0x24
   28400:	ldr	r3, [r7]
   28404:	cmp	r2, r3
   28408:	bne	28530 <__assert_fail@plt+0x13ed8>
   2840c:	add	sp, sp, #44	; 0x2c
   28410:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28414:	ldr	r1, [sp, #20]
   28418:	movw	r0, #28128	; 0x6de0
   2841c:	movt	r0, #4
   28420:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   28424:	ldr	r9, [sp, #20]
   28428:	ldr	r1, [sp, #28]
   2842c:	mov	r0, r9
   28430:	bl	13a28 <strcmp@plt>
   28434:	mov	fp, r0
   28438:	mov	r0, r9
   2843c:	bl	13c44 <gcry_free@plt>
   28440:	cmp	fp, #0
   28444:	str	r4, [sp, #20]
   28448:	beq	28514 <__assert_fail@plt+0x13ebc>
   2844c:	cmp	sl, #0
   28450:	bne	284cc <__assert_fail@plt+0x13e74>
   28454:	mov	r2, #5
   28458:	movw	r1, #28248	; 0x6e58
   2845c:	mov	r0, sl
   28460:	movt	r1, #4
   28464:	bl	13cc8 <dcgettext@plt>
   28468:	mov	r2, r0
   2846c:	ldr	ip, [sp, #28]
   28470:	movw	r1, #28320	; 0x6ea0
   28474:	add	r0, sp, #24
   28478:	movt	r1, #4
   2847c:	mov	r3, r6
   28480:	str	ip, [sp]
   28484:	bl	3932c <__assert_fail@plt+0x24cd4>
   28488:	cmp	r0, #0
   2848c:	blt	284ec <__assert_fail@plt+0x13e94>
   28490:	mov	r2, #0
   28494:	ldr	r1, [sp, #24]
   28498:	str	r8, [sp]
   2849c:	mov	r3, r2
   284a0:	mov	r0, r5
   284a4:	bl	2116c <__assert_fail@plt+0xcb14>
   284a8:	mov	r4, r0
   284ac:	ldr	r0, [sp, #24]
   284b0:	bl	13c44 <gcry_free@plt>
   284b4:	cmp	r4, #0
   284b8:	beq	283b4 <__assert_fail@plt+0x13d5c>
   284bc:	b	283e8 <__assert_fail@plt+0x13d90>
   284c0:	movw	r0, #28156	; 0x6dfc
   284c4:	movt	r0, #4
   284c8:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   284cc:	mov	r2, #5
   284d0:	movw	r1, #28204	; 0x6e2c
   284d4:	mov	r0, #0
   284d8:	movt	r1, #4
   284dc:	bl	13cc8 <dcgettext@plt>
   284e0:	mov	sl, #1
   284e4:	mov	r2, r0
   284e8:	b	2846c <__assert_fail@plt+0x13e14>
   284ec:	bl	14580 <gpg_err_code_from_syserror@plt>
   284f0:	cmp	r0, #0
   284f4:	uxthne	r4, r0
   284f8:	orrne	r4, r4, #67108864	; 0x4000000
   284fc:	bne	284b4 <__assert_fail@plt+0x13e5c>
   28500:	b	283b4 <__assert_fail@plt+0x13d5c>
   28504:	ldrb	r3, [r4, #19]
   28508:	cmp	r3, #48	; 0x30
   2850c:	moveq	r6, #19
   28510:	b	283ac <__assert_fail@plt+0x13d54>
   28514:	ldr	r0, [sp, #28]
   28518:	bl	13c44 <gcry_free@plt>
   2851c:	ldr	r3, [sp, #32]
   28520:	ldr	ip, [sp, #12]
   28524:	mov	r0, fp
   28528:	str	r3, [ip]
   2852c:	b	283fc <__assert_fail@plt+0x13da4>
   28530:	bl	13cec <__stack_chk_fail@plt>
   28534:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28538:	sub	sp, sp, #68	; 0x44
   2853c:	movw	ip, #47296	; 0xb8c0
   28540:	movt	ip, #5
   28544:	str	r3, [sp, #24]
   28548:	adds	r5, r2, #0
   2854c:	ldr	r3, [ip]
   28550:	mov	sl, r0
   28554:	str	ip, [sp, #16]
   28558:	movne	r5, #1
   2855c:	ldr	ip, [sp, #24]
   28560:	str	r2, [sp, #44]	; 0x2c
   28564:	cmp	ip, #1
   28568:	str	r1, [sp, #32]
   2856c:	str	r3, [sp, #60]	; 0x3c
   28570:	movhi	r5, #0
   28574:	cmp	r5, #0
   28578:	beq	285a4 <__assert_fail@plt+0x13f4c>
   2857c:	mov	r8, #55	; 0x37
   28580:	movt	r8, #1024	; 0x400
   28584:	ldr	ip, [sp, #16]
   28588:	mov	r0, r8
   2858c:	ldr	r2, [sp, #60]	; 0x3c
   28590:	ldr	r3, [ip]
   28594:	cmp	r2, r3
   28598:	bne	28a78 <__assert_fail@plt+0x14420>
   2859c:	add	sp, sp, #68	; 0x44
   285a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   285a4:	cmp	r1, #0
   285a8:	beq	2892c <__assert_fail@plt+0x142d4>
   285ac:	mov	ip, r1
   285b0:	ldrb	r1, [r1]
   285b4:	cmp	r1, #124	; 0x7c
   285b8:	beq	2881c <__assert_fail@plt+0x141c4>
   285bc:	movw	r9, #22220	; 0x56cc
   285c0:	movt	r9, #4
   285c4:	mov	ip, r5
   285c8:	str	r5, [sp, #28]
   285cc:	str	r5, [sp, #36]	; 0x24
   285d0:	str	r5, [sp, #40]	; 0x28
   285d4:	ldr	r1, [sp, #44]	; 0x2c
   285d8:	cmp	r1, #0
   285dc:	beq	28948 <__assert_fail@plt+0x142f0>
   285e0:	ldr	r3, [sp, #24]
   285e4:	movw	r1, #28388	; 0x6ee4
   285e8:	movw	r2, #28428	; 0x6f0c
   285ec:	movt	r1, #4
   285f0:	movt	r2, #4
   285f4:	add	r3, r3, #50	; 0x32
   285f8:	str	r1, [sp, #48]	; 0x30
   285fc:	mov	r8, #0
   28600:	str	r2, [sp, #52]	; 0x34
   28604:	mov	fp, ip
   28608:	str	r3, [sp, #12]
   2860c:	str	r9, [sp, #20]
   28610:	b	286a4 <__assert_fail@plt+0x1404c>
   28614:	ldr	ip, [sp, #28]
   28618:	mov	r2, #5
   2861c:	cmp	ip, #0
   28620:	movwne	r1, #28560	; 0x6f90
   28624:	movweq	r1, #28576	; 0x6fa0
   28628:	movtne	r1, #4
   2862c:	movteq	r1, #4
   28630:	movne	r0, fp
   28634:	ldreq	r0, [sp, #28]
   28638:	bl	13cc8 <dcgettext@plt>
   2863c:	mov	r1, r0
   28640:	str	r9, [sp]
   28644:	mov	r0, sl
   28648:	ldr	r2, [sp, #20]
   2864c:	mov	r3, #0
   28650:	bl	208a0 <__assert_fail@plt+0xc248>
   28654:	subs	r8, r0, #0
   28658:	bne	28810 <__assert_fail@plt+0x141b8>
   2865c:	add	r0, r4, #36	; 0x24
   28660:	add	r1, r9, #36	; 0x24
   28664:	bl	13a28 <strcmp@plt>
   28668:	cmp	r0, #0
   2866c:	beq	28810 <__assert_fail@plt+0x141b8>
   28670:	cmp	fp, #0
   28674:	movwne	r8, #28340	; 0x6eb4
   28678:	movtne	r8, #4
   2867c:	bne	28694 <__assert_fail@plt+0x1403c>
   28680:	ldr	r1, [sp, #28]
   28684:	ldr	ip, [sp, #52]	; 0x34
   28688:	cmp	r1, #0
   2868c:	ldr	r8, [sp, #48]	; 0x30
   28690:	movne	r8, ip
   28694:	mov	r0, r9
   28698:	bl	13c44 <gcry_free@plt>
   2869c:	mov	r0, r4
   286a0:	bl	13c44 <gcry_free@plt>
   286a4:	mov	r0, #1
   286a8:	ldr	r1, [sp, #12]
   286ac:	bl	13a58 <gcry_calloc_secure@plt>
   286b0:	subs	r4, r0, #0
   286b4:	beq	289b8 <__assert_fail@plt+0x14360>
   286b8:	ldr	ip, [sp, #40]	; 0x28
   286bc:	mov	r5, #0
   286c0:	mov	r7, #16
   286c4:	mov	r3, #3
   286c8:	cmp	ip, #0
   286cc:	ldr	ip, [sp, #24]
   286d0:	str	r5, [r4]
   286d4:	sub	r6, ip, #1
   286d8:	str	r7, [r4, #4]
   286dc:	str	r6, [r4, #32]
   286e0:	str	r3, [r4, #8]
   286e4:	beq	28770 <__assert_fail@plt+0x14118>
   286e8:	mov	r3, r8
   286ec:	ldr	r2, [sp, #20]
   286f0:	str	r4, [sp]
   286f4:	mov	r0, sl
   286f8:	ldr	r1, [sp, #32]
   286fc:	bl	208a0 <__assert_fail@plt+0xc248>
   28700:	ldr	ip, [sp, #36]	; 0x24
   28704:	subs	r2, r0, r5
   28708:	mov	r8, r0
   2870c:	rsbs	r3, r2, #0
   28710:	adcs	r3, r3, r2
   28714:	cmp	ip, r5
   28718:	moveq	r3, #0
   2871c:	cmp	r3, r5
   28720:	beq	287fc <__assert_fail@plt+0x141a4>
   28724:	mov	r0, #1
   28728:	ldr	r1, [sp, #12]
   2872c:	bl	13a58 <gcry_calloc_secure@plt>
   28730:	subs	r9, r0, #0
   28734:	beq	289d4 <__assert_fail@plt+0x1437c>
   28738:	cmp	fp, #0
   2873c:	mov	r3, #1
   28740:	str	r6, [r9, #32]
   28744:	str	r5, [r9]
   28748:	str	r7, [r9, #4]
   2874c:	str	r3, [r9, #8]
   28750:	beq	28614 <__assert_fail@plt+0x13fbc>
   28754:	mov	r0, r5
   28758:	movw	r1, #28536	; 0x6f78
   2875c:	mov	r2, #5
   28760:	movt	r1, #4
   28764:	bl	13cc8 <dcgettext@plt>
   28768:	mov	r1, r0
   2876c:	b	28640 <__assert_fail@plt+0x13fe8>
   28770:	mov	r2, #5
   28774:	ldr	r0, [sp, #40]	; 0x28
   28778:	movw	r1, #28592	; 0x6fb0
   2877c:	movt	r1, #4
   28780:	ldr	r9, [sp, #20]
   28784:	bl	13cc8 <dcgettext@plt>
   28788:	ldr	ip, [sp, #32]
   2878c:	cmp	ip, #0
   28790:	movweq	r3, #18888	; 0x49c8
   28794:	movwne	ip, #28472	; 0x6f38
   28798:	movwne	r2, #28468	; 0x6f34
   2879c:	movtne	ip, #4
   287a0:	ldrne	r3, [sp, #32]
   287a4:	movteq	r3, #4
   287a8:	mov	r1, r0
   287ac:	movtne	r2, #4
   287b0:	add	r0, sp, #56	; 0x38
   287b4:	moveq	ip, r3
   287b8:	moveq	r2, r3
   287bc:	str	ip, [sp]
   287c0:	bl	3932c <__assert_fail@plt+0x24cd4>
   287c4:	cmp	r0, #0
   287c8:	blt	289fc <__assert_fail@plt+0x143a4>
   287cc:	ldr	r1, [sp, #56]	; 0x38
   287d0:	ldr	ip, [sp, #32]
   287d4:	cmp	r1, #0
   287d8:	moveq	r1, ip
   287dc:	str	r4, [sp]
   287e0:	mov	r0, sl
   287e4:	mov	r2, r9
   287e8:	mov	r3, #0
   287ec:	bl	208a0 <__assert_fail@plt+0xc248>
   287f0:	mov	r8, r0
   287f4:	ldr	r0, [sp, #56]	; 0x38
   287f8:	bl	13c44 <gcry_free@plt>
   287fc:	cmp	r8, #0
   28800:	beq	288f4 <__assert_fail@plt+0x1429c>
   28804:	mov	r0, r4
   28808:	bl	13c44 <gcry_free@plt>
   2880c:	b	28584 <__assert_fail@plt+0x13f2c>
   28810:	mov	r0, r9
   28814:	bl	13c44 <gcry_free@plt>
   28818:	b	287fc <__assert_fail@plt+0x141a4>
   2881c:	add	r6, ip, #1
   28820:	mov	r0, r6
   28824:	bl	140ac <strchr@plt>
   28828:	subs	r4, r0, #0
   2882c:	beq	28a0c <__assert_fail@plt+0x143b4>
   28830:	cmp	r6, r4
   28834:	str	r5, [sp, #28]
   28838:	movw	r9, #22220	; 0x56cc
   2883c:	bcs	28a3c <__assert_fail@plt+0x143e4>
   28840:	ldr	ip, [sp, #28]
   28844:	movt	r9, #4
   28848:	sub	r6, r4, #1
   2884c:	ldr	r5, [sp, #32]
   28850:	mov	r0, r9
   28854:	str	ip, [sp, #36]	; 0x24
   28858:	mov	r7, ip
   2885c:	b	28884 <__assert_fail@plt+0x1422c>
   28860:	cmp	r3, #80	; 0x50
   28864:	beq	288b0 <__assert_fail@plt+0x14258>
   28868:	cmp	r3, #78	; 0x4e
   2886c:	moveq	r7, #1
   28870:	beq	2887c <__assert_fail@plt+0x14224>
   28874:	cmp	r3, #82	; 0x52
   28878:	beq	28910 <__assert_fail@plt+0x142b8>
   2887c:	cmp	r5, r6
   28880:	beq	288d8 <__assert_fail@plt+0x14280>
   28884:	ldrb	r3, [r5, #1]!
   28888:	cmp	r3, #65	; 0x41
   2888c:	bne	28860 <__assert_fail@plt+0x14208>
   28890:	movw	r1, #28476	; 0x6f3c
   28894:	mov	r0, #0
   28898:	movt	r1, #4
   2889c:	mov	r2, #5
   288a0:	str	ip, [sp, #8]
   288a4:	bl	13cc8 <dcgettext@plt>
   288a8:	ldr	ip, [sp, #8]
   288ac:	b	2887c <__assert_fail@plt+0x14224>
   288b0:	movw	r1, #28572	; 0x6f9c
   288b4:	mov	r0, #0
   288b8:	movt	r1, #4
   288bc:	mov	r2, #5
   288c0:	str	ip, [sp, #8]
   288c4:	bl	13cc8 <dcgettext@plt>
   288c8:	mov	r1, #1
   288cc:	ldr	ip, [sp, #8]
   288d0:	str	r1, [sp, #28]
   288d4:	b	2887c <__assert_fail@plt+0x14224>
   288d8:	mov	r9, r0
   288dc:	str	r7, [sp, #36]	; 0x24
   288e0:	add	r4, r4, #1
   288e4:	mov	r2, #1
   288e8:	str	r4, [sp, #32]
   288ec:	str	r2, [sp, #40]	; 0x28
   288f0:	b	285d4 <__assert_fail@plt+0x13f7c>
   288f4:	ldr	r0, [sp, #44]	; 0x2c
   288f8:	add	r1, r4, #36	; 0x24
   288fc:	mov	r2, r6
   28900:	bl	141e4 <strncpy@plt>
   28904:	ldr	ip, [sp, #44]	; 0x2c
   28908:	strb	r8, [ip, r6]
   2890c:	b	28804 <__assert_fail@plt+0x141ac>
   28910:	movw	r1, #28548	; 0x6f84
   28914:	mov	r0, #0
   28918:	movt	r1, #4
   2891c:	mov	r2, #5
   28920:	bl	13cc8 <dcgettext@plt>
   28924:	mov	ip, #1
   28928:	b	2887c <__assert_fail@plt+0x14224>
   2892c:	ldr	ip, [sp, #32]
   28930:	movw	r9, #22220	; 0x56cc
   28934:	movt	r9, #4
   28938:	str	ip, [sp, #28]
   2893c:	str	ip, [sp, #36]	; 0x24
   28940:	str	ip, [sp, #40]	; 0x28
   28944:	b	285d4 <__assert_fail@plt+0x13f7c>
   28948:	ldr	ip, [sp, #24]
   2894c:	cmp	ip, #0
   28950:	beq	289ec <__assert_fail@plt+0x14394>
   28954:	ldr	ip, [sp, #24]
   28958:	cmp	ip, #1
   2895c:	bne	2857c <__assert_fail@plt+0x13f24>
   28960:	ldr	ip, [sp, #32]
   28964:	cmp	ip, #0
   28968:	beq	28a60 <__assert_fail@plt+0x14408>
   2896c:	mov	r2, #5
   28970:	movw	r1, #28488	; 0x6f48
   28974:	ldr	r0, [sp, #44]	; 0x2c
   28978:	movt	r1, #4
   2897c:	bl	13cc8 <dcgettext@plt>
   28980:	ldr	r2, [sp, #32]
   28984:	mov	r1, r0
   28988:	add	r0, sp, #56	; 0x38
   2898c:	bl	3932c <__assert_fail@plt+0x24cd4>
   28990:	cmp	r0, #0
   28994:	blt	28a4c <__assert_fail@plt+0x143f4>
   28998:	mov	r0, sl
   2899c:	ldr	r2, [sp, #44]	; 0x2c
   289a0:	ldr	r1, [sp, #56]	; 0x38
   289a4:	bl	215a8 <__assert_fail@plt+0xcf50>
   289a8:	mov	r8, r0
   289ac:	ldr	r0, [sp, #56]	; 0x38
   289b0:	bl	13c44 <gcry_free@plt>
   289b4:	b	28584 <__assert_fail@plt+0x13f2c>
   289b8:	bl	14580 <gpg_err_code_from_syserror@plt>
   289bc:	cmp	r0, #0
   289c0:	moveq	r8, r0
   289c4:	beq	28584 <__assert_fail@plt+0x13f2c>
   289c8:	uxth	r8, r0
   289cc:	orr	r8, r8, #67108864	; 0x4000000
   289d0:	b	28584 <__assert_fail@plt+0x13f2c>
   289d4:	bl	14580 <gpg_err_code_from_syserror@plt>
   289d8:	cmp	r0, #0
   289dc:	uxthne	r8, r0
   289e0:	orrne	r8, r8, #67108864	; 0x4000000
   289e4:	moveq	r8, r0
   289e8:	b	28804 <__assert_fail@plt+0x141ac>
   289ec:	mov	r0, sl
   289f0:	mov	r8, ip
   289f4:	bl	21784 <__assert_fail@plt+0xd12c>
   289f8:	b	28584 <__assert_fail@plt+0x13f2c>
   289fc:	mov	r3, #0
   28a00:	ldr	r1, [sp, #32]
   28a04:	str	r3, [sp, #56]	; 0x38
   28a08:	b	287dc <__assert_fail@plt+0x14184>
   28a0c:	movw	r0, #28640	; 0x6fe0
   28a10:	movt	r0, #4
   28a14:	str	r4, [sp, #28]
   28a18:	movw	r9, #22220	; 0x56cc
   28a1c:	str	r4, [sp, #8]
   28a20:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   28a24:	ldr	r1, [sp, #28]
   28a28:	movt	r9, #4
   28a2c:	ldr	ip, [sp, #8]
   28a30:	str	r1, [sp, #36]	; 0x24
   28a34:	str	r1, [sp, #40]	; 0x28
   28a38:	b	285d4 <__assert_fail@plt+0x13f7c>
   28a3c:	movt	r9, #4
   28a40:	mov	ip, r5
   28a44:	str	r5, [sp, #36]	; 0x24
   28a48:	b	288e0 <__assert_fail@plt+0x14288>
   28a4c:	bl	14580 <gpg_err_code_from_syserror@plt>
   28a50:	cmp	r0, #0
   28a54:	bne	289c8 <__assert_fail@plt+0x14370>
   28a58:	ldr	r8, [sp, #44]	; 0x2c
   28a5c:	b	28584 <__assert_fail@plt+0x13f2c>
   28a60:	ldr	r1, [sp, #32]
   28a64:	mov	r0, sl
   28a68:	mov	r2, r1
   28a6c:	bl	215a8 <__assert_fail@plt+0xcf50>
   28a70:	mov	r8, r0
   28a74:	b	28584 <__assert_fail@plt+0x13f2c>
   28a78:	bl	13cec <__stack_chk_fail@plt>
   28a7c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   28a80:	sub	sp, sp, #140	; 0x8c
   28a84:	movw	r4, #47296	; 0xb8c0
   28a88:	movt	r4, #5
   28a8c:	ldr	lr, [sp, #176]	; 0xb0
   28a90:	mov	r8, r1
   28a94:	ldr	ip, [r4]
   28a98:	mov	r7, r2
   28a9c:	add	r2, sp, #20
   28aa0:	mov	r5, r3
   28aa4:	mov	r1, lr
   28aa8:	mov	r6, r0
   28aac:	mov	lr, #0
   28ab0:	str	ip, [sp, #132]	; 0x84
   28ab4:	str	lr, [sp, #24]
   28ab8:	ldr	r9, [sp, #180]	; 0xb4
   28abc:	bl	28350 <__assert_fail@plt+0x13cf8>
   28ac0:	subs	r2, r0, #0
   28ac4:	movne	r0, r2
   28ac8:	bne	28afc <__assert_fail@plt+0x144a4>
   28acc:	movw	r3, #1025	; 0x401
   28ad0:	cmp	r5, r3
   28ad4:	beq	28b14 <__assert_fail@plt+0x144bc>
   28ad8:	cmp	r5, #0
   28adc:	mov	r3, #100	; 0x64
   28ae0:	str	r3, [sp, #28]
   28ae4:	bne	28b68 <__assert_fail@plt+0x14510>
   28ae8:	mov	r5, #5
   28aec:	movt	r5, #1024	; 0x400
   28af0:	ldr	r0, [sp, #20]
   28af4:	bl	13c44 <gcry_free@plt>
   28af8:	mov	r0, r5
   28afc:	ldr	r1, [sp, #132]	; 0x84
   28b00:	ldr	r3, [r4]
   28b04:	cmp	r1, r3
   28b08:	bne	28c60 <__assert_fail@plt+0x14608>
   28b0c:	add	sp, sp, #140	; 0x8c
   28b10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b14:	ldr	sl, [r6, #124]	; 0x7c
   28b18:	mov	r3, #1
   28b1c:	add	r0, sp, #24
   28b20:	str	r3, [r6, #124]	; 0x7c
   28b24:	ldr	r1, [sp, #20]
   28b28:	add	r3, sp, #28
   28b2c:	str	r0, [sp, #8]
   28b30:	movw	r2, #34100	; 0x8534
   28b34:	str	r3, [sp, #12]
   28b38:	movt	r2, #2
   28b3c:	str	r8, [sp]
   28b40:	mov	r0, r6
   28b44:	str	r7, [sp, #4]
   28b48:	mov	r3, r6
   28b4c:	bl	2a28c <__assert_fail@plt+0x15c34>
   28b50:	str	sl, [r6, #124]	; 0x7c
   28b54:	mov	r5, r0
   28b58:	cmp	r5, #0
   28b5c:	ldreq	r3, [sp, #24]
   28b60:	streq	r3, [r9]
   28b64:	b	28af0 <__assert_fail@plt+0x14498>
   28b68:	mov	r0, r5
   28b6c:	mov	r3, r2
   28b70:	mov	r1, #8
   28b74:	bl	140f4 <gcry_md_algo_info@plt>
   28b78:	cmp	r0, #0
   28b7c:	bne	28ae8 <__assert_fail@plt+0x14490>
   28b80:	add	fp, sp, #28
   28b84:	mov	r0, r5
   28b88:	mov	r1, #10
   28b8c:	add	r2, sp, #32
   28b90:	mov	r3, fp
   28b94:	bl	140f4 <gcry_md_algo_info@plt>
   28b98:	cmp	r0, #0
   28b9c:	beq	28bbc <__assert_fail@plt+0x14564>
   28ba0:	mov	r1, r5
   28ba4:	movw	r0, #28684	; 0x700c
   28ba8:	movt	r0, #4
   28bac:	mov	r5, #63	; 0x3f
   28bb0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   28bb4:	movt	r5, #1024	; 0x400
   28bb8:	b	28af0 <__assert_fail@plt+0x14498>
   28bbc:	ldr	r0, [sp, #28]
   28bc0:	add	r0, r7, r0
   28bc4:	bl	139c8 <gcry_malloc@plt>
   28bc8:	subs	sl, r0, #0
   28bcc:	beq	28c64 <__assert_fail@plt+0x1460c>
   28bd0:	ldr	r5, [sp, #28]
   28bd4:	add	r1, sp, #32
   28bd8:	mov	r2, r5
   28bdc:	bl	13ba8 <memcpy@plt>
   28be0:	mov	r1, r8
   28be4:	add	r0, sl, r5
   28be8:	mov	r2, r7
   28bec:	bl	13ba8 <memcpy@plt>
   28bf0:	movw	r3, #48116	; 0xbbf4
   28bf4:	movt	r3, #5
   28bf8:	ldr	r3, [r3]
   28bfc:	tst	r3, #4
   28c00:	bne	28c44 <__assert_fail@plt+0x145ec>
   28c04:	add	r7, r5, r7
   28c08:	add	r2, sp, #24
   28c0c:	ldr	r1, [sp, #20]
   28c10:	str	r2, [sp, #8]
   28c14:	mov	r0, r6
   28c18:	str	sl, [sp]
   28c1c:	mov	r3, r6
   28c20:	str	r7, [sp, #4]
   28c24:	movw	r2, #34100	; 0x8534
   28c28:	str	fp, [sp, #12]
   28c2c:	movt	r2, #2
   28c30:	bl	2a28c <__assert_fail@plt+0x15c34>
   28c34:	mov	r5, r0
   28c38:	mov	r0, sl
   28c3c:	bl	13c44 <gcry_free@plt>
   28c40:	b	28b58 <__assert_fail@plt+0x14500>
   28c44:	add	r2, r7, r5
   28c48:	movw	r0, #28720	; 0x7030
   28c4c:	mov	r1, sl
   28c50:	movt	r0, #4
   28c54:	bl	3f668 <__assert_fail@plt+0x2b010>
   28c58:	ldr	r5, [sp, #28]
   28c5c:	b	28c04 <__assert_fail@plt+0x145ac>
   28c60:	bl	13cec <__stack_chk_fail@plt>
   28c64:	bl	14580 <gpg_err_code_from_syserror@plt>
   28c68:	cmp	r0, #0
   28c6c:	uxthne	r5, r0
   28c70:	orrne	r5, r5, #67108864	; 0x4000000
   28c74:	bne	28af0 <__assert_fail@plt+0x14498>
   28c78:	mov	r7, sl
   28c7c:	b	28c08 <__assert_fail@plt+0x145b0>
   28c80:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   28c84:	movw	r4, #47296	; 0xb8c0
   28c88:	movt	r4, #5
   28c8c:	ldrb	ip, [r1]
   28c90:	mov	r6, r0
   28c94:	sub	sp, sp, #40	; 0x28
   28c98:	ldr	r0, [r4]
   28c9c:	cmp	ip, #40	; 0x28
   28ca0:	str	r1, [sp, #24]
   28ca4:	mov	r9, r2
   28ca8:	mov	r8, r3
   28cac:	ldr	r7, [sp, #72]	; 0x48
   28cb0:	str	r0, [sp, #36]	; 0x24
   28cb4:	beq	28cd8 <__assert_fail@plt+0x14680>
   28cb8:	mov	r0, #83	; 0x53
   28cbc:	movt	r0, #1024	; 0x400
   28cc0:	ldr	r2, [sp, #36]	; 0x24
   28cc4:	ldr	r3, [r4]
   28cc8:	cmp	r2, r3
   28ccc:	bne	28da4 <__assert_fail@plt+0x1474c>
   28cd0:	add	sp, sp, #40	; 0x28
   28cd4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   28cd8:	ldrb	r3, [r1, #1]
   28cdc:	add	r2, r1, #1
   28ce0:	str	r2, [sp, #24]
   28ce4:	sub	r5, r3, #48	; 0x30
   28ce8:	uxtb	r3, r5
   28cec:	cmp	r3, #9
   28cf0:	bhi	28cb8 <__assert_fail@plt+0x14660>
   28cf4:	add	r1, r1, #2
   28cf8:	mov	ip, #0
   28cfc:	add	ip, ip, ip, lsl #2
   28d00:	mov	sl, r1
   28d04:	ldrb	r3, [r1], #1
   28d08:	add	ip, r5, ip, lsl #1
   28d0c:	sub	r5, r3, #48	; 0x30
   28d10:	uxtb	r2, r5
   28d14:	cmp	r2, #9
   28d18:	bls	28cfc <__assert_fail@plt+0x146a4>
   28d1c:	cmp	ip, #0
   28d20:	beq	28cb8 <__assert_fail@plt+0x14660>
   28d24:	cmp	r3, #58	; 0x3a
   28d28:	bne	28cb8 <__assert_fail@plt+0x14660>
   28d2c:	cmp	ip, #7
   28d30:	mov	r0, r1
   28d34:	str	r1, [sp, #24]
   28d38:	beq	28d48 <__assert_fail@plt+0x146f0>
   28d3c:	mov	r0, #104	; 0x68
   28d40:	movt	r0, #1024	; 0x400
   28d44:	b	28cc0 <__assert_fail@plt+0x14668>
   28d48:	mov	r2, ip
   28d4c:	movw	r1, #28736	; 0x7040
   28d50:	movt	r1, #4
   28d54:	bl	13c80 <memcmp@plt>
   28d58:	cmp	r0, #0
   28d5c:	bne	28d3c <__assert_fail@plt+0x146e4>
   28d60:	ldrb	r3, [sl, #8]
   28d64:	add	r2, sl, #8
   28d68:	str	r2, [sp, #24]
   28d6c:	cmp	r3, #40	; 0x28
   28d70:	bne	28d3c <__assert_fail@plt+0x146e4>
   28d74:	add	r5, sp, #40	; 0x28
   28d78:	add	sl, sl, #9
   28d7c:	str	sl, [r5, #-16]!
   28d80:	mov	r0, r5
   28d84:	bl	282e8 <__assert_fail@plt+0x13c90>
   28d88:	subs	r2, r0, #0
   28d8c:	beq	28cb8 <__assert_fail@plt+0x14660>
   28d90:	cmp	r2, #3
   28d94:	beq	28da8 <__assert_fail@plt+0x14750>
   28d98:	mov	r0, #84	; 0x54
   28d9c:	movt	r0, #1024	; 0x400
   28da0:	b	28cc0 <__assert_fail@plt+0x14668>
   28da4:	bl	13cec <__stack_chk_fail@plt>
   28da8:	ldr	sl, [sp, #24]
   28dac:	movw	r1, #20684	; 0x50cc
   28db0:	movt	r1, #4
   28db4:	mov	r0, sl
   28db8:	bl	13c80 <memcmp@plt>
   28dbc:	cmp	r0, #0
   28dc0:	bne	28d98 <__assert_fail@plt+0x14740>
   28dc4:	add	r3, sl, #3
   28dc8:	str	r3, [sp, #24]
   28dcc:	ldrb	r3, [sl, #3]
   28dd0:	cmp	r3, #40	; 0x28
   28dd4:	bne	28d3c <__assert_fail@plt+0x146e4>
   28dd8:	mov	r0, r5
   28ddc:	add	sl, sl, #4
   28de0:	str	sl, [sp, #24]
   28de4:	bl	282e8 <__assert_fail@plt+0x13c90>
   28de8:	cmp	r0, #0
   28dec:	beq	28cb8 <__assert_fail@plt+0x14660>
   28df0:	cmp	r0, #1
   28df4:	bne	28d3c <__assert_fail@plt+0x146e4>
   28df8:	ldr	r3, [sp, #24]
   28dfc:	ldrb	r2, [r3]
   28e00:	cmp	r2, #97	; 0x61
   28e04:	bne	28d3c <__assert_fail@plt+0x146e4>
   28e08:	mov	r0, r5
   28e0c:	add	r3, r3, #1
   28e10:	str	r3, [sp, #24]
   28e14:	bl	282e8 <__assert_fail@plt+0x13c90>
   28e18:	subs	r5, r0, #0
   28e1c:	beq	28d3c <__assert_fail@plt+0x146e4>
   28e20:	mov	r1, r9
   28e24:	mov	r0, r6
   28e28:	add	r2, sp, #20
   28e2c:	ldr	r9, [sp, #24]
   28e30:	bl	28350 <__assert_fail@plt+0x13cf8>
   28e34:	cmp	r0, #0
   28e38:	bne	28cc0 <__assert_fail@plt+0x14668>
   28e3c:	mov	r3, r6
   28e40:	str	r5, [sp, #4]
   28e44:	add	r2, sp, #28
   28e48:	add	r1, sp, #32
   28e4c:	str	r2, [sp, #8]
   28e50:	mov	r0, r6
   28e54:	str	r1, [sp, #12]
   28e58:	movw	r2, #34100	; 0x8534
   28e5c:	ldr	r1, [sp, #20]
   28e60:	movt	r2, #2
   28e64:	str	r9, [sp]
   28e68:	bl	2a58c <__assert_fail@plt+0x15f34>
   28e6c:	subs	r5, r0, #0
   28e70:	ldr	r0, [sp, #20]
   28e74:	ldreq	r2, [sp, #28]
   28e78:	ldreq	r3, [sp, #32]
   28e7c:	streq	r2, [r8]
   28e80:	streq	r3, [r7]
   28e84:	bl	13c44 <gcry_free@plt>
   28e88:	mov	r0, r5
   28e8c:	b	28cc0 <__assert_fail@plt+0x14668>
   28e90:	push	{lr}		; (str lr, [sp, #-4]!)
   28e94:	sub	sp, sp, #12
   28e98:	mov	r3, r0
   28e9c:	str	r2, [sp]
   28ea0:	movw	r2, #34100	; 0x8534
   28ea4:	movt	r2, #2
   28ea8:	bl	2ab68 <__assert_fail@plt+0x16510>
   28eac:	add	sp, sp, #12
   28eb0:	pop	{pc}		; (ldr pc, [sp], #4)
   28eb4:	push	{r4, r5, r6, r7, r8, lr}
   28eb8:	mov	r7, r1
   28ebc:	ldrb	r6, [r1]
   28ec0:	mov	r8, r0
   28ec4:	cmp	r6, #0
   28ec8:	beq	28ff8 <__assert_fail@plt+0x149a0>
   28ecc:	cmp	r6, #9
   28ed0:	cmpne	r6, #32
   28ed4:	moveq	r2, #0
   28ed8:	movne	r2, #1
   28edc:	beq	28f78 <__assert_fail@plt+0x14920>
   28ee0:	add	r2, r1, #1
   28ee4:	mov	r6, #0
   28ee8:	b	28ef8 <__assert_fail@plt+0x148a0>
   28eec:	cmp	r3, #9
   28ef0:	cmpne	r3, #32
   28ef4:	beq	28f84 <__assert_fail@plt+0x1492c>
   28ef8:	ldrb	r3, [r2]
   28efc:	mov	r4, r2
   28f00:	add	r6, r6, #1
   28f04:	add	r2, r2, #1
   28f08:	cmp	r3, #0
   28f0c:	bne	28eec <__assert_fail@plt+0x14894>
   28f10:	mov	r5, #0
   28f14:	cmp	r6, #8
   28f18:	beq	28fb4 <__assert_fail@plt+0x1495c>
   28f1c:	cmp	r6, #11
   28f20:	beq	28f34 <__assert_fail@plt+0x148dc>
   28f24:	cmp	r6, #0
   28f28:	bne	28f50 <__assert_fail@plt+0x148f8>
   28f2c:	mov	r0, #0
   28f30:	pop	{r4, r5, r6, r7, r8, pc}
   28f34:	movw	r1, #28792	; 0x7078
   28f38:	mov	r0, r7
   28f3c:	movt	r1, #4
   28f40:	mov	r2, r6
   28f44:	bl	13c80 <memcmp@plt>
   28f48:	cmp	r0, #0
   28f4c:	beq	28fe4 <__assert_fail@plt+0x1498c>
   28f50:	cmp	r5, #0
   28f54:	beq	28f2c <__assert_fail@plt+0x148d4>
   28f58:	ldr	r0, [r8, #20]
   28f5c:	mov	r1, r7
   28f60:	mov	r2, r6
   28f64:	mov	r3, r4
   28f68:	ldr	ip, [r8, #16]
   28f6c:	blx	ip
   28f70:	mov	r0, #0
   28f74:	pop	{r4, r5, r6, r7, r8, pc}
   28f78:	mov	r3, r6
   28f7c:	mov	r4, r1
   28f80:	mov	r6, r2
   28f84:	cmp	r3, #32
   28f88:	cmpne	r3, #9
   28f8c:	movne	r5, r3
   28f90:	bne	28f14 <__assert_fail@plt+0x148bc>
   28f94:	add	r3, r4, #1
   28f98:	mov	r4, r3
   28f9c:	ldrb	r5, [r3], #1
   28fa0:	cmp	r5, #32
   28fa4:	cmpne	r5, #9
   28fa8:	beq	28f98 <__assert_fail@plt+0x14940>
   28fac:	cmp	r6, #8
   28fb0:	bne	28f1c <__assert_fail@plt+0x148c4>
   28fb4:	movw	r1, #28780	; 0x706c
   28fb8:	mov	r0, r7
   28fbc:	movt	r1, #4
   28fc0:	mov	r2, r6
   28fc4:	bl	13c80 <memcmp@plt>
   28fc8:	cmp	r0, #0
   28fcc:	bne	28f50 <__assert_fail@plt+0x148f8>
   28fd0:	mov	r1, r4
   28fd4:	ldr	r3, [r8, #8]
   28fd8:	ldr	r0, [r8, #12]
   28fdc:	blx	r3
   28fe0:	b	28f2c <__assert_fail@plt+0x148d4>
   28fe4:	mov	r1, r4
   28fe8:	ldr	r3, [r8]
   28fec:	ldr	r0, [r8, #4]
   28ff0:	blx	r3
   28ff4:	b	28f2c <__assert_fail@plt+0x148d4>
   28ff8:	mov	r4, r1
   28ffc:	b	28f10 <__assert_fail@plt+0x148b8>
   29000:	cmp	r1, #0
   29004:	push	{r3, lr}
   29008:	beq	29010 <__assert_fail@plt+0x149b8>
   2900c:	bl	2edf0 <__assert_fail@plt+0x1a798>
   29010:	mov	r0, #0
   29014:	pop	{r3, pc}
   29018:	cmp	r1, #0
   2901c:	bxne	lr
   29020:	mov	r0, #25
   29024:	b	144c0 <gcry_control@plt>
   29028:	push	{r4, r5, r6, lr}
   2902c:	mov	r5, r0
   29030:	ldrb	r3, [r1]
   29034:	cmp	r3, #0
   29038:	beq	29088 <__assert_fail@plt+0x14a30>
   2903c:	cmp	r3, #32
   29040:	cmpne	r3, #9
   29044:	moveq	r2, #0
   29048:	movne	r2, #1
   2904c:	beq	29090 <__assert_fail@plt+0x14a38>
   29050:	add	ip, r1, #1
   29054:	mov	r2, #0
   29058:	b	29068 <__assert_fail@plt+0x14a10>
   2905c:	cmp	r3, #9
   29060:	cmpne	r3, #32
   29064:	beq	29094 <__assert_fail@plt+0x14a3c>
   29068:	ldrb	r3, [ip]
   2906c:	mov	r4, ip
   29070:	add	r2, r2, #1
   29074:	add	ip, ip, #1
   29078:	cmp	r3, #0
   2907c:	bne	2905c <__assert_fail@plt+0x14a04>
   29080:	cmp	r2, #8
   29084:	beq	290c0 <__assert_fail@plt+0x14a68>
   29088:	mov	r0, #0
   2908c:	pop	{r4, r5, r6, pc}
   29090:	mov	r4, r1
   29094:	cmp	r3, #9
   29098:	cmpne	r3, #32
   2909c:	addeq	r3, r4, #1
   290a0:	bne	29080 <__assert_fail@plt+0x14a28>
   290a4:	mov	r4, r3
   290a8:	ldrb	ip, [r3], #1
   290ac:	cmp	ip, #32
   290b0:	cmpne	ip, #9
   290b4:	beq	290a4 <__assert_fail@plt+0x14a4c>
   290b8:	cmp	r2, #8
   290bc:	bne	29088 <__assert_fail@plt+0x14a30>
   290c0:	mov	r0, r1
   290c4:	movw	r1, #19484	; 0x4c1c
   290c8:	movt	r1, #4
   290cc:	bl	13c80 <memcmp@plt>
   290d0:	cmp	r0, #0
   290d4:	bne	29088 <__assert_fail@plt+0x14a30>
   290d8:	ldr	r6, [r5]
   290dc:	cmp	r6, #0
   290e0:	beq	290f4 <__assert_fail@plt+0x14a9c>
   290e4:	mov	r0, #70	; 0x46
   290e8:	movt	r0, #1024	; 0x400
   290ec:	pop	{r4, r5, r6, pc}
   290f0:	add	r6, r6, #1
   290f4:	ldrb	r3, [r4, r6]
   290f8:	and	r2, r3, #223	; 0xdf
   290fc:	sub	r1, r3, #48	; 0x30
   29100:	sub	r0, r2, #65	; 0x41
   29104:	cmp	r1, #9
   29108:	cmphi	r0, #5
   2910c:	bls	290f0 <__assert_fail@plt+0x14a98>
   29110:	cmp	r6, #0
   29114:	bne	29124 <__assert_fail@plt+0x14acc>
   29118:	mov	r0, #280	; 0x118
   2911c:	movt	r0, #1024	; 0x400
   29120:	pop	{r4, r5, r6, pc}
   29124:	tst	r6, #1
   29128:	bne	29118 <__assert_fail@plt+0x14ac0>
   2912c:	cmp	r3, #9
   29130:	beq	2913c <__assert_fail@plt+0x14ae4>
   29134:	cmp	r2, #0
   29138:	bne	29118 <__assert_fail@plt+0x14ac0>
   2913c:	add	r0, r6, #1
   29140:	bl	139c8 <gcry_malloc@plt>
   29144:	cmp	r0, #0
   29148:	str	r0, [r5]
   2914c:	beq	29170 <__assert_fail@plt+0x14b18>
   29150:	mov	r2, r6
   29154:	mov	r1, r4
   29158:	bl	13ba8 <memcpy@plt>
   2915c:	ldr	r2, [r5]
   29160:	mov	r3, #0
   29164:	mov	r0, r3
   29168:	strb	r3, [r2, r6]
   2916c:	pop	{r4, r5, r6, pc}
   29170:	bl	14580 <gpg_err_code_from_syserror@plt>
   29174:	cmp	r0, #0
   29178:	beq	29088 <__assert_fail@plt+0x14a30>
   2917c:	uxth	r0, r0
   29180:	orr	r0, r0, #67108864	; 0x4000000
   29184:	pop	{r4, r5, r6, pc}
   29188:	push	{r3, lr}
   2918c:	bl	1413c <assuan_send_data@plt>
   29190:	mov	r0, #0
   29194:	pop	{r3, pc}
   29198:	push	{r4, r5, r6, r7, r8, lr}
   2919c:	movw	r6, #47296	; 0xb8c0
   291a0:	movt	r6, #5
   291a4:	sub	sp, sp, #24
   291a8:	mov	r4, r1
   291ac:	mov	r7, r0
   291b0:	ldr	r3, [r6]
   291b4:	mov	r0, r1
   291b8:	mov	r2, #7
   291bc:	movw	r1, #28804	; 0x7084
   291c0:	movt	r1, #4
   291c4:	str	r3, [sp, #20]
   291c8:	bl	145bc <strncmp@plt>
   291cc:	cmp	r0, #0
   291d0:	bne	29258 <__assert_fail@plt+0x14c00>
   291d4:	ldrb	r3, [r4, #7]
   291d8:	tst	r3, #223	; 0xdf
   291dc:	bne	29258 <__assert_fail@plt+0x14c00>
   291e0:	cmp	r3, #32
   291e4:	add	r5, r4, #7
   291e8:	bne	29204 <__assert_fail@plt+0x14bac>
   291ec:	add	r3, r4, #8
   291f0:	mov	r5, r3
   291f4:	add	r3, r3, #1
   291f8:	ldrb	r2, [r5]
   291fc:	cmp	r2, #32
   29200:	beq	291f0 <__assert_fail@plt+0x14b98>
   29204:	mov	r0, #90	; 0x5a
   29208:	bl	13f44 <gcry_malloc_secure@plt>
   2920c:	subs	r4, r0, #0
   29210:	beq	2945c <__assert_fail@plt+0x14e04>
   29214:	mov	r1, r5
   29218:	ldr	ip, [r7, #4]
   2921c:	ldr	r0, [r7, #8]
   29220:	mov	r2, r4
   29224:	mov	r3, #90	; 0x5a
   29228:	blx	ip
   2922c:	subs	r5, r0, #0
   29230:	beq	29374 <__assert_fail@plt+0x14d1c>
   29234:	mov	r0, r4
   29238:	bl	13c44 <gcry_free@plt>
   2923c:	mov	r0, r5
   29240:	ldr	r2, [sp, #20]
   29244:	ldr	r3, [r6]
   29248:	cmp	r2, r3
   2924c:	bne	2948c <__assert_fail@plt+0x14e34>
   29250:	add	sp, sp, #24
   29254:	pop	{r4, r5, r6, r7, r8, pc}
   29258:	movw	r1, #28812	; 0x708c
   2925c:	mov	r0, r4
   29260:	movt	r1, #4
   29264:	mov	r2, #17
   29268:	bl	145bc <strncmp@plt>
   2926c:	cmp	r0, #0
   29270:	bne	292bc <__assert_fail@plt+0x14c64>
   29274:	ldrb	r3, [r4, #17]
   29278:	tst	r3, #223	; 0xdf
   2927c:	bne	292bc <__assert_fail@plt+0x14c64>
   29280:	cmp	r3, #32
   29284:	add	r1, r4, #17
   29288:	bne	292a4 <__assert_fail@plt+0x14c4c>
   2928c:	add	r4, r4, #18
   29290:	mov	r1, r4
   29294:	add	r4, r4, #1
   29298:	ldrb	r3, [r1]
   2929c:	cmp	r3, #32
   292a0:	beq	29290 <__assert_fail@plt+0x14c38>
   292a4:	ldr	ip, [r7, #4]
   292a8:	mov	r2, #0
   292ac:	ldr	r0, [r7, #8]
   292b0:	mov	r3, #1
   292b4:	blx	ip
   292b8:	b	29240 <__assert_fail@plt+0x14be8>
   292bc:	movw	r1, #28832	; 0x70a0
   292c0:	mov	r0, r4
   292c4:	movt	r1, #4
   292c8:	mov	r2, #19
   292cc:	bl	145bc <strncmp@plt>
   292d0:	cmp	r0, #0
   292d4:	beq	2934c <__assert_fail@plt+0x14cf4>
   292d8:	ldr	r5, [r7, #12]
   292dc:	cmp	r5, #0
   292e0:	beq	29470 <__assert_fail@plt+0x14e18>
   292e4:	movw	r1, #28852	; 0x70b4
   292e8:	mov	r0, r4
   292ec:	movt	r1, #4
   292f0:	bl	13a28 <strcmp@plt>
   292f4:	cmp	r0, #0
   292f8:	mov	r0, r5
   292fc:	beq	2938c <__assert_fail@plt+0x14d34>
   29300:	movw	r3, #8096	; 0x1fa0
   29304:	mov	r1, r4
   29308:	str	r3, [sp]
   2930c:	add	r2, sp, #12
   29310:	add	r3, sp, #16
   29314:	bl	13dd0 <assuan_inquire@plt>
   29318:	cmp	r0, #0
   2931c:	mov	r8, r0
   29320:	mov	r5, r0
   29324:	bne	293c8 <__assert_fail@plt+0x14d70>
   29328:	ldr	r0, [r7]
   2932c:	ldr	r1, [sp, #12]
   29330:	ldr	r2, [sp, #16]
   29334:	bl	1413c <assuan_send_data@plt>
   29338:	mov	r5, r0
   2933c:	ldr	r0, [sp, #12]
   29340:	bl	13c44 <gcry_free@plt>
   29344:	mov	r0, r5
   29348:	b	29240 <__assert_fail@plt+0x14be8>
   2934c:	ldrb	r2, [r4, #19]
   29350:	ands	r2, r2, #223	; 0xdf
   29354:	bne	292d8 <__assert_fail@plt+0x14c80>
   29358:	movw	r1, #18888	; 0x49c8
   2935c:	mov	r3, r2
   29360:	movt	r1, #4
   29364:	ldr	ip, [r7, #4]
   29368:	ldr	r0, [r7, #8]
   2936c:	blx	ip
   29370:	b	29240 <__assert_fail@plt+0x14be8>
   29374:	ldr	r0, [r7]
   29378:	mov	r1, r4
   2937c:	mov	r2, #90	; 0x5a
   29380:	bl	1413c <assuan_send_data@plt>
   29384:	mov	r5, r0
   29388:	b	29234 <__assert_fail@plt+0x14bdc>
   2938c:	mov	r1, #2
   29390:	bl	13ec0 <assuan_get_flag@plt>
   29394:	cmp	r0, #0
   29398:	ldr	r0, [r7, #12]
   2939c:	beq	293e8 <__assert_fail@plt+0x14d90>
   293a0:	movw	r3, #8096	; 0x1fa0
   293a4:	mov	r1, r4
   293a8:	str	r3, [sp]
   293ac:	add	r2, sp, #12
   293b0:	add	r3, sp, #16
   293b4:	bl	13dd0 <assuan_inquire@plt>
   293b8:	cmp	r0, #0
   293bc:	mov	r8, r0
   293c0:	mov	r5, r0
   293c4:	beq	29420 <__assert_fail@plt+0x14dc8>
   293c8:	mov	r0, r8
   293cc:	bl	13a64 <gpg_strerror@plt>
   293d0:	mov	r1, r4
   293d4:	mov	r2, r0
   293d8:	movw	r0, #28860	; 0x70bc
   293dc:	movt	r0, #4
   293e0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   293e4:	b	29344 <__assert_fail@plt+0x14cec>
   293e8:	bl	13dac <assuan_begin_confidential@plt>
   293ec:	ldr	r0, [r7, #12]
   293f0:	movw	r3, #8096	; 0x1fa0
   293f4:	mov	r1, r4
   293f8:	str	r3, [sp]
   293fc:	add	r2, sp, #12
   29400:	add	r3, sp, #16
   29404:	bl	13dd0 <assuan_inquire@plt>
   29408:	mov	r8, r0
   2940c:	ldr	r0, [r7, #12]
   29410:	bl	13de8 <assuan_end_confidential@plt>
   29414:	cmp	r8, #0
   29418:	mov	r5, r8
   2941c:	bne	293c8 <__assert_fail@plt+0x14d70>
   29420:	ldr	r0, [r7]
   29424:	mov	r1, #2
   29428:	bl	13ec0 <assuan_get_flag@plt>
   2942c:	cmp	r0, #0
   29430:	bne	29328 <__assert_fail@plt+0x14cd0>
   29434:	ldr	r0, [r7]
   29438:	bl	13dac <assuan_begin_confidential@plt>
   2943c:	ldr	r0, [r7]
   29440:	ldr	r1, [sp, #12]
   29444:	ldr	r2, [sp, #16]
   29448:	bl	1413c <assuan_send_data@plt>
   2944c:	mov	r5, r0
   29450:	ldr	r0, [r7]
   29454:	bl	13de8 <assuan_end_confidential@plt>
   29458:	b	2933c <__assert_fail@plt+0x14ce4>
   2945c:	bl	14580 <gpg_err_code_from_syserror@plt>
   29460:	cmp	r0, #0
   29464:	uxthne	r0, r0
   29468:	orrne	r0, r0, #67108864	; 0x4000000
   2946c:	b	29240 <__assert_fail@plt+0x14be8>
   29470:	mov	r1, r4
   29474:	movw	r0, #28896	; 0x70e0
   29478:	movt	r0, #4
   2947c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   29480:	movw	r0, #281	; 0x119
   29484:	movt	r0, #1024	; 0x400
   29488:	b	29240 <__assert_fail@plt+0x14be8>
   2948c:	bl	13cec <__stack_chk_fail@plt>
   29490:	push	{r4, r5, lr}
   29494:	movw	r4, #47296	; 0xb8c0
   29498:	movt	r4, #5
   2949c:	ldrb	r3, [r1]
   294a0:	mov	r2, r1
   294a4:	sub	sp, sp, #212	; 0xd4
   294a8:	ldr	r1, [r4]
   294ac:	ands	ip, r3, #223	; 0xdf
   294b0:	str	r1, [sp, #204]	; 0xcc
   294b4:	beq	295b0 <__assert_fail@plt+0x14f58>
   294b8:	cmp	r3, #9
   294bc:	beq	295bc <__assert_fail@plt+0x14f64>
   294c0:	add	lr, r2, #1
   294c4:	add	r1, sp, #4
   294c8:	mov	ip, #0
   294cc:	b	294e0 <__assert_fail@plt+0x14e88>
   294d0:	cmp	r3, #9
   294d4:	beq	29538 <__assert_fail@plt+0x14ee0>
   294d8:	cmp	ip, #199	; 0xc7
   294dc:	beq	29538 <__assert_fail@plt+0x14ee0>
   294e0:	strb	r3, [r1, ip]
   294e4:	mov	r2, lr
   294e8:	ldrb	r3, [lr]
   294ec:	add	ip, ip, #1
   294f0:	add	lr, lr, #1
   294f4:	tst	r3, #223	; 0xdf
   294f8:	bne	294d0 <__assert_fail@plt+0x14e78>
   294fc:	mov	lr, r3
   29500:	add	r5, sp, #208	; 0xd0
   29504:	cmp	r3, #0
   29508:	add	ip, r5, ip
   2950c:	mov	r5, #0
   29510:	strb	r5, [ip, #-204]	; 0xffffff34
   29514:	bne	2954c <__assert_fail@plt+0x14ef4>
   29518:	bl	13c2c <assuan_write_status@plt>
   2951c:	ldr	r2, [sp, #204]	; 0xcc
   29520:	ldr	r3, [r4]
   29524:	mov	r0, #0
   29528:	cmp	r2, r3
   2952c:	bne	295cc <__assert_fail@plt+0x14f74>
   29530:	add	sp, sp, #212	; 0xd4
   29534:	pop	{r4, r5, pc}
   29538:	mov	lr, r3
   2953c:	add	r5, sp, #208	; 0xd0
   29540:	add	ip, r5, ip
   29544:	mov	r5, #0
   29548:	strb	r5, [ip, #-204]	; 0xffffff34
   2954c:	cmp	r3, #9
   29550:	cmpne	r3, #32
   29554:	beq	29588 <__assert_fail@plt+0x14f30>
   29558:	add	ip, r2, #1
   2955c:	b	2956c <__assert_fail@plt+0x14f14>
   29560:	cmp	r3, #9
   29564:	cmpne	r3, #32
   29568:	beq	29584 <__assert_fail@plt+0x14f2c>
   2956c:	mov	r2, ip
   29570:	add	ip, ip, #1
   29574:	ldrb	r3, [r2]
   29578:	cmp	r3, #0
   2957c:	bne	29560 <__assert_fail@plt+0x14f08>
   29580:	b	29518 <__assert_fail@plt+0x14ec0>
   29584:	mov	lr, r3
   29588:	cmp	lr, #32
   2958c:	cmpne	lr, #9
   29590:	addeq	r3, r2, #1
   29594:	bne	29518 <__assert_fail@plt+0x14ec0>
   29598:	mov	r2, r3
   2959c:	ldrb	ip, [r3], #1
   295a0:	cmp	ip, #32
   295a4:	cmpne	ip, #9
   295a8:	beq	29598 <__assert_fail@plt+0x14f40>
   295ac:	b	29518 <__assert_fail@plt+0x14ec0>
   295b0:	mov	lr, r3
   295b4:	add	r1, sp, #4
   295b8:	b	29500 <__assert_fail@plt+0x14ea8>
   295bc:	mov	lr, r3
   295c0:	mov	ip, #0
   295c4:	add	r1, sp, #4
   295c8:	b	2953c <__assert_fail@plt+0x14ee4>
   295cc:	bl	13cec <__stack_chk_fail@plt>
   295d0:	uxth	r3, r1
   295d4:	cmp	r3, #176	; 0xb0
   295d8:	push	{r4, r5, lr}
   295dc:	mov	r4, r1
   295e0:	sub	sp, sp, #20
   295e4:	mov	r5, r0
   295e8:	beq	2962c <__assert_fail@plt+0x14fd4>
   295ec:	ldr	r3, [r5]
   295f0:	ldr	r1, [r3, #12]
   295f4:	cmp	r1, #1
   295f8:	beq	29618 <__assert_fail@plt+0x14fc0>
   295fc:	movw	r0, #28928	; 0x7100
   29600:	movt	r0, #4
   29604:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   29608:	cmp	r4, #0
   2960c:	ldr	r3, [r5]
   29610:	moveq	r4, #63	; 0x3f
   29614:	movteq	r4, #1024	; 0x400
   29618:	mov	r0, r4
   2961c:	mov	r2, #0
   29620:	str	r2, [r3, #12]
   29624:	add	sp, sp, #20
   29628:	pop	{r4, r5, pc}
   2962c:	ubfx	r3, r1, #24, #7
   29630:	cmp	r3, #6
   29634:	bne	295ec <__assert_fail@plt+0x14f94>
   29638:	movw	r3, #47612	; 0xb9fc
   2963c:	movt	r3, #5
   29640:	mov	ip, #0
   29644:	movw	r1, #28924	; 0x70fc
   29648:	ldr	r0, [r3]
   2964c:	mov	r2, ip
   29650:	str	ip, [sp]
   29654:	mov	r3, ip
   29658:	str	ip, [sp, #4]
   2965c:	movt	r1, #4
   29660:	str	ip, [sp, #8]
   29664:	str	ip, [sp, #12]
   29668:	bl	13ef0 <assuan_transact@plt>
   2966c:	b	295ec <__assert_fail@plt+0x14f94>
   29670:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29674:	movw	r5, #48116	; 0xbbf4
   29678:	movt	r5, #5
   2967c:	movw	r4, #47296	; 0xb8c0
   29680:	movt	r4, #5
   29684:	sub	sp, sp, #180	; 0xb4
   29688:	ldr	r3, [r5, #52]	; 0x34
   2968c:	mov	r1, #0
   29690:	ldr	r2, [r4]
   29694:	mov	r7, r0
   29698:	cmp	r3, r1
   2969c:	str	r1, [sp, #24]
   296a0:	movne	r6, #60	; 0x3c
   296a4:	str	r2, [sp, #172]	; 0xac
   296a8:	movtne	r6, #1024	; 0x400
   296ac:	beq	296cc <__assert_fail@plt+0x15074>
   296b0:	ldr	r2, [sp, #172]	; 0xac
   296b4:	mov	r0, r6
   296b8:	ldr	r3, [r4]
   296bc:	cmp	r2, r3
   296c0:	bne	298d0 <__assert_fail@plt+0x15278>
   296c4:	add	sp, sp, #180	; 0xb4
   296c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   296cc:	ldr	r3, [r0, #8]
   296d0:	cmp	r3, r1
   296d4:	beq	29798 <__assert_fail@plt+0x15140>
   296d8:	ldr	r6, [r3, #12]
   296dc:	cmp	r6, #0
   296e0:	bne	2977c <__assert_fail@plt+0x15124>
   296e4:	ldr	r2, [r3, #8]
   296e8:	mov	r1, #1
   296ec:	str	r1, [r3, #12]
   296f0:	cmp	r2, #0
   296f4:	bne	296b0 <__assert_fail@plt+0x15058>
   296f8:	movw	r8, #47612	; 0xb9fc
   296fc:	movt	r8, #5
   29700:	add	r0, r8, #8
   29704:	mov	r1, r6
   29708:	mov	r2, r6
   2970c:	bl	14364 <pth_mutex_acquire@plt>
   29710:	cmp	r0, #0
   29714:	beq	297d0 <__assert_fail@plt+0x15178>
   29718:	ldr	r3, [r8]
   2971c:	cmp	r3, #0
   29720:	beq	297f8 <__assert_fail@plt+0x151a0>
   29724:	ldr	r2, [r8, #28]
   29728:	cmp	r2, #0
   2972c:	beq	297f8 <__assert_fail@plt+0x151a0>
   29730:	ldr	r2, [r5, #4]
   29734:	str	r3, [sp, #24]
   29738:	cmp	r2, #0
   2973c:	str	r6, [r8, #28]
   29740:	bne	29898 <__assert_fail@plt+0x15240>
   29744:	ldr	r2, [r7, #8]
   29748:	str	r3, [r2, #8]
   2974c:	ldr	r0, [pc, #1248]	; 29c34 <__assert_fail@plt+0x155dc>
   29750:	bl	14220 <pth_mutex_release@plt>
   29754:	cmp	r0, #0
   29758:	bne	296b0 <__assert_fail@plt+0x15058>
   2975c:	bl	14148 <__errno_location@plt>
   29760:	ldr	r0, [r0]
   29764:	bl	13fa4 <strerror@plt>
   29768:	mov	r1, r0
   2976c:	movw	r0, #29484	; 0x732c
   29770:	movt	r0, #4
   29774:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   29778:	b	296b0 <__assert_fail@plt+0x15058>
   2977c:	mov	r1, r6
   29780:	movw	r0, #28968	; 0x7128
   29784:	movt	r0, #4
   29788:	mov	r6, #63	; 0x3f
   2978c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   29790:	movt	r6, #1024	; 0x400
   29794:	b	296b0 <__assert_fail@plt+0x15058>
   29798:	mov	r0, #1
   2979c:	mov	r1, #16
   297a0:	bl	14190 <gcry_calloc@plt>
   297a4:	cmp	r0, #0
   297a8:	str	r0, [r7, #8]
   297ac:	beq	29848 <__assert_fail@plt+0x151f0>
   297b0:	movw	r2, #47612	; 0xb9fc
   297b4:	movt	r2, #5
   297b8:	ldr	r3, [r7, #8]
   297bc:	ldr	r1, [r2, #4]
   297c0:	str	r7, [r0, #4]
   297c4:	str	r0, [r2, #4]
   297c8:	str	r1, [r0]
   297cc:	b	296d8 <__assert_fail@plt+0x15080>
   297d0:	bl	14148 <__errno_location@plt>
   297d4:	mov	r6, #63	; 0x3f
   297d8:	movt	r6, #1024	; 0x400
   297dc:	ldr	r0, [r0]
   297e0:	bl	13fa4 <strerror@plt>
   297e4:	mov	r1, r0
   297e8:	movw	r0, #29004	; 0x714c
   297ec:	movt	r0, #4
   297f0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   297f4:	b	296b0 <__assert_fail@plt+0x15058>
   297f8:	add	r0, sp, #24
   297fc:	bl	14070 <assuan_new@plt>
   29800:	subs	r9, r0, #0
   29804:	bne	29860 <__assert_fail@plt+0x15208>
   29808:	ldr	r1, [r8, #32]
   2980c:	movw	sl, #47612	; 0xb9fc
   29810:	movt	sl, #5
   29814:	cmp	r1, #0
   29818:	beq	298ac <__assert_fail@plt+0x15254>
   2981c:	mov	r2, r9
   29820:	mov	r3, r9
   29824:	ldr	r0, [sp, #24]
   29828:	bl	14640 <assuan_socket_connect@plt>
   2982c:	cmp	r0, #0
   29830:	bne	298d4 <__assert_fail@plt+0x1527c>
   29834:	ldr	r3, [r5, #4]
   29838:	cmp	r3, #0
   2983c:	bne	298fc <__assert_fail@plt+0x152a4>
   29840:	ldr	r3, [sp, #24]
   29844:	b	29744 <__assert_fail@plt+0x150ec>
   29848:	bl	14580 <gpg_err_code_from_syserror@plt>
   2984c:	cmp	r0, #0
   29850:	uxthne	r0, r0
   29854:	orrne	r6, r0, #67108864	; 0x4000000
   29858:	moveq	r6, r0
   2985c:	b	296b0 <__assert_fail@plt+0x15058>
   29860:	bl	13a64 <gpg_strerror@plt>
   29864:	mov	r1, r0
   29868:	movw	r0, #2096	; 0x830
   2986c:	movt	r0, #4
   29870:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   29874:	add	r0, r7, #8
   29878:	mov	r1, r9
   2987c:	bl	295d0 <__assert_fail@plt+0x14f78>
   29880:	ldr	r0, [sp, #24]
   29884:	mov	r6, r9
   29888:	cmp	r0, #0
   2988c:	beq	2974c <__assert_fail@plt+0x150f4>
   29890:	bl	14388 <assuan_release@plt>
   29894:	b	2974c <__assert_fail@plt+0x150f4>
   29898:	movw	r0, #29048	; 0x7178
   2989c:	movt	r0, #4
   298a0:	bl	3f478 <__assert_fail@plt+0x2ae20>
   298a4:	ldr	r3, [sp, #24]
   298a8:	b	29744 <__assert_fail@plt+0x150ec>
   298ac:	ldr	r3, [sl]
   298b0:	cmp	r3, #0
   298b4:	beq	2990c <__assert_fail@plt+0x152b4>
   298b8:	movw	r0, #29176	; 0x71f8
   298bc:	movt	r0, #4
   298c0:	mov	r9, #119	; 0x77
   298c4:	bl	3f478 <__assert_fail@plt+0x2ae20>
   298c8:	movt	r9, #1024	; 0x400
   298cc:	b	29874 <__assert_fail@plt+0x1521c>
   298d0:	bl	13cec <__stack_chk_fail@plt>
   298d4:	ldr	r5, [sl, #32]
   298d8:	bl	13a64 <gpg_strerror@plt>
   298dc:	mov	r9, #119	; 0x77
   298e0:	movt	r9, #1024	; 0x400
   298e4:	mov	r1, r5
   298e8:	mov	r2, r0
   298ec:	movw	r0, #29100	; 0x71ac
   298f0:	movt	r0, #4
   298f4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   298f8:	b	29874 <__assert_fail@plt+0x1521c>
   298fc:	movw	r0, #29136	; 0x71d0
   29900:	movt	r0, #4
   29904:	bl	3f478 <__assert_fail@plt+0x2ae20>
   29908:	b	29840 <__assert_fail@plt+0x151e8>
   2990c:	ldr	r3, [r5, #4]
   29910:	cmp	r3, #0
   29914:	beq	29924 <__assert_fail@plt+0x152cc>
   29918:	movw	r0, #29236	; 0x7234
   2991c:	movt	r0, #4
   29920:	bl	3f478 <__assert_fail@plt+0x2ae20>
   29924:	mov	r0, #0
   29928:	bl	13ae8 <fflush@plt>
   2992c:	cmp	r0, #0
   29930:	bne	29b48 <__assert_fail@plt+0x154f0>
   29934:	ldr	r3, [r5, #48]	; 0x30
   29938:	cmp	r3, #0
   2993c:	beq	2994c <__assert_fail@plt+0x152f4>
   29940:	ldrb	r3, [r3]
   29944:	cmp	r3, #0
   29948:	bne	29958 <__assert_fail@plt+0x15300>
   2994c:	mov	r0, #3
   29950:	bl	2ca10 <__assert_fail@plt+0x183b8>
   29954:	str	r0, [r5, #48]	; 0x30
   29958:	ldr	r9, [r5, #48]	; 0x30
   2995c:	mov	r1, #47	; 0x2f
   29960:	mov	sl, #0
   29964:	mov	r0, r9
   29968:	bl	143b8 <strrchr@plt>
   2996c:	ldr	fp, [r5, #104]	; 0x68
   29970:	movw	r3, #29272	; 0x7258
   29974:	str	sl, [sp, #40]	; 0x28
   29978:	movt	r3, #4
   2997c:	str	r3, [sp, #36]	; 0x24
   29980:	cmp	r0, #0
   29984:	addne	r9, r0, #1
   29988:	cmp	fp, #0
   2998c:	str	r9, [sp, #32]
   29990:	beq	29b08 <__assert_fail@plt+0x154b0>
   29994:	add	r3, sp, #176	; 0xb0
   29998:	mov	r2, #0
   2999c:	add	sl, r3, sl, lsl #2
   299a0:	str	r2, [sp, #4]
   299a4:	mov	r1, #128	; 0x80
   299a8:	mvn	ip, #0
   299ac:	str	r1, [sp, #8]
   299b0:	movw	r3, #36888	; 0x9018
   299b4:	add	r2, sp, #32
   299b8:	movt	r3, #2
   299bc:	ldr	r0, [sp, #24]
   299c0:	movw	r9, #48116	; 0xbbf4
   299c4:	str	r3, [sp]
   299c8:	add	r3, sp, #44	; 0x2c
   299cc:	ldr	r1, [r5, #48]	; 0x30
   299d0:	movt	r9, #5
   299d4:	str	ip, [sl, #-132]	; 0xffffff7c
   299d8:	bl	13f38 <assuan_pipe_connect@plt>
   299dc:	cmp	r0, #0
   299e0:	bne	29b7c <__assert_fail@plt+0x15524>
   299e4:	ldr	r3, [r9, #4]
   299e8:	cmp	r3, #0
   299ec:	beq	299fc <__assert_fail@plt+0x153a4>
   299f0:	movw	r0, #29324	; 0x728c
   299f4:	movt	r0, #4
   299f8:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   299fc:	ldr	r3, [r5]
   29a00:	tst	r3, #1024	; 0x400
   29a04:	beq	29a1c <__assert_fail@plt+0x153c4>
   29a08:	ldr	r9, [sp, #24]
   29a0c:	bl	3f454 <__assert_fail@plt+0x2adfc>
   29a10:	mov	r1, r0
   29a14:	mov	r0, r9
   29a18:	bl	14514 <assuan_set_log_stream@plt>
   29a1c:	ldr	r0, [r8, #32]
   29a20:	mov	r9, #0
   29a24:	bl	13c44 <gcry_free@plt>
   29a28:	mov	r1, #256	; 0x100
   29a2c:	add	r0, sp, #56	; 0x38
   29a30:	str	r9, [r8, #32]
   29a34:	bl	2ed78 <__assert_fail@plt+0x1a720>
   29a38:	add	r3, sp, #56	; 0x38
   29a3c:	str	r9, [sp]
   29a40:	movw	r1, #29368	; 0x72b8
   29a44:	str	r9, [sp, #4]
   29a48:	movt	r1, #4
   29a4c:	str	r9, [sp, #8]
   29a50:	movw	r2, #36864	; 0x9000
   29a54:	str	r9, [sp, #12]
   29a58:	movt	r2, #2
   29a5c:	ldr	r0, [sp, #24]
   29a60:	movw	fp, #47612	; 0xb9fc
   29a64:	bl	13ef0 <assuan_transact@plt>
   29a68:	add	r0, sp, #56	; 0x38
   29a6c:	add	r1, sp, #28
   29a70:	movt	fp, #5
   29a74:	bl	2eecc <__assert_fail@plt+0x1a874>
   29a78:	cmp	r0, #0
   29a7c:	str	r0, [sp, #20]
   29a80:	beq	29a90 <__assert_fail@plt+0x15438>
   29a84:	ldr	r0, [sp, #28]
   29a88:	cmp	r0, r9
   29a8c:	bne	29bc0 <__assert_fail@plt+0x15568>
   29a90:	ldr	r0, [sp, #20]
   29a94:	bl	13c44 <gcry_free@plt>
   29a98:	ldr	r3, [r5, #40]	; 0x28
   29a9c:	cmp	r3, #0
   29aa0:	beq	29af4 <__assert_fail@plt+0x1549c>
   29aa4:	mov	r1, #100	; 0x64
   29aa8:	mov	ip, #12
   29aac:	mov	r3, r1
   29ab0:	movw	r2, #29460	; 0x7314
   29ab4:	add	r0, sp, #72	; 0x48
   29ab8:	movt	r2, #4
   29abc:	str	ip, [sp, #4]
   29ac0:	str	r2, [sp]
   29ac4:	mov	r2, #1
   29ac8:	bl	1464c <__snprintf_chk@plt>
   29acc:	mov	r0, #0
   29ad0:	mov	r2, r0
   29ad4:	str	r0, [sp]
   29ad8:	mov	r3, r0
   29adc:	str	r0, [sp, #4]
   29ae0:	str	r0, [sp, #8]
   29ae4:	add	r1, sp, #72	; 0x48
   29ae8:	str	r0, [sp, #12]
   29aec:	ldr	r0, [sp, #24]
   29af0:	bl	13ef0 <assuan_transact@plt>
   29af4:	ldr	r3, [sp, #24]
   29af8:	mov	r2, #0
   29afc:	str	r2, [r8, #28]
   29b00:	str	r3, [r8]
   29b04:	b	29744 <__assert_fail@plt+0x150ec>
   29b08:	bl	3f434 <__assert_fail@plt+0x2addc>
   29b0c:	cmn	r0, #1
   29b10:	moveq	r9, fp
   29b14:	beq	29b24 <__assert_fail@plt+0x154cc>
   29b18:	bl	3f434 <__assert_fail@plt+0x2addc>
   29b1c:	mov	r9, #1
   29b20:	str	r0, [sp, #44]	; 0x2c
   29b24:	movw	r3, #47304	; 0xb8c8
   29b28:	movt	r3, #5
   29b2c:	add	sl, r9, #1
   29b30:	ldr	r0, [r3]
   29b34:	bl	14244 <fileno@plt>
   29b38:	add	r3, sp, #176	; 0xb0
   29b3c:	add	r9, r3, r9, lsl #2
   29b40:	str	r0, [r9, #-132]	; 0xffffff7c
   29b44:	b	29994 <__assert_fail@plt+0x1533c>
   29b48:	bl	14580 <gpg_err_code_from_syserror@plt>
   29b4c:	cmp	r0, #0
   29b50:	beq	29b9c <__assert_fail@plt+0x15544>
   29b54:	uxth	r9, r0
   29b58:	bl	14148 <__errno_location@plt>
   29b5c:	orr	r9, r9, #67108864	; 0x4000000
   29b60:	ldr	r0, [r0]
   29b64:	bl	13fa4 <strerror@plt>
   29b68:	mov	r1, r0
   29b6c:	movw	r0, #21108	; 0x5274
   29b70:	movt	r0, #4
   29b74:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   29b78:	b	29874 <__assert_fail@plt+0x1521c>
   29b7c:	bl	13a64 <gpg_strerror@plt>
   29b80:	mov	r9, #119	; 0x77
   29b84:	movt	r9, #1024	; 0x400
   29b88:	mov	r1, r0
   29b8c:	movw	r0, #29288	; 0x7268
   29b90:	movt	r0, #4
   29b94:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   29b98:	b	29874 <__assert_fail@plt+0x1521c>
   29b9c:	bl	14148 <__errno_location@plt>
   29ba0:	ldr	r0, [r0]
   29ba4:	bl	13fa4 <strerror@plt>
   29ba8:	mov	r1, r0
   29bac:	movw	r0, #21108	; 0x5274
   29bb0:	movt	r0, #4
   29bb4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   29bb8:	ldr	r3, [sp, #24]
   29bbc:	b	29744 <__assert_fail@plt+0x150ec>
   29bc0:	add	r0, r0, #1
   29bc4:	bl	139c8 <gcry_malloc@plt>
   29bc8:	cmp	r0, r9
   29bcc:	mov	sl, r0
   29bd0:	str	r0, [fp, #32]
   29bd4:	beq	29c14 <__assert_fail@plt+0x155bc>
   29bd8:	ldr	r3, [sp, #28]
   29bdc:	ldr	r1, [sp, #20]
   29be0:	mov	r2, r3
   29be4:	str	r3, [sp, #16]
   29be8:	bl	13ba8 <memcpy@plt>
   29bec:	ldr	r2, [r5]
   29bf0:	ldr	r3, [sp, #16]
   29bf4:	tst	r2, #1024	; 0x400
   29bf8:	strb	r9, [sl, r3]
   29bfc:	beq	29a90 <__assert_fail@plt+0x15438>
   29c00:	mov	r1, sl
   29c04:	movw	r0, #29428	; 0x72f4
   29c08:	movt	r0, #4
   29c0c:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   29c10:	b	29a90 <__assert_fail@plt+0x15438>
   29c14:	bl	14148 <__errno_location@plt>
   29c18:	ldr	r0, [r0]
   29c1c:	bl	13fa4 <strerror@plt>
   29c20:	mov	r1, r0
   29c24:	movw	r0, #29388	; 0x72cc
   29c28:	movt	r0, #4
   29c2c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   29c30:	b	29a90 <__assert_fail@plt+0x15438>
   29c34:	andeq	fp, r5, r4, lsl #20
   29c38:	ldr	r2, [r0, #8]
   29c3c:	push	{r3, r4, r5, lr}
   29c40:	cmp	r2, #0
   29c44:	mov	r5, r0
   29c48:	beq	29c54 <__assert_fail@plt+0x155fc>
   29c4c:	mov	r0, #0
   29c50:	pop	{r3, r4, r5, pc}
   29c54:	ldrb	r3, [r1]
   29c58:	cmp	r3, #0
   29c5c:	beq	29d18 <__assert_fail@plt+0x156c0>
   29c60:	cmp	r3, #9
   29c64:	cmpne	r3, #32
   29c68:	moveq	r0, #0
   29c6c:	movne	r0, #1
   29c70:	beq	29ce8 <__assert_fail@plt+0x15690>
   29c74:	add	ip, r1, #1
   29c78:	b	29c88 <__assert_fail@plt+0x15630>
   29c7c:	cmp	r3, #9
   29c80:	cmpne	r3, #32
   29c84:	beq	29cf0 <__assert_fail@plt+0x15698>
   29c88:	ldrb	r3, [ip]
   29c8c:	mov	r4, ip
   29c90:	add	r2, r2, #1
   29c94:	add	ip, ip, #1
   29c98:	cmp	r3, #0
   29c9c:	bne	29c7c <__assert_fail@plt+0x15624>
   29ca0:	ldr	r3, [r5, #4]
   29ca4:	cmp	r3, r2
   29ca8:	bne	29c4c <__assert_fail@plt+0x155f4>
   29cac:	mov	r0, r1
   29cb0:	ldr	r1, [r5]
   29cb4:	bl	13c80 <memcmp@plt>
   29cb8:	cmp	r0, #0
   29cbc:	bne	29c4c <__assert_fail@plt+0x155f4>
   29cc0:	mov	r0, r4
   29cc4:	mov	r1, #255	; 0xff
   29cc8:	bl	2e888 <__assert_fail@plt+0x1a230>
   29ccc:	cmp	r0, #0
   29cd0:	str	r0, [r5, #8]
   29cd4:	bne	29c4c <__assert_fail@plt+0x155f4>
   29cd8:	bl	14148 <__errno_location@plt>
   29cdc:	ldr	r3, [r0]
   29ce0:	str	r3, [r5, #12]
   29ce4:	b	29c4c <__assert_fail@plt+0x155f4>
   29ce8:	mov	r2, r0
   29cec:	mov	r4, r1
   29cf0:	cmp	r3, #9
   29cf4:	cmpne	r3, #32
   29cf8:	bne	29ca0 <__assert_fail@plt+0x15648>
   29cfc:	add	r3, r4, #1
   29d00:	mov	r4, r3
   29d04:	ldrb	ip, [r3], #1
   29d08:	cmp	ip, #32
   29d0c:	cmpne	ip, #9
   29d10:	beq	29d00 <__assert_fail@plt+0x156a8>
   29d14:	b	29ca0 <__assert_fail@plt+0x15648>
   29d18:	mov	r2, r3
   29d1c:	mov	r4, r1
   29d20:	b	29ca0 <__assert_fail@plt+0x15648>
   29d24:	push	{r4, lr}
   29d28:	movw	r4, #47612	; 0xb9fc
   29d2c:	movt	r4, #5
   29d30:	ldr	r3, [r4, #36]	; 0x24
   29d34:	cmp	r3, #0
   29d38:	popne	{r4, pc}
   29d3c:	add	r0, r4, #8
   29d40:	bl	13980 <pth_mutex_init@plt>
   29d44:	cmp	r0, #0
   29d48:	movne	r3, #1
   29d4c:	strne	r3, [r4, #36]	; 0x24
   29d50:	popne	{r4, pc}
   29d54:	bl	14148 <__errno_location@plt>
   29d58:	ldr	r0, [r0]
   29d5c:	bl	13fa4 <strerror@plt>
   29d60:	mov	r1, r0
   29d64:	movw	r0, #27768	; 0x6c78
   29d68:	movt	r0, #4
   29d6c:	bl	3f544 <__assert_fail@plt+0x2aeec>
   29d70:	push	{r3, r4, r5, lr}
   29d74:	movw	r4, #47612	; 0xb9fc
   29d78:	movt	r4, #5
   29d7c:	movw	r0, #29528	; 0x7358
   29d80:	movt	r0, #4
   29d84:	bl	3f478 <__assert_fail@plt+0x2ae20>
   29d88:	ldr	r3, [r4, #16]
   29d8c:	tst	r3, #1
   29d90:	beq	29e0c <__assert_fail@plt+0x157b4>
   29d94:	tst	r3, #2
   29d98:	beq	29dfc <__assert_fail@plt+0x157a4>
   29d9c:	movw	r0, #21752	; 0x54f8
   29da0:	ldr	r1, [r4, #20]
   29da4:	movt	r0, #4
   29da8:	ldr	r2, [r4, #24]
   29dac:	bl	3f60c <__assert_fail@plt+0x2afb4>
   29db0:	movw	r0, #33896	; 0x8468
   29db4:	movt	r0, #4
   29db8:	bl	3f60c <__assert_fail@plt+0x2afb4>
   29dbc:	ldr	r5, [r4]
   29dc0:	mov	r0, r5
   29dc4:	bl	14544 <assuan_get_pid@plt>
   29dc8:	mov	r1, r5
   29dcc:	ldr	r3, [r4, #28]
   29dd0:	mov	r2, r0
   29dd4:	movw	r0, #29560	; 0x7378
   29dd8:	movt	r0, #4
   29ddc:	bl	3f478 <__assert_fail@plt+0x2ae20>
   29de0:	ldr	r1, [r4, #32]
   29de4:	cmp	r1, #0
   29de8:	popeq	{r3, r4, r5, pc}
   29dec:	movw	r0, #29624	; 0x73b8
   29df0:	movt	r0, #4
   29df4:	pop	{r3, r4, r5, lr}
   29df8:	b	3f478 <__assert_fail@plt+0x2ae20>
   29dfc:	movw	r0, #21740	; 0x54ec
   29e00:	movt	r0, #4
   29e04:	bl	3f60c <__assert_fail@plt+0x2afb4>
   29e08:	b	29db0 <__assert_fail@plt+0x15758>
   29e0c:	movw	r0, #21724	; 0x54dc
   29e10:	movt	r0, #4
   29e14:	bl	3f60c <__assert_fail@plt+0x2afb4>
   29e18:	b	29db0 <__assert_fail@plt+0x15758>
   29e1c:	movw	r3, #47612	; 0xb9fc
   29e20:	movt	r3, #5
   29e24:	ldr	r0, [r3]
   29e28:	adds	r0, r0, #0
   29e2c:	movne	r0, #1
   29e30:	bx	lr
   29e34:	push	{r4, r5, r6, lr}
   29e38:	movw	r4, #47612	; 0xb9fc
   29e3c:	movt	r4, #5
   29e40:	sub	sp, sp, #8
   29e44:	ldr	r3, [r4]
   29e48:	cmp	r3, #0
   29e4c:	beq	29f2c <__assert_fail@plt+0x158d4>
   29e50:	mov	r1, #1
   29e54:	mov	r2, #0
   29e58:	mov	r0, sp
   29e5c:	bl	14520 <pth_timeout@plt>
   29e60:	ldm	sp, {r1, r2}
   29e64:	mov	r0, #16
   29e68:	bl	13968 <pth_event@plt>
   29e6c:	mov	r1, #0
   29e70:	mov	r5, r0
   29e74:	mov	r2, r0
   29e78:	add	r0, r4, #8
   29e7c:	bl	14364 <pth_mutex_acquire@plt>
   29e80:	cmp	r0, #0
   29e84:	mov	r0, r5
   29e88:	bne	29ed8 <__assert_fail@plt+0x15880>
   29e8c:	bl	14100 <pth_event_status@plt>
   29e90:	cmp	r0, #1
   29e94:	beq	29f34 <__assert_fail@plt+0x158dc>
   29e98:	mov	r0, r5
   29e9c:	bl	14100 <pth_event_status@plt>
   29ea0:	cmp	r0, #2
   29ea4:	beq	29f34 <__assert_fail@plt+0x158dc>
   29ea8:	bl	14148 <__errno_location@plt>
   29eac:	ldr	r0, [r0]
   29eb0:	bl	13fa4 <strerror@plt>
   29eb4:	mov	r1, r0
   29eb8:	movw	r0, #29660	; 0x73dc
   29ebc:	movt	r0, #4
   29ec0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   29ec4:	mov	r0, r5
   29ec8:	mov	r1, #0
   29ecc:	add	sp, sp, #8
   29ed0:	pop	{r4, r5, r6, lr}
   29ed4:	b	13a10 <pth_event_free@plt>
   29ed8:	mov	r1, #0
   29edc:	bl	13a10 <pth_event_free@plt>
   29ee0:	ldr	r0, [r4]
   29ee4:	cmp	r0, #0
   29ee8:	beq	29f1c <__assert_fail@plt+0x158c4>
   29eec:	bl	14544 <assuan_get_pid@plt>
   29ef0:	add	r3, r0, #1
   29ef4:	mov	r5, r0
   29ef8:	cmp	r3, #1
   29efc:	bls	29f1c <__assert_fail@plt+0x158c4>
   29f00:	mov	r1, #0
   29f04:	mov	r2, #1
   29f08:	bl	13e60 <waitpid@plt>
   29f0c:	cmn	r0, #1
   29f10:	beq	29f60 <__assert_fail@plt+0x15908>
   29f14:	cmp	r5, r0
   29f18:	beq	29f60 <__assert_fail@plt+0x15908>
   29f1c:	ldr	r0, [pc, #212]	; 29ff8 <__assert_fail@plt+0x159a0>
   29f20:	bl	14220 <pth_mutex_release@plt>
   29f24:	cmp	r0, #0
   29f28:	beq	29fd4 <__assert_fail@plt+0x1597c>
   29f2c:	add	sp, sp, #8
   29f30:	pop	{r4, r5, r6, pc}
   29f34:	movw	r3, #48116	; 0xbbf4
   29f38:	movt	r3, #5
   29f3c:	ldr	r3, [r3, #4]
   29f40:	cmp	r3, #1
   29f44:	ble	29ec4 <__assert_fail@plt+0x1586c>
   29f48:	movw	r0, #29660	; 0x73dc
   29f4c:	movw	r1, #29736	; 0x7428
   29f50:	movt	r0, #4
   29f54:	movt	r1, #4
   29f58:	bl	3f478 <__assert_fail@plt+0x2ae20>
   29f5c:	b	29ec4 <__assert_fail@plt+0x1586c>
   29f60:	mov	r1, #1
   29f64:	ldr	r0, [r4]
   29f68:	mov	r2, r1
   29f6c:	bl	14460 <assuan_set_flag@plt>
   29f70:	ldr	r0, [r4]
   29f74:	bl	14388 <assuan_release@plt>
   29f78:	ldr	r5, [r4, #4]
   29f7c:	cmp	r5, #0
   29f80:	movne	r6, #0
   29f84:	beq	29fb8 <__assert_fail@plt+0x15960>
   29f88:	ldr	r3, [r5, #8]
   29f8c:	cmp	r3, #0
   29f90:	mov	r0, r3
   29f94:	beq	29fac <__assert_fail@plt+0x15954>
   29f98:	ldr	r2, [r4]
   29f9c:	cmp	r3, r2
   29fa0:	beq	29fa8 <__assert_fail@plt+0x15950>
   29fa4:	bl	14388 <assuan_release@plt>
   29fa8:	str	r6, [r5, #8]
   29fac:	ldr	r5, [r5]
   29fb0:	cmp	r5, #0
   29fb4:	bne	29f88 <__assert_fail@plt+0x15930>
   29fb8:	ldr	r0, [r4, #32]
   29fbc:	mov	r5, #0
   29fc0:	str	r5, [r4]
   29fc4:	str	r5, [r4, #28]
   29fc8:	bl	13c44 <gcry_free@plt>
   29fcc:	str	r5, [r4, #32]
   29fd0:	b	29f1c <__assert_fail@plt+0x158c4>
   29fd4:	bl	14148 <__errno_location@plt>
   29fd8:	ldr	r0, [r0]
   29fdc:	bl	13fa4 <strerror@plt>
   29fe0:	mov	r1, r0
   29fe4:	movw	r0, #29744	; 0x7430
   29fe8:	movt	r0, #4
   29fec:	add	sp, sp, #8
   29ff0:	pop	{r4, r5, r6, lr}
   29ff4:	b	3f4d0 <__assert_fail@plt+0x2ae78>
   29ff8:	andeq	fp, r5, r4, lsl #20
   29ffc:	ldr	r1, [r0, #8]
   2a000:	push	{r4, r5, lr}
   2a004:	cmp	r1, #0
   2a008:	sub	sp, sp, #20
   2a00c:	mov	r5, r0
   2a010:	beq	2a0ac <__assert_fail@plt+0x15a54>
   2a014:	ldr	r0, [r1, #8]
   2a018:	movw	r4, #47612	; 0xb9fc
   2a01c:	movt	r4, #5
   2a020:	cmp	r0, #0
   2a024:	beq	2a044 <__assert_fail@plt+0x159ec>
   2a028:	ldr	r3, [r4]
   2a02c:	cmp	r0, r3
   2a030:	beq	2a0c4 <__assert_fail@plt+0x15a6c>
   2a034:	bl	14388 <assuan_release@plt>
   2a038:	ldr	r1, [r5, #8]
   2a03c:	mov	r3, #0
   2a040:	str	r3, [r1, #8]
   2a044:	ldr	r2, [r4, #4]
   2a048:	movw	r3, #47612	; 0xb9fc
   2a04c:	movt	r3, #5
   2a050:	cmp	r2, #0
   2a054:	beq	2a0f8 <__assert_fail@plt+0x15aa0>
   2a058:	cmp	r2, r1
   2a05c:	bne	2a070 <__assert_fail@plt+0x15a18>
   2a060:	b	2a0b8 <__assert_fail@plt+0x15a60>
   2a064:	cmp	r1, r3
   2a068:	beq	2a094 <__assert_fail@plt+0x15a3c>
   2a06c:	mov	r2, r3
   2a070:	ldr	r3, [r2]
   2a074:	cmp	r3, #0
   2a078:	bne	2a064 <__assert_fail@plt+0x15a0c>
   2a07c:	movw	r0, #29828	; 0x7484
   2a080:	movw	r2, #28744	; 0x7048
   2a084:	movt	r0, #4
   2a088:	movt	r2, #4
   2a08c:	movw	r1, #585	; 0x249
   2a090:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   2a094:	ldr	r3, [r1]
   2a098:	str	r3, [r2]
   2a09c:	mov	r0, r1
   2a0a0:	bl	13c44 <gcry_free@plt>
   2a0a4:	mov	r3, #0
   2a0a8:	str	r3, [r5, #8]
   2a0ac:	mov	r0, #0
   2a0b0:	add	sp, sp, #20
   2a0b4:	pop	{r4, r5, pc}
   2a0b8:	ldr	r2, [r1]
   2a0bc:	str	r2, [r3, #4]
   2a0c0:	b	2a09c <__assert_fail@plt+0x15a44>
   2a0c4:	mov	ip, #0
   2a0c8:	movw	r1, #29820	; 0x747c
   2a0cc:	mov	r3, ip
   2a0d0:	mov	r2, ip
   2a0d4:	str	ip, [sp]
   2a0d8:	movt	r1, #4
   2a0dc:	str	ip, [sp, #4]
   2a0e0:	str	ip, [sp, #8]
   2a0e4:	str	ip, [sp, #12]
   2a0e8:	bl	13ef0 <assuan_transact@plt>
   2a0ec:	mov	r3, #1
   2a0f0:	str	r3, [r4, #28]
   2a0f4:	b	2a038 <__assert_fail@plt+0x159e0>
   2a0f8:	movw	r0, #29828	; 0x7484
   2a0fc:	movw	r2, #28744	; 0x7048
   2a100:	movt	r0, #4
   2a104:	movt	r2, #4
   2a108:	movw	r1, #574	; 0x23e
   2a10c:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   2a110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a114:	movw	r4, #47296	; 0xb8c0
   2a118:	movt	r4, #5
   2a11c:	mov	sl, r2
   2a120:	sub	sp, sp, #52	; 0x34
   2a124:	mov	fp, r1
   2a128:	ldr	r2, [r4]
   2a12c:	mov	r9, r3
   2a130:	mov	r5, r0
   2a134:	ldr	r8, [sp, #88]	; 0x58
   2a138:	ldr	r7, [sp, #92]	; 0x5c
   2a13c:	str	r2, [sp, #44]	; 0x2c
   2a140:	ldr	r6, [sp, #96]	; 0x60
   2a144:	bl	29670 <__assert_fail@plt+0x15018>
   2a148:	subs	ip, r0, #0
   2a14c:	movne	r0, ip
   2a150:	bne	2a1b0 <__assert_fail@plt+0x15b58>
   2a154:	ldr	r1, [r5, #8]
   2a158:	mov	r2, ip
   2a15c:	str	fp, [sp, #20]
   2a160:	movw	lr, #36532	; 0x8eb4
   2a164:	mov	r3, ip
   2a168:	movt	lr, #2
   2a16c:	ldr	r0, [r1, #8]
   2a170:	add	fp, sp, #20
   2a174:	str	ip, [sp]
   2a178:	movw	r1, #29840	; 0x7490
   2a17c:	str	ip, [sp, #4]
   2a180:	movt	r1, #4
   2a184:	str	lr, [sp, #8]
   2a188:	str	fp, [sp, #12]
   2a18c:	str	sl, [sp, #24]
   2a190:	str	r9, [sp, #28]
   2a194:	str	r8, [sp, #32]
   2a198:	str	r7, [sp, #36]	; 0x24
   2a19c:	str	r6, [sp, #40]	; 0x28
   2a1a0:	bl	13ef0 <assuan_transact@plt>
   2a1a4:	subs	r1, r0, #0
   2a1a8:	add	r0, r5, #8
   2a1ac:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a1b0:	ldr	r2, [sp, #44]	; 0x2c
   2a1b4:	ldr	r3, [r4]
   2a1b8:	cmp	r2, r3
   2a1bc:	bne	2a1c8 <__assert_fail@plt+0x15b70>
   2a1c0:	add	sp, sp, #52	; 0x34
   2a1c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a1c8:	bl	13cec <__stack_chk_fail@plt>
   2a1cc:	push	{r4, r5, r6, r7, lr}
   2a1d0:	movw	r4, #47296	; 0xb8c0
   2a1d4:	movt	r4, #5
   2a1d8:	sub	sp, sp, #28
   2a1dc:	mov	r2, #0
   2a1e0:	mov	r6, r1
   2a1e4:	ldr	r3, [r4]
   2a1e8:	mov	r5, r0
   2a1ec:	str	r2, [sp, #16]
   2a1f0:	str	r3, [sp, #20]
   2a1f4:	bl	29670 <__assert_fail@plt+0x15018>
   2a1f8:	subs	ip, r0, #0
   2a1fc:	movne	r0, ip
   2a200:	beq	2a21c <__assert_fail@plt+0x15bc4>
   2a204:	ldr	r2, [sp, #20]
   2a208:	ldr	r3, [r4]
   2a20c:	cmp	r2, r3
   2a210:	bne	2a288 <__assert_fail@plt+0x15c30>
   2a214:	add	sp, sp, #28
   2a218:	pop	{r4, r5, r6, r7, pc}
   2a21c:	ldr	r1, [r5, #8]
   2a220:	add	r7, sp, #16
   2a224:	mov	r2, ip
   2a228:	movw	lr, #36904	; 0x9028
   2a22c:	mov	r3, ip
   2a230:	movt	lr, #2
   2a234:	ldr	r0, [r1, #8]
   2a238:	movw	r1, #19484	; 0x4c1c
   2a23c:	str	r7, [sp, #12]
   2a240:	movt	r1, #4
   2a244:	str	ip, [sp]
   2a248:	stmib	sp, {ip, lr}
   2a24c:	bl	13ef0 <assuan_transact@plt>
   2a250:	subs	r7, r0, #0
   2a254:	bne	2a270 <__assert_fail@plt+0x15c18>
   2a258:	ldr	r3, [sp, #16]
   2a25c:	add	r0, r5, #8
   2a260:	mov	r1, r7
   2a264:	str	r3, [r6]
   2a268:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a26c:	b	2a204 <__assert_fail@plt+0x15bac>
   2a270:	ldr	r0, [sp, #16]
   2a274:	bl	13c44 <gcry_free@plt>
   2a278:	add	r0, r5, #8
   2a27c:	mov	r1, r7
   2a280:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a284:	b	2a204 <__assert_fail@plt+0x15bac>
   2a288:	bl	13cec <__stack_chk_fail@plt>
   2a28c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a290:	sub	sp, sp, #1072	; 0x430
   2a294:	sub	sp, sp, #12
   2a298:	movw	r6, #47296	; 0xb8c0
   2a29c:	movt	r6, #5
   2a2a0:	mov	lr, #0
   2a2a4:	ldr	r9, [sp, #1128]	; 0x468
   2a2a8:	mov	r8, r0
   2a2ac:	ldr	ip, [r6]
   2a2b0:	str	r1, [sp, #20]
   2a2b4:	str	lr, [r9]
   2a2b8:	str	ip, [sp, #1076]	; 0x434
   2a2bc:	str	r2, [sp, #24]
   2a2c0:	str	r3, [sp, #28]
   2a2c4:	ldr	r7, [sp, #1120]	; 0x460
   2a2c8:	ldr	r5, [sp, #1124]	; 0x464
   2a2cc:	ldr	fp, [sp, #1132]	; 0x46c
   2a2d0:	bl	29670 <__assert_fail@plt+0x15018>
   2a2d4:	subs	ip, r0, #0
   2a2d8:	bne	2a534 <__assert_fail@plt+0x15edc>
   2a2dc:	add	r2, r5, #25
   2a2e0:	movw	r3, #1002	; 0x3ea
   2a2e4:	cmp	r3, r2, lsl #1
   2a2e8:	bcc	2a50c <__assert_fail@plt+0x15eb4>
   2a2ec:	movw	r3, #29880	; 0x74b8
   2a2f0:	movt	r3, #4
   2a2f4:	cmp	r5, #0
   2a2f8:	ldm	r3, {r0, r1, r2}
   2a2fc:	add	r3, sp, #72	; 0x48
   2a300:	addne	sl, sp, #80	; 0x50
   2a304:	stmia	r3!, {r0, r1}
   2a308:	movne	r0, ip
   2a30c:	strb	r2, [r3]
   2a310:	movne	r4, r0
   2a314:	beq	2a34c <__assert_fail@plt+0x15cf4>
   2a318:	ldrb	r2, [r7, r0]
   2a31c:	add	r4, r4, #1
   2a320:	mov	r0, sl
   2a324:	movw	r3, #19860	; 0x4d94
   2a328:	mov	r1, #1
   2a32c:	movt	r3, #4
   2a330:	str	r2, [sp]
   2a334:	mvn	r2, #0
   2a338:	bl	14178 <__sprintf_chk@plt>
   2a33c:	cmp	r4, r5
   2a340:	add	sl, sl, #2
   2a344:	mov	r0, r4
   2a348:	bne	2a318 <__assert_fail@plt+0x15cc0>
   2a34c:	ldr	r0, [r8, #8]
   2a350:	mov	ip, #0
   2a354:	mov	r2, ip
   2a358:	add	r1, sp, #72	; 0x48
   2a35c:	mov	r3, ip
   2a360:	ldr	r0, [r0, #8]
   2a364:	str	ip, [sp]
   2a368:	str	ip, [sp, #4]
   2a36c:	str	ip, [sp, #8]
   2a370:	str	ip, [sp, #12]
   2a374:	bl	13ef0 <assuan_transact@plt>
   2a378:	subs	r4, r0, #0
   2a37c:	bne	2a4fc <__assert_fail@plt+0x15ea4>
   2a380:	mov	r1, #1024	; 0x400
   2a384:	add	r0, sp, #40	; 0x28
   2a388:	bl	2ed78 <__assert_fail@plt+0x1a720>
   2a38c:	ldr	r3, [r8, #8]
   2a390:	ldr	ip, [sp, #24]
   2a394:	movw	r2, #29868	; 0x74ac
   2a398:	ldr	r1, [r8, #124]	; 0x7c
   2a39c:	movt	r2, #4
   2a3a0:	ldr	r0, [sp, #20]
   2a3a4:	str	ip, [sp, #60]	; 0x3c
   2a3a8:	cmp	r1, #0
   2a3ac:	ldr	ip, [r3, #8]
   2a3b0:	movw	r1, #1001	; 0x3e9
   2a3b4:	str	r0, [sp, #4]
   2a3b8:	movw	r3, #29856	; 0x74a0
   2a3bc:	add	r0, sp, #72	; 0x48
   2a3c0:	movt	r3, #4
   2a3c4:	str	ip, [sp, #56]	; 0x38
   2a3c8:	moveq	r3, r2
   2a3cc:	ldr	ip, [sp, #28]
   2a3d0:	mov	r2, #1
   2a3d4:	str	r3, [sp]
   2a3d8:	movw	r3, #1002	; 0x3ea
   2a3dc:	str	r4, [sp, #68]	; 0x44
   2a3e0:	str	ip, [sp, #64]	; 0x40
   2a3e4:	bl	1464c <__snprintf_chk@plt>
   2a3e8:	ldr	r2, [r8, #8]
   2a3ec:	add	r1, sp, #72	; 0x48
   2a3f0:	strb	r4, [sp, #1073]	; 0x431
   2a3f4:	add	lr, sp, #56	; 0x38
   2a3f8:	movw	ip, #37272	; 0x9198
   2a3fc:	add	r3, sp, #40	; 0x28
   2a400:	ldr	r0, [r2, #8]
   2a404:	movt	ip, #2
   2a408:	str	r4, [sp, #8]
   2a40c:	movw	r2, #36864	; 0x9000
   2a410:	str	r4, [sp, #12]
   2a414:	movt	r2, #2
   2a418:	stm	sp, {ip, lr}
   2a41c:	bl	13ef0 <assuan_transact@plt>
   2a420:	subs	r4, r0, #0
   2a424:	add	r0, sp, #40	; 0x28
   2a428:	sub	r1, r0, #4
   2a42c:	bne	2a53c <__assert_fail@plt+0x15ee4>
   2a430:	bl	2eecc <__assert_fail@plt+0x1a874>
   2a434:	mov	r5, r0
   2a438:	ldr	r0, [sp, #36]	; 0x24
   2a43c:	add	r0, r0, #36	; 0x24
   2a440:	str	r0, [fp]
   2a444:	bl	139c8 <gcry_malloc@plt>
   2a448:	cmp	r0, #0
   2a44c:	mov	lr, r0
   2a450:	str	r0, [r9]
   2a454:	beq	2a548 <__assert_fail@plt+0x15ef0>
   2a458:	movw	ip, #29892	; 0x74c4
   2a45c:	movt	ip, #4
   2a460:	mov	r7, r0
   2a464:	ldr	sl, [sp, #36]	; 0x24
   2a468:	ldm	ip!, {r0, r1, r2, r3}
   2a46c:	str	sl, [sp]
   2a470:	str	r0, [lr]
   2a474:	ldrb	sl, [ip, #4]
   2a478:	ldr	r0, [ip]
   2a47c:	str	r1, [lr, #4]
   2a480:	mov	r1, #1
   2a484:	str	r2, [lr, #8]
   2a488:	mvn	r2, #0
   2a48c:	str	r3, [lr, #12]
   2a490:	movw	r3, #24516	; 0x5fc4
   2a494:	str	r0, [lr, #16]
   2a498:	movt	r3, #4
   2a49c:	strb	sl, [r7, #20]!
   2a4a0:	mov	r0, r7
   2a4a4:	bl	14178 <__sprintf_chk@plt>
   2a4a8:	mov	r0, r7
   2a4ac:	bl	14094 <strlen@plt>
   2a4b0:	ldr	sl, [sp, #36]	; 0x24
   2a4b4:	mov	r1, r5
   2a4b8:	mov	r2, sl
   2a4bc:	add	r7, r7, r0
   2a4c0:	mov	r0, r7
   2a4c4:	bl	13ba8 <memcpy@plt>
   2a4c8:	movw	r3, #29916	; 0x74dc
   2a4cc:	movt	r3, #4
   2a4d0:	ldr	r0, [r3]
   2a4d4:	str	r0, [r7, sl]
   2a4d8:	mov	r0, r5
   2a4dc:	bl	13c44 <gcry_free@plt>
   2a4e0:	ldr	r0, [r9]
   2a4e4:	ldr	r1, [fp]
   2a4e8:	mov	r2, r4
   2a4ec:	mov	r3, r4
   2a4f0:	bl	14604 <gcry_sexp_canon_len@plt>
   2a4f4:	cmp	r0, #0
   2a4f8:	beq	2a56c <__assert_fail@plt+0x15f14>
   2a4fc:	add	r0, r8, #8
   2a500:	mov	r1, r4
   2a504:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a508:	b	2a518 <__assert_fail@plt+0x15ec0>
   2a50c:	add	r0, r8, #8
   2a510:	mov	r1, #67108865	; 0x4000001
   2a514:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a518:	ldr	r2, [sp, #1076]	; 0x434
   2a51c:	ldr	r3, [r6]
   2a520:	cmp	r2, r3
   2a524:	bne	2a568 <__assert_fail@plt+0x15f10>
   2a528:	add	sp, sp, #1072	; 0x430
   2a52c:	add	sp, sp, #12
   2a530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a534:	mov	r0, ip
   2a538:	b	2a518 <__assert_fail@plt+0x15ec0>
   2a53c:	bl	2eecc <__assert_fail@plt+0x1a874>
   2a540:	bl	13c44 <gcry_free@plt>
   2a544:	b	2a4fc <__assert_fail@plt+0x15ea4>
   2a548:	bl	14580 <gpg_err_code_from_syserror@plt>
   2a54c:	cmp	r0, #0
   2a550:	uxthne	r1, r0
   2a554:	moveq	r1, r0
   2a558:	orrne	r1, r1, #67108864	; 0x4000000
   2a55c:	add	r0, r8, #8
   2a560:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a564:	b	2a518 <__assert_fail@plt+0x15ec0>
   2a568:	bl	13cec <__stack_chk_fail@plt>
   2a56c:	movw	r0, #29920	; 0x74e0
   2a570:	movw	r1, #29828	; 0x7484
   2a574:	movt	r0, #4
   2a578:	movt	r1, #4
   2a57c:	mov	r2, #876	; 0x36c
   2a580:	ldr	r3, [pc]	; 2a588 <__assert_fail@plt+0x15f30>
   2a584:	bl	14658 <__assert_fail@plt>
   2a588:	andeq	r7, r4, r8, asr r0
   2a58c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a590:	movw	r6, #47296	; 0xb8c0
   2a594:	movt	r6, #5
   2a598:	sub	sp, sp, #1072	; 0x430
   2a59c:	sub	sp, sp, #12
   2a5a0:	mov	lr, #0
   2a5a4:	ldr	ip, [r6]
   2a5a8:	mov	fp, r2
   2a5ac:	ldr	r9, [sp, #1128]	; 0x468
   2a5b0:	mov	r8, r0
   2a5b4:	str	r1, [sp, #20]
   2a5b8:	str	ip, [sp, #1076]	; 0x434
   2a5bc:	ldr	ip, [sp, #1132]	; 0x46c
   2a5c0:	str	lr, [r9]
   2a5c4:	str	r3, [sp, #24]
   2a5c8:	str	ip, [sp, #28]
   2a5cc:	ldr	r7, [sp, #1120]	; 0x460
   2a5d0:	ldr	r5, [sp, #1124]	; 0x464
   2a5d4:	bl	29670 <__assert_fail@plt+0x15018>
   2a5d8:	subs	ip, r0, #0
   2a5dc:	movne	r0, ip
   2a5e0:	bne	2a740 <__assert_fail@plt+0x160e8>
   2a5e4:	add	r2, r5, #25
   2a5e8:	movw	r3, #1002	; 0x3ea
   2a5ec:	cmp	r3, r2, lsl #1
   2a5f0:	bcc	2a75c <__assert_fail@plt+0x16104>
   2a5f4:	movw	r3, #29880	; 0x74b8
   2a5f8:	movt	r3, #4
   2a5fc:	cmp	r5, #0
   2a600:	ldm	r3, {r0, r1, r2}
   2a604:	add	r3, sp, #72	; 0x48
   2a608:	addne	sl, sp, #80	; 0x50
   2a60c:	stmia	r3!, {r0, r1}
   2a610:	movne	r0, ip
   2a614:	strb	r2, [r3]
   2a618:	movne	r4, r0
   2a61c:	beq	2a654 <__assert_fail@plt+0x15ffc>
   2a620:	ldrb	r2, [r7, r0]
   2a624:	add	r4, r4, #1
   2a628:	mov	r0, sl
   2a62c:	movw	r3, #19860	; 0x4d94
   2a630:	mov	r1, #1
   2a634:	movt	r3, #4
   2a638:	str	r2, [sp]
   2a63c:	mvn	r2, #0
   2a640:	bl	14178 <__sprintf_chk@plt>
   2a644:	cmp	r4, r5
   2a648:	add	sl, sl, #2
   2a64c:	mov	r0, r4
   2a650:	bne	2a620 <__assert_fail@plt+0x15fc8>
   2a654:	ldr	r0, [r8, #8]
   2a658:	mov	ip, #0
   2a65c:	mov	r2, ip
   2a660:	add	r1, sp, #72	; 0x48
   2a664:	mov	r3, ip
   2a668:	ldr	r0, [r0, #8]
   2a66c:	str	ip, [sp]
   2a670:	str	ip, [sp, #4]
   2a674:	str	ip, [sp, #8]
   2a678:	str	ip, [sp, #12]
   2a67c:	bl	13ef0 <assuan_transact@plt>
   2a680:	subs	r4, r0, #0
   2a684:	bne	2a778 <__assert_fail@plt+0x16120>
   2a688:	mov	r1, #1024	; 0x400
   2a68c:	add	r0, sp, #40	; 0x28
   2a690:	bl	2ed78 <__assert_fail@plt+0x1a720>
   2a694:	ldr	r2, [r8, #8]
   2a698:	movw	r1, #1001	; 0x3e9
   2a69c:	movw	r3, #29988	; 0x7524
   2a6a0:	add	r0, sp, #72	; 0x48
   2a6a4:	movt	r3, #4
   2a6a8:	ldr	ip, [r2, #8]
   2a6ac:	ldr	r2, [sp, #20]
   2a6b0:	str	r3, [sp]
   2a6b4:	movw	r3, #1002	; 0x3ea
   2a6b8:	str	ip, [sp, #56]	; 0x38
   2a6bc:	ldr	ip, [sp, #24]
   2a6c0:	str	r2, [sp, #4]
   2a6c4:	mov	r2, #1
   2a6c8:	str	r4, [sp, #68]	; 0x44
   2a6cc:	str	ip, [sp, #64]	; 0x40
   2a6d0:	str	fp, [sp, #60]	; 0x3c
   2a6d4:	bl	1464c <__snprintf_chk@plt>
   2a6d8:	ldr	r2, [r8, #8]
   2a6dc:	add	lr, sp, #56	; 0x38
   2a6e0:	strb	r4, [sp, #1073]	; 0x431
   2a6e4:	add	r1, sp, #72	; 0x48
   2a6e8:	movw	ip, #37272	; 0x9198
   2a6ec:	add	r3, sp, #40	; 0x28
   2a6f0:	ldr	r0, [r2, #8]
   2a6f4:	movt	ip, #2
   2a6f8:	str	r4, [sp, #8]
   2a6fc:	movw	r2, #36864	; 0x9000
   2a700:	str	r4, [sp, #12]
   2a704:	movt	r2, #2
   2a708:	stm	sp, {ip, lr}
   2a70c:	bl	13ef0 <assuan_transact@plt>
   2a710:	subs	r4, r0, #0
   2a714:	add	r0, sp, #40	; 0x28
   2a718:	bne	2a76c <__assert_fail@plt+0x16114>
   2a71c:	ldr	r1, [sp, #28]
   2a720:	bl	2eecc <__assert_fail@plt+0x1a874>
   2a724:	cmp	r0, #0
   2a728:	str	r0, [r9]
   2a72c:	add	r0, r8, #8
   2a730:	bne	2a77c <__assert_fail@plt+0x16124>
   2a734:	movw	r1, #32854	; 0x8056
   2a738:	movt	r1, #1024	; 0x400
   2a73c:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a740:	ldr	r2, [sp, #1076]	; 0x434
   2a744:	ldr	r3, [r6]
   2a748:	cmp	r2, r3
   2a74c:	bne	2a788 <__assert_fail@plt+0x16130>
   2a750:	add	sp, sp, #1072	; 0x430
   2a754:	add	sp, sp, #12
   2a758:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a75c:	add	r0, r8, #8
   2a760:	mov	r1, #67108865	; 0x4000001
   2a764:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a768:	b	2a740 <__assert_fail@plt+0x160e8>
   2a76c:	sub	r1, r0, #4
   2a770:	bl	2eecc <__assert_fail@plt+0x1a874>
   2a774:	bl	13c44 <gcry_free@plt>
   2a778:	add	r0, r8, #8
   2a77c:	mov	r1, r4
   2a780:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a784:	b	2a740 <__assert_fail@plt+0x160e8>
   2a788:	bl	13cec <__stack_chk_fail@plt>
   2a78c:	push	{r4, r5, r6, r7, r8, r9, lr}
   2a790:	movw	r4, #47296	; 0xb8c0
   2a794:	movt	r4, #5
   2a798:	mov	r6, r2
   2a79c:	sub	sp, sp, #1040	; 0x410
   2a7a0:	mov	ip, #0
   2a7a4:	ldr	r2, [r4]
   2a7a8:	sub	sp, sp, #12
   2a7ac:	str	ip, [r6]
   2a7b0:	mov	r8, r1
   2a7b4:	mov	r9, r3
   2a7b8:	mov	r7, r0
   2a7bc:	str	r2, [sp, #1044]	; 0x414
   2a7c0:	bl	29670 <__assert_fail@plt+0x15018>
   2a7c4:	subs	r5, r0, #0
   2a7c8:	movne	r0, r5
   2a7cc:	beq	2a7ec <__assert_fail@plt+0x16194>
   2a7d0:	ldr	r2, [sp, #1044]	; 0x414
   2a7d4:	ldr	r3, [r4]
   2a7d8:	cmp	r2, r3
   2a7dc:	bne	2a89c <__assert_fail@plt+0x16244>
   2a7e0:	add	sp, sp, #1040	; 0x410
   2a7e4:	add	sp, sp, #12
   2a7e8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2a7ec:	mov	r1, #1024	; 0x400
   2a7f0:	add	r0, sp, #24
   2a7f4:	bl	2ed78 <__assert_fail@plt+0x1a720>
   2a7f8:	movw	r1, #1001	; 0x3e9
   2a7fc:	movw	r3, #1002	; 0x3ea
   2a800:	str	r8, [sp, #4]
   2a804:	movw	r2, #30004	; 0x7534
   2a808:	add	r0, sp, #40	; 0x28
   2a80c:	movt	r2, #4
   2a810:	str	r2, [sp]
   2a814:	mov	r2, #1
   2a818:	bl	1464c <__snprintf_chk@plt>
   2a81c:	ldr	r0, [r7, #8]
   2a820:	strb	r5, [sp, #1041]	; 0x411
   2a824:	add	r1, sp, #40	; 0x28
   2a828:	add	r3, sp, #24
   2a82c:	movw	r2, #36864	; 0x9000
   2a830:	ldr	r0, [r0, #8]
   2a834:	movt	r2, #2
   2a838:	str	r5, [sp]
   2a83c:	str	r5, [sp, #4]
   2a840:	str	r5, [sp, #8]
   2a844:	str	r5, [sp, #12]
   2a848:	bl	13ef0 <assuan_transact@plt>
   2a84c:	subs	r5, r0, #0
   2a850:	add	r0, sp, #24
   2a854:	bne	2a880 <__assert_fail@plt+0x16228>
   2a858:	mov	r1, r9
   2a85c:	bl	2eecc <__assert_fail@plt+0x1a874>
   2a860:	cmp	r0, #0
   2a864:	str	r0, [r6]
   2a868:	add	r0, r7, #8
   2a86c:	movweq	r1, #32854	; 0x8056
   2a870:	movne	r1, r5
   2a874:	movteq	r1, #1024	; 0x400
   2a878:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a87c:	b	2a7d0 <__assert_fail@plt+0x16178>
   2a880:	sub	r1, r0, #4
   2a884:	bl	2eecc <__assert_fail@plt+0x1a874>
   2a888:	bl	13c44 <gcry_free@plt>
   2a88c:	add	r0, r7, #8
   2a890:	mov	r1, r5
   2a894:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a898:	b	2a7d0 <__assert_fail@plt+0x16178>
   2a89c:	bl	13cec <__stack_chk_fail@plt>
   2a8a0:	push	{r4, r5, r6, r7, r8, lr}
   2a8a4:	movw	r4, #47296	; 0xb8c0
   2a8a8:	movt	r4, #5
   2a8ac:	sub	sp, sp, #1040	; 0x410
   2a8b0:	sub	sp, sp, #8
   2a8b4:	mov	r6, r2
   2a8b8:	ldr	r3, [r4]
   2a8bc:	mov	r2, #0
   2a8c0:	str	r2, [r6]
   2a8c4:	mov	r8, r1
   2a8c8:	mov	r7, r0
   2a8cc:	str	r3, [sp, #1044]	; 0x414
   2a8d0:	bl	29670 <__assert_fail@plt+0x15018>
   2a8d4:	subs	r5, r0, #0
   2a8d8:	movne	r0, r5
   2a8dc:	beq	2a8fc <__assert_fail@plt+0x162a4>
   2a8e0:	ldr	r2, [sp, #1044]	; 0x414
   2a8e4:	ldr	r3, [r4]
   2a8e8:	cmp	r2, r3
   2a8ec:	bne	2a9f0 <__assert_fail@plt+0x16398>
   2a8f0:	add	sp, sp, #1040	; 0x410
   2a8f4:	add	sp, sp, #8
   2a8f8:	pop	{r4, r5, r6, r7, r8, pc}
   2a8fc:	mov	r1, #1024	; 0x400
   2a900:	add	r0, sp, #24
   2a904:	bl	2ed78 <__assert_fail@plt+0x1a720>
   2a908:	movw	r1, #1001	; 0x3e9
   2a90c:	mov	r2, #1
   2a910:	str	r8, [sp, #4]
   2a914:	movw	r3, #30016	; 0x7540
   2a918:	add	r0, sp, #40	; 0x28
   2a91c:	movt	r3, #4
   2a920:	str	r3, [sp]
   2a924:	movw	r3, #1002	; 0x3ea
   2a928:	bl	1464c <__snprintf_chk@plt>
   2a92c:	ldr	r0, [r7, #8]
   2a930:	strb	r5, [sp, #1041]	; 0x411
   2a934:	add	r1, sp, #40	; 0x28
   2a938:	add	r3, sp, #24
   2a93c:	movw	r2, #36864	; 0x9000
   2a940:	ldr	r0, [r0, #8]
   2a944:	movt	r2, #2
   2a948:	str	r5, [sp]
   2a94c:	str	r5, [sp, #4]
   2a950:	str	r5, [sp, #8]
   2a954:	str	r5, [sp, #12]
   2a958:	bl	13ef0 <assuan_transact@plt>
   2a95c:	subs	r5, r0, #0
   2a960:	add	r0, sp, #24
   2a964:	sub	r1, r0, #4
   2a968:	bne	2a9c4 <__assert_fail@plt+0x1636c>
   2a96c:	bl	2eecc <__assert_fail@plt+0x1a874>
   2a970:	cmp	r0, #0
   2a974:	str	r0, [r6]
   2a978:	beq	2a9dc <__assert_fail@plt+0x16384>
   2a97c:	ldr	r1, [sp, #20]
   2a980:	mov	r2, r5
   2a984:	mov	r3, r5
   2a988:	bl	14604 <gcry_sexp_canon_len@plt>
   2a98c:	subs	r8, r0, #0
   2a990:	beq	2a9a4 <__assert_fail@plt+0x1634c>
   2a994:	add	r0, r7, #8
   2a998:	mov	r1, r5
   2a99c:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a9a0:	b	2a8e0 <__assert_fail@plt+0x16288>
   2a9a4:	ldr	r0, [r6]
   2a9a8:	bl	13c44 <gcry_free@plt>
   2a9ac:	str	r8, [r6]
   2a9b0:	add	r0, r7, #8
   2a9b4:	mov	r1, #55	; 0x37
   2a9b8:	movt	r1, #1024	; 0x400
   2a9bc:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a9c0:	b	2a8e0 <__assert_fail@plt+0x16288>
   2a9c4:	bl	2eecc <__assert_fail@plt+0x1a874>
   2a9c8:	bl	13c44 <gcry_free@plt>
   2a9cc:	add	r0, r7, #8
   2a9d0:	mov	r1, r5
   2a9d4:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a9d8:	b	2a8e0 <__assert_fail@plt+0x16288>
   2a9dc:	add	r0, r7, #8
   2a9e0:	movw	r1, #32854	; 0x8056
   2a9e4:	movt	r1, #1024	; 0x400
   2a9e8:	bl	295d0 <__assert_fail@plt+0x14f78>
   2a9ec:	b	2a8e0 <__assert_fail@plt+0x16288>
   2a9f0:	bl	13cec <__stack_chk_fail@plt>
   2a9f4:	push	{r4, r5, r6, r7, lr}
   2a9f8:	movw	r4, #47296	; 0xb8c0
   2a9fc:	movt	r4, #5
   2aa00:	mov	r6, r2
   2aa04:	mov	r3, #0
   2aa08:	mov	r5, r1
   2aa0c:	ldr	r2, [r4]
   2aa10:	sub	sp, sp, #1040	; 0x410
   2aa14:	str	r3, [r6]
   2aa18:	sub	sp, sp, #4
   2aa1c:	ldrb	r1, [r1]
   2aa20:	mov	r7, r0
   2aa24:	str	r2, [sp, #1036]	; 0x40c
   2aa28:	cmp	r1, r3
   2aa2c:	moveq	r0, #55	; 0x37
   2aa30:	movteq	r0, #1024	; 0x400
   2aa34:	bne	2aa54 <__assert_fail@plt+0x163fc>
   2aa38:	ldr	r2, [sp, #1036]	; 0x40c
   2aa3c:	ldr	r3, [r4]
   2aa40:	cmp	r2, r3
   2aa44:	bne	2ab64 <__assert_fail@plt+0x1650c>
   2aa48:	add	sp, sp, #1040	; 0x410
   2aa4c:	add	sp, sp, #4
   2aa50:	pop	{r4, r5, r6, r7, pc}
   2aa54:	mov	r0, r5
   2aa58:	str	r3, [sp, #20]
   2aa5c:	str	r3, [sp, #24]
   2aa60:	str	r3, [sp, #28]
   2aa64:	str	r5, [sp, #16]
   2aa68:	bl	14094 <strlen@plt>
   2aa6c:	movw	r3, #1001	; 0x3e9
   2aa70:	add	r2, r0, #8
   2aa74:	mov	ip, r0
   2aa78:	cmp	r2, r3
   2aa7c:	str	r0, [sp, #20]
   2aa80:	movhi	r0, #67	; 0x43
   2aa84:	movthi	r0, #1024	; 0x400
   2aa88:	bhi	2aa38 <__assert_fail@plt+0x163e0>
   2aa8c:	movw	r2, #30028	; 0x754c
   2aa90:	movt	r2, #4
   2aa94:	add	lr, sp, #32
   2aa98:	movw	r3, #994	; 0x3e2
   2aa9c:	ldm	r2, {r0, r1, r2}
   2aaa0:	stmia	lr!, {r0, r1}
   2aaa4:	mov	r1, r5
   2aaa8:	strb	r2, [lr]
   2aaac:	add	r0, sp, #40	; 0x28
   2aab0:	add	r2, ip, #1
   2aab4:	bl	13e00 <__memcpy_chk@plt>
   2aab8:	mov	r0, r7
   2aabc:	bl	29670 <__assert_fail@plt+0x15018>
   2aac0:	cmp	r0, #0
   2aac4:	bne	2aa38 <__assert_fail@plt+0x163e0>
   2aac8:	ldr	lr, [r7, #8]
   2aacc:	mov	r2, r0
   2aad0:	mov	r3, r0
   2aad4:	add	r1, sp, #32
   2aad8:	movw	ip, #39992	; 0x9c38
   2aadc:	movt	ip, #2
   2aae0:	ldr	lr, [lr, #8]
   2aae4:	str	r0, [sp]
   2aae8:	str	r0, [sp, #4]
   2aaec:	str	ip, [sp, #8]
   2aaf0:	mov	r0, lr
   2aaf4:	add	lr, sp, #16
   2aaf8:	str	lr, [sp, #12]
   2aafc:	bl	13ef0 <assuan_transact@plt>
   2ab00:	subs	r5, r0, #0
   2ab04:	beq	2ab20 <__assert_fail@plt+0x164c8>
   2ab08:	ldr	r0, [sp, #24]
   2ab0c:	bl	13c44 <gcry_free@plt>
   2ab10:	add	r0, r7, #8
   2ab14:	mov	r1, r5
   2ab18:	bl	295d0 <__assert_fail@plt+0x14f78>
   2ab1c:	b	2aa38 <__assert_fail@plt+0x163e0>
   2ab20:	ldr	r0, [sp, #28]
   2ab24:	cmp	r0, #0
   2ab28:	bne	2ab48 <__assert_fail@plt+0x164f0>
   2ab2c:	ldr	r0, [sp, #24]
   2ab30:	cmp	r0, #0
   2ab34:	strne	r0, [r6]
   2ab38:	bne	2ab10 <__assert_fail@plt+0x164b8>
   2ab3c:	mov	r5, #58	; 0x3a
   2ab40:	movt	r5, #1024	; 0x400
   2ab44:	b	2ab0c <__assert_fail@plt+0x164b4>
   2ab48:	bl	13b6c <gpg_err_code_from_errno@plt>
   2ab4c:	cmp	r0, #0
   2ab50:	beq	2ab2c <__assert_fail@plt+0x164d4>
   2ab54:	uxth	r5, r0
   2ab58:	ldr	r0, [sp, #24]
   2ab5c:	orr	r5, r5, #67108864	; 0x4000000
   2ab60:	b	2ab0c <__assert_fail@plt+0x164b4>
   2ab64:	bl	13cec <__stack_chk_fail@plt>
   2ab68:	push	{r4, r5, r6, r7, r8, r9, lr}
   2ab6c:	movw	r4, #47296	; 0xb8c0
   2ab70:	movt	r4, #5
   2ab74:	sub	sp, sp, #44	; 0x2c
   2ab78:	mov	r7, r1
   2ab7c:	mov	r9, r2
   2ab80:	ldr	ip, [r4]
   2ab84:	mov	r8, r3
   2ab88:	mov	r5, r0
   2ab8c:	ldr	r6, [sp, #72]	; 0x48
   2ab90:	str	ip, [sp, #36]	; 0x24
   2ab94:	bl	29670 <__assert_fail@plt+0x15018>
   2ab98:	cmp	r0, #0
   2ab9c:	bne	2ac3c <__assert_fail@plt+0x165e4>
   2aba0:	ldr	r3, [r5, #8]
   2aba4:	mov	r1, #4
   2aba8:	str	r9, [sp, #24]
   2abac:	ldr	r3, [r3, #8]
   2abb0:	str	r8, [sp, #28]
   2abb4:	str	r6, [sp, #32]
   2abb8:	mov	r0, r3
   2abbc:	str	r3, [sp, #20]
   2abc0:	bl	13ec0 <assuan_get_flag@plt>
   2abc4:	ldr	r3, [r5, #8]
   2abc8:	mov	r1, #4
   2abcc:	mov	r2, #1
   2abd0:	mov	r8, r0
   2abd4:	ldr	r0, [r3, #8]
   2abd8:	bl	14460 <assuan_set_flag@plt>
   2abdc:	ldr	r2, [r5, #8]
   2abe0:	mov	r3, r6
   2abe4:	mov	r1, r7
   2abe8:	movw	lr, #37272	; 0x9198
   2abec:	movw	ip, #38032	; 0x9490
   2abf0:	ldr	r0, [r2, #8]
   2abf4:	movt	lr, #2
   2abf8:	movt	ip, #2
   2abfc:	str	r6, [sp, #12]
   2ac00:	str	lr, [sp]
   2ac04:	add	r2, sp, #20
   2ac08:	stmib	sp, {r2, ip}
   2ac0c:	movw	r2, #37256	; 0x9188
   2ac10:	movt	r2, #2
   2ac14:	bl	13ef0 <assuan_transact@plt>
   2ac18:	ldr	r3, [r5, #8]
   2ac1c:	mov	r1, #4
   2ac20:	mov	r2, r8
   2ac24:	mov	r6, r0
   2ac28:	ldr	r0, [r3, #8]
   2ac2c:	bl	14460 <assuan_set_flag@plt>
   2ac30:	add	r0, r5, #8
   2ac34:	mov	r1, r6
   2ac38:	bl	295d0 <__assert_fail@plt+0x14f78>
   2ac3c:	ldr	r2, [sp, #36]	; 0x24
   2ac40:	ldr	r3, [r4]
   2ac44:	cmp	r2, r3
   2ac48:	bne	2ac54 <__assert_fail@plt+0x165fc>
   2ac4c:	add	sp, sp, #44	; 0x2c
   2ac50:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2ac54:	bl	13cec <__stack_chk_fail@plt>
   2ac58:	push	{r4, r5, r6, r7, r8, lr}
   2ac5c:	movw	r4, #47296	; 0xb8c0
   2ac60:	movt	r4, #5
   2ac64:	ldr	r3, [r0, #4]
   2ac68:	sub	sp, sp, #24
   2ac6c:	mov	r5, r0
   2ac70:	ldr	r2, [r4]
   2ac74:	cmp	r3, #0
   2ac78:	mov	r6, r1
   2ac7c:	str	r2, [sp, #20]
   2ac80:	beq	2ac9c <__assert_fail@plt+0x16644>
   2ac84:	ldr	r2, [sp, #20]
   2ac88:	ldr	r3, [r4]
   2ac8c:	cmp	r2, r3
   2ac90:	bne	2add0 <__assert_fail@plt+0x16778>
   2ac94:	add	sp, sp, #24
   2ac98:	pop	{r4, r5, r6, r7, r8, pc}
   2ac9c:	ldr	r0, [r0]
   2aca0:	movw	r2, #3560	; 0xde8
   2aca4:	str	r3, [sp, #8]
   2aca8:	movt	r2, #4
   2acac:	movw	r1, #30080	; 0x7580
   2acb0:	str	r2, [sp]
   2acb4:	str	r2, [sp, #4]
   2acb8:	movt	r1, #4
   2acbc:	movw	r2, #30092	; 0x758c
   2acc0:	movw	r3, #16912	; 0x4210
   2acc4:	movt	r2, #4
   2acc8:	movt	r3, #4
   2accc:	bl	1ad0c <__assert_fail@plt+0x66b4>
   2acd0:	cmp	r0, #0
   2acd4:	mov	r7, r0
   2acd8:	str	r0, [r5, #4]
   2acdc:	bne	2ac84 <__assert_fail@plt+0x1662c>
   2ace0:	mov	r2, #10
   2ace4:	mov	r0, r6
   2ace8:	add	r1, sp, #16
   2acec:	bl	13a4c <strtol@plt>
   2acf0:	ldr	ip, [sp, #16]
   2acf4:	ldrb	r2, [ip]
   2acf8:	cmp	r2, #9
   2acfc:	cmpne	r2, #32
   2ad00:	mov	r8, r0
   2ad04:	bne	2ad24 <__assert_fail@plt+0x166cc>
   2ad08:	add	r3, ip, #1
   2ad0c:	str	r3, [sp, #16]
   2ad10:	mov	ip, r3
   2ad14:	ldrb	r2, [r3], #1
   2ad18:	cmp	r2, #32
   2ad1c:	cmpne	r2, #9
   2ad20:	beq	2ad0c <__assert_fail@plt+0x166b4>
   2ad24:	tst	r2, #223	; 0xdf
   2ad28:	beq	2ad64 <__assert_fail@plt+0x1670c>
   2ad2c:	cmp	r2, #9
   2ad30:	beq	2ad64 <__assert_fail@plt+0x1670c>
   2ad34:	add	r3, ip, #1
   2ad38:	b	2ad44 <__assert_fail@plt+0x166ec>
   2ad3c:	cmp	r1, #9
   2ad40:	beq	2ad54 <__assert_fail@plt+0x166fc>
   2ad44:	mov	r6, r3
   2ad48:	ldrb	r1, [r3], #1
   2ad4c:	tst	r1, #223	; 0xdf
   2ad50:	bne	2ad3c <__assert_fail@plt+0x166e4>
   2ad54:	cmp	r6, ip
   2ad58:	beq	2ad64 <__assert_fail@plt+0x1670c>
   2ad5c:	cmp	r2, #0
   2ad60:	bne	2ad74 <__assert_fail@plt+0x1671c>
   2ad64:	mov	r3, #76	; 0x4c
   2ad68:	movt	r3, #1024	; 0x400
   2ad6c:	str	r3, [r5, #4]
   2ad70:	b	2ac84 <__assert_fail@plt+0x1662c>
   2ad74:	mov	r3, #0
   2ad78:	strb	r3, [r6]
   2ad7c:	ldr	r0, [sp, #16]
   2ad80:	bl	14094 <strlen@plt>
   2ad84:	add	r1, r0, #16
   2ad88:	mov	r0, #1
   2ad8c:	bl	14190 <gcry_calloc@plt>
   2ad90:	subs	r6, r0, #0
   2ad94:	beq	2adb8 <__assert_fail@plt+0x16760>
   2ad98:	str	r8, [r6, #4]
   2ad9c:	add	r0, r6, #12
   2ada0:	ldr	r1, [sp, #16]
   2ada4:	bl	13e78 <strcpy@plt>
   2ada8:	ldr	r3, [r5, #8]
   2adac:	str	r3, [r6]
   2adb0:	str	r6, [r5, #8]
   2adb4:	b	2ac84 <__assert_fail@plt+0x1662c>
   2adb8:	bl	14580 <gpg_err_code_from_syserror@plt>
   2adbc:	cmp	r0, #0
   2adc0:	uxthne	r0, r0
   2adc4:	orrne	r7, r0, #67108864	; 0x4000000
   2adc8:	str	r7, [r5, #4]
   2adcc:	b	2ac84 <__assert_fail@plt+0x1662c>
   2add0:	bl	13cec <__stack_chk_fail@plt>
   2add4:	push	{r4, r5, r6, r7, r8, lr}
   2add8:	movw	r4, #47296	; 0xb8c0
   2addc:	movt	r4, #5
   2ade0:	sub	sp, sp, #16
   2ade4:	mov	r5, r2
   2ade8:	add	r3, sp, #8
   2adec:	ldr	ip, [r4]
   2adf0:	add	r2, sp, #4
   2adf4:	mov	r7, r1
   2adf8:	str	ip, [sp, #12]
   2adfc:	bl	2a78c <__assert_fail@plt+0x16134>
   2ae00:	subs	r6, r0, #0
   2ae04:	beq	2aeac <__assert_fail@plt+0x16854>
   2ae08:	uxth	r3, r6
   2ae0c:	cmp	r3, #27
   2ae10:	beq	2aea0 <__assert_fail@plt+0x16848>
   2ae14:	cmp	r3, #118	; 0x76
   2ae18:	movwne	r5, #18888	; 0x49c8
   2ae1c:	movtne	r5, #4
   2ae20:	beq	2aea0 <__assert_fail@plt+0x16848>
   2ae24:	movw	r3, #48116	; 0xbbf4
   2ae28:	movt	r3, #5
   2ae2c:	ldrb	r8, [r5]
   2ae30:	ldr	r3, [r3, #4]
   2ae34:	cmp	r3, #0
   2ae38:	beq	2ae90 <__assert_fail@plt+0x16838>
   2ae3c:	cmp	r7, #0
   2ae40:	movw	r3, #30116	; 0x75a4
   2ae44:	movt	r3, #4
   2ae48:	mov	r0, r6
   2ae4c:	moveq	r7, r3
   2ae50:	bl	13a64 <gpg_strerror@plt>
   2ae54:	mov	r1, r7
   2ae58:	mov	r3, r5
   2ae5c:	mov	r2, r0
   2ae60:	movw	r0, #30120	; 0x75a8
   2ae64:	movt	r0, #4
   2ae68:	bl	3f478 <__assert_fail@plt+0x2ae20>
   2ae6c:	cmp	r8, #0
   2ae70:	moveq	r0, r6
   2ae74:	bne	2ae98 <__assert_fail@plt+0x16840>
   2ae78:	ldr	r2, [sp, #12]
   2ae7c:	ldr	r3, [r4]
   2ae80:	cmp	r2, r3
   2ae84:	bne	2af20 <__assert_fail@plt+0x168c8>
   2ae88:	add	sp, sp, #16
   2ae8c:	pop	{r4, r5, r6, r7, r8, pc}
   2ae90:	cmp	r8, #0
   2ae94:	beq	2ae3c <__assert_fail@plt+0x167e4>
   2ae98:	mov	r0, #0
   2ae9c:	b	2ae78 <__assert_fail@plt+0x16820>
   2aea0:	movw	r5, #30104	; 0x7598
   2aea4:	movt	r5, #4
   2aea8:	b	2ae24 <__assert_fail@plt+0x167cc>
   2aeac:	ldmib	sp, {r1, r2}
   2aeb0:	mov	r0, r5
   2aeb4:	bl	1413c <assuan_send_data@plt>
   2aeb8:	mov	r6, r0
   2aebc:	ldr	r0, [sp, #4]
   2aec0:	bl	13c44 <gcry_free@plt>
   2aec4:	cmp	r6, #0
   2aec8:	beq	2aeec <__assert_fail@plt+0x16894>
   2aecc:	mov	r0, r6
   2aed0:	bl	13a64 <gpg_strerror@plt>
   2aed4:	mov	r1, r0
   2aed8:	movw	r0, #30164	; 0x75d4
   2aedc:	movt	r0, #4
   2aee0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2aee4:	mov	r0, r6
   2aee8:	b	2ae78 <__assert_fail@plt+0x16820>
   2aeec:	mov	r1, r6
   2aef0:	mov	r2, r6
   2aef4:	mov	r0, r5
   2aef8:	bl	1413c <assuan_send_data@plt>
   2aefc:	subs	r6, r0, #0
   2af00:	bne	2aecc <__assert_fail@plt+0x16874>
   2af04:	mov	r0, r5
   2af08:	movw	r1, #30160	; 0x75d0
   2af0c:	movt	r1, #4
   2af10:	bl	13d10 <assuan_write_line@plt>
   2af14:	subs	r6, r0, #0
   2af18:	beq	2ae98 <__assert_fail@plt+0x16840>
   2af1c:	b	2aecc <__assert_fail@plt+0x16874>
   2af20:	bl	13cec <__stack_chk_fail@plt>
   2af24:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   2af28:	mov	r4, r0
   2af2c:	ldr	r5, [r0]
   2af30:	mov	r9, r1
   2af34:	mov	r6, r2
   2af38:	mov	r8, r3
   2af3c:	cmp	r5, #0
   2af40:	popne	{r3, r4, r5, r6, r7, r8, r9, pc}
   2af44:	mov	r0, r3
   2af48:	bl	14094 <strlen@plt>
   2af4c:	add	r1, r6, #13
   2af50:	add	r1, r1, r0
   2af54:	mov	r0, #1
   2af58:	bl	14190 <gcry_calloc@plt>
   2af5c:	subs	r7, r0, #0
   2af60:	beq	2afa4 <__assert_fail@plt+0x1694c>
   2af64:	mov	r2, r6
   2af68:	mov	r1, r9
   2af6c:	add	r0, r7, #8
   2af70:	bl	13ba8 <memcpy@plt>
   2af74:	add	r3, r7, r6
   2af78:	add	r3, r3, #9
   2af7c:	add	r6, r7, r6
   2af80:	mov	r1, r8
   2af84:	strb	r5, [r6, #8]
   2af88:	mov	r0, r3
   2af8c:	str	r3, [r7, #4]
   2af90:	bl	13e78 <strcpy@plt>
   2af94:	ldr	r3, [r4, #4]
   2af98:	str	r3, [r7]
   2af9c:	str	r7, [r4, #4]
   2afa0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2afa4:	bl	14580 <gpg_err_code_from_syserror@plt>
   2afa8:	cmp	r0, #0
   2afac:	uxthne	r0, r0
   2afb0:	orrne	r5, r0, #67108864	; 0x4000000
   2afb4:	str	r5, [r4]
   2afb8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   2afbc:	ldr	r3, [r0, #4]
   2afc0:	push	{r4, r5, r6, r7, lr}
   2afc4:	cmp	r3, #0
   2afc8:	sub	sp, sp, #20
   2afcc:	mov	r5, r0
   2afd0:	mov	r4, r1
   2afd4:	beq	2afe0 <__assert_fail@plt+0x16988>
   2afd8:	add	sp, sp, #20
   2afdc:	pop	{r4, r5, r6, r7, pc}
   2afe0:	ldr	r0, [r0]
   2afe4:	movw	r2, #3560	; 0xde8
   2afe8:	str	r3, [sp, #8]
   2afec:	movt	r2, #4
   2aff0:	movw	r1, #30080	; 0x7580
   2aff4:	str	r2, [sp]
   2aff8:	str	r2, [sp, #4]
   2affc:	movt	r1, #4
   2b000:	movw	r2, #30092	; 0x758c
   2b004:	movw	r3, #30196	; 0x75f4
   2b008:	movt	r2, #4
   2b00c:	movt	r3, #4
   2b010:	bl	1ad0c <__assert_fail@plt+0x66b4>
   2b014:	cmp	r0, #0
   2b018:	mov	r7, r0
   2b01c:	str	r0, [r5, #4]
   2b020:	bne	2afd8 <__assert_fail@plt+0x16980>
   2b024:	mov	r0, r4
   2b028:	bl	14094 <strlen@plt>
   2b02c:	add	r1, r0, #16
   2b030:	mov	r0, #1
   2b034:	bl	14190 <gcry_calloc@plt>
   2b038:	subs	r6, r0, #0
   2b03c:	beq	2b140 <__assert_fail@plt+0x16ae8>
   2b040:	add	r7, r6, #12
   2b044:	mov	r1, r4
   2b048:	mov	r0, r7
   2b04c:	bl	13e78 <strcpy@plt>
   2b050:	mov	r1, r7
   2b054:	mov	r3, r1
   2b058:	add	r1, r1, #1
   2b05c:	ldrb	r2, [r3]
   2b060:	bic	r4, r2, #32
   2b064:	sub	ip, r2, #48	; 0x30
   2b068:	sub	r4, r4, #65	; 0x41
   2b06c:	cmp	ip, #9
   2b070:	cmphi	r4, #5
   2b074:	bls	2b054 <__assert_fail@plt+0x169fc>
   2b078:	cmp	r7, r3
   2b07c:	beq	2b158 <__assert_fail@plt+0x16b00>
   2b080:	rsb	r7, r7, r3
   2b084:	cmp	r7, #40	; 0x28
   2b088:	bne	2b124 <__assert_fail@plt+0x16acc>
   2b08c:	cmp	r2, #9
   2b090:	cmpne	r2, #32
   2b094:	bne	2b124 <__assert_fail@plt+0x16acc>
   2b098:	ldrb	r2, [r3, #1]
   2b09c:	mov	r0, #0
   2b0a0:	add	r1, r3, #1
   2b0a4:	strb	r0, [r3]
   2b0a8:	cmp	r2, #32
   2b0ac:	cmpne	r2, #9
   2b0b0:	bne	2b0cc <__assert_fail@plt+0x16a74>
   2b0b4:	add	r3, r3, #2
   2b0b8:	mov	r1, r3
   2b0bc:	ldrb	r2, [r3], #1
   2b0c0:	cmp	r2, #32
   2b0c4:	cmpne	r2, #9
   2b0c8:	beq	2b0b8 <__assert_fail@plt+0x16a60>
   2b0cc:	str	r1, [r6, #8]
   2b0d0:	ldrb	r3, [r1]
   2b0d4:	tst	r3, #223	; 0xdf
   2b0d8:	beq	2b124 <__assert_fail@plt+0x16acc>
   2b0dc:	cmp	r3, #9
   2b0e0:	beq	2b124 <__assert_fail@plt+0x16acc>
   2b0e4:	add	r3, r1, #1
   2b0e8:	b	2b0f4 <__assert_fail@plt+0x16a9c>
   2b0ec:	cmp	r2, #9
   2b0f0:	beq	2b104 <__assert_fail@plt+0x16aac>
   2b0f4:	mov	r0, r3
   2b0f8:	ldrb	r2, [r3], #1
   2b0fc:	tst	r2, #223	; 0xdf
   2b100:	bne	2b0ec <__assert_fail@plt+0x16a94>
   2b104:	cmp	r0, r1
   2b108:	beq	2b124 <__assert_fail@plt+0x16acc>
   2b10c:	mov	r3, #0
   2b110:	strb	r3, [r0]
   2b114:	ldr	r3, [r5, #8]
   2b118:	str	r3, [r6]
   2b11c:	str	r6, [r5, #8]
   2b120:	b	2afd8 <__assert_fail@plt+0x16980>
   2b124:	mov	r0, r6
   2b128:	mov	r3, #76	; 0x4c
   2b12c:	movt	r3, #1024	; 0x400
   2b130:	str	r3, [r5, #4]
   2b134:	add	sp, sp, #20
   2b138:	pop	{r4, r5, r6, r7, lr}
   2b13c:	b	13c44 <gcry_free@plt>
   2b140:	bl	14580 <gpg_err_code_from_syserror@plt>
   2b144:	cmp	r0, #0
   2b148:	uxthne	r0, r0
   2b14c:	orrne	r7, r0, #67108864	; 0x4000000
   2b150:	str	r7, [r5, #4]
   2b154:	b	2afd8 <__assert_fail@plt+0x16980>
   2b158:	cmp	r2, #88	; 0x58
   2b15c:	bne	2b080 <__assert_fail@plt+0x16a28>
   2b160:	ldrb	r1, [r6, #13]
   2b164:	cmp	r1, #32
   2b168:	cmpne	r1, #9
   2b16c:	bne	2b080 <__assert_fail@plt+0x16a28>
   2b170:	mov	r2, #1
   2b174:	add	r3, r6, #13
   2b178:	str	r2, [r6, #4]
   2b17c:	b	2b098 <__assert_fail@plt+0x16a40>
   2b180:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b184:	movw	r7, #47296	; 0xb8c0
   2b188:	movt	r7, #5
   2b18c:	sub	sp, sp, #100	; 0x64
   2b190:	mov	r5, r1
   2b194:	add	r1, sp, #28
   2b198:	ldr	r2, [r7]
   2b19c:	mov	r3, #0
   2b1a0:	mov	r6, r0
   2b1a4:	str	r3, [sp, #44]	; 0x2c
   2b1a8:	str	r3, [sp, #28]
   2b1ac:	str	r2, [sp, #92]	; 0x5c
   2b1b0:	str	r3, [sp, #52]	; 0x34
   2b1b4:	str	r3, [sp, #56]	; 0x38
   2b1b8:	str	r3, [sp, #64]	; 0x40
   2b1bc:	str	r3, [sp, #68]	; 0x44
   2b1c0:	str	r3, [sp, #40]	; 0x28
   2b1c4:	str	r0, [sp, #48]	; 0x30
   2b1c8:	str	r0, [sp, #60]	; 0x3c
   2b1cc:	bl	2a1cc <__assert_fail@plt+0x15b74>
   2b1d0:	subs	sl, r0, #0
   2b1d4:	bne	2b3f0 <__assert_fail@plt+0x16d98>
   2b1d8:	add	r3, sp, #60	; 0x3c
   2b1dc:	add	r2, sp, #48	; 0x30
   2b1e0:	str	r3, [sp]
   2b1e4:	movw	r1, #44988	; 0xafbc
   2b1e8:	add	r3, sp, #40	; 0x28
   2b1ec:	movt	r1, #2
   2b1f0:	str	r3, [sp, #8]
   2b1f4:	mov	r0, r6
   2b1f8:	movw	r3, #44836	; 0xaf24
   2b1fc:	movt	r3, #2
   2b200:	str	r3, [sp, #4]
   2b204:	movw	r3, #44120	; 0xac58
   2b208:	movt	r3, #2
   2b20c:	bl	2a110 <__assert_fail@plt+0x15ab8>
   2b210:	subs	sl, r0, #0
   2b214:	bne	2b480 <__assert_fail@plt+0x16e28>
   2b218:	ldr	sl, [sp, #52]	; 0x34
   2b21c:	cmp	sl, #0
   2b220:	bne	2b480 <__assert_fail@plt+0x16e28>
   2b224:	ldr	sl, [sp, #64]	; 0x40
   2b228:	cmp	sl, #0
   2b22c:	bne	2b480 <__assert_fail@plt+0x16e28>
   2b230:	ldr	sl, [sp, #40]	; 0x28
   2b234:	cmp	sl, #0
   2b238:	bne	2b480 <__assert_fail@plt+0x16e28>
   2b23c:	movw	r0, #30232	; 0x7618
   2b240:	ldr	r1, [sp, #28]
   2b244:	movt	r0, #4
   2b248:	bl	3f478 <__assert_fail@plt+0x2ae20>
   2b24c:	cmp	r5, #0
   2b250:	beq	2b27c <__assert_fail@plt+0x16c24>
   2b254:	ldr	r4, [sp, #44]	; 0x2c
   2b258:	cmp	r4, #0
   2b25c:	beq	2b27c <__assert_fail@plt+0x16c24>
   2b260:	add	r1, r4, #8
   2b264:	ldr	r2, [r4, #4]
   2b268:	mov	r0, r5
   2b26c:	bl	13c2c <assuan_write_status@plt>
   2b270:	ldr	r4, [r4]
   2b274:	cmp	r4, #0
   2b278:	bne	2b260 <__assert_fail@plt+0x16c08>
   2b27c:	ldr	r3, [pc, #980]	; 2b658 <__assert_fail@plt+0x17000>
   2b280:	movw	r9, #48116	; 0xbbf4
   2b284:	movt	r9, #5
   2b288:	mov	fp, #111	; 0x6f
   2b28c:	mov	r8, #1
   2b290:	str	r3, [sp, #20]
   2b294:	ldr	r4, [sp, #68]	; 0x44
   2b298:	cmp	r4, #0
   2b29c:	bne	2b2b0 <__assert_fail@plt+0x16c58>
   2b2a0:	b	2b2f8 <__assert_fail@plt+0x16ca0>
   2b2a4:	ldr	r4, [r4]
   2b2a8:	cmp	r4, #0
   2b2ac:	beq	2b2f8 <__assert_fail@plt+0x16ca0>
   2b2b0:	ldr	r3, [r4, #4]
   2b2b4:	cmp	fp, r3
   2b2b8:	bne	2b2a4 <__assert_fail@plt+0x16c4c>
   2b2bc:	ldr	r3, [r9, #4]
   2b2c0:	cmp	r3, #0
   2b2c4:	bne	2b49c <__assert_fail@plt+0x16e44>
   2b2c8:	cmp	r5, #0
   2b2cc:	beq	2b2a4 <__assert_fail@plt+0x16c4c>
   2b2d0:	mov	r0, r6
   2b2d4:	add	r1, r4, #12
   2b2d8:	mov	r2, r5
   2b2dc:	bl	2add4 <__assert_fail@plt+0x1677c>
   2b2e0:	subs	sl, r0, #0
   2b2e4:	bne	2b3f0 <__assert_fail@plt+0x16d98>
   2b2e8:	str	r8, [r4, #8]
   2b2ec:	ldr	r4, [r4]
   2b2f0:	cmp	r4, #0
   2b2f4:	bne	2b2b0 <__assert_fail@plt+0x16c58>
   2b2f8:	ldr	r3, [sp, #20]
   2b2fc:	ldr	fp, [r3, #4]!
   2b300:	cmn	fp, #1
   2b304:	str	r3, [sp, #20]
   2b308:	bne	2b294 <__assert_fail@plt+0x16c3c>
   2b30c:	ldr	r4, [sp, #56]	; 0x38
   2b310:	cmp	r4, #0
   2b314:	addne	r9, sp, #91	; 0x5b
   2b318:	movwne	r8, #48116	; 0xbbf4
   2b31c:	movtne	r8, #5
   2b320:	beq	2b3ec <__assert_fail@plt+0x16d94>
   2b324:	ldr	r3, [r8, #4]
   2b328:	cmp	r3, #0
   2b32c:	bne	2b4b4 <__assert_fail@plt+0x16e5c>
   2b330:	ldr	r1, [r4, #4]
   2b334:	cmp	r1, #0
   2b338:	bne	2b3e0 <__assert_fail@plt+0x16d88>
   2b33c:	cmp	r5, #0
   2b340:	addeq	r3, r4, #12
   2b344:	beq	2b36c <__assert_fail@plt+0x16d14>
   2b348:	add	sl, r4, #12
   2b34c:	ldr	r3, [r4, #8]
   2b350:	mov	r0, r6
   2b354:	str	r1, [sp]
   2b358:	mov	r2, sl
   2b35c:	movw	r1, #28792	; 0x7078
   2b360:	movt	r1, #4
   2b364:	bl	1ad0c <__assert_fail@plt+0x66b4>
   2b368:	mov	r3, sl
   2b36c:	add	r2, sp, #71	; 0x47
   2b370:	ldrb	ip, [r3]
   2b374:	cmp	ip, #57	; 0x39
   2b378:	lslls	ip, ip, #4
   2b37c:	andls	r1, ip, #240	; 0xf0
   2b380:	bls	2b398 <__assert_fail@plt+0x16d40>
   2b384:	cmp	ip, #70	; 0x46
   2b388:	subls	r1, ip, #55	; 0x37
   2b38c:	subhi	r1, ip, #87	; 0x57
   2b390:	lsl	r1, r1, #4
   2b394:	uxtb	r1, r1
   2b398:	ldrb	ip, [r3, #1]
   2b39c:	cmp	ip, #57	; 0x39
   2b3a0:	subls	ip, ip, #48	; 0x30
   2b3a4:	uxtbls	ip, ip
   2b3a8:	bls	2b3bc <__assert_fail@plt+0x16d64>
   2b3ac:	cmp	ip, #70	; 0x46
   2b3b0:	subls	ip, ip, #55	; 0x37
   2b3b4:	subhi	ip, ip, #87	; 0x57
   2b3b8:	uxtb	ip, ip
   2b3bc:	add	ip, ip, r1
   2b3c0:	strb	ip, [r2, #1]!
   2b3c4:	cmp	r2, r9
   2b3c8:	add	r3, r3, #2
   2b3cc:	bne	2b370 <__assert_fail@plt+0x16d18>
   2b3d0:	add	r0, sp, #72	; 0x48
   2b3d4:	bl	23540 <__assert_fail@plt+0xeee8>
   2b3d8:	cmp	r0, #0
   2b3dc:	bne	2b4cc <__assert_fail@plt+0x16e74>
   2b3e0:	ldr	r4, [r4]
   2b3e4:	cmp	r4, #0
   2b3e8:	bne	2b324 <__assert_fail@plt+0x16ccc>
   2b3ec:	mov	sl, #0
   2b3f0:	ldr	r0, [sp, #28]
   2b3f4:	bl	13c44 <gcry_free@plt>
   2b3f8:	ldr	r0, [sp, #56]	; 0x38
   2b3fc:	cmp	r0, #0
   2b400:	bne	2b40c <__assert_fail@plt+0x16db4>
   2b404:	b	2b41c <__assert_fail@plt+0x16dc4>
   2b408:	mov	r0, r4
   2b40c:	ldr	r4, [r0]
   2b410:	bl	13c44 <gcry_free@plt>
   2b414:	cmp	r4, #0
   2b418:	bne	2b408 <__assert_fail@plt+0x16db0>
   2b41c:	ldr	r0, [sp, #68]	; 0x44
   2b420:	cmp	r0, #0
   2b424:	bne	2b430 <__assert_fail@plt+0x16dd8>
   2b428:	b	2b440 <__assert_fail@plt+0x16de8>
   2b42c:	mov	r0, r4
   2b430:	ldr	r4, [r0]
   2b434:	bl	13c44 <gcry_free@plt>
   2b438:	cmp	r4, #0
   2b43c:	bne	2b42c <__assert_fail@plt+0x16dd4>
   2b440:	ldr	r0, [sp, #44]	; 0x2c
   2b444:	cmp	r0, #0
   2b448:	bne	2b454 <__assert_fail@plt+0x16dfc>
   2b44c:	b	2b464 <__assert_fail@plt+0x16e0c>
   2b450:	mov	r0, r4
   2b454:	ldr	r4, [r0]
   2b458:	bl	13c44 <gcry_free@plt>
   2b45c:	cmp	r4, #0
   2b460:	bne	2b450 <__assert_fail@plt+0x16df8>
   2b464:	ldr	r2, [sp, #92]	; 0x5c
   2b468:	mov	r0, sl
   2b46c:	ldr	r3, [r7]
   2b470:	cmp	r2, r3
   2b474:	bne	2b634 <__assert_fail@plt+0x16fdc>
   2b478:	add	sp, sp, #100	; 0x64
   2b47c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b480:	mov	r0, sl
   2b484:	bl	13a64 <gpg_strerror@plt>
   2b488:	mov	r1, r0
   2b48c:	movw	r0, #30200	; 0x75f8
   2b490:	movt	r0, #4
   2b494:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2b498:	b	2b3f0 <__assert_fail@plt+0x16d98>
   2b49c:	movw	r0, #30252	; 0x762c
   2b4a0:	add	r1, r4, #12
   2b4a4:	movt	r0, #4
   2b4a8:	mov	r2, fp
   2b4ac:	bl	3f478 <__assert_fail@plt+0x2ae20>
   2b4b0:	b	2b2c8 <__assert_fail@plt+0x16c70>
   2b4b4:	movw	r0, #30284	; 0x764c
   2b4b8:	ldr	r1, [r4, #8]
   2b4bc:	movt	r0, #4
   2b4c0:	add	r2, r4, #12
   2b4c4:	bl	3f478 <__assert_fail@plt+0x2ae20>
   2b4c8:	b	2b330 <__assert_fail@plt+0x16cd8>
   2b4cc:	mov	r0, r6
   2b4d0:	ldr	r1, [r4, #8]
   2b4d4:	add	r2, sp, #32
   2b4d8:	bl	2a8a0 <__assert_fail@plt+0x16248>
   2b4dc:	subs	sl, r0, #0
   2b4e0:	bne	2b61c <__assert_fail@plt+0x16fc4>
   2b4e4:	ldr	r0, [sp, #28]
   2b4e8:	ldr	r1, [r4, #8]
   2b4ec:	bl	26740 <__assert_fail@plt+0x120e8>
   2b4f0:	subs	fp, r0, #0
   2b4f4:	ldr	r0, [sp, #32]
   2b4f8:	beq	2b60c <__assert_fail@plt+0x16fb4>
   2b4fc:	mov	r1, fp
   2b500:	add	r2, sp, #36	; 0x24
   2b504:	bl	26934 <__assert_fail@plt+0x122dc>
   2b508:	mov	sl, r0
   2b50c:	mov	r0, fp
   2b510:	bl	13c44 <gcry_free@plt>
   2b514:	ldr	r0, [sp, #32]
   2b518:	bl	13c44 <gcry_free@plt>
   2b51c:	cmp	sl, #0
   2b520:	bne	2b5f0 <__assert_fail@plt+0x16f98>
   2b524:	mov	r2, sl
   2b528:	ldr	r0, [sp, #36]	; 0x24
   2b52c:	mov	r1, sl
   2b530:	mov	r3, sl
   2b534:	bl	14604 <gcry_sexp_canon_len@plt>
   2b538:	subs	r2, r0, #0
   2b53c:	beq	2b638 <__assert_fail@plt+0x16fe0>
   2b540:	mov	r3, sl
   2b544:	ldr	r1, [sp, #36]	; 0x24
   2b548:	add	r0, sp, #72	; 0x48
   2b54c:	bl	223fc <__assert_fail@plt+0xdda4>
   2b550:	mov	sl, r0
   2b554:	ldr	r0, [sp, #36]	; 0x24
   2b558:	bl	13c44 <gcry_free@plt>
   2b55c:	cmp	sl, #0
   2b560:	bne	2b5d4 <__assert_fail@plt+0x16f7c>
   2b564:	ldr	r3, [r8, #4]
   2b568:	cmp	r3, #0
   2b56c:	bne	2b5c4 <__assert_fail@plt+0x16f6c>
   2b570:	cmp	r5, #0
   2b574:	beq	2b3e0 <__assert_fail@plt+0x16d88>
   2b578:	ldr	sl, [sp, #68]	; 0x44
   2b57c:	ldr	fp, [r4, #8]
   2b580:	cmp	sl, #0
   2b584:	beq	2b5a8 <__assert_fail@plt+0x16f50>
   2b588:	add	r0, sl, #12
   2b58c:	mov	r1, fp
   2b590:	bl	13a28 <strcmp@plt>
   2b594:	cmp	r0, #0
   2b598:	beq	2b3e0 <__assert_fail@plt+0x16d88>
   2b59c:	ldr	sl, [sl]
   2b5a0:	cmp	sl, #0
   2b5a4:	bne	2b588 <__assert_fail@plt+0x16f30>
   2b5a8:	mov	r1, fp
   2b5ac:	mov	r0, r6
   2b5b0:	mov	r2, r5
   2b5b4:	bl	2add4 <__assert_fail@plt+0x1677c>
   2b5b8:	subs	sl, r0, #0
   2b5bc:	beq	2b3e0 <__assert_fail@plt+0x16d88>
   2b5c0:	b	2b3f0 <__assert_fail@plt+0x16d98>
   2b5c4:	movw	r0, #30360	; 0x7698
   2b5c8:	movt	r0, #4
   2b5cc:	bl	3f478 <__assert_fail@plt+0x2ae20>
   2b5d0:	b	2b570 <__assert_fail@plt+0x16f18>
   2b5d4:	mov	r0, sl
   2b5d8:	bl	13a64 <gpg_strerror@plt>
   2b5dc:	mov	r1, r0
   2b5e0:	movw	r0, #19676	; 0x4cdc
   2b5e4:	movt	r0, #4
   2b5e8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2b5ec:	b	2b3f0 <__assert_fail@plt+0x16d98>
   2b5f0:	mov	r0, sl
   2b5f4:	bl	13a64 <gpg_strerror@plt>
   2b5f8:	mov	r1, r0
   2b5fc:	movw	r0, #19632	; 0x4cb0
   2b600:	movt	r0, #4
   2b604:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2b608:	b	2b3f0 <__assert_fail@plt+0x16d98>
   2b60c:	movw	sl, #32854	; 0x8056
   2b610:	bl	13c44 <gcry_free@plt>
   2b614:	movt	sl, #1024	; 0x400
   2b618:	b	2b3f0 <__assert_fail@plt+0x16d98>
   2b61c:	bl	13a64 <gpg_strerror@plt>
   2b620:	mov	r1, r0
   2b624:	movw	r0, #30316	; 0x766c
   2b628:	movt	r0, #4
   2b62c:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2b630:	b	2b3f0 <__assert_fail@plt+0x16d98>
   2b634:	bl	13cec <__stack_chk_fail@plt>
   2b638:	movw	r0, #34916	; 0x8864
   2b63c:	movw	r1, #30348	; 0x768c
   2b640:	movw	r3, #30040	; 0x7558
   2b644:	movt	r0, #4
   2b648:	movt	r1, #4
   2b64c:	movw	r2, #431	; 0x1af
   2b650:	movt	r3, #4
   2b654:	bl	14658 <__assert_fail@plt>
   2b658:	andeq	r7, r4, ip, ror #10
   2b65c:	push	{r4, lr}
   2b660:	movw	r4, #4448	; 0x1160
   2b664:	movt	r4, #4
   2b668:	movw	r1, #18888	; 0x49c8
   2b66c:	mov	r0, #6
   2b670:	movt	r1, #4
   2b674:	bl	1434c <setlocale@plt>
   2b678:	mov	r0, r4
   2b67c:	movw	r1, #30368	; 0x76a0
   2b680:	movt	r1, #4
   2b684:	bl	14508 <bindtextdomain@plt>
   2b688:	mov	r0, r4
   2b68c:	pop	{r4, lr}
   2b690:	b	13d7c <textdomain@plt>
   2b694:	push	{r4, lr}
   2b698:	movw	r0, #4448	; 0x1160
   2b69c:	mov	r1, #0
   2b6a0:	movt	r0, #4
   2b6a4:	bl	13ea8 <bind_textdomain_codeset@plt>
   2b6a8:	subs	r4, r0, #0
   2b6ac:	beq	2b6e0 <__assert_fail@plt+0x17088>
   2b6b0:	mov	r0, r4
   2b6b4:	bl	141f0 <gcry_xstrdup@plt>
   2b6b8:	movw	r1, #30388	; 0x76b4
   2b6bc:	movt	r1, #4
   2b6c0:	mov	r4, r0
   2b6c4:	movw	r0, #4448	; 0x1160
   2b6c8:	movt	r0, #4
   2b6cc:	bl	13ea8 <bind_textdomain_codeset@plt>
   2b6d0:	subs	r3, r0, #0
   2b6d4:	beq	2b6f4 <__assert_fail@plt+0x1709c>
   2b6d8:	mov	r0, r4
   2b6dc:	pop	{r4, pc}
   2b6e0:	mov	r0, #14
   2b6e4:	bl	143dc <nl_langinfo@plt>
   2b6e8:	subs	r4, r0, #0
   2b6ec:	beq	2b6d8 <__assert_fail@plt+0x17080>
   2b6f0:	b	2b6b0 <__assert_fail@plt+0x17058>
   2b6f4:	mov	r0, r4
   2b6f8:	mov	r4, r3
   2b6fc:	bl	13c44 <gcry_free@plt>
   2b700:	b	2b6d8 <__assert_fail@plt+0x17080>
   2b704:	push	{r4, lr}
   2b708:	subs	r4, r0, #0
   2b70c:	popeq	{r4, pc}
   2b710:	mov	r1, r4
   2b714:	movw	r0, #4448	; 0x1160
   2b718:	movt	r0, #4
   2b71c:	bl	13ea8 <bind_textdomain_codeset@plt>
   2b720:	mov	r0, r4
   2b724:	pop	{r4, lr}
   2b728:	b	13c44 <gcry_free@plt>
   2b72c:	push	{r3, r4, r5, lr}
   2b730:	mov	r5, r0
   2b734:	bl	2b694 <__assert_fail@plt+0x1703c>
   2b738:	mov	r1, r5
   2b73c:	mov	r2, #5
   2b740:	mov	r4, r0
   2b744:	mov	r0, #0
   2b748:	bl	13cc8 <dcgettext@plt>
   2b74c:	mov	r5, r0
   2b750:	mov	r0, r4
   2b754:	bl	2b704 <__assert_fail@plt+0x170ac>
   2b758:	mov	r0, r5
   2b75c:	pop	{r3, r4, r5, pc}
   2b760:	push	{r3, lr}
   2b764:	mov	r0, #0
   2b768:	bl	3c928 <__assert_fail@plt+0x282d0>
   2b76c:	pop	{r3, lr}
   2b770:	b	342d0 <__assert_fail@plt+0x1fc78>
   2b774:	ldr	r1, [r0]
   2b778:	push	{r4, r5}
   2b77c:	ldrb	ip, [r1]
   2b780:	sub	r2, ip, #48	; 0x30
   2b784:	uxtb	r3, r2
   2b788:	cmp	r3, #9
   2b78c:	bhi	2b7cc <__assert_fail@plt+0x17174>
   2b790:	add	r1, r1, #1
   2b794:	mov	r3, #0
   2b798:	add	r3, r3, r3, lsl #2
   2b79c:	ldrb	ip, [r1], #1
   2b7a0:	add	r3, r2, r3, lsl #1
   2b7a4:	sub	r2, ip, #48	; 0x30
   2b7a8:	uxtb	r4, r2
   2b7ac:	cmp	r4, #9
   2b7b0:	bls	2b798 <__assert_fail@plt+0x17140>
   2b7b4:	cmp	r3, #0
   2b7b8:	beq	2b7d0 <__assert_fail@plt+0x17178>
   2b7bc:	cmp	ip, #58	; 0x3a
   2b7c0:	moveq	r5, r1
   2b7c4:	streq	r5, [r0]
   2b7c8:	beq	2b7d0 <__assert_fail@plt+0x17178>
   2b7cc:	mov	r3, #0
   2b7d0:	mov	r0, r3
   2b7d4:	pop	{r4, r5}
   2b7d8:	bx	lr
   2b7dc:	push	{r4, r5, r6, r7, r8, lr}
   2b7e0:	subs	r6, r2, #0
   2b7e4:	mov	r2, #0
   2b7e8:	mov	r3, #0
   2b7ec:	mov	r5, r1
   2b7f0:	str	r3, [r1]
   2b7f4:	strne	r3, [r6]
   2b7f8:	mov	r1, #1
   2b7fc:	mov	r3, r2
   2b800:	mov	r4, r0
   2b804:	bl	14298 <gcry_sexp_sprint@plt>
   2b808:	subs	r7, r0, #0
   2b80c:	bne	2b818 <__assert_fail@plt+0x171c0>
   2b810:	mov	r0, #59	; 0x3b
   2b814:	pop	{r4, r5, r6, r7, r8, pc}
   2b818:	bl	139c8 <gcry_malloc@plt>
   2b81c:	subs	r8, r0, #0
   2b820:	beq	2b858 <__assert_fail@plt+0x17200>
   2b824:	mov	r3, r7
   2b828:	mov	r0, r4
   2b82c:	mov	r1, #1
   2b830:	mov	r2, r8
   2b834:	bl	14298 <gcry_sexp_sprint@plt>
   2b838:	subs	r3, r0, #0
   2b83c:	beq	2b810 <__assert_fail@plt+0x171b8>
   2b840:	cmp	r6, #0
   2b844:	str	r8, [r5]
   2b848:	beq	2b86c <__assert_fail@plt+0x17214>
   2b84c:	mov	r0, #0
   2b850:	str	r3, [r6]
   2b854:	pop	{r4, r5, r6, r7, r8, pc}
   2b858:	bl	14580 <gpg_err_code_from_syserror@plt>
   2b85c:	cmp	r0, #0
   2b860:	beq	2b86c <__assert_fail@plt+0x17214>
   2b864:	uxth	r0, r0
   2b868:	pop	{r4, r5, r6, r7, r8, pc}
   2b86c:	mov	r0, #0
   2b870:	pop	{r4, r5, r6, r7, r8, pc}
   2b874:	push	{r4, r5, r6, lr}
   2b878:	movw	r4, #47296	; 0xb8c0
   2b87c:	movt	r4, #5
   2b880:	sub	sp, sp, #8
   2b884:	subs	r6, r2, #0
   2b888:	ldr	ip, [r4]
   2b88c:	moveq	r0, #55	; 0x37
   2b890:	str	ip, [sp, #4]
   2b894:	beq	2b8b8 <__assert_fail@plt+0x17260>
   2b898:	mov	r2, r0
   2b89c:	mov	r3, r1
   2b8a0:	mov	r0, sp
   2b8a4:	mov	r1, #0
   2b8a8:	bl	13bf0 <gcry_sexp_sscan@plt>
   2b8ac:	subs	r5, r0, #0
   2b8b0:	movne	r0, r5
   2b8b4:	beq	2b8d0 <__assert_fail@plt+0x17278>
   2b8b8:	ldr	r2, [sp, #4]
   2b8bc:	ldr	r3, [r4]
   2b8c0:	cmp	r2, r3
   2b8c4:	bne	2b8f4 <__assert_fail@plt+0x1729c>
   2b8c8:	add	sp, sp, #8
   2b8cc:	pop	{r4, r5, r6, pc}
   2b8d0:	mov	r1, r6
   2b8d4:	ldr	r0, [sp]
   2b8d8:	bl	14610 <gcry_pk_get_keygrip@plt>
   2b8dc:	cmp	r0, #0
   2b8e0:	ldr	r0, [sp]
   2b8e4:	moveq	r5, #63	; 0x3f
   2b8e8:	bl	13be4 <gcry_sexp_release@plt>
   2b8ec:	mov	r0, r5
   2b8f0:	b	2b8b8 <__assert_fail@plt+0x17260>
   2b8f4:	bl	13cec <__stack_chk_fail@plt>
   2b8f8:	rsbs	r2, r0, #1
   2b8fc:	push	{r4, r5, r6, r7, lr}
   2b900:	movw	r4, #47296	; 0xb8c0
   2b904:	movt	r4, #5
   2b908:	mov	r5, r1
   2b90c:	movcc	r2, #0
   2b910:	rsbs	r3, r5, #1
   2b914:	ldr	r1, [r4]
   2b918:	sub	sp, sp, #12
   2b91c:	movcc	r3, #0
   2b920:	tst	r2, r3
   2b924:	str	r1, [sp, #4]
   2b928:	bne	2b9f4 <__assert_fail@plt+0x1739c>
   2b92c:	orrs	r3, r2, r3
   2b930:	bne	2b998 <__assert_fail@plt+0x17340>
   2b934:	ldrb	r3, [r0]
   2b938:	cmp	r3, #40	; 0x28
   2b93c:	bne	2ba00 <__assert_fail@plt+0x173a8>
   2b940:	ldrb	r3, [r5]
   2b944:	cmp	r3, #40	; 0x28
   2b948:	bne	2ba00 <__assert_fail@plt+0x173a8>
   2b94c:	mov	r2, #10
   2b950:	mov	r1, sp
   2b954:	add	r0, r0, #1
   2b958:	bl	1407c <strtoul@plt>
   2b95c:	ldr	r6, [sp]
   2b960:	mov	r1, sp
   2b964:	mov	r2, #10
   2b968:	mov	r7, r0
   2b96c:	add	r0, r5, #1
   2b970:	bl	1407c <strtoul@plt>
   2b974:	ldrb	r3, [r6]
   2b978:	ldr	r1, [sp]
   2b97c:	cmp	r3, #58	; 0x3a
   2b980:	bne	2ba00 <__assert_fail@plt+0x173a8>
   2b984:	ldrb	r3, [r1]
   2b988:	cmp	r3, #58	; 0x3a
   2b98c:	bne	2ba00 <__assert_fail@plt+0x173a8>
   2b990:	cmp	r7, r0
   2b994:	beq	2b9b4 <__assert_fail@plt+0x1735c>
   2b998:	mov	r0, #1
   2b99c:	ldr	r2, [sp, #4]
   2b9a0:	ldr	r3, [r4]
   2b9a4:	cmp	r2, r3
   2b9a8:	bne	2b9fc <__assert_fail@plt+0x173a4>
   2b9ac:	add	sp, sp, #12
   2b9b0:	pop	{r4, r5, r6, r7, pc}
   2b9b4:	cmp	r7, #0
   2b9b8:	add	r3, r6, #1
   2b9bc:	add	r2, r1, #1
   2b9c0:	beq	2b9f4 <__assert_fail@plt+0x1739c>
   2b9c4:	ldrb	r1, [r1, #1]
   2b9c8:	ldrb	r0, [r6, #1]
   2b9cc:	cmp	r0, r1
   2b9d0:	bne	2b998 <__assert_fail@plt+0x17340>
   2b9d4:	add	r0, r6, r7
   2b9d8:	b	2b9ec <__assert_fail@plt+0x17394>
   2b9dc:	ldrb	ip, [r3, #1]!
   2b9e0:	ldrb	r1, [r2, #1]!
   2b9e4:	cmp	ip, r1
   2b9e8:	bne	2b998 <__assert_fail@plt+0x17340>
   2b9ec:	cmp	r3, r0
   2b9f0:	bne	2b9dc <__assert_fail@plt+0x17384>
   2b9f4:	mov	r0, #0
   2b9f8:	b	2b99c <__assert_fail@plt+0x17344>
   2b9fc:	bl	13cec <__stack_chk_fail@plt>
   2ba00:	movw	r0, #30396	; 0x76bc
   2ba04:	movt	r0, #4
   2ba08:	bl	3f57c <__assert_fail@plt+0x2af24>
   2ba0c:	push	{r4, r5, r6, r7, r8, lr}
   2ba10:	movw	r7, #47296	; 0xb8c0
   2ba14:	movt	r7, #5
   2ba18:	sub	sp, sp, #56	; 0x38
   2ba1c:	mov	r5, r0
   2ba20:	mov	r4, #0
   2ba24:	ldr	r3, [r7]
   2ba28:	str	r3, [sp, #52]	; 0x34
   2ba2c:	ldrb	r3, [r5, r4]
   2ba30:	bic	r2, r3, #32
   2ba34:	sub	r3, r3, #48	; 0x30
   2ba38:	sub	r2, r2, #65	; 0x41
   2ba3c:	cmp	r3, #9
   2ba40:	cmphi	r2, #5
   2ba44:	bls	2bb9c <__assert_fail@plt+0x17544>
   2ba48:	cmp	r1, #0
   2ba4c:	strne	r4, [r1]
   2ba50:	cmp	r4, #0
   2ba54:	beq	2bbe0 <__assert_fail@plt+0x17588>
   2ba58:	add	lr, r4, #1
   2ba5c:	movw	r0, #52429	; 0xcccd
   2ba60:	add	r6, sp, #56	; 0x38
   2ba64:	movt	r0, #52428	; 0xcccc
   2ba68:	lsr	lr, lr, #1
   2ba6c:	mov	ip, sp
   2ba70:	mov	r1, #58	; 0x3a
   2ba74:	mov	r2, #0
   2ba78:	mov	r3, lr
   2ba7c:	strb	r1, [r6, #-8]!
   2ba80:	strb	r2, [sp, #49]	; 0x31
   2ba84:	umull	r1, r2, r0, r3
   2ba88:	sub	r6, r6, #1
   2ba8c:	lsr	r2, r2, #3
   2ba90:	add	r1, r2, r2, lsl #2
   2ba94:	sub	r1, r3, r1, lsl #1
   2ba98:	mov	r3, r2
   2ba9c:	add	r2, r1, #48	; 0x30
   2baa0:	strb	r2, [r6]
   2baa4:	cmp	r3, #0
   2baa8:	cmpne	ip, r6
   2baac:	bcc	2ba84 <__assert_fail@plt+0x1742c>
   2bab0:	add	r3, sp, #50	; 0x32
   2bab4:	add	r0, lr, #3
   2bab8:	rsb	r3, r6, r3
   2babc:	add	r0, r0, r3
   2bac0:	bl	139c8 <gcry_malloc@plt>
   2bac4:	subs	r8, r0, #0
   2bac8:	beq	2bbe0 <__assert_fail@plt+0x17588>
   2bacc:	mov	r0, r8
   2bad0:	mov	r1, r6
   2bad4:	mov	r3, #40	; 0x28
   2bad8:	strb	r3, [r0], #1
   2badc:	bl	13cb0 <stpcpy@plt>
   2bae0:	tst	r4, #1
   2bae4:	mov	r6, r0
   2bae8:	bne	2bba4 <__assert_fail@plt+0x1754c>
   2baec:	cmp	r4, #1
   2baf0:	bls	2bb70 <__assert_fail@plt+0x17518>
   2baf4:	mov	r1, r6
   2baf8:	mov	r2, r4
   2bafc:	ldrb	r3, [r5]
   2bb00:	add	r1, r1, #1
   2bb04:	cmp	r3, #57	; 0x39
   2bb08:	lslls	r3, r3, #4
   2bb0c:	andls	ip, r3, #240	; 0xf0
   2bb10:	bls	2bb28 <__assert_fail@plt+0x174d0>
   2bb14:	cmp	r3, #70	; 0x46
   2bb18:	subls	ip, r3, #55	; 0x37
   2bb1c:	subhi	ip, r3, #87	; 0x57
   2bb20:	lsl	ip, ip, #4
   2bb24:	uxtb	ip, ip
   2bb28:	ldrb	r3, [r5, #1]
   2bb2c:	cmp	r3, #57	; 0x39
   2bb30:	subls	r3, r3, #48	; 0x30
   2bb34:	uxtbls	r3, r3
   2bb38:	bls	2bb4c <__assert_fail@plt+0x174f4>
   2bb3c:	cmp	r3, #70	; 0x46
   2bb40:	subls	r3, r3, #55	; 0x37
   2bb44:	subhi	r3, r3, #87	; 0x57
   2bb48:	uxtb	r3, r3
   2bb4c:	sub	r2, r2, #2
   2bb50:	add	r3, r3, ip
   2bb54:	cmp	r2, #1
   2bb58:	strb	r3, [r1, #-1]
   2bb5c:	add	r5, r5, #2
   2bb60:	bhi	2bafc <__assert_fail@plt+0x174a4>
   2bb64:	sub	r4, r4, #2
   2bb68:	add	r6, r6, r4, lsr #1
   2bb6c:	add	r6, r6, #1
   2bb70:	mov	r0, r8
   2bb74:	mov	r2, #41	; 0x29
   2bb78:	mov	r3, #0
   2bb7c:	strb	r2, [r6]
   2bb80:	strb	r3, [r6, #1]
   2bb84:	ldr	r2, [sp, #52]	; 0x34
   2bb88:	ldr	r3, [r7]
   2bb8c:	cmp	r2, r3
   2bb90:	bne	2bbe8 <__assert_fail@plt+0x17590>
   2bb94:	add	sp, sp, #56	; 0x38
   2bb98:	pop	{r4, r5, r6, r7, r8, pc}
   2bb9c:	add	r4, r4, #1
   2bba0:	b	2ba2c <__assert_fail@plt+0x173d4>
   2bba4:	ldrb	r3, [r5]
   2bba8:	add	r2, r0, #1
   2bbac:	cmp	r3, #57	; 0x39
   2bbb0:	subls	r3, r3, #48	; 0x30
   2bbb4:	uxtbls	r3, r3
   2bbb8:	bls	2bbcc <__assert_fail@plt+0x17574>
   2bbbc:	cmp	r3, #70	; 0x46
   2bbc0:	subls	r3, r3, #55	; 0x37
   2bbc4:	subhi	r3, r3, #87	; 0x57
   2bbc8:	uxtb	r3, r3
   2bbcc:	strb	r3, [r6]
   2bbd0:	add	r5, r5, #1
   2bbd4:	sub	r4, r4, #1
   2bbd8:	mov	r6, r2
   2bbdc:	b	2baec <__assert_fail@plt+0x17494>
   2bbe0:	mov	r0, #0
   2bbe4:	b	2bb84 <__assert_fail@plt+0x1752c>
   2bbe8:	bl	13cec <__stack_chk_fail@plt>
   2bbec:	push	{r4, r5, r6, r7, lr}
   2bbf0:	movw	r4, #47296	; 0xb8c0
   2bbf4:	movt	r4, #5
   2bbf8:	sub	sp, sp, #68	; 0x44
   2bbfc:	cmp	r0, #0
   2bc00:	ldr	r3, [r4]
   2bc04:	str	r0, [sp, #4]
   2bc08:	str	r3, [sp, #60]	; 0x3c
   2bc0c:	beq	2bc1c <__assert_fail@plt+0x175c4>
   2bc10:	ldrb	r3, [r0]
   2bc14:	cmp	r3, #40	; 0x28
   2bc18:	beq	2bc38 <__assert_fail@plt+0x175e0>
   2bc1c:	mov	r0, #0
   2bc20:	ldr	r2, [sp, #60]	; 0x3c
   2bc24:	ldr	r3, [r4]
   2bc28:	cmp	r2, r3
   2bc2c:	bne	2bdf0 <__assert_fail@plt+0x17798>
   2bc30:	add	sp, sp, #68	; 0x44
   2bc34:	pop	{r4, r5, r6, r7, pc}
   2bc38:	ldrb	r1, [r0, #1]
   2bc3c:	add	r3, r0, #1
   2bc40:	str	r3, [sp, #4]
   2bc44:	sub	r3, r1, #48	; 0x30
   2bc48:	uxtb	r2, r3
   2bc4c:	cmp	r2, #9
   2bc50:	bhi	2bc1c <__assert_fail@plt+0x175c4>
   2bc54:	add	r0, r0, #2
   2bc58:	mov	r2, #0
   2bc5c:	add	r2, r2, r2, lsl #2
   2bc60:	mov	r5, r0
   2bc64:	ldrb	r1, [r0], #1
   2bc68:	add	r2, r3, r2, lsl #1
   2bc6c:	sub	r3, r1, #48	; 0x30
   2bc70:	uxtb	ip, r3
   2bc74:	cmp	ip, #9
   2bc78:	bls	2bc5c <__assert_fail@plt+0x17604>
   2bc7c:	cmp	r2, #0
   2bc80:	beq	2bc1c <__assert_fail@plt+0x175c4>
   2bc84:	cmp	r1, #58	; 0x3a
   2bc88:	bne	2bc1c <__assert_fail@plt+0x175c4>
   2bc8c:	cmp	r2, #7
   2bc90:	str	r0, [sp, #4]
   2bc94:	bne	2bc1c <__assert_fail@plt+0x175c4>
   2bc98:	movw	r1, #30436	; 0x76e4
   2bc9c:	movt	r1, #4
   2bca0:	bl	13c80 <memcmp@plt>
   2bca4:	cmp	r0, #0
   2bca8:	bne	2bc1c <__assert_fail@plt+0x175c4>
   2bcac:	ldrb	r3, [r5, #8]
   2bcb0:	add	r2, r5, #8
   2bcb4:	str	r2, [sp, #4]
   2bcb8:	cmp	r3, #40	; 0x28
   2bcbc:	bne	2bc1c <__assert_fail@plt+0x175c4>
   2bcc0:	mov	r6, #1
   2bcc4:	add	r1, r5, #9
   2bcc8:	str	r1, [sp, #4]
   2bccc:	ldrb	r0, [r1]
   2bcd0:	cmp	r0, #40	; 0x28
   2bcd4:	addeq	r6, r6, #1
   2bcd8:	addeq	r1, r1, #1
   2bcdc:	beq	2bd30 <__assert_fail@plt+0x176d8>
   2bce0:	cmp	r0, #41	; 0x29
   2bce4:	beq	2bde4 <__assert_fail@plt+0x1778c>
   2bce8:	sub	r2, r0, #48	; 0x30
   2bcec:	uxtb	r3, r2
   2bcf0:	cmp	r3, #9
   2bcf4:	bhi	2bc1c <__assert_fail@plt+0x175c4>
   2bcf8:	add	r1, r1, #1
   2bcfc:	mov	r3, #0
   2bd00:	add	r3, r3, r3, lsl #2
   2bd04:	ldrb	r0, [r1], #1
   2bd08:	add	r3, r2, r3, lsl #1
   2bd0c:	sub	r2, r0, #48	; 0x30
   2bd10:	uxtb	ip, r2
   2bd14:	cmp	ip, #9
   2bd18:	bls	2bd00 <__assert_fail@plt+0x176a8>
   2bd1c:	cmp	r3, #0
   2bd20:	beq	2bc1c <__assert_fail@plt+0x175c4>
   2bd24:	cmp	r0, #58	; 0x3a
   2bd28:	bne	2bc1c <__assert_fail@plt+0x175c4>
   2bd2c:	add	r1, r1, r3
   2bd30:	cmp	r6, #0
   2bd34:	bgt	2bccc <__assert_fail@plt+0x17674>
   2bd38:	str	r1, [sp, #4]
   2bd3c:	bne	2bc1c <__assert_fail@plt+0x175c4>
   2bd40:	ldrb	r3, [r1]
   2bd44:	cmp	r3, #40	; 0x28
   2bd48:	bne	2bc1c <__assert_fail@plt+0x175c4>
   2bd4c:	add	r5, sp, #64	; 0x40
   2bd50:	add	r1, r1, #1
   2bd54:	str	r1, [r5, #-60]!	; 0xffffffc4
   2bd58:	mov	r0, r5
   2bd5c:	bl	2b774 <__assert_fail@plt+0x1711c>
   2bd60:	cmp	r0, #4
   2bd64:	mov	r2, r0
   2bd68:	bne	2bc1c <__assert_fail@plt+0x175c4>
   2bd6c:	ldr	r7, [sp, #4]
   2bd70:	movw	r1, #26464	; 0x6760
   2bd74:	movt	r1, #4
   2bd78:	mov	r0, r7
   2bd7c:	bl	13c80 <memcmp@plt>
   2bd80:	cmp	r0, #0
   2bd84:	bne	2bc1c <__assert_fail@plt+0x175c4>
   2bd88:	mov	r0, r5
   2bd8c:	add	r7, r7, #4
   2bd90:	str	r7, [sp, #4]
   2bd94:	bl	2b774 <__assert_fail@plt+0x1711c>
   2bd98:	rsbs	r3, r0, #1
   2bd9c:	add	r2, r0, #1
   2bda0:	mov	r5, r0
   2bda4:	movcc	r3, #0
   2bda8:	cmp	r2, #49	; 0x31
   2bdac:	orrhi	r3, r3, #1
   2bdb0:	cmp	r3, #0
   2bdb4:	bne	2bc1c <__assert_fail@plt+0x175c4>
   2bdb8:	mov	r2, r0
   2bdbc:	ldr	r1, [sp, #4]
   2bdc0:	mov	r3, #50	; 0x32
   2bdc4:	add	r0, sp, #8
   2bdc8:	bl	13e00 <__memcpy_chk@plt>
   2bdcc:	add	r3, sp, #64	; 0x40
   2bdd0:	add	r5, r3, r5
   2bdd4:	add	r0, sp, #8
   2bdd8:	strb	r6, [r5, #-56]	; 0xffffffc8
   2bddc:	bl	13ff8 <gcry_md_map_name@plt>
   2bde0:	b	2bc20 <__assert_fail@plt+0x175c8>
   2bde4:	sub	r6, r6, #1
   2bde8:	add	r1, r1, #1
   2bdec:	b	2bd30 <__assert_fail@plt+0x176d8>
   2bdf0:	bl	13cec <__stack_chk_fail@plt>
   2bdf4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2bdf8:	movw	lr, #30444	; 0x76ec
   2bdfc:	movt	lr, #4
   2be00:	mov	r5, r1
   2be04:	mov	r6, r0
   2be08:	mov	r7, r2
   2be0c:	mov	r4, r3
   2be10:	sub	sp, sp, #148	; 0x94
   2be14:	ldm	lr!, {r0, r1, r2, r3}
   2be18:	add	ip, sp, #40	; 0x28
   2be1c:	movw	r8, #47296	; 0xb8c0
   2be20:	movw	r9, #30472	; 0x7708
   2be24:	movt	r8, #5
   2be28:	movt	r9, #4
   2be2c:	cmp	r5, #0
   2be30:	ldr	fp, [sp, #184]	; 0xb8
   2be34:	stmia	ip!, {r0, r1, r2, r3}
   2be38:	movw	r3, #10537	; 0x2929
   2be3c:	ldm	lr, {r0, r1, r2}
   2be40:	movt	r3, #41	; 0x29
   2be44:	ldr	lr, [r8]
   2be48:	str	r3, [sp, #28]
   2be4c:	stmia	ip!, {r0, r1}
   2be50:	ldm	r9, {r0, r1}
   2be54:	strb	r2, [ip]
   2be58:	str	lr, [sp, #140]	; 0x8c
   2be5c:	str	r0, [sp, #32]
   2be60:	strh	r1, [sp, #36]	; 0x24
   2be64:	beq	2c05c <__assert_fail@plt+0x17a04>
   2be68:	ldrb	r3, [r6]
   2be6c:	cmp	r3, #0
   2be70:	addne	r2, r5, #33	; 0x21
   2be74:	strne	r2, [sp, #12]
   2be78:	bne	2bea8 <__assert_fail@plt+0x17850>
   2be7c:	add	r3, r6, #1
   2be80:	b	2be94 <__assert_fail@plt+0x1783c>
   2be84:	ldrb	r2, [r3]
   2be88:	add	r3, r3, #1
   2be8c:	cmp	r2, #0
   2be90:	bne	2c050 <__assert_fail@plt+0x179f8>
   2be94:	subs	r5, r5, #1
   2be98:	mov	r6, r3
   2be9c:	bne	2be84 <__assert_fail@plt+0x1782c>
   2bea0:	mov	r3, #33	; 0x21
   2bea4:	str	r3, [sp, #12]
   2bea8:	cmp	r4, #0
   2beac:	beq	2bee0 <__assert_fail@plt+0x17888>
   2beb0:	ldrb	r3, [r7]
   2beb4:	cmp	r3, #0
   2beb8:	addeq	r3, r7, #1
   2bebc:	beq	2bed4 <__assert_fail@plt+0x1787c>
   2bec0:	b	2bee0 <__assert_fail@plt+0x17888>
   2bec4:	ldrb	r2, [r3]
   2bec8:	add	r3, r3, #1
   2becc:	cmp	r2, #0
   2bed0:	bne	2bee0 <__assert_fail@plt+0x17888>
   2bed4:	subs	r4, r4, #1
   2bed8:	mov	r7, r3
   2bedc:	bne	2bec4 <__assert_fail@plt+0x1786c>
   2bee0:	cmp	r5, #0
   2bee4:	beq	2c044 <__assert_fail@plt+0x179ec>
   2bee8:	ldrsb	r3, [r6]
   2beec:	cmp	r3, #0
   2bef0:	movge	ip, #0
   2bef4:	strge	ip, [sp, #16]
   2bef8:	blt	2c044 <__assert_fail@plt+0x179ec>
   2befc:	cmp	r4, #0
   2bf00:	beq	2c038 <__assert_fail@plt+0x179e0>
   2bf04:	ldrsb	r3, [r7]
   2bf08:	cmp	r3, #0
   2bf0c:	movge	sl, #0
   2bf10:	strge	sl, [sp, #20]
   2bf14:	blt	2c038 <__assert_fail@plt+0x179e0>
   2bf18:	mov	r1, #35	; 0x23
   2bf1c:	add	r2, ip, r5
   2bf20:	mov	r3, r1
   2bf24:	str	r2, [sp, #4]
   2bf28:	movw	r9, #24516	; 0x5fc4
   2bf2c:	mov	r2, #1
   2bf30:	movt	r9, #4
   2bf34:	add	r0, sp, #68	; 0x44
   2bf38:	str	r9, [sp]
   2bf3c:	str	ip, [sp, #8]
   2bf40:	bl	1464c <__snprintf_chk@plt>
   2bf44:	mov	r1, #35	; 0x23
   2bf48:	add	r2, sl, r4
   2bf4c:	mov	r3, r1
   2bf50:	str	r9, [sp]
   2bf54:	str	r2, [sp, #4]
   2bf58:	add	r0, sp, #104	; 0x68
   2bf5c:	mov	r2, #1
   2bf60:	bl	1464c <__snprintf_chk@plt>
   2bf64:	add	r0, sp, #68	; 0x44
   2bf68:	bl	14094 <strlen@plt>
   2bf6c:	mov	r9, r0
   2bf70:	add	r0, sp, #104	; 0x68
   2bf74:	bl	14094 <strlen@plt>
   2bf78:	ldr	r2, [sp, #12]
   2bf7c:	ldr	ip, [sp, #8]
   2bf80:	add	r3, r4, r2
   2bf84:	add	ip, r3, ip
   2bf88:	add	sl, ip, sl
   2bf8c:	add	r9, sl, r9
   2bf90:	add	r0, r9, r0
   2bf94:	bl	139c8 <gcry_malloc@plt>
   2bf98:	subs	r9, r0, #0
   2bf9c:	beq	2c01c <__assert_fail@plt+0x179c4>
   2bfa0:	add	r1, sp, #40	; 0x28
   2bfa4:	bl	13cb0 <stpcpy@plt>
   2bfa8:	add	r1, sp, #68	; 0x44
   2bfac:	bl	13cb0 <stpcpy@plt>
   2bfb0:	ldr	r2, [sp, #16]
   2bfb4:	mov	r1, r6
   2bfb8:	cmp	r2, #0
   2bfbc:	mov	r2, r5
   2bfc0:	mov	r3, r0
   2bfc4:	addne	r3, r0, #1
   2bfc8:	mov	r0, r3
   2bfcc:	bl	13ba8 <memcpy@plt>
   2bfd0:	add	r1, sp, #32
   2bfd4:	add	r0, r0, r5
   2bfd8:	bl	13cb0 <stpcpy@plt>
   2bfdc:	add	r1, sp, #104	; 0x68
   2bfe0:	bl	13cb0 <stpcpy@plt>
   2bfe4:	ldr	r2, [sp, #20]
   2bfe8:	mov	r1, r7
   2bfec:	cmp	r2, #0
   2bff0:	mov	r2, r4
   2bff4:	mov	r3, r0
   2bff8:	addne	r3, r0, #1
   2bffc:	mov	r0, r3
   2c000:	bl	13ba8 <memcpy@plt>
   2c004:	add	r1, sp, #28
   2c008:	add	r0, r0, r4
   2c00c:	bl	13cb0 <stpcpy@plt>
   2c010:	cmp	fp, #0
   2c014:	rsbne	r0, r9, r0
   2c018:	strne	r0, [fp]
   2c01c:	ldr	r2, [sp, #140]	; 0x8c
   2c020:	mov	r0, r9
   2c024:	ldr	r3, [r8]
   2c028:	cmp	r2, r3
   2c02c:	bne	2c068 <__assert_fail@plt+0x17a10>
   2c030:	add	sp, sp, #148	; 0x94
   2c034:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c038:	mov	sl, #1
   2c03c:	str	sl, [sp, #20]
   2c040:	b	2bf18 <__assert_fail@plt+0x178c0>
   2c044:	mov	ip, #1
   2c048:	str	ip, [sp, #16]
   2c04c:	b	2befc <__assert_fail@plt+0x178a4>
   2c050:	add	r3, r5, #33	; 0x21
   2c054:	str	r3, [sp, #12]
   2c058:	b	2bea8 <__assert_fail@plt+0x17850>
   2c05c:	mov	r2, #33	; 0x21
   2c060:	str	r2, [sp, #12]
   2c064:	b	2bea8 <__assert_fail@plt+0x17850>
   2c068:	bl	13cec <__stack_chk_fail@plt>
   2c06c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2c070:	sub	sp, sp, #60	; 0x3c
   2c074:	movw	r4, #47296	; 0xb8c0
   2c078:	movt	r4, #5
   2c07c:	ldr	r7, [sp, #96]	; 0x60
   2c080:	mov	ip, #0
   2c084:	ldr	r8, [sp, #100]	; 0x64
   2c088:	mov	r5, r2
   2c08c:	ldr	lr, [r4]
   2c090:	mov	r6, r3
   2c094:	str	ip, [r2]
   2c098:	add	r9, sp, #28
   2c09c:	str	ip, [sp, #4]
   2c0a0:	add	r2, sp, #32
   2c0a4:	str	ip, [r3]
   2c0a8:	add	r3, sp, #20
   2c0ac:	str	ip, [r7]
   2c0b0:	str	r0, [sp, #16]
   2c0b4:	add	r0, sp, #16
   2c0b8:	str	r1, [sp, #24]
   2c0bc:	add	r1, sp, #24
   2c0c0:	str	ip, [r8]
   2c0c4:	str	r9, [sp]
   2c0c8:	str	lr, [sp, #52]	; 0x34
   2c0cc:	str	ip, [sp, #36]	; 0x24
   2c0d0:	str	ip, [sp, #40]	; 0x28
   2c0d4:	str	ip, [sp, #32]
   2c0d8:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c0dc:	subs	r3, r0, #0
   2c0e0:	beq	2c100 <__assert_fail@plt+0x17aa8>
   2c0e4:	mov	r0, r3
   2c0e8:	ldr	r2, [sp, #52]	; 0x34
   2c0ec:	ldr	r3, [r4]
   2c0f0:	cmp	r2, r3
   2c0f4:	bne	2c1cc <__assert_fail@plt+0x17b74>
   2c0f8:	add	sp, sp, #60	; 0x3c
   2c0fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2c100:	add	r2, sp, #28
   2c104:	str	r3, [sp, #4]
   2c108:	str	r2, [sp]
   2c10c:	add	r0, sp, #16
   2c110:	add	r1, sp, #24
   2c114:	add	r2, sp, #32
   2c118:	add	r3, sp, #20
   2c11c:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c120:	cmp	r0, #0
   2c124:	bne	2c0e8 <__assert_fail@plt+0x17a90>
   2c128:	ldr	r1, [sp, #20]
   2c12c:	cmp	r1, #0
   2c130:	beq	2c140 <__assert_fail@plt+0x17ae8>
   2c134:	ldr	r2, [sp, #28]
   2c138:	cmp	r2, #10
   2c13c:	beq	2c148 <__assert_fail@plt+0x17af0>
   2c140:	mov	r0, #6
   2c144:	b	2c0e8 <__assert_fail@plt+0x17a90>
   2c148:	movw	r0, #19248	; 0x4b30
   2c14c:	movt	r0, #4
   2c150:	bl	13c80 <memcmp@plt>
   2c154:	subs	r3, r0, #0
   2c158:	bne	2c140 <__assert_fail@plt+0x17ae8>
   2c15c:	str	r3, [sp, #4]
   2c160:	add	r9, sp, #28
   2c164:	add	r3, sp, #20
   2c168:	str	r9, [sp]
   2c16c:	add	r0, sp, #16
   2c170:	add	r1, sp, #24
   2c174:	add	r2, sp, #32
   2c178:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c17c:	subs	r3, r0, #0
   2c180:	bne	2c0e4 <__assert_fail@plt+0x17a8c>
   2c184:	add	r2, sp, #28
   2c188:	str	r3, [sp, #4]
   2c18c:	str	r2, [sp]
   2c190:	add	r0, sp, #16
   2c194:	add	r1, sp, #24
   2c198:	add	r2, sp, #32
   2c19c:	add	r3, sp, #20
   2c1a0:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c1a4:	cmp	r0, #0
   2c1a8:	bne	2c0e8 <__assert_fail@plt+0x17a90>
   2c1ac:	ldr	r1, [sp, #20]
   2c1b0:	cmp	r1, #0
   2c1b4:	beq	2c1c4 <__assert_fail@plt+0x17b6c>
   2c1b8:	ldr	r2, [sp, #28]
   2c1bc:	cmp	r2, #3
   2c1c0:	beq	2c1d0 <__assert_fail@plt+0x17b78>
   2c1c4:	mov	r0, #41	; 0x29
   2c1c8:	b	2c0e8 <__assert_fail@plt+0x17a90>
   2c1cc:	bl	13cec <__stack_chk_fail@plt>
   2c1d0:	movw	r0, #20684	; 0x50cc
   2c1d4:	movt	r0, #4
   2c1d8:	bl	13c80 <memcmp@plt>
   2c1dc:	cmp	r0, #0
   2c1e0:	ldreq	fp, [sp, #32]
   2c1e4:	moveq	r9, #0
   2c1e8:	bne	2c1c4 <__assert_fail@plt+0x17b6c>
   2c1ec:	add	r3, sp, #28
   2c1f0:	add	r0, sp, #16
   2c1f4:	str	r3, [sp]
   2c1f8:	add	r1, sp, #24
   2c1fc:	str	r9, [sp, #4]
   2c200:	add	r2, sp, #32
   2c204:	add	r3, sp, #20
   2c208:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c20c:	cmp	r0, #0
   2c210:	bne	2c0e8 <__assert_fail@plt+0x17a90>
   2c214:	ldr	r3, [sp, #32]
   2c218:	cmp	r3, #0
   2c21c:	beq	2c388 <__assert_fail@plt+0x17d30>
   2c220:	cmp	fp, r3
   2c224:	bgt	2c388 <__assert_fail@plt+0x17d30>
   2c228:	ldr	r3, [sp, #20]
   2c22c:	cmp	r3, #0
   2c230:	bne	2c380 <__assert_fail@plt+0x17d28>
   2c234:	add	r2, sp, #28
   2c238:	str	r3, [sp, #4]
   2c23c:	str	r2, [sp]
   2c240:	add	r0, sp, #16
   2c244:	add	r1, sp, #24
   2c248:	add	r2, sp, #32
   2c24c:	add	r3, sp, #20
   2c250:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c254:	cmp	r0, #0
   2c258:	bne	2c0e8 <__assert_fail@plt+0x17a90>
   2c25c:	ldr	r3, [sp, #20]
   2c260:	cmp	r3, #0
   2c264:	beq	2c274 <__assert_fail@plt+0x17c1c>
   2c268:	ldr	r2, [sp, #28]
   2c26c:	cmp	r2, #1
   2c270:	beq	2c2bc <__assert_fail@plt+0x17c64>
   2c274:	ldr	sl, [sp, #32]
   2c278:	b	2c290 <__assert_fail@plt+0x17c38>
   2c27c:	ldr	r3, [sp, #32]
   2c280:	cmp	r3, #0
   2c284:	beq	2c1ec <__assert_fail@plt+0x17b94>
   2c288:	cmp	sl, r3
   2c28c:	bgt	2c1ec <__assert_fail@plt+0x17b94>
   2c290:	add	r2, sp, #28
   2c294:	add	r0, sp, #16
   2c298:	str	r2, [sp]
   2c29c:	add	r1, sp, #24
   2c2a0:	str	r9, [sp, #4]
   2c2a4:	add	r2, sp, #32
   2c2a8:	add	r3, sp, #20
   2c2ac:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c2b0:	cmp	r0, #0
   2c2b4:	beq	2c27c <__assert_fail@plt+0x17c24>
   2c2b8:	b	2c0e8 <__assert_fail@plt+0x17a90>
   2c2bc:	ldrb	r3, [r3]
   2c2c0:	cmp	r3, #101	; 0x65
   2c2c4:	beq	2c36c <__assert_fail@plt+0x17d14>
   2c2c8:	cmp	r3, #110	; 0x6e
   2c2cc:	bne	2c360 <__assert_fail@plt+0x17d08>
   2c2d0:	add	ip, sp, #44	; 0x2c
   2c2d4:	add	sl, sp, #36	; 0x24
   2c2d8:	ldr	r3, [sl]
   2c2dc:	cmp	r3, #0
   2c2e0:	bne	2c378 <__assert_fail@plt+0x17d20>
   2c2e4:	add	r3, sp, #28
   2c2e8:	add	r0, sp, #16
   2c2ec:	str	r3, [sp]
   2c2f0:	add	r1, sp, #24
   2c2f4:	str	r9, [sp, #4]
   2c2f8:	add	r2, sp, #32
   2c2fc:	add	r3, sp, #20
   2c300:	str	ip, [sp, #12]
   2c304:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c308:	ldr	ip, [sp, #12]
   2c30c:	cmp	r0, #0
   2c310:	bne	2c0e8 <__assert_fail@plt+0x17a90>
   2c314:	ldr	r3, [sp, #20]
   2c318:	cmp	r3, #0
   2c31c:	beq	2c274 <__assert_fail@plt+0x17c1c>
   2c320:	cmp	sl, #0
   2c324:	bne	2c348 <__assert_fail@plt+0x17cf0>
   2c328:	b	2c274 <__assert_fail@plt+0x17c1c>
   2c32c:	ldrb	r1, [r3]
   2c330:	cmp	r1, #0
   2c334:	bne	2c354 <__assert_fail@plt+0x17cfc>
   2c338:	add	r3, r3, #1
   2c33c:	sub	r2, r2, #1
   2c340:	str	r3, [sp, #20]
   2c344:	str	r2, [sp, #28]
   2c348:	ldr	r2, [sp, #28]
   2c34c:	cmp	r2, #0
   2c350:	bne	2c32c <__assert_fail@plt+0x17cd4>
   2c354:	str	r3, [sl]
   2c358:	str	r2, [ip]
   2c35c:	b	2c274 <__assert_fail@plt+0x17c1c>
   2c360:	mov	ip, r0
   2c364:	mov	sl, r0
   2c368:	b	2c2e4 <__assert_fail@plt+0x17c8c>
   2c36c:	add	ip, sp, #48	; 0x30
   2c370:	add	sl, sp, #40	; 0x28
   2c374:	b	2c2d8 <__assert_fail@plt+0x17c80>
   2c378:	mov	r0, #157	; 0x9d
   2c37c:	b	2c0e8 <__assert_fail@plt+0x17a90>
   2c380:	mov	r0, #104	; 0x68
   2c384:	b	2c0e8 <__assert_fail@plt+0x17a90>
   2c388:	ldr	r3, [sp, #36]	; 0x24
   2c38c:	cmp	r3, #0
   2c390:	beq	2c140 <__assert_fail@plt+0x17ae8>
   2c394:	ldr	ip, [sp, #44]	; 0x2c
   2c398:	cmp	ip, #0
   2c39c:	beq	2c140 <__assert_fail@plt+0x17ae8>
   2c3a0:	ldr	r1, [sp, #40]	; 0x28
   2c3a4:	cmp	r1, #0
   2c3a8:	beq	2c140 <__assert_fail@plt+0x17ae8>
   2c3ac:	ldr	r2, [sp, #48]	; 0x30
   2c3b0:	cmp	r2, #0
   2c3b4:	beq	2c140 <__assert_fail@plt+0x17ae8>
   2c3b8:	str	r3, [r5]
   2c3bc:	mov	r0, #0
   2c3c0:	str	ip, [r6]
   2c3c4:	str	r1, [r7]
   2c3c8:	str	r2, [r8]
   2c3cc:	b	2c0e8 <__assert_fail@plt+0x17a90>
   2c3d0:	push	{r4, r5, r6, lr}
   2c3d4:	movw	r4, #47296	; 0xb8c0
   2c3d8:	movt	r4, #5
   2c3dc:	sub	sp, sp, #32
   2c3e0:	mov	ip, #0
   2c3e4:	add	r3, sp, #12
   2c3e8:	ldr	lr, [r4]
   2c3ec:	mov	r5, r2
   2c3f0:	str	ip, [r2]
   2c3f4:	add	r6, sp, #20
   2c3f8:	str	r0, [sp, #8]
   2c3fc:	add	r2, sp, #24
   2c400:	str	r1, [sp, #16]
   2c404:	add	r0, sp, #8
   2c408:	add	r1, sp, #16
   2c40c:	str	ip, [sp, #4]
   2c410:	str	r6, [sp]
   2c414:	str	lr, [sp, #28]
   2c418:	str	ip, [sp, #24]
   2c41c:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c420:	subs	r3, r0, #0
   2c424:	beq	2c444 <__assert_fail@plt+0x17dec>
   2c428:	mov	r0, r3
   2c42c:	ldr	r2, [sp, #28]
   2c430:	ldr	r3, [r4]
   2c434:	cmp	r2, r3
   2c438:	bne	2c518 <__assert_fail@plt+0x17ec0>
   2c43c:	add	sp, sp, #32
   2c440:	pop	{r4, r5, r6, pc}
   2c444:	add	r2, sp, #20
   2c448:	str	r3, [sp, #4]
   2c44c:	str	r2, [sp]
   2c450:	add	r0, sp, #8
   2c454:	add	r1, sp, #16
   2c458:	add	r2, sp, #24
   2c45c:	add	r3, sp, #12
   2c460:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c464:	cmp	r0, #0
   2c468:	bne	2c42c <__assert_fail@plt+0x17dd4>
   2c46c:	ldr	r1, [sp, #12]
   2c470:	cmp	r1, #0
   2c474:	beq	2c484 <__assert_fail@plt+0x17e2c>
   2c478:	ldr	r2, [sp, #20]
   2c47c:	cmp	r2, #10
   2c480:	beq	2c48c <__assert_fail@plt+0x17e34>
   2c484:	mov	r0, #6
   2c488:	b	2c42c <__assert_fail@plt+0x17dd4>
   2c48c:	movw	r0, #19248	; 0x4b30
   2c490:	movt	r0, #4
   2c494:	bl	13c80 <memcmp@plt>
   2c498:	subs	r3, r0, #0
   2c49c:	bne	2c484 <__assert_fail@plt+0x17e2c>
   2c4a0:	str	r3, [sp, #4]
   2c4a4:	add	r6, sp, #20
   2c4a8:	add	r3, sp, #12
   2c4ac:	str	r6, [sp]
   2c4b0:	add	r0, sp, #8
   2c4b4:	add	r1, sp, #16
   2c4b8:	add	r2, sp, #24
   2c4bc:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c4c0:	subs	r3, r0, #0
   2c4c4:	bne	2c428 <__assert_fail@plt+0x17dd0>
   2c4c8:	add	r2, sp, #20
   2c4cc:	str	r3, [sp, #4]
   2c4d0:	str	r2, [sp]
   2c4d4:	add	r0, sp, #8
   2c4d8:	add	r1, sp, #16
   2c4dc:	add	r2, sp, #24
   2c4e0:	add	r3, sp, #12
   2c4e4:	bl	3aa1c <__assert_fail@plt+0x263c4>
   2c4e8:	cmp	r0, #0
   2c4ec:	bne	2c42c <__assert_fail@plt+0x17dd4>
   2c4f0:	ldr	r6, [sp, #12]
   2c4f4:	cmp	r6, #0
   2c4f8:	beq	2c484 <__assert_fail@plt+0x17e2c>
   2c4fc:	ldr	r2, [sp, #20]
   2c500:	cmp	r2, #3
   2c504:	beq	2c51c <__assert_fail@plt+0x17ec4>
   2c508:	cmp	r2, #5
   2c50c:	beq	2c588 <__assert_fail@plt+0x17f30>
   2c510:	mov	r0, #4
   2c514:	b	2c42c <__assert_fail@plt+0x17dd4>
   2c518:	bl	13cec <__stack_chk_fail@plt>
   2c51c:	movw	r0, #20684	; 0x50cc
   2c520:	mov	r1, r6
   2c524:	movt	r0, #4
   2c528:	bl	13c80 <memcmp@plt>
   2c52c:	cmp	r0, #0
   2c530:	moveq	r3, #1
   2c534:	streq	r3, [r5]
   2c538:	beq	2c42c <__assert_fail@plt+0x17dd4>
   2c53c:	movw	r0, #20704	; 0x50e0
   2c540:	mov	r1, r6
   2c544:	movt	r0, #4
   2c548:	mov	r2, #3
   2c54c:	bl	13c80 <memcmp@plt>
   2c550:	cmp	r0, #0
   2c554:	moveq	r3, #17
   2c558:	streq	r3, [r5]
   2c55c:	beq	2c42c <__assert_fail@plt+0x17dd4>
   2c560:	mov	r1, r6
   2c564:	movw	r0, #23828	; 0x5d14
   2c568:	mov	r2, #3
   2c56c:	movt	r0, #4
   2c570:	bl	13c80 <memcmp@plt>
   2c574:	cmp	r0, #0
   2c578:	moveq	r3, #20
   2c57c:	streq	r3, [r5]
   2c580:	bne	2c510 <__assert_fail@plt+0x17eb8>
   2c584:	b	2c42c <__assert_fail@plt+0x17dd4>
   2c588:	mov	r1, r6
   2c58c:	movw	r0, #20748	; 0x510c
   2c590:	movt	r0, #4
   2c594:	bl	13c80 <memcmp@plt>
   2c598:	cmp	r0, #0
   2c59c:	movweq	r3, #301	; 0x12d
   2c5a0:	streq	r3, [r5]
   2c5a4:	bne	2c510 <__assert_fail@plt+0x17eb8>
   2c5a8:	b	2c42c <__assert_fail@plt+0x17dd4>
   2c5ac:	bx	lr
   2c5b0:	push	{r4, r5, lr}
   2c5b4:	movw	r4, #47296	; 0xb8c0
   2c5b8:	movt	r4, #5
   2c5bc:	sub	sp, sp, #28
   2c5c0:	mov	r0, #4
   2c5c4:	ldr	r3, [r4]
   2c5c8:	mov	r1, sp
   2c5cc:	str	r3, [sp, #20]
   2c5d0:	bl	13d28 <getrlimit64@plt>
   2c5d4:	mov	r1, sp
   2c5d8:	cmp	r0, #0
   2c5dc:	mov	r0, #4
   2c5e0:	movne	r2, #0
   2c5e4:	movne	r3, #0
   2c5e8:	strdne	r2, [sp, #8]
   2c5ec:	mov	r2, #0
   2c5f0:	mov	r3, #0
   2c5f4:	strd	r2, [sp]
   2c5f8:	bl	13ab8 <setrlimit64@plt>
   2c5fc:	cmp	r0, #0
   2c600:	beq	2c620 <__assert_fail@plt+0x17fc8>
   2c604:	bl	14148 <__errno_location@plt>
   2c608:	ldr	r3, [r0]
   2c60c:	mov	r5, r0
   2c610:	cmp	r3, #38	; 0x26
   2c614:	cmpne	r3, #22
   2c618:	moveq	r0, #1
   2c61c:	bne	2c63c <__assert_fail@plt+0x17fe4>
   2c620:	ldr	r2, [sp, #20]
   2c624:	ldr	r3, [r4]
   2c628:	cmp	r2, r3
   2c62c:	bne	2c638 <__assert_fail@plt+0x17fe0>
   2c630:	add	sp, sp, #28
   2c634:	pop	{r4, r5, pc}
   2c638:	bl	13cec <__stack_chk_fail@plt>
   2c63c:	mov	r2, #5
   2c640:	movw	r1, #30480	; 0x7710
   2c644:	mov	r0, #0
   2c648:	movt	r1, #4
   2c64c:	bl	13cc8 <dcgettext@plt>
   2c650:	mov	r4, r0
   2c654:	ldr	r0, [r5]
   2c658:	bl	13fa4 <strerror@plt>
   2c65c:	mov	r1, r0
   2c660:	mov	r0, r4
   2c664:	bl	3f544 <__assert_fail@plt+0x2aeec>
   2c668:	push	{r4, lr}
   2c66c:	movw	r4, #47296	; 0xb8c0
   2c670:	movt	r4, #5
   2c674:	sub	sp, sp, #24
   2c678:	mov	r0, #4
   2c67c:	ldr	r3, [r4]
   2c680:	mov	r1, sp
   2c684:	str	r3, [sp, #20]
   2c688:	bl	13d28 <getrlimit64@plt>
   2c68c:	cmp	r0, #0
   2c690:	bne	2c6a8 <__assert_fail@plt+0x18050>
   2c694:	ldrd	r2, [sp, #8]
   2c698:	mov	r1, sp
   2c69c:	mov	r0, #4
   2c6a0:	strd	r2, [sp]
   2c6a4:	bl	13ab8 <setrlimit64@plt>
   2c6a8:	ldr	r2, [sp, #20]
   2c6ac:	mov	r0, #1
   2c6b0:	ldr	r3, [r4]
   2c6b4:	cmp	r2, r3
   2c6b8:	bne	2c6c4 <__assert_fail@plt+0x1806c>
   2c6bc:	add	sp, sp, #24
   2c6c0:	pop	{r4, pc}
   2c6c4:	bl	13cec <__stack_chk_fail@plt>
   2c6c8:	push	{r4, r5, r6, r7, lr}
   2c6cc:	movw	r4, #47652	; 0xba24
   2c6d0:	movt	r4, #5
   2c6d4:	sub	sp, sp, #12
   2c6d8:	mov	r6, r0
   2c6dc:	ldr	r5, [r4]
   2c6e0:	cmp	r5, #0
   2c6e4:	bne	2c714 <__assert_fail@plt+0x180bc>
   2c6e8:	mov	r3, #1
   2c6ec:	str	r3, [r4]
   2c6f0:	bl	14040 <getpid@plt>
   2c6f4:	ldr	r7, [sp]
   2c6f8:	eor	r7, r0, r7
   2c6fc:	mov	r0, r5
   2c700:	bl	13c08 <time@plt>
   2c704:	ldr	r3, [sp, #4]
   2c708:	str	r7, [r4, #4]
   2c70c:	eor	r0, r0, r3
   2c710:	str	r0, [r4, #8]
   2c714:	mov	r3, #8
   2c718:	ldr	r0, [pc, #8]	; 2c728 <__assert_fail@plt+0x180d0>
   2c71c:	str	r3, [r6]
   2c720:	add	sp, sp, #12
   2c724:	pop	{r4, r5, r6, r7, pc}
   2c728:	andeq	fp, r5, r8, lsr #20
   2c72c:	push	{r4, lr}
   2c730:	subs	r4, r0, #0
   2c734:	bne	2c73c <__assert_fail@plt+0x180e4>
   2c738:	bl	13c98 <sleep@plt>
   2c73c:	mov	r0, r4
   2c740:	pop	{r4, lr}
   2c744:	b	143f4 <pth_sleep@plt>
   2c748:	bx	lr
   2c74c:	bx	lr
   2c750:	b	13d88 <tmpfile64@plt>
   2c754:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2c758:	movw	r4, #47296	; 0xb8c0
   2c75c:	movt	r4, #5
   2c760:	sub	sp, sp, #112	; 0x70
   2c764:	mov	r9, r0
   2c768:	mov	r1, #0
   2c76c:	ldr	ip, [r4]
   2c770:	mov	r0, #3
   2c774:	mov	r2, sp
   2c778:	str	ip, [sp, #108]	; 0x6c
   2c77c:	bl	13ddc <__fxstat64@plt>
   2c780:	cmn	r0, #1
   2c784:	beq	2c8a0 <__assert_fail@plt+0x18248>
   2c788:	mov	r5, #0
   2c78c:	mov	sl, r5
   2c790:	mov	r0, #3
   2c794:	mov	r1, #1
   2c798:	mov	r2, sp
   2c79c:	bl	13ddc <__fxstat64@plt>
   2c7a0:	cmn	r0, #1
   2c7a4:	beq	2c86c <__assert_fail@plt+0x18214>
   2c7a8:	mov	r8, #0
   2c7ac:	mov	r2, sp
   2c7b0:	mov	r0, #3
   2c7b4:	mov	r1, #2
   2c7b8:	bl	13ddc <__fxstat64@plt>
   2c7bc:	cmn	r0, #1
   2c7c0:	beq	2c8d8 <__assert_fail@plt+0x18280>
   2c7c4:	movw	r2, #47304	; 0xb8c8
   2c7c8:	movt	r2, #5
   2c7cc:	mov	r6, #0
   2c7d0:	ldr	r7, [r2]
   2c7d4:	cmp	r7, #0
   2c7d8:	beq	2c854 <__assert_fail@plt+0x181fc>
   2c7dc:	cmp	sl, #1
   2c7e0:	beq	2c938 <__assert_fail@plt+0x182e0>
   2c7e4:	cmp	r8, #1
   2c7e8:	beq	2c91c <__assert_fail@plt+0x182c4>
   2c7ec:	cmp	r6, #1
   2c7f0:	beq	2c81c <__assert_fail@plt+0x181c4>
   2c7f4:	cmp	r5, #0
   2c7f8:	bne	2c83c <__assert_fail@plt+0x181e4>
   2c7fc:	cmp	r6, #2
   2c800:	beq	2c83c <__assert_fail@plt+0x181e4>
   2c804:	ldr	r2, [sp, #108]	; 0x6c
   2c808:	ldr	r3, [r4]
   2c80c:	cmp	r2, r3
   2c810:	bne	2c954 <__assert_fail@plt+0x182fc>
   2c814:	add	sp, sp, #112	; 0x70
   2c818:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2c81c:	movw	r2, #30592	; 0x7780
   2c820:	mov	r0, r7
   2c824:	movt	r2, #4
   2c828:	mov	r1, r6
   2c82c:	mov	r3, r9
   2c830:	bl	14274 <__fprintf_chk@plt>
   2c834:	cmp	r5, #0
   2c838:	beq	2c804 <__assert_fail@plt+0x181ac>
   2c83c:	movw	r2, #30632	; 0x77a8
   2c840:	mov	r0, r7
   2c844:	mov	r3, r9
   2c848:	mov	r1, #1
   2c84c:	movt	r2, #4
   2c850:	bl	14274 <__fprintf_chk@plt>
   2c854:	cmp	r5, #0
   2c858:	bne	2c864 <__assert_fail@plt+0x1820c>
   2c85c:	cmp	r6, #2
   2c860:	bne	2c804 <__assert_fail@plt+0x181ac>
   2c864:	mov	r0, #3
   2c868:	bl	1404c <exit@plt>
   2c86c:	bl	14148 <__errno_location@plt>
   2c870:	ldr	r3, [r0]
   2c874:	cmp	r3, #9
   2c878:	bne	2c7a8 <__assert_fail@plt+0x18150>
   2c87c:	movw	r0, #5004	; 0x138c
   2c880:	mov	r1, #1
   2c884:	movt	r0, #4
   2c888:	bl	13efc <open64@plt>
   2c88c:	cmp	r0, #1
   2c890:	movne	r5, #1
   2c894:	movne	r8, #2
   2c898:	moveq	r8, #1
   2c89c:	b	2c7ac <__assert_fail@plt+0x18154>
   2c8a0:	bl	14148 <__errno_location@plt>
   2c8a4:	ldr	r3, [r0]
   2c8a8:	cmp	r3, #9
   2c8ac:	bne	2c788 <__assert_fail@plt+0x18130>
   2c8b0:	movw	r0, #5004	; 0x138c
   2c8b4:	mov	r1, #0
   2c8b8:	movt	r0, #4
   2c8bc:	bl	13efc <open64@plt>
   2c8c0:	cmp	r0, #0
   2c8c4:	moveq	r5, #0
   2c8c8:	movne	r5, #1
   2c8cc:	movne	sl, #2
   2c8d0:	moveq	sl, #1
   2c8d4:	b	2c790 <__assert_fail@plt+0x18138>
   2c8d8:	bl	14148 <__errno_location@plt>
   2c8dc:	ldr	r3, [r0]
   2c8e0:	cmp	r3, #9
   2c8e4:	bne	2c7c4 <__assert_fail@plt+0x1816c>
   2c8e8:	movw	r0, #5004	; 0x138c
   2c8ec:	mov	r1, #1
   2c8f0:	movt	r0, #4
   2c8f4:	bl	13efc <open64@plt>
   2c8f8:	cmp	r0, #2
   2c8fc:	moveq	r6, #1
   2c900:	movne	r6, #2
   2c904:	cmp	r8, #0
   2c908:	bne	2c854 <__assert_fail@plt+0x181fc>
   2c90c:	movw	r3, #47316	; 0xb8d4
   2c910:	movt	r3, #5
   2c914:	ldr	r7, [r3]
   2c918:	b	2c7d4 <__assert_fail@plt+0x1817c>
   2c91c:	mov	r1, r8
   2c920:	movw	r2, #30552	; 0x7758
   2c924:	mov	r0, r7
   2c928:	movt	r2, #4
   2c92c:	mov	r3, r9
   2c930:	bl	14274 <__fprintf_chk@plt>
   2c934:	b	2c7ec <__assert_fail@plt+0x18194>
   2c938:	mov	r1, sl
   2c93c:	movw	r2, #30512	; 0x7730
   2c940:	mov	r0, r7
   2c944:	movt	r2, #4
   2c948:	mov	r3, r9
   2c94c:	bl	14274 <__fprintf_chk@plt>
   2c950:	b	2c7e4 <__assert_fail@plt+0x1818c>
   2c954:	bl	13cec <__stack_chk_fail@plt>
   2c958:	subs	r2, r0, #0
   2c95c:	bxne	lr
   2c960:	movw	r0, #30696	; 0x77e8
   2c964:	movw	r1, #30728	; 0x7808
   2c968:	movt	r0, #4
   2c96c:	movt	r1, #4
   2c970:	b	3f478 <__assert_fail@plt+0x2ae20>
   2c974:	movw	r0, #30784	; 0x7840
   2c978:	movt	r0, #4
   2c97c:	bx	lr
   2c980:	push	{r3, lr}
   2c984:	movw	r0, #30796	; 0x784c
   2c988:	movt	r0, #4
   2c98c:	bl	13f14 <getenv@plt>
   2c990:	cmp	r0, #0
   2c994:	beq	2c9b0 <__assert_fail@plt+0x18358>
   2c998:	ldrb	r2, [r0]
   2c99c:	movw	r3, #30784	; 0x7840
   2c9a0:	movt	r3, #4
   2c9a4:	cmp	r2, #0
   2c9a8:	moveq	r0, r3
   2c9ac:	pop	{r3, pc}
   2c9b0:	movw	r0, #30784	; 0x7840
   2c9b4:	movt	r0, #4
   2c9b8:	pop	{r3, pc}
   2c9bc:	movw	r0, #30808	; 0x7858
   2c9c0:	movt	r0, #4
   2c9c4:	bx	lr
   2c9c8:	movw	r0, #30820	; 0x7864
   2c9cc:	movt	r0, #4
   2c9d0:	bx	lr
   2c9d4:	movw	r0, #30832	; 0x7870
   2c9d8:	movt	r0, #4
   2c9dc:	bx	lr
   2c9e0:	movw	r0, #30848	; 0x7880
   2c9e4:	movt	r0, #4
   2c9e8:	bx	lr
   2c9ec:	movw	r0, #30864	; 0x7890
   2c9f0:	movt	r0, #4
   2c9f4:	bx	lr
   2c9f8:	movw	r0, #30368	; 0x76a0
   2c9fc:	movt	r0, #4
   2ca00:	bx	lr
   2ca04:	movw	r0, #30884	; 0x78a4
   2ca08:	movt	r0, #4
   2ca0c:	bx	lr
   2ca10:	sub	r0, r0, #1
   2ca14:	push	{r4, r5, r6, r7, r8, lr}
   2ca18:	cmp	r0, #9
   2ca1c:	ldrls	pc, [pc, r0, lsl #2]
   2ca20:	b	2cdb8 <__assert_fail@plt+0x18760>
   2ca24:	andeq	ip, r2, ip, ror #20
   2ca28:	ldrdeq	ip, [r2], -r4
   2ca2c:	andeq	ip, r2, r4, lsr fp
   2ca30:	muleq	r2, r8, fp
   2ca34:	strdeq	ip, [r2], -r8
   2ca38:	andeq	ip, r2, r8, lsl ip
   2ca3c:	andeq	ip, r2, ip, lsl #25
   2ca40:	strdeq	ip, [r2], -r0
   2ca44:	andeq	ip, r2, r8, asr #26
   2ca48:	andeq	ip, r2, ip, asr #20
   2ca4c:	movw	r4, #47664	; 0xba30
   2ca50:	movt	r4, #5
   2ca54:	ldr	r0, [r4, #36]	; 0x24
   2ca58:	cmp	r0, #0
   2ca5c:	beq	2ce28 <__assert_fail@plt+0x187d0>
   2ca60:	mov	r3, r0
   2ca64:	mov	r0, r3
   2ca68:	pop	{r4, r5, r6, r7, r8, pc}
   2ca6c:	movw	r4, #47664	; 0xba30
   2ca70:	movt	r4, #5
   2ca74:	ldr	r0, [r4]
   2ca78:	cmp	r0, #0
   2ca7c:	bne	2ca60 <__assert_fail@plt+0x18408>
   2ca80:	mov	r0, #19
   2ca84:	bl	1398c <gcry_xmalloc@plt>
   2ca88:	movw	r3, #30820	; 0x7864
   2ca8c:	movt	r3, #4
   2ca90:	movw	r2, #30908	; 0x78bc
   2ca94:	movt	r2, #4
   2ca98:	mov	ip, r0
   2ca9c:	ldm	r3!, {r0, r1}
   2caa0:	str	ip, [r4]
   2caa4:	add	r5, ip, #8
   2caa8:	mov	r3, ip
   2caac:	str	r0, [ip]
   2cab0:	str	r1, [ip, #4]
   2cab4:	ldm	r2!, {r0, r1}
   2cab8:	ldrh	r4, [r2]
   2cabc:	ldrb	r2, [r2, #2]
   2cac0:	str	r0, [ip, #8]
   2cac4:	str	r1, [ip, #12]
   2cac8:	strh	r4, [ip, #16]
   2cacc:	strb	r2, [ip, #18]
   2cad0:	b	2ca64 <__assert_fail@plt+0x1840c>
   2cad4:	movw	r4, #47664	; 0xba30
   2cad8:	movt	r4, #5
   2cadc:	ldr	r0, [r4, #4]
   2cae0:	cmp	r0, #0
   2cae4:	bne	2ca60 <__assert_fail@plt+0x18408>
   2cae8:	mov	r0, #18
   2caec:	bl	1398c <gcry_xmalloc@plt>
   2caf0:	movw	r3, #30820	; 0x7864
   2caf4:	movt	r3, #4
   2caf8:	movw	r2, #30920	; 0x78c8
   2cafc:	movt	r2, #4
   2cb00:	mov	ip, r0
   2cb04:	ldm	r3!, {r0, r1}
   2cb08:	add	r5, ip, #8
   2cb0c:	str	ip, [r4, #4]
   2cb10:	mov	r3, ip
   2cb14:	str	r0, [ip]
   2cb18:	str	r1, [ip, #4]
   2cb1c:	ldm	r2!, {r0, r1}
   2cb20:	ldrh	r2, [r2]
   2cb24:	str	r0, [ip, #8]
   2cb28:	str	r1, [ip, #12]
   2cb2c:	strh	r2, [ip, #16]
   2cb30:	b	2ca64 <__assert_fail@plt+0x1840c>
   2cb34:	movw	r4, #47664	; 0xba30
   2cb38:	movt	r4, #5
   2cb3c:	ldr	r0, [r4, #8]
   2cb40:	cmp	r0, #0
   2cb44:	bne	2ca60 <__assert_fail@plt+0x18408>
   2cb48:	mov	r0, #22
   2cb4c:	movw	r5, #30932	; 0x78d4
   2cb50:	bl	1398c <gcry_xmalloc@plt>
   2cb54:	movw	r3, #30832	; 0x7870
   2cb58:	movt	r3, #4
   2cb5c:	movt	r5, #4
   2cb60:	mov	ip, r0
   2cb64:	add	r6, ip, #12
   2cb68:	ldm	r3!, {r0, r1, r2}
   2cb6c:	mov	r3, ip
   2cb70:	str	ip, [r4, #8]
   2cb74:	str	r0, [ip]
   2cb78:	str	r1, [ip, #4]
   2cb7c:	ldm	r5!, {r0, r1}
   2cb80:	str	r2, [ip, #8]
   2cb84:	ldrh	r2, [r5]
   2cb88:	str	r0, [ip, #12]
   2cb8c:	str	r1, [ip, #16]
   2cb90:	strh	r2, [ip, #20]
   2cb94:	b	2ca64 <__assert_fail@plt+0x1840c>
   2cb98:	movw	r4, #47664	; 0xba30
   2cb9c:	movt	r4, #5
   2cba0:	ldr	r0, [r4, #12]
   2cba4:	cmp	r0, #0
   2cba8:	bne	2ca60 <__assert_fail@plt+0x18408>
   2cbac:	mov	r0, #17
   2cbb0:	bl	1398c <gcry_xmalloc@plt>
   2cbb4:	movw	r3, #30820	; 0x7864
   2cbb8:	movt	r3, #4
   2cbbc:	movw	r2, #30944	; 0x78e0
   2cbc0:	movt	r2, #4
   2cbc4:	mov	ip, r0
   2cbc8:	ldm	r3!, {r0, r1}
   2cbcc:	add	r5, ip, #8
   2cbd0:	str	ip, [r4, #12]
   2cbd4:	str	r0, [ip]
   2cbd8:	mov	r3, ip
   2cbdc:	str	r1, [ip, #4]
   2cbe0:	ldm	r2!, {r0, r1}
   2cbe4:	ldrb	r2, [r2]
   2cbe8:	str	r0, [ip, #8]
   2cbec:	str	r1, [ip, #12]
   2cbf0:	strb	r2, [ip, #16]
   2cbf4:	b	2ca64 <__assert_fail@plt+0x1840c>
   2cbf8:	movw	r4, #47664	; 0xba30
   2cbfc:	movt	r4, #5
   2cc00:	ldr	r0, [r4, #16]
   2cc04:	cmp	r0, #0
   2cc08:	beq	2cdd0 <__assert_fail@plt+0x18778>
   2cc0c:	mov	ip, r0
   2cc10:	mov	r0, ip
   2cc14:	pop	{r4, r5, r6, r7, r8, pc}
   2cc18:	movw	r4, #47664	; 0xba30
   2cc1c:	movt	r4, #5
   2cc20:	ldr	r0, [r4, #20]
   2cc24:	cmp	r0, #0
   2cc28:	bne	2cc0c <__assert_fail@plt+0x185b4>
   2cc2c:	mov	r0, #31
   2cc30:	movw	r5, #30976	; 0x7900
   2cc34:	bl	1398c <gcry_xmalloc@plt>
   2cc38:	movw	r3, #30832	; 0x7870
   2cc3c:	movt	r3, #4
   2cc40:	movt	r5, #4
   2cc44:	mov	r6, r0
   2cc48:	str	r6, [r4, #20]
   2cc4c:	ldm	r3!, {r0, r1, r2}
   2cc50:	add	r7, r6, #12
   2cc54:	mov	ip, r6
   2cc58:	str	r0, [r6]
   2cc5c:	str	r1, [r6, #4]
   2cc60:	str	r2, [r6, #8]
   2cc64:	ldm	r5!, {r0, r1, r2, r3}
   2cc68:	ldrh	r8, [r5]
   2cc6c:	ldrb	r4, [r5, #2]
   2cc70:	str	r0, [r6, #12]
   2cc74:	str	r1, [r6, #16]
   2cc78:	str	r2, [r6, #20]
   2cc7c:	str	r3, [r6, #24]
   2cc80:	strh	r8, [r6, #28]
   2cc84:	strb	r4, [r6, #30]
   2cc88:	b	2cc10 <__assert_fail@plt+0x185b8>
   2cc8c:	movw	r4, #47664	; 0xba30
   2cc90:	movt	r4, #5
   2cc94:	ldr	r0, [r4, #24]
   2cc98:	cmp	r0, #0
   2cc9c:	bne	2ca60 <__assert_fail@plt+0x18408>
   2cca0:	mov	r0, #15
   2cca4:	bl	1398c <gcry_xmalloc@plt>
   2cca8:	movw	r3, #30820	; 0x7864
   2ccac:	movt	r3, #4
   2ccb0:	movw	ip, #30996	; 0x7914
   2ccb4:	movt	ip, #4
   2ccb8:	ldrh	r7, [ip, #4]
   2ccbc:	ldrb	r6, [ip, #6]
   2ccc0:	mov	r2, r0
   2ccc4:	ldm	r3!, {r0, r1}
   2ccc8:	add	r5, r2, #8
   2cccc:	mov	r3, r2
   2ccd0:	str	r2, [r4, #24]
   2ccd4:	str	r0, [r2]
   2ccd8:	ldr	r0, [ip]
   2ccdc:	str	r1, [r2, #4]
   2cce0:	strh	r7, [r2, #12]
   2cce4:	str	r0, [r2, #8]
   2cce8:	strb	r6, [r2, #14]
   2ccec:	b	2ca64 <__assert_fail@plt+0x1840c>
   2ccf0:	movw	r4, #47664	; 0xba30
   2ccf4:	movt	r4, #5
   2ccf8:	ldr	r0, [r4, #28]
   2ccfc:	cmp	r0, #0
   2cd00:	bne	2ca60 <__assert_fail@plt+0x18408>
   2cd04:	mov	r0, #14
   2cd08:	bl	1398c <gcry_xmalloc@plt>
   2cd0c:	movw	r3, #30820	; 0x7864
   2cd10:	movt	r3, #4
   2cd14:	movw	ip, #31004	; 0x791c
   2cd18:	movt	ip, #4
   2cd1c:	ldrh	r5, [ip, #4]
   2cd20:	mov	r2, r0
   2cd24:	ldm	r3!, {r0, r1}
   2cd28:	str	r2, [r4, #28]
   2cd2c:	mov	r3, r2
   2cd30:	strh	r5, [r2, #12]
   2cd34:	str	r0, [r2]
   2cd38:	ldr	r0, [ip]
   2cd3c:	str	r1, [r2, #4]
   2cd40:	str	r0, [r2, #8]
   2cd44:	b	2ca64 <__assert_fail@plt+0x1840c>
   2cd48:	movw	r4, #47664	; 0xba30
   2cd4c:	movt	r4, #5
   2cd50:	ldr	r0, [r4, #32]
   2cd54:	cmp	r0, #0
   2cd58:	bne	2cc0c <__assert_fail@plt+0x185b4>
   2cd5c:	mov	r0, #27
   2cd60:	movw	r5, #31012	; 0x7924
   2cd64:	bl	1398c <gcry_xmalloc@plt>
   2cd68:	movw	r3, #30820	; 0x7864
   2cd6c:	movt	r3, #4
   2cd70:	movt	r5, #4
   2cd74:	mov	r6, r0
   2cd78:	ldm	r3!, {r0, r1}
   2cd7c:	str	r6, [r4, #32]
   2cd80:	add	r7, r6, #8
   2cd84:	mov	ip, r6
   2cd88:	str	r0, [r6]
   2cd8c:	str	r1, [r6, #4]
   2cd90:	ldm	r5!, {r0, r1, r2, r3}
   2cd94:	ldrh	r8, [r5]
   2cd98:	ldrb	r4, [r5, #2]
   2cd9c:	str	r0, [r6, #8]
   2cda0:	str	r1, [r6, #12]
   2cda4:	str	r2, [r6, #16]
   2cda8:	str	r3, [r6, #20]
   2cdac:	strh	r8, [r6, #24]
   2cdb0:	strb	r4, [r6, #26]
   2cdb4:	b	2cc10 <__assert_fail@plt+0x185b8>
   2cdb8:	movw	r0, #31044	; 0x7944
   2cdbc:	movw	r2, #30764	; 0x782c
   2cdc0:	movt	r0, #4
   2cdc4:	movt	r2, #4
   2cdc8:	movw	r1, #553	; 0x229
   2cdcc:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   2cdd0:	mov	r0, #30
   2cdd4:	movw	r5, #30956	; 0x78ec
   2cdd8:	bl	1398c <gcry_xmalloc@plt>
   2cddc:	movw	r3, #30832	; 0x7870
   2cde0:	movt	r3, #4
   2cde4:	movt	r5, #4
   2cde8:	mov	r6, r0
   2cdec:	str	r6, [r4, #16]
   2cdf0:	ldm	r3!, {r0, r1, r2}
   2cdf4:	add	r7, r6, #12
   2cdf8:	mov	ip, r6
   2cdfc:	str	r0, [r6]
   2ce00:	str	r1, [r6, #4]
   2ce04:	str	r2, [r6, #8]
   2ce08:	ldm	r5!, {r0, r1, r2, r3}
   2ce0c:	ldrh	r4, [r5]
   2ce10:	str	r0, [r6, #12]
   2ce14:	str	r1, [r6, #16]
   2ce18:	strh	r4, [r6, #28]
   2ce1c:	str	r2, [r6, #20]
   2ce20:	str	r3, [r6, #24]
   2ce24:	b	2cc10 <__assert_fail@plt+0x185b8>
   2ce28:	mov	r0, #17
   2ce2c:	bl	1398c <gcry_xmalloc@plt>
   2ce30:	movw	r3, #30820	; 0x7864
   2ce34:	movt	r3, #4
   2ce38:	movw	r2, #31032	; 0x7938
   2ce3c:	movt	r2, #4
   2ce40:	mov	ip, r0
   2ce44:	ldm	r3!, {r0, r1}
   2ce48:	add	r5, ip, #8
   2ce4c:	str	ip, [r4, #36]	; 0x24
   2ce50:	b	2cbd4 <__assert_fail@plt+0x1857c>
   2ce54:	sub	r3, r1, #1
   2ce58:	movw	ip, #365	; 0x16d
   2ce5c:	cmp	r1, #2
   2ce60:	rsb	r3, r3, r3, lsl #5
   2ce64:	lslgt	r1, r1, #2
   2ce68:	addgt	r1, r1, #23
   2ce6c:	mla	r3, ip, r0, r3
   2ce70:	suble	r0, r0, #1
   2ce74:	push	{r4, r5}
   2ce78:	asr	ip, r0, #31
   2ce7c:	add	r2, r3, r2
   2ce80:	movwgt	r3, #26215	; 0x6667
   2ce84:	movtgt	r3, #26214	; 0x6666
   2ce88:	add	r2, r2, #1720320	; 0x1a4000
   2ce8c:	add	r2, r2, #740	; 0x2e4
   2ce90:	add	r4, r0, #3
   2ce94:	smullgt	r5, r3, r3, r1
   2ce98:	asrgt	r1, r1, #31
   2ce9c:	subgt	r1, r1, r3, asr #2
   2cea0:	addgt	r2, r2, r1
   2cea4:	movw	r1, #34079	; 0x851f
   2cea8:	movt	r1, #20971	; 0x51eb
   2ceac:	cmp	r0, #0
   2ceb0:	smull	r5, r3, r1, r0
   2ceb4:	movlt	r0, r4
   2ceb8:	pop	{r4, r5}
   2cebc:	rsb	r3, ip, r3, asr #5
   2cec0:	add	r3, r3, #1
   2cec4:	add	r3, r3, r3, lsl #1
   2cec8:	add	r1, r3, #3
   2cecc:	cmp	r3, #0
   2ced0:	movlt	r3, r1
   2ced4:	asr	r3, r3, #2
   2ced8:	rsb	r0, r3, r0, asr #2
   2cedc:	add	r0, r0, r2
   2cee0:	bx	lr
   2cee4:	sub	r1, r1, #1
   2cee8:	cmp	r1, #11
   2ceec:	push	{r4, lr}
   2cef0:	bhi	2cf88 <__assert_fail@plt+0x18930>
   2cef4:	mov	r2, #1
   2cef8:	movw	r3, #2773	; 0xad5
   2cefc:	lsl	r1, r2, r1
   2cf00:	and	r3, r1, r3
   2cf04:	cmp	r3, #0
   2cf08:	beq	2cf14 <__assert_fail@plt+0x188bc>
   2cf0c:	mov	r0, #31
   2cf10:	pop	{r4, pc}
   2cf14:	movw	r3, #1320	; 0x528
   2cf18:	and	r3, r1, r3
   2cf1c:	cmp	r3, #0
   2cf20:	beq	2cf2c <__assert_fail@plt+0x188d4>
   2cf24:	mov	r0, #30
   2cf28:	pop	{r4, pc}
   2cf2c:	tst	r1, #2
   2cf30:	beq	2cf88 <__assert_fail@plt+0x18930>
   2cf34:	movw	r3, #34079	; 0x851f
   2cf38:	movt	r3, #20971	; 0x51eb
   2cf3c:	asr	r2, r0, #31
   2cf40:	mov	ip, #100	; 0x64
   2cf44:	smull	r1, r3, r3, r0
   2cf48:	and	r4, r0, #3
   2cf4c:	rsb	r1, r2, r3, asr #5
   2cf50:	mls	r1, ip, r1, r0
   2cf54:	cmp	r1, #0
   2cf58:	bne	2cf78 <__assert_fail@plt+0x18920>
   2cf5c:	rsb	r3, r2, r3, asr #7
   2cf60:	mov	r2, #400	; 0x190
   2cf64:	mls	r0, r2, r3, r0
   2cf68:	cmp	r0, #0
   2cf6c:	beq	2cf78 <__assert_fail@plt+0x18920>
   2cf70:	mov	r0, #28
   2cf74:	pop	{r4, pc}
   2cf78:	cmp	r4, #0
   2cf7c:	moveq	r0, #29
   2cf80:	movne	r0, #28
   2cf84:	pop	{r4, pc}
   2cf88:	movw	r0, #31072	; 0x7960
   2cf8c:	movw	r2, #31056	; 0x7950
   2cf90:	movt	r0, #4
   2cf94:	movt	r2, #4
   2cf98:	movw	r1, #401	; 0x191
   2cf9c:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   2cfa0:	movw	ip, #48047	; 0xbbaf
   2cfa4:	movt	ip, #65509	; 0xffe5
   2cfa8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cfac:	mov	r4, r0
   2cfb0:	movw	r0, #7548	; 0x1d7c
   2cfb4:	add	ip, r4, ip
   2cfb8:	movt	r0, #17
   2cfbc:	sub	sp, sp, #12
   2cfc0:	cmp	ip, r0
   2cfc4:	mov	fp, r1
   2cfc8:	stm	sp, {r2, r3}
   2cfcc:	movhi	r0, #0
   2cfd0:	bhi	2d124 <__assert_fail@plt+0x18acc>
   2cfd4:	sub	r3, r4, #1720320	; 0x1a4000
   2cfd8:	movw	r2, #25427	; 0x6353
   2cfdc:	sub	r3, r3, #740	; 0x2e4
   2cfe0:	movt	r2, #45839	; 0xb30f
   2cfe4:	movw	r5, #34079	; 0x851f
   2cfe8:	mov	r7, #100	; 0x64
   2cfec:	umull	r1, r3, r2, r3
   2cff0:	movt	r5, #20971	; 0x51eb
   2cff4:	movw	r9, #365	; 0x16d
   2cff8:	movw	r8, #366	; 0x16e
   2cffc:	mov	r6, #400	; 0x190
   2d000:	lsr	sl, r3, #8
   2d004:	b	2d00c <__assert_fail@plt+0x189b4>
   2d008:	add	sl, sl, #1
   2d00c:	mov	r1, #1
   2d010:	mov	r0, sl
   2d014:	mov	r2, r1
   2d018:	bl	2ce54 <__assert_fail@plt+0x187fc>
   2d01c:	smull	r3, r2, r5, sl
   2d020:	asr	r3, sl, #31
   2d024:	and	ip, sl, #3
   2d028:	rsb	r1, r3, r2, asr #5
   2d02c:	rsb	r3, r3, r2, asr #7
   2d030:	mls	r1, r7, r1, sl
   2d034:	mls	r3, r6, r3, sl
   2d038:	cmp	r1, #0
   2d03c:	rsb	r0, r0, r4
   2d040:	bne	2d050 <__assert_fail@plt+0x189f8>
   2d044:	cmp	r3, #0
   2d048:	movw	r3, #365	; 0x16d
   2d04c:	bne	2d05c <__assert_fail@plt+0x18a04>
   2d050:	cmp	ip, #0
   2d054:	movne	r3, r9
   2d058:	moveq	r3, r8
   2d05c:	cmp	r0, r3
   2d060:	bgt	2d008 <__assert_fail@plt+0x189b0>
   2d064:	movw	r2, #2115	; 0x843
   2d068:	movt	r2, #33825	; 0x8421
   2d06c:	asr	r1, r0, #31
   2d070:	smull	r3, r5, r2, r0
   2d074:	add	r5, r5, r0
   2d078:	rsb	r5, r1, r5, asr #4
   2d07c:	add	r5, r5, #1
   2d080:	b	2d094 <__assert_fail@plt+0x18a3c>
   2d084:	add	r5, r5, #1
   2d088:	cmp	r5, #13
   2d08c:	addeq	sl, sl, #1
   2d090:	moveq	r5, #1
   2d094:	mov	r1, r5
   2d098:	mov	r2, #1
   2d09c:	mov	r0, sl
   2d0a0:	bl	2ce54 <__assert_fail@plt+0x187fc>
   2d0a4:	mov	r1, r5
   2d0a8:	rsb	r6, r0, r4
   2d0ac:	mov	r0, sl
   2d0b0:	bl	2cee4 <__assert_fail@plt+0x1888c>
   2d0b4:	cmp	r6, r0
   2d0b8:	bgt	2d084 <__assert_fail@plt+0x18a2c>
   2d0bc:	mov	r0, sl
   2d0c0:	mov	r1, r5
   2d0c4:	bl	2cee4 <__assert_fail@plt+0x1888c>
   2d0c8:	add	r6, r6, #1
   2d0cc:	cmp	r6, r0
   2d0d0:	ble	2d0ec <__assert_fail@plt+0x18a94>
   2d0d4:	add	r5, r5, #1
   2d0d8:	cmp	r5, #13
   2d0dc:	moveq	r5, #1
   2d0e0:	addeq	sl, sl, r5
   2d0e4:	moveq	r6, r5
   2d0e8:	movne	r6, #1
   2d0ec:	ldr	r1, [sp]
   2d0f0:	cmp	fp, #0
   2d0f4:	ldr	r3, [sp, #4]
   2d0f8:	mov	r0, sl
   2d0fc:	strne	sl, [fp]
   2d100:	cmp	r1, #0
   2d104:	strne	r5, [r1]
   2d108:	mov	r1, #1
   2d10c:	cmp	r3, #0
   2d110:	mov	r2, r1
   2d114:	strne	r6, [r3]
   2d118:	add	r4, r4, #1
   2d11c:	bl	2ce54 <__assert_fail@plt+0x187fc>
   2d120:	rsb	r0, r0, r4
   2d124:	add	sp, sp, #12
   2d128:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2d12c:	add	r2, r0, #8
   2d130:	ldrb	r3, [r0], #1
   2d134:	sub	r3, r3, #48	; 0x30
   2d138:	cmp	r3, #9
   2d13c:	bhi	2d154 <__assert_fail@plt+0x18afc>
   2d140:	cmp	r0, r2
   2d144:	bne	2d130 <__assert_fail@plt+0x18ad8>
   2d148:	ldrb	r3, [r0]
   2d14c:	cmp	r3, #84	; 0x54
   2d150:	beq	2d15c <__assert_fail@plt+0x18b04>
   2d154:	mov	r0, #161	; 0xa1
   2d158:	bx	lr
   2d15c:	add	r2, r0, #6
   2d160:	ldrb	r3, [r0, #1]!
   2d164:	sub	r3, r3, #48	; 0x30
   2d168:	cmp	r3, #9
   2d16c:	bhi	2d154 <__assert_fail@plt+0x18afc>
   2d170:	cmp	r0, r2
   2d174:	bne	2d160 <__assert_fail@plt+0x18b08>
   2d178:	mov	r0, #0
   2d17c:	bx	lr
   2d180:	push	{r3, lr}
   2d184:	mov	r0, #0
   2d188:	bl	13c08 <time@plt>
   2d18c:	movw	r3, #47704	; 0xba58
   2d190:	movt	r3, #5
   2d194:	ldr	r2, [r3]
   2d198:	cmp	r2, #0
   2d19c:	popeq	{r3, pc}
   2d1a0:	cmp	r2, #1
   2d1a4:	beq	2d1bc <__assert_fail@plt+0x18b64>
   2d1a8:	ldr	r3, [r3, #4]
   2d1ac:	cmp	r2, #2
   2d1b0:	addeq	r0, r0, r3
   2d1b4:	rsbne	r0, r3, r0
   2d1b8:	pop	{r3, pc}
   2d1bc:	ldr	r0, [r3, #4]
   2d1c0:	pop	{r3, pc}
   2d1c4:	push	{r4, r5, lr}
   2d1c8:	movw	r4, #47296	; 0xb8c0
   2d1cc:	movt	r4, #5
   2d1d0:	sub	sp, sp, #92	; 0x5c
   2d1d4:	mov	r5, r0
   2d1d8:	ldr	r3, [r4]
   2d1dc:	str	r3, [sp, #84]	; 0x54
   2d1e0:	bl	2d180 <__assert_fail@plt+0x18b28>
   2d1e4:	cmp	r0, #0
   2d1e8:	str	r0, [sp, #36]	; 0x24
   2d1ec:	movlt	r3, #0
   2d1f0:	strblt	r3, [r5]
   2d1f4:	blt	2d264 <__assert_fail@plt+0x18c0c>
   2d1f8:	add	r1, sp, #40	; 0x28
   2d1fc:	add	r0, sp, #36	; 0x24
   2d200:	bl	139bc <gmtime_r@plt>
   2d204:	movw	r3, #31084	; 0x796c
   2d208:	movt	r3, #4
   2d20c:	str	r3, [sp]
   2d210:	mov	r2, #1
   2d214:	mov	r1, #16
   2d218:	mvn	r3, #0
   2d21c:	mov	ip, r0
   2d220:	mov	r0, r5
   2d224:	ldr	lr, [ip, #20]
   2d228:	add	lr, lr, #1888	; 0x760
   2d22c:	add	lr, lr, #12
   2d230:	str	lr, [sp, #4]
   2d234:	ldr	lr, [ip, #16]
   2d238:	add	lr, lr, r2
   2d23c:	str	lr, [sp, #8]
   2d240:	ldr	lr, [ip, #12]
   2d244:	str	lr, [sp, #12]
   2d248:	ldr	lr, [ip, #8]
   2d24c:	str	lr, [sp, #16]
   2d250:	ldr	lr, [ip, #4]
   2d254:	str	lr, [sp, #20]
   2d258:	ldr	ip, [ip]
   2d25c:	str	ip, [sp, #24]
   2d260:	bl	1464c <__snprintf_chk@plt>
   2d264:	ldr	r2, [sp, #84]	; 0x54
   2d268:	ldr	r3, [r4]
   2d26c:	cmp	r2, r3
   2d270:	bne	2d27c <__assert_fail@plt+0x18c24>
   2d274:	add	sp, sp, #92	; 0x5c
   2d278:	pop	{r4, r5, pc}
   2d27c:	bl	13cec <__stack_chk_fail@plt>
   2d280:	push	{r3, r4, r5, lr}
   2d284:	mov	r4, r0
   2d288:	mov	r0, #0
   2d28c:	mov	r5, r1
   2d290:	bl	13c08 <time@plt>
   2d294:	movw	r3, #47704	; 0xba58
   2d298:	movt	r3, #5
   2d29c:	cmn	r4, #1
   2d2a0:	cmpne	r0, r4
   2d2a4:	beq	2d2dc <__assert_fail@plt+0x18c84>
   2d2a8:	cmp	r5, #0
   2d2ac:	bne	2d2cc <__assert_fail@plt+0x18c74>
   2d2b0:	cmp	r0, r4
   2d2b4:	rsblt	r4, r0, r4
   2d2b8:	rsbge	r4, r4, r0
   2d2bc:	movlt	r2, #2
   2d2c0:	movge	r2, #3
   2d2c4:	stm	r3, {r2, r4}
   2d2c8:	pop	{r3, r4, r5, pc}
   2d2cc:	mov	r2, #1
   2d2d0:	str	r0, [r3, #4]
   2d2d4:	str	r2, [r3]
   2d2d8:	pop	{r3, r4, r5, pc}
   2d2dc:	mov	r2, #0
   2d2e0:	str	r2, [r3]
   2d2e4:	str	r2, [r3, #4]
   2d2e8:	pop	{r3, r4, r5, pc}
   2d2ec:	movw	r3, #47704	; 0xba58
   2d2f0:	movt	r3, #5
   2d2f4:	ldr	r0, [r3]
   2d2f8:	bx	lr
   2d2fc:	push	{r3, lr}
   2d300:	bl	2d180 <__assert_fail@plt+0x18b28>
   2d304:	cmn	r0, #1
   2d308:	popne	{r3, pc}
   2d30c:	movw	r0, #31112	; 0x7988
   2d310:	movt	r0, #4
   2d314:	bl	3f544 <__assert_fail@plt+0x2aeec>
   2d318:	push	{r4, r5, r6, r7, lr}
   2d31c:	movw	r4, #47296	; 0xb8c0
   2d320:	movt	r4, #5
   2d324:	sub	sp, sp, #52	; 0x34
   2d328:	mov	r5, r0
   2d32c:	ldr	r3, [r4]
   2d330:	str	r3, [sp, #44]	; 0x2c
   2d334:	bl	14094 <strlen@plt>
   2d338:	cmp	r0, #10
   2d33c:	beq	2d35c <__assert_fail@plt+0x18d04>
   2d340:	mov	r0, #0
   2d344:	ldr	r2, [sp, #44]	; 0x2c
   2d348:	ldr	r3, [r4]
   2d34c:	cmp	r2, r3
   2d350:	bne	2d47c <__assert_fail@plt+0x18e24>
   2d354:	add	sp, sp, #52	; 0x34
   2d358:	pop	{r4, r5, r6, r7, pc}
   2d35c:	ldrb	r3, [r5, #4]
   2d360:	cmp	r3, #45	; 0x2d
   2d364:	bne	2d340 <__assert_fail@plt+0x18ce8>
   2d368:	ldrb	r3, [r5, #7]
   2d36c:	cmp	r3, #45	; 0x2d
   2d370:	bne	2d340 <__assert_fail@plt+0x18ce8>
   2d374:	mov	r3, #0
   2d378:	ldrb	r2, [r5, r3]
   2d37c:	sub	r2, r2, #48	; 0x30
   2d380:	cmp	r2, #9
   2d384:	bhi	2d340 <__assert_fail@plt+0x18ce8>
   2d388:	add	r3, r3, #1
   2d38c:	cmp	r3, #4
   2d390:	bne	2d378 <__assert_fail@plt+0x18d20>
   2d394:	ldrb	r3, [r5, #5]
   2d398:	sub	r3, r3, #48	; 0x30
   2d39c:	cmp	r3, #9
   2d3a0:	bhi	2d340 <__assert_fail@plt+0x18ce8>
   2d3a4:	ldrb	r3, [r5, #6]
   2d3a8:	sub	r3, r3, #48	; 0x30
   2d3ac:	cmp	r3, #9
   2d3b0:	bhi	2d340 <__assert_fail@plt+0x18ce8>
   2d3b4:	ldrb	r3, [r5, #8]
   2d3b8:	sub	r3, r3, #48	; 0x30
   2d3bc:	cmp	r3, #9
   2d3c0:	bhi	2d340 <__assert_fail@plt+0x18ce8>
   2d3c4:	ldrb	r3, [r5, #9]
   2d3c8:	sub	r3, r3, #48	; 0x30
   2d3cc:	cmp	r3, #9
   2d3d0:	bhi	2d340 <__assert_fail@plt+0x18ce8>
   2d3d4:	mov	r0, r5
   2d3d8:	mov	r1, #0
   2d3dc:	mov	r2, #10
   2d3e0:	bl	13a4c <strtol@plt>
   2d3e4:	mov	r1, #0
   2d3e8:	mov	r2, #10
   2d3ec:	mov	r7, r0
   2d3f0:	add	r0, r5, #5
   2d3f4:	bl	13a4c <strtol@plt>
   2d3f8:	mov	r1, #0
   2d3fc:	mov	r2, #10
   2d400:	sub	r6, r0, #1
   2d404:	add	r0, r5, #8
   2d408:	bl	13a4c <strtol@plt>
   2d40c:	cmp	r6, #11
   2d410:	movw	r1, #1969	; 0x7b1
   2d414:	movls	r3, #0
   2d418:	movhi	r3, #1
   2d41c:	cmp	r7, r1
   2d420:	movgt	r1, r3
   2d424:	orrle	r1, r3, #1
   2d428:	mov	r5, r0
   2d42c:	cmp	r1, #0
   2d430:	bne	2d340 <__assert_fail@plt+0x18ce8>
   2d434:	sub	r3, r0, #1
   2d438:	cmp	r3, #30
   2d43c:	bhi	2d340 <__assert_fail@plt+0x18ce8>
   2d440:	mov	r2, #44	; 0x2c
   2d444:	mov	r0, sp
   2d448:	bl	141cc <memset@plt>
   2d44c:	sub	r7, r7, #1888	; 0x760
   2d450:	mov	r0, sp
   2d454:	mvn	r3, #0
   2d458:	sub	r7, r7, #12
   2d45c:	str	r5, [sp, #12]
   2d460:	str	r7, [sp, #20]
   2d464:	str	r6, [sp, #16]
   2d468:	str	r3, [sp, #32]
   2d46c:	bl	13adc <mktime@plt>
   2d470:	cmn	r0, #1
   2d474:	bne	2d344 <__assert_fail@plt+0x18cec>
   2d478:	b	2d340 <__assert_fail@plt+0x18ce8>
   2d47c:	bl	13cec <__stack_chk_fail@plt>
   2d480:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2d484:	movw	r5, #47296	; 0xb8c0
   2d488:	movt	r5, #5
   2d48c:	ldrb	r6, [r0]
   2d490:	sub	sp, sp, #48	; 0x30
   2d494:	mov	r4, r0
   2d498:	ldr	r3, [r5]
   2d49c:	cmp	r6, #0
   2d4a0:	str	r3, [sp, #44]	; 0x2c
   2d4a4:	beq	2d670 <__assert_fail@plt+0x19018>
   2d4a8:	add	r0, r0, #7
   2d4ac:	mov	r3, r4
   2d4b0:	mov	r1, r6
   2d4b4:	b	2d4c0 <__assert_fail@plt+0x18e68>
   2d4b8:	ldrb	r1, [r3, #1]
   2d4bc:	mov	r3, r2
   2d4c0:	sub	r1, r1, #48	; 0x30
   2d4c4:	cmp	r1, #9
   2d4c8:	bhi	2d670 <__assert_fail@plt+0x19018>
   2d4cc:	cmp	r3, r0
   2d4d0:	add	r2, r3, #1
   2d4d4:	bne	2d4b8 <__assert_fail@plt+0x18e60>
   2d4d8:	ldrb	r1, [r2]
   2d4dc:	cmp	r1, #84	; 0x54
   2d4e0:	bne	2d670 <__assert_fail@plt+0x19018>
   2d4e4:	add	r2, r2, #1
   2d4e8:	add	r3, r3, #8
   2d4ec:	ldrb	r1, [r2], #1
   2d4f0:	sub	r1, r1, #48	; 0x30
   2d4f4:	cmp	r1, #9
   2d4f8:	bhi	2d670 <__assert_fail@plt+0x19018>
   2d4fc:	cmp	r2, r3
   2d500:	bne	2d4ec <__assert_fail@plt+0x18e94>
   2d504:	ldrb	r7, [r2]
   2d508:	cmp	r7, #0
   2d50c:	bne	2d640 <__assert_fail@plt+0x18fe8>
   2d510:	ldrb	r2, [r4, #2]
   2d514:	sub	r6, r6, #48	; 0x30
   2d518:	ldrb	r3, [r4, #4]
   2d51c:	mov	ip, #100	; 0x64
   2d520:	sub	r2, r2, #48	; 0x30
   2d524:	ldrb	r0, [r4, #1]
   2d528:	ldrb	r1, [r4, #3]
   2d52c:	add	r6, r6, r6, lsl #2
   2d530:	add	r2, r2, r2, lsl #2
   2d534:	sub	r3, r3, #48	; 0x30
   2d538:	sub	r1, r1, #48	; 0x30
   2d53c:	sub	r0, r0, #48	; 0x30
   2d540:	add	r2, r1, r2, lsl #1
   2d544:	add	r0, r0, r6, lsl #1
   2d548:	ldrb	r1, [r4, #5]
   2d54c:	add	r3, r3, r3, lsl #2
   2d550:	mla	r6, ip, r0, r2
   2d554:	add	ip, r1, r3, lsl #1
   2d558:	sub	ip, ip, #49	; 0x31
   2d55c:	ldrb	r0, [r4, #6]
   2d560:	cmp	ip, #11
   2d564:	ldrb	r3, [r4, #9]
   2d568:	ldrb	r2, [r4, #11]
   2d56c:	movw	r8, #1969	; 0x7b1
   2d570:	ldrb	r1, [r4, #13]
   2d574:	movls	r7, #0
   2d578:	movhi	r7, #1
   2d57c:	sub	r0, r0, #48	; 0x30
   2d580:	cmp	r6, r8
   2d584:	orrle	r7, r7, #1
   2d588:	sub	r3, r3, #48	; 0x30
   2d58c:	sub	r2, r2, #48	; 0x30
   2d590:	sub	r1, r1, #48	; 0x30
   2d594:	ldrb	r8, [r4, #10]
   2d598:	cmp	r7, #0
   2d59c:	ldrb	sl, [r4, #12]
   2d5a0:	add	r0, r0, r0, lsl #2
   2d5a4:	ldrb	r7, [r4, #14]
   2d5a8:	add	r3, r3, r3, lsl #2
   2d5ac:	ldrb	r9, [r4, #7]
   2d5b0:	add	r2, r2, r2, lsl #2
   2d5b4:	add	r1, r1, r1, lsl #2
   2d5b8:	sub	r8, r8, #48	; 0x30
   2d5bc:	sub	r4, r9, #48	; 0x30
   2d5c0:	sub	sl, sl, #48	; 0x30
   2d5c4:	sub	r7, r7, #48	; 0x30
   2d5c8:	add	r4, r4, r0, lsl #1
   2d5cc:	add	r8, r8, r3, lsl #1
   2d5d0:	add	r2, sl, r2, lsl #1
   2d5d4:	add	r1, r7, r1, lsl #1
   2d5d8:	bne	2d670 <__assert_fail@plt+0x19018>
   2d5dc:	sub	r3, r4, #1
   2d5e0:	cmp	r3, #30
   2d5e4:	bhi	2d670 <__assert_fail@plt+0x19018>
   2d5e8:	cmp	r8, #23
   2d5ec:	bgt	2d670 <__assert_fail@plt+0x19018>
   2d5f0:	cmp	r1, #61	; 0x3d
   2d5f4:	cmple	r2, #59	; 0x3b
   2d5f8:	movle	r3, #0
   2d5fc:	movgt	r3, #1
   2d600:	bgt	2d670 <__assert_fail@plt+0x19018>
   2d604:	sub	r6, r6, #1888	; 0x760
   2d608:	mov	r0, sp
   2d60c:	sub	r6, r6, #12
   2d610:	mvn	lr, #0
   2d614:	str	r3, [sp, #24]
   2d618:	str	r6, [sp, #20]
   2d61c:	str	r3, [sp, #28]
   2d620:	str	r3, [sp, #36]	; 0x24
   2d624:	str	r3, [sp, #40]	; 0x28
   2d628:	stm	sp, {r1, r2, r8}
   2d62c:	str	r4, [sp, #12]
   2d630:	str	ip, [sp, #16]
   2d634:	str	lr, [sp, #32]
   2d638:	bl	14448 <timegm@plt>
   2d63c:	b	2d674 <__assert_fail@plt+0x1901c>
   2d640:	tst	r7, #128	; 0x80
   2d644:	bne	2d660 <__assert_fail@plt+0x19008>
   2d648:	bl	14034 <__ctype_b_loc@plt>
   2d64c:	lsl	r3, r7, #1
   2d650:	ldr	r2, [r0]
   2d654:	ldrh	r3, [r2, r3]
   2d658:	tst	r3, #8192	; 0x2000
   2d65c:	bne	2d510 <__assert_fail@plt+0x18eb8>
   2d660:	cmp	r7, #58	; 0x3a
   2d664:	beq	2d510 <__assert_fail@plt+0x18eb8>
   2d668:	cmp	r7, #44	; 0x2c
   2d66c:	beq	2d510 <__assert_fail@plt+0x18eb8>
   2d670:	mvn	r0, #0
   2d674:	ldr	r2, [sp, #44]	; 0x2c
   2d678:	ldr	r3, [r5]
   2d67c:	cmp	r2, r3
   2d680:	bne	2d68c <__assert_fail@plt+0x19034>
   2d684:	add	sp, sp, #48	; 0x30
   2d688:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2d68c:	bl	13cec <__stack_chk_fail@plt>
   2d690:	push	{r4, r5, lr}
   2d694:	movw	r4, #47296	; 0xb8c0
   2d698:	movt	r4, #5
   2d69c:	sub	sp, sp, #92	; 0x5c
   2d6a0:	cmp	r1, #0
   2d6a4:	mov	r5, r0
   2d6a8:	ldr	r3, [r4]
   2d6ac:	str	r1, [sp, #36]	; 0x24
   2d6b0:	str	r3, [sp, #84]	; 0x54
   2d6b4:	movlt	r3, #0
   2d6b8:	strblt	r3, [r0]
   2d6bc:	blt	2d72c <__assert_fail@plt+0x190d4>
   2d6c0:	add	r1, sp, #40	; 0x28
   2d6c4:	add	r0, sp, #36	; 0x24
   2d6c8:	bl	139bc <gmtime_r@plt>
   2d6cc:	movw	r3, #31084	; 0x796c
   2d6d0:	movt	r3, #4
   2d6d4:	str	r3, [sp]
   2d6d8:	mov	r2, #1
   2d6dc:	mov	r1, #16
   2d6e0:	mvn	r3, #0
   2d6e4:	mov	ip, r0
   2d6e8:	mov	r0, r5
   2d6ec:	ldr	lr, [ip, #20]
   2d6f0:	add	lr, lr, #1888	; 0x760
   2d6f4:	add	lr, lr, #12
   2d6f8:	str	lr, [sp, #4]
   2d6fc:	ldr	lr, [ip, #16]
   2d700:	add	lr, lr, r2
   2d704:	str	lr, [sp, #8]
   2d708:	ldr	lr, [ip, #12]
   2d70c:	str	lr, [sp, #12]
   2d710:	ldr	lr, [ip, #8]
   2d714:	str	lr, [sp, #16]
   2d718:	ldr	lr, [ip, #4]
   2d71c:	str	lr, [sp, #20]
   2d720:	ldr	ip, [ip]
   2d724:	str	ip, [sp, #24]
   2d728:	bl	1464c <__snprintf_chk@plt>
   2d72c:	ldr	r2, [sp, #84]	; 0x54
   2d730:	ldr	r3, [r4]
   2d734:	cmp	r2, r3
   2d738:	bne	2d744 <__assert_fail@plt+0x190ec>
   2d73c:	add	sp, sp, #92	; 0x5c
   2d740:	pop	{r4, r5, pc}
   2d744:	bl	13cec <__stack_chk_fail@plt>
   2d748:	movw	r3, #20864	; 0x5180
   2d74c:	movt	r3, #1
   2d750:	mla	r0, r3, r1, r0
   2d754:	bx	lr
   2d758:	push	{r4, r5, r6, r7, lr}
   2d75c:	movw	lr, #34953	; 0x8889
   2d760:	movt	lr, #34952	; 0x8888
   2d764:	movw	ip, #43691	; 0xaaab
   2d768:	movt	ip, #43690	; 0xaaaa
   2d76c:	sub	sp, sp, #20
   2d770:	umull	r3, r4, lr, r0
   2d774:	movw	r5, #62305	; 0xf361
   2d778:	movt	r5, #26393	; 0x6719
   2d77c:	mov	r1, #1
   2d780:	movw	r6, #365	; 0x16d
   2d784:	movw	r3, #31140	; 0x79a4
   2d788:	ldr	r0, [pc, #124]	; 2d80c <__assert_fail@plt+0x191b4>
   2d78c:	movt	r3, #4
   2d790:	mov	r2, #30
   2d794:	lsr	r4, r4, #5
   2d798:	umull	r7, lr, lr, r4
   2d79c:	lsr	lr, lr, #5
   2d7a0:	umull	r7, ip, ip, lr
   2d7a4:	rsb	r7, lr, lr, lsl #4
   2d7a8:	sub	r4, r4, r7, lsl #2
   2d7ac:	str	r4, [sp, #12]
   2d7b0:	lsr	ip, ip, #4
   2d7b4:	umull	r4, r5, r5, ip
   2d7b8:	add	r7, ip, ip, lsl #1
   2d7bc:	rsb	r4, r5, ip
   2d7c0:	sub	lr, lr, r7, lsl #3
   2d7c4:	str	lr, [sp, #8]
   2d7c8:	add	r5, r5, r4, lsr r1
   2d7cc:	lsr	r4, r5, #8
   2d7d0:	str	r4, [sp]
   2d7d4:	mov	r5, r4
   2d7d8:	mls	r4, r6, r4, ip
   2d7dc:	str	r4, [sp, #4]
   2d7e0:	bl	14178 <__sprintf_chk@plt>
   2d7e4:	cmp	r5, #0
   2d7e8:	ldr	r0, [pc, #28]	; 2d80c <__assert_fail@plt+0x191b4>
   2d7ec:	bne	2d804 <__assert_fail@plt+0x191ac>
   2d7f0:	cmp	r4, #0
   2d7f4:	movne	r1, #121	; 0x79
   2d7f8:	moveq	r1, #100	; 0x64
   2d7fc:	bl	140ac <strchr@plt>
   2d800:	add	r0, r0, #1
   2d804:	add	sp, sp, #20
   2d808:	pop	{r4, r5, r6, r7, pc}
   2d80c:	andeq	fp, r5, r0, ror #20
   2d810:	push	{r4, lr}
   2d814:	movw	r4, #47296	; 0xb8c0
   2d818:	movt	r4, #5
   2d81c:	sub	sp, sp, #24
   2d820:	cmp	r0, #0
   2d824:	ldr	r3, [r4]
   2d828:	str	r0, [sp, #16]
   2d82c:	str	r3, [sp, #20]
   2d830:	blt	2d898 <__assert_fail@plt+0x19240>
   2d834:	add	r0, sp, #16
   2d838:	bl	141fc <gmtime@plt>
   2d83c:	mov	r1, #1
   2d840:	movw	r3, #31168	; 0x79c0
   2d844:	movt	r3, #4
   2d848:	ldr	r2, [r0, #20]
   2d84c:	mov	ip, r0
   2d850:	ldr	r0, [pc, #104]	; 2d8c0 <__assert_fail@plt+0x19268>
   2d854:	add	r2, r2, #1888	; 0x760
   2d858:	add	r2, r2, #12
   2d85c:	str	r2, [sp]
   2d860:	ldr	lr, [ip, #16]
   2d864:	mov	r2, #16
   2d868:	add	lr, lr, r1
   2d86c:	str	lr, [sp, #4]
   2d870:	ldr	ip, [ip, #12]
   2d874:	str	ip, [sp, #8]
   2d878:	bl	14178 <__sprintf_chk@plt>
   2d87c:	ldr	r2, [sp, #20]
   2d880:	ldr	r3, [r4]
   2d884:	ldr	r0, [pc, #52]	; 2d8c0 <__assert_fail@plt+0x19268>
   2d888:	cmp	r2, r3
   2d88c:	bne	2d8bc <__assert_fail@plt+0x19264>
   2d890:	add	sp, sp, #24
   2d894:	pop	{r4, pc}
   2d898:	movw	r2, #31156	; 0x79b4
   2d89c:	movt	r2, #4
   2d8a0:	ldr	r3, [pc, #24]	; 2d8c0 <__assert_fail@plt+0x19268>
   2d8a4:	ldm	r2, {r0, r1, r2}
   2d8a8:	lsr	ip, r2, #16
   2d8ac:	stmia	r3!, {r0, r1}
   2d8b0:	strh	r2, [r3], #2
   2d8b4:	strb	ip, [r3]
   2d8b8:	b	2d87c <__assert_fail@plt+0x19224>
   2d8bc:	bl	13cec <__stack_chk_fail@plt>
   2d8c0:	andeq	fp, r5, r0, lsl #21
   2d8c4:	push	{r4, r5, lr}
   2d8c8:	movw	r4, #47296	; 0xb8c0
   2d8cc:	movt	r4, #5
   2d8d0:	sub	sp, sp, #36	; 0x24
   2d8d4:	cmp	r0, #0
   2d8d8:	ldr	r3, [r4]
   2d8dc:	str	r0, [sp, #24]
   2d8e0:	str	r3, [sp, #28]
   2d8e4:	blt	2d964 <__assert_fail@plt+0x1930c>
   2d8e8:	add	r0, sp, #24
   2d8ec:	bl	141fc <gmtime@plt>
   2d8f0:	mov	r1, #1
   2d8f4:	movw	r3, #31204	; 0x79e4
   2d8f8:	movt	r3, #4
   2d8fc:	ldr	r2, [r0, #20]
   2d900:	mov	ip, r0
   2d904:	ldr	r0, [pc, #124]	; 2d988 <__assert_fail@plt+0x19330>
   2d908:	add	r2, r2, #1888	; 0x760
   2d90c:	add	r2, r2, #12
   2d910:	str	r2, [sp]
   2d914:	ldr	lr, [ip, #16]
   2d918:	mov	r2, #30
   2d91c:	add	lr, lr, r1
   2d920:	str	lr, [sp, #4]
   2d924:	ldr	lr, [ip, #12]
   2d928:	str	lr, [sp, #8]
   2d92c:	ldr	lr, [ip, #8]
   2d930:	str	lr, [sp, #12]
   2d934:	ldr	lr, [ip, #4]
   2d938:	str	lr, [sp, #16]
   2d93c:	ldr	ip, [ip]
   2d940:	str	ip, [sp, #20]
   2d944:	bl	14178 <__sprintf_chk@plt>
   2d948:	ldr	r2, [sp, #28]
   2d94c:	ldr	r3, [r4]
   2d950:	ldr	r0, [pc, #48]	; 2d988 <__assert_fail@plt+0x19330>
   2d954:	cmp	r2, r3
   2d958:	bne	2d984 <__assert_fail@plt+0x1932c>
   2d95c:	add	sp, sp, #36	; 0x24
   2d960:	pop	{r4, r5, pc}
   2d964:	movw	ip, #31184	; 0x79d0
   2d968:	movt	ip, #4
   2d96c:	ldr	r5, [pc, #20]	; 2d988 <__assert_fail@plt+0x19330>
   2d970:	ldm	ip!, {r0, r1, r2, r3}
   2d974:	ldr	ip, [ip]
   2d978:	stmia	r5!, {r0, r1, r2, r3}
   2d97c:	str	ip, [r5]
   2d980:	b	2d948 <__assert_fail@plt+0x192f0>
   2d984:	bl	13cec <__stack_chk_fail@plt>
   2d988:	muleq	r5, r0, sl
   2d98c:	push	{r4, r5, r6, lr}
   2d990:	movw	r4, #47296	; 0xb8c0
   2d994:	movt	r4, #5
   2d998:	sub	sp, sp, #8
   2d99c:	cmp	r0, #0
   2d9a0:	ldr	r3, [r4]
   2d9a4:	str	r0, [sp]
   2d9a8:	str	r3, [sp, #4]
   2d9ac:	blt	2da30 <__assert_fail@plt+0x193d8>
   2d9b0:	mov	r0, sp
   2d9b4:	bl	13fd4 <localtime@plt>
   2d9b8:	mov	r6, r0
   2d9bc:	mov	r0, #40	; 0x28
   2d9c0:	movt	r0, #2
   2d9c4:	bl	143dc <nl_langinfo@plt>
   2d9c8:	mov	r2, #47	; 0x2f
   2d9cc:	mov	r1, r0
   2d9d0:	ldr	r0, [pc, #152]	; 2da70 <__assert_fail@plt+0x19418>
   2d9d4:	bl	3b2dc <__assert_fail@plt+0x26c84>
   2d9d8:	movw	r1, #31236	; 0x7a04
   2d9dc:	ldr	r0, [pc, #140]	; 2da70 <__assert_fail@plt+0x19418>
   2d9e0:	movt	r1, #4
   2d9e4:	bl	13998 <strstr@plt>
   2d9e8:	cmp	r0, #0
   2d9ec:	beq	2da54 <__assert_fail@plt+0x193fc>
   2d9f0:	movw	r5, #47704	; 0xba58
   2d9f4:	movt	r5, #5
   2d9f8:	mov	r3, r6
   2d9fc:	add	r0, r5, #88	; 0x58
   2da00:	add	r2, r5, #140	; 0x8c
   2da04:	mov	r1, #49	; 0x31
   2da08:	bl	13fb0 <strftime@plt>
   2da0c:	mov	r3, #0
   2da10:	strb	r3, [r5, #137]	; 0x89
   2da14:	ldr	r2, [sp, #4]
   2da18:	ldr	r3, [r4]
   2da1c:	ldr	r0, [pc, #80]	; 2da74 <__assert_fail@plt+0x1941c>
   2da20:	cmp	r2, r3
   2da24:	bne	2da6c <__assert_fail@plt+0x19414>
   2da28:	add	sp, sp, #8
   2da2c:	pop	{r4, r5, r6, pc}
   2da30:	movw	r2, #31156	; 0x79b4
   2da34:	movt	r2, #4
   2da38:	ldr	r3, [pc, #52]	; 2da74 <__assert_fail@plt+0x1941c>
   2da3c:	ldm	r2, {r0, r1, r2}
   2da40:	lsr	ip, r2, #16
   2da44:	stmia	r3!, {r0, r1}
   2da48:	strh	r2, [r3], #2
   2da4c:	strb	ip, [r3]
   2da50:	b	2da14 <__assert_fail@plt+0x193bc>
   2da54:	movw	r1, #31240	; 0x7a08
   2da58:	mov	r2, #50	; 0x32
   2da5c:	movt	r1, #4
   2da60:	ldr	r0, [pc, #8]	; 2da70 <__assert_fail@plt+0x19418>
   2da64:	bl	14160 <__strcat_chk@plt>
   2da68:	b	2d9f0 <__assert_fail@plt+0x19398>
   2da6c:	bl	13cec <__stack_chk_fail@plt>
   2da70:	andeq	fp, r5, r4, ror #21
   2da74:			; <UNDEFINED> instruction: 0x0005bab0
   2da78:	ldrb	r3, [r0]
   2da7c:	cmp	r3, #0
   2da80:	bne	2da8c <__assert_fail@plt+0x19434>
   2da84:	mov	r0, #26
   2da88:	bx	lr
   2da8c:	b	2d12c <__assert_fail@plt+0x18ad4>
   2da90:	subs	r1, r0, #0
   2da94:	push	{lr}		; (str lr, [sp, #-4]!)
   2da98:	sub	sp, sp, #20
   2da9c:	beq	2daac <__assert_fail@plt+0x19454>
   2daa0:	ldrb	r3, [r1]
   2daa4:	cmp	r3, #0
   2daa8:	bne	2dacc <__assert_fail@plt+0x19474>
   2daac:	mov	r2, #5
   2dab0:	movw	r1, #31244	; 0x7a0c
   2dab4:	mov	r0, #0
   2dab8:	movt	r1, #4
   2dabc:	bl	13cc8 <dcgettext@plt>
   2dac0:	add	sp, sp, #20
   2dac4:	pop	{lr}		; (ldr lr, [sp], #4)
   2dac8:	b	3f60c <__assert_fail@plt+0x2afb4>
   2dacc:	add	r3, r1, #9
   2dad0:	add	r2, r1, #11
   2dad4:	str	r3, [sp]
   2dad8:	movw	r0, #31252	; 0x7a14
   2dadc:	add	r3, r1, #13
   2dae0:	movt	r0, #4
   2dae4:	stmib	sp, {r2, r3}
   2dae8:	add	r2, r1, #4
   2daec:	add	r3, r1, #6
   2daf0:	bl	3f60c <__assert_fail@plt+0x2afb4>
   2daf4:	add	sp, sp, #20
   2daf8:	pop	{pc}		; (ldr pc, [sp], #4)
   2dafc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2db00:	movw	r4, #47296	; 0xb8c0
   2db04:	movt	r4, #5
   2db08:	ldrb	r7, [r0]
   2db0c:	sub	sp, sp, #52	; 0x34
   2db10:	mov	r5, r0
   2db14:	ldr	r3, [r4]
   2db18:	cmp	r7, #0
   2db1c:	mov	r8, r1
   2db20:	moveq	r6, #26
   2db24:	str	r3, [sp, #44]	; 0x2c
   2db28:	beq	2db44 <__assert_fail@plt+0x194ec>
   2db2c:	bl	2d12c <__assert_fail@plt+0x18ad4>
   2db30:	subs	r6, r0, #0
   2db34:	bne	2db44 <__assert_fail@plt+0x194ec>
   2db38:	cmn	r8, #-2147483585	; 0x8000003f
   2db3c:	bls	2db60 <__assert_fail@plt+0x19508>
   2db40:	mov	r6, #55	; 0x37
   2db44:	ldr	r2, [sp, #44]	; 0x2c
   2db48:	mov	r0, r6
   2db4c:	ldr	r3, [r4]
   2db50:	cmp	r2, r3
   2db54:	bne	2dd20 <__assert_fail@plt+0x196c8>
   2db58:	add	sp, sp, #52	; 0x34
   2db5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2db60:	ldrb	r3, [r5, #2]
   2db64:	sub	r7, r7, #48	; 0x30
   2db68:	ldrb	r2, [r5, #1]
   2db6c:	mov	r9, #100	; 0x64
   2db70:	sub	r3, r3, #48	; 0x30
   2db74:	ldrb	ip, [r5, #3]
   2db78:	add	r7, r7, r7, lsl #2
   2db7c:	sub	r2, r2, #48	; 0x30
   2db80:	add	r3, r3, r3, lsl #2
   2db84:	sub	ip, ip, #48	; 0x30
   2db88:	add	r7, r2, r7, lsl #1
   2db8c:	ldrb	r2, [r5, #4]
   2db90:	add	ip, ip, r3, lsl #1
   2db94:	ldrb	r3, [r5, #6]
   2db98:	sub	r2, r2, #48	; 0x30
   2db9c:	ldrb	r1, [r5, #5]
   2dba0:	mla	r0, r9, r7, ip
   2dba4:	sub	r3, r3, #48	; 0x30
   2dba8:	ldrb	ip, [r5, #7]
   2dbac:	movw	r7, #1582	; 0x62e
   2dbb0:	add	r2, r2, r2, lsl #2
   2dbb4:	add	r3, r3, r3, lsl #2
   2dbb8:	cmp	r0, r7
   2dbbc:	sub	ip, ip, #48	; 0x30
   2dbc0:	sub	r1, r1, #48	; 0x30
   2dbc4:	ldrb	r9, [r5, #11]
   2dbc8:	add	r1, r1, r2, lsl #1
   2dbcc:	str	r0, [sp, #32]
   2dbd0:	add	r2, ip, r3, lsl #1
   2dbd4:	str	r1, [sp, #36]	; 0x24
   2dbd8:	str	r2, [sp, #40]	; 0x28
   2dbdc:	ldrb	ip, [r5, #9]
   2dbe0:	ldrb	r3, [r5, #10]
   2dbe4:	ldrb	r7, [r5, #12]
   2dbe8:	ldrb	fp, [r5, #13]
   2dbec:	ldrb	sl, [r5, #14]
   2dbf0:	ble	2db40 <__assert_fail@plt+0x194e8>
   2dbf4:	sub	fp, fp, #48	; 0x30
   2dbf8:	sub	sl, sl, #48	; 0x30
   2dbfc:	sub	r9, r9, #48	; 0x30
   2dc00:	movw	lr, #34953	; 0x8889
   2dc04:	add	fp, fp, fp, lsl #2
   2dc08:	movt	lr, #34952	; 0x8888
   2dc0c:	add	r9, r9, r9, lsl #2
   2dc10:	sub	r7, r7, #48	; 0x30
   2dc14:	add	sl, sl, fp, lsl #1
   2dc18:	sub	ip, ip, #48	; 0x30
   2dc1c:	add	r8, sl, r8
   2dc20:	add	r7, r7, r9, lsl #1
   2dc24:	add	ip, ip, ip, lsl #2
   2dc28:	sub	r3, r3, #48	; 0x30
   2dc2c:	smull	r9, fp, lr, r8
   2dc30:	add	r3, r3, ip, lsl #1
   2dc34:	asr	sl, r8, #31
   2dc38:	add	ip, fp, r8
   2dc3c:	rsb	ip, sl, ip, asr #5
   2dc40:	add	r7, ip, r7
   2dc44:	smull	ip, r9, lr, r7
   2dc48:	asr	ip, r7, #31
   2dc4c:	add	r9, r9, r7
   2dc50:	rsb	r9, ip, r9, asr #5
   2dc54:	add	r9, r9, r3
   2dc58:	bl	2ce54 <__assert_fail@plt+0x187fc>
   2dc5c:	movw	r3, #43691	; 0xaaab
   2dc60:	movt	r3, #10922	; 0x2aaa
   2dc64:	asr	ip, r9, #31
   2dc68:	add	r1, sp, #32
   2dc6c:	smull	r2, lr, r3, r9
   2dc70:	add	r2, sp, #36	; 0x24
   2dc74:	add	r3, sp, #40	; 0x28
   2dc78:	rsb	ip, ip, lr, asr #2
   2dc7c:	add	r0, r0, ip
   2dc80:	bl	2cfa0 <__assert_fail@plt+0x18948>
   2dc84:	ldr	r3, [sp, #32]
   2dc88:	movw	r2, #9999	; 0x270f
   2dc8c:	cmp	r3, r2
   2dc90:	bgt	2db40 <__assert_fail@plt+0x194e8>
   2dc94:	ldr	r2, [sp, #36]	; 0x24
   2dc98:	cmp	r2, #12
   2dc9c:	bgt	2db40 <__assert_fail@plt+0x194e8>
   2dca0:	cmp	r3, #0
   2dca4:	ldr	ip, [sp, #40]	; 0x28
   2dca8:	blt	2db40 <__assert_fail@plt+0x194e8>
   2dcac:	cmp	r2, #0
   2dcb0:	ble	2db40 <__assert_fail@plt+0x194e8>
   2dcb4:	sub	r1, ip, #1
   2dcb8:	cmp	r1, #30
   2dcbc:	bhi	2db40 <__assert_fail@plt+0x194e8>
   2dcc0:	mov	r0, r9
   2dcc4:	mov	r1, #24
   2dcc8:	str	r2, [sp, #8]
   2dccc:	str	ip, [sp, #12]
   2dcd0:	str	r3, [sp, #4]
   2dcd4:	movw	r3, #31084	; 0x796c
   2dcd8:	movt	r3, #4
   2dcdc:	str	r3, [sp]
   2dce0:	bl	3fb54 <__assert_fail@plt+0x2b4fc>
   2dce4:	mov	r0, r7
   2dce8:	str	r1, [sp, #16]
   2dcec:	mov	r1, #60	; 0x3c
   2dcf0:	bl	3fb54 <__assert_fail@plt+0x2b4fc>
   2dcf4:	mov	r0, r8
   2dcf8:	str	r1, [sp, #20]
   2dcfc:	mov	r1, #60	; 0x3c
   2dd00:	bl	3fb54 <__assert_fail@plt+0x2b4fc>
   2dd04:	mov	r0, r5
   2dd08:	mov	r2, #1
   2dd0c:	mvn	r3, #0
   2dd10:	str	r1, [sp, #24]
   2dd14:	mov	r1, #16
   2dd18:	bl	1464c <__snprintf_chk@plt>
   2dd1c:	b	2db44 <__assert_fail@plt+0x194ec>
   2dd20:	bl	13cec <__stack_chk_fail@plt>
   2dd24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dd28:	movw	r4, #47296	; 0xb8c0
   2dd2c:	movt	r4, #5
   2dd30:	ldrb	r8, [r0]
   2dd34:	sub	sp, sp, #60	; 0x3c
   2dd38:	mov	r5, r0
   2dd3c:	ldr	r3, [r4]
   2dd40:	cmp	r8, #0
   2dd44:	mov	r7, r1
   2dd48:	moveq	r6, #26
   2dd4c:	str	r3, [sp, #52]	; 0x34
   2dd50:	beq	2dd74 <__assert_fail@plt+0x1971c>
   2dd54:	bl	2d12c <__assert_fail@plt+0x18ad4>
   2dd58:	subs	r6, r0, #0
   2dd5c:	bne	2dd74 <__assert_fail@plt+0x1971c>
   2dd60:	movw	r3, #55153	; 0xd771
   2dd64:	movt	r3, #55	; 0x37
   2dd68:	cmp	r7, r3
   2dd6c:	bls	2dd90 <__assert_fail@plt+0x19738>
   2dd70:	mov	r6, #55	; 0x37
   2dd74:	ldr	r2, [sp, #52]	; 0x34
   2dd78:	mov	r0, r6
   2dd7c:	ldr	r3, [r4]
   2dd80:	cmp	r2, r3
   2dd84:	bne	2deec <__assert_fail@plt+0x19894>
   2dd88:	add	sp, sp, #60	; 0x3c
   2dd8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2dd90:	ldrb	r3, [r5, #2]
   2dd94:	sub	r8, r8, #48	; 0x30
   2dd98:	ldrb	r2, [r5, #1]
   2dd9c:	mov	r9, #100	; 0x64
   2dda0:	sub	r3, r3, #48	; 0x30
   2dda4:	ldrb	ip, [r5, #3]
   2dda8:	add	r8, r8, r8, lsl #2
   2ddac:	sub	r2, r2, #48	; 0x30
   2ddb0:	add	r3, r3, r3, lsl #2
   2ddb4:	sub	ip, ip, #48	; 0x30
   2ddb8:	add	r8, r2, r8, lsl #1
   2ddbc:	ldrb	r2, [r5, #4]
   2ddc0:	add	ip, ip, r3, lsl #1
   2ddc4:	ldrb	r3, [r5, #6]
   2ddc8:	sub	r2, r2, #48	; 0x30
   2ddcc:	ldrb	r1, [r5, #5]
   2ddd0:	sub	r3, r3, #48	; 0x30
   2ddd4:	ldrb	fp, [r5, #10]
   2ddd8:	mla	r0, r9, r8, ip
   2dddc:	ldrb	ip, [r5, #7]
   2dde0:	add	r2, r2, r2, lsl #2
   2dde4:	add	r3, r3, r3, lsl #2
   2dde8:	sub	ip, ip, #48	; 0x30
   2ddec:	sub	r1, r1, #48	; 0x30
   2ddf0:	add	r1, r1, r2, lsl #1
   2ddf4:	add	r2, ip, r3, lsl #1
   2ddf8:	ldrb	r3, [r5, #14]
   2ddfc:	movw	r8, #1582	; 0x62e
   2de00:	cmp	r0, r8
   2de04:	str	r0, [sp, #40]	; 0x28
   2de08:	str	r1, [sp, #44]	; 0x2c
   2de0c:	str	r2, [sp, #48]	; 0x30
   2de10:	ldrb	ip, [r5, #9]
   2de14:	ldrb	sl, [r5, #11]
   2de18:	ldrb	r9, [r5, #12]
   2de1c:	ldrb	r8, [r5, #13]
   2de20:	str	r3, [sp, #36]	; 0x24
   2de24:	ble	2dd70 <__assert_fail@plt+0x19718>
   2de28:	str	ip, [sp, #32]
   2de2c:	bl	2ce54 <__assert_fail@plt+0x187fc>
   2de30:	add	r2, sp, #44	; 0x2c
   2de34:	add	r3, sp, #48	; 0x30
   2de38:	add	r1, sp, #40	; 0x28
   2de3c:	add	r0, r0, r7
   2de40:	bl	2cfa0 <__assert_fail@plt+0x18948>
   2de44:	ldr	r3, [sp, #40]	; 0x28
   2de48:	movw	r2, #9999	; 0x270f
   2de4c:	ldr	ip, [sp, #32]
   2de50:	cmp	r3, r2
   2de54:	bgt	2dd70 <__assert_fail@plt+0x19718>
   2de58:	ldr	r2, [sp, #44]	; 0x2c
   2de5c:	cmp	r2, #12
   2de60:	bgt	2dd70 <__assert_fail@plt+0x19718>
   2de64:	cmp	r3, #0
   2de68:	ldr	r1, [sp, #48]	; 0x30
   2de6c:	blt	2dd70 <__assert_fail@plt+0x19718>
   2de70:	cmp	r2, #0
   2de74:	ble	2dd70 <__assert_fail@plt+0x19718>
   2de78:	sub	r0, r1, #1
   2de7c:	cmp	r0, #30
   2de80:	bhi	2dd70 <__assert_fail@plt+0x19718>
   2de84:	ldr	r0, [sp, #36]	; 0x24
   2de88:	sub	ip, ip, #48	; 0x30
   2de8c:	sub	sl, sl, #48	; 0x30
   2de90:	sub	r9, r9, #48	; 0x30
   2de94:	sub	lr, r0, #48	; 0x30
   2de98:	sub	r8, r8, #48	; 0x30
   2de9c:	sub	fp, fp, #48	; 0x30
   2dea0:	mov	r0, #10
   2dea4:	str	r2, [sp, #8]
   2dea8:	mla	fp, r0, ip, fp
   2deac:	str	r3, [sp, #4]
   2deb0:	mla	r2, r0, sl, r9
   2deb4:	str	r1, [sp, #12]
   2deb8:	mla	ip, r0, r8, lr
   2debc:	movw	r3, #31084	; 0x796c
   2dec0:	mov	r0, r5
   2dec4:	movt	r3, #4
   2dec8:	str	fp, [sp, #16]
   2decc:	mov	r1, #16
   2ded0:	str	r2, [sp, #20]
   2ded4:	mov	r2, #1
   2ded8:	str	r3, [sp]
   2dedc:	mvn	r3, #0
   2dee0:	str	ip, [sp, #24]
   2dee4:	bl	1464c <__snprintf_chk@plt>
   2dee8:	b	2dd74 <__assert_fail@plt+0x1971c>
   2deec:	bl	13cec <__stack_chk_fail@plt>
   2def0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2def4:	subs	r9, r2, #0
   2def8:	mov	r8, r0
   2defc:	mov	r4, r1
   2df00:	mov	sl, r3
   2df04:	beq	2df84 <__assert_fail@plt+0x1992c>
   2df08:	cmp	r4, #0
   2df0c:	beq	2dfc0 <__assert_fail@plt+0x19968>
   2df10:	add	r1, r4, r8
   2df14:	mov	ip, r8
   2df18:	mov	r4, r9
   2df1c:	mov	r3, #58	; 0x3a
   2df20:	b	2df38 <__assert_fail@plt+0x198e0>
   2df24:	cmp	r8, ip
   2df28:	cmpne	sl, #0
   2df2c:	strbne	r3, [r4, #2]
   2df30:	addne	r4, r4, #3
   2df34:	moveq	r4, r5
   2df38:	ldrb	r5, [ip], #1
   2df3c:	lsr	r5, r5, #4
   2df40:	cmp	r5, #9
   2df44:	add	r6, r5, #55	; 0x37
   2df48:	addle	r6, r5, #48	; 0x30
   2df4c:	mov	r5, r4
   2df50:	strb	r6, [r5], #2
   2df54:	ldrb	r6, [ip, #-1]
   2df58:	and	r6, r6, #15
   2df5c:	cmp	r6, #9
   2df60:	add	r7, r6, #55	; 0x37
   2df64:	addle	r7, r6, #48	; 0x30
   2df68:	cmp	ip, r1
   2df6c:	strb	r7, [r4, #1]
   2df70:	bne	2df24 <__assert_fail@plt+0x198cc>
   2df74:	mov	r3, #0
   2df78:	strb	r3, [r5]
   2df7c:	mov	r0, r9
   2df80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2df84:	cmp	r3, #0
   2df88:	moveq	r1, #2
   2df8c:	movne	r1, #3
   2df90:	mul	r0, r4, r1
   2df94:	cmp	r4, #0
   2df98:	add	r5, r0, #1
   2df9c:	beq	2dfac <__assert_fail@plt+0x19954>
   2dfa0:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   2dfa4:	cmp	r0, r4
   2dfa8:	bne	2dfc8 <__assert_fail@plt+0x19970>
   2dfac:	mov	r0, r5
   2dfb0:	bl	139c8 <gcry_malloc@plt>
   2dfb4:	subs	r9, r0, #0
   2dfb8:	bne	2df08 <__assert_fail@plt+0x198b0>
   2dfbc:	b	2df7c <__assert_fail@plt+0x19924>
   2dfc0:	mov	r5, r9
   2dfc4:	b	2df74 <__assert_fail@plt+0x1991c>
   2dfc8:	bl	14148 <__errno_location@plt>
   2dfcc:	mov	r3, #12
   2dfd0:	str	r3, [r0]
   2dfd4:	b	2df7c <__assert_fail@plt+0x19924>
   2dfd8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2dfdc:	subs	r9, r2, #0
   2dfe0:	mov	sl, r0
   2dfe4:	beq	2e0e0 <__assert_fail@plt+0x19a88>
   2dfe8:	mov	r8, #0
   2dfec:	mov	r4, r0
   2dff0:	mov	r5, r8
   2dff4:	ldrb	r3, [r4]
   2dff8:	sub	r6, r3, #48	; 0x30
   2dffc:	bic	r7, r3, #32
   2e000:	sub	r7, r7, #65	; 0x41
   2e004:	uxtb	ip, r6
   2e008:	cmp	r7, #5
   2e00c:	cmphi	ip, #9
   2e010:	bls	2e01c <__assert_fail@plt+0x199c4>
   2e014:	mvn	r0, #0
   2e018:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e01c:	ldrb	ip, [r4, #1]
   2e020:	sub	r7, ip, #48	; 0x30
   2e024:	bic	r2, ip, #32
   2e028:	sub	r2, r2, #65	; 0x41
   2e02c:	uxtb	r7, r7
   2e030:	cmp	r2, #5
   2e034:	cmphi	r7, #9
   2e038:	bhi	2e014 <__assert_fail@plt+0x199bc>
   2e03c:	cmp	r3, #57	; 0x39
   2e040:	add	r5, r5, #1
   2e044:	add	r8, r1, r8
   2e048:	bls	2e0d4 <__assert_fail@plt+0x19a7c>
   2e04c:	cmp	r3, #70	; 0x46
   2e050:	bhi	2e0d0 <__assert_fail@plt+0x19a78>
   2e054:	sub	r6, r3, #55	; 0x37
   2e058:	lsl	r6, r6, #4
   2e05c:	uxtb	r6, r6
   2e060:	cmp	ip, #57	; 0x39
   2e064:	bls	2e078 <__assert_fail@plt+0x19a20>
   2e068:	cmp	ip, #70	; 0x46
   2e06c:	subls	r7, ip, #55	; 0x37
   2e070:	subhi	r7, ip, #87	; 0x57
   2e074:	uxtb	r7, r7
   2e078:	cmp	r5, r9
   2e07c:	add	r7, r7, r6
   2e080:	add	r4, r4, #2
   2e084:	strb	r7, [r8]
   2e088:	mov	r8, r5
   2e08c:	bne	2dff4 <__assert_fail@plt+0x1999c>
   2e090:	ldrb	r5, [r4]
   2e094:	cmp	r5, #0
   2e098:	beq	2e0c8 <__assert_fail@plt+0x19a70>
   2e09c:	tst	r5, #128	; 0x80
   2e0a0:	bne	2e014 <__assert_fail@plt+0x199bc>
   2e0a4:	bl	14034 <__ctype_b_loc@plt>
   2e0a8:	lsl	r5, r5, #1
   2e0ac:	ldr	r3, [r0]
   2e0b0:	ldrh	r3, [r3, r5]
   2e0b4:	tst	r3, #8192	; 0x2000
   2e0b8:	beq	2e014 <__assert_fail@plt+0x199bc>
   2e0bc:	cmp	r8, r9
   2e0c0:	addeq	r4, r4, #1
   2e0c4:	bne	2e014 <__assert_fail@plt+0x199bc>
   2e0c8:	rsb	r0, sl, r4
   2e0cc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e0d0:	sub	r6, r3, #87	; 0x57
   2e0d4:	lsl	r6, r6, #4
   2e0d8:	uxtb	r6, r6
   2e0dc:	b	2e060 <__assert_fail@plt+0x19a08>
   2e0e0:	ldrb	r5, [r0]
   2e0e4:	mov	r4, r0
   2e0e8:	cmp	r5, #0
   2e0ec:	beq	2e0c8 <__assert_fail@plt+0x19a70>
   2e0f0:	mov	r8, r9
   2e0f4:	b	2e09c <__assert_fail@plt+0x19a44>
   2e0f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e0fc:	subs	r9, r2, #0
   2e100:	mov	sl, r0
   2e104:	beq	2e248 <__assert_fail@plt+0x19bf0>
   2e108:	mov	r8, #0
   2e10c:	mov	r5, r0
   2e110:	mov	r2, r8
   2e114:	mov	ip, r8
   2e118:	cmp	ip, #1
   2e11c:	beq	2e254 <__assert_fail@plt+0x19bfc>
   2e120:	cmp	r2, #0
   2e124:	ldrb	r3, [r5]
   2e128:	beq	2e148 <__assert_fail@plt+0x19af0>
   2e12c:	cmp	r3, #58	; 0x3a
   2e130:	beq	2e230 <__assert_fail@plt+0x19bd8>
   2e134:	mvn	r0, #0
   2e138:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e13c:	ldrb	r3, [r5, #1]
   2e140:	add	r5, r5, #1
   2e144:	mov	r2, ip
   2e148:	sub	r6, r3, #48	; 0x30
   2e14c:	bic	r7, r3, #32
   2e150:	sub	r7, r7, #65	; 0x41
   2e154:	uxtb	r4, r6
   2e158:	cmp	r7, #5
   2e15c:	cmphi	r4, #9
   2e160:	bhi	2e134 <__assert_fail@plt+0x19adc>
   2e164:	ldrb	r4, [r5, #1]
   2e168:	sub	r7, r4, #48	; 0x30
   2e16c:	bic	r0, r4, #32
   2e170:	sub	r0, r0, #65	; 0x41
   2e174:	uxtb	r7, r7
   2e178:	cmp	r0, #5
   2e17c:	cmphi	r7, #9
   2e180:	bhi	2e134 <__assert_fail@plt+0x19adc>
   2e184:	cmp	r3, #57	; 0x39
   2e188:	add	ip, ip, #1
   2e18c:	add	r8, r1, r8
   2e190:	bls	2e224 <__assert_fail@plt+0x19bcc>
   2e194:	cmp	r3, #70	; 0x46
   2e198:	bhi	2e220 <__assert_fail@plt+0x19bc8>
   2e19c:	sub	r6, r3, #55	; 0x37
   2e1a0:	lsl	r6, r6, #4
   2e1a4:	uxtb	r6, r6
   2e1a8:	cmp	r4, #57	; 0x39
   2e1ac:	bls	2e1c0 <__assert_fail@plt+0x19b68>
   2e1b0:	cmp	r4, #70	; 0x46
   2e1b4:	subls	r7, r4, #55	; 0x37
   2e1b8:	subhi	r7, r4, #87	; 0x57
   2e1bc:	uxtb	r7, r7
   2e1c0:	cmp	ip, r9
   2e1c4:	add	r7, r7, r6
   2e1c8:	add	r5, r5, #2
   2e1cc:	strb	r7, [r8]
   2e1d0:	mov	r8, ip
   2e1d4:	bne	2e118 <__assert_fail@plt+0x19ac0>
   2e1d8:	ldrb	r4, [r5]
   2e1dc:	cmp	r4, #58	; 0x3a
   2e1e0:	beq	2e134 <__assert_fail@plt+0x19adc>
   2e1e4:	cmp	r4, #0
   2e1e8:	beq	2e23c <__assert_fail@plt+0x19be4>
   2e1ec:	tst	r4, #128	; 0x80
   2e1f0:	bne	2e134 <__assert_fail@plt+0x19adc>
   2e1f4:	bl	14034 <__ctype_b_loc@plt>
   2e1f8:	lsl	r4, r4, #1
   2e1fc:	ldr	r3, [r0]
   2e200:	ldrh	r3, [r3, r4]
   2e204:	tst	r3, #8192	; 0x2000
   2e208:	beq	2e134 <__assert_fail@plt+0x19adc>
   2e20c:	cmp	r8, r9
   2e210:	addeq	r5, r5, #1
   2e214:	bne	2e134 <__assert_fail@plt+0x19adc>
   2e218:	rsb	r0, sl, r5
   2e21c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e220:	sub	r6, r3, #87	; 0x57
   2e224:	lsl	r6, r6, #4
   2e228:	uxtb	r6, r6
   2e22c:	b	2e1a8 <__assert_fail@plt+0x19b50>
   2e230:	ldrb	r3, [r5, #1]
   2e234:	add	r5, r5, #1
   2e238:	b	2e148 <__assert_fail@plt+0x19af0>
   2e23c:	cmp	r8, r9
   2e240:	beq	2e218 <__assert_fail@plt+0x19bc0>
   2e244:	b	2e134 <__assert_fail@plt+0x19adc>
   2e248:	mov	r5, r0
   2e24c:	mov	r8, r9
   2e250:	b	2e1d8 <__assert_fail@plt+0x19b80>
   2e254:	ldrb	r3, [r5]
   2e258:	cmp	r3, #58	; 0x3a
   2e25c:	beq	2e13c <__assert_fail@plt+0x19ae4>
   2e260:	cmp	r2, #0
   2e264:	bne	2e134 <__assert_fail@plt+0x19adc>
   2e268:	b	2e148 <__assert_fail@plt+0x19af0>
   2e26c:	mov	r3, #0
   2e270:	b	2def0 <__assert_fail@plt+0x19898>
   2e274:	mov	r3, #1
   2e278:	b	2def0 <__assert_fail@plt+0x19898>
   2e27c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2e280:	subs	r8, r3, #0
   2e284:	mov	r6, r0
   2e288:	mov	r9, r1
   2e28c:	mov	sl, r2
   2e290:	mov	r5, r0
   2e294:	mov	r7, #0
   2e298:	movne	r3, #0
   2e29c:	strne	r3, [r8]
   2e2a0:	ldrb	r4, [r5]
   2e2a4:	bic	r3, r4, #32
   2e2a8:	sub	r0, r4, #48	; 0x30
   2e2ac:	sub	r3, r3, #65	; 0x41
   2e2b0:	cmp	r0, #9
   2e2b4:	cmphi	r3, #5
   2e2b8:	bls	2e360 <__assert_fail@plt+0x19d08>
   2e2bc:	cmp	r4, #0
   2e2c0:	beq	2e2ec <__assert_fail@plt+0x19c94>
   2e2c4:	tst	r4, #128	; 0x80
   2e2c8:	bne	2e414 <__assert_fail@plt+0x19dbc>
   2e2cc:	bl	14034 <__ctype_b_loc@plt>
   2e2d0:	lsl	r4, r4, #1
   2e2d4:	ldr	r3, [r0]
   2e2d8:	ldrh	r0, [r3, r4]
   2e2dc:	and	r0, r0, #8192	; 0x2000
   2e2e0:	uxth	r0, r0
   2e2e4:	cmp	r0, #0
   2e2e8:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e2ec:	cmp	r5, r6
   2e2f0:	beq	2e300 <__assert_fail@plt+0x19ca8>
   2e2f4:	ldrb	r3, [r5, #-2]
   2e2f8:	cmp	r3, #48	; 0x30
   2e2fc:	beq	2e400 <__assert_fail@plt+0x19da8>
   2e300:	add	r7, r7, #1
   2e304:	mov	r4, #1
   2e308:	cmp	r9, #0
   2e30c:	beq	2e41c <__assert_fail@plt+0x19dc4>
   2e310:	cmp	r7, sl
   2e314:	mov	r0, #0
   2e318:	bhi	2e430 <__assert_fail@plt+0x19dd8>
   2e31c:	ldrb	r2, [r6]
   2e320:	sub	r3, r2, #48	; 0x30
   2e324:	bic	ip, r2, #32
   2e328:	sub	ip, ip, #65	; 0x41
   2e32c:	uxtb	r1, r3
   2e330:	cmp	r1, #9
   2e334:	cmphi	ip, #5
   2e338:	bls	2e388 <__assert_fail@plt+0x19d30>
   2e33c:	cmp	r4, #0
   2e340:	movne	r3, #0
   2e344:	strbne	r3, [r9, r0]
   2e348:	cmp	r8, #0
   2e34c:	beq	2e428 <__assert_fail@plt+0x19dd0>
   2e350:	sub	r7, r7, #1
   2e354:	mov	r0, r6
   2e358:	str	r7, [r8]
   2e35c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e360:	ldrb	ip, [r5, #1]
   2e364:	bic	r3, ip, #32
   2e368:	sub	ip, ip, #48	; 0x30
   2e36c:	sub	r3, r3, #65	; 0x41
   2e370:	cmp	ip, #9
   2e374:	cmphi	r3, #5
   2e378:	bhi	2e2bc <__assert_fail@plt+0x19c64>
   2e37c:	add	r5, r5, #2
   2e380:	add	r7, r7, #1
   2e384:	b	2e2a0 <__assert_fail@plt+0x19c48>
   2e388:	ldrb	ip, [r6, #1]
   2e38c:	sub	r1, ip, #48	; 0x30
   2e390:	bic	r5, ip, #32
   2e394:	sub	r5, r5, #65	; 0x41
   2e398:	uxtb	r1, r1
   2e39c:	cmp	r1, #9
   2e3a0:	cmphi	r5, #5
   2e3a4:	bhi	2e33c <__assert_fail@plt+0x19ce4>
   2e3a8:	cmp	r2, #57	; 0x39
   2e3ac:	bls	2e3f4 <__assert_fail@plt+0x19d9c>
   2e3b0:	cmp	r2, #70	; 0x46
   2e3b4:	bhi	2e3f0 <__assert_fail@plt+0x19d98>
   2e3b8:	sub	r3, r2, #55	; 0x37
   2e3bc:	lsl	r3, r3, #4
   2e3c0:	uxtb	r3, r3
   2e3c4:	cmp	ip, #57	; 0x39
   2e3c8:	bls	2e3dc <__assert_fail@plt+0x19d84>
   2e3cc:	cmp	ip, #70	; 0x46
   2e3d0:	subls	r1, ip, #55	; 0x37
   2e3d4:	subhi	r1, ip, #87	; 0x57
   2e3d8:	uxtb	r1, r1
   2e3dc:	add	r1, r1, r3
   2e3e0:	add	r6, r6, #2
   2e3e4:	strb	r1, [r9, r0]
   2e3e8:	add	r0, r0, #1
   2e3ec:	b	2e31c <__assert_fail@plt+0x19cc4>
   2e3f0:	sub	r3, r2, #87	; 0x57
   2e3f4:	lsl	r3, r3, #4
   2e3f8:	uxtb	r3, r3
   2e3fc:	b	2e3c4 <__assert_fail@plt+0x19d6c>
   2e400:	ldrb	r3, [r5, #-1]
   2e404:	cmp	r3, #48	; 0x30
   2e408:	bne	2e300 <__assert_fail@plt+0x19ca8>
   2e40c:	mov	r4, #0
   2e410:	b	2e308 <__assert_fail@plt+0x19cb0>
   2e414:	mov	r0, #0
   2e418:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e41c:	cmp	r8, #0
   2e420:	mov	r6, r5
   2e424:	bne	2e350 <__assert_fail@plt+0x19cf8>
   2e428:	mov	r0, r6
   2e42c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e430:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2e434:	push	{r4, r5, r6, lr}
   2e438:	movw	r4, #47296	; 0xb8c0
   2e43c:	movt	r4, #5
   2e440:	sub	sp, sp, #8
   2e444:	mov	r5, r1
   2e448:	mov	r1, #0
   2e44c:	ldr	ip, [r4]
   2e450:	mov	r2, r1
   2e454:	mov	r3, sp
   2e458:	mov	r6, r0
   2e45c:	str	ip, [sp, #4]
   2e460:	bl	2e27c <__assert_fail@plt+0x19c24>
   2e464:	cmp	r0, #0
   2e468:	beq	2e4c8 <__assert_fail@plt+0x19e70>
   2e46c:	cmp	r5, #0
   2e470:	rsbne	r0, r6, r0
   2e474:	strne	r0, [r5]
   2e478:	ldr	r0, [sp]
   2e47c:	add	r0, r0, #1
   2e480:	bl	139c8 <gcry_malloc@plt>
   2e484:	subs	r5, r0, #0
   2e488:	beq	2e4ac <__assert_fail@plt+0x19e54>
   2e48c:	ldr	r2, [sp]
   2e490:	mov	r0, r6
   2e494:	mov	r1, r5
   2e498:	mov	r3, #0
   2e49c:	add	r2, r2, #1
   2e4a0:	bl	2e27c <__assert_fail@plt+0x19c24>
   2e4a4:	cmp	r0, #0
   2e4a8:	beq	2e4e8 <__assert_fail@plt+0x19e90>
   2e4ac:	ldr	r2, [sp, #4]
   2e4b0:	mov	r0, r5
   2e4b4:	ldr	r3, [r4]
   2e4b8:	cmp	r2, r3
   2e4bc:	bne	2e4e4 <__assert_fail@plt+0x19e8c>
   2e4c0:	add	sp, sp, #8
   2e4c4:	pop	{r4, r5, r6, pc}
   2e4c8:	cmp	r5, #0
   2e4cc:	strne	r0, [r5]
   2e4d0:	bl	14148 <__errno_location@plt>
   2e4d4:	mov	r5, #0
   2e4d8:	mov	r3, #22
   2e4dc:	str	r3, [r0]
   2e4e0:	b	2e4ac <__assert_fail@plt+0x19e54>
   2e4e4:	bl	13cec <__stack_chk_fail@plt>
   2e4e8:	movw	r0, #31296	; 0x7a40
   2e4ec:	movw	r2, #31280	; 0x7a30
   2e4f0:	movt	r0, #4
   2e4f4:	movt	r2, #4
   2e4f8:	mov	r1, #244	; 0xf4
   2e4fc:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   2e500:	push	{r4, r5, r6, r7}
   2e504:	ldrb	r3, [r0]
   2e508:	cmp	r3, #0
   2e50c:	beq	2e5dc <__assert_fail@plt+0x19f84>
   2e510:	add	ip, r0, #1
   2e514:	mov	r4, r0
   2e518:	mov	r7, #32
   2e51c:	b	2e544 <__assert_fail@plt+0x19eec>
   2e520:	cmp	r3, #43	; 0x2b
   2e524:	beq	2e5c0 <__assert_fail@plt+0x19f68>
   2e528:	strb	r3, [ip, #-1]
   2e52c:	ldrb	r3, [r4, #1]
   2e530:	mov	r5, ip
   2e534:	add	r4, r4, #1
   2e538:	add	ip, ip, #1
   2e53c:	cmp	r3, #0
   2e540:	beq	2e5d0 <__assert_fail@plt+0x19f78>
   2e544:	cmp	r3, #37	; 0x25
   2e548:	bne	2e520 <__assert_fail@plt+0x19ec8>
   2e54c:	ldrb	r6, [r4, #1]
   2e550:	cmp	r6, #0
   2e554:	beq	2e528 <__assert_fail@plt+0x19ed0>
   2e558:	ldrb	r5, [r4, #2]
   2e55c:	cmp	r5, #0
   2e560:	beq	2e528 <__assert_fail@plt+0x19ed0>
   2e564:	cmp	r6, #57	; 0x39
   2e568:	lslls	r6, r6, #4
   2e56c:	andls	r6, r6, #240	; 0xf0
   2e570:	bls	2e588 <__assert_fail@plt+0x19f30>
   2e574:	cmp	r6, #70	; 0x46
   2e578:	subls	r6, r6, #55	; 0x37
   2e57c:	subhi	r6, r6, #87	; 0x57
   2e580:	lsl	r6, r6, #4
   2e584:	uxtb	r6, r6
   2e588:	cmp	r5, #57	; 0x39
   2e58c:	subls	r3, r5, #48	; 0x30
   2e590:	uxtbls	r3, r3
   2e594:	bls	2e5a8 <__assert_fail@plt+0x19f50>
   2e598:	cmp	r5, #70	; 0x46
   2e59c:	subls	r3, r5, #55	; 0x37
   2e5a0:	subhi	r3, r5, #87	; 0x57
   2e5a4:	uxtb	r3, r3
   2e5a8:	add	r3, r3, r6
   2e5ac:	add	r4, r4, #2
   2e5b0:	ands	r3, r3, #255	; 0xff
   2e5b4:	strbne	r3, [ip, #-1]
   2e5b8:	strbeq	r2, [ip, #-1]
   2e5bc:	b	2e52c <__assert_fail@plt+0x19ed4>
   2e5c0:	cmp	r1, #0
   2e5c4:	strbne	r7, [ip, #-1]
   2e5c8:	bne	2e52c <__assert_fail@plt+0x19ed4>
   2e5cc:	b	2e528 <__assert_fail@plt+0x19ed0>
   2e5d0:	rsb	r0, r0, r5
   2e5d4:	pop	{r4, r5, r6, r7}
   2e5d8:	bx	lr
   2e5dc:	mov	r0, r3
   2e5e0:	b	2e5d4 <__assert_fail@plt+0x19f7c>
   2e5e4:	push	{r4, r5, r6, r7, r8, lr}
   2e5e8:	mov	r4, r0
   2e5ec:	ldrb	r0, [r0]
   2e5f0:	mov	r7, r1
   2e5f4:	mov	r6, r2
   2e5f8:	cmp	r0, #0
   2e5fc:	beq	2e750 <__assert_fail@plt+0x1a0f8>
   2e600:	mov	r3, r4
   2e604:	mov	r5, #0
   2e608:	cmp	r0, #37	; 0x25
   2e60c:	ldrb	r0, [r3, #1]
   2e610:	beq	2e630 <__assert_fail@plt+0x19fd8>
   2e614:	cmp	r0, #0
   2e618:	add	r3, r3, #1
   2e61c:	add	r5, r5, #1
   2e620:	beq	2e654 <__assert_fail@plt+0x19ffc>
   2e624:	cmp	r0, #37	; 0x25
   2e628:	ldrb	r0, [r3, #1]
   2e62c:	bne	2e614 <__assert_fail@plt+0x19fbc>
   2e630:	cmp	r0, #0
   2e634:	beq	2e650 <__assert_fail@plt+0x19ff8>
   2e638:	ldrb	r2, [r3, #2]
   2e63c:	cmp	r2, #0
   2e640:	beq	2e744 <__assert_fail@plt+0x1a0ec>
   2e644:	ldrb	r0, [r3, #3]
   2e648:	add	r3, r3, #2
   2e64c:	b	2e614 <__assert_fail@plt+0x19fbc>
   2e650:	add	r5, r5, #1
   2e654:	add	r0, r5, #1
   2e658:	bl	139c8 <gcry_malloc@plt>
   2e65c:	cmp	r0, #0
   2e660:	popeq	{r4, r5, r6, r7, r8, pc}
   2e664:	ldrb	r3, [r4]
   2e668:	cmp	r3, #0
   2e66c:	beq	2e75c <__assert_fail@plt+0x1a104>
   2e670:	add	ip, r0, #1
   2e674:	mov	r8, #32
   2e678:	b	2e6a0 <__assert_fail@plt+0x1a048>
   2e67c:	cmp	r3, #43	; 0x2b
   2e680:	beq	2e71c <__assert_fail@plt+0x1a0c4>
   2e684:	strb	r3, [ip, #-1]
   2e688:	ldrb	r3, [r4, #1]
   2e68c:	mov	r2, ip
   2e690:	add	r4, r4, #1
   2e694:	add	ip, ip, #1
   2e698:	cmp	r3, #0
   2e69c:	beq	2e72c <__assert_fail@plt+0x1a0d4>
   2e6a0:	cmp	r3, #37	; 0x25
   2e6a4:	bne	2e67c <__assert_fail@plt+0x1a024>
   2e6a8:	ldrb	r2, [r4, #1]
   2e6ac:	cmp	r2, #0
   2e6b0:	beq	2e684 <__assert_fail@plt+0x1a02c>
   2e6b4:	ldrb	r1, [r4, #2]
   2e6b8:	cmp	r1, #0
   2e6bc:	beq	2e684 <__assert_fail@plt+0x1a02c>
   2e6c0:	cmp	r2, #57	; 0x39
   2e6c4:	lslls	r2, r2, #4
   2e6c8:	andls	r2, r2, #240	; 0xf0
   2e6cc:	bls	2e6e4 <__assert_fail@plt+0x1a08c>
   2e6d0:	cmp	r2, #70	; 0x46
   2e6d4:	subls	r2, r2, #55	; 0x37
   2e6d8:	subhi	r2, r2, #87	; 0x57
   2e6dc:	lsl	r2, r2, #4
   2e6e0:	uxtb	r2, r2
   2e6e4:	cmp	r1, #57	; 0x39
   2e6e8:	subls	r3, r1, #48	; 0x30
   2e6ec:	uxtbls	r3, r3
   2e6f0:	bls	2e704 <__assert_fail@plt+0x1a0ac>
   2e6f4:	cmp	r1, #70	; 0x46
   2e6f8:	subls	r3, r1, #55	; 0x37
   2e6fc:	subhi	r3, r1, #87	; 0x57
   2e700:	uxtb	r3, r3
   2e704:	add	r3, r3, r2
   2e708:	add	r4, r4, #2
   2e70c:	ands	r3, r3, #255	; 0xff
   2e710:	strbne	r3, [ip, #-1]
   2e714:	strbeq	r6, [ip, #-1]
   2e718:	b	2e688 <__assert_fail@plt+0x1a030>
   2e71c:	cmp	r7, #0
   2e720:	strbne	r8, [ip, #-1]
   2e724:	bne	2e688 <__assert_fail@plt+0x1a030>
   2e728:	b	2e684 <__assert_fail@plt+0x1a02c>
   2e72c:	rsb	r2, r0, r2
   2e730:	cmp	r5, r2
   2e734:	bne	2e764 <__assert_fail@plt+0x1a10c>
   2e738:	mov	r3, #0
   2e73c:	strb	r3, [r0, r5]
   2e740:	pop	{r4, r5, r6, r7, r8, pc}
   2e744:	add	r3, r3, #1
   2e748:	add	r5, r5, #1
   2e74c:	b	2e608 <__assert_fail@plt+0x19fb0>
   2e750:	mov	r5, r0
   2e754:	mov	r0, #1
   2e758:	b	2e658 <__assert_fail@plt+0x1a000>
   2e75c:	mov	r2, r3
   2e760:	b	2e730 <__assert_fail@plt+0x1a0d8>
   2e764:	movw	r0, #31336	; 0x7a68
   2e768:	movw	r1, #31348	; 0x7a74
   2e76c:	movw	r3, #31308	; 0x7a4c
   2e770:	movt	r0, #4
   2e774:	movt	r1, #4
   2e778:	mov	r2, #146	; 0x92
   2e77c:	movt	r3, #4
   2e780:	bl	14658 <__assert_fail@plt>
   2e784:	push	{r4, r5, r6, r7, r8, lr}
   2e788:	mov	r5, r0
   2e78c:	ldrb	r3, [r0]
   2e790:	sub	sp, sp, #8
   2e794:	cmp	r3, #0
   2e798:	beq	2e878 <__assert_fail@plt+0x1a220>
   2e79c:	mov	r1, r0
   2e7a0:	mov	r0, #1
   2e7a4:	cmp	r3, #34	; 0x22
   2e7a8:	cmpne	r3, #43	; 0x2b
   2e7ac:	beq	2e7c4 <__assert_fail@plt+0x1a16c>
   2e7b0:	cmp	r3, #37	; 0x25
   2e7b4:	beq	2e7c4 <__assert_fail@plt+0x1a16c>
   2e7b8:	cmp	r3, #31
   2e7bc:	addhi	r0, r0, #1
   2e7c0:	bhi	2e7c8 <__assert_fail@plt+0x1a170>
   2e7c4:	add	r0, r0, #3
   2e7c8:	ldrb	r3, [r1, #1]!
   2e7cc:	cmp	r3, #0
   2e7d0:	bne	2e7a4 <__assert_fail@plt+0x1a14c>
   2e7d4:	bl	139c8 <gcry_malloc@plt>
   2e7d8:	subs	r7, r0, #0
   2e7dc:	beq	2e86c <__assert_fail@plt+0x1a214>
   2e7e0:	ldrb	ip, [r5]
   2e7e4:	cmp	ip, #0
   2e7e8:	beq	2e880 <__assert_fail@plt+0x1a228>
   2e7ec:	movw	r6, #31360	; 0x7a80
   2e7f0:	mov	r4, r7
   2e7f4:	movt	r6, #4
   2e7f8:	mov	r8, #43	; 0x2b
   2e7fc:	b	2e82c <__assert_fail@plt+0x1a1d4>
   2e800:	cmp	ip, #37	; 0x25
   2e804:	beq	2e848 <__assert_fail@plt+0x1a1f0>
   2e808:	cmp	ip, #31
   2e80c:	bls	2e848 <__assert_fail@plt+0x1a1f0>
   2e810:	cmp	ip, #32
   2e814:	strbeq	r8, [r4]
   2e818:	strbne	ip, [r4]
   2e81c:	add	r4, r4, #1
   2e820:	ldrb	ip, [r5, #1]!
   2e824:	cmp	ip, #0
   2e828:	beq	2e864 <__assert_fail@plt+0x1a20c>
   2e82c:	cmp	ip, #34	; 0x22
   2e830:	cmpne	ip, #43	; 0x2b
   2e834:	mov	r0, r4
   2e838:	mov	r1, #4
   2e83c:	mov	r2, #1
   2e840:	mvn	r3, #0
   2e844:	bne	2e800 <__assert_fail@plt+0x1a1a8>
   2e848:	str	ip, [sp, #4]
   2e84c:	add	r4, r4, #3
   2e850:	str	r6, [sp]
   2e854:	bl	1464c <__snprintf_chk@plt>
   2e858:	ldrb	ip, [r5, #1]!
   2e85c:	cmp	ip, #0
   2e860:	bne	2e82c <__assert_fail@plt+0x1a1d4>
   2e864:	mov	r3, #0
   2e868:	strb	r3, [r4]
   2e86c:	mov	r0, r7
   2e870:	add	sp, sp, #8
   2e874:	pop	{r4, r5, r6, r7, r8, pc}
   2e878:	mov	r0, #1
   2e87c:	b	2e7d4 <__assert_fail@plt+0x1a17c>
   2e880:	mov	r4, r7
   2e884:	b	2e864 <__assert_fail@plt+0x1a20c>
   2e888:	mov	r2, r1
   2e88c:	mov	r1, #1
   2e890:	b	2e5e4 <__assert_fail@plt+0x19f8c>
   2e894:	mov	r2, r1
   2e898:	mov	r1, #0
   2e89c:	b	2e5e4 <__assert_fail@plt+0x19f8c>
   2e8a0:	mov	r2, r1
   2e8a4:	mov	r1, #1
   2e8a8:	b	2e500 <__assert_fail@plt+0x19ea8>
   2e8ac:	mov	r2, r1
   2e8b0:	mov	r1, #0
   2e8b4:	b	2e500 <__assert_fail@plt+0x19ea8>
   2e8b8:	cmp	r2, #0
   2e8bc:	push	{r3, lr}
   2e8c0:	movne	r1, r2
   2e8c4:	beq	2e8d4 <__assert_fail@plt+0x1a27c>
   2e8c8:	movw	r0, #31392	; 0x7aa0
   2e8cc:	movt	r0, #4
   2e8d0:	bl	3f544 <__assert_fail@plt+0x2aeec>
   2e8d4:	mov	r0, r1
   2e8d8:	bl	13a64 <gpg_strerror@plt>
   2e8dc:	mov	r1, r0
   2e8e0:	b	2e8c8 <__assert_fail@plt+0x1a270>
   2e8e4:	cmp	r1, #30
   2e8e8:	beq	2e950 <__assert_fail@plt+0x1a2f8>
   2e8ec:	ble	2e920 <__assert_fail@plt+0x1a2c8>
   2e8f0:	cmp	r1, #50	; 0x32
   2e8f4:	moveq	r0, #6
   2e8f8:	beq	2e914 <__assert_fail@plt+0x1a2bc>
   2e8fc:	cmp	r1, #100	; 0x64
   2e900:	moveq	r0, #7
   2e904:	beq	2e914 <__assert_fail@plt+0x1a2bc>
   2e908:	cmp	r1, #40	; 0x28
   2e90c:	bne	2e950 <__assert_fail@plt+0x1a2f8>
   2e910:	mov	r0, #5
   2e914:	mov	r1, r2
   2e918:	mov	r2, r3
   2e91c:	b	3f474 <__assert_fail@plt+0x2ae1c>
   2e920:	cmp	r1, #10
   2e924:	moveq	r0, #2
   2e928:	beq	2e914 <__assert_fail@plt+0x1a2bc>
   2e92c:	cmp	r1, #20
   2e930:	moveq	r0, #3
   2e934:	beq	2e914 <__assert_fail@plt+0x1a2bc>
   2e938:	cmp	r1, #0
   2e93c:	bne	2e950 <__assert_fail@plt+0x1a2f8>
   2e940:	mov	r1, r2
   2e944:	mov	r0, #1
   2e948:	mov	r2, r3
   2e94c:	b	3f474 <__assert_fail@plt+0x2ae1c>
   2e950:	mov	r1, r2
   2e954:	mov	r0, #4
   2e958:	mov	r2, r3
   2e95c:	b	3f474 <__assert_fail@plt+0x2ae1c>
   2e960:	movw	r3, #47896	; 0xbb18
   2e964:	movt	r3, #5
   2e968:	push	{r4, lr}
   2e96c:	mov	r4, r1
   2e970:	ldr	ip, [r3]
   2e974:	cmp	ip, #0
   2e978:	bne	2e9c0 <__assert_fail@plt+0x1a368>
   2e97c:	ands	r0, r2, #1
   2e980:	mov	r1, #1
   2e984:	str	r1, [r3]
   2e988:	beq	2e9a8 <__assert_fail@plt+0x1a350>
   2e98c:	mov	r0, ip
   2e990:	movw	r1, #31416	; 0x7ab8
   2e994:	mov	r2, #5
   2e998:	movt	r1, #4
   2e99c:	bl	13cc8 <dcgettext@plt>
   2e9a0:	mov	r1, r4
   2e9a4:	bl	3f544 <__assert_fail@plt+0x2aeec>
   2e9a8:	movw	r1, #31472	; 0x7af0
   2e9ac:	mov	r2, #5
   2e9b0:	movt	r1, #4
   2e9b4:	bl	13cc8 <dcgettext@plt>
   2e9b8:	mov	r1, r4
   2e9bc:	bl	3f544 <__assert_fail@plt+0x2aeec>
   2e9c0:	mov	r0, #0
   2e9c4:	pop	{r4, pc}
   2e9c8:	push	{r3, lr}
   2e9cc:	mov	r1, #0
   2e9d0:	movw	r0, #59620	; 0xe8e4
   2e9d4:	movt	r0, #2
   2e9d8:	bl	14568 <gcry_set_log_handler@plt>
   2e9dc:	mov	r1, #0
   2e9e0:	movw	r0, #59576	; 0xe8b8
   2e9e4:	movt	r0, #2
   2e9e8:	bl	14550 <gcry_set_fatalerror_handler@plt>
   2e9ec:	movw	r0, #59744	; 0xe960
   2e9f0:	mov	r1, #0
   2e9f4:	movt	r0, #2
   2e9f8:	pop	{r3, lr}
   2e9fc:	b	143d0 <gcry_set_outofcore_handler@plt>
   2ea00:	cmp	r0, #0
   2ea04:	beq	2ea2c <__assert_fail@plt+0x1a3d4>
   2ea08:	ldrb	r3, [r0]
   2ea0c:	cmp	r3, #45	; 0x2d
   2ea10:	bxne	lr
   2ea14:	ldrb	r2, [r0, #1]
   2ea18:	movw	r3, #31512	; 0x7b18
   2ea1c:	movt	r3, #4
   2ea20:	cmp	r2, #0
   2ea24:	moveq	r0, r3
   2ea28:	bx	lr
   2ea2c:	movw	r0, #31512	; 0x7b18
   2ea30:	movt	r0, #4
   2ea34:	bx	lr
   2ea38:	cmp	r0, #0
   2ea3c:	beq	2ea64 <__assert_fail@plt+0x1a40c>
   2ea40:	ldrb	r3, [r0]
   2ea44:	cmp	r3, #45	; 0x2d
   2ea48:	bxne	lr
   2ea4c:	ldrb	r2, [r0, #1]
   2ea50:	movw	r3, #31524	; 0x7b24
   2ea54:	movt	r3, #4
   2ea58:	cmp	r2, #0
   2ea5c:	moveq	r0, r3
   2ea60:	bx	lr
   2ea64:	movw	r0, #31524	; 0x7b24
   2ea68:	movt	r0, #4
   2ea6c:	bx	lr
   2ea70:	b	3b890 <__assert_fail@plt+0x27238>
   2ea74:	b	3b8ac <__assert_fail@plt+0x27254>
   2ea78:	mov	r3, #0
   2ea7c:	b	3b8ac <__assert_fail@plt+0x27254>
   2ea80:	push	{r4, r5, r6, lr}
   2ea84:	subs	r4, r2, #0
   2ea88:	mov	r6, r0
   2ea8c:	popeq	{r4, r5, r6, pc}
   2ea90:	mov	r5, r1
   2ea94:	ldrb	r3, [r5], #1
   2ea98:	mov	r1, r6
   2ea9c:	lsr	r3, r3, #4
   2eaa0:	cmp	r3, #9
   2eaa4:	add	r0, r3, #55	; 0x37
   2eaa8:	addle	r0, r3, #48	; 0x30
   2eaac:	bl	13e0c <_IO_putc@plt>
   2eab0:	ldrb	r3, [r5, #-1]
   2eab4:	mov	r1, r6
   2eab8:	and	r3, r3, #15
   2eabc:	cmp	r3, #9
   2eac0:	add	r0, r3, #48	; 0x30
   2eac4:	addgt	r0, r3, #55	; 0x37
   2eac8:	bl	13e0c <_IO_putc@plt>
   2eacc:	subs	r4, r4, #1
   2ead0:	bne	2ea94 <__assert_fail@plt+0x1a43c>
   2ead4:	pop	{r4, r5, r6, pc}
   2ead8:	b	3ba04 <__assert_fail@plt+0x273ac>
   2eadc:	movw	ip, #31368	; 0x7a88
   2eae0:	movt	ip, #4
   2eae4:	push	{r4, r5, r6, r7, r8, lr}
   2eae8:	mov	r6, r0
   2eaec:	mov	r7, r1
   2eaf0:	sub	sp, sp, #40	; 0x28
   2eaf4:	ldm	ip!, {r0, r1, r2, r3}
   2eaf8:	add	lr, sp, #8
   2eafc:	movw	r4, #47296	; 0xb8c0
   2eb00:	movt	r4, #5
   2eb04:	ldr	r5, [r4]
   2eb08:	stmia	lr!, {r0, r1, r2, r3}
   2eb0c:	ldm	ip, {r0, r1}
   2eb10:	str	r5, [sp, #36]	; 0x24
   2eb14:	stm	lr, {r0, r1}
   2eb18:	mov	r0, r6
   2eb1c:	bl	2fab0 <__assert_fail@plt+0x1b458>
   2eb20:	subs	r5, r0, #0
   2eb24:	movne	r5, #0
   2eb28:	bne	2ebb8 <__assert_fail@plt+0x1a560>
   2eb2c:	cmp	r7, #0
   2eb30:	beq	2ebb8 <__assert_fail@plt+0x1a560>
   2eb34:	mov	r0, r6
   2eb38:	bl	2ff54 <__assert_fail@plt+0x1b8fc>
   2eb3c:	subs	r6, r0, #0
   2eb40:	beq	2ebe4 <__assert_fail@plt+0x1a58c>
   2eb44:	add	r1, sp, #4
   2eb48:	bl	31900 <__assert_fail@plt+0x1d2a8>
   2eb4c:	cmp	r0, #4
   2eb50:	sbcs	r3, r1, #0
   2eb54:	bge	2eb68 <__assert_fail@plt+0x1a510>
   2eb58:	ldr	r5, [sp, #4]
   2eb5c:	cmp	r5, #0
   2eb60:	streq	r5, [r7]
   2eb64:	beq	2ebb0 <__assert_fail@plt+0x1a558>
   2eb68:	mov	r0, r6
   2eb6c:	mov	r2, #4
   2eb70:	add	r1, sp, #32
   2eb74:	bl	30b7c <__assert_fail@plt+0x1c524>
   2eb78:	cmn	r0, #1
   2eb7c:	addne	r5, sp, #12
   2eb80:	addne	r8, sp, #36	; 0x24
   2eb84:	beq	2ebd4 <__assert_fail@plt+0x1a57c>
   2eb88:	add	r0, sp, #32
   2eb8c:	mov	r1, r5
   2eb90:	ldr	r2, [r5, #-4]
   2eb94:	bl	13c80 <memcmp@plt>
   2eb98:	cmp	r0, #0
   2eb9c:	beq	2ebfc <__assert_fail@plt+0x1a5a4>
   2eba0:	add	r5, r5, #8
   2eba4:	cmp	r5, r8
   2eba8:	bne	2eb88 <__assert_fail@plt+0x1a530>
   2ebac:	mov	r5, #0
   2ebb0:	mov	r0, r6
   2ebb4:	bl	3048c <__assert_fail@plt+0x1be34>
   2ebb8:	ldr	r2, [sp, #36]	; 0x24
   2ebbc:	mov	r0, r5
   2ebc0:	ldr	r3, [r4]
   2ebc4:	cmp	r2, r3
   2ebc8:	bne	2ec08 <__assert_fail@plt+0x1a5b0>
   2ebcc:	add	sp, sp, #40	; 0x28
   2ebd0:	pop	{r4, r5, r6, r7, r8, pc}
   2ebd4:	ldr	r3, [r6, #60]	; 0x3c
   2ebd8:	mov	r5, #0
   2ebdc:	str	r3, [r7]
   2ebe0:	b	2ebb0 <__assert_fail@plt+0x1a558>
   2ebe4:	bl	14580 <gpg_err_code_from_syserror@plt>
   2ebe8:	cmp	r0, #0
   2ebec:	uxthne	r3, r0
   2ebf0:	moveq	r3, r5
   2ebf4:	str	r3, [r7]
   2ebf8:	b	2ebb8 <__assert_fail@plt+0x1a560>
   2ebfc:	str	r0, [r7]
   2ec00:	mov	r5, #1
   2ec04:	b	2ebb0 <__assert_fail@plt+0x1a558>
   2ec08:	bl	13cec <__stack_chk_fail@plt>
   2ec0c:	push	{r4, r5, r6, lr}
   2ec10:	mov	r6, r1
   2ec14:	ldrb	r3, [r0]
   2ec18:	cmp	r3, #0
   2ec1c:	beq	2ec60 <__assert_fail@plt+0x1a608>
   2ec20:	cmp	r3, #124	; 0x7c
   2ec24:	beq	2ec60 <__assert_fail@plt+0x1a608>
   2ec28:	add	r4, r0, #1
   2ec2c:	mov	r2, #0
   2ec30:	b	2ec3c <__assert_fail@plt+0x1a5e4>
   2ec34:	cmp	r3, #124	; 0x7c
   2ec38:	beq	2ec68 <__assert_fail@plt+0x1a610>
   2ec3c:	mov	r5, r4
   2ec40:	ldrb	r3, [r4], #1
   2ec44:	add	r2, r2, #1
   2ec48:	cmp	r3, #0
   2ec4c:	bne	2ec34 <__assert_fail@plt+0x1a5dc>
   2ec50:	mov	r1, r6
   2ec54:	bl	1416c <strncasecmp@plt>
   2ec58:	cmp	r0, #0
   2ec5c:	beq	2ec8c <__assert_fail@plt+0x1a634>
   2ec60:	mov	r0, #0
   2ec64:	pop	{r4, r5, r6, pc}
   2ec68:	mov	r1, r6
   2ec6c:	bl	1416c <strncasecmp@plt>
   2ec70:	cmp	r0, #0
   2ec74:	beq	2ec8c <__assert_fail@plt+0x1a634>
   2ec78:	ldrb	r3, [r5, #1]
   2ec7c:	cmp	r3, #0
   2ec80:	beq	2ec60 <__assert_fail@plt+0x1a608>
   2ec84:	mov	r0, r4
   2ec88:	b	2ec20 <__assert_fail@plt+0x1a5c8>
   2ec8c:	mov	r0, #1
   2ec90:	pop	{r4, r5, r6, pc}
   2ec94:	push	{r0, r1, r2, r3}
   2ec98:	push	{r4, lr}
   2ec9c:	movw	r4, #47296	; 0xb8c0
   2eca0:	movt	r4, #5
   2eca4:	sub	sp, sp, #16
   2eca8:	add	r3, sp, #28
   2ecac:	add	r0, sp, #8
   2ecb0:	ldr	ip, [r4]
   2ecb4:	ldr	r1, [sp, #24]
   2ecb8:	mov	r2, r3
   2ecbc:	str	r3, [sp, #4]
   2ecc0:	str	ip, [sp, #12]
   2ecc4:	bl	39208 <__assert_fail@plt+0x24bb0>
   2ecc8:	cmp	r0, #0
   2eccc:	blt	2ecf8 <__assert_fail@plt+0x1a6a0>
   2ecd0:	ldr	r2, [sp, #12]
   2ecd4:	ldr	r3, [r4]
   2ecd8:	ldr	r0, [sp, #8]
   2ecdc:	cmp	r2, r3
   2ece0:	bne	2ecf4 <__assert_fail@plt+0x1a69c>
   2ece4:	add	sp, sp, #16
   2ece8:	pop	{r4, lr}
   2ecec:	add	sp, sp, #16
   2ecf0:	bx	lr
   2ecf4:	bl	13cec <__stack_chk_fail@plt>
   2ecf8:	bl	14148 <__errno_location@plt>
   2ecfc:	ldr	r0, [r0]
   2ed00:	bl	13fa4 <strerror@plt>
   2ed04:	mov	r1, r0
   2ed08:	movw	r0, #31532	; 0x7b2c
   2ed0c:	movt	r0, #4
   2ed10:	bl	3f544 <__assert_fail@plt+0x2aeec>
   2ed14:	push	{r0, r1, r2, r3}
   2ed18:	push	{r4, lr}
   2ed1c:	movw	r4, #47296	; 0xb8c0
   2ed20:	movt	r4, #5
   2ed24:	sub	sp, sp, #16
   2ed28:	add	r3, sp, #28
   2ed2c:	add	r0, sp, #8
   2ed30:	ldr	ip, [r4]
   2ed34:	mov	r2, r3
   2ed38:	ldr	r1, [sp, #24]
   2ed3c:	str	r3, [sp, #4]
   2ed40:	str	ip, [sp, #12]
   2ed44:	bl	39208 <__assert_fail@plt+0x24bb0>
   2ed48:	ldr	r2, [sp, #12]
   2ed4c:	ldr	r3, [r4]
   2ed50:	cmp	r0, #0
   2ed54:	ldrge	r0, [sp, #8]
   2ed58:	movlt	r0, #0
   2ed5c:	cmp	r2, r3
   2ed60:	bne	2ed74 <__assert_fail@plt+0x1a71c>
   2ed64:	add	sp, sp, #16
   2ed68:	pop	{r4, lr}
   2ed6c:	add	sp, sp, #16
   2ed70:	bx	lr
   2ed74:	bl	13cec <__stack_chk_fail@plt>
   2ed78:	push	{r4, lr}
   2ed7c:	mov	r4, r0
   2ed80:	mov	r3, #0
   2ed84:	mov	r0, r1
   2ed88:	str	r1, [r4, #4]
   2ed8c:	str	r3, [r4]
   2ed90:	str	r3, [r4, #12]
   2ed94:	bl	139c8 <gcry_malloc@plt>
   2ed98:	cmp	r0, #0
   2ed9c:	str	r0, [r4, #8]
   2eda0:	popne	{r4, pc}
   2eda4:	bl	14148 <__errno_location@plt>
   2eda8:	ldr	r3, [r0]
   2edac:	str	r3, [r4, #12]
   2edb0:	pop	{r4, pc}
   2edb4:	push	{r4, lr}
   2edb8:	mov	r4, r0
   2edbc:	mov	r3, #0
   2edc0:	mov	r0, r1
   2edc4:	str	r1, [r4, #4]
   2edc8:	str	r3, [r4]
   2edcc:	str	r3, [r4, #12]
   2edd0:	bl	13f44 <gcry_malloc_secure@plt>
   2edd4:	cmp	r0, #0
   2edd8:	str	r0, [r4, #8]
   2eddc:	popne	{r4, pc}
   2ede0:	bl	14148 <__errno_location@plt>
   2ede4:	ldr	r3, [r0]
   2ede8:	str	r3, [r4, #12]
   2edec:	pop	{r4, pc}
   2edf0:	push	{r3, r4, r5, r6, r7, lr}
   2edf4:	mov	r4, r0
   2edf8:	ldr	r3, [r0, #12]
   2edfc:	mov	r6, r1
   2ee00:	mov	r5, r2
   2ee04:	cmp	r3, #0
   2ee08:	popne	{r3, r4, r5, r6, r7, pc}
   2ee0c:	ldm	r0, {r0, r1}
   2ee10:	add	r3, r2, r0
   2ee14:	cmp	r3, r1
   2ee18:	bcc	2ee48 <__assert_fail@plt+0x1a7f0>
   2ee1c:	add	r1, r1, #1024	; 0x400
   2ee20:	ldr	r0, [r4, #8]
   2ee24:	add	r1, r1, r2
   2ee28:	str	r1, [r4, #4]
   2ee2c:	bl	142d4 <gcry_realloc@plt>
   2ee30:	subs	r7, r0, #0
   2ee34:	beq	2ee6c <__assert_fail@plt+0x1a814>
   2ee38:	ldr	r0, [r4]
   2ee3c:	mov	r3, r7
   2ee40:	str	r7, [r4, #8]
   2ee44:	b	2ee4c <__assert_fail@plt+0x1a7f4>
   2ee48:	ldr	r3, [r4, #8]
   2ee4c:	add	r0, r3, r0
   2ee50:	mov	r2, r5
   2ee54:	mov	r1, r6
   2ee58:	bl	13ba8 <memcpy@plt>
   2ee5c:	ldr	r3, [r4]
   2ee60:	add	r5, r3, r5
   2ee64:	str	r5, [r4]
   2ee68:	pop	{r3, r4, r5, r6, r7, pc}
   2ee6c:	bl	14148 <__errno_location@plt>
   2ee70:	ldr	r2, [r4]
   2ee74:	ldr	r3, [r4, #8]
   2ee78:	ldr	r1, [r0]
   2ee7c:	cmp	r1, #0
   2ee80:	moveq	r1, #12
   2ee84:	cmp	r2, #0
   2ee88:	str	r1, [r4, #12]
   2ee8c:	popeq	{r3, r4, r5, r6, r7, pc}
   2ee90:	add	r2, r3, r2
   2ee94:	strb	r7, [r3], #1
   2ee98:	cmp	r3, r2
   2ee9c:	bne	2ee94 <__assert_fail@plt+0x1a83c>
   2eea0:	pop	{r3, r4, r5, r6, r7, pc}
   2eea4:	push	{r3, r4, r5, lr}
   2eea8:	mov	r5, r0
   2eeac:	mov	r0, r1
   2eeb0:	mov	r4, r1
   2eeb4:	bl	14094 <strlen@plt>
   2eeb8:	mov	r1, r4
   2eebc:	mov	r2, r0
   2eec0:	mov	r0, r5
   2eec4:	pop	{r3, r4, r5, lr}
   2eec8:	b	2edf0 <__assert_fail@plt+0x1a798>
   2eecc:	push	{r3, r4, r5, lr}
   2eed0:	mov	r4, r0
   2eed4:	ldr	r5, [r0, #12]
   2eed8:	cmp	r5, #0
   2eedc:	bne	2ef08 <__assert_fail@plt+0x1a8b0>
   2eee0:	cmp	r1, #0
   2eee4:	ldr	r3, [r0, #8]
   2eee8:	ldrne	r2, [r0]
   2eeec:	strne	r2, [r1]
   2eef0:	mov	r1, #0
   2eef4:	mov	r2, #12
   2eef8:	str	r1, [r0, #8]
   2eefc:	str	r2, [r0, #12]
   2ef00:	mov	r0, r3
   2ef04:	pop	{r3, r4, r5, pc}
   2ef08:	ldr	r0, [r0, #8]
   2ef0c:	cmp	r0, #0
   2ef10:	beq	2ef48 <__assert_fail@plt+0x1a8f0>
   2ef14:	ldr	r2, [r4]
   2ef18:	cmp	r2, #0
   2ef1c:	beq	2ef38 <__assert_fail@plt+0x1a8e0>
   2ef20:	add	r2, r0, r2
   2ef24:	mov	r3, #0
   2ef28:	strb	r3, [r0], #1
   2ef2c:	cmp	r0, r2
   2ef30:	bne	2ef28 <__assert_fail@plt+0x1a8d0>
   2ef34:	ldr	r0, [r4, #8]
   2ef38:	bl	13c44 <gcry_free@plt>
   2ef3c:	ldr	r5, [r4, #12]
   2ef40:	mov	r3, #0
   2ef44:	str	r3, [r4, #8]
   2ef48:	bl	14148 <__errno_location@plt>
   2ef4c:	mov	r3, #0
   2ef50:	str	r5, [r0]
   2ef54:	mov	r0, r3
   2ef58:	pop	{r3, r4, r5, pc}
   2ef5c:	movw	r3, #47900	; 0xbb1c
   2ef60:	movt	r3, #5
   2ef64:	ldr	r3, [r3]
   2ef68:	cmp	r3, #0
   2ef6c:	beq	2efc8 <__assert_fail@plt+0x1a970>
   2ef70:	cmp	r0, #0
   2ef74:	beq	2efc8 <__assert_fail@plt+0x1a970>
   2ef78:	ldrb	r3, [r0]
   2ef7c:	cmp	r3, #45	; 0x2d
   2ef80:	bne	2efc8 <__assert_fail@plt+0x1a970>
   2ef84:	ldrb	r3, [r0, #1]
   2ef88:	cmp	r3, #38	; 0x26
   2ef8c:	bne	2efc8 <__assert_fail@plt+0x1a970>
   2ef90:	ldrb	r1, [r0, #2]
   2ef94:	add	r0, r0, #2
   2ef98:	sub	r3, r1, #48	; 0x30
   2ef9c:	cmp	r3, #9
   2efa0:	bhi	2efb8 <__assert_fail@plt+0x1a960>
   2efa4:	mov	r3, r0
   2efa8:	ldrb	r1, [r3, #1]!
   2efac:	sub	r2, r1, #48	; 0x30
   2efb0:	cmp	r2, #9
   2efb4:	bls	2efa8 <__assert_fail@plt+0x1a950>
   2efb8:	cmp	r1, #0
   2efbc:	bne	2efc8 <__assert_fail@plt+0x1a970>
   2efc0:	mov	r2, #10
   2efc4:	b	13a4c <strtol@plt>
   2efc8:	mvn	r0, #0
   2efcc:	bx	lr
   2efd0:	push	{r3, r4, r5, r6, r7, lr}
   2efd4:	subs	r7, r1, #0
   2efd8:	mov	r5, r0
   2efdc:	beq	2f0f4 <__assert_fail@plt+0x1aa9c>
   2efe0:	cmp	r0, #0
   2efe4:	beq	2f064 <__assert_fail@plt+0x1aa0c>
   2efe8:	ldrb	r3, [r0]
   2efec:	cmp	r3, #0
   2eff0:	beq	2f064 <__assert_fail@plt+0x1aa0c>
   2eff4:	movw	r6, #47900	; 0xbb1c
   2eff8:	movt	r6, #5
   2effc:	ldr	r4, [r6, #4]
   2f000:	cmp	r4, #0
   2f004:	bne	2f018 <__assert_fail@plt+0x1a9c0>
   2f008:	b	2f094 <__assert_fail@plt+0x1aa3c>
   2f00c:	ldr	r4, [r4]
   2f010:	cmp	r4, #0
   2f014:	beq	2f094 <__assert_fail@plt+0x1aa3c>
   2f018:	ldr	r3, [r4, #4]
   2f01c:	cmn	r3, #1
   2f020:	bne	2f00c <__assert_fail@plt+0x1a9b4>
   2f024:	add	r0, r4, #8
   2f028:	mov	r1, r5
   2f02c:	bl	13a28 <strcmp@plt>
   2f030:	cmp	r0, #0
   2f034:	bne	2f00c <__assert_fail@plt+0x1a9b4>
   2f038:	movw	r3, #48260	; 0xbc84
   2f03c:	movt	r3, #5
   2f040:	str	r7, [r4, #4]
   2f044:	ldr	r3, [r3]
   2f048:	cmp	r3, #0
   2f04c:	popeq	{r3, r4, r5, r6, r7, pc}
   2f050:	mov	r1, r5
   2f054:	movw	r0, #31828	; 0x7c54
   2f058:	pop	{r3, r4, r5, r6, r7, lr}
   2f05c:	movt	r0, #4
   2f060:	b	3f5b4 <__assert_fail@plt+0x2af5c>
   2f064:	mov	r0, r7
   2f068:	bl	145ec <close@plt>
   2f06c:	movw	r3, #48260	; 0xbc84
   2f070:	movt	r3, #5
   2f074:	ldr	r3, [r3]
   2f078:	cmp	r3, #0
   2f07c:	popeq	{r3, r4, r5, r6, r7, pc}
   2f080:	mov	r1, r7
   2f084:	movw	r0, #31800	; 0x7c38
   2f088:	pop	{r3, r4, r5, r6, r7, lr}
   2f08c:	movt	r0, #4
   2f090:	b	3f5b4 <__assert_fail@plt+0x2af5c>
   2f094:	movw	r3, #48260	; 0xbc84
   2f098:	movt	r3, #5
   2f09c:	ldr	r3, [r3]
   2f0a0:	cmp	r3, #0
   2f0a4:	bne	2f0e0 <__assert_fail@plt+0x1aa88>
   2f0a8:	mov	r0, r5
   2f0ac:	bl	14094 <strlen@plt>
   2f0b0:	add	r1, r0, #12
   2f0b4:	mov	r0, #1
   2f0b8:	bl	14538 <gcry_xcalloc@plt>
   2f0bc:	mov	r1, r5
   2f0c0:	mov	r4, r0
   2f0c4:	add	r0, r0, #8
   2f0c8:	bl	13e78 <strcpy@plt>
   2f0cc:	ldr	r3, [r6, #4]
   2f0d0:	str	r7, [r4, #4]
   2f0d4:	str	r4, [r6, #4]
   2f0d8:	str	r3, [r4]
   2f0dc:	pop	{r3, r4, r5, r6, r7, pc}
   2f0e0:	movw	r0, #31868	; 0x7c7c
   2f0e4:	mov	r1, r5
   2f0e8:	movt	r0, #4
   2f0ec:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f0f0:	b	2f0a8 <__assert_fail@plt+0x1aa50>
   2f0f4:	movw	r0, #31788	; 0x7c2c
   2f0f8:	movw	r1, #31792	; 0x7c30
   2f0fc:	movw	r3, #31564	; 0x7b4c
   2f100:	movt	r0, #4
   2f104:	movt	r1, #4
   2f108:	movw	r2, #371	; 0x173
   2f10c:	movt	r3, #4
   2f110:	bl	14658 <__assert_fail@plt>
   2f114:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f118:	cmp	r1, #3
   2f11c:	ldr	r8, [sp, #32]
   2f120:	mov	r7, r0
   2f124:	mov	r6, r3
   2f128:	ldr	r5, [r0]
   2f12c:	ldr	r4, [r8]
   2f130:	beq	2f160 <__assert_fail@plt+0x1ab08>
   2f134:	cmp	r1, #4
   2f138:	beq	2f1d4 <__assert_fail@plt+0x1ab7c>
   2f13c:	cmp	r1, #1
   2f140:	beq	2f268 <__assert_fail@plt+0x1ac10>
   2f144:	cmp	r1, #5
   2f148:	beq	2f324 <__assert_fail@plt+0x1accc>
   2f14c:	cmp	r1, #2
   2f150:	movne	r5, #0
   2f154:	beq	2f2c8 <__assert_fail@plt+0x1ac70>
   2f158:	mov	r0, r5
   2f15c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f160:	cmp	r4, #0
   2f164:	beq	2f350 <__assert_fail@plt+0x1acf8>
   2f168:	ldr	r3, [r0, #12]
   2f16c:	cmp	r3, #0
   2f170:	movne	r3, #0
   2f174:	mvnne	r5, #0
   2f178:	strne	r3, [r8]
   2f17c:	beq	2f198 <__assert_fail@plt+0x1ab40>
   2f180:	b	2f158 <__assert_fail@plt+0x1ab00>
   2f184:	bl	14148 <__errno_location@plt>
   2f188:	ldr	ip, [r0]
   2f18c:	mov	r9, r0
   2f190:	cmp	ip, #4
   2f194:	bne	2f284 <__assert_fail@plt+0x1ac2c>
   2f198:	mov	r0, r5
   2f19c:	mov	r1, r6
   2f1a0:	mov	r2, r4
   2f1a4:	bl	13ac4 <read@plt>
   2f1a8:	cmn	r0, #1
   2f1ac:	beq	2f184 <__assert_fail@plt+0x1ab2c>
   2f1b0:	cmp	r0, #0
   2f1b4:	bne	2f318 <__assert_fail@plt+0x1acc0>
   2f1b8:	mov	ip, r0
   2f1bc:	mvn	r5, #0
   2f1c0:	mov	r3, #1
   2f1c4:	str	r3, [r7, #12]
   2f1c8:	str	ip, [r8]
   2f1cc:	mov	r0, r5
   2f1d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f1d4:	cmp	r4, #0
   2f1d8:	moveq	r5, r4
   2f1dc:	beq	2f25c <__assert_fail@plt+0x1ac04>
   2f1e0:	mov	r9, r3
   2f1e4:	mov	r0, r5
   2f1e8:	mov	r1, r9
   2f1ec:	mov	r2, r4
   2f1f0:	bl	1422c <write@plt>
   2f1f4:	cmn	r0, #1
   2f1f8:	beq	2f218 <__assert_fail@plt+0x1abc0>
   2f1fc:	cmp	r0, #0
   2f200:	rsbgt	r4, r0, r4
   2f204:	addgt	r9, r9, r0
   2f208:	cmp	r4, #0
   2f20c:	bne	2f1e4 <__assert_fail@plt+0x1ab8c>
   2f210:	mov	r5, r4
   2f214:	b	2f258 <__assert_fail@plt+0x1ac00>
   2f218:	bl	14148 <__errno_location@plt>
   2f21c:	ldr	r3, [r0]
   2f220:	mov	sl, r0
   2f224:	cmp	r3, #4
   2f228:	beq	2f1e4 <__assert_fail@plt+0x1ab8c>
   2f22c:	bl	14580 <gpg_err_code_from_syserror@plt>
   2f230:	cmp	r0, #0
   2f234:	moveq	r5, r0
   2f238:	uxthne	r5, r0
   2f23c:	ldr	r0, [sl]
   2f240:	bl	13fa4 <strerror@plt>
   2f244:	add	r1, r7, #20
   2f248:	mov	r2, r0
   2f24c:	movw	r0, #31928	; 0x7cb8
   2f250:	movt	r0, #4
   2f254:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2f258:	rsb	r4, r6, r9
   2f25c:	str	r4, [r8]
   2f260:	mov	r0, r5
   2f264:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f268:	mov	r3, #0
   2f26c:	str	r3, [r0, #12]
   2f270:	mov	r5, r3
   2f274:	str	r3, [r0, #4]
   2f278:	str	r3, [r0, #8]
   2f27c:	mov	r0, r5
   2f280:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f284:	cmp	ip, #32
   2f288:	moveq	r5, #0
   2f28c:	moveq	ip, r5
   2f290:	beq	2f1c8 <__assert_fail@plt+0x1ab70>
   2f294:	bl	14580 <gpg_err_code_from_syserror@plt>
   2f298:	cmp	r0, #0
   2f29c:	uxthne	r5, r0
   2f2a0:	moveq	r5, r0
   2f2a4:	ldr	r0, [r9]
   2f2a8:	bl	13fa4 <strerror@plt>
   2f2ac:	add	r1, r7, #20
   2f2b0:	mov	r2, r0
   2f2b4:	movw	r0, #31908	; 0x7ca4
   2f2b8:	movt	r0, #4
   2f2bc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2f2c0:	mov	ip, #0
   2f2c4:	b	2f1c8 <__assert_fail@plt+0x1ab70>
   2f2c8:	cmp	r5, #1
   2f2cc:	bls	2f304 <__assert_fail@plt+0x1acac>
   2f2d0:	movw	r3, #48260	; 0xbc84
   2f2d4:	movt	r3, #5
   2f2d8:	ldr	r3, [r3]
   2f2dc:	cmp	r3, #0
   2f2e0:	bne	2f338 <__assert_fail@plt+0x1ace0>
   2f2e4:	ldr	r0, [r7, #4]
   2f2e8:	cmp	r0, #0
   2f2ec:	bne	2f304 <__assert_fail@plt+0x1acac>
   2f2f0:	ldr	r3, [r7, #8]
   2f2f4:	mov	r1, r5
   2f2f8:	cmp	r3, #0
   2f2fc:	addeq	r0, r7, #20
   2f300:	bl	2efd0 <__assert_fail@plt+0x1a978>
   2f304:	mov	r0, r7
   2f308:	mov	r5, #0
   2f30c:	bl	13c44 <gcry_free@plt>
   2f310:	mov	r0, r5
   2f314:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f318:	mov	ip, r0
   2f31c:	mov	r5, #0
   2f320:	b	2f1c8 <__assert_fail@plt+0x1ab70>
   2f324:	movw	r3, #31952	; 0x7cd0
   2f328:	mov	r5, #0
   2f32c:	movt	r3, #4
   2f330:	str	r3, [r6]
   2f334:	b	2f158 <__assert_fail@plt+0x1ab00>
   2f338:	movw	r0, #31968	; 0x7ce0
   2f33c:	add	r1, r7, #20
   2f340:	movt	r0, #4
   2f344:	mov	r2, r5
   2f348:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f34c:	b	2f2e4 <__assert_fail@plt+0x1ac8c>
   2f350:	movw	r0, #33544	; 0x8308
   2f354:	movw	r1, #31792	; 0x7c30
   2f358:	movt	r0, #4
   2f35c:	movt	r1, #4
   2f360:	movw	r2, #549	; 0x225
   2f364:	ldr	r3, [pc]	; 2f36c <__assert_fail@plt+0x1ad14>
   2f368:	bl	14658 <__assert_fail@plt>
   2f36c:	andeq	r7, r4, ip, asr fp
   2f370:	push	{r4, r5, r6, r7, r8, r9, lr}
   2f374:	movw	r9, #47296	; 0xb8c0
   2f378:	movt	r9, #5
   2f37c:	sub	sp, sp, #36	; 0x24
   2f380:	subs	r4, r0, #0
   2f384:	ldr	r3, [r9]
   2f388:	str	r3, [sp, #28]
   2f38c:	beq	2f430 <__assert_fail@plt+0x1add8>
   2f390:	movw	r5, #31244	; 0x7a0c
   2f394:	movw	r7, #30116	; 0x75a4
   2f398:	movt	r5, #4
   2f39c:	movt	r7, #4
   2f3a0:	add	r8, sp, #20
   2f3a4:	mov	r6, #0
   2f3a8:	b	2f408 <__assert_fail@plt+0x1adb0>
   2f3ac:	ldr	r0, [r4, #68]	; 0x44
   2f3b0:	mov	r1, #5
   2f3b4:	mov	r2, #0
   2f3b8:	add	r3, sp, #24
   2f3bc:	str	r8, [sp]
   2f3c0:	blx	ip
   2f3c4:	ldr	r3, [sp, #24]
   2f3c8:	ldr	r1, [r4, #84]	; 0x54
   2f3cc:	cmp	r3, #0
   2f3d0:	ldr	r2, [r4, #88]	; 0x58
   2f3d4:	moveq	r3, r7
   2f3d8:	ldr	ip, [r4, #56]	; 0x38
   2f3dc:	movw	r0, #31988	; 0x7cf4
   2f3e0:	movt	r0, #4
   2f3e4:	str	ip, [sp]
   2f3e8:	ldr	ip, [r4, #44]	; 0x2c
   2f3ec:	str	ip, [sp, #4]
   2f3f0:	ldr	ip, [r4, #48]	; 0x30
   2f3f4:	str	ip, [sp, #8]
   2f3f8:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f3fc:	ldr	r4, [r4, #80]	; 0x50
   2f400:	cmp	r4, #0
   2f404:	beq	2f430 <__assert_fail@plt+0x1add8>
   2f408:	ldr	ip, [r4, #64]	; 0x40
   2f40c:	str	r6, [sp, #20]
   2f410:	cmp	ip, #0
   2f414:	str	r5, [sp, #24]
   2f418:	bne	2f3ac <__assert_fail@plt+0x1ad54>
   2f41c:	movw	r3, #31244	; 0x7a0c
   2f420:	ldr	r1, [r4, #84]	; 0x54
   2f424:	movt	r3, #4
   2f428:	ldr	r2, [r4, #88]	; 0x58
   2f42c:	b	2f3d8 <__assert_fail@plt+0x1ad80>
   2f430:	ldr	r2, [sp, #28]
   2f434:	ldr	r3, [r9]
   2f438:	cmp	r2, r3
   2f43c:	bne	2f448 <__assert_fail@plt+0x1adf0>
   2f440:	add	sp, sp, #36	; 0x24
   2f444:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2f448:	bl	13cec <__stack_chk_fail@plt>
   2f44c:	push	{r4, r5, r6, r7, lr}
   2f450:	movw	r5, #47296	; 0xb8c0
   2f454:	movt	r5, #5
   2f458:	ldr	r1, [r0, #44]	; 0x2c
   2f45c:	ldr	r2, [r0, #48]	; 0x30
   2f460:	sub	sp, sp, #28
   2f464:	ldr	r3, [r5]
   2f468:	mov	r4, r0
   2f46c:	cmp	r1, r2
   2f470:	str	r3, [sp, #20]
   2f474:	bne	2f808 <__assert_fail@plt+0x1b1b0>
   2f478:	ldr	r3, [r0]
   2f47c:	cmp	r3, #3
   2f480:	beq	2f50c <__assert_fail@plt+0x1aeb4>
   2f484:	ldr	r3, [r0, #56]	; 0x38
   2f488:	cmp	r3, #0
   2f48c:	beq	2f528 <__assert_fail@plt+0x1aed0>
   2f490:	ldr	r7, [r0, #80]	; 0x50
   2f494:	movw	r6, #48260	; 0xbc84
   2f498:	movt	r6, #5
   2f49c:	cmp	r7, #0
   2f4a0:	beq	2f604 <__assert_fail@plt+0x1afac>
   2f4a4:	ldr	r3, [r6]
   2f4a8:	cmp	r3, #0
   2f4ac:	beq	2f4d8 <__assert_fail@plt+0x1ae80>
   2f4b0:	ldr	r3, [r0, #92]	; 0x5c
   2f4b4:	movw	r2, #30116	; 0x75a4
   2f4b8:	movt	r2, #4
   2f4bc:	movw	r0, #32068	; 0x7d44
   2f4c0:	cmp	r3, #0
   2f4c4:	movt	r0, #4
   2f4c8:	ldr	r1, [r4, #84]	; 0x54
   2f4cc:	moveq	r3, r2
   2f4d0:	ldr	r2, [r4, #88]	; 0x58
   2f4d4:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f4d8:	ldr	r0, [r4, #52]	; 0x34
   2f4dc:	bl	13c44 <gcry_free@plt>
   2f4e0:	ldr	r0, [r4, #76]	; 0x4c
   2f4e4:	bl	13c44 <gcry_free@plt>
   2f4e8:	mov	r1, r7
   2f4ec:	mov	r2, #104	; 0x68
   2f4f0:	mov	r0, r4
   2f4f4:	bl	13ba8 <memcpy@plt>
   2f4f8:	mov	r0, r7
   2f4fc:	bl	13c44 <gcry_free@plt>
   2f500:	ldr	r3, [r6]
   2f504:	cmp	r3, #0
   2f508:	bne	2f5bc <__assert_fail@plt+0x1af64>
   2f50c:	mvn	r0, #0
   2f510:	ldr	r2, [sp, #20]
   2f514:	ldr	r3, [r5]
   2f518:	cmp	r2, r3
   2f51c:	bne	2f804 <__assert_fail@plt+0x1b1ac>
   2f520:	add	sp, sp, #28
   2f524:	pop	{r4, r5, r6, r7, pc}
   2f528:	ldr	r6, [r0, #60]	; 0x3c
   2f52c:	cmp	r6, #0
   2f530:	beq	2f564 <__assert_fail@plt+0x1af0c>
   2f534:	movw	r3, #48260	; 0xbc84
   2f538:	movt	r3, #5
   2f53c:	ldr	r3, [r3]
   2f540:	cmp	r3, #0
   2f544:	beq	2f50c <__assert_fail@plt+0x1aeb4>
   2f548:	movw	r0, #32156	; 0x7d9c
   2f54c:	ldr	r1, [r4, #84]	; 0x54
   2f550:	movt	r0, #4
   2f554:	ldr	r2, [r4, #88]	; 0x58
   2f558:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f55c:	mvn	r0, #0
   2f560:	b	2f510 <__assert_fail@plt+0x1aeb8>
   2f564:	ldr	r7, [r0, #36]	; 0x24
   2f568:	cmp	r7, #0
   2f56c:	beq	2f624 <__assert_fail@plt+0x1afcc>
   2f570:	mov	r3, r7
   2f574:	ldr	r0, [r0, #52]	; 0x34
   2f578:	mov	r1, #1
   2f57c:	ldr	r2, [r4, #40]	; 0x28
   2f580:	bl	13e9c <fread@plt>
   2f584:	ldr	r3, [r4, #40]	; 0x28
   2f588:	cmp	r3, r0
   2f58c:	str	r0, [sp, #12]
   2f590:	bhi	2f5ec <__assert_fail@plt+0x1af94>
   2f594:	cmp	r0, #0
   2f598:	mov	r3, #0
   2f59c:	str	r0, [r4, #48]	; 0x30
   2f5a0:	str	r3, [r4, #44]	; 0x2c
   2f5a4:	beq	2f50c <__assert_fail@plt+0x1aeb4>
   2f5a8:	ldr	r3, [r4, #52]	; 0x34
   2f5ac:	mov	r2, #1
   2f5b0:	str	r2, [r4, #44]	; 0x2c
   2f5b4:	ldrb	r0, [r3]
   2f5b8:	b	2f510 <__assert_fail@plt+0x1aeb8>
   2f5bc:	mov	r0, r4
   2f5c0:	bl	2f370 <__assert_fail@plt+0x1ad18>
   2f5c4:	ldr	r3, [r6]
   2f5c8:	cmp	r3, #0
   2f5cc:	beq	2f50c <__assert_fail@plt+0x1aeb4>
   2f5d0:	movw	r0, #32104	; 0x7d68
   2f5d4:	ldr	r1, [r4, #84]	; 0x54
   2f5d8:	movt	r0, #4
   2f5dc:	ldr	r2, [r4, #88]	; 0x58
   2f5e0:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f5e4:	mvn	r0, #0
   2f5e8:	b	2f510 <__assert_fail@plt+0x1aeb8>
   2f5ec:	mov	r0, r7
   2f5f0:	bl	13b84 <ferror@plt>
   2f5f4:	cmp	r0, #0
   2f5f8:	bne	2f60c <__assert_fail@plt+0x1afb4>
   2f5fc:	ldr	r0, [sp, #12]
   2f600:	b	2f594 <__assert_fail@plt+0x1af3c>
   2f604:	str	r7, [r0, #56]	; 0x38
   2f608:	b	2f5c4 <__assert_fail@plt+0x1af6c>
   2f60c:	bl	14580 <gpg_err_code_from_syserror@plt>
   2f610:	cmp	r0, #0
   2f614:	uxthne	r6, r0
   2f618:	ldr	r0, [sp, #12]
   2f61c:	str	r6, [r4, #60]	; 0x3c
   2f620:	b	2f594 <__assert_fail@plt+0x1af3c>
   2f624:	ldr	ip, [r0, #64]	; 0x40
   2f628:	cmp	ip, #0
   2f62c:	beq	2f7d8 <__assert_fail@plt+0x1b180>
   2f630:	movw	r6, #48260	; 0xbc84
   2f634:	movt	r6, #5
   2f638:	ldr	r3, [r0, #40]	; 0x28
   2f63c:	ldr	r2, [r6]
   2f640:	cmp	r2, #0
   2f644:	str	r3, [sp, #12]
   2f648:	bne	2f6f8 <__assert_fail@plt+0x1b0a0>
   2f64c:	ldr	r3, [r4, #52]	; 0x34
   2f650:	add	lr, sp, #12
   2f654:	ldr	r0, [r4, #68]	; 0x44
   2f658:	mov	r1, #3
   2f65c:	ldr	r2, [r4, #80]	; 0x50
   2f660:	str	lr, [sp]
   2f664:	blx	ip
   2f668:	ldr	r3, [r6]
   2f66c:	cmp	r3, #0
   2f670:	mov	r7, r0
   2f674:	bne	2f6d8 <__assert_fail@plt+0x1b080>
   2f678:	ldr	r3, [r4]
   2f67c:	cmp	r3, #1
   2f680:	beq	2f714 <__assert_fail@plt+0x1b0bc>
   2f684:	ldr	r3, [sp, #12]
   2f688:	cmp	r7, #0
   2f68c:	strne	r7, [r4, #60]	; 0x3c
   2f690:	cmp	r3, #0
   2f694:	bne	2f6c0 <__assert_fail@plt+0x1b068>
   2f698:	ldr	r3, [r6]
   2f69c:	cmp	r3, #0
   2f6a0:	beq	2f50c <__assert_fail@plt+0x1aeb4>
   2f6a4:	movw	r0, #32320	; 0x7e40
   2f6a8:	ldr	r1, [r4, #84]	; 0x54
   2f6ac:	movt	r0, #4
   2f6b0:	ldr	r2, [r4, #88]	; 0x58
   2f6b4:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f6b8:	mvn	r0, #0
   2f6bc:	b	2f510 <__assert_fail@plt+0x1aeb8>
   2f6c0:	ldr	r2, [r4, #52]	; 0x34
   2f6c4:	mov	r1, #1
   2f6c8:	str	r3, [r4, #48]	; 0x30
   2f6cc:	str	r1, [r4, #44]	; 0x2c
   2f6d0:	ldrb	r0, [r2]
   2f6d4:	b	2f510 <__assert_fail@plt+0x1aeb8>
   2f6d8:	ldr	r1, [r4, #84]	; 0x54
   2f6dc:	movw	r0, #32212	; 0x7dd4
   2f6e0:	ldr	r2, [r4, #88]	; 0x58
   2f6e4:	movt	r0, #4
   2f6e8:	ldr	r3, [sp, #12]
   2f6ec:	str	r7, [sp]
   2f6f0:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f6f4:	b	2f678 <__assert_fail@plt+0x1b020>
   2f6f8:	movw	r0, #32176	; 0x7db0
   2f6fc:	ldr	r1, [r4, #84]	; 0x54
   2f700:	movt	r0, #4
   2f704:	ldr	r2, [r4, #88]	; 0x58
   2f708:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f70c:	ldr	ip, [r4, #64]	; 0x40
   2f710:	b	2f64c <__assert_fail@plt+0x1aff4>
   2f714:	cmn	r7, #1
   2f718:	bne	2f684 <__assert_fail@plt+0x1b02c>
   2f71c:	add	r1, sp, #24
   2f720:	ldr	r0, [r4, #68]	; 0x44
   2f724:	mov	r3, #0
   2f728:	ldr	r2, [r4, #80]	; 0x50
   2f72c:	str	r3, [r1, #-8]!
   2f730:	str	r1, [sp]
   2f734:	mov	r1, #2
   2f738:	ldr	ip, [r4, #64]	; 0x40
   2f73c:	blx	ip
   2f740:	cmp	r0, #0
   2f744:	bne	2f824 <__assert_fail@plt+0x1b1cc>
   2f748:	ldr	r0, [r4, #68]	; 0x44
   2f74c:	cmp	r0, #0
   2f750:	beq	2f760 <__assert_fail@plt+0x1b108>
   2f754:	ldr	r3, [r4, #72]	; 0x48
   2f758:	cmp	r3, #0
   2f75c:	bne	2f83c <__assert_fail@plt+0x1b1e4>
   2f760:	ldr	r3, [sp, #12]
   2f764:	mov	r2, #0
   2f768:	mov	r1, #1
   2f76c:	str	r2, [r4, #64]	; 0x40
   2f770:	cmp	r3, r2
   2f774:	str	r2, [r4, #92]	; 0x5c
   2f778:	str	r2, [r4, #68]	; 0x44
   2f77c:	str	r1, [r4, #56]	; 0x38
   2f780:	bne	2f690 <__assert_fail@plt+0x1b038>
   2f784:	ldr	r7, [r4, #80]	; 0x50
   2f788:	cmp	r7, r2
   2f78c:	beq	2f698 <__assert_fail@plt+0x1b040>
   2f790:	ldr	r3, [r6]
   2f794:	cmp	r3, r2
   2f798:	bne	2f850 <__assert_fail@plt+0x1b1f8>
   2f79c:	ldr	r0, [r4, #52]	; 0x34
   2f7a0:	bl	13c44 <gcry_free@plt>
   2f7a4:	ldr	r0, [r4, #76]	; 0x4c
   2f7a8:	bl	13c44 <gcry_free@plt>
   2f7ac:	mov	r1, r7
   2f7b0:	mov	r2, #104	; 0x68
   2f7b4:	mov	r0, r4
   2f7b8:	bl	13ba8 <memcpy@plt>
   2f7bc:	mov	r0, r7
   2f7c0:	bl	13c44 <gcry_free@plt>
   2f7c4:	ldr	r3, [r6]
   2f7c8:	cmp	r3, #0
   2f7cc:	bne	2f844 <__assert_fail@plt+0x1b1ec>
   2f7d0:	ldr	r3, [sp, #12]
   2f7d4:	b	2f690 <__assert_fail@plt+0x1b038>
   2f7d8:	movw	r3, #48260	; 0xbc84
   2f7dc:	movt	r3, #5
   2f7e0:	ldr	r3, [r3]
   2f7e4:	cmp	r3, #0
   2f7e8:	beq	2f50c <__assert_fail@plt+0x1aeb4>
   2f7ec:	movw	r0, #32352	; 0x7e60
   2f7f0:	ldr	r1, [r4, #84]	; 0x54
   2f7f4:	movt	r0, #4
   2f7f8:	ldr	r2, [r4, #88]	; 0x58
   2f7fc:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f800:	b	2f50c <__assert_fail@plt+0x1aeb4>
   2f804:	bl	13cec <__stack_chk_fail@plt>
   2f808:	movw	r0, #32044	; 0x7d2c
   2f80c:	movw	r1, #31792	; 0x7c30
   2f810:	movt	r0, #4
   2f814:	movt	r1, #4
   2f818:	movw	r2, #1785	; 0x6f9
   2f81c:	ldr	r3, [pc, #68]	; 2f868 <__assert_fail@plt+0x1b210>
   2f820:	bl	14658 <__assert_fail@plt>
   2f824:	bl	13a64 <gpg_strerror@plt>
   2f828:	mov	r1, r0
   2f82c:	movw	r0, #32252	; 0x7dfc
   2f830:	movt	r0, #4
   2f834:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   2f838:	b	2f748 <__assert_fail@plt+0x1b0f0>
   2f83c:	bl	13c44 <gcry_free@plt>
   2f840:	b	2f760 <__assert_fail@plt+0x1b108>
   2f844:	mov	r0, r4
   2f848:	bl	2f370 <__assert_fail@plt+0x1ad18>
   2f84c:	b	2f7d0 <__assert_fail@plt+0x1b178>
   2f850:	movw	r0, #32280	; 0x7e18
   2f854:	ldr	r1, [r4, #84]	; 0x54
   2f858:	movt	r0, #4
   2f85c:	ldr	r2, [r4, #88]	; 0x58
   2f860:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f864:	b	2f79c <__assert_fail@plt+0x1b144>
   2f868:	andeq	r7, r4, r8, ror #22
   2f86c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   2f870:	subs	r7, r0, #0
   2f874:	beq	2f930 <__assert_fail@plt+0x1b2d8>
   2f878:	movw	r8, #48260	; 0xbc84
   2f87c:	movt	r8, #5
   2f880:	ldr	r3, [r8]
   2f884:	cmp	r3, #0
   2f888:	bne	2f91c <__assert_fail@plt+0x1b2c4>
   2f88c:	movw	r3, #47900	; 0xbb1c
   2f890:	movt	r3, #5
   2f894:	ldr	r4, [r3, #4]
   2f898:	cmp	r4, #0
   2f89c:	beq	2f910 <__assert_fail@plt+0x1b2b8>
   2f8a0:	mov	sl, #0
   2f8a4:	mvn	r9, #0
   2f8a8:	b	2f8c4 <__assert_fail@plt+0x1b26c>
   2f8ac:	bl	145ec <close@plt>
   2f8b0:	str	r9, [r4, #4]
   2f8b4:	mov	sl, r0
   2f8b8:	ldr	r4, [r4]
   2f8bc:	cmp	r4, #0
   2f8c0:	beq	2f914 <__assert_fail@plt+0x1b2bc>
   2f8c4:	ldr	r5, [r4, #4]
   2f8c8:	cmn	r5, #1
   2f8cc:	beq	2f8b8 <__assert_fail@plt+0x1b260>
   2f8d0:	add	r6, r4, #8
   2f8d4:	mov	r1, r7
   2f8d8:	mov	r0, r6
   2f8dc:	bl	13a28 <strcmp@plt>
   2f8e0:	cmp	r0, #0
   2f8e4:	bne	2f8b8 <__assert_fail@plt+0x1b260>
   2f8e8:	ldr	r3, [r8]
   2f8ec:	cmp	r3, #0
   2f8f0:	moveq	r0, r5
   2f8f4:	beq	2f8ac <__assert_fail@plt+0x1b254>
   2f8f8:	mov	r1, r6
   2f8fc:	movw	r0, #32432	; 0x7eb0
   2f900:	movt	r0, #4
   2f904:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f908:	ldr	r0, [r4, #4]
   2f90c:	b	2f8ac <__assert_fail@plt+0x1b254>
   2f910:	mov	sl, r4
   2f914:	mov	r0, sl
   2f918:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   2f91c:	movw	r0, #32404	; 0x7e94
   2f920:	mov	r1, r7
   2f924:	movt	r0, #4
   2f928:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2f92c:	b	2f88c <__assert_fail@plt+0x1b234>
   2f930:	movw	r0, #32396	; 0x7e8c
   2f934:	movw	r1, #31792	; 0x7c30
   2f938:	movt	r0, #4
   2f93c:	movt	r1, #4
   2f940:	mov	r2, #225	; 0xe1
   2f944:	ldr	r3, [pc]	; 2f94c <__assert_fail@plt+0x1b2f4>
   2f948:	bl	14658 <__assert_fail@plt>
   2f94c:	andeq	r7, r4, r4, ror fp
   2f950:	push	{r3, r4, r5, lr}
   2f954:	mov	r5, r1
   2f958:	mov	r4, r0
   2f95c:	mov	r1, #43	; 0x2b
   2f960:	mov	r0, r5
   2f964:	bl	140ac <strchr@plt>
   2f968:	cmp	r0, #0
   2f96c:	beq	2f994 <__assert_fail@plt+0x1b33c>
   2f970:	mov	r0, r4
   2f974:	bl	2f86c <__assert_fail@plt+0x1b214>
   2f978:	cmp	r0, #0
   2f97c:	moveq	r1, #2
   2f980:	bne	2f9d4 <__assert_fail@plt+0x1b37c>
   2f984:	mov	r0, r4
   2f988:	movw	r2, #438	; 0x1b6
   2f98c:	pop	{r3, r4, r5, lr}
   2f990:	b	13efc <open64@plt>
   2f994:	mov	r0, r5
   2f998:	mov	r1, #119	; 0x77
   2f99c:	bl	140ac <strchr@plt>
   2f9a0:	cmp	r0, #0
   2f9a4:	beq	2f9cc <__assert_fail@plt+0x1b374>
   2f9a8:	mov	r0, r4
   2f9ac:	bl	2f86c <__assert_fail@plt+0x1b214>
   2f9b0:	cmp	r0, #0
   2f9b4:	bne	2f9d4 <__assert_fail@plt+0x1b37c>
   2f9b8:	mov	r0, r4
   2f9bc:	movw	r1, #577	; 0x241
   2f9c0:	movw	r2, #438	; 0x1b6
   2f9c4:	pop	{r3, r4, r5, lr}
   2f9c8:	b	13efc <open64@plt>
   2f9cc:	mov	r1, r0
   2f9d0:	b	2f984 <__assert_fail@plt+0x1b32c>
   2f9d4:	mvn	r0, #0
   2f9d8:	pop	{r3, r4, r5, pc}
   2f9dc:	push	{r3, lr}
   2f9e0:	movw	r3, #48260	; 0xbc84
   2f9e4:	movt	r3, #5
   2f9e8:	ldr	r3, [r3]
   2f9ec:	cmp	r3, #0
   2f9f0:	beq	2f9f8 <__assert_fail@plt+0x1b3a0>
   2f9f4:	bl	2f370 <__assert_fail@plt+0x1ad18>
   2f9f8:	mov	r0, #0
   2f9fc:	pop	{r3, pc}
   2fa00:	push	{r4, r5, r6, lr}
   2fa04:	mov	r5, r1
   2fa08:	mov	r6, r0
   2fa0c:	mov	r1, #104	; 0x68
   2fa10:	mov	r0, #1
   2fa14:	bl	14538 <gcry_xcalloc@plt>
   2fa18:	mov	r4, r0
   2fa1c:	mov	r0, r5
   2fa20:	str	r6, [r4]
   2fa24:	bl	1398c <gcry_xmalloc@plt>
   2fa28:	movw	r3, #47900	; 0xbb1c
   2fa2c:	movt	r3, #5
   2fa30:	mov	r2, #0
   2fa34:	str	r5, [r4, #40]	; 0x28
   2fa38:	ldr	r1, [r3, #8]
   2fa3c:	str	r2, [r4, #88]	; 0x58
   2fa40:	add	r1, r1, #1
   2fa44:	str	r2, [r4, #96]	; 0x60
   2fa48:	str	r2, [r4, #76]	; 0x4c
   2fa4c:	str	r1, [r3, #8]
   2fa50:	str	r1, [r4, #84]	; 0x54
   2fa54:	str	r0, [r4, #52]	; 0x34
   2fa58:	mov	r0, r4
   2fa5c:	pop	{r4, r5, r6, pc}
   2fa60:	mov	r0, #3
   2fa64:	mov	r1, #8192	; 0x2000
   2fa68:	b	2fa00 <__assert_fail@plt+0x1b3a8>
   2fa6c:	push	{r4, r5, r6, lr}
   2fa70:	mov	r6, r0
   2fa74:	mov	r0, #3
   2fa78:	mov	r5, r1
   2fa7c:	bl	2fa00 <__assert_fail@plt+0x1b3a8>
   2fa80:	mov	r1, r6
   2fa84:	mov	r2, r5
   2fa88:	mov	r4, r0
   2fa8c:	ldr	r0, [r0, #52]	; 0x34
   2fa90:	bl	13ba8 <memcpy@plt>
   2fa94:	str	r5, [r4, #48]	; 0x30
   2fa98:	mov	r0, r4
   2fa9c:	pop	{r4, r5, r6, pc}
   2faa0:	movw	r3, #47900	; 0xbb1c
   2faa4:	movt	r3, #5
   2faa8:	str	r0, [r3]
   2faac:	bx	lr
   2fab0:	cmp	r0, #0
   2fab4:	push	{r3, lr}
   2fab8:	beq	2fae4 <__assert_fail@plt+0x1b48c>
   2fabc:	ldrb	r3, [r0]
   2fac0:	cmp	r3, #45	; 0x2d
   2fac4:	beq	2fad8 <__assert_fail@plt+0x1b480>
   2fac8:	bl	2ef5c <__assert_fail@plt+0x1a904>
   2facc:	adds	r0, r0, #1
   2fad0:	movne	r0, #1
   2fad4:	pop	{r3, pc}
   2fad8:	ldrb	r3, [r0, #1]
   2fadc:	cmp	r3, #0
   2fae0:	bne	2fac8 <__assert_fail@plt+0x1b470>
   2fae4:	mov	r0, #1
   2fae8:	pop	{r3, pc}
   2faec:	push	{r3, r4, r5, r6, r7, lr}
   2faf0:	subs	r6, r0, #0
   2faf4:	beq	2fbb0 <__assert_fail@plt+0x1b558>
   2faf8:	movw	r1, #19340	; 0x4b8c
   2fafc:	movt	r1, #4
   2fb00:	bl	2f950 <__assert_fail@plt+0x1b2f8>
   2fb04:	cmn	r0, #1
   2fb08:	mov	r7, r0
   2fb0c:	beq	2fbb0 <__assert_fail@plt+0x1b558>
   2fb10:	mov	r1, #8192	; 0x2000
   2fb14:	mov	r0, #2
   2fb18:	bl	2fa00 <__assert_fail@plt+0x1b3a8>
   2fb1c:	mov	r4, r0
   2fb20:	mov	r0, r6
   2fb24:	bl	14094 <strlen@plt>
   2fb28:	add	r0, r0, #24
   2fb2c:	bl	1398c <gcry_xmalloc@plt>
   2fb30:	mov	r1, r6
   2fb34:	mov	r5, r0
   2fb38:	str	r7, [r0], #20
   2fb3c:	bl	13e78 <strcpy@plt>
   2fb40:	mov	r0, r6
   2fb44:	bl	141f0 <gcry_xstrdup@plt>
   2fb48:	movw	r1, #48260	; 0xbc84
   2fb4c:	movt	r1, #5
   2fb50:	str	r5, [r4, #68]	; 0x44
   2fb54:	movw	r2, #61716	; 0xf114
   2fb58:	movw	r3, #31952	; 0x7cd0
   2fb5c:	ldr	r1, [r1]
   2fb60:	movt	r2, #2
   2fb64:	movt	r3, #4
   2fb68:	str	r2, [r4, #64]	; 0x40
   2fb6c:	cmp	r1, #0
   2fb70:	str	r3, [r4, #92]	; 0x5c
   2fb74:	mov	r2, #0
   2fb78:	str	r0, [r4, #76]	; 0x4c
   2fb7c:	str	r2, [r5, #12]
   2fb80:	str	r2, [r5, #4]
   2fb84:	str	r2, [r5, #8]
   2fb88:	beq	2fba8 <__assert_fail@plt+0x1b550>
   2fb8c:	ldr	r1, [r4, #84]	; 0x54
   2fb90:	movw	r0, #32460	; 0x7ecc
   2fb94:	ldr	r2, [r4, #88]	; 0x58
   2fb98:	movt	r0, #4
   2fb9c:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2fba0:	mov	r0, r4
   2fba4:	pop	{r3, r4, r5, r6, r7, pc}
   2fba8:	mov	r0, r4
   2fbac:	pop	{r3, r4, r5, r6, r7, pc}
   2fbb0:	mov	r0, #0
   2fbb4:	pop	{r3, r4, r5, r6, r7, pc}
   2fbb8:	cmp	r1, #1
   2fbbc:	push	{r4, r5, r6, r7, r8, r9, lr}
   2fbc0:	mov	r4, r0
   2fbc4:	sub	sp, sp, #12
   2fbc8:	mov	r5, r2
   2fbcc:	mov	r7, r3
   2fbd0:	beq	2fc9c <__assert_fail@plt+0x1b644>
   2fbd4:	cmp	r1, #2
   2fbd8:	beq	2fd38 <__assert_fail@plt+0x1b6e0>
   2fbdc:	cmp	r1, #3
   2fbe0:	beq	2fdb4 <__assert_fail@plt+0x1b75c>
   2fbe4:	cmp	r1, #4
   2fbe8:	bne	2fd1c <__assert_fail@plt+0x1b6c4>
   2fbec:	movw	r8, #48260	; 0xbc84
   2fbf0:	movt	r8, #5
   2fbf4:	ldr	r3, [r8]
   2fbf8:	cmp	r3, #0
   2fbfc:	bne	2fd94 <__assert_fail@plt+0x1b73c>
   2fc00:	cmp	r4, #0
   2fc04:	cmpeq	r5, #0
   2fc08:	bne	2fd1c <__assert_fail@plt+0x1b6c4>
   2fc0c:	cmp	r7, #0
   2fc10:	beq	2fd1c <__assert_fail@plt+0x1b6c4>
   2fc14:	ldr	r3, [r8]
   2fc18:	cmp	r3, #0
   2fc1c:	bne	2fe38 <__assert_fail@plt+0x1b7e0>
   2fc20:	movw	r3, #47900	; 0xbb1c
   2fc24:	movt	r3, #5
   2fc28:	ldr	r4, [r3, #4]
   2fc2c:	cmp	r4, #0
   2fc30:	beq	2fd28 <__assert_fail@plt+0x1b6d0>
   2fc34:	mov	r9, #0
   2fc38:	b	2fc50 <__assert_fail@plt+0x1b5f8>
   2fc3c:	bl	139f8 <fsync@plt>
   2fc40:	mov	r9, r0
   2fc44:	ldr	r4, [r4]
   2fc48:	cmp	r4, #0
   2fc4c:	beq	2fd2c <__assert_fail@plt+0x1b6d4>
   2fc50:	ldr	r5, [r4, #4]
   2fc54:	add	r6, r4, #8
   2fc58:	mov	r1, r7
   2fc5c:	cmn	r5, #1
   2fc60:	mov	r0, r6
   2fc64:	beq	2fc44 <__assert_fail@plt+0x1b5ec>
   2fc68:	bl	13a28 <strcmp@plt>
   2fc6c:	cmp	r0, #0
   2fc70:	bne	2fc44 <__assert_fail@plt+0x1b5ec>
   2fc74:	ldr	r3, [r8]
   2fc78:	mov	r0, r5
   2fc7c:	cmp	r3, #0
   2fc80:	beq	2fc3c <__assert_fail@plt+0x1b5e4>
   2fc84:	mov	r1, r6
   2fc88:	movw	r0, #32668	; 0x7f9c
   2fc8c:	movt	r0, #4
   2fc90:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2fc94:	ldr	r0, [r4, #4]
   2fc98:	b	2fc3c <__assert_fail@plt+0x1b5e4>
   2fc9c:	movw	r3, #48260	; 0xbc84
   2fca0:	movt	r3, #5
   2fca4:	ldr	r3, [r3]
   2fca8:	cmp	r3, #0
   2fcac:	beq	2fce4 <__assert_fail@plt+0x1b68c>
   2fcb0:	cmp	r0, #0
   2fcb4:	beq	2fe4c <__assert_fail@plt+0x1b7f4>
   2fcb8:	ldr	r3, [r0, #92]	; 0x5c
   2fcbc:	movw	r2, #30116	; 0x75a4
   2fcc0:	movt	r2, #4
   2fcc4:	ldr	r1, [r0, #84]	; 0x54
   2fcc8:	cmp	r3, #0
   2fccc:	moveq	r3, r2
   2fcd0:	ldr	r2, [r0, #88]	; 0x58
   2fcd4:	movw	r0, #32496	; 0x7ef0
   2fcd8:	str	r5, [sp]
   2fcdc:	movt	r0, #4
   2fce0:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2fce4:	cmp	r4, #0
   2fce8:	bne	2fcf4 <__assert_fail@plt+0x1b69c>
   2fcec:	b	2fd1c <__assert_fail@plt+0x1b6c4>
   2fcf0:	mov	r4, r0
   2fcf4:	ldr	r0, [r4, #80]	; 0x50
   2fcf8:	cmp	r0, #0
   2fcfc:	bne	2fcf0 <__assert_fail@plt+0x1b698>
   2fd00:	ldr	r2, [r4, #64]	; 0x40
   2fd04:	movw	r3, #61716	; 0xf114
   2fd08:	movt	r3, #2
   2fd0c:	cmp	r2, r3
   2fd10:	ldreq	r3, [r4, #68]	; 0x44
   2fd14:	streq	r5, [r3, #4]
   2fd18:	beq	2fd20 <__assert_fail@plt+0x1b6c8>
   2fd1c:	mvn	r0, #0
   2fd20:	add	sp, sp, #12
   2fd24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2fd28:	mov	r9, r4
   2fd2c:	mov	r0, r9
   2fd30:	add	sp, sp, #12
   2fd34:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2fd38:	movw	r3, #48260	; 0xbc84
   2fd3c:	movt	r3, #5
   2fd40:	ldr	r3, [r3]
   2fd44:	cmp	r3, #0
   2fd48:	beq	2fd68 <__assert_fail@plt+0x1b710>
   2fd4c:	cmp	r7, #0
   2fd50:	movw	r1, #30116	; 0x75a4
   2fd54:	movw	r0, #32532	; 0x7f14
   2fd58:	movt	r1, #4
   2fd5c:	movt	r0, #4
   2fd60:	movne	r1, r7
   2fd64:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2fd68:	cmp	r4, #0
   2fd6c:	cmpeq	r5, #0
   2fd70:	bne	2fd1c <__assert_fail@plt+0x1b6c4>
   2fd74:	cmp	r7, #0
   2fd78:	beq	2fd1c <__assert_fail@plt+0x1b6c4>
   2fd7c:	mov	r0, r7
   2fd80:	bl	2f86c <__assert_fail@plt+0x1b214>
   2fd84:	subs	r0, r0, #0
   2fd88:	mvnne	r0, #0
   2fd8c:	add	sp, sp, #12
   2fd90:	pop	{r4, r5, r6, r7, r8, r9, pc}
   2fd94:	cmp	r7, #0
   2fd98:	movw	r1, #32488	; 0x7ee8
   2fd9c:	movw	r0, #32608	; 0x7f60
   2fda0:	movt	r1, #4
   2fda4:	movt	r0, #4
   2fda8:	movne	r1, r7
   2fdac:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2fdb0:	b	2fc00 <__assert_fail@plt+0x1b5a8>
   2fdb4:	movw	r3, #48260	; 0xbc84
   2fdb8:	movt	r3, #5
   2fdbc:	ldr	r3, [r3]
   2fdc0:	cmp	r3, #0
   2fdc4:	beq	2fdfc <__assert_fail@plt+0x1b7a4>
   2fdc8:	cmp	r0, #0
   2fdcc:	beq	2fe60 <__assert_fail@plt+0x1b808>
   2fdd0:	ldr	r2, [r0, #92]	; 0x5c
   2fdd4:	movw	r3, #30116	; 0x75a4
   2fdd8:	ldr	r1, [r0, #84]	; 0x54
   2fddc:	movt	r3, #4
   2fde0:	cmp	r2, #0
   2fde4:	movne	r3, r2
   2fde8:	ldr	r2, [r0, #88]	; 0x58
   2fdec:	movw	r0, #32568	; 0x7f38
   2fdf0:	str	r5, [sp]
   2fdf4:	movt	r0, #4
   2fdf8:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2fdfc:	cmp	r4, #0
   2fe00:	bne	2fe0c <__assert_fail@plt+0x1b7b4>
   2fe04:	b	2fd1c <__assert_fail@plt+0x1b6c4>
   2fe08:	mov	r4, r0
   2fe0c:	ldr	r0, [r4, #80]	; 0x50
   2fe10:	cmp	r0, #0
   2fe14:	bne	2fe08 <__assert_fail@plt+0x1b7b0>
   2fe18:	ldr	r2, [r4, #64]	; 0x40
   2fe1c:	movw	r3, #61716	; 0xf114
   2fe20:	movt	r3, #2
   2fe24:	cmp	r2, r3
   2fe28:	ldreq	r3, [r4, #68]	; 0x44
   2fe2c:	streq	r5, [r3, #8]
   2fe30:	bne	2fd1c <__assert_fail@plt+0x1b6c4>
   2fe34:	b	2fd20 <__assert_fail@plt+0x1b6c8>
   2fe38:	movw	r0, #32640	; 0x7f80
   2fe3c:	mov	r1, r7
   2fe40:	movt	r0, #4
   2fe44:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2fe48:	b	2fc20 <__assert_fail@plt+0x1b5c8>
   2fe4c:	mvn	r2, #0
   2fe50:	movw	r3, #30116	; 0x75a4
   2fe54:	mov	r1, r2
   2fe58:	movt	r3, #4
   2fe5c:	b	2fcd4 <__assert_fail@plt+0x1b67c>
   2fe60:	mvn	r2, #0
   2fe64:	movw	r3, #30116	; 0x75a4
   2fe68:	mov	r1, r2
   2fe6c:	movt	r3, #4
   2fe70:	b	2fdec <__assert_fail@plt+0x1b794>
   2fe74:	push	{r4, r5, r6, r7, lr}
   2fe78:	mov	r6, r0
   2fe7c:	sub	sp, sp, #12
   2fe80:	mov	r0, r1
   2fe84:	mov	r1, #119	; 0x77
   2fe88:	bl	140ac <strchr@plt>
   2fe8c:	mov	r1, #8192	; 0x2000
   2fe90:	cmp	r0, #0
   2fe94:	moveq	r0, #1
   2fe98:	movne	r0, #2
   2fe9c:	bl	2fa00 <__assert_fail@plt+0x1b3a8>
   2fea0:	mov	r5, r0
   2fea4:	mov	r0, #44	; 0x2c
   2fea8:	bl	1398c <gcry_xmalloc@plt>
   2feac:	mov	ip, #1
   2feb0:	mov	r1, ip
   2feb4:	mvn	r2, #0
   2feb8:	str	r6, [sp]
   2febc:	movw	r3, #32696	; 0x7fb8
   2fec0:	movt	r3, #4
   2fec4:	add	r7, r0, #20
   2fec8:	mov	r4, r0
   2fecc:	str	r6, [r4]
   2fed0:	mov	r0, r7
   2fed4:	str	ip, [r4, #16]
   2fed8:	bl	14178 <__sprintf_chk@plt>
   2fedc:	movw	r1, #48260	; 0xbc84
   2fee0:	movt	r1, #5
   2fee4:	str	r4, [r5, #68]	; 0x44
   2fee8:	movw	r2, #61716	; 0xf114
   2feec:	movt	r2, #2
   2fef0:	ldr	r3, [r1]
   2fef4:	movw	r1, #31952	; 0x7cd0
   2fef8:	str	r2, [r5, #64]	; 0x40
   2fefc:	movt	r1, #4
   2ff00:	cmp	r3, #0
   2ff04:	mov	r2, #0
   2ff08:	str	r1, [r5, #92]	; 0x5c
   2ff0c:	str	r2, [r4, #12]
   2ff10:	str	r2, [r4, #4]
   2ff14:	str	r2, [r4, #8]
   2ff18:	beq	2ff34 <__assert_fail@plt+0x1b8dc>
   2ff1c:	movw	r0, #32704	; 0x7fc0
   2ff20:	mov	r3, r7
   2ff24:	ldr	r1, [r5, #84]	; 0x54
   2ff28:	movt	r0, #4
   2ff2c:	ldr	r2, [r5, #88]	; 0x58
   2ff30:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   2ff34:	mov	r0, r5
   2ff38:	mov	r1, #3
   2ff3c:	mov	r2, #1
   2ff40:	mov	r3, #0
   2ff44:	bl	2fbb8 <__assert_fail@plt+0x1b560>
   2ff48:	mov	r0, r5
   2ff4c:	add	sp, sp, #12
   2ff50:	pop	{r4, r5, r6, r7, pc}
   2ff54:	push	{r4, r5, r6, r7, r8, lr}
   2ff58:	subs	r6, r0, #0
   2ff5c:	sub	sp, sp, #8
   2ff60:	beq	2ffa0 <__assert_fail@plt+0x1b948>
   2ff64:	ldrb	r3, [r6]
   2ff68:	cmp	r3, #45	; 0x2d
   2ff6c:	bne	2ff7c <__assert_fail@plt+0x1b924>
   2ff70:	ldrb	r3, [r6, #1]
   2ff74:	cmp	r3, #0
   2ff78:	beq	2ffa0 <__assert_fail@plt+0x1b948>
   2ff7c:	mov	r0, r6
   2ff80:	bl	2ef5c <__assert_fail@plt+0x1a904>
   2ff84:	cmn	r0, #1
   2ff88:	beq	30030 <__assert_fail@plt+0x1b9d8>
   2ff8c:	movw	r1, #19760	; 0x4d30
   2ff90:	movt	r1, #4
   2ff94:	add	sp, sp, #8
   2ff98:	pop	{r4, r5, r6, r7, r8, lr}
   2ff9c:	b	2fe74 <__assert_fail@plt+0x1b81c>
   2ffa0:	mov	r1, #8192	; 0x2000
   2ffa4:	mov	r0, #1
   2ffa8:	bl	2fa00 <__assert_fail@plt+0x1b3a8>
   2ffac:	movw	r6, #31524	; 0x7b24
   2ffb0:	movt	r6, #4
   2ffb4:	movw	r8, #48260	; 0xbc84
   2ffb8:	movt	r8, #5
   2ffbc:	mov	r7, r0
   2ffc0:	mov	r0, #31
   2ffc4:	bl	1398c <gcry_xmalloc@plt>
   2ffc8:	mov	r2, #0
   2ffcc:	mov	r3, #1
   2ffd0:	mov	r4, r0
   2ffd4:	ldm	r6!, {r0, r1}
   2ffd8:	str	r2, [r4]
   2ffdc:	sub	r6, r6, #8
   2ffe0:	str	r3, [r4, #16]
   2ffe4:	str	r0, [r4, #20]
   2ffe8:	str	r1, [r4, #24]
   2ffec:	ldr	r2, [r8]
   2fff0:	movw	r3, #61716	; 0xf114
   2fff4:	str	r4, [r7, #68]	; 0x44
   2fff8:	movt	r3, #2
   2fffc:	cmp	r2, #0
   30000:	str	r3, [r7, #64]	; 0x40
   30004:	movw	r2, #31952	; 0x7cd0
   30008:	mov	r3, #0
   3000c:	movt	r2, #4
   30010:	moveq	r0, r7
   30014:	str	r2, [r7, #92]	; 0x5c
   30018:	str	r3, [r4, #12]
   3001c:	str	r3, [r4, #4]
   30020:	str	r3, [r4, #8]
   30024:	bne	300ec <__assert_fail@plt+0x1ba94>
   30028:	add	sp, sp, #8
   3002c:	pop	{r4, r5, r6, r7, r8, pc}
   30030:	movw	r3, #47900	; 0xbb1c
   30034:	movt	r3, #5
   30038:	ldr	r4, [r3, #4]
   3003c:	cmp	r4, #0
   30040:	beq	30070 <__assert_fail@plt+0x1ba18>
   30044:	ldr	r5, [r4, #4]
   30048:	add	r0, r4, #8
   3004c:	mov	r1, r6
   30050:	cmn	r5, #1
   30054:	beq	30064 <__assert_fail@plt+0x1ba0c>
   30058:	bl	13a28 <strcmp@plt>
   3005c:	cmp	r0, #0
   30060:	beq	30118 <__assert_fail@plt+0x1bac0>
   30064:	ldr	r4, [r4]
   30068:	cmp	r4, #0
   3006c:	bne	30044 <__assert_fail@plt+0x1b9ec>
   30070:	movw	r8, #48260	; 0xbc84
   30074:	movt	r8, #5
   30078:	ldr	r3, [r8]
   3007c:	cmp	r3, #0
   30080:	bne	30188 <__assert_fail@plt+0x1bb30>
   30084:	movw	r1, #19760	; 0x4d30
   30088:	mov	r0, r6
   3008c:	movt	r1, #4
   30090:	bl	2f950 <__assert_fail@plt+0x1b2f8>
   30094:	cmn	r0, #1
   30098:	mov	r5, r0
   3009c:	beq	301b0 <__assert_fail@plt+0x1bb58>
   300a0:	mov	r1, #8192	; 0x2000
   300a4:	mov	r0, #1
   300a8:	bl	2fa00 <__assert_fail@plt+0x1b3a8>
   300ac:	mov	r7, r0
   300b0:	mov	r0, r6
   300b4:	bl	14094 <strlen@plt>
   300b8:	add	r0, r0, #24
   300bc:	bl	1398c <gcry_xmalloc@plt>
   300c0:	mov	r3, #0
   300c4:	mov	r1, r6
   300c8:	mov	r4, r0
   300cc:	str	r5, [r0]
   300d0:	str	r3, [r4, #16]
   300d4:	add	r0, r0, #20
   300d8:	bl	13e78 <strcpy@plt>
   300dc:	mov	r0, r6
   300e0:	bl	141f0 <gcry_xstrdup@plt>
   300e4:	str	r0, [r7, #76]	; 0x4c
   300e8:	b	2ffec <__assert_fail@plt+0x1b994>
   300ec:	ldr	ip, [r4]
   300f0:	mov	r3, r6
   300f4:	ldr	r1, [r7, #84]	; 0x54
   300f8:	movw	r0, #32824	; 0x8038
   300fc:	ldr	r2, [r7, #88]	; 0x58
   30100:	movt	r0, #4
   30104:	str	ip, [sp]
   30108:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   3010c:	mov	r0, r7
   30110:	add	sp, sp, #8
   30114:	pop	{r4, r5, r6, r7, r8, pc}
   30118:	movw	r8, #48260	; 0xbc84
   3011c:	movt	r8, #5
   30120:	mvn	r3, #0
   30124:	str	r3, [r4, #4]
   30128:	ldr	r3, [r8]
   3012c:	cmp	r3, #0
   30130:	bne	3019c <__assert_fail@plt+0x1bb44>
   30134:	mov	r2, #0
   30138:	mov	r3, #0
   3013c:	mov	r7, #0
   30140:	mov	r0, r5
   30144:	str	r7, [sp]
   30148:	bl	13e30 <lseek64@plt>
   3014c:	mvn	r2, #0
   30150:	mvn	r3, #0
   30154:	cmp	r1, r3
   30158:	cmpeq	r0, r2
   3015c:	bne	300a0 <__assert_fail@plt+0x1ba48>
   30160:	bl	14148 <__errno_location@plt>
   30164:	ldr	r0, [r0]
   30168:	bl	13fa4 <strerror@plt>
   3016c:	mov	r1, r5
   30170:	mov	r2, r0
   30174:	movw	r0, #32768	; 0x8000
   30178:	movt	r0, #4
   3017c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   30180:	mov	r0, r7
   30184:	b	30028 <__assert_fail@plt+0x1b9d0>
   30188:	movw	r0, #32792	; 0x8018
   3018c:	mov	r1, r6
   30190:	movt	r0, #4
   30194:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   30198:	b	30084 <__assert_fail@plt+0x1ba2c>
   3019c:	movw	r0, #32732	; 0x7fdc
   301a0:	mov	r1, r6
   301a4:	movt	r0, #4
   301a8:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   301ac:	b	30134 <__assert_fail@plt+0x1badc>
   301b0:	mov	r0, #0
   301b4:	b	30028 <__assert_fail@plt+0x1b9d0>
   301b8:	cmn	r0, #1
   301bc:	push	{r4, lr}
   301c0:	mov	r4, r2
   301c4:	beq	301e0 <__assert_fail@plt+0x1bb88>
   301c8:	bl	13d40 <dup@plt>
   301cc:	cmn	r0, #1
   301d0:	beq	301ec <__assert_fail@plt+0x1bb94>
   301d4:	mov	r1, r4
   301d8:	pop	{r4, lr}
   301dc:	b	2fe74 <__assert_fail@plt+0x1b81c>
   301e0:	mov	r0, r1
   301e4:	pop	{r4, lr}
   301e8:	b	2ff54 <__assert_fail@plt+0x1b8fc>
   301ec:	mov	r0, #0
   301f0:	pop	{r4, pc}
   301f4:	b	2fe74 <__assert_fail@plt+0x1b81c>
   301f8:	push	{r3, r4, r5, r6, r7, lr}
   301fc:	subs	r5, r0, #0
   30200:	beq	3023c <__assert_fail@plt+0x1bbe4>
   30204:	ldrb	r3, [r5]
   30208:	cmp	r3, #45	; 0x2d
   3020c:	beq	30230 <__assert_fail@plt+0x1bbd8>
   30210:	mov	r0, r5
   30214:	bl	2ef5c <__assert_fail@plt+0x1a904>
   30218:	movw	r1, #23588	; 0x5c24
   3021c:	cmn	r0, #1
   30220:	beq	302dc <__assert_fail@plt+0x1bc84>
   30224:	movt	r1, #4
   30228:	pop	{r3, r4, r5, r6, r7, lr}
   3022c:	b	2fe74 <__assert_fail@plt+0x1b81c>
   30230:	ldrb	r3, [r5, #1]
   30234:	cmp	r3, #0
   30238:	bne	30210 <__assert_fail@plt+0x1bbb8>
   3023c:	mov	r1, #8192	; 0x2000
   30240:	mov	r0, #2
   30244:	bl	2fa00 <__assert_fail@plt+0x1b3a8>
   30248:	mov	r6, r0
   3024c:	mov	r0, #32
   30250:	bl	1398c <gcry_xmalloc@plt>
   30254:	movw	r3, #31512	; 0x7b18
   30258:	movt	r3, #4
   3025c:	mov	ip, #1
   30260:	mov	r4, r0
   30264:	ldm	r3!, {r0, r1}
   30268:	str	ip, [r4]
   3026c:	str	ip, [r4, #16]
   30270:	ldrb	r3, [r3]
   30274:	str	r0, [r4, #20]
   30278:	str	r1, [r4, #24]
   3027c:	strb	r3, [r4, #28]
   30280:	movw	r3, #48260	; 0xbc84
   30284:	movt	r3, #5
   30288:	str	r4, [r6, #68]	; 0x44
   3028c:	movw	r2, #61716	; 0xf114
   30290:	ldr	r1, [r3]
   30294:	movt	r2, #2
   30298:	movw	r3, #31952	; 0x7cd0
   3029c:	str	r2, [r6, #64]	; 0x40
   302a0:	cmp	r1, #0
   302a4:	mov	r2, #0
   302a8:	movt	r3, #4
   302ac:	str	r3, [r6, #92]	; 0x5c
   302b0:	str	r2, [r4, #12]
   302b4:	str	r2, [r4, #4]
   302b8:	str	r2, [r4, #8]
   302bc:	beq	30340 <__assert_fail@plt+0x1bce8>
   302c0:	ldr	r1, [r6, #84]	; 0x54
   302c4:	movw	r0, #32856	; 0x8058
   302c8:	ldr	r2, [r6, #88]	; 0x58
   302cc:	movt	r0, #4
   302d0:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   302d4:	mov	r0, r6
   302d8:	pop	{r3, r4, r5, r6, r7, pc}
   302dc:	mov	r0, r5
   302e0:	movt	r1, #4
   302e4:	bl	2f950 <__assert_fail@plt+0x1b2f8>
   302e8:	cmn	r0, #1
   302ec:	mov	r7, r0
   302f0:	beq	30348 <__assert_fail@plt+0x1bcf0>
   302f4:	mov	r1, #8192	; 0x2000
   302f8:	mov	r0, #2
   302fc:	bl	2fa00 <__assert_fail@plt+0x1b3a8>
   30300:	mov	r6, r0
   30304:	mov	r0, r5
   30308:	bl	14094 <strlen@plt>
   3030c:	add	r0, r0, #24
   30310:	bl	1398c <gcry_xmalloc@plt>
   30314:	mov	r3, #0
   30318:	mov	r1, r5
   3031c:	mov	r4, r0
   30320:	str	r7, [r0]
   30324:	str	r3, [r4, #16]
   30328:	add	r0, r0, #20
   3032c:	bl	13e78 <strcpy@plt>
   30330:	mov	r0, r5
   30334:	bl	141f0 <gcry_xstrdup@plt>
   30338:	str	r0, [r6, #76]	; 0x4c
   3033c:	b	30280 <__assert_fail@plt+0x1bc28>
   30340:	mov	r0, r6
   30344:	pop	{r3, r4, r5, r6, r7, pc}
   30348:	mov	r0, #0
   3034c:	pop	{r3, r4, r5, r6, r7, pc}
   30350:	push	{r4, r5, r6, r7, lr}
   30354:	movw	r4, #47296	; 0xb8c0
   30358:	movt	r4, #5
   3035c:	ldr	r2, [r0, #36]	; 0x24
   30360:	sub	sp, sp, #20
   30364:	mov	r5, r0
   30368:	ldr	r3, [r4]
   3036c:	cmp	r2, #0
   30370:	movne	r0, #0
   30374:	str	r3, [sp, #12]
   30378:	beq	30394 <__assert_fail@plt+0x1bd3c>
   3037c:	ldr	r2, [sp, #12]
   30380:	ldr	r3, [r4]
   30384:	cmp	r2, r3
   30388:	bne	30470 <__assert_fail@plt+0x1be18>
   3038c:	add	sp, sp, #20
   30390:	pop	{r4, r5, r6, r7, pc}
   30394:	ldr	r3, [r5]
   30398:	cmp	r3, #3
   3039c:	beq	30410 <__assert_fail@plt+0x1bdb8>
   303a0:	cmp	r3, #2
   303a4:	bne	30480 <__assert_fail@plt+0x1be28>
   303a8:	ldr	r6, [r5, #64]	; 0x40
   303ac:	cmp	r6, #0
   303b0:	beq	30474 <__assert_fail@plt+0x1be1c>
   303b4:	ldr	lr, [r5, #48]	; 0x30
   303b8:	add	ip, sp, #16
   303bc:	ldr	r0, [r5, #68]	; 0x44
   303c0:	mov	r1, #4
   303c4:	ldr	r2, [r5, #80]	; 0x50
   303c8:	ldr	r3, [r5, #52]	; 0x34
   303cc:	str	lr, [ip, #-8]!
   303d0:	str	ip, [sp]
   303d4:	blx	r6
   303d8:	cmp	r0, #0
   303dc:	strne	r0, [r5, #60]	; 0x3c
   303e0:	bne	30404 <__assert_fail@plt+0x1bdac>
   303e4:	ldr	r2, [r5, #48]	; 0x30
   303e8:	ldr	r3, [sp, #8]
   303ec:	cmp	r2, r3
   303f0:	beq	30404 <__assert_fail@plt+0x1bdac>
   303f4:	movw	r0, #32976	; 0x80d0
   303f8:	movt	r0, #4
   303fc:	bl	3f478 <__assert_fail@plt+0x2ae20>
   30400:	mov	r0, #63	; 0x3f
   30404:	mov	r3, #0
   30408:	str	r3, [r5, #48]	; 0x30
   3040c:	b	3037c <__assert_fail@plt+0x1bd24>
   30410:	movw	r3, #48260	; 0xbc84
   30414:	movt	r3, #5
   30418:	ldr	r1, [r5, #40]	; 0x28
   3041c:	ldr	r3, [r3]
   30420:	add	r6, r1, #8192	; 0x2000
   30424:	cmp	r3, #0
   30428:	bne	3045c <__assert_fail@plt+0x1be04>
   3042c:	mov	r0, r6
   30430:	bl	1398c <gcry_xmalloc@plt>
   30434:	ldr	r1, [r5, #52]	; 0x34
   30438:	ldr	r2, [r5, #48]	; 0x30
   3043c:	mov	r7, r0
   30440:	bl	13ba8 <memcpy@plt>
   30444:	ldr	r0, [r5, #52]	; 0x34
   30448:	bl	13c44 <gcry_free@plt>
   3044c:	str	r7, [r5, #52]	; 0x34
   30450:	str	r6, [r5, #40]	; 0x28
   30454:	mov	r0, #0
   30458:	b	3037c <__assert_fail@plt+0x1bd24>
   3045c:	movw	r0, #32884	; 0x8074
   30460:	mov	r2, r6
   30464:	movt	r0, #4
   30468:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   3046c:	b	3042c <__assert_fail@plt+0x1bdd4>
   30470:	bl	13cec <__stack_chk_fail@plt>
   30474:	movw	r0, #32952	; 0x80b8
   30478:	movt	r0, #4
   3047c:	bl	3f57c <__assert_fail@plt+0x2af24>
   30480:	movw	r0, #32924	; 0x809c
   30484:	movt	r0, #4
   30488:	bl	3f57c <__assert_fail@plt+0x2af24>
   3048c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   30490:	movw	r7, #47296	; 0xb8c0
   30494:	movt	r7, #5
   30498:	sub	sp, sp, #16
   3049c:	subs	r4, r0, #0
   304a0:	mov	r6, #0
   304a4:	ldr	r3, [r7]
   304a8:	str	r6, [sp, #8]
   304ac:	str	r3, [sp, #12]
   304b0:	beq	304e0 <__assert_fail@plt+0x1be88>
   304b4:	ldr	r0, [r4, #36]	; 0x24
   304b8:	cmp	r0, #0
   304bc:	beq	304fc <__assert_fail@plt+0x1bea4>
   304c0:	bl	142c8 <fclose@plt>
   304c4:	ldr	r0, [r4, #76]	; 0x4c
   304c8:	bl	13c44 <gcry_free@plt>
   304cc:	movw	r3, #48260	; 0xbc84
   304d0:	movt	r3, #5
   304d4:	ldr	r3, [r3]
   304d8:	cmp	r3, #0
   304dc:	bne	30614 <__assert_fail@plt+0x1bfbc>
   304e0:	mov	r0, #0
   304e4:	ldr	r2, [sp, #12]
   304e8:	ldr	r3, [r7]
   304ec:	cmp	r2, r3
   304f0:	bne	3062c <__assert_fail@plt+0x1bfd4>
   304f4:	add	sp, sp, #16
   304f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   304fc:	movw	r8, #48260	; 0xbc84
   30500:	movw	sl, #30116	; 0x75a4
   30504:	movt	r8, #5
   30508:	movt	sl, #4
   3050c:	add	r9, sp, #8
   30510:	b	30560 <__assert_fail@plt+0x1bf08>
   30514:	ldr	r0, [r4, #76]	; 0x4c
   30518:	bl	13c44 <gcry_free@plt>
   3051c:	ldr	r0, [r4, #52]	; 0x34
   30520:	cmp	r0, #0
   30524:	beq	3053c <__assert_fail@plt+0x1bee4>
   30528:	mov	r1, #0
   3052c:	ldr	r2, [r4, #40]	; 0x28
   30530:	bl	141cc <memset@plt>
   30534:	ldr	r0, [r4, #52]	; 0x34
   30538:	bl	13c44 <gcry_free@plt>
   3053c:	mov	r0, r4
   30540:	bl	13c44 <gcry_free@plt>
   30544:	rsbs	r3, r6, #1
   30548:	movcc	r3, #0
   3054c:	cmp	r5, #0
   30550:	moveq	r3, #0
   30554:	cmp	r3, #0
   30558:	beq	3060c <__assert_fail@plt+0x1bfb4>
   3055c:	mov	r4, r5
   30560:	ldr	r3, [r4]
   30564:	ldr	r5, [r4, #80]	; 0x50
   30568:	cmp	r3, #2
   3056c:	movne	r6, #0
   30570:	beq	305e4 <__assert_fail@plt+0x1bf8c>
   30574:	ldr	r3, [r8]
   30578:	cmp	r3, #0
   3057c:	beq	305a0 <__assert_fail@plt+0x1bf48>
   30580:	ldr	r3, [r4, #92]	; 0x5c
   30584:	movw	r0, #33064	; 0x8128
   30588:	ldr	r1, [r4, #84]	; 0x54
   3058c:	movt	r0, #4
   30590:	cmp	r3, #0
   30594:	ldr	r2, [r4, #88]	; 0x58
   30598:	moveq	r3, sl
   3059c:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   305a0:	ldr	ip, [r4, #64]	; 0x40
   305a4:	cmp	ip, #0
   305a8:	beq	30514 <__assert_fail@plt+0x1bebc>
   305ac:	ldr	r0, [r4, #68]	; 0x44
   305b0:	mov	r1, #2
   305b4:	ldr	r2, [r4, #80]	; 0x50
   305b8:	mov	r3, #0
   305bc:	str	r9, [sp]
   305c0:	blx	ip
   305c4:	subs	r6, r0, #0
   305c8:	beq	30514 <__assert_fail@plt+0x1bebc>
   305cc:	bl	13a64 <gpg_strerror@plt>
   305d0:	mov	r1, r0
   305d4:	movw	r0, #33092	; 0x8144
   305d8:	movt	r0, #4
   305dc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   305e0:	b	30514 <__assert_fail@plt+0x1bebc>
   305e4:	mov	r0, r4
   305e8:	bl	30350 <__assert_fail@plt+0x1bcf8>
   305ec:	subs	r6, r0, #0
   305f0:	beq	30574 <__assert_fail@plt+0x1bf1c>
   305f4:	bl	13a64 <gpg_strerror@plt>
   305f8:	mov	r1, r0
   305fc:	movw	r0, #33028	; 0x8104
   30600:	movt	r0, #4
   30604:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   30608:	b	30574 <__assert_fail@plt+0x1bf1c>
   3060c:	mov	r0, r6
   30610:	b	304e4 <__assert_fail@plt+0x1be8c>
   30614:	ldr	r1, [r4, #36]	; 0x24
   30618:	movw	r0, #33008	; 0x80f0
   3061c:	movt	r0, #4
   30620:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   30624:	mov	r0, r6
   30628:	b	304e4 <__assert_fail@plt+0x1be8c>
   3062c:	bl	13cec <__stack_chk_fail@plt>
   30630:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30634:	movw	r9, #47296	; 0xb8c0
   30638:	movt	r9, #5
   3063c:	ldr	ip, [r0, #36]	; 0x24
   30640:	mov	fp, r2
   30644:	sub	sp, sp, #44	; 0x2c
   30648:	ldr	r2, [r9]
   3064c:	cmp	ip, #0
   30650:	mov	r6, r3
   30654:	mov	r8, r0
   30658:	mov	r3, #0
   3065c:	mov	sl, r1
   30660:	str	r3, [sp, #32]
   30664:	str	r2, [sp, #36]	; 0x24
   30668:	bne	30874 <__assert_fail@plt+0x1c21c>
   3066c:	ldr	r3, [r0]
   30670:	cmp	r3, #2
   30674:	beq	30840 <__assert_fail@plt+0x1c1e8>
   30678:	ldr	r3, [r8, #88]	; 0x58
   3067c:	cmp	r3, #63	; 0x3f
   30680:	ble	306ac <__assert_fail@plt+0x1c054>
   30684:	movw	r0, #33128	; 0x8168
   30688:	movt	r0, #4
   3068c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   30690:	mov	r0, #89	; 0x59
   30694:	ldr	r2, [sp, #36]	; 0x24
   30698:	ldr	r3, [r9]
   3069c:	cmp	r2, r3
   306a0:	bne	30870 <__assert_fail@plt+0x1c218>
   306a4:	add	sp, sp, #44	; 0x2c
   306a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   306ac:	mov	r0, #104	; 0x68
   306b0:	bl	1398c <gcry_xmalloc@plt>
   306b4:	mov	r1, r8
   306b8:	mov	r2, #104	; 0x68
   306bc:	str	r0, [sp, #28]
   306c0:	bl	13ba8 <memcpy@plt>
   306c4:	ldr	r0, [r8, #76]	; 0x4c
   306c8:	cmp	r0, #0
   306cc:	beq	306d4 <__assert_fail@plt+0x1c07c>
   306d0:	bl	141f0 <gcry_xstrdup@plt>
   306d4:	ldr	r2, [r8]
   306d8:	mov	r4, #0
   306dc:	ldr	r3, [sp, #28]
   306e0:	cmp	r2, #3
   306e4:	str	r0, [r3, #76]	; 0x4c
   306e8:	moveq	r2, #2
   306ec:	str	r4, [r8, #64]	; 0x40
   306f0:	str	r4, [r8, #68]	; 0x44
   306f4:	str	r4, [r8, #72]	; 0x48
   306f8:	str	r4, [r8, #56]	; 0x38
   306fc:	streq	r2, [r8]
   30700:	beq	30850 <__assert_fail@plt+0x1c1f8>
   30704:	cmp	r2, #2
   30708:	beq	30850 <__assert_fail@plt+0x1c1f8>
   3070c:	ldr	r0, [r8, #40]	; 0x28
   30710:	bl	1398c <gcry_xmalloc@plt>
   30714:	str	r4, [r8, #48]	; 0x30
   30718:	str	r4, [r8, #44]	; 0x2c
   3071c:	str	r0, [r8, #52]	; 0x34
   30720:	ldr	r5, [sp, #28]
   30724:	movw	r7, #48260	; 0xbc84
   30728:	ldr	ip, [r8, #32]
   3072c:	movt	r7, #5
   30730:	mov	r0, fp
   30734:	ldrd	r2, [r5, #24]
   30738:	ldr	r1, [r5, #96]	; 0x60
   3073c:	ldrd	r4, [r5, #16]
   30740:	adds	r4, r4, r2
   30744:	bic	r2, ip, #1
   30748:	adc	r5, r5, r3
   3074c:	ldr	r3, [sp, #28]
   30750:	strd	r4, [r8, #24]
   30754:	mov	r4, #0
   30758:	mov	r5, #0
   3075c:	ldr	lr, [r3, #88]	; 0x58
   30760:	str	r3, [r8, #80]	; 0x50
   30764:	str	r2, [r8, #32]
   30768:	add	r3, lr, #1
   3076c:	str	r1, [r8, #96]	; 0x60
   30770:	mov	r2, #0
   30774:	str	r3, [r8, #88]	; 0x58
   30778:	mov	r1, #5
   3077c:	strd	r4, [r8, #16]
   30780:	add	r3, r8, #92	; 0x5c
   30784:	strd	r4, [r8, #8]
   30788:	add	r4, sp, #32
   3078c:	str	sl, [r8, #64]	; 0x40
   30790:	str	fp, [r8, #68]	; 0x44
   30794:	str	r6, [r8, #72]	; 0x48
   30798:	str	r4, [sp]
   3079c:	blx	sl
   307a0:	ldr	r3, [r7]
   307a4:	cmp	r3, #0
   307a8:	bne	30800 <__assert_fail@plt+0x1c1a8>
   307ac:	ldr	ip, [r8, #64]	; 0x40
   307b0:	cmp	ip, #0
   307b4:	moveq	r0, ip
   307b8:	beq	30694 <__assert_fail@plt+0x1c03c>
   307bc:	ldr	r0, [r8, #68]	; 0x44
   307c0:	mov	r1, #1
   307c4:	ldr	r2, [r8, #80]	; 0x50
   307c8:	mov	r3, #0
   307cc:	add	r5, sp, #32
   307d0:	str	r5, [sp]
   307d4:	blx	ip
   307d8:	subs	r4, r0, #0
   307dc:	moveq	r0, r4
   307e0:	beq	30694 <__assert_fail@plt+0x1c03c>
   307e4:	bl	13a64 <gpg_strerror@plt>
   307e8:	mov	r1, r0
   307ec:	movw	r0, #33200	; 0x81b0
   307f0:	movt	r0, #4
   307f4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   307f8:	mov	r0, r4
   307fc:	b	30694 <__assert_fail@plt+0x1c03c>
   30800:	ldr	r3, [r8, #92]	; 0x5c
   30804:	movw	r2, #30116	; 0x75a4
   30808:	movt	r2, #4
   3080c:	movw	r0, #33176	; 0x8198
   30810:	cmp	r3, #0
   30814:	movt	r0, #4
   30818:	ldr	r1, [r8, #84]	; 0x54
   3081c:	moveq	r3, r2
   30820:	ldr	r2, [r8, #88]	; 0x58
   30824:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   30828:	ldr	r3, [r7]
   3082c:	cmp	r3, #0
   30830:	beq	307ac <__assert_fail@plt+0x1c154>
   30834:	mov	r0, r8
   30838:	bl	2f370 <__assert_fail@plt+0x1ad18>
   3083c:	b	307ac <__assert_fail@plt+0x1c154>
   30840:	bl	30350 <__assert_fail@plt+0x1bcf8>
   30844:	cmp	r0, #0
   30848:	beq	30678 <__assert_fail@plt+0x1c020>
   3084c:	b	30694 <__assert_fail@plt+0x1c03c>
   30850:	ldr	r0, [r8, #40]	; 0x28
   30854:	bl	1398c <gcry_xmalloc@plt>
   30858:	ldr	r4, [sp, #28]
   3085c:	mov	r2, #0
   30860:	str	r2, [r4, #48]	; 0x30
   30864:	str	r2, [r4, #44]	; 0x2c
   30868:	str	r0, [r4, #52]	; 0x34
   3086c:	b	30720 <__assert_fail@plt+0x1c0c8>
   30870:	bl	13cec <__stack_chk_fail@plt>
   30874:	movw	r0, #31792	; 0x7c30
   30878:	movw	r1, #1618	; 0x652
   3087c:	movt	r0, #4
   30880:	ldr	r2, [pc]	; 30888 <__assert_fail@plt+0x1c230>
   30884:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   30888:	andeq	r7, r4, r8, lsl #23
   3088c:	mov	r3, #0
   30890:	b	30630 <__assert_fail@plt+0x1bfd8>
   30894:	push	{r4, r5, r6, r7, r8, r9, lr}
   30898:	movw	r8, #47296	; 0xb8c0
   3089c:	movt	r8, #5
   308a0:	ldr	r3, [r0, #36]	; 0x24
   308a4:	sub	sp, sp, #20
   308a8:	mov	r6, r1
   308ac:	ldr	r2, [r8]
   308b0:	mov	r1, #0
   308b4:	cmp	r3, r1
   308b8:	mov	r7, r0
   308bc:	str	r1, [sp, #8]
   308c0:	str	r2, [sp, #12]
   308c4:	bne	30af0 <__assert_fail@plt+0x1c498>
   308c8:	movw	r9, #48260	; 0xbc84
   308cc:	movt	r9, #5
   308d0:	ldr	r3, [r9]
   308d4:	cmp	r3, #0
   308d8:	beq	30904 <__assert_fail@plt+0x1c2ac>
   308dc:	ldr	r3, [r0, #92]	; 0x5c
   308e0:	movw	r2, #30116	; 0x75a4
   308e4:	movt	r2, #4
   308e8:	movw	r0, #33228	; 0x81cc
   308ec:	cmp	r3, #0
   308f0:	movt	r0, #4
   308f4:	ldr	r1, [r7, #84]	; 0x54
   308f8:	moveq	r3, r2
   308fc:	ldr	r2, [r7, #88]	; 0x58
   30900:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   30904:	ldr	r5, [r7, #64]	; 0x40
   30908:	cmp	r5, #0
   3090c:	movne	r4, r7
   30910:	bne	30928 <__assert_fail@plt+0x1c2d0>
   30914:	b	30a4c <__assert_fail@plt+0x1c3f4>
   30918:	ldr	r4, [r4, #80]	; 0x50
   3091c:	cmp	r4, #0
   30920:	beq	309a0 <__assert_fail@plt+0x1c348>
   30924:	ldr	r5, [r4, #64]	; 0x40
   30928:	cmp	r6, r5
   3092c:	bne	30918 <__assert_fail@plt+0x1c2c0>
   30930:	ldr	r3, [r7]
   30934:	cmp	r3, #2
   30938:	beq	30a88 <__assert_fail@plt+0x1c430>
   3093c:	cmp	r5, #0
   30940:	beq	30968 <__assert_fail@plt+0x1c310>
   30944:	ldr	r0, [r4, #68]	; 0x44
   30948:	add	r3, sp, #8
   3094c:	ldr	r2, [r4, #80]	; 0x50
   30950:	mov	r1, #2
   30954:	str	r3, [sp]
   30958:	mov	r3, #0
   3095c:	blx	r5
   30960:	subs	r5, r0, #0
   30964:	bne	30a1c <__assert_fail@plt+0x1c3c4>
   30968:	ldr	r0, [r4, #68]	; 0x44
   3096c:	cmp	r0, #0
   30970:	beq	30980 <__assert_fail@plt+0x1c328>
   30974:	ldr	r3, [r4, #72]	; 0x48
   30978:	cmp	r3, #0
   3097c:	bne	309ac <__assert_fail@plt+0x1c354>
   30980:	cmp	r7, r4
   30984:	beq	309c0 <__assert_fail@plt+0x1c368>
   30988:	ldr	r3, [r4, #80]	; 0x50
   3098c:	cmp	r3, #0
   30990:	beq	30ab8 <__assert_fail@plt+0x1c460>
   30994:	movw	r0, #33416	; 0x8288
   30998:	movt	r0, #4
   3099c:	bl	3f57c <__assert_fail@plt+0x2af24>
   309a0:	movw	r0, #33468	; 0x82bc
   309a4:	movt	r0, #4
   309a8:	bl	3f57c <__assert_fail@plt+0x2af24>
   309ac:	bl	13c44 <gcry_free@plt>
   309b0:	cmp	r7, r4
   309b4:	mov	r3, #0
   309b8:	str	r3, [r4, #68]	; 0x44
   309bc:	bne	30988 <__assert_fail@plt+0x1c330>
   309c0:	ldr	r4, [r7, #80]	; 0x50
   309c4:	cmp	r4, #0
   309c8:	beq	30ae0 <__assert_fail@plt+0x1c488>
   309cc:	ldr	r0, [r7, #52]	; 0x34
   309d0:	bl	13c44 <gcry_free@plt>
   309d4:	ldr	r0, [r7, #76]	; 0x4c
   309d8:	bl	13c44 <gcry_free@plt>
   309dc:	mov	r1, r4
   309e0:	mov	r2, #104	; 0x68
   309e4:	mov	r0, r7
   309e8:	bl	13ba8 <memcpy@plt>
   309ec:	mov	r0, r4
   309f0:	bl	13c44 <gcry_free@plt>
   309f4:	ldr	r0, [r9]
   309f8:	cmp	r0, #0
   309fc:	beq	30a34 <__assert_fail@plt+0x1c3dc>
   30a00:	movw	r0, #33344	; 0x8240
   30a04:	ldr	r1, [r7, #84]	; 0x54
   30a08:	movt	r0, #4
   30a0c:	ldr	r2, [r7, #88]	; 0x58
   30a10:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   30a14:	mov	r0, #0
   30a18:	b	30a34 <__assert_fail@plt+0x1c3dc>
   30a1c:	bl	13a64 <gpg_strerror@plt>
   30a20:	mov	r1, r0
   30a24:	movw	r0, #32252	; 0x7dfc
   30a28:	movt	r0, #4
   30a2c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   30a30:	mov	r0, r5
   30a34:	ldr	r2, [sp, #12]
   30a38:	ldr	r3, [r8]
   30a3c:	cmp	r2, r3
   30a40:	bne	30aec <__assert_fail@plt+0x1c494>
   30a44:	add	sp, sp, #20
   30a48:	pop	{r4, r5, r6, r7, r8, r9, pc}
   30a4c:	ldr	r4, [r7, #80]	; 0x50
   30a50:	cmp	r4, #0
   30a54:	beq	30ac4 <__assert_fail@plt+0x1c46c>
   30a58:	ldr	r0, [r7, #52]	; 0x34
   30a5c:	bl	13c44 <gcry_free@plt>
   30a60:	ldr	r0, [r7, #76]	; 0x4c
   30a64:	bl	13c44 <gcry_free@plt>
   30a68:	mov	r1, r4
   30a6c:	mov	r2, #104	; 0x68
   30a70:	mov	r0, r7
   30a74:	bl	13ba8 <memcpy@plt>
   30a78:	mov	r0, r4
   30a7c:	bl	13c44 <gcry_free@plt>
   30a80:	mov	r0, r5
   30a84:	b	30a34 <__assert_fail@plt+0x1c3dc>
   30a88:	mov	r0, r4
   30a8c:	bl	30350 <__assert_fail@plt+0x1bcf8>
   30a90:	subs	r5, r0, #0
   30a94:	ldreq	r5, [r4, #64]	; 0x40
   30a98:	beq	3093c <__assert_fail@plt+0x1c2e4>
   30a9c:	bl	13a64 <gpg_strerror@plt>
   30aa0:	mov	r1, r0
   30aa4:	movw	r0, #33256	; 0x81e8
   30aa8:	movt	r0, #4
   30aac:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   30ab0:	mov	r0, r5
   30ab4:	b	30a34 <__assert_fail@plt+0x1c3dc>
   30ab8:	movw	r0, #33372	; 0x825c
   30abc:	movt	r0, #4
   30ac0:	bl	3f57c <__assert_fail@plt+0x2af24>
   30ac4:	movw	r0, #33252	; 0x81e4
   30ac8:	movw	r1, #31792	; 0x7c30
   30acc:	movt	r0, #4
   30ad0:	movt	r1, #4
   30ad4:	movw	r2, #1713	; 0x6b1
   30ad8:	ldr	r3, [pc, #36]	; 30b04 <__assert_fail@plt+0x1c4ac>
   30adc:	bl	14658 <__assert_fail@plt>
   30ae0:	movw	r0, #33296	; 0x8210
   30ae4:	movt	r0, #4
   30ae8:	bl	3f57c <__assert_fail@plt+0x2af24>
   30aec:	bl	13cec <__stack_chk_fail@plt>
   30af0:	movw	r0, #31792	; 0x7c30
   30af4:	movw	r1, #1705	; 0x6a9
   30af8:	movt	r0, #4
   30afc:	ldr	r2, [pc, #4]	; 30b08 <__assert_fail@plt+0x1c4b0>
   30b00:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   30b04:	andeq	r7, r4, r8, lsr #23
   30b08:	muleq	r4, ip, fp
   30b0c:	ldrd	r2, [r0, #8]
   30b10:	push	{r4, r5, r6, lr}
   30b14:	orrs	r1, r2, r3
   30b18:	mov	r6, r0
   30b1c:	beq	30b30 <__assert_fail@plt+0x1c4d8>
   30b20:	ldrd	r4, [r0, #16]
   30b24:	cmp	r4, r2
   30b28:	sbcs	r1, r5, r3
   30b2c:	bge	30b74 <__assert_fail@plt+0x1c51c>
   30b30:	ldr	r3, [r6, #44]	; 0x2c
   30b34:	ldr	r2, [r6, #48]	; 0x30
   30b38:	cmp	r3, r2
   30b3c:	bcs	30b64 <__assert_fail@plt+0x1c50c>
   30b40:	ldr	r2, [r6, #52]	; 0x34
   30b44:	add	r1, r3, #1
   30b48:	str	r1, [r6, #44]	; 0x2c
   30b4c:	ldrb	r0, [r2, r3]
   30b50:	ldrd	r2, [r6, #16]
   30b54:	adds	r2, r2, #1
   30b58:	adc	r3, r3, #0
   30b5c:	strd	r2, [r6, #16]
   30b60:	pop	{r4, r5, r6, pc}
   30b64:	mov	r0, r6
   30b68:	bl	2f44c <__assert_fail@plt+0x1adf4>
   30b6c:	cmn	r0, #1
   30b70:	bne	30b50 <__assert_fail@plt+0x1c4f8>
   30b74:	mvn	r0, #0
   30b78:	pop	{r4, r5, r6, pc}
   30b7c:	push	{r4, r5, r6, r7, r8, lr}
   30b80:	mov	r6, r0
   30b84:	ldrd	r4, [r0, #8]
   30b88:	mov	r7, r1
   30b8c:	mov	r8, r2
   30b90:	orrs	r3, r4, r5
   30b94:	beq	30bdc <__assert_fail@plt+0x1c584>
   30b98:	cmp	r2, #0
   30b9c:	beq	30cb4 <__assert_fail@plt+0x1c65c>
   30ba0:	mov	r4, #0
   30ba4:	b	30bbc <__assert_fail@plt+0x1c564>
   30ba8:	add	r4, r4, #1
   30bac:	cmp	r7, #0
   30bb0:	strbne	r0, [r7], #1
   30bb4:	cmp	r4, r8
   30bb8:	beq	30bd4 <__assert_fail@plt+0x1c57c>
   30bbc:	mov	r0, r6
   30bc0:	bl	30b0c <__assert_fail@plt+0x1c4b4>
   30bc4:	cmn	r0, #1
   30bc8:	bne	30ba8 <__assert_fail@plt+0x1c550>
   30bcc:	cmp	r4, #0
   30bd0:	beq	30cac <__assert_fail@plt+0x1c654>
   30bd4:	mov	r0, r4
   30bd8:	pop	{r4, r5, r6, r7, r8, pc}
   30bdc:	mov	r4, #0
   30be0:	cmp	r8, r4
   30be4:	bhi	30c00 <__assert_fail@plt+0x1c5a8>
   30be8:	ldrd	r2, [r6, #16]
   30bec:	mov	r0, r4
   30bf0:	adds	r2, r2, r4
   30bf4:	adc	r3, r3, r4, asr #31
   30bf8:	strd	r2, [r6, #16]
   30bfc:	pop	{r4, r5, r6, r7, r8, pc}
   30c00:	ldr	r3, [r6, #44]	; 0x2c
   30c04:	rsb	r5, r4, r8
   30c08:	ldr	r1, [r6, #48]	; 0x30
   30c0c:	cmp	r3, r1
   30c10:	rsb	r2, r3, r1
   30c14:	bcs	30c58 <__assert_fail@plt+0x1c600>
   30c18:	cmp	r5, r2
   30c1c:	movcs	r5, r2
   30c20:	cmp	r7, #0
   30c24:	mov	r0, r7
   30c28:	mov	r2, r5
   30c2c:	beq	30c84 <__assert_fail@plt+0x1c62c>
   30c30:	ldr	r1, [r6, #52]	; 0x34
   30c34:	add	r4, r5, r4
   30c38:	add	r7, r7, r5
   30c3c:	add	r1, r1, r3
   30c40:	bl	13ba8 <memcpy@plt>
   30c44:	ldr	r3, [r6, #44]	; 0x2c
   30c48:	add	r5, r3, r5
   30c4c:	str	r5, [r6, #44]	; 0x2c
   30c50:	cmp	r8, r4
   30c54:	bls	30be8 <__assert_fail@plt+0x1c590>
   30c58:	mov	r0, r6
   30c5c:	bl	2f44c <__assert_fail@plt+0x1adf4>
   30c60:	cmn	r0, #1
   30c64:	beq	30c94 <__assert_fail@plt+0x1c63c>
   30c68:	cmp	r7, #0
   30c6c:	add	r4, r4, #1
   30c70:	strbne	r0, [r7]
   30c74:	addne	r7, r7, #1
   30c78:	cmp	r8, r4
   30c7c:	bhi	30be0 <__assert_fail@plt+0x1c588>
   30c80:	b	30be8 <__assert_fail@plt+0x1c590>
   30c84:	add	r3, r5, r3
   30c88:	add	r4, r5, r4
   30c8c:	str	r3, [r6, #44]	; 0x2c
   30c90:	b	30c50 <__assert_fail@plt+0x1c5f8>
   30c94:	ldrd	r2, [r6, #16]
   30c98:	adds	r2, r2, r4
   30c9c:	adc	r3, r3, r4, asr #31
   30ca0:	cmp	r4, #0
   30ca4:	strd	r2, [r6, #16]
   30ca8:	bne	30bd4 <__assert_fail@plt+0x1c57c>
   30cac:	mvn	r0, #0
   30cb0:	pop	{r4, r5, r6, r7, r8, pc}
   30cb4:	mov	r0, r2
   30cb8:	pop	{r4, r5, r6, r7, r8, pc}
   30cbc:	push	{r3, r4, r5, r6, r7, lr}
   30cc0:	mov	r4, r0
   30cc4:	ldr	r5, [r0, #56]	; 0x38
   30cc8:	mov	r7, r1
   30ccc:	mov	r6, r2
   30cd0:	cmp	r5, #0
   30cd4:	bne	30d80 <__assert_fail@plt+0x1c728>
   30cd8:	ldr	r2, [r0, #44]	; 0x2c
   30cdc:	ldr	r3, [r0, #48]	; 0x30
   30ce0:	cmp	r2, r3
   30ce4:	bcs	30d48 <__assert_fail@plt+0x1c6f0>
   30ce8:	cmp	r6, #0
   30cec:	beq	30d40 <__assert_fail@plt+0x1c6e8>
   30cf0:	ldr	r2, [r4, #44]	; 0x2c
   30cf4:	ldr	r3, [r4, #48]	; 0x30
   30cf8:	cmp	r2, r3
   30cfc:	bcs	30d40 <__assert_fail@plt+0x1c6e8>
   30d00:	mov	r0, #0
   30d04:	mov	r3, r0
   30d08:	b	30d20 <__assert_fail@plt+0x1c6c8>
   30d0c:	ldr	r5, [r4, #44]	; 0x2c
   30d10:	ldr	ip, [r4, #48]	; 0x30
   30d14:	add	r5, r3, r5
   30d18:	cmp	r5, ip
   30d1c:	bcs	30d3c <__assert_fail@plt+0x1c6e4>
   30d20:	ldr	ip, [r4, #52]	; 0x34
   30d24:	ldrb	r0, [ip, r0]
   30d28:	strb	r0, [r7, r3]
   30d2c:	add	r3, r3, #1
   30d30:	cmp	r3, r6
   30d34:	mov	r0, r3
   30d38:	bne	30d0c <__assert_fail@plt+0x1c6b4>
   30d3c:	mov	r5, r3
   30d40:	mov	r0, r5
   30d44:	pop	{r3, r4, r5, r6, r7, pc}
   30d48:	bl	2f44c <__assert_fail@plt+0x1adf4>
   30d4c:	cmn	r0, #1
   30d50:	beq	30d80 <__assert_fail@plt+0x1c728>
   30d54:	ldr	r3, [r4, #44]	; 0x2c
   30d58:	cmp	r3, #1
   30d5c:	streq	r5, [r4, #44]	; 0x2c
   30d60:	beq	30ce8 <__assert_fail@plt+0x1c690>
   30d64:	movw	r0, #33512	; 0x82e8
   30d68:	movw	r1, #31792	; 0x7c30
   30d6c:	movt	r0, #4
   30d70:	movt	r1, #4
   30d74:	movw	r2, #2043	; 0x7fb
   30d78:	ldr	r3, [pc, #8]	; 30d88 <__assert_fail@plt+0x1c730>
   30d7c:	bl	14658 <__assert_fail@plt>
   30d80:	mvn	r5, #0
   30d84:	b	30d40 <__assert_fail@plt+0x1c6e8>
   30d88:			; <UNDEFINED> instruction: 0x00047bb4
   30d8c:	ldr	r3, [r0, #36]	; 0x24
   30d90:	push	{r4, lr}
   30d94:	cmp	r3, #0
   30d98:	sub	sp, sp, #8
   30d9c:	mov	r4, r0
   30da0:	bne	30e14 <__assert_fail@plt+0x1c7bc>
   30da4:	ldr	r3, [r0, #48]	; 0x30
   30da8:	ldr	r2, [r0, #40]	; 0x28
   30dac:	cmp	r3, r2
   30db0:	beq	30dd8 <__assert_fail@plt+0x1c780>
   30db4:	cmp	r2, r3
   30db8:	bls	30df8 <__assert_fail@plt+0x1c7a0>
   30dbc:	ldr	r2, [r4, #52]	; 0x34
   30dc0:	mov	r0, #0
   30dc4:	add	ip, r3, #1
   30dc8:	str	ip, [r4, #48]	; 0x30
   30dcc:	strb	r1, [r2, r3]
   30dd0:	add	sp, sp, #8
   30dd4:	pop	{r4, pc}
   30dd8:	str	r1, [sp, #4]
   30ddc:	bl	30350 <__assert_fail@plt+0x1bcf8>
   30de0:	ldr	r1, [sp, #4]
   30de4:	cmp	r0, #0
   30de8:	bne	30dd0 <__assert_fail@plt+0x1c778>
   30dec:	ldr	r3, [r4, #48]	; 0x30
   30df0:	ldr	r2, [r4, #40]	; 0x28
   30df4:	b	30db4 <__assert_fail@plt+0x1c75c>
   30df8:	movw	r0, #33528	; 0x82f8
   30dfc:	movw	r1, #31792	; 0x7c30
   30e00:	movt	r0, #4
   30e04:	movt	r1, #4
   30e08:	movw	r2, #2067	; 0x813
   30e0c:	ldr	r3, [pc, #20]	; 30e28 <__assert_fail@plt+0x1c7d0>
   30e10:	bl	14658 <__assert_fail@plt>
   30e14:	movw	r0, #31792	; 0x7c30
   30e18:	movw	r1, #2061	; 0x80d
   30e1c:	movt	r0, #4
   30e20:	ldr	r2, [pc, #4]	; 30e2c <__assert_fail@plt+0x1c7d4>
   30e24:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   30e28:	ldrdeq	r7, [r4], -r0
   30e2c:	andeq	r7, r4, r0, asr #23
   30e30:	push	{r3, r4, r5, r6, r7, lr}
   30e34:	mov	r4, r0
   30e38:	ldr	r3, [r0, #36]	; 0x24
   30e3c:	mov	r7, r1
   30e40:	mov	r5, r2
   30e44:	cmp	r3, #0
   30e48:	bne	30ebc <__assert_fail@plt+0x1c864>
   30e4c:	cmp	r2, #0
   30e50:	beq	30eac <__assert_fail@plt+0x1c854>
   30e54:	ldr	r3, [r4, #48]	; 0x30
   30e58:	ldr	r6, [r4, #40]	; 0x28
   30e5c:	cmp	r3, r6
   30e60:	bcc	30e78 <__assert_fail@plt+0x1c820>
   30e64:	mov	r0, r4
   30e68:	bl	30350 <__assert_fail@plt+0x1bcf8>
   30e6c:	cmp	r0, #0
   30e70:	beq	30e54 <__assert_fail@plt+0x1c7fc>
   30e74:	pop	{r3, r4, r5, r6, r7, pc}
   30e78:	rsb	r6, r3, r6
   30e7c:	ldr	r0, [r4, #52]	; 0x34
   30e80:	cmp	r5, r6
   30e84:	movcc	r6, r5
   30e88:	mov	r1, r7
   30e8c:	add	r0, r0, r3
   30e90:	mov	r2, r6
   30e94:	bl	13ba8 <memcpy@plt>
   30e98:	ldr	r3, [r4, #48]	; 0x30
   30e9c:	subs	r5, r5, r6
   30ea0:	add	r3, r3, r6
   30ea4:	str	r3, [r4, #48]	; 0x30
   30ea8:	bne	30eb4 <__assert_fail@plt+0x1c85c>
   30eac:	mov	r0, #0
   30eb0:	pop	{r3, r4, r5, r6, r7, pc}
   30eb4:	add	r7, r7, r6
   30eb8:	b	30e64 <__assert_fail@plt+0x1c80c>
   30ebc:	movw	r0, #31792	; 0x7c30
   30ec0:	mov	r1, #2080	; 0x820
   30ec4:	movt	r0, #4
   30ec8:	ldr	r2, [pc]	; 30ed0 <__assert_fail@plt+0x1c878>
   30ecc:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   30ed0:	andeq	r7, r4, r0, ror #23
   30ed4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   30ed8:	cmp	r1, #3
   30edc:	ldr	ip, [sp, #40]	; 0x28
   30ee0:	mov	r7, r0
   30ee4:	mov	r9, r2
   30ee8:	mov	r8, r3
   30eec:	ldr	r6, [ip]
   30ef0:	beq	30f20 <__assert_fail@plt+0x1c8c8>
   30ef4:	cmp	r1, #4
   30ef8:	beq	31250 <__assert_fail@plt+0x1cbf8>
   30efc:	cmp	r1, #1
   30f00:	beq	3136c <__assert_fail@plt+0x1cd14>
   30f04:	cmp	r1, #5
   30f08:	beq	31510 <__assert_fail@plt+0x1ceb8>
   30f0c:	cmp	r1, #2
   30f10:	movne	r4, #0
   30f14:	beq	313c4 <__assert_fail@plt+0x1cd6c>
   30f18:	mov	r0, r4
   30f1c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   30f20:	cmp	r6, #0
   30f24:	beq	31718 <__assert_fail@plt+0x1d0c0>
   30f28:	ldr	r4, [r0, #28]
   30f2c:	mov	sl, #0
   30f30:	mov	r5, #1
   30f34:	mov	fp, #2
   30f38:	subs	r4, r4, sl
   30f3c:	mvnne	r4, #0
   30f40:	adds	r3, r6, #0
   30f44:	movne	r3, #1
   30f48:	cmp	r4, #0
   30f4c:	movne	r3, #0
   30f50:	cmp	r3, #0
   30f54:	beq	310fc <__assert_fail@plt+0x1caa4>
   30f58:	ldr	r3, [r7, #4]
   30f5c:	cmp	r3, #0
   30f60:	bne	30fdc <__assert_fail@plt+0x1c984>
   30f64:	ldr	r2, [r7, #12]
   30f68:	cmp	r2, #2
   30f6c:	beq	310e8 <__assert_fail@plt+0x1ca90>
   30f70:	cmp	r2, #0
   30f74:	beq	31734 <__assert_fail@plt+0x1d0dc>
   30f78:	ldr	r0, [r7, #24]
   30f7c:	cmp	r0, #0
   30f80:	strne	r3, [r7, #24]
   30f84:	bne	30fc4 <__assert_fail@plt+0x1c96c>
   30f88:	ldr	r3, [r9, #32]
   30f8c:	cmp	r3, #0
   30f90:	bne	3110c <__assert_fail@plt+0x1cab4>
   30f94:	ldr	r1, [r9, #44]	; 0x2c
   30f98:	ldr	r3, [r9, #48]	; 0x30
   30f9c:	cmp	r1, r3
   30fa0:	bcs	3110c <__assert_fail@plt+0x1cab4>
   30fa4:	ldrd	r2, [r9, #16]
   30fa8:	add	ip, r1, #1
   30fac:	ldr	r0, [r9, #52]	; 0x34
   30fb0:	adds	r2, r2, #1
   30fb4:	str	ip, [r9, #44]	; 0x2c
   30fb8:	adc	r3, r3, #0
   30fbc:	strd	r2, [r9, #16]
   30fc0:	ldrb	r0, [r0, r1]
   30fc4:	cmp	r0, #191	; 0xbf
   30fc8:	bgt	31080 <__assert_fail@plt+0x1ca28>
   30fcc:	cmp	r0, #0
   30fd0:	str	r0, [r7, #4]
   30fd4:	str	fp, [r7, #12]
   30fd8:	beq	310e8 <__assert_fail@plt+0x1ca90>
   30fdc:	mov	r4, #0
   30fe0:	adds	r3, r6, #0
   30fe4:	movne	r3, #1
   30fe8:	cmp	r4, #0
   30fec:	movne	r3, #0
   30ff0:	cmp	r3, #0
   30ff4:	beq	30f40 <__assert_fail@plt+0x1c8e8>
   30ff8:	ldr	r2, [r7, #4]
   30ffc:	cmp	r2, #0
   31000:	beq	31078 <__assert_fail@plt+0x1ca20>
   31004:	cmp	r6, r2
   31008:	movcc	r4, r6
   3100c:	movcs	r4, r2
   31010:	mov	r0, r9
   31014:	mov	r1, r8
   31018:	mov	r2, r4
   3101c:	bl	30b7c <__assert_fail@plt+0x1c524>
   31020:	cmp	r4, r0
   31024:	ble	31058 <__assert_fail@plt+0x1ca00>
   31028:	cmn	r0, #1
   3102c:	ldr	r1, [r7, #4]
   31030:	mov	r4, #89	; 0x59
   31034:	movne	r3, r0
   31038:	moveq	r3, #0
   3103c:	movw	r0, #33672	; 0x8388
   31040:	add	r2, r3, r6
   31044:	movt	r0, #4
   31048:	add	r3, r3, r1
   3104c:	mov	r1, r7
   31050:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   31054:	b	30fe0 <__assert_fail@plt+0x1c988>
   31058:	ldr	r3, [r7, #4]
   3105c:	rsb	r6, r0, r6
   31060:	add	r8, r8, r0
   31064:	add	sl, sl, r0
   31068:	mov	r4, #0
   3106c:	rsb	r0, r0, r3
   31070:	str	r0, [r7, #4]
   31074:	b	30fe0 <__assert_fail@plt+0x1c988>
   31078:	mov	r4, r2
   3107c:	b	30f40 <__assert_fail@plt+0x1c8e8>
   31080:	cmp	r0, #223	; 0xdf
   31084:	bgt	31130 <__assert_fail@plt+0x1cad8>
   31088:	ldr	r3, [r9, #32]
   3108c:	sub	r0, r0, #192	; 0xc0
   31090:	cmp	r3, #0
   31094:	lsl	ip, r0, #8
   31098:	str	ip, [r7, #4]
   3109c:	bne	31238 <__assert_fail@plt+0x1cbe0>
   310a0:	ldr	r1, [r9, #44]	; 0x2c
   310a4:	ldr	r3, [r9, #48]	; 0x30
   310a8:	cmp	r1, r3
   310ac:	bcs	31238 <__assert_fail@plt+0x1cbe0>
   310b0:	ldrd	r2, [r9, #16]
   310b4:	add	r4, r1, #1
   310b8:	ldr	r0, [r9, #52]	; 0x34
   310bc:	adds	r2, r2, #1
   310c0:	str	r4, [r9, #44]	; 0x2c
   310c4:	adc	r3, r3, #0
   310c8:	strd	r2, [r9, #16]
   310cc:	ldrb	r0, [r0, r1]
   310d0:	add	r3, ip, #192	; 0xc0
   310d4:	str	fp, [r7, #12]
   310d8:	add	r3, r3, r0
   310dc:	str	r3, [r7, #4]
   310e0:	cmp	r3, #0
   310e4:	bne	30fdc <__assert_fail@plt+0x1c984>
   310e8:	cmp	sl, #0
   310ec:	movne	r4, #0
   310f0:	mvneq	r4, #0
   310f4:	mov	r3, #1
   310f8:	str	r3, [r7, #28]
   310fc:	ldr	ip, [sp, #40]	; 0x28
   31100:	mov	r0, r4
   31104:	str	sl, [ip]
   31108:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3110c:	mov	r0, r9
   31110:	bl	30b0c <__assert_fail@plt+0x1c4b4>
   31114:	cmn	r0, #1
   31118:	bne	30fc4 <__assert_fail@plt+0x1c96c>
   3111c:	movw	r0, #33552	; 0x8310
   31120:	movt	r0, #4
   31124:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   31128:	mov	r4, #89	; 0x59
   3112c:	b	310fc <__assert_fail@plt+0x1caa4>
   31130:	cmp	r0, #255	; 0xff
   31134:	andne	r3, r0, #31
   31138:	lslne	r3, r5, r3
   3113c:	strne	r3, [r7, #4]
   31140:	bne	30fdc <__assert_fail@plt+0x1c984>
   31144:	ldr	r3, [r9, #32]
   31148:	cmp	r3, #0
   3114c:	bne	31438 <__assert_fail@plt+0x1cde0>
   31150:	ldr	r0, [r9, #44]	; 0x2c
   31154:	ldr	r1, [r9, #48]	; 0x30
   31158:	cmp	r0, r1
   3115c:	bcs	31438 <__assert_fail@plt+0x1cde0>
   31160:	ldrd	r2, [r9, #16]
   31164:	add	r4, r0, #1
   31168:	ldr	ip, [r9, #52]	; 0x34
   3116c:	adds	r2, r2, #1
   31170:	str	r4, [r9, #44]	; 0x2c
   31174:	adc	r3, r3, #0
   31178:	strd	r2, [r9, #16]
   3117c:	ldrb	r4, [ip, r0]
   31180:	lsl	r4, r4, #24
   31184:	str	r4, [r7, #4]
   31188:	ldr	r0, [r9, #44]	; 0x2c
   3118c:	cmp	r0, r1
   31190:	bcs	314ec <__assert_fail@plt+0x1ce94>
   31194:	ldrd	r2, [r9, #16]
   31198:	add	ip, r0, #1
   3119c:	str	ip, [r9, #44]	; 0x2c
   311a0:	adds	r2, r2, #1
   311a4:	adc	r3, r3, #0
   311a8:	strd	r2, [r9, #16]
   311ac:	ldr	r2, [r9, #52]	; 0x34
   311b0:	ldrb	r3, [r2, r0]
   311b4:	orr	r4, r4, r3, lsl #16
   311b8:	str	r4, [r7, #4]
   311bc:	ldr	r0, [r9, #44]	; 0x2c
   311c0:	cmp	r0, r1
   311c4:	bcs	314c8 <__assert_fail@plt+0x1ce70>
   311c8:	ldrd	r2, [r9, #16]
   311cc:	add	ip, r0, #1
   311d0:	str	ip, [r9, #44]	; 0x2c
   311d4:	ldr	ip, [r9, #52]	; 0x34
   311d8:	adds	r2, r2, #1
   311dc:	adc	r3, r3, #0
   311e0:	strd	r2, [r9, #16]
   311e4:	ldrb	r3, [ip, r0]
   311e8:	orr	r0, r4, r3, lsl #8
   311ec:	str	r0, [r7, #4]
   311f0:	ldr	ip, [r9, #44]	; 0x2c
   311f4:	cmp	ip, r1
   311f8:	bcs	314b0 <__assert_fail@plt+0x1ce58>
   311fc:	ldrd	r2, [r9, #16]
   31200:	mov	r1, r0
   31204:	ldr	r4, [r9, #52]	; 0x34
   31208:	add	r0, ip, #1
   3120c:	adds	r2, r2, #1
   31210:	str	r0, [r9, #44]	; 0x2c
   31214:	adc	r3, r3, #0
   31218:	strd	r2, [r9, #16]
   3121c:	ldrb	r0, [r4, ip]
   31220:	orr	r1, r0, r1
   31224:	str	fp, [r7, #12]
   31228:	cmp	r1, #0
   3122c:	str	r1, [r7, #4]
   31230:	bne	30fdc <__assert_fail@plt+0x1c984>
   31234:	b	310e8 <__assert_fail@plt+0x1ca90>
   31238:	mov	r0, r9
   3123c:	bl	30b0c <__assert_fail@plt+0x1c4b4>
   31240:	cmn	r0, #1
   31244:	beq	315e0 <__assert_fail@plt+0x1cf88>
   31248:	ldr	ip, [r7, #4]
   3124c:	b	310d0 <__assert_fail@plt+0x1ca78>
   31250:	ldr	r3, [r0, #12]
   31254:	cmp	r3, #0
   31258:	beq	317a8 <__assert_fail@plt+0x1d150>
   3125c:	ldr	r3, [r0, #20]
   31260:	cmp	r3, #512	; 0x200
   31264:	add	sl, r6, r3
   31268:	bhi	317bc <__assert_fail@plt+0x1d164>
   3126c:	cmp	sl, #512	; 0x200
   31270:	bcc	31400 <__assert_fail@plt+0x1cda8>
   31274:	mov	r4, #0
   31278:	mov	r5, r4
   3127c:	cmp	sl, #1024	; 0x400
   31280:	bcc	314a4 <__assert_fail@plt+0x1ce4c>
   31284:	mov	r3, #1024	; 0x400
   31288:	mov	r2, #10
   3128c:	b	31294 <__assert_fail@plt+0x1cc3c>
   31290:	mov	r2, ip
   31294:	lsl	r3, r3, #1
   31298:	add	ip, r2, #1
   3129c:	cmp	sl, r3
   312a0:	bcs	31290 <__assert_fail@plt+0x1cc38>
   312a4:	cmp	r2, #31
   312a8:	lsr	r6, r3, #1
   312ac:	bgt	31764 <__assert_fail@plt+0x1d10c>
   312b0:	orr	r1, r2, #224	; 0xe0
   312b4:	mov	r0, r9
   312b8:	bl	30d8c <__assert_fail@plt+0x1c734>
   312bc:	ldr	r2, [r7, #20]
   312c0:	cmp	r2, #0
   312c4:	beq	312ec <__assert_fail@plt+0x1cc94>
   312c8:	cmp	r2, #512	; 0x200
   312cc:	bne	31748 <__assert_fail@plt+0x1d0f0>
   312d0:	mov	r0, r9
   312d4:	ldr	r1, [r7, #16]
   312d8:	bl	30e30 <__assert_fail@plt+0x1c7d8>
   312dc:	cmp	r0, #0
   312e0:	bne	31490 <__assert_fail@plt+0x1ce38>
   312e4:	sub	sl, sl, #512	; 0x200
   312e8:	str	r5, [r7, #20]
   312ec:	cmp	sl, r6
   312f0:	movcc	r6, sl
   312f4:	cmp	r6, #0
   312f8:	bne	3145c <__assert_fail@plt+0x1ce04>
   312fc:	rsbs	r3, r4, #1
   31300:	movcc	r3, #0
   31304:	rsb	sl, r6, sl
   31308:	add	r8, r8, r6
   3130c:	cmp	sl, #512	; 0x200
   31310:	movcc	r2, #0
   31314:	andcs	r2, r3, #1
   31318:	cmp	r2, #0
   3131c:	bne	3127c <__assert_fail@plt+0x1cc24>
   31320:	cmp	sl, #0
   31324:	moveq	r3, #0
   31328:	andne	r3, r3, #1
   3132c:	cmp	r3, #0
   31330:	beq	30f18 <__assert_fail@plt+0x1c8c0>
   31334:	ldr	r3, [r7, #20]
   31338:	cmp	r3, #0
   3133c:	bne	316fc <__assert_fail@plt+0x1d0a4>
   31340:	cmp	sl, #512	; 0x200
   31344:	bcs	316e0 <__assert_fail@plt+0x1d088>
   31348:	ldr	r3, [r7, #16]
   3134c:	cmp	r3, #0
   31350:	beq	316cc <__assert_fail@plt+0x1d074>
   31354:	mov	r0, r3
   31358:	mov	r1, r8
   3135c:	mov	r2, sl
   31360:	bl	13ba8 <memcpy@plt>
   31364:	str	sl, [r7, #20]
   31368:	b	30f18 <__assert_fail@plt+0x1c8c0>
   3136c:	movw	r3, #48260	; 0xbc84
   31370:	movt	r3, #5
   31374:	ldr	r3, [r3]
   31378:	cmp	r3, #0
   3137c:	bne	31524 <__assert_fail@plt+0x1cecc>
   31380:	ldr	r3, [r7, #12]
   31384:	cmp	r3, #0
   31388:	movne	r3, #0
   3138c:	strne	r3, [r7, #8]
   31390:	bne	313a8 <__assert_fail@plt+0x1cd50>
   31394:	ldr	r2, [r7]
   31398:	cmp	r2, #1
   3139c:	streq	r3, [r7, #4]
   313a0:	ldrne	r3, [r7, #4]
   313a4:	str	r3, [r7, #8]
   313a8:	mov	r3, #0
   313ac:	str	r3, [r7, #28]
   313b0:	mov	r4, r3
   313b4:	str	r3, [r7, #16]
   313b8:	str	r3, [r7, #20]
   313bc:	mov	r0, r4
   313c0:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   313c4:	ldr	r3, [r0]
   313c8:	cmp	r3, #2
   313cc:	beq	31538 <__assert_fail@plt+0x1cee0>
   313d0:	ldr	r4, [r0, #4]
   313d4:	cmp	r4, #0
   313d8:	bne	315cc <__assert_fail@plt+0x1cf74>
   313dc:	movw	r3, #48260	; 0xbc84
   313e0:	movt	r3, #5
   313e4:	ldr	r3, [r3]
   313e8:	cmp	r3, #0
   313ec:	bne	315b8 <__assert_fail@plt+0x1cf60>
   313f0:	mov	r0, r7
   313f4:	bl	13c44 <gcry_free@plt>
   313f8:	mov	r0, r4
   313fc:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31400:	ldr	r2, [r0, #16]
   31404:	cmp	r2, #0
   31408:	movne	r0, r3
   3140c:	beq	315f4 <__assert_fail@plt+0x1cf9c>
   31410:	add	r0, r2, r0
   31414:	mov	r1, r8
   31418:	mov	r2, r6
   3141c:	mov	r4, #0
   31420:	bl	13ba8 <memcpy@plt>
   31424:	ldr	r3, [r7, #20]
   31428:	mov	r0, r4
   3142c:	add	r6, r3, r6
   31430:	str	r6, [r7, #20]
   31434:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31438:	mov	r0, r9
   3143c:	bl	30b0c <__assert_fail@plt+0x1c4b4>
   31440:	ldr	r3, [r9, #32]
   31444:	cmp	r3, #0
   31448:	lsl	r4, r0, #24
   3144c:	str	r4, [r7, #4]
   31450:	bne	314ec <__assert_fail@plt+0x1ce94>
   31454:	ldr	r1, [r9, #48]	; 0x30
   31458:	b	31188 <__assert_fail@plt+0x1cb30>
   3145c:	mov	r0, r9
   31460:	mov	r1, r8
   31464:	mov	r2, r6
   31468:	bl	30e30 <__assert_fail@plt+0x1c7d8>
   3146c:	cmp	r0, #0
   31470:	beq	312fc <__assert_fail@plt+0x1cca4>
   31474:	bl	14580 <gpg_err_code_from_syserror@plt>
   31478:	cmp	r0, #0
   3147c:	moveq	r4, r0
   31480:	moveq	r3, #1
   31484:	beq	31304 <__assert_fail@plt+0x1ccac>
   31488:	uxth	r4, r0
   3148c:	b	312fc <__assert_fail@plt+0x1cca4>
   31490:	bl	14580 <gpg_err_code_from_syserror@plt>
   31494:	cmp	r0, #0
   31498:	uxthne	r4, r0
   3149c:	moveq	r4, r0
   314a0:	b	312e4 <__assert_fail@plt+0x1cc8c>
   314a4:	mov	r1, #233	; 0xe9
   314a8:	mov	r6, #512	; 0x200
   314ac:	b	312b4 <__assert_fail@plt+0x1cc5c>
   314b0:	mov	r0, r9
   314b4:	bl	30b0c <__assert_fail@plt+0x1c4b4>
   314b8:	cmn	r0, #1
   314bc:	beq	316b8 <__assert_fail@plt+0x1d060>
   314c0:	ldr	r1, [r7, #4]
   314c4:	b	31220 <__assert_fail@plt+0x1cbc8>
   314c8:	mov	r0, r9
   314cc:	bl	30b0c <__assert_fail@plt+0x1c4b4>
   314d0:	ldr	r3, [r9, #32]
   314d4:	cmp	r3, #0
   314d8:	orr	r0, r4, r0, lsl #8
   314dc:	str	r0, [r7, #4]
   314e0:	bne	314b0 <__assert_fail@plt+0x1ce58>
   314e4:	ldr	r1, [r9, #48]	; 0x30
   314e8:	b	311f0 <__assert_fail@plt+0x1cb98>
   314ec:	mov	r0, r9
   314f0:	bl	30b0c <__assert_fail@plt+0x1c4b4>
   314f4:	ldr	r3, [r9, #32]
   314f8:	cmp	r3, #0
   314fc:	orr	r4, r4, r0, lsl #16
   31500:	str	r4, [r7, #4]
   31504:	bne	314c8 <__assert_fail@plt+0x1ce70>
   31508:	ldr	r1, [r9, #48]	; 0x30
   3150c:	b	311bc <__assert_fail@plt+0x1cb64>
   31510:	movw	r3, #33820	; 0x841c
   31514:	mov	r4, #0
   31518:	movt	r3, #4
   3151c:	str	r3, [r8]
   31520:	b	30f18 <__assert_fail@plt+0x1c8c0>
   31524:	movw	r0, #33796	; 0x8404
   31528:	mov	r1, r7
   3152c:	movt	r0, #4
   31530:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   31534:	b	31380 <__assert_fail@plt+0x1cd28>
   31538:	ldr	r3, [r0, #12]
   3153c:	cmp	r3, #0
   31540:	beq	31794 <__assert_fail@plt+0x1d13c>
   31544:	ldr	r5, [r0, #20]
   31548:	cmp	r5, #191	; 0xbf
   3154c:	bls	316a4 <__assert_fail@plt+0x1d04c>
   31550:	cmp	r5, #8384	; 0x20c0
   31554:	bcs	3160c <__assert_fail@plt+0x1cfb4>
   31558:	sub	r4, r5, #192	; 0xc0
   3155c:	mov	r0, r2
   31560:	lsr	r1, r4, #8
   31564:	add	r1, r1, #192	; 0xc0
   31568:	bl	30d8c <__assert_fail@plt+0x1c734>
   3156c:	cmp	r0, #0
   31570:	beq	31780 <__assert_fail@plt+0x1d128>
   31574:	bl	14148 <__errno_location@plt>
   31578:	ldr	r0, [r0]
   3157c:	bl	13fa4 <strerror@plt>
   31580:	mov	r1, r0
   31584:	movw	r0, #33836	; 0x842c
   31588:	movt	r0, #4
   3158c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   31590:	bl	14580 <gpg_err_code_from_syserror@plt>
   31594:	cmp	r0, #0
   31598:	uxthne	r4, r0
   3159c:	moveq	r4, r0
   315a0:	ldr	r0, [r7, #16]
   315a4:	bl	13c44 <gcry_free@plt>
   315a8:	mov	r3, #0
   315ac:	str	r3, [r7, #16]
   315b0:	str	r3, [r7, #20]
   315b4:	b	313dc <__assert_fail@plt+0x1cd84>
   315b8:	movw	r0, #33900	; 0x846c
   315bc:	mov	r1, r7
   315c0:	movt	r0, #4
   315c4:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   315c8:	b	313f0 <__assert_fail@plt+0x1cd98>
   315cc:	movw	r0, #33868	; 0x844c
   315d0:	movt	r0, #4
   315d4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   315d8:	mov	r4, #0
   315dc:	b	313dc <__assert_fail@plt+0x1cd84>
   315e0:	movw	r0, #33592	; 0x8338
   315e4:	movt	r0, #4
   315e8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   315ec:	mov	r4, #89	; 0x59
   315f0:	b	310fc <__assert_fail@plt+0x1caa4>
   315f4:	mov	r0, #512	; 0x200
   315f8:	bl	1398c <gcry_xmalloc@plt>
   315fc:	mov	r2, r0
   31600:	str	r0, [r7, #16]
   31604:	ldr	r0, [r7, #20]
   31608:	b	31410 <__assert_fail@plt+0x1cdb8>
   3160c:	mov	r0, r2
   31610:	mov	r1, #255	; 0xff
   31614:	bl	30d8c <__assert_fail@plt+0x1c734>
   31618:	cmp	r0, #0
   3161c:	bne	31574 <__assert_fail@plt+0x1cf1c>
   31620:	mov	r0, r9
   31624:	lsr	r1, r5, #24
   31628:	bl	30d8c <__assert_fail@plt+0x1c734>
   3162c:	cmp	r0, #0
   31630:	bne	31574 <__assert_fail@plt+0x1cf1c>
   31634:	mov	r0, r9
   31638:	ubfx	r1, r5, #16, #8
   3163c:	bl	30d8c <__assert_fail@plt+0x1c734>
   31640:	cmp	r0, #0
   31644:	bne	31574 <__assert_fail@plt+0x1cf1c>
   31648:	mov	r0, r9
   3164c:	ubfx	r1, r5, #8, #8
   31650:	bl	30d8c <__assert_fail@plt+0x1c734>
   31654:	cmp	r0, #0
   31658:	bne	31574 <__assert_fail@plt+0x1cf1c>
   3165c:	mov	r0, r9
   31660:	uxtb	r1, r5
   31664:	bl	30d8c <__assert_fail@plt+0x1c734>
   31668:	mov	r4, r0
   3166c:	rsbs	r3, r4, #1
   31670:	movcc	r3, #0
   31674:	cmp	r5, #0
   31678:	moveq	r3, #0
   3167c:	cmp	r3, #0
   31680:	beq	31698 <__assert_fail@plt+0x1d040>
   31684:	mov	r0, r9
   31688:	mov	r2, r5
   3168c:	ldr	r1, [r7, #16]
   31690:	bl	30e30 <__assert_fail@plt+0x1c7d8>
   31694:	mov	r4, r0
   31698:	cmp	r4, #0
   3169c:	beq	315a0 <__assert_fail@plt+0x1cf48>
   316a0:	b	31574 <__assert_fail@plt+0x1cf1c>
   316a4:	mov	r0, r2
   316a8:	mov	r1, r5
   316ac:	bl	30d8c <__assert_fail@plt+0x1c734>
   316b0:	mov	r4, r0
   316b4:	b	3166c <__assert_fail@plt+0x1d014>
   316b8:	movw	r0, #33632	; 0x8360
   316bc:	movt	r0, #4
   316c0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   316c4:	mov	r4, #89	; 0x59
   316c8:	b	310fc <__assert_fail@plt+0x1caa4>
   316cc:	mov	r0, #512	; 0x200
   316d0:	bl	1398c <gcry_xmalloc@plt>
   316d4:	mov	r3, r0
   316d8:	str	r0, [r7, #16]
   316dc:	b	31354 <__assert_fail@plt+0x1ccfc>
   316e0:	movw	r0, #33780	; 0x83f4
   316e4:	movw	r1, #31792	; 0x7c30
   316e8:	movt	r0, #4
   316ec:	movt	r1, #4
   316f0:	movw	r2, #981	; 0x3d5
   316f4:	ldr	r3, [pc, #220]	; 317d8 <__assert_fail@plt+0x1d180>
   316f8:	bl	14658 <__assert_fail@plt>
   316fc:	movw	r0, #33768	; 0x83e8
   31700:	movw	r1, #31792	; 0x7c30
   31704:	movt	r0, #4
   31708:	movt	r1, #4
   3170c:	mov	r2, #980	; 0x3d4
   31710:	ldr	r3, [pc, #192]	; 317d8 <__assert_fail@plt+0x1d180>
   31714:	bl	14658 <__assert_fail@plt>
   31718:	movw	r0, #33544	; 0x8308
   3171c:	movw	r1, #31792	; 0x7c30
   31720:	movt	r0, #4
   31724:	movt	r1, #4
   31728:	mov	r2, #812	; 0x32c
   3172c:	ldr	r3, [pc, #164]	; 317d8 <__assert_fail@plt+0x1d180>
   31730:	bl	14658 <__assert_fail@plt>
   31734:	movw	r0, #31792	; 0x7c30
   31738:	movw	r1, #901	; 0x385
   3173c:	movt	r0, #4
   31740:	ldr	r2, [pc, #148]	; 317dc <__assert_fail@plt+0x1d184>
   31744:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   31748:	movw	r0, #33756	; 0x83dc
   3174c:	movw	r1, #31792	; 0x7c30
   31750:	movt	r0, #4
   31754:	movt	r1, #4
   31758:	movw	r2, #963	; 0x3c3
   3175c:	ldr	r3, [pc, #116]	; 317d8 <__assert_fail@plt+0x1d180>
   31760:	bl	14658 <__assert_fail@plt>
   31764:	movw	r0, #33744	; 0x83d0
   31768:	movw	r1, #31792	; 0x7c30
   3176c:	movt	r0, #4
   31770:	movt	r1, #4
   31774:	movw	r2, #958	; 0x3be
   31778:	ldr	r3, [pc, #88]	; 317d8 <__assert_fail@plt+0x1d180>
   3177c:	bl	14658 <__assert_fail@plt>
   31780:	uxtb	r1, r4
   31784:	mov	r0, r9
   31788:	bl	30d8c <__assert_fail@plt+0x1c734>
   3178c:	mov	r4, r0
   31790:	b	3166c <__assert_fail@plt+0x1d014>
   31794:	movw	r0, #31792	; 0x7c30
   31798:	movw	r1, #1058	; 0x422
   3179c:	movt	r0, #4
   317a0:	ldr	r2, [pc, #52]	; 317dc <__assert_fail@plt+0x1d184>
   317a4:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   317a8:	movw	r0, #31792	; 0x7c30
   317ac:	movw	r1, #990	; 0x3de
   317b0:	movt	r0, #4
   317b4:	ldr	r2, [pc, #32]	; 317dc <__assert_fail@plt+0x1d184>
   317b8:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   317bc:	movw	r0, #33724	; 0x83bc
   317c0:	movw	r1, #31792	; 0x7c30
   317c4:	movt	r0, #4
   317c8:	movt	r1, #4
   317cc:	movw	r2, #934	; 0x3a6
   317d0:	ldr	r3, [pc]	; 317d8 <__assert_fail@plt+0x1d180>
   317d4:	bl	14658 <__assert_fail@plt>
   317d8:	andeq	r7, r4, ip, ror #23
   317dc:	strdeq	r7, [r4], -ip
   317e0:	push	{r3, r4, r5, lr}
   317e4:	mov	r4, r1
   317e8:	ldrb	r1, [r1]
   317ec:	mov	r5, r0
   317f0:	cmp	r1, #0
   317f4:	beq	31814 <__assert_fail@plt+0x1d1bc>
   317f8:	mov	r0, r5
   317fc:	bl	30d8c <__assert_fail@plt+0x1c734>
   31800:	cmp	r0, #0
   31804:	popne	{r3, r4, r5, pc}
   31808:	ldrb	r1, [r4, #1]!
   3180c:	cmp	r1, #0
   31810:	bne	317f8 <__assert_fail@plt+0x1d1a0>
   31814:	mov	r0, #0
   31818:	pop	{r3, r4, r5, pc}
   3181c:	push	{r3, r4, r5, lr}
   31820:	mov	r4, r1
   31824:	ldr	r3, [r1, #80]	; 0x50
   31828:	mov	r5, r0
   3182c:	cmp	r3, #0
   31830:	beq	3184c <__assert_fail@plt+0x1d1f4>
   31834:	mov	r0, r4
   31838:	ldr	r1, [r4, #64]	; 0x40
   3183c:	bl	30894 <__assert_fail@plt+0x1c23c>
   31840:	ldr	r3, [r4, #80]	; 0x50
   31844:	cmp	r3, #0
   31848:	bne	31834 <__assert_fail@plt+0x1d1dc>
   3184c:	mov	r0, r5
   31850:	ldr	r1, [r4, #52]	; 0x34
   31854:	ldr	r2, [r4, #48]	; 0x30
   31858:	pop	{r3, r4, r5, lr}
   3185c:	b	30e30 <__assert_fail@plt+0x1c7d8>
   31860:	mov	r3, r0
   31864:	mov	r0, r1
   31868:	push	{r4, lr}
   3186c:	ldr	r4, [r3, #48]	; 0x30
   31870:	ldr	r1, [r3, #52]	; 0x34
   31874:	cmp	r2, r4
   31878:	movcc	r4, r2
   3187c:	mov	r2, r4
   31880:	bl	13ba8 <memcpy@plt>
   31884:	mov	r0, r4
   31888:	pop	{r4, pc}
   3188c:	ldr	r3, [r0, #80]	; 0x50
   31890:	push	{r4, lr}
   31894:	cmp	r3, #0
   31898:	mov	r4, r0
   3189c:	popeq	{r4, pc}
   318a0:	mov	r0, r4
   318a4:	ldr	r1, [r4, #64]	; 0x40
   318a8:	bl	30894 <__assert_fail@plt+0x1c23c>
   318ac:	ldr	r3, [r4, #80]	; 0x50
   318b0:	cmp	r3, #0
   318b4:	bne	318a0 <__assert_fail@plt+0x1d248>
   318b8:	pop	{r4, pc}
   318bc:	push	{r4, r5, r6, r7, r8, r9}
   318c0:	orrs	r1, r2, r3
   318c4:	ldrd	r6, [r0, #24]
   318c8:	mov	r8, #0
   318cc:	ldr	r1, [r0, #32]
   318d0:	mov	r9, #0
   318d4:	ldrd	r4, [r0, #16]
   318d8:	orrne	r1, r1, #1
   318dc:	biceq	r1, r1, #1
   318e0:	adds	r4, r4, r6
   318e4:	strd	r8, [r0, #16]
   318e8:	adc	r5, r5, r7
   318ec:	str	r1, [r0, #32]
   318f0:	strd	r4, [r0, #24]
   318f4:	strd	r2, [r0, #8]
   318f8:	pop	{r4, r5, r6, r7, r8, r9}
   318fc:	bx	lr
   31900:	push	{r4, lr}
   31904:	movw	r4, #47296	; 0xb8c0
   31908:	movt	r4, #5
   3190c:	cmp	r1, #0
   31910:	sub	sp, sp, #112	; 0x70
   31914:	ldr	r3, [r4]
   31918:	str	r3, [sp, #108]	; 0x6c
   3191c:	movne	r3, #0
   31920:	strne	r3, [r1]
   31924:	ldr	r3, [r0, #36]	; 0x24
   31928:	cmp	r3, #0
   3192c:	beq	3195c <__assert_fail@plt+0x1d304>
   31930:	mov	r0, r3
   31934:	bl	14244 <fileno@plt>
   31938:	mov	r2, sp
   3193c:	mov	r1, r0
   31940:	mov	r0, #3
   31944:	bl	13ddc <__fxstat64@plt>
   31948:	cmp	r0, #0
   3194c:	bne	319b8 <__assert_fail@plt+0x1d360>
   31950:	ldrd	r0, [sp, #48]	; 0x30
   31954:	b	31984 <__assert_fail@plt+0x1d32c>
   31958:	mov	r0, r3
   3195c:	ldr	r3, [r0, #80]	; 0x50
   31960:	cmp	r3, #0
   31964:	bne	31958 <__assert_fail@plt+0x1d300>
   31968:	ldr	r2, [r0, #64]	; 0x40
   3196c:	movw	r3, #61716	; 0xf114
   31970:	movt	r3, #2
   31974:	cmp	r2, r3
   31978:	movne	r0, #0
   3197c:	movne	r1, #0
   31980:	beq	3199c <__assert_fail@plt+0x1d344>
   31984:	ldr	r2, [sp, #108]	; 0x6c
   31988:	ldr	r3, [r4]
   3198c:	cmp	r2, r3
   31990:	bne	319e0 <__assert_fail@plt+0x1d388>
   31994:	add	sp, sp, #112	; 0x70
   31998:	pop	{r4, pc}
   3199c:	ldr	r3, [r0, #68]	; 0x44
   319a0:	mov	r2, sp
   319a4:	mov	r0, #3
   319a8:	ldr	r1, [r3]
   319ac:	bl	13ddc <__fxstat64@plt>
   319b0:	cmp	r0, #0
   319b4:	beq	31950 <__assert_fail@plt+0x1d2f8>
   319b8:	bl	14148 <__errno_location@plt>
   319bc:	ldr	r0, [r0]
   319c0:	bl	13fa4 <strerror@plt>
   319c4:	mov	r1, r0
   319c8:	movw	r0, #33924	; 0x8484
   319cc:	movt	r0, #4
   319d0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   319d4:	mov	r0, #0
   319d8:	mov	r1, #0
   319dc:	b	31984 <__assert_fail@plt+0x1d32c>
   319e0:	bl	13cec <__stack_chk_fail@plt>
   319e4:	ldr	r3, [r0, #36]	; 0x24
   319e8:	cmp	r3, #0
   319ec:	beq	319fc <__assert_fail@plt+0x1d3a4>
   319f0:	mov	r0, r3
   319f4:	b	14244 <fileno@plt>
   319f8:	mov	r0, r3
   319fc:	ldr	r3, [r0, #80]	; 0x50
   31a00:	cmp	r3, #0
   31a04:	bne	319f8 <__assert_fail@plt+0x1d3a0>
   31a08:	ldr	r2, [r0, #64]	; 0x40
   31a0c:	movw	r3, #61716	; 0xf114
   31a10:	movt	r3, #2
   31a14:	cmp	r2, r3
   31a18:	ldreq	r3, [r0, #68]	; 0x44
   31a1c:	ldreq	r0, [r3]
   31a20:	mvnne	r0, #0
   31a24:	bx	lr
   31a28:	push	{r4, r5}
   31a2c:	ldrd	r4, [r0, #24]
   31a30:	ldrd	r0, [r0, #16]
   31a34:	adds	r0, r0, r4
   31a38:	adc	r1, r1, r5
   31a3c:	pop	{r4, r5}
   31a40:	bx	lr
   31a44:	push	{r4, r5, r6, r7, r8, lr}
   31a48:	mov	r8, r0
   31a4c:	ldr	r4, [r0, #36]	; 0x24
   31a50:	sub	sp, sp, #8
   31a54:	mov	r6, r2
   31a58:	mov	r7, r3
   31a5c:	cmp	r4, #0
   31a60:	beq	31b00 <__assert_fail@plt+0x1d4a8>
   31a64:	mov	r1, #0
   31a68:	mov	r0, r4
   31a6c:	str	r1, [sp]
   31a70:	bl	142ec <fseeko64@plt>
   31a74:	cmp	r0, #0
   31a78:	bne	31b74 <__assert_fail@plt+0x1d51c>
   31a7c:	mov	r0, r4
   31a80:	bl	14400 <clearerr@plt>
   31a84:	ldr	r1, [r8, #80]	; 0x50
   31a88:	mov	r3, #0
   31a8c:	ldr	r2, [r8, #32]
   31a90:	mov	r4, #0
   31a94:	cmp	r1, r3
   31a98:	mov	r5, #0
   31a9c:	bic	r2, r2, #1
   31aa0:	strd	r6, [r8, #24]
   31aa4:	str	r3, [r8, #48]	; 0x30
   31aa8:	str	r2, [r8, #32]
   31aac:	str	r3, [r8, #44]	; 0x2c
   31ab0:	str	r3, [r8, #60]	; 0x3c
   31ab4:	strd	r4, [r8, #16]
   31ab8:	strd	r4, [r8, #8]
   31abc:	beq	31af0 <__assert_fail@plt+0x1d498>
   31ac0:	movw	r0, #33980	; 0x84bc
   31ac4:	movt	r0, #4
   31ac8:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   31acc:	ldr	r3, [r8, #80]	; 0x50
   31ad0:	cmp	r3, #0
   31ad4:	beq	31af0 <__assert_fail@plt+0x1d498>
   31ad8:	mov	r0, r8
   31adc:	ldr	r1, [r8, #64]	; 0x40
   31ae0:	bl	30894 <__assert_fail@plt+0x1c23c>
   31ae4:	ldr	r3, [r8, #80]	; 0x50
   31ae8:	cmp	r3, #0
   31aec:	bne	31ad8 <__assert_fail@plt+0x1d480>
   31af0:	mov	r0, #0
   31af4:	add	sp, sp, #8
   31af8:	pop	{r4, r5, r6, r7, r8, pc}
   31afc:	mov	r8, r1
   31b00:	ldr	r1, [r8, #80]	; 0x50
   31b04:	cmp	r1, #0
   31b08:	bne	31afc <__assert_fail@plt+0x1d4a4>
   31b0c:	ldr	r2, [r8, #64]	; 0x40
   31b10:	movw	r3, #61716	; 0xf114
   31b14:	movt	r3, #2
   31b18:	cmp	r2, r3
   31b1c:	mvnne	r0, #0
   31b20:	bne	31af4 <__assert_fail@plt+0x1d49c>
   31b24:	ldr	r0, [r8, #68]	; 0x44
   31b28:	mov	r2, r6
   31b2c:	mov	r3, r7
   31b30:	ldr	r0, [r0]
   31b34:	str	r1, [sp]
   31b38:	bl	13e30 <lseek64@plt>
   31b3c:	mvn	r2, #0
   31b40:	mvn	r3, #0
   31b44:	cmp	r1, r3
   31b48:	cmpeq	r0, r2
   31b4c:	bne	31a84 <__assert_fail@plt+0x1d42c>
   31b50:	bl	14148 <__errno_location@plt>
   31b54:	ldr	r0, [r0]
   31b58:	bl	13fa4 <strerror@plt>
   31b5c:	mov	r1, r0
   31b60:	movw	r0, #33960	; 0x84a8
   31b64:	movt	r0, #4
   31b68:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   31b6c:	mvn	r0, #0
   31b70:	b	31af4 <__assert_fail@plt+0x1d49c>
   31b74:	bl	14148 <__errno_location@plt>
   31b78:	ldr	r0, [r0]
   31b7c:	bl	13fa4 <strerror@plt>
   31b80:	mov	r1, r0
   31b84:	movw	r0, #33944	; 0x8498
   31b88:	movt	r0, #4
   31b8c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   31b90:	mvn	r0, #0
   31b94:	b	31af4 <__assert_fail@plt+0x1d49c>
   31b98:	ldr	r3, [r0, #76]	; 0x4c
   31b9c:	cmp	r3, #0
   31ba0:	beq	31bb0 <__assert_fail@plt+0x1d558>
   31ba4:	mov	r0, r3
   31ba8:	bx	lr
   31bac:	mov	r0, r3
   31bb0:	ldr	r3, [r0, #80]	; 0x50
   31bb4:	cmp	r3, #0
   31bb8:	bne	31bac <__assert_fail@plt+0x1d554>
   31bbc:	ldr	r1, [r0, #64]	; 0x40
   31bc0:	movw	r2, #61716	; 0xf114
   31bc4:	movt	r2, #2
   31bc8:	cmp	r1, r2
   31bcc:	bne	31ba4 <__assert_fail@plt+0x1d54c>
   31bd0:	ldr	r0, [r0, #68]	; 0x44
   31bd4:	ldr	r2, [r0, #16]
   31bd8:	cmp	r2, #0
   31bdc:	bne	31ba4 <__assert_fail@plt+0x1d54c>
   31be0:	add	r0, r0, #20
   31be4:	bx	lr
   31be8:	push	{r4, r5, r6, r7, lr}
   31bec:	movw	r6, #47296	; 0xb8c0
   31bf0:	movt	r6, #5
   31bf4:	sub	sp, sp, #20
   31bf8:	subs	r7, r0, #0
   31bfc:	ldr	r3, [r6]
   31c00:	str	r3, [sp, #12]
   31c04:	beq	31c4c <__assert_fail@plt+0x1d5f4>
   31c08:	ldr	r3, [r7]
   31c0c:	cmp	r3, #2
   31c10:	beq	31c6c <__assert_fail@plt+0x1d614>
   31c14:	add	r5, sp, #8
   31c18:	mov	r4, r7
   31c1c:	ldr	ip, [r4, #64]	; 0x40
   31c20:	cmp	ip, #0
   31c24:	beq	31c40 <__assert_fail@plt+0x1d5e8>
   31c28:	ldr	r0, [r4, #68]	; 0x44
   31c2c:	mov	r1, #6
   31c30:	ldr	r2, [r4, #80]	; 0x50
   31c34:	mov	r3, #0
   31c38:	str	r5, [sp]
   31c3c:	blx	ip
   31c40:	ldr	r4, [r4, #80]	; 0x50
   31c44:	cmp	r4, #0
   31c48:	bne	31c1c <__assert_fail@plt+0x1d5c4>
   31c4c:	mov	r0, r7
   31c50:	bl	3048c <__assert_fail@plt+0x1be34>
   31c54:	ldr	r2, [sp, #12]
   31c58:	ldr	r3, [r6]
   31c5c:	cmp	r2, r3
   31c60:	bne	31c8c <__assert_fail@plt+0x1d634>
   31c64:	add	sp, sp, #20
   31c68:	pop	{r4, r5, r6, r7, pc}
   31c6c:	bl	31b98 <__assert_fail@plt+0x1d540>
   31c70:	subs	r3, r0, #0
   31c74:	beq	31c14 <__assert_fail@plt+0x1d5bc>
   31c78:	ldrb	r3, [r3]
   31c7c:	cmp	r3, #0
   31c80:	beq	31c14 <__assert_fail@plt+0x1d5bc>
   31c84:	bl	14478 <remove@plt>
   31c88:	b	31c14 <__assert_fail@plt+0x1d5bc>
   31c8c:	bl	13cec <__stack_chk_fail@plt>
   31c90:	subs	r3, r0, #0
   31c94:	bne	31ca0 <__assert_fail@plt+0x1d648>
   31c98:	b	31cc8 <__assert_fail@plt+0x1d670>
   31c9c:	mov	r3, r0
   31ca0:	ldr	r0, [r3, #80]	; 0x50
   31ca4:	cmp	r0, #0
   31ca8:	bne	31c9c <__assert_fail@plt+0x1d644>
   31cac:	ldr	r1, [r3, #64]	; 0x40
   31cb0:	movw	r2, #61716	; 0xf114
   31cb4:	movt	r2, #2
   31cb8:	cmp	r1, r2
   31cbc:	ldreq	r0, [r3, #68]	; 0x44
   31cc0:	addeq	r0, r0, #20
   31cc4:	bx	lr
   31cc8:	mov	r0, r3
   31ccc:	bx	lr
   31cd0:	push	{r4, r5, r6, lr}
   31cd4:	mov	r4, r0
   31cd8:	mov	r5, r1
   31cdc:	mov	r0, #1
   31ce0:	mov	r1, #32
   31ce4:	bl	14538 <gcry_xcalloc@plt>
   31ce8:	ldr	r3, [r4]
   31cec:	sub	r2, r3, #1
   31cf0:	cmp	r2, #1
   31cf4:	mov	ip, r0
   31cf8:	bhi	31d64 <__assert_fail@plt+0x1d70c>
   31cfc:	cmp	r5, #0
   31d00:	str	r3, [r0]
   31d04:	bne	31d24 <__assert_fail@plt+0x1d6cc>
   31d08:	cmp	r3, #1
   31d0c:	beq	31d54 <__assert_fail@plt+0x1d6fc>
   31d10:	mov	r0, r4
   31d14:	movw	r1, #3796	; 0xed4
   31d18:	pop	{r4, r5, r6, lr}
   31d1c:	movt	r1, #3
   31d20:	b	30894 <__assert_fail@plt+0x1c23c>
   31d24:	mov	r6, #0
   31d28:	mov	r0, r4
   31d2c:	mov	r3, r6
   31d30:	mov	r4, #1
   31d34:	movw	r1, #3796	; 0xed4
   31d38:	str	r5, [ip, #24]
   31d3c:	str	r6, [ip, #4]
   31d40:	mov	r2, ip
   31d44:	str	r4, [ip, #12]
   31d48:	movt	r1, #3
   31d4c:	pop	{r4, r5, r6, lr}
   31d50:	b	30630 <__assert_fail@plt+0x1bfd8>
   31d54:	movw	r0, #34060	; 0x850c
   31d58:	movt	r0, #4
   31d5c:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   31d60:	b	31d10 <__assert_fail@plt+0x1d6b8>
   31d64:	movw	r0, #34032	; 0x84f0
   31d68:	movw	r1, #31792	; 0x7c30
   31d6c:	movt	r0, #4
   31d70:	movt	r1, #4
   31d74:	movw	r2, #2443	; 0x98b
   31d78:	ldr	r3, [pc]	; 31d80 <__assert_fail@plt+0x1d728>
   31d7c:	bl	14658 <__assert_fail@plt>
   31d80:	andeq	r7, r4, ip, lsl #24
   31d84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   31d88:	mov	r9, r2
   31d8c:	ldr	r8, [r1]
   31d90:	sub	sp, sp, #20
   31d94:	ldr	r7, [r2]
   31d98:	mov	r6, r0
   31d9c:	ldr	r2, [r3]
   31da0:	cmp	r8, #0
   31da4:	str	r1, [sp, #4]
   31da8:	str	r3, [sp, #12]
   31dac:	str	r2, [sp, #8]
   31db0:	beq	31f10 <__assert_fail@plt+0x1d8b8>
   31db4:	sub	r7, r7, #3
   31db8:	mov	fp, r8
   31dbc:	mov	sl, #0
   31dc0:	b	31dfc <__assert_fail@plt+0x1d7a4>
   31dc4:	ldrd	r2, [r6, #16]
   31dc8:	ldr	r0, [r6, #52]	; 0x34
   31dcc:	adds	r2, r2, #1
   31dd0:	str	ip, [r6, #44]	; 0x2c
   31dd4:	adc	r3, r3, #0
   31dd8:	strd	r2, [r6, #16]
   31ddc:	ldrb	r4, [r0, r1]
   31de0:	cmp	sl, r7
   31de4:	beq	31e44 <__assert_fail@plt+0x1d7ec>
   31de8:	cmp	r4, #10
   31dec:	strb	r4, [fp]
   31df0:	add	sl, sl, #1
   31df4:	add	fp, fp, #1
   31df8:	beq	31e30 <__assert_fail@plt+0x1d7d8>
   31dfc:	ldr	r3, [r6, #32]
   31e00:	mov	r0, r6
   31e04:	cmp	r3, #0
   31e08:	bne	31e20 <__assert_fail@plt+0x1d7c8>
   31e0c:	ldr	r1, [r6, #44]	; 0x2c
   31e10:	ldr	r3, [r6, #48]	; 0x30
   31e14:	add	ip, r1, #1
   31e18:	cmp	r1, r3
   31e1c:	bcc	31dc4 <__assert_fail@plt+0x1d76c>
   31e20:	bl	30b0c <__assert_fail@plt+0x1c4b4>
   31e24:	cmn	r0, #1
   31e28:	mov	r4, r0
   31e2c:	bne	31de0 <__assert_fail@plt+0x1d788>
   31e30:	mov	r0, sl
   31e34:	mov	r3, #0
   31e38:	strb	r3, [fp]
   31e3c:	add	sp, sp, #20
   31e40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   31e44:	ldr	r3, [sp, #8]
   31e48:	add	r2, sl, #3
   31e4c:	mov	r0, r8
   31e50:	cmp	sl, r3
   31e54:	bhi	31e8c <__assert_fail@plt+0x1d834>
   31e58:	cmp	r2, #1024	; 0x400
   31e5c:	movcs	r1, #1024	; 0x400
   31e60:	movcc	r1, #256	; 0x100
   31e64:	add	r5, r2, r1
   31e68:	sub	r7, r5, #3
   31e6c:	mov	r1, r5
   31e70:	bl	13f5c <gcry_xrealloc@plt>
   31e74:	ldr	r3, [sp, #4]
   31e78:	mov	r8, r0
   31e7c:	str	r0, [r3]
   31e80:	add	fp, r0, sl
   31e84:	str	r5, [r9]
   31e88:	b	31de8 <__assert_fail@plt+0x1d790>
   31e8c:	cmp	r4, #10
   31e90:	mov	r4, fp
   31e94:	bne	31ec0 <__assert_fail@plt+0x1d868>
   31e98:	b	31ef0 <__assert_fail@plt+0x1d898>
   31e9c:	ldrd	r2, [r6, #16]
   31ea0:	ldr	ip, [r6, #52]	; 0x34
   31ea4:	adds	r2, r2, #1
   31ea8:	str	r0, [r6, #44]	; 0x2c
   31eac:	adc	r3, r3, #0
   31eb0:	strd	r2, [r6, #16]
   31eb4:	ldrb	r0, [ip, r1]
   31eb8:	cmp	r0, #10
   31ebc:	beq	31ef0 <__assert_fail@plt+0x1d898>
   31ec0:	ldr	r3, [r6, #32]
   31ec4:	cmp	r3, #0
   31ec8:	bne	31ee0 <__assert_fail@plt+0x1d888>
   31ecc:	ldr	r1, [r6, #44]	; 0x2c
   31ed0:	ldr	r3, [r6, #48]	; 0x30
   31ed4:	add	r0, r1, #1
   31ed8:	cmp	r1, r3
   31edc:	bcc	31e9c <__assert_fail@plt+0x1d844>
   31ee0:	mov	r0, r6
   31ee4:	bl	30b0c <__assert_fail@plt+0x1c4b4>
   31ee8:	cmn	r0, #1
   31eec:	bne	31eb8 <__assert_fail@plt+0x1d860>
   31ef0:	mov	r2, #10
   31ef4:	strb	r2, [r4]
   31ef8:	ldr	r2, [sp, #12]
   31efc:	mov	r3, #0
   31f00:	add	fp, fp, #1
   31f04:	add	sl, sl, #1
   31f08:	str	r3, [r2]
   31f0c:	b	31e30 <__assert_fail@plt+0x1d7d8>
   31f10:	mov	r0, #256	; 0x100
   31f14:	mov	r7, #253	; 0xfd
   31f18:	bl	1398c <gcry_xmalloc@plt>
   31f1c:	ldr	r2, [sp, #4]
   31f20:	mov	r3, #256	; 0x100
   31f24:	str	r0, [r2]
   31f28:	mov	r8, r0
   31f2c:	str	r3, [r9]
   31f30:	b	31db8 <__assert_fail@plt+0x1d760>
   31f34:	cmp	r2, #0
   31f38:	push	{r3, r4, r5, lr}
   31f3c:	mov	r4, r0
   31f40:	mov	r5, r1
   31f44:	bne	31fe4 <__assert_fail@plt+0x1d98c>
   31f48:	cmp	r1, #0
   31f4c:	popeq	{r3, r4, r5, pc}
   31f50:	ldr	r3, [r4, #32]
   31f54:	mov	r0, r4
   31f58:	cmp	r3, #0
   31f5c:	beq	31fbc <__assert_fail@plt+0x1d964>
   31f60:	bl	30b0c <__assert_fail@plt+0x1c4b4>
   31f64:	sub	r5, r5, #1
   31f68:	cmn	r0, #1
   31f6c:	popeq	{r3, r4, r5, pc}
   31f70:	cmp	r5, #0
   31f74:	bne	31fac <__assert_fail@plt+0x1d954>
   31f78:	pop	{r3, r4, r5, pc}
   31f7c:	cmp	r5, r2
   31f80:	movcc	r0, r5
   31f84:	movcs	r0, r2
   31f88:	ldrd	r2, [r4, #16]
   31f8c:	rsb	r5, r0, r5
   31f90:	add	r1, r0, r1
   31f94:	adds	r2, r2, r0
   31f98:	str	r1, [r4, #44]	; 0x2c
   31f9c:	adc	r3, r3, #0
   31fa0:	cmp	r5, #0
   31fa4:	strd	r2, [r4, #16]
   31fa8:	beq	31f78 <__assert_fail@plt+0x1d920>
   31fac:	ldr	r3, [r4, #32]
   31fb0:	mov	r0, r4
   31fb4:	cmp	r3, #0
   31fb8:	bne	31f60 <__assert_fail@plt+0x1d908>
   31fbc:	ldr	r1, [r4, #44]	; 0x2c
   31fc0:	ldr	r3, [r4, #48]	; 0x30
   31fc4:	cmp	r1, r3
   31fc8:	rsb	r2, r1, r3
   31fcc:	bcc	31f7c <__assert_fail@plt+0x1d924>
   31fd0:	b	31f60 <__assert_fail@plt+0x1d908>
   31fd4:	mov	r0, r4
   31fd8:	bl	30b0c <__assert_fail@plt+0x1c4b4>
   31fdc:	cmn	r0, #1
   31fe0:	beq	3201c <__assert_fail@plt+0x1d9c4>
   31fe4:	ldr	r3, [r4, #32]
   31fe8:	cmp	r3, #0
   31fec:	bne	31fd4 <__assert_fail@plt+0x1d97c>
   31ff0:	ldr	r3, [r4, #44]	; 0x2c
   31ff4:	ldr	r1, [r4, #48]	; 0x30
   31ff8:	cmp	r3, r1
   31ffc:	rsb	r0, r3, r1
   32000:	bcs	31fd4 <__assert_fail@plt+0x1d97c>
   32004:	ldrd	r2, [r4, #16]
   32008:	str	r1, [r4, #44]	; 0x2c
   3200c:	adds	r2, r2, r0
   32010:	adc	r3, r3, #0
   32014:	strd	r2, [r4, #16]
   32018:	b	31ff0 <__assert_fail@plt+0x1d998>
   3201c:	pop	{r3, r4, r5, pc}
   32020:	push	{r4, lr}
   32024:	movw	r4, #47296	; 0xb8c0
   32028:	movt	r4, #5
   3202c:	sub	sp, sp, #24
   32030:	mov	r0, #7
   32034:	ldr	r3, [r4]
   32038:	mov	r1, sp
   3203c:	str	r3, [sp, #20]
   32040:	bl	13d28 <getrlimit64@plt>
   32044:	cmp	r0, #0
   32048:	beq	32080 <__assert_fail@plt+0x1da28>
   3204c:	mov	r1, sp
   32050:	mov	r0, #7
   32054:	bl	13d28 <getrlimit64@plt>
   32058:	cmp	r0, #0
   3205c:	bne	3206c <__assert_fail@plt+0x1da14>
   32060:	ldr	r0, [sp, #8]
   32064:	cmn	r0, #1
   32068:	bne	3208c <__assert_fail@plt+0x1da34>
   3206c:	mov	r0, #4
   32070:	bl	13d04 <sysconf@plt>
   32074:	cmp	r0, #0
   32078:	movlt	r0, #256	; 0x100
   3207c:	b	3208c <__assert_fail@plt+0x1da34>
   32080:	ldr	r0, [sp, #8]
   32084:	cmn	r0, #1
   32088:	beq	3204c <__assert_fail@plt+0x1d9f4>
   3208c:	ldr	r2, [sp, #20]
   32090:	ldr	r3, [r4]
   32094:	cmp	r2, r3
   32098:	bne	320a4 <__assert_fail@plt+0x1da4c>
   3209c:	add	sp, sp, #24
   320a0:	pop	{r4, pc}
   320a4:	bl	13cec <__stack_chk_fail@plt>
   320a8:	push	{r3, r4, r5, r6, r7, lr}
   320ac:	mov	r6, r1
   320b0:	mov	r4, r0
   320b4:	bl	32020 <__assert_fail@plt+0x1d9c8>
   320b8:	cmp	r6, #0
   320bc:	mov	r7, r0
   320c0:	beq	32134 <__assert_fail@plt+0x1dadc>
   320c4:	cmp	r0, r4
   320c8:	ble	3211c <__assert_fail@plt+0x1dac4>
   320cc:	mov	r5, #0
   320d0:	ldr	r3, [r6, r5, lsl #2]
   320d4:	add	ip, r6, r5, lsl #2
   320d8:	cmn	r3, #1
   320dc:	beq	32108 <__assert_fail@plt+0x1dab0>
   320e0:	cmp	r4, r3
   320e4:	mov	r2, r5
   320e8:	bne	320f8 <__assert_fail@plt+0x1daa0>
   320ec:	b	3212c <__assert_fail@plt+0x1dad4>
   320f0:	cmp	r4, r3
   320f4:	beq	3212c <__assert_fail@plt+0x1dad4>
   320f8:	ldr	r3, [ip, #4]!
   320fc:	add	r2, r2, #1
   32100:	cmn	r3, #1
   32104:	bne	320f0 <__assert_fail@plt+0x1da98>
   32108:	mov	r0, r4
   3210c:	bl	145ec <close@plt>
   32110:	add	r4, r4, #1
   32114:	cmp	r4, r7
   32118:	bne	320d0 <__assert_fail@plt+0x1da78>
   3211c:	bl	14148 <__errno_location@plt>
   32120:	mov	r3, #0
   32124:	str	r3, [r0]
   32128:	pop	{r3, r4, r5, r6, r7, pc}
   3212c:	add	r5, r2, #1
   32130:	b	32110 <__assert_fail@plt+0x1dab8>
   32134:	cmp	r0, r4
   32138:	ble	3211c <__assert_fail@plt+0x1dac4>
   3213c:	mov	r0, r4
   32140:	add	r4, r4, #1
   32144:	bl	145ec <close@plt>
   32148:	cmp	r4, r7
   3214c:	bne	3213c <__assert_fail@plt+0x1dae4>
   32150:	b	3211c <__assert_fail@plt+0x1dac4>
   32154:	push	{r4, r5, r6, r7, r8, r9, lr}
   32158:	movw	ip, #47296	; 0xb8c0
   3215c:	sub	sp, sp, #20
   32160:	movt	ip, #5
   32164:	subs	r9, r1, #0
   32168:	mov	r5, r0
   3216c:	ldr	lr, [sp, #48]	; 0x30
   32170:	mov	r8, r2
   32174:	ldr	r1, [ip]
   32178:	moveq	r0, r9
   3217c:	str	r2, [sp]
   32180:	str	r3, [sp, #4]
   32184:	str	r1, [sp, #12]
   32188:	str	lr, [sp, #8]
   3218c:	ldr	r6, [sp, #52]	; 0x34
   32190:	beq	321b8 <__assert_fail@plt+0x1db60>
   32194:	ldr	r3, [r9]
   32198:	cmp	r3, #0
   3219c:	beq	322dc <__assert_fail@plt+0x1dc84>
   321a0:	mov	ip, r9
   321a4:	mov	r0, #0
   321a8:	ldr	r4, [ip, #4]!
   321ac:	add	r0, r0, #1
   321b0:	cmp	r4, #0
   321b4:	bne	321a8 <__assert_fail@plt+0x1db50>
   321b8:	mov	r1, #4
   321bc:	add	r0, r0, #2
   321c0:	bl	14538 <gcry_xcalloc@plt>
   321c4:	mov	r1, #47	; 0x2f
   321c8:	mov	r7, r0
   321cc:	mov	r0, r5
   321d0:	bl	143b8 <strrchr@plt>
   321d4:	cmp	r0, #0
   321d8:	str	r0, [r7]
   321dc:	beq	322e4 <__assert_fail@plt+0x1dc8c>
   321e0:	add	r0, r0, #1
   321e4:	str	r0, [r7]
   321e8:	cmp	r9, #0
   321ec:	beq	32214 <__assert_fail@plt+0x1dbbc>
   321f0:	ldr	r3, [r9]
   321f4:	cmp	r3, #0
   321f8:	beq	32214 <__assert_fail@plt+0x1dbbc>
   321fc:	mov	lr, r9
   32200:	mov	ip, r7
   32204:	str	r3, [ip, #4]!
   32208:	ldr	r3, [lr, #4]!
   3220c:	cmp	r3, #0
   32210:	bne	32204 <__assert_fail@plt+0x1dbac>
   32214:	mov	r2, r8
   32218:	cmn	r2, #1
   3221c:	add	r8, sp, #4
   32220:	mov	r4, #0
   32224:	beq	32240 <__assert_fail@plt+0x1dbe8>
   32228:	add	r4, r4, #1
   3222c:	cmp	r4, #3
   32230:	beq	32284 <__assert_fail@plt+0x1dc2c>
   32234:	ldr	r2, [r8], #4
   32238:	cmn	r2, #1
   3223c:	bne	32228 <__assert_fail@plt+0x1dbd0>
   32240:	adds	r1, r4, #0
   32244:	movw	r0, #5004	; 0x138c
   32248:	movt	r0, #4
   3224c:	movne	r1, #1
   32250:	bl	14118 <__open64_2@plt>
   32254:	cmn	r0, #1
   32258:	str	r0, [r8, #-4]
   3225c:	bne	32228 <__assert_fail@plt+0x1dbd0>
   32260:	bl	14148 <__errno_location@plt>
   32264:	ldr	r0, [r0]
   32268:	bl	13fa4 <strerror@plt>
   3226c:	movw	r1, #5004	; 0x138c
   32270:	movt	r1, #4
   32274:	mov	r2, r0
   32278:	movw	r0, #5016	; 0x1398
   3227c:	movt	r0, #4
   32280:	bl	3f544 <__assert_fail@plt+0x2aeec>
   32284:	mov	r4, #0
   32288:	ldr	r0, [sp, r4, lsl #2]
   3228c:	cmp	r0, r4
   32290:	beq	322a4 <__assert_fail@plt+0x1dc4c>
   32294:	mov	r1, r4
   32298:	bl	13d1c <dup2@plt>
   3229c:	cmn	r0, #1
   322a0:	beq	322f4 <__assert_fail@plt+0x1dc9c>
   322a4:	add	r4, r4, #1
   322a8:	cmp	r4, #3
   322ac:	bne	32288 <__assert_fail@plt+0x1dc30>
   322b0:	mov	r0, r4
   322b4:	mov	r1, #0
   322b8:	bl	320a8 <__assert_fail@plt+0x1da50>
   322bc:	cmp	r6, #0
   322c0:	beq	322c8 <__assert_fail@plt+0x1dc70>
   322c4:	blx	r6
   322c8:	mov	r0, r5
   322cc:	mov	r1, r7
   322d0:	bl	1410c <execv@plt>
   322d4:	mov	r0, #127	; 0x7f
   322d8:	bl	13b90 <_exit@plt>
   322dc:	mov	r0, r3
   322e0:	b	321b8 <__assert_fail@plt+0x1db60>
   322e4:	mov	r0, r5
   322e8:	bl	141f0 <gcry_xstrdup@plt>
   322ec:	str	r0, [r7]
   322f0:	b	321e8 <__assert_fail@plt+0x1db90>
   322f4:	cmp	r4, #0
   322f8:	bne	32324 <__assert_fail@plt+0x1dccc>
   322fc:	movw	r4, #17056	; 0x42a0
   32300:	movt	r4, #4
   32304:	bl	14148 <__errno_location@plt>
   32308:	ldr	r0, [r0]
   3230c:	bl	13fa4 <strerror@plt>
   32310:	mov	r1, r4
   32314:	mov	r2, r0
   32318:	movw	r0, #34128	; 0x8550
   3231c:	movt	r0, #4
   32320:	bl	3f544 <__assert_fail@plt+0x2aeec>
   32324:	cmp	r4, #1
   32328:	movw	r2, #34124	; 0x854c
   3232c:	movw	r3, #29740	; 0x742c
   32330:	movt	r2, #4
   32334:	movt	r3, #4
   32338:	movne	r4, r2
   3233c:	moveq	r4, r3
   32340:	b	32304 <__assert_fail@plt+0x1dcac>
   32344:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   32348:	movw	sl, #47296	; 0xb8c0
   3234c:	movt	sl, #5
   32350:	sub	sp, sp, #116	; 0x74
   32354:	ldr	r3, [sl]
   32358:	str	r3, [sp, #108]	; 0x6c
   3235c:	bl	32020 <__assert_fail@plt+0x1d9c8>
   32360:	mov	r1, #4
   32364:	mov	r9, r0
   32368:	mov	r0, #32
   3236c:	bl	13974 <calloc@plt>
   32370:	subs	r8, r0, #0
   32374:	beq	32444 <__assert_fail@plt+0x1ddec>
   32378:	cmp	r9, #0
   3237c:	mov	r5, #0
   32380:	ble	32410 <__assert_fail@plt+0x1ddb8>
   32384:	mov	r4, r5
   32388:	mov	r6, #32
   3238c:	b	323d8 <__assert_fail@plt+0x1dd80>
   32390:	add	r7, r5, #1
   32394:	cmp	r7, r6
   32398:	bcc	323c4 <__assert_fail@plt+0x1dd6c>
   3239c:	cmp	r6, #255	; 0xff
   323a0:	mov	r0, r8
   323a4:	movhi	r3, #256	; 0x100
   323a8:	movls	r3, #32
   323ac:	add	r6, r6, r3
   323b0:	lsl	r1, r6, #2
   323b4:	bl	13d34 <realloc@plt>
   323b8:	subs	fp, r0, #0
   323bc:	beq	32434 <__assert_fail@plt+0x1dddc>
   323c0:	mov	r8, fp
   323c4:	str	r4, [r8, r5, lsl #2]
   323c8:	add	r4, r4, #1
   323cc:	cmp	r4, r9
   323d0:	mov	r5, r7
   323d4:	beq	3240c <__assert_fail@plt+0x1ddb4>
   323d8:	mov	r0, #3
   323dc:	mov	r1, r4
   323e0:	mov	r2, sp
   323e4:	bl	13ddc <__fxstat64@plt>
   323e8:	cmn	r0, #1
   323ec:	bne	32390 <__assert_fail@plt+0x1dd38>
   323f0:	bl	14148 <__errno_location@plt>
   323f4:	ldr	r3, [r0]
   323f8:	cmp	r3, #9
   323fc:	bne	32390 <__assert_fail@plt+0x1dd38>
   32400:	add	r4, r4, #1
   32404:	cmp	r4, r9
   32408:	bne	323d8 <__assert_fail@plt+0x1dd80>
   3240c:	lsl	r5, r5, #2
   32410:	mov	r0, r8
   32414:	mvn	r3, #0
   32418:	str	r3, [r8, r5]
   3241c:	ldr	r2, [sp, #108]	; 0x6c
   32420:	ldr	r3, [sl]
   32424:	cmp	r2, r3
   32428:	bne	3244c <__assert_fail@plt+0x1ddf4>
   3242c:	add	sp, sp, #116	; 0x74
   32430:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32434:	mov	r0, r8
   32438:	bl	13b30 <free@plt>
   3243c:	mov	r0, fp
   32440:	b	3241c <__assert_fail@plt+0x1ddc4>
   32444:	mov	r0, r8
   32448:	b	3241c <__assert_fail@plt+0x1ddc4>
   3244c:	bl	13cec <__stack_chk_fail@plt>
   32450:	push	{r4, lr}
   32454:	mov	r4, r0
   32458:	bl	142e0 <pipe@plt>
   3245c:	cmn	r0, #1
   32460:	beq	3246c <__assert_fail@plt+0x1de14>
   32464:	mov	r0, #0
   32468:	pop	{r4, pc}
   3246c:	bl	14580 <gpg_err_code_from_syserror@plt>
   32470:	mvn	r3, #0
   32474:	str	r3, [r4, #4]
   32478:	str	r3, [r4]
   3247c:	cmp	r0, #0
   32480:	uxthne	r0, r0
   32484:	pop	{r4, pc}
   32488:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3248c:	sub	sp, sp, #36	; 0x24
   32490:	movw	r4, #47296	; 0xb8c0
   32494:	movt	r4, #5
   32498:	ldr	r7, [sp, #80]	; 0x50
   3249c:	mov	r5, r2
   324a0:	ldr	r6, [sp, #84]	; 0x54
   324a4:	mov	ip, #0
   324a8:	ldr	r2, [r4]
   324ac:	mov	r9, r0
   324b0:	str	ip, [r7]
   324b4:	mov	r0, r5
   324b8:	mvn	ip, #0
   324bc:	str	ip, [r6]
   324c0:	mov	r8, r3
   324c4:	str	r1, [sp, #12]
   324c8:	str	r2, [sp, #28]
   324cc:	ldr	sl, [sp, #72]	; 0x48
   324d0:	bl	13ae8 <fflush@plt>
   324d4:	mov	r0, r5
   324d8:	bl	13cf8 <rewind@plt>
   324dc:	mov	r0, r5
   324e0:	bl	14244 <fileno@plt>
   324e4:	mov	fp, r0
   324e8:	mov	r0, r8
   324ec:	bl	14244 <fileno@plt>
   324f0:	cmn	r0, #1
   324f4:	cmnne	fp, #1
   324f8:	mov	r5, r0
   324fc:	beq	32678 <__assert_fail@plt+0x1e020>
   32500:	add	r0, sp, #20
   32504:	bl	142e0 <pipe@plt>
   32508:	cmn	r0, #1
   3250c:	beq	32578 <__assert_fail@plt+0x1df20>
   32510:	movw	r3, #17384	; 0x43e8
   32514:	movt	r3, #1
   32518:	cmp	r3, #0
   3251c:	beq	32684 <__assert_fail@plt+0x1e02c>
   32520:	bl	143e8 <pth_fork@plt>
   32524:	cmn	r0, #1
   32528:	str	r0, [r6]
   3252c:	beq	325c0 <__assert_fail@plt+0x1df68>
   32530:	cmp	r0, #0
   32534:	beq	3268c <__assert_fail@plt+0x1e034>
   32538:	ldr	r0, [sp, #24]
   3253c:	bl	145ec <close@plt>
   32540:	movw	r1, #18760	; 0x4948
   32544:	ldr	r0, [sp, #20]
   32548:	movt	r1, #4
   3254c:	bl	13950 <fdopen@plt>
   32550:	cmp	r0, #0
   32554:	str	r0, [r7]
   32558:	movne	r0, #0
   3255c:	beq	32618 <__assert_fail@plt+0x1dfc0>
   32560:	ldr	r2, [sp, #28]
   32564:	ldr	r3, [r4]
   32568:	cmp	r2, r3
   3256c:	bne	32674 <__assert_fail@plt+0x1e01c>
   32570:	add	sp, sp, #36	; 0x24
   32574:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   32578:	bl	14580 <gpg_err_code_from_syserror@plt>
   3257c:	mov	r2, #5
   32580:	movw	r1, #34212	; 0x85a4
   32584:	movt	r1, #4
   32588:	cmp	r0, #0
   3258c:	uxthne	r6, r0
   32590:	moveq	r6, r0
   32594:	mov	r0, #0
   32598:	bl	13cc8 <dcgettext@plt>
   3259c:	mov	r5, r0
   325a0:	bl	14148 <__errno_location@plt>
   325a4:	ldr	r0, [r0]
   325a8:	bl	13fa4 <strerror@plt>
   325ac:	mov	r1, r0
   325b0:	mov	r0, r5
   325b4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   325b8:	mov	r0, r6
   325bc:	b	32560 <__assert_fail@plt+0x1df08>
   325c0:	bl	14580 <gpg_err_code_from_syserror@plt>
   325c4:	mov	r2, #5
   325c8:	movw	r1, #34240	; 0x85c0
   325cc:	movt	r1, #4
   325d0:	cmp	r0, #0
   325d4:	uxthne	r5, r0
   325d8:	moveq	r5, r0
   325dc:	mov	r0, #0
   325e0:	bl	13cc8 <dcgettext@plt>
   325e4:	mov	r6, r0
   325e8:	bl	14148 <__errno_location@plt>
   325ec:	ldr	r0, [r0]
   325f0:	bl	13fa4 <strerror@plt>
   325f4:	mov	r1, r0
   325f8:	mov	r0, r6
   325fc:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   32600:	ldr	r0, [sp, #20]
   32604:	bl	145ec <close@plt>
   32608:	ldr	r0, [sp, #24]
   3260c:	bl	145ec <close@plt>
   32610:	mov	r0, r5
   32614:	b	32560 <__assert_fail@plt+0x1df08>
   32618:	bl	14580 <gpg_err_code_from_syserror@plt>
   3261c:	mov	r2, #5
   32620:	movw	r1, #34268	; 0x85dc
   32624:	movt	r1, #4
   32628:	cmp	r0, #0
   3262c:	uxthne	r7, r0
   32630:	moveq	r7, r0
   32634:	mov	r0, #0
   32638:	bl	13cc8 <dcgettext@plt>
   3263c:	mov	r5, r0
   32640:	bl	14148 <__errno_location@plt>
   32644:	ldr	r0, [r0]
   32648:	bl	13fa4 <strerror@plt>
   3264c:	mov	r1, r0
   32650:	mov	r0, r5
   32654:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   32658:	ldr	r0, [r6]
   3265c:	mov	r1, #15
   32660:	bl	14028 <kill@plt>
   32664:	mvn	r3, #0
   32668:	mov	r0, r7
   3266c:	str	r3, [r6]
   32670:	b	32560 <__assert_fail@plt+0x1df08>
   32674:	bl	13cec <__stack_chk_fail@plt>
   32678:	movw	r0, #34152	; 0x8568
   3267c:	movt	r0, #4
   32680:	bl	3f544 <__assert_fail@plt+0x2aeec>
   32684:	bl	1437c <fork@plt>
   32688:	b	32524 <__assert_fail@plt+0x1decc>
   3268c:	mov	r0, #25
   32690:	bl	144c0 <gcry_control@plt>
   32694:	ldr	ip, [sp, #24]
   32698:	str	sl, [sp, #4]
   3269c:	mov	r0, r9
   326a0:	ldr	r1, [sp, #12]
   326a4:	mov	r2, fp
   326a8:	mov	r3, r5
   326ac:	str	ip, [sp]
   326b0:	bl	32154 <__assert_fail@plt+0x1dafc>
   326b4:	movw	ip, #17384	; 0x43e8
   326b8:	movt	ip, #1
   326bc:	push	{r4, r5, r6, r7, r8, r9, lr}
   326c0:	cmp	ip, #0
   326c4:	sub	sp, sp, #12
   326c8:	mov	r9, r0
   326cc:	mov	r8, r1
   326d0:	mov	r7, r2
   326d4:	mov	r6, r3
   326d8:	ldr	r5, [sp, #44]	; 0x2c
   326dc:	beq	32754 <__assert_fail@plt+0x1e0fc>
   326e0:	bl	143e8 <pth_fork@plt>
   326e4:	mov	r4, r0
   326e8:	cmn	r4, #1
   326ec:	str	r4, [r5]
   326f0:	beq	32708 <__assert_fail@plt+0x1e0b0>
   326f4:	cmp	r4, #0
   326f8:	movne	r0, #0
   326fc:	beq	32760 <__assert_fail@plt+0x1e108>
   32700:	add	sp, sp, #12
   32704:	pop	{r4, r5, r6, r7, r8, r9, pc}
   32708:	bl	14580 <gpg_err_code_from_syserror@plt>
   3270c:	mov	r2, #5
   32710:	movw	r1, #34240	; 0x85c0
   32714:	movt	r1, #4
   32718:	cmp	r0, #0
   3271c:	uxthne	r5, r0
   32720:	moveq	r5, r0
   32724:	mov	r0, #0
   32728:	bl	13cc8 <dcgettext@plt>
   3272c:	mov	r4, r0
   32730:	bl	14148 <__errno_location@plt>
   32734:	ldr	r0, [r0]
   32738:	bl	13fa4 <strerror@plt>
   3273c:	mov	r1, r0
   32740:	mov	r0, r4
   32744:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   32748:	mov	r0, r5
   3274c:	add	sp, sp, #12
   32750:	pop	{r4, r5, r6, r7, r8, r9, pc}
   32754:	bl	1437c <fork@plt>
   32758:	mov	r4, r0
   3275c:	b	326e8 <__assert_fail@plt+0x1e090>
   32760:	mov	r0, #25
   32764:	bl	144c0 <gcry_control@plt>
   32768:	ldr	r3, [sp, #40]	; 0x28
   3276c:	mov	r0, r9
   32770:	mov	r1, r8
   32774:	mov	r2, r7
   32778:	stm	sp, {r3, r4}
   3277c:	mov	r3, r6
   32780:	bl	32154 <__assert_fail@plt+0x1dafc>
   32784:	push	{r4, r5, r6, r7, lr}
   32788:	movw	r4, #47296	; 0xb8c0
   3278c:	movt	r4, #5
   32790:	subs	r6, r2, #0
   32794:	sub	sp, sp, #12
   32798:	mov	r7, r0
   3279c:	ldr	r3, [r4]
   327a0:	mov	r5, r1
   327a4:	str	r3, [sp, #4]
   327a8:	mvnne	r3, #0
   327ac:	strne	r3, [r6]
   327b0:	cmn	r1, #1
   327b4:	moveq	r0, #55	; 0x37
   327b8:	beq	32810 <__assert_fail@plt+0x1e1b8>
   327bc:	movw	r2, #14996	; 0x3a94
   327c0:	movt	r2, #1
   327c4:	cmp	r2, #0
   327c8:	mov	r0, r1
   327cc:	mov	r1, sp
   327d0:	beq	328f4 <__assert_fail@plt+0x1e29c>
   327d4:	mov	r2, #0
   327d8:	bl	13a94 <pth_waitpid@plt>
   327dc:	cmn	r0, #1
   327e0:	beq	32884 <__assert_fail@plt+0x1e22c>
   327e4:	ldr	r3, [sp]
   327e8:	ands	r0, r3, #127	; 0x7f
   327ec:	beq	32828 <__assert_fail@plt+0x1e1d0>
   327f0:	mov	r2, #5
   327f4:	movw	r1, #34432	; 0x8680
   327f8:	mov	r0, #0
   327fc:	movt	r1, #4
   32800:	bl	13cc8 <dcgettext@plt>
   32804:	mov	r1, r7
   32808:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3280c:	mov	r0, #1
   32810:	ldr	r2, [sp, #4]
   32814:	ldr	r3, [r4]
   32818:	cmp	r2, r3
   3281c:	bne	328f0 <__assert_fail@plt+0x1e298>
   32820:	add	sp, sp, #12
   32824:	pop	{r4, r5, r6, r7, pc}
   32828:	ubfx	r3, r3, #8, #8
   3282c:	cmp	r3, #127	; 0x7f
   32830:	beq	328d0 <__assert_fail@plt+0x1e278>
   32834:	cmp	r3, #0
   32838:	beq	32874 <__assert_fail@plt+0x1e21c>
   3283c:	cmp	r6, #0
   32840:	strne	r3, [r6]
   32844:	movne	r0, #1
   32848:	bne	32810 <__assert_fail@plt+0x1e1b8>
   3284c:	mov	r2, #5
   32850:	mov	r0, r6
   32854:	movw	r1, #34396	; 0x865c
   32858:	movt	r1, #4
   3285c:	bl	13cc8 <dcgettext@plt>
   32860:	mov	r1, r7
   32864:	ldrb	r2, [sp, #1]
   32868:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3286c:	mov	r0, #1
   32870:	b	32810 <__assert_fail@plt+0x1e1b8>
   32874:	cmp	r6, #0
   32878:	mov	r0, #0
   3287c:	strne	r3, [r6]
   32880:	b	32810 <__assert_fail@plt+0x1e1b8>
   32884:	mov	r2, #5
   32888:	movw	r1, #34304	; 0x8600
   3288c:	mov	r0, #0
   32890:	movt	r1, #4
   32894:	bl	13cc8 <dcgettext@plt>
   32898:	mov	r7, r0
   3289c:	bl	14148 <__errno_location@plt>
   328a0:	mov	r6, r0
   328a4:	ldr	r0, [r0]
   328a8:	bl	13fa4 <strerror@plt>
   328ac:	mov	r1, r5
   328b0:	mov	r2, r0
   328b4:	mov	r0, r7
   328b8:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   328bc:	ldr	r0, [r6]
   328c0:	bl	13b6c <gpg_err_code_from_errno@plt>
   328c4:	cmp	r0, #0
   328c8:	uxthne	r0, r0
   328cc:	b	32810 <__assert_fail@plt+0x1e1b8>
   328d0:	mov	r2, #5
   328d4:	movw	r1, #34352	; 0x8630
   328d8:	movt	r1, #4
   328dc:	bl	13cc8 <dcgettext@plt>
   328e0:	mov	r1, r7
   328e4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   328e8:	mov	r0, #115	; 0x73
   328ec:	b	32810 <__assert_fail@plt+0x1e1b8>
   328f0:	bl	13cec <__stack_chk_fail@plt>
   328f4:	bl	13e60 <waitpid@plt>
   328f8:	b	327dc <__assert_fail@plt+0x1e184>
   328fc:	push	{r4, r5, r6, r7, lr}
   32900:	sub	sp, sp, #12
   32904:	mov	r7, r1
   32908:	mov	r6, r2
   3290c:	mov	r5, r0
   32910:	bl	13b0c <getuid@plt>
   32914:	mov	r4, r0
   32918:	bl	13da0 <geteuid@plt>
   3291c:	cmp	r4, r0
   32920:	movne	r0, #59	; 0x3b
   32924:	beq	32930 <__assert_fail@plt+0x1e2d8>
   32928:	add	sp, sp, #12
   3292c:	pop	{r4, r5, r6, r7, pc}
   32930:	mov	r0, r5
   32934:	mov	r1, #1
   32938:	bl	142b0 <access@plt>
   3293c:	cmp	r0, #0
   32940:	bne	32a20 <__assert_fail@plt+0x1e3c8>
   32944:	movw	r3, #17384	; 0x43e8
   32948:	movt	r3, #1
   3294c:	cmp	r3, #0
   32950:	beq	32a78 <__assert_fail@plt+0x1e420>
   32954:	bl	143e8 <pth_fork@plt>
   32958:	mov	r4, r0
   3295c:	cmn	r4, #1
   32960:	beq	329f0 <__assert_fail@plt+0x1e398>
   32964:	cmp	r4, #0
   32968:	bne	32a38 <__assert_fail@plt+0x1e3e0>
   3296c:	mov	r0, #25
   32970:	bl	144c0 <gcry_control@plt>
   32974:	bl	140a0 <setsid@plt>
   32978:	cmn	r0, #1
   3297c:	beq	32a84 <__assert_fail@plt+0x1e42c>
   32980:	movw	r0, #37288	; 0x91a8
   32984:	movt	r0, #4
   32988:	bl	13d94 <chdir@plt>
   3298c:	cmp	r0, #0
   32990:	bne	32a84 <__assert_fail@plt+0x1e42c>
   32994:	bl	1437c <fork@plt>
   32998:	cmn	r0, #1
   3299c:	beq	32a84 <__assert_fail@plt+0x1e42c>
   329a0:	cmp	r0, #0
   329a4:	bne	32a70 <__assert_fail@plt+0x1e418>
   329a8:	cmp	r6, #0
   329ac:	beq	329d0 <__assert_fail@plt+0x1e378>
   329b0:	ldr	r0, [r6]
   329b4:	cmp	r0, #0
   329b8:	beq	329d0 <__assert_fail@plt+0x1e378>
   329bc:	bl	141f0 <gcry_xstrdup@plt>
   329c0:	bl	14394 <putenv@plt>
   329c4:	ldr	r0, [r6, #4]!
   329c8:	cmp	r0, #0
   329cc:	bne	329bc <__assert_fail@plt+0x1e364>
   329d0:	mvn	r3, #0
   329d4:	mov	ip, #0
   329d8:	mov	r0, r5
   329dc:	mov	r2, r3
   329e0:	mov	r1, r7
   329e4:	str	r3, [sp]
   329e8:	str	ip, [sp, #4]
   329ec:	bl	32154 <__assert_fail@plt+0x1dafc>
   329f0:	mov	r2, #5
   329f4:	movw	r1, #34240	; 0x85c0
   329f8:	mov	r0, #0
   329fc:	movt	r1, #4
   32a00:	bl	13cc8 <dcgettext@plt>
   32a04:	mov	r4, r0
   32a08:	bl	14148 <__errno_location@plt>
   32a0c:	ldr	r0, [r0]
   32a10:	bl	13fa4 <strerror@plt>
   32a14:	mov	r1, r0
   32a18:	mov	r0, r4
   32a1c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   32a20:	bl	14580 <gpg_err_code_from_syserror@plt>
   32a24:	cmp	r0, #0
   32a28:	uxthne	r0, r0
   32a2c:	bne	32928 <__assert_fail@plt+0x1e2d0>
   32a30:	mov	r0, #0
   32a34:	b	32928 <__assert_fail@plt+0x1e2d0>
   32a38:	mov	r1, #0
   32a3c:	mov	r0, r4
   32a40:	mov	r2, r1
   32a44:	bl	13e60 <waitpid@plt>
   32a48:	cmn	r0, #1
   32a4c:	bne	32a30 <__assert_fail@plt+0x1e3d8>
   32a50:	bl	14148 <__errno_location@plt>
   32a54:	ldr	r0, [r0]
   32a58:	bl	13fa4 <strerror@plt>
   32a5c:	mov	r1, r0
   32a60:	movw	r0, #34464	; 0x86a0
   32a64:	movt	r0, #4
   32a68:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   32a6c:	b	32a30 <__assert_fail@plt+0x1e3d8>
   32a70:	mov	r0, r4
   32a74:	bl	13b90 <_exit@plt>
   32a78:	bl	1437c <fork@plt>
   32a7c:	mov	r4, r0
   32a80:	b	3295c <__assert_fail@plt+0x1e304>
   32a84:	mov	r0, #1
   32a88:	bl	13b90 <_exit@plt>
   32a8c:	sub	sp, sp, #8
   32a90:	mov	ip, #0
   32a94:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   32a98:	movw	r7, #8288	; 0x2060
   32a9c:	ldr	r6, [r0, #36]	; 0x24
   32aa0:	movw	sl, #8228	; 0x2024
   32aa4:	ldr	r8, [sp, #40]	; 0x28
   32aa8:	movw	r4, #8232	; 0x2028
   32aac:	movw	r9, #8248	; 0x2038
   32ab0:	mov	fp, #8256	; 0x2040
   32ab4:	ldrb	r5, [r6, r7]
   32ab8:	str	r1, [r6, sl]
   32abc:	add	sl, sl, #32
   32ac0:	bfi	r5, ip, #4, #1
   32ac4:	strb	r5, [r6, r7]
   32ac8:	mov	r5, #0
   32acc:	ldr	r1, [r0, #36]	; 0x24
   32ad0:	str	ip, [r6, r4]
   32ad4:	mov	r4, #0
   32ad8:	str	r3, [r6, fp]
   32adc:	add	fp, fp, #8
   32ae0:	strd	r4, [r6, r9]
   32ae4:	movw	r5, #8268	; 0x204c
   32ae8:	str	r8, [r6, sl]
   32aec:	movw	r4, #8272	; 0x2050
   32af0:	ldr	sl, [sp, #44]	; 0x2c
   32af4:	movw	r8, #8276	; 0x2054
   32af8:	ldr	r9, [sp, #48]	; 0x30
   32afc:	str	r3, [sp, #36]	; 0x24
   32b00:	str	sl, [r6, fp]
   32b04:	add	fp, fp, #16
   32b08:	ldrb	sl, [r1, r7]
   32b0c:	str	ip, [r6, r5]
   32b10:	add	r5, r5, #16
   32b14:	str	r9, [r6, r4]
   32b18:	bfi	sl, ip, #1, #1
   32b1c:	str	ip, [r6, r8]
   32b20:	add	r4, r4, #20
   32b24:	str	r2, [r6, fp]
   32b28:	movw	r9, #8296	; 0x2068
   32b2c:	strb	sl, [r1, r7]
   32b30:	movw	sl, #8300	; 0x206c
   32b34:	ldr	r2, [r0, #36]	; 0x24
   32b38:	movw	r8, #8240	; 0x2030
   32b3c:	ldrb	r6, [r1, r5]
   32b40:	str	ip, [r1, r4]
   32b44:	ldrb	r4, [r2, r7]
   32b48:	and	r6, r6, #254	; 0xfe
   32b4c:	str	ip, [r1, r9]
   32b50:	bfi	r6, ip, #1, #1
   32b54:	str	ip, [r1, sl]
   32b58:	bfi	r4, ip, #2, #2
   32b5c:	strb	r6, [r1, r5]
   32b60:	strb	r4, [r2, r7]
   32b64:	ldr	r2, [r0, #36]	; 0x24
   32b68:	ldr	r1, [sp, #52]	; 0x34
   32b6c:	ldrb	r3, [r2, r7]
   32b70:	ands	r1, r1, #3
   32b74:	bfi	r3, ip, #0, #1
   32b78:	strb	r3, [r2, r7]
   32b7c:	ldr	r3, [r0, #36]	; 0x24
   32b80:	str	ip, [r3, r8]
   32b84:	ldrb	r2, [r3, r7]
   32b88:	bfi	r2, ip, #5, #1
   32b8c:	strb	r2, [r3, r7]
   32b90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   32b94:	ldrb	r3, [r0, #32]
   32b98:	str	ip, [r0, #8]
   32b9c:	orrne	r3, r3, #1
   32ba0:	bfieq	r3, r1, #0, #1
   32ba4:	str	ip, [r0, #12]
   32ba8:	add	sp, sp, #8
   32bac:	str	ip, [r0, #16]
   32bb0:	str	ip, [r0, #28]
   32bb4:	strb	r3, [r0, #32]
   32bb8:	bx	lr
   32bbc:	push	{r3, r4, r5, r6, r7, lr}
   32bc0:	mov	r3, #8256	; 0x2040
   32bc4:	ldr	r5, [r0, #36]	; 0x24
   32bc8:	mov	r4, r0
   32bcc:	ldr	r3, [r5, r3]
   32bd0:	cmp	r3, #0
   32bd4:	beq	32c3c <__assert_fail@plt+0x1e5e4>
   32bd8:	movw	r2, #8228	; 0x2024
   32bdc:	ldr	r1, [r0]
   32be0:	ldr	r0, [r5, r2]
   32be4:	ldr	r2, [r4, #4]
   32be8:	blx	r3
   32bec:	ldr	r5, [r4, #36]	; 0x24
   32bf0:	cmn	r0, #1
   32bf4:	beq	32c48 <__assert_fail@plt+0x1e5f0>
   32bf8:	subs	ip, r0, #0
   32bfc:	movweq	r3, #8284	; 0x205c
   32c00:	movne	r0, #0
   32c04:	ldrbeq	r2, [r5, r3]
   32c08:	moveq	r0, ip
   32c0c:	orreq	r2, r2, #2
   32c10:	strbeq	r2, [r5, r3]
   32c14:	movw	r1, #8248	; 0x2038
   32c18:	ldr	r7, [r4, #8]
   32c1c:	ldrd	r2, [r5, r1]
   32c20:	mov	r6, #0
   32c24:	adds	r2, r2, r7
   32c28:	adc	r3, r3, #0
   32c2c:	strd	r2, [r5, r1]
   32c30:	str	ip, [r4, #8]
   32c34:	str	r6, [r4, #12]
   32c38:	pop	{r3, r4, r5, r6, r7, pc}
   32c3c:	bl	14148 <__errno_location@plt>
   32c40:	mov	r3, #95	; 0x5f
   32c44:	str	r3, [r0]
   32c48:	movw	r3, #8284	; 0x205c
   32c4c:	mvn	r0, #0
   32c50:	ldrb	r2, [r5, r3]
   32c54:	mov	ip, #0
   32c58:	orr	r2, r2, #1
   32c5c:	strb	r2, [r5, r3]
   32c60:	b	32c14 <__assert_fail@plt+0x1e5bc>
   32c64:	cmp	r0, #0
   32c68:	bxeq	lr
   32c6c:	b	13b30 <free@plt>
   32c70:	push	{r3, r4, r5, lr}
   32c74:	subs	r4, r0, #0
   32c78:	beq	32cb4 <__assert_fail@plt+0x1e65c>
   32c7c:	ldr	r0, [r4]
   32c80:	cmn	r0, #1
   32c84:	beq	32c94 <__assert_fail@plt+0x1e63c>
   32c88:	ldr	r3, [r4, #4]
   32c8c:	cmp	r3, #0
   32c90:	beq	32ca8 <__assert_fail@plt+0x1e650>
   32c94:	mov	r5, #0
   32c98:	mov	r0, r4
   32c9c:	bl	13b30 <free@plt>
   32ca0:	mov	r0, r5
   32ca4:	pop	{r3, r4, r5, pc}
   32ca8:	bl	145ec <close@plt>
   32cac:	mov	r5, r0
   32cb0:	b	32c98 <__assert_fail@plt+0x1e640>
   32cb4:	mov	r5, r4
   32cb8:	mov	r0, r5
   32cbc:	pop	{r3, r4, r5, pc}
   32cc0:	push	{r4, lr}
   32cc4:	subs	r4, r0, #0
   32cc8:	beq	32ce0 <__assert_fail@plt+0x1e688>
   32ccc:	ldr	r0, [r4, #4]
   32cd0:	ldr	r3, [r4, #36]	; 0x24
   32cd4:	blx	r3
   32cd8:	mov	r0, r4
   32cdc:	bl	13b30 <free@plt>
   32ce0:	mov	r0, #0
   32ce4:	pop	{r4, pc}
   32ce8:	push	{r4, r5, r6, r7, r8, lr}
   32cec:	mov	r8, r0
   32cf0:	mov	r0, #8
   32cf4:	mov	r7, r1
   32cf8:	mov	r4, r2
   32cfc:	mov	r6, r3
   32d00:	bl	13f68 <malloc@plt>
   32d04:	subs	r5, r0, #0
   32d08:	beq	32d54 <__assert_fail@plt+0x1e6fc>
   32d0c:	mov	r0, r4
   32d10:	mov	r1, r6
   32d14:	mov	r2, #384	; 0x180
   32d18:	bl	13efc <open64@plt>
   32d1c:	cmn	r0, #1
   32d20:	mov	r4, r0
   32d24:	beq	32d44 <__assert_fail@plt+0x1e6ec>
   32d28:	mov	r3, #0
   32d2c:	str	r0, [r5]
   32d30:	str	r3, [r5, #4]
   32d34:	mov	r0, r3
   32d38:	str	r5, [r8]
   32d3c:	str	r4, [r7]
   32d40:	pop	{r4, r5, r6, r7, r8, pc}
   32d44:	mov	r0, r5
   32d48:	bl	13b30 <free@plt>
   32d4c:	mov	r0, r4
   32d50:	pop	{r4, r5, r6, r7, r8, pc}
   32d54:	mvn	r0, #0
   32d58:	pop	{r4, r5, r6, r7, r8, pc}
   32d5c:	ldrb	r1, [r0, #32]
   32d60:	movw	r2, #8260	; 0x2044
   32d64:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   32d68:	tst	r1, #1
   32d6c:	ldr	r3, [r0, #36]	; 0x24
   32d70:	mov	r6, r0
   32d74:	ldr	r8, [r3, r2]
   32d78:	beq	32e70 <__assert_fail@plt+0x1e818>
   32d7c:	ldr	r2, [r0, #12]
   32d80:	cmp	r2, #0
   32d84:	beq	32e18 <__assert_fail@plt+0x1e7c0>
   32d88:	cmp	r8, #0
   32d8c:	beq	32e24 <__assert_fail@plt+0x1e7cc>
   32d90:	cmp	r2, #0
   32d94:	ble	32e18 <__assert_fail@plt+0x1e7c0>
   32d98:	mov	r7, #0
   32d9c:	movw	r4, #8228	; 0x2024
   32da0:	ldr	r1, [r6]
   32da4:	ldr	r0, [r3, r4]
   32da8:	add	r1, r1, r7
   32dac:	blx	r8
   32db0:	cmn	r0, #1
   32db4:	beq	32dd4 <__assert_fail@plt+0x1e77c>
   32db8:	ldr	r3, [r6, #12]
   32dbc:	add	r7, r7, r0
   32dc0:	rsb	r2, r7, r3
   32dc4:	cmp	r2, #0
   32dc8:	ble	32e68 <__assert_fail@plt+0x1e810>
   32dcc:	ldr	r3, [r6, #36]	; 0x24
   32dd0:	b	32da0 <__assert_fail@plt+0x1e748>
   32dd4:	ldr	r3, [r6, #12]
   32dd8:	mov	r9, r0
   32ddc:	cmp	r7, r3
   32de0:	ldr	r3, [r6, #16]
   32de4:	add	r3, r3, r7
   32de8:	str	r3, [r6, #16]
   32dec:	beq	32e2c <__assert_fail@plt+0x1e7d4>
   32df0:	cmp	r9, #0
   32df4:	beq	32e1c <__assert_fail@plt+0x1e7c4>
   32df8:	ldr	r3, [r6, #36]	; 0x24
   32dfc:	mvn	r9, #0
   32e00:	movw	r2, #8284	; 0x205c
   32e04:	mov	r0, r9
   32e08:	ldrb	r1, [r3, r2]
   32e0c:	orr	r1, r1, #1
   32e10:	strb	r1, [r3, r2]
   32e14:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   32e18:	mov	r9, #0
   32e1c:	mov	r0, r9
   32e20:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   32e24:	mov	r9, #95	; 0x5f
   32e28:	b	32e00 <__assert_fail@plt+0x1e7a8>
   32e2c:	ldr	ip, [r6, #36]	; 0x24
   32e30:	movw	lr, #8248	; 0x2038
   32e34:	mov	r3, #0
   32e38:	movw	r0, #8228	; 0x2024
   32e3c:	mov	r1, r3
   32e40:	mov	r2, r3
   32e44:	ldrd	r4, [ip, lr]
   32e48:	ldr	r0, [ip, r0]
   32e4c:	adds	r4, r4, r7
   32e50:	adc	r5, r5, #0
   32e54:	strd	r4, [ip, lr]
   32e58:	str	r3, [r6, #12]
   32e5c:	str	r3, [r6, #16]
   32e60:	blx	r8
   32e64:	b	32df0 <__assert_fail@plt+0x1e798>
   32e68:	mov	r9, #0
   32e6c:	b	32ddc <__assert_fail@plt+0x1e784>
   32e70:	movw	r0, #34608	; 0x8730
   32e74:	movw	r1, #34632	; 0x8748
   32e78:	movw	r3, #34516	; 0x86d4
   32e7c:	movt	r0, #4
   32e80:	movt	r1, #4
   32e84:	movw	r2, #1267	; 0x4f3
   32e88:	movt	r3, #4
   32e8c:	bl	14658 <__assert_fail@plt>
   32e90:	push	{r3, r4, r5, r6, r7, lr}
   32e94:	movw	r5, #8300	; 0x206c
   32e98:	ldr	r3, [r0, #36]	; 0x24
   32e9c:	mov	r4, r0
   32ea0:	ldr	r6, [r3, r5]
   32ea4:	cmp	r6, #0
   32ea8:	beq	32ed4 <__assert_fail@plt+0x1e87c>
   32eac:	bl	14148 <__errno_location@plt>
   32eb0:	mov	r7, r0
   32eb4:	mov	r0, r6
   32eb8:	ldr	r6, [r7]
   32ebc:	bl	142c8 <fclose@plt>
   32ec0:	ldr	r2, [r4, #36]	; 0x24
   32ec4:	mov	r1, #0
   32ec8:	mov	r3, r2
   32ecc:	str	r1, [r2, r5]
   32ed0:	str	r6, [r7]
   32ed4:	ldrb	r5, [r4, #32]
   32ed8:	movw	r2, #8272	; 0x2050
   32edc:	ldr	r6, [r3, r2]
   32ee0:	ands	r5, r5, #1
   32ee4:	bne	32f54 <__assert_fail@plt+0x1e8fc>
   32ee8:	cmp	r6, #0
   32eec:	beq	32f18 <__assert_fail@plt+0x1e8c0>
   32ef0:	movw	r2, #8228	; 0x2024
   32ef4:	ldr	r0, [r3, r2]
   32ef8:	blx	r6
   32efc:	adds	r3, r0, #0
   32f00:	movne	r3, #1
   32f04:	cmp	r5, #0
   32f08:	movne	r3, #0
   32f0c:	cmp	r3, #0
   32f10:	ldr	r3, [r4, #36]	; 0x24
   32f14:	movne	r5, r0
   32f18:	movw	r2, #8240	; 0x2030
   32f1c:	ldr	r0, [r3, r2]
   32f20:	cmp	r0, #0
   32f24:	beq	32f30 <__assert_fail@plt+0x1e8d8>
   32f28:	bl	13b30 <free@plt>
   32f2c:	ldr	r3, [r4, #36]	; 0x24
   32f30:	movw	r2, #8288	; 0x2060
   32f34:	movw	r4, #8240	; 0x2030
   32f38:	ldrb	r1, [r3, r2]
   32f3c:	mov	ip, #0
   32f40:	mov	r0, r5
   32f44:	str	ip, [r3, r4]
   32f48:	bfi	r1, ip, #5, #1
   32f4c:	strb	r1, [r3, r2]
   32f50:	pop	{r3, r4, r5, r6, r7, pc}
   32f54:	mov	r0, r4
   32f58:	bl	32d5c <__assert_fail@plt+0x1e704>
   32f5c:	ldr	r3, [r4, #36]	; 0x24
   32f60:	mov	r5, r0
   32f64:	b	32ee8 <__assert_fail@plt+0x1e890>
   32f68:	sub	sp, sp, #8
   32f6c:	push	{r4, r5, r6, r7, r8, r9, lr}
   32f70:	sub	sp, sp, #20
   32f74:	mov	r7, r0
   32f78:	mov	r0, #40	; 0x28
   32f7c:	mov	r9, r1
   32f80:	mov	r6, r2
   32f84:	str	r3, [sp, #52]	; 0x34
   32f88:	ldr	r8, [sp, #72]	; 0x48
   32f8c:	bl	13f68 <malloc@plt>
   32f90:	subs	r4, r0, #0
   32f94:	beq	330bc <__assert_fail@plt+0x1ea64>
   32f98:	movw	r0, #8304	; 0x2070
   32f9c:	bl	13f68 <malloc@plt>
   32fa0:	subs	r3, r0, #0
   32fa4:	beq	330ac <__assert_fail@plt+0x1ea54>
   32fa8:	movw	r5, #47912	; 0xbb28
   32fac:	movt	r5, #5
   32fb0:	add	r0, r3, #8192	; 0x2000
   32fb4:	str	r3, [r4]
   32fb8:	ldr	r1, [r5]
   32fbc:	mov	r2, #8192	; 0x2000
   32fc0:	str	r3, [r4, #36]	; 0x24
   32fc4:	mov	r3, #16
   32fc8:	cmp	r1, #0
   32fcc:	str	r0, [r4, #20]
   32fd0:	str	r2, [r4, #4]
   32fd4:	str	r3, [r4, #24]
   32fd8:	beq	330a0 <__assert_fail@plt+0x1ea48>
   32fdc:	ldr	r3, [sp, #68]	; 0x44
   32fe0:	add	ip, sp, #56	; 0x38
   32fe4:	str	r3, [sp, #12]
   32fe8:	ldm	ip, {r0, r1, r2}
   32fec:	ldr	r3, [sp, #52]	; 0x34
   32ff0:	stm	sp, {r0, r1, r2}
   32ff4:	mov	r2, r6
   32ff8:	mov	r1, r9
   32ffc:	mov	r0, r4
   33000:	bl	32a8c <__assert_fail@plt+0x1e434>
   33004:	mov	r0, #12
   33008:	bl	13f68 <malloc@plt>
   3300c:	subs	r6, r0, #0
   33010:	beq	330ac <__assert_fail@plt+0x1ea54>
   33014:	cmp	r8, #0
   33018:	beq	33074 <__assert_fail@plt+0x1ea1c>
   3301c:	ldr	r3, [r5, #24]
   33020:	movw	r0, #47912	; 0xbb28
   33024:	ldr	r2, [pc, #152]	; 330c4 <__assert_fail@plt+0x1ea6c>
   33028:	movt	r0, #5
   3302c:	cmp	r3, #0
   33030:	str	r4, [r6]
   33034:	str	r3, [r6, #4]
   33038:	str	r2, [r6, #8]
   3303c:	addne	r2, r6, #4
   33040:	strne	r2, [r3, #8]
   33044:	cmp	r8, #0
   33048:	str	r6, [r5, #24]
   3304c:	bne	3305c <__assert_fail@plt+0x1ea04>
   33050:	ldr	r2, [r0]
   33054:	cmp	r2, #0
   33058:	beq	33094 <__assert_fail@plt+0x1ea3c>
   3305c:	mov	r0, #0
   33060:	str	r4, [r7]
   33064:	add	sp, sp, #20
   33068:	pop	{r4, r5, r6, r7, r8, r9, lr}
   3306c:	add	sp, sp, #8
   33070:	bx	lr
   33074:	ldr	r3, [r5]
   33078:	cmp	r3, #0
   3307c:	bne	3301c <__assert_fail@plt+0x1e9c4>
   33080:	mov	r1, r8
   33084:	mov	r2, r8
   33088:	ldr	r0, [pc, #56]	; 330c8 <__assert_fail@plt+0x1ea70>
   3308c:	bl	14364 <pth_mutex_acquire@plt>
   33090:	b	3301c <__assert_fail@plt+0x1e9c4>
   33094:	add	r0, r0, #4
   33098:	bl	14220 <pth_mutex_release@plt>
   3309c:	b	3305c <__assert_fail@plt+0x1ea04>
   330a0:	add	r0, r0, r3
   330a4:	bl	13980 <pth_mutex_init@plt>
   330a8:	b	32fdc <__assert_fail@plt+0x1e984>
   330ac:	mov	r0, r4
   330b0:	bl	32e90 <__assert_fail@plt+0x1e838>
   330b4:	mov	r0, r4
   330b8:	bl	13b30 <free@plt>
   330bc:	mvn	r0, #0
   330c0:	b	33064 <__assert_fail@plt+0x1ea0c>
   330c4:	andeq	fp, r5, r0, asr #22
   330c8:	andeq	fp, r5, ip, lsr #22
   330cc:	cmp	r2, #1
   330d0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   330d4:	mov	r6, r0
   330d8:	mov	r7, r1
   330dc:	beq	331d4 <__assert_fail@plt+0x1eb7c>
   330e0:	cmp	r2, #2
   330e4:	beq	331bc <__assert_fail@plt+0x1eb64>
   330e8:	cmp	r2, #0
   330ec:	beq	33108 <__assert_fail@plt+0x1eab0>
   330f0:	bl	14148 <__errno_location@plt>
   330f4:	mvn	r3, #0
   330f8:	mov	r2, #22
   330fc:	str	r2, [r0]
   33100:	mov	r0, r3
   33104:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   33108:	ldrd	r4, [r1]
   3310c:	ldr	r2, [r6, #8]
   33110:	mov	r3, #0
   33114:	cmp	r2, r4
   33118:	sbcs	r1, r3, r5
   3311c:	movge	r8, r4
   33120:	bge	33190 <__assert_fail@plt+0x1eb38>
   33124:	ldrb	r3, [r6, #28]
   33128:	tst	r3, #1
   3312c:	beq	33208 <__assert_fail@plt+0x1ebb0>
   33130:	ldr	r9, [r6, #24]
   33134:	mov	r3, #0
   33138:	mov	r8, r4
   3313c:	sub	r0, r9, #1
   33140:	add	r0, r0, r4
   33144:	mov	r2, r0
   33148:	cmp	r2, r4
   3314c:	sbcs	r1, r3, r5
   33150:	blt	330f0 <__assert_fail@plt+0x1ea98>
   33154:	mov	r1, r9
   33158:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   3315c:	ldr	r3, [r6, #12]
   33160:	cmp	r3, #0
   33164:	mul	r9, r9, r0
   33168:	beq	33174 <__assert_fail@plt+0x1eb1c>
   3316c:	cmp	r9, r3
   33170:	bhi	33208 <__assert_fail@plt+0x1ebb0>
   33174:	ldr	r3, [r6, #32]
   33178:	mov	r1, r9
   3317c:	ldr	r0, [r6, #4]
   33180:	blx	r3
   33184:	cmp	r0, #0
   33188:	beq	3321c <__assert_fail@plt+0x1ebc4>
   3318c:	stmib	r6, {r0, r9}
   33190:	ldr	r0, [r6, #20]
   33194:	mov	r3, #0
   33198:	mov	r2, r0
   3319c:	cmp	r2, r4
   331a0:	sbcs	r1, r3, r5
   331a4:	blt	331ec <__assert_fail@plt+0x1eb94>
   331a8:	mov	r3, #0
   331ac:	str	r8, [r6, #16]
   331b0:	mov	r0, r3
   331b4:	strd	r4, [r7]
   331b8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   331bc:	ldr	r4, [r1]
   331c0:	mov	r5, #0
   331c4:	ldr	r3, [r0, #20]
   331c8:	add	r4, r4, r3
   331cc:	str	r4, [r0, #20]
   331d0:	b	3310c <__assert_fail@plt+0x1eab4>
   331d4:	ldr	r4, [r1]
   331d8:	mov	r5, #0
   331dc:	ldr	r3, [r0, #16]
   331e0:	add	r4, r4, r3
   331e4:	str	r4, [r0, #16]
   331e8:	b	3310c <__assert_fail@plt+0x1eab4>
   331ec:	ldr	r3, [r6, #4]
   331f0:	rsb	r2, r0, r8
   331f4:	mov	r1, #0
   331f8:	add	r0, r3, r0
   331fc:	bl	141cc <memset@plt>
   33200:	str	r8, [r6, #20]
   33204:	b	331a8 <__assert_fail@plt+0x1eb50>
   33208:	bl	14148 <__errno_location@plt>
   3320c:	mov	r2, #28
   33210:	mvn	r3, #0
   33214:	str	r2, [r0]
   33218:	b	33100 <__assert_fail@plt+0x1eaa8>
   3321c:	mvn	r3, #0
   33220:	b	33100 <__assert_fail@plt+0x1eaa8>
   33224:	push	{r3, r4, r5, lr}
   33228:	mov	r4, r0
   3322c:	ldr	r3, [r0, #16]
   33230:	ldr	r5, [r0, #20]
   33234:	rsb	r5, r3, r5
   33238:	cmp	r2, r5
   3323c:	movcc	r5, r2
   33240:	cmp	r5, #0
   33244:	beq	33268 <__assert_fail@plt+0x1ec10>
   33248:	ldr	ip, [r0, #4]
   3324c:	mov	r2, r5
   33250:	mov	r0, r1
   33254:	add	r1, ip, r3
   33258:	bl	13ba8 <memcpy@plt>
   3325c:	ldr	r3, [r4, #16]
   33260:	add	r3, r3, r5
   33264:	str	r3, [r4, #16]
   33268:	mov	r0, r5
   3326c:	pop	{r3, r4, r5, pc}
   33270:	mov	ip, #0
   33274:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33278:	mov	r5, r0
   3327c:	mov	r9, r1
   33280:	mov	r8, r2
   33284:	mov	sl, r3
   33288:	mov	r4, ip
   3328c:	b	332c4 <__assert_fail@plt+0x1ec6c>
   33290:	rsb	r3, r4, r8
   33294:	rsb	r7, r6, r7
   33298:	cmp	r7, r3
   3329c:	movcs	r7, r3
   332a0:	ldr	r1, [r5]
   332a4:	add	r0, r9, r4
   332a8:	add	r4, r4, r7
   332ac:	add	r1, r1, r6
   332b0:	mov	r2, r7
   332b4:	bl	13ba8 <memcpy@plt>
   332b8:	mov	ip, #0
   332bc:	add	r6, r7, r6
   332c0:	str	r6, [r5, #12]
   332c4:	rsbs	r3, ip, #1
   332c8:	movcc	r3, #0
   332cc:	cmp	r8, r4
   332d0:	moveq	r3, #0
   332d4:	cmp	r3, #0
   332d8:	beq	3330c <__assert_fail@plt+0x1ecb4>
   332dc:	ldr	r6, [r5, #12]
   332e0:	ldr	r7, [r5, #8]
   332e4:	cmp	r6, r7
   332e8:	bne	33290 <__assert_fail@plt+0x1ec38>
   332ec:	mov	r0, r5
   332f0:	bl	32bbc <__assert_fail@plt+0x1e564>
   332f4:	subs	ip, r0, #0
   332f8:	bne	332c4 <__assert_fail@plt+0x1ec6c>
   332fc:	ldr	r7, [r5, #8]
   33300:	cmp	r7, #0
   33304:	ldrne	r6, [r5, #12]
   33308:	bne	33290 <__assert_fail@plt+0x1ec38>
   3330c:	str	r4, [sl]
   33310:	mov	r0, ip
   33314:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33318:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3331c:	mov	r6, #0
   33320:	mov	r4, r0
   33324:	mov	r7, r1
   33328:	mov	r9, r2
   3332c:	mov	r8, r3
   33330:	mov	r5, r6
   33334:	rsbs	ip, r6, #1
   33338:	movcc	ip, #0
   3333c:	cmp	r9, r5
   33340:	moveq	ip, #0
   33344:	cmp	ip, #0
   33348:	beq	333b8 <__assert_fail@plt+0x1ed60>
   3334c:	ldr	r0, [r4, #12]
   33350:	ldr	ip, [r4, #4]
   33354:	cmp	r0, ip
   33358:	beq	3339c <__assert_fail@plt+0x1ed44>
   3335c:	rsb	ip, r0, ip
   33360:	rsb	r3, r5, r9
   33364:	cmp	ip, r3
   33368:	movcc	sl, ip
   3336c:	movcs	sl, r3
   33370:	ldr	r3, [r4]
   33374:	add	r1, r7, r5
   33378:	mov	r6, #0
   3337c:	mov	r2, sl
   33380:	add	r0, r3, r0
   33384:	bl	13ba8 <memcpy@plt>
   33388:	ldr	r3, [r4, #12]
   3338c:	add	r5, r5, sl
   33390:	add	sl, r3, sl
   33394:	str	sl, [r4, #12]
   33398:	b	33334 <__assert_fail@plt+0x1ecdc>
   3339c:	mov	r0, r4
   333a0:	bl	32d5c <__assert_fail@plt+0x1e704>
   333a4:	subs	r6, r0, #0
   333a8:	bne	33334 <__assert_fail@plt+0x1ecdc>
   333ac:	ldr	ip, [r4, #4]
   333b0:	ldr	r0, [r4, #12]
   333b4:	b	3335c <__assert_fail@plt+0x1ed04>
   333b8:	str	r5, [r8]
   333bc:	mov	r0, r6
   333c0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   333c4:	push	{r3, r4, r5, lr}
   333c8:	subs	r4, r0, #0
   333cc:	beq	33410 <__assert_fail@plt+0x1edb8>
   333d0:	ldr	r0, [r4]
   333d4:	cmp	r0, #0
   333d8:	beq	333ec <__assert_fail@plt+0x1ed94>
   333dc:	bl	13ae8 <fflush@plt>
   333e0:	ldr	r3, [r4, #4]
   333e4:	cmp	r3, #0
   333e8:	beq	33400 <__assert_fail@plt+0x1eda8>
   333ec:	mov	r5, #0
   333f0:	mov	r0, r4
   333f4:	bl	13b30 <free@plt>
   333f8:	mov	r0, r5
   333fc:	pop	{r3, r4, r5, pc}
   33400:	ldr	r0, [r4]
   33404:	bl	142c8 <fclose@plt>
   33408:	mov	r5, r0
   3340c:	b	333f0 <__assert_fail@plt+0x1ed98>
   33410:	mov	r5, r4
   33414:	mov	r0, r5
   33418:	pop	{r3, r4, r5, pc}
   3341c:	ldr	r3, [r0]
   33420:	push	{r4, lr}
   33424:	cmp	r3, #0
   33428:	mov	r4, r2
   3342c:	beq	3344c <__assert_fail@plt+0x1edf4>
   33430:	mov	r0, r1
   33434:	mov	r1, #1
   33438:	bl	13e18 <fwrite@plt>
   3343c:	cmp	r4, r0
   33440:	popeq	{r4, pc}
   33444:	mvn	r0, #0
   33448:	pop	{r4, pc}
   3344c:	mov	r0, r2
   33450:	pop	{r4, pc}
   33454:	ldr	r3, [r0]
   33458:	push	{r4, lr}
   3345c:	cmp	r3, #0
   33460:	mov	r4, r0
   33464:	beq	33480 <__assert_fail@plt+0x1ee28>
   33468:	mov	r0, r1
   3346c:	mov	r1, #1
   33470:	bl	13e9c <fread@plt>
   33474:	cmp	r0, #0
   33478:	popne	{r4, pc}
   3347c:	ldr	r3, [r4]
   33480:	mov	r0, r3
   33484:	bl	13b84 <ferror@plt>
   33488:	subs	r0, r0, #0
   3348c:	mvnne	r0, #0
   33490:	pop	{r4, pc}
   33494:	push	{r3, r4, r5, lr}
   33498:	mov	r4, r0
   3349c:	ldr	r0, [r0, #36]	; 0x24
   334a0:	movw	r5, #8296	; 0x2068
   334a4:	mov	r3, r2
   334a8:	mov	ip, #0
   334ac:	mov	r2, r1
   334b0:	mov	r1, r4
   334b4:	str	ip, [r0, r5]
   334b8:	movw	r0, #16840	; 0x41c8
   334bc:	movt	r0, #3
   334c0:	bl	372f8 <__assert_fail@plt+0x22ca0>
   334c4:	cmp	r0, #0
   334c8:	ldreq	r3, [r4, #36]	; 0x24
   334cc:	ldreq	r0, [r3, r5]
   334d0:	mvnne	r0, #0
   334d4:	pop	{r3, r4, r5, pc}
   334d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   334dc:	movw	r6, #47296	; 0xb8c0
   334e0:	movt	r6, #5
   334e4:	ldrb	ip, [r0, #32]
   334e8:	mov	r5, r2
   334ec:	sub	sp, sp, #12
   334f0:	ldr	r2, [r6]
   334f4:	tst	ip, #1
   334f8:	mov	r8, #0
   334fc:	mov	fp, r0
   33500:	mov	r4, r1
   33504:	mov	r7, r3
   33508:	str	r8, [sp]
   3350c:	str	r2, [sp, #4]
   33510:	bne	3363c <__assert_fail@plt+0x1efe4>
   33514:	cmp	r5, #0
   33518:	beq	33668 <__assert_fail@plt+0x1f010>
   3351c:	ldr	r3, [fp, #28]
   33520:	cmp	r3, #0
   33524:	beq	33670 <__assert_fail@plt+0x1f018>
   33528:	ldr	r2, [fp, #20]
   3352c:	mov	r8, #0
   33530:	add	r2, r2, r3
   33534:	b	33540 <__assert_fail@plt+0x1eee8>
   33538:	cmp	r3, #0
   3353c:	beq	3355c <__assert_fail@plt+0x1ef04>
   33540:	ldrb	r1, [r2, #-1]!
   33544:	sub	r3, r3, #1
   33548:	str	r3, [fp, #28]
   3354c:	strb	r1, [r4, r8]
   33550:	add	r8, r8, #1
   33554:	cmp	r8, r5
   33558:	bne	33538 <__assert_fail@plt+0x1eee0>
   3355c:	ldr	ip, [fp, #36]	; 0x24
   33560:	movw	r3, #8276	; 0x2054
   33564:	ldr	r3, [ip, r3]
   33568:	cmp	r3, #1
   3356c:	beq	33624 <__assert_fail@plt+0x1efcc>
   33570:	cmp	r3, #2
   33574:	beq	335ac <__assert_fail@plt+0x1ef54>
   33578:	cmp	r3, #0
   3357c:	movne	r0, #0
   33580:	beq	33624 <__assert_fail@plt+0x1efcc>
   33584:	cmp	r7, #0
   33588:	ldr	r2, [sp, #4]
   3358c:	ldrne	r3, [sp]
   33590:	addne	r8, r8, r3
   33594:	ldr	r3, [r6]
   33598:	strne	r8, [r7]
   3359c:	cmp	r2, r3
   335a0:	bne	3368c <__assert_fail@plt+0x1f034>
   335a4:	add	sp, sp, #12
   335a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   335ac:	subs	sl, r5, r8
   335b0:	mov	r2, #8256	; 0x2040
   335b4:	add	r4, r4, r8
   335b8:	ldr	r5, [ip, r2]
   335bc:	beq	33678 <__assert_fail@plt+0x1f020>
   335c0:	mov	r9, #0
   335c4:	b	335e0 <__assert_fail@plt+0x1ef88>
   335c8:	cmp	r0, #0
   335cc:	beq	335fc <__assert_fail@plt+0x1efa4>
   335d0:	add	r9, r9, r0
   335d4:	ldr	ip, [fp, #36]	; 0x24
   335d8:	cmp	sl, r9
   335dc:	beq	33658 <__assert_fail@plt+0x1f000>
   335e0:	movw	r3, #8228	; 0x2024
   335e4:	add	r1, r4, r9
   335e8:	ldr	r0, [ip, r3]
   335ec:	rsb	r2, r9, sl
   335f0:	blx	r5
   335f4:	cmn	r0, #1
   335f8:	bne	335c8 <__assert_fail@plt+0x1ef70>
   335fc:	ldr	ip, [fp, #36]	; 0x24
   33600:	mov	r4, r9
   33604:	mov	r5, #0
   33608:	movw	r1, #8248	; 0x2038
   3360c:	str	r9, [sp]
   33610:	ldrd	r2, [ip, r1]
   33614:	adds	r2, r2, r4
   33618:	adc	r3, r3, r5
   3361c:	strd	r2, [ip, r1]
   33620:	b	33584 <__assert_fail@plt+0x1ef2c>
   33624:	mov	r0, fp
   33628:	add	r1, r4, r8
   3362c:	rsb	r2, r8, r5
   33630:	mov	r3, sp
   33634:	bl	33270 <__assert_fail@plt+0x1ec18>
   33638:	b	33584 <__assert_fail@plt+0x1ef2c>
   3363c:	bl	32d5c <__assert_fail@plt+0x1e704>
   33640:	cmp	r0, #0
   33644:	bne	33584 <__assert_fail@plt+0x1ef2c>
   33648:	ldrb	r3, [fp, #32]
   3364c:	bfi	r3, r0, #0, #1
   33650:	strb	r3, [fp, #32]
   33654:	b	33514 <__assert_fail@plt+0x1eebc>
   33658:	mov	r4, r9
   3365c:	mov	r5, #0
   33660:	mov	r0, #0
   33664:	b	33608 <__assert_fail@plt+0x1efb0>
   33668:	mov	r8, r5
   3366c:	b	3355c <__assert_fail@plt+0x1ef04>
   33670:	mov	r8, r3
   33674:	b	3355c <__assert_fail@plt+0x1ef04>
   33678:	mov	r9, sl
   3367c:	mov	r4, #0
   33680:	mov	r5, #0
   33684:	mov	r0, sl
   33688:	b	33608 <__assert_fail@plt+0x1efb0>
   3368c:	bl	13cec <__stack_chk_fail@plt>
   33690:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   33694:	mov	r4, r0
   33698:	ldr	ip, [r4]
   3369c:	movw	r0, #8260	; 0x2044
   336a0:	mov	sl, r2
   336a4:	adds	r2, r2, #0
   336a8:	mov	r8, r1
   336ac:	mov	r7, r3
   336b0:	ldr	r5, [ip, r0]
   336b4:	movne	r2, #1
   336b8:	cmp	r5, #0
   336bc:	movne	r6, #0
   336c0:	andeq	r6, r2, #1
   336c4:	cmp	r6, #0
   336c8:	beq	336d4 <__assert_fail@plt+0x1f07c>
   336cc:	mov	r0, #95	; 0x5f
   336d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   336d4:	cmp	r2, #0
   336d8:	beq	33744 <__assert_fail@plt+0x1f0ec>
   336dc:	movw	r9, #8228	; 0x2024
   336e0:	b	336f4 <__assert_fail@plt+0x1f09c>
   336e4:	add	r6, r6, r0
   336e8:	ldr	ip, [r4]
   336ec:	cmp	sl, r6
   336f0:	beq	33734 <__assert_fail@plt+0x1f0dc>
   336f4:	ldr	r0, [ip, r9]
   336f8:	add	r1, r8, r6
   336fc:	rsb	r2, r6, sl
   33700:	blx	r5
   33704:	cmn	r0, #1
   33708:	bne	336e4 <__assert_fail@plt+0x1f08c>
   3370c:	ldr	ip, [r4]
   33710:	mov	r5, #0
   33714:	mov	r4, r6
   33718:	movw	r1, #8248	; 0x2038
   3371c:	ldrd	r2, [ip, r1]
   33720:	adds	r2, r2, r4
   33724:	adc	r3, r3, r5
   33728:	strd	r2, [ip, r1]
   3372c:	str	r6, [r7]
   33730:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   33734:	mov	r4, r6
   33738:	mov	r5, #0
   3373c:	mov	r0, #0
   33740:	b	33718 <__assert_fail@plt+0x1f0c0>
   33744:	mov	r6, r2
   33748:	mov	r4, #0
   3374c:	mov	r5, #0
   33750:	mov	r0, r2
   33754:	b	33718 <__assert_fail@plt+0x1f0c0>
   33758:	push	{r4, lr}
   3375c:	ldrb	r3, [r0]
   33760:	cmp	r3, #114	; 0x72
   33764:	beq	337e4 <__assert_fail@plt+0x1f18c>
   33768:	cmp	r3, #119	; 0x77
   3376c:	beq	33798 <__assert_fail@plt+0x1f140>
   33770:	cmp	r3, #97	; 0x61
   33774:	moveq	ip, #1088	; 0x440
   33778:	moveq	r4, #1
   3377c:	beq	337a0 <__assert_fail@plt+0x1f148>
   33780:	bl	14148 <__errno_location@plt>
   33784:	mvn	r3, #0
   33788:	mov	r2, #22
   3378c:	str	r2, [r0]
   33790:	mov	r0, r3
   33794:	pop	{r4, pc}
   33798:	mov	ip, #576	; 0x240
   3379c:	mov	r4, #1
   337a0:	ldrb	r3, [r0, #1]
   337a4:	add	r2, r0, #1
   337a8:	cmp	r3, #0
   337ac:	beq	337d0 <__assert_fail@plt+0x1f178>
   337b0:	cmp	r3, #43	; 0x2b
   337b4:	moveq	r4, #2
   337b8:	beq	337c4 <__assert_fail@plt+0x1f16c>
   337bc:	cmp	r3, #120	; 0x78
   337c0:	orreq	ip, ip, #128	; 0x80
   337c4:	ldrb	r3, [r2, #1]!
   337c8:	cmp	r3, #0
   337cc:	bne	337b0 <__assert_fail@plt+0x1f158>
   337d0:	mov	r3, #0
   337d4:	orr	ip, ip, r4
   337d8:	mov	r0, r3
   337dc:	str	ip, [r1]
   337e0:	pop	{r4, pc}
   337e4:	mov	ip, #0
   337e8:	mov	r4, ip
   337ec:	b	337a0 <__assert_fail@plt+0x1f148>
   337f0:	cmp	r1, #1
   337f4:	mov	r1, r0
   337f8:	push	{r3, r4, r5, lr}
   337fc:	bne	3382c <__assert_fail@plt+0x1f1d4>
   33800:	ldr	r5, [r0, #4]
   33804:	mov	ip, #0
   33808:	ldr	r0, [r0, #16]
   3380c:	mov	r4, ip
   33810:	str	r5, [r2]
   33814:	str	r0, [r3]
   33818:	str	ip, [r1, #4]
   3381c:	str	ip, [r1, #8]
   33820:	str	ip, [r1, #16]
   33824:	mov	r0, r4
   33828:	pop	{r3, r4, r5, pc}
   3382c:	bl	14148 <__errno_location@plt>
   33830:	mvn	r4, #0
   33834:	mov	r3, #22
   33838:	str	r3, [r0]
   3383c:	b	33824 <__assert_fail@plt+0x1f1cc>
   33840:	push	{r4, r5, r6, r7, lr}
   33844:	mov	r7, r1
   33848:	ldr	r6, [r0]
   3384c:	sub	sp, sp, #12
   33850:	cmn	r6, #1
   33854:	beq	33898 <__assert_fail@plt+0x1f240>
   33858:	ldrd	r4, [r1]
   3385c:	mov	r0, r6
   33860:	str	r2, [sp]
   33864:	mov	r3, r5
   33868:	mov	r2, r4
   3386c:	bl	13e30 <lseek64@plt>
   33870:	mvn	r2, #0
   33874:	mvn	r3, #0
   33878:	cmp	r1, r3
   3387c:	cmpeq	r0, r2
   33880:	strdne	r0, [r7]
   33884:	movne	r6, #0
   33888:	mvneq	r6, #0
   3388c:	mov	r0, r6
   33890:	add	sp, sp, #12
   33894:	pop	{r4, r5, r6, r7, pc}
   33898:	bl	14148 <__errno_location@plt>
   3389c:	mov	r3, #29
   338a0:	str	r3, [r0]
   338a4:	b	3388c <__assert_fail@plt+0x1f234>
   338a8:	ldr	r3, [r0]
   338ac:	push	{r4, r5, r6, r7, r8, lr}
   338b0:	cmn	r3, #1
   338b4:	mov	r8, r0
   338b8:	mov	r6, r1
   338bc:	movwne	r7, #47912	; 0xbb28
   338c0:	mov	r5, r2
   338c4:	movtne	r7, #5
   338c8:	bne	338f4 <__assert_fail@plt+0x1f29c>
   338cc:	b	33924 <__assert_fail@plt+0x1f2cc>
   338d0:	bl	1449c <pth_write@plt>
   338d4:	mov	r4, r0
   338d8:	cmn	r4, #1
   338dc:	bne	3391c <__assert_fail@plt+0x1f2c4>
   338e0:	bl	14148 <__errno_location@plt>
   338e4:	ldr	r3, [r0]
   338e8:	cmp	r3, #4
   338ec:	bne	3391c <__assert_fail@plt+0x1f2c4>
   338f0:	ldr	r3, [r8]
   338f4:	ldr	ip, [r7]
   338f8:	mov	r1, r6
   338fc:	mov	r2, r5
   33900:	mov	r0, r3
   33904:	cmp	ip, #0
   33908:	beq	338d0 <__assert_fail@plt+0x1f278>
   3390c:	bl	1422c <write@plt>
   33910:	mov	r4, r0
   33914:	cmn	r4, #1
   33918:	beq	338e0 <__assert_fail@plt+0x1f288>
   3391c:	mov	r0, r4
   33920:	pop	{r4, r5, r6, r7, r8, pc}
   33924:	movw	r3, #47912	; 0xbb28
   33928:	movt	r3, #5
   3392c:	ldr	r0, [r3]
   33930:	cmp	r0, #0
   33934:	beq	33944 <__assert_fail@plt+0x1f2ec>
   33938:	mov	r4, r5
   3393c:	mov	r0, r4
   33940:	pop	{r4, r5, r6, r7, r8, pc}
   33944:	bl	14418 <pth_yield@plt>
   33948:	mov	r4, r5
   3394c:	b	3393c <__assert_fail@plt+0x1f2e4>
   33950:	ldr	r3, [r0]
   33954:	push	{r4, r5, r6, r7, r8, lr}
   33958:	cmn	r3, #1
   3395c:	mov	r8, r0
   33960:	mov	r5, r1
   33964:	movwne	r7, #47912	; 0xbb28
   33968:	mov	r6, r2
   3396c:	movtne	r7, #5
   33970:	bne	3399c <__assert_fail@plt+0x1f344>
   33974:	b	339d8 <__assert_fail@plt+0x1f380>
   33978:	bl	13ac4 <read@plt>
   3397c:	mov	r4, r0
   33980:	cmn	r4, #1
   33984:	bne	339d0 <__assert_fail@plt+0x1f378>
   33988:	bl	14148 <__errno_location@plt>
   3398c:	ldr	r3, [r0]
   33990:	cmp	r3, #4
   33994:	bne	339d0 <__assert_fail@plt+0x1f378>
   33998:	ldr	r3, [r8]
   3399c:	ldr	ip, [r7]
   339a0:	mov	r0, r3
   339a4:	mov	r1, r5
   339a8:	mov	r2, r6
   339ac:	cmp	ip, #0
   339b0:	bne	33978 <__assert_fail@plt+0x1f320>
   339b4:	mov	r0, r3
   339b8:	mov	r1, r5
   339bc:	mov	r2, r6
   339c0:	bl	13d64 <pth_read@plt>
   339c4:	mov	r4, r0
   339c8:	cmn	r4, #1
   339cc:	beq	33988 <__assert_fail@plt+0x1f330>
   339d0:	mov	r0, r4
   339d4:	pop	{r4, r5, r6, r7, r8, pc}
   339d8:	movw	r3, #47912	; 0xbb28
   339dc:	movt	r3, #5
   339e0:	ldr	r4, [r3]
   339e4:	cmp	r4, #0
   339e8:	movne	r4, #0
   339ec:	bne	339d0 <__assert_fail@plt+0x1f378>
   339f0:	mov	r0, r4
   339f4:	bl	14418 <pth_yield@plt>
   339f8:	b	339d0 <__assert_fail@plt+0x1f378>
   339fc:	push	{r4, r5, r6, r7, r8, lr}
   33a00:	subs	r5, r2, #0
   33a04:	mov	r4, r0
   33a08:	mov	r7, r1
   33a0c:	beq	33b24 <__assert_fail@plt+0x1f4cc>
   33a10:	ldr	r2, [r0]
   33a14:	ldr	r3, [r0, #16]
   33a18:	tst	r2, #1024	; 0x400
   33a1c:	ldr	r2, [r0, #20]
   33a20:	movne	r3, r2
   33a24:	strne	r2, [r0, #16]
   33a28:	ldr	r2, [r0, #8]
   33a2c:	cmp	r3, r2
   33a30:	bhi	33b78 <__assert_fail@plt+0x1f520>
   33a34:	ldrb	r1, [r0, #28]
   33a38:	rsb	r0, r3, r2
   33a3c:	tst	r1, #1
   33a40:	beq	33af0 <__assert_fail@plt+0x1f498>
   33a44:	cmp	r5, r0
   33a48:	bls	33b94 <__assert_fail@plt+0x1f53c>
   33a4c:	cmp	r2, #0
   33a50:	addne	r6, r3, r5
   33a54:	moveq	r6, r5
   33a58:	cmp	r3, r6
   33a5c:	bhi	33b2c <__assert_fail@plt+0x1f4d4>
   33a60:	ldr	r8, [r4, #24]
   33a64:	cmp	r8, #0
   33a68:	beq	33a88 <__assert_fail@plt+0x1f430>
   33a6c:	sub	r0, r8, #1
   33a70:	add	r0, r0, r6
   33a74:	cmp	r3, r0
   33a78:	bhi	33b2c <__assert_fail@plt+0x1f4d4>
   33a7c:	mov	r1, r8
   33a80:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   33a84:	mul	r6, r8, r0
   33a88:	ldr	r3, [r4, #12]
   33a8c:	cmp	r3, #0
   33a90:	beq	33a9c <__assert_fail@plt+0x1f444>
   33a94:	cmp	r3, r6
   33a98:	bcc	33b40 <__assert_fail@plt+0x1f4e8>
   33a9c:	ldr	r3, [r4, #32]
   33aa0:	mov	r1, r6
   33aa4:	ldr	r0, [r4, #4]
   33aa8:	blx	r3
   33aac:	cmp	r0, #0
   33ab0:	beq	33b54 <__assert_fail@plt+0x1f4fc>
   33ab4:	ldr	r3, [r4, #16]
   33ab8:	str	r0, [r4, #4]
   33abc:	cmp	r6, r3
   33ac0:	str	r6, [r4, #8]
   33ac4:	bcc	33b5c <__assert_fail@plt+0x1f504>
   33ac8:	rsb	r6, r3, r6
   33acc:	cmp	r5, r6
   33ad0:	bls	33afc <__assert_fail@plt+0x1f4a4>
   33ad4:	movw	r0, #34692	; 0x8784
   33ad8:	movw	r1, #34632	; 0x8748
   33adc:	movt	r0, #4
   33ae0:	movt	r1, #4
   33ae4:	movw	r2, #697	; 0x2b9
   33ae8:	ldr	r3, [pc, #172]	; 33b9c <__assert_fail@plt+0x1f544>
   33aec:	bl	14658 <__assert_fail@plt>
   33af0:	cmp	r5, r0
   33af4:	movcs	r5, r0
   33af8:	ldr	r0, [r4, #4]
   33afc:	add	r0, r0, r3
   33b00:	mov	r2, r5
   33b04:	mov	r1, r7
   33b08:	bl	13ba8 <memcpy@plt>
   33b0c:	ldr	r3, [r4, #16]
   33b10:	ldr	r2, [r4, #20]
   33b14:	add	r3, r5, r3
   33b18:	str	r3, [r4, #16]
   33b1c:	cmp	r3, r2
   33b20:	strhi	r3, [r4, #20]
   33b24:	mov	r0, r5
   33b28:	pop	{r4, r5, r6, r7, r8, pc}
   33b2c:	bl	14148 <__errno_location@plt>
   33b30:	mvn	r5, #0
   33b34:	mov	r3, #22
   33b38:	str	r3, [r0]
   33b3c:	b	33b24 <__assert_fail@plt+0x1f4cc>
   33b40:	bl	14148 <__errno_location@plt>
   33b44:	mvn	r5, #0
   33b48:	mov	r3, #28
   33b4c:	str	r3, [r0]
   33b50:	b	33b24 <__assert_fail@plt+0x1f4cc>
   33b54:	mvn	r5, #0
   33b58:	b	33b24 <__assert_fail@plt+0x1f4cc>
   33b5c:	movw	r0, #34644	; 0x8754
   33b60:	movw	r1, #34632	; 0x8748
   33b64:	movt	r0, #4
   33b68:	movt	r1, #4
   33b6c:	movw	r2, #694	; 0x2b6
   33b70:	ldr	r3, [pc, #36]	; 33b9c <__assert_fail@plt+0x1f544>
   33b74:	bl	14658 <__assert_fail@plt>
   33b78:	movw	r0, #34644	; 0x8754
   33b7c:	movw	r1, #34632	; 0x8748
   33b80:	movt	r0, #4
   33b84:	movt	r1, #4
   33b88:	movw	r2, #643	; 0x283
   33b8c:	ldr	r3, [pc, #8]	; 33b9c <__assert_fail@plt+0x1f544>
   33b90:	bl	14658 <__assert_fail@plt>
   33b94:	ldr	r0, [r4, #4]
   33b98:	b	33afc <__assert_fail@plt+0x1f4a4>
   33b9c:	andeq	r8, r4, r0, ror #13
   33ba0:	ldrb	ip, [r0, #32]
   33ba4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   33ba8:	ands	ip, ip, #1
   33bac:	mov	r4, r0
   33bb0:	mov	r8, r1
   33bb4:	mov	r5, r2
   33bb8:	mov	r9, r3
   33bbc:	streq	ip, [r0, #8]
   33bc0:	streq	ip, [r0, #12]
   33bc4:	streq	ip, [r0, #28]
   33bc8:	bne	33c44 <__assert_fail@plt+0x1f5ec>
   33bcc:	ldr	ip, [r4, #36]	; 0x24
   33bd0:	movw	r7, #8288	; 0x2060
   33bd4:	movw	r2, #8284	; 0x205c
   33bd8:	ldrb	r1, [ip, r7]
   33bdc:	ldrb	r6, [ip, r2]
   33be0:	tst	r1, #1
   33be4:	bfc	r6, #1, #1
   33be8:	strb	r6, [ip, r2]
   33bec:	bne	33c20 <__assert_fail@plt+0x1f5c8>
   33bf0:	cmp	r5, #2
   33bf4:	moveq	r3, #0
   33bf8:	streq	r3, [r4, #4]
   33bfc:	beq	33c0c <__assert_fail@plt+0x1f5b4>
   33c00:	cmp	r8, #0
   33c04:	beq	33c54 <__assert_fail@plt+0x1f5fc>
   33c08:	stm	r4, {r8, r9}
   33c0c:	ldr	r2, [r4, #36]	; 0x24
   33c10:	movw	r3, #8276	; 0x2054
   33c14:	mov	r0, #0
   33c18:	str	r5, [r2, r3]
   33c1c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   33c20:	bfc	r1, #0, #1
   33c24:	strb	r1, [ip, r7]
   33c28:	ldr	r0, [r4]
   33c2c:	cmp	r0, #0
   33c30:	beq	33c38 <__assert_fail@plt+0x1f5e0>
   33c34:	bl	13b30 <free@plt>
   33c38:	mov	r3, #0
   33c3c:	str	r3, [r4]
   33c40:	b	33bf0 <__assert_fail@plt+0x1f598>
   33c44:	bl	32d5c <__assert_fail@plt+0x1e704>
   33c48:	cmp	r0, #0
   33c4c:	beq	33bcc <__assert_fail@plt+0x1f574>
   33c50:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   33c54:	cmp	r9, #0
   33c58:	moveq	r9, #8192	; 0x2000
   33c5c:	mov	r0, r9
   33c60:	bl	13f68 <malloc@plt>
   33c64:	cmp	r0, #0
   33c68:	beq	33c88 <__assert_fail@plt+0x1f630>
   33c6c:	ldr	r2, [r4, #36]	; 0x24
   33c70:	movw	r3, #8288	; 0x2060
   33c74:	stm	r4, {r0, r9}
   33c78:	ldrb	r1, [r2, r3]
   33c7c:	orr	r1, r1, #1
   33c80:	strb	r1, [r2, r3]
   33c84:	b	33c0c <__assert_fail@plt+0x1f5b4>
   33c88:	mvn	r0, #0
   33c8c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   33c90:	ldrb	r2, [r0, #32]
   33c94:	mov	r3, r0
   33c98:	ands	r2, r2, #1
   33c9c:	bne	33cb4 <__assert_fail@plt+0x1f65c>
   33ca0:	str	r2, [r0, #8]
   33ca4:	mov	r0, r2
   33ca8:	str	r2, [r3, #12]
   33cac:	str	r2, [r3, #28]
   33cb0:	bx	lr
   33cb4:	b	32d5c <__assert_fail@plt+0x1e704>
   33cb8:	push	{r4, r5, r6, r7, r8, lr}
   33cbc:	movw	r6, #8240	; 0x2030
   33cc0:	ldr	r4, [r0]
   33cc4:	mov	r5, r0
   33cc8:	mov	r7, r1
   33ccc:	mov	r8, r2
   33cd0:	ldr	r0, [r4, r6]
   33cd4:	cmp	r0, #0
   33cd8:	beq	33d0c <__assert_fail@plt+0x1f6b4>
   33cdc:	movw	r3, #8288	; 0x2060
   33ce0:	ldrb	r4, [r4, r3]
   33ce4:	ubfx	r4, r4, #5, #1
   33ce8:	cmp	r4, #0
   33cec:	popne	{r4, r5, r6, r7, r8, pc}
   33cf0:	bl	13b30 <free@plt>
   33cf4:	ldr	r3, [r5]
   33cf8:	str	r4, [r3, r6]
   33cfc:	ldr	r4, [r5]
   33d00:	ldr	r3, [r4, r6]
   33d04:	cmp	r3, #0
   33d08:	popne	{r4, r5, r6, r7, r8, pc}
   33d0c:	ldrb	r3, [r7]
   33d10:	cmp	r3, #91	; 0x5b
   33d14:	movne	r6, #0
   33d18:	movne	r8, r6
   33d1c:	beq	33d68 <__assert_fail@plt+0x1f710>
   33d20:	mov	r0, r7
   33d24:	bl	14094 <strlen@plt>
   33d28:	add	r3, r6, r0
   33d2c:	adds	r0, r3, #1
   33d30:	addeq	r0, r3, #2
   33d34:	bl	13f68 <malloc@plt>
   33d38:	cmp	r8, #0
   33d3c:	movw	r3, #8240	; 0x2030
   33d40:	mov	r1, r7
   33d44:	str	r0, [r4, r3]
   33d48:	movne	r3, #92	; 0x5c
   33d4c:	strbne	r3, [r0]
   33d50:	movw	r3, #8240	; 0x2030
   33d54:	ldr	r2, [r5]
   33d58:	ldr	r0, [r2, r3]
   33d5c:	add	r0, r0, r6
   33d60:	pop	{r4, r5, r6, r7, r8, lr}
   33d64:	b	13e78 <strcpy@plt>
   33d68:	adds	r8, r8, #0
   33d6c:	movne	r8, #1
   33d70:	mov	r6, r8
   33d74:	b	33d20 <__assert_fail@plt+0x1f6c8>
   33d78:	cmp	r0, #0
   33d7c:	beq	33d84 <__assert_fail@plt+0x1f72c>
   33d80:	b	13d34 <realloc@plt>
   33d84:	cmp	r1, #0
   33d88:	movne	r0, r1
   33d8c:	moveq	r0, #1
   33d90:	b	13f68 <malloc@plt>
   33d94:	push	{r4, r5, r6, lr}
   33d98:	mov	r4, r0
   33d9c:	ldr	r0, [r0]
   33da0:	mov	r5, r1
   33da4:	cmp	r0, #0
   33da8:	beq	33dec <__assert_fail@plt+0x1f794>
   33dac:	ldr	r1, [r1]
   33db0:	bl	14574 <fseek@plt>
   33db4:	subs	r6, r0, #0
   33db8:	bne	33de0 <__assert_fail@plt+0x1f788>
   33dbc:	ldr	r0, [r4]
   33dc0:	bl	13c68 <ftell@plt>
   33dc4:	cmn	r0, #1
   33dc8:	beq	33de0 <__assert_fail@plt+0x1f788>
   33dcc:	mov	r2, r0
   33dd0:	asr	r3, r0, #31
   33dd4:	strd	r2, [r5]
   33dd8:	mov	r0, r6
   33ddc:	pop	{r4, r5, r6, pc}
   33de0:	mvn	r6, #0
   33de4:	mov	r0, r6
   33de8:	pop	{r4, r5, r6, pc}
   33dec:	bl	14148 <__errno_location@plt>
   33df0:	mvn	r6, #0
   33df4:	mov	r3, #29
   33df8:	str	r3, [r0]
   33dfc:	b	33dd8 <__assert_fail@plt+0x1f780>
   33e00:	push	{r4, r5, r6, lr}
   33e04:	subs	r4, r0, #0
   33e08:	moveq	r5, r4
   33e0c:	beq	33e98 <__assert_fail@plt+0x1f840>
   33e10:	movw	r5, #47912	; 0xbb28
   33e14:	movt	r5, #5
   33e18:	ldr	r1, [r5]
   33e1c:	cmp	r1, #0
   33e20:	movne	r6, r1
   33e24:	beq	33eac <__assert_fail@plt+0x1f854>
   33e28:	ldr	r0, [r5, #24]
   33e2c:	cmp	r0, #0
   33e30:	bne	33e44 <__assert_fail@plt+0x1f7ec>
   33e34:	b	33e6c <__assert_fail@plt+0x1f814>
   33e38:	ldr	r0, [r0, #4]
   33e3c:	cmp	r0, #0
   33e40:	beq	33e6c <__assert_fail@plt+0x1f814>
   33e44:	ldr	r2, [r0]
   33e48:	cmp	r4, r2
   33e4c:	bne	33e38 <__assert_fail@plt+0x1f7e0>
   33e50:	ldmib	r0, {r1, r2}
   33e54:	str	r1, [r2]
   33e58:	ldr	r2, [r0, #4]
   33e5c:	cmp	r2, #0
   33e60:	ldrne	r1, [r0, #8]
   33e64:	strne	r1, [r2, #8]
   33e68:	bl	13b30 <free@plt>
   33e6c:	cmp	r6, #0
   33e70:	beq	33ea0 <__assert_fail@plt+0x1f848>
   33e74:	mov	r0, r4
   33e78:	bl	32e90 <__assert_fail@plt+0x1e838>
   33e7c:	mov	r5, r0
   33e80:	ldr	r0, [r4, #36]	; 0x24
   33e84:	cmp	r0, #0
   33e88:	beq	33e90 <__assert_fail@plt+0x1f838>
   33e8c:	bl	13b30 <free@plt>
   33e90:	mov	r0, r4
   33e94:	bl	13b30 <free@plt>
   33e98:	mov	r0, r5
   33e9c:	pop	{r4, r5, r6, pc}
   33ea0:	ldr	r0, [pc, #24]	; 33ec0 <__assert_fail@plt+0x1f868>
   33ea4:	bl	14220 <pth_mutex_release@plt>
   33ea8:	b	33e74 <__assert_fail@plt+0x1f81c>
   33eac:	add	r0, r5, #4
   33eb0:	mov	r2, r1
   33eb4:	bl	14364 <pth_mutex_acquire@plt>
   33eb8:	ldr	r6, [r5]
   33ebc:	b	33e28 <__assert_fail@plt+0x1f7d0>
   33ec0:	andeq	fp, r5, ip, lsr #22
   33ec4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   33ec8:	movw	r1, #8264	; 0x2048
   33ecc:	ldr	r8, [r0, #36]	; 0x24
   33ed0:	movw	r7, #47296	; 0xb8c0
   33ed4:	movt	r7, #5
   33ed8:	mov	r5, r3
   33edc:	sub	sp, sp, #20
   33ee0:	mov	r6, r0
   33ee4:	ldr	r9, [r8, r1]
   33ee8:	mov	r4, r2
   33eec:	ldr	r3, [r7]
   33ef0:	cmp	r9, #0
   33ef4:	ldr	sl, [sp, #56]	; 0x38
   33ef8:	str	r3, [sp, #12]
   33efc:	beq	33ff4 <__assert_fail@plt+0x1f99c>
   33f00:	ldrb	r3, [r0, #32]
   33f04:	tst	r3, #1
   33f08:	bne	33f94 <__assert_fail@plt+0x1f93c>
   33f0c:	cmp	sl, #1
   33f10:	strd	r4, [sp]
   33f14:	beq	33fb8 <__assert_fail@plt+0x1f960>
   33f18:	movw	r3, #8228	; 0x2024
   33f1c:	mov	r2, sl
   33f20:	ldr	r0, [r8, r3]
   33f24:	mov	r1, sp
   33f28:	blx	r9
   33f2c:	cmn	r0, #1
   33f30:	ldreq	r8, [r6, #36]	; 0x24
   33f34:	moveq	fp, r0
   33f38:	beq	33fa4 <__assert_fail@plt+0x1f94c>
   33f3c:	ldrb	r1, [r6, #32]
   33f40:	ands	r1, r1, #1
   33f44:	bne	3400c <__assert_fail@plt+0x1f9b4>
   33f48:	ldr	ip, [r6, #36]	; 0x24
   33f4c:	movw	r0, #8284	; 0x205c
   33f50:	ldrd	r2, [sp]
   33f54:	movw	r5, #8248	; 0x2038
   33f58:	mov	fp, r1
   33f5c:	str	r1, [r6, #8]
   33f60:	ldrb	r4, [ip, r0]
   33f64:	str	r1, [r6, #12]
   33f68:	str	r1, [r6, #28]
   33f6c:	bfi	r4, r1, #1, #1
   33f70:	strd	r2, [ip, r5]
   33f74:	strb	r4, [ip, r0]
   33f78:	ldr	r2, [sp, #12]
   33f7c:	mov	r0, fp
   33f80:	ldr	r3, [r7]
   33f84:	cmp	r2, r3
   33f88:	bne	34008 <__assert_fail@plt+0x1f9b0>
   33f8c:	add	sp, sp, #20
   33f90:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   33f94:	bl	32d5c <__assert_fail@plt+0x1e704>
   33f98:	ldr	r8, [r6, #36]	; 0x24
   33f9c:	subs	fp, r0, #0
   33fa0:	beq	33fe4 <__assert_fail@plt+0x1f98c>
   33fa4:	movw	r3, #8284	; 0x205c
   33fa8:	ldrb	r2, [r8, r3]
   33fac:	orr	r2, r2, #1
   33fb0:	strb	r2, [r8, r3]
   33fb4:	b	33f78 <__assert_fail@plt+0x1f920>
   33fb8:	ldr	r3, [r6, #8]
   33fbc:	ldr	r2, [r6, #12]
   33fc0:	subs	r4, r4, r3
   33fc4:	sbc	r5, r5, #0
   33fc8:	ldr	r3, [r6, #28]
   33fcc:	adds	r4, r4, r2
   33fd0:	adc	r5, r5, #0
   33fd4:	subs	r4, r4, r3
   33fd8:	sbc	r5, r5, #0
   33fdc:	strd	r4, [sp]
   33fe0:	b	33f18 <__assert_fail@plt+0x1f8c0>
   33fe4:	ldrb	r3, [r6, #32]
   33fe8:	bfi	r3, fp, #0, #1
   33fec:	strb	r3, [r6, #32]
   33ff0:	b	33f0c <__assert_fail@plt+0x1f8b4>
   33ff4:	bl	14148 <__errno_location@plt>
   33ff8:	mvn	fp, #0
   33ffc:	mov	r3, #95	; 0x5f
   34000:	str	r3, [r0]
   34004:	b	33fa4 <__assert_fail@plt+0x1f94c>
   34008:	bl	13cec <__stack_chk_fail@plt>
   3400c:	bl	14724 <__assert_fail@plt+0xcc>
   34010:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   34014:	movw	r4, #47296	; 0xb8c0
   34018:	movt	r4, #5
   3401c:	ldrb	ip, [r0, #32]
   34020:	mov	r9, r2
   34024:	sub	sp, sp, #24
   34028:	ldr	r2, [r4]
   3402c:	tst	ip, #1
   34030:	mov	r6, r3
   34034:	mov	r5, r0
   34038:	mov	r3, #0
   3403c:	mov	r8, r1
   34040:	str	r3, [sp, #8]
   34044:	str	r2, [sp, #20]
   34048:	ldr	r3, [r0, #36]	; 0x24
   3404c:	bne	34090 <__assert_fail@plt+0x1fa38>
   34050:	movw	r2, #8264	; 0x2048
   34054:	ldr	r2, [r3, r2]
   34058:	cmp	r2, #0
   3405c:	beq	34090 <__assert_fail@plt+0x1fa38>
   34060:	mov	r1, #1
   34064:	mov	r2, #0
   34068:	mov	r3, #0
   3406c:	str	r1, [sp]
   34070:	bl	33ec4 <__assert_fail@plt+0x1f86c>
   34074:	subs	r7, r0, #0
   34078:	beq	3408c <__assert_fail@plt+0x1fa34>
   3407c:	bl	14148 <__errno_location@plt>
   34080:	ldr	r3, [r0]
   34084:	cmp	r3, #29
   34088:	bne	34174 <__assert_fail@plt+0x1fb1c>
   3408c:	ldr	r3, [r5, #36]	; 0x24
   34090:	movw	r2, #8276	; 0x2054
   34094:	ldr	r3, [r3, r2]
   34098:	cmp	r3, #1
   3409c:	beq	34114 <__assert_fail@plt+0x1fabc>
   340a0:	cmp	r3, #2
   340a4:	beq	340f4 <__assert_fail@plt+0x1fa9c>
   340a8:	cmp	r3, #0
   340ac:	beq	3415c <__assert_fail@plt+0x1fb04>
   340b0:	ldr	r2, [sp, #8]
   340b4:	mov	r7, #0
   340b8:	cmp	r6, #0
   340bc:	strne	r2, [r6]
   340c0:	cmp	r2, #0
   340c4:	beq	340d8 <__assert_fail@plt+0x1fa80>
   340c8:	ldrb	r3, [r5, #32]
   340cc:	tst	r3, #1
   340d0:	orreq	r3, r3, #1
   340d4:	strbeq	r3, [r5, #32]
   340d8:	ldr	r2, [sp, #20]
   340dc:	mov	r0, r7
   340e0:	ldr	r3, [r4]
   340e4:	cmp	r2, r3
   340e8:	bne	341c4 <__assert_fail@plt+0x1fb6c>
   340ec:	add	sp, sp, #24
   340f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   340f4:	mov	r2, r9
   340f8:	mov	r1, r8
   340fc:	add	r0, r5, #36	; 0x24
   34100:	add	r3, sp, #8
   34104:	bl	33690 <__assert_fail@plt+0x1f038>
   34108:	ldr	r2, [sp, #8]
   3410c:	mov	r7, r0
   34110:	b	340b8 <__assert_fail@plt+0x1fa60>
   34114:	mov	r0, r8
   34118:	mov	r1, #10
   3411c:	mov	r2, r9
   34120:	mov	r3, #0
   34124:	str	r3, [sp, #12]
   34128:	str	r3, [sp, #16]
   3412c:	bl	140dc <memrchr@plt>
   34130:	subs	sl, r0, #0
   34134:	beq	3417c <__assert_fail@plt+0x1fb24>
   34138:	mov	r0, r5
   3413c:	bl	32d5c <__assert_fail@plt+0x1e704>
   34140:	subs	r7, r0, #0
   34144:	beq	3419c <__assert_fail@plt+0x1fb44>
   34148:	ldr	r2, [sp, #16]
   3414c:	ldr	r3, [sp, #12]
   34150:	add	r2, r2, r3
   34154:	str	r2, [sp, #8]
   34158:	b	340b8 <__assert_fail@plt+0x1fa60>
   3415c:	mov	r1, r8
   34160:	mov	r2, r9
   34164:	mov	r0, r5
   34168:	add	r3, sp, #8
   3416c:	bl	33318 <__assert_fail@plt+0x1ecc0>
   34170:	mov	r7, r0
   34174:	ldr	r2, [sp, #8]
   34178:	b	340b8 <__assert_fail@plt+0x1fa60>
   3417c:	mov	r2, sl
   34180:	add	r1, r8, r2
   34184:	mov	r0, r5
   34188:	rsb	r2, r2, r9
   3418c:	add	r3, sp, #16
   34190:	bl	33318 <__assert_fail@plt+0x1ecc0>
   34194:	mov	r7, r0
   34198:	b	34148 <__assert_fail@plt+0x1faf0>
   3419c:	rsb	r2, r8, sl
   341a0:	add	r0, r5, #36	; 0x24
   341a4:	add	r2, r2, #1
   341a8:	mov	r1, r8
   341ac:	add	r3, sp, #12
   341b0:	bl	33690 <__assert_fail@plt+0x1f038>
   341b4:	subs	r7, r0, #0
   341b8:	bne	34148 <__assert_fail@plt+0x1faf0>
   341bc:	ldr	r2, [sp, #12]
   341c0:	b	34180 <__assert_fail@plt+0x1fb28>
   341c4:	bl	13cec <__stack_chk_fail@plt>
   341c8:	push	{r4, r5, lr}
   341cc:	movw	r4, #47296	; 0xb8c0
   341d0:	movt	r4, #5
   341d4:	sub	sp, sp, #12
   341d8:	add	r3, sp, #8
   341dc:	mov	r5, r0
   341e0:	ldr	ip, [r4]
   341e4:	mov	lr, #0
   341e8:	str	lr, [r3, #-8]!
   341ec:	mov	r3, sp
   341f0:	str	ip, [sp, #4]
   341f4:	bl	34010 <__assert_fail@plt+0x1f9b8>
   341f8:	ldr	r2, [r5, #36]	; 0x24
   341fc:	movw	r3, #8296	; 0x2068
   34200:	ldr	r5, [sp, #4]
   34204:	ldr	r4, [r4]
   34208:	ldr	r1, [r2, r3]
   3420c:	ldr	ip, [sp]
   34210:	cmp	r5, r4
   34214:	add	r1, ip, r1
   34218:	str	r1, [r2, r3]
   3421c:	bne	34228 <__assert_fail@plt+0x1fbd0>
   34220:	add	sp, sp, #12
   34224:	pop	{r4, r5, pc}
   34228:	bl	13cec <__stack_chk_fail@plt>
   3422c:	push	{r4, r5, r6, r7, lr}
   34230:	movw	r4, #47912	; 0xbb28
   34234:	movt	r4, #5
   34238:	mov	r7, r1
   3423c:	sub	sp, sp, #12
   34240:	mov	r5, r0
   34244:	ldr	r1, [r4]
   34248:	mov	r6, r2
   3424c:	cmp	r1, #0
   34250:	beq	34290 <__assert_fail@plt+0x1fc38>
   34254:	mov	r2, r6
   34258:	mov	r1, r7
   3425c:	mov	r0, r5
   34260:	bl	34010 <__assert_fail@plt+0x1f9b8>
   34264:	ldr	r3, [r4]
   34268:	cmp	r3, #0
   3426c:	mov	r6, r0
   34270:	bne	34284 <__assert_fail@plt+0x1fc2c>
   34274:	ldr	r0, [r5, #36]	; 0x24
   34278:	add	r0, r0, #8192	; 0x2000
   3427c:	add	r0, r0, #16
   34280:	bl	14220 <pth_mutex_release@plt>
   34284:	mov	r0, r6
   34288:	add	sp, sp, #12
   3428c:	pop	{r4, r5, r6, r7, pc}
   34290:	ldr	r0, [r0, #36]	; 0x24
   34294:	mov	r2, r1
   34298:	str	r3, [sp, #4]
   3429c:	add	r0, r0, #8192	; 0x2000
   342a0:	add	r0, r0, #16
   342a4:	bl	14364 <pth_mutex_acquire@plt>
   342a8:	ldr	r3, [sp, #4]
   342ac:	b	34254 <__assert_fail@plt+0x1fbfc>
   342b0:	push	{r3, lr}
   342b4:	bl	142a4 <pth_kill@plt>
   342b8:	cmp	r0, #0
   342bc:	movwne	r3, #47912	; 0xbb28
   342c0:	movtne	r3, #5
   342c4:	movne	r2, #1
   342c8:	strne	r2, [r3]
   342cc:	pop	{r3, pc}
   342d0:	push	{r4, lr}
   342d4:	movw	r4, #47912	; 0xbb28
   342d8:	movt	r4, #5
   342dc:	ldr	r3, [r4, #28]
   342e0:	cmp	r3, #0
   342e4:	bne	34310 <__assert_fail@plt+0x1fcb8>
   342e8:	ldr	r3, [r4]
   342ec:	cmp	r3, #0
   342f0:	beq	34318 <__assert_fail@plt+0x1fcc0>
   342f4:	mov	r3, #1
   342f8:	str	r3, [r4, #28]
   342fc:	movw	r0, #21332	; 0x5354
   34300:	movt	r0, #3
   34304:	bl	4055c <__assert_fail@plt+0x2bf04>
   34308:	mov	r0, #0
   3430c:	pop	{r4, pc}
   34310:	mov	r0, #0
   34314:	pop	{r4, pc}
   34318:	bl	1395c <pth_init@plt>
   3431c:	cmp	r0, #0
   34320:	bne	34334 <__assert_fail@plt+0x1fcdc>
   34324:	bl	14148 <__errno_location@plt>
   34328:	ldr	r3, [r0]
   3432c:	cmp	r3, #1
   34330:	bne	34348 <__assert_fail@plt+0x1fcf0>
   34334:	ldr	r0, [pc, #20]	; 34350 <__assert_fail@plt+0x1fcf8>
   34338:	bl	13980 <pth_mutex_init@plt>
   3433c:	cmp	r0, #0
   34340:	bne	342f4 <__assert_fail@plt+0x1fc9c>
   34344:	b	342fc <__assert_fail@plt+0x1fca4>
   34348:	mvn	r0, #0
   3434c:	pop	{r4, pc}
   34350:	andeq	fp, r5, ip, lsr #22
   34354:	push	{r4, r5, r6, r7, lr}
   34358:	movw	r4, #47296	; 0xb8c0
   3435c:	movt	r4, #5
   34360:	sub	sp, sp, #52	; 0x34
   34364:	mov	r5, r0
   34368:	mov	r0, r1
   3436c:	ldr	ip, [r4]
   34370:	add	r1, sp, #28
   34374:	mov	r3, #0
   34378:	str	r3, [sp, #32]
   3437c:	str	r3, [sp, #36]	; 0x24
   34380:	str	ip, [sp, #44]	; 0x2c
   34384:	bl	33758 <__assert_fail@plt+0x1f100>
   34388:	cmp	r0, #0
   3438c:	beq	343ac <__assert_fail@plt+0x1fd54>
   34390:	ldr	r0, [sp, #32]
   34394:	ldr	r2, [sp, #44]	; 0x2c
   34398:	ldr	r3, [r4]
   3439c:	cmp	r2, r3
   343a0:	bne	34444 <__assert_fail@plt+0x1fdec>
   343a4:	add	sp, sp, #52	; 0x34
   343a8:	pop	{r4, r5, r6, r7, pc}
   343ac:	add	r0, sp, #36	; 0x24
   343b0:	add	r1, sp, #40	; 0x28
   343b4:	mov	r2, r5
   343b8:	ldr	r3, [sp, #28]
   343bc:	bl	32ce8 <__assert_fail@plt+0x1e690>
   343c0:	subs	ip, r0, #0
   343c4:	bne	34390 <__assert_fail@plt+0x1fd38>
   343c8:	movw	r3, #34516	; 0x86d4
   343cc:	movt	r3, #4
   343d0:	add	r0, r3, #48	; 0x30
   343d4:	ldr	r7, [sp, #36]	; 0x24
   343d8:	ldr	r6, [sp, #40]	; 0x28
   343dc:	ldm	r0, {r0, r1, r2}
   343e0:	ldr	lr, [sp, #28]
   343e4:	str	ip, [sp, #16]
   343e8:	ldr	r3, [r3, #44]	; 0x2c
   343ec:	stm	sp, {r0, r1, r2}
   343f0:	mov	r1, r7
   343f4:	mov	r2, r6
   343f8:	str	lr, [sp, #12]
   343fc:	add	r0, sp, #32
   34400:	bl	32f68 <__assert_fail@plt+0x1e910>
   34404:	cmp	r0, #0
   34408:	bne	34438 <__assert_fail@plt+0x1fde0>
   3440c:	ldr	r0, [sp, #32]
   34410:	cmp	r0, #0
   34414:	beq	34394 <__assert_fail@plt+0x1fd3c>
   34418:	cmp	r5, #0
   3441c:	beq	34394 <__assert_fail@plt+0x1fd3c>
   34420:	add	r0, r0, #36	; 0x24
   34424:	mov	r1, r5
   34428:	mov	r2, #1
   3442c:	bl	33cb8 <__assert_fail@plt+0x1f660>
   34430:	ldr	r0, [sp, #32]
   34434:	b	34394 <__assert_fail@plt+0x1fd3c>
   34438:	ldr	r0, [sp, #36]	; 0x24
   3443c:	bl	32c70 <__assert_fail@plt+0x1e618>
   34440:	b	34390 <__assert_fail@plt+0x1fd38>
   34444:	bl	13cec <__stack_chk_fail@plt>
   34448:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3444c:	sub	sp, sp, #52	; 0x34
   34450:	movw	r4, #47296	; 0xb8c0
   34454:	movt	r4, #5
   34458:	ldr	lr, [sp, #96]	; 0x60
   3445c:	mov	r6, r0
   34460:	ldr	ip, [r4]
   34464:	mov	sl, r1
   34468:	add	r1, sp, #36	; 0x24
   3446c:	mov	r9, r2
   34470:	mov	r0, lr
   34474:	mov	fp, r3
   34478:	str	ip, [sp, #44]	; 0x2c
   3447c:	mov	r3, #0
   34480:	ldr	r8, [sp, #88]	; 0x58
   34484:	str	r3, [sp, #40]	; 0x28
   34488:	ldr	r7, [sp, #92]	; 0x5c
   3448c:	bl	33758 <__assert_fail@plt+0x1f100>
   34490:	cmp	r0, #0
   34494:	beq	344b4 <__assert_fail@plt+0x1fe5c>
   34498:	ldr	r2, [sp, #44]	; 0x2c
   3449c:	ldr	r3, [r4]
   344a0:	ldr	r0, [sp, #40]	; 0x28
   344a4:	cmp	r2, r3
   344a8:	bne	345a0 <__assert_fail@plt+0x1ff48>
   344ac:	add	sp, sp, #52	; 0x34
   344b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   344b4:	ldr	r2, [sp, #36]	; 0x24
   344b8:	cmp	r6, #0
   344bc:	str	r2, [sp, #28]
   344c0:	beq	34588 <__assert_fail@plt+0x1ff30>
   344c4:	mov	r0, #40	; 0x28
   344c8:	bl	13f68 <malloc@plt>
   344cc:	subs	r5, r0, #0
   344d0:	beq	34498 <__assert_fail@plt+0x1fe40>
   344d4:	adds	fp, fp, #0
   344d8:	movw	r3, #34516	; 0x86d4
   344dc:	movt	r3, #4
   344e0:	ldrb	lr, [r5, #28]
   344e4:	movne	fp, #1
   344e8:	str	fp, [sp, #24]
   344ec:	ldr	fp, [sp, #28]
   344f0:	add	r2, r3, #64	; 0x40
   344f4:	cmp	r8, #0
   344f8:	movw	ip, #15736	; 0x3d78
   344fc:	ldm	r2, {r0, r1, r2}
   34500:	movt	ip, #3
   34504:	str	fp, [r5]
   34508:	ldr	fp, [sp, #24]
   3450c:	moveq	r8, ip
   34510:	str	r6, [r5, #4]
   34514:	cmp	r7, #0
   34518:	bfi	lr, fp, #0, #1
   3451c:	ldr	fp, [sp, #28]
   34520:	movw	r6, #11364	; 0x2c64
   34524:	movt	r6, #3
   34528:	strb	lr, [r5, #28]
   3452c:	mov	ip, #8192	; 0x2000
   34530:	str	sl, [r5, #8]
   34534:	mov	lr, #0
   34538:	str	r9, [r5, #20]
   3453c:	moveq	r7, r6
   34540:	str	r8, [r5, #32]
   34544:	str	r7, [r5, #36]	; 0x24
   34548:	str	lr, [r5, #12]
   3454c:	str	lr, [r5, #16]
   34550:	str	ip, [r5, #24]
   34554:	ldr	r3, [r3, #60]	; 0x3c
   34558:	stm	sp, {r0, r1, r2}
   3455c:	add	r0, sp, #40	; 0x28
   34560:	str	lr, [sp, #16]
   34564:	mov	r1, r5
   34568:	str	fp, [sp, #12]
   3456c:	mvn	r2, #0
   34570:	bl	32f68 <__assert_fail@plt+0x1e910>
   34574:	cmp	r0, #0
   34578:	beq	34498 <__assert_fail@plt+0x1fe40>
   3457c:	mov	r0, r5
   34580:	bl	32cc0 <__assert_fail@plt+0x1e668>
   34584:	b	34498 <__assert_fail@plt+0x1fe40>
   34588:	orrs	r3, sl, r9
   3458c:	beq	344c4 <__assert_fail@plt+0x1fe6c>
   34590:	bl	14148 <__errno_location@plt>
   34594:	mov	r3, #22
   34598:	str	r3, [r0]
   3459c:	b	34498 <__assert_fail@plt+0x1fe40>
   345a0:	bl	13cec <__stack_chk_fail@plt>
   345a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   345a8:	movw	r5, #47296	; 0xb8c0
   345ac:	movt	r5, #5
   345b0:	sub	sp, sp, #44	; 0x2c
   345b4:	mov	r8, r0
   345b8:	mov	r0, r1
   345bc:	ldr	r3, [r5]
   345c0:	add	r1, sp, #28
   345c4:	mov	r2, #0
   345c8:	str	r2, [sp, #32]
   345cc:	str	r3, [sp, #36]	; 0x24
   345d0:	bl	33758 <__assert_fail@plt+0x1f100>
   345d4:	subs	r6, r0, #0
   345d8:	bne	346a8 <__assert_fail@plt+0x20050>
   345dc:	ldr	r7, [sp, #28]
   345e0:	mov	r0, #40	; 0x28
   345e4:	orr	r7, r7, #2
   345e8:	str	r7, [sp, #28]
   345ec:	bl	13f68 <malloc@plt>
   345f0:	subs	r4, r0, #0
   345f4:	beq	346a8 <__assert_fail@plt+0x20050>
   345f8:	movw	r3, #34516	; 0x86d4
   345fc:	movt	r3, #4
   34600:	add	r2, r3, #64	; 0x40
   34604:	ldrb	r9, [r4, #28]
   34608:	str	r8, [r4, #12]
   3460c:	movw	lr, #15736	; 0x3d78
   34610:	ldm	r2, {r0, r1, r2}
   34614:	movt	lr, #3
   34618:	str	r7, [r4]
   3461c:	orr	r9, r9, #1
   34620:	str	r6, [r4, #4]
   34624:	movw	ip, #11364	; 0x2c64
   34628:	str	r6, [r4, #8]
   3462c:	movt	ip, #3
   34630:	str	r6, [r4, #16]
   34634:	mov	r8, #8192	; 0x2000
   34638:	str	r6, [r4, #20]
   3463c:	strb	r9, [r4, #28]
   34640:	str	lr, [r4, #32]
   34644:	str	ip, [r4, #36]	; 0x24
   34648:	str	r8, [r4, #24]
   3464c:	ldr	r3, [r3, #60]	; 0x3c
   34650:	stm	sp, {r0, r1, r2}
   34654:	add	r0, sp, #32
   34658:	str	r7, [sp, #12]
   3465c:	mov	r1, r4
   34660:	str	r6, [sp, #16]
   34664:	mvn	r2, #0
   34668:	bl	32f68 <__assert_fail@plt+0x1e910>
   3466c:	cmp	r0, #0
   34670:	bne	346b0 <__assert_fail@plt+0x20058>
   34674:	ldr	r0, [sp, #32]
   34678:	cmp	r0, #0
   3467c:	ldrne	r1, [r0, #36]	; 0x24
   34680:	movwne	r2, #8268	; 0x204c
   34684:	movwne	r3, #14320	; 0x37f0
   34688:	movtne	r3, #3
   3468c:	strne	r3, [r1, r2]
   34690:	ldr	r2, [sp, #36]	; 0x24
   34694:	ldr	r3, [r5]
   34698:	cmp	r2, r3
   3469c:	bne	346bc <__assert_fail@plt+0x20064>
   346a0:	add	sp, sp, #44	; 0x2c
   346a4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   346a8:	mov	r0, #0
   346ac:	b	34690 <__assert_fail@plt+0x20038>
   346b0:	mov	r0, r4
   346b4:	bl	32cc0 <__assert_fail@plt+0x1e668>
   346b8:	b	34674 <__assert_fail@plt+0x2001c>
   346bc:	bl	13cec <__stack_chk_fail@plt>
   346c0:	cmp	r0, #0
   346c4:	cmpne	r0, r3
   346c8:	push	{r4, r5, r6, lr}
   346cc:	movcc	r0, r3
   346d0:	sub	sp, sp, #8
   346d4:	mov	r6, r2
   346d8:	mov	r4, r3
   346dc:	bl	345a4 <__assert_fail@plt+0x1ff4c>
   346e0:	cmp	r0, #0
   346e4:	cmpne	r6, #0
   346e8:	mov	r5, r0
   346ec:	beq	346f8 <__assert_fail@plt+0x200a0>
   346f0:	cmp	r4, #0
   346f4:	bne	34704 <__assert_fail@plt+0x200ac>
   346f8:	mov	r0, r5
   346fc:	add	sp, sp, #8
   34700:	pop	{r4, r5, r6, pc}
   34704:	mov	r2, r4
   34708:	mov	r1, r6
   3470c:	mov	r3, #0
   34710:	bl	34010 <__assert_fail@plt+0x1f9b8>
   34714:	subs	r4, r0, #0
   34718:	bne	34754 <__assert_fail@plt+0x200fc>
   3471c:	str	r4, [sp]
   34720:	mov	r0, r5
   34724:	mov	r2, #0
   34728:	mov	r3, #0
   3472c:	bl	33ec4 <__assert_fail@plt+0x1f86c>
   34730:	ldr	r2, [r5, #36]	; 0x24
   34734:	movw	r3, #8284	; 0x205c
   34738:	mov	r0, r5
   3473c:	ldrb	r1, [r2, r3]
   34740:	bfi	r1, r4, #0, #1
   34744:	bfi	r1, r4, #1, #1
   34748:	strb	r1, [r2, r3]
   3474c:	add	sp, sp, #8
   34750:	pop	{r4, r5, r6, pc}
   34754:	bl	14148 <__errno_location@plt>
   34758:	ldr	r6, [r0]
   3475c:	mov	r4, r0
   34760:	mov	r0, r5
   34764:	mov	r5, #0
   34768:	bl	33e00 <__assert_fail@plt+0x1f7a8>
   3476c:	str	r6, [r4]
   34770:	b	346f8 <__assert_fail@plt+0x200a0>
   34774:	sub	sp, sp, #8
   34778:	push	{r4, r5, r6, lr}
   3477c:	movw	r4, #47296	; 0xb8c0
   34780:	sub	sp, sp, #40	; 0x28
   34784:	movt	r4, #5
   34788:	add	ip, sp, #40	; 0x28
   3478c:	mov	lr, #0
   34790:	ldr	r5, [r4]
   34794:	mov	r6, r0
   34798:	str	lr, [ip, #-12]!
   3479c:	mov	r0, r1
   347a0:	mov	r1, ip
   347a4:	add	ip, sp, #52	; 0x34
   347a8:	str	r5, [sp, #36]	; 0x24
   347ac:	stmib	ip, {r2, r3}
   347b0:	str	lr, [sp, #32]
   347b4:	bl	33758 <__assert_fail@plt+0x1f100>
   347b8:	cmp	r0, #0
   347bc:	bne	347ec <__assert_fail@plt+0x20194>
   347c0:	add	r3, sp, #60	; 0x3c
   347c4:	str	r0, [sp, #16]
   347c8:	ldr	ip, [sp, #28]
   347cc:	ldm	r3, {r0, r1, r2}
   347d0:	str	ip, [sp, #12]
   347d4:	ldr	r3, [sp, #56]	; 0x38
   347d8:	stm	sp, {r0, r1, r2}
   347dc:	mov	r1, r6
   347e0:	add	r0, sp, #32
   347e4:	mvn	r2, #0
   347e8:	bl	32f68 <__assert_fail@plt+0x1e910>
   347ec:	ldr	r2, [sp, #36]	; 0x24
   347f0:	ldr	r3, [r4]
   347f4:	ldr	r0, [sp, #32]
   347f8:	cmp	r2, r3
   347fc:	bne	34810 <__assert_fail@plt+0x201b8>
   34800:	add	sp, sp, #40	; 0x28
   34804:	pop	{r4, r5, r6, lr}
   34808:	add	sp, sp, #8
   3480c:	bx	lr
   34810:	bl	13cec <__stack_chk_fail@plt>
   34814:	push	{r4, r5, r6, r7, r8, lr}
   34818:	movw	r4, #47296	; 0xb8c0
   3481c:	movt	r4, #5
   34820:	sub	sp, sp, #40	; 0x28
   34824:	mov	r5, r0
   34828:	mov	r0, r1
   3482c:	ldr	ip, [r4]
   34830:	add	r1, sp, #28
   34834:	mov	lr, #0
   34838:	mov	r8, r2
   3483c:	mov	r7, r3
   34840:	str	lr, [sp, #32]
   34844:	str	ip, [sp, #36]	; 0x24
   34848:	bl	33758 <__assert_fail@plt+0x1f100>
   3484c:	cmp	r0, #0
   34850:	beq	34870 <__assert_fail@plt+0x20218>
   34854:	ldr	r2, [sp, #36]	; 0x24
   34858:	ldr	r3, [r4]
   3485c:	ldr	r0, [sp, #32]
   34860:	cmp	r2, r3
   34864:	bne	348d0 <__assert_fail@plt+0x20278>
   34868:	add	sp, sp, #40	; 0x28
   3486c:	pop	{r4, r5, r6, r7, r8, pc}
   34870:	mov	r0, #8
   34874:	bl	13f68 <malloc@plt>
   34878:	subs	r6, r0, #0
   3487c:	beq	34854 <__assert_fail@plt+0x201fc>
   34880:	movw	r3, #34516	; 0x86d4
   34884:	movt	r3, #4
   34888:	add	r2, r3, #48	; 0x30
   3488c:	ldr	ip, [sp, #28]
   34890:	str	r5, [r6]
   34894:	ldm	r2, {r0, r1, r2}
   34898:	str	r8, [r6, #4]
   3489c:	ldr	r3, [r3, #44]	; 0x2c
   348a0:	str	r7, [sp, #16]
   348a4:	stm	sp, {r0, r1, r2}
   348a8:	mov	r2, r5
   348ac:	str	ip, [sp, #12]
   348b0:	add	r0, sp, #32
   348b4:	mov	r1, r6
   348b8:	bl	32f68 <__assert_fail@plt+0x1e910>
   348bc:	cmp	r0, #0
   348c0:	beq	34854 <__assert_fail@plt+0x201fc>
   348c4:	mov	r0, r6
   348c8:	bl	32c70 <__assert_fail@plt+0x1e618>
   348cc:	b	34854 <__assert_fail@plt+0x201fc>
   348d0:	bl	13cec <__stack_chk_fail@plt>
   348d4:	mov	r2, #0
   348d8:	mov	r3, r2
   348dc:	b	34814 <__assert_fail@plt+0x201bc>
   348e0:	mov	r2, #1
   348e4:	mov	r3, #0
   348e8:	b	34814 <__assert_fail@plt+0x201bc>
   348ec:	push	{r4, r5, r6, r7, r8, lr}
   348f0:	movw	r4, #47296	; 0xb8c0
   348f4:	movt	r4, #5
   348f8:	sub	sp, sp, #40	; 0x28
   348fc:	mov	r5, r0
   34900:	mov	r0, r1
   34904:	ldr	ip, [r4]
   34908:	add	r1, sp, #28
   3490c:	mov	lr, #0
   34910:	mov	r7, r2
   34914:	mov	r8, r3
   34918:	str	lr, [sp, #32]
   3491c:	str	ip, [sp, #36]	; 0x24
   34920:	bl	33758 <__assert_fail@plt+0x1f100>
   34924:	cmp	r0, #0
   34928:	bne	349ac <__assert_fail@plt+0x20354>
   3492c:	cmp	r5, #0
   34930:	beq	3493c <__assert_fail@plt+0x202e4>
   34934:	mov	r0, r5
   34938:	bl	13ae8 <fflush@plt>
   3493c:	mov	r0, #8
   34940:	bl	13f68 <malloc@plt>
   34944:	subs	r6, r0, #0
   34948:	beq	349ac <__assert_fail@plt+0x20354>
   3494c:	cmp	r5, #0
   34950:	stm	r6, {r5, r7}
   34954:	mvneq	ip, #0
   34958:	beq	34968 <__assert_fail@plt+0x20310>
   3495c:	mov	r0, r5
   34960:	bl	14244 <fileno@plt>
   34964:	mov	ip, r0
   34968:	movw	r3, #34516	; 0x86d4
   3496c:	movt	r3, #4
   34970:	add	r1, r3, #80	; 0x50
   34974:	ldr	lr, [sp, #28]
   34978:	str	r8, [sp, #16]
   3497c:	ldm	r1, {r0, r1, r2}
   34980:	ldr	r3, [r3, #76]	; 0x4c
   34984:	str	lr, [sp, #12]
   34988:	stm	sp, {r0, r1, r2}
   3498c:	mov	r2, ip
   34990:	add	r0, sp, #32
   34994:	mov	r1, r6
   34998:	bl	32f68 <__assert_fail@plt+0x1e910>
   3499c:	cmp	r0, #0
   349a0:	beq	349ac <__assert_fail@plt+0x20354>
   349a4:	mov	r0, r6
   349a8:	bl	333c4 <__assert_fail@plt+0x1ed6c>
   349ac:	ldr	r2, [sp, #36]	; 0x24
   349b0:	ldr	r3, [r4]
   349b4:	ldr	r0, [sp, #32]
   349b8:	cmp	r2, r3
   349bc:	bne	349c8 <__assert_fail@plt+0x20370>
   349c0:	add	sp, sp, #40	; 0x28
   349c4:	pop	{r4, r5, r6, r7, r8, pc}
   349c8:	bl	13cec <__stack_chk_fail@plt>
   349cc:	mov	r2, #0
   349d0:	mov	r3, r2
   349d4:	b	348ec <__assert_fail@plt+0x20294>
   349d8:	mov	r2, #1
   349dc:	mov	r3, #0
   349e0:	b	348ec <__assert_fail@plt+0x20294>
   349e4:	push	{r4, r5, r6, lr}
   349e8:	movw	r4, #47912	; 0xbb28
   349ec:	movt	r4, #5
   349f0:	mov	r6, r1
   349f4:	mov	r5, r0
   349f8:	ldr	r1, [r4]
   349fc:	cmp	r1, #0
   34a00:	movne	r3, r1
   34a04:	beq	34a48 <__assert_fail@plt+0x203f0>
   34a08:	cmp	r5, #2
   34a0c:	bhi	34a34 <__assert_fail@plt+0x203dc>
   34a10:	add	r4, r4, r5
   34a14:	movw	r2, #47912	; 0xbb28
   34a18:	movt	r2, #5
   34a1c:	ldrb	r1, [r4, #32]
   34a20:	cmp	r1, #0
   34a24:	addeq	r5, r2, r5, lsl #2
   34a28:	moveq	r2, #1
   34a2c:	strbeq	r2, [r4, #32]
   34a30:	streq	r6, [r5, #36]	; 0x24
   34a34:	cmp	r3, #0
   34a38:	popne	{r4, r5, r6, pc}
   34a3c:	ldr	r0, [pc, #24]	; 34a5c <__assert_fail@plt+0x20404>
   34a40:	pop	{r4, r5, r6, lr}
   34a44:	b	14220 <pth_mutex_release@plt>
   34a48:	add	r0, r4, #4
   34a4c:	mov	r2, r1
   34a50:	bl	14364 <pth_mutex_acquire@plt>
   34a54:	ldr	r3, [r4]
   34a58:	b	34a08 <__assert_fail@plt+0x203b0>
   34a5c:	andeq	fp, r5, ip, lsr #22
   34a60:	push	{r4, r5, r6, r7, lr}
   34a64:	movw	r6, #21846	; 0x5556
   34a68:	movt	r6, #21845	; 0x5555
   34a6c:	movw	r7, #47912	; 0xbb28
   34a70:	movt	r7, #5
   34a74:	sub	sp, sp, #12
   34a78:	smull	r3, r6, r6, r0
   34a7c:	ldr	r1, [r7]
   34a80:	cmp	r1, #0
   34a84:	sub	r6, r6, r0, asr #31
   34a88:	add	r6, r6, r6, lsl #1
   34a8c:	rsb	r6, r6, r0
   34a90:	beq	34c3c <__assert_fail@plt+0x205e4>
   34a94:	ldr	r1, [r7, #24]
   34a98:	cmp	r1, #0
   34a9c:	beq	34ad0 <__assert_fail@plt+0x20478>
   34aa0:	movw	r5, #8288	; 0x2060
   34aa4:	ldr	r4, [r1]
   34aa8:	ldr	r0, [r4, #36]	; 0x24
   34aac:	ldrb	ip, [r0, r5]
   34ab0:	tst	ip, #2
   34ab4:	beq	34ac4 <__assert_fail@plt+0x2046c>
   34ab8:	ubfx	ip, ip, #2, #2
   34abc:	cmp	ip, r6
   34ac0:	beq	34c1c <__assert_fail@plt+0x205c4>
   34ac4:	ldr	r1, [r1, #4]
   34ac8:	cmp	r1, #0
   34acc:	bne	34aa4 <__assert_fail@plt+0x2044c>
   34ad0:	cmp	r6, #0
   34ad4:	bne	34b94 <__assert_fail@plt+0x2053c>
   34ad8:	ldrb	r2, [r7, #32]
   34adc:	movw	r3, #47912	; 0xbb28
   34ae0:	movt	r3, #5
   34ae4:	cmp	r2, #0
   34ae8:	bne	34cb0 <__assert_fail@plt+0x20658>
   34aec:	ldrb	r2, [r7, #34]	; 0x22
   34af0:	movw	r3, #47912	; 0xbb28
   34af4:	movt	r3, #5
   34af8:	cmp	r2, #0
   34afc:	bne	34c90 <__assert_fail@plt+0x20638>
   34b00:	cmp	r6, #0
   34b04:	beq	34ce8 <__assert_fail@plt+0x20690>
   34b08:	cmp	r6, #1
   34b0c:	beq	34c4c <__assert_fail@plt+0x205f4>
   34b10:	movw	r3, #47304	; 0xb8c8
   34b14:	movt	r3, #5
   34b18:	mov	r2, #1
   34b1c:	movw	r1, #20752	; 0x5110
   34b20:	ldr	r0, [r3]
   34b24:	movt	r1, #4
   34b28:	mov	r3, r2
   34b2c:	bl	348ec <__assert_fail@plt+0x20294>
   34b30:	mov	r4, r0
   34b34:	cmp	r4, #0
   34b38:	movweq	r1, #20752	; 0x5110
   34b3c:	movteq	r1, #4
   34b40:	bne	34bd4 <__assert_fail@plt+0x2057c>
   34b44:	mov	r0, #0
   34b48:	mov	r3, #1
   34b4c:	mov	r2, r0
   34b50:	bl	348ec <__assert_fail@plt+0x20294>
   34b54:	subs	r4, r0, #0
   34b58:	bne	34bd4 <__assert_fail@plt+0x2057c>
   34b5c:	movw	r3, #47304	; 0xb8c8
   34b60:	movt	r3, #5
   34b64:	ldr	r4, [r3]
   34b68:	bl	14148 <__errno_location@plt>
   34b6c:	ldr	r0, [r0]
   34b70:	bl	13fa4 <strerror@plt>
   34b74:	mov	r3, r6
   34b78:	movw	r2, #34744	; 0x87b8
   34b7c:	mov	r1, #1
   34b80:	movt	r2, #4
   34b84:	str	r0, [sp]
   34b88:	mov	r0, r4
   34b8c:	bl	14274 <__fprintf_chk@plt>
   34b90:	bl	145c8 <abort@plt>
   34b94:	cmp	r6, #1
   34b98:	bne	34aec <__assert_fail@plt+0x20494>
   34b9c:	ldrb	r2, [r7, #33]	; 0x21
   34ba0:	movw	r3, #47912	; 0xbb28
   34ba4:	movt	r3, #5
   34ba8:	cmp	r2, #0
   34bac:	beq	34aec <__assert_fail@plt+0x20494>
   34bb0:	ldr	r0, [r3, #40]	; 0x28
   34bb4:	movw	r1, #20752	; 0x5110
   34bb8:	mov	r2, r6
   34bbc:	movt	r1, #4
   34bc0:	mov	r3, r6
   34bc4:	bl	34814 <__assert_fail@plt+0x201bc>
   34bc8:	mov	r4, r0
   34bcc:	cmp	r4, #0
   34bd0:	beq	34b00 <__assert_fail@plt+0x204a8>
   34bd4:	ldr	r2, [r4, #36]	; 0x24
   34bd8:	movw	r3, #8288	; 0x2060
   34bdc:	cmp	r6, #2
   34be0:	ldrb	r1, [r2, r3]
   34be4:	orr	r1, r1, #2
   34be8:	strb	r1, [r2, r3]
   34bec:	ldr	r2, [r4, #36]	; 0x24
   34bf0:	ldrb	r1, [r2, r3]
   34bf4:	bfi	r1, r6, #2, #2
   34bf8:	strb	r1, [r2, r3]
   34bfc:	beq	34cd0 <__assert_fail@plt+0x20678>
   34c00:	cmp	r6, #0
   34c04:	movweq	r1, #31524	; 0x7b24
   34c08:	movteq	r1, #4
   34c0c:	bne	34c74 <__assert_fail@plt+0x2061c>
   34c10:	add	r0, r4, #36	; 0x24
   34c14:	mov	r2, #0
   34c18:	bl	33cb8 <__assert_fail@plt+0x1f660>
   34c1c:	ldr	r3, [r7]
   34c20:	cmp	r3, #0
   34c24:	bne	34c30 <__assert_fail@plt+0x205d8>
   34c28:	ldr	r0, [pc, #280]	; 34d48 <__assert_fail@plt+0x206f0>
   34c2c:	bl	14220 <pth_mutex_release@plt>
   34c30:	mov	r0, r4
   34c34:	add	sp, sp, #12
   34c38:	pop	{r4, r5, r6, r7, pc}
   34c3c:	add	r0, r7, #4
   34c40:	mov	r2, r1
   34c44:	bl	14364 <pth_mutex_acquire@plt>
   34c48:	b	34a94 <__assert_fail@plt+0x2043c>
   34c4c:	movw	r3, #47316	; 0xb8d4
   34c50:	movt	r3, #5
   34c54:	movw	r1, #20752	; 0x5110
   34c58:	mov	r2, r6
   34c5c:	ldr	r0, [r3]
   34c60:	movt	r1, #4
   34c64:	mov	r3, r6
   34c68:	bl	348ec <__assert_fail@plt+0x20294>
   34c6c:	mov	r4, r0
   34c70:	b	34b34 <__assert_fail@plt+0x204dc>
   34c74:	cmp	r6, #1
   34c78:	movweq	r1, #31512	; 0x7b18
   34c7c:	movteq	r1, #4
   34c80:	beq	34c10 <__assert_fail@plt+0x205b8>
   34c84:	movw	r1, #34732	; 0x87ac
   34c88:	movt	r1, #4
   34c8c:	b	34c10 <__assert_fail@plt+0x205b8>
   34c90:	mov	r2, #1
   34c94:	ldr	r0, [r3, #44]	; 0x2c
   34c98:	movw	r1, #20752	; 0x5110
   34c9c:	mov	r3, r2
   34ca0:	movt	r1, #4
   34ca4:	bl	34814 <__assert_fail@plt+0x201bc>
   34ca8:	mov	r4, r0
   34cac:	b	34bcc <__assert_fail@plt+0x20574>
   34cb0:	mov	r2, #1
   34cb4:	ldr	r0, [r3, #36]	; 0x24
   34cb8:	movw	r1, #18760	; 0x4948
   34cbc:	mov	r3, r2
   34cc0:	movt	r1, #4
   34cc4:	bl	34814 <__assert_fail@plt+0x201bc>
   34cc8:	mov	r4, r0
   34ccc:	b	34bcc <__assert_fail@plt+0x20574>
   34cd0:	mov	r1, #0
   34cd4:	mov	r0, r4
   34cd8:	mov	r3, r1
   34cdc:	mov	r2, #1
   34ce0:	bl	33ba0 <__assert_fail@plt+0x1f548>
   34ce4:	b	34c84 <__assert_fail@plt+0x2062c>
   34ce8:	movw	r3, #47312	; 0xb8d0
   34cec:	movt	r3, #5
   34cf0:	mov	r2, #1
   34cf4:	movw	r1, #18760	; 0x4948
   34cf8:	ldr	r0, [r3]
   34cfc:	movt	r1, #4
   34d00:	mov	r3, r2
   34d04:	bl	348ec <__assert_fail@plt+0x20294>
   34d08:	subs	r4, r0, #0
   34d0c:	movweq	r1, #18760	; 0x4948
   34d10:	movteq	r1, #4
   34d14:	beq	34b44 <__assert_fail@plt+0x204ec>
   34d18:	ldr	r2, [r4, #36]	; 0x24
   34d1c:	movw	r3, #8288	; 0x2060
   34d20:	movw	r1, #31524	; 0x7b24
   34d24:	movt	r1, #4
   34d28:	ldrb	r0, [r2, r3]
   34d2c:	orr	r0, r0, #2
   34d30:	strb	r0, [r2, r3]
   34d34:	ldr	r2, [r4, #36]	; 0x24
   34d38:	ldrb	r0, [r2, r3]
   34d3c:	bfi	r0, r6, #2, #2
   34d40:	strb	r0, [r2, r3]
   34d44:	b	34c10 <__assert_fail@plt+0x205b8>
   34d48:	andeq	fp, r5, ip, lsr #22
   34d4c:	push	{r4, r5, r6, r7, r8, lr}
   34d50:	movw	r5, #47296	; 0xb8c0
   34d54:	movt	r5, #5
   34d58:	sub	sp, sp, #32
   34d5c:	subs	r8, r0, #0
   34d60:	mov	r7, r1
   34d64:	ldr	r3, [r5]
   34d68:	mov	r4, r2
   34d6c:	str	r3, [sp, #28]
   34d70:	beq	34e78 <__assert_fail@plt+0x20820>
   34d74:	movw	r6, #47912	; 0xbb28
   34d78:	movt	r6, #5
   34d7c:	mov	r3, #0
   34d80:	str	r3, [sp, #20]
   34d84:	ldr	r1, [r6]
   34d88:	cmp	r1, r3
   34d8c:	beq	34dd4 <__assert_fail@plt+0x2077c>
   34d90:	mov	r0, r4
   34d94:	bl	32e90 <__assert_fail@plt+0x1e838>
   34d98:	mov	r0, r7
   34d9c:	add	r1, sp, #16
   34da0:	bl	33758 <__assert_fail@plt+0x1f100>
   34da4:	cmp	r0, #0
   34da8:	beq	34dec <__assert_fail@plt+0x20794>
   34dac:	mov	r0, r4
   34db0:	mov	r4, #0
   34db4:	bl	33e00 <__assert_fail@plt+0x1f7a8>
   34db8:	ldr	r2, [sp, #28]
   34dbc:	mov	r0, r4
   34dc0:	ldr	r3, [r5]
   34dc4:	cmp	r2, r3
   34dc8:	bne	34e9c <__assert_fail@plt+0x20844>
   34dcc:	add	sp, sp, #32
   34dd0:	pop	{r4, r5, r6, r7, r8, pc}
   34dd4:	ldr	r0, [r2, #36]	; 0x24
   34dd8:	mov	r2, r1
   34ddc:	add	r0, r0, #8192	; 0x2000
   34de0:	add	r0, r0, #16
   34de4:	bl	14364 <pth_mutex_acquire@plt>
   34de8:	b	34d90 <__assert_fail@plt+0x20738>
   34dec:	add	r0, sp, #20
   34df0:	add	r1, sp, #24
   34df4:	mov	r2, r8
   34df8:	ldr	r3, [sp, #16]
   34dfc:	bl	32ce8 <__assert_fail@plt+0x1e690>
   34e00:	cmp	r0, #0
   34e04:	bne	34dac <__assert_fail@plt+0x20754>
   34e08:	movw	r3, #34516	; 0x86d4
   34e0c:	movt	r3, #4
   34e10:	add	r0, r3, #48	; 0x30
   34e14:	ldr	r7, [sp, #20]
   34e18:	ldr	lr, [sp, #24]
   34e1c:	ldm	r0, {r0, r1, r2}
   34e20:	ldr	ip, [sp, #16]
   34e24:	ldr	r3, [r3, #44]	; 0x2c
   34e28:	stm	sp, {r0, r1, r2}
   34e2c:	mov	r1, r7
   34e30:	mov	r2, lr
   34e34:	str	ip, [sp, #12]
   34e38:	mov	r0, r4
   34e3c:	bl	32a8c <__assert_fail@plt+0x1e434>
   34e40:	cmp	r4, #0
   34e44:	beq	34e58 <__assert_fail@plt+0x20800>
   34e48:	mov	r1, r8
   34e4c:	add	r0, r4, #36	; 0x24
   34e50:	mov	r2, #1
   34e54:	bl	33cb8 <__assert_fail@plt+0x1f660>
   34e58:	ldr	r3, [r6]
   34e5c:	cmp	r3, #0
   34e60:	bne	34db8 <__assert_fail@plt+0x20760>
   34e64:	ldr	r0, [r4, #36]	; 0x24
   34e68:	add	r0, r0, #8192	; 0x2000
   34e6c:	add	r0, r0, #16
   34e70:	bl	14220 <pth_mutex_release@plt>
   34e74:	b	34db8 <__assert_fail@plt+0x20760>
   34e78:	bl	14148 <__errno_location@plt>
   34e7c:	mov	r3, #22
   34e80:	str	r3, [r0]
   34e84:	mov	r0, r4
   34e88:	bl	32e90 <__assert_fail@plt+0x1e838>
   34e8c:	mov	r0, r4
   34e90:	bl	33e00 <__assert_fail@plt+0x1f7a8>
   34e94:	mov	r4, r8
   34e98:	b	34db8 <__assert_fail@plt+0x20760>
   34e9c:	bl	13cec <__stack_chk_fail@plt>
   34ea0:	b	33e00 <__assert_fail@plt+0x1f7a8>
   34ea4:	push	{r4, r5, r6, r7, r8, r9, lr}
   34ea8:	movw	r4, #47296	; 0xb8c0
   34eac:	movt	r4, #5
   34eb0:	sub	sp, sp, #12
   34eb4:	subs	r5, r1, #0
   34eb8:	mov	r9, r2
   34ebc:	ldr	r3, [r4]
   34ec0:	mov	r6, r0
   34ec4:	str	r3, [sp, #4]
   34ec8:	beq	34f70 <__assert_fail@plt+0x20918>
   34ecc:	ldr	r1, [r0, #36]	; 0x24
   34ed0:	movw	r2, #8268	; 0x204c
   34ed4:	mov	r3, #0
   34ed8:	ldr	r8, [r1, r2]
   34edc:	str	r3, [r5]
   34ee0:	cmp	r8, r3
   34ee4:	beq	34f8c <__assert_fail@plt+0x20934>
   34ee8:	ldrb	r3, [r0, #32]
   34eec:	tst	r3, #1
   34ef0:	beq	34f40 <__assert_fail@plt+0x208e8>
   34ef4:	bl	32d5c <__assert_fail@plt+0x1e704>
   34ef8:	subs	r7, r0, #0
   34efc:	beq	34f34 <__assert_fail@plt+0x208dc>
   34f00:	ldr	r0, [r5]
   34f04:	cmp	r0, #0
   34f08:	beq	34f10 <__assert_fail@plt+0x208b8>
   34f0c:	bl	13b30 <free@plt>
   34f10:	mov	r3, #0
   34f14:	str	r3, [r5]
   34f18:	ldr	r2, [sp, #4]
   34f1c:	mov	r0, r7
   34f20:	ldr	r3, [r4]
   34f24:	cmp	r2, r3
   34f28:	bne	34fac <__assert_fail@plt+0x20954>
   34f2c:	add	sp, sp, #12
   34f30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   34f34:	ldrb	r3, [r6, #32]
   34f38:	bfi	r3, r7, #0, #1
   34f3c:	strb	r3, [r6, #32]
   34f40:	ldr	ip, [r6, #36]	; 0x24
   34f44:	movw	r0, #8228	; 0x2024
   34f48:	mov	r1, #1
   34f4c:	mov	r2, r5
   34f50:	mov	r3, sp
   34f54:	ldr	r0, [ip, r0]
   34f58:	blx	r8
   34f5c:	subs	r7, r0, #0
   34f60:	bne	34f00 <__assert_fail@plt+0x208a8>
   34f64:	cmp	r9, #0
   34f68:	ldrne	r3, [sp]
   34f6c:	strne	r3, [r9]
   34f70:	mov	r0, r6
   34f74:	bl	33e00 <__assert_fail@plt+0x1f7a8>
   34f78:	cmp	r5, #0
   34f7c:	cmpne	r0, #0
   34f80:	mov	r7, r0
   34f84:	beq	34f18 <__assert_fail@plt+0x208c0>
   34f88:	b	34f00 <__assert_fail@plt+0x208a8>
   34f8c:	bl	14148 <__errno_location@plt>
   34f90:	mov	r3, #95	; 0x5f
   34f94:	mvn	r7, #0
   34f98:	str	r3, [r0]
   34f9c:	ldr	r0, [r5]
   34fa0:	cmp	r0, #0
   34fa4:	bne	34f0c <__assert_fail@plt+0x208b4>
   34fa8:	b	34f10 <__assert_fail@plt+0x208b8>
   34fac:	bl	13cec <__stack_chk_fail@plt>
   34fb0:	ldr	r2, [r0, #36]	; 0x24
   34fb4:	movw	r3, #8280	; 0x2058
   34fb8:	ldr	r0, [r2, r3]
   34fbc:	bx	lr
   34fc0:	movw	r3, #47912	; 0xbb28
   34fc4:	movt	r3, #5
   34fc8:	ldr	r1, [r3]
   34fcc:	cmp	r1, #0
   34fd0:	bxne	lr
   34fd4:	ldr	r0, [r0, #36]	; 0x24
   34fd8:	mov	r2, r1
   34fdc:	add	r0, r0, #8192	; 0x2000
   34fe0:	add	r0, r0, #16
   34fe4:	b	14364 <pth_mutex_acquire@plt>
   34fe8:	push	{r3, lr}
   34fec:	movw	r3, #47912	; 0xbb28
   34ff0:	movt	r3, #5
   34ff4:	ldr	r2, [r3]
   34ff8:	cmp	r2, #0
   34ffc:	beq	35008 <__assert_fail@plt+0x209b0>
   35000:	mov	r0, #0
   35004:	pop	{r3, pc}
   35008:	ldr	r0, [r0, #36]	; 0x24
   3500c:	mov	r1, #1
   35010:	add	r0, r0, #8192	; 0x2000
   35014:	add	r0, r0, #16
   35018:	bl	14364 <pth_mutex_acquire@plt>
   3501c:	subs	r0, r0, #1
   35020:	mvnne	r0, #0
   35024:	pop	{r3, pc}
   35028:	movw	r3, #47912	; 0xbb28
   3502c:	movt	r3, #5
   35030:	ldr	r3, [r3]
   35034:	cmp	r3, #0
   35038:	bxne	lr
   3503c:	ldr	r0, [r0, #36]	; 0x24
   35040:	add	r0, r0, #8192	; 0x2000
   35044:	add	r0, r0, #16
   35048:	b	14220 <pth_mutex_release@plt>
   3504c:	push	{r3, r4, r5, lr}
   35050:	movw	r4, #47912	; 0xbb28
   35054:	movt	r4, #5
   35058:	mov	r5, r0
   3505c:	ldr	r1, [r4]
   35060:	cmp	r1, #0
   35064:	beq	3507c <__assert_fail@plt+0x20a24>
   35068:	ldr	r2, [r0, #36]	; 0x24
   3506c:	movw	r3, #8280	; 0x2058
   35070:	ldr	r4, [r2, r3]
   35074:	mov	r0, r4
   35078:	pop	{r3, r4, r5, pc}
   3507c:	ldr	r0, [r0, #36]	; 0x24
   35080:	mov	r2, r1
   35084:	add	r0, r0, #8192	; 0x2000
   35088:	add	r0, r0, #16
   3508c:	bl	14364 <pth_mutex_acquire@plt>
   35090:	ldr	r2, [r4]
   35094:	ldr	r0, [r5, #36]	; 0x24
   35098:	movw	r3, #8280	; 0x2058
   3509c:	cmp	r2, #0
   350a0:	ldr	r4, [r0, r3]
   350a4:	bne	35074 <__assert_fail@plt+0x20a1c>
   350a8:	add	r0, r0, #8192	; 0x2000
   350ac:	add	r0, r0, #16
   350b0:	bl	14220 <pth_mutex_release@plt>
   350b4:	mov	r0, r4
   350b8:	pop	{r3, r4, r5, pc}
   350bc:	ldr	r2, [r0, #36]	; 0x24
   350c0:	movw	r3, #8284	; 0x205c
   350c4:	ldrb	r0, [r2, r3]
   350c8:	ubfx	r0, r0, #1, #1
   350cc:	bx	lr
   350d0:	push	{r3, r4, r5, lr}
   350d4:	movw	r4, #47912	; 0xbb28
   350d8:	movt	r4, #5
   350dc:	mov	r5, r0
   350e0:	ldr	r1, [r4]
   350e4:	cmp	r1, #0
   350e8:	beq	35104 <__assert_fail@plt+0x20aac>
   350ec:	ldr	r2, [r0, #36]	; 0x24
   350f0:	movw	r3, #8284	; 0x205c
   350f4:	ldrb	r4, [r2, r3]
   350f8:	ubfx	r4, r4, #1, #1
   350fc:	mov	r0, r4
   35100:	pop	{r3, r4, r5, pc}
   35104:	ldr	r0, [r0, #36]	; 0x24
   35108:	mov	r2, r1
   3510c:	add	r0, r0, #8192	; 0x2000
   35110:	add	r0, r0, #16
   35114:	bl	14364 <pth_mutex_acquire@plt>
   35118:	ldr	r0, [r5, #36]	; 0x24
   3511c:	ldr	r2, [r4]
   35120:	movw	r3, #8284	; 0x205c
   35124:	ldrb	r4, [r0, r3]
   35128:	cmp	r2, #0
   3512c:	ubfx	r4, r4, #1, #1
   35130:	bne	350fc <__assert_fail@plt+0x20aa4>
   35134:	add	r0, r0, #8192	; 0x2000
   35138:	add	r0, r0, #16
   3513c:	bl	14220 <pth_mutex_release@plt>
   35140:	mov	r0, r4
   35144:	pop	{r3, r4, r5, pc}
   35148:	ldr	r2, [r0, #36]	; 0x24
   3514c:	movw	r3, #8284	; 0x205c
   35150:	ldrb	r0, [r2, r3]
   35154:	and	r0, r0, #1
   35158:	bx	lr
   3515c:	push	{r3, r4, r5, lr}
   35160:	movw	r4, #47912	; 0xbb28
   35164:	movt	r4, #5
   35168:	mov	r5, r0
   3516c:	ldr	r1, [r4]
   35170:	cmp	r1, #0
   35174:	beq	35190 <__assert_fail@plt+0x20b38>
   35178:	ldr	r2, [r0, #36]	; 0x24
   3517c:	movw	r3, #8284	; 0x205c
   35180:	ldrb	r4, [r2, r3]
   35184:	and	r4, r4, #1
   35188:	mov	r0, r4
   3518c:	pop	{r3, r4, r5, pc}
   35190:	ldr	r0, [r0, #36]	; 0x24
   35194:	mov	r2, r1
   35198:	add	r0, r0, #8192	; 0x2000
   3519c:	add	r0, r0, #16
   351a0:	bl	14364 <pth_mutex_acquire@plt>
   351a4:	ldr	r0, [r5, #36]	; 0x24
   351a8:	ldr	r2, [r4]
   351ac:	movw	r3, #8284	; 0x205c
   351b0:	ldrb	r4, [r0, r3]
   351b4:	cmp	r2, #0
   351b8:	and	r4, r4, #1
   351bc:	bne	35188 <__assert_fail@plt+0x20b30>
   351c0:	add	r0, r0, #8192	; 0x2000
   351c4:	add	r0, r0, #16
   351c8:	bl	14220 <pth_mutex_release@plt>
   351cc:	mov	r0, r4
   351d0:	pop	{r3, r4, r5, pc}
   351d4:	ldr	r2, [r0, #36]	; 0x24
   351d8:	movw	r3, #8284	; 0x205c
   351dc:	ldrb	r1, [r2, r3]
   351e0:	and	r1, r1, #254	; 0xfe
   351e4:	bfc	r1, #1, #1
   351e8:	strb	r1, [r2, r3]
   351ec:	bx	lr
   351f0:	push	{r4, r5, r6, lr}
   351f4:	movw	r4, #47912	; 0xbb28
   351f8:	movt	r4, #5
   351fc:	mov	r6, r0
   35200:	ldr	r5, [r4]
   35204:	cmp	r5, #0
   35208:	beq	35228 <__assert_fail@plt+0x20bd0>
   3520c:	ldr	r2, [r0, #36]	; 0x24
   35210:	movw	r3, #8284	; 0x205c
   35214:	ldrb	r1, [r2, r3]
   35218:	and	r1, r1, #254	; 0xfe
   3521c:	bfc	r1, #1, #1
   35220:	strb	r1, [r2, r3]
   35224:	pop	{r4, r5, r6, pc}
   35228:	ldr	r0, [r0, #36]	; 0x24
   3522c:	mov	r1, r5
   35230:	mov	r2, r5
   35234:	add	r0, r0, #8192	; 0x2000
   35238:	add	r0, r0, #16
   3523c:	bl	14364 <pth_mutex_acquire@plt>
   35240:	ldr	r0, [r6, #36]	; 0x24
   35244:	movw	r3, #8284	; 0x205c
   35248:	ldr	r1, [r4]
   3524c:	ldrb	r2, [r0, r3]
   35250:	cmp	r1, #0
   35254:	bfi	r2, r5, #0, #1
   35258:	bfi	r2, r5, #1, #1
   3525c:	strb	r2, [r0, r3]
   35260:	popne	{r4, r5, r6, pc}
   35264:	add	r0, r0, #8192	; 0x2000
   35268:	add	r0, r0, #16
   3526c:	pop	{r4, r5, r6, lr}
   35270:	b	14220 <pth_mutex_release@plt>
   35274:	push	{r4, r5, r6, lr}
   35278:	movw	r4, #47912	; 0xbb28
   3527c:	subs	r6, r0, #0
   35280:	movt	r4, #5
   35284:	ldr	r1, [r4]
   35288:	beq	352f0 <__assert_fail@plt+0x20c98>
   3528c:	cmp	r1, #0
   35290:	beq	352b8 <__assert_fail@plt+0x20c60>
   35294:	mov	r0, r6
   35298:	bl	33c90 <__assert_fail@plt+0x1f638>
   3529c:	ldr	r3, [r4]
   352a0:	cmp	r3, #0
   352a4:	beq	352d0 <__assert_fail@plt+0x20c78>
   352a8:	subs	r5, r0, #0
   352ac:	mvnne	r5, #0
   352b0:	mov	r0, r5
   352b4:	pop	{r4, r5, r6, pc}
   352b8:	ldr	r0, [r6, #36]	; 0x24
   352bc:	mov	r2, r1
   352c0:	add	r0, r0, #8192	; 0x2000
   352c4:	add	r0, r0, #16
   352c8:	bl	14364 <pth_mutex_acquire@plt>
   352cc:	b	35294 <__assert_fail@plt+0x20c3c>
   352d0:	ldr	r3, [r6, #36]	; 0x24
   352d4:	subs	r5, r0, #0
   352d8:	mvnne	r5, #0
   352dc:	add	r0, r3, #8192	; 0x2000
   352e0:	add	r0, r0, #16
   352e4:	bl	14220 <pth_mutex_release@plt>
   352e8:	mov	r0, r5
   352ec:	pop	{r4, r5, r6, pc}
   352f0:	cmp	r1, #0
   352f4:	beq	35340 <__assert_fail@plt+0x20ce8>
   352f8:	ldr	r5, [r4, #24]
   352fc:	cmp	r5, #0
   35300:	beq	35328 <__assert_fail@plt+0x20cd0>
   35304:	mov	r6, #0
   35308:	ldr	r0, [r5]
   3530c:	bl	33c90 <__assert_fail@plt+0x1f638>
   35310:	ldr	r5, [r5, #4]
   35314:	cmp	r5, #0
   35318:	orr	r6, r6, r0
   3531c:	bne	35308 <__assert_fail@plt+0x20cb0>
   35320:	subs	r5, r6, #0
   35324:	mvnne	r5, #0
   35328:	ldr	r3, [r4]
   3532c:	cmp	r3, #0
   35330:	bne	352b0 <__assert_fail@plt+0x20c58>
   35334:	ldr	r0, [pc, #20]	; 35350 <__assert_fail@plt+0x20cf8>
   35338:	bl	14220 <pth_mutex_release@plt>
   3533c:	b	352b0 <__assert_fail@plt+0x20c58>
   35340:	add	r0, r4, #4
   35344:	mov	r2, r1
   35348:	bl	14364 <pth_mutex_acquire@plt>
   3534c:	b	352f8 <__assert_fail@plt+0x20ca0>
   35350:	andeq	fp, r5, ip, lsr #22
   35354:	mov	r0, #0
   35358:	b	35274 <__assert_fail@plt+0x20c1c>
   3535c:	push	{r4, r5, r6, r7, lr}
   35360:	movw	r4, #47912	; 0xbb28
   35364:	movt	r4, #5
   35368:	mov	r6, r1
   3536c:	sub	sp, sp, #12
   35370:	mov	r5, r0
   35374:	ldr	r1, [r4]
   35378:	mov	r7, r2
   3537c:	cmp	r1, #0
   35380:	beq	353c4 <__assert_fail@plt+0x20d6c>
   35384:	asr	r3, r6, #31
   35388:	mov	r2, r6
   3538c:	str	r7, [sp]
   35390:	mov	r0, r5
   35394:	bl	33ec4 <__assert_fail@plt+0x1f86c>
   35398:	ldr	r3, [r4]
   3539c:	cmp	r3, #0
   353a0:	mov	r6, r0
   353a4:	bne	353b8 <__assert_fail@plt+0x20d60>
   353a8:	ldr	r0, [r5, #36]	; 0x24
   353ac:	add	r0, r0, #8192	; 0x2000
   353b0:	add	r0, r0, #16
   353b4:	bl	14220 <pth_mutex_release@plt>
   353b8:	mov	r0, r6
   353bc:	add	sp, sp, #12
   353c0:	pop	{r4, r5, r6, r7, pc}
   353c4:	ldr	r0, [r0, #36]	; 0x24
   353c8:	mov	r2, r1
   353cc:	add	r0, r0, #8192	; 0x2000
   353d0:	add	r0, r0, #16
   353d4:	bl	14364 <pth_mutex_acquire@plt>
   353d8:	b	35384 <__assert_fail@plt+0x20d2c>
   353dc:	push	{r4, r5, r6, r7, r8, lr}
   353e0:	movw	r6, #47912	; 0xbb28
   353e4:	movt	r6, #5
   353e8:	sub	sp, sp, #8
   353ec:	mov	r7, r0
   353f0:	mov	r4, r2
   353f4:	ldr	r1, [r6]
   353f8:	mov	r5, r3
   353fc:	ldr	r8, [sp, #32]
   35400:	cmp	r1, #0
   35404:	beq	35448 <__assert_fail@plt+0x20df0>
   35408:	mov	r2, r4
   3540c:	mov	r3, r5
   35410:	str	r8, [sp]
   35414:	mov	r0, r7
   35418:	bl	33ec4 <__assert_fail@plt+0x1f86c>
   3541c:	ldr	r3, [r6]
   35420:	cmp	r3, #0
   35424:	mov	r4, r0
   35428:	bne	3543c <__assert_fail@plt+0x20de4>
   3542c:	ldr	r0, [r7, #36]	; 0x24
   35430:	add	r0, r0, #8192	; 0x2000
   35434:	add	r0, r0, #16
   35438:	bl	14220 <pth_mutex_release@plt>
   3543c:	mov	r0, r4
   35440:	add	sp, sp, #8
   35444:	pop	{r4, r5, r6, r7, r8, pc}
   35448:	ldr	r0, [r0, #36]	; 0x24
   3544c:	mov	r2, r1
   35450:	add	r0, r0, #8192	; 0x2000
   35454:	add	r0, r0, #16
   35458:	bl	14364 <pth_mutex_acquire@plt>
   3545c:	b	35408 <__assert_fail@plt+0x20db0>
   35460:	push	{r3, r4, r5, lr}
   35464:	movw	r5, #47912	; 0xbb28
   35468:	movt	r5, #5
   3546c:	mov	r4, r0
   35470:	ldr	r1, [r5]
   35474:	cmp	r1, #0
   35478:	beq	354c8 <__assert_fail@plt+0x20e70>
   3547c:	ldr	ip, [r4, #36]	; 0x24
   35480:	movw	r3, #8248	; 0x2038
   35484:	ldr	r0, [r4, #12]
   35488:	ldr	r2, [r4, #28]
   3548c:	ldrd	r4, [ip, r3]
   35490:	mov	r3, #0
   35494:	adds	r4, r4, r0
   35498:	adc	r5, r5, #0
   3549c:	cmp	r4, r2
   354a0:	sbcs	r0, r5, r3
   354a4:	rsbge	r4, r2, r4
   354a8:	movlt	r4, #0
   354ac:	cmp	r1, #0
   354b0:	bne	354c0 <__assert_fail@plt+0x20e68>
   354b4:	add	r0, ip, #8192	; 0x2000
   354b8:	add	r0, r0, #16
   354bc:	bl	14220 <pth_mutex_release@plt>
   354c0:	mov	r0, r4
   354c4:	pop	{r3, r4, r5, pc}
   354c8:	ldr	r0, [r0, #36]	; 0x24
   354cc:	mov	r2, r1
   354d0:	add	r0, r0, #8192	; 0x2000
   354d4:	add	r0, r0, #16
   354d8:	bl	14364 <pth_mutex_acquire@plt>
   354dc:	ldr	r1, [r5]
   354e0:	b	3547c <__assert_fail@plt+0x20e24>
   354e4:	push	{r3, r4, r5, lr}
   354e8:	movw	r5, #47912	; 0xbb28
   354ec:	movt	r5, #5
   354f0:	mov	r4, r0
   354f4:	ldr	r1, [r5]
   354f8:	cmp	r1, #0
   354fc:	beq	3555c <__assert_fail@plt+0x20f04>
   35500:	ldr	r0, [r4, #36]	; 0x24
   35504:	movw	r3, #8248	; 0x2038
   35508:	ldr	ip, [r4, #12]
   3550c:	ldr	r2, [r4, #28]
   35510:	ldrd	r4, [r0, r3]
   35514:	mov	r3, #0
   35518:	adds	r4, r4, ip
   3551c:	adc	r5, r5, #0
   35520:	cmp	r4, r2
   35524:	sbcs	ip, r5, r3
   35528:	movlt	r4, #0
   3552c:	movlt	r5, #0
   35530:	blt	3553c <__assert_fail@plt+0x20ee4>
   35534:	subs	r4, r4, r2
   35538:	sbc	r5, r5, r3
   3553c:	cmp	r1, #0
   35540:	bne	35550 <__assert_fail@plt+0x20ef8>
   35544:	add	r0, r0, #8192	; 0x2000
   35548:	add	r0, r0, #16
   3554c:	bl	14220 <pth_mutex_release@plt>
   35550:	mov	r0, r4
   35554:	mov	r1, r5
   35558:	pop	{r3, r4, r5, pc}
   3555c:	ldr	r0, [r0, #36]	; 0x24
   35560:	mov	r2, r1
   35564:	add	r0, r0, #8192	; 0x2000
   35568:	add	r0, r0, #16
   3556c:	bl	14364 <pth_mutex_acquire@plt>
   35570:	ldr	r1, [r5]
   35574:	b	35500 <__assert_fail@plt+0x20ea8>
   35578:	push	{r4, r5, r6, lr}
   3557c:	movw	r4, #47912	; 0xbb28
   35580:	movt	r4, #5
   35584:	sub	sp, sp, #8
   35588:	mov	r5, r0
   3558c:	ldr	r1, [r4]
   35590:	cmp	r1, #0
   35594:	beq	355ec <__assert_fail@plt+0x20f94>
   35598:	mov	r6, #0
   3559c:	mov	r2, #0
   355a0:	mov	r3, #0
   355a4:	mov	r0, r5
   355a8:	str	r6, [sp]
   355ac:	bl	33ec4 <__assert_fail@plt+0x1f86c>
   355b0:	ldr	r0, [r5, #36]	; 0x24
   355b4:	ldr	r2, [r4]
   355b8:	movw	r3, #8284	; 0x205c
   355bc:	cmp	r2, r6
   355c0:	ldrb	r2, [r0, r3]
   355c4:	bfi	r2, r6, #0, #1
   355c8:	strb	r2, [r0, r3]
   355cc:	beq	355d8 <__assert_fail@plt+0x20f80>
   355d0:	add	sp, sp, #8
   355d4:	pop	{r4, r5, r6, pc}
   355d8:	add	r0, r0, #8192	; 0x2000
   355dc:	add	r0, r0, #16
   355e0:	add	sp, sp, #8
   355e4:	pop	{r4, r5, r6, lr}
   355e8:	b	14220 <pth_mutex_release@plt>
   355ec:	ldr	r0, [r0, #36]	; 0x24
   355f0:	mov	r2, r1
   355f4:	add	r0, r0, #8192	; 0x2000
   355f8:	add	r0, r0, #16
   355fc:	bl	14364 <pth_mutex_acquire@plt>
   35600:	b	35598 <__assert_fail@plt+0x20f40>
   35604:	push	{r4, lr}
   35608:	movw	r4, #47296	; 0xb8c0
   3560c:	movt	r4, #5
   35610:	sub	sp, sp, #16
   35614:	add	r1, sp, #7
   35618:	mov	r2, #1
   3561c:	ldr	ip, [r4]
   35620:	add	r3, sp, #8
   35624:	str	ip, [sp, #12]
   35628:	bl	334d8 <__assert_fail@plt+0x1ee80>
   3562c:	cmp	r0, #0
   35630:	bne	3565c <__assert_fail@plt+0x21004>
   35634:	ldr	r3, [sp, #8]
   35638:	cmp	r3, #0
   3563c:	beq	3565c <__assert_fail@plt+0x21004>
   35640:	ldrb	r0, [sp, #7]
   35644:	ldr	r2, [sp, #12]
   35648:	ldr	r3, [r4]
   3564c:	cmp	r2, r3
   35650:	bne	35664 <__assert_fail@plt+0x2100c>
   35654:	add	sp, sp, #16
   35658:	pop	{r4, pc}
   3565c:	mvn	r0, #0
   35660:	b	35644 <__assert_fail@plt+0x20fec>
   35664:	bl	13cec <__stack_chk_fail@plt>
   35668:	push	{r4, r5, lr}
   3566c:	movw	r4, #47296	; 0xb8c0
   35670:	movt	r4, #5
   35674:	sub	sp, sp, #12
   35678:	add	r3, sp, #8
   3567c:	mov	r5, r0
   35680:	ldr	ip, [r4]
   35684:	mov	r0, r1
   35688:	strb	r5, [r3, #-5]!
   3568c:	mov	r2, #1
   35690:	mov	r1, r3
   35694:	mov	r3, #0
   35698:	str	ip, [sp, #4]
   3569c:	bl	34010 <__assert_fail@plt+0x1f9b8>
   356a0:	ldr	r2, [sp, #4]
   356a4:	ldr	r3, [r4]
   356a8:	cmp	r0, #0
   356ac:	moveq	r0, r5
   356b0:	mvnne	r0, #0
   356b4:	cmp	r2, r3
   356b8:	bne	356c4 <__assert_fail@plt+0x2106c>
   356bc:	add	sp, sp, #12
   356c0:	pop	{r4, r5, pc}
   356c4:	bl	13cec <__stack_chk_fail@plt>
   356c8:	push	{r4, r5, r6, lr}
   356cc:	movw	r5, #47912	; 0xbb28
   356d0:	movt	r5, #5
   356d4:	mov	r4, r0
   356d8:	ldr	r1, [r5]
   356dc:	cmp	r1, #0
   356e0:	beq	35750 <__assert_fail@plt+0x210f8>
   356e4:	ldrb	r3, [r4, #32]
   356e8:	tst	r3, #1
   356ec:	bne	35700 <__assert_fail@plt+0x210a8>
   356f0:	ldr	r3, [r4, #12]
   356f4:	ldr	r2, [r4, #8]
   356f8:	cmp	r3, r2
   356fc:	bcc	35730 <__assert_fail@plt+0x210d8>
   35700:	mov	r0, r4
   35704:	bl	35604 <__assert_fail@plt+0x20fac>
   35708:	mov	r6, r0
   3570c:	ldr	r3, [r5]
   35710:	cmp	r3, #0
   35714:	bne	35728 <__assert_fail@plt+0x210d0>
   35718:	ldr	r0, [r4, #36]	; 0x24
   3571c:	add	r0, r0, #8192	; 0x2000
   35720:	add	r0, r0, #16
   35724:	bl	14220 <pth_mutex_release@plt>
   35728:	mov	r0, r6
   3572c:	pop	{r4, r5, r6, pc}
   35730:	ldr	r2, [r4, #28]
   35734:	cmp	r2, #0
   35738:	bne	35700 <__assert_fail@plt+0x210a8>
   3573c:	ldr	r2, [r4]
   35740:	add	r1, r3, #1
   35744:	str	r1, [r4, #12]
   35748:	ldrb	r6, [r2, r3]
   3574c:	b	3570c <__assert_fail@plt+0x210b4>
   35750:	ldr	r0, [r0, #36]	; 0x24
   35754:	mov	r2, r1
   35758:	add	r0, r0, #8192	; 0x2000
   3575c:	add	r0, r0, #16
   35760:	bl	14364 <pth_mutex_acquire@plt>
   35764:	b	356e4 <__assert_fail@plt+0x2108c>
   35768:	push	{r4, r5, r6, r7, lr}
   3576c:	movw	r7, #47912	; 0xbb28
   35770:	movt	r7, #5
   35774:	movw	r6, #47296	; 0xb8c0
   35778:	movt	r6, #5
   3577c:	sub	sp, sp, #12
   35780:	ldr	r3, [r7]
   35784:	mov	r5, r0
   35788:	ldr	r2, [r6]
   3578c:	mov	r4, r1
   35790:	cmp	r3, #0
   35794:	str	r2, [sp, #4]
   35798:	beq	35830 <__assert_fail@plt+0x211d8>
   3579c:	ldrb	r3, [r4, #32]
   357a0:	tst	r3, #1
   357a4:	beq	357b8 <__assert_fail@plt+0x21160>
   357a8:	ldr	r3, [r4, #12]
   357ac:	ldr	r2, [r4, #4]
   357b0:	cmp	r3, r2
   357b4:	bcc	35810 <__assert_fail@plt+0x211b8>
   357b8:	add	r1, sp, #8
   357bc:	mov	r0, r4
   357c0:	mov	r2, #1
   357c4:	mov	r3, #0
   357c8:	strb	r5, [r1, #-5]!
   357cc:	bl	34010 <__assert_fail@plt+0x1f9b8>
   357d0:	cmp	r0, #0
   357d4:	mvnne	r5, #0
   357d8:	ldr	r3, [r7]
   357dc:	cmp	r3, #0
   357e0:	bne	357f4 <__assert_fail@plt+0x2119c>
   357e4:	ldr	r0, [r4, #36]	; 0x24
   357e8:	add	r0, r0, #8192	; 0x2000
   357ec:	add	r0, r0, #16
   357f0:	bl	14220 <pth_mutex_release@plt>
   357f4:	ldr	r2, [sp, #4]
   357f8:	mov	r0, r5
   357fc:	ldr	r3, [r6]
   35800:	cmp	r2, r3
   35804:	bne	3584c <__assert_fail@plt+0x211f4>
   35808:	add	sp, sp, #12
   3580c:	pop	{r4, r5, r6, r7, pc}
   35810:	cmp	r5, #10
   35814:	beq	357b8 <__assert_fail@plt+0x21160>
   35818:	ldr	r2, [r4]
   3581c:	add	r1, r3, #1
   35820:	str	r1, [r4, #12]
   35824:	strb	r5, [r2, r3]
   35828:	uxtb	r5, r5
   3582c:	b	357d8 <__assert_fail@plt+0x21180>
   35830:	ldr	r0, [r1, #36]	; 0x24
   35834:	mov	r2, r3
   35838:	mov	r1, r3
   3583c:	add	r0, r0, #8192	; 0x2000
   35840:	add	r0, r0, #16
   35844:	bl	14364 <pth_mutex_acquire@plt>
   35848:	b	3579c <__assert_fail@plt+0x21144>
   3584c:	bl	13cec <__stack_chk_fail@plt>
   35850:	push	{r4, r5, r6, lr}
   35854:	movw	r5, #47912	; 0xbb28
   35858:	movt	r5, #5
   3585c:	mov	r4, r1
   35860:	mov	r6, r0
   35864:	ldr	r1, [r5]
   35868:	cmp	r1, #0
   3586c:	beq	358e4 <__assert_fail@plt+0x2128c>
   35870:	ldr	r3, [r4, #28]
   35874:	ldr	r2, [r4, #24]
   35878:	cmp	r2, r3
   3587c:	bne	3589c <__assert_fail@plt+0x21244>
   35880:	cmp	r1, #0
   35884:	mov	r5, #0
   35888:	beq	358d0 <__assert_fail@plt+0x21278>
   3588c:	cmp	r5, #0
   35890:	movne	r0, r6
   35894:	mvneq	r0, #0
   35898:	pop	{r4, r5, r6, pc}
   3589c:	ldr	r0, [r4, #20]
   358a0:	movw	r2, #8284	; 0x205c
   358a4:	cmp	r1, #0
   358a8:	mov	r5, #1
   358ac:	strb	r6, [r0, r3]
   358b0:	ldr	r3, [r4, #36]	; 0x24
   358b4:	ldr	ip, [r4, #28]
   358b8:	ldrb	r0, [r3, r2]
   358bc:	add	ip, ip, r5
   358c0:	str	ip, [r4, #28]
   358c4:	bfc	r0, #1, #1
   358c8:	strb	r0, [r3, r2]
   358cc:	bne	3588c <__assert_fail@plt+0x21234>
   358d0:	ldr	r0, [r4, #36]	; 0x24
   358d4:	add	r0, r0, #8192	; 0x2000
   358d8:	add	r0, r0, #16
   358dc:	bl	14220 <pth_mutex_release@plt>
   358e0:	b	3588c <__assert_fail@plt+0x21234>
   358e4:	ldr	r0, [r4, #36]	; 0x24
   358e8:	mov	r2, r1
   358ec:	add	r0, r0, #8192	; 0x2000
   358f0:	add	r0, r0, #16
   358f4:	bl	14364 <pth_mutex_acquire@plt>
   358f8:	ldr	r1, [r5]
   358fc:	b	35870 <__assert_fail@plt+0x21218>
   35900:	push	{r4, r5, r6, r7, lr}
   35904:	subs	r6, r2, #0
   35908:	sub	sp, sp, #12
   3590c:	mov	r5, r0
   35910:	mov	r7, r1
   35914:	beq	3594c <__assert_fail@plt+0x212f4>
   35918:	movw	r4, #47912	; 0xbb28
   3591c:	movt	r4, #5
   35920:	ldr	r1, [r4]
   35924:	cmp	r1, #0
   35928:	beq	35974 <__assert_fail@plt+0x2131c>
   3592c:	mov	r2, r6
   35930:	mov	r1, r7
   35934:	mov	r0, r5
   35938:	bl	334d8 <__assert_fail@plt+0x1ee80>
   3593c:	ldr	r3, [r4]
   35940:	cmp	r3, #0
   35944:	mov	r6, r0
   35948:	beq	35958 <__assert_fail@plt+0x21300>
   3594c:	mov	r0, r6
   35950:	add	sp, sp, #12
   35954:	pop	{r4, r5, r6, r7, pc}
   35958:	ldr	r0, [r5, #36]	; 0x24
   3595c:	add	r0, r0, #8192	; 0x2000
   35960:	add	r0, r0, #16
   35964:	bl	14220 <pth_mutex_release@plt>
   35968:	mov	r0, r6
   3596c:	add	sp, sp, #12
   35970:	pop	{r4, r5, r6, r7, pc}
   35974:	ldr	r0, [r0, #36]	; 0x24
   35978:	mov	r2, r1
   3597c:	str	r3, [sp, #4]
   35980:	add	r0, r0, #8192	; 0x2000
   35984:	add	r0, r0, #16
   35988:	bl	14364 <pth_mutex_acquire@plt>
   3598c:	ldr	r3, [sp, #4]
   35990:	b	3592c <__assert_fail@plt+0x212d4>
   35994:	subs	ip, r2, #0
   35998:	beq	359a0 <__assert_fail@plt+0x21348>
   3599c:	b	3422c <__assert_fail@plt+0x1fbd4>
   359a0:	mov	r0, ip
   359a4:	bx	lr
   359a8:	push	{r4, r5, r6, r7, r8, r9, lr}
   359ac:	movw	r4, #47296	; 0xb8c0
   359b0:	mul	r6, r2, r1
   359b4:	movt	r4, #5
   359b8:	sub	sp, sp, #12
   359bc:	mov	r9, r0
   359c0:	ldr	r2, [r4]
   359c4:	mov	r7, r1
   359c8:	cmp	r6, #0
   359cc:	mov	r8, r3
   359d0:	str	r2, [sp, #4]
   359d4:	moveq	r0, r6
   359d8:	beq	35a1c <__assert_fail@plt+0x213c4>
   359dc:	movw	r5, #47912	; 0xbb28
   359e0:	movt	r5, #5
   359e4:	ldr	r1, [r5]
   359e8:	cmp	r1, #0
   359ec:	beq	35a48 <__assert_fail@plt+0x213f0>
   359f0:	mov	r3, sp
   359f4:	mov	r1, r9
   359f8:	mov	r2, r6
   359fc:	mov	r0, r8
   35a00:	bl	334d8 <__assert_fail@plt+0x1ee80>
   35a04:	ldr	r3, [r5]
   35a08:	cmp	r3, #0
   35a0c:	beq	35a34 <__assert_fail@plt+0x213dc>
   35a10:	mov	r1, r7
   35a14:	ldr	r0, [sp]
   35a18:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   35a1c:	ldr	r2, [sp, #4]
   35a20:	ldr	r3, [r4]
   35a24:	cmp	r2, r3
   35a28:	bne	35a60 <__assert_fail@plt+0x21408>
   35a2c:	add	sp, sp, #12
   35a30:	pop	{r4, r5, r6, r7, r8, r9, pc}
   35a34:	ldr	r0, [r8, #36]	; 0x24
   35a38:	add	r0, r0, #8192	; 0x2000
   35a3c:	add	r0, r0, #16
   35a40:	bl	14220 <pth_mutex_release@plt>
   35a44:	b	35a10 <__assert_fail@plt+0x213b8>
   35a48:	ldr	r0, [r3, #36]	; 0x24
   35a4c:	mov	r2, r1
   35a50:	add	r0, r0, #8192	; 0x2000
   35a54:	add	r0, r0, #16
   35a58:	bl	14364 <pth_mutex_acquire@plt>
   35a5c:	b	359f0 <__assert_fail@plt+0x21398>
   35a60:	bl	13cec <__stack_chk_fail@plt>
   35a64:	push	{r4, r5, r6, r7, r8, r9, lr}
   35a68:	movw	r4, #47296	; 0xb8c0
   35a6c:	mul	r6, r2, r1
   35a70:	movt	r4, #5
   35a74:	sub	sp, sp, #12
   35a78:	mov	r9, r0
   35a7c:	ldr	r2, [r4]
   35a80:	mov	r7, r1
   35a84:	cmp	r6, #0
   35a88:	mov	r8, r3
   35a8c:	str	r2, [sp, #4]
   35a90:	moveq	r0, r6
   35a94:	beq	35ad8 <__assert_fail@plt+0x21480>
   35a98:	movw	r5, #47912	; 0xbb28
   35a9c:	movt	r5, #5
   35aa0:	ldr	r1, [r5]
   35aa4:	cmp	r1, #0
   35aa8:	beq	35b04 <__assert_fail@plt+0x214ac>
   35aac:	mov	r3, sp
   35ab0:	mov	r1, r9
   35ab4:	mov	r2, r6
   35ab8:	mov	r0, r8
   35abc:	bl	34010 <__assert_fail@plt+0x1f9b8>
   35ac0:	ldr	r3, [r5]
   35ac4:	cmp	r3, #0
   35ac8:	beq	35af0 <__assert_fail@plt+0x21498>
   35acc:	mov	r1, r7
   35ad0:	ldr	r0, [sp]
   35ad4:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   35ad8:	ldr	r2, [sp, #4]
   35adc:	ldr	r3, [r4]
   35ae0:	cmp	r2, r3
   35ae4:	bne	35b1c <__assert_fail@plt+0x214c4>
   35ae8:	add	sp, sp, #12
   35aec:	pop	{r4, r5, r6, r7, r8, r9, pc}
   35af0:	ldr	r0, [r8, #36]	; 0x24
   35af4:	add	r0, r0, #8192	; 0x2000
   35af8:	add	r0, r0, #16
   35afc:	bl	14220 <pth_mutex_release@plt>
   35b00:	b	35acc <__assert_fail@plt+0x21474>
   35b04:	ldr	r0, [r3, #36]	; 0x24
   35b08:	mov	r2, r1
   35b0c:	add	r0, r0, #8192	; 0x2000
   35b10:	add	r0, r0, #16
   35b14:	bl	14364 <pth_mutex_acquire@plt>
   35b18:	b	35aac <__assert_fail@plt+0x21454>
   35b1c:	bl	13cec <__stack_chk_fail@plt>
   35b20:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   35b24:	subs	r6, r1, #0
   35b28:	mov	r9, r0
   35b2c:	mov	r4, r2
   35b30:	beq	35c38 <__assert_fail@plt+0x215e0>
   35b34:	movw	r8, #47912	; 0xbb28
   35b38:	movt	r8, #5
   35b3c:	ldr	r1, [r8]
   35b40:	cmp	r1, #0
   35b44:	beq	35c20 <__assert_fail@plt+0x215c8>
   35b48:	cmp	r6, #1
   35b4c:	mov	r7, r9
   35b50:	bgt	35b8c <__assert_fail@plt+0x21534>
   35b54:	b	35c40 <__assert_fail@plt+0x215e8>
   35b58:	ldr	r2, [r4, #28]
   35b5c:	add	r1, r3, #1
   35b60:	cmp	r2, #0
   35b64:	bne	35bac <__assert_fail@plt+0x21554>
   35b68:	ldr	r2, [r4]
   35b6c:	str	r1, [r4, #12]
   35b70:	ldrb	r5, [r2, r3]
   35b74:	cmp	r5, #10
   35b78:	beq	35be8 <__assert_fail@plt+0x21590>
   35b7c:	sub	r6, r6, #1
   35b80:	strb	r5, [r7], #1
   35b84:	cmp	r6, #1
   35b88:	beq	35be8 <__assert_fail@plt+0x21590>
   35b8c:	ldrb	r3, [r4, #32]
   35b90:	mov	r0, r4
   35b94:	tst	r3, #1
   35b98:	bne	35bac <__assert_fail@plt+0x21554>
   35b9c:	ldr	r3, [r4, #12]
   35ba0:	ldr	r2, [r4, #8]
   35ba4:	cmp	r3, r2
   35ba8:	bcc	35b58 <__assert_fail@plt+0x21500>
   35bac:	bl	35604 <__assert_fail@plt+0x20fac>
   35bb0:	cmn	r0, #1
   35bb4:	mov	r5, r0
   35bb8:	bne	35b74 <__assert_fail@plt+0x2151c>
   35bbc:	subs	r3, r9, r7
   35bc0:	rsbs	sl, r3, #0
   35bc4:	adcs	sl, sl, r3
   35bc8:	ldr	r3, [r8]
   35bcc:	cmp	r3, #0
   35bd0:	bne	35bf8 <__assert_fail@plt+0x215a0>
   35bd4:	ldr	r0, [r4, #36]	; 0x24
   35bd8:	add	r0, r0, #8192	; 0x2000
   35bdc:	add	r0, r0, #16
   35be0:	bl	14220 <pth_mutex_release@plt>
   35be4:	b	35bf8 <__assert_fail@plt+0x215a0>
   35be8:	mov	sl, #0
   35bec:	ldr	r3, [r8]
   35bf0:	cmp	r3, #0
   35bf4:	beq	35bd4 <__assert_fail@plt+0x2157c>
   35bf8:	cmp	sl, #0
   35bfc:	bne	35c38 <__assert_fail@plt+0x215e0>
   35c00:	cmn	r5, #1
   35c04:	cmpne	r6, #1
   35c08:	strbgt	r5, [r7]
   35c0c:	addgt	r7, r7, #1
   35c10:	mov	r3, #0
   35c14:	mov	r0, r9
   35c18:	strb	r3, [r7]
   35c1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35c20:	ldr	r0, [r2, #36]	; 0x24
   35c24:	mov	r2, r1
   35c28:	add	r0, r0, #8192	; 0x2000
   35c2c:	add	r0, r0, #16
   35c30:	bl	14364 <pth_mutex_acquire@plt>
   35c34:	b	35b48 <__assert_fail@plt+0x214f0>
   35c38:	mov	r0, #0
   35c3c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   35c40:	mov	sl, #1
   35c44:	mvn	r5, #0
   35c48:	b	35bec <__assert_fail@plt+0x21594>
   35c4c:	push	{r3, r4, r5, lr}
   35c50:	mov	r5, r1
   35c54:	mov	r4, r0
   35c58:	bl	14094 <strlen@plt>
   35c5c:	mov	r1, r4
   35c60:	mov	r3, #0
   35c64:	mov	r2, r0
   35c68:	mov	r0, r5
   35c6c:	bl	34010 <__assert_fail@plt+0x1f9b8>
   35c70:	subs	r0, r0, #0
   35c74:	mvnne	r0, #0
   35c78:	pop	{r3, r4, r5, pc}
   35c7c:	push	{r3, r4, r5, r6, r7, lr}
   35c80:	mov	r5, r1
   35c84:	mov	r6, r0
   35c88:	bl	14094 <strlen@plt>
   35c8c:	movw	r4, #47912	; 0xbb28
   35c90:	movt	r4, #5
   35c94:	ldr	r1, [r4]
   35c98:	cmp	r1, #0
   35c9c:	mov	r7, r0
   35ca0:	beq	35cd4 <__assert_fail@plt+0x2167c>
   35ca4:	mov	r1, r6
   35ca8:	mov	r3, #0
   35cac:	mov	r2, r7
   35cb0:	mov	r0, r5
   35cb4:	bl	34010 <__assert_fail@plt+0x1f9b8>
   35cb8:	ldr	r3, [r4]
   35cbc:	cmp	r3, #0
   35cc0:	mov	r6, r0
   35cc4:	beq	35cec <__assert_fail@plt+0x21694>
   35cc8:	subs	r0, r6, #0
   35ccc:	mvnne	r0, #0
   35cd0:	pop	{r3, r4, r5, r6, r7, pc}
   35cd4:	ldr	r0, [r5, #36]	; 0x24
   35cd8:	mov	r2, r1
   35cdc:	add	r0, r0, #8192	; 0x2000
   35ce0:	add	r0, r0, #16
   35ce4:	bl	14364 <pth_mutex_acquire@plt>
   35ce8:	b	35ca4 <__assert_fail@plt+0x2164c>
   35cec:	ldr	r0, [r5, #36]	; 0x24
   35cf0:	add	r0, r0, #8192	; 0x2000
   35cf4:	add	r0, r0, #16
   35cf8:	bl	14220 <pth_mutex_release@plt>
   35cfc:	b	35cc8 <__assert_fail@plt+0x21670>
   35d00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   35d04:	movw	r9, #47912	; 0xbb28
   35d08:	movt	r9, #5
   35d0c:	sub	sp, sp, #60	; 0x3c
   35d10:	movw	r8, #47296	; 0xb8c0
   35d14:	movt	r8, #5
   35d18:	ldr	r3, [r9]
   35d1c:	mov	r5, r2
   35d20:	str	r0, [sp, #44]	; 0x2c
   35d24:	ldr	r0, [r8]
   35d28:	cmp	r3, #0
   35d2c:	str	r1, [sp, #40]	; 0x28
   35d30:	str	r0, [sp, #52]	; 0x34
   35d34:	beq	35fa4 <__assert_fail@plt+0x2194c>
   35d38:	mov	r0, #40	; 0x28
   35d3c:	mov	r6, #0
   35d40:	str	r6, [sp, #48]	; 0x30
   35d44:	bl	13f68 <malloc@plt>
   35d48:	subs	r4, r0, #0
   35d4c:	beq	36074 <__assert_fail@plt+0x21a1c>
   35d50:	movw	r3, #34516	; 0x86d4
   35d54:	movt	r3, #4
   35d58:	add	r2, r3, #64	; 0x40
   35d5c:	ldrb	r7, [r4, #28]
   35d60:	str	r6, [r4, #4]
   35d64:	movw	lr, #15736	; 0x3d78
   35d68:	ldm	r2, {r0, r1, r2}
   35d6c:	orr	r7, r7, #1
   35d70:	str	r6, [r4, #8]
   35d74:	movt	lr, #3
   35d78:	strb	r7, [r4, #28]
   35d7c:	movw	ip, #11364	; 0x2c64
   35d80:	str	lr, [r4, #32]
   35d84:	movt	ip, #3
   35d88:	str	r6, [r4, #12]
   35d8c:	mov	r7, #2
   35d90:	str	r6, [r4, #16]
   35d94:	mov	lr, #8192	; 0x2000
   35d98:	str	r6, [r4, #20]
   35d9c:	str	ip, [r4, #36]	; 0x24
   35da0:	str	r7, [r4]
   35da4:	str	lr, [r4, #24]
   35da8:	ldr	r3, [r3, #60]	; 0x3c
   35dac:	stm	sp, {r0, r1, r2}
   35db0:	add	r0, sp, #48	; 0x30
   35db4:	str	r7, [sp, #12]
   35db8:	mov	r1, r4
   35dbc:	str	r6, [sp, #16]
   35dc0:	mvn	r2, #0
   35dc4:	bl	32f68 <__assert_fail@plt+0x1e910>
   35dc8:	subs	sl, r0, #0
   35dcc:	bne	35e78 <__assert_fail@plt+0x21820>
   35dd0:	mov	fp, sl
   35dd4:	str	sl, [sp, #36]	; 0x24
   35dd8:	ldrb	r3, [r5, #32]
   35ddc:	tst	r3, #1
   35de0:	bne	35f44 <__assert_fail@plt+0x218ec>
   35de4:	ldr	sl, [r5, #8]
   35de8:	ldr	r7, [r5, #12]
   35dec:	cmp	r7, sl
   35df0:	strne	sl, [sp, #32]
   35df4:	beq	36054 <__assert_fail@plt+0x219fc>
   35df8:	ldr	r1, [sp, #32]
   35dfc:	ldr	r3, [r5]
   35e00:	subs	r2, r1, r7
   35e04:	add	sl, r3, r7
   35e08:	beq	36098 <__assert_fail@plt+0x21a40>
   35e0c:	sub	ip, fp, #1
   35e10:	mov	r0, sl
   35e14:	cmp	r2, ip
   35e18:	movcc	r6, r2
   35e1c:	movcs	r6, ip
   35e20:	mov	r1, #10
   35e24:	mov	r2, r6
   35e28:	bl	14280 <memchr@plt>
   35e2c:	subs	r2, r0, #0
   35e30:	beq	35f64 <__assert_fail@plt+0x2190c>
   35e34:	rsb	fp, sl, r2
   35e38:	ldr	r6, [sp, #36]	; 0x24
   35e3c:	adds	fp, fp, #1
   35e40:	ldr	r2, [sp, #48]	; 0x30
   35e44:	beq	36110 <__assert_fail@plt+0x21ab8>
   35e48:	mov	r0, r2
   35e4c:	mov	r1, sl
   35e50:	mov	r2, fp
   35e54:	mov	r3, #0
   35e58:	bl	3422c <__assert_fail@plt+0x1fbd4>
   35e5c:	subs	sl, r0, #0
   35e60:	beq	36100 <__assert_fail@plt+0x21aa8>
   35e64:	mov	r6, #0
   35e68:	mov	r7, r6
   35e6c:	mov	fp, r6
   35e70:	b	35e80 <__assert_fail@plt+0x21828>
   35e74:	mov	r6, r7
   35e78:	mov	r7, r6
   35e7c:	mov	fp, r6
   35e80:	ldr	r0, [sp, #48]	; 0x30
   35e84:	cmp	r0, #0
   35e88:	beq	35fd8 <__assert_fail@plt+0x21980>
   35e8c:	bl	33e00 <__assert_fail@plt+0x1f7a8>
   35e90:	cmp	sl, #0
   35e94:	beq	35eb4 <__assert_fail@plt+0x2185c>
   35e98:	cmp	r7, #0
   35e9c:	beq	36084 <__assert_fail@plt+0x21a2c>
   35ea0:	ldr	r1, [r5, #36]	; 0x24
   35ea4:	movw	r2, #8284	; 0x205c
   35ea8:	ldrb	r0, [r1, r2]
   35eac:	orr	r0, r0, #1
   35eb0:	strb	r0, [r1, r2]
   35eb4:	ldr	r2, [r9]
   35eb8:	cmp	r2, #0
   35ebc:	beq	35f90 <__assert_fail@plt+0x21938>
   35ec0:	cmp	sl, #0
   35ec4:	movne	r0, sl
   35ec8:	bne	35f2c <__assert_fail@plt+0x218d4>
   35ecc:	ldr	r1, [sp, #40]	; 0x28
   35ed0:	ldr	r0, [r1]
   35ed4:	cmp	r0, #0
   35ed8:	beq	35fc0 <__assert_fail@plt+0x21968>
   35edc:	add	r4, r6, #1
   35ee0:	cmp	r0, r4
   35ee4:	bcc	36024 <__assert_fail@plt+0x219cc>
   35ee8:	ldr	r1, [sp, #44]	; 0x2c
   35eec:	ldr	r0, [r1]
   35ef0:	mov	r2, r4
   35ef4:	mov	r1, r7
   35ef8:	bl	13ba8 <memcpy@plt>
   35efc:	ldr	r3, [sp, #40]	; 0x28
   35f00:	ldr	r2, [r3]
   35f04:	cmp	r2, r6
   35f08:	ldrne	r3, [sp, #40]	; 0x28
   35f0c:	strne	r6, [r3]
   35f10:	cmp	r7, #0
   35f14:	beq	35f20 <__assert_fail@plt+0x218c8>
   35f18:	mov	r0, r7
   35f1c:	bl	13b30 <free@plt>
   35f20:	cmp	sl, #0
   35f24:	mvnne	r0, #0
   35f28:	beq	35fd0 <__assert_fail@plt+0x21978>
   35f2c:	ldr	r2, [sp, #52]	; 0x34
   35f30:	ldr	r3, [r8]
   35f34:	cmp	r2, r3
   35f38:	bne	36140 <__assert_fail@plt+0x21ae8>
   35f3c:	add	sp, sp, #60	; 0x3c
   35f40:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   35f44:	mov	r0, r5
   35f48:	bl	32d5c <__assert_fail@plt+0x1e704>
   35f4c:	cmp	r0, #0
   35f50:	bne	35f88 <__assert_fail@plt+0x21930>
   35f54:	ldrb	r3, [r5, #32]
   35f58:	bfi	r3, r0, #0, #1
   35f5c:	strb	r3, [r5, #32]
   35f60:	b	35de4 <__assert_fail@plt+0x2178c>
   35f64:	cmp	r6, #0
   35f68:	ldr	r0, [sp, #48]	; 0x30
   35f6c:	beq	35ff0 <__assert_fail@plt+0x21998>
   35f70:	mov	r3, r2
   35f74:	mov	r1, sl
   35f78:	mov	r2, r6
   35f7c:	bl	3422c <__assert_fail@plt+0x1fbd4>
   35f80:	cmp	r0, #0
   35f84:	beq	35fe4 <__assert_fail@plt+0x2198c>
   35f88:	mov	sl, r0
   35f8c:	b	35e64 <__assert_fail@plt+0x2180c>
   35f90:	ldr	r0, [r5, #36]	; 0x24
   35f94:	add	r0, r0, #8192	; 0x2000
   35f98:	add	r0, r0, #16
   35f9c:	bl	14220 <pth_mutex_release@plt>
   35fa0:	b	35ec0 <__assert_fail@plt+0x21868>
   35fa4:	ldr	r0, [r2, #36]	; 0x24
   35fa8:	mov	r1, r3
   35fac:	mov	r2, r3
   35fb0:	add	r0, r0, #8192	; 0x2000
   35fb4:	add	r0, r0, #16
   35fb8:	bl	14364 <pth_mutex_acquire@plt>
   35fbc:	b	35d38 <__assert_fail@plt+0x216e0>
   35fc0:	ldr	r1, [sp, #44]	; 0x2c
   35fc4:	ldr	r3, [sp, #40]	; 0x28
   35fc8:	str	r7, [r1]
   35fcc:	str	r6, [r3]
   35fd0:	mov	r0, r6
   35fd4:	b	35f2c <__assert_fail@plt+0x218d4>
   35fd8:	mov	r0, r4
   35fdc:	bl	32cc0 <__assert_fail@plt+0x1e668>
   35fe0:	b	35e90 <__assert_fail@plt+0x21838>
   35fe4:	ldr	r3, [r5, #8]
   35fe8:	ldr	r7, [r5, #12]
   35fec:	str	r3, [sp, #32]
   35ff0:	ldr	r3, [sp, #32]
   35ff4:	add	r7, r7, r6
   35ff8:	ldr	r1, [sp, #36]	; 0x24
   35ffc:	rsb	fp, r6, fp
   36000:	cmp	r7, r3
   36004:	strls	r7, [r5, #12]
   36008:	add	r1, r1, r6
   3600c:	str	r1, [sp, #36]	; 0x24
   36010:	bls	35dd8 <__assert_fail@plt+0x21780>
   36014:	bl	14148 <__errno_location@plt>
   36018:	mov	r3, #22
   3601c:	str	r3, [r0]
   36020:	b	35dd8 <__assert_fail@plt+0x21780>
   36024:	ldr	r3, [sp, #44]	; 0x2c
   36028:	mov	r1, r4
   3602c:	ldr	r0, [r3]
   36030:	bl	33d78 <__assert_fail@plt+0x1f720>
   36034:	cmp	r0, #0
   36038:	mvneq	sl, #0
   3603c:	beq	35f10 <__assert_fail@plt+0x218b8>
   36040:	ldr	r1, [sp, #44]	; 0x2c
   36044:	ldr	r2, [r1]
   36048:	cmp	r0, r2
   3604c:	strne	r0, [r1]
   36050:	b	35ef0 <__assert_fail@plt+0x21898>
   36054:	mov	r0, r5
   36058:	bl	32bbc <__assert_fail@plt+0x1e564>
   3605c:	cmp	r0, #0
   36060:	bne	35f88 <__assert_fail@plt+0x21930>
   36064:	ldr	r3, [r5, #8]
   36068:	ldr	r7, [r5, #12]
   3606c:	str	r3, [sp, #32]
   36070:	b	35df8 <__assert_fail@plt+0x217a0>
   36074:	mov	r7, r4
   36078:	mvn	sl, #0
   3607c:	mov	r6, r4
   36080:	b	35ea0 <__assert_fail@plt+0x21848>
   36084:	cmp	fp, #0
   36088:	beq	35ea0 <__assert_fail@plt+0x21848>
   3608c:	mov	r0, fp
   36090:	bl	13b30 <free@plt>
   36094:	b	35ea0 <__assert_fail@plt+0x21848>
   36098:	ldr	r6, [sp, #36]	; 0x24
   3609c:	ldr	r2, [sp, #48]	; 0x30
   360a0:	mov	r0, r2
   360a4:	mov	r7, #0
   360a8:	mov	r2, #0
   360ac:	mov	r3, #0
   360b0:	str	r7, [sp]
   360b4:	bl	33ec4 <__assert_fail@plt+0x1f86c>
   360b8:	subs	sl, r0, #0
   360bc:	bne	35e74 <__assert_fail@plt+0x2181c>
   360c0:	adds	r0, r6, #1
   360c4:	addeq	r0, r6, #2
   360c8:	bl	13f68 <malloc@plt>
   360cc:	subs	fp, r0, #0
   360d0:	beq	36144 <__assert_fail@plt+0x21aec>
   360d4:	ldr	r0, [sp, #48]	; 0x30
   360d8:	mov	r1, fp
   360dc:	mov	r2, r6
   360e0:	mov	r3, #0
   360e4:	bl	35900 <__assert_fail@plt+0x212a8>
   360e8:	subs	sl, r0, #0
   360ec:	strbeq	sl, [fp, r6]
   360f0:	moveq	r7, fp
   360f4:	movne	r6, #0
   360f8:	movne	r7, r6
   360fc:	b	35e80 <__assert_fail@plt+0x21828>
   36100:	ldr	r3, [r5, #8]
   36104:	ldr	r7, [r5, #12]
   36108:	ldr	r2, [sp, #48]	; 0x30
   3610c:	str	r3, [sp, #32]
   36110:	ldr	r3, [sp, #32]
   36114:	add	r7, r7, fp
   36118:	add	r6, r6, fp
   3611c:	cmp	r7, r3
   36120:	strls	r7, [r5, #12]
   36124:	bls	360a0 <__assert_fail@plt+0x21a48>
   36128:	str	r2, [sp, #28]
   3612c:	bl	14148 <__errno_location@plt>
   36130:	mov	r3, #22
   36134:	ldr	r2, [sp, #28]
   36138:	str	r3, [r0]
   3613c:	b	360a0 <__assert_fail@plt+0x21a48>
   36140:	bl	13cec <__stack_chk_fail@plt>
   36144:	mov	r7, fp
   36148:	mov	r6, fp
   3614c:	mvn	sl, #0
   36150:	b	35e80 <__assert_fail@plt+0x21828>
   36154:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36158:	cmp	r3, #0
   3615c:	sub	sp, sp, #28
   36160:	ldr	r7, [r1]
   36164:	ldrne	r8, [r3]
   36168:	mov	r4, r0
   3616c:	str	r3, [sp, #20]
   36170:	ldreq	r8, [sp, #20]
   36174:	cmp	r7, #0
   36178:	str	r1, [sp, #8]
   3617c:	str	r2, [sp, #12]
   36180:	ldr	r6, [r2]
   36184:	beq	363c0 <__assert_fail@plt+0x21d68>
   36188:	cmp	r6, #3
   3618c:	subhi	r6, r6, #3
   36190:	bls	363f0 <__assert_fail@plt+0x21d98>
   36194:	movw	r3, #47912	; 0xbb28
   36198:	movt	r3, #5
   3619c:	str	r3, [sp, #16]
   361a0:	ldr	r1, [r3]
   361a4:	cmp	r1, #0
   361a8:	beq	3629c <__assert_fail@plt+0x21c44>
   361ac:	mov	fp, r7
   361b0:	mov	r5, #0
   361b4:	b	361f4 <__assert_fail@plt+0x21b9c>
   361b8:	ldr	r1, [r4, #28]
   361bc:	cmp	r1, #0
   361c0:	bne	36210 <__assert_fail@plt+0x21bb8>
   361c4:	ldr	r1, [r4]
   361c8:	add	r0, r3, #1
   361cc:	str	r0, [r4, #12]
   361d0:	ldrb	r9, [r1, r3]
   361d4:	cmp	r5, r6
   361d8:	beq	36248 <__assert_fail@plt+0x21bf0>
   361dc:	add	r2, fp, #1
   361e0:	cmp	r9, #10
   361e4:	strb	r9, [fp]
   361e8:	add	r5, r5, #1
   361ec:	mov	fp, r2
   361f0:	beq	36224 <__assert_fail@plt+0x21bcc>
   361f4:	ldrb	r3, [r4, #32]
   361f8:	tst	r3, #1
   361fc:	bne	36210 <__assert_fail@plt+0x21bb8>
   36200:	ldr	r3, [r4, #12]
   36204:	ldr	r1, [r4, #8]
   36208:	cmp	r3, r1
   3620c:	bcc	361b8 <__assert_fail@plt+0x21b60>
   36210:	mov	r0, r4
   36214:	bl	35604 <__assert_fail@plt+0x20fac>
   36218:	cmn	r0, #1
   3621c:	mov	r9, r0
   36220:	bne	361d4 <__assert_fail@plt+0x21b7c>
   36224:	ldr	r2, [sp, #16]
   36228:	mov	r1, #0
   3622c:	strb	r1, [fp]
   36230:	ldr	r3, [r2]
   36234:	cmp	r3, r1
   36238:	beq	362b4 <__assert_fail@plt+0x21c5c>
   3623c:	mov	r0, r5
   36240:	add	sp, sp, #28
   36244:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36248:	cmp	r8, #0
   3624c:	cmpne	r5, r8
   36250:	bhi	362d0 <__assert_fail@plt+0x21c78>
   36254:	add	ip, r5, #3
   36258:	mov	r0, r7
   3625c:	cmp	ip, #1024	; 0x400
   36260:	movcs	r2, #1024	; 0x400
   36264:	movcc	r2, #256	; 0x100
   36268:	add	sl, ip, r2
   3626c:	mov	r1, sl
   36270:	bl	33d78 <__assert_fail@plt+0x1f720>
   36274:	ldr	r3, [sp, #8]
   36278:	cmp	r0, #0
   3627c:	str	r0, [r3]
   36280:	beq	36358 <__assert_fail@plt+0x21d00>
   36284:	ldr	r3, [sp, #12]
   36288:	sub	r6, sl, #3
   3628c:	add	fp, r0, r5
   36290:	mov	r7, r0
   36294:	str	sl, [r3]
   36298:	b	361dc <__assert_fail@plt+0x21b84>
   3629c:	ldr	r0, [r4, #36]	; 0x24
   362a0:	mov	r2, r1
   362a4:	add	r0, r0, #8192	; 0x2000
   362a8:	add	r0, r0, #16
   362ac:	bl	14364 <pth_mutex_acquire@plt>
   362b0:	b	361ac <__assert_fail@plt+0x21b54>
   362b4:	ldr	r0, [r4, #36]	; 0x24
   362b8:	add	r0, r0, #8192	; 0x2000
   362bc:	add	r0, r0, #16
   362c0:	bl	14220 <pth_mutex_release@plt>
   362c4:	mov	r0, r5
   362c8:	add	sp, sp, #28
   362cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   362d0:	cmp	r9, #10
   362d4:	mov	r6, fp
   362d8:	bne	36304 <__assert_fail@plt+0x21cac>
   362dc:	b	36330 <__assert_fail@plt+0x21cd8>
   362e0:	ldr	r1, [r4, #28]
   362e4:	add	r0, r3, #1
   362e8:	cmp	r1, #0
   362ec:	bne	36320 <__assert_fail@plt+0x21cc8>
   362f0:	ldr	r1, [r4]
   362f4:	str	r0, [r4, #12]
   362f8:	ldrb	r0, [r1, r3]
   362fc:	cmp	r0, #10
   36300:	beq	36330 <__assert_fail@plt+0x21cd8>
   36304:	ldrb	r3, [r4, #32]
   36308:	tst	r3, #1
   3630c:	bne	36320 <__assert_fail@plt+0x21cc8>
   36310:	ldr	r3, [r4, #12]
   36314:	ldr	r1, [r4, #8]
   36318:	cmp	r3, r1
   3631c:	bcc	362e0 <__assert_fail@plt+0x21c88>
   36320:	mov	r0, r4
   36324:	bl	35604 <__assert_fail@plt+0x20fac>
   36328:	cmn	r0, #1
   3632c:	bne	362fc <__assert_fail@plt+0x21ca4>
   36330:	ldr	r3, [sp, #20]
   36334:	add	fp, fp, #1
   36338:	add	r5, r5, #1
   3633c:	cmp	r3, #0
   36340:	mov	r3, #10
   36344:	strb	r3, [r6]
   36348:	ldrne	r2, [sp, #20]
   3634c:	movne	r3, #0
   36350:	strne	r3, [r2]
   36354:	b	36224 <__assert_fail@plt+0x21bcc>
   36358:	str	r0, [sp, #4]
   3635c:	bl	14148 <__errno_location@plt>
   36360:	mov	r5, r0
   36364:	mov	r0, r7
   36368:	ldr	r6, [r5]
   3636c:	bl	13b30 <free@plt>
   36370:	ldr	r3, [sp, #20]
   36374:	ldr	r1, [sp, #4]
   36378:	cmp	r3, #0
   3637c:	ldr	r3, [sp, #12]
   36380:	ldr	r2, [sp, #16]
   36384:	str	r1, [r3]
   36388:	ldrne	r3, [sp, #20]
   3638c:	strne	r1, [r3]
   36390:	ldr	r3, [r2]
   36394:	cmp	r3, #0
   36398:	bne	363ac <__assert_fail@plt+0x21d54>
   3639c:	ldr	r0, [r4, #36]	; 0x24
   363a0:	add	r0, r0, #8192	; 0x2000
   363a4:	add	r0, r0, #16
   363a8:	bl	14220 <pth_mutex_release@plt>
   363ac:	str	r6, [r5]
   363b0:	mvn	r5, #0
   363b4:	mov	r0, r5
   363b8:	add	sp, sp, #28
   363bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   363c0:	mov	r0, #256	; 0x100
   363c4:	bl	13f68 <malloc@plt>
   363c8:	ldr	r3, [sp, #8]
   363cc:	cmp	r0, #0
   363d0:	mov	r7, r0
   363d4:	str	r0, [r3]
   363d8:	beq	36404 <__assert_fail@plt+0x21dac>
   363dc:	ldr	r2, [sp, #12]
   363e0:	mov	r3, #256	; 0x100
   363e4:	mov	r6, #253	; 0xfd
   363e8:	str	r3, [r2]
   363ec:	b	36194 <__assert_fail@plt+0x21b3c>
   363f0:	bl	14148 <__errno_location@plt>
   363f4:	mvn	r5, #0
   363f8:	mov	r3, #22
   363fc:	str	r3, [r0]
   36400:	b	3623c <__assert_fail@plt+0x21be4>
   36404:	ldr	r3, [sp, #20]
   36408:	cmp	r3, #0
   3640c:	ldr	r3, [sp, #12]
   36410:	mvneq	r5, #0
   36414:	str	r0, [r3]
   36418:	ldrne	r3, [sp, #20]
   3641c:	mvnne	r5, #0
   36420:	strne	r0, [r3]
   36424:	b	3623c <__assert_fail@plt+0x21be4>
   36428:	cmp	r0, #0
   3642c:	bxeq	lr
   36430:	b	13b30 <free@plt>
   36434:	b	33494 <__assert_fail@plt+0x1ee3c>
   36438:	push	{r3, r4, r5, r6, r7, lr}
   3643c:	movw	r4, #47912	; 0xbb28
   36440:	movt	r4, #5
   36444:	mov	r7, r1
   36448:	mov	r5, r0
   3644c:	mov	r6, r2
   36450:	ldr	r1, [r4]
   36454:	cmp	r1, #0
   36458:	beq	36494 <__assert_fail@plt+0x21e3c>
   3645c:	mov	r2, r6
   36460:	mov	r1, r7
   36464:	mov	r0, r5
   36468:	bl	33494 <__assert_fail@plt+0x1ee3c>
   3646c:	ldr	r3, [r4]
   36470:	cmp	r3, #0
   36474:	mov	r6, r0
   36478:	bne	3648c <__assert_fail@plt+0x21e34>
   3647c:	ldr	r0, [r5, #36]	; 0x24
   36480:	add	r0, r0, #8192	; 0x2000
   36484:	add	r0, r0, #16
   36488:	bl	14220 <pth_mutex_release@plt>
   3648c:	mov	r0, r6
   36490:	pop	{r3, r4, r5, r6, r7, pc}
   36494:	ldr	r0, [r0, #36]	; 0x24
   36498:	mov	r2, r1
   3649c:	add	r0, r0, #8192	; 0x2000
   364a0:	add	r0, r0, #16
   364a4:	bl	14364 <pth_mutex_acquire@plt>
   364a8:	b	3645c <__assert_fail@plt+0x21e04>
   364ac:	push	{r1, r2, r3}
   364b0:	push	{r4, lr}
   364b4:	movw	r4, #47296	; 0xb8c0
   364b8:	movt	r4, #5
   364bc:	sub	sp, sp, #12
   364c0:	add	r3, sp, #24
   364c4:	ldr	ip, [r4]
   364c8:	mov	r2, r3
   364cc:	ldr	r1, [sp, #20]
   364d0:	str	r3, [sp]
   364d4:	str	ip, [sp, #4]
   364d8:	bl	33494 <__assert_fail@plt+0x1ee3c>
   364dc:	ldr	r2, [sp, #4]
   364e0:	ldr	r3, [r4]
   364e4:	cmp	r2, r3
   364e8:	bne	364fc <__assert_fail@plt+0x21ea4>
   364ec:	add	sp, sp, #12
   364f0:	pop	{r4, lr}
   364f4:	add	sp, sp, #12
   364f8:	bx	lr
   364fc:	bl	13cec <__stack_chk_fail@plt>
   36500:	push	{r1, r2, r3}
   36504:	push	{r4, r5, r6, r7, lr}
   36508:	movw	r5, #47912	; 0xbb28
   3650c:	movt	r5, #5
   36510:	movw	r4, #47296	; 0xb8c0
   36514:	movt	r4, #5
   36518:	sub	sp, sp, #8
   3651c:	ldr	r3, [r5]
   36520:	add	r1, sp, #32
   36524:	ldr	r2, [r4]
   36528:	mov	r6, r0
   3652c:	cmp	r3, #0
   36530:	str	r1, [sp]
   36534:	ldr	r7, [sp, #28]
   36538:	str	r2, [sp, #4]
   3653c:	beq	36594 <__assert_fail@plt+0x21f3c>
   36540:	mov	r1, r7
   36544:	mov	r0, r6
   36548:	ldr	r2, [sp]
   3654c:	bl	33494 <__assert_fail@plt+0x1ee3c>
   36550:	ldr	r3, [r5]
   36554:	cmp	r3, #0
   36558:	mov	r7, r0
   3655c:	bne	36570 <__assert_fail@plt+0x21f18>
   36560:	ldr	r0, [r6, #36]	; 0x24
   36564:	add	r0, r0, #8192	; 0x2000
   36568:	add	r0, r0, #16
   3656c:	bl	14220 <pth_mutex_release@plt>
   36570:	ldr	r2, [sp, #4]
   36574:	mov	r0, r7
   36578:	ldr	r3, [r4]
   3657c:	cmp	r2, r3
   36580:	bne	365b0 <__assert_fail@plt+0x21f58>
   36584:	add	sp, sp, #8
   36588:	pop	{r4, r5, r6, r7, lr}
   3658c:	add	sp, sp, #12
   36590:	bx	lr
   36594:	ldr	r0, [r0, #36]	; 0x24
   36598:	mov	r1, r3
   3659c:	mov	r2, r3
   365a0:	add	r0, r0, #8192	; 0x2000
   365a4:	add	r0, r0, #16
   365a8:	bl	14364 <pth_mutex_acquire@plt>
   365ac:	b	36540 <__assert_fail@plt+0x21ee8>
   365b0:	bl	13cec <__stack_chk_fail@plt>
   365b4:	push	{r0, r1, r2, r3}
   365b8:	push	{r4, lr}
   365bc:	movw	r4, #47296	; 0xb8c0
   365c0:	movt	r4, #5
   365c4:	sub	sp, sp, #16
   365c8:	add	r3, sp, #28
   365cc:	add	r0, sp, #8
   365d0:	ldr	ip, [r4]
   365d4:	mov	r2, r3
   365d8:	ldr	r1, [sp, #24]
   365dc:	str	r3, [sp, #4]
   365e0:	str	ip, [sp, #12]
   365e4:	bl	39208 <__assert_fail@plt+0x24bb0>
   365e8:	ldr	r2, [sp, #12]
   365ec:	ldr	r3, [r4]
   365f0:	cmp	r0, #0
   365f4:	ldrge	r0, [sp, #8]
   365f8:	movlt	r0, #0
   365fc:	cmp	r2, r3
   36600:	bne	36614 <__assert_fail@plt+0x21fbc>
   36604:	add	sp, sp, #16
   36608:	pop	{r4, lr}
   3660c:	add	sp, sp, #16
   36610:	bx	lr
   36614:	bl	13cec <__stack_chk_fail@plt>
   36618:	push	{r4, lr}
   3661c:	movw	r4, #47296	; 0xb8c0
   36620:	movt	r4, #5
   36624:	sub	sp, sp, #8
   36628:	mov	r2, r1
   3662c:	mov	r1, r0
   36630:	ldr	r3, [r4]
   36634:	mov	r0, sp
   36638:	str	r3, [sp, #4]
   3663c:	bl	39208 <__assert_fail@plt+0x24bb0>
   36640:	ldr	r2, [sp, #4]
   36644:	ldr	r3, [r4]
   36648:	cmp	r0, #0
   3664c:	ldrge	r0, [sp]
   36650:	movlt	r0, #0
   36654:	cmp	r2, r3
   36658:	bne	36664 <__assert_fail@plt+0x2200c>
   3665c:	add	sp, sp, #8
   36660:	pop	{r4, pc}
   36664:	bl	13cec <__stack_chk_fail@plt>
   36668:	push	{r4, r5, r6, r7, lr}
   3666c:	movw	r4, #47296	; 0xb8c0
   36670:	movt	r4, #5
   36674:	sub	sp, sp, #36	; 0x24
   36678:	mov	r6, #0
   3667c:	ldr	r3, [r4]
   36680:	str	r6, [sp, #24]
   36684:	str	r3, [sp, #28]
   36688:	bl	13d88 <tmpfile64@plt>
   3668c:	subs	r7, r0, #0
   36690:	beq	36708 <__assert_fail@plt+0x220b0>
   36694:	bl	14244 <fileno@plt>
   36698:	bl	13d40 <dup@plt>
   3669c:	mov	r5, r0
   366a0:	mov	r0, r7
   366a4:	bl	142c8 <fclose@plt>
   366a8:	cmn	r5, #1
   366ac:	beq	36708 <__assert_fail@plt+0x220b0>
   366b0:	mov	r0, #8
   366b4:	bl	13f68 <malloc@plt>
   366b8:	subs	r7, r0, #0
   366bc:	beq	36724 <__assert_fail@plt+0x220cc>
   366c0:	movw	r3, #34516	; 0x86d4
   366c4:	movt	r3, #4
   366c8:	add	r2, r3, #48	; 0x30
   366cc:	stm	r7, {r5, r6}
   366d0:	movw	ip, #578	; 0x242
   366d4:	str	r6, [sp, #16]
   366d8:	ldm	r2, {r0, r1, r2}
   366dc:	ldr	r3, [r3, #44]	; 0x2c
   366e0:	str	ip, [sp, #12]
   366e4:	stm	sp, {r0, r1, r2}
   366e8:	mov	r2, r5
   366ec:	add	r0, sp, #24
   366f0:	mov	r1, r7
   366f4:	bl	32f68 <__assert_fail@plt+0x1e910>
   366f8:	cmp	r0, r6
   366fc:	beq	36730 <__assert_fail@plt+0x220d8>
   36700:	mov	r0, r7
   36704:	bl	32c70 <__assert_fail@plt+0x1e618>
   36708:	mov	r0, #0
   3670c:	ldr	r2, [sp, #28]
   36710:	ldr	r3, [r4]
   36714:	cmp	r2, r3
   36718:	bne	36738 <__assert_fail@plt+0x220e0>
   3671c:	add	sp, sp, #36	; 0x24
   36720:	pop	{r4, r5, r6, r7, pc}
   36724:	mov	r0, r5
   36728:	bl	145ec <close@plt>
   3672c:	b	36708 <__assert_fail@plt+0x220b0>
   36730:	ldr	r0, [sp, #24]
   36734:	b	3670c <__assert_fail@plt+0x220b4>
   36738:	bl	13cec <__stack_chk_fail@plt>
   3673c:	cmp	r2, #2
   36740:	push	{r4, r5, r6, r7, lr}
   36744:	mov	r5, r2
   36748:	sub	sp, sp, #12
   3674c:	mov	r7, r0
   36750:	mov	r6, r1
   36754:	bhi	367b8 <__assert_fail@plt+0x22160>
   36758:	adds	r2, r3, #0
   3675c:	movne	r2, #1
   36760:	cmp	r1, #0
   36764:	orreq	r2, r2, #1
   36768:	cmp	r2, #0
   3676c:	beq	367b0 <__assert_fail@plt+0x22158>
   36770:	movw	r4, #47912	; 0xbb28
   36774:	movt	r4, #5
   36778:	ldr	r1, [r4]
   3677c:	cmp	r1, #0
   36780:	beq	367e8 <__assert_fail@plt+0x22190>
   36784:	mov	r2, r5
   36788:	mov	r1, r6
   3678c:	mov	r0, r7
   36790:	bl	33ba0 <__assert_fail@plt+0x1f548>
   36794:	ldr	r3, [r4]
   36798:	cmp	r3, #0
   3679c:	mov	r5, r0
   367a0:	beq	367cc <__assert_fail@plt+0x22174>
   367a4:	mov	r0, r5
   367a8:	add	sp, sp, #12
   367ac:	pop	{r4, r5, r6, r7, pc}
   367b0:	cmp	r5, #2
   367b4:	beq	36770 <__assert_fail@plt+0x22118>
   367b8:	bl	14148 <__errno_location@plt>
   367bc:	mvn	r5, #0
   367c0:	mov	r3, #22
   367c4:	str	r3, [r0]
   367c8:	b	367a4 <__assert_fail@plt+0x2214c>
   367cc:	ldr	r0, [r7, #36]	; 0x24
   367d0:	add	r0, r0, #8192	; 0x2000
   367d4:	add	r0, r0, #16
   367d8:	bl	14220 <pth_mutex_release@plt>
   367dc:	mov	r0, r5
   367e0:	add	sp, sp, #12
   367e4:	pop	{r4, r5, r6, r7, pc}
   367e8:	ldr	r0, [r7, #36]	; 0x24
   367ec:	mov	r2, r1
   367f0:	str	r3, [sp, #4]
   367f4:	add	r0, r0, #8192	; 0x2000
   367f8:	add	r0, r0, #16
   367fc:	bl	14364 <pth_mutex_acquire@plt>
   36800:	ldr	r3, [sp, #4]
   36804:	b	36784 <__assert_fail@plt+0x2212c>
   36808:	push	{r4, r5, r6, lr}
   3680c:	movw	r4, #47912	; 0xbb28
   36810:	movt	r4, #5
   36814:	mov	r6, r1
   36818:	mov	r5, r0
   3681c:	ldr	r1, [r4]
   36820:	cmp	r1, #0
   36824:	beq	36864 <__assert_fail@plt+0x2220c>
   36828:	cmp	r6, #0
   3682c:	mov	r3, #8192	; 0x2000
   36830:	mov	r1, r6
   36834:	mov	r0, r5
   36838:	moveq	r2, #2
   3683c:	movne	r2, #0
   36840:	bl	33ba0 <__assert_fail@plt+0x1f548>
   36844:	ldr	r3, [r4]
   36848:	cmp	r3, #0
   3684c:	popne	{r4, r5, r6, pc}
   36850:	ldr	r0, [r5, #36]	; 0x24
   36854:	pop	{r4, r5, r6, lr}
   36858:	add	r0, r0, #8192	; 0x2000
   3685c:	add	r0, r0, #16
   36860:	b	14220 <pth_mutex_release@plt>
   36864:	ldr	r0, [r0, #36]	; 0x24
   36868:	mov	r2, r1
   3686c:	add	r0, r0, #8192	; 0x2000
   36870:	add	r0, r0, #16
   36874:	bl	14364 <pth_mutex_acquire@plt>
   36878:	b	36828 <__assert_fail@plt+0x221d0>
   3687c:	push	{r4, r5, r6, lr}
   36880:	movw	r4, #47912	; 0xbb28
   36884:	movt	r4, #5
   36888:	mov	r5, r1
   3688c:	mov	r6, r0
   36890:	ldr	r1, [r4]
   36894:	cmp	r1, #0
   36898:	movne	r3, r1
   3689c:	beq	368cc <__assert_fail@plt+0x22274>
   368a0:	cmp	r5, #0
   368a4:	ldrne	r1, [r6, #36]	; 0x24
   368a8:	movwne	r2, #8232	; 0x2028
   368ac:	strne	r5, [r1, r2]
   368b0:	cmp	r3, #0
   368b4:	popne	{r4, r5, r6, pc}
   368b8:	ldr	r0, [r6, #36]	; 0x24
   368bc:	pop	{r4, r5, r6, lr}
   368c0:	add	r0, r0, #8192	; 0x2000
   368c4:	add	r0, r0, #16
   368c8:	b	14220 <pth_mutex_release@plt>
   368cc:	ldr	r0, [r0, #36]	; 0x24
   368d0:	mov	r2, r1
   368d4:	add	r0, r0, #8192	; 0x2000
   368d8:	add	r0, r0, #16
   368dc:	bl	14364 <pth_mutex_acquire@plt>
   368e0:	ldr	r3, [r4]
   368e4:	b	368a0 <__assert_fail@plt+0x22248>
   368e8:	push	{r3, r4, r5, lr}
   368ec:	movw	r4, #47912	; 0xbb28
   368f0:	movt	r4, #5
   368f4:	mov	r5, r0
   368f8:	ldr	r1, [r4]
   368fc:	cmp	r1, #0
   36900:	beq	36918 <__assert_fail@plt+0x222c0>
   36904:	ldr	r2, [r0, #36]	; 0x24
   36908:	movw	r3, #8232	; 0x2028
   3690c:	ldr	r4, [r2, r3]
   36910:	mov	r0, r4
   36914:	pop	{r3, r4, r5, pc}
   36918:	ldr	r0, [r0, #36]	; 0x24
   3691c:	mov	r2, r1
   36920:	add	r0, r0, #8192	; 0x2000
   36924:	add	r0, r0, #16
   36928:	bl	14364 <pth_mutex_acquire@plt>
   3692c:	ldr	r2, [r4]
   36930:	ldr	r0, [r5, #36]	; 0x24
   36934:	movw	r3, #8232	; 0x2028
   36938:	cmp	r2, #0
   3693c:	ldr	r4, [r0, r3]
   36940:	bne	36910 <__assert_fail@plt+0x222b8>
   36944:	add	r0, r0, #8192	; 0x2000
   36948:	add	r0, r0, #16
   3694c:	bl	14220 <pth_mutex_release@plt>
   36950:	mov	r0, r4
   36954:	pop	{r3, r4, r5, pc}
   36958:	push	{r3, r4, r5, r6, r7, lr}
   3695c:	subs	r6, r1, #0
   36960:	mov	r5, r0
   36964:	popeq	{r3, r4, r5, r6, r7, pc}
   36968:	movw	r4, #47912	; 0xbb28
   3696c:	movt	r4, #5
   36970:	ldr	r3, [r4]
   36974:	cmp	r3, #0
   36978:	beq	3698c <__assert_fail@plt+0x22334>
   3697c:	add	r0, r0, #36	; 0x24
   36980:	mov	r2, #1
   36984:	pop	{r3, r4, r5, r6, r7, lr}
   36988:	b	33cb8 <__assert_fail@plt+0x1f660>
   3698c:	mov	r7, r0
   36990:	mov	r1, r3
   36994:	ldr	r0, [r7, #36]!	; 0x24
   36998:	mov	r2, r3
   3699c:	add	r0, r0, #8192	; 0x2000
   369a0:	add	r0, r0, #16
   369a4:	bl	14364 <pth_mutex_acquire@plt>
   369a8:	ldr	r4, [r4]
   369ac:	mov	r0, r7
   369b0:	mov	r1, r6
   369b4:	mov	r2, #1
   369b8:	bl	33cb8 <__assert_fail@plt+0x1f660>
   369bc:	cmp	r4, #0
   369c0:	popne	{r3, r4, r5, r6, r7, pc}
   369c4:	ldr	r0, [r5, #36]	; 0x24
   369c8:	pop	{r3, r4, r5, r6, r7, lr}
   369cc:	add	r0, r0, #8192	; 0x2000
   369d0:	add	r0, r0, #16
   369d4:	b	14220 <pth_mutex_release@plt>
   369d8:	push	{r3, r4, r5, lr}
   369dc:	movw	r4, #47912	; 0xbb28
   369e0:	movt	r4, #5
   369e4:	mov	r5, r0
   369e8:	ldr	r1, [r4]
   369ec:	cmp	r1, #0
   369f0:	beq	36a30 <__assert_fail@plt+0x223d8>
   369f4:	ldr	r3, [r5, #36]	; 0x24
   369f8:	movw	r2, #8240	; 0x2030
   369fc:	ldr	r4, [r3, r2]
   36a00:	cmp	r4, #0
   36a04:	addne	r2, r2, #48	; 0x30
   36a08:	ldrbne	r0, [r3, r2]
   36a0c:	orrne	r0, r0, #32
   36a10:	strbne	r0, [r3, r2]
   36a14:	cmp	r1, #0
   36a18:	beq	36a4c <__assert_fail@plt+0x223f4>
   36a1c:	cmp	r4, #0
   36a20:	movw	r0, #34796	; 0x87ec
   36a24:	movt	r0, #4
   36a28:	movne	r0, r4
   36a2c:	pop	{r3, r4, r5, pc}
   36a30:	ldr	r0, [r0, #36]	; 0x24
   36a34:	mov	r2, r1
   36a38:	add	r0, r0, #8192	; 0x2000
   36a3c:	add	r0, r0, #16
   36a40:	bl	14364 <pth_mutex_acquire@plt>
   36a44:	ldr	r1, [r4]
   36a48:	b	369f4 <__assert_fail@plt+0x2239c>
   36a4c:	ldr	r0, [r5, #36]	; 0x24
   36a50:	add	r0, r0, #8192	; 0x2000
   36a54:	add	r0, r0, #16
   36a58:	bl	14220 <pth_mutex_release@plt>
   36a5c:	b	36a1c <__assert_fail@plt+0x223c4>
   36a60:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   36a64:	movw	sl, #47912	; 0xbb28
   36a68:	movt	sl, #5
   36a6c:	sub	sp, sp, #20
   36a70:	movw	r9, #47296	; 0xb8c0
   36a74:	movt	r9, #5
   36a78:	ldr	ip, [sl]
   36a7c:	mov	r4, r0
   36a80:	mov	r6, r1
   36a84:	ldr	r0, [r9]
   36a88:	ldr	r1, [sp, #56]	; 0x38
   36a8c:	cmp	ip, #0
   36a90:	mov	r5, r2
   36a94:	mov	r8, r3
   36a98:	str	r0, [sp, #12]
   36a9c:	str	r1, [sp, #4]
   36aa0:	beq	36e2c <__assert_fail@plt+0x227d4>
   36aa4:	cmp	r5, #0
   36aa8:	beq	36e48 <__assert_fail@plt+0x227f0>
   36aac:	mov	r7, #0
   36ab0:	ldrb	fp, [r6], #1
   36ab4:	cmp	fp, #127	; 0x7f
   36ab8:	cmpne	fp, #31
   36abc:	bls	36adc <__assert_fail@plt+0x22484>
   36ac0:	cmp	r8, #0
   36ac4:	beq	36ce4 <__assert_fail@plt+0x2268c>
   36ac8:	mov	r0, r8
   36acc:	mov	r1, fp
   36ad0:	bl	140ac <strchr@plt>
   36ad4:	cmp	r0, #0
   36ad8:	beq	36cdc <__assert_fail@plt+0x22684>
   36adc:	ldrb	r3, [r4, #32]
   36ae0:	tst	r3, #1
   36ae4:	beq	36bd8 <__assert_fail@plt+0x22580>
   36ae8:	ldr	r3, [r4, #12]
   36aec:	ldr	r2, [r4, #4]
   36af0:	cmp	r3, r2
   36af4:	bcs	36bd8 <__assert_fail@plt+0x22580>
   36af8:	ldr	r2, [r4]
   36afc:	add	r1, r3, #1
   36b00:	str	r1, [r4, #12]
   36b04:	mov	r1, #92	; 0x5c
   36b08:	strb	r1, [r2, r3]
   36b0c:	ldrb	r2, [r6, #-1]
   36b10:	cmp	r2, #10
   36b14:	beq	36c00 <__assert_fail@plt+0x225a8>
   36b18:	cmp	r2, #13
   36b1c:	beq	36c34 <__assert_fail@plt+0x225dc>
   36b20:	cmp	r2, #12
   36b24:	beq	36c88 <__assert_fail@plt+0x22630>
   36b28:	cmp	r2, #11
   36b2c:	beq	36d40 <__assert_fail@plt+0x226e8>
   36b30:	cmp	r2, #8
   36b34:	beq	36d94 <__assert_fail@plt+0x2273c>
   36b38:	cmp	r2, #0
   36b3c:	bne	36e14 <__assert_fail@plt+0x227bc>
   36b40:	ldrb	r3, [r4, #32]
   36b44:	tst	r3, #1
   36b48:	beq	36b5c <__assert_fail@plt+0x22504>
   36b4c:	ldr	r3, [r4, #12]
   36b50:	ldr	r2, [r4, #4]
   36b54:	cmp	r3, r2
   36b58:	bcc	36dc8 <__assert_fail@plt+0x22770>
   36b5c:	mov	r0, r4
   36b60:	add	r1, sp, #11
   36b64:	mov	r2, #1
   36b68:	mov	r3, #0
   36b6c:	mov	ip, #48	; 0x30
   36b70:	strb	ip, [sp, #11]
   36b74:	bl	34010 <__assert_fail@plt+0x1f9b8>
   36b78:	add	r7, r7, #2
   36b7c:	subs	r5, r5, #1
   36b80:	add	r7, r7, #1
   36b84:	bne	36ab0 <__assert_fail@plt+0x22458>
   36b88:	ldr	ip, [sp, #4]
   36b8c:	movw	r1, #8284	; 0x205c
   36b90:	ldr	r0, [r4, #36]	; 0x24
   36b94:	ldr	r2, [sl]
   36b98:	cmp	ip, #0
   36b9c:	strne	r7, [ip]
   36ba0:	cmp	r2, #0
   36ba4:	ldrb	r4, [r0, r1]
   36ba8:	sbfx	r4, r4, #0, #1
   36bac:	bne	36bbc <__assert_fail@plt+0x22564>
   36bb0:	add	r0, r0, #8192	; 0x2000
   36bb4:	add	r0, r0, #16
   36bb8:	bl	14220 <pth_mutex_release@plt>
   36bbc:	ldr	r2, [sp, #12]
   36bc0:	mov	r0, r4
   36bc4:	ldr	r3, [r9]
   36bc8:	cmp	r2, r3
   36bcc:	bne	36e50 <__assert_fail@plt+0x227f8>
   36bd0:	add	sp, sp, #20
   36bd4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   36bd8:	mov	r2, #1
   36bdc:	mov	r0, r4
   36be0:	add	r1, sp, #11
   36be4:	mov	r3, #0
   36be8:	mov	ip, #92	; 0x5c
   36bec:	strb	ip, [sp, #11]
   36bf0:	bl	34010 <__assert_fail@plt+0x1f9b8>
   36bf4:	ldrb	r2, [r6, #-1]
   36bf8:	cmp	r2, #10
   36bfc:	bne	36b18 <__assert_fail@plt+0x224c0>
   36c00:	ldrb	r3, [r4, #32]
   36c04:	tst	r3, #1
   36c08:	beq	36c68 <__assert_fail@plt+0x22610>
   36c0c:	ldr	r3, [r4, #12]
   36c10:	ldr	r2, [r4, #4]
   36c14:	cmp	r3, r2
   36c18:	bcs	36c68 <__assert_fail@plt+0x22610>
   36c1c:	ldr	r2, [r4]
   36c20:	add	r1, r3, #1
   36c24:	str	r1, [r4, #12]
   36c28:	mov	r1, #110	; 0x6e
   36c2c:	strb	r1, [r2, r3]
   36c30:	b	36b78 <__assert_fail@plt+0x22520>
   36c34:	ldrb	r3, [r4, #32]
   36c38:	tst	r3, #1
   36c3c:	beq	36d20 <__assert_fail@plt+0x226c8>
   36c40:	ldr	r3, [r4, #12]
   36c44:	ldr	r2, [r4, #4]
   36c48:	cmp	r3, r2
   36c4c:	bcs	36d20 <__assert_fail@plt+0x226c8>
   36c50:	ldr	r2, [r4]
   36c54:	add	r1, r3, #1
   36c58:	str	r1, [r4, #12]
   36c5c:	mov	r1, #114	; 0x72
   36c60:	strb	r1, [r2, r3]
   36c64:	b	36b78 <__assert_fail@plt+0x22520>
   36c68:	mov	r0, r4
   36c6c:	add	r1, sp, #11
   36c70:	mov	r2, #1
   36c74:	mov	r3, #0
   36c78:	mov	ip, #110	; 0x6e
   36c7c:	strb	ip, [sp, #11]
   36c80:	bl	34010 <__assert_fail@plt+0x1f9b8>
   36c84:	b	36b78 <__assert_fail@plt+0x22520>
   36c88:	ldrb	r3, [r4, #32]
   36c8c:	tst	r3, #1
   36c90:	beq	36cbc <__assert_fail@plt+0x22664>
   36c94:	ldr	r3, [r4, #12]
   36c98:	ldr	r2, [r4, #4]
   36c9c:	cmp	r3, r2
   36ca0:	bcs	36cbc <__assert_fail@plt+0x22664>
   36ca4:	ldr	r2, [r4]
   36ca8:	add	r1, r3, #1
   36cac:	str	r1, [r4, #12]
   36cb0:	mov	r1, #102	; 0x66
   36cb4:	strb	r1, [r2, r3]
   36cb8:	b	36b78 <__assert_fail@plt+0x22520>
   36cbc:	mov	r0, r4
   36cc0:	add	r1, sp, #11
   36cc4:	mov	r2, #1
   36cc8:	mov	r3, #0
   36ccc:	mov	ip, #102	; 0x66
   36cd0:	strb	ip, [sp, #11]
   36cd4:	bl	34010 <__assert_fail@plt+0x1f9b8>
   36cd8:	b	36b78 <__assert_fail@plt+0x22520>
   36cdc:	cmp	fp, #92	; 0x5c
   36ce0:	beq	36adc <__assert_fail@plt+0x22484>
   36ce4:	ldrb	r3, [r4, #32]
   36ce8:	tst	r3, #1
   36cec:	beq	36d00 <__assert_fail@plt+0x226a8>
   36cf0:	ldr	r3, [r4, #12]
   36cf4:	ldr	r2, [r4, #4]
   36cf8:	cmp	r3, r2
   36cfc:	bcc	36de0 <__assert_fail@plt+0x22788>
   36d00:	mov	r0, r4
   36d04:	add	r1, sp, #11
   36d08:	mov	r2, #1
   36d0c:	mov	r3, #0
   36d10:	strb	fp, [sp, #11]
   36d14:	bl	34010 <__assert_fail@plt+0x1f9b8>
   36d18:	add	r7, r7, #1
   36d1c:	b	36b7c <__assert_fail@plt+0x22524>
   36d20:	mov	r0, r4
   36d24:	add	r1, sp, #11
   36d28:	mov	r2, #1
   36d2c:	mov	r3, #0
   36d30:	mov	ip, #114	; 0x72
   36d34:	strb	ip, [sp, #11]
   36d38:	bl	34010 <__assert_fail@plt+0x1f9b8>
   36d3c:	b	36b78 <__assert_fail@plt+0x22520>
   36d40:	ldrb	r3, [r4, #32]
   36d44:	tst	r3, #1
   36d48:	beq	36d74 <__assert_fail@plt+0x2271c>
   36d4c:	ldr	r3, [r4, #12]
   36d50:	ldr	r2, [r4, #4]
   36d54:	cmp	r3, r2
   36d58:	bcs	36d74 <__assert_fail@plt+0x2271c>
   36d5c:	ldr	r2, [r4]
   36d60:	add	r1, r3, #1
   36d64:	str	r1, [r4, #12]
   36d68:	mov	r1, #118	; 0x76
   36d6c:	strb	r1, [r2, r3]
   36d70:	b	36b78 <__assert_fail@plt+0x22520>
   36d74:	mov	r0, r4
   36d78:	add	r1, sp, #11
   36d7c:	mov	r2, #1
   36d80:	mov	r3, #0
   36d84:	mov	ip, #118	; 0x76
   36d88:	strb	ip, [sp, #11]
   36d8c:	bl	34010 <__assert_fail@plt+0x1f9b8>
   36d90:	b	36b78 <__assert_fail@plt+0x22520>
   36d94:	ldrb	r3, [r4, #32]
   36d98:	tst	r3, #1
   36d9c:	beq	36df4 <__assert_fail@plt+0x2279c>
   36da0:	ldr	r3, [r4, #12]
   36da4:	ldr	r2, [r4, #4]
   36da8:	cmp	r3, r2
   36dac:	bcs	36df4 <__assert_fail@plt+0x2279c>
   36db0:	ldr	r2, [r4]
   36db4:	add	r1, r3, #1
   36db8:	mov	ip, #98	; 0x62
   36dbc:	str	r1, [r4, #12]
   36dc0:	strb	ip, [r2, r3]
   36dc4:	b	36b78 <__assert_fail@plt+0x22520>
   36dc8:	ldr	r2, [r4]
   36dcc:	add	r1, r3, #1
   36dd0:	str	r1, [r4, #12]
   36dd4:	mov	r1, #48	; 0x30
   36dd8:	strb	r1, [r2, r3]
   36ddc:	b	36b78 <__assert_fail@plt+0x22520>
   36de0:	ldr	r2, [r4]
   36de4:	add	r1, r3, #1
   36de8:	str	r1, [r4, #12]
   36dec:	strb	fp, [r2, r3]
   36df0:	b	36d18 <__assert_fail@plt+0x226c0>
   36df4:	mov	r0, r4
   36df8:	add	r1, sp, #11
   36dfc:	mov	r2, #1
   36e00:	mov	r3, #0
   36e04:	mov	ip, #98	; 0x62
   36e08:	strb	ip, [sp, #11]
   36e0c:	bl	34010 <__assert_fail@plt+0x1f9b8>
   36e10:	b	36b78 <__assert_fail@plt+0x22520>
   36e14:	movw	r1, #34800	; 0x87f0
   36e18:	mov	r0, r4
   36e1c:	movt	r1, #4
   36e20:	add	r7, r7, #4
   36e24:	bl	364ac <__assert_fail@plt+0x21e54>
   36e28:	b	36b7c <__assert_fail@plt+0x22524>
   36e2c:	ldr	r0, [r4, #36]	; 0x24
   36e30:	mov	r1, ip
   36e34:	mov	r2, ip
   36e38:	add	r0, r0, #8192	; 0x2000
   36e3c:	add	r0, r0, #16
   36e40:	bl	14364 <pth_mutex_acquire@plt>
   36e44:	b	36aa4 <__assert_fail@plt+0x2244c>
   36e48:	mov	r7, r5
   36e4c:	b	36b88 <__assert_fail@plt+0x22530>
   36e50:	bl	13cec <__stack_chk_fail@plt>
   36e54:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   36e58:	movw	r7, #47296	; 0xb8c0
   36e5c:	movt	r7, #5
   36e60:	sub	sp, sp, #8
   36e64:	subs	r9, r2, #0
   36e68:	mov	r4, r0
   36e6c:	ldr	r3, [r7]
   36e70:	mov	r5, r1
   36e74:	ldr	sl, [sp, #40]	; 0x28
   36e78:	str	r3, [sp, #4]
   36e7c:	beq	36fc4 <__assert_fail@plt+0x2296c>
   36e80:	movw	r8, #47912	; 0xbb28
   36e84:	movt	r8, #5
   36e88:	ldr	r1, [r8]
   36e8c:	cmp	r1, #0
   36e90:	beq	36ff0 <__assert_fail@plt+0x22998>
   36e94:	add	r5, r5, #1
   36e98:	mov	r6, r9
   36e9c:	b	36f20 <__assert_fail@plt+0x228c8>
   36ea0:	ldr	r3, [r4, #12]
   36ea4:	ldr	r2, [r4, #4]
   36ea8:	cmp	r3, r2
   36eac:	bcs	36f2c <__assert_fail@plt+0x228d4>
   36eb0:	ldrb	r2, [r5, #-1]
   36eb4:	add	r0, r3, #1
   36eb8:	ldr	r1, [r4]
   36ebc:	str	r0, [r4, #12]
   36ec0:	lsr	r2, r2, #4
   36ec4:	cmp	r2, #9
   36ec8:	addle	r2, r2, #48	; 0x30
   36ecc:	addgt	r2, r2, #55	; 0x37
   36ed0:	strb	r2, [r1, r3]
   36ed4:	ldrb	r3, [r4, #32]
   36ed8:	tst	r3, #1
   36edc:	beq	36f64 <__assert_fail@plt+0x2290c>
   36ee0:	ldr	r3, [r4, #12]
   36ee4:	ldr	r2, [r4, #4]
   36ee8:	cmp	r3, r2
   36eec:	bcs	36f64 <__assert_fail@plt+0x2290c>
   36ef0:	ldrb	r2, [r5, #-1]
   36ef4:	add	r0, r3, #1
   36ef8:	ldr	r1, [r4]
   36efc:	add	r5, r5, #1
   36f00:	and	r2, r2, #15
   36f04:	str	r0, [r4, #12]
   36f08:	cmp	r2, #9
   36f0c:	addle	r2, r2, #48	; 0x30
   36f10:	addgt	r2, r2, #55	; 0x37
   36f14:	subs	r6, r6, #1
   36f18:	strb	r2, [r1, r3]
   36f1c:	beq	36f9c <__assert_fail@plt+0x22944>
   36f20:	ldrb	r3, [r4, #32]
   36f24:	tst	r3, #1
   36f28:	bne	36ea0 <__assert_fail@plt+0x22848>
   36f2c:	ldrb	r3, [r5, #-1]
   36f30:	mov	r0, r4
   36f34:	add	r1, sp, #3
   36f38:	mov	r2, #1
   36f3c:	lsr	r3, r3, #4
   36f40:	cmp	r3, #9
   36f44:	addle	ip, r3, #48	; 0x30
   36f48:	addgt	ip, r3, #55	; 0x37
   36f4c:	mov	r3, #0
   36f50:	strb	ip, [sp, #3]
   36f54:	bl	34010 <__assert_fail@plt+0x1f9b8>
   36f58:	ldrb	r3, [r4, #32]
   36f5c:	tst	r3, #1
   36f60:	bne	36ee0 <__assert_fail@plt+0x22888>
   36f64:	ldrb	r3, [r5, #-1]
   36f68:	mov	r0, r4
   36f6c:	add	r1, sp, #3
   36f70:	mov	r2, #1
   36f74:	and	r3, r3, #15
   36f78:	add	r5, r5, #1
   36f7c:	cmp	r3, #9
   36f80:	addle	ip, r3, #48	; 0x30
   36f84:	addgt	ip, r3, #55	; 0x37
   36f88:	mov	r3, #0
   36f8c:	strb	ip, [sp, #3]
   36f90:	bl	34010 <__assert_fail@plt+0x1f9b8>
   36f94:	subs	r6, r6, #1
   36f98:	bne	36f20 <__assert_fail@plt+0x228c8>
   36f9c:	ldr	r0, [r4, #36]	; 0x24
   36fa0:	movw	r2, #8284	; 0x205c
   36fa4:	ldr	r3, [r8]
   36fa8:	cmp	sl, #0
   36fac:	lsl	r9, r9, #1
   36fb0:	strne	r9, [sl]
   36fb4:	cmp	r3, #0
   36fb8:	ldrb	r9, [r0, r2]
   36fbc:	sbfx	r9, r9, #0, #1
   36fc0:	beq	36fe0 <__assert_fail@plt+0x22988>
   36fc4:	ldr	r2, [sp, #4]
   36fc8:	mov	r0, r9
   36fcc:	ldr	r3, [r7]
   36fd0:	cmp	r2, r3
   36fd4:	bne	37008 <__assert_fail@plt+0x229b0>
   36fd8:	add	sp, sp, #8
   36fdc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   36fe0:	add	r0, r0, #8192	; 0x2000
   36fe4:	add	r0, r0, #16
   36fe8:	bl	14220 <pth_mutex_release@plt>
   36fec:	b	36fc4 <__assert_fail@plt+0x2296c>
   36ff0:	ldr	r0, [r0, #36]	; 0x24
   36ff4:	mov	r2, r1
   36ff8:	add	r0, r0, #8192	; 0x2000
   36ffc:	add	r0, r0, #16
   37000:	bl	14364 <pth_mutex_acquire@plt>
   37004:	b	36e94 <__assert_fail@plt+0x2283c>
   37008:	bl	13cec <__stack_chk_fail@plt>
   3700c:	push	{r4, r5, r6, r7, r8, lr}
   37010:	subs	r6, r2, #0
   37014:	mov	r8, r0
   37018:	ldr	r7, [sp, #24]
   3701c:	beq	37050 <__assert_fail@plt+0x229f8>
   37020:	ldrsb	r2, [r1]
   37024:	cmp	r2, #0
   37028:	blt	37064 <__assert_fail@plt+0x22a0c>
   3702c:	mov	ip, r1
   37030:	mov	r4, #0
   37034:	b	37044 <__assert_fail@plt+0x229ec>
   37038:	ldrsb	r5, [ip, #1]!
   3703c:	cmp	r5, #0
   37040:	blt	37068 <__assert_fail@plt+0x22a10>
   37044:	add	r4, r4, #1
   37048:	cmp	r4, r6
   3704c:	bne	37038 <__assert_fail@plt+0x229e0>
   37050:	str	r7, [sp, #24]
   37054:	mov	r0, r8
   37058:	mov	r2, r6
   3705c:	pop	{r4, r5, r6, r7, r8, lr}
   37060:	b	36a60 <__assert_fail@plt+0x22408>
   37064:	mov	r4, #0
   37068:	cmp	r3, #0
   3706c:	mov	r0, r1
   37070:	mov	r1, r6
   37074:	ldrbne	r2, [r3]
   37078:	moveq	r2, r3
   3707c:	bl	3cd8c <__assert_fail@plt+0x28734>
   37080:	cmp	r7, #0
   37084:	mov	r5, r0
   37088:	beq	37094 <__assert_fail@plt+0x22a3c>
   3708c:	bl	14094 <strlen@plt>
   37090:	str	r0, [r7]
   37094:	mov	r1, r8
   37098:	mov	r0, r5
   3709c:	bl	35c7c <__assert_fail@plt+0x21624>
   370a0:	mov	r6, r0
   370a4:	mov	r0, r5
   370a8:	bl	13c44 <gcry_free@plt>
   370ac:	cmn	r6, #1
   370b0:	movne	r0, r4
   370b4:	mvneq	r0, #0
   370b8:	pop	{r4, r5, r6, r7, r8, pc}
   370bc:	andeq	r0, r0, r0
   370c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   370c4:	movw	sl, #47296	; 0xb8c0
   370c8:	movt	sl, #5
   370cc:	subs	r5, r3, #0
   370d0:	sub	sp, sp, #40	; 0x28
   370d4:	mov	r7, r0
   370d8:	ldr	r3, [sl]
   370dc:	mov	r8, r1
   370e0:	mov	r9, r2
   370e4:	ldr	r6, [sp, #72]	; 0x48
   370e8:	str	r3, [sp, #36]	; 0x24
   370ec:	bgt	3710c <__assert_fail@plt+0x22ab4>
   370f0:	b	3715c <__assert_fail@plt+0x22b04>
   370f4:	rsb	r5, r4, r5
   370f8:	ldr	r3, [r6]
   370fc:	cmp	r5, #0
   37100:	add	r4, r3, r4
   37104:	str	r4, [r6]
   37108:	ble	3715c <__assert_fail@plt+0x22b04>
   3710c:	cmp	r5, #32
   37110:	movcc	r4, r5
   37114:	movcs	r4, #32
   37118:	mov	r1, r9
   3711c:	mov	r3, #32
   37120:	add	r0, sp, #4
   37124:	mov	r2, r4
   37128:	bl	13bb4 <__memset_chk@plt>
   3712c:	mov	r0, r8
   37130:	add	r1, sp, #4
   37134:	mov	r2, r4
   37138:	blx	r7
   3713c:	cmp	r0, #0
   37140:	beq	370f4 <__assert_fail@plt+0x22a9c>
   37144:	ldr	r2, [sp, #36]	; 0x24
   37148:	ldr	r3, [sl]
   3714c:	cmp	r2, r3
   37150:	bne	37164 <__assert_fail@plt+0x22b0c>
   37154:	add	sp, sp, #40	; 0x28
   37158:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3715c:	mov	r0, #0
   37160:	b	37144 <__assert_fail@plt+0x22aec>
   37164:	bl	13cec <__stack_chk_fail@plt>
   37168:	push	{r3, lr}
   3716c:	mov	r3, r0
   37170:	mov	r0, r1
   37174:	mov	r1, r2
   37178:	mov	r2, #1
   3717c:	bl	13e18 <fwrite@plt>
   37180:	subs	r0, r0, #1
   37184:	mvnne	r0, #0
   37188:	pop	{r3, pc}
   3718c:	push	{r3, r4, r5, r6, r7, lr}
   37190:	mov	r4, r0
   37194:	ldr	r0, [r0, #12]
   37198:	mov	r5, r2
   3719c:	ldr	r3, [r4, #4]
   371a0:	mov	r6, r1
   371a4:	cmp	r0, #0
   371a8:	add	r3, r3, r2
   371ac:	str	r3, [r4, #4]
   371b0:	beq	37214 <__assert_fail@plt+0x22bbc>
   371b4:	ldr	r3, [r4, #8]
   371b8:	ldr	ip, [r4]
   371bc:	add	r7, r2, r3
   371c0:	cmp	r7, ip
   371c4:	bcc	3721c <__assert_fail@plt+0x22bc4>
   371c8:	cmp	r2, #0
   371cc:	beq	37214 <__assert_fail@plt+0x22bbc>
   371d0:	cmp	r3, ip
   371d4:	addcc	r2, r1, r2
   371d8:	addcc	r1, r1, #1
   371dc:	bcc	371f8 <__assert_fail@plt+0x22ba0>
   371e0:	b	37214 <__assert_fail@plt+0x22bbc>
   371e4:	ldr	r3, [r4, #8]
   371e8:	ldr	r0, [r4]
   371ec:	cmp	r3, r0
   371f0:	bcs	37214 <__assert_fail@plt+0x22bbc>
   371f4:	ldr	r0, [r4, #12]
   371f8:	add	ip, r3, #1
   371fc:	str	ip, [r4, #8]
   37200:	ldrb	ip, [r1, #-1]
   37204:	cmp	r1, r2
   37208:	add	r1, r1, #1
   3720c:	strb	ip, [r0, r3]
   37210:	bne	371e4 <__assert_fail@plt+0x22b8c>
   37214:	mov	r0, #0
   37218:	pop	{r3, r4, r5, r6, r7, pc}
   3721c:	add	r0, r0, r3
   37220:	bl	13ba8 <memcpy@plt>
   37224:	ldr	r3, [r4, #8]
   37228:	mov	r0, #0
   3722c:	add	r5, r3, r5
   37230:	str	r5, [r4, #8]
   37234:	pop	{r3, r4, r5, r6, r7, pc}
   37238:	push	{r3, r4, r5, r6, r7, lr}
   3723c:	mov	r4, r0
   37240:	ldr	r6, [r0]
   37244:	mov	r7, r1
   37248:	mov	r5, r2
   3724c:	cmp	r6, #0
   37250:	bne	372bc <__assert_fail@plt+0x22c64>
   37254:	ldr	r0, [r0, #8]
   37258:	ldr	r3, [r4, #4]
   3725c:	add	r2, r2, r0
   37260:	cmp	r2, r3
   37264:	bcs	37290 <__assert_fail@plt+0x22c38>
   37268:	ldr	r3, [r4, #12]
   3726c:	add	r0, r3, r0
   37270:	mov	r2, r5
   37274:	mov	r1, r7
   37278:	bl	13ba8 <memcpy@plt>
   3727c:	ldr	r3, [r4, #8]
   37280:	add	r5, r3, r5
   37284:	str	r5, [r4, #8]
   37288:	mov	r0, r6
   3728c:	pop	{r3, r4, r5, r6, r7, pc}
   37290:	add	r3, r3, #512	; 0x200
   37294:	ldr	r0, [r4, #12]
   37298:	add	r1, r3, r5
   3729c:	str	r1, [r4, #4]
   372a0:	bl	13d34 <realloc@plt>
   372a4:	subs	r2, r0, #0
   372a8:	beq	372cc <__assert_fail@plt+0x22c74>
   372ac:	ldr	r0, [r4, #8]
   372b0:	mov	r3, r2
   372b4:	str	r2, [r4, #12]
   372b8:	b	3726c <__assert_fail@plt+0x22c14>
   372bc:	bl	14148 <__errno_location@plt>
   372c0:	str	r6, [r0]
   372c4:	mvn	r6, #0
   372c8:	b	37288 <__assert_fail@plt+0x22c30>
   372cc:	bl	14148 <__errno_location@plt>
   372d0:	mov	r1, r6
   372d4:	ldr	r2, [r4, #8]
   372d8:	mvn	r6, #0
   372dc:	ldr	r3, [r0]
   372e0:	ldr	r0, [r4, #12]
   372e4:	cmp	r3, #0
   372e8:	moveq	r3, #12
   372ec:	str	r3, [r4]
   372f0:	bl	141cc <memset@plt>
   372f4:	b	37288 <__assert_fail@plt+0x22c30>
   372f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   372fc:	movw	ip, #47296	; 0xb8c0
   37300:	sub	sp, sp, #812	; 0x32c
   37304:	movt	ip, #5
   37308:	mov	r4, #0
   3730c:	str	r1, [sp, #76]	; 0x4c
   37310:	ldr	r1, [ip]
   37314:	str	ip, [sp, #52]	; 0x34
   37318:	str	r0, [sp, #72]	; 0x48
   3731c:	str	r2, [sp, #60]	; 0x3c
   37320:	str	r3, [sp, #80]	; 0x50
   37324:	str	r4, [sp, #100]	; 0x64
   37328:	str	r1, [sp, #804]	; 0x324
   3732c:	bl	14148 <__errno_location@plt>
   37330:	ldr	ip, [sp, #60]	; 0x3c
   37334:	cmp	ip, r4
   37338:	ldr	ip, [r0]
   3733c:	str	r0, [sp, #68]	; 0x44
   37340:	str	ip, [sp, #84]	; 0x54
   37344:	beq	38e20 <__assert_fail@plt+0x247c8>
   37348:	ldr	ip, [sp, #60]	; 0x3c
   3734c:	ldrb	r3, [ip]
   37350:	add	ip, sp, #232	; 0xe8
   37354:	str	ip, [sp, #56]	; 0x38
   37358:	cmp	r3, r4
   3735c:	beq	37a78 <__assert_fail@plt+0x23420>
   37360:	mov	r9, r4
   37364:	ldr	sl, [sp, #60]	; 0x3c
   37368:	str	r9, [sp, #12]
   3736c:	mov	r4, #5
   37370:	mov	r9, ip
   37374:	b	37388 <__assert_fail@plt+0x22d30>
   37378:	ldrb	r3, [sl, #1]
   3737c:	add	sl, sl, #1
   37380:	cmp	r3, #0
   37384:	beq	37720 <__assert_fail@plt+0x230c8>
   37388:	cmp	r3, #37	; 0x25
   3738c:	bne	37378 <__assert_fail@plt+0x22d20>
   37390:	ldrb	r6, [sl, #1]
   37394:	add	ip, sl, #1
   37398:	str	ip, [sp, #16]
   3739c:	cmp	r6, #0
   373a0:	beq	3792c <__assert_fail@plt+0x232d4>
   373a4:	cmp	r6, #37	; 0x25
   373a8:	beq	3770c <__assert_fail@plt+0x230b4>
   373ac:	sub	r3, r6, #49	; 0x31
   373b0:	cmp	r3, #8
   373b4:	bhi	37400 <__assert_fail@plt+0x22da8>
   373b8:	ldrb	r2, [sl, #2]
   373bc:	add	r0, sl, #2
   373c0:	sub	r7, r6, #48	; 0x30
   373c4:	sub	r3, r2, #48	; 0x30
   373c8:	uxtb	r1, r3
   373cc:	cmp	r1, #9
   373d0:	bhi	373f8 <__assert_fail@plt+0x22da0>
   373d4:	add	sl, sl, #3
   373d8:	add	r7, r7, r7, lsl #2
   373dc:	mov	r0, sl
   373e0:	ldrb	r2, [sl], #1
   373e4:	add	r7, r3, r7, lsl #1
   373e8:	sub	r3, r2, #48	; 0x30
   373ec:	uxtb	r1, r3
   373f0:	cmp	r1, #9
   373f4:	bls	373d8 <__assert_fail@plt+0x22d80>
   373f8:	cmp	r2, #36	; 0x24
   373fc:	beq	37a3c <__assert_fail@plt+0x233e4>
   37400:	ldr	sl, [sp, #16]
   37404:	mov	r7, #0
   37408:	mov	r8, #0
   3740c:	sub	r2, r6, #32
   37410:	mov	r3, sl
   37414:	cmp	r2, #16
   37418:	ldrls	pc, [pc, r2, lsl #2]
   3741c:	b	375b8 <__assert_fail@plt+0x22f60>
   37420:	muleq	r3, r8, r5
   37424:			; <UNDEFINED> instruction: 0x000375b8
   37428:			; <UNDEFINED> instruction: 0x000375b8
   3742c:	andeq	r7, r3, r8, lsr #11
   37430:			; <UNDEFINED> instruction: 0x000375b8
   37434:			; <UNDEFINED> instruction: 0x000375b8
   37438:			; <UNDEFINED> instruction: 0x000375b8
   3743c:	andeq	r7, r3, r0, lsr #11
   37440:			; <UNDEFINED> instruction: 0x000375b8
   37444:			; <UNDEFINED> instruction: 0x000375b8
   37448:			; <UNDEFINED> instruction: 0x000375b8
   3744c:			; <UNDEFINED> instruction: 0x000375b0
   37450:			; <UNDEFINED> instruction: 0x000375b8
   37454:	muleq	r3, r0, r5
   37458:			; <UNDEFINED> instruction: 0x000375b8
   3745c:			; <UNDEFINED> instruction: 0x000375b8
   37460:	andeq	r7, r3, r4, ror #8
   37464:	orr	r8, r8, #32
   37468:	ldrb	r6, [sl, #1]
   3746c:	add	sl, sl, #1
   37470:	cmp	r6, #0
   37474:	bne	3740c <__assert_fail@plt+0x22db4>
   37478:	mov	ip, #0
   3747c:	mvn	r6, #0
   37480:	mov	r1, ip
   37484:	str	ip, [sp, #44]	; 0x2c
   37488:	mov	ip, #0
   3748c:	str	ip, [sp, #40]	; 0x28
   37490:	mvn	ip, #0
   37494:	str	ip, [sp, #48]	; 0x30
   37498:	mov	ip, #0
   3749c:	str	ip, [sp, #24]
   374a0:	sub	r1, r1, #65	; 0x41
   374a4:	cmp	r1, #55	; 0x37
   374a8:	ldrls	pc, [pc, r1, lsl #2]
   374ac:	b	3802c <__assert_fail@plt+0x239d4>
   374b0:	andeq	r7, r3, ip, lsr #30
   374b4:	andeq	r8, r3, ip, lsr #32
   374b8:	andeq	r7, r3, r8, lsr pc
   374bc:	andeq	r8, r3, ip, lsr #32
   374c0:	andeq	r7, r3, r0, ror #31
   374c4:	andeq	r7, r3, ip, ror #31
   374c8:	strdeq	r7, [r3], -r8
   374cc:	andeq	r8, r3, ip, lsr #32
   374d0:	andeq	r8, r3, ip, lsr #32
   374d4:	andeq	r8, r3, ip, lsr #32
   374d8:	andeq	r8, r3, ip, lsr #32
   374dc:	andeq	r8, r3, ip, lsr #32
   374e0:	andeq	r8, r3, ip, lsr #32
   374e4:	andeq	r8, r3, ip, lsr #32
   374e8:	andeq	r8, r3, ip, lsr #32
   374ec:	andeq	r8, r3, ip, lsr #32
   374f0:	andeq	r8, r3, ip, lsr #32
   374f4:	andeq	r8, r3, ip, lsr #32
   374f8:	andeq	r8, r3, r4
   374fc:	andeq	r8, r3, ip, lsr #32
   37500:	andeq	r8, r3, ip, lsr #32
   37504:	andeq	r8, r3, ip, lsr #32
   37508:	andeq	r8, r3, ip, lsr #32
   3750c:	andeq	r7, r3, ip, ror pc
   37510:	andeq	r8, r3, ip, lsr #32
   37514:	andeq	r8, r3, ip, lsr #32
   37518:	andeq	r8, r3, ip, lsr #32
   3751c:	andeq	r8, r3, ip, lsr #32
   37520:	andeq	r8, r3, ip, lsr #32
   37524:	andeq	r8, r3, ip, lsr #32
   37528:	andeq	r8, r3, ip, lsr #32
   3752c:	andeq	r8, r3, ip, lsr #32
   37530:	andeq	r7, r3, r8, lsl #31
   37534:	andeq	r8, r3, ip, lsr #32
   37538:	muleq	r3, r4, pc	; <UNPREDICTABLE>
   3753c:	andeq	r7, r3, r0, lsr #31
   37540:	andeq	r7, r3, ip, lsr #31
   37544:			; <UNDEFINED> instruction: 0x00037fb8
   37548:	andeq	r7, r3, r4, asr #31
   3754c:	andeq	r8, r3, ip, lsr #32
   37550:	andeq	r7, r3, r0, lsr #31
   37554:	andeq	r8, r3, ip, lsr #32
   37558:	andeq	r8, r3, ip, lsr #32
   3755c:	andeq	r8, r3, ip, lsr #32
   37560:	ldrdeq	r7, [r3], -r0
   37564:	andeq	r7, r3, r0, lsr #30
   37568:	strdeq	r7, [r3], -r0
   3756c:	andeq	r7, r3, ip, asr #30
   37570:	andeq	r8, r3, ip, lsr #32
   37574:	andeq	r8, r3, ip, lsr #32
   37578:	andeq	r7, r3, r8, asr pc
   3757c:	andeq	r8, r3, ip, lsr #32
   37580:	andeq	r7, r3, r4, ror #30
   37584:	andeq	r8, r3, ip, lsr #32
   37588:	andeq	r8, r3, ip, lsr #32
   3758c:	andeq	r7, r3, r0, ror pc
   37590:	orr	r8, r8, #2
   37594:	b	37468 <__assert_fail@plt+0x22e10>
   37598:	orr	r8, r8, #8
   3759c:	b	37468 <__assert_fail@plt+0x22e10>
   375a0:	orr	r8, r8, #1
   375a4:	b	37468 <__assert_fail@plt+0x22e10>
   375a8:	orr	r8, r8, #16
   375ac:	b	37468 <__assert_fail@plt+0x22e10>
   375b0:	orr	r8, r8, #4
   375b4:	b	37468 <__assert_fail@plt+0x22e10>
   375b8:	cmp	r6, #42	; 0x2a
   375bc:	beq	3781c <__assert_fail@plt+0x231c4>
   375c0:	sub	r6, r6, #48	; 0x30
   375c4:	uxtb	r2, r6
   375c8:	cmp	r2, #9
   375cc:	bhi	37a54 <__assert_fail@plt+0x233fc>
   375d0:	ldrb	r1, [sl, #1]
   375d4:	add	r3, sl, #1
   375d8:	sub	r2, r1, #48	; 0x30
   375dc:	uxtb	r0, r2
   375e0:	cmp	r0, #9
   375e4:	bhi	37620 <__assert_fail@plt+0x22fc8>
   375e8:	add	sl, sl, #2
   375ec:	cmp	r6, #0
   375f0:	bne	375fc <__assert_fail@plt+0x22fa4>
   375f4:	cmp	r1, #48	; 0x30
   375f8:	beq	3792c <__assert_fail@plt+0x232d4>
   375fc:	ldrb	r1, [sl]
   37600:	add	r6, r6, r6, lsl #2
   37604:	mov	r3, sl
   37608:	add	sl, sl, #1
   3760c:	add	r6, r2, r6, lsl #1
   37610:	sub	r2, r1, #48	; 0x30
   37614:	uxtb	r0, r2
   37618:	cmp	r0, #9
   3761c:	bls	375ec <__assert_fail@plt+0x22f94>
   37620:	mov	ip, #0
   37624:	str	ip, [sp, #44]	; 0x2c
   37628:	cmp	r1, #46	; 0x2e
   3762c:	beq	378a8 <__assert_fail@plt+0x23250>
   37630:	mov	ip, #0
   37634:	str	ip, [sp, #40]	; 0x28
   37638:	mvn	ip, #0
   3763c:	str	ip, [sp, #48]	; 0x30
   37640:	sub	r2, r1, #76	; 0x4c
   37644:	cmp	r2, #46	; 0x2e
   37648:	ldrls	pc, [pc, r2, lsl #2]
   3764c:	b	38ff4 <__assert_fail@plt+0x2499c>
   37650:	muleq	r3, r4, r9
   37654:	strdeq	r8, [r3], -r4
   37658:	strdeq	r8, [r3], -r4
   3765c:	strdeq	r8, [r3], -r4
   37660:	strdeq	r8, [r3], -r4
   37664:	strdeq	r8, [r3], -r4
   37668:	strdeq	r8, [r3], -r4
   3766c:	strdeq	r8, [r3], -r4
   37670:	strdeq	r8, [r3], -r4
   37674:	strdeq	r8, [r3], -r4
   37678:	strdeq	r8, [r3], -r4
   3767c:	strdeq	r8, [r3], -r4
   37680:	strdeq	r8, [r3], -r4
   37684:	strdeq	r8, [r3], -r4
   37688:	strdeq	r8, [r3], -r4
   3768c:	strdeq	r8, [r3], -r4
   37690:	strdeq	r8, [r3], -r4
   37694:	strdeq	r8, [r3], -r4
   37698:	strdeq	r8, [r3], -r4
   3769c:	strdeq	r8, [r3], -r4
   376a0:	strdeq	r8, [r3], -r4
   376a4:	strdeq	r8, [r3], -r4
   376a8:	strdeq	r8, [r3], -r4
   376ac:	strdeq	r8, [r3], -r4
   376b0:	strdeq	r8, [r3], -r4
   376b4:	strdeq	r8, [r3], -r4
   376b8:	strdeq	r8, [r3], -r4
   376bc:	strdeq	r8, [r3], -r4
   376c0:	strdeq	r7, [r3], -r8
   376c4:	strdeq	r8, [r3], -r4
   376c8:	andeq	r7, r3, r4, ror #19
   376cc:	strdeq	r8, [r3], -r4
   376d0:			; <UNDEFINED> instruction: 0x000379bc
   376d4:	strdeq	r8, [r3], -r4
   376d8:	strdeq	r8, [r3], -r4
   376dc:	strdeq	r8, [r3], -r4
   376e0:	strdeq	r8, [r3], -r4
   376e4:	strdeq	r8, [r3], -r4
   376e8:	strdeq	r8, [r3], -r4
   376ec:	strdeq	r8, [r3], -r4
   376f0:	andeq	r7, r3, r8, lsr #19
   376f4:	strdeq	r8, [r3], -r4
   376f8:	strdeq	r8, [r3], -r4
   376fc:	strdeq	r8, [r3], -r4
   37700:	strdeq	r8, [r3], -r4
   37704:	strdeq	r8, [r3], -r4
   37708:	andeq	r7, r3, r0, lsl #19
   3770c:	ldr	sl, [sp, #16]
   37710:	add	sl, sl, #1
   37714:	ldrb	r3, [sl]
   37718:	cmp	r3, #0
   3771c:	bne	37388 <__assert_fail@plt+0x22d30>
   37720:	mov	fp, r9
   37724:	ldr	r9, [sp, #12]
   37728:	cmp	r9, #0
   3772c:	beq	37a7c <__assert_fail@plt+0x23424>
   37730:	lsl	ip, r9, #2
   37734:	mov	r4, r3
   37738:	add	r0, ip, r9
   3773c:	mov	r3, fp
   37740:	add	r0, fp, r0, lsl #3
   37744:	ldr	r2, [r3, #24]
   37748:	cmn	r2, #1
   3774c:	beq	37758 <__assert_fail@plt+0x23100>
   37750:	cmp	r4, r2
   37754:	movlt	r4, r2
   37758:	ldr	r2, [r3, #28]
   3775c:	add	r3, r3, #40	; 0x28
   37760:	ldr	r1, [r3, #-8]
   37764:	cmp	r2, r1
   37768:	movlt	r2, r1
   3776c:	cmp	r4, r2
   37770:	movlt	r4, r2
   37774:	cmp	r3, r0
   37778:	bne	37744 <__assert_fail@plt+0x230ec>
   3777c:	cmp	r4, #0
   37780:	beq	37c18 <__assert_fail@plt+0x235c0>
   37784:	ldr	r3, [fp, #24]
   37788:	cmp	r3, #0
   3778c:	beq	377e4 <__assert_fail@plt+0x2318c>
   37790:	add	r3, fp, #40	; 0x28
   37794:	mov	r2, fp
   37798:	mov	r1, #0
   3779c:	b	377cc <__assert_fail@plt+0x23174>
   377a0:	ldr	r0, [r2, #12]
   377a4:	cmn	r0, #2
   377a8:	beq	37a68 <__assert_fail@plt+0x23410>
   377ac:	add	r1, r1, #1
   377b0:	cmp	r1, r9
   377b4:	beq	37a84 <__assert_fail@plt+0x2342c>
   377b8:	mov	r2, r3
   377bc:	add	r3, r3, #40	; 0x28
   377c0:	ldr	r0, [r3, #-16]
   377c4:	cmp	r0, #0
   377c8:	beq	377e4 <__assert_fail@plt+0x2318c>
   377cc:	ldr	r0, [r2, #8]
   377d0:	cmn	r0, #2
   377d4:	bne	377a0 <__assert_fail@plt+0x23148>
   377d8:	ldr	r0, [r2, #28]
   377dc:	cmp	r0, #0
   377e0:	bne	377a0 <__assert_fail@plt+0x23148>
   377e4:	add	r6, sp, #104	; 0x68
   377e8:	ldr	ip, [sp, #68]	; 0x44
   377ec:	mvn	r5, #0
   377f0:	mov	r3, #22
   377f4:	str	r3, [ip]
   377f8:	add	r3, sp, #104	; 0x68
   377fc:	cmp	r6, r3
   37800:	beq	3780c <__assert_fail@plt+0x231b4>
   37804:	mov	r0, r6
   37808:	bl	13b30 <free@plt>
   3780c:	ldr	ip, [sp, #56]	; 0x38
   37810:	cmp	fp, ip
   37814:	beq	37960 <__assert_fail@plt+0x23308>
   37818:	b	37958 <__assert_fail@plt+0x23300>
   3781c:	cmp	r7, #0
   37820:	ldrb	r1, [sl, #1]
   37824:	add	r3, sl, #1
   37828:	streq	r7, [sp, #44]	; 0x2c
   3782c:	mvneq	r6, #1
   37830:	beq	37628 <__assert_fail@plt+0x22fd0>
   37834:	sub	r2, r1, #49	; 0x31
   37838:	cmp	r2, #8
   3783c:	bhi	37c64 <__assert_fail@plt+0x2360c>
   37840:	ldrb	r2, [sl, #2]
   37844:	sub	r1, r1, #48	; 0x30
   37848:	str	r1, [sp, #44]	; 0x2c
   3784c:	add	r1, sl, #2
   37850:	sub	r3, r2, #48	; 0x30
   37854:	uxtb	r0, r3
   37858:	cmp	r0, #9
   3785c:	bhi	3788c <__assert_fail@plt+0x23234>
   37860:	ldr	r0, [sp, #44]	; 0x2c
   37864:	add	sl, sl, #3
   37868:	add	r0, r0, r0, lsl #2
   3786c:	mov	r1, sl
   37870:	ldrb	r2, [sl], #1
   37874:	add	r0, r3, r0, lsl #1
   37878:	sub	r3, r2, #48	; 0x30
   3787c:	uxtb	ip, r3
   37880:	cmp	ip, #9
   37884:	bls	37868 <__assert_fail@plt+0x23210>
   37888:	str	r0, [sp, #44]	; 0x2c
   3788c:	cmp	r2, #36	; 0x24
   37890:	bne	3792c <__assert_fail@plt+0x232d4>
   37894:	add	r3, r1, #1
   37898:	ldrb	r1, [r1, #1]
   3789c:	mvn	r6, #1
   378a0:	cmp	r1, #46	; 0x2e
   378a4:	bne	37630 <__assert_fail@plt+0x22fd8>
   378a8:	ldrb	r1, [r3, #1]
   378ac:	cmp	r1, #42	; 0x2a
   378b0:	beq	37c74 <__assert_fail@plt+0x2361c>
   378b4:	sub	r2, r1, #48	; 0x30
   378b8:	uxtb	r0, r2
   378bc:	cmp	r0, #9
   378c0:	bhi	37a1c <__assert_fail@plt+0x233c4>
   378c4:	ldrb	r1, [r3, #2]
   378c8:	add	ip, r3, #2
   378cc:	str	r2, [sp, #48]	; 0x30
   378d0:	sub	r2, r1, #48	; 0x30
   378d4:	uxtb	r0, r2
   378d8:	cmp	r0, #9
   378dc:	bhi	38c70 <__assert_fail@plt+0x24618>
   378e0:	ldr	ip, [sp, #48]	; 0x30
   378e4:	add	r0, r3, #3
   378e8:	cmp	ip, #0
   378ec:	bne	378f8 <__assert_fail@plt+0x232a0>
   378f0:	cmp	r1, #48	; 0x30
   378f4:	beq	3792c <__assert_fail@plt+0x232d4>
   378f8:	ldrb	r1, [r0]
   378fc:	add	ip, ip, ip, lsl #2
   37900:	mov	r3, r0
   37904:	add	r0, r0, #1
   37908:	add	ip, r2, ip, lsl #1
   3790c:	sub	r2, r1, #48	; 0x30
   37910:	uxtb	r5, r2
   37914:	cmp	r5, #9
   37918:	bls	378e8 <__assert_fail@plt+0x23290>
   3791c:	str	ip, [sp, #48]	; 0x30
   37920:	mov	ip, #0
   37924:	str	ip, [sp, #40]	; 0x28
   37928:	b	37640 <__assert_fail@plt+0x22fe8>
   3792c:	mov	fp, r9
   37930:	ldr	ip, [sp, #68]	; 0x44
   37934:	mov	r3, #22
   37938:	str	r3, [ip]
   3793c:	ldr	ip, [sp, #56]	; 0x38
   37940:	cmp	fp, ip
   37944:	beq	37950 <__assert_fail@plt+0x232f8>
   37948:	mov	r0, fp
   3794c:	bl	13b30 <free@plt>
   37950:	mvn	r5, #0
   37954:	mov	fp, #0
   37958:	mov	r0, fp
   3795c:	bl	13b30 <free@plt>
   37960:	ldr	ip, [sp, #52]	; 0x34
   37964:	mov	r0, r5
   37968:	ldr	r2, [sp, #804]	; 0x324
   3796c:	ldr	r3, [ip]
   37970:	cmp	r2, r3
   37974:	bne	39004 <__assert_fail@plt+0x249ac>
   37978:	add	sp, sp, #812	; 0x32c
   3797c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   37980:	mov	ip, #6
   37984:	add	sl, r3, #1
   37988:	ldrb	r1, [r3, #1]
   3798c:	str	ip, [sp, #24]
   37990:	b	374a0 <__assert_fail@plt+0x22e48>
   37994:	mov	ip, #8
   37998:	add	sl, r3, #1
   3799c:	ldrb	r1, [r3, #1]
   379a0:	str	ip, [sp, #24]
   379a4:	b	374a0 <__assert_fail@plt+0x22e48>
   379a8:	mov	ip, #7
   379ac:	add	sl, r3, #1
   379b0:	ldrb	r1, [r3, #1]
   379b4:	str	ip, [sp, #24]
   379b8:	b	374a0 <__assert_fail@plt+0x22e48>
   379bc:	ldrb	r1, [r3, #1]
   379c0:	cmp	r1, #108	; 0x6c
   379c4:	ldrbeq	r1, [r3, #2]
   379c8:	addeq	r3, r3, #1
   379cc:	moveq	ip, #4
   379d0:	movne	ip, #3
   379d4:	streq	ip, [sp, #24]
   379d8:	strne	ip, [sp, #24]
   379dc:	add	sl, r3, #1
   379e0:	b	374a0 <__assert_fail@plt+0x22e48>
   379e4:	mov	ip, #5
   379e8:	add	sl, r3, #1
   379ec:	ldrb	r1, [r3, #1]
   379f0:	str	ip, [sp, #24]
   379f4:	b	374a0 <__assert_fail@plt+0x22e48>
   379f8:	ldrb	r1, [r3, #1]
   379fc:	cmp	r1, #104	; 0x68
   37a00:	moveq	ip, #1
   37a04:	ldrbeq	r1, [r3, #2]
   37a08:	movne	ip, #2
   37a0c:	streq	ip, [sp, #24]
   37a10:	addeq	r3, r3, ip
   37a14:	strne	ip, [sp, #24]
   37a18:	b	379dc <__assert_fail@plt+0x23384>
   37a1c:	cmp	r1, #45	; 0x2d
   37a20:	add	sl, r3, #1
   37a24:	beq	37488 <__assert_fail@plt+0x22e30>
   37a28:	mov	ip, #0
   37a2c:	mov	r3, sl
   37a30:	str	ip, [sp, #40]	; 0x28
   37a34:	str	ip, [sp, #48]	; 0x30
   37a38:	b	37640 <__assert_fail@plt+0x22fe8>
   37a3c:	ldrb	r6, [r0, #1]
   37a40:	add	sl, r0, #1
   37a44:	cmp	r6, #0
   37a48:	moveq	r8, r6
   37a4c:	bne	37408 <__assert_fail@plt+0x22db0>
   37a50:	b	37478 <__assert_fail@plt+0x22e20>
   37a54:	mov	ip, #0
   37a58:	ldrb	r1, [sl]
   37a5c:	str	ip, [sp, #44]	; 0x2c
   37a60:	mvn	r6, #0
   37a64:	b	37628 <__assert_fail@plt+0x22fd0>
   37a68:	ldr	r2, [r2, #32]
   37a6c:	cmp	r2, #0
   37a70:	bne	377ac <__assert_fail@plt+0x23154>
   37a74:	b	377e4 <__assert_fail@plt+0x2318c>
   37a78:	mov	fp, ip
   37a7c:	mov	r9, #0
   37a80:	mov	r4, r9
   37a84:	ldr	r0, [sp, #60]	; 0x3c
   37a88:	bl	14094 <strlen@plt>
   37a8c:	cmp	r0, r4
   37a90:	bls	377e4 <__assert_fail@plt+0x2318c>
   37a94:	cmp	r4, #8
   37a98:	bhi	385a4 <__assert_fail@plt+0x23f4c>
   37a9c:	add	r6, sp, #104	; 0x68
   37aa0:	mov	r3, #0
   37aa4:	str	r3, [sp, #104]	; 0x68
   37aa8:	str	r3, [sp, #120]	; 0x78
   37aac:	str	r3, [sp, #136]	; 0x88
   37ab0:	str	r3, [sp, #152]	; 0x98
   37ab4:	str	r3, [sp, #168]	; 0xa8
   37ab8:	str	r3, [sp, #184]	; 0xb8
   37abc:	str	r3, [sp, #200]	; 0xc8
   37ac0:	str	r3, [sp, #216]	; 0xd8
   37ac4:	cmp	r9, #0
   37ac8:	movne	r3, fp
   37acc:	movne	r2, #0
   37ad0:	movne	ip, #6
   37ad4:	bne	37af8 <__assert_fail@plt+0x234a0>
   37ad8:	b	37b74 <__assert_fail@plt+0x2351c>
   37adc:	ldr	r1, [r3, #12]
   37ae0:	cmn	r1, #2
   37ae4:	beq	37b4c <__assert_fail@plt+0x234f4>
   37ae8:	add	r2, r2, #1
   37aec:	add	r3, r3, #40	; 0x28
   37af0:	cmp	r2, r9
   37af4:	beq	37b74 <__assert_fail@plt+0x2351c>
   37af8:	ldr	r1, [r3, #24]
   37afc:	cmn	r1, #1
   37b00:	beq	37b1c <__assert_fail@plt+0x234c4>
   37b04:	sub	r1, r1, #1
   37b08:	ldr	r0, [r6, r1, lsl #4]
   37b0c:	cmp	r0, #0
   37b10:	bne	377e8 <__assert_fail@plt+0x23190>
   37b14:	ldr	r0, [r3, #36]	; 0x24
   37b18:	str	r0, [r6, r1, lsl #4]
   37b1c:	ldr	r1, [r3, #8]
   37b20:	cmn	r1, #2
   37b24:	bne	37adc <__assert_fail@plt+0x23484>
   37b28:	ldr	r1, [r3, #28]
   37b2c:	sub	r1, r1, #1
   37b30:	ldr	r0, [r6, r1, lsl #4]
   37b34:	cmp	r0, #0
   37b38:	bne	377e8 <__assert_fail@plt+0x23190>
   37b3c:	str	ip, [r6, r1, lsl #4]
   37b40:	ldr	r1, [r3, #12]
   37b44:	cmn	r1, #2
   37b48:	bne	37ae8 <__assert_fail@plt+0x23490>
   37b4c:	ldr	r1, [r3, #32]
   37b50:	sub	r1, r1, #1
   37b54:	ldr	r0, [r6, r1, lsl #4]
   37b58:	cmp	r0, #0
   37b5c:	bne	377e8 <__assert_fail@plt+0x23190>
   37b60:	add	r2, r2, #1
   37b64:	str	ip, [r6, r1, lsl #4]
   37b68:	cmp	r2, r9
   37b6c:	add	r3, r3, #40	; 0x28
   37b70:	bne	37af8 <__assert_fail@plt+0x234a0>
   37b74:	cmp	r4, #0
   37b78:	ldr	r1, [sp, #80]	; 0x50
   37b7c:	movne	r3, #0
   37b80:	movne	r2, r3
   37b84:	movne	r0, r3
   37b88:	movne	ip, r2
   37b8c:	beq	380b0 <__assert_fail@plt+0x23a58>
   37b90:	ldr	r3, [r6, ip, lsl #4]
   37b94:	add	ip, r6, ip, lsl #4
   37b98:	sub	r3, r3, #1
   37b9c:	cmp	r3, #27
   37ba0:	ldrls	pc, [pc, r3, lsl #2]
   37ba4:	b	377e8 <__assert_fail@plt+0x23190>
   37ba8:	andeq	r8, r3, r0, lsr #4
   37bac:	andeq	r8, r3, r0, lsr #4
   37bb0:	andeq	r8, r3, r0, lsr #4
   37bb4:	andeq	r8, r3, r0, lsr r2
   37bb8:	andeq	r8, r3, r0, lsr r2
   37bbc:	muleq	r3, r4, r0
   37bc0:	muleq	r3, r4, r0
   37bc4:	muleq	r3, r4, r0
   37bc8:	muleq	r3, r4, r0
   37bcc:	andeq	r8, r3, r8, lsl #4
   37bd0:	andeq	r8, r3, r8, lsl #4
   37bd4:	andeq	r8, r3, r0, asr #4
   37bd8:	andeq	r8, r3, r0, asr #4
   37bdc:	muleq	r3, r4, r0
   37be0:	andeq	r8, r3, r8, lsl #4
   37be4:	andeq	r8, r3, r8, lsl #4
   37be8:	muleq	r3, r4, r0
   37bec:	muleq	r3, r4, r0
   37bf0:	muleq	r3, r4, r0
   37bf4:	muleq	r3, r4, r0
   37bf8:	muleq	r3, r4, r0
   37bfc:	muleq	r3, r4, r0
   37c00:	muleq	r3, r4, r0
   37c04:	muleq	r3, r4, r0
   37c08:	muleq	r3, r4, r0
   37c0c:	muleq	r3, r4, r0
   37c10:	muleq	r3, r4, r0
   37c14:	muleq	r3, r4, r0
   37c18:	add	r1, ip, r9
   37c1c:	mov	r3, fp
   37c20:	add	r1, fp, r1, lsl #3
   37c24:	ldr	r2, [r3, #8]
   37c28:	add	r3, r3, #40	; 0x28
   37c2c:	cmn	r2, #2
   37c30:	ldr	r2, [r3, #-28]	; 0xffffffe4
   37c34:	addeq	r4, r4, #1
   37c38:	streq	r4, [r3, #-12]
   37c3c:	cmn	r2, #2
   37c40:	ldr	r2, [r3, #-16]
   37c44:	addeq	r4, r4, #1
   37c48:	streq	r4, [r3, #-8]
   37c4c:	cmn	r2, #1
   37c50:	addne	r4, r4, #1
   37c54:	strne	r4, [r3, #-16]
   37c58:	cmp	r3, r1
   37c5c:	bne	37c24 <__assert_fail@plt+0x235cc>
   37c60:	b	37a84 <__assert_fail@plt+0x2342c>
   37c64:	mov	ip, #0
   37c68:	mvn	r6, #1
   37c6c:	str	ip, [sp, #44]	; 0x2c
   37c70:	b	37628 <__assert_fail@plt+0x22fd0>
   37c74:	cmp	r7, #0
   37c78:	ldrb	r1, [r3, #2]
   37c7c:	add	r2, r3, #2
   37c80:	beq	38018 <__assert_fail@plt+0x239c0>
   37c84:	sub	r0, r1, #49	; 0x31
   37c88:	cmp	r0, #8
   37c8c:	bhi	385f4 <__assert_fail@plt+0x23f9c>
   37c90:	ldrb	r0, [r3, #3]
   37c94:	sub	r1, r1, #48	; 0x30
   37c98:	str	r1, [sp, #40]	; 0x28
   37c9c:	add	r1, r3, #3
   37ca0:	sub	r2, r0, #48	; 0x30
   37ca4:	uxtb	ip, r2
   37ca8:	cmp	ip, #9
   37cac:	bhi	37cdc <__assert_fail@plt+0x23684>
   37cb0:	ldr	ip, [sp, #40]	; 0x28
   37cb4:	add	r3, r3, #4
   37cb8:	add	ip, ip, ip, lsl #2
   37cbc:	mov	r1, r3
   37cc0:	ldrb	r0, [r3], #1
   37cc4:	add	ip, r2, ip, lsl #1
   37cc8:	sub	r2, r0, #48	; 0x30
   37ccc:	uxtb	r5, r2
   37cd0:	cmp	r5, #9
   37cd4:	bls	37cb8 <__assert_fail@plt+0x23660>
   37cd8:	str	ip, [sp, #40]	; 0x28
   37cdc:	cmp	r0, #36	; 0x24
   37ce0:	bne	3792c <__assert_fail@plt+0x232d4>
   37ce4:	add	r2, r1, #1
   37ce8:	ldrb	r1, [r1, #1]
   37cec:	b	3801c <__assert_fail@plt+0x239c4>
   37cf0:	mov	ip, #2
   37cf4:	str	ip, [sp, #20]
   37cf8:	ldr	ip, [sp, #12]
   37cfc:	cmp	r4, ip
   37d00:	lslhi	ip, ip, #2
   37d04:	strhi	ip, [sp, #36]	; 0x24
   37d08:	bhi	37dac <__assert_fail@plt+0x23754>
   37d0c:	add	ip, r4, #10
   37d10:	str	ip, [sp, #32]
   37d14:	cmp	ip, r4
   37d18:	bls	3792c <__assert_fail@plt+0x232d4>
   37d1c:	mov	r0, ip
   37d20:	mov	r1, #40	; 0x28
   37d24:	bl	13974 <calloc@plt>
   37d28:	subs	fp, r0, #0
   37d2c:	beq	38b4c <__assert_fail@plt+0x244f4>
   37d30:	ldr	ip, [sp, #12]
   37d34:	cmp	ip, #0
   37d38:	beq	3808c <__assert_fail@plt+0x23a34>
   37d3c:	ldr	ip, [sp, #12]
   37d40:	mov	r5, #0
   37d44:	ldr	r0, [sp, #12]
   37d48:	str	r6, [sp, #64]	; 0x40
   37d4c:	lsl	ip, ip, #2
   37d50:	str	ip, [sp, #36]	; 0x24
   37d54:	add	r3, ip, r0
   37d58:	lsl	r3, r3, #3
   37d5c:	mov	r6, r3
   37d60:	add	r4, r9, r5
   37d64:	add	ip, fp, r5
   37d68:	add	r5, r5, #40	; 0x28
   37d6c:	ldm	r4!, {r0, r1, r2, r3}
   37d70:	cmp	r5, r6
   37d74:	stmia	ip!, {r0, r1, r2, r3}
   37d78:	ldm	r4!, {r0, r1, r2, r3}
   37d7c:	stmia	ip!, {r0, r1, r2, r3}
   37d80:	ldm	r4, {r0, r1}
   37d84:	stm	ip, {r0, r1}
   37d88:	bne	37d60 <__assert_fail@plt+0x23708>
   37d8c:	ldr	r6, [sp, #64]	; 0x40
   37d90:	ldr	ip, [sp, #56]	; 0x38
   37d94:	cmp	r9, ip
   37d98:	beq	38050 <__assert_fail@plt+0x239f8>
   37d9c:	mov	r0, r9
   37da0:	mov	r9, fp
   37da4:	bl	13b30 <free@plt>
   37da8:	ldr	r4, [sp, #32]
   37dac:	ldr	ip, [sp, #36]	; 0x24
   37db0:	ldr	r0, [sp, #12]
   37db4:	add	fp, ip, r0
   37db8:	ldr	ip, [sp, #16]
   37dbc:	rsb	r2, ip, sl
   37dc0:	ldr	ip, [sp, #20]
   37dc4:	add	r2, r2, #2
   37dc8:	str	r2, [r9, fp, lsl #3]
   37dcc:	sub	r3, ip, #1
   37dd0:	ldr	ip, [sp, #48]	; 0x30
   37dd4:	add	fp, r9, fp, lsl #3
   37dd8:	str	ip, [fp, #12]
   37ddc:	ldr	ip, [sp, #24]
   37de0:	str	r8, [fp, #4]
   37de4:	str	r6, [fp, #8]
   37de8:	str	ip, [fp, #16]
   37dec:	ldr	ip, [sp, #20]
   37df0:	str	r7, [fp, #24]
   37df4:	str	ip, [fp, #20]
   37df8:	ldr	ip, [sp, #44]	; 0x2c
   37dfc:	str	ip, [fp, #28]
   37e00:	ldr	ip, [sp, #40]	; 0x28
   37e04:	str	ip, [fp, #32]
   37e08:	cmp	r3, #17
   37e0c:	ldrls	pc, [pc, r3, lsl #2]
   37e10:	b	37f08 <__assert_fail@plt+0x238b0>
   37e14:	ldrdeq	r7, [r3], -r8
   37e18:	andeq	r7, r3, r8, lsr #29
   37e1c:	andeq	r7, r3, r8, lsr #29
   37e20:	andeq	r7, r3, r8, lsr #29
   37e24:	andeq	r7, r3, r8, lsr #29
   37e28:	andeq	r7, r3, r0, lsl #29
   37e2c:	andeq	r7, r3, r0, lsl #29
   37e30:	andeq	r7, r3, r0, lsl #29
   37e34:	andeq	r7, r3, r0, lsl #29
   37e38:	andeq	r7, r3, r0, lsl #29
   37e3c:	andeq	r7, r3, r0, lsl #29
   37e40:	andeq	r7, r3, r0, lsl #29
   37e44:	andeq	r7, r3, r0, lsl #29
   37e48:	andeq	r7, r3, r4, ror lr
   37e4c:	andeq	r7, r3, ip, asr lr
   37e50:	andeq	r7, r3, r4, lsl pc
   37e54:	andeq	r7, r3, ip, asr lr
   37e58:	andeq	r8, r3, ip, asr r0
   37e5c:	mov	r3, #14
   37e60:	str	r3, [fp, #36]	; 0x24
   37e64:	ldr	ip, [sp, #12]
   37e68:	add	ip, ip, #1
   37e6c:	str	ip, [sp, #12]
   37e70:	b	37378 <__assert_fail@plt+0x22d20>
   37e74:	mov	r3, #6
   37e78:	str	r3, [fp, #36]	; 0x24
   37e7c:	b	37e64 <__assert_fail@plt+0x2380c>
   37e80:	ldr	ip, [sp, #24]
   37e84:	cmp	ip, #3
   37e88:	beq	37e9c <__assert_fail@plt+0x23844>
   37e8c:	cmp	ip, #8
   37e90:	moveq	r3, #13
   37e94:	streq	r3, [fp, #36]	; 0x24
   37e98:	beq	37e64 <__assert_fail@plt+0x2380c>
   37e9c:	mov	r3, #12
   37ea0:	str	r3, [fp, #36]	; 0x24
   37ea4:	b	37e64 <__assert_fail@plt+0x2380c>
   37ea8:	ldr	ip, [sp, #24]
   37eac:	sub	r3, ip, #1
   37eb0:	cmp	r3, #6
   37eb4:	ldrls	pc, [pc, r3, lsl #2]
   37eb8:	b	38c14 <__assert_fail@plt+0x245bc>
   37ebc:	andeq	r8, r3, ip, lsl #12
   37ec0:	andeq	r8, r3, r0, lsl #12
   37ec4:	andeq	r8, r3, r8, lsr #13
   37ec8:	muleq	r3, ip, r6
   37ecc:	muleq	r3, r0, r6
   37ed0:	andeq	r8, r3, r4, asr #32
   37ed4:	andeq	r8, r3, r8, lsr r0
   37ed8:	ldr	ip, [sp, #24]
   37edc:	sub	r3, ip, #1
   37ee0:	cmp	r3, #6
   37ee4:	ldrls	pc, [pc, r3, lsl #2]
   37ee8:	b	37e74 <__assert_fail@plt+0x2381c>
   37eec:	andeq	r8, r3, r4, lsl #13
   37ef0:	andeq	r8, r3, r8, ror r6
   37ef4:	andeq	r8, r3, ip, ror #12
   37ef8:	andeq	r8, r3, r0, ror #12
   37efc:	andeq	r8, r3, r4, asr r6
   37f00:	andeq	r8, r3, r4, asr #32
   37f04:	andeq	r8, r3, r8, lsr r0
   37f08:	mov	r0, #0
   37f0c:	str	r0, [fp, #36]	; 0x24
   37f10:	b	37e64 <__assert_fail@plt+0x2380c>
   37f14:	mov	r3, #19
   37f18:	str	r3, [fp, #36]	; 0x24
   37f1c:	b	37e64 <__assert_fail@plt+0x2380c>
   37f20:	mov	ip, #18
   37f24:	str	ip, [sp, #20]
   37f28:	b	37cf8 <__assert_fail@plt+0x236a0>
   37f2c:	mov	ip, #13
   37f30:	str	ip, [sp, #20]
   37f34:	b	37cf8 <__assert_fail@plt+0x236a0>
   37f38:	mov	ip, #14
   37f3c:	str	ip, [sp, #20]
   37f40:	mov	ip, #3
   37f44:	str	ip, [sp, #24]
   37f48:	b	37cf8 <__assert_fail@plt+0x236a0>
   37f4c:	mov	ip, #16
   37f50:	str	ip, [sp, #20]
   37f54:	b	37cf8 <__assert_fail@plt+0x236a0>
   37f58:	mov	ip, #15
   37f5c:	str	ip, [sp, #20]
   37f60:	b	37cf8 <__assert_fail@plt+0x236a0>
   37f64:	mov	ip, #3
   37f68:	str	ip, [sp, #20]
   37f6c:	b	37cf8 <__assert_fail@plt+0x236a0>
   37f70:	mov	ip, #4
   37f74:	str	ip, [sp, #20]
   37f78:	b	37cf8 <__assert_fail@plt+0x236a0>
   37f7c:	mov	ip, #5
   37f80:	str	ip, [sp, #20]
   37f84:	b	37cf8 <__assert_fail@plt+0x236a0>
   37f88:	mov	ip, #12
   37f8c:	str	ip, [sp, #20]
   37f90:	b	37cf8 <__assert_fail@plt+0x236a0>
   37f94:	mov	ip, #14
   37f98:	str	ip, [sp, #20]
   37f9c:	b	37cf8 <__assert_fail@plt+0x236a0>
   37fa0:	mov	ip, #1
   37fa4:	str	ip, [sp, #20]
   37fa8:	b	37cf8 <__assert_fail@plt+0x236a0>
   37fac:	mov	ip, #8
   37fb0:	str	ip, [sp, #20]
   37fb4:	b	37cf8 <__assert_fail@plt+0x236a0>
   37fb8:	mov	ip, #6
   37fbc:	str	ip, [sp, #20]
   37fc0:	b	37cf8 <__assert_fail@plt+0x236a0>
   37fc4:	mov	ip, #10
   37fc8:	str	ip, [sp, #20]
   37fcc:	b	37cf8 <__assert_fail@plt+0x236a0>
   37fd0:	mov	ip, #17
   37fd4:	mvn	r7, #0
   37fd8:	str	ip, [sp, #20]
   37fdc:	b	37cf8 <__assert_fail@plt+0x236a0>
   37fe0:	mov	ip, #9
   37fe4:	str	ip, [sp, #20]
   37fe8:	b	37cf8 <__assert_fail@plt+0x236a0>
   37fec:	mov	ip, #7
   37ff0:	str	ip, [sp, #20]
   37ff4:	b	37cf8 <__assert_fail@plt+0x236a0>
   37ff8:	mov	ip, #11
   37ffc:	str	ip, [sp, #20]
   38000:	b	37cf8 <__assert_fail@plt+0x236a0>
   38004:	mov	ip, #15
   38008:	str	ip, [sp, #20]
   3800c:	mov	ip, #3
   38010:	str	ip, [sp, #24]
   38014:	b	37cf8 <__assert_fail@plt+0x236a0>
   38018:	str	r7, [sp, #40]	; 0x28
   3801c:	mvn	ip, #1
   38020:	mov	r3, r2
   38024:	str	ip, [sp, #48]	; 0x30
   38028:	b	37640 <__assert_fail@plt+0x22fe8>
   3802c:	mov	ip, #0
   38030:	str	ip, [sp, #20]
   38034:	b	37cf8 <__assert_fail@plt+0x236a0>
   38038:	mov	r3, #18
   3803c:	str	r3, [fp, #36]	; 0x24
   38040:	b	37e64 <__assert_fail@plt+0x2380c>
   38044:	mov	r3, #17
   38048:	str	r3, [fp, #36]	; 0x24
   3804c:	b	37e64 <__assert_fail@plt+0x2380c>
   38050:	mov	r9, fp
   38054:	ldr	r4, [sp, #32]
   38058:	b	37dac <__assert_fail@plt+0x23754>
   3805c:	ldr	ip, [sp, #24]
   38060:	sub	r3, ip, #1
   38064:	cmp	r3, #6
   38068:	ldrls	pc, [pc, r3, lsl #2]
   3806c:	b	38c08 <__assert_fail@plt+0x245b0>
   38070:	andeq	r8, r3, r8, asr #12
   38074:	andeq	r8, r3, ip, lsr r6
   38078:	andeq	r8, r3, r0, lsr r6
   3807c:	andeq	r8, r3, r4, lsr #12
   38080:	andeq	r8, r3, r8, lsl r6
   38084:	andeq	r8, r3, r0, asr #13
   38088:			; <UNDEFINED> instruction: 0x000386b4
   3808c:	str	ip, [sp, #36]	; 0x24
   38090:	b	37d90 <__assert_fail@plt+0x23738>
   38094:	ldr	r3, [r1]
   38098:	add	r1, r1, #4
   3809c:	str	r3, [ip, #8]
   380a0:	add	r0, r0, #1
   380a4:	cmp	r0, r4
   380a8:	mov	ip, r0
   380ac:	bne	37b90 <__assert_fail@plt+0x23538>
   380b0:	ldr	r1, [sp, #60]	; 0x3c
   380b4:	mov	sl, fp
   380b8:	mov	r8, #0
   380bc:	movw	ip, #35092	; 0x8914
   380c0:	movt	ip, #4
   380c4:	str	ip, [sp, #12]
   380c8:	mov	r7, r1
   380cc:	movw	ip, #34888	; 0x8848
   380d0:	movt	ip, #4
   380d4:	str	ip, [sp, #16]
   380d8:	movw	ip, #52429	; 0xcccd
   380dc:	movt	ip, #52428	; 0xcccc
   380e0:	str	ip, [sp, #36]	; 0x24
   380e4:	movw	ip, #34884	; 0x8844
   380e8:	movt	ip, #4
   380ec:	str	ip, [sp, #20]
   380f0:	movw	ip, #34880	; 0x8840
   380f4:	movt	ip, #4
   380f8:	str	ip, [sp, #32]
   380fc:	ldrb	r3, [r7]
   38100:	cmp	r3, #0
   38104:	beq	38b38 <__assert_fail@plt+0x244e0>
   38108:	cmp	r3, #37	; 0x25
   3810c:	addne	r7, r7, #1
   38110:	bne	380fc <__assert_fail@plt+0x23aa4>
   38114:	cmp	r7, r1
   38118:	beq	38144 <__assert_fail@plt+0x23aec>
   3811c:	rsb	r4, r1, r7
   38120:	ldr	r0, [sp, #76]	; 0x4c
   38124:	ldr	ip, [sp, #72]	; 0x48
   38128:	mov	r2, r4
   3812c:	blx	ip
   38130:	cmp	r0, #0
   38134:	bne	38434 <__assert_fail@plt+0x23ddc>
   38138:	ldr	r3, [sp, #100]	; 0x64
   3813c:	add	r4, r3, r4
   38140:	str	r4, [sp, #100]	; 0x64
   38144:	ldrb	r3, [r7, #1]
   38148:	cmp	r3, #37	; 0x25
   3814c:	beq	385c0 <__assert_fail@plt+0x23f68>
   38150:	ldr	r3, [sl]
   38154:	cmp	r9, r8
   38158:	add	r7, r7, r3
   3815c:	bls	38fd4 <__assert_fail@plt+0x2497c>
   38160:	ldr	r3, [sl, #8]
   38164:	add	r8, r8, #1
   38168:	cmn	r3, #2
   3816c:	beq	38568 <__assert_fail@plt+0x23f10>
   38170:	ldr	r3, [sl, #12]
   38174:	cmn	r3, #2
   38178:	beq	3853c <__assert_fail@plt+0x23ee4>
   3817c:	ldr	r3, [sl, #24]
   38180:	cmn	r3, #1
   38184:	beq	38520 <__assert_fail@plt+0x23ec8>
   38188:	sub	r3, r3, #-268435455	; 0xf0000001
   3818c:	ldr	r1, [sl, #36]	; 0x24
   38190:	ldr	r2, [r6, r3, lsl #4]
   38194:	add	r3, r6, r3, lsl #4
   38198:	cmp	r1, r2
   3819c:	bne	38f74 <__assert_fail@plt+0x2491c>
   381a0:	ldrd	r0, [r3, #8]
   381a4:	ldr	r2, [r3, #8]
   381a8:	strd	r0, [sp, #88]	; 0x58
   381ac:	ldr	r3, [sl, #20]
   381b0:	cmp	r3, #18
   381b4:	ldrls	pc, [pc, r3, lsl #2]
   381b8:	b	3832c <__assert_fail@plt+0x23cd4>
   381bc:	andeq	r8, r3, r0, lsl #10
   381c0:	muleq	r3, ip, r4
   381c4:	muleq	r3, ip, r4
   381c8:	muleq	r3, ip, r4
   381cc:	muleq	r3, ip, r4
   381d0:	muleq	r3, ip, r4
   381d4:	andeq	r8, r3, ip, lsr r4
   381d8:	andeq	r8, r3, ip, lsr r4
   381dc:	andeq	r8, r3, ip, lsr r4
   381e0:	andeq	r8, r3, ip, lsr r4
   381e4:	andeq	r8, r3, ip, lsr r4
   381e8:	andeq	r8, r3, ip, lsr r4
   381ec:	andeq	r8, r3, ip, lsr r4
   381f0:	andeq	r8, r3, ip, lsr r4
   381f4:	andeq	r8, r3, r8, lsr r3
   381f8:	andeq	r8, r3, ip, asr #6
   381fc:	andeq	r8, r3, ip, lsl #5
   38200:	andeq	r8, r3, ip, asr #6
   38204:	andeq	r8, r3, r8, asr r2
   38208:	add	r3, r1, #7
   3820c:	bic	r3, r3, #7
   38210:	add	r1, r3, #8
   38214:	ldrd	r2, [r3]
   38218:	strd	r2, [ip, #8]
   3821c:	b	380a0 <__assert_fail@plt+0x23a48>
   38220:	ldr	r3, [r1]
   38224:	add	r1, r1, #4
   38228:	strb	r3, [ip, #8]
   3822c:	b	380a0 <__assert_fail@plt+0x23a48>
   38230:	ldr	r3, [r1]
   38234:	add	r1, r1, #4
   38238:	strh	r3, [ip, #8]
   3823c:	b	380a0 <__assert_fail@plt+0x23a48>
   38240:	add	r1, r1, #7
   38244:	bic	r1, r1, #7
   38248:	add	r1, r1, #8
   3824c:	ldrd	r2, [r1, #-8]
   38250:	strd	r2, [ip, #8]
   38254:	b	380a0 <__assert_fail@plt+0x23a48>
   38258:	ldr	r3, [sl, #36]	; 0x24
   3825c:	sub	r3, r3, #21
   38260:	cmp	r3, #7
   38264:	ldrls	pc, [pc, r3, lsl #2]
   38268:	b	38344 <__assert_fail@plt+0x23cec>
   3826c:	andeq	r8, r3, ip, lsl #18
   38270:	andeq	r8, r3, r0, lsl #18
   38274:	andeq	r8, r3, ip, asr #13
   38278:	andeq	r8, r3, ip, asr #13
   3827c:	andeq	r8, r3, r0, lsl #17
   38280:	andeq	r8, r3, r0, lsl #17
   38284:	andeq	r8, r3, ip, asr #13
   38288:	andeq	r8, r3, ip, asr #13
   3828c:	ldr	r3, [sl, #36]	; 0x24
   38290:	cmp	r3, #19
   38294:	bne	38344 <__assert_fail@plt+0x23cec>
   38298:	add	r1, sp, #548	; 0x224
   3829c:	ldr	ip, [sp, #12]
   382a0:	add	r1, r1, #3
   382a4:	and	r0, r2, #15
   382a8:	lsrs	r2, r2, #4
   382ac:	mov	r3, r1
   382b0:	sub	r1, r1, #1
   382b4:	ldrb	r0, [ip, r0]
   382b8:	strb	r0, [r3]
   382bc:	bne	382a4 <__assert_fail@plt+0x23c4c>
   382c0:	add	r0, sp, #552	; 0x228
   382c4:	rsb	r2, r3, r0
   382c8:	cmp	r2, #7
   382cc:	bhi	382f0 <__assert_fail@plt+0x23c98>
   382d0:	mov	r2, r3
   382d4:	mov	r1, #48	; 0x30
   382d8:	sub	r3, r3, #1
   382dc:	strb	r1, [r2, #-1]
   382e0:	rsb	r2, r3, r0
   382e4:	cmp	r2, #7
   382e8:	mov	r2, r3
   382ec:	bls	382d8 <__assert_fail@plt+0x23c80>
   382f0:	sub	r1, r3, #2
   382f4:	mov	r2, #120	; 0x78
   382f8:	rsb	r4, r1, r0
   382fc:	strb	r2, [r3, #-1]
   38300:	mov	r0, #48	; 0x30
   38304:	ldr	ip, [sp, #72]	; 0x48
   38308:	strb	r0, [r3, #-2]
   3830c:	mov	r2, r4
   38310:	ldr	r0, [sp, #76]	; 0x4c
   38314:	blx	ip
   38318:	cmp	r0, #0
   3831c:	bne	38434 <__assert_fail@plt+0x23ddc>
   38320:	ldr	r3, [sp, #100]	; 0x64
   38324:	add	r4, r3, r4
   38328:	str	r4, [sp, #100]	; 0x64
   3832c:	add	sl, sl, #40	; 0x28
   38330:	mov	r1, r7
   38334:	b	380fc <__assert_fail@plt+0x23aa4>
   38338:	ldr	r3, [sl, #36]	; 0x24
   3833c:	cmp	r3, #6
   38340:	beq	388a0 <__assert_fail@plt+0x24248>
   38344:	mvn	r5, #0
   38348:	b	377f8 <__assert_fail@plt+0x231a0>
   3834c:	ldr	r3, [sl, #36]	; 0x24
   38350:	cmp	r3, #14
   38354:	bne	38344 <__assert_fail@plt+0x23cec>
   38358:	cmp	r2, #0
   3835c:	ldr	r1, [sl, #12]
   38360:	ldr	r5, [sp, #16]
   38364:	movne	r5, r2
   38368:	cmp	r1, #0
   3836c:	blt	38870 <__assert_fail@plt+0x24218>
   38370:	ldrb	r4, [r5]
   38374:	cmp	r4, #0
   38378:	beq	383a8 <__assert_fail@plt+0x23d50>
   3837c:	cmp	r1, #0
   38380:	beq	38f6c <__assert_fail@plt+0x24914>
   38384:	mov	r3, r5
   38388:	mov	r4, #0
   3838c:	b	38398 <__assert_fail@plt+0x23d40>
   38390:	cmp	r4, r1
   38394:	beq	383a8 <__assert_fail@plt+0x23d50>
   38398:	ldrb	r2, [r3, #1]!
   3839c:	add	r4, r4, #1
   383a0:	cmp	r2, #0
   383a4:	bne	38390 <__assert_fail@plt+0x23d38>
   383a8:	ldr	r3, [sl, #4]
   383ac:	tst	r3, #2
   383b0:	bne	383c8 <__assert_fail@plt+0x23d70>
   383b4:	ldr	r3, [sl, #8]
   383b8:	cmp	r3, #0
   383bc:	blt	383c8 <__assert_fail@plt+0x23d70>
   383c0:	cmp	r3, r4
   383c4:	bhi	38e30 <__assert_fail@plt+0x247d8>
   383c8:	mov	r1, r5
   383cc:	ldr	r0, [sp, #76]	; 0x4c
   383d0:	mov	r2, r4
   383d4:	ldr	ip, [sp, #72]	; 0x48
   383d8:	blx	ip
   383dc:	cmp	r0, #0
   383e0:	bne	38434 <__assert_fail@plt+0x23ddc>
   383e4:	ldr	r2, [sl, #4]
   383e8:	ldr	r3, [sp, #100]	; 0x64
   383ec:	tst	r2, #2
   383f0:	add	r3, r3, r4
   383f4:	str	r3, [sp, #100]	; 0x64
   383f8:	beq	3832c <__assert_fail@plt+0x23cd4>
   383fc:	ldr	r3, [sl, #8]
   38400:	cmp	r3, #0
   38404:	blt	3832c <__assert_fail@plt+0x23cd4>
   38408:	cmp	r4, r3
   3840c:	bcs	3832c <__assert_fail@plt+0x23cd4>
   38410:	add	r2, sp, #100	; 0x64
   38414:	rsb	r3, r4, r3
   38418:	str	r2, [sp]
   3841c:	mov	r2, #32
   38420:	ldr	r0, [sp, #72]	; 0x48
   38424:	ldr	r1, [sp, #76]	; 0x4c
   38428:	bl	370c0 <__assert_fail@plt+0x22a68>
   3842c:	cmp	r0, #0
   38430:	beq	3832c <__assert_fail@plt+0x23cd4>
   38434:	mov	r5, r0
   38438:	b	377f8 <__assert_fail@plt+0x231a0>
   3843c:	mov	ip, #0
   38440:	strb	ip, [sp, #99]	; 0x63
   38444:	ldr	r4, [sl, #36]	; 0x24
   38448:	str	r2, [sp, #88]	; 0x58
   3844c:	cmp	r4, #12
   38450:	ldrd	r0, [sp, #88]	; 0x58
   38454:	beq	386d8 <__assert_fail@plt+0x24080>
   38458:	cmp	r4, #13
   3845c:	bne	38344 <__assert_fail@plt+0x23cec>
   38460:	mov	lr, #1
   38464:	vldr	d7, [pc, #716]	; 38738 <__assert_fail@plt+0x240e0>
   38468:	sub	r3, r3, #7
   3846c:	mov	r2, #0
   38470:	strb	r2, [sp, #451]	; 0x1c3
   38474:	cmp	r3, #6
   38478:	ldrls	pc, [pc, r3, lsl #2]
   3847c:	b	38afc <__assert_fail@plt+0x244a4>
   38480:	strdeq	r8, [r3], -r0
   38484:	andeq	r8, r3, r4, ror #21
   38488:	ldrdeq	r8, [r3], -r8	; <UNPREDICTABLE>
   3848c:	andeq	r8, r3, ip, asr #21
   38490:	andeq	r8, r3, r0, asr #21
   38494:	andeq	r8, r3, r8, lsl r9
   38498:	andeq	r8, r3, r8, lsr #30
   3849c:	cmp	r3, #1
   384a0:	mov	r0, #0
   384a4:	str	r2, [sp, #88]	; 0x58
   384a8:	strb	r0, [sp, #99]	; 0x63
   384ac:	ldr	r1, [sp, #92]	; 0x5c
   384b0:	ldr	r0, [sl, #36]	; 0x24
   384b4:	beq	386ec <__assert_fail@plt+0x24094>
   384b8:	sub	r0, r0, #5
   384bc:	cmp	r0, #13
   384c0:	ldrls	pc, [pc, r0, lsl #2]
   384c4:	b	38344 <__assert_fail@plt+0x23cec>
   384c8:	andeq	r8, r3, r4, lsl fp
   384cc:	andeq	r8, r3, r4, asr #6
   384d0:	andeq	r8, r3, r0, asr #14
   384d4:	andeq	r8, r3, r4, asr #6
   384d8:	andeq	r8, r3, r0, asr #14
   384dc:	andeq	r8, r3, r4, asr #6
   384e0:	muleq	r3, r4, r8
   384e4:	andeq	r8, r3, r4, asr #6
   384e8:	andeq	r8, r3, r4, asr #6
   384ec:	andeq	r8, r3, r4, asr #6
   384f0:	andeq	r8, r3, r4, asr #6
   384f4:	muleq	r3, r4, r8
   384f8:	andeq	r8, r3, r0, asr #14
   384fc:	andeq	r8, r3, r8, lsl #22
   38500:	movw	r0, #35084	; 0x890c
   38504:	movw	r1, #34920	; 0x8868
   38508:	movw	r3, #34808	; 0x87f8
   3850c:	movt	r0, #4
   38510:	movt	r1, #4
   38514:	movw	r2, #1355	; 0x54b
   38518:	movt	r3, #4
   3851c:	bl	14658 <__assert_fail@plt>
   38520:	ldr	r2, [sl, #20]
   38524:	cmp	r2, #17
   38528:	bne	38188 <__assert_fail@plt+0x23b30>
   3852c:	ldr	r0, [sp, #84]	; 0x54
   38530:	bl	13fa4 <strerror@plt>
   38534:	mov	r2, r0
   38538:	b	381ac <__assert_fail@plt+0x23b54>
   3853c:	ldr	r3, [sl, #32]
   38540:	sub	r3, r3, #-268435455	; 0xf0000001
   38544:	ldr	r2, [r6, r3, lsl #4]
   38548:	add	r3, r6, r3, lsl #4
   3854c:	cmp	r2, #6
   38550:	bne	38fb4 <__assert_fail@plt+0x2495c>
   38554:	ldr	r3, [r3, #8]
   38558:	cmp	r3, #0
   3855c:	mvnlt	r3, #0
   38560:	str	r3, [sl, #12]
   38564:	b	3817c <__assert_fail@plt+0x23b24>
   38568:	ldr	r3, [sl, #28]
   3856c:	sub	r3, r3, #-268435455	; 0xf0000001
   38570:	ldr	r2, [r6, r3, lsl #4]
   38574:	add	r3, r6, r3, lsl #4
   38578:	cmp	r2, #6
   3857c:	bne	38f94 <__assert_fail@plt+0x2493c>
   38580:	ldr	r3, [r3, #8]
   38584:	cmp	r3, #0
   38588:	rsblt	r3, r3, #0
   3858c:	strge	r3, [sl, #8]
   38590:	ldrlt	r2, [sl, #4]
   38594:	strlt	r3, [sl, #8]
   38598:	orrlt	r3, r2, #2
   3859c:	strlt	r3, [sl, #4]
   385a0:	b	38170 <__assert_fail@plt+0x23b18>
   385a4:	mov	r0, r4
   385a8:	mov	r1, #16
   385ac:	bl	13974 <calloc@plt>
   385b0:	subs	r6, r0, #0
   385b4:	bne	37ac4 <__assert_fail@plt+0x2346c>
   385b8:	mvn	r5, #0
   385bc:	b	37804 <__assert_fail@plt+0x231ac>
   385c0:	ldr	r0, [sp, #76]	; 0x4c
   385c4:	mov	r1, r7
   385c8:	mov	r2, #1
   385cc:	ldr	ip, [sp, #72]	; 0x48
   385d0:	blx	ip
   385d4:	cmp	r0, #0
   385d8:	bne	38434 <__assert_fail@plt+0x23ddc>
   385dc:	ldr	r3, [sp, #100]	; 0x64
   385e0:	add	r7, r7, #2
   385e4:	add	r3, r3, #1
   385e8:	mov	r1, r7
   385ec:	str	r3, [sp, #100]	; 0x64
   385f0:	b	380fc <__assert_fail@plt+0x23aa4>
   385f4:	mov	ip, #0
   385f8:	str	ip, [sp, #40]	; 0x28
   385fc:	b	3801c <__assert_fail@plt+0x239c4>
   38600:	mov	r3, #5
   38604:	str	r3, [fp, #36]	; 0x24
   38608:	b	37e64 <__assert_fail@plt+0x2380c>
   3860c:	mov	r3, #3
   38610:	str	r3, [fp, #36]	; 0x24
   38614:	b	37e64 <__assert_fail@plt+0x2380c>
   38618:	mov	r0, #26
   3861c:	str	r0, [fp, #36]	; 0x24
   38620:	b	37e64 <__assert_fail@plt+0x2380c>
   38624:	mov	r3, #25
   38628:	str	r3, [fp, #36]	; 0x24
   3862c:	b	37e64 <__assert_fail@plt+0x2380c>
   38630:	mov	r3, #24
   38634:	str	r3, [fp, #36]	; 0x24
   38638:	b	37e64 <__assert_fail@plt+0x2380c>
   3863c:	mov	r3, #22
   38640:	str	r3, [fp, #36]	; 0x24
   38644:	b	37e64 <__assert_fail@plt+0x2380c>
   38648:	mov	r3, #21
   3864c:	str	r3, [fp, #36]	; 0x24
   38650:	b	37e64 <__assert_fail@plt+0x2380c>
   38654:	mov	r3, #15
   38658:	str	r3, [fp, #36]	; 0x24
   3865c:	b	37e64 <__assert_fail@plt+0x2380c>
   38660:	mov	r3, #10
   38664:	str	r3, [fp, #36]	; 0x24
   38668:	b	37e64 <__assert_fail@plt+0x2380c>
   3866c:	mov	r3, #8
   38670:	str	r3, [fp, #36]	; 0x24
   38674:	b	37e64 <__assert_fail@plt+0x2380c>
   38678:	mov	r3, #4
   3867c:	str	r3, [fp, #36]	; 0x24
   38680:	b	37e64 <__assert_fail@plt+0x2380c>
   38684:	mov	r3, #2
   38688:	str	r3, [fp, #36]	; 0x24
   3868c:	b	37e64 <__assert_fail@plt+0x2380c>
   38690:	mov	r3, #16
   38694:	str	r3, [fp, #36]	; 0x24
   38698:	b	37e64 <__assert_fail@plt+0x2380c>
   3869c:	mov	r3, #11
   386a0:	str	r3, [fp, #36]	; 0x24
   386a4:	b	37e64 <__assert_fail@plt+0x2380c>
   386a8:	mov	r3, #9
   386ac:	str	r3, [fp, #36]	; 0x24
   386b0:	b	37e64 <__assert_fail@plt+0x2380c>
   386b4:	mov	r2, #28
   386b8:	str	r2, [fp, #36]	; 0x24
   386bc:	b	37e64 <__assert_fail@plt+0x2380c>
   386c0:	mov	r1, #27
   386c4:	str	r1, [fp, #36]	; 0x24
   386c8:	b	37e64 <__assert_fail@plt+0x2380c>
   386cc:	ldr	r3, [sp, #100]	; 0x64
   386d0:	str	r3, [r2]
   386d4:	b	3832c <__assert_fail@plt+0x23cd4>
   386d8:	vmov	d7, r0, r1
   386dc:	mov	lr, ip
   386e0:	mov	r0, #0
   386e4:	mov	r1, #0
   386e8:	b	38468 <__assert_fail@plt+0x23e10>
   386ec:	sub	r0, r0, #4
   386f0:	cmp	r0, #14
   386f4:	ldrls	pc, [pc, r0, lsl #2]
   386f8:	b	38344 <__assert_fail@plt+0x23cec>
   386fc:	andeq	r8, r3, ip, lsr #22
   38700:	andeq	r8, r3, r4, asr #6
   38704:	ldrdeq	r8, [r3], -r0
   38708:	andeq	r8, r3, r4, asr #6
   3870c:	ldrdeq	r8, [r3], -r0
   38710:	andeq	r8, r3, r4, asr #6
   38714:	andeq	r8, r3, r0, lsr #22
   38718:	andeq	r8, r3, r4, asr #6
   3871c:	andeq	r8, r3, r4, asr #6
   38720:	andeq	r8, r3, r4, asr #6
   38724:	andeq	r8, r3, r4, asr #6
   38728:	andeq	r8, r3, r0, lsr #22
   3872c:	andeq	r8, r3, r4, asr #6
   38730:	andeq	r8, r3, r0, asr #14
   38734:	ldrdeq	r8, [r3], -r0
	...
   38740:	mov	r4, r2
   38744:	mov	r5, #0
   38748:	ldr	r2, [sl, #4]
   3874c:	tst	r2, #4
   38750:	beq	38c20 <__assert_fail@plt+0x245c8>
   38754:	mov	r2, #43	; 0x2b
   38758:	mov	ip, #1
   3875c:	strb	r2, [sp, #99]	; 0x63
   38760:	str	ip, [sp, #24]
   38764:	orrs	r0, r4, r5
   38768:	bne	38b54 <__assert_fail@plt+0x244fc>
   3876c:	ldr	r2, [sl, #12]
   38770:	cmp	r2, #0
   38774:	bne	38b54 <__assert_fail@plt+0x244fc>
   38778:	ldr	r3, [sl, #4]
   3877c:	add	ip, sp, #552	; 0x228
   38780:	mov	r4, r2
   38784:	and	r3, r3, #2
   38788:	mov	r5, #0
   3878c:	cmp	r3, #0
   38790:	bne	387bc <__assert_fail@plt+0x24164>
   38794:	ldr	r2, [sl, #8]
   38798:	cmp	r2, #0
   3879c:	blt	387bc <__assert_fail@plt+0x24164>
   387a0:	ldr	r1, [sp, #24]
   387a4:	rsb	r3, r1, r2
   387a8:	cmp	r3, r4
   387ac:	bls	387bc <__assert_fail@plt+0x24164>
   387b0:	rsb	r3, r4, r3
   387b4:	cmp	r3, r5
   387b8:	bcs	38f34 <__assert_fail@plt+0x248dc>
   387bc:	ldrb	r3, [sp, #99]	; 0x63
   387c0:	cmp	r3, #0
   387c4:	bne	38c3c <__assert_fail@plt+0x245e4>
   387c8:	ldr	r3, [sl, #4]
   387cc:	tst	r3, #16
   387d0:	beq	387e4 <__assert_fail@plt+0x2418c>
   387d4:	ldr	r1, [sl, #20]
   387d8:	sub	r3, r1, #4
   387dc:	cmp	r3, #1
   387e0:	bls	38e84 <__assert_fail@plt+0x2482c>
   387e4:	cmp	r5, #0
   387e8:	beq	38818 <__assert_fail@plt+0x241c0>
   387ec:	add	r3, sp, #100	; 0x64
   387f0:	ldr	r0, [sp, #72]	; 0x48
   387f4:	str	r3, [sp]
   387f8:	mov	r2, #48	; 0x30
   387fc:	ldr	r1, [sp, #76]	; 0x4c
   38800:	mov	r3, r5
   38804:	str	ip, [sp, #8]
   38808:	bl	370c0 <__assert_fail@plt+0x22a68>
   3880c:	ldr	ip, [sp, #8]
   38810:	cmp	r0, #0
   38814:	bne	38434 <__assert_fail@plt+0x23ddc>
   38818:	mov	r1, ip
   3881c:	ldr	r0, [sp, #76]	; 0x4c
   38820:	mov	r2, r4
   38824:	ldr	ip, [sp, #72]	; 0x48
   38828:	blx	ip
   3882c:	cmp	r0, #0
   38830:	bne	38434 <__assert_fail@plt+0x23ddc>
   38834:	ldr	r2, [sl, #4]
   38838:	ldr	r3, [sp, #100]	; 0x64
   3883c:	tst	r2, #2
   38840:	add	r3, r3, r4
   38844:	str	r3, [sp, #100]	; 0x64
   38848:	beq	3832c <__assert_fail@plt+0x23cd4>
   3884c:	ldr	r3, [sl, #8]
   38850:	cmp	r3, #0
   38854:	blt	3832c <__assert_fail@plt+0x23cd4>
   38858:	ldr	ip, [sp, #24]
   3885c:	rsb	r3, ip, r3
   38860:	rsb	r3, r5, r3
   38864:	cmp	r3, r4
   38868:	bls	3832c <__assert_fail@plt+0x23cd4>
   3886c:	b	38410 <__assert_fail@plt+0x23db8>
   38870:	mov	r0, r5
   38874:	bl	14094 <strlen@plt>
   38878:	mov	r4, r0
   3887c:	b	383a8 <__assert_fail@plt+0x23d50>
   38880:	ldr	r3, [sp, #100]	; 0x64
   38884:	mov	r1, #0
   38888:	str	r1, [r2, #4]
   3888c:	str	r3, [r2]
   38890:	b	3832c <__assert_fail@plt+0x23cd4>
   38894:	mov	r4, r2
   38898:	mov	r5, r1
   3889c:	b	38748 <__assert_fail@plt+0x240f0>
   388a0:	add	r1, sp, #808	; 0x328
   388a4:	ldr	r0, [sp, #76]	; 0x4c
   388a8:	ldr	ip, [sp, #72]	; 0x48
   388ac:	strb	r2, [r1, #-356]!	; 0xfffffe9c
   388b0:	mov	r2, #1
   388b4:	blx	ip
   388b8:	cmp	r0, #0
   388bc:	bne	38434 <__assert_fail@plt+0x23ddc>
   388c0:	ldr	r3, [sp, #100]	; 0x64
   388c4:	add	r3, r3, #1
   388c8:	str	r3, [sp, #100]	; 0x64
   388cc:	b	3832c <__assert_fail@plt+0x23cd4>
   388d0:	asr	r5, r2, #31
   388d4:	mov	r4, r2
   388d8:	cmp	r4, #0
   388dc:	sbcs	r1, r5, #0
   388e0:	bge	38748 <__assert_fail@plt+0x240f0>
   388e4:	mov	r2, #45	; 0x2d
   388e8:	mov	ip, #1
   388ec:	rsbs	r4, r4, #0
   388f0:	rsc	r5, r5, #0
   388f4:	strb	r2, [sp, #99]	; 0x63
   388f8:	str	ip, [sp, #24]
   388fc:	b	38764 <__assert_fail@plt+0x2410c>
   38900:	ldr	r3, [sp, #100]	; 0x64
   38904:	strh	r3, [r2]
   38908:	b	3832c <__assert_fail@plt+0x23cd4>
   3890c:	ldr	r3, [sp, #100]	; 0x64
   38910:	strb	r3, [r2]
   38914:	b	3832c <__assert_fail@plt+0x23cd4>
   38918:	mov	r3, #97	; 0x61
   3891c:	strb	r3, [sp, #450]	; 0x1c2
   38920:	cmp	lr, #0
   38924:	addne	ip, sp, #432	; 0x1b0
   38928:	addeq	r3, sp, #432	; 0x1b0
   3892c:	movne	r3, #76	; 0x4c
   38930:	addne	r2, ip, #17
   38934:	strbne	r3, [sp, #449]	; 0x1c1
   38938:	addeq	r2, r3, #18
   3893c:	ldr	ip, [sl, #12]
   38940:	cmn	ip, #1
   38944:	beq	3898c <__assert_fail@plt+0x24334>
   38948:	strd	r0, [sp, #24]
   3894c:	cmp	ip, #100	; 0x64
   38950:	movge	ip, #100	; 0x64
   38954:	ldr	r0, [sp, #36]	; 0x24
   38958:	sub	r2, r2, #1
   3895c:	umull	r1, r3, r0, ip
   38960:	mov	r4, r2
   38964:	lsr	r3, r3, #3
   38968:	add	r1, r3, r3, lsl #2
   3896c:	sub	r1, ip, r1, lsl #1
   38970:	subs	ip, r3, #0
   38974:	add	r1, r1, #48	; 0x30
   38978:	strb	r1, [r2], #-1
   3897c:	bne	3895c <__assert_fail@plt+0x24304>
   38980:	ldrd	r0, [sp, #24]
   38984:	mov	r3, #46	; 0x2e
   38988:	strb	r3, [r4, #-1]
   3898c:	ldr	r3, [sl, #4]
   38990:	add	r5, sp, #452	; 0x1c4
   38994:	tst	r3, #16
   38998:	movne	r3, #35	; 0x23
   3899c:	strbne	r3, [r2, #-1]
   389a0:	subne	r2, r2, #1
   389a4:	mov	r3, #37	; 0x25
   389a8:	cmp	lr, #0
   389ac:	strb	r3, [r2, #-1]
   389b0:	sub	r3, r2, #1
   389b4:	strdne	r0, [sp]
   389b8:	vstreq	d7, [sp]
   389bc:	movw	r2, #350	; 0x15e
   389c0:	mov	r1, #1
   389c4:	mov	r0, r5
   389c8:	bl	14178 <__sprintf_chk@plt>
   389cc:	mov	r0, r5
   389d0:	bl	14094 <strlen@plt>
   389d4:	ldrb	r2, [sp, #452]	; 0x1c4
   389d8:	cmp	r2, #45	; 0x2d
   389dc:	add	ip, r5, r0
   389e0:	mov	r4, r0
   389e4:	str	ip, [sp, #24]
   389e8:	beq	38c94 <__assert_fail@plt+0x2463c>
   389ec:	ldr	r3, [sl, #4]
   389f0:	tst	r3, #4
   389f4:	beq	38c78 <__assert_fail@plt+0x24620>
   389f8:	mov	ip, r5
   389fc:	mov	r5, #1
   38a00:	mov	r2, #43	; 0x2b
   38a04:	strb	r2, [sp, #99]	; 0x63
   38a08:	tst	r3, #2
   38a0c:	bne	38a28 <__assert_fail@plt+0x243d0>
   38a10:	ldr	r3, [sl, #8]
   38a14:	cmp	r3, #0
   38a18:	blt	38a28 <__assert_fail@plt+0x243d0>
   38a1c:	rsb	r3, r5, r3
   38a20:	cmp	r3, r4
   38a24:	bhi	38ef4 <__assert_fail@plt+0x2489c>
   38a28:	cmp	r2, #0
   38a2c:	beq	38a60 <__assert_fail@plt+0x24408>
   38a30:	str	ip, [sp, #8]
   38a34:	add	r1, sp, #99	; 0x63
   38a38:	ldr	r0, [sp, #76]	; 0x4c
   38a3c:	mov	r2, #1
   38a40:	ldr	r3, [sp, #72]	; 0x48
   38a44:	blx	r3
   38a48:	ldr	ip, [sp, #8]
   38a4c:	cmp	r0, #0
   38a50:	bne	38434 <__assert_fail@plt+0x23ddc>
   38a54:	ldr	r3, [sp, #100]	; 0x64
   38a58:	add	r3, r3, #1
   38a5c:	str	r3, [sp, #100]	; 0x64
   38a60:	ldr	r0, [sp, #24]
   38a64:	mov	r1, ip
   38a68:	rsb	r3, ip, r0
   38a6c:	ldr	r0, [sp, #76]	; 0x4c
   38a70:	str	r3, [sp, #8]
   38a74:	mov	r2, r3
   38a78:	ldr	ip, [sp, #72]	; 0x48
   38a7c:	blx	ip
   38a80:	ldr	r3, [sp, #8]
   38a84:	cmp	r0, #0
   38a88:	bne	38434 <__assert_fail@plt+0x23ddc>
   38a8c:	ldr	r1, [sl, #4]
   38a90:	ldr	r2, [sp, #100]	; 0x64
   38a94:	tst	r1, #2
   38a98:	add	r3, r2, r3
   38a9c:	str	r3, [sp, #100]	; 0x64
   38aa0:	beq	3832c <__assert_fail@plt+0x23cd4>
   38aa4:	ldr	r3, [sl, #8]
   38aa8:	cmp	r3, #0
   38aac:	blt	3832c <__assert_fail@plt+0x23cd4>
   38ab0:	rsb	r3, r5, r3
   38ab4:	cmp	r4, r3
   38ab8:	bcs	3832c <__assert_fail@plt+0x23cd4>
   38abc:	b	38410 <__assert_fail@plt+0x23db8>
   38ac0:	mov	r3, #71	; 0x47
   38ac4:	strb	r3, [sp, #450]	; 0x1c2
   38ac8:	b	38920 <__assert_fail@plt+0x242c8>
   38acc:	mov	r3, #103	; 0x67
   38ad0:	strb	r3, [sp, #450]	; 0x1c2
   38ad4:	b	38920 <__assert_fail@plt+0x242c8>
   38ad8:	mov	r3, #69	; 0x45
   38adc:	strb	r3, [sp, #450]	; 0x1c2
   38ae0:	b	38920 <__assert_fail@plt+0x242c8>
   38ae4:	mov	r3, #101	; 0x65
   38ae8:	strb	r3, [sp, #450]	; 0x1c2
   38aec:	b	38920 <__assert_fail@plt+0x242c8>
   38af0:	mov	r3, #70	; 0x46
   38af4:	strb	r3, [sp, #450]	; 0x1c2
   38af8:	b	38920 <__assert_fail@plt+0x242c8>
   38afc:	mov	r3, #102	; 0x66
   38b00:	strb	r3, [sp, #450]	; 0x1c2
   38b04:	b	38920 <__assert_fail@plt+0x242c8>
   38b08:	mov	r4, r2
   38b0c:	asr	r5, r2, #31
   38b10:	b	38748 <__assert_fail@plt+0x240f0>
   38b14:	uxth	r4, r2
   38b18:	mov	r5, #0
   38b1c:	b	38748 <__assert_fail@plt+0x240f0>
   38b20:	mov	r4, r2
   38b24:	mov	r5, r1
   38b28:	b	388d8 <__assert_fail@plt+0x24280>
   38b2c:	sxth	r4, r2
   38b30:	asr	r5, r4, #31
   38b34:	b	388d8 <__assert_fail@plt+0x24280>
   38b38:	subs	r2, r7, r1
   38b3c:	str	r7, [sp, #60]	; 0x3c
   38b40:	bne	38d98 <__assert_fail@plt+0x24740>
   38b44:	mov	r5, #0
   38b48:	b	377f8 <__assert_fail@plt+0x231a0>
   38b4c:	mov	fp, r9
   38b50:	b	3793c <__assert_fail@plt+0x232e4>
   38b54:	bic	r2, r3, #2
   38b58:	cmp	r2, #1
   38b5c:	beq	38cac <__assert_fail@plt+0x24654>
   38b60:	cmp	r3, #2
   38b64:	beq	38db0 <__assert_fail@plt+0x24758>
   38b68:	cmp	r3, #4
   38b6c:	movw	r1, #34860	; 0x882c
   38b70:	movt	r1, #4
   38b74:	movw	r2, #34840	; 0x8818
   38b78:	movt	r2, #4
   38b7c:	movne	r3, r1
   38b80:	add	r1, sp, #548	; 0x224
   38b84:	add	r1, r1, #3
   38b88:	moveq	r3, r2
   38b8c:	and	r0, r4, #15
   38b90:	lsr	r2, r4, #4
   38b94:	lsr	ip, r5, #4
   38b98:	orr	r2, r2, r5, lsl #28
   38b9c:	ldrb	r0, [r3, r0]
   38ba0:	mov	r5, ip
   38ba4:	mov	r4, r2
   38ba8:	orrs	ip, r4, r5
   38bac:	mov	ip, r1
   38bb0:	strb	r0, [ip]
   38bb4:	sub	r1, r1, #1
   38bb8:	bne	38b8c <__assert_fail@plt+0x24534>
   38bbc:	ldr	r3, [sl, #4]
   38bc0:	add	r4, sp, #552	; 0x228
   38bc4:	ldr	r2, [sl, #12]
   38bc8:	rsb	r4, ip, r4
   38bcc:	tst	r3, #16
   38bd0:	ldrne	r0, [sp, #24]
   38bd4:	addne	r0, r0, #2
   38bd8:	strne	r0, [sp, #24]
   38bdc:	tst	r3, #32
   38be0:	beq	38bec <__assert_fail@plt+0x24594>
   38be4:	cmn	r2, #1
   38be8:	beq	38e58 <__assert_fail@plt+0x24800>
   38bec:	cmp	r2, #0
   38bf0:	ble	38784 <__assert_fail@plt+0x2412c>
   38bf4:	cmp	r2, r4
   38bf8:	bls	38784 <__assert_fail@plt+0x2412c>
   38bfc:	rsb	r5, r4, r2
   38c00:	and	r3, r3, #2
   38c04:	b	3878c <__assert_fail@plt+0x24134>
   38c08:	mov	r3, #23
   38c0c:	str	r3, [fp, #36]	; 0x24
   38c10:	b	37e64 <__assert_fail@plt+0x2380c>
   38c14:	mov	r3, #7
   38c18:	str	r3, [fp, #36]	; 0x24
   38c1c:	b	37e64 <__assert_fail@plt+0x2380c>
   38c20:	ands	r2, r2, #8
   38c24:	streq	r2, [sp, #24]
   38c28:	movne	r2, #32
   38c2c:	movne	ip, #1
   38c30:	strbne	r2, [sp, #99]	; 0x63
   38c34:	strne	ip, [sp, #24]
   38c38:	b	38764 <__assert_fail@plt+0x2410c>
   38c3c:	str	ip, [sp, #8]
   38c40:	add	r1, sp, #99	; 0x63
   38c44:	ldr	r0, [sp, #76]	; 0x4c
   38c48:	mov	r2, #1
   38c4c:	ldr	r3, [sp, #72]	; 0x48
   38c50:	blx	r3
   38c54:	ldr	ip, [sp, #8]
   38c58:	cmp	r0, #0
   38c5c:	bne	38434 <__assert_fail@plt+0x23ddc>
   38c60:	ldr	r3, [sp, #100]	; 0x64
   38c64:	add	r3, r3, #1
   38c68:	str	r3, [sp, #100]	; 0x64
   38c6c:	b	387c8 <__assert_fail@plt+0x24170>
   38c70:	mov	r3, ip
   38c74:	b	37920 <__assert_fail@plt+0x232c8>
   38c78:	tst	r3, #8
   38c7c:	bne	38ed4 <__assert_fail@plt+0x2487c>
   38c80:	ldrb	r2, [sp, #99]	; 0x63
   38c84:	mov	ip, r5
   38c88:	adds	r5, r2, #0
   38c8c:	movne	r5, #1
   38c90:	b	38a08 <__assert_fail@plt+0x243b0>
   38c94:	strb	r2, [sp, #99]	; 0x63
   38c98:	add	ip, r5, #1
   38c9c:	sub	r4, r0, #1
   38ca0:	ldr	r3, [sl, #4]
   38ca4:	mov	r5, #1
   38ca8:	b	38a08 <__assert_fail@plt+0x243b0>
   38cac:	mov	r0, r2
   38cb0:	bfi	r0, r2, #16, #16
   38cb4:	add	ip, sp, #552	; 0x228
   38cb8:	mvn	r1, #0
   38cbc:	str	ip, [sp, #68]	; 0x44
   38cc0:	str	r1, [sp, #44]	; 0x2c
   38cc4:	bl	143dc <nl_langinfo@plt>
   38cc8:	add	ip, sp, #552	; 0x228
   38ccc:	str	r6, [sp, #48]	; 0x30
   38cd0:	str	r9, [sp, #60]	; 0x3c
   38cd4:	str	r8, [sp, #64]	; 0x40
   38cd8:	mov	r6, ip
   38cdc:	mov	r8, sl
   38ce0:	ldr	r9, [sp, #44]	; 0x2c
   38ce4:	mov	sl, r7
   38ce8:	str	r0, [sp, #40]	; 0x28
   38cec:	b	38d38 <__assert_fail@plt+0x246e0>
   38cf0:	mov	r0, r4
   38cf4:	mov	r1, r5
   38cf8:	mov	r2, #10
   38cfc:	mov	r3, #0
   38d00:	bl	3fb74 <__assert_fail@plt+0x2b51c>
   38d04:	mov	r0, r4
   38d08:	mov	r1, r5
   38d0c:	mov	r3, #0
   38d10:	sub	r7, r6, #1
   38d14:	add	r2, r2, #48	; 0x30
   38d18:	strb	r2, [r6, #-1]
   38d1c:	mov	r2, #10
   38d20:	bl	3fb74 <__assert_fail@plt+0x2b51c>
   38d24:	mov	r4, r0
   38d28:	mov	r5, r1
   38d2c:	orrs	r0, r4, r5
   38d30:	beq	38d6c <__assert_fail@plt+0x24714>
   38d34:	mov	r6, r7
   38d38:	ldr	r3, [r8, #4]
   38d3c:	tst	r3, #1
   38d40:	beq	38cf0 <__assert_fail@plt+0x24698>
   38d44:	add	r9, r9, #1
   38d48:	cmp	r9, #3
   38d4c:	bne	38cf0 <__assert_fail@plt+0x24698>
   38d50:	ldr	ip, [sp, #40]	; 0x28
   38d54:	ldrb	r3, [ip]
   38d58:	cmp	r3, #0
   38d5c:	strbne	r3, [r6, #-1]
   38d60:	subne	r6, r6, #1
   38d64:	movne	r9, #0
   38d68:	b	38cf0 <__assert_fail@plt+0x24698>
   38d6c:	ldr	r1, [sp, #68]	; 0x44
   38d70:	mov	ip, r7
   38d74:	mov	r7, sl
   38d78:	mov	sl, r8
   38d7c:	ldr	r6, [sp, #48]	; 0x30
   38d80:	rsb	r4, ip, r1
   38d84:	ldr	r9, [sp, #60]	; 0x3c
   38d88:	ldr	r8, [sp, #64]	; 0x40
   38d8c:	ldr	r3, [sl, #4]
   38d90:	ldr	r2, [sl, #12]
   38d94:	b	38bdc <__assert_fail@plt+0x24584>
   38d98:	ldr	r0, [sp, #76]	; 0x4c
   38d9c:	ldr	ip, [sp, #72]	; 0x48
   38da0:	blx	ip
   38da4:	subs	r5, r0, #0
   38da8:	bne	377f8 <__assert_fail@plt+0x231a0>
   38dac:	b	38b44 <__assert_fail@plt+0x244ec>
   38db0:	add	r2, sp, #548	; 0x224
   38db4:	add	r2, r2, #3
   38db8:	lsr	r3, r4, #3
   38dbc:	lsr	r0, r5, #3
   38dc0:	orr	r3, r3, r5, lsl #29
   38dc4:	mov	ip, r2
   38dc8:	and	r1, r4, #7
   38dcc:	mov	r5, r0
   38dd0:	mov	r4, r3
   38dd4:	orrs	r2, r4, r5
   38dd8:	add	r1, r1, #48	; 0x30
   38ddc:	sub	r2, ip, #1
   38de0:	strb	r1, [ip]
   38de4:	bne	38db8 <__assert_fail@plt+0x24760>
   38de8:	ldr	r3, [sl, #4]
   38dec:	mov	r0, ip
   38df0:	add	r4, sp, #552	; 0x228
   38df4:	tst	r3, #16
   38df8:	beq	38ec8 <__assert_fail@plt+0x24870>
   38dfc:	cmp	r1, #48	; 0x30
   38e00:	beq	38ec8 <__assert_fail@plt+0x24870>
   38e04:	mov	r3, #48	; 0x30
   38e08:	mov	ip, r2
   38e0c:	strb	r3, [r0, #-1]
   38e10:	rsb	r4, r2, r4
   38e14:	ldr	r3, [sl, #4]
   38e18:	ldr	r2, [sl, #12]
   38e1c:	b	38bdc <__assert_fail@plt+0x24584>
   38e20:	add	ip, sp, #232	; 0xe8
   38e24:	str	ip, [sp, #56]	; 0x38
   38e28:	mov	fp, ip
   38e2c:	b	37930 <__assert_fail@plt+0x232d8>
   38e30:	add	r2, sp, #100	; 0x64
   38e34:	rsb	r3, r4, r3
   38e38:	str	r2, [sp]
   38e3c:	mov	r2, #32
   38e40:	ldr	r0, [sp, #72]	; 0x48
   38e44:	ldr	r1, [sp, #76]	; 0x4c
   38e48:	bl	370c0 <__assert_fail@plt+0x22a68>
   38e4c:	cmp	r0, #0
   38e50:	beq	383c8 <__assert_fail@plt+0x23d70>
   38e54:	b	38434 <__assert_fail@plt+0x23ddc>
   38e58:	ands	r3, r3, #2
   38e5c:	bne	38eec <__assert_fail@plt+0x24894>
   38e60:	cmp	r4, #0
   38e64:	beq	38f64 <__assert_fail@plt+0x2490c>
   38e68:	ldr	r2, [sl, #8]
   38e6c:	ldr	r0, [sp, #24]
   38e70:	rsb	r1, r0, r2
   38e74:	cmp	r1, r4
   38e78:	rsbhi	r5, r4, r1
   38e7c:	movls	r5, r3
   38e80:	b	38798 <__assert_fail@plt+0x24140>
   38e84:	ldr	r2, [sp, #32]
   38e88:	cmp	r1, #4
   38e8c:	ldr	r0, [sp, #20]
   38e90:	str	ip, [sp, #8]
   38e94:	moveq	r0, r2
   38e98:	ldr	r3, [sp, #72]	; 0x48
   38e9c:	mov	r1, r0
   38ea0:	mov	r2, #2
   38ea4:	ldr	r0, [sp, #76]	; 0x4c
   38ea8:	blx	r3
   38eac:	ldr	ip, [sp, #8]
   38eb0:	cmp	r0, #0
   38eb4:	bne	38434 <__assert_fail@plt+0x23ddc>
   38eb8:	ldr	r3, [sp, #100]	; 0x64
   38ebc:	add	r3, r3, #2
   38ec0:	str	r3, [sp, #100]	; 0x64
   38ec4:	b	387e4 <__assert_fail@plt+0x2418c>
   38ec8:	ldr	r2, [sl, #12]
   38ecc:	rsb	r4, ip, r4
   38ed0:	b	38bdc <__assert_fail@plt+0x24584>
   38ed4:	mov	r1, #32
   38ed8:	mov	ip, r5
   38edc:	mov	r2, r1
   38ee0:	mov	r5, #1
   38ee4:	strb	r1, [sp, #99]	; 0x63
   38ee8:	b	38a08 <__assert_fail@plt+0x243b0>
   38eec:	mov	r5, #0
   38ef0:	b	387bc <__assert_fail@plt+0x24164>
   38ef4:	add	r2, sp, #100	; 0x64
   38ef8:	rsb	r3, r4, r3
   38efc:	str	r2, [sp]
   38f00:	mov	r2, #32
   38f04:	ldr	r0, [sp, #72]	; 0x48
   38f08:	ldr	r1, [sp, #76]	; 0x4c
   38f0c:	str	ip, [sp, #8]
   38f10:	bl	370c0 <__assert_fail@plt+0x22a68>
   38f14:	ldr	ip, [sp, #8]
   38f18:	cmp	r0, #0
   38f1c:	bne	38434 <__assert_fail@plt+0x23ddc>
   38f20:	ldrb	r2, [sp, #99]	; 0x63
   38f24:	b	38a28 <__assert_fail@plt+0x243d0>
   38f28:	mov	r3, #65	; 0x41
   38f2c:	strb	r3, [sp, #450]	; 0x1c2
   38f30:	b	38920 <__assert_fail@plt+0x242c8>
   38f34:	add	r2, sp, #100	; 0x64
   38f38:	rsb	r3, r5, r3
   38f3c:	str	r2, [sp]
   38f40:	mov	r2, #32
   38f44:	ldr	r0, [sp, #72]	; 0x48
   38f48:	ldr	r1, [sp, #76]	; 0x4c
   38f4c:	str	ip, [sp, #8]
   38f50:	bl	370c0 <__assert_fail@plt+0x22a68>
   38f54:	ldr	ip, [sp, #8]
   38f58:	cmp	r0, #0
   38f5c:	beq	387bc <__assert_fail@plt+0x24164>
   38f60:	b	38434 <__assert_fail@plt+0x23ddc>
   38f64:	mov	r5, r4
   38f68:	b	38794 <__assert_fail@plt+0x2413c>
   38f6c:	mov	r4, r1
   38f70:	b	383a8 <__assert_fail@plt+0x23d50>
   38f74:	movw	r0, #35040	; 0x88e0
   38f78:	movw	r1, #34920	; 0x8868
   38f7c:	movw	r3, #34808	; 0x87f8
   38f80:	movt	r0, #4
   38f84:	movt	r1, #4
   38f88:	movw	r2, #1349	; 0x545
   38f8c:	movt	r3, #4
   38f90:	bl	14658 <__assert_fail@plt>
   38f94:	movw	r0, #34940	; 0x887c
   38f98:	movw	r1, #34920	; 0x8868
   38f9c:	movw	r3, #34808	; 0x87f8
   38fa0:	movt	r0, #4
   38fa4:	movt	r1, #4
   38fa8:	movw	r2, #1329	; 0x531
   38fac:	movt	r3, #4
   38fb0:	bl	14658 <__assert_fail@plt>
   38fb4:	movw	r0, #34988	; 0x88ac
   38fb8:	movw	r1, #34920	; 0x8868
   38fbc:	movw	r3, #34808	; 0x87f8
   38fc0:	movt	r0, #4
   38fc4:	movt	r1, #4
   38fc8:	movw	r2, #1339	; 0x53b
   38fcc:	movt	r3, #4
   38fd0:	bl	14658 <__assert_fail@plt>
   38fd4:	movw	r0, #34896	; 0x8850
   38fd8:	movw	r1, #34920	; 0x8868
   38fdc:	movw	r3, #34808	; 0x87f8
   38fe0:	movt	r0, #4
   38fe4:	movt	r1, #4
   38fe8:	movw	r2, #1323	; 0x52b
   38fec:	movt	r3, #4
   38ff0:	bl	14658 <__assert_fail@plt>
   38ff4:	mov	ip, #0
   38ff8:	mov	sl, r3
   38ffc:	str	ip, [sp, #24]
   39000:	b	374a0 <__assert_fail@plt+0x22e48>
   39004:	bl	13cec <__stack_chk_fail@plt>
   39008:	push	{r0, r1, r2, r3}
   3900c:	movw	r1, #47304	; 0xb8c8
   39010:	push	{r4, lr}
   39014:	movw	r4, #47296	; 0xb8c0
   39018:	movt	r4, #5
   3901c:	sub	sp, sp, #8
   39020:	add	ip, sp, #20
   39024:	movt	r1, #5
   39028:	ldr	lr, [r4]
   3902c:	movw	r0, #29032	; 0x7168
   39030:	ldr	r2, [sp, #16]
   39034:	mov	r3, ip
   39038:	ldr	r1, [r1]
   3903c:	movt	r0, #3
   39040:	str	lr, [sp, #4]
   39044:	str	ip, [sp]
   39048:	bl	372f8 <__assert_fail@plt+0x22ca0>
   3904c:	ldr	r2, [sp, #4]
   39050:	ldr	r3, [r4]
   39054:	cmp	r2, r3
   39058:	bne	3906c <__assert_fail@plt+0x24a14>
   3905c:	add	sp, sp, #8
   39060:	pop	{r4, lr}
   39064:	add	sp, sp, #16
   39068:	bx	lr
   3906c:	bl	13cec <__stack_chk_fail@plt>
   39070:	push	{r1, r2, r3}
   39074:	mov	r1, r0
   39078:	push	{r4, lr}
   3907c:	movw	r4, #47296	; 0xb8c0
   39080:	movt	r4, #5
   39084:	sub	sp, sp, #12
   39088:	add	ip, sp, #24
   3908c:	movw	r0, #29032	; 0x7168
   39090:	ldr	lr, [r4]
   39094:	movt	r0, #3
   39098:	ldr	r2, [sp, #20]
   3909c:	mov	r3, ip
   390a0:	str	ip, [sp]
   390a4:	str	lr, [sp, #4]
   390a8:	bl	372f8 <__assert_fail@plt+0x22ca0>
   390ac:	ldr	r2, [sp, #4]
   390b0:	ldr	r3, [r4]
   390b4:	cmp	r2, r3
   390b8:	bne	390cc <__assert_fail@plt+0x24a74>
   390bc:	add	sp, sp, #12
   390c0:	pop	{r4, lr}
   390c4:	add	sp, sp, #12
   390c8:	bx	lr
   390cc:	bl	13cec <__stack_chk_fail@plt>
   390d0:	mov	ip, r1
   390d4:	mov	r3, r2
   390d8:	mov	r1, r0
   390dc:	mov	r2, ip
   390e0:	movw	r0, #29032	; 0x7168
   390e4:	movt	r0, #3
   390e8:	b	372f8 <__assert_fail@plt+0x22ca0>
   390ec:	push	{r4, r5, r6, lr}
   390f0:	movw	r4, #47296	; 0xb8c0
   390f4:	movt	r4, #5
   390f8:	sub	sp, sp, #24
   390fc:	mov	r5, r1
   39100:	cmp	r5, #0
   39104:	ldr	ip, [r4]
   39108:	mov	r6, r0
   3910c:	add	r1, sp, #4
   39110:	movw	r0, #29068	; 0x718c
   39114:	movt	r0, #3
   39118:	movne	lr, r6
   3911c:	moveq	lr, #0
   39120:	str	ip, [sp, #20]
   39124:	str	r5, [sp, #4]
   39128:	mov	ip, #0
   3912c:	str	lr, [sp, #16]
   39130:	str	ip, [sp, #8]
   39134:	str	ip, [sp, #12]
   39138:	bl	372f8 <__assert_fail@plt+0x22ca0>
   3913c:	cmp	r0, #0
   39140:	beq	39198 <__assert_fail@plt+0x24b40>
   39144:	cmn	r0, #1
   39148:	beq	39160 <__assert_fail@plt+0x24b08>
   3914c:	cmp	r5, #0
   39150:	cmpne	r6, #0
   39154:	ldr	r0, [sp, #8]
   39158:	bne	39178 <__assert_fail@plt+0x24b20>
   3915c:	sub	r0, r0, #1
   39160:	ldr	r2, [sp, #20]
   39164:	ldr	r3, [r4]
   39168:	cmp	r2, r3
   3916c:	bne	391b0 <__assert_fail@plt+0x24b58>
   39170:	add	sp, sp, #24
   39174:	pop	{r4, r5, r6, pc}
   39178:	ldr	r3, [sp, #4]
   3917c:	cmp	r3, #0
   39180:	beq	3915c <__assert_fail@plt+0x24b04>
   39184:	cmp	r3, r0
   39188:	addls	r6, r6, r3
   3918c:	movls	r3, #0
   39190:	strbls	r3, [r6, #-1]
   39194:	b	3915c <__assert_fail@plt+0x24b04>
   39198:	add	r0, sp, #4
   3919c:	movw	r1, #18888	; 0x49c8
   391a0:	mov	r2, #1
   391a4:	movt	r1, #4
   391a8:	bl	3718c <__assert_fail@plt+0x22b34>
   391ac:	b	39144 <__assert_fail@plt+0x24aec>
   391b0:	bl	13cec <__stack_chk_fail@plt>
   391b4:	push	{r2, r3}
   391b8:	push	{r4, lr}
   391bc:	movw	r4, #47296	; 0xb8c0
   391c0:	movt	r4, #5
   391c4:	sub	sp, sp, #8
   391c8:	add	ip, sp, #20
   391cc:	ldr	lr, [r4]
   391d0:	ldr	r2, [sp, #16]
   391d4:	mov	r3, ip
   391d8:	str	ip, [sp]
   391dc:	str	lr, [sp, #4]
   391e0:	bl	390ec <__assert_fail@plt+0x24a94>
   391e4:	ldr	r2, [sp, #4]
   391e8:	ldr	r3, [r4]
   391ec:	cmp	r2, r3
   391f0:	bne	39204 <__assert_fail@plt+0x24bac>
   391f4:	add	sp, sp, #8
   391f8:	pop	{r4, lr}
   391fc:	add	sp, sp, #8
   39200:	bx	lr
   39204:	bl	13cec <__stack_chk_fail@plt>
   39208:	push	{r4, r5, r6, r7, lr}
   3920c:	movw	r4, #47296	; 0xb8c0
   39210:	movt	r4, #5
   39214:	sub	sp, sp, #28
   39218:	mov	ip, #512	; 0x200
   3921c:	mov	r5, r0
   39220:	ldr	lr, [r4]
   39224:	mov	r0, ip
   39228:	str	ip, [sp, #8]
   3922c:	mov	r7, r1
   39230:	mov	ip, #0
   39234:	mov	r6, r2
   39238:	str	lr, [sp, #20]
   3923c:	str	ip, [sp, #4]
   39240:	str	ip, [sp, #12]
   39244:	bl	139c8 <gcry_malloc@plt>
   39248:	cmp	r0, #0
   3924c:	str	r0, [sp, #16]
   39250:	streq	r0, [r5]
   39254:	mvneq	r0, #0
   39258:	beq	392a8 <__assert_fail@plt+0x24c50>
   3925c:	mov	r2, r7
   39260:	mov	r3, r6
   39264:	movw	r0, #29240	; 0x7238
   39268:	add	r1, sp, #4
   3926c:	movt	r0, #3
   39270:	bl	372f8 <__assert_fail@plt+0x22ca0>
   39274:	cmp	r0, #0
   39278:	beq	392f0 <__assert_fail@plt+0x24c98>
   3927c:	cmn	r0, #1
   39280:	beq	392c8 <__assert_fail@plt+0x24c70>
   39284:	ldr	r6, [sp, #4]
   39288:	cmp	r6, #0
   3928c:	bne	392c0 <__assert_fail@plt+0x24c68>
   39290:	ldr	r0, [sp, #12]
   39294:	cmp	r0, #0
   39298:	beq	3930c <__assert_fail@plt+0x24cb4>
   3929c:	ldr	r3, [sp, #16]
   392a0:	sub	r0, r0, #1
   392a4:	str	r3, [r5]
   392a8:	ldr	r2, [sp, #20]
   392ac:	ldr	r3, [r4]
   392b0:	cmp	r2, r3
   392b4:	bne	39308 <__assert_fail@plt+0x24cb0>
   392b8:	add	sp, sp, #28
   392bc:	pop	{r4, r5, r6, r7, pc}
   392c0:	bl	14148 <__errno_location@plt>
   392c4:	str	r6, [r0]
   392c8:	mov	r1, #0
   392cc:	ldr	r2, [sp, #12]
   392d0:	ldr	r0, [sp, #16]
   392d4:	bl	141cc <memset@plt>
   392d8:	ldr	r0, [sp, #16]
   392dc:	bl	13c44 <gcry_free@plt>
   392e0:	mov	r3, #0
   392e4:	mvn	r0, #0
   392e8:	str	r3, [r5]
   392ec:	b	392a8 <__assert_fail@plt+0x24c50>
   392f0:	add	r0, sp, #4
   392f4:	movw	r1, #18888	; 0x49c8
   392f8:	mov	r2, #1
   392fc:	movt	r1, #4
   39300:	bl	37238 <__assert_fail@plt+0x22be0>
   39304:	b	3927c <__assert_fail@plt+0x24c24>
   39308:	bl	13cec <__stack_chk_fail@plt>
   3930c:	movw	r0, #35112	; 0x8928
   39310:	movw	r1, #34920	; 0x8868
   39314:	movt	r0, #4
   39318:	movt	r1, #4
   3931c:	movw	r2, #1767	; 0x6e7
   39320:	ldr	r3, [pc]	; 39328 <__assert_fail@plt+0x24cd0>
   39324:	bl	14658 <__assert_fail@plt>
   39328:	andeq	r8, r4, r4, lsl #16
   3932c:	push	{r1, r2, r3}
   39330:	push	{r4, lr}
   39334:	movw	r4, #47296	; 0xb8c0
   39338:	movt	r4, #5
   3933c:	sub	sp, sp, #12
   39340:	add	r3, sp, #24
   39344:	ldr	ip, [r4]
   39348:	mov	r2, r3
   3934c:	ldr	r1, [sp, #20]
   39350:	str	r3, [sp]
   39354:	str	ip, [sp, #4]
   39358:	bl	39208 <__assert_fail@plt+0x24bb0>
   3935c:	ldr	r2, [sp, #4]
   39360:	ldr	r3, [r4]
   39364:	cmp	r2, r3
   39368:	bne	3937c <__assert_fail@plt+0x24d24>
   3936c:	add	sp, sp, #12
   39370:	pop	{r4, lr}
   39374:	add	sp, sp, #12
   39378:	bx	lr
   3937c:	bl	13cec <__stack_chk_fail@plt>
   39380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39384:	sub	sp, sp, #28
   39388:	cmp	r3, #0
   3938c:	mov	r7, r1
   39390:	str	r3, [sp, #20]
   39394:	addeq	r3, r2, #1
   39398:	addeq	r3, r1, r3
   3939c:	str	r0, [sp, #12]
   393a0:	streq	r3, [sp, #20]
   393a4:	mov	r5, r2
   393a8:	ldr	r0, [sp, #20]
   393ac:	bl	14094 <strlen@plt>
   393b0:	ldr	r3, [sp, #12]
   393b4:	ldr	r6, [r3, #4]
   393b8:	cmp	r6, #0
   393bc:	str	r0, [sp, #16]
   393c0:	beq	3952c <__assert_fail@plt+0x24ed4>
   393c4:	mov	r9, #0
   393c8:	ldr	r8, [r3, #8]
   393cc:	mov	r4, r9
   393d0:	mvn	r3, #0
   393d4:	str	r3, [sp, #8]
   393d8:	b	3940c <__assert_fail@plt+0x24db4>
   393dc:	bl	145bc <strncmp@plt>
   393e0:	cmp	r0, #0
   393e4:	str	r0, [sp, #4]
   393e8:	mov	r0, sl
   393ec:	bne	393fc <__assert_fail@plt+0x24da4>
   393f0:	bl	14094 <strlen@plt>
   393f4:	cmp	r0, r5
   393f8:	beq	394d8 <__assert_fail@plt+0x24e80>
   393fc:	add	r4, r4, #1
   39400:	cmp	r4, r6
   39404:	mov	r9, r4
   39408:	beq	39440 <__assert_fail@plt+0x24de8>
   3940c:	ldr	fp, [r8, r9, lsl #2]
   39410:	mov	r1, r7
   39414:	mov	r2, r5
   39418:	lsl	r9, r9, #2
   3941c:	add	sl, fp, #8
   39420:	cmp	fp, #0
   39424:	mov	r0, sl
   39428:	bne	393dc <__assert_fail@plt+0x24d84>
   3942c:	str	r4, [sp, #8]
   39430:	add	r4, r4, #1
   39434:	cmp	r4, r6
   39438:	mov	r9, r4
   3943c:	bne	3940c <__assert_fail@plt+0x24db4>
   39440:	ldr	r3, [sp, #8]
   39444:	cmn	r3, #1
   39448:	beq	3952c <__assert_fail@plt+0x24ed4>
   3944c:	ldr	r3, [sp, #16]
   39450:	add	r0, r5, #13
   39454:	add	r0, r0, r3
   39458:	bl	139c8 <gcry_malloc@plt>
   3945c:	subs	r4, r0, #0
   39460:	beq	39550 <__assert_fail@plt+0x24ef8>
   39464:	ldr	r2, [sp, #64]	; 0x40
   39468:	mov	r1, r7
   3946c:	add	r0, r4, #8
   39470:	mov	sl, #0
   39474:	adds	r3, r2, #0
   39478:	mov	r2, r5
   3947c:	movne	r3, #1
   39480:	str	r3, [r4, #4]
   39484:	bl	13ba8 <memcpy@plt>
   39488:	add	r3, r5, #9
   3948c:	add	r3, r4, r3
   39490:	add	r5, r4, r5
   39494:	ldr	r1, [sp, #20]
   39498:	strb	sl, [r5, #8]
   3949c:	mov	r0, r3
   394a0:	str	r3, [r4]
   394a4:	bl	13e78 <strcpy@plt>
   394a8:	ldr	r1, [sp, #12]
   394ac:	ldr	r2, [sp, #8]
   394b0:	ldr	r3, [r1, #8]
   394b4:	ldr	r0, [r3, r2, lsl #2]
   394b8:	bl	13c44 <gcry_free@plt>
   394bc:	ldr	r1, [sp, #12]
   394c0:	ldr	r2, [sp, #8]
   394c4:	mov	r0, sl
   394c8:	ldr	r3, [r1, #8]
   394cc:	str	r4, [r3, r2, lsl #2]
   394d0:	add	sp, sp, #28
   394d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   394d8:	ldr	fp, [fp]
   394dc:	str	r4, [sp, #8]
   394e0:	mov	r0, fp
   394e4:	bl	14094 <strlen@plt>
   394e8:	ldr	r3, [sp, #16]
   394ec:	cmp	r0, r3
   394f0:	bne	393fc <__assert_fail@plt+0x24da4>
   394f4:	ldr	r1, [sp, #20]
   394f8:	mov	r0, fp
   394fc:	ldr	r2, [sp, #16]
   39500:	bl	13ba8 <memcpy@plt>
   39504:	ldr	r1, [sp, #12]
   39508:	ldr	r0, [sp, #4]
   3950c:	ldr	r3, [r1, #8]
   39510:	ldr	r1, [sp, #64]	; 0x40
   39514:	ldr	r3, [r3, r9]
   39518:	adds	r2, r1, #0
   3951c:	movne	r2, #1
   39520:	str	r2, [r3, #4]
   39524:	add	sp, sp, #28
   39528:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3952c:	ldr	r1, [sp, #12]
   39530:	ldr	r3, [r1]
   39534:	cmp	r3, r6
   39538:	beq	39564 <__assert_fail@plt+0x24f0c>
   3953c:	ldr	r3, [sp, #12]
   39540:	str	r6, [sp, #8]
   39544:	add	r6, r6, #1
   39548:	str	r6, [r3, #4]
   3954c:	b	3944c <__assert_fail@plt+0x24df4>
   39550:	bl	14580 <gpg_err_code_from_syserror@plt>
   39554:	cmp	r0, #0
   39558:	moveq	r0, #0
   3955c:	uxthne	r0, r0
   39560:	b	394d0 <__assert_fail@plt+0x24e78>
   39564:	add	r6, r6, #10
   39568:	mov	r1, #4
   3956c:	mov	r0, r6
   39570:	bl	14190 <gcry_calloc@plt>
   39574:	subs	r4, r0, #0
   39578:	beq	39550 <__assert_fail@plt+0x24ef8>
   3957c:	ldr	r3, [sp, #12]
   39580:	ldr	r0, [r3, #4]
   39584:	cmp	r0, #0
   39588:	beq	395b4 <__assert_fail@plt+0x24f5c>
   3958c:	ldr	ip, [sp, #12]
   39590:	mov	r2, #0
   39594:	mov	r3, r2
   39598:	ldr	r1, [ip, #8]
   3959c:	add	r3, r3, #1
   395a0:	cmp	r3, r0
   395a4:	ldr	r1, [r1, r2, lsl #2]
   395a8:	str	r1, [r4, r2, lsl #2]
   395ac:	mov	r2, r3
   395b0:	bne	39598 <__assert_fail@plt+0x24f40>
   395b4:	ldr	r3, [sp, #12]
   395b8:	str	r6, [r3]
   395bc:	ldr	r0, [r3, #8]
   395c0:	bl	13c44 <gcry_free@plt>
   395c4:	ldr	r3, [sp, #12]
   395c8:	str	r4, [r3, #8]
   395cc:	ldr	r6, [r3, #4]
   395d0:	b	3953c <__assert_fail@plt+0x24ee4>
   395d4:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   395d8:	mov	r9, r0
   395dc:	ldr	r6, [r0]
   395e0:	mov	sl, r1
   395e4:	mov	r8, r2
   395e8:	cmp	r6, #0
   395ec:	beq	39654 <__assert_fail@plt+0x24ffc>
   395f0:	mov	r4, #0
   395f4:	mov	r3, r4
   395f8:	b	39608 <__assert_fail@plt+0x24fb0>
   395fc:	cmp	r4, r6
   39600:	mov	r3, r4
   39604:	bcs	39654 <__assert_fail@plt+0x24ffc>
   39608:	ldr	ip, [sl]
   3960c:	mov	r1, r8
   39610:	add	r4, r4, #1
   39614:	lsl	r7, r3, #2
   39618:	ldr	r5, [ip, r3, lsl #2]
   3961c:	cmp	r5, #0
   39620:	add	r0, r5, #8
   39624:	beq	395fc <__assert_fail@plt+0x24fa4>
   39628:	bl	13a28 <strcmp@plt>
   3962c:	subs	fp, r0, #0
   39630:	bne	395fc <__assert_fail@plt+0x24fa4>
   39634:	mov	r0, r5
   39638:	bl	13c44 <gcry_free@plt>
   3963c:	ldr	r6, [r9]
   39640:	ldr	r3, [sl]
   39644:	cmp	r4, r6
   39648:	str	fp, [r3, r7]
   3964c:	mov	r3, r4
   39650:	bcc	39608 <__assert_fail@plt+0x24fb0>
   39654:	mov	r0, #0
   39658:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3965c:	ldr	r3, [r0]
   39660:	cmp	r3, #7
   39664:	bhi	39690 <__assert_fail@plt+0x25038>
   39668:	cmp	r1, #0
   3966c:	add	r2, r3, #1
   39670:	str	r2, [r0]
   39674:	movw	r2, #35124	; 0x8934
   39678:	movt	r2, #4
   3967c:	addne	r0, r2, r3, lsl #3
   39680:	ldrne	r0, [r0, #4]
   39684:	strne	r0, [r1]
   39688:	ldr	r0, [r2, r3, lsl #3]
   3968c:	bx	lr
   39690:	mov	r0, #0
   39694:	bx	lr
   39698:	push	{r4, lr}
   3969c:	mov	r0, #1
   396a0:	mov	r1, #12
   396a4:	bl	14190 <gcry_calloc@plt>
   396a8:	subs	r4, r0, #0
   396ac:	beq	396e0 <__assert_fail@plt+0x25088>
   396b0:	movw	r3, #47960	; 0xbb58
   396b4:	movt	r3, #5
   396b8:	mov	r1, #4
   396bc:	ldr	r0, [r3]
   396c0:	cmp	r0, #0
   396c4:	moveq	r0, #8
   396c8:	str	r0, [r4]
   396cc:	bl	14190 <gcry_calloc@plt>
   396d0:	cmp	r0, #0
   396d4:	mov	r3, r0
   396d8:	str	r0, [r4, #8]
   396dc:	beq	396e8 <__assert_fail@plt+0x25090>
   396e0:	mov	r0, r4
   396e4:	pop	{r4, pc}
   396e8:	mov	r0, r4
   396ec:	mov	r4, r3
   396f0:	bl	13c44 <gcry_free@plt>
   396f4:	b	396e0 <__assert_fail@plt+0x25088>
   396f8:	push	{r3, r4, r5, lr}
   396fc:	subs	r5, r0, #0
   39700:	popeq	{r3, r4, r5, pc}
   39704:	ldr	r3, [r5]
   39708:	sub	r2, r3, #9
   3970c:	cmp	r2, #49	; 0x31
   39710:	bls	39768 <__assert_fail@plt+0x25110>
   39714:	ldr	r2, [r5, #4]
   39718:	ldr	r1, [r5, #8]
   3971c:	cmp	r2, #0
   39720:	movne	r3, #0
   39724:	movne	r4, r3
   39728:	beq	39754 <__assert_fail@plt+0x250fc>
   3972c:	ldr	r0, [r1, r3, lsl #2]
   39730:	add	r4, r4, #1
   39734:	cmp	r0, #0
   39738:	beq	39748 <__assert_fail@plt+0x250f0>
   3973c:	bl	13c44 <gcry_free@plt>
   39740:	ldr	r1, [r5, #8]
   39744:	ldr	r2, [r5, #4]
   39748:	cmp	r4, r2
   3974c:	mov	r3, r4
   39750:	bcc	3972c <__assert_fail@plt+0x250d4>
   39754:	mov	r0, r1
   39758:	bl	13c44 <gcry_free@plt>
   3975c:	mov	r0, r5
   39760:	pop	{r3, r4, r5, lr}
   39764:	b	13c44 <gcry_free@plt>
   39768:	movw	r2, #47960	; 0xbb58
   3976c:	movt	r2, #5
   39770:	ldr	r1, [r2]
   39774:	cmp	r3, r1
   39778:	strhi	r3, [r2]
   3977c:	b	39714 <__assert_fail@plt+0x250bc>
   39780:	push	{r4, r5, lr}
   39784:	subs	r4, r1, #0
   39788:	sub	sp, sp, #12
   3978c:	mov	r5, r0
   39790:	beq	397a0 <__assert_fail@plt+0x25148>
   39794:	ldrb	r3, [r4]
   39798:	cmp	r3, #0
   3979c:	bne	397ac <__assert_fail@plt+0x25154>
   397a0:	mov	r0, #55	; 0x37
   397a4:	add	sp, sp, #12
   397a8:	pop	{r4, r5, pc}
   397ac:	mov	r0, r4
   397b0:	mov	r1, #61	; 0x3d
   397b4:	bl	140ac <strchr@plt>
   397b8:	cmp	r0, r4
   397bc:	mov	r2, r0
   397c0:	beq	397a0 <__assert_fail@plt+0x25148>
   397c4:	cmp	r0, #0
   397c8:	beq	397ec <__assert_fail@plt+0x25194>
   397cc:	mov	r3, #0
   397d0:	mov	r1, r4
   397d4:	mov	r0, r5
   397d8:	rsb	r2, r4, r2
   397dc:	str	r3, [sp]
   397e0:	bl	39380 <__assert_fail@plt+0x24d28>
   397e4:	add	sp, sp, #12
   397e8:	pop	{r4, r5, pc}
   397ec:	mov	r2, r4
   397f0:	add	r0, r5, #4
   397f4:	add	r1, r5, #8
   397f8:	add	sp, sp, #12
   397fc:	pop	{r4, r5, lr}
   39800:	b	395d4 <__assert_fail@plt+0x24f7c>
   39804:	push	{r4, r5, r6, lr}
   39808:	subs	r4, r1, #0
   3980c:	sub	sp, sp, #8
   39810:	mov	r6, r0
   39814:	mov	r5, r2
   39818:	beq	39828 <__assert_fail@plt+0x251d0>
   3981c:	ldrb	ip, [r4]
   39820:	cmp	ip, #0
   39824:	bne	39834 <__assert_fail@plt+0x251dc>
   39828:	mov	r0, #55	; 0x37
   3982c:	add	sp, sp, #8
   39830:	pop	{r4, r5, r6, pc}
   39834:	cmp	r2, #0
   39838:	beq	39868 <__assert_fail@plt+0x25210>
   3983c:	mov	r0, r4
   39840:	bl	14094 <strlen@plt>
   39844:	mov	ip, #0
   39848:	mov	r1, r4
   3984c:	mov	r3, r5
   39850:	str	ip, [sp]
   39854:	mov	r2, r0
   39858:	mov	r0, r6
   3985c:	bl	39380 <__assert_fail@plt+0x24d28>
   39860:	add	sp, sp, #8
   39864:	pop	{r4, r5, r6, pc}
   39868:	mov	r2, r4
   3986c:	add	r0, r0, #4
   39870:	add	r1, r6, #8
   39874:	add	sp, sp, #8
   39878:	pop	{r4, r5, r6, lr}
   3987c:	b	395d4 <__assert_fail@plt+0x24f7c>
   39880:	cmp	r1, #0
   39884:	cmpne	r0, #0
   39888:	push	{r4, r5, r6, r7, r8, lr}
   3988c:	movne	r3, #0
   39890:	moveq	r3, #1
   39894:	mov	r6, r1
   39898:	beq	398ec <__assert_fail@plt+0x25294>
   3989c:	ldrb	r7, [r1]
   398a0:	cmp	r7, #0
   398a4:	beq	39904 <__assert_fail@plt+0x252ac>
   398a8:	ldr	r7, [r0, #4]
   398ac:	cmp	r7, #0
   398b0:	beq	39904 <__assert_fail@plt+0x252ac>
   398b4:	ldr	r8, [r0, #8]
   398b8:	mov	r4, r3
   398bc:	ldr	r5, [r8, r3, lsl #2]
   398c0:	mov	r1, r6
   398c4:	add	r4, r4, #1
   398c8:	cmp	r5, #0
   398cc:	add	r0, r5, #8
   398d0:	beq	398e0 <__assert_fail@plt+0x25288>
   398d4:	bl	13a28 <strcmp@plt>
   398d8:	cmp	r0, #0
   398dc:	beq	398f4 <__assert_fail@plt+0x2529c>
   398e0:	cmp	r4, r7
   398e4:	mov	r3, r4
   398e8:	bne	398bc <__assert_fail@plt+0x25264>
   398ec:	mov	r0, #0
   398f0:	pop	{r4, r5, r6, r7, r8, pc}
   398f4:	ldr	r3, [r5, #4]
   398f8:	cmp	r3, #0
   398fc:	ldreq	r0, [r5]
   39900:	pop	{r4, r5, r6, r7, r8, pc}
   39904:	mov	r0, r7
   39908:	pop	{r4, r5, r6, r7, r8, pc}
   3990c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   39910:	subs	r8, r2, #0
   39914:	sub	sp, sp, #8
   39918:	mov	sl, r0
   3991c:	movne	r3, #0
   39920:	strne	r3, [r8]
   39924:	cmp	r1, #0
   39928:	cmpne	r0, #0
   3992c:	mov	r6, r1
   39930:	movne	r3, #0
   39934:	moveq	r3, #1
   39938:	beq	39a14 <__assert_fail@plt+0x253bc>
   3993c:	ldrb	r2, [r1]
   39940:	cmp	r2, #0
   39944:	beq	39a14 <__assert_fail@plt+0x253bc>
   39948:	ldr	r7, [r0, #4]
   3994c:	cmp	r7, #0
   39950:	beq	3998c <__assert_fail@plt+0x25334>
   39954:	ldr	r9, [r0, #8]
   39958:	mov	r4, r3
   3995c:	ldr	r5, [r9, r3, lsl #2]
   39960:	mov	r1, r6
   39964:	add	r4, r4, #1
   39968:	cmp	r5, #0
   3996c:	add	r0, r5, #8
   39970:	beq	39980 <__assert_fail@plt+0x25328>
   39974:	bl	13a28 <strcmp@plt>
   39978:	cmp	r0, #0
   3997c:	beq	39a20 <__assert_fail@plt+0x253c8>
   39980:	cmp	r4, r7
   39984:	mov	r3, r4
   39988:	bne	3995c <__assert_fail@plt+0x25304>
   3998c:	mov	r0, r6
   39990:	bl	13f14 <getenv@plt>
   39994:	subs	r4, r0, #0
   39998:	beq	39a44 <__assert_fail@plt+0x253ec>
   3999c:	ldrb	r3, [r4]
   399a0:	cmp	r3, #0
   399a4:	beq	39a44 <__assert_fail@plt+0x253ec>
   399a8:	mov	r0, r6
   399ac:	bl	14094 <strlen@plt>
   399b0:	mov	r1, #1
   399b4:	mov	r3, r4
   399b8:	str	r1, [sp]
   399bc:	mov	r1, r6
   399c0:	mov	r2, r0
   399c4:	mov	r0, sl
   399c8:	bl	39380 <__assert_fail@plt+0x24d28>
   399cc:	ldr	r7, [sl, #4]
   399d0:	cmp	r7, #0
   399d4:	beq	39a14 <__assert_fail@plt+0x253bc>
   399d8:	ldr	r9, [sl, #8]
   399dc:	mov	r3, #0
   399e0:	mov	r4, r3
   399e4:	ldr	r5, [r9, r3, lsl #2]
   399e8:	mov	r1, r6
   399ec:	add	r4, r4, #1
   399f0:	cmp	r5, #0
   399f4:	add	r0, r5, #8
   399f8:	beq	39a08 <__assert_fail@plt+0x253b0>
   399fc:	bl	13a28 <strcmp@plt>
   39a00:	cmp	r0, #0
   39a04:	beq	39a20 <__assert_fail@plt+0x253c8>
   39a08:	cmp	r4, r7
   39a0c:	mov	r3, r4
   39a10:	bne	399e4 <__assert_fail@plt+0x2538c>
   39a14:	mov	r0, #0
   39a18:	add	sp, sp, #8
   39a1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39a20:	cmp	r8, #0
   39a24:	beq	39a38 <__assert_fail@plt+0x253e0>
   39a28:	ldr	r3, [r5, #4]
   39a2c:	cmp	r3, #0
   39a30:	movne	r3, #1
   39a34:	strne	r3, [r8]
   39a38:	ldr	r0, [r5]
   39a3c:	add	sp, sp, #8
   39a40:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   39a44:	movw	r1, #2048	; 0x800
   39a48:	mov	r0, r6
   39a4c:	movt	r1, #4
   39a50:	bl	13a28 <strcmp@plt>
   39a54:	subs	r5, r0, #0
   39a58:	beq	39a68 <__assert_fail@plt+0x25410>
   39a5c:	cmp	r4, #0
   39a60:	bne	399a8 <__assert_fail@plt+0x25350>
   39a64:	b	39a14 <__assert_fail@plt+0x253bc>
   39a68:	bl	14088 <ttyname@plt>
   39a6c:	cmp	r0, #0
   39a70:	beq	39a5c <__assert_fail@plt+0x25404>
   39a74:	mov	r0, r5
   39a78:	bl	14088 <ttyname@plt>
   39a7c:	mov	r4, r0
   39a80:	b	39a5c <__assert_fail@plt+0x25404>
   39a84:	push	{r4, r5, r6, r7, r8, r9}
   39a88:	rsbs	r4, r0, #1
   39a8c:	ldr	ip, [r1]
   39a90:	movcc	r4, #0
   39a94:	orrs	r4, r4, ip, lsr #31
   39a98:	bne	39ae4 <__assert_fail@plt+0x2548c>
   39a9c:	ldr	r7, [r0, #4]
   39aa0:	cmp	r7, ip
   39aa4:	bls	39b24 <__assert_fail@plt+0x254cc>
   39aa8:	ldr	r9, [r0, #8]
   39aac:	lsl	r6, ip, #2
   39ab0:	add	r4, r9, r6
   39ab4:	ldr	r5, [r9, ip, lsl #2]
   39ab8:	cmp	r5, #0
   39abc:	rsbeq	r8, r9, #4
   39ac0:	beq	39ad4 <__assert_fail@plt+0x2547c>
   39ac4:	b	39af0 <__assert_fail@plt+0x25498>
   39ac8:	ldr	r5, [r4, #4]!
   39acc:	cmp	r5, #0
   39ad0:	bne	39af0 <__assert_fail@plt+0x25498>
   39ad4:	add	ip, ip, #1
   39ad8:	add	r6, r8, r4
   39adc:	cmp	r7, ip
   39ae0:	bhi	39ac8 <__assert_fail@plt+0x25470>
   39ae4:	mov	r0, #0
   39ae8:	pop	{r4, r5, r6, r7, r8, r9}
   39aec:	bx	lr
   39af0:	cmp	r3, #0
   39af4:	add	ip, ip, #1
   39af8:	str	ip, [r1]
   39afc:	ldrne	r1, [r5, #4]
   39b00:	strne	r1, [r3]
   39b04:	cmp	r2, #0
   39b08:	ldrne	r3, [r5]
   39b0c:	strne	r3, [r2]
   39b10:	ldrne	r9, [r0, #8]
   39b14:	ldr	r0, [r9, r6]
   39b18:	pop	{r4, r5, r6, r7, r8, r9}
   39b1c:	add	r0, r0, #8
   39b20:	bx	lr
   39b24:	mov	r0, r4
   39b28:	b	39ae8 <__assert_fail@plt+0x25490>
   39b2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   39b30:	sub	sp, sp, #36	; 0x24
   39b34:	movw	r6, #47296	; 0xb8c0
   39b38:	movt	r6, #5
   39b3c:	str	r2, [sp, #4]
   39b40:	mov	ip, #0
   39b44:	ldr	r4, [sp, #4]
   39b48:	mov	r2, ip
   39b4c:	ldr	lr, [r6]
   39b50:	mov	r5, r0
   39b54:	str	ip, [r1]
   39b58:	str	r1, [sp, #8]
   39b5c:	movw	r1, #19248	; 0x4b30
   39b60:	str	ip, [r4]
   39b64:	movt	r1, #4
   39b68:	str	r3, [sp, #12]
   39b6c:	str	lr, [sp, #28]
   39b70:	str	ip, [sp, #16]
   39b74:	bl	13e84 <gcry_sexp_find_token@plt>
   39b78:	subs	r4, r0, #0
   39b7c:	beq	39e34 <__assert_fail@plt+0x257dc>
   39b80:	mov	r0, r4
   39b84:	bl	13a34 <gcry_sexp_cadr@plt>
   39b88:	mov	r5, r0
   39b8c:	mov	r0, r4
   39b90:	bl	13be4 <gcry_sexp_release@plt>
   39b94:	mov	r0, r5
   39b98:	mov	r1, #0
   39b9c:	bl	141d8 <gcry_sexp_nth_string@plt>
   39ba0:	subs	r8, r0, #0
   39ba4:	beq	39ce4 <__assert_fail@plt+0x2568c>
   39ba8:	add	r0, sp, #16
   39bac:	mov	r1, #1
   39bb0:	mov	r2, #0
   39bb4:	bl	13b48 <gcry_md_open@plt>
   39bb8:	subs	r9, r0, #0
   39bbc:	bne	39bf4 <__assert_fail@plt+0x2559c>
   39bc0:	mov	r0, r8
   39bc4:	bl	13f08 <gcry_pk_map_name@plt>
   39bc8:	cmp	r0, #17
   39bcc:	beq	39c30 <__assert_fail@plt+0x255d8>
   39bd0:	movw	r3, #301	; 0x12d
   39bd4:	cmp	r0, r3
   39bd8:	beq	39cf8 <__assert_fail@plt+0x256a0>
   39bdc:	cmp	r0, #1
   39be0:	beq	39e14 <__assert_fail@plt+0x257bc>
   39be4:	ldr	r4, [sp, #12]
   39be8:	and	r9, r4, #127	; 0x7f
   39bec:	lsl	r9, r9, #24
   39bf0:	orr	r9, r9, #4
   39bf4:	mov	r0, r8
   39bf8:	bl	13c44 <gcry_free@plt>
   39bfc:	mov	r0, #0
   39c00:	bl	13be4 <gcry_sexp_release@plt>
   39c04:	ldr	r0, [sp, #16]
   39c08:	bl	13b00 <gcry_md_close@plt>
   39c0c:	mov	r0, r5
   39c10:	bl	13be4 <gcry_sexp_release@plt>
   39c14:	ldr	r2, [sp, #28]
   39c18:	ldr	r3, [r6]
   39c1c:	mov	r0, r9
   39c20:	cmp	r2, r3
   39c24:	bne	39f9c <__assert_fail@plt+0x25944>
   39c28:	add	sp, sp, #36	; 0x24
   39c2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   39c30:	ldr	r0, [sp, #16]
   39c34:	mov	r2, #11
   39c38:	ldr	r1, [pc, #900]	; 39fc4 <__assert_fail@plt+0x2596c>
   39c3c:	movw	r4, #20716	; 0x50ec
   39c40:	bl	13c8c <gcry_md_write@plt>
   39c44:	movt	r4, #4
   39c48:	ldrb	r3, [r4]
   39c4c:	cmp	r3, #0
   39c50:	bne	39cc8 <__assert_fail@plt+0x25670>
   39c54:	b	39ea0 <__assert_fail@plt+0x25848>
   39c58:	mov	r1, #1
   39c5c:	mov	r2, #5
   39c60:	bl	13fbc <gcry_sexp_nth_mpi@plt>
   39c64:	mov	r7, r0
   39c68:	mov	r0, sl
   39c6c:	bl	13be4 <gcry_sexp_release@plt>
   39c70:	cmp	r7, #0
   39c74:	beq	39ce4 <__assert_fail@plt+0x2568c>
   39c78:	add	r1, sp, #20
   39c7c:	add	r2, sp, #24
   39c80:	mov	r3, r7
   39c84:	mov	r0, #3
   39c88:	bl	14310 <gcry_mpi_aprint@plt>
   39c8c:	mov	sl, r0
   39c90:	mov	r0, r7
   39c94:	bl	14268 <gcry_mpi_release@plt>
   39c98:	cmp	sl, #0
   39c9c:	bne	39ef8 <__assert_fail@plt+0x258a0>
   39ca0:	ldr	r0, [sp, #16]
   39ca4:	add	r4, r4, #1
   39ca8:	ldr	r1, [sp, #20]
   39cac:	ldr	r2, [sp, #24]
   39cb0:	bl	13c8c <gcry_md_write@plt>
   39cb4:	ldr	r0, [sp, #20]
   39cb8:	bl	13c44 <gcry_free@plt>
   39cbc:	ldrb	r3, [fp, #1]
   39cc0:	cmp	r3, #0
   39cc4:	beq	39ea0 <__assert_fail@plt+0x25848>
   39cc8:	mov	r0, r5
   39ccc:	mov	r1, r4
   39cd0:	mov	r2, #1
   39cd4:	mov	fp, r4
   39cd8:	bl	13e84 <gcry_sexp_find_token@plt>
   39cdc:	subs	sl, r0, #0
   39ce0:	bne	39c58 <__assert_fail@plt+0x25600>
   39ce4:	ldr	r4, [sp, #12]
   39ce8:	and	r9, r4, #127	; 0x7f
   39cec:	lsl	r9, r9, #24
   39cf0:	orr	r9, r9, #83	; 0x53
   39cf4:	b	39bf4 <__assert_fail@plt+0x2559c>
   39cf8:	ldr	r0, [sp, #16]
   39cfc:	mov	r2, #20
   39d00:	ldr	r1, [pc, #704]	; 39fc8 <__assert_fail@plt+0x25970>
   39d04:	bl	13c8c <gcry_md_write@plt>
   39d08:	mov	r0, r5
   39d0c:	movw	r1, #19284	; 0x4b54
   39d10:	mov	r2, r9
   39d14:	movt	r1, #4
   39d18:	bl	13e84 <gcry_sexp_find_token@plt>
   39d1c:	subs	r4, r0, #0
   39d20:	beq	39f74 <__assert_fail@plt+0x2591c>
   39d24:	mov	r0, r8
   39d28:	bl	13c44 <gcry_free@plt>
   39d2c:	mov	r1, #1
   39d30:	mov	r0, r4
   39d34:	bl	141d8 <gcry_sexp_nth_string@plt>
   39d38:	mov	r8, r0
   39d3c:	mov	r0, r4
   39d40:	bl	13be4 <gcry_sexp_release@plt>
   39d44:	cmp	r8, #0
   39d48:	beq	39f74 <__assert_fail@plt+0x2591c>
   39d4c:	movw	r1, #19292	; 0x4b5c
   39d50:	mov	r0, r8
   39d54:	movt	r1, #4
   39d58:	bl	13a28 <strcmp@plt>
   39d5c:	cmp	r0, #0
   39d60:	beq	39f58 <__assert_fail@plt+0x25900>
   39d64:	movw	r1, #19236	; 0x4b24
   39d68:	mov	r0, r8
   39d6c:	movt	r1, #4
   39d70:	bl	13a28 <strcmp@plt>
   39d74:	cmp	r0, #0
   39d78:	beq	39f58 <__assert_fail@plt+0x25900>
   39d7c:	movw	r1, #19304	; 0x4b68
   39d80:	mov	r0, r8
   39d84:	movt	r1, #4
   39d88:	bl	13a28 <strcmp@plt>
   39d8c:	cmp	r0, #0
   39d90:	beq	39f80 <__assert_fail@plt+0x25928>
   39d94:	movw	r1, #19224	; 0x4b18
   39d98:	mov	r0, r8
   39d9c:	movt	r1, #4
   39da0:	bl	13a28 <strcmp@plt>
   39da4:	cmp	r0, #0
   39da8:	beq	39f80 <__assert_fail@plt+0x25928>
   39dac:	movw	r1, #19316	; 0x4b74
   39db0:	mov	r0, r8
   39db4:	movt	r1, #4
   39db8:	bl	13a28 <strcmp@plt>
   39dbc:	cmp	r0, #0
   39dc0:	beq	39ddc <__assert_fail@plt+0x25784>
   39dc4:	movw	r1, #19212	; 0x4b0c
   39dc8:	mov	r0, r8
   39dcc:	movt	r1, #4
   39dd0:	bl	13a28 <strcmp@plt>
   39dd4:	cmp	r0, #0
   39dd8:	bne	39f74 <__assert_fail@plt+0x2591c>
   39ddc:	ldr	r0, [sp, #16]
   39de0:	mov	r2, #15
   39de4:	ldr	r1, [pc, #480]	; 39fcc <__assert_fail@plt+0x25974>
   39de8:	movw	r4, #20760	; 0x5118
   39dec:	bl	13c8c <gcry_md_write@plt>
   39df0:	movt	r4, #4
   39df4:	ldrb	r3, [r4]
   39df8:	cmp	r3, #0
   39dfc:	bne	39cc8 <__assert_fail@plt+0x25670>
   39e00:	ldr	r4, [sp, #12]
   39e04:	and	r9, r4, #127	; 0x7f
   39e08:	lsl	r9, r9, #24
   39e0c:	orr	r9, r9, #188	; 0xbc
   39e10:	b	39bf4 <__assert_fail@plt+0x2559c>
   39e14:	movw	r1, #35232	; 0x89a0
   39e18:	ldr	r0, [sp, #16]
   39e1c:	movt	r1, #4
   39e20:	mov	r2, #11
   39e24:	movw	r4, #6396	; 0x18fc
   39e28:	bl	13c8c <gcry_md_write@plt>
   39e2c:	movt	r4, #4
   39e30:	b	39c48 <__assert_fail@plt+0x255f0>
   39e34:	mov	r2, r4
   39e38:	movw	r1, #26452	; 0x6754
   39e3c:	mov	r0, r5
   39e40:	movt	r1, #4
   39e44:	bl	13e84 <gcry_sexp_find_token@plt>
   39e48:	subs	r4, r0, #0
   39e4c:	bne	39b80 <__assert_fail@plt+0x25528>
   39e50:	mov	r2, r4
   39e54:	movw	r1, #19260	; 0x4b3c
   39e58:	mov	r0, r5
   39e5c:	movt	r1, #4
   39e60:	bl	13e84 <gcry_sexp_find_token@plt>
   39e64:	subs	r4, r0, #0
   39e68:	bne	39b80 <__assert_fail@plt+0x25528>
   39e6c:	mov	r0, r5
   39e70:	mov	r2, r4
   39e74:	movw	r1, #26504	; 0x6788
   39e78:	movt	r1, #4
   39e7c:	bl	13e84 <gcry_sexp_find_token@plt>
   39e80:	subs	r5, r0, #0
   39e84:	bne	39fa0 <__assert_fail@plt+0x25948>
   39e88:	ldr	r4, [sp, #12]
   39e8c:	mov	r8, r5
   39e90:	and	r9, r4, #127	; 0x7f
   39e94:	lsl	r9, r9, #24
   39e98:	orr	r9, r9, #104	; 0x68
   39e9c:	b	39bf4 <__assert_fail@plt+0x2559c>
   39ea0:	ldr	r1, [sp, #72]	; 0x48
   39ea4:	cmp	r1, #0
   39ea8:	beq	39f00 <__assert_fail@plt+0x258a8>
   39eac:	mov	r0, #61	; 0x3d
   39eb0:	bl	139c8 <gcry_malloc@plt>
   39eb4:	ldr	r4, [sp, #8]
   39eb8:	cmp	r0, #0
   39ebc:	str	r0, [r4]
   39ec0:	beq	39fa8 <__assert_fail@plt+0x25950>
   39ec4:	ldr	r0, [sp, #16]
   39ec8:	mov	r1, #1
   39ecc:	bl	13b3c <gcry_md_read@plt>
   39ed0:	ldr	r4, [sp, #8]
   39ed4:	mov	r1, #16
   39ed8:	ldr	r2, [r4]
   39edc:	bl	2e274 <__assert_fail@plt+0x19c1c>
   39ee0:	ldr	r0, [r4]
   39ee4:	ldr	r4, [sp, #4]
   39ee8:	mov	r3, #49	; 0x31
   39eec:	str	r3, [r4]
   39ef0:	bl	3bf04 <__assert_fail@plt+0x278ac>
   39ef4:	b	39bf4 <__assert_fail@plt+0x2559c>
   39ef8:	mov	r9, sl
   39efc:	b	39bf4 <__assert_fail@plt+0x2559c>
   39f00:	mov	r0, #20
   39f04:	bl	139c8 <gcry_malloc@plt>
   39f08:	ldr	r1, [sp, #8]
   39f0c:	cmp	r0, #0
   39f10:	mov	r4, r0
   39f14:	str	r0, [r1]
   39f18:	beq	39fa8 <__assert_fail@plt+0x25950>
   39f1c:	mov	r1, #1
   39f20:	ldr	r0, [sp, #16]
   39f24:	bl	13b3c <gcry_md_read@plt>
   39f28:	mov	r3, #16
   39f2c:	ldr	lr, [r0]
   39f30:	ldr	ip, [r0, #4]
   39f34:	ldr	r1, [r0, #8]
   39f38:	ldr	r2, [r0, #12]
   39f3c:	str	lr, [r4]
   39f40:	str	ip, [r4, #4]
   39f44:	str	r1, [r4, #8]
   39f48:	str	r2, [r4, #12]
   39f4c:	ldr	r4, [sp, #4]
   39f50:	str	r3, [r4]
   39f54:	b	39bf4 <__assert_fail@plt+0x2559c>
   39f58:	ldr	r0, [sp, #16]
   39f5c:	mov	r2, #15
   39f60:	ldr	r1, [pc, #104]	; 39fd0 <__assert_fail@plt+0x25978>
   39f64:	movw	r4, #20760	; 0x5118
   39f68:	bl	13c8c <gcry_md_write@plt>
   39f6c:	movt	r4, #4
   39f70:	b	39df4 <__assert_fail@plt+0x2579c>
   39f74:	movw	r4, #18888	; 0x49c8
   39f78:	movt	r4, #4
   39f7c:	b	39df4 <__assert_fail@plt+0x2579c>
   39f80:	ldr	r0, [sp, #16]
   39f84:	mov	r2, #15
   39f88:	ldr	r1, [pc, #68]	; 39fd4 <__assert_fail@plt+0x2597c>
   39f8c:	movw	r4, #20760	; 0x5118
   39f90:	bl	13c8c <gcry_md_write@plt>
   39f94:	movt	r4, #4
   39f98:	b	39df4 <__assert_fail@plt+0x2579c>
   39f9c:	bl	13cec <__stack_chk_fail@plt>
   39fa0:	mov	r4, r5
   39fa4:	b	39b80 <__assert_fail@plt+0x25528>
   39fa8:	bl	14580 <gpg_err_code_from_syserror@plt>
   39fac:	cmp	r0, #0
   39fb0:	ldrne	r4, [sp, #12]
   39fb4:	uxthne	r3, r0
   39fb8:	andne	r9, r4, #127	; 0x7f
   39fbc:	orrne	r9, r3, r9, lsl #24
   39fc0:	b	39bf4 <__assert_fail@plt+0x2559c>
   39fc4:	andeq	r8, r4, ip, lsr #19
   39fc8:			; <UNDEFINED> instruction: 0x000489b8
   39fcc:	strdeq	r8, [r4], -r0
   39fd0:	ldrdeq	r8, [r4], -r0
   39fd4:	andeq	r8, r4, r0, ror #19
   39fd8:	push	{lr}		; (str lr, [sp, #-4]!)
   39fdc:	sub	sp, sp, #12
   39fe0:	mov	ip, #0
   39fe4:	str	ip, [sp]
   39fe8:	bl	39b2c <__assert_fail@plt+0x254d4>
   39fec:	add	sp, sp, #12
   39ff0:	pop	{pc}		; (ldr pc, [sp], #4)
   39ff4:	push	{r4, r5, lr}
   39ff8:	movw	r4, #47296	; 0xb8c0
   39ffc:	movt	r4, #5
   3a000:	sub	sp, sp, #28
   3a004:	mov	r3, r2
   3a008:	mov	r5, r1
   3a00c:	ldr	ip, [r4]
   3a010:	mov	r2, #1
   3a014:	add	r1, sp, #16
   3a018:	str	r2, [sp]
   3a01c:	add	r2, sp, #12
   3a020:	str	ip, [sp, #20]
   3a024:	bl	39b2c <__assert_fail@plt+0x254d4>
   3a028:	ldr	r3, [sp, #16]
   3a02c:	ldr	r2, [sp, #20]
   3a030:	str	r3, [r5]
   3a034:	ldr	r3, [r4]
   3a038:	cmp	r2, r3
   3a03c:	bne	3a048 <__assert_fail@plt+0x259f0>
   3a040:	add	sp, sp, #28
   3a044:	pop	{r4, r5, pc}
   3a048:	bl	13cec <__stack_chk_fail@plt>
   3a04c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a050:	movw	r8, #47296	; 0xb8c0
   3a054:	movt	r8, #5
   3a058:	sub	sp, sp, #292	; 0x124
   3a05c:	mov	r7, r1
   3a060:	mov	r6, #0
   3a064:	ldr	r3, [r8]
   3a068:	str	r0, [sp, #4]
   3a06c:	mov	r0, r1
   3a070:	movw	r1, #18760	; 0x4948
   3a074:	movt	r1, #4
   3a078:	str	r6, [sp, #12]
   3a07c:	str	r3, [sp, #284]	; 0x11c
   3a080:	str	r6, [sp, #16]
   3a084:	str	r6, [sp, #20]
   3a088:	str	r6, [sp, #24]
   3a08c:	bl	14490 <fopen64@plt>
   3a090:	subs	r4, r0, #0
   3a094:	beq	3a354 <__assert_fail@plt+0x25cfc>
   3a098:	mov	r5, r6
   3a09c:	mov	fp, r6
   3a0a0:	mov	r9, r6
   3a0a4:	add	r0, sp, #28
   3a0a8:	mov	r1, #255	; 0xff
   3a0ac:	mov	r2, r4
   3a0b0:	bl	13b54 <fgets@plt>
   3a0b4:	cmp	r0, #0
   3a0b8:	beq	3a24c <__assert_fail@plt+0x25bf4>
   3a0bc:	ldrb	r3, [sp, #28]
   3a0c0:	add	r5, r5, #1
   3a0c4:	cmp	r3, #0
   3a0c8:	beq	3a0f8 <__assert_fail@plt+0x25aa0>
   3a0cc:	add	r0, sp, #28
   3a0d0:	bl	14094 <strlen@plt>
   3a0d4:	add	r2, sp, #288	; 0x120
   3a0d8:	sub	r0, r0, #1
   3a0dc:	add	r3, r2, r0
   3a0e0:	ldrb	r2, [r3, #-260]	; 0xfffffefc
   3a0e4:	cmp	r2, #10
   3a0e8:	bne	3a0f8 <__assert_fail@plt+0x25aa0>
   3a0ec:	b	3a1b4 <__assert_fail@plt+0x25b5c>
   3a0f0:	cmp	r0, #10
   3a0f4:	beq	3a108 <__assert_fail@plt+0x25ab0>
   3a0f8:	mov	r0, r4
   3a0fc:	bl	13c5c <_IO_getc@plt>
   3a100:	cmn	r0, #1
   3a104:	bne	3a0f0 <__assert_fail@plt+0x25a98>
   3a108:	ldrb	fp, [sp, #28]
   3a10c:	mov	r0, #0
   3a110:	mov	r2, #5
   3a114:	movw	r1, #27324	; 0x6abc
   3a118:	cmp	fp, r0
   3a11c:	movt	r1, #4
   3a120:	moveq	fp, #75	; 0x4b
   3a124:	movne	fp, #97	; 0x61
   3a128:	bl	13cc8 <dcgettext@plt>
   3a12c:	mov	sl, r0
   3a130:	mov	r0, fp
   3a134:	bl	13a64 <gpg_strerror@plt>
   3a138:	mov	r1, r7
   3a13c:	mov	r2, r5
   3a140:	mov	r3, r0
   3a144:	mov	r0, sl
   3a148:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3a14c:	cmp	r6, #0
   3a150:	beq	3a1c0 <__assert_fail@plt+0x25b68>
   3a154:	ldrb	r3, [sp, #28]
   3a158:	cmp	r3, #35	; 0x23
   3a15c:	beq	3a1ac <__assert_fail@plt+0x25b54>
   3a160:	cmp	r3, #46	; 0x2e
   3a164:	bne	3a330 <__assert_fail@plt+0x25cd8>
   3a168:	ldrb	r3, [sp, #29]
   3a16c:	cmp	r3, #32
   3a170:	cmpne	r3, #9
   3a174:	beq	3a2fc <__assert_fail@plt+0x25ca4>
   3a178:	add	r0, sp, #28
   3a17c:	bl	3b418 <__assert_fail@plt+0x26dc0>
   3a180:	ldr	r3, [sp, #20]
   3a184:	cmp	r3, #0
   3a188:	bne	3a24c <__assert_fail@plt+0x25bf4>
   3a18c:	ldr	r3, [sp, #24]
   3a190:	cmp	r3, #0
   3a194:	bne	3a24c <__assert_fail@plt+0x25bf4>
   3a198:	ldrb	r3, [sp, #29]
   3a19c:	cmp	r3, #0
   3a1a0:	bne	3a1c0 <__assert_fail@plt+0x25b68>
   3a1a4:	mov	r6, #0
   3a1a8:	b	3a0a4 <__assert_fail@plt+0x25a4c>
   3a1ac:	mov	r6, #1
   3a1b0:	b	3a0a4 <__assert_fail@plt+0x25a4c>
   3a1b4:	cmp	r6, #0
   3a1b8:	strb	r9, [r3, #-260]	; 0xfffffefc
   3a1bc:	bne	3a154 <__assert_fail@plt+0x25afc>
   3a1c0:	ldrb	r1, [sp, #28]
   3a1c4:	cmp	r1, #9
   3a1c8:	cmpne	r1, #32
   3a1cc:	bne	3a3bc <__assert_fail@plt+0x25d64>
   3a1d0:	add	r2, sp, #28
   3a1d4:	ldrb	r3, [r2, #1]!
   3a1d8:	cmp	r3, #32
   3a1dc:	cmpne	r3, #9
   3a1e0:	beq	3a1d4 <__assert_fail@plt+0x25b7c>
   3a1e4:	cmp	r3, #0
   3a1e8:	cmpne	r3, #35	; 0x23
   3a1ec:	beq	3a1a4 <__assert_fail@plt+0x25b4c>
   3a1f0:	cmp	r1, #46	; 0x2e
   3a1f4:	bne	3a208 <__assert_fail@plt+0x25bb0>
   3a1f8:	ldrb	r3, [sp, #29]
   3a1fc:	cmp	r3, #9
   3a200:	cmpne	r3, #32
   3a204:	bne	3a3e8 <__assert_fail@plt+0x25d90>
   3a208:	mov	r2, #5
   3a20c:	movw	r1, #27324	; 0x6abc
   3a210:	mov	r0, #0
   3a214:	movt	r1, #4
   3a218:	bl	13cc8 <dcgettext@plt>
   3a21c:	mov	r2, #5
   3a220:	movw	r1, #35328	; 0x8a00
   3a224:	movt	r1, #4
   3a228:	mov	r6, r0
   3a22c:	mov	r0, #0
   3a230:	bl	13cc8 <dcgettext@plt>
   3a234:	mov	r1, r7
   3a238:	mov	r2, r5
   3a23c:	mov	r3, r0
   3a240:	mov	r0, r6
   3a244:	bl	3f478 <__assert_fail@plt+0x2ae20>
   3a248:	b	3a1a4 <__assert_fail@plt+0x25b4c>
   3a24c:	cmp	fp, #0
   3a250:	beq	3a2a8 <__assert_fail@plt+0x25c50>
   3a254:	mov	r0, r4
   3a258:	bl	142c8 <fclose@plt>
   3a25c:	ldr	r3, [sp, #20]
   3a260:	cmp	r3, #0
   3a264:	beq	3a3ac <__assert_fail@plt+0x25d54>
   3a268:	cmp	fp, #0
   3a26c:	bne	3a3d0 <__assert_fail@plt+0x25d78>
   3a270:	add	r0, sp, #12
   3a274:	movw	r1, #18888	; 0x49c8
   3a278:	mov	r2, #1
   3a27c:	movt	r1, #4
   3a280:	bl	2edf0 <__assert_fail@plt+0x1a798>
   3a284:	add	r0, sp, #12
   3a288:	mov	r1, fp
   3a28c:	bl	2eecc <__assert_fail@plt+0x1a874>
   3a290:	ldr	r2, [sp, #284]	; 0x11c
   3a294:	ldr	r3, [r8]
   3a298:	cmp	r2, r3
   3a29c:	bne	3a418 <__assert_fail@plt+0x25dc0>
   3a2a0:	add	sp, sp, #292	; 0x124
   3a2a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a2a8:	mov	r0, r4
   3a2ac:	bl	13b84 <ferror@plt>
   3a2b0:	cmp	r0, #0
   3a2b4:	beq	3a254 <__assert_fail@plt+0x25bfc>
   3a2b8:	bl	14580 <gpg_err_code_from_syserror@plt>
   3a2bc:	mov	r2, #5
   3a2c0:	movw	r1, #27656	; 0x6c08
   3a2c4:	movt	r1, #4
   3a2c8:	cmp	r0, #0
   3a2cc:	uxthne	fp, r0
   3a2d0:	mov	r0, #0
   3a2d4:	bl	13cc8 <dcgettext@plt>
   3a2d8:	mov	r6, r0
   3a2dc:	mov	r0, fp
   3a2e0:	bl	13a64 <gpg_strerror@plt>
   3a2e4:	mov	r1, r7
   3a2e8:	mov	r2, r5
   3a2ec:	mov	r3, r0
   3a2f0:	mov	r0, r6
   3a2f4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3a2f8:	b	3a254 <__assert_fail@plt+0x25bfc>
   3a2fc:	ldr	r3, [sp, #20]
   3a300:	add	r1, sp, #30
   3a304:	mov	r6, #1
   3a308:	cmp	r3, #0
   3a30c:	beq	3a344 <__assert_fail@plt+0x25cec>
   3a310:	add	r0, sp, #12
   3a314:	bl	2eea4 <__assert_fail@plt+0x1a84c>
   3a318:	add	r0, sp, #12
   3a31c:	movw	r1, #33896	; 0x8468
   3a320:	mov	r2, r6
   3a324:	movt	r1, #4
   3a328:	bl	2edf0 <__assert_fail@plt+0x1a798>
   3a32c:	b	3a0a4 <__assert_fail@plt+0x25a4c>
   3a330:	ldr	r3, [sp, #20]
   3a334:	add	r1, sp, #28
   3a338:	mov	r6, #1
   3a33c:	cmp	r3, #0
   3a340:	bne	3a310 <__assert_fail@plt+0x25cb8>
   3a344:	ldr	r3, [sp, #24]
   3a348:	cmp	r3, #0
   3a34c:	beq	3a0a4 <__assert_fail@plt+0x25a4c>
   3a350:	b	3a310 <__assert_fail@plt+0x25cb8>
   3a354:	bl	14148 <__errno_location@plt>
   3a358:	ldr	r3, [r0]
   3a35c:	cmp	r3, #2
   3a360:	beq	3a3a4 <__assert_fail@plt+0x25d4c>
   3a364:	bl	14580 <gpg_err_code_from_syserror@plt>
   3a368:	mov	r2, #5
   3a36c:	movw	r1, #18788	; 0x4964
   3a370:	movt	r1, #4
   3a374:	cmp	r0, #0
   3a378:	uxthne	r4, r0
   3a37c:	moveq	r4, r0
   3a380:	mov	r0, #0
   3a384:	bl	13cc8 <dcgettext@plt>
   3a388:	mov	r5, r0
   3a38c:	mov	r0, r4
   3a390:	bl	13a64 <gpg_strerror@plt>
   3a394:	mov	r1, r7
   3a398:	mov	r2, r0
   3a39c:	mov	r0, r5
   3a3a0:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3a3a4:	mov	r0, #0
   3a3a8:	b	3a290 <__assert_fail@plt+0x25c38>
   3a3ac:	ldr	r3, [sp, #24]
   3a3b0:	cmp	r3, #0
   3a3b4:	bne	3a268 <__assert_fail@plt+0x25c10>
   3a3b8:	b	3a3a4 <__assert_fail@plt+0x25d4c>
   3a3bc:	mov	r3, r1
   3a3c0:	cmp	r3, #0
   3a3c4:	cmpne	r3, #35	; 0x23
   3a3c8:	bne	3a1f0 <__assert_fail@plt+0x25b98>
   3a3cc:	b	3a1a4 <__assert_fail@plt+0x25b4c>
   3a3d0:	mov	r1, #0
   3a3d4:	add	r0, sp, #12
   3a3d8:	bl	2eecc <__assert_fail@plt+0x1a874>
   3a3dc:	bl	13c44 <gcry_free@plt>
   3a3e0:	mov	r0, #0
   3a3e4:	b	3a290 <__assert_fail@plt+0x25c38>
   3a3e8:	add	r0, sp, #28
   3a3ec:	bl	3b418 <__assert_fail@plt+0x26dc0>
   3a3f0:	add	r0, sp, #29
   3a3f4:	ldr	r1, [sp, #4]
   3a3f8:	bl	13a28 <strcmp@plt>
   3a3fc:	cmp	r0, #0
   3a400:	bne	3a1ac <__assert_fail@plt+0x25b54>
   3a404:	add	r0, sp, #12
   3a408:	mov	r1, #1024	; 0x400
   3a40c:	bl	2ed78 <__assert_fail@plt+0x1a720>
   3a410:	mov	r6, #1
   3a414:	b	3a0a4 <__assert_fail@plt+0x25a4c>
   3a418:	bl	13cec <__stack_chk_fail@plt>
   3a41c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3a420:	mov	r8, r0
   3a424:	mov	r0, r3
   3a428:	mov	r4, r1
   3a42c:	mov	r5, r3
   3a430:	mov	r9, r2
   3a434:	bl	14094 <strlen@plt>
   3a438:	mov	r6, r0
   3a43c:	mov	r0, r4
   3a440:	bl	14094 <strlen@plt>
   3a444:	add	r0, r6, r0
   3a448:	add	r0, r0, #11
   3a44c:	bl	139c8 <gcry_malloc@plt>
   3a450:	subs	r7, r0, #0
   3a454:	beq	3a57c <__assert_fail@plt+0x25f24>
   3a458:	mov	r1, r5
   3a45c:	bl	13cb0 <stpcpy@plt>
   3a460:	movw	r3, #35352	; 0x8a18
   3a464:	movt	r3, #4
   3a468:	mov	r1, #95	; 0x5f
   3a46c:	ldrh	r2, [r3, #4]
   3a470:	mov	r5, r0
   3a474:	mov	r6, r0
   3a478:	ldr	r0, [r3]
   3a47c:	ldrb	r3, [r3, #6]
   3a480:	strh	r2, [r5, #4]
   3a484:	str	r0, [r5]
   3a488:	mov	r0, r4
   3a48c:	strb	r3, [r6, #6]!
   3a490:	bl	140ac <strchr@plt>
   3a494:	cmp	r0, #0
   3a498:	beq	3a4e8 <__assert_fail@plt+0x25e90>
   3a49c:	mov	r1, r4
   3a4a0:	mov	r0, r6
   3a4a4:	bl	13cb0 <stpcpy@plt>
   3a4a8:	movw	r3, #35360	; 0x8a20
   3a4ac:	movt	r3, #4
   3a4b0:	mov	r1, r7
   3a4b4:	mov	r2, r0
   3a4b8:	ldr	r0, [r3]
   3a4bc:	ldrb	r3, [r3, #4]
   3a4c0:	str	r0, [r2]
   3a4c4:	mov	r0, r8
   3a4c8:	strb	r3, [r2, #4]
   3a4cc:	bl	3a04c <__assert_fail@plt+0x259f4>
   3a4d0:	subs	sl, r0, #0
   3a4d4:	beq	3a4e8 <__assert_fail@plt+0x25e90>
   3a4d8:	mov	r0, r7
   3a4dc:	bl	13c44 <gcry_free@plt>
   3a4e0:	mov	r0, sl
   3a4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a4e8:	ldrb	r3, [r4]
   3a4ec:	cmp	r3, #0
   3a4f0:	beq	3a540 <__assert_fail@plt+0x25ee8>
   3a4f4:	cmp	r3, #95	; 0x5f
   3a4f8:	beq	3a514 <__assert_fail@plt+0x25ebc>
   3a4fc:	mov	r2, r4
   3a500:	strb	r3, [r6], #1
   3a504:	ldrb	r3, [r2, #1]!
   3a508:	cmp	r3, #95	; 0x5f
   3a50c:	cmpne	r3, #0
   3a510:	bne	3a500 <__assert_fail@plt+0x25ea8>
   3a514:	movw	r3, #35360	; 0x8a20
   3a518:	movt	r3, #4
   3a51c:	mov	r1, r7
   3a520:	ldr	r0, [r3]
   3a524:	ldrb	r3, [r3, #4]
   3a528:	str	r0, [r6]
   3a52c:	mov	r0, r8
   3a530:	strb	r3, [r6, #4]
   3a534:	bl	3a04c <__assert_fail@plt+0x259f4>
   3a538:	subs	sl, r0, #0
   3a53c:	bne	3a4d8 <__assert_fail@plt+0x25e80>
   3a540:	cmp	r9, #0
   3a544:	beq	3a558 <__assert_fail@plt+0x25f00>
   3a548:	ldrb	r3, [r4]
   3a54c:	cmp	r3, #0
   3a550:	movne	sl, #0
   3a554:	bne	3a4d8 <__assert_fail@plt+0x25e80>
   3a558:	movw	r3, #35368	; 0x8a28
   3a55c:	movt	r3, #4
   3a560:	mov	r1, r7
   3a564:	ldr	r0, [r3]
   3a568:	str	r0, [r5, #6]
   3a56c:	mov	r0, r8
   3a570:	bl	3a04c <__assert_fail@plt+0x259f4>
   3a574:	mov	sl, r0
   3a578:	b	3a4d8 <__assert_fail@plt+0x25e80>
   3a57c:	mov	r0, r7
   3a580:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3a584:	push	{r3, r4, r5, r6, r7, lr}
   3a588:	movw	r4, #47964	; 0xbb5c
   3a58c:	movt	r4, #5
   3a590:	mov	r5, r0
   3a594:	mov	r7, r1
   3a598:	ldr	r6, [r4]
   3a59c:	cmp	r6, #0
   3a5a0:	beq	3a620 <__assert_fail@plt+0x25fc8>
   3a5a4:	cmp	r5, #0
   3a5a8:	beq	3a618 <__assert_fail@plt+0x25fc0>
   3a5ac:	ldrb	r3, [r5]
   3a5b0:	cmp	r3, #0
   3a5b4:	beq	3a618 <__assert_fail@plt+0x25fc0>
   3a5b8:	ldr	r6, [r4]
   3a5bc:	bl	2c9bc <__assert_fail@plt+0x18364>
   3a5c0:	mov	r2, r7
   3a5c4:	movw	r4, #47964	; 0xbb5c
   3a5c8:	movt	r4, #5
   3a5cc:	mov	r1, r6
   3a5d0:	mov	r3, r0
   3a5d4:	mov	r0, r5
   3a5d8:	bl	3a41c <__assert_fail@plt+0x25dc4>
   3a5dc:	subs	r6, r0, #0
   3a5e0:	beq	3a5f4 <__assert_fail@plt+0x25f9c>
   3a5e4:	mov	r0, r6
   3a5e8:	bl	3b418 <__assert_fail@plt+0x26dc0>
   3a5ec:	mov	r0, r6
   3a5f0:	pop	{r3, r4, r5, r6, r7, pc}
   3a5f4:	ldr	r4, [r4]
   3a5f8:	bl	2c9ec <__assert_fail@plt+0x18394>
   3a5fc:	mov	r2, r7
   3a600:	mov	r1, r4
   3a604:	mov	r3, r0
   3a608:	mov	r0, r5
   3a60c:	bl	3a41c <__assert_fail@plt+0x25dc4>
   3a610:	subs	r6, r0, #0
   3a614:	bne	3a5e4 <__assert_fail@plt+0x25f8c>
   3a618:	mov	r0, #0
   3a61c:	pop	{r3, r4, r5, r6, r7, pc}
   3a620:	bl	3ab48 <__assert_fail@plt+0x264f0>
   3a624:	bl	13f2c <gcry_strdup@plt>
   3a628:	cmp	r0, #0
   3a62c:	beq	3a694 <__assert_fail@plt+0x2603c>
   3a630:	ldrb	r3, [r0]
   3a634:	cmp	r3, #0
   3a638:	addne	r1, r0, #1
   3a63c:	movne	ip, r6
   3a640:	bne	3a654 <__assert_fail@plt+0x25ffc>
   3a644:	b	3a68c <__assert_fail@plt+0x26034>
   3a648:	ldrb	r3, [r1], #1
   3a64c:	cmp	r3, #0
   3a650:	beq	3a68c <__assert_fail@plt+0x26034>
   3a654:	sub	r2, r3, #46	; 0x2e
   3a658:	cmp	r3, #64	; 0x40
   3a65c:	cmpne	r2, #1
   3a660:	strbls	ip, [r1, #-1]
   3a664:	movhi	r2, #0
   3a668:	movls	r2, #1
   3a66c:	bls	3a648 <__assert_fail@plt+0x25ff0>
   3a670:	cmp	r3, #95	; 0x5f
   3a674:	bne	3a648 <__assert_fail@plt+0x25ff0>
   3a678:	cmp	r6, #0
   3a67c:	add	r6, r6, #1
   3a680:	strbne	r2, [r1, #-1]
   3a684:	moveq	r6, #1
   3a688:	b	3a648 <__assert_fail@plt+0x25ff0>
   3a68c:	str	r0, [r4]
   3a690:	b	3a5a4 <__assert_fail@plt+0x25f4c>
   3a694:	movw	r3, #18888	; 0x49c8
   3a698:	movt	r3, #4
   3a69c:	str	r3, [r4]
   3a6a0:	b	3a5a4 <__assert_fail@plt+0x25f4c>
   3a6a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3a6a8:	movw	r8, #47296	; 0xb8c0
   3a6ac:	movt	r8, #5
   3a6b0:	sub	sp, sp, #28
   3a6b4:	cmp	r1, #1
   3a6b8:	mov	r7, r2
   3a6bc:	ldr	ip, [r8]
   3a6c0:	str	r3, [sp, #12]
   3a6c4:	ldr	fp, [sp, #64]	; 0x40
   3a6c8:	str	ip, [sp, #20]
   3a6cc:	bls	3a7ec <__assert_fail@plt+0x26194>
   3a6d0:	add	r9, fp, #1
   3a6d4:	b	3a6f8 <__assert_fail@plt+0x260a0>
   3a6d8:	cmp	r6, r7
   3a6dc:	beq	3a808 <__assert_fail@plt+0x261b0>
   3a6e0:	cmp	r5, r4
   3a6e4:	bcc	3a7ec <__assert_fail@plt+0x26194>
   3a6e8:	add	r0, sl, r4
   3a6ec:	rsb	r1, r4, r5
   3a6f0:	cmp	r1, #1
   3a6f4:	bls	3a7ec <__assert_fail@plt+0x26194>
   3a6f8:	ldrb	r6, [r0]
   3a6fc:	sub	r3, r6, #1
   3a700:	uxtb	r3, r3
   3a704:	cmp	r3, #253	; 0xfd
   3a708:	addhi	r0, r0, #1
   3a70c:	subhi	r1, r1, #1
   3a710:	bhi	3a6f0 <__assert_fail@plt+0x26098>
   3a714:	and	r2, r6, #31
   3a718:	ubfx	r3, r6, #5, #1
   3a71c:	cmp	r2, #31
   3a720:	beq	3a7a8 <__assert_fail@plt+0x26150>
   3a724:	ldrb	r4, [r0, #1]
   3a728:	sub	r5, r1, #2
   3a72c:	cmp	r4, #127	; 0x7f
   3a730:	addls	sl, r0, #2
   3a734:	bls	3a764 <__assert_fail@plt+0x2610c>
   3a738:	cmp	r4, #129	; 0x81
   3a73c:	beq	3a7d8 <__assert_fail@plt+0x26180>
   3a740:	cmp	r4, #130	; 0x82
   3a744:	bne	3a7ec <__assert_fail@plt+0x26194>
   3a748:	cmp	r5, #1
   3a74c:	bls	3a7ec <__assert_fail@plt+0x26194>
   3a750:	ldrb	r4, [r0, #2]
   3a754:	sub	r5, r1, #4
   3a758:	ldrb	r2, [r0, #3]
   3a75c:	add	sl, r0, #4
   3a760:	orr	r4, r2, r4, lsl #8
   3a764:	cmp	fp, #99	; 0x63
   3a768:	movgt	r3, #0
   3a76c:	andle	r3, r3, #1
   3a770:	cmp	r3, #0
   3a774:	beq	3a6d8 <__assert_fail@plt+0x26080>
   3a778:	str	r9, [sp]
   3a77c:	mov	r0, sl
   3a780:	mov	r1, r4
   3a784:	mov	r2, r7
   3a788:	add	r3, sp, #16
   3a78c:	bl	3a6a4 <__assert_fail@plt+0x2604c>
   3a790:	cmp	r0, #0
   3a794:	beq	3a6d8 <__assert_fail@plt+0x26080>
   3a798:	ldr	r3, [sp, #16]
   3a79c:	ldr	r2, [sp, #12]
   3a7a0:	str	r3, [r2]
   3a7a4:	b	3a7f0 <__assert_fail@plt+0x26198>
   3a7a8:	sub	r1, r1, #1
   3a7ac:	add	ip, r0, #1
   3a7b0:	cmp	r1, #1
   3a7b4:	beq	3a7ec <__assert_fail@plt+0x26194>
   3a7b8:	ldrb	r2, [r0, #1]
   3a7bc:	and	r0, r2, #31
   3a7c0:	cmp	r0, #31
   3a7c4:	beq	3a7ec <__assert_fail@plt+0x26194>
   3a7c8:	and	r2, r2, #127	; 0x7f
   3a7cc:	mov	r0, ip
   3a7d0:	orr	r6, r2, r6, lsl #8
   3a7d4:	b	3a724 <__assert_fail@plt+0x260cc>
   3a7d8:	cmp	r5, #0
   3a7dc:	subne	r5, r1, #3
   3a7e0:	ldrbne	r4, [r0, #2]
   3a7e4:	addne	sl, r0, #3
   3a7e8:	bne	3a764 <__assert_fail@plt+0x2610c>
   3a7ec:	mov	r0, #0
   3a7f0:	ldr	r2, [sp, #20]
   3a7f4:	ldr	r3, [r8]
   3a7f8:	cmp	r2, r3
   3a7fc:	bne	3a818 <__assert_fail@plt+0x261c0>
   3a800:	add	sp, sp, #28
   3a804:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3a808:	ldr	r3, [sp, #12]
   3a80c:	mov	r0, sl
   3a810:	str	r4, [r3]
   3a814:	b	3a7f0 <__assert_fail@plt+0x26198>
   3a818:	bl	13cec <__stack_chk_fail@plt>
   3a81c:	push	{r4, r5, r6, lr}
   3a820:	sub	sp, sp, #8
   3a824:	mov	ip, #0
   3a828:	mov	r6, r0
   3a82c:	str	ip, [sp]
   3a830:	mov	r4, r1
   3a834:	mov	r5, r3
   3a838:	bl	3a6a4 <__assert_fail@plt+0x2604c>
   3a83c:	cmp	r0, #0
   3a840:	beq	3a858 <__assert_fail@plt+0x26200>
   3a844:	rsb	r6, r0, r6
   3a848:	ldr	r3, [r5]
   3a84c:	add	r4, r6, r4
   3a850:	cmp	r3, r4
   3a854:	movhi	r0, #0
   3a858:	add	sp, sp, #8
   3a85c:	pop	{r4, r5, r6, pc}
   3a860:	push	{lr}		; (str lr, [sp, #-4]!)
   3a864:	sub	sp, sp, #12
   3a868:	mov	ip, #0
   3a86c:	str	ip, [sp]
   3a870:	bl	3a6a4 <__assert_fail@plt+0x2604c>
   3a874:	add	sp, sp, #12
   3a878:	pop	{pc}		; (ldr pc, [sp], #4)
   3a87c:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   3a880:	mov	r6, #0
   3a884:	ldr	r4, [r1]
   3a888:	mov	sl, r0
   3a88c:	ldr	r9, [sp, #36]	; 0x24
   3a890:	ldr	r8, [sp, #40]	; 0x28
   3a894:	cmp	r4, #0
   3a898:	ldr	ip, [sp, #44]	; 0x2c
   3a89c:	ldr	r7, [r0]
   3a8a0:	str	r6, [r9]
   3a8a4:	str	r6, [r8]
   3a8a8:	str	r6, [ip]
   3a8ac:	beq	3a9f0 <__assert_fail@plt+0x26398>
   3a8b0:	ldrb	r0, [r7]
   3a8b4:	mov	fp, #1
   3a8b8:	str	fp, [ip]
   3a8bc:	sub	r4, r4, #1
   3a8c0:	and	r5, r0, #31
   3a8c4:	add	r7, r7, #1
   3a8c8:	lsr	fp, r0, #6
   3a8cc:	str	fp, [r2]
   3a8d0:	ldr	fp, [sp, #32]
   3a8d4:	cmp	r5, #31
   3a8d8:	ubfx	r0, r0, #5, #1
   3a8dc:	str	r0, [fp]
   3a8e0:	beq	3a9b8 <__assert_fail@plt+0x26360>
   3a8e4:	cmp	r4, #0
   3a8e8:	str	r5, [r3]
   3a8ec:	beq	3a9f0 <__assert_fail@plt+0x26398>
   3a8f0:	ldrb	r0, [r7]
   3a8f4:	sub	r4, r4, #1
   3a8f8:	ldr	r6, [ip]
   3a8fc:	add	r5, r7, #1
   3a900:	tst	r0, #128	; 0x80
   3a904:	add	fp, r6, #1
   3a908:	str	fp, [ip]
   3a90c:	beq	3a988 <__assert_fail@plt+0x26330>
   3a910:	cmp	r0, #128	; 0x80
   3a914:	moveq	r0, #1
   3a918:	streq	r0, [r9]
   3a91c:	beq	3a98c <__assert_fail@plt+0x26334>
   3a920:	cmp	r0, #255	; 0xff
   3a924:	beq	3aa08 <__assert_fail@plt+0x263b0>
   3a928:	and	r0, r0, #127	; 0x7f
   3a92c:	cmp	r0, #4
   3a930:	bhi	3aa08 <__assert_fail@plt+0x263b0>
   3a934:	cmp	r0, #0
   3a938:	beq	3a988 <__assert_fail@plt+0x26330>
   3a93c:	cmp	r4, #0
   3a940:	beq	3a9f0 <__assert_fail@plt+0x26398>
   3a944:	add	r9, r5, r0
   3a948:	rsb	r6, r7, r6
   3a94c:	mov	r0, #0
   3a950:	add	r7, r7, #2
   3a954:	b	3a968 <__assert_fail@plt+0x26310>
   3a958:	cmp	r4, #0
   3a95c:	lsl	r0, r0, #8
   3a960:	add	r7, r7, #1
   3a964:	beq	3a9f0 <__assert_fail@plt+0x26398>
   3a968:	ldrb	fp, [r7, #-1]
   3a96c:	cmp	r7, r9
   3a970:	add	r5, r6, r7
   3a974:	sub	r4, r4, #1
   3a978:	str	r5, [ip]
   3a97c:	orr	r0, r0, fp
   3a980:	mov	r5, r7
   3a984:	bne	3a958 <__assert_fail@plt+0x26300>
   3a988:	str	r0, [r8]
   3a98c:	ldr	r2, [r2]
   3a990:	cmp	r2, #0
   3a994:	bne	3a9a4 <__assert_fail@plt+0x2634c>
   3a998:	ldr	r3, [r3]
   3a99c:	cmp	r3, #0
   3a9a0:	streq	r3, [r8]
   3a9a4:	str	r5, [sl]
   3a9a8:	mov	r0, #0
   3a9ac:	str	r4, [r1]
   3a9b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   3a9b4:	bx	lr
   3a9b8:	mov	r5, r6
   3a9bc:	b	3a9e0 <__assert_fail@plt+0x26388>
   3a9c0:	ldrb	r6, [r7], #1
   3a9c4:	ldr	r0, [ip]
   3a9c8:	tst	r6, #128	; 0x80
   3a9cc:	and	r6, r6, #127	; 0x7f
   3a9d0:	add	r0, r0, #1
   3a9d4:	orr	r5, r6, r5
   3a9d8:	str	r0, [ip]
   3a9dc:	beq	3a8e4 <__assert_fail@plt+0x2628c>
   3a9e0:	cmp	r4, #0
   3a9e4:	lsl	r5, r5, #7
   3a9e8:	sub	r4, r4, #1
   3a9ec:	bne	3a9c0 <__assert_fail@plt+0x26368>
   3a9f0:	ldr	r3, [sp, #48]	; 0x30
   3a9f4:	and	r0, r3, #127	; 0x7f
   3a9f8:	mvn	r0, r0, lsl #10
   3a9fc:	mvn	r0, r0, lsl #14
   3aa00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   3aa04:	bx	lr
   3aa08:	ldr	r3, [sp, #48]	; 0x30
   3aa0c:	and	r0, r3, #127	; 0x7f
   3aa10:	lsl	r0, r0, #24
   3aa14:	orr	r0, r0, #134	; 0x86
   3aa18:	b	3aa00 <__assert_fail@plt+0x263a8>
   3aa1c:	push	{r4, r5, r6, r7, r8, r9}
   3aa20:	mov	r4, #0
   3aa24:	ldr	ip, [r1]
   3aa28:	mov	r9, r0
   3aa2c:	ldr	r8, [sp, #24]
   3aa30:	cmp	ip, #0
   3aa34:	ldr	r7, [r0]
   3aa38:	str	r4, [r3]
   3aa3c:	str	r4, [r8]
   3aa40:	bne	3aa68 <__assert_fail@plt+0x26410>
   3aa44:	ldr	r0, [r2]
   3aa48:	cmp	r0, r4
   3aa4c:	beq	3aa60 <__assert_fail@plt+0x26408>
   3aa50:	ldr	r3, [sp, #28]
   3aa54:	and	r0, r3, #127	; 0x7f
   3aa58:	lsl	r0, r0, #24
   3aa5c:	orr	r0, r0, #83	; 0x53
   3aa60:	pop	{r4, r5, r6, r7, r8, r9}
   3aa64:	bx	lr
   3aa68:	ldrb	r0, [r7]
   3aa6c:	cmp	r0, #40	; 0x28
   3aa70:	beq	3aabc <__assert_fail@plt+0x26464>
   3aa74:	cmp	r0, #41	; 0x29
   3aa78:	movne	r2, r0
   3aa7c:	bne	3aa88 <__assert_fail@plt+0x26430>
   3aa80:	b	3aae0 <__assert_fail@plt+0x26488>
   3aa84:	ldrb	r2, [r7, #1]!
   3aa88:	add	r5, r4, r4, lsl #2
   3aa8c:	cmp	r2, #0
   3aa90:	sub	r6, r2, #48	; 0x30
   3aa94:	add	r5, r2, r5, lsl #1
   3aa98:	beq	3aa50 <__assert_fail@plt+0x263f8>
   3aa9c:	cmp	r2, #58	; 0x3a
   3aaa0:	beq	3ab18 <__assert_fail@plt+0x264c0>
   3aaa4:	cmp	r6, #9
   3aaa8:	sub	r4, r5, #48	; 0x30
   3aaac:	bhi	3aa50 <__assert_fail@plt+0x263f8>
   3aab0:	subs	ip, ip, #1
   3aab4:	bne	3aa84 <__assert_fail@plt+0x2642c>
   3aab8:	b	3aa50 <__assert_fail@plt+0x263f8>
   3aabc:	ldr	r3, [r2]
   3aac0:	add	r7, r7, #1
   3aac4:	sub	ip, ip, #1
   3aac8:	mov	r0, r4
   3aacc:	add	r3, r3, #1
   3aad0:	str	r3, [r2]
   3aad4:	str	r7, [r9]
   3aad8:	str	ip, [r1]
   3aadc:	b	3aa60 <__assert_fail@plt+0x26408>
   3aae0:	ldr	r3, [r2]
   3aae4:	cmp	r3, #0
   3aae8:	beq	3aa50 <__assert_fail@plt+0x263f8>
   3aaec:	mov	r3, #1
   3aaf0:	str	r3, [r8]
   3aaf4:	ldr	r3, [r2]
   3aaf8:	add	r7, r7, #1
   3aafc:	sub	ip, ip, #1
   3ab00:	mov	r0, r4
   3ab04:	sub	r3, r3, #1
   3ab08:	str	r3, [r2]
   3ab0c:	str	r7, [r9]
   3ab10:	str	ip, [r1]
   3ab14:	b	3aa60 <__assert_fail@plt+0x26408>
   3ab18:	sub	ip, ip, #1
   3ab1c:	cmp	ip, r4
   3ab20:	bcc	3aa50 <__assert_fail@plt+0x263f8>
   3ab24:	add	r7, r7, #1
   3ab28:	rsb	ip, r4, ip
   3ab2c:	str	r7, [r3]
   3ab30:	mov	r0, #0
   3ab34:	str	r4, [r8]
   3ab38:	add	r7, r7, r4
   3ab3c:	str	r7, [r9]
   3ab40:	str	ip, [r1]
   3ab44:	b	3aa60 <__assert_fail@plt+0x26408>
   3ab48:	push	{r4, lr}
   3ab4c:	mov	r0, #5
   3ab50:	mov	r1, #0
   3ab54:	bl	1434c <setlocale@plt>
   3ab58:	subs	r4, r0, #0
   3ab5c:	beq	3ab78 <__assert_fail@plt+0x26520>
   3ab60:	ldrb	r3, [r4]
   3ab64:	cmp	r3, #67	; 0x43
   3ab68:	bne	3ab88 <__assert_fail@plt+0x26530>
   3ab6c:	ldrb	r3, [r4, #1]
   3ab70:	cmp	r3, #0
   3ab74:	bne	3ab88 <__assert_fail@plt+0x26530>
   3ab78:	movw	r4, #18888	; 0x49c8
   3ab7c:	movt	r4, #4
   3ab80:	mov	r0, r4
   3ab84:	pop	{r4, pc}
   3ab88:	mov	r0, r4
   3ab8c:	movw	r1, #35372	; 0x8a2c
   3ab90:	movt	r1, #4
   3ab94:	bl	13a28 <strcmp@plt>
   3ab98:	movw	r3, #18888	; 0x49c8
   3ab9c:	movt	r3, #4
   3aba0:	cmp	r0, #0
   3aba4:	moveq	r4, r3
   3aba8:	mov	r0, r4
   3abac:	pop	{r4, pc}
   3abb0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3abb4:	subs	r5, r0, #0
   3abb8:	mov	fp, r1
   3abbc:	mov	r8, r2
   3abc0:	beq	3ad58 <__assert_fail@plt+0x26700>
   3abc4:	ldrb	r3, [r5]
   3abc8:	cmp	r3, #0
   3abcc:	beq	3ad48 <__assert_fail@plt+0x266f0>
   3abd0:	mov	r7, #0
   3abd4:	mov	r6, r5
   3abd8:	mov	r4, r7
   3abdc:	cmp	r3, #58	; 0x3a
   3abe0:	cmpne	r3, #37	; 0x25
   3abe4:	mov	r1, r3
   3abe8:	mov	r0, fp
   3abec:	add	r4, r4, #1
   3abf0:	beq	3ac08 <__assert_fail@plt+0x265b0>
   3abf4:	cmp	fp, #0
   3abf8:	beq	3ac0c <__assert_fail@plt+0x265b4>
   3abfc:	bl	140ac <strchr@plt>
   3ac00:	cmp	r0, #0
   3ac04:	beq	3ac0c <__assert_fail@plt+0x265b4>
   3ac08:	add	r7, r7, #1
   3ac0c:	ldrb	r3, [r6, #1]!
   3ac10:	cmp	r3, #0
   3ac14:	bne	3abdc <__assert_fail@plt+0x26584>
   3ac18:	add	r4, r4, r7, lsl #1
   3ac1c:	add	r0, r4, #1
   3ac20:	cmp	r8, #0
   3ac24:	bne	3ad0c <__assert_fail@plt+0x266b4>
   3ac28:	bl	139c8 <gcry_malloc@plt>
   3ac2c:	subs	r9, r0, #0
   3ac30:	beq	3ad58 <__assert_fail@plt+0x26700>
   3ac34:	ldrb	r1, [r5]
   3ac38:	cmp	r1, #0
   3ac3c:	beq	3ad50 <__assert_fail@plt+0x266f8>
   3ac40:	add	r5, r5, #1
   3ac44:	mov	r4, #0
   3ac48:	mov	r6, #37	; 0x25
   3ac4c:	mov	sl, #50	; 0x32
   3ac50:	mov	r8, #51	; 0x33
   3ac54:	mov	r7, #97	; 0x61
   3ac58:	b	3acd0 <__assert_fail@plt+0x26678>
   3ac5c:	cmp	r1, #37	; 0x25
   3ac60:	beq	3ad18 <__assert_fail@plt+0x266c0>
   3ac64:	cmp	fp, #0
   3ac68:	beq	3ad38 <__assert_fail@plt+0x266e0>
   3ac6c:	mov	r0, fp
   3ac70:	bl	140ac <strchr@plt>
   3ac74:	cmp	r0, #0
   3ac78:	beq	3ad38 <__assert_fail@plt+0x266e0>
   3ac7c:	strb	r6, [r9, r4]
   3ac80:	add	r0, r4, #1
   3ac84:	ldrb	r2, [r5, #-1]
   3ac88:	add	r0, r9, r0
   3ac8c:	add	r1, r4, #2
   3ac90:	add	r4, r4, #3
   3ac94:	add	r1, r9, r1
   3ac98:	lsr	r2, r2, #4
   3ac9c:	cmp	r2, #9
   3aca0:	addle	r2, r2, #48	; 0x30
   3aca4:	addgt	r2, r2, #87	; 0x57
   3aca8:	strb	r2, [r0]
   3acac:	ldrb	r2, [r5, #-1]
   3acb0:	and	r2, r2, #15
   3acb4:	cmp	r2, #9
   3acb8:	addle	r2, r2, #48	; 0x30
   3acbc:	addgt	r2, r2, #87	; 0x57
   3acc0:	strb	r2, [r1]
   3acc4:	ldrb	r1, [r5], #1
   3acc8:	cmp	r1, #0
   3accc:	beq	3acfc <__assert_fail@plt+0x266a4>
   3acd0:	cmp	r1, #58	; 0x3a
   3acd4:	bne	3ac5c <__assert_fail@plt+0x26604>
   3acd8:	add	r1, r4, #2
   3acdc:	mov	r2, r9
   3ace0:	strb	r6, [r2, r4]!
   3ace4:	add	r4, r4, #3
   3ace8:	strb	r8, [r2, #1]
   3acec:	strb	r7, [r9, r1]
   3acf0:	ldrb	r1, [r5], #1
   3acf4:	cmp	r1, #0
   3acf8:	bne	3acd0 <__assert_fail@plt+0x26678>
   3acfc:	mov	r2, #0
   3ad00:	mov	r0, r9
   3ad04:	strb	r2, [r9, r4]
   3ad08:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ad0c:	bl	1398c <gcry_xmalloc@plt>
   3ad10:	mov	r9, r0
   3ad14:	b	3ac34 <__assert_fail@plt+0x265dc>
   3ad18:	add	r0, r4, #2
   3ad1c:	mov	r2, r9
   3ad20:	strb	r1, [r2, r4]!
   3ad24:	mov	r3, #53	; 0x35
   3ad28:	strb	sl, [r2, #1]
   3ad2c:	add	r4, r4, #3
   3ad30:	strb	r3, [r9, r0]
   3ad34:	b	3acc4 <__assert_fail@plt+0x2666c>
   3ad38:	ldrb	r2, [r5, #-1]
   3ad3c:	strb	r2, [r9, r4]
   3ad40:	add	r4, r4, #1
   3ad44:	b	3acc4 <__assert_fail@plt+0x2666c>
   3ad48:	mov	r0, #1
   3ad4c:	b	3ac20 <__assert_fail@plt+0x265c8>
   3ad50:	mov	r4, r1
   3ad54:	b	3acfc <__assert_fail@plt+0x266a4>
   3ad58:	mov	r0, #0
   3ad5c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ad60:	cmp	r1, #0
   3ad64:	push	{r4, lr}
   3ad68:	mov	r4, r0
   3ad6c:	beq	3ad9c <__assert_fail@plt+0x26744>
   3ad70:	mov	r0, r1
   3ad74:	bl	139ec <getpwnam@plt>
   3ad78:	cmp	r0, #0
   3ad7c:	popeq	{r4, pc}
   3ad80:	cmp	r4, #0
   3ad84:	ldr	r0, [r0, #20]
   3ad88:	bne	3ad94 <__assert_fail@plt+0x2673c>
   3ad8c:	pop	{r4, lr}
   3ad90:	b	13f2c <gcry_strdup@plt>
   3ad94:	pop	{r4, lr}
   3ad98:	b	141f0 <gcry_xstrdup@plt>
   3ad9c:	bl	13b0c <getuid@plt>
   3ada0:	bl	13a70 <getpwuid@plt>
   3ada4:	cmp	r0, #0
   3ada8:	bne	3ad80 <__assert_fail@plt+0x26728>
   3adac:	pop	{r4, pc}
   3adb0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3adb4:	movw	r6, #47296	; 0xb8c0
   3adb8:	movt	r6, #5
   3adbc:	sub	sp, sp, #136	; 0x88
   3adc0:	mov	sl, r0
   3adc4:	mov	r0, r1
   3adc8:	ldr	r3, [r6]
   3adcc:	mov	r4, r2
   3add0:	mov	r9, r1
   3add4:	str	r3, [sp, #132]	; 0x84
   3add8:	bl	14094 <strlen@plt>
   3addc:	mov	r7, r0
   3ade0:	ldr	r0, [r4]
   3ade4:	cmp	r0, #0
   3ade8:	str	r0, [sp, #4]
   3adec:	addeq	r7, r7, #1
   3adf0:	beq	3ae30 <__assert_fail@plt+0x267d8>
   3adf4:	bl	14094 <strlen@plt>
   3adf8:	add	r7, r7, #2
   3adfc:	add	r8, r4, #124	; 0x7c
   3ae00:	add	r5, sp, #4
   3ae04:	add	r7, r7, r0
   3ae08:	b	3ae20 <__assert_fail@plt+0x267c8>
   3ae0c:	bl	14094 <strlen@plt>
   3ae10:	cmp	r4, r8
   3ae14:	add	r0, r0, #1
   3ae18:	add	r7, r7, r0
   3ae1c:	beq	3aee4 <__assert_fail@plt+0x2688c>
   3ae20:	ldr	r0, [r4, #4]!
   3ae24:	cmp	r0, #0
   3ae28:	str	r0, [r5, #4]!
   3ae2c:	bne	3ae0c <__assert_fail@plt+0x267b4>
   3ae30:	ldrb	r3, [r9]
   3ae34:	add	r7, r7, #1
   3ae38:	cmp	r3, #126	; 0x7e
   3ae3c:	movne	r4, #0
   3ae40:	movne	r5, #1
   3ae44:	movne	r8, r4
   3ae48:	beq	3af00 <__assert_fail@plt+0x268a8>
   3ae4c:	cmp	sl, #0
   3ae50:	mov	r0, r7
   3ae54:	bne	3aed8 <__assert_fail@plt+0x26880>
   3ae58:	bl	139c8 <gcry_malloc@plt>
   3ae5c:	subs	r7, r0, #0
   3ae60:	beq	3b010 <__assert_fail@plt+0x269b8>
   3ae64:	cmp	r4, #0
   3ae68:	beq	3af88 <__assert_fail@plt+0x26930>
   3ae6c:	mov	r1, r4
   3ae70:	mov	r0, r7
   3ae74:	bl	13cb0 <stpcpy@plt>
   3ae78:	add	r1, r9, r5
   3ae7c:	bl	13cb0 <stpcpy@plt>
   3ae80:	mov	r5, r0
   3ae84:	mov	r0, r8
   3ae88:	bl	13c44 <gcry_free@plt>
   3ae8c:	ldr	r1, [sp, #4]
   3ae90:	cmp	r1, #0
   3ae94:	beq	3aebc <__assert_fail@plt+0x26864>
   3ae98:	add	r4, sp, #4
   3ae9c:	mov	r8, #47	; 0x2f
   3aea0:	mov	r0, r5
   3aea4:	strb	r8, [r0], #1
   3aea8:	bl	13cb0 <stpcpy@plt>
   3aeac:	ldr	r1, [r4, #4]!
   3aeb0:	cmp	r1, #0
   3aeb4:	mov	r5, r0
   3aeb8:	bne	3aea0 <__assert_fail@plt+0x26848>
   3aebc:	ldr	r2, [sp, #132]	; 0x84
   3aec0:	mov	r0, r7
   3aec4:	ldr	r3, [r6]
   3aec8:	cmp	r2, r3
   3aecc:	bne	3b038 <__assert_fail@plt+0x269e0>
   3aed0:	add	sp, sp, #136	; 0x88
   3aed4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3aed8:	bl	1398c <gcry_xmalloc@plt>
   3aedc:	mov	r7, r0
   3aee0:	b	3ae64 <__assert_fail@plt+0x2680c>
   3aee4:	cmp	sl, #0
   3aee8:	bne	3b020 <__assert_fail@plt+0x269c8>
   3aeec:	bl	14148 <__errno_location@plt>
   3aef0:	mov	r7, sl
   3aef4:	mov	r3, #22
   3aef8:	str	r3, [r0]
   3aefc:	b	3aebc <__assert_fail@plt+0x26864>
   3af00:	ldrb	r3, [r9, #1]
   3af04:	cmp	r3, #47	; 0x2f
   3af08:	cmpne	r3, #0
   3af0c:	beq	3afb0 <__assert_fail@plt+0x26958>
   3af10:	cmp	sl, #0
   3af14:	add	r0, r9, #1
   3af18:	beq	3af9c <__assert_fail@plt+0x26944>
   3af1c:	bl	141f0 <gcry_xstrdup@plt>
   3af20:	mov	r4, r0
   3af24:	mov	r1, #47	; 0x2f
   3af28:	mov	r0, r4
   3af2c:	bl	140ac <strchr@plt>
   3af30:	cmp	r0, #0
   3af34:	movne	r3, #0
   3af38:	strbne	r3, [r0]
   3af3c:	mov	r0, r4
   3af40:	bl	14094 <strlen@plt>
   3af44:	mov	r1, r4
   3af48:	add	r5, r0, #1
   3af4c:	mov	r0, sl
   3af50:	bl	3ad60 <__assert_fail@plt+0x26708>
   3af54:	mov	r8, r0
   3af58:	mov	r0, r4
   3af5c:	bl	13c44 <gcry_free@plt>
   3af60:	cmp	r8, #0
   3af64:	beq	3b008 <__assert_fail@plt+0x269b0>
   3af68:	mov	r0, r8
   3af6c:	mov	r4, r8
   3af70:	bl	14094 <strlen@plt>
   3af74:	cmp	sl, #0
   3af78:	add	r7, r7, r0
   3af7c:	mov	r0, r7
   3af80:	beq	3ae58 <__assert_fail@plt+0x26800>
   3af84:	b	3aed8 <__assert_fail@plt+0x26880>
   3af88:	mov	r1, r9
   3af8c:	mov	r0, r7
   3af90:	bl	13cb0 <stpcpy@plt>
   3af94:	mov	r5, r0
   3af98:	b	3ae84 <__assert_fail@plt+0x2682c>
   3af9c:	bl	13f2c <gcry_strdup@plt>
   3afa0:	subs	r4, r0, #0
   3afa4:	bne	3af24 <__assert_fail@plt+0x268cc>
   3afa8:	mov	r7, sl
   3afac:	b	3aebc <__assert_fail@plt+0x26864>
   3afb0:	movw	r0, #35416	; 0x8a58
   3afb4:	movt	r0, #4
   3afb8:	bl	13f14 <getenv@plt>
   3afbc:	subs	r4, r0, #0
   3afc0:	movne	r8, #0
   3afc4:	beq	3afe8 <__assert_fail@plt+0x26990>
   3afc8:	ldrb	r3, [r4]
   3afcc:	cmp	r3, #0
   3afd0:	beq	3b000 <__assert_fail@plt+0x269a8>
   3afd4:	mov	r0, r4
   3afd8:	mov	r5, #1
   3afdc:	bl	14094 <strlen@plt>
   3afe0:	add	r7, r7, r0
   3afe4:	b	3ae4c <__assert_fail@plt+0x267f4>
   3afe8:	mov	r1, r4
   3afec:	mov	r0, sl
   3aff0:	bl	3ad60 <__assert_fail@plt+0x26708>
   3aff4:	subs	r8, r0, #0
   3aff8:	mov	r4, r8
   3affc:	bne	3afc8 <__assert_fail@plt+0x26970>
   3b000:	mov	r5, #1
   3b004:	b	3ae4c <__assert_fail@plt+0x267f4>
   3b008:	mov	r4, r8
   3b00c:	b	3b000 <__assert_fail@plt+0x269a8>
   3b010:	mov	r0, r8
   3b014:	mov	r7, sl
   3b018:	bl	13c44 <gcry_free@plt>
   3b01c:	b	3aebc <__assert_fail@plt+0x26864>
   3b020:	movw	r0, #35400	; 0x8a48
   3b024:	movw	r2, #35380	; 0x8a34
   3b028:	movt	r0, #4
   3b02c:	movt	r2, #4
   3b030:	movw	r1, #374	; 0x176
   3b034:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   3b038:	bl	13cec <__stack_chk_fail@plt>
   3b03c:	push	{r4, r5, r6, r7, r8, lr}
   3b040:	movw	r7, #47296	; 0xb8c0
   3b044:	movt	r7, #5
   3b048:	sub	sp, sp, #200	; 0xc8
   3b04c:	mov	r4, r1
   3b050:	ldr	r3, [r7]
   3b054:	str	r0, [sp, #4]
   3b058:	str	r3, [sp, #196]	; 0xc4
   3b05c:	bl	14094 <strlen@plt>
   3b060:	mov	r5, r0
   3b064:	ldr	r0, [r4]
   3b068:	cmp	r0, #0
   3b06c:	str	r0, [sp, #8]
   3b070:	beq	3b0a8 <__assert_fail@plt+0x26a50>
   3b074:	bl	14094 <strlen@plt>
   3b078:	add	r8, r4, #184	; 0xb8
   3b07c:	add	r6, sp, #8
   3b080:	add	r5, r5, r0
   3b084:	b	3b098 <__assert_fail@plt+0x26a40>
   3b088:	bl	14094 <strlen@plt>
   3b08c:	cmp	r4, r8
   3b090:	add	r5, r5, r0
   3b094:	beq	3b0fc <__assert_fail@plt+0x26aa4>
   3b098:	ldr	r0, [r4, #4]!
   3b09c:	cmp	r0, #0
   3b0a0:	str	r0, [r6, #4]!
   3b0a4:	bne	3b088 <__assert_fail@plt+0x26a30>
   3b0a8:	add	r0, r5, #1
   3b0ac:	bl	139c8 <gcry_malloc@plt>
   3b0b0:	subs	r5, r0, #0
   3b0b4:	beq	3b0dc <__assert_fail@plt+0x26a84>
   3b0b8:	ldr	r1, [sp, #4]
   3b0bc:	cmp	r1, #0
   3b0c0:	beq	3b0dc <__assert_fail@plt+0x26a84>
   3b0c4:	add	r4, sp, #4
   3b0c8:	mov	r0, r5
   3b0cc:	bl	13cb0 <stpcpy@plt>
   3b0d0:	ldr	r1, [r4, #4]!
   3b0d4:	cmp	r1, #0
   3b0d8:	bne	3b0cc <__assert_fail@plt+0x26a74>
   3b0dc:	mov	r3, r5
   3b0e0:	ldr	r2, [sp, #196]	; 0xc4
   3b0e4:	mov	r0, r3
   3b0e8:	ldr	r3, [r7]
   3b0ec:	cmp	r2, r3
   3b0f0:	bne	3b110 <__assert_fail@plt+0x26ab8>
   3b0f4:	add	sp, sp, #200	; 0xc8
   3b0f8:	pop	{r4, r5, r6, r7, r8, pc}
   3b0fc:	bl	14148 <__errno_location@plt>
   3b100:	mov	r2, #22
   3b104:	mov	r3, #0
   3b108:	str	r2, [r0]
   3b10c:	b	3b0e0 <__assert_fail@plt+0x26a88>
   3b110:	bl	13cec <__stack_chk_fail@plt>
   3b114:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3b118:	subs	r6, r1, #0
   3b11c:	sub	sp, sp, #12
   3b120:	mov	r9, r0
   3b124:	beq	3b1f0 <__assert_fail@plt+0x26b98>
   3b128:	str	r2, [sp, #4]
   3b12c:	bl	14004 <__ctype_toupper_loc@plt>
   3b130:	ldr	r2, [sp, #4]
   3b134:	sub	r6, r6, #1
   3b138:	mov	r8, r9
   3b13c:	mov	fp, r2
   3b140:	ldrb	r3, [fp], #1
   3b144:	ldr	r1, [r0]
   3b148:	ldr	sl, [r1, r3, lsl #2]
   3b14c:	b	3b164 <__assert_fail@plt+0x26b0c>
   3b150:	cmp	r6, #0
   3b154:	add	r9, r9, #1
   3b158:	sub	r3, r6, #1
   3b15c:	beq	3b1f0 <__assert_fail@plt+0x26b98>
   3b160:	mov	r6, r3
   3b164:	mov	r0, r8
   3b168:	ldrb	r3, [r8], #1
   3b16c:	add	r7, r6, #1
   3b170:	ldr	r3, [r1, r3, lsl #2]
   3b174:	cmp	r3, sl
   3b178:	bne	3b150 <__assert_fail@plt+0x26af8>
   3b17c:	cmp	r6, #0
   3b180:	ldrb	r4, [r2, #1]
   3b184:	beq	3b1d8 <__assert_fail@plt+0x26b80>
   3b188:	ldrb	ip, [r9, #1]
   3b18c:	ldr	r3, [r1, r4, lsl #2]
   3b190:	ldr	ip, [r1, ip, lsl #2]
   3b194:	cmp	ip, r3
   3b198:	bne	3b1d8 <__assert_fail@plt+0x26b80>
   3b19c:	add	r7, r9, r7
   3b1a0:	add	r3, r9, #2
   3b1a4:	mov	ip, fp
   3b1a8:	str	r2, [sp]
   3b1ac:	b	3b1c8 <__assert_fail@plt+0x26b70>
   3b1b0:	ldrb	r4, [ip, #1]!
   3b1b4:	ldrb	r5, [r3], #1
   3b1b8:	ldr	r2, [r1, r4, lsl #2]
   3b1bc:	ldr	r5, [r1, r5, lsl #2]
   3b1c0:	cmp	r5, r2
   3b1c4:	bne	3b1e8 <__assert_fail@plt+0x26b90>
   3b1c8:	cmp	r3, r7
   3b1cc:	bne	3b1b0 <__assert_fail@plt+0x26b58>
   3b1d0:	ldr	r2, [sp]
   3b1d4:	ldrb	r4, [ip, #1]
   3b1d8:	cmp	r4, #0
   3b1dc:	bne	3b150 <__assert_fail@plt+0x26af8>
   3b1e0:	add	sp, sp, #12
   3b1e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b1e8:	ldr	r2, [sp]
   3b1ec:	b	3b1d8 <__assert_fail@plt+0x26b80>
   3b1f0:	mov	r0, r6
   3b1f4:	add	sp, sp, #12
   3b1f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3b1fc:	cmp	r1, #0
   3b200:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   3b204:	beq	3b2d4 <__assert_fail@plt+0x26c7c>
   3b208:	mov	fp, r2
   3b20c:	sub	r8, r1, #1
   3b210:	ldrb	sl, [fp], #1
   3b214:	sub	r3, sl, #97	; 0x61
   3b218:	cmp	r3, #25
   3b21c:	andls	sl, sl, #223	; 0xdf
   3b220:	b	3b238 <__assert_fail@plt+0x26be0>
   3b224:	cmp	r8, #0
   3b228:	sub	r3, r8, #1
   3b22c:	beq	3b2c8 <__assert_fail@plt+0x26c70>
   3b230:	mov	r8, r3
   3b234:	mov	r0, r7
   3b238:	mov	r7, r0
   3b23c:	ldrb	r3, [r7], #1
   3b240:	sub	r1, r3, #97	; 0x61
   3b244:	cmp	r1, #25
   3b248:	bicls	r3, r3, #32
   3b24c:	cmp	r3, sl
   3b250:	bne	3b224 <__assert_fail@plt+0x26bcc>
   3b254:	cmp	r8, #0
   3b258:	ldrbeq	r1, [r2, #1]
   3b25c:	beq	3b2a8 <__assert_fail@plt+0x26c50>
   3b260:	mov	ip, fp
   3b264:	mov	r6, r0
   3b268:	mov	r4, r8
   3b26c:	b	3b278 <__assert_fail@plt+0x26c20>
   3b270:	subs	r4, r4, #1
   3b274:	beq	3b2b8 <__assert_fail@plt+0x26c60>
   3b278:	ldrb	r3, [r6, #1]!
   3b27c:	mov	r9, ip
   3b280:	sub	r1, r3, #97	; 0x61
   3b284:	cmp	r1, #25
   3b288:	ldrb	r1, [ip], #1
   3b28c:	bicls	r3, r3, #32
   3b290:	sub	r5, r1, #97	; 0x61
   3b294:	cmp	r5, #25
   3b298:	mov	r5, r1
   3b29c:	bicls	r5, r1, #32
   3b2a0:	cmp	r3, r5
   3b2a4:	beq	3b270 <__assert_fail@plt+0x26c18>
   3b2a8:	cmp	r1, #0
   3b2ac:	bne	3b224 <__assert_fail@plt+0x26bcc>
   3b2b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   3b2b4:	bx	lr
   3b2b8:	ldrb	r1, [r9, #1]
   3b2bc:	cmp	r1, #0
   3b2c0:	bne	3b224 <__assert_fail@plt+0x26bcc>
   3b2c4:	b	3b2b0 <__assert_fail@plt+0x26c58>
   3b2c8:	mov	r0, r8
   3b2cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   3b2d0:	bx	lr
   3b2d4:	mov	r0, r1
   3b2d8:	b	3b2b0 <__assert_fail@plt+0x26c58>
   3b2dc:	push	{r4, lr}
   3b2e0:	subs	r4, r2, #0
   3b2e4:	sub	sp, sp, #8
   3b2e8:	beq	3b330 <__assert_fail@plt+0x26cd8>
   3b2ec:	cmp	r0, #0
   3b2f0:	beq	3b338 <__assert_fail@plt+0x26ce0>
   3b2f4:	subs	r3, r4, #1
   3b2f8:	beq	3b34c <__assert_fail@plt+0x26cf4>
   3b2fc:	ldrb	r2, [r1]
   3b300:	mov	ip, r0
   3b304:	cmp	r2, #0
   3b308:	bne	3b31c <__assert_fail@plt+0x26cc4>
   3b30c:	b	3b328 <__assert_fail@plt+0x26cd0>
   3b310:	ldrb	r2, [r1, #1]!
   3b314:	cmp	r2, #0
   3b318:	beq	3b328 <__assert_fail@plt+0x26cd0>
   3b31c:	subs	r3, r3, #1
   3b320:	strb	r2, [ip], #1
   3b324:	bne	3b310 <__assert_fail@plt+0x26cb8>
   3b328:	mov	r3, #0
   3b32c:	strb	r3, [ip]
   3b330:	add	sp, sp, #8
   3b334:	pop	{r4, pc}
   3b338:	mov	r0, r4
   3b33c:	str	r1, [sp, #4]
   3b340:	bl	1398c <gcry_xmalloc@plt>
   3b344:	ldr	r1, [sp, #4]
   3b348:	b	3b2f4 <__assert_fail@plt+0x26c9c>
   3b34c:	mov	ip, r0
   3b350:	b	3b328 <__assert_fail@plt+0x26cd0>
   3b354:	push	{r3, r4, r5, lr}
   3b358:	mov	r5, r0
   3b35c:	ldrb	r4, [r0]
   3b360:	cmp	r4, #0
   3b364:	beq	3b408 <__assert_fail@plt+0x26db0>
   3b368:	bl	14034 <__ctype_b_loc@plt>
   3b36c:	mov	r2, r5
   3b370:	ldr	r1, [r0]
   3b374:	b	3b384 <__assert_fail@plt+0x26d2c>
   3b378:	ldrb	r4, [r2, #1]!
   3b37c:	cmp	r4, #0
   3b380:	beq	3b408 <__assert_fail@plt+0x26db0>
   3b384:	lsl	r4, r4, #1
   3b388:	ldrh	r3, [r1, r4]
   3b38c:	and	r3, r3, #8192	; 0x2000
   3b390:	uxth	r3, r3
   3b394:	cmp	r3, #0
   3b398:	bne	3b378 <__assert_fail@plt+0x26d20>
   3b39c:	ldrb	r1, [r2]
   3b3a0:	cmp	r1, #0
   3b3a4:	strb	r1, [r5]
   3b3a8:	subne	r2, r2, #1
   3b3ac:	movne	ip, r3
   3b3b0:	movne	r1, r5
   3b3b4:	beq	3b410 <__assert_fail@plt+0x26db8>
   3b3b8:	ldrb	r3, [r2, #1]!
   3b3bc:	ldr	r4, [r0]
   3b3c0:	lsl	r3, r3, #1
   3b3c4:	ldrh	r3, [r4, r3]
   3b3c8:	and	r3, r3, #8192	; 0x2000
   3b3cc:	uxth	r3, r3
   3b3d0:	cmp	r3, #0
   3b3d4:	moveq	ip, r3
   3b3d8:	beq	3b3e4 <__assert_fail@plt+0x26d8c>
   3b3dc:	cmp	ip, #0
   3b3e0:	moveq	ip, r1
   3b3e4:	ldrb	r3, [r2, #1]
   3b3e8:	cmp	r3, #0
   3b3ec:	strb	r3, [r1, #1]!
   3b3f0:	bne	3b3b8 <__assert_fail@plt+0x26d60>
   3b3f4:	cmp	ip, #0
   3b3f8:	beq	3b410 <__assert_fail@plt+0x26db8>
   3b3fc:	strb	r3, [ip]
   3b400:	mov	r0, r5
   3b404:	pop	{r3, r4, r5, pc}
   3b408:	mov	r3, #0
   3b40c:	strb	r3, [r5]
   3b410:	mov	r0, r5
   3b414:	pop	{r3, r4, r5, pc}
   3b418:	push	{r3, r4, r5, lr}
   3b41c:	mov	r5, r0
   3b420:	ldrb	r4, [r0]
   3b424:	cmp	r4, #0
   3b428:	beq	3b474 <__assert_fail@plt+0x26e1c>
   3b42c:	bl	14034 <__ctype_b_loc@plt>
   3b430:	mov	r3, r5
   3b434:	mov	r1, #0
   3b438:	ldr	ip, [r0]
   3b43c:	lsl	r4, r4, #1
   3b440:	ldrh	r2, [ip, r4]
   3b444:	and	r2, r2, #8192	; 0x2000
   3b448:	uxth	r2, r2
   3b44c:	cmp	r2, #0
   3b450:	moveq	r1, r2
   3b454:	beq	3b460 <__assert_fail@plt+0x26e08>
   3b458:	cmp	r1, #0
   3b45c:	moveq	r1, r3
   3b460:	ldrb	r4, [r3, #1]!
   3b464:	cmp	r4, #0
   3b468:	bne	3b43c <__assert_fail@plt+0x26de4>
   3b46c:	cmp	r1, #0
   3b470:	strbne	r4, [r1]
   3b474:	mov	r0, r5
   3b478:	pop	{r3, r4, r5, pc}
   3b47c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3b480:	subs	sl, r1, #0
   3b484:	mov	r9, r0
   3b488:	mov	r7, r2
   3b48c:	beq	3b4e4 <__assert_fail@plt+0x26e8c>
   3b490:	add	r8, sl, r0
   3b494:	mov	r4, r0
   3b498:	mov	r6, #0
   3b49c:	ldrb	r1, [r4]
   3b4a0:	mov	r0, r7
   3b4a4:	bl	140ac <strchr@plt>
   3b4a8:	mov	r5, r4
   3b4ac:	add	r4, r4, #1
   3b4b0:	cmp	r0, #0
   3b4b4:	moveq	r6, r0
   3b4b8:	beq	3b4c4 <__assert_fail@plt+0x26e6c>
   3b4bc:	cmp	r6, #0
   3b4c0:	moveq	r6, r5
   3b4c4:	cmp	r4, r8
   3b4c8:	bne	3b49c <__assert_fail@plt+0x26e44>
   3b4cc:	cmp	r6, #0
   3b4d0:	beq	3b4e4 <__assert_fail@plt+0x26e8c>
   3b4d4:	mov	r3, #0
   3b4d8:	rsb	r0, r9, r6
   3b4dc:	strb	r3, [r6]
   3b4e0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b4e4:	mov	r0, sl
   3b4e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b4ec:	movw	r2, #35424	; 0x8a60
   3b4f0:	movt	r2, #4
   3b4f4:	b	3b47c <__assert_fail@plt+0x26e24>
   3b4f8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3b4fc:	subs	sl, r1, #0
   3b500:	mov	r9, r0
   3b504:	mov	r7, r2
   3b508:	beq	3b558 <__assert_fail@plt+0x26f00>
   3b50c:	add	r8, r0, sl
   3b510:	mov	r4, r0
   3b514:	mov	r6, #0
   3b518:	ldrb	r1, [r4]
   3b51c:	mov	r0, r7
   3b520:	bl	140ac <strchr@plt>
   3b524:	mov	r5, r4
   3b528:	add	r4, r4, #1
   3b52c:	cmp	r0, #0
   3b530:	moveq	r6, r0
   3b534:	beq	3b540 <__assert_fail@plt+0x26ee8>
   3b538:	cmp	r6, #0
   3b53c:	moveq	r6, r5
   3b540:	cmp	r4, r8
   3b544:	bne	3b518 <__assert_fail@plt+0x26ec0>
   3b548:	cmp	r6, #0
   3b54c:	beq	3b558 <__assert_fail@plt+0x26f00>
   3b550:	rsb	r0, r9, r6
   3b554:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b558:	mov	r0, sl
   3b55c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3b560:	movw	r2, #35424	; 0x8a60
   3b564:	movt	r2, #4
   3b568:	b	3b4f8 <__assert_fail@plt+0x26ea0>
   3b56c:	push	{r4, lr}
   3b570:	mov	r1, #47	; 0x2f
   3b574:	mov	r4, r0
   3b578:	bl	143b8 <strrchr@plt>
   3b57c:	cmp	r0, #0
   3b580:	beq	3b590 <__assert_fail@plt+0x26f38>
   3b584:	add	r0, r0, #1
   3b588:	pop	{r4, lr}
   3b58c:	b	141f0 <gcry_xstrdup@plt>
   3b590:	mov	r0, r4
   3b594:	pop	{r4, lr}
   3b598:	b	141f0 <gcry_xstrdup@plt>
   3b59c:	push	{r4, r5, r6, lr}
   3b5a0:	mov	r1, #47	; 0x2f
   3b5a4:	mov	r5, r0
   3b5a8:	bl	143b8 <strrchr@plt>
   3b5ac:	cmp	r0, #0
   3b5b0:	beq	3b5e0 <__assert_fail@plt+0x26f88>
   3b5b4:	rsb	r4, r5, r0
   3b5b8:	add	r0, r4, #1
   3b5bc:	bl	1398c <gcry_xmalloc@plt>
   3b5c0:	mov	r1, r5
   3b5c4:	mov	r2, r4
   3b5c8:	mov	r6, r0
   3b5cc:	bl	141e4 <strncpy@plt>
   3b5d0:	mov	r3, #0
   3b5d4:	mov	r0, r6
   3b5d8:	strb	r3, [r6, r4]
   3b5dc:	pop	{r4, r5, r6, pc}
   3b5e0:	movw	r0, #36920	; 0x9038
   3b5e4:	movt	r0, #4
   3b5e8:	pop	{r4, r5, r6, lr}
   3b5ec:	b	141f0 <gcry_xstrdup@plt>
   3b5f0:	push	{r0, r1, r2, r3}
   3b5f4:	mov	r0, #1
   3b5f8:	push	{r4, lr}
   3b5fc:	movw	r4, #47296	; 0xb8c0
   3b600:	movt	r4, #5
   3b604:	sub	sp, sp, #8
   3b608:	add	r3, sp, #20
   3b60c:	ldr	ip, [r4]
   3b610:	mov	r2, r3
   3b614:	ldr	r1, [sp, #16]
   3b618:	str	r3, [sp]
   3b61c:	str	ip, [sp, #4]
   3b620:	bl	3adb0 <__assert_fail@plt+0x26758>
   3b624:	ldr	r2, [sp, #4]
   3b628:	ldr	r3, [r4]
   3b62c:	cmp	r2, r3
   3b630:	bne	3b644 <__assert_fail@plt+0x26fec>
   3b634:	add	sp, sp, #8
   3b638:	pop	{r4, lr}
   3b63c:	add	sp, sp, #16
   3b640:	bx	lr
   3b644:	bl	13cec <__stack_chk_fail@plt>
   3b648:	push	{r0, r1, r2, r3}
   3b64c:	mov	r0, #0
   3b650:	push	{r4, lr}
   3b654:	movw	r4, #47296	; 0xb8c0
   3b658:	movt	r4, #5
   3b65c:	sub	sp, sp, #8
   3b660:	add	r3, sp, #20
   3b664:	ldr	ip, [r4]
   3b668:	mov	r2, r3
   3b66c:	ldr	r1, [sp, #16]
   3b670:	str	r3, [sp]
   3b674:	str	ip, [sp, #4]
   3b678:	bl	3adb0 <__assert_fail@plt+0x26758>
   3b67c:	ldr	r2, [sp, #4]
   3b680:	ldr	r3, [r4]
   3b684:	cmp	r2, r3
   3b688:	bne	3b69c <__assert_fail@plt+0x27044>
   3b68c:	add	sp, sp, #8
   3b690:	pop	{r4, lr}
   3b694:	add	sp, sp, #16
   3b698:	bx	lr
   3b69c:	bl	13cec <__stack_chk_fail@plt>
   3b6a0:	b	13a28 <strcmp@plt>
   3b6a4:	ldrb	r3, [r0]
   3b6a8:	sub	r2, r3, #48	; 0x30
   3b6ac:	uxtb	r1, r2
   3b6b0:	cmp	r1, #9
   3b6b4:	lslls	r3, r2, #4
   3b6b8:	bls	3b6e4 <__assert_fail@plt+0x2708c>
   3b6bc:	sub	r2, r3, #65	; 0x41
   3b6c0:	cmp	r2, #5
   3b6c4:	subls	r3, r3, #55	; 0x37
   3b6c8:	lslls	r3, r3, #4
   3b6cc:	bls	3b6e4 <__assert_fail@plt+0x2708c>
   3b6d0:	sub	r2, r3, #97	; 0x61
   3b6d4:	cmp	r2, #5
   3b6d8:	bhi	3b730 <__assert_fail@plt+0x270d8>
   3b6dc:	sub	r3, r3, #87	; 0x57
   3b6e0:	lsl	r3, r3, #4
   3b6e4:	ldrb	r2, [r0, #1]
   3b6e8:	sub	r1, r2, #48	; 0x30
   3b6ec:	uxtb	ip, r1
   3b6f0:	cmp	ip, #9
   3b6f4:	bls	3b710 <__assert_fail@plt+0x270b8>
   3b6f8:	sub	r1, r2, #65	; 0x41
   3b6fc:	cmp	r1, #5
   3b700:	bhi	3b718 <__assert_fail@plt+0x270c0>
   3b704:	sub	r2, r2, #55	; 0x37
   3b708:	add	r0, r2, r3
   3b70c:	bx	lr
   3b710:	add	r0, r1, r3
   3b714:	bx	lr
   3b718:	sub	r1, r2, #97	; 0x61
   3b71c:	cmp	r1, #5
   3b720:	bhi	3b730 <__assert_fail@plt+0x270d8>
   3b724:	sub	r2, r2, #87	; 0x57
   3b728:	add	r0, r2, r3
   3b72c:	bx	lr
   3b730:	mvn	r0, #0
   3b734:	bx	lr
   3b738:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   3b73c:	subs	r4, r2, #0
   3b740:	mov	r7, r0
   3b744:	mov	r8, r3
   3b748:	ldr	r9, [sp, #32]
   3b74c:	beq	3b888 <__assert_fail@plt+0x27230>
   3b750:	mov	r5, r1
   3b754:	mov	r6, #0
   3b758:	b	3b794 <__assert_fail@plt+0x2713c>
   3b75c:	cmp	r0, r8
   3b760:	beq	3b7a4 <__assert_fail@plt+0x2714c>
   3b764:	cmp	r0, r9
   3b768:	beq	3b7a4 <__assert_fail@plt+0x2714c>
   3b76c:	orrs	r3, r8, r9
   3b770:	beq	3b77c <__assert_fail@plt+0x27124>
   3b774:	cmp	r0, #92	; 0x5c
   3b778:	beq	3b7a4 <__assert_fail@plt+0x2714c>
   3b77c:	mov	r1, r7
   3b780:	add	r6, r6, #1
   3b784:	bl	13e0c <_IO_putc@plt>
   3b788:	subs	r4, r4, #1
   3b78c:	add	r6, r6, #1
   3b790:	beq	3b800 <__assert_fail@plt+0x271a8>
   3b794:	ldrb	r0, [r5], #1
   3b798:	cmp	r0, #127	; 0x7f
   3b79c:	cmpne	r0, #31
   3b7a0:	bhi	3b75c <__assert_fail@plt+0x27104>
   3b7a4:	mov	r0, #92	; 0x5c
   3b7a8:	mov	r1, r7
   3b7ac:	bl	13e0c <_IO_putc@plt>
   3b7b0:	ldrb	r3, [r5, #-1]
   3b7b4:	cmp	r3, #10
   3b7b8:	beq	3b824 <__assert_fail@plt+0x271cc>
   3b7bc:	cmp	r3, #13
   3b7c0:	beq	3b838 <__assert_fail@plt+0x271e0>
   3b7c4:	cmp	r3, #12
   3b7c8:	beq	3b84c <__assert_fail@plt+0x271f4>
   3b7cc:	cmp	r3, #11
   3b7d0:	beq	3b860 <__assert_fail@plt+0x27208>
   3b7d4:	cmp	r3, #8
   3b7d8:	beq	3b874 <__assert_fail@plt+0x2721c>
   3b7dc:	cmp	r3, #0
   3b7e0:	bne	3b808 <__assert_fail@plt+0x271b0>
   3b7e4:	mov	r0, #48	; 0x30
   3b7e8:	mov	r1, r7
   3b7ec:	bl	13e0c <_IO_putc@plt>
   3b7f0:	subs	r4, r4, #1
   3b7f4:	add	r6, r6, #2
   3b7f8:	add	r6, r6, #1
   3b7fc:	bne	3b794 <__assert_fail@plt+0x2713c>
   3b800:	mov	r0, r6
   3b804:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   3b808:	movw	r2, #34800	; 0x87f0
   3b80c:	mov	r0, r7
   3b810:	movt	r2, #4
   3b814:	mov	r1, #1
   3b818:	bl	14274 <__fprintf_chk@plt>
   3b81c:	add	r6, r6, #4
   3b820:	b	3b788 <__assert_fail@plt+0x27130>
   3b824:	mov	r0, #110	; 0x6e
   3b828:	mov	r1, r7
   3b82c:	bl	13e0c <_IO_putc@plt>
   3b830:	add	r6, r6, #2
   3b834:	b	3b788 <__assert_fail@plt+0x27130>
   3b838:	mov	r0, #114	; 0x72
   3b83c:	mov	r1, r7
   3b840:	bl	13e0c <_IO_putc@plt>
   3b844:	add	r6, r6, #2
   3b848:	b	3b788 <__assert_fail@plt+0x27130>
   3b84c:	mov	r0, #102	; 0x66
   3b850:	mov	r1, r7
   3b854:	bl	13e0c <_IO_putc@plt>
   3b858:	add	r6, r6, #2
   3b85c:	b	3b788 <__assert_fail@plt+0x27130>
   3b860:	mov	r0, #118	; 0x76
   3b864:	mov	r1, r7
   3b868:	bl	13e0c <_IO_putc@plt>
   3b86c:	add	r6, r6, #2
   3b870:	b	3b788 <__assert_fail@plt+0x27130>
   3b874:	mov	r0, #98	; 0x62
   3b878:	mov	r1, r7
   3b87c:	bl	13e0c <_IO_putc@plt>
   3b880:	add	r6, r6, #2
   3b884:	b	3b788 <__assert_fail@plt+0x27130>
   3b888:	mov	r6, r4
   3b88c:	b	3b800 <__assert_fail@plt+0x271a8>
   3b890:	push	{lr}		; (str lr, [sp, #-4]!)
   3b894:	sub	sp, sp, #12
   3b898:	mov	ip, #0
   3b89c:	str	ip, [sp]
   3b8a0:	bl	3b738 <__assert_fail@plt+0x270e0>
   3b8a4:	add	sp, sp, #12
   3b8a8:	pop	{pc}		; (ldr pc, [sp], #4)
   3b8ac:	cmp	r2, #0
   3b8b0:	push	{r4, r5, r6, lr}
   3b8b4:	mov	r5, r0
   3b8b8:	sub	sp, sp, #8
   3b8bc:	beq	3b8f0 <__assert_fail@plt+0x27298>
   3b8c0:	ldrsb	r0, [r1]
   3b8c4:	cmp	r0, #0
   3b8c8:	blt	3b908 <__assert_fail@plt+0x272b0>
   3b8cc:	sub	r4, r2, #1
   3b8d0:	mov	ip, r1
   3b8d4:	add	r4, r1, r4
   3b8d8:	b	3b8e8 <__assert_fail@plt+0x27290>
   3b8dc:	ldrsb	lr, [ip, #1]!
   3b8e0:	cmp	lr, #0
   3b8e4:	blt	3b908 <__assert_fail@plt+0x272b0>
   3b8e8:	cmp	ip, r4
   3b8ec:	bne	3b8dc <__assert_fail@plt+0x27284>
   3b8f0:	mov	ip, #0
   3b8f4:	mov	r0, r5
   3b8f8:	str	ip, [sp]
   3b8fc:	bl	3b738 <__assert_fail@plt+0x270e0>
   3b900:	add	sp, sp, #8
   3b904:	pop	{r4, r5, r6, pc}
   3b908:	mov	r0, r1
   3b90c:	mov	r1, r2
   3b910:	mov	r2, r3
   3b914:	bl	3cd8c <__assert_fail@plt+0x28734>
   3b918:	mov	r4, r0
   3b91c:	bl	14094 <strlen@plt>
   3b920:	mov	r1, r5
   3b924:	mov	r6, r0
   3b928:	mov	r0, r4
   3b92c:	bl	145b0 <fputs@plt>
   3b930:	mov	r0, r4
   3b934:	bl	13c44 <gcry_free@plt>
   3b938:	mov	r0, r6
   3b93c:	add	sp, sp, #8
   3b940:	pop	{r4, r5, r6, pc}
   3b944:	push	{r4, r5, r6, r7, lr}
   3b948:	subs	r4, r1, #0
   3b94c:	mov	r6, r0
   3b950:	sub	sp, sp, #12
   3b954:	mov	r5, r2
   3b958:	mov	r7, r3
   3b95c:	mov	r0, r4
   3b960:	beq	3b980 <__assert_fail@plt+0x27328>
   3b964:	bl	14094 <strlen@plt>
   3b968:	str	r7, [sp]
   3b96c:	mov	r1, r4
   3b970:	mov	r3, r5
   3b974:	mov	r2, r0
   3b978:	mov	r0, r6
   3b97c:	bl	3b738 <__assert_fail@plt+0x270e0>
   3b980:	add	sp, sp, #12
   3b984:	pop	{r4, r5, r6, r7, pc}
   3b988:	push	{r4, r5, r6, lr}
   3b98c:	subs	r4, r1, #0
   3b990:	mov	r6, r0
   3b994:	sub	sp, sp, #8
   3b998:	mov	r5, r2
   3b99c:	mov	r0, r4
   3b9a0:	beq	3b9c4 <__assert_fail@plt+0x2736c>
   3b9a4:	bl	14094 <strlen@plt>
   3b9a8:	mov	ip, #0
   3b9ac:	mov	r1, r4
   3b9b0:	mov	r3, r5
   3b9b4:	str	ip, [sp]
   3b9b8:	mov	r2, r0
   3b9bc:	mov	r0, r6
   3b9c0:	bl	3b738 <__assert_fail@plt+0x270e0>
   3b9c4:	add	sp, sp, #8
   3b9c8:	pop	{r4, r5, r6, pc}
   3b9cc:	push	{r4, r5, r6, lr}
   3b9d0:	subs	r4, r1, #0
   3b9d4:	mov	r6, r0
   3b9d8:	mov	r5, r2
   3b9dc:	mov	r0, r4
   3b9e0:	beq	3ba00 <__assert_fail@plt+0x273a8>
   3b9e4:	bl	14094 <strlen@plt>
   3b9e8:	mov	r1, r4
   3b9ec:	mov	r3, r5
   3b9f0:	mov	r2, r0
   3b9f4:	mov	r0, r6
   3b9f8:	pop	{r4, r5, r6, lr}
   3b9fc:	b	3b8ac <__assert_fail@plt+0x27254>
   3ba00:	pop	{r4, r5, r6, pc}
   3ba04:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3ba08:	subs	r5, r1, #0
   3ba0c:	sub	sp, sp, #12
   3ba10:	mov	r6, r0
   3ba14:	mov	r7, r2
   3ba18:	beq	3bb94 <__assert_fail@plt+0x2753c>
   3ba1c:	add	lr, r0, r5
   3ba20:	mov	r1, r0
   3ba24:	mov	r0, #1
   3ba28:	b	3ba50 <__assert_fail@plt+0x273f8>
   3ba2c:	cmp	r3, r7
   3ba30:	beq	3ba60 <__assert_fail@plt+0x27408>
   3ba34:	cmp	r7, #0
   3ba38:	beq	3ba44 <__assert_fail@plt+0x273ec>
   3ba3c:	cmp	r3, #92	; 0x5c
   3ba40:	beq	3ba74 <__assert_fail@plt+0x2741c>
   3ba44:	add	r0, r0, #1
   3ba48:	cmp	r1, lr
   3ba4c:	beq	3ba80 <__assert_fail@plt+0x27428>
   3ba50:	ldrb	r3, [r1], #1
   3ba54:	cmp	r3, #127	; 0x7f
   3ba58:	cmpne	r3, #31
   3ba5c:	bhi	3ba2c <__assert_fail@plt+0x273d4>
   3ba60:	sub	ip, r3, #10
   3ba64:	cmp	ip, #3
   3ba68:	bls	3bb68 <__assert_fail@plt+0x27510>
   3ba6c:	tst	r3, #247	; 0xf7
   3ba70:	beq	3bb68 <__assert_fail@plt+0x27510>
   3ba74:	cmp	r1, lr
   3ba78:	add	r0, r0, #5
   3ba7c:	bne	3ba50 <__assert_fail@plt+0x273f8>
   3ba80:	bl	1398c <gcry_xmalloc@plt>
   3ba84:	mov	r8, #92	; 0x5c
   3ba88:	mov	sl, #48	; 0x30
   3ba8c:	mov	fp, #98	; 0x62
   3ba90:	mov	r9, r0
   3ba94:	mov	r4, r0
   3ba98:	b	3bac4 <__assert_fail@plt+0x2746c>
   3ba9c:	cmp	r3, r7
   3baa0:	beq	3bad4 <__assert_fail@plt+0x2747c>
   3baa4:	cmp	r7, #0
   3baa8:	beq	3bab4 <__assert_fail@plt+0x2745c>
   3baac:	cmp	r3, #92	; 0x5c
   3bab0:	beq	3bad4 <__assert_fail@plt+0x2747c>
   3bab4:	strb	r3, [r4]
   3bab8:	add	r4, r4, #1
   3babc:	subs	r5, r5, #1
   3bac0:	beq	3bb54 <__assert_fail@plt+0x274fc>
   3bac4:	ldrb	r3, [r6], #1
   3bac8:	cmp	r3, #127	; 0x7f
   3bacc:	cmpne	r3, #31
   3bad0:	bhi	3ba9c <__assert_fail@plt+0x27444>
   3bad4:	strb	r8, [r4]
   3bad8:	ldrb	r3, [r6, #-1]
   3badc:	cmp	r3, #10
   3bae0:	moveq	r3, #110	; 0x6e
   3bae4:	strbeq	r3, [r4, #1]
   3bae8:	addeq	r4, r4, #2
   3baec:	beq	3babc <__assert_fail@plt+0x27464>
   3baf0:	cmp	r3, #13
   3baf4:	moveq	r3, #114	; 0x72
   3baf8:	strbeq	r3, [r4, #1]
   3bafc:	addeq	r4, r4, #2
   3bb00:	beq	3babc <__assert_fail@plt+0x27464>
   3bb04:	cmp	r3, #12
   3bb08:	moveq	r3, #102	; 0x66
   3bb0c:	strbeq	r3, [r4, #1]
   3bb10:	addeq	r4, r4, #2
   3bb14:	beq	3babc <__assert_fail@plt+0x27464>
   3bb18:	cmp	r3, #11
   3bb1c:	moveq	r3, #118	; 0x76
   3bb20:	strbeq	r3, [r4, #1]
   3bb24:	addeq	r4, r4, #2
   3bb28:	beq	3babc <__assert_fail@plt+0x27464>
   3bb2c:	cmp	r3, #8
   3bb30:	strbeq	fp, [r4, #1]
   3bb34:	addeq	r4, r4, #2
   3bb38:	beq	3babc <__assert_fail@plt+0x27464>
   3bb3c:	cmp	r3, #0
   3bb40:	bne	3bb70 <__assert_fail@plt+0x27518>
   3bb44:	subs	r5, r5, #1
   3bb48:	strb	sl, [r4, #1]
   3bb4c:	add	r4, r4, #2
   3bb50:	bne	3bac4 <__assert_fail@plt+0x2746c>
   3bb54:	mov	r3, #0
   3bb58:	mov	r0, r9
   3bb5c:	strb	r3, [r4]
   3bb60:	add	sp, sp, #12
   3bb64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3bb68:	add	r0, r0, #2
   3bb6c:	b	3ba48 <__assert_fail@plt+0x273f0>
   3bb70:	str	r3, [sp]
   3bb74:	add	r0, r4, #1
   3bb78:	movw	r3, #34800	; 0x87f0
   3bb7c:	mov	r1, #1
   3bb80:	movt	r3, #4
   3bb84:	mvn	r2, #0
   3bb88:	add	r4, r4, #4
   3bb8c:	bl	14178 <__sprintf_chk@plt>
   3bb90:	b	3babc <__assert_fail@plt+0x27464>
   3bb94:	mov	r0, #1
   3bb98:	bl	1398c <gcry_xmalloc@plt>
   3bb9c:	mov	r9, r0
   3bba0:	mov	r4, r0
   3bba4:	b	3bb54 <__assert_fail@plt+0x274fc>
   3bba8:	ldrb	r3, [r0]
   3bbac:	cmp	r3, #0
   3bbb0:	beq	3bbd8 <__assert_fail@plt+0x27580>
   3bbb4:	mov	r2, r0
   3bbb8:	mov	r0, #0
   3bbbc:	and	r3, r3, #192	; 0xc0
   3bbc0:	cmp	r3, #128	; 0x80
   3bbc4:	ldrb	r3, [r2, #1]!
   3bbc8:	addne	r0, r0, #1
   3bbcc:	cmp	r3, #0
   3bbd0:	bne	3bbbc <__assert_fail@plt+0x27564>
   3bbd4:	bx	lr
   3bbd8:	mov	r0, r3
   3bbdc:	bx	lr
   3bbe0:	sub	r0, r0, #65	; 0x41
   3bbe4:	cmp	r0, #25
   3bbe8:	movhi	r0, #0
   3bbec:	movls	r0, #1
   3bbf0:	bx	lr
   3bbf4:	sub	r0, r0, #97	; 0x61
   3bbf8:	cmp	r0, #25
   3bbfc:	movhi	r0, #0
   3bc00:	movls	r0, #1
   3bc04:	bx	lr
   3bc08:	sub	r3, r0, #97	; 0x61
   3bc0c:	cmp	r3, #25
   3bc10:	bicls	r0, r0, #32
   3bc14:	bx	lr
   3bc18:	sub	r3, r0, #65	; 0x41
   3bc1c:	cmp	r3, #25
   3bc20:	orrls	r0, r0, #32
   3bc24:	bx	lr
   3bc28:	cmp	r0, r1
   3bc2c:	push	{r4, r5, r6}
   3bc30:	beq	3bcd8 <__assert_fail@plt+0x27680>
   3bc34:	ldrb	r3, [r0]
   3bc38:	cmp	r3, #0
   3bc3c:	beq	3bca8 <__assert_fail@plt+0x27650>
   3bc40:	ldrb	r2, [r1]
   3bc44:	cmp	r2, #0
   3bc48:	beq	3bce4 <__assert_fail@plt+0x2768c>
   3bc4c:	mov	ip, r1
   3bc50:	b	3bc64 <__assert_fail@plt+0x2760c>
   3bc54:	ldrb	r2, [ip, #1]
   3bc58:	mov	ip, r4
   3bc5c:	cmp	r2, #0
   3bc60:	beq	3bce4 <__assert_fail@plt+0x2768c>
   3bc64:	cmp	r3, r2
   3bc68:	mov	r1, r2
   3bc6c:	sub	r5, r2, #97	; 0x61
   3bc70:	sub	r6, r3, #97	; 0x61
   3bc74:	add	r4, ip, #1
   3bc78:	mov	r2, r3
   3bc7c:	beq	3bc98 <__assert_fail@plt+0x27640>
   3bc80:	cmp	r6, #25
   3bc84:	bicls	r2, r3, #32
   3bc88:	cmp	r5, #25
   3bc8c:	bicls	r1, r1, #32
   3bc90:	cmp	r2, r1
   3bc94:	bne	3bcec <__assert_fail@plt+0x27694>
   3bc98:	ldrb	r3, [r0, #1]!
   3bc9c:	mov	r1, r4
   3bca0:	cmp	r3, #0
   3bca4:	bne	3bc54 <__assert_fail@plt+0x275fc>
   3bca8:	ldrb	r0, [r1]
   3bcac:	cmp	r3, r0
   3bcb0:	beq	3bcd8 <__assert_fail@plt+0x27680>
   3bcb4:	sub	r2, r3, #97	; 0x61
   3bcb8:	cmp	r2, #25
   3bcbc:	sub	r2, r0, #97	; 0x61
   3bcc0:	bicls	r3, r3, #32
   3bcc4:	cmp	r2, #25
   3bcc8:	bicls	r0, r0, #32
   3bccc:	rsb	r0, r0, r3
   3bcd0:	pop	{r4, r5, r6}
   3bcd4:	bx	lr
   3bcd8:	mov	r0, #0
   3bcdc:	pop	{r4, r5, r6}
   3bce0:	bx	lr
   3bce4:	mov	r0, #0
   3bce8:	b	3bcb4 <__assert_fail@plt+0x2765c>
   3bcec:	mov	r1, ip
   3bcf0:	ldrb	r0, [r1]
   3bcf4:	cmp	r3, r0
   3bcf8:	bne	3bcb4 <__assert_fail@plt+0x2765c>
   3bcfc:	b	3bcd8 <__assert_fail@plt+0x27680>
   3bd00:	cmp	r2, #0
   3bd04:	cmpne	r0, r1
   3bd08:	push	{r4, r5, r6}
   3bd0c:	moveq	r0, #0
   3bd10:	beq	3bd74 <__assert_fail@plt+0x2771c>
   3bd14:	add	r2, r1, r2
   3bd18:	sub	r5, r0, #1
   3bd1c:	add	r1, r1, #1
   3bd20:	b	3bd34 <__assert_fail@plt+0x276dc>
   3bd24:	cmp	ip, #0
   3bd28:	beq	3bd70 <__assert_fail@plt+0x27718>
   3bd2c:	cmp	ip, r3
   3bd30:	bne	3bd70 <__assert_fail@plt+0x27718>
   3bd34:	ldrb	r3, [r5, #1]!
   3bd38:	sub	r0, r3, #65	; 0x41
   3bd3c:	orr	r4, r3, #32
   3bd40:	cmp	r0, #25
   3bd44:	movhi	r4, r3
   3bd48:	ldrb	r3, [r1, #-1]
   3bd4c:	uxtb	ip, r4
   3bd50:	sub	r6, r3, #65	; 0x41
   3bd54:	orr	r0, r3, #32
   3bd58:	cmp	r6, #25
   3bd5c:	movhi	r0, r3
   3bd60:	cmp	r1, r2
   3bd64:	uxtb	r3, r0
   3bd68:	add	r1, r1, #1
   3bd6c:	bne	3bd24 <__assert_fail@plt+0x276cc>
   3bd70:	rsb	r0, r0, r4
   3bd74:	pop	{r4, r5, r6}
   3bd78:	bx	lr
   3bd7c:	cmp	r0, r1
   3bd80:	push	{r4, r5, r6, r7, r8, r9}
   3bd84:	beq	3be08 <__assert_fail@plt+0x277b0>
   3bd88:	cmp	r2, #0
   3bd8c:	beq	3bde0 <__assert_fail@plt+0x27788>
   3bd90:	sub	r0, r0, #1
   3bd94:	sub	r1, r1, #1
   3bd98:	ldrb	r3, [r0, #1]!
   3bd9c:	ldrb	ip, [r1, #1]!
   3bda0:	sub	r6, r3, #97	; 0x61
   3bda4:	cmp	r3, ip
   3bda8:	mov	r8, r3
   3bdac:	beq	3bdd8 <__assert_fail@plt+0x27780>
   3bdb0:	cmp	r6, #25
   3bdb4:	sub	r7, ip, #97	; 0x61
   3bdb8:	bic	r5, r3, #32
   3bdbc:	bic	r4, ip, #32
   3bdc0:	movhi	r5, r3
   3bdc4:	cmp	r7, #25
   3bdc8:	mov	r9, ip
   3bdcc:	movhi	r4, ip
   3bdd0:	cmp	r5, r4
   3bdd4:	bne	3bdec <__assert_fail@plt+0x27794>
   3bdd8:	subs	r2, r2, #1
   3bddc:	bne	3bd98 <__assert_fail@plt+0x27740>
   3bde0:	mov	r0, r2
   3bde4:	pop	{r4, r5, r6, r7, r8, r9}
   3bde8:	bx	lr
   3bdec:	cmp	r6, #25
   3bdf0:	bicls	r8, r3, #32
   3bdf4:	cmp	r7, #25
   3bdf8:	bicls	r9, ip, #32
   3bdfc:	rsb	r0, r9, r8
   3be00:	pop	{r4, r5, r6, r7, r8, r9}
   3be04:	bx	lr
   3be08:	mov	r0, #0
   3be0c:	pop	{r4, r5, r6, r7, r8, r9}
   3be10:	bx	lr
   3be14:	cmp	r0, r1
   3be18:	push	{r4}		; (str r4, [sp, #-4]!)
   3be1c:	beq	3be98 <__assert_fail@plt+0x27840>
   3be20:	ldrb	r3, [r0]
   3be24:	cmp	r3, #0
   3be28:	beq	3be74 <__assert_fail@plt+0x2781c>
   3be2c:	ldrb	r2, [r1]
   3be30:	cmp	r2, #0
   3be34:	beq	3be84 <__assert_fail@plt+0x2782c>
   3be38:	cmp	r3, r2
   3be3c:	bne	3be84 <__assert_fail@plt+0x2782c>
   3be40:	add	r3, r0, #1
   3be44:	add	r2, r1, #1
   3be48:	b	3be60 <__assert_fail@plt+0x27808>
   3be4c:	ldrb	r4, [r2], #1
   3be50:	cmp	r4, #0
   3be54:	beq	3be84 <__assert_fail@plt+0x2782c>
   3be58:	cmp	ip, r4
   3be5c:	bne	3be84 <__assert_fail@plt+0x2782c>
   3be60:	mov	r0, r3
   3be64:	ldrb	ip, [r3], #1
   3be68:	mov	r1, r2
   3be6c:	cmp	ip, #0
   3be70:	bne	3be4c <__assert_fail@plt+0x277f4>
   3be74:	ldrb	r3, [r1]
   3be78:	cmp	r3, #0
   3be7c:	moveq	r0, r3
   3be80:	beq	3be90 <__assert_fail@plt+0x27838>
   3be84:	ldrsb	r0, [r0]
   3be88:	ldrsb	r3, [r1]
   3be8c:	rsb	r0, r3, r0
   3be90:	pop	{r4}		; (ldr r4, [sp], #4)
   3be94:	bx	lr
   3be98:	mov	r0, #0
   3be9c:	pop	{r4}		; (ldr r4, [sp], #4)
   3bea0:	bx	lr
   3bea4:	push	{r3, r4, r5, r6, r7, lr}
   3bea8:	subs	r5, r3, #0
   3beac:	mov	r4, r0
   3beb0:	mov	r6, r2
   3beb4:	beq	3bef4 <__assert_fail@plt+0x2789c>
   3beb8:	cmp	r5, r1
   3bebc:	bhi	3befc <__assert_fail@plt+0x278a4>
   3bec0:	rsb	r7, r5, r1
   3bec4:	adds	r7, r0, r7
   3bec8:	bcc	3bedc <__assert_fail@plt+0x27884>
   3becc:	b	3befc <__assert_fail@plt+0x278a4>
   3bed0:	add	r4, r4, #1
   3bed4:	cmp	r7, r4
   3bed8:	bcc	3befc <__assert_fail@plt+0x278a4>
   3bedc:	mov	r0, r4
   3bee0:	mov	r1, r6
   3bee4:	mov	r2, r5
   3bee8:	bl	3bd7c <__assert_fail@plt+0x27724>
   3beec:	cmp	r0, #0
   3bef0:	bne	3bed0 <__assert_fail@plt+0x27878>
   3bef4:	mov	r0, r4
   3bef8:	pop	{r3, r4, r5, r6, r7, pc}
   3befc:	mov	r0, #0
   3bf00:	pop	{r3, r4, r5, r6, r7, pc}
   3bf04:	push	{r3, r4, r5, lr}
   3bf08:	mov	r5, r0
   3bf0c:	ldrb	r4, [r0]
   3bf10:	cmp	r4, #0
   3bf14:	beq	3bf38 <__assert_fail@plt+0x278e0>
   3bf18:	bl	13fec <__ctype_tolower_loc@plt>
   3bf1c:	sub	r3, r5, #1
   3bf20:	ldr	r2, [r0]
   3bf24:	ldr	r2, [r2, r4, lsl #2]
   3bf28:	strb	r2, [r3, #1]!
   3bf2c:	ldrb	r4, [r3, #1]
   3bf30:	cmp	r4, #0
   3bf34:	bne	3bf20 <__assert_fail@plt+0x278c8>
   3bf38:	mov	r0, r5
   3bf3c:	pop	{r3, r4, r5, pc}
   3bf40:	push	{r4, r5, r6, r7, r8, lr}
   3bf44:	subs	r4, r2, #0
   3bf48:	beq	3bf84 <__assert_fail@plt+0x2792c>
   3bf4c:	sub	r8, r0, #1
   3bf50:	sub	r7, r1, #1
   3bf54:	ldrb	r6, [r8, #1]!
   3bf58:	ldrb	r5, [r7, #1]!
   3bf5c:	cmp	r6, r5
   3bf60:	beq	3bf7c <__assert_fail@plt+0x27924>
   3bf64:	bl	14004 <__ctype_toupper_loc@plt>
   3bf68:	ldr	r3, [r0]
   3bf6c:	ldr	r2, [r3, r6, lsl #2]
   3bf70:	ldr	r3, [r3, r5, lsl #2]
   3bf74:	cmp	r2, r3
   3bf78:	bne	3bf8c <__assert_fail@plt+0x27934>
   3bf7c:	subs	r4, r4, #1
   3bf80:	bne	3bf54 <__assert_fail@plt+0x278fc>
   3bf84:	mov	r0, r4
   3bf88:	pop	{r4, r5, r6, r7, r8, pc}
   3bf8c:	rsb	r0, r5, r6
   3bf90:	pop	{r4, r5, r6, r7, r8, pc}
   3bf94:	mov	r2, #1
   3bf98:	b	3abb0 <__assert_fail@plt+0x26558>
   3bf9c:	mov	r2, #0
   3bfa0:	b	3abb0 <__assert_fail@plt+0x26558>
   3bfa4:	push	{r0, r1, r2, r3}
   3bfa8:	push	{r4, lr}
   3bfac:	sub	sp, sp, #8
   3bfb0:	movw	r4, #47296	; 0xb8c0
   3bfb4:	movt	r4, #5
   3bfb8:	ldr	r0, [sp, #16]
   3bfbc:	ldr	r3, [r4]
   3bfc0:	cmp	r0, #0
   3bfc4:	str	r3, [sp, #4]
   3bfc8:	beq	3bff8 <__assert_fail@plt+0x279a0>
   3bfcc:	add	r1, sp, #20
   3bfd0:	str	r1, [sp]
   3bfd4:	bl	3b03c <__assert_fail@plt+0x269e4>
   3bfd8:	ldr	r2, [sp, #4]
   3bfdc:	ldr	r3, [r4]
   3bfe0:	cmp	r2, r3
   3bfe4:	bne	3c008 <__assert_fail@plt+0x279b0>
   3bfe8:	add	sp, sp, #8
   3bfec:	pop	{r4, lr}
   3bff0:	add	sp, sp, #16
   3bff4:	bx	lr
   3bff8:	movw	r0, #18888	; 0x49c8
   3bffc:	movt	r0, #4
   3c000:	bl	13f2c <gcry_strdup@plt>
   3c004:	b	3bfd8 <__assert_fail@plt+0x27980>
   3c008:	bl	13cec <__stack_chk_fail@plt>
   3c00c:	push	{r0, r1, r2, r3}
   3c010:	push	{r4, lr}
   3c014:	sub	sp, sp, #8
   3c018:	movw	r4, #47296	; 0xb8c0
   3c01c:	movt	r4, #5
   3c020:	ldr	r0, [sp, #16]
   3c024:	ldr	r3, [r4]
   3c028:	cmp	r0, #0
   3c02c:	str	r3, [sp, #4]
   3c030:	beq	3c068 <__assert_fail@plt+0x27a10>
   3c034:	add	r1, sp, #20
   3c038:	str	r1, [sp]
   3c03c:	bl	3b03c <__assert_fail@plt+0x269e4>
   3c040:	cmp	r0, #0
   3c044:	beq	3c07c <__assert_fail@plt+0x27a24>
   3c048:	ldr	r2, [sp, #4]
   3c04c:	ldr	r3, [r4]
   3c050:	cmp	r2, r3
   3c054:	bne	3c078 <__assert_fail@plt+0x27a20>
   3c058:	add	sp, sp, #8
   3c05c:	pop	{r4, lr}
   3c060:	add	sp, sp, #16
   3c064:	bx	lr
   3c068:	movw	r0, #18888	; 0x49c8
   3c06c:	movt	r0, #4
   3c070:	bl	141f0 <gcry_xstrdup@plt>
   3c074:	b	3c040 <__assert_fail@plt+0x279e8>
   3c078:	bl	13cec <__stack_chk_fail@plt>
   3c07c:	bl	14148 <__errno_location@plt>
   3c080:	ldr	r3, [r0]
   3c084:	cmp	r3, #22
   3c088:	movw	r3, #47304	; 0xb8c8
   3c08c:	movt	r3, #5
   3c090:	movweq	r0, #35432	; 0x8a68
   3c094:	movwne	r0, #35472	; 0x8a90
   3c098:	moveq	r1, #1
   3c09c:	ldreq	r3, [r3]
   3c0a0:	movteq	r0, #4
   3c0a4:	moveq	r2, #37	; 0x25
   3c0a8:	movne	r1, #1
   3c0ac:	ldrne	r3, [r3]
   3c0b0:	movtne	r0, #4
   3c0b4:	movne	r2, #22
   3c0b8:	bl	13e18 <fwrite@plt>
   3c0bc:	mov	r0, #2
   3c0c0:	bl	1404c <exit@plt>
   3c0c4:	push	{r4, r5, r6, r7, r8, lr}
   3c0c8:	mov	r7, r0
   3c0cc:	mov	r8, r1
   3c0d0:	mov	r6, r2
   3c0d4:	bl	14148 <__errno_location@plt>
   3c0d8:	movw	r4, #47968	; 0xbb60
   3c0dc:	movt	r4, #5
   3c0e0:	ldr	r3, [r0]
   3c0e4:	mov	r5, r0
   3c0e8:	cmp	r3, #22
   3c0ec:	beq	3c130 <__assert_fail@plt+0x27ad8>
   3c0f0:	ldr	r0, [r4, #8]
   3c0f4:	cmp	r0, #0
   3c0f8:	beq	3c184 <__assert_fail@plt+0x27b2c>
   3c0fc:	mov	r3, #1
   3c100:	str	r3, [r4, #8]
   3c104:	cmp	r6, #0
   3c108:	popeq	{r4, r5, r6, r7, r8, pc}
   3c10c:	movw	r3, #47288	; 0xb8b8
   3c110:	movt	r3, #5
   3c114:	mov	r1, #0
   3c118:	movw	r2, #35584	; 0x8b00
   3c11c:	str	r1, [r4, #12]
   3c120:	movt	r2, #4
   3c124:	str	r1, [r4, #16]
   3c128:	str	r2, [r3]
   3c12c:	pop	{r4, r5, r6, r7, r8, pc}
   3c130:	cmp	r7, #0
   3c134:	beq	3c150 <__assert_fail@plt+0x27af8>
   3c138:	movw	r1, #30388	; 0x76b4
   3c13c:	mov	r0, r7
   3c140:	movt	r1, #4
   3c144:	bl	13a28 <strcmp@plt>
   3c148:	cmp	r0, #0
   3c14c:	beq	3c1b0 <__assert_fail@plt+0x27b58>
   3c150:	mov	r3, #1
   3c154:	ldr	r0, [r4, #4]
   3c158:	str	r3, [r4, #4]
   3c15c:	cmp	r0, #0
   3c160:	bne	3c104 <__assert_fail@plt+0x27aac>
   3c164:	mov	r2, #5
   3c168:	movw	r1, #35516	; 0x8abc
   3c16c:	movt	r1, #4
   3c170:	bl	13cc8 <dcgettext@plt>
   3c174:	mov	r1, r8
   3c178:	mov	r2, r7
   3c17c:	bl	3f478 <__assert_fail@plt+0x2ae20>
   3c180:	b	3c104 <__assert_fail@plt+0x27aac>
   3c184:	mov	r2, #5
   3c188:	movw	r1, #35560	; 0x8ae8
   3c18c:	movt	r1, #4
   3c190:	bl	13cc8 <dcgettext@plt>
   3c194:	mov	r7, r0
   3c198:	ldr	r0, [r5]
   3c19c:	bl	13fa4 <strerror@plt>
   3c1a0:	mov	r1, r0
   3c1a4:	mov	r0, r7
   3c1a8:	bl	3f478 <__assert_fail@plt+0x2ae20>
   3c1ac:	b	3c0fc <__assert_fail@plt+0x27aa4>
   3c1b0:	mov	r3, #1
   3c1b4:	ldr	r0, [r4]
   3c1b8:	str	r3, [r4]
   3c1bc:	b	3c15c <__assert_fail@plt+0x27b04>
   3c1c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3c1c4:	movw	r4, #47296	; 0xb8c0
   3c1c8:	sub	sp, sp, #92	; 0x5c
   3c1cc:	movt	r4, #5
   3c1d0:	movw	ip, #47968	; 0xbb60
   3c1d4:	mov	r9, #0
   3c1d8:	str	ip, [sp, #32]
   3c1dc:	ldr	ip, [r4]
   3c1e0:	str	r1, [sp, #28]
   3c1e4:	str	r4, [sp, #44]	; 0x2c
   3c1e8:	movw	r4, #47968	; 0xbb60
   3c1ec:	str	ip, [sp, #84]	; 0x54
   3c1f0:	movt	r4, #5
   3c1f4:	ldr	ip, [sp, #28]
   3c1f8:	str	r4, [sp, #32]
   3c1fc:	cmp	ip, #0
   3c200:	str	r0, [sp, #36]	; 0x24
   3c204:	str	r2, [sp, #16]
   3c208:	str	r3, [sp, #40]	; 0x28
   3c20c:	str	r9, [sp, #12]
   3c210:	str	r9, [sp, #24]
   3c214:	beq	3c320 <__assert_fail@plt+0x27cc8>
   3c218:	ldr	ip, [sp, #36]	; 0x24
   3c21c:	mov	r6, #0
   3c220:	mov	r7, r6
   3c224:	mov	sl, r6
   3c228:	add	r4, ip, #1
   3c22c:	ldr	r5, [sp, #28]
   3c230:	ldr	fp, [sp, #24]
   3c234:	b	3c290 <__assert_fail@plt+0x27c38>
   3c238:	add	r2, r3, #64	; 0x40
   3c23c:	lsr	r1, r3, #7
   3c240:	uxtb	r2, r2
   3c244:	cmp	r2, #61	; 0x3d
   3c248:	movls	r2, #0
   3c24c:	andhi	r2, r1, #1
   3c250:	cmp	r2, #0
   3c254:	beq	3c29c <__assert_fail@plt+0x27c44>
   3c258:	cmp	fp, #0
   3c25c:	beq	3c280 <__assert_fail@plt+0x27c28>
   3c260:	str	r3, [sp]
   3c264:	mov	r0, fp
   3c268:	movw	r3, #35596	; 0x8b0c
   3c26c:	mov	r1, #1
   3c270:	movt	r3, #4
   3c274:	mvn	r2, #0
   3c278:	bl	14178 <__sprintf_chk@plt>
   3c27c:	add	fp, fp, #4
   3c280:	add	r6, r6, #4
   3c284:	subs	r5, r5, #1
   3c288:	add	r4, r4, #1
   3c28c:	beq	3c2fc <__assert_fail@plt+0x27ca4>
   3c290:	cmp	r9, #0
   3c294:	ldrb	r3, [r4, #-1]
   3c298:	bne	3c238 <__assert_fail@plt+0x27be0>
   3c29c:	cmp	sl, #0
   3c2a0:	bne	3c368 <__assert_fail@plt+0x27d10>
   3c2a4:	tst	r3, #128	; 0x80
   3c2a8:	bne	3c5b8 <__assert_fail@plt+0x27f60>
   3c2ac:	ldr	ip, [sp, #16]
   3c2b0:	cmn	ip, #1
   3c2b4:	beq	3c2dc <__assert_fail@plt+0x27c84>
   3c2b8:	cmp	r3, #127	; 0x7f
   3c2bc:	cmpne	r3, #31
   3c2c0:	bls	3c47c <__assert_fail@plt+0x27e24>
   3c2c4:	cmp	r3, ip
   3c2c8:	beq	3c47c <__assert_fail@plt+0x27e24>
   3c2cc:	cmp	ip, #0
   3c2d0:	beq	3c2dc <__assert_fail@plt+0x27c84>
   3c2d4:	cmp	r3, #92	; 0x5c
   3c2d8:	beq	3c47c <__assert_fail@plt+0x27e24>
   3c2dc:	cmp	fp, #0
   3c2e0:	add	r6, r6, #1
   3c2e4:	strbne	r3, [fp]
   3c2e8:	addne	fp, fp, #1
   3c2ec:	subs	r5, r5, #1
   3c2f0:	mov	r9, #0
   3c2f4:	add	r4, r4, #1
   3c2f8:	bne	3c290 <__assert_fail@plt+0x27c38>
   3c2fc:	ldr	r4, [sp, #24]
   3c300:	cmp	r4, #0
   3c304:	bne	3c334 <__assert_fail@plt+0x27cdc>
   3c308:	add	r0, r6, #1
   3c30c:	bl	1398c <gcry_xmalloc@plt>
   3c310:	ldr	ip, [sp, #28]
   3c314:	cmp	ip, #0
   3c318:	str	r0, [sp, #24]
   3c31c:	bne	3c218 <__assert_fail@plt+0x27bc0>
   3c320:	ldr	r4, [sp, #24]
   3c324:	ldr	fp, [sp, #24]
   3c328:	cmp	r4, #0
   3c32c:	ldr	r6, [sp, #28]
   3c330:	beq	3c308 <__assert_fail@plt+0x27cb0>
   3c334:	ldr	ip, [sp, #40]	; 0x28
   3c338:	cmp	ip, #0
   3c33c:	bne	3c7a8 <__assert_fail@plt+0x28150>
   3c340:	ldr	r4, [sp, #40]	; 0x28
   3c344:	ldr	r0, [sp, #24]
   3c348:	strb	r4, [fp]
   3c34c:	ldr	ip, [sp, #44]	; 0x2c
   3c350:	ldr	r2, [sp, #84]	; 0x54
   3c354:	ldr	r3, [ip]
   3c358:	cmp	r2, r3
   3c35c:	bne	3c90c <__assert_fail@plt+0x282b4>
   3c360:	add	sp, sp, #92	; 0x5c
   3c364:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3c368:	eor	r2, r3, #128	; 0x80
   3c36c:	cmp	r2, #63	; 0x3f
   3c370:	bls	3c3fc <__assert_fail@plt+0x27da4>
   3c374:	cmp	fp, #0
   3c378:	beq	3c3e4 <__assert_fail@plt+0x27d8c>
   3c37c:	cmp	r7, #0
   3c380:	beq	3c3c4 <__assert_fail@plt+0x27d6c>
   3c384:	add	r8, sp, #76	; 0x4c
   3c388:	mov	sl, fp
   3c38c:	add	r9, r8, r7
   3c390:	ldrb	ip, [r8], #1
   3c394:	mov	r0, sl
   3c398:	movw	r3, #35596	; 0x8b0c
   3c39c:	mov	r1, #1
   3c3a0:	movt	r3, #4
   3c3a4:	mvn	r2, #0
   3c3a8:	str	ip, [sp]
   3c3ac:	add	sl, sl, #4
   3c3b0:	bl	14178 <__sprintf_chk@plt>
   3c3b4:	cmp	r8, r9
   3c3b8:	bne	3c390 <__assert_fail@plt+0x27d38>
   3c3bc:	ldrb	r3, [r4, #-1]
   3c3c0:	add	fp, fp, r7, lsl #2
   3c3c4:	str	r3, [sp]
   3c3c8:	mov	r0, fp
   3c3cc:	movw	r3, #35596	; 0x8b0c
   3c3d0:	mov	r1, #1
   3c3d4:	movt	r3, #4
   3c3d8:	mvn	r2, #0
   3c3dc:	bl	14178 <__sprintf_chk@plt>
   3c3e0:	add	fp, fp, #4
   3c3e4:	add	r3, r7, #1
   3c3e8:	mov	r7, #0
   3c3ec:	mov	sl, r7
   3c3f0:	mov	r9, #1
   3c3f4:	add	r6, r6, r3, lsl #2
   3c3f8:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c3fc:	ldr	ip, [sp, #12]
   3c400:	add	r0, sp, #88	; 0x58
   3c404:	subs	sl, sl, #1
   3c408:	add	r1, r0, r7
   3c40c:	add	r8, r7, #1
   3c410:	and	r2, r3, #63	; 0x3f
   3c414:	orr	ip, r2, ip, lsl #6
   3c418:	strb	r3, [r1, #-12]
   3c41c:	str	ip, [sp, #12]
   3c420:	movne	r7, r8
   3c424:	movne	r9, #0
   3c428:	bne	3c284 <__assert_fail@plt+0x27c2c>
   3c42c:	ldr	ip, [sp, #32]
   3c430:	ldr	r3, [ip, #12]
   3c434:	cmp	r3, #0
   3c438:	beq	3c628 <__assert_fail@plt+0x27fd0>
   3c43c:	cmp	fp, #0
   3c440:	beq	3c46c <__assert_fail@plt+0x27e14>
   3c444:	add	r9, sp, #76	; 0x4c
   3c448:	mov	r3, sl
   3c44c:	ldrb	r2, [r9, r3]
   3c450:	strb	r2, [fp, r3]
   3c454:	add	r3, r3, #1
   3c458:	cmp	r8, r3
   3c45c:	bgt	3c44c <__assert_fail@plt+0x27df4>
   3c460:	bic	r7, r7, r7, asr #31
   3c464:	add	r7, r7, #1
   3c468:	add	fp, fp, r7
   3c46c:	mov	r7, #0
   3c470:	add	r6, r6, r8
   3c474:	mov	r9, r7
   3c478:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c47c:	cmp	fp, #0
   3c480:	movne	r3, #92	; 0x5c
   3c484:	strbne	r3, [fp]
   3c488:	ldrbne	r3, [r4, #-1]
   3c48c:	addne	fp, fp, #1
   3c490:	cmp	r3, #13
   3c494:	ldrls	pc, [pc, r3, lsl #2]
   3c498:	b	3c588 <__assert_fail@plt+0x27f30>
   3c49c:	andeq	ip, r3, r8, ror #10
   3c4a0:	andeq	ip, r3, r8, lsl #11
   3c4a4:	andeq	ip, r3, r8, lsl #11
   3c4a8:	andeq	ip, r3, r8, lsl #11
   3c4ac:	andeq	ip, r3, r8, lsl #11
   3c4b0:	andeq	ip, r3, r8, lsl #11
   3c4b4:	andeq	ip, r3, r8, lsl #11
   3c4b8:	andeq	ip, r3, r8, lsl #11
   3c4bc:	andeq	ip, r3, r8, asr #10
   3c4c0:	andeq	ip, r3, r8, lsl #11
   3c4c4:	andeq	ip, r3, r0, lsr r5
   3c4c8:	andeq	ip, r3, r0, lsl r5
   3c4cc:	strdeq	ip, [r3], -r4
   3c4d0:	ldrdeq	ip, [r3], -r4
   3c4d4:	cmp	fp, #0
   3c4d8:	add	r6, r6, #2
   3c4dc:	beq	3c2ec <__assert_fail@plt+0x27c94>
   3c4e0:	mov	r3, #114	; 0x72
   3c4e4:	add	fp, fp, #1
   3c4e8:	strb	r3, [fp, #-1]
   3c4ec:	mov	r9, #0
   3c4f0:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c4f4:	cmp	fp, #0
   3c4f8:	add	r6, r6, #2
   3c4fc:	beq	3c6f0 <__assert_fail@plt+0x28098>
   3c500:	mov	r3, #102	; 0x66
   3c504:	add	fp, fp, #1
   3c508:	strb	r3, [fp, #-1]
   3c50c:	b	3c2ec <__assert_fail@plt+0x27c94>
   3c510:	cmp	fp, #0
   3c514:	add	r6, r6, #2
   3c518:	beq	3c6f0 <__assert_fail@plt+0x28098>
   3c51c:	mov	r3, #118	; 0x76
   3c520:	add	fp, fp, #1
   3c524:	strb	r3, [fp, #-1]
   3c528:	mov	r9, #0
   3c52c:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c530:	cmp	fp, #0
   3c534:	add	r6, r6, #2
   3c538:	movne	r3, #110	; 0x6e
   3c53c:	addne	fp, fp, #1
   3c540:	strbne	r3, [fp, #-1]
   3c544:	b	3c2ec <__assert_fail@plt+0x27c94>
   3c548:	cmp	fp, #0
   3c54c:	add	r6, r6, #2
   3c550:	beq	3c2ec <__assert_fail@plt+0x27c94>
   3c554:	mov	r3, #98	; 0x62
   3c558:	add	fp, fp, #1
   3c55c:	strb	r3, [fp, #-1]
   3c560:	mov	r9, #0
   3c564:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c568:	cmp	fp, #0
   3c56c:	add	r6, r6, #2
   3c570:	beq	3c2ec <__assert_fail@plt+0x27c94>
   3c574:	mov	r3, #48	; 0x30
   3c578:	add	fp, fp, #1
   3c57c:	strb	r3, [fp, #-1]
   3c580:	mov	r9, #0
   3c584:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c588:	cmp	fp, #0
   3c58c:	add	r6, r6, #4
   3c590:	beq	3c6f0 <__assert_fail@plt+0x28098>
   3c594:	str	r3, [sp]
   3c598:	mov	r0, fp
   3c59c:	movw	r3, #34800	; 0x87f0
   3c5a0:	mov	r1, #1
   3c5a4:	movt	r3, #4
   3c5a8:	mvn	r2, #0
   3c5ac:	add	fp, fp, #3
   3c5b0:	bl	14178 <__sprintf_chk@plt>
   3c5b4:	b	3c2ec <__assert_fail@plt+0x27c94>
   3c5b8:	and	r2, r3, #224	; 0xe0
   3c5bc:	cmp	r2, #192	; 0xc0
   3c5c0:	beq	3c668 <__assert_fail@plt+0x28010>
   3c5c4:	and	r2, r3, #240	; 0xf0
   3c5c8:	cmp	r2, #224	; 0xe0
   3c5cc:	beq	3c6b4 <__assert_fail@plt+0x2805c>
   3c5d0:	and	r2, r3, #248	; 0xf8
   3c5d4:	cmp	r2, #240	; 0xf0
   3c5d8:	beq	3c6d0 <__assert_fail@plt+0x28078>
   3c5dc:	and	r2, r3, #252	; 0xfc
   3c5e0:	cmp	r2, #248	; 0xf8
   3c5e4:	beq	3c770 <__assert_fail@plt+0x28118>
   3c5e8:	and	r2, r3, #254	; 0xfe
   3c5ec:	cmp	r2, #252	; 0xfc
   3c5f0:	beq	3c78c <__assert_fail@plt+0x28134>
   3c5f4:	cmp	fp, #0
   3c5f8:	beq	3c61c <__assert_fail@plt+0x27fc4>
   3c5fc:	str	r3, [sp]
   3c600:	mov	r0, fp
   3c604:	movw	r3, #35596	; 0x8b0c
   3c608:	mov	r1, #1
   3c60c:	movt	r3, #4
   3c610:	mvn	r2, #0
   3c614:	bl	14178 <__sprintf_chk@plt>
   3c618:	add	fp, fp, #4
   3c61c:	add	r6, r6, #4
   3c620:	mov	r9, #1
   3c624:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c628:	ldr	ip, [sp, #40]	; 0x28
   3c62c:	cmp	ip, #0
   3c630:	beq	3c684 <__assert_fail@plt+0x2802c>
   3c634:	cmp	fp, #0
   3c638:	beq	3c46c <__assert_fail@plt+0x27e14>
   3c63c:	add	r9, sp, #76	; 0x4c
   3c640:	mov	r3, sl
   3c644:	ldrb	r2, [r9, r3]
   3c648:	strb	r2, [fp, r3]
   3c64c:	add	r3, r3, #1
   3c650:	cmp	r8, r3
   3c654:	bgt	3c644 <__assert_fail@plt+0x27fec>
   3c658:	bic	r3, r7, r7, asr #31
   3c65c:	add	r3, r3, #1
   3c660:	add	fp, fp, r3
   3c664:	b	3c46c <__assert_fail@plt+0x27e14>
   3c668:	mov	r7, #1
   3c66c:	mov	r9, sl
   3c670:	strb	r3, [sp, #76]	; 0x4c
   3c674:	mov	sl, r7
   3c678:	and	r3, r3, #31
   3c67c:	str	r3, [sp, #12]
   3c680:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c684:	ldr	ip, [sp, #12]
   3c688:	sub	r3, ip, #128	; 0x80
   3c68c:	cmp	r3, #127	; 0x7f
   3c690:	bhi	3c6f8 <__assert_fail@plt+0x280a0>
   3c694:	cmp	fp, #0
   3c698:	add	r6, r6, #1
   3c69c:	beq	3c6ec <__assert_fail@plt+0x28094>
   3c6a0:	strb	ip, [fp]
   3c6a4:	mov	r7, r8
   3c6a8:	add	fp, fp, #1
   3c6ac:	ldr	r9, [sp, #40]	; 0x28
   3c6b0:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c6b4:	mov	r9, sl
   3c6b8:	strb	r3, [sp, #76]	; 0x4c
   3c6bc:	mov	r7, #1
   3c6c0:	and	r3, r3, #15
   3c6c4:	mov	sl, #2
   3c6c8:	str	r3, [sp, #12]
   3c6cc:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c6d0:	mov	r9, sl
   3c6d4:	strb	r3, [sp, #76]	; 0x4c
   3c6d8:	mov	r7, #1
   3c6dc:	and	r3, r3, #7
   3c6e0:	mov	sl, #3
   3c6e4:	str	r3, [sp, #12]
   3c6e8:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c6ec:	mov	r7, r8
   3c6f0:	mov	r9, fp
   3c6f4:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c6f8:	cmp	fp, #0
   3c6fc:	beq	3c760 <__assert_fail@plt+0x28108>
   3c700:	ldr	ip, [sp, #40]	; 0x28
   3c704:	add	r9, sp, #76	; 0x4c
   3c708:	str	sl, [sp, #48]	; 0x30
   3c70c:	str	r4, [sp, #52]	; 0x34
   3c710:	mov	r4, fp
   3c714:	mov	sl, ip
   3c718:	str	fp, [sp, #20]
   3c71c:	ldrb	r2, [r9, sl]
   3c720:	mov	r0, r4
   3c724:	movw	r3, #35596	; 0x8b0c
   3c728:	add	sl, sl, #1
   3c72c:	movt	r3, #4
   3c730:	mov	r1, #1
   3c734:	str	r2, [sp]
   3c738:	mvn	r2, #0
   3c73c:	bl	14178 <__sprintf_chk@plt>
   3c740:	cmp	r8, sl
   3c744:	add	r4, r4, #4
   3c748:	bgt	3c71c <__assert_fail@plt+0x280c4>
   3c74c:	bic	r3, r7, r7, asr #31
   3c750:	ldr	sl, [sp, #48]	; 0x30
   3c754:	add	r3, r3, #1
   3c758:	ldr	r4, [sp, #52]	; 0x34
   3c75c:	add	fp, fp, r3, lsl #2
   3c760:	mov	r7, #0
   3c764:	add	r6, r6, r8, lsl #2
   3c768:	mov	r9, r7
   3c76c:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c770:	mov	r9, sl
   3c774:	strb	r3, [sp, #76]	; 0x4c
   3c778:	mov	r7, #1
   3c77c:	and	r3, r3, #3
   3c780:	mov	sl, #4
   3c784:	str	r3, [sp, #12]
   3c788:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c78c:	mov	r9, sl
   3c790:	strb	r3, [sp, #76]	; 0x4c
   3c794:	mov	r7, #1
   3c798:	and	r3, r3, #1
   3c79c:	mov	sl, #5
   3c7a0:	str	r3, [sp, #12]
   3c7a4:	b	3c284 <__assert_fail@plt+0x27c2c>
   3c7a8:	movw	r4, #47288	; 0xb8b8
   3c7ac:	movt	r4, #5
   3c7b0:	mov	r6, #0
   3c7b4:	movw	r1, #30388	; 0x76b4
   3c7b8:	ldr	r0, [r4]
   3c7bc:	movt	r1, #4
   3c7c0:	strb	r6, [fp]
   3c7c4:	bl	13f80 <iconv_open@plt>
   3c7c8:	cmn	r0, #1
   3c7cc:	mov	r5, r0
   3c7d0:	beq	3c8d0 <__assert_fail@plt+0x28278>
   3c7d4:	ldr	ip, [sp, #24]
   3c7d8:	rsb	r2, ip, fp
   3c7dc:	str	r2, [sp, #68]	; 0x44
   3c7e0:	add	r3, r2, #1
   3c7e4:	str	ip, [sp, #60]	; 0x3c
   3c7e8:	lsl	r0, r3, #4
   3c7ec:	str	r0, [sp, #72]	; 0x48
   3c7f0:	cmp	r3, r0, lsr #4
   3c7f4:	bne	3c910 <__assert_fail@plt+0x282b8>
   3c7f8:	bl	1398c <gcry_xmalloc@plt>
   3c7fc:	add	r3, sp, #72	; 0x48
   3c800:	add	r1, sp, #60	; 0x3c
   3c804:	str	r3, [sp]
   3c808:	add	r2, sp, #68	; 0x44
   3c80c:	add	r3, sp, #64	; 0x40
   3c810:	mov	r7, r0
   3c814:	mov	r0, r5
   3c818:	str	r7, [sp, #64]	; 0x40
   3c81c:	bl	13a1c <iconv@plt>
   3c820:	cmn	r0, #1
   3c824:	beq	3c848 <__assert_fail@plt+0x281f0>
   3c828:	ldr	r3, [sp, #64]	; 0x40
   3c82c:	ldr	r0, [sp, #24]
   3c830:	strb	r6, [r3]
   3c834:	bl	13c44 <gcry_free@plt>
   3c838:	mov	r0, r5
   3c83c:	bl	13a04 <iconv_close@plt>
   3c840:	mov	r0, r7
   3c844:	b	3c34c <__assert_fail@plt+0x27cf4>
   3c848:	movw	r6, #47968	; 0xbb60
   3c84c:	movt	r6, #5
   3c850:	ldr	r0, [r6, #20]
   3c854:	cmp	r0, #0
   3c858:	beq	3c890 <__assert_fail@plt+0x28238>
   3c85c:	ldr	r0, [sp, #24]
   3c860:	mov	r3, #1
   3c864:	str	r3, [r6, #20]
   3c868:	bl	13c44 <gcry_free@plt>
   3c86c:	mov	r0, r7
   3c870:	bl	13c44 <gcry_free@plt>
   3c874:	ldr	r0, [sp, #36]	; 0x24
   3c878:	ldr	r1, [sp, #28]
   3c87c:	mov	r3, #0
   3c880:	ldr	r2, [sp, #16]
   3c884:	bl	3c1c0 <__assert_fail@plt+0x27b68>
   3c888:	mov	r7, r0
   3c88c:	b	3c838 <__assert_fail@plt+0x281e0>
   3c890:	mov	r2, #5
   3c894:	movw	r1, #35616	; 0x8b20
   3c898:	movt	r1, #4
   3c89c:	bl	13cc8 <dcgettext@plt>
   3c8a0:	mov	r8, r0
   3c8a4:	bl	14148 <__errno_location@plt>
   3c8a8:	ldr	r4, [r4]
   3c8ac:	ldr	r0, [r0]
   3c8b0:	bl	13fa4 <strerror@plt>
   3c8b4:	mov	r2, r4
   3c8b8:	movw	r1, #30388	; 0x76b4
   3c8bc:	movt	r1, #4
   3c8c0:	mov	r3, r0
   3c8c4:	mov	r0, r8
   3c8c8:	bl	3f478 <__assert_fail@plt+0x2ae20>
   3c8cc:	b	3c85c <__assert_fail@plt+0x28204>
   3c8d0:	ldr	r0, [r4]
   3c8d4:	mov	r2, #1
   3c8d8:	movw	r1, #30388	; 0x76b4
   3c8dc:	movt	r1, #4
   3c8e0:	bl	3c0c4 <__assert_fail@plt+0x27a6c>
   3c8e4:	ldr	r0, [sp, #24]
   3c8e8:	bl	13c44 <gcry_free@plt>
   3c8ec:	movw	r3, #47968	; 0xbb60
   3c8f0:	movt	r3, #5
   3c8f4:	ldr	r0, [sp, #36]	; 0x24
   3c8f8:	ldr	r1, [sp, #28]
   3c8fc:	ldr	r2, [sp, #16]
   3c900:	ldr	r3, [r3, #16]
   3c904:	bl	3c1c0 <__assert_fail@plt+0x27b68>
   3c908:	b	3c34c <__assert_fail@plt+0x27cf4>
   3c90c:	bl	13cec <__stack_chk_fail@plt>
   3c910:	movw	r0, #35604	; 0x8b14
   3c914:	movw	r2, #35496	; 0x8aa8
   3c918:	movt	r0, #4
   3c91c:	movt	r2, #4
   3c920:	movw	r1, #586	; 0x24a
   3c924:	bl	3f700 <__assert_fail@plt+0x2b0a8>
   3c928:	push	{r4, r5, r6, lr}
   3c92c:	subs	r4, r0, #0
   3c930:	beq	3ca64 <__assert_fail@plt+0x2840c>
   3c934:	mov	r0, r4
   3c938:	bl	14094 <strlen@plt>
   3c93c:	cmp	r0, #3
   3c940:	bhi	3ca2c <__assert_fail@plt+0x283d4>
   3c944:	ldrb	r3, [r4]
   3c948:	mov	r5, r4
   3c94c:	cmp	r3, #0
   3c950:	bne	3c980 <__assert_fail@plt+0x28328>
   3c954:	movw	r2, #47288	; 0xb8b8
   3c958:	movw	r3, #47968	; 0xbb60
   3c95c:	movt	r2, #5
   3c960:	movt	r3, #5
   3c964:	mov	r0, #0
   3c968:	movw	r1, #35584	; 0x8b00
   3c96c:	str	r0, [r3, #12]
   3c970:	movt	r1, #4
   3c974:	str	r0, [r3, #16]
   3c978:	str	r1, [r2]
   3c97c:	pop	{r4, r5, r6, pc}
   3c980:	movw	r1, #35588	; 0x8b04
   3c984:	mov	r0, r5
   3c988:	movt	r1, #4
   3c98c:	bl	3bc28 <__assert_fail@plt+0x275d0>
   3c990:	cmp	r0, #0
   3c994:	beq	3c954 <__assert_fail@plt+0x282fc>
   3c998:	movw	r1, #35664	; 0x8b50
   3c99c:	mov	r0, r5
   3c9a0:	movt	r1, #4
   3c9a4:	bl	3bc28 <__assert_fail@plt+0x275d0>
   3c9a8:	cmp	r0, #0
   3c9ac:	beq	3c954 <__assert_fail@plt+0x282fc>
   3c9b0:	movw	r1, #35668	; 0x8b54
   3c9b4:	mov	r0, r5
   3c9b8:	movt	r1, #4
   3c9bc:	bl	3bc28 <__assert_fail@plt+0x275d0>
   3c9c0:	cmp	r0, #0
   3c9c4:	beq	3c954 <__assert_fail@plt+0x282fc>
   3c9c8:	movw	r1, #35676	; 0x8b5c
   3c9cc:	mov	r0, r5
   3c9d0:	movt	r1, #4
   3c9d4:	bl	3bc28 <__assert_fail@plt+0x275d0>
   3c9d8:	cmp	r0, #0
   3c9dc:	beq	3c954 <__assert_fail@plt+0x282fc>
   3c9e0:	movw	r1, #35692	; 0x8b6c
   3c9e4:	mov	r0, r5
   3c9e8:	movt	r1, #4
   3c9ec:	movw	r6, #30388	; 0x76b4
   3c9f0:	bl	3bc28 <__assert_fail@plt+0x275d0>
   3c9f4:	movt	r6, #4
   3c9f8:	cmp	r0, #0
   3c9fc:	bne	3ca74 <__assert_fail@plt+0x2841c>
   3ca00:	movw	r2, #47288	; 0xb8b8
   3ca04:	movw	r3, #47968	; 0xbb60
   3ca08:	movt	r2, #5
   3ca0c:	movt	r3, #5
   3ca10:	mov	r1, #0
   3ca14:	mov	ip, #1
   3ca18:	str	r6, [r2]
   3ca1c:	mov	r0, r1
   3ca20:	str	ip, [r3, #12]
   3ca24:	str	r1, [r3, #16]
   3ca28:	pop	{r4, r5, r6, pc}
   3ca2c:	movw	r1, #35660	; 0x8b4c
   3ca30:	mov	r0, r4
   3ca34:	movt	r1, #4
   3ca38:	mov	r2, #3
   3ca3c:	bl	3bd7c <__assert_fail@plt+0x27724>
   3ca40:	cmp	r0, #0
   3ca44:	bne	3c944 <__assert_fail@plt+0x282ec>
   3ca48:	ldrb	r3, [r4, #3]
   3ca4c:	cmp	r3, #45	; 0x2d
   3ca50:	cmpne	r3, #95	; 0x5f
   3ca54:	addne	r5, r4, #3
   3ca58:	addeq	r5, r4, #4
   3ca5c:	ldrbeq	r3, [r4, #4]
   3ca60:	b	3c94c <__assert_fail@plt+0x282f4>
   3ca64:	mov	r0, #14
   3ca68:	bl	143dc <nl_langinfo@plt>
   3ca6c:	mov	r4, r0
   3ca70:	b	3c934 <__assert_fail@plt+0x282dc>
   3ca74:	mov	r0, r5
   3ca78:	mov	r1, r6
   3ca7c:	bl	3bc28 <__assert_fail@plt+0x275d0>
   3ca80:	cmp	r0, #0
   3ca84:	beq	3ca00 <__assert_fail@plt+0x283a8>
   3ca88:	mov	r0, r4
   3ca8c:	mov	r1, r6
   3ca90:	bl	13f80 <iconv_open@plt>
   3ca94:	cmn	r0, #1
   3ca98:	mov	r5, r0
   3ca9c:	beq	3caec <__assert_fail@plt+0x28494>
   3caa0:	bl	13a04 <iconv_close@plt>
   3caa4:	mov	r0, r6
   3caa8:	mov	r1, r4
   3caac:	bl	13f80 <iconv_open@plt>
   3cab0:	cmn	r0, #1
   3cab4:	mov	r5, r0
   3cab8:	beq	3cb04 <__assert_fail@plt+0x284ac>
   3cabc:	bl	13a04 <iconv_close@plt>
   3cac0:	movw	r2, #47288	; 0xb8b8
   3cac4:	movw	r3, #47968	; 0xbb60
   3cac8:	movt	r2, #5
   3cacc:	movt	r3, #5
   3cad0:	mov	r1, #0
   3cad4:	str	r4, [r2]
   3cad8:	mov	r0, r1
   3cadc:	mov	r2, #1
   3cae0:	str	r1, [r3, #12]
   3cae4:	str	r2, [r3, #16]
   3cae8:	pop	{r4, r5, r6, pc}
   3caec:	mov	r0, r4
   3caf0:	mov	r1, r6
   3caf4:	mov	r2, #0
   3caf8:	bl	3c0c4 <__assert_fail@plt+0x27a6c>
   3cafc:	mov	r0, r5
   3cb00:	pop	{r4, r5, r6, pc}
   3cb04:	mov	r0, r6
   3cb08:	mov	r1, r4
   3cb0c:	mov	r2, #0
   3cb10:	bl	3c0c4 <__assert_fail@plt+0x27a6c>
   3cb14:	mov	r0, r5
   3cb18:	pop	{r4, r5, r6, pc}
   3cb1c:	movw	r3, #47288	; 0xb8b8
   3cb20:	movt	r3, #5
   3cb24:	ldr	r0, [r3]
   3cb28:	bx	lr
   3cb2c:	movw	r3, #47968	; 0xbb60
   3cb30:	movt	r3, #5
   3cb34:	ldr	r0, [r3, #12]
   3cb38:	bx	lr
   3cb3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3cb40:	movw	r5, #47968	; 0xbb60
   3cb44:	movt	r5, #5
   3cb48:	movw	r4, #47296	; 0xb8c0
   3cb4c:	movt	r4, #5
   3cb50:	sub	sp, sp, #36	; 0x24
   3cb54:	ldr	r6, [r5, #12]
   3cb58:	mov	r7, r0
   3cb5c:	ldr	r3, [r4]
   3cb60:	cmp	r6, #0
   3cb64:	str	r3, [sp, #28]
   3cb68:	bne	3cc34 <__assert_fail@plt+0x285dc>
   3cb6c:	ldr	r2, [r5, #16]
   3cb70:	cmp	r2, #0
   3cb74:	bne	3cc3c <__assert_fail@plt+0x285e4>
   3cb78:	ldrb	r3, [r0]
   3cb7c:	cmp	r3, #0
   3cb80:	beq	3cd18 <__assert_fail@plt+0x286c0>
   3cb84:	mov	ip, r0
   3cb88:	tst	r3, #128	; 0x80
   3cb8c:	ldrb	r3, [ip, #1]!
   3cb90:	addeq	r2, r2, #1
   3cb94:	addne	r2, r2, #2
   3cb98:	cmp	r3, #0
   3cb9c:	bne	3cb88 <__assert_fail@plt+0x28530>
   3cba0:	add	r0, r2, #1
   3cba4:	bl	1398c <gcry_xmalloc@plt>
   3cba8:	ldrb	r3, [r7]
   3cbac:	cmp	r3, #0
   3cbb0:	beq	3cd80 <__assert_fail@plt+0x28728>
   3cbb4:	add	r1, r7, #1
   3cbb8:	mov	r2, r0
   3cbbc:	b	3cbcc <__assert_fail@plt+0x28574>
   3cbc0:	ldrb	r3, [r1], #1
   3cbc4:	cmp	r3, #0
   3cbc8:	beq	3cc14 <__assert_fail@plt+0x285bc>
   3cbcc:	tst	r3, #128	; 0x80
   3cbd0:	strbeq	r3, [r2]
   3cbd4:	addeq	r2, r2, #1
   3cbd8:	beq	3cbc0 <__assert_fail@plt+0x28568>
   3cbdc:	lsr	r3, r3, #6
   3cbe0:	mov	ip, r2
   3cbe4:	mvn	r3, r3, lsl #26
   3cbe8:	mvn	r3, r3, lsr #26
   3cbec:	strb	r3, [ip], #2
   3cbf0:	ldrb	r3, [r1, #-1]
   3cbf4:	and	r3, r3, #63	; 0x3f
   3cbf8:	mvn	r3, r3, lsl #25
   3cbfc:	mvn	r3, r3, lsr #25
   3cc00:	strb	r3, [r2, #1]
   3cc04:	ldrb	r3, [r1], #1
   3cc08:	mov	r2, ip
   3cc0c:	cmp	r3, #0
   3cc10:	bne	3cbcc <__assert_fail@plt+0x28574>
   3cc14:	mov	r3, #0
   3cc18:	strb	r3, [r2]
   3cc1c:	ldr	r2, [sp, #28]
   3cc20:	ldr	r3, [r4]
   3cc24:	cmp	r2, r3
   3cc28:	bne	3cd88 <__assert_fail@plt+0x28730>
   3cc2c:	add	sp, sp, #36	; 0x24
   3cc30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3cc34:	bl	141f0 <gcry_xstrdup@plt>
   3cc38:	b	3cc1c <__assert_fail@plt+0x285c4>
   3cc3c:	movw	r9, #47288	; 0xb8b8
   3cc40:	movt	r9, #5
   3cc44:	movw	r0, #30388	; 0x76b4
   3cc48:	movt	r0, #4
   3cc4c:	ldr	r1, [r9]
   3cc50:	bl	13f80 <iconv_open@plt>
   3cc54:	cmn	r0, #1
   3cc58:	mov	r8, r0
   3cc5c:	beq	3cd60 <__assert_fail@plt+0x28708>
   3cc60:	ldrb	r3, [r7]
   3cc64:	cmp	r3, #0
   3cc68:	moveq	r6, r3
   3cc6c:	moveq	r0, #1
   3cc70:	beq	3cc94 <__assert_fail@plt+0x2863c>
   3cc74:	mov	r2, r7
   3cc78:	tst	r3, #128	; 0x80
   3cc7c:	ldrb	r3, [r2, #1]!
   3cc80:	addeq	r6, r6, #1
   3cc84:	addne	r6, r6, #6
   3cc88:	cmp	r3, #0
   3cc8c:	bne	3cc78 <__assert_fail@plt+0x28620>
   3cc90:	add	r0, r6, #1
   3cc94:	bl	1398c <gcry_xmalloc@plt>
   3cc98:	str	r7, [sp, #12]
   3cc9c:	mov	sl, r0
   3cca0:	mov	r0, r7
   3cca4:	bl	14094 <strlen@plt>
   3cca8:	add	r3, sp, #24
   3ccac:	add	r1, sp, #12
   3ccb0:	str	r3, [sp]
   3ccb4:	add	r2, sp, #20
   3ccb8:	add	r3, sp, #16
   3ccbc:	str	sl, [sp, #16]
   3ccc0:	str	r6, [sp, #24]
   3ccc4:	str	r0, [sp, #20]
   3ccc8:	mov	r0, r8
   3cccc:	bl	13a1c <iconv@plt>
   3ccd0:	cmn	r0, #1
   3ccd4:	beq	3ccf4 <__assert_fail@plt+0x2869c>
   3ccd8:	ldr	r3, [sp, #16]
   3ccdc:	mov	r2, #0
   3cce0:	strb	r2, [r3]
   3cce4:	mov	r0, r8
   3cce8:	bl	13a04 <iconv_close@plt>
   3ccec:	mov	r0, sl
   3ccf0:	b	3cc1c <__assert_fail@plt+0x285c4>
   3ccf4:	ldr	r0, [r5, #24]
   3ccf8:	cmp	r0, #0
   3ccfc:	beq	3cd20 <__assert_fail@plt+0x286c8>
   3cd00:	mov	r1, r7
   3cd04:	mov	r0, sl
   3cd08:	mov	r3, #1
   3cd0c:	str	r3, [r5, #24]
   3cd10:	bl	13e78 <strcpy@plt>
   3cd14:	b	3cce4 <__assert_fail@plt+0x2868c>
   3cd18:	mov	r0, #1
   3cd1c:	b	3cba4 <__assert_fail@plt+0x2854c>
   3cd20:	mov	r2, #5
   3cd24:	movw	r1, #35616	; 0x8b20
   3cd28:	movt	r1, #4
   3cd2c:	bl	13cc8 <dcgettext@plt>
   3cd30:	mov	fp, r0
   3cd34:	bl	14148 <__errno_location@plt>
   3cd38:	ldr	r6, [r9]
   3cd3c:	ldr	r0, [r0]
   3cd40:	bl	13fa4 <strerror@plt>
   3cd44:	mov	r1, r6
   3cd48:	movw	r2, #30388	; 0x76b4
   3cd4c:	movt	r2, #4
   3cd50:	mov	r3, r0
   3cd54:	mov	r0, fp
   3cd58:	bl	3f478 <__assert_fail@plt+0x2ae20>
   3cd5c:	b	3cd00 <__assert_fail@plt+0x286a8>
   3cd60:	ldr	r1, [r9]
   3cd64:	mov	r2, #1
   3cd68:	movw	r0, #30388	; 0x76b4
   3cd6c:	movt	r0, #4
   3cd70:	bl	3c0c4 <__assert_fail@plt+0x27a6c>
   3cd74:	mov	r0, r7
   3cd78:	bl	3cb3c <__assert_fail@plt+0x284e4>
   3cd7c:	b	3cc1c <__assert_fail@plt+0x285c4>
   3cd80:	mov	r2, r0
   3cd84:	b	3cc14 <__assert_fail@plt+0x285bc>
   3cd88:	bl	13cec <__stack_chk_fail@plt>
   3cd8c:	movw	r3, #47968	; 0xbb60
   3cd90:	movt	r3, #5
   3cd94:	ldr	r3, [r3, #16]
   3cd98:	b	3c1c0 <__assert_fail@plt+0x27b68>
   3cd9c:	b	13f80 <iconv_open@plt>
   3cda0:	b	13a1c <iconv@plt>
   3cda4:	b	13a04 <iconv_close@plt>
   3cda8:	ldr	ip, [r0, #8]
   3cdac:	push	{r4, r5, r6, lr}
   3cdb0:	ands	r3, ip, #32768	; 0x8000
   3cdb4:	mov	r4, r0
   3cdb8:	mov	r5, r1
   3cdbc:	mov	r6, r2
   3cdc0:	bne	3ce08 <__assert_fail@plt+0x287b0>
   3cdc4:	ldr	r2, [r0]
   3cdc8:	orr	ip, ip, #32768	; 0x8000
   3cdcc:	str	r3, [r0, #28]
   3cdd0:	str	ip, [r0, #8]
   3cdd4:	str	r3, [r0, #32]
   3cdd8:	str	r3, [r0, #36]	; 0x24
   3cddc:	str	r3, [r0, #12]
   3cde0:	ldr	r2, [r2]
   3cde4:	str	r3, [r0, #40]	; 0x28
   3cde8:	cmp	r2, #0
   3cdec:	str	r3, [r0, #44]	; 0x2c
   3cdf0:	str	r3, [r0, #48]	; 0x30
   3cdf4:	str	r3, [r0, #52]	; 0x34
   3cdf8:	blt	3cf80 <__assert_fail@plt+0x28928>
   3cdfc:	mov	r3, #0
   3ce00:	str	r3, [r4, #24]
   3ce04:	pop	{r4, r5, r6, pc}
   3ce08:	ldr	r3, [r0, #12]
   3ce0c:	cmp	r3, #0
   3ce10:	beq	3cdfc <__assert_fail@plt+0x287a4>
   3ce14:	cmp	r1, #0
   3ce18:	beq	3cec4 <__assert_fail@plt+0x2886c>
   3ce1c:	ldr	r3, [r0, #16]
   3ce20:	cmn	r3, #6
   3ce24:	beq	3cea8 <__assert_fail@plt+0x28850>
   3ce28:	cmn	r3, #5
   3ce2c:	beq	3cf24 <__assert_fail@plt+0x288cc>
   3ce30:	cmn	r3, #4
   3ce34:	beq	3cf40 <__assert_fail@plt+0x288e8>
   3ce38:	cmn	r3, #3
   3ce3c:	beq	3cf8c <__assert_fail@plt+0x28934>
   3ce40:	cmn	r3, #7
   3ce44:	beq	3cfa8 <__assert_fail@plt+0x28950>
   3ce48:	cmn	r3, #10
   3ce4c:	beq	3cfc4 <__assert_fail@plt+0x2896c>
   3ce50:	cmn	r3, #11
   3ce54:	mov	r2, #5
   3ce58:	movweq	r1, #35864	; 0x8c18
   3ce5c:	movwne	r1, #35876	; 0x8c24
   3ce60:	moveq	r0, #0
   3ce64:	movteq	r1, #4
   3ce68:	movne	r0, #0
   3ce6c:	movtne	r1, #4
   3ce70:	bl	13cc8 <dcgettext@plt>
   3ce74:	mov	r3, r0
   3ce78:	movw	r0, #35892	; 0x8c34
   3ce7c:	mov	r1, r5
   3ce80:	ldr	r2, [r6]
   3ce84:	movt	r0, #4
   3ce88:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3ce8c:	ldr	r3, [r4, #12]
   3ce90:	cmp	r3, #1
   3ce94:	moveq	r3, #0
   3ce98:	streq	r3, [r4, #12]
   3ce9c:	beq	3cdfc <__assert_fail@plt+0x287a4>
   3cea0:	mov	r0, #2
   3cea4:	bl	1404c <exit@plt>
   3cea8:	movw	r1, #35744	; 0x8ba0
   3ceac:	mov	r0, #0
   3ceb0:	movt	r1, #4
   3ceb4:	mov	r2, #5
   3ceb8:	bl	13cc8 <dcgettext@plt>
   3cebc:	mov	r3, r0
   3cec0:	b	3ce78 <__assert_fail@plt+0x28820>
   3cec4:	ldr	r6, [r0, #40]	; 0x28
   3cec8:	movw	r2, #35700	; 0x8b74
   3cecc:	ldr	r3, [r0, #16]
   3ced0:	movt	r2, #4
   3ced4:	cmp	r6, #0
   3ced8:	mov	r0, r1
   3cedc:	moveq	r6, r2
   3cee0:	cmn	r3, #3
   3cee4:	beq	3cfe0 <__assert_fail@plt+0x28988>
   3cee8:	cmn	r3, #6
   3ceec:	beq	3cffc <__assert_fail@plt+0x289a4>
   3cef0:	cmn	r3, #7
   3cef4:	beq	3d018 <__assert_fail@plt+0x289c0>
   3cef8:	cmn	r3, #8
   3cefc:	beq	3d034 <__assert_fail@plt+0x289dc>
   3cf00:	cmn	r3, #11
   3cf04:	beq	3cf5c <__assert_fail@plt+0x28904>
   3cf08:	mov	r2, #5
   3cf0c:	movw	r1, #36048	; 0x8cd0
   3cf10:	movt	r1, #4
   3cf14:	bl	13cc8 <dcgettext@plt>
   3cf18:	mov	r1, r6
   3cf1c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3cf20:	b	3ce8c <__assert_fail@plt+0x28834>
   3cf24:	movw	r1, #35768	; 0x8bb8
   3cf28:	mov	r0, #0
   3cf2c:	movt	r1, #4
   3cf30:	mov	r2, #5
   3cf34:	bl	13cc8 <dcgettext@plt>
   3cf38:	mov	r3, r0
   3cf3c:	b	3ce78 <__assert_fail@plt+0x28820>
   3cf40:	movw	r1, #35780	; 0x8bc4
   3cf44:	mov	r0, #0
   3cf48:	movt	r1, #4
   3cf4c:	mov	r2, #5
   3cf50:	bl	13cc8 <dcgettext@plt>
   3cf54:	mov	r3, r0
   3cf58:	b	3ce78 <__assert_fail@plt+0x28820>
   3cf5c:	mov	r2, #5
   3cf60:	movw	r1, #4760	; 0x1298
   3cf64:	movt	r1, #4
   3cf68:	bl	13cc8 <dcgettext@plt>
   3cf6c:	mov	r1, r0
   3cf70:	movw	r0, #23508	; 0x5bd4
   3cf74:	movt	r0, #4
   3cf78:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3cf7c:	b	3ce8c <__assert_fail@plt+0x28834>
   3cf80:	movw	r0, #35708	; 0x8b7c
   3cf84:	movt	r0, #4
   3cf88:	bl	3f57c <__assert_fail@plt+0x2af24>
   3cf8c:	movw	r1, #35800	; 0x8bd8
   3cf90:	mov	r0, #0
   3cf94:	movt	r1, #4
   3cf98:	mov	r2, #5
   3cf9c:	bl	13cc8 <dcgettext@plt>
   3cfa0:	mov	r3, r0
   3cfa4:	b	3ce78 <__assert_fail@plt+0x28820>
   3cfa8:	movw	r1, #35820	; 0x8bec
   3cfac:	mov	r0, #0
   3cfb0:	movt	r1, #4
   3cfb4:	mov	r2, #5
   3cfb8:	bl	13cc8 <dcgettext@plt>
   3cfbc:	mov	r3, r0
   3cfc0:	b	3ce78 <__assert_fail@plt+0x28820>
   3cfc4:	movw	r1, #35836	; 0x8bfc
   3cfc8:	mov	r0, #0
   3cfcc:	movt	r1, #4
   3cfd0:	mov	r2, #5
   3cfd4:	bl	13cc8 <dcgettext@plt>
   3cfd8:	mov	r3, r0
   3cfdc:	b	3ce78 <__assert_fail@plt+0x28820>
   3cfe0:	mov	r2, #5
   3cfe4:	movw	r1, #35904	; 0x8c40
   3cfe8:	movt	r1, #4
   3cfec:	bl	13cc8 <dcgettext@plt>
   3cff0:	mov	r1, r6
   3cff4:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3cff8:	b	3ce8c <__assert_fail@plt+0x28834>
   3cffc:	mov	r2, #5
   3d000:	movw	r1, #35944	; 0x8c68
   3d004:	movt	r1, #4
   3d008:	bl	13cc8 <dcgettext@plt>
   3d00c:	mov	r1, r6
   3d010:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3d014:	b	3ce8c <__assert_fail@plt+0x28834>
   3d018:	mov	r2, #5
   3d01c:	movw	r1, #35988	; 0x8c94
   3d020:	movt	r1, #4
   3d024:	bl	13cc8 <dcgettext@plt>
   3d028:	mov	r1, r6
   3d02c:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3d030:	b	3ce8c <__assert_fail@plt+0x28834>
   3d034:	mov	r2, #5
   3d038:	movw	r1, #36016	; 0x8cb0
   3d03c:	movt	r1, #4
   3d040:	bl	13cc8 <dcgettext@plt>
   3d044:	mov	r1, r6
   3d048:	bl	3f4d0 <__assert_fail@plt+0x2ae78>
   3d04c:	b	3ce8c <__assert_fail@plt+0x28834>
   3d050:	tst	r2, #16
   3d054:	and	ip, r2, #7
   3d058:	push	{r4, lr}
   3d05c:	moveq	r2, #10
   3d060:	movne	r2, #0
   3d064:	cmp	ip, #3
   3d068:	mov	r4, r1
   3d06c:	str	ip, [r0]
   3d070:	beq	3d094 <__assert_fail@plt+0x28a3c>
   3d074:	cmp	ip, #4
   3d078:	beq	3d0b0 <__assert_fail@plt+0x28a58>
   3d07c:	cmp	ip, #1
   3d080:	strne	r3, [r1]
   3d084:	movne	r2, #1
   3d088:	beq	3d094 <__assert_fail@plt+0x28a3c>
   3d08c:	mov	r0, r2
   3d090:	pop	{r4, pc}
   3d094:	mov	r0, r3
   3d098:	mov	r1, #0
   3d09c:	bl	13a4c <strtol@plt>
   3d0a0:	mov	r2, #0
   3d0a4:	str	r0, [r4]
   3d0a8:	mov	r0, r2
   3d0ac:	pop	{r4, pc}
   3d0b0:	mov	r0, r3
   3d0b4:	mov	r1, #0
   3d0b8:	bl	1407c <strtoul@plt>
   3d0bc:	mov	r2, #0
   3d0c0:	str	r0, [r4]
   3d0c4:	mov	r0, r2
   3d0c8:	pop	{r4, pc}
   3d0cc:	movw	r3, #47996	; 0xbb7c
   3d0d0:	movt	r3, #5
   3d0d4:	push	{r4, lr}
   3d0d8:	mov	r4, r0
   3d0dc:	ldr	r3, [r3]
   3d0e0:	cmp	r3, #0
   3d0e4:	beq	3d0f4 <__assert_fail@plt+0x28a9c>
   3d0e8:	blx	r3
   3d0ec:	cmp	r0, #0
   3d0f0:	popne	{r4, pc}
   3d0f4:	sub	r4, r4, #10
   3d0f8:	cmp	r4, #31
   3d0fc:	ldrls	pc, [pc, r4, lsl #2]
   3d100:	b	3d1d8 <__assert_fail@plt+0x28b80>
   3d104:	andeq	sp, r3, r4, lsl #3
   3d108:	muleq	r3, r0, r1
   3d10c:	ldrdeq	sp, [r3], -r8
   3d110:	muleq	r3, ip, r1
   3d114:	andeq	sp, r3, r8, lsr #3
   3d118:			; <UNDEFINED> instruction: 0x0003d1b4
   3d11c:	andeq	sp, r3, r0, asr #3
   3d120:	ldrdeq	sp, [r3], -r8
   3d124:	ldrdeq	sp, [r3], -r8
   3d128:	ldrdeq	sp, [r3], -r8
   3d12c:	ldrdeq	sp, [r3], -r8
   3d130:	ldrdeq	sp, [r3], -r8
   3d134:	ldrdeq	sp, [r3], -r8
   3d138:	ldrdeq	sp, [r3], -r8
   3d13c:	ldrdeq	sp, [r3], -r8
   3d140:	ldrdeq	sp, [r3], -r8
   3d144:	ldrdeq	sp, [r3], -r8
   3d148:	ldrdeq	sp, [r3], -r8
   3d14c:	ldrdeq	sp, [r3], -r8
   3d150:	ldrdeq	sp, [r3], -r8
   3d154:	ldrdeq	sp, [r3], -r8
   3d158:	ldrdeq	sp, [r3], -r8
   3d15c:	ldrdeq	sp, [r3], -r8
   3d160:	ldrdeq	sp, [r3], -r8
   3d164:	ldrdeq	sp, [r3], -r8
   3d168:	ldrdeq	sp, [r3], -r8
   3d16c:	ldrdeq	sp, [r3], -r8
   3d170:	ldrdeq	sp, [r3], -r8
   3d174:	ldrdeq	sp, [r3], -r8
   3d178:	ldrdeq	sp, [r3], -r8
   3d17c:	andeq	sp, r3, ip, asr #3
   3d180:	andeq	sp, r3, ip, asr #3
   3d184:	movw	r0, #36072	; 0x8ce8
   3d188:	movt	r0, #4
   3d18c:	pop	{r4, pc}
   3d190:	movw	r0, #36928	; 0x9040
   3d194:	movt	r0, #4
   3d198:	pop	{r4, pc}
   3d19c:	movw	r0, #36924	; 0x903c
   3d1a0:	movt	r0, #4
   3d1a4:	pop	{r4, pc}
   3d1a8:	movw	r0, #36872	; 0x9008
   3d1ac:	movt	r0, #4
   3d1b0:	pop	{r4, pc}
   3d1b4:	movw	r0, #36748	; 0x8f8c
   3d1b8:	movt	r0, #4
   3d1bc:	pop	{r4, pc}
   3d1c0:	movw	r0, #36152	; 0x8d38
   3d1c4:	movt	r0, #4
   3d1c8:	pop	{r4, pc}
   3d1cc:	movw	r0, #18888	; 0x49c8
   3d1d0:	movt	r0, #4
   3d1d4:	pop	{r4, pc}
   3d1d8:	mov	r0, #0
   3d1dc:	pop	{r4, pc}
   3d1e0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d1e4:	movw	r5, #47316	; 0xb8d4
   3d1e8:	movt	r5, #5
   3d1ec:	mov	sl, r0
   3d1f0:	mov	r9, r1
   3d1f4:	bl	14748 <__assert_fail@plt+0xf0>
   3d1f8:	ldr	r1, [r5]
   3d1fc:	mov	r0, #10
   3d200:	bl	13e0c <_IO_putc@plt>
   3d204:	mov	r0, #41	; 0x29
   3d208:	bl	3d0cc <__assert_fail@plt+0x28a74>
   3d20c:	bl	13f50 <puts@plt>
   3d210:	ldr	r3, [sl, #12]
   3d214:	cmp	r3, #0
   3d218:	beq	3d434 <__assert_fail@plt+0x28ddc>
   3d21c:	ldr	r7, [sl]
   3d220:	cmp	r7, #0
   3d224:	beq	3d2e0 <__assert_fail@plt+0x28c88>
   3d228:	add	r4, sl, #16
   3d22c:	mov	r6, sl
   3d230:	mov	r7, #0
   3d234:	b	3d258 <__assert_fail@plt+0x28c00>
   3d238:	cmp	r8, r7
   3d23c:	ble	3d248 <__assert_fail@plt+0x28bf0>
   3d240:	cmp	r8, #34	; 0x22
   3d244:	movle	r7, r8
   3d248:	mov	r6, r4
   3d24c:	ldr	r3, [r4], #16
   3d250:	cmp	r3, #0
   3d254:	beq	3d2dc <__assert_fail@plt+0x28c84>
   3d258:	ldr	r0, [r6, #4]
   3d25c:	cmp	r0, #0
   3d260:	beq	3d248 <__assert_fail@plt+0x28bf0>
   3d264:	ldr	r3, [r6, #12]
   3d268:	cmp	r3, #0
   3d26c:	beq	3d614 <__assert_fail@plt+0x28fbc>
   3d270:	ldrb	fp, [r3]
   3d274:	cmp	fp, #64	; 0x40
   3d278:	beq	3d248 <__assert_fail@plt+0x28bf0>
   3d27c:	bl	14094 <strlen@plt>
   3d280:	cmp	fp, #124	; 0x7c
   3d284:	mov	r8, r0
   3d288:	bne	3d238 <__assert_fail@plt+0x28be0>
   3d28c:	bl	3cb2c <__assert_fail@plt+0x284d4>
   3d290:	ldr	r3, [r6, #12]
   3d294:	add	r2, r3, #1
   3d298:	ldrb	r3, [r3, #1]
   3d29c:	cmp	r3, #61	; 0x3d
   3d2a0:	beq	3d2b4 <__assert_fail@plt+0x28c5c>
   3d2a4:	cmp	r3, #0
   3d2a8:	cmpne	r3, #124	; 0x7c
   3d2ac:	add	r8, r8, #1
   3d2b0:	beq	3d238 <__assert_fail@plt+0x28be0>
   3d2b4:	cmp	r0, #0
   3d2b8:	beq	3d2c8 <__assert_fail@plt+0x28c70>
   3d2bc:	and	r3, r3, #192	; 0xc0
   3d2c0:	cmp	r3, #128	; 0x80
   3d2c4:	addne	r8, r8, #1
   3d2c8:	ldrb	r3, [r2, #1]!
   3d2cc:	cmp	r3, #124	; 0x7c
   3d2d0:	cmpne	r3, #0
   3d2d4:	bne	3d2b4 <__assert_fail@plt+0x28c5c>
   3d2d8:	b	3d238 <__assert_fail@plt+0x28be0>
   3d2dc:	ldr	r3, [sl, #12]
   3d2e0:	ldrb	r3, [r3]
   3d2e4:	add	r7, r7, #10
   3d2e8:	cmp	r3, #64	; 0x40
   3d2ec:	beq	3d2fc <__assert_fail@plt+0x28ca4>
   3d2f0:	movw	r0, #36940	; 0x904c
   3d2f4:	movt	r0, #4
   3d2f8:	bl	13f50 <puts@plt>
   3d2fc:	ldr	r3, [sl]
   3d300:	cmp	r3, #0
   3d304:	addne	r8, sl, #16
   3d308:	beq	3d420 <__assert_fail@plt+0x28dc8>
   3d30c:	mov	r0, #0
   3d310:	ldr	r1, [sl, #12]
   3d314:	mov	r2, #5
   3d318:	bl	13cc8 <dcgettext@plt>
   3d31c:	subs	r6, r0, #0
   3d320:	beq	3d330 <__assert_fail@plt+0x28cd8>
   3d324:	ldrb	r3, [r6]
   3d328:	cmp	r3, #64	; 0x40
   3d32c:	beq	3d538 <__assert_fail@plt+0x28ee0>
   3d330:	ldr	r2, [sl]
   3d334:	cmp	r2, #255	; 0xff
   3d338:	bgt	3d50c <__assert_fail@plt+0x28eb4>
   3d33c:	movw	r1, #36952	; 0x9058
   3d340:	mov	r0, #1
   3d344:	movt	r1, #4
   3d348:	bl	14214 <__printf_chk@plt>
   3d34c:	ldr	r3, [sl, #4]
   3d350:	cmp	r3, #0
   3d354:	movne	r4, #3
   3d358:	beq	3d620 <__assert_fail@plt+0x28fc8>
   3d35c:	ldr	r2, [sl]
   3d360:	movw	r1, #36964	; 0x9064
   3d364:	mov	r0, #1
   3d368:	movt	r1, #4
   3d36c:	cmp	r2, #255	; 0xff
   3d370:	movgt	r2, #32
   3d374:	movle	r2, #44	; 0x2c
   3d378:	bl	14214 <__printf_chk@plt>
   3d37c:	cmp	r6, #0
   3d380:	add	r4, r4, r0
   3d384:	beq	3d394 <__assert_fail@plt+0x28d3c>
   3d388:	ldrb	r3, [r6]
   3d38c:	cmp	r3, #124	; 0x7c
   3d390:	beq	3d578 <__assert_fail@plt+0x28f20>
   3d394:	movw	r0, #36960	; 0x9060
   3d398:	mov	r2, #3
   3d39c:	mov	r1, #1
   3d3a0:	movt	r0, #4
   3d3a4:	ldr	r3, [r5]
   3d3a8:	add	r4, r4, r2
   3d3ac:	bl	13e18 <fwrite@plt>
   3d3b0:	cmp	r7, r4
   3d3b4:	ble	3d3d4 <__assert_fail@plt+0x28d7c>
   3d3b8:	add	r4, r4, #1
   3d3bc:	mov	r0, #32
   3d3c0:	ldr	r1, [r5]
   3d3c4:	bl	13e0c <_IO_putc@plt>
   3d3c8:	cmp	r4, r7
   3d3cc:	bne	3d3b8 <__assert_fail@plt+0x28d60>
   3d3d0:	mov	r4, r7
   3d3d4:	cmp	r6, #0
   3d3d8:	beq	3d404 <__assert_fail@plt+0x28dac>
   3d3dc:	ldrb	r0, [r6]
   3d3e0:	cmp	r0, #0
   3d3e4:	beq	3d404 <__assert_fail@plt+0x28dac>
   3d3e8:	cmp	r7, r4
   3d3ec:	blt	3d5dc <__assert_fail@plt+0x28f84>
   3d3f0:	cmp	r0, #10
   3d3f4:	bne	3d4c8 <__assert_fail@plt+0x28e70>
   3d3f8:	ldrb	r3, [r6, #1]
   3d3fc:	cmp	r3, #0
   3d400:	bne	3d4e4 <__assert_fail@plt+0x28e8c>
   3d404:	mov	r0, #10
   3d408:	ldr	r1, [r5]
   3d40c:	bl	13e0c <_IO_putc@plt>
   3d410:	mov	sl, r8
   3d414:	ldr	r3, [r8], #16
   3d418:	cmp	r3, #0
   3d41c:	bne	3d30c <__assert_fail@plt+0x28cb4>
   3d420:	tst	r9, #32
   3d424:	beq	3d434 <__assert_fail@plt+0x28ddc>
   3d428:	movw	r0, #36972	; 0x906c
   3d42c:	movt	r0, #4
   3d430:	bl	13f50 <puts@plt>
   3d434:	mov	r0, #19
   3d438:	bl	3d0cc <__assert_fail@plt+0x28a74>
   3d43c:	subs	r4, r0, #0
   3d440:	beq	3d4b8 <__assert_fail@plt+0x28e60>
   3d444:	ldr	r1, [r5]
   3d448:	mov	r0, #10
   3d44c:	bl	13e0c <_IO_putc@plt>
   3d450:	mov	r0, r4
   3d454:	movw	r1, #37028	; 0x90a4
   3d458:	movt	r1, #4
   3d45c:	bl	13998 <strstr@plt>
   3d460:	movw	r3, #47316	; 0xb8d4
   3d464:	movt	r3, #5
   3d468:	subs	r6, r0, #0
   3d46c:	beq	3d64c <__assert_fail@plt+0x28ff4>
   3d470:	cmp	r6, r4
   3d474:	beq	3d48c <__assert_fail@plt+0x28e34>
   3d478:	mov	r0, r4
   3d47c:	ldr	r3, [r3]
   3d480:	rsb	r1, r4, r6
   3d484:	mov	r2, #1
   3d488:	bl	13e18 <fwrite@plt>
   3d48c:	ldr	r3, [r5]
   3d490:	movw	r0, #37036	; 0x90ac
   3d494:	mov	r1, #1
   3d498:	movt	r0, #4
   3d49c:	mov	r2, #21
   3d4a0:	movw	r4, #47316	; 0xb8d4
   3d4a4:	bl	13e18 <fwrite@plt>
   3d4a8:	ldrb	r3, [r6, #7]
   3d4ac:	movt	r4, #5
   3d4b0:	cmp	r3, #0
   3d4b4:	bne	3d63c <__assert_fail@plt+0x28fe4>
   3d4b8:	ldr	r0, [r5]
   3d4bc:	bl	13ae8 <fflush@plt>
   3d4c0:	mov	r0, #0
   3d4c4:	bl	1404c <exit@plt>
   3d4c8:	ldr	r1, [r5]
   3d4cc:	bl	13e0c <_IO_putc@plt>
   3d4d0:	ldrb	r0, [r6, #1]
   3d4d4:	add	r6, r6, #1
   3d4d8:	cmp	r0, #0
   3d4dc:	bne	3d3f0 <__assert_fail@plt+0x28d98>
   3d4e0:	b	3d404 <__assert_fail@plt+0x28dac>
   3d4e4:	ldr	r1, [r5]
   3d4e8:	mov	r4, #0
   3d4ec:	bl	13e0c <_IO_putc@plt>
   3d4f0:	add	r4, r4, #1
   3d4f4:	mov	r0, #32
   3d4f8:	ldr	r1, [r5]
   3d4fc:	bl	13e0c <_IO_putc@plt>
   3d500:	cmp	r4, r7
   3d504:	bne	3d4f0 <__assert_fail@plt+0x28e98>
   3d508:	b	3d4d0 <__assert_fail@plt+0x28e78>
   3d50c:	movw	r0, #36960	; 0x9060
   3d510:	mov	r2, #3
   3d514:	mov	r1, #1
   3d518:	movt	r0, #4
   3d51c:	ldr	r3, [r5]
   3d520:	mov	r4, r2
   3d524:	bl	13e18 <fwrite@plt>
   3d528:	ldr	r3, [sl, #4]
   3d52c:	cmp	r3, #0
   3d530:	bne	3d35c <__assert_fail@plt+0x28d04>
   3d534:	b	3d3b0 <__assert_fail@plt+0x28d58>
   3d538:	ldrb	r0, [r6, #1]
   3d53c:	cmp	r0, #0
   3d540:	beq	3d410 <__assert_fail@plt+0x28db8>
   3d544:	add	r6, r6, #1
   3d548:	cmp	r0, #10
   3d54c:	bne	3d55c <__assert_fail@plt+0x28f04>
   3d550:	ldrb	r3, [r6, #1]
   3d554:	cmp	r3, #0
   3d558:	beq	3d404 <__assert_fail@plt+0x28dac>
   3d55c:	ldr	r1, [r5]
   3d560:	add	r6, r6, #1
   3d564:	bl	13e0c <_IO_putc@plt>
   3d568:	ldrb	r0, [r6]
   3d56c:	cmp	r0, #0
   3d570:	bne	3d548 <__assert_fail@plt+0x28ef0>
   3d574:	b	3d404 <__assert_fail@plt+0x28dac>
   3d578:	ldrb	r0, [r6, #1]
   3d57c:	add	sl, r6, #1
   3d580:	cmp	r0, #61	; 0x3d
   3d584:	beq	3d5ac <__assert_fail@plt+0x28f54>
   3d588:	mov	r0, #32
   3d58c:	ldr	r1, [r5]
   3d590:	bl	13e0c <_IO_putc@plt>
   3d594:	ldrb	r0, [r6, #1]
   3d598:	add	r4, r4, #1
   3d59c:	cmp	r0, #124	; 0x7c
   3d5a0:	cmpne	r0, #0
   3d5a4:	moveq	r6, sl
   3d5a8:	beq	3d5d0 <__assert_fail@plt+0x28f78>
   3d5ac:	add	sl, r6, #2
   3d5b0:	ldr	r1, [r5]
   3d5b4:	mov	r6, sl
   3d5b8:	bl	13e0c <_IO_putc@plt>
   3d5bc:	ldrb	r0, [sl], #1
   3d5c0:	add	r4, r4, #1
   3d5c4:	cmp	r0, #124	; 0x7c
   3d5c8:	cmpne	r0, #0
   3d5cc:	bne	3d5b0 <__assert_fail@plt+0x28f58>
   3d5d0:	cmp	r0, #0
   3d5d4:	addne	r6, r6, #1
   3d5d8:	b	3d394 <__assert_fail@plt+0x28d3c>
   3d5dc:	mov	r0, #10
   3d5e0:	ldr	r1, [r5]
   3d5e4:	bl	13e0c <_IO_putc@plt>
   3d5e8:	mov	r4, #0
   3d5ec:	add	r4, r4, #1
   3d5f0:	mov	r0, #32
   3d5f4:	ldr	r1, [r5]
   3d5f8:	bl	13e0c <_IO_putc@plt>
   3d5fc:	cmp	r4, r7
   3d600:	bne	3d5ec <__assert_fail@plt+0x28f94>
   3d604:	ldrb	r0, [r6]
   3d608:	cmp	r0, #0
   3d60c:	bne	3d3f0 <__assert_fail@plt+0x28d98>
   3d610:	b	3d404 <__assert_fail@plt+0x28dac>
   3d614:	bl	14094 <strlen@plt>
   3d618:	mov	r8, r0
   3d61c:	b	3d238 <__assert_fail@plt+0x28be0>
   3d620:	cmp	r6, #0
   3d624:	beq	3d634 <__assert_fail@plt+0x28fdc>
   3d628:	ldrb	r3, [r6]
   3d62c:	cmp	r3, #124	; 0x7c
   3d630:	beq	3d65c <__assert_fail@plt+0x29004>
   3d634:	mov	r4, #3
   3d638:	b	3d3b8 <__assert_fail@plt+0x28d60>
   3d63c:	add	r0, r6, #7
   3d640:	ldr	r1, [r4]
   3d644:	bl	145b0 <fputs@plt>
   3d648:	b	3d4b8 <__assert_fail@plt+0x28e60>
   3d64c:	mov	r0, r4
   3d650:	ldr	r1, [r3]
   3d654:	bl	145b0 <fputs@plt>
   3d658:	b	3d4b8 <__assert_fail@plt+0x28e60>
   3d65c:	mov	r0, #32
   3d660:	ldr	r1, [r5]
   3d664:	add	fp, r6, #1
   3d668:	bl	13e0c <_IO_putc@plt>
   3d66c:	mov	r4, #4
   3d670:	b	3d680 <__assert_fail@plt+0x29028>
   3d674:	ldr	r1, [r5]
   3d678:	add	r4, r4, #1
   3d67c:	bl	13e0c <_IO_putc@plt>
   3d680:	mov	r6, fp
   3d684:	add	fp, fp, #1
   3d688:	ldrb	r0, [r6]
   3d68c:	cmp	r0, #124	; 0x7c
   3d690:	cmpne	r0, #0
   3d694:	bne	3d674 <__assert_fail@plt+0x2901c>
   3d698:	cmp	r0, #0
   3d69c:	movne	r6, fp
   3d6a0:	b	3d528 <__assert_fail@plt+0x28ed0>
   3d6a4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3d6a8:	sub	sp, sp, #20
   3d6ac:	mov	r4, r0
   3d6b0:	str	r1, [sp, #8]
   3d6b4:	mov	r1, #0
   3d6b8:	mov	r2, r1
   3d6bc:	bl	3cda8 <__assert_fail@plt+0x28750>
   3d6c0:	ldr	fp, [r4]
   3d6c4:	ldr	r7, [r4, #28]
   3d6c8:	ldr	r8, [r4, #4]
   3d6cc:	ldr	r5, [fp]
   3d6d0:	mov	r1, fp
   3d6d4:	adds	r3, r5, #0
   3d6d8:	mov	r2, r8
   3d6dc:	ldr	r6, [r8]
   3d6e0:	movne	r3, #1
   3d6e4:	cmp	r7, #0
   3d6e8:	movne	r3, #0
   3d6ec:	cmp	r3, #0
   3d6f0:	beq	3d70c <__assert_fail@plt+0x290b4>
   3d6f4:	ldr	r3, [r4, #8]
   3d6f8:	tst	r3, #16
   3d6fc:	bne	3d7a4 <__assert_fail@plt+0x2914c>
   3d700:	sub	r5, r5, #1
   3d704:	add	r6, r6, #4
   3d708:	mov	r7, #1
   3d70c:	cmp	r5, #0
   3d710:	beq	3d884 <__assert_fail@plt+0x2922c>
   3d714:	ldr	r0, [r4, #36]	; 0x24
   3d718:	ldr	r9, [r6]
   3d71c:	cmp	r0, #0
   3d720:	str	r9, [r4, #40]	; 0x28
   3d724:	bne	3d79c <__assert_fail@plt+0x29144>
   3d728:	mov	r2, #1
   3d72c:	ldrb	r3, [r9]
   3d730:	cmp	r3, #45	; 0x2d
   3d734:	beq	3d7ac <__assert_fail@plt+0x29154>
   3d738:	ldr	r1, [r4, #32]
   3d73c:	cmp	r1, #0
   3d740:	bne	3d8c0 <__assert_fail@plt+0x29268>
   3d744:	ldr	r3, [r4, #8]
   3d748:	tst	r3, #4
   3d74c:	bne	3d890 <__assert_fail@plt+0x29238>
   3d750:	cmp	r5, #0
   3d754:	str	r2, [r4, #36]	; 0x24
   3d758:	beq	3d87c <__assert_fail@plt+0x29224>
   3d75c:	ldr	r1, [r4, #36]	; 0x24
   3d760:	ldr	r9, [r6]
   3d764:	cmp	r1, #0
   3d768:	str	r9, [r4, #40]	; 0x28
   3d76c:	beq	3d72c <__assert_fail@plt+0x290d4>
   3d770:	ands	r3, r3, #2
   3d774:	streq	r3, [r4, #16]
   3d778:	moveq	r1, fp
   3d77c:	moveq	r2, r8
   3d780:	bne	3d890 <__assert_fail@plt+0x29238>
   3d784:	str	r5, [r1]
   3d788:	str	r6, [r2]
   3d78c:	ldr	r0, [r4, #16]
   3d790:	str	r7, [r4, #28]
   3d794:	add	sp, sp, #20
   3d798:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3d79c:	ldr	r3, [r4, #8]
   3d7a0:	b	3d770 <__assert_fail@plt+0x29118>
   3d7a4:	mov	r7, #0
   3d7a8:	b	3d714 <__assert_fail@plt+0x290bc>
   3d7ac:	ldrb	r3, [r9, #1]
   3d7b0:	cmp	r3, #45	; 0x2d
   3d7b4:	beq	3d848 <__assert_fail@plt+0x291f0>
   3d7b8:	cmp	r3, #0
   3d7bc:	beq	3d738 <__assert_fail@plt+0x290e0>
   3d7c0:	ldr	r1, [r4, #32]
   3d7c4:	cmp	r1, #0
   3d7c8:	bne	3d8c0 <__assert_fail@plt+0x29268>
   3d7cc:	ldr	r2, [r4, #8]
   3d7d0:	mov	r3, #1
   3d7d4:	str	r3, [r4, #32]
   3d7d8:	tst	r2, #32
   3d7dc:	beq	3d8bc <__assert_fail@plt+0x29264>
   3d7e0:	ldr	r0, [sp, #8]
   3d7e4:	ldr	sl, [r0]
   3d7e8:	cmp	sl, #0
   3d7ec:	beq	3dd5c <__assert_fail@plt+0x29704>
   3d7f0:	add	r3, r9, r3
   3d7f4:	add	r9, r0, #16
   3d7f8:	mov	r2, r1
   3d7fc:	mov	r1, r0
   3d800:	ldr	r0, [r1, #4]
   3d804:	cmp	r0, #0
   3d808:	beq	3d82c <__assert_fail@plt+0x291d4>
   3d80c:	mov	r1, r3
   3d810:	str	r2, [sp, #4]
   3d814:	str	r3, [sp]
   3d818:	bl	13a28 <strcmp@plt>
   3d81c:	ldr	r2, [sp, #4]
   3d820:	ldr	r3, [sp]
   3d824:	cmp	r0, #0
   3d828:	beq	3dbb0 <__assert_fail@plt+0x29558>
   3d82c:	mov	r1, r9
   3d830:	ldr	r0, [r9], #16
   3d834:	add	r2, r2, #1
   3d838:	cmp	r0, #0
   3d83c:	bne	3d800 <__assert_fail@plt+0x291a8>
   3d840:	mov	r1, #1
   3d844:	b	3d8d4 <__assert_fail@plt+0x2927c>
   3d848:	str	r0, [r4, #32]
   3d84c:	ldrb	sl, [r9, #2]
   3d850:	cmp	sl, #0
   3d854:	bne	3da68 <__assert_fail@plt+0x29410>
   3d858:	ldr	r3, [r4, #8]
   3d85c:	tst	r3, #8
   3d860:	bne	3da68 <__assert_fail@plt+0x29410>
   3d864:	sub	r5, r5, #1
   3d868:	str	r2, [r4, #36]	; 0x24
   3d86c:	cmp	r5, #0
   3d870:	add	r6, r6, #4
   3d874:	add	r7, r7, #1
   3d878:	bne	3d75c <__assert_fail@plt+0x29104>
   3d87c:	mov	r1, fp
   3d880:	mov	r2, r8
   3d884:	mov	r5, #0
   3d888:	str	r5, [r4, #16]
   3d88c:	b	3d784 <__assert_fail@plt+0x2912c>
   3d890:	mvn	r0, #0
   3d894:	mov	r3, #2
   3d898:	str	r9, [r4, #24]
   3d89c:	sub	r5, r5, #1
   3d8a0:	add	r6, r6, #4
   3d8a4:	add	r7, r7, #1
   3d8a8:	mov	r1, fp
   3d8ac:	mov	r2, r8
   3d8b0:	str	r0, [r4, #16]
   3d8b4:	str	r3, [r4, #20]
   3d8b8:	b	3d784 <__assert_fail@plt+0x2912c>
   3d8bc:	mov	r1, r3
   3d8c0:	ldr	r3, [sp, #8]
   3d8c4:	ldr	sl, [r3]
   3d8c8:	add	r3, r9, r1
   3d8cc:	cmp	sl, #0
   3d8d0:	beq	3dd50 <__assert_fail@plt+0x296f8>
   3d8d4:	ldrb	r0, [r3]
   3d8d8:	ldr	r2, [sp, #8]
   3d8dc:	cmp	sl, r0
   3d8e0:	beq	3da08 <__assert_fail@plt+0x293b0>
   3d8e4:	add	r9, r2, #16
   3d8e8:	b	3d8f8 <__assert_fail@plt+0x292a0>
   3d8ec:	cmp	sl, r0
   3d8f0:	add	r9, r2, #16
   3d8f4:	beq	3d974 <__assert_fail@plt+0x2931c>
   3d8f8:	ldr	sl, [r9]
   3d8fc:	mov	r2, r9
   3d900:	cmp	sl, #0
   3d904:	bne	3d8ec <__assert_fail@plt+0x29294>
   3d908:	mov	r9, #0
   3d90c:	cmp	r0, #104	; 0x68
   3d910:	cmpne	r0, #63	; 0x3f
   3d914:	beq	3ddf4 <__assert_fail@plt+0x2979c>
   3d918:	ldr	r2, [r2, #8]
   3d91c:	add	r1, r1, #1
   3d920:	str	r3, [r4, #24]
   3d924:	tst	r2, #128	; 0x80
   3d928:	str	r1, [r4, #32]
   3d92c:	mvneq	r2, #1
   3d930:	mvnne	r2, #6
   3d934:	str	r2, [r4, #16]
   3d938:	ldrb	r3, [r3, #1]
   3d93c:	cmp	r3, #0
   3d940:	beq	3d954 <__assert_fail@plt+0x292fc>
   3d944:	cmp	r9, #0
   3d948:	moveq	r1, fp
   3d94c:	moveq	r2, r8
   3d950:	beq	3d784 <__assert_fail@plt+0x2912c>
   3d954:	mov	r3, #0
   3d958:	sub	r5, r5, #1
   3d95c:	add	r6, r6, #4
   3d960:	add	r7, r7, #1
   3d964:	mov	r1, fp
   3d968:	mov	r2, r8
   3d96c:	str	r3, [r4, #32]
   3d970:	b	3d784 <__assert_fail@plt+0x2912c>
   3d974:	mov	r9, #0
   3d978:	ldr	r2, [r2, #8]
   3d97c:	str	sl, [r4, #16]
   3d980:	ands	r0, r2, #7
   3d984:	beq	3d9f8 <__assert_fail@plt+0x293a0>
   3d988:	ldrb	r1, [r3, #1]
   3d98c:	cmp	r1, #0
   3d990:	beq	3d9b8 <__assert_fail@plt+0x29360>
   3d994:	cmp	r9, #0
   3d998:	bne	3d9b8 <__assert_fail@plt+0x29360>
   3d99c:	add	r3, r3, #1
   3d9a0:	add	r0, r4, #20
   3d9a4:	add	r1, r4, #24
   3d9a8:	bl	3d050 <__assert_fail@plt+0x289f8>
   3d9ac:	ldr	fp, [r4]
   3d9b0:	ldr	r8, [r4, #4]
   3d9b4:	b	3d954 <__assert_fail@plt+0x292fc>
   3d9b8:	ldr	r3, [r6, #4]
   3d9bc:	cmp	r3, #0
   3d9c0:	beq	3da1c <__assert_fail@plt+0x293c4>
   3d9c4:	ldrb	r1, [r3]
   3d9c8:	cmp	r1, #45	; 0x2d
   3d9cc:	bne	3da3c <__assert_fail@plt+0x293e4>
   3d9d0:	ldrb	r1, [r3, #1]
   3d9d4:	cmp	r1, #0
   3d9d8:	beq	3da3c <__assert_fail@plt+0x293e4>
   3d9dc:	tst	r2, #8
   3d9e0:	beq	3da3c <__assert_fail@plt+0x293e4>
   3d9e4:	mov	r2, #0
   3d9e8:	movw	r3, #34804	; 0x87f4
   3d9ec:	str	r2, [r4, #20]
   3d9f0:	movt	r3, #4
   3d9f4:	b	3d938 <__assert_fail@plt+0x292e0>
   3d9f8:	add	r1, r1, #1
   3d9fc:	str	r0, [r4, #20]
   3da00:	str	r1, [r4, #32]
   3da04:	b	3d938 <__assert_fail@plt+0x292e0>
   3da08:	mov	r9, #0
   3da0c:	cmp	sl, #0
   3da10:	bne	3d978 <__assert_fail@plt+0x29320>
   3da14:	ldrb	r0, [r3]
   3da18:	b	3d90c <__assert_fail@plt+0x292b4>
   3da1c:	tst	r2, #8
   3da20:	strne	r3, [r4, #20]
   3da24:	mvneq	r2, #2
   3da28:	movwne	r3, #34804	; 0x87f4
   3da2c:	movweq	r3, #34804	; 0x87f4
   3da30:	streq	r2, [r4, #16]
   3da34:	movt	r3, #4
   3da38:	b	3d938 <__assert_fail@plt+0x292e0>
   3da3c:	add	r0, r4, #20
   3da40:	add	r1, r4, #24
   3da44:	bl	3d050 <__assert_fail@plt+0x289f8>
   3da48:	sub	r5, r5, #1
   3da4c:	movw	r3, #34804	; 0x87f4
   3da50:	add	r6, r6, #4
   3da54:	add	r7, r7, #1
   3da58:	ldr	fp, [r4]
   3da5c:	movt	r3, #4
   3da60:	ldr	r8, [r4, #4]
   3da64:	b	3d938 <__assert_fail@plt+0x292e0>
   3da68:	add	r8, r9, #2
   3da6c:	mov	r1, #61	; 0x3d
   3da70:	mov	r0, r8
   3da74:	bl	140ac <strchr@plt>
   3da78:	cmp	r0, #0
   3da7c:	str	r0, [sp, #12]
   3da80:	movne	r3, #0
   3da84:	strbne	r3, [r0]
   3da88:	ldrbne	sl, [r9, #2]
   3da8c:	cmp	sl, #0
   3da90:	beq	3db30 <__assert_fail@plt+0x294d8>
   3da94:	ldr	r0, [sp, #8]
   3da98:	ldr	r3, [r0]
   3da9c:	cmp	r3, #0
   3daa0:	beq	3db30 <__assert_fail@plt+0x294d8>
   3daa4:	add	sl, r0, #16
   3daa8:	mov	r2, r0
   3daac:	mov	fp, #0
   3dab0:	mov	r9, sl
   3dab4:	ldr	r0, [r2, #4]
   3dab8:	cmp	r0, #0
   3dabc:	beq	3dad0 <__assert_fail@plt+0x29478>
   3dac0:	mov	r1, r8
   3dac4:	bl	13a28 <strcmp@plt>
   3dac8:	cmp	r0, #0
   3dacc:	beq	3dbcc <__assert_fail@plt+0x29574>
   3dad0:	mov	r2, r9
   3dad4:	ldr	r1, [r9], #16
   3dad8:	add	fp, fp, #1
   3dadc:	cmp	r1, #0
   3dae0:	bne	3dab4 <__assert_fail@plt+0x2945c>
   3dae4:	mov	r0, r8
   3dae8:	mov	r9, r1
   3daec:	bl	14094 <strlen@plt>
   3daf0:	ldr	r2, [sp, #8]
   3daf4:	mov	fp, sl
   3daf8:	mov	sl, r0
   3dafc:	ldr	r0, [r2, #4]
   3db00:	cmp	r0, #0
   3db04:	beq	3db1c <__assert_fail@plt+0x294c4>
   3db08:	mov	r1, r8
   3db0c:	mov	r2, sl
   3db10:	bl	145bc <strncmp@plt>
   3db14:	cmp	r0, #0
   3db18:	beq	3dc3c <__assert_fail@plt+0x295e4>
   3db1c:	mov	r2, fp
   3db20:	ldr	r1, [fp], #16
   3db24:	add	r9, r9, #1
   3db28:	cmp	r1, #0
   3db2c:	bne	3dafc <__assert_fail@plt+0x294a4>
   3db30:	mvn	r9, #0
   3db34:	ldr	r3, [sp, #12]
   3db38:	cmp	r3, #0
   3db3c:	ldrne	r0, [sp, #12]
   3db40:	movne	r3, #61	; 0x3d
   3db44:	strbne	r3, [r0]
   3db48:	cmp	r9, #0
   3db4c:	blt	3dbec <__assert_fail@plt+0x29594>
   3db50:	ldr	r3, [sp, #8]
   3db54:	add	r2, r3, r9, lsl #4
   3db58:	ldr	r3, [r3, r9, lsl #4]
   3db5c:	ldr	r2, [r2, #8]
   3db60:	tst	r2, #7
   3db64:	str	r3, [r4, #16]
   3db68:	beq	3dbd4 <__assert_fail@plt+0x2957c>
   3db6c:	ldr	r3, [sp, #12]
   3db70:	cmp	r3, #0
   3db74:	beq	3dd88 <__assert_fail@plt+0x29730>
   3db78:	ldrb	r3, [r3, #1]
   3db7c:	cmp	r3, #0
   3db80:	beq	3dd70 <__assert_fail@plt+0x29718>
   3db84:	ldr	r0, [sp, #12]
   3db88:	adds	r3, r0, #1
   3db8c:	beq	3dd70 <__assert_fail@plt+0x29718>
   3db90:	add	r0, r4, #20
   3db94:	add	r1, r4, #24
   3db98:	bl	3d050 <__assert_fail@plt+0x289f8>
   3db9c:	sub	r5, r5, #1
   3dba0:	add	r6, r6, #4
   3dba4:	add	r7, r7, #1
   3dba8:	ldm	r4, {r1, r2}
   3dbac:	b	3d784 <__assert_fail@plt+0x2912c>
   3dbb0:	ldr	r1, [sp, #8]
   3dbb4:	ldr	r0, [sp, #8]
   3dbb8:	ldr	sl, [r1, r2, lsl #4]
   3dbbc:	mov	r1, #1
   3dbc0:	add	r2, r0, r2, lsl #4
   3dbc4:	mov	r9, r1
   3dbc8:	b	3da0c <__assert_fail@plt+0x293b4>
   3dbcc:	mov	r9, fp
   3dbd0:	b	3db34 <__assert_fail@plt+0x294dc>
   3dbd4:	ldr	r3, [sp, #12]
   3dbd8:	cmp	r3, #0
   3dbdc:	beq	3ddc4 <__assert_fail@plt+0x2976c>
   3dbe0:	mvn	r3, #5
   3dbe4:	str	r3, [r4, #20]
   3dbe8:	b	3db9c <__assert_fail@plt+0x29544>
   3dbec:	movw	r0, #37060	; 0x90c4
   3dbf0:	mov	r1, r8
   3dbf4:	movt	r0, #4
   3dbf8:	bl	13a28 <strcmp@plt>
   3dbfc:	cmp	r0, #0
   3dc00:	beq	3ddf4 <__assert_fail@plt+0x2979c>
   3dc04:	movw	r0, #15788	; 0x3dac
   3dc08:	mov	r1, r8
   3dc0c:	movt	r0, #4
   3dc10:	bl	13a28 <strcmp@plt>
   3dc14:	cmp	r0, #0
   3dc18:	bne	3dca4 <__assert_fail@plt+0x2964c>
   3dc1c:	ldr	r3, [r4, #8]
   3dc20:	ands	sl, r3, #64	; 0x40
   3dc24:	beq	3ddd0 <__assert_fail@plt+0x29778>
   3dc28:	cmn	r9, #2
   3dc2c:	bne	3dddc <__assert_fail@plt+0x29784>
   3dc30:	mvn	r3, #7
   3dc34:	str	r3, [r4, #16]
   3dc38:	b	3db9c <__assert_fail@plt+0x29544>
   3dc3c:	ldr	r2, [sp, #8]
   3dc40:	add	r3, r9, #1
   3dc44:	ldr	r1, [r2, r3, lsl #4]
   3dc48:	lsl	r3, r3, #4
   3dc4c:	add	r2, r2, r3
   3dc50:	cmp	r1, #0
   3dc54:	beq	3db34 <__assert_fail@plt+0x294dc>
   3dc58:	ldr	r0, [sp, #8]
   3dc5c:	sub	r3, r3, #16
   3dc60:	add	fp, r0, r3
   3dc64:	b	3dc7c <__assert_fail@plt+0x29624>
   3dc68:	add	r2, fp, #32
   3dc6c:	add	fp, fp, #16
   3dc70:	ldr	r1, [fp, #16]
   3dc74:	cmp	r1, #0
   3dc78:	beq	3db34 <__assert_fail@plt+0x294dc>
   3dc7c:	ldr	r0, [r2, #4]
   3dc80:	cmp	r0, #0
   3dc84:	beq	3dc68 <__assert_fail@plt+0x29610>
   3dc88:	mov	r1, r8
   3dc8c:	mov	r2, sl
   3dc90:	bl	145bc <strncmp@plt>
   3dc94:	cmp	r0, #0
   3dc98:	bne	3dc68 <__assert_fail@plt+0x29610>
   3dc9c:	mvn	r9, #1
   3dca0:	b	3db34 <__assert_fail@plt+0x294dc>
   3dca4:	movw	r0, #37068	; 0x90cc
   3dca8:	mov	r1, r8
   3dcac:	movt	r0, #4
   3dcb0:	bl	13a28 <strcmp@plt>
   3dcb4:	subs	sl, r0, #0
   3dcb8:	beq	3de10 <__assert_fail@plt+0x297b8>
   3dcbc:	movw	r0, #37080	; 0x90d8
   3dcc0:	mov	r1, r8
   3dcc4:	movt	r0, #4
   3dcc8:	bl	13a28 <strcmp@plt>
   3dccc:	cmp	r0, #0
   3dcd0:	bne	3dc28 <__assert_fail@plt+0x295d0>
   3dcd4:	ldr	r1, [sp, #8]
   3dcd8:	ldr	r3, [r1]
   3dcdc:	cmp	r3, #0
   3dce0:	beq	3dd28 <__assert_fail@plt+0x296d0>
   3dce4:	ldr	r3, [sp, #8]
   3dce8:	add	r4, r3, #16
   3dcec:	mov	r7, r3
   3dcf0:	ldr	r2, [r7, #4]
   3dcf4:	cmp	r2, #0
   3dcf8:	beq	3dd18 <__assert_fail@plt+0x296c0>
   3dcfc:	ldr	r3, [r7, #8]
   3dd00:	tst	r3, #64	; 0x40
   3dd04:	bne	3dd18 <__assert_fail@plt+0x296c0>
   3dd08:	movw	r1, #37140	; 0x9114
   3dd0c:	mov	r0, #1
   3dd10:	movt	r1, #4
   3dd14:	bl	14214 <__printf_chk@plt>
   3dd18:	mov	r7, r4
   3dd1c:	ldr	r3, [r4], #16
   3dd20:	cmp	r3, #0
   3dd24:	bne	3dcf0 <__assert_fail@plt+0x29698>
   3dd28:	movw	r3, #47316	; 0xb8d4
   3dd2c:	movt	r3, #5
   3dd30:	movw	r0, #37096	; 0x90e8
   3dd34:	mov	r1, #1
   3dd38:	ldr	r3, [r3]
   3dd3c:	movt	r0, #4
   3dd40:	mov	r2, #43	; 0x2b
   3dd44:	bl	13e18 <fwrite@plt>
   3dd48:	mov	r0, #0
   3dd4c:	bl	1404c <exit@plt>
   3dd50:	ldrb	r0, [r9, r1]
   3dd54:	ldr	r2, [sp, #8]
   3dd58:	b	3d908 <__assert_fail@plt+0x292b0>
   3dd5c:	mov	r1, r3
   3dd60:	ldrb	r0, [r9, #1]
   3dd64:	add	r3, r9, #1
   3dd68:	ldr	r2, [sp, #8]
   3dd6c:	b	3d908 <__assert_fail@plt+0x292b0>
   3dd70:	tst	r2, #8
   3dd74:	movne	r3, #0
   3dd78:	mvneq	r3, #2
   3dd7c:	strne	r3, [r4, #20]
   3dd80:	streq	r3, [r4, #16]
   3dd84:	b	3db9c <__assert_fail@plt+0x29544>
   3dd88:	ldr	r3, [r6, #4]
   3dd8c:	cmp	r3, #0
   3dd90:	beq	3dd70 <__assert_fail@plt+0x29718>
   3dd94:	ldrb	r1, [r3]
   3dd98:	cmp	r1, #45	; 0x2d
   3dd9c:	beq	3ddbc <__assert_fail@plt+0x29764>
   3dda0:	add	r0, r4, #20
   3dda4:	add	r1, r4, #24
   3dda8:	sub	r5, r5, #1
   3ddac:	add	r6, r6, #4
   3ddb0:	add	r7, r7, #1
   3ddb4:	bl	3d050 <__assert_fail@plt+0x289f8>
   3ddb8:	b	3db9c <__assert_fail@plt+0x29544>
   3ddbc:	tst	r2, #8
   3ddc0:	beq	3dda0 <__assert_fail@plt+0x29748>
   3ddc4:	ldr	r3, [sp, #12]
   3ddc8:	str	r3, [r4, #20]
   3ddcc:	b	3db9c <__assert_fail@plt+0x29544>
   3ddd0:	bl	14748 <__assert_fail@plt+0xf0>
   3ddd4:	mov	r0, sl
   3ddd8:	bl	1404c <exit@plt>
   3dddc:	cmn	r9, #1
   3dde0:	bne	3de00 <__assert_fail@plt+0x297a8>
   3dde4:	mvn	r3, #1
   3dde8:	str	r8, [r4, #24]
   3ddec:	str	r3, [r4, #16]
   3ddf0:	b	3db9c <__assert_fail@plt+0x29544>
   3ddf4:	ldr	r0, [sp, #8]
   3ddf8:	ldr	r1, [r4, #8]
   3ddfc:	bl	3d1e0 <__assert_fail@plt+0x28b88>
   3de00:	ldr	r1, [sp, #8]
   3de04:	ldr	r3, [r1, r9, lsl #4]
   3de08:	str	r3, [r4, #16]
   3de0c:	b	3db9c <__assert_fail@plt+0x29544>
   3de10:	mov	r0, #16
   3de14:	bl	3d0cc <__assert_fail@plt+0x28a74>
   3de18:	bl	13f50 <puts@plt>
   3de1c:	mov	r0, sl
   3de20:	bl	1404c <exit@plt>
   3de24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3de28:	movw	ip, #47296	; 0xb8c0
   3de2c:	sub	sp, sp, #252	; 0xfc
   3de30:	movt	ip, #5
   3de34:	subs	r5, r0, #0
   3de38:	mov	fp, r2
   3de3c:	str	r3, [sp, #8]
   3de40:	ldr	r3, [ip]
   3de44:	str	ip, [sp, #16]
   3de48:	ldr	sl, [sp, #288]	; 0x120
   3de4c:	str	r3, [sp, #244]	; 0xf4
   3de50:	ldr	r0, [sp, #8]
   3de54:	beq	3e374 <__assert_fail@plt+0x29d1c>
   3de58:	mov	r3, #0
   3de5c:	str	r3, [sp, #12]
   3de60:	bl	3cda8 <__assert_fail@plt+0x28750>
   3de64:	ldr	ip, [sp, #12]
   3de68:	mov	r7, ip
   3de6c:	mov	r4, ip
   3de70:	mov	r9, ip
   3de74:	str	ip, [sp, #24]
   3de78:	str	ip, [sp, #20]
   3de7c:	mov	r0, r5
   3de80:	bl	13c5c <_IO_getc@plt>
   3de84:	cmn	r0, #1
   3de88:	mov	r6, r0
   3de8c:	movne	r3, #0
   3de90:	moveq	r3, #1
   3de94:	cmn	r0, #1
   3de98:	cmpne	r0, #10
   3de9c:	bne	3dee4 <__assert_fail@plt+0x2988c>
   3dea0:	cmn	r0, #1
   3dea4:	ldrne	r2, [fp]
   3dea8:	addne	r2, r2, #1
   3deac:	strne	r2, [fp]
   3deb0:	cmn	r9, #1
   3deb4:	beq	3e214 <__assert_fail@plt+0x29bbc>
   3deb8:	cmp	r9, #2
   3debc:	beq	3df44 <__assert_fail@plt+0x298ec>
   3dec0:	cmp	r9, #3
   3dec4:	beq	3e248 <__assert_fail@plt+0x29bf0>
   3dec8:	cmp	r9, #4
   3decc:	beq	3e278 <__assert_fail@plt+0x29c20>
   3ded0:	cmp	r3, #0
   3ded4:	bne	3e2f8 <__assert_fail@plt+0x29ca0>
   3ded8:	mov	r4, r3
   3dedc:	mov	r9, r3
   3dee0:	b	3de7c <__assert_fail@plt+0x29824>
   3dee4:	cmn	r9, #1
   3dee8:	beq	3de7c <__assert_fail@plt+0x29824>
   3deec:	cmp	r9, #0
   3def0:	bne	3df08 <__assert_fail@plt+0x298b0>
   3def4:	bics	r0, r6, #127	; 0x7f
   3def8:	beq	3e010 <__assert_fail@plt+0x299b8>
   3defc:	cmp	r6, #35	; 0x23
   3df00:	beq	3e124 <__assert_fail@plt+0x29acc>
   3df04:	b	3df28 <__assert_fail@plt+0x298d0>
   3df08:	cmp	r9, #1
   3df0c:	beq	3de7c <__assert_fail@plt+0x29824>
   3df10:	cmp	r9, #2
   3df14:	beq	3e02c <__assert_fail@plt+0x299d4>
   3df18:	cmp	r9, #3
   3df1c:	beq	3e12c <__assert_fail@plt+0x29ad4>
   3df20:	cmp	r9, #4
   3df24:	beq	3e180 <__assert_fail@plt+0x29b28>
   3df28:	cmp	r4, #98	; 0x62
   3df2c:	bls	3e144 <__assert_fail@plt+0x29aec>
   3df30:	ldr	ip, [sp, #8]
   3df34:	mvn	r3, #3
   3df38:	mvn	r9, #0
   3df3c:	str	r3, [ip, #16]
   3df40:	b	3de7c <__assert_fail@plt+0x29824>
   3df44:	ldr	r8, [sl]
   3df48:	add	ip, sp, #248	; 0xf8
   3df4c:	mov	r7, #0
   3df50:	add	r4, ip, r4
   3df54:	cmp	r8, r7
   3df58:	strb	r7, [r4, #-204]	; 0xffffff34
   3df5c:	beq	3e34c <__assert_fail@plt+0x29cf4>
   3df60:	add	r6, sl, #16
   3df64:	mov	r9, sl
   3df68:	ldr	r0, [r9, #4]
   3df6c:	cmp	r0, #0
   3df70:	beq	3df84 <__assert_fail@plt+0x2992c>
   3df74:	add	r1, sp, #44	; 0x2c
   3df78:	bl	13a28 <strcmp@plt>
   3df7c:	cmp	r0, #0
   3df80:	beq	3df9c <__assert_fail@plt+0x29944>
   3df84:	mov	r9, r6
   3df88:	ldr	r8, [r6], #16
   3df8c:	add	r7, r7, #1
   3df90:	cmp	r8, #0
   3df94:	bne	3df68 <__assert_fail@plt+0x29910>
   3df98:	b	3e354 <__assert_fail@plt+0x29cfc>
   3df9c:	ldr	r6, [r9, #8]
   3dfa0:	ldr	ip, [sp, #8]
   3dfa4:	ands	r3, r6, #64	; 0x40
   3dfa8:	str	r8, [ip, #16]
   3dfac:	bne	3e004 <__assert_fail@plt+0x299ac>
   3dfb0:	cmp	r8, #0
   3dfb4:	bne	3e498 <__assert_fail@plt+0x29e40>
   3dfb8:	movw	r1, #37148	; 0x911c
   3dfbc:	add	r0, sp, #44	; 0x2c
   3dfc0:	movt	r1, #4
   3dfc4:	bl	13a28 <strcmp@plt>
   3dfc8:	cmp	r0, #0
   3dfcc:	beq	3e004 <__assert_fail@plt+0x299ac>
   3dfd0:	ldr	ip, [sp, #8]
   3dfd4:	ldr	r8, [ip, #52]	; 0x34
   3dfd8:	cmp	r8, #0
   3dfdc:	bne	3dff0 <__assert_fail@plt+0x29998>
   3dfe0:	b	3e1ac <__assert_fail@plt+0x29b54>
   3dfe4:	ldr	r8, [r8]
   3dfe8:	cmp	r8, #0
   3dfec:	beq	3e1ac <__assert_fail@plt+0x29b54>
   3dff0:	add	r0, r8, #4
   3dff4:	add	r1, sp, #44	; 0x2c
   3dff8:	bl	13a28 <strcmp@plt>
   3dffc:	cmp	r0, #0
   3e000:	bne	3dfe4 <__assert_fail@plt+0x2998c>
   3e004:	mov	r4, r0
   3e008:	mov	r9, r0
   3e00c:	b	3de7c <__assert_fail@plt+0x29824>
   3e010:	bl	14034 <__ctype_b_loc@plt>
   3e014:	lsl	r3, r6, #1
   3e018:	ldr	r2, [r0]
   3e01c:	ldrh	r3, [r2, r3]
   3e020:	tst	r3, #8192	; 0x2000
   3e024:	bne	3de7c <__assert_fail@plt+0x29824>
   3e028:	b	3defc <__assert_fail@plt+0x298a4>
   3e02c:	bics	r8, r6, #127	; 0x7f
   3e030:	bne	3df28 <__assert_fail@plt+0x298d0>
   3e034:	bl	14034 <__ctype_b_loc@plt>
   3e038:	lsl	r3, r6, #1
   3e03c:	ldr	r2, [r0]
   3e040:	mov	r9, r0
   3e044:	ldrh	r3, [r2, r3]
   3e048:	tst	r3, #8192	; 0x2000
   3e04c:	beq	3df28 <__assert_fail@plt+0x298d0>
   3e050:	ldr	r7, [sl]
   3e054:	add	r1, sp, #248	; 0xf8
   3e058:	add	r4, r1, r4
   3e05c:	cmp	r7, #0
   3e060:	strb	r8, [r4, #-204]	; 0xffffff34
   3e064:	beq	3e658 <__assert_fail@plt+0x2a000>
   3e068:	add	r6, sl, #16
   3e06c:	mov	r4, r8
   3e070:	mov	r8, sl
   3e074:	ldr	r0, [r8, #4]
   3e078:	cmp	r0, #0
   3e07c:	beq	3e090 <__assert_fail@plt+0x29a38>
   3e080:	add	r1, sp, #44	; 0x2c
   3e084:	bl	13a28 <strcmp@plt>
   3e088:	cmp	r0, #0
   3e08c:	beq	3e220 <__assert_fail@plt+0x29bc8>
   3e090:	mov	r8, r6
   3e094:	ldr	r7, [r6], #16
   3e098:	add	r4, r4, #1
   3e09c:	cmp	r7, #0
   3e0a0:	bne	3e074 <__assert_fail@plt+0x29a1c>
   3e0a4:	ldr	r8, [r8, #8]
   3e0a8:	mov	r3, #0
   3e0ac:	ldr	ip, [sp, #8]
   3e0b0:	tst	r8, #64	; 0x40
   3e0b4:	str	r3, [ip, #16]
   3e0b8:	bne	3e120 <__assert_fail@plt+0x29ac8>
   3e0bc:	movw	r1, #37172	; 0x9134
   3e0c0:	add	r0, sp, #44	; 0x2c
   3e0c4:	movt	r1, #4
   3e0c8:	bl	13a28 <strcmp@plt>
   3e0cc:	cmp	r0, #0
   3e0d0:	beq	3e4ac <__assert_fail@plt+0x29e54>
   3e0d4:	movw	r1, #37148	; 0x911c
   3e0d8:	add	r0, sp, #44	; 0x2c
   3e0dc:	movt	r1, #4
   3e0e0:	bl	13a28 <strcmp@plt>
   3e0e4:	cmp	r0, #0
   3e0e8:	beq	3e4d4 <__assert_fail@plt+0x29e7c>
   3e0ec:	ldr	ip, [sp, #8]
   3e0f0:	ldr	r6, [ip, #52]	; 0x34
   3e0f4:	cmp	r6, #0
   3e0f8:	bne	3e10c <__assert_fail@plt+0x29ab4>
   3e0fc:	b	3e698 <__assert_fail@plt+0x2a040>
   3e100:	ldr	r6, [r6]
   3e104:	cmp	r6, #0
   3e108:	beq	3e698 <__assert_fail@plt+0x2a040>
   3e10c:	add	r0, r6, #4
   3e110:	add	r1, sp, #44	; 0x2c
   3e114:	bl	13a28 <strcmp@plt>
   3e118:	cmp	r0, #0
   3e11c:	bne	3e100 <__assert_fail@plt+0x29aa8>
   3e120:	mov	r7, r4
   3e124:	mov	r9, #1
   3e128:	b	3de7c <__assert_fail@plt+0x29824>
   3e12c:	bics	r0, r6, #127	; 0x7f
   3e130:	beq	3e15c <__assert_fail@plt+0x29b04>
   3e134:	strb	r6, [sp, #44]	; 0x2c
   3e138:	mov	r4, #1
   3e13c:	mov	r9, #4
   3e140:	b	3de7c <__assert_fail@plt+0x29824>
   3e144:	mov	r9, #2
   3e148:	add	r0, sp, #248	; 0xf8
   3e14c:	add	r3, r0, r4
   3e150:	add	r4, r4, #1
   3e154:	strb	r6, [r3, #-204]	; 0xffffff34
   3e158:	b	3de7c <__assert_fail@plt+0x29824>
   3e15c:	bl	14034 <__ctype_b_loc@plt>
   3e160:	lsl	r3, r6, #1
   3e164:	ldr	r2, [r0]
   3e168:	ldrh	r3, [r2, r3]
   3e16c:	tst	r3, #8192	; 0x2000
   3e170:	strbeq	r6, [sp, #44]	; 0x2c
   3e174:	moveq	r4, #1
   3e178:	moveq	r9, #4
   3e17c:	b	3de7c <__assert_fail@plt+0x29824>
   3e180:	ldr	ip, [sp, #20]
   3e184:	cmp	ip, #0
   3e188:	beq	3e444 <__assert_fail@plt+0x29dec>
   3e18c:	ldr	r2, [sp, #24]
   3e190:	mov	r8, r4
   3e194:	sub	r3, r2, #1
   3e198:	cmp	r4, r3
   3e19c:	bcs	3e384 <__assert_fail@plt+0x29d2c>
   3e1a0:	add	r4, r4, #1
   3e1a4:	strb	r6, [ip, r8]
   3e1a8:	b	3de7c <__assert_fail@plt+0x29824>
   3e1ac:	tst	r6, #128	; 0x80
   3e1b0:	mvneq	r8, #1
   3e1b4:	mvnne	r8, #6
   3e1b8:	ldr	ip, [sp, #8]
   3e1bc:	str	r8, [ip, #16]
   3e1c0:	ldr	ip, [sp, #16]
   3e1c4:	mov	r0, r8
   3e1c8:	ldr	r2, [sp, #244]	; 0xf4
   3e1cc:	ldr	r3, [ip]
   3e1d0:	cmp	r2, r3
   3e1d4:	bne	3e704 <__assert_fail@plt+0x2a0ac>
   3e1d8:	add	sp, sp, #252	; 0xfc
   3e1dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3e1e0:	str	r1, [sp, #20]
   3e1e4:	ldr	ip, [sp, #20]
   3e1e8:	mov	r3, #0
   3e1ec:	add	r4, ip, #1
   3e1f0:	strb	r3, [ip]
   3e1f4:	mov	r0, r4
   3e1f8:	bl	3b354 <__assert_fail@plt+0x26cfc>
   3e1fc:	cmp	r4, #0
   3e200:	beq	3e2dc <__assert_fail@plt+0x29c84>
   3e204:	ldr	ip, [sp, #20]
   3e208:	ldrb	r3, [ip, #1]
   3e20c:	cmp	r3, #0
   3e210:	beq	3e2dc <__assert_fail@plt+0x29c84>
   3e214:	ldr	ip, [sp, #8]
   3e218:	ldr	r8, [ip, #16]
   3e21c:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e220:	ldr	r8, [r8, #8]
   3e224:	ldr	ip, [sp, #8]
   3e228:	tst	r8, #64	; 0x40
   3e22c:	str	r7, [ip, #16]
   3e230:	bne	3e120 <__assert_fail@plt+0x29ac8>
   3e234:	cmp	r7, #0
   3e238:	beq	3e0bc <__assert_fail@plt+0x29a64>
   3e23c:	mov	r7, r4
   3e240:	mov	r9, #3
   3e244:	b	3de7c <__assert_fail@plt+0x29824>
   3e248:	ldr	r3, [sp, #12]
   3e24c:	cmp	r3, #0
   3e250:	bne	3e3bc <__assert_fail@plt+0x29d64>
   3e254:	add	r7, sl, r7, lsl #4
   3e258:	ldr	r3, [r7, #8]
   3e25c:	tst	r3, #7
   3e260:	bne	3e3b4 <__assert_fail@plt+0x29d5c>
   3e264:	ldr	ip, [sp, #8]
   3e268:	mov	r3, #0
   3e26c:	ldr	r8, [ip, #16]
   3e270:	str	r3, [ip, #20]
   3e274:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e278:	ldr	r3, [sp, #12]
   3e27c:	ldr	r5, [sp, #20]
   3e280:	cmp	r3, #0
   3e284:	beq	3e3cc <__assert_fail@plt+0x29d74>
   3e288:	cmp	r5, #0
   3e28c:	beq	3e488 <__assert_fail@plt+0x29e30>
   3e290:	mov	r3, #0
   3e294:	strb	r3, [r5, r4]
   3e298:	ldrb	r3, [r5]
   3e29c:	cmp	r3, #0
   3e2a0:	beq	3e2dc <__assert_fail@plt+0x29c84>
   3e2a4:	cmp	r3, #32
   3e2a8:	beq	3e1e4 <__assert_fail@plt+0x29b8c>
   3e2ac:	cmp	r3, #9
   3e2b0:	beq	3e1e4 <__assert_fail@plt+0x29b8c>
   3e2b4:	add	r2, r5, #1
   3e2b8:	b	3e2cc <__assert_fail@plt+0x29c74>
   3e2bc:	cmp	r3, #32
   3e2c0:	beq	3e1e0 <__assert_fail@plt+0x29b88>
   3e2c4:	cmp	r3, #9
   3e2c8:	beq	3e1e0 <__assert_fail@plt+0x29b88>
   3e2cc:	mov	r1, r2
   3e2d0:	ldrb	r3, [r2], #1
   3e2d4:	cmp	r3, #0
   3e2d8:	bne	3e2bc <__assert_fail@plt+0x29c64>
   3e2dc:	mov	r0, r5
   3e2e0:	bl	13c44 <gcry_free@plt>
   3e2e4:	ldr	ip, [sp, #8]
   3e2e8:	mvn	r3, #9
   3e2ec:	mov	r8, r3
   3e2f0:	str	r3, [ip, #16]
   3e2f4:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e2f8:	ldr	ip, [sp, #8]
   3e2fc:	ldr	r0, [ip, #52]	; 0x34
   3e300:	cmp	r0, #0
   3e304:	bne	3e310 <__assert_fail@plt+0x29cb8>
   3e308:	b	3e320 <__assert_fail@plt+0x29cc8>
   3e30c:	mov	r0, r4
   3e310:	ldr	r4, [r0]
   3e314:	bl	13c44 <gcry_free@plt>
   3e318:	cmp	r4, #0
   3e31c:	bne	3e30c <__assert_fail@plt+0x29cb4>
   3e320:	ldr	ip, [sp, #8]
   3e324:	mov	r3, #0
   3e328:	mov	r0, r5
   3e32c:	str	r3, [ip, #52]	; 0x34
   3e330:	bl	13b84 <ferror@plt>
   3e334:	subs	r8, r0, #0
   3e338:	beq	3e1b8 <__assert_fail@plt+0x29b60>
   3e33c:	ldr	ip, [sp, #8]
   3e340:	mvn	r8, #4
   3e344:	str	r8, [ip, #16]
   3e348:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e34c:	mov	r7, r8
   3e350:	mov	r9, sl
   3e354:	ldr	r6, [r9, #8]
   3e358:	mov	r4, #0
   3e35c:	ldr	ip, [sp, #8]
   3e360:	tst	r6, #64	; 0x40
   3e364:	str	r4, [ip, #16]
   3e368:	beq	3dfb8 <__assert_fail@plt+0x29960>
   3e36c:	mov	r9, r4
   3e370:	b	3de7c <__assert_fail@plt+0x29824>
   3e374:	mov	r1, sl
   3e378:	bl	3d6a4 <__assert_fail@plt+0x2904c>
   3e37c:	mov	r8, r0
   3e380:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e384:	ldr	r3, [sp, #24]
   3e388:	ldr	r0, [sp, #20]
   3e38c:	add	r3, r3, #50	; 0x32
   3e390:	str	r3, [sp, #24]
   3e394:	mov	r1, r3
   3e398:	bl	142d4 <gcry_realloc@plt>
   3e39c:	cmp	r0, #0
   3e3a0:	beq	3e6e8 <__assert_fail@plt+0x2a090>
   3e3a4:	add	r4, r4, #1
   3e3a8:	strb	r6, [r0, r8]
   3e3ac:	str	r0, [sp, #20]
   3e3b0:	b	3de7c <__assert_fail@plt+0x29824>
   3e3b4:	tst	r3, #8
   3e3b8:	bne	3e264 <__assert_fail@plt+0x29c0c>
   3e3bc:	ldr	ip, [sp, #8]
   3e3c0:	mvn	r8, #2
   3e3c4:	str	r8, [ip, #16]
   3e3c8:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e3cc:	add	r7, sl, r7, lsl #4
   3e3d0:	ldr	r3, [r7, #8]
   3e3d4:	tst	r3, #7
   3e3d8:	beq	3e488 <__assert_fail@plt+0x29e30>
   3e3dc:	ldr	ip, [sp, #20]
   3e3e0:	cmp	ip, #0
   3e3e4:	beq	3e6b8 <__assert_fail@plt+0x2a060>
   3e3e8:	ldr	r3, [sp, #12]
   3e3ec:	ldr	ip, [sp, #20]
   3e3f0:	strb	r3, [ip, r4]
   3e3f4:	ldr	r0, [sp, #20]
   3e3f8:	bl	3b354 <__assert_fail@plt+0x26cfc>
   3e3fc:	ldr	ip, [sp, #20]
   3e400:	ldrb	r3, [ip]
   3e404:	cmp	r3, #34	; 0x22
   3e408:	movne	r4, ip
   3e40c:	beq	3e664 <__assert_fail@plt+0x2a00c>
   3e410:	ldr	ip, [sp, #8]
   3e414:	mov	r3, r4
   3e418:	ldr	r2, [r7, #8]
   3e41c:	add	r0, ip, #20
   3e420:	add	r1, ip, #24
   3e424:	bl	3d050 <__assert_fail@plt+0x289f8>
   3e428:	cmp	r0, #0
   3e42c:	bne	3e214 <__assert_fail@plt+0x29bbc>
   3e430:	ldr	r0, [sp, #20]
   3e434:	bl	13c44 <gcry_free@plt>
   3e438:	ldr	ip, [sp, #8]
   3e43c:	ldr	r8, [ip, #16]
   3e440:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e444:	cmp	r4, #98	; 0x62
   3e448:	mov	r8, r4
   3e44c:	bls	3e148 <__assert_fail@plt+0x29af0>
   3e450:	mov	r0, #150	; 0x96
   3e454:	bl	139c8 <gcry_malloc@plt>
   3e458:	cmp	r0, #0
   3e45c:	str	r0, [sp, #20]
   3e460:	beq	3e6d8 <__assert_fail@plt+0x2a080>
   3e464:	mov	r2, r4
   3e468:	add	r1, sp, #44	; 0x2c
   3e46c:	bl	13ba8 <memcpy@plt>
   3e470:	ldr	ip, [sp, #20]
   3e474:	mov	r2, #150	; 0x96
   3e478:	add	r4, r4, #1
   3e47c:	str	r2, [sp, #24]
   3e480:	strb	r6, [ip, r8]
   3e484:	b	3de7c <__assert_fail@plt+0x29824>
   3e488:	ldr	ip, [sp, #8]
   3e48c:	mvn	r8, #5
   3e490:	str	r8, [ip, #16]
   3e494:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e498:	ands	r2, r6, #7
   3e49c:	bne	3e4c0 <__assert_fail@plt+0x29e68>
   3e4a0:	ldr	ip, [sp, #8]
   3e4a4:	str	r2, [ip, #20]
   3e4a8:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e4ac:	mov	r3, #1
   3e4b0:	mov	r7, r4
   3e4b4:	str	r3, [sp, #12]
   3e4b8:	mov	r9, #3
   3e4bc:	b	3de7c <__assert_fail@plt+0x29824>
   3e4c0:	tst	r6, #8
   3e4c4:	beq	3e3bc <__assert_fail@plt+0x29d64>
   3e4c8:	ldr	ip, [sp, #8]
   3e4cc:	str	r3, [ip, #20]
   3e4d0:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e4d4:	str	sl, [sp, #36]	; 0x24
   3e4d8:	mov	r8, r0
   3e4dc:	mov	sl, r0
   3e4e0:	str	r4, [sp, #28]
   3e4e4:	str	fp, [sp, #32]
   3e4e8:	mov	r0, r5
   3e4ec:	bl	13c5c <_IO_getc@plt>
   3e4f0:	cmp	r0, #10
   3e4f4:	mov	r4, r0
   3e4f8:	moveq	fp, #1
   3e4fc:	beq	3e510 <__assert_fail@plt+0x29eb8>
   3e500:	cmn	r0, #1
   3e504:	movne	fp, #0
   3e508:	moveq	fp, #1
   3e50c:	moveq	r4, #10
   3e510:	lsl	r6, r4, #1
   3e514:	bic	r7, r4, #127	; 0x7f
   3e518:	cmp	sl, #3
   3e51c:	ldrls	pc, [pc, sl, lsl #2]
   3e520:	b	3e5ec <__assert_fail@plt+0x29f94>
   3e524:			; <UNDEFINED> instruction: 0x0003e5b0
   3e528:	muleq	r3, r8, r5
   3e52c:	andeq	lr, r3, r0, lsl #11
   3e530:	andeq	lr, r3, r4, lsr r5
   3e534:	ldr	ip, [sp, #8]
   3e538:	add	r0, sp, #248	; 0xf8
   3e53c:	add	r3, r0, r8
   3e540:	mov	r1, #0
   3e544:	ldr	sl, [ip, #52]	; 0x34
   3e548:	strb	r1, [r3, #-104]	; 0xffffff98
   3e54c:	cmp	sl, #0
   3e550:	bne	3e564 <__assert_fail@plt+0x29f0c>
   3e554:	b	3e61c <__assert_fail@plt+0x29fc4>
   3e558:	ldr	sl, [sl]
   3e55c:	cmp	sl, #0
   3e560:	beq	3e61c <__assert_fail@plt+0x29fc4>
   3e564:	add	r0, sl, #4
   3e568:	add	r1, sp, #144	; 0x90
   3e56c:	bl	13a28 <strcmp@plt>
   3e570:	cmp	r0, #0
   3e574:	bne	3e558 <__assert_fail@plt+0x29f00>
   3e578:	mov	sl, r0
   3e57c:	b	3e518 <__assert_fail@plt+0x29ec0>
   3e580:	ldr	r3, [r9]
   3e584:	ldrh	r3, [r3, r6]
   3e588:	tst	r3, #8192	; 0x2000
   3e58c:	beq	3e5ec <__assert_fail@plt+0x29f94>
   3e590:	mov	sl, #0
   3e594:	b	3e518 <__assert_fail@plt+0x29ec0>
   3e598:	ldr	r3, [r9]
   3e59c:	ldrh	r3, [r3, r6]
   3e5a0:	tst	r3, #8192	; 0x2000
   3e5a4:	beq	3e5d4 <__assert_fail@plt+0x29f7c>
   3e5a8:	mov	sl, #3
   3e5ac:	b	3e518 <__assert_fail@plt+0x29ec0>
   3e5b0:	cmp	r7, #0
   3e5b4:	bne	3e5c8 <__assert_fail@plt+0x29f70>
   3e5b8:	ldr	r3, [r9]
   3e5bc:	ldrh	r3, [r3, r6]
   3e5c0:	tst	r3, #8192	; 0x2000
   3e5c4:	bne	3e5ec <__assert_fail@plt+0x29f94>
   3e5c8:	mov	sl, #1
   3e5cc:	mov	r8, #0
   3e5d0:	b	3e518 <__assert_fail@plt+0x29ec0>
   3e5d4:	cmp	r8, #98	; 0x62
   3e5d8:	movhi	sl, #2
   3e5dc:	addls	r0, sp, #248	; 0xf8
   3e5e0:	addls	r2, r0, r8
   3e5e4:	addls	r8, r8, #1
   3e5e8:	strbls	r4, [r2, #-104]	; 0xffffff98
   3e5ec:	cmp	fp, #0
   3e5f0:	beq	3e4e8 <__assert_fail@plt+0x29e90>
   3e5f4:	ldr	fp, [sp, #32]
   3e5f8:	ldr	r4, [sp, #28]
   3e5fc:	ldr	sl, [sp, #36]	; 0x24
   3e600:	ldr	r3, [fp]
   3e604:	mov	r7, r4
   3e608:	mov	r4, #0
   3e60c:	add	r3, r3, #1
   3e610:	mov	r9, r4
   3e614:	str	r3, [fp]
   3e618:	b	3de7c <__assert_fail@plt+0x29824>
   3e61c:	add	r0, r8, #8
   3e620:	bl	139c8 <gcry_malloc@plt>
   3e624:	subs	r3, r0, #0
   3e628:	beq	3e6d8 <__assert_fail@plt+0x2a080>
   3e62c:	add	r0, r3, #4
   3e630:	add	r1, sp, #144	; 0x90
   3e634:	str	r3, [sp, #4]
   3e638:	bl	13e78 <strcpy@plt>
   3e63c:	ldr	ip, [sp, #8]
   3e640:	mov	sl, #0
   3e644:	ldr	r3, [sp, #4]
   3e648:	ldr	r2, [ip, #52]	; 0x34
   3e64c:	str	r2, [r3]
   3e650:	str	r3, [ip, #52]	; 0x34
   3e654:	b	3e518 <__assert_fail@plt+0x29ec0>
   3e658:	mov	r4, r7
   3e65c:	mov	r8, sl
   3e660:	b	3e0a4 <__assert_fail@plt+0x29a4c>
   3e664:	ldr	ip, [sp, #20]
   3e668:	add	r4, ip, #1
   3e66c:	ldrb	r3, [ip, #1]
   3e670:	cmp	r3, #0
   3e674:	beq	3e410 <__assert_fail@plt+0x29db8>
   3e678:	mov	r0, r4
   3e67c:	bl	14094 <strlen@plt>
   3e680:	sub	r0, r0, #1
   3e684:	ldrb	r3, [r4, r0]
   3e688:	cmp	r3, #34	; 0x22
   3e68c:	moveq	r3, #0
   3e690:	strbeq	r3, [r4, r0]
   3e694:	b	3e410 <__assert_fail@plt+0x29db8>
   3e698:	ldr	ip, [sp, #8]
   3e69c:	tst	r8, #128	; 0x80
   3e6a0:	mov	r7, r4
   3e6a4:	mvn	r9, #0
   3e6a8:	mvnne	r3, #6
   3e6ac:	mvneq	r3, #1
   3e6b0:	str	r3, [ip, #16]
   3e6b4:	b	3de7c <__assert_fail@plt+0x29824>
   3e6b8:	add	r0, sp, #248	; 0xf8
   3e6bc:	add	r4, r0, r4
   3e6c0:	add	r0, sp, #44	; 0x2c
   3e6c4:	strb	ip, [r4, #-204]	; 0xffffff34
   3e6c8:	bl	13f2c <gcry_strdup@plt>
   3e6cc:	cmp	r0, #0
   3e6d0:	str	r0, [sp, #20]
   3e6d4:	bne	3e3f4 <__assert_fail@plt+0x29d9c>
   3e6d8:	ldr	ip, [sp, #8]
   3e6dc:	mvn	r8, #10
   3e6e0:	str	r8, [ip, #16]
   3e6e4:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e6e8:	ldr	r0, [sp, #20]
   3e6ec:	bl	13c44 <gcry_free@plt>
   3e6f0:	ldr	ip, [sp, #8]
   3e6f4:	mvn	r3, #10
   3e6f8:	mov	r8, r3
   3e6fc:	str	r3, [ip, #16]
   3e700:	b	3e1c0 <__assert_fail@plt+0x29b68>
   3e704:	bl	13cec <__stack_chk_fail@plt>
   3e708:	cmp	r0, #0
   3e70c:	push	{r4, r5, r6, r7, lr}
   3e710:	sub	sp, sp, #12
   3e714:	beq	3e730 <__assert_fail@plt+0x2a0d8>
   3e718:	cmp	r0, #1
   3e71c:	beq	3e7a0 <__assert_fail@plt+0x2a148>
   3e720:	cmp	r0, #2
   3e724:	beq	3e78c <__assert_fail@plt+0x2a134>
   3e728:	add	sp, sp, #12
   3e72c:	pop	{r4, r5, r6, r7, pc}
   3e730:	movw	r4, #47304	; 0xb8c8
   3e734:	movt	r4, #5
   3e738:	mov	r0, #11
   3e73c:	ldr	r5, [r4]
   3e740:	bl	3d0cc <__assert_fail@plt+0x28a74>
   3e744:	mov	r6, r0
   3e748:	mov	r0, #13
   3e74c:	bl	3d0cc <__assert_fail@plt+0x28a74>
   3e750:	mov	r7, r0
   3e754:	mov	r0, #14
   3e758:	bl	3d0cc <__assert_fail@plt+0x28a74>
   3e75c:	str	r7, [sp]
   3e760:	mov	r3, r6
   3e764:	mov	r1, #1
   3e768:	movw	r2, #37180	; 0x913c
   3e76c:	movt	r2, #4
   3e770:	str	r0, [sp, #4]
   3e774:	mov	r0, r5
   3e778:	bl	14274 <__fprintf_chk@plt>
   3e77c:	ldr	r0, [r4]
   3e780:	add	sp, sp, #12
   3e784:	pop	{r4, r5, r6, r7, lr}
   3e788:	b	13ae8 <fflush@plt>
   3e78c:	mov	r0, #41	; 0x29
   3e790:	bl	3d0cc <__assert_fail@plt+0x28a74>
   3e794:	bl	13f50 <puts@plt>
   3e798:	mov	r0, #0
   3e79c:	bl	1404c <exit@plt>
   3e7a0:	mov	r0, #40	; 0x28
   3e7a4:	movw	r4, #47304	; 0xb8c8
   3e7a8:	bl	3d0cc <__assert_fail@plt+0x28a74>
   3e7ac:	movt	r4, #5
   3e7b0:	ldr	r1, [r4]
   3e7b4:	mov	r5, r0
   3e7b8:	bl	145b0 <fputs@plt>
   3e7bc:	ldrb	r3, [r5]
   3e7c0:	cmp	r3, #0
   3e7c4:	beq	3e7e8 <__assert_fail@plt+0x2a190>
   3e7c8:	mov	r0, r5
   3e7cc:	bl	14094 <strlen@plt>
   3e7d0:	ldrb	r3, [r5, r0]
   3e7d4:	cmp	r3, #10
   3e7d8:	beq	3e7e8 <__assert_fail@plt+0x2a190>
   3e7dc:	ldr	r1, [r4]
   3e7e0:	mov	r0, #10
   3e7e4:	bl	13e0c <_IO_putc@plt>
   3e7e8:	mov	r0, #2
   3e7ec:	bl	1404c <exit@plt>
   3e7f0:	movw	r3, #47996	; 0xbb7c
   3e7f4:	movt	r3, #5
   3e7f8:	str	r0, [r3]
   3e7fc:	bx	lr
   3e800:	push	{r4, lr}
   3e804:	mov	r4, r0
   3e808:	ldr	r0, [r0]
   3e80c:	cmp	r0, #2
   3e810:	cmnne	r0, #1
   3e814:	beq	3e81c <__assert_fail@plt+0x2a1c4>
   3e818:	bl	145ec <close@plt>
   3e81c:	mov	r0, r4
   3e820:	bl	13c44 <gcry_free@plt>
   3e824:	movw	r3, #47292	; 0xb8bc
   3e828:	movt	r3, #5
   3e82c:	mvn	r2, #0
   3e830:	mov	r0, #0
   3e834:	str	r2, [r3]
   3e838:	pop	{r4, pc}
   3e83c:	push	{r4, r5, r6, r7, r8, r9, lr}
   3e840:	movw	r7, #48000	; 0xbb80
   3e844:	movt	r7, #5
   3e848:	mov	r5, r0
   3e84c:	sub	sp, sp, #28
   3e850:	mov	r6, r1
   3e854:	ldr	r0, [r7]
   3e858:	cmp	r0, #0
   3e85c:	beq	3e894 <__assert_fail@plt+0x2a23c>
   3e860:	movw	r2, #47304	; 0xb8c8
   3e864:	movt	r2, #5
   3e868:	ldr	r3, [r2]
   3e86c:	cmp	r0, r3
   3e870:	beq	3e88c <__assert_fail@plt+0x2a234>
   3e874:	movw	r2, #47316	; 0xb8d4
   3e878:	movt	r2, #5
   3e87c:	ldr	r3, [r2]
   3e880:	cmp	r0, r3
   3e884:	beq	3e88c <__assert_fail@plt+0x2a234>
   3e888:	bl	142c8 <fclose@plt>
   3e88c:	mov	r3, #0
   3e890:	str	r3, [r7]
   3e894:	cmp	r5, #0
   3e898:	beq	3e8c8 <__assert_fail@plt+0x2a270>
   3e89c:	ldrb	r3, [r5]
   3e8a0:	cmp	r3, #45	; 0x2d
   3e8a4:	bne	3e974 <__assert_fail@plt+0x2a31c>
   3e8a8:	ldrb	r3, [r5, #1]
   3e8ac:	cmp	r3, #0
   3e8b0:	bne	3e974 <__assert_fail@plt+0x2a31c>
   3e8b4:	movw	r3, #47304	; 0xb8c8
   3e8b8:	movt	r3, #5
   3e8bc:	ldr	r0, [r3]
   3e8c0:	bl	14244 <fileno@plt>
   3e8c4:	mov	r6, r0
   3e8c8:	mov	r8, #0
   3e8cc:	mov	r0, #20
   3e8d0:	movw	r4, #47292	; 0xb8bc
   3e8d4:	bl	1398c <gcry_xmalloc@plt>
   3e8d8:	movw	r3, #59392	; 0xe800
   3e8dc:	movt	r3, #3
   3e8e0:	str	r3, [sp, #20]
   3e8e4:	add	r3, sp, #24
   3e8e8:	mov	lr, #0
   3e8ec:	str	lr, [sp, #16]
   3e8f0:	movt	r4, #5
   3e8f4:	add	r2, sp, #8
   3e8f8:	str	lr, [sp, #8]
   3e8fc:	mov	ip, r0
   3e900:	ldmdb	r3, {r0, r1}
   3e904:	movw	r3, #61148	; 0xeedc
   3e908:	movt	r3, #3
   3e90c:	str	r3, [sp, #12]
   3e910:	stm	sp, {r0, r1}
   3e914:	mov	r0, ip
   3e918:	str	r6, [r4]
   3e91c:	movw	r1, #20152	; 0x4eb8
   3e920:	ldm	r2, {r2, r3}
   3e924:	movt	r1, #4
   3e928:	str	r8, [ip, #8]
   3e92c:	str	r6, [ip]
   3e930:	strb	lr, [ip, #16]
   3e934:	str	lr, [ip, #4]
   3e938:	str	lr, [ip, #12]
   3e93c:	bl	1425c <fopencookie@plt>
   3e940:	subs	r4, r0, #0
   3e944:	beq	3eaec <__assert_fail@plt+0x2a494>
   3e948:	mov	r1, #0
   3e94c:	mov	r0, r4
   3e950:	mov	r3, r1
   3e954:	mov	r2, #1
   3e958:	bl	141b4 <setvbuf@plt>
   3e95c:	mov	r3, #0
   3e960:	str	r4, [r7]
   3e964:	str	r8, [r7, #4]
   3e968:	str	r3, [r7, #8]
   3e96c:	add	sp, sp, #28
   3e970:	pop	{r4, r5, r6, r7, r8, r9, pc}
   3e974:	movw	r1, #37280	; 0x91a0
   3e978:	mov	r0, r5
   3e97c:	movt	r1, #4
   3e980:	mov	r2, #9
   3e984:	bl	145bc <strncmp@plt>
   3e988:	subs	r4, r0, #0
   3e98c:	bne	3ea80 <__assert_fail@plt+0x2a428>
   3e990:	ldrb	r3, [r5, #9]
   3e994:	cmp	r3, #0
   3e998:	beq	3ea80 <__assert_fail@plt+0x2a428>
   3e99c:	adds	r5, r5, #9
   3e9a0:	beq	3eb24 <__assert_fail@plt+0x2a4cc>
   3e9a4:	mov	r0, r5
   3e9a8:	bl	14094 <strlen@plt>
   3e9ac:	add	r0, r0, #20
   3e9b0:	bl	1398c <gcry_xmalloc@plt>
   3e9b4:	mov	r1, r5
   3e9b8:	mov	r6, r0
   3e9bc:	add	r0, r0, #16
   3e9c0:	bl	13e78 <strcpy@plt>
   3e9c4:	mov	r2, #1
   3e9c8:	mvn	r3, #0
   3e9cc:	str	r4, [r6, #4]
   3e9d0:	str	r4, [r6, #12]
   3e9d4:	mov	r8, r2
   3e9d8:	mov	r4, r3
   3e9dc:	str	r2, [r6, #8]
   3e9e0:	str	r3, [r6]
   3e9e4:	add	r9, sp, #8
   3e9e8:	movw	r3, #47292	; 0xb8bc
   3e9ec:	movt	r3, #5
   3e9f0:	mov	r1, #0
   3e9f4:	mov	r2, #16
   3e9f8:	mov	r0, r9
   3e9fc:	str	r4, [r3]
   3ea00:	bl	141cc <memset@plt>
   3ea04:	add	r2, sp, #24
   3ea08:	movw	r3, #59392	; 0xe800
   3ea0c:	movt	r3, #3
   3ea10:	str	r3, [sp, #20]
   3ea14:	ldmdb	r2, {r0, r1}
   3ea18:	movw	r3, #61148	; 0xeedc
   3ea1c:	movt	r3, #3
   3ea20:	str	r3, [sp, #12]
   3ea24:	ldm	r9, {r2, r3}
   3ea28:	stm	sp, {r0, r1}
   3ea2c:	mov	r0, r6
   3ea30:	movw	r1, #20152	; 0x4eb8
   3ea34:	movt	r1, #4
   3ea38:	bl	1425c <fopencookie@plt>
   3ea3c:	subs	r4, r0, #0
   3ea40:	bne	3e948 <__assert_fail@plt+0x2a2f0>
   3ea44:	bl	14148 <__errno_location@plt>
   3ea48:	movw	r4, #47304	; 0xb8c8
   3ea4c:	movt	r4, #5
   3ea50:	ldr	r6, [r4]
   3ea54:	ldr	r0, [r0]
   3ea58:	bl	13fa4 <strerror@plt>
   3ea5c:	movw	r2, #37200	; 0x9150
   3ea60:	mov	r3, r5
   3ea64:	mov	r1, #1
   3ea68:	movt	r2, #4
   3ea6c:	str	r0, [sp]
   3ea70:	mov	r0, r6
   3ea74:	bl	14274 <__fprintf_chk@plt>
   3ea78:	ldr	r4, [r4]
   3ea7c:	b	3e95c <__assert_fail@plt+0x2a304>
   3ea80:	mov	r0, r5
   3ea84:	bl	14094 <strlen@plt>
   3ea88:	add	r0, r0, #20
   3ea8c:	bl	1398c <gcry_xmalloc@plt>
   3ea90:	mov	r1, r5
   3ea94:	mov	r6, r0
   3ea98:	add	r0, r0, #16
   3ea9c:	bl	13e78 <strcpy@plt>
   3eaa0:	mov	r3, #0
   3eaa4:	str	r3, [r6, #4]
   3eaa8:	str	r3, [r6, #12]
   3eaac:	str	r3, [r6, #8]
   3eab0:	b	3eac4 <__assert_fail@plt+0x2a46c>
   3eab4:	bl	14148 <__errno_location@plt>
   3eab8:	ldr	r3, [r0]
   3eabc:	cmp	r3, #4
   3eac0:	bne	3eae4 <__assert_fail@plt+0x2a48c>
   3eac4:	mov	r0, r5
   3eac8:	movw	r1, #1089	; 0x441
   3eacc:	movw	r2, #438	; 0x1b6
   3ead0:	bl	13efc <open64@plt>
   3ead4:	cmn	r0, #1
   3ead8:	mov	r4, r0
   3eadc:	str	r0, [r6]
   3eae0:	beq	3eab4 <__assert_fail@plt+0x2a45c>
   3eae4:	mov	r8, #0
   3eae8:	b	3e9e4 <__assert_fail@plt+0x2a38c>
   3eaec:	bl	14148 <__errno_location@plt>
   3eaf0:	movw	r4, #47304	; 0xb8c8
   3eaf4:	movt	r4, #5
   3eaf8:	ldr	r5, [r4]
   3eafc:	ldr	r0, [r0]
   3eb00:	bl	13fa4 <strerror@plt>
   3eb04:	mov	r3, r6
   3eb08:	movw	r2, #37236	; 0x9174
   3eb0c:	mov	r1, #1
   3eb10:	movt	r2, #4
   3eb14:	str	r0, [sp]
   3eb18:	mov	r0, r5
   3eb1c:	bl	14274 <__fprintf_chk@plt>
   3eb20:	b	3ea78 <__assert_fail@plt+0x2a420>
   3eb24:	mov	r8, #1
   3eb28:	b	3e8cc <__assert_fail@plt+0x2a274>
   3eb2c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3eb30:	movw	r4, #48000	; 0xbb80
   3eb34:	movt	r4, #5
   3eb38:	movw	r7, #47296	; 0xb8c0
   3eb3c:	movt	r7, #5
   3eb40:	mov	r6, r0
   3eb44:	ldr	r3, [r4]
   3eb48:	sub	sp, sp, #36	; 0x24
   3eb4c:	ldr	r0, [r7]
   3eb50:	mov	r5, r1
   3eb54:	cmp	r3, #0
   3eb58:	mov	r9, r2
   3eb5c:	str	r0, [sp, #28]
   3eb60:	beq	3ee44 <__assert_fail@plt+0x2a7ec>
   3eb64:	ldr	r3, [r4, #8]
   3eb68:	movw	r8, #48000	; 0xbb80
   3eb6c:	movt	r8, #5
   3eb70:	cmp	r3, #0
   3eb74:	beq	3ed1c <__assert_fail@plt+0x2a6c4>
   3eb78:	cmp	r6, #1
   3eb7c:	moveq	r3, #0
   3eb80:	streq	r3, [r8, #8]
   3eb84:	beq	3ecc4 <__assert_fail@plt+0x2a66c>
   3eb88:	mov	r0, #10
   3eb8c:	ldr	r1, [r8]
   3eb90:	bl	13e0c <_IO_putc@plt>
   3eb94:	mov	r3, #0
   3eb98:	str	r3, [r8, #8]
   3eb9c:	ldr	r3, [r4, #12]
   3eba0:	movw	r8, #48000	; 0xbb80
   3eba4:	movt	r8, #5
   3eba8:	cmp	r3, #0
   3ebac:	bne	3ed38 <__assert_fail@plt+0x2a6e0>
   3ebb0:	ldr	r3, [r4, #16]
   3ebb4:	movw	r1, #48000	; 0xbb80
   3ebb8:	movt	r1, #5
   3ebbc:	cmp	r3, #0
   3ebc0:	bne	3ebd0 <__assert_fail@plt+0x2a578>
   3ebc4:	ldr	r3, [r1, #4]
   3ebc8:	cmp	r3, #0
   3ebcc:	beq	3ebdc <__assert_fail@plt+0x2a584>
   3ebd0:	ldr	r0, [pc, #768]	; 3eed8 <__assert_fail@plt+0x2a880>
   3ebd4:	ldr	r1, [r4]
   3ebd8:	bl	145b0 <fputs@plt>
   3ebdc:	ldr	r2, [r4, #100]	; 0x64
   3ebe0:	movw	r3, #48000	; 0xbb80
   3ebe4:	movt	r3, #5
   3ebe8:	cmp	r2, #0
   3ebec:	beq	3ed28 <__assert_fail@plt+0x2a6d0>
   3ebf0:	ldr	r8, [r4, #104]	; 0x68
   3ebf4:	movw	r3, #48000	; 0xbb80
   3ebf8:	movt	r3, #5
   3ebfc:	cmp	r8, #0
   3ec00:	beq	3ee20 <__assert_fail@plt+0x2a7c8>
   3ec04:	ldr	sl, [r3]
   3ec08:	bl	14040 <getpid@plt>
   3ec0c:	mov	fp, r0
   3ec10:	blx	r8
   3ec14:	movw	r2, #37348	; 0x91e4
   3ec18:	mov	r3, fp
   3ec1c:	mov	r1, #1
   3ec20:	movt	r2, #4
   3ec24:	str	r0, [sp]
   3ec28:	mov	r0, sl
   3ec2c:	bl	14274 <__fprintf_chk@plt>
   3ec30:	ldr	r3, [r4, #12]
   3ec34:	movw	r1, #48000	; 0xbb80
   3ec38:	movt	r1, #5
   3ec3c:	cmp	r3, #0
   3ec40:	beq	3ec50 <__assert_fail@plt+0x2a5f8>
   3ec44:	ldr	r3, [r1, #4]
   3ec48:	cmp	r3, #0
   3ec4c:	beq	3ec5c <__assert_fail@plt+0x2a604>
   3ec50:	mov	r0, #58	; 0x3a
   3ec54:	ldr	r1, [r4]
   3ec58:	bl	13e0c <_IO_putc@plt>
   3ec5c:	cmp	r5, #0
   3ec60:	beq	3ec74 <__assert_fail@plt+0x2a61c>
   3ec64:	ldrb	r3, [r5]
   3ec68:	cmp	r3, #8
   3ec6c:	addeq	r5, r5, #1
   3ec70:	beq	3ec80 <__assert_fail@plt+0x2a628>
   3ec74:	mov	r0, #32
   3ec78:	ldr	r1, [r4]
   3ec7c:	bl	13e0c <_IO_putc@plt>
   3ec80:	cmp	r6, #7
   3ec84:	ldrls	pc, [pc, r6, lsl #2]
   3ec88:	b	3ecac <__assert_fail@plt+0x2a654>
   3ec8c:	andeq	lr, r3, r4, asr #25
   3ec90:	andeq	lr, r3, r4, asr #25
   3ec94:	andeq	lr, r3, r4, asr #25
   3ec98:	andeq	lr, r3, r4, asr #25
   3ec9c:	andeq	lr, r3, r4, asr #25
   3eca0:	andeq	lr, r3, ip, asr #27
   3eca4:	andeq	lr, r3, r8, ror #27
   3eca8:	andeq	lr, r3, r4, lsl #28
   3ecac:	movw	r2, #37400	; 0x9218
   3ecb0:	ldr	r0, [r4]
   3ecb4:	movt	r2, #4
   3ecb8:	mov	r1, #1
   3ecbc:	mov	r3, r6
   3ecc0:	bl	14274 <__fprintf_chk@plt>
   3ecc4:	cmp	r5, #0
   3ecc8:	beq	3ecf4 <__assert_fail@plt+0x2a69c>
   3eccc:	mov	r3, r9
   3ecd0:	ldr	r0, [r4]
   3ecd4:	mov	r1, #1
   3ecd8:	mov	r2, r5
   3ecdc:	bl	13fc8 <__vfprintf_chk@plt>
   3ece0:	ldrb	r3, [r5]
   3ece4:	movw	r8, #48000	; 0xbb80
   3ece8:	movt	r8, #5
   3ecec:	cmp	r3, #0
   3ecf0:	bne	3edac <__assert_fail@plt+0x2a754>
   3ecf4:	cmp	r6, #5
   3ecf8:	beq	3ee80 <__assert_fail@plt+0x2a828>
   3ecfc:	cmp	r6, #6
   3ed00:	beq	3eea0 <__assert_fail@plt+0x2a848>
   3ed04:	ldr	r2, [sp, #28]
   3ed08:	ldr	r3, [r7]
   3ed0c:	cmp	r2, r3
   3ed10:	bne	3ee9c <__assert_fail@plt+0x2a844>
   3ed14:	add	sp, sp, #36	; 0x24
   3ed18:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3ed1c:	cmp	r6, #1
   3ed20:	bne	3eb9c <__assert_fail@plt+0x2a544>
   3ed24:	b	3ecc4 <__assert_fail@plt+0x2a66c>
   3ed28:	ldr	r3, [r3, #4]
   3ed2c:	cmp	r3, #0
   3ed30:	beq	3ec30 <__assert_fail@plt+0x2a5d8>
   3ed34:	b	3ebf0 <__assert_fail@plt+0x2a598>
   3ed38:	ldr	r0, [r8, #4]
   3ed3c:	cmp	r0, #0
   3ed40:	bne	3ebb0 <__assert_fail@plt+0x2a558>
   3ed44:	bl	13c08 <time@plt>
   3ed48:	add	r3, sp, #32
   3ed4c:	str	r0, [r3, #-8]!
   3ed50:	mov	r0, r3
   3ed54:	bl	13fd4 <localtime@plt>
   3ed58:	movw	r2, #37316	; 0x91c4
   3ed5c:	movt	r2, #4
   3ed60:	ldr	r1, [r0, #16]
   3ed64:	mov	ip, r0
   3ed68:	ldr	r3, [r0, #20]
   3ed6c:	add	r1, r1, #1
   3ed70:	str	r1, [sp]
   3ed74:	ldr	lr, [r0, #12]
   3ed78:	add	r3, r3, #1888	; 0x760
   3ed7c:	ldr	r0, [r8]
   3ed80:	add	r3, r3, #12
   3ed84:	mov	r1, #1
   3ed88:	str	lr, [sp, #4]
   3ed8c:	ldr	lr, [ip, #8]
   3ed90:	str	lr, [sp, #8]
   3ed94:	ldr	lr, [ip, #4]
   3ed98:	str	lr, [sp, #12]
   3ed9c:	ldr	ip, [ip]
   3eda0:	str	ip, [sp, #16]
   3eda4:	bl	14274 <__fprintf_chk@plt>
   3eda8:	b	3ebb0 <__assert_fail@plt+0x2a558>
   3edac:	mov	r0, r5
   3edb0:	bl	14094 <strlen@plt>
   3edb4:	add	r0, r5, r0
   3edb8:	ldrb	r3, [r0, #-1]
   3edbc:	cmp	r3, #10
   3edc0:	movne	r3, #1
   3edc4:	strne	r3, [r8, #8]
   3edc8:	b	3ecf4 <__assert_fail@plt+0x2a69c>
   3edcc:	movw	r0, #37368	; 0x91f8
   3edd0:	mov	r1, #1
   3edd4:	mov	r2, #7
   3edd8:	ldr	r3, [r4]
   3eddc:	movt	r0, #4
   3ede0:	bl	13e18 <fwrite@plt>
   3ede4:	b	3ecc4 <__assert_fail@plt+0x2a66c>
   3ede8:	movw	r0, #37376	; 0x9200
   3edec:	mov	r1, #1
   3edf0:	mov	r2, #13
   3edf4:	ldr	r3, [r4]
   3edf8:	movt	r0, #4
   3edfc:	bl	13e18 <fwrite@plt>
   3ee00:	b	3ecc4 <__assert_fail@plt+0x2a66c>
   3ee04:	movw	r0, #37392	; 0x9210
   3ee08:	mov	r1, #1
   3ee0c:	mov	r2, #5
   3ee10:	ldr	r3, [r4]
   3ee14:	movt	r0, #4
   3ee18:	bl	13e18 <fwrite@plt>
   3ee1c:	b	3ecc4 <__assert_fail@plt+0x2a66c>
   3ee20:	ldr	r8, [r3]
   3ee24:	bl	14040 <getpid@plt>
   3ee28:	movw	r2, #37360	; 0x91f0
   3ee2c:	mov	r1, #1
   3ee30:	movt	r2, #4
   3ee34:	mov	r3, r0
   3ee38:	mov	r0, r8
   3ee3c:	bl	14274 <__fprintf_chk@plt>
   3ee40:	b	3ec30 <__assert_fail@plt+0x2a5d8>
   3ee44:	movw	r0, #17096	; 0x42c8
   3ee48:	mvn	r1, #0
   3ee4c:	movt	r0, #4
   3ee50:	bl	3e83c <__assert_fail@plt+0x2a1e4>
   3ee54:	ldr	r3, [r4]
   3ee58:	cmp	r3, #0
   3ee5c:	bne	3eb64 <__assert_fail@plt+0x2a50c>
   3ee60:	movw	r0, #37292	; 0x91ac
   3ee64:	movw	r1, #37304	; 0x91b8
   3ee68:	movw	r3, #37192	; 0x9148
   3ee6c:	movt	r0, #4
   3ee70:	movt	r1, #4
   3ee74:	movw	r2, #451	; 0x1c3
   3ee78:	movt	r3, #4
   3ee7c:	bl	14658 <__assert_fail@plt>
   3ee80:	ldr	r2, [r4, #8]
   3ee84:	movw	r3, #48000	; 0xbb80
   3ee88:	movt	r3, #5
   3ee8c:	cmp	r2, #0
   3ee90:	bne	3eeb8 <__assert_fail@plt+0x2a860>
   3ee94:	mov	r0, #2
   3ee98:	bl	1404c <exit@plt>
   3ee9c:	bl	13cec <__stack_chk_fail@plt>
   3eea0:	ldr	r2, [r4, #8]
   3eea4:	movw	r3, #48000	; 0xbb80
   3eea8:	movt	r3, #5
   3eeac:	cmp	r2, #0
   3eeb0:	bne	3eec8 <__assert_fail@plt+0x2a870>
   3eeb4:	bl	145c8 <abort@plt>
   3eeb8:	ldr	r1, [r3]
   3eebc:	mov	r0, #10
   3eec0:	bl	13e0c <_IO_putc@plt>
   3eec4:	b	3ee94 <__assert_fail@plt+0x2a83c>
   3eec8:	ldr	r1, [r3]
   3eecc:	mov	r0, #10
   3eed0:	bl	13e0c <_IO_putc@plt>
   3eed4:	b	3eeb4 <__assert_fail@plt+0x2a85c>
   3eed8:	muleq	r5, r4, fp
   3eedc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3eee0:	movw	r8, #47296	; 0xb8c0
   3eee4:	movt	r8, #5
   3eee8:	ldr	r3, [r0, #8]
   3eeec:	mov	sl, r2
   3eef0:	sub	sp, sp, #128	; 0x80
   3eef4:	ldr	r2, [r8]
   3eef8:	cmp	r3, #0
   3eefc:	mov	r7, r0
   3ef00:	mov	r5, r1
   3ef04:	ldr	r6, [r0]
   3ef08:	str	r2, [sp, #124]	; 0x7c
   3ef0c:	bne	3efdc <__assert_fail@plt+0x2a984>
   3ef10:	movw	r9, #47292	; 0xb8bc
   3ef14:	cmn	r6, #1
   3ef18:	movt	r9, #5
   3ef1c:	str	r6, [r9]
   3ef20:	bne	3f090 <__assert_fail@plt+0x2aa38>
   3ef24:	movw	r3, #48000	; 0xbb80
   3ef28:	movt	r3, #5
   3ef2c:	ldr	r3, [r3, #108]	; 0x6c
   3ef30:	cmp	r3, #0
   3ef34:	bne	3ef98 <__assert_fail@plt+0x2a940>
   3ef38:	ldr	r3, [r7]
   3ef3c:	cmn	r3, #1
   3ef40:	beq	3ef98 <__assert_fail@plt+0x2a940>
   3ef44:	movw	r4, #47304	; 0xb8c8
   3ef48:	movt	r4, #5
   3ef4c:	ldr	r0, [r4]
   3ef50:	bl	14244 <fileno@plt>
   3ef54:	bl	14598 <isatty@plt>
   3ef58:	cmp	r0, #0
   3ef5c:	beq	3ef98 <__assert_fail@plt+0x2a940>
   3ef60:	ldrb	r3, [r7, #16]
   3ef64:	cmp	r3, #0
   3ef68:	beq	3f0dc <__assert_fail@plt+0x2aa84>
   3ef6c:	bl	14148 <__errno_location@plt>
   3ef70:	ldr	r4, [r4]
   3ef74:	ldr	r0, [r0]
   3ef78:	bl	13fa4 <strerror@plt>
   3ef7c:	movw	r2, #37500	; 0x927c
   3ef80:	mov	r1, #1
   3ef84:	movt	r2, #4
   3ef88:	add	r3, r7, #16
   3ef8c:	str	r0, [sp]
   3ef90:	mov	r0, r4
   3ef94:	bl	14274 <__fprintf_chk@plt>
   3ef98:	ldr	r3, [r7, #12]
   3ef9c:	cmp	r3, #0
   3efa0:	beq	3efc0 <__assert_fail@plt+0x2a968>
   3efa4:	ldr	r0, [r7]
   3efa8:	cmn	r0, #1
   3efac:	beq	3efc0 <__assert_fail@plt+0x2a968>
   3efb0:	bl	145ec <close@plt>
   3efb4:	mvn	r3, #0
   3efb8:	str	r3, [r7]
   3efbc:	str	r3, [r9]
   3efc0:	ldr	r2, [sp, #124]	; 0x7c
   3efc4:	mov	r0, sl
   3efc8:	ldr	r3, [r8]
   3efcc:	cmp	r2, r3
   3efd0:	bne	3f240 <__assert_fail@plt+0x2abe8>
   3efd4:	add	sp, sp, #128	; 0x80
   3efd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3efdc:	cmn	r6, #1
   3efe0:	movwne	r9, #47292	; 0xb8bc
   3efe4:	movtne	r9, #5
   3efe8:	strne	r6, [r9]
   3efec:	bne	3f090 <__assert_fail@plt+0x2aa38>
   3eff0:	mov	r6, #0
   3eff4:	mov	r0, #1
   3eff8:	str	r6, [r7, #12]
   3effc:	mov	r2, r6
   3f000:	mov	r1, r0
   3f004:	bl	144fc <socket@plt>
   3f008:	cmn	r0, #1
   3f00c:	mov	r4, r0
   3f010:	str	r0, [r7]
   3f014:	beq	3f110 <__assert_fail@plt+0x2aab8>
   3f018:	add	r9, r7, #16
   3f01c:	mov	r1, r6
   3f020:	mov	r2, #110	; 0x6e
   3f024:	add	r0, sp, #12
   3f028:	bl	141cc <memset@plt>
   3f02c:	mov	r1, r9
   3f030:	mov	r2, #107	; 0x6b
   3f034:	add	r0, sp, #14
   3f038:	mov	r6, #1
   3f03c:	strh	r6, [sp, #12]
   3f040:	bl	141e4 <strncpy@plt>
   3f044:	add	r0, sp, #14
   3f048:	bl	14094 <strlen@plt>
   3f04c:	add	r1, sp, #12
   3f050:	add	r2, r0, #2
   3f054:	mov	r0, r4
   3f058:	bl	1461c <connect@plt>
   3f05c:	cmn	r0, #1
   3f060:	beq	3f174 <__assert_fail@plt+0x2ab1c>
   3f064:	ldr	r3, [r7]
   3f068:	cmn	r3, #1
   3f06c:	beq	3f244 <__assert_fail@plt+0x2abec>
   3f070:	movw	r9, #47292	; 0xb8bc
   3f074:	movt	r9, #5
   3f078:	mov	r6, r3
   3f07c:	mov	r2, #0
   3f080:	str	r3, [r9]
   3f084:	mov	r3, #1
   3f088:	str	r2, [r7, #4]
   3f08c:	str	r3, [r7, #12]
   3f090:	cmp	sl, #0
   3f094:	beq	3efc0 <__assert_fail@plt+0x2a968>
   3f098:	mov	r4, sl
   3f09c:	b	3f0a8 <__assert_fail@plt+0x2aa50>
   3f0a0:	cmp	r4, #0
   3f0a4:	beq	3efc0 <__assert_fail@plt+0x2a968>
   3f0a8:	mov	r1, r5
   3f0ac:	mov	r2, r4
   3f0b0:	mov	r0, r6
   3f0b4:	bl	1422c <write@plt>
   3f0b8:	cmp	r0, #0
   3f0bc:	rsbge	r4, r0, r4
   3f0c0:	addge	r5, r5, r0
   3f0c4:	bge	3f0a0 <__assert_fail@plt+0x2aa48>
   3f0c8:	bl	14148 <__errno_location@plt>
   3f0cc:	ldr	r3, [r0]
   3f0d0:	cmp	r3, #4
   3f0d4:	bne	3ef24 <__assert_fail@plt+0x2a8cc>
   3f0d8:	b	3f0a0 <__assert_fail@plt+0x2aa48>
   3f0dc:	bl	14148 <__errno_location@plt>
   3f0e0:	ldr	r4, [r4]
   3f0e4:	ldr	r5, [r7]
   3f0e8:	ldr	r0, [r0]
   3f0ec:	bl	13fa4 <strerror@plt>
   3f0f0:	mov	r3, r5
   3f0f4:	movw	r2, #37528	; 0x9298
   3f0f8:	mov	r1, #1
   3f0fc:	movt	r2, #4
   3f100:	str	r0, [sp]
   3f104:	mov	r0, r4
   3f108:	bl	14274 <__fprintf_chk@plt>
   3f10c:	b	3ef98 <__assert_fail@plt+0x2a940>
   3f110:	ldr	r3, [r7, #4]
   3f114:	cmp	r3, r6
   3f118:	beq	3f158 <__assert_fail@plt+0x2ab00>
   3f11c:	movw	r3, #48000	; 0xbb80
   3f120:	movt	r3, #5
   3f124:	ldr	r3, [r3, #108]	; 0x6c
   3f128:	cmp	r3, #0
   3f12c:	bne	3f16c <__assert_fail@plt+0x2ab14>
   3f130:	ldr	r2, [r7, #4]
   3f134:	cmp	r2, #0
   3f138:	moveq	r2, #1
   3f13c:	streq	r2, [r7, #4]
   3f140:	mvn	r2, #0
   3f144:	str	r2, [r7]
   3f148:	movw	r9, #47292	; 0xb8bc
   3f14c:	movt	r9, #5
   3f150:	str	r2, [r9]
   3f154:	b	3ef30 <__assert_fail@plt+0x2a8d8>
   3f158:	movw	r4, #48000	; 0xbb80
   3f15c:	movt	r4, #5
   3f160:	ldr	r3, [r4, #108]	; 0x6c
   3f164:	cmp	r3, #0
   3f168:	beq	3f1ac <__assert_fail@plt+0x2ab54>
   3f16c:	ldr	r2, [r7]
   3f170:	b	3f148 <__assert_fail@plt+0x2aaf0>
   3f174:	ldr	r3, [r7, #4]
   3f178:	movw	r4, #48000	; 0xbb80
   3f17c:	movt	r4, #5
   3f180:	cmp	r3, #0
   3f184:	bne	3f194 <__assert_fail@plt+0x2ab3c>
   3f188:	ldr	r3, [r4, #108]	; 0x6c
   3f18c:	cmp	r3, #0
   3f190:	beq	3f1f4 <__assert_fail@plt+0x2ab9c>
   3f194:	ldr	r0, [r7]
   3f198:	bl	145ec <close@plt>
   3f19c:	mvn	r3, #0
   3f1a0:	str	r3, [r7]
   3f1a4:	ldr	r3, [r4, #108]	; 0x6c
   3f1a8:	b	3f128 <__assert_fail@plt+0x2aad0>
   3f1ac:	movw	r4, #47304	; 0xb8c8
   3f1b0:	movt	r4, #5
   3f1b4:	ldr	r0, [r4]
   3f1b8:	bl	14244 <fileno@plt>
   3f1bc:	bl	14598 <isatty@plt>
   3f1c0:	cmp	r0, #0
   3f1c4:	beq	3f064 <__assert_fail@plt+0x2aa0c>
   3f1c8:	bl	14148 <__errno_location@plt>
   3f1cc:	ldr	r4, [r4]
   3f1d0:	ldr	r0, [r0]
   3f1d4:	bl	13fa4 <strerror@plt>
   3f1d8:	movw	r2, #37428	; 0x9234
   3f1dc:	mov	r1, #1
   3f1e0:	movt	r2, #4
   3f1e4:	mov	r3, r0
   3f1e8:	mov	r0, r4
   3f1ec:	bl	14274 <__fprintf_chk@plt>
   3f1f0:	b	3f064 <__assert_fail@plt+0x2aa0c>
   3f1f4:	movw	r5, #47304	; 0xb8c8
   3f1f8:	movt	r5, #5
   3f1fc:	ldr	r0, [r5]
   3f200:	bl	14244 <fileno@plt>
   3f204:	bl	14598 <isatty@plt>
   3f208:	cmp	r0, #0
   3f20c:	beq	3f194 <__assert_fail@plt+0x2ab3c>
   3f210:	bl	14148 <__errno_location@plt>
   3f214:	ldr	r5, [r5]
   3f218:	ldr	r0, [r0]
   3f21c:	bl	13fa4 <strerror@plt>
   3f220:	mov	r1, r6
   3f224:	mov	r3, r9
   3f228:	movw	r2, #37472	; 0x9260
   3f22c:	movt	r2, #4
   3f230:	str	r0, [sp]
   3f234:	mov	r0, r5
   3f238:	bl	14274 <__fprintf_chk@plt>
   3f23c:	b	3f194 <__assert_fail@plt+0x2ab3c>
   3f240:	bl	13cec <__stack_chk_fail@plt>
   3f244:	movw	r4, #48000	; 0xbb80
   3f248:	movt	r4, #5
   3f24c:	b	3f1a4 <__assert_fail@plt+0x2ab4c>
   3f250:	push	{r1, r2, r3}
   3f254:	mov	r0, #6
   3f258:	push	{r4, lr}
   3f25c:	movw	r4, #47296	; 0xb8c0
   3f260:	movt	r4, #5
   3f264:	sub	sp, sp, #12
   3f268:	add	r3, sp, #24
   3f26c:	movw	r1, #37572	; 0x92c4
   3f270:	ldr	ip, [r4]
   3f274:	movt	r1, #4
   3f278:	mov	r2, r3
   3f27c:	str	r3, [sp]
   3f280:	str	ip, [sp, #4]
   3f284:	bl	3eb2c <__assert_fail@plt+0x2a4d4>
   3f288:	ldr	r2, [sp, #4]
   3f28c:	ldr	r3, [r4]
   3f290:	cmp	r2, r3
   3f294:	bne	3f2a8 <__assert_fail@plt+0x2ac50>
   3f298:	add	sp, sp, #12
   3f29c:	pop	{r4, lr}
   3f2a0:	add	sp, sp, #12
   3f2a4:	bx	lr
   3f2a8:	bl	13cec <__stack_chk_fail@plt>
   3f2ac:	cmp	r0, #0
   3f2b0:	movw	r3, #48000	; 0xbb80
   3f2b4:	movt	r3, #5
   3f2b8:	movne	r2, #0
   3f2bc:	ldr	r0, [r3, #112]	; 0x70
   3f2c0:	strne	r2, [r3, #112]	; 0x70
   3f2c4:	bx	lr
   3f2c8:	movw	r3, #48000	; 0xbb80
   3f2cc:	movt	r3, #5
   3f2d0:	ldr	r2, [r3, #112]	; 0x70
   3f2d4:	add	r2, r2, #1
   3f2d8:	str	r2, [r3, #112]	; 0x70
   3f2dc:	bx	lr
   3f2e0:	movw	r3, #17096	; 0x42c8
   3f2e4:	cmp	r0, #0
   3f2e8:	movt	r3, #4
   3f2ec:	mvn	r1, #0
   3f2f0:	moveq	r0, r3
   3f2f4:	b	3e83c <__assert_fail@plt+0x2a1e4>
   3f2f8:	mov	r1, r0
   3f2fc:	mov	r0, #0
   3f300:	b	3e83c <__assert_fail@plt+0x2a1e4>
   3f304:	movw	r3, #48000	; 0xbb80
   3f308:	movt	r3, #5
   3f30c:	str	r0, [r3, #104]	; 0x68
   3f310:	bx	lr
   3f314:	cmp	r0, #0
   3f318:	push	{r3, r4, r5, lr}
   3f31c:	movw	r4, #48000	; 0xbb80
   3f320:	mov	r5, r1
   3f324:	movt	r4, #5
   3f328:	beq	3f344 <__assert_fail@plt+0x2acec>
   3f32c:	mov	r1, r0
   3f330:	mov	r2, #79	; 0x4f
   3f334:	add	r0, r4, #20
   3f338:	bl	141e4 <strncpy@plt>
   3f33c:	mov	r3, #0
   3f340:	strb	r3, [r4, #99]	; 0x63
   3f344:	and	r3, r5, #1
   3f348:	and	r2, r5, #2
   3f34c:	str	r3, [r4, #16]
   3f350:	and	r3, r5, #4
   3f354:	str	r2, [r4, #12]
   3f358:	and	r5, r5, #256	; 0x100
   3f35c:	str	r3, [r4, #100]	; 0x64
   3f360:	str	r5, [r4, #108]	; 0x6c
   3f364:	pop	{r3, r4, r5, pc}
   3f368:	cmp	r0, #0
   3f36c:	beq	3f3c0 <__assert_fail@plt+0x2ad68>
   3f370:	movw	r3, #48000	; 0xbb80
   3f374:	movt	r3, #5
   3f378:	ldr	r2, [r3, #16]
   3f37c:	ldr	r1, [r3, #12]
   3f380:	adds	r2, r2, #0
   3f384:	movne	r2, #1
   3f388:	cmp	r1, #0
   3f38c:	str	r2, [r0]
   3f390:	orrne	r2, r2, #2
   3f394:	strne	r2, [r0]
   3f398:	ldr	r2, [r3, #100]	; 0x64
   3f39c:	ldr	r3, [r3, #108]	; 0x6c
   3f3a0:	cmp	r2, #0
   3f3a4:	ldrne	r2, [r0]
   3f3a8:	orrne	r2, r2, #4
   3f3ac:	strne	r2, [r0]
   3f3b0:	cmp	r3, #0
   3f3b4:	ldrne	r3, [r0]
   3f3b8:	orrne	r3, r3, #256	; 0x100
   3f3bc:	strne	r3, [r0]
   3f3c0:	ldr	r0, [pc]	; 3f3c8 <__assert_fail@plt+0x2ad70>
   3f3c4:	bx	lr
   3f3c8:	muleq	r5, r4, fp
   3f3cc:	movw	r3, #48000	; 0xbb80
   3f3d0:	movt	r3, #5
   3f3d4:	push	{r4, lr}
   3f3d8:	mov	r4, r0
   3f3dc:	ldr	r0, [r3]
   3f3e0:	cmp	r0, #0
   3f3e4:	beq	3f408 <__assert_fail@plt+0x2adb0>
   3f3e8:	bl	14244 <fileno@plt>
   3f3ec:	subs	r2, r0, r4
   3f3f0:	rsbs	r3, r2, #0
   3f3f4:	adcs	r3, r3, r2
   3f3f8:	cmn	r0, #1
   3f3fc:	moveq	r3, #0
   3f400:	cmp	r3, #0
   3f404:	bne	3f42c <__assert_fail@plt+0x2add4>
   3f408:	movw	r3, #47292	; 0xb8bc
   3f40c:	movt	r3, #5
   3f410:	ldr	r3, [r3]
   3f414:	cmn	r3, #1
   3f418:	beq	3f424 <__assert_fail@plt+0x2adcc>
   3f41c:	cmp	r4, r3
   3f420:	beq	3f42c <__assert_fail@plt+0x2add4>
   3f424:	mov	r0, #0
   3f428:	pop	{r4, pc}
   3f42c:	mov	r0, #1
   3f430:	pop	{r4, pc}
   3f434:	movw	r3, #48000	; 0xbb80
   3f438:	movt	r3, #5
   3f43c:	ldr	r0, [r3]
   3f440:	cmp	r0, #0
   3f444:	movweq	r3, #47304	; 0xb8c8
   3f448:	movteq	r3, #5
   3f44c:	ldreq	r0, [r3]
   3f450:	b	14244 <fileno@plt>
   3f454:	movw	r3, #48000	; 0xbb80
   3f458:	movt	r3, #5
   3f45c:	ldr	r0, [r3]
   3f460:	cmp	r0, #0
   3f464:	movweq	r3, #47304	; 0xb8c8
   3f468:	movteq	r3, #5
   3f46c:	ldreq	r0, [r3]
   3f470:	bx	lr
   3f474:	b	3eb2c <__assert_fail@plt+0x2a4d4>
   3f478:	push	{r0, r1, r2, r3}
   3f47c:	mov	r0, #2
   3f480:	push	{r4, lr}
   3f484:	movw	r4, #47296	; 0xb8c0
   3f488:	movt	r4, #5
   3f48c:	sub	sp, sp, #8
   3f490:	add	r3, sp, #20
   3f494:	ldr	ip, [r4]
   3f498:	mov	r2, r3
   3f49c:	ldr	r1, [sp, #16]
   3f4a0:	str	r3, [sp]
   3f4a4:	str	ip, [sp, #4]
   3f4a8:	bl	3eb2c <__assert_fail@plt+0x2a4d4>
   3f4ac:	ldr	r2, [sp, #4]
   3f4b0:	ldr	r3, [r4]
   3f4b4:	cmp	r2, r3
   3f4b8:	bne	3f4cc <__assert_fail@plt+0x2ae74>
   3f4bc:	add	sp, sp, #8
   3f4c0:	pop	{r4, lr}
   3f4c4:	add	sp, sp, #16
   3f4c8:	bx	lr
   3f4cc:	bl	13cec <__stack_chk_fail@plt>
   3f4d0:	push	{r0, r1, r2, r3}
   3f4d4:	mov	r0, #4
   3f4d8:	push	{r4, lr}
   3f4dc:	movw	r4, #47296	; 0xb8c0
   3f4e0:	movt	r4, #5
   3f4e4:	sub	sp, sp, #8
   3f4e8:	add	r3, sp, #20
   3f4ec:	ldr	ip, [r4]
   3f4f0:	mov	r2, r3
   3f4f4:	ldr	r1, [sp, #16]
   3f4f8:	str	r3, [sp]
   3f4fc:	str	ip, [sp, #4]
   3f500:	bl	3eb2c <__assert_fail@plt+0x2a4d4>
   3f504:	movw	r3, #48000	; 0xbb80
   3f508:	movt	r3, #5
   3f50c:	movw	r1, #29999	; 0x752f
   3f510:	ldr	r2, [r3, #112]	; 0x70
   3f514:	cmp	r2, r1
   3f518:	addle	r2, r2, #1
   3f51c:	strle	r2, [r3, #112]	; 0x70
   3f520:	ldr	r2, [sp, #4]
   3f524:	ldr	r3, [r4]
   3f528:	cmp	r2, r3
   3f52c:	bne	3f540 <__assert_fail@plt+0x2aee8>
   3f530:	add	sp, sp, #8
   3f534:	pop	{r4, lr}
   3f538:	add	sp, sp, #16
   3f53c:	bx	lr
   3f540:	bl	13cec <__stack_chk_fail@plt>
   3f544:	push	{r0, r1, r2, r3}
   3f548:	movw	r3, #47296	; 0xb8c0
   3f54c:	movt	r3, #5
   3f550:	mov	r0, #5
   3f554:	push	{lr}		; (str lr, [sp, #-4]!)
   3f558:	sub	sp, sp, #12
   3f55c:	add	ip, sp, #20
   3f560:	ldr	r3, [r3]
   3f564:	ldr	r1, [sp, #16]
   3f568:	mov	r2, ip
   3f56c:	str	ip, [sp]
   3f570:	str	r3, [sp, #4]
   3f574:	bl	3eb2c <__assert_fail@plt+0x2a4d4>
   3f578:	bl	145c8 <abort@plt>
   3f57c:	push	{r0, r1, r2, r3}
   3f580:	movw	r3, #47296	; 0xb8c0
   3f584:	movt	r3, #5
   3f588:	mov	r0, #6
   3f58c:	push	{lr}		; (str lr, [sp, #-4]!)
   3f590:	sub	sp, sp, #12
   3f594:	add	ip, sp, #20
   3f598:	ldr	r3, [r3]
   3f59c:	ldr	r1, [sp, #16]
   3f5a0:	mov	r2, ip
   3f5a4:	str	ip, [sp]
   3f5a8:	str	r3, [sp, #4]
   3f5ac:	bl	3eb2c <__assert_fail@plt+0x2a4d4>
   3f5b0:	bl	145c8 <abort@plt>
   3f5b4:	push	{r0, r1, r2, r3}
   3f5b8:	mov	r0, #7
   3f5bc:	push	{r4, lr}
   3f5c0:	movw	r4, #47296	; 0xb8c0
   3f5c4:	movt	r4, #5
   3f5c8:	sub	sp, sp, #8
   3f5cc:	add	r3, sp, #20
   3f5d0:	ldr	ip, [r4]
   3f5d4:	mov	r2, r3
   3f5d8:	ldr	r1, [sp, #16]
   3f5dc:	str	r3, [sp]
   3f5e0:	str	ip, [sp, #4]
   3f5e4:	bl	3eb2c <__assert_fail@plt+0x2a4d4>
   3f5e8:	ldr	r2, [sp, #4]
   3f5ec:	ldr	r3, [r4]
   3f5f0:	cmp	r2, r3
   3f5f4:	bne	3f608 <__assert_fail@plt+0x2afb0>
   3f5f8:	add	sp, sp, #8
   3f5fc:	pop	{r4, lr}
   3f600:	add	sp, sp, #16
   3f604:	bx	lr
   3f608:	bl	13cec <__stack_chk_fail@plt>
   3f60c:	push	{r0, r1, r2, r3}
   3f610:	push	{r4, lr}
   3f614:	sub	sp, sp, #8
   3f618:	movw	r4, #47296	; 0xb8c0
   3f61c:	movt	r4, #5
   3f620:	ldr	r1, [sp, #16]
   3f624:	add	r3, sp, #20
   3f628:	ldr	ip, [r4]
   3f62c:	adds	r0, r1, #0
   3f630:	mov	r2, r3
   3f634:	str	r3, [sp]
   3f638:	movne	r0, #1
   3f63c:	str	ip, [sp, #4]
   3f640:	bl	3eb2c <__assert_fail@plt+0x2a4d4>
   3f644:	ldr	r2, [sp, #4]
   3f648:	ldr	r3, [r4]
   3f64c:	cmp	r2, r3
   3f650:	bne	3f664 <__assert_fail@plt+0x2b00c>
   3f654:	add	sp, sp, #8
   3f658:	pop	{r4, lr}
   3f65c:	add	sp, sp, #16
   3f660:	bx	lr
   3f664:	bl	13cec <__stack_chk_fail@plt>
   3f668:	push	{r4, r5, r6, lr}
   3f66c:	subs	r6, r0, #0
   3f670:	mov	r4, r1
   3f674:	mov	r5, r2
   3f678:	beq	3f688 <__assert_fail@plt+0x2b030>
   3f67c:	ldrb	r3, [r6]
   3f680:	cmp	r3, #0
   3f684:	bne	3f6ec <__assert_fail@plt+0x2b094>
   3f688:	cmp	r5, #0
   3f68c:	bne	3f6a8 <__assert_fail@plt+0x2b050>
   3f690:	cmp	r6, #0
   3f694:	popeq	{r4, r5, r6, pc}
   3f698:	movw	r0, #33896	; 0x8468
   3f69c:	movt	r0, #4
   3f6a0:	pop	{r4, r5, r6, lr}
   3f6a4:	b	3f60c <__assert_fail@plt+0x2afb4>
   3f6a8:	movw	r0, #19860	; 0x4d94
   3f6ac:	ldrb	r1, [r4]
   3f6b0:	movt	r0, #4
   3f6b4:	bl	3f60c <__assert_fail@plt+0x2afb4>
   3f6b8:	cmp	r5, #1
   3f6bc:	beq	3f690 <__assert_fail@plt+0x2b038>
   3f6c0:	add	r5, r4, r5
   3f6c4:	sub	r5, r5, #1
   3f6c8:	ldrb	r1, [r4, #1]!
   3f6cc:	movw	r0, #37608	; 0x92e8
   3f6d0:	movt	r0, #4
   3f6d4:	bl	3f60c <__assert_fail@plt+0x2afb4>
   3f6d8:	cmp	r4, r5
   3f6dc:	bne	3f6c8 <__assert_fail@plt+0x2b070>
   3f6e0:	cmp	r6, #0
   3f6e4:	bne	3f698 <__assert_fail@plt+0x2b040>
   3f6e8:	pop	{r4, r5, r6, pc}
   3f6ec:	movw	r0, #37604	; 0x92e4
   3f6f0:	mov	r1, r6
   3f6f4:	movt	r0, #4
   3f6f8:	bl	3f5b4 <__assert_fail@plt+0x2af5c>
   3f6fc:	b	3f688 <__assert_fail@plt+0x2b030>
   3f700:	push	{lr}		; (str lr, [sp, #-4]!)
   3f704:	sub	sp, sp, #12
   3f708:	mov	r3, r1
   3f70c:	movw	r1, #37572	; 0x92c4
   3f710:	str	r2, [sp]
   3f714:	movt	r1, #4
   3f718:	mov	r2, r0
   3f71c:	mov	r0, #6
   3f720:	bl	3f250 <__assert_fail@plt+0x2abf8>
   3f724:	bl	145c8 <abort@plt>
   3f728:	subs	r2, r1, #1
   3f72c:	bxeq	lr
   3f730:	bcc	3f908 <__assert_fail@plt+0x2b2b0>
   3f734:	cmp	r0, r1
   3f738:	bls	3f8ec <__assert_fail@plt+0x2b294>
   3f73c:	tst	r1, r2
   3f740:	beq	3f8f8 <__assert_fail@plt+0x2b2a0>
   3f744:	clz	r3, r0
   3f748:	clz	r2, r1
   3f74c:	sub	r3, r2, r3
   3f750:	rsbs	r3, r3, #31
   3f754:	addne	r3, r3, r3, lsl #1
   3f758:	mov	r2, #0
   3f75c:	addne	pc, pc, r3, lsl #2
   3f760:	nop	{0}
   3f764:	cmp	r0, r1, lsl #31
   3f768:	adc	r2, r2, r2
   3f76c:	subcs	r0, r0, r1, lsl #31
   3f770:	cmp	r0, r1, lsl #30
   3f774:	adc	r2, r2, r2
   3f778:	subcs	r0, r0, r1, lsl #30
   3f77c:	cmp	r0, r1, lsl #29
   3f780:	adc	r2, r2, r2
   3f784:	subcs	r0, r0, r1, lsl #29
   3f788:	cmp	r0, r1, lsl #28
   3f78c:	adc	r2, r2, r2
   3f790:	subcs	r0, r0, r1, lsl #28
   3f794:	cmp	r0, r1, lsl #27
   3f798:	adc	r2, r2, r2
   3f79c:	subcs	r0, r0, r1, lsl #27
   3f7a0:	cmp	r0, r1, lsl #26
   3f7a4:	adc	r2, r2, r2
   3f7a8:	subcs	r0, r0, r1, lsl #26
   3f7ac:	cmp	r0, r1, lsl #25
   3f7b0:	adc	r2, r2, r2
   3f7b4:	subcs	r0, r0, r1, lsl #25
   3f7b8:	cmp	r0, r1, lsl #24
   3f7bc:	adc	r2, r2, r2
   3f7c0:	subcs	r0, r0, r1, lsl #24
   3f7c4:	cmp	r0, r1, lsl #23
   3f7c8:	adc	r2, r2, r2
   3f7cc:	subcs	r0, r0, r1, lsl #23
   3f7d0:	cmp	r0, r1, lsl #22
   3f7d4:	adc	r2, r2, r2
   3f7d8:	subcs	r0, r0, r1, lsl #22
   3f7dc:	cmp	r0, r1, lsl #21
   3f7e0:	adc	r2, r2, r2
   3f7e4:	subcs	r0, r0, r1, lsl #21
   3f7e8:	cmp	r0, r1, lsl #20
   3f7ec:	adc	r2, r2, r2
   3f7f0:	subcs	r0, r0, r1, lsl #20
   3f7f4:	cmp	r0, r1, lsl #19
   3f7f8:	adc	r2, r2, r2
   3f7fc:	subcs	r0, r0, r1, lsl #19
   3f800:	cmp	r0, r1, lsl #18
   3f804:	adc	r2, r2, r2
   3f808:	subcs	r0, r0, r1, lsl #18
   3f80c:	cmp	r0, r1, lsl #17
   3f810:	adc	r2, r2, r2
   3f814:	subcs	r0, r0, r1, lsl #17
   3f818:	cmp	r0, r1, lsl #16
   3f81c:	adc	r2, r2, r2
   3f820:	subcs	r0, r0, r1, lsl #16
   3f824:	cmp	r0, r1, lsl #15
   3f828:	adc	r2, r2, r2
   3f82c:	subcs	r0, r0, r1, lsl #15
   3f830:	cmp	r0, r1, lsl #14
   3f834:	adc	r2, r2, r2
   3f838:	subcs	r0, r0, r1, lsl #14
   3f83c:	cmp	r0, r1, lsl #13
   3f840:	adc	r2, r2, r2
   3f844:	subcs	r0, r0, r1, lsl #13
   3f848:	cmp	r0, r1, lsl #12
   3f84c:	adc	r2, r2, r2
   3f850:	subcs	r0, r0, r1, lsl #12
   3f854:	cmp	r0, r1, lsl #11
   3f858:	adc	r2, r2, r2
   3f85c:	subcs	r0, r0, r1, lsl #11
   3f860:	cmp	r0, r1, lsl #10
   3f864:	adc	r2, r2, r2
   3f868:	subcs	r0, r0, r1, lsl #10
   3f86c:	cmp	r0, r1, lsl #9
   3f870:	adc	r2, r2, r2
   3f874:	subcs	r0, r0, r1, lsl #9
   3f878:	cmp	r0, r1, lsl #8
   3f87c:	adc	r2, r2, r2
   3f880:	subcs	r0, r0, r1, lsl #8
   3f884:	cmp	r0, r1, lsl #7
   3f888:	adc	r2, r2, r2
   3f88c:	subcs	r0, r0, r1, lsl #7
   3f890:	cmp	r0, r1, lsl #6
   3f894:	adc	r2, r2, r2
   3f898:	subcs	r0, r0, r1, lsl #6
   3f89c:	cmp	r0, r1, lsl #5
   3f8a0:	adc	r2, r2, r2
   3f8a4:	subcs	r0, r0, r1, lsl #5
   3f8a8:	cmp	r0, r1, lsl #4
   3f8ac:	adc	r2, r2, r2
   3f8b0:	subcs	r0, r0, r1, lsl #4
   3f8b4:	cmp	r0, r1, lsl #3
   3f8b8:	adc	r2, r2, r2
   3f8bc:	subcs	r0, r0, r1, lsl #3
   3f8c0:	cmp	r0, r1, lsl #2
   3f8c4:	adc	r2, r2, r2
   3f8c8:	subcs	r0, r0, r1, lsl #2
   3f8cc:	cmp	r0, r1, lsl #1
   3f8d0:	adc	r2, r2, r2
   3f8d4:	subcs	r0, r0, r1, lsl #1
   3f8d8:	cmp	r0, r1
   3f8dc:	adc	r2, r2, r2
   3f8e0:	subcs	r0, r0, r1
   3f8e4:	mov	r0, r2
   3f8e8:	bx	lr
   3f8ec:	moveq	r0, #1
   3f8f0:	movne	r0, #0
   3f8f4:	bx	lr
   3f8f8:	clz	r2, r1
   3f8fc:	rsb	r2, r2, #31
   3f900:	lsr	r0, r0, r2
   3f904:	bx	lr
   3f908:	cmp	r0, #0
   3f90c:	mvnne	r0, #0
   3f910:	b	3fbb0 <__assert_fail@plt+0x2b558>
   3f914:	cmp	r1, #0
   3f918:	beq	3f908 <__assert_fail@plt+0x2b2b0>
   3f91c:	push	{r0, r1, lr}
   3f920:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   3f924:	pop	{r1, r2, lr}
   3f928:	mul	r3, r2, r0
   3f92c:	sub	r1, r1, r3
   3f930:	bx	lr
   3f934:	cmp	r1, #0
   3f938:	beq	3fb44 <__assert_fail@plt+0x2b4ec>
   3f93c:	eor	ip, r0, r1
   3f940:	rsbmi	r1, r1, #0
   3f944:	subs	r2, r1, #1
   3f948:	beq	3fb10 <__assert_fail@plt+0x2b4b8>
   3f94c:	movs	r3, r0
   3f950:	rsbmi	r3, r0, #0
   3f954:	cmp	r3, r1
   3f958:	bls	3fb1c <__assert_fail@plt+0x2b4c4>
   3f95c:	tst	r1, r2
   3f960:	beq	3fb2c <__assert_fail@plt+0x2b4d4>
   3f964:	clz	r2, r3
   3f968:	clz	r0, r1
   3f96c:	sub	r2, r0, r2
   3f970:	rsbs	r2, r2, #31
   3f974:	addne	r2, r2, r2, lsl #1
   3f978:	mov	r0, #0
   3f97c:	addne	pc, pc, r2, lsl #2
   3f980:	nop	{0}
   3f984:	cmp	r3, r1, lsl #31
   3f988:	adc	r0, r0, r0
   3f98c:	subcs	r3, r3, r1, lsl #31
   3f990:	cmp	r3, r1, lsl #30
   3f994:	adc	r0, r0, r0
   3f998:	subcs	r3, r3, r1, lsl #30
   3f99c:	cmp	r3, r1, lsl #29
   3f9a0:	adc	r0, r0, r0
   3f9a4:	subcs	r3, r3, r1, lsl #29
   3f9a8:	cmp	r3, r1, lsl #28
   3f9ac:	adc	r0, r0, r0
   3f9b0:	subcs	r3, r3, r1, lsl #28
   3f9b4:	cmp	r3, r1, lsl #27
   3f9b8:	adc	r0, r0, r0
   3f9bc:	subcs	r3, r3, r1, lsl #27
   3f9c0:	cmp	r3, r1, lsl #26
   3f9c4:	adc	r0, r0, r0
   3f9c8:	subcs	r3, r3, r1, lsl #26
   3f9cc:	cmp	r3, r1, lsl #25
   3f9d0:	adc	r0, r0, r0
   3f9d4:	subcs	r3, r3, r1, lsl #25
   3f9d8:	cmp	r3, r1, lsl #24
   3f9dc:	adc	r0, r0, r0
   3f9e0:	subcs	r3, r3, r1, lsl #24
   3f9e4:	cmp	r3, r1, lsl #23
   3f9e8:	adc	r0, r0, r0
   3f9ec:	subcs	r3, r3, r1, lsl #23
   3f9f0:	cmp	r3, r1, lsl #22
   3f9f4:	adc	r0, r0, r0
   3f9f8:	subcs	r3, r3, r1, lsl #22
   3f9fc:	cmp	r3, r1, lsl #21
   3fa00:	adc	r0, r0, r0
   3fa04:	subcs	r3, r3, r1, lsl #21
   3fa08:	cmp	r3, r1, lsl #20
   3fa0c:	adc	r0, r0, r0
   3fa10:	subcs	r3, r3, r1, lsl #20
   3fa14:	cmp	r3, r1, lsl #19
   3fa18:	adc	r0, r0, r0
   3fa1c:	subcs	r3, r3, r1, lsl #19
   3fa20:	cmp	r3, r1, lsl #18
   3fa24:	adc	r0, r0, r0
   3fa28:	subcs	r3, r3, r1, lsl #18
   3fa2c:	cmp	r3, r1, lsl #17
   3fa30:	adc	r0, r0, r0
   3fa34:	subcs	r3, r3, r1, lsl #17
   3fa38:	cmp	r3, r1, lsl #16
   3fa3c:	adc	r0, r0, r0
   3fa40:	subcs	r3, r3, r1, lsl #16
   3fa44:	cmp	r3, r1, lsl #15
   3fa48:	adc	r0, r0, r0
   3fa4c:	subcs	r3, r3, r1, lsl #15
   3fa50:	cmp	r3, r1, lsl #14
   3fa54:	adc	r0, r0, r0
   3fa58:	subcs	r3, r3, r1, lsl #14
   3fa5c:	cmp	r3, r1, lsl #13
   3fa60:	adc	r0, r0, r0
   3fa64:	subcs	r3, r3, r1, lsl #13
   3fa68:	cmp	r3, r1, lsl #12
   3fa6c:	adc	r0, r0, r0
   3fa70:	subcs	r3, r3, r1, lsl #12
   3fa74:	cmp	r3, r1, lsl #11
   3fa78:	adc	r0, r0, r0
   3fa7c:	subcs	r3, r3, r1, lsl #11
   3fa80:	cmp	r3, r1, lsl #10
   3fa84:	adc	r0, r0, r0
   3fa88:	subcs	r3, r3, r1, lsl #10
   3fa8c:	cmp	r3, r1, lsl #9
   3fa90:	adc	r0, r0, r0
   3fa94:	subcs	r3, r3, r1, lsl #9
   3fa98:	cmp	r3, r1, lsl #8
   3fa9c:	adc	r0, r0, r0
   3faa0:	subcs	r3, r3, r1, lsl #8
   3faa4:	cmp	r3, r1, lsl #7
   3faa8:	adc	r0, r0, r0
   3faac:	subcs	r3, r3, r1, lsl #7
   3fab0:	cmp	r3, r1, lsl #6
   3fab4:	adc	r0, r0, r0
   3fab8:	subcs	r3, r3, r1, lsl #6
   3fabc:	cmp	r3, r1, lsl #5
   3fac0:	adc	r0, r0, r0
   3fac4:	subcs	r3, r3, r1, lsl #5
   3fac8:	cmp	r3, r1, lsl #4
   3facc:	adc	r0, r0, r0
   3fad0:	subcs	r3, r3, r1, lsl #4
   3fad4:	cmp	r3, r1, lsl #3
   3fad8:	adc	r0, r0, r0
   3fadc:	subcs	r3, r3, r1, lsl #3
   3fae0:	cmp	r3, r1, lsl #2
   3fae4:	adc	r0, r0, r0
   3fae8:	subcs	r3, r3, r1, lsl #2
   3faec:	cmp	r3, r1, lsl #1
   3faf0:	adc	r0, r0, r0
   3faf4:	subcs	r3, r3, r1, lsl #1
   3faf8:	cmp	r3, r1
   3fafc:	adc	r0, r0, r0
   3fb00:	subcs	r3, r3, r1
   3fb04:	cmp	ip, #0
   3fb08:	rsbmi	r0, r0, #0
   3fb0c:	bx	lr
   3fb10:	teq	ip, r0
   3fb14:	rsbmi	r0, r0, #0
   3fb18:	bx	lr
   3fb1c:	movcc	r0, #0
   3fb20:	asreq	r0, ip, #31
   3fb24:	orreq	r0, r0, #1
   3fb28:	bx	lr
   3fb2c:	clz	r2, r1
   3fb30:	rsb	r2, r2, #31
   3fb34:	cmp	ip, #0
   3fb38:	lsr	r0, r3, r2
   3fb3c:	rsbmi	r0, r0, #0
   3fb40:	bx	lr
   3fb44:	cmp	r0, #0
   3fb48:	mvngt	r0, #-2147483648	; 0x80000000
   3fb4c:	movlt	r0, #-2147483648	; 0x80000000
   3fb50:	b	3fbb0 <__assert_fail@plt+0x2b558>
   3fb54:	cmp	r1, #0
   3fb58:	beq	3fb44 <__assert_fail@plt+0x2b4ec>
   3fb5c:	push	{r0, r1, lr}
   3fb60:	bl	3f93c <__assert_fail@plt+0x2b2e4>
   3fb64:	pop	{r1, r2, lr}
   3fb68:	mul	r3, r2, r0
   3fb6c:	sub	r1, r1, r3
   3fb70:	bx	lr
   3fb74:	cmp	r3, #0
   3fb78:	cmpeq	r2, #0
   3fb7c:	bne	3fb94 <__assert_fail@plt+0x2b53c>
   3fb80:	cmp	r1, #0
   3fb84:	cmpeq	r0, #0
   3fb88:	mvnne	r1, #0
   3fb8c:	mvnne	r0, #0
   3fb90:	b	3fbb0 <__assert_fail@plt+0x2b558>
   3fb94:	sub	sp, sp, #8
   3fb98:	push	{sp, lr}
   3fb9c:	bl	3fbfc <__assert_fail@plt+0x2b5a4>
   3fba0:	ldr	lr, [sp, #4]
   3fba4:	add	sp, sp, #8
   3fba8:	pop	{r2, r3}
   3fbac:	bx	lr
   3fbb0:	push	{r1, lr}
   3fbb4:	mov	r0, #8
   3fbb8:	bl	139a4 <raise@plt>
   3fbbc:	pop	{r1, pc}
   3fbc0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   3fbc4:	mov	r8, r2
   3fbc8:	mov	r6, r0
   3fbcc:	mov	r7, r1
   3fbd0:	mov	sl, r3
   3fbd4:	ldr	r9, [sp, #32]
   3fbd8:	bl	3fc38 <__assert_fail@plt+0x2b5e0>
   3fbdc:	umull	r4, r5, r8, r0
   3fbe0:	mul	r8, r8, r1
   3fbe4:	mla	r2, r0, sl, r8
   3fbe8:	add	r5, r2, r5
   3fbec:	subs	r4, r6, r4
   3fbf0:	sbc	r5, r7, r5
   3fbf4:	strd	r4, [r9]
   3fbf8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   3fbfc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   3fc00:	mov	r8, r2
   3fc04:	mov	r6, r0
   3fc08:	mov	r7, r1
   3fc0c:	mov	r5, r3
   3fc10:	ldr	r9, [sp, #32]
   3fc14:	bl	400c4 <__assert_fail@plt+0x2ba6c>
   3fc18:	mul	r3, r0, r5
   3fc1c:	umull	r4, r5, r0, r8
   3fc20:	mla	r8, r8, r1, r3
   3fc24:	add	r5, r8, r5
   3fc28:	subs	r4, r6, r4
   3fc2c:	sbc	r5, r7, r5
   3fc30:	strd	r4, [r9]
   3fc34:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   3fc38:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   3fc3c:	rsbs	r4, r0, #0
   3fc40:	rsc	r5, r1, #0
   3fc44:	cmp	r1, #0
   3fc48:	mvn	r6, #0
   3fc4c:	sub	sp, sp, #12
   3fc50:	movge	r4, r0
   3fc54:	movge	r5, r1
   3fc58:	movge	r6, #0
   3fc5c:	cmp	r3, #0
   3fc60:	blt	3fe98 <__assert_fail@plt+0x2b840>
   3fc64:	cmp	r3, #0
   3fc68:	mov	sl, r4
   3fc6c:	mov	ip, r5
   3fc70:	mov	r0, r2
   3fc74:	mov	r1, r3
   3fc78:	mov	r8, r2
   3fc7c:	mov	r7, r4
   3fc80:	mov	r9, r5
   3fc84:	bne	3fd7c <__assert_fail@plt+0x2b724>
   3fc88:	cmp	r2, r5
   3fc8c:	bls	3fdb8 <__assert_fail@plt+0x2b760>
   3fc90:	clz	r3, r2
   3fc94:	cmp	r3, #0
   3fc98:	rsbne	r2, r3, #32
   3fc9c:	lslne	r8, r0, r3
   3fca0:	lsrne	r2, r4, r2
   3fca4:	lslne	r7, r4, r3
   3fca8:	orrne	r9, r2, r5, lsl r3
   3fcac:	lsr	r4, r8, #16
   3fcb0:	uxth	sl, r8
   3fcb4:	mov	r1, r4
   3fcb8:	mov	r0, r9
   3fcbc:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   3fcc0:	mov	r1, r4
   3fcc4:	mov	fp, r0
   3fcc8:	mov	r0, r9
   3fccc:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   3fcd0:	mul	r0, sl, fp
   3fcd4:	lsr	r2, r7, #16
   3fcd8:	orr	r1, r2, r1, lsl #16
   3fcdc:	cmp	r0, r1
   3fce0:	bls	3fd04 <__assert_fail@plt+0x2b6ac>
   3fce4:	adds	r1, r1, r8
   3fce8:	sub	r3, fp, #1
   3fcec:	bcs	3fd00 <__assert_fail@plt+0x2b6a8>
   3fcf0:	cmp	r0, r1
   3fcf4:	subhi	fp, fp, #2
   3fcf8:	addhi	r1, r1, r8
   3fcfc:	bhi	3fd04 <__assert_fail@plt+0x2b6ac>
   3fd00:	mov	fp, r3
   3fd04:	rsb	r9, r0, r1
   3fd08:	mov	r1, r4
   3fd0c:	uxth	r7, r7
   3fd10:	mov	r0, r9
   3fd14:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   3fd18:	mov	r1, r4
   3fd1c:	mov	r5, r0
   3fd20:	mov	r0, r9
   3fd24:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   3fd28:	mul	sl, sl, r5
   3fd2c:	orr	r1, r7, r1, lsl #16
   3fd30:	cmp	sl, r1
   3fd34:	bls	3fd54 <__assert_fail@plt+0x2b6fc>
   3fd38:	adds	r8, r1, r8
   3fd3c:	sub	r3, r5, #1
   3fd40:	bcs	3fd50 <__assert_fail@plt+0x2b6f8>
   3fd44:	cmp	sl, r8
   3fd48:	subhi	r5, r5, #2
   3fd4c:	bhi	3fd54 <__assert_fail@plt+0x2b6fc>
   3fd50:	mov	r5, r3
   3fd54:	orr	r3, r5, fp, lsl #16
   3fd58:	mov	r4, #0
   3fd5c:	cmp	r6, #0
   3fd60:	mov	r0, r3
   3fd64:	mov	r1, r4
   3fd68:	beq	3fd74 <__assert_fail@plt+0x2b71c>
   3fd6c:	rsbs	r0, r0, #0
   3fd70:	rsc	r1, r1, #0
   3fd74:	add	sp, sp, #12
   3fd78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   3fd7c:	cmp	r3, r5
   3fd80:	movhi	r4, #0
   3fd84:	movhi	r3, r4
   3fd88:	bhi	3fd5c <__assert_fail@plt+0x2b704>
   3fd8c:	clz	r5, r1
   3fd90:	cmp	r5, #0
   3fd94:	bne	3ff84 <__assert_fail@plt+0x2b92c>
   3fd98:	cmp	r1, ip
   3fd9c:	cmpcs	r2, sl
   3fda0:	movhi	r4, #0
   3fda4:	movls	r4, #1
   3fda8:	movls	r3, #1
   3fdac:	movls	r4, r5
   3fdb0:	movhi	r3, r4
   3fdb4:	b	3fd5c <__assert_fail@plt+0x2b704>
   3fdb8:	cmp	r2, #0
   3fdbc:	bne	3fdd0 <__assert_fail@plt+0x2b778>
   3fdc0:	mov	r1, r2
   3fdc4:	mov	r0, #1
   3fdc8:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   3fdcc:	mov	r8, r0
   3fdd0:	clz	r3, r8
   3fdd4:	cmp	r3, #0
   3fdd8:	bne	3fea8 <__assert_fail@plt+0x2b850>
   3fddc:	rsb	r9, r8, r9
   3fde0:	lsr	r5, r8, #16
   3fde4:	uxth	sl, r8
   3fde8:	mov	r4, #1
   3fdec:	mov	r1, r5
   3fdf0:	mov	r0, r9
   3fdf4:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   3fdf8:	mov	r1, r5
   3fdfc:	mov	fp, r0
   3fe00:	mov	r0, r9
   3fe04:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   3fe08:	mul	r0, sl, fp
   3fe0c:	lsr	r2, r7, #16
   3fe10:	orr	r1, r2, r1, lsl #16
   3fe14:	cmp	r0, r1
   3fe18:	bls	3fe38 <__assert_fail@plt+0x2b7e0>
   3fe1c:	adds	r1, r1, r8
   3fe20:	sub	r3, fp, #1
   3fe24:	bcs	400a4 <__assert_fail@plt+0x2ba4c>
   3fe28:	cmp	r0, r1
   3fe2c:	subhi	fp, fp, #2
   3fe30:	addhi	r1, r1, r8
   3fe34:	bls	400a4 <__assert_fail@plt+0x2ba4c>
   3fe38:	rsb	r2, r0, r1
   3fe3c:	mov	r1, r5
   3fe40:	str	r2, [sp]
   3fe44:	uxth	r7, r7
   3fe48:	mov	r0, r2
   3fe4c:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   3fe50:	ldr	r2, [sp]
   3fe54:	mov	r1, r5
   3fe58:	mov	r9, r0
   3fe5c:	mov	r0, r2
   3fe60:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   3fe64:	mul	sl, sl, r9
   3fe68:	orr	r1, r7, r1, lsl #16
   3fe6c:	cmp	sl, r1
   3fe70:	bls	3fe90 <__assert_fail@plt+0x2b838>
   3fe74:	adds	r8, r1, r8
   3fe78:	sub	r3, r9, #1
   3fe7c:	bcs	3fe8c <__assert_fail@plt+0x2b834>
   3fe80:	cmp	sl, r8
   3fe84:	subhi	r9, r9, #2
   3fe88:	bhi	3fe90 <__assert_fail@plt+0x2b838>
   3fe8c:	mov	r9, r3
   3fe90:	orr	r3, r9, fp, lsl #16
   3fe94:	b	3fd5c <__assert_fail@plt+0x2b704>
   3fe98:	mvn	r6, r6
   3fe9c:	rsbs	r2, r2, #0
   3fea0:	rsc	r3, r3, #0
   3fea4:	b	3fc64 <__assert_fail@plt+0x2b60c>
   3fea8:	lsl	r8, r8, r3
   3feac:	rsb	fp, r3, #32
   3feb0:	lsr	r4, r9, fp
   3feb4:	lsr	fp, r7, fp
   3feb8:	lsr	r5, r8, #16
   3febc:	orr	fp, fp, r9, lsl r3
   3fec0:	mov	r0, r4
   3fec4:	lsl	r7, r7, r3
   3fec8:	mov	r1, r5
   3fecc:	uxth	sl, r8
   3fed0:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   3fed4:	mov	r1, r5
   3fed8:	mov	r3, r0
   3fedc:	mov	r0, r4
   3fee0:	str	r3, [sp]
   3fee4:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   3fee8:	ldr	r3, [sp]
   3feec:	lsr	r2, fp, #16
   3fef0:	mul	r0, sl, r3
   3fef4:	orr	r1, r2, r1, lsl #16
   3fef8:	cmp	r0, r1
   3fefc:	bls	3ff1c <__assert_fail@plt+0x2b8c4>
   3ff00:	adds	r1, r1, r8
   3ff04:	sub	r2, r3, #1
   3ff08:	bcs	400bc <__assert_fail@plt+0x2ba64>
   3ff0c:	cmp	r0, r1
   3ff10:	subhi	r3, r3, #2
   3ff14:	addhi	r1, r1, r8
   3ff18:	bls	400bc <__assert_fail@plt+0x2ba64>
   3ff1c:	rsb	r9, r0, r1
   3ff20:	mov	r1, r5
   3ff24:	str	r3, [sp]
   3ff28:	uxth	fp, fp
   3ff2c:	mov	r0, r9
   3ff30:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   3ff34:	mov	r1, r5
   3ff38:	mov	r4, r0
   3ff3c:	mov	r0, r9
   3ff40:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   3ff44:	mul	r9, sl, r4
   3ff48:	ldr	r3, [sp]
   3ff4c:	orr	r1, fp, r1, lsl #16
   3ff50:	cmp	r9, r1
   3ff54:	bls	3ff78 <__assert_fail@plt+0x2b920>
   3ff58:	adds	r1, r1, r8
   3ff5c:	sub	r2, r4, #1
   3ff60:	bcs	3ff74 <__assert_fail@plt+0x2b91c>
   3ff64:	cmp	r9, r1
   3ff68:	subhi	r4, r4, #2
   3ff6c:	addhi	r1, r1, r8
   3ff70:	bhi	3ff78 <__assert_fail@plt+0x2b920>
   3ff74:	mov	r4, r2
   3ff78:	rsb	r9, r9, r1
   3ff7c:	orr	r4, r4, r3, lsl #16
   3ff80:	b	3fdec <__assert_fail@plt+0x2b794>
   3ff84:	rsb	sl, r5, #32
   3ff88:	lsl	r3, r2, r5
   3ff8c:	lsr	r0, r2, sl
   3ff90:	lsr	r2, ip, sl
   3ff94:	orr	r4, r0, r1, lsl r5
   3ff98:	lsr	sl, r7, sl
   3ff9c:	mov	r0, r2
   3ffa0:	orr	sl, sl, ip, lsl r5
   3ffa4:	lsr	r9, r4, #16
   3ffa8:	str	r3, [sp, #4]
   3ffac:	str	r2, [sp]
   3ffb0:	uxth	fp, r4
   3ffb4:	mov	r1, r9
   3ffb8:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   3ffbc:	ldr	r2, [sp]
   3ffc0:	mov	r1, r9
   3ffc4:	mov	r8, r0
   3ffc8:	mov	r0, r2
   3ffcc:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   3ffd0:	mul	r0, fp, r8
   3ffd4:	lsr	r2, sl, #16
   3ffd8:	orr	r1, r2, r1, lsl #16
   3ffdc:	cmp	r0, r1
   3ffe0:	bls	40000 <__assert_fail@plt+0x2b9a8>
   3ffe4:	adds	r1, r1, r4
   3ffe8:	sub	r2, r8, #1
   3ffec:	bcs	400b4 <__assert_fail@plt+0x2ba5c>
   3fff0:	cmp	r0, r1
   3fff4:	subhi	r8, r8, #2
   3fff8:	addhi	r1, r1, r4
   3fffc:	bls	400b4 <__assert_fail@plt+0x2ba5c>
   40000:	rsb	ip, r0, r1
   40004:	mov	r1, r9
   40008:	str	ip, [sp]
   4000c:	mov	r0, ip
   40010:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   40014:	ldr	ip, [sp]
   40018:	mov	r1, r9
   4001c:	mov	r2, r0
   40020:	mov	r0, ip
   40024:	str	r2, [sp]
   40028:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   4002c:	ldr	r2, [sp]
   40030:	uxth	ip, sl
   40034:	mul	fp, fp, r2
   40038:	orr	ip, ip, r1, lsl #16
   4003c:	cmp	fp, ip
   40040:	bls	40060 <__assert_fail@plt+0x2ba08>
   40044:	adds	ip, ip, r4
   40048:	sub	r1, r2, #1
   4004c:	bcs	400ac <__assert_fail@plt+0x2ba54>
   40050:	cmp	fp, ip
   40054:	subhi	r2, r2, #2
   40058:	addhi	ip, ip, r4
   4005c:	bls	400ac <__assert_fail@plt+0x2ba54>
   40060:	ldr	r0, [sp, #4]
   40064:	orr	r1, r2, r8, lsl #16
   40068:	rsb	fp, fp, ip
   4006c:	umull	r2, r3, r1, r0
   40070:	cmp	fp, r3
   40074:	bcc	40098 <__assert_fail@plt+0x2ba40>
   40078:	movne	r4, #0
   4007c:	moveq	r4, #1
   40080:	cmp	r2, r7, lsl r5
   40084:	movls	r4, #0
   40088:	andhi	r4, r4, #1
   4008c:	cmp	r4, #0
   40090:	moveq	r3, r1
   40094:	beq	3fd5c <__assert_fail@plt+0x2b704>
   40098:	sub	r3, r1, #1
   4009c:	mov	r4, #0
   400a0:	b	3fd5c <__assert_fail@plt+0x2b704>
   400a4:	mov	fp, r3
   400a8:	b	3fe38 <__assert_fail@plt+0x2b7e0>
   400ac:	mov	r2, r1
   400b0:	b	40060 <__assert_fail@plt+0x2ba08>
   400b4:	mov	r8, r2
   400b8:	b	40000 <__assert_fail@plt+0x2b9a8>
   400bc:	mov	r3, r2
   400c0:	b	3ff1c <__assert_fail@plt+0x2b8c4>
   400c4:	cmp	r3, #0
   400c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   400cc:	mov	r6, r0
   400d0:	sub	sp, sp, #12
   400d4:	mov	r5, r1
   400d8:	mov	r7, r0
   400dc:	mov	r4, r2
   400e0:	mov	r8, r1
   400e4:	bne	401c4 <__assert_fail@plt+0x2bb6c>
   400e8:	cmp	r2, r1
   400ec:	bls	40200 <__assert_fail@plt+0x2bba8>
   400f0:	clz	r3, r2
   400f4:	cmp	r3, #0
   400f8:	rsbne	r8, r3, #32
   400fc:	lslne	r4, r2, r3
   40100:	lsrne	r8, r0, r8
   40104:	lslne	r7, r0, r3
   40108:	orrne	r8, r8, r1, lsl r3
   4010c:	lsr	r5, r4, #16
   40110:	uxth	sl, r4
   40114:	mov	r1, r5
   40118:	mov	r0, r8
   4011c:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   40120:	mov	r1, r5
   40124:	mov	r9, r0
   40128:	mov	r0, r8
   4012c:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   40130:	mul	r0, sl, r9
   40134:	lsr	r3, r7, #16
   40138:	orr	r1, r3, r1, lsl #16
   4013c:	cmp	r0, r1
   40140:	bls	40164 <__assert_fail@plt+0x2bb0c>
   40144:	adds	r1, r1, r4
   40148:	sub	r2, r9, #1
   4014c:	bcs	40160 <__assert_fail@plt+0x2bb08>
   40150:	cmp	r0, r1
   40154:	subhi	r9, r9, #2
   40158:	addhi	r1, r1, r4
   4015c:	bhi	40164 <__assert_fail@plt+0x2bb0c>
   40160:	mov	r9, r2
   40164:	rsb	r8, r0, r1
   40168:	mov	r1, r5
   4016c:	uxth	r7, r7
   40170:	mov	r0, r8
   40174:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   40178:	mov	r1, r5
   4017c:	mov	r6, r0
   40180:	mov	r0, r8
   40184:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   40188:	mul	sl, sl, r6
   4018c:	orr	r1, r7, r1, lsl #16
   40190:	cmp	sl, r1
   40194:	bls	401b0 <__assert_fail@plt+0x2bb58>
   40198:	adds	r4, r1, r4
   4019c:	sub	r3, r6, #1
   401a0:	bcs	404ac <__assert_fail@plt+0x2be54>
   401a4:	cmp	sl, r4
   401a8:	subhi	r6, r6, #2
   401ac:	bls	404ac <__assert_fail@plt+0x2be54>
   401b0:	orr	r0, r6, r9, lsl #16
   401b4:	mov	r6, #0
   401b8:	mov	r1, r6
   401bc:	add	sp, sp, #12
   401c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   401c4:	cmp	r3, r1
   401c8:	movhi	r6, #0
   401cc:	movhi	r0, r6
   401d0:	bhi	401b8 <__assert_fail@plt+0x2bb60>
   401d4:	clz	r7, r3
   401d8:	cmp	r7, #0
   401dc:	bne	402dc <__assert_fail@plt+0x2bc84>
   401e0:	cmp	r3, r1
   401e4:	cmpcs	r2, r6
   401e8:	movhi	r6, #0
   401ec:	movls	r6, #1
   401f0:	movls	r0, #1
   401f4:	movls	r6, r7
   401f8:	movhi	r0, r6
   401fc:	b	401b8 <__assert_fail@plt+0x2bb60>
   40200:	cmp	r2, #0
   40204:	bne	40218 <__assert_fail@plt+0x2bbc0>
   40208:	mov	r1, r2
   4020c:	mov	r0, #1
   40210:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   40214:	mov	r4, r0
   40218:	clz	r3, r4
   4021c:	cmp	r3, #0
   40220:	bne	403d8 <__assert_fail@plt+0x2bd80>
   40224:	rsb	r5, r4, r5
   40228:	lsr	r8, r4, #16
   4022c:	uxth	sl, r4
   40230:	mov	r6, #1
   40234:	mov	r1, r8
   40238:	mov	r0, r5
   4023c:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   40240:	mov	r1, r8
   40244:	mov	r9, r0
   40248:	mov	r0, r5
   4024c:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   40250:	mul	r0, sl, r9
   40254:	lsr	r3, r7, #16
   40258:	orr	r1, r3, r1, lsl #16
   4025c:	cmp	r0, r1
   40260:	bls	40280 <__assert_fail@plt+0x2bc28>
   40264:	adds	r1, r1, r4
   40268:	sub	r2, r9, #1
   4026c:	bcs	404b4 <__assert_fail@plt+0x2be5c>
   40270:	cmp	r0, r1
   40274:	subhi	r9, r9, #2
   40278:	addhi	r1, r1, r4
   4027c:	bls	404b4 <__assert_fail@plt+0x2be5c>
   40280:	rsb	fp, r0, r1
   40284:	mov	r1, r8
   40288:	uxth	r7, r7
   4028c:	mov	r0, fp
   40290:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   40294:	mov	r1, r8
   40298:	mov	r5, r0
   4029c:	mov	r0, fp
   402a0:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   402a4:	mul	sl, sl, r5
   402a8:	orr	r1, r7, r1, lsl #16
   402ac:	cmp	sl, r1
   402b0:	bls	402cc <__assert_fail@plt+0x2bc74>
   402b4:	adds	r4, r1, r4
   402b8:	sub	r3, r5, #1
   402bc:	bcs	404bc <__assert_fail@plt+0x2be64>
   402c0:	cmp	sl, r4
   402c4:	subhi	r5, r5, #2
   402c8:	bls	404bc <__assert_fail@plt+0x2be64>
   402cc:	orr	r0, r5, r9, lsl #16
   402d0:	mov	r1, r6
   402d4:	add	sp, sp, #12
   402d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   402dc:	rsb	r1, r7, #32
   402e0:	lsl	r0, r2, r7
   402e4:	lsr	r2, r2, r1
   402e8:	lsr	fp, r5, r1
   402ec:	orr	r8, r2, r3, lsl r7
   402f0:	lsr	r1, r6, r1
   402f4:	str	r0, [sp, #4]
   402f8:	orr	r5, r1, r5, lsl r7
   402fc:	lsr	r9, r8, #16
   40300:	mov	r0, fp
   40304:	uxth	sl, r8
   40308:	mov	r1, r9
   4030c:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   40310:	mov	r1, r9
   40314:	mov	r4, r0
   40318:	mov	r0, fp
   4031c:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   40320:	mul	r0, sl, r4
   40324:	lsr	ip, r5, #16
   40328:	orr	r1, ip, r1, lsl #16
   4032c:	cmp	r0, r1
   40330:	bls	40344 <__assert_fail@plt+0x2bcec>
   40334:	adds	r1, r1, r8
   40338:	sub	r2, r4, #1
   4033c:	bcc	404d8 <__assert_fail@plt+0x2be80>
   40340:	mov	r4, r2
   40344:	rsb	ip, r0, r1
   40348:	mov	r1, r9
   4034c:	str	ip, [sp]
   40350:	uxth	r5, r5
   40354:	mov	r0, ip
   40358:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   4035c:	ldr	ip, [sp]
   40360:	mov	r1, r9
   40364:	mov	fp, r0
   40368:	mov	r0, ip
   4036c:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   40370:	mul	sl, sl, fp
   40374:	orr	r1, r5, r1, lsl #16
   40378:	cmp	sl, r1
   4037c:	bls	40390 <__assert_fail@plt+0x2bd38>
   40380:	adds	r1, r1, r8
   40384:	sub	r2, fp, #1
   40388:	bcc	404c4 <__assert_fail@plt+0x2be6c>
   4038c:	mov	fp, r2
   40390:	ldr	r3, [sp, #4]
   40394:	orr	r0, fp, r4, lsl #16
   40398:	rsb	sl, sl, r1
   4039c:	umull	r4, r5, r0, r3
   403a0:	cmp	sl, r5
   403a4:	bcc	403c4 <__assert_fail@plt+0x2bd6c>
   403a8:	movne	r3, #0
   403ac:	moveq	r3, #1
   403b0:	cmp	r4, r6, lsl r7
   403b4:	movls	r6, #0
   403b8:	andhi	r6, r3, #1
   403bc:	cmp	r6, #0
   403c0:	beq	401b8 <__assert_fail@plt+0x2bb60>
   403c4:	mov	r6, #0
   403c8:	sub	r0, r0, #1
   403cc:	mov	r1, r6
   403d0:	add	sp, sp, #12
   403d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   403d8:	lsl	r4, r4, r3
   403dc:	rsb	r9, r3, #32
   403e0:	lsr	r2, r5, r9
   403e4:	lsr	r9, r6, r9
   403e8:	lsr	r8, r4, #16
   403ec:	orr	r9, r9, r5, lsl r3
   403f0:	mov	r0, r2
   403f4:	lsl	r7, r6, r3
   403f8:	mov	r1, r8
   403fc:	str	r2, [sp]
   40400:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   40404:	ldr	r2, [sp]
   40408:	mov	r1, r8
   4040c:	uxth	sl, r4
   40410:	mov	fp, r0
   40414:	mov	r0, r2
   40418:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   4041c:	mul	r0, sl, fp
   40420:	lsr	r3, r9, #16
   40424:	orr	r1, r3, r1, lsl #16
   40428:	cmp	r0, r1
   4042c:	bls	4044c <__assert_fail@plt+0x2bdf4>
   40430:	adds	r1, r1, r4
   40434:	sub	r3, fp, #1
   40438:	bcs	404ec <__assert_fail@plt+0x2be94>
   4043c:	cmp	r0, r1
   40440:	subhi	fp, fp, #2
   40444:	addhi	r1, r1, r4
   40448:	bls	404ec <__assert_fail@plt+0x2be94>
   4044c:	rsb	r5, r0, r1
   40450:	mov	r1, r8
   40454:	uxth	r9, r9
   40458:	mov	r0, r5
   4045c:	bl	3f728 <__assert_fail@plt+0x2b0d0>
   40460:	mov	r1, r8
   40464:	mov	r6, r0
   40468:	mov	r0, r5
   4046c:	bl	3f914 <__assert_fail@plt+0x2b2bc>
   40470:	mul	r5, sl, r6
   40474:	orr	r1, r9, r1, lsl #16
   40478:	cmp	r5, r1
   4047c:	bls	404a0 <__assert_fail@plt+0x2be48>
   40480:	adds	r1, r1, r4
   40484:	sub	r3, r6, #1
   40488:	bcs	4049c <__assert_fail@plt+0x2be44>
   4048c:	cmp	r5, r1
   40490:	subhi	r6, r6, #2
   40494:	addhi	r1, r1, r4
   40498:	bhi	404a0 <__assert_fail@plt+0x2be48>
   4049c:	mov	r6, r3
   404a0:	rsb	r5, r5, r1
   404a4:	orr	r6, r6, fp, lsl #16
   404a8:	b	40234 <__assert_fail@plt+0x2bbdc>
   404ac:	mov	r6, r3
   404b0:	b	401b0 <__assert_fail@plt+0x2bb58>
   404b4:	mov	r9, r2
   404b8:	b	40280 <__assert_fail@plt+0x2bc28>
   404bc:	mov	r5, r3
   404c0:	b	402cc <__assert_fail@plt+0x2bc74>
   404c4:	cmp	sl, r1
   404c8:	subhi	fp, fp, #2
   404cc:	addhi	r1, r1, r8
   404d0:	bhi	40390 <__assert_fail@plt+0x2bd38>
   404d4:	b	4038c <__assert_fail@plt+0x2bd34>
   404d8:	cmp	r0, r1
   404dc:	subhi	r4, r4, #2
   404e0:	addhi	r1, r1, r8
   404e4:	bhi	40344 <__assert_fail@plt+0x2bcec>
   404e8:	b	40340 <__assert_fail@plt+0x2bce8>
   404ec:	mov	fp, r3
   404f0:	b	4044c <__assert_fail@plt+0x2bdf4>
   404f4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   404f8:	mov	r7, r0
   404fc:	ldr	r6, [pc, #76]	; 40550 <__assert_fail@plt+0x2bef8>
   40500:	mov	r8, r1
   40504:	ldr	r5, [pc, #72]	; 40554 <__assert_fail@plt+0x2befc>
   40508:	mov	r9, r2
   4050c:	add	r6, pc, r6
   40510:	bl	13930 <_init@@Base>
   40514:	add	r5, pc, r5
   40518:	rsb	r6, r5, r6
   4051c:	asrs	r6, r6, #2
   40520:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   40524:	sub	r5, r5, #4
   40528:	mov	r4, #0
   4052c:	add	r4, r4, #1
   40530:	ldr	r3, [r5, #4]!
   40534:	mov	r0, r7
   40538:	mov	r1, r8
   4053c:	mov	r2, r9
   40540:	blx	r3
   40544:	cmp	r4, r6
   40548:	bne	4052c <__assert_fail@plt+0x2bed4>
   4054c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   40550:			; <UNDEFINED> instruction: 0x0001a9bc
   40554:			; <UNDEFINED> instruction: 0x0001a9b0
   40558:	bx	lr
   4055c:	ldr	r3, [pc, #28]	; 40580 <__assert_fail@plt+0x2bf28>
   40560:	mov	r1, #0
   40564:	ldr	r2, [pc, #24]	; 40584 <__assert_fail@plt+0x2bf2c>
   40568:	add	r3, pc, r3
   4056c:	ldr	r3, [r3, r2]
   40570:	cmp	r3, #0
   40574:	ldrne	r2, [r3]
   40578:	moveq	r2, r3
   4057c:	b	14184 <__cxa_atexit@plt>
   40580:	muleq	r1, r0, sl
   40584:	andeq	r0, r0, ip, ror #8

Disassembly of section .fini:

00040588 <_fini@@Base>:
   40588:	push	{r3, lr}
   4058c:	pop	{r3, pc}
