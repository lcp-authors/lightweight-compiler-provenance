
centos-preinstalled/nl-tctree-list:     file format elf32-littlearm


Disassembly of section .init:

00010ac4 <.init>:
   10ac4:	push	{r3, lr}
   10ac8:	bl	10dc4 <rtnl_cls_alloc_cache@plt+0x178>
   10acc:	pop	{r3, pc}

Disassembly of section .plt:

00010ad0 <abort@plt-0x14>:
   10ad0:	push	{lr}		; (str lr, [sp, #-4]!)
   10ad4:	ldr	lr, [pc, #4]	; 10ae0 <abort@plt-0x4>
   10ad8:	add	lr, pc, lr
   10adc:	ldr	pc, [lr, #8]!
   10ae0:	andeq	r1, r1, r0, lsr #10

00010ae4 <abort@plt>:
   10ae4:	add	ip, pc, #0, 12
   10ae8:	add	ip, ip, #69632	; 0x11000
   10aec:	ldr	pc, [ip, #1312]!	; 0x520

00010af0 <nl_cache_foreach_filter@plt>:
   10af0:	add	ip, pc, #0, 12
   10af4:	add	ip, ip, #69632	; 0x11000
   10af8:	ldr	pc, [ip, #1304]!	; 0x518

00010afc <__libc_start_main@plt>:
   10afc:	add	ip, pc, #0, 12
   10b00:	add	ip, ip, #69632	; 0x11000
   10b04:	ldr	pc, [ip, #1296]!	; 0x510

00010b08 <rtnl_class_leaf_qdisc@plt>:
   10b08:	add	ip, pc, #0, 12
   10b0c:	add	ip, ip, #69632	; 0x11000
   10b10:	ldr	pc, [ip, #1288]!	; 0x508

00010b14 <rtnl_tc_set_parent@plt>:
   10b14:	add	ip, pc, #0, 12
   10b18:	add	ip, ip, #69632	; 0x11000
   10b1c:	ldr	pc, [ip, #1280]!	; 0x500

00010b20 <rtnl_tc_set_ifindex@plt>:
   10b20:	add	ip, pc, #0, 12
   10b24:	add	ip, ip, #69632	; 0x11000
   10b28:	ldr	pc, [ip, #1272]!	; 0x4f8

00010b2c <__gmon_start__@plt>:
   10b2c:	add	ip, pc, #0, 12
   10b30:	add	ip, ip, #69632	; 0x11000
   10b34:	ldr	pc, [ip, #1264]!	; 0x4f0

00010b38 <nl_cli_alloc_cache@plt>:
   10b38:	add	ip, pc, #0, 12
   10b3c:	add	ip, ip, #69632	; 0x11000
   10b40:	ldr	pc, [ip, #1256]!	; 0x4e8

00010b44 <nl_cli_print_version@plt>:
   10b44:	add	ip, pc, #0, 12
   10b48:	add	ip, ip, #69632	; 0x11000
   10b4c:	ldr	pc, [ip, #1248]!	; 0x4e0

00010b50 <nl_cli_alloc_socket@plt>:
   10b50:	add	ip, pc, #0, 12
   10b54:	add	ip, ip, #69632	; 0x11000
   10b58:	ldr	pc, [ip, #1240]!	; 0x4d8

00010b5c <nl_cache_dump@plt>:
   10b5c:	add	ip, pc, #0, 12
   10b60:	add	ip, ip, #69632	; 0x11000
   10b64:	ldr	pc, [ip, #1232]!	; 0x4d0

00010b68 <rtnl_qdisc_alloc_cache@plt>:
   10b68:	add	ip, pc, #0, 12
   10b6c:	add	ip, ip, #69632	; 0x11000
   10b70:	ldr	pc, [ip, #1224]!	; 0x4c8

00010b74 <rtnl_tc_get_handle@plt>:
   10b74:	add	ip, pc, #0, 12
   10b78:	add	ip, ip, #69632	; 0x11000
   10b7c:	ldr	pc, [ip, #1216]!	; 0x4c0

00010b80 <rtnl_class_put@plt>:
   10b80:	add	ip, pc, #0, 12
   10b84:	add	ip, ip, #69632	; 0x11000
   10b88:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b8c <getopt_long@plt>:
   10b8c:	add	ip, pc, #0, 12
   10b90:	add	ip, ip, #69632	; 0x11000
   10b94:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b98 <rtnl_tc_get_ifindex@plt>:
   10b98:	add	ip, pc, #0, 12
   10b9c:	add	ip, ip, #69632	; 0x11000
   10ba0:	ldr	pc, [ip, #1192]!	; 0x4a8

00010ba4 <nl_cli_parse_dumptype@plt>:
   10ba4:	add	ip, pc, #0, 12
   10ba8:	add	ip, ip, #69632	; 0x11000
   10bac:	ldr	pc, [ip, #1184]!	; 0x4a0

00010bb0 <nl_cache_free@plt>:
   10bb0:	add	ip, pc, #0, 12
   10bb4:	add	ip, ip, #69632	; 0x11000
   10bb8:	ldr	pc, [ip, #1176]!	; 0x498

00010bbc <rtnl_qdisc_get_by_parent@plt>:
   10bbc:	add	ip, pc, #0, 12
   10bc0:	add	ip, ip, #69632	; 0x11000
   10bc4:	ldr	pc, [ip, #1168]!	; 0x490

00010bc8 <nl_cli_link_alloc_cache@plt>:
   10bc8:	add	ip, pc, #0, 12
   10bcc:	add	ip, ip, #69632	; 0x11000
   10bd0:	ldr	pc, [ip, #1160]!	; 0x488

00010bd4 <__stack_chk_fail@plt>:
   10bd4:	add	ip, pc, #0, 12
   10bd8:	add	ip, ip, #69632	; 0x11000
   10bdc:	ldr	pc, [ip, #1152]!	; 0x480

00010be0 <nl_cli_class_alloc@plt>:
   10be0:	add	ip, pc, #0, 12
   10be4:	add	ip, ip, #69632	; 0x11000
   10be8:	ldr	pc, [ip, #1144]!	; 0x478

00010bec <nl_object_dump@plt>:
   10bec:	add	ip, pc, #0, 12
   10bf0:	add	ip, ip, #69632	; 0x11000
   10bf4:	ldr	pc, [ip, #1136]!	; 0x470

00010bf8 <rtnl_link_get_ifindex@plt>:
   10bf8:	add	ip, pc, #0, 12
   10bfc:	add	ip, ip, #69632	; 0x11000
   10c00:	ldr	pc, [ip, #1128]!	; 0x468

00010c04 <rtnl_qdisc_put@plt>:
   10c04:	add	ip, pc, #0, 12
   10c08:	add	ip, ip, #69632	; 0x11000
   10c0c:	ldr	pc, [ip, #1120]!	; 0x460

00010c10 <puts@plt>:
   10c10:	add	ip, pc, #0, 12
   10c14:	add	ip, ip, #69632	; 0x11000
   10c18:	ldr	pc, [ip, #1112]!	; 0x458

00010c1c <rtnl_class_alloc_cache@plt>:
   10c1c:	add	ip, pc, #0, 12
   10c20:	add	ip, ip, #69632	; 0x11000
   10c24:	ldr	pc, [ip, #1104]!	; 0x450

00010c28 <nl_cli_connect@plt>:
   10c28:	add	ip, pc, #0, 12
   10c2c:	add	ip, ip, #69632	; 0x11000
   10c30:	ldr	pc, [ip, #1096]!	; 0x448

00010c34 <nl_cache_foreach@plt>:
   10c34:	add	ip, pc, #0, 12
   10c38:	add	ip, ip, #69632	; 0x11000
   10c3c:	ldr	pc, [ip, #1088]!	; 0x440

00010c40 <exit@plt>:
   10c40:	add	ip, pc, #0, 12
   10c44:	add	ip, ip, #69632	; 0x11000
   10c48:	ldr	pc, [ip, #1080]!	; 0x438

00010c4c <rtnl_cls_alloc_cache@plt>:
   10c4c:	add	ip, pc, #0, 12
   10c50:	add	ip, ip, #69632	; 0x11000
   10c54:	ldr	pc, [ip, #1072]!	; 0x430

Disassembly of section .text:

00010c58 <.text>:
   10c58:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10c5c:	movw	r9, #8456	; 0x2108
   10c60:	movt	r9, #2
   10c64:	sub	sp, sp, #28
   10c68:	mov	r7, r1
   10c6c:	mov	r8, r0
   10c70:	ldr	r3, [r9]
   10c74:	movw	r4, #8472	; 0x2118
   10c78:	movt	r4, #2
   10c7c:	movw	sl, #8464	; 0x2110
   10c80:	add	r6, sp, #16
   10c84:	movt	sl, #2
   10c88:	str	r3, [sp, #20]
   10c8c:	bl	10b50 <nl_cli_alloc_socket@plt>
   10c90:	mov	r1, #0
   10c94:	mov	r5, r1
   10c98:	str	r0, [r4, #4]
   10c9c:	bl	10c28 <nl_cli_connect@plt>
   10ca0:	ldr	r0, [r4, #4]
   10ca4:	bl	10bc8 <nl_cli_link_alloc_cache@plt>
   10ca8:	movw	r1, #4564	; 0x11d4
   10cac:	movw	r2, #2920	; 0xb68
   10cb0:	movt	r1, #1
   10cb4:	movt	r2, #1
   10cb8:	str	r0, [sp, #12]
   10cbc:	ldr	r0, [r4, #4]
   10cc0:	bl	10b38 <nl_cli_alloc_cache@plt>
   10cc4:	movw	r2, #8460	; 0x210c
   10cc8:	movt	r2, #2
   10ccc:	movw	r3, #8336	; 0x2090
   10cd0:	movt	r3, #2
   10cd4:	ldr	r2, [r2]
   10cd8:	mov	fp, r3
   10cdc:	str	r2, [r3, #28]
   10ce0:	str	r0, [r4, #12]
   10ce4:	str	r6, [sp]
   10ce8:	movw	r2, #4588	; 0x11ec
   10cec:	mov	r0, r8
   10cf0:	movt	r2, #1
   10cf4:	mov	r1, r7
   10cf8:	ldr	r3, [pc, #132]	; 10d84 <rtnl_cls_alloc_cache@plt+0x138>
   10cfc:	str	r5, [sp, #16]
   10d00:	bl	10b8c <getopt_long@plt>
   10d04:	cmn	r0, #1
   10d08:	beq	10d50 <rtnl_cls_alloc_cache@plt+0x104>
   10d0c:	cmp	r0, #104	; 0x68
   10d10:	beq	10d3c <rtnl_cls_alloc_cache@plt+0xf0>
   10d14:	cmp	r0, #118	; 0x76
   10d18:	beq	10d34 <rtnl_cls_alloc_cache@plt+0xe8>
   10d1c:	cmp	r0, #102	; 0x66
   10d20:	bne	10ce4 <rtnl_cls_alloc_cache@plt+0x98>
   10d24:	ldr	r0, [sl]
   10d28:	bl	10ba4 <nl_cli_parse_dumptype@plt>
   10d2c:	str	r0, [fp]
   10d30:	b	10ce4 <rtnl_cls_alloc_cache@plt+0x98>
   10d34:	bl	10b44 <nl_cli_print_version@plt>
   10d38:	b	10ce4 <rtnl_cls_alloc_cache@plt+0x98>
   10d3c:	movw	r0, #4596	; 0x11f4
   10d40:	movt	r0, #1
   10d44:	bl	10c10 <puts@plt>
   10d48:	mov	r0, #0
   10d4c:	bl	10c40 <exit@plt>
   10d50:	ldr	r0, [sp, #12]
   10d54:	mov	r2, #0
   10d58:	movw	r1, #4240	; 0x1090
   10d5c:	movt	r1, #1
   10d60:	bl	10c34 <nl_cache_foreach@plt>
   10d64:	ldr	r2, [sp, #20]
   10d68:	ldr	r3, [r9]
   10d6c:	mov	r0, #0
   10d70:	cmp	r2, r3
   10d74:	bne	10d80 <rtnl_cls_alloc_cache@plt+0x134>
   10d78:	add	sp, sp, #28
   10d7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10d80:	bl	10bd4 <__stack_chk_fail@plt>
   10d84:	andeq	r2, r2, r4, asr #1
   10d88:	mov	fp, #0
   10d8c:	mov	lr, #0
   10d90:	pop	{r1}		; (ldr r1, [sp], #4)
   10d94:	mov	r2, sp
   10d98:	push	{r2}		; (str r2, [sp, #-4]!)
   10d9c:	push	{r0}		; (str r0, [sp, #-4]!)
   10da0:	ldr	ip, [pc, #16]	; 10db8 <rtnl_cls_alloc_cache@plt+0x16c>
   10da4:	push	{ip}		; (str ip, [sp, #-4]!)
   10da8:	ldr	r0, [pc, #12]	; 10dbc <rtnl_cls_alloc_cache@plt+0x170>
   10dac:	ldr	r3, [pc, #12]	; 10dc0 <rtnl_cls_alloc_cache@plt+0x174>
   10db0:	bl	10afc <__libc_start_main@plt>
   10db4:	bl	10ae4 <abort@plt>
   10db8:	andeq	r1, r1, r0, asr #3
   10dbc:	andeq	r0, r1, r8, asr ip
   10dc0:	andeq	r1, r1, ip, asr r1
   10dc4:	ldr	r3, [pc, #20]	; 10de0 <rtnl_cls_alloc_cache@plt+0x194>
   10dc8:	ldr	r2, [pc, #20]	; 10de4 <rtnl_cls_alloc_cache@plt+0x198>
   10dcc:	add	r3, pc, r3
   10dd0:	ldr	r2, [r3, r2]
   10dd4:	cmp	r2, #0
   10dd8:	bxeq	lr
   10ddc:	b	10b2c <__gmon_start__@plt>
   10de0:	andeq	r1, r1, ip, lsr #4
   10de4:	andeq	r0, r0, r8, lsl #1
   10de8:	push	{r3, lr}
   10dec:	movw	r0, #8452	; 0x2104
   10df0:	ldr	r3, [pc, #36]	; 10e1c <rtnl_cls_alloc_cache@plt+0x1d0>
   10df4:	movt	r0, #2
   10df8:	rsb	r3, r0, r3
   10dfc:	cmp	r3, #6
   10e00:	popls	{r3, pc}
   10e04:	movw	r3, #0
   10e08:	movt	r3, #0
   10e0c:	cmp	r3, #0
   10e10:	popeq	{r3, pc}
   10e14:	blx	r3
   10e18:	pop	{r3, pc}
   10e1c:	andeq	r2, r2, r7, lsl #2
   10e20:	push	{r3, lr}
   10e24:	movw	r0, #8452	; 0x2104
   10e28:	movw	r3, #8452	; 0x2104
   10e2c:	movt	r0, #2
   10e30:	movt	r3, #2
   10e34:	rsb	r3, r0, r3
   10e38:	asr	r3, r3, #2
   10e3c:	add	r3, r3, r3, lsr #31
   10e40:	asrs	r1, r3, #1
   10e44:	popeq	{r3, pc}
   10e48:	movw	r2, #0
   10e4c:	movt	r2, #0
   10e50:	cmp	r2, #0
   10e54:	popeq	{r3, pc}
   10e58:	blx	r2
   10e5c:	pop	{r3, pc}
   10e60:	push	{r4, lr}
   10e64:	movw	r4, #8468	; 0x2114
   10e68:	movt	r4, #2
   10e6c:	ldrb	r3, [r4]
   10e70:	cmp	r3, #0
   10e74:	popne	{r4, pc}
   10e78:	bl	10de8 <rtnl_cls_alloc_cache@plt+0x19c>
   10e7c:	mov	r3, #1
   10e80:	strb	r3, [r4]
   10e84:	pop	{r4, pc}
   10e88:	movw	r0, #7868	; 0x1ebc
   10e8c:	movt	r0, #2
   10e90:	push	{r3, lr}
   10e94:	ldr	r3, [r0]
   10e98:	cmp	r3, #0
   10e9c:	beq	10eb4 <rtnl_cls_alloc_cache@plt+0x268>
   10ea0:	movw	r3, #0
   10ea4:	movt	r3, #0
   10ea8:	cmp	r3, #0
   10eac:	beq	10eb4 <rtnl_cls_alloc_cache@plt+0x268>
   10eb0:	blx	r3
   10eb4:	pop	{r3, lr}
   10eb8:	b	10e20 <rtnl_cls_alloc_cache@plt+0x1d4>
   10ebc:	push	{r4, r5, r6, lr}
   10ec0:	mov	r6, r1
   10ec4:	mov	r5, r0
   10ec8:	bl	10be0 <nl_cli_class_alloc@plt>
   10ecc:	mov	r4, r0
   10ed0:	mov	r0, r5
   10ed4:	bl	10b74 <rtnl_tc_get_handle@plt>
   10ed8:	mov	r1, r0
   10edc:	mov	r0, r4
   10ee0:	bl	10b14 <rtnl_tc_set_parent@plt>
   10ee4:	mov	r0, r5
   10ee8:	bl	10b98 <rtnl_tc_get_ifindex@plt>
   10eec:	mov	r1, r0
   10ef0:	mov	r0, r4
   10ef4:	bl	10b20 <rtnl_tc_set_ifindex@plt>
   10ef8:	movw	r0, #8472	; 0x2118
   10efc:	movt	r0, #2
   10f00:	mov	r3, r6
   10f04:	mov	r1, r4
   10f08:	movw	r2, #4040	; 0xfc8
   10f0c:	ldr	r0, [r0]
   10f10:	movt	r2, #1
   10f14:	bl	10af0 <nl_cache_foreach_filter@plt>
   10f18:	mov	r0, r4
   10f1c:	pop	{r4, r5, r6, lr}
   10f20:	b	10b80 <rtnl_class_put@plt>
   10f24:	push	{r4, r5, r6, r7, r8, r9, lr}
   10f28:	movw	r5, #8456	; 0x2108
   10f2c:	movt	r5, #2
   10f30:	sub	sp, sp, #12
   10f34:	mov	r7, r1
   10f38:	mov	r6, r0
   10f3c:	ldr	r3, [r5]
   10f40:	add	r8, r1, #2
   10f44:	movw	r4, #8336	; 0x2090
   10f48:	movt	r4, #2
   10f4c:	str	r3, [sp, #4]
   10f50:	bl	10b74 <rtnl_tc_get_handle@plt>
   10f54:	mov	r1, r4
   10f58:	str	r7, [r4, #4]
   10f5c:	mov	r9, r0
   10f60:	mov	r0, r6
   10f64:	bl	10bec <nl_object_dump@plt>
   10f68:	mov	r0, r6
   10f6c:	mov	r1, r8
   10f70:	bl	10ebc <rtnl_cls_alloc_cache@plt+0x270>
   10f74:	movw	ip, #8472	; 0x2118
   10f78:	movt	ip, #2
   10f7c:	mov	r2, r9
   10f80:	mov	r3, sp
   10f84:	ldmib	ip, {r0, r1}
   10f88:	bl	10c4c <rtnl_cls_alloc_cache@plt>
   10f8c:	cmp	r0, #0
   10f90:	blt	10fac <rtnl_cls_alloc_cache@plt+0x360>
   10f94:	ldr	r0, [sp]
   10f98:	mov	r1, r4
   10f9c:	str	r8, [r4, #4]
   10fa0:	bl	10b5c <nl_cache_dump@plt>
   10fa4:	ldr	r0, [sp]
   10fa8:	bl	10bb0 <nl_cache_free@plt>
   10fac:	ldr	r2, [sp, #4]
   10fb0:	ldr	r3, [r5]
   10fb4:	cmp	r2, r3
   10fb8:	bne	10fc4 <rtnl_cls_alloc_cache@plt+0x378>
   10fbc:	add	sp, sp, #12
   10fc0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   10fc4:	bl	10bd4 <__stack_chk_fail@plt>
   10fc8:	push	{r4, r5, r6, r7, r8, r9, lr}
   10fcc:	movw	r6, #8456	; 0x2108
   10fd0:	movt	r6, #2
   10fd4:	sub	sp, sp, #12
   10fd8:	mov	r8, r1
   10fdc:	mov	r7, r0
   10fe0:	ldr	r3, [r6]
   10fe4:	movw	r5, #8336	; 0x2090
   10fe8:	movt	r5, #2
   10fec:	movw	r4, #8472	; 0x2118
   10ff0:	movt	r4, #2
   10ff4:	str	r3, [sp, #4]
   10ff8:	bl	10b74 <rtnl_tc_get_handle@plt>
   10ffc:	mov	r1, r5
   11000:	str	r8, [r5, #4]
   11004:	add	r8, r8, #2
   11008:	mov	r9, r0
   1100c:	mov	r0, r7
   11010:	bl	10bec <nl_object_dump@plt>
   11014:	ldr	r1, [r4, #12]
   11018:	mov	r0, r7
   1101c:	bl	10b08 <rtnl_class_leaf_qdisc@plt>
   11020:	cmp	r0, #0
   11024:	beq	11030 <rtnl_cls_alloc_cache@plt+0x3e4>
   11028:	mov	r1, r8
   1102c:	bl	10f24 <rtnl_cls_alloc_cache@plt+0x2d8>
   11030:	mov	r0, r7
   11034:	mov	r1, r8
   11038:	bl	10ebc <rtnl_cls_alloc_cache@plt+0x270>
   1103c:	mov	r2, r9
   11040:	ldr	r0, [r4, #4]
   11044:	mov	r3, sp
   11048:	ldr	r1, [r4, #8]
   1104c:	bl	10c4c <rtnl_cls_alloc_cache@plt>
   11050:	cmp	r0, #0
   11054:	blt	11074 <rtnl_cls_alloc_cache@plt+0x428>
   11058:	ldr	r0, [sp]
   1105c:	movw	r1, #8336	; 0x2090
   11060:	movt	r1, #2
   11064:	str	r8, [r5, #4]
   11068:	bl	10b5c <nl_cache_dump@plt>
   1106c:	ldr	r0, [sp]
   11070:	bl	10bb0 <nl_cache_free@plt>
   11074:	ldr	r2, [sp, #4]
   11078:	ldr	r3, [r6]
   1107c:	cmp	r2, r3
   11080:	bne	1108c <rtnl_cls_alloc_cache@plt+0x440>
   11084:	add	sp, sp, #12
   11088:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1108c:	bl	10bd4 <__stack_chk_fail@plt>
   11090:	push	{r3, r4, r5, lr}
   11094:	mov	r5, r0
   11098:	bl	10bf8 <rtnl_link_get_ifindex@plt>
   1109c:	movw	r4, #8472	; 0x2118
   110a0:	movw	r3, #8336	; 0x2090
   110a4:	movt	r4, #2
   110a8:	movt	r3, #2
   110ac:	mov	r2, #0
   110b0:	mov	r1, r3
   110b4:	str	r2, [r3, #4]
   110b8:	str	r0, [r4, #8]
   110bc:	mov	r0, r5
   110c0:	bl	10bec <nl_object_dump@plt>
   110c4:	ldmib	r4, {r0, r1}
   110c8:	mov	r2, r4
   110cc:	bl	10c1c <rtnl_class_alloc_cache@plt>
   110d0:	cmp	r0, #0
   110d4:	poplt	{r3, r4, r5, pc}
   110d8:	ldr	r0, [r4, #12]
   110dc:	mvn	r2, #0
   110e0:	ldr	r1, [r4, #8]
   110e4:	bl	10bbc <rtnl_qdisc_get_by_parent@plt>
   110e8:	subs	r5, r0, #0
   110ec:	beq	11100 <rtnl_cls_alloc_cache@plt+0x4b4>
   110f0:	mov	r1, #2
   110f4:	bl	10f24 <rtnl_cls_alloc_cache@plt+0x2d8>
   110f8:	mov	r0, r5
   110fc:	bl	10c04 <rtnl_qdisc_put@plt>
   11100:	ldr	r0, [r4, #12]
   11104:	mov	r2, #0
   11108:	ldr	r1, [r4, #8]
   1110c:	bl	10bbc <rtnl_qdisc_get_by_parent@plt>
   11110:	subs	r5, r0, #0
   11114:	beq	11128 <rtnl_cls_alloc_cache@plt+0x4dc>
   11118:	mov	r1, #2
   1111c:	bl	10f24 <rtnl_cls_alloc_cache@plt+0x2d8>
   11120:	mov	r0, r5
   11124:	bl	10c04 <rtnl_qdisc_put@plt>
   11128:	ldr	r0, [r4, #12]
   1112c:	mvn	r2, #14
   11130:	ldr	r1, [r4, #8]
   11134:	bl	10bbc <rtnl_qdisc_get_by_parent@plt>
   11138:	subs	r5, r0, #0
   1113c:	beq	11150 <rtnl_cls_alloc_cache@plt+0x504>
   11140:	mov	r1, #2
   11144:	bl	10f24 <rtnl_cls_alloc_cache@plt+0x2d8>
   11148:	mov	r0, r5
   1114c:	bl	10c04 <rtnl_qdisc_put@plt>
   11150:	ldr	r0, [r4]
   11154:	pop	{r3, r4, r5, lr}
   11158:	b	10bb0 <nl_cache_free@plt>
   1115c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11160:	mov	r7, r0
   11164:	ldr	r6, [pc, #76]	; 111b8 <rtnl_cls_alloc_cache@plt+0x56c>
   11168:	mov	r8, r1
   1116c:	ldr	r5, [pc, #72]	; 111bc <rtnl_cls_alloc_cache@plt+0x570>
   11170:	mov	r9, r2
   11174:	add	r6, pc, r6
   11178:	bl	10ac4 <abort@plt-0x20>
   1117c:	add	r5, pc, r5
   11180:	rsb	r6, r5, r6
   11184:	asrs	r6, r6, #2
   11188:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1118c:	sub	r5, r5, #4
   11190:	mov	r4, #0
   11194:	add	r4, r4, #1
   11198:	ldr	r3, [r5, #4]!
   1119c:	mov	r0, r7
   111a0:	mov	r1, r8
   111a4:	mov	r2, r9
   111a8:	blx	r3
   111ac:	cmp	r4, r6
   111b0:	bne	11194 <rtnl_cls_alloc_cache@plt+0x548>
   111b4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   111b8:	andeq	r0, r1, ip, lsr sp
   111bc:	andeq	r0, r1, r0, lsr sp
   111c0:	bx	lr

Disassembly of section .fini:

000111c4 <.fini>:
   111c4:	push	{r3, lr}
   111c8:	pop	{r3, pc}
