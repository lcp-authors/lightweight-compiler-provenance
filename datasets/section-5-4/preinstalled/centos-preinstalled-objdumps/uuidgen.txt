
centos-preinstalled/uuidgen:     file format elf32-littlearm


Disassembly of section .init:

000108b4 <.init>:
   108b4:	push	{r3, lr}
   108b8:	bl	10c38 <abort@plt+0x238>
   108bc:	pop	{r3, pc}

Disassembly of section .plt:

000108c0 <uuid_generate_random@plt-0x14>:
   108c0:	push	{lr}		; (str lr, [sp, #-4]!)
   108c4:	ldr	lr, [pc, #4]	; 108d0 <uuid_generate_random@plt-0x4>
   108c8:	add	lr, pc, lr
   108cc:	ldr	pc, [lr, #8]!
   108d0:	andeq	r1, r1, r0, lsr r7

000108d4 <uuid_generate_random@plt>:
   108d4:	add	ip, pc, #0, 12
   108d8:	add	ip, ip, #69632	; 0x11000
   108dc:	ldr	pc, [ip, #1840]!	; 0x730

000108e0 <uuid_unparse@plt>:
   108e0:	add	ip, pc, #0, 12
   108e4:	add	ip, ip, #69632	; 0x11000
   108e8:	ldr	pc, [ip, #1832]!	; 0x728

000108ec <ferror@plt>:
   108ec:	add	ip, pc, #0, 12
   108f0:	add	ip, ip, #69632	; 0x11000
   108f4:	ldr	pc, [ip, #1824]!	; 0x720

000108f8 <_exit@plt>:
   108f8:	add	ip, pc, #0, 12
   108fc:	add	ip, ip, #69632	; 0x11000
   10900:	ldr	pc, [ip, #1816]!	; 0x718

00010904 <dcgettext@plt>:
   10904:	add	ip, pc, #0, 12
   10908:	add	ip, ip, #69632	; 0x11000
   1090c:	ldr	pc, [ip, #1808]!	; 0x710

00010910 <__stack_chk_fail@plt>:
   10910:	add	ip, pc, #0, 12
   10914:	add	ip, ip, #69632	; 0x11000
   10918:	ldr	pc, [ip, #1800]!	; 0x708

0001091c <textdomain@plt>:
   1091c:	add	ip, pc, #0, 12
   10920:	add	ip, ip, #69632	; 0x11000
   10924:	ldr	pc, [ip, #1792]!	; 0x700

00010928 <__fpending@plt>:
   10928:	add	ip, pc, #0, 12
   1092c:	add	ip, ip, #69632	; 0x11000
   10930:	ldr	pc, [ip, #1784]!	; 0x6f8

00010934 <puts@plt>:
   10934:	add	ip, pc, #0, 12
   10938:	add	ip, ip, #69632	; 0x11000
   1093c:	ldr	pc, [ip, #1776]!	; 0x6f0

00010940 <__libc_start_main@plt>:
   10940:	add	ip, pc, #0, 12
   10944:	add	ip, ip, #69632	; 0x11000
   10948:	ldr	pc, [ip, #1768]!	; 0x6e8

0001094c <__gmon_start__@plt>:
   1094c:	add	ip, pc, #0, 12
   10950:	add	ip, ip, #69632	; 0x11000
   10954:	ldr	pc, [ip, #1760]!	; 0x6e0

00010958 <getopt_long@plt>:
   10958:	add	ip, pc, #0, 12
   1095c:	add	ip, ip, #69632	; 0x11000
   10960:	ldr	pc, [ip, #1752]!	; 0x6d8

00010964 <exit@plt>:
   10964:	add	ip, pc, #0, 12
   10968:	add	ip, ip, #69632	; 0x11000
   1096c:	ldr	pc, [ip, #1744]!	; 0x6d0

00010970 <warnx@plt>:
   10970:	add	ip, pc, #0, 12
   10974:	add	ip, ip, #69632	; 0x11000
   10978:	ldr	pc, [ip, #1736]!	; 0x6c8

0001097c <__errno_location@plt>:
   1097c:	add	ip, pc, #0, 12
   10980:	add	ip, ip, #69632	; 0x11000
   10984:	ldr	pc, [ip, #1728]!	; 0x6c0

00010988 <__cxa_atexit@plt>:
   10988:	add	ip, pc, #0, 12
   1098c:	add	ip, ip, #69632	; 0x11000
   10990:	ldr	pc, [ip, #1720]!	; 0x6b8

00010994 <__printf_chk@plt>:
   10994:	add	ip, pc, #0, 12
   10998:	add	ip, ip, #69632	; 0x11000
   1099c:	ldr	pc, [ip, #1712]!	; 0x6b0

000109a0 <uuid_generate@plt>:
   109a0:	add	ip, pc, #0, 12
   109a4:	add	ip, ip, #69632	; 0x11000
   109a8:	ldr	pc, [ip, #1704]!	; 0x6a8

000109ac <__fprintf_chk@plt>:
   109ac:	add	ip, pc, #0, 12
   109b0:	add	ip, ip, #69632	; 0x11000
   109b4:	ldr	pc, [ip, #1696]!	; 0x6a0

000109b8 <fclose@plt>:
   109b8:	add	ip, pc, #0, 12
   109bc:	add	ip, ip, #69632	; 0x11000
   109c0:	ldr	pc, [ip, #1688]!	; 0x698

000109c4 <setlocale@plt>:
   109c4:	add	ip, pc, #0, 12
   109c8:	add	ip, ip, #69632	; 0x11000
   109cc:	ldr	pc, [ip, #1680]!	; 0x690

000109d0 <warn@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #69632	; 0x11000
   109d8:	ldr	pc, [ip, #1672]!	; 0x688

000109dc <uuid_generate_time@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #69632	; 0x11000
   109e4:	ldr	pc, [ip, #1664]!	; 0x680

000109e8 <bindtextdomain@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #69632	; 0x11000
   109f0:	ldr	pc, [ip, #1656]!	; 0x678

000109f4 <fputs@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #69632	; 0x11000
   109fc:	ldr	pc, [ip, #1648]!	; 0x670

00010a00 <abort@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #69632	; 0x11000
   10a08:	ldr	pc, [ip, #1640]!	; 0x668

Disassembly of section .text:

00010a0c <.text>:
   10a0c:	push	{r4, r5, r6, r7, r8, lr}
   10a10:	movw	r4, #8328	; 0x2088
   10a14:	movt	r4, #2
   10a18:	sub	sp, sp, #72	; 0x48
   10a1c:	mov	r8, r1
   10a20:	mov	r7, r0
   10a24:	ldr	r3, [r4]
   10a28:	movw	r1, #4332	; 0x10ec
   10a2c:	mov	r0, #6
   10a30:	movt	r1, #1
   10a34:	mov	r5, #0
   10a38:	str	r3, [sp, #68]	; 0x44
   10a3c:	bl	109c4 <setlocale@plt>
   10a40:	movw	r0, #4348	; 0x10fc
   10a44:	movw	r1, #4360	; 0x1108
   10a48:	movt	r0, #1
   10a4c:	movt	r1, #1
   10a50:	bl	109e8 <bindtextdomain@plt>
   10a54:	movw	r0, #4348	; 0x10fc
   10a58:	movt	r0, #1
   10a5c:	mov	r6, r5
   10a60:	bl	1091c <textdomain@plt>
   10a64:	movw	r0, #3544	; 0xdd8
   10a68:	movt	r0, #1
   10a6c:	bl	10f7c <abort@plt+0x57c>
   10a70:	str	r6, [sp]
   10a74:	movw	r2, #4412	; 0x113c
   10a78:	movw	r3, #4024	; 0xfb8
   10a7c:	movt	r2, #1
   10a80:	movt	r3, #1
   10a84:	mov	r0, r7
   10a88:	mov	r1, r8
   10a8c:	bl	10958 <getopt_long@plt>
   10a90:	cmn	r0, #1
   10a94:	beq	10ba4 <abort@plt+0x1a4>
   10a98:	sub	r3, r0, #86	; 0x56
   10a9c:	cmp	r3, #30
   10aa0:	ldrls	pc, [pc, r3, lsl #2]
   10aa4:	b	10b94 <abort@plt+0x194>
   10aa8:	andeq	r0, r1, ip, lsr fp
   10aac:	muleq	r1, r4, fp
   10ab0:	muleq	r1, r4, fp
   10ab4:	muleq	r1, r4, fp
   10ab8:	muleq	r1, r4, fp
   10abc:	muleq	r1, r4, fp
   10ac0:	muleq	r1, r4, fp
   10ac4:	muleq	r1, r4, fp
   10ac8:	muleq	r1, r4, fp
   10acc:	muleq	r1, r4, fp
   10ad0:	muleq	r1, r4, fp
   10ad4:	muleq	r1, r4, fp
   10ad8:	muleq	r1, r4, fp
   10adc:	muleq	r1, r4, fp
   10ae0:	muleq	r1, r4, fp
   10ae4:	muleq	r1, r4, fp
   10ae8:	muleq	r1, r4, fp
   10aec:	muleq	r1, r4, fp
   10af0:	andeq	r0, r1, ip, lsr #22
   10af4:	muleq	r1, r4, fp
   10af8:	muleq	r1, r4, fp
   10afc:	muleq	r1, r4, fp
   10b00:	muleq	r1, r4, fp
   10b04:	muleq	r1, r4, fp
   10b08:	muleq	r1, r4, fp
   10b0c:	muleq	r1, r4, fp
   10b10:	muleq	r1, r4, fp
   10b14:	muleq	r1, r4, fp
   10b18:	andeq	r0, r1, r4, lsr #22
   10b1c:	muleq	r1, r4, fp
   10b20:	andeq	r0, r1, ip, lsl #23
   10b24:	mov	r5, #2
   10b28:	b	10a70 <abort@plt+0x70>
   10b2c:	movw	r3, #8336	; 0x2090
   10b30:	movt	r3, #2
   10b34:	ldr	r0, [r3]
   10b38:	bl	10d30 <abort@plt+0x330>
   10b3c:	mov	r2, #5
   10b40:	movw	r1, #4380	; 0x111c
   10b44:	mov	r0, #0
   10b48:	movt	r1, #1
   10b4c:	bl	10904 <dcgettext@plt>
   10b50:	movw	r2, #8320	; 0x2080
   10b54:	movt	r2, #2
   10b58:	movw	r3, #4392	; 0x1128
   10b5c:	movt	r3, #1
   10b60:	ldr	r2, [r2]
   10b64:	mov	r1, r0
   10b68:	mov	r0, #1
   10b6c:	bl	10994 <__printf_chk@plt>
   10b70:	ldr	r2, [sp, #68]	; 0x44
   10b74:	mov	r0, #0
   10b78:	ldr	r3, [r4]
   10b7c:	cmp	r2, r3
   10b80:	bne	10bf8 <abort@plt+0x1f8>
   10b84:	add	sp, sp, #72	; 0x48
   10b88:	pop	{r4, r5, r6, r7, r8, pc}
   10b8c:	mov	r5, #1
   10b90:	b	10a70 <abort@plt+0x70>
   10b94:	movw	r3, #8332	; 0x208c
   10b98:	movt	r3, #2
   10b9c:	ldr	r0, [r3]
   10ba0:	bl	10d30 <abort@plt+0x330>
   10ba4:	cmp	r5, #1
   10ba8:	beq	10bd8 <abort@plt+0x1d8>
   10bac:	cmp	r5, #2
   10bb0:	bne	10be8 <abort@plt+0x1e8>
   10bb4:	add	r5, sp, #12
   10bb8:	mov	r0, r5
   10bbc:	bl	108d4 <uuid_generate_random@plt>
   10bc0:	mov	r0, r5
   10bc4:	add	r1, sp, #28
   10bc8:	bl	108e0 <uuid_unparse@plt>
   10bcc:	add	r0, sp, #28
   10bd0:	bl	10934 <puts@plt>
   10bd4:	b	10b70 <abort@plt+0x170>
   10bd8:	add	r5, sp, #12
   10bdc:	mov	r0, r5
   10be0:	bl	109dc <uuid_generate_time@plt>
   10be4:	b	10bc0 <abort@plt+0x1c0>
   10be8:	add	r5, sp, #12
   10bec:	mov	r0, r5
   10bf0:	bl	109a0 <uuid_generate@plt>
   10bf4:	b	10bc0 <abort@plt+0x1c0>
   10bf8:	bl	10910 <__stack_chk_fail@plt>
   10bfc:	mov	fp, #0
   10c00:	mov	lr, #0
   10c04:	pop	{r1}		; (ldr r1, [sp], #4)
   10c08:	mov	r2, sp
   10c0c:	push	{r2}		; (str r2, [sp, #-4]!)
   10c10:	push	{r0}		; (str r0, [sp, #-4]!)
   10c14:	ldr	ip, [pc, #16]	; 10c2c <abort@plt+0x22c>
   10c18:	push	{ip}		; (str ip, [sp, #-4]!)
   10c1c:	ldr	r0, [pc, #12]	; 10c30 <abort@plt+0x230>
   10c20:	ldr	r3, [pc, #12]	; 10c34 <abort@plt+0x234>
   10c24:	bl	10940 <__libc_start_main@plt>
   10c28:	bl	10a00 <abort@plt>
   10c2c:	andeq	r0, r1, r8, ror pc
   10c30:	andeq	r0, r1, ip, lsl #20
   10c34:	andeq	r0, r1, r4, lsl pc
   10c38:	ldr	r3, [pc, #20]	; 10c54 <abort@plt+0x254>
   10c3c:	ldr	r2, [pc, #20]	; 10c58 <abort@plt+0x258>
   10c40:	add	r3, pc, r3
   10c44:	ldr	r2, [r3, r2]
   10c48:	cmp	r2, #0
   10c4c:	bxeq	lr
   10c50:	b	1094c <__gmon_start__@plt>
   10c54:			; <UNDEFINED> instruction: 0x000113b8
   10c58:	andeq	r0, r0, r4, ror r0
   10c5c:	push	{r3, lr}
   10c60:	movw	r0, #8320	; 0x2080
   10c64:	ldr	r3, [pc, #36]	; 10c90 <abort@plt+0x290>
   10c68:	movt	r0, #2
   10c6c:	rsb	r3, r0, r3
   10c70:	cmp	r3, #6
   10c74:	popls	{r3, pc}
   10c78:	movw	r3, #0
   10c7c:	movt	r3, #0
   10c80:	cmp	r3, #0
   10c84:	popeq	{r3, pc}
   10c88:	blx	r3
   10c8c:	pop	{r3, pc}
   10c90:	andeq	r2, r2, r3, lsl #1
   10c94:	push	{r3, lr}
   10c98:	movw	r0, #8320	; 0x2080
   10c9c:	movw	r3, #8320	; 0x2080
   10ca0:	movt	r0, #2
   10ca4:	movt	r3, #2
   10ca8:	rsb	r3, r0, r3
   10cac:	asr	r3, r3, #2
   10cb0:	add	r3, r3, r3, lsr #31
   10cb4:	asrs	r1, r3, #1
   10cb8:	popeq	{r3, pc}
   10cbc:	movw	r2, #0
   10cc0:	movt	r2, #0
   10cc4:	cmp	r2, #0
   10cc8:	popeq	{r3, pc}
   10ccc:	blx	r2
   10cd0:	pop	{r3, pc}
   10cd4:	push	{r4, lr}
   10cd8:	movw	r4, #8340	; 0x2094
   10cdc:	movt	r4, #2
   10ce0:	ldrb	r3, [r4]
   10ce4:	cmp	r3, #0
   10ce8:	popne	{r4, pc}
   10cec:	bl	10c5c <abort@plt+0x25c>
   10cf0:	mov	r3, #1
   10cf4:	strb	r3, [r4]
   10cf8:	pop	{r4, pc}
   10cfc:	movw	r0, #7932	; 0x1efc
   10d00:	movt	r0, #2
   10d04:	push	{r3, lr}
   10d08:	ldr	r3, [r0]
   10d0c:	cmp	r3, #0
   10d10:	beq	10d28 <abort@plt+0x328>
   10d14:	movw	r3, #0
   10d18:	movt	r3, #0
   10d1c:	cmp	r3, #0
   10d20:	beq	10d28 <abort@plt+0x328>
   10d24:	blx	r3
   10d28:	pop	{r3, lr}
   10d2c:	b	10c94 <abort@plt+0x294>
   10d30:	push	{r4, lr}
   10d34:	mov	r2, #5
   10d38:	mov	r4, r0
   10d3c:	movw	r1, #4104	; 0x1008
   10d40:	mov	r0, #0
   10d44:	movt	r1, #1
   10d48:	bl	10904 <dcgettext@plt>
   10d4c:	mov	r1, r4
   10d50:	bl	109f4 <fputs@plt>
   10d54:	mov	r2, #5
   10d58:	movw	r1, #4116	; 0x1014
   10d5c:	mov	r0, #0
   10d60:	movt	r1, #1
   10d64:	bl	10904 <dcgettext@plt>
   10d68:	movw	r3, #8320	; 0x2080
   10d6c:	movt	r3, #2
   10d70:	mov	r1, #1
   10d74:	ldr	r3, [r3]
   10d78:	mov	r2, r0
   10d7c:	mov	r0, r4
   10d80:	bl	109ac <__fprintf_chk@plt>
   10d84:	mov	r2, #5
   10d88:	movw	r1, #4132	; 0x1024
   10d8c:	mov	r0, #0
   10d90:	movt	r1, #1
   10d94:	bl	10904 <dcgettext@plt>
   10d98:	mov	r1, r4
   10d9c:	bl	109f4 <fputs@plt>
   10da0:	mov	r2, #5
   10da4:	movw	r1, #4144	; 0x1030
   10da8:	mov	r0, #0
   10dac:	movt	r1, #1
   10db0:	bl	10904 <dcgettext@plt>
   10db4:	mov	r1, r4
   10db8:	bl	109f4 <fputs@plt>
   10dbc:	movw	r3, #8332	; 0x208c
   10dc0:	movt	r3, #2
   10dc4:	ldr	r0, [r3]
   10dc8:	subs	r3, r4, r0
   10dcc:	rsbs	r0, r3, #0
   10dd0:	adcs	r0, r0, r3
   10dd4:	bl	10964 <exit@plt>
   10dd8:	movw	r3, #8336	; 0x2090
   10ddc:	movt	r3, #2
   10de0:	push	{r4, r5, r6, lr}
   10de4:	ldr	r4, [r3]
   10de8:	mov	r0, r4
   10dec:	bl	10928 <__fpending@plt>
   10df0:	mov	r6, r0
   10df4:	mov	r0, r4
   10df8:	bl	108ec <ferror@plt>
   10dfc:	mov	r5, r0
   10e00:	mov	r0, r4
   10e04:	bl	109b8 <fclose@plt>
   10e08:	adds	r4, r0, #0
   10e0c:	movne	r4, #1
   10e10:	cmp	r5, #0
   10e14:	bne	10e8c <abort@plt+0x48c>
   10e18:	cmp	r4, #0
   10e1c:	beq	10e38 <abort@plt+0x438>
   10e20:	cmp	r6, #0
   10e24:	beq	10edc <abort@plt+0x4dc>
   10e28:	bl	1097c <__errno_location@plt>
   10e2c:	ldr	r3, [r0]
   10e30:	cmp	r3, #32
   10e34:	bne	10ef0 <abort@plt+0x4f0>
   10e38:	movw	r3, #8332	; 0x208c
   10e3c:	movt	r3, #2
   10e40:	ldr	r4, [r3]
   10e44:	mov	r0, r4
   10e48:	bl	10928 <__fpending@plt>
   10e4c:	mov	r6, r0
   10e50:	mov	r0, r4
   10e54:	bl	108ec <ferror@plt>
   10e58:	mov	r5, r0
   10e5c:	mov	r0, r4
   10e60:	bl	109b8 <fclose@plt>
   10e64:	adds	r4, r0, #0
   10e68:	movne	r4, #1
   10e6c:	cmp	r5, #0
   10e70:	beq	10eb8 <abort@plt+0x4b8>
   10e74:	cmp	r4, #0
   10e78:	bne	10e84 <abort@plt+0x484>
   10e7c:	bl	1097c <__errno_location@plt>
   10e80:	str	r4, [r0]
   10e84:	mov	r0, #1
   10e88:	bl	108f8 <_exit@plt>
   10e8c:	cmp	r4, #0
   10e90:	bne	10e28 <abort@plt+0x428>
   10e94:	bl	1097c <__errno_location@plt>
   10e98:	str	r4, [r0]
   10e9c:	mov	r2, #5
   10ea0:	movw	r1, #4336	; 0x10f0
   10ea4:	mov	r0, #0
   10ea8:	movt	r1, #1
   10eac:	bl	10904 <dcgettext@plt>
   10eb0:	bl	10970 <warnx@plt>
   10eb4:	b	10e84 <abort@plt+0x484>
   10eb8:	cmp	r4, #0
   10ebc:	popeq	{r4, r5, r6, pc}
   10ec0:	cmp	r6, #0
   10ec4:	bne	10e84 <abort@plt+0x484>
   10ec8:	bl	1097c <__errno_location@plt>
   10ecc:	ldr	r3, [r0]
   10ed0:	cmp	r3, #9
   10ed4:	bne	10e84 <abort@plt+0x484>
   10ed8:	pop	{r4, r5, r6, pc}
   10edc:	bl	1097c <__errno_location@plt>
   10ee0:	ldr	r3, [r0]
   10ee4:	cmp	r3, #9
   10ee8:	bne	10e30 <abort@plt+0x430>
   10eec:	b	10e38 <abort@plt+0x438>
   10ef0:	cmp	r3, #0
   10ef4:	beq	10e9c <abort@plt+0x49c>
   10ef8:	mov	r2, #5
   10efc:	movw	r1, #4336	; 0x10f0
   10f00:	mov	r0, #0
   10f04:	movt	r1, #1
   10f08:	bl	10904 <dcgettext@plt>
   10f0c:	bl	109d0 <warn@plt>
   10f10:	b	10e84 <abort@plt+0x484>
   10f14:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10f18:	mov	r7, r0
   10f1c:	ldr	r6, [pc, #76]	; 10f70 <abort@plt+0x570>
   10f20:	mov	r8, r1
   10f24:	ldr	r5, [pc, #72]	; 10f74 <abort@plt+0x574>
   10f28:	mov	r9, r2
   10f2c:	add	r6, pc, r6
   10f30:	bl	108b4 <uuid_generate_random@plt-0x20>
   10f34:	add	r5, pc, r5
   10f38:	rsb	r6, r5, r6
   10f3c:	asrs	r6, r6, #2
   10f40:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   10f44:	sub	r5, r5, #4
   10f48:	mov	r4, #0
   10f4c:	add	r4, r4, #1
   10f50:	ldr	r3, [r5, #4]!
   10f54:	mov	r0, r7
   10f58:	mov	r1, r8
   10f5c:	mov	r2, r9
   10f60:	blx	r3
   10f64:	cmp	r4, r6
   10f68:	bne	10f4c <abort@plt+0x54c>
   10f6c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10f70:	andeq	r0, r1, r4, asr #31
   10f74:			; <UNDEFINED> instruction: 0x00010fb8
   10f78:	bx	lr
   10f7c:	ldr	r3, [pc, #28]	; 10fa0 <abort@plt+0x5a0>
   10f80:	mov	r1, #0
   10f84:	ldr	r2, [pc, #24]	; 10fa4 <abort@plt+0x5a4>
   10f88:	add	r3, pc, r3
   10f8c:	ldr	r3, [r3, r2]
   10f90:	cmp	r3, #0
   10f94:	ldrne	r2, [r3]
   10f98:	moveq	r2, r3
   10f9c:	b	10988 <__cxa_atexit@plt>
   10fa0:	andeq	r1, r1, r0, ror r0
   10fa4:	andeq	r0, r0, r8, ror r0

Disassembly of section .fini:

00010fa8 <.fini>:
   10fa8:	push	{r3, lr}
   10fac:	pop	{r3, pc}
