
centos-preinstalled/sum:     file format elf32-littlearm


Disassembly of section .init:

00011078 <.init>:
   11078:	push	{r3, lr}
   1107c:	bl	11650 <__assert_fail@plt+0x2d0>
   11080:	pop	{r3, pc}

Disassembly of section .plt:

00011084 <fdopen@plt-0x14>:
   11084:	push	{lr}		; (str lr, [sp, #-4]!)
   11088:	ldr	lr, [pc, #4]	; 11094 <fdopen@plt-0x4>
   1108c:	add	lr, pc, lr
   11090:	ldr	pc, [lr, #8]!
   11094:	andeq	r6, r1, ip, ror #30

00011098 <fdopen@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #3948]!	; 0xf6c

000110a4 <calloc@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #3940]!	; 0xf64

000110b0 <fputs_unlocked@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #3932]!	; 0xf5c

000110bc <raise@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #3924]!	; 0xf54

000110c8 <strcmp@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110d4 <posix_fadvise64@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #3908]!	; 0xf44

000110e0 <read@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110ec <fflush@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #3892]!	; 0xf34

000110f8 <memmove@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #3884]!	; 0xf2c

00011104 <free@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #3876]!	; 0xf24

00011110 <_exit@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3868]!	; 0xf1c

0001111c <memcpy@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3860]!	; 0xf14

00011128 <__strtoull_internal@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3852]!	; 0xf0c

00011134 <mbsinit@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3844]!	; 0xf04

00011140 <memcmp@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3836]!	; 0xefc

0001114c <dcgettext@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3828]!	; 0xef4

00011158 <__stack_chk_fail@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3820]!	; 0xeec

00011164 <realloc@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3812]!	; 0xee4

00011170 <textdomain@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3804]!	; 0xedc

0001117c <iswprint@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3796]!	; 0xed4

00011188 <__memcpy_chk@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3788]!	; 0xecc

00011194 <fwrite@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3780]!	; 0xec4

000111a0 <lseek64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3772]!	; 0xebc

000111ac <__ctype_get_mb_cur_max@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b8 <strcpy@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3756]!	; 0xeac

000111c4 <__fpending@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3748]!	; 0xea4

000111d0 <mbrtowc@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #90112	; 0x16000
   111d8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111dc <error@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #90112	; 0x16000
   111e4:	ldr	pc, [ip, #3732]!	; 0xe94

000111e8 <open64@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #90112	; 0x16000
   111f0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111f4 <getenv@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #90112	; 0x16000
   111fc:	ldr	pc, [ip, #3716]!	; 0xe84

00011200 <malloc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #90112	; 0x16000
   11208:	ldr	pc, [ip, #3708]!	; 0xe7c

0001120c <__libc_start_main@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #90112	; 0x16000
   11214:	ldr	pc, [ip, #3700]!	; 0xe74

00011218 <__freading@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #90112	; 0x16000
   11220:	ldr	pc, [ip, #3692]!	; 0xe6c

00011224 <__gmon_start__@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #90112	; 0x16000
   1122c:	ldr	pc, [ip, #3684]!	; 0xe64

00011230 <getopt_long@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #90112	; 0x16000
   11238:	ldr	pc, [ip, #3676]!	; 0xe5c

0001123c <__ctype_b_loc@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #90112	; 0x16000
   11244:	ldr	pc, [ip, #3668]!	; 0xe54

00011248 <exit@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #90112	; 0x16000
   11250:	ldr	pc, [ip, #3660]!	; 0xe4c

00011254 <strlen@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #90112	; 0x16000
   1125c:	ldr	pc, [ip, #3652]!	; 0xe44

00011260 <strchr@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #90112	; 0x16000
   11268:	ldr	pc, [ip, #3644]!	; 0xe3c

0001126c <ungetc@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #90112	; 0x16000
   11274:	ldr	pc, [ip, #3636]!	; 0xe34

00011278 <__errno_location@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #90112	; 0x16000
   11280:	ldr	pc, [ip, #3628]!	; 0xe2c

00011284 <__sprintf_chk@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #90112	; 0x16000
   1128c:	ldr	pc, [ip, #3620]!	; 0xe24

00011290 <__cxa_atexit@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #90112	; 0x16000
   11298:	ldr	pc, [ip, #3612]!	; 0xe1c

0001129c <setvbuf@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #90112	; 0x16000
   112a4:	ldr	pc, [ip, #3604]!	; 0xe14

000112a8 <memset@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #90112	; 0x16000
   112b0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112b4 <fscanf@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #90112	; 0x16000
   112bc:	ldr	pc, [ip, #3588]!	; 0xe04

000112c0 <__printf_chk@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #90112	; 0x16000
   112c8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112cc <fileno@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #90112	; 0x16000
   112d4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d8 <__fprintf_chk@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3564]!	; 0xdec

000112e4 <fclose@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3556]!	; 0xde4

000112f0 <fseeko64@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3548]!	; 0xddc

000112fc <__uflow@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3540]!	; 0xdd4

00011308 <__overflow@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3532]!	; 0xdcc

00011314 <setlocale@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011320 <strrchr@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #3516]!	; 0xdbc

0001132c <nl_langinfo@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #3508]!	; 0xdb4

00011338 <localeconv@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #3500]!	; 0xdac

00011344 <fopen64@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #3492]!	; 0xda4

00011350 <bindtextdomain@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #3484]!	; 0xd9c

0001135c <strncmp@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #3476]!	; 0xd94

00011368 <abort@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #3468]!	; 0xd8c

00011374 <close@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #3460]!	; 0xd84

00011380 <__assert_fail@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #90112	; 0x16000
   11388:	ldr	pc, [ip, #3452]!	; 0xd7c

Disassembly of section .text:

00011390 <close_stdout@@Base-0xaf0>:
   11390:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11394:	mov	r6, r0
   11398:	sub	sp, sp, #36	; 0x24
   1139c:	ldr	r0, [r1]
   113a0:	mov	r5, r1
   113a4:	bl	12ca8 <close_stdout@@Base+0xe28>
   113a8:	ldr	r1, [pc, #524]	; 115bc <__assert_fail@plt+0x23c>
   113ac:	mov	r0, #6
   113b0:	ldr	r4, [pc, #520]	; 115c0 <__assert_fail@plt+0x240>
   113b4:	add	r1, pc, r1
   113b8:	ldr	fp, [pc, #516]	; 115c4 <__assert_fail@plt+0x244>
   113bc:	bl	11314 <setlocale@plt>
   113c0:	add	r4, pc, r4
   113c4:	ldr	r1, [pc, #508]	; 115c8 <__assert_fail@plt+0x248>
   113c8:	add	fp, pc, fp
   113cc:	mov	r0, r4
   113d0:	ldr	r9, [pc, #500]	; 115cc <__assert_fail@plt+0x24c>
   113d4:	add	r1, pc, r1
   113d8:	ldr	r8, [pc, #496]	; 115d0 <__assert_fail@plt+0x250>
   113dc:	bl	11350 <bindtextdomain@plt>
   113e0:	mov	r0, r4
   113e4:	ldr	r4, [pc, #488]	; 115d4 <__assert_fail@plt+0x254>
   113e8:	bl	11170 <textdomain@plt>
   113ec:	ldr	r3, [pc, #484]	; 115d8 <__assert_fail@plt+0x258>
   113f0:	add	r9, pc, r9
   113f4:	add	r4, pc, r4
   113f8:	ldr	ip, [pc, #476]	; 115dc <__assert_fail@plt+0x25c>
   113fc:	add	r8, pc, r8
   11400:	ldr	r0, [r4, r3]
   11404:	add	ip, pc, ip
   11408:	str	ip, [sp, #24]
   1140c:	ldr	ip, [pc, #460]	; 115e0 <__assert_fail@plt+0x260>
   11410:	add	ip, pc, ip
   11414:	str	ip, [sp, #28]
   11418:	bl	16e8c <close_stdout@@Base+0x500c>
   1141c:	ldr	r0, [pc, #448]	; 115e4 <__assert_fail@plt+0x264>
   11420:	mov	r1, #0
   11424:	mov	r2, #1
   11428:	mov	r3, r1
   1142c:	ldr	r0, [r4, r0]
   11430:	str	r0, [sp, #20]
   11434:	ldr	r0, [r0]
   11438:	bl	1129c <setvbuf@plt>
   1143c:	ldr	r2, [pc, #420]	; 115e8 <__assert_fail@plt+0x268>
   11440:	mov	r3, #0
   11444:	add	r2, pc, r2
   11448:	mov	r7, r3
   1144c:	strb	r3, [r2]
   11450:	str	r7, [sp]
   11454:	mov	r0, r6
   11458:	mov	r1, r5
   1145c:	mov	r2, r9
   11460:	mov	r3, r8
   11464:	mov	sl, #0
   11468:	bl	11230 <getopt_long@plt>
   1146c:	cmn	r0, #1
   11470:	beq	11500 <__assert_fail@plt+0x180>
   11474:	cmn	r0, #2
   11478:	beq	114f8 <__assert_fail@plt+0x178>
   1147c:	ble	114a0 <__assert_fail@plt+0x120>
   11480:	cmp	r0, #114	; 0x72
   11484:	beq	11498 <__assert_fail@plt+0x118>
   11488:	cmp	r0, #115	; 0x73
   1148c:	bne	114f0 <__assert_fail@plt+0x170>
   11490:	ldr	fp, [sp, #28]
   11494:	b	11450 <__assert_fail@plt+0xd0>
   11498:	ldr	fp, [sp, #24]
   1149c:	b	11450 <__assert_fail@plt+0xd0>
   114a0:	cmn	r0, #3
   114a4:	bne	114f0 <__assert_fail@plt+0x170>
   114a8:	ldr	r3, [pc, #316]	; 115ec <__assert_fail@plt+0x26c>
   114ac:	ldr	ip, [sp, #20]
   114b0:	ldr	r1, [pc, #312]	; 115f0 <__assert_fail@plt+0x270>
   114b4:	ldr	r3, [r4, r3]
   114b8:	ldr	r2, [pc, #308]	; 115f4 <__assert_fail@plt+0x274>
   114bc:	add	r1, pc, r1
   114c0:	ldr	r0, [ip]
   114c4:	add	r2, pc, r2
   114c8:	str	sl, [sp, #8]
   114cc:	ldr	r3, [r3]
   114d0:	stm	sp, {r1, r2}
   114d4:	ldr	r1, [pc, #284]	; 115f8 <__assert_fail@plt+0x278>
   114d8:	ldr	r2, [pc, #284]	; 115fc <__assert_fail@plt+0x27c>
   114dc:	add	r1, pc, r1
   114e0:	add	r2, pc, r2
   114e4:	bl	149f4 <close_stdout@@Base+0x2b74>
   114e8:	mov	r0, sl
   114ec:	bl	11248 <exit@plt>
   114f0:	mov	r0, #1
   114f4:	bl	11c5c <__assert_fail@plt+0x8dc>
   114f8:	mov	r0, sl
   114fc:	bl	11c5c <__assert_fail@plt+0x8dc>
   11500:	ldr	r3, [pc, #248]	; 11600 <__assert_fail@plt+0x280>
   11504:	ldr	r8, [r4, r3]
   11508:	ldr	r9, [r8]
   1150c:	rsb	r9, r9, r6
   11510:	cmp	r9, sl
   11514:	ble	115a4 <__assert_fail@plt+0x224>
   11518:	mov	r7, #1
   1151c:	mov	sl, r8
   11520:	b	11544 <__assert_fail@plt+0x1c4>
   11524:	ldr	r0, [r5, r3, lsl #2]
   11528:	mov	r1, r9
   1152c:	blx	fp
   11530:	ldr	r3, [sl]
   11534:	add	r3, r3, #1
   11538:	str	r3, [sl]
   1153c:	and	r0, r0, r7
   11540:	uxtb	r7, r0
   11544:	ldr	r3, [r8]
   11548:	cmp	r6, r3
   1154c:	bgt	11524 <__assert_fail@plt+0x1a4>
   11550:	ldr	r3, [pc, #172]	; 11604 <__assert_fail@plt+0x284>
   11554:	add	r3, pc, r3
   11558:	ldrb	r3, [r3]
   1155c:	cmp	r3, #0
   11560:	bne	11570 <__assert_fail@plt+0x1f0>
   11564:	rsbs	r0, r7, #1
   11568:	movcc	r0, #0
   1156c:	bl	11248 <exit@plt>
   11570:	ldr	r3, [pc, #144]	; 11608 <__assert_fail@plt+0x288>
   11574:	ldr	r3, [r4, r3]
   11578:	ldr	r0, [r3]
   1157c:	bl	154c8 <close_stdout@@Base+0x3648>
   11580:	cmn	r0, #1
   11584:	bne	11564 <__assert_fail@plt+0x1e4>
   11588:	bl	11278 <__errno_location@plt>
   1158c:	ldr	r2, [pc, #120]	; 1160c <__assert_fail@plt+0x28c>
   11590:	add	r2, pc, r2
   11594:	ldr	r1, [r0]
   11598:	mov	r0, #1
   1159c:	bl	111dc <error@plt>
   115a0:	b	11564 <__assert_fail@plt+0x1e4>
   115a4:	ldr	r0, [pc, #100]	; 11610 <__assert_fail@plt+0x290>
   115a8:	mov	r1, r9
   115ac:	add	r0, pc, r0
   115b0:	blx	fp
   115b4:	mov	r7, r0
   115b8:	b	11550 <__assert_fail@plt+0x1d0>
   115bc:	muleq	r0, r4, sp
   115c0:	andeq	r5, r0, r8, asr #25
   115c4:	andeq	r0, r0, r0, lsl #12
   115c8:	andeq	r5, r0, r8, ror sp
   115cc:	muleq	r0, r8, sp
   115d0:	muleq	r1, r4, sl
   115d4:	andeq	r6, r1, r4, lsl #24
   115d8:	andeq	r0, r0, ip, lsl r1
   115dc:	andeq	r0, r0, r4, asr #11
   115e0:	andeq	r0, r0, r0, lsr r3
   115e4:	andeq	r0, r0, ip, lsr #2
   115e8:	andeq	r6, r1, r9, asr #26
   115ec:	andeq	r0, r0, r4, lsl r1
   115f0:	andeq	r5, r0, r8, lsr #25
   115f4:			; <UNDEFINED> instruction: 0x00005cb4
   115f8:	andeq	r5, r0, r4, lsl #25
   115fc:	andeq	r5, r0, r4, lsr #23
   11600:	andeq	r0, r0, r0, lsl r1
   11604:	andeq	r6, r1, r9, lsr ip
   11608:	andeq	r0, r0, r8, lsr #2
   1160c:	strdeq	r5, [r0], -ip
   11610:	andeq	r5, r0, r0, ror #23
   11614:	mov	fp, #0
   11618:	mov	lr, #0
   1161c:	pop	{r1}		; (ldr r1, [sp], #4)
   11620:	mov	r2, sp
   11624:	push	{r2}		; (str r2, [sp, #-4]!)
   11628:	push	{r0}		; (str r0, [sp, #-4]!)
   1162c:	ldr	ip, [pc, #16]	; 11644 <__assert_fail@plt+0x2c4>
   11630:	push	{ip}		; (str ip, [sp, #-4]!)
   11634:	ldr	r0, [pc, #12]	; 11648 <__assert_fail@plt+0x2c8>
   11638:	ldr	r3, [pc, #12]	; 1164c <__assert_fail@plt+0x2cc>
   1163c:	bl	1120c <__libc_start_main@plt>
   11640:	bl	11368 <abort@plt>
   11644:	andeq	r6, r1, r8, lsl #29
   11648:	muleq	r1, r0, r3
   1164c:	andeq	r6, r1, r4, lsr #28
   11650:	ldr	r3, [pc, #20]	; 1166c <__assert_fail@plt+0x2ec>
   11654:	ldr	r2, [pc, #20]	; 11670 <__assert_fail@plt+0x2f0>
   11658:	add	r3, pc, r3
   1165c:	ldr	r2, [r3, r2]
   11660:	cmp	r2, #0
   11664:	bxeq	lr
   11668:	b	11224 <__gmon_start__@plt>
   1166c:	andeq	r6, r1, r0, lsr #19
   11670:	andeq	r0, r0, r0, lsr #2
   11674:	push	{r3, lr}
   11678:	movw	r0, #33172	; 0x8194
   1167c:	ldr	r3, [pc, #36]	; 116a8 <__assert_fail@plt+0x328>
   11680:	movt	r0, #2
   11684:	rsb	r3, r0, r3
   11688:	cmp	r3, #6
   1168c:	popls	{r3, pc}
   11690:	movw	r3, #0
   11694:	movt	r3, #0
   11698:	cmp	r3, #0
   1169c:	popeq	{r3, pc}
   116a0:	blx	r3
   116a4:	pop	{r3, pc}
   116a8:	muleq	r2, r7, r1
   116ac:	push	{r3, lr}
   116b0:	movw	r0, #33172	; 0x8194
   116b4:	movw	r3, #33172	; 0x8194
   116b8:	movt	r0, #2
   116bc:	movt	r3, #2
   116c0:	rsb	r3, r0, r3
   116c4:	asr	r3, r3, #2
   116c8:	add	r3, r3, r3, lsr #31
   116cc:	asrs	r1, r3, #1
   116d0:	popeq	{r3, pc}
   116d4:	movw	r2, #0
   116d8:	movt	r2, #0
   116dc:	cmp	r2, #0
   116e0:	popeq	{r3, pc}
   116e4:	blx	r2
   116e8:	pop	{r3, pc}
   116ec:	push	{r4, lr}
   116f0:	movw	r4, #33172	; 0x8194
   116f4:	movt	r4, #2
   116f8:	ldrb	r3, [r4]
   116fc:	cmp	r3, #0
   11700:	popne	{r4, pc}
   11704:	bl	11674 <__assert_fail@plt+0x2f4>
   11708:	mov	r3, #1
   1170c:	strb	r3, [r4]
   11710:	pop	{r4, pc}
   11714:	movw	r0, #32404	; 0x7e94
   11718:	movt	r0, #2
   1171c:	push	{r3, lr}
   11720:	ldr	r3, [r0]
   11724:	cmp	r3, #0
   11728:	beq	11740 <__assert_fail@plt+0x3c0>
   1172c:	movw	r3, #0
   11730:	movt	r3, #0
   11734:	cmp	r3, #0
   11738:	beq	11740 <__assert_fail@plt+0x3c0>
   1173c:	blx	r3
   11740:	pop	{r3, lr}
   11744:	b	116ac <__assert_fail@plt+0x32c>
   11748:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1174c:	sub	sp, sp, #8832	; 0x2280
   11750:	sub	sp, sp, #52	; 0x34
   11754:	ldr	r2, [pc, #592]	; 119ac <__assert_fail@plt+0x62c>
   11758:	ldr	r3, [pc, #592]	; 119b0 <__assert_fail@plt+0x630>
   1175c:	mov	r9, r0
   11760:	add	r2, pc, r2
   11764:	str	r2, [sp, #20]
   11768:	str	r1, [sp, #28]
   1176c:	ldr	r1, [sp, #20]
   11770:	ldrb	r2, [r0]
   11774:	ldr	r3, [r1, r3]
   11778:	cmp	r2, #45	; 0x2d
   1177c:	add	r2, sp, #8192	; 0x2000
   11780:	str	r3, [sp, #24]
   11784:	ldr	r3, [r3]
   11788:	str	r3, [r2, #684]	; 0x2ac
   1178c:	beq	11904 <__assert_fail@plt+0x584>
   11790:	mov	r0, r9
   11794:	mov	r1, #0
   11798:	bl	111e8 <open64@plt>
   1179c:	cmn	r0, #1
   117a0:	mov	r7, r0
   117a4:	movne	sl, #0
   117a8:	beq	11988 <__assert_fail@plt+0x608>
   117ac:	add	r6, sp, #688	; 0x2b0
   117b0:	add	r8, sp, #684	; 0x2ac
   117b4:	sub	r6, r6, #5
   117b8:	mov	fp, #0
   117bc:	mov	r4, #0
   117c0:	mov	r5, #0
   117c4:	mov	r0, r7
   117c8:	mov	r1, r8
   117cc:	mov	r2, #8192	; 0x2000
   117d0:	bl	14504 <close_stdout@@Base+0x2684>
   117d4:	cmp	r0, #0
   117d8:	beq	11854 <__assert_fail@plt+0x4d4>
   117dc:	cmn	r0, #1
   117e0:	beq	11808 <__assert_fail@plt+0x488>
   117e4:	add	r1, r6, r0
   117e8:	mov	r3, r6
   117ec:	ldrb	r2, [r3, #1]!
   117f0:	cmp	r3, r1
   117f4:	add	fp, fp, r2
   117f8:	bne	117ec <__assert_fail@plt+0x46c>
   117fc:	adds	r4, r4, r0
   11800:	adc	r5, r5, #0
   11804:	b	117c4 <__assert_fail@plt+0x444>
   11808:	bl	11278 <__errno_location@plt>
   1180c:	ldr	r2, [pc, #416]	; 119b4 <__assert_fail@plt+0x634>
   11810:	mov	r3, r9
   11814:	add	r2, pc, r2
   11818:	ldr	r1, [r0]
   1181c:	mov	r0, #0
   11820:	bl	111dc <error@plt>
   11824:	cmp	sl, #0
   11828:	movne	r0, #0
   1182c:	beq	11940 <__assert_fail@plt+0x5c0>
   11830:	ldr	r1, [sp, #24]
   11834:	add	r3, sp, #8192	; 0x2000
   11838:	ldr	r2, [r3, #684]	; 0x2ac
   1183c:	ldr	r3, [r1]
   11840:	cmp	r2, r3
   11844:	bne	11974 <__assert_fail@plt+0x5f4>
   11848:	add	sp, sp, #8832	; 0x2280
   1184c:	add	sp, sp, #52	; 0x34
   11850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11854:	cmp	sl, #0
   11858:	bne	1186c <__assert_fail@plt+0x4ec>
   1185c:	mov	r0, r7
   11860:	bl	11374 <close@plt>
   11864:	cmp	r0, #0
   11868:	bne	11950 <__assert_fail@plt+0x5d0>
   1186c:	uxth	r2, fp
   11870:	mov	r1, r5
   11874:	add	r3, r2, fp, lsr #16
   11878:	mov	r0, r4
   1187c:	add	r2, sp, #32
   11880:	mov	r4, #1
   11884:	asr	r6, r3, #16
   11888:	mov	r5, #0
   1188c:	uxtah	r6, r6, r3
   11890:	strd	r4, [sp]
   11894:	mov	r3, #0
   11898:	mov	r4, #512	; 0x200
   1189c:	mov	r5, #0
   118a0:	strd	r4, [sp, #8]
   118a4:	bl	12080 <close_stdout@@Base+0x200>
   118a8:	ldr	r1, [pc, #264]	; 119b8 <__assert_fail@plt+0x638>
   118ac:	mov	r2, r6
   118b0:	add	r1, pc, r1
   118b4:	mov	r3, r0
   118b8:	mov	r0, #1
   118bc:	bl	112c0 <__printf_chk@plt>
   118c0:	ldr	r3, [sp, #28]
   118c4:	cmp	r3, #0
   118c8:	bne	11928 <__assert_fail@plt+0x5a8>
   118cc:	ldr	r3, [pc, #232]	; 119bc <__assert_fail@plt+0x63c>
   118d0:	ldr	r1, [sp, #20]
   118d4:	ldr	r3, [r1, r3]
   118d8:	ldr	r0, [r3]
   118dc:	ldr	r3, [r0, #20]
   118e0:	ldr	r2, [r0, #24]
   118e4:	cmp	r3, r2
   118e8:	bcs	11978 <__assert_fail@plt+0x5f8>
   118ec:	add	r1, r3, #1
   118f0:	mov	r2, #10
   118f4:	str	r1, [r0, #20]
   118f8:	mov	r0, #1
   118fc:	strb	r2, [r3]
   11900:	b	11830 <__assert_fail@plt+0x4b0>
   11904:	ldrb	r7, [r0, #1]
   11908:	cmp	r7, #0
   1190c:	bne	11790 <__assert_fail@plt+0x410>
   11910:	ldr	r2, [pc, #168]	; 119c0 <__assert_fail@plt+0x640>
   11914:	mov	r3, #1
   11918:	mov	sl, r3
   1191c:	add	r2, pc, r2
   11920:	strb	r3, [r2]
   11924:	b	117ac <__assert_fail@plt+0x42c>
   11928:	ldr	r1, [pc, #148]	; 119c4 <__assert_fail@plt+0x644>
   1192c:	mov	r2, r9
   11930:	mov	r0, #1
   11934:	add	r1, pc, r1
   11938:	bl	112c0 <__printf_chk@plt>
   1193c:	b	118cc <__assert_fail@plt+0x54c>
   11940:	mov	r0, r7
   11944:	bl	11374 <close@plt>
   11948:	mov	r0, sl
   1194c:	b	11830 <__assert_fail@plt+0x4b0>
   11950:	bl	11278 <__errno_location@plt>
   11954:	ldr	r2, [pc, #108]	; 119c8 <__assert_fail@plt+0x648>
   11958:	mov	r3, r9
   1195c:	add	r2, pc, r2
   11960:	ldr	r1, [r0]
   11964:	mov	r0, sl
   11968:	bl	111dc <error@plt>
   1196c:	mov	r0, sl
   11970:	b	11830 <__assert_fail@plt+0x4b0>
   11974:	bl	11158 <__stack_chk_fail@plt>
   11978:	mov	r1, #10
   1197c:	bl	11308 <__overflow@plt>
   11980:	mov	r0, #1
   11984:	b	11830 <__assert_fail@plt+0x4b0>
   11988:	bl	11278 <__errno_location@plt>
   1198c:	ldr	r2, [pc, #56]	; 119cc <__assert_fail@plt+0x64c>
   11990:	mov	r3, r9
   11994:	add	r2, pc, r2
   11998:	ldr	r1, [r0]
   1199c:	mov	r0, #0
   119a0:	bl	111dc <error@plt>
   119a4:	mov	r0, #0
   119a8:	b	11830 <__assert_fail@plt+0x4b0>
   119ac:	muleq	r1, r8, r8
   119b0:	andeq	r0, r0, ip, lsl #2
   119b4:	andeq	r5, r0, ip, lsr #19
   119b8:	andeq	r5, r0, r0, lsl r6
   119bc:	andeq	r0, r0, ip, lsr #2
   119c0:	andeq	r6, r1, r1, ror r8
   119c4:	andeq	r5, r0, ip, lsl #27
   119c8:	andeq	r5, r0, r4, ror #16
   119cc:	andeq	r5, r0, ip, lsr #16
   119d0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   119d4:	sub	sp, sp, #684	; 0x2ac
   119d8:	ldr	sl, [pc, #592]	; 11c30 <__assert_fail@plt+0x8b0>
   119dc:	mov	r9, r0
   119e0:	ldr	r3, [pc, #588]	; 11c34 <__assert_fail@plt+0x8b4>
   119e4:	mov	fp, r1
   119e8:	add	sl, pc, sl
   119ec:	ldrb	r2, [r0]
   119f0:	ldr	r3, [sl, r3]
   119f4:	cmp	r2, #45	; 0x2d
   119f8:	str	r3, [sp, #20]
   119fc:	ldr	r3, [r3]
   11a00:	str	r3, [sp, #676]	; 0x2a4
   11a04:	beq	11b44 <__assert_fail@plt+0x7c4>
   11a08:	ldr	r1, [pc, #552]	; 11c38 <__assert_fail@plt+0x8b8>
   11a0c:	mov	r0, r9
   11a10:	add	r1, pc, r1
   11a14:	bl	11344 <fopen64@plt>
   11a18:	subs	r7, r0, #0
   11a1c:	movne	r6, #0
   11a20:	beq	11b74 <__assert_fail@plt+0x7f4>
   11a24:	mov	r0, r7
   11a28:	mov	r1, #2
   11a2c:	bl	12040 <close_stdout@@Base+0x1c0>
   11a30:	mov	r4, #0
   11a34:	mov	r5, #0
   11a38:	ldr	r3, [r7, #4]
   11a3c:	mov	r8, #0
   11a40:	ldr	r0, [r7, #8]
   11a44:	b	11a74 <__assert_fail@plt+0x6f4>
   11a48:	add	r2, r3, #1
   11a4c:	str	r2, [r7, #4]
   11a50:	ldrb	r1, [r3]
   11a54:	lsl	lr, r8, #15
   11a58:	mov	r3, r2
   11a5c:	adds	r4, r4, #1
   11a60:	uxth	r2, lr
   11a64:	adc	r5, r5, #0
   11a68:	add	r8, r2, r8, lsr #1
   11a6c:	add	r8, r8, r1
   11a70:	uxth	r8, r8
   11a74:	cmp	r0, r3
   11a78:	bhi	11a48 <__assert_fail@plt+0x6c8>
   11a7c:	mov	r0, r7
   11a80:	bl	112fc <__uflow@plt>
   11a84:	cmn	r0, #1
   11a88:	bne	11c10 <__assert_fail@plt+0x890>
   11a8c:	ldr	r3, [r7]
   11a90:	tst	r3, #32
   11a94:	bne	11bb0 <__assert_fail@plt+0x830>
   11a98:	cmp	r6, #0
   11a9c:	bne	11ab0 <__assert_fail@plt+0x730>
   11aa0:	mov	r0, r7
   11aa4:	bl	154c8 <close_stdout@@Base+0x3648>
   11aa8:	cmp	r0, #0
   11aac:	bne	11be8 <__assert_fail@plt+0x868>
   11ab0:	mov	r1, r5
   11ab4:	mov	r0, r4
   11ab8:	add	r2, sp, #24
   11abc:	mov	r3, #0
   11ac0:	mov	r6, #1
   11ac4:	mov	r7, #0
   11ac8:	mov	r4, #1024	; 0x400
   11acc:	mov	r5, #0
   11ad0:	strd	r6, [sp]
   11ad4:	strd	r4, [sp, #8]
   11ad8:	bl	12080 <close_stdout@@Base+0x200>
   11adc:	ldr	r1, [pc, #344]	; 11c3c <__assert_fail@plt+0x8bc>
   11ae0:	mov	r2, r8
   11ae4:	add	r1, pc, r1
   11ae8:	mov	r3, r0
   11aec:	mov	r0, #1
   11af0:	bl	112c0 <__printf_chk@plt>
   11af4:	cmp	fp, #1
   11af8:	ble	11b10 <__assert_fail@plt+0x790>
   11afc:	ldr	r1, [pc, #316]	; 11c40 <__assert_fail@plt+0x8c0>
   11b00:	mov	r2, r9
   11b04:	mov	r0, #1
   11b08:	add	r1, pc, r1
   11b0c:	bl	112c0 <__printf_chk@plt>
   11b10:	ldr	r3, [pc, #300]	; 11c44 <__assert_fail@plt+0x8c4>
   11b14:	ldr	r3, [sl, r3]
   11b18:	ldr	r0, [r3]
   11b1c:	ldr	r3, [r0, #20]
   11b20:	ldr	r2, [r0, #24]
   11b24:	cmp	r3, r2
   11b28:	bcs	11c20 <__assert_fail@plt+0x8a0>
   11b2c:	add	r1, r3, #1
   11b30:	mov	r2, #10
   11b34:	str	r1, [r0, #20]
   11b38:	mov	r0, #1
   11b3c:	strb	r2, [r3]
   11b40:	b	11b94 <__assert_fail@plt+0x814>
   11b44:	ldrb	r3, [r0, #1]
   11b48:	cmp	r3, #0
   11b4c:	bne	11a08 <__assert_fail@plt+0x688>
   11b50:	ldr	r2, [pc, #240]	; 11c48 <__assert_fail@plt+0x8c8>
   11b54:	mov	r3, #1
   11b58:	ldr	r1, [pc, #236]	; 11c4c <__assert_fail@plt+0x8cc>
   11b5c:	mov	r6, r3
   11b60:	ldr	r2, [sl, r2]
   11b64:	add	r1, pc, r1
   11b68:	strb	r3, [r1]
   11b6c:	ldr	r7, [r2]
   11b70:	b	11a24 <__assert_fail@plt+0x6a4>
   11b74:	bl	11278 <__errno_location@plt>
   11b78:	ldr	r2, [pc, #208]	; 11c50 <__assert_fail@plt+0x8d0>
   11b7c:	mov	r3, r9
   11b80:	add	r2, pc, r2
   11b84:	ldr	r1, [r0]
   11b88:	mov	r0, r7
   11b8c:	bl	111dc <error@plt>
   11b90:	mov	r0, r7
   11b94:	ldr	r1, [sp, #20]
   11b98:	ldr	r2, [sp, #676]	; 0x2a4
   11b9c:	ldr	r3, [r1]
   11ba0:	cmp	r2, r3
   11ba4:	bne	11c0c <__assert_fail@plt+0x88c>
   11ba8:	add	sp, sp, #684	; 0x2ac
   11bac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11bb0:	bl	11278 <__errno_location@plt>
   11bb4:	ldr	r2, [pc, #152]	; 11c54 <__assert_fail@plt+0x8d4>
   11bb8:	mov	r3, r9
   11bbc:	add	r2, pc, r2
   11bc0:	ldr	r1, [r0]
   11bc4:	mov	r0, #0
   11bc8:	bl	111dc <error@plt>
   11bcc:	cmp	r6, #0
   11bd0:	movne	r0, #0
   11bd4:	bne	11b94 <__assert_fail@plt+0x814>
   11bd8:	mov	r0, r7
   11bdc:	bl	154c8 <close_stdout@@Base+0x3648>
   11be0:	mov	r0, r6
   11be4:	b	11b94 <__assert_fail@plt+0x814>
   11be8:	bl	11278 <__errno_location@plt>
   11bec:	ldr	r2, [pc, #100]	; 11c58 <__assert_fail@plt+0x8d8>
   11bf0:	mov	r3, r9
   11bf4:	add	r2, pc, r2
   11bf8:	ldr	r1, [r0]
   11bfc:	mov	r0, r6
   11c00:	bl	111dc <error@plt>
   11c04:	mov	r0, r6
   11c08:	b	11b94 <__assert_fail@plt+0x814>
   11c0c:	bl	11158 <__stack_chk_fail@plt>
   11c10:	mov	r1, r0
   11c14:	ldr	r2, [r7, #4]
   11c18:	ldr	r0, [r7, #8]
   11c1c:	b	11a54 <__assert_fail@plt+0x6d4>
   11c20:	mov	r1, #10
   11c24:	bl	11308 <__overflow@plt>
   11c28:	mov	r0, #1
   11c2c:	b	11b94 <__assert_fail@plt+0x814>
   11c30:	andeq	r6, r1, r0, lsl r6
   11c34:	andeq	r0, r0, ip, lsl #2
   11c38:	andeq	r5, r0, r4, ror #14
   11c3c:	andeq	r5, r0, r4, ror #7
   11c40:			; <UNDEFINED> instruction: 0x00005bb8
   11c44:	andeq	r0, r0, ip, lsr #2
   11c48:	andeq	r0, r0, r8, lsr #2
   11c4c:	andeq	r6, r1, r9, lsr #12
   11c50:	andeq	r5, r0, r0, asr #12
   11c54:	andeq	r5, r0, r4, lsl #12
   11c58:	andeq	r5, r0, ip, asr #11
   11c5c:	push	{r4, r5, r6, lr}
   11c60:	subs	r4, r0, #0
   11c64:	ldr	r5, [pc, #428]	; 11e18 <__assert_fail@plt+0xa98>
   11c68:	add	r5, pc, r5
   11c6c:	beq	11cb4 <__assert_fail@plt+0x934>
   11c70:	ldr	r3, [pc, #420]	; 11e1c <__assert_fail@plt+0xa9c>
   11c74:	mov	r2, #5
   11c78:	ldr	r1, [pc, #416]	; 11e20 <__assert_fail@plt+0xaa0>
   11c7c:	mov	r0, #0
   11c80:	ldr	r3, [r5, r3]
   11c84:	add	r1, pc, r1
   11c88:	ldr	r6, [r3]
   11c8c:	bl	1114c <dcgettext@plt>
   11c90:	ldr	r3, [pc, #396]	; 11e24 <__assert_fail@plt+0xaa4>
   11c94:	mov	r1, #1
   11c98:	ldr	r3, [r5, r3]
   11c9c:	ldr	r3, [r3]
   11ca0:	mov	r2, r0
   11ca4:	mov	r0, r6
   11ca8:	bl	112d8 <__fprintf_chk@plt>
   11cac:	mov	r0, r4
   11cb0:	bl	11248 <exit@plt>
   11cb4:	ldr	r1, [pc, #364]	; 11e28 <__assert_fail@plt+0xaa8>
   11cb8:	mov	r2, #5
   11cbc:	add	r1, pc, r1
   11cc0:	bl	1114c <dcgettext@plt>
   11cc4:	ldr	r3, [pc, #344]	; 11e24 <__assert_fail@plt+0xaa4>
   11cc8:	ldr	r6, [r5, r3]
   11ccc:	ldr	r2, [r6]
   11cd0:	mov	r1, r0
   11cd4:	mov	r0, #1
   11cd8:	bl	112c0 <__printf_chk@plt>
   11cdc:	ldr	r1, [pc, #328]	; 11e2c <__assert_fail@plt+0xaac>
   11ce0:	mov	r2, #5
   11ce4:	mov	r0, r4
   11ce8:	add	r1, pc, r1
   11cec:	bl	1114c <dcgettext@plt>
   11cf0:	ldr	r3, [pc, #312]	; 11e30 <__assert_fail@plt+0xab0>
   11cf4:	ldr	r5, [r5, r3]
   11cf8:	ldr	r1, [r5]
   11cfc:	bl	110b0 <fputs_unlocked@plt>
   11d00:	ldr	r1, [pc, #300]	; 11e34 <__assert_fail@plt+0xab4>
   11d04:	mov	r2, #5
   11d08:	mov	r0, r4
   11d0c:	add	r1, pc, r1
   11d10:	bl	1114c <dcgettext@plt>
   11d14:	ldr	r1, [r5]
   11d18:	bl	110b0 <fputs_unlocked@plt>
   11d1c:	ldr	r1, [pc, #276]	; 11e38 <__assert_fail@plt+0xab8>
   11d20:	mov	r2, #5
   11d24:	mov	r0, r4
   11d28:	add	r1, pc, r1
   11d2c:	bl	1114c <dcgettext@plt>
   11d30:	ldr	r1, [r5]
   11d34:	bl	110b0 <fputs_unlocked@plt>
   11d38:	ldr	r1, [pc, #252]	; 11e3c <__assert_fail@plt+0xabc>
   11d3c:	mov	r2, #5
   11d40:	mov	r0, r4
   11d44:	add	r1, pc, r1
   11d48:	bl	1114c <dcgettext@plt>
   11d4c:	ldr	r1, [r5]
   11d50:	bl	110b0 <fputs_unlocked@plt>
   11d54:	ldr	r1, [pc, #228]	; 11e40 <__assert_fail@plt+0xac0>
   11d58:	mov	r2, #5
   11d5c:	mov	r0, r4
   11d60:	add	r1, pc, r1
   11d64:	bl	1114c <dcgettext@plt>
   11d68:	ldr	r2, [pc, #212]	; 11e44 <__assert_fail@plt+0xac4>
   11d6c:	ldr	r3, [pc, #212]	; 11e48 <__assert_fail@plt+0xac8>
   11d70:	add	r2, pc, r2
   11d74:	add	r3, pc, r3
   11d78:	mov	r1, r0
   11d7c:	mov	r0, #1
   11d80:	bl	112c0 <__printf_chk@plt>
   11d84:	mov	r0, #5
   11d88:	mov	r1, r4
   11d8c:	bl	11314 <setlocale@plt>
   11d90:	cmp	r0, #0
   11d94:	beq	11db0 <__assert_fail@plt+0xa30>
   11d98:	ldr	r1, [pc, #172]	; 11e4c <__assert_fail@plt+0xacc>
   11d9c:	mov	r2, #3
   11da0:	add	r1, pc, r1
   11da4:	bl	1135c <strncmp@plt>
   11da8:	cmp	r0, #0
   11dac:	bne	11de4 <__assert_fail@plt+0xa64>
   11db0:	ldr	r1, [pc, #152]	; 11e50 <__assert_fail@plt+0xad0>
   11db4:	mov	r2, #5
   11db8:	mov	r0, #0
   11dbc:	add	r1, pc, r1
   11dc0:	bl	1114c <dcgettext@plt>
   11dc4:	mov	r5, r0
   11dc8:	ldr	r0, [r6]
   11dcc:	bl	11f98 <close_stdout@@Base+0x118>
   11dd0:	mov	r1, r5
   11dd4:	mov	r2, r0
   11dd8:	mov	r0, #1
   11ddc:	bl	112c0 <__printf_chk@plt>
   11de0:	b	11cac <__assert_fail@plt+0x92c>
   11de4:	ldr	r1, [pc, #104]	; 11e54 <__assert_fail@plt+0xad4>
   11de8:	mov	r2, #5
   11dec:	mov	r0, r4
   11df0:	add	r1, pc, r1
   11df4:	bl	1114c <dcgettext@plt>
   11df8:	mov	r5, r0
   11dfc:	ldr	r0, [r6]
   11e00:	bl	11f98 <close_stdout@@Base+0x118>
   11e04:	mov	r1, r5
   11e08:	mov	r2, r0
   11e0c:	mov	r0, #1
   11e10:	bl	112c0 <__printf_chk@plt>
   11e14:	b	11db0 <__assert_fail@plt+0xa30>
   11e18:	muleq	r1, r0, r3
   11e1c:	andeq	r0, r0, r8, lsl r1
   11e20:	andeq	r5, r0, r0, asr r2
   11e24:	andeq	r0, r0, r8, lsr r1
   11e28:	andeq	r5, r0, r0, asr #4
   11e2c:	andeq	r5, r0, r8, lsr r2
   11e30:	andeq	r0, r0, ip, lsr #2
   11e34:	andeq	r5, r0, r0, asr #5
   11e38:	ldrdeq	r5, [r0], -r4
   11e3c:	strdeq	r5, [r0], -r0
   11e40:	andeq	r5, r0, ip, lsl #6
   11e44:	andeq	r5, r0, r4, lsl r3
   11e48:	andeq	r5, r0, r0, lsr #6
   11e4c:	andeq	r5, r0, ip, lsl r3
   11e50:	andeq	r5, r0, ip, asr #6
   11e54:	ldrdeq	r5, [r0], -r0
   11e58:	ldr	r3, [pc, #8]	; 11e68 <__assert_fail@plt+0xae8>
   11e5c:	add	r3, pc, r3
   11e60:	str	r0, [r3]
   11e64:	bx	lr
   11e68:	andeq	r6, r1, r4, lsr r3
   11e6c:	ldr	r3, [pc, #8]	; 11e7c <__assert_fail@plt+0xafc>
   11e70:	add	r3, pc, r3
   11e74:	strb	r0, [r3, #4]
   11e78:	bx	lr
   11e7c:	andeq	r6, r1, r0, lsr #6

00011e80 <close_stdout@@Base>:
   11e80:	push	{r4, r5, r6, r7, lr}
   11e84:	sub	sp, sp, #12
   11e88:	ldr	r4, [pc, #228]	; 11f74 <close_stdout@@Base+0xf4>
   11e8c:	ldr	r3, [pc, #228]	; 11f78 <close_stdout@@Base+0xf8>
   11e90:	add	r4, pc, r4
   11e94:	ldr	r3, [r4, r3]
   11e98:	ldr	r0, [r3]
   11e9c:	bl	159f8 <close_stdout@@Base+0x3b78>
   11ea0:	cmp	r0, #0
   11ea4:	beq	11ecc <close_stdout@@Base+0x4c>
   11ea8:	ldr	r3, [pc, #204]	; 11f7c <close_stdout@@Base+0xfc>
   11eac:	add	r3, pc, r3
   11eb0:	ldrb	r3, [r3, #4]
   11eb4:	cmp	r3, #0
   11eb8:	beq	11eec <close_stdout@@Base+0x6c>
   11ebc:	bl	11278 <__errno_location@plt>
   11ec0:	ldr	r3, [r0]
   11ec4:	cmp	r3, #32
   11ec8:	bne	11eec <close_stdout@@Base+0x6c>
   11ecc:	ldr	r3, [pc, #172]	; 11f80 <close_stdout@@Base+0x100>
   11ed0:	ldr	r3, [r4, r3]
   11ed4:	ldr	r0, [r3]
   11ed8:	bl	159f8 <close_stdout@@Base+0x3b78>
   11edc:	cmp	r0, #0
   11ee0:	bne	11f40 <close_stdout@@Base+0xc0>
   11ee4:	add	sp, sp, #12
   11ee8:	pop	{r4, r5, r6, r7, pc}
   11eec:	ldr	r1, [pc, #144]	; 11f84 <close_stdout@@Base+0x104>
   11ef0:	mov	r0, #0
   11ef4:	mov	r2, #5
   11ef8:	add	r1, pc, r1
   11efc:	bl	1114c <dcgettext@plt>
   11f00:	ldr	r3, [pc, #128]	; 11f88 <close_stdout@@Base+0x108>
   11f04:	ldr	r5, [pc, r3]
   11f08:	cmp	r5, #0
   11f0c:	mov	r6, r0
   11f10:	beq	11f50 <close_stdout@@Base+0xd0>
   11f14:	bl	11278 <__errno_location@plt>
   11f18:	ldr	r7, [r0]
   11f1c:	mov	r0, r5
   11f20:	bl	143a4 <close_stdout@@Base+0x2524>
   11f24:	ldr	r2, [pc, #96]	; 11f8c <close_stdout@@Base+0x10c>
   11f28:	str	r6, [sp]
   11f2c:	mov	r1, r7
   11f30:	add	r2, pc, r2
   11f34:	mov	r3, r0
   11f38:	mov	r0, #0
   11f3c:	bl	111dc <error@plt>
   11f40:	ldr	r3, [pc, #72]	; 11f90 <close_stdout@@Base+0x110>
   11f44:	ldr	r3, [r4, r3]
   11f48:	ldr	r0, [r3]
   11f4c:	bl	11110 <_exit@plt>
   11f50:	bl	11278 <__errno_location@plt>
   11f54:	ldr	r2, [pc, #56]	; 11f94 <close_stdout@@Base+0x114>
   11f58:	add	r2, pc, r2
   11f5c:	mov	r3, r0
   11f60:	mov	r0, r5
   11f64:	ldr	r1, [r3]
   11f68:	mov	r3, r6
   11f6c:	bl	111dc <error@plt>
   11f70:	b	11f40 <close_stdout@@Base+0xc0>
   11f74:	andeq	r6, r1, r8, ror #2
   11f78:	andeq	r0, r0, ip, lsr #2
   11f7c:	andeq	r6, r1, r4, ror #5
   11f80:	andeq	r0, r0, r8, lsl r1
   11f84:			; <UNDEFINED> instruction: 0x000052b8
   11f88:	andeq	r6, r1, ip, lsl #5
   11f8c:	andeq	r5, r0, ip, lsl #5
   11f90:	andeq	r0, r0, r0, lsr r1
   11f94:	andeq	r5, r0, r8, ror #4
   11f98:	ldrb	r3, [r0]
   11f9c:	cmp	r3, #47	; 0x2f
   11fa0:	bne	11fbc <close_stdout@@Base+0x13c>
   11fa4:	add	r2, r0, #1
   11fa8:	mov	r0, r2
   11fac:	add	r2, r2, #1
   11fb0:	ldrb	r3, [r0]
   11fb4:	cmp	r3, #47	; 0x2f
   11fb8:	beq	11fa8 <close_stdout@@Base+0x128>
   11fbc:	cmp	r3, #0
   11fc0:	bxeq	lr
   11fc4:	mov	r2, r0
   11fc8:	mov	r1, #0
   11fcc:	cmp	r3, #47	; 0x2f
   11fd0:	moveq	r1, #1
   11fd4:	beq	11fe4 <close_stdout@@Base+0x164>
   11fd8:	cmp	r1, #0
   11fdc:	movne	r0, r2
   11fe0:	movne	r1, #0
   11fe4:	ldrb	r3, [r2, #1]!
   11fe8:	cmp	r3, #0
   11fec:	bne	11fcc <close_stdout@@Base+0x14c>
   11ff0:	bx	lr
   11ff4:	push	{r4, lr}
   11ff8:	mov	r4, r0
   11ffc:	bl	11254 <strlen@plt>
   12000:	cmp	r0, #1
   12004:	popls	{r4, pc}
   12008:	sub	r3, r0, #1
   1200c:	ldrb	r2, [r4, r3]
   12010:	cmp	r2, #47	; 0x2f
   12014:	popne	{r4, pc}
   12018:	mov	r0, r3
   1201c:	cmp	r0, #1
   12020:	sub	r3, r3, #1
   12024:	beq	12038 <close_stdout@@Base+0x1b8>
   12028:	ldrb	r2, [r4, r3]
   1202c:	cmp	r2, #47	; 0x2f
   12030:	popne	{r4, pc}
   12034:	b	12018 <close_stdout@@Base+0x198>
   12038:	pop	{r4, pc}
   1203c:	b	110d4 <posix_fadvise64@plt>
   12040:	cmp	r0, #0
   12044:	push	{r4, r5, r6, lr}
   12048:	mov	r6, r1
   1204c:	sub	sp, sp, #16
   12050:	beq	12074 <close_stdout@@Base+0x1f4>
   12054:	mov	r4, #0
   12058:	mov	r5, #0
   1205c:	bl	112cc <fileno@plt>
   12060:	str	r6, [sp, #8]
   12064:	mov	r2, r4
   12068:	mov	r3, r5
   1206c:	strd	r4, [sp]
   12070:	bl	1203c <close_stdout@@Base+0x1bc>
   12074:	add	sp, sp, #16
   12078:	pop	{r4, r5, r6, pc}
   1207c:	andeq	r0, r0, r0
   12080:	ldr	ip, [pc, #1192]	; 12530 <close_stdout@@Base+0x6b0>
   12084:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12088:	vpush	{d8-d9}
   1208c:	ands	r4, r3, #32
   12090:	ldr	lr, [pc, #1180]	; 12534 <close_stdout@@Base+0x6b4>
   12094:	sub	sp, sp, #140	; 0x8c
   12098:	add	ip, pc, ip
   1209c:	moveq	r5, #1000	; 0x3e8
   120a0:	movne	r5, #1024	; 0x400
   120a4:	str	r4, [sp, #56]	; 0x38
   120a8:	mov	r8, r3
   120ac:	str	r2, [sp, #28]
   120b0:	mov	r3, ip
   120b4:	str	r5, [sp, #60]	; 0x3c
   120b8:	mov	r7, r1
   120bc:	ldr	lr, [ip, lr]
   120c0:	and	r4, r8, #3
   120c4:	mov	r6, r0
   120c8:	str	r4, [sp, #48]	; 0x30
   120cc:	ldr	r3, [lr]
   120d0:	str	lr, [sp, #44]	; 0x2c
   120d4:	str	r3, [sp, #132]	; 0x84
   120d8:	bl	11338 <localeconv@plt>
   120dc:	ldr	r5, [r0]
   120e0:	mov	r4, r0
   120e4:	mov	r0, r5
   120e8:	str	r5, [sp, #52]	; 0x34
   120ec:	bl	11254 <strlen@plt>
   120f0:	sub	r3, r0, #1
   120f4:	mov	fp, r0
   120f8:	cmp	r3, #15
   120fc:	ldrhi	r5, [pc, #1076]	; 12538 <close_stdout@@Base+0x6b8>
   12100:	movhi	fp, #1
   12104:	addhi	r5, pc, r5
   12108:	strhi	r5, [sp, #52]	; 0x34
   1210c:	ldr	r5, [r4, #4]
   12110:	ldr	r9, [r4, #8]
   12114:	mov	r0, r5
   12118:	str	r5, [sp, #40]	; 0x28
   1211c:	bl	11254 <strlen@plt>
   12120:	cmp	r0, #16
   12124:	ldrhi	r4, [pc, #1040]	; 1253c <close_stdout@@Base+0x6bc>
   12128:	addhi	r4, pc, r4
   1212c:	strhi	r4, [sp, #40]	; 0x28
   12130:	ldrd	r4, [sp, #200]	; 0xc8
   12134:	ldrd	r0, [sp, #192]	; 0xc0
   12138:	cmp	r5, r1
   1213c:	cmpeq	r4, r0
   12140:	ldr	r4, [sp, #28]
   12144:	add	r4, r4, #648	; 0x288
   12148:	str	r4, [sp, #32]
   1214c:	str	r4, [sp, #36]	; 0x24
   12150:	bhi	12388 <close_stdout@@Base+0x508>
   12154:	ldrd	r2, [sp, #200]	; 0xc8
   12158:	bl	1645c <close_stdout@@Base+0x45dc>
   1215c:	orrs	r5, r2, r3
   12160:	bne	121a0 <close_stdout@@Base+0x320>
   12164:	ldrd	r2, [sp, #200]	; 0xc8
   12168:	ldrd	r0, [sp, #192]	; 0xc0
   1216c:	bl	1645c <close_stdout@@Base+0x45dc>
   12170:	mul	r2, r0, r7
   12174:	mov	r3, r1
   12178:	umull	r4, r5, r0, r6
   1217c:	mla	r1, r6, r1, r2
   12180:	mov	r2, r0
   12184:	add	r5, r1, r5
   12188:	mov	r0, r4
   1218c:	mov	r1, r5
   12190:	bl	1645c <close_stdout@@Base+0x45dc>
   12194:	cmp	r1, r7
   12198:	cmpeq	r0, r6
   1219c:	beq	127b0 <close_stdout@@Base+0x930>
   121a0:	mov	r0, r6
   121a4:	mov	r1, r7
   121a8:	bl	163e8 <close_stdout@@Base+0x4568>
   121ac:	vmov	d9, r0, r1
   121b0:	ldrd	r0, [sp, #192]	; 0xc0
   121b4:	bl	163e8 <close_stdout@@Base+0x4568>
   121b8:	vmov	d8, r0, r1
   121bc:	ldrd	r0, [sp, #200]	; 0xc8
   121c0:	bl	163e8 <close_stdout@@Base+0x4568>
   121c4:	tst	r8, #16
   121c8:	vmov	d7, r0, r1
   121cc:	vdiv.f64	d8, d8, d7
   121d0:	vmul.f64	d8, d9, d8
   121d4:	beq	12548 <close_stdout@@Base+0x6c8>
   121d8:	vldr	s15, [sp, #60]	; 0x3c
   121dc:	mov	r6, #0
   121e0:	vcvt.f64.s32	d6, s15
   121e4:	vmov.f64	d7, d6
   121e8:	add	r6, r6, #1
   121ec:	vmov.f64	d5, d7
   121f0:	vmul.f64	d7, d7, d6
   121f4:	vcmpe.f64	d8, d7
   121f8:	vmrs	APSR_nzcv, fpscr
   121fc:	blt	12208 <close_stdout@@Base+0x388>
   12200:	cmp	r6, #8
   12204:	bne	121e8 <close_stdout@@Base+0x368>
   12208:	vdiv.f64	d8, d8, d5
   1220c:	ldr	r4, [sp, #48]	; 0x30
   12210:	cmp	r4, #1
   12214:	vmoveq	r0, r1, d8
   12218:	beq	12278 <close_stdout@@Base+0x3f8>
   1221c:	vldr	d7, [pc, #772]	; 12528 <close_stdout@@Base+0x6a8>
   12220:	vcmpe.f64	d8, d7
   12224:	vmov	r0, r1, d8
   12228:	vmrs	APSR_nzcv, fpscr
   1222c:	bpl	12278 <close_stdout@@Base+0x3f8>
   12230:	bl	164a8 <close_stdout@@Base+0x4628>
   12234:	ldr	r2, [sp, #48]	; 0x30
   12238:	cmp	r2, #0
   1223c:	mov	r4, r0
   12240:	mov	r5, r1
   12244:	movne	r0, #0
   12248:	movne	r1, #0
   1224c:	bne	1226c <close_stdout@@Base+0x3ec>
   12250:	bl	163e8 <close_stdout@@Base+0x4568>
   12254:	vmov	d7, r0, r1
   12258:	ldr	r1, [sp, #48]	; 0x30
   1225c:	vcmp.f64	d8, d7
   12260:	vmrs	APSR_nzcv, fpscr
   12264:	moveq	r0, #0
   12268:	movne	r0, #1
   1226c:	adds	r0, r0, r4
   12270:	adc	r1, r1, r5
   12274:	bl	163e8 <close_stdout@@Base+0x4568>
   12278:	ldr	r3, [pc, #704]	; 12540 <close_stdout@@Base+0x6c0>
   1227c:	mvn	r2, #0
   12280:	strd	r0, [sp]
   12284:	mov	r1, #1
   12288:	add	r3, pc, r3
   1228c:	ldr	r0, [sp, #28]
   12290:	add	r4, fp, r1
   12294:	bl	11284 <__sprintf_chk@plt>
   12298:	ldr	r0, [sp, #28]
   1229c:	bl	11254 <strlen@plt>
   122a0:	ldr	r5, [sp, #56]	; 0x38
   122a4:	cmp	r5, #0
   122a8:	movne	r3, #1
   122ac:	moveq	r3, #2
   122b0:	add	r3, r3, r4
   122b4:	mov	fp, r0
   122b8:	cmp	r0, r3
   122bc:	bhi	122dc <close_stdout@@Base+0x45c>
   122c0:	tst	r8, #8
   122c4:	beq	12594 <close_stdout@@Base+0x714>
   122c8:	ldr	r5, [sp, #28]
   122cc:	add	r3, r5, r0
   122d0:	ldrb	r3, [r3, #-1]
   122d4:	cmp	r3, #48	; 0x30
   122d8:	bne	12594 <close_stdout@@Base+0x714>
   122dc:	vmov.f64	d5, #36	; 0x41200000  10.0
   122e0:	ldr	r4, [sp, #48]	; 0x30
   122e4:	cmp	r4, #1
   122e8:	vmul.f64	d8, d8, d5
   122ec:	beq	12350 <close_stdout@@Base+0x4d0>
   122f0:	vldr	d7, [pc, #560]	; 12528 <close_stdout@@Base+0x6a8>
   122f4:	vcmpe.f64	d8, d7
   122f8:	vmrs	APSR_nzcv, fpscr
   122fc:	bpl	12350 <close_stdout@@Base+0x4d0>
   12300:	vmov	r0, r1, d8
   12304:	bl	164a8 <close_stdout@@Base+0x4628>
   12308:	ldr	r2, [sp, #48]	; 0x30
   1230c:	cmp	r2, #0
   12310:	mov	r4, r0
   12314:	mov	r5, r1
   12318:	movne	r0, #0
   1231c:	movne	r1, #0
   12320:	bne	12340 <close_stdout@@Base+0x4c0>
   12324:	bl	163e8 <close_stdout@@Base+0x4568>
   12328:	vmov	d7, r0, r1
   1232c:	ldr	r1, [sp, #48]	; 0x30
   12330:	vcmp.f64	d8, d7
   12334:	vmrs	APSR_nzcv, fpscr
   12338:	moveq	r0, #0
   1233c:	movne	r0, #1
   12340:	adds	r0, r0, r4
   12344:	adc	r1, r1, r5
   12348:	bl	163e8 <close_stdout@@Base+0x4568>
   1234c:	vmov	d8, r0, r1
   12350:	ldr	r3, [pc, #492]	; 12544 <close_stdout@@Base+0x6c4>
   12354:	mov	r1, #1
   12358:	vmov.f64	d7, #36	; 0x41200000  10.0
   1235c:	mvn	r2, #0
   12360:	add	r3, pc, r3
   12364:	ldr	r0, [sp, #28]
   12368:	mov	r4, #0
   1236c:	vdiv.f64	d8, d8, d7
   12370:	vstr	d8, [sp]
   12374:	bl	11284 <__sprintf_chk@plt>
   12378:	ldr	r0, [sp, #28]
   1237c:	bl	11254 <strlen@plt>
   12380:	mov	fp, r0
   12384:	b	12594 <close_stdout@@Base+0x714>
   12388:	ldrd	r4, [sp, #192]	; 0xc0
   1238c:	orrs	r5, r4, r5
   12390:	beq	121a0 <close_stdout@@Base+0x320>
   12394:	ldrd	r0, [sp, #200]	; 0xc8
   12398:	ldrd	r2, [sp, #192]	; 0xc0
   1239c:	bl	1645c <close_stdout@@Base+0x45dc>
   123a0:	orrs	r0, r2, r3
   123a4:	bne	121a0 <close_stdout@@Base+0x320>
   123a8:	ldrd	r2, [sp, #192]	; 0xc0
   123ac:	ldrd	r0, [sp, #200]	; 0xc8
   123b0:	bl	1645c <close_stdout@@Base+0x45dc>
   123b4:	strd	r0, [sp, #16]
   123b8:	mov	r0, r6
   123bc:	mov	r1, r7
   123c0:	ldrd	r2, [sp, #16]
   123c4:	bl	1645c <close_stdout@@Base+0x45dc>
   123c8:	mov	r1, #10
   123cc:	umull	r4, r5, r2, r1
   123d0:	mla	r1, r1, r3, r5
   123d4:	strd	r4, [sp, #64]	; 0x40
   123d8:	ldrd	r2, [sp, #16]
   123dc:	str	r1, [sp, #68]	; 0x44
   123e0:	ldrd	r0, [sp, #64]	; 0x40
   123e4:	bl	1645c <close_stdout@@Base+0x45dc>
   123e8:	mov	r0, r6
   123ec:	mov	r1, r7
   123f0:	adds	r6, r2, r2
   123f4:	adc	r7, r3, r3
   123f8:	ldrd	r2, [sp, #16]
   123fc:	bl	1645c <close_stdout@@Base+0x45dc>
   12400:	ldrd	r2, [sp, #16]
   12404:	mov	r4, r0
   12408:	mov	r5, r1
   1240c:	ldrd	r0, [sp, #64]	; 0x40
   12410:	bl	1645c <close_stdout@@Base+0x45dc>
   12414:	str	r0, [sp, #64]	; 0x40
   12418:	ldrd	r0, [sp, #16]
   1241c:	cmp	r1, r7
   12420:	cmpeq	r0, r6
   12424:	bls	1291c <close_stdout@@Base+0xa9c>
   12428:	orrs	r1, r6, r7
   1242c:	moveq	ip, #0
   12430:	movne	ip, #1
   12434:	ands	r0, r8, #16
   12438:	str	r0, [sp, #72]	; 0x48
   1243c:	beq	1280c <close_stdout@@Base+0x98c>
   12440:	ldr	r2, [sp, #60]	; 0x3c
   12444:	mov	r3, #0
   12448:	cmp	r5, r3
   1244c:	cmpeq	r4, r2
   12450:	strd	r2, [sp, #16]
   12454:	bcc	12974 <close_stdout@@Base+0xaf4>
   12458:	mov	r6, #0
   1245c:	mov	sl, ip
   12460:	str	r9, [sp, #80]	; 0x50
   12464:	mov	ip, r6
   12468:	str	r8, [sp, #84]	; 0x54
   1246c:	mov	r9, r3
   12470:	ldr	r6, [sp, #64]	; 0x40
   12474:	mov	r8, r2
   12478:	str	fp, [sp, #76]	; 0x4c
   1247c:	ldr	r7, [sp, #60]	; 0x3c
   12480:	b	124a4 <close_stdout@@Base+0x624>
   12484:	adds	sl, sl, #0
   12488:	movne	sl, #1
   1248c:	cmp	r9, r5
   12490:	cmpeq	r8, r4
   12494:	add	ip, ip, #1
   12498:	bhi	129a8 <close_stdout@@Base+0xb28>
   1249c:	cmp	ip, #8
   124a0:	beq	12984 <close_stdout@@Base+0xb04>
   124a4:	mov	r0, r4
   124a8:	mov	r1, r5
   124ac:	mov	r2, r8
   124b0:	mov	r3, r9
   124b4:	str	ip, [sp, #12]
   124b8:	bl	1645c <close_stdout@@Base+0x45dc>
   124bc:	mov	r1, r7
   124c0:	asr	fp, sl, #1
   124c4:	add	r2, r2, r2, lsl #2
   124c8:	add	r6, r6, r2, lsl #1
   124cc:	mov	r0, r6
   124d0:	bl	16084 <close_stdout@@Base+0x4204>
   124d4:	mov	r2, r8
   124d8:	mov	r3, r9
   124dc:	mov	r0, r4
   124e0:	add	fp, fp, r1, lsl #1
   124e4:	mov	r1, r5
   124e8:	bl	1645c <close_stdout@@Base+0x45dc>
   124ec:	add	sl, fp, sl
   124f0:	mov	r4, r0
   124f4:	mov	r5, r1
   124f8:	mov	r0, r6
   124fc:	mov	r1, r7
   12500:	bl	15e98 <close_stdout@@Base+0x4018>
   12504:	cmp	r7, fp
   12508:	ldr	ip, [sp, #12]
   1250c:	mov	r6, r0
   12510:	bhi	12484 <close_stdout@@Base+0x604>
   12514:	cmp	r7, sl
   12518:	movcs	sl, #2
   1251c:	movcc	sl, #3
   12520:	b	1248c <close_stdout@@Base+0x60c>
   12524:	nop	{0}
   12528:	andeq	r0, r0, r0
   1252c:	mvnsmi	r0, #0
   12530:	andeq	r5, r1, r0, ror #30
   12534:	andeq	r0, r0, ip, lsl #2
   12538:	ldrdeq	r5, [r0], -r4
   1253c:	andeq	r5, r0, r0, lsr #32
   12540:	andeq	r4, r0, ip, asr pc
   12544:	andeq	r4, r0, ip, ror lr
   12548:	ldr	r4, [sp, #48]	; 0x30
   1254c:	cmp	r4, #1
   12550:	beq	12564 <close_stdout@@Base+0x6e4>
   12554:	vldr	d7, [pc, #972]	; 12928 <close_stdout@@Base+0xaa8>
   12558:	vcmpe.f64	d8, d7
   1255c:	vmrs	APSR_nzcv, fpscr
   12560:	bmi	1275c <close_stdout@@Base+0x8dc>
   12564:	ldr	r3, [pc, #964]	; 12930 <close_stdout@@Base+0xab0>
   12568:	mov	r1, #1
   1256c:	mvn	r2, #0
   12570:	vstr	d8, [sp]
   12574:	add	r3, pc, r3
   12578:	ldr	r0, [sp, #28]
   1257c:	bl	11284 <__sprintf_chk@plt>
   12580:	ldr	r0, [sp, #28]
   12584:	bl	11254 <strlen@plt>
   12588:	mov	r4, #0
   1258c:	mvn	r6, #0
   12590:	mov	fp, r0
   12594:	ldr	r5, [sp, #32]
   12598:	mov	r2, fp
   1259c:	ldr	r1, [sp, #28]
   125a0:	rsb	sl, fp, r5
   125a4:	rsb	fp, r4, fp
   125a8:	add	fp, sl, fp
   125ac:	mov	r0, sl
   125b0:	bl	110f8 <memmove@plt>
   125b4:	str	fp, [sp, #16]
   125b8:	tst	r8, #4
   125bc:	bne	12670 <close_stdout@@Base+0x7f0>
   125c0:	tst	r8, #128	; 0x80
   125c4:	beq	12640 <close_stdout@@Base+0x7c0>
   125c8:	cmn	r6, #1
   125cc:	beq	127bc <close_stdout@@Base+0x93c>
   125d0:	and	r3, r8, #256	; 0x100
   125d4:	orrs	r5, r6, r3
   125d8:	beq	12640 <close_stdout@@Base+0x7c0>
   125dc:	tst	r8, #64	; 0x40
   125e0:	bne	12740 <close_stdout@@Base+0x8c0>
   125e4:	cmp	r6, #0
   125e8:	ldreq	r2, [sp, #36]	; 0x24
   125ec:	beq	12618 <close_stdout@@Base+0x798>
   125f0:	ldr	r4, [sp, #56]	; 0x38
   125f4:	ldr	r5, [sp, #36]	; 0x24
   125f8:	cmp	r4, #0
   125fc:	add	r2, r5, #1
   12600:	beq	12730 <close_stdout@@Base+0x8b0>
   12604:	ldr	r1, [pc, #808]	; 12934 <close_stdout@@Base+0xab4>
   12608:	add	r1, pc, r1
   1260c:	ldrb	r1, [r1, r6]
   12610:	ldr	r4, [sp, #36]	; 0x24
   12614:	strb	r1, [r4]
   12618:	cmp	r3, #0
   1261c:	streq	r2, [sp, #36]	; 0x24
   12620:	beq	12640 <close_stdout@@Base+0x7c0>
   12624:	ldr	r5, [sp, #56]	; 0x38
   12628:	cmp	r5, #0
   1262c:	bne	1271c <close_stdout@@Base+0x89c>
   12630:	mov	r3, #66	; 0x42
   12634:	add	r4, r2, #1
   12638:	strb	r3, [r2]
   1263c:	str	r4, [sp, #36]	; 0x24
   12640:	ldr	r5, [sp, #36]	; 0x24
   12644:	mov	r3, #0
   12648:	ldr	r4, [sp, #44]	; 0x2c
   1264c:	mov	r0, sl
   12650:	ldr	r2, [sp, #132]	; 0x84
   12654:	strb	r3, [r5]
   12658:	ldr	r3, [r4]
   1265c:	cmp	r2, r3
   12660:	bne	12ac8 <close_stdout@@Base+0xc48>
   12664:	add	sp, sp, #140	; 0x8c
   12668:	vpop	{d8-d9}
   1266c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12670:	ldr	r0, [sp, #40]	; 0x28
   12674:	add	r5, sp, #88	; 0x58
   12678:	ldr	r4, [sp, #16]
   1267c:	str	r5, [sp, #16]
   12680:	bl	11254 <strlen@plt>
   12684:	rsb	fp, sl, r4
   12688:	mov	r1, sl
   1268c:	add	r7, sl, fp
   12690:	mov	r3, #41	; 0x29
   12694:	mov	r2, fp
   12698:	mvn	r5, #0
   1269c:	mov	r4, r0
   126a0:	add	r0, sp, #88	; 0x58
   126a4:	bl	11188 <__memcpy_chk@plt>
   126a8:	mov	ip, r7
   126ac:	ldr	sl, [sp, #40]	; 0x28
   126b0:	add	r7, sp, #88	; 0x58
   126b4:	b	126d0 <close_stdout@@Base+0x850>
   126b8:	rsb	ip, r4, r0
   126bc:	mov	r1, sl
   126c0:	mov	r2, r4
   126c4:	mov	r0, ip
   126c8:	bl	1111c <memcpy@plt>
   126cc:	mov	ip, r0
   126d0:	ldrb	r3, [r9]
   126d4:	cmp	r3, #0
   126d8:	beq	126ec <close_stdout@@Base+0x86c>
   126dc:	cmp	r3, #255	; 0xff
   126e0:	add	r9, r9, #1
   126e4:	movne	r5, r3
   126e8:	moveq	r5, fp
   126ec:	cmp	r5, fp
   126f0:	movcs	r5, fp
   126f4:	rsb	r3, r5, ip
   126f8:	rsb	fp, r5, fp
   126fc:	add	r1, r7, fp
   12700:	mov	r2, r5
   12704:	mov	r0, r3
   12708:	bl	1111c <memcpy@plt>
   1270c:	cmp	fp, #0
   12710:	bne	126b8 <close_stdout@@Base+0x838>
   12714:	mov	sl, r0
   12718:	b	125c0 <close_stdout@@Base+0x740>
   1271c:	cmp	r6, #0
   12720:	movne	r3, #105	; 0x69
   12724:	strbne	r3, [r2]
   12728:	addne	r2, r2, #1
   1272c:	b	12630 <close_stdout@@Base+0x7b0>
   12730:	cmp	r6, #1
   12734:	moveq	r1, #107	; 0x6b
   12738:	bne	12604 <close_stdout@@Base+0x784>
   1273c:	b	12610 <close_stdout@@Base+0x790>
   12740:	ldr	r5, [sp, #28]
   12744:	mov	r2, #32
   12748:	ldr	r4, [sp, #32]
   1274c:	strb	r2, [r5, #648]	; 0x288
   12750:	add	r4, r4, #1
   12754:	str	r4, [sp, #36]	; 0x24
   12758:	b	125e4 <close_stdout@@Base+0x764>
   1275c:	vmov	r0, r1, d8
   12760:	bl	164a8 <close_stdout@@Base+0x4628>
   12764:	ldr	r2, [sp, #48]	; 0x30
   12768:	cmp	r2, #0
   1276c:	mov	r4, r0
   12770:	mov	r5, r1
   12774:	movne	r0, #0
   12778:	movne	r1, #0
   1277c:	bne	1279c <close_stdout@@Base+0x91c>
   12780:	bl	163e8 <close_stdout@@Base+0x4568>
   12784:	vmov	d7, r0, r1
   12788:	ldr	r1, [sp, #48]	; 0x30
   1278c:	vcmp.f64	d8, d7
   12790:	vmrs	APSR_nzcv, fpscr
   12794:	moveq	r0, #0
   12798:	movne	r0, #1
   1279c:	adds	r0, r0, r4
   127a0:	adc	r1, r1, r5
   127a4:	bl	163e8 <close_stdout@@Base+0x4568>
   127a8:	vmov	d8, r0, r1
   127ac:	b	12564 <close_stdout@@Base+0x6e4>
   127b0:	mov	ip, #0
   127b4:	str	ip, [sp, #64]	; 0x40
   127b8:	b	12434 <close_stdout@@Base+0x5b4>
   127bc:	ldrd	r4, [sp, #200]	; 0xc8
   127c0:	cmp	r5, #0
   127c4:	cmpeq	r4, #1
   127c8:	bls	12a68 <close_stdout@@Base+0xbe8>
   127cc:	ldr	ip, [sp, #60]	; 0x3c
   127d0:	mov	r6, #1
   127d4:	mov	r2, #1
   127d8:	mov	r3, #0
   127dc:	mov	r0, r4
   127e0:	mov	r1, r5
   127e4:	mul	r4, ip, r3
   127e8:	umull	r2, r3, r2, ip
   127ec:	add	r3, r4, r3
   127f0:	cmp	r1, r3
   127f4:	cmpeq	r0, r2
   127f8:	bls	125d0 <close_stdout@@Base+0x750>
   127fc:	add	r6, r6, #1
   12800:	cmp	r6, #8
   12804:	bne	127e4 <close_stdout@@Base+0x964>
   12808:	b	125d0 <close_stdout@@Base+0x750>
   1280c:	ldr	r0, [sp, #32]
   12810:	mvn	r6, #0
   12814:	str	r0, [sp, #16]
   12818:	ldr	r0, [sp, #48]	; 0x30
   1281c:	cmp	r0, #1
   12820:	beq	12938 <close_stdout@@Base+0xab8>
   12824:	ldr	r0, [sp, #48]	; 0x30
   12828:	cmp	r0, #0
   1282c:	movne	ip, #0
   12830:	bne	12848 <close_stdout@@Base+0x9c8>
   12834:	ldr	r3, [sp, #64]	; 0x40
   12838:	add	ip, r3, ip
   1283c:	cmp	ip, #0
   12840:	movle	ip, #0
   12844:	movgt	ip, #1
   12848:	cmp	ip, #0
   1284c:	beq	128cc <close_stdout@@Base+0xa4c>
   12850:	ldr	r0, [sp, #72]	; 0x48
   12854:	adds	r4, r4, #1
   12858:	adc	r5, r5, #0
   1285c:	cmp	r0, #0
   12860:	beq	128cc <close_stdout@@Base+0xa4c>
   12864:	ldr	r0, [sp, #60]	; 0x3c
   12868:	mov	r1, #0
   1286c:	mov	r3, r1
   12870:	mov	r2, r0
   12874:	cmp	r3, r5
   12878:	cmpeq	r2, r4
   1287c:	bne	128cc <close_stdout@@Base+0xa4c>
   12880:	cmp	r6, #8
   12884:	beq	128cc <close_stdout@@Base+0xa4c>
   12888:	tst	r8, #8
   1288c:	add	r6, r6, #1
   12890:	movne	r4, #1
   12894:	movne	r5, #0
   12898:	bne	128cc <close_stdout@@Base+0xa4c>
   1289c:	ldr	r4, [sp, #16]
   128a0:	mov	r2, #48	; 0x30
   128a4:	ldr	r1, [sp, #52]	; 0x34
   128a8:	mov	r5, #0
   128ac:	sub	r3, r4, #1
   128b0:	rsb	r3, fp, r3
   128b4:	strb	r2, [r4, #-1]
   128b8:	mov	r2, fp
   128bc:	str	r3, [sp, #16]
   128c0:	mov	r0, r3
   128c4:	mov	r4, #1
   128c8:	bl	1111c <memcpy@plt>
   128cc:	ldr	r0, [sp, #16]
   128d0:	sub	r7, r0, #1
   128d4:	mov	r0, r4
   128d8:	mov	r1, r5
   128dc:	mov	r2, #10
   128e0:	mov	r3, #0
   128e4:	bl	1645c <close_stdout@@Base+0x45dc>
   128e8:	mov	sl, r7
   128ec:	mov	r0, r4
   128f0:	mov	r1, r5
   128f4:	mov	r3, #0
   128f8:	add	r2, r2, #48	; 0x30
   128fc:	strb	r2, [r7], #-1
   12900:	mov	r2, #10
   12904:	bl	1645c <close_stdout@@Base+0x45dc>
   12908:	mov	r4, r0
   1290c:	mov	r5, r1
   12910:	orrs	r1, r4, r5
   12914:	bne	128d4 <close_stdout@@Base+0xa54>
   12918:	b	125b8 <close_stdout@@Base+0x738>
   1291c:	movcc	ip, #3
   12920:	movcs	ip, #2
   12924:	b	12434 <close_stdout@@Base+0x5b4>
   12928:	andeq	r0, r0, r0
   1292c:	mvnsmi	r0, #0
   12930:	andeq	r4, r0, r8, ror #24
   12934:			; <UNDEFINED> instruction: 0x00004bbc
   12938:	mov	r2, #1
   1293c:	mov	r3, #0
   12940:	and	r2, r2, r4
   12944:	and	r3, r3, r5
   12948:	adds	r2, r2, ip
   1294c:	adc	r3, r3, ip, asr #31
   12950:	orr	ip, r2, r3
   12954:	ldr	r3, [sp, #64]	; 0x40
   12958:	cmp	ip, #0
   1295c:	addne	r3, r3, #1
   12960:	cmp	r3, #5
   12964:	mov	ip, r3
   12968:	movle	ip, #0
   1296c:	movgt	ip, #1
   12970:	b	12848 <close_stdout@@Base+0x9c8>
   12974:	ldr	r1, [sp, #32]
   12978:	mov	r6, #0
   1297c:	str	r1, [sp, #16]
   12980:	b	12818 <close_stdout@@Base+0x998>
   12984:	ldr	r2, [sp, #32]
   12988:	str	r6, [sp, #64]	; 0x40
   1298c:	mov	r6, ip
   12990:	ldr	fp, [sp, #76]	; 0x4c
   12994:	mov	ip, sl
   12998:	ldr	r9, [sp, #80]	; 0x50
   1299c:	ldr	r8, [sp, #84]	; 0x54
   129a0:	str	r2, [sp, #16]
   129a4:	b	12818 <close_stdout@@Base+0x998>
   129a8:	cmp	r5, #0
   129ac:	cmpeq	r4, #9
   129b0:	str	r6, [sp, #64]	; 0x40
   129b4:	ldr	fp, [sp, #76]	; 0x4c
   129b8:	mov	r6, ip
   129bc:	ldrhi	r3, [sp, #32]
   129c0:	mov	ip, sl
   129c4:	ldr	r9, [sp, #80]	; 0x50
   129c8:	ldr	r8, [sp, #84]	; 0x54
   129cc:	strhi	r3, [sp, #16]
   129d0:	bhi	12818 <close_stdout@@Base+0x998>
   129d4:	ldr	r3, [sp, #48]	; 0x30
   129d8:	cmp	r3, #1
   129dc:	beq	12a70 <close_stdout@@Base+0xbf0>
   129e0:	adds	r3, sl, #0
   129e4:	ldr	r1, [sp, #48]	; 0x30
   129e8:	movne	r3, #1
   129ec:	cmp	r1, #0
   129f0:	movne	r3, #0
   129f4:	cmp	r3, #0
   129f8:	ldr	r3, [sp, #64]	; 0x40
   129fc:	beq	12a50 <close_stdout@@Base+0xbd0>
   12a00:	add	r3, r3, #1
   12a04:	str	r3, [sp, #64]	; 0x40
   12a08:	cmp	r3, #10
   12a0c:	beq	12aa0 <close_stdout@@Base+0xc20>
   12a10:	ldr	r0, [sp, #28]
   12a14:	ldr	r1, [sp, #64]	; 0x40
   12a18:	add	r2, r0, #644	; 0x284
   12a1c:	add	r2, r2, #3
   12a20:	add	r3, r1, #48	; 0x30
   12a24:	rsb	r2, fp, r2
   12a28:	str	r2, [sp, #16]
   12a2c:	strb	r3, [r0, #647]	; 0x287
   12a30:	mov	r2, fp
   12a34:	ldr	r1, [sp, #52]	; 0x34
   12a38:	mov	r3, #0
   12a3c:	ldr	r0, [sp, #16]
   12a40:	str	r3, [sp, #64]	; 0x40
   12a44:	bl	1111c <memcpy@plt>
   12a48:	ldr	ip, [sp, #64]	; 0x40
   12a4c:	b	12818 <close_stdout@@Base+0x998>
   12a50:	cmp	r3, #0
   12a54:	bne	12a10 <close_stdout@@Base+0xb90>
   12a58:	ands	r3, r8, #8
   12a5c:	bne	12a8c <close_stdout@@Base+0xc0c>
   12a60:	str	r3, [sp, #64]	; 0x40
   12a64:	b	12a10 <close_stdout@@Base+0xb90>
   12a68:	mov	r6, #0
   12a6c:	b	125d0 <close_stdout@@Base+0x750>
   12a70:	ldr	r0, [sp, #64]	; 0x40
   12a74:	and	r3, r0, #1
   12a78:	add	r3, sl, r3
   12a7c:	cmp	r3, #2
   12a80:	movle	r3, #0
   12a84:	movgt	r3, #1
   12a88:	b	129f4 <close_stdout@@Base+0xb74>
   12a8c:	ldr	r1, [sp, #32]
   12a90:	mov	r3, #0
   12a94:	str	r3, [sp, #64]	; 0x40
   12a98:	str	r1, [sp, #16]
   12a9c:	b	12818 <close_stdout@@Base+0x998>
   12aa0:	adds	r4, r4, #1
   12aa4:	mov	ip, #0
   12aa8:	adc	r5, r5, #0
   12aac:	cmp	r5, #0
   12ab0:	cmpeq	r4, #10
   12ab4:	bne	12a58 <close_stdout@@Base+0xbd8>
   12ab8:	ldr	r0, [sp, #32]
   12abc:	str	ip, [sp, #64]	; 0x40
   12ac0:	str	r0, [sp, #16]
   12ac4:	b	12818 <close_stdout@@Base+0x998>
   12ac8:	bl	11158 <__stack_chk_fail@plt>
   12acc:	ldr	r3, [pc, #432]	; 12c84 <close_stdout@@Base+0xe04>
   12ad0:	push	{r4, r5, r6, r7, r8, r9, lr}
   12ad4:	subs	r4, r0, #0
   12ad8:	ldr	r0, [pc, #424]	; 12c88 <close_stdout@@Base+0xe08>
   12adc:	add	r3, pc, r3
   12ae0:	sub	sp, sp, #20
   12ae4:	mov	r8, r1
   12ae8:	mov	r6, r2
   12aec:	ldr	r7, [r3, r0]
   12af0:	ldr	r3, [r7]
   12af4:	str	r3, [sp, #12]
   12af8:	beq	12c1c <close_stdout@@Base+0xd9c>
   12afc:	ldrb	r3, [r4]
   12b00:	ldr	r5, [pc, #388]	; 12c8c <close_stdout@@Base+0xe0c>
   12b04:	cmp	r3, #39	; 0x27
   12b08:	ldr	r1, [pc, #384]	; 12c90 <close_stdout@@Base+0xe10>
   12b0c:	addeq	r4, r4, #1
   12b10:	add	r5, pc, r5
   12b14:	add	r1, pc, r1
   12b18:	mov	r3, #4
   12b1c:	mov	r0, r4
   12b20:	add	r2, r5, #12
   12b24:	moveq	r9, #4
   12b28:	movne	r9, #0
   12b2c:	bl	15678 <close_stdout@@Base+0x37f8>
   12b30:	cmp	r0, #0
   12b34:	blt	12ba0 <close_stdout@@Base+0xd20>
   12b38:	add	r0, r5, r0, lsl #2
   12b3c:	mov	r4, #1
   12b40:	mov	r5, #0
   12b44:	strd	r4, [r6]
   12b48:	ldr	r3, [r0, #12]
   12b4c:	orr	r9, r9, r3
   12b50:	mov	r0, #0
   12b54:	str	r9, [r8]
   12b58:	ldrd	r4, [r6]
   12b5c:	orrs	r3, r4, r5
   12b60:	bne	12b88 <close_stdout@@Base+0xd08>
   12b64:	ldr	r0, [pc, #296]	; 12c94 <close_stdout@@Base+0xe14>
   12b68:	mov	r5, #0
   12b6c:	add	r0, pc, r0
   12b70:	bl	111f4 <getenv@plt>
   12b74:	cmp	r0, #0
   12b78:	mov	r0, #4
   12b7c:	movne	r4, #512	; 0x200
   12b80:	moveq	r4, #1024	; 0x400
   12b84:	strd	r4, [r6]
   12b88:	ldr	r2, [sp, #12]
   12b8c:	ldr	r3, [r7]
   12b90:	cmp	r2, r3
   12b94:	bne	12c80 <close_stdout@@Base+0xe00>
   12b98:	add	sp, sp, #20
   12b9c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12ba0:	ldr	ip, [pc, #240]	; 12c98 <close_stdout@@Base+0xe18>
   12ba4:	mov	r3, r6
   12ba8:	mov	r0, r4
   12bac:	add	r1, sp, #8
   12bb0:	add	ip, pc, ip
   12bb4:	mov	r2, #0
   12bb8:	str	ip, [sp]
   12bbc:	bl	14d70 <close_stdout@@Base+0x2ef0>
   12bc0:	cmp	r0, #0
   12bc4:	movne	r3, #0
   12bc8:	strne	r3, [r8]
   12bcc:	bne	12b58 <close_stdout@@Base+0xcd8>
   12bd0:	ldrb	r3, [r4]
   12bd4:	sub	r3, r3, #48	; 0x30
   12bd8:	cmp	r3, #9
   12bdc:	bls	12b50 <close_stdout@@Base+0xcd0>
   12be0:	ldr	r2, [sp, #8]
   12be4:	cmp	r4, r2
   12be8:	beq	12c04 <close_stdout@@Base+0xd84>
   12bec:	ldrb	r3, [r4, #1]!
   12bf0:	sub	r3, r3, #48	; 0x30
   12bf4:	cmp	r3, #9
   12bf8:	bls	12b50 <close_stdout@@Base+0xcd0>
   12bfc:	cmp	r2, r4
   12c00:	bne	12bec <close_stdout@@Base+0xd6c>
   12c04:	ldrb	r3, [r2, #-1]
   12c08:	cmp	r3, #66	; 0x42
   12c0c:	orrne	r9, r9, #128	; 0x80
   12c10:	beq	12c6c <close_stdout@@Base+0xdec>
   12c14:	orr	r9, r9, #32
   12c18:	b	12b50 <close_stdout@@Base+0xcd0>
   12c1c:	ldr	r0, [pc, #120]	; 12c9c <close_stdout@@Base+0xe1c>
   12c20:	add	r0, pc, r0
   12c24:	bl	111f4 <getenv@plt>
   12c28:	subs	r4, r0, #0
   12c2c:	bne	12afc <close_stdout@@Base+0xc7c>
   12c30:	ldr	r0, [pc, #104]	; 12ca0 <close_stdout@@Base+0xe20>
   12c34:	add	r0, pc, r0
   12c38:	bl	111f4 <getenv@plt>
   12c3c:	subs	r4, r0, #0
   12c40:	bne	12afc <close_stdout@@Base+0xc7c>
   12c44:	ldr	r0, [pc, #88]	; 12ca4 <close_stdout@@Base+0xe24>
   12c48:	mov	r9, #0
   12c4c:	add	r0, pc, r0
   12c50:	bl	111f4 <getenv@plt>
   12c54:	mov	r3, #0
   12c58:	cmp	r0, #0
   12c5c:	movne	r2, #512	; 0x200
   12c60:	moveq	r2, #1024	; 0x400
   12c64:	strd	r2, [r6]
   12c68:	b	12b50 <close_stdout@@Base+0xcd0>
   12c6c:	ldrb	r3, [r2, #-2]
   12c70:	orr	r9, r9, #384	; 0x180
   12c74:	cmp	r3, #105	; 0x69
   12c78:	bne	12b50 <close_stdout@@Base+0xcd0>
   12c7c:	b	12c14 <close_stdout@@Base+0xd94>
   12c80:	bl	11158 <__stack_chk_fail@plt>
   12c84:	andeq	r5, r1, ip, lsl r5
   12c88:	andeq	r0, r0, ip, lsl #2
   12c8c:			; <UNDEFINED> instruction: 0x000046b4
   12c90:			; <UNDEFINED> instruction: 0x000153bc
   12c94:	muleq	r0, r8, r6
   12c98:	andeq	r4, r0, r4, ror #12
   12c9c:	andeq	r4, r0, ip, asr #11
   12ca0:	andeq	r4, r0, r4, asr #11
   12ca4:			; <UNDEFINED> instruction: 0x000045b8
   12ca8:	push	{r3, r4, r5, r6, r7, lr}
   12cac:	subs	r4, r0, #0
   12cb0:	ldr	r5, [pc, #172]	; 12d64 <close_stdout@@Base+0xee4>
   12cb4:	add	r5, pc, r5
   12cb8:	beq	12d40 <close_stdout@@Base+0xec0>
   12cbc:	mov	r1, #47	; 0x2f
   12cc0:	bl	11320 <strrchr@plt>
   12cc4:	subs	r6, r0, #0
   12cc8:	beq	12d24 <close_stdout@@Base+0xea4>
   12ccc:	add	r7, r6, #1
   12cd0:	rsb	r3, r4, r7
   12cd4:	cmp	r3, #6
   12cd8:	ble	12d24 <close_stdout@@Base+0xea4>
   12cdc:	ldr	r1, [pc, #132]	; 12d68 <close_stdout@@Base+0xee8>
   12ce0:	sub	r0, r6, #6
   12ce4:	mov	r2, #7
   12ce8:	add	r1, pc, r1
   12cec:	bl	1135c <strncmp@plt>
   12cf0:	cmp	r0, #0
   12cf4:	bne	12d24 <close_stdout@@Base+0xea4>
   12cf8:	ldr	r1, [pc, #108]	; 12d6c <close_stdout@@Base+0xeec>
   12cfc:	mov	r0, r7
   12d00:	mov	r2, #3
   12d04:	add	r1, pc, r1
   12d08:	bl	1135c <strncmp@plt>
   12d0c:	cmp	r0, #0
   12d10:	movne	r4, r7
   12d14:	ldreq	r3, [pc, #84]	; 12d70 <close_stdout@@Base+0xef0>
   12d18:	addeq	r4, r6, #4
   12d1c:	ldreq	r3, [r5, r3]
   12d20:	streq	r4, [r3]
   12d24:	ldr	r2, [pc, #72]	; 12d74 <close_stdout@@Base+0xef4>
   12d28:	ldr	r3, [pc, #72]	; 12d78 <close_stdout@@Base+0xef8>
   12d2c:	ldr	r2, [r5, r2]
   12d30:	str	r4, [r2]
   12d34:	ldr	r3, [r5, r3]
   12d38:	str	r4, [r3]
   12d3c:	pop	{r3, r4, r5, r6, r7, pc}
   12d40:	ldr	r3, [pc, #52]	; 12d7c <close_stdout@@Base+0xefc>
   12d44:	mov	r1, #1
   12d48:	ldr	r0, [pc, #48]	; 12d80 <close_stdout@@Base+0xf00>
   12d4c:	mov	r2, #55	; 0x37
   12d50:	ldr	r3, [r5, r3]
   12d54:	add	r0, pc, r0
   12d58:	ldr	r3, [r3]
   12d5c:	bl	11194 <fwrite@plt>
   12d60:	bl	11368 <abort@plt>
   12d64:	andeq	r5, r1, r4, asr #6
   12d68:	andeq	r4, r0, ip, lsl #11
   12d6c:	andeq	r4, r0, r8, ror r5
   12d70:	andeq	r0, r0, r0, asr #2
   12d74:	andeq	r0, r0, r8, lsr r1
   12d78:	andeq	r0, r0, r4, lsr r1
   12d7c:	andeq	r0, r0, r8, lsl r1
   12d80:	andeq	r4, r0, r8, ror #9
   12d84:	push	{r3, lr}
   12d88:	mov	r3, r0
   12d8c:	mov	r2, #0
   12d90:	cmp	r1, #8
   12d94:	str	r2, [r3], #4
   12d98:	add	r3, r3, #4
   12d9c:	str	r2, [r0, #4]
   12da0:	str	r2, [r3], #4
   12da4:	str	r2, [r3], #4
   12da8:	str	r2, [r3], #4
   12dac:	str	r2, [r3], #4
   12db0:	str	r2, [r3], #4
   12db4:	str	r2, [r3], #4
   12db8:	str	r2, [r3], #4
   12dbc:	str	r2, [r3], #4
   12dc0:	str	r2, [r3], #4
   12dc4:	str	r2, [r3]
   12dc8:	beq	12dd4 <close_stdout@@Base+0xf54>
   12dcc:	str	r1, [r0]
   12dd0:	pop	{r3, pc}
   12dd4:	bl	11368 <abort@plt>
   12dd8:	push	{r4, r5, r6, lr}
   12ddc:	mov	r4, r0
   12de0:	mov	r6, r1
   12de4:	mov	r0, #0
   12de8:	mov	r1, r4
   12dec:	mov	r2, #5
   12df0:	bl	1114c <dcgettext@plt>
   12df4:	cmp	r0, r4
   12df8:	mov	r5, r0
   12dfc:	beq	12e04 <close_stdout@@Base+0xf84>
   12e00:	pop	{r4, r5, r6, pc}
   12e04:	bl	15a78 <close_stdout@@Base+0x3bf8>
   12e08:	ldrb	r3, [r0]
   12e0c:	bic	r3, r3, #32
   12e10:	cmp	r3, #85	; 0x55
   12e14:	bne	12e88 <close_stdout@@Base+0x1008>
   12e18:	ldrb	r3, [r0, #1]
   12e1c:	bic	r3, r3, #32
   12e20:	cmp	r3, #84	; 0x54
   12e24:	bne	12e74 <close_stdout@@Base+0xff4>
   12e28:	ldrb	r3, [r0, #2]
   12e2c:	bic	r3, r3, #32
   12e30:	cmp	r3, #70	; 0x46
   12e34:	bne	12e74 <close_stdout@@Base+0xff4>
   12e38:	ldrb	r3, [r0, #3]
   12e3c:	cmp	r3, #45	; 0x2d
   12e40:	bne	12e74 <close_stdout@@Base+0xff4>
   12e44:	ldrb	r3, [r0, #4]
   12e48:	cmp	r3, #56	; 0x38
   12e4c:	bne	12e74 <close_stdout@@Base+0xff4>
   12e50:	ldrb	r3, [r0, #5]
   12e54:	cmp	r3, #0
   12e58:	bne	12e74 <close_stdout@@Base+0xff4>
   12e5c:	ldrb	r3, [r5]
   12e60:	cmp	r3, #96	; 0x60
   12e64:	beq	12f00 <close_stdout@@Base+0x1080>
   12e68:	ldr	r0, [pc, #180]	; 12f24 <close_stdout@@Base+0x10a4>
   12e6c:	add	r0, pc, r0
   12e70:	pop	{r4, r5, r6, pc}
   12e74:	cmp	r6, #7
   12e78:	beq	12f0c <close_stdout@@Base+0x108c>
   12e7c:	ldr	r0, [pc, #164]	; 12f28 <close_stdout@@Base+0x10a8>
   12e80:	add	r0, pc, r0
   12e84:	pop	{r4, r5, r6, pc}
   12e88:	cmp	r3, #71	; 0x47
   12e8c:	bne	12e74 <close_stdout@@Base+0xff4>
   12e90:	ldrb	r3, [r0, #1]
   12e94:	bic	r3, r3, #32
   12e98:	cmp	r3, #66	; 0x42
   12e9c:	bne	12e74 <close_stdout@@Base+0xff4>
   12ea0:	ldrb	r3, [r0, #2]
   12ea4:	cmp	r3, #49	; 0x31
   12ea8:	bne	12e74 <close_stdout@@Base+0xff4>
   12eac:	ldrb	r3, [r0, #3]
   12eb0:	cmp	r3, #56	; 0x38
   12eb4:	bne	12e74 <close_stdout@@Base+0xff4>
   12eb8:	ldrb	r3, [r0, #4]
   12ebc:	cmp	r3, #48	; 0x30
   12ec0:	bne	12e74 <close_stdout@@Base+0xff4>
   12ec4:	ldrb	r3, [r0, #5]
   12ec8:	cmp	r3, #51	; 0x33
   12ecc:	bne	12e74 <close_stdout@@Base+0xff4>
   12ed0:	ldrb	r3, [r0, #6]
   12ed4:	cmp	r3, #48	; 0x30
   12ed8:	bne	12e74 <close_stdout@@Base+0xff4>
   12edc:	ldrb	r3, [r0, #7]
   12ee0:	cmp	r3, #0
   12ee4:	bne	12e74 <close_stdout@@Base+0xff4>
   12ee8:	ldrb	r3, [r5]
   12eec:	cmp	r3, #96	; 0x60
   12ef0:	beq	12f18 <close_stdout@@Base+0x1098>
   12ef4:	ldr	r0, [pc, #48]	; 12f2c <close_stdout@@Base+0x10ac>
   12ef8:	add	r0, pc, r0
   12efc:	pop	{r4, r5, r6, pc}
   12f00:	ldr	r0, [pc, #40]	; 12f30 <close_stdout@@Base+0x10b0>
   12f04:	add	r0, pc, r0
   12f08:	pop	{r4, r5, r6, pc}
   12f0c:	ldr	r0, [pc, #32]	; 12f34 <close_stdout@@Base+0x10b4>
   12f10:	add	r0, pc, r0
   12f14:	pop	{r4, r5, r6, pc}
   12f18:	ldr	r0, [pc, #24]	; 12f38 <close_stdout@@Base+0x10b8>
   12f1c:	add	r0, pc, r0
   12f20:	pop	{r4, r5, r6, pc}
   12f24:	andeq	r4, r0, r4, lsr r4
   12f28:	andeq	r4, r0, r8, lsr #8
   12f2c:	andeq	r4, r0, ip, lsr #7
   12f30:			; <UNDEFINED> instruction: 0x000043b0
   12f34:	muleq	r0, ip, r3
   12f38:	muleq	r0, r4, r3
   12f3c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12f40:	sub	sp, sp, #124	; 0x7c
   12f44:	ldr	ip, [pc, #3304]	; 13c34 <close_stdout@@Base+0x1db4>
   12f48:	mov	sl, r1
   12f4c:	str	r0, [sp, #40]	; 0x28
   12f50:	mov	r8, r3
   12f54:	ldr	r0, [pc, #3292]	; 13c38 <close_stdout@@Base+0x1db8>
   12f58:	add	ip, pc, ip
   12f5c:	str	r2, [sp, #32]
   12f60:	ldr	r1, [sp, #164]	; 0xa4
   12f64:	mov	r3, ip
   12f68:	ldr	r0, [ip, r0]
   12f6c:	ldr	r2, [sp, #172]	; 0xac
   12f70:	ubfx	r1, r1, #1, #1
   12f74:	str	r1, [sp, #36]	; 0x24
   12f78:	str	r0, [sp, #56]	; 0x38
   12f7c:	ldr	r0, [sp, #168]	; 0xa8
   12f80:	ldr	r1, [sp, #176]	; 0xb0
   12f84:	str	r2, [sp, #72]	; 0x48
   12f88:	str	r0, [sp, #48]	; 0x30
   12f8c:	ldr	r0, [sp, #56]	; 0x38
   12f90:	str	r1, [sp, #68]	; 0x44
   12f94:	ldr	r3, [r0]
   12f98:	str	r3, [sp, #116]	; 0x74
   12f9c:	bl	111ac <__ctype_get_mb_cur_max@plt>
   12fa0:	ldr	r2, [sp, #160]	; 0xa0
   12fa4:	str	r0, [sp, #64]	; 0x40
   12fa8:	cmp	r2, #8
   12fac:	addls	pc, pc, r2, lsl #2
   12fb0:	b	13b10 <close_stdout@@Base+0x1c90>
   12fb4:	b	12fd8 <close_stdout@@Base+0x1158>
   12fb8:	b	13828 <close_stdout@@Base+0x19a8>
   12fbc:	b	13858 <close_stdout@@Base+0x19d8>
   12fc0:	b	13708 <close_stdout@@Base+0x1888>
   12fc4:	b	13748 <close_stdout@@Base+0x18c8>
   12fc8:	b	13774 <close_stdout@@Base+0x18f4>
   12fcc:	b	13794 <close_stdout@@Base+0x1914>
   12fd0:	b	13794 <close_stdout@@Base+0x1914>
   12fd4:	b	13794 <close_stdout@@Base+0x1914>
   12fd8:	mov	r2, #0
   12fdc:	str	r2, [sp, #36]	; 0x24
   12fe0:	mov	r9, r2
   12fe4:	str	r2, [sp, #24]
   12fe8:	str	r2, [sp, #28]
   12fec:	str	r2, [sp, #52]	; 0x34
   12ff0:	ldr	r0, [sp, #36]	; 0x24
   12ff4:	mov	fp, #0
   12ff8:	ldr	r1, [sp, #24]
   12ffc:	eor	r2, r0, #1
   13000:	eor	r3, r1, #1
   13004:	and	r3, r2, r3
   13008:	and	r2, r1, r0
   1300c:	str	r3, [sp, #44]	; 0x2c
   13010:	str	r2, [sp, #76]	; 0x4c
   13014:	cmn	r8, #1
   13018:	beq	13398 <close_stdout@@Base+0x1518>
   1301c:	subs	r3, fp, r8
   13020:	movne	r3, #1
   13024:	cmp	r3, #0
   13028:	beq	133b0 <close_stdout@@Base+0x1530>
   1302c:	ldr	r3, [sp, #28]
   13030:	ldr	r0, [sp, #24]
   13034:	adds	r7, r3, #0
   13038:	movne	r7, #1
   1303c:	ands	r6, r7, r0
   13040:	bne	1389c <close_stdout@@Base+0x1a1c>
   13044:	ldr	r1, [sp, #32]
   13048:	add	r5, r1, fp
   1304c:	ldrb	r4, [r5]
   13050:	cmp	r4, #126	; 0x7e
   13054:	addls	pc, pc, r4, lsl #2
   13058:	b	1361c <close_stdout@@Base+0x179c>
   1305c:	b	13528 <close_stdout@@Base+0x16a8>
   13060:	b	1361c <close_stdout@@Base+0x179c>
   13064:	b	1361c <close_stdout@@Base+0x179c>
   13068:	b	1361c <close_stdout@@Base+0x179c>
   1306c:	b	1361c <close_stdout@@Base+0x179c>
   13070:	b	1361c <close_stdout@@Base+0x179c>
   13074:	b	1361c <close_stdout@@Base+0x179c>
   13078:	b	13510 <close_stdout@@Base+0x1690>
   1307c:	b	134f8 <close_stdout@@Base+0x1678>
   13080:	b	13520 <close_stdout@@Base+0x16a0>
   13084:	b	13518 <close_stdout@@Base+0x1698>
   13088:	b	13508 <close_stdout@@Base+0x1688>
   1308c:	b	13500 <close_stdout@@Base+0x1680>
   13090:	b	134c4 <close_stdout@@Base+0x1644>
   13094:	b	1361c <close_stdout@@Base+0x179c>
   13098:	b	1361c <close_stdout@@Base+0x179c>
   1309c:	b	1361c <close_stdout@@Base+0x179c>
   130a0:	b	1361c <close_stdout@@Base+0x179c>
   130a4:	b	1361c <close_stdout@@Base+0x179c>
   130a8:	b	1361c <close_stdout@@Base+0x179c>
   130ac:	b	1361c <close_stdout@@Base+0x179c>
   130b0:	b	1361c <close_stdout@@Base+0x179c>
   130b4:	b	1361c <close_stdout@@Base+0x179c>
   130b8:	b	1361c <close_stdout@@Base+0x179c>
   130bc:	b	1361c <close_stdout@@Base+0x179c>
   130c0:	b	1361c <close_stdout@@Base+0x179c>
   130c4:	b	1361c <close_stdout@@Base+0x179c>
   130c8:	b	1361c <close_stdout@@Base+0x179c>
   130cc:	b	1361c <close_stdout@@Base+0x179c>
   130d0:	b	1361c <close_stdout@@Base+0x179c>
   130d4:	b	1361c <close_stdout@@Base+0x179c>
   130d8:	b	1361c <close_stdout@@Base+0x179c>
   130dc:	b	13450 <close_stdout@@Base+0x15d0>
   130e0:	b	13450 <close_stdout@@Base+0x15d0>
   130e4:	b	13450 <close_stdout@@Base+0x15d0>
   130e8:	b	13448 <close_stdout@@Base+0x15c8>
   130ec:	b	13450 <close_stdout@@Base+0x15d0>
   130f0:	b	13324 <close_stdout@@Base+0x14a4>
   130f4:	b	13450 <close_stdout@@Base+0x15d0>
   130f8:	b	135c4 <close_stdout@@Base+0x1744>
   130fc:	b	13450 <close_stdout@@Base+0x15d0>
   13100:	b	13450 <close_stdout@@Base+0x15d0>
   13104:	b	13450 <close_stdout@@Base+0x15d0>
   13108:	b	13324 <close_stdout@@Base+0x14a4>
   1310c:	b	13324 <close_stdout@@Base+0x14a4>
   13110:	b	13324 <close_stdout@@Base+0x14a4>
   13114:	b	13324 <close_stdout@@Base+0x14a4>
   13118:	b	13324 <close_stdout@@Base+0x14a4>
   1311c:	b	13324 <close_stdout@@Base+0x14a4>
   13120:	b	13324 <close_stdout@@Base+0x14a4>
   13124:	b	13324 <close_stdout@@Base+0x14a4>
   13128:	b	13324 <close_stdout@@Base+0x14a4>
   1312c:	b	13324 <close_stdout@@Base+0x14a4>
   13130:	b	13324 <close_stdout@@Base+0x14a4>
   13134:	b	13324 <close_stdout@@Base+0x14a4>
   13138:	b	13324 <close_stdout@@Base+0x14a4>
   1313c:	b	13324 <close_stdout@@Base+0x14a4>
   13140:	b	13324 <close_stdout@@Base+0x14a4>
   13144:	b	13324 <close_stdout@@Base+0x14a4>
   13148:	b	13450 <close_stdout@@Base+0x15d0>
   1314c:	b	13450 <close_stdout@@Base+0x15d0>
   13150:	b	13450 <close_stdout@@Base+0x15d0>
   13154:	b	13450 <close_stdout@@Base+0x15d0>
   13158:	b	13258 <close_stdout@@Base+0x13d8>
   1315c:	b	1361c <close_stdout@@Base+0x179c>
   13160:	b	13324 <close_stdout@@Base+0x14a4>
   13164:	b	13324 <close_stdout@@Base+0x14a4>
   13168:	b	13324 <close_stdout@@Base+0x14a4>
   1316c:	b	13324 <close_stdout@@Base+0x14a4>
   13170:	b	13324 <close_stdout@@Base+0x14a4>
   13174:	b	13324 <close_stdout@@Base+0x14a4>
   13178:	b	13324 <close_stdout@@Base+0x14a4>
   1317c:	b	13324 <close_stdout@@Base+0x14a4>
   13180:	b	13324 <close_stdout@@Base+0x14a4>
   13184:	b	13324 <close_stdout@@Base+0x14a4>
   13188:	b	13324 <close_stdout@@Base+0x14a4>
   1318c:	b	13324 <close_stdout@@Base+0x14a4>
   13190:	b	13324 <close_stdout@@Base+0x14a4>
   13194:	b	13324 <close_stdout@@Base+0x14a4>
   13198:	b	13324 <close_stdout@@Base+0x14a4>
   1319c:	b	13324 <close_stdout@@Base+0x14a4>
   131a0:	b	13324 <close_stdout@@Base+0x14a4>
   131a4:	b	13324 <close_stdout@@Base+0x14a4>
   131a8:	b	13324 <close_stdout@@Base+0x14a4>
   131ac:	b	13324 <close_stdout@@Base+0x14a4>
   131b0:	b	13324 <close_stdout@@Base+0x14a4>
   131b4:	b	13324 <close_stdout@@Base+0x14a4>
   131b8:	b	13324 <close_stdout@@Base+0x14a4>
   131bc:	b	13324 <close_stdout@@Base+0x14a4>
   131c0:	b	13324 <close_stdout@@Base+0x14a4>
   131c4:	b	13324 <close_stdout@@Base+0x14a4>
   131c8:	b	13450 <close_stdout@@Base+0x15d0>
   131cc:	b	135a8 <close_stdout@@Base+0x1728>
   131d0:	b	13324 <close_stdout@@Base+0x14a4>
   131d4:	b	13450 <close_stdout@@Base+0x15d0>
   131d8:	b	13324 <close_stdout@@Base+0x14a4>
   131dc:	b	13450 <close_stdout@@Base+0x15d0>
   131e0:	b	13324 <close_stdout@@Base+0x14a4>
   131e4:	b	13324 <close_stdout@@Base+0x14a4>
   131e8:	b	13324 <close_stdout@@Base+0x14a4>
   131ec:	b	13324 <close_stdout@@Base+0x14a4>
   131f0:	b	13324 <close_stdout@@Base+0x14a4>
   131f4:	b	13324 <close_stdout@@Base+0x14a4>
   131f8:	b	13324 <close_stdout@@Base+0x14a4>
   131fc:	b	13324 <close_stdout@@Base+0x14a4>
   13200:	b	13324 <close_stdout@@Base+0x14a4>
   13204:	b	13324 <close_stdout@@Base+0x14a4>
   13208:	b	13324 <close_stdout@@Base+0x14a4>
   1320c:	b	13324 <close_stdout@@Base+0x14a4>
   13210:	b	13324 <close_stdout@@Base+0x14a4>
   13214:	b	13324 <close_stdout@@Base+0x14a4>
   13218:	b	13324 <close_stdout@@Base+0x14a4>
   1321c:	b	13324 <close_stdout@@Base+0x14a4>
   13220:	b	13324 <close_stdout@@Base+0x14a4>
   13224:	b	13324 <close_stdout@@Base+0x14a4>
   13228:	b	13324 <close_stdout@@Base+0x14a4>
   1322c:	b	13324 <close_stdout@@Base+0x14a4>
   13230:	b	13324 <close_stdout@@Base+0x14a4>
   13234:	b	13324 <close_stdout@@Base+0x14a4>
   13238:	b	13324 <close_stdout@@Base+0x14a4>
   1323c:	b	13324 <close_stdout@@Base+0x14a4>
   13240:	b	13324 <close_stdout@@Base+0x14a4>
   13244:	b	13324 <close_stdout@@Base+0x14a4>
   13248:	b	13430 <close_stdout@@Base+0x15b0>
   1324c:	b	13450 <close_stdout@@Base+0x15d0>
   13250:	b	13430 <close_stdout@@Base+0x15b0>
   13254:	b	13448 <close_stdout@@Base+0x15c8>
   13258:	ldr	r3, [sp, #160]	; 0xa0
   1325c:	cmp	r3, #2
   13260:	beq	13aec <close_stdout@@Base+0x1c6c>
   13264:	cmp	r3, #3
   13268:	bne	13324 <close_stdout@@Base+0x14a4>
   1326c:	ldr	r1, [sp, #164]	; 0xa4
   13270:	tst	r1, #4
   13274:	beq	13324 <close_stdout@@Base+0x14a4>
   13278:	add	r3, fp, #2
   1327c:	cmp	r8, r3
   13280:	bls	13324 <close_stdout@@Base+0x14a4>
   13284:	ldrb	r2, [r5, #1]
   13288:	mov	r1, #1
   1328c:	cmp	r2, #63	; 0x3f
   13290:	bne	13324 <close_stdout@@Base+0x14a4>
   13294:	ldr	r0, [sp, #32]
   13298:	ldrb	ip, [r0, r3]
   1329c:	sub	r0, ip, #33	; 0x21
   132a0:	uxtb	r0, r0
   132a4:	cmp	r0, #29
   132a8:	bhi	13324 <close_stdout@@Base+0x14a4>
   132ac:	lsl	r1, r1, r0
   132b0:	movw	r0, #20929	; 0x51c1
   132b4:	movt	r0, #14336	; 0x3800
   132b8:	and	r0, r1, r0
   132bc:	cmp	r0, #0
   132c0:	beq	13324 <close_stdout@@Base+0x14a4>
   132c4:	ldr	r1, [sp, #36]	; 0x24
   132c8:	cmp	r1, #0
   132cc:	bne	1346c <close_stdout@@Base+0x15ec>
   132d0:	cmp	r9, sl
   132d4:	mov	r4, ip
   132d8:	mov	fp, r3
   132dc:	ldrcc	r0, [sp, #40]	; 0x28
   132e0:	strbcc	r2, [r0, r9]
   132e4:	add	r2, r9, #1
   132e8:	cmp	sl, r2
   132ec:	ldrhi	r0, [sp, #40]	; 0x28
   132f0:	movhi	r1, #34	; 0x22
   132f4:	strbhi	r1, [r0, r2]
   132f8:	add	r2, r9, #2
   132fc:	cmp	sl, r2
   13300:	ldrhi	r0, [sp, #40]	; 0x28
   13304:	movhi	r1, #34	; 0x22
   13308:	strbhi	r1, [r0, r2]
   1330c:	add	r2, r9, #3
   13310:	cmp	sl, r2
   13314:	add	r9, r9, #4
   13318:	ldrhi	r0, [sp, #40]	; 0x28
   1331c:	movhi	r1, #63	; 0x3f
   13320:	strbhi	r1, [r0, r2]
   13324:	ldr	r0, [sp, #44]	; 0x2c
   13328:	cmp	r0, #0
   1332c:	bne	13354 <close_stdout@@Base+0x14d4>
   13330:	ldr	r1, [sp, #48]	; 0x30
   13334:	cmp	r1, #0
   13338:	beq	13354 <close_stdout@@Base+0x14d4>
   1333c:	ubfx	r2, r4, #5, #8
   13340:	and	r3, r4, #31
   13344:	ldr	r2, [r1, r2, lsl #2]
   13348:	lsr	r3, r2, r3
   1334c:	tst	r3, #1
   13350:	bne	1335c <close_stdout@@Base+0x14dc>
   13354:	cmp	r6, #0
   13358:	beq	1337c <close_stdout@@Base+0x14fc>
   1335c:	ldr	r2, [sp, #36]	; 0x24
   13360:	cmp	r2, #0
   13364:	bne	1346c <close_stdout@@Base+0x15ec>
   13368:	cmp	r9, sl
   1336c:	ldrcc	r0, [sp, #40]	; 0x28
   13370:	movcc	r3, #92	; 0x5c
   13374:	strbcc	r3, [r0, r9]
   13378:	add	r9, r9, #1
   1337c:	add	fp, fp, #1
   13380:	cmp	r9, sl
   13384:	ldrcc	r1, [sp, #40]	; 0x28
   13388:	strbcc	r4, [r1, r9]
   1338c:	cmn	r8, #1
   13390:	add	r9, r9, #1
   13394:	bne	1301c <close_stdout@@Base+0x119c>
   13398:	ldr	r2, [sp, #32]
   1339c:	ldrb	r3, [r2, fp]
   133a0:	adds	r3, r3, #0
   133a4:	movne	r3, #1
   133a8:	cmp	r3, #0
   133ac:	bne	1302c <close_stdout@@Base+0x11ac>
   133b0:	ldr	r3, [sp, #160]	; 0xa0
   133b4:	cmp	r9, #0
   133b8:	cmpeq	r3, #2
   133bc:	bne	133cc <close_stdout@@Base+0x154c>
   133c0:	ldr	r0, [sp, #36]	; 0x24
   133c4:	cmp	r0, #0
   133c8:	bne	1346c <close_stdout@@Base+0x15ec>
   133cc:	ldr	r1, [sp, #36]	; 0x24
   133d0:	ldr	r2, [sp, #52]	; 0x34
   133d4:	eor	r3, r1, #1
   133d8:	cmp	r2, #0
   133dc:	moveq	r3, #0
   133e0:	andne	r3, r3, #1
   133e4:	cmp	r3, #0
   133e8:	beq	13414 <close_stdout@@Base+0x1594>
   133ec:	ldrb	r3, [r2]
   133f0:	cmp	r3, #0
   133f4:	beq	13414 <close_stdout@@Base+0x1594>
   133f8:	ldr	r1, [sp, #40]	; 0x28
   133fc:	cmp	sl, r9
   13400:	strbhi	r3, [r1, r9]
   13404:	ldrb	r3, [r2, #1]!
   13408:	add	r9, r9, #1
   1340c:	cmp	r3, #0
   13410:	bne	133fc <close_stdout@@Base+0x157c>
   13414:	cmp	r9, sl
   13418:	movcs	r0, r9
   1341c:	ldrcc	r1, [sp, #40]	; 0x28
   13420:	movcc	r3, #0
   13424:	movcc	r0, r9
   13428:	strbcc	r3, [r1, r9]
   1342c:	b	134a8 <close_stdout@@Base+0x1628>
   13430:	cmn	r8, #1
   13434:	beq	13afc <close_stdout@@Base+0x1c7c>
   13438:	subs	r3, r8, #1
   1343c:	movne	r3, #1
   13440:	cmp	r3, #0
   13444:	bne	13324 <close_stdout@@Base+0x14a4>
   13448:	cmp	fp, #0
   1344c:	bne	13324 <close_stdout@@Base+0x14a4>
   13450:	ldr	r3, [sp, #36]	; 0x24
   13454:	ldr	r0, [sp, #160]	; 0xa0
   13458:	cmp	r0, #2
   1345c:	movne	r3, #0
   13460:	andeq	r3, r3, #1
   13464:	cmp	r3, #0
   13468:	beq	13324 <close_stdout@@Base+0x14a4>
   1346c:	ldr	r2, [sp, #164]	; 0xa4
   13470:	mov	ip, #0
   13474:	ldr	r0, [sp, #160]	; 0xa0
   13478:	bic	r3, r2, #2
   1347c:	ldr	r1, [sp, #72]	; 0x48
   13480:	ldr	r2, [sp, #68]	; 0x44
   13484:	stm	sp, {r0, r3}
   13488:	mov	r3, r8
   1348c:	str	r1, [sp, #12]
   13490:	mov	r1, sl
   13494:	str	r2, [sp, #16]
   13498:	ldr	r0, [sp, #40]	; 0x28
   1349c:	ldr	r2, [sp, #32]
   134a0:	str	ip, [sp, #8]
   134a4:	bl	12f3c <close_stdout@@Base+0x10bc>
   134a8:	ldr	r1, [sp, #56]	; 0x38
   134ac:	ldr	r2, [sp, #116]	; 0x74
   134b0:	ldr	r3, [r1]
   134b4:	cmp	r2, r3
   134b8:	bne	13bec <close_stdout@@Base+0x1d6c>
   134bc:	add	sp, sp, #124	; 0x7c
   134c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   134c4:	mov	r3, #114	; 0x72
   134c8:	ldr	r2, [sp, #36]	; 0x24
   134cc:	ldr	r0, [sp, #160]	; 0xa0
   134d0:	cmp	r0, #2
   134d4:	movne	r2, #0
   134d8:	andeq	r2, r2, #1
   134dc:	cmp	r2, #0
   134e0:	bne	1346c <close_stdout@@Base+0x15ec>
   134e4:	ldr	r1, [sp, #24]
   134e8:	cmp	r1, #0
   134ec:	beq	13324 <close_stdout@@Base+0x14a4>
   134f0:	mov	r4, r3
   134f4:	b	1335c <close_stdout@@Base+0x14dc>
   134f8:	mov	r3, #98	; 0x62
   134fc:	b	134e4 <close_stdout@@Base+0x1664>
   13500:	mov	r3, #102	; 0x66
   13504:	b	134e4 <close_stdout@@Base+0x1664>
   13508:	mov	r3, #118	; 0x76
   1350c:	b	134e4 <close_stdout@@Base+0x1664>
   13510:	mov	r3, #97	; 0x61
   13514:	b	134e4 <close_stdout@@Base+0x1664>
   13518:	mov	r3, #110	; 0x6e
   1351c:	b	134c8 <close_stdout@@Base+0x1648>
   13520:	mov	r3, #116	; 0x74
   13524:	b	134c8 <close_stdout@@Base+0x1648>
   13528:	ldr	r2, [sp, #24]
   1352c:	cmp	r2, #0
   13530:	beq	13ad8 <close_stdout@@Base+0x1c58>
   13534:	ldr	r3, [sp, #36]	; 0x24
   13538:	cmp	r3, #0
   1353c:	bne	1346c <close_stdout@@Base+0x15ec>
   13540:	cmp	r9, sl
   13544:	add	r2, r9, #1
   13548:	ldrcc	r0, [sp, #40]	; 0x28
   1354c:	movcc	r3, #92	; 0x5c
   13550:	strbcc	r3, [r0, r9]
   13554:	add	r3, fp, #1
   13558:	cmp	r8, r3
   1355c:	bls	1359c <close_stdout@@Base+0x171c>
   13560:	ldr	r1, [sp, #32]
   13564:	ldrb	r3, [r1, r3]
   13568:	sub	r3, r3, #48	; 0x30
   1356c:	cmp	r3, #9
   13570:	bhi	1359c <close_stdout@@Base+0x171c>
   13574:	cmp	sl, r2
   13578:	ldrhi	r0, [sp, #40]	; 0x28
   1357c:	movhi	r3, #48	; 0x30
   13580:	strbhi	r3, [r0, r2]
   13584:	add	r3, r9, #2
   13588:	cmp	sl, r3
   1358c:	ldrhi	r1, [sp, #40]	; 0x28
   13590:	movhi	r2, #48	; 0x30
   13594:	strbhi	r2, [r1, r3]
   13598:	add	r2, r9, #3
   1359c:	mov	r9, r2
   135a0:	mov	r4, #48	; 0x30
   135a4:	b	13330 <close_stdout@@Base+0x14b0>
   135a8:	ldr	r1, [sp, #76]	; 0x4c
   135ac:	cmp	r1, #0
   135b0:	beq	135bc <close_stdout@@Base+0x173c>
   135b4:	cmp	r7, #0
   135b8:	bne	1337c <close_stdout@@Base+0x14fc>
   135bc:	mov	r3, r4
   135c0:	b	134c8 <close_stdout@@Base+0x1648>
   135c4:	ldr	r1, [sp, #160]	; 0xa0
   135c8:	cmp	r1, #2
   135cc:	bne	13324 <close_stdout@@Base+0x14a4>
   135d0:	ldr	r2, [sp, #36]	; 0x24
   135d4:	cmp	r2, #0
   135d8:	bne	1346c <close_stdout@@Base+0x15ec>
   135dc:	cmp	r9, sl
   135e0:	ldrcc	r0, [sp, #40]	; 0x28
   135e4:	movcc	r3, #39	; 0x27
   135e8:	strbcc	r3, [r0, r9]
   135ec:	add	r3, r9, #1
   135f0:	cmp	sl, r3
   135f4:	ldrhi	r1, [sp, #40]	; 0x28
   135f8:	movhi	r2, #92	; 0x5c
   135fc:	strbhi	r2, [r1, r3]
   13600:	add	r3, r9, #2
   13604:	cmp	sl, r3
   13608:	add	r9, r9, #3
   1360c:	ldrhi	r0, [sp, #40]	; 0x28
   13610:	movhi	r2, #39	; 0x27
   13614:	strbhi	r2, [r0, r3]
   13618:	b	13324 <close_stdout@@Base+0x14a4>
   1361c:	ldr	r1, [sp, #64]	; 0x40
   13620:	cmp	r1, #1
   13624:	bne	1391c <close_stdout@@Base+0x1a9c>
   13628:	bl	1123c <__ctype_b_loc@plt>
   1362c:	ldr	r2, [sp, #64]	; 0x40
   13630:	sxth	r3, r4
   13634:	str	r2, [sp, #60]	; 0x3c
   13638:	lsl	r3, r3, #1
   1363c:	ldr	r2, [r0]
   13640:	ldrh	r2, [r2, r3]
   13644:	eor	r2, r2, #16384	; 0x4000
   13648:	ubfx	r2, r2, #14, #1
   1364c:	ldr	r1, [sp, #24]
   13650:	ands	r2, r2, r1
   13654:	beq	13324 <close_stdout@@Base+0x14a4>
   13658:	ldr	r3, [sp, #60]	; 0x3c
   1365c:	mov	r0, #92	; 0x5c
   13660:	ldr	r7, [sp, #36]	; 0x24
   13664:	add	r1, r3, fp
   13668:	str	r8, [sp, #60]	; 0x3c
   1366c:	ldr	r3, [sp, #40]	; 0x28
   13670:	b	136d4 <close_stdout@@Base+0x1854>
   13674:	cmp	r7, #0
   13678:	bne	13b14 <close_stdout@@Base+0x1c94>
   1367c:	add	ip, r9, #1
   13680:	cmp	r9, sl
   13684:	strbcc	r0, [r3, r9]
   13688:	cmp	sl, ip
   1368c:	lsrhi	r8, r4, #6
   13690:	addhi	r8, r8, #48	; 0x30
   13694:	strbhi	r8, [r3, ip]
   13698:	add	ip, r9, #2
   1369c:	add	r9, r9, #3
   136a0:	cmp	sl, ip
   136a4:	ubfxhi	r8, r4, #3, #3
   136a8:	and	r4, r4, #7
   136ac:	add	r4, r4, #48	; 0x30
   136b0:	addhi	r8, r8, #48	; 0x30
   136b4:	strbhi	r8, [r3, ip]
   136b8:	add	fp, fp, #1
   136bc:	cmp	r1, fp
   136c0:	bls	13700 <close_stdout@@Base+0x1880>
   136c4:	cmp	r9, sl
   136c8:	strbcc	r4, [r3, r9]
   136cc:	ldrb	r4, [r5, #1]!
   136d0:	add	r9, r9, #1
   136d4:	cmp	r2, #0
   136d8:	bne	13674 <close_stdout@@Base+0x17f4>
   136dc:	cmp	r6, #0
   136e0:	beq	136b8 <close_stdout@@Base+0x1838>
   136e4:	add	fp, fp, #1
   136e8:	cmp	r9, sl
   136ec:	strbcc	r0, [r3, r9]
   136f0:	cmp	r1, fp
   136f4:	add	r9, r9, #1
   136f8:	mov	r6, #0
   136fc:	bhi	136c4 <close_stdout@@Base+0x1844>
   13700:	ldr	r8, [sp, #60]	; 0x3c
   13704:	b	13380 <close_stdout@@Base+0x1500>
   13708:	ldr	r3, [sp, #36]	; 0x24
   1370c:	cmp	r3, #0
   13710:	bne	13c14 <close_stdout@@Base+0x1d94>
   13714:	cmp	sl, #0
   13718:	beq	13b2c <close_stdout@@Base+0x1cac>
   1371c:	ldr	r1, [sp, #40]	; 0x28
   13720:	mov	r0, #1
   13724:	ldr	r2, [pc, #1296]	; 13c3c <close_stdout@@Base+0x1dbc>
   13728:	mov	r3, #34	; 0x22
   1372c:	str	r0, [sp, #24]
   13730:	mov	r9, r0
   13734:	add	r2, pc, r2
   13738:	str	r0, [sp, #28]
   1373c:	strb	r3, [r1]
   13740:	str	r2, [sp, #52]	; 0x34
   13744:	b	12ff0 <close_stdout@@Base+0x1170>
   13748:	ldr	r3, [pc, #1264]	; 13c40 <close_stdout@@Base+0x1dc0>
   1374c:	mov	r2, #1
   13750:	mov	r0, #3
   13754:	str	r2, [sp, #36]	; 0x24
   13758:	add	r3, pc, r3
   1375c:	str	r2, [sp, #24]
   13760:	str	r3, [sp, #52]	; 0x34
   13764:	mov	r9, #0
   13768:	str	r2, [sp, #28]
   1376c:	str	r0, [sp, #160]	; 0xa0
   13770:	b	12ff0 <close_stdout@@Base+0x1170>
   13774:	mov	r0, #0
   13778:	mov	r1, #1
   1377c:	str	r0, [sp, #36]	; 0x24
   13780:	mov	r9, r0
   13784:	str	r1, [sp, #24]
   13788:	str	r0, [sp, #28]
   1378c:	str	r0, [sp, #52]	; 0x34
   13790:	b	12ff0 <close_stdout@@Base+0x1170>
   13794:	ldr	r3, [sp, #160]	; 0xa0
   13798:	cmp	r3, #8
   1379c:	beq	137c8 <close_stdout@@Base+0x1948>
   137a0:	ldr	r0, [pc, #1180]	; 13c44 <close_stdout@@Base+0x1dc4>
   137a4:	mov	r1, r3
   137a8:	add	r0, pc, r0
   137ac:	bl	12dd8 <close_stdout@@Base+0xf58>
   137b0:	ldr	r1, [sp, #160]	; 0xa0
   137b4:	str	r0, [sp, #72]	; 0x48
   137b8:	ldr	r0, [pc, #1160]	; 13c48 <close_stdout@@Base+0x1dc8>
   137bc:	add	r0, pc, r0
   137c0:	bl	12dd8 <close_stdout@@Base+0xf58>
   137c4:	str	r0, [sp, #68]	; 0x44
   137c8:	ldr	r0, [sp, #36]	; 0x24
   137cc:	cmp	r0, #0
   137d0:	movne	r9, #0
   137d4:	bne	1380c <close_stdout@@Base+0x198c>
   137d8:	ldr	r1, [sp, #72]	; 0x48
   137dc:	ldrb	r3, [r1]
   137e0:	cmp	r3, #0
   137e4:	beq	13be4 <close_stdout@@Base+0x1d64>
   137e8:	mov	r2, r1
   137ec:	ldr	r1, [sp, #40]	; 0x28
   137f0:	mov	r9, r0
   137f4:	cmp	r9, sl
   137f8:	strbcc	r3, [r1, r9]
   137fc:	ldrb	r3, [r2, #1]!
   13800:	add	r9, r9, #1
   13804:	cmp	r3, #0
   13808:	bne	137f4 <close_stdout@@Base+0x1974>
   1380c:	ldr	r0, [sp, #68]	; 0x44
   13810:	str	r0, [sp, #52]	; 0x34
   13814:	bl	11254 <strlen@plt>
   13818:	mov	r2, #1
   1381c:	str	r2, [sp, #24]
   13820:	str	r0, [sp, #28]
   13824:	b	12ff0 <close_stdout@@Base+0x1170>
   13828:	ldr	r3, [pc, #1052]	; 13c4c <close_stdout@@Base+0x1dcc>
   1382c:	mov	r2, #0
   13830:	mov	r1, #1
   13834:	mov	r0, #2
   13838:	add	r3, pc, r3
   1383c:	str	r1, [sp, #36]	; 0x24
   13840:	str	r2, [sp, #24]
   13844:	mov	r9, r2
   13848:	str	r1, [sp, #28]
   1384c:	str	r3, [sp, #52]	; 0x34
   13850:	str	r0, [sp, #160]	; 0xa0
   13854:	b	12ff0 <close_stdout@@Base+0x1170>
   13858:	ldr	r3, [sp, #36]	; 0x24
   1385c:	cmp	r3, #0
   13860:	bne	13bf0 <close_stdout@@Base+0x1d70>
   13864:	cmp	sl, #0
   13868:	beq	13b4c <close_stdout@@Base+0x1ccc>
   1386c:	ldr	r1, [sp, #40]	; 0x28
   13870:	mov	r3, #39	; 0x27
   13874:	ldr	r2, [sp, #36]	; 0x24
   13878:	mov	r0, #1
   1387c:	mov	r9, r0
   13880:	str	r0, [sp, #28]
   13884:	strb	r3, [r1]
   13888:	ldr	r3, [pc, #960]	; 13c50 <close_stdout@@Base+0x1dd0>
   1388c:	str	r2, [sp, #24]
   13890:	add	r3, pc, r3
   13894:	str	r3, [sp, #52]	; 0x34
   13898:	b	12ff0 <close_stdout@@Base+0x1170>
   1389c:	ldr	r2, [sp, #28]
   138a0:	cmp	r2, #1
   138a4:	add	r4, fp, r2
   138a8:	movls	r3, #0
   138ac:	movhi	r3, #1
   138b0:	cmn	r8, #1
   138b4:	movne	r3, #0
   138b8:	cmp	r3, #0
   138bc:	beq	138cc <close_stdout@@Base+0x1a4c>
   138c0:	ldr	r0, [sp, #32]
   138c4:	bl	11254 <strlen@plt>
   138c8:	mov	r8, r0
   138cc:	cmp	r8, r4
   138d0:	ldrcc	r3, [sp, #32]
   138d4:	movcc	r6, #0
   138d8:	addcc	r5, r3, fp
   138dc:	bcc	1304c <close_stdout@@Base+0x11cc>
   138e0:	ldr	r0, [sp, #32]
   138e4:	ldr	r1, [sp, #52]	; 0x34
   138e8:	add	r5, r0, fp
   138ec:	ldr	r2, [sp, #28]
   138f0:	mov	r0, r5
   138f4:	bl	11140 <memcmp@plt>
   138f8:	cmp	r0, #0
   138fc:	bne	13914 <close_stdout@@Base+0x1a94>
   13900:	ldr	r1, [sp, #36]	; 0x24
   13904:	cmp	r1, #0
   13908:	bne	1346c <close_stdout@@Base+0x15ec>
   1390c:	mov	r6, #1
   13910:	b	1304c <close_stdout@@Base+0x11cc>
   13914:	mov	r6, #0
   13918:	b	1304c <close_stdout@@Base+0x11cc>
   1391c:	add	r7, sp, #108	; 0x6c
   13920:	cmn	r8, #1
   13924:	mov	r3, #0
   13928:	str	r3, [sp, #108]	; 0x6c
   1392c:	str	r3, [r7, #4]
   13930:	beq	13b1c <close_stdout@@Base+0x1c9c>
   13934:	mov	r1, #0
   13938:	ldr	r0, [sp, #32]
   1393c:	mov	ip, #1
   13940:	str	r9, [sp, #88]	; 0x58
   13944:	str	r6, [sp, #96]	; 0x60
   13948:	mov	r9, r1
   1394c:	str	r5, [sp, #100]	; 0x64
   13950:	mov	r6, ip
   13954:	mov	r5, r7
   13958:	add	r3, sp, #104	; 0x68
   1395c:	sub	r0, r0, #1
   13960:	str	r3, [sp, #80]	; 0x50
   13964:	str	r0, [sp, #84]	; 0x54
   13968:	str	r1, [sp, #60]	; 0x3c
   1396c:	str	r4, [sp, #92]	; 0x5c
   13970:	ldr	r2, [sp, #32]
   13974:	add	r7, r9, fp
   13978:	add	r0, sp, #104	; 0x68
   1397c:	mov	r3, r5
   13980:	add	r4, r2, r7
   13984:	rsb	r2, r7, r8
   13988:	mov	r1, r4
   1398c:	bl	111d0 <mbrtowc@plt>
   13990:	subs	r2, r0, #0
   13994:	beq	13aa0 <close_stdout@@Base+0x1c20>
   13998:	cmn	r2, #1
   1399c:	beq	13bc8 <close_stdout@@Base+0x1d48>
   139a0:	cmn	r2, #2
   139a4:	beq	13b6c <close_stdout@@Base+0x1cec>
   139a8:	ldr	r3, [sp, #36]	; 0x24
   139ac:	ldr	r0, [sp, #160]	; 0xa0
   139b0:	cmp	r0, #2
   139b4:	movne	r3, #0
   139b8:	andeq	r3, r3, #1
   139bc:	cmp	r3, #0
   139c0:	beq	13a7c <close_stdout@@Base+0x1bfc>
   139c4:	cmp	r2, #1
   139c8:	beq	13a7c <close_stdout@@Base+0x1bfc>
   139cc:	ldr	r1, [sp, #84]	; 0x54
   139d0:	add	r3, r1, r2
   139d4:	add	r7, r3, r7
   139d8:	ldrb	r3, [r4, #1]!
   139dc:	sub	r3, r3, #91	; 0x5b
   139e0:	cmp	r3, #33	; 0x21
   139e4:	addls	pc, pc, r3, lsl #2
   139e8:	b	13a74 <close_stdout@@Base+0x1bf4>
   139ec:	b	1346c <close_stdout@@Base+0x15ec>
   139f0:	b	1346c <close_stdout@@Base+0x15ec>
   139f4:	b	13a74 <close_stdout@@Base+0x1bf4>
   139f8:	b	1346c <close_stdout@@Base+0x15ec>
   139fc:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a00:	b	1346c <close_stdout@@Base+0x15ec>
   13a04:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a08:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a0c:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a10:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a14:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a18:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a1c:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a20:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a24:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a28:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a2c:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a30:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a34:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a38:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a3c:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a40:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a44:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a48:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a4c:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a50:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a54:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a58:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a5c:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a60:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a64:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a68:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a6c:	b	13a74 <close_stdout@@Base+0x1bf4>
   13a70:	b	1346c <close_stdout@@Base+0x15ec>
   13a74:	cmp	r4, r7
   13a78:	bne	139d8 <close_stdout@@Base+0x1b58>
   13a7c:	ldr	r0, [sp, #104]	; 0x68
   13a80:	add	r9, r9, r2
   13a84:	bl	1117c <iswprint@plt>
   13a88:	cmp	r0, #0
   13a8c:	mov	r0, r5
   13a90:	moveq	r6, #0
   13a94:	bl	11134 <mbsinit@plt>
   13a98:	cmp	r0, #0
   13a9c:	beq	13970 <close_stdout@@Base+0x1af0>
   13aa0:	mov	ip, r6
   13aa4:	eor	r2, ip, #1
   13aa8:	str	r9, [sp, #60]	; 0x3c
   13aac:	ldr	r4, [sp, #92]	; 0x5c
   13ab0:	uxtb	r2, r2
   13ab4:	ldr	r9, [sp, #88]	; 0x58
   13ab8:	ldr	r6, [sp, #96]	; 0x60
   13abc:	ldr	r5, [sp, #100]	; 0x64
   13ac0:	ldr	r3, [sp, #60]	; 0x3c
   13ac4:	cmp	r3, #1
   13ac8:	bls	1364c <close_stdout@@Base+0x17cc>
   13acc:	ldr	r0, [sp, #24]
   13ad0:	and	r2, r2, r0
   13ad4:	b	13658 <close_stdout@@Base+0x17d8>
   13ad8:	ldr	r2, [sp, #164]	; 0xa4
   13adc:	tst	r2, #1
   13ae0:	addne	fp, fp, #1
   13ae4:	bne	13014 <close_stdout@@Base+0x1194>
   13ae8:	b	13324 <close_stdout@@Base+0x14a4>
   13aec:	ldr	r0, [sp, #36]	; 0x24
   13af0:	cmp	r0, #0
   13af4:	beq	13324 <close_stdout@@Base+0x14a4>
   13af8:	b	1346c <close_stdout@@Base+0x15ec>
   13afc:	ldr	r2, [sp, #32]
   13b00:	ldrb	r3, [r2, #1]
   13b04:	adds	r3, r3, #0
   13b08:	movne	r3, #1
   13b0c:	b	13440 <close_stdout@@Base+0x15c0>
   13b10:	bl	11368 <abort@plt>
   13b14:	ldr	r8, [sp, #60]	; 0x3c
   13b18:	b	1346c <close_stdout@@Base+0x15ec>
   13b1c:	ldr	r0, [sp, #32]
   13b20:	bl	11254 <strlen@plt>
   13b24:	mov	r8, r0
   13b28:	b	13934 <close_stdout@@Base+0x1ab4>
   13b2c:	ldr	r2, [pc, #288]	; 13c54 <close_stdout@@Base+0x1dd4>
   13b30:	mov	r1, #1
   13b34:	mov	r9, r1
   13b38:	str	r1, [sp, #24]
   13b3c:	add	r2, pc, r2
   13b40:	str	r1, [sp, #28]
   13b44:	str	r2, [sp, #52]	; 0x34
   13b48:	b	12ff0 <close_stdout@@Base+0x1170>
   13b4c:	ldr	r2, [pc, #260]	; 13c58 <close_stdout@@Base+0x1dd8>
   13b50:	mov	r3, #1
   13b54:	mov	r9, r3
   13b58:	str	r3, [sp, #28]
   13b5c:	add	r2, pc, r2
   13b60:	str	sl, [sp, #24]
   13b64:	str	r2, [sp, #52]	; 0x34
   13b68:	b	12ff0 <close_stdout@@Base+0x1170>
   13b6c:	cmp	r8, r7
   13b70:	str	r9, [sp, #60]	; 0x3c
   13b74:	mov	ip, r4
   13b78:	ldr	r6, [sp, #96]	; 0x60
   13b7c:	ldr	r9, [sp, #88]	; 0x58
   13b80:	ldr	r4, [sp, #92]	; 0x5c
   13b84:	ldr	r5, [sp, #100]	; 0x64
   13b88:	bls	13bc0 <close_stdout@@Base+0x1d40>
   13b8c:	ldrb	r3, [ip]
   13b90:	cmp	r3, #0
   13b94:	beq	13bc0 <close_stdout@@Base+0x1d40>
   13b98:	ldr	r3, [sp, #60]	; 0x3c
   13b9c:	b	13bac <close_stdout@@Base+0x1d2c>
   13ba0:	ldrb	r2, [r5, r3]
   13ba4:	cmp	r2, #0
   13ba8:	beq	13bbc <close_stdout@@Base+0x1d3c>
   13bac:	add	r3, r3, #1
   13bb0:	add	r2, fp, r3
   13bb4:	cmp	r8, r2
   13bb8:	bhi	13ba0 <close_stdout@@Base+0x1d20>
   13bbc:	str	r3, [sp, #60]	; 0x3c
   13bc0:	mov	r2, #1
   13bc4:	b	13ac0 <close_stdout@@Base+0x1c40>
   13bc8:	str	r9, [sp, #60]	; 0x3c
   13bcc:	mov	r2, #1
   13bd0:	ldr	r4, [sp, #92]	; 0x5c
   13bd4:	ldr	r6, [sp, #96]	; 0x60
   13bd8:	ldr	r9, [sp, #88]	; 0x58
   13bdc:	ldr	r5, [sp, #100]	; 0x64
   13be0:	b	13ac0 <close_stdout@@Base+0x1c40>
   13be4:	ldr	r9, [sp, #36]	; 0x24
   13be8:	b	1380c <close_stdout@@Base+0x198c>
   13bec:	bl	11158 <__stack_chk_fail@plt>
   13bf0:	ldr	r1, [pc, #100]	; 13c5c <close_stdout@@Base+0x1ddc>
   13bf4:	mov	r3, #0
   13bf8:	mov	r0, #1
   13bfc:	str	r3, [sp, #24]
   13c00:	add	r1, pc, r1
   13c04:	str	r0, [sp, #28]
   13c08:	mov	r9, r3
   13c0c:	str	r1, [sp, #52]	; 0x34
   13c10:	b	12ff0 <close_stdout@@Base+0x1170>
   13c14:	ldr	r0, [pc, #68]	; 13c60 <close_stdout@@Base+0x1de0>
   13c18:	mov	r3, #1
   13c1c:	mov	r9, #0
   13c20:	str	r3, [sp, #24]
   13c24:	add	r0, pc, r0
   13c28:	str	r3, [sp, #28]
   13c2c:	str	r0, [sp, #52]	; 0x34
   13c30:	b	12ff0 <close_stdout@@Base+0x1170>
   13c34:	andeq	r5, r1, r0, lsr #1
   13c38:	andeq	r0, r0, ip, lsl #2
   13c3c:	andeq	r3, r0, r8, ror fp
   13c40:	andeq	r3, r0, r4, asr fp
   13c44:	andeq	r3, r0, r0, lsl fp
   13c48:	andeq	r3, r0, ip, ror #21
   13c4c:	andeq	r3, r0, r0, ror sl
   13c50:	andeq	r3, r0, r8, lsl sl
   13c54:	andeq	r3, r0, r0, ror r7
   13c58:	andeq	r3, r0, ip, asr #14
   13c5c:	andeq	r3, r0, r8, lsr #13
   13c60:	andeq	r3, r0, r8, lsl #13
   13c64:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c68:	sub	sp, sp, #44	; 0x2c
   13c6c:	mov	r6, r0
   13c70:	mov	r9, r1
   13c74:	mov	sl, r2
   13c78:	mov	r4, r3
   13c7c:	bl	11278 <__errno_location@plt>
   13c80:	ldr	fp, [pc, #412]	; 13e24 <close_stdout@@Base+0x1fa4>
   13c84:	cmp	r6, #0
   13c88:	add	fp, pc, fp
   13c8c:	ldr	r5, [fp]
   13c90:	ldr	r1, [r0]
   13c94:	mov	r8, r0
   13c98:	str	r1, [sp, #36]	; 0x24
   13c9c:	blt	13e1c <close_stdout@@Base+0x1f9c>
   13ca0:	ldr	r3, [pc, #384]	; 13e28 <close_stdout@@Base+0x1fa8>
   13ca4:	add	r3, pc, r3
   13ca8:	ldr	r3, [r3]
   13cac:	cmp	r6, r3
   13cb0:	bcc	13d04 <close_stdout@@Base+0x1e84>
   13cb4:	add	r7, r6, #1
   13cb8:	cmn	r7, #-536870911	; 0xe0000001
   13cbc:	bhi	13e20 <close_stdout@@Base+0x1fa0>
   13cc0:	add	r3, fp, #4
   13cc4:	cmp	r5, r3
   13cc8:	beq	13df4 <close_stdout@@Base+0x1f74>
   13ccc:	mov	r0, r5
   13cd0:	lsl	r1, r7, #3
   13cd4:	bl	14b5c <close_stdout@@Base+0x2cdc>
   13cd8:	mov	r5, r0
   13cdc:	str	r0, [fp]
   13ce0:	ldr	fp, [pc, #324]	; 13e2c <close_stdout@@Base+0x1fac>
   13ce4:	mov	r1, #0
   13ce8:	add	fp, pc, fp
   13cec:	ldr	r0, [fp]
   13cf0:	rsb	r2, r0, r7
   13cf4:	add	r0, r5, r0, lsl #3
   13cf8:	lsl	r2, r2, #3
   13cfc:	bl	112a8 <memset@plt>
   13d00:	str	r7, [fp]
   13d04:	add	r2, r4, #8
   13d08:	str	r2, [sp, #32]
   13d0c:	ldr	r1, [r4]
   13d10:	add	fp, r5, r6, lsl #3
   13d14:	ldr	lr, [sp, #32]
   13d18:	mov	r2, r9
   13d1c:	ldr	r3, [r4, #4]
   13d20:	ldr	ip, [r5, r6, lsl #3]
   13d24:	ldr	r7, [fp, #4]
   13d28:	orr	r3, r3, #1
   13d2c:	str	r1, [sp]
   13d30:	str	r3, [sp, #4]
   13d34:	mov	r1, ip
   13d38:	str	lr, [sp, #8]
   13d3c:	mov	r0, r7
   13d40:	ldr	lr, [r4, #40]	; 0x28
   13d44:	str	r3, [sp, #28]
   13d48:	mov	r3, sl
   13d4c:	str	lr, [sp, #12]
   13d50:	ldr	lr, [r4, #44]	; 0x2c
   13d54:	str	ip, [sp, #24]
   13d58:	str	lr, [sp, #16]
   13d5c:	bl	12f3c <close_stdout@@Base+0x10bc>
   13d60:	ldr	ip, [sp, #24]
   13d64:	cmp	ip, r0
   13d68:	bhi	13de0 <close_stdout@@Base+0x1f60>
   13d6c:	ldr	r3, [pc, #188]	; 13e30 <close_stdout@@Base+0x1fb0>
   13d70:	add	r1, r0, #1
   13d74:	str	r1, [r5, r6, lsl #3]
   13d78:	add	r3, pc, r3
   13d7c:	cmp	r7, r3
   13d80:	beq	13d94 <close_stdout@@Base+0x1f14>
   13d84:	mov	r0, r7
   13d88:	str	r1, [sp, #24]
   13d8c:	bl	11104 <free@plt>
   13d90:	ldr	r1, [sp, #24]
   13d94:	mov	r0, r1
   13d98:	str	r1, [sp, #24]
   13d9c:	bl	14b04 <close_stdout@@Base+0x2c84>
   13da0:	ldr	r3, [sp, #28]
   13da4:	ldr	lr, [sp, #32]
   13da8:	mov	r2, r9
   13dac:	str	r0, [fp, #4]
   13db0:	mov	r7, r0
   13db4:	ldr	ip, [r4]
   13db8:	str	r3, [sp, #4]
   13dbc:	mov	r3, sl
   13dc0:	str	lr, [sp, #8]
   13dc4:	str	ip, [sp]
   13dc8:	ldr	ip, [r4, #40]	; 0x28
   13dcc:	ldr	r1, [sp, #24]
   13dd0:	str	ip, [sp, #12]
   13dd4:	ldr	ip, [r4, #44]	; 0x2c
   13dd8:	str	ip, [sp, #16]
   13ddc:	bl	12f3c <close_stdout@@Base+0x10bc>
   13de0:	ldr	r1, [sp, #36]	; 0x24
   13de4:	mov	r0, r7
   13de8:	str	r1, [r8]
   13dec:	add	sp, sp, #44	; 0x2c
   13df0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13df4:	lsl	r1, r7, #3
   13df8:	mov	r0, #0
   13dfc:	str	r3, [sp, #24]
   13e00:	bl	14b5c <close_stdout@@Base+0x2cdc>
   13e04:	ldr	r3, [sp, #24]
   13e08:	mov	r5, r0
   13e0c:	ldm	r3, {r0, r1}
   13e10:	str	r5, [fp]
   13e14:	stm	r5, {r0, r1}
   13e18:	b	13ce0 <close_stdout@@Base+0x1e60>
   13e1c:	bl	11368 <abort@plt>
   13e20:	bl	14d18 <close_stdout@@Base+0x2e98>
   13e24:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e28:	andeq	r4, r1, r4, lsr #9
   13e2c:	andeq	r4, r1, r0, ror #8
   13e30:	andeq	r4, r1, r4, lsr #8
   13e34:	push	{r4, r5, r6, lr}
   13e38:	mov	r5, r0
   13e3c:	bl	11278 <__errno_location@plt>
   13e40:	cmp	r5, #0
   13e44:	mov	r1, #48	; 0x30
   13e48:	mov	r4, r0
   13e4c:	ldr	r0, [pc, #24]	; 13e6c <close_stdout@@Base+0x1fec>
   13e50:	ldr	r6, [r4]
   13e54:	add	r0, pc, r0
   13e58:	add	r0, r0, #256	; 0x100
   13e5c:	movne	r0, r5
   13e60:	bl	14cd8 <close_stdout@@Base+0x2e58>
   13e64:	str	r6, [r4]
   13e68:	pop	{r4, r5, r6, pc}
   13e6c:	andeq	r4, r1, r8, asr #6
   13e70:	cmp	r0, #0
   13e74:	beq	13e80 <close_stdout@@Base+0x2000>
   13e78:	ldr	r0, [r0]
   13e7c:	bx	lr
   13e80:	ldr	r0, [pc, #12]	; 13e94 <close_stdout@@Base+0x2014>
   13e84:	add	r0, pc, r0
   13e88:	add	r0, r0, #256	; 0x100
   13e8c:	ldr	r0, [r0]
   13e90:	bx	lr
   13e94:	andeq	r4, r1, r8, lsl r3
   13e98:	cmp	r0, #0
   13e9c:	beq	13ea8 <close_stdout@@Base+0x2028>
   13ea0:	str	r1, [r0]
   13ea4:	bx	lr
   13ea8:	ldr	r0, [pc, #12]	; 13ebc <close_stdout@@Base+0x203c>
   13eac:	add	r0, pc, r0
   13eb0:	add	r0, r0, #256	; 0x100
   13eb4:	str	r1, [r0]
   13eb8:	bx	lr
   13ebc:	strdeq	r4, [r1], -r0
   13ec0:	cmp	r0, #0
   13ec4:	movne	r3, r0
   13ec8:	beq	13ef8 <close_stdout@@Base+0x2078>
   13ecc:	lsr	ip, r1, #5
   13ed0:	and	r1, r1, #31
   13ed4:	add	r3, r3, ip, lsl #2
   13ed8:	ldr	ip, [r3, #8]
   13edc:	lsr	r0, ip, r1
   13ee0:	eor	r2, r0, r2
   13ee4:	and	r0, r0, #1
   13ee8:	and	r2, r2, #1
   13eec:	eor	ip, ip, r2, lsl r1
   13ef0:	str	ip, [r3, #8]
   13ef4:	bx	lr
   13ef8:	ldr	r3, [pc, #8]	; 13f08 <close_stdout@@Base+0x2088>
   13efc:	add	r3, pc, r3
   13f00:	add	r3, r3, #256	; 0x100
   13f04:	b	13ecc <close_stdout@@Base+0x204c>
   13f08:	andeq	r4, r1, r0, lsr #5
   13f0c:	subs	r3, r0, #0
   13f10:	beq	13f20 <close_stdout@@Base+0x20a0>
   13f14:	ldr	r0, [r3, #4]
   13f18:	str	r1, [r3, #4]
   13f1c:	bx	lr
   13f20:	ldr	r3, [pc, #8]	; 13f30 <close_stdout@@Base+0x20b0>
   13f24:	add	r3, pc, r3
   13f28:	add	r3, r3, #256	; 0x100
   13f2c:	b	13f14 <close_stdout@@Base+0x2094>
   13f30:	andeq	r4, r1, r8, ror r2
   13f34:	cmp	r0, #0
   13f38:	push	{r3, lr}
   13f3c:	beq	13f60 <close_stdout@@Base+0x20e0>
   13f40:	cmp	r2, #0
   13f44:	cmpne	r1, #0
   13f48:	mov	r3, #8
   13f4c:	strne	r1, [r0, #40]	; 0x28
   13f50:	str	r3, [r0]
   13f54:	strne	r2, [r0, #44]	; 0x2c
   13f58:	popne	{r3, pc}
   13f5c:	bl	11368 <abort@plt>
   13f60:	ldr	r0, [pc, #8]	; 13f70 <close_stdout@@Base+0x20f0>
   13f64:	add	r0, pc, r0
   13f68:	add	r0, r0, #256	; 0x100
   13f6c:	b	13f40 <close_stdout@@Base+0x20c0>
   13f70:	andeq	r4, r1, r8, lsr r2
   13f74:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f78:	sub	sp, sp, #24
   13f7c:	mov	r7, r0
   13f80:	mov	sl, r1
   13f84:	ldr	r4, [sp, #56]	; 0x38
   13f88:	mov	r9, r2
   13f8c:	mov	r8, r3
   13f90:	cmp	r4, #0
   13f94:	beq	13fe8 <close_stdout@@Base+0x2168>
   13f98:	bl	11278 <__errno_location@plt>
   13f9c:	ldr	r3, [r4]
   13fa0:	add	lr, r4, #8
   13fa4:	mov	r1, sl
   13fa8:	mov	r2, r9
   13fac:	ldr	r6, [r0]
   13fb0:	mov	r5, r0
   13fb4:	str	r3, [sp]
   13fb8:	mov	r0, r7
   13fbc:	ldr	ip, [r4, #4]
   13fc0:	mov	r3, r8
   13fc4:	stmib	sp, {ip, lr}
   13fc8:	ldr	ip, [r4, #40]	; 0x28
   13fcc:	str	ip, [sp, #12]
   13fd0:	ldr	ip, [r4, #44]	; 0x2c
   13fd4:	str	ip, [sp, #16]
   13fd8:	bl	12f3c <close_stdout@@Base+0x10bc>
   13fdc:	str	r6, [r5]
   13fe0:	add	sp, sp, #24
   13fe4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13fe8:	ldr	r4, [pc, #8]	; 13ff8 <close_stdout@@Base+0x2178>
   13fec:	add	r4, pc, r4
   13ff0:	add	r4, r4, #256	; 0x100
   13ff4:	b	13f98 <close_stdout@@Base+0x2118>
   13ff8:			; <UNDEFINED> instruction: 0x000141b0
   13ffc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14000:	subs	r4, r3, #0
   14004:	sub	sp, sp, #36	; 0x24
   14008:	mov	r7, r0
   1400c:	mov	r6, r1
   14010:	mov	r5, r2
   14014:	beq	140d0 <close_stdout@@Base+0x2250>
   14018:	bl	11278 <__errno_location@plt>
   1401c:	ldr	r3, [r4]
   14020:	ldr	sl, [r4, #4]
   14024:	add	r9, r4, #8
   14028:	mov	r8, r0
   1402c:	mov	r0, #0
   14030:	ldr	r2, [r8]
   14034:	cmp	r5, r0
   14038:	orreq	sl, sl, #1
   1403c:	str	r9, [sp, #8]
   14040:	mov	r1, r0
   14044:	stm	sp, {r3, sl}
   14048:	mov	r3, r6
   1404c:	ldr	ip, [r4, #40]	; 0x28
   14050:	str	r2, [sp, #28]
   14054:	mov	r2, r7
   14058:	str	ip, [sp, #12]
   1405c:	ldr	ip, [r4, #44]	; 0x2c
   14060:	str	ip, [sp, #16]
   14064:	bl	12f3c <close_stdout@@Base+0x10bc>
   14068:	add	r1, r0, #1
   1406c:	mov	fp, r0
   14070:	str	r1, [sp, #24]
   14074:	mov	r0, r1
   14078:	bl	14b04 <close_stdout@@Base+0x2c84>
   1407c:	ldr	lr, [r4]
   14080:	str	sl, [sp, #4]
   14084:	mov	r3, r6
   14088:	str	r9, [sp, #8]
   1408c:	mov	r2, r7
   14090:	str	lr, [sp]
   14094:	ldr	lr, [r4, #40]	; 0x28
   14098:	ldr	r1, [sp, #24]
   1409c:	str	lr, [sp, #12]
   140a0:	ldr	lr, [r4, #44]	; 0x2c
   140a4:	str	lr, [sp, #16]
   140a8:	str	r0, [sp, #24]
   140ac:	bl	12f3c <close_stdout@@Base+0x10bc>
   140b0:	ldr	r3, [sp, #28]
   140b4:	cmp	r5, #0
   140b8:	str	r3, [r8]
   140bc:	ldr	ip, [sp, #24]
   140c0:	strne	fp, [r5]
   140c4:	mov	r0, ip
   140c8:	add	sp, sp, #36	; 0x24
   140cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140d0:	ldr	r4, [pc, #8]	; 140e0 <close_stdout@@Base+0x2260>
   140d4:	add	r4, pc, r4
   140d8:	add	r4, r4, #256	; 0x100
   140dc:	b	14018 <close_stdout@@Base+0x2198>
   140e0:	andeq	r4, r1, r8, asr #1
   140e4:	mov	r3, r2
   140e8:	mov	r2, #0
   140ec:	b	13ffc <close_stdout@@Base+0x217c>
   140f0:	ldr	r2, [pc, #152]	; 14190 <close_stdout@@Base+0x2310>
   140f4:	push	{r3, r4, r5, r6, r7, lr}
   140f8:	add	r2, pc, r2
   140fc:	ldr	r3, [pc, #144]	; 14194 <close_stdout@@Base+0x2314>
   14100:	ldr	r6, [r2]
   14104:	add	r3, pc, r3
   14108:	cmp	r6, #1
   1410c:	ldr	r7, [r3]
   14110:	movhi	r4, #1
   14114:	movhi	r5, r7
   14118:	bls	14134 <close_stdout@@Base+0x22b4>
   1411c:	ldr	r0, [r5, #12]
   14120:	add	r4, r4, #1
   14124:	bl	11104 <free@plt>
   14128:	cmp	r4, r6
   1412c:	add	r5, r5, #8
   14130:	bne	1411c <close_stdout@@Base+0x229c>
   14134:	ldr	r4, [pc, #92]	; 14198 <close_stdout@@Base+0x2318>
   14138:	ldr	r0, [r7, #4]
   1413c:	add	r4, pc, r4
   14140:	cmp	r0, r4
   14144:	beq	1415c <close_stdout@@Base+0x22dc>
   14148:	bl	11104 <free@plt>
   1414c:	ldr	r3, [pc, #72]	; 1419c <close_stdout@@Base+0x231c>
   14150:	mov	r2, #256	; 0x100
   14154:	add	r3, pc, r3
   14158:	stmib	r3, {r2, r4}
   1415c:	ldr	r4, [pc, #60]	; 141a0 <close_stdout@@Base+0x2320>
   14160:	add	r4, pc, r4
   14164:	add	r5, r4, #4
   14168:	cmp	r7, r5
   1416c:	beq	1417c <close_stdout@@Base+0x22fc>
   14170:	mov	r0, r7
   14174:	bl	11104 <free@plt>
   14178:	str	r5, [r4]
   1417c:	ldr	r3, [pc, #32]	; 141a4 <close_stdout@@Base+0x2324>
   14180:	mov	r2, #1
   14184:	add	r3, pc, r3
   14188:	str	r2, [r3]
   1418c:	pop	{r3, r4, r5, r6, r7, pc}
   14190:	andeq	r4, r1, r0, asr r0
   14194:	andeq	r4, r1, r8, ror r0
   14198:	andeq	r4, r1, r0, rrx
   1419c:	andeq	r4, r1, r8, lsr #32
   141a0:	andeq	r4, r1, ip, lsl r0
   141a4:	andeq	r3, r1, r4, asr #31
   141a8:	ldr	r3, [pc, #12]	; 141bc <close_stdout@@Base+0x233c>
   141ac:	mvn	r2, #0
   141b0:	add	r3, pc, r3
   141b4:	add	r3, r3, #256	; 0x100
   141b8:	b	13c64 <close_stdout@@Base+0x1de4>
   141bc:	andeq	r3, r1, ip, ror #31
   141c0:	ldr	r3, [pc, #8]	; 141d0 <close_stdout@@Base+0x2350>
   141c4:	add	r3, pc, r3
   141c8:	add	r3, r3, #256	; 0x100
   141cc:	b	13c64 <close_stdout@@Base+0x1de4>
   141d0:	ldrdeq	r3, [r1], -r8
   141d4:	mov	r1, r0
   141d8:	mov	r0, #0
   141dc:	b	141a8 <close_stdout@@Base+0x2328>
   141e0:	mov	r2, r1
   141e4:	mov	r1, r0
   141e8:	mov	r0, #0
   141ec:	b	141c0 <close_stdout@@Base+0x2340>
   141f0:	ldr	r3, [pc, #92]	; 14254 <close_stdout@@Base+0x23d4>
   141f4:	ldr	ip, [pc, #92]	; 14258 <close_stdout@@Base+0x23d8>
   141f8:	add	r3, pc, r3
   141fc:	push	{r4, r5, r6, r7, lr}
   14200:	sub	sp, sp, #60	; 0x3c
   14204:	ldr	r4, [r3, ip]
   14208:	add	r5, sp, #4
   1420c:	mov	r7, r2
   14210:	mov	r6, r0
   14214:	mov	r0, r5
   14218:	ldr	r3, [r4]
   1421c:	str	r3, [sp, #52]	; 0x34
   14220:	bl	12d84 <close_stdout@@Base+0xf04>
   14224:	mov	r3, r5
   14228:	mvn	r2, #0
   1422c:	mov	r0, r6
   14230:	mov	r1, r7
   14234:	bl	13c64 <close_stdout@@Base+0x1de4>
   14238:	ldr	r2, [sp, #52]	; 0x34
   1423c:	ldr	r3, [r4]
   14240:	cmp	r2, r3
   14244:	bne	14250 <close_stdout@@Base+0x23d0>
   14248:	add	sp, sp, #60	; 0x3c
   1424c:	pop	{r4, r5, r6, r7, pc}
   14250:	bl	11158 <__stack_chk_fail@plt>
   14254:	andeq	r3, r1, r0, lsl #28
   14258:	andeq	r0, r0, ip, lsl #2
   1425c:	ldr	ip, [pc, #96]	; 142c4 <close_stdout@@Base+0x2444>
   14260:	push	{r4, r5, r6, r7, r8, lr}
   14264:	add	ip, pc, ip
   14268:	ldr	lr, [pc, #88]	; 142c8 <close_stdout@@Base+0x2448>
   1426c:	sub	sp, sp, #56	; 0x38
   14270:	mov	r8, r3
   14274:	add	r5, sp, #4
   14278:	mov	r7, r2
   1427c:	mov	r6, r0
   14280:	ldr	r4, [ip, lr]
   14284:	mov	r0, r5
   14288:	ldr	r3, [r4]
   1428c:	str	r3, [sp, #52]	; 0x34
   14290:	bl	12d84 <close_stdout@@Base+0xf04>
   14294:	mov	r2, r8
   14298:	mov	r3, r5
   1429c:	mov	r0, r6
   142a0:	mov	r1, r7
   142a4:	bl	13c64 <close_stdout@@Base+0x1de4>
   142a8:	ldr	r2, [sp, #52]	; 0x34
   142ac:	ldr	r3, [r4]
   142b0:	cmp	r2, r3
   142b4:	bne	142c0 <close_stdout@@Base+0x2440>
   142b8:	add	sp, sp, #56	; 0x38
   142bc:	pop	{r4, r5, r6, r7, r8, pc}
   142c0:	bl	11158 <__stack_chk_fail@plt>
   142c4:	muleq	r1, r4, sp
   142c8:	andeq	r0, r0, ip, lsl #2
   142cc:	mov	r2, r1
   142d0:	mov	r1, r0
   142d4:	mov	r0, #0
   142d8:	b	141f0 <close_stdout@@Base+0x2370>
   142dc:	mov	ip, r1
   142e0:	mov	r3, r2
   142e4:	mov	r1, r0
   142e8:	mov	r2, ip
   142ec:	mov	r0, #0
   142f0:	b	1425c <close_stdout@@Base+0x23dc>
   142f4:	push	{r4, r5, r6, r7, r8, lr}
   142f8:	mov	r5, r2
   142fc:	ldr	lr, [pc, #136]	; 1438c <close_stdout@@Base+0x250c>
   14300:	mov	r7, r0
   14304:	mov	r6, r1
   14308:	ldr	r4, [pc, #128]	; 14390 <close_stdout@@Base+0x2510>
   1430c:	add	lr, pc, lr
   14310:	sub	sp, sp, #56	; 0x38
   14314:	add	lr, lr, #256	; 0x100
   14318:	ldr	r8, [pc, #116]	; 14394 <close_stdout@@Base+0x2514>
   1431c:	add	r4, pc, r4
   14320:	add	ip, sp, #4
   14324:	ldm	lr!, {r0, r1, r2, r3}
   14328:	ldr	r4, [r4, r8]
   1432c:	stmia	ip!, {r0, r1, r2, r3}
   14330:	ldm	lr!, {r0, r1, r2, r3}
   14334:	ldr	r8, [r4]
   14338:	stmia	ip!, {r0, r1, r2, r3}
   1433c:	ldm	lr, {r0, r1, r2, r3}
   14340:	str	r8, [sp, #52]	; 0x34
   14344:	stm	ip, {r0, r1, r2, r3}
   14348:	mov	r1, r5
   1434c:	add	r5, sp, #4
   14350:	mov	r2, #1
   14354:	mov	r0, r5
   14358:	bl	13ec0 <close_stdout@@Base+0x2040>
   1435c:	mov	r2, r6
   14360:	mov	r3, r5
   14364:	mov	r1, r7
   14368:	mov	r0, #0
   1436c:	bl	13c64 <close_stdout@@Base+0x1de4>
   14370:	ldr	r2, [sp, #52]	; 0x34
   14374:	ldr	r3, [r4]
   14378:	cmp	r2, r3
   1437c:	bne	14388 <close_stdout@@Base+0x2508>
   14380:	add	sp, sp, #56	; 0x38
   14384:	pop	{r4, r5, r6, r7, r8, pc}
   14388:	bl	11158 <__stack_chk_fail@plt>
   1438c:	muleq	r1, r0, lr
   14390:	ldrdeq	r3, [r1], -ip
   14394:	andeq	r0, r0, ip, lsl #2
   14398:	mov	r2, r1
   1439c:	mvn	r1, #0
   143a0:	b	142f4 <close_stdout@@Base+0x2474>
   143a4:	mov	r1, #58	; 0x3a
   143a8:	b	14398 <close_stdout@@Base+0x2518>
   143ac:	mov	r2, #58	; 0x3a
   143b0:	b	142f4 <close_stdout@@Base+0x2474>
   143b4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   143b8:	mov	r5, r2
   143bc:	ldr	lr, [pc, #144]	; 14454 <close_stdout@@Base+0x25d4>
   143c0:	mov	r8, r0
   143c4:	mov	r9, r1
   143c8:	mov	r7, r3
   143cc:	add	lr, pc, lr
   143d0:	ldr	r4, [pc, #128]	; 14458 <close_stdout@@Base+0x25d8>
   143d4:	add	lr, lr, #256	; 0x100
   143d8:	sub	sp, sp, #56	; 0x38
   143dc:	ldr	sl, [pc, #120]	; 1445c <close_stdout@@Base+0x25dc>
   143e0:	add	r4, pc, r4
   143e4:	ldm	lr!, {r0, r1, r2, r3}
   143e8:	add	ip, sp, #4
   143ec:	ldr	r4, [r4, sl]
   143f0:	ldr	r6, [sp, #88]	; 0x58
   143f4:	stmia	ip!, {r0, r1, r2, r3}
   143f8:	ldm	lr!, {r0, r1, r2, r3}
   143fc:	ldr	sl, [r4]
   14400:	stmia	ip!, {r0, r1, r2, r3}
   14404:	ldm	lr, {r0, r1, r2, r3}
   14408:	str	sl, [sp, #52]	; 0x34
   1440c:	stm	ip, {r0, r1, r2, r3}
   14410:	mov	r2, r5
   14414:	add	r5, sp, #4
   14418:	mov	r1, r9
   1441c:	mov	r0, r5
   14420:	bl	13f34 <close_stdout@@Base+0x20b4>
   14424:	mov	r2, r6
   14428:	mov	r3, r5
   1442c:	mov	r0, r8
   14430:	mov	r1, r7
   14434:	bl	13c64 <close_stdout@@Base+0x1de4>
   14438:	ldr	r2, [sp, #52]	; 0x34
   1443c:	ldr	r3, [r4]
   14440:	cmp	r2, r3
   14444:	bne	14450 <close_stdout@@Base+0x25d0>
   14448:	add	sp, sp, #56	; 0x38
   1444c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14450:	bl	11158 <__stack_chk_fail@plt>
   14454:	ldrdeq	r3, [r1], -r0
   14458:	andeq	r3, r1, r8, lsl ip
   1445c:	andeq	r0, r0, ip, lsl #2
   14460:	push	{lr}		; (str lr, [sp, #-4]!)
   14464:	sub	sp, sp, #12
   14468:	mvn	ip, #0
   1446c:	str	ip, [sp]
   14470:	bl	143b4 <close_stdout@@Base+0x2534>
   14474:	add	sp, sp, #12
   14478:	pop	{pc}		; (ldr pc, [sp], #4)
   1447c:	mov	ip, r1
   14480:	mov	r3, r2
   14484:	mov	r1, r0
   14488:	mov	r2, ip
   1448c:	mov	r0, #0
   14490:	b	14460 <close_stdout@@Base+0x25e0>
   14494:	push	{lr}		; (str lr, [sp, #-4]!)
   14498:	sub	sp, sp, #12
   1449c:	mov	lr, r1
   144a0:	mov	ip, r2
   144a4:	mov	r1, r0
   144a8:	str	r3, [sp]
   144ac:	mov	r2, lr
   144b0:	mov	r3, ip
   144b4:	mov	r0, #0
   144b8:	bl	143b4 <close_stdout@@Base+0x2534>
   144bc:	add	sp, sp, #12
   144c0:	pop	{pc}		; (ldr pc, [sp], #4)
   144c4:	ldr	r3, [pc, #12]	; 144d8 <close_stdout@@Base+0x2658>
   144c8:	ldr	ip, [pc, #12]	; 144dc <close_stdout@@Base+0x265c>
   144cc:	add	r3, pc, r3
   144d0:	ldr	r3, [r3, ip]
   144d4:	b	13c64 <close_stdout@@Base+0x1de4>
   144d8:	andeq	r3, r1, ip, lsr #22
   144dc:	andeq	r0, r0, r8, lsl #2
   144e0:	mov	r2, r1
   144e4:	mov	r1, r0
   144e8:	mov	r0, #0
   144ec:	b	144c4 <close_stdout@@Base+0x2644>
   144f0:	mvn	r2, #0
   144f4:	b	144c4 <close_stdout@@Base+0x2644>
   144f8:	mov	r1, r0
   144fc:	mov	r0, #0
   14500:	b	144f0 <close_stdout@@Base+0x2670>
   14504:	push	{r4, r5, r6, r7, r8, lr}
   14508:	mov	r8, #57344	; 0xe000
   1450c:	movt	r8, #32767	; 0x7fff
   14510:	mov	r7, r0
   14514:	mov	r6, r1
   14518:	mov	r4, r2
   1451c:	mov	r0, r7
   14520:	mov	r1, r6
   14524:	mov	r2, r4
   14528:	bl	110e0 <read@plt>
   1452c:	subs	r5, r0, #0
   14530:	bge	1455c <close_stdout@@Base+0x26dc>
   14534:	bl	11278 <__errno_location@plt>
   14538:	ldr	r3, [r0]
   1453c:	cmp	r3, #4
   14540:	beq	1451c <close_stdout@@Base+0x269c>
   14544:	cmp	r3, #22
   14548:	bne	1455c <close_stdout@@Base+0x26dc>
   1454c:	cmp	r4, r8
   14550:	mov	r4, #57344	; 0xe000
   14554:	movt	r4, #32767	; 0x7fff
   14558:	bhi	1451c <close_stdout@@Base+0x269c>
   1455c:	mov	r0, r5
   14560:	pop	{r4, r5, r6, r7, r8, pc}
   14564:	push	{r4, r5, r6, r7, lr}
   14568:	cmp	r1, #0
   1456c:	sub	sp, sp, #36	; 0x24
   14570:	ldr	r7, [pc, #896]	; 148f8 <close_stdout@@Base+0x2a78>
   14574:	mov	ip, r3
   14578:	mov	r5, r0
   1457c:	add	r7, pc, r7
   14580:	ldr	r4, [sp, #56]	; 0x38
   14584:	ldr	r6, [sp, #60]	; 0x3c
   14588:	beq	148cc <close_stdout@@Base+0x2a4c>
   1458c:	str	r2, [sp]
   14590:	mov	r3, r1
   14594:	ldr	r2, [pc, #864]	; 148fc <close_stdout@@Base+0x2a7c>
   14598:	mov	r1, #1
   1459c:	str	ip, [sp, #4]
   145a0:	add	r2, pc, r2
   145a4:	bl	112d8 <__fprintf_chk@plt>
   145a8:	ldr	r1, [pc, #848]	; 14900 <close_stdout@@Base+0x2a80>
   145ac:	mov	r2, #5
   145b0:	mov	r0, #0
   145b4:	add	r1, pc, r1
   145b8:	bl	1114c <dcgettext@plt>
   145bc:	ldr	r2, [pc, #832]	; 14904 <close_stdout@@Base+0x2a84>
   145c0:	movw	ip, #2013	; 0x7dd
   145c4:	mov	r1, #1
   145c8:	ldr	r2, [r7, r2]
   145cc:	str	ip, [sp]
   145d0:	mov	r3, r0
   145d4:	mov	r0, r5
   145d8:	bl	112d8 <__fprintf_chk@plt>
   145dc:	ldr	r1, [pc, #804]	; 14908 <close_stdout@@Base+0x2a88>
   145e0:	mov	r0, #0
   145e4:	mov	r2, #5
   145e8:	add	r1, pc, r1
   145ec:	bl	1114c <dcgettext@plt>
   145f0:	mov	r1, r5
   145f4:	bl	110b0 <fputs_unlocked@plt>
   145f8:	cmp	r6, #9
   145fc:	addls	pc, pc, r6, lsl #2
   14600:	b	148e8 <close_stdout@@Base+0x2a68>
   14604:	b	14698 <close_stdout@@Base+0x2818>
   14608:	b	1469c <close_stdout@@Base+0x281c>
   1460c:	b	146cc <close_stdout@@Base+0x284c>
   14610:	b	14700 <close_stdout@@Base+0x2880>
   14614:	b	1473c <close_stdout@@Base+0x28bc>
   14618:	b	1477c <close_stdout@@Base+0x28fc>
   1461c:	b	147c4 <close_stdout@@Base+0x2944>
   14620:	b	14814 <close_stdout@@Base+0x2994>
   14624:	b	1486c <close_stdout@@Base+0x29ec>
   14628:	b	1462c <close_stdout@@Base+0x27ac>
   1462c:	ldr	r1, [pc, #728]	; 1490c <close_stdout@@Base+0x2a8c>
   14630:	mov	r0, #0
   14634:	add	r1, pc, r1
   14638:	mov	r2, #5
   1463c:	bl	1114c <dcgettext@plt>
   14640:	ldm	r4, {r3, ip}
   14644:	mov	r1, #1
   14648:	str	ip, [sp]
   1464c:	ldr	ip, [r4, #8]
   14650:	str	ip, [sp, #4]
   14654:	ldr	ip, [r4, #12]
   14658:	str	ip, [sp, #8]
   1465c:	ldr	ip, [r4, #16]
   14660:	str	ip, [sp, #12]
   14664:	ldr	ip, [r4, #20]
   14668:	str	ip, [sp, #16]
   1466c:	ldr	ip, [r4, #24]
   14670:	str	ip, [sp, #20]
   14674:	ldr	ip, [r4, #28]
   14678:	str	ip, [sp, #24]
   1467c:	ldr	ip, [r4, #32]
   14680:	str	ip, [sp, #28]
   14684:	mov	r2, r0
   14688:	mov	r0, r5
   1468c:	bl	112d8 <__fprintf_chk@plt>
   14690:	add	sp, sp, #36	; 0x24
   14694:	pop	{r4, r5, r6, r7, pc}
   14698:	bl	11368 <abort@plt>
   1469c:	ldr	r1, [pc, #620]	; 14910 <close_stdout@@Base+0x2a90>
   146a0:	mov	r2, #5
   146a4:	mov	r0, #0
   146a8:	add	r1, pc, r1
   146ac:	bl	1114c <dcgettext@plt>
   146b0:	ldr	r3, [r4]
   146b4:	mov	r1, #1
   146b8:	mov	r2, r0
   146bc:	mov	r0, r5
   146c0:	add	sp, sp, #36	; 0x24
   146c4:	pop	{r4, r5, r6, r7, lr}
   146c8:	b	112d8 <__fprintf_chk@plt>
   146cc:	ldr	r1, [pc, #576]	; 14914 <close_stdout@@Base+0x2a94>
   146d0:	mov	r2, #5
   146d4:	mov	r0, #0
   146d8:	add	r1, pc, r1
   146dc:	bl	1114c <dcgettext@plt>
   146e0:	ldm	r4, {r3, ip}
   146e4:	mov	r1, #1
   146e8:	str	ip, [sp, #56]	; 0x38
   146ec:	mov	r2, r0
   146f0:	mov	r0, r5
   146f4:	add	sp, sp, #36	; 0x24
   146f8:	pop	{r4, r5, r6, r7, lr}
   146fc:	b	112d8 <__fprintf_chk@plt>
   14700:	ldr	r1, [pc, #528]	; 14918 <close_stdout@@Base+0x2a98>
   14704:	mov	r2, #5
   14708:	mov	r0, #0
   1470c:	add	r1, pc, r1
   14710:	bl	1114c <dcgettext@plt>
   14714:	ldm	r4, {r3, ip}
   14718:	mov	r1, #1
   1471c:	str	ip, [sp, #56]	; 0x38
   14720:	ldr	ip, [r4, #8]
   14724:	str	ip, [sp, #60]	; 0x3c
   14728:	mov	r2, r0
   1472c:	mov	r0, r5
   14730:	add	sp, sp, #36	; 0x24
   14734:	pop	{r4, r5, r6, r7, lr}
   14738:	b	112d8 <__fprintf_chk@plt>
   1473c:	ldr	r1, [pc, #472]	; 1491c <close_stdout@@Base+0x2a9c>
   14740:	mov	r2, #5
   14744:	mov	r0, #0
   14748:	add	r1, pc, r1
   1474c:	bl	1114c <dcgettext@plt>
   14750:	ldm	r4, {r3, ip}
   14754:	mov	r1, #1
   14758:	str	ip, [sp]
   1475c:	ldr	ip, [r4, #8]
   14760:	str	ip, [sp, #4]
   14764:	ldr	ip, [r4, #12]
   14768:	str	ip, [sp, #8]
   1476c:	mov	r2, r0
   14770:	mov	r0, r5
   14774:	bl	112d8 <__fprintf_chk@plt>
   14778:	b	14690 <close_stdout@@Base+0x2810>
   1477c:	ldr	r1, [pc, #412]	; 14920 <close_stdout@@Base+0x2aa0>
   14780:	mov	r2, #5
   14784:	mov	r0, #0
   14788:	add	r1, pc, r1
   1478c:	bl	1114c <dcgettext@plt>
   14790:	ldm	r4, {r3, ip}
   14794:	mov	r1, #1
   14798:	str	ip, [sp]
   1479c:	ldr	ip, [r4, #8]
   147a0:	str	ip, [sp, #4]
   147a4:	ldr	ip, [r4, #12]
   147a8:	str	ip, [sp, #8]
   147ac:	ldr	ip, [r4, #16]
   147b0:	str	ip, [sp, #12]
   147b4:	mov	r2, r0
   147b8:	mov	r0, r5
   147bc:	bl	112d8 <__fprintf_chk@plt>
   147c0:	b	14690 <close_stdout@@Base+0x2810>
   147c4:	ldr	r1, [pc, #344]	; 14924 <close_stdout@@Base+0x2aa4>
   147c8:	mov	r2, #5
   147cc:	mov	r0, #0
   147d0:	add	r1, pc, r1
   147d4:	bl	1114c <dcgettext@plt>
   147d8:	ldm	r4, {r3, ip}
   147dc:	mov	r1, #1
   147e0:	str	ip, [sp]
   147e4:	ldr	ip, [r4, #8]
   147e8:	str	ip, [sp, #4]
   147ec:	ldr	ip, [r4, #12]
   147f0:	str	ip, [sp, #8]
   147f4:	ldr	ip, [r4, #16]
   147f8:	str	ip, [sp, #12]
   147fc:	ldr	ip, [r4, #20]
   14800:	str	ip, [sp, #16]
   14804:	mov	r2, r0
   14808:	mov	r0, r5
   1480c:	bl	112d8 <__fprintf_chk@plt>
   14810:	b	14690 <close_stdout@@Base+0x2810>
   14814:	ldr	r1, [pc, #268]	; 14928 <close_stdout@@Base+0x2aa8>
   14818:	mov	r2, #5
   1481c:	mov	r0, #0
   14820:	add	r1, pc, r1
   14824:	bl	1114c <dcgettext@plt>
   14828:	ldm	r4, {r3, ip}
   1482c:	mov	r1, #1
   14830:	str	ip, [sp]
   14834:	ldr	ip, [r4, #8]
   14838:	str	ip, [sp, #4]
   1483c:	ldr	ip, [r4, #12]
   14840:	str	ip, [sp, #8]
   14844:	ldr	ip, [r4, #16]
   14848:	str	ip, [sp, #12]
   1484c:	ldr	ip, [r4, #20]
   14850:	str	ip, [sp, #16]
   14854:	ldr	ip, [r4, #24]
   14858:	str	ip, [sp, #20]
   1485c:	mov	r2, r0
   14860:	mov	r0, r5
   14864:	bl	112d8 <__fprintf_chk@plt>
   14868:	b	14690 <close_stdout@@Base+0x2810>
   1486c:	ldr	r1, [pc, #184]	; 1492c <close_stdout@@Base+0x2aac>
   14870:	mov	r2, #5
   14874:	mov	r0, #0
   14878:	add	r1, pc, r1
   1487c:	bl	1114c <dcgettext@plt>
   14880:	ldm	r4, {r3, ip}
   14884:	mov	r1, #1
   14888:	str	ip, [sp]
   1488c:	ldr	ip, [r4, #8]
   14890:	str	ip, [sp, #4]
   14894:	ldr	ip, [r4, #12]
   14898:	str	ip, [sp, #8]
   1489c:	ldr	ip, [r4, #16]
   148a0:	str	ip, [sp, #12]
   148a4:	ldr	ip, [r4, #20]
   148a8:	str	ip, [sp, #16]
   148ac:	ldr	ip, [r4, #24]
   148b0:	str	ip, [sp, #20]
   148b4:	ldr	ip, [r4, #28]
   148b8:	str	ip, [sp, #24]
   148bc:	mov	r2, r0
   148c0:	mov	r0, r5
   148c4:	bl	112d8 <__fprintf_chk@plt>
   148c8:	b	14690 <close_stdout@@Base+0x2810>
   148cc:	str	r3, [sp]
   148d0:	mov	r3, r2
   148d4:	ldr	r2, [pc, #84]	; 14930 <close_stdout@@Base+0x2ab0>
   148d8:	mov	r1, #1
   148dc:	add	r2, pc, r2
   148e0:	bl	112d8 <__fprintf_chk@plt>
   148e4:	b	145a8 <close_stdout@@Base+0x2728>
   148e8:	ldr	r1, [pc, #68]	; 14934 <close_stdout@@Base+0x2ab4>
   148ec:	mov	r0, #0
   148f0:	add	r1, pc, r1
   148f4:	b	14638 <close_stdout@@Base+0x27b8>
   148f8:	andeq	r3, r1, ip, ror sl
   148fc:	andeq	r2, r0, ip, asr sp
   14900:	andeq	r2, r0, ip, asr sp
   14904:	andeq	r0, r0, ip, lsr r1
   14908:	andeq	r2, r0, ip, lsr #26
   1490c:			; <UNDEFINED> instruction: 0x00002eb8
   14910:	andeq	r2, r0, r8, lsr sp
   14914:	andeq	r2, r0, r8, lsl sp
   14918:	strdeq	r2, [r0], -ip
   1491c:	ldrdeq	r2, [r0], -ip
   14920:			; <UNDEFINED> instruction: 0x00002cbc
   14924:	muleq	r0, r8, ip
   14928:	andeq	r2, r0, r0, ror ip
   1492c:	andeq	r2, r0, r4, asr #24
   14930:	andeq	r2, r0, ip, lsr #20
   14934:	andeq	r2, r0, r0, lsr ip
   14938:	push	{r4, r5, lr}
   1493c:	sub	sp, sp, #12
   14940:	ldr	r5, [sp, #24]
   14944:	ldr	ip, [r5]
   14948:	cmp	ip, #0
   1494c:	beq	14968 <close_stdout@@Base+0x2ae8>
   14950:	mov	lr, r5
   14954:	mov	ip, #0
   14958:	ldr	r4, [lr, #4]!
   1495c:	add	ip, ip, #1
   14960:	cmp	r4, #0
   14964:	bne	14958 <close_stdout@@Base+0x2ad8>
   14968:	stm	sp, {r5, ip}
   1496c:	bl	14564 <close_stdout@@Base+0x26e4>
   14970:	add	sp, sp, #12
   14974:	pop	{r4, r5, pc}
   14978:	push	{r4, r5, r6, r7, lr}
   1497c:	sub	sp, sp, #60	; 0x3c
   14980:	ldr	r4, [pc, #100]	; 149ec <close_stdout@@Base+0x2b6c>
   14984:	mov	ip, #0
   14988:	ldr	r5, [pc, #96]	; 149f0 <close_stdout@@Base+0x2b70>
   1498c:	mov	lr, ip
   14990:	add	r4, pc, r4
   14994:	ldr	r6, [sp, #80]	; 0x50
   14998:	ldr	r7, [r4, r5]
   1499c:	add	r5, sp, #12
   149a0:	ldr	r4, [r7]
   149a4:	str	r4, [sp, #52]	; 0x34
   149a8:	ldr	r4, [r6, ip]
   149ac:	cmp	r4, #0
   149b0:	str	r4, [r5, ip]
   149b4:	beq	149c8 <close_stdout@@Base+0x2b48>
   149b8:	add	lr, lr, #1
   149bc:	add	ip, ip, #4
   149c0:	cmp	lr, #10
   149c4:	bne	149a8 <close_stdout@@Base+0x2b28>
   149c8:	stm	sp, {r5, lr}
   149cc:	bl	14564 <close_stdout@@Base+0x26e4>
   149d0:	ldr	r2, [sp, #52]	; 0x34
   149d4:	ldr	r3, [r7]
   149d8:	cmp	r2, r3
   149dc:	bne	149e8 <close_stdout@@Base+0x2b68>
   149e0:	add	sp, sp, #60	; 0x3c
   149e4:	pop	{r4, r5, r6, r7, pc}
   149e8:	bl	11158 <__stack_chk_fail@plt>
   149ec:	andeq	r3, r1, r8, ror #12
   149f0:	andeq	r0, r0, ip, lsl #2
   149f4:	push	{r3}		; (str r3, [sp, #-4]!)
   149f8:	push	{r4, lr}
   149fc:	sub	sp, sp, #20
   14a00:	ldr	lr, [pc, #72]	; 14a50 <close_stdout@@Base+0x2bd0>
   14a04:	add	ip, sp, #32
   14a08:	ldr	r4, [pc, #68]	; 14a54 <close_stdout@@Base+0x2bd4>
   14a0c:	add	lr, pc, lr
   14a10:	ldr	r3, [sp, #28]
   14a14:	ldr	r4, [lr, r4]
   14a18:	str	ip, [sp]
   14a1c:	str	ip, [sp, #8]
   14a20:	ldr	ip, [r4]
   14a24:	str	ip, [sp, #12]
   14a28:	bl	14978 <close_stdout@@Base+0x2af8>
   14a2c:	ldr	r2, [sp, #12]
   14a30:	ldr	r3, [r4]
   14a34:	cmp	r2, r3
   14a38:	bne	14a4c <close_stdout@@Base+0x2bcc>
   14a3c:	add	sp, sp, #20
   14a40:	pop	{r4, lr}
   14a44:	add	sp, sp, #4
   14a48:	bx	lr
   14a4c:	bl	11158 <__stack_chk_fail@plt>
   14a50:	andeq	r3, r1, ip, ror #11
   14a54:	andeq	r0, r0, ip, lsl #2
   14a58:	ldr	r1, [pc, #132]	; 14ae4 <close_stdout@@Base+0x2c64>
   14a5c:	mov	r2, #5
   14a60:	push	{r4, lr}
   14a64:	add	r1, pc, r1
   14a68:	mov	r0, #0
   14a6c:	ldr	r4, [pc, #116]	; 14ae8 <close_stdout@@Base+0x2c68>
   14a70:	bl	1114c <dcgettext@plt>
   14a74:	ldr	r2, [pc, #112]	; 14aec <close_stdout@@Base+0x2c6c>
   14a78:	add	r4, pc, r4
   14a7c:	add	r2, pc, r2
   14a80:	mov	r1, r0
   14a84:	mov	r0, #1
   14a88:	bl	112c0 <__printf_chk@plt>
   14a8c:	ldr	r1, [pc, #92]	; 14af0 <close_stdout@@Base+0x2c70>
   14a90:	mov	r2, #5
   14a94:	mov	r0, #0
   14a98:	add	r1, pc, r1
   14a9c:	bl	1114c <dcgettext@plt>
   14aa0:	ldr	r2, [pc, #76]	; 14af4 <close_stdout@@Base+0x2c74>
   14aa4:	ldr	r3, [pc, #76]	; 14af8 <close_stdout@@Base+0x2c78>
   14aa8:	add	r2, pc, r2
   14aac:	add	r3, pc, r3
   14ab0:	mov	r1, r0
   14ab4:	mov	r0, #1
   14ab8:	bl	112c0 <__printf_chk@plt>
   14abc:	ldr	r1, [pc, #56]	; 14afc <close_stdout@@Base+0x2c7c>
   14ac0:	mov	r0, #0
   14ac4:	mov	r2, #5
   14ac8:	add	r1, pc, r1
   14acc:	bl	1114c <dcgettext@plt>
   14ad0:	ldr	r3, [pc, #40]	; 14b00 <close_stdout@@Base+0x2c80>
   14ad4:	ldr	r3, [r4, r3]
   14ad8:	pop	{r4, lr}
   14adc:	ldr	r1, [r3]
   14ae0:	b	110b0 <fputs_unlocked@plt>
   14ae4:	strdeq	r2, [r0], -r8
   14ae8:	andeq	r3, r1, r0, lsl #11
   14aec:	strdeq	r2, [r0], -r8
   14af0:	strdeq	r2, [r0], -r4
   14af4:	ldrdeq	r2, [r0], -ip
   14af8:	andeq	r2, r0, r8, ror #11
   14afc:	ldrdeq	r2, [r0], -r8
   14b00:	andeq	r0, r0, ip, lsr #2
   14b04:	push	{r4, lr}
   14b08:	mov	r4, r0
   14b0c:	bl	11200 <malloc@plt>
   14b10:	rsbs	r3, r0, #1
   14b14:	movcc	r3, #0
   14b18:	cmp	r4, #0
   14b1c:	moveq	r3, #0
   14b20:	cmp	r3, #0
   14b24:	popeq	{r4, pc}
   14b28:	bl	14d18 <close_stdout@@Base+0x2e98>
   14b2c:	push	{r3, r4, r5, lr}
   14b30:	mov	r4, r0
   14b34:	mvn	r0, #0
   14b38:	mov	r5, r1
   14b3c:	bl	15e98 <close_stdout@@Base+0x4018>
   14b40:	cmp	r0, r4
   14b44:	bcc	14b54 <close_stdout@@Base+0x2cd4>
   14b48:	mul	r0, r4, r5
   14b4c:	pop	{r3, r4, r5, lr}
   14b50:	b	14b04 <close_stdout@@Base+0x2c84>
   14b54:	bl	14d18 <close_stdout@@Base+0x2e98>
   14b58:	b	14b04 <close_stdout@@Base+0x2c84>
   14b5c:	rsbs	r3, r1, #1
   14b60:	push	{r4, lr}
   14b64:	movcc	r3, #0
   14b68:	cmp	r0, #0
   14b6c:	mov	r4, r1
   14b70:	moveq	r3, #0
   14b74:	cmp	r3, #0
   14b78:	bne	14b9c <close_stdout@@Base+0x2d1c>
   14b7c:	bl	11164 <realloc@plt>
   14b80:	rsbs	r3, r0, #1
   14b84:	movcc	r3, #0
   14b88:	cmp	r4, #0
   14b8c:	moveq	r3, #0
   14b90:	cmp	r3, #0
   14b94:	popeq	{r4, pc}
   14b98:	bl	14d18 <close_stdout@@Base+0x2e98>
   14b9c:	bl	11104 <free@plt>
   14ba0:	mov	r0, #0
   14ba4:	pop	{r4, pc}
   14ba8:	push	{r4, r5, r6, lr}
   14bac:	mov	r5, r1
   14bb0:	mov	r6, r0
   14bb4:	mov	r1, r2
   14bb8:	mvn	r0, #0
   14bbc:	mov	r4, r2
   14bc0:	bl	15e98 <close_stdout@@Base+0x4018>
   14bc4:	cmp	r0, r5
   14bc8:	bcc	14bdc <close_stdout@@Base+0x2d5c>
   14bcc:	mov	r0, r6
   14bd0:	mul	r1, r5, r4
   14bd4:	pop	{r4, r5, r6, lr}
   14bd8:	b	14b5c <close_stdout@@Base+0x2cdc>
   14bdc:	bl	14d18 <close_stdout@@Base+0x2e98>
   14be0:	push	{r3, r4, r5, r6, r7, lr}
   14be4:	subs	r7, r0, #0
   14be8:	mov	r5, r1
   14bec:	mov	r6, r2
   14bf0:	ldr	r4, [r1]
   14bf4:	beq	14c2c <close_stdout@@Base+0x2dac>
   14bf8:	movw	r0, #43690	; 0xaaaa
   14bfc:	mov	r1, r2
   14c00:	bfi	r0, r0, #16, #16
   14c04:	bl	15e98 <close_stdout@@Base+0x4018>
   14c08:	cmp	r4, r0
   14c0c:	addcc	r3, r4, #1
   14c10:	addcc	r4, r4, r3, lsr #1
   14c14:	bcs	14c50 <close_stdout@@Base+0x2dd0>
   14c18:	str	r4, [r5]
   14c1c:	mov	r0, r7
   14c20:	mul	r1, r6, r4
   14c24:	pop	{r3, r4, r5, r6, r7, lr}
   14c28:	b	14b5c <close_stdout@@Base+0x2cdc>
   14c2c:	cmp	r4, #0
   14c30:	bne	14c18 <close_stdout@@Base+0x2d98>
   14c34:	mov	r0, #64	; 0x40
   14c38:	mov	r1, r2
   14c3c:	bl	15e98 <close_stdout@@Base+0x4018>
   14c40:	cmp	r0, #0
   14c44:	movne	r4, r0
   14c48:	addeq	r4, r0, #1
   14c4c:	b	14c18 <close_stdout@@Base+0x2d98>
   14c50:	bl	14d18 <close_stdout@@Base+0x2e98>
   14c54:	cmp	r0, #0
   14c58:	push	{r3, lr}
   14c5c:	ldr	r3, [r1]
   14c60:	beq	14c8c <close_stdout@@Base+0x2e0c>
   14c64:	movw	r2, #43689	; 0xaaa9
   14c68:	movt	r2, #43690	; 0xaaaa
   14c6c:	cmp	r3, r2
   14c70:	addls	r2, r3, #1
   14c74:	addls	r3, r3, r2, lsr #1
   14c78:	bhi	14ca4 <close_stdout@@Base+0x2e24>
   14c7c:	str	r3, [r1]
   14c80:	mov	r1, r3
   14c84:	pop	{r3, lr}
   14c88:	b	14b5c <close_stdout@@Base+0x2cdc>
   14c8c:	cmp	r3, #0
   14c90:	moveq	r3, #64	; 0x40
   14c94:	str	r3, [r1]
   14c98:	mov	r1, r3
   14c9c:	pop	{r3, lr}
   14ca0:	b	14b5c <close_stdout@@Base+0x2cdc>
   14ca4:	bl	14d18 <close_stdout@@Base+0x2e98>
   14ca8:	push	{r4, lr}
   14cac:	mov	r4, r0
   14cb0:	bl	14b04 <close_stdout@@Base+0x2c84>
   14cb4:	mov	r2, r4
   14cb8:	mov	r1, #0
   14cbc:	pop	{r4, lr}
   14cc0:	b	112a8 <memset@plt>
   14cc4:	push	{r3, lr}
   14cc8:	bl	110a4 <calloc@plt>
   14ccc:	cmp	r0, #0
   14cd0:	popne	{r3, pc}
   14cd4:	bl	14d18 <close_stdout@@Base+0x2e98>
   14cd8:	push	{r3, r4, r5, lr}
   14cdc:	mov	r4, r1
   14ce0:	mov	r5, r0
   14ce4:	mov	r0, r1
   14ce8:	bl	14b04 <close_stdout@@Base+0x2c84>
   14cec:	mov	r1, r5
   14cf0:	mov	r2, r4
   14cf4:	pop	{r3, r4, r5, lr}
   14cf8:	b	1111c <memcpy@plt>
   14cfc:	push	{r4, lr}
   14d00:	mov	r4, r0
   14d04:	bl	11254 <strlen@plt>
   14d08:	add	r1, r0, #1
   14d0c:	mov	r0, r4
   14d10:	pop	{r4, lr}
   14d14:	b	14cd8 <close_stdout@@Base+0x2e58>
   14d18:	ldr	r3, [pc, #64]	; 14d60 <close_stdout@@Base+0x2ee0>
   14d1c:	mov	r2, #5
   14d20:	ldr	ip, [pc, #60]	; 14d64 <close_stdout@@Base+0x2ee4>
   14d24:	mov	r0, #0
   14d28:	add	r3, pc, r3
   14d2c:	ldr	r1, [pc, #52]	; 14d68 <close_stdout@@Base+0x2ee8>
   14d30:	push	{r4, lr}
   14d34:	add	r1, pc, r1
   14d38:	ldr	r3, [r3, ip]
   14d3c:	ldr	r4, [r3]
   14d40:	bl	1114c <dcgettext@plt>
   14d44:	ldr	r2, [pc, #32]	; 14d6c <close_stdout@@Base+0x2eec>
   14d48:	mov	r1, #0
   14d4c:	add	r2, pc, r2
   14d50:	mov	r3, r0
   14d54:	mov	r0, r4
   14d58:	bl	111dc <error@plt>
   14d5c:	bl	11368 <abort@plt>
   14d60:	ldrdeq	r3, [r1], -r0
   14d64:	andeq	r0, r0, r0, lsr r1
   14d68:	ldrdeq	r2, [r0], -ip
   14d6c:	andeq	r2, r0, r4, ror r4
   14d70:	ldr	ip, [pc, #1852]	; 154b4 <close_stdout@@Base+0x3634>
   14d74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14d78:	mov	fp, r2
   14d7c:	ldr	r2, [pc, #1844]	; 154b8 <close_stdout@@Base+0x3638>
   14d80:	add	ip, pc, ip
   14d84:	mov	r9, r3
   14d88:	sub	sp, sp, #36	; 0x24
   14d8c:	mov	r3, ip
   14d90:	cmp	fp, #36	; 0x24
   14d94:	ldr	sl, [ip, r2]
   14d98:	mov	r5, r0
   14d9c:	mov	r8, r1
   14da0:	ldr	r6, [sp, #72]	; 0x48
   14da4:	ldr	r3, [sl]
   14da8:	str	r3, [sp, #28]
   14dac:	bhi	15494 <close_stdout@@Base+0x3614>
   14db0:	cmp	r1, #0
   14db4:	addeq	r8, sp, #24
   14db8:	bl	1123c <__ctype_b_loc@plt>
   14dbc:	ldrb	r3, [r5]
   14dc0:	mov	r1, r5
   14dc4:	ldr	r0, [r0]
   14dc8:	b	14dd0 <close_stdout@@Base+0x2f50>
   14dcc:	ldrb	r3, [r1, #1]!
   14dd0:	lsl	r2, r3, #1
   14dd4:	ldrh	r4, [r0, r2]
   14dd8:	and	r4, r4, #8192	; 0x2000
   14ddc:	uxth	r4, r4
   14de0:	cmp	r4, #0
   14de4:	bne	14dcc <close_stdout@@Base+0x2f4c>
   14de8:	cmp	r3, #45	; 0x2d
   14dec:	bne	14e0c <close_stdout@@Base+0x2f8c>
   14df0:	mov	r0, #4
   14df4:	ldr	r2, [sp, #28]
   14df8:	ldr	r3, [sl]
   14dfc:	cmp	r2, r3
   14e00:	bne	15490 <close_stdout@@Base+0x3610>
   14e04:	add	sp, sp, #36	; 0x24
   14e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14e0c:	bl	11278 <__errno_location@plt>
   14e10:	mov	r2, fp
   14e14:	mov	r1, r8
   14e18:	mov	r3, r4
   14e1c:	str	r4, [r0]
   14e20:	mov	r7, r0
   14e24:	mov	r0, r5
   14e28:	bl	11128 <__strtoull_internal@plt>
   14e2c:	ldr	fp, [r8]
   14e30:	cmp	fp, r5
   14e34:	strd	r0, [sp]
   14e38:	beq	14fb4 <close_stdout@@Base+0x3134>
   14e3c:	ldr	ip, [r7]
   14e40:	cmp	ip, #0
   14e44:	bne	14e70 <close_stdout@@Base+0x2ff0>
   14e48:	mov	r7, ip
   14e4c:	cmp	r6, #0
   14e50:	beq	15420 <close_stdout@@Base+0x35a0>
   14e54:	ldrb	r5, [fp]
   14e58:	cmp	r5, #0
   14e5c:	bne	14e80 <close_stdout@@Base+0x3000>
   14e60:	ldrd	r2, [sp]
   14e64:	mov	r0, r7
   14e68:	strd	r2, [r9]
   14e6c:	b	14df4 <close_stdout@@Base+0x2f74>
   14e70:	cmp	ip, #34	; 0x22
   14e74:	moveq	r7, #1
   14e78:	bne	14df0 <close_stdout@@Base+0x2f70>
   14e7c:	b	14e4c <close_stdout@@Base+0x2fcc>
   14e80:	mov	r0, r6
   14e84:	mov	r1, r5
   14e88:	bl	11260 <strchr@plt>
   14e8c:	cmp	r0, #0
   14e90:	beq	14ff0 <close_stdout@@Base+0x3170>
   14e94:	mov	r0, r6
   14e98:	mov	r1, #48	; 0x30
   14e9c:	bl	11260 <strchr@plt>
   14ea0:	cmp	r0, #0
   14ea4:	beq	14ec4 <close_stdout@@Base+0x3044>
   14ea8:	ldrb	r3, [fp, #1]
   14eac:	cmp	r3, #68	; 0x44
   14eb0:	beq	15448 <close_stdout@@Base+0x35c8>
   14eb4:	cmp	r3, #105	; 0x69
   14eb8:	beq	15430 <close_stdout@@Base+0x35b0>
   14ebc:	cmp	r3, #66	; 0x42
   14ec0:	beq	15448 <close_stdout@@Base+0x35c8>
   14ec4:	mov	r6, #1
   14ec8:	mov	r4, #1024	; 0x400
   14ecc:	sub	r5, r5, #66	; 0x42
   14ed0:	cmp	r5, #53	; 0x35
   14ed4:	addls	pc, pc, r5, lsl #2
   14ed8:	b	14ff0 <close_stdout@@Base+0x3170>
   14edc:	b	15298 <close_stdout@@Base+0x3418>
   14ee0:	b	14ff0 <close_stdout@@Base+0x3170>
   14ee4:	b	14ff0 <close_stdout@@Base+0x3170>
   14ee8:	b	1522c <close_stdout@@Base+0x33ac>
   14eec:	b	14ff0 <close_stdout@@Base+0x3170>
   14ef0:	b	151c0 <close_stdout@@Base+0x3340>
   14ef4:	b	14ff0 <close_stdout@@Base+0x3170>
   14ef8:	b	14ff0 <close_stdout@@Base+0x3170>
   14efc:	b	14ff0 <close_stdout@@Base+0x3170>
   14f00:	b	15168 <close_stdout@@Base+0x32e8>
   14f04:	b	14ff0 <close_stdout@@Base+0x3170>
   14f08:	b	15340 <close_stdout@@Base+0x34c0>
   14f0c:	b	14ff0 <close_stdout@@Base+0x3170>
   14f10:	b	14ff0 <close_stdout@@Base+0x3170>
   14f14:	b	152d4 <close_stdout@@Base+0x3454>
   14f18:	b	14ff0 <close_stdout@@Base+0x3170>
   14f1c:	b	14ff0 <close_stdout@@Base+0x3170>
   14f20:	b	14ff0 <close_stdout@@Base+0x3170>
   14f24:	b	153b4 <close_stdout@@Base+0x3534>
   14f28:	b	14ff0 <close_stdout@@Base+0x3170>
   14f2c:	b	14ff0 <close_stdout@@Base+0x3170>
   14f30:	b	14ff0 <close_stdout@@Base+0x3170>
   14f34:	b	14ff0 <close_stdout@@Base+0x3170>
   14f38:	b	150fc <close_stdout@@Base+0x327c>
   14f3c:	b	15084 <close_stdout@@Base+0x3204>
   14f40:	b	14ff0 <close_stdout@@Base+0x3170>
   14f44:	b	14ff0 <close_stdout@@Base+0x3170>
   14f48:	b	14ff0 <close_stdout@@Base+0x3170>
   14f4c:	b	14ff0 <close_stdout@@Base+0x3170>
   14f50:	b	14ff0 <close_stdout@@Base+0x3170>
   14f54:	b	14ff0 <close_stdout@@Base+0x3170>
   14f58:	b	14ff0 <close_stdout@@Base+0x3170>
   14f5c:	b	15048 <close_stdout@@Base+0x31c8>
   14f60:	b	15000 <close_stdout@@Base+0x3180>
   14f64:	b	14ff0 <close_stdout@@Base+0x3170>
   14f68:	b	14ff0 <close_stdout@@Base+0x3170>
   14f6c:	b	14ff0 <close_stdout@@Base+0x3170>
   14f70:	b	151c0 <close_stdout@@Base+0x3340>
   14f74:	b	14ff0 <close_stdout@@Base+0x3170>
   14f78:	b	14ff0 <close_stdout@@Base+0x3170>
   14f7c:	b	14ff0 <close_stdout@@Base+0x3170>
   14f80:	b	15168 <close_stdout@@Base+0x32e8>
   14f84:	b	14ff0 <close_stdout@@Base+0x3170>
   14f88:	b	15340 <close_stdout@@Base+0x34c0>
   14f8c:	b	14ff0 <close_stdout@@Base+0x3170>
   14f90:	b	14ff0 <close_stdout@@Base+0x3170>
   14f94:	b	14ff0 <close_stdout@@Base+0x3170>
   14f98:	b	14ff0 <close_stdout@@Base+0x3170>
   14f9c:	b	14ff0 <close_stdout@@Base+0x3170>
   14fa0:	b	14ff0 <close_stdout@@Base+0x3170>
   14fa4:	b	153b4 <close_stdout@@Base+0x3534>
   14fa8:	b	14ff0 <close_stdout@@Base+0x3170>
   14fac:	b	14ff0 <close_stdout@@Base+0x3170>
   14fb0:	b	15020 <close_stdout@@Base+0x31a0>
   14fb4:	cmp	r6, #0
   14fb8:	beq	14df0 <close_stdout@@Base+0x2f70>
   14fbc:	ldrb	r5, [r5]
   14fc0:	cmp	r5, #0
   14fc4:	beq	14df0 <close_stdout@@Base+0x2f70>
   14fc8:	mov	r0, r6
   14fcc:	mov	r1, r5
   14fd0:	bl	11260 <strchr@plt>
   14fd4:	cmp	r0, #0
   14fd8:	beq	14df0 <close_stdout@@Base+0x2f70>
   14fdc:	mov	r0, #1
   14fe0:	mov	r1, #0
   14fe4:	mov	r7, r4
   14fe8:	strd	r0, [sp]
   14fec:	b	14e94 <close_stdout@@Base+0x3014>
   14ff0:	ldrd	r2, [sp]
   14ff4:	orr	r0, r7, #2
   14ff8:	strd	r2, [r9]
   14ffc:	b	14df4 <close_stdout@@Base+0x2f74>
   15000:	mov	r3, #0
   15004:	add	r2, fp, r6
   15008:	str	r2, [r8]
   1500c:	ldrb	r2, [fp, r6]
   15010:	orr	r7, r7, r3
   15014:	cmp	r2, #0
   15018:	orrne	r7, r7, #2
   1501c:	b	14e60 <close_stdout@@Base+0x2fe0>
   15020:	ldrd	r2, [sp]
   15024:	cmp	r2, #0
   15028:	sbcs	r3, r3, #0
   1502c:	blt	15468 <close_stdout@@Base+0x35e8>
   15030:	ldrd	r0, [sp]
   15034:	mov	r3, #0
   15038:	adds	r0, r0, r0
   1503c:	adc	r1, r1, r1
   15040:	strd	r0, [sp]
   15044:	b	15004 <close_stdout@@Base+0x3184>
   15048:	ldrd	r0, [sp]
   1504c:	movw	r3, #65535	; 0xffff
   15050:	movt	r3, #127	; 0x7f
   15054:	mvn	r2, #0
   15058:	cmp	r1, r3
   1505c:	cmpeq	r0, r2
   15060:	bhi	15468 <close_stdout@@Base+0x35e8>
   15064:	lsl	r2, r1, #9
   15068:	ldr	r1, [sp]
   1506c:	lsl	r3, r0, #9
   15070:	str	r3, [sp]
   15074:	mov	r3, #0
   15078:	orr	r2, r2, r1, lsr #23
   1507c:	str	r2, [sp, #4]
   15080:	b	15004 <close_stdout@@Base+0x3184>
   15084:	asr	r5, r4, #31
   15088:	mov	r2, r4
   1508c:	mvn	r0, #0
   15090:	mvn	r1, #0
   15094:	mov	r3, r5
   15098:	bl	1645c <close_stdout@@Base+0x45dc>
   1509c:	mov	ip, r7
   150a0:	str	r6, [sp, #20]
   150a4:	mov	r2, #7
   150a8:	ldrd	r6, [sp]
   150ac:	mov	r3, #0
   150b0:	strd	r0, [sp, #8]
   150b4:	ldrd	r0, [sp, #8]
   150b8:	cmp	r1, r7
   150bc:	cmpeq	r0, r6
   150c0:	mulcs	r0, r6, r5
   150c4:	movcs	r1, #0
   150c8:	mlacs	r0, r4, r7, r0
   150cc:	movcc	r1, #1
   150d0:	umullcs	r6, r7, r6, r4
   150d4:	mvncc	r6, #0
   150d8:	mvncc	r7, #0
   150dc:	orr	r3, r3, r1
   150e0:	addcs	r7, r0, r7
   150e4:	subs	r2, r2, #1
   150e8:	bne	150b4 <close_stdout@@Base+0x3234>
   150ec:	strd	r6, [sp]
   150f0:	mov	r7, ip
   150f4:	ldr	r6, [sp, #20]
   150f8:	b	15004 <close_stdout@@Base+0x3184>
   150fc:	asr	r5, r4, #31
   15100:	mov	r2, r4
   15104:	mvn	r0, #0
   15108:	mvn	r1, #0
   1510c:	mov	r3, r5
   15110:	bl	1645c <close_stdout@@Base+0x45dc>
   15114:	mov	ip, r7
   15118:	str	r6, [sp, #20]
   1511c:	mov	r2, #8
   15120:	ldrd	r6, [sp]
   15124:	mov	r3, #0
   15128:	strd	r0, [sp, #8]
   1512c:	ldrd	r0, [sp, #8]
   15130:	cmp	r1, r7
   15134:	cmpeq	r0, r6
   15138:	mulcs	r0, r6, r5
   1513c:	movcs	r1, #0
   15140:	mlacs	r0, r4, r7, r0
   15144:	movcc	r1, #1
   15148:	umullcs	r6, r7, r6, r4
   1514c:	mvncc	r6, #0
   15150:	mvncc	r7, #0
   15154:	orr	r3, r3, r1
   15158:	addcs	r7, r0, r7
   1515c:	subs	r2, r2, #1
   15160:	bne	1512c <close_stdout@@Base+0x32ac>
   15164:	b	150ec <close_stdout@@Base+0x326c>
   15168:	mov	r2, r4
   1516c:	asr	r3, r4, #31
   15170:	mvn	r0, #0
   15174:	mvn	r1, #0
   15178:	strd	r2, [sp, #8]
   1517c:	bl	1645c <close_stdout@@Base+0x45dc>
   15180:	ldrd	r2, [sp]
   15184:	cmp	r3, r1
   15188:	cmpeq	r2, r0
   1518c:	bhi	15454 <close_stdout@@Base+0x35d4>
   15190:	ldr	r3, [sp]
   15194:	ldr	ip, [sp, #12]
   15198:	ldr	r0, [sp, #4]
   1519c:	ldr	r1, [sp]
   151a0:	mul	r2, r3, ip
   151a4:	mov	r3, #0
   151a8:	mla	r2, r4, r0, r2
   151ac:	umull	r0, r1, r1, r4
   151b0:	add	r2, r2, r1
   151b4:	strd	r0, [sp]
   151b8:	str	r2, [sp, #4]
   151bc:	b	15004 <close_stdout@@Base+0x3184>
   151c0:	asr	r5, r4, #31
   151c4:	mov	r2, r4
   151c8:	mvn	r0, #0
   151cc:	mvn	r1, #0
   151d0:	mov	r3, r5
   151d4:	bl	1645c <close_stdout@@Base+0x45dc>
   151d8:	mov	ip, r7
   151dc:	str	r6, [sp, #20]
   151e0:	mov	r2, #3
   151e4:	ldrd	r6, [sp]
   151e8:	mov	r3, #0
   151ec:	strd	r0, [sp, #8]
   151f0:	ldrd	r0, [sp, #8]
   151f4:	cmp	r1, r7
   151f8:	cmpeq	r0, r6
   151fc:	mulcs	r0, r6, r5
   15200:	movcs	r1, #0
   15204:	mlacs	r0, r4, r7, r0
   15208:	movcc	r1, #1
   1520c:	umullcs	r6, r7, r6, r4
   15210:	mvncc	r6, #0
   15214:	mvncc	r7, #0
   15218:	orr	r3, r3, r1
   1521c:	addcs	r7, r0, r7
   15220:	subs	r2, r2, #1
   15224:	bne	151f0 <close_stdout@@Base+0x3370>
   15228:	b	150ec <close_stdout@@Base+0x326c>
   1522c:	asr	r5, r4, #31
   15230:	mov	r2, r4
   15234:	mvn	r0, #0
   15238:	mvn	r1, #0
   1523c:	mov	r3, r5
   15240:	bl	1645c <close_stdout@@Base+0x45dc>
   15244:	mov	ip, r7
   15248:	str	r6, [sp, #20]
   1524c:	mov	r2, #6
   15250:	ldrd	r6, [sp]
   15254:	mov	r3, #0
   15258:	strd	r0, [sp, #8]
   1525c:	ldrd	r0, [sp, #8]
   15260:	cmp	r1, r7
   15264:	cmpeq	r0, r6
   15268:	mulcs	r0, r6, r5
   1526c:	movcs	r1, #0
   15270:	mlacs	r0, r4, r7, r0
   15274:	movcc	r1, #1
   15278:	umullcs	r6, r7, r6, r4
   1527c:	mvncc	r6, #0
   15280:	mvncc	r7, #0
   15284:	orr	r3, r3, r1
   15288:	addcs	r7, r0, r7
   1528c:	subs	r2, r2, #1
   15290:	bne	1525c <close_stdout@@Base+0x33dc>
   15294:	b	150ec <close_stdout@@Base+0x326c>
   15298:	ldrd	r0, [sp]
   1529c:	movw	r3, #65535	; 0xffff
   152a0:	movt	r3, #63	; 0x3f
   152a4:	mvn	r2, #0
   152a8:	cmp	r1, r3
   152ac:	cmpeq	r0, r2
   152b0:	bhi	15454 <close_stdout@@Base+0x35d4>
   152b4:	lsl	r2, r1, #10
   152b8:	ldr	r1, [sp]
   152bc:	lsl	r3, r0, #10
   152c0:	str	r3, [sp]
   152c4:	mov	r3, #0
   152c8:	orr	r2, r2, r1, lsr #22
   152cc:	str	r2, [sp, #4]
   152d0:	b	15004 <close_stdout@@Base+0x3184>
   152d4:	asr	r5, r4, #31
   152d8:	mov	r2, r4
   152dc:	mvn	r0, #0
   152e0:	mvn	r1, #0
   152e4:	mov	r3, r5
   152e8:	bl	1645c <close_stdout@@Base+0x45dc>
   152ec:	mov	ip, r7
   152f0:	str	r6, [sp, #20]
   152f4:	mov	r2, #5
   152f8:	ldrd	r6, [sp]
   152fc:	mov	r3, #0
   15300:	strd	r0, [sp, #8]
   15304:	ldrd	r0, [sp, #8]
   15308:	cmp	r1, r7
   1530c:	cmpeq	r0, r6
   15310:	mulcs	r0, r6, r5
   15314:	movcs	r1, #0
   15318:	mlacs	r0, r4, r7, r0
   1531c:	movcc	r1, #1
   15320:	umullcs	r6, r7, r6, r4
   15324:	mvncc	r6, #0
   15328:	mvncc	r7, #0
   1532c:	orr	r3, r3, r1
   15330:	addcs	r7, r0, r7
   15334:	subs	r2, r2, #1
   15338:	bne	15304 <close_stdout@@Base+0x3484>
   1533c:	b	150ec <close_stdout@@Base+0x326c>
   15340:	mov	r2, r4
   15344:	asr	r3, r4, #31
   15348:	mvn	r0, #0
   1534c:	mvn	r1, #0
   15350:	strd	r2, [sp, #8]
   15354:	bl	1645c <close_stdout@@Base+0x45dc>
   15358:	ldrd	r2, [sp]
   1535c:	cmp	r3, r1
   15360:	cmpeq	r2, r0
   15364:	bhi	1547c <close_stdout@@Base+0x35fc>
   15368:	ldr	ip, [sp, #4]
   1536c:	mul	r3, r4, ip
   15370:	ldr	ip, [sp, #12]
   15374:	mla	r3, r2, ip, r3
   15378:	ldr	r2, [sp]
   1537c:	umull	r4, r5, r4, r2
   15380:	add	r5, r3, r5
   15384:	cmp	r1, r5
   15388:	cmpeq	r0, r4
   1538c:	bcc	1547c <close_stdout@@Base+0x35fc>
   15390:	mul	r2, r4, ip
   15394:	ldr	ip, [sp, #8]
   15398:	mov	r3, #0
   1539c:	umull	r0, r1, r4, ip
   153a0:	mla	r2, ip, r5, r2
   153a4:	strd	r0, [sp]
   153a8:	add	r2, r2, r1
   153ac:	str	r2, [sp, #4]
   153b0:	b	15004 <close_stdout@@Base+0x3184>
   153b4:	asr	r5, r4, #31
   153b8:	mov	r2, r4
   153bc:	mvn	r0, #0
   153c0:	mvn	r1, #0
   153c4:	mov	r3, r5
   153c8:	bl	1645c <close_stdout@@Base+0x45dc>
   153cc:	mov	ip, r7
   153d0:	str	r6, [sp, #20]
   153d4:	mov	r2, #4
   153d8:	ldrd	r6, [sp]
   153dc:	mov	r3, #0
   153e0:	strd	r0, [sp, #8]
   153e4:	ldrd	r0, [sp, #8]
   153e8:	cmp	r1, r7
   153ec:	cmpeq	r0, r6
   153f0:	mulcs	r0, r6, r5
   153f4:	movcs	r1, #0
   153f8:	mlacs	r0, r4, r7, r0
   153fc:	movcc	r1, #1
   15400:	umullcs	r6, r7, r6, r4
   15404:	mvncc	r6, #0
   15408:	mvncc	r7, #0
   1540c:	orr	r3, r3, r1
   15410:	addcs	r7, r0, r7
   15414:	subs	r2, r2, #1
   15418:	bne	153e4 <close_stdout@@Base+0x3564>
   1541c:	b	150ec <close_stdout@@Base+0x326c>
   15420:	ldrd	r0, [sp]
   15424:	strd	r0, [r9]
   15428:	mov	r0, r7
   1542c:	b	14df4 <close_stdout@@Base+0x2f74>
   15430:	ldrb	r3, [fp, #2]
   15434:	mov	r4, #1024	; 0x400
   15438:	cmp	r3, #66	; 0x42
   1543c:	moveq	r6, #3
   15440:	movne	r6, #1
   15444:	b	14ecc <close_stdout@@Base+0x304c>
   15448:	mov	r6, #2
   1544c:	mov	r4, #1000	; 0x3e8
   15450:	b	14ecc <close_stdout@@Base+0x304c>
   15454:	mvn	r3, #0
   15458:	mvn	r2, #0
   1545c:	strd	r2, [sp]
   15460:	mov	r3, #1
   15464:	b	15004 <close_stdout@@Base+0x3184>
   15468:	mvn	r0, #0
   1546c:	mvn	r1, #0
   15470:	mov	r3, #1
   15474:	strd	r0, [sp]
   15478:	b	15004 <close_stdout@@Base+0x3184>
   1547c:	mvn	r0, #0
   15480:	mvn	r1, #0
   15484:	mov	r3, #1
   15488:	strd	r0, [sp]
   1548c:	b	15004 <close_stdout@@Base+0x3184>
   15490:	bl	11158 <__stack_chk_fail@plt>
   15494:	ldr	r0, [pc, #32]	; 154bc <close_stdout@@Base+0x363c>
   15498:	mov	r2, #96	; 0x60
   1549c:	ldr	r1, [pc, #28]	; 154c0 <close_stdout@@Base+0x3640>
   154a0:	ldr	r3, [pc, #28]	; 154c4 <close_stdout@@Base+0x3644>
   154a4:	add	r0, pc, r0
   154a8:	add	r1, pc, r1
   154ac:	add	r3, pc, r3
   154b0:	bl	11380 <__assert_fail@plt>
   154b4:	andeq	r3, r1, r8, ror r2
   154b8:	andeq	r0, r0, ip, lsl #2
   154bc:	andeq	r2, r0, ip, lsl #3
   154c0:			; <UNDEFINED> instruction: 0x000021b0
   154c4:	andeq	r2, r0, r8, ror r1
   154c8:	push	{r4, r5, r6, lr}
   154cc:	sub	sp, sp, #8
   154d0:	mov	r4, r0
   154d4:	bl	112cc <fileno@plt>
   154d8:	cmp	r0, #0
   154dc:	mov	r0, r4
   154e0:	blt	1555c <close_stdout@@Base+0x36dc>
   154e4:	bl	11218 <__freading@plt>
   154e8:	cmp	r0, #0
   154ec:	bne	15528 <close_stdout@@Base+0x36a8>
   154f0:	mov	r0, r4
   154f4:	bl	15568 <close_stdout@@Base+0x36e8>
   154f8:	cmp	r0, #0
   154fc:	beq	15558 <close_stdout@@Base+0x36d8>
   15500:	bl	11278 <__errno_location@plt>
   15504:	ldr	r6, [r0]
   15508:	mov	r5, r0
   1550c:	mov	r0, r4
   15510:	bl	112e4 <fclose@plt>
   15514:	cmp	r6, #0
   15518:	mvnne	r0, #0
   1551c:	strne	r6, [r5]
   15520:	add	sp, sp, #8
   15524:	pop	{r4, r5, r6, pc}
   15528:	mov	r0, r4
   1552c:	bl	112cc <fileno@plt>
   15530:	mov	r1, #1
   15534:	mov	r2, #0
   15538:	mov	r3, #0
   1553c:	str	r1, [sp]
   15540:	bl	111a0 <lseek64@plt>
   15544:	mvn	r2, #0
   15548:	mvn	r3, #0
   1554c:	cmp	r1, r3
   15550:	cmpeq	r0, r2
   15554:	bne	154f0 <close_stdout@@Base+0x3670>
   15558:	mov	r0, r4
   1555c:	add	sp, sp, #8
   15560:	pop	{r4, r5, r6, lr}
   15564:	b	112e4 <fclose@plt>
   15568:	push	{r4, lr}
   1556c:	subs	r4, r0, #0
   15570:	sub	sp, sp, #8
   15574:	beq	15584 <close_stdout@@Base+0x3704>
   15578:	bl	11218 <__freading@plt>
   1557c:	cmp	r0, #0
   15580:	bne	15594 <close_stdout@@Base+0x3714>
   15584:	mov	r0, r4
   15588:	add	sp, sp, #8
   1558c:	pop	{r4, lr}
   15590:	b	110ec <fflush@plt>
   15594:	ldr	r3, [r4]
   15598:	tst	r3, #256	; 0x100
   1559c:	beq	15584 <close_stdout@@Base+0x3704>
   155a0:	mov	r3, #1
   155a4:	mov	r0, r4
   155a8:	str	r3, [sp]
   155ac:	mov	r2, #0
   155b0:	mov	r3, #0
   155b4:	bl	155c8 <close_stdout@@Base+0x3748>
   155b8:	mov	r0, r4
   155bc:	add	sp, sp, #8
   155c0:	pop	{r4, lr}
   155c4:	b	110ec <fflush@plt>
   155c8:	push	{r4, r5, r6, r7, lr}
   155cc:	sub	sp, sp, #20
   155d0:	ldmib	r0, {r1, ip}
   155d4:	mov	r6, r0
   155d8:	ldr	r4, [sp, #40]	; 0x28
   155dc:	cmp	ip, r1
   155e0:	beq	155f8 <close_stdout@@Base+0x3778>
   155e4:	str	r4, [sp, #40]	; 0x28
   155e8:	mov	r0, r6
   155ec:	add	sp, sp, #20
   155f0:	pop	{r4, r5, r6, r7, lr}
   155f4:	b	112f0 <fseeko64@plt>
   155f8:	ldr	ip, [r0, #20]
   155fc:	ldr	r1, [r0, #16]
   15600:	cmp	ip, r1
   15604:	bne	155e4 <close_stdout@@Base+0x3764>
   15608:	ldr	r7, [r0, #36]	; 0x24
   1560c:	cmp	r7, #0
   15610:	bne	155e4 <close_stdout@@Base+0x3764>
   15614:	str	r2, [sp, #12]
   15618:	mvn	r5, #0
   1561c:	str	r3, [sp, #8]
   15620:	bl	112cc <fileno@plt>
   15624:	str	r4, [sp]
   15628:	mvn	r4, #0
   1562c:	ldr	r2, [sp, #12]
   15630:	ldr	r3, [sp, #8]
   15634:	bl	111a0 <lseek64@plt>
   15638:	mov	r2, r0
   1563c:	mov	r3, r1
   15640:	cmp	r3, r5
   15644:	cmpeq	r2, r4
   15648:	beq	15668 <close_stdout@@Base+0x37e8>
   1564c:	ldr	r1, [r6]
   15650:	mov	r0, r7
   15654:	strd	r2, [r6, #80]	; 0x50
   15658:	bic	r3, r1, #16
   1565c:	str	r3, [r6]
   15660:	add	sp, sp, #20
   15664:	pop	{r4, r5, r6, r7, pc}
   15668:	mvn	r0, #0
   1566c:	b	15660 <close_stdout@@Base+0x37e0>
   15670:	mov	r0, #1
   15674:	b	11c5c <__assert_fail@plt+0x8dc>
   15678:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1567c:	sub	sp, sp, #12
   15680:	mov	r7, r1
   15684:	mov	r6, r3
   15688:	str	r2, [sp]
   1568c:	mov	sl, r0
   15690:	bl	11254 <strlen@plt>
   15694:	ldr	fp, [r7]
   15698:	cmp	fp, #0
   1569c:	mov	r8, r0
   156a0:	beq	15764 <close_stdout@@Base+0x38e4>
   156a4:	mov	r3, #0
   156a8:	ldr	r4, [sp]
   156ac:	str	r3, [sp, #4]
   156b0:	mov	r5, r3
   156b4:	mvn	r9, #0
   156b8:	b	156e4 <close_stdout@@Base+0x3864>
   156bc:	bl	11140 <memcmp@plt>
   156c0:	ldr	r3, [sp, #4]
   156c4:	cmp	r0, #0
   156c8:	movne	r3, #1
   156cc:	str	r3, [sp, #4]
   156d0:	ldr	fp, [r7, #4]!
   156d4:	add	r5, r5, #1
   156d8:	add	r4, r4, r6
   156dc:	cmp	fp, #0
   156e0:	beq	15740 <close_stdout@@Base+0x38c0>
   156e4:	mov	r0, fp
   156e8:	mov	r1, sl
   156ec:	mov	r2, r8
   156f0:	bl	1135c <strncmp@plt>
   156f4:	cmp	r0, #0
   156f8:	mov	r0, fp
   156fc:	bne	156d0 <close_stdout@@Base+0x3850>
   15700:	bl	11254 <strlen@plt>
   15704:	ldr	r3, [sp]
   15708:	mov	r1, r4
   1570c:	mov	r2, r6
   15710:	cmp	r0, r8
   15714:	mla	r0, r6, r9, r3
   15718:	beq	15758 <close_stdout@@Base+0x38d8>
   1571c:	cmn	r9, #1
   15720:	moveq	r9, r5
   15724:	beq	156d0 <close_stdout@@Base+0x3850>
   15728:	ldr	r3, [sp]
   1572c:	cmp	r3, #0
   15730:	bne	156bc <close_stdout@@Base+0x383c>
   15734:	mov	r3, #1
   15738:	str	r3, [sp, #4]
   1573c:	b	156d0 <close_stdout@@Base+0x3850>
   15740:	ldr	r3, [sp, #4]
   15744:	cmp	r3, #0
   15748:	bne	1576c <close_stdout@@Base+0x38ec>
   1574c:	mov	r0, r9
   15750:	add	sp, sp, #12
   15754:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15758:	mov	r0, r5
   1575c:	add	sp, sp, #12
   15760:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15764:	mvn	r9, #0
   15768:	b	1574c <close_stdout@@Base+0x38cc>
   1576c:	mvn	r0, #1
   15770:	b	15750 <close_stdout@@Base+0x38d0>
   15774:	cmn	r2, #1
   15778:	push	{r4, r5, r6, lr}
   1577c:	mov	r4, r0
   15780:	sub	sp, sp, #8
   15784:	mov	r5, r1
   15788:	mov	r0, #0
   1578c:	beq	157e4 <close_stdout@@Base+0x3964>
   15790:	ldr	r1, [pc, #100]	; 157fc <close_stdout@@Base+0x397c>
   15794:	mov	r2, #5
   15798:	add	r1, pc, r1
   1579c:	bl	1114c <dcgettext@plt>
   157a0:	mov	r6, r0
   157a4:	mov	r2, r5
   157a8:	mov	r1, #6
   157ac:	mov	r0, #0
   157b0:	bl	141f0 <close_stdout@@Base+0x2370>
   157b4:	mov	r1, r4
   157b8:	mov	r5, r0
   157bc:	mov	r0, #1
   157c0:	bl	144f0 <close_stdout@@Base+0x2670>
   157c4:	mov	r3, r5
   157c8:	mov	r2, r6
   157cc:	str	r0, [sp]
   157d0:	mov	r0, #0
   157d4:	mov	r1, r0
   157d8:	bl	111dc <error@plt>
   157dc:	add	sp, sp, #8
   157e0:	pop	{r4, r5, r6, pc}
   157e4:	ldr	r1, [pc, #20]	; 15800 <close_stdout@@Base+0x3980>
   157e8:	mov	r2, #5
   157ec:	add	r1, pc, r1
   157f0:	bl	1114c <dcgettext@plt>
   157f4:	mov	r6, r0
   157f8:	b	157a4 <close_stdout@@Base+0x3924>
   157fc:	andeq	r1, r0, ip, ror #29
   15800:	andeq	r1, r0, ip, ror lr
   15804:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15808:	mov	r4, r1
   1580c:	ldr	r1, [pc, #276]	; 15928 <close_stdout@@Base+0x3aa8>
   15810:	sub	sp, sp, #12
   15814:	mov	r7, r0
   15818:	mov	r6, r2
   1581c:	add	r1, pc, r1
   15820:	mov	r2, #5
   15824:	mov	r0, #0
   15828:	bl	1114c <dcgettext@plt>
   1582c:	ldr	r3, [pc, #248]	; 1592c <close_stdout@@Base+0x3aac>
   15830:	ldr	r2, [pc, #248]	; 15930 <close_stdout@@Base+0x3ab0>
   15834:	add	r3, pc, r3
   15838:	ldr	r9, [r3, r2]
   1583c:	ldr	r1, [r9]
   15840:	bl	110b0 <fputs_unlocked@plt>
   15844:	ldr	fp, [r7]
   15848:	cmp	fp, #0
   1584c:	beq	158ec <close_stdout@@Base+0x3a6c>
   15850:	ldr	sl, [pc, #220]	; 15934 <close_stdout@@Base+0x3ab4>
   15854:	mov	r8, #0
   15858:	ldr	r3, [pc, #216]	; 15938 <close_stdout@@Base+0x3ab8>
   1585c:	mov	r5, r8
   15860:	add	sl, pc, sl
   15864:	add	r3, pc, r3
   15868:	str	r3, [sp, #4]
   1586c:	b	158a8 <close_stdout@@Base+0x3a28>
   15870:	mov	r0, fp
   15874:	ldr	fp, [r9]
   15878:	bl	144f8 <close_stdout@@Base+0x2678>
   1587c:	mov	r1, #1
   15880:	mov	r2, sl
   15884:	mov	r8, r4
   15888:	mov	r3, r0
   1588c:	mov	r0, fp
   15890:	bl	112d8 <__fprintf_chk@plt>
   15894:	ldr	fp, [r7, #4]!
   15898:	add	r5, r5, #1
   1589c:	add	r4, r4, r6
   158a0:	cmp	fp, #0
   158a4:	beq	158ec <close_stdout@@Base+0x3a6c>
   158a8:	cmp	r5, #0
   158ac:	mov	r1, r4
   158b0:	mov	r2, r6
   158b4:	mov	r0, r8
   158b8:	beq	15870 <close_stdout@@Base+0x39f0>
   158bc:	bl	11140 <memcmp@plt>
   158c0:	cmp	r0, #0
   158c4:	bne	15870 <close_stdout@@Base+0x39f0>
   158c8:	mov	r0, fp
   158cc:	ldr	fp, [r9]
   158d0:	bl	144f8 <close_stdout@@Base+0x2678>
   158d4:	mov	r1, #1
   158d8:	ldr	r2, [sp, #4]
   158dc:	mov	r3, r0
   158e0:	mov	r0, fp
   158e4:	bl	112d8 <__fprintf_chk@plt>
   158e8:	b	15894 <close_stdout@@Base+0x3a14>
   158ec:	ldr	r0, [r9]
   158f0:	ldr	r3, [r0, #20]
   158f4:	ldr	r2, [r0, #24]
   158f8:	cmp	r3, r2
   158fc:	bcs	15918 <close_stdout@@Base+0x3a98>
   15900:	add	r1, r3, #1
   15904:	mov	r2, #10
   15908:	str	r1, [r0, #20]
   1590c:	strb	r2, [r3]
   15910:	add	sp, sp, #12
   15914:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15918:	mov	r1, #10
   1591c:	add	sp, sp, #12
   15920:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15924:	b	11308 <__overflow@plt>
   15928:	andeq	r1, r0, r8, lsl #29
   1592c:	andeq	r2, r1, r4, asr #15
   15930:	andeq	r0, r0, r8, lsl r1
   15934:	andeq	r1, r0, ip, asr lr
   15938:	andeq	r1, r0, r0, ror #28
   1593c:	push	{r4, r5, r6, r7, r8, lr}
   15940:	mov	r7, r1
   15944:	ldr	r4, [sp, #24]
   15948:	mov	r1, r2
   1594c:	mov	r6, r2
   15950:	mov	r5, r3
   15954:	mov	r2, r3
   15958:	mov	r8, r0
   1595c:	mov	r3, r4
   15960:	mov	r0, r7
   15964:	bl	15678 <close_stdout@@Base+0x37f8>
   15968:	subs	r2, r0, #0
   1596c:	blt	15978 <close_stdout@@Base+0x3af8>
   15970:	mov	r0, r2
   15974:	pop	{r4, r5, r6, r7, r8, pc}
   15978:	mov	r0, r8
   1597c:	mov	r1, r7
   15980:	bl	15774 <close_stdout@@Base+0x38f4>
   15984:	mov	r0, r6
   15988:	mov	r1, r5
   1598c:	mov	r2, r4
   15990:	bl	15804 <close_stdout@@Base+0x3984>
   15994:	ldr	r3, [sp, #28]
   15998:	blx	r3
   1599c:	mvn	r0, #0
   159a0:	pop	{r4, r5, r6, r7, r8, pc}
   159a4:	push	{r4, r5, r6, r7, r8, lr}
   159a8:	mov	r8, r0
   159ac:	ldr	r5, [r1]
   159b0:	mov	r6, r3
   159b4:	cmp	r5, #0
   159b8:	beq	159f0 <close_stdout@@Base+0x3b70>
   159bc:	mov	r4, r2
   159c0:	mov	r7, r1
   159c4:	b	159d4 <close_stdout@@Base+0x3b54>
   159c8:	ldr	r5, [r7, #4]!
   159cc:	cmp	r5, #0
   159d0:	beq	159f0 <close_stdout@@Base+0x3b70>
   159d4:	mov	r1, r4
   159d8:	mov	r0, r8
   159dc:	mov	r2, r6
   159e0:	add	r4, r4, r6
   159e4:	bl	11140 <memcmp@plt>
   159e8:	cmp	r0, #0
   159ec:	bne	159c8 <close_stdout@@Base+0x3b48>
   159f0:	mov	r0, r5
   159f4:	pop	{r4, r5, r6, r7, r8, pc}
   159f8:	push	{r4, r5, r6, lr}
   159fc:	mov	r4, r0
   15a00:	bl	111c4 <__fpending@plt>
   15a04:	mov	r6, r0
   15a08:	mov	r0, r4
   15a0c:	ldr	r4, [r4]
   15a10:	bl	154c8 <close_stdout@@Base+0x3648>
   15a14:	and	r4, r4, #32
   15a18:	adds	r5, r0, #0
   15a1c:	movne	r5, #1
   15a20:	cmp	r4, #0
   15a24:	bne	15a44 <close_stdout@@Base+0x3bc4>
   15a28:	cmp	r5, #0
   15a2c:	beq	15a3c <close_stdout@@Base+0x3bbc>
   15a30:	cmp	r6, #0
   15a34:	beq	15a60 <close_stdout@@Base+0x3be0>
   15a38:	mvn	r4, #0
   15a3c:	mov	r0, r4
   15a40:	pop	{r4, r5, r6, pc}
   15a44:	cmp	r5, #0
   15a48:	bne	15a38 <close_stdout@@Base+0x3bb8>
   15a4c:	bl	11278 <__errno_location@plt>
   15a50:	mvn	r4, #0
   15a54:	str	r5, [r0]
   15a58:	mov	r0, r4
   15a5c:	pop	{r4, r5, r6, pc}
   15a60:	bl	11278 <__errno_location@plt>
   15a64:	ldr	r4, [r0]
   15a68:	subs	r4, r4, #9
   15a6c:	mvnne	r4, #0
   15a70:	mov	r0, r4
   15a74:	pop	{r4, r5, r6, pc}
   15a78:	ldr	r3, [pc, #984]	; 15e58 <close_stdout@@Base+0x3fd8>
   15a7c:	mov	r0, #14
   15a80:	ldr	r2, [pc, #980]	; 15e5c <close_stdout@@Base+0x3fdc>
   15a84:	add	r3, pc, r3
   15a88:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15a8c:	sub	sp, sp, #132	; 0x84
   15a90:	ldr	r6, [r3, r2]
   15a94:	ldr	r3, [r6]
   15a98:	str	r3, [sp, #124]	; 0x7c
   15a9c:	bl	1132c <nl_langinfo@plt>
   15aa0:	subs	r5, r0, #0
   15aa4:	beq	15b58 <close_stdout@@Base+0x3cd8>
   15aa8:	ldr	r3, [pc, #944]	; 15e60 <close_stdout@@Base+0x3fe0>
   15aac:	ldr	r4, [pc, r3]
   15ab0:	cmp	r4, #0
   15ab4:	beq	15b64 <close_stdout@@Base+0x3ce4>
   15ab8:	ldrb	r7, [r4]
   15abc:	cmp	r7, #0
   15ac0:	bne	15af4 <close_stdout@@Base+0x3c74>
   15ac4:	b	15b2c <close_stdout@@Base+0x3cac>
   15ac8:	mov	r0, r4
   15acc:	bl	11254 <strlen@plt>
   15ad0:	add	r0, r0, #1
   15ad4:	add	r7, r4, r0
   15ad8:	mov	r0, r7
   15adc:	bl	11254 <strlen@plt>
   15ae0:	add	r0, r0, #1
   15ae4:	add	r4, r7, r0
   15ae8:	ldrb	r7, [r7, r0]
   15aec:	cmp	r7, #0
   15af0:	beq	15b2c <close_stdout@@Base+0x3cac>
   15af4:	mov	r0, r5
   15af8:	mov	r1, r4
   15afc:	bl	110c8 <strcmp@plt>
   15b00:	cmp	r0, #0
   15b04:	beq	15b1c <close_stdout@@Base+0x3c9c>
   15b08:	cmp	r7, #42	; 0x2a
   15b0c:	bne	15ac8 <close_stdout@@Base+0x3c48>
   15b10:	ldrb	r3, [r4, #1]
   15b14:	cmp	r3, #0
   15b18:	bne	15ac8 <close_stdout@@Base+0x3c48>
   15b1c:	mov	r0, r4
   15b20:	bl	11254 <strlen@plt>
   15b24:	add	r0, r0, #1
   15b28:	add	r5, r4, r0
   15b2c:	ldrb	r3, [r5]
   15b30:	cmp	r3, #0
   15b34:	ldreq	r5, [pc, #808]	; 15e64 <close_stdout@@Base+0x3fe4>
   15b38:	addeq	r5, pc, r5
   15b3c:	ldr	r2, [sp, #124]	; 0x7c
   15b40:	mov	r0, r5
   15b44:	ldr	r3, [r6]
   15b48:	cmp	r2, r3
   15b4c:	bne	15e2c <close_stdout@@Base+0x3fac>
   15b50:	add	sp, sp, #132	; 0x84
   15b54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15b58:	ldr	r5, [pc, #776]	; 15e68 <close_stdout@@Base+0x3fe8>
   15b5c:	add	r5, pc, r5
   15b60:	b	15aa8 <close_stdout@@Base+0x3c28>
   15b64:	ldr	r0, [pc, #768]	; 15e6c <close_stdout@@Base+0x3fec>
   15b68:	add	r0, pc, r0
   15b6c:	bl	111f4 <getenv@plt>
   15b70:	subs	r8, r0, #0
   15b74:	beq	15e04 <close_stdout@@Base+0x3f84>
   15b78:	ldrb	r3, [r8]
   15b7c:	cmp	r3, #0
   15b80:	beq	15d98 <close_stdout@@Base+0x3f18>
   15b84:	bl	11254 <strlen@plt>
   15b88:	subs	sl, r0, #0
   15b8c:	subne	r3, sl, #1
   15b90:	bne	15da8 <close_stdout@@Base+0x3f28>
   15b94:	mov	r9, #0
   15b98:	mov	fp, r9
   15b9c:	add	r9, sl, r9
   15ba0:	add	r0, r9, #14
   15ba4:	bl	11200 <malloc@plt>
   15ba8:	subs	r7, r0, #0
   15bac:	beq	15df8 <close_stdout@@Base+0x3f78>
   15bb0:	mov	r1, r8
   15bb4:	mov	r2, sl
   15bb8:	bl	1111c <memcpy@plt>
   15bbc:	cmp	fp, #0
   15bc0:	add	ip, r7, r9
   15bc4:	movne	r3, #47	; 0x2f
   15bc8:	strbne	r3, [r7, sl]
   15bcc:	ldr	r3, [pc, #668]	; 15e70 <close_stdout@@Base+0x3ff0>
   15bd0:	add	r3, pc, r3
   15bd4:	ldm	r3!, {r0, r1, r2}
   15bd8:	ldrh	r3, [r3]
   15bdc:	str	r0, [r7, r9]
   15be0:	mov	r0, r7
   15be4:	str	r1, [ip, #4]
   15be8:	mov	r1, #32768	; 0x8000
   15bec:	strh	r3, [ip, #12]
   15bf0:	str	r2, [ip, #8]
   15bf4:	bl	111e8 <open64@plt>
   15bf8:	subs	r8, r0, #0
   15bfc:	blt	15dc0 <close_stdout@@Base+0x3f40>
   15c00:	ldr	r1, [pc, #620]	; 15e74 <close_stdout@@Base+0x3ff4>
   15c04:	add	r1, pc, r1
   15c08:	bl	11098 <fdopen@plt>
   15c0c:	subs	fp, r0, #0
   15c10:	beq	15e18 <close_stdout@@Base+0x3f98>
   15c14:	ldr	r0, [pc, #604]	; 15e78 <close_stdout@@Base+0x3ff8>
   15c18:	add	sl, sp, #20
   15c1c:	add	r9, sp, #72	; 0x48
   15c20:	mov	r8, #0
   15c24:	add	r0, pc, r0
   15c28:	str	r0, [sp, #12]
   15c2c:	ldr	r3, [fp, #4]
   15c30:	ldr	r2, [fp, #8]
   15c34:	cmp	r3, r2
   15c38:	bcs	15d24 <close_stdout@@Base+0x3ea4>
   15c3c:	add	r2, r3, #1
   15c40:	str	r2, [fp, #4]
   15c44:	ldrb	r0, [r3]
   15c48:	cmp	r0, #32
   15c4c:	beq	15c2c <close_stdout@@Base+0x3dac>
   15c50:	sub	r3, r0, #9
   15c54:	cmp	r3, #1
   15c58:	bls	15c2c <close_stdout@@Base+0x3dac>
   15c5c:	cmp	r0, #35	; 0x23
   15c60:	beq	15d38 <close_stdout@@Base+0x3eb8>
   15c64:	mov	r1, fp
   15c68:	bl	1126c <ungetc@plt>
   15c6c:	mov	r0, fp
   15c70:	ldr	r1, [sp, #12]
   15c74:	mov	r2, sl
   15c78:	mov	r3, r9
   15c7c:	bl	112b4 <fscanf@plt>
   15c80:	cmp	r0, #1
   15c84:	ble	15d68 <close_stdout@@Base+0x3ee8>
   15c88:	mov	r0, sl
   15c8c:	bl	11254 <strlen@plt>
   15c90:	str	r0, [sp, #8]
   15c94:	mov	r0, r9
   15c98:	bl	11254 <strlen@plt>
   15c9c:	cmp	r8, #0
   15ca0:	mov	r2, r0
   15ca4:	bne	15dcc <close_stdout@@Base+0x3f4c>
   15ca8:	ldr	r3, [sp, #8]
   15cac:	str	r2, [sp]
   15cb0:	add	r8, r0, r3
   15cb4:	add	r0, r8, #3
   15cb8:	add	r8, r8, #2
   15cbc:	bl	11200 <malloc@plt>
   15cc0:	ldr	r2, [sp]
   15cc4:	mov	r3, r0
   15cc8:	cmp	r3, #0
   15ccc:	beq	15e30 <close_stdout@@Base+0x3fb0>
   15cd0:	ldr	r0, [sp, #8]
   15cd4:	movw	r1, #65534	; 0xfffe
   15cd8:	movt	r1, #65535	; 0xffff
   15cdc:	rsb	r2, r2, r8
   15ce0:	rsb	r1, r0, r1
   15ce4:	stm	sp, {r2, r3}
   15ce8:	add	r0, r1, r2
   15cec:	mov	r1, sl
   15cf0:	add	r0, r3, r0
   15cf4:	mov	r4, r3
   15cf8:	bl	111b8 <strcpy@plt>
   15cfc:	ldr	r2, [sp]
   15d00:	ldr	r3, [sp, #4]
   15d04:	mov	r1, r9
   15d08:	sub	r0, r2, #1
   15d0c:	add	r0, r3, r0
   15d10:	bl	111b8 <strcpy@plt>
   15d14:	ldr	r3, [fp, #4]
   15d18:	ldr	r2, [fp, #8]
   15d1c:	cmp	r3, r2
   15d20:	bcc	15c3c <close_stdout@@Base+0x3dbc>
   15d24:	mov	r0, fp
   15d28:	bl	112fc <__uflow@plt>
   15d2c:	cmn	r0, #1
   15d30:	beq	15d68 <close_stdout@@Base+0x3ee8>
   15d34:	b	15c48 <close_stdout@@Base+0x3dc8>
   15d38:	ldr	r3, [fp, #4]
   15d3c:	ldr	r2, [fp, #8]
   15d40:	cmp	r3, r2
   15d44:	bcs	15e4c <close_stdout@@Base+0x3fcc>
   15d48:	add	r2, r3, #1
   15d4c:	str	r2, [fp, #4]
   15d50:	ldrb	r0, [r3]
   15d54:	cmp	r0, #10
   15d58:	cmnne	r0, #1
   15d5c:	bne	15d38 <close_stdout@@Base+0x3eb8>
   15d60:	cmn	r0, #1
   15d64:	bne	15c2c <close_stdout@@Base+0x3dac>
   15d68:	mov	r0, fp
   15d6c:	bl	154c8 <close_stdout@@Base+0x3648>
   15d70:	cmp	r8, #0
   15d74:	beq	15dc0 <close_stdout@@Base+0x3f40>
   15d78:	mov	r3, #0
   15d7c:	strb	r3, [r4, r8]
   15d80:	mov	r0, r7
   15d84:	bl	11104 <free@plt>
   15d88:	ldr	r3, [pc, #236]	; 15e7c <close_stdout@@Base+0x3ffc>
   15d8c:	add	r3, pc, r3
   15d90:	str	r4, [r3]
   15d94:	b	15ab8 <close_stdout@@Base+0x3c38>
   15d98:	ldr	r8, [pc, #224]	; 15e80 <close_stdout@@Base+0x4000>
   15d9c:	mov	r3, #7
   15da0:	mov	sl, #8
   15da4:	add	r8, pc, r8
   15da8:	ldrb	r3, [r8, r3]
   15dac:	cmp	r3, #47	; 0x2f
   15db0:	movne	r9, #1
   15db4:	movne	fp, r9
   15db8:	bne	15b9c <close_stdout@@Base+0x3d1c>
   15dbc:	b	15b94 <close_stdout@@Base+0x3d14>
   15dc0:	ldr	r4, [pc, #188]	; 15e84 <close_stdout@@Base+0x4004>
   15dc4:	add	r4, pc, r4
   15dc8:	b	15d80 <close_stdout@@Base+0x3f00>
   15dcc:	ldr	r0, [sp, #8]
   15dd0:	str	r2, [sp]
   15dd4:	add	r3, r0, r2
   15dd8:	mov	r0, r4
   15ddc:	add	r8, r3, r8
   15de0:	add	r1, r8, #3
   15de4:	add	r8, r8, #2
   15de8:	bl	11164 <realloc@plt>
   15dec:	ldr	r2, [sp]
   15df0:	mov	r3, r0
   15df4:	b	15cc8 <close_stdout@@Base+0x3e48>
   15df8:	ldr	r4, [pc, #136]	; 15e88 <close_stdout@@Base+0x4008>
   15dfc:	add	r4, pc, r4
   15e00:	b	15d88 <close_stdout@@Base+0x3f08>
   15e04:	ldr	r8, [pc, #128]	; 15e8c <close_stdout@@Base+0x400c>
   15e08:	mov	r3, #7
   15e0c:	mov	sl, #8
   15e10:	add	r8, pc, r8
   15e14:	b	15da8 <close_stdout@@Base+0x3f28>
   15e18:	ldr	r4, [pc, #112]	; 15e90 <close_stdout@@Base+0x4010>
   15e1c:	mov	r0, r8
   15e20:	add	r4, pc, r4
   15e24:	bl	11374 <close@plt>
   15e28:	b	15d80 <close_stdout@@Base+0x3f00>
   15e2c:	bl	11158 <__stack_chk_fail@plt>
   15e30:	mov	r0, r4
   15e34:	ldr	r4, [pc, #88]	; 15e94 <close_stdout@@Base+0x4014>
   15e38:	bl	11104 <free@plt>
   15e3c:	mov	r0, fp
   15e40:	add	r4, pc, r4
   15e44:	bl	154c8 <close_stdout@@Base+0x3648>
   15e48:	b	15d80 <close_stdout@@Base+0x3f00>
   15e4c:	mov	r0, fp
   15e50:	bl	112fc <__uflow@plt>
   15e54:	b	15d54 <close_stdout@@Base+0x3ed4>
   15e58:	andeq	r2, r1, r4, ror r5
   15e5c:	andeq	r0, r0, ip, lsl #2
   15e60:	andeq	r2, r1, r0, lsr #16
   15e64:	andeq	r1, r0, r0, lsr #23
   15e68:	andeq	r1, r0, ip, ror #11
   15e6c:	andeq	r1, r0, r8, ror fp
   15e70:	andeq	r1, r0, r0, lsr #22
   15e74:	andeq	r1, r0, r0, ror r5
   15e78:	ldrdeq	r1, [r0], -ip
   15e7c:	andeq	r2, r1, r0, asr #10
   15e80:	andeq	r1, r0, r8, lsr #18
   15e84:	andeq	r1, r0, r4, lsl #7
   15e88:	andeq	r1, r0, ip, asr #6
   15e8c:			; <UNDEFINED> instruction: 0x000018bc
   15e90:	andeq	r1, r0, r8, lsr #6
   15e94:	andeq	r1, r0, r8, lsl #6
   15e98:	subs	r2, r1, #1
   15e9c:	bxeq	lr
   15ea0:	bcc	16078 <close_stdout@@Base+0x41f8>
   15ea4:	cmp	r0, r1
   15ea8:	bls	1605c <close_stdout@@Base+0x41dc>
   15eac:	tst	r1, r2
   15eb0:	beq	16068 <close_stdout@@Base+0x41e8>
   15eb4:	clz	r3, r0
   15eb8:	clz	r2, r1
   15ebc:	sub	r3, r2, r3
   15ec0:	rsbs	r3, r3, #31
   15ec4:	addne	r3, r3, r3, lsl #1
   15ec8:	mov	r2, #0
   15ecc:	addne	pc, pc, r3, lsl #2
   15ed0:	nop	{0}
   15ed4:	cmp	r0, r1, lsl #31
   15ed8:	adc	r2, r2, r2
   15edc:	subcs	r0, r0, r1, lsl #31
   15ee0:	cmp	r0, r1, lsl #30
   15ee4:	adc	r2, r2, r2
   15ee8:	subcs	r0, r0, r1, lsl #30
   15eec:	cmp	r0, r1, lsl #29
   15ef0:	adc	r2, r2, r2
   15ef4:	subcs	r0, r0, r1, lsl #29
   15ef8:	cmp	r0, r1, lsl #28
   15efc:	adc	r2, r2, r2
   15f00:	subcs	r0, r0, r1, lsl #28
   15f04:	cmp	r0, r1, lsl #27
   15f08:	adc	r2, r2, r2
   15f0c:	subcs	r0, r0, r1, lsl #27
   15f10:	cmp	r0, r1, lsl #26
   15f14:	adc	r2, r2, r2
   15f18:	subcs	r0, r0, r1, lsl #26
   15f1c:	cmp	r0, r1, lsl #25
   15f20:	adc	r2, r2, r2
   15f24:	subcs	r0, r0, r1, lsl #25
   15f28:	cmp	r0, r1, lsl #24
   15f2c:	adc	r2, r2, r2
   15f30:	subcs	r0, r0, r1, lsl #24
   15f34:	cmp	r0, r1, lsl #23
   15f38:	adc	r2, r2, r2
   15f3c:	subcs	r0, r0, r1, lsl #23
   15f40:	cmp	r0, r1, lsl #22
   15f44:	adc	r2, r2, r2
   15f48:	subcs	r0, r0, r1, lsl #22
   15f4c:	cmp	r0, r1, lsl #21
   15f50:	adc	r2, r2, r2
   15f54:	subcs	r0, r0, r1, lsl #21
   15f58:	cmp	r0, r1, lsl #20
   15f5c:	adc	r2, r2, r2
   15f60:	subcs	r0, r0, r1, lsl #20
   15f64:	cmp	r0, r1, lsl #19
   15f68:	adc	r2, r2, r2
   15f6c:	subcs	r0, r0, r1, lsl #19
   15f70:	cmp	r0, r1, lsl #18
   15f74:	adc	r2, r2, r2
   15f78:	subcs	r0, r0, r1, lsl #18
   15f7c:	cmp	r0, r1, lsl #17
   15f80:	adc	r2, r2, r2
   15f84:	subcs	r0, r0, r1, lsl #17
   15f88:	cmp	r0, r1, lsl #16
   15f8c:	adc	r2, r2, r2
   15f90:	subcs	r0, r0, r1, lsl #16
   15f94:	cmp	r0, r1, lsl #15
   15f98:	adc	r2, r2, r2
   15f9c:	subcs	r0, r0, r1, lsl #15
   15fa0:	cmp	r0, r1, lsl #14
   15fa4:	adc	r2, r2, r2
   15fa8:	subcs	r0, r0, r1, lsl #14
   15fac:	cmp	r0, r1, lsl #13
   15fb0:	adc	r2, r2, r2
   15fb4:	subcs	r0, r0, r1, lsl #13
   15fb8:	cmp	r0, r1, lsl #12
   15fbc:	adc	r2, r2, r2
   15fc0:	subcs	r0, r0, r1, lsl #12
   15fc4:	cmp	r0, r1, lsl #11
   15fc8:	adc	r2, r2, r2
   15fcc:	subcs	r0, r0, r1, lsl #11
   15fd0:	cmp	r0, r1, lsl #10
   15fd4:	adc	r2, r2, r2
   15fd8:	subcs	r0, r0, r1, lsl #10
   15fdc:	cmp	r0, r1, lsl #9
   15fe0:	adc	r2, r2, r2
   15fe4:	subcs	r0, r0, r1, lsl #9
   15fe8:	cmp	r0, r1, lsl #8
   15fec:	adc	r2, r2, r2
   15ff0:	subcs	r0, r0, r1, lsl #8
   15ff4:	cmp	r0, r1, lsl #7
   15ff8:	adc	r2, r2, r2
   15ffc:	subcs	r0, r0, r1, lsl #7
   16000:	cmp	r0, r1, lsl #6
   16004:	adc	r2, r2, r2
   16008:	subcs	r0, r0, r1, lsl #6
   1600c:	cmp	r0, r1, lsl #5
   16010:	adc	r2, r2, r2
   16014:	subcs	r0, r0, r1, lsl #5
   16018:	cmp	r0, r1, lsl #4
   1601c:	adc	r2, r2, r2
   16020:	subcs	r0, r0, r1, lsl #4
   16024:	cmp	r0, r1, lsl #3
   16028:	adc	r2, r2, r2
   1602c:	subcs	r0, r0, r1, lsl #3
   16030:	cmp	r0, r1, lsl #2
   16034:	adc	r2, r2, r2
   16038:	subcs	r0, r0, r1, lsl #2
   1603c:	cmp	r0, r1, lsl #1
   16040:	adc	r2, r2, r2
   16044:	subcs	r0, r0, r1, lsl #1
   16048:	cmp	r0, r1
   1604c:	adc	r2, r2, r2
   16050:	subcs	r0, r0, r1
   16054:	mov	r0, r2
   16058:	bx	lr
   1605c:	moveq	r0, #1
   16060:	movne	r0, #0
   16064:	bx	lr
   16068:	clz	r2, r1
   1606c:	rsb	r2, r2, #31
   16070:	lsr	r0, r0, r2
   16074:	bx	lr
   16078:	cmp	r0, #0
   1607c:	mvnne	r0, #0
   16080:	b	16498 <close_stdout@@Base+0x4618>
   16084:	cmp	r1, #0
   16088:	beq	16078 <close_stdout@@Base+0x41f8>
   1608c:	push	{r0, r1, lr}
   16090:	bl	15e98 <close_stdout@@Base+0x4018>
   16094:	pop	{r1, r2, lr}
   16098:	mul	r3, r2, r0
   1609c:	sub	r1, r1, r3
   160a0:	bx	lr
   160a4:	eor	r1, r1, #-2147483648	; 0x80000000
   160a8:	b	160b0 <close_stdout@@Base+0x4230>
   160ac:	eor	r3, r3, #-2147483648	; 0x80000000
   160b0:	push	{r4, r5, lr}
   160b4:	lsl	r4, r1, #1
   160b8:	lsl	r5, r3, #1
   160bc:	teq	r4, r5
   160c0:	teqeq	r0, r2
   160c4:	orrsne	ip, r4, r0
   160c8:	orrsne	ip, r5, r2
   160cc:	mvnsne	ip, r4, asr #21
   160d0:	mvnsne	ip, r5, asr #21
   160d4:	beq	162c0 <close_stdout@@Base+0x4440>
   160d8:	lsr	r4, r4, #21
   160dc:	rsbs	r5, r4, r5, lsr #21
   160e0:	rsblt	r5, r5, #0
   160e4:	ble	16104 <close_stdout@@Base+0x4284>
   160e8:	add	r4, r4, r5
   160ec:	eor	r2, r0, r2
   160f0:	eor	r3, r1, r3
   160f4:	eor	r0, r2, r0
   160f8:	eor	r1, r3, r1
   160fc:	eor	r2, r0, r2
   16100:	eor	r3, r1, r3
   16104:	cmp	r5, #54	; 0x36
   16108:	pophi	{r4, r5, pc}
   1610c:	tst	r1, #-2147483648	; 0x80000000
   16110:	lsl	r1, r1, #12
   16114:	mov	ip, #1048576	; 0x100000
   16118:	orr	r1, ip, r1, lsr #12
   1611c:	beq	16128 <close_stdout@@Base+0x42a8>
   16120:	rsbs	r0, r0, #0
   16124:	rsc	r1, r1, #0
   16128:	tst	r3, #-2147483648	; 0x80000000
   1612c:	lsl	r3, r3, #12
   16130:	orr	r3, ip, r3, lsr #12
   16134:	beq	16140 <close_stdout@@Base+0x42c0>
   16138:	rsbs	r2, r2, #0
   1613c:	rsc	r3, r3, #0
   16140:	teq	r4, r5
   16144:	beq	162a8 <close_stdout@@Base+0x4428>
   16148:	sub	r4, r4, #1
   1614c:	rsbs	lr, r5, #32
   16150:	blt	1616c <close_stdout@@Base+0x42ec>
   16154:	lsl	ip, r2, lr
   16158:	adds	r0, r0, r2, lsr r5
   1615c:	adc	r1, r1, #0
   16160:	adds	r0, r0, r3, lsl lr
   16164:	adcs	r1, r1, r3, asr r5
   16168:	b	16188 <close_stdout@@Base+0x4308>
   1616c:	sub	r5, r5, #32
   16170:	add	lr, lr, #32
   16174:	cmp	r2, #1
   16178:	lsl	ip, r3, lr
   1617c:	orrcs	ip, ip, #2
   16180:	adds	r0, r0, r3, asr r5
   16184:	adcs	r1, r1, r3, asr #31
   16188:	and	r5, r1, #-2147483648	; 0x80000000
   1618c:	bpl	1619c <close_stdout@@Base+0x431c>
   16190:	rsbs	ip, ip, #0
   16194:	rscs	r0, r0, #0
   16198:	rsc	r1, r1, #0
   1619c:	cmp	r1, #1048576	; 0x100000
   161a0:	bcc	161e0 <close_stdout@@Base+0x4360>
   161a4:	cmp	r1, #2097152	; 0x200000
   161a8:	bcc	161c8 <close_stdout@@Base+0x4348>
   161ac:	lsrs	r1, r1, #1
   161b0:	rrxs	r0, r0
   161b4:	rrx	ip, ip
   161b8:	add	r4, r4, #1
   161bc:	lsl	r2, r4, #21
   161c0:	cmn	r2, #4194304	; 0x400000
   161c4:	bcs	16320 <close_stdout@@Base+0x44a0>
   161c8:	cmp	ip, #-2147483648	; 0x80000000
   161cc:	lsrseq	ip, r0, #1
   161d0:	adcs	r0, r0, #0
   161d4:	adc	r1, r1, r4, lsl #20
   161d8:	orr	r1, r1, r5
   161dc:	pop	{r4, r5, pc}
   161e0:	lsls	ip, ip, #1
   161e4:	adcs	r0, r0, r0
   161e8:	adc	r1, r1, r1
   161ec:	tst	r1, #1048576	; 0x100000
   161f0:	sub	r4, r4, #1
   161f4:	bne	161c8 <close_stdout@@Base+0x4348>
   161f8:	teq	r1, #0
   161fc:	moveq	r1, r0
   16200:	moveq	r0, #0
   16204:	clz	r3, r1
   16208:	addeq	r3, r3, #32
   1620c:	sub	r3, r3, #11
   16210:	subs	r2, r3, #32
   16214:	bge	16238 <close_stdout@@Base+0x43b8>
   16218:	adds	r2, r2, #12
   1621c:	ble	16234 <close_stdout@@Base+0x43b4>
   16220:	add	ip, r2, #20
   16224:	rsb	r2, r2, #12
   16228:	lsl	r0, r1, ip
   1622c:	lsr	r1, r1, r2
   16230:	b	16248 <close_stdout@@Base+0x43c8>
   16234:	add	r2, r2, #20
   16238:	rsble	ip, r2, #32
   1623c:	lsl	r1, r1, r2
   16240:	orrle	r1, r1, r0, lsr ip
   16244:	lslle	r0, r0, r2
   16248:	subs	r4, r4, r3
   1624c:	addge	r1, r1, r4, lsl #20
   16250:	orrge	r1, r1, r5
   16254:	popge	{r4, r5, pc}
   16258:	mvn	r4, r4
   1625c:	subs	r4, r4, #31
   16260:	bge	1629c <close_stdout@@Base+0x441c>
   16264:	adds	r4, r4, #12
   16268:	bgt	16284 <close_stdout@@Base+0x4404>
   1626c:	add	r4, r4, #20
   16270:	rsb	r2, r4, #32
   16274:	lsr	r0, r0, r4
   16278:	orr	r0, r0, r1, lsl r2
   1627c:	orr	r1, r5, r1, lsr r4
   16280:	pop	{r4, r5, pc}
   16284:	rsb	r4, r4, #12
   16288:	rsb	r2, r4, #32
   1628c:	lsr	r0, r0, r2
   16290:	orr	r0, r0, r1, lsl r4
   16294:	mov	r1, r5
   16298:	pop	{r4, r5, pc}
   1629c:	lsr	r0, r1, r4
   162a0:	mov	r1, r5
   162a4:	pop	{r4, r5, pc}
   162a8:	teq	r4, #0
   162ac:	eor	r3, r3, #1048576	; 0x100000
   162b0:	eoreq	r1, r1, #1048576	; 0x100000
   162b4:	addeq	r4, r4, #1
   162b8:	subne	r5, r5, #1
   162bc:	b	16148 <close_stdout@@Base+0x42c8>
   162c0:	mvns	ip, r4, asr #21
   162c4:	mvnsne	ip, r5, asr #21
   162c8:	beq	16330 <close_stdout@@Base+0x44b0>
   162cc:	teq	r4, r5
   162d0:	teqeq	r0, r2
   162d4:	beq	162e8 <close_stdout@@Base+0x4468>
   162d8:	orrs	ip, r4, r0
   162dc:	moveq	r1, r3
   162e0:	moveq	r0, r2
   162e4:	pop	{r4, r5, pc}
   162e8:	teq	r1, r3
   162ec:	movne	r1, #0
   162f0:	movne	r0, #0
   162f4:	popne	{r4, r5, pc}
   162f8:	lsrs	ip, r4, #21
   162fc:	bne	16310 <close_stdout@@Base+0x4490>
   16300:	lsls	r0, r0, #1
   16304:	adcs	r1, r1, r1
   16308:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1630c:	pop	{r4, r5, pc}
   16310:	adds	r4, r4, #4194304	; 0x400000
   16314:	addcc	r1, r1, #1048576	; 0x100000
   16318:	popcc	{r4, r5, pc}
   1631c:	and	r5, r1, #-2147483648	; 0x80000000
   16320:	orr	r1, r5, #2130706432	; 0x7f000000
   16324:	orr	r1, r1, #15728640	; 0xf00000
   16328:	mov	r0, #0
   1632c:	pop	{r4, r5, pc}
   16330:	mvns	ip, r4, asr #21
   16334:	movne	r1, r3
   16338:	movne	r0, r2
   1633c:	mvnseq	ip, r5, asr #21
   16340:	movne	r3, r1
   16344:	movne	r2, r0
   16348:	orrs	r4, r0, r1, lsl #12
   1634c:	orrseq	r5, r2, r3, lsl #12
   16350:	teqeq	r1, r3
   16354:	orrne	r1, r1, #524288	; 0x80000
   16358:	pop	{r4, r5, pc}
   1635c:	teq	r0, #0
   16360:	moveq	r1, #0
   16364:	bxeq	lr
   16368:	push	{r4, r5, lr}
   1636c:	mov	r4, #1024	; 0x400
   16370:	add	r4, r4, #50	; 0x32
   16374:	mov	r5, #0
   16378:	mov	r1, #0
   1637c:	b	161f8 <close_stdout@@Base+0x4378>
   16380:	teq	r0, #0
   16384:	moveq	r1, #0
   16388:	bxeq	lr
   1638c:	push	{r4, r5, lr}
   16390:	mov	r4, #1024	; 0x400
   16394:	add	r4, r4, #50	; 0x32
   16398:	ands	r5, r0, #-2147483648	; 0x80000000
   1639c:	rsbmi	r0, r0, #0
   163a0:	mov	r1, #0
   163a4:	b	161f8 <close_stdout@@Base+0x4378>
   163a8:	lsls	r2, r0, #1
   163ac:	asr	r1, r2, #3
   163b0:	rrx	r1, r1
   163b4:	lsl	r0, r2, #28
   163b8:	andsne	r3, r2, #-16777216	; 0xff000000
   163bc:	teqne	r3, #-16777216	; 0xff000000
   163c0:	eorne	r1, r1, #939524096	; 0x38000000
   163c4:	bxne	lr
   163c8:	teq	r2, #0
   163cc:	teqne	r3, #-16777216	; 0xff000000
   163d0:	bxeq	lr
   163d4:	push	{r4, r5, lr}
   163d8:	mov	r4, #896	; 0x380
   163dc:	and	r5, r1, #-2147483648	; 0x80000000
   163e0:	bic	r1, r1, #-2147483648	; 0x80000000
   163e4:	b	161f8 <close_stdout@@Base+0x4378>
   163e8:	orrs	r2, r0, r1
   163ec:	bxeq	lr
   163f0:	push	{r4, r5, lr}
   163f4:	mov	r5, #0
   163f8:	b	16418 <close_stdout@@Base+0x4598>
   163fc:	orrs	r2, r0, r1
   16400:	bxeq	lr
   16404:	push	{r4, r5, lr}
   16408:	ands	r5, r1, #-2147483648	; 0x80000000
   1640c:	bpl	16418 <close_stdout@@Base+0x4598>
   16410:	rsbs	r0, r0, #0
   16414:	rsc	r1, r1, #0
   16418:	mov	r4, #1024	; 0x400
   1641c:	add	r4, r4, #50	; 0x32
   16420:	lsrs	ip, r1, #22
   16424:	beq	1619c <close_stdout@@Base+0x431c>
   16428:	mov	r2, #3
   1642c:	lsrs	ip, ip, #3
   16430:	addne	r2, r2, #3
   16434:	lsrs	ip, ip, #3
   16438:	addne	r2, r2, #3
   1643c:	add	r2, r2, ip, lsr #3
   16440:	rsb	r3, r2, #32
   16444:	lsl	ip, r0, r3
   16448:	lsr	r0, r0, r2
   1644c:	orr	r0, r0, r1, lsl r3
   16450:	lsr	r1, r1, r2
   16454:	add	r4, r4, r2
   16458:	b	1619c <close_stdout@@Base+0x431c>
   1645c:	cmp	r3, #0
   16460:	cmpeq	r2, #0
   16464:	bne	1647c <close_stdout@@Base+0x45fc>
   16468:	cmp	r1, #0
   1646c:	cmpeq	r0, #0
   16470:	mvnne	r1, #0
   16474:	mvnne	r0, #0
   16478:	b	16498 <close_stdout@@Base+0x4618>
   1647c:	sub	sp, sp, #8
   16480:	push	{sp, lr}
   16484:	bl	1652c <close_stdout@@Base+0x46ac>
   16488:	ldr	lr, [sp, #4]
   1648c:	add	sp, sp, #8
   16490:	pop	{r2, r3}
   16494:	bx	lr
   16498:	push	{r1, lr}
   1649c:	mov	r0, #8
   164a0:	bl	110bc <raise@plt>
   164a4:	pop	{r1, pc}
   164a8:	vmov	d7, r0, r1
   164ac:	vldr	d5, [pc, #44]	; 164e0 <close_stdout@@Base+0x4660>
   164b0:	vldr	d6, [pc, #48]	; 164e8 <close_stdout@@Base+0x4668>
   164b4:	mov	r0, #0
   164b8:	vmul.f64	d5, d7, d5
   164bc:	vcvt.u32.f64	s9, d5
   164c0:	vcvt.f64.u32	d5, s9
   164c4:	vmov	r1, s9
   164c8:	vmls.f64	d7, d5, d6
   164cc:	vcvt.u32.f64	s14, d7
   164d0:	vmov	r3, s14
   164d4:	orr	r0, r0, r3
   164d8:	bx	lr
   164dc:	nop	{0}
   164e0:	andeq	r0, r0, r0
   164e4:	ldclcc	0, cr0, [r0]
   164e8:	andeq	r0, r0, r0
   164ec:	mvnsmi	r0, r0
   164f0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   164f4:	mov	r8, r2
   164f8:	mov	r6, r0
   164fc:	mov	r7, r1
   16500:	mov	sl, r3
   16504:	ldr	r9, [sp, #32]
   16508:	bl	16568 <close_stdout@@Base+0x46e8>
   1650c:	umull	r4, r5, r8, r0
   16510:	mul	r8, r8, r1
   16514:	mla	r2, r0, sl, r8
   16518:	add	r5, r2, r5
   1651c:	subs	r4, r6, r4
   16520:	sbc	r5, r7, r5
   16524:	strd	r4, [r9]
   16528:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1652c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16530:	mov	r8, r2
   16534:	mov	r6, r0
   16538:	mov	r7, r1
   1653c:	mov	r5, r3
   16540:	ldr	r9, [sp, #32]
   16544:	bl	169f4 <close_stdout@@Base+0x4b74>
   16548:	mul	r3, r0, r5
   1654c:	umull	r4, r5, r0, r8
   16550:	mla	r8, r8, r1, r3
   16554:	add	r5, r8, r5
   16558:	subs	r4, r6, r4
   1655c:	sbc	r5, r7, r5
   16560:	strd	r4, [r9]
   16564:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1656c:	rsbs	r4, r0, #0
   16570:	rsc	r5, r1, #0
   16574:	cmp	r1, #0
   16578:	mvn	r6, #0
   1657c:	sub	sp, sp, #12
   16580:	movge	r4, r0
   16584:	movge	r5, r1
   16588:	movge	r6, #0
   1658c:	cmp	r3, #0
   16590:	blt	167c8 <close_stdout@@Base+0x4948>
   16594:	cmp	r3, #0
   16598:	mov	sl, r4
   1659c:	mov	ip, r5
   165a0:	mov	r0, r2
   165a4:	mov	r1, r3
   165a8:	mov	r8, r2
   165ac:	mov	r7, r4
   165b0:	mov	r9, r5
   165b4:	bne	166ac <close_stdout@@Base+0x482c>
   165b8:	cmp	r2, r5
   165bc:	bls	166e8 <close_stdout@@Base+0x4868>
   165c0:	clz	r3, r2
   165c4:	cmp	r3, #0
   165c8:	rsbne	r2, r3, #32
   165cc:	lslne	r8, r0, r3
   165d0:	lsrne	r2, r4, r2
   165d4:	lslne	r7, r4, r3
   165d8:	orrne	r9, r2, r5, lsl r3
   165dc:	lsr	r4, r8, #16
   165e0:	uxth	sl, r8
   165e4:	mov	r1, r4
   165e8:	mov	r0, r9
   165ec:	bl	15e98 <close_stdout@@Base+0x4018>
   165f0:	mov	r1, r4
   165f4:	mov	fp, r0
   165f8:	mov	r0, r9
   165fc:	bl	16084 <close_stdout@@Base+0x4204>
   16600:	mul	r0, sl, fp
   16604:	lsr	r2, r7, #16
   16608:	orr	r1, r2, r1, lsl #16
   1660c:	cmp	r0, r1
   16610:	bls	16634 <close_stdout@@Base+0x47b4>
   16614:	adds	r1, r1, r8
   16618:	sub	r3, fp, #1
   1661c:	bcs	16630 <close_stdout@@Base+0x47b0>
   16620:	cmp	r0, r1
   16624:	subhi	fp, fp, #2
   16628:	addhi	r1, r1, r8
   1662c:	bhi	16634 <close_stdout@@Base+0x47b4>
   16630:	mov	fp, r3
   16634:	rsb	r9, r0, r1
   16638:	mov	r1, r4
   1663c:	uxth	r7, r7
   16640:	mov	r0, r9
   16644:	bl	15e98 <close_stdout@@Base+0x4018>
   16648:	mov	r1, r4
   1664c:	mov	r5, r0
   16650:	mov	r0, r9
   16654:	bl	16084 <close_stdout@@Base+0x4204>
   16658:	mul	sl, sl, r5
   1665c:	orr	r1, r7, r1, lsl #16
   16660:	cmp	sl, r1
   16664:	bls	16684 <close_stdout@@Base+0x4804>
   16668:	adds	r8, r1, r8
   1666c:	sub	r3, r5, #1
   16670:	bcs	16680 <close_stdout@@Base+0x4800>
   16674:	cmp	sl, r8
   16678:	subhi	r5, r5, #2
   1667c:	bhi	16684 <close_stdout@@Base+0x4804>
   16680:	mov	r5, r3
   16684:	orr	r3, r5, fp, lsl #16
   16688:	mov	r4, #0
   1668c:	cmp	r6, #0
   16690:	mov	r0, r3
   16694:	mov	r1, r4
   16698:	beq	166a4 <close_stdout@@Base+0x4824>
   1669c:	rsbs	r0, r0, #0
   166a0:	rsc	r1, r1, #0
   166a4:	add	sp, sp, #12
   166a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166ac:	cmp	r3, r5
   166b0:	movhi	r4, #0
   166b4:	movhi	r3, r4
   166b8:	bhi	1668c <close_stdout@@Base+0x480c>
   166bc:	clz	r5, r1
   166c0:	cmp	r5, #0
   166c4:	bne	168b4 <close_stdout@@Base+0x4a34>
   166c8:	cmp	r1, ip
   166cc:	cmpcs	r2, sl
   166d0:	movhi	r4, #0
   166d4:	movls	r4, #1
   166d8:	movls	r3, #1
   166dc:	movls	r4, r5
   166e0:	movhi	r3, r4
   166e4:	b	1668c <close_stdout@@Base+0x480c>
   166e8:	cmp	r2, #0
   166ec:	bne	16700 <close_stdout@@Base+0x4880>
   166f0:	mov	r1, r2
   166f4:	mov	r0, #1
   166f8:	bl	15e98 <close_stdout@@Base+0x4018>
   166fc:	mov	r8, r0
   16700:	clz	r3, r8
   16704:	cmp	r3, #0
   16708:	bne	167d8 <close_stdout@@Base+0x4958>
   1670c:	rsb	r9, r8, r9
   16710:	lsr	r5, r8, #16
   16714:	uxth	sl, r8
   16718:	mov	r4, #1
   1671c:	mov	r1, r5
   16720:	mov	r0, r9
   16724:	bl	15e98 <close_stdout@@Base+0x4018>
   16728:	mov	r1, r5
   1672c:	mov	fp, r0
   16730:	mov	r0, r9
   16734:	bl	16084 <close_stdout@@Base+0x4204>
   16738:	mul	r0, sl, fp
   1673c:	lsr	r2, r7, #16
   16740:	orr	r1, r2, r1, lsl #16
   16744:	cmp	r0, r1
   16748:	bls	16768 <close_stdout@@Base+0x48e8>
   1674c:	adds	r1, r1, r8
   16750:	sub	r3, fp, #1
   16754:	bcs	169d4 <close_stdout@@Base+0x4b54>
   16758:	cmp	r0, r1
   1675c:	subhi	fp, fp, #2
   16760:	addhi	r1, r1, r8
   16764:	bls	169d4 <close_stdout@@Base+0x4b54>
   16768:	rsb	r2, r0, r1
   1676c:	mov	r1, r5
   16770:	str	r2, [sp]
   16774:	uxth	r7, r7
   16778:	mov	r0, r2
   1677c:	bl	15e98 <close_stdout@@Base+0x4018>
   16780:	ldr	r2, [sp]
   16784:	mov	r1, r5
   16788:	mov	r9, r0
   1678c:	mov	r0, r2
   16790:	bl	16084 <close_stdout@@Base+0x4204>
   16794:	mul	sl, sl, r9
   16798:	orr	r1, r7, r1, lsl #16
   1679c:	cmp	sl, r1
   167a0:	bls	167c0 <close_stdout@@Base+0x4940>
   167a4:	adds	r8, r1, r8
   167a8:	sub	r3, r9, #1
   167ac:	bcs	167bc <close_stdout@@Base+0x493c>
   167b0:	cmp	sl, r8
   167b4:	subhi	r9, r9, #2
   167b8:	bhi	167c0 <close_stdout@@Base+0x4940>
   167bc:	mov	r9, r3
   167c0:	orr	r3, r9, fp, lsl #16
   167c4:	b	1668c <close_stdout@@Base+0x480c>
   167c8:	mvn	r6, r6
   167cc:	rsbs	r2, r2, #0
   167d0:	rsc	r3, r3, #0
   167d4:	b	16594 <close_stdout@@Base+0x4714>
   167d8:	lsl	r8, r8, r3
   167dc:	rsb	fp, r3, #32
   167e0:	lsr	r4, r9, fp
   167e4:	lsr	fp, r7, fp
   167e8:	lsr	r5, r8, #16
   167ec:	orr	fp, fp, r9, lsl r3
   167f0:	mov	r0, r4
   167f4:	lsl	r7, r7, r3
   167f8:	mov	r1, r5
   167fc:	uxth	sl, r8
   16800:	bl	15e98 <close_stdout@@Base+0x4018>
   16804:	mov	r1, r5
   16808:	mov	r3, r0
   1680c:	mov	r0, r4
   16810:	str	r3, [sp]
   16814:	bl	16084 <close_stdout@@Base+0x4204>
   16818:	ldr	r3, [sp]
   1681c:	lsr	r2, fp, #16
   16820:	mul	r0, sl, r3
   16824:	orr	r1, r2, r1, lsl #16
   16828:	cmp	r0, r1
   1682c:	bls	1684c <close_stdout@@Base+0x49cc>
   16830:	adds	r1, r1, r8
   16834:	sub	r2, r3, #1
   16838:	bcs	169ec <close_stdout@@Base+0x4b6c>
   1683c:	cmp	r0, r1
   16840:	subhi	r3, r3, #2
   16844:	addhi	r1, r1, r8
   16848:	bls	169ec <close_stdout@@Base+0x4b6c>
   1684c:	rsb	r9, r0, r1
   16850:	mov	r1, r5
   16854:	str	r3, [sp]
   16858:	uxth	fp, fp
   1685c:	mov	r0, r9
   16860:	bl	15e98 <close_stdout@@Base+0x4018>
   16864:	mov	r1, r5
   16868:	mov	r4, r0
   1686c:	mov	r0, r9
   16870:	bl	16084 <close_stdout@@Base+0x4204>
   16874:	mul	r9, sl, r4
   16878:	ldr	r3, [sp]
   1687c:	orr	r1, fp, r1, lsl #16
   16880:	cmp	r9, r1
   16884:	bls	168a8 <close_stdout@@Base+0x4a28>
   16888:	adds	r1, r1, r8
   1688c:	sub	r2, r4, #1
   16890:	bcs	168a4 <close_stdout@@Base+0x4a24>
   16894:	cmp	r9, r1
   16898:	subhi	r4, r4, #2
   1689c:	addhi	r1, r1, r8
   168a0:	bhi	168a8 <close_stdout@@Base+0x4a28>
   168a4:	mov	r4, r2
   168a8:	rsb	r9, r9, r1
   168ac:	orr	r4, r4, r3, lsl #16
   168b0:	b	1671c <close_stdout@@Base+0x489c>
   168b4:	rsb	sl, r5, #32
   168b8:	lsl	r3, r2, r5
   168bc:	lsr	r0, r2, sl
   168c0:	lsr	r2, ip, sl
   168c4:	orr	r4, r0, r1, lsl r5
   168c8:	lsr	sl, r7, sl
   168cc:	mov	r0, r2
   168d0:	orr	sl, sl, ip, lsl r5
   168d4:	lsr	r9, r4, #16
   168d8:	str	r3, [sp, #4]
   168dc:	str	r2, [sp]
   168e0:	uxth	fp, r4
   168e4:	mov	r1, r9
   168e8:	bl	15e98 <close_stdout@@Base+0x4018>
   168ec:	ldr	r2, [sp]
   168f0:	mov	r1, r9
   168f4:	mov	r8, r0
   168f8:	mov	r0, r2
   168fc:	bl	16084 <close_stdout@@Base+0x4204>
   16900:	mul	r0, fp, r8
   16904:	lsr	r2, sl, #16
   16908:	orr	r1, r2, r1, lsl #16
   1690c:	cmp	r0, r1
   16910:	bls	16930 <close_stdout@@Base+0x4ab0>
   16914:	adds	r1, r1, r4
   16918:	sub	r2, r8, #1
   1691c:	bcs	169e4 <close_stdout@@Base+0x4b64>
   16920:	cmp	r0, r1
   16924:	subhi	r8, r8, #2
   16928:	addhi	r1, r1, r4
   1692c:	bls	169e4 <close_stdout@@Base+0x4b64>
   16930:	rsb	ip, r0, r1
   16934:	mov	r1, r9
   16938:	str	ip, [sp]
   1693c:	mov	r0, ip
   16940:	bl	15e98 <close_stdout@@Base+0x4018>
   16944:	ldr	ip, [sp]
   16948:	mov	r1, r9
   1694c:	mov	r2, r0
   16950:	mov	r0, ip
   16954:	str	r2, [sp]
   16958:	bl	16084 <close_stdout@@Base+0x4204>
   1695c:	ldr	r2, [sp]
   16960:	uxth	ip, sl
   16964:	mul	fp, fp, r2
   16968:	orr	ip, ip, r1, lsl #16
   1696c:	cmp	fp, ip
   16970:	bls	16990 <close_stdout@@Base+0x4b10>
   16974:	adds	ip, ip, r4
   16978:	sub	r1, r2, #1
   1697c:	bcs	169dc <close_stdout@@Base+0x4b5c>
   16980:	cmp	fp, ip
   16984:	subhi	r2, r2, #2
   16988:	addhi	ip, ip, r4
   1698c:	bls	169dc <close_stdout@@Base+0x4b5c>
   16990:	ldr	r0, [sp, #4]
   16994:	orr	r1, r2, r8, lsl #16
   16998:	rsb	fp, fp, ip
   1699c:	umull	r2, r3, r1, r0
   169a0:	cmp	fp, r3
   169a4:	bcc	169c8 <close_stdout@@Base+0x4b48>
   169a8:	movne	r4, #0
   169ac:	moveq	r4, #1
   169b0:	cmp	r2, r7, lsl r5
   169b4:	movls	r4, #0
   169b8:	andhi	r4, r4, #1
   169bc:	cmp	r4, #0
   169c0:	moveq	r3, r1
   169c4:	beq	1668c <close_stdout@@Base+0x480c>
   169c8:	sub	r3, r1, #1
   169cc:	mov	r4, #0
   169d0:	b	1668c <close_stdout@@Base+0x480c>
   169d4:	mov	fp, r3
   169d8:	b	16768 <close_stdout@@Base+0x48e8>
   169dc:	mov	r2, r1
   169e0:	b	16990 <close_stdout@@Base+0x4b10>
   169e4:	mov	r8, r2
   169e8:	b	16930 <close_stdout@@Base+0x4ab0>
   169ec:	mov	r3, r2
   169f0:	b	1684c <close_stdout@@Base+0x49cc>
   169f4:	cmp	r3, #0
   169f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   169fc:	mov	r6, r0
   16a00:	sub	sp, sp, #12
   16a04:	mov	r5, r1
   16a08:	mov	r7, r0
   16a0c:	mov	r4, r2
   16a10:	mov	r8, r1
   16a14:	bne	16af4 <close_stdout@@Base+0x4c74>
   16a18:	cmp	r2, r1
   16a1c:	bls	16b30 <close_stdout@@Base+0x4cb0>
   16a20:	clz	r3, r2
   16a24:	cmp	r3, #0
   16a28:	rsbne	r8, r3, #32
   16a2c:	lslne	r4, r2, r3
   16a30:	lsrne	r8, r0, r8
   16a34:	lslne	r7, r0, r3
   16a38:	orrne	r8, r8, r1, lsl r3
   16a3c:	lsr	r5, r4, #16
   16a40:	uxth	sl, r4
   16a44:	mov	r1, r5
   16a48:	mov	r0, r8
   16a4c:	bl	15e98 <close_stdout@@Base+0x4018>
   16a50:	mov	r1, r5
   16a54:	mov	r9, r0
   16a58:	mov	r0, r8
   16a5c:	bl	16084 <close_stdout@@Base+0x4204>
   16a60:	mul	r0, sl, r9
   16a64:	lsr	r3, r7, #16
   16a68:	orr	r1, r3, r1, lsl #16
   16a6c:	cmp	r0, r1
   16a70:	bls	16a94 <close_stdout@@Base+0x4c14>
   16a74:	adds	r1, r1, r4
   16a78:	sub	r2, r9, #1
   16a7c:	bcs	16a90 <close_stdout@@Base+0x4c10>
   16a80:	cmp	r0, r1
   16a84:	subhi	r9, r9, #2
   16a88:	addhi	r1, r1, r4
   16a8c:	bhi	16a94 <close_stdout@@Base+0x4c14>
   16a90:	mov	r9, r2
   16a94:	rsb	r8, r0, r1
   16a98:	mov	r1, r5
   16a9c:	uxth	r7, r7
   16aa0:	mov	r0, r8
   16aa4:	bl	15e98 <close_stdout@@Base+0x4018>
   16aa8:	mov	r1, r5
   16aac:	mov	r6, r0
   16ab0:	mov	r0, r8
   16ab4:	bl	16084 <close_stdout@@Base+0x4204>
   16ab8:	mul	sl, sl, r6
   16abc:	orr	r1, r7, r1, lsl #16
   16ac0:	cmp	sl, r1
   16ac4:	bls	16ae0 <close_stdout@@Base+0x4c60>
   16ac8:	adds	r4, r1, r4
   16acc:	sub	r3, r6, #1
   16ad0:	bcs	16ddc <close_stdout@@Base+0x4f5c>
   16ad4:	cmp	sl, r4
   16ad8:	subhi	r6, r6, #2
   16adc:	bls	16ddc <close_stdout@@Base+0x4f5c>
   16ae0:	orr	r0, r6, r9, lsl #16
   16ae4:	mov	r6, #0
   16ae8:	mov	r1, r6
   16aec:	add	sp, sp, #12
   16af0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16af4:	cmp	r3, r1
   16af8:	movhi	r6, #0
   16afc:	movhi	r0, r6
   16b00:	bhi	16ae8 <close_stdout@@Base+0x4c68>
   16b04:	clz	r7, r3
   16b08:	cmp	r7, #0
   16b0c:	bne	16c0c <close_stdout@@Base+0x4d8c>
   16b10:	cmp	r3, r1
   16b14:	cmpcs	r2, r6
   16b18:	movhi	r6, #0
   16b1c:	movls	r6, #1
   16b20:	movls	r0, #1
   16b24:	movls	r6, r7
   16b28:	movhi	r0, r6
   16b2c:	b	16ae8 <close_stdout@@Base+0x4c68>
   16b30:	cmp	r2, #0
   16b34:	bne	16b48 <close_stdout@@Base+0x4cc8>
   16b38:	mov	r1, r2
   16b3c:	mov	r0, #1
   16b40:	bl	15e98 <close_stdout@@Base+0x4018>
   16b44:	mov	r4, r0
   16b48:	clz	r3, r4
   16b4c:	cmp	r3, #0
   16b50:	bne	16d08 <close_stdout@@Base+0x4e88>
   16b54:	rsb	r5, r4, r5
   16b58:	lsr	r8, r4, #16
   16b5c:	uxth	sl, r4
   16b60:	mov	r6, #1
   16b64:	mov	r1, r8
   16b68:	mov	r0, r5
   16b6c:	bl	15e98 <close_stdout@@Base+0x4018>
   16b70:	mov	r1, r8
   16b74:	mov	r9, r0
   16b78:	mov	r0, r5
   16b7c:	bl	16084 <close_stdout@@Base+0x4204>
   16b80:	mul	r0, sl, r9
   16b84:	lsr	r3, r7, #16
   16b88:	orr	r1, r3, r1, lsl #16
   16b8c:	cmp	r0, r1
   16b90:	bls	16bb0 <close_stdout@@Base+0x4d30>
   16b94:	adds	r1, r1, r4
   16b98:	sub	r2, r9, #1
   16b9c:	bcs	16de4 <close_stdout@@Base+0x4f64>
   16ba0:	cmp	r0, r1
   16ba4:	subhi	r9, r9, #2
   16ba8:	addhi	r1, r1, r4
   16bac:	bls	16de4 <close_stdout@@Base+0x4f64>
   16bb0:	rsb	fp, r0, r1
   16bb4:	mov	r1, r8
   16bb8:	uxth	r7, r7
   16bbc:	mov	r0, fp
   16bc0:	bl	15e98 <close_stdout@@Base+0x4018>
   16bc4:	mov	r1, r8
   16bc8:	mov	r5, r0
   16bcc:	mov	r0, fp
   16bd0:	bl	16084 <close_stdout@@Base+0x4204>
   16bd4:	mul	sl, sl, r5
   16bd8:	orr	r1, r7, r1, lsl #16
   16bdc:	cmp	sl, r1
   16be0:	bls	16bfc <close_stdout@@Base+0x4d7c>
   16be4:	adds	r4, r1, r4
   16be8:	sub	r3, r5, #1
   16bec:	bcs	16dec <close_stdout@@Base+0x4f6c>
   16bf0:	cmp	sl, r4
   16bf4:	subhi	r5, r5, #2
   16bf8:	bls	16dec <close_stdout@@Base+0x4f6c>
   16bfc:	orr	r0, r5, r9, lsl #16
   16c00:	mov	r1, r6
   16c04:	add	sp, sp, #12
   16c08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16c0c:	rsb	r1, r7, #32
   16c10:	lsl	r0, r2, r7
   16c14:	lsr	r2, r2, r1
   16c18:	lsr	fp, r5, r1
   16c1c:	orr	r8, r2, r3, lsl r7
   16c20:	lsr	r1, r6, r1
   16c24:	str	r0, [sp, #4]
   16c28:	orr	r5, r1, r5, lsl r7
   16c2c:	lsr	r9, r8, #16
   16c30:	mov	r0, fp
   16c34:	uxth	sl, r8
   16c38:	mov	r1, r9
   16c3c:	bl	15e98 <close_stdout@@Base+0x4018>
   16c40:	mov	r1, r9
   16c44:	mov	r4, r0
   16c48:	mov	r0, fp
   16c4c:	bl	16084 <close_stdout@@Base+0x4204>
   16c50:	mul	r0, sl, r4
   16c54:	lsr	ip, r5, #16
   16c58:	orr	r1, ip, r1, lsl #16
   16c5c:	cmp	r0, r1
   16c60:	bls	16c74 <close_stdout@@Base+0x4df4>
   16c64:	adds	r1, r1, r8
   16c68:	sub	r2, r4, #1
   16c6c:	bcc	16e08 <close_stdout@@Base+0x4f88>
   16c70:	mov	r4, r2
   16c74:	rsb	ip, r0, r1
   16c78:	mov	r1, r9
   16c7c:	str	ip, [sp]
   16c80:	uxth	r5, r5
   16c84:	mov	r0, ip
   16c88:	bl	15e98 <close_stdout@@Base+0x4018>
   16c8c:	ldr	ip, [sp]
   16c90:	mov	r1, r9
   16c94:	mov	fp, r0
   16c98:	mov	r0, ip
   16c9c:	bl	16084 <close_stdout@@Base+0x4204>
   16ca0:	mul	sl, sl, fp
   16ca4:	orr	r1, r5, r1, lsl #16
   16ca8:	cmp	sl, r1
   16cac:	bls	16cc0 <close_stdout@@Base+0x4e40>
   16cb0:	adds	r1, r1, r8
   16cb4:	sub	r2, fp, #1
   16cb8:	bcc	16df4 <close_stdout@@Base+0x4f74>
   16cbc:	mov	fp, r2
   16cc0:	ldr	r3, [sp, #4]
   16cc4:	orr	r0, fp, r4, lsl #16
   16cc8:	rsb	sl, sl, r1
   16ccc:	umull	r4, r5, r0, r3
   16cd0:	cmp	sl, r5
   16cd4:	bcc	16cf4 <close_stdout@@Base+0x4e74>
   16cd8:	movne	r3, #0
   16cdc:	moveq	r3, #1
   16ce0:	cmp	r4, r6, lsl r7
   16ce4:	movls	r6, #0
   16ce8:	andhi	r6, r3, #1
   16cec:	cmp	r6, #0
   16cf0:	beq	16ae8 <close_stdout@@Base+0x4c68>
   16cf4:	mov	r6, #0
   16cf8:	sub	r0, r0, #1
   16cfc:	mov	r1, r6
   16d00:	add	sp, sp, #12
   16d04:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d08:	lsl	r4, r4, r3
   16d0c:	rsb	r9, r3, #32
   16d10:	lsr	r2, r5, r9
   16d14:	lsr	r9, r6, r9
   16d18:	lsr	r8, r4, #16
   16d1c:	orr	r9, r9, r5, lsl r3
   16d20:	mov	r0, r2
   16d24:	lsl	r7, r6, r3
   16d28:	mov	r1, r8
   16d2c:	str	r2, [sp]
   16d30:	bl	15e98 <close_stdout@@Base+0x4018>
   16d34:	ldr	r2, [sp]
   16d38:	mov	r1, r8
   16d3c:	uxth	sl, r4
   16d40:	mov	fp, r0
   16d44:	mov	r0, r2
   16d48:	bl	16084 <close_stdout@@Base+0x4204>
   16d4c:	mul	r0, sl, fp
   16d50:	lsr	r3, r9, #16
   16d54:	orr	r1, r3, r1, lsl #16
   16d58:	cmp	r0, r1
   16d5c:	bls	16d7c <close_stdout@@Base+0x4efc>
   16d60:	adds	r1, r1, r4
   16d64:	sub	r3, fp, #1
   16d68:	bcs	16e1c <close_stdout@@Base+0x4f9c>
   16d6c:	cmp	r0, r1
   16d70:	subhi	fp, fp, #2
   16d74:	addhi	r1, r1, r4
   16d78:	bls	16e1c <close_stdout@@Base+0x4f9c>
   16d7c:	rsb	r5, r0, r1
   16d80:	mov	r1, r8
   16d84:	uxth	r9, r9
   16d88:	mov	r0, r5
   16d8c:	bl	15e98 <close_stdout@@Base+0x4018>
   16d90:	mov	r1, r8
   16d94:	mov	r6, r0
   16d98:	mov	r0, r5
   16d9c:	bl	16084 <close_stdout@@Base+0x4204>
   16da0:	mul	r5, sl, r6
   16da4:	orr	r1, r9, r1, lsl #16
   16da8:	cmp	r5, r1
   16dac:	bls	16dd0 <close_stdout@@Base+0x4f50>
   16db0:	adds	r1, r1, r4
   16db4:	sub	r3, r6, #1
   16db8:	bcs	16dcc <close_stdout@@Base+0x4f4c>
   16dbc:	cmp	r5, r1
   16dc0:	subhi	r6, r6, #2
   16dc4:	addhi	r1, r1, r4
   16dc8:	bhi	16dd0 <close_stdout@@Base+0x4f50>
   16dcc:	mov	r6, r3
   16dd0:	rsb	r5, r5, r1
   16dd4:	orr	r6, r6, fp, lsl #16
   16dd8:	b	16b64 <close_stdout@@Base+0x4ce4>
   16ddc:	mov	r6, r3
   16de0:	b	16ae0 <close_stdout@@Base+0x4c60>
   16de4:	mov	r9, r2
   16de8:	b	16bb0 <close_stdout@@Base+0x4d30>
   16dec:	mov	r5, r3
   16df0:	b	16bfc <close_stdout@@Base+0x4d7c>
   16df4:	cmp	sl, r1
   16df8:	subhi	fp, fp, #2
   16dfc:	addhi	r1, r1, r8
   16e00:	bhi	16cc0 <close_stdout@@Base+0x4e40>
   16e04:	b	16cbc <close_stdout@@Base+0x4e3c>
   16e08:	cmp	r0, r1
   16e0c:	subhi	r4, r4, #2
   16e10:	addhi	r1, r1, r8
   16e14:	bhi	16c74 <close_stdout@@Base+0x4df4>
   16e18:	b	16c70 <close_stdout@@Base+0x4df0>
   16e1c:	mov	fp, r3
   16e20:	b	16d7c <close_stdout@@Base+0x4efc>
   16e24:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16e28:	mov	r7, r0
   16e2c:	ldr	r6, [pc, #76]	; 16e80 <close_stdout@@Base+0x5000>
   16e30:	mov	r8, r1
   16e34:	ldr	r5, [pc, #72]	; 16e84 <close_stdout@@Base+0x5004>
   16e38:	mov	r9, r2
   16e3c:	add	r6, pc, r6
   16e40:	bl	11078 <fdopen@plt-0x20>
   16e44:	add	r5, pc, r5
   16e48:	rsb	r6, r5, r6
   16e4c:	asrs	r6, r6, #2
   16e50:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   16e54:	sub	r5, r5, #4
   16e58:	mov	r4, #0
   16e5c:	add	r4, r4, #1
   16e60:	ldr	r3, [r5, #4]!
   16e64:	mov	r0, r7
   16e68:	mov	r1, r8
   16e6c:	mov	r2, r9
   16e70:	blx	r3
   16e74:	cmp	r4, r6
   16e78:	bne	16e5c <close_stdout@@Base+0x4fdc>
   16e7c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16e80:	andeq	r1, r1, ip, asr #32
   16e84:	andeq	r1, r1, r0, asr #32
   16e88:	bx	lr
   16e8c:	ldr	r3, [pc, #28]	; 16eb0 <close_stdout@@Base+0x5030>
   16e90:	mov	r1, #0
   16e94:	ldr	r2, [pc, #24]	; 16eb4 <close_stdout@@Base+0x5034>
   16e98:	add	r3, pc, r3
   16e9c:	ldr	r3, [r3, r2]
   16ea0:	cmp	r3, #0
   16ea4:	ldrne	r2, [r3]
   16ea8:	moveq	r2, r3
   16eac:	b	11290 <__cxa_atexit@plt>
   16eb0:	andeq	r1, r1, r0, ror #2
   16eb4:	andeq	r0, r0, r4, lsr #2

Disassembly of section .fini:

00016eb8 <.fini>:
   16eb8:	push	{r3, lr}
   16ebc:	pop	{r3, pc}
