
centos-preinstalled/gprof:     file format elf32-littlearm


Disassembly of section .init:

0001130c <_init@@Base>:
   1130c:	push	{r3, lr}
   11310:	bl	122f0 <bfd_arch_bits_per_address@plt+0xc28>
   11314:	pop	{r3, pc}

Disassembly of section .plt:

00011318 <raise@plt-0x14>:
   11318:	push	{lr}		; (str lr, [sp, #-4]!)
   1131c:	ldr	lr, [pc, #4]	; 11328 <_init@@Base+0x1c>
   11320:	add	lr, pc, lr
   11324:	ldr	pc, [lr, #8]!
   11328:	ldrdeq	r5, [r2], -r8

0001132c <raise@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #151552	; 0x25000
   11334:	ldr	pc, [ip, #3288]!	; 0xcd8

00011338 <cplus_demangle_name_to_style@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #151552	; 0x25000
   11340:	ldr	pc, [ip, #3280]!	; 0xcd0

00011344 <setitimer@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #151552	; 0x25000
   1134c:	ldr	pc, [ip, #3272]!	; 0xcc8

00011350 <strcmp@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #151552	; 0x25000
   11358:	ldr	pc, [ip, #3264]!	; 0xcc0

0001135c <strtol@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #151552	; 0x25000
   11364:	ldr	pc, [ip, #3256]!	; 0xcb8

00011368 <memmove@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #151552	; 0x25000
   11370:	ldr	pc, [ip, #3248]!	; 0xcb0

00011374 <free@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #151552	; 0x25000
   1137c:	ldr	pc, [ip, #3240]!	; 0xca8

00011380 <fgets@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #151552	; 0x25000
   11388:	ldr	pc, [ip, #3232]!	; 0xca0

0001138c <ferror@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #151552	; 0x25000
   11394:	ldr	pc, [ip, #3224]!	; 0xc98

00011398 <filename_cmp@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #151552	; 0x25000
   113a0:	ldr	pc, [ip, #3216]!	; 0xc90

000113a4 <cplus_demangle_set_style@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #151552	; 0x25000
   113ac:	ldr	pc, [ip, #3208]!	; 0xc88

000113b0 <memcpy@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #151552	; 0x25000
   113b8:	ldr	pc, [ip, #3200]!	; 0xc80

000113bc <bfd_openr@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #151552	; 0x25000
   113c4:	ldr	pc, [ip, #3192]!	; 0xc78

000113c8 <ftell@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #151552	; 0x25000
   113d0:	ldr	pc, [ip, #3184]!	; 0xc70

000113d4 <bfd_get_section_contents@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #151552	; 0x25000
   113dc:	ldr	pc, [ip, #3176]!	; 0xc68

000113e0 <dcgettext@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #151552	; 0x25000
   113e8:	ldr	pc, [ip, #3168]!	; 0xc60

000113ec <__stack_chk_fail@plt>:
   113ec:	add	ip, pc, #0, 12
   113f0:	add	ip, ip, #151552	; 0x25000
   113f4:	ldr	pc, [ip, #3160]!	; 0xc58

000113f8 <rewind@plt>:
   113f8:	add	ip, pc, #0, 12
   113fc:	add	ip, ip, #151552	; 0x25000
   11400:	ldr	pc, [ip, #3152]!	; 0xc50

00011404 <sysconf@plt>:
   11404:	add	ip, pc, #0, 12
   11408:	add	ip, ip, #151552	; 0x25000
   1140c:	ldr	pc, [ip, #3144]!	; 0xc48

00011410 <xrealloc@plt>:
   11410:	add	ip, pc, #0, 12
   11414:	add	ip, ip, #151552	; 0x25000
   11418:	ldr	pc, [ip, #3136]!	; 0xc40

0001141c <textdomain@plt>:
   1141c:	add	ip, pc, #0, 12
   11420:	add	ip, ip, #151552	; 0x25000
   11424:	ldr	pc, [ip, #3128]!	; 0xc38

00011428 <perror@plt>:
   11428:	add	ip, pc, #0, 12
   1142c:	add	ip, ip, #151552	; 0x25000
   11430:	ldr	pc, [ip, #3120]!	; 0xc30

00011434 <bfd_get_error@plt>:
   11434:	add	ip, pc, #0, 12
   11438:	add	ip, ip, #151552	; 0x25000
   1143c:	ldr	pc, [ip, #3112]!	; 0xc28

00011440 <_IO_putc@plt>:
   11440:	add	ip, pc, #0, 12
   11444:	add	ip, ip, #151552	; 0x25000
   11448:	ldr	pc, [ip, #3104]!	; 0xc20

0001144c <fwrite@plt>:
   1144c:	add	ip, pc, #0, 12
   11450:	add	ip, ip, #151552	; 0x25000
   11454:	ldr	pc, [ip, #3096]!	; 0xc18

00011458 <xmalloc@plt>:
   11458:	add	ip, pc, #0, 12
   1145c:	add	ip, ip, #151552	; 0x25000
   11460:	ldr	pc, [ip, #3088]!	; 0xc10

00011464 <xmalloc_set_program_name@plt>:
   11464:	add	ip, pc, #0, 12
   11468:	add	ip, ip, #151552	; 0x25000
   1146c:	ldr	pc, [ip, #3080]!	; 0xc08

00011470 <xstrdup@plt>:
   11470:	add	ip, pc, #0, 12
   11474:	add	ip, ip, #151552	; 0x25000
   11478:	ldr	pc, [ip, #3072]!	; 0xc00

0001147c <__stpcpy_chk@plt>:
   1147c:	add	ip, pc, #0, 12
   11480:	add	ip, ip, #151552	; 0x25000
   11484:	ldr	pc, [ip, #3064]!	; 0xbf8

00011488 <strcpy@plt>:
   11488:	add	ip, pc, #0, 12
   1148c:	add	ip, ip, #151552	; 0x25000
   11490:	ldr	pc, [ip, #3056]!	; 0xbf0

00011494 <__strcpy_chk@plt>:
   11494:	add	ip, pc, #0, 12
   11498:	add	ip, ip, #151552	; 0x25000
   1149c:	ldr	pc, [ip, #3048]!	; 0xbe8

000114a0 <fread@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #151552	; 0x25000
   114a8:	ldr	pc, [ip, #3040]!	; 0xbe0

000114ac <bfd_get_section_by_name@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #151552	; 0x25000
   114b4:	ldr	pc, [ip, #3032]!	; 0xbd8

000114b8 <bfd_get_arch_size@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #151552	; 0x25000
   114c0:	ldr	pc, [ip, #3024]!	; 0xbd0

000114c4 <bfd_printable_name@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #151552	; 0x25000
   114cc:	ldr	pc, [ip, #3016]!	; 0xbc8

000114d0 <getenv@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #151552	; 0x25000
   114d8:	ldr	pc, [ip, #3008]!	; 0xbc0

000114dc <__gnu_Unwind_Find_exidx@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #151552	; 0x25000
   114e4:	ldr	pc, [ip, #3000]!	; 0xbb8

000114e8 <puts@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #151552	; 0x25000
   114f0:	ldr	pc, [ip, #2992]!	; 0xbb0

000114f4 <malloc@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #151552	; 0x25000
   114fc:	ldr	pc, [ip, #2984]!	; 0xba8

00011500 <__cxa_begin_cleanup@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #151552	; 0x25000
   11508:	ldr	pc, [ip, #2976]!	; 0xba0

0001150c <__libc_start_main@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #151552	; 0x25000
   11514:	ldr	pc, [ip, #2968]!	; 0xb98

00011518 <__gmon_start__@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #151552	; 0x25000
   11520:	ldr	pc, [ip, #2960]!	; 0xb90

00011524 <getopt_long@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #151552	; 0x25000
   1152c:	ldr	pc, [ip, #2952]!	; 0xb88

00011530 <exit@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #151552	; 0x25000
   11538:	ldr	pc, [ip, #2944]!	; 0xb80

0001153c <feof@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #151552	; 0x25000
   11544:	ldr	pc, [ip, #2936]!	; 0xb78

00011548 <__cxa_type_match@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #151552	; 0x25000
   11550:	ldr	pc, [ip, #2928]!	; 0xb70

00011554 <strtoul@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #151552	; 0x25000
   1155c:	ldr	pc, [ip, #2920]!	; 0xb68

00011560 <strlen@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #151552	; 0x25000
   11568:	ldr	pc, [ip, #2912]!	; 0xb60

0001156c <strchr@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #151552	; 0x25000
   11574:	ldr	pc, [ip, #2904]!	; 0xb58

00011578 <bfd_get_arch@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #151552	; 0x25000
   11580:	ldr	pc, [ip, #2896]!	; 0xb50

00011584 <__errno_location@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #151552	; 0x25000
   1158c:	ldr	pc, [ip, #2888]!	; 0xb48

00011590 <__sprintf_chk@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #151552	; 0x25000
   11598:	ldr	pc, [ip, #2880]!	; 0xb40

0001159c <memset@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #151552	; 0x25000
   115a4:	ldr	pc, [ip, #2872]!	; 0xb38

000115a8 <bsearch@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #151552	; 0x25000
   115b0:	ldr	pc, [ip, #2864]!	; 0xb30

000115b4 <putchar@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #151552	; 0x25000
   115bc:	ldr	pc, [ip, #2856]!	; 0xb28

000115c0 <strncpy@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #151552	; 0x25000
   115c8:	ldr	pc, [ip, #2848]!	; 0xb20

000115cc <fscanf@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #151552	; 0x25000
   115d4:	ldr	pc, [ip, #2840]!	; 0xb18

000115d8 <fgetc@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #151552	; 0x25000
   115e0:	ldr	pc, [ip, #2832]!	; 0xb10

000115e4 <__printf_chk@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #151552	; 0x25000
   115ec:	ldr	pc, [ip, #2824]!	; 0xb08

000115f0 <bfd_get_sign_extend_vma@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #151552	; 0x25000
   115f8:	ldr	pc, [ip, #2816]!	; 0xb00

000115fc <__fprintf_chk@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #151552	; 0x25000
   11604:	ldr	pc, [ip, #2808]!	; 0xaf8

00011608 <fclose@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #151552	; 0x25000
   11610:	ldr	pc, [ip, #2800]!	; 0xaf0

00011614 <bfd_demangle@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #151552	; 0x25000
   1161c:	ldr	pc, [ip, #2792]!	; 0xae8

00011620 <strrchr@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #151552	; 0x25000
   11628:	ldr	pc, [ip, #2784]!	; 0xae0

0001162c <bfd_perror@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #151552	; 0x25000
   11634:	ldr	pc, [ip, #2776]!	; 0xad8

00011638 <fputc@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #151552	; 0x25000
   11640:	ldr	pc, [ip, #2768]!	; 0xad0

00011644 <xexit@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #151552	; 0x25000
   1164c:	ldr	pc, [ip, #2760]!	; 0xac8

00011650 <sscanf@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #151552	; 0x25000
   11658:	ldr	pc, [ip, #2752]!	; 0xac0

0001165c <fopen64@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #151552	; 0x25000
   11664:	ldr	pc, [ip, #2744]!	; 0xab8

00011668 <bfd_errmsg@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #151552	; 0x25000
   11670:	ldr	pc, [ip, #2736]!	; 0xab0

00011674 <qsort@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #151552	; 0x25000
   1167c:	ldr	pc, [ip, #2728]!	; 0xaa8

00011680 <bindtextdomain@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #151552	; 0x25000
   11688:	ldr	pc, [ip, #2720]!	; 0xaa0

0001168c <bfd_check_format@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #151552	; 0x25000
   11694:	ldr	pc, [ip, #2712]!	; 0xa98

00011698 <fseek@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #151552	; 0x25000
   116a0:	ldr	pc, [ip, #2704]!	; 0xa90

000116a4 <fputs@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #151552	; 0x25000
   116ac:	ldr	pc, [ip, #2696]!	; 0xa88

000116b0 <strncmp@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #151552	; 0x25000
   116b8:	ldr	pc, [ip, #2688]!	; 0xa80

000116bc <abort@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #151552	; 0x25000
   116c4:	ldr	pc, [ip, #2680]!	; 0xa78

000116c8 <bfd_arch_bits_per_address@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #151552	; 0x25000
   116d0:	ldr	pc, [ip, #2672]!	; 0xa70

Disassembly of section .text:

000116d8 <.text>:
   116d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116dc:	sub	sp, sp, #20
   116e0:	movw	r8, #31748	; 0x7c04
   116e4:	movt	r8, #3
   116e8:	str	r0, [sp, #12]
   116ec:	movw	r0, #13700	; 0x3584
   116f0:	str	r1, [sp, #8]
   116f4:	movt	r0, #2
   116f8:	movw	r1, #13708	; 0x358c
   116fc:	movt	r1, #2
   11700:	bl	11680 <bindtextdomain@plt>
   11704:	movw	r0, #13700	; 0x3584
   11708:	movt	r0, #2
   1170c:	movw	r4, #30524	; 0x773c
   11710:	bl	1141c <textdomain@plt>
   11714:	ldr	r3, [sp, #8]
   11718:	movw	r7, #29036	; 0x716c
   1171c:	movw	r5, #30448	; 0x76f0
   11720:	movw	r9, #30604	; 0x778c
   11724:	movt	r4, #3
   11728:	ldr	r3, [r3]
   1172c:	movt	r7, #3
   11730:	movt	r5, #3
   11734:	movt	r9, #3
   11738:	mov	r6, #0
   1173c:	mov	r0, r3
   11740:	str	r3, [r8]
   11744:	bl	11464 <xmalloc_set_program_name@plt>
   11748:	add	r0, sp, #12
   1174c:	add	r1, sp, #8
   11750:	bl	1f4e8 <bfd_arch_bits_per_address@plt+0xde20>
   11754:	ldr	r0, [sp, #12]
   11758:	mov	sl, #0
   1175c:	ldr	r1, [sp, #8]
   11760:	movw	r2, #14048	; 0x36e0
   11764:	str	sl, [sp]
   11768:	movt	r2, #2
   1176c:	ldr	r3, [pc, #2872]	; 122ac <bfd_arch_bits_per_address@plt+0xbe4>
   11770:	bl	11524 <getopt_long@plt>
   11774:	cmn	r0, #1
   11778:	beq	11de0 <bfd_arch_bits_per_address@plt+0x718>
   1177c:	sub	r0, r0, #65	; 0x41
   11780:	cmp	r0, #87	; 0x57
   11784:	ldrls	pc, [pc, r0, lsl #2]
   11788:	b	11dcc <bfd_arch_bits_per_address@plt+0x704>
   1178c:	andeq	r1, r1, r8, asr r9
   11790:	andeq	r1, r1, r4, lsl r9
   11794:	andeq	r1, r1, r4, lsr #27
   11798:	muleq	r1, r8, sp
   1179c:	andeq	r1, r1, r0, lsl #27
   117a0:	andeq	r1, r1, r8, ror #26
   117a4:	andeq	r1, r1, r8, asr sp
   117a8:	andeq	r1, r1, ip, asr #27
   117ac:	andeq	r1, r1, r4, asr #26
   117b0:	andeq	r1, r1, ip, lsl sp
   117b4:	andeq	r1, r1, ip, asr #27
   117b8:	andeq	r1, r1, r0, lsl sp
   117bc:	andeq	r1, r1, ip, asr #27
   117c0:	andeq	r1, r1, r0, lsl #26
   117c4:	andeq	r1, r1, r8, asr #25
   117c8:	andeq	r1, r1, r0, lsr #25
   117cc:	andeq	r1, r1, r0, ror #24
   117d0:	andeq	r1, r1, ip, lsr ip
   117d4:	andeq	r1, r1, r4, lsl ip
   117d8:	andeq	r1, r1, r8, lsl #24
   117dc:	andeq	r1, r1, ip, asr #27
   117e0:	andeq	r1, r1, ip, asr #27
   117e4:	andeq	r1, r1, ip, asr #27
   117e8:	andeq	r1, r1, ip, asr #27
   117ec:	andeq	r1, r1, ip, asr #27
   117f0:	andeq	r1, r1, r4, ror #23
   117f4:	andeq	r1, r1, ip, asr #27
   117f8:	andeq	r1, r1, ip, asr #27
   117fc:	andeq	r1, r1, ip, asr #27
   11800:	andeq	r1, r1, ip, asr #27
   11804:	andeq	r1, r1, ip, asr #27
   11808:	andeq	r1, r1, ip, asr #27
   1180c:	andeq	r1, r1, ip, lsr fp
   11810:	andeq	r1, r1, r0, lsr fp
   11814:	andeq	r1, r1, r4, lsr #22
   11818:	andeq	r1, r1, ip, ror #21
   1181c:	andeq	r1, r1, r0, asr #18
   11820:	andeq	r1, r1, r8, lsr #18
   11824:	muleq	r1, r4, r9
   11828:	andeq	r1, r1, r0, lsl #19
   1182c:	ldrdeq	r1, [r1], -r0
   11830:	andeq	r1, r1, ip, asr #27
   11834:	andeq	r1, r1, r0, asr #23
   11838:			; <UNDEFINED> instruction: 0x00011bb4
   1183c:	muleq	r1, r4, fp
   11840:	andeq	r1, r1, r4, lsl #23
   11844:	andeq	r1, r1, ip, asr #27
   11848:	andeq	r1, r1, ip, asr fp
   1184c:	andeq	r1, r1, ip, ror #17
   11850:	andeq	r1, r1, r8, asr #22
   11854:	andeq	r1, r1, r0, asr #21
   11858:	muleq	r1, r4, sl
   1185c:	andeq	r1, r1, ip, asr #27
   11860:	andeq	r1, r1, r4, lsr #20
   11864:	andeq	r1, r1, r0, lsl #20
   11868:	andeq	r1, r1, ip, ror #19
   1186c:	andeq	r1, r1, r0, ror #19
   11870:	ldrdeq	r1, [r1], -r4
   11874:	andeq	r1, r1, ip, asr #27
   11878:	andeq	r1, r1, ip, asr #27
   1187c:	andeq	r1, r1, ip, asr #27
   11880:	andeq	r1, r1, ip, asr #27
   11884:	andeq	r1, r1, ip, asr #27
   11888:	andeq	r1, r1, ip, asr #27
   1188c:	andeq	r1, r1, ip, asr #27
   11890:	andeq	r1, r1, ip, asr #27
   11894:	andeq	r1, r1, ip, asr #27
   11898:	andeq	r1, r1, ip, asr #27
   1189c:	andeq	r1, r1, ip, asr #27
   118a0:	andeq	r1, r1, ip, asr #27
   118a4:	andeq	r1, r1, ip, asr #27
   118a8:	andeq	r1, r1, ip, asr #27
   118ac:	andeq	r1, r1, ip, asr #27
   118b0:	andeq	r1, r1, ip, asr #27
   118b4:	andeq	r1, r1, ip, asr #27
   118b8:	andeq	r1, r1, ip, asr #27
   118bc:	andeq	r1, r1, ip, asr #27
   118c0:	andeq	r1, r1, ip, asr #27
   118c4:	andeq	r1, r1, ip, asr #27
   118c8:	andeq	r1, r1, ip, asr #27
   118cc:	andeq	r1, r1, ip, asr #27
   118d0:	andeq	r1, r1, ip, asr #27
   118d4:	andeq	r1, r1, ip, asr #27
   118d8:	andeq	r1, r1, ip, asr #27
   118dc:	andeq	r1, r1, ip, asr #27
   118e0:	andeq	r1, r1, r4, lsr #19
   118e4:	andeq	r1, r1, r0, ror #21
   118e8:	ldrdeq	r1, [r1], -r4
   118ec:	ldr	sl, [r5]
   118f0:	cmp	sl, #0
   118f4:	beq	11914 <bfd_arch_bits_per_address@plt+0x24c>
   118f8:	mov	r1, #47	; 0x2f
   118fc:	mov	r0, sl
   11900:	bl	1156c <strchr@plt>
   11904:	subs	r1, r0, #0
   11908:	mov	r0, sl
   1190c:	movne	r1, #2
   11910:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11914:	ldr	r3, [r4, #4]
   11918:	orr	r6, r6, #2
   1191c:	orr	r3, r3, #2
   11920:	str	r3, [r4, #4]
   11924:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11928:	movw	sl, #30448	; 0x76f0
   1192c:	movt	sl, #3
   11930:	ldr	r0, [sl]
   11934:	mov	r1, #0
   11938:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   1193c:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11940:	movw	sl, #30448	; 0x76f0
   11944:	movt	sl, #3
   11948:	ldr	r0, [sl]
   1194c:	mov	r1, #1
   11950:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11954:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11958:	ldr	r0, [r5]
   1195c:	cmp	r0, #0
   11960:	beq	1196c <bfd_arch_bits_per_address@plt+0x2a4>
   11964:	mov	r1, #8
   11968:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   1196c:	ldr	r3, [r4, #4]
   11970:	orr	r6, r6, #16
   11974:	orr	r3, r3, #16
   11978:	str	r3, [r4, #4]
   1197c:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11980:	movw	r3, #30440	; 0x76e8
   11984:	movt	r3, #3
   11988:	mov	r1, #0
   1198c:	ldr	r0, [r3]
   11990:	bl	19680 <bfd_arch_bits_per_address@plt+0x7fb8>
   11994:	ldr	r0, [r5]
   11998:	mov	r1, #5
   1199c:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   119a0:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   119a4:	ldr	r0, [r5]
   119a8:	mov	fp, #1
   119ac:	movw	sl, #30448	; 0x76f0
   119b0:	str	fp, [r7, #12]
   119b4:	cmp	r0, #0
   119b8:	movt	sl, #3
   119bc:	beq	11754 <bfd_arch_bits_per_address@plt+0x8c>
   119c0:	bl	11338 <cplus_demangle_name_to_style@plt>
   119c4:	cmp	r0, #0
   119c8:	beq	12250 <bfd_arch_bits_per_address@plt+0xb88>
   119cc:	bl	113a4 <cplus_demangle_set_style@plt>
   119d0:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   119d4:	mov	r3, #0
   119d8:	str	r3, [r7, #8]
   119dc:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   119e0:	mov	r3, #1
   119e4:	str	r3, [r9]
   119e8:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   119ec:	movw	r3, #30464	; 0x7700
   119f0:	movt	r3, #3
   119f4:	mov	r2, #1
   119f8:	str	r2, [r3]
   119fc:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11a00:	ldr	r0, [r5]
   11a04:	mov	r1, #0
   11a08:	mov	r2, #10
   11a0c:	bl	1135c <strtol@plt>
   11a10:	cmp	r0, #0
   11a14:	strgt	r0, [r7, #4]
   11a18:	movle	r3, #1
   11a1c:	strle	r3, [r7, #4]
   11a20:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11a24:	mov	r2, #5
   11a28:	movw	r1, #13812	; 0x35f4
   11a2c:	mov	r0, #0
   11a30:	movt	r1, #2
   11a34:	bl	113e0 <dcgettext@plt>
   11a38:	movw	r2, #13828	; 0x3604
   11a3c:	movt	r2, #2
   11a40:	mov	r1, r0
   11a44:	mov	r0, #1
   11a48:	bl	115e4 <__printf_chk@plt>
   11a4c:	mov	r2, #5
   11a50:	movw	r1, #13856	; 0x3620
   11a54:	mov	r0, #0
   11a58:	movt	r1, #2
   11a5c:	bl	113e0 <dcgettext@plt>
   11a60:	mov	r1, r0
   11a64:	mov	r0, #1
   11a68:	bl	115e4 <__printf_chk@plt>
   11a6c:	mov	r2, #5
   11a70:	movw	r1, #13936	; 0x3670
   11a74:	mov	r0, #0
   11a78:	movt	r1, #2
   11a7c:	bl	113e0 <dcgettext@plt>
   11a80:	mov	r1, r0
   11a84:	mov	r0, #1
   11a88:	bl	115e4 <__printf_chk@plt>
   11a8c:	mov	r0, #0
   11a90:	bl	11530 <exit@plt>
   11a94:	mov	r2, #10
   11a98:	ldr	r0, [r5]
   11a9c:	mov	r1, #0
   11aa0:	bl	1135c <strtol@plt>
   11aa4:	movw	r3, #29032	; 0x7168
   11aa8:	movt	r3, #3
   11aac:	cmp	r0, #0
   11ab0:	strge	r0, [r3]
   11ab4:	movlt	r2, #0
   11ab8:	strlt	r2, [r3]
   11abc:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11ac0:	ldr	r3, [r4, #4]
   11ac4:	orr	r6, r6, #4
   11ac8:	orr	r3, r3, #4
   11acc:	str	r3, [r4, #4]
   11ad0:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11ad4:	mov	r3, #1
   11ad8:	str	r3, [r4, #40]	; 0x28
   11adc:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11ae0:	mov	r3, #0
   11ae4:	str	r3, [r7, #12]
   11ae8:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11aec:	ldr	r0, [r5]
   11af0:	cmp	r0, #0
   11af4:	beq	11f64 <bfd_arch_bits_per_address@plt+0x89c>
   11af8:	mov	r1, #0
   11afc:	mov	r2, #10
   11b00:	bl	1135c <strtol@plt>
   11b04:	ldr	r3, [r4, #12]
   11b08:	orr	r3, r3, #1
   11b0c:	orr	r0, r3, r0
   11b10:	str	r0, [r4, #12]
   11b14:	tst	r0, #1
   11b18:	beq	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11b1c:	mov	r2, r0
   11b20:	b	11f70 <bfd_arch_bits_per_address@plt+0x8a8>
   11b24:	mov	r3, #1
   11b28:	str	r3, [r4, #8]
   11b2c:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11b30:	mov	r3, #0
   11b34:	str	r3, [r7]
   11b38:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11b3c:	mov	r3, #1
   11b40:	str	r3, [r4]
   11b44:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11b48:	ldr	r3, [r4, #4]
   11b4c:	orr	r6, r6, #64	; 0x40
   11b50:	orr	r3, r3, #64	; 0x40
   11b54:	str	r3, [r4, #4]
   11b58:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11b5c:	ldr	r0, [r5]
   11b60:	cmp	r0, #0
   11b64:	beq	11b70 <bfd_arch_bits_per_address@plt+0x4a8>
   11b68:	mov	r1, #4
   11b6c:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11b70:	ldr	r3, [r4, #4]
   11b74:	orr	r6, r6, #1
   11b78:	orr	r3, r3, #1
   11b7c:	str	r3, [r4, #4]
   11b80:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11b84:	ldr	r0, [r5]
   11b88:	mov	r1, #6
   11b8c:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11b90:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11b94:	ldr	r0, [r5]
   11b98:	mov	r1, #0
   11b9c:	mov	r2, #10
   11ba0:	bl	11554 <strtoul@plt>
   11ba4:	movw	r3, #29028	; 0x7164
   11ba8:	movt	r3, #3
   11bac:	str	r0, [r3]
   11bb0:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11bb4:	mov	r3, #1
   11bb8:	str	r3, [r4, #20]
   11bbc:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11bc0:	ldr	r0, [r5]
   11bc4:	mov	r1, #3
   11bc8:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11bcc:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11bd0:	ldr	r3, [r4, #4]
   11bd4:	orr	r6, r6, #32
   11bd8:	orr	r3, r3, #32
   11bdc:	str	r3, [r4, #4]
   11be0:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11be4:	ldr	r0, [r5]
   11be8:	cmp	r0, #0
   11bec:	beq	11f54 <bfd_arch_bits_per_address@plt+0x88c>
   11bf0:	mov	r1, #11
   11bf4:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11bf8:	ldr	r3, [r4, #4]
   11bfc:	orr	r3, r3, #8
   11c00:	str	r3, [r4, #4]
   11c04:	b	11d3c <bfd_arch_bits_per_address@plt+0x674>
   11c08:	mov	r3, #1
   11c0c:	str	r3, [r4, #36]	; 0x24
   11c10:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11c14:	ldr	r3, [r4, #12]
   11c18:	ldr	r2, [r5]
   11c1c:	tst	r3, #128	; 0x80
   11c20:	str	r2, [r4, #32]
   11c24:	beq	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11c28:	movw	r1, #13784	; 0x35d8
   11c2c:	mov	r0, #1
   11c30:	movt	r1, #2
   11c34:	bl	115e4 <__printf_chk@plt>
   11c38:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11c3c:	ldr	r1, [r5]
   11c40:	movw	r3, #31744	; 0x7c00
   11c44:	ldr	r2, [r4, #4]
   11c48:	movt	r3, #3
   11c4c:	orr	r6, r6, #128	; 0x80
   11c50:	orr	r2, r2, #128	; 0x80
   11c54:	str	r1, [r3]
   11c58:	str	r2, [r4, #4]
   11c5c:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11c60:	ldr	sl, [r5]
   11c64:	cmp	sl, #0
   11c68:	beq	121c8 <bfd_arch_bits_per_address@plt+0xb00>
   11c6c:	mov	r1, #47	; 0x2f
   11c70:	mov	r0, sl
   11c74:	bl	1156c <strchr@plt>
   11c78:	cmp	r0, #0
   11c7c:	mov	r0, sl
   11c80:	movne	r1, #3
   11c84:	moveq	r1, #1
   11c88:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11c8c:	ldr	r3, [r4, #4]
   11c90:	orr	r3, r3, #2
   11c94:	str	r3, [r4, #4]
   11c98:	orr	r6, r6, #2
   11c9c:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11ca0:	ldr	r0, [r5]
   11ca4:	cmp	r0, #0
   11ca8:	beq	11f94 <bfd_arch_bits_per_address@plt+0x8cc>
   11cac:	mov	r1, #5
   11cb0:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11cb4:	ldr	r3, [r4, #4]
   11cb8:	orr	r3, r3, #1
   11cbc:	str	r3, [r4, #4]
   11cc0:	orr	r6, r6, #1
   11cc4:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11cc8:	ldr	r3, [r5]
   11ccc:	movw	sl, #30448	; 0x76f0
   11cd0:	movt	sl, #3
   11cd4:	ldrb	r3, [r3]
   11cd8:	cmp	r3, #98	; 0x62
   11cdc:	beq	121b0 <bfd_arch_bits_per_address@plt+0xae8>
   11ce0:	bhi	11f38 <bfd_arch_bits_per_address@plt+0x870>
   11ce4:	cmp	r3, #52	; 0x34
   11ce8:	beq	121bc <bfd_arch_bits_per_address@plt+0xaf4>
   11cec:	cmp	r3, #97	; 0x61
   11cf0:	bne	12160 <bfd_arch_bits_per_address@plt+0xa98>
   11cf4:	mov	r3, #0
   11cf8:	str	r3, [r4, #28]
   11cfc:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11d00:	ldr	r0, [r5]
   11d04:	mov	r1, #7
   11d08:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11d0c:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11d10:	mov	r3, #1
   11d14:	str	r3, [r4, #24]
   11d18:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11d1c:	ldr	r0, [r5]
   11d20:	cmp	r0, #0
   11d24:	beq	11f84 <bfd_arch_bits_per_address@plt+0x8bc>
   11d28:	mov	r1, #9
   11d2c:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11d30:	ldr	r3, [r4, #4]
   11d34:	orr	r3, r3, #16
   11d38:	str	r3, [r4, #4]
   11d3c:	orr	r6, r6, #16
   11d40:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11d44:	movw	r0, #30596	; 0x7784
   11d48:	ldr	r1, [r5]
   11d4c:	movt	r0, #3
   11d50:	bl	1b27c <bfd_arch_bits_per_address@plt+0x9bb4>
   11d54:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11d58:	ldr	r0, [r5]
   11d5c:	mov	r1, #4
   11d60:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11d64:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11d68:	ldr	r0, [r5]
   11d6c:	mov	r1, #6
   11d70:	movw	sl, #30448	; 0x76f0
   11d74:	movt	sl, #3
   11d78:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11d7c:	b	11930 <bfd_arch_bits_per_address@plt+0x268>
   11d80:	ldr	r0, [r5]
   11d84:	mov	r1, #7
   11d88:	movw	sl, #30448	; 0x76f0
   11d8c:	movt	sl, #3
   11d90:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11d94:	b	11948 <bfd_arch_bits_per_address@plt+0x280>
   11d98:	mov	r3, #1
   11d9c:	str	r3, [r4, #16]
   11da0:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11da4:	ldr	r0, [r5]
   11da8:	cmp	r0, #0
   11dac:	beq	11db8 <bfd_arch_bits_per_address@plt+0x6f0>
   11db0:	mov	r1, #10
   11db4:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11db8:	ldr	r3, [r4, #4]
   11dbc:	orr	r6, r6, #8
   11dc0:	orr	r3, r3, #8
   11dc4:	str	r3, [r4, #4]
   11dc8:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11dcc:	movw	r3, #30432	; 0x76e0
   11dd0:	movt	r3, #3
   11dd4:	mov	r1, #1
   11dd8:	ldr	r0, [r3]
   11ddc:	bl	19680 <bfd_arch_bits_per_address@plt+0x7fb8>
   11de0:	and	r3, r6, #192	; 0xc0
   11de4:	cmp	r3, #192	; 0xc0
   11de8:	beq	12290 <bfd_arch_bits_per_address@plt+0xbc8>
   11dec:	movw	r5, #30524	; 0x773c
   11df0:	movt	r5, #3
   11df4:	movw	r0, #14196	; 0x3774
   11df8:	movt	r0, #2
   11dfc:	ldr	r3, [r5, #4]
   11e00:	tst	r3, #4
   11e04:	movne	r3, #1
   11e08:	strne	r3, [r5, #20]
   11e0c:	bl	114d0 <getenv@plt>
   11e10:	subs	r1, r0, #0
   11e14:	beq	11e24 <bfd_arch_bits_per_address@plt+0x75c>
   11e18:	movw	r0, #30596	; 0x7784
   11e1c:	movt	r0, #3
   11e20:	bl	1b27c <bfd_arch_bits_per_address@plt+0x9bb4>
   11e24:	movw	r7, #29912	; 0x74d8
   11e28:	movt	r7, #3
   11e2c:	ldr	r2, [sp, #12]
   11e30:	ldr	r3, [r7]
   11e34:	cmp	r3, r2
   11e38:	blt	11efc <bfd_arch_bits_per_address@plt+0x834>
   11e3c:	movw	r9, #29036	; 0x716c
   11e40:	movt	r9, #3
   11e44:	ldr	r0, [r9, #696]	; 0x2b8
   11e48:	cmp	r0, #0
   11e4c:	ldrne	r4, [pc, #1116]	; 122b0 <bfd_arch_bits_per_address@plt+0xbe8>
   11e50:	beq	11e80 <bfd_arch_bits_per_address@plt+0x7b8>
   11e54:	mov	r1, #7
   11e58:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11e5c:	ldr	r0, [r4, #4]
   11e60:	mov	r1, #1
   11e64:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11e68:	ldr	r0, [r4, #4]!
   11e6c:	mov	r1, #5
   11e70:	bl	1bc60 <bfd_arch_bits_per_address@plt+0xa598>
   11e74:	ldr	r0, [r4, #4]
   11e78:	cmp	r0, #0
   11e7c:	bne	11e54 <bfd_arch_bits_per_address@plt+0x78c>
   11e80:	ldr	r0, [r9, #688]	; 0x2b0
   11e84:	bl	1724c <bfd_arch_bits_per_address@plt+0x5b84>
   11e88:	ldr	r3, [r5, #8]
   11e8c:	cmp	r3, #0
   11e90:	bne	120f4 <bfd_arch_bits_per_address@plt+0xa2c>
   11e94:	ldr	r0, [r5, #32]
   11e98:	movw	r3, #30524	; 0x773c
   11e9c:	movt	r3, #3
   11ea0:	cmp	r0, #0
   11ea4:	beq	120e0 <bfd_arch_bits_per_address@plt+0xa18>
   11ea8:	bl	177c0 <bfd_arch_bits_per_address@plt+0x60f8>
   11eac:	bl	1bcb8 <bfd_arch_bits_per_address@plt+0xa5f0>
   11eb0:	ldr	r3, [r5, #28]
   11eb4:	cmp	r3, #4
   11eb8:	movwne	r4, #29912	; 0x74d8
   11ebc:	ldrne	r0, [r9, #692]	; 0x2b4
   11ec0:	movtne	r4, #3
   11ec4:	beq	12234 <bfd_arch_bits_per_address@plt+0xb6c>
   11ec8:	bl	188b8 <bfd_arch_bits_per_address@plt+0x71f0>
   11ecc:	ldr	r2, [r7]
   11ed0:	ldr	r1, [sp, #12]
   11ed4:	movw	r3, #29912	; 0x74d8
   11ed8:	movt	r3, #3
   11edc:	cmp	r2, r1
   11ee0:	bge	11fa4 <bfd_arch_bits_per_address@plt+0x8dc>
   11ee4:	ldr	r1, [sp, #8]
   11ee8:	add	r3, r2, #1
   11eec:	ldr	r0, [r1, r2, lsl #2]
   11ef0:	str	r3, [r4]
   11ef4:	str	r0, [r9, #692]	; 0x2b4
   11ef8:	b	11ec8 <bfd_arch_bits_per_address@plt+0x800>
   11efc:	ldr	r1, [sp, #8]
   11f00:	add	r0, r3, #1
   11f04:	cmp	r2, r0
   11f08:	str	r0, [r7]
   11f0c:	lsl	r2, r3, #2
   11f10:	movw	r9, #29036	; 0x716c
   11f14:	ldr	r0, [r1, r3, lsl #2]
   11f18:	movt	r9, #3
   11f1c:	addgt	r1, r1, r2
   11f20:	addgt	r3, r3, #2
   11f24:	strgt	r3, [r7]
   11f28:	str	r0, [r9, #688]	; 0x2b0
   11f2c:	ldrgt	r3, [r1, #4]
   11f30:	strgt	r3, [r9, #692]	; 0x2b4
   11f34:	b	11e44 <bfd_arch_bits_per_address@plt+0x77c>
   11f38:	cmp	r3, #109	; 0x6d
   11f3c:	beq	121a4 <bfd_arch_bits_per_address@plt+0xadc>
   11f40:	cmp	r3, #112	; 0x70
   11f44:	bne	12160 <bfd_arch_bits_per_address@plt+0xa98>
   11f48:	mov	r3, #4
   11f4c:	str	r3, [r4, #28]
   11f50:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11f54:	ldr	r3, [r4, #4]
   11f58:	bic	r3, r3, #8
   11f5c:	str	r3, [r4, #4]
   11f60:	b	11d3c <bfd_arch_bits_per_address@plt+0x674>
   11f64:	mvn	r0, #0
   11f68:	str	r0, [r4, #12]
   11f6c:	mov	r2, r0
   11f70:	movw	r1, #13728	; 0x35a0
   11f74:	mov	r0, #1
   11f78:	movt	r1, #2
   11f7c:	bl	115e4 <__printf_chk@plt>
   11f80:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   11f84:	ldr	r3, [r4, #4]
   11f88:	bic	r3, r3, #16
   11f8c:	str	r3, [r4, #4]
   11f90:	b	11d3c <bfd_arch_bits_per_address@plt+0x674>
   11f94:	ldr	r3, [r4, #4]
   11f98:	bic	r3, r3, #1
   11f9c:	str	r3, [r4, #4]
   11fa0:	b	11cc0 <bfd_arch_bits_per_address@plt+0x5f8>
   11fa4:	ldr	r0, [r5, #4]
   11fa8:	add	r2, r2, #1
   11fac:	movw	r1, #30524	; 0x773c
   11fb0:	movw	r4, #30520	; 0x7738
   11fb4:	cmp	r0, #0
   11fb8:	str	r2, [r3]
   11fbc:	movt	r4, #3
   11fc0:	movt	r1, #3
   11fc4:	bne	12004 <bfd_arch_bits_per_address@plt+0x93c>
   11fc8:	ldr	r3, [r4]
   11fcc:	tst	r3, #3
   11fd0:	moveq	r3, #8
   11fd4:	streq	r3, [r1, #4]
   11fd8:	beq	11ff8 <bfd_arch_bits_per_address@plt+0x930>
   11fdc:	tst	r3, #1
   11fe0:	movne	r2, #1
   11fe4:	strne	r2, [r1, #4]
   11fe8:	tst	r3, #2
   11fec:	ldrne	r3, [r5, #4]
   11ff0:	orrne	r3, r3, #2
   11ff4:	strne	r3, [r5, #4]
   11ff8:	ldr	r3, [r5, #4]
   11ffc:	bic	r6, r3, r6
   12000:	str	r6, [r5, #4]
   12004:	ldr	r3, [r5, #4]
   12008:	tst	r3, #4
   1200c:	bne	1213c <bfd_arch_bits_per_address@plt+0xa74>
   12010:	ldr	r3, [r4]
   12014:	tst	r3, #1
   12018:	bne	12134 <bfd_arch_bits_per_address@plt+0xa6c>
   1201c:	ldr	r3, [r4]
   12020:	ands	r6, r3, #2
   12024:	bne	12128 <bfd_arch_bits_per_address@plt+0xa60>
   12028:	ldr	r3, [r5, #4]
   1202c:	tst	r3, #1
   12030:	beq	12040 <bfd_arch_bits_per_address@plt+0x978>
   12034:	ldr	r2, [r4]
   12038:	ands	r0, r2, #1
   1203c:	beq	1221c <bfd_arch_bits_per_address@plt+0xb54>
   12040:	tst	r3, #2
   12044:	beq	12068 <bfd_arch_bits_per_address@plt+0x9a0>
   12048:	ldr	r3, [r4]
   1204c:	ands	r0, r3, #2
   12050:	beq	121e4 <bfd_arch_bits_per_address@plt+0xb1c>
   12054:	cmp	r6, #0
   12058:	beq	12068 <bfd_arch_bits_per_address@plt+0x9a0>
   1205c:	ldr	r3, [r5, #36]	; 0x24
   12060:	cmp	r3, #0
   12064:	bne	12154 <bfd_arch_bits_per_address@plt+0xa8c>
   12068:	ldr	r3, [r5, #4]
   1206c:	tst	r3, #1
   12070:	bne	12110 <bfd_arch_bits_per_address@plt+0xa48>
   12074:	cmp	r6, #0
   12078:	beq	120a0 <bfd_arch_bits_per_address@plt+0x9d8>
   1207c:	ldr	r3, [r5, #4]
   12080:	movw	r2, #30524	; 0x773c
   12084:	movt	r2, #3
   12088:	tst	r3, #2
   1208c:	beq	120a0 <bfd_arch_bits_per_address@plt+0x9d8>
   12090:	ldr	r3, [r2, #36]	; 0x24
   12094:	cmp	r3, #0
   12098:	beq	121d8 <bfd_arch_bits_per_address@plt+0xb10>
   1209c:	bl	15e18 <bfd_arch_bits_per_address@plt+0x4750>
   120a0:	ldr	r3, [r5, #4]
   120a4:	tst	r3, #8
   120a8:	bne	12120 <bfd_arch_bits_per_address@plt+0xa58>
   120ac:	ldr	r3, [r5, #4]
   120b0:	tst	r3, #16
   120b4:	bne	12118 <bfd_arch_bits_per_address@plt+0xa50>
   120b8:	ldr	r3, [r5, #4]
   120bc:	tst	r3, #64	; 0x40
   120c0:	bne	12108 <bfd_arch_bits_per_address@plt+0xa40>
   120c4:	ldr	r3, [r5, #4]
   120c8:	tst	r3, #128	; 0x80
   120cc:	beq	120d4 <bfd_arch_bits_per_address@plt+0xa0c>
   120d0:	bl	1689c <bfd_arch_bits_per_address@plt+0x51d4>
   120d4:	mov	r0, #0
   120d8:	add	sp, sp, #20
   120dc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   120e0:	ldr	r3, [r3, #20]
   120e4:	cmp	r3, #0
   120e8:	beq	1214c <bfd_arch_bits_per_address@plt+0xa84>
   120ec:	bl	17f24 <bfd_arch_bits_per_address@plt+0x685c>
   120f0:	b	11eac <bfd_arch_bits_per_address@plt+0x7e4>
   120f4:	movw	r3, #31720	; 0x7be8
   120f8:	movt	r3, #3
   120fc:	ldr	r0, [r3]
   12100:	bl	17510 <bfd_arch_bits_per_address@plt+0x5e48>
   12104:	b	11e94 <bfd_arch_bits_per_address@plt+0x7cc>
   12108:	bl	1629c <bfd_arch_bits_per_address@plt+0x4bd4>
   1210c:	b	120c4 <bfd_arch_bits_per_address@plt+0x9fc>
   12110:	bl	19f3c <bfd_arch_bits_per_address@plt+0x8874>
   12114:	b	12074 <bfd_arch_bits_per_address@plt+0x9ac>
   12118:	bl	12ed0 <bfd_arch_bits_per_address@plt+0x1808>
   1211c:	b	120b8 <bfd_arch_bits_per_address@plt+0x9f0>
   12120:	bl	12c4c <bfd_arch_bits_per_address@plt+0x1584>
   12124:	b	120ac <bfd_arch_bits_per_address@plt+0x9e4>
   12128:	bl	13a20 <bfd_arch_bits_per_address@plt+0x2358>
   1212c:	mov	r6, r0
   12130:	b	12028 <bfd_arch_bits_per_address@plt+0x960>
   12134:	bl	19994 <bfd_arch_bits_per_address@plt+0x82cc>
   12138:	b	1201c <bfd_arch_bits_per_address@plt+0x954>
   1213c:	movw	r0, #14260	; 0x37b4
   12140:	movt	r0, #2
   12144:	bl	1923c <bfd_arch_bits_per_address@plt+0x7b74>
   12148:	b	12010 <bfd_arch_bits_per_address@plt+0x948>
   1214c:	bl	17ad8 <bfd_arch_bits_per_address@plt+0x6410>
   12150:	b	11eac <bfd_arch_bits_per_address@plt+0x7e4>
   12154:	mov	r0, r6
   12158:	bl	15338 <bfd_arch_bits_per_address@plt+0x3c70>
   1215c:	b	12068 <bfd_arch_bits_per_address@plt+0x9a0>
   12160:	movw	r3, #30432	; 0x76e0
   12164:	movt	r3, #3
   12168:	mov	r2, #5
   1216c:	movw	r1, #13756	; 0x35bc
   12170:	mov	r0, #0
   12174:	movt	r1, #2
   12178:	ldr	r4, [r3]
   1217c:	bl	113e0 <dcgettext@plt>
   12180:	ldr	ip, [r8]
   12184:	mov	r1, #1
   12188:	ldr	r3, [sl]
   1218c:	str	ip, [sp]
   12190:	mov	r2, r0
   12194:	mov	r0, r4
   12198:	bl	115fc <__fprintf_chk@plt>
   1219c:	mov	r0, #1
   121a0:	bl	11530 <exit@plt>
   121a4:	mov	r3, #1
   121a8:	str	r3, [r4, #28]
   121ac:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   121b0:	mov	r3, #2
   121b4:	str	r3, [r4, #28]
   121b8:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   121bc:	mov	r3, #3
   121c0:	str	r3, [r4, #28]
   121c4:	b	11754 <bfd_arch_bits_per_address@plt+0x8c>
   121c8:	ldr	r3, [r4, #4]
   121cc:	bic	r3, r3, #2
   121d0:	str	r3, [r4, #4]
   121d4:	b	11c98 <bfd_arch_bits_per_address@plt+0x5d0>
   121d8:	mov	r0, r6
   121dc:	bl	15338 <bfd_arch_bits_per_address@plt+0x3c70>
   121e0:	b	1209c <bfd_arch_bits_per_address@plt+0x9d4>
   121e4:	movw	r3, #30432	; 0x76e0
   121e8:	movt	r3, #3
   121ec:	movw	r1, #14312	; 0x37e8
   121f0:	movt	r1, #2
   121f4:	ldr	r4, [r3]
   121f8:	mov	r2, #5
   121fc:	bl	113e0 <dcgettext@plt>
   12200:	ldr	r3, [r8]
   12204:	mov	r1, #1
   12208:	mov	r2, r0
   1220c:	mov	r0, r4
   12210:	bl	115fc <__fprintf_chk@plt>
   12214:	mov	r0, #1
   12218:	bl	11530 <exit@plt>
   1221c:	movw	r3, #30432	; 0x76e0
   12220:	movt	r3, #3
   12224:	movw	r1, #14272	; 0x37c0
   12228:	movt	r1, #2
   1222c:	ldr	r4, [r3]
   12230:	b	121f8 <bfd_arch_bits_per_address@plt+0xb30>
   12234:	movw	r3, #30432	; 0x76e0
   12238:	movt	r3, #3
   1223c:	movw	r1, #14208	; 0x3780
   12240:	mov	r0, #0
   12244:	ldr	r4, [r3]
   12248:	movt	r1, #2
   1224c:	b	121f8 <bfd_arch_bits_per_address@plt+0xb30>
   12250:	movw	r3, #30432	; 0x76e0
   12254:	movt	r3, #3
   12258:	mov	r2, #5
   1225c:	movw	r1, #14012	; 0x36bc
   12260:	movt	r1, #2
   12264:	ldr	r4, [r3]
   12268:	bl	113e0 <dcgettext@plt>
   1226c:	ldr	ip, [sl]
   12270:	ldr	r3, [r8]
   12274:	mov	r1, fp
   12278:	str	ip, [sp]
   1227c:	mov	r2, r0
   12280:	mov	r0, r4
   12284:	bl	115fc <__fprintf_chk@plt>
   12288:	mov	r0, fp
   1228c:	bl	11644 <xexit@plt>
   12290:	movw	r3, #30432	; 0x76e0
   12294:	movt	r3, #3
   12298:	movw	r1, #14120	; 0x3728
   1229c:	mov	r0, sl
   122a0:	ldr	r4, [r3]
   122a4:	movt	r1, #2
   122a8:	b	121f8 <bfd_arch_bits_per_address@plt+0xb30>
   122ac:	andeq	r7, r3, ip, ror r1
   122b0:	andeq	r7, r3, r0, lsr #8
   122b4:	mov	fp, #0
   122b8:	mov	lr, #0
   122bc:	pop	{r1}		; (ldr r1, [sp], #4)
   122c0:	mov	r2, sp
   122c4:	push	{r2}		; (str r2, [sp, #-4]!)
   122c8:	push	{r0}		; (str r0, [sp, #-4]!)
   122cc:	ldr	ip, [pc, #16]	; 122e4 <bfd_arch_bits_per_address@plt+0xc1c>
   122d0:	push	{ip}		; (str ip, [sp, #-4]!)
   122d4:	ldr	r0, [pc, #12]	; 122e8 <bfd_arch_bits_per_address@plt+0xc20>
   122d8:	ldr	r3, [pc, #12]	; 122ec <bfd_arch_bits_per_address@plt+0xc24>
   122dc:	bl	1150c <__libc_start_main@plt>
   122e0:	bl	116bc <abort@plt>
   122e4:	andeq	r2, r2, r4, ror #1
   122e8:	ldrdeq	r1, [r1], -r8
   122ec:	andeq	r2, r2, r0, lsl #1
   122f0:	ldr	r3, [pc, #20]	; 1230c <bfd_arch_bits_per_address@plt+0xc44>
   122f4:	ldr	r2, [pc, #20]	; 12310 <bfd_arch_bits_per_address@plt+0xc48>
   122f8:	add	r3, pc, r3
   122fc:	ldr	r2, [r3, r2]
   12300:	cmp	r2, #0
   12304:	bxeq	lr
   12308:	b	11518 <__gmon_start__@plt>
   1230c:	andeq	r4, r2, r0, lsl #26
   12310:	andeq	r0, r0, r4, asr r1
   12314:	push	{r3, lr}
   12318:	movw	r0, #29900	; 0x74cc
   1231c:	ldr	r3, [pc, #36]	; 12348 <bfd_arch_bits_per_address@plt+0xc80>
   12320:	movt	r0, #3
   12324:	rsb	r3, r0, r3
   12328:	cmp	r3, #6
   1232c:	popls	{r3, pc}
   12330:	movw	r3, #0
   12334:	movt	r3, #0
   12338:	cmp	r3, #0
   1233c:	popeq	{r3, pc}
   12340:	blx	r3
   12344:	pop	{r3, pc}
   12348:	andeq	r7, r3, pc, asr #9
   1234c:	push	{r3, lr}
   12350:	movw	r0, #29900	; 0x74cc
   12354:	movw	r3, #29900	; 0x74cc
   12358:	movt	r0, #3
   1235c:	movt	r3, #3
   12360:	rsb	r3, r0, r3
   12364:	asr	r3, r3, #2
   12368:	add	r3, r3, r3, lsr #31
   1236c:	asrs	r1, r3, #1
   12370:	popeq	{r3, pc}
   12374:	movw	r2, #0
   12378:	movt	r2, #0
   1237c:	cmp	r2, #0
   12380:	popeq	{r3, pc}
   12384:	blx	r2
   12388:	pop	{r3, pc}
   1238c:	push	{r4, lr}
   12390:	movw	r4, #30452	; 0x76f4
   12394:	movt	r4, #3
   12398:	ldrb	r3, [r4]
   1239c:	cmp	r3, #0
   123a0:	popne	{r4, pc}
   123a4:	bl	12314 <bfd_arch_bits_per_address@plt+0xc4c>
   123a8:	mov	r3, #1
   123ac:	strb	r3, [r4]
   123b0:	pop	{r4, pc}
   123b4:	movw	r0, #28404	; 0x6ef4
   123b8:	movt	r0, #3
   123bc:	push	{r3, lr}
   123c0:	ldr	r3, [r0]
   123c4:	cmp	r3, #0
   123c8:	beq	123e0 <bfd_arch_bits_per_address@plt+0xd18>
   123cc:	movw	r3, #0
   123d0:	movt	r3, #0
   123d4:	cmp	r3, #0
   123d8:	beq	123e0 <bfd_arch_bits_per_address@plt+0xd18>
   123dc:	blx	r3
   123e0:	pop	{r3, lr}
   123e4:	b	1234c <bfd_arch_bits_per_address@plt+0xc84>
   123e8:	ldr	r3, [r0]
   123ec:	ldr	r2, [r1]
   123f0:	cmp	r3, #0
   123f4:	beq	12424 <bfd_arch_bits_per_address@plt+0xd5c>
   123f8:	cmp	r2, #0
   123fc:	beq	1242c <bfd_arch_bits_per_address@plt+0xd64>
   12400:	ldr	r0, [r3, #32]
   12404:	ldr	r1, [r2, #32]
   12408:	cmp	r0, r1
   1240c:	bcc	12424 <bfd_arch_bits_per_address@plt+0xd5c>
   12410:	bhi	1242c <bfd_arch_bits_per_address@plt+0xd64>
   12414:	ldr	r0, [r3, #24]
   12418:	ldr	r3, [r2, #24]
   1241c:	rsb	r0, r3, r0
   12420:	bx	lr
   12424:	mov	r0, #1
   12428:	bx	lr
   1242c:	mvn	r0, #0
   12430:	bx	lr
   12434:	push	{r3, r4, r5, lr}
   12438:	ldr	r4, [r0]
   1243c:	ldr	r5, [r1]
   12440:	ldr	r3, [r4, #20]
   12444:	cmp	r3, #0
   12448:	beq	12484 <bfd_arch_bits_per_address@plt+0xdbc>
   1244c:	ldr	r2, [r5, #20]
   12450:	cmp	r2, #0
   12454:	beq	12484 <bfd_arch_bits_per_address@plt+0xdbc>
   12458:	ldr	r0, [r3, #4]
   1245c:	ldr	r1, [r2, #4]
   12460:	bl	11398 <filename_cmp@plt>
   12464:	cmp	r0, #0
   12468:	popne	{r3, r4, r5, pc}
   1246c:	ldr	r0, [r4, #24]
   12470:	ldr	r3, [r5, #24]
   12474:	cmp	r0, r3
   12478:	beq	12484 <bfd_arch_bits_per_address@plt+0xdbc>
   1247c:	rsb	r0, r3, r0
   12480:	pop	{r3, r4, r5, pc}
   12484:	ldrd	r0, [r4]
   12488:	ldrd	r2, [r5]
   1248c:	cmp	r1, r3
   12490:	cmpeq	r0, r2
   12494:	bcc	124a4 <bfd_arch_bits_per_address@plt+0xddc>
   12498:	movls	r0, #0
   1249c:	movhi	r0, #1
   124a0:	pop	{r3, r4, r5, pc}
   124a4:	mvn	r0, #0
   124a8:	pop	{r3, r4, r5, pc}
   124ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124b0:	movw	r4, #29904	; 0x74d0
   124b4:	sub	sp, sp, #332	; 0x14c
   124b8:	movt	r4, #3
   124bc:	ldr	ip, [r3, #12]
   124c0:	str	r0, [sp, #20]
   124c4:	ldr	r0, [r4]
   124c8:	cmp	ip, r2
   124cc:	str	r4, [sp, #12]
   124d0:	str	r1, [sp, #16]
   124d4:	str	r0, [sp, #324]	; 0x144
   124d8:	bge	1251c <bfd_arch_bits_per_address@plt+0xe54>
   124dc:	ldr	ip, [sp, #16]
   124e0:	cmp	ip, #0
   124e4:	beq	12508 <bfd_arch_bits_per_address@plt+0xe40>
   124e8:	ldr	ip, [sp, #20]
   124ec:	mov	r2, #32
   124f0:	ldr	r4, [sp, #16]
   124f4:	add	r1, r4, ip
   124f8:	mov	r3, ip
   124fc:	strb	r2, [r3], #1
   12500:	cmp	r3, r1
   12504:	bne	124fc <bfd_arch_bits_per_address@plt+0xe34>
   12508:	ldr	ip, [sp, #20]
   1250c:	mov	r3, #0
   12510:	ldr	r4, [sp, #16]
   12514:	strb	r3, [ip, r4]
   12518:	b	12664 <bfd_arch_bits_per_address@plt+0xf9c>
   1251c:	ldr	r3, [r3, #20]
   12520:	sub	r2, r2, #-1073741823	; 0xc0000001
   12524:	ldr	r7, [r3, r2, lsl #2]
   12528:	cmp	r7, #0
   1252c:	beq	124dc <bfd_arch_bits_per_address@plt+0xe14>
   12530:	movw	r6, #30456	; 0x76f8
   12534:	ldrb	r1, [r7, #28]
   12538:	movt	r6, #3
   1253c:	mov	r3, #0
   12540:	ands	r4, r1, #1
   12544:	strb	r3, [sp, #24]
   12548:	ldr	r3, [r6]
   1254c:	add	r3, r3, #1
   12550:	str	r3, [r6]
   12554:	bne	12754 <bfd_arch_bits_per_address@plt+0x108c>
   12558:	ldr	ip, [r6, #8]
   1255c:	cmp	ip, #0
   12560:	bne	12680 <bfd_arch_bits_per_address@plt+0xfb8>
   12564:	add	fp, sp, #24
   12568:	ldrd	r2, [r7, #40]	; 0x28
   1256c:	mov	r1, ip
   12570:	mov	r5, ip
   12574:	mov	r4, fp
   12578:	mvn	sl, #0
   1257c:	mov	r9, #0
   12580:	mov	r8, r7
   12584:	b	12590 <bfd_arch_bits_per_address@plt+0xec8>
   12588:	ldrd	r2, [r7, #40]	; 0x28
   1258c:	mov	r1, #1
   12590:	orrs	r0, r2, r3
   12594:	beq	12610 <bfd_arch_bits_per_address@plt+0xf48>
   12598:	cmp	r1, #0
   1259c:	ldr	r3, [r8, #120]	; 0x78
   125a0:	moveq	r5, #0
   125a4:	cmp	ip, #0
   125a8:	add	r5, r5, r3
   125ac:	str	r3, [r6, #4]
   125b0:	beq	125bc <bfd_arch_bits_per_address@plt+0xef4>
   125b4:	cmp	sl, r3
   125b8:	beq	125f8 <bfd_arch_bits_per_address@plt+0xf30>
   125bc:	cmp	r4, fp
   125c0:	mvn	r2, #0
   125c4:	movhi	r1, #44	; 0x2c
   125c8:	strbhi	r1, [r4]
   125cc:	addhi	r4, r4, #1
   125d0:	str	r3, [sp]
   125d4:	mov	r1, #1
   125d8:	movw	r3, #8440	; 0x20f8
   125dc:	mov	r0, r4
   125e0:	movt	r3, #2
   125e4:	bl	11590 <__sprintf_chk@plt>
   125e8:	mov	r0, r4
   125ec:	bl	11560 <strlen@plt>
   125f0:	ldmib	r6, {sl, ip}
   125f4:	add	r4, r4, r0
   125f8:	add	r9, r9, #1
   125fc:	add	r7, r7, #8
   12600:	cmp	r9, #10
   12604:	add	r8, r8, #4
   12608:	bne	12588 <bfd_arch_bits_per_address@plt+0xec0>
   1260c:	mov	r1, #1
   12610:	cmp	ip, #0
   12614:	beq	12620 <bfd_arch_bits_per_address@plt+0xf58>
   12618:	cmp	r4, fp
   1261c:	beq	126b4 <bfd_arch_bits_per_address@plt+0xfec>
   12620:	cmp	r1, #0
   12624:	bne	126e4 <bfd_arch_bits_per_address@plt+0x101c>
   12628:	ldr	r4, [sp, #16]
   1262c:	cmp	r4, #0
   12630:	beq	12654 <bfd_arch_bits_per_address@plt+0xf8c>
   12634:	ldr	r4, [sp, #20]
   12638:	mov	r2, #32
   1263c:	ldr	ip, [sp, #16]
   12640:	add	r1, ip, r4
   12644:	mov	r3, r4
   12648:	strb	r2, [r3], #1
   1264c:	cmp	r3, r1
   12650:	bne	12648 <bfd_arch_bits_per_address@plt+0xf80>
   12654:	ldr	r4, [sp, #20]
   12658:	mov	r3, #0
   1265c:	ldr	ip, [sp, #16]
   12660:	strb	r3, [r4, ip]
   12664:	ldr	r4, [sp, #12]
   12668:	ldr	r2, [sp, #324]	; 0x144
   1266c:	ldr	r3, [r4]
   12670:	cmp	r2, r3
   12674:	bne	12844 <bfd_arch_bits_per_address@plt+0x117c>
   12678:	add	sp, sp, #332	; 0x14c
   1267c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12680:	ldrd	r2, [r7, #40]	; 0x28
   12684:	orrs	r0, r2, r3
   12688:	beq	1269c <bfd_arch_bits_per_address@plt+0xfd4>
   1268c:	ldrd	r0, [r7]
   12690:	cmp	r3, r1
   12694:	cmpeq	r2, r0
   12698:	bhi	127fc <bfd_arch_bits_per_address@plt+0x1134>
   1269c:	add	fp, sp, #24
   126a0:	mov	r1, r4
   126a4:	mov	r5, r4
   126a8:	mvn	sl, #0
   126ac:	mov	r4, fp
   126b0:	b	1257c <bfd_arch_bits_per_address@plt+0xeb4>
   126b4:	ldr	ip, [r6, #4]
   126b8:	mov	r0, r4
   126bc:	mov	r1, #1
   126c0:	mvn	r2, #0
   126c4:	movw	r3, #8440	; 0x20f8
   126c8:	movt	r3, #2
   126cc:	str	ip, [sp]
   126d0:	bl	11590 <__sprintf_chk@plt>
   126d4:	mov	r0, r4
   126d8:	bl	11560 <strlen@plt>
   126dc:	ldr	r5, [r6, #4]
   126e0:	add	r4, r4, r0
   126e4:	movw	r3, #29028	; 0x7164
   126e8:	movt	r3, #3
   126ec:	ldr	r2, [r6, #12]
   126f0:	ldr	r3, [r3]
   126f4:	add	r2, r2, #1
   126f8:	str	r2, [r6, #12]
   126fc:	cmp	r3, r5
   12700:	bhi	127e0 <bfd_arch_bits_per_address@plt+0x1118>
   12704:	movw	r3, #8452	; 0x2104
   12708:	movt	r3, #2
   1270c:	mov	r2, r4
   12710:	ldr	ip, [sp, #16]
   12714:	ldr	r0, [r3]
   12718:	ldrb	r3, [r3, #4]
   1271c:	str	r0, [r4]
   12720:	strb	r3, [r2, #4]!
   12724:	rsb	r2, fp, r2
   12728:	cmp	ip, r2
   1272c:	bhi	127a0 <bfd_arch_bits_per_address@plt+0x10d8>
   12730:	mov	r2, ip
   12734:	mov	r1, fp
   12738:	ldr	r0, [sp, #20]
   1273c:	bl	115c0 <strncpy@plt>
   12740:	ldr	ip, [sp, #20]
   12744:	ldr	r4, [sp, #16]
   12748:	mov	r3, #0
   1274c:	strb	r3, [ip, r4]
   12750:	b	12664 <bfd_arch_bits_per_address@plt+0xf9c>
   12754:	ldr	r2, [r7, #32]
   12758:	add	fp, sp, #24
   1275c:	mov	r1, #1
   12760:	movw	r3, #8440	; 0x20f8
   12764:	mov	r0, fp
   12768:	movt	r3, #2
   1276c:	str	r2, [sp]
   12770:	mov	r2, #300	; 0x12c
   12774:	bl	11590 <__sprintf_chk@plt>
   12778:	mov	r0, fp
   1277c:	bl	11560 <strlen@plt>
   12780:	ldr	r5, [r7, #32]
   12784:	ldrd	r2, [r7, #40]	; 0x28
   12788:	mov	r1, #1
   1278c:	ldr	ip, [r6, #8]
   12790:	str	r5, [r6, #4]
   12794:	mov	sl, r5
   12798:	add	r4, fp, r0
   1279c:	b	1257c <bfd_arch_bits_per_address@plt+0xeb4>
   127a0:	ldr	ip, [sp, #16]
   127a4:	mov	r1, fp
   127a8:	rsb	r4, r2, ip
   127ac:	ldr	ip, [sp, #20]
   127b0:	add	r2, ip, r4
   127b4:	mov	r0, r2
   127b8:	bl	11488 <strcpy@plt>
   127bc:	cmp	r4, #0
   127c0:	mov	r2, r0
   127c4:	beq	12664 <bfd_arch_bits_per_address@plt+0xf9c>
   127c8:	ldr	r3, [sp, #20]
   127cc:	mov	r1, #32
   127d0:	strb	r1, [r3], #1
   127d4:	cmp	r3, r2
   127d8:	bne	127d0 <bfd_arch_bits_per_address@plt+0x1108>
   127dc:	b	12664 <bfd_arch_bits_per_address@plt+0xf9c>
   127e0:	movw	r3, #8444	; 0x20fc
   127e4:	movt	r3, #2
   127e8:	add	r4, fp, #5
   127ec:	ldm	r3, {r0, r1}
   127f0:	str	r0, [sp, #24]
   127f4:	strh	r1, [sp, #28]
   127f8:	b	12704 <bfd_arch_bits_per_address@plt+0x103c>
   127fc:	ldr	r2, [r6, #4]
   12800:	add	fp, sp, #24
   12804:	mov	r1, #1
   12808:	movw	r3, #8440	; 0x20f8
   1280c:	mov	r0, fp
   12810:	movt	r3, #2
   12814:	str	r2, [sp]
   12818:	mov	r2, #300	; 0x12c
   1281c:	bl	11590 <__sprintf_chk@plt>
   12820:	mov	r0, fp
   12824:	bl	11560 <strlen@plt>
   12828:	ldr	r5, [r6, #4]
   1282c:	ldrd	r2, [r7, #40]	; 0x28
   12830:	mov	r1, #1
   12834:	ldr	ip, [r6, #8]
   12838:	mov	sl, r5
   1283c:	add	r4, fp, r0
   12840:	b	1257c <bfd_arch_bits_per_address@plt+0xeb4>
   12844:	bl	113ec <__stack_chk_fail@plt>
   12848:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1284c:	movw	r4, #29904	; 0x74d0
   12850:	movt	r4, #3
   12854:	sub	sp, sp, #68	; 0x44
   12858:	mov	r6, r0
   1285c:	ldr	r3, [r4]
   12860:	str	r1, [sp, #28]
   12864:	add	r1, sp, #32
   12868:	str	r4, [sp, #24]
   1286c:	str	r3, [sp, #60]	; 0x3c
   12870:	bl	185e8 <bfd_arch_bits_per_address@plt+0x6f20>
   12874:	cmp	r0, #0
   12878:	bne	12af8 <bfd_arch_bits_per_address@plt+0x1430>
   1287c:	movw	r3, #31720	; 0x7be8
   12880:	movt	r3, #3
   12884:	add	r0, sp, #32
   12888:	movw	r8, #30516	; 0x7734
   1288c:	ldr	r3, [r3]
   12890:	movt	r8, #3
   12894:	ldr	r3, [r3, #4]
   12898:	ldr	r3, [r3, #40]	; 0x28
   1289c:	blx	r3
   128a0:	ldr	r3, [r8]
   128a4:	cmp	r3, #0
   128a8:	str	r0, [sp, #32]
   128ac:	beq	129ac <bfd_arch_bits_per_address@plt+0x12e4>
   128b0:	cmp	r0, #0
   128b4:	beq	12990 <bfd_arch_bits_per_address@plt+0x12c8>
   128b8:	movw	r9, #30544	; 0x7750
   128bc:	movw	fp, #30456	; 0x76f8
   128c0:	movw	r5, #31748	; 0x7c04
   128c4:	movt	r9, #3
   128c8:	movt	fp, #3
   128cc:	movt	r5, #3
   128d0:	mov	r7, #0
   128d4:	movw	r4, #30432	; 0x76e0
   128d8:	movt	r4, #3
   128dc:	str	r4, [sp, #20]
   128e0:	ldr	r3, [r8]
   128e4:	cmp	r3, #0
   128e8:	bne	129c8 <bfd_arch_bits_per_address@plt+0x1300>
   128ec:	mov	r2, #1
   128f0:	add	r0, sp, #48	; 0x30
   128f4:	mov	r1, #8
   128f8:	mov	r3, r6
   128fc:	bl	114a0 <fread@plt>
   12900:	cmp	r0, #1
   12904:	mov	r2, r0
   12908:	bne	129f0 <bfd_arch_bits_per_address@plt+0x1328>
   1290c:	add	r0, sp, #40	; 0x28
   12910:	mov	r1, #8
   12914:	mov	r3, r6
   12918:	bl	114a0 <fread@plt>
   1291c:	cmp	r0, #1
   12920:	bne	129f0 <bfd_arch_bits_per_address@plt+0x1328>
   12924:	mov	r0, r6
   12928:	bl	115d8 <fgetc@plt>
   1292c:	add	r0, r0, #1
   12930:	cmp	r0, #1
   12934:	bhi	12924 <bfd_arch_bits_per_address@plt+0x125c>
   12938:	mov	r0, r6
   1293c:	bl	115d8 <fgetc@plt>
   12940:	add	r0, r0, #1
   12944:	cmp	r0, #1
   12948:	bhi	12938 <bfd_arch_bits_per_address@plt+0x1270>
   1294c:	add	r0, sp, #36	; 0x24
   12950:	mov	r1, #4
   12954:	mov	r2, #1
   12958:	mov	r3, r6
   1295c:	bl	114a0 <fread@plt>
   12960:	cmp	r0, #1
   12964:	bne	129f0 <bfd_arch_bits_per_address@plt+0x1328>
   12968:	ldr	r3, [r9]
   1296c:	cmp	r3, #0
   12970:	bne	12a00 <bfd_arch_bits_per_address@plt+0x1338>
   12974:	ldr	r0, [fp, #16]
   12978:	cmp	r0, #0
   1297c:	beq	12a8c <bfd_arch_bits_per_address@plt+0x13c4>
   12980:	ldr	r3, [sp, #32]
   12984:	add	r7, r7, #1
   12988:	cmp	r3, r7
   1298c:	bhi	128e0 <bfd_arch_bits_per_address@plt+0x1218>
   12990:	ldr	r4, [sp, #24]
   12994:	ldr	r2, [sp, #60]	; 0x3c
   12998:	ldr	r3, [r4]
   1299c:	cmp	r2, r3
   129a0:	bne	12b44 <bfd_arch_bits_per_address@plt+0x147c>
   129a4:	add	sp, sp, #68	; 0x44
   129a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129ac:	mov	r0, r6
   129b0:	bl	115d8 <fgetc@plt>
   129b4:	add	r0, r0, #1
   129b8:	cmp	r0, #1
   129bc:	bhi	129ac <bfd_arch_bits_per_address@plt+0x12e4>
   129c0:	ldr	r0, [sp, #32]
   129c4:	b	128b0 <bfd_arch_bits_per_address@plt+0x11e8>
   129c8:	mov	r0, r6
   129cc:	add	r1, sp, #40	; 0x28
   129d0:	bl	1866c <bfd_arch_bits_per_address@plt+0x6fa4>
   129d4:	cmp	r0, #0
   129d8:	bne	129f0 <bfd_arch_bits_per_address@plt+0x1328>
   129dc:	mov	r0, r6
   129e0:	add	r1, sp, #48	; 0x30
   129e4:	bl	1866c <bfd_arch_bits_per_address@plt+0x6fa4>
   129e8:	cmp	r0, #0
   129ec:	beq	12968 <bfd_arch_bits_per_address@plt+0x12a0>
   129f0:	ldr	r0, [sp, #28]
   129f4:	bl	11428 <perror@plt>
   129f8:	mov	r0, #1
   129fc:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   12a00:	movw	r0, #31768	; 0x7c18
   12a04:	ldrd	r2, [sp, #40]	; 0x28
   12a08:	movt	r0, #3
   12a0c:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   12a10:	subs	r4, r0, #0
   12a14:	beq	12980 <bfd_arch_bits_per_address@plt+0x12b8>
   12a18:	movw	r3, #30536	; 0x7748
   12a1c:	movt	r3, #3
   12a20:	ldr	r3, [r3]
   12a24:	tst	r3, #2048	; 0x800
   12a28:	bne	12ac4 <bfd_arch_bits_per_address@plt+0x13fc>
   12a2c:	ldrd	r0, [sp, #40]	; 0x28
   12a30:	mov	sl, r4
   12a34:	mov	ip, #0
   12a38:	str	r4, [sp, #16]
   12a3c:	b	12a5c <bfd_arch_bits_per_address@plt+0x1394>
   12a40:	cmp	r3, r1
   12a44:	cmpeq	r2, r0
   12a48:	beq	12a68 <bfd_arch_bits_per_address@plt+0x13a0>
   12a4c:	add	ip, ip, #1
   12a50:	add	sl, sl, #8
   12a54:	cmp	ip, #10
   12a58:	beq	12980 <bfd_arch_bits_per_address@plt+0x12b8>
   12a5c:	ldrd	r2, [sl, #40]	; 0x28
   12a60:	orrs	r4, r2, r3
   12a64:	bne	12a40 <bfd_arch_bits_per_address@plt+0x1378>
   12a68:	ldr	r4, [sp, #16]
   12a6c:	ldr	r3, [sp, #48]	; 0x30
   12a70:	add	r2, r4, ip, lsl #3
   12a74:	add	ip, r4, ip, lsl #2
   12a78:	strd	r0, [r2, #40]	; 0x28
   12a7c:	ldr	r2, [ip, #120]	; 0x78
   12a80:	add	r3, r2, r3
   12a84:	str	r3, [ip, #120]	; 0x78
   12a88:	b	12980 <bfd_arch_bits_per_address@plt+0x12b8>
   12a8c:	ldr	ip, [sp, #20]
   12a90:	mov	r2, #5
   12a94:	movw	r1, #8536	; 0x2158
   12a98:	movt	r1, #2
   12a9c:	mov	r4, #1
   12aa0:	str	r4, [fp, #16]
   12aa4:	ldr	sl, [ip]
   12aa8:	bl	113e0 <dcgettext@plt>
   12aac:	mov	r1, r4
   12ab0:	ldr	r3, [r5]
   12ab4:	mov	r2, r0
   12ab8:	mov	r0, sl
   12abc:	bl	115fc <__fprintf_chk@plt>
   12ac0:	b	12980 <bfd_arch_bits_per_address@plt+0x12b8>
   12ac4:	ldr	ip, [r4, #16]
   12ac8:	movw	r1, #8492	; 0x212c
   12acc:	ldr	r3, [r4]
   12ad0:	movt	r1, #2
   12ad4:	ldr	r2, [sp, #40]	; 0x28
   12ad8:	mov	r0, #1
   12adc:	str	ip, [sp]
   12ae0:	ldr	ip, [sp, #48]	; 0x30
   12ae4:	ldr	lr, [r4, #24]
   12ae8:	str	ip, [sp, #8]
   12aec:	str	lr, [sp, #4]
   12af0:	bl	115e4 <__printf_chk@plt>
   12af4:	b	12a2c <bfd_arch_bits_per_address@plt+0x1364>
   12af8:	movw	r3, #30432	; 0x76e0
   12afc:	movt	r3, #3
   12b00:	mov	r2, #5
   12b04:	movw	r1, #8460	; 0x210c
   12b08:	mov	r0, #0
   12b0c:	movt	r1, #2
   12b10:	ldr	r4, [r3]
   12b14:	bl	113e0 <dcgettext@plt>
   12b18:	ldr	ip, [sp, #28]
   12b1c:	movw	r3, #31748	; 0x7c04
   12b20:	movt	r3, #3
   12b24:	mov	r1, #1
   12b28:	ldr	r3, [r3]
   12b2c:	str	ip, [sp]
   12b30:	mov	r2, r0
   12b34:	mov	r0, r4
   12b38:	bl	115fc <__fprintf_chk@plt>
   12b3c:	mov	r0, #1
   12b40:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   12b44:	bl	113ec <__stack_chk_fail@plt>
   12b48:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12b4c:	movw	r9, #31768	; 0x7c18
   12b50:	movt	r9, #3
   12b54:	mov	sl, r1
   12b58:	mov	r7, r0
   12b5c:	mov	r4, #0
   12b60:	ldr	lr, [r9, #4]
   12b64:	ldr	r1, [r9, #8]
   12b68:	cmp	lr, r1
   12b6c:	bcs	12ba4 <bfd_arch_bits_per_address@plt+0x14dc>
   12b70:	mov	ip, lr
   12b74:	mov	r0, #0
   12b78:	ldrd	r2, [ip, #40]	; 0x28
   12b7c:	orrs	r5, r2, r3
   12b80:	beq	12b94 <bfd_arch_bits_per_address@plt+0x14cc>
   12b84:	add	r0, r0, #1
   12b88:	add	ip, ip, #8
   12b8c:	cmp	r0, #10
   12b90:	bne	12b78 <bfd_arch_bits_per_address@plt+0x14b0>
   12b94:	add	lr, lr, #264	; 0x108
   12b98:	add	r4, r4, r0
   12b9c:	cmp	lr, r1
   12ba0:	bcc	12b70 <bfd_arch_bits_per_address@plt+0x14a8>
   12ba4:	mov	r0, r7
   12ba8:	mov	r1, #2
   12bac:	bl	1883c <bfd_arch_bits_per_address@plt+0x7174>
   12bb0:	cmp	r0, #0
   12bb4:	bne	12c3c <bfd_arch_bits_per_address@plt+0x1574>
   12bb8:	mov	r1, r4
   12bbc:	mov	r0, r7
   12bc0:	bl	18764 <bfd_arch_bits_per_address@plt+0x709c>
   12bc4:	cmp	r0, #0
   12bc8:	bne	12c3c <bfd_arch_bits_per_address@plt+0x1574>
   12bcc:	ldr	r8, [r9, #4]
   12bd0:	ldr	r3, [r9, #8]
   12bd4:	cmp	r8, r3
   12bd8:	popcs	{r4, r5, r6, r7, r8, r9, sl, pc}
   12bdc:	mov	r4, r8
   12be0:	mov	r5, r8
   12be4:	mov	r6, #10
   12be8:	ldrd	r2, [r4, #40]	; 0x28
   12bec:	orrs	r1, r2, r3
   12bf0:	beq	12c28 <bfd_arch_bits_per_address@plt+0x1560>
   12bf4:	mov	r0, r7
   12bf8:	bl	187dc <bfd_arch_bits_per_address@plt+0x7114>
   12bfc:	subs	r3, r0, #0
   12c00:	bne	12c3c <bfd_arch_bits_per_address@plt+0x1574>
   12c04:	mov	r0, r7
   12c08:	ldr	r2, [r5, #120]	; 0x78
   12c0c:	bl	187dc <bfd_arch_bits_per_address@plt+0x7114>
   12c10:	cmp	r0, #0
   12c14:	bne	12c3c <bfd_arch_bits_per_address@plt+0x1574>
   12c18:	subs	r6, r6, #1
   12c1c:	add	r4, r4, #8
   12c20:	add	r5, r5, #4
   12c24:	bne	12be8 <bfd_arch_bits_per_address@plt+0x1520>
   12c28:	ldr	r3, [r9, #8]
   12c2c:	add	r8, r8, #264	; 0x108
   12c30:	cmp	r3, r8
   12c34:	bhi	12bdc <bfd_arch_bits_per_address@plt+0x1514>
   12c38:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c3c:	mov	r0, sl
   12c40:	bl	11428 <perror@plt>
   12c44:	mov	r0, #1
   12c48:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   12c4c:	movw	r3, #29848	; 0x7498
   12c50:	movt	r3, #3
   12c54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c58:	sub	sp, sp, #36	; 0x24
   12c5c:	ldr	r2, [r3]
   12c60:	cmp	r2, #0
   12c64:	beq	12e9c <bfd_arch_bits_per_address@plt+0x17d4>
   12c68:	mov	r2, #0
   12c6c:	str	r2, [r3]
   12c70:	movw	r5, #31768	; 0x7c18
   12c74:	movt	r5, #3
   12c78:	ldr	r0, [r5]
   12c7c:	lsl	r0, r0, #2
   12c80:	bl	11458 <xmalloc@plt>
   12c84:	ldr	r4, [r5, #4]
   12c88:	ldr	r3, [r5, #8]
   12c8c:	cmp	r4, r3
   12c90:	str	r0, [sp, #28]
   12c94:	bcs	12eac <bfd_arch_bits_per_address@plt+0x17e4>
   12c98:	ldr	r6, [pc, #548]	; 12ec4 <bfd_arch_bits_per_address@plt+0x17fc>
   12c9c:	mov	sl, #0
   12ca0:	mov	r7, r0
   12ca4:	b	12cc0 <bfd_arch_bits_per_address@plt+0x15f8>
   12ca8:	str	r4, [r7, sl, lsl #2]
   12cac:	add	sl, sl, #1
   12cb0:	ldr	r3, [r5, #8]
   12cb4:	add	r4, r4, #264	; 0x108
   12cb8:	cmp	r3, r4
   12cbc:	bls	12d04 <bfd_arch_bits_per_address@plt+0x163c>
   12cc0:	ldr	r0, [pc, #512]	; 12ec8 <bfd_arch_bits_per_address@plt+0x1800>
   12cc4:	ldrd	r2, [r4]
   12cc8:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   12ccc:	cmp	r0, #0
   12cd0:	bne	12ca8 <bfd_arch_bits_per_address@plt+0x15e0>
   12cd4:	ldr	r3, [r6, #120]	; 0x78
   12cd8:	cmp	r3, #0
   12cdc:	bne	12cb0 <bfd_arch_bits_per_address@plt+0x15e8>
   12ce0:	ldr	r0, [pc, #484]	; 12ecc <bfd_arch_bits_per_address@plt+0x1804>
   12ce4:	ldrd	r2, [r4]
   12ce8:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   12cec:	cmp	r0, #0
   12cf0:	beq	12ca8 <bfd_arch_bits_per_address@plt+0x15e0>
   12cf4:	ldr	r3, [r5, #8]
   12cf8:	add	r4, r4, #264	; 0x108
   12cfc:	cmp	r3, r4
   12d00:	bhi	12cc0 <bfd_arch_bits_per_address@plt+0x15f8>
   12d04:	movw	r3, #9268	; 0x2434
   12d08:	ldr	r0, [sp, #28]
   12d0c:	movt	r3, #1
   12d10:	mov	r1, sl
   12d14:	mov	r2, #4
   12d18:	bl	11674 <qsort@plt>
   12d1c:	cmp	sl, #0
   12d20:	beq	12e5c <bfd_arch_bits_per_address@plt+0x1794>
   12d24:	ldr	r3, [sp, #28]
   12d28:	movw	r9, #29044	; 0x7174
   12d2c:	movt	r9, #3
   12d30:	str	sl, [sp, #24]
   12d34:	sub	ip, r3, #4
   12d38:	mov	fp, #0
   12d3c:	mov	sl, ip
   12d40:	ldr	r5, [sl, #4]!
   12d44:	ldr	r3, [r5, #32]
   12d48:	cmp	r3, #0
   12d4c:	bne	12d5c <bfd_arch_bits_per_address@plt+0x1694>
   12d50:	ldr	r3, [r9]
   12d54:	cmp	r3, #0
   12d58:	bne	12dac <bfd_arch_bits_per_address@plt+0x16e4>
   12d5c:	movw	r1, #8608	; 0x21a0
   12d60:	mov	r0, #0
   12d64:	movt	r1, #2
   12d68:	mov	r2, #5
   12d6c:	bl	113e0 <dcgettext@plt>
   12d70:	mov	r4, r0
   12d74:	ldr	r0, [r5, #20]
   12d78:	cmp	r0, #0
   12d7c:	beq	12e84 <bfd_arch_bits_per_address@plt+0x17bc>
   12d80:	ldr	r2, [r0, #4]
   12d84:	ldr	lr, [r5, #16]
   12d88:	mov	r1, r4
   12d8c:	ldr	r3, [r5, #24]
   12d90:	mov	r0, #1
   12d94:	str	lr, [sp]
   12d98:	ldr	lr, [r5]
   12d9c:	str	lr, [sp, #4]
   12da0:	ldr	lr, [r5, #32]
   12da4:	str	lr, [sp, #8]
   12da8:	bl	115e4 <__printf_chk@plt>
   12dac:	add	r8, r5, #80	; 0x50
   12db0:	mov	r6, r5
   12db4:	mov	r7, r5
   12db8:	str	sl, [sp, #20]
   12dbc:	str	fp, [sp, #16]
   12dc0:	ldrd	sl, [r6, #40]	; 0x28
   12dc4:	movw	r1, #8608	; 0x21a0
   12dc8:	mov	r2, #5
   12dcc:	mov	r0, #0
   12dd0:	orrs	fp, sl, fp
   12dd4:	movt	r1, #2
   12dd8:	beq	12e44 <bfd_arch_bits_per_address@plt+0x177c>
   12ddc:	ldr	r3, [r7, #120]	; 0x78
   12de0:	cmp	r3, #0
   12de4:	bne	12df4 <bfd_arch_bits_per_address@plt+0x172c>
   12de8:	ldr	r3, [r9]
   12dec:	cmp	r3, #0
   12df0:	bne	12e34 <bfd_arch_bits_per_address@plt+0x176c>
   12df4:	bl	113e0 <dcgettext@plt>
   12df8:	mov	r4, r0
   12dfc:	ldr	r0, [r5, #20]
   12e00:	cmp	r0, #0
   12e04:	beq	12e6c <bfd_arch_bits_per_address@plt+0x17a4>
   12e08:	ldr	r2, [r0, #4]
   12e0c:	ldr	lr, [r5, #16]
   12e10:	mov	r0, #1
   12e14:	ldr	r3, [r5, #24]
   12e18:	mov	r1, r4
   12e1c:	str	lr, [sp]
   12e20:	ldr	lr, [r6, #40]	; 0x28
   12e24:	str	lr, [sp, #4]
   12e28:	ldr	lr, [r7, #120]	; 0x78
   12e2c:	str	lr, [sp, #8]
   12e30:	bl	115e4 <__printf_chk@plt>
   12e34:	add	r6, r6, #8
   12e38:	add	r7, r7, #4
   12e3c:	cmp	r6, r8
   12e40:	bne	12dc0 <bfd_arch_bits_per_address@plt+0x16f8>
   12e44:	ldr	fp, [sp, #16]
   12e48:	ldr	r3, [sp, #24]
   12e4c:	add	fp, fp, #1
   12e50:	ldr	sl, [sp, #20]
   12e54:	cmp	fp, r3
   12e58:	bne	12d40 <bfd_arch_bits_per_address@plt+0x1678>
   12e5c:	ldr	r0, [sp, #28]
   12e60:	add	sp, sp, #36	; 0x24
   12e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e68:	b	11374 <free@plt>
   12e6c:	mov	r2, #5
   12e70:	movw	r1, #8644	; 0x21c4
   12e74:	movt	r1, #2
   12e78:	bl	113e0 <dcgettext@plt>
   12e7c:	mov	r2, r0
   12e80:	b	12e0c <bfd_arch_bits_per_address@plt+0x1744>
   12e84:	mov	r2, #5
   12e88:	movw	r1, #8644	; 0x21c4
   12e8c:	movt	r1, #2
   12e90:	bl	113e0 <dcgettext@plt>
   12e94:	mov	r2, r0
   12e98:	b	12d84 <bfd_arch_bits_per_address@plt+0x16bc>
   12e9c:	movw	r0, #8604	; 0x219c
   12ea0:	movt	r0, #2
   12ea4:	bl	114e8 <puts@plt>
   12ea8:	b	12c70 <bfd_arch_bits_per_address@plt+0x15a8>
   12eac:	movw	r3, #9268	; 0x2434
   12eb0:	mov	r1, #0
   12eb4:	movt	r3, #1
   12eb8:	mov	r2, #4
   12ebc:	bl	11674 <qsort@plt>
   12ec0:	b	12e5c <bfd_arch_bits_per_address@plt+0x1794>
   12ec4:	andeq	r7, r3, r4, lsr #24
   12ec8:	muleq	r3, ip, ip
   12ecc:	andeq	r7, r3, r8, lsr #25
   12ed0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12ed4:	vpush	{d8}
   12ed8:	movw	r7, #31768	; 0x7c18
   12edc:	movt	r7, #3
   12ee0:	sub	sp, sp, #8
   12ee4:	ldr	r4, [r7, #4]
   12ee8:	ldr	r3, [r7, #8]
   12eec:	cmp	r4, r3
   12ef0:	ldrcc	r5, [pc, #1192]	; 133a0 <bfd_arch_bits_per_address@plt+0x1cd8>
   12ef4:	bcc	12f0c <bfd_arch_bits_per_address@plt+0x1844>
   12ef8:	b	12f58 <bfd_arch_bits_per_address@plt+0x1890>
   12efc:	ldr	r3, [r7, #8]
   12f00:	add	r4, r4, #264	; 0x108
   12f04:	cmp	r3, r4
   12f08:	bls	12f58 <bfd_arch_bits_per_address@plt+0x1890>
   12f0c:	ldr	r3, [r4, #20]
   12f10:	cmp	r3, #0
   12f14:	beq	12efc <bfd_arch_bits_per_address@plt+0x1834>
   12f18:	ldr	r3, [r3, #12]
   12f1c:	ldr	r2, [r4, #24]
   12f20:	cmp	r2, r3
   12f24:	ble	12efc <bfd_arch_bits_per_address@plt+0x1834>
   12f28:	ldr	r0, [pc, #1140]	; 133a4 <bfd_arch_bits_per_address@plt+0x1cdc>
   12f2c:	ldrd	r2, [r4]
   12f30:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   12f34:	cmp	r0, #0
   12f38:	beq	13340 <bfd_arch_bits_per_address@plt+0x1c78>
   12f3c:	ldr	r3, [r4, #20]
   12f40:	add	r4, r4, #264	; 0x108
   12f44:	ldr	r2, [r4, #-240]	; 0xffffff10
   12f48:	str	r2, [r3, #12]
   12f4c:	ldr	r3, [r7, #8]
   12f50:	cmp	r3, r4
   12f54:	bhi	12f0c <bfd_arch_bits_per_address@plt+0x1844>
   12f58:	movw	r8, #30592	; 0x7780
   12f5c:	movt	r8, #3
   12f60:	ldr	r4, [r8]
   12f64:	cmp	r4, #0
   12f68:	beq	12fa0 <bfd_arch_bits_per_address@plt+0x18d8>
   12f6c:	ldr	r0, [r4, #12]
   12f70:	cmp	r0, #0
   12f74:	lsl	r0, r0, #2
   12f78:	ble	12f94 <bfd_arch_bits_per_address@plt+0x18cc>
   12f7c:	bl	11458 <xmalloc@plt>
   12f80:	ldr	r2, [r4, #12]
   12f84:	mov	r1, #0
   12f88:	lsl	r2, r2, #2
   12f8c:	str	r0, [r4, #20]
   12f90:	bl	1159c <memset@plt>
   12f94:	ldr	r4, [r4]
   12f98:	cmp	r4, #0
   12f9c:	bne	12f6c <bfd_arch_bits_per_address@plt+0x18a4>
   12fa0:	ldr	r6, [r7, #4]
   12fa4:	ldr	r3, [r7, #8]
   12fa8:	cmp	r6, r3
   12fac:	bcs	13050 <bfd_arch_bits_per_address@plt+0x1988>
   12fb0:	ldr	r9, [pc, #1000]	; 133a0 <bfd_arch_bits_per_address@plt+0x1cd8>
   12fb4:	mov	r4, #0
   12fb8:	mov	r5, #0
   12fbc:	b	12fd0 <bfd_arch_bits_per_address@plt+0x1908>
   12fc0:	ldr	r3, [r7, #8]
   12fc4:	add	r6, r6, #264	; 0x108
   12fc8:	cmp	r3, r6
   12fcc:	bls	13050 <bfd_arch_bits_per_address@plt+0x1988>
   12fd0:	ldr	r3, [r6, #20]
   12fd4:	cmp	r3, #0
   12fd8:	beq	12fc0 <bfd_arch_bits_per_address@plt+0x18f8>
   12fdc:	ldr	r3, [r3, #12]
   12fe0:	cmp	r3, #0
   12fe4:	beq	12fc0 <bfd_arch_bits_per_address@plt+0x18f8>
   12fe8:	ldr	r0, [pc, #948]	; 133a4 <bfd_arch_bits_per_address@plt+0x1cdc>
   12fec:	ldrd	r2, [r6]
   12ff0:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   12ff4:	cmp	r0, #0
   12ff8:	beq	13364 <bfd_arch_bits_per_address@plt+0x1c9c>
   12ffc:	ldr	r3, [r6, #20]
   13000:	ldr	r0, [r6, #24]
   13004:	ldr	r1, [r6, #32]
   13008:	ldr	r2, [r3, #20]
   1300c:	sub	r0, r0, #-1073741823	; 0xc0000001
   13010:	ldr	ip, [r3, #8]
   13014:	ldr	sl, [r2, r0, lsl #2]
   13018:	add	ip, ip, r1
   1301c:	str	ip, [r3, #8]
   13020:	cmp	sl, #0
   13024:	beq	13388 <bfd_arch_bits_per_address@plt+0x1cc0>
   13028:	ldrd	r2, [sl]
   1302c:	orrs	r0, r2, r3
   13030:	bne	13300 <bfd_arch_bits_per_address@plt+0x1c38>
   13034:	ldr	r3, [sl, #32]
   13038:	add	r6, r6, #264	; 0x108
   1303c:	add	r1, r3, r1
   13040:	ldr	r3, [r7, #8]
   13044:	str	r1, [sl, #32]
   13048:	cmp	r3, r6
   1304c:	bhi	12fd0 <bfd_arch_bits_per_address@plt+0x1908>
   13050:	ldr	r4, [r8]
   13054:	cmp	r4, #0
   13058:	beq	132f4 <bfd_arch_bits_per_address@plt+0x1c2c>
   1305c:	movw	sl, #29044	; 0x7174
   13060:	movw	r7, #30456	; 0x76f8
   13064:	movw	r9, #29028	; 0x7164
   13068:	movt	sl, #3
   1306c:	movt	r7, #3
   13070:	movt	r9, #3
   13074:	vldr	d8, [pc, #788]	; 13390 <bfd_arch_bits_per_address@plt+0x1cc8>
   13078:	b	131e4 <bfd_arch_bits_per_address@plt+0x1b1c>
   1307c:	ldr	r0, [r4, #20]
   13080:	mov	r5, #0
   13084:	bl	11374 <free@plt>
   13088:	mov	r2, #5
   1308c:	str	r5, [r4, #20]
   13090:	mov	r0, r5
   13094:	movw	r1, #8708	; 0x2204
   13098:	movt	r1, #2
   1309c:	bl	113e0 <dcgettext@plt>
   130a0:	mov	r1, #1
   130a4:	mov	r2, r0
   130a8:	mov	r0, r6
   130ac:	bl	115fc <__fprintf_chk@plt>
   130b0:	mov	r2, #5
   130b4:	mov	r0, r5
   130b8:	movw	r1, #8732	; 0x221c
   130bc:	movt	r1, #2
   130c0:	bl	113e0 <dcgettext@plt>
   130c4:	ldr	r3, [r7]
   130c8:	mov	r1, #1
   130cc:	mov	r2, r0
   130d0:	mov	r0, r6
   130d4:	bl	115fc <__fprintf_chk@plt>
   130d8:	mov	r2, #5
   130dc:	mov	r0, r5
   130e0:	movw	r1, #8772	; 0x2244
   130e4:	movt	r1, #2
   130e8:	bl	113e0 <dcgettext@plt>
   130ec:	ldr	r3, [r7, #12]
   130f0:	mov	r1, #1
   130f4:	mov	r2, r0
   130f8:	mov	r0, r6
   130fc:	bl	115fc <__fprintf_chk@plt>
   13100:	mov	r2, #5
   13104:	mov	r0, r5
   13108:	movw	r1, #8796	; 0x225c
   1310c:	movt	r1, #2
   13110:	bl	113e0 <dcgettext@plt>
   13114:	ldr	r3, [r7]
   13118:	mov	r1, #1
   1311c:	cmp	r3, r5
   13120:	vldreq	d7, [pc, #616]	; 13390 <bfd_arch_bits_per_address@plt+0x1cc8>
   13124:	vmovne	s11, r3
   13128:	vcvtne.f64.s32	d6, s11
   1312c:	vldrne	s11, [r7, #12]
   13130:	mov	r2, r0
   13134:	mov	r0, r6
   13138:	vcvtne.f64.s32	d7, s11
   1313c:	vmulne.f64	d7, d7, d8
   13140:	vdivne.f64	d7, d7, d6
   13144:	vstr	d7, [sp]
   13148:	bl	115fc <__fprintf_chk@plt>
   1314c:	mov	r2, #5
   13150:	movw	r1, #8836	; 0x2284
   13154:	mov	r0, #0
   13158:	movt	r1, #2
   1315c:	bl	113e0 <dcgettext@plt>
   13160:	ldr	r3, [r4, #8]
   13164:	mov	r1, #1
   13168:	mov	r2, r0
   1316c:	mov	r0, r6
   13170:	bl	115fc <__fprintf_chk@plt>
   13174:	mov	r2, #5
   13178:	movw	r1, #8880	; 0x22b0
   1317c:	mov	r0, #0
   13180:	movt	r1, #2
   13184:	bl	113e0 <dcgettext@plt>
   13188:	ldr	r3, [r7]
   1318c:	mov	r1, #1
   13190:	cmp	r3, #0
   13194:	vldrne	s11, [r4, #8]
   13198:	vldreq	d7, [pc, #504]	; 13398 <bfd_arch_bits_per_address@plt+0x1cd0>
   1319c:	vmovne	s13, r3
   131a0:	vcvtne.f64.s32	d7, s13
   131a4:	mov	r2, r0
   131a8:	mov	r0, r6
   131ac:	vcvtne.f64.u32	d6, s11
   131b0:	vdivne.f64	d7, d6, d7
   131b4:	vstr	d7, [sp]
   131b8:	bl	115fc <__fprintf_chk@plt>
   131bc:	movw	r3, #30440	; 0x76e8
   131c0:	movt	r3, #3
   131c4:	ldr	r3, [r3]
   131c8:	cmp	r6, r3
   131cc:	beq	131d8 <bfd_arch_bits_per_address@plt+0x1b10>
   131d0:	mov	r0, r6
   131d4:	bl	11608 <fclose@plt>
   131d8:	ldr	r4, [r4]
   131dc:	cmp	r4, #0
   131e0:	beq	132f4 <bfd_arch_bits_per_address@plt+0x1c2c>
   131e4:	ldr	r3, [r4, #12]
   131e8:	cmp	r3, #0
   131ec:	beq	131d8 <bfd_arch_bits_per_address@plt+0x1b10>
   131f0:	ldr	r3, [sl]
   131f4:	cmp	r3, #0
   131f8:	beq	13208 <bfd_arch_bits_per_address@plt+0x1b40>
   131fc:	ldr	r3, [r4, #8]
   13200:	cmp	r3, #0
   13204:	beq	131d8 <bfd_arch_bits_per_address@plt+0x1b10>
   13208:	movw	r2, #9388	; 0x24ac
   1320c:	mov	r0, r4
   13210:	movt	r2, #1
   13214:	mov	r1, #16
   13218:	mov	r3, r4
   1321c:	mov	r5, #0
   13220:	str	r5, [r7, #12]
   13224:	str	r5, [r7]
   13228:	bl	1aeb8 <bfd_arch_bits_per_address@plt+0x97f0>
   1322c:	subs	r6, r0, #0
   13230:	beq	131d8 <bfd_arch_bits_per_address@plt+0x1b10>
   13234:	ldr	r3, [r9, #4]
   13238:	cmp	r3, r5
   1323c:	ble	1307c <bfd_arch_bits_per_address@plt+0x19b4>
   13240:	mov	r2, #5
   13244:	movw	r1, #8656	; 0x21d0
   13248:	mov	r0, r5
   1324c:	movt	r1, #2
   13250:	bl	113e0 <dcgettext@plt>
   13254:	mov	r1, #1
   13258:	ldr	r3, [r9, #4]
   1325c:	mov	r2, r0
   13260:	mov	r0, r6
   13264:	bl	115fc <__fprintf_chk@plt>
   13268:	ldr	r0, [r4, #20]
   1326c:	movw	r3, #9192	; 0x23e8
   13270:	ldr	r1, [r4, #12]
   13274:	movt	r3, #1
   13278:	mov	r2, #4
   1327c:	bl	11674 <qsort@plt>
   13280:	ldr	r3, [r9, #4]
   13284:	ldr	r8, [r4, #12]
   13288:	ldr	r0, [r4, #20]
   1328c:	cmp	r8, r3
   13290:	movge	r8, r3
   13294:	cmp	r8, #0
   13298:	ble	13080 <bfd_arch_bits_per_address@plt+0x19b8>
   1329c:	ldr	r3, [r0]
   132a0:	cmp	r3, #0
   132a4:	bne	132e4 <bfd_arch_bits_per_address@plt+0x1c1c>
   132a8:	b	13080 <bfd_arch_bits_per_address@plt+0x19b8>
   132ac:	ldr	r3, [r3, #24]
   132b0:	add	r5, r5, #1
   132b4:	str	r2, [sp]
   132b8:	mov	r0, r6
   132bc:	movw	r2, #8696	; 0x21f8
   132c0:	mov	r1, #1
   132c4:	movt	r2, #2
   132c8:	bl	115fc <__fprintf_chk@plt>
   132cc:	cmp	r5, r8
   132d0:	ldr	r0, [r4, #20]
   132d4:	beq	13080 <bfd_arch_bits_per_address@plt+0x19b8>
   132d8:	ldr	r3, [r0, r5, lsl #2]
   132dc:	cmp	r3, #0
   132e0:	beq	13080 <bfd_arch_bits_per_address@plt+0x19b8>
   132e4:	ldr	r2, [r3, #32]
   132e8:	cmp	r2, #0
   132ec:	bne	132ac <bfd_arch_bits_per_address@plt+0x1be4>
   132f0:	b	13080 <bfd_arch_bits_per_address@plt+0x19b8>
   132f4:	add	sp, sp, #8
   132f8:	vpop	{d8}
   132fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13300:	mov	r0, #264	; 0x108
   13304:	bl	11458 <xmalloc@plt>
   13308:	mov	r1, sl
   1330c:	mov	r2, #264	; 0x108
   13310:	bl	113b0 <memcpy@plt>
   13314:	strd	r4, [r0]
   13318:	ldr	r1, [r0, #32]
   1331c:	ldr	r2, [r6, #32]
   13320:	add	r2, r1, r2
   13324:	str	r2, [r0, #32]
   13328:	ldr	r2, [r6, #20]
   1332c:	ldr	r1, [r6, #24]
   13330:	ldr	r2, [r2, #20]
   13334:	sub	r1, r1, #-1073741823	; 0xc0000001
   13338:	str	r0, [r2, r1, lsl #2]
   1333c:	b	12fc0 <bfd_arch_bits_per_address@plt+0x18f8>
   13340:	ldr	r3, [r5, #96]	; 0x60
   13344:	cmp	r3, #0
   13348:	bne	12efc <bfd_arch_bits_per_address@plt+0x1834>
   1334c:	ldr	r0, [pc, #84]	; 133a8 <bfd_arch_bits_per_address@plt+0x1ce0>
   13350:	ldrd	r2, [r4]
   13354:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   13358:	cmp	r0, #0
   1335c:	bne	12efc <bfd_arch_bits_per_address@plt+0x1834>
   13360:	b	12f3c <bfd_arch_bits_per_address@plt+0x1874>
   13364:	ldr	r3, [r9, #96]	; 0x60
   13368:	cmp	r3, #0
   1336c:	bne	12fc0 <bfd_arch_bits_per_address@plt+0x18f8>
   13370:	ldr	r0, [pc, #48]	; 133a8 <bfd_arch_bits_per_address@plt+0x1ce0>
   13374:	ldrd	r2, [r6]
   13378:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   1337c:	cmp	r0, #0
   13380:	bne	12fc0 <bfd_arch_bits_per_address@plt+0x18f8>
   13384:	b	12ffc <bfd_arch_bits_per_address@plt+0x1934>
   13388:	str	r6, [r2, r0, lsl #2]
   1338c:	b	12fc0 <bfd_arch_bits_per_address@plt+0x18f8>
   13390:	andeq	r0, r0, r0
   13394:	subsmi	r0, r9, r0
	...
   133a0:	andeq	r7, r3, r4, lsr #24
   133a4:	andeq	r7, r3, r4, lsl #25
   133a8:	muleq	r3, r0, ip
   133ac:	push	{r4, r5, r6, r7, r8, lr}
   133b0:	movw	r8, #31768	; 0x7c18
   133b4:	movt	r8, #3
   133b8:	sub	sp, sp, #8
   133bc:	mov	r6, r0
   133c0:	mov	r4, r2
   133c4:	mov	r5, r3
   133c8:	mov	r2, r6
   133cc:	mov	r3, r1
   133d0:	mov	r0, r8
   133d4:	ldr	r7, [sp, #32]
   133d8:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   133dc:	mov	r2, r4
   133e0:	mov	r3, r5
   133e4:	mov	r6, r0
   133e8:	mov	r0, r8
   133ec:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   133f0:	cmp	r0, #0
   133f4:	cmpne	r6, #0
   133f8:	mov	r4, r0
   133fc:	beq	13488 <bfd_arch_bits_per_address@plt+0x1dc0>
   13400:	ldr	ip, [r8, #4]
   13404:	cmp	r0, ip
   13408:	bcs	1341c <bfd_arch_bits_per_address@plt+0x1d54>
   1340c:	b	13488 <bfd_arch_bits_per_address@plt+0x1dc0>
   13410:	sub	r4, r4, #264	; 0x108
   13414:	cmp	r4, ip
   13418:	bcc	13488 <bfd_arch_bits_per_address@plt+0x1dc0>
   1341c:	ldrb	r3, [r4, #28]
   13420:	tst	r3, #1
   13424:	beq	13410 <bfd_arch_bits_per_address@plt+0x1d48>
   13428:	ldr	r0, [pc, #172]	; 134dc <bfd_arch_bits_per_address@plt+0x1e14>
   1342c:	mov	r1, r6
   13430:	mov	r2, r4
   13434:	bl	1c20c <bfd_arch_bits_per_address@plt+0xab44>
   13438:	cmp	r0, #0
   1343c:	beq	13478 <bfd_arch_bits_per_address@plt+0x1db0>
   13440:	movw	r3, #30536	; 0x7748
   13444:	movt	r3, #3
   13448:	ldr	r2, [r4, #32]
   1344c:	ldr	r3, [r3]
   13450:	add	r2, r2, r7
   13454:	str	r2, [r4, #32]
   13458:	tst	r3, #16
   1345c:	bne	134ac <bfd_arch_bits_per_address@plt+0x1de4>
   13460:	mov	r0, r6
   13464:	mov	r1, r4
   13468:	mov	r2, r7
   1346c:	add	sp, sp, #8
   13470:	pop	{r4, r5, r6, r7, r8, lr}
   13474:	b	138bc <bfd_arch_bits_per_address@plt+0x21f4>
   13478:	ldr	r0, [pc, #96]	; 134e0 <bfd_arch_bits_per_address@plt+0x1e18>
   1347c:	ldr	r3, [r0, #24]
   13480:	cmp	r3, #0
   13484:	beq	13490 <bfd_arch_bits_per_address@plt+0x1dc8>
   13488:	add	sp, sp, #8
   1348c:	pop	{r4, r5, r6, r7, r8, pc}
   13490:	add	r0, r0, #36	; 0x24
   13494:	mov	r1, r6
   13498:	mov	r2, r4
   1349c:	bl	1c20c <bfd_arch_bits_per_address@plt+0xab44>
   134a0:	cmp	r0, #0
   134a4:	beq	13440 <bfd_arch_bits_per_address@plt+0x1d78>
   134a8:	b	13488 <bfd_arch_bits_per_address@plt+0x1dc0>
   134ac:	mov	r2, #5
   134b0:	movw	r1, #8920	; 0x22d8
   134b4:	mov	r0, #0
   134b8:	movt	r1, #2
   134bc:	bl	113e0 <dcgettext@plt>
   134c0:	ldr	r2, [r6, #16]
   134c4:	ldr	r3, [r4, #16]
   134c8:	str	r7, [sp]
   134cc:	mov	r1, r0
   134d0:	mov	r0, #1
   134d4:	bl	115e4 <__printf_chk@plt>
   134d8:	b	13460 <bfd_arch_bits_per_address@plt+0x1d98>
   134dc:	andeq	r7, r3, ip, lsr ip
   134e0:	andeq	r7, r3, r4, lsr #24
   134e4:	push	{r4, r5, r6, lr}
   134e8:	movw	r4, #29904	; 0x74d0
   134ec:	movt	r4, #3
   134f0:	sub	sp, sp, #40	; 0x28
   134f4:	mov	r6, r1
   134f8:	add	r1, sp, #16
   134fc:	ldr	r3, [r4]
   13500:	mov	r5, r0
   13504:	str	r3, [sp, #36]	; 0x24
   13508:	bl	1866c <bfd_arch_bits_per_address@plt+0x6fa4>
   1350c:	cmp	r0, #0
   13510:	bne	1359c <bfd_arch_bits_per_address@plt+0x1ed4>
   13514:	mov	r0, r5
   13518:	add	r1, sp, #24
   1351c:	bl	1866c <bfd_arch_bits_per_address@plt+0x6fa4>
   13520:	cmp	r0, #0
   13524:	bne	1359c <bfd_arch_bits_per_address@plt+0x1ed4>
   13528:	mov	r0, r5
   1352c:	add	r1, sp, #12
   13530:	bl	185e8 <bfd_arch_bits_per_address@plt+0x6f20>
   13534:	cmp	r0, #0
   13538:	bne	1359c <bfd_arch_bits_per_address@plt+0x1ed4>
   1353c:	movw	r3, #30536	; 0x7748
   13540:	movt	r3, #3
   13544:	ldr	r3, [r3]
   13548:	tst	r3, #64	; 0x40
   1354c:	beq	13570 <bfd_arch_bits_per_address@plt+0x1ea8>
   13550:	ldr	ip, [sp, #12]
   13554:	movw	r1, #8972	; 0x230c
   13558:	ldr	r2, [sp, #16]
   1355c:	movt	r1, #2
   13560:	ldr	r3, [sp, #24]
   13564:	mov	r0, #1
   13568:	str	ip, [sp]
   1356c:	bl	115e4 <__printf_chk@plt>
   13570:	ldr	ip, [sp, #12]
   13574:	ldrd	r2, [sp, #24]
   13578:	ldrd	r0, [sp, #16]
   1357c:	str	ip, [sp]
   13580:	bl	133ac <bfd_arch_bits_per_address@plt+0x1ce4>
   13584:	ldr	r2, [sp, #36]	; 0x24
   13588:	ldr	r3, [r4]
   1358c:	cmp	r2, r3
   13590:	bne	135e4 <bfd_arch_bits_per_address@plt+0x1f1c>
   13594:	add	sp, sp, #40	; 0x28
   13598:	pop	{r4, r5, r6, pc}
   1359c:	movw	r3, #30432	; 0x76e0
   135a0:	movt	r3, #3
   135a4:	mov	r2, #5
   135a8:	movw	r1, #8460	; 0x210c
   135ac:	mov	r0, #0
   135b0:	movt	r1, #2
   135b4:	ldr	r4, [r3]
   135b8:	bl	113e0 <dcgettext@plt>
   135bc:	movw	r3, #31748	; 0x7c04
   135c0:	movt	r3, #3
   135c4:	mov	r1, #1
   135c8:	ldr	r3, [r3]
   135cc:	str	r6, [sp]
   135d0:	mov	r2, r0
   135d4:	mov	r0, r4
   135d8:	bl	115fc <__fprintf_chk@plt>
   135dc:	mov	r0, #1
   135e0:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   135e4:	bl	113ec <__stack_chk_fail@plt>
   135e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   135ec:	movw	r8, #31768	; 0x7c18
   135f0:	movt	r8, #3
   135f4:	sub	sp, sp, #12
   135f8:	mov	r5, r0
   135fc:	mov	r9, r1
   13600:	ldr	r7, [r8, #4]
   13604:	ldr	r3, [r8, #8]
   13608:	cmp	r7, r3
   1360c:	bcs	136dc <bfd_arch_bits_per_address@plt+0x2014>
   13610:	movw	r6, #30536	; 0x7748
   13614:	movt	r6, #3
   13618:	ldr	r4, [r7, #256]	; 0x100
   1361c:	cmp	r4, #0
   13620:	bne	13634 <bfd_arch_bits_per_address@plt+0x1f6c>
   13624:	b	136cc <bfd_arch_bits_per_address@plt+0x2004>
   13628:	ldr	r4, [r4, #36]	; 0x24
   1362c:	cmp	r4, #0
   13630:	beq	136cc <bfd_arch_bits_per_address@plt+0x2004>
   13634:	mov	r0, r5
   13638:	mov	r1, #1
   1363c:	bl	1883c <bfd_arch_bits_per_address@plt+0x7174>
   13640:	cmp	r0, #0
   13644:	bne	136e4 <bfd_arch_bits_per_address@plt+0x201c>
   13648:	ldr	r3, [r4]
   1364c:	mov	r0, r5
   13650:	ldrd	r2, [r3]
   13654:	bl	187dc <bfd_arch_bits_per_address@plt+0x7114>
   13658:	cmp	r0, #0
   1365c:	bne	136e4 <bfd_arch_bits_per_address@plt+0x201c>
   13660:	ldr	r3, [r4, #4]
   13664:	mov	r0, r5
   13668:	ldrd	r2, [r3]
   1366c:	bl	187dc <bfd_arch_bits_per_address@plt+0x7114>
   13670:	cmp	r0, #0
   13674:	bne	136e4 <bfd_arch_bits_per_address@plt+0x201c>
   13678:	mov	r0, r5
   1367c:	ldr	r1, [r4, #8]
   13680:	bl	18764 <bfd_arch_bits_per_address@plt+0x709c>
   13684:	cmp	r0, #0
   13688:	bne	136e4 <bfd_arch_bits_per_address@plt+0x201c>
   1368c:	ldr	r3, [r6]
   13690:	tst	r3, #64	; 0x40
   13694:	beq	13628 <bfd_arch_bits_per_address@plt+0x1f60>
   13698:	ldr	r2, [r4]
   1369c:	movw	r1, #9024	; 0x2340
   136a0:	ldr	r3, [r4, #4]
   136a4:	movt	r1, #2
   136a8:	ldr	ip, [r4, #8]
   136ac:	mov	r0, #1
   136b0:	ldr	r2, [r2]
   136b4:	ldr	r3, [r3]
   136b8:	str	ip, [sp]
   136bc:	bl	115e4 <__printf_chk@plt>
   136c0:	ldr	r4, [r4, #36]	; 0x24
   136c4:	cmp	r4, #0
   136c8:	bne	13634 <bfd_arch_bits_per_address@plt+0x1f6c>
   136cc:	ldr	r3, [r8, #8]
   136d0:	add	r7, r7, #264	; 0x108
   136d4:	cmp	r3, r7
   136d8:	bhi	13618 <bfd_arch_bits_per_address@plt+0x1f50>
   136dc:	add	sp, sp, #12
   136e0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   136e4:	mov	r0, r9
   136e8:	bl	11428 <perror@plt>
   136ec:	mov	r0, #1
   136f0:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   136f4:	andeq	r0, r0, r0
   136f8:	ldr	r3, [r0]
   136fc:	ldr	r2, [r1]
   13700:	ldr	r0, [r3, #204]	; 0xcc
   13704:	ldr	r3, [r2, #204]	; 0xcc
   13708:	rsb	r0, r3, r0
   1370c:	bx	lr
   13710:	ldr	r3, [r0]
   13714:	vldr	d7, [r3, #232]	; 0xe8
   13718:	ldr	r2, [r1]
   1371c:	vldr	d5, [r3, #224]	; 0xe0
   13720:	vldr	d6, [r2, #224]	; 0xe0
   13724:	vadd.f64	d5, d5, d7
   13728:	vldr	d7, [r2, #232]	; 0xe8
   1372c:	vadd.f64	d6, d6, d7
   13730:	vsub.f64	d7, d5, d6
   13734:	vcmpe.f64	d7, #0.0
   13738:	vmrs	APSR_nzcv, fpscr
   1373c:	bmi	13794 <bfd_arch_bits_per_address@plt+0x20cc>
   13740:	bgt	137b4 <bfd_arch_bits_per_address@plt+0x20ec>
   13744:	ldr	r0, [r3, #16]
   13748:	cmp	r0, #0
   1374c:	beq	1379c <bfd_arch_bits_per_address@plt+0x20d4>
   13750:	ldr	r1, [r2, #16]
   13754:	cmp	r1, #0
   13758:	beq	137bc <bfd_arch_bits_per_address@plt+0x20f4>
   1375c:	ldrb	ip, [r0]
   13760:	cmp	ip, #95	; 0x5f
   13764:	ldrb	ip, [r1]
   13768:	beq	1378c <bfd_arch_bits_per_address@plt+0x20c4>
   1376c:	cmp	ip, #95	; 0x5f
   13770:	beq	137b4 <bfd_arch_bits_per_address@plt+0x20ec>
   13774:	ldr	ip, [r3, #32]
   13778:	ldr	r3, [r2, #32]
   1377c:	cmp	ip, r3
   13780:	bhi	137b4 <bfd_arch_bits_per_address@plt+0x20ec>
   13784:	bcc	13794 <bfd_arch_bits_per_address@plt+0x20cc>
   13788:	b	11350 <strcmp@plt>
   1378c:	cmp	ip, #95	; 0x5f
   13790:	beq	13774 <bfd_arch_bits_per_address@plt+0x20ac>
   13794:	mov	r0, #1
   13798:	bx	lr
   1379c:	ldr	r3, [r3, #240]	; 0xf0
   137a0:	cmp	r3, #0
   137a4:	bne	137b4 <bfd_arch_bits_per_address@plt+0x20ec>
   137a8:	ldr	r3, [r2, #16]
   137ac:	cmp	r3, #0
   137b0:	beq	137bc <bfd_arch_bits_per_address@plt+0x20f4>
   137b4:	mvn	r0, #0
   137b8:	bx	lr
   137bc:	ldr	r3, [r2, #240]	; 0xf0
   137c0:	cmp	r3, #0
   137c4:	bne	13794 <bfd_arch_bits_per_address@plt+0x20cc>
   137c8:	cmp	r0, #0
   137cc:	mvneq	r0, #0
   137d0:	movne	r0, #1
   137d4:	bx	lr
   137d8:	cmp	r1, #0
   137dc:	cmpne	r0, #0
   137e0:	push	{r4, r5, r6, r7, r8, lr}
   137e4:	mov	r4, r0
   137e8:	mov	r7, r1
   137ec:	beq	138a8 <bfd_arch_bits_per_address@plt+0x21e0>
   137f0:	movw	r8, #30536	; 0x7748
   137f4:	movt	r8, #3
   137f8:	ldr	r3, [r8]
   137fc:	tst	r3, #512	; 0x200
   13800:	bne	1388c <bfd_arch_bits_per_address@plt+0x21c4>
   13804:	ldr	r6, [r4, #256]	; 0x100
   13808:	cmp	r6, #0
   1380c:	bne	1384c <bfd_arch_bits_per_address@plt+0x2184>
   13810:	b	1387c <bfd_arch_bits_per_address@plt+0x21b4>
   13814:	ldr	r1, [r6, #4]
   13818:	ldrd	r4, [r7]
   1381c:	ldrd	r2, [r1]
   13820:	cmp	r5, r3
   13824:	cmpeq	r4, r2
   13828:	bcc	13840 <bfd_arch_bits_per_address@plt+0x2178>
   1382c:	ldrd	r2, [r7, #8]
   13830:	ldrd	r0, [r1, #8]
   13834:	cmp	r3, r1
   13838:	cmpeq	r2, r0
   1383c:	bls	13884 <bfd_arch_bits_per_address@plt+0x21bc>
   13840:	ldr	r6, [r6, #36]	; 0x24
   13844:	cmp	r6, #0
   13848:	beq	1387c <bfd_arch_bits_per_address@plt+0x21b4>
   1384c:	ldr	r3, [r8]
   13850:	tst	r3, #512	; 0x200
   13854:	beq	13814 <bfd_arch_bits_per_address@plt+0x214c>
   13858:	ldr	r2, [r6]
   1385c:	movw	r1, #9156	; 0x23c4
   13860:	ldr	r3, [r6, #4]
   13864:	movt	r1, #2
   13868:	mov	r0, #1
   1386c:	ldr	r2, [r2, #16]
   13870:	ldr	r3, [r3, #16]
   13874:	bl	115e4 <__printf_chk@plt>
   13878:	b	13814 <bfd_arch_bits_per_address@plt+0x214c>
   1387c:	mov	r0, #0
   13880:	pop	{r4, r5, r6, r7, r8, pc}
   13884:	mov	r0, r6
   13888:	pop	{r4, r5, r6, r7, r8, pc}
   1388c:	movw	r1, #9120	; 0x23a0
   13890:	ldr	r2, [r4, #16]
   13894:	movt	r1, #2
   13898:	ldr	r3, [r7, #16]
   1389c:	mov	r0, #1
   138a0:	bl	115e4 <__printf_chk@plt>
   138a4:	b	13804 <bfd_arch_bits_per_address@plt+0x213c>
   138a8:	movw	r0, #9080	; 0x2378
   138ac:	movt	r0, #2
   138b0:	bl	114e8 <puts@plt>
   138b4:	mov	r0, #0
   138b8:	pop	{r4, r5, r6, r7, r8, pc}
   138bc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   138c0:	movw	r4, #30536	; 0x7748
   138c4:	movt	r4, #3
   138c8:	sub	sp, sp, #8
   138cc:	mov	r7, r0
   138d0:	mov	r6, r1
   138d4:	ldr	r3, [r4]
   138d8:	mov	r8, r2
   138dc:	tst	r3, #16
   138e0:	bne	13930 <bfd_arch_bits_per_address@plt+0x2268>
   138e4:	mov	r0, r7
   138e8:	mov	r1, r6
   138ec:	bl	137d8 <bfd_arch_bits_per_address@plt+0x2110>
   138f0:	subs	r5, r0, #0
   138f4:	beq	13950 <bfd_arch_bits_per_address@plt+0x2288>
   138f8:	ldr	r3, [r4]
   138fc:	tst	r3, #16
   13900:	beq	1391c <bfd_arch_bits_per_address@plt+0x2254>
   13904:	movw	r1, #9228	; 0x240c
   13908:	mov	r0, #1
   1390c:	movt	r1, #2
   13910:	ldr	r2, [r5, #8]
   13914:	mov	r3, r8
   13918:	bl	115e4 <__printf_chk@plt>
   1391c:	ldr	r3, [r5, #8]
   13920:	add	r8, r3, r8
   13924:	str	r8, [r5, #8]
   13928:	add	sp, sp, #8
   1392c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13930:	ldr	ip, [r6, #16]
   13934:	movw	r1, #9192	; 0x23e8
   13938:	ldr	r3, [r0, #16]
   1393c:	movt	r1, #2
   13940:	mov	r0, #1
   13944:	str	ip, [sp]
   13948:	bl	115e4 <__printf_chk@plt>
   1394c:	b	138e4 <bfd_arch_bits_per_address@plt+0x221c>
   13950:	mov	r0, #48	; 0x30
   13954:	bl	11458 <xmalloc@plt>
   13958:	mov	r1, r5
   1395c:	mov	r2, #48	; 0x30
   13960:	mov	r4, r0
   13964:	bl	1159c <memset@plt>
   13968:	cmp	r7, r6
   1396c:	str	r7, [r4]
   13970:	stmib	r4, {r6, r8}
   13974:	beq	139b0 <bfd_arch_bits_per_address@plt+0x22e8>
   13978:	movw	r5, #31704	; 0x7bd8
   1397c:	movw	r3, #30476	; 0x770c
   13980:	movt	r5, #3
   13984:	movt	r3, #3
   13988:	ldr	r2, [r5]
   1398c:	ldr	r1, [r3]
   13990:	cmp	r2, r1
   13994:	beq	139cc <bfd_arch_bits_per_address@plt+0x2304>
   13998:	movw	r3, #31712	; 0x7be0
   1399c:	movt	r3, #3
   139a0:	ldr	r3, [r3]
   139a4:	add	r1, r2, #1
   139a8:	str	r1, [r5]
   139ac:	str	r4, [r3, r2, lsl #2]
   139b0:	ldr	r2, [r7, #256]	; 0x100
   139b4:	ldr	r3, [r6, #252]	; 0xfc
   139b8:	str	r2, [r4, #36]	; 0x24
   139bc:	str	r4, [r7, #256]	; 0x100
   139c0:	str	r3, [r4, #32]
   139c4:	str	r4, [r6, #252]	; 0xfc
   139c8:	b	13928 <bfd_arch_bits_per_address@plt+0x2260>
   139cc:	cmp	r2, #0
   139d0:	movw	r8, #31712	; 0x7be0
   139d4:	lslne	r0, r2, #3
   139d8:	lslne	r1, r2, #1
   139dc:	moveq	r0, #8
   139e0:	moveq	r1, #2
   139e4:	str	r1, [r3]
   139e8:	bl	11458 <xmalloc@plt>
   139ec:	movt	r8, #3
   139f0:	ldr	r2, [r5]
   139f4:	ldr	sl, [r8]
   139f8:	lsl	r2, r2, #2
   139fc:	mov	r1, sl
   13a00:	mov	r9, r0
   13a04:	bl	113b0 <memcpy@plt>
   13a08:	mov	r0, sl
   13a0c:	bl	11374 <free@plt>
   13a10:	ldr	r2, [r5]
   13a14:	mov	r3, r9
   13a18:	str	r9, [r8]
   13a1c:	b	139a4 <bfd_arch_bits_per_address@plt+0x22dc>
   13a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a24:	vpush	{d8}
   13a28:	movw	fp, #31768	; 0x7c18
   13a2c:	movt	fp, #3
   13a30:	sub	sp, sp, #44	; 0x2c
   13a34:	ldr	sl, [fp, #4]
   13a38:	ldr	r3, [fp, #8]
   13a3c:	cmp	sl, r3
   13a40:	bcs	144c8 <bfd_arch_bits_per_address@plt+0x2e00>
   13a44:	add	ip, sl, #264	; 0x108
   13a48:	movw	r9, #30532	; 0x7744
   13a4c:	str	ip, [sp, #20]
   13a50:	movt	r9, #3
   13a54:	mov	r6, sl
   13a58:	mov	r7, ip
   13a5c:	mov	r8, #0
   13a60:	vldr	d8, [pc, #968]	; 13e30 <bfd_arch_bits_per_address@plt+0x2768>
   13a64:	b	13a80 <bfd_arch_bits_per_address@plt+0x23b8>
   13a68:	ldr	r2, [fp, #8]
   13a6c:	add	r6, r6, #264	; 0x108
   13a70:	movw	r3, #31768	; 0x7c18
   13a74:	movt	r3, #3
   13a78:	cmp	r2, r6
   13a7c:	bls	13b10 <bfd_arch_bits_per_address@plt+0x2448>
   13a80:	vstr	d8, [r7, #-72]	; 0xffffffb8
   13a84:	mov	r0, r6
   13a88:	mov	r1, r6
   13a8c:	bl	137d8 <bfd_arch_bits_per_address@plt+0x2110>
   13a90:	cmp	r0, #0
   13a94:	beq	13aa4 <bfd_arch_bits_per_address@plt+0x23dc>
   13a98:	ldr	r3, [r0, #4]
   13a9c:	cmp	r3, r6
   13aa0:	beq	13af8 <bfd_arch_bits_per_address@plt+0x2430>
   13aa4:	str	r8, [r6, #184]	; 0xb8
   13aa8:	ldr	r3, [r9]
   13aac:	vstr	d8, [r7, #-48]	; 0xffffffd0
   13ab0:	vstr	d8, [r7, #-40]	; 0xffffffd8
   13ab4:	vstr	d8, [r7, #-32]	; 0xffffffe0
   13ab8:	cmp	r3, #0
   13abc:	str	r8, [r6, #208]	; 0xd0
   13ac0:	add	r7, r7, #264	; 0x108
   13ac4:	str	r8, [r6, #204]	; 0xcc
   13ac8:	str	r8, [r6, #240]	; 0xf0
   13acc:	str	r6, [r6, #244]	; 0xf4
   13ad0:	str	r8, [r6, #248]	; 0xf8
   13ad4:	beq	13a68 <bfd_arch_bits_per_address@plt+0x23a0>
   13ad8:	ldr	ip, [sp, #20]
   13adc:	rsb	r1, sl, r6
   13ae0:	ldrd	r2, [r6]
   13ae4:	mov	r0, r6
   13ae8:	ldrd	r4, [ip, r1]
   13aec:	strd	r4, [sp]
   13af0:	bl	17634 <bfd_arch_bits_per_address@plt+0x5f6c>
   13af4:	b	13a68 <bfd_arch_bits_per_address@plt+0x23a0>
   13af8:	ldr	r3, [r0, #8]
   13afc:	ldr	r2, [r6, #32]
   13b00:	str	r3, [r6, #184]	; 0xb8
   13b04:	rsb	r3, r3, r2
   13b08:	str	r3, [r6, #32]
   13b0c:	b	13aa8 <bfd_arch_bits_per_address@plt+0x23e0>
   13b10:	ldr	r4, [r3, #4]
   13b14:	cmp	r4, r2
   13b18:	bcc	13b38 <bfd_arch_bits_per_address@plt+0x2470>
   13b1c:	b	144f8 <bfd_arch_bits_per_address@plt+0x2e30>
   13b20:	ldr	r2, [fp, #8]
   13b24:	add	r4, r4, #264	; 0x108
   13b28:	movw	r3, #31768	; 0x7c18
   13b2c:	movt	r3, #3
   13b30:	cmp	r2, r4
   13b34:	bls	13b50 <bfd_arch_bits_per_address@plt+0x2488>
   13b38:	ldr	r3, [r4, #204]	; 0xcc
   13b3c:	cmp	r3, #0
   13b40:	bne	13b20 <bfd_arch_bits_per_address@plt+0x2458>
   13b44:	mov	r0, r4
   13b48:	bl	1450c <bfd_arch_bits_per_address@plt+0x2e44>
   13b4c:	b	13b20 <bfd_arch_bits_per_address@plt+0x2458>
   13b50:	ldr	r3, [r3, #4]
   13b54:	movw	ip, #31716	; 0x7be4
   13b58:	movt	ip, #3
   13b5c:	str	ip, [sp, #24]
   13b60:	cmp	r2, r3
   13b64:	ldr	lr, [sp, #24]
   13b68:	mov	ip, #0
   13b6c:	str	ip, [lr]
   13b70:	bls	144f0 <bfd_arch_bits_per_address@plt+0x2e28>
   13b74:	mov	r0, ip
   13b78:	b	13b88 <bfd_arch_bits_per_address@plt+0x24c0>
   13b7c:	add	r3, r3, #264	; 0x108
   13b80:	cmp	r3, r2
   13b84:	bcs	13bb0 <bfd_arch_bits_per_address@plt+0x24e8>
   13b88:	ldr	r1, [r3, #244]	; 0xf4
   13b8c:	cmp	r3, r1
   13b90:	bne	13b7c <bfd_arch_bits_per_address@plt+0x24b4>
   13b94:	ldr	r1, [r3, #248]	; 0xf8
   13b98:	add	r3, r3, #264	; 0x108
   13b9c:	cmp	r1, #0
   13ba0:	addne	r0, r0, #1
   13ba4:	movne	ip, r0
   13ba8:	cmp	r3, r2
   13bac:	bcc	13b88 <bfd_arch_bits_per_address@plt+0x24c0>
   13bb0:	add	r0, r0, #1
   13bb4:	ldr	r1, [sp, #24]
   13bb8:	add	r0, r0, r0, lsl #5
   13bbc:	str	ip, [r1]
   13bc0:	lsl	r0, r0, #3
   13bc4:	movw	ip, #31708	; 0x7bdc
   13bc8:	str	ip, [sp, #32]
   13bcc:	bl	11458 <xmalloc@plt>
   13bd0:	ldr	ip, [sp, #32]
   13bd4:	ldr	r9, [fp, #4]
   13bd8:	ldr	r3, [fp, #8]
   13bdc:	movt	ip, #3
   13be0:	str	ip, [sp, #32]
   13be4:	cmp	r9, r3
   13be8:	mov	r4, r0
   13bec:	str	r0, [ip]
   13bf0:	bcs	144e4 <bfd_arch_bits_per_address@plt+0x2e1c>
   13bf4:	mov	r6, #0
   13bf8:	movw	r5, #30536	; 0x7748
   13bfc:	mov	r8, r6
   13c00:	movt	r5, #3
   13c04:	mov	r7, #1
   13c08:	b	13c1c <bfd_arch_bits_per_address@plt+0x2554>
   13c0c:	ldr	r3, [fp, #8]
   13c10:	add	r9, r9, #264	; 0x108
   13c14:	cmp	r9, r3
   13c18:	bcs	13cec <bfd_arch_bits_per_address@plt+0x2624>
   13c1c:	ldr	r3, [r9, #244]	; 0xf4
   13c20:	cmp	r9, r3
   13c24:	bne	13c0c <bfd_arch_bits_per_address@plt+0x2544>
   13c28:	ldr	r3, [r9, #248]	; 0xf8
   13c2c:	cmp	r3, #0
   13c30:	beq	13c0c <bfd_arch_bits_per_address@plt+0x2544>
   13c34:	add	sl, r4, #264	; 0x108
   13c38:	add	r6, r6, #1
   13c3c:	mov	r0, sl
   13c40:	bl	1b358 <bfd_arch_bits_per_address@plt+0x9c90>
   13c44:	ldr	r3, [r5]
   13c48:	str	r6, [r4, #504]	; 0x1f8
   13c4c:	tst	r3, #4
   13c50:	str	sl, [r4, #508]	; 0x1fc
   13c54:	str	r7, [r4, #472]	; 0x1d8
   13c58:	str	r8, [r4, #468]	; 0x1d4
   13c5c:	str	r9, [r4, #512]	; 0x200
   13c60:	bne	1442c <bfd_arch_bits_per_address@plt+0x2d64>
   13c64:	mov	r3, r9
   13c68:	str	r6, [r3, #240]	; 0xf0
   13c6c:	str	sl, [r3, #244]	; 0xf4
   13c70:	ldr	r3, [r3, #248]	; 0xf8
   13c74:	cmp	r3, #0
   13c78:	bne	13c68 <bfd_arch_bits_per_address@plt+0x25a0>
   13c7c:	mov	r0, r9
   13c80:	ldr	r3, [r0, #252]	; 0xfc
   13c84:	cmp	r3, #0
   13c88:	beq	13ccc <bfd_arch_bits_per_address@plt+0x2604>
   13c8c:	ldr	r1, [r3]
   13c90:	cmp	r0, r1
   13c94:	beq	13cc0 <bfd_arch_bits_per_address@plt+0x25f8>
   13c98:	ldr	r2, [r1, #240]	; 0xf0
   13c9c:	cmp	r6, r2
   13ca0:	ldreq	r2, [r3, #8]
   13ca4:	ldrne	r2, [r3, #8]
   13ca8:	ldreq	r1, [r4, #448]	; 0x1c0
   13cac:	ldrne	r1, [r4, #296]	; 0x128
   13cb0:	addeq	r2, r1, r2
   13cb4:	streq	r2, [r4, #448]	; 0x1c0
   13cb8:	addne	r2, r1, r2
   13cbc:	strne	r2, [r4, #296]	; 0x128
   13cc0:	ldr	r3, [r3, #32]
   13cc4:	cmp	r3, #0
   13cc8:	bne	13c8c <bfd_arch_bits_per_address@plt+0x25c4>
   13ccc:	ldr	r0, [r0, #248]	; 0xf8
   13cd0:	cmp	r0, #0
   13cd4:	bne	13c80 <bfd_arch_bits_per_address@plt+0x25b8>
   13cd8:	ldr	r3, [fp, #8]
   13cdc:	add	r9, r9, #264	; 0x108
   13ce0:	mov	r4, sl
   13ce4:	cmp	r9, r3
   13ce8:	bcc	13c1c <bfd_arch_bits_per_address@plt+0x2554>
   13cec:	ldr	r0, [fp]
   13cf0:	movw	r4, #31768	; 0x7c18
   13cf4:	movt	r4, #3
   13cf8:	lsl	r0, r0, #2
   13cfc:	bl	11458 <xmalloc@plt>
   13d00:	ldr	r1, [fp]
   13d04:	cmp	r1, #0
   13d08:	str	r0, [sp, #28]
   13d0c:	beq	13d30 <bfd_arch_bits_per_address@plt+0x2668>
   13d10:	ldr	ip, [sp, #28]
   13d14:	ldr	r2, [r4, #4]
   13d18:	add	r0, ip, r1, lsl #2
   13d1c:	mov	r3, ip
   13d20:	str	r2, [r3], #4
   13d24:	cmp	r3, r0
   13d28:	add	r2, r2, #264	; 0x108
   13d2c:	bne	13d20 <bfd_arch_bits_per_address@plt+0x2658>
   13d30:	movw	r3, #14072	; 0x36f8
   13d34:	ldr	r0, [sp, #28]
   13d38:	movt	r3, #1
   13d3c:	mov	r2, #4
   13d40:	bl	11674 <qsort@plt>
   13d44:	ldr	r3, [r5]
   13d48:	tst	r3, #2
   13d4c:	ldreq	r7, [fp]
   13d50:	bne	1445c <bfd_arch_bits_per_address@plt+0x2d94>
   13d54:	subs	r4, r7, #1
   13d58:	bmi	13f04 <bfd_arch_bits_per_address@plt+0x283c>
   13d5c:	movw	ip, #31780	; 0x7c24
   13d60:	movt	ip, #3
   13d64:	str	ip, [sp, #36]	; 0x24
   13d68:	movw	r6, #30496	; 0x7720
   13d6c:	ldr	ip, [sp, #28]
   13d70:	movt	r6, #3
   13d74:	mov	r9, #0
   13d78:	vldr	d8, [pc, #176]	; 13e30 <bfd_arch_bits_per_address@plt+0x2768>
   13d7c:	add	r7, ip, r7, lsl #2
   13d80:	ldr	r8, [r7, #-4]!
   13d84:	ldr	r2, [r8, #244]	; 0xf4
   13d88:	cmp	r2, r9
   13d8c:	beq	13e68 <bfd_arch_bits_per_address@plt+0x27a0>
   13d90:	cmp	r8, r2
   13d94:	beq	1404c <bfd_arch_bits_per_address@plt+0x2984>
   13d98:	ldr	sl, [r2, #248]	; 0xf8
   13d9c:	mov	ip, #0
   13da0:	vstr	d8, [r2, #216]	; 0xd8
   13da4:	str	ip, [r2, #208]	; 0xd0
   13da8:	cmp	sl, ip
   13dac:	beq	14400 <bfd_arch_bits_per_address@plt+0x2d38>
   13db0:	mov	r9, sl
   13db4:	vldr	d7, [pc, #116]	; 13e30 <bfd_arch_bits_per_address@plt+0x2768>
   13db8:	ldr	r3, [r9, #252]	; 0xfc
   13dbc:	cmp	r3, #0
   13dc0:	beq	13e18 <bfd_arch_bits_per_address@plt+0x2750>
   13dc4:	ldr	r1, [r3]
   13dc8:	ldr	r0, [r1, #244]	; 0xf4
   13dcc:	cmp	r2, r0
   13dd0:	beq	13e0c <bfd_arch_bits_per_address@plt+0x2744>
   13dd4:	ldr	r0, [r2, #32]
   13dd8:	ldr	lr, [r1, #208]	; 0xd0
   13ddc:	cmp	r0, #0
   13de0:	orr	ip, ip, lr
   13de4:	str	ip, [r2, #208]	; 0xd0
   13de8:	beq	13e0c <bfd_arch_bits_per_address@plt+0x2744>
   13dec:	vmov	s13, r0
   13df0:	vldr	s1, [r3, #8]
   13df4:	vcvt.f64.u32	d4, s1
   13df8:	vcvt.f64.u32	d5, s13
   13dfc:	vldr	d6, [r1, #216]	; 0xd8
   13e00:	vdiv.f64	d5, d4, d5
   13e04:	vmla.f64	d7, d5, d6
   13e08:	vstr	d7, [r2, #216]	; 0xd8
   13e0c:	ldr	r3, [r3, #32]
   13e10:	cmp	r3, #0
   13e14:	bne	13dc4 <bfd_arch_bits_per_address@plt+0x26fc>
   13e18:	ldr	r9, [r9, #248]	; 0xf8
   13e1c:	cmp	r9, #0
   13e20:	bne	13db8 <bfd_arch_bits_per_address@plt+0x26f0>
   13e24:	mov	r3, r2
   13e28:	b	13e50 <bfd_arch_bits_per_address@plt+0x2788>
   13e2c:	nop	{0}
	...
   13e38:	andeq	r7, r3, ip, ror #24
   13e3c:	andeq	r7, r3, r0, lsr ip
   13e40:	andeq	r7, r3, r8, ror ip
   13e44:	ldr	sl, [sl, #248]	; 0xf8
   13e48:	vldr	d7, [r2, #216]	; 0xd8
   13e4c:	ldr	ip, [r2, #208]	; 0xd0
   13e50:	cmp	sl, #0
   13e54:	str	ip, [r3, #208]	; 0xd0
   13e58:	vstr	d7, [r3, #216]	; 0xd8
   13e5c:	mov	r3, sl
   13e60:	bne	13e44 <bfd_arch_bits_per_address@plt+0x277c>
   13e64:	mov	r9, r2
   13e68:	ldr	r3, [r5]
   13e6c:	tst	r3, #1024	; 0x400
   13e70:	bne	14014 <bfd_arch_bits_per_address@plt+0x294c>
   13e74:	ldr	r3, [r8, #208]	; 0xd0
   13e78:	movw	r0, #31780	; 0x7c24
   13e7c:	movt	r0, #3
   13e80:	cmp	r3, #0
   13e84:	ldrd	r2, [r8]
   13e88:	bne	13f94 <bfd_arch_bits_per_address@plt+0x28cc>
   13e8c:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   13e90:	cmp	r0, #0
   13e94:	beq	143d4 <bfd_arch_bits_per_address@plt+0x2d0c>
   13e98:	mov	r3, #1
   13e9c:	str	r3, [r8, #208]	; 0xd0
   13ea0:	vldr	d7, [r8, #216]	; 0xd8
   13ea4:	vcmp.f64	d7, #0.0
   13ea8:	ldr	r0, [pc, #-120]	; 13e38 <bfd_arch_bits_per_address@plt+0x2770>
   13eac:	ldrd	r2, [r8]
   13eb0:	vmrs	APSR_nzcv, fpscr
   13eb4:	bne	13f80 <bfd_arch_bits_per_address@plt+0x28b8>
   13eb8:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   13ebc:	cmp	r0, #0
   13ec0:	beq	143ac <bfd_arch_bits_per_address@plt+0x2ce4>
   13ec4:	vmov.f64	d7, #112	; 0x3f800000  1.0
   13ec8:	vstr	d7, [r8, #216]	; 0xd8
   13ecc:	vldr	d6, [r8, #168]	; 0xa8
   13ed0:	vmul.f64	d7, d7, d6
   13ed4:	vldr	d6, [r6]
   13ed8:	ldr	r3, [r5]
   13edc:	movw	sl, #30496	; 0x7720
   13ee0:	movt	sl, #3
   13ee4:	tst	r3, #1024	; 0x400
   13ee8:	vadd.f64	d6, d7, d6
   13eec:	vstr	d7, [r8, #224]	; 0xe0
   13ef0:	vstr	d6, [r6]
   13ef4:	bne	13fb8 <bfd_arch_bits_per_address@plt+0x28f0>
   13ef8:	subs	r4, r4, #1
   13efc:	bpl	13d80 <bfd_arch_bits_per_address@plt+0x26b8>
   13f00:	ldr	r7, [fp]
   13f04:	ldr	ip, [sp, #24]
   13f08:	ldr	r0, [ip]
   13f0c:	ldr	ip, [sp, #32]
   13f10:	add	r1, r0, r0, lsl #5
   13f14:	ldr	r2, [ip]
   13f18:	add	r3, r2, #264	; 0x108
   13f1c:	add	r1, r2, r1, lsl #3
   13f20:	cmp	r1, r3
   13f24:	addcs	r2, r2, #528	; 0x210
   13f28:	bcc	140c4 <bfd_arch_bits_per_address@plt+0x29fc>
   13f2c:	ldr	r3, [r2, #-16]
   13f30:	vldr	d6, [r2, #-96]	; 0xffffffa0
   13f34:	cmp	r3, #0
   13f38:	beq	13f60 <bfd_arch_bits_per_address@plt+0x2898>
   13f3c:	vldr	d7, [r3, #216]	; 0xd8
   13f40:	vcmp.f64	d7, #0.0
   13f44:	vmrs	APSR_nzcv, fpscr
   13f48:	vldrne	d7, [r3, #168]	; 0xa8
   13f4c:	vaddne.f64	d6, d6, d7
   13f50:	vstrne	d6, [r2, #-96]	; 0xffffffa0
   13f54:	ldr	r3, [r3, #248]	; 0xf8
   13f58:	cmp	r3, #0
   13f5c:	bne	13f3c <bfd_arch_bits_per_address@plt+0x2874>
   13f60:	vldr	d7, [r2, #-48]	; 0xffffffd0
   13f64:	vmul.f64	d7, d7, d6
   13f68:	cmp	r1, r2
   13f6c:	add	r3, r2, #264	; 0x108
   13f70:	vstr	d7, [r2, #-40]	; 0xffffffd8
   13f74:	bcc	140c4 <bfd_arch_bits_per_address@plt+0x29fc>
   13f78:	mov	r2, r3
   13f7c:	b	13f2c <bfd_arch_bits_per_address@plt+0x2864>
   13f80:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   13f84:	cmp	r0, #0
   13f88:	beq	1440c <bfd_arch_bits_per_address@plt+0x2d44>
   13f8c:	vldr	d7, [r8, #216]	; 0xd8
   13f90:	b	13ecc <bfd_arch_bits_per_address@plt+0x2804>
   13f94:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   13f98:	subs	sl, r0, #0
   13f9c:	bne	13ea0 <bfd_arch_bits_per_address@plt+0x27d8>
   13fa0:	ldr	r0, [pc, #-364]	; 13e3c <bfd_arch_bits_per_address@plt+0x2774>
   13fa4:	ldrd	r2, [r8]
   13fa8:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   13fac:	cmp	r0, #0
   13fb0:	strne	sl, [r8, #208]	; 0xd0
   13fb4:	b	13ea0 <bfd_arch_bits_per_address@plt+0x27d8>
   13fb8:	movw	r1, #9356	; 0x248c
   13fbc:	mov	r0, #1
   13fc0:	movt	r1, #2
   13fc4:	bl	115e4 <__printf_chk@plt>
   13fc8:	mov	r0, r8
   13fcc:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   13fd0:	ldrd	r0, [r8, #216]	; 0xd8
   13fd4:	ldr	r2, [r8, #208]	; 0xd0
   13fd8:	strd	r0, [sp]
   13fdc:	movw	r1, #9416	; 0x24c8
   13fe0:	mov	r0, #1
   13fe4:	movt	r1, #2
   13fe8:	bl	115e4 <__printf_chk@plt>
   13fec:	ldrd	r0, [r8, #224]	; 0xe0
   13ff0:	ldrd	r2, [r8, #168]	; 0xa8
   13ff4:	strd	r0, [sp]
   13ff8:	movw	r1, #9464	; 0x24f8
   13ffc:	vldr	d7, [sl]
   14000:	movt	r1, #2
   14004:	vstr	d7, [sp, #8]
   14008:	mov	r0, #1
   1400c:	bl	115e4 <__printf_chk@plt>
   14010:	b	13ef8 <bfd_arch_bits_per_address@plt+0x2830>
   14014:	movw	r1, #9356	; 0x248c
   14018:	mov	r0, #1
   1401c:	movt	r1, #2
   14020:	bl	115e4 <__printf_chk@plt>
   14024:	mov	r0, r8
   14028:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   1402c:	ldrd	r0, [r8, #216]	; 0xd8
   14030:	ldr	r2, [r8, #208]	; 0xd0
   14034:	strd	r0, [sp]
   14038:	movw	r1, #9372	; 0x249c
   1403c:	mov	r0, #1
   14040:	movt	r1, #2
   14044:	bl	115e4 <__printf_chk@plt>
   14048:	b	13e74 <bfd_arch_bits_per_address@plt+0x27ac>
   1404c:	ldr	r3, [r8, #252]	; 0xfc
   14050:	mov	r2, #0
   14054:	vstr	d8, [r8, #216]	; 0xd8
   14058:	str	r2, [r8, #208]	; 0xd0
   1405c:	cmp	r3, r2
   14060:	beq	140bc <bfd_arch_bits_per_address@plt+0x29f4>
   14064:	ldr	r2, [r3]
   14068:	cmp	r8, r2
   1406c:	beq	140b0 <bfd_arch_bits_per_address@plt+0x29e8>
   14070:	ldr	r1, [r8, #32]
   14074:	ldr	ip, [r8, #208]	; 0xd0
   14078:	ldr	r0, [r2, #208]	; 0xd0
   1407c:	cmp	r1, #0
   14080:	orr	r0, ip, r0
   14084:	str	r0, [r8, #208]	; 0xd0
   14088:	beq	140b0 <bfd_arch_bits_per_address@plt+0x29e8>
   1408c:	vmov	s1, r1
   14090:	vldr	s7, [r3, #8]
   14094:	vcvt.f64.u32	d4, s7
   14098:	vldr	d6, [r2, #216]	; 0xd8
   1409c:	vldr	d7, [r8, #216]	; 0xd8
   140a0:	vcvt.f64.u32	d5, s1
   140a4:	vdiv.f64	d5, d4, d5
   140a8:	vmla.f64	d7, d5, d6
   140ac:	vstr	d7, [r8, #216]	; 0xd8
   140b0:	ldr	r3, [r3, #32]
   140b4:	cmp	r3, #0
   140b8:	bne	14064 <bfd_arch_bits_per_address@plt+0x299c>
   140bc:	mov	r9, r8
   140c0:	b	13e68 <bfd_arch_bits_per_address@plt+0x27a0>
   140c4:	cmp	r7, #0
   140c8:	moveq	r4, r0
   140cc:	beq	14214 <bfd_arch_bits_per_address@plt+0x2b4c>
   140d0:	ldr	ip, [sp, #28]
   140d4:	movw	r9, #30432	; 0x76e0
   140d8:	movt	r9, #3
   140dc:	mov	r8, #0
   140e0:	sub	sl, ip, #4
   140e4:	ldr	r7, [sl, #4]!
   140e8:	vldr	d7, [r7, #216]	; 0xd8
   140ec:	vcmp.f64	d7, #0.0
   140f0:	vmrs	APSR_nzcv, fpscr
   140f4:	beq	141fc <bfd_arch_bits_per_address@plt+0x2b34>
   140f8:	ldr	r4, [r7, #256]	; 0x100
   140fc:	cmp	r4, #0
   14100:	beq	141fc <bfd_arch_bits_per_address@plt+0x2b34>
   14104:	ldr	r3, [r4, #8]
   14108:	ldr	r6, [r4, #4]
   1410c:	cmp	r3, #0
   14110:	beq	141f0 <bfd_arch_bits_per_address@plt+0x2b28>
   14114:	cmp	r7, r6
   14118:	beq	141f0 <bfd_arch_bits_per_address@plt+0x2b28>
   1411c:	vldr	d7, [r6, #216]	; 0xd8
   14120:	vcmp.f64	d7, #0.0
   14124:	vmrs	APSR_nzcv, fpscr
   14128:	beq	141f0 <bfd_arch_bits_per_address@plt+0x2b28>
   1412c:	ldr	r3, [r6, #244]	; 0xf4
   14130:	cmp	r6, r3
   14134:	beq	1430c <bfd_arch_bits_per_address@plt+0x2c44>
   14138:	ldr	r1, [r7, #240]	; 0xf0
   1413c:	ldr	r2, [r6, #240]	; 0xf0
   14140:	cmp	r1, r2
   14144:	beq	141f0 <bfd_arch_bits_per_address@plt+0x2b28>
   14148:	ldr	r2, [r6, #204]	; 0xcc
   1414c:	ldr	r1, [r7, #204]	; 0xcc
   14150:	cmp	r1, r2
   14154:	movgt	r6, r3
   14158:	ble	142ec <bfd_arch_bits_per_address@plt+0x2c24>
   1415c:	ldr	r3, [r6, #32]
   14160:	cmp	r3, #0
   14164:	beq	141f0 <bfd_arch_bits_per_address@plt+0x2b28>
   14168:	vmov	s1, r3
   1416c:	vldr	d3, [r6, #168]	; 0xa8
   14170:	vldr	d6, [r6, #192]	; 0xc0
   14174:	vldr	d7, [r7, #216]	; 0xd8
   14178:	vcvt.f64.u32	d2, s1
   1417c:	vldr	s1, [r4, #8]
   14180:	vldr	d4, [r7, #232]	; 0xe8
   14184:	vldr	d5, [r7, #192]	; 0xc0
   14188:	ldr	r3, [r7, #244]	; 0xf4
   1418c:	cmp	r7, r3
   14190:	vcvt.f64.u32	d1, s1
   14194:	vdiv.f64	d2, d1, d2
   14198:	vmul.f64	d3, d2, d3
   1419c:	vmul.f64	d6, d2, d6
   141a0:	vadd.f64	d8, d3, d6
   141a4:	vmul.f64	d2, d8, d7
   141a8:	vmul.f64	d3, d3, d7
   141ac:	vmul.f64	d7, d6, d7
   141b0:	vadd.f64	d4, d4, d2
   141b4:	vadd.f64	d5, d5, d8
   141b8:	vstr	d4, [r7, #232]	; 0xe8
   141bc:	vstr	d5, [r7, #192]	; 0xc0
   141c0:	vstr	d3, [r4, #16]
   141c4:	vstr	d7, [r4, #24]
   141c8:	beq	141e4 <bfd_arch_bits_per_address@plt+0x2b1c>
   141cc:	vldr	d6, [r3, #192]	; 0xc0
   141d0:	vldr	d7, [r3, #232]	; 0xe8
   141d4:	vadd.f64	d6, d6, d8
   141d8:	vadd.f64	d7, d7, d2
   141dc:	vstr	d6, [r3, #192]	; 0xc0
   141e0:	vstr	d7, [r3, #232]	; 0xe8
   141e4:	ldr	r3, [r5]
   141e8:	tst	r3, #1024	; 0x400
   141ec:	bne	14338 <bfd_arch_bits_per_address@plt+0x2c70>
   141f0:	ldr	r4, [r4, #36]	; 0x24
   141f4:	cmp	r4, #0
   141f8:	bne	14104 <bfd_arch_bits_per_address@plt+0x2a3c>
   141fc:	ldr	r7, [fp]
   14200:	add	r8, r8, #1
   14204:	cmp	r7, r8
   14208:	bhi	140e4 <bfd_arch_bits_per_address@plt+0x2a1c>
   1420c:	ldr	ip, [sp, #24]
   14210:	ldr	r4, [ip]
   14214:	ldr	r0, [sp, #28]
   14218:	bl	11374 <free@plt>
   1421c:	add	r0, r4, r7
   14220:	lsl	r0, r0, #2
   14224:	bl	11458 <xmalloc@plt>
   14228:	ldr	ip, [fp]
   1422c:	movw	r3, #31768	; 0x7c18
   14230:	movt	r3, #3
   14234:	cmp	ip, #0
   14238:	mov	r4, r0
   1423c:	beq	1425c <bfd_arch_bits_per_address@plt+0x2b94>
   14240:	add	r0, r0, ip, lsl #2
   14244:	ldr	r2, [r3, #4]
   14248:	mov	r3, r4
   1424c:	str	r2, [r3], #4
   14250:	cmp	r3, r0
   14254:	add	r2, r2, #264	; 0x108
   14258:	bne	1424c <bfd_arch_bits_per_address@plt+0x2b84>
   1425c:	ldr	lr, [sp, #24]
   14260:	ldr	r1, [lr]
   14264:	cmp	r1, #0
   14268:	beq	14294 <bfd_arch_bits_per_address@plt+0x2bcc>
   1426c:	ldr	lr, [sp, #32]
   14270:	add	r0, r4, ip, lsl #2
   14274:	mov	r2, #1
   14278:	ldr	r3, [lr]
   1427c:	add	r3, r3, #264	; 0x108
   14280:	add	r2, r2, #1
   14284:	str	r3, [r0], #4
   14288:	cmp	r2, r1
   1428c:	add	r3, r3, #264	; 0x108
   14290:	bls	14280 <bfd_arch_bits_per_address@plt+0x2bb8>
   14294:	add	r1, r1, ip
   14298:	mov	r0, r4
   1429c:	mov	r2, #4
   142a0:	movw	r3, #14096	; 0x3710
   142a4:	movt	r3, #1
   142a8:	bl	11674 <qsort@plt>
   142ac:	ldr	ip, [sp, #24]
   142b0:	ldr	r3, [fp]
   142b4:	ldr	r0, [ip]
   142b8:	adds	r0, r0, r3
   142bc:	subne	r2, r4, #4
   142c0:	movne	r3, #0
   142c4:	beq	142dc <bfd_arch_bits_per_address@plt+0x2c14>
   142c8:	add	r3, r3, #1
   142cc:	ldr	r1, [r2, #4]!
   142d0:	cmp	r3, r0
   142d4:	str	r3, [r1, #200]	; 0xc8
   142d8:	bne	142c8 <bfd_arch_bits_per_address@plt+0x2c00>
   142dc:	mov	r0, r4
   142e0:	add	sp, sp, #44	; 0x2c
   142e4:	vpop	{d8}
   142e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142ec:	movw	r0, #9512	; 0x2528
   142f0:	mov	r1, #1
   142f4:	movt	r0, #2
   142f8:	mov	r2, #29
   142fc:	ldr	r3, [r9]
   14300:	bl	1144c <fwrite@plt>
   14304:	ldr	r6, [r6, #244]	; 0xf4
   14308:	b	1415c <bfd_arch_bits_per_address@plt+0x2a94>
   1430c:	ldr	r2, [r7, #204]	; 0xcc
   14310:	ldr	r3, [r6, #204]	; 0xcc
   14314:	cmp	r2, r3
   14318:	bgt	1415c <bfd_arch_bits_per_address@plt+0x2a94>
   1431c:	movw	r0, #9512	; 0x2528
   14320:	mov	r1, #1
   14324:	mov	r2, #29
   14328:	ldr	r3, [r9]
   1432c:	movt	r0, #2
   14330:	bl	1144c <fwrite@plt>
   14334:	b	141f0 <bfd_arch_bits_per_address@plt+0x2b28>
   14338:	movw	r1, #9544	; 0x2548
   1433c:	mov	r0, #1
   14340:	movt	r1, #2
   14344:	bl	115e4 <__printf_chk@plt>
   14348:	mov	r0, r6
   1434c:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   14350:	ldrd	r0, [r6, #192]	; 0xc0
   14354:	ldrd	r2, [r6, #168]	; 0xa8
   14358:	strd	r0, [sp]
   1435c:	movw	r1, #9564	; 0x255c
   14360:	ldr	ip, [r4, #8]
   14364:	movt	r1, #2
   14368:	mov	r0, #1
   1436c:	str	ip, [sp, #8]
   14370:	ldr	ip, [r6, #32]
   14374:	str	ip, [sp, #12]
   14378:	bl	115e4 <__printf_chk@plt>
   1437c:	movw	r1, #9588	; 0x2574
   14380:	mov	r0, #1
   14384:	movt	r1, #2
   14388:	bl	115e4 <__printf_chk@plt>
   1438c:	mov	r0, r7
   14390:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   14394:	movw	r1, #9608	; 0x2588
   14398:	vmov	r2, r3, d8
   1439c:	movt	r1, #2
   143a0:	mov	r0, #1
   143a4:	bl	115e4 <__printf_chk@plt>
   143a8:	b	141f0 <bfd_arch_bits_per_address@plt+0x2b28>
   143ac:	ldr	ip, [sp, #36]	; 0x24
   143b0:	ldr	r3, [ip, #72]	; 0x48
   143b4:	cmp	r3, #0
   143b8:	bne	13f8c <bfd_arch_bits_per_address@plt+0x28c4>
   143bc:	ldr	r0, [pc, #-1412]	; 13e40 <bfd_arch_bits_per_address@plt+0x2778>
   143c0:	ldrd	r2, [r8]
   143c4:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   143c8:	cmp	r0, #0
   143cc:	bne	13f8c <bfd_arch_bits_per_address@plt+0x28c4>
   143d0:	b	13ec4 <bfd_arch_bits_per_address@plt+0x27fc>
   143d4:	movw	r0, #31780	; 0x7c24
   143d8:	movt	r0, #3
   143dc:	ldr	r3, [r0]
   143e0:	cmp	r3, #0
   143e4:	bne	13ea0 <bfd_arch_bits_per_address@plt+0x27d8>
   143e8:	add	r0, r0, #12
   143ec:	ldrd	r2, [r8]
   143f0:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   143f4:	cmp	r0, #0
   143f8:	bne	13ea0 <bfd_arch_bits_per_address@plt+0x27d8>
   143fc:	b	13e98 <bfd_arch_bits_per_address@plt+0x27d0>
   14400:	mov	ip, sl
   14404:	vldr	d7, [pc, #244]	; 14500 <bfd_arch_bits_per_address@plt+0x2e38>
   14408:	b	13e24 <bfd_arch_bits_per_address@plt+0x275c>
   1440c:	ldr	r0, [pc, #244]	; 14508 <bfd_arch_bits_per_address@plt+0x2e40>
   14410:	ldrd	r2, [r8]
   14414:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   14418:	cmp	r0, #0
   1441c:	beq	13f8c <bfd_arch_bits_per_address@plt+0x28c4>
   14420:	vstr	d8, [r8, #216]	; 0xd8
   14424:	vldr	d7, [pc, #212]	; 14500 <bfd_arch_bits_per_address@plt+0x2e38>
   14428:	b	13ecc <bfd_arch_bits_per_address@plt+0x2804>
   1442c:	movw	r1, #9252	; 0x2424
   14430:	mov	r0, #1
   14434:	movt	r1, #2
   14438:	bl	115e4 <__printf_chk@plt>
   1443c:	mov	r0, r9
   14440:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   14444:	movw	r1, #9268	; 0x2434
   14448:	mov	r2, r6
   1444c:	movt	r1, #2
   14450:	mov	r0, #1
   14454:	bl	115e4 <__printf_chk@plt>
   14458:	b	13c64 <bfd_arch_bits_per_address@plt+0x259c>
   1445c:	movw	r0, #9296	; 0x2450
   14460:	movt	r0, #2
   14464:	bl	114e8 <puts@plt>
   14468:	ldr	r7, [fp]
   1446c:	cmp	r7, #0
   14470:	beq	13f04 <bfd_arch_bits_per_address@plt+0x283c>
   14474:	ldr	r4, [sp, #28]
   14478:	mov	r6, #0
   1447c:	mov	r0, #1
   14480:	movw	r1, #9336	; 0x2478
   14484:	movt	r1, #2
   14488:	add	r6, r6, r0
   1448c:	bl	115e4 <__printf_chk@plt>
   14490:	ldr	r3, [r4]
   14494:	movw	r1, #9352	; 0x2488
   14498:	mov	r0, #1
   1449c:	movt	r1, #2
   144a0:	ldr	r2, [r3, #204]	; 0xcc
   144a4:	bl	115e4 <__printf_chk@plt>
   144a8:	ldr	r0, [r4], #4
   144ac:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   144b0:	mov	r0, #10
   144b4:	bl	115b4 <putchar@plt>
   144b8:	ldr	r7, [fp]
   144bc:	cmp	r7, r6
   144c0:	bhi	1447c <bfd_arch_bits_per_address@plt+0x2db4>
   144c4:	b	13d54 <bfd_arch_bits_per_address@plt+0x268c>
   144c8:	movw	ip, #31716	; 0x7be4
   144cc:	movt	ip, #3
   144d0:	mov	r3, #0
   144d4:	str	ip, [sp, #24]
   144d8:	mov	r0, #264	; 0x108
   144dc:	str	r3, [ip]
   144e0:	b	13bc4 <bfd_arch_bits_per_address@plt+0x24fc>
   144e4:	movw	r5, #30536	; 0x7748
   144e8:	movt	r5, #3
   144ec:	b	13cec <bfd_arch_bits_per_address@plt+0x2624>
   144f0:	mov	r0, #264	; 0x108
   144f4:	b	13bc4 <bfd_arch_bits_per_address@plt+0x24fc>
   144f8:	mov	r3, r4
   144fc:	b	13b54 <bfd_arch_bits_per_address@plt+0x248c>
	...
   14508:	andeq	r7, r3, r8, ror ip
   1450c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14510:	movw	r5, #30536	; 0x7748
   14514:	movt	r5, #3
   14518:	mov	r6, r0
   1451c:	ldr	r3, [r5]
   14520:	tst	r3, #2
   14524:	bne	145c0 <bfd_arch_bits_per_address@plt+0x2ef8>
   14528:	ldr	r3, [r6, #204]	; 0xcc
   1452c:	add	r2, r3, #1
   14530:	cmp	r2, #1
   14534:	pophi	{r4, r5, r6, r7, r8, r9, sl, pc}
   14538:	cmp	r3, #0
   1453c:	beq	145e8 <bfd_arch_bits_per_address@plt+0x2f20>
   14540:	movw	r7, #30480	; 0x7710
   14544:	movt	r7, #3
   14548:	ldr	r2, [r7]
   1454c:	cmp	r2, #0
   14550:	ble	14598 <bfd_arch_bits_per_address@plt+0x2ed0>
   14554:	ldr	r3, [r7, #4]
   14558:	add	r1, r3, r2, lsl #3
   1455c:	ldr	sl, [r3, r2, lsl #3]
   14560:	cmp	r6, sl
   14564:	beq	1469c <bfd_arch_bits_per_address@plt+0x2fd4>
   14568:	ldr	r3, [r6, #244]	; 0xf4
   1456c:	mov	r8, r2
   14570:	b	14580 <bfd_arch_bits_per_address@plt+0x2eb8>
   14574:	ldr	sl, [r1, #-8]!
   14578:	cmp	r6, sl
   1457c:	beq	146a0 <bfd_arch_bits_per_address@plt+0x2fd8>
   14580:	cmp	r6, r3
   14584:	beq	14590 <bfd_arch_bits_per_address@plt+0x2ec8>
   14588:	cmp	sl, r3
   1458c:	beq	146a0 <bfd_arch_bits_per_address@plt+0x2fd8>
   14590:	subs	r8, r8, #1
   14594:	bne	14574 <bfd_arch_bits_per_address@plt+0x2eac>
   14598:	movw	r3, #30432	; 0x76e0
   1459c:	movt	r3, #3
   145a0:	movw	r0, #9972	; 0x26f4
   145a4:	mov	r1, #1
   145a8:	ldr	r3, [r3]
   145ac:	movt	r0, #2
   145b0:	mov	r2, #41	; 0x29
   145b4:	bl	1144c <fwrite@plt>
   145b8:	mov	r0, #1
   145bc:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   145c0:	movw	r1, #9632	; 0x25a0
   145c4:	mov	r0, #1
   145c8:	movt	r1, #2
   145cc:	bl	115e4 <__printf_chk@plt>
   145d0:	mov	r0, r6
   145d4:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   145d8:	movw	r0, #17068	; 0x42ac
   145dc:	movt	r0, #2
   145e0:	bl	114e8 <puts@plt>
   145e4:	b	14528 <bfd_arch_bits_per_address@plt+0x2e60>
   145e8:	movw	r7, #30480	; 0x7710
   145ec:	movt	r7, #3
   145f0:	ldr	r2, [r7]
   145f4:	ldr	r3, [r7, #8]
   145f8:	add	r2, r2, #1
   145fc:	str	r2, [r7]
   14600:	cmp	r2, r3
   14604:	bge	1487c <bfd_arch_bits_per_address@plt+0x31b4>
   14608:	ldr	r3, [r7, #4]
   1460c:	ldr	r0, [r5]
   14610:	add	r1, r3, r2, lsl #3
   14614:	str	r6, [r3, r2, lsl #3]
   14618:	mvn	r3, #0
   1461c:	tst	r0, #2
   14620:	str	r2, [r1, #4]
   14624:	str	r3, [r6, #204]	; 0xcc
   14628:	beq	1464c <bfd_arch_bits_per_address@plt+0x2f84>
   1462c:	movw	r1, #9848	; 0x2678
   14630:	mov	r0, #1
   14634:	movt	r1, #2
   14638:	bl	115e4 <__printf_chk@plt>
   1463c:	mov	r0, r6
   14640:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   14644:	mov	r0, #10
   14648:	bl	115b4 <putchar@plt>
   1464c:	ldr	r4, [r6, #256]	; 0x100
   14650:	cmp	r4, #0
   14654:	beq	1466c <bfd_arch_bits_per_address@plt+0x2fa4>
   14658:	ldr	r0, [r4, #4]
   1465c:	bl	1450c <bfd_arch_bits_per_address@plt+0x2e44>
   14660:	ldr	r4, [r4, #36]	; 0x24
   14664:	cmp	r4, #0
   14668:	bne	14658 <bfd_arch_bits_per_address@plt+0x2f90>
   1466c:	ldr	r3, [r5]
   14670:	movw	r4, #30536	; 0x7748
   14674:	movt	r4, #3
   14678:	ands	r3, r3, #2
   1467c:	bne	1482c <bfd_arch_bits_per_address@plt+0x3164>
   14680:	ldr	r2, [r6, #244]	; 0xf4
   14684:	cmp	r6, r2
   14688:	beq	14904 <bfd_arch_bits_per_address@plt+0x323c>
   1468c:	ldr	r3, [r7]
   14690:	sub	r3, r3, #1
   14694:	str	r3, [r7]
   14698:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1469c:	mov	r8, r2
   146a0:	ldr	r3, [r5]
   146a4:	tst	r3, #2
   146a8:	bne	148a0 <bfd_arch_bits_per_address@plt+0x31d8>
   146ac:	cmp	r8, r2
   146b0:	beq	148d4 <bfd_arch_bits_per_address@plt+0x320c>
   146b4:	ldr	r3, [sl, #248]	; 0xf8
   146b8:	mov	r4, sl
   146bc:	cmp	r3, #0
   146c0:	bne	146d8 <bfd_arch_bits_per_address@plt+0x3010>
   146c4:	b	14708 <bfd_arch_bits_per_address@plt+0x3040>
   146c8:	ldr	r4, [r4, #248]	; 0xf8
   146cc:	ldr	r3, [r4, #248]	; 0xf8
   146d0:	cmp	r3, #0
   146d4:	beq	14708 <bfd_arch_bits_per_address@plt+0x3040>
   146d8:	ldr	r3, [r5]
   146dc:	tst	r3, #2
   146e0:	beq	146c8 <bfd_arch_bits_per_address@plt+0x3000>
   146e4:	movw	r1, #9700	; 0x25e4
   146e8:	mov	r0, #1
   146ec:	movt	r1, #2
   146f0:	bl	115e4 <__printf_chk@plt>
   146f4:	mov	r0, r4
   146f8:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   146fc:	mov	r0, #10
   14700:	bl	115b4 <putchar@plt>
   14704:	b	146c8 <bfd_arch_bits_per_address@plt+0x3000>
   14708:	ldr	r9, [sl, #244]	; 0xf4
   1470c:	cmp	sl, r9
   14710:	beq	14720 <bfd_arch_bits_per_address@plt+0x3058>
   14714:	ldr	r3, [r5]
   14718:	tst	r3, #2
   1471c:	bne	14968 <bfd_arch_bits_per_address@plt+0x32a0>
   14720:	ldr	r3, [r7]
   14724:	add	r8, r8, #1
   14728:	cmp	r8, r3
   1472c:	popgt	{r4, r5, r6, r7, r8, r9, sl, pc}
   14730:	lsl	sl, r8, #3
   14734:	b	14754 <bfd_arch_bits_per_address@plt+0x308c>
   14738:	cmp	r3, r9
   1473c:	bne	149a0 <bfd_arch_bits_per_address@plt+0x32d8>
   14740:	ldr	r3, [r7]
   14744:	add	r8, r8, #1
   14748:	add	sl, sl, #8
   1474c:	cmp	r8, r3
   14750:	bgt	147ec <bfd_arch_bits_per_address@plt+0x3124>
   14754:	ldr	r3, [r7, #4]
   14758:	ldr	r6, [r3, sl]
   1475c:	ldr	r3, [r6, #244]	; 0xf4
   14760:	cmp	r6, r3
   14764:	bne	14738 <bfd_arch_bits_per_address@plt+0x3070>
   14768:	ldr	r3, [r5]
   1476c:	str	r6, [r4, #248]	; 0xf8
   14770:	tst	r3, #2
   14774:	str	r9, [r6, #244]	; 0xf4
   14778:	bne	147f0 <bfd_arch_bits_per_address@plt+0x3128>
   1477c:	ldr	r3, [r6, #248]	; 0xf8
   14780:	mov	r4, r6
   14784:	cmp	r3, #0
   14788:	bne	147a0 <bfd_arch_bits_per_address@plt+0x30d8>
   1478c:	b	14740 <bfd_arch_bits_per_address@plt+0x3078>
   14790:	ldr	r4, [r4, #248]	; 0xf8
   14794:	ldr	r3, [r4, #248]	; 0xf8
   14798:	cmp	r3, #0
   1479c:	beq	14740 <bfd_arch_bits_per_address@plt+0x3078>
   147a0:	ldr	r2, [r5]
   147a4:	str	r9, [r3, #244]	; 0xf4
   147a8:	tst	r2, #2
   147ac:	beq	14790 <bfd_arch_bits_per_address@plt+0x30c8>
   147b0:	movw	r1, #9780	; 0x2634
   147b4:	mov	r0, #1
   147b8:	movt	r1, #2
   147bc:	bl	115e4 <__printf_chk@plt>
   147c0:	ldr	r0, [r4, #248]	; 0xf8
   147c4:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   147c8:	movw	r1, #9772	; 0x262c
   147cc:	mov	r0, #1
   147d0:	movt	r1, #2
   147d4:	bl	115e4 <__printf_chk@plt>
   147d8:	mov	r0, r9
   147dc:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   147e0:	mov	r0, #10
   147e4:	bl	115b4 <putchar@plt>
   147e8:	b	14790 <bfd_arch_bits_per_address@plt+0x30c8>
   147ec:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   147f0:	movw	r1, #9748	; 0x2614
   147f4:	mov	r0, #1
   147f8:	movt	r1, #2
   147fc:	bl	115e4 <__printf_chk@plt>
   14800:	mov	r0, r6
   14804:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   14808:	movw	r1, #9772	; 0x262c
   1480c:	mov	r0, #1
   14810:	movt	r1, #2
   14814:	bl	115e4 <__printf_chk@plt>
   14818:	mov	r0, r9
   1481c:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   14820:	mov	r0, #10
   14824:	bl	115b4 <putchar@plt>
   14828:	b	1477c <bfd_arch_bits_per_address@plt+0x30b4>
   1482c:	ldr	r2, [r7]
   14830:	movw	r1, #9868	; 0x268c
   14834:	mov	r0, #1
   14838:	movt	r1, #2
   1483c:	bl	115e4 <__printf_chk@plt>
   14840:	mov	r0, r6
   14844:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   14848:	mov	r0, #10
   1484c:	bl	115b4 <putchar@plt>
   14850:	ldr	r2, [r6, #244]	; 0xf4
   14854:	ldr	r3, [r4]
   14858:	cmp	r6, r2
   1485c:	and	r3, r3, #2
   14860:	beq	14904 <bfd_arch_bits_per_address@plt+0x323c>
   14864:	cmp	r3, #0
   14868:	beq	1468c <bfd_arch_bits_per_address@plt+0x2fc4>
   1486c:	movw	r0, #9936	; 0x26d0
   14870:	movt	r0, #2
   14874:	bl	114e8 <puts@plt>
   14878:	b	1468c <bfd_arch_bits_per_address@plt+0x2fc4>
   1487c:	add	r1, r3, #128	; 0x80
   14880:	ldr	r0, [r7, #4]
   14884:	str	r1, [r7, #8]
   14888:	lsl	r1, r1, #3
   1488c:	bl	11410 <xrealloc@plt>
   14890:	ldr	r2, [r7]
   14894:	mov	r3, r0
   14898:	str	r0, [r7, #4]
   1489c:	b	1460c <bfd_arch_bits_per_address@plt+0x2f44>
   148a0:	movw	r1, #9644	; 0x25ac
   148a4:	mov	r0, #1
   148a8:	movt	r1, #2
   148ac:	mov	r3, r8
   148b0:	bl	115e4 <__printf_chk@plt>
   148b4:	cmp	sl, #0
   148b8:	beq	1498c <bfd_arch_bits_per_address@plt+0x32c4>
   148bc:	mov	r0, sl
   148c0:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   148c4:	mov	r0, #10
   148c8:	bl	115b4 <putchar@plt>
   148cc:	ldr	r2, [r7]
   148d0:	b	146ac <bfd_arch_bits_per_address@plt+0x2fe4>
   148d4:	ldr	r3, [r5]
   148d8:	tst	r3, #2
   148dc:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   148e0:	movw	r1, #9684	; 0x25d4
   148e4:	mov	r0, #1
   148e8:	movt	r1, #2
   148ec:	bl	115e4 <__printf_chk@plt>
   148f0:	mov	r0, r6
   148f4:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   148f8:	mov	r0, #10
   148fc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14900:	b	115b4 <putchar@plt>
   14904:	ldr	r2, [r7, #12]
   14908:	add	r2, r2, #1
   1490c:	str	r2, [r7, #12]
   14910:	b	1492c <bfd_arch_bits_per_address@plt+0x3264>
   14914:	ldr	r6, [r6, #248]	; 0xf8
   14918:	cmp	r6, #0
   1491c:	beq	1468c <bfd_arch_bits_per_address@plt+0x2fc4>
   14920:	ldr	r3, [r5]
   14924:	ldr	r2, [r7, #12]
   14928:	and	r3, r3, #2
   1492c:	cmp	r3, #0
   14930:	str	r2, [r6, #204]	; 0xcc
   14934:	beq	14914 <bfd_arch_bits_per_address@plt+0x324c>
   14938:	movw	r1, #9888	; 0x26a0
   1493c:	mov	r0, #1
   14940:	movt	r1, #2
   14944:	bl	115e4 <__printf_chk@plt>
   14948:	mov	r0, r6
   1494c:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   14950:	movw	r1, #9912	; 0x26b8
   14954:	ldr	r2, [r7, #12]
   14958:	movt	r1, #2
   1495c:	mov	r0, #1
   14960:	bl	115e4 <__printf_chk@plt>
   14964:	b	14914 <bfd_arch_bits_per_address@plt+0x324c>
   14968:	movw	r1, #9720	; 0x25f8
   1496c:	mov	r0, #1
   14970:	movt	r1, #2
   14974:	bl	115e4 <__printf_chk@plt>
   14978:	mov	r0, r9
   1497c:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   14980:	mov	r0, #10
   14984:	bl	115b4 <putchar@plt>
   14988:	b	14720 <bfd_arch_bits_per_address@plt+0x3058>
   1498c:	movw	r1, #8644	; 0x21c4
   14990:	mov	r0, #1
   14994:	movt	r1, #2
   14998:	bl	115e4 <__printf_chk@plt>
   1499c:	b	148c4 <bfd_arch_bits_per_address@plt+0x31fc>
   149a0:	movw	r3, #30432	; 0x76e0
   149a4:	movt	r3, #3
   149a8:	movw	r0, #9808	; 0x2650
   149ac:	mov	r1, #1
   149b0:	ldr	r3, [r3]
   149b4:	movt	r0, #2
   149b8:	mov	r2, #38	; 0x26
   149bc:	bl	1144c <fwrite@plt>
   149c0:	mov	r0, #1
   149c4:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   149c8:	ldr	r3, [r0]
   149cc:	ldr	r1, [r1]
   149d0:	ldr	r2, [r3, #8]
   149d4:	ldr	r3, [r1, #8]
   149d8:	cmp	r2, r3
   149dc:	bhi	149ec <bfd_arch_bits_per_address@plt+0x3324>
   149e0:	movcs	r0, #0
   149e4:	movcc	r0, #1
   149e8:	bx	lr
   149ec:	mvn	r0, #0
   149f0:	bx	lr
   149f4:	ldr	r3, [r0]
   149f8:	ldr	r1, [r1]
   149fc:	ldr	r2, [r3, #36]	; 0x24
   14a00:	ldr	r3, [r1, #36]	; 0x24
   14a04:	cmp	r2, r3
   14a08:	bgt	14a18 <bfd_arch_bits_per_address@plt+0x3350>
   14a0c:	movge	r0, #0
   14a10:	movlt	r0, #1
   14a14:	bx	lr
   14a18:	mvn	r0, #0
   14a1c:	bx	lr
   14a20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14a24:	vpush	{d8-d9}
   14a28:	cmp	r2, #0
   14a2c:	sub	sp, sp, #36	; 0x24
   14a30:	mov	r6, r1
   14a34:	str	r2, [sp, #8]
   14a38:	str	r0, [sp, #24]
   14a3c:	str	r3, [sp, #12]
   14a40:	ldr	r8, [sp, #88]	; 0x58
   14a44:	bne	14c60 <bfd_arch_bits_per_address@plt+0x3598>
   14a48:	cmp	r1, #0
   14a4c:	beq	14c54 <bfd_arch_bits_per_address@plt+0x358c>
   14a50:	ldr	r2, [sp, #24]
   14a54:	mov	r3, #0
   14a58:	add	r1, r2, r1, lsl #2
   14a5c:	mov	r2, #0
   14a60:	strd	r2, [sp, #16]
   14a64:	mov	r2, #0
   14a68:	ldr	r3, [sp, #24]
   14a6c:	mov	r0, r3
   14a70:	mov	r3, #0
   14a74:	ldr	ip, [r0], #4
   14a78:	ldr	ip, [ip, #8]
   14a7c:	adds	r2, r2, ip
   14a80:	adc	r3, r3, #0
   14a84:	cmp	r0, r1
   14a88:	bne	14a74 <bfd_arch_bits_per_address@plt+0x33ac>
   14a8c:	ldr	r7, [sp, #24]
   14a90:	mov	r5, #0
   14a94:	mov	sl, #0
   14a98:	mov	fp, #0
   14a9c:	strd	r2, [sp, #16]
   14aa0:	vldr	d9, [pc, #992]	; 14e88 <bfd_arch_bits_per_address@plt+0x37c0>
   14aa4:	ldr	r4, [r7], #4
   14aa8:	ldr	r1, [r4, #8]
   14aac:	ldr	r2, [r4, #40]	; 0x28
   14ab0:	adds	sl, sl, r1
   14ab4:	adc	fp, fp, #0
   14ab8:	cmp	r2, #0
   14abc:	bne	14b54 <bfd_arch_bits_per_address@plt+0x348c>
   14ac0:	ldr	r2, [sp, #8]
   14ac4:	cmp	r2, #0
   14ac8:	ldm	r4, {r2, r9}
   14acc:	bne	14b04 <bfd_arch_bits_per_address@plt+0x343c>
   14ad0:	mov	r0, sl
   14ad4:	mov	r1, fp
   14ad8:	str	r2, [sp, #4]
   14adc:	bl	1fd70 <bfd_arch_bits_per_address@plt+0xe6a8>
   14ae0:	vmov	d8, r0, r1
   14ae4:	ldrd	r0, [sp, #16]
   14ae8:	bl	1fd70 <bfd_arch_bits_per_address@plt+0xe6a8>
   14aec:	ldr	r2, [sp, #4]
   14af0:	vmov	d7, r0, r1
   14af4:	vdiv.f64	d8, d8, d7
   14af8:	vcmpe.f64	d8, d9
   14afc:	vmrs	APSR_nzcv, fpscr
   14b00:	bgt	14b40 <bfd_arch_bits_per_address@plt+0x3478>
   14b04:	ldrb	r1, [r9, #28]
   14b08:	tst	r1, #16
   14b0c:	bne	14b40 <bfd_arch_bits_per_address@plt+0x3478>
   14b10:	ldrb	r1, [r2, #28]
   14b14:	tst	r1, #16
   14b18:	bne	14b40 <bfd_arch_bits_per_address@plt+0x3478>
   14b1c:	ldr	r1, [r2, #160]	; 0xa0
   14b20:	cmp	r1, #0
   14b24:	beq	14c80 <bfd_arch_bits_per_address@plt+0x35b8>
   14b28:	ldr	r0, [r2, #164]	; 0xa4
   14b2c:	cmp	r0, #0
   14b30:	beq	14c90 <bfd_arch_bits_per_address@plt+0x35c8>
   14b34:	ldr	ip, [r9, #160]	; 0xa0
   14b38:	cmp	ip, #0
   14b3c:	beq	14e90 <bfd_arch_bits_per_address@plt+0x37c8>
   14b40:	ldr	r2, [r8]
   14b44:	ldr	r3, [sp, #12]
   14b48:	add	r1, r2, #1
   14b4c:	str	r1, [r8]
   14b50:	str	r4, [r3, r2, lsl #2]
   14b54:	add	r5, r5, #1
   14b58:	cmp	r6, r5
   14b5c:	bhi	14aa4 <bfd_arch_bits_per_address@plt+0x33dc>
   14b60:	cmp	r6, #0
   14b64:	beq	14be8 <bfd_arch_bits_per_address@plt+0x3520>
   14b68:	ldr	r2, [sp, #24]
   14b6c:	mov	r5, #0
   14b70:	sub	r7, r2, #4
   14b74:	ldr	r3, [r7, #4]!
   14b78:	ldr	r4, [r3]
   14b7c:	ldrb	r2, [r4, #28]
   14b80:	tst	r2, #16
   14b84:	bne	14bdc <bfd_arch_bits_per_address@plt+0x3514>
   14b88:	ldr	r3, [r3, #4]
   14b8c:	ldrb	r3, [r3, #28]
   14b90:	tst	r3, #16
   14b94:	bne	14bdc <bfd_arch_bits_per_address@plt+0x3514>
   14b98:	ldr	r3, [r4, #160]	; 0xa0
   14b9c:	cmp	r3, #0
   14ba0:	ldr	r3, [r4, #164]	; 0xa4
   14ba4:	bne	14bb4 <bfd_arch_bits_per_address@plt+0x34ec>
   14ba8:	b	14c74 <bfd_arch_bits_per_address@plt+0x35ac>
   14bac:	mov	r4, r3
   14bb0:	ldr	r3, [r3, #164]	; 0xa4
   14bb4:	cmp	r3, #0
   14bb8:	bne	14bac <bfd_arch_bits_per_address@plt+0x34e4>
   14bbc:	ldrb	r3, [r4, #28]
   14bc0:	ldr	r0, [r4, #16]
   14bc4:	orr	r3, r3, #16
   14bc8:	strb	r3, [r4, #28]
   14bcc:	bl	114e8 <puts@plt>
   14bd0:	ldr	r4, [r4, #160]	; 0xa0
   14bd4:	cmp	r4, #0
   14bd8:	bne	14bbc <bfd_arch_bits_per_address@plt+0x34f4>
   14bdc:	add	r5, r5, #1
   14be0:	cmp	r5, r6
   14be4:	bne	14b74 <bfd_arch_bits_per_address@plt+0x34ac>
   14be8:	ldr	r2, [sp, #8]
   14bec:	cmp	r2, #0
   14bf0:	beq	14c54 <bfd_arch_bits_per_address@plt+0x358c>
   14bf4:	cmp	r6, #0
   14bf8:	beq	14c54 <bfd_arch_bits_per_address@plt+0x358c>
   14bfc:	ldr	r2, [sp, #24]
   14c00:	mov	r4, #0
   14c04:	sub	r5, r2, #4
   14c08:	b	14c14 <bfd_arch_bits_per_address@plt+0x354c>
   14c0c:	cmp	r4, r6
   14c10:	beq	14c54 <bfd_arch_bits_per_address@plt+0x358c>
   14c14:	ldr	r3, [r5, #4]!
   14c18:	add	r4, r4, #1
   14c1c:	ldr	r2, [r3]
   14c20:	ldrb	r1, [r2, #28]
   14c24:	tst	r1, #16
   14c28:	bne	14c0c <bfd_arch_bits_per_address@plt+0x3544>
   14c2c:	ldr	r3, [r3, #4]
   14c30:	ldrb	r3, [r3, #28]
   14c34:	tst	r3, #16
   14c38:	bne	14c0c <bfd_arch_bits_per_address@plt+0x3544>
   14c3c:	orr	r1, r1, #16
   14c40:	ldr	r0, [r2, #16]
   14c44:	strb	r1, [r2, #28]
   14c48:	bl	114e8 <puts@plt>
   14c4c:	cmp	r4, r6
   14c50:	bne	14c14 <bfd_arch_bits_per_address@plt+0x354c>
   14c54:	add	sp, sp, #36	; 0x24
   14c58:	vpop	{d8-d9}
   14c5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c60:	cmp	r1, #0
   14c64:	movne	r2, #0
   14c68:	movne	r3, #0
   14c6c:	bne	14a8c <bfd_arch_bits_per_address@plt+0x33c4>
   14c70:	b	14c54 <bfd_arch_bits_per_address@plt+0x358c>
   14c74:	cmp	r3, #0
   14c78:	bne	14bb4 <bfd_arch_bits_per_address@plt+0x34ec>
   14c7c:	b	14bdc <bfd_arch_bits_per_address@plt+0x3514>
   14c80:	ldr	r3, [r2, #164]	; 0xa4
   14c84:	cmp	r3, #0
   14c88:	mov	r0, r3
   14c8c:	beq	14d7c <bfd_arch_bits_per_address@plt+0x36b4>
   14c90:	ldr	ip, [r9, #160]	; 0xa0
   14c94:	cmp	ip, #0
   14c98:	bne	14b40 <bfd_arch_bits_per_address@plt+0x3478>
   14c9c:	ldr	ip, [r9, #164]	; 0xa4
   14ca0:	cmp	ip, #0
   14ca4:	bne	14b40 <bfd_arch_bits_per_address@plt+0x3478>
   14ca8:	cmp	r1, #0
   14cac:	beq	14ea0 <bfd_arch_bits_per_address@plt+0x37d8>
   14cb0:	mov	r3, #0
   14cb4:	b	14cbc <bfd_arch_bits_per_address@plt+0x35f4>
   14cb8:	mov	r1, ip
   14cbc:	ldr	ip, [r1, #160]	; 0xa0
   14cc0:	add	r3, r3, #1
   14cc4:	cmp	ip, #0
   14cc8:	bne	14cb8 <bfd_arch_bits_per_address@plt+0x35f0>
   14ccc:	subs	ip, r0, #0
   14cd0:	beq	14e60 <bfd_arch_bits_per_address@plt+0x3798>
   14cd4:	mov	r0, #0
   14cd8:	b	14ce0 <bfd_arch_bits_per_address@plt+0x3618>
   14cdc:	mov	ip, r2
   14ce0:	ldr	r2, [ip, #164]	; 0xa4
   14ce4:	add	r0, r0, #1
   14ce8:	cmp	r2, #0
   14cec:	bne	14cdc <bfd_arch_bits_per_address@plt+0x3614>
   14cf0:	cmp	r3, r0
   14cf4:	movgt	r1, ip
   14cf8:	ldr	r3, [r1, #160]	; 0xa0
   14cfc:	cmp	r3, #0
   14d00:	movne	r0, r3
   14d04:	bne	14d10 <bfd_arch_bits_per_address@plt+0x3648>
   14d08:	b	14e50 <bfd_arch_bits_per_address@plt+0x3788>
   14d0c:	mov	r0, r2
   14d10:	ldr	r2, [r0, #160]	; 0xa0
   14d14:	cmp	r2, #0
   14d18:	bne	14d0c <bfd_arch_bits_per_address@plt+0x3644>
   14d1c:	ldr	r2, [r9, #160]	; 0xa0
   14d20:	cmp	r2, #0
   14d24:	str	r2, [sp, #28]
   14d28:	ldrne	ip, [sp, #28]
   14d2c:	bne	14d38 <bfd_arch_bits_per_address@plt+0x3670>
   14d30:	b	14e04 <bfd_arch_bits_per_address@plt+0x373c>
   14d34:	mov	ip, r2
   14d38:	ldr	r2, [ip, #160]	; 0xa0
   14d3c:	cmp	r2, #0
   14d40:	bne	14d34 <bfd_arch_bits_per_address@plt+0x366c>
   14d44:	cmp	ip, r1
   14d48:	cmpeq	r0, r9
   14d4c:	beq	14b40 <bfd_arch_bits_per_address@plt+0x3478>
   14d50:	cmp	r3, #0
   14d54:	beq	14e20 <bfd_arch_bits_per_address@plt+0x3758>
   14d58:	ldr	r0, [sp, #28]
   14d5c:	cmp	r0, #0
   14d60:	bne	14b54 <bfd_arch_bits_per_address@plt+0x348c>
   14d64:	str	r9, [r1, #164]	; 0xa4
   14d68:	mov	r3, #1
   14d6c:	str	r1, [r9, #160]	; 0xa0
   14d70:	ldr	r2, [r7, #-4]
   14d74:	str	r3, [r2, #40]	; 0x28
   14d78:	b	14b54 <bfd_arch_bits_per_address@plt+0x348c>
   14d7c:	ldr	r1, [r9, #160]	; 0xa0
   14d80:	cmp	r1, #0
   14d84:	beq	14e7c <bfd_arch_bits_per_address@plt+0x37b4>
   14d88:	str	r3, [sp, #28]
   14d8c:	mov	ip, r3
   14d90:	b	14d98 <bfd_arch_bits_per_address@plt+0x36d0>
   14d94:	mov	r1, r0
   14d98:	ldr	r0, [r1, #160]	; 0xa0
   14d9c:	add	ip, ip, #1
   14da0:	cmp	r0, #0
   14da4:	bne	14d94 <bfd_arch_bits_per_address@plt+0x36cc>
   14da8:	str	ip, [sp, #28]
   14dac:	ldr	ip, [r9, #164]	; 0xa4
   14db0:	cmp	ip, #0
   14db4:	beq	14e74 <bfd_arch_bits_per_address@plt+0x37ac>
   14db8:	mov	r9, #0
   14dbc:	b	14dc4 <bfd_arch_bits_per_address@plt+0x36fc>
   14dc0:	mov	ip, r0
   14dc4:	ldr	r0, [ip, #164]	; 0xa4
   14dc8:	add	r9, r9, #1
   14dcc:	cmp	r0, #0
   14dd0:	bne	14dc0 <bfd_arch_bits_per_address@plt+0x36f8>
   14dd4:	ldr	r0, [sp, #28]
   14dd8:	cmp	r9, r0
   14ddc:	movgt	ip, r1
   14de0:	mov	r0, r2
   14de4:	b	14df0 <bfd_arch_bits_per_address@plt+0x3728>
   14de8:	mov	r0, r3
   14dec:	ldr	r3, [r3, #164]	; 0xa4
   14df0:	cmp	r3, #0
   14df4:	bne	14de8 <bfd_arch_bits_per_address@plt+0x3720>
   14df8:	mov	r1, r2
   14dfc:	mov	r9, ip
   14e00:	b	14d1c <bfd_arch_bits_per_address@plt+0x3654>
   14e04:	mov	ip, r9
   14e08:	b	14e10 <bfd_arch_bits_per_address@plt+0x3748>
   14e0c:	mov	ip, r2
   14e10:	ldr	r2, [ip, #164]	; 0xa4
   14e14:	cmp	r2, #0
   14e18:	bne	14e0c <bfd_arch_bits_per_address@plt+0x3744>
   14e1c:	b	14d44 <bfd_arch_bits_per_address@plt+0x367c>
   14e20:	ldr	r2, [r1, #164]	; 0xa4
   14e24:	cmp	r2, #0
   14e28:	ldr	r2, [r9, #164]	; 0xa4
   14e2c:	beq	14e68 <bfd_arch_bits_per_address@plt+0x37a0>
   14e30:	cmp	r2, #0
   14e34:	bne	14b54 <bfd_arch_bits_per_address@plt+0x348c>
   14e38:	str	r9, [r1, #160]	; 0xa0
   14e3c:	mov	r0, #1
   14e40:	str	r1, [r9, #164]	; 0xa4
   14e44:	ldr	r2, [r7, #-4]
   14e48:	str	r0, [r2, #40]	; 0x28
   14e4c:	b	14b54 <bfd_arch_bits_per_address@plt+0x348c>
   14e50:	ldr	r3, [r1, #164]	; 0xa4
   14e54:	mov	ip, r9
   14e58:	mov	r2, r1
   14e5c:	b	14de0 <bfd_arch_bits_per_address@plt+0x3718>
   14e60:	mov	ip, r2
   14e64:	b	14cf0 <bfd_arch_bits_per_address@plt+0x3628>
   14e68:	cmp	r2, #0
   14e6c:	bne	14d64 <bfd_arch_bits_per_address@plt+0x369c>
   14e70:	b	14e38 <bfd_arch_bits_per_address@plt+0x3770>
   14e74:	mov	ip, r9
   14e78:	b	14de0 <bfd_arch_bits_per_address@plt+0x3718>
   14e7c:	str	r3, [sp, #28]
   14e80:	mov	r1, r9
   14e84:	b	14dac <bfd_arch_bits_per_address@plt+0x36e4>
   14e88:	bvc	ff866d48 <__bss_end__@@Base+0xff82f094>
   14e8c:	svccc	0x00efae14
   14e90:	ldr	ip, [r9, #164]	; 0xa4
   14e94:	cmp	ip, #0
   14e98:	bne	14b40 <bfd_arch_bits_per_address@plt+0x3478>
   14e9c:	b	14cb0 <bfd_arch_bits_per_address@plt+0x35e8>
   14ea0:	mov	r3, ip
   14ea4:	mov	r1, r2
   14ea8:	b	14ccc <bfd_arch_bits_per_address@plt+0x3604>
   14eac:	push	{r4, r5, lr}
   14eb0:	movw	r5, #29904	; 0x74d0
   14eb4:	ldr	r2, [r0, #200]	; 0xc8
   14eb8:	movt	r5, #3
   14ebc:	sub	sp, sp, #8192	; 0x2000
   14ec0:	mov	r4, r0
   14ec4:	sub	sp, sp, #44	; 0x2c
   14ec8:	ldr	ip, [r5]
   14ecc:	mov	r1, #1
   14ed0:	movw	r3, #10080	; 0x2760
   14ed4:	str	r2, [sp]
   14ed8:	mov	r2, #8192	; 0x2000
   14edc:	add	lr, sp, r2
   14ee0:	movt	r3, #2
   14ee4:	add	r0, sp, #36	; 0x24
   14ee8:	str	ip, [lr, #36]	; 0x24
   14eec:	bl	11590 <__sprintf_chk@plt>
   14ef0:	vldr	d6, [r4, #232]	; 0xe8
   14ef4:	vldr	d5, [r4, #224]	; 0xe0
   14ef8:	vadd.f64	d2, d5, d6
   14efc:	vldr	d4, [pc, #228]	; 14fe8 <bfd_arch_bits_per_address@plt+0x3920>
   14f00:	movw	r3, #30568	; 0x7768
   14f04:	movt	r3, #3
   14f08:	vldr	s14, [r3]
   14f0c:	movw	r2, #30496	; 0x7720
   14f10:	movt	r2, #3
   14f14:	vldr	d3, [r2]
   14f18:	movw	r2, #30560	; 0x7760
   14f1c:	movt	r2, #3
   14f20:	movw	r3, #10016	; 0x2720
   14f24:	movt	r3, #2
   14f28:	movw	r1, #10048	; 0x2740
   14f2c:	ldr	ip, [r2]
   14f30:	movt	r1, #2
   14f34:	add	r2, sp, #36	; 0x24
   14f38:	mov	r0, #1
   14f3c:	cmp	ip, #0
   14f40:	vmul.f64	d4, d2, d4
   14f44:	movne	r1, r3
   14f48:	vcvt.f64.s32	d7, s14
   14f4c:	vdiv.f64	d4, d4, d3
   14f50:	vdiv.f64	d5, d5, d7
   14f54:	vstr	d4, [sp]
   14f58:	vdiv.f64	d7, d6, d7
   14f5c:	vstr	d5, [sp, #8]
   14f60:	vstr	d7, [sp, #16]
   14f64:	ldr	r3, [r4, #32]
   14f68:	str	r3, [sp, #24]
   14f6c:	bl	115e4 <__printf_chk@plt>
   14f70:	ldr	r2, [r4, #184]	; 0xb8
   14f74:	cmp	r2, #0
   14f78:	movwne	r1, #10088	; 0x2768
   14f7c:	movweq	r1, #10096	; 0x2770
   14f80:	movweq	r2, #11092	; 0x2b54
   14f84:	movne	r0, #1
   14f88:	movteq	r2, #2
   14f8c:	moveq	r0, #1
   14f90:	movtne	r1, #2
   14f94:	movteq	r1, #2
   14f98:	bl	115e4 <__printf_chk@plt>
   14f9c:	mov	r2, #5
   14fa0:	movw	r1, #10104	; 0x2778
   14fa4:	mov	r0, #0
   14fa8:	movt	r1, #2
   14fac:	bl	113e0 <dcgettext@plt>
   14fb0:	ldr	r2, [r4, #240]	; 0xf0
   14fb4:	ldr	r3, [r4, #200]	; 0xc8
   14fb8:	mov	r1, r0
   14fbc:	mov	r0, #1
   14fc0:	bl	115e4 <__printf_chk@plt>
   14fc4:	add	r3, sp, #8192	; 0x2000
   14fc8:	ldr	r2, [r3, #36]	; 0x24
   14fcc:	ldr	r3, [r5]
   14fd0:	cmp	r2, r3
   14fd4:	bne	14fe4 <bfd_arch_bits_per_address@plt+0x391c>
   14fd8:	add	sp, sp, #8192	; 0x2000
   14fdc:	add	sp, sp, #44	; 0x2c
   14fe0:	pop	{r4, r5, pc}
   14fe4:	bl	113ec <__stack_chk_fail@plt>
   14fe8:	andeq	r0, r0, r0
   14fec:	subsmi	r0, r9, r0
   14ff0:	movw	r3, #30536	; 0x7748
   14ff4:	movt	r3, #3
   14ff8:	push	{r4, r5, r6, r7, r8, r9, lr}
   14ffc:	mov	r5, r0
   15000:	ldr	r3, [r3]
   15004:	sub	sp, sp, #20
   15008:	mov	r4, r1
   1500c:	ldr	r6, [r0]
   15010:	tst	r3, #32
   15014:	ldr	r9, [r0, #4]
   15018:	ldm	r1, {r7, r8}
   1501c:	bne	150c4 <bfd_arch_bits_per_address@plt+0x39fc>
   15020:	cmp	r6, r9
   15024:	beq	151a8 <bfd_arch_bits_per_address@plt+0x3ae0>
   15028:	cmp	r7, r8
   1502c:	beq	150b8 <bfd_arch_bits_per_address@plt+0x39f0>
   15030:	ldr	r3, [r6, #240]	; 0xf0
   15034:	cmp	r3, #0
   15038:	beq	15050 <bfd_arch_bits_per_address@plt+0x3988>
   1503c:	ldr	r2, [r9, #240]	; 0xf0
   15040:	cmp	r2, #0
   15044:	beq	15050 <bfd_arch_bits_per_address@plt+0x3988>
   15048:	cmp	r3, r2
   1504c:	beq	15188 <bfd_arch_bits_per_address@plt+0x3ac0>
   15050:	ldr	r3, [r7, #240]	; 0xf0
   15054:	cmp	r3, #0
   15058:	beq	15070 <bfd_arch_bits_per_address@plt+0x39a8>
   1505c:	ldr	r2, [r8, #240]	; 0xf0
   15060:	cmp	r2, #0
   15064:	beq	15070 <bfd_arch_bits_per_address@plt+0x39a8>
   15068:	cmp	r3, r2
   1506c:	beq	150b8 <bfd_arch_bits_per_address@plt+0x39f0>
   15070:	vldr	d7, [r5, #24]
   15074:	vldr	d5, [r5, #16]
   15078:	vldr	d6, [r4, #16]
   1507c:	vadd.f64	d5, d5, d7
   15080:	vldr	d7, [r4, #24]
   15084:	vadd.f64	d6, d6, d7
   15088:	vcmpe.f64	d5, d6
   1508c:	vmrs	APSR_nzcv, fpscr
   15090:	bmi	151a8 <bfd_arch_bits_per_address@plt+0x3ae0>
   15094:	bgt	150b8 <bfd_arch_bits_per_address@plt+0x39f0>
   15098:	ldr	r2, [r5, #8]
   1509c:	ldr	r3, [r4, #8]
   150a0:	cmp	r2, r3
   150a4:	bcc	151a8 <bfd_arch_bits_per_address@plt+0x3ae0>
   150a8:	movls	r0, #0
   150ac:	movhi	r0, #1
   150b0:	add	sp, sp, #20
   150b4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   150b8:	mov	r0, #1
   150bc:	add	sp, sp, #20
   150c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   150c4:	movw	r1, #10136	; 0x2798
   150c8:	mov	r0, #1
   150cc:	movt	r1, #2
   150d0:	bl	115e4 <__printf_chk@plt>
   150d4:	mov	r0, r6
   150d8:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   150dc:	movw	r1, #10148	; 0x27a4
   150e0:	mov	r0, #1
   150e4:	movt	r1, #2
   150e8:	bl	115e4 <__printf_chk@plt>
   150ec:	mov	r0, r9
   150f0:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   150f4:	ldrd	r0, [r5, #24]
   150f8:	ldrd	r2, [r5, #16]
   150fc:	strd	r0, [sp]
   15100:	movw	r1, #10156	; 0x27ac
   15104:	ldr	ip, [r5, #8]
   15108:	movt	r1, #2
   1510c:	mov	r0, #1
   15110:	str	ip, [sp, #8]
   15114:	ldr	ip, [r9, #32]
   15118:	str	ip, [sp, #12]
   1511c:	bl	115e4 <__printf_chk@plt>
   15120:	movw	r1, #10136	; 0x2798
   15124:	mov	r0, #1
   15128:	movt	r1, #2
   1512c:	bl	115e4 <__printf_chk@plt>
   15130:	mov	r0, r7
   15134:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   15138:	movw	r1, #10148	; 0x27a4
   1513c:	mov	r0, #1
   15140:	movt	r1, #2
   15144:	bl	115e4 <__printf_chk@plt>
   15148:	mov	r0, r8
   1514c:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   15150:	ldrd	r0, [r4, #24]
   15154:	ldrd	r2, [r4, #16]
   15158:	strd	r0, [sp]
   1515c:	movw	r1, #10156	; 0x27ac
   15160:	ldr	ip, [r4, #8]
   15164:	movt	r1, #2
   15168:	mov	r0, #1
   1516c:	str	ip, [sp, #8]
   15170:	ldr	ip, [r8, #32]
   15174:	str	ip, [sp, #12]
   15178:	bl	115e4 <__printf_chk@plt>
   1517c:	mov	r0, #10
   15180:	bl	115b4 <putchar@plt>
   15184:	b	15020 <bfd_arch_bits_per_address@plt+0x3958>
   15188:	ldr	r3, [r7, #240]	; 0xf0
   1518c:	cmp	r3, #0
   15190:	beq	151a8 <bfd_arch_bits_per_address@plt+0x3ae0>
   15194:	ldr	r2, [r8, #240]	; 0xf0
   15198:	cmp	r2, #0
   1519c:	beq	151a8 <bfd_arch_bits_per_address@plt+0x3ae0>
   151a0:	cmp	r3, r2
   151a4:	beq	15098 <bfd_arch_bits_per_address@plt+0x39d0>
   151a8:	mvn	r0, #0
   151ac:	b	150b0 <bfd_arch_bits_per_address@plt+0x39e8>
   151b0:	push	{r4, r5, lr}
   151b4:	movw	r5, #29904	; 0x74d0
   151b8:	ldr	r2, [r0, #200]	; 0xc8
   151bc:	sub	sp, sp, #8192	; 0x2000
   151c0:	movt	r5, #3
   151c4:	sub	sp, sp, #36	; 0x24
   151c8:	mov	r4, r0
   151cc:	mov	r1, #1
   151d0:	ldr	ip, [r5]
   151d4:	movw	r3, #10080	; 0x2760
   151d8:	str	r2, [sp]
   151dc:	mov	r2, #8192	; 0x2000
   151e0:	add	lr, sp, r2
   151e4:	movt	r3, #2
   151e8:	add	r0, sp, #28
   151ec:	str	ip, [lr, #28]
   151f0:	bl	11590 <__sprintf_chk@plt>
   151f4:	vldr	d5, [r4, #224]	; 0xe0
   151f8:	vldr	d6, [r4, #232]	; 0xe8
   151fc:	vadd.f64	d2, d5, d6
   15200:	vldr	d4, [pc, #264]	; 15310 <bfd_arch_bits_per_address@plt+0x3c48>
   15204:	movw	r3, #30568	; 0x7768
   15208:	movt	r3, #3
   1520c:	vldr	s14, [r3]
   15210:	movw	r2, #30496	; 0x7720
   15214:	movt	r2, #3
   15218:	vldr	d3, [r2]
   1521c:	movw	r2, #30560	; 0x7760
   15220:	movt	r2, #3
   15224:	movw	r3, #10176	; 0x27c0
   15228:	movt	r3, #2
   1522c:	movw	r1, #10204	; 0x27dc
   15230:	ldr	ip, [r2]
   15234:	movt	r1, #2
   15238:	add	r2, sp, #28
   1523c:	mov	r0, #1
   15240:	cmp	ip, #0
   15244:	vmul.f64	d4, d2, d4
   15248:	movne	r1, r3
   1524c:	vcvt.f64.s32	d7, s14
   15250:	vdiv.f64	d4, d4, d3
   15254:	vdiv.f64	d5, d5, d7
   15258:	vstr	d4, [sp]
   1525c:	vdiv.f64	d7, d6, d7
   15260:	vstr	d5, [sp, #8]
   15264:	vstr	d7, [sp, #16]
   15268:	bl	115e4 <__printf_chk@plt>
   1526c:	ldr	r2, [r4, #32]
   15270:	ldr	r3, [r4, #184]	; 0xb8
   15274:	add	r3, r2, r3
   15278:	cmp	r3, #0
   1527c:	beq	152ec <bfd_arch_bits_per_address@plt+0x3c24>
   15280:	movw	r1, #10288	; 0x2830
   15284:	mov	r0, #1
   15288:	movt	r1, #2
   1528c:	bl	115e4 <__printf_chk@plt>
   15290:	ldr	r2, [r4, #184]	; 0xb8
   15294:	cmp	r2, #0
   15298:	movwne	r1, #10232	; 0x27f8
   1529c:	movweq	r1, #10240	; 0x2800
   152a0:	movweq	r2, #11092	; 0x2b54
   152a4:	movne	r0, #1
   152a8:	movteq	r2, #2
   152ac:	moveq	r0, #1
   152b0:	movtne	r1, #2
   152b4:	movteq	r1, #2
   152b8:	bl	115e4 <__printf_chk@plt>
   152bc:	mov	r0, r4
   152c0:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   152c4:	mov	r0, #10
   152c8:	bl	115b4 <putchar@plt>
   152cc:	add	r3, sp, #8192	; 0x2000
   152d0:	ldr	r2, [r3, #28]
   152d4:	ldr	r3, [r5]
   152d8:	cmp	r2, r3
   152dc:	bne	1530c <bfd_arch_bits_per_address@plt+0x3c44>
   152e0:	add	sp, sp, #8192	; 0x2000
   152e4:	add	sp, sp, #36	; 0x24
   152e8:	pop	{r4, r5, pc}
   152ec:	movw	r2, #11092	; 0x2b54
   152f0:	movt	r2, #2
   152f4:	movw	r1, #10248	; 0x2808
   152f8:	mov	r0, #1
   152fc:	mov	r3, r2
   15300:	movt	r1, #2
   15304:	bl	115e4 <__printf_chk@plt>
   15308:	b	152bc <bfd_arch_bits_per_address@plt+0x3bf4>
   1530c:	bl	113ec <__stack_chk_fail@plt>
   15310:	andeq	r0, r0, r0
   15314:	subsmi	r0, r9, r0
   15318:	ldr	r2, [r0]
   1531c:	ldr	r3, [r1]
   15320:	ldr	r0, [r2, #16]
   15324:	ldr	r1, [r3, #16]
   15328:	b	11350 <strcmp@plt>
   1532c:	ldr	r0, [r0, #4]
   15330:	ldr	r1, [r1, #4]
   15334:	b	11398 <filename_cmp@plt>
   15338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1533c:	sub	sp, sp, #140	; 0x8c
   15340:	movw	ip, #29036	; 0x716c
   15344:	movt	ip, #3
   15348:	str	ip, [sp, #72]	; 0x48
   1534c:	movw	ip, #29904	; 0x74d0
   15350:	movt	ip, #3
   15354:	str	ip, [sp, #68]	; 0x44
   15358:	ldr	ip, [sp, #72]	; 0x48
   1535c:	movw	r6, #30560	; 0x7760
   15360:	str	r0, [sp, #76]	; 0x4c
   15364:	movt	r6, #3
   15368:	ldr	r3, [ip]
   1536c:	ldr	ip, [sp, #68]	; 0x44
   15370:	cmp	r3, #0
   15374:	ldr	r2, [ip]
   15378:	str	r2, [sp, #132]	; 0x84
   1537c:	beq	1538c <bfd_arch_bits_per_address@plt+0x3cc4>
   15380:	ldr	r3, [r6]
   15384:	cmp	r3, #0
   15388:	bne	15e00 <bfd_arch_bits_per_address@plt+0x4738>
   1538c:	movw	r3, #29848	; 0x7498
   15390:	movt	r3, #3
   15394:	ldr	r2, [r3]
   15398:	cmp	r2, #0
   1539c:	beq	15cf0 <bfd_arch_bits_per_address@plt+0x4628>
   153a0:	mov	r2, #0
   153a4:	str	r2, [r3]
   153a8:	ldr	r3, [r6]
   153ac:	cmp	r3, #0
   153b0:	bne	153ec <bfd_arch_bits_per_address@plt+0x3d24>
   153b4:	ldr	ip, [sp, #72]	; 0x48
   153b8:	ldr	r0, [ip]
   153bc:	cmp	r0, #0
   153c0:	movwne	r1, #10496	; 0x2900
   153c4:	movweq	r1, #10540	; 0x292c
   153c8:	movtne	r1, #2
   153cc:	movteq	r1, #2
   153d0:	movne	r0, r3
   153d4:	movne	r2, #5
   153d8:	moveq	r2, #5
   153dc:	bl	113e0 <dcgettext@plt>
   153e0:	mov	r1, r0
   153e4:	mov	r0, #1
   153e8:	bl	115e4 <__printf_chk@plt>
   153ec:	mov	r2, #5
   153f0:	movw	r1, #10556	; 0x293c
   153f4:	mov	r0, #0
   153f8:	movt	r1, #2
   153fc:	bl	113e0 <dcgettext@plt>
   15400:	movw	r3, #31760	; 0x7c10
   15404:	movt	r3, #3
   15408:	vldr	d7, [r3]
   1540c:	vcvt.s32.f64	s8, d7
   15410:	movw	r4, #30496	; 0x7720
   15414:	movt	r4, #3
   15418:	vmov	r2, s8
   1541c:	mov	r1, r0
   15420:	mov	r0, #1
   15424:	lsl	r2, r2, r0
   15428:	bl	115e4 <__printf_chk@plt>
   1542c:	vldr	d7, [r4]
   15430:	vcmpe.f64	d7, #0.0
   15434:	vmrs	APSR_nzcv, fpscr
   15438:	ble	15d00 <bfd_arch_bits_per_address@plt+0x4638>
   1543c:	mov	r2, #5
   15440:	movw	r1, #10608	; 0x2970
   15444:	mov	r0, #0
   15448:	movt	r1, #2
   1544c:	bl	113e0 <dcgettext@plt>
   15450:	movw	r5, #30568	; 0x7768
   15454:	movt	r5, #3
   15458:	vldr	s12, [r5]
   1545c:	vcvt.f64.s32	d6, s12
   15460:	vldr	d7, [r4]
   15464:	vldr	d5, [pc, #972]	; 15838 <bfd_arch_bits_per_address@plt+0x4170>
   15468:	vdiv.f64	d4, d5, d7
   1546c:	mov	r1, r0
   15470:	mov	r0, #1
   15474:	vdiv.f64	d7, d7, d6
   15478:	vmov	r2, r3, d4
   1547c:	vstr	d7, [sp]
   15480:	bl	115e4 <__printf_chk@plt>
   15484:	ldr	r0, [r6]
   15488:	cmp	r0, #0
   1548c:	bne	15b04 <bfd_arch_bits_per_address@plt+0x443c>
   15490:	movw	r1, #10852	; 0x2a64
   15494:	mov	r2, #5
   15498:	movt	r1, #2
   1549c:	bl	113e0 <dcgettext@plt>
   154a0:	mov	r1, r0
   154a4:	mov	r0, #1
   154a8:	bl	115e4 <__printf_chk@plt>
   154ac:	movw	ip, #31768	; 0x7c18
   154b0:	movt	ip, #3
   154b4:	str	ip, [sp, #56]	; 0x38
   154b8:	movw	ip, #31716	; 0x7be4
   154bc:	movt	ip, #3
   154c0:	str	ip, [sp, #52]	; 0x34
   154c4:	ldr	ip, [sp, #56]	; 0x38
   154c8:	ldr	r2, [ip]
   154cc:	ldr	ip, [sp, #52]	; 0x34
   154d0:	ldr	r3, [ip]
   154d4:	add	r3, r2, r3
   154d8:	cmp	r3, #0
   154dc:	beq	15984 <bfd_arch_bits_per_address@plt+0x42bc>
   154e0:	movw	ip, #29044	; 0x7174
   154e4:	movw	r7, #11092	; 0x2b54
   154e8:	movt	ip, #3
   154ec:	movw	r8, #10456	; 0x28d8
   154f0:	str	ip, [sp, #60]	; 0x3c
   154f4:	movt	r7, #2
   154f8:	movw	ip, #30544	; 0x7750
   154fc:	movt	r8, #2
   15500:	movt	ip, #3
   15504:	str	ip, [sp, #64]	; 0x40
   15508:	movw	ip, #10372	; 0x2884
   1550c:	movt	ip, #2
   15510:	str	ip, [sp, #44]	; 0x2c
   15514:	movw	ip, #10328	; 0x2858
   15518:	movt	ip, #2
   1551c:	str	ip, [sp, #48]	; 0x30
   15520:	ldr	ip, [sp, #76]	; 0x4c
   15524:	sub	ip, ip, #4
   15528:	str	ip, [sp, #40]	; 0x28
   1552c:	mov	ip, #0
   15530:	str	ip, [sp, #32]
   15534:	ldr	ip, [sp, #60]	; 0x3c
   15538:	ldr	r3, [ip]
   1553c:	ldr	ip, [sp, #40]	; 0x28
   15540:	cmp	r3, #0
   15544:	ldr	r5, [ip, #4]!
   15548:	str	ip, [sp, #40]	; 0x28
   1554c:	beq	15588 <bfd_arch_bits_per_address@plt+0x3ec0>
   15550:	ldr	r3, [r5, #32]
   15554:	cmp	r3, #0
   15558:	bne	15588 <bfd_arch_bits_per_address@plt+0x3ec0>
   1555c:	ldr	r3, [r5, #184]	; 0xb8
   15560:	cmp	r3, #0
   15564:	bne	15588 <bfd_arch_bits_per_address@plt+0x3ec0>
   15568:	vldr	d7, [r5, #224]	; 0xe0
   1556c:	vcmp.f64	d7, #0.0
   15570:	vmrs	APSR_nzcv, fpscr
   15574:	bne	15588 <bfd_arch_bits_per_address@plt+0x3ec0>
   15578:	vldr	d7, [r5, #232]	; 0xe8
   1557c:	vcmp.f64	d7, #0.0
   15580:	vmrs	APSR_nzcv, fpscr
   15584:	beq	15958 <bfd_arch_bits_per_address@plt+0x4290>
   15588:	ldr	r3, [r5, #208]	; 0xd0
   1558c:	cmp	r3, #0
   15590:	beq	15958 <bfd_arch_bits_per_address@plt+0x4290>
   15594:	ldr	ip, [sp, #64]	; 0x40
   15598:	ldr	r3, [ip]
   1559c:	cmp	r3, #0
   155a0:	beq	155b0 <bfd_arch_bits_per_address@plt+0x3ee8>
   155a4:	ldrb	r3, [r5, #28]
   155a8:	tst	r3, #1
   155ac:	beq	15958 <bfd_arch_bits_per_address@plt+0x4290>
   155b0:	ldr	r4, [r5, #16]
   155b4:	cmp	r4, #0
   155b8:	beq	159d0 <bfd_arch_bits_per_address@plt+0x4308>
   155bc:	ldr	r9, [r5, #244]	; 0xf4
   155c0:	ldr	r2, [r5, #252]	; 0xfc
   155c4:	cmp	r9, #0
   155c8:	moveq	r9, r5
   155cc:	cmp	r2, #0
   155d0:	beq	15a84 <bfd_arch_bits_per_address@plt+0x43bc>
   155d4:	ldr	r4, [r2, #32]
   155d8:	add	sl, sp, #80	; 0x50
   155dc:	mov	r3, #0
   155e0:	str	r5, [sp, #28]
   155e4:	cmp	r4, #0
   155e8:	mov	r5, sl
   155ec:	mov	r1, r3
   155f0:	str	r3, [sp, #112]	; 0x70
   155f4:	str	r1, [r2, #32]
   155f8:	mov	fp, sl
   155fc:	str	r2, [r5, #32]
   15600:	beq	15658 <bfd_arch_bits_per_address@plt+0x3f90>
   15604:	ldr	r1, [sp, #112]	; 0x70
   15608:	mov	r5, fp
   1560c:	ldr	sl, [r4, #32]
   15610:	cmp	r1, #0
   15614:	bne	1562c <bfd_arch_bits_per_address@plt+0x3f64>
   15618:	b	15640 <bfd_arch_bits_per_address@plt+0x3f78>
   1561c:	ldr	r5, [r5, #32]
   15620:	ldr	r1, [r5, #32]
   15624:	cmp	r1, #0
   15628:	beq	15640 <bfd_arch_bits_per_address@plt+0x3f78>
   1562c:	mov	r0, r4
   15630:	bl	14ff0 <bfd_arch_bits_per_address@plt+0x3928>
   15634:	cmp	r0, #1
   15638:	beq	1561c <bfd_arch_bits_per_address@plt+0x3f54>
   1563c:	ldr	r1, [r5, #32]
   15640:	mov	r2, r4
   15644:	mov	r4, sl
   15648:	cmp	r4, #0
   1564c:	str	r1, [r2, #32]
   15650:	str	r2, [r5, #32]
   15654:	bne	15604 <bfd_arch_bits_per_address@plt+0x3f3c>
   15658:	ldr	r4, [sp, #112]	; 0x70
   1565c:	ldr	r5, [sp, #28]
   15660:	cmp	r4, #0
   15664:	str	r4, [r5, #252]	; 0xfc
   15668:	beq	15788 <bfd_arch_bits_per_address@plt+0x40c0>
   1566c:	movw	sl, #30568	; 0x7768
   15670:	movt	sl, #3
   15674:	movw	ip, #10412	; 0x28ac
   15678:	movt	ip, #2
   1567c:	mov	r3, sl
   15680:	str	ip, [sp, #36]	; 0x24
   15684:	mov	sl, r6
   15688:	mov	r6, r3
   1568c:	b	1571c <bfd_arch_bits_per_address@plt+0x4054>
   15690:	ldr	r3, [r5, #240]	; 0xf0
   15694:	cmp	r3, #0
   15698:	beq	156a8 <bfd_arch_bits_per_address@plt+0x3fe0>
   1569c:	ldr	r2, [fp, #240]	; 0xf0
   156a0:	cmp	r3, r2
   156a4:	beq	15728 <bfd_arch_bits_per_address@plt+0x4060>
   156a8:	vldr	s8, [r6]
   156ac:	vcvt.f64.s32	d7, s8
   156b0:	vldr	d6, [r4, #16]
   156b4:	ldr	r1, [sl]
   156b8:	ldr	ip, [sp, #36]	; 0x24
   156bc:	movw	r2, #11092	; 0x2b54
   156c0:	cmp	r1, #0
   156c4:	movt	r2, #2
   156c8:	mov	r0, #1
   156cc:	moveq	ip, r8
   156d0:	mov	r3, r2
   156d4:	mov	r1, ip
   156d8:	vdiv.f64	d6, d6, d7
   156dc:	vstr	d6, [sp]
   156e0:	vldr	d6, [r4, #24]
   156e4:	vdiv.f64	d7, d6, d7
   156e8:	vstr	d7, [sp, #8]
   156ec:	ldr	lr, [r4, #8]
   156f0:	str	lr, [sp, #16]
   156f4:	ldr	lr, [r9, #32]
   156f8:	str	lr, [sp, #20]
   156fc:	bl	115e4 <__printf_chk@plt>
   15700:	mov	r0, fp
   15704:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   15708:	mov	r0, #10
   1570c:	bl	115b4 <putchar@plt>
   15710:	ldr	r4, [r4, #32]
   15714:	cmp	r4, #0
   15718:	beq	15784 <bfd_arch_bits_per_address@plt+0x40bc>
   1571c:	ldr	fp, [r4]
   15720:	cmp	r5, fp
   15724:	bne	15690 <bfd_arch_bits_per_address@plt+0x3fc8>
   15728:	str	r7, [sp]
   1572c:	movw	r2, #11092	; 0x2b54
   15730:	str	r7, [sp, #4]
   15734:	movt	r2, #2
   15738:	ldr	lr, [r4, #8]
   1573c:	mov	r0, #1
   15740:	ldr	r1, [sl]
   15744:	mov	r3, r2
   15748:	ldr	ip, [sp, #44]	; 0x2c
   1574c:	str	lr, [sp, #8]
   15750:	cmp	r1, #0
   15754:	ldr	lr, [sp, #48]	; 0x30
   15758:	str	r7, [sp, #12]
   1575c:	movne	ip, lr
   15760:	mov	r1, ip
   15764:	bl	115e4 <__printf_chk@plt>
   15768:	mov	r0, fp
   1576c:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   15770:	mov	r0, #10
   15774:	bl	115b4 <putchar@plt>
   15778:	ldr	r4, [r4, #32]
   1577c:	cmp	r4, #0
   15780:	bne	1571c <bfd_arch_bits_per_address@plt+0x4054>
   15784:	mov	r6, sl
   15788:	mov	r0, r5
   1578c:	bl	151b0 <bfd_arch_bits_per_address@plt+0x3ae8>
   15790:	ldr	r3, [r5, #256]	; 0x100
   15794:	mov	r1, #0
   15798:	str	r1, [sp, #116]	; 0x74
   1579c:	cmp	r3, r1
   157a0:	beq	15ce8 <bfd_arch_bits_per_address@plt+0x4620>
   157a4:	ldr	r4, [r3, #36]	; 0x24
   157a8:	add	sl, sp, #80	; 0x50
   157ac:	str	r1, [r3, #36]	; 0x24
   157b0:	cmp	r4, #0
   157b4:	mov	fp, sl
   157b8:	str	r3, [fp, #36]	; 0x24
   157bc:	beq	15814 <bfd_arch_bits_per_address@plt+0x414c>
   157c0:	ldr	r1, [sp, #116]	; 0x74
   157c4:	mov	fp, sl
   157c8:	ldr	r9, [r4, #36]	; 0x24
   157cc:	cmp	r1, #0
   157d0:	bne	157e8 <bfd_arch_bits_per_address@plt+0x4120>
   157d4:	b	157fc <bfd_arch_bits_per_address@plt+0x4134>
   157d8:	ldr	fp, [fp, #36]	; 0x24
   157dc:	ldr	r1, [fp, #36]	; 0x24
   157e0:	cmp	r1, #0
   157e4:	beq	157fc <bfd_arch_bits_per_address@plt+0x4134>
   157e8:	mov	r0, r4
   157ec:	bl	14ff0 <bfd_arch_bits_per_address@plt+0x3928>
   157f0:	cmn	r0, #1
   157f4:	beq	157d8 <bfd_arch_bits_per_address@plt+0x4110>
   157f8:	ldr	r1, [fp, #36]	; 0x24
   157fc:	mov	r3, r4
   15800:	mov	r4, r9
   15804:	cmp	r4, #0
   15808:	str	r1, [r3, #36]	; 0x24
   1580c:	str	r3, [fp, #36]	; 0x24
   15810:	bne	157c0 <bfd_arch_bits_per_address@plt+0x40f8>
   15814:	ldr	r4, [sp, #116]	; 0x74
   15818:	cmp	r4, #0
   1581c:	str	r4, [r5, #256]	; 0x100
   15820:	beq	15934 <bfd_arch_bits_per_address@plt+0x426c>
   15824:	movw	sl, #10412	; 0x28ac
   15828:	movw	r9, #30568	; 0x7768
   1582c:	movt	sl, #2
   15830:	movt	r9, #3
   15834:	b	158cc <bfd_arch_bits_per_address@plt+0x4204>
   15838:	andeq	r0, r0, r0
   1583c:	subsmi	r0, r9, r0
   15840:	ldr	r3, [fp, #240]	; 0xf0
   15844:	cmp	r3, #0
   15848:	beq	15858 <bfd_arch_bits_per_address@plt+0x4190>
   1584c:	ldr	r2, [r5, #240]	; 0xf0
   15850:	cmp	r3, r2
   15854:	beq	158d8 <bfd_arch_bits_per_address@plt+0x4210>
   15858:	vldr	s8, [r9]
   1585c:	vcvt.f64.s32	d7, s8
   15860:	vldr	d6, [r4, #16]
   15864:	ldr	r1, [r6]
   15868:	movw	r2, #11092	; 0x2b54
   1586c:	movt	r2, #2
   15870:	cmp	r1, #0
   15874:	mov	r0, #1
   15878:	mov	r3, r2
   1587c:	moveq	r1, r8
   15880:	movne	r1, sl
   15884:	vdiv.f64	d6, d6, d7
   15888:	vstr	d6, [sp]
   1588c:	vldr	d6, [r4, #24]
   15890:	vdiv.f64	d7, d6, d7
   15894:	vstr	d7, [sp, #8]
   15898:	ldr	lr, [r4, #8]
   1589c:	str	lr, [sp, #16]
   158a0:	ldr	lr, [fp, #244]	; 0xf4
   158a4:	ldr	lr, [lr, #32]
   158a8:	str	lr, [sp, #20]
   158ac:	bl	115e4 <__printf_chk@plt>
   158b0:	mov	r0, fp
   158b4:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   158b8:	mov	r0, #10
   158bc:	bl	115b4 <putchar@plt>
   158c0:	ldr	r4, [r4, #36]	; 0x24
   158c4:	cmp	r4, #0
   158c8:	beq	15934 <bfd_arch_bits_per_address@plt+0x426c>
   158cc:	ldr	fp, [r4, #4]
   158d0:	cmp	r5, fp
   158d4:	bne	15840 <bfd_arch_bits_per_address@plt+0x4178>
   158d8:	str	r7, [sp]
   158dc:	movw	r2, #11092	; 0x2b54
   158e0:	str	r7, [sp, #4]
   158e4:	movt	r2, #2
   158e8:	ldr	lr, [r4, #8]
   158ec:	mov	r0, #1
   158f0:	ldr	r1, [r6]
   158f4:	mov	r3, r2
   158f8:	ldr	ip, [sp, #44]	; 0x2c
   158fc:	str	lr, [sp, #8]
   15900:	cmp	r1, #0
   15904:	ldr	lr, [sp, #48]	; 0x30
   15908:	str	r7, [sp, #12]
   1590c:	movne	ip, lr
   15910:	mov	r1, ip
   15914:	bl	115e4 <__printf_chk@plt>
   15918:	mov	r0, fp
   1591c:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   15920:	mov	r0, #10
   15924:	bl	115b4 <putchar@plt>
   15928:	ldr	r4, [r4, #36]	; 0x24
   1592c:	cmp	r4, #0
   15930:	bne	158cc <bfd_arch_bits_per_address@plt+0x4204>
   15934:	ldr	r3, [r6]
   15938:	cmp	r3, #0
   1593c:	bne	15a78 <bfd_arch_bits_per_address@plt+0x43b0>
   15940:	movw	r0, #11020	; 0x2b0c
   15944:	movt	r0, #2
   15948:	bl	114e8 <puts@plt>
   1594c:	ldr	r3, [r6]
   15950:	cmp	r3, #0
   15954:	bne	159c4 <bfd_arch_bits_per_address@plt+0x42fc>
   15958:	ldr	ip, [sp, #52]	; 0x34
   1595c:	ldr	r2, [ip]
   15960:	ldr	ip, [sp, #32]
   15964:	add	ip, ip, #1
   15968:	str	ip, [sp, #32]
   1596c:	ldr	ip, [sp, #56]	; 0x38
   15970:	ldr	r3, [ip]
   15974:	ldr	ip, [sp, #32]
   15978:	add	r3, r2, r3
   1597c:	cmp	r3, ip
   15980:	bhi	15534 <bfd_arch_bits_per_address@plt+0x3e6c>
   15984:	ldr	r0, [sp, #76]	; 0x4c
   15988:	bl	11374 <free@plt>
   1598c:	ldr	ip, [sp, #72]	; 0x48
   15990:	ldr	r3, [ip]
   15994:	cmp	r3, #0
   15998:	beq	159a8 <bfd_arch_bits_per_address@plt+0x42e0>
   1599c:	ldr	r3, [r6]
   159a0:	cmp	r3, #0
   159a4:	beq	15ad8 <bfd_arch_bits_per_address@plt+0x4410>
   159a8:	ldr	ip, [sp, #68]	; 0x44
   159ac:	ldr	r2, [sp, #132]	; 0x84
   159b0:	ldr	r3, [ip]
   159b4:	cmp	r2, r3
   159b8:	bne	15e14 <bfd_arch_bits_per_address@plt+0x474c>
   159bc:	add	sp, sp, #140	; 0x8c
   159c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159c4:	mov	r0, #10
   159c8:	bl	115b4 <putchar@plt>
   159cc:	b	15958 <bfd_arch_bits_per_address@plt+0x4290>
   159d0:	ldr	r3, [r5, #240]	; 0xf0
   159d4:	cmp	r3, #0
   159d8:	beq	155bc <bfd_arch_bits_per_address@plt+0x3ef4>
   159dc:	mov	r0, r5
   159e0:	bl	14eac <bfd_arch_bits_per_address@plt+0x37e4>
   159e4:	ldr	r2, [r5, #248]	; 0xf8
   159e8:	str	r4, [r5, #248]	; 0xf8
   159ec:	cmp	r2, #0
   159f0:	beq	15934 <bfd_arch_bits_per_address@plt+0x426c>
   159f4:	mov	r3, r4
   159f8:	ldr	r9, [r2, #248]	; 0xf8
   159fc:	mov	r4, r5
   15a00:	b	15a20 <bfd_arch_bits_per_address@plt+0x4358>
   15a04:	bmi	15a18 <bfd_arch_bits_per_address@plt+0x4350>
   15a08:	add	ip, lr, ip
   15a0c:	add	r1, r0, r1
   15a10:	cmp	ip, r1
   15a14:	bhi	15a5c <bfd_arch_bits_per_address@plt+0x4394>
   15a18:	mov	r4, r3
   15a1c:	ldr	r3, [r3, #248]	; 0xf8
   15a20:	cmp	r3, #0
   15a24:	beq	15a5c <bfd_arch_bits_per_address@plt+0x4394>
   15a28:	vldr	d7, [r2, #232]	; 0xe8
   15a2c:	vldr	d5, [r2, #224]	; 0xe0
   15a30:	vldr	d6, [r3, #224]	; 0xe0
   15a34:	vadd.f64	d5, d5, d7
   15a38:	vldr	d7, [r3, #232]	; 0xe8
   15a3c:	ldr	ip, [r2, #32]
   15a40:	ldr	lr, [r2, #184]	; 0xb8
   15a44:	ldr	r1, [r3, #32]
   15a48:	ldr	r0, [r3, #184]	; 0xb8
   15a4c:	vadd.f64	d6, d6, d7
   15a50:	vcmpe.f64	d5, d6
   15a54:	vmrs	APSR_nzcv, fpscr
   15a58:	ble	15a04 <bfd_arch_bits_per_address@plt+0x433c>
   15a5c:	cmp	r9, #0
   15a60:	str	r3, [r2, #248]	; 0xf8
   15a64:	str	r2, [r4, #248]	; 0xf8
   15a68:	beq	15d34 <bfd_arch_bits_per_address@plt+0x466c>
   15a6c:	mov	r2, r9
   15a70:	ldr	r3, [r5, #248]	; 0xf8
   15a74:	b	159f8 <bfd_arch_bits_per_address@plt+0x4330>
   15a78:	mov	r0, #10
   15a7c:	bl	115b4 <putchar@plt>
   15a80:	b	15940 <bfd_arch_bits_per_address@plt+0x4278>
   15a84:	ldr	r0, [r6]
   15a88:	cmp	r0, #0
   15a8c:	movne	r0, r2
   15a90:	movwne	r1, #10904	; 0x2a98
   15a94:	movweq	r1, #10964	; 0x2ad4
   15a98:	movne	r2, #5
   15a9c:	movtne	r1, #2
   15aa0:	moveq	r2, #5
   15aa4:	movteq	r1, #2
   15aa8:	bl	113e0 <dcgettext@plt>
   15aac:	movw	r2, #11092	; 0x2b54
   15ab0:	movt	r2, #2
   15ab4:	str	r7, [sp]
   15ab8:	str	r7, [sp, #4]
   15abc:	mov	r3, r2
   15ac0:	str	r7, [sp, #8]
   15ac4:	str	r7, [sp, #12]
   15ac8:	mov	r1, r0
   15acc:	mov	r0, #1
   15ad0:	bl	115e4 <__printf_chk@plt>
   15ad4:	b	15788 <bfd_arch_bits_per_address@plt+0x40c0>
   15ad8:	ldr	ip, [sp, #68]	; 0x44
   15adc:	ldr	r2, [sp, #132]	; 0x84
   15ae0:	ldr	r3, [ip]
   15ae4:	cmp	r2, r3
   15ae8:	bne	15e14 <bfd_arch_bits_per_address@plt+0x474c>
   15aec:	movw	r3, #30440	; 0x76e8
   15af0:	movt	r3, #3
   15af4:	ldr	r0, [r3]
   15af8:	add	sp, sp, #140	; 0x8c
   15afc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b00:	b	1e9d0 <bfd_arch_bits_per_address@plt+0xd308>
   15b04:	mov	r2, #5
   15b08:	movw	r1, #10664	; 0x29a8
   15b0c:	mov	r0, #0
   15b10:	movt	r1, #2
   15b14:	bl	113e0 <dcgettext@plt>
   15b18:	mov	r2, #5
   15b1c:	movw	r1, #10672	; 0x29b0
   15b20:	movt	r1, #2
   15b24:	movw	r4, #11092	; 0x2b54
   15b28:	movt	r4, #2
   15b2c:	mov	r7, r0
   15b30:	mov	r0, #0
   15b34:	bl	113e0 <dcgettext@plt>
   15b38:	mov	r2, #5
   15b3c:	movw	r1, #10680	; 0x29b8
   15b40:	movt	r1, #2
   15b44:	mov	r5, r0
   15b48:	mov	r0, #0
   15b4c:	bl	113e0 <dcgettext@plt>
   15b50:	mov	r3, r4
   15b54:	str	r7, [sp, #8]
   15b58:	mov	r2, r4
   15b5c:	str	r5, [sp, #12]
   15b60:	movw	r1, #10688	; 0x29c0
   15b64:	str	r4, [sp]
   15b68:	movt	r1, #2
   15b6c:	str	r4, [sp, #4]
   15b70:	str	r0, [sp, #16]
   15b74:	mov	r0, #1
   15b78:	bl	115e4 <__printf_chk@plt>
   15b7c:	mov	r2, #5
   15b80:	movw	r1, #10740	; 0x29f4
   15b84:	mov	r0, #0
   15b88:	movt	r1, #2
   15b8c:	bl	113e0 <dcgettext@plt>
   15b90:	mov	r2, #5
   15b94:	movw	r1, #10748	; 0x29fc
   15b98:	movt	r1, #2
   15b9c:	mov	sl, r0
   15ba0:	mov	r0, #0
   15ba4:	bl	113e0 <dcgettext@plt>
   15ba8:	mov	r2, #5
   15bac:	movw	r1, #10756	; 0x2a04
   15bb0:	movt	r1, #2
   15bb4:	mov	r8, r0
   15bb8:	mov	r0, #0
   15bbc:	bl	113e0 <dcgettext@plt>
   15bc0:	mov	r2, #5
   15bc4:	movw	r1, #10764	; 0x2a0c
   15bc8:	movt	r1, #2
   15bcc:	mov	r3, r0
   15bd0:	mov	r0, #0
   15bd4:	str	r3, [sp, #24]
   15bd8:	bl	113e0 <dcgettext@plt>
   15bdc:	mov	r2, #5
   15be0:	movw	r1, #10664	; 0x29a8
   15be4:	movt	r1, #2
   15be8:	mov	fp, r0
   15bec:	mov	r0, #0
   15bf0:	bl	113e0 <dcgettext@plt>
   15bf4:	mov	r2, #5
   15bf8:	movw	r1, #10756	; 0x2a04
   15bfc:	movt	r1, #2
   15c00:	mov	r9, r0
   15c04:	mov	r0, #0
   15c08:	bl	113e0 <dcgettext@plt>
   15c0c:	mov	r2, #5
   15c10:	movw	r1, #10776	; 0x2a18
   15c14:	movt	r1, #2
   15c18:	mov	r7, r0
   15c1c:	mov	r0, #0
   15c20:	bl	113e0 <dcgettext@plt>
   15c24:	mov	r2, #5
   15c28:	movw	r1, #10740	; 0x29f4
   15c2c:	movt	r1, #2
   15c30:	mov	r5, r0
   15c34:	mov	r0, #0
   15c38:	bl	113e0 <dcgettext@plt>
   15c3c:	ldr	r3, [sp, #24]
   15c40:	mov	r2, sl
   15c44:	str	r7, [sp, #12]
   15c48:	str	r5, [sp, #16]
   15c4c:	movw	r1, #10784	; 0x2a20
   15c50:	stm	sp, {r3, fp}
   15c54:	movt	r1, #2
   15c58:	mov	r3, r8
   15c5c:	str	r9, [sp, #8]
   15c60:	str	r0, [sp, #20]
   15c64:	mov	r0, #1
   15c68:	bl	115e4 <__printf_chk@plt>
   15c6c:	mov	r2, #5
   15c70:	movw	r1, #10664	; 0x29a8
   15c74:	mov	r0, #0
   15c78:	movt	r1, #2
   15c7c:	bl	113e0 <dcgettext@plt>
   15c80:	mov	r2, #5
   15c84:	movw	r1, #10672	; 0x29b0
   15c88:	movt	r1, #2
   15c8c:	mov	r7, r0
   15c90:	mov	r0, #0
   15c94:	bl	113e0 <dcgettext@plt>
   15c98:	mov	r2, #5
   15c9c:	movw	r1, #10840	; 0x2a58
   15ca0:	movt	r1, #2
   15ca4:	mov	r5, r0
   15ca8:	mov	r0, #0
   15cac:	bl	113e0 <dcgettext@plt>
   15cb0:	mov	r2, r4
   15cb4:	str	r7, [sp, #8]
   15cb8:	mov	r3, r4
   15cbc:	str	r4, [sp]
   15cc0:	movw	r1, #10688	; 0x29c0
   15cc4:	str	r4, [sp, #4]
   15cc8:	movt	r1, #2
   15ccc:	str	r5, [sp, #12]
   15cd0:	str	r0, [sp, #16]
   15cd4:	mov	r0, #1
   15cd8:	bl	115e4 <__printf_chk@plt>
   15cdc:	mov	r0, #10
   15ce0:	bl	115b4 <putchar@plt>
   15ce4:	b	154ac <bfd_arch_bits_per_address@plt+0x3de4>
   15ce8:	str	r3, [r5, #256]	; 0x100
   15cec:	b	15934 <bfd_arch_bits_per_address@plt+0x426c>
   15cf0:	movw	r0, #8604	; 0x219c
   15cf4:	movt	r0, #2
   15cf8:	bl	114e8 <puts@plt>
   15cfc:	b	153a8 <bfd_arch_bits_per_address@plt+0x3ce0>
   15d00:	mov	r2, #5
   15d04:	movw	r1, #10640	; 0x2990
   15d08:	mov	r0, #0
   15d0c:	movt	r1, #2
   15d10:	bl	113e0 <dcgettext@plt>
   15d14:	mov	r1, r0
   15d18:	mov	r0, #1
   15d1c:	bl	115e4 <__printf_chk@plt>
   15d20:	mov	r2, #0
   15d24:	mov	r3, #0
   15d28:	movt	r3, #16368	; 0x3ff0
   15d2c:	strd	r2, [r4]
   15d30:	b	15484 <bfd_arch_bits_per_address@plt+0x3dbc>
   15d34:	ldr	sl, [r5, #248]	; 0xf8
   15d38:	cmp	sl, #0
   15d3c:	beq	15934 <bfd_arch_bits_per_address@plt+0x426c>
   15d40:	movw	r9, #30568	; 0x7768
   15d44:	movw	r5, #10296	; 0x2838
   15d48:	movw	r4, #10264	; 0x2818
   15d4c:	movt	r9, #3
   15d50:	movt	r5, #2
   15d54:	movt	r4, #2
   15d58:	vldr	s8, [r9]
   15d5c:	vcvt.f64.s32	d7, s8
   15d60:	vldr	d6, [sl, #224]	; 0xe0
   15d64:	ldr	r1, [r6]
   15d68:	movw	r2, #11092	; 0x2b54
   15d6c:	movt	r2, #2
   15d70:	cmp	r1, #0
   15d74:	mov	r0, #1
   15d78:	mov	r3, r2
   15d7c:	moveq	r1, r5
   15d80:	movne	r1, r4
   15d84:	vdiv.f64	d6, d6, d7
   15d88:	vstr	d6, [sp]
   15d8c:	vldr	d6, [sl, #232]	; 0xe8
   15d90:	vdiv.f64	d7, d6, d7
   15d94:	vstr	d7, [sp, #8]
   15d98:	ldr	ip, [sl, #32]
   15d9c:	str	ip, [sp, #16]
   15da0:	bl	115e4 <__printf_chk@plt>
   15da4:	ldr	r2, [sl, #184]	; 0xb8
   15da8:	cmp	r2, #0
   15dac:	movwne	r1, #10088	; 0x2768
   15db0:	movweq	r1, #10096	; 0x2770
   15db4:	movweq	r2, #11092	; 0x2b54
   15db8:	movne	r0, #1
   15dbc:	movteq	r2, #2
   15dc0:	moveq	r0, #1
   15dc4:	movtne	r1, #2
   15dc8:	movteq	r1, #2
   15dcc:	bl	115e4 <__printf_chk@plt>
   15dd0:	movw	r1, #10364	; 0x287c
   15dd4:	mov	r0, #1
   15dd8:	movt	r1, #2
   15ddc:	bl	115e4 <__printf_chk@plt>
   15de0:	mov	r0, sl
   15de4:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   15de8:	mov	r0, #10
   15dec:	bl	115b4 <putchar@plt>
   15df0:	ldr	sl, [sl, #248]	; 0xf8
   15df4:	cmp	sl, #0
   15df8:	bne	15d58 <bfd_arch_bits_per_address@plt+0x4690>
   15dfc:	b	15934 <bfd_arch_bits_per_address@plt+0x426c>
   15e00:	movw	r3, #30440	; 0x76e8
   15e04:	movt	r3, #3
   15e08:	ldr	r0, [r3]
   15e0c:	bl	1e0f4 <bfd_arch_bits_per_address@plt+0xca2c>
   15e10:	b	1538c <bfd_arch_bits_per_address@plt+0x3cc4>
   15e14:	bl	113ec <__stack_chk_fail@plt>
   15e18:	movw	r3, #29040	; 0x7170
   15e1c:	movt	r3, #3
   15e20:	movw	r2, #21846	; 0x5556
   15e24:	movt	r2, #21845	; 0x5555
   15e28:	ldr	r3, [r3]
   15e2c:	movw	ip, #29904	; 0x74d0
   15e30:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e34:	sub	r3, r3, #1
   15e38:	movw	r4, #31716	; 0x7be4
   15e3c:	movw	r5, #31768	; 0x7c18
   15e40:	smull	r1, r2, r2, r3
   15e44:	movt	r5, #3
   15e48:	movt	r4, #3
   15e4c:	movt	ip, #3
   15e50:	ldr	r1, [r5]
   15e54:	sub	sp, sp, #68	; 0x44
   15e58:	ldr	r0, [r4]
   15e5c:	str	ip, [sp, #36]	; 0x24
   15e60:	add	r0, r0, r1
   15e64:	ldr	r1, [ip]
   15e68:	sub	r2, r2, r3, asr #31
   15e6c:	str	r2, [sp, #12]
   15e70:	lsl	r0, r0, #2
   15e74:	str	r1, [sp, #60]	; 0x3c
   15e78:	bl	11458 <xmalloc@plt>
   15e7c:	ldr	ip, [r5]
   15e80:	cmp	ip, #0
   15e84:	str	r0, [sp, #32]
   15e88:	beq	16288 <bfd_arch_bits_per_address@plt+0x4bc0>
   15e8c:	ldr	r3, [r5, #4]
   15e90:	movw	r2, #29044	; 0x7174
   15e94:	movt	r2, #3
   15e98:	mov	sl, #0
   15e9c:	mov	r6, r0
   15ea0:	ldr	lr, [r2]
   15ea4:	mov	r1, r3
   15ea8:	mov	r2, sl
   15eac:	cmp	lr, #0
   15eb0:	moveq	r0, r1
   15eb4:	beq	15ed8 <bfd_arch_bits_per_address@plt+0x4810>
   15eb8:	ldr	r5, [r3, #32]
   15ebc:	mov	r0, r3
   15ec0:	cmp	r5, #0
   15ec4:	bne	15ed8 <bfd_arch_bits_per_address@plt+0x4810>
   15ec8:	vldr	d7, [r3, #168]	; 0xa8
   15ecc:	vcmp.f64	d7, #0.0
   15ed0:	vmrs	APSR_nzcv, fpscr
   15ed4:	beq	15ee0 <bfd_arch_bits_per_address@plt+0x4818>
   15ed8:	str	r0, [r6, sl, lsl #2]
   15edc:	add	sl, sl, #1
   15ee0:	add	r2, r2, #1
   15ee4:	add	r3, r3, #264	; 0x108
   15ee8:	cmp	r2, ip
   15eec:	add	r1, r1, #264	; 0x108
   15ef0:	bne	15eac <bfd_arch_bits_per_address@plt+0x47e4>
   15ef4:	ldr	r0, [sp, #32]
   15ef8:	movw	r3, #21272	; 0x5318
   15efc:	mov	r1, sl
   15f00:	movt	r3, #1
   15f04:	mov	r2, #4
   15f08:	bl	11674 <qsort@plt>
   15f0c:	ldr	r0, [r4]
   15f10:	cmp	r0, #0
   15f14:	beq	16290 <bfd_arch_bits_per_address@plt+0x4bc8>
   15f18:	movw	r2, #31708	; 0x7bdc
   15f1c:	movt	r2, #3
   15f20:	sub	r1, sl, #-1073741823	; 0xc0000001
   15f24:	ldr	ip, [sp, #32]
   15f28:	ldr	r2, [r2]
   15f2c:	mov	r3, #1
   15f30:	add	r1, ip, r1, lsl #2
   15f34:	add	r2, r2, #264	; 0x108
   15f38:	add	ip, r3, sl
   15f3c:	add	r3, r3, #1
   15f40:	cmp	r3, r0
   15f44:	str	r2, [r1, #4]!
   15f48:	add	r2, r2, #264	; 0x108
   15f4c:	bls	15f38 <bfd_arch_bits_per_address@plt+0x4870>
   15f50:	str	ip, [sp, #8]
   15f54:	movw	r0, #8604	; 0x219c
   15f58:	movt	r0, #2
   15f5c:	bl	114e8 <puts@plt>
   15f60:	mov	r2, #5
   15f64:	movw	r1, #11068	; 0x2b3c
   15f68:	mov	r0, #0
   15f6c:	movt	r1, #2
   15f70:	bl	113e0 <dcgettext@plt>
   15f74:	mov	r1, r0
   15f78:	mov	r0, #1
   15f7c:	bl	115e4 <__printf_chk@plt>
   15f80:	ldr	ip, [sp, #8]
   15f84:	movw	r3, #43691	; 0xaaab
   15f88:	movt	r3, #43690	; 0xaaaa
   15f8c:	add	r2, ip, #2
   15f90:	umull	r1, r3, r3, r2
   15f94:	lsrs	r3, r3, #1
   15f98:	beq	16150 <bfd_arch_bits_per_address@plt+0x4a88>
   15f9c:	ldr	ip, [sp, #32]
   15fa0:	movw	fp, #30560	; 0x7760
   15fa4:	movt	fp, #3
   15fa8:	str	sl, [sp, #20]
   15fac:	mov	sl, r3
   15fb0:	str	ip, [sp, #28]
   15fb4:	lsl	ip, r3, #2
   15fb8:	str	ip, [sp, #16]
   15fbc:	mov	ip, #0
   15fc0:	str	ip, [sp, #24]
   15fc4:	ldr	ip, [sp, #24]
   15fc8:	ldr	r1, [sp, #8]
   15fcc:	cmp	ip, r1
   15fd0:	bcs	16124 <bfd_arch_bits_per_address@plt+0x4a5c>
   15fd4:	ldr	r8, [sp, #28]
   15fd8:	movw	r5, #30440	; 0x76e8
   15fdc:	movt	r5, #3
   15fe0:	mov	r7, ip
   15fe4:	mov	r4, #4
   15fe8:	mov	r9, #0
   15fec:	ldr	r6, [r8]
   15ff0:	mov	r1, #1
   15ff4:	mov	r2, #20
   15ff8:	ldr	r3, [r6, #208]	; 0xd0
   15ffc:	ldr	ip, [r6, #200]	; 0xc8
   16000:	cmp	r3, #0
   16004:	addne	r0, sp, #40	; 0x28
   16008:	addeq	r0, sp, #40	; 0x28
   1600c:	movwne	r3, #10080	; 0x2760
   16010:	movweq	r3, #11096	; 0x2b58
   16014:	movtne	r3, #2
   16018:	movteq	r3, #2
   1601c:	str	ip, [sp]
   16020:	bl	11590 <__sprintf_chk@plt>
   16024:	ldr	ip, [sp, #20]
   16028:	ldr	r3, [fp]
   1602c:	cmp	ip, r7
   16030:	bls	16174 <bfd_arch_bits_per_address@plt+0x4aac>
   16034:	cmp	r3, #0
   16038:	bne	1626c <bfd_arch_bits_per_address@plt+0x4ba4>
   1603c:	add	r0, sp, #40	; 0x28
   16040:	bl	11560 <strlen@plt>
   16044:	add	r9, r0, r9
   16048:	cmp	r9, r4
   1604c:	bgt	16068 <bfd_arch_bits_per_address@plt+0x49a0>
   16050:	add	r9, r9, #1
   16054:	mov	r0, #32
   16058:	ldr	r1, [r5]
   1605c:	bl	11440 <_IO_putc@plt>
   16060:	cmp	r9, r4
   16064:	ble	16050 <bfd_arch_bits_per_address@plt+0x4988>
   16068:	add	r2, sp, #40	; 0x28
   1606c:	movw	r1, #11120	; 0x2b70
   16070:	mov	r0, #1
   16074:	movt	r1, #2
   16078:	bl	115e4 <__printf_chk@plt>
   1607c:	mov	r0, r6
   16080:	bl	1c298 <bfd_arch_bits_per_address@plt+0xabd0>
   16084:	movw	r3, #30544	; 0x7750
   16088:	movt	r3, #3
   1608c:	ldr	r3, [r3]
   16090:	cmp	r3, #0
   16094:	add	r9, r9, r0
   16098:	bne	16104 <bfd_arch_bits_per_address@plt+0x4a3c>
   1609c:	ldrb	r3, [r6, #28]
   160a0:	tst	r3, #2
   160a4:	beq	16104 <bfd_arch_bits_per_address@plt+0x4a3c>
   160a8:	ldr	r2, [r6, #20]
   160ac:	cmp	r2, #0
   160b0:	beq	16104 <bfd_arch_bits_per_address@plt+0x4a3c>
   160b4:	movw	r3, #30548	; 0x7754
   160b8:	movt	r3, #3
   160bc:	ldr	r6, [r2, #4]
   160c0:	ldr	r3, [r3]
   160c4:	cmp	r3, #0
   160c8:	bne	160e0 <bfd_arch_bits_per_address@plt+0x4a18>
   160cc:	mov	r0, r6
   160d0:	mov	r1, #47	; 0x2f
   160d4:	bl	11620 <strrchr@plt>
   160d8:	cmp	r0, #0
   160dc:	addne	r6, r0, #1
   160e0:	mov	r2, r6
   160e4:	movw	r1, #11128	; 0x2b78
   160e8:	mov	r0, #1
   160ec:	movt	r1, #2
   160f0:	bl	115e4 <__printf_chk@plt>
   160f4:	mov	r0, r6
   160f8:	bl	11560 <strlen@plt>
   160fc:	add	r9, r9, #3
   16100:	add	r9, r9, r0
   16104:	ldr	ip, [sp, #16]
   16108:	add	r7, r7, sl
   1610c:	add	r8, r8, ip
   16110:	ldr	ip, [sp, #8]
   16114:	cmp	r7, ip
   16118:	ldr	ip, [sp, #12]
   1611c:	add	r4, r4, ip
   16120:	bcc	15fec <bfd_arch_bits_per_address@plt+0x4924>
   16124:	ldr	ip, [sp, #24]
   16128:	mov	r0, #10
   1612c:	add	ip, ip, #1
   16130:	str	ip, [sp, #24]
   16134:	bl	115b4 <putchar@plt>
   16138:	ldr	ip, [sp, #24]
   1613c:	cmp	ip, sl
   16140:	ldr	ip, [sp, #28]
   16144:	add	ip, ip, #4
   16148:	str	ip, [sp, #28]
   1614c:	bne	15fc4 <bfd_arch_bits_per_address@plt+0x48fc>
   16150:	ldr	ip, [sp, #36]	; 0x24
   16154:	ldr	r2, [sp, #60]	; 0x3c
   16158:	ldr	r3, [ip]
   1615c:	cmp	r2, r3
   16160:	bne	16298 <bfd_arch_bits_per_address@plt+0x4bd0>
   16164:	ldr	r0, [sp, #32]
   16168:	add	sp, sp, #68	; 0x44
   1616c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16170:	b	11374 <free@plt>
   16174:	cmp	r3, #0
   16178:	bne	16210 <bfd_arch_bits_per_address@plt+0x4b48>
   1617c:	add	r0, sp, #40	; 0x28
   16180:	bl	11560 <strlen@plt>
   16184:	add	r9, r0, r9
   16188:	cmp	r9, r4
   1618c:	bgt	161a8 <bfd_arch_bits_per_address@plt+0x4ae0>
   16190:	add	r9, r9, #1
   16194:	mov	r0, #32
   16198:	ldr	r1, [r5]
   1619c:	bl	11440 <_IO_putc@plt>
   161a0:	cmp	r9, r4
   161a4:	ble	16190 <bfd_arch_bits_per_address@plt+0x4ac8>
   161a8:	add	r2, sp, #40	; 0x28
   161ac:	movw	r1, #11120	; 0x2b70
   161b0:	mov	r0, #1
   161b4:	movt	r1, #2
   161b8:	bl	115e4 <__printf_chk@plt>
   161bc:	mov	r2, #5
   161c0:	movw	r1, #11144	; 0x2b88
   161c4:	mov	r0, #0
   161c8:	movt	r1, #2
   161cc:	bl	113e0 <dcgettext@plt>
   161d0:	ldr	ip, [r6, #240]	; 0xf0
   161d4:	mov	r1, #1
   161d8:	mov	r2, #20
   161dc:	str	ip, [sp]
   161e0:	mov	r3, r0
   161e4:	add	r0, sp, #40	; 0x28
   161e8:	bl	11590 <__sprintf_chk@plt>
   161ec:	add	r2, sp, #40	; 0x28
   161f0:	movw	r1, #11168	; 0x2ba0
   161f4:	mov	r0, #1
   161f8:	movt	r1, #2
   161fc:	bl	115e4 <__printf_chk@plt>
   16200:	add	r0, sp, #40	; 0x28
   16204:	bl	11560 <strlen@plt>
   16208:	add	r9, r9, r0
   1620c:	b	16104 <bfd_arch_bits_per_address@plt+0x4a3c>
   16210:	add	r2, sp, #40	; 0x28
   16214:	movw	r1, #11136	; 0x2b80
   16218:	mov	r0, #1
   1621c:	movt	r1, #2
   16220:	bl	115e4 <__printf_chk@plt>
   16224:	mov	r2, #5
   16228:	movw	r1, #11144	; 0x2b88
   1622c:	mov	r0, #0
   16230:	movt	r1, #2
   16234:	bl	113e0 <dcgettext@plt>
   16238:	ldr	ip, [r6, #240]	; 0xf0
   1623c:	mov	r1, #1
   16240:	mov	r2, #20
   16244:	str	ip, [sp]
   16248:	mov	r3, r0
   1624c:	add	r0, sp, #40	; 0x28
   16250:	bl	11590 <__sprintf_chk@plt>
   16254:	movw	r1, #11156	; 0x2b94
   16258:	add	r2, sp, #40	; 0x28
   1625c:	movt	r1, #2
   16260:	mov	r0, #1
   16264:	bl	115e4 <__printf_chk@plt>
   16268:	b	16104 <bfd_arch_bits_per_address@plt+0x4a3c>
   1626c:	ldr	r3, [r6, #16]
   16270:	movw	r1, #11104	; 0x2b60
   16274:	add	r2, sp, #40	; 0x28
   16278:	movt	r1, #2
   1627c:	mov	r0, #1
   16280:	bl	115e4 <__printf_chk@plt>
   16284:	b	16104 <bfd_arch_bits_per_address@plt+0x4a3c>
   16288:	mov	sl, ip
   1628c:	b	15ef4 <bfd_arch_bits_per_address@plt+0x482c>
   16290:	str	sl, [sp, #8]
   16294:	b	15f54 <bfd_arch_bits_per_address@plt+0x488c>
   16298:	bl	113ec <__stack_chk_fail@plt>
   1629c:	movw	r1, #31768	; 0x7c18
   162a0:	movt	r1, #3
   162a4:	movw	r2, #29904	; 0x74d0
   162a8:	movt	r2, #3
   162ac:	ldr	r0, [r1]
   162b0:	ldr	r3, [r2]
   162b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162b8:	vpush	{d8-d9}
   162bc:	sub	sp, sp, #84	; 0x54
   162c0:	lsl	r0, r0, #2
   162c4:	mov	r8, #0
   162c8:	str	r3, [sp, #76]	; 0x4c
   162cc:	str	r1, [sp, #16]
   162d0:	movw	r1, #31704	; 0x7bd8
   162d4:	str	r2, [sp, #28]
   162d8:	movt	r1, #3
   162dc:	str	r8, [sp, #68]	; 0x44
   162e0:	str	r1, [sp, #12]
   162e4:	str	r8, [sp, #72]	; 0x48
   162e8:	bl	11458 <xmalloc@plt>
   162ec:	ldr	r2, [sp, #16]
   162f0:	str	r0, [sp, #56]	; 0x38
   162f4:	ldr	r0, [r2]
   162f8:	lsl	r0, r0, #2
   162fc:	bl	11458 <xmalloc@plt>
   16300:	ldr	r3, [sp, #16]
   16304:	str	r0, [sp, #40]	; 0x28
   16308:	ldr	r0, [r3]
   1630c:	lsl	r0, r0, #2
   16310:	bl	11458 <xmalloc@plt>
   16314:	ldr	r1, [sp, #12]
   16318:	str	r0, [sp, #20]
   1631c:	ldr	r0, [r1]
   16320:	lsl	r0, r0, #2
   16324:	bl	11458 <xmalloc@plt>
   16328:	ldr	r2, [sp, #12]
   1632c:	str	r0, [sp, #44]	; 0x2c
   16330:	ldr	r0, [r2]
   16334:	lsl	r0, r0, #2
   16338:	bl	11458 <xmalloc@plt>
   1633c:	ldr	r3, [sp, #12]
   16340:	mov	r6, r0
   16344:	ldr	r0, [r3]
   16348:	lsl	r0, r0, #2
   1634c:	bl	11458 <xmalloc@plt>
   16350:	ldr	r1, [sp, #16]
   16354:	ldr	sl, [r1]
   16358:	cmp	sl, r8
   1635c:	str	r0, [sp, #36]	; 0x24
   16360:	beq	16878 <bfd_arch_bits_per_address@plt+0x51b0>
   16364:	ldr	r3, [r1, #4]
   16368:	mov	r7, r8
   1636c:	mov	r2, r8
   16370:	mov	r0, r8
   16374:	ldr	ip, [sp, #56]	; 0x38
   16378:	ldr	lr, [sp, #40]	; 0x28
   1637c:	b	163a4 <bfd_arch_bits_per_address@plt+0x4cdc>
   16380:	add	r2, r2, #1
   16384:	ldrb	r1, [r3, #28]
   16388:	cmp	r2, sl
   1638c:	str	r3, [ip, r8, lsl #2]
   16390:	orr	r1, r1, #16
   16394:	add	r8, r8, #1
   16398:	strb	r1, [r3, #28]
   1639c:	add	r3, r3, #264	; 0x108
   163a0:	bcs	163e0 <bfd_arch_bits_per_address@plt+0x4d18>
   163a4:	ldr	r1, [r3, #32]
   163a8:	cmp	r1, #0
   163ac:	beq	16380 <bfd_arch_bits_per_address@plt+0x4cb8>
   163b0:	add	r2, r2, #1
   163b4:	ldrb	r1, [r3, #28]
   163b8:	cmp	r2, sl
   163bc:	str	r3, [lr, r7, lsl #2]
   163c0:	str	r0, [r3, #160]	; 0xa0
   163c4:	bfc	r1, #4, #1
   163c8:	str	r0, [r3, #164]	; 0xa4
   163cc:	add	r7, r7, #1
   163d0:	str	r0, [r3, #36]	; 0x24
   163d4:	add	r3, r3, #264	; 0x108
   163d8:	strb	r1, [r3, #-236]	; 0xffffff14
   163dc:	bcc	163a4 <bfd_arch_bits_per_address@plt+0x4cdc>
   163e0:	movw	r3, #52429	; 0xcccd
   163e4:	movt	r3, #52428	; 0xcccc
   163e8:	lsl	r2, r7, #2
   163ec:	str	r2, [sp, #60]	; 0x3c
   163f0:	umull	r1, r3, r3, r7
   163f4:	lsr	r3, r3, #6
   163f8:	str	r3, [sp, #52]	; 0x34
   163fc:	movw	r2, #31712	; 0x7be0
   16400:	movt	r2, #3
   16404:	str	r2, [sp, #24]
   16408:	movw	r3, #18888	; 0x49c8
   1640c:	ldr	r2, [sp, #12]
   16410:	movt	r3, #1
   16414:	ldr	r1, [r2]
   16418:	ldr	r2, [sp, #24]
   1641c:	ldr	r0, [r2]
   16420:	mov	r2, #4
   16424:	bl	11674 <qsort@plt>
   16428:	ldr	r3, [sp, #12]
   1642c:	ldr	r3, [r3]
   16430:	cmp	r3, #0
   16434:	str	r3, [sp, #48]	; 0x30
   16438:	beq	16514 <bfd_arch_bits_per_address@plt+0x4e4c>
   1643c:	ldr	r2, [sp, #24]
   16440:	mov	r0, #0
   16444:	ldr	r3, [sp, #48]	; 0x30
   16448:	mov	r1, #0
   1644c:	mov	r5, #0
   16450:	ldr	r9, [r2]
   16454:	add	r4, r9, r3, lsl #2
   16458:	mov	r3, r9
   1645c:	ldr	r2, [r3], #4
   16460:	ldr	ip, [r2, #8]
   16464:	str	r5, [r2, #40]	; 0x28
   16468:	adds	r0, r0, ip
   1646c:	adc	r1, r1, #0
   16470:	cmp	r3, r4
   16474:	bne	1645c <bfd_arch_bits_per_address@plt+0x4d94>
   16478:	bl	1fd70 <bfd_arch_bits_per_address@plt+0xe6a8>
   1647c:	ldr	fp, [r9]
   16480:	vldr	s12, [fp, #8]
   16484:	vcvt.f64.u32	d7, s12
   16488:	vldr	d9, [pc, #992]	; 16870 <bfd_arch_bits_per_address@plt+0x51a8>
   1648c:	mov	r3, #0
   16490:	ldr	r2, [fp, #8]
   16494:	mov	r5, r3
   16498:	mov	r4, r2
   1649c:	vmov	d8, r0, r1
   164a0:	vdiv.f64	d7, d7, d8
   164a4:	vcmpe.f64	d7, d9
   164a8:	vmrs	APSR_nzcv, fpscr
   164ac:	bgt	16514 <bfd_arch_bits_per_address@plt+0x4e4c>
   164b0:	str	r6, [sp, #32]
   164b4:	mov	sl, #0
   164b8:	mov	r6, r9
   164bc:	ldr	r9, [sp, #48]	; 0x30
   164c0:	b	164f4 <bfd_arch_bits_per_address@plt+0x4e2c>
   164c4:	ldr	fp, [r6, #4]!
   164c8:	ldr	r3, [fp, #8]
   164cc:	adds	r4, r4, r3
   164d0:	adc	r5, r5, #0
   164d4:	mov	r0, r4
   164d8:	mov	r1, r5
   164dc:	bl	1fd70 <bfd_arch_bits_per_address@plt+0xe6a8>
   164e0:	vmov	d6, r0, r1
   164e4:	vdiv.f64	d7, d6, d8
   164e8:	vcmpe.f64	d7, d9
   164ec:	vmrs	APSR_nzcv, fpscr
   164f0:	bgt	16510 <bfd_arch_bits_per_address@plt+0x4e48>
   164f4:	ldr	r3, [fp, #4]
   164f8:	add	sl, sl, #1
   164fc:	cmp	sl, r9
   16500:	ldr	r2, [r3, #36]	; 0x24
   16504:	add	r2, r2, #1
   16508:	str	r2, [r3, #36]	; 0x24
   1650c:	bne	164c4 <bfd_arch_bits_per_address@plt+0x4dfc>
   16510:	ldr	r6, [sp, #32]
   16514:	ldr	r2, [sp, #60]	; 0x3c
   16518:	ldr	r1, [sp, #40]	; 0x28
   1651c:	ldr	r0, [sp, #20]
   16520:	bl	113b0 <memcpy@plt>
   16524:	mov	r1, r7
   16528:	ldr	r0, [sp, #20]
   1652c:	movw	r3, #18932	; 0x49f4
   16530:	mov	r2, #4
   16534:	movt	r3, #1
   16538:	bl	11674 <qsort@plt>
   1653c:	ldr	r1, [sp, #52]	; 0x34
   16540:	cmp	r1, #0
   16544:	beq	1688c <bfd_arch_bits_per_address@plt+0x51c4>
   16548:	ldr	r1, [sp, #20]
   1654c:	ldr	lr, [r1]
   16550:	ldr	r3, [lr, #36]	; 0x24
   16554:	cmp	r3, #5
   16558:	beq	1688c <bfd_arch_bits_per_address@plt+0x51c4>
   1655c:	ldr	r2, [sp, #72]	; 0x48
   16560:	mov	r4, #0
   16564:	ldr	r5, [sp, #20]
   16568:	mov	r1, #1
   1656c:	ldr	sl, [sp, #52]	; 0x34
   16570:	mov	ip, r2
   16574:	ldr	r3, [lr, #256]	; 0x100
   16578:	cmp	r3, #0
   1657c:	beq	165a8 <bfd_arch_bits_per_address@plt+0x4ee0>
   16580:	ldr	r9, [r3]
   16584:	ldr	r0, [r3, #4]
   16588:	cmp	r9, r0
   1658c:	strne	r3, [r6, r2, lsl #2]
   16590:	addne	r2, r2, #1
   16594:	str	r1, [r3, #40]	; 0x28
   16598:	ldr	r3, [r3, #36]	; 0x24
   1659c:	movne	ip, r2
   165a0:	cmp	r3, #0
   165a4:	bne	16580 <bfd_arch_bits_per_address@plt+0x4eb8>
   165a8:	ldr	r3, [lr, #252]	; 0xfc
   165ac:	cmp	r3, #0
   165b0:	beq	165dc <bfd_arch_bits_per_address@plt+0x4f14>
   165b4:	ldr	r9, [r3]
   165b8:	ldr	r0, [r3, #4]
   165bc:	cmp	r9, r0
   165c0:	strne	r3, [r6, r2, lsl #2]
   165c4:	addne	r2, r2, #1
   165c8:	str	r1, [r3, #40]	; 0x28
   165cc:	ldr	r3, [r3, #32]
   165d0:	movne	ip, r2
   165d4:	cmp	r3, #0
   165d8:	bne	165b4 <bfd_arch_bits_per_address@plt+0x4eec>
   165dc:	add	r3, r4, #1
   165e0:	ldrb	r0, [lr, #28]
   165e4:	cmp	r3, sl
   165e8:	orr	r0, r0, #16
   165ec:	strb	r0, [lr, #28]
   165f0:	beq	16608 <bfd_arch_bits_per_address@plt+0x4f40>
   165f4:	ldr	lr, [r5, #4]!
   165f8:	ldr	r0, [lr, #36]	; 0x24
   165fc:	cmp	r0, #5
   16600:	movne	r4, r3
   16604:	bne	16574 <bfd_arch_bits_per_address@plt+0x4eac>
   16608:	str	ip, [sp, #72]	; 0x48
   1660c:	cmp	r2, #0
   16610:	moveq	r5, r2
   16614:	beq	1667c <bfd_arch_bits_per_address@plt+0x4fb4>
   16618:	ldr	ip, [sp, #44]	; 0x2c
   1661c:	add	r2, r6, r2, lsl #2
   16620:	mov	r3, r6
   16624:	mov	r5, #0
   16628:	ldr	r1, [r3], #4
   1662c:	ldr	r0, [r1, #4]
   16630:	ldrb	r0, [r0, #28]
   16634:	tst	r0, #16
   16638:	beq	16674 <bfd_arch_bits_per_address@plt+0x4fac>
   1663c:	ldr	r0, [r1]
   16640:	ldrb	r0, [r0, #28]
   16644:	tst	r0, #16
   16648:	beq	16674 <bfd_arch_bits_per_address@plt+0x4fac>
   1664c:	str	r1, [ip, r5, lsl #2]
   16650:	add	r5, r5, #1
   16654:	ldr	r0, [r1, #4]
   16658:	ldr	r1, [r1]
   1665c:	ldrb	lr, [r0, #28]
   16660:	bfc	lr, #4, #1
   16664:	strb	lr, [r0, #28]
   16668:	ldrb	r0, [r1, #28]
   1666c:	bfc	r0, #4, #1
   16670:	strb	r0, [r1, #28]
   16674:	cmp	r3, r2
   16678:	bne	16628 <bfd_arch_bits_per_address@plt+0x4f60>
   1667c:	cmp	r4, #0
   16680:	beq	166c4 <bfd_arch_bits_per_address@plt+0x4ffc>
   16684:	ldr	r1, [sp, #20]
   16688:	mov	r9, #0
   1668c:	sub	sl, r1, #4
   16690:	b	166a0 <bfd_arch_bits_per_address@plt+0x4fd8>
   16694:	add	r9, r9, #1
   16698:	cmp	r9, r4
   1669c:	beq	166c4 <bfd_arch_bits_per_address@plt+0x4ffc>
   166a0:	ldr	r3, [sl, #4]!
   166a4:	ldrb	r2, [r3, #28]
   166a8:	tst	r2, #16
   166ac:	beq	16694 <bfd_arch_bits_per_address@plt+0x4fcc>
   166b0:	ldr	r0, [r3, #16]
   166b4:	add	r9, r9, #1
   166b8:	bl	114e8 <puts@plt>
   166bc:	cmp	r9, r4
   166c0:	bne	166a0 <bfd_arch_bits_per_address@plt+0x4fd8>
   166c4:	ldr	r0, [sp, #44]	; 0x2c
   166c8:	mov	r1, r5
   166cc:	mov	r2, #4
   166d0:	movw	r3, #18888	; 0x49c8
   166d4:	movt	r3, #1
   166d8:	add	r4, sp, #68	; 0x44
   166dc:	bl	11674 <qsort@plt>
   166e0:	ldr	r0, [sp, #44]	; 0x2c
   166e4:	mov	r1, r5
   166e8:	mov	r2, #1
   166ec:	ldr	r3, [sp, #36]	; 0x24
   166f0:	str	r4, [sp]
   166f4:	bl	14a20 <bfd_arch_bits_per_address@plt+0x3358>
   166f8:	ldr	r2, [sp, #24]
   166fc:	ldr	r3, [sp, #12]
   16700:	ldr	r0, [r2]
   16704:	mov	r2, #0
   16708:	ldr	r1, [r3]
   1670c:	ldr	r3, [sp, #36]	; 0x24
   16710:	str	r4, [sp]
   16714:	bl	14a20 <bfd_arch_bits_per_address@plt+0x3358>
   16718:	add	ip, sp, #72	; 0x48
   1671c:	ldr	r1, [sp, #68]	; 0x44
   16720:	mov	r3, r6
   16724:	ldr	r0, [sp, #36]	; 0x24
   16728:	mov	r2, #1
   1672c:	str	ip, [sp]
   16730:	bl	14a20 <bfd_arch_bits_per_address@plt+0x3358>
   16734:	cmp	r7, #0
   16738:	beq	1677c <bfd_arch_bits_per_address@plt+0x50b4>
   1673c:	ldr	r2, [sp, #40]	; 0x28
   16740:	mov	r4, #0
   16744:	sub	r5, r2, #4
   16748:	b	16758 <bfd_arch_bits_per_address@plt+0x5090>
   1674c:	add	r4, r4, #1
   16750:	cmp	r4, r7
   16754:	beq	1677c <bfd_arch_bits_per_address@plt+0x50b4>
   16758:	ldr	r3, [r5, #4]!
   1675c:	ldrb	r2, [r3, #28]
   16760:	tst	r2, #16
   16764:	bne	1674c <bfd_arch_bits_per_address@plt+0x5084>
   16768:	ldr	r0, [r3, #16]
   1676c:	add	r4, r4, #1
   16770:	bl	114e8 <puts@plt>
   16774:	cmp	r4, r7
   16778:	bne	16758 <bfd_arch_bits_per_address@plt+0x5090>
   1677c:	cmp	r8, #0
   16780:	beq	167a8 <bfd_arch_bits_per_address@plt+0x50e0>
   16784:	ldr	r2, [sp, #56]	; 0x38
   16788:	mov	r4, #0
   1678c:	sub	r5, r2, #4
   16790:	ldr	r3, [r5, #4]!
   16794:	add	r4, r4, #1
   16798:	ldr	r0, [r3, #16]
   1679c:	bl	114e8 <puts@plt>
   167a0:	cmp	r4, r8
   167a4:	bne	16790 <bfd_arch_bits_per_address@plt+0x50c8>
   167a8:	ldr	r3, [sp, #16]
   167ac:	ldr	r0, [r3]
   167b0:	lsl	r0, r0, #2
   167b4:	bl	11458 <xmalloc@plt>
   167b8:	ldr	r1, [sp, #16]
   167bc:	mov	r9, r0
   167c0:	ldr	r0, [r1]
   167c4:	lsl	r0, r0, #2
   167c8:	bl	11458 <xmalloc@plt>
   167cc:	ldr	r2, [sp, #16]
   167d0:	mov	r8, r0
   167d4:	ldr	r0, [r2]
   167d8:	lsl	r0, r0, #2
   167dc:	bl	11458 <xmalloc@plt>
   167e0:	ldr	r3, [sp, #12]
   167e4:	mov	r7, r0
   167e8:	ldr	r0, [r3]
   167ec:	lsl	r0, r0, #2
   167f0:	bl	11458 <xmalloc@plt>
   167f4:	ldr	r1, [sp, #12]
   167f8:	mov	r6, r0
   167fc:	ldr	r0, [r1]
   16800:	lsl	r0, r0, #2
   16804:	bl	11458 <xmalloc@plt>
   16808:	ldr	r2, [sp, #12]
   1680c:	mov	r5, r0
   16810:	ldr	r0, [r2]
   16814:	lsl	r0, r0, #2
   16818:	bl	11458 <xmalloc@plt>
   1681c:	mov	r4, r0
   16820:	mov	r0, r9
   16824:	bl	11374 <free@plt>
   16828:	mov	r0, r8
   1682c:	bl	11374 <free@plt>
   16830:	mov	r0, r7
   16834:	bl	11374 <free@plt>
   16838:	mov	r0, r6
   1683c:	bl	11374 <free@plt>
   16840:	mov	r0, r5
   16844:	bl	11374 <free@plt>
   16848:	ldr	r1, [sp, #28]
   1684c:	ldr	r2, [sp, #76]	; 0x4c
   16850:	ldr	r3, [r1]
   16854:	cmp	r2, r3
   16858:	bne	16898 <bfd_arch_bits_per_address@plt+0x51d0>
   1685c:	mov	r0, r4
   16860:	add	sp, sp, #84	; 0x54
   16864:	vpop	{d8-d9}
   16868:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1686c:	b	11374 <free@plt>
   16870:	stclgt	12, cr12, [ip], {205}	; 0xcd
   16874:	svccc	0x00eccccc
   16878:	str	sl, [sp, #52]	; 0x34
   1687c:	mov	r8, sl
   16880:	str	sl, [sp, #60]	; 0x3c
   16884:	mov	r7, sl
   16888:	b	163fc <bfd_arch_bits_per_address@plt+0x4d34>
   1688c:	ldr	r2, [sp, #72]	; 0x48
   16890:	mov	r4, #0
   16894:	b	1660c <bfd_arch_bits_per_address@plt+0x4f44>
   16898:	bl	113ec <__stack_chk_fail@plt>
   1689c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168a0:	movw	r4, #31704	; 0x7bd8
   168a4:	movt	r4, #3
   168a8:	movw	r1, #29904	; 0x74d0
   168ac:	movt	r1, #3
   168b0:	sub	sp, sp, #28
   168b4:	ldr	r0, [r4]
   168b8:	mov	r2, #0
   168bc:	ldr	r3, [r1]
   168c0:	str	r1, [sp, #12]
   168c4:	lsl	r0, r0, #2
   168c8:	str	r2, [sp, #16]
   168cc:	str	r3, [sp, #20]
   168d0:	bl	11458 <xmalloc@plt>
   168d4:	ldr	r1, [r4]
   168d8:	movw	r2, #31712	; 0x7be0
   168dc:	movt	r2, #3
   168e0:	cmp	r1, #0
   168e4:	mov	r3, r0
   168e8:	ldreq	r0, [r2]
   168ec:	beq	16930 <bfd_arch_bits_per_address@plt+0x5268>
   168f0:	ldr	r0, [r2]
   168f4:	mov	r5, #1
   168f8:	add	r4, r0, r1, lsl #2
   168fc:	mov	ip, r0
   16900:	ldr	r2, [ip], #4
   16904:	ldr	lr, [r2]
   16908:	ldrb	lr, [lr, #28]
   1690c:	tst	lr, #8
   16910:	beq	16924 <bfd_arch_bits_per_address@plt+0x525c>
   16914:	ldr	lr, [r2, #4]
   16918:	ldrb	lr, [lr, #28]
   1691c:	tst	lr, #8
   16920:	bne	16928 <bfd_arch_bits_per_address@plt+0x5260>
   16924:	str	r5, [r2, #40]	; 0x28
   16928:	cmp	ip, r4
   1692c:	bne	16900 <bfd_arch_bits_per_address@plt+0x5238>
   16930:	movw	r7, #31768	; 0x7c18
   16934:	movt	r7, #3
   16938:	add	ip, sp, #16
   1693c:	mov	r2, #0
   16940:	str	ip, [sp]
   16944:	bl	14a20 <bfd_arch_bits_per_address@plt+0x3358>
   16948:	ldr	r3, [r7]
   1694c:	cmp	r3, #0
   16950:	movne	r4, #0
   16954:	movne	r5, r4
   16958:	bne	16974 <bfd_arch_bits_per_address@plt+0x52ac>
   1695c:	b	16998 <bfd_arch_bits_per_address@plt+0x52d0>
   16960:	ldr	r3, [r7]
   16964:	add	r5, r5, #1
   16968:	add	r4, r4, #264	; 0x108
   1696c:	cmp	r3, r5
   16970:	bls	16998 <bfd_arch_bits_per_address@plt+0x52d0>
   16974:	ldr	r3, [r7, #4]
   16978:	add	r3, r3, r4
   1697c:	ldrb	r2, [r3, #28]
   16980:	and	r2, r2, #24
   16984:	cmp	r2, #8
   16988:	bne	16960 <bfd_arch_bits_per_address@plt+0x5298>
   1698c:	ldr	r0, [r3, #16]
   16990:	bl	114e8 <puts@plt>
   16994:	b	16960 <bfd_arch_bits_per_address@plt+0x5298>
   16998:	movw	fp, #31728	; 0x7bf0
   1699c:	movw	sl, #31732	; 0x7bf4
   169a0:	movt	fp, #3
   169a4:	movt	sl, #3
   169a8:	movw	r3, #21292	; 0x532c
   169ac:	mov	r2, #12
   169b0:	movt	r3, #1
   169b4:	ldr	r0, [fp]
   169b8:	ldr	r1, [sl]
   169bc:	bl	11674 <qsort@plt>
   169c0:	ldr	r3, [sl]
   169c4:	cmp	r3, #0
   169c8:	movne	r8, #0
   169cc:	movne	r4, r8
   169d0:	movne	r9, r8
   169d4:	beq	16a8c <bfd_arch_bits_per_address@plt+0x53c4>
   169d8:	cmp	r4, #0
   169dc:	beq	169fc <bfd_arch_bits_per_address@plt+0x5334>
   169e0:	ldr	r3, [fp]
   169e4:	mov	r0, r4
   169e8:	add	r3, r3, r8
   169ec:	ldr	r1, [r3, #4]
   169f0:	bl	11398 <filename_cmp@plt>
   169f4:	cmp	r0, #0
   169f8:	beq	16a78 <bfd_arch_bits_per_address@plt+0x53b0>
   169fc:	ldr	r3, [r7]
   16a00:	cmp	r3, #0
   16a04:	movne	r4, #0
   16a08:	movne	r5, r4
   16a0c:	bne	16a28 <bfd_arch_bits_per_address@plt+0x5360>
   16a10:	b	16aa8 <bfd_arch_bits_per_address@plt+0x53e0>
   16a14:	ldr	r3, [r7]
   16a18:	add	r5, r5, #1
   16a1c:	add	r4, r4, #264	; 0x108
   16a20:	cmp	r3, r5
   16a24:	bls	16a64 <bfd_arch_bits_per_address@plt+0x539c>
   16a28:	ldr	r3, [r7, #4]
   16a2c:	movw	r6, #31768	; 0x7c18
   16a30:	movt	r6, #3
   16a34:	add	r3, r3, r4
   16a38:	ldrb	r2, [r3, #28]
   16a3c:	tst	r2, #8
   16a40:	beq	16a14 <bfd_arch_bits_per_address@plt+0x534c>
   16a44:	ldr	r2, [fp]
   16a48:	ldr	r0, [r3, #16]
   16a4c:	add	r3, r2, r8
   16a50:	ldr	r1, [r3, #4]
   16a54:	bl	11398 <filename_cmp@plt>
   16a58:	cmp	r0, #0
   16a5c:	bne	16a14 <bfd_arch_bits_per_address@plt+0x534c>
   16a60:	ldr	r3, [r6]
   16a64:	cmp	r5, r3
   16a68:	beq	16aa8 <bfd_arch_bits_per_address@plt+0x53e0>
   16a6c:	ldr	r3, [fp]
   16a70:	add	r3, r3, r8
   16a74:	ldr	r4, [r3, #4]
   16a78:	ldr	r3, [sl]
   16a7c:	add	r9, r9, #1
   16a80:	add	r8, r8, #12
   16a84:	cmp	r3, r9
   16a88:	bhi	169d8 <bfd_arch_bits_per_address@plt+0x5310>
   16a8c:	ldr	r1, [sp, #12]
   16a90:	ldr	r2, [sp, #20]
   16a94:	ldr	r3, [r1]
   16a98:	cmp	r2, r3
   16a9c:	bne	16abc <bfd_arch_bits_per_address@plt+0x53f4>
   16aa0:	add	sp, sp, #28
   16aa4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16aa8:	ldr	r3, [fp]
   16aac:	add	r3, r3, r8
   16ab0:	ldr	r0, [r3, #4]
   16ab4:	bl	114e8 <puts@plt>
   16ab8:	b	16a6c <bfd_arch_bits_per_address@plt+0x53a4>
   16abc:	bl	113ec <__stack_chk_fail@plt>
   16ac0:	movw	r3, #30432	; 0x76e0
   16ac4:	movt	r3, #3
   16ac8:	push	{r4, r5, lr}
   16acc:	mov	r2, #5
   16ad0:	sub	sp, sp, #12
   16ad4:	mov	r5, r0
   16ad8:	movw	r1, #11172	; 0x2ba4
   16adc:	mov	r0, #0
   16ae0:	movt	r1, #2
   16ae4:	ldr	r4, [r3]
   16ae8:	bl	113e0 <dcgettext@plt>
   16aec:	movw	r3, #31748	; 0x7c04
   16af0:	movt	r3, #3
   16af4:	str	r5, [sp]
   16af8:	mov	r1, #1
   16afc:	ldr	r3, [r3]
   16b00:	mov	r2, r0
   16b04:	mov	r0, r4
   16b08:	bl	115fc <__fprintf_chk@plt>
   16b0c:	mov	r0, #1
   16b10:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   16b14:	ldr	r0, [r0]
   16b18:	ldr	r1, [r1]
   16b1c:	b	11350 <strcmp@plt>
   16b20:	ldr	r1, [r1]
   16b24:	b	11350 <strcmp@plt>
   16b28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16b2c:	movw	r9, #29904	; 0x74d0
   16b30:	movt	r9, #3
   16b34:	sub	sp, sp, #1040	; 0x410
   16b38:	sub	sp, sp, #12
   16b3c:	movw	r1, #11212	; 0x2bcc
   16b40:	ldr	r3, [r9]
   16b44:	movt	r1, #2
   16b48:	str	r0, [sp, #12]
   16b4c:	str	r3, [sp, #1044]	; 0x414
   16b50:	bl	1165c <fopen64@plt>
   16b54:	subs	r4, r0, #0
   16b58:	beq	16dd4 <bfd_arch_bits_per_address@plt+0x570c>
   16b5c:	add	r5, sp, #20
   16b60:	mov	r6, #0
   16b64:	mov	r0, r4
   16b68:	bl	1153c <feof@plt>
   16b6c:	cmp	r0, #0
   16b70:	bne	16bfc <bfd_arch_bits_per_address@plt+0x5534>
   16b74:	movw	r1, #11240	; 0x2be8
   16b78:	mov	r0, r4
   16b7c:	movt	r1, #2
   16b80:	mov	r2, r5
   16b84:	bl	115cc <fscanf@plt>
   16b88:	cmp	r0, #0
   16b8c:	beq	16bc4 <bfd_arch_bits_per_address@plt+0x54fc>
   16b90:	movw	r1, #11248	; 0x2bf0
   16b94:	mov	r0, r5
   16b98:	movt	r1, #2
   16b9c:	mov	r2, #14
   16ba0:	bl	116b0 <strncmp@plt>
   16ba4:	cmp	r0, #0
   16ba8:	bne	16bcc <bfd_arch_bits_per_address@plt+0x5504>
   16bac:	movw	r1, #10536	; 0x2928
   16bb0:	mov	r0, r4
   16bb4:	movt	r1, #2
   16bb8:	bl	115cc <fscanf@plt>
   16bbc:	cmn	r0, #1
   16bc0:	bne	16b64 <bfd_arch_bits_per_address@plt+0x549c>
   16bc4:	ldr	r0, [sp, #12]
   16bc8:	bl	16ac0 <bfd_arch_bits_per_address@plt+0x53f8>
   16bcc:	movw	r1, #11264	; 0x2c00
   16bd0:	mov	r0, r4
   16bd4:	movt	r1, #2
   16bd8:	mov	r2, r5
   16bdc:	bl	115cc <fscanf@plt>
   16be0:	cmp	r0, #0
   16be4:	beq	16bc4 <bfd_arch_bits_per_address@plt+0x54fc>
   16be8:	mov	r0, r4
   16bec:	add	r6, r6, #1
   16bf0:	bl	1153c <feof@plt>
   16bf4:	cmp	r0, #0
   16bf8:	beq	16b74 <bfd_arch_bits_per_address@plt+0x54ac>
   16bfc:	add	r0, r6, r6, lsl #1
   16c00:	movw	r8, #31728	; 0x7bf0
   16c04:	movt	r8, #3
   16c08:	mov	r5, #0
   16c0c:	lsl	r0, r0, #2
   16c10:	bl	11458 <xmalloc@plt>
   16c14:	mov	fp, r8
   16c18:	str	r0, [r8]
   16c1c:	mov	r0, r4
   16c20:	bl	113f8 <rewind@plt>
   16c24:	mov	r0, r4
   16c28:	bl	1153c <feof@plt>
   16c2c:	cmp	r0, #0
   16c30:	bne	16c94 <bfd_arch_bits_per_address@plt+0x55cc>
   16c34:	movw	r1, #11240	; 0x2be8
   16c38:	mov	r0, r4
   16c3c:	movt	r1, #2
   16c40:	add	r2, sp, #20
   16c44:	bl	115cc <fscanf@plt>
   16c48:	cmp	r0, #0
   16c4c:	beq	16bc4 <bfd_arch_bits_per_address@plt+0x54fc>
   16c50:	movw	r1, #11248	; 0x2bf0
   16c54:	add	r0, sp, #20
   16c58:	movt	r1, #2
   16c5c:	mov	r2, #14
   16c60:	bl	116b0 <strncmp@plt>
   16c64:	cmp	r0, #0
   16c68:	bne	16d08 <bfd_arch_bits_per_address@plt+0x5640>
   16c6c:	movw	r1, #10536	; 0x2928
   16c70:	mov	r0, r4
   16c74:	movt	r1, #2
   16c78:	bl	115cc <fscanf@plt>
   16c7c:	cmn	r0, #1
   16c80:	beq	16bc4 <bfd_arch_bits_per_address@plt+0x54fc>
   16c84:	mov	r0, r4
   16c88:	bl	1153c <feof@plt>
   16c8c:	cmp	r0, #0
   16c90:	beq	16c34 <bfd_arch_bits_per_address@plt+0x556c>
   16c94:	cmp	r5, #0
   16c98:	movw	sl, #31732	; 0x7bf4
   16c9c:	movt	sl, #3
   16ca0:	ldr	r0, [r8]
   16ca4:	moveq	r1, r5
   16ca8:	str	r5, [sl]
   16cac:	beq	16d9c <bfd_arch_bits_per_address@plt+0x56d4>
   16cb0:	mov	r7, #0
   16cb4:	mov	r6, r7
   16cb8:	b	16ce0 <bfd_arch_bits_per_address@plt+0x5618>
   16cbc:	add	r3, r0, r7
   16cc0:	ldrb	r2, [r3, #8]
   16cc4:	orr	r2, r2, #1
   16cc8:	strb	r2, [r3, #8]
   16ccc:	ldr	r1, [sl]
   16cd0:	add	r6, r6, #1
   16cd4:	add	r7, r7, #12
   16cd8:	cmp	r1, r6
   16cdc:	bls	16d9c <bfd_arch_bits_per_address@plt+0x56d4>
   16ce0:	cmp	r6, #0
   16ce4:	beq	16cbc <bfd_arch_bits_per_address@plt+0x55f4>
   16ce8:	add	r3, r0, r7
   16cec:	ldr	r0, [r3, #4]
   16cf0:	ldr	r1, [r3, #-8]
   16cf4:	bl	11398 <filename_cmp@plt>
   16cf8:	cmp	r0, #0
   16cfc:	ldr	r0, [r8]
   16d00:	bne	16cbc <bfd_arch_bits_per_address@plt+0x55f4>
   16d04:	b	16ccc <bfd_arch_bits_per_address@plt+0x5604>
   16d08:	add	r6, r5, r5, lsl #1
   16d0c:	ldr	r3, [r8]
   16d10:	add	r0, sp, #20
   16d14:	lsl	r7, r6, #2
   16d18:	add	sl, r3, r7
   16d1c:	bl	11560 <strlen@plt>
   16d20:	add	r0, r0, #1
   16d24:	bl	11458 <xmalloc@plt>
   16d28:	ldr	r2, [r8]
   16d2c:	add	r1, sp, #20
   16d30:	add	r7, r2, r7
   16d34:	str	r0, [sl, #4]
   16d38:	ldr	r0, [r7, #4]
   16d3c:	bl	11488 <strcpy@plt>
   16d40:	mov	r0, r4
   16d44:	movw	r1, #11264	; 0x2c00
   16d48:	add	r2, sp, #20
   16d4c:	movt	r1, #2
   16d50:	bl	115cc <fscanf@plt>
   16d54:	cmp	r0, #0
   16d58:	beq	16bc4 <bfd_arch_bits_per_address@plt+0x54fc>
   16d5c:	mov	r1, #32
   16d60:	add	r0, sp, #20
   16d64:	bl	11620 <strrchr@plt>
   16d68:	ldr	sl, [fp]
   16d6c:	add	r5, r5, #1
   16d70:	add	r7, r0, #1
   16d74:	mov	r0, r7
   16d78:	bl	11560 <strlen@plt>
   16d7c:	add	r0, r0, #1
   16d80:	bl	11458 <xmalloc@plt>
   16d84:	ldr	r2, [fp]
   16d88:	mov	r1, r7
   16d8c:	str	r0, [sl, r6, lsl #2]
   16d90:	ldr	r0, [r2, r6, lsl #2]
   16d94:	bl	11488 <strcpy@plt>
   16d98:	b	16c24 <bfd_arch_bits_per_address@plt+0x555c>
   16d9c:	mov	r2, #12
   16da0:	movw	r3, #27412	; 0x6b14
   16da4:	movt	r3, #1
   16da8:	bl	11674 <qsort@plt>
   16dac:	mov	r0, r4
   16db0:	bl	11608 <fclose@plt>
   16db4:	ldr	r2, [sp, #1044]	; 0x414
   16db8:	ldr	r3, [r9]
   16dbc:	cmp	r2, r3
   16dc0:	bne	16dd0 <bfd_arch_bits_per_address@plt+0x5708>
   16dc4:	add	sp, sp, #1040	; 0x410
   16dc8:	add	sp, sp, #12
   16dcc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16dd0:	bl	113ec <__stack_chk_fail@plt>
   16dd4:	movw	r3, #30432	; 0x76e0
   16dd8:	movt	r3, #3
   16ddc:	mov	r2, #5
   16de0:	movw	r1, #11216	; 0x2bd0
   16de4:	movt	r1, #2
   16de8:	ldr	r4, [r3]
   16dec:	bl	113e0 <dcgettext@plt>
   16df0:	ldr	ip, [sp, #12]
   16df4:	movw	r3, #31748	; 0x7c04
   16df8:	movt	r3, #3
   16dfc:	mov	r1, #1
   16e00:	ldr	r3, [r3]
   16e04:	str	ip, [sp]
   16e08:	mov	r2, r0
   16e0c:	mov	r0, r4
   16e10:	bl	115fc <__fprintf_chk@plt>
   16e14:	mov	r0, #1
   16e18:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   16e1c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16e20:	movw	lr, #31720	; 0x7be8
   16e24:	movt	lr, #3
   16e28:	movw	ip, #31736	; 0x7bf8
   16e2c:	movt	ip, #3
   16e30:	movw	r6, #30504	; 0x7728
   16e34:	ldr	sl, [lr]
   16e38:	movt	r6, #3
   16e3c:	ldr	ip, [ip]
   16e40:	movw	r8, #29904	; 0x74d0
   16e44:	movt	r8, #3
   16e48:	sub	sp, sp, #44	; 0x2c
   16e4c:	ldr	lr, [sl, #4]
   16e50:	mov	r5, r1
   16e54:	mov	r9, r2
   16e58:	ldr	r1, [r6]
   16e5c:	mov	r2, ip
   16e60:	ldrd	r6, [ip, #32]
   16e64:	ldr	ip, [r8]
   16e68:	mov	r4, r0
   16e6c:	add	fp, sp, #32
   16e70:	subs	r6, r4, r6
   16e74:	sbc	r7, r5, r7
   16e78:	mov	r0, sl
   16e7c:	strd	r6, [sp]
   16e80:	mov	sl, #0
   16e84:	add	r6, sp, #28
   16e88:	str	sl, [sp, #20]
   16e8c:	add	r7, sp, #24
   16e90:	str	r6, [sp, #12]
   16e94:	str	sl, [sp, #24]
   16e98:	str	sl, [sp, #28]
   16e9c:	str	sl, [sp, #32]
   16ea0:	mov	sl, r3
   16ea4:	str	r7, [sp, #8]
   16ea8:	str	fp, [sp, #16]
   16eac:	ldr	r3, [lr, #296]	; 0x128
   16eb0:	str	ip, [sp, #36]	; 0x24
   16eb4:	ldr	r6, [sp, #80]	; 0x50
   16eb8:	blx	r3
   16ebc:	cmp	r0, #0
   16ec0:	beq	16f4c <bfd_arch_bits_per_address@plt+0x5884>
   16ec4:	ldr	r3, [sp, #24]
   16ec8:	cmp	r3, #0
   16ecc:	beq	16f4c <bfd_arch_bits_per_address@plt+0x5884>
   16ed0:	ldr	r1, [sp, #28]
   16ed4:	cmp	r1, #0
   16ed8:	beq	16f4c <bfd_arch_bits_per_address@plt+0x5884>
   16edc:	ldr	r2, [sp, #32]
   16ee0:	cmp	r2, #0
   16ee4:	beq	16f4c <bfd_arch_bits_per_address@plt+0x5884>
   16ee8:	movw	r0, #30536	; 0x7748
   16eec:	movt	r0, #3
   16ef0:	ldr	r0, [r0]
   16ef4:	tst	r0, #128	; 0x80
   16ef8:	beq	16f24 <bfd_arch_bits_per_address@plt+0x585c>
   16efc:	str	r2, [sp]
   16f00:	mov	r0, #1
   16f04:	mov	r2, r4
   16f08:	str	r1, [sp, #4]
   16f0c:	movw	r1, #11272	; 0x2c08
   16f10:	movt	r1, #2
   16f14:	bl	115e4 <__printf_chk@plt>
   16f18:	ldr	r3, [sp, #24]
   16f1c:	ldr	r1, [sp, #28]
   16f20:	ldr	r2, [sp, #32]
   16f24:	mov	r0, #1
   16f28:	str	r3, [r9]
   16f2c:	str	r1, [sl]
   16f30:	str	r2, [r6]
   16f34:	ldr	r2, [sp, #36]	; 0x24
   16f38:	ldr	r3, [r8]
   16f3c:	cmp	r2, r3
   16f40:	bne	16fa8 <bfd_arch_bits_per_address@plt+0x58e0>
   16f44:	add	sp, sp, #44	; 0x2c
   16f48:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f4c:	movw	r3, #30536	; 0x7748
   16f50:	movt	r3, #3
   16f54:	ldr	r0, [r3]
   16f58:	ands	r0, r0, #128	; 0x80
   16f5c:	beq	16f34 <bfd_arch_bits_per_address@plt+0x586c>
   16f60:	ldr	r0, [sp, #28]
   16f64:	movw	r1, #8644	; 0x21c4
   16f68:	ldr	r3, [sp, #24]
   16f6c:	movt	r1, #2
   16f70:	cmp	r0, #0
   16f74:	ldr	ip, [sp, #32]
   16f78:	mov	r2, r4
   16f7c:	moveq	r0, r1
   16f80:	cmp	r3, #0
   16f84:	str	r0, [sp, #4]
   16f88:	mov	r0, #1
   16f8c:	moveq	r3, r1
   16f90:	str	ip, [sp]
   16f94:	movw	r1, #11308	; 0x2c2c
   16f98:	movt	r1, #2
   16f9c:	bl	115e4 <__printf_chk@plt>
   16fa0:	mov	r0, #0
   16fa4:	b	16f34 <bfd_arch_bits_per_address@plt+0x586c>
   16fa8:	bl	113ec <__stack_chk_fail@plt>
   16fac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16fb0:	movw	r4, #29904	; 0x74d0
   16fb4:	movt	r4, #3
   16fb8:	mov	r5, r0
   16fbc:	ldr	r0, [r0, #20]
   16fc0:	sub	sp, sp, #36	; 0x24
   16fc4:	ldr	r3, [r4]
   16fc8:	cmp	r0, #0
   16fcc:	str	r3, [sp, #28]
   16fd0:	beq	17028 <bfd_arch_bits_per_address@plt+0x5960>
   16fd4:	ldr	r3, [r5, #16]
   16fd8:	ands	r7, r3, #4
   16fdc:	bne	170c8 <bfd_arch_bits_per_address@plt+0x5a00>
   16fe0:	movw	r6, #30524	; 0x773c
   16fe4:	movt	r6, #3
   16fe8:	ldr	r2, [r6]
   16fec:	cmp	r2, #0
   16ff0:	beq	17040 <bfd_arch_bits_per_address@plt+0x5978>
   16ff4:	tst	r3, #1
   16ff8:	beq	17040 <bfd_arch_bits_per_address@plt+0x5978>
   16ffc:	movw	r3, #30536	; 0x7748
   17000:	movt	r3, #3
   17004:	ldr	r0, [r3]
   17008:	ands	r0, r0, #128	; 0x80
   1700c:	beq	17028 <bfd_arch_bits_per_address@plt+0x5960>
   17010:	ldr	r2, [r5, #4]
   17014:	movw	r1, #11356	; 0x2c5c
   17018:	mov	r0, #1
   1701c:	movt	r1, #2
   17020:	bl	115e4 <__printf_chk@plt>
   17024:	mov	r0, r7
   17028:	ldr	r2, [sp, #28]
   1702c:	ldr	r3, [r4]
   17030:	cmp	r2, r3
   17034:	bne	171cc <bfd_arch_bits_per_address@plt+0x5b04>
   17038:	add	sp, sp, #36	; 0x24
   1703c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17040:	movw	r7, #31720	; 0x7be8
   17044:	movt	r7, #3
   17048:	mov	r1, r5
   1704c:	mov	r2, sp
   17050:	ldr	r0, [r7]
   17054:	ldr	r3, [r0, #4]
   17058:	ldr	r3, [r3, #276]	; 0x114
   1705c:	blx	r3
   17060:	ldrb	r3, [sp, #8]
   17064:	cmp	r3, #84	; 0x54
   17068:	beq	170d0 <bfd_arch_bits_per_address@plt+0x5a08>
   1706c:	cmp	r3, #87	; 0x57
   17070:	moveq	r0, #84	; 0x54
   17074:	beq	17028 <bfd_arch_bits_per_address@plt+0x5960>
   17078:	cmp	r3, #116	; 0x74
   1707c:	beq	170d8 <bfd_arch_bits_per_address@plt+0x5a10>
   17080:	movw	r2, #30536	; 0x7748
   17084:	movt	r2, #3
   17088:	ldr	r0, [r2]
   1708c:	ands	r0, r0, #128	; 0x80
   17090:	beq	17028 <bfd_arch_bits_per_address@plt+0x5960>
   17094:	ldr	r2, [r5, #4]
   17098:	movw	r1, #11396	; 0x2c84
   1709c:	mov	r0, #1
   170a0:	movt	r1, #2
   170a4:	bl	115e4 <__printf_chk@plt>
   170a8:	mov	r0, #0
   170ac:	b	17028 <bfd_arch_bits_per_address@plt+0x5960>
   170b0:	ldrb	r3, [sl, #1]
   170b4:	add	sl, sl, #1
   170b8:	cmp	r3, #0
   170bc:	beq	171d0 <bfd_arch_bits_per_address@plt+0x5b08>
   170c0:	cmp	r3, #36	; 0x24
   170c4:	bne	17118 <bfd_arch_bits_per_address@plt+0x5a50>
   170c8:	mov	r0, #0
   170cc:	b	17028 <bfd_arch_bits_per_address@plt+0x5960>
   170d0:	mov	r0, r3
   170d4:	b	17028 <bfd_arch_bits_per_address@plt+0x5960>
   170d8:	ldr	r0, [r6]
   170dc:	cmp	r0, #0
   170e0:	bne	170c8 <bfd_arch_bits_per_address@plt+0x5a00>
   170e4:	ldr	r6, [r5, #4]
   170e8:	cmp	r6, #0
   170ec:	beq	171c4 <bfd_arch_bits_per_address@plt+0x5afc>
   170f0:	ldrb	r8, [r6]
   170f4:	cmp	r8, #0
   170f8:	moveq	r0, r8
   170fc:	beq	17028 <bfd_arch_bits_per_address@plt+0x5960>
   17100:	cmp	r8, #36	; 0x24
   17104:	beq	17028 <bfd_arch_bits_per_address@plt+0x5960>
   17108:	movw	r9, #29920	; 0x74e0
   1710c:	movt	r9, #3
   17110:	mov	r3, r8
   17114:	mov	sl, r6
   17118:	cmp	r3, #46	; 0x2e
   1711c:	bne	170b0 <bfd_arch_bits_per_address@plt+0x59e8>
   17120:	mov	r0, sl
   17124:	bl	11560 <strlen@plt>
   17128:	cmp	r0, #7
   1712c:	mov	fp, r0
   17130:	bls	17178 <bfd_arch_bits_per_address@plt+0x5ab0>
   17134:	mov	r0, sl
   17138:	movw	r1, #11432	; 0x2ca8
   1713c:	mov	r2, #7
   17140:	movt	r1, #2
   17144:	bl	116b0 <strncmp@plt>
   17148:	cmp	r0, #0
   1714c:	addeq	sl, sl, #6
   17150:	beq	17178 <bfd_arch_bits_per_address@plt+0x5ab0>
   17154:	cmp	fp, #11
   17158:	bls	17178 <bfd_arch_bits_per_address@plt+0x5ab0>
   1715c:	mov	r0, sl
   17160:	movw	r1, #11440	; 0x2cb0
   17164:	mov	r2, #11
   17168:	movt	r1, #2
   1716c:	bl	116b0 <strncmp@plt>
   17170:	cmp	r0, #0
   17174:	addeq	sl, sl, #10
   17178:	ldrb	r3, [sl, #1]
   1717c:	add	r2, sl, #1
   17180:	cmp	r3, #0
   17184:	bne	171a0 <bfd_arch_bits_per_address@plt+0x5ad8>
   17188:	b	171bc <bfd_arch_bits_per_address@plt+0x5af4>
   1718c:	ldrb	r3, [r2, #1]!
   17190:	cmp	r3, #0
   17194:	beq	171bc <bfd_arch_bits_per_address@plt+0x5af4>
   17198:	cmp	r3, #46	; 0x2e
   1719c:	beq	171bc <bfd_arch_bits_per_address@plt+0x5af4>
   171a0:	lsl	r3, r3, #1
   171a4:	ldrh	r0, [r9, r3]
   171a8:	and	r0, r0, #4
   171ac:	uxth	r0, r0
   171b0:	cmp	r0, #0
   171b4:	bne	1718c <bfd_arch_bits_per_address@plt+0x5ac4>
   171b8:	b	17028 <bfd_arch_bits_per_address@plt+0x5960>
   171bc:	mov	sl, r2
   171c0:	b	17118 <bfd_arch_bits_per_address@plt+0x5a50>
   171c4:	mov	r0, r6
   171c8:	b	17028 <bfd_arch_bits_per_address@plt+0x5960>
   171cc:	bl	113ec <__stack_chk_fail@plt>
   171d0:	ldr	r2, [r7]
   171d4:	ldr	r2, [r2, #4]
   171d8:	ldrb	r2, [r2, #24]
   171dc:	cmp	r2, #0
   171e0:	beq	171ec <bfd_arch_bits_per_address@plt+0x5b24>
   171e4:	cmp	r8, r2
   171e8:	bne	170d0 <bfd_arch_bits_per_address@plt+0x5a08>
   171ec:	movw	r1, #11452	; 0x2cbc
   171f0:	mov	r0, r6
   171f4:	movt	r1, #2
   171f8:	mov	r2, #14
   171fc:	bl	116b0 <strncmp@plt>
   17200:	cmp	r0, #0
   17204:	beq	17028 <bfd_arch_bits_per_address@plt+0x5960>
   17208:	mov	r0, r6
   1720c:	movw	r1, #11468	; 0x2ccc
   17210:	mov	r2, #15
   17214:	movt	r1, #2
   17218:	bl	116b0 <strncmp@plt>
   1721c:	cmp	r0, #0
   17220:	beq	17028 <bfd_arch_bits_per_address@plt+0x5960>
   17224:	movw	r3, #30540	; 0x774c
   17228:	movt	r3, #3
   1722c:	ldr	r3, [r3]
   17230:	cmp	r3, #0
   17234:	moveq	r0, #116	; 0x74
   17238:	beq	17028 <bfd_arch_bits_per_address@plt+0x5960>
   1723c:	ldr	r0, [r5, #16]
   17240:	ands	r0, r0, #8
   17244:	movne	r0, #116	; 0x74
   17248:	b	17028 <bfd_arch_bits_per_address@plt+0x5960>
   1724c:	push	{r4, r5, r6, r7, r8, lr}
   17250:	movw	r7, #29904	; 0x74d0
   17254:	movt	r7, #3
   17258:	sub	sp, sp, #16
   1725c:	mov	r1, #0
   17260:	mov	r8, r0
   17264:	ldr	r3, [r7]
   17268:	movw	r6, #31720	; 0x7be8
   1726c:	movt	r6, #3
   17270:	str	r3, [sp, #12]
   17274:	bl	113bc <bfd_openr@plt>
   17278:	cmp	r0, #0
   1727c:	str	r0, [r6]
   17280:	beq	174b8 <bfd_arch_bits_per_address@plt+0x5df0>
   17284:	mov	r1, #1
   17288:	bl	1168c <bfd_check_format@plt>
   1728c:	cmp	r0, #0
   17290:	beq	174cc <bfd_arch_bits_per_address@plt+0x5e04>
   17294:	movw	r1, #11520	; 0x2d00
   17298:	ldr	r0, [r6]
   1729c:	movt	r1, #2
   172a0:	movw	r4, #31736	; 0x7bf8
   172a4:	bl	114ac <bfd_get_section_by_name@plt>
   172a8:	movt	r4, #3
   172ac:	cmp	r0, #0
   172b0:	str	r0, [r4]
   172b4:	beq	17410 <bfd_arch_bits_per_address@plt+0x5d48>
   172b8:	ldr	r0, [r6]
   172bc:	movw	r5, #31720	; 0x7be8
   172c0:	movt	r5, #3
   172c4:	ldr	r3, [r0, #4]
   172c8:	ldr	r3, [r3, #260]	; 0x104
   172cc:	blx	r3
   172d0:	cmp	r0, #0
   172d4:	blt	17470 <bfd_arch_bits_per_address@plt+0x5da8>
   172d8:	bl	11458 <xmalloc@plt>
   172dc:	movw	r4, #30504	; 0x7728
   172e0:	movt	r4, #3
   172e4:	mov	r3, r0
   172e8:	ldr	r0, [r5]
   172ec:	mov	r1, r3
   172f0:	str	r3, [r4]
   172f4:	ldr	r2, [r0, #4]
   172f8:	ldr	r3, [r2, #264]	; 0x108
   172fc:	blx	r3
   17300:	cmp	r0, #0
   17304:	mov	r1, r0
   17308:	str	r0, [r4, #4]
   1730c:	blt	17470 <bfd_arch_bits_per_address@plt+0x5da8>
   17310:	ldr	r0, [r5]
   17314:	mov	r8, #0
   17318:	ldr	r2, [r4]
   1731c:	add	lr, sp, #8
   17320:	mov	r3, r8
   17324:	ldr	ip, [r0, #4]
   17328:	stm	sp, {r8, lr}
   1732c:	ldr	ip, [ip, #420]	; 0x1a4
   17330:	blx	ip
   17334:	subs	r5, r0, #0
   17338:	ble	1738c <bfd_arch_bits_per_address@plt+0x5cc4>
   1733c:	ldm	r4, {r0, r1}
   17340:	add	r1, r5, r1
   17344:	add	r1, r1, #1
   17348:	lsl	r1, r1, #2
   1734c:	bl	11410 <xrealloc@plt>
   17350:	ldr	r2, [r4, #4]
   17354:	mov	r3, r8
   17358:	add	r1, r5, r2
   1735c:	str	r1, [r4, #4]
   17360:	str	r0, [r4]
   17364:	add	r0, r0, r2, lsl #2
   17368:	sub	r2, r0, #4
   1736c:	ldr	r1, [sp, #8]
   17370:	add	r1, r1, r3, lsl #5
   17374:	add	r3, r3, #1
   17378:	cmp	r3, r5
   1737c:	str	r1, [r2, #4]!
   17380:	bne	1736c <bfd_arch_bits_per_address@plt+0x5ca4>
   17384:	mov	r2, #0
   17388:	str	r2, [r0, r3, lsl #2]
   1738c:	movw	r5, #31740	; 0x7bfc
   17390:	movt	r5, #3
   17394:	ldr	r0, [r6]
   17398:	mov	r3, #1
   1739c:	mov	r2, #0
   173a0:	str	r3, [r4, #8]
   173a4:	str	r2, [r5]
   173a8:	bl	11578 <bfd_get_arch@plt>
   173ac:	movw	r3, #30504	; 0x7728
   173b0:	movt	r3, #3
   173b4:	cmp	r0, #14
   173b8:	beq	17404 <bfd_arch_bits_per_address@plt+0x5d3c>
   173bc:	cmp	r0, #38	; 0x26
   173c0:	moveq	r2, #4
   173c4:	streq	r2, [r3, #8]
   173c8:	beq	173d4 <bfd_arch_bits_per_address@plt+0x5d0c>
   173cc:	cmp	r0, #3
   173d0:	beq	17404 <bfd_arch_bits_per_address@plt+0x5d3c>
   173d4:	movw	r3, #31744	; 0x7c00
   173d8:	movt	r3, #3
   173dc:	ldr	r0, [r3]
   173e0:	cmp	r0, #0
   173e4:	beq	173ec <bfd_arch_bits_per_address@plt+0x5d24>
   173e8:	bl	16b28 <bfd_arch_bits_per_address@plt+0x5460>
   173ec:	ldr	r2, [sp, #12]
   173f0:	ldr	r3, [r7]
   173f4:	cmp	r2, r3
   173f8:	bne	174c8 <bfd_arch_bits_per_address@plt+0x5e00>
   173fc:	add	sp, sp, #16
   17400:	pop	{r4, r5, r6, r7, r8, pc}
   17404:	mov	r3, #2
   17408:	str	r3, [r5]
   1740c:	b	173d4 <bfd_arch_bits_per_address@plt+0x5d0c>
   17410:	movw	r1, #11528	; 0x2d08
   17414:	ldr	r0, [r6]
   17418:	movt	r1, #2
   1741c:	bl	114ac <bfd_get_section_by_name@plt>
   17420:	cmp	r0, #0
   17424:	str	r0, [r4]
   17428:	bne	172b8 <bfd_arch_bits_per_address@plt+0x5bf0>
   1742c:	movw	r3, #30432	; 0x76e0
   17430:	movt	r3, #3
   17434:	mov	r2, #5
   17438:	movw	r1, #11536	; 0x2d10
   1743c:	movt	r1, #2
   17440:	ldr	r4, [r3]
   17444:	bl	113e0 <dcgettext@plt>
   17448:	movw	r3, #31748	; 0x7c04
   1744c:	movt	r3, #3
   17450:	str	r8, [sp]
   17454:	mov	r1, #1
   17458:	ldr	r3, [r3]
   1745c:	mov	r2, r0
   17460:	mov	r0, r4
   17464:	bl	115fc <__fprintf_chk@plt>
   17468:	mov	r0, #1
   1746c:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   17470:	movw	r2, #30432	; 0x76e0
   17474:	movw	r3, #31748	; 0x7c04
   17478:	movt	r2, #3
   1747c:	movt	r3, #3
   17480:	ldr	r4, [r2]
   17484:	ldr	r5, [r3]
   17488:	bl	11434 <bfd_get_error@plt>
   1748c:	bl	11668 <bfd_errmsg@plt>
   17490:	str	r8, [sp]
   17494:	movw	r2, #11572	; 0x2d34
   17498:	mov	r1, #1
   1749c:	mov	r3, r5
   174a0:	movt	r2, #2
   174a4:	str	r0, [sp, #4]
   174a8:	mov	r0, r4
   174ac:	bl	115fc <__fprintf_chk@plt>
   174b0:	mov	r0, #1
   174b4:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   174b8:	mov	r0, r8
   174bc:	bl	11428 <perror@plt>
   174c0:	mov	r0, #1
   174c4:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   174c8:	bl	113ec <__stack_chk_fail@plt>
   174cc:	movw	r3, #30432	; 0x76e0
   174d0:	movt	r3, #3
   174d4:	mov	r2, #5
   174d8:	movw	r1, #11484	; 0x2cdc
   174dc:	movt	r1, #2
   174e0:	ldr	r4, [r3]
   174e4:	bl	113e0 <dcgettext@plt>
   174e8:	movw	r3, #31748	; 0x7c04
   174ec:	movt	r3, #3
   174f0:	mov	r1, #1
   174f4:	ldr	r3, [r3]
   174f8:	str	r8, [sp]
   174fc:	mov	r2, r0
   17500:	mov	r0, r4
   17504:	bl	115fc <__fprintf_chk@plt>
   17508:	mov	r0, #1
   1750c:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   17510:	push	{r4, r5, r6, r7, r8, r9, lr}
   17514:	movw	r4, #31736	; 0x7bf8
   17518:	movt	r4, #3
   1751c:	sub	sp, sp, #20
   17520:	mov	r9, r0
   17524:	movw	r6, #31724	; 0x7bec
   17528:	ldr	r5, [r4]
   1752c:	movt	r6, #3
   17530:	ldr	r7, [r5, #48]	; 0x30
   17534:	ldr	r8, [r5, #52]	; 0x34
   17538:	mov	r0, r7
   1753c:	bl	114f4 <malloc@plt>
   17540:	cmp	r0, #0
   17544:	mov	r2, r0
   17548:	str	r0, [r6]
   1754c:	beq	175e8 <bfd_arch_bits_per_address@plt+0x5f20>
   17550:	mov	r1, r5
   17554:	mov	r4, #0
   17558:	str	r7, [sp, #8]
   1755c:	mov	r0, r9
   17560:	str	r8, [sp, #12]
   17564:	mov	r5, #0
   17568:	strd	r4, [sp]
   1756c:	bl	113d4 <bfd_get_section_contents@plt>
   17570:	subs	r4, r0, #0
   17574:	beq	1758c <bfd_arch_bits_per_address@plt+0x5ec4>
   17578:	ldr	r3, [r6]
   1757c:	cmp	r3, #0
   17580:	beq	175a4 <bfd_arch_bits_per_address@plt+0x5edc>
   17584:	add	sp, sp, #20
   17588:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1758c:	movw	r0, #11632	; 0x2d70
   17590:	movt	r0, #2
   17594:	bl	1162c <bfd_perror@plt>
   17598:	ldr	r0, [r6]
   1759c:	bl	11374 <free@plt>
   175a0:	str	r4, [r6]
   175a4:	movw	r3, #30432	; 0x76e0
   175a8:	movt	r3, #3
   175ac:	mov	r2, #5
   175b0:	movw	r1, #11660	; 0x2d8c
   175b4:	mov	r0, #0
   175b8:	movt	r1, #2
   175bc:	ldr	r4, [r3]
   175c0:	bl	113e0 <dcgettext@plt>
   175c4:	movw	r3, #31748	; 0x7c04
   175c8:	movt	r3, #3
   175cc:	mov	r1, #1
   175d0:	ldr	r3, [r3]
   175d4:	mov	r2, r0
   175d8:	mov	r0, r4
   175dc:	add	sp, sp, #20
   175e0:	pop	{r4, r5, r6, r7, r8, r9, lr}
   175e4:	b	115fc <__fprintf_chk@plt>
   175e8:	movw	r3, #30432	; 0x76e0
   175ec:	movt	r3, #3
   175f0:	mov	r2, #5
   175f4:	movw	r1, #11584	; 0x2d40
   175f8:	movt	r1, #2
   175fc:	ldr	r5, [r3]
   17600:	bl	113e0 <dcgettext@plt>
   17604:	ldr	ip, [r4]
   17608:	movw	r3, #31748	; 0x7c04
   1760c:	movt	r3, #3
   17610:	mov	r1, #1
   17614:	ldr	ip, [ip, #48]	; 0x30
   17618:	ldr	r3, [r3]
   1761c:	str	ip, [sp]
   17620:	mov	r2, r0
   17624:	mov	r0, r5
   17628:	bl	115fc <__fprintf_chk@plt>
   1762c:	mov	r0, #1
   17630:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   17634:	push	{r4, r5, r6, lr}
   17638:	movw	r1, #31724	; 0x7bec
   1763c:	sub	sp, sp, #16
   17640:	movt	r1, #3
   17644:	mov	r6, r0
   17648:	strd	r2, [sp, #8]
   1764c:	ldr	r3, [r1]
   17650:	cmp	r3, #0
   17654:	beq	176f8 <bfd_arch_bits_per_address@plt+0x6030>
   17658:	movw	r4, #31720	; 0x7be8
   1765c:	movt	r4, #3
   17660:	add	r0, sp, #8
   17664:	add	r1, sp, #32
   17668:	bl	1a74c <bfd_arch_bits_per_address@plt+0x9084>
   1766c:	ldr	r0, [r4]
   17670:	bl	11578 <bfd_get_arch@plt>
   17674:	cmp	r0, #9
   17678:	beq	177a8 <bfd_arch_bits_per_address@plt+0x60e0>
   1767c:	bls	17700 <bfd_arch_bits_per_address@plt+0x6038>
   17680:	cmp	r0, #38	; 0x26
   17684:	beq	17760 <bfd_arch_bits_per_address@plt+0x6098>
   17688:	cmp	r0, #89	; 0x59
   1768c:	beq	17730 <bfd_arch_bits_per_address@plt+0x6068>
   17690:	cmp	r0, #14
   17694:	beq	17778 <bfd_arch_bits_per_address@plt+0x60b0>
   17698:	movw	r3, #30432	; 0x76e0
   1769c:	movt	r3, #3
   176a0:	mov	r2, #5
   176a4:	movw	r1, #11680	; 0x2da0
   176a8:	mov	r0, #0
   176ac:	movt	r1, #2
   176b0:	ldr	r5, [r3]
   176b4:	bl	113e0 <dcgettext@plt>
   176b8:	movw	r3, #31748	; 0x7c04
   176bc:	movt	r3, #3
   176c0:	mov	r6, r0
   176c4:	ldr	r0, [r4]
   176c8:	ldr	r4, [r3]
   176cc:	bl	114c4 <bfd_printable_name@plt>
   176d0:	mov	r2, r6
   176d4:	mov	r1, #1
   176d8:	mov	r3, r4
   176dc:	str	r0, [sp]
   176e0:	mov	r0, r5
   176e4:	bl	115fc <__fprintf_chk@plt>
   176e8:	movw	r3, #30532	; 0x7744
   176ec:	movt	r3, #3
   176f0:	mov	r2, #0
   176f4:	str	r2, [r3]
   176f8:	add	sp, sp, #16
   176fc:	pop	{r4, r5, r6, pc}
   17700:	cmp	r0, #6
   17704:	beq	17790 <bfd_arch_bits_per_address@plt+0x60c8>
   17708:	cmp	r0, #8
   1770c:	beq	17748 <bfd_arch_bits_per_address@plt+0x6080>
   17710:	cmp	r0, #3
   17714:	bne	17698 <bfd_arch_bits_per_address@plt+0x5fd0>
   17718:	ldrd	r4, [sp, #32]
   1771c:	mov	r0, r6
   17720:	ldrd	r2, [sp, #8]
   17724:	strd	r4, [sp]
   17728:	bl	1cd20 <bfd_arch_bits_per_address@plt+0xb658>
   1772c:	b	176f8 <bfd_arch_bits_per_address@plt+0x6030>
   17730:	ldrd	r4, [sp, #32]
   17734:	mov	r0, r6
   17738:	ldrd	r2, [sp, #8]
   1773c:	strd	r4, [sp]
   17740:	bl	1dc40 <bfd_arch_bits_per_address@plt+0xc578>
   17744:	b	176f8 <bfd_arch_bits_per_address@plt+0x6030>
   17748:	ldrd	r4, [sp, #32]
   1774c:	mov	r0, r6
   17750:	ldrd	r2, [sp, #8]
   17754:	strd	r4, [sp]
   17758:	bl	1d954 <bfd_arch_bits_per_address@plt+0xc28c>
   1775c:	b	176f8 <bfd_arch_bits_per_address@plt+0x6030>
   17760:	ldrd	r4, [sp, #32]
   17764:	mov	r0, r6
   17768:	ldrd	r2, [sp, #8]
   1776c:	strd	r4, [sp]
   17770:	bl	1c6cc <bfd_arch_bits_per_address@plt+0xb004>
   17774:	b	176f8 <bfd_arch_bits_per_address@plt+0x6030>
   17778:	ldrd	r4, [sp, #32]
   1777c:	mov	r0, r6
   17780:	ldrd	r2, [sp, #8]
   17784:	strd	r4, [sp]
   17788:	bl	1d3d8 <bfd_arch_bits_per_address@plt+0xbd10>
   1778c:	b	176f8 <bfd_arch_bits_per_address@plt+0x6030>
   17790:	ldrd	r4, [sp, #32]
   17794:	mov	r0, r6
   17798:	ldrd	r2, [sp, #8]
   1779c:	strd	r4, [sp]
   177a0:	bl	1d778 <bfd_arch_bits_per_address@plt+0xc0b0>
   177a4:	b	176f8 <bfd_arch_bits_per_address@plt+0x6030>
   177a8:	ldrd	r4, [sp, #32]
   177ac:	mov	r0, r6
   177b0:	ldrd	r2, [sp, #8]
   177b4:	strd	r4, [sp]
   177b8:	bl	1c538 <bfd_arch_bits_per_address@plt+0xae70>
   177bc:	b	176f8 <bfd_arch_bits_per_address@plt+0x6030>
   177c0:	movw	ip, #29904	; 0x74d0
   177c4:	movt	ip, #3
   177c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   177cc:	sub	sp, sp, #28
   177d0:	ldr	r3, [ip]
   177d4:	str	r0, [sp, #12]
   177d8:	mov	r0, #1024	; 0x400
   177dc:	str	ip, [sp, #8]
   177e0:	str	r3, [sp, #20]
   177e4:	bl	11458 <xmalloc@plt>
   177e8:	mov	r7, r0
   177ec:	mov	r0, #1024	; 0x400
   177f0:	bl	11458 <xmalloc@plt>
   177f4:	mov	r8, r0
   177f8:	mov	r0, #1024	; 0x400
   177fc:	bl	11458 <xmalloc@plt>
   17800:	movw	r1, #11212	; 0x2bcc
   17804:	movt	r1, #2
   17808:	mov	r6, r0
   1780c:	ldr	r0, [sp, #12]
   17810:	bl	1165c <fopen64@plt>
   17814:	subs	r5, r0, #0
   17818:	beq	17a60 <bfd_arch_bits_per_address@plt+0x6398>
   1781c:	mov	r0, #1024	; 0x400
   17820:	mov	fp, #0
   17824:	bl	11458 <xmalloc@plt>
   17828:	mov	r4, r0
   1782c:	mov	r0, #1024	; 0x400
   17830:	bl	11458 <xmalloc@plt>
   17834:	mov	r9, r0
   17838:	mov	r0, #1024	; 0x400
   1783c:	bl	11458 <xmalloc@plt>
   17840:	mov	sl, r0
   17844:	mov	r0, r5
   17848:	bl	1153c <feof@plt>
   1784c:	cmp	r0, #0
   17850:	bne	178b0 <bfd_arch_bits_per_address@plt+0x61e8>
   17854:	mov	r0, r4
   17858:	movw	r1, #1023	; 0x3ff
   1785c:	mov	r2, r5
   17860:	bl	11380 <fgets@plt>
   17864:	cmp	r0, #0
   17868:	beq	178b0 <bfd_arch_bits_per_address@plt+0x61e8>
   1786c:	str	sl, [sp]
   17870:	movw	r1, #11724	; 0x2dcc
   17874:	mov	r0, r4
   17878:	movt	r1, #2
   1787c:	mov	r2, r9
   17880:	add	r3, sp, #19
   17884:	bl	11650 <sscanf@plt>
   17888:	cmp	r0, #3
   1788c:	bne	17844 <bfd_arch_bits_per_address@plt+0x617c>
   17890:	ldrb	r3, [sp, #19]
   17894:	mov	r0, r5
   17898:	and	r3, r3, #223	; 0xdf
   1789c:	cmp	r3, #84	; 0x54
   178a0:	addeq	fp, fp, #1
   178a4:	bl	1153c <feof@plt>
   178a8:	cmp	r0, #0
   178ac:	beq	17854 <bfd_arch_bits_per_address@plt+0x618c>
   178b0:	mov	r0, r4
   178b4:	movw	r4, #31768	; 0x7c18
   178b8:	bl	11374 <free@plt>
   178bc:	mov	r0, r9
   178c0:	bl	11374 <free@plt>
   178c4:	mov	r0, sl
   178c8:	bl	11374 <free@plt>
   178cc:	movt	r4, #3
   178d0:	cmp	fp, #0
   178d4:	str	fp, [r4]
   178d8:	beq	17abc <bfd_arch_bits_per_address@plt+0x63f4>
   178dc:	add	r0, fp, fp, lsl #5
   178e0:	lsl	r0, r0, #3
   178e4:	bl	11458 <xmalloc@plt>
   178e8:	mov	r1, #0
   178ec:	mov	r2, r1
   178f0:	mov	r3, r0
   178f4:	mov	r0, r5
   178f8:	str	r3, [r4, #4]
   178fc:	str	r3, [r4, #8]
   17900:	bl	11698 <fseek@plt>
   17904:	cmp	r0, #0
   17908:	bne	17aac <bfd_arch_bits_per_address@plt+0x63e4>
   1790c:	mov	r0, r5
   17910:	bl	1153c <feof@plt>
   17914:	cmp	r0, #0
   17918:	bne	179f4 <bfd_arch_bits_per_address@plt+0x632c>
   1791c:	mov	r0, r7
   17920:	movw	r1, #1023	; 0x3ff
   17924:	mov	r2, r5
   17928:	bl	11380 <fgets@plt>
   1792c:	cmp	r0, #0
   17930:	beq	179f4 <bfd_arch_bits_per_address@plt+0x632c>
   17934:	str	r6, [sp]
   17938:	movw	r1, #11724	; 0x2dcc
   1793c:	mov	r0, r7
   17940:	movt	r1, #2
   17944:	mov	r2, r8
   17948:	add	r3, sp, #19
   1794c:	bl	11650 <sscanf@plt>
   17950:	cmp	r0, #3
   17954:	bne	17968 <bfd_arch_bits_per_address@plt+0x62a0>
   17958:	ldrb	r3, [sp, #19]
   1795c:	and	r3, r3, #223	; 0xdf
   17960:	cmp	r3, #84	; 0x54
   17964:	bne	1790c <bfd_arch_bits_per_address@plt+0x6244>
   17968:	ldr	r0, [r4, #8]
   1796c:	bl	1b358 <bfd_arch_bits_per_address@plt+0x9c90>
   17970:	ldr	r2, [r4, #8]
   17974:	mov	r0, r8
   17978:	movw	r1, #11768	; 0x2df8
   1797c:	movt	r1, #2
   17980:	bl	11650 <sscanf@plt>
   17984:	mov	r0, r6
   17988:	bl	11560 <strlen@plt>
   1798c:	ldr	r9, [r4, #8]
   17990:	add	r0, r0, #1
   17994:	bl	11458 <xmalloc@plt>
   17998:	ldr	r3, [r4, #8]
   1799c:	mov	r1, r6
   179a0:	str	r0, [r9, #16]
   179a4:	ldr	r0, [r3, #16]
   179a8:	bl	11488 <strcpy@plt>
   179ac:	ldr	r3, [r4, #8]
   179b0:	add	r2, r3, #264	; 0x108
   179b4:	str	r2, [r4, #8]
   179b8:	ldrb	r2, [r3, #28]
   179bc:	and	r2, r2, #247	; 0xf7
   179c0:	orr	r2, r2, #5
   179c4:	strb	r2, [r3, #28]
   179c8:	ldrb	r2, [sp, #19]
   179cc:	ldrb	r1, [r3, #28]
   179d0:	subs	r0, r2, #116	; 0x74
   179d4:	rsbs	r2, r0, #0
   179d8:	adcs	r2, r2, r0
   179dc:	mov	r0, r5
   179e0:	bfi	r1, r2, #1, #1
   179e4:	strb	r1, [r3, #28]
   179e8:	bl	1153c <feof@plt>
   179ec:	cmp	r0, #0
   179f0:	beq	1791c <bfd_arch_bits_per_address@plt+0x6254>
   179f4:	mov	r0, r5
   179f8:	bl	11608 <fclose@plt>
   179fc:	ldr	r2, [r4, #8]
   17a00:	ldr	r3, [r4, #4]
   17a04:	movw	r0, #31768	; 0x7c18
   17a08:	movt	r0, #3
   17a0c:	rsb	r3, r3, r2
   17a10:	asr	r3, r3, #3
   17a14:	rsb	r2, r3, r3, lsl #5
   17a18:	add	r2, r3, r2, lsl #5
   17a1c:	rsb	r2, r2, r2, lsl #15
   17a20:	add	r3, r3, r2, lsl #5
   17a24:	str	r3, [r4]
   17a28:	bl	1b36c <bfd_arch_bits_per_address@plt+0x9ca4>
   17a2c:	mov	r0, r7
   17a30:	bl	11374 <free@plt>
   17a34:	mov	r0, r8
   17a38:	bl	11374 <free@plt>
   17a3c:	ldr	ip, [sp, #8]
   17a40:	ldr	r2, [sp, #20]
   17a44:	ldr	r3, [ip]
   17a48:	cmp	r2, r3
   17a4c:	bne	17aa8 <bfd_arch_bits_per_address@plt+0x63e0>
   17a50:	mov	r0, r6
   17a54:	add	sp, sp, #28
   17a58:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17a5c:	b	11374 <free@plt>
   17a60:	movw	r3, #30432	; 0x76e0
   17a64:	movw	r1, #11216	; 0x2bd0
   17a68:	movt	r3, #3
   17a6c:	movt	r1, #2
   17a70:	mov	r2, #5
   17a74:	ldr	r4, [r3]
   17a78:	bl	113e0 <dcgettext@plt>
   17a7c:	ldr	ip, [sp, #12]
   17a80:	movw	r3, #31748	; 0x7c04
   17a84:	movt	r3, #3
   17a88:	mov	r1, #1
   17a8c:	ldr	r3, [r3]
   17a90:	str	ip, [sp]
   17a94:	mov	r2, r0
   17a98:	mov	r0, r4
   17a9c:	bl	115fc <__fprintf_chk@plt>
   17aa0:	mov	r0, #1
   17aa4:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   17aa8:	bl	113ec <__stack_chk_fail@plt>
   17aac:	ldr	r0, [sp, #12]
   17ab0:	bl	11428 <perror@plt>
   17ab4:	mov	r0, #1
   17ab8:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   17abc:	movw	r3, #30432	; 0x76e0
   17ac0:	movw	r1, #11736	; 0x2dd8
   17ac4:	movt	r3, #3
   17ac8:	mov	r0, fp
   17acc:	mov	r2, #5
   17ad0:	movt	r1, #2
   17ad4:	b	17a74 <bfd_arch_bits_per_address@plt+0x63ac>
   17ad8:	movw	r3, #31720	; 0x7be8
   17adc:	movt	r3, #3
   17ae0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17ae4:	movw	sl, #29904	; 0x74d0
   17ae8:	ldr	r3, [r3]
   17aec:	movt	sl, #3
   17af0:	sub	sp, sp, #76	; 0x4c
   17af4:	ldr	r2, [sl]
   17af8:	ldr	r3, [r3, #4]
   17afc:	str	sl, [sp, #40]	; 0x28
   17b00:	str	r2, [sp, #68]	; 0x44
   17b04:	ldr	r3, [r3, #4]
   17b08:	sub	r3, r3, #2
   17b0c:	cmp	r3, #11
   17b10:	movhi	fp, #0
   17b14:	strhi	fp, [sp, #52]	; 0x34
   17b18:	bhi	17b38 <bfd_arch_bits_per_address@plt+0x6470>
   17b1c:	mov	r1, #1
   17b20:	movw	r2, #2095	; 0x82f
   17b24:	lsl	r3, r1, r3
   17b28:	and	r2, r3, r2
   17b2c:	adds	r2, r2, #0
   17b30:	movne	r2, #1
   17b34:	str	r2, [sp, #52]	; 0x34
   17b38:	movw	r5, #30504	; 0x7728
   17b3c:	movt	r5, #3
   17b40:	mov	r6, #0
   17b44:	movw	r7, #31768	; 0x7c18
   17b48:	ldr	r3, [r5, #4]
   17b4c:	movt	r7, #3
   17b50:	cmp	r3, r6
   17b54:	str	r6, [r7]
   17b58:	ble	17ec4 <bfd_arch_bits_per_address@plt+0x67fc>
   17b5c:	movw	r8, #31732	; 0x7bf4
   17b60:	movw	sl, #31728	; 0x7bf0
   17b64:	movw	r9, #27424	; 0x6b20
   17b68:	movt	r8, #3
   17b6c:	movt	sl, #3
   17b70:	movt	r9, #1
   17b74:	mov	fp, r6
   17b78:	b	17bb4 <bfd_arch_bits_per_address@plt+0x64ec>
   17b7c:	cmp	r6, #0
   17b80:	beq	17b90 <bfd_arch_bits_per_address@plt+0x64c8>
   17b84:	ldrb	r3, [r6, #8]
   17b88:	tst	r3, #1
   17b8c:	beq	17b9c <bfd_arch_bits_per_address@plt+0x64d4>
   17b90:	ldr	r3, [r7]
   17b94:	add	r3, r3, #1
   17b98:	str	r3, [r7]
   17b9c:	ldr	r3, [r5, #4]
   17ba0:	add	fp, fp, #1
   17ba4:	movw	r4, #30504	; 0x7728
   17ba8:	movt	r4, #3
   17bac:	cmp	r3, fp
   17bb0:	ble	17c04 <bfd_arch_bits_per_address@plt+0x653c>
   17bb4:	ldr	r3, [r5]
   17bb8:	lsl	r4, fp, #2
   17bbc:	ldr	r0, [r3, fp, lsl #2]
   17bc0:	bl	16fac <bfd_arch_bits_per_address@plt+0x58e4>
   17bc4:	cmp	r0, #0
   17bc8:	beq	17b9c <bfd_arch_bits_per_address@plt+0x64d4>
   17bcc:	ldr	r2, [r8]
   17bd0:	cmp	r2, #0
   17bd4:	beq	17b7c <bfd_arch_bits_per_address@plt+0x64b4>
   17bd8:	movw	ip, #30504	; 0x7728
   17bdc:	movt	ip, #3
   17be0:	ldr	r1, [sl]
   17be4:	mov	r3, #12
   17be8:	ldr	r0, [ip]
   17bec:	ldr	r0, [r0, r4]
   17bf0:	ldr	r0, [r0, #4]
   17bf4:	str	r9, [sp]
   17bf8:	bl	115a8 <bsearch@plt>
   17bfc:	mov	r6, r0
   17c00:	b	17b7c <bfd_arch_bits_per_address@plt+0x64b4>
   17c04:	ldr	r3, [r7]
   17c08:	movw	r8, #31768	; 0x7c18
   17c0c:	movt	r8, #3
   17c10:	cmp	r3, #0
   17c14:	beq	17ec4 <bfd_arch_bits_per_address@plt+0x67fc>
   17c18:	add	r0, r3, r3, lsl #5
   17c1c:	lsl	r0, r0, #3
   17c20:	bl	11458 <xmalloc@plt>
   17c24:	ldr	r3, [r4, #4]
   17c28:	cmp	r3, #0
   17c2c:	str	r0, [r8, #4]
   17c30:	str	r0, [r8, #8]
   17c34:	ble	17f18 <bfd_arch_bits_per_address@plt+0x6850>
   17c38:	movw	fp, #31732	; 0x7bf4
   17c3c:	movw	sl, #30536	; 0x7748
   17c40:	movt	fp, #3
   17c44:	movt	sl, #3
   17c48:	movw	ip, #31728	; 0x7bf0
   17c4c:	mov	r4, #0
   17c50:	movt	ip, #3
   17c54:	str	fp, [sp, #24]
   17c58:	str	ip, [sp, #44]	; 0x2c
   17c5c:	movw	ip, #27424	; 0x6b20
   17c60:	str	sl, [sp, #12]
   17c64:	movt	ip, #1
   17c68:	str	ip, [sp, #48]	; 0x30
   17c6c:	b	17c90 <bfd_arch_bits_per_address@plt+0x65c8>
   17c70:	ldr	sl, [sp, #12]
   17c74:	ldr	r3, [sl]
   17c78:	tst	r3, #128	; 0x80
   17c7c:	bne	17e40 <bfd_arch_bits_per_address@plt+0x6778>
   17c80:	ldr	r3, [r5, #4]
   17c84:	add	r4, r4, #1
   17c88:	cmp	r3, r4
   17c8c:	ble	17dc0 <bfd_arch_bits_per_address@plt+0x66f8>
   17c90:	ldr	r3, [r5]
   17c94:	lsl	r8, r4, #2
   17c98:	ldr	r0, [r3, r4, lsl #2]
   17c9c:	bl	16fac <bfd_arch_bits_per_address@plt+0x58e4>
   17ca0:	subs	r9, r0, #0
   17ca4:	beq	17c70 <bfd_arch_bits_per_address@plt+0x65a8>
   17ca8:	ldr	ip, [sp, #24]
   17cac:	ldr	r2, [ip]
   17cb0:	cmp	r2, #0
   17cb4:	bne	17e0c <bfd_arch_bits_per_address@plt+0x6744>
   17cb8:	cmp	r6, #0
   17cbc:	beq	17ccc <bfd_arch_bits_per_address@plt+0x6604>
   17cc0:	ldrb	r3, [r6, #8]
   17cc4:	tst	r3, #1
   17cc8:	beq	17c80 <bfd_arch_bits_per_address@plt+0x65b8>
   17ccc:	ldr	r0, [r7, #8]
   17cd0:	bl	1b358 <bfd_arch_bits_per_address@plt+0x9c90>
   17cd4:	ldr	r3, [r5]
   17cd8:	ldr	r1, [r7, #8]
   17cdc:	ldr	r0, [r3, r8]
   17ce0:	ldr	ip, [r0, #20]
   17ce4:	ldrd	r2, [r0, #8]
   17ce8:	cmp	ip, #0
   17cec:	strd	r2, [sp, #32]
   17cf0:	strd	r2, [r1]
   17cf4:	beq	17d08 <bfd_arch_bits_per_address@plt+0x6640>
   17cf8:	ldrd	sl, [ip, #32]
   17cfc:	adds	sl, sl, r2
   17d00:	adc	fp, fp, r3
   17d04:	strd	sl, [r1]
   17d08:	cmp	r6, #0
   17d0c:	mov	ip, r1
   17d10:	ldrbne	r3, [r1, #28]
   17d14:	ldreq	r2, [r0, #4]
   17d18:	ldrbeq	r3, [r1, #28]
   17d1c:	orrne	r3, r3, #8
   17d20:	ldrne	r2, [r6, #4]
   17d24:	streq	r2, [r1, #16]
   17d28:	bfieq	r3, r6, #3, #1
   17d2c:	strb	r3, [r1, #28]
   17d30:	add	r3, sp, #64	; 0x40
   17d34:	strne	r2, [r1, #16]
   17d38:	add	r2, sp, #60	; 0x3c
   17d3c:	ldrd	r0, [ip], #24
   17d40:	str	ip, [sp]
   17d44:	bl	16e1c <bfd_arch_bits_per_address@plt+0x5754>
   17d48:	cmp	r0, #0
   17d4c:	bne	17ea8 <bfd_arch_bits_per_address@plt+0x67e0>
   17d50:	ldr	fp, [sp, #52]	; 0x34
   17d54:	ldr	r2, [r7, #8]
   17d58:	cmp	fp, #0
   17d5c:	ldr	ip, [sp, #12]
   17d60:	ldrne	r3, [r5]
   17d64:	moveq	r1, #1
   17d68:	ldr	r0, [r2]
   17d6c:	ldrne	r3, [r3, r8]
   17d70:	ldrne	r1, [r3, #16]
   17d74:	ldrb	r3, [r2, #28]
   17d78:	ubfxne	r1, r1, #3, #1
   17d7c:	cmp	r9, #116	; 0x74
   17d80:	bfi	r3, r1, #0, #1
   17d84:	uxtb	r3, r3
   17d88:	orr	r3, r3, #4
   17d8c:	strb	r3, [r2, #28]
   17d90:	uxtbeq	r3, r3
   17d94:	orreq	r3, r3, #2
   17d98:	strbeq	r3, [r2, #28]
   17d9c:	ldr	r3, [ip]
   17da0:	tst	r3, #128	; 0x80
   17da4:	bne	17e6c <bfd_arch_bits_per_address@plt+0x67a4>
   17da8:	ldr	r3, [r5, #4]
   17dac:	add	r4, r4, #1
   17db0:	add	r2, r2, #264	; 0x108
   17db4:	str	r2, [r7, #8]
   17db8:	cmp	r3, r4
   17dbc:	bgt	17c90 <bfd_arch_bits_per_address@plt+0x65c8>
   17dc0:	ldr	r2, [r7, #8]
   17dc4:	ldr	r3, [r7, #4]
   17dc8:	rsb	r3, r3, r2
   17dcc:	asr	r3, r3, #3
   17dd0:	rsb	r2, r3, r3, lsl #5
   17dd4:	add	r2, r3, r2, lsl #5
   17dd8:	rsb	r2, r2, r2, lsl #15
   17ddc:	add	r3, r3, r2, lsl #5
   17de0:	movw	r0, #31768	; 0x7c18
   17de4:	movt	r0, #3
   17de8:	str	r3, [r7]
   17dec:	bl	1b36c <bfd_arch_bits_per_address@plt+0x9ca4>
   17df0:	ldr	sl, [sp, #40]	; 0x28
   17df4:	ldr	r2, [sp, #68]	; 0x44
   17df8:	ldr	r3, [sl]
   17dfc:	cmp	r2, r3
   17e00:	bne	17f20 <bfd_arch_bits_per_address@plt+0x6858>
   17e04:	add	sp, sp, #76	; 0x4c
   17e08:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17e0c:	movw	r1, #30504	; 0x7728
   17e10:	movt	r1, #3
   17e14:	ldr	sl, [sp, #44]	; 0x2c
   17e18:	mov	r3, #12
   17e1c:	ldr	r0, [r1]
   17e20:	ldr	fp, [sp, #48]	; 0x30
   17e24:	ldr	r1, [sl]
   17e28:	ldr	r0, [r0, r8]
   17e2c:	ldr	r0, [r0, #4]
   17e30:	str	fp, [sp]
   17e34:	bl	115a8 <bsearch@plt>
   17e38:	mov	r6, r0
   17e3c:	b	17cb8 <bfd_arch_bits_per_address@plt+0x65f0>
   17e40:	movw	fp, #30504	; 0x7728
   17e44:	movt	fp, #3
   17e48:	movw	r1, #11776	; 0x2e00
   17e4c:	mov	r0, #1
   17e50:	ldr	r3, [fp]
   17e54:	movt	r1, #2
   17e58:	ldr	r3, [r3, r8]
   17e5c:	ldr	r2, [r3, #8]
   17e60:	ldr	r3, [r3, #4]
   17e64:	bl	115e4 <__printf_chk@plt>
   17e68:	b	17c80 <bfd_arch_bits_per_address@plt+0x65b8>
   17e6c:	ldr	ip, [r7, #4]
   17e70:	movw	r1, #11828	; 0x2e34
   17e74:	ldr	r3, [r2, #16]
   17e78:	movt	r1, #2
   17e7c:	rsb	r2, ip, r2
   17e80:	str	r0, [sp]
   17e84:	mov	r0, #1
   17e88:	asr	r2, r2, #3
   17e8c:	rsb	ip, r2, r2, lsl #5
   17e90:	add	ip, r2, ip, lsl #5
   17e94:	rsb	ip, ip, ip, lsl #15
   17e98:	add	r2, r2, ip, lsl #5
   17e9c:	bl	115e4 <__printf_chk@plt>
   17ea0:	ldr	r2, [r7, #8]
   17ea4:	b	17da8 <bfd_arch_bits_per_address@plt+0x66e0>
   17ea8:	ldr	r3, [r7, #8]
   17eac:	ldr	r0, [sp, #60]	; 0x3c
   17eb0:	str	r3, [sp, #28]
   17eb4:	bl	1adcc <bfd_arch_bits_per_address@plt+0x9704>
   17eb8:	ldr	r3, [sp, #28]
   17ebc:	str	r0, [r3, #20]
   17ec0:	b	17d50 <bfd_arch_bits_per_address@plt+0x6688>
   17ec4:	movw	r3, #30432	; 0x76e0
   17ec8:	movt	r3, #3
   17ecc:	mov	r2, #5
   17ed0:	movw	r1, #11736	; 0x2dd8
   17ed4:	mov	r0, #0
   17ed8:	movt	r1, #2
   17edc:	ldr	r4, [r3]
   17ee0:	bl	113e0 <dcgettext@plt>
   17ee4:	movw	ip, #29724	; 0x741c
   17ee8:	movt	ip, #3
   17eec:	movw	r3, #31748	; 0x7c04
   17ef0:	movt	r3, #3
   17ef4:	ldr	ip, [ip]
   17ef8:	mov	r1, #1
   17efc:	ldr	r3, [r3]
   17f00:	str	ip, [sp]
   17f04:	mov	r2, r0
   17f08:	mov	r0, r4
   17f0c:	bl	115fc <__fprintf_chk@plt>
   17f10:	mov	r0, #1
   17f14:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   17f18:	mov	r3, #0
   17f1c:	b	17de0 <bfd_arch_bits_per_address@plt+0x6718>
   17f20:	bl	113ec <__stack_chk_fail@plt>
   17f24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f28:	sub	sp, sp, #340	; 0x154
   17f2c:	movw	r5, #29904	; 0x74d0
   17f30:	movt	r5, #3
   17f34:	str	r5, [sp, #44]	; 0x2c
   17f38:	movw	r5, #31736	; 0x7bf8
   17f3c:	movt	r5, #3
   17f40:	str	r5, [sp, #40]	; 0x28
   17f44:	ldr	r5, [sp, #44]	; 0x2c
   17f48:	mov	r9, #0
   17f4c:	ldr	r3, [r5]
   17f50:	str	r3, [sp, #332]	; 0x14c
   17f54:	bl	17ad8 <bfd_arch_bits_per_address@plt+0x6410>
   17f58:	mov	r0, #1024	; 0x400
   17f5c:	bl	11458 <xmalloc@plt>
   17f60:	mov	r7, r0
   17f64:	mov	r0, #1024	; 0x400
   17f68:	bl	11458 <xmalloc@plt>
   17f6c:	ldr	r5, [sp, #40]	; 0x28
   17f70:	str	r9, [sp, #52]	; 0x34
   17f74:	ldr	r3, [r5]
   17f78:	ldrd	sl, [r3, #32]
   17f7c:	ldrd	r2, [r3, #48]	; 0x30
   17f80:	str	r0, [sp, #28]
   17f84:	adds	r0, sl, r2
   17f88:	adc	r1, fp, r3
   17f8c:	strd	r0, [sp, #16]
   17f90:	cmp	fp, r1
   17f94:	cmpeq	sl, r0
   17f98:	bcs	180f0 <bfd_arch_bits_per_address@plt+0x6a28>
   17f9c:	mov	r5, #1024	; 0x400
   17fa0:	movw	r4, #30504	; 0x7728
   17fa4:	str	r5, [sp, #32]
   17fa8:	mov	r0, #1024	; 0x400
   17fac:	add	r5, sp, #48	; 0x30
   17fb0:	movt	r4, #3
   17fb4:	add	r8, sp, #88	; 0x58
   17fb8:	str	r9, [sp, #24]
   17fbc:	str	r0, [sp, #36]	; 0x24
   17fc0:	b	18034 <bfd_arch_bits_per_address@plt+0x696c>
   17fc4:	ldr	r2, [sp, #52]	; 0x34
   17fc8:	mov	r0, r9
   17fcc:	add	r2, r2, #1
   17fd0:	str	r2, [sp, #52]	; 0x34
   17fd4:	bl	11560 <strlen@plt>
   17fd8:	ldr	r2, [sp, #36]	; 0x24
   17fdc:	cmp	r0, r2
   17fe0:	bcs	180c8 <bfd_arch_bits_per_address@plt+0x6a00>
   17fe4:	mov	r1, r9
   17fe8:	mov	r0, r7
   17fec:	bl	11488 <strcpy@plt>
   17ff0:	ldr	r9, [sp, #48]	; 0x30
   17ff4:	mov	r0, r9
   17ff8:	bl	11560 <strlen@plt>
   17ffc:	ldr	r3, [sp, #32]
   18000:	cmp	r3, r0
   18004:	movhi	r1, r9
   18008:	bls	180a4 <bfd_arch_bits_per_address@plt+0x69dc>
   1800c:	ldr	r0, [sp, #28]
   18010:	bl	11488 <strcpy@plt>
   18014:	str	r6, [sp, #24]
   18018:	ldr	r3, [r4, #8]
   1801c:	ldrd	r0, [sp, #16]
   18020:	adds	sl, sl, r3
   18024:	adc	fp, fp, r3, asr #31
   18028:	cmp	r1, fp
   1802c:	cmpeq	r0, sl
   18030:	bls	180ec <bfd_arch_bits_per_address@plt+0x6a24>
   18034:	str	r8, [sp]
   18038:	mov	r0, sl
   1803c:	mov	r1, fp
   18040:	mov	r2, r5
   18044:	add	r3, sp, #80	; 0x50
   18048:	bl	16e1c <bfd_arch_bits_per_address@plt+0x5754>
   1804c:	cmp	r0, #0
   18050:	beq	18018 <bfd_arch_bits_per_address@plt+0x6950>
   18054:	ldr	r6, [sp, #88]	; 0x58
   18058:	ldr	r1, [sp, #24]
   1805c:	ldr	r9, [sp, #80]	; 0x50
   18060:	cmp	r6, r1
   18064:	bne	17fc4 <bfd_arch_bits_per_address@plt+0x68fc>
   18068:	cmp	r7, #0
   1806c:	beq	17fc4 <bfd_arch_bits_per_address@plt+0x68fc>
   18070:	mov	r0, r7
   18074:	mov	r1, r9
   18078:	bl	11350 <strcmp@plt>
   1807c:	cmp	r0, #0
   18080:	bne	17fc4 <bfd_arch_bits_per_address@plt+0x68fc>
   18084:	ldr	r0, [sp, #28]
   18088:	ldr	r1, [sp, #48]	; 0x30
   1808c:	bl	11398 <filename_cmp@plt>
   18090:	cmp	r0, #0
   18094:	beq	18018 <bfd_arch_bits_per_address@plt+0x6950>
   18098:	ldr	r9, [sp, #80]	; 0x50
   1809c:	ldr	r6, [sp, #88]	; 0x58
   180a0:	b	17fc4 <bfd_arch_bits_per_address@plt+0x68fc>
   180a4:	add	r0, r0, #1024	; 0x400
   180a8:	str	r0, [sp, #32]
   180ac:	ldr	r0, [sp, #28]
   180b0:	bl	11374 <free@plt>
   180b4:	ldr	r0, [sp, #32]
   180b8:	bl	11458 <xmalloc@plt>
   180bc:	ldr	r1, [sp, #48]	; 0x30
   180c0:	str	r0, [sp, #28]
   180c4:	b	1800c <bfd_arch_bits_per_address@plt+0x6944>
   180c8:	add	r0, r0, #1024	; 0x400
   180cc:	str	r0, [sp, #36]	; 0x24
   180d0:	mov	r0, r7
   180d4:	bl	11374 <free@plt>
   180d8:	ldr	r0, [sp, #36]	; 0x24
   180dc:	bl	11458 <xmalloc@plt>
   180e0:	ldr	r9, [sp, #80]	; 0x50
   180e4:	mov	r7, r0
   180e8:	b	17fe4 <bfd_arch_bits_per_address@plt+0x691c>
   180ec:	ldr	r9, [sp, #52]	; 0x34
   180f0:	mov	r0, r7
   180f4:	movw	r5, #31768	; 0x7c18
   180f8:	movt	r5, #3
   180fc:	str	r5, [sp, #24]
   18100:	bl	11374 <free@plt>
   18104:	ldr	r0, [sp, #28]
   18108:	bl	11374 <free@plt>
   1810c:	ldr	r3, [r5]
   18110:	add	r9, r9, r3
   18114:	str	r9, [sp, #52]	; 0x34
   18118:	add	r0, r9, r9, lsl #5
   1811c:	lsl	r0, r0, #3
   18120:	bl	11458 <xmalloc@plt>
   18124:	ldr	r5, [sp, #40]	; 0x28
   18128:	ldr	r3, [r5]
   1812c:	ldrd	r6, [r3, #32]
   18130:	ldrd	r2, [sp, #16]
   18134:	cmp	r3, r7
   18138:	cmpeq	r2, r6
   1813c:	str	r0, [sp, #56]	; 0x38
   18140:	str	r0, [sp, #60]	; 0x3c
   18144:	bls	182dc <bfd_arch_bits_per_address@plt+0x6c14>
   18148:	movw	r9, #30536	; 0x7748
   1814c:	movt	r9, #3
   18150:	movw	r4, #30504	; 0x7728
   18154:	add	r5, sp, #48	; 0x30
   18158:	movt	r4, #3
   1815c:	mov	sl, #0
   18160:	mov	fp, r9
   18164:	b	18230 <bfd_arch_bits_per_address@plt+0x6b68>
   18168:	cmp	sl, #0
   1816c:	beq	183a8 <bfd_arch_bits_per_address@plt+0x6ce0>
   18170:	ldr	r8, [sp, #60]	; 0x3c
   18174:	ldr	r1, [sl, #24]
   18178:	ldr	r2, [r8, #24]
   1817c:	ldr	r9, [r8, #16]
   18180:	cmp	r1, r2
   18184:	beq	182a4 <bfd_arch_bits_per_address@plt+0x6bdc>
   18188:	mov	r0, r9
   1818c:	bl	11470 <xstrdup@plt>
   18190:	ldr	r2, [sp, #60]	; 0x3c
   18194:	str	r0, [r8, #16]
   18198:	ldr	r0, [sp, #48]	; 0x30
   1819c:	str	r2, [sp, #12]
   181a0:	bl	1adcc <bfd_arch_bits_per_address@plt+0x9704>
   181a4:	ldr	r2, [sp, #12]
   181a8:	ldr	r3, [sp, #60]	; 0x3c
   181ac:	str	r0, [r2, #20]
   181b0:	ldr	r2, [sl, #20]
   181b4:	ldr	r1, [r3, #20]
   181b8:	strd	r6, [r3]
   181bc:	cmp	r1, r2
   181c0:	beq	18370 <bfd_arch_bits_per_address@plt+0x6ca8>
   181c4:	mov	r3, r7
   181c8:	mov	r2, r6
   181cc:	movw	r0, #31768	; 0x7c18
   181d0:	movt	r0, #3
   181d4:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   181d8:	cmp	r0, #0
   181dc:	ldrne	r3, [sp, #60]	; 0x3c
   181e0:	ldrbne	r1, [r0, #28]
   181e4:	ldreq	sl, [sp, #60]	; 0x3c
   181e8:	ldrbne	r2, [r3, #28]
   181ec:	ubfxne	r1, r1, #1, #1
   181f0:	movne	sl, r3
   181f4:	bfine	r2, r1, #1, #1
   181f8:	strbne	r2, [r3, #28]
   181fc:	ldr	r3, [fp]
   18200:	tst	r3, #128	; 0x80
   18204:	moveq	r0, sl
   18208:	bne	18264 <bfd_arch_bits_per_address@plt+0x6b9c>
   1820c:	add	r0, r0, #264	; 0x108
   18210:	str	r0, [sp, #60]	; 0x3c
   18214:	ldr	r3, [r4, #8]
   18218:	adds	r6, r6, r3
   1821c:	adc	r7, r7, r3, asr #31
   18220:	ldrd	r2, [sp, #16]
   18224:	cmp	r3, r7
   18228:	cmpeq	r2, r6
   1822c:	bls	182dc <bfd_arch_bits_per_address@plt+0x6c14>
   18230:	bl	1b358 <bfd_arch_bits_per_address@plt+0x9c90>
   18234:	ldr	r3, [sp, #60]	; 0x3c
   18238:	mov	r0, r6
   1823c:	mov	r1, r7
   18240:	add	ip, r3, #24
   18244:	mov	r2, r5
   18248:	add	r3, r3, #16
   1824c:	str	ip, [sp]
   18250:	bl	16e1c <bfd_arch_bits_per_address@plt+0x5754>
   18254:	cmp	r0, #0
   18258:	bne	18168 <bfd_arch_bits_per_address@plt+0x6aa0>
   1825c:	ldr	r0, [sp, #60]	; 0x3c
   18260:	b	18214 <bfd_arch_bits_per_address@plt+0x6b4c>
   18264:	ldr	r2, [sp, #56]	; 0x38
   18268:	movw	r1, #11872	; 0x2e60
   1826c:	ldr	r0, [sl]
   18270:	movt	r1, #2
   18274:	rsb	r2, r2, sl
   18278:	ldr	r3, [sl, #16]
   1827c:	asr	r2, r2, #3
   18280:	str	r0, [sp]
   18284:	mov	r0, #1
   18288:	rsb	ip, r2, r2, lsl #5
   1828c:	add	ip, r2, ip, lsl #5
   18290:	rsb	ip, ip, ip, lsl #15
   18294:	add	r2, r2, ip, lsl #5
   18298:	bl	115e4 <__printf_chk@plt>
   1829c:	ldr	r0, [sp, #60]	; 0x3c
   182a0:	b	1820c <bfd_arch_bits_per_address@plt+0x6b44>
   182a4:	ldr	r0, [sl, #16]
   182a8:	mov	r1, r9
   182ac:	bl	11350 <strcmp@plt>
   182b0:	cmp	r0, #0
   182b4:	bne	18188 <bfd_arch_bits_per_address@plt+0x6ac0>
   182b8:	ldr	r3, [sl, #20]
   182bc:	ldr	r1, [sp, #48]	; 0x30
   182c0:	ldr	r0, [r3, #4]
   182c4:	bl	11398 <filename_cmp@plt>
   182c8:	cmp	r0, #0
   182cc:	beq	1825c <bfd_arch_bits_per_address@plt+0x6b94>
   182d0:	ldr	r8, [sp, #60]	; 0x3c
   182d4:	ldr	r9, [r8, #16]
   182d8:	b	18188 <bfd_arch_bits_per_address@plt+0x6ac0>
   182dc:	ldr	r5, [sp, #24]
   182e0:	movw	r4, #31768	; 0x7c18
   182e4:	movt	r4, #3
   182e8:	ldr	r3, [r5]
   182ec:	ldr	r1, [r5, #4]
   182f0:	add	r2, r3, r3, lsl #5
   182f4:	lsl	r2, r2, #3
   182f8:	bl	113b0 <memcpy@plt>
   182fc:	ldr	r2, [r5]
   18300:	ldr	ip, [sp, #60]	; 0x3c
   18304:	ldr	r0, [sp, #56]	; 0x38
   18308:	add	r2, r2, r2, lsl #5
   1830c:	ldr	r1, [sp, #52]	; 0x34
   18310:	add	r3, ip, r2, lsl #3
   18314:	str	r3, [sp, #60]	; 0x3c
   18318:	rsb	r3, r0, r3
   1831c:	asr	r3, r3, #3
   18320:	rsb	r2, r3, r3, lsl #5
   18324:	add	r2, r3, r2, lsl #5
   18328:	rsb	r2, r2, r2, lsl #15
   1832c:	add	r3, r3, r2, lsl #5
   18330:	cmp	r3, r1
   18334:	bne	183d4 <bfd_arch_bits_per_address@plt+0x6d0c>
   18338:	add	r5, sp, #52	; 0x34
   1833c:	mov	r0, r5
   18340:	bl	1b36c <bfd_arch_bits_per_address@plt+0x9ca4>
   18344:	ldr	r0, [r4, #4]
   18348:	bl	11374 <free@plt>
   1834c:	ldm	r5, {r0, r1, r2}
   18350:	ldr	r5, [sp, #44]	; 0x2c
   18354:	ldr	ip, [sp, #332]	; 0x14c
   18358:	ldr	r3, [r5]
   1835c:	stm	r4, {r0, r1, r2}
   18360:	cmp	ip, r3
   18364:	bne	18444 <bfd_arch_bits_per_address@plt+0x6d7c>
   18368:	add	sp, sp, #340	; 0x154
   1836c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18370:	ldr	r0, [r3, #16]
   18374:	ldr	r1, [sl, #16]
   18378:	str	r3, [sp, #12]
   1837c:	bl	11350 <strcmp@plt>
   18380:	ldr	r3, [sp, #12]
   18384:	cmp	r0, #0
   18388:	bne	181c4 <bfd_arch_bits_per_address@plt+0x6afc>
   1838c:	ldrb	r1, [sl, #28]
   18390:	mov	sl, r3
   18394:	ldrb	r2, [r3, #28]
   18398:	ubfx	r1, r1, #1, #1
   1839c:	bfi	r2, r1, #1, #1
   183a0:	strb	r2, [r3, #28]
   183a4:	b	181fc <bfd_arch_bits_per_address@plt+0x6b34>
   183a8:	ldr	sl, [sp, #60]	; 0x3c
   183ac:	ldr	r0, [sl, #16]
   183b0:	bl	11470 <xstrdup@plt>
   183b4:	ldr	r8, [sp, #60]	; 0x3c
   183b8:	str	r0, [sl, #16]
   183bc:	ldr	r0, [sp, #48]	; 0x30
   183c0:	bl	1adcc <bfd_arch_bits_per_address@plt+0x9704>
   183c4:	ldr	r2, [sp, #60]	; 0x3c
   183c8:	str	r0, [r8, #20]
   183cc:	strd	r6, [r2]
   183d0:	b	181c4 <bfd_arch_bits_per_address@plt+0x6afc>
   183d4:	movw	r3, #30432	; 0x76e0
   183d8:	movt	r3, #3
   183dc:	mov	r2, #5
   183e0:	movw	r1, #11912	; 0x2e88
   183e4:	mov	r0, #0
   183e8:	movt	r1, #2
   183ec:	ldr	r4, [r3]
   183f0:	bl	113e0 <dcgettext@plt>
   183f4:	ldr	r1, [sp, #56]	; 0x38
   183f8:	movw	r3, #31748	; 0x7c04
   183fc:	ldr	ip, [sp, #60]	; 0x3c
   18400:	movt	r3, #3
   18404:	ldr	lr, [sp, #52]	; 0x34
   18408:	rsb	ip, r1, ip
   1840c:	ldr	r3, [r3]
   18410:	mov	r1, #1
   18414:	asr	ip, ip, #3
   18418:	str	lr, [sp]
   1841c:	rsb	lr, ip, ip, lsl #5
   18420:	add	lr, ip, lr, lsl #5
   18424:	rsb	lr, lr, lr, lsl #15
   18428:	add	ip, ip, lr, lsl #5
   1842c:	str	ip, [sp, #4]
   18430:	mov	r2, r0
   18434:	mov	r0, r4
   18438:	bl	115fc <__fprintf_chk@plt>
   1843c:	mov	r0, #1
   18440:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   18444:	bl	113ec <__stack_chk_fail@plt>
   18448:	push	{r4, r5, lr}
   1844c:	movw	r4, #29904	; 0x74d0
   18450:	movt	r4, #3
   18454:	sub	sp, sp, #20
   18458:	mov	r3, r0
   1845c:	mov	r5, r1
   18460:	ldr	ip, [r4]
   18464:	add	r0, sp, #4
   18468:	mov	r1, #1
   1846c:	mov	r2, #8
   18470:	str	ip, [sp, #12]
   18474:	bl	114a0 <fread@plt>
   18478:	cmp	r0, #8
   1847c:	movne	r3, #1
   18480:	beq	184a0 <bfd_arch_bits_per_address@plt+0x6dd8>
   18484:	ldr	r2, [sp, #12]
   18488:	mov	r0, r3
   1848c:	ldr	r3, [r4]
   18490:	cmp	r2, r3
   18494:	bne	184c8 <bfd_arch_bits_per_address@plt+0x6e00>
   18498:	add	sp, sp, #20
   1849c:	pop	{r4, r5, pc}
   184a0:	movw	r3, #31720	; 0x7be8
   184a4:	movt	r3, #3
   184a8:	add	r0, sp, #4
   184ac:	ldr	r3, [r3]
   184b0:	ldr	r3, [r3, #4]
   184b4:	ldr	r3, [r3, #28]
   184b8:	blx	r3
   184bc:	mov	r3, #0
   184c0:	strd	r0, [r5]
   184c4:	b	18484 <bfd_arch_bits_per_address@plt+0x6dbc>
   184c8:	bl	113ec <__stack_chk_fail@plt>
   184cc:	push	{r4, r5, lr}
   184d0:	movw	r4, #31720	; 0x7be8
   184d4:	movt	r4, #3
   184d8:	sub	sp, sp, #12
   184dc:	ldr	r0, [r4]
   184e0:	bl	114b8 <bfd_get_arch_size@plt>
   184e4:	cmn	r0, #1
   184e8:	mov	r5, r0
   184ec:	beq	18560 <bfd_arch_bits_per_address@plt+0x6e98>
   184f0:	cmp	r5, #32
   184f4:	beq	18554 <bfd_arch_bits_per_address@plt+0x6e8c>
   184f8:	cmp	r5, #64	; 0x40
   184fc:	bne	1850c <bfd_arch_bits_per_address@plt+0x6e44>
   18500:	mov	r0, #1
   18504:	add	sp, sp, #12
   18508:	pop	{r4, r5, pc}
   1850c:	movw	r3, #30432	; 0x76e0
   18510:	movt	r3, #3
   18514:	mov	r2, #5
   18518:	movw	r1, #11968	; 0x2ec0
   1851c:	mov	r0, #0
   18520:	movt	r1, #2
   18524:	ldr	r4, [r3]
   18528:	bl	113e0 <dcgettext@plt>
   1852c:	movw	r3, #31748	; 0x7c04
   18530:	movt	r3, #3
   18534:	mov	r1, #1
   18538:	ldr	r3, [r3]
   1853c:	str	r5, [sp]
   18540:	mov	r2, r0
   18544:	mov	r0, r4
   18548:	bl	115fc <__fprintf_chk@plt>
   1854c:	mov	r0, #1
   18550:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   18554:	mov	r0, #0
   18558:	add	sp, sp, #12
   1855c:	pop	{r4, r5, pc}
   18560:	ldr	r0, [r4]
   18564:	bl	116c8 <bfd_arch_bits_per_address@plt>
   18568:	mov	r5, r0
   1856c:	b	184f0 <bfd_arch_bits_per_address@plt+0x6e28>
   18570:	movw	r1, #31720	; 0x7be8
   18574:	movt	r1, #3
   18578:	push	{r4, r5, lr}
   1857c:	movw	r4, #29904	; 0x74d0
   18580:	ldr	lr, [r1]
   18584:	movt	r4, #3
   18588:	mov	r1, r3
   1858c:	sub	sp, sp, #20
   18590:	ldr	ip, [r4]
   18594:	mov	r5, r0
   18598:	ldr	r3, [lr, #4]
   1859c:	mov	r0, r2
   185a0:	add	r2, sp, #4
   185a4:	str	ip, [sp, #12]
   185a8:	ldr	r3, [r3, #36]	; 0x24
   185ac:	blx	r3
   185b0:	mov	r3, r5
   185b4:	mov	r2, #8
   185b8:	add	r0, sp, #4
   185bc:	mov	r1, #1
   185c0:	bl	1144c <fwrite@plt>
   185c4:	ldr	r2, [sp, #12]
   185c8:	ldr	r3, [r4]
   185cc:	subs	r0, r0, #8
   185d0:	movne	r0, #1
   185d4:	cmp	r2, r3
   185d8:	bne	185e4 <bfd_arch_bits_per_address@plt+0x6f1c>
   185dc:	add	sp, sp, #20
   185e0:	pop	{r4, r5, pc}
   185e4:	bl	113ec <__stack_chk_fail@plt>
   185e8:	push	{r4, r5, lr}
   185ec:	movw	r4, #29904	; 0x74d0
   185f0:	movt	r4, #3
   185f4:	sub	sp, sp, #12
   185f8:	mov	r3, r0
   185fc:	mov	r5, r1
   18600:	ldr	ip, [r4]
   18604:	mov	r0, sp
   18608:	mov	r1, #1
   1860c:	mov	r2, #4
   18610:	str	ip, [sp, #4]
   18614:	bl	114a0 <fread@plt>
   18618:	cmp	r0, #4
   1861c:	movne	r3, #1
   18620:	beq	18640 <bfd_arch_bits_per_address@plt+0x6f78>
   18624:	ldr	r2, [sp, #4]
   18628:	mov	r0, r3
   1862c:	ldr	r3, [r4]
   18630:	cmp	r2, r3
   18634:	bne	18668 <bfd_arch_bits_per_address@plt+0x6fa0>
   18638:	add	sp, sp, #12
   1863c:	pop	{r4, r5, pc}
   18640:	movw	r3, #31720	; 0x7be8
   18644:	movt	r3, #3
   18648:	mov	r0, sp
   1864c:	ldr	r3, [r3]
   18650:	ldr	r3, [r3, #4]
   18654:	ldr	r3, [r3, #40]	; 0x28
   18658:	blx	r3
   1865c:	mov	r3, #0
   18660:	str	r0, [r5]
   18664:	b	18624 <bfd_arch_bits_per_address@plt+0x6f5c>
   18668:	bl	113ec <__stack_chk_fail@plt>
   1866c:	push	{r4, r5, r6, r7, lr}
   18670:	movw	r4, #29904	; 0x74d0
   18674:	movt	r4, #3
   18678:	sub	sp, sp, #20
   1867c:	mov	r5, r0
   18680:	mov	r6, r1
   18684:	ldr	r3, [r4]
   18688:	str	r3, [sp, #12]
   1868c:	bl	184cc <bfd_arch_bits_per_address@plt+0x6e04>
   18690:	subs	r7, r0, #0
   18694:	beq	186f4 <bfd_arch_bits_per_address@plt+0x702c>
   18698:	cmp	r7, #1
   1869c:	beq	186c0 <bfd_arch_bits_per_address@plt+0x6ff8>
   186a0:	mov	r5, #0
   186a4:	ldr	r2, [sp, #12]
   186a8:	mov	r0, r5
   186ac:	ldr	r3, [r4]
   186b0:	cmp	r2, r3
   186b4:	bne	1873c <bfd_arch_bits_per_address@plt+0x7074>
   186b8:	add	sp, sp, #20
   186bc:	pop	{r4, r5, r6, r7, pc}
   186c0:	mov	r0, r5
   186c4:	mov	r1, sp
   186c8:	bl	18448 <bfd_arch_bits_per_address@plt+0x6d80>
   186cc:	subs	r5, r0, #0
   186d0:	movne	r5, r7
   186d4:	bne	186a4 <bfd_arch_bits_per_address@plt+0x6fdc>
   186d8:	movw	r3, #31720	; 0x7be8
   186dc:	movt	r3, #3
   186e0:	ldr	r0, [r3]
   186e4:	bl	115f0 <bfd_get_sign_extend_vma@plt>
   186e8:	ldrd	r2, [sp]
   186ec:	strd	r2, [r6]
   186f0:	b	186a4 <bfd_arch_bits_per_address@plt+0x6fdc>
   186f4:	mov	r0, r5
   186f8:	mov	r1, sp
   186fc:	bl	185e8 <bfd_arch_bits_per_address@plt+0x6f20>
   18700:	subs	r5, r0, #0
   18704:	movne	r5, #1
   18708:	bne	186a4 <bfd_arch_bits_per_address@plt+0x6fdc>
   1870c:	movw	r3, #31720	; 0x7be8
   18710:	movt	r3, #3
   18714:	ldr	r0, [r3]
   18718:	bl	115f0 <bfd_get_sign_extend_vma@plt>
   1871c:	add	r0, r0, #1
   18720:	cmp	r0, #1
   18724:	ldrhi	r2, [sp]
   18728:	ldrls	r3, [sp]
   1872c:	asrhi	r3, r2, #31
   18730:	strdhi	r2, [r6]
   18734:	stmls	r6, {r3, r5}
   18738:	b	186a4 <bfd_arch_bits_per_address@plt+0x6fdc>
   1873c:	bl	113ec <__stack_chk_fail@plt>
   18740:	push	{r4, lr}
   18744:	mov	r3, r0
   18748:	mov	r0, r1
   1874c:	mov	r1, #1
   18750:	mov	r4, r2
   18754:	bl	114a0 <fread@plt>
   18758:	subs	r0, r4, r0
   1875c:	movne	r0, #1
   18760:	pop	{r4, pc}
   18764:	movw	r3, #31720	; 0x7be8
   18768:	movt	r3, #3
   1876c:	push	{r4, r5, lr}
   18770:	movw	r4, #29904	; 0x74d0
   18774:	ldr	r3, [r3]
   18778:	movt	r4, #3
   1877c:	sub	sp, sp, #12
   18780:	mov	r5, r0
   18784:	ldr	ip, [r4]
   18788:	mov	r0, r1
   1878c:	ldr	r3, [r3, #4]
   18790:	mov	r2, sp
   18794:	mov	r1, #0
   18798:	str	ip, [sp, #4]
   1879c:	ldr	r3, [r3, #48]	; 0x30
   187a0:	blx	r3
   187a4:	mov	r3, r5
   187a8:	mov	r2, #4
   187ac:	mov	r0, sp
   187b0:	mov	r1, #1
   187b4:	bl	1144c <fwrite@plt>
   187b8:	ldr	r2, [sp, #4]
   187bc:	ldr	r3, [r4]
   187c0:	subs	r0, r0, #4
   187c4:	movne	r0, #1
   187c8:	cmp	r2, r3
   187cc:	bne	187d8 <bfd_arch_bits_per_address@plt+0x7110>
   187d0:	add	sp, sp, #12
   187d4:	pop	{r4, r5, pc}
   187d8:	bl	113ec <__stack_chk_fail@plt>
   187dc:	push	{r4, r5, r6, lr}
   187e0:	mov	r4, r0
   187e4:	mov	r5, r2
   187e8:	mov	r6, r3
   187ec:	bl	184cc <bfd_arch_bits_per_address@plt+0x6e04>
   187f0:	cmp	r0, #0
   187f4:	beq	18824 <bfd_arch_bits_per_address@plt+0x715c>
   187f8:	cmp	r0, #1
   187fc:	bne	1881c <bfd_arch_bits_per_address@plt+0x7154>
   18800:	mov	r0, r4
   18804:	mov	r2, r5
   18808:	mov	r3, r6
   1880c:	bl	18570 <bfd_arch_bits_per_address@plt+0x6ea8>
   18810:	adds	r0, r0, #0
   18814:	movne	r0, #1
   18818:	pop	{r4, r5, r6, pc}
   1881c:	mov	r0, #0
   18820:	pop	{r4, r5, r6, pc}
   18824:	mov	r0, r4
   18828:	mov	r1, r5
   1882c:	bl	18764 <bfd_arch_bits_per_address@plt+0x709c>
   18830:	adds	r0, r0, #0
   18834:	movne	r0, #1
   18838:	pop	{r4, r5, r6, pc}
   1883c:	push	{r4, lr}
   18840:	movw	r4, #29904	; 0x74d0
   18844:	sub	sp, sp, #8
   18848:	movt	r4, #3
   1884c:	add	r2, sp, #8
   18850:	mov	r3, r0
   18854:	ldr	ip, [r4]
   18858:	mov	r0, sp
   1885c:	strb	r1, [r2, #-8]!
   18860:	mov	r1, #1
   18864:	mov	r2, r1
   18868:	str	ip, [sp, #4]
   1886c:	bl	1144c <fwrite@plt>
   18870:	ldr	r2, [sp, #4]
   18874:	ldr	r3, [r4]
   18878:	subs	r0, r0, #1
   1887c:	movne	r0, #1
   18880:	cmp	r2, r3
   18884:	bne	18890 <bfd_arch_bits_per_address@plt+0x71c8>
   18888:	add	sp, sp, #8
   1888c:	pop	{r4, pc}
   18890:	bl	113ec <__stack_chk_fail@plt>
   18894:	push	{r4, lr}
   18898:	mov	r3, r0
   1889c:	mov	r0, r1
   188a0:	mov	r1, #1
   188a4:	mov	r4, r2
   188a8:	bl	1144c <fwrite@plt>
   188ac:	subs	r0, r4, r0
   188b0:	movne	r0, #1
   188b4:	pop	{r4, pc}
   188b8:	movw	ip, #29904	; 0x74d0
   188bc:	movt	ip, #3
   188c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   188c4:	sub	sp, sp, #124	; 0x7c
   188c8:	ldrb	r2, [r0]
   188cc:	ldr	r3, [ip]
   188d0:	cmp	r2, #45	; 0x2d
   188d4:	str	r0, [sp, #20]
   188d8:	str	ip, [sp, #16]
   188dc:	str	r3, [sp, #116]	; 0x74
   188e0:	beq	18990 <bfd_arch_bits_per_address@plt+0x72c8>
   188e4:	movw	r1, #11212	; 0x2bcc
   188e8:	ldr	r0, [sp, #20]
   188ec:	movt	r1, #2
   188f0:	bl	1165c <fopen64@plt>
   188f4:	subs	r6, r0, #0
   188f8:	beq	19104 <bfd_arch_bits_per_address@plt+0x7a3c>
   188fc:	mov	r1, #20
   18900:	mov	r2, #1
   18904:	mov	r3, r6
   18908:	add	r0, sp, #68	; 0x44
   1890c:	bl	114a0 <fread@plt>
   18910:	cmp	r0, #1
   18914:	mov	r7, r0
   18918:	bne	190ac <bfd_arch_bits_per_address@plt+0x79e4>
   1891c:	movw	r4, #30552	; 0x7758
   18920:	movt	r4, #3
   18924:	ldr	r5, [r4]
   18928:	cmp	r5, #1
   1892c:	beq	18ce8 <bfd_arch_bits_per_address@plt+0x7620>
   18930:	cmp	r5, #0
   18934:	beq	189ac <bfd_arch_bits_per_address@plt+0x72e4>
   18938:	sub	r5, r5, #2
   1893c:	cmp	r5, #1
   18940:	bls	189c8 <bfd_arch_bits_per_address@plt+0x7300>
   18944:	movw	r3, #30432	; 0x76e0
   18948:	movt	r3, #3
   1894c:	mov	r2, #5
   18950:	movw	r1, #12576	; 0x3120
   18954:	mov	r0, #0
   18958:	movt	r1, #2
   1895c:	ldr	r5, [r3]
   18960:	bl	113e0 <dcgettext@plt>
   18964:	ldr	ip, [r4]
   18968:	movw	r3, #31748	; 0x7c04
   1896c:	movt	r3, #3
   18970:	mov	r1, r7
   18974:	ldr	r3, [r3]
   18978:	str	ip, [sp]
   1897c:	mov	r2, r0
   18980:	mov	r0, r5
   18984:	bl	115fc <__fprintf_chk@plt>
   18988:	mov	r0, r7
   1898c:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   18990:	ldrb	r3, [r0, #1]
   18994:	cmp	r3, #0
   18998:	bne	188e4 <bfd_arch_bits_per_address@plt+0x721c>
   1899c:	movw	r3, #30436	; 0x76e4
   189a0:	movt	r3, #3
   189a4:	ldr	r6, [r3]
   189a8:	b	188fc <bfd_arch_bits_per_address@plt+0x7234>
   189ac:	add	r0, sp, #68	; 0x44
   189b0:	movw	r1, #12056	; 0x2f18
   189b4:	mov	r2, #4
   189b8:	movt	r1, #2
   189bc:	bl	116b0 <strncmp@plt>
   189c0:	cmp	r0, #0
   189c4:	beq	18d04 <bfd_arch_bits_per_address@plt+0x763c>
   189c8:	mov	r1, #0
   189cc:	movw	r9, #30516	; 0x7734
   189d0:	movt	r9, #3
   189d4:	mov	r2, r1
   189d8:	mov	r0, r6
   189dc:	mov	r3, #3
   189e0:	str	r3, [r9, #4]
   189e4:	bl	11698 <fseek@plt>
   189e8:	cmp	r0, #0
   189ec:	blt	19104 <bfd_arch_bits_per_address@plt+0x7a3c>
   189f0:	mov	r0, r6
   189f4:	add	r1, sp, #88	; 0x58
   189f8:	bl	1866c <bfd_arch_bits_per_address@plt+0x6fa4>
   189fc:	cmp	r0, #0
   18a00:	bne	190ac <bfd_arch_bits_per_address@plt+0x79e4>
   18a04:	mov	r0, r6
   18a08:	add	r1, sp, #96	; 0x60
   18a0c:	bl	1866c <bfd_arch_bits_per_address@plt+0x6fa4>
   18a10:	cmp	r0, #0
   18a14:	bne	190ac <bfd_arch_bits_per_address@plt+0x79e4>
   18a18:	mov	r0, r6
   18a1c:	add	r1, sp, #104	; 0x68
   18a20:	bl	185e8 <bfd_arch_bits_per_address@plt+0x6f20>
   18a24:	cmp	r0, #0
   18a28:	bne	190ac <bfd_arch_bits_per_address@plt+0x79e4>
   18a2c:	mov	r0, r6
   18a30:	add	r1, sp, #36	; 0x24
   18a34:	bl	185e8 <bfd_arch_bits_per_address@plt+0x6f20>
   18a38:	cmp	r0, #0
   18a3c:	bne	190ac <bfd_arch_bits_per_address@plt+0x79e4>
   18a40:	ldr	r2, [sp, #36]	; 0x24
   18a44:	movw	r3, #6265	; 0x1879
   18a48:	movt	r3, #5
   18a4c:	cmp	r2, r3
   18a50:	beq	18f50 <bfd_arch_bits_per_address@plt+0x7888>
   18a54:	ldr	r3, [r4]
   18a58:	cmp	r3, #3
   18a5c:	beq	191d8 <bfd_arch_bits_per_address@plt+0x7b10>
   18a60:	bl	184cc <bfd_arch_bits_per_address@plt+0x6e04>
   18a64:	cmp	r0, #0
   18a68:	moveq	r4, #12
   18a6c:	beq	18a7c <bfd_arch_bits_per_address@plt+0x73b4>
   18a70:	cmp	r0, #1
   18a74:	moveq	r4, #20
   18a78:	movne	r4, #0
   18a7c:	mov	r0, r6
   18a80:	mov	r1, r4
   18a84:	mov	r2, #0
   18a88:	bl	11698 <fseek@plt>
   18a8c:	cmp	r0, #0
   18a90:	blt	19104 <bfd_arch_bits_per_address@plt+0x7a3c>
   18a94:	movw	r7, #31752	; 0x7c08
   18a98:	movt	r7, #3
   18a9c:	ldr	ip, [sp, #104]	; 0x68
   18aa0:	ldr	sl, [r7]
   18aa4:	rsb	r5, r4, ip
   18aa8:	cmp	sl, #0
   18aac:	lsr	r8, r5, #1
   18ab0:	beq	18fb0 <bfd_arch_bits_per_address@plt+0x78e8>
   18ab4:	ldrd	r0, [sp, #88]	; 0x58
   18ab8:	ldrd	r2, [sl]
   18abc:	cmp	r1, r3
   18ac0:	cmpeq	r0, r2
   18ac4:	bne	191b8 <bfd_arch_bits_per_address@plt+0x7af0>
   18ac8:	ldrd	r0, [sp, #96]	; 0x60
   18acc:	ldrd	r2, [sl, #8]
   18ad0:	cmp	r1, r3
   18ad4:	cmpeq	r0, r2
   18ad8:	bne	191b8 <bfd_arch_bits_per_address@plt+0x7af0>
   18adc:	ldr	r3, [sl, #16]
   18ae0:	cmp	r3, r8
   18ae4:	bne	191b8 <bfd_arch_bits_per_address@plt+0x7af0>
   18ae8:	movw	ip, #30536	; 0x7748
   18aec:	movt	ip, #3
   18af0:	str	ip, [sp, #28]
   18af4:	ldr	r3, [ip]
   18af8:	tst	r3, #64	; 0x40
   18afc:	bne	18ecc <bfd_arch_bits_per_address@plt+0x7804>
   18b00:	cmp	r5, #0
   18b04:	blt	1916c <bfd_arch_bits_per_address@plt+0x7aa4>
   18b08:	ldr	r3, [r7]
   18b0c:	ldrd	r0, [r3]
   18b10:	ldrd	r2, [r3, #8]
   18b14:	cmp	r1, r3
   18b18:	cmpeq	r0, r2
   18b1c:	bhi	1916c <bfd_arch_bits_per_address@plt+0x7aa4>
   18b20:	adds	ip, r8, #0
   18b24:	movne	ip, #1
   18b28:	cmp	ip, #0
   18b2c:	str	ip, [sp, #24]
   18b30:	movwne	r4, #31720	; 0x7be8
   18b34:	movne	r5, #0
   18b38:	movtne	r4, #3
   18b3c:	beq	18b90 <bfd_arch_bits_per_address@plt+0x74c8>
   18b40:	add	r0, sp, #112	; 0x70
   18b44:	mov	r1, #2
   18b48:	mov	r2, #1
   18b4c:	mov	r3, r6
   18b50:	bl	114a0 <fread@plt>
   18b54:	cmp	r0, #1
   18b58:	bne	1905c <bfd_arch_bits_per_address@plt+0x7994>
   18b5c:	ldr	r3, [r4]
   18b60:	add	r0, sp, #112	; 0x70
   18b64:	ldr	r2, [r7]
   18b68:	ldr	r3, [r3, #4]
   18b6c:	ldr	sl, [r2, #20]
   18b70:	ldr	r3, [r3, #52]	; 0x34
   18b74:	ldr	fp, [sl, r5, lsl #2]
   18b78:	blx	r3
   18b7c:	add	r0, fp, r0
   18b80:	str	r0, [sl, r5, lsl #2]
   18b84:	add	r5, r5, #1
   18b88:	cmp	r8, r5
   18b8c:	bhi	18b40 <bfd_arch_bits_per_address@plt+0x7478>
   18b90:	ldr	r5, [sp, #28]
   18b94:	mov	r4, #0
   18b98:	mov	r0, r6
   18b9c:	add	r1, sp, #40	; 0x28
   18ba0:	bl	1866c <bfd_arch_bits_per_address@plt+0x6fa4>
   18ba4:	cmp	r0, #0
   18ba8:	beq	18dcc <bfd_arch_bits_per_address@plt+0x7704>
   18bac:	movw	r5, #30568	; 0x7768
   18bb0:	movt	r5, #3
   18bb4:	ldr	r3, [r5]
   18bb8:	cmp	r3, #0
   18bbc:	beq	18f08 <bfd_arch_bits_per_address@plt+0x7840>
   18bc0:	mov	r7, #0
   18bc4:	movw	r3, #30436	; 0x76e4
   18bc8:	movt	r3, #3
   18bcc:	ldr	r3, [r3]
   18bd0:	cmp	r6, r3
   18bd4:	beq	18be0 <bfd_arch_bits_per_address@plt+0x7518>
   18bd8:	mov	r0, r6
   18bdc:	bl	11608 <fclose@plt>
   18be0:	movw	r3, #30528	; 0x7740
   18be4:	movt	r3, #3
   18be8:	ldr	r3, [r3]
   18bec:	tst	r3, #32
   18bf0:	beq	18ccc <bfd_arch_bits_per_address@plt+0x7604>
   18bf4:	mov	r2, #5
   18bf8:	movw	r1, #12624	; 0x3150
   18bfc:	mov	r0, #0
   18c00:	movt	r1, #2
   18c04:	bl	113e0 <dcgettext@plt>
   18c08:	ldr	r3, [r9]
   18c0c:	ldr	r2, [sp, #20]
   18c10:	mov	r1, r0
   18c14:	mov	r0, #1
   18c18:	bl	115e4 <__printf_chk@plt>
   18c1c:	ldr	ip, [sp, #24]
   18c20:	mov	r2, #5
   18c24:	cmp	ip, #1
   18c28:	movweq	r1, #12660	; 0x3174
   18c2c:	movwne	r1, #12684	; 0x318c
   18c30:	moveq	r0, #0
   18c34:	movne	r0, #0
   18c38:	movteq	r1, #2
   18c3c:	movtne	r1, #2
   18c40:	bl	113e0 <dcgettext@plt>
   18c44:	ldr	r2, [sp, #24]
   18c48:	mov	r1, r0
   18c4c:	mov	r0, #1
   18c50:	bl	115e4 <__printf_chk@plt>
   18c54:	cmp	r4, #1
   18c58:	mov	r2, #5
   18c5c:	movweq	r1, #12708	; 0x31a4
   18c60:	movwne	r1, #12732	; 0x31bc
   18c64:	moveq	r0, #0
   18c68:	movne	r0, #0
   18c6c:	movteq	r1, #2
   18c70:	movtne	r1, #2
   18c74:	bl	113e0 <dcgettext@plt>
   18c78:	mov	r2, r4
   18c7c:	mov	r1, r0
   18c80:	mov	r0, #1
   18c84:	bl	115e4 <__printf_chk@plt>
   18c88:	cmp	r7, #1
   18c8c:	mov	r2, #5
   18c90:	movweq	r1, #12756	; 0x31d4
   18c94:	movwne	r1, #12788	; 0x31f4
   18c98:	moveq	r0, #0
   18c9c:	movne	r0, #0
   18ca0:	movteq	r1, #2
   18ca4:	movtne	r1, #2
   18ca8:	bl	113e0 <dcgettext@plt>
   18cac:	mov	r2, r7
   18cb0:	mov	r1, r0
   18cb4:	mov	r0, #1
   18cb8:	bl	115e4 <__printf_chk@plt>
   18cbc:	movw	r3, #29848	; 0x7498
   18cc0:	movt	r3, #3
   18cc4:	mov	r2, #0
   18cc8:	str	r2, [r3]
   18ccc:	ldr	ip, [sp, #16]
   18cd0:	ldr	r2, [sp, #116]	; 0x74
   18cd4:	ldr	r3, [ip]
   18cd8:	cmp	r2, r3
   18cdc:	bne	19114 <bfd_arch_bits_per_address@plt+0x7a4c>
   18ce0:	add	sp, sp, #124	; 0x7c
   18ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18ce8:	add	r0, sp, #68	; 0x44
   18cec:	movw	r1, #12056	; 0x2f18
   18cf0:	mov	r2, #4
   18cf4:	movt	r1, #2
   18cf8:	bl	116b0 <strncmp@plt>
   18cfc:	cmp	r0, #0
   18d00:	bne	191f0 <bfd_arch_bits_per_address@plt+0x7b28>
   18d04:	movw	r3, #31720	; 0x7be8
   18d08:	movt	r3, #3
   18d0c:	add	r0, sp, #72	; 0x48
   18d10:	movw	r9, #30516	; 0x7734
   18d14:	ldr	r3, [r3]
   18d18:	movt	r9, #3
   18d1c:	ldr	r3, [r3, #4]
   18d20:	ldr	r3, [r3, #40]	; 0x28
   18d24:	blx	r3
   18d28:	cmp	r0, #1
   18d2c:	str	r0, [r9]
   18d30:	bhi	19118 <bfd_arch_bits_per_address@plt+0x7a50>
   18d34:	mov	r7, #0
   18d38:	str	r7, [sp, #24]
   18d3c:	mov	r4, r7
   18d40:	mov	r1, #1
   18d44:	add	r0, sp, #88	; 0x58
   18d48:	mov	r2, r1
   18d4c:	mov	r3, r6
   18d50:	bl	114a0 <fread@plt>
   18d54:	cmp	r0, #1
   18d58:	bne	18bc4 <bfd_arch_bits_per_address@plt+0x74fc>
   18d5c:	ldrb	r2, [sp, #88]	; 0x58
   18d60:	cmp	r2, #1
   18d64:	beq	18e94 <bfd_arch_bits_per_address@plt+0x77cc>
   18d68:	bcc	18e6c <bfd_arch_bits_per_address@plt+0x77a4>
   18d6c:	cmp	r2, #2
   18d70:	beq	18e4c <bfd_arch_bits_per_address@plt+0x7784>
   18d74:	movw	r3, #30432	; 0x76e0
   18d78:	movt	r3, #3
   18d7c:	mov	r5, r0
   18d80:	mov	r2, #5
   18d84:	movw	r1, #12144	; 0x2f70
   18d88:	mov	r0, #0
   18d8c:	movt	r1, #2
   18d90:	ldr	r4, [r3]
   18d94:	bl	113e0 <dcgettext@plt>
   18d98:	ldr	r1, [sp, #20]
   18d9c:	ldrb	ip, [sp, #88]	; 0x58
   18da0:	movw	r3, #31748	; 0x7c04
   18da4:	movt	r3, #3
   18da8:	ldr	r3, [r3]
   18dac:	str	r1, [sp]
   18db0:	mov	r1, r5
   18db4:	str	ip, [sp, #4]
   18db8:	mov	r2, r0
   18dbc:	mov	r0, r4
   18dc0:	bl	115fc <__fprintf_chk@plt>
   18dc4:	mov	r0, r5
   18dc8:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   18dcc:	mov	r0, r6
   18dd0:	add	r1, sp, #48	; 0x30
   18dd4:	bl	1866c <bfd_arch_bits_per_address@plt+0x6fa4>
   18dd8:	cmp	r0, #0
   18ddc:	bne	18bac <bfd_arch_bits_per_address@plt+0x74e4>
   18de0:	bl	184cc <bfd_arch_bits_per_address@plt+0x6e04>
   18de4:	cmp	r0, #0
   18de8:	beq	18eb4 <bfd_arch_bits_per_address@plt+0x77ec>
   18dec:	cmp	r0, #1
   18df0:	bne	18bac <bfd_arch_bits_per_address@plt+0x74e4>
   18df4:	mov	r0, r6
   18df8:	add	r1, sp, #56	; 0x38
   18dfc:	bl	18448 <bfd_arch_bits_per_address@plt+0x6d80>
   18e00:	cmp	r0, #0
   18e04:	bne	18bac <bfd_arch_bits_per_address@plt+0x74e4>
   18e08:	ldr	r3, [r5]
   18e0c:	add	r4, r4, #1
   18e10:	ldr	r7, [sp, #56]	; 0x38
   18e14:	tst	r3, #64	; 0x40
   18e18:	beq	18e38 <bfd_arch_bits_per_address@plt+0x7770>
   18e1c:	movw	r1, #12488	; 0x30c8
   18e20:	ldr	r2, [sp, #40]	; 0x28
   18e24:	ldr	r3, [sp, #48]	; 0x30
   18e28:	movt	r1, #2
   18e2c:	str	r7, [sp]
   18e30:	mov	r0, #1
   18e34:	bl	115e4 <__printf_chk@plt>
   18e38:	ldrd	r0, [sp, #40]	; 0x28
   18e3c:	ldrd	r2, [sp, #48]	; 0x30
   18e40:	str	r7, [sp]
   18e44:	bl	133ac <bfd_arch_bits_per_address@plt+0x1ce4>
   18e48:	b	18b98 <bfd_arch_bits_per_address@plt+0x74d0>
   18e4c:	ldr	r3, [r9, #4]
   18e50:	mov	r0, r6
   18e54:	ldr	r1, [sp, #20]
   18e58:	add	r7, r7, #1
   18e5c:	orr	r3, r3, #4
   18e60:	str	r3, [r9, #4]
   18e64:	bl	12848 <bfd_arch_bits_per_address@plt+0x1180>
   18e68:	b	18d40 <bfd_arch_bits_per_address@plt+0x7678>
   18e6c:	ldr	r3, [r9, #4]
   18e70:	mov	r0, r6
   18e74:	ldr	ip, [sp, #24]
   18e78:	ldr	r1, [sp, #20]
   18e7c:	orr	r3, r3, #1
   18e80:	add	ip, ip, #1
   18e84:	str	r3, [r9, #4]
   18e88:	str	ip, [sp, #24]
   18e8c:	bl	1a830 <bfd_arch_bits_per_address@plt+0x9168>
   18e90:	b	18d40 <bfd_arch_bits_per_address@plt+0x7678>
   18e94:	ldr	r3, [r9, #4]
   18e98:	mov	r0, r6
   18e9c:	ldr	r1, [sp, #20]
   18ea0:	add	r4, r4, #1
   18ea4:	orr	r3, r3, #2
   18ea8:	str	r3, [r9, #4]
   18eac:	bl	134e4 <bfd_arch_bits_per_address@plt+0x1e1c>
   18eb0:	b	18d40 <bfd_arch_bits_per_address@plt+0x7678>
   18eb4:	mov	r0, r6
   18eb8:	add	r1, sp, #56	; 0x38
   18ebc:	bl	185e8 <bfd_arch_bits_per_address@plt+0x6f20>
   18ec0:	cmp	r0, #0
   18ec4:	bne	18bac <bfd_arch_bits_per_address@plt+0x74e4>
   18ec8:	b	18e08 <bfd_arch_bits_per_address@plt+0x7740>
   18ecc:	ldr	lr, [sp, #104]	; 0x68
   18ed0:	movw	r1, #12284	; 0x2ffc
   18ed4:	ldr	r2, [sp, #88]	; 0x58
   18ed8:	movt	r1, #2
   18edc:	ldr	r3, [sp, #96]	; 0x60
   18ee0:	mov	r0, #1
   18ee4:	str	lr, [sp]
   18ee8:	bl	115e4 <__printf_chk@plt>
   18eec:	movw	r1, #12336	; 0x3030
   18ef0:	mov	r2, r5
   18ef4:	movt	r1, #2
   18ef8:	mov	r3, r8
   18efc:	mov	r0, #1
   18f00:	bl	115e4 <__printf_chk@plt>
   18f04:	b	18b00 <bfd_arch_bits_per_address@plt+0x7438>
   18f08:	bl	19704 <bfd_arch_bits_per_address@plt+0x803c>
   18f0c:	subs	r3, r0, #0
   18f10:	strne	r3, [r5]
   18f14:	bne	18bc0 <bfd_arch_bits_per_address@plt+0x74f8>
   18f18:	movw	r3, #30432	; 0x76e0
   18f1c:	movt	r3, #3
   18f20:	mov	r2, #5
   18f24:	movw	r1, #12544	; 0x3100
   18f28:	movt	r1, #2
   18f2c:	mov	r7, #1
   18f30:	ldr	r8, [r3]
   18f34:	str	r7, [r5]
   18f38:	bl	113e0 <dcgettext@plt>
   18f3c:	mov	r1, r7
   18f40:	mov	r2, r0
   18f44:	mov	r0, r8
   18f48:	bl	115fc <__fprintf_chk@plt>
   18f4c:	b	18bc0 <bfd_arch_bits_per_address@plt+0x74f8>
   18f50:	mov	r0, r6
   18f54:	add	r1, sp, #56	; 0x38
   18f58:	bl	185e8 <bfd_arch_bits_per_address@plt+0x6f20>
   18f5c:	cmp	r0, #0
   18f60:	bne	190ac <bfd_arch_bits_per_address@plt+0x79e4>
   18f64:	movw	r3, #31752	; 0x7c08
   18f68:	movt	r3, #3
   18f6c:	ldr	r3, [r3]
   18f70:	cmp	r3, #0
   18f74:	beq	19048 <bfd_arch_bits_per_address@plt+0x7980>
   18f78:	movw	r3, #30568	; 0x7768
   18f7c:	movt	r3, #3
   18f80:	ldr	r2, [sp, #56]	; 0x38
   18f84:	ldr	r3, [r3]
   18f88:	cmp	r2, r3
   18f8c:	bne	190e8 <bfd_arch_bits_per_address@plt+0x7a20>
   18f90:	bl	184cc <bfd_arch_bits_per_address@plt+0x6e04>
   18f94:	cmp	r0, #0
   18f98:	moveq	r4, #32
   18f9c:	beq	18a7c <bfd_arch_bits_per_address@plt+0x73b4>
   18fa0:	cmp	r0, #1
   18fa4:	moveq	r4, #40	; 0x28
   18fa8:	movne	r4, #0
   18fac:	b	18a7c <bfd_arch_bits_per_address@plt+0x73b4>
   18fb0:	movw	r3, #31756	; 0x7c0c
   18fb4:	movt	r3, #3
   18fb8:	mov	r0, #24
   18fbc:	mov	r2, #1
   18fc0:	str	r2, [r3]
   18fc4:	bl	11458 <xmalloc@plt>
   18fc8:	ldrd	r2, [sp, #88]	; 0x58
   18fcc:	lsl	fp, r8, #2
   18fd0:	str	r8, [r0, #16]
   18fd4:	mov	r4, r0
   18fd8:	str	r0, [r7]
   18fdc:	ldrd	r0, [sp, #96]	; 0x60
   18fe0:	strd	r2, [r4]
   18fe4:	subs	r0, r0, r2
   18fe8:	sbc	r1, r1, r3
   18fec:	ldrd	r2, [sp, #96]	; 0x60
   18ff0:	lsrs	r1, r1, #1
   18ff4:	rrx	r0, r0
   18ff8:	strd	r2, [r4, #8]
   18ffc:	movw	r3, #31760	; 0x7c10
   19000:	movt	r3, #3
   19004:	str	r3, [sp, #12]
   19008:	bl	1fd70 <bfd_arch_bits_per_address@plt+0xe6a8>
   1900c:	vmov	s12, r8
   19010:	ldr	r3, [sp, #12]
   19014:	vcvt.f64.s32	d7, s12
   19018:	vmov	d6, r0, r1
   1901c:	mov	r0, fp
   19020:	vdiv.f64	d7, d6, d7
   19024:	vstr	d7, [r3]
   19028:	bl	11458 <xmalloc@plt>
   1902c:	ldr	r3, [r7]
   19030:	mov	r2, fp
   19034:	mov	r1, sl
   19038:	str	r0, [r4, #20]
   1903c:	ldr	r0, [r3, #20]
   19040:	bl	1159c <memset@plt>
   19044:	b	18ae8 <bfd_arch_bits_per_address@plt+0x7420>
   19048:	ldr	r2, [sp, #56]	; 0x38
   1904c:	movw	r3, #30568	; 0x7768
   19050:	movt	r3, #3
   19054:	str	r2, [r3]
   19058:	b	18f90 <bfd_arch_bits_per_address@plt+0x78c8>
   1905c:	movw	r3, #30432	; 0x76e0
   19060:	movt	r3, #3
   19064:	mov	r2, #5
   19068:	movw	r1, #12440	; 0x3098
   1906c:	mov	r0, #0
   19070:	movt	r1, #2
   19074:	ldr	r4, [r3]
   19078:	bl	113e0 <dcgettext@plt>
   1907c:	movw	r3, #31748	; 0x7c04
   19080:	movt	r3, #3
   19084:	sub	r5, r5, #1
   19088:	mov	r1, #1
   1908c:	ldr	r3, [r3]
   19090:	str	r8, [sp, #4]
   19094:	str	r5, [sp]
   19098:	mov	r2, r0
   1909c:	mov	r0, r4
   190a0:	bl	115fc <__fprintf_chk@plt>
   190a4:	mov	r0, #1
   190a8:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   190ac:	movw	r3, #30432	; 0x76e0
   190b0:	movt	r3, #3
   190b4:	movw	r1, #12016	; 0x2ef0
   190b8:	movt	r1, #2
   190bc:	ldr	r4, [r3]
   190c0:	mov	r0, #0
   190c4:	mov	r2, #5
   190c8:	bl	113e0 <dcgettext@plt>
   190cc:	ldr	r3, [sp, #20]
   190d0:	mov	r1, #1
   190d4:	mov	r2, r0
   190d8:	mov	r0, r4
   190dc:	bl	115fc <__fprintf_chk@plt>
   190e0:	mov	r0, #1
   190e4:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   190e8:	movw	r3, #30432	; 0x76e0
   190ec:	movt	r3, #3
   190f0:	movw	r1, #12188	; 0x2f9c
   190f4:	mov	r2, #5
   190f8:	ldr	r4, [r3]
   190fc:	movt	r1, #2
   19100:	b	190c8 <bfd_arch_bits_per_address@plt+0x7a00>
   19104:	ldr	r0, [sp, #20]
   19108:	bl	11428 <perror@plt>
   1910c:	mov	r0, #1
   19110:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   19114:	bl	113ec <__stack_chk_fail@plt>
   19118:	movw	r3, #30432	; 0x76e0
   1911c:	movt	r3, #3
   19120:	mov	r2, #5
   19124:	movw	r1, #12100	; 0x2f44
   19128:	mov	r0, #0
   1912c:	movt	r1, #2
   19130:	ldr	r4, [r3]
   19134:	bl	113e0 <dcgettext@plt>
   19138:	ldr	r1, [sp, #20]
   1913c:	movw	r3, #31748	; 0x7c04
   19140:	ldr	ip, [r9]
   19144:	movt	r3, #3
   19148:	ldr	r3, [r3]
   1914c:	str	r1, [sp]
   19150:	mov	r1, #1
   19154:	str	ip, [sp, #4]
   19158:	mov	r2, r0
   1915c:	mov	r0, r4
   19160:	bl	115fc <__fprintf_chk@plt>
   19164:	mov	r0, #1
   19168:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   1916c:	movw	r3, #30432	; 0x76e0
   19170:	movw	r1, #12384	; 0x3060
   19174:	movt	r3, #3
   19178:	movt	r1, #2
   1917c:	mov	r0, #0
   19180:	mov	r2, #5
   19184:	ldr	r4, [r3]
   19188:	bl	113e0 <dcgettext@plt>
   1918c:	ldr	ip, [sp, #20]
   19190:	movw	r3, #31748	; 0x7c04
   19194:	movt	r3, #3
   19198:	mov	r1, #1
   1919c:	ldr	r3, [r3]
   191a0:	str	ip, [sp]
   191a4:	mov	r2, r0
   191a8:	mov	r0, r4
   191ac:	bl	115fc <__fprintf_chk@plt>
   191b0:	mov	r0, #1
   191b4:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   191b8:	movw	r3, #30432	; 0x76e0
   191bc:	movt	r3, #3
   191c0:	movw	r1, #12244	; 0x2fd4
   191c4:	mov	r0, #0
   191c8:	ldr	r4, [r3]
   191cc:	movt	r1, #2
   191d0:	mov	r2, #5
   191d4:	b	190c8 <bfd_arch_bits_per_address@plt+0x7a00>
   191d8:	movw	r3, #30432	; 0x76e0
   191dc:	movw	r1, #12064	; 0x2f20
   191e0:	movt	r3, #3
   191e4:	mov	r2, #5
   191e8:	movt	r1, #2
   191ec:	b	19184 <bfd_arch_bits_per_address@plt+0x7abc>
   191f0:	movw	r3, #30432	; 0x76e0
   191f4:	movt	r3, #3
   191f8:	mov	r2, #5
   191fc:	movw	r1, #12064	; 0x2f20
   19200:	mov	r0, #0
   19204:	movt	r1, #2
   19208:	ldr	r4, [r3]
   1920c:	bl	113e0 <dcgettext@plt>
   19210:	ldr	ip, [sp, #20]
   19214:	movw	r3, #31748	; 0x7c04
   19218:	movt	r3, #3
   1921c:	mov	r1, r5
   19220:	ldr	r3, [r3]
   19224:	str	ip, [sp]
   19228:	mov	r2, r0
   1922c:	mov	r0, r4
   19230:	bl	115fc <__fprintf_chk@plt>
   19234:	mov	r0, r5
   19238:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   1923c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19240:	sub	sp, sp, #60	; 0x3c
   19244:	movw	r1, #29904	; 0x74d0
   19248:	movt	r1, #3
   1924c:	str	r1, [sp, #12]
   19250:	movw	r1, #12820	; 0x3214
   19254:	ldr	r2, [sp, #12]
   19258:	movt	r1, #2
   1925c:	mov	r8, r0
   19260:	ldr	r3, [r2]
   19264:	str	r3, [sp, #52]	; 0x34
   19268:	bl	1165c <fopen64@plt>
   1926c:	subs	r6, r0, #0
   19270:	beq	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   19274:	movw	r4, #30552	; 0x7758
   19278:	movt	r4, #3
   1927c:	ldr	r3, [r4]
   19280:	cmp	r3, #1
   19284:	bls	19560 <bfd_arch_bits_per_address@plt+0x7e98>
   19288:	sub	r2, r3, #2
   1928c:	cmp	r2, #1
   19290:	bhi	19634 <bfd_arch_bits_per_address@plt+0x7f6c>
   19294:	cmp	r3, #3
   19298:	mov	r7, #0
   1929c:	str	r7, [sp, #40]	; 0x28
   192a0:	str	r7, [sp, #44]	; 0x2c
   192a4:	str	r7, [sp, #48]	; 0x30
   192a8:	beq	192c4 <bfd_arch_bits_per_address@plt+0x7bfc>
   192ac:	bl	19704 <bfd_arch_bits_per_address@plt+0x803c>
   192b0:	movw	r3, #30568	; 0x7768
   192b4:	movt	r3, #3
   192b8:	ldr	r3, [r3]
   192bc:	cmp	r0, r3
   192c0:	beq	195e0 <bfd_arch_bits_per_address@plt+0x7f18>
   192c4:	bl	184cc <bfd_arch_bits_per_address@plt+0x6e04>
   192c8:	cmp	r0, #0
   192cc:	beq	19534 <bfd_arch_bits_per_address@plt+0x7e6c>
   192d0:	cmp	r0, #1
   192d4:	mov	r7, #12
   192d8:	moveq	r9, #40	; 0x28
   192dc:	movne	r9, #0
   192e0:	movw	r5, #31752	; 0x7c08
   192e4:	movt	r5, #3
   192e8:	mov	r0, r6
   192ec:	ldr	r3, [r5]
   192f0:	ldrd	r2, [r3]
   192f4:	bl	187dc <bfd_arch_bits_per_address@plt+0x7114>
   192f8:	cmp	r0, #0
   192fc:	bne	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   19300:	ldr	r3, [r5]
   19304:	mov	r0, r6
   19308:	ldrd	r2, [r3, #8]
   1930c:	bl	187dc <bfd_arch_bits_per_address@plt+0x7114>
   19310:	cmp	r0, #0
   19314:	bne	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   19318:	ldr	r3, [r5]
   1931c:	mov	r0, r6
   19320:	ldr	r1, [r3, #16]
   19324:	add	r1, r9, r1, lsl #1
   19328:	bl	18764 <bfd_arch_bits_per_address@plt+0x709c>
   1932c:	cmp	r0, #0
   19330:	bne	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   19334:	ldr	r3, [r4]
   19338:	cmp	r3, #3
   1933c:	beq	19358 <bfd_arch_bits_per_address@plt+0x7c90>
   19340:	bl	19704 <bfd_arch_bits_per_address@plt+0x803c>
   19344:	movw	r3, #30568	; 0x7768
   19348:	movt	r3, #3
   1934c:	ldr	r3, [r3]
   19350:	cmp	r0, r3
   19354:	beq	1938c <bfd_arch_bits_per_address@plt+0x7cc4>
   19358:	movw	r1, #6265	; 0x1879
   1935c:	mov	r0, r6
   19360:	movt	r1, #5
   19364:	bl	18764 <bfd_arch_bits_per_address@plt+0x709c>
   19368:	cmp	r0, #0
   1936c:	bne	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   19370:	movw	r3, #30568	; 0x7768
   19374:	movt	r3, #3
   19378:	mov	r0, r6
   1937c:	ldr	r1, [r3]
   19380:	bl	18764 <bfd_arch_bits_per_address@plt+0x709c>
   19384:	cmp	r0, #0
   19388:	bne	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   1938c:	cmp	r7, #0
   19390:	bne	19540 <bfd_arch_bits_per_address@plt+0x7e78>
   19394:	ldr	r3, [r5]
   19398:	ldr	r2, [r3, #16]
   1939c:	cmp	r2, #0
   193a0:	movwne	r7, #31720	; 0x7be8
   193a4:	movne	r4, #0
   193a8:	movtne	r7, #3
   193ac:	beq	19400 <bfd_arch_bits_per_address@plt+0x7d38>
   193b0:	ldr	r1, [r3, #20]
   193b4:	add	r2, sp, #36	; 0x24
   193b8:	ldr	r0, [r7]
   193bc:	ldr	r3, [r0, #4]
   193c0:	ldr	r0, [r1, r4, lsl #2]
   193c4:	ldr	r3, [r3, #60]	; 0x3c
   193c8:	asr	r1, r0, #31
   193cc:	blx	r3
   193d0:	add	r0, sp, #36	; 0x24
   193d4:	mov	r1, #2
   193d8:	mov	r2, #1
   193dc:	mov	r3, r6
   193e0:	bl	1144c <fwrite@plt>
   193e4:	cmp	r0, #1
   193e8:	bne	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   193ec:	ldr	r3, [r5]
   193f0:	add	r4, r4, #1
   193f4:	ldr	r2, [r3, #16]
   193f8:	cmp	r2, r4
   193fc:	bhi	193b0 <bfd_arch_bits_per_address@plt+0x7ce8>
   19400:	movw	r3, #31768	; 0x7c18
   19404:	movt	r3, #3
   19408:	str	r3, [sp, #8]
   1940c:	ldr	r9, [r3, #4]
   19410:	ldr	r3, [r3, #8]
   19414:	cmp	r9, r3
   19418:	movwcc	sl, #30536	; 0x7748
   1941c:	movtcc	sl, #3
   19420:	bcs	194f8 <bfd_arch_bits_per_address@plt+0x7e30>
   19424:	ldr	fp, [r9, #256]	; 0x100
   19428:	cmp	fp, #0
   1942c:	beq	194e4 <bfd_arch_bits_per_address@plt+0x7e1c>
   19430:	ldr	r3, [fp]
   19434:	mov	r0, r6
   19438:	ldmib	fp, {r1, r7}
   1943c:	ldrd	r2, [r3]
   19440:	ldrd	r4, [r1]
   19444:	bl	187dc <bfd_arch_bits_per_address@plt+0x7114>
   19448:	cmp	r0, #0
   1944c:	beq	19460 <bfd_arch_bits_per_address@plt+0x7d98>
   19450:	mov	r0, r8
   19454:	bl	11428 <perror@plt>
   19458:	mov	r0, #1
   1945c:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   19460:	mov	r2, r4
   19464:	mov	r3, r5
   19468:	mov	r0, r6
   1946c:	bl	187dc <bfd_arch_bits_per_address@plt+0x7114>
   19470:	subs	r4, r0, #0
   19474:	bne	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   19478:	bl	184cc <bfd_arch_bits_per_address@plt+0x6e04>
   1947c:	cmp	r0, #0
   19480:	beq	1951c <bfd_arch_bits_per_address@plt+0x7e54>
   19484:	cmp	r0, #1
   19488:	bne	194a4 <bfd_arch_bits_per_address@plt+0x7ddc>
   1948c:	mov	r2, r7
   19490:	mov	r3, r4
   19494:	mov	r0, r6
   19498:	bl	18570 <bfd_arch_bits_per_address@plt+0x6ea8>
   1949c:	cmp	r0, #0
   194a0:	bne	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   194a4:	ldr	r3, [sl]
   194a8:	tst	r3, #64	; 0x40
   194ac:	beq	194d8 <bfd_arch_bits_per_address@plt+0x7e10>
   194b0:	ldr	r2, [fp]
   194b4:	movw	r1, #12824	; 0x3218
   194b8:	ldr	r3, [fp, #4]
   194bc:	movt	r1, #2
   194c0:	ldr	lr, [fp, #8]
   194c4:	mov	r0, #1
   194c8:	ldr	r2, [r2]
   194cc:	ldr	r3, [r3]
   194d0:	str	lr, [sp]
   194d4:	bl	115e4 <__printf_chk@plt>
   194d8:	ldr	fp, [fp, #36]	; 0x24
   194dc:	cmp	fp, #0
   194e0:	bne	19430 <bfd_arch_bits_per_address@plt+0x7d68>
   194e4:	ldr	r1, [sp, #8]
   194e8:	add	r9, r9, #264	; 0x108
   194ec:	ldr	r3, [r1, #8]
   194f0:	cmp	r3, r9
   194f4:	bhi	19424 <bfd_arch_bits_per_address@plt+0x7d5c>
   194f8:	mov	r0, r6
   194fc:	bl	11608 <fclose@plt>
   19500:	ldr	r1, [sp, #12]
   19504:	ldr	r2, [sp, #52]	; 0x34
   19508:	ldr	r3, [r1]
   1950c:	cmp	r2, r3
   19510:	bne	19630 <bfd_arch_bits_per_address@plt+0x7f68>
   19514:	add	sp, sp, #60	; 0x3c
   19518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1951c:	mov	r1, r7
   19520:	mov	r0, r6
   19524:	bl	18764 <bfd_arch_bits_per_address@plt+0x709c>
   19528:	cmp	r0, #0
   1952c:	beq	194a4 <bfd_arch_bits_per_address@plt+0x7ddc>
   19530:	b	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   19534:	mov	r7, #12
   19538:	mov	r9, #32
   1953c:	b	192e0 <bfd_arch_bits_per_address@plt+0x7c18>
   19540:	add	r0, sp, #40	; 0x28
   19544:	mov	r1, #1
   19548:	mov	r2, r7
   1954c:	mov	r3, r6
   19550:	bl	1144c <fwrite@plt>
   19554:	cmp	r7, r0
   19558:	beq	19394 <bfd_arch_bits_per_address@plt+0x7ccc>
   1955c:	b	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   19560:	movw	r3, #31720	; 0x7be8
   19564:	movt	r3, #3
   19568:	mov	r0, #1
   1956c:	mov	r1, #0
   19570:	ldr	r3, [r3]
   19574:	movw	r2, #28007	; 0x6d67
   19578:	movt	r2, #28271	; 0x6e6f
   1957c:	str	r2, [sp, #16]
   19580:	add	r2, sp, #20
   19584:	ldr	r3, [r3, #4]
   19588:	ldr	r3, [r3, #48]	; 0x30
   1958c:	blx	r3
   19590:	add	r0, sp, #16
   19594:	mov	r1, #20
   19598:	mov	r2, #1
   1959c:	mov	r3, r6
   195a0:	bl	1144c <fwrite@plt>
   195a4:	cmp	r0, #1
   195a8:	bne	19450 <bfd_arch_bits_per_address@plt+0x7d88>
   195ac:	movw	r4, #30516	; 0x7734
   195b0:	movt	r4, #3
   195b4:	ldr	r3, [r4, #4]
   195b8:	tst	r3, #1
   195bc:	bne	19610 <bfd_arch_bits_per_address@plt+0x7f48>
   195c0:	tst	r3, #2
   195c4:	bne	195fc <bfd_arch_bits_per_address@plt+0x7f34>
   195c8:	tst	r3, #4
   195cc:	beq	19500 <bfd_arch_bits_per_address@plt+0x7e38>
   195d0:	mov	r0, r6
   195d4:	mov	r1, r8
   195d8:	bl	12b48 <bfd_arch_bits_per_address@plt+0x1480>
   195dc:	b	19500 <bfd_arch_bits_per_address@plt+0x7e38>
   195e0:	bl	184cc <bfd_arch_bits_per_address@plt+0x6e04>
   195e4:	cmp	r0, #0
   195e8:	beq	19624 <bfd_arch_bits_per_address@plt+0x7f5c>
   195ec:	cmp	r0, #1
   195f0:	movne	r9, r7
   195f4:	moveq	r9, #20
   195f8:	b	192e0 <bfd_arch_bits_per_address@plt+0x7c18>
   195fc:	mov	r0, r6
   19600:	mov	r1, r8
   19604:	bl	135e8 <bfd_arch_bits_per_address@plt+0x1f20>
   19608:	ldr	r3, [r4, #4]
   1960c:	b	195c8 <bfd_arch_bits_per_address@plt+0x7f00>
   19610:	mov	r0, r6
   19614:	mov	r1, r8
   19618:	bl	197ec <bfd_arch_bits_per_address@plt+0x8124>
   1961c:	ldr	r3, [r4, #4]
   19620:	b	195c0 <bfd_arch_bits_per_address@plt+0x7ef8>
   19624:	mov	r7, r0
   19628:	mov	r9, #12
   1962c:	b	192e0 <bfd_arch_bits_per_address@plt+0x7c18>
   19630:	bl	113ec <__stack_chk_fail@plt>
   19634:	movw	r3, #30432	; 0x76e0
   19638:	movt	r3, #3
   1963c:	mov	r2, #5
   19640:	movw	r1, #12576	; 0x3120
   19644:	mov	r0, #0
   19648:	movt	r1, #2
   1964c:	ldr	r5, [r3]
   19650:	bl	113e0 <dcgettext@plt>
   19654:	ldr	ip, [r4]
   19658:	movw	r3, #31748	; 0x7c04
   1965c:	movt	r3, #3
   19660:	mov	r1, #1
   19664:	ldr	r3, [r3]
   19668:	str	ip, [sp]
   1966c:	mov	r2, r0
   19670:	mov	r0, r5
   19674:	bl	115fc <__fprintf_chk@plt>
   19678:	mov	r0, #1
   1967c:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   19680:	push	{r3, r4, r5, lr}
   19684:	mov	r2, #5
   19688:	mov	r4, r1
   1968c:	mov	r5, r0
   19690:	movw	r1, #12872	; 0x3248
   19694:	mov	r0, #0
   19698:	movt	r1, #2
   1969c:	bl	113e0 <dcgettext@plt>
   196a0:	movw	r3, #31748	; 0x7c04
   196a4:	movt	r3, #3
   196a8:	mov	r1, #1
   196ac:	ldr	r3, [r3]
   196b0:	mov	r2, r0
   196b4:	mov	r0, r5
   196b8:	bl	115fc <__fprintf_chk@plt>
   196bc:	cmp	r4, #0
   196c0:	beq	196cc <bfd_arch_bits_per_address@plt+0x8004>
   196c4:	mov	r0, r4
   196c8:	bl	11530 <exit@plt>
   196cc:	mov	r0, r4
   196d0:	mov	r2, #5
   196d4:	movw	r1, #13640	; 0x3548
   196d8:	movt	r1, #2
   196dc:	bl	113e0 <dcgettext@plt>
   196e0:	movw	r3, #13660	; 0x355c
   196e4:	mov	r1, #1
   196e8:	movt	r3, #2
   196ec:	mov	r2, r0
   196f0:	mov	r0, r5
   196f4:	bl	115fc <__fprintf_chk@plt>
   196f8:	b	196c4 <bfd_arch_bits_per_address@plt+0x7ffc>
   196fc:	push	{r3, lr}
   19700:	bl	11530 <exit@plt>
   19704:	push	{r4, r5, lr}
   19708:	movw	r5, #29904	; 0x74d0
   1970c:	movt	r5, #3
   19710:	sub	sp, sp, #28
   19714:	mov	r4, #0
   19718:	add	r1, sp, #4
   1971c:	ldr	ip, [r5]
   19720:	mov	r2, r4
   19724:	mov	r0, r4
   19728:	mov	r3, #1
   1972c:	str	r4, [sp, #4]
   19730:	str	ip, [sp, #20]
   19734:	str	r3, [sp, #8]
   19738:	str	r4, [sp, #12]
   1973c:	str	r4, [sp, #16]
   19740:	bl	11344 <setitimer@plt>
   19744:	mov	r1, r4
   19748:	mov	r0, r4
   1974c:	add	r2, sp, #4
   19750:	bl	11344 <setitimer@plt>
   19754:	ldr	r1, [sp, #8]
   19758:	cmp	r1, #1
   1975c:	ble	19784 <bfd_arch_bits_per_address@plt+0x80bc>
   19760:	movw	r0, #16960	; 0x4240
   19764:	movt	r0, #15
   19768:	bl	1f7ec <bfd_arch_bits_per_address@plt+0xe124>
   1976c:	ldr	r2, [sp, #20]
   19770:	ldr	r3, [r5]
   19774:	cmp	r2, r3
   19778:	bne	19790 <bfd_arch_bits_per_address@plt+0x80c8>
   1977c:	add	sp, sp, #28
   19780:	pop	{r4, r5, pc}
   19784:	mov	r0, #2
   19788:	bl	11404 <sysconf@plt>
   1978c:	b	1976c <bfd_arch_bits_per_address@plt+0x80a4>
   19790:	bl	113ec <__stack_chk_fail@plt>
   19794:	andeq	r0, r0, r0
   19798:	ldr	r2, [r0]
   1979c:	vldr	d7, [r2, #168]	; 0xa8
   197a0:	ldr	r3, [r1]
   197a4:	vldr	d6, [r3, #168]	; 0xa8
   197a8:	vsub.f64	d7, d6, d7
   197ac:	vcmpe.f64	d7, #0.0
   197b0:	vmrs	APSR_nzcv, fpscr
   197b4:	ble	197c0 <bfd_arch_bits_per_address@plt+0x80f8>
   197b8:	mov	r0, #1
   197bc:	bx	lr
   197c0:	bmi	197e4 <bfd_arch_bits_per_address@plt+0x811c>
   197c4:	ldr	r0, [r3, #32]
   197c8:	ldr	r1, [r2, #32]
   197cc:	cmp	r0, r1
   197d0:	bhi	197b8 <bfd_arch_bits_per_address@plt+0x80f0>
   197d4:	bcc	197e4 <bfd_arch_bits_per_address@plt+0x811c>
   197d8:	ldr	r0, [r2, #16]
   197dc:	ldr	r1, [r3, #16]
   197e0:	b	11350 <strcmp@plt>
   197e4:	mvn	r0, #0
   197e8:	bx	lr
   197ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   197f0:	sub	sp, sp, #28
   197f4:	movw	r3, #29904	; 0x74d0
   197f8:	movt	r3, #3
   197fc:	str	r3, [sp, #8]
   19800:	movw	r9, #31756	; 0x7c0c
   19804:	mov	r5, r0
   19808:	movt	r9, #3
   1980c:	ldr	r0, [sp, #8]
   19810:	ldr	r3, [r9]
   19814:	str	r1, [sp, #12]
   19818:	ldr	r2, [r0]
   1981c:	cmp	r3, #0
   19820:	str	r2, [sp, #20]
   19824:	beq	19960 <bfd_arch_bits_per_address@plt+0x8298>
   19828:	mov	r7, #0
   1982c:	movw	fp, #31752	; 0x7c08
   19830:	movw	r6, #31720	; 0x7be8
   19834:	movt	fp, #3
   19838:	movt	r6, #3
   1983c:	mov	r8, r7
   19840:	movw	r1, #30568	; 0x7768
   19844:	movt	r1, #3
   19848:	str	r1, [sp, #4]
   1984c:	mov	r0, r5
   19850:	mov	r1, #0
   19854:	ldr	r4, [fp]
   19858:	bl	1883c <bfd_arch_bits_per_address@plt+0x7174>
   1985c:	add	sl, r4, r7
   19860:	cmp	r0, #0
   19864:	bne	1997c <bfd_arch_bits_per_address@plt+0x82b4>
   19868:	mov	r0, r5
   1986c:	ldrd	r2, [r4, r7]
   19870:	bl	187dc <bfd_arch_bits_per_address@plt+0x7114>
   19874:	cmp	r0, #0
   19878:	bne	1997c <bfd_arch_bits_per_address@plt+0x82b4>
   1987c:	mov	r0, r5
   19880:	ldrd	r2, [sl, #8]
   19884:	bl	187dc <bfd_arch_bits_per_address@plt+0x7114>
   19888:	cmp	r0, #0
   1988c:	bne	1997c <bfd_arch_bits_per_address@plt+0x82b4>
   19890:	mov	r0, r5
   19894:	ldr	r1, [sl, #16]
   19898:	bl	18764 <bfd_arch_bits_per_address@plt+0x709c>
   1989c:	cmp	r0, #0
   198a0:	bne	1997c <bfd_arch_bits_per_address@plt+0x82b4>
   198a4:	ldr	r3, [sp, #4]
   198a8:	mov	r0, r5
   198ac:	ldr	r1, [r3]
   198b0:	bl	18764 <bfd_arch_bits_per_address@plt+0x709c>
   198b4:	cmp	r0, #0
   198b8:	bne	1997c <bfd_arch_bits_per_address@plt+0x82b4>
   198bc:	movw	r1, #29852	; 0x749c
   198c0:	mov	r0, r5
   198c4:	movt	r1, #3
   198c8:	mov	r2, #15
   198cc:	bl	18894 <bfd_arch_bits_per_address@plt+0x71cc>
   198d0:	cmp	r0, #0
   198d4:	bne	1997c <bfd_arch_bits_per_address@plt+0x82b4>
   198d8:	mov	r0, r5
   198dc:	ldr	r1, [pc, #172]	; 19990 <bfd_arch_bits_per_address@plt+0x82c8>
   198e0:	mov	r2, #1
   198e4:	bl	18894 <bfd_arch_bits_per_address@plt+0x71cc>
   198e8:	cmp	r0, #0
   198ec:	bne	1997c <bfd_arch_bits_per_address@plt+0x82b4>
   198f0:	ldr	r3, [sl, #16]
   198f4:	cmp	r3, #0
   198f8:	movne	r4, r0
   198fc:	beq	1994c <bfd_arch_bits_per_address@plt+0x8284>
   19900:	ldr	r1, [sl, #20]
   19904:	add	r2, sp, #16
   19908:	ldr	r3, [r6]
   1990c:	ldr	r0, [r1, r4, lsl #2]
   19910:	ldr	r3, [r3, #4]
   19914:	asr	r1, r0, #31
   19918:	ldr	ip, [r3, #60]	; 0x3c
   1991c:	blx	ip
   19920:	add	r0, sp, #16
   19924:	mov	r1, #2
   19928:	mov	r2, #1
   1992c:	mov	r3, r5
   19930:	bl	1144c <fwrite@plt>
   19934:	cmp	r0, #1
   19938:	bne	1997c <bfd_arch_bits_per_address@plt+0x82b4>
   1993c:	ldr	r3, [sl, #16]
   19940:	add	r4, r4, #1
   19944:	cmp	r3, r4
   19948:	bhi	19900 <bfd_arch_bits_per_address@plt+0x8238>
   1994c:	ldr	r3, [r9]
   19950:	add	r8, r8, #1
   19954:	add	r7, r7, #24
   19958:	cmp	r3, r8
   1995c:	bhi	1984c <bfd_arch_bits_per_address@plt+0x8184>
   19960:	ldr	r0, [sp, #8]
   19964:	ldr	r2, [sp, #20]
   19968:	ldr	r3, [r0]
   1996c:	cmp	r2, r3
   19970:	bne	1998c <bfd_arch_bits_per_address@plt+0x82c4>
   19974:	add	sp, sp, #28
   19978:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1997c:	ldr	r0, [sp, #12]
   19980:	bl	11428 <perror@plt>
   19984:	mov	r0, #1
   19988:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   1998c:	bl	113ec <__stack_chk_fail@plt>
   19990:	andeq	r7, r3, ip, lsr #9
   19994:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19998:	vpush	{d8-d9}
   1999c:	movw	fp, #31768	; 0x7c18
   199a0:	movt	fp, #3
   199a4:	sub	sp, sp, #132	; 0x84
   199a8:	ldr	ip, [fp, #4]
   199ac:	ldr	r3, [fp, #8]
   199b0:	cmp	ip, r3
   199b4:	bcs	19f20 <bfd_arch_bits_per_address@plt+0x8858>
   199b8:	movw	r7, #31752	; 0x7c08
   199bc:	movt	r7, #3
   199c0:	movw	r5, #31756	; 0x7c0c
   199c4:	movw	sl, #30536	; 0x7748
   199c8:	movt	r5, #3
   199cc:	movt	sl, #3
   199d0:	mov	r8, r7
   199d4:	mov	r7, ip
   199d8:	str	r5, [sp, #120]	; 0x78
   199dc:	movw	r4, #31760	; 0x7c10
   199e0:	ldr	r6, [r5]
   199e4:	movt	r4, #3
   199e8:	movw	r5, #31740	; 0x7bfc
   199ec:	str	r4, [sp, #64]	; 0x40
   199f0:	movt	r5, #3
   199f4:	str	r5, [sp, #40]	; 0x28
   199f8:	cmp	r6, #0
   199fc:	ldrd	r4, [r7]
   19a00:	beq	19a3c <bfd_arch_bits_per_address@plt+0x8374>
   19a04:	ldr	ip, [r8]
   19a08:	mov	r9, #0
   19a0c:	ldrd	r2, [ip]
   19a10:	add	r9, r9, #1
   19a14:	cmp	r5, r3
   19a18:	cmpeq	r4, r2
   19a1c:	bcc	19a30 <bfd_arch_bits_per_address@plt+0x8368>
   19a20:	ldrd	r0, [ip, #8]
   19a24:	cmp	r5, r1
   19a28:	cmpeq	r4, r0
   19a2c:	bcc	19e2c <bfd_arch_bits_per_address@plt+0x8764>
   19a30:	cmp	r9, r6
   19a34:	add	ip, ip, #24
   19a38:	bne	19a0c <bfd_arch_bits_per_address@plt+0x8344>
   19a3c:	lsrs	r5, r5, #1
   19a40:	rrx	r4, r4
   19a44:	strd	r4, [r7, #176]	; 0xb0
   19a48:	ldr	r3, [fp, #8]
   19a4c:	add	r7, r7, #264	; 0x108
   19a50:	cmp	r7, r3
   19a54:	bcc	199f8 <bfd_arch_bits_per_address@plt+0x8330>
   19a58:	cmp	r6, #0
   19a5c:	beq	19e04 <bfd_arch_bits_per_address@plt+0x873c>
   19a60:	mov	r5, #0
   19a64:	movw	ip, #31752	; 0x7c08
   19a68:	str	r5, [sp, #112]	; 0x70
   19a6c:	movt	ip, #3
   19a70:	movw	r4, #30536	; 0x7748
   19a74:	str	ip, [sp, #124]	; 0x7c
   19a78:	movt	r4, #3
   19a7c:	movw	r5, #31760	; 0x7c10
   19a80:	str	r4, [sp, #92]	; 0x5c
   19a84:	movw	ip, #30576	; 0x7770
   19a88:	movt	r5, #3
   19a8c:	movt	ip, #3
   19a90:	mov	r4, #0
   19a94:	str	r5, [sp, #84]	; 0x54
   19a98:	str	ip, [sp, #104]	; 0x68
   19a9c:	str	r4, [sp, #116]	; 0x74
   19aa0:	str	fp, [sp, #108]	; 0x6c
   19aa4:	ldr	r5, [sp, #124]	; 0x7c
   19aa8:	ldr	r4, [sp, #112]	; 0x70
   19aac:	ldr	ip, [sp, #112]	; 0x70
   19ab0:	ldr	r3, [r5]
   19ab4:	add	ip, r3, ip
   19ab8:	str	ip, [sp, #88]	; 0x58
   19abc:	ldrd	r2, [r3, r4]
   19ac0:	ldr	r1, [ip, #16]
   19ac4:	lsrs	r5, r3, #1
   19ac8:	rrx	r4, r2
   19acc:	cmp	r1, #0
   19ad0:	strd	r4, [sp, #96]	; 0x60
   19ad4:	beq	19da8 <bfd_arch_bits_per_address@plt+0x86e0>
   19ad8:	ldr	ip, [sp, #92]	; 0x5c
   19adc:	mov	r4, #1
   19ae0:	mov	r6, r4
   19ae4:	mov	r5, #0
   19ae8:	str	r4, [sp, #72]	; 0x48
   19aec:	ldr	r3, [ip]
   19af0:	str	r5, [sp, #76]	; 0x4c
   19af4:	and	r3, r3, #64	; 0x40
   19af8:	str	r3, [sp, #80]	; 0x50
   19afc:	ldr	ip, [sp, #88]	; 0x58
   19b00:	ldr	r5, [sp, #76]	; 0x4c
   19b04:	ldr	r3, [ip, #20]
   19b08:	ldr	r4, [r3, r5, lsl #2]
   19b0c:	cmp	r4, #0
   19b10:	beq	19d10 <bfd_arch_bits_per_address@plt+0x8648>
   19b14:	vmov	s12, r5
   19b18:	ldr	ip, [sp, #84]	; 0x54
   19b1c:	vldr	d8, [ip]
   19b20:	vcvt.f64.u32	d7, s12
   19b24:	vmul.f64	d6, d7, d8
   19b28:	vmov	r0, r1, d6
   19b2c:	bl	1fe30 <bfd_arch_bits_per_address@plt+0xe768>
   19b30:	vldr	s12, [sp, #72]	; 0x48
   19b34:	vcvt.f64.u32	d7, s12
   19b38:	ldrd	r2, [sp, #96]	; 0x60
   19b3c:	vmov	s13, r4
   19b40:	vcvt.f64.u32	d9, s13
   19b44:	vmul.f64	d6, d8, d7
   19b48:	adds	r2, r2, r0
   19b4c:	adc	r3, r3, r1
   19b50:	vmov	r0, r1, d6
   19b54:	strd	r2, [sp, #56]	; 0x38
   19b58:	bl	1fe30 <bfd_arch_bits_per_address@plt+0xe768>
   19b5c:	ldrd	r2, [sp, #96]	; 0x60
   19b60:	adds	r2, r2, r0
   19b64:	adc	r3, r3, r1
   19b68:	strd	r2, [sp, #48]	; 0x30
   19b6c:	ldr	r3, [sp, #80]	; 0x50
   19b70:	cmp	r3, #0
   19b74:	bne	19d70 <bfd_arch_bits_per_address@plt+0x86a8>
   19b78:	ldr	r4, [sp, #104]	; 0x68
   19b7c:	vldr	d7, [r4]
   19b80:	vadd.f64	d7, d9, d7
   19b84:	ldr	r5, [sp, #108]	; 0x6c
   19b88:	add	fp, r6, r6, lsl #5
   19b8c:	sub	ip, r6, #1
   19b90:	str	r6, [sp, #40]	; 0x28
   19b94:	ldr	r0, [r5]
   19b98:	lsl	fp, fp, #3
   19b9c:	mov	r7, ip
   19ba0:	mov	r6, r5
   19ba4:	str	r0, [sp, #28]
   19ba8:	vstr	d7, [r4]
   19bac:	b	19c18 <bfd_arch_bits_per_address@plt+0x8550>
   19bb0:	bl	1fd70 <bfd_arch_bits_per_address@plt+0xe6a8>
   19bb4:	vmov	d6, r0, r1
   19bb8:	vmul.f64	d8, d9, d6
   19bbc:	ldrd	r4, [r9]
   19bc0:	ldr	r0, [pc, #876]	; 19f34 <bfd_arch_bits_per_address@plt+0x886c>
   19bc4:	ldr	ip, [sp, #84]	; 0x54
   19bc8:	vldr	d7, [ip]
   19bcc:	mov	r2, r4
   19bd0:	mov	r3, r5
   19bd4:	vdiv.f64	d8, d8, d7
   19bd8:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   19bdc:	cmp	r0, #0
   19be0:	beq	19d34 <bfd_arch_bits_per_address@plt+0x866c>
   19be4:	ldr	r2, [r6, #4]
   19be8:	ldr	r4, [sp, #92]	; 0x5c
   19bec:	add	r8, r2, r8
   19bf0:	vldr	d7, [r8, #168]	; 0xa8
   19bf4:	ldr	r5, [r6]
   19bf8:	ldr	r3, [r4]
   19bfc:	str	r5, [sp, #28]
   19c00:	and	r3, r3, #64	; 0x40
   19c04:	str	r3, [sp, #80]	; 0x50
   19c08:	vadd.f64	d8, d7, d8
   19c0c:	vstr	d8, [r8, #168]	; 0xa8
   19c10:	add	fp, fp, #264	; 0x108
   19c14:	str	r7, [sp, #40]	; 0x28
   19c18:	ldr	r0, [sp, #28]
   19c1c:	cmp	r7, r0
   19c20:	bcs	19d04 <bfd_arch_bits_per_address@plt+0x863c>
   19c24:	ldr	sl, [r6, #4]
   19c28:	sub	r8, fp, #264	; 0x108
   19c2c:	ldrd	r0, [sp, #48]	; 0x30
   19c30:	add	r7, r7, #1
   19c34:	add	r9, sl, r8
   19c38:	add	ip, sl, fp
   19c3c:	ldrd	r2, [r9, #176]	; 0xb0
   19c40:	ldrd	r4, [ip, #176]	; 0xb0
   19c44:	cmp	r1, r3
   19c48:	cmpeq	r0, r2
   19c4c:	bcc	19d04 <bfd_arch_bits_per_address@plt+0x863c>
   19c50:	ldrd	r0, [sp, #56]	; 0x38
   19c54:	cmp	r1, r5
   19c58:	cmpeq	r0, r4
   19c5c:	bcs	19c10 <bfd_arch_bits_per_address@plt+0x8548>
   19c60:	ldrd	r0, [sp, #48]	; 0x30
   19c64:	cmp	r1, r5
   19c68:	cmpeq	r0, r4
   19c6c:	strd	r0, [sp, #40]	; 0x28
   19c70:	ldrd	r0, [sp, #56]	; 0x38
   19c74:	strdhi	r4, [sp, #40]	; 0x28
   19c78:	cmp	r1, r3
   19c7c:	cmpeq	r0, r2
   19c80:	strd	r0, [sp, #64]	; 0x40
   19c84:	strdcc	r2, [sp, #64]	; 0x40
   19c88:	ldrd	r2, [sp, #40]	; 0x28
   19c8c:	ldrd	r0, [sp, #64]	; 0x40
   19c90:	subs	r2, r2, r0
   19c94:	sbc	r3, r3, r1
   19c98:	strd	r2, [sp, #40]	; 0x28
   19c9c:	orrs	r1, r2, r3
   19ca0:	beq	19c10 <bfd_arch_bits_per_address@plt+0x8548>
   19ca4:	ldr	r2, [sp, #80]	; 0x50
   19ca8:	ldrd	r0, [sp, #40]	; 0x28
   19cac:	cmp	r2, #0
   19cb0:	beq	19bb0 <bfd_arch_bits_per_address@plt+0x84e8>
   19cb4:	bl	1fd70 <bfd_arch_bits_per_address@plt+0xe6a8>
   19cb8:	ldr	ip, [sp, #84]	; 0x54
   19cbc:	vldr	d7, [ip]
   19cc0:	ldr	lr, [sp, #40]	; 0x28
   19cc4:	ldr	ip, [r9, #16]
   19cc8:	lsl	r3, r4, #1
   19ccc:	ldr	r2, [sl, r8]
   19cd0:	str	lr, [sp, #16]
   19cd4:	str	ip, [sp]
   19cd8:	vmov	d6, r0, r1
   19cdc:	movw	r1, #15240	; 0x3b88
   19ce0:	mov	r0, #1
   19ce4:	movt	r1, #2
   19ce8:	vmul.f64	d8, d9, d6
   19cec:	vdiv.f64	d7, d8, d7
   19cf0:	vstr	d7, [sp, #8]
   19cf4:	bl	115e4 <__printf_chk@plt>
   19cf8:	ldr	r9, [r6, #4]
   19cfc:	add	r9, r9, r8
   19d00:	b	19bbc <bfd_arch_bits_per_address@plt+0x84f4>
   19d04:	ldr	r4, [sp, #88]	; 0x58
   19d08:	ldr	r6, [sp, #40]	; 0x28
   19d0c:	ldr	r1, [r4, #16]
   19d10:	ldr	r5, [sp, #72]	; 0x48
   19d14:	ldr	ip, [sp, #76]	; 0x4c
   19d18:	cmp	r5, r1
   19d1c:	add	r3, r5, #1
   19d20:	add	r2, ip, #1
   19d24:	bcs	19db8 <bfd_arch_bits_per_address@plt+0x86f0>
   19d28:	str	r2, [sp, #76]	; 0x4c
   19d2c:	str	r3, [sp, #72]	; 0x48
   19d30:	b	19afc <bfd_arch_bits_per_address@plt+0x8434>
   19d34:	ldr	ip, [pc, #508]	; 19f38 <bfd_arch_bits_per_address@plt+0x8870>
   19d38:	ldr	r3, [ip, #48]	; 0x30
   19d3c:	cmp	r3, #0
   19d40:	beq	19e10 <bfd_arch_bits_per_address@plt+0x8748>
   19d44:	ldr	r4, [sp, #104]	; 0x68
   19d48:	vldr	d7, [r4]
   19d4c:	vsub.f64	d7, d7, d8
   19d50:	ldr	r5, [sp, #92]	; 0x5c
   19d54:	ldr	ip, [r6]
   19d58:	ldr	r3, [r5]
   19d5c:	str	ip, [sp, #28]
   19d60:	and	r3, r3, #64	; 0x40
   19d64:	str	r3, [sp, #80]	; 0x50
   19d68:	vstr	d7, [r4]
   19d6c:	b	19c10 <bfd_arch_bits_per_address@plt+0x8548>
   19d70:	str	r4, [sp]
   19d74:	mov	r0, #1
   19d78:	ldr	r4, [sp, #56]	; 0x38
   19d7c:	movw	r1, #15172	; 0x3b44
   19d80:	ldr	r5, [sp, #48]	; 0x30
   19d84:	movt	r1, #2
   19d88:	lsl	r2, r4, r0
   19d8c:	lsl	r3, r5, r0
   19d90:	bl	115e4 <__printf_chk@plt>
   19d94:	ldr	ip, [sp, #92]	; 0x5c
   19d98:	ldr	r3, [ip]
   19d9c:	and	r3, r3, #64	; 0x40
   19da0:	str	r3, [sp, #80]	; 0x50
   19da4:	b	19b78 <bfd_arch_bits_per_address@plt+0x84b0>
   19da8:	ldr	r5, [sp, #92]	; 0x5c
   19dac:	ldr	r3, [r5]
   19db0:	and	r3, r3, #64	; 0x40
   19db4:	str	r3, [sp, #80]	; 0x50
   19db8:	ldr	r2, [sp, #80]	; 0x50
   19dbc:	cmp	r2, #0
   19dc0:	beq	19ddc <bfd_arch_bits_per_address@plt+0x8714>
   19dc4:	ldr	r4, [sp, #104]	; 0x68
   19dc8:	movw	r1, #15304	; 0x3bc8
   19dcc:	mov	r0, #1
   19dd0:	movt	r1, #2
   19dd4:	ldrd	r2, [r4]
   19dd8:	bl	115e4 <__printf_chk@plt>
   19ddc:	ldr	r5, [sp, #120]	; 0x78
   19de0:	ldr	ip, [sp, #116]	; 0x74
   19de4:	ldr	r4, [sp, #112]	; 0x70
   19de8:	ldr	r3, [r5]
   19dec:	add	ip, ip, #1
   19df0:	add	r4, r4, #24
   19df4:	str	ip, [sp, #116]	; 0x74
   19df8:	cmp	r3, ip
   19dfc:	str	r4, [sp, #112]	; 0x70
   19e00:	bhi	19aa4 <bfd_arch_bits_per_address@plt+0x83dc>
   19e04:	add	sp, sp, #132	; 0x84
   19e08:	vpop	{d8-d9}
   19e0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19e10:	mov	r2, r4
   19e14:	mov	r3, r5
   19e18:	add	r0, ip, #60	; 0x3c
   19e1c:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   19e20:	cmp	r0, #0
   19e24:	bne	19d44 <bfd_arch_bits_per_address@plt+0x867c>
   19e28:	b	19be4 <bfd_arch_bits_per_address@plt+0x851c>
   19e2c:	ldr	ip, [sp, #40]	; 0x28
   19e30:	lsrs	r5, r5, #1
   19e34:	rrx	r4, r4
   19e38:	mov	r0, r4
   19e3c:	mov	r1, r5
   19e40:	subs	r0, r0, r2
   19e44:	sbc	r1, r1, r3
   19e48:	strd	r0, [sp, #96]	; 0x60
   19e4c:	ldr	r9, [ip]
   19e50:	strd	r4, [r7, #176]	; 0xb0
   19e54:	ldr	ip, [sp, #64]	; 0x40
   19e58:	vldr	d8, [ip]
   19e5c:	bl	1fd70 <bfd_arch_bits_per_address@plt+0xe6a8>
   19e60:	lsr	r9, r9, #1
   19e64:	mov	r3, #0
   19e68:	mov	r2, r9
   19e6c:	strd	r2, [sp, #48]	; 0x30
   19e70:	vmov	d6, r0, r1
   19e74:	vdiv.f64	d6, d6, d8
   19e78:	vmov	r0, r1, d6
   19e7c:	bl	1fe30 <bfd_arch_bits_per_address@plt+0xe768>
   19e80:	ldrd	r2, [sp, #96]	; 0x60
   19e84:	strd	r0, [sp, #56]	; 0x38
   19e88:	ldrd	r0, [sp, #48]	; 0x30
   19e8c:	adds	r0, r0, r2
   19e90:	adc	r1, r1, r3
   19e94:	bl	1fd70 <bfd_arch_bits_per_address@plt+0xe6a8>
   19e98:	vmov	d6, r0, r1
   19e9c:	vdiv.f64	d6, d6, d8
   19ea0:	vmov	r0, r1, d6
   19ea4:	bl	1fe30 <bfd_arch_bits_per_address@plt+0xe768>
   19ea8:	ldrd	r2, [sp, #56]	; 0x38
   19eac:	cmp	r3, r1
   19eb0:	cmpeq	r2, r0
   19eb4:	bcs	19a48 <bfd_arch_bits_per_address@plt+0x8380>
   19eb8:	ldr	r3, [sl]
   19ebc:	tst	r3, #64	; 0x40
   19ec0:	moveq	r2, r4
   19ec4:	moveq	r3, r5
   19ec8:	bne	19ee0 <bfd_arch_bits_per_address@plt+0x8818>
   19ecc:	ldrd	r4, [sp, #48]	; 0x30
   19ed0:	adds	r2, r2, r4
   19ed4:	adc	r3, r3, r5
   19ed8:	strd	r2, [r7, #176]	; 0xb0
   19edc:	b	19a48 <bfd_arch_bits_per_address@plt+0x8380>
   19ee0:	add	r3, r9, r4
   19ee4:	mov	r2, r4
   19ee8:	movw	r1, #15120	; 0x3b10
   19eec:	mov	r0, #1
   19ef0:	movt	r1, #2
   19ef4:	mov	r5, #0
   19ef8:	bl	115e4 <__printf_chk@plt>
   19efc:	ldr	ip, [sp, #40]	; 0x28
   19f00:	ldr	r4, [sp, #120]	; 0x78
   19f04:	ldrd	r2, [r7, #176]	; 0xb0
   19f08:	ldr	r1, [ip]
   19f0c:	ldr	r6, [r4]
   19f10:	lsr	r1, r1, #1
   19f14:	mov	r4, r1
   19f18:	strd	r4, [sp, #48]	; 0x30
   19f1c:	b	19ecc <bfd_arch_bits_per_address@plt+0x8804>
   19f20:	movw	r4, #31756	; 0x7c0c
   19f24:	movt	r4, #3
   19f28:	str	r4, [sp, #120]	; 0x78
   19f2c:	ldr	r6, [r4]
   19f30:	b	19a58 <bfd_arch_bits_per_address@plt+0x8390>
   19f34:	andeq	r7, r3, r4, asr ip
   19f38:	andeq	r7, r3, r4, lsr #24
   19f3c:	movw	r3, #29848	; 0x7498
   19f40:	movt	r3, #3
   19f44:	movw	ip, #29904	; 0x74d0
   19f48:	movt	ip, #3
   19f4c:	ldr	r1, [r3]
   19f50:	ldr	r2, [ip]
   19f54:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19f58:	vpush	{d8-d9}
   19f5c:	cmp	r1, #0
   19f60:	sub	sp, sp, #132	; 0x84
   19f64:	str	ip, [sp, #48]	; 0x30
   19f68:	str	r2, [sp, #124]	; 0x7c
   19f6c:	beq	1a660 <bfd_arch_bits_per_address@plt+0x8f98>
   19f70:	mov	r2, #0
   19f74:	str	r2, [r3]
   19f78:	movw	r7, #30560	; 0x7760
   19f7c:	movt	r7, #3
   19f80:	movw	r8, #30576	; 0x7770
   19f84:	movt	r8, #3
   19f88:	ldr	r0, [r7]
   19f8c:	mov	r2, #0
   19f90:	mov	r3, #0
   19f94:	strd	r2, [r8, #8]
   19f98:	cmp	r0, #0
   19f9c:	beq	1a634 <bfd_arch_bits_per_address@plt+0x8f6c>
   19fa0:	movw	ip, #29036	; 0x716c
   19fa4:	movt	ip, #3
   19fa8:	str	ip, [sp, #52]	; 0x34
   19fac:	ldr	r3, [ip]
   19fb0:	cmp	r3, #0
   19fb4:	bne	1a678 <bfd_arch_bits_per_address@plt+0x8fb0>
   19fb8:	movw	r9, #31768	; 0x7c18
   19fbc:	movt	r9, #3
   19fc0:	ldr	r0, [r9]
   19fc4:	lsl	r0, r0, #2
   19fc8:	bl	11458 <xmalloc@plt>
   19fcc:	ldr	r1, [r9]
   19fd0:	cmp	r1, #0
   19fd4:	str	r0, [sp, #44]	; 0x2c
   19fd8:	beq	19ffc <bfd_arch_bits_per_address@plt+0x8934>
   19fdc:	ldr	ip, [sp, #44]	; 0x2c
   19fe0:	ldr	r2, [r9, #4]
   19fe4:	add	r0, ip, r1, lsl #2
   19fe8:	mov	r3, ip
   19fec:	str	r2, [r3], #4
   19ff0:	cmp	r3, r0
   19ff4:	add	r2, r2, #264	; 0x108
   19ff8:	bne	19fec <bfd_arch_bits_per_address@plt+0x8924>
   19ffc:	movw	r3, #38808	; 0x9798
   1a000:	ldr	r0, [sp, #44]	; 0x2c
   1a004:	movt	r3, #1
   1a008:	mov	r2, #4
   1a00c:	bl	11674 <qsort@plt>
   1a010:	ldr	sl, [r7]
   1a014:	cmp	sl, #0
   1a018:	movne	ip, #5
   1a01c:	strne	ip, [sp, #36]	; 0x24
   1a020:	bne	1a100 <bfd_arch_bits_per_address@plt+0x8a38>
   1a024:	ldr	r0, [r9]
   1a028:	cmp	r0, #0
   1a02c:	beq	1a6b8 <bfd_arch_bits_per_address@plt+0x8ff0>
   1a030:	ldr	ip, [sp, #44]	; 0x2c
   1a034:	vldr	d4, [pc, #780]	; 1a348 <bfd_arch_bits_per_address@plt+0x8c80>
   1a038:	add	r0, ip, r0, lsl #2
   1a03c:	mov	r2, ip
   1a040:	ldr	r3, [r2], #4
   1a044:	ldr	r1, [r3, #32]
   1a048:	cmp	r1, #0
   1a04c:	beq	1a078 <bfd_arch_bits_per_address@plt+0x89b0>
   1a050:	vldr	d6, [r3, #168]	; 0xa8
   1a054:	vldr	d7, [r3, #192]	; 0xc0
   1a058:	vadd.f64	d7, d6, d7
   1a05c:	vmov	s7, r1
   1a060:	vcvt.f64.u32	d5, s7
   1a064:	vdiv.f64	d7, d7, d5
   1a068:	vcmpe.f64	d7, d4
   1a06c:	vmrs	APSR_nzcv, fpscr
   1a070:	vmovgt.f64	d4, d7
   1a074:	movgt	sl, r3
   1a078:	cmp	r2, r0
   1a07c:	bne	1a040 <bfd_arch_bits_per_address@plt+0x8978>
   1a080:	cmp	sl, #0
   1a084:	beq	1a670 <bfd_arch_bits_per_address@plt+0x8fa8>
   1a088:	ldr	sl, [sl, #32]
   1a08c:	cmp	sl, #0
   1a090:	beq	1a670 <bfd_arch_bits_per_address@plt+0x8fa8>
   1a094:	vcmpe.f64	d4, #0.0
   1a098:	vmrs	APSR_nzcv, fpscr
   1a09c:	ble	1a6ac <bfd_arch_bits_per_address@plt+0x8fe4>
   1a0a0:	movw	r2, #30568	; 0x7768
   1a0a4:	movt	r2, #3
   1a0a8:	vldr	s14, [r2]
   1a0ac:	vcvt.f64.s32	d7, s14
   1a0b0:	ldr	r3, [pc, #680]	; 1a360 <bfd_arch_bits_per_address@plt+0x8c98>
   1a0b4:	mov	ip, #0
   1a0b8:	mov	r2, ip
   1a0bc:	str	ip, [sp, #36]	; 0x24
   1a0c0:	vldr	d5, [pc, #648]	; 1a350 <bfd_arch_bits_per_address@plt+0x8c88>
   1a0c4:	vdiv.f64	d4, d4, d7
   1a0c8:	vmov.f64	d6, #112	; 0x3f800000  1.0
   1a0cc:	vldr	d7, [r3]
   1a0d0:	vmul.f64	d7, d4, d7
   1a0d4:	vcmpe.f64	d7, d6
   1a0d8:	vmrs	APSR_nzcv, fpscr
   1a0dc:	blt	1a0ec <bfd_arch_bits_per_address@plt+0x8a24>
   1a0e0:	vcmpe.f64	d7, d5
   1a0e4:	vmrs	APSR_nzcv, fpscr
   1a0e8:	bmi	1a0fc <bfd_arch_bits_per_address@plt+0x8a34>
   1a0ec:	add	r2, r2, #1
   1a0f0:	add	r3, r3, #16
   1a0f4:	cmp	r2, #11
   1a0f8:	bne	1a0cc <bfd_arch_bits_per_address@plt+0x8a04>
   1a0fc:	str	r2, [sp, #36]	; 0x24
   1a100:	ldr	r3, [sp, #36]	; 0x24
   1a104:	movw	ip, #14944	; 0x3a60
   1a108:	movt	ip, #2
   1a10c:	mov	r2, #5
   1a110:	movw	r1, #15372	; 0x3c0c
   1a114:	mov	r0, #0
   1a118:	movt	r1, #2
   1a11c:	ldrb	r6, [ip, r3, lsl #4]
   1a120:	str	ip, [sp, #28]
   1a124:	bl	113e0 <dcgettext@plt>
   1a128:	movw	r4, #29852	; 0x749c
   1a12c:	movt	r4, #3
   1a130:	add	r5, sp, #60	; 0x3c
   1a134:	mov	r1, #1
   1a138:	ldrb	r2, [r4, #16]
   1a13c:	str	r6, [sp]
   1a140:	str	r2, [sp, #4]
   1a144:	mov	r2, #64	; 0x40
   1a148:	mov	r3, r0
   1a14c:	mov	r0, r5
   1a150:	bl	11590 <__sprintf_chk@plt>
   1a154:	ldr	r0, [r7]
   1a158:	cmp	r0, #0
   1a15c:	beq	1a5a0 <bfd_arch_bits_per_address@plt+0x8ed8>
   1a160:	mov	r2, #5
   1a164:	movw	r1, #10556	; 0x293c
   1a168:	mov	r0, #0
   1a16c:	movt	r1, #2
   1a170:	bl	113e0 <dcgettext@plt>
   1a174:	movw	r3, #31760	; 0x7c10
   1a178:	movt	r3, #3
   1a17c:	vldr	d7, [r3]
   1a180:	vcvt.s32.f64	s7, d7
   1a184:	movw	r6, #30576	; 0x7770
   1a188:	movt	r6, #3
   1a18c:	vmov	r2, s7
   1a190:	mov	r1, r0
   1a194:	mov	r0, #1
   1a198:	lsl	r2, r2, r0
   1a19c:	bl	115e4 <__printf_chk@plt>
   1a1a0:	vldr	d8, [r8]
   1a1a4:	vcmpe.f64	d8, #0.0
   1a1a8:	vmrs	APSR_nzcv, fpscr
   1a1ac:	vmovle.f64	d7, d8
   1a1b0:	ble	1a200 <bfd_arch_bits_per_address@plt+0x8b38>
   1a1b4:	mov	r2, #5
   1a1b8:	movw	r1, #15384	; 0x3c18
   1a1bc:	mov	r0, #0
   1a1c0:	movt	r1, #2
   1a1c4:	bl	113e0 <dcgettext@plt>
   1a1c8:	str	r4, [sp, #8]
   1a1cc:	movw	r3, #30568	; 0x7768
   1a1d0:	movt	r3, #3
   1a1d4:	vldr	s14, [r3]
   1a1d8:	vcvt.f64.s32	d7, s14
   1a1dc:	vldr	d6, [pc, #372]	; 1a358 <bfd_arch_bits_per_address@plt+0x8c90>
   1a1e0:	vdiv.f64	d5, d6, d8
   1a1e4:	mov	r1, r0
   1a1e8:	mov	r0, #1
   1a1ec:	vdiv.f64	d8, d8, d7
   1a1f0:	vmov	r2, r3, d5
   1a1f4:	vstr	d8, [sp]
   1a1f8:	bl	115e4 <__printf_chk@plt>
   1a1fc:	vldr	d7, [r6]
   1a200:	vcmpe.f64	d7, #0.0
   1a204:	vmrs	APSR_nzcv, fpscr
   1a208:	bls	1a5ec <bfd_arch_bits_per_address@plt+0x8f24>
   1a20c:	mov	r2, #5
   1a210:	movw	r1, #15468	; 0x3c6c
   1a214:	mov	r0, #0
   1a218:	movt	r1, #2
   1a21c:	bl	113e0 <dcgettext@plt>
   1a220:	mov	r2, #5
   1a224:	movw	r1, #15480	; 0x3c78
   1a228:	movt	r1, #2
   1a22c:	mov	fp, r0
   1a230:	mov	r0, #0
   1a234:	bl	113e0 <dcgettext@plt>
   1a238:	mov	r2, #5
   1a23c:	movw	r1, #15480	; 0x3c78
   1a240:	movt	r1, #2
   1a244:	mov	r3, r0
   1a248:	mov	r0, #0
   1a24c:	str	r3, [sp, #24]
   1a250:	bl	113e0 <dcgettext@plt>
   1a254:	mov	r2, #5
   1a258:	movw	r1, #15488	; 0x3c80
   1a25c:	movt	r1, #2
   1a260:	mov	r6, r0
   1a264:	mov	r0, #0
   1a268:	bl	113e0 <dcgettext@plt>
   1a26c:	ldr	r3, [sp, #24]
   1a270:	str	r6, [sp, #8]
   1a274:	movw	ip, #11092	; 0x2b54
   1a278:	movw	r1, #15496	; 0x3c88
   1a27c:	movt	ip, #2
   1a280:	str	r3, [sp]
   1a284:	movt	r1, #2
   1a288:	mov	r3, fp
   1a28c:	str	ip, [sp, #4]
   1a290:	str	ip, [sp, #16]
   1a294:	movw	r2, #15544	; 0x3cb8
   1a298:	movt	r2, #2
   1a29c:	str	ip, [sp, #40]	; 0x28
   1a2a0:	str	r0, [sp, #12]
   1a2a4:	mov	r0, #1
   1a2a8:	bl	115e4 <__printf_chk@plt>
   1a2ac:	mov	r2, #5
   1a2b0:	movw	r1, #14768	; 0x39b0
   1a2b4:	mov	r0, #0
   1a2b8:	movt	r1, #2
   1a2bc:	bl	113e0 <dcgettext@plt>
   1a2c0:	mov	r2, #5
   1a2c4:	movw	r1, #15548	; 0x3cbc
   1a2c8:	movt	r1, #2
   1a2cc:	mov	r6, r0
   1a2d0:	mov	r0, #0
   1a2d4:	bl	113e0 <dcgettext@plt>
   1a2d8:	mov	r2, #5
   1a2dc:	movw	r1, #10776	; 0x2a18
   1a2e0:	movt	r1, #2
   1a2e4:	mov	fp, r0
   1a2e8:	mov	r0, #0
   1a2ec:	bl	113e0 <dcgettext@plt>
   1a2f0:	str	fp, [sp, #4]
   1a2f4:	mov	r2, r6
   1a2f8:	str	r4, [sp]
   1a2fc:	str	r5, [sp, #8]
   1a300:	movw	r1, #15556	; 0x3cc4
   1a304:	str	r5, [sp, #12]
   1a308:	movt	r1, #2
   1a30c:	movw	r3, #29852	; 0x749c
   1a310:	movt	r3, #3
   1a314:	str	r0, [sp, #16]
   1a318:	mov	r0, #1
   1a31c:	bl	115e4 <__printf_chk@plt>
   1a320:	ldr	r3, [r9]
   1a324:	cmp	r3, #0
   1a328:	beq	1a55c <bfd_arch_bits_per_address@plt+0x8e94>
   1a32c:	movw	ip, #29044	; 0x7174
   1a330:	ldr	r6, [sp, #44]	; 0x2c
   1a334:	movt	ip, #3
   1a338:	mov	r5, #0
   1a33c:	str	ip, [sp, #32]
   1a340:	vldr	d9, [pc, #16]	; 1a358 <bfd_arch_bits_per_address@plt+0x8c90>
   1a344:	b	1a474 <bfd_arch_bits_per_address@plt+0x8dac>
	...
   1a354:	addmi	r4, pc, r0
   1a358:	andeq	r0, r0, r0
   1a35c:	subsmi	r0, r9, r0
   1a360:	andeq	r3, r2, r8, ror #20
   1a364:	ldr	r3, [r4, #32]
   1a368:	vldr	d7, [r4, #168]	; 0xa8
   1a36c:	cmp	r3, #0
   1a370:	bne	1a380 <bfd_arch_bits_per_address@plt+0x8cb8>
   1a374:	vcmp.f64	d7, #0.0
   1a378:	vmrs	APSR_nzcv, fpscr
   1a37c:	beq	1a464 <bfd_arch_bits_per_address@plt+0x8d9c>
   1a380:	vldr	d6, [r8, #8]
   1a384:	vadd.f64	d6, d7, d6
   1a388:	ldr	r2, [r7]
   1a38c:	movw	r3, #30576	; 0x7770
   1a390:	movt	r3, #3
   1a394:	vldr	d5, [r3]
   1a398:	cmp	r2, #0
   1a39c:	vstr	d6, [r8, #8]
   1a3a0:	vcmpe.f64	d5, #0.0
   1a3a4:	beq	1a4f0 <bfd_arch_bits_per_address@plt+0x8e28>
   1a3a8:	vmrs	APSR_nzcv, fpscr
   1a3ac:	movw	sl, #30568	; 0x7768
   1a3b0:	vldrle	d5, [pc, #784]	; 1a6c8 <bfd_arch_bits_per_address@plt+0x9000>
   1a3b4:	movt	sl, #3
   1a3b8:	vmulgt.f64	d4, d7, d9
   1a3bc:	vldr	s7, [sl]
   1a3c0:	movw	r1, #15604	; 0x3cf4
   1a3c4:	movt	r1, #2
   1a3c8:	mov	r0, #1
   1a3cc:	vdivgt.f64	d5, d4, d5
   1a3d0:	vmov	r2, r3, d5
   1a3d4:	vcvt.f64.s32	d5, s7
   1a3d8:	vdiv.f64	d6, d6, d5
   1a3dc:	vdiv.f64	d7, d7, d5
   1a3e0:	vstr	d6, [sp]
   1a3e4:	vstr	d7, [sp, #8]
   1a3e8:	bl	115e4 <__printf_chk@plt>
   1a3ec:	ldr	r3, [r4, #32]
   1a3f0:	cmp	r3, #0
   1a3f4:	beq	1a4c8 <bfd_arch_bits_per_address@plt+0x8e00>
   1a3f8:	vldr	d4, [r4, #168]	; 0xa8
   1a3fc:	vmul.f64	d5, d8, d4
   1a400:	vldr	s12, [sl]
   1a404:	vmov	s7, r3
   1a408:	movw	r1, #15644	; 0x3d1c
   1a40c:	mov	r2, r3
   1a410:	movt	r1, #2
   1a414:	mov	r0, #1
   1a418:	vcvt.f64.s32	d6, s12
   1a41c:	vdiv.f64	d5, d5, d6
   1a420:	vcvt.f64.u32	d7, s7
   1a424:	vdiv.f64	d5, d5, d7
   1a428:	vstr	d5, [sp]
   1a42c:	vldr	d5, [r4, #192]	; 0xc0
   1a430:	vadd.f64	d5, d4, d5
   1a434:	vmul.f64	d8, d8, d5
   1a438:	vdiv.f64	d6, d8, d6
   1a43c:	vdiv.f64	d7, d6, d7
   1a440:	vstr	d7, [sp, #8]
   1a444:	bl	115e4 <__printf_chk@plt>
   1a448:	ldr	r3, [r7]
   1a44c:	mov	r0, r4
   1a450:	cmp	r3, #0
   1a454:	beq	1a4c0 <bfd_arch_bits_per_address@plt+0x8df8>
   1a458:	bl	1c4b8 <bfd_arch_bits_per_address@plt+0xadf0>
   1a45c:	mov	r0, #10
   1a460:	bl	115b4 <putchar@plt>
   1a464:	ldr	r3, [r9]
   1a468:	add	r5, r5, #1
   1a46c:	cmp	r3, r5
   1a470:	bls	1a55c <bfd_arch_bits_per_address@plt+0x8e94>
   1a474:	ldr	r3, [r6], #4
   1a478:	ldr	r0, [pc, #592]	; 1a6d0 <bfd_arch_bits_per_address@plt+0x9008>
   1a47c:	ldrd	sl, [r3]
   1a480:	mov	r2, sl
   1a484:	mov	r3, fp
   1a488:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   1a48c:	cmp	r0, #0
   1a490:	beq	1a524 <bfd_arch_bits_per_address@plt+0x8e5c>
   1a494:	ldr	ip, [sp, #32]
   1a498:	ldr	r0, [sp, #36]	; 0x24
   1a49c:	ldr	r4, [r6, #-4]
   1a4a0:	ldr	r3, [ip]
   1a4a4:	ldr	ip, [sp, #28]
   1a4a8:	cmp	r3, #0
   1a4ac:	add	r2, ip, r0, lsl #4
   1a4b0:	vldr	d8, [r2, #8]
   1a4b4:	bne	1a364 <bfd_arch_bits_per_address@plt+0x8c9c>
   1a4b8:	vldr	d7, [r4, #168]	; 0xa8
   1a4bc:	b	1a380 <bfd_arch_bits_per_address@plt+0x8cb8>
   1a4c0:	bl	1c298 <bfd_arch_bits_per_address@plt+0xabd0>
   1a4c4:	b	1a45c <bfd_arch_bits_per_address@plt+0x8d94>
   1a4c8:	ldr	ip, [sp, #40]	; 0x28
   1a4cc:	movw	r2, #11092	; 0x2b54
   1a4d0:	movt	r2, #2
   1a4d4:	movw	r1, #15664	; 0x3d30
   1a4d8:	mov	r0, #1
   1a4dc:	movt	r1, #2
   1a4e0:	str	ip, [sp]
   1a4e4:	mov	r3, r2
   1a4e8:	bl	115e4 <__printf_chk@plt>
   1a4ec:	b	1a448 <bfd_arch_bits_per_address@plt+0x8d80>
   1a4f0:	vmrs	APSR_nzcv, fpscr
   1a4f4:	vmulgt.f64	d4, d7, d9
   1a4f8:	vldrle	d5, [pc, #456]	; 1a6c8 <bfd_arch_bits_per_address@plt+0x9000>
   1a4fc:	movw	sl, #30568	; 0x7768
   1a500:	movw	r1, #15624	; 0x3d08
   1a504:	movt	sl, #3
   1a508:	mov	r0, #1
   1a50c:	movt	r1, #2
   1a510:	vdivgt.f64	d5, d4, d5
   1a514:	vldr	s9, [sl]
   1a518:	vmov	r2, r3, d5
   1a51c:	vcvt.f64.s32	d5, s9
   1a520:	b	1a3d8 <bfd_arch_bits_per_address@plt+0x8d10>
   1a524:	ldr	r1, [pc, #424]	; 1a6d4 <bfd_arch_bits_per_address@plt+0x900c>
   1a528:	ldr	r3, [r1, #48]	; 0x30
   1a52c:	cmp	r3, #0
   1a530:	bne	1a464 <bfd_arch_bits_per_address@plt+0x8d9c>
   1a534:	mov	r2, sl
   1a538:	mov	r3, fp
   1a53c:	add	r0, r1, #60	; 0x3c
   1a540:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   1a544:	cmp	r0, #0
   1a548:	beq	1a494 <bfd_arch_bits_per_address@plt+0x8dcc>
   1a54c:	ldr	r3, [r9]
   1a550:	add	r5, r5, #1
   1a554:	cmp	r3, r5
   1a558:	bhi	1a474 <bfd_arch_bits_per_address@plt+0x8dac>
   1a55c:	ldr	r0, [sp, #44]	; 0x2c
   1a560:	bl	11374 <free@plt>
   1a564:	ldr	ip, [sp, #52]	; 0x34
   1a568:	ldr	r3, [ip]
   1a56c:	cmp	r3, #0
   1a570:	beq	1a580 <bfd_arch_bits_per_address@plt+0x8eb8>
   1a574:	ldr	r3, [r7]
   1a578:	cmp	r3, #0
   1a57c:	beq	1a620 <bfd_arch_bits_per_address@plt+0x8f58>
   1a580:	ldr	ip, [sp, #48]	; 0x30
   1a584:	ldr	r2, [sp, #124]	; 0x7c
   1a588:	ldr	r3, [ip]
   1a58c:	cmp	r2, r3
   1a590:	bne	1a6c0 <bfd_arch_bits_per_address@plt+0x8ff8>
   1a594:	add	sp, sp, #132	; 0x84
   1a598:	vpop	{d8-d9}
   1a59c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a5a0:	mov	r2, #5
   1a5a4:	movw	r1, #15412	; 0x3c34
   1a5a8:	movt	r1, #2
   1a5ac:	bl	113e0 <dcgettext@plt>
   1a5b0:	vmov.f64	d6, #112	; 0x3f800000  1.0
   1a5b4:	movw	r3, #30568	; 0x7768
   1a5b8:	movt	r3, #3
   1a5bc:	vldr	s14, [r3]
   1a5c0:	str	r4, [sp]
   1a5c4:	vcvt.f64.s32	d7, s14
   1a5c8:	vdiv.f64	d5, d6, d7
   1a5cc:	mov	r1, r0
   1a5d0:	mov	r0, #1
   1a5d4:	vmov	r2, r3, d5
   1a5d8:	bl	115e4 <__printf_chk@plt>
   1a5dc:	vldr	d7, [r8]
   1a5e0:	vcmpe.f64	d7, #0.0
   1a5e4:	vmrs	APSR_nzcv, fpscr
   1a5e8:	bhi	1a20c <bfd_arch_bits_per_address@plt+0x8b44>
   1a5ec:	mov	r2, #5
   1a5f0:	movw	r1, #15444	; 0x3c54
   1a5f4:	mov	r0, #0
   1a5f8:	movt	r1, #2
   1a5fc:	bl	113e0 <dcgettext@plt>
   1a600:	mov	r1, r0
   1a604:	mov	r0, #1
   1a608:	bl	115e4 <__printf_chk@plt>
   1a60c:	mov	r2, #0
   1a610:	mov	r3, #0
   1a614:	movt	r3, #16368	; 0x3ff0
   1a618:	strd	r2, [r8]
   1a61c:	b	1a20c <bfd_arch_bits_per_address@plt+0x8b44>
   1a620:	movw	r3, #30440	; 0x76e8
   1a624:	movt	r3, #3
   1a628:	ldr	r0, [r3]
   1a62c:	bl	1de30 <bfd_arch_bits_per_address@plt+0xc768>
   1a630:	b	1a580 <bfd_arch_bits_per_address@plt+0x8eb8>
   1a634:	mov	r2, #5
   1a638:	movw	r1, #15356	; 0x3bfc
   1a63c:	movt	r1, #2
   1a640:	bl	113e0 <dcgettext@plt>
   1a644:	mov	r1, r0
   1a648:	mov	r0, #1
   1a64c:	bl	115e4 <__printf_chk@plt>
   1a650:	movw	ip, #29036	; 0x716c
   1a654:	movt	ip, #3
   1a658:	str	ip, [sp, #52]	; 0x34
   1a65c:	b	19fb8 <bfd_arch_bits_per_address@plt+0x88f0>
   1a660:	movw	r0, #8604	; 0x219c
   1a664:	movt	r0, #2
   1a668:	bl	114e8 <puts@plt>
   1a66c:	b	19f78 <bfd_arch_bits_per_address@plt+0x88b0>
   1a670:	str	sl, [sp, #36]	; 0x24
   1a674:	b	1a100 <bfd_arch_bits_per_address@plt+0x8a38>
   1a678:	mov	r2, #5
   1a67c:	movw	r1, #15336	; 0x3be8
   1a680:	mov	r0, #0
   1a684:	movt	r1, #2
   1a688:	bl	113e0 <dcgettext@plt>
   1a68c:	mov	r1, r0
   1a690:	mov	r0, #1
   1a694:	bl	115e4 <__printf_chk@plt>
   1a698:	movw	r3, #30440	; 0x76e8
   1a69c:	movt	r3, #3
   1a6a0:	ldr	r0, [r3]
   1a6a4:	bl	1de30 <bfd_arch_bits_per_address@plt+0xc768>
   1a6a8:	b	19fb8 <bfd_arch_bits_per_address@plt+0x88f0>
   1a6ac:	mov	ip, #0
   1a6b0:	str	ip, [sp, #36]	; 0x24
   1a6b4:	b	1a100 <bfd_arch_bits_per_address@plt+0x8a38>
   1a6b8:	str	r0, [sp, #36]	; 0x24
   1a6bc:	b	1a100 <bfd_arch_bits_per_address@plt+0x8a38>
   1a6c0:	bl	113ec <__stack_chk_fail@plt>
   1a6c4:	nop	{0}
	...
   1a6d0:	andeq	r7, r3, r4, asr ip
   1a6d4:	andeq	r7, r3, r4, lsr #24
   1a6d8:	movw	r3, #31756	; 0x7c0c
   1a6dc:	movt	r3, #3
   1a6e0:	push	{r4, r5}
   1a6e4:	ldr	r5, [r3]
   1a6e8:	cmp	r5, #0
   1a6ec:	beq	1a734 <bfd_arch_bits_per_address@plt+0x906c>
   1a6f0:	movw	r3, #31752	; 0x7c08
   1a6f4:	movt	r3, #3
   1a6f8:	mov	r1, #0
   1a6fc:	mov	r4, #0
   1a700:	ldr	ip, [r3]
   1a704:	ldrd	r2, [ip]
   1a708:	add	r4, r4, #1
   1a70c:	cmp	r3, r1
   1a710:	cmpeq	r2, r0
   1a714:	bhi	1a728 <bfd_arch_bits_per_address@plt+0x9060>
   1a718:	ldrd	r2, [ip, #8]
   1a71c:	cmp	r3, r1
   1a720:	cmpeq	r2, r0
   1a724:	bhi	1a740 <bfd_arch_bits_per_address@plt+0x9078>
   1a728:	cmp	r4, r5
   1a72c:	add	ip, ip, #24
   1a730:	bne	1a704 <bfd_arch_bits_per_address@plt+0x903c>
   1a734:	mov	r0, #0
   1a738:	pop	{r4, r5}
   1a73c:	bx	lr
   1a740:	mov	r0, #1
   1a744:	pop	{r4, r5}
   1a748:	bx	lr
   1a74c:	movw	r3, #31756	; 0x7c0c
   1a750:	movt	r3, #3
   1a754:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a758:	ldr	r9, [r3]
   1a75c:	cmp	r9, #0
   1a760:	beq	1a7e0 <bfd_arch_bits_per_address@plt+0x9118>
   1a764:	movw	r3, #31752	; 0x7c08
   1a768:	movt	r3, #3
   1a76c:	mov	sl, #0
   1a770:	ldr	ip, [r3]
   1a774:	mov	r8, sl
   1a778:	ldrd	r2, [r0]
   1a77c:	ldrd	r4, [ip]
   1a780:	ldrd	r6, [r1]
   1a784:	cmp	r5, r3
   1a788:	cmpeq	r4, r2
   1a78c:	movcc	r4, r2
   1a790:	movcc	r5, r3
   1a794:	ldrd	r2, [ip, #8]
   1a798:	cmp	r3, r7
   1a79c:	cmpeq	r2, r6
   1a7a0:	movhi	r2, r6
   1a7a4:	movhi	r3, r7
   1a7a8:	cmp	r5, r3
   1a7ac:	cmpeq	r4, r2
   1a7b0:	bcs	1a7c8 <bfd_arch_bits_per_address@plt+0x9100>
   1a7b4:	cmp	sl, #0
   1a7b8:	bne	1a7ec <bfd_arch_bits_per_address@plt+0x9124>
   1a7bc:	mov	sl, #1
   1a7c0:	strd	r4, [r0]
   1a7c4:	strd	r2, [r1]
   1a7c8:	add	r8, r8, #1
   1a7cc:	add	ip, ip, #24
   1a7d0:	cmp	r8, r9
   1a7d4:	bne	1a778 <bfd_arch_bits_per_address@plt+0x90b0>
   1a7d8:	cmp	sl, #0
   1a7dc:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7e0:	ldrd	r2, [r0]
   1a7e4:	strd	r2, [r1]
   1a7e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a7ec:	movw	r3, #30432	; 0x76e0
   1a7f0:	movt	r3, #3
   1a7f4:	mov	r2, #5
   1a7f8:	movw	r1, #15688	; 0x3d48
   1a7fc:	mov	r0, #0
   1a800:	movt	r1, #2
   1a804:	ldr	r4, [r3]
   1a808:	bl	113e0 <dcgettext@plt>
   1a80c:	movw	r3, #31748	; 0x7c04
   1a810:	movt	r3, #3
   1a814:	mov	r1, #1
   1a818:	ldr	r3, [r3]
   1a81c:	mov	r2, r0
   1a820:	mov	r0, r4
   1a824:	bl	115fc <__fprintf_chk@plt>
   1a828:	mov	r0, #1
   1a82c:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   1a830:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a834:	vpush	{d8}
   1a838:	sub	sp, sp, #108	; 0x6c
   1a83c:	movw	r4, #29904	; 0x74d0
   1a840:	movt	r4, #3
   1a844:	str	r4, [sp, #32]
   1a848:	movw	r4, #31756	; 0x7c0c
   1a84c:	ldr	r5, [sp, #32]
   1a850:	movt	r4, #3
   1a854:	str	r1, [sp, #36]	; 0x24
   1a858:	add	r1, sp, #56	; 0x38
   1a85c:	str	r0, [sp, #20]
   1a860:	ldr	r3, [r5]
   1a864:	ldr	r5, [r4]
   1a868:	str	r3, [sp, #100]	; 0x64
   1a86c:	bl	1866c <bfd_arch_bits_per_address@plt+0x6fa4>
   1a870:	cmp	r0, #0
   1a874:	bne	1ad64 <bfd_arch_bits_per_address@plt+0x969c>
   1a878:	ldr	r0, [sp, #20]
   1a87c:	add	r1, sp, #64	; 0x40
   1a880:	bl	1866c <bfd_arch_bits_per_address@plt+0x6fa4>
   1a884:	cmp	r0, #0
   1a888:	bne	1ad64 <bfd_arch_bits_per_address@plt+0x969c>
   1a88c:	ldr	r0, [sp, #20]
   1a890:	add	r1, sp, #72	; 0x48
   1a894:	bl	185e8 <bfd_arch_bits_per_address@plt+0x6f20>
   1a898:	cmp	r0, #0
   1a89c:	bne	1ad64 <bfd_arch_bits_per_address@plt+0x969c>
   1a8a0:	ldr	r0, [sp, #20]
   1a8a4:	add	r1, sp, #48	; 0x30
   1a8a8:	bl	185e8 <bfd_arch_bits_per_address@plt+0x6f20>
   1a8ac:	cmp	r0, #0
   1a8b0:	bne	1ad64 <bfd_arch_bits_per_address@plt+0x969c>
   1a8b4:	add	r8, sp, #84	; 0x54
   1a8b8:	ldr	r0, [sp, #20]
   1a8bc:	mov	r2, #15
   1a8c0:	mov	r1, r8
   1a8c4:	bl	18740 <bfd_arch_bits_per_address@plt+0x7078>
   1a8c8:	cmp	r0, #0
   1a8cc:	bne	1ad64 <bfd_arch_bits_per_address@plt+0x969c>
   1a8d0:	ldr	r0, [sp, #20]
   1a8d4:	mov	r2, #1
   1a8d8:	add	r1, sp, #40	; 0x28
   1a8dc:	bl	18740 <bfd_arch_bits_per_address@plt+0x7078>
   1a8e0:	subs	r9, r0, #0
   1a8e4:	bne	1ad64 <bfd_arch_bits_per_address@plt+0x969c>
   1a8e8:	ldrd	sl, [sp, #64]	; 0x40
   1a8ec:	ldrd	r6, [sp, #56]	; 0x38
   1a8f0:	mov	r0, sl
   1a8f4:	mov	r1, fp
   1a8f8:	subs	r0, r0, r6
   1a8fc:	sbc	r1, r1, r7
   1a900:	lsrs	r1, r1, #1
   1a904:	rrx	r0, r0
   1a908:	bl	1fd70 <bfd_arch_bits_per_address@plt+0xe6a8>
   1a90c:	vldr	s12, [sp, #72]	; 0x48
   1a910:	vcvt.f64.u32	d7, s12
   1a914:	cmp	r5, #0
   1a918:	vmov	d6, r0, r1
   1a91c:	vdiv.f64	d8, d6, d7
   1a920:	beq	1ab9c <bfd_arch_bits_per_address@plt+0x94d4>
   1a924:	movw	r5, #29852	; 0x749c
   1a928:	movt	r5, #3
   1a92c:	mov	r0, r8
   1a930:	mov	r2, #15
   1a934:	mov	r1, r5
   1a938:	bl	116b0 <strncmp@plt>
   1a93c:	cmp	r0, #0
   1a940:	bne	1acb8 <bfd_arch_bits_per_address@plt+0x95f0>
   1a944:	ldrb	r2, [sp, #40]	; 0x28
   1a948:	ldrb	r3, [r5, #16]
   1a94c:	cmp	r2, r3
   1a950:	bne	1ac5c <bfd_arch_bits_per_address@plt+0x9594>
   1a954:	movw	r3, #31760	; 0x7c10
   1a958:	movt	r3, #3
   1a95c:	vldr	d7, [r3]
   1a960:	vldr	d6, [pc, #1008]	; 1ad58 <bfd_arch_bits_per_address@plt+0x9690>
   1a964:	vsub.f64	d8, d7, d8
   1a968:	vabs.f64	d8, d8
   1a96c:	vcmpe.f64	d8, d6
   1a970:	vmrs	APSR_nzcv, fpscr
   1a974:	bgt	1ad10 <bfd_arch_bits_per_address@plt+0x9648>
   1a978:	ldr	r5, [r4]
   1a97c:	cmp	r5, #0
   1a980:	beq	1aadc <bfd_arch_bits_per_address@plt+0x9414>
   1a984:	movw	r3, #31752	; 0x7c08
   1a988:	movt	r3, #3
   1a98c:	mov	r0, #0
   1a990:	ldr	r1, [r3]
   1a994:	b	1a9a8 <bfd_arch_bits_per_address@plt+0x92e0>
   1a998:	add	r0, r0, #1
   1a99c:	add	r1, r1, #24
   1a9a0:	cmp	r0, r5
   1a9a4:	beq	1aadc <bfd_arch_bits_per_address@plt+0x9414>
   1a9a8:	ldrd	r2, [r1]
   1a9ac:	mov	r9, r1
   1a9b0:	cmp	r3, r7
   1a9b4:	cmpeq	r2, r6
   1a9b8:	bne	1a998 <bfd_arch_bits_per_address@plt+0x92d0>
   1a9bc:	ldrd	r2, [r1, #8]
   1a9c0:	cmp	r3, fp
   1a9c4:	cmpeq	r2, sl
   1a9c8:	bne	1a998 <bfd_arch_bits_per_address@plt+0x92d0>
   1a9cc:	movw	r7, #30536	; 0x7748
   1a9d0:	movt	r7, #3
   1a9d4:	ldr	r3, [r7]
   1a9d8:	tst	r3, #64	; 0x40
   1a9dc:	bne	1abe0 <bfd_arch_bits_per_address@plt+0x9518>
   1a9e0:	ldr	r3, [r9, #16]
   1a9e4:	cmp	r3, #0
   1a9e8:	beq	1aabc <bfd_arch_bits_per_address@plt+0x93f4>
   1a9ec:	movw	r6, #31720	; 0x7be8
   1a9f0:	mov	sl, #0
   1a9f4:	movt	r6, #3
   1a9f8:	b	1aa0c <bfd_arch_bits_per_address@plt+0x9344>
   1a9fc:	ldr	r3, [r9, #16]
   1aa00:	add	sl, sl, #1
   1aa04:	cmp	r3, sl
   1aa08:	bls	1aabc <bfd_arch_bits_per_address@plt+0x93f4>
   1aa0c:	mov	r0, r8
   1aa10:	mov	r1, #2
   1aa14:	mov	r2, #1
   1aa18:	ldr	r3, [sp, #20]
   1aa1c:	bl	114a0 <fread@plt>
   1aa20:	cmp	r0, #1
   1aa24:	mov	fp, r0
   1aa28:	bne	1ac04 <bfd_arch_bits_per_address@plt+0x953c>
   1aa2c:	ldr	r3, [r6]
   1aa30:	mov	r0, r8
   1aa34:	ldr	r4, [r9, #20]
   1aa38:	ldr	r3, [r3, #4]
   1aa3c:	ldr	r5, [r4, sl, lsl #2]
   1aa40:	ldr	r3, [r3, #52]	; 0x34
   1aa44:	blx	r3
   1aa48:	add	r0, r5, r0
   1aa4c:	str	r0, [r4, sl, lsl #2]
   1aa50:	ldr	r3, [r7]
   1aa54:	tst	r3, #64	; 0x40
   1aa58:	beq	1a9fc <bfd_arch_bits_per_address@plt+0x9334>
   1aa5c:	ldrd	r4, [r9]
   1aa60:	mov	r3, #0
   1aa64:	ldrd	r0, [r9, #8]
   1aa68:	ldr	r2, [r9, #16]
   1aa6c:	subs	r0, r0, r4
   1aa70:	sbc	r1, r1, r5
   1aa74:	strd	r4, [sp, #24]
   1aa78:	umull	r4, r5, sl, r0
   1aa7c:	mla	r5, sl, r1, r5
   1aa80:	mov	r0, r4
   1aa84:	mov	r1, r5
   1aa88:	bl	1fde4 <bfd_arch_bits_per_address@plt+0xe71c>
   1aa8c:	ldr	r3, [r9, #20]
   1aa90:	ldr	r5, [sp, #24]
   1aa94:	movw	r1, #16108	; 0x3eec
   1aa98:	movt	r1, #2
   1aa9c:	ldr	r3, [r3, sl, lsl #2]
   1aaa0:	add	sl, sl, #1
   1aaa4:	add	r2, r0, r5
   1aaa8:	mov	r0, fp
   1aaac:	bl	115e4 <__printf_chk@plt>
   1aab0:	ldr	r3, [r9, #16]
   1aab4:	cmp	r3, sl
   1aab8:	bhi	1aa0c <bfd_arch_bits_per_address@plt+0x9344>
   1aabc:	ldr	ip, [sp, #32]
   1aac0:	ldr	r2, [sp, #100]	; 0x64
   1aac4:	ldr	r3, [ip]
   1aac8:	cmp	r2, r3
   1aacc:	bne	1ad60 <bfd_arch_bits_per_address@plt+0x9698>
   1aad0:	add	sp, sp, #108	; 0x6c
   1aad4:	vpop	{d8}
   1aad8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1aadc:	add	r0, sp, #40	; 0x28
   1aae0:	add	r1, sp, #48	; 0x30
   1aae4:	strd	r6, [sp, #40]	; 0x28
   1aae8:	strd	sl, [sp, #48]	; 0x30
   1aaec:	bl	1a74c <bfd_arch_bits_per_address@plt+0x9084>
   1aaf0:	ldrd	r0, [sp, #40]	; 0x28
   1aaf4:	ldrd	r2, [sp, #48]	; 0x30
   1aaf8:	cmp	r1, r3
   1aafc:	cmpeq	r0, r2
   1ab00:	bne	1adb0 <bfd_arch_bits_per_address@plt+0x96e8>
   1ab04:	ldr	r3, [r4]
   1ab08:	movw	r5, #31752	; 0x7c08
   1ab0c:	movt	r5, #3
   1ab10:	add	r3, r3, #1
   1ab14:	ldr	r0, [r5]
   1ab18:	add	r1, r3, r3, lsl #1
   1ab1c:	lsl	r1, r1, #3
   1ab20:	bl	11410 <xrealloc@plt>
   1ab24:	ldr	r7, [r4]
   1ab28:	add	lr, sp, #56	; 0x38
   1ab2c:	add	r7, r7, r7, lsl #1
   1ab30:	lsl	r7, r7, #3
   1ab34:	mov	ip, r0
   1ab38:	str	ip, [r5]
   1ab3c:	ldm	lr!, {r0, r1, r2, r3}
   1ab40:	add	r6, ip, r7
   1ab44:	str	r0, [ip, r7]
   1ab48:	ldr	r0, [r4]
   1ab4c:	ldr	ip, [r5]
   1ab50:	str	r2, [r6, #8]
   1ab54:	add	r5, r0, #1
   1ab58:	add	r7, r0, r0, lsl #1
   1ab5c:	str	r1, [r6, #4]
   1ab60:	str	r3, [r6, #12]
   1ab64:	ldm	lr!, {r0, r1}
   1ab68:	add	r9, ip, r7, lsl #3
   1ab6c:	str	r5, [r4]
   1ab70:	str	r1, [r6, #20]
   1ab74:	str	r0, [r6, #16]
   1ab78:	ldr	r0, [r9, #16]
   1ab7c:	lsl	r0, r0, #2
   1ab80:	bl	11458 <xmalloc@plt>
   1ab84:	ldr	r2, [r9, #16]
   1ab88:	mov	r1, #0
   1ab8c:	lsl	r2, r2, #2
   1ab90:	str	r0, [r9, #20]
   1ab94:	bl	1159c <memset@plt>
   1ab98:	b	1a9cc <bfd_arch_bits_per_address@plt+0x9304>
   1ab9c:	ldm	r8, {r0, r1, r2, r3}
   1aba0:	movw	ip, #29852	; 0x749c
   1aba4:	ldrb	r9, [sp, #40]	; 0x28
   1aba8:	movt	ip, #3
   1abac:	movw	r5, #30568	; 0x7768
   1abb0:	movt	r5, #3
   1abb4:	strb	r9, [ip, #16]
   1abb8:	stmia	ip!, {r0, r1, r2}
   1abbc:	lsr	r2, r3, #16
   1abc0:	strh	r3, [ip], #2
   1abc4:	movw	r3, #31760	; 0x7c10
   1abc8:	strb	r2, [ip]
   1abcc:	movt	r3, #3
   1abd0:	ldr	ip, [sp, #48]	; 0x30
   1abd4:	vstr	d8, [r3]
   1abd8:	str	ip, [r5]
   1abdc:	b	1a978 <bfd_arch_bits_per_address@plt+0x92b0>
   1abe0:	ldr	lr, [r9, #16]
   1abe4:	movw	r1, #15996	; 0x3e7c
   1abe8:	ldr	r2, [r9]
   1abec:	movt	r1, #2
   1abf0:	ldr	r3, [r9, #8]
   1abf4:	mov	r0, #1
   1abf8:	str	lr, [sp]
   1abfc:	bl	115e4 <__printf_chk@plt>
   1ac00:	b	1a9e0 <bfd_arch_bits_per_address@plt+0x9318>
   1ac04:	movw	r3, #30432	; 0x76e0
   1ac08:	movt	r3, #3
   1ac0c:	mov	r2, #5
   1ac10:	movw	r1, #16052	; 0x3eb4
   1ac14:	mov	r0, #0
   1ac18:	movt	r1, #2
   1ac1c:	ldr	r4, [r3]
   1ac20:	bl	113e0 <dcgettext@plt>
   1ac24:	ldr	r5, [sp, #36]	; 0x24
   1ac28:	movw	r3, #31748	; 0x7c04
   1ac2c:	str	sl, [sp, #4]
   1ac30:	movt	r3, #3
   1ac34:	mov	r1, #1
   1ac38:	str	r5, [sp]
   1ac3c:	ldr	ip, [r9, #16]
   1ac40:	ldr	r3, [r3]
   1ac44:	str	ip, [sp, #8]
   1ac48:	mov	r2, r0
   1ac4c:	mov	r0, r4
   1ac50:	bl	115fc <__fprintf_chk@plt>
   1ac54:	mov	r0, #1
   1ac58:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   1ac5c:	movw	r3, #30432	; 0x76e0
   1ac60:	movt	r3, #3
   1ac64:	mov	r2, #5
   1ac68:	movw	r1, #15828	; 0x3dd4
   1ac6c:	movt	r1, #2
   1ac70:	ldr	r4, [r3]
   1ac74:	bl	113e0 <dcgettext@plt>
   1ac78:	movw	r3, #31748	; 0x7c04
   1ac7c:	movt	r3, #3
   1ac80:	ldrb	r5, [r5, #16]
   1ac84:	ldrb	lr, [sp, #40]	; 0x28
   1ac88:	mov	r1, #1
   1ac8c:	ldr	ip, [r3]
   1ac90:	str	r5, [sp, #4]
   1ac94:	str	lr, [sp, #12]
   1ac98:	str	ip, [sp]
   1ac9c:	mov	r3, ip
   1aca0:	str	ip, [sp, #8]
   1aca4:	mov	r2, r0
   1aca8:	mov	r0, r4
   1acac:	bl	115fc <__fprintf_chk@plt>
   1acb0:	mov	r0, #1
   1acb4:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   1acb8:	movw	r3, #30432	; 0x76e0
   1acbc:	movt	r3, #3
   1acc0:	mov	r2, #5
   1acc4:	mov	r0, r9
   1acc8:	movw	r1, #15748	; 0x3d84
   1accc:	movt	r1, #2
   1acd0:	ldr	r4, [r3]
   1acd4:	bl	113e0 <dcgettext@plt>
   1acd8:	movw	r3, #31748	; 0x7c04
   1acdc:	movt	r3, #3
   1ace0:	mov	r1, #1
   1ace4:	ldr	ip, [r3]
   1ace8:	str	r5, [sp, #4]
   1acec:	str	r8, [sp, #12]
   1acf0:	str	ip, [sp]
   1acf4:	mov	r3, ip
   1acf8:	str	ip, [sp, #8]
   1acfc:	mov	r2, r0
   1ad00:	mov	r0, r4
   1ad04:	bl	115fc <__fprintf_chk@plt>
   1ad08:	mov	r0, #1
   1ad0c:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   1ad10:	movw	r3, #30432	; 0x76e0
   1ad14:	movt	r3, #3
   1ad18:	movw	r1, #15916	; 0x3e2c
   1ad1c:	movt	r1, #2
   1ad20:	ldr	r4, [r3]
   1ad24:	mov	r0, #0
   1ad28:	mov	r2, #5
   1ad2c:	bl	113e0 <dcgettext@plt>
   1ad30:	movw	r3, #31748	; 0x7c04
   1ad34:	movt	r3, #3
   1ad38:	mov	r1, #1
   1ad3c:	ldr	r3, [r3]
   1ad40:	mov	r2, r0
   1ad44:	mov	r0, r4
   1ad48:	bl	115fc <__fprintf_chk@plt>
   1ad4c:	mov	r0, #1
   1ad50:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   1ad54:	nop	{0}
   1ad58:	adcsge	lr, r5, sp, lsl #27
   1ad5c:	mrccc	6, 5, ip, cr0, cr7, {7}
   1ad60:	bl	113ec <__stack_chk_fail@plt>
   1ad64:	movw	r3, #30432	; 0x76e0
   1ad68:	movt	r3, #3
   1ad6c:	mov	r2, #5
   1ad70:	movw	r1, #8460	; 0x210c
   1ad74:	mov	r0, #0
   1ad78:	movt	r1, #2
   1ad7c:	ldr	r4, [r3]
   1ad80:	bl	113e0 <dcgettext@plt>
   1ad84:	ldr	ip, [sp, #36]	; 0x24
   1ad88:	movw	r3, #31748	; 0x7c04
   1ad8c:	movt	r3, #3
   1ad90:	mov	r1, #1
   1ad94:	ldr	r3, [r3]
   1ad98:	str	ip, [sp]
   1ad9c:	mov	r2, r0
   1ada0:	mov	r0, r4
   1ada4:	bl	115fc <__fprintf_chk@plt>
   1ada8:	mov	r0, #1
   1adac:	bl	196fc <bfd_arch_bits_per_address@plt+0x8034>
   1adb0:	movw	r3, #30432	; 0x76e0
   1adb4:	movt	r3, #3
   1adb8:	movw	r1, #15960	; 0x3e58
   1adbc:	mov	r0, #0
   1adc0:	ldr	r4, [r3]
   1adc4:	movt	r1, #2
   1adc8:	b	1ad28 <bfd_arch_bits_per_address@plt+0x9660>
   1adcc:	push	{r4, r5, r6, lr}
   1add0:	movw	r6, #30592	; 0x7780
   1add4:	movt	r6, #3
   1add8:	mov	r5, r0
   1addc:	ldr	r4, [r6]
   1ade0:	cmp	r4, #0
   1ade4:	bne	1adf8 <bfd_arch_bits_per_address@plt+0x9730>
   1ade8:	b	1ae14 <bfd_arch_bits_per_address@plt+0x974c>
   1adec:	ldr	r4, [r4]
   1adf0:	cmp	r4, #0
   1adf4:	beq	1ae14 <bfd_arch_bits_per_address@plt+0x974c>
   1adf8:	mov	r0, r5
   1adfc:	ldr	r1, [r4, #4]
   1ae00:	bl	11398 <filename_cmp@plt>
   1ae04:	cmp	r0, #0
   1ae08:	bne	1adec <bfd_arch_bits_per_address@plt+0x9724>
   1ae0c:	mov	r0, r4
   1ae10:	pop	{r4, r5, r6, pc}
   1ae14:	mov	r0, #24
   1ae18:	bl	11458 <xmalloc@plt>
   1ae1c:	mov	r1, #0
   1ae20:	mov	r2, #24
   1ae24:	mov	r4, r0
   1ae28:	bl	1159c <memset@plt>
   1ae2c:	mov	r0, r5
   1ae30:	bl	11470 <xstrdup@plt>
   1ae34:	ldr	r3, [r6]
   1ae38:	str	r4, [r6]
   1ae3c:	str	r3, [r4]
   1ae40:	str	r0, [r4, #4]
   1ae44:	mov	r0, r4
   1ae48:	pop	{r4, r5, r6, pc}
   1ae4c:	movw	r3, #30592	; 0x7780
   1ae50:	movt	r3, #3
   1ae54:	push	{r4, r5, r6, lr}
   1ae58:	mov	r6, r0
   1ae5c:	ldr	r4, [r3]
   1ae60:	cmp	r4, #0
   1ae64:	bne	1ae78 <bfd_arch_bits_per_address@plt+0x97b0>
   1ae68:	b	1aeac <bfd_arch_bits_per_address@plt+0x97e4>
   1ae6c:	ldr	r4, [r4]
   1ae70:	cmp	r4, #0
   1ae74:	beq	1aeac <bfd_arch_bits_per_address@plt+0x97e4>
   1ae78:	ldr	r5, [r4, #4]
   1ae7c:	mov	r1, #47	; 0x2f
   1ae80:	mov	r0, r5
   1ae84:	bl	11620 <strrchr@plt>
   1ae88:	subs	r3, r0, #0
   1ae8c:	mov	r0, r6
   1ae90:	addne	r5, r3, #1
   1ae94:	mov	r1, r5
   1ae98:	bl	11398 <filename_cmp@plt>
   1ae9c:	cmp	r0, #0
   1aea0:	bne	1ae6c <bfd_arch_bits_per_address@plt+0x97a4>
   1aea4:	mov	r0, r4
   1aea8:	pop	{r4, r5, r6, pc}
   1aeac:	mov	r4, #0
   1aeb0:	mov	r0, r4
   1aeb4:	pop	{r4, r5, r6, pc}
   1aeb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1aebc:	sub	sp, sp, #9216	; 0x2400
   1aec0:	sub	sp, sp, #36	; 0x24
   1aec4:	movw	ip, #29904	; 0x74d0
   1aec8:	movt	ip, #3
   1aecc:	ldr	r8, [r0, #4]
   1aed0:	str	ip, [sp, #20]
   1aed4:	mov	r9, r0
   1aed8:	ldr	r0, [sp, #20]
   1aedc:	movw	ip, #30592	; 0x7780
   1aee0:	str	ip, [sp, #12]
   1aee4:	mov	r6, r3
   1aee8:	add	r3, sp, #8192	; 0x2000
   1aeec:	str	r2, [sp, #8]
   1aef0:	ldr	ip, [r0]
   1aef4:	movw	r0, #30592	; 0x7780
   1aef8:	movt	r0, #3
   1aefc:	str	r0, [sp, #12]
   1af00:	mov	r4, r1
   1af04:	add	r0, sp, #28
   1af08:	str	ip, [r3, #1052]	; 0x41c
   1af0c:	mov	r1, r8
   1af10:	ldr	ip, [sp, #12]
   1af14:	mov	r2, #1024	; 0x400
   1af18:	movw	sl, #30536	; 0x7748
   1af1c:	movw	fp, #16184	; 0x3f38
   1af20:	movt	sl, #3
   1af24:	movt	fp, #2
   1af28:	ldr	r7, [ip, #4]
   1af2c:	bl	11494 <__strcpy_chk@plt>
   1af30:	ldrb	r3, [r8]
   1af34:	mov	r8, #0
   1af38:	ldr	r5, [sp, #12]
   1af3c:	cmp	r3, #47	; 0x2f
   1af40:	moveq	r7, #0
   1af44:	b	1afc4 <bfd_arch_bits_per_address@plt+0x98fc>
   1af48:	movw	r1, #11212	; 0x2bcc
   1af4c:	add	r0, sp, #28
   1af50:	movt	r1, #2
   1af54:	bl	1165c <fopen64@plt>
   1af58:	cmp	r0, #0
   1af5c:	bne	1afec <bfd_arch_bits_per_address@plt+0x9924>
   1af60:	cmp	r8, #0
   1af64:	cmpeq	r7, #0
   1af68:	bne	1af88 <bfd_arch_bits_per_address@plt+0x98c0>
   1af6c:	ldr	r0, [r9, #4]
   1af70:	mov	r1, #47	; 0x2f
   1af74:	bl	11620 <strrchr@plt>
   1af78:	cmp	r0, #0
   1af7c:	beq	1b124 <bfd_arch_bits_per_address@plt+0x9a5c>
   1af80:	ldr	r7, [r5, #4]
   1af84:	add	r8, r0, #1
   1af88:	cmp	r7, #0
   1af8c:	beq	1b124 <bfd_arch_bits_per_address@plt+0x9a5c>
   1af90:	add	r1, r7, #4
   1af94:	mov	r2, #1024	; 0x400
   1af98:	add	r0, sp, #28
   1af9c:	bl	1147c <__stpcpy_chk@plt>
   1afa0:	ldrh	r3, [fp]
   1afa4:	cmp	r8, #0
   1afa8:	mov	r2, #1024	; 0x400
   1afac:	movne	r1, r8
   1afb0:	ldreq	r1, [r9, #4]
   1afb4:	strh	r3, [r0]
   1afb8:	add	r0, r0, #1
   1afbc:	bl	11494 <__strcpy_chk@plt>
   1afc0:	ldr	r7, [r7]
   1afc4:	ldr	r3, [sl]
   1afc8:	tst	r3, #8192	; 0x2000
   1afcc:	beq	1af48 <bfd_arch_bits_per_address@plt+0x9880>
   1afd0:	movw	r1, #16136	; 0x3f08
   1afd4:	ldr	r2, [r9, #4]
   1afd8:	movt	r1, #2
   1afdc:	add	r3, sp, #28
   1afe0:	mov	r0, #1
   1afe4:	bl	115e4 <__printf_chk@plt>
   1afe8:	b	1af48 <bfd_arch_bits_per_address@plt+0x9880>
   1afec:	ldr	ip, [sp, #12]
   1aff0:	movw	r7, #30440	; 0x76e8
   1aff4:	movt	r7, #3
   1aff8:	str	r0, [sp, #16]
   1affc:	ldr	r3, [ip, #12]
   1b000:	ldr	r8, [r7]
   1b004:	cmp	r3, #0
   1b008:	beq	1b1d8 <bfd_arch_bits_per_address@plt+0x9b10>
   1b00c:	ldr	r8, [r9, #4]
   1b010:	mov	r1, #47	; 0x2f
   1b014:	mov	r0, r8
   1b018:	bl	11620 <strrchr@plt>
   1b01c:	mov	r2, #1024	; 0x400
   1b020:	cmp	r0, #0
   1b024:	addne	r8, r0, #1
   1b028:	add	r0, sp, #28
   1b02c:	mov	r1, r8
   1b030:	bl	1147c <__stpcpy_chk@plt>
   1b034:	movw	r3, #16216	; 0x3f58
   1b038:	movt	r3, #2
   1b03c:	movw	r1, #12820	; 0x3214
   1b040:	movt	r1, #2
   1b044:	mov	r2, r0
   1b048:	ldr	r0, [r3]
   1b04c:	ldrb	r3, [r3, #4]
   1b050:	str	r0, [r2]
   1b054:	add	r0, sp, #28
   1b058:	strb	r3, [r2, #4]
   1b05c:	bl	1165c <fopen64@plt>
   1b060:	subs	r8, r0, #0
   1b064:	beq	1b23c <bfd_arch_bits_per_address@plt+0x9b74>
   1b068:	ldr	r3, [r7]
   1b06c:	cmp	r8, r3
   1b070:	beq	1b1d8 <bfd_arch_bits_per_address@plt+0x9b10>
   1b074:	add	r0, r4, #1
   1b078:	mov	r7, #1
   1b07c:	bl	11458 <xmalloc@plt>
   1b080:	mov	sl, r7
   1b084:	add	ip, sp, #1056	; 0x420
   1b088:	sub	ip, ip, #5
   1b08c:	str	ip, [sp, #12]
   1b090:	mov	fp, r0
   1b094:	add	r0, sp, #1040	; 0x410
   1b098:	mov	r1, #1
   1b09c:	add	r0, r0, #12
   1b0a0:	mov	r2, #8192	; 0x2000
   1b0a4:	ldr	r3, [sp, #16]
   1b0a8:	bl	114a0 <fread@plt>
   1b0ac:	cmp	r0, #0
   1b0b0:	ble	1b1c0 <bfd_arch_bits_per_address@plt+0x9af8>
   1b0b4:	ldr	ip, [sp, #12]
   1b0b8:	mov	r3, r6
   1b0bc:	mov	r6, r7
   1b0c0:	mov	r7, r3
   1b0c4:	add	r5, ip, r0
   1b0c8:	mov	r9, ip
   1b0cc:	b	1b0f0 <bfd_arch_bits_per_address@plt+0x9a28>
   1b0d0:	ldrb	r0, [r9, #1]!
   1b0d4:	mov	r1, r8
   1b0d8:	subs	r3, r0, #10
   1b0dc:	rsbs	r6, r3, #0
   1b0e0:	adcs	r6, r6, r3
   1b0e4:	bl	11638 <fputc@plt>
   1b0e8:	cmp	r9, r5
   1b0ec:	beq	1b1b0 <bfd_arch_bits_per_address@plt+0x9ae8>
   1b0f0:	cmp	r6, #0
   1b0f4:	beq	1b0d0 <bfd_arch_bits_per_address@plt+0x9a08>
   1b0f8:	mov	r2, sl
   1b0fc:	mov	r0, fp
   1b100:	mov	r1, r4
   1b104:	mov	r3, r7
   1b108:	ldr	ip, [sp, #8]
   1b10c:	add	sl, sl, #1
   1b110:	blx	ip
   1b114:	mov	r0, fp
   1b118:	mov	r1, r8
   1b11c:	bl	116a4 <fputs@plt>
   1b120:	b	1b0d0 <bfd_arch_bits_per_address@plt+0x9a08>
   1b124:	bl	11584 <__errno_location@plt>
   1b128:	ldr	r3, [r0]
   1b12c:	cmp	r3, #2
   1b130:	beq	1b164 <bfd_arch_bits_per_address@plt+0x9a9c>
   1b134:	ldr	r0, [r9, #4]
   1b138:	bl	11428 <perror@plt>
   1b13c:	mov	r0, #0
   1b140:	ldr	ip, [sp, #20]
   1b144:	add	r1, sp, #8192	; 0x2000
   1b148:	ldr	r2, [r1, #1052]	; 0x41c
   1b14c:	ldr	r3, [ip]
   1b150:	cmp	r2, r3
   1b154:	bne	1b24c <bfd_arch_bits_per_address@plt+0x9b84>
   1b158:	add	sp, sp, #9216	; 0x2400
   1b15c:	add	sp, sp, #36	; 0x24
   1b160:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b164:	movw	r3, #30432	; 0x76e0
   1b168:	movt	r3, #3
   1b16c:	mov	r2, #5
   1b170:	movw	r1, #16188	; 0x3f3c
   1b174:	mov	r0, #0
   1b178:	movt	r1, #2
   1b17c:	ldr	r4, [r3]
   1b180:	bl	113e0 <dcgettext@plt>
   1b184:	ldr	ip, [r9, #4]
   1b188:	movw	r3, #31748	; 0x7c04
   1b18c:	movt	r3, #3
   1b190:	mov	r1, #1
   1b194:	ldr	r3, [r3]
   1b198:	str	ip, [sp]
   1b19c:	mov	r2, r0
   1b1a0:	mov	r0, r4
   1b1a4:	bl	115fc <__fprintf_chk@plt>
   1b1a8:	mov	r0, #0
   1b1ac:	b	1b140 <bfd_arch_bits_per_address@plt+0x9a78>
   1b1b0:	mov	r3, r7
   1b1b4:	mov	r7, r6
   1b1b8:	mov	r6, r3
   1b1bc:	b	1b094 <bfd_arch_bits_per_address@plt+0x99cc>
   1b1c0:	mov	r0, fp
   1b1c4:	bl	11374 <free@plt>
   1b1c8:	ldr	r0, [sp, #16]
   1b1cc:	bl	11608 <fclose@plt>
   1b1d0:	mov	r0, r8
   1b1d4:	b	1b140 <bfd_arch_bits_per_address@plt+0x9a78>
   1b1d8:	movw	r3, #29872	; 0x74b0
   1b1dc:	movt	r3, #3
   1b1e0:	ldr	r2, [r3]
   1b1e4:	cmp	r2, #0
   1b1e8:	beq	1b26c <bfd_arch_bits_per_address@plt+0x9ba4>
   1b1ec:	mov	r2, #0
   1b1f0:	str	r2, [r3]
   1b1f4:	movw	r3, #29848	; 0x7498
   1b1f8:	movt	r3, #3
   1b1fc:	ldr	r2, [r3]
   1b200:	cmp	r2, #0
   1b204:	beq	1b250 <bfd_arch_bits_per_address@plt+0x9b88>
   1b208:	mov	r2, #0
   1b20c:	str	r2, [r3]
   1b210:	mov	r2, #5
   1b214:	movw	r1, #16228	; 0x3f64
   1b218:	mov	r0, #0
   1b21c:	movt	r1, #2
   1b220:	bl	113e0 <dcgettext@plt>
   1b224:	ldr	r3, [r9, #4]
   1b228:	mov	r1, #1
   1b22c:	mov	r2, r0
   1b230:	mov	r0, r8
   1b234:	bl	115fc <__fprintf_chk@plt>
   1b238:	b	1b074 <bfd_arch_bits_per_address@plt+0x99ac>
   1b23c:	add	r0, sp, #28
   1b240:	bl	11428 <perror@plt>
   1b244:	mov	r0, r8
   1b248:	b	1b140 <bfd_arch_bits_per_address@plt+0x9a78>
   1b24c:	bl	113ec <__stack_chk_fail@plt>
   1b250:	movw	r0, #16224	; 0x3f60
   1b254:	mov	r1, #1
   1b258:	mov	r2, #2
   1b25c:	mov	r3, r8
   1b260:	movt	r0, #2
   1b264:	bl	1144c <fwrite@plt>
   1b268:	b	1b210 <bfd_arch_bits_per_address@plt+0x9b48>
   1b26c:	mov	r1, r8
   1b270:	mov	r0, #10
   1b274:	bl	11638 <fputc@plt>
   1b278:	b	1b1f4 <bfd_arch_bits_per_address@plt+0x9b2c>
   1b27c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1b280:	sub	r7, r1, #1
   1b284:	mov	r8, r0
   1b288:	mov	r9, #0
   1b28c:	b	1b2d4 <bfd_arch_bits_per_address@plt+0x9c0c>
   1b290:	add	r0, r6, #8
   1b294:	bl	11458 <xmalloc@plt>
   1b298:	mov	r2, r6
   1b29c:	mov	r1, r5
   1b2a0:	mov	r4, r0
   1b2a4:	add	r6, r4, r6
   1b2a8:	add	r0, r0, #4
   1b2ac:	bl	113b0 <memcpy@plt>
   1b2b0:	strb	r9, [r6, #4]
   1b2b4:	ldr	r3, [r8, #4]
   1b2b8:	str	r9, [r4]
   1b2bc:	cmp	r3, #0
   1b2c0:	streq	r4, [r8]
   1b2c4:	strne	r4, [r3]
   1b2c8:	cmp	r7, #0
   1b2cc:	str	r4, [r8, #4]
   1b2d0:	beq	1b300 <bfd_arch_bits_per_address@plt+0x9c38>
   1b2d4:	add	r5, r7, #1
   1b2d8:	mov	r1, #58	; 0x3a
   1b2dc:	mov	r0, r5
   1b2e0:	bl	1156c <strchr@plt>
   1b2e4:	subs	r7, r0, #0
   1b2e8:	rsb	r6, r5, r7
   1b2ec:	bne	1b290 <bfd_arch_bits_per_address@plt+0x9bc8>
   1b2f0:	mov	r0, r5
   1b2f4:	bl	11560 <strlen@plt>
   1b2f8:	mov	r6, r0
   1b2fc:	b	1b290 <bfd_arch_bits_per_address@plt+0x9bc8>
   1b300:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1b304:	push	{r4, r5}
   1b308:	ldrd	r2, [r1]
   1b30c:	ldrd	r4, [r0]
   1b310:	cmp	r5, r3
   1b314:	cmpeq	r4, r2
   1b318:	movhi	r0, #1
   1b31c:	bhi	1b348 <bfd_arch_bits_per_address@plt+0x9c80>
   1b320:	bcc	1b350 <bfd_arch_bits_per_address@plt+0x9c88>
   1b324:	ldrb	ip, [r0, #28]
   1b328:	ldrb	r2, [r1, #28]
   1b32c:	and	r3, ip, #1
   1b330:	and	r0, r2, #1
   1b334:	cmp	r3, r0
   1b338:	ubfxeq	r0, ip, #1, #1
   1b33c:	ubfxeq	r2, r2, #1, #1
   1b340:	rsbne	r0, r3, r0
   1b344:	rsbeq	r0, r2, r0
   1b348:	pop	{r4, r5}
   1b34c:	bx	lr
   1b350:	mvn	r0, #0
   1b354:	b	1b348 <bfd_arch_bits_per_address@plt+0x9c80>
   1b358:	push	{r3, lr}
   1b35c:	mov	r1, #0
   1b360:	mov	r2, #264	; 0x108
   1b364:	bl	1159c <memset@plt>
   1b368:	pop	{r3, pc}
   1b36c:	ldr	r1, [r0]
   1b370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b374:	cmp	r1, #0
   1b378:	sub	sp, sp, #44	; 0x2c
   1b37c:	mov	r8, r0
   1b380:	bne	1b38c <bfd_arch_bits_per_address@plt+0x9cc4>
   1b384:	add	sp, sp, #44	; 0x2c
   1b388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b38c:	ldr	r0, [r0, #4]
   1b390:	movw	r3, #45828	; 0xb304
   1b394:	mov	r2, #264	; 0x108
   1b398:	movt	r3, #1
   1b39c:	bl	11674 <qsort@plt>
   1b3a0:	ldmib	r8, {sl, ip}
   1b3a4:	ldrd	r0, [sl]
   1b3a8:	adds	r4, r0, #1
   1b3ac:	adc	r5, r1, #0
   1b3b0:	cmp	sl, ip
   1b3b4:	strd	r4, [sp, #16]
   1b3b8:	bcs	1b78c <bfd_arch_bits_per_address@plt+0xa0c4>
   1b3bc:	movw	r6, #30536	; 0x7748
   1b3c0:	movt	r6, #3
   1b3c4:	mov	r3, r1
   1b3c8:	add	r4, sl, #8
   1b3cc:	ldr	r7, [r6]
   1b3d0:	add	fp, sl, #264	; 0x108
   1b3d4:	mov	r9, sl
   1b3d8:	str	r6, [sp, #32]
   1b3dc:	and	r7, r7, #4224	; 0x1080
   1b3e0:	mov	r2, r0
   1b3e4:	mov	r1, r7
   1b3e8:	mov	r7, sl
   1b3ec:	mov	sl, r1
   1b3f0:	b	1b47c <bfd_arch_bits_per_address@plt+0x9db4>
   1b3f4:	ldr	r1, [r8, #4]
   1b3f8:	cmp	r1, r9
   1b3fc:	bcs	1b420 <bfd_arch_bits_per_address@plt+0x9d58>
   1b400:	mvn	r6, #255	; 0xff
   1b404:	ldrd	r0, [r9, r6]
   1b408:	orrs	r6, r0, r1
   1b40c:	bne	1b420 <bfd_arch_bits_per_address@plt+0x9d58>
   1b410:	subs	r0, r2, #1
   1b414:	mvn	r6, #255	; 0xff
   1b418:	sbc	r1, r3, #0
   1b41c:	strd	r0, [r9, r6]
   1b420:	ldrd	r0, [r4]
   1b424:	orrs	r6, r0, r1
   1b428:	beq	1b438 <bfd_arch_bits_per_address@plt+0x9d70>
   1b42c:	cmp	r1, r3
   1b430:	cmpeq	r0, r2
   1b434:	bcc	1b458 <bfd_arch_bits_per_address@plt+0x9d90>
   1b438:	mov	r1, r5
   1b43c:	mov	r0, r9
   1b440:	mov	r2, #264	; 0x108
   1b444:	add	r9, r9, r2
   1b448:	bl	113b0 <memcpy@plt>
   1b44c:	ldrd	r0, [r4, #-8]
   1b450:	ldr	ip, [r8, #8]
   1b454:	strd	r0, [sp, #16]
   1b458:	mov	r6, sl
   1b45c:	add	r3, r4, #256	; 0x100
   1b460:	add	r4, r4, #264	; 0x108
   1b464:	cmp	ip, r3
   1b468:	bls	1b5c0 <bfd_arch_bits_per_address@plt+0x9ef8>
   1b46c:	rsb	r3, r7, r4
   1b470:	add	r3, r3, fp
   1b474:	sub	r3, r3, #272	; 0x110
   1b478:	ldrd	r2, [r3]
   1b47c:	ldrd	r0, [sp, #16]
   1b480:	sub	r5, r4, #8
   1b484:	cmp	r1, r3
   1b488:	cmpeq	r0, r2
   1b48c:	bne	1b3f4 <bfd_arch_bits_per_address@plt+0x9d2c>
   1b490:	ldrb	r1, [r5, #28]
   1b494:	ldrb	r0, [r9, #-236]	; 0xffffff14
   1b498:	ubfx	r3, r1, #1, #1
   1b49c:	str	r3, [sp, #28]
   1b4a0:	cmp	r3, #0
   1b4a4:	ubfx	r3, r0, #1, #1
   1b4a8:	bne	1b63c <bfd_arch_bits_per_address@plt+0x9f74>
   1b4ac:	cmp	r3, #0
   1b4b0:	bne	1b510 <bfd_arch_bits_per_address@plt+0x9e48>
   1b4b4:	tst	r1, #1
   1b4b8:	beq	1b6d8 <bfd_arch_bits_per_address@plt+0xa010>
   1b4bc:	tst	r0, #1
   1b4c0:	beq	1b510 <bfd_arch_bits_per_address@plt+0x9e48>
   1b4c4:	ldr	r6, [r4, #8]
   1b4c8:	str	r6, [sp, #24]
   1b4cc:	ldrb	r6, [r6]
   1b4d0:	cmp	r6, #95	; 0x5f
   1b4d4:	beq	1b4f0 <bfd_arch_bits_per_address@plt+0x9e28>
   1b4d8:	ldr	r2, [r9, #-248]	; 0xffffff08
   1b4dc:	ldrb	r2, [r2]
   1b4e0:	cmp	r2, #95	; 0x5f
   1b4e4:	beq	1b510 <bfd_arch_bits_per_address@plt+0x9e48>
   1b4e8:	cmp	r6, #0
   1b4ec:	beq	1b644 <bfd_arch_bits_per_address@plt+0x9f7c>
   1b4f0:	ldr	r6, [sp, #24]
   1b4f4:	ldrb	r2, [r6, #1]
   1b4f8:	cmp	r2, #95	; 0x5f
   1b4fc:	beq	1b644 <bfd_arch_bits_per_address@plt+0x9f7c>
   1b500:	ldr	r2, [r9, #-248]	; 0xffffff08
   1b504:	ldrb	r2, [r2, #1]
   1b508:	cmp	r2, #95	; 0x5f
   1b50c:	bne	1b644 <bfd_arch_bits_per_address@plt+0x9f7c>
   1b510:	cmp	sl, #0
   1b514:	mov	r6, sl
   1b518:	beq	1b59c <bfd_arch_bits_per_address@plt+0x9ed4>
   1b51c:	tst	r1, #1
   1b520:	ldr	ip, [r9, #-248]	; 0xffffff08
   1b524:	ldr	r2, [r4, #8]
   1b528:	movw	r1, #16244	; 0x3f74
   1b52c:	moveq	r3, #102	; 0x66
   1b530:	movne	r3, #70	; 0x46
   1b534:	tst	r0, #2
   1b538:	str	r3, [sp]
   1b53c:	movt	r1, #2
   1b540:	moveq	r3, #84	; 0x54
   1b544:	movne	r3, #116	; 0x74
   1b548:	str	ip, [sp, #4]
   1b54c:	tst	r0, #1
   1b550:	ldr	ip, [sp, #28]
   1b554:	str	r3, [sp, #8]
   1b558:	mov	r0, #1
   1b55c:	moveq	r3, #102	; 0x66
   1b560:	movne	r3, #70	; 0x46
   1b564:	cmp	ip, #0
   1b568:	str	r3, [sp, #12]
   1b56c:	moveq	r3, #84	; 0x54
   1b570:	movne	r3, #116	; 0x74
   1b574:	bl	115e4 <__printf_chk@plt>
   1b578:	movw	r1, #16292	; 0x3fa4
   1b57c:	mov	r0, #1
   1b580:	movt	r1, #2
   1b584:	ldr	r2, [r4, #-8]
   1b588:	bl	115e4 <__printf_chk@plt>
   1b58c:	ldr	r6, [sp, #32]
   1b590:	ldr	sl, [r6]
   1b594:	and	sl, sl, #4224	; 0x1080
   1b598:	mov	r6, sl
   1b59c:	mov	r1, r5
   1b5a0:	sub	r0, r9, #264	; 0x108
   1b5a4:	mov	r2, #264	; 0x108
   1b5a8:	bl	113b0 <memcpy@plt>
   1b5ac:	ldr	ip, [r8, #8]
   1b5b0:	add	r3, r4, #256	; 0x100
   1b5b4:	add	r4, r4, #264	; 0x108
   1b5b8:	cmp	ip, r3
   1b5bc:	bhi	1b46c <bfd_arch_bits_per_address@plt+0x9da4>
   1b5c0:	ldr	r2, [r8, #4]
   1b5c4:	mov	r7, r9
   1b5c8:	rsb	r2, r2, r9
   1b5cc:	ldr	r3, [r8]
   1b5d0:	cmp	r3, #0
   1b5d4:	beq	1b610 <bfd_arch_bits_per_address@plt+0x9f48>
   1b5d8:	mvn	ip, #255	; 0xff
   1b5dc:	ldrd	r0, [r9, ip]
   1b5e0:	orrs	r4, r0, r1
   1b5e4:	bne	1b610 <bfd_arch_bits_per_address@plt+0x9f48>
   1b5e8:	movw	r1, #31736	; 0x7bf8
   1b5ec:	movt	r1, #3
   1b5f0:	ldr	r1, [r1]
   1b5f4:	ldrd	r4, [r1, #32]
   1b5f8:	ldrd	r0, [r1, #48]	; 0x30
   1b5fc:	adds	r0, r0, r4
   1b600:	adc	r1, r1, r5
   1b604:	subs	r0, r0, #1
   1b608:	sbc	r1, r1, #0
   1b60c:	strd	r0, [r9, ip]
   1b610:	cmp	r6, #0
   1b614:	asr	r2, r2, #3
   1b618:	bne	1b6e4 <bfd_arch_bits_per_address@plt+0xa01c>
   1b61c:	rsb	r3, r2, r2, lsl #5
   1b620:	str	r9, [r8, #8]
   1b624:	add	r3, r2, r3, lsl #5
   1b628:	rsb	r3, r3, r3, lsl #15
   1b62c:	add	r2, r2, r3, lsl #5
   1b630:	str	r2, [r8]
   1b634:	add	sp, sp, #44	; 0x2c
   1b638:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b63c:	cmp	r3, #1
   1b640:	beq	1b4b4 <bfd_arch_bits_per_address@plt+0x9dec>
   1b644:	cmp	sl, #0
   1b648:	mov	r6, sl
   1b64c:	beq	1b45c <bfd_arch_bits_per_address@plt+0x9d94>
   1b650:	tst	r0, #1
   1b654:	ldr	r5, [sp, #28]
   1b658:	ldr	r0, [r4, #8]
   1b65c:	moveq	ip, #102	; 0x66
   1b660:	movne	ip, #70	; 0x46
   1b664:	cmp	r5, #0
   1b668:	ldr	r2, [r9, #-248]	; 0xffffff08
   1b66c:	moveq	lr, #84	; 0x54
   1b670:	movne	lr, #116	; 0x74
   1b674:	tst	r1, #1
   1b678:	str	r0, [sp, #4]
   1b67c:	str	ip, [sp]
   1b680:	movw	r1, #16244	; 0x3f74
   1b684:	moveq	r0, #102	; 0x66
   1b688:	movne	r0, #70	; 0x46
   1b68c:	cmp	r3, #0
   1b690:	str	lr, [sp, #8]
   1b694:	movt	r1, #2
   1b698:	moveq	r3, #84	; 0x54
   1b69c:	movne	r3, #116	; 0x74
   1b6a0:	str	r0, [sp, #12]
   1b6a4:	mov	r0, #1
   1b6a8:	bl	115e4 <__printf_chk@plt>
   1b6ac:	movw	r1, #16292	; 0x3fa4
   1b6b0:	mov	r0, #1
   1b6b4:	movt	r1, #2
   1b6b8:	ldr	r2, [r4, #-8]
   1b6bc:	bl	115e4 <__printf_chk@plt>
   1b6c0:	ldr	r6, [sp, #32]
   1b6c4:	ldr	ip, [r8, #8]
   1b6c8:	ldr	sl, [r6]
   1b6cc:	and	sl, sl, #4224	; 0x1080
   1b6d0:	mov	r6, sl
   1b6d4:	b	1b45c <bfd_arch_bits_per_address@plt+0x9d94>
   1b6d8:	tst	r0, #1
   1b6dc:	bne	1b644 <bfd_arch_bits_per_address@plt+0x9f7c>
   1b6e0:	b	1b4c4 <bfd_arch_bits_per_address@plt+0x9dfc>
   1b6e4:	movw	ip, #31775	; 0x7c1f
   1b6e8:	movt	ip, #49648	; 0xc1f0
   1b6ec:	movw	r1, #16308	; 0x3fb4
   1b6f0:	mov	r0, #1
   1b6f4:	mla	r2, ip, r2, r3
   1b6f8:	movt	r1, #2
   1b6fc:	bl	115e4 <__printf_chk@plt>
   1b700:	ldr	r3, [r8, #4]
   1b704:	ldr	r5, [sp, #32]
   1b708:	rsb	r7, r3, r7
   1b70c:	str	r9, [r8, #8]
   1b710:	ldr	r2, [r5]
   1b714:	asr	r7, r7, #3
   1b718:	tst	r2, #4224	; 0x1080
   1b71c:	rsb	r2, r7, r7, lsl #5
   1b720:	add	r2, r7, r2, lsl #5
   1b724:	rsb	r2, r2, r2, lsl #15
   1b728:	add	r7, r7, r2, lsl #5
   1b72c:	str	r7, [r8]
   1b730:	beq	1b384 <bfd_arch_bits_per_address@plt+0x9cbc>
   1b734:	cmp	r7, #0
   1b738:	beq	1b384 <bfd_arch_bits_per_address@plt+0x9cbc>
   1b73c:	mov	r4, #0
   1b740:	mov	r5, r4
   1b744:	b	1b74c <bfd_arch_bits_per_address@plt+0xa084>
   1b748:	ldr	r3, [r8, #4]
   1b74c:	add	ip, r3, r4
   1b750:	ldr	r2, [r3, r4]
   1b754:	mov	r0, #1
   1b758:	movw	r1, #16360	; 0x3fe8
   1b75c:	ldr	r3, [ip, #8]
   1b760:	movt	r1, #2
   1b764:	ldr	ip, [ip, #16]
   1b768:	add	r5, r5, r0
   1b76c:	add	r4, r4, #264	; 0x108
   1b770:	str	ip, [sp]
   1b774:	bl	115e4 <__printf_chk@plt>
   1b778:	ldr	r3, [r8]
   1b77c:	cmp	r3, r5
   1b780:	bhi	1b748 <bfd_arch_bits_per_address@plt+0xa080>
   1b784:	add	sp, sp, #44	; 0x2c
   1b788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b78c:	movw	r5, #30536	; 0x7748
   1b790:	movt	r5, #3
   1b794:	mov	r7, sl
   1b798:	str	r5, [sp, #32]
   1b79c:	ldr	r6, [r5]
   1b7a0:	mov	r2, #0
   1b7a4:	mov	r9, sl
   1b7a8:	and	r6, r6, #4224	; 0x1080
   1b7ac:	b	1b5cc <bfd_arch_bits_per_address@plt+0x9f04>
   1b7b0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b7b4:	sub	sp, sp, #20
   1b7b8:	movw	sl, #30432	; 0x76e0
   1b7bc:	movt	sl, #3
   1b7c0:	strd	r2, [sp, #8]
   1b7c4:	mov	r4, r0
   1b7c8:	ldr	r3, [sp, #8]
   1b7cc:	movw	r2, #16396	; 0x400c
   1b7d0:	ldr	r0, [sl]
   1b7d4:	movt	r2, #2
   1b7d8:	mov	r1, #1
   1b7dc:	bl	115fc <__fprintf_chk@plt>
   1b7e0:	ldr	r7, [r4]
   1b7e4:	ldr	r5, [r4, #4]
   1b7e8:	subs	r7, r7, #1
   1b7ec:	movne	r8, #0
   1b7f0:	bne	1b814 <bfd_arch_bits_per_address@plt+0xa14c>
   1b7f4:	b	1b890 <bfd_arch_bits_per_address@plt+0xa1c8>
   1b7f8:	ldrd	r2, [r5, r9]
   1b7fc:	mov	r8, ip
   1b800:	cmp	r1, r3
   1b804:	cmpeq	r0, r2
   1b808:	bcc	1b8ac <bfd_arch_bits_per_address@plt+0xa1e4>
   1b80c:	cmp	r8, r7
   1b810:	beq	1b890 <bfd_arch_bits_per_address@plt+0xa1c8>
   1b814:	add	r4, r7, r8
   1b818:	mov	r1, #1
   1b81c:	mov	r3, r8
   1b820:	ldr	r0, [sl]
   1b824:	lsr	r4, r4, #1
   1b828:	str	r7, [sp, #4]
   1b82c:	movw	r2, #16472	; 0x4058
   1b830:	str	r4, [sp]
   1b834:	movt	r2, #2
   1b838:	bl	115fc <__fprintf_chk@plt>
   1b83c:	add	r3, r4, r4, lsl #5
   1b840:	mov	r1, #1
   1b844:	ldr	r0, [sl]
   1b848:	lsl	r6, r3, #3
   1b84c:	movw	r2, #16524	; 0x408c
   1b850:	add	r9, r6, #264	; 0x108
   1b854:	ldr	r3, [r5, r3, lsl #3]
   1b858:	movt	r2, #2
   1b85c:	add	fp, r5, r6
   1b860:	ldr	ip, [r5, r9]
   1b864:	str	ip, [sp]
   1b868:	bl	115fc <__fprintf_chk@plt>
   1b86c:	ldrd	r2, [r5, r6]
   1b870:	ldrd	r0, [sp, #8]
   1b874:	add	ip, r4, #1
   1b878:	cmp	r1, r3
   1b87c:	cmpeq	r0, r2
   1b880:	bcs	1b7f8 <bfd_arch_bits_per_address@plt+0xa130>
   1b884:	mov	r7, r4
   1b888:	cmp	r8, r7
   1b88c:	bne	1b814 <bfd_arch_bits_per_address@plt+0xa14c>
   1b890:	movw	r0, #16428	; 0x402c
   1b894:	ldr	r3, [sl]
   1b898:	mov	r1, #1
   1b89c:	movt	r0, #2
   1b8a0:	mov	r2, #40	; 0x28
   1b8a4:	mov	fp, #0
   1b8a8:	bl	1144c <fwrite@plt>
   1b8ac:	mov	r0, fp
   1b8b0:	add	sp, sp, #20
   1b8b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b8b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1b8bc:	ldr	sl, [r0]
   1b8c0:	cmp	sl, #0
   1b8c4:	beq	1ba20 <bfd_arch_bits_per_address@plt+0xa358>
   1b8c8:	sub	sl, sl, #1
   1b8cc:	ldr	r7, [r0, #4]
   1b8d0:	cmp	sl, #0
   1b8d4:	mov	r4, sl
   1b8d8:	beq	1ba2c <bfd_arch_bits_per_address@plt+0xa364>
   1b8dc:	movw	r1, #30536	; 0x7748
   1b8e0:	movt	r1, #3
   1b8e4:	mov	r5, #0
   1b8e8:	ldr	r8, [r1]
   1b8ec:	mov	ip, r5
   1b8f0:	and	r8, r8, #512	; 0x200
   1b8f4:	add	r1, r4, ip
   1b8f8:	cmp	r8, #0
   1b8fc:	add	r1, r1, r1, lsr #31
   1b900:	bne	1b978 <bfd_arch_bits_per_address@plt+0xa2b0>
   1b904:	asr	r6, r1, #1
   1b908:	add	r1, r6, r6, lsl #5
   1b90c:	lsl	r1, r1, #3
   1b910:	add	r9, r7, r1
   1b914:	ldrd	r0, [r1, r7]
   1b918:	cmp	r3, r1
   1b91c:	cmpeq	r2, r0
   1b920:	bcc	1b99c <bfd_arch_bits_per_address@plt+0xa2d4>
   1b924:	add	ip, r6, #1
   1b928:	add	r1, ip, ip, lsl #5
   1b92c:	lsl	r1, r1, #3
   1b930:	ldrd	r0, [r1, r7]
   1b934:	cmp	r3, r1
   1b938:	cmpeq	r2, r0
   1b93c:	bcs	1b9a0 <bfd_arch_bits_per_address@plt+0xa2d8>
   1b940:	ldrd	r0, [r9, #8]
   1b944:	cmp	r3, r1
   1b948:	cmpeq	r2, r0
   1b94c:	bhi	1b9f4 <bfd_arch_bits_per_address@plt+0xa32c>
   1b950:	cmp	r8, #0
   1b954:	beq	1b9ec <bfd_arch_bits_per_address@plt+0xa324>
   1b958:	mov	r2, r5
   1b95c:	mov	r3, sl
   1b960:	movw	r1, #16572	; 0x40bc
   1b964:	mov	r0, #1
   1b968:	movt	r1, #2
   1b96c:	bl	115e4 <__printf_chk@plt>
   1b970:	mov	r0, r9
   1b974:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b978:	asr	r6, r1, #1
   1b97c:	add	r5, r5, #1
   1b980:	add	r1, r6, r6, lsl #5
   1b984:	lsl	r1, r1, #3
   1b988:	add	r9, r7, r1
   1b98c:	ldrd	r0, [r1, r7]
   1b990:	cmp	r1, r3
   1b994:	cmpeq	r0, r2
   1b998:	bls	1b924 <bfd_arch_bits_per_address@plt+0xa25c>
   1b99c:	mov	r4, r6
   1b9a0:	cmp	ip, r4
   1b9a4:	bne	1b8f4 <bfd_arch_bits_per_address@plt+0xa22c>
   1b9a8:	add	r6, r6, #1
   1b9ac:	add	r6, r6, r6, lsl #5
   1b9b0:	lsl	r9, r6, #3
   1b9b4:	ldrd	r0, [r7, r9]
   1b9b8:	add	r9, r7, r9
   1b9bc:	cmp	r3, r1
   1b9c0:	cmpeq	r2, r0
   1b9c4:	bcc	1b9f4 <bfd_arch_bits_per_address@plt+0xa32c>
   1b9c8:	ldrd	r0, [r9, #8]
   1b9cc:	cmp	r3, r1
   1b9d0:	cmpeq	r2, r0
   1b9d4:	bhi	1b9f4 <bfd_arch_bits_per_address@plt+0xa32c>
   1b9d8:	movw	r3, #30536	; 0x7748
   1b9dc:	movt	r3, #3
   1b9e0:	ldr	r3, [r3]
   1b9e4:	tst	r3, #512	; 0x200
   1b9e8:	bne	1ba00 <bfd_arch_bits_per_address@plt+0xa338>
   1b9ec:	mov	r0, r9
   1b9f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1b9f4:	mov	r9, #0
   1b9f8:	mov	r0, r9
   1b9fc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ba00:	mov	r2, r5
   1ba04:	mov	r3, sl
   1ba08:	movw	r1, #16616	; 0x40e8
   1ba0c:	mov	r0, #1
   1ba10:	movt	r1, #2
   1ba14:	bl	115e4 <__printf_chk@plt>
   1ba18:	mov	r0, r9
   1ba1c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ba20:	mov	r9, sl
   1ba24:	mov	r0, r9
   1ba28:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1ba2c:	mov	r9, sl
   1ba30:	mov	r5, sl
   1ba34:	b	1b9b4 <bfd_arch_bits_per_address@plt+0xa2ec>
   1ba38:	ldr	ip, [r0, #4]
   1ba3c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1ba40:	mov	r4, r0
   1ba44:	sub	r0, r1, #264	; 0x108
   1ba48:	mov	r5, r1
   1ba4c:	cmp	ip, r0
   1ba50:	mov	r6, r2
   1ba54:	mov	r8, r3
   1ba58:	ldr	r7, [sp, #32]
   1ba5c:	beq	1ba74 <bfd_arch_bits_per_address@plt+0xa3ac>
   1ba60:	cmp	r7, #0
   1ba64:	bne	1ba9c <bfd_arch_bits_per_address@plt+0xa3d4>
   1ba68:	ldr	r3, [r6]
   1ba6c:	add	r3, r3, #1
   1ba70:	str	r3, [r6]
   1ba74:	cmp	r7, #0
   1ba78:	beq	1ba94 <bfd_arch_bits_per_address@plt+0xa3cc>
   1ba7c:	ldr	r1, [r4]
   1ba80:	ldr	r0, [r8]
   1ba84:	ldrd	r2, [r5, #8]
   1ba88:	add	r1, r1, r1, lsl #5
   1ba8c:	add	r1, r0, r1, lsl #3
   1ba90:	strd	r2, [r1, #8]
   1ba94:	str	r5, [r4, #4]
   1ba98:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1ba9c:	ldr	r9, [r2]
   1baa0:	mov	r2, #264	; 0x108
   1baa4:	ldr	r3, [r3]
   1baa8:	add	r0, r9, r9, lsl #5
   1baac:	add	r3, r3, r0, lsl #3
   1bab0:	mov	r0, r3
   1bab4:	bl	113b0 <memcpy@plt>
   1bab8:	ldr	r2, [r4, #8]
   1babc:	str	r9, [r4]
   1bac0:	str	r2, [r0, #160]	; 0xa0
   1bac4:	str	r0, [r4, #8]
   1bac8:	b	1ba68 <bfd_arch_bits_per_address@plt+0xa3a0>
   1bacc:	push	{r4, r5, r6, lr}
   1bad0:	mov	r5, r0
   1bad4:	mov	r0, r1
   1bad8:	mov	r6, r1
   1badc:	bl	1b358 <bfd_arch_bits_per_address@plt+0x9c90>
   1bae0:	mov	r0, r5
   1bae4:	mov	r1, #58	; 0x3a
   1bae8:	bl	11620 <strrchr@plt>
   1baec:	subs	r4, r0, #0
   1baf0:	beq	1bb64 <bfd_arch_bits_per_address@plt+0xa49c>
   1baf4:	cmp	r5, r4
   1baf8:	mov	r3, #0
   1bafc:	strb	r3, [r4]
   1bb00:	bcc	1bb44 <bfd_arch_bits_per_address@plt+0xa47c>
   1bb04:	ldrb	r3, [r4, #1]
   1bb08:	cmp	r3, #0
   1bb0c:	popeq	{r4, r5, r6, pc}
   1bb10:	lsl	r3, r3, #1
   1bb14:	movw	r2, #29920	; 0x74e0
   1bb18:	movt	r2, #3
   1bb1c:	add	r0, r4, #1
   1bb20:	ldrh	r3, [r2, r3]
   1bb24:	tst	r3, #4
   1bb28:	streq	r0, [r6, #16]
   1bb2c:	popeq	{r4, r5, r6, pc}
   1bb30:	mov	r1, #0
   1bb34:	mov	r2, #10
   1bb38:	bl	1135c <strtol@plt>
   1bb3c:	str	r0, [r6, #24]
   1bb40:	pop	{r4, r5, r6, pc}
   1bb44:	mov	r0, r5
   1bb48:	bl	1ae4c <bfd_arch_bits_per_address@plt+0x9784>
   1bb4c:	cmp	r0, #0
   1bb50:	str	r0, [r6, #20]
   1bb54:	movweq	r3, #29876	; 0x74b4
   1bb58:	movteq	r3, #3
   1bb5c:	streq	r3, [r6, #20]
   1bb60:	b	1bb04 <bfd_arch_bits_per_address@plt+0xa43c>
   1bb64:	ldrb	r4, [r5]
   1bb68:	cmp	r4, #0
   1bb6c:	popeq	{r4, r5, r6, pc}
   1bb70:	mov	r1, #46	; 0x2e
   1bb74:	mov	r0, r5
   1bb78:	bl	1156c <strchr@plt>
   1bb7c:	subs	r1, r0, #0
   1bb80:	beq	1bba4 <bfd_arch_bits_per_address@plt+0xa4dc>
   1bb84:	mov	r0, r5
   1bb88:	bl	1ae4c <bfd_arch_bits_per_address@plt+0x9784>
   1bb8c:	cmp	r0, #0
   1bb90:	str	r0, [r6, #20]
   1bb94:	movweq	r3, #29876	; 0x74b4
   1bb98:	movteq	r3, #3
   1bb9c:	streq	r3, [r6, #20]
   1bba0:	pop	{r4, r5, r6, pc}
   1bba4:	lsl	r4, r4, #1
   1bba8:	movw	r3, #29920	; 0x74e0
   1bbac:	movt	r3, #3
   1bbb0:	ldrh	r3, [r3, r4]
   1bbb4:	tst	r3, #4
   1bbb8:	streq	r5, [r6, #16]
   1bbbc:	popeq	{r4, r5, r6, pc}
   1bbc0:	mov	r0, r5
   1bbc4:	mov	r2, #10
   1bbc8:	bl	1135c <strtol@plt>
   1bbcc:	str	r0, [r6, #24]
   1bbd0:	pop	{r4, r5, r6, pc}
   1bbd4:	push	{r3, lr}
   1bbd8:	ldr	r3, [r0, #20]
   1bbdc:	cmp	r3, #0
   1bbe0:	beq	1bbf8 <bfd_arch_bits_per_address@plt+0xa530>
   1bbe4:	ldr	r2, [r1, #20]
   1bbe8:	cmp	r3, r2
   1bbec:	beq	1bbf8 <bfd_arch_bits_per_address@plt+0xa530>
   1bbf0:	mov	r0, #0
   1bbf4:	pop	{r3, pc}
   1bbf8:	ldr	r3, [r0, #24]
   1bbfc:	cmp	r3, #0
   1bc00:	beq	1bc10 <bfd_arch_bits_per_address@plt+0xa548>
   1bc04:	ldr	r2, [r1, #24]
   1bc08:	cmp	r3, r2
   1bc0c:	bne	1bbf0 <bfd_arch_bits_per_address@plt+0xa528>
   1bc10:	ldr	r0, [r0, #16]
   1bc14:	cmp	r0, #0
   1bc18:	beq	1bc58 <bfd_arch_bits_per_address@plt+0xa590>
   1bc1c:	ldr	r1, [r1, #16]
   1bc20:	ldrb	r3, [r1]
   1bc24:	cmp	r3, #0
   1bc28:	beq	1bc48 <bfd_arch_bits_per_address@plt+0xa580>
   1bc2c:	movw	r2, #31720	; 0x7be8
   1bc30:	movt	r2, #3
   1bc34:	ldr	r2, [r2]
   1bc38:	ldr	r2, [r2, #4]
   1bc3c:	ldrb	r2, [r2, #24]
   1bc40:	cmp	r2, r3
   1bc44:	addeq	r1, r1, #1
   1bc48:	bl	11350 <strcmp@plt>
   1bc4c:	rsbs	r0, r0, #1
   1bc50:	movcc	r0, #0
   1bc54:	pop	{r3, pc}
   1bc58:	mov	r0, #1
   1bc5c:	pop	{r3, pc}
   1bc60:	push	{r4, r5, r6, lr}
   1bc64:	mov	r5, r1
   1bc68:	mov	r6, r0
   1bc6c:	bl	11560 <strlen@plt>
   1bc70:	add	r0, r0, #576	; 0x240
   1bc74:	add	r0, r0, #1
   1bc78:	bl	11458 <xmalloc@plt>
   1bc7c:	mov	r2, #576	; 0x240
   1bc80:	mov	r1, #0
   1bc84:	mov	r4, r0
   1bc88:	bl	1159c <memset@plt>
   1bc8c:	add	r0, r4, #576	; 0x240
   1bc90:	mov	r1, r6
   1bc94:	str	r0, [r4, #4]
   1bc98:	bl	11488 <strcpy@plt>
   1bc9c:	movw	r3, #30608	; 0x7790
   1bca0:	movt	r3, #3
   1bca4:	str	r5, [r4, #8]
   1bca8:	ldr	r2, [r3]
   1bcac:	str	r4, [r3]
   1bcb0:	str	r2, [r4]
   1bcb4:	pop	{r4, r5, r6, pc}
   1bcb8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bcbc:	movw	r7, #30608	; 0x7790
   1bcc0:	movt	r7, #3
   1bcc4:	movw	r6, #30536	; 0x7748
   1bcc8:	sub	sp, sp, #44	; 0x2c
   1bccc:	movt	r6, #3
   1bcd0:	ldr	r4, [r7]
   1bcd4:	cmp	r4, #0
   1bcd8:	bne	1bdd0 <bfd_arch_bits_per_address@plt+0xa708>
   1bcdc:	b	1be14 <bfd_arch_bits_per_address@plt+0xa74c>
   1bce0:	ldr	r5, [r4, #4]
   1bce4:	mov	r1, #47	; 0x2f
   1bce8:	mov	r0, r5
   1bcec:	bl	1156c <strchr@plt>
   1bcf0:	subs	r8, r0, #0
   1bcf4:	beq	1bd18 <bfd_arch_bits_per_address@plt+0xa650>
   1bcf8:	add	r0, r8, #1
   1bcfc:	add	r1, r4, #312	; 0x138
   1bd00:	bl	1bacc <bfd_arch_bits_per_address@plt+0xa404>
   1bd04:	mov	r3, #0
   1bd08:	strb	r3, [r8]
   1bd0c:	mov	r3, #1
   1bd10:	ldr	r5, [r4, #4]
   1bd14:	str	r3, [r4, #12]
   1bd18:	mov	r0, r5
   1bd1c:	add	r1, r4, #32
   1bd20:	bl	1bacc <bfd_arch_bits_per_address@plt+0xa404>
   1bd24:	ldr	r3, [r6]
   1bd28:	tst	r3, #4096	; 0x1000
   1bd2c:	beq	1bdc4 <bfd_arch_bits_per_address@plt+0xa6fc>
   1bd30:	ldr	r3, [r4, #52]	; 0x34
   1bd34:	movw	r1, #16728	; 0x4158
   1bd38:	mov	r0, #1
   1bd3c:	movt	r1, #2
   1bd40:	cmp	r3, #0
   1bd44:	movweq	r2, #16704	; 0x4140
   1bd48:	ldrne	r2, [r3, #4]
   1bd4c:	movteq	r2, #2
   1bd50:	bl	115e4 <__printf_chk@plt>
   1bd54:	ldr	r2, [r4, #48]	; 0x30
   1bd58:	cmp	r2, #0
   1bd5c:	beq	1bdf4 <bfd_arch_bits_per_address@plt+0xa72c>
   1bd60:	movw	r1, #11168	; 0x2ba0
   1bd64:	mov	r0, #1
   1bd68:	movt	r1, #2
   1bd6c:	bl	115e4 <__printf_chk@plt>
   1bd70:	ldr	r3, [r4, #12]
   1bd74:	cmp	r3, #0
   1bd78:	beq	1bdbc <bfd_arch_bits_per_address@plt+0xa6f4>
   1bd7c:	ldr	r3, [r4, #332]	; 0x14c
   1bd80:	movw	r1, #16736	; 0x4160
   1bd84:	mov	r0, #1
   1bd88:	movt	r1, #2
   1bd8c:	cmp	r3, #0
   1bd90:	movweq	r2, #16704	; 0x4140
   1bd94:	ldrne	r2, [r3, #4]
   1bd98:	movteq	r2, #2
   1bd9c:	bl	115e4 <__printf_chk@plt>
   1bda0:	ldr	r2, [r4, #328]	; 0x148
   1bda4:	cmp	r2, #0
   1bda8:	beq	1c19c <bfd_arch_bits_per_address@plt+0xaad4>
   1bdac:	movw	r1, #11168	; 0x2ba0
   1bdb0:	mov	r0, #1
   1bdb4:	movt	r1, #2
   1bdb8:	bl	115e4 <__printf_chk@plt>
   1bdbc:	mov	r0, #10
   1bdc0:	bl	115b4 <putchar@plt>
   1bdc4:	ldr	r4, [r4]
   1bdc8:	cmp	r4, #0
   1bdcc:	beq	1be14 <bfd_arch_bits_per_address@plt+0xa74c>
   1bdd0:	ldr	r3, [r6]
   1bdd4:	tst	r3, #4096	; 0x1000
   1bdd8:	beq	1bce0 <bfd_arch_bits_per_address@plt+0xa618>
   1bddc:	movw	r1, #16708	; 0x4144
   1bde0:	ldr	r2, [r4, #4]
   1bde4:	movt	r1, #2
   1bde8:	mov	r0, #1
   1bdec:	bl	115e4 <__printf_chk@plt>
   1bdf0:	b	1bce0 <bfd_arch_bits_per_address@plt+0xa618>
   1bdf4:	ldr	r2, [r4, #56]	; 0x38
   1bdf8:	cmp	r2, #0
   1bdfc:	beq	1c1bc <bfd_arch_bits_per_address@plt+0xaaf4>
   1be00:	movw	r1, #16732	; 0x415c
   1be04:	mov	r0, #1
   1be08:	movt	r1, #2
   1be0c:	bl	115e4 <__printf_chk@plt>
   1be10:	b	1bd70 <bfd_arch_bits_per_address@plt+0xa6a8>
   1be14:	movw	r9, #31768	; 0x7c18
   1be18:	movt	r9, #3
   1be1c:	ldr	r4, [r9, #4]
   1be20:	ldr	r3, [r9, #8]
   1be24:	cmp	r4, r3
   1be28:	movwcs	sl, #31780	; 0x7c24
   1be2c:	movtcs	sl, #3
   1be30:	bcs	1bef8 <bfd_arch_bits_per_address@plt+0xa830>
   1be34:	ldr	r8, [r7]
   1be38:	movw	sl, #31780	; 0x7c24
   1be3c:	sub	r5, r4, #264	; 0x108
   1be40:	movt	sl, #3
   1be44:	mov	fp, r3
   1be48:	str	r6, [sp, #36]	; 0x24
   1be4c:	cmp	r8, #0
   1be50:	movne	r6, r8
   1be54:	bne	1be80 <bfd_arch_bits_per_address@plt+0xa7b8>
   1be58:	b	1bee4 <bfd_arch_bits_per_address@plt+0xa81c>
   1be5c:	ldr	r2, [r6, #12]
   1be60:	cmp	r2, #0
   1be64:	beq	1be74 <bfd_arch_bits_per_address@plt+0xa7ac>
   1be68:	bl	1bbd4 <bfd_arch_bits_per_address@plt+0xa50c>
   1be6c:	cmp	r0, #0
   1be70:	bne	1bec0 <bfd_arch_bits_per_address@plt+0xa7f8>
   1be74:	ldr	r6, [r6]
   1be78:	cmp	r6, #0
   1be7c:	beq	1bee4 <bfd_arch_bits_per_address@plt+0xa81c>
   1be80:	mov	r1, r4
   1be84:	add	r0, r6, #32
   1be88:	bl	1bbd4 <bfd_arch_bits_per_address@plt+0xa50c>
   1be8c:	mov	r1, r4
   1be90:	cmp	r0, #0
   1be94:	add	r0, r6, #312	; 0x138
   1be98:	beq	1be5c <bfd_arch_bits_per_address@plt+0xa794>
   1be9c:	ldr	r2, [r6, #8]
   1bea0:	ldr	ip, [r6, #20]
   1bea4:	add	r2, r2, r2, lsl #1
   1bea8:	cmp	ip, r5
   1beac:	ldrne	ip, [sl, r2, lsl #2]
   1beb0:	addne	ip, ip, #1
   1beb4:	strne	ip, [sl, r2, lsl #2]
   1beb8:	str	r4, [r6, #20]
   1bebc:	b	1be5c <bfd_arch_bits_per_address@plt+0xa794>
   1bec0:	ldr	r2, [r6, #300]	; 0x12c
   1bec4:	str	r4, [r6, #300]	; 0x12c
   1bec8:	cmp	r2, r5
   1becc:	ldr	r6, [r6]
   1bed0:	ldrne	r2, [r7, #4]
   1bed4:	addne	r2, r2, #1
   1bed8:	strne	r2, [r7, #4]
   1bedc:	cmp	r6, #0
   1bee0:	bne	1be80 <bfd_arch_bits_per_address@plt+0xa7b8>
   1bee4:	add	r4, r4, #264	; 0x108
   1bee8:	add	r5, r5, #264	; 0x108
   1beec:	cmp	r4, fp
   1bef0:	bcc	1be4c <bfd_arch_bits_per_address@plt+0xa784>
   1bef4:	ldr	r6, [sp, #36]	; 0x24
   1bef8:	ldr	r4, [pc, #768]	; 1c200 <bfd_arch_bits_per_address@plt+0xab38>
   1befc:	mov	r5, #0
   1bf00:	b	1bf14 <bfd_arch_bits_per_address@plt+0xa84c>
   1bf04:	ldr	r3, [pc, #760]	; 1c204 <bfd_arch_bits_per_address@plt+0xab3c>
   1bf08:	cmp	r4, r3
   1bf0c:	add	r4, r4, #12
   1bf10:	bcs	1bf54 <bfd_arch_bits_per_address@plt+0xa88c>
   1bf14:	ldr	r3, [r4, #-12]
   1bf18:	cmp	r3, #0
   1bf1c:	beq	1bf04 <bfd_arch_bits_per_address@plt+0xa83c>
   1bf20:	add	r0, r3, r3, lsl #5
   1bf24:	lsl	r0, r0, #3
   1bf28:	bl	11458 <xmalloc@plt>
   1bf2c:	ldr	r3, [r4, #-12]
   1bf30:	str	r5, [r4, #-12]
   1bf34:	add	r3, r3, r3, lsl #5
   1bf38:	str	r0, [r4, #-8]
   1bf3c:	add	r0, r0, r3, lsl #3
   1bf40:	ldr	r3, [pc, #700]	; 1c204 <bfd_arch_bits_per_address@plt+0xab3c>
   1bf44:	str	r0, [r4, #-4]
   1bf48:	cmp	r4, r3
   1bf4c:	add	r4, r4, #12
   1bf50:	bcc	1bf14 <bfd_arch_bits_per_address@plt+0xa84c>
   1bf54:	ldr	r3, [r7, #4]
   1bf58:	movw	r4, #30608	; 0x7790
   1bf5c:	movt	r4, #3
   1bf60:	cmp	r3, #0
   1bf64:	bne	1c1d4 <bfd_arch_bits_per_address@plt+0xab0c>
   1bf68:	ldr	r5, [r9, #4]
   1bf6c:	ldr	r3, [r9, #8]
   1bf70:	ldr	r8, [r7]
   1bf74:	cmp	r3, r5
   1bf78:	movhi	r7, #1
   1bf7c:	bls	1c028 <bfd_arch_bits_per_address@plt+0xa960>
   1bf80:	cmp	r8, #0
   1bf84:	movne	r4, r8
   1bf88:	bne	1bfbc <bfd_arch_bits_per_address@plt+0xa8f4>
   1bf8c:	b	1c018 <bfd_arch_bits_per_address@plt+0xa950>
   1bf90:	ldr	r3, [r4, #12]
   1bf94:	add	r0, r4, #312	; 0x138
   1bf98:	mov	r1, r5
   1bf9c:	cmp	r3, #0
   1bfa0:	beq	1bfb0 <bfd_arch_bits_per_address@plt+0xa8e8>
   1bfa4:	bl	1bbd4 <bfd_arch_bits_per_address@plt+0xa50c>
   1bfa8:	cmp	r0, #0
   1bfac:	bne	1bff4 <bfd_arch_bits_per_address@plt+0xa92c>
   1bfb0:	ldr	r4, [r4]
   1bfb4:	cmp	r4, #0
   1bfb8:	beq	1c018 <bfd_arch_bits_per_address@plt+0xa950>
   1bfbc:	add	r0, r4, #32
   1bfc0:	mov	r1, r5
   1bfc4:	bl	1bbd4 <bfd_arch_bits_per_address@plt+0xa50c>
   1bfc8:	cmp	r0, #0
   1bfcc:	beq	1bf90 <bfd_arch_bits_per_address@plt+0xa8c8>
   1bfd0:	ldr	r3, [r4, #8]
   1bfd4:	add	r0, r4, #16
   1bfd8:	str	r7, [sp]
   1bfdc:	mov	r1, r5
   1bfe0:	add	r3, r3, r3, lsl #1
   1bfe4:	add	r2, sl, r3, lsl #2
   1bfe8:	add	r3, r2, #4
   1bfec:	bl	1ba38 <bfd_arch_bits_per_address@plt+0xa370>
   1bff0:	b	1bf90 <bfd_arch_bits_per_address@plt+0xa8c8>
   1bff4:	ldr	r2, [pc, #524]	; 1c208 <bfd_arch_bits_per_address@plt+0xab40>
   1bff8:	add	r0, r4, #296	; 0x128
   1bffc:	str	r7, [sp]
   1c000:	mov	r1, r5
   1c004:	add	r3, r2, #4
   1c008:	bl	1ba38 <bfd_arch_bits_per_address@plt+0xa370>
   1c00c:	ldr	r4, [r4]
   1c010:	cmp	r4, #0
   1c014:	bne	1bfbc <bfd_arch_bits_per_address@plt+0xa8f4>
   1c018:	ldr	r3, [r9, #8]
   1c01c:	add	r5, r5, #264	; 0x108
   1c020:	cmp	r3, r5
   1c024:	bhi	1bf80 <bfd_arch_bits_per_address@plt+0xa8b8>
   1c028:	cmp	r8, #0
   1c02c:	beq	1c128 <bfd_arch_bits_per_address@plt+0xaa60>
   1c030:	movw	r7, #16704	; 0x4140
   1c034:	movw	r9, #16656	; 0x4110
   1c038:	movt	r7, #2
   1c03c:	movt	r9, #2
   1c040:	ldr	r3, [r8, #12]
   1c044:	cmp	r3, #0
   1c048:	beq	1c11c <bfd_arch_bits_per_address@plt+0xaa54>
   1c04c:	ldr	r5, [r8, #24]
   1c050:	cmp	r5, #0
   1c054:	beq	1c11c <bfd_arch_bits_per_address@plt+0xaa54>
   1c058:	ldr	r4, [r8, #304]	; 0x130
   1c05c:	cmp	r4, #0
   1c060:	beq	1c110 <bfd_arch_bits_per_address@plt+0xaa48>
   1c064:	ldr	r3, [r6]
   1c068:	tst	r3, #4096	; 0x1000
   1c06c:	beq	1c0f4 <bfd_arch_bits_per_address@plt+0xaa2c>
   1c070:	ldr	r3, [r5, #20]
   1c074:	ldr	r1, [r4, #20]
   1c078:	cmp	r3, #0
   1c07c:	ldr	r0, [r4, #16]
   1c080:	ldr	fp, [r5]
   1c084:	ldrne	r2, [r3, #4]
   1c088:	movweq	r2, #16704	; 0x4140
   1c08c:	ldr	r3, [r5, #16]
   1c090:	movteq	r2, #2
   1c094:	ldr	lr, [r5, #8]
   1c098:	cmp	r3, #0
   1c09c:	moveq	r3, r7
   1c0a0:	cmp	r1, #0
   1c0a4:	ldrne	ip, [r1, #4]
   1c0a8:	movweq	ip, #16704	; 0x4140
   1c0ac:	movteq	ip, #2
   1c0b0:	cmp	r0, #0
   1c0b4:	str	fp, [sp]
   1c0b8:	movw	r1, #16744	; 0x4168
   1c0bc:	str	lr, [sp, #4]
   1c0c0:	moveq	r0, r7
   1c0c4:	str	ip, [sp, #8]
   1c0c8:	movt	r1, #2
   1c0cc:	str	r0, [sp, #12]
   1c0d0:	mov	r0, #1
   1c0d4:	ldr	ip, [r4]
   1c0d8:	str	ip, [sp, #16]
   1c0dc:	ldr	ip, [r4, #8]
   1c0e0:	str	ip, [sp, #20]
   1c0e4:	ldr	ip, [r8, #8]
   1c0e8:	ldr	ip, [r9, ip, lsl #2]
   1c0ec:	str	ip, [sp, #24]
   1c0f0:	bl	115e4 <__printf_chk@plt>
   1c0f4:	mov	r1, r4
   1c0f8:	mov	r2, #0
   1c0fc:	mov	r0, r5
   1c100:	bl	138bc <bfd_arch_bits_per_address@plt+0x21f4>
   1c104:	ldr	r4, [r4, #160]	; 0xa0
   1c108:	cmp	r4, #0
   1c10c:	bne	1c064 <bfd_arch_bits_per_address@plt+0xa99c>
   1c110:	ldr	r5, [r5, #160]	; 0xa0
   1c114:	cmp	r5, #0
   1c118:	bne	1c058 <bfd_arch_bits_per_address@plt+0xa990>
   1c11c:	ldr	r8, [r8]
   1c120:	cmp	r8, #0
   1c124:	bne	1c040 <bfd_arch_bits_per_address@plt+0xa978>
   1c128:	movw	r4, #31780	; 0x7c24
   1c12c:	movw	r5, #16656	; 0x4110
   1c130:	movt	r4, #3
   1c134:	movt	r5, #2
   1c138:	b	1c154 <bfd_arch_bits_per_address@plt+0xaa8c>
   1c13c:	mov	r0, r4
   1c140:	add	r4, r4, #12
   1c144:	bl	1b36c <bfd_arch_bits_per_address@plt+0x9ca4>
   1c148:	ldr	r3, [pc, #180]	; 1c204 <bfd_arch_bits_per_address@plt+0xab3c>
   1c14c:	cmp	r4, r3
   1c150:	beq	1c194 <bfd_arch_bits_per_address@plt+0xaacc>
   1c154:	ldr	r3, [r6]
   1c158:	tst	r3, #4096	; 0x1000
   1c15c:	beq	1c13c <bfd_arch_bits_per_address@plt+0xaa74>
   1c160:	rsb	r3, sl, r4
   1c164:	movw	r1, #16804	; 0x41a4
   1c168:	mov	r0, #1
   1c16c:	movt	r1, #2
   1c170:	asr	r3, r3, #2
   1c174:	add	r2, r3, r3, lsl #2
   1c178:	add	r2, r2, r2, lsl #4
   1c17c:	add	r2, r2, r2, lsl #8
   1c180:	add	r2, r2, r2, lsl #16
   1c184:	add	r3, r3, r2, lsl #1
   1c188:	ldr	r2, [r5, r3, lsl #2]
   1c18c:	bl	115e4 <__printf_chk@plt>
   1c190:	b	1c13c <bfd_arch_bits_per_address@plt+0xaa74>
   1c194:	add	sp, sp, #44	; 0x2c
   1c198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c19c:	ldr	r2, [r4, #336]	; 0x150
   1c1a0:	cmp	r2, #0
   1c1a4:	beq	1c1c8 <bfd_arch_bits_per_address@plt+0xab00>
   1c1a8:	movw	r1, #16732	; 0x415c
   1c1ac:	mov	r0, #1
   1c1b0:	movt	r1, #2
   1c1b4:	bl	115e4 <__printf_chk@plt>
   1c1b8:	b	1bdbc <bfd_arch_bits_per_address@plt+0xa6f4>
   1c1bc:	mov	r0, #42	; 0x2a
   1c1c0:	bl	115b4 <putchar@plt>
   1c1c4:	b	1bd70 <bfd_arch_bits_per_address@plt+0xa6a8>
   1c1c8:	mov	r0, #42	; 0x2a
   1c1cc:	bl	115b4 <putchar@plt>
   1c1d0:	b	1bdbc <bfd_arch_bits_per_address@plt+0xa6f4>
   1c1d4:	add	r0, r3, r3, lsl #5
   1c1d8:	lsl	r0, r0, #3
   1c1dc:	bl	11458 <xmalloc@plt>
   1c1e0:	ldr	r3, [r4, #4]
   1c1e4:	mov	r2, #0
   1c1e8:	str	r2, [r4, #4]
   1c1ec:	add	r3, r3, r3, lsl #5
   1c1f0:	str	r0, [r4, #8]
   1c1f4:	add	r0, r0, r3, lsl #3
   1c1f8:	str	r0, [r4, #12]
   1c1fc:	b	1bf68 <bfd_arch_bits_per_address@plt+0xa8a0>
   1c200:	andeq	r7, r3, r0, lsr ip
   1c204:			; <UNDEFINED> instruction: 0x00037cb4
   1c208:	muleq	r3, r4, r7
   1c20c:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c210:	mov	fp, r0
   1c214:	ldr	r8, [r0, #4]
   1c218:	mov	sl, r1
   1c21c:	ldr	r3, [r0, #8]
   1c220:	mov	r9, r2
   1c224:	cmp	r8, r3
   1c228:	bcc	1c23c <bfd_arch_bits_per_address@plt+0xab74>
   1c22c:	b	1c284 <bfd_arch_bits_per_address@plt+0xabbc>
   1c230:	add	r8, r8, #264	; 0x108
   1c234:	cmp	r3, r8
   1c238:	bls	1c284 <bfd_arch_bits_per_address@plt+0xabbc>
   1c23c:	ldrd	r4, [sl]
   1c240:	ldrd	r6, [r8]
   1c244:	cmp	r5, r7
   1c248:	cmpeq	r4, r6
   1c24c:	bcc	1c230 <bfd_arch_bits_per_address@plt+0xab68>
   1c250:	ldrd	r6, [r8, #8]
   1c254:	cmp	r5, r7
   1c258:	cmpeq	r4, r6
   1c25c:	bhi	1c230 <bfd_arch_bits_per_address@plt+0xab68>
   1c260:	mov	r0, r8
   1c264:	mov	r1, r9
   1c268:	bl	137d8 <bfd_arch_bits_per_address@plt+0x2110>
   1c26c:	cmp	r0, #0
   1c270:	bne	1c28c <bfd_arch_bits_per_address@plt+0xabc4>
   1c274:	ldr	r3, [fp, #8]
   1c278:	add	r8, r8, #264	; 0x108
   1c27c:	cmp	r3, r8
   1c280:	bhi	1c23c <bfd_arch_bits_per_address@plt+0xab74>
   1c284:	mov	r0, #0
   1c288:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c28c:	mov	r0, #1
   1c290:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c294:	andeq	r0, r0, r0
   1c298:	push	{r4, r5, r6, r7, r8, r9, lr}
   1c29c:	movw	r4, #29904	; 0x74d0
   1c2a0:	movt	r4, #3
   1c2a4:	ldr	r5, [r0, #16]
   1c2a8:	sub	sp, sp, #1040	; 0x410
   1c2ac:	mov	r6, r0
   1c2b0:	ldr	r3, [r4]
   1c2b4:	sub	sp, sp, #12
   1c2b8:	cmp	r5, #0
   1c2bc:	str	r3, [sp, #1044]	; 0x414
   1c2c0:	beq	1c3dc <bfd_arch_bits_per_address@plt+0xad14>
   1c2c4:	movw	r3, #30560	; 0x7760
   1c2c8:	movt	r3, #3
   1c2cc:	ldr	r3, [r3]
   1c2d0:	cmp	r3, #0
   1c2d4:	movne	r7, #0
   1c2d8:	bne	1c2f0 <bfd_arch_bits_per_address@plt+0xac28>
   1c2dc:	movw	r3, #29048	; 0x7178
   1c2e0:	movt	r3, #3
   1c2e4:	ldr	r7, [r3]
   1c2e8:	cmp	r7, #0
   1c2ec:	bne	1c484 <bfd_arch_bits_per_address@plt+0xadbc>
   1c2f0:	mov	r2, r5
   1c2f4:	movw	r1, #11168	; 0x2ba0
   1c2f8:	mov	r0, #1
   1c2fc:	movt	r1, #2
   1c300:	bl	115e4 <__printf_chk@plt>
   1c304:	mov	r0, r5
   1c308:	bl	11560 <strlen@plt>
   1c30c:	movw	r3, #30544	; 0x7750
   1c310:	movt	r3, #3
   1c314:	ldr	r9, [r3]
   1c318:	cmp	r9, #0
   1c31c:	mov	r8, r0
   1c320:	mov	r5, r0
   1c324:	beq	1c3fc <bfd_arch_bits_per_address@plt+0xad34>
   1c328:	ldr	r2, [r6, #20]
   1c32c:	cmp	r2, #0
   1c330:	beq	1c3b0 <bfd_arch_bits_per_address@plt+0xace8>
   1c334:	movw	r3, #30548	; 0x7754
   1c338:	movt	r3, #3
   1c33c:	ldr	r5, [r2, #4]
   1c340:	ldr	r3, [r3]
   1c344:	cmp	r3, #0
   1c348:	bne	1c360 <bfd_arch_bits_per_address@plt+0xac98>
   1c34c:	mov	r0, r5
   1c350:	mov	r1, #47	; 0x2f
   1c354:	bl	11620 <strrchr@plt>
   1c358:	cmp	r0, #0
   1c35c:	addne	r5, r0, #1
   1c360:	cmp	r9, #0
   1c364:	str	r5, [sp]
   1c368:	bne	1c438 <bfd_arch_bits_per_address@plt+0xad70>
   1c36c:	ldr	r2, [r6, #24]
   1c370:	add	r5, sp, #20
   1c374:	movw	r3, #17012	; 0x4274
   1c378:	mov	r1, #1
   1c37c:	mov	r0, r5
   1c380:	movt	r3, #2
   1c384:	str	r2, [sp, #4]
   1c388:	mov	r2, #1024	; 0x400
   1c38c:	bl	11590 <__sprintf_chk@plt>
   1c390:	mov	r2, r5
   1c394:	movw	r1, #11168	; 0x2ba0
   1c398:	mov	r0, #1
   1c39c:	movt	r1, #2
   1c3a0:	bl	115e4 <__printf_chk@plt>
   1c3a4:	mov	r0, r5
   1c3a8:	bl	11560 <strlen@plt>
   1c3ac:	add	r5, r0, r8
   1c3b0:	cmp	r7, #0
   1c3b4:	beq	1c3c0 <bfd_arch_bits_per_address@plt+0xacf8>
   1c3b8:	mov	r0, r7
   1c3bc:	bl	11374 <free@plt>
   1c3c0:	movw	r7, #30536	; 0x7748
   1c3c4:	movt	r7, #3
   1c3c8:	ldr	r3, [r7]
   1c3cc:	tst	r3, #2
   1c3d0:	bne	1c468 <bfd_arch_bits_per_address@plt+0xada0>
   1c3d4:	tst	r3, #1024	; 0x400
   1c3d8:	bne	1c414 <bfd_arch_bits_per_address@plt+0xad4c>
   1c3dc:	ldr	r2, [sp, #1044]	; 0x414
   1c3e0:	mov	r0, r5
   1c3e4:	ldr	r3, [r4]
   1c3e8:	cmp	r2, r3
   1c3ec:	bne	1c4ac <bfd_arch_bits_per_address@plt+0xade4>
   1c3f0:	add	sp, sp, #1040	; 0x410
   1c3f4:	add	sp, sp, #12
   1c3f8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1c3fc:	movw	r3, #30564	; 0x7764
   1c400:	movt	r3, #3
   1c404:	ldr	r3, [r3]
   1c408:	cmp	r3, #0
   1c40c:	beq	1c3b0 <bfd_arch_bits_per_address@plt+0xace8>
   1c410:	b	1c328 <bfd_arch_bits_per_address@plt+0xac60>
   1c414:	vldr	d6, [r6, #216]	; 0xd8
   1c418:	vldr	d7, [pc, #144]	; 1c4b0 <bfd_arch_bits_per_address@plt+0xade8>
   1c41c:	vmul.f64	d5, d6, d7
   1c420:	movw	r1, #17032	; 0x4288
   1c424:	mov	r0, #1
   1c428:	movt	r1, #2
   1c42c:	vmov	r2, r3, d5
   1c430:	bl	115e4 <__printf_chk@plt>
   1c434:	b	1c3dc <bfd_arch_bits_per_address@plt+0xad14>
   1c438:	ldr	r1, [r6, #24]
   1c43c:	add	r5, sp, #20
   1c440:	ldr	r2, [r6]
   1c444:	movw	r3, #16996	; 0x4264
   1c448:	mov	r0, r5
   1c44c:	movt	r3, #2
   1c450:	str	r1, [sp, #4]
   1c454:	mov	r1, #1
   1c458:	str	r2, [sp, #8]
   1c45c:	mov	r2, #1024	; 0x400
   1c460:	bl	11590 <__sprintf_chk@plt>
   1c464:	b	1c390 <bfd_arch_bits_per_address@plt+0xacc8>
   1c468:	movw	r1, #17024	; 0x4280
   1c46c:	mov	r0, #1
   1c470:	movt	r1, #2
   1c474:	ldr	r2, [r6, #204]	; 0xcc
   1c478:	bl	115e4 <__printf_chk@plt>
   1c47c:	ldr	r3, [r7]
   1c480:	b	1c3d4 <bfd_arch_bits_per_address@plt+0xad0c>
   1c484:	movw	r3, #31720	; 0x7be8
   1c488:	movt	r3, #3
   1c48c:	mov	r1, r5
   1c490:	mov	r2, #3
   1c494:	ldr	r0, [r3]
   1c498:	bl	11614 <bfd_demangle@plt>
   1c49c:	cmp	r0, #0
   1c4a0:	mov	r7, r0
   1c4a4:	movne	r5, r0
   1c4a8:	b	1c2f0 <bfd_arch_bits_per_address@plt+0xac28>
   1c4ac:	bl	113ec <__stack_chk_fail@plt>
   1c4b0:	andeq	r0, r0, r0
   1c4b4:	subsmi	r0, r9, r0
   1c4b8:	push	{r4, lr}
   1c4bc:	mov	r4, r0
   1c4c0:	bl	1c298 <bfd_arch_bits_per_address@plt+0xabd0>
   1c4c4:	ldr	r3, [r4, #240]	; 0xf0
   1c4c8:	cmp	r3, #0
   1c4cc:	bne	1c510 <bfd_arch_bits_per_address@plt+0xae48>
   1c4d0:	ldr	r2, [r4, #200]	; 0xc8
   1c4d4:	cmp	r2, #0
   1c4d8:	popeq	{r4, pc}
   1c4dc:	ldr	r3, [r4, #208]	; 0xd0
   1c4e0:	cmp	r3, #0
   1c4e4:	bne	1c4fc <bfd_arch_bits_per_address@plt+0xae34>
   1c4e8:	movw	r1, #17064	; 0x42a8
   1c4ec:	mov	r0, #1
   1c4f0:	movt	r1, #2
   1c4f4:	pop	{r4, lr}
   1c4f8:	b	115e4 <__printf_chk@plt>
   1c4fc:	movw	r1, #17056	; 0x42a0
   1c500:	mov	r0, #1
   1c504:	movt	r1, #2
   1c508:	pop	{r4, lr}
   1c50c:	b	115e4 <__printf_chk@plt>
   1c510:	mov	r2, #5
   1c514:	movw	r1, #17044	; 0x4294
   1c518:	mov	r0, #0
   1c51c:	movt	r1, #2
   1c520:	bl	113e0 <dcgettext@plt>
   1c524:	ldr	r2, [r4, #240]	; 0xf0
   1c528:	mov	r1, r0
   1c52c:	mov	r0, #1
   1c530:	bl	115e4 <__printf_chk@plt>
   1c534:	b	1c4d0 <bfd_arch_bits_per_address@plt+0xae08>
   1c538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c53c:	movw	sl, #30536	; 0x7748
   1c540:	movt	sl, #3
   1c544:	mov	r5, r3
   1c548:	sub	sp, sp, #20
   1c54c:	mov	r4, r2
   1c550:	ldr	r3, [sl]
   1c554:	str	r0, [sp, #12]
   1c558:	tst	r3, #256	; 0x100
   1c55c:	bne	1c688 <bfd_arch_bits_per_address@plt+0xafc0>
   1c560:	ldrd	r2, [sp, #56]	; 0x38
   1c564:	cmp	r5, r3
   1c568:	cmpeq	r4, r2
   1c56c:	bcs	1c680 <bfd_arch_bits_per_address@plt+0xafb8>
   1c570:	movw	r9, #31724	; 0x7bec
   1c574:	movw	r8, #31736	; 0x7bf8
   1c578:	movw	fp, #31720	; 0x7be8
   1c57c:	movt	r9, #3
   1c580:	movt	r8, #3
   1c584:	movt	fp, #3
   1c588:	b	1c5a4 <bfd_arch_bits_per_address@plt+0xaedc>
   1c58c:	adds	r4, r4, #1
   1c590:	ldrd	r0, [sp, #56]	; 0x38
   1c594:	adc	r5, r5, #0
   1c598:	cmp	r1, r5
   1c59c:	cmpeq	r0, r4
   1c5a0:	bls	1c680 <bfd_arch_bits_per_address@plt+0xafb8>
   1c5a4:	ldr	r3, [r8]
   1c5a8:	ldr	r2, [r9]
   1c5ac:	ldr	r3, [r3, #32]
   1c5b0:	rsb	r3, r3, r4
   1c5b4:	add	r6, r2, r3
   1c5b8:	ldrb	r3, [r2, r3]
   1c5bc:	cmp	r3, #232	; 0xe8
   1c5c0:	bne	1c58c <bfd_arch_bits_per_address@plt+0xaec4>
   1c5c4:	ldr	r3, [sl]
   1c5c8:	tst	r3, #256	; 0x100
   1c5cc:	beq	1c5e4 <bfd_arch_bits_per_address@plt+0xaf1c>
   1c5d0:	movw	r1, #17104	; 0x42d0
   1c5d4:	mov	r0, #1
   1c5d8:	movt	r1, #2
   1c5dc:	mov	r2, r4
   1c5e0:	bl	115e4 <__printf_chk@plt>
   1c5e4:	ldr	r3, [fp]
   1c5e8:	add	r0, r6, #1
   1c5ec:	ldr	r3, [r3, #4]
   1c5f0:	ldr	r3, [r3, #40]	; 0x28
   1c5f4:	blx	r3
   1c5f8:	adds	r6, r4, #5
   1c5fc:	adc	r7, r5, #0
   1c600:	adds	r6, r6, r0
   1c604:	adc	r7, r7, r1
   1c608:	mov	r0, r6
   1c60c:	bl	1a6d8 <bfd_arch_bits_per_address@plt+0x9010>
   1c610:	cmp	r0, #0
   1c614:	bne	1c634 <bfd_arch_bits_per_address@plt+0xaf6c>
   1c618:	ldr	r3, [sl]
   1c61c:	tst	r3, #256	; 0x100
   1c620:	beq	1c58c <bfd_arch_bits_per_address@plt+0xaec4>
   1c624:	movw	r0, #17148	; 0x42fc
   1c628:	movt	r0, #2
   1c62c:	bl	114e8 <puts@plt>
   1c630:	b	1c58c <bfd_arch_bits_per_address@plt+0xaec4>
   1c634:	movw	r0, #31768	; 0x7c18
   1c638:	mov	r2, r6
   1c63c:	mov	r3, r7
   1c640:	movt	r0, #3
   1c644:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   1c648:	subs	ip, r0, #0
   1c64c:	beq	1c618 <bfd_arch_bits_per_address@plt+0xaf50>
   1c650:	ldrd	r2, [ip]
   1c654:	cmp	r3, r7
   1c658:	cmpeq	r2, r6
   1c65c:	bne	1c618 <bfd_arch_bits_per_address@plt+0xaf50>
   1c660:	ldr	r1, [sl]
   1c664:	tst	r1, #256	; 0x100
   1c668:	bne	1c6ac <bfd_arch_bits_per_address@plt+0xafe4>
   1c66c:	mov	r1, ip
   1c670:	ldr	r0, [sp, #12]
   1c674:	mov	r2, #0
   1c678:	bl	138bc <bfd_arch_bits_per_address@plt+0x21f4>
   1c67c:	b	1c58c <bfd_arch_bits_per_address@plt+0xaec4>
   1c680:	add	sp, sp, #20
   1c684:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c688:	ldr	r2, [r0, #16]
   1c68c:	movw	r1, #17072	; 0x42b0
   1c690:	ldr	r0, [sp, #56]	; 0x38
   1c694:	movt	r1, #2
   1c698:	mov	r3, r4
   1c69c:	str	r0, [sp]
   1c6a0:	mov	r0, #1
   1c6a4:	bl	115e4 <__printf_chk@plt>
   1c6a8:	b	1c560 <bfd_arch_bits_per_address@plt+0xae98>
   1c6ac:	ldr	r3, [ip, #16]
   1c6b0:	movw	r1, #17128	; 0x42e8
   1c6b4:	mov	r0, #1
   1c6b8:	movt	r1, #2
   1c6bc:	str	ip, [sp, #8]
   1c6c0:	bl	115e4 <__printf_chk@plt>
   1c6c4:	ldr	ip, [sp, #8]
   1c6c8:	b	1c66c <bfd_arch_bits_per_address@plt+0xafa4>
   1c6cc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c6d0:	movw	r6, #30624	; 0x77a0
   1c6d4:	movt	r6, #3
   1c6d8:	sub	sp, sp, #52	; 0x34
   1c6dc:	mov	r4, r2
   1c6e0:	mov	r5, r3
   1c6e4:	ldr	r7, [r6, #16]
   1c6e8:	str	r0, [sp, #24]
   1c6ec:	cmp	r7, #0
   1c6f0:	beq	1c9d0 <bfd_arch_bits_per_address@plt+0xb308>
   1c6f4:	movw	fp, #30536	; 0x7748
   1c6f8:	movt	fp, #3
   1c6fc:	ldr	r3, [fp]
   1c700:	tst	r3, #256	; 0x100
   1c704:	bne	1c954 <bfd_arch_bits_per_address@plt+0xb28c>
   1c708:	adds	r4, r4, #3
   1c70c:	mvn	r2, #3
   1c710:	adc	r5, r5, #0
   1c714:	and	r6, r4, r2
   1c718:	mvn	r3, #0
   1c71c:	and	r7, r5, r3
   1c720:	ldrd	r4, [sp, #88]	; 0x58
   1c724:	cmp	r5, r7
   1c728:	cmpeq	r4, r6
   1c72c:	bls	1c844 <bfd_arch_bits_per_address@plt+0xb17c>
   1c730:	movw	r8, #31720	; 0x7be8
   1c734:	movw	sl, #31724	; 0x7bec
   1c738:	movw	r9, #31736	; 0x7bf8
   1c73c:	movw	r5, #17168	; 0x4310
   1c740:	movw	r4, #11092	; 0x2b54
   1c744:	movt	r5, #2
   1c748:	movt	r4, #2
   1c74c:	movt	r8, #3
   1c750:	movt	sl, #3
   1c754:	movt	r9, #3
   1c758:	str	r5, [sp, #28]
   1c75c:	str	r4, [sp, #32]
   1c760:	b	1c7e0 <bfd_arch_bits_per_address@plt+0xb118>
   1c764:	cmp	r3, #-805306368	; 0xd0000000
   1c768:	bne	1c7c8 <bfd_arch_bits_per_address@plt+0xb100>
   1c76c:	ldr	r3, [fp]
   1c770:	tst	r3, #256	; 0x100
   1c774:	bne	1c8dc <bfd_arch_bits_per_address@plt+0xb214>
   1c778:	ubfx	r4, r4, #0, #21
   1c77c:	mov	r2, #1048576	; 0x100000
   1c780:	eor	r2, r2, r4
   1c784:	mov	r0, #4
   1c788:	adds	r4, r2, r6
   1c78c:	movt	r0, #65520	; 0xfff0
   1c790:	mov	r3, #0
   1c794:	adc	r5, r3, r7
   1c798:	strd	r4, [sp, #16]
   1c79c:	adds	r4, r4, r0
   1c7a0:	mvn	r1, #0
   1c7a4:	adc	r5, r5, r1
   1c7a8:	mov	r0, r4
   1c7ac:	bl	1a6d8 <bfd_arch_bits_per_address@plt+0x9010>
   1c7b0:	cmp	r0, #0
   1c7b4:	ldreq	r1, [fp]
   1c7b8:	bne	1c84c <bfd_arch_bits_per_address@plt+0xb184>
   1c7bc:	and	r1, r1, #256	; 0x100
   1c7c0:	cmp	r1, #0
   1c7c4:	bne	1c904 <bfd_arch_bits_per_address@plt+0xb23c>
   1c7c8:	adds	r6, r6, #4
   1c7cc:	ldrd	r4, [sp, #88]	; 0x58
   1c7d0:	adc	r7, r7, #0
   1c7d4:	cmp	r5, r7
   1c7d8:	cmpeq	r4, r6
   1c7dc:	bls	1c844 <bfd_arch_bits_per_address@plt+0xb17c>
   1c7e0:	ldr	r2, [r9]
   1c7e4:	ldr	r3, [r8]
   1c7e8:	ldr	r0, [sl]
   1c7ec:	ldr	r2, [r2, #32]
   1c7f0:	ldr	r3, [r3, #4]
   1c7f4:	rsb	r2, r2, r6
   1c7f8:	add	r0, r0, r2
   1c7fc:	ldr	r3, [r3, #40]	; 0x28
   1c800:	blx	r3
   1c804:	and	r3, r0, #-67108864	; 0xfc000000
   1c808:	mov	r4, r0
   1c80c:	cmp	r3, #1744830464	; 0x68000000
   1c810:	bne	1c764 <bfd_arch_bits_per_address@plt+0xb09c>
   1c814:	and	r3, r0, #16384	; 0x4000
   1c818:	cmp	r3, #16384	; 0x4000
   1c81c:	bne	1c7c8 <bfd_arch_bits_per_address@plt+0xb100>
   1c820:	ldr	r3, [fp]
   1c824:	tst	r3, #256	; 0x100
   1c828:	bne	1c914 <bfd_arch_bits_per_address@plt+0xb24c>
   1c82c:	movw	r1, #30624	; 0x77a0
   1c830:	ldr	r0, [sp, #24]
   1c834:	movt	r1, #3
   1c838:	mov	r2, #0
   1c83c:	bl	138bc <bfd_arch_bits_per_address@plt+0x21f4>
   1c840:	b	1c7c8 <bfd_arch_bits_per_address@plt+0xb100>
   1c844:	add	sp, sp, #52	; 0x34
   1c848:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c84c:	movw	r0, #31768	; 0x7c18
   1c850:	mov	r2, r4
   1c854:	mov	r3, r5
   1c858:	movt	r0, #3
   1c85c:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   1c860:	ldr	r1, [fp]
   1c864:	cmp	r0, #0
   1c868:	str	r0, [sp, #36]	; 0x24
   1c86c:	beq	1c7bc <bfd_arch_bits_per_address@plt+0xb0f4>
   1c870:	ands	r1, r1, #256	; 0x100
   1c874:	movw	ip, #30536	; 0x7748
   1c878:	movt	ip, #3
   1c87c:	bne	1c98c <bfd_arch_bits_per_address@plt+0xb2c4>
   1c880:	ldr	r3, [sp, #36]	; 0x24
   1c884:	ldrd	r2, [r3]
   1c888:	cmp	r3, r5
   1c88c:	cmpeq	r2, r4
   1c890:	strd	r2, [sp, #40]	; 0x28
   1c894:	beq	1c8c0 <bfd_arch_bits_per_address@plt+0xb1f8>
   1c898:	ldrd	r4, [sp, #16]
   1c89c:	movw	r2, #65532	; 0xfffc
   1c8a0:	movt	r2, #65519	; 0xffef
   1c8a4:	mvn	r3, #0
   1c8a8:	adds	r2, r2, r4
   1c8ac:	adc	r3, r3, r5
   1c8b0:	ldrd	r4, [sp, #40]	; 0x28
   1c8b4:	cmp	r5, r3
   1c8b8:	cmpeq	r4, r2
   1c8bc:	bne	1c7c0 <bfd_arch_bits_per_address@plt+0xb0f8>
   1c8c0:	cmp	r1, #0
   1c8c4:	bne	1c9c4 <bfd_arch_bits_per_address@plt+0xb2fc>
   1c8c8:	ldr	r1, [sp, #36]	; 0x24
   1c8cc:	mov	r2, #0
   1c8d0:	ldr	r0, [sp, #24]
   1c8d4:	bl	138bc <bfd_arch_bits_per_address@plt+0x21f4>
   1c8d8:	b	1c7c8 <bfd_arch_bits_per_address@plt+0xb100>
   1c8dc:	mov	r2, #5
   1c8e0:	movw	r1, #17276	; 0x437c
   1c8e4:	mov	r0, #0
   1c8e8:	movt	r1, #2
   1c8ec:	bl	113e0 <dcgettext@plt>
   1c8f0:	mov	r2, r6
   1c8f4:	mov	r1, r0
   1c8f8:	mov	r0, #1
   1c8fc:	bl	115e4 <__printf_chk@plt>
   1c900:	b	1c778 <bfd_arch_bits_per_address@plt+0xb0b0>
   1c904:	movw	r0, #17148	; 0x42fc
   1c908:	movt	r0, #2
   1c90c:	bl	114e8 <puts@plt>
   1c910:	b	1c7c8 <bfd_arch_bits_per_address@plt+0xb100>
   1c914:	mov	r2, #5
   1c918:	movw	r1, #17232	; 0x4350
   1c91c:	mov	r0, #0
   1c920:	movt	r1, #2
   1c924:	bl	113e0 <dcgettext@plt>
   1c928:	and	r3, r4, #49152	; 0xc000
   1c92c:	ldr	r4, [sp, #32]
   1c930:	cmp	r3, #16384	; 0x4000
   1c934:	ldr	r5, [sp, #28]
   1c938:	mov	r2, r6
   1c93c:	moveq	r5, r4
   1c940:	mov	r3, r5
   1c944:	mov	r1, r0
   1c948:	mov	r0, #1
   1c94c:	bl	115e4 <__printf_chk@plt>
   1c950:	b	1c82c <bfd_arch_bits_per_address@plt+0xb164>
   1c954:	mov	r2, #5
   1c958:	movw	r1, #17200	; 0x4330
   1c95c:	mov	r0, #0
   1c960:	movt	r1, #2
   1c964:	bl	113e0 <dcgettext@plt>
   1c968:	ldr	r3, [sp, #88]	; 0x58
   1c96c:	mov	r1, r0
   1c970:	ldr	r0, [sp, #24]
   1c974:	ldr	r2, [r0, #16]
   1c978:	mov	r0, #1
   1c97c:	str	r3, [sp]
   1c980:	mov	r3, r4
   1c984:	bl	115e4 <__printf_chk@plt>
   1c988:	b	1c708 <bfd_arch_bits_per_address@plt+0xb040>
   1c98c:	ldr	r0, [sp, #36]	; 0x24
   1c990:	movw	r1, #17300	; 0x4394
   1c994:	mov	r2, r4
   1c998:	movt	r1, #2
   1c99c:	ldr	lr, [r0]
   1c9a0:	ldr	r3, [r0, #16]
   1c9a4:	mov	r0, #1
   1c9a8:	str	ip, [sp, #12]
   1c9ac:	str	lr, [sp]
   1c9b0:	bl	115e4 <__printf_chk@plt>
   1c9b4:	ldr	ip, [sp, #12]
   1c9b8:	ldr	r1, [ip]
   1c9bc:	and	r1, r1, #256	; 0x100
   1c9c0:	b	1c880 <bfd_arch_bits_per_address@plt+0xb1b8>
   1c9c4:	mov	r0, #10
   1c9c8:	bl	115b4 <putchar@plt>
   1c9cc:	b	1c8c8 <bfd_arch_bits_per_address@plt+0xb200>
   1c9d0:	mov	r0, r6
   1c9d4:	bl	1b358 <bfd_arch_bits_per_address@plt+0x9c90>
   1c9d8:	mov	r2, #5
   1c9dc:	mov	r0, r7
   1c9e0:	movw	r1, #17180	; 0x431c
   1c9e4:	movt	r1, #2
   1c9e8:	bl	113e0 <dcgettext@plt>
   1c9ec:	mov	r2, #0
   1c9f0:	mov	r3, #0
   1c9f4:	str	r6, [r6, #244]	; 0xf4
   1c9f8:	movt	r3, #16368	; 0x3ff0
   1c9fc:	strd	r2, [r6, #216]	; 0xd8
   1ca00:	str	r0, [r6, #16]
   1ca04:	b	1c6f4 <bfd_arch_bits_per_address@plt+0xb02c>
   1ca08:	push	{r3, lr}
   1ca0c:	cmp	r0, #20
   1ca10:	ldrls	pc, [pc, r0, lsl #2]
   1ca14:	b	1cb68 <bfd_arch_bits_per_address@plt+0xb4a0>
   1ca18:	andeq	ip, r1, r8, ror sl
   1ca1c:	andeq	ip, r1, ip, ror #20
   1ca20:	andeq	ip, r1, ip, asr fp
   1ca24:	andeq	ip, r1, r0, asr fp
   1ca28:	andeq	ip, r1, r4, asr #22
   1ca2c:	andeq	ip, r1, r8, lsr fp
   1ca30:	andeq	ip, r1, ip, lsr #22
   1ca34:	andeq	ip, r1, r0, lsr #22
   1ca38:	andeq	ip, r1, r4, lsl fp
   1ca3c:	andeq	ip, r1, r8, lsl #22
   1ca40:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1ca44:	strdeq	ip, [r1], -r0
   1ca48:	andeq	ip, r1, r4, ror #21
   1ca4c:	ldrdeq	ip, [r1], -r8
   1ca50:	andeq	ip, r1, ip, asr #21
   1ca54:	andeq	ip, r1, r0, asr #21
   1ca58:			; <UNDEFINED> instruction: 0x0001cab4
   1ca5c:	andeq	ip, r1, r8, lsr #21
   1ca60:	muleq	r1, ip, sl
   1ca64:	muleq	r1, r0, sl
   1ca68:	andeq	ip, r1, r4, lsl #21
   1ca6c:	movw	r0, #17340	; 0x43bc
   1ca70:	movt	r0, #2
   1ca74:	pop	{r3, pc}
   1ca78:	movw	r0, #17332	; 0x43b4
   1ca7c:	movt	r0, #2
   1ca80:	pop	{r3, pc}
   1ca84:	movw	r0, #17700	; 0x4524
   1ca88:	movt	r0, #2
   1ca8c:	pop	{r3, pc}
   1ca90:	movw	r0, #17684	; 0x4514
   1ca94:	movt	r0, #2
   1ca98:	pop	{r3, pc}
   1ca9c:	movw	r0, #17588	; 0x44b4
   1caa0:	movt	r0, #2
   1caa4:	pop	{r3, pc}
   1caa8:	movw	r0, #17572	; 0x44a4
   1caac:	movt	r0, #2
   1cab0:	pop	{r3, pc}
   1cab4:	movw	r0, #17500	; 0x445c
   1cab8:	movt	r0, #2
   1cabc:	pop	{r3, pc}
   1cac0:	movw	r0, #17484	; 0x444c
   1cac4:	movt	r0, #2
   1cac8:	pop	{r3, pc}
   1cacc:	movw	r0, #17624	; 0x44d8
   1cad0:	movt	r0, #2
   1cad4:	pop	{r3, pc}
   1cad8:	movw	r0, #17612	; 0x44cc
   1cadc:	movt	r0, #2
   1cae0:	pop	{r3, pc}
   1cae4:	movw	r0, #17656	; 0x44f8
   1cae8:	movt	r0, #2
   1caec:	pop	{r3, pc}
   1caf0:	movw	r0, #17636	; 0x44e4
   1caf4:	movt	r0, #2
   1caf8:	pop	{r3, pc}
   1cafc:	movw	r0, #17544	; 0x4488
   1cb00:	movt	r0, #2
   1cb04:	pop	{r3, pc}
   1cb08:	movw	r0, #17524	; 0x4474
   1cb0c:	movt	r0, #2
   1cb10:	pop	{r3, pc}
   1cb14:	movw	r0, #17456	; 0x4430
   1cb18:	movt	r0, #2
   1cb1c:	pop	{r3, pc}
   1cb20:	movw	r0, #17436	; 0x441c
   1cb24:	movt	r0, #2
   1cb28:	pop	{r3, pc}
   1cb2c:	movw	r0, #17412	; 0x4404
   1cb30:	movt	r0, #2
   1cb34:	pop	{r3, pc}
   1cb38:	movw	r0, #17396	; 0x43f4
   1cb3c:	movt	r0, #2
   1cb40:	pop	{r3, pc}
   1cb44:	movw	r0, #17380	; 0x43e4
   1cb48:	movt	r0, #2
   1cb4c:	pop	{r3, pc}
   1cb50:	movw	r0, #17360	; 0x43d0
   1cb54:	movt	r0, #2
   1cb58:	pop	{r3, pc}
   1cb5c:	movw	r0, #17348	; 0x43c4
   1cb60:	movt	r0, #2
   1cb64:	pop	{r3, pc}
   1cb68:	bl	116bc <abort@plt>
   1cb6c:	push	{r3, lr}
   1cb70:	and	r3, r0, #15
   1cb74:	lsr	r0, r0, #4
   1cb78:	cmp	r0, #15
   1cb7c:	ldrls	pc, [pc, r0, lsl #2]
   1cb80:	b	1cc6c <bfd_arch_bits_per_address@plt+0xb5a4>
   1cb84:	andeq	ip, r1, r4, ror #24
   1cb88:	andeq	ip, r1, r4, ror #24
   1cb8c:	andeq	ip, r1, r4, ror #24
   1cb90:	andeq	ip, r1, r4, ror #24
   1cb94:	andeq	ip, r1, r4, asr #23
   1cb98:	andeq	ip, r1, ip, asr #23
   1cb9c:	ldrdeq	ip, [r1], -r4
   1cba0:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1cba4:	andeq	ip, r1, r4, ror #23
   1cba8:	strdeq	ip, [r1], -r4
   1cbac:	andeq	ip, r1, r4, lsl #24
   1cbb0:	andeq	ip, r1, r4, lsl ip
   1cbb4:	andeq	ip, r1, r4, lsr #24
   1cbb8:	andeq	ip, r1, r4, lsr ip
   1cbbc:	andeq	ip, r1, r4, asr #24
   1cbc0:	andeq	ip, r1, r4, asr ip
   1cbc4:	mov	r0, #1
   1cbc8:	pop	{r3, pc}
   1cbcc:	mov	r0, #2
   1cbd0:	pop	{r3, pc}
   1cbd4:	mov	r0, #3
   1cbd8:	pop	{r3, pc}
   1cbdc:	mov	r0, #4
   1cbe0:	pop	{r3, pc}
   1cbe4:	cmp	r3, #15
   1cbe8:	moveq	r0, #13
   1cbec:	movne	r0, #5
   1cbf0:	pop	{r3, pc}
   1cbf4:	cmp	r3, #15
   1cbf8:	moveq	r0, #14
   1cbfc:	movne	r0, #6
   1cc00:	pop	{r3, pc}
   1cc04:	cmp	r3, #15
   1cc08:	moveq	r0, #15
   1cc0c:	movne	r0, #7
   1cc10:	pop	{r3, pc}
   1cc14:	cmp	r3, #15
   1cc18:	moveq	r0, #16
   1cc1c:	movne	r0, #8
   1cc20:	pop	{r3, pc}
   1cc24:	cmp	r3, #15
   1cc28:	moveq	r0, #17
   1cc2c:	movne	r0, #9
   1cc30:	pop	{r3, pc}
   1cc34:	cmp	r3, #15
   1cc38:	moveq	r0, #18
   1cc3c:	movne	r0, #10
   1cc40:	pop	{r3, pc}
   1cc44:	cmp	r3, #15
   1cc48:	moveq	r0, #19
   1cc4c:	movne	r0, #11
   1cc50:	pop	{r3, pc}
   1cc54:	cmp	r3, #15
   1cc58:	moveq	r0, #20
   1cc5c:	movne	r0, #12
   1cc60:	pop	{r3, pc}
   1cc64:	mov	r0, #0
   1cc68:	pop	{r3, pc}
   1cc6c:	bl	116bc <abort@plt>
   1cc70:	push	{r3, r4, r5, lr}
   1cc74:	mov	r5, r0
   1cc78:	mov	r4, #0
   1cc7c:	ldrb	r0, [r5, r4]
   1cc80:	bl	1cb6c <bfd_arch_bits_per_address@plt+0xb4a4>
   1cc84:	cmp	r0, #20
   1cc88:	ldrls	pc, [pc, r0, lsl #2]
   1cc8c:	b	1cd1c <bfd_arch_bits_per_address@plt+0xb654>
   1cc90:	strdeq	ip, [r1], -r8
   1cc94:	strdeq	ip, [r1], -r0
   1cc98:	strdeq	ip, [r1], -r8
   1cc9c:	strdeq	ip, [r1], -r8
   1cca0:	strdeq	ip, [r1], -r8
   1cca4:	strdeq	ip, [r1], -r8
   1cca8:	strdeq	ip, [r1], -r8
   1ccac:	andeq	ip, r1, r4, ror #25
   1ccb0:	andeq	ip, r1, r4, ror #25
   1ccb4:	andeq	ip, r1, r0, lsl sp
   1ccb8:	andeq	ip, r1, r0, lsl sp
   1ccbc:	andeq	ip, r1, r4, lsl #26
   1ccc0:	andeq	ip, r1, r4, lsl #26
   1ccc4:	andeq	ip, r1, r4, lsl #26
   1ccc8:	andeq	ip, r1, r4, lsl #26
   1cccc:	andeq	ip, r1, r4, ror #25
   1ccd0:	andeq	ip, r1, r4, ror #25
   1ccd4:	andeq	ip, r1, r0, lsl sp
   1ccd8:	andeq	ip, r1, r0, lsl sp
   1ccdc:	andeq	ip, r1, r4, lsl #26
   1cce0:	andeq	ip, r1, r4, lsl #26
   1cce4:	mov	r0, #2
   1cce8:	add	r0, r0, r4
   1ccec:	pop	{r3, r4, r5, pc}
   1ccf0:	add	r4, r4, #1
   1ccf4:	b	1cc7c <bfd_arch_bits_per_address@plt+0xb5b4>
   1ccf8:	mov	r0, #1
   1ccfc:	add	r0, r0, r4
   1cd00:	pop	{r3, r4, r5, pc}
   1cd04:	mov	r0, #5
   1cd08:	add	r0, r0, r4
   1cd0c:	pop	{r3, r4, r5, pc}
   1cd10:	mov	r0, #3
   1cd14:	add	r0, r0, r4
   1cd18:	pop	{r3, r4, r5, pc}
   1cd1c:	bl	116bc <abort@plt>
   1cd20:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cd24:	movw	r6, #30888	; 0x78a8
   1cd28:	movt	r6, #3
   1cd2c:	mov	r5, r3
   1cd30:	sub	sp, sp, #36	; 0x24
   1cd34:	mov	r4, r2
   1cd38:	ldr	r3, [r6]
   1cd3c:	str	r0, [sp, #16]
   1cd40:	cmp	r3, #0
   1cd44:	beq	1cec8 <bfd_arch_bits_per_address@plt+0xb800>
   1cd48:	movw	r9, #30536	; 0x7748
   1cd4c:	movt	r9, #3
   1cd50:	ldr	r3, [r9]
   1cd54:	tst	r3, #256	; 0x100
   1cd58:	bne	1cea0 <bfd_arch_bits_per_address@plt+0xb7d8>
   1cd5c:	ldrd	r0, [sp, #72]	; 0x48
   1cd60:	cmp	r5, r1
   1cd64:	cmpeq	r4, r0
   1cd68:	bcs	1ce08 <bfd_arch_bits_per_address@plt+0xb740>
   1cd6c:	movw	sl, #31724	; 0x7bec
   1cd70:	movw	r8, #31736	; 0x7bf8
   1cd74:	movw	fp, #30536	; 0x7748
   1cd78:	movt	sl, #3
   1cd7c:	movt	fp, #3
   1cd80:	movt	r8, #3
   1cd84:	str	fp, [sp, #12]
   1cd88:	b	1cdac <bfd_arch_bits_per_address@plt+0xb6e4>
   1cd8c:	mov	r2, #1
   1cd90:	mov	r3, #0
   1cd94:	adds	r4, r4, r2
   1cd98:	adc	r5, r5, r3
   1cd9c:	ldrd	r2, [sp, #72]	; 0x48
   1cda0:	cmp	r3, r5
   1cda4:	cmpeq	r2, r4
   1cda8:	bls	1ce08 <bfd_arch_bits_per_address@plt+0xb740>
   1cdac:	ldr	r3, [r8]
   1cdb0:	ldr	r2, [sl]
   1cdb4:	ldr	r3, [r3, #32]
   1cdb8:	rsb	r3, r3, r4
   1cdbc:	add	r6, r2, r3
   1cdc0:	ldrb	r3, [r2, r3]
   1cdc4:	cmp	r3, #251	; 0xfb
   1cdc8:	bne	1cd8c <bfd_arch_bits_per_address@plt+0xb6c4>
   1cdcc:	ldr	r3, [r9]
   1cdd0:	ands	fp, r3, #256	; 0x100
   1cdd4:	bne	1ce7c <bfd_arch_bits_per_address@plt+0xb7b4>
   1cdd8:	ldrb	r0, [r6, #1]
   1cddc:	bl	1cb6c <bfd_arch_bits_per_address@plt+0xb4a4>
   1cde0:	subs	r1, r0, #0
   1cde4:	beq	1ce10 <bfd_arch_bits_per_address@plt+0xb748>
   1cde8:	cmp	r1, #13
   1cdec:	beq	1ce10 <bfd_arch_bits_per_address@plt+0xb748>
   1cdf0:	cmp	fp, #0
   1cdf4:	beq	1cd8c <bfd_arch_bits_per_address@plt+0xb6c4>
   1cdf8:	movw	r0, #17888	; 0x45e0
   1cdfc:	movt	r0, #2
   1ce00:	bl	114e8 <puts@plt>
   1ce04:	b	1cd8c <bfd_arch_bits_per_address@plt+0xb6c4>
   1ce08:	add	sp, sp, #36	; 0x24
   1ce0c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ce10:	add	r0, r6, #1
   1ce14:	str	r1, [sp, #8]
   1ce18:	bl	1cc70 <bfd_arch_bits_per_address@plt+0xb5a8>
   1ce1c:	add	r7, r0, #1
   1ce20:	add	r2, r6, r7
   1ce24:	str	r2, [sp, #20]
   1ce28:	ldrb	r0, [r6, r7]
   1ce2c:	bl	1cb6c <bfd_arch_bits_per_address@plt+0xb4a4>
   1ce30:	cmp	fp, #0
   1ce34:	ldr	r1, [sp, #8]
   1ce38:	mov	r3, r0
   1ce3c:	bne	1cef4 <bfd_arch_bits_per_address@plt+0xb82c>
   1ce40:	sub	r3, r3, #3
   1ce44:	cmp	r3, #17
   1ce48:	bhi	1ce70 <bfd_arch_bits_per_address@plt+0xb7a8>
   1ce4c:	mov	fp, #1
   1ce50:	movw	r2, #41633	; 0xa2a1
   1ce54:	lsl	r3, fp, r3
   1ce58:	movt	r2, #2
   1ce5c:	and	r2, r3, r2
   1ce60:	cmp	r2, #0
   1ce64:	bne	1cfec <bfd_arch_bits_per_address@plt+0xb924>
   1ce68:	tst	r3, #86016	; 0x15000
   1ce6c:	bne	1cf3c <bfd_arch_bits_per_address@plt+0xb874>
   1ce70:	ldr	r2, [r9]
   1ce74:	and	fp, r2, #256	; 0x100
   1ce78:	b	1cdf0 <bfd_arch_bits_per_address@plt+0xb728>
   1ce7c:	mov	r2, r4
   1ce80:	movw	r1, #17724	; 0x453c
   1ce84:	mov	r0, #1
   1ce88:	movt	r1, #2
   1ce8c:	bl	115e4 <__printf_chk@plt>
   1ce90:	ldr	r1, [sp, #12]
   1ce94:	ldr	r2, [r1]
   1ce98:	and	fp, r2, #256	; 0x100
   1ce9c:	b	1cdd8 <bfd_arch_bits_per_address@plt+0xb710>
   1cea0:	ldr	r0, [sp, #16]
   1cea4:	movw	r1, #17072	; 0x42b0
   1cea8:	ldr	r3, [sp, #72]	; 0x48
   1ceac:	movt	r1, #2
   1ceb0:	ldr	r2, [r0, #16]
   1ceb4:	mov	r0, #1
   1ceb8:	str	r3, [sp]
   1cebc:	mov	r3, r4
   1cec0:	bl	115e4 <__printf_chk@plt>
   1cec4:	b	1cd5c <bfd_arch_bits_per_address@plt+0xb694>
   1cec8:	mov	r7, r6
   1cecc:	mov	r3, #1
   1ced0:	str	r3, [r7], #8
   1ced4:	mov	r0, r7
   1ced8:	bl	1b358 <bfd_arch_bits_per_address@plt+0x9c90>
   1cedc:	mov	r2, #0
   1cee0:	mov	r3, #0
   1cee4:	str	r7, [r6, #252]	; 0xfc
   1cee8:	movt	r3, #16368	; 0x3ff0
   1ceec:	strd	r2, [r6, #224]	; 0xe0
   1cef0:	b	1cd48 <bfd_arch_bits_per_address@plt+0xb680>
   1cef4:	mov	r0, r1
   1cef8:	str	r3, [sp, #8]
   1cefc:	bl	1ca08 <bfd_arch_bits_per_address@plt+0xb340>
   1cf00:	movw	r1, #17748	; 0x4554
   1cf04:	movt	r1, #2
   1cf08:	mov	r2, r0
   1cf0c:	mov	r0, #1
   1cf10:	bl	115e4 <__printf_chk@plt>
   1cf14:	ldr	r3, [sp, #8]
   1cf18:	mov	r0, r3
   1cf1c:	bl	1ca08 <bfd_arch_bits_per_address@plt+0xb340>
   1cf20:	movw	r1, #17772	; 0x456c
   1cf24:	movt	r1, #2
   1cf28:	mov	r2, r0
   1cf2c:	mov	r0, #1
   1cf30:	bl	115e4 <__printf_chk@plt>
   1cf34:	ldr	r3, [sp, #8]
   1cf38:	b	1ce40 <bfd_arch_bits_per_address@plt+0xb778>
   1cf3c:	ldrb	r0, [r6, r7]
   1cf40:	bl	1cb6c <bfd_arch_bits_per_address@plt+0xb4a4>
   1cf44:	ldr	r1, [sp, #20]
   1cf48:	add	r3, r1, #1
   1cf4c:	cmp	r0, #17
   1cf50:	beq	1d03c <bfd_arch_bits_per_address@plt+0xb974>
   1cf54:	cmp	r0, #19
   1cf58:	beq	1d014 <bfd_arch_bits_per_address@plt+0xb94c>
   1cf5c:	cmp	r0, #15
   1cf60:	beq	1d064 <bfd_arch_bits_per_address@plt+0xb99c>
   1cf64:	movw	r3, #30432	; 0x76e0
   1cf68:	movt	r3, #3
   1cf6c:	mov	r1, fp
   1cf70:	movw	r0, #17796	; 0x4584
   1cf74:	ldr	r3, [r3]
   1cf78:	movt	r0, #2
   1cf7c:	mov	r2, #31
   1cf80:	bl	1144c <fwrite@plt>
   1cf84:	mov	r0, #0
   1cf88:	mov	r1, #0
   1cf8c:	adds	r2, r0, r4
   1cf90:	adc	r3, r1, r5
   1cf94:	strd	r2, [sp, #24]
   1cf98:	ldr	r0, [sp, #24]
   1cf9c:	bl	1a6d8 <bfd_arch_bits_per_address@plt+0x9010>
   1cfa0:	cmp	r0, #0
   1cfa4:	beq	1ce70 <bfd_arch_bits_per_address@plt+0xb7a8>
   1cfa8:	movw	r0, #31768	; 0x7c18
   1cfac:	ldrd	r2, [sp, #24]
   1cfb0:	movt	r0, #3
   1cfb4:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   1cfb8:	subs	r6, r0, #0
   1cfbc:	beq	1ce70 <bfd_arch_bits_per_address@plt+0xb7a8>
   1cfc0:	ldr	r3, [r9]
   1cfc4:	tst	r3, #256	; 0x100
   1cfc8:	bne	1d07c <bfd_arch_bits_per_address@plt+0xb9b4>
   1cfcc:	ldrd	r2, [r6]
   1cfd0:	ldrd	r0, [sp, #24]
   1cfd4:	cmp	r3, r1
   1cfd8:	cmpeq	r2, r0
   1cfdc:	bne	1ce70 <bfd_arch_bits_per_address@plt+0xb7a8>
   1cfe0:	mov	r1, r6
   1cfe4:	ldr	r0, [sp, #16]
   1cfe8:	b	1cff4 <bfd_arch_bits_per_address@plt+0xb92c>
   1cfec:	ldr	r0, [sp, #16]
   1cff0:	ldr	r1, [pc, #196]	; 1d0bc <bfd_arch_bits_per_address@plt+0xb9f4>
   1cff4:	mov	r2, #0
   1cff8:	bl	138bc <bfd_arch_bits_per_address@plt+0x21f4>
   1cffc:	ldr	r0, [sp, #20]
   1d000:	bl	1cc70 <bfd_arch_bits_per_address@plt+0xb5a8>
   1d004:	add	r0, r7, r0
   1d008:	mov	r2, r0
   1d00c:	asr	r3, r0, #31
   1d010:	b	1cd94 <bfd_arch_bits_per_address@plt+0xb6cc>
   1d014:	movw	r2, #31720	; 0x7be8
   1d018:	movt	r2, #3
   1d01c:	mov	r0, r3
   1d020:	ldr	r3, [r2]
   1d024:	ldr	r3, [r3, #4]
   1d028:	ldr	r3, [r3, #44]	; 0x2c
   1d02c:	blx	r3
   1d030:	adds	r0, r0, #4
   1d034:	adc	r1, r1, #0
   1d038:	b	1cf8c <bfd_arch_bits_per_address@plt+0xb8c4>
   1d03c:	movw	r2, #31720	; 0x7be8
   1d040:	movt	r2, #3
   1d044:	mov	r0, r3
   1d048:	ldr	r3, [r2]
   1d04c:	ldr	r3, [r3, #4]
   1d050:	ldr	r3, [r3, #56]	; 0x38
   1d054:	blx	r3
   1d058:	adds	r0, r0, #2
   1d05c:	adc	r1, r1, #0
   1d060:	b	1cf8c <bfd_arch_bits_per_address@plt+0xb8c4>
   1d064:	ldr	r2, [sp, #20]
   1d068:	ldrb	r0, [r2, #1]
   1d06c:	eor	r0, r0, #128	; 0x80
   1d070:	sub	r0, r0, #127	; 0x7f
   1d074:	asr	r1, r0, #31
   1d078:	b	1cf8c <bfd_arch_bits_per_address@plt+0xb8c4>
   1d07c:	ldr	r2, [sp, #24]
   1d080:	movw	r1, #17828	; 0x45a4
   1d084:	mov	r0, #1
   1d088:	movt	r1, #2
   1d08c:	bl	115e4 <__printf_chk@plt>
   1d090:	ldr	r2, [r6, #16]
   1d094:	movw	r1, #17852	; 0x45bc
   1d098:	mov	r0, #1
   1d09c:	movt	r1, #2
   1d0a0:	bl	115e4 <__printf_chk@plt>
   1d0a4:	movw	r1, #17868	; 0x45cc
   1d0a8:	ldr	r2, [r6]
   1d0ac:	movt	r1, #2
   1d0b0:	mov	r0, #1
   1d0b4:	bl	115e4 <__printf_chk@plt>
   1d0b8:	b	1cfcc <bfd_arch_bits_per_address@plt+0xb904>
   1d0bc:			; <UNDEFINED> instruction: 0x000378b0
   1d0c0:	push	{r3, lr}
   1d0c4:	cmp	r0, #20
   1d0c8:	ldrls	pc, [pc, r0, lsl #2]
   1d0cc:	b	1d220 <bfd_arch_bits_per_address@plt+0xbb58>
   1d0d0:	andeq	sp, r1, r0, lsr r1
   1d0d4:	andeq	sp, r1, r4, lsr #2
   1d0d8:	andeq	sp, r1, r4, lsl r2
   1d0dc:	andeq	sp, r1, r8, lsl #4
   1d0e0:	strdeq	sp, [r1], -ip
   1d0e4:	strdeq	sp, [r1], -r0
   1d0e8:	andeq	sp, r1, r4, ror #3
   1d0ec:	ldrdeq	sp, [r1], -r8
   1d0f0:	andeq	sp, r1, ip, asr #3
   1d0f4:	andeq	sp, r1, r0, asr #3
   1d0f8:			; <UNDEFINED> instruction: 0x0001d1b4
   1d0fc:	andeq	sp, r1, r8, lsr #3
   1d100:	muleq	r1, ip, r1
   1d104:	muleq	r1, r0, r1
   1d108:	andeq	sp, r1, r4, lsl #3
   1d10c:	andeq	sp, r1, r8, ror r1
   1d110:	andeq	sp, r1, ip, ror #2
   1d114:	andeq	sp, r1, r0, ror #2
   1d118:	andeq	sp, r1, r4, asr r1
   1d11c:	andeq	sp, r1, r8, asr #2
   1d120:	andeq	sp, r1, ip, lsr r1
   1d124:	movw	r0, #17340	; 0x43bc
   1d128:	movt	r0, #2
   1d12c:	pop	{r3, pc}
   1d130:	movw	r0, #17332	; 0x43b4
   1d134:	movt	r0, #2
   1d138:	pop	{r3, pc}
   1d13c:	movw	r0, #17700	; 0x4524
   1d140:	movt	r0, #2
   1d144:	pop	{r3, pc}
   1d148:	movw	r0, #17684	; 0x4514
   1d14c:	movt	r0, #2
   1d150:	pop	{r3, pc}
   1d154:	movw	r0, #17588	; 0x44b4
   1d158:	movt	r0, #2
   1d15c:	pop	{r3, pc}
   1d160:	movw	r0, #17572	; 0x44a4
   1d164:	movt	r0, #2
   1d168:	pop	{r3, pc}
   1d16c:	movw	r0, #17500	; 0x445c
   1d170:	movt	r0, #2
   1d174:	pop	{r3, pc}
   1d178:	movw	r0, #17484	; 0x444c
   1d17c:	movt	r0, #2
   1d180:	pop	{r3, pc}
   1d184:	movw	r0, #17624	; 0x44d8
   1d188:	movt	r0, #2
   1d18c:	pop	{r3, pc}
   1d190:	movw	r0, #17612	; 0x44cc
   1d194:	movt	r0, #2
   1d198:	pop	{r3, pc}
   1d19c:	movw	r0, #17656	; 0x44f8
   1d1a0:	movt	r0, #2
   1d1a4:	pop	{r3, pc}
   1d1a8:	movw	r0, #17636	; 0x44e4
   1d1ac:	movt	r0, #2
   1d1b0:	pop	{r3, pc}
   1d1b4:	movw	r0, #17544	; 0x4488
   1d1b8:	movt	r0, #2
   1d1bc:	pop	{r3, pc}
   1d1c0:	movw	r0, #17524	; 0x4474
   1d1c4:	movt	r0, #2
   1d1c8:	pop	{r3, pc}
   1d1cc:	movw	r0, #17456	; 0x4430
   1d1d0:	movt	r0, #2
   1d1d4:	pop	{r3, pc}
   1d1d8:	movw	r0, #17436	; 0x441c
   1d1dc:	movt	r0, #2
   1d1e0:	pop	{r3, pc}
   1d1e4:	movw	r0, #17412	; 0x4404
   1d1e8:	movt	r0, #2
   1d1ec:	pop	{r3, pc}
   1d1f0:	movw	r0, #17396	; 0x43f4
   1d1f4:	movt	r0, #2
   1d1f8:	pop	{r3, pc}
   1d1fc:	movw	r0, #17380	; 0x43e4
   1d200:	movt	r0, #2
   1d204:	pop	{r3, pc}
   1d208:	movw	r0, #17360	; 0x43d0
   1d20c:	movt	r0, #2
   1d210:	pop	{r3, pc}
   1d214:	movw	r0, #17348	; 0x43c4
   1d218:	movt	r0, #2
   1d21c:	pop	{r3, pc}
   1d220:	bl	116bc <abort@plt>
   1d224:	push	{r3, lr}
   1d228:	and	r3, r0, #15
   1d22c:	lsr	r0, r0, #4
   1d230:	cmp	r0, #15
   1d234:	ldrls	pc, [pc, r0, lsl #2]
   1d238:	b	1d324 <bfd_arch_bits_per_address@plt+0xbc5c>
   1d23c:	andeq	sp, r1, ip, lsl r3
   1d240:	andeq	sp, r1, ip, lsl r3
   1d244:	andeq	sp, r1, ip, lsl r3
   1d248:	andeq	sp, r1, ip, lsl r3
   1d24c:	andeq	sp, r1, ip, ror r2
   1d250:	andeq	sp, r1, r4, lsl #5
   1d254:	andeq	sp, r1, ip, lsl #5
   1d258:	muleq	r1, r4, r2
   1d25c:	muleq	r1, ip, r2
   1d260:	andeq	sp, r1, ip, lsr #5
   1d264:			; <UNDEFINED> instruction: 0x0001d2bc
   1d268:	andeq	sp, r1, ip, asr #5
   1d26c:	ldrdeq	sp, [r1], -ip
   1d270:	andeq	sp, r1, ip, ror #5
   1d274:	strdeq	sp, [r1], -ip
   1d278:	andeq	sp, r1, ip, lsl #6
   1d27c:	mov	r0, #1
   1d280:	pop	{r3, pc}
   1d284:	mov	r0, #2
   1d288:	pop	{r3, pc}
   1d28c:	mov	r0, #3
   1d290:	pop	{r3, pc}
   1d294:	mov	r0, #4
   1d298:	pop	{r3, pc}
   1d29c:	cmp	r3, #14
   1d2a0:	moveq	r0, #13
   1d2a4:	movne	r0, #5
   1d2a8:	pop	{r3, pc}
   1d2ac:	cmp	r3, #15
   1d2b0:	moveq	r0, #14
   1d2b4:	movne	r0, #6
   1d2b8:	pop	{r3, pc}
   1d2bc:	cmp	r3, #15
   1d2c0:	moveq	r0, #15
   1d2c4:	movne	r0, #7
   1d2c8:	pop	{r3, pc}
   1d2cc:	cmp	r3, #15
   1d2d0:	moveq	r0, #16
   1d2d4:	movne	r0, #8
   1d2d8:	pop	{r3, pc}
   1d2dc:	cmp	r3, #15
   1d2e0:	moveq	r0, #17
   1d2e4:	movne	r0, #9
   1d2e8:	pop	{r3, pc}
   1d2ec:	cmp	r3, #15
   1d2f0:	moveq	r0, #18
   1d2f4:	movne	r0, #10
   1d2f8:	pop	{r3, pc}
   1d2fc:	cmp	r3, #15
   1d300:	moveq	r0, #19
   1d304:	movne	r0, #11
   1d308:	pop	{r3, pc}
   1d30c:	cmp	r3, #15
   1d310:	moveq	r0, #20
   1d314:	movne	r0, #12
   1d318:	pop	{r3, pc}
   1d31c:	mov	r0, #0
   1d320:	pop	{r3, pc}
   1d324:	bl	116bc <abort@plt>
   1d328:	push	{r3, r4, r5, lr}
   1d32c:	mov	r5, r0
   1d330:	mov	r4, #0
   1d334:	ldrb	r0, [r5, r4]
   1d338:	bl	1d224 <bfd_arch_bits_per_address@plt+0xbb5c>
   1d33c:	cmp	r0, #20
   1d340:	ldrls	pc, [pc, r0, lsl #2]
   1d344:	b	1d3d4 <bfd_arch_bits_per_address@plt+0xbd0c>
   1d348:			; <UNDEFINED> instruction: 0x0001d3b0
   1d34c:	andeq	sp, r1, r8, lsr #7
   1d350:			; <UNDEFINED> instruction: 0x0001d3b0
   1d354:			; <UNDEFINED> instruction: 0x0001d3b0
   1d358:			; <UNDEFINED> instruction: 0x0001d3b0
   1d35c:			; <UNDEFINED> instruction: 0x0001d3b0
   1d360:			; <UNDEFINED> instruction: 0x0001d3b0
   1d364:	muleq	r1, ip, r3
   1d368:	muleq	r1, ip, r3
   1d36c:	andeq	sp, r1, r8, asr #7
   1d370:	andeq	sp, r1, r8, asr #7
   1d374:			; <UNDEFINED> instruction: 0x0001d3bc
   1d378:			; <UNDEFINED> instruction: 0x0001d3bc
   1d37c:			; <UNDEFINED> instruction: 0x0001d3bc
   1d380:			; <UNDEFINED> instruction: 0x0001d3bc
   1d384:	muleq	r1, ip, r3
   1d388:	muleq	r1, ip, r3
   1d38c:	andeq	sp, r1, r8, asr #7
   1d390:	andeq	sp, r1, r8, asr #7
   1d394:			; <UNDEFINED> instruction: 0x0001d3bc
   1d398:			; <UNDEFINED> instruction: 0x0001d3bc
   1d39c:	mov	r0, #2
   1d3a0:	add	r0, r0, r4
   1d3a4:	pop	{r3, r4, r5, pc}
   1d3a8:	add	r4, r4, #1
   1d3ac:	b	1d334 <bfd_arch_bits_per_address@plt+0xbc6c>
   1d3b0:	mov	r0, #1
   1d3b4:	add	r0, r0, r4
   1d3b8:	pop	{r3, r4, r5, pc}
   1d3bc:	mov	r0, #5
   1d3c0:	add	r0, r0, r4
   1d3c4:	pop	{r3, r4, r5, pc}
   1d3c8:	mov	r0, #3
   1d3cc:	add	r0, r0, r4
   1d3d0:	pop	{r3, r4, r5, pc}
   1d3d4:	bl	116bc <abort@plt>
   1d3d8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d3dc:	movw	r6, #31160	; 0x79b8
   1d3e0:	movt	r6, #3
   1d3e4:	mov	r5, r3
   1d3e8:	sub	sp, sp, #36	; 0x24
   1d3ec:	mov	r4, r2
   1d3f0:	ldr	r3, [r6]
   1d3f4:	str	r0, [sp, #16]
   1d3f8:	cmp	r3, #0
   1d3fc:	beq	1d580 <bfd_arch_bits_per_address@plt+0xbeb8>
   1d400:	movw	r9, #30536	; 0x7748
   1d404:	movt	r9, #3
   1d408:	ldr	r3, [r9]
   1d40c:	tst	r3, #256	; 0x100
   1d410:	bne	1d558 <bfd_arch_bits_per_address@plt+0xbe90>
   1d414:	ldrd	r0, [sp, #72]	; 0x48
   1d418:	cmp	r5, r1
   1d41c:	cmpeq	r4, r0
   1d420:	bcs	1d4c0 <bfd_arch_bits_per_address@plt+0xbdf8>
   1d424:	movw	sl, #31724	; 0x7bec
   1d428:	movw	r8, #31736	; 0x7bf8
   1d42c:	movw	fp, #30536	; 0x7748
   1d430:	movt	sl, #3
   1d434:	movt	fp, #3
   1d438:	movt	r8, #3
   1d43c:	str	fp, [sp, #12]
   1d440:	b	1d464 <bfd_arch_bits_per_address@plt+0xbd9c>
   1d444:	mov	r2, #1
   1d448:	mov	r3, #0
   1d44c:	adds	r4, r4, r2
   1d450:	adc	r5, r5, r3
   1d454:	ldrd	r2, [sp, #72]	; 0x48
   1d458:	cmp	r3, r5
   1d45c:	cmpeq	r2, r4
   1d460:	bls	1d4c0 <bfd_arch_bits_per_address@plt+0xbdf8>
   1d464:	ldr	r3, [r8]
   1d468:	ldr	r2, [sl]
   1d46c:	ldr	r3, [r3, #32]
   1d470:	rsb	r3, r3, r4
   1d474:	add	r6, r2, r3
   1d478:	ldrb	r3, [r2, r3]
   1d47c:	cmp	r3, #254	; 0xfe
   1d480:	bne	1d444 <bfd_arch_bits_per_address@plt+0xbd7c>
   1d484:	ldr	r3, [r9]
   1d488:	ands	fp, r3, #256	; 0x100
   1d48c:	bne	1d534 <bfd_arch_bits_per_address@plt+0xbe6c>
   1d490:	ldrb	r0, [r6, #1]
   1d494:	bl	1d224 <bfd_arch_bits_per_address@plt+0xbb5c>
   1d498:	subs	r1, r0, #0
   1d49c:	beq	1d4c8 <bfd_arch_bits_per_address@plt+0xbe00>
   1d4a0:	cmp	r1, #13
   1d4a4:	beq	1d4c8 <bfd_arch_bits_per_address@plt+0xbe00>
   1d4a8:	cmp	fp, #0
   1d4ac:	beq	1d444 <bfd_arch_bits_per_address@plt+0xbd7c>
   1d4b0:	movw	r0, #17888	; 0x45e0
   1d4b4:	movt	r0, #2
   1d4b8:	bl	114e8 <puts@plt>
   1d4bc:	b	1d444 <bfd_arch_bits_per_address@plt+0xbd7c>
   1d4c0:	add	sp, sp, #36	; 0x24
   1d4c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d4c8:	add	r0, r6, #1
   1d4cc:	str	r1, [sp, #8]
   1d4d0:	bl	1d328 <bfd_arch_bits_per_address@plt+0xbc60>
   1d4d4:	add	r7, r0, #1
   1d4d8:	add	r2, r6, r7
   1d4dc:	str	r2, [sp, #20]
   1d4e0:	ldrb	r0, [r6, r7]
   1d4e4:	bl	1d224 <bfd_arch_bits_per_address@plt+0xbb5c>
   1d4e8:	cmp	fp, #0
   1d4ec:	ldr	r1, [sp, #8]
   1d4f0:	mov	r3, r0
   1d4f4:	bne	1d5ac <bfd_arch_bits_per_address@plt+0xbee4>
   1d4f8:	sub	r3, r3, #3
   1d4fc:	cmp	r3, #17
   1d500:	bhi	1d528 <bfd_arch_bits_per_address@plt+0xbe60>
   1d504:	mov	fp, #1
   1d508:	movw	r2, #41633	; 0xa2a1
   1d50c:	lsl	r3, fp, r3
   1d510:	movt	r2, #2
   1d514:	and	r2, r3, r2
   1d518:	cmp	r2, #0
   1d51c:	bne	1d6a4 <bfd_arch_bits_per_address@plt+0xbfdc>
   1d520:	tst	r3, #86016	; 0x15000
   1d524:	bne	1d5f4 <bfd_arch_bits_per_address@plt+0xbf2c>
   1d528:	ldr	r2, [r9]
   1d52c:	and	fp, r2, #256	; 0x100
   1d530:	b	1d4a8 <bfd_arch_bits_per_address@plt+0xbde0>
   1d534:	mov	r2, r4
   1d538:	movw	r1, #17916	; 0x45fc
   1d53c:	mov	r0, #1
   1d540:	movt	r1, #2
   1d544:	bl	115e4 <__printf_chk@plt>
   1d548:	ldr	r1, [sp, #12]
   1d54c:	ldr	r2, [r1]
   1d550:	and	fp, r2, #256	; 0x100
   1d554:	b	1d490 <bfd_arch_bits_per_address@plt+0xbdc8>
   1d558:	ldr	r0, [sp, #16]
   1d55c:	movw	r1, #17072	; 0x42b0
   1d560:	ldr	r3, [sp, #72]	; 0x48
   1d564:	movt	r1, #2
   1d568:	ldr	r2, [r0, #16]
   1d56c:	mov	r0, #1
   1d570:	str	r3, [sp]
   1d574:	mov	r3, r4
   1d578:	bl	115e4 <__printf_chk@plt>
   1d57c:	b	1d414 <bfd_arch_bits_per_address@plt+0xbd4c>
   1d580:	mov	r7, r6
   1d584:	mov	r3, #1
   1d588:	str	r3, [r7], #8
   1d58c:	mov	r0, r7
   1d590:	bl	1b358 <bfd_arch_bits_per_address@plt+0x9c90>
   1d594:	mov	r2, #0
   1d598:	mov	r3, #0
   1d59c:	str	r7, [r6, #252]	; 0xfc
   1d5a0:	movt	r3, #16368	; 0x3ff0
   1d5a4:	strd	r2, [r6, #224]	; 0xe0
   1d5a8:	b	1d400 <bfd_arch_bits_per_address@plt+0xbd38>
   1d5ac:	mov	r0, r1
   1d5b0:	str	r3, [sp, #8]
   1d5b4:	bl	1d0c0 <bfd_arch_bits_per_address@plt+0xb9f8>
   1d5b8:	movw	r1, #17748	; 0x4554
   1d5bc:	movt	r1, #2
   1d5c0:	mov	r2, r0
   1d5c4:	mov	r0, #1
   1d5c8:	bl	115e4 <__printf_chk@plt>
   1d5cc:	ldr	r3, [sp, #8]
   1d5d0:	mov	r0, r3
   1d5d4:	bl	1d0c0 <bfd_arch_bits_per_address@plt+0xb9f8>
   1d5d8:	movw	r1, #17772	; 0x456c
   1d5dc:	movt	r1, #2
   1d5e0:	mov	r2, r0
   1d5e4:	mov	r0, #1
   1d5e8:	bl	115e4 <__printf_chk@plt>
   1d5ec:	ldr	r3, [sp, #8]
   1d5f0:	b	1d4f8 <bfd_arch_bits_per_address@plt+0xbe30>
   1d5f4:	ldrb	r0, [r6, r7]
   1d5f8:	bl	1d224 <bfd_arch_bits_per_address@plt+0xbb5c>
   1d5fc:	ldr	r1, [sp, #20]
   1d600:	add	r3, r1, #1
   1d604:	cmp	r0, #17
   1d608:	beq	1d6f4 <bfd_arch_bits_per_address@plt+0xc02c>
   1d60c:	cmp	r0, #19
   1d610:	beq	1d6cc <bfd_arch_bits_per_address@plt+0xc004>
   1d614:	cmp	r0, #15
   1d618:	beq	1d71c <bfd_arch_bits_per_address@plt+0xc054>
   1d61c:	movw	r3, #30432	; 0x76e0
   1d620:	movt	r3, #3
   1d624:	mov	r1, fp
   1d628:	movw	r0, #17796	; 0x4584
   1d62c:	ldr	r3, [r3]
   1d630:	movt	r0, #2
   1d634:	mov	r2, #31
   1d638:	bl	1144c <fwrite@plt>
   1d63c:	mov	r0, #0
   1d640:	mov	r1, #0
   1d644:	adds	r2, r0, r4
   1d648:	adc	r3, r1, r5
   1d64c:	strd	r2, [sp, #24]
   1d650:	ldr	r0, [sp, #24]
   1d654:	bl	1a6d8 <bfd_arch_bits_per_address@plt+0x9010>
   1d658:	cmp	r0, #0
   1d65c:	beq	1d528 <bfd_arch_bits_per_address@plt+0xbe60>
   1d660:	movw	r0, #31768	; 0x7c18
   1d664:	ldrd	r2, [sp, #24]
   1d668:	movt	r0, #3
   1d66c:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   1d670:	subs	r6, r0, #0
   1d674:	beq	1d528 <bfd_arch_bits_per_address@plt+0xbe60>
   1d678:	ldr	r3, [r9]
   1d67c:	tst	r3, #256	; 0x100
   1d680:	bne	1d734 <bfd_arch_bits_per_address@plt+0xc06c>
   1d684:	ldrd	r2, [r6]
   1d688:	ldrd	r0, [sp, #24]
   1d68c:	cmp	r3, r1
   1d690:	cmpeq	r2, r0
   1d694:	bne	1d528 <bfd_arch_bits_per_address@plt+0xbe60>
   1d698:	mov	r1, r6
   1d69c:	ldr	r0, [sp, #16]
   1d6a0:	b	1d6ac <bfd_arch_bits_per_address@plt+0xbfe4>
   1d6a4:	ldr	r0, [sp, #16]
   1d6a8:	ldr	r1, [pc, #196]	; 1d774 <bfd_arch_bits_per_address@plt+0xc0ac>
   1d6ac:	mov	r2, #0
   1d6b0:	bl	138bc <bfd_arch_bits_per_address@plt+0x21f4>
   1d6b4:	ldr	r0, [sp, #20]
   1d6b8:	bl	1d328 <bfd_arch_bits_per_address@plt+0xbc60>
   1d6bc:	add	r0, r7, r0
   1d6c0:	mov	r2, r0
   1d6c4:	asr	r3, r0, #31
   1d6c8:	b	1d44c <bfd_arch_bits_per_address@plt+0xbd84>
   1d6cc:	movw	r2, #31720	; 0x7be8
   1d6d0:	movt	r2, #3
   1d6d4:	mov	r0, r3
   1d6d8:	ldr	r3, [r2]
   1d6dc:	ldr	r3, [r3, #4]
   1d6e0:	ldr	r3, [r3, #44]	; 0x2c
   1d6e4:	blx	r3
   1d6e8:	adds	r0, r0, #4
   1d6ec:	adc	r1, r1, #0
   1d6f0:	b	1d644 <bfd_arch_bits_per_address@plt+0xbf7c>
   1d6f4:	movw	r2, #31720	; 0x7be8
   1d6f8:	movt	r2, #3
   1d6fc:	mov	r0, r3
   1d700:	ldr	r3, [r2]
   1d704:	ldr	r3, [r3, #4]
   1d708:	ldr	r3, [r3, #56]	; 0x38
   1d70c:	blx	r3
   1d710:	adds	r0, r0, #2
   1d714:	adc	r1, r1, #0
   1d718:	b	1d644 <bfd_arch_bits_per_address@plt+0xbf7c>
   1d71c:	ldr	r2, [sp, #20]
   1d720:	ldrb	r0, [r2, #1]
   1d724:	eor	r0, r0, #128	; 0x80
   1d728:	sub	r0, r0, #127	; 0x7f
   1d72c:	asr	r1, r0, #31
   1d730:	b	1d644 <bfd_arch_bits_per_address@plt+0xbf7c>
   1d734:	ldr	r2, [sp, #24]
   1d738:	movw	r1, #17828	; 0x45a4
   1d73c:	mov	r0, #1
   1d740:	movt	r1, #2
   1d744:	bl	115e4 <__printf_chk@plt>
   1d748:	ldr	r2, [r6, #16]
   1d74c:	movw	r1, #17852	; 0x45bc
   1d750:	mov	r0, #1
   1d754:	movt	r1, #2
   1d758:	bl	115e4 <__printf_chk@plt>
   1d75c:	movw	r1, #17868	; 0x45cc
   1d760:	ldr	r2, [r6]
   1d764:	movt	r1, #2
   1d768:	mov	r0, #1
   1d76c:	bl	115e4 <__printf_chk@plt>
   1d770:	b	1d684 <bfd_arch_bits_per_address@plt+0xbfbc>
   1d774:	andeq	r7, r3, r0, asr #19
   1d778:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d77c:	movw	r6, #30536	; 0x7748
   1d780:	movt	r6, #3
   1d784:	mov	fp, r3
   1d788:	sub	sp, sp, #20
   1d78c:	mov	sl, r2
   1d790:	ldr	r3, [r6]
   1d794:	str	r0, [sp, #12]
   1d798:	tst	r3, #256	; 0x100
   1d79c:	bne	1d930 <bfd_arch_bits_per_address@plt+0xc268>
   1d7a0:	adds	sl, sl, #3
   1d7a4:	mvn	r2, #3
   1d7a8:	adc	fp, fp, #0
   1d7ac:	mvn	r3, #0
   1d7b0:	and	sl, sl, r2
   1d7b4:	and	fp, fp, r3
   1d7b8:	ldrd	r2, [sp, #56]	; 0x38
   1d7bc:	cmp	r3, fp
   1d7c0:	cmpeq	r2, sl
   1d7c4:	bls	1d8fc <bfd_arch_bits_per_address@plt+0xc234>
   1d7c8:	movw	r9, #31720	; 0x7be8
   1d7cc:	movw	r8, #31724	; 0x7bec
   1d7d0:	movw	r7, #31736	; 0x7bf8
   1d7d4:	movt	r9, #3
   1d7d8:	movt	r8, #3
   1d7dc:	movt	r7, #3
   1d7e0:	b	1d848 <bfd_arch_bits_per_address@plt+0xc180>
   1d7e4:	mvn	r0, #-1073741824	; 0xc0000000
   1d7e8:	and	r4, r4, r0
   1d7ec:	mov	r1, #0
   1d7f0:	mov	r2, #536870912	; 0x20000000
   1d7f4:	and	r5, r5, r1
   1d7f8:	eor	r4, r4, r2
   1d7fc:	adds	r2, sl, #-536870912	; 0xe0000000
   1d800:	mov	r3, #0
   1d804:	eor	r5, r5, r3
   1d808:	sbc	r3, fp, #0
   1d80c:	adds	r4, r4, r2
   1d810:	adc	r5, r5, r3
   1d814:	mov	r0, r4
   1d818:	bl	1a6d8 <bfd_arch_bits_per_address@plt+0x9010>
   1d81c:	cmp	r0, #0
   1d820:	bne	1d8a0 <bfd_arch_bits_per_address@plt+0xc1d8>
   1d824:	ldr	r3, [r6]
   1d828:	tst	r3, #256	; 0x100
   1d82c:	bne	1d8ec <bfd_arch_bits_per_address@plt+0xc224>
   1d830:	adds	sl, sl, #4
   1d834:	ldrd	r2, [sp, #56]	; 0x38
   1d838:	adc	fp, fp, #0
   1d83c:	cmp	r3, fp
   1d840:	cmpeq	r2, sl
   1d844:	bls	1d8fc <bfd_arch_bits_per_address@plt+0xc234>
   1d848:	ldr	r2, [r7]
   1d84c:	ldr	r3, [r9]
   1d850:	ldr	r0, [r8]
   1d854:	ldr	r2, [r2, #32]
   1d858:	ldr	r3, [r3, #4]
   1d85c:	rsb	r2, r2, sl
   1d860:	add	r0, r0, r2
   1d864:	ldr	r3, [r3, #40]	; 0x28
   1d868:	blx	r3
   1d86c:	tst	r0, #-1073741824	; 0xc0000000
   1d870:	mov	r4, r0
   1d874:	mov	r5, r1
   1d878:	beq	1d830 <bfd_arch_bits_per_address@plt+0xc168>
   1d87c:	ldr	r3, [r6]
   1d880:	tst	r3, #256	; 0x100
   1d884:	beq	1d7e4 <bfd_arch_bits_per_address@plt+0xc11c>
   1d888:	movw	r1, #17940	; 0x4614
   1d88c:	mov	r2, sl
   1d890:	movt	r1, #2
   1d894:	mov	r0, #1
   1d898:	bl	115e4 <__printf_chk@plt>
   1d89c:	b	1d7e4 <bfd_arch_bits_per_address@plt+0xc11c>
   1d8a0:	movw	r0, #31768	; 0x7c18
   1d8a4:	mov	r2, r4
   1d8a8:	mov	r3, r5
   1d8ac:	movt	r0, #3
   1d8b0:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   1d8b4:	subs	ip, r0, #0
   1d8b8:	beq	1d824 <bfd_arch_bits_per_address@plt+0xc15c>
   1d8bc:	ldr	r3, [r6]
   1d8c0:	tst	r3, #256	; 0x100
   1d8c4:	bne	1d904 <bfd_arch_bits_per_address@plt+0xc23c>
   1d8c8:	ldrd	r2, [ip]
   1d8cc:	cmp	r3, r5
   1d8d0:	cmpeq	r2, r4
   1d8d4:	bne	1d824 <bfd_arch_bits_per_address@plt+0xc15c>
   1d8d8:	mov	r1, ip
   1d8dc:	ldr	r0, [sp, #12]
   1d8e0:	mov	r2, #0
   1d8e4:	bl	138bc <bfd_arch_bits_per_address@plt+0x21f4>
   1d8e8:	b	1d830 <bfd_arch_bits_per_address@plt+0xc168>
   1d8ec:	movw	r0, #17148	; 0x42fc
   1d8f0:	movt	r0, #2
   1d8f4:	bl	114e8 <puts@plt>
   1d8f8:	b	1d830 <bfd_arch_bits_per_address@plt+0xc168>
   1d8fc:	add	sp, sp, #20
   1d900:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1d904:	ldr	lr, [ip]
   1d908:	movw	r1, #17968	; 0x4630
   1d90c:	ldr	r3, [ip, #16]
   1d910:	movt	r1, #2
   1d914:	mov	r0, #1
   1d918:	mov	r2, r4
   1d91c:	str	lr, [sp]
   1d920:	str	ip, [sp, #8]
   1d924:	bl	115e4 <__printf_chk@plt>
   1d928:	ldr	ip, [sp, #8]
   1d92c:	b	1d8c8 <bfd_arch_bits_per_address@plt+0xc200>
   1d930:	ldr	r2, [r0, #16]
   1d934:	movw	r1, #17200	; 0x4330
   1d938:	ldr	r0, [sp, #56]	; 0x38
   1d93c:	movt	r1, #2
   1d940:	mov	r3, sl
   1d944:	str	r0, [sp]
   1d948:	mov	r0, #1
   1d94c:	bl	115e4 <__printf_chk@plt>
   1d950:	b	1d7a0 <bfd_arch_bits_per_address@plt+0xc0d8>
   1d954:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d958:	movw	r6, #31432	; 0x7ac8
   1d95c:	movt	r6, #3
   1d960:	sub	sp, sp, #36	; 0x24
   1d964:	mov	r4, r2
   1d968:	mov	r5, r3
   1d96c:	ldr	r7, [r6]
   1d970:	str	r0, [sp, #24]
   1d974:	cmp	r7, #0
   1d978:	beq	1dbe8 <bfd_arch_bits_per_address@plt+0xc520>
   1d97c:	movw	fp, #30536	; 0x7748
   1d980:	movt	fp, #3
   1d984:	ldr	r3, [fp]
   1d988:	tst	r3, #256	; 0x100
   1d98c:	bne	1dbb0 <bfd_arch_bits_per_address@plt+0xc4e8>
   1d990:	ldrd	r0, [sp, #72]	; 0x48
   1d994:	cmp	r5, r1
   1d998:	cmpeq	r4, r0
   1d99c:	bcs	1daa8 <bfd_arch_bits_per_address@plt+0xc3e0>
   1d9a0:	movw	sl, #31720	; 0x7be8
   1d9a4:	movw	r9, #31724	; 0x7bec
   1d9a8:	movw	r8, #31736	; 0x7bf8
   1d9ac:	movw	r1, #30536	; 0x7748
   1d9b0:	movt	sl, #3
   1d9b4:	movt	r1, #3
   1d9b8:	movt	r9, #3
   1d9bc:	movt	r8, #3
   1d9c0:	str	r1, [sp, #28]
   1d9c4:	ldrd	r6, [sp, #72]	; 0x48
   1d9c8:	b	1d9f8 <bfd_arch_bits_per_address@plt+0xc330>
   1d9cc:	movw	r2, #63551	; 0xf83f
   1d9d0:	movt	r2, #64512	; 0xfc00
   1d9d4:	and	r2, r0, r2
   1d9d8:	movw	r3, #63497	; 0xf809
   1d9dc:	cmp	r2, r3
   1d9e0:	beq	1da88 <bfd_arch_bits_per_address@plt+0xc3c0>
   1d9e4:	adds	r4, r4, #4
   1d9e8:	adc	r5, r5, #0
   1d9ec:	cmp	r7, r5
   1d9f0:	cmpeq	r6, r4
   1d9f4:	bls	1daa8 <bfd_arch_bits_per_address@plt+0xc3e0>
   1d9f8:	ldr	r2, [r8]
   1d9fc:	ldr	r3, [sl]
   1da00:	ldr	r0, [r9]
   1da04:	ldr	r2, [r2, #32]
   1da08:	ldr	r3, [r3, #4]
   1da0c:	rsb	r2, r2, r4
   1da10:	add	r0, r0, r2
   1da14:	ldr	r3, [r3, #40]	; 0x28
   1da18:	blx	r3
   1da1c:	and	r2, r0, #-67108864	; 0xfc000000
   1da20:	mov	r3, r0
   1da24:	cmp	r2, #201326592	; 0xc000000
   1da28:	bne	1d9cc <bfd_arch_bits_per_address@plt+0xc304>
   1da2c:	ldr	r2, [fp]
   1da30:	tst	r2, #256	; 0x100
   1da34:	bne	1daec <bfd_arch_bits_per_address@plt+0xc424>
   1da38:	bic	r1, r3, #-67108864	; 0xfc000000
   1da3c:	mov	r2, #-268435456	; 0xf0000000
   1da40:	mvn	r3, #0
   1da44:	and	r2, r2, r4
   1da48:	lsl	r1, r1, #2
   1da4c:	and	r3, r3, r5
   1da50:	orr	r2, r2, r1
   1da54:	strd	r2, [sp, #16]
   1da58:	ldr	r0, [sp, #16]
   1da5c:	bl	1a6d8 <bfd_arch_bits_per_address@plt+0x9010>
   1da60:	cmp	r0, #0
   1da64:	ldreq	r3, [fp]
   1da68:	bne	1dab0 <bfd_arch_bits_per_address@plt+0xc3e8>
   1da6c:	and	r3, r3, #256	; 0x100
   1da70:	cmp	r3, #0
   1da74:	beq	1d9e4 <bfd_arch_bits_per_address@plt+0xc31c>
   1da78:	movw	r0, #17148	; 0x42fc
   1da7c:	movt	r0, #2
   1da80:	bl	114e8 <puts@plt>
   1da84:	b	1d9e4 <bfd_arch_bits_per_address@plt+0xc31c>
   1da88:	ldr	r3, [fp]
   1da8c:	tst	r3, #256	; 0x100
   1da90:	bne	1db1c <bfd_arch_bits_per_address@plt+0xc454>
   1da94:	ldr	r0, [sp, #24]
   1da98:	mov	r2, #0
   1da9c:	ldr	r1, [pc, #408]	; 1dc3c <bfd_arch_bits_per_address@plt+0xc574>
   1daa0:	bl	138bc <bfd_arch_bits_per_address@plt+0x21f4>
   1daa4:	b	1d9e4 <bfd_arch_bits_per_address@plt+0xc31c>
   1daa8:	add	sp, sp, #36	; 0x24
   1daac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dab0:	ldrd	r2, [sp, #16]
   1dab4:	movw	r0, #31768	; 0x7c18
   1dab8:	movt	r0, #3
   1dabc:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   1dac0:	ldr	r3, [fp]
   1dac4:	subs	ip, r0, #0
   1dac8:	beq	1da6c <bfd_arch_bits_per_address@plt+0xc3a4>
   1dacc:	tst	r3, #256	; 0x100
   1dad0:	bne	1db44 <bfd_arch_bits_per_address@plt+0xc47c>
   1dad4:	ldrd	r2, [ip]
   1dad8:	ldrd	r0, [sp, #16]
   1dadc:	cmp	r3, r1
   1dae0:	cmpeq	r2, r0
   1dae4:	bne	1d9e4 <bfd_arch_bits_per_address@plt+0xc31c>
   1dae8:	b	1db9c <bfd_arch_bits_per_address@plt+0xc4d4>
   1daec:	mov	r2, #5
   1daf0:	movw	r1, #18008	; 0x4658
   1daf4:	mov	r0, #0
   1daf8:	movt	r1, #2
   1dafc:	str	r3, [sp, #12]
   1db00:	bl	113e0 <dcgettext@plt>
   1db04:	mov	r2, r4
   1db08:	mov	r1, r0
   1db0c:	mov	r0, #1
   1db10:	bl	115e4 <__printf_chk@plt>
   1db14:	ldr	r3, [sp, #12]
   1db18:	b	1da38 <bfd_arch_bits_per_address@plt+0xc370>
   1db1c:	mov	r2, #5
   1db20:	movw	r1, #18032	; 0x4670
   1db24:	mov	r0, #0
   1db28:	movt	r1, #2
   1db2c:	bl	113e0 <dcgettext@plt>
   1db30:	mov	r2, r4
   1db34:	mov	r1, r0
   1db38:	mov	r0, #1
   1db3c:	bl	115e4 <__printf_chk@plt>
   1db40:	b	1da94 <bfd_arch_bits_per_address@plt+0xc3cc>
   1db44:	ldr	lr, [ip]
   1db48:	movw	r1, #17300	; 0x4394
   1db4c:	ldr	r3, [ip, #16]
   1db50:	movt	r1, #2
   1db54:	ldr	r2, [sp, #16]
   1db58:	mov	r0, #1
   1db5c:	str	lr, [sp]
   1db60:	str	ip, [sp, #12]
   1db64:	bl	115e4 <__printf_chk@plt>
   1db68:	ldr	r3, [sp, #28]
   1db6c:	ldr	ip, [sp, #12]
   1db70:	ldr	r3, [r3]
   1db74:	ldrd	r0, [ip]
   1db78:	str	r3, [sp, #8]
   1db7c:	ldrd	r2, [sp, #16]
   1db80:	cmp	r1, r3
   1db84:	cmpeq	r0, r2
   1db88:	ldr	r0, [sp, #8]
   1db8c:	and	r3, r0, #256	; 0x100
   1db90:	bne	1da70 <bfd_arch_bits_per_address@plt+0xc3a8>
   1db94:	cmp	r3, #0
   1db98:	bne	1dc2c <bfd_arch_bits_per_address@plt+0xc564>
   1db9c:	mov	r1, ip
   1dba0:	ldr	r0, [sp, #24]
   1dba4:	mov	r2, #0
   1dba8:	bl	138bc <bfd_arch_bits_per_address@plt+0x21f4>
   1dbac:	b	1d9e4 <bfd_arch_bits_per_address@plt+0xc31c>
   1dbb0:	mov	r2, #5
   1dbb4:	movw	r1, #17200	; 0x4330
   1dbb8:	mov	r0, #0
   1dbbc:	movt	r1, #2
   1dbc0:	bl	113e0 <dcgettext@plt>
   1dbc4:	ldr	r3, [sp, #72]	; 0x48
   1dbc8:	mov	r1, r0
   1dbcc:	ldr	r0, [sp, #24]
   1dbd0:	ldr	r2, [r0, #16]
   1dbd4:	mov	r0, #1
   1dbd8:	str	r3, [sp]
   1dbdc:	mov	r3, r4
   1dbe0:	bl	115e4 <__printf_chk@plt>
   1dbe4:	b	1d990 <bfd_arch_bits_per_address@plt+0xc2c8>
   1dbe8:	mov	r8, r6
   1dbec:	mov	r3, #1
   1dbf0:	str	r3, [r8], #8
   1dbf4:	mov	r0, r8
   1dbf8:	bl	1b358 <bfd_arch_bits_per_address@plt+0x9c90>
   1dbfc:	mov	r2, #5
   1dc00:	mov	r0, r7
   1dc04:	movw	r1, #17180	; 0x431c
   1dc08:	movt	r1, #2
   1dc0c:	bl	113e0 <dcgettext@plt>
   1dc10:	mov	r2, #0
   1dc14:	mov	r3, #0
   1dc18:	str	r8, [r6, #252]	; 0xfc
   1dc1c:	movt	r3, #16368	; 0x3ff0
   1dc20:	strd	r2, [r6, #224]	; 0xe0
   1dc24:	str	r0, [r6, #24]
   1dc28:	b	1d97c <bfd_arch_bits_per_address@plt+0xc2b4>
   1dc2c:	mov	r0, #10
   1dc30:	bl	115b4 <putchar@plt>
   1dc34:	ldr	ip, [sp, #12]
   1dc38:	b	1db9c <bfd_arch_bits_per_address@plt+0xc4d4>
   1dc3c:	ldrdeq	r7, [r3], -r0
   1dc40:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc44:	movw	r9, #30536	; 0x7748
   1dc48:	movt	r9, #3
   1dc4c:	mov	fp, r3
   1dc50:	sub	sp, sp, #36	; 0x24
   1dc54:	mov	sl, r2
   1dc58:	ldr	r3, [r9]
   1dc5c:	str	r0, [sp, #28]
   1dc60:	tst	r3, #256	; 0x100
   1dc64:	bne	1de0c <bfd_arch_bits_per_address@plt+0xc744>
   1dc68:	ldrd	r2, [sp, #72]	; 0x48
   1dc6c:	cmp	fp, r3
   1dc70:	cmpeq	sl, r2
   1dc74:	bcs	1dd64 <bfd_arch_bits_per_address@plt+0xc69c>
   1dc78:	movw	r8, #31720	; 0x7be8
   1dc7c:	movw	r7, #31724	; 0x7bec
   1dc80:	movw	r6, #31736	; 0x7bf8
   1dc84:	movt	r8, #3
   1dc88:	movt	r7, #3
   1dc8c:	movt	r6, #3
   1dc90:	b	1dcac <bfd_arch_bits_per_address@plt+0xc5e4>
   1dc94:	adds	sl, sl, #4
   1dc98:	ldrd	r2, [sp, #72]	; 0x48
   1dc9c:	adc	fp, fp, #0
   1dca0:	cmp	r3, fp
   1dca4:	cmpeq	r2, sl
   1dca8:	bls	1dd64 <bfd_arch_bits_per_address@plt+0xc69c>
   1dcac:	ldr	r2, [r6]
   1dcb0:	ldr	r3, [r8]
   1dcb4:	ldr	r0, [r7]
   1dcb8:	ldr	r2, [r2, #32]
   1dcbc:	ldr	r3, [r3, #4]
   1dcc0:	rsb	r2, r2, sl
   1dcc4:	add	r0, r0, r2
   1dcc8:	ldr	r3, [r3, #40]	; 0x28
   1dccc:	blx	r3
   1dcd0:	and	r3, r0, #2080374784	; 0x7c000000
   1dcd4:	mov	r4, r0
   1dcd8:	cmp	r3, #335544320	; 0x14000000
   1dcdc:	mov	r5, r1
   1dce0:	bne	1dc94 <bfd_arch_bits_per_address@plt+0xc5cc>
   1dce4:	ldr	r3, [r9]
   1dce8:	tst	r3, #256	; 0x100
   1dcec:	bne	1ddb8 <bfd_arch_bits_per_address@plt+0xc6f0>
   1dcf0:	mvn	r0, #-67108864	; 0xfc000000
   1dcf4:	and	r4, r4, r0
   1dcf8:	mov	r1, #0
   1dcfc:	mov	r2, #33554432	; 0x2000000
   1dd00:	and	r5, r5, r1
   1dd04:	eor	r4, r4, r2
   1dd08:	adds	r4, r4, #-33554432	; 0xfe000000
   1dd0c:	mov	r3, #0
   1dd10:	eor	r5, r5, r3
   1dd14:	lsl	r1, r4, #2
   1dd18:	sbc	r5, r5, #0
   1dd1c:	str	r1, [sp, #16]
   1dd20:	lsl	r3, r5, #2
   1dd24:	orr	r0, r3, r4, lsr #30
   1dd28:	str	r0, [sp, #20]
   1dd2c:	ldrd	r4, [sp, #16]
   1dd30:	adds	r4, r4, sl
   1dd34:	adc	r5, r5, fp
   1dd38:	mov	r0, r4
   1dd3c:	bl	1a6d8 <bfd_arch_bits_per_address@plt+0x9010>
   1dd40:	cmp	r0, #0
   1dd44:	bne	1dd6c <bfd_arch_bits_per_address@plt+0xc6a4>
   1dd48:	ldr	r3, [r9]
   1dd4c:	tst	r3, #256	; 0x100
   1dd50:	beq	1dc94 <bfd_arch_bits_per_address@plt+0xc5cc>
   1dd54:	movw	r0, #17148	; 0x42fc
   1dd58:	movt	r0, #2
   1dd5c:	bl	114e8 <puts@plt>
   1dd60:	b	1dc94 <bfd_arch_bits_per_address@plt+0xc5cc>
   1dd64:	add	sp, sp, #36	; 0x24
   1dd68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd6c:	movw	r0, #31768	; 0x7c18
   1dd70:	mov	r2, r4
   1dd74:	mov	r3, r5
   1dd78:	movt	r0, #3
   1dd7c:	bl	1b8b8 <bfd_arch_bits_per_address@plt+0xa1f0>
   1dd80:	subs	ip, r0, #0
   1dd84:	beq	1dd48 <bfd_arch_bits_per_address@plt+0xc680>
   1dd88:	ldr	r3, [r9]
   1dd8c:	tst	r3, #256	; 0x100
   1dd90:	bne	1ddd0 <bfd_arch_bits_per_address@plt+0xc708>
   1dd94:	ldrd	r2, [ip]
   1dd98:	cmp	r3, r5
   1dd9c:	cmpeq	r2, r4
   1dda0:	bne	1dd48 <bfd_arch_bits_per_address@plt+0xc680>
   1dda4:	mov	r1, ip
   1dda8:	ldr	r0, [sp, #28]
   1ddac:	mov	r2, #0
   1ddb0:	bl	138bc <bfd_arch_bits_per_address@plt+0x21f4>
   1ddb4:	b	1dc94 <bfd_arch_bits_per_address@plt+0xc5cc>
   1ddb8:	movw	r1, #18060	; 0x468c
   1ddbc:	mov	r2, sl
   1ddc0:	movt	r1, #2
   1ddc4:	mov	r0, #1
   1ddc8:	bl	115e4 <__printf_chk@plt>
   1ddcc:	b	1dcf0 <bfd_arch_bits_per_address@plt+0xc628>
   1ddd0:	ldr	lr, [ip]
   1ddd4:	mov	r2, r4
   1ddd8:	ldr	r3, [ip, #16]
   1dddc:	movw	r1, #17968	; 0x4630
   1dde0:	mov	r0, #1
   1dde4:	movt	r1, #2
   1dde8:	str	lr, [sp]
   1ddec:	str	ip, [sp, #12]
   1ddf0:	bl	115e4 <__printf_chk@plt>
   1ddf4:	ldr	ip, [sp, #12]
   1ddf8:	ldrd	r2, [ip]
   1ddfc:	cmp	r3, r5
   1de00:	cmpeq	r2, r4
   1de04:	bne	1dd48 <bfd_arch_bits_per_address@plt+0xc680>
   1de08:	b	1dda4 <bfd_arch_bits_per_address@plt+0xc6dc>
   1de0c:	ldr	r2, [r0, #16]
   1de10:	movw	r1, #17200	; 0x4330
   1de14:	ldr	r0, [sp, #72]	; 0x48
   1de18:	movt	r1, #2
   1de1c:	mov	r3, sl
   1de20:	str	r0, [sp]
   1de24:	mov	r0, #1
   1de28:	bl	115e4 <__printf_chk@plt>
   1de2c:	b	1dc68 <bfd_arch_bits_per_address@plt+0xc5a0>
   1de30:	push	{r4, lr}
   1de34:	mov	r4, r0
   1de38:	mov	r1, r4
   1de3c:	mov	r0, #10
   1de40:	bl	11638 <fputc@plt>
   1de44:	mov	r3, r4
   1de48:	mov	r1, #1
   1de4c:	mov	r2, #59	; 0x3b
   1de50:	movw	r0, #18084	; 0x46a4
   1de54:	movt	r0, #2
   1de58:	bl	1144c <fwrite@plt>
   1de5c:	mov	r3, r4
   1de60:	mov	r2, #42	; 0x2a
   1de64:	mov	r1, #1
   1de68:	movw	r0, #18144	; 0x46e0
   1de6c:	movt	r0, #2
   1de70:	bl	1144c <fwrite@plt>
   1de74:	mov	r1, r4
   1de78:	mov	r0, #10
   1de7c:	bl	11638 <fputc@plt>
   1de80:	mov	r3, r4
   1de84:	mov	r1, #1
   1de88:	mov	r2, #60	; 0x3c
   1de8c:	movw	r0, #18188	; 0x470c
   1de90:	movt	r0, #2
   1de94:	bl	1144c <fwrite@plt>
   1de98:	mov	r3, r4
   1de9c:	mov	r2, #59	; 0x3b
   1dea0:	mov	r1, #1
   1dea4:	movw	r0, #18252	; 0x474c
   1dea8:	movt	r0, #2
   1deac:	bl	1144c <fwrite@plt>
   1deb0:	mov	r1, r4
   1deb4:	mov	r0, #10
   1deb8:	bl	11638 <fputc@plt>
   1debc:	mov	r3, r4
   1dec0:	mov	r1, #1
   1dec4:	mov	r2, #55	; 0x37
   1dec8:	movw	r0, #18312	; 0x4788
   1decc:	movt	r0, #2
   1ded0:	bl	1144c <fwrite@plt>
   1ded4:	mov	r3, r4
   1ded8:	mov	r1, #1
   1dedc:	mov	r2, #60	; 0x3c
   1dee0:	movw	r0, #18368	; 0x47c0
   1dee4:	movt	r0, #2
   1dee8:	bl	1144c <fwrite@plt>
   1deec:	mov	r3, r4
   1def0:	mov	r2, #20
   1def4:	mov	r1, #1
   1def8:	movw	r0, #18432	; 0x4800
   1defc:	movt	r0, #2
   1df00:	bl	1144c <fwrite@plt>
   1df04:	mov	r1, r4
   1df08:	mov	r0, #10
   1df0c:	bl	11638 <fputc@plt>
   1df10:	mov	r3, r4
   1df14:	mov	r1, #1
   1df18:	mov	r2, #61	; 0x3d
   1df1c:	movw	r0, #18456	; 0x4818
   1df20:	movt	r0, #2
   1df24:	bl	1144c <fwrite@plt>
   1df28:	mov	r3, r4
   1df2c:	mov	r2, #50	; 0x32
   1df30:	mov	r1, #1
   1df34:	movw	r0, #18520	; 0x4858
   1df38:	movt	r0, #2
   1df3c:	bl	1144c <fwrite@plt>
   1df40:	mov	r1, r4
   1df44:	mov	r0, #10
   1df48:	bl	11638 <fputc@plt>
   1df4c:	mov	r3, r4
   1df50:	mov	r1, #1
   1df54:	mov	r2, #60	; 0x3c
   1df58:	movw	r0, #18572	; 0x488c
   1df5c:	movt	r0, #2
   1df60:	bl	1144c <fwrite@plt>
   1df64:	mov	r3, r4
   1df68:	mov	r1, #1
   1df6c:	mov	r2, #60	; 0x3c
   1df70:	movw	r0, #18636	; 0x48cc
   1df74:	movt	r0, #2
   1df78:	bl	1144c <fwrite@plt>
   1df7c:	mov	r3, r4
   1df80:	mov	r2, #16
   1df84:	mov	r1, #1
   1df88:	movw	r0, #18700	; 0x490c
   1df8c:	movt	r0, #2
   1df90:	bl	1144c <fwrite@plt>
   1df94:	mov	r1, r4
   1df98:	mov	r0, #10
   1df9c:	bl	11638 <fputc@plt>
   1dfa0:	mov	r3, r4
   1dfa4:	mov	r1, #1
   1dfa8:	mov	r2, #60	; 0x3c
   1dfac:	movw	r0, #18720	; 0x4920
   1dfb0:	movt	r0, #2
   1dfb4:	bl	1144c <fwrite@plt>
   1dfb8:	mov	r3, r4
   1dfbc:	mov	r1, #1
   1dfc0:	mov	r2, #58	; 0x3a
   1dfc4:	movw	r0, #18784	; 0x4960
   1dfc8:	movt	r0, #2
   1dfcc:	bl	1144c <fwrite@plt>
   1dfd0:	mov	r3, r4
   1dfd4:	mov	r2, #38	; 0x26
   1dfd8:	mov	r1, #1
   1dfdc:	movw	r0, #18844	; 0x499c
   1dfe0:	movt	r0, #2
   1dfe4:	bl	1144c <fwrite@plt>
   1dfe8:	mov	r1, r4
   1dfec:	mov	r0, #10
   1dff0:	bl	11638 <fputc@plt>
   1dff4:	mov	r3, r4
   1dff8:	mov	r1, #1
   1dffc:	mov	r2, #61	; 0x3d
   1e000:	movw	r0, #18884	; 0x49c4
   1e004:	movt	r0, #2
   1e008:	bl	1144c <fwrite@plt>
   1e00c:	mov	r3, r4
   1e010:	mov	r1, #1
   1e014:	mov	r2, #61	; 0x3d
   1e018:	movw	r0, #18948	; 0x4a04
   1e01c:	movt	r0, #2
   1e020:	bl	1144c <fwrite@plt>
   1e024:	mov	r3, r4
   1e028:	mov	r1, #1
   1e02c:	mov	r2, #55	; 0x37
   1e030:	movw	r0, #19012	; 0x4a44
   1e034:	movt	r0, #2
   1e038:	bl	1144c <fwrite@plt>
   1e03c:	mov	r3, r4
   1e040:	mov	r1, #1
   1e044:	mov	r2, #53	; 0x35
   1e048:	movw	r0, #19068	; 0x4a7c
   1e04c:	movt	r0, #2
   1e050:	bl	1144c <fwrite@plt>
   1e054:	mov	r3, r4
   1e058:	mov	r1, #1
   1e05c:	mov	r2, #48	; 0x30
   1e060:	movw	r0, #19124	; 0x4ab4
   1e064:	movt	r0, #2
   1e068:	bl	1144c <fwrite@plt>
   1e06c:	mov	r3, r4
   1e070:	mov	r1, #1
   1e074:	mov	r2, #2
   1e078:	movw	r0, #16224	; 0x3f60
   1e07c:	movt	r0, #2
   1e080:	bl	1144c <fwrite@plt>
   1e084:	mov	r3, r4
   1e088:	mov	r2, #55	; 0x37
   1e08c:	mov	r1, #1
   1e090:	movw	r0, #19176	; 0x4ae8
   1e094:	movt	r0, #2
   1e098:	bl	1144c <fwrite@plt>
   1e09c:	mov	r1, r4
   1e0a0:	mov	r0, #10
   1e0a4:	bl	11638 <fputc@plt>
   1e0a8:	mov	r3, r4
   1e0ac:	mov	r1, #1
   1e0b0:	mov	r2, #69	; 0x45
   1e0b4:	movw	r0, #19232	; 0x4b20
   1e0b8:	movt	r0, #2
   1e0bc:	bl	1144c <fwrite@plt>
   1e0c0:	mov	r3, r4
   1e0c4:	mov	r1, #1
   1e0c8:	mov	r2, #67	; 0x43
   1e0cc:	movw	r0, #19304	; 0x4b68
   1e0d0:	movt	r0, #2
   1e0d4:	bl	1144c <fwrite@plt>
   1e0d8:	mov	r3, r4
   1e0dc:	movw	r0, #19372	; 0x4bac
   1e0e0:	mov	r1, #1
   1e0e4:	movt	r0, #2
   1e0e8:	mov	r2, #38	; 0x26
   1e0ec:	pop	{r4, lr}
   1e0f0:	b	1144c <fwrite@plt>
   1e0f4:	push	{r4, r5, r6, lr}
   1e0f8:	mov	r4, r0
   1e0fc:	mov	r1, r4
   1e100:	mov	r0, #10
   1e104:	bl	11638 <fputc@plt>
   1e108:	mov	r1, r4
   1e10c:	mov	r0, #10
   1e110:	movw	r5, #19564	; 0x4c6c
   1e114:	bl	11638 <fputc@plt>
   1e118:	mov	r1, r4
   1e11c:	mov	r0, #10
   1e120:	movt	r5, #2
   1e124:	bl	11638 <fputc@plt>
   1e128:	mov	r3, r4
   1e12c:	mov	r1, #1
   1e130:	mov	r2, #20
   1e134:	movw	r0, #19412	; 0x4bd4
   1e138:	movt	r0, #2
   1e13c:	bl	1144c <fwrite@plt>
   1e140:	mov	r3, r4
   1e144:	mov	r1, #1
   1e148:	mov	r2, #60	; 0x3c
   1e14c:	movw	r0, #19436	; 0x4bec
   1e150:	movt	r0, #2
   1e154:	bl	1144c <fwrite@plt>
   1e158:	mov	r3, r4
   1e15c:	mov	r2, #28
   1e160:	mov	r1, #1
   1e164:	movw	r0, #19500	; 0x4c2c
   1e168:	movt	r0, #2
   1e16c:	bl	1144c <fwrite@plt>
   1e170:	mov	r1, r4
   1e174:	mov	r0, #10
   1e178:	bl	11638 <fputc@plt>
   1e17c:	mov	r3, r4
   1e180:	mov	r2, #28
   1e184:	mov	r1, #1
   1e188:	movw	r0, #19532	; 0x4c4c
   1e18c:	movt	r0, #2
   1e190:	bl	1144c <fwrite@plt>
   1e194:	mov	r1, r4
   1e198:	mov	r0, #10
   1e19c:	bl	11638 <fputc@plt>
   1e1a0:	mov	r3, r4
   1e1a4:	mov	r0, r5
   1e1a8:	mov	r1, #1
   1e1ac:	mov	r2, #54	; 0x36
   1e1b0:	bl	1144c <fwrite@plt>
   1e1b4:	mov	r3, r4
   1e1b8:	mov	r2, #57	; 0x39
   1e1bc:	mov	r1, #1
   1e1c0:	movw	r0, #19620	; 0x4ca4
   1e1c4:	movt	r0, #2
   1e1c8:	bl	1144c <fwrite@plt>
   1e1cc:	mov	r1, r4
   1e1d0:	mov	r0, #10
   1e1d4:	bl	11638 <fputc@plt>
   1e1d8:	mov	r3, r4
   1e1dc:	mov	r1, #1
   1e1e0:	mov	r2, #58	; 0x3a
   1e1e4:	movw	r0, #19680	; 0x4ce0
   1e1e8:	movt	r0, #2
   1e1ec:	bl	1144c <fwrite@plt>
   1e1f0:	mov	r3, r4
   1e1f4:	mov	r1, #1
   1e1f8:	mov	r2, #49	; 0x31
   1e1fc:	movw	r0, #19740	; 0x4d1c
   1e200:	movt	r0, #2
   1e204:	bl	1144c <fwrite@plt>
   1e208:	mov	r3, r4
   1e20c:	mov	r2, #23
   1e210:	mov	r1, #1
   1e214:	movw	r0, #19792	; 0x4d50
   1e218:	movt	r0, #2
   1e21c:	bl	1144c <fwrite@plt>
   1e220:	mov	r1, r4
   1e224:	mov	r0, #10
   1e228:	bl	11638 <fputc@plt>
   1e22c:	mov	r3, r4
   1e230:	mov	r1, #1
   1e234:	mov	r2, #55	; 0x37
   1e238:	movw	r0, #19816	; 0x4d68
   1e23c:	movt	r0, #2
   1e240:	bl	1144c <fwrite@plt>
   1e244:	mov	r3, r4
   1e248:	mov	r2, #18
   1e24c:	mov	r1, #1
   1e250:	movw	r0, #19872	; 0x4da0
   1e254:	movt	r0, #2
   1e258:	bl	1144c <fwrite@plt>
   1e25c:	mov	r1, r4
   1e260:	mov	r0, #10
   1e264:	bl	11638 <fputc@plt>
   1e268:	mov	r3, r4
   1e26c:	mov	r1, #1
   1e270:	mov	r2, #12
   1e274:	movw	r0, #19892	; 0x4db4
   1e278:	movt	r0, #2
   1e27c:	bl	1144c <fwrite@plt>
   1e280:	mov	r3, r4
   1e284:	mov	r1, #1
   1e288:	mov	r2, #60	; 0x3c
   1e28c:	movw	r0, #19908	; 0x4dc4
   1e290:	movt	r0, #2
   1e294:	bl	1144c <fwrite@plt>
   1e298:	mov	r3, r4
   1e29c:	mov	r2, #52	; 0x34
   1e2a0:	mov	r1, #1
   1e2a4:	movw	r0, #19972	; 0x4e04
   1e2a8:	movt	r0, #2
   1e2ac:	bl	1144c <fwrite@plt>
   1e2b0:	mov	r1, r4
   1e2b4:	mov	r0, #10
   1e2b8:	bl	11638 <fputc@plt>
   1e2bc:	mov	r3, r4
   1e2c0:	mov	r1, #1
   1e2c4:	mov	r2, #61	; 0x3d
   1e2c8:	movw	r0, #20028	; 0x4e3c
   1e2cc:	movt	r0, #2
   1e2d0:	bl	1144c <fwrite@plt>
   1e2d4:	mov	r3, r4
   1e2d8:	mov	r2, #33	; 0x21
   1e2dc:	mov	r1, #1
   1e2e0:	movw	r0, #20092	; 0x4e7c
   1e2e4:	movt	r0, #2
   1e2e8:	bl	1144c <fwrite@plt>
   1e2ec:	mov	r1, r4
   1e2f0:	mov	r0, #10
   1e2f4:	bl	11638 <fputc@plt>
   1e2f8:	mov	r3, r4
   1e2fc:	mov	r1, #1
   1e300:	mov	r2, #57	; 0x39
   1e304:	movw	r0, #20128	; 0x4ea0
   1e308:	movt	r0, #2
   1e30c:	bl	1144c <fwrite@plt>
   1e310:	mov	r3, r4
   1e314:	mov	r2, #23
   1e318:	mov	r1, #1
   1e31c:	movw	r0, #20188	; 0x4edc
   1e320:	movt	r0, #2
   1e324:	bl	1144c <fwrite@plt>
   1e328:	mov	r1, r4
   1e32c:	mov	r0, #10
   1e330:	bl	11638 <fputc@plt>
   1e334:	mov	r3, r4
   1e338:	mov	r1, #1
   1e33c:	mov	r2, #58	; 0x3a
   1e340:	movw	r0, #20212	; 0x4ef4
   1e344:	movt	r0, #2
   1e348:	bl	1144c <fwrite@plt>
   1e34c:	mov	r3, r4
   1e350:	mov	r2, #45	; 0x2d
   1e354:	mov	r1, #1
   1e358:	movw	r0, #20272	; 0x4f30
   1e35c:	movt	r0, #2
   1e360:	bl	1144c <fwrite@plt>
   1e364:	mov	r1, r4
   1e368:	mov	r0, #10
   1e36c:	bl	11638 <fputc@plt>
   1e370:	mov	r3, r4
   1e374:	mov	r0, r5
   1e378:	mov	r1, #1
   1e37c:	mov	r2, #54	; 0x36
   1e380:	bl	1144c <fwrite@plt>
   1e384:	mov	r3, r4
   1e388:	mov	r2, #45	; 0x2d
   1e38c:	mov	r1, #1
   1e390:	movw	r0, #20320	; 0x4f60
   1e394:	movt	r0, #2
   1e398:	bl	1144c <fwrite@plt>
   1e39c:	mov	r1, r4
   1e3a0:	mov	r0, #10
   1e3a4:	bl	11638 <fputc@plt>
   1e3a8:	mov	r1, r4
   1e3ac:	mov	r0, #10
   1e3b0:	bl	11638 <fputc@plt>
   1e3b4:	mov	r1, r4
   1e3b8:	mov	r0, #10
   1e3bc:	bl	11638 <fputc@plt>
   1e3c0:	mov	r3, r4
   1e3c4:	mov	r2, #27
   1e3c8:	mov	r1, #1
   1e3cc:	movw	r0, #20368	; 0x4f90
   1e3d0:	movt	r0, #2
   1e3d4:	bl	1144c <fwrite@plt>
   1e3d8:	mov	r1, r4
   1e3dc:	mov	r0, #10
   1e3e0:	bl	11638 <fputc@plt>
   1e3e4:	mov	r3, r4
   1e3e8:	mov	r1, #1
   1e3ec:	mov	r2, #61	; 0x3d
   1e3f0:	movw	r0, #20396	; 0x4fac
   1e3f4:	movt	r0, #2
   1e3f8:	bl	1144c <fwrite@plt>
   1e3fc:	mov	r3, r4
   1e400:	mov	r2, #50	; 0x32
   1e404:	mov	r1, #1
   1e408:	movw	r0, #20460	; 0x4fec
   1e40c:	movt	r0, #2
   1e410:	bl	1144c <fwrite@plt>
   1e414:	mov	r1, r4
   1e418:	mov	r0, #10
   1e41c:	bl	11638 <fputc@plt>
   1e420:	mov	r3, r4
   1e424:	mov	r1, #1
   1e428:	mov	r2, #13
   1e42c:	movw	r0, #20512	; 0x5020
   1e430:	movt	r0, #2
   1e434:	bl	1144c <fwrite@plt>
   1e438:	mov	r3, r4
   1e43c:	mov	r1, #1
   1e440:	mov	r2, #51	; 0x33
   1e444:	movw	r0, #20528	; 0x5030
   1e448:	movt	r0, #2
   1e44c:	bl	1144c <fwrite@plt>
   1e450:	mov	r3, r4
   1e454:	mov	r1, #1
   1e458:	mov	r2, #58	; 0x3a
   1e45c:	movw	r0, #20580	; 0x5064
   1e460:	movt	r0, #2
   1e464:	bl	1144c <fwrite@plt>
   1e468:	mov	r3, r4
   1e46c:	mov	r2, #18
   1e470:	mov	r1, #1
   1e474:	movw	r0, #20640	; 0x50a0
   1e478:	movt	r0, #2
   1e47c:	bl	1144c <fwrite@plt>
   1e480:	mov	r1, r4
   1e484:	mov	r0, #10
   1e488:	bl	11638 <fputc@plt>
   1e48c:	mov	r3, r4
   1e490:	mov	r1, #1
   1e494:	mov	r2, #57	; 0x39
   1e498:	movw	r0, #20660	; 0x50b4
   1e49c:	movt	r0, #2
   1e4a0:	bl	1144c <fwrite@plt>
   1e4a4:	mov	r3, r4
   1e4a8:	mov	r1, #1
   1e4ac:	mov	r2, #53	; 0x35
   1e4b0:	movw	r0, #20720	; 0x50f0
   1e4b4:	movt	r0, #2
   1e4b8:	bl	1144c <fwrite@plt>
   1e4bc:	mov	r3, r4
   1e4c0:	mov	r1, #1
   1e4c4:	mov	r2, #59	; 0x3b
   1e4c8:	movw	r0, #20776	; 0x5128
   1e4cc:	movt	r0, #2
   1e4d0:	bl	1144c <fwrite@plt>
   1e4d4:	mov	r3, r4
   1e4d8:	mov	r2, #23
   1e4dc:	mov	r1, #1
   1e4e0:	movw	r0, #20836	; 0x5164
   1e4e4:	movt	r0, #2
   1e4e8:	bl	1144c <fwrite@plt>
   1e4ec:	mov	r1, r4
   1e4f0:	mov	r0, #10
   1e4f4:	bl	11638 <fputc@plt>
   1e4f8:	mov	r3, r4
   1e4fc:	mov	r1, #1
   1e500:	mov	r2, #58	; 0x3a
   1e504:	movw	r0, #20860	; 0x517c
   1e508:	movt	r0, #2
   1e50c:	bl	1144c <fwrite@plt>
   1e510:	mov	r3, r4
   1e514:	mov	r1, #1
   1e518:	mov	r2, #58	; 0x3a
   1e51c:	movw	r0, #20920	; 0x51b8
   1e520:	movt	r0, #2
   1e524:	bl	1144c <fwrite@plt>
   1e528:	mov	r3, r4
   1e52c:	mov	r2, #36	; 0x24
   1e530:	mov	r1, #1
   1e534:	movw	r0, #20980	; 0x51f4
   1e538:	movt	r0, #2
   1e53c:	bl	1144c <fwrite@plt>
   1e540:	mov	r1, r4
   1e544:	mov	r0, #10
   1e548:	bl	11638 <fputc@plt>
   1e54c:	mov	r3, r4
   1e550:	mov	r1, #1
   1e554:	mov	r2, #61	; 0x3d
   1e558:	movw	r0, #21020	; 0x521c
   1e55c:	movt	r0, #2
   1e560:	bl	1144c <fwrite@plt>
   1e564:	mov	r3, r4
   1e568:	mov	r2, #50	; 0x32
   1e56c:	mov	r1, #1
   1e570:	movw	r0, #21084	; 0x525c
   1e574:	movt	r0, #2
   1e578:	bl	1144c <fwrite@plt>
   1e57c:	mov	r1, r4
   1e580:	mov	r0, #10
   1e584:	bl	11638 <fputc@plt>
   1e588:	mov	r3, r4
   1e58c:	mov	r1, #1
   1e590:	mov	r2, #53	; 0x35
   1e594:	movw	r0, #21136	; 0x5290
   1e598:	movt	r0, #2
   1e59c:	bl	1144c <fwrite@plt>
   1e5a0:	mov	r3, r4
   1e5a4:	mov	r2, #45	; 0x2d
   1e5a8:	mov	r1, #1
   1e5ac:	movw	r0, #21192	; 0x52c8
   1e5b0:	movt	r0, #2
   1e5b4:	bl	1144c <fwrite@plt>
   1e5b8:	mov	r1, r4
   1e5bc:	mov	r0, #10
   1e5c0:	bl	11638 <fputc@plt>
   1e5c4:	mov	r1, r4
   1e5c8:	mov	r0, #10
   1e5cc:	bl	11638 <fputc@plt>
   1e5d0:	mov	r1, r4
   1e5d4:	mov	r0, #10
   1e5d8:	bl	11638 <fputc@plt>
   1e5dc:	mov	r3, r4
   1e5e0:	mov	r2, #29
   1e5e4:	mov	r1, #1
   1e5e8:	movw	r0, #21240	; 0x52f8
   1e5ec:	movt	r0, #2
   1e5f0:	bl	1144c <fwrite@plt>
   1e5f4:	mov	r1, r4
   1e5f8:	mov	r0, #10
   1e5fc:	bl	11638 <fputc@plt>
   1e600:	mov	r3, r4
   1e604:	mov	r1, #1
   1e608:	mov	r2, #58	; 0x3a
   1e60c:	movw	r0, #21272	; 0x5318
   1e610:	movt	r0, #2
   1e614:	bl	1144c <fwrite@plt>
   1e618:	mov	r3, r4
   1e61c:	mov	r2, #57	; 0x39
   1e620:	mov	r1, #1
   1e624:	movw	r0, #21332	; 0x5354
   1e628:	movt	r0, #2
   1e62c:	bl	1144c <fwrite@plt>
   1e630:	mov	r1, r4
   1e634:	mov	r0, #10
   1e638:	bl	11638 <fputc@plt>
   1e63c:	mov	r3, r4
   1e640:	mov	r1, #1
   1e644:	mov	r2, #12
   1e648:	movw	r0, #21392	; 0x5390
   1e64c:	movt	r0, #2
   1e650:	bl	1144c <fwrite@plt>
   1e654:	mov	r3, r4
   1e658:	mov	r1, #1
   1e65c:	mov	r2, #61	; 0x3d
   1e660:	movw	r0, #21408	; 0x53a0
   1e664:	movt	r0, #2
   1e668:	bl	1144c <fwrite@plt>
   1e66c:	mov	r3, r4
   1e670:	mov	r1, #1
   1e674:	mov	r2, #52	; 0x34
   1e678:	movw	r0, #21472	; 0x53e0
   1e67c:	movt	r0, #2
   1e680:	bl	1144c <fwrite@plt>
   1e684:	mov	r3, r4
   1e688:	mov	r2, #20
   1e68c:	mov	r1, #1
   1e690:	movw	r0, #21528	; 0x5418
   1e694:	movt	r0, #2
   1e698:	bl	1144c <fwrite@plt>
   1e69c:	mov	r1, r4
   1e6a0:	mov	r0, #10
   1e6a4:	bl	11638 <fputc@plt>
   1e6a8:	mov	r3, r4
   1e6ac:	mov	r1, #1
   1e6b0:	mov	r2, #59	; 0x3b
   1e6b4:	movw	r0, #21552	; 0x5430
   1e6b8:	movt	r0, #2
   1e6bc:	bl	1144c <fwrite@plt>
   1e6c0:	mov	r3, r4
   1e6c4:	mov	r1, #1
   1e6c8:	mov	r2, #50	; 0x32
   1e6cc:	movw	r0, #21612	; 0x546c
   1e6d0:	movt	r0, #2
   1e6d4:	bl	1144c <fwrite@plt>
   1e6d8:	mov	r3, r4
   1e6dc:	mov	r2, #47	; 0x2f
   1e6e0:	mov	r1, #1
   1e6e4:	movw	r0, #21664	; 0x54a0
   1e6e8:	movt	r0, #2
   1e6ec:	bl	1144c <fwrite@plt>
   1e6f0:	mov	r1, r4
   1e6f4:	mov	r0, #10
   1e6f8:	bl	11638 <fputc@plt>
   1e6fc:	mov	r3, r4
   1e700:	mov	r1, #1
   1e704:	mov	r2, #58	; 0x3a
   1e708:	movw	r0, #21712	; 0x54d0
   1e70c:	movt	r0, #2
   1e710:	bl	1144c <fwrite@plt>
   1e714:	mov	r3, r4
   1e718:	mov	r1, #1
   1e71c:	mov	r2, #53	; 0x35
   1e720:	movw	r0, #21772	; 0x550c
   1e724:	movt	r0, #2
   1e728:	bl	1144c <fwrite@plt>
   1e72c:	mov	r3, r4
   1e730:	mov	r2, #32
   1e734:	mov	r1, #1
   1e738:	movw	r0, #21828	; 0x5544
   1e73c:	movt	r0, #2
   1e740:	bl	1144c <fwrite@plt>
   1e744:	mov	r1, r4
   1e748:	mov	r0, #10
   1e74c:	bl	11638 <fputc@plt>
   1e750:	mov	r3, r4
   1e754:	mov	r1, #1
   1e758:	mov	r2, #59	; 0x3b
   1e75c:	movw	r0, #21864	; 0x5568
   1e760:	movt	r0, #2
   1e764:	bl	1144c <fwrite@plt>
   1e768:	mov	r3, r4
   1e76c:	mov	r2, #41	; 0x29
   1e770:	mov	r1, #1
   1e774:	movw	r0, #21924	; 0x55a4
   1e778:	movt	r0, #2
   1e77c:	bl	1144c <fwrite@plt>
   1e780:	mov	r1, r4
   1e784:	mov	r0, #10
   1e788:	bl	11638 <fputc@plt>
   1e78c:	mov	r3, r4
   1e790:	mov	r1, #1
   1e794:	mov	r2, #61	; 0x3d
   1e798:	movw	r0, #21968	; 0x55d0
   1e79c:	movt	r0, #2
   1e7a0:	bl	1144c <fwrite@plt>
   1e7a4:	mov	r3, r4
   1e7a8:	mov	r2, #36	; 0x24
   1e7ac:	mov	r1, #1
   1e7b0:	movw	r0, #22032	; 0x5610
   1e7b4:	movt	r0, #2
   1e7b8:	bl	1144c <fwrite@plt>
   1e7bc:	mov	r1, r4
   1e7c0:	mov	r0, #10
   1e7c4:	bl	11638 <fputc@plt>
   1e7c8:	mov	r1, r4
   1e7cc:	mov	r0, #10
   1e7d0:	bl	11638 <fputc@plt>
   1e7d4:	mov	r1, r4
   1e7d8:	mov	r0, #10
   1e7dc:	bl	11638 <fputc@plt>
   1e7e0:	mov	r3, r4
   1e7e4:	mov	r1, #1
   1e7e8:	mov	r2, #53	; 0x35
   1e7ec:	movw	r0, #22072	; 0x5638
   1e7f0:	movt	r0, #2
   1e7f4:	bl	1144c <fwrite@plt>
   1e7f8:	mov	r3, r4
   1e7fc:	mov	r1, #1
   1e800:	mov	r2, #59	; 0x3b
   1e804:	movw	r0, #22128	; 0x5670
   1e808:	movt	r0, #2
   1e80c:	bl	1144c <fwrite@plt>
   1e810:	mov	r3, r4
   1e814:	mov	r1, #1
   1e818:	mov	r2, #58	; 0x3a
   1e81c:	movw	r0, #22188	; 0x56ac
   1e820:	movt	r0, #2
   1e824:	bl	1144c <fwrite@plt>
   1e828:	mov	r3, r4
   1e82c:	mov	r1, #1
   1e830:	mov	r2, #59	; 0x3b
   1e834:	movw	r0, #22248	; 0x56e8
   1e838:	movt	r0, #2
   1e83c:	bl	1144c <fwrite@plt>
   1e840:	mov	r3, r4
   1e844:	mov	r1, #1
   1e848:	mov	r2, #61	; 0x3d
   1e84c:	movw	r0, #22308	; 0x5724
   1e850:	movt	r0, #2
   1e854:	bl	1144c <fwrite@plt>
   1e858:	mov	r3, r4
   1e85c:	mov	r2, #28
   1e860:	mov	r1, #1
   1e864:	movw	r0, #22372	; 0x5764
   1e868:	movt	r0, #2
   1e86c:	bl	1144c <fwrite@plt>
   1e870:	mov	r1, r4
   1e874:	mov	r0, #10
   1e878:	bl	11638 <fputc@plt>
   1e87c:	mov	r3, r4
   1e880:	mov	r1, #1
   1e884:	mov	r2, #60	; 0x3c
   1e888:	movw	r0, #22404	; 0x5784
   1e88c:	movt	r0, #2
   1e890:	bl	1144c <fwrite@plt>
   1e894:	mov	r3, r4
   1e898:	mov	r2, #32
   1e89c:	mov	r1, #1
   1e8a0:	movw	r0, #22468	; 0x57c4
   1e8a4:	movt	r0, #2
   1e8a8:	bl	1144c <fwrite@plt>
   1e8ac:	mov	r1, r4
   1e8b0:	mov	r0, #10
   1e8b4:	bl	11638 <fputc@plt>
   1e8b8:	mov	r1, r4
   1e8bc:	mov	r0, #10
   1e8c0:	bl	11638 <fputc@plt>
   1e8c4:	mov	r1, r4
   1e8c8:	mov	r0, #10
   1e8cc:	bl	11638 <fputc@plt>
   1e8d0:	mov	r3, r4
   1e8d4:	mov	r1, #1
   1e8d8:	mov	r2, #26
   1e8dc:	movw	r0, #22504	; 0x57e8
   1e8e0:	movt	r0, #2
   1e8e4:	bl	1144c <fwrite@plt>
   1e8e8:	mov	r3, r4
   1e8ec:	mov	r1, #1
   1e8f0:	mov	r2, #55	; 0x37
   1e8f4:	movw	r0, #22532	; 0x5804
   1e8f8:	movt	r0, #2
   1e8fc:	bl	1144c <fwrite@plt>
   1e900:	mov	r3, r4
   1e904:	mov	r1, #1
   1e908:	mov	r2, #59	; 0x3b
   1e90c:	movw	r0, #22588	; 0x583c
   1e910:	movt	r0, #2
   1e914:	bl	1144c <fwrite@plt>
   1e918:	mov	r3, r4
   1e91c:	mov	r1, #1
   1e920:	mov	r2, #60	; 0x3c
   1e924:	movw	r0, #22648	; 0x5878
   1e928:	movt	r0, #2
   1e92c:	bl	1144c <fwrite@plt>
   1e930:	mov	r3, r4
   1e934:	mov	r1, #1
   1e938:	mov	r2, #52	; 0x34
   1e93c:	movw	r0, #22712	; 0x58b8
   1e940:	movt	r0, #2
   1e944:	bl	1144c <fwrite@plt>
   1e948:	mov	r3, r4
   1e94c:	mov	r1, #1
   1e950:	mov	r2, #2
   1e954:	movw	r0, #16224	; 0x3f60
   1e958:	movt	r0, #2
   1e95c:	bl	1144c <fwrite@plt>
   1e960:	mov	r3, r4
   1e964:	mov	r2, #55	; 0x37
   1e968:	mov	r1, #1
   1e96c:	movw	r0, #19176	; 0x4ae8
   1e970:	movt	r0, #2
   1e974:	bl	1144c <fwrite@plt>
   1e978:	mov	r1, r4
   1e97c:	mov	r0, #10
   1e980:	bl	11638 <fputc@plt>
   1e984:	mov	r3, r4
   1e988:	mov	r1, #1
   1e98c:	mov	r2, #69	; 0x45
   1e990:	movw	r0, #19232	; 0x4b20
   1e994:	movt	r0, #2
   1e998:	bl	1144c <fwrite@plt>
   1e99c:	mov	r3, r4
   1e9a0:	mov	r1, #1
   1e9a4:	mov	r2, #67	; 0x43
   1e9a8:	movw	r0, #19304	; 0x4b68
   1e9ac:	movt	r0, #2
   1e9b0:	bl	1144c <fwrite@plt>
   1e9b4:	mov	r3, r4
   1e9b8:	movw	r0, #19372	; 0x4bac
   1e9bc:	mov	r1, #1
   1e9c0:	movt	r0, #2
   1e9c4:	mov	r2, #38	; 0x26
   1e9c8:	pop	{r4, r5, r6, lr}
   1e9cc:	b	1144c <fwrite@plt>
   1e9d0:	push	{r4, r5, r6, lr}
   1e9d4:	mov	r4, r0
   1e9d8:	mov	r1, r4
   1e9dc:	mov	r0, #10
   1e9e0:	bl	11638 <fputc@plt>
   1e9e4:	mov	r3, r4
   1e9e8:	mov	r1, #1
   1e9ec:	mov	r2, #70	; 0x46
   1e9f0:	movw	r0, #22768	; 0x58f0
   1e9f4:	movt	r0, #2
   1e9f8:	bl	1144c <fwrite@plt>
   1e9fc:	mov	r3, r4
   1ea00:	mov	r2, #67	; 0x43
   1ea04:	mov	r1, #1
   1ea08:	movw	r0, #22840	; 0x5938
   1ea0c:	movt	r0, #2
   1ea10:	bl	1144c <fwrite@plt>
   1ea14:	mov	r1, r4
   1ea18:	mov	r0, #10
   1ea1c:	movw	r5, #24372	; 0x5f34
   1ea20:	bl	11638 <fputc@plt>
   1ea24:	mov	r3, r4
   1ea28:	mov	r1, #1
   1ea2c:	mov	r2, #72	; 0x48
   1ea30:	movw	r0, #22908	; 0x597c
   1ea34:	movt	r0, #2
   1ea38:	bl	1144c <fwrite@plt>
   1ea3c:	mov	r3, r4
   1ea40:	mov	r1, #1
   1ea44:	mov	r2, #66	; 0x42
   1ea48:	movw	r0, #22984	; 0x59c8
   1ea4c:	movt	r0, #2
   1ea50:	bl	1144c <fwrite@plt>
   1ea54:	mov	r3, r4
   1ea58:	mov	r1, #1
   1ea5c:	mov	r2, #66	; 0x42
   1ea60:	movw	r0, #23052	; 0x5a0c
   1ea64:	movt	r0, #2
   1ea68:	bl	1144c <fwrite@plt>
   1ea6c:	mov	r3, r4
   1ea70:	mov	r1, #1
   1ea74:	mov	r2, #60	; 0x3c
   1ea78:	movw	r0, #23120	; 0x5a50
   1ea7c:	movt	r0, #2
   1ea80:	bl	1144c <fwrite@plt>
   1ea84:	mov	r3, r4
   1ea88:	mov	r1, #1
   1ea8c:	mov	r2, #18
   1ea90:	movw	r0, #23184	; 0x5a90
   1ea94:	movt	r0, #2
   1ea98:	bl	1144c <fwrite@plt>
   1ea9c:	mov	r3, r4
   1eaa0:	mov	r1, #1
   1eaa4:	mov	r2, #63	; 0x3f
   1eaa8:	movw	r0, #23204	; 0x5aa4
   1eaac:	movt	r0, #2
   1eab0:	bl	1144c <fwrite@plt>
   1eab4:	mov	r3, r4
   1eab8:	mov	r1, #1
   1eabc:	mov	r2, #40	; 0x28
   1eac0:	movw	r0, #23268	; 0x5ae4
   1eac4:	movt	r0, #2
   1eac8:	bl	1144c <fwrite@plt>
   1eacc:	mov	r3, r4
   1ead0:	mov	r1, #1
   1ead4:	mov	r2, #61	; 0x3d
   1ead8:	movw	r0, #23312	; 0x5b10
   1eadc:	movt	r0, #2
   1eae0:	bl	1144c <fwrite@plt>
   1eae4:	mov	r3, r4
   1eae8:	mov	r2, #62	; 0x3e
   1eaec:	mov	r1, #1
   1eaf0:	movw	r0, #23376	; 0x5b50
   1eaf4:	movt	r0, #2
   1eaf8:	bl	1144c <fwrite@plt>
   1eafc:	mov	r1, r4
   1eb00:	mov	r0, #10
   1eb04:	movt	r5, #2
   1eb08:	bl	11638 <fputc@plt>
   1eb0c:	mov	r3, r4
   1eb10:	mov	r1, #1
   1eb14:	mov	r2, #70	; 0x46
   1eb18:	movw	r0, #23440	; 0x5b90
   1eb1c:	movt	r0, #2
   1eb20:	bl	1144c <fwrite@plt>
   1eb24:	mov	r3, r4
   1eb28:	mov	r1, #1
   1eb2c:	mov	r2, #55	; 0x37
   1eb30:	movw	r0, #23512	; 0x5bd8
   1eb34:	movt	r0, #2
   1eb38:	bl	1144c <fwrite@plt>
   1eb3c:	mov	r3, r4
   1eb40:	mov	r1, #1
   1eb44:	mov	r2, #60	; 0x3c
   1eb48:	movw	r0, #23568	; 0x5c10
   1eb4c:	movt	r0, #2
   1eb50:	bl	1144c <fwrite@plt>
   1eb54:	mov	r3, r4
   1eb58:	mov	r2, #41	; 0x29
   1eb5c:	mov	r1, #1
   1eb60:	movw	r0, #23632	; 0x5c50
   1eb64:	movt	r0, #2
   1eb68:	bl	1144c <fwrite@plt>
   1eb6c:	mov	r1, r4
   1eb70:	mov	r0, #10
   1eb74:	bl	11638 <fputc@plt>
   1eb78:	mov	r3, r4
   1eb7c:	mov	r2, #67	; 0x43
   1eb80:	mov	r1, #1
   1eb84:	movw	r0, #23676	; 0x5c7c
   1eb88:	movt	r0, #2
   1eb8c:	bl	1144c <fwrite@plt>
   1eb90:	mov	r1, r4
   1eb94:	mov	r0, #10
   1eb98:	bl	11638 <fputc@plt>
   1eb9c:	mov	r3, r4
   1eba0:	mov	r1, #1
   1eba4:	mov	r2, #68	; 0x44
   1eba8:	movw	r0, #23744	; 0x5cc0
   1ebac:	movt	r0, #2
   1ebb0:	bl	1144c <fwrite@plt>
   1ebb4:	mov	r3, r4
   1ebb8:	mov	r2, #28
   1ebbc:	mov	r1, #1
   1ebc0:	movw	r0, #23816	; 0x5d08
   1ebc4:	movt	r0, #2
   1ebc8:	bl	1144c <fwrite@plt>
   1ebcc:	mov	r1, r4
   1ebd0:	mov	r0, #10
   1ebd4:	bl	11638 <fputc@plt>
   1ebd8:	mov	r3, r4
   1ebdc:	mov	r1, #1
   1ebe0:	mov	r2, #65	; 0x41
   1ebe4:	movw	r0, #23848	; 0x5d28
   1ebe8:	movt	r0, #2
   1ebec:	bl	1144c <fwrite@plt>
   1ebf0:	mov	r3, r4
   1ebf4:	mov	r1, #1
   1ebf8:	mov	r2, #56	; 0x38
   1ebfc:	movw	r0, #23916	; 0x5d6c
   1ec00:	movt	r0, #2
   1ec04:	bl	1144c <fwrite@plt>
   1ec08:	mov	r3, r4
   1ec0c:	mov	r1, #1
   1ec10:	mov	r2, #56	; 0x38
   1ec14:	movw	r0, #23976	; 0x5da8
   1ec18:	movt	r0, #2
   1ec1c:	bl	1144c <fwrite@plt>
   1ec20:	mov	r3, r4
   1ec24:	mov	r2, #43	; 0x2b
   1ec28:	mov	r1, #1
   1ec2c:	movw	r0, #24036	; 0x5de4
   1ec30:	movt	r0, #2
   1ec34:	bl	1144c <fwrite@plt>
   1ec38:	mov	r1, r4
   1ec3c:	mov	r0, #10
   1ec40:	bl	11638 <fputc@plt>
   1ec44:	mov	r3, r4
   1ec48:	mov	r1, #1
   1ec4c:	mov	r2, #65	; 0x41
   1ec50:	movw	r0, #24080	; 0x5e10
   1ec54:	movt	r0, #2
   1ec58:	bl	1144c <fwrite@plt>
   1ec5c:	mov	r3, r4
   1ec60:	mov	r1, #1
   1ec64:	mov	r2, #54	; 0x36
   1ec68:	movw	r0, #24148	; 0x5e54
   1ec6c:	movt	r0, #2
   1ec70:	bl	1144c <fwrite@plt>
   1ec74:	mov	r3, r4
   1ec78:	mov	r1, #1
   1ec7c:	mov	r2, #49	; 0x31
   1ec80:	movw	r0, #24204	; 0x5e8c
   1ec84:	movt	r0, #2
   1ec88:	bl	1144c <fwrite@plt>
   1ec8c:	mov	r3, r4
   1ec90:	mov	r2, #40	; 0x28
   1ec94:	mov	r1, #1
   1ec98:	movw	r0, #24256	; 0x5ec0
   1ec9c:	movt	r0, #2
   1eca0:	bl	1144c <fwrite@plt>
   1eca4:	mov	r1, r4
   1eca8:	mov	r0, #10
   1ecac:	bl	11638 <fputc@plt>
   1ecb0:	mov	r1, r4
   1ecb4:	mov	r0, #10
   1ecb8:	bl	11638 <fputc@plt>
   1ecbc:	mov	r3, r4
   1ecc0:	mov	r2, #69	; 0x45
   1ecc4:	mov	r1, #1
   1ecc8:	movw	r0, #24300	; 0x5eec
   1eccc:	movt	r0, #2
   1ecd0:	bl	1144c <fwrite@plt>
   1ecd4:	mov	r1, r4
   1ecd8:	mov	r0, #10
   1ecdc:	bl	11638 <fputc@plt>
   1ece0:	mov	r3, r4
   1ece4:	mov	r0, r5
   1ece8:	mov	r1, #1
   1ecec:	mov	r2, #66	; 0x42
   1ecf0:	bl	1144c <fwrite@plt>
   1ecf4:	mov	r3, r4
   1ecf8:	mov	r2, #38	; 0x26
   1ecfc:	mov	r1, #1
   1ed00:	movw	r0, #24440	; 0x5f78
   1ed04:	movt	r0, #2
   1ed08:	bl	1144c <fwrite@plt>
   1ed0c:	mov	r1, r4
   1ed10:	mov	r0, #10
   1ed14:	bl	11638 <fputc@plt>
   1ed18:	mov	r3, r4
   1ed1c:	mov	r1, #1
   1ed20:	mov	r2, #66	; 0x42
   1ed24:	movw	r0, #24480	; 0x5fa0
   1ed28:	movt	r0, #2
   1ed2c:	bl	1144c <fwrite@plt>
   1ed30:	mov	r3, r4
   1ed34:	mov	r2, #44	; 0x2c
   1ed38:	mov	r1, #1
   1ed3c:	movw	r0, #24548	; 0x5fe4
   1ed40:	movt	r0, #2
   1ed44:	bl	1144c <fwrite@plt>
   1ed48:	mov	r1, r4
   1ed4c:	mov	r0, #10
   1ed50:	bl	11638 <fputc@plt>
   1ed54:	mov	r3, r4
   1ed58:	mov	r1, #1
   1ed5c:	mov	r2, #63	; 0x3f
   1ed60:	movw	r0, #24596	; 0x6014
   1ed64:	movt	r0, #2
   1ed68:	bl	1144c <fwrite@plt>
   1ed6c:	mov	r3, r4
   1ed70:	mov	r1, #1
   1ed74:	mov	r2, #54	; 0x36
   1ed78:	movw	r0, #24660	; 0x6054
   1ed7c:	movt	r0, #2
   1ed80:	bl	1144c <fwrite@plt>
   1ed84:	mov	r3, r4
   1ed88:	mov	r1, #1
   1ed8c:	mov	r2, #55	; 0x37
   1ed90:	movw	r0, #24716	; 0x608c
   1ed94:	movt	r0, #2
   1ed98:	bl	1144c <fwrite@plt>
   1ed9c:	mov	r3, r4
   1eda0:	mov	r2, #40	; 0x28
   1eda4:	mov	r1, #1
   1eda8:	movw	r0, #24772	; 0x60c4
   1edac:	movt	r0, #2
   1edb0:	bl	1144c <fwrite@plt>
   1edb4:	mov	r1, r4
   1edb8:	mov	r0, #10
   1edbc:	bl	11638 <fputc@plt>
   1edc0:	mov	r3, r4
   1edc4:	mov	r1, #1
   1edc8:	mov	r2, #62	; 0x3e
   1edcc:	movw	r0, #24816	; 0x60f0
   1edd0:	movt	r0, #2
   1edd4:	bl	1144c <fwrite@plt>
   1edd8:	mov	r3, r4
   1eddc:	mov	r1, #1
   1ede0:	mov	r2, #50	; 0x32
   1ede4:	movw	r0, #24880	; 0x6130
   1ede8:	movt	r0, #2
   1edec:	bl	1144c <fwrite@plt>
   1edf0:	mov	r3, r4
   1edf4:	mov	r1, #1
   1edf8:	mov	r2, #57	; 0x39
   1edfc:	movw	r0, #24932	; 0x6164
   1ee00:	movt	r0, #2
   1ee04:	bl	1144c <fwrite@plt>
   1ee08:	mov	r3, r4
   1ee0c:	mov	r2, #33	; 0x21
   1ee10:	mov	r1, #1
   1ee14:	movw	r0, #24992	; 0x61a0
   1ee18:	movt	r0, #2
   1ee1c:	bl	1144c <fwrite@plt>
   1ee20:	mov	r1, r4
   1ee24:	mov	r0, #10
   1ee28:	bl	11638 <fputc@plt>
   1ee2c:	mov	r3, r4
   1ee30:	mov	r1, #1
   1ee34:	mov	r2, #63	; 0x3f
   1ee38:	movw	r0, #25028	; 0x61c4
   1ee3c:	movt	r0, #2
   1ee40:	bl	1144c <fwrite@plt>
   1ee44:	mov	r3, r4
   1ee48:	mov	r1, #1
   1ee4c:	mov	r2, #67	; 0x43
   1ee50:	movw	r0, #25092	; 0x6204
   1ee54:	movt	r0, #2
   1ee58:	bl	1144c <fwrite@plt>
   1ee5c:	mov	r3, r4
   1ee60:	mov	r2, #19
   1ee64:	mov	r1, #1
   1ee68:	movw	r0, #25160	; 0x6248
   1ee6c:	movt	r0, #2
   1ee70:	bl	1144c <fwrite@plt>
   1ee74:	mov	r1, r4
   1ee78:	mov	r0, #10
   1ee7c:	bl	11638 <fputc@plt>
   1ee80:	mov	r3, r4
   1ee84:	mov	r2, #70	; 0x46
   1ee88:	mov	r1, #1
   1ee8c:	movw	r0, #25180	; 0x625c
   1ee90:	movt	r0, #2
   1ee94:	bl	1144c <fwrite@plt>
   1ee98:	mov	r1, r4
   1ee9c:	mov	r0, #10
   1eea0:	bl	11638 <fputc@plt>
   1eea4:	mov	r3, r4
   1eea8:	mov	r0, r5
   1eeac:	mov	r1, #1
   1eeb0:	mov	r2, #66	; 0x42
   1eeb4:	bl	1144c <fwrite@plt>
   1eeb8:	mov	r3, r4
   1eebc:	mov	r2, #36	; 0x24
   1eec0:	mov	r1, #1
   1eec4:	movw	r0, #25252	; 0x62a4
   1eec8:	movt	r0, #2
   1eecc:	bl	1144c <fwrite@plt>
   1eed0:	mov	r1, r4
   1eed4:	mov	r0, #10
   1eed8:	bl	11638 <fputc@plt>
   1eedc:	mov	r3, r4
   1eee0:	mov	r1, #1
   1eee4:	mov	r2, #70	; 0x46
   1eee8:	movw	r0, #25292	; 0x62cc
   1eeec:	movt	r0, #2
   1eef0:	bl	1144c <fwrite@plt>
   1eef4:	mov	r3, r4
   1eef8:	mov	r2, #36	; 0x24
   1eefc:	mov	r1, #1
   1ef00:	movw	r0, #25364	; 0x6314
   1ef04:	movt	r0, #2
   1ef08:	bl	1144c <fwrite@plt>
   1ef0c:	mov	r1, r4
   1ef10:	mov	r0, #10
   1ef14:	bl	11638 <fputc@plt>
   1ef18:	mov	r3, r4
   1ef1c:	mov	r1, #1
   1ef20:	mov	r2, #60	; 0x3c
   1ef24:	movw	r0, #25404	; 0x633c
   1ef28:	movt	r0, #2
   1ef2c:	bl	1144c <fwrite@plt>
   1ef30:	mov	r3, r4
   1ef34:	mov	r1, #1
   1ef38:	mov	r2, #53	; 0x35
   1ef3c:	movw	r0, #25468	; 0x637c
   1ef40:	movt	r0, #2
   1ef44:	bl	1144c <fwrite@plt>
   1ef48:	mov	r3, r4
   1ef4c:	mov	r1, #1
   1ef50:	mov	r2, #52	; 0x34
   1ef54:	movw	r0, #25524	; 0x63b4
   1ef58:	movt	r0, #2
   1ef5c:	bl	1144c <fwrite@plt>
   1ef60:	mov	r3, r4
   1ef64:	mov	r2, #38	; 0x26
   1ef68:	mov	r1, #1
   1ef6c:	movw	r0, #25580	; 0x63ec
   1ef70:	movt	r0, #2
   1ef74:	bl	1144c <fwrite@plt>
   1ef78:	mov	r1, r4
   1ef7c:	mov	r0, #10
   1ef80:	bl	11638 <fputc@plt>
   1ef84:	mov	r3, r4
   1ef88:	mov	r1, #1
   1ef8c:	mov	r2, #60	; 0x3c
   1ef90:	movw	r0, #25620	; 0x6414
   1ef94:	movt	r0, #2
   1ef98:	bl	1144c <fwrite@plt>
   1ef9c:	mov	r3, r4
   1efa0:	mov	r1, #1
   1efa4:	mov	r2, #49	; 0x31
   1efa8:	movw	r0, #25684	; 0x6454
   1efac:	movt	r0, #2
   1efb0:	bl	1144c <fwrite@plt>
   1efb4:	mov	r3, r4
   1efb8:	mov	r1, #1
   1efbc:	mov	r2, #49	; 0x31
   1efc0:	movw	r0, #25736	; 0x6488
   1efc4:	movt	r0, #2
   1efc8:	bl	1144c <fwrite@plt>
   1efcc:	mov	r3, r4
   1efd0:	mov	r2, #41	; 0x29
   1efd4:	mov	r1, #1
   1efd8:	movw	r0, #25788	; 0x64bc
   1efdc:	movt	r0, #2
   1efe0:	bl	1144c <fwrite@plt>
   1efe4:	mov	r1, r4
   1efe8:	mov	r0, #10
   1efec:	bl	11638 <fputc@plt>
   1eff0:	mov	r3, r4
   1eff4:	mov	r1, #1
   1eff8:	mov	r2, #66	; 0x42
   1effc:	movw	r0, #25832	; 0x64e8
   1f000:	movt	r0, #2
   1f004:	bl	1144c <fwrite@plt>
   1f008:	mov	r3, r4
   1f00c:	mov	r1, #1
   1f010:	mov	r2, #66	; 0x42
   1f014:	movw	r0, #25900	; 0x652c
   1f018:	movt	r0, #2
   1f01c:	bl	1144c <fwrite@plt>
   1f020:	mov	r3, r4
   1f024:	mov	r1, #1
   1f028:	mov	r2, #64	; 0x40
   1f02c:	movw	r0, #25968	; 0x6570
   1f030:	movt	r0, #2
   1f034:	bl	1144c <fwrite@plt>
   1f038:	mov	r3, r4
   1f03c:	mov	r1, #1
   1f040:	mov	r2, #71	; 0x47
   1f044:	movw	r0, #26036	; 0x65b4
   1f048:	movt	r0, #2
   1f04c:	bl	1144c <fwrite@plt>
   1f050:	mov	r3, r4
   1f054:	mov	r1, #1
   1f058:	mov	r2, #72	; 0x48
   1f05c:	movw	r0, #26108	; 0x65fc
   1f060:	movt	r0, #2
   1f064:	bl	1144c <fwrite@plt>
   1f068:	mov	r3, r4
   1f06c:	mov	r1, #1
   1f070:	mov	r2, #69	; 0x45
   1f074:	movw	r0, #26184	; 0x6648
   1f078:	movt	r0, #2
   1f07c:	bl	1144c <fwrite@plt>
   1f080:	mov	r3, r4
   1f084:	mov	r1, #1
   1f088:	mov	r2, #12
   1f08c:	movw	r0, #22752	; 0x58e0
   1f090:	movt	r0, #2
   1f094:	bl	1144c <fwrite@plt>
   1f098:	mov	r3, r4
   1f09c:	mov	r1, #1
   1f0a0:	mov	r2, #2
   1f0a4:	movw	r0, #16224	; 0x3f60
   1f0a8:	movt	r0, #2
   1f0ac:	bl	1144c <fwrite@plt>
   1f0b0:	mov	r3, r4
   1f0b4:	mov	r2, #55	; 0x37
   1f0b8:	mov	r1, #1
   1f0bc:	movw	r0, #19176	; 0x4ae8
   1f0c0:	movt	r0, #2
   1f0c4:	bl	1144c <fwrite@plt>
   1f0c8:	mov	r1, r4
   1f0cc:	mov	r0, #10
   1f0d0:	bl	11638 <fputc@plt>
   1f0d4:	mov	r3, r4
   1f0d8:	mov	r1, #1
   1f0dc:	mov	r2, #69	; 0x45
   1f0e0:	movw	r0, #19232	; 0x4b20
   1f0e4:	movt	r0, #2
   1f0e8:	bl	1144c <fwrite@plt>
   1f0ec:	mov	r3, r4
   1f0f0:	mov	r1, #1
   1f0f4:	mov	r2, #67	; 0x43
   1f0f8:	movw	r0, #19304	; 0x4b68
   1f0fc:	movt	r0, #2
   1f100:	bl	1144c <fwrite@plt>
   1f104:	mov	r3, r4
   1f108:	movw	r0, #19372	; 0x4bac
   1f10c:	mov	r1, #1
   1f110:	movt	r0, #2
   1f114:	mov	r2, #38	; 0x26
   1f118:	pop	{r4, r5, r6, lr}
   1f11c:	b	1144c <fwrite@plt>
   1f120:	push	{r3, r4, r5, r6, r7, lr}
   1f124:	subs	r4, r0, #0
   1f128:	beq	1f1ac <bfd_arch_bits_per_address@plt+0xdae4>
   1f12c:	ldr	r3, [r4]
   1f130:	cmp	r3, #0
   1f134:	beq	1f19c <bfd_arch_bits_per_address@plt+0xdad4>
   1f138:	mov	r2, r4
   1f13c:	mov	r3, #0
   1f140:	ldr	r1, [r2, #4]!
   1f144:	add	r3, r3, #1
   1f148:	cmp	r1, #0
   1f14c:	bne	1f140 <bfd_arch_bits_per_address@plt+0xda78>
   1f150:	add	r3, r3, #1
   1f154:	lsl	r0, r3, #2
   1f158:	bl	11458 <xmalloc@plt>
   1f15c:	mov	r6, r0
   1f160:	ldr	r0, [r4]
   1f164:	cmp	r0, #0
   1f168:	beq	1f1a4 <bfd_arch_bits_per_address@plt+0xdadc>
   1f16c:	rsb	r7, r4, #4
   1f170:	mov	r5, #0
   1f174:	bl	11470 <xstrdup@plt>
   1f178:	str	r0, [r6, r5]
   1f17c:	add	r5, r7, r4
   1f180:	ldr	r0, [r4, #4]!
   1f184:	cmp	r0, #0
   1f188:	bne	1f174 <bfd_arch_bits_per_address@plt+0xdaac>
   1f18c:	mov	r3, #0
   1f190:	mov	r0, r6
   1f194:	str	r3, [r6, r5]
   1f198:	pop	{r3, r4, r5, r6, r7, pc}
   1f19c:	mov	r0, #4
   1f1a0:	b	1f158 <bfd_arch_bits_per_address@plt+0xda90>
   1f1a4:	mov	r5, r0
   1f1a8:	b	1f18c <bfd_arch_bits_per_address@plt+0xdac4>
   1f1ac:	mov	r0, r4
   1f1b0:	pop	{r3, r4, r5, r6, r7, pc}
   1f1b4:	push	{r3, r4, r5, lr}
   1f1b8:	subs	r5, r0, #0
   1f1bc:	popeq	{r3, r4, r5, pc}
   1f1c0:	ldr	r0, [r5]
   1f1c4:	cmp	r0, #0
   1f1c8:	movne	r4, r5
   1f1cc:	beq	1f1e0 <bfd_arch_bits_per_address@plt+0xdb18>
   1f1d0:	bl	11374 <free@plt>
   1f1d4:	ldr	r0, [r4, #4]!
   1f1d8:	cmp	r0, #0
   1f1dc:	bne	1f1d0 <bfd_arch_bits_per_address@plt+0xdb08>
   1f1e0:	mov	r0, r5
   1f1e4:	pop	{r3, r4, r5, lr}
   1f1e8:	b	11374 <free@plt>
   1f1ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f1f0:	subs	r4, r0, #0
   1f1f4:	ldr	r5, [pc, #536]	; 1f414 <bfd_arch_bits_per_address@plt+0xdd4c>
   1f1f8:	sub	sp, sp, #12
   1f1fc:	add	r5, pc, r5
   1f200:	beq	1f40c <bfd_arch_bits_per_address@plt+0xdd44>
   1f204:	bl	11560 <strlen@plt>
   1f208:	mov	r9, #0
   1f20c:	mov	r7, r9
   1f210:	mov	r8, r9
   1f214:	mov	r6, r9
   1f218:	mov	fp, r9
   1f21c:	mov	sl, r9
   1f220:	add	r0, r0, #1
   1f224:	bl	11458 <xmalloc@plt>
   1f228:	ldr	r3, [pc, #488]	; 1f418 <bfd_arch_bits_per_address@plt+0xdd50>
   1f22c:	str	r0, [sp]
   1f230:	ldr	r5, [r5, r3]
   1f234:	ldrb	r3, [r4]
   1f238:	lsl	r3, r3, #1
   1f23c:	ldrh	r3, [r5, r3]
   1f240:	tst	r3, #64	; 0x40
   1f244:	beq	1f268 <bfd_arch_bits_per_address@plt+0xdba0>
   1f248:	mov	r3, r4
   1f24c:	ldrb	r2, [r3, #1]
   1f250:	add	r4, r3, #1
   1f254:	mov	r3, r4
   1f258:	lsl	r2, r2, #1
   1f25c:	ldrh	r2, [r5, r2]
   1f260:	tst	r2, #64	; 0x40
   1f264:	bne	1f24c <bfd_arch_bits_per_address@plt+0xdb84>
   1f268:	cmp	r7, #0
   1f26c:	beq	1f284 <bfd_arch_bits_per_address@plt+0xdbbc>
   1f270:	sub	r3, r7, #1
   1f274:	cmp	r9, r3
   1f278:	addlt	r3, r8, r9, lsl #2
   1f27c:	strlt	r3, [sp, #4]
   1f280:	blt	1f2b0 <bfd_arch_bits_per_address@plt+0xdbe8>
   1f284:	cmp	r8, #0
   1f288:	beq	1f3f8 <bfd_arch_bits_per_address@plt+0xdd30>
   1f28c:	lsl	r7, r7, #1
   1f290:	mov	r0, r8
   1f294:	lsl	r1, r7, #2
   1f298:	bl	11410 <xrealloc@plt>
   1f29c:	mov	r8, r0
   1f2a0:	add	r3, r8, r9, lsl #2
   1f2a4:	str	r3, [sp, #4]
   1f2a8:	mov	r3, #0
   1f2ac:	str	r3, [r8, r9, lsl #2]
   1f2b0:	ldrb	r3, [r4]
   1f2b4:	cmp	r3, #0
   1f2b8:	beq	1f370 <bfd_arch_bits_per_address@plt+0xdca8>
   1f2bc:	mov	r2, r4
   1f2c0:	ldr	lr, [sp]
   1f2c4:	b	1f2e8 <bfd_arch_bits_per_address@plt+0xdc20>
   1f2c8:	strb	r3, [lr]
   1f2cc:	add	lr, lr, #1
   1f2d0:	mov	r6, #0
   1f2d4:	ldrb	r3, [r2, #1]
   1f2d8:	add	r2, r2, #1
   1f2dc:	cmp	r3, #0
   1f2e0:	mov	r4, r2
   1f2e4:	beq	1f374 <bfd_arch_bits_per_address@plt+0xdcac>
   1f2e8:	lsl	r1, r3, #1
   1f2ec:	mov	r4, r2
   1f2f0:	ldrh	r1, [r5, r1]
   1f2f4:	tst	r1, #64	; 0x40
   1f2f8:	beq	1f308 <bfd_arch_bits_per_address@plt+0xdc40>
   1f2fc:	orr	r0, r6, fp
   1f300:	orrs	r0, r0, sl
   1f304:	beq	1f3ec <bfd_arch_bits_per_address@plt+0xdd24>
   1f308:	cmp	r6, #0
   1f30c:	bne	1f2c8 <bfd_arch_bits_per_address@plt+0xdc00>
   1f310:	cmp	r3, #92	; 0x5c
   1f314:	moveq	r6, #1
   1f318:	beq	1f2d4 <bfd_arch_bits_per_address@plt+0xdc0c>
   1f31c:	cmp	sl, #0
   1f320:	beq	1f33c <bfd_arch_bits_per_address@plt+0xdc74>
   1f324:	cmp	r3, #39	; 0x27
   1f328:	moveq	sl, r6
   1f32c:	beq	1f2d4 <bfd_arch_bits_per_address@plt+0xdc0c>
   1f330:	strb	r3, [lr]
   1f334:	add	lr, lr, #1
   1f338:	b	1f2d4 <bfd_arch_bits_per_address@plt+0xdc0c>
   1f33c:	cmp	fp, #0
   1f340:	beq	1f354 <bfd_arch_bits_per_address@plt+0xdc8c>
   1f344:	cmp	r3, #34	; 0x22
   1f348:	moveq	fp, sl
   1f34c:	bne	1f330 <bfd_arch_bits_per_address@plt+0xdc68>
   1f350:	b	1f2d4 <bfd_arch_bits_per_address@plt+0xdc0c>
   1f354:	cmp	r3, #39	; 0x27
   1f358:	moveq	sl, #1
   1f35c:	beq	1f2d4 <bfd_arch_bits_per_address@plt+0xdc0c>
   1f360:	cmp	r3, #34	; 0x22
   1f364:	moveq	fp, #1
   1f368:	bne	1f330 <bfd_arch_bits_per_address@plt+0xdc68>
   1f36c:	b	1f2d4 <bfd_arch_bits_per_address@plt+0xdc0c>
   1f370:	ldr	lr, [sp]
   1f374:	mov	r3, #0
   1f378:	ldr	r0, [sp]
   1f37c:	strb	r3, [lr]
   1f380:	add	r9, r9, #1
   1f384:	bl	11470 <xstrdup@plt>
   1f388:	ldr	r3, [sp, #4]
   1f38c:	str	r0, [r3]
   1f390:	mov	r3, #0
   1f394:	str	r3, [r8, r9, lsl #2]
   1f398:	ldrb	r2, [r4]
   1f39c:	lsl	r3, r2, #1
   1f3a0:	ldrh	r3, [r5, r3]
   1f3a4:	tst	r3, #64	; 0x40
   1f3a8:	beq	1f3cc <bfd_arch_bits_per_address@plt+0xdd04>
   1f3ac:	mov	r3, r4
   1f3b0:	ldrb	r2, [r3, #1]
   1f3b4:	add	r4, r3, #1
   1f3b8:	mov	r3, r4
   1f3bc:	lsl	r1, r2, #1
   1f3c0:	ldrh	r1, [r5, r1]
   1f3c4:	tst	r1, #64	; 0x40
   1f3c8:	bne	1f3b0 <bfd_arch_bits_per_address@plt+0xdce8>
   1f3cc:	cmp	r2, #0
   1f3d0:	bne	1f234 <bfd_arch_bits_per_address@plt+0xdb6c>
   1f3d4:	ldr	r0, [sp]
   1f3d8:	mov	r9, r8
   1f3dc:	bl	11374 <free@plt>
   1f3e0:	mov	r0, r9
   1f3e4:	add	sp, sp, #12
   1f3e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f3ec:	mov	r6, r0
   1f3f0:	mov	sl, r0
   1f3f4:	b	1f374 <bfd_arch_bits_per_address@plt+0xdcac>
   1f3f8:	mov	r0, #32
   1f3fc:	mov	r7, #8
   1f400:	bl	11458 <xmalloc@plt>
   1f404:	mov	r8, r0
   1f408:	b	1f2a0 <bfd_arch_bits_per_address@plt+0xdbd8>
   1f40c:	mov	r9, r4
   1f410:	b	1f3e0 <bfd_arch_bits_per_address@plt+0xdd18>
   1f414:	strdeq	r7, [r1], -ip
   1f418:	andeq	r0, r0, r4, asr #2
   1f41c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1f420:	subs	r5, r1, #0
   1f424:	ldr	r8, [pc, #180]	; 1f4e0 <bfd_arch_bits_per_address@plt+0xde18>
   1f428:	add	r8, pc, r8
   1f42c:	beq	1f4b0 <bfd_arch_bits_per_address@plt+0xdde8>
   1f430:	ldr	r6, [r0]
   1f434:	cmp	r6, #0
   1f438:	movne	r9, r0
   1f43c:	beq	1f4d8 <bfd_arch_bits_per_address@plt+0xde10>
   1f440:	ldrb	r4, [r6]
   1f444:	cmp	r4, #0
   1f448:	beq	1f4b8 <bfd_arch_bits_per_address@plt+0xddf0>
   1f44c:	ldr	r3, [pc, #144]	; 1f4e4 <bfd_arch_bits_per_address@plt+0xde1c>
   1f450:	ldr	r7, [r8, r3]
   1f454:	b	1f480 <bfd_arch_bits_per_address@plt+0xddb8>
   1f458:	cmp	r4, #34	; 0x22
   1f45c:	beq	1f4a4 <bfd_arch_bits_per_address@plt+0xdddc>
   1f460:	mov	r0, r4
   1f464:	mov	r1, r5
   1f468:	bl	11638 <fputc@plt>
   1f46c:	cmn	r0, #1
   1f470:	beq	1f4b0 <bfd_arch_bits_per_address@plt+0xdde8>
   1f474:	ldrb	r4, [r6, #1]!
   1f478:	cmp	r4, #0
   1f47c:	beq	1f4b8 <bfd_arch_bits_per_address@plt+0xddf0>
   1f480:	lsl	r3, r4, #1
   1f484:	mov	r1, r5
   1f488:	mov	r0, #92	; 0x5c
   1f48c:	ldrh	r3, [r7, r3]
   1f490:	tst	r3, #64	; 0x40
   1f494:	bne	1f4a4 <bfd_arch_bits_per_address@plt+0xdddc>
   1f498:	cmp	r4, #39	; 0x27
   1f49c:	cmpne	r4, r0
   1f4a0:	bne	1f458 <bfd_arch_bits_per_address@plt+0xdd90>
   1f4a4:	bl	11638 <fputc@plt>
   1f4a8:	cmn	r0, #1
   1f4ac:	bne	1f460 <bfd_arch_bits_per_address@plt+0xdd98>
   1f4b0:	mov	r0, #1
   1f4b4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1f4b8:	mov	r0, #10
   1f4bc:	mov	r1, r5
   1f4c0:	bl	11638 <fputc@plt>
   1f4c4:	cmn	r0, #1
   1f4c8:	beq	1f4b0 <bfd_arch_bits_per_address@plt+0xdde8>
   1f4cc:	ldr	r6, [r9, #4]!
   1f4d0:	cmp	r6, #0
   1f4d4:	bne	1f440 <bfd_arch_bits_per_address@plt+0xdd78>
   1f4d8:	mov	r0, #0
   1f4dc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1f4e0:	ldrdeq	r7, [r1], -r0
   1f4e4:	andeq	r0, r0, r4, asr #2
   1f4e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f4ec:	sub	sp, sp, #28
   1f4f0:	ldr	ip, [pc, #684]	; 1f7a4 <bfd_arch_bits_per_address@plt+0xe0dc>
   1f4f4:	mov	r6, r1
   1f4f8:	mov	sl, r0
   1f4fc:	mov	r5, #0
   1f500:	add	ip, pc, ip
   1f504:	str	ip, [sp, #12]
   1f508:	ldr	ip, [pc, #664]	; 1f7a8 <bfd_arch_bits_per_address@plt+0xe0e0>
   1f50c:	mov	r8, #2000	; 0x7d0
   1f510:	ldr	r1, [r0]
   1f514:	add	ip, pc, ip
   1f518:	mov	fp, ip
   1f51c:	b	1f524 <bfd_arch_bits_per_address@plt+0xde5c>
   1f520:	mov	r5, r4
   1f524:	add	r4, r5, #1
   1f528:	cmp	r4, r1
   1f52c:	bge	1f720 <bfd_arch_bits_per_address@plt+0xe058>
   1f530:	ldr	r3, [r6]
   1f534:	lsl	r7, r4, #2
   1f538:	ldr	r0, [r3, r4, lsl #2]
   1f53c:	ldrb	r2, [r0]
   1f540:	cmp	r2, #64	; 0x40
   1f544:	bne	1f520 <bfd_arch_bits_per_address@plt+0xde58>
   1f548:	subs	r8, r8, #1
   1f54c:	beq	1f778 <bfd_arch_bits_per_address@plt+0xe0b0>
   1f550:	add	r0, r0, #1
   1f554:	mov	r1, fp
   1f558:	bl	1165c <fopen64@plt>
   1f55c:	subs	r9, r0, #0
   1f560:	beq	1f718 <bfd_arch_bits_per_address@plt+0xe050>
   1f564:	mov	r1, #0
   1f568:	mov	r2, #2
   1f56c:	bl	11698 <fseek@plt>
   1f570:	cmn	r0, #1
   1f574:	beq	1f710 <bfd_arch_bits_per_address@plt+0xe048>
   1f578:	mov	r0, r9
   1f57c:	bl	113c8 <ftell@plt>
   1f580:	cmn	r0, #1
   1f584:	mov	ip, r0
   1f588:	beq	1f710 <bfd_arch_bits_per_address@plt+0xe048>
   1f58c:	mov	r1, #0
   1f590:	mov	r0, r9
   1f594:	mov	r2, r1
   1f598:	str	ip, [sp, #4]
   1f59c:	bl	11698 <fseek@plt>
   1f5a0:	ldr	ip, [sp, #4]
   1f5a4:	cmn	r0, #1
   1f5a8:	beq	1f710 <bfd_arch_bits_per_address@plt+0xe048>
   1f5ac:	add	r0, ip, #1
   1f5b0:	bl	11458 <xmalloc@plt>
   1f5b4:	ldr	ip, [sp, #4]
   1f5b8:	mov	r3, r9
   1f5bc:	mov	r1, #1
   1f5c0:	mov	r2, ip
   1f5c4:	str	r0, [sp, #16]
   1f5c8:	bl	114a0 <fread@plt>
   1f5cc:	ldr	ip, [sp, #4]
   1f5d0:	cmp	ip, r0
   1f5d4:	mov	r3, r0
   1f5d8:	beq	1f5f4 <bfd_arch_bits_per_address@plt+0xdf2c>
   1f5dc:	mov	r0, r9
   1f5e0:	str	r3, [sp, #8]
   1f5e4:	bl	1138c <ferror@plt>
   1f5e8:	ldr	r3, [sp, #8]
   1f5ec:	cmp	r0, #0
   1f5f0:	bne	1f710 <bfd_arch_bits_per_address@plt+0xe048>
   1f5f4:	ldr	ip, [sp, #16]
   1f5f8:	mov	r0, #0
   1f5fc:	strb	r0, [ip, r3]
   1f600:	ldrb	r3, [ip]
   1f604:	cmp	r3, #0
   1f608:	beq	1f64c <bfd_arch_bits_per_address@plt+0xdf84>
   1f60c:	ldr	r2, [pc, #408]	; 1f7ac <bfd_arch_bits_per_address@plt+0xe0e4>
   1f610:	lsl	r3, r3, #1
   1f614:	ldr	ip, [sp, #12]
   1f618:	ldr	r1, [ip, r2]
   1f61c:	ldrh	r3, [r1, r3]
   1f620:	tst	r3, #64	; 0x40
   1f624:	beq	1f728 <bfd_arch_bits_per_address@plt+0xe060>
   1f628:	ldr	r2, [sp, #16]
   1f62c:	b	1f640 <bfd_arch_bits_per_address@plt+0xdf78>
   1f630:	lsl	r3, r3, #1
   1f634:	ldrh	r3, [r1, r3]
   1f638:	tst	r3, #64	; 0x40
   1f63c:	beq	1f728 <bfd_arch_bits_per_address@plt+0xe060>
   1f640:	ldrb	r3, [r2, #1]!
   1f644:	cmp	r3, #0
   1f648:	bne	1f630 <bfd_arch_bits_per_address@plt+0xdf68>
   1f64c:	mov	r0, #4
   1f650:	mov	ip, #0
   1f654:	str	ip, [sp, #4]
   1f658:	bl	11458 <xmalloc@plt>
   1f65c:	ldr	ip, [sp, #4]
   1f660:	mov	r1, #0
   1f664:	str	r0, [sp, #20]
   1f668:	str	r1, [r0]
   1f66c:	ldr	r0, [r6]
   1f670:	str	ip, [sp, #8]
   1f674:	bl	1f120 <bfd_arch_bits_per_address@plt+0xda58>
   1f678:	ldr	r3, [sp, #8]
   1f67c:	ldr	ip, [sp, #4]
   1f680:	str	r0, [r6]
   1f684:	ldr	r1, [sl]
   1f688:	str	ip, [sp, #4]
   1f68c:	add	r1, r1, #1
   1f690:	str	r3, [sp, #8]
   1f694:	add	r1, r1, r3
   1f698:	lsl	r1, r1, #2
   1f69c:	bl	11410 <xrealloc@plt>
   1f6a0:	ldr	r3, [sp, #8]
   1f6a4:	ldr	r2, [sl]
   1f6a8:	add	lr, r7, #4
   1f6ac:	rsb	r2, r4, r2
   1f6b0:	lsl	r2, r2, #2
   1f6b4:	mov	r1, r0
   1f6b8:	add	r0, r3, r4
   1f6bc:	str	r1, [r6]
   1f6c0:	mov	r4, r5
   1f6c4:	add	r0, r1, r0, lsl #2
   1f6c8:	add	r1, r1, lr
   1f6cc:	str	r3, [sp, #8]
   1f6d0:	bl	11368 <memmove@plt>
   1f6d4:	ldr	ip, [sp, #4]
   1f6d8:	ldr	r0, [r6]
   1f6dc:	ldr	r1, [sp, #20]
   1f6e0:	mov	r2, ip
   1f6e4:	add	r0, r0, r7
   1f6e8:	bl	113b0 <memcpy@plt>
   1f6ec:	ldr	r2, [sl]
   1f6f0:	ldr	r3, [sp, #8]
   1f6f4:	sub	r2, r2, #1
   1f6f8:	ldr	r0, [sp, #20]
   1f6fc:	add	r3, r2, r3
   1f700:	str	r3, [sl]
   1f704:	bl	11374 <free@plt>
   1f708:	ldr	r0, [sp, #16]
   1f70c:	bl	11374 <free@plt>
   1f710:	mov	r0, r9
   1f714:	bl	11608 <fclose@plt>
   1f718:	ldr	r1, [sl]
   1f71c:	b	1f520 <bfd_arch_bits_per_address@plt+0xde58>
   1f720:	add	sp, sp, #28
   1f724:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f728:	ldr	r0, [sp, #16]
   1f72c:	bl	1f1ec <bfd_arch_bits_per_address@plt+0xdb24>
   1f730:	ldr	ip, [r0]
   1f734:	str	r0, [sp, #20]
   1f738:	ldr	r0, [r6]
   1f73c:	str	ip, [sp, #4]
   1f740:	bl	1f120 <bfd_arch_bits_per_address@plt+0xda58>
   1f744:	ldr	ip, [sp, #4]
   1f748:	cmp	ip, #0
   1f74c:	moveq	r3, ip
   1f750:	str	r0, [r6]
   1f754:	beq	1f684 <bfd_arch_bits_per_address@plt+0xdfbc>
   1f758:	ldr	r2, [sp, #20]
   1f75c:	mov	r3, #0
   1f760:	ldr	r1, [r2, #4]!
   1f764:	add	r3, r3, #1
   1f768:	cmp	r1, #0
   1f76c:	lsl	ip, r3, #2
   1f770:	bne	1f760 <bfd_arch_bits_per_address@plt+0xe098>
   1f774:	b	1f684 <bfd_arch_bits_per_address@plt+0xdfbc>
   1f778:	ldr	ip, [sp, #12]
   1f77c:	mov	r1, #1
   1f780:	ldr	r0, [pc, #40]	; 1f7b0 <bfd_arch_bits_per_address@plt+0xe0e8>
   1f784:	ldr	r2, [pc, #40]	; 1f7b4 <bfd_arch_bits_per_address@plt+0xe0ec>
   1f788:	ldr	r3, [r3]
   1f78c:	ldr	r0, [ip, r0]
   1f790:	add	r2, pc, r2
   1f794:	ldr	r0, [r0]
   1f798:	bl	115fc <__fprintf_chk@plt>
   1f79c:	mov	r0, #1
   1f7a0:	bl	11644 <xexit@plt>
   1f7a4:	strdeq	r7, [r1], -r8
   1f7a8:			; <UNDEFINED> instruction: 0x000036b0
   1f7ac:	andeq	r0, r0, r4, asr #2
   1f7b0:	andeq	r0, r0, r8, asr #2
   1f7b4:	strdeq	r6, [r0], -r8
   1f7b8:	subs	r3, r0, #0
   1f7bc:	beq	1f7e4 <bfd_arch_bits_per_address@plt+0xe11c>
   1f7c0:	ldr	r0, [r3]
   1f7c4:	cmp	r0, #0
   1f7c8:	bxeq	lr
   1f7cc:	mov	r0, #0
   1f7d0:	ldr	r2, [r3, #4]!
   1f7d4:	add	r0, r0, #1
   1f7d8:	cmp	r2, #0
   1f7dc:	bne	1f7d0 <bfd_arch_bits_per_address@plt+0xe108>
   1f7e0:	bx	lr
   1f7e4:	mov	r0, r3
   1f7e8:	bx	lr
   1f7ec:	cmp	r1, #0
   1f7f0:	beq	1f9fc <bfd_arch_bits_per_address@plt+0xe334>
   1f7f4:	eor	ip, r0, r1
   1f7f8:	rsbmi	r1, r1, #0
   1f7fc:	subs	r2, r1, #1
   1f800:	beq	1f9c8 <bfd_arch_bits_per_address@plt+0xe300>
   1f804:	movs	r3, r0
   1f808:	rsbmi	r3, r0, #0
   1f80c:	cmp	r3, r1
   1f810:	bls	1f9d4 <bfd_arch_bits_per_address@plt+0xe30c>
   1f814:	tst	r1, r2
   1f818:	beq	1f9e4 <bfd_arch_bits_per_address@plt+0xe31c>
   1f81c:	clz	r2, r3
   1f820:	clz	r0, r1
   1f824:	sub	r2, r0, r2
   1f828:	rsbs	r2, r2, #31
   1f82c:	addne	r2, r2, r2, lsl #1
   1f830:	mov	r0, #0
   1f834:	addne	pc, pc, r2, lsl #2
   1f838:	nop	{0}
   1f83c:	cmp	r3, r1, lsl #31
   1f840:	adc	r0, r0, r0
   1f844:	subcs	r3, r3, r1, lsl #31
   1f848:	cmp	r3, r1, lsl #30
   1f84c:	adc	r0, r0, r0
   1f850:	subcs	r3, r3, r1, lsl #30
   1f854:	cmp	r3, r1, lsl #29
   1f858:	adc	r0, r0, r0
   1f85c:	subcs	r3, r3, r1, lsl #29
   1f860:	cmp	r3, r1, lsl #28
   1f864:	adc	r0, r0, r0
   1f868:	subcs	r3, r3, r1, lsl #28
   1f86c:	cmp	r3, r1, lsl #27
   1f870:	adc	r0, r0, r0
   1f874:	subcs	r3, r3, r1, lsl #27
   1f878:	cmp	r3, r1, lsl #26
   1f87c:	adc	r0, r0, r0
   1f880:	subcs	r3, r3, r1, lsl #26
   1f884:	cmp	r3, r1, lsl #25
   1f888:	adc	r0, r0, r0
   1f88c:	subcs	r3, r3, r1, lsl #25
   1f890:	cmp	r3, r1, lsl #24
   1f894:	adc	r0, r0, r0
   1f898:	subcs	r3, r3, r1, lsl #24
   1f89c:	cmp	r3, r1, lsl #23
   1f8a0:	adc	r0, r0, r0
   1f8a4:	subcs	r3, r3, r1, lsl #23
   1f8a8:	cmp	r3, r1, lsl #22
   1f8ac:	adc	r0, r0, r0
   1f8b0:	subcs	r3, r3, r1, lsl #22
   1f8b4:	cmp	r3, r1, lsl #21
   1f8b8:	adc	r0, r0, r0
   1f8bc:	subcs	r3, r3, r1, lsl #21
   1f8c0:	cmp	r3, r1, lsl #20
   1f8c4:	adc	r0, r0, r0
   1f8c8:	subcs	r3, r3, r1, lsl #20
   1f8cc:	cmp	r3, r1, lsl #19
   1f8d0:	adc	r0, r0, r0
   1f8d4:	subcs	r3, r3, r1, lsl #19
   1f8d8:	cmp	r3, r1, lsl #18
   1f8dc:	adc	r0, r0, r0
   1f8e0:	subcs	r3, r3, r1, lsl #18
   1f8e4:	cmp	r3, r1, lsl #17
   1f8e8:	adc	r0, r0, r0
   1f8ec:	subcs	r3, r3, r1, lsl #17
   1f8f0:	cmp	r3, r1, lsl #16
   1f8f4:	adc	r0, r0, r0
   1f8f8:	subcs	r3, r3, r1, lsl #16
   1f8fc:	cmp	r3, r1, lsl #15
   1f900:	adc	r0, r0, r0
   1f904:	subcs	r3, r3, r1, lsl #15
   1f908:	cmp	r3, r1, lsl #14
   1f90c:	adc	r0, r0, r0
   1f910:	subcs	r3, r3, r1, lsl #14
   1f914:	cmp	r3, r1, lsl #13
   1f918:	adc	r0, r0, r0
   1f91c:	subcs	r3, r3, r1, lsl #13
   1f920:	cmp	r3, r1, lsl #12
   1f924:	adc	r0, r0, r0
   1f928:	subcs	r3, r3, r1, lsl #12
   1f92c:	cmp	r3, r1, lsl #11
   1f930:	adc	r0, r0, r0
   1f934:	subcs	r3, r3, r1, lsl #11
   1f938:	cmp	r3, r1, lsl #10
   1f93c:	adc	r0, r0, r0
   1f940:	subcs	r3, r3, r1, lsl #10
   1f944:	cmp	r3, r1, lsl #9
   1f948:	adc	r0, r0, r0
   1f94c:	subcs	r3, r3, r1, lsl #9
   1f950:	cmp	r3, r1, lsl #8
   1f954:	adc	r0, r0, r0
   1f958:	subcs	r3, r3, r1, lsl #8
   1f95c:	cmp	r3, r1, lsl #7
   1f960:	adc	r0, r0, r0
   1f964:	subcs	r3, r3, r1, lsl #7
   1f968:	cmp	r3, r1, lsl #6
   1f96c:	adc	r0, r0, r0
   1f970:	subcs	r3, r3, r1, lsl #6
   1f974:	cmp	r3, r1, lsl #5
   1f978:	adc	r0, r0, r0
   1f97c:	subcs	r3, r3, r1, lsl #5
   1f980:	cmp	r3, r1, lsl #4
   1f984:	adc	r0, r0, r0
   1f988:	subcs	r3, r3, r1, lsl #4
   1f98c:	cmp	r3, r1, lsl #3
   1f990:	adc	r0, r0, r0
   1f994:	subcs	r3, r3, r1, lsl #3
   1f998:	cmp	r3, r1, lsl #2
   1f99c:	adc	r0, r0, r0
   1f9a0:	subcs	r3, r3, r1, lsl #2
   1f9a4:	cmp	r3, r1, lsl #1
   1f9a8:	adc	r0, r0, r0
   1f9ac:	subcs	r3, r3, r1, lsl #1
   1f9b0:	cmp	r3, r1
   1f9b4:	adc	r0, r0, r0
   1f9b8:	subcs	r3, r3, r1
   1f9bc:	cmp	ip, #0
   1f9c0:	rsbmi	r0, r0, #0
   1f9c4:	bx	lr
   1f9c8:	teq	ip, r0
   1f9cc:	rsbmi	r0, r0, #0
   1f9d0:	bx	lr
   1f9d4:	movcc	r0, #0
   1f9d8:	asreq	r0, ip, #31
   1f9dc:	orreq	r0, r0, #1
   1f9e0:	bx	lr
   1f9e4:	clz	r2, r1
   1f9e8:	rsb	r2, r2, #31
   1f9ec:	cmp	ip, #0
   1f9f0:	lsr	r0, r3, r2
   1f9f4:	rsbmi	r0, r0, #0
   1f9f8:	bx	lr
   1f9fc:	cmp	r0, #0
   1fa00:	mvngt	r0, #-2147483648	; 0x80000000
   1fa04:	movlt	r0, #-2147483648	; 0x80000000
   1fa08:	b	1fe20 <bfd_arch_bits_per_address@plt+0xe758>
   1fa0c:	cmp	r1, #0
   1fa10:	beq	1f9fc <bfd_arch_bits_per_address@plt+0xe334>
   1fa14:	push	{r0, r1, lr}
   1fa18:	bl	1f7f4 <bfd_arch_bits_per_address@plt+0xe12c>
   1fa1c:	pop	{r1, r2, lr}
   1fa20:	mul	r3, r2, r0
   1fa24:	sub	r1, r1, r3
   1fa28:	bx	lr
   1fa2c:	eor	r1, r1, #-2147483648	; 0x80000000
   1fa30:	b	1fa38 <bfd_arch_bits_per_address@plt+0xe370>
   1fa34:	eor	r3, r3, #-2147483648	; 0x80000000
   1fa38:	push	{r4, r5, lr}
   1fa3c:	lsl	r4, r1, #1
   1fa40:	lsl	r5, r3, #1
   1fa44:	teq	r4, r5
   1fa48:	teqeq	r0, r2
   1fa4c:	orrsne	ip, r4, r0
   1fa50:	orrsne	ip, r5, r2
   1fa54:	mvnsne	ip, r4, asr #21
   1fa58:	mvnsne	ip, r5, asr #21
   1fa5c:	beq	1fc48 <bfd_arch_bits_per_address@plt+0xe580>
   1fa60:	lsr	r4, r4, #21
   1fa64:	rsbs	r5, r4, r5, lsr #21
   1fa68:	rsblt	r5, r5, #0
   1fa6c:	ble	1fa8c <bfd_arch_bits_per_address@plt+0xe3c4>
   1fa70:	add	r4, r4, r5
   1fa74:	eor	r2, r0, r2
   1fa78:	eor	r3, r1, r3
   1fa7c:	eor	r0, r2, r0
   1fa80:	eor	r1, r3, r1
   1fa84:	eor	r2, r0, r2
   1fa88:	eor	r3, r1, r3
   1fa8c:	cmp	r5, #54	; 0x36
   1fa90:	pophi	{r4, r5, pc}
   1fa94:	tst	r1, #-2147483648	; 0x80000000
   1fa98:	lsl	r1, r1, #12
   1fa9c:	mov	ip, #1048576	; 0x100000
   1faa0:	orr	r1, ip, r1, lsr #12
   1faa4:	beq	1fab0 <bfd_arch_bits_per_address@plt+0xe3e8>
   1faa8:	rsbs	r0, r0, #0
   1faac:	rsc	r1, r1, #0
   1fab0:	tst	r3, #-2147483648	; 0x80000000
   1fab4:	lsl	r3, r3, #12
   1fab8:	orr	r3, ip, r3, lsr #12
   1fabc:	beq	1fac8 <bfd_arch_bits_per_address@plt+0xe400>
   1fac0:	rsbs	r2, r2, #0
   1fac4:	rsc	r3, r3, #0
   1fac8:	teq	r4, r5
   1facc:	beq	1fc30 <bfd_arch_bits_per_address@plt+0xe568>
   1fad0:	sub	r4, r4, #1
   1fad4:	rsbs	lr, r5, #32
   1fad8:	blt	1faf4 <bfd_arch_bits_per_address@plt+0xe42c>
   1fadc:	lsl	ip, r2, lr
   1fae0:	adds	r0, r0, r2, lsr r5
   1fae4:	adc	r1, r1, #0
   1fae8:	adds	r0, r0, r3, lsl lr
   1faec:	adcs	r1, r1, r3, asr r5
   1faf0:	b	1fb10 <bfd_arch_bits_per_address@plt+0xe448>
   1faf4:	sub	r5, r5, #32
   1faf8:	add	lr, lr, #32
   1fafc:	cmp	r2, #1
   1fb00:	lsl	ip, r3, lr
   1fb04:	orrcs	ip, ip, #2
   1fb08:	adds	r0, r0, r3, asr r5
   1fb0c:	adcs	r1, r1, r3, asr #31
   1fb10:	and	r5, r1, #-2147483648	; 0x80000000
   1fb14:	bpl	1fb24 <bfd_arch_bits_per_address@plt+0xe45c>
   1fb18:	rsbs	ip, ip, #0
   1fb1c:	rscs	r0, r0, #0
   1fb20:	rsc	r1, r1, #0
   1fb24:	cmp	r1, #1048576	; 0x100000
   1fb28:	bcc	1fb68 <bfd_arch_bits_per_address@plt+0xe4a0>
   1fb2c:	cmp	r1, #2097152	; 0x200000
   1fb30:	bcc	1fb50 <bfd_arch_bits_per_address@plt+0xe488>
   1fb34:	lsrs	r1, r1, #1
   1fb38:	rrxs	r0, r0
   1fb3c:	rrx	ip, ip
   1fb40:	add	r4, r4, #1
   1fb44:	lsl	r2, r4, #21
   1fb48:	cmn	r2, #4194304	; 0x400000
   1fb4c:	bcs	1fca8 <bfd_arch_bits_per_address@plt+0xe5e0>
   1fb50:	cmp	ip, #-2147483648	; 0x80000000
   1fb54:	lsrseq	ip, r0, #1
   1fb58:	adcs	r0, r0, #0
   1fb5c:	adc	r1, r1, r4, lsl #20
   1fb60:	orr	r1, r1, r5
   1fb64:	pop	{r4, r5, pc}
   1fb68:	lsls	ip, ip, #1
   1fb6c:	adcs	r0, r0, r0
   1fb70:	adc	r1, r1, r1
   1fb74:	tst	r1, #1048576	; 0x100000
   1fb78:	sub	r4, r4, #1
   1fb7c:	bne	1fb50 <bfd_arch_bits_per_address@plt+0xe488>
   1fb80:	teq	r1, #0
   1fb84:	moveq	r1, r0
   1fb88:	moveq	r0, #0
   1fb8c:	clz	r3, r1
   1fb90:	addeq	r3, r3, #32
   1fb94:	sub	r3, r3, #11
   1fb98:	subs	r2, r3, #32
   1fb9c:	bge	1fbc0 <bfd_arch_bits_per_address@plt+0xe4f8>
   1fba0:	adds	r2, r2, #12
   1fba4:	ble	1fbbc <bfd_arch_bits_per_address@plt+0xe4f4>
   1fba8:	add	ip, r2, #20
   1fbac:	rsb	r2, r2, #12
   1fbb0:	lsl	r0, r1, ip
   1fbb4:	lsr	r1, r1, r2
   1fbb8:	b	1fbd0 <bfd_arch_bits_per_address@plt+0xe508>
   1fbbc:	add	r2, r2, #20
   1fbc0:	rsble	ip, r2, #32
   1fbc4:	lsl	r1, r1, r2
   1fbc8:	orrle	r1, r1, r0, lsr ip
   1fbcc:	lslle	r0, r0, r2
   1fbd0:	subs	r4, r4, r3
   1fbd4:	addge	r1, r1, r4, lsl #20
   1fbd8:	orrge	r1, r1, r5
   1fbdc:	popge	{r4, r5, pc}
   1fbe0:	mvn	r4, r4
   1fbe4:	subs	r4, r4, #31
   1fbe8:	bge	1fc24 <bfd_arch_bits_per_address@plt+0xe55c>
   1fbec:	adds	r4, r4, #12
   1fbf0:	bgt	1fc0c <bfd_arch_bits_per_address@plt+0xe544>
   1fbf4:	add	r4, r4, #20
   1fbf8:	rsb	r2, r4, #32
   1fbfc:	lsr	r0, r0, r4
   1fc00:	orr	r0, r0, r1, lsl r2
   1fc04:	orr	r1, r5, r1, lsr r4
   1fc08:	pop	{r4, r5, pc}
   1fc0c:	rsb	r4, r4, #12
   1fc10:	rsb	r2, r4, #32
   1fc14:	lsr	r0, r0, r2
   1fc18:	orr	r0, r0, r1, lsl r4
   1fc1c:	mov	r1, r5
   1fc20:	pop	{r4, r5, pc}
   1fc24:	lsr	r0, r1, r4
   1fc28:	mov	r1, r5
   1fc2c:	pop	{r4, r5, pc}
   1fc30:	teq	r4, #0
   1fc34:	eor	r3, r3, #1048576	; 0x100000
   1fc38:	eoreq	r1, r1, #1048576	; 0x100000
   1fc3c:	addeq	r4, r4, #1
   1fc40:	subne	r5, r5, #1
   1fc44:	b	1fad0 <bfd_arch_bits_per_address@plt+0xe408>
   1fc48:	mvns	ip, r4, asr #21
   1fc4c:	mvnsne	ip, r5, asr #21
   1fc50:	beq	1fcb8 <bfd_arch_bits_per_address@plt+0xe5f0>
   1fc54:	teq	r4, r5
   1fc58:	teqeq	r0, r2
   1fc5c:	beq	1fc70 <bfd_arch_bits_per_address@plt+0xe5a8>
   1fc60:	orrs	ip, r4, r0
   1fc64:	moveq	r1, r3
   1fc68:	moveq	r0, r2
   1fc6c:	pop	{r4, r5, pc}
   1fc70:	teq	r1, r3
   1fc74:	movne	r1, #0
   1fc78:	movne	r0, #0
   1fc7c:	popne	{r4, r5, pc}
   1fc80:	lsrs	ip, r4, #21
   1fc84:	bne	1fc98 <bfd_arch_bits_per_address@plt+0xe5d0>
   1fc88:	lsls	r0, r0, #1
   1fc8c:	adcs	r1, r1, r1
   1fc90:	orrcs	r1, r1, #-2147483648	; 0x80000000
   1fc94:	pop	{r4, r5, pc}
   1fc98:	adds	r4, r4, #4194304	; 0x400000
   1fc9c:	addcc	r1, r1, #1048576	; 0x100000
   1fca0:	popcc	{r4, r5, pc}
   1fca4:	and	r5, r1, #-2147483648	; 0x80000000
   1fca8:	orr	r1, r5, #2130706432	; 0x7f000000
   1fcac:	orr	r1, r1, #15728640	; 0xf00000
   1fcb0:	mov	r0, #0
   1fcb4:	pop	{r4, r5, pc}
   1fcb8:	mvns	ip, r4, asr #21
   1fcbc:	movne	r1, r3
   1fcc0:	movne	r0, r2
   1fcc4:	mvnseq	ip, r5, asr #21
   1fcc8:	movne	r3, r1
   1fccc:	movne	r2, r0
   1fcd0:	orrs	r4, r0, r1, lsl #12
   1fcd4:	orrseq	r5, r2, r3, lsl #12
   1fcd8:	teqeq	r1, r3
   1fcdc:	orrne	r1, r1, #524288	; 0x80000
   1fce0:	pop	{r4, r5, pc}
   1fce4:	teq	r0, #0
   1fce8:	moveq	r1, #0
   1fcec:	bxeq	lr
   1fcf0:	push	{r4, r5, lr}
   1fcf4:	mov	r4, #1024	; 0x400
   1fcf8:	add	r4, r4, #50	; 0x32
   1fcfc:	mov	r5, #0
   1fd00:	mov	r1, #0
   1fd04:	b	1fb80 <bfd_arch_bits_per_address@plt+0xe4b8>
   1fd08:	teq	r0, #0
   1fd0c:	moveq	r1, #0
   1fd10:	bxeq	lr
   1fd14:	push	{r4, r5, lr}
   1fd18:	mov	r4, #1024	; 0x400
   1fd1c:	add	r4, r4, #50	; 0x32
   1fd20:	ands	r5, r0, #-2147483648	; 0x80000000
   1fd24:	rsbmi	r0, r0, #0
   1fd28:	mov	r1, #0
   1fd2c:	b	1fb80 <bfd_arch_bits_per_address@plt+0xe4b8>
   1fd30:	lsls	r2, r0, #1
   1fd34:	asr	r1, r2, #3
   1fd38:	rrx	r1, r1
   1fd3c:	lsl	r0, r2, #28
   1fd40:	andsne	r3, r2, #-16777216	; 0xff000000
   1fd44:	teqne	r3, #-16777216	; 0xff000000
   1fd48:	eorne	r1, r1, #939524096	; 0x38000000
   1fd4c:	bxne	lr
   1fd50:	teq	r2, #0
   1fd54:	teqne	r3, #-16777216	; 0xff000000
   1fd58:	bxeq	lr
   1fd5c:	push	{r4, r5, lr}
   1fd60:	mov	r4, #896	; 0x380
   1fd64:	and	r5, r1, #-2147483648	; 0x80000000
   1fd68:	bic	r1, r1, #-2147483648	; 0x80000000
   1fd6c:	b	1fb80 <bfd_arch_bits_per_address@plt+0xe4b8>
   1fd70:	orrs	r2, r0, r1
   1fd74:	bxeq	lr
   1fd78:	push	{r4, r5, lr}
   1fd7c:	mov	r5, #0
   1fd80:	b	1fda0 <bfd_arch_bits_per_address@plt+0xe6d8>
   1fd84:	orrs	r2, r0, r1
   1fd88:	bxeq	lr
   1fd8c:	push	{r4, r5, lr}
   1fd90:	ands	r5, r1, #-2147483648	; 0x80000000
   1fd94:	bpl	1fda0 <bfd_arch_bits_per_address@plt+0xe6d8>
   1fd98:	rsbs	r0, r0, #0
   1fd9c:	rsc	r1, r1, #0
   1fda0:	mov	r4, #1024	; 0x400
   1fda4:	add	r4, r4, #50	; 0x32
   1fda8:	lsrs	ip, r1, #22
   1fdac:	beq	1fb24 <bfd_arch_bits_per_address@plt+0xe45c>
   1fdb0:	mov	r2, #3
   1fdb4:	lsrs	ip, ip, #3
   1fdb8:	addne	r2, r2, #3
   1fdbc:	lsrs	ip, ip, #3
   1fdc0:	addne	r2, r2, #3
   1fdc4:	add	r2, r2, ip, lsr #3
   1fdc8:	rsb	r3, r2, #32
   1fdcc:	lsl	ip, r0, r3
   1fdd0:	lsr	r0, r0, r2
   1fdd4:	orr	r0, r0, r1, lsl r3
   1fdd8:	lsr	r1, r1, r2
   1fddc:	add	r4, r4, r2
   1fde0:	b	1fb24 <bfd_arch_bits_per_address@plt+0xe45c>
   1fde4:	cmp	r3, #0
   1fde8:	cmpeq	r2, #0
   1fdec:	bne	1fe04 <bfd_arch_bits_per_address@plt+0xe73c>
   1fdf0:	cmp	r1, #0
   1fdf4:	cmpeq	r0, #0
   1fdf8:	mvnne	r1, #0
   1fdfc:	mvnne	r0, #0
   1fe00:	b	1fe20 <bfd_arch_bits_per_address@plt+0xe758>
   1fe04:	sub	sp, sp, #8
   1fe08:	push	{sp, lr}
   1fe0c:	bl	1feb4 <bfd_arch_bits_per_address@plt+0xe7ec>
   1fe10:	ldr	lr, [sp, #4]
   1fe14:	add	sp, sp, #8
   1fe18:	pop	{r2, r3}
   1fe1c:	bx	lr
   1fe20:	push	{r1, lr}
   1fe24:	mov	r0, #8
   1fe28:	bl	1132c <raise@plt>
   1fe2c:	pop	{r1, pc}
   1fe30:	vmov	d7, r0, r1
   1fe34:	vldr	d5, [pc, #44]	; 1fe68 <bfd_arch_bits_per_address@plt+0xe7a0>
   1fe38:	vldr	d6, [pc, #48]	; 1fe70 <bfd_arch_bits_per_address@plt+0xe7a8>
   1fe3c:	mov	r0, #0
   1fe40:	vmul.f64	d5, d7, d5
   1fe44:	vcvt.u32.f64	s9, d5
   1fe48:	vcvt.f64.u32	d5, s9
   1fe4c:	vmov	r1, s9
   1fe50:	vmls.f64	d7, d5, d6
   1fe54:	vcvt.u32.f64	s14, d7
   1fe58:	vmov	r3, s14
   1fe5c:	orr	r0, r0, r3
   1fe60:	bx	lr
   1fe64:	nop	{0}
   1fe68:	andeq	r0, r0, r0
   1fe6c:	ldclcc	0, cr0, [r0]
   1fe70:	andeq	r0, r0, r0
   1fe74:	mvnsmi	r0, r0
   1fe78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1fe7c:	mov	r8, r2
   1fe80:	mov	r6, r0
   1fe84:	mov	r7, r1
   1fe88:	mov	sl, r3
   1fe8c:	ldr	r9, [sp, #32]
   1fe90:	bl	1fef0 <bfd_arch_bits_per_address@plt+0xe828>
   1fe94:	umull	r4, r5, r8, r0
   1fe98:	mul	r8, r8, r1
   1fe9c:	mla	r2, r0, sl, r8
   1fea0:	add	r5, r2, r5
   1fea4:	subs	r4, r6, r4
   1fea8:	sbc	r5, r7, r5
   1feac:	strd	r4, [r9]
   1feb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1feb4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1feb8:	mov	r8, r2
   1febc:	mov	r6, r0
   1fec0:	mov	r7, r1
   1fec4:	mov	r5, r3
   1fec8:	ldr	r9, [sp, #32]
   1fecc:	bl	2037c <bfd_arch_bits_per_address@plt+0xecb4>
   1fed0:	mul	r3, r0, r5
   1fed4:	umull	r4, r5, r0, r8
   1fed8:	mla	r8, r8, r1, r3
   1fedc:	add	r5, r8, r5
   1fee0:	subs	r4, r6, r4
   1fee4:	sbc	r5, r7, r5
   1fee8:	strd	r4, [r9]
   1feec:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1fef0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fef4:	rsbs	r4, r0, #0
   1fef8:	rsc	r5, r1, #0
   1fefc:	cmp	r1, #0
   1ff00:	mvn	r6, #0
   1ff04:	sub	sp, sp, #12
   1ff08:	movge	r4, r0
   1ff0c:	movge	r5, r1
   1ff10:	movge	r6, #0
   1ff14:	cmp	r3, #0
   1ff18:	blt	20150 <bfd_arch_bits_per_address@plt+0xea88>
   1ff1c:	cmp	r3, #0
   1ff20:	mov	sl, r4
   1ff24:	mov	ip, r5
   1ff28:	mov	r0, r2
   1ff2c:	mov	r1, r3
   1ff30:	mov	r8, r2
   1ff34:	mov	r7, r4
   1ff38:	mov	r9, r5
   1ff3c:	bne	20034 <bfd_arch_bits_per_address@plt+0xe96c>
   1ff40:	cmp	r2, r5
   1ff44:	bls	20070 <bfd_arch_bits_per_address@plt+0xe9a8>
   1ff48:	clz	r3, r2
   1ff4c:	cmp	r3, #0
   1ff50:	rsbne	r2, r3, #32
   1ff54:	lslne	r8, r0, r3
   1ff58:	lsrne	r2, r4, r2
   1ff5c:	lslne	r7, r4, r3
   1ff60:	orrne	r9, r2, r5, lsl r3
   1ff64:	lsr	r4, r8, #16
   1ff68:	uxth	sl, r8
   1ff6c:	mov	r1, r4
   1ff70:	mov	r0, r9
   1ff74:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   1ff78:	mov	r1, r4
   1ff7c:	mov	fp, r0
   1ff80:	mov	r0, r9
   1ff84:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   1ff88:	mul	r0, sl, fp
   1ff8c:	lsr	r2, r7, #16
   1ff90:	orr	r1, r2, r1, lsl #16
   1ff94:	cmp	r0, r1
   1ff98:	bls	1ffbc <bfd_arch_bits_per_address@plt+0xe8f4>
   1ff9c:	adds	r1, r1, r8
   1ffa0:	sub	r3, fp, #1
   1ffa4:	bcs	1ffb8 <bfd_arch_bits_per_address@plt+0xe8f0>
   1ffa8:	cmp	r0, r1
   1ffac:	subhi	fp, fp, #2
   1ffb0:	addhi	r1, r1, r8
   1ffb4:	bhi	1ffbc <bfd_arch_bits_per_address@plt+0xe8f4>
   1ffb8:	mov	fp, r3
   1ffbc:	rsb	r9, r0, r1
   1ffc0:	mov	r1, r4
   1ffc4:	uxth	r7, r7
   1ffc8:	mov	r0, r9
   1ffcc:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   1ffd0:	mov	r1, r4
   1ffd4:	mov	r5, r0
   1ffd8:	mov	r0, r9
   1ffdc:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   1ffe0:	mul	sl, sl, r5
   1ffe4:	orr	r1, r7, r1, lsl #16
   1ffe8:	cmp	sl, r1
   1ffec:	bls	2000c <bfd_arch_bits_per_address@plt+0xe944>
   1fff0:	adds	r8, r1, r8
   1fff4:	sub	r3, r5, #1
   1fff8:	bcs	20008 <bfd_arch_bits_per_address@plt+0xe940>
   1fffc:	cmp	sl, r8
   20000:	subhi	r5, r5, #2
   20004:	bhi	2000c <bfd_arch_bits_per_address@plt+0xe944>
   20008:	mov	r5, r3
   2000c:	orr	r3, r5, fp, lsl #16
   20010:	mov	r4, #0
   20014:	cmp	r6, #0
   20018:	mov	r0, r3
   2001c:	mov	r1, r4
   20020:	beq	2002c <bfd_arch_bits_per_address@plt+0xe964>
   20024:	rsbs	r0, r0, #0
   20028:	rsc	r1, r1, #0
   2002c:	add	sp, sp, #12
   20030:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20034:	cmp	r3, r5
   20038:	movhi	r4, #0
   2003c:	movhi	r3, r4
   20040:	bhi	20014 <bfd_arch_bits_per_address@plt+0xe94c>
   20044:	clz	r5, r1
   20048:	cmp	r5, #0
   2004c:	bne	2023c <bfd_arch_bits_per_address@plt+0xeb74>
   20050:	cmp	r1, ip
   20054:	cmpcs	r2, sl
   20058:	movhi	r4, #0
   2005c:	movls	r4, #1
   20060:	movls	r3, #1
   20064:	movls	r4, r5
   20068:	movhi	r3, r4
   2006c:	b	20014 <bfd_arch_bits_per_address@plt+0xe94c>
   20070:	cmp	r2, #0
   20074:	bne	20088 <bfd_arch_bits_per_address@plt+0xe9c0>
   20078:	mov	r1, r2
   2007c:	mov	r0, #1
   20080:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   20084:	mov	r8, r0
   20088:	clz	r3, r8
   2008c:	cmp	r3, #0
   20090:	bne	20160 <bfd_arch_bits_per_address@plt+0xea98>
   20094:	rsb	r9, r8, r9
   20098:	lsr	r5, r8, #16
   2009c:	uxth	sl, r8
   200a0:	mov	r4, #1
   200a4:	mov	r1, r5
   200a8:	mov	r0, r9
   200ac:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   200b0:	mov	r1, r5
   200b4:	mov	fp, r0
   200b8:	mov	r0, r9
   200bc:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   200c0:	mul	r0, sl, fp
   200c4:	lsr	r2, r7, #16
   200c8:	orr	r1, r2, r1, lsl #16
   200cc:	cmp	r0, r1
   200d0:	bls	200f0 <bfd_arch_bits_per_address@plt+0xea28>
   200d4:	adds	r1, r1, r8
   200d8:	sub	r3, fp, #1
   200dc:	bcs	2035c <bfd_arch_bits_per_address@plt+0xec94>
   200e0:	cmp	r0, r1
   200e4:	subhi	fp, fp, #2
   200e8:	addhi	r1, r1, r8
   200ec:	bls	2035c <bfd_arch_bits_per_address@plt+0xec94>
   200f0:	rsb	r2, r0, r1
   200f4:	mov	r1, r5
   200f8:	str	r2, [sp]
   200fc:	uxth	r7, r7
   20100:	mov	r0, r2
   20104:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   20108:	ldr	r2, [sp]
   2010c:	mov	r1, r5
   20110:	mov	r9, r0
   20114:	mov	r0, r2
   20118:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   2011c:	mul	sl, sl, r9
   20120:	orr	r1, r7, r1, lsl #16
   20124:	cmp	sl, r1
   20128:	bls	20148 <bfd_arch_bits_per_address@plt+0xea80>
   2012c:	adds	r8, r1, r8
   20130:	sub	r3, r9, #1
   20134:	bcs	20144 <bfd_arch_bits_per_address@plt+0xea7c>
   20138:	cmp	sl, r8
   2013c:	subhi	r9, r9, #2
   20140:	bhi	20148 <bfd_arch_bits_per_address@plt+0xea80>
   20144:	mov	r9, r3
   20148:	orr	r3, r9, fp, lsl #16
   2014c:	b	20014 <bfd_arch_bits_per_address@plt+0xe94c>
   20150:	mvn	r6, r6
   20154:	rsbs	r2, r2, #0
   20158:	rsc	r3, r3, #0
   2015c:	b	1ff1c <bfd_arch_bits_per_address@plt+0xe854>
   20160:	lsl	r8, r8, r3
   20164:	rsb	fp, r3, #32
   20168:	lsr	r4, r9, fp
   2016c:	lsr	fp, r7, fp
   20170:	lsr	r5, r8, #16
   20174:	orr	fp, fp, r9, lsl r3
   20178:	mov	r0, r4
   2017c:	lsl	r7, r7, r3
   20180:	mov	r1, r5
   20184:	uxth	sl, r8
   20188:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   2018c:	mov	r1, r5
   20190:	mov	r3, r0
   20194:	mov	r0, r4
   20198:	str	r3, [sp]
   2019c:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   201a0:	ldr	r3, [sp]
   201a4:	lsr	r2, fp, #16
   201a8:	mul	r0, sl, r3
   201ac:	orr	r1, r2, r1, lsl #16
   201b0:	cmp	r0, r1
   201b4:	bls	201d4 <bfd_arch_bits_per_address@plt+0xeb0c>
   201b8:	adds	r1, r1, r8
   201bc:	sub	r2, r3, #1
   201c0:	bcs	20374 <bfd_arch_bits_per_address@plt+0xecac>
   201c4:	cmp	r0, r1
   201c8:	subhi	r3, r3, #2
   201cc:	addhi	r1, r1, r8
   201d0:	bls	20374 <bfd_arch_bits_per_address@plt+0xecac>
   201d4:	rsb	r9, r0, r1
   201d8:	mov	r1, r5
   201dc:	str	r3, [sp]
   201e0:	uxth	fp, fp
   201e4:	mov	r0, r9
   201e8:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   201ec:	mov	r1, r5
   201f0:	mov	r4, r0
   201f4:	mov	r0, r9
   201f8:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   201fc:	mul	r9, sl, r4
   20200:	ldr	r3, [sp]
   20204:	orr	r1, fp, r1, lsl #16
   20208:	cmp	r9, r1
   2020c:	bls	20230 <bfd_arch_bits_per_address@plt+0xeb68>
   20210:	adds	r1, r1, r8
   20214:	sub	r2, r4, #1
   20218:	bcs	2022c <bfd_arch_bits_per_address@plt+0xeb64>
   2021c:	cmp	r9, r1
   20220:	subhi	r4, r4, #2
   20224:	addhi	r1, r1, r8
   20228:	bhi	20230 <bfd_arch_bits_per_address@plt+0xeb68>
   2022c:	mov	r4, r2
   20230:	rsb	r9, r9, r1
   20234:	orr	r4, r4, r3, lsl #16
   20238:	b	200a4 <bfd_arch_bits_per_address@plt+0xe9dc>
   2023c:	rsb	sl, r5, #32
   20240:	lsl	r3, r2, r5
   20244:	lsr	r0, r2, sl
   20248:	lsr	r2, ip, sl
   2024c:	orr	r4, r0, r1, lsl r5
   20250:	lsr	sl, r7, sl
   20254:	mov	r0, r2
   20258:	orr	sl, sl, ip, lsl r5
   2025c:	lsr	r9, r4, #16
   20260:	str	r3, [sp, #4]
   20264:	str	r2, [sp]
   20268:	uxth	fp, r4
   2026c:	mov	r1, r9
   20270:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   20274:	ldr	r2, [sp]
   20278:	mov	r1, r9
   2027c:	mov	r8, r0
   20280:	mov	r0, r2
   20284:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   20288:	mul	r0, fp, r8
   2028c:	lsr	r2, sl, #16
   20290:	orr	r1, r2, r1, lsl #16
   20294:	cmp	r0, r1
   20298:	bls	202b8 <bfd_arch_bits_per_address@plt+0xebf0>
   2029c:	adds	r1, r1, r4
   202a0:	sub	r2, r8, #1
   202a4:	bcs	2036c <bfd_arch_bits_per_address@plt+0xeca4>
   202a8:	cmp	r0, r1
   202ac:	subhi	r8, r8, #2
   202b0:	addhi	r1, r1, r4
   202b4:	bls	2036c <bfd_arch_bits_per_address@plt+0xeca4>
   202b8:	rsb	ip, r0, r1
   202bc:	mov	r1, r9
   202c0:	str	ip, [sp]
   202c4:	mov	r0, ip
   202c8:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   202cc:	ldr	ip, [sp]
   202d0:	mov	r1, r9
   202d4:	mov	r2, r0
   202d8:	mov	r0, ip
   202dc:	str	r2, [sp]
   202e0:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   202e4:	ldr	r2, [sp]
   202e8:	uxth	ip, sl
   202ec:	mul	fp, fp, r2
   202f0:	orr	ip, ip, r1, lsl #16
   202f4:	cmp	fp, ip
   202f8:	bls	20318 <bfd_arch_bits_per_address@plt+0xec50>
   202fc:	adds	ip, ip, r4
   20300:	sub	r1, r2, #1
   20304:	bcs	20364 <bfd_arch_bits_per_address@plt+0xec9c>
   20308:	cmp	fp, ip
   2030c:	subhi	r2, r2, #2
   20310:	addhi	ip, ip, r4
   20314:	bls	20364 <bfd_arch_bits_per_address@plt+0xec9c>
   20318:	ldr	r0, [sp, #4]
   2031c:	orr	r1, r2, r8, lsl #16
   20320:	rsb	fp, fp, ip
   20324:	umull	r2, r3, r1, r0
   20328:	cmp	fp, r3
   2032c:	bcc	20350 <bfd_arch_bits_per_address@plt+0xec88>
   20330:	movne	r4, #0
   20334:	moveq	r4, #1
   20338:	cmp	r2, r7, lsl r5
   2033c:	movls	r4, #0
   20340:	andhi	r4, r4, #1
   20344:	cmp	r4, #0
   20348:	moveq	r3, r1
   2034c:	beq	20014 <bfd_arch_bits_per_address@plt+0xe94c>
   20350:	sub	r3, r1, #1
   20354:	mov	r4, #0
   20358:	b	20014 <bfd_arch_bits_per_address@plt+0xe94c>
   2035c:	mov	fp, r3
   20360:	b	200f0 <bfd_arch_bits_per_address@plt+0xea28>
   20364:	mov	r2, r1
   20368:	b	20318 <bfd_arch_bits_per_address@plt+0xec50>
   2036c:	mov	r8, r2
   20370:	b	202b8 <bfd_arch_bits_per_address@plt+0xebf0>
   20374:	mov	r3, r2
   20378:	b	201d4 <bfd_arch_bits_per_address@plt+0xeb0c>
   2037c:	cmp	r3, #0
   20380:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20384:	mov	r6, r0
   20388:	sub	sp, sp, #12
   2038c:	mov	r5, r1
   20390:	mov	r7, r0
   20394:	mov	r4, r2
   20398:	mov	r8, r1
   2039c:	bne	2047c <bfd_arch_bits_per_address@plt+0xedb4>
   203a0:	cmp	r2, r1
   203a4:	bls	204b8 <bfd_arch_bits_per_address@plt+0xedf0>
   203a8:	clz	r3, r2
   203ac:	cmp	r3, #0
   203b0:	rsbne	r8, r3, #32
   203b4:	lslne	r4, r2, r3
   203b8:	lsrne	r8, r0, r8
   203bc:	lslne	r7, r0, r3
   203c0:	orrne	r8, r8, r1, lsl r3
   203c4:	lsr	r5, r4, #16
   203c8:	uxth	sl, r4
   203cc:	mov	r1, r5
   203d0:	mov	r0, r8
   203d4:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   203d8:	mov	r1, r5
   203dc:	mov	r9, r0
   203e0:	mov	r0, r8
   203e4:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   203e8:	mul	r0, sl, r9
   203ec:	lsr	r3, r7, #16
   203f0:	orr	r1, r3, r1, lsl #16
   203f4:	cmp	r0, r1
   203f8:	bls	2041c <bfd_arch_bits_per_address@plt+0xed54>
   203fc:	adds	r1, r1, r4
   20400:	sub	r2, r9, #1
   20404:	bcs	20418 <bfd_arch_bits_per_address@plt+0xed50>
   20408:	cmp	r0, r1
   2040c:	subhi	r9, r9, #2
   20410:	addhi	r1, r1, r4
   20414:	bhi	2041c <bfd_arch_bits_per_address@plt+0xed54>
   20418:	mov	r9, r2
   2041c:	rsb	r8, r0, r1
   20420:	mov	r1, r5
   20424:	uxth	r7, r7
   20428:	mov	r0, r8
   2042c:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   20430:	mov	r1, r5
   20434:	mov	r6, r0
   20438:	mov	r0, r8
   2043c:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   20440:	mul	sl, sl, r6
   20444:	orr	r1, r7, r1, lsl #16
   20448:	cmp	sl, r1
   2044c:	bls	20468 <bfd_arch_bits_per_address@plt+0xeda0>
   20450:	adds	r4, r1, r4
   20454:	sub	r3, r6, #1
   20458:	bcs	20764 <bfd_arch_bits_per_address@plt+0xf09c>
   2045c:	cmp	sl, r4
   20460:	subhi	r6, r6, #2
   20464:	bls	20764 <bfd_arch_bits_per_address@plt+0xf09c>
   20468:	orr	r0, r6, r9, lsl #16
   2046c:	mov	r6, #0
   20470:	mov	r1, r6
   20474:	add	sp, sp, #12
   20478:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2047c:	cmp	r3, r1
   20480:	movhi	r6, #0
   20484:	movhi	r0, r6
   20488:	bhi	20470 <bfd_arch_bits_per_address@plt+0xeda8>
   2048c:	clz	r7, r3
   20490:	cmp	r7, #0
   20494:	bne	20594 <bfd_arch_bits_per_address@plt+0xeecc>
   20498:	cmp	r3, r1
   2049c:	cmpcs	r2, r6
   204a0:	movhi	r6, #0
   204a4:	movls	r6, #1
   204a8:	movls	r0, #1
   204ac:	movls	r6, r7
   204b0:	movhi	r0, r6
   204b4:	b	20470 <bfd_arch_bits_per_address@plt+0xeda8>
   204b8:	cmp	r2, #0
   204bc:	bne	204d0 <bfd_arch_bits_per_address@plt+0xee08>
   204c0:	mov	r1, r2
   204c4:	mov	r0, #1
   204c8:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   204cc:	mov	r4, r0
   204d0:	clz	r3, r4
   204d4:	cmp	r3, #0
   204d8:	bne	20690 <bfd_arch_bits_per_address@plt+0xefc8>
   204dc:	rsb	r5, r4, r5
   204e0:	lsr	r8, r4, #16
   204e4:	uxth	sl, r4
   204e8:	mov	r6, #1
   204ec:	mov	r1, r8
   204f0:	mov	r0, r5
   204f4:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   204f8:	mov	r1, r8
   204fc:	mov	r9, r0
   20500:	mov	r0, r5
   20504:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   20508:	mul	r0, sl, r9
   2050c:	lsr	r3, r7, #16
   20510:	orr	r1, r3, r1, lsl #16
   20514:	cmp	r0, r1
   20518:	bls	20538 <bfd_arch_bits_per_address@plt+0xee70>
   2051c:	adds	r1, r1, r4
   20520:	sub	r2, r9, #1
   20524:	bcs	2076c <bfd_arch_bits_per_address@plt+0xf0a4>
   20528:	cmp	r0, r1
   2052c:	subhi	r9, r9, #2
   20530:	addhi	r1, r1, r4
   20534:	bls	2076c <bfd_arch_bits_per_address@plt+0xf0a4>
   20538:	rsb	fp, r0, r1
   2053c:	mov	r1, r8
   20540:	uxth	r7, r7
   20544:	mov	r0, fp
   20548:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   2054c:	mov	r1, r8
   20550:	mov	r5, r0
   20554:	mov	r0, fp
   20558:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   2055c:	mul	sl, sl, r5
   20560:	orr	r1, r7, r1, lsl #16
   20564:	cmp	sl, r1
   20568:	bls	20584 <bfd_arch_bits_per_address@plt+0xeebc>
   2056c:	adds	r4, r1, r4
   20570:	sub	r3, r5, #1
   20574:	bcs	20774 <bfd_arch_bits_per_address@plt+0xf0ac>
   20578:	cmp	sl, r4
   2057c:	subhi	r5, r5, #2
   20580:	bls	20774 <bfd_arch_bits_per_address@plt+0xf0ac>
   20584:	orr	r0, r5, r9, lsl #16
   20588:	mov	r1, r6
   2058c:	add	sp, sp, #12
   20590:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20594:	rsb	r1, r7, #32
   20598:	lsl	r0, r2, r7
   2059c:	lsr	r2, r2, r1
   205a0:	lsr	fp, r5, r1
   205a4:	orr	r8, r2, r3, lsl r7
   205a8:	lsr	r1, r6, r1
   205ac:	str	r0, [sp, #4]
   205b0:	orr	r5, r1, r5, lsl r7
   205b4:	lsr	r9, r8, #16
   205b8:	mov	r0, fp
   205bc:	uxth	sl, r8
   205c0:	mov	r1, r9
   205c4:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   205c8:	mov	r1, r9
   205cc:	mov	r4, r0
   205d0:	mov	r0, fp
   205d4:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   205d8:	mul	r0, sl, r4
   205dc:	lsr	ip, r5, #16
   205e0:	orr	r1, ip, r1, lsl #16
   205e4:	cmp	r0, r1
   205e8:	bls	205fc <bfd_arch_bits_per_address@plt+0xef34>
   205ec:	adds	r1, r1, r8
   205f0:	sub	r2, r4, #1
   205f4:	bcc	20790 <bfd_arch_bits_per_address@plt+0xf0c8>
   205f8:	mov	r4, r2
   205fc:	rsb	ip, r0, r1
   20600:	mov	r1, r9
   20604:	str	ip, [sp]
   20608:	uxth	r5, r5
   2060c:	mov	r0, ip
   20610:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   20614:	ldr	ip, [sp]
   20618:	mov	r1, r9
   2061c:	mov	fp, r0
   20620:	mov	r0, ip
   20624:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   20628:	mul	sl, sl, fp
   2062c:	orr	r1, r5, r1, lsl #16
   20630:	cmp	sl, r1
   20634:	bls	20648 <bfd_arch_bits_per_address@plt+0xef80>
   20638:	adds	r1, r1, r8
   2063c:	sub	r2, fp, #1
   20640:	bcc	2077c <bfd_arch_bits_per_address@plt+0xf0b4>
   20644:	mov	fp, r2
   20648:	ldr	r3, [sp, #4]
   2064c:	orr	r0, fp, r4, lsl #16
   20650:	rsb	sl, sl, r1
   20654:	umull	r4, r5, r0, r3
   20658:	cmp	sl, r5
   2065c:	bcc	2067c <bfd_arch_bits_per_address@plt+0xefb4>
   20660:	movne	r3, #0
   20664:	moveq	r3, #1
   20668:	cmp	r4, r6, lsl r7
   2066c:	movls	r6, #0
   20670:	andhi	r6, r3, #1
   20674:	cmp	r6, #0
   20678:	beq	20470 <bfd_arch_bits_per_address@plt+0xeda8>
   2067c:	mov	r6, #0
   20680:	sub	r0, r0, #1
   20684:	mov	r1, r6
   20688:	add	sp, sp, #12
   2068c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20690:	lsl	r4, r4, r3
   20694:	rsb	r9, r3, #32
   20698:	lsr	r2, r5, r9
   2069c:	lsr	r9, r6, r9
   206a0:	lsr	r8, r4, #16
   206a4:	orr	r9, r9, r5, lsl r3
   206a8:	mov	r0, r2
   206ac:	lsl	r7, r6, r3
   206b0:	mov	r1, r8
   206b4:	str	r2, [sp]
   206b8:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   206bc:	ldr	r2, [sp]
   206c0:	mov	r1, r8
   206c4:	uxth	sl, r4
   206c8:	mov	fp, r0
   206cc:	mov	r0, r2
   206d0:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   206d4:	mul	r0, sl, fp
   206d8:	lsr	r3, r9, #16
   206dc:	orr	r1, r3, r1, lsl #16
   206e0:	cmp	r0, r1
   206e4:	bls	20704 <bfd_arch_bits_per_address@plt+0xf03c>
   206e8:	adds	r1, r1, r4
   206ec:	sub	r3, fp, #1
   206f0:	bcs	207a4 <bfd_arch_bits_per_address@plt+0xf0dc>
   206f4:	cmp	r0, r1
   206f8:	subhi	fp, fp, #2
   206fc:	addhi	r1, r1, r4
   20700:	bls	207a4 <bfd_arch_bits_per_address@plt+0xf0dc>
   20704:	rsb	r5, r0, r1
   20708:	mov	r1, r8
   2070c:	uxth	r9, r9
   20710:	mov	r0, r5
   20714:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   20718:	mov	r1, r8
   2071c:	mov	r6, r0
   20720:	mov	r0, r5
   20724:	bl	20998 <bfd_arch_bits_per_address@plt+0xf2d0>
   20728:	mul	r5, sl, r6
   2072c:	orr	r1, r9, r1, lsl #16
   20730:	cmp	r5, r1
   20734:	bls	20758 <bfd_arch_bits_per_address@plt+0xf090>
   20738:	adds	r1, r1, r4
   2073c:	sub	r3, r6, #1
   20740:	bcs	20754 <bfd_arch_bits_per_address@plt+0xf08c>
   20744:	cmp	r5, r1
   20748:	subhi	r6, r6, #2
   2074c:	addhi	r1, r1, r4
   20750:	bhi	20758 <bfd_arch_bits_per_address@plt+0xf090>
   20754:	mov	r6, r3
   20758:	rsb	r5, r5, r1
   2075c:	orr	r6, r6, fp, lsl #16
   20760:	b	204ec <bfd_arch_bits_per_address@plt+0xee24>
   20764:	mov	r6, r3
   20768:	b	20468 <bfd_arch_bits_per_address@plt+0xeda0>
   2076c:	mov	r9, r2
   20770:	b	20538 <bfd_arch_bits_per_address@plt+0xee70>
   20774:	mov	r5, r3
   20778:	b	20584 <bfd_arch_bits_per_address@plt+0xeebc>
   2077c:	cmp	sl, r1
   20780:	subhi	fp, fp, #2
   20784:	addhi	r1, r1, r8
   20788:	bhi	20648 <bfd_arch_bits_per_address@plt+0xef80>
   2078c:	b	20644 <bfd_arch_bits_per_address@plt+0xef7c>
   20790:	cmp	r0, r1
   20794:	subhi	r4, r4, #2
   20798:	addhi	r1, r1, r8
   2079c:	bhi	205fc <bfd_arch_bits_per_address@plt+0xef34>
   207a0:	b	205f8 <bfd_arch_bits_per_address@plt+0xef30>
   207a4:	mov	fp, r3
   207a8:	b	20704 <bfd_arch_bits_per_address@plt+0xf03c>
   207ac:	subs	r2, r1, #1
   207b0:	bxeq	lr
   207b4:	bcc	2098c <bfd_arch_bits_per_address@plt+0xf2c4>
   207b8:	cmp	r0, r1
   207bc:	bls	20970 <bfd_arch_bits_per_address@plt+0xf2a8>
   207c0:	tst	r1, r2
   207c4:	beq	2097c <bfd_arch_bits_per_address@plt+0xf2b4>
   207c8:	clz	r3, r0
   207cc:	clz	r2, r1
   207d0:	sub	r3, r2, r3
   207d4:	rsbs	r3, r3, #31
   207d8:	addne	r3, r3, r3, lsl #1
   207dc:	mov	r2, #0
   207e0:	addne	pc, pc, r3, lsl #2
   207e4:	nop	{0}
   207e8:	cmp	r0, r1, lsl #31
   207ec:	adc	r2, r2, r2
   207f0:	subcs	r0, r0, r1, lsl #31
   207f4:	cmp	r0, r1, lsl #30
   207f8:	adc	r2, r2, r2
   207fc:	subcs	r0, r0, r1, lsl #30
   20800:	cmp	r0, r1, lsl #29
   20804:	adc	r2, r2, r2
   20808:	subcs	r0, r0, r1, lsl #29
   2080c:	cmp	r0, r1, lsl #28
   20810:	adc	r2, r2, r2
   20814:	subcs	r0, r0, r1, lsl #28
   20818:	cmp	r0, r1, lsl #27
   2081c:	adc	r2, r2, r2
   20820:	subcs	r0, r0, r1, lsl #27
   20824:	cmp	r0, r1, lsl #26
   20828:	adc	r2, r2, r2
   2082c:	subcs	r0, r0, r1, lsl #26
   20830:	cmp	r0, r1, lsl #25
   20834:	adc	r2, r2, r2
   20838:	subcs	r0, r0, r1, lsl #25
   2083c:	cmp	r0, r1, lsl #24
   20840:	adc	r2, r2, r2
   20844:	subcs	r0, r0, r1, lsl #24
   20848:	cmp	r0, r1, lsl #23
   2084c:	adc	r2, r2, r2
   20850:	subcs	r0, r0, r1, lsl #23
   20854:	cmp	r0, r1, lsl #22
   20858:	adc	r2, r2, r2
   2085c:	subcs	r0, r0, r1, lsl #22
   20860:	cmp	r0, r1, lsl #21
   20864:	adc	r2, r2, r2
   20868:	subcs	r0, r0, r1, lsl #21
   2086c:	cmp	r0, r1, lsl #20
   20870:	adc	r2, r2, r2
   20874:	subcs	r0, r0, r1, lsl #20
   20878:	cmp	r0, r1, lsl #19
   2087c:	adc	r2, r2, r2
   20880:	subcs	r0, r0, r1, lsl #19
   20884:	cmp	r0, r1, lsl #18
   20888:	adc	r2, r2, r2
   2088c:	subcs	r0, r0, r1, lsl #18
   20890:	cmp	r0, r1, lsl #17
   20894:	adc	r2, r2, r2
   20898:	subcs	r0, r0, r1, lsl #17
   2089c:	cmp	r0, r1, lsl #16
   208a0:	adc	r2, r2, r2
   208a4:	subcs	r0, r0, r1, lsl #16
   208a8:	cmp	r0, r1, lsl #15
   208ac:	adc	r2, r2, r2
   208b0:	subcs	r0, r0, r1, lsl #15
   208b4:	cmp	r0, r1, lsl #14
   208b8:	adc	r2, r2, r2
   208bc:	subcs	r0, r0, r1, lsl #14
   208c0:	cmp	r0, r1, lsl #13
   208c4:	adc	r2, r2, r2
   208c8:	subcs	r0, r0, r1, lsl #13
   208cc:	cmp	r0, r1, lsl #12
   208d0:	adc	r2, r2, r2
   208d4:	subcs	r0, r0, r1, lsl #12
   208d8:	cmp	r0, r1, lsl #11
   208dc:	adc	r2, r2, r2
   208e0:	subcs	r0, r0, r1, lsl #11
   208e4:	cmp	r0, r1, lsl #10
   208e8:	adc	r2, r2, r2
   208ec:	subcs	r0, r0, r1, lsl #10
   208f0:	cmp	r0, r1, lsl #9
   208f4:	adc	r2, r2, r2
   208f8:	subcs	r0, r0, r1, lsl #9
   208fc:	cmp	r0, r1, lsl #8
   20900:	adc	r2, r2, r2
   20904:	subcs	r0, r0, r1, lsl #8
   20908:	cmp	r0, r1, lsl #7
   2090c:	adc	r2, r2, r2
   20910:	subcs	r0, r0, r1, lsl #7
   20914:	cmp	r0, r1, lsl #6
   20918:	adc	r2, r2, r2
   2091c:	subcs	r0, r0, r1, lsl #6
   20920:	cmp	r0, r1, lsl #5
   20924:	adc	r2, r2, r2
   20928:	subcs	r0, r0, r1, lsl #5
   2092c:	cmp	r0, r1, lsl #4
   20930:	adc	r2, r2, r2
   20934:	subcs	r0, r0, r1, lsl #4
   20938:	cmp	r0, r1, lsl #3
   2093c:	adc	r2, r2, r2
   20940:	subcs	r0, r0, r1, lsl #3
   20944:	cmp	r0, r1, lsl #2
   20948:	adc	r2, r2, r2
   2094c:	subcs	r0, r0, r1, lsl #2
   20950:	cmp	r0, r1, lsl #1
   20954:	adc	r2, r2, r2
   20958:	subcs	r0, r0, r1, lsl #1
   2095c:	cmp	r0, r1
   20960:	adc	r2, r2, r2
   20964:	subcs	r0, r0, r1
   20968:	mov	r0, r2
   2096c:	bx	lr
   20970:	moveq	r0, #1
   20974:	movne	r0, #0
   20978:	bx	lr
   2097c:	clz	r2, r1
   20980:	rsb	r2, r2, #31
   20984:	lsr	r0, r0, r2
   20988:	bx	lr
   2098c:	cmp	r0, #0
   20990:	mvnne	r0, #0
   20994:	b	1fe20 <bfd_arch_bits_per_address@plt+0xe758>
   20998:	cmp	r1, #0
   2099c:	beq	2098c <bfd_arch_bits_per_address@plt+0xf2c4>
   209a0:	push	{r0, r1, lr}
   209a4:	bl	207ac <bfd_arch_bits_per_address@plt+0xf0e4>
   209a8:	pop	{r1, r2, lr}
   209ac:	mul	r3, r2, r0
   209b0:	sub	r1, r1, r3
   209b4:	bx	lr
   209b8:	ldr	r3, [r0]
   209bc:	tst	r3, #1073741824	; 0x40000000
   209c0:	orrne	r3, r3, #-2147483648	; 0x80000000
   209c4:	biceq	r3, r3, #-2147483648	; 0x80000000
   209c8:	add	r0, r0, r3
   209cc:	bx	lr
   209d0:	cmp	r1, #0
   209d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   209d8:	mov	r6, r0
   209dc:	sub	sp, sp, #12
   209e0:	mov	r9, r2
   209e4:	beq	20a68 <bfd_arch_bits_per_address@plt+0xf3a0>
   209e8:	sub	r1, r1, #1
   209ec:	mov	r7, #0
   209f0:	str	r1, [sp, #4]
   209f4:	mov	r8, r1
   209f8:	add	r4, r7, r8
   209fc:	add	r4, r4, r4, lsr #31
   20a00:	asr	r4, r4, #1
   20a04:	lsl	r5, r4, #3
   20a08:	add	fp, r6, r5
   20a0c:	mov	r0, fp
   20a10:	bl	209b8 <bfd_arch_bits_per_address@plt+0xf2f0>
   20a14:	ldr	r3, [sp, #4]
   20a18:	cmp	r3, r4
   20a1c:	mov	sl, r0
   20a20:	add	r0, r5, #8
   20a24:	add	r0, r6, r0
   20a28:	beq	20a78 <bfd_arch_bits_per_address@plt+0xf3b0>
   20a2c:	bl	209b8 <bfd_arch_bits_per_address@plt+0xf2f0>
   20a30:	cmp	sl, r9
   20a34:	sub	r0, r0, #1
   20a38:	bls	20a58 <bfd_arch_bits_per_address@plt+0xf390>
   20a3c:	cmp	r4, r7
   20a40:	sub	r8, r4, #1
   20a44:	bne	209f8 <bfd_arch_bits_per_address@plt+0xf330>
   20a48:	mov	fp, #0
   20a4c:	mov	r0, fp
   20a50:	add	sp, sp, #12
   20a54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a58:	cmp	r0, r9
   20a5c:	add	r7, r4, #1
   20a60:	bcc	209f8 <bfd_arch_bits_per_address@plt+0xf330>
   20a64:	b	20a4c <bfd_arch_bits_per_address@plt+0xf384>
   20a68:	mov	fp, r1
   20a6c:	mov	r0, fp
   20a70:	add	sp, sp, #12
   20a74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20a78:	cmp	sl, r9
   20a7c:	bhi	20a3c <bfd_arch_bits_per_address@plt+0xf374>
   20a80:	b	20a4c <bfd_arch_bits_per_address@plt+0xf384>
   20a84:	cmp	r0, #1
   20a88:	beq	20abc <bfd_arch_bits_per_address@plt+0xf3f4>
   20a8c:	cmp	r0, #2
   20a90:	beq	20ab0 <bfd_arch_bits_per_address@plt+0xf3e8>
   20a94:	cmp	r0, #0
   20a98:	beq	20aa4 <bfd_arch_bits_per_address@plt+0xf3dc>
   20a9c:	mov	r0, #0
   20aa0:	bx	lr
   20aa4:	ldr	r0, [pc, #28]	; 20ac8 <bfd_arch_bits_per_address@plt+0xf400>
   20aa8:	add	r0, pc, r0
   20aac:	bx	lr
   20ab0:	ldr	r0, [pc, #20]	; 20acc <bfd_arch_bits_per_address@plt+0xf404>
   20ab4:	add	r0, pc, r0
   20ab8:	bx	lr
   20abc:	ldr	r0, [pc, #12]	; 20ad0 <bfd_arch_bits_per_address@plt+0xf408>
   20ac0:	add	r0, pc, r0
   20ac4:	bx	lr
   20ac8:	andeq	r0, r0, r0, lsl #23
   20acc:	andeq	r0, r0, r4, lsl #23
   20ad0:	andeq	r0, r0, r0, ror fp
   20ad4:	ldr	r3, [pc, #276]	; 20bf0 <bfd_arch_bits_per_address@plt+0xf528>
   20ad8:	ldr	r2, [pc, #276]	; 20bf4 <bfd_arch_bits_per_address@plt+0xf52c>
   20adc:	add	r3, pc, r3
   20ae0:	push	{r4, r5, lr}
   20ae4:	mov	r4, r0
   20ae8:	ldr	r2, [r3, r2]
   20aec:	sub	sp, sp, #12
   20af0:	sub	r5, r1, #2
   20af4:	cmp	r2, #0
   20af8:	beq	20bd0 <bfd_arch_bits_per_address@plt+0xf508>
   20afc:	mov	r0, r5
   20b00:	add	r1, sp, #4
   20b04:	bl	114dc <__gnu_Unwind_Find_exidx@plt>
   20b08:	cmp	r0, #0
   20b0c:	beq	20b9c <bfd_arch_bits_per_address@plt+0xf4d4>
   20b10:	mov	r2, r5
   20b14:	ldr	r1, [sp, #4]
   20b18:	bl	209d0 <bfd_arch_bits_per_address@plt+0xf308>
   20b1c:	subs	r5, r0, #0
   20b20:	beq	20b9c <bfd_arch_bits_per_address@plt+0xf4d4>
   20b24:	bl	209b8 <bfd_arch_bits_per_address@plt+0xf2f0>
   20b28:	ldr	r3, [r5, #4]
   20b2c:	cmp	r3, #1
   20b30:	str	r0, [r4, #72]	; 0x48
   20b34:	beq	20b84 <bfd_arch_bits_per_address@plt+0xf4bc>
   20b38:	cmp	r3, #0
   20b3c:	add	r0, r5, #4
   20b40:	strlt	r0, [r4, #76]	; 0x4c
   20b44:	movlt	r3, #1
   20b48:	strlt	r3, [r4, #80]	; 0x50
   20b4c:	blt	20b60 <bfd_arch_bits_per_address@plt+0xf498>
   20b50:	bl	209b8 <bfd_arch_bits_per_address@plt+0xf2f0>
   20b54:	mov	r3, #0
   20b58:	str	r3, [r4, #80]	; 0x50
   20b5c:	str	r0, [r4, #76]	; 0x4c
   20b60:	ldr	r3, [r0]
   20b64:	cmp	r3, #0
   20b68:	blt	20bb4 <bfd_arch_bits_per_address@plt+0xf4ec>
   20b6c:	bl	209b8 <bfd_arch_bits_per_address@plt+0xf2f0>
   20b70:	mov	r3, #0
   20b74:	str	r0, [r4, #16]
   20b78:	mov	r0, r3
   20b7c:	add	sp, sp, #12
   20b80:	pop	{r4, r5, pc}
   20b84:	mov	r3, #5
   20b88:	mov	r2, #0
   20b8c:	mov	r0, r3
   20b90:	str	r2, [r4, #16]
   20b94:	add	sp, sp, #12
   20b98:	pop	{r4, r5, pc}
   20b9c:	mov	r3, #9
   20ba0:	mov	r2, #0
   20ba4:	mov	r0, r3
   20ba8:	str	r2, [r4, #16]
   20bac:	add	sp, sp, #12
   20bb0:	pop	{r4, r5, pc}
   20bb4:	ubfx	r0, r3, #24, #4
   20bb8:	bl	20a84 <bfd_arch_bits_per_address@plt+0xf3bc>
   20bbc:	cmp	r0, #0
   20bc0:	str	r0, [r4, #16]
   20bc4:	moveq	r3, #9
   20bc8:	movne	r3, #0
   20bcc:	b	20b78 <bfd_arch_bits_per_address@plt+0xf4b0>
   20bd0:	ldr	r2, [pc, #32]	; 20bf8 <bfd_arch_bits_per_address@plt+0xf530>
   20bd4:	ldr	r1, [pc, #32]	; 20bfc <bfd_arch_bits_per_address@plt+0xf534>
   20bd8:	ldr	r2, [r3, r2]
   20bdc:	ldr	r0, [r3, r1]
   20be0:	rsb	r3, r0, r2
   20be4:	asr	r3, r3, #3
   20be8:	str	r3, [sp, #4]
   20bec:	b	20b10 <bfd_arch_bits_per_address@plt+0xf448>
   20bf0:	andeq	r6, r1, ip, lsl r5
   20bf4:	andeq	r0, r0, ip, asr #2
   20bf8:	andeq	r0, r0, r0, asr r1
   20bfc:	andeq	r0, r0, r8, asr r1
   20c00:	ldr	r3, [r0]
   20c04:	push	{r4, lr}
   20c08:	tst	r3, #1
   20c0c:	mov	r4, r0
   20c10:	bne	20c28 <bfd_arch_bits_per_address@plt+0xf560>
   20c14:	tst	r3, #2
   20c18:	add	r0, r0, #72	; 0x48
   20c1c:	beq	20c4c <bfd_arch_bits_per_address@plt+0xf584>
   20c20:	bl	219f8 <bfd_arch_bits_per_address@plt+0x10330>
   20c24:	ldr	r3, [r4]
   20c28:	tst	r3, #4
   20c2c:	beq	20c5c <bfd_arch_bits_per_address@plt+0xf594>
   20c30:	tst	r3, #8
   20c34:	beq	20c70 <bfd_arch_bits_per_address@plt+0xf5a8>
   20c38:	tst	r3, #16
   20c3c:	popne	{r4, pc}
   20c40:	add	r0, r4, #464	; 0x1d0
   20c44:	pop	{r4, lr}
   20c48:	b	21aa0 <bfd_arch_bits_per_address@plt+0x103d8>
   20c4c:	bl	219e8 <bfd_arch_bits_per_address@plt+0x10320>
   20c50:	ldr	r3, [r4]
   20c54:	tst	r3, #4
   20c58:	bne	20c30 <bfd_arch_bits_per_address@plt+0xf568>
   20c5c:	add	r0, r4, #208	; 0xd0
   20c60:	bl	21a08 <bfd_arch_bits_per_address@plt+0x10340>
   20c64:	ldr	r3, [r4]
   20c68:	tst	r3, #8
   20c6c:	bne	20c38 <bfd_arch_bits_per_address@plt+0xf570>
   20c70:	add	r0, r4, #336	; 0x150
   20c74:	bl	21a18 <bfd_arch_bits_per_address@plt+0x10350>
   20c78:	ldr	r3, [r4]
   20c7c:	tst	r3, #16
   20c80:	popne	{r4, pc}
   20c84:	b	20c40 <bfd_arch_bits_per_address@plt+0xf578>
   20c88:	ldr	r3, [r0]
   20c8c:	cmp	r3, #0
   20c90:	ldrne	r0, [r3, r0]
   20c94:	moveq	r0, r3
   20c98:	bx	lr
   20c9c:	mov	r0, #9
   20ca0:	bx	lr
   20ca4:	nop	{0}
   20ca8:	bx	lr
   20cac:	push	{r4, r5, r6, lr}
   20cb0:	mov	r4, r0
   20cb4:	mov	r5, r1
   20cb8:	b	20ce0 <bfd_arch_bits_per_address@plt+0xf618>
   20cbc:	ldr	ip, [r5, #64]	; 0x40
   20cc0:	mov	r0, #1
   20cc4:	ldr	r3, [r4, #16]
   20cc8:	mov	r1, r4
   20ccc:	mov	r2, r5
   20cd0:	str	ip, [r4, #20]
   20cd4:	blx	r3
   20cd8:	cmp	r0, #8
   20cdc:	bne	20cf8 <bfd_arch_bits_per_address@plt+0xf630>
   20ce0:	mov	r0, r4
   20ce4:	ldr	r1, [r5, #64]	; 0x40
   20ce8:	bl	20ad4 <bfd_arch_bits_per_address@plt+0xf40c>
   20cec:	subs	r6, r0, #0
   20cf0:	beq	20cbc <bfd_arch_bits_per_address@plt+0xf5f4>
   20cf4:	bl	116bc <abort@plt>
   20cf8:	cmp	r0, #7
   20cfc:	bne	20cf4 <bfd_arch_bits_per_address@plt+0xf62c>
   20d00:	mov	r0, r6
   20d04:	ldr	r1, [r5, #64]	; 0x40
   20d08:	bl	20ca4 <bfd_arch_bits_per_address@plt+0xf5dc>
   20d0c:	add	r0, r5, #4
   20d10:	bl	219d4 <bfd_arch_bits_per_address@plt+0x1030c>
   20d14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20d18:	add	r5, r1, #4
   20d1c:	sub	sp, sp, #980	; 0x3d4
   20d20:	mov	r4, r0
   20d24:	mov	ip, r2
   20d28:	add	r3, sp, #20
   20d2c:	str	r3, [sp, #12]
   20d30:	add	lr, sp, #20
   20d34:	ldm	r5!, {r0, r1, r2, r3}
   20d38:	cmp	ip, #0
   20d3c:	ldr	r9, [r4, #12]
   20d40:	mov	r8, #0
   20d44:	ldr	sl, [r4, #24]
   20d48:	movne	fp, #10
   20d4c:	moveq	fp, #9
   20d50:	add	r6, sp, #16
   20d54:	stmia	lr!, {r0, r1, r2, r3}
   20d58:	add	r7, sp, #496	; 0x1f0
   20d5c:	ldm	r5!, {r0, r1, r2, r3}
   20d60:	stmia	lr!, {r0, r1, r2, r3}
   20d64:	ldm	r5!, {r0, r1, r2, r3}
   20d68:	stmia	lr!, {r0, r1, r2, r3}
   20d6c:	ldm	r5, {r0, r1, r2, r3}
   20d70:	stm	lr, {r0, r1, r2, r3}
   20d74:	mov	r0, r4
   20d78:	ldr	r1, [sp, #80]	; 0x50
   20d7c:	str	r8, [sp, #16]
   20d80:	bl	20ad4 <bfd_arch_bits_per_address@plt+0xf40c>
   20d84:	mov	r5, r0
   20d88:	cmp	r5, #0
   20d8c:	beq	20dc8 <bfd_arch_bits_per_address@plt+0xf700>
   20d90:	ldr	r0, [sp, #72]	; 0x48
   20d94:	mov	r2, r4
   20d98:	str	r6, [sp]
   20d9c:	orr	r1, fp, #16
   20da0:	str	sl, [sp, #4]
   20da4:	mov	r3, r4
   20da8:	str	r0, [sp, #84]	; 0x54
   20dac:	mov	r0, #1
   20db0:	blx	r9
   20db4:	cmp	r0, #0
   20db8:	bne	20e5c <bfd_arch_bits_per_address@plt+0xf794>
   20dbc:	mov	r0, r5
   20dc0:	add	sp, sp, #980	; 0x3d4
   20dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20dc8:	ldr	r3, [sp, #80]	; 0x50
   20dcc:	mov	r1, r6
   20dd0:	mov	r2, #480	; 0x1e0
   20dd4:	mov	r0, r7
   20dd8:	str	r3, [r4, #20]
   20ddc:	bl	113b0 <memcpy@plt>
   20de0:	ldr	r3, [r4, #16]
   20de4:	mov	r1, r4
   20de8:	mov	r2, r7
   20dec:	mov	r0, fp
   20df0:	blx	r3
   20df4:	ldr	r3, [sp, #552]	; 0x228
   20df8:	mov	r1, fp
   20dfc:	str	r6, [sp]
   20e00:	str	sl, [sp, #4]
   20e04:	mov	r2, r4
   20e08:	str	r3, [sp, #84]	; 0x54
   20e0c:	mov	r3, r4
   20e10:	mov	r8, r0
   20e14:	mov	r0, #1
   20e18:	blx	r9
   20e1c:	cmp	r0, #0
   20e20:	bne	20e5c <bfd_arch_bits_per_address@plt+0xf794>
   20e24:	mov	r0, r6
   20e28:	mov	r1, r7
   20e2c:	mov	r2, #480	; 0x1e0
   20e30:	bl	113b0 <memcpy@plt>
   20e34:	cmp	r8, #8
   20e38:	bne	20e54 <bfd_arch_bits_per_address@plt+0xf78c>
   20e3c:	mov	r0, r4
   20e40:	ldr	r1, [sp, #80]	; 0x50
   20e44:	bl	20ad4 <bfd_arch_bits_per_address@plt+0xf40c>
   20e48:	mov	fp, #9
   20e4c:	mov	r5, r0
   20e50:	b	20d88 <bfd_arch_bits_per_address@plt+0xf6c0>
   20e54:	cmp	r8, #7
   20e58:	beq	20e68 <bfd_arch_bits_per_address@plt+0xf7a0>
   20e5c:	mov	r0, #9
   20e60:	add	sp, sp, #980	; 0x3d4
   20e64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   20e68:	mov	r0, r5
   20e6c:	ldr	r1, [sp, #80]	; 0x50
   20e70:	bl	20ca4 <bfd_arch_bits_per_address@plt+0xf5dc>
   20e74:	add	r0, sp, #20
   20e78:	bl	219d4 <bfd_arch_bits_per_address@plt+0x1030c>
   20e7c:	ldr	r0, [r0, #68]	; 0x44
   20e80:	bx	lr
   20e84:	ldr	r3, [r1, #60]	; 0x3c
   20e88:	push	{r4, r5, r6, r7, lr}
   20e8c:	add	lr, r1, #4
   20e90:	str	r3, [r1, #64]	; 0x40
   20e94:	mov	r7, r1
   20e98:	mov	r4, r0
   20e9c:	sub	sp, sp, #484	; 0x1e4
   20ea0:	ldm	lr!, {r0, r1, r2, r3}
   20ea4:	add	ip, sp, #4
   20ea8:	add	r6, sp, #480	; 0x1e0
   20eac:	mvn	r5, #0
   20eb0:	stmia	ip!, {r0, r1, r2, r3}
   20eb4:	ldm	lr!, {r0, r1, r2, r3}
   20eb8:	stmia	ip!, {r0, r1, r2, r3}
   20ebc:	ldm	lr!, {r0, r1, r2, r3}
   20ec0:	stmia	ip!, {r0, r1, r2, r3}
   20ec4:	ldm	lr, {r0, r1, r2, r3}
   20ec8:	stm	ip, {r0, r1, r2, r3}
   20ecc:	str	r5, [r6, #-480]!	; 0xfffffe20
   20ed0:	b	20ef0 <bfd_arch_bits_per_address@plt+0xf828>
   20ed4:	ldr	r3, [r4, #16]
   20ed8:	mov	r1, r4
   20edc:	mov	r2, sp
   20ee0:	blx	r3
   20ee4:	cmp	r0, #8
   20ee8:	mov	r5, r0
   20eec:	bne	20f10 <bfd_arch_bits_per_address@plt+0xf848>
   20ef0:	mov	r0, r4
   20ef4:	ldr	r1, [sp, #64]	; 0x40
   20ef8:	bl	20ad4 <bfd_arch_bits_per_address@plt+0xf40c>
   20efc:	cmp	r0, #0
   20f00:	beq	20ed4 <bfd_arch_bits_per_address@plt+0xf80c>
   20f04:	mov	r0, #9
   20f08:	add	sp, sp, #484	; 0x1e4
   20f0c:	pop	{r4, r5, r6, r7, pc}
   20f10:	mov	r0, sp
   20f14:	bl	20c00 <bfd_arch_bits_per_address@plt+0xf538>
   20f18:	cmp	r5, #6
   20f1c:	bne	20f04 <bfd_arch_bits_per_address@plt+0xf83c>
   20f20:	mov	r0, r4
   20f24:	mov	r1, r7
   20f28:	bl	20cac <bfd_arch_bits_per_address@plt+0xf5e4>
   20f2c:	push	{r4}		; (str r4, [sp, #-4]!)
   20f30:	ldr	r4, [r3, #60]	; 0x3c
   20f34:	str	r1, [r0, #12]
   20f38:	mov	r1, r3
   20f3c:	str	r2, [r0, #24]
   20f40:	mov	r2, #0
   20f44:	str	r4, [r3, #64]	; 0x40
   20f48:	pop	{r4}		; (ldr r4, [sp], #4)
   20f4c:	b	20d14 <bfd_arch_bits_per_address@plt+0xf64c>
   20f50:	push	{r4, r5, r6, lr}
   20f54:	mov	r4, r0
   20f58:	ldr	r6, [r0, #12]
   20f5c:	mov	r5, r1
   20f60:	ldr	r3, [r0, #20]
   20f64:	cmp	r6, #0
   20f68:	str	r3, [r1, #64]	; 0x40
   20f6c:	beq	20f7c <bfd_arch_bits_per_address@plt+0xf8b4>
   20f70:	mov	r2, #1
   20f74:	bl	20d14 <bfd_arch_bits_per_address@plt+0xf64c>
   20f78:	bl	116bc <abort@plt>
   20f7c:	ldr	r3, [r0, #16]
   20f80:	mov	r1, r4
   20f84:	mov	r0, #2
   20f88:	mov	r2, r5
   20f8c:	blx	r3
   20f90:	cmp	r0, #7
   20f94:	beq	20fb0 <bfd_arch_bits_per_address@plt+0xf8e8>
   20f98:	cmp	r0, #8
   20f9c:	bne	20fac <bfd_arch_bits_per_address@plt+0xf8e4>
   20fa0:	mov	r0, r4
   20fa4:	mov	r1, r5
   20fa8:	bl	20cac <bfd_arch_bits_per_address@plt+0xf5e4>
   20fac:	bl	116bc <abort@plt>
   20fb0:	mov	r0, r6
   20fb4:	ldr	r1, [r5, #64]	; 0x40
   20fb8:	bl	20ca4 <bfd_arch_bits_per_address@plt+0xf5dc>
   20fbc:	add	r0, r5, #4
   20fc0:	bl	219d4 <bfd_arch_bits_per_address@plt+0x1030c>
   20fc4:	ldr	r2, [r0, #12]
   20fc8:	cmp	r2, #0
   20fcc:	beq	20fe0 <bfd_arch_bits_per_address@plt+0xf918>
   20fd0:	ldr	ip, [r1, #60]	; 0x3c
   20fd4:	mov	r2, #0
   20fd8:	str	ip, [r1, #64]	; 0x40
   20fdc:	b	20d14 <bfd_arch_bits_per_address@plt+0xf64c>
   20fe0:	b	20e84 <bfd_arch_bits_per_address@plt+0xf7bc>
   20fe4:	bx	lr
   20fe8:	push	{r3, lr}
   20fec:	ldr	r3, [r0, #8]
   20ff0:	cmp	r3, #0
   20ff4:	popeq	{r3, pc}
   20ff8:	mov	r1, r0
   20ffc:	mov	r0, #1
   21000:	blx	r3
   21004:	pop	{r3, pc}
   21008:	cmp	r1, #4
   2100c:	addls	pc, pc, r1, lsl #2
   21010:	b	21044 <bfd_arch_bits_per_address@plt+0xf97c>
   21014:	b	21030 <bfd_arch_bits_per_address@plt+0xf968>
   21018:	b	21028 <bfd_arch_bits_per_address@plt+0xf960>
   2101c:	b	21044 <bfd_arch_bits_per_address@plt+0xf97c>
   21020:	b	21028 <bfd_arch_bits_per_address@plt+0xf960>
   21024:	b	21028 <bfd_arch_bits_per_address@plt+0xf960>
   21028:	mov	r0, #1
   2102c:	bx	lr
   21030:	cmp	r2, #15
   21034:	cmpls	r3, #0
   21038:	moveq	r3, #0
   2103c:	movne	r3, #1
   21040:	beq	2104c <bfd_arch_bits_per_address@plt+0xf984>
   21044:	mov	r0, #2
   21048:	bx	lr
   2104c:	add	r2, r0, r2, lsl #2
   21050:	mov	r0, r3
   21054:	ldr	r3, [r2, #4]
   21058:	ldr	r2, [sp]
   2105c:	str	r3, [r2]
   21060:	bx	lr
   21064:	push	{lr}		; (str lr, [sp, #-4]!)
   21068:	sub	sp, sp, #20
   2106c:	mov	r2, r1
   21070:	mov	r1, #0
   21074:	add	ip, sp, #12
   21078:	mov	r3, r1
   2107c:	str	ip, [sp]
   21080:	bl	21008 <bfd_arch_bits_per_address@plt+0xf940>
   21084:	ldr	r0, [sp, #12]
   21088:	add	sp, sp, #20
   2108c:	pop	{pc}		; (ldr pc, [sp], #4)
   21090:	cmp	r1, #4
   21094:	addls	pc, pc, r1, lsl #2
   21098:	b	210cc <bfd_arch_bits_per_address@plt+0xfa04>
   2109c:	b	210b8 <bfd_arch_bits_per_address@plt+0xf9f0>
   210a0:	b	210b0 <bfd_arch_bits_per_address@plt+0xf9e8>
   210a4:	b	210cc <bfd_arch_bits_per_address@plt+0xfa04>
   210a8:	b	210b0 <bfd_arch_bits_per_address@plt+0xf9e8>
   210ac:	b	210b0 <bfd_arch_bits_per_address@plt+0xf9e8>
   210b0:	mov	r0, #1
   210b4:	bx	lr
   210b8:	cmp	r2, #15
   210bc:	cmpls	r3, #0
   210c0:	moveq	r3, #0
   210c4:	movne	r3, #1
   210c8:	beq	210d4 <bfd_arch_bits_per_address@plt+0xfa0c>
   210cc:	mov	r0, #2
   210d0:	bx	lr
   210d4:	ldr	ip, [sp]
   210d8:	add	r2, r0, r2, lsl #2
   210dc:	mov	r0, r3
   210e0:	ldr	r1, [ip]
   210e4:	str	r1, [r2, #4]
   210e8:	bx	lr
   210ec:	push	{lr}		; (str lr, [sp, #-4]!)
   210f0:	sub	sp, sp, #20
   210f4:	add	ip, sp, #16
   210f8:	mov	lr, r1
   210fc:	mov	r1, #0
   21100:	str	r2, [ip, #-4]!
   21104:	mov	r3, r1
   21108:	str	ip, [sp]
   2110c:	mov	r2, lr
   21110:	bl	21090 <bfd_arch_bits_per_address@plt+0xf9c8>
   21114:	add	sp, sp, #20
   21118:	pop	{pc}		; (ldr pc, [sp], #4)
   2111c:	ldr	r3, [r2, #60]	; 0x3c
   21120:	push	{r4, r5, r6, r7, r8, lr}
   21124:	add	lr, r2, #4
   21128:	str	r3, [r2, #64]	; 0x40
   2112c:	mov	r8, r0
   21130:	mov	r7, r1
   21134:	sub	sp, sp, #568	; 0x238
   21138:	ldm	lr!, {r0, r1, r2, r3}
   2113c:	add	ip, sp, #92	; 0x5c
   21140:	mvn	r6, #0
   21144:	add	r4, sp, #88	; 0x58
   21148:	stmia	ip!, {r0, r1, r2, r3}
   2114c:	ldm	lr!, {r0, r1, r2, r3}
   21150:	stmia	ip!, {r0, r1, r2, r3}
   21154:	ldm	lr!, {r0, r1, r2, r3}
   21158:	stmia	ip!, {r0, r1, r2, r3}
   2115c:	ldm	lr, {r0, r1, r2, r3}
   21160:	stm	ip, {r0, r1, r2, r3}
   21164:	str	r6, [sp, #88]	; 0x58
   21168:	b	211a8 <bfd_arch_bits_per_address@plt+0xfae0>
   2116c:	bl	210ec <bfd_arch_bits_per_address@plt+0xfa24>
   21170:	mov	r1, r7
   21174:	mov	r0, r4
   21178:	blx	r8
   2117c:	mov	r1, sp
   21180:	mov	r2, r4
   21184:	cmp	r0, #0
   21188:	mov	r0, #8
   2118c:	bne	211c8 <bfd_arch_bits_per_address@plt+0xfb00>
   21190:	ldr	r3, [sp, #16]
   21194:	blx	r3
   21198:	cmp	r0, #9
   2119c:	cmpne	r0, #5
   211a0:	mov	r6, r0
   211a4:	beq	211cc <bfd_arch_bits_per_address@plt+0xfb04>
   211a8:	ldr	r1, [sp, #152]	; 0x98
   211ac:	mov	r0, sp
   211b0:	bl	20ad4 <bfd_arch_bits_per_address@plt+0xf40c>
   211b4:	mov	r2, sp
   211b8:	mov	r1, #12
   211bc:	cmp	r0, #0
   211c0:	mov	r0, r4
   211c4:	beq	2116c <bfd_arch_bits_per_address@plt+0xfaa4>
   211c8:	mov	r6, #9
   211cc:	mov	r0, r4
   211d0:	bl	20c00 <bfd_arch_bits_per_address@plt+0xf538>
   211d4:	mov	r0, r6
   211d8:	add	sp, sp, #568	; 0x238
   211dc:	pop	{r4, r5, r6, r7, r8, pc}
   211e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   211e4:	mov	r4, r1
   211e8:	ldr	r1, [r1, #76]	; 0x4c
   211ec:	mov	r8, r2
   211f0:	sub	sp, sp, #44	; 0x2c
   211f4:	subs	r6, r3, #0
   211f8:	ldr	ip, [pc, #1064]	; 21628 <bfd_arch_bits_per_address@plt+0xff60>
   211fc:	add	r3, r1, #4
   21200:	ldr	r2, [r1]
   21204:	and	r7, r0, #3
   21208:	add	ip, pc, ip
   2120c:	str	r3, [sp, #32]
   21210:	str	ip, [sp, #4]
   21214:	str	r2, [sp, #28]
   21218:	bne	213c4 <bfd_arch_bits_per_address@plt+0xfcfc>
   2121c:	lsl	r2, r2, #8
   21220:	strb	r6, [sp, #37]	; 0x25
   21224:	str	r2, [sp, #28]
   21228:	mov	r2, #3
   2122c:	strb	r2, [sp, #36]	; 0x24
   21230:	cmp	r7, #2
   21234:	ldr	r2, [r4, #80]	; 0x50
   21238:	ldreq	r3, [r4, #56]	; 0x38
   2123c:	ands	r2, r2, #1
   21240:	bne	21398 <bfd_arch_bits_per_address@plt+0xfcd0>
   21244:	eor	r0, r0, #8
   21248:	str	r2, [sp, #8]
   2124c:	ubfx	r0, r0, #3, #1
   21250:	str	r0, [sp, #12]
   21254:	ldr	r9, [r3]
   21258:	cmp	r9, #0
   2125c:	beq	213a0 <bfd_arch_bits_per_address@plt+0xfcd8>
   21260:	cmp	r6, #2
   21264:	mov	r0, r8
   21268:	addeq	r5, r3, #8
   2126c:	addne	r5, r3, #4
   21270:	ldreq	sl, [r3, #4]
   21274:	mov	r1, #15
   21278:	ldrhne	sl, [r3, #2]
   2127c:	ldrhne	r9, [r3]
   21280:	ldr	r3, [r4, #72]	; 0x48
   21284:	bic	fp, sl, #1
   21288:	add	fp, fp, r3
   2128c:	bl	21064 <bfd_arch_bits_per_address@plt+0xf99c>
   21290:	cmp	fp, r0
   21294:	movhi	r0, #0
   21298:	bhi	212b0 <bfd_arch_bits_per_address@plt+0xfbe8>
   2129c:	bic	r3, r9, #1
   212a0:	add	fp, fp, r3
   212a4:	cmp	r0, fp
   212a8:	movcs	r0, #0
   212ac:	movcc	r0, #1
   212b0:	and	sl, sl, #1
   212b4:	and	r9, r9, #1
   212b8:	orr	r9, r9, sl, lsl #1
   212bc:	cmp	r9, #1
   212c0:	beq	2143c <bfd_arch_bits_per_address@plt+0xfd74>
   212c4:	bcc	21420 <bfd_arch_bits_per_address@plt+0xfd58>
   212c8:	cmp	r9, #2
   212cc:	bne	213b4 <bfd_arch_bits_per_address@plt+0xfcec>
   212d0:	ldr	r3, [r5]
   212d4:	cmp	r7, #0
   212d8:	bic	fp, r3, #-2147483648	; 0x80000000
   212dc:	bne	213f0 <bfd_arch_bits_per_address@plt+0xfd28>
   212e0:	cmp	r0, #0
   212e4:	beq	2140c <bfd_arch_bits_per_address@plt+0xfd44>
   212e8:	ldr	r2, [sp, #12]
   212ec:	cmp	fp, #0
   212f0:	orreq	r2, r2, #1
   212f4:	cmp	r2, #0
   212f8:	beq	2140c <bfd_arch_bits_per_address@plt+0xfd44>
   212fc:	cmp	fp, #0
   21300:	beq	21374 <bfd_arch_bits_per_address@plt+0xfcac>
   21304:	add	r2, r4, #88	; 0x58
   21308:	add	ip, sp, #24
   2130c:	mov	sl, r7
   21310:	str	r7, [sp, #20]
   21314:	str	r6, [sp, #16]
   21318:	add	r9, r5, #4
   2131c:	mov	r7, r2
   21320:	mov	r6, ip
   21324:	b	21334 <bfd_arch_bits_per_address@plt+0xfc6c>
   21328:	cmp	r3, fp
   2132c:	mov	sl, r3
   21330:	beq	21374 <bfd_arch_bits_per_address@plt+0xfcac>
   21334:	mov	r0, r9
   21338:	str	r7, [sp, #24]
   2133c:	bl	20c88 <bfd_arch_bits_per_address@plt+0xf5c0>
   21340:	mov	r3, r6
   21344:	mov	r2, #0
   21348:	add	r9, r9, #4
   2134c:	mov	r1, r0
   21350:	mov	r0, r4
   21354:	bl	11548 <__cxa_type_match@plt>
   21358:	add	r3, sl, #1
   2135c:	cmp	r0, #0
   21360:	beq	21328 <bfd_arch_bits_per_address@plt+0xfc60>
   21364:	cmp	fp, sl
   21368:	ldr	r7, [sp, #20]
   2136c:	ldr	r6, [sp, #16]
   21370:	bne	21408 <bfd_arch_bits_per_address@plt+0xfd40>
   21374:	mov	r0, r8
   21378:	mov	r1, #13
   2137c:	bl	21064 <bfd_arch_bits_per_address@plt+0xf99c>
   21380:	ldr	r2, [sp, #24]
   21384:	str	r5, [r4, #40]	; 0x28
   21388:	mov	r3, #6
   2138c:	str	r2, [r4, #36]	; 0x24
   21390:	str	r0, [r4, #32]
   21394:	b	213b8 <bfd_arch_bits_per_address@plt+0xfcf0>
   21398:	mov	ip, #0
   2139c:	str	ip, [sp, #8]
   213a0:	cmp	r6, #2
   213a4:	ble	21498 <bfd_arch_bits_per_address@plt+0xfdd0>
   213a8:	bl	20c9c <bfd_arch_bits_per_address@plt+0xf5d4>
   213ac:	cmp	r0, #0
   213b0:	beq	214ac <bfd_arch_bits_per_address@plt+0xfde4>
   213b4:	mov	r3, #9
   213b8:	mov	r0, r3
   213bc:	add	sp, sp, #44	; 0x2c
   213c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   213c4:	cmp	r6, #2
   213c8:	bgt	21230 <bfd_arch_bits_per_address@plt+0xfb68>
   213cc:	lsr	r1, r2, #16
   213d0:	strb	r1, [sp, #37]	; 0x25
   213d4:	lsl	r2, r2, #16
   213d8:	mov	ip, #2
   213dc:	uxtb	r1, r1
   213e0:	str	r2, [sp, #28]
   213e4:	strb	ip, [sp, #36]	; 0x24
   213e8:	add	r3, r3, r1, lsl #2
   213ec:	b	21230 <bfd_arch_bits_per_address@plt+0xfb68>
   213f0:	mov	r0, r8
   213f4:	mov	r1, #13
   213f8:	ldr	r9, [r4, #32]
   213fc:	bl	21064 <bfd_arch_bits_per_address@plt+0xf99c>
   21400:	cmp	r9, r0
   21404:	beq	2154c <bfd_arch_bits_per_address@plt+0xfe84>
   21408:	ldr	r3, [r5]
   2140c:	cmp	r3, #0
   21410:	addlt	r5, r5, #4
   21414:	add	fp, fp, #1
   21418:	add	r3, r5, fp, lsl #2
   2141c:	b	21254 <bfd_arch_bits_per_address@plt+0xfb8c>
   21420:	cmp	r7, #0
   21424:	moveq	r0, #0
   21428:	andne	r0, r0, #1
   2142c:	cmp	r0, #0
   21430:	bne	215b0 <bfd_arch_bits_per_address@plt+0xfee8>
   21434:	add	r3, r5, #4
   21438:	b	21254 <bfd_arch_bits_per_address@plt+0xfb8c>
   2143c:	cmp	r7, #0
   21440:	bne	214f8 <bfd_arch_bits_per_address@plt+0xfe30>
   21444:	cmp	r0, #0
   21448:	beq	21490 <bfd_arch_bits_per_address@plt+0xfdc8>
   2144c:	ldm	r5, {r2, r3}
   21450:	cmn	r3, #2
   21454:	lsr	r9, r2, #31
   21458:	beq	213b4 <bfd_arch_bits_per_address@plt+0xfcec>
   2145c:	cmn	r3, #1
   21460:	add	r3, r4, #88	; 0x58
   21464:	str	r3, [sp, #24]
   21468:	beq	2158c <bfd_arch_bits_per_address@plt+0xfec4>
   2146c:	add	r0, r5, #4
   21470:	bl	20c88 <bfd_arch_bits_per_address@plt+0xf5c0>
   21474:	mov	r2, r9
   21478:	add	r3, sp, #24
   2147c:	mov	r1, r0
   21480:	mov	r0, r4
   21484:	bl	11548 <__cxa_type_match@plt>
   21488:	cmp	r0, #0
   2148c:	bne	215f8 <bfd_arch_bits_per_address@plt+0xff30>
   21490:	add	r3, r5, #8
   21494:	b	21254 <bfd_arch_bits_per_address@plt+0xfb8c>
   21498:	mov	r0, r8
   2149c:	add	r1, sp, #28
   214a0:	bl	21c10 <bfd_arch_bits_per_address@plt+0x10548>
   214a4:	cmp	r0, #0
   214a8:	bne	213b4 <bfd_arch_bits_per_address@plt+0xfcec>
   214ac:	ldr	ip, [sp, #8]
   214b0:	cmp	ip, #0
   214b4:	moveq	r3, #8
   214b8:	beq	213b8 <bfd_arch_bits_per_address@plt+0xfcf0>
   214bc:	mov	r1, #15
   214c0:	mov	r0, r8
   214c4:	bl	21064 <bfd_arch_bits_per_address@plt+0xf99c>
   214c8:	mov	r1, #14
   214cc:	mov	r2, r0
   214d0:	mov	r0, r8
   214d4:	bl	210ec <bfd_arch_bits_per_address@plt+0xfa24>
   214d8:	ldr	r3, [pc, #332]	; 2162c <bfd_arch_bits_per_address@plt+0xff64>
   214dc:	ldr	ip, [sp, #4]
   214e0:	mov	r0, r8
   214e4:	mov	r1, #15
   214e8:	ldr	r2, [ip, r3]
   214ec:	bl	210ec <bfd_arch_bits_per_address@plt+0xfa24>
   214f0:	mov	r3, #7
   214f4:	b	213b8 <bfd_arch_bits_per_address@plt+0xfcf0>
   214f8:	mov	r0, r8
   214fc:	mov	r1, #13
   21500:	ldr	r9, [r4, #32]
   21504:	bl	21064 <bfd_arch_bits_per_address@plt+0xf99c>
   21508:	cmp	r9, r0
   2150c:	bne	21490 <bfd_arch_bits_per_address@plt+0xfdc8>
   21510:	ldr	r3, [r4, #40]	; 0x28
   21514:	cmp	r5, r3
   21518:	bne	21490 <bfd_arch_bits_per_address@plt+0xfdc8>
   2151c:	mov	r0, r5
   21520:	bl	209b8 <bfd_arch_bits_per_address@plt+0xf2f0>
   21524:	mov	r1, #15
   21528:	mov	r2, r0
   2152c:	mov	r0, r8
   21530:	bl	210ec <bfd_arch_bits_per_address@plt+0xfa24>
   21534:	mov	r0, r8
   21538:	mov	r2, r4
   2153c:	mov	r1, #0
   21540:	bl	210ec <bfd_arch_bits_per_address@plt+0xfa24>
   21544:	mov	r3, #7
   21548:	b	213b8 <bfd_arch_bits_per_address@plt+0xfcf0>
   2154c:	ldr	r3, [r4, #40]	; 0x28
   21550:	cmp	r5, r3
   21554:	bne	21408 <bfd_arch_bits_per_address@plt+0xfd40>
   21558:	mov	r2, #4
   2155c:	mov	r3, #0
   21560:	str	fp, [r4, #40]	; 0x28
   21564:	str	r3, [r4, #44]	; 0x2c
   21568:	add	r3, r5, r2
   2156c:	str	r2, [r4, #48]	; 0x30
   21570:	str	r3, [r4, #52]	; 0x34
   21574:	ldr	r3, [r5]
   21578:	cmp	r3, #0
   2157c:	blt	215ec <bfd_arch_bits_per_address@plt+0xff24>
   21580:	mov	ip, #1
   21584:	str	ip, [sp, #8]
   21588:	b	21414 <bfd_arch_bits_per_address@plt+0xfd4c>
   2158c:	mov	r0, r8
   21590:	mov	r1, #13
   21594:	bl	21064 <bfd_arch_bits_per_address@plt+0xf99c>
   21598:	str	r0, [r4, #32]
   2159c:	ldr	r3, [sp, #24]
   215a0:	str	r3, [r4, #36]	; 0x24
   215a4:	str	r5, [r4, #40]	; 0x28
   215a8:	mov	r3, #6
   215ac:	b	213b8 <bfd_arch_bits_per_address@plt+0xfcf0>
   215b0:	mov	r0, r5
   215b4:	add	r5, r5, #4
   215b8:	bl	209b8 <bfd_arch_bits_per_address@plt+0xf2f0>
   215bc:	str	r5, [r4, #56]	; 0x38
   215c0:	mov	r6, r0
   215c4:	mov	r0, r4
   215c8:	bl	11500 <__cxa_begin_cleanup@plt>
   215cc:	cmp	r0, #0
   215d0:	beq	213b4 <bfd_arch_bits_per_address@plt+0xfcec>
   215d4:	mov	r0, r8
   215d8:	mov	r2, r6
   215dc:	mov	r1, #15
   215e0:	bl	210ec <bfd_arch_bits_per_address@plt+0xfa24>
   215e4:	mov	r3, #7
   215e8:	b	213b8 <bfd_arch_bits_per_address@plt+0xfcf0>
   215ec:	add	r0, fp, #1
   215f0:	add	r0, r5, r0, lsl #2
   215f4:	b	21520 <bfd_arch_bits_per_address@plt+0xfe58>
   215f8:	mov	r9, r0
   215fc:	mov	r1, #13
   21600:	mov	r0, r8
   21604:	bl	21064 <bfd_arch_bits_per_address@plt+0xf99c>
   21608:	cmp	r9, #2
   2160c:	str	r0, [r4, #32]
   21610:	bne	2159c <bfd_arch_bits_per_address@plt+0xfed4>
   21614:	ldr	r2, [sp, #24]
   21618:	mov	r3, r4
   2161c:	str	r2, [r3, #44]!	; 0x2c
   21620:	str	r3, [r4, #36]	; 0x24
   21624:	b	215a4 <bfd_arch_bits_per_address@plt+0xfedc>
   21628:	strdeq	r5, [r1], -r0
   2162c:	andeq	r0, r0, ip, asr r1
   21630:	mov	r3, #0
   21634:	b	211e0 <bfd_arch_bits_per_address@plt+0xfb18>
   21638:	mov	r3, #1
   2163c:	b	211e0 <bfd_arch_bits_per_address@plt+0xfb18>
   21640:	mov	r3, #2
   21644:	b	211e0 <bfd_arch_bits_per_address@plt+0xfb18>
   21648:	push	{r4, r5, r6, r7, r8, lr}
   2164c:	mov	r4, r0
   21650:	sub	sp, sp, #272	; 0x110
   21654:	cmp	r1, #4
   21658:	addls	pc, pc, r1, lsl #2
   2165c:	b	2167c <bfd_arch_bits_per_address@plt+0xffb4>
   21660:	b	21870 <bfd_arch_bits_per_address@plt+0x101a8>
   21664:	b	216f0 <bfd_arch_bits_per_address@plt+0x10028>
   21668:	b	2167c <bfd_arch_bits_per_address@plt+0xffb4>
   2166c:	b	21674 <bfd_arch_bits_per_address@plt+0xffac>
   21670:	b	21688 <bfd_arch_bits_per_address@plt+0xffc0>
   21674:	cmp	r3, #3
   21678:	beq	218b4 <bfd_arch_bits_per_address@plt+0x101ec>
   2167c:	mov	r0, #2
   21680:	add	sp, sp, #272	; 0x110
   21684:	pop	{r4, r5, r6, r7, r8, pc}
   21688:	cmp	r2, #16
   2168c:	cmpls	r3, #0
   21690:	bne	2167c <bfd_arch_bits_per_address@plt+0xffb4>
   21694:	ldr	r3, [r0]
   21698:	tst	r3, #16
   2169c:	bne	21930 <bfd_arch_bits_per_address@plt+0x10268>
   216a0:	add	r5, sp, #136	; 0x88
   216a4:	str	r2, [sp, #4]
   216a8:	mov	r0, r5
   216ac:	bl	21ab4 <bfd_arch_bits_per_address@plt+0x103ec>
   216b0:	ldr	r1, [r4, #56]	; 0x38
   216b4:	ldr	r2, [sp, #4]
   216b8:	mov	r3, #0
   216bc:	mov	r0, #1
   216c0:	ands	ip, r2, r0, lsl r3
   216c4:	ldrne	ip, [r1]
   216c8:	addne	r1, r1, #4
   216cc:	strne	ip, [r5, r3, lsl #2]
   216d0:	add	r3, r3, #1
   216d4:	cmp	r3, #4
   216d8:	bne	216c0 <bfd_arch_bits_per_address@plt+0xfff8>
   216dc:	mov	r0, r5
   216e0:	str	r1, [r4, #56]	; 0x38
   216e4:	bl	21aa0 <bfd_arch_bits_per_address@plt+0x103d8>
   216e8:	mov	r0, #0
   216ec:	b	21680 <bfd_arch_bits_per_address@plt+0xffb8>
   216f0:	bic	r1, r3, #4
   216f4:	cmp	r1, #1
   216f8:	bne	2167c <bfd_arch_bits_per_address@plt+0xffb4>
   216fc:	cmp	r3, #1
   21700:	lsr	r5, r2, #16
   21704:	uxth	r6, r2
   21708:	add	r2, r6, r5
   2170c:	movne	r1, #32
   21710:	moveq	r1, #16
   21714:	cmp	r1, r2
   21718:	bcc	2167c <bfd_arch_bits_per_address@plt+0xffb4>
   2171c:	subs	r0, r3, #1
   21720:	rsbs	r7, r0, #0
   21724:	adcs	r7, r7, r0
   21728:	cmp	r5, #15
   2172c:	movls	r1, #0
   21730:	movhi	r1, #1
   21734:	tst	r7, r1
   21738:	bne	2167c <bfd_arch_bits_per_address@plt+0xffb4>
   2173c:	cmp	r1, #0
   21740:	movne	r8, r6
   21744:	bne	21754 <bfd_arch_bits_per_address@plt+0x1008c>
   21748:	cmp	r2, #16
   2174c:	bls	21958 <bfd_arch_bits_per_address@plt+0x10290>
   21750:	sub	r8, r2, #16
   21754:	cmp	r8, #0
   21758:	cmpne	r3, #5
   2175c:	bne	2167c <bfd_arch_bits_per_address@plt+0xffb4>
   21760:	cmp	r5, #15
   21764:	bhi	21794 <bfd_arch_bits_per_address@plt+0x100cc>
   21768:	ldr	r2, [r4]
   2176c:	tst	r2, #1
   21770:	beq	21794 <bfd_arch_bits_per_address@plt+0x100cc>
   21774:	cmp	r3, #5
   21778:	mov	r0, r4
   2177c:	bic	r3, r2, #1
   21780:	str	r3, [r4]
   21784:	beq	219c4 <bfd_arch_bits_per_address@plt+0x102fc>
   21788:	bic	r2, r2, #3
   2178c:	str	r2, [r0], #72	; 0x48
   21790:	bl	219f0 <bfd_arch_bits_per_address@plt+0x10328>
   21794:	cmp	r8, #0
   21798:	beq	217a8 <bfd_arch_bits_per_address@plt+0x100e0>
   2179c:	ldr	r3, [r4]
   217a0:	tst	r3, #4
   217a4:	bne	2199c <bfd_arch_bits_per_address@plt+0x102d4>
   217a8:	cmp	r7, #0
   217ac:	bne	219b0 <bfd_arch_bits_per_address@plt+0x102e8>
   217b0:	cmp	r5, #15
   217b4:	bls	21980 <bfd_arch_bits_per_address@plt+0x102b8>
   217b8:	cmp	r8, #0
   217bc:	bne	2198c <bfd_arch_bits_per_address@plt+0x102c4>
   217c0:	ldr	ip, [r4, #56]	; 0x38
   217c4:	cmp	r6, #0
   217c8:	mov	r2, ip
   217cc:	ble	21800 <bfd_arch_bits_per_address@plt+0x10138>
   217d0:	add	r0, sp, #136	; 0x88
   217d4:	lsl	r6, r6, #1
   217d8:	add	r0, r0, r5, lsl #3
   217dc:	sub	r1, r6, #1
   217e0:	rsb	r0, ip, r0
   217e4:	sub	r3, ip, #4
   217e8:	sub	r1, r1, #1
   217ec:	ldr	r2, [r3, #4]!
   217f0:	cmn	r1, #1
   217f4:	str	r2, [r0, r3]
   217f8:	bne	217e8 <bfd_arch_bits_per_address@plt+0x10120>
   217fc:	add	r2, ip, r6, lsl #2
   21800:	cmp	r8, #0
   21804:	beq	21844 <bfd_arch_bits_per_address@plt+0x1017c>
   21808:	cmp	r5, #16
   2180c:	movcs	r0, r5
   21810:	movcc	r0, #16
   21814:	add	r6, sp, #272	; 0x110
   21818:	lsl	r1, r8, #1
   2181c:	mov	ip, r2
   21820:	add	r0, r6, r0, lsl #3
   21824:	sub	r3, r1, #1
   21828:	sub	r0, r0, #392	; 0x188
   2182c:	sub	r3, r3, #1
   21830:	ldr	r6, [ip], #4
   21834:	cmn	r3, #1
   21838:	str	r6, [r0], #4
   2183c:	bne	2182c <bfd_arch_bits_per_address@plt+0x10164>
   21840:	add	r2, r2, r1, lsl #2
   21844:	cmp	r7, #0
   21848:	bne	21960 <bfd_arch_bits_per_address@plt+0x10298>
   2184c:	cmp	r5, #15
   21850:	str	r2, [r4, #56]	; 0x38
   21854:	bls	21974 <bfd_arch_bits_per_address@plt+0x102ac>
   21858:	cmp	r8, #0
   2185c:	beq	21868 <bfd_arch_bits_per_address@plt+0x101a0>
   21860:	add	r0, sp, #8
   21864:	bl	21a08 <bfd_arch_bits_per_address@plt+0x10340>
   21868:	mov	r0, #0
   2186c:	b	21680 <bfd_arch_bits_per_address@plt+0xffb8>
   21870:	cmp	r3, #0
   21874:	bne	2167c <bfd_arch_bits_per_address@plt+0xffb4>
   21878:	ldr	r1, [r0, #56]	; 0x38
   2187c:	uxth	r5, r2
   21880:	mov	ip, #1
   21884:	ands	r0, r5, ip, lsl r3
   21888:	add	r0, r4, r3, lsl #2
   2188c:	add	r3, r3, #1
   21890:	ldrne	r6, [r1]
   21894:	addne	r1, r1, #4
   21898:	strne	r6, [r0, #4]
   2189c:	cmp	r3, #16
   218a0:	bne	21884 <bfd_arch_bits_per_address@plt+0x101bc>
   218a4:	ands	r0, r2, #8192	; 0x2000
   218a8:	streq	r1, [r4, #56]	; 0x38
   218ac:	beq	21680 <bfd_arch_bits_per_address@plt+0xffb8>
   218b0:	b	21868 <bfd_arch_bits_per_address@plt+0x101a0>
   218b4:	lsr	r6, r2, #16
   218b8:	uxth	r7, r2
   218bc:	add	r3, r7, r6
   218c0:	cmp	r3, #16
   218c4:	bhi	2167c <bfd_arch_bits_per_address@plt+0xffb4>
   218c8:	ldr	r3, [r0]
   218cc:	tst	r3, #8
   218d0:	bne	21948 <bfd_arch_bits_per_address@plt+0x10280>
   218d4:	add	r5, sp, #136	; 0x88
   218d8:	lsl	r7, r7, #1
   218dc:	mov	r0, r5
   218e0:	bl	21a5c <bfd_arch_bits_per_address@plt+0x10394>
   218e4:	ldr	ip, [r4, #56]	; 0x38
   218e8:	cmp	r7, #0
   218ec:	add	r0, r5, r6, lsl #3
   218f0:	sub	r3, r7, #1
   218f4:	mov	r2, ip
   218f8:	beq	2191c <bfd_arch_bits_per_address@plt+0x10254>
   218fc:	rsb	r0, ip, r0
   21900:	sub	r2, ip, #4
   21904:	sub	r3, r3, #1
   21908:	ldr	r1, [r2, #4]!
   2190c:	cmn	r3, #1
   21910:	str	r1, [r0, r2]
   21914:	bne	21904 <bfd_arch_bits_per_address@plt+0x1023c>
   21918:	add	r2, ip, r7, lsl #2
   2191c:	mov	r0, r5
   21920:	str	r2, [r4, #56]	; 0x38
   21924:	bl	21a18 <bfd_arch_bits_per_address@plt+0x10350>
   21928:	mov	r0, #0
   2192c:	b	21680 <bfd_arch_bits_per_address@plt+0xffb8>
   21930:	bic	r3, r3, #16
   21934:	str	r3, [r0], #464	; 0x1d0
   21938:	str	r2, [sp, #4]
   2193c:	bl	21ab4 <bfd_arch_bits_per_address@plt+0x103ec>
   21940:	ldr	r2, [sp, #4]
   21944:	b	216a0 <bfd_arch_bits_per_address@plt+0xffd8>
   21948:	bic	r3, r3, #8
   2194c:	str	r3, [r0], #336	; 0x150
   21950:	bl	21a5c <bfd_arch_bits_per_address@plt+0x10394>
   21954:	b	218d4 <bfd_arch_bits_per_address@plt+0x1020c>
   21958:	mov	r8, r1
   2195c:	b	21760 <bfd_arch_bits_per_address@plt+0x10098>
   21960:	add	r2, r2, #4
   21964:	add	r0, sp, #136	; 0x88
   21968:	str	r2, [r4, #56]	; 0x38
   2196c:	bl	219e8 <bfd_arch_bits_per_address@plt+0x10320>
   21970:	b	21868 <bfd_arch_bits_per_address@plt+0x101a0>
   21974:	add	r0, sp, #136	; 0x88
   21978:	bl	219f8 <bfd_arch_bits_per_address@plt+0x10330>
   2197c:	b	21858 <bfd_arch_bits_per_address@plt+0x10190>
   21980:	add	r0, sp, #136	; 0x88
   21984:	bl	21a00 <bfd_arch_bits_per_address@plt+0x10338>
   21988:	b	217b8 <bfd_arch_bits_per_address@plt+0x100f0>
   2198c:	add	r0, sp, #8
   21990:	bl	21a10 <bfd_arch_bits_per_address@plt+0x10348>
   21994:	rsb	r6, r5, #16
   21998:	b	217c0 <bfd_arch_bits_per_address@plt+0x100f8>
   2199c:	mov	r0, r4
   219a0:	bic	r3, r3, #4
   219a4:	str	r3, [r0], #208	; 0xd0
   219a8:	bl	21a10 <bfd_arch_bits_per_address@plt+0x10348>
   219ac:	b	217a8 <bfd_arch_bits_per_address@plt+0x100e0>
   219b0:	add	r0, sp, #136	; 0x88
   219b4:	bl	219f0 <bfd_arch_bits_per_address@plt+0x10328>
   219b8:	cmp	r8, #0
   219bc:	bne	21994 <bfd_arch_bits_per_address@plt+0x102cc>
   219c0:	b	217c0 <bfd_arch_bits_per_address@plt+0x100f8>
   219c4:	orr	r3, r3, #2
   219c8:	str	r3, [r0], #72	; 0x48
   219cc:	bl	21a00 <bfd_arch_bits_per_address@plt+0x10338>
   219d0:	b	21794 <bfd_arch_bits_per_address@plt+0x100cc>
   219d4:	add	r1, r0, #52	; 0x34
   219d8:	ldm	r1, {r3, r4, r5}
   219dc:	push	{r3, r4, r5}
   219e0:	ldm	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
   219e4:	ldm	sp, {sp, lr, pc}
   219e8:	fldmiax	r0, {d0-d15}	;@ Deprecated
   219ec:	bx	lr
   219f0:	fstmiax	r0, {d0-d15}	;@ Deprecated
   219f4:	bx	lr
   219f8:	vldmia	r0, {d0-d15}
   219fc:	bx	lr
   21a00:	vstmia	r0, {d0-d15}
   21a04:	bx	lr
   21a08:	vldmia	r0, {d16-d31}
   21a0c:	bx	lr
   21a10:	vstmia	r0, {d16-d31}
   21a14:	bx	lr
   21a18:	ldfe	f0, [r0], #8
   21a1c:	ldfe	f1, [r0], #8
   21a20:	ldfe	f2, [r0], #8
   21a24:	ldfe	f3, [r0], #8
   21a28:	ldfe	f4, [r0], #8
   21a2c:	ldfe	f5, [r0], #8
   21a30:	ldfe	f6, [r0], #8
   21a34:	ldfe	f7, [r0], #8
   21a38:	ldfp	f0, [r0], #8
   21a3c:	ldfp	f1, [r0], #8
   21a40:	ldfp	f2, [r0], #8
   21a44:	ldfp	f3, [r0], #8
   21a48:	ldfp	f4, [r0], #8
   21a4c:	ldfp	f5, [r0], #8
   21a50:	ldfp	f6, [r0], #8
   21a54:	ldfp	f7, [r0], #8
   21a58:	bx	lr
   21a5c:	stfe	f0, [r0], #8
   21a60:	stfe	f1, [r0], #8
   21a64:	stfe	f2, [r0], #8
   21a68:	stfe	f3, [r0], #8
   21a6c:	stfe	f4, [r0], #8
   21a70:	stfe	f5, [r0], #8
   21a74:	stfe	f6, [r0], #8
   21a78:	stfe	f7, [r0], #8
   21a7c:	stfp	f0, [r0], #8
   21a80:	stfp	f1, [r0], #8
   21a84:	stfp	f2, [r0], #8
   21a88:	stfp	f3, [r0], #8
   21a8c:	stfp	f4, [r0], #8
   21a90:	stfp	f5, [r0], #8
   21a94:	stfp	f6, [r0], #8
   21a98:	stfp	f7, [r0], #8
   21a9c:	bx	lr
   21aa0:	ldc2	1, cr8, [r0], #4
   21aa4:	ldc2	1, cr9, [r0], #4
   21aa8:	ldc2	1, cr10, [r0], #4
   21aac:	ldc2	1, cr11, [r0], #4
   21ab0:	bx	lr
   21ab4:	stc2	1, cr8, [r0], #4
   21ab8:	stc2	1, cr9, [r0], #4
   21abc:	stc2	1, cr10, [r0], #4
   21ac0:	stc2	1, cr11, [r0], #4
   21ac4:	bx	lr
   21ac8:	push	{sp, lr, pc}
   21acc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21ad0:	mov	r3, #0
   21ad4:	push	{r2, r3}
   21ad8:	add	r1, sp, #4
   21adc:	bl	20e84 <bfd_arch_bits_per_address@plt+0xf7bc>
   21ae0:	ldr	lr, [sp, #64]	; 0x40
   21ae4:	add	sp, sp, #72	; 0x48
   21ae8:	bx	lr
   21aec:	push	{sp, lr, pc}
   21af0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21af4:	mov	r3, #0
   21af8:	push	{r2, r3}
   21afc:	add	r1, sp, #4
   21b00:	bl	20f50 <bfd_arch_bits_per_address@plt+0xf888>
   21b04:	ldr	lr, [sp, #64]	; 0x40
   21b08:	add	sp, sp, #72	; 0x48
   21b0c:	bx	lr
   21b10:	push	{sp, lr, pc}
   21b14:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21b18:	mov	r3, #0
   21b1c:	push	{r2, r3}
   21b20:	add	r1, sp, #4
   21b24:	bl	20fc4 <bfd_arch_bits_per_address@plt+0xf8fc>
   21b28:	ldr	lr, [sp, #64]	; 0x40
   21b2c:	add	sp, sp, #72	; 0x48
   21b30:	bx	lr
   21b34:	push	{sp, lr, pc}
   21b38:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21b3c:	mov	r3, #0
   21b40:	push	{r2, r3}
   21b44:	add	r3, sp, #4
   21b48:	bl	20f2c <bfd_arch_bits_per_address@plt+0xf864>
   21b4c:	ldr	lr, [sp, #64]	; 0x40
   21b50:	add	sp, sp, #72	; 0x48
   21b54:	bx	lr
   21b58:	push	{sp, lr, pc}
   21b5c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
   21b60:	mov	r3, #0
   21b64:	push	{r2, r3}
   21b68:	add	r2, sp, #4
   21b6c:	bl	2111c <bfd_arch_bits_per_address@plt+0xfa54>
   21b70:	ldr	lr, [sp, #64]	; 0x40
   21b74:	add	sp, sp, #72	; 0x48
   21b78:	bx	lr
   21b7c:	ldrb	r2, [r0, #8]
   21b80:	mov	r3, r0
   21b84:	cmp	r2, #0
   21b88:	bne	21ba0 <bfd_arch_bits_per_address@plt+0x104d8>
   21b8c:	ldrb	r2, [r0, #9]
   21b90:	cmp	r2, #0
   21b94:	bne	21bbc <bfd_arch_bits_per_address@plt+0x104f4>
   21b98:	mov	r0, #176	; 0xb0
   21b9c:	bx	lr
   21ba0:	ldr	r0, [r0]
   21ba4:	sub	r2, r2, #1
   21ba8:	strb	r2, [r3, #8]
   21bac:	lsl	r2, r0, #8
   21bb0:	lsr	r0, r0, #24
   21bb4:	str	r2, [r3]
   21bb8:	bx	lr
   21bbc:	ldr	r1, [r0, #4]
   21bc0:	sub	r2, r2, #1
   21bc4:	strb	r2, [r0, #9]
   21bc8:	mov	r2, #3
   21bcc:	add	r0, r1, #4
   21bd0:	str	r0, [r3, #4]
   21bd4:	ldr	r0, [r1]
   21bd8:	strb	r2, [r3, #8]
   21bdc:	b	21bac <bfd_arch_bits_per_address@plt+0x104e4>
   21be0:	push	{lr}		; (str lr, [sp, #-4]!)
   21be4:	sub	sp, sp, #20
   21be8:	mov	r1, #0
   21bec:	add	r2, sp, #12
   21bf0:	mov	r3, r1
   21bf4:	str	r2, [sp]
   21bf8:	mov	r2, #12
   21bfc:	bl	21008 <bfd_arch_bits_per_address@plt+0xf940>
   21c00:	ldr	r0, [sp, #12]
   21c04:	add	sp, sp, #20
   21c08:	pop	{pc}		; (ldr pc, [sp], #4)
   21c0c:	b	21be0 <bfd_arch_bits_per_address@plt+0x10518>
   21c10:	push	{r4, r5, r6, r7, r8, r9, lr}
   21c14:	sub	sp, sp, #20
   21c18:	add	r7, sp, #12
   21c1c:	mov	r6, r0
   21c20:	mov	r5, r1
   21c24:	mov	r8, #0
   21c28:	mov	r0, r5
   21c2c:	bl	21b7c <bfd_arch_bits_per_address@plt+0x104b4>
   21c30:	cmp	r0, #176	; 0xb0
   21c34:	mov	r4, r0
   21c38:	beq	21e54 <bfd_arch_bits_per_address@plt+0x1078c>
   21c3c:	bic	r2, r0, #127	; 0x7f
   21c40:	ands	r1, r2, #255	; 0xff
   21c44:	beq	21cb0 <bfd_arch_bits_per_address@plt+0x105e8>
   21c48:	and	r2, r0, #240	; 0xf0
   21c4c:	cmp	r2, #128	; 0x80
   21c50:	beq	21dac <bfd_arch_bits_per_address@plt+0x106e4>
   21c54:	cmp	r2, #144	; 0x90
   21c58:	beq	21d00 <bfd_arch_bits_per_address@plt+0x10638>
   21c5c:	cmp	r2, #160	; 0xa0
   21c60:	beq	21d28 <bfd_arch_bits_per_address@plt+0x10660>
   21c64:	cmp	r2, #176	; 0xb0
   21c68:	beq	21d60 <bfd_arch_bits_per_address@plt+0x10698>
   21c6c:	cmp	r2, #192	; 0xc0
   21c70:	beq	21df4 <bfd_arch_bits_per_address@plt+0x1072c>
   21c74:	and	r3, r0, #248	; 0xf8
   21c78:	cmp	r3, #208	; 0xd0
   21c7c:	bne	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21c80:	and	r4, r0, #7
   21c84:	mov	r1, #1
   21c88:	add	r2, r4, #1
   21c8c:	mov	r0, r6
   21c90:	orr	r2, r2, #524288	; 0x80000
   21c94:	mov	r3, #5
   21c98:	bl	21648 <bfd_arch_bits_per_address@plt+0xff80>
   21c9c:	cmp	r0, #0
   21ca0:	beq	21c28 <bfd_arch_bits_per_address@plt+0x10560>
   21ca4:	mov	r0, #9
   21ca8:	add	sp, sp, #20
   21cac:	pop	{r4, r5, r6, r7, r8, r9, pc}
   21cb0:	lsl	r9, r0, #2
   21cb4:	mov	r3, r1
   21cb8:	str	r7, [sp]
   21cbc:	mov	r0, r6
   21cc0:	mov	r2, #13
   21cc4:	uxtb	r9, r9
   21cc8:	bl	21008 <bfd_arch_bits_per_address@plt+0xf940>
   21ccc:	ldr	r3, [sp, #12]
   21cd0:	add	r9, r9, #4
   21cd4:	tst	r4, #64	; 0x40
   21cd8:	rsbne	r9, r9, r3
   21cdc:	addeq	r9, r3, r9
   21ce0:	str	r9, [sp, #12]
   21ce4:	mov	r1, #0
   21ce8:	str	r7, [sp]
   21cec:	mov	r3, r1
   21cf0:	mov	r0, r6
   21cf4:	mov	r2, #13
   21cf8:	bl	21090 <bfd_arch_bits_per_address@plt+0xf9c8>
   21cfc:	b	21c28 <bfd_arch_bits_per_address@plt+0x10560>
   21d00:	and	r3, r0, #13
   21d04:	cmp	r3, #13
   21d08:	beq	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21d0c:	mov	r1, #0
   21d10:	and	r2, r0, #15
   21d14:	str	r7, [sp]
   21d18:	mov	r3, r1
   21d1c:	mov	r0, r6
   21d20:	bl	21008 <bfd_arch_bits_per_address@plt+0xf940>
   21d24:	b	21ce4 <bfd_arch_bits_per_address@plt+0x1061c>
   21d28:	mvn	r4, r0
   21d2c:	mov	r2, #4080	; 0xff0
   21d30:	and	r4, r4, #7
   21d34:	tst	r0, #8
   21d38:	asr	r2, r2, r4
   21d3c:	mov	r1, #0
   21d40:	and	r2, r2, #4080	; 0xff0
   21d44:	orrne	r2, r2, #16384	; 0x4000
   21d48:	mov	r3, r1
   21d4c:	mov	r0, r6
   21d50:	bl	21648 <bfd_arch_bits_per_address@plt+0xff80>
   21d54:	cmp	r0, #0
   21d58:	bne	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21d5c:	b	21c28 <bfd_arch_bits_per_address@plt+0x10560>
   21d60:	cmp	r0, #177	; 0xb1
   21d64:	beq	21e9c <bfd_arch_bits_per_address@plt+0x107d4>
   21d68:	cmp	r0, #178	; 0xb2
   21d6c:	beq	21eb8 <bfd_arch_bits_per_address@plt+0x107f0>
   21d70:	cmp	r0, #179	; 0xb3
   21d74:	beq	21f38 <bfd_arch_bits_per_address@plt+0x10870>
   21d78:	and	r3, r0, #252	; 0xfc
   21d7c:	cmp	r3, #180	; 0xb4
   21d80:	beq	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21d84:	and	r2, r0, #7
   21d88:	mov	r1, #1
   21d8c:	add	r2, r2, r1
   21d90:	mov	r3, r1
   21d94:	orr	r2, r2, #524288	; 0x80000
   21d98:	mov	r0, r6
   21d9c:	bl	21648 <bfd_arch_bits_per_address@plt+0xff80>
   21da0:	cmp	r0, #0
   21da4:	bne	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21da8:	b	21c28 <bfd_arch_bits_per_address@plt+0x10560>
   21dac:	mov	r0, r5
   21db0:	lsl	r4, r4, #8
   21db4:	bl	21b7c <bfd_arch_bits_per_address@plt+0x104b4>
   21db8:	orr	r0, r0, r4
   21dbc:	cmp	r0, #32768	; 0x8000
   21dc0:	beq	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21dc4:	lsl	r4, r0, #4
   21dc8:	mov	r1, #0
   21dcc:	movw	r2, #65520	; 0xfff0
   21dd0:	mov	r3, r1
   21dd4:	and	r2, r4, r2
   21dd8:	mov	r0, r6
   21ddc:	bl	21648 <bfd_arch_bits_per_address@plt+0xff80>
   21de0:	cmp	r0, #0
   21de4:	bne	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21de8:	tst	r4, #32768	; 0x8000
   21dec:	movne	r8, #1
   21df0:	b	21c28 <bfd_arch_bits_per_address@plt+0x10560>
   21df4:	cmp	r0, #198	; 0xc6
   21df8:	beq	21f58 <bfd_arch_bits_per_address@plt+0x10890>
   21dfc:	cmp	r0, #199	; 0xc7
   21e00:	beq	21f74 <bfd_arch_bits_per_address@plt+0x108ac>
   21e04:	and	r3, r0, #248	; 0xf8
   21e08:	cmp	r3, #192	; 0xc0
   21e0c:	beq	21fa4 <bfd_arch_bits_per_address@plt+0x108dc>
   21e10:	cmp	r0, #200	; 0xc8
   21e14:	beq	21fcc <bfd_arch_bits_per_address@plt+0x10904>
   21e18:	cmp	r0, #201	; 0xc9
   21e1c:	bne	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21e20:	mov	r0, r5
   21e24:	bl	21b7c <bfd_arch_bits_per_address@plt+0x104b4>
   21e28:	mov	r1, #1
   21e2c:	and	r3, r0, #15
   21e30:	and	r2, r0, #240	; 0xf0
   21e34:	add	r3, r3, #1
   21e38:	mov	r0, r6
   21e3c:	orr	r2, r3, r2, lsl #12
   21e40:	mov	r3, #5
   21e44:	bl	21648 <bfd_arch_bits_per_address@plt+0xff80>
   21e48:	cmp	r0, #0
   21e4c:	bne	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21e50:	b	21c28 <bfd_arch_bits_per_address@plt+0x10560>
   21e54:	cmp	r8, #0
   21e58:	movne	r0, #0
   21e5c:	bne	21ca8 <bfd_arch_bits_per_address@plt+0x105e0>
   21e60:	add	r4, sp, #12
   21e64:	mov	r1, r8
   21e68:	mov	r2, #14
   21e6c:	mov	r3, r8
   21e70:	mov	r0, r6
   21e74:	str	r4, [sp]
   21e78:	bl	21008 <bfd_arch_bits_per_address@plt+0xf940>
   21e7c:	str	r4, [sp]
   21e80:	mov	r0, r6
   21e84:	mov	r1, r8
   21e88:	mov	r2, #15
   21e8c:	mov	r3, r8
   21e90:	bl	21090 <bfd_arch_bits_per_address@plt+0xf9c8>
   21e94:	mov	r0, r8
   21e98:	b	21ca8 <bfd_arch_bits_per_address@plt+0x105e0>
   21e9c:	mov	r0, r5
   21ea0:	bl	21b7c <bfd_arch_bits_per_address@plt+0x104b4>
   21ea4:	subs	r2, r0, #0
   21ea8:	beq	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21eac:	ands	r1, r2, #240	; 0xf0
   21eb0:	beq	21d48 <bfd_arch_bits_per_address@plt+0x10680>
   21eb4:	b	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21eb8:	mov	r1, #0
   21ebc:	mov	r2, #13
   21ec0:	mov	r3, r1
   21ec4:	str	r7, [sp]
   21ec8:	mov	r0, r6
   21ecc:	mov	r4, #2
   21ed0:	bl	21008 <bfd_arch_bits_per_address@plt+0xf940>
   21ed4:	mov	r0, r5
   21ed8:	bl	21b7c <bfd_arch_bits_per_address@plt+0x104b4>
   21edc:	tst	r0, #128	; 0x80
   21ee0:	beq	21f08 <bfd_arch_bits_per_address@plt+0x10840>
   21ee4:	and	r2, r0, #127	; 0x7f
   21ee8:	ldr	r3, [sp, #12]
   21eec:	mov	r0, r5
   21ef0:	add	r3, r3, r2, lsl r4
   21ef4:	str	r3, [sp, #12]
   21ef8:	bl	21b7c <bfd_arch_bits_per_address@plt+0x104b4>
   21efc:	add	r4, r4, #7
   21f00:	tst	r0, #128	; 0x80
   21f04:	bne	21ee4 <bfd_arch_bits_per_address@plt+0x1081c>
   21f08:	ldr	ip, [sp, #12]
   21f0c:	and	lr, r0, #127	; 0x7f
   21f10:	mov	r1, #0
   21f14:	str	r7, [sp]
   21f18:	add	ip, ip, #516	; 0x204
   21f1c:	mov	r3, r1
   21f20:	mov	r0, r6
   21f24:	mov	r2, #13
   21f28:	add	r4, ip, lr, lsl r4
   21f2c:	str	r4, [sp, #12]
   21f30:	bl	21090 <bfd_arch_bits_per_address@plt+0xf9c8>
   21f34:	b	21c28 <bfd_arch_bits_per_address@plt+0x10560>
   21f38:	mov	r0, r5
   21f3c:	bl	21b7c <bfd_arch_bits_per_address@plt+0x104b4>
   21f40:	mov	r1, #1
   21f44:	and	r3, r0, #15
   21f48:	and	r2, r0, #240	; 0xf0
   21f4c:	add	r3, r3, #1
   21f50:	orr	r2, r3, r2, lsl #12
   21f54:	b	21d48 <bfd_arch_bits_per_address@plt+0x10680>
   21f58:	mov	r0, r5
   21f5c:	bl	21b7c <bfd_arch_bits_per_address@plt+0x104b4>
   21f60:	mov	r1, #3
   21f64:	and	r3, r0, #15
   21f68:	and	r2, r0, #240	; 0xf0
   21f6c:	add	r3, r3, #1
   21f70:	b	21f50 <bfd_arch_bits_per_address@plt+0x10888>
   21f74:	mov	r0, r5
   21f78:	bl	21b7c <bfd_arch_bits_per_address@plt+0x104b4>
   21f7c:	subs	r2, r0, #0
   21f80:	beq	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21f84:	ands	r3, r2, #240	; 0xf0
   21f88:	bne	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21f8c:	mov	r0, r6
   21f90:	mov	r1, #4
   21f94:	bl	21648 <bfd_arch_bits_per_address@plt+0xff80>
   21f98:	cmp	r0, #0
   21f9c:	bne	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21fa0:	b	21c28 <bfd_arch_bits_per_address@plt+0x10560>
   21fa4:	and	r2, r0, #15
   21fa8:	mov	r1, #3
   21fac:	add	r2, r2, #1
   21fb0:	mov	r3, r1
   21fb4:	orr	r2, r2, #655360	; 0xa0000
   21fb8:	mov	r0, r6
   21fbc:	bl	21648 <bfd_arch_bits_per_address@plt+0xff80>
   21fc0:	cmp	r0, #0
   21fc4:	bne	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   21fc8:	b	21c28 <bfd_arch_bits_per_address@plt+0x10560>
   21fcc:	mov	r0, r5
   21fd0:	bl	21b7c <bfd_arch_bits_per_address@plt+0x104b4>
   21fd4:	mov	r1, #1
   21fd8:	and	r2, r0, #240	; 0xf0
   21fdc:	and	r3, r0, #15
   21fe0:	add	r2, r2, #16
   21fe4:	add	r3, r3, #1
   21fe8:	mov	r0, r6
   21fec:	orr	r2, r3, r2, lsl #12
   21ff0:	mov	r3, #5
   21ff4:	bl	21648 <bfd_arch_bits_per_address@plt+0xff80>
   21ff8:	cmp	r0, #0
   21ffc:	bne	21ca4 <bfd_arch_bits_per_address@plt+0x105dc>
   22000:	b	21c28 <bfd_arch_bits_per_address@plt+0x10560>
   22004:	ldr	r3, [r0, #76]	; 0x4c
   22008:	mov	r0, r1
   2200c:	push	{lr}		; (str lr, [sp, #-4]!)
   22010:	sub	sp, sp, #20
   22014:	ldr	r2, [r3, #4]
   22018:	add	ip, r3, #8
   2201c:	mov	lr, #3
   22020:	strb	lr, [sp, #12]
   22024:	ldrb	r3, [r3, #7]
   22028:	add	r1, sp, #4
   2202c:	lsl	r2, r2, #8
   22030:	stmib	sp, {r2, ip}
   22034:	strb	r3, [sp, #13]
   22038:	bl	21c10 <bfd_arch_bits_per_address@plt+0x10548>
   2203c:	add	sp, sp, #20
   22040:	pop	{pc}		; (ldr pc, [sp], #4)
   22044:	push	{r3, lr}
   22048:	bl	21c0c <bfd_arch_bits_per_address@plt+0x10544>
   2204c:	ldr	r0, [r0, #72]	; 0x48
   22050:	pop	{r3, pc}
   22054:	push	{r3, lr}
   22058:	bl	21c0c <bfd_arch_bits_per_address@plt+0x10544>
   2205c:	ldr	r3, [r0, #76]	; 0x4c
   22060:	ldrb	r2, [r3, #7]
   22064:	add	r0, r3, r2, lsl #2
   22068:	add	r0, r0, #8
   2206c:	pop	{r3, pc}
   22070:	push	{r3, lr}
   22074:	bl	116bc <abort@plt>
   22078:	push	{r3, lr}
   2207c:	bl	116bc <abort@plt>
   22080:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   22084:	mov	r7, r0
   22088:	ldr	r6, [pc, #76]	; 220dc <bfd_arch_bits_per_address@plt+0x10a14>
   2208c:	mov	r8, r1
   22090:	ldr	r5, [pc, #72]	; 220e0 <bfd_arch_bits_per_address@plt+0x10a18>
   22094:	mov	r9, r2
   22098:	add	r6, pc, r6
   2209c:	bl	1130c <_init@@Base>
   220a0:	add	r5, pc, r5
   220a4:	rsb	r6, r5, r6
   220a8:	asrs	r6, r6, #2
   220ac:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   220b0:	sub	r5, r5, #4
   220b4:	mov	r4, #0
   220b8:	add	r4, r4, #1
   220bc:	ldr	r3, [r5, #4]!
   220c0:	mov	r0, r7
   220c4:	mov	r1, r8
   220c8:	mov	r2, r9
   220cc:	blx	r3
   220d0:	cmp	r4, r6
   220d4:	bne	220b8 <bfd_arch_bits_per_address@plt+0x109f0>
   220d8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   220dc:	andeq	r4, r1, r0, asr lr
   220e0:	andeq	r4, r1, r4, asr #28
   220e4:	bx	lr

Disassembly of section .fini:

000220e8 <_fini@@Base>:
   220e8:	push	{r3, lr}
   220ec:	pop	{r3, pc}
