
centos-preinstalled/nl-qdisc-list:     file format elf32-littlearm


Disassembly of section .init:

00010b2c <.init>:
   10b2c:	push	{r3, lr}
   10b30:	bl	10ef8 <exit@plt+0x22c>
   10b34:	pop	{r3, pc}

Disassembly of section .plt:

00010b38 <abort@plt-0x14>:
   10b38:	push	{lr}		; (str lr, [sp, #-4]!)
   10b3c:	ldr	lr, [pc, #4]	; 10b48 <abort@plt-0x4>
   10b40:	add	lr, pc, lr
   10b44:	ldr	pc, [lr, #8]!
   10b48:			; <UNDEFINED> instruction: 0x000114b8

00010b4c <abort@plt>:
   10b4c:	add	ip, pc, #0, 12
   10b50:	add	ip, ip, #69632	; 0x11000
   10b54:	ldr	pc, [ip, #1208]!	; 0x4b8

00010b58 <nl_cache_dump_filter@plt>:
   10b58:	add	ip, pc, #0, 12
   10b5c:	add	ip, ip, #69632	; 0x11000
   10b60:	ldr	pc, [ip, #1200]!	; 0x4b0

00010b64 <nl_cache_foreach_filter@plt>:
   10b64:	add	ip, pc, #0, 12
   10b68:	add	ip, ip, #69632	; 0x11000
   10b6c:	ldr	pc, [ip, #1192]!	; 0x4a8

00010b70 <__libc_start_main@plt>:
   10b70:	add	ip, pc, #0, 12
   10b74:	add	ip, ip, #69632	; 0x11000
   10b78:	ldr	pc, [ip, #1184]!	; 0x4a0

00010b7c <rtnl_tc_set_parent@plt>:
   10b7c:	add	ip, pc, #0, 12
   10b80:	add	ip, ip, #69632	; 0x11000
   10b84:	ldr	pc, [ip, #1176]!	; 0x498

00010b88 <rtnl_tc_set_ifindex@plt>:
   10b88:	add	ip, pc, #0, 12
   10b8c:	add	ip, ip, #69632	; 0x11000
   10b90:	ldr	pc, [ip, #1168]!	; 0x490

00010b94 <__gmon_start__@plt>:
   10b94:	add	ip, pc, #0, 12
   10b98:	add	ip, ip, #69632	; 0x11000
   10b9c:	ldr	pc, [ip, #1160]!	; 0x488

00010ba0 <nl_cli_alloc_cache@plt>:
   10ba0:	add	ip, pc, #0, 12
   10ba4:	add	ip, ip, #69632	; 0x11000
   10ba8:	ldr	pc, [ip, #1152]!	; 0x480

00010bac <nl_cli_tc_parse_parent@plt>:
   10bac:	add	ip, pc, #0, 12
   10bb0:	add	ip, ip, #69632	; 0x11000
   10bb4:	ldr	pc, [ip, #1144]!	; 0x478

00010bb8 <nl_cli_print_version@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #69632	; 0x11000
   10bc0:	ldr	pc, [ip, #1136]!	; 0x470

00010bc4 <nl_cli_alloc_socket@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #69632	; 0x11000
   10bcc:	ldr	pc, [ip, #1128]!	; 0x468

00010bd0 <nl_cache_dump@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #69632	; 0x11000
   10bd8:	ldr	pc, [ip, #1120]!	; 0x460

00010bdc <nl_cli_class_alloc_cache@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #69632	; 0x11000
   10be4:	ldr	pc, [ip, #1112]!	; 0x458

00010be8 <nl_cli_qdisc_alloc@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #69632	; 0x11000
   10bf0:	ldr	pc, [ip, #1104]!	; 0x450

00010bf4 <rtnl_qdisc_alloc_cache@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #69632	; 0x11000
   10bfc:	ldr	pc, [ip, #1096]!	; 0x448

00010c00 <rtnl_tc_get_handle@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #69632	; 0x11000
   10c08:	ldr	pc, [ip, #1088]!	; 0x440

00010c0c <rtnl_class_put@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #69632	; 0x11000
   10c14:	ldr	pc, [ip, #1080]!	; 0x438

00010c18 <getopt_long@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #69632	; 0x11000
   10c20:	ldr	pc, [ip, #1072]!	; 0x430

00010c24 <rtnl_tc_get_ifindex@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #69632	; 0x11000
   10c2c:	ldr	pc, [ip, #1064]!	; 0x428

00010c30 <nl_cache_free@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #69632	; 0x11000
   10c38:	ldr	pc, [ip, #1056]!	; 0x420

00010c3c <nl_cli_link_alloc_cache@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #69632	; 0x11000
   10c44:	ldr	pc, [ip, #1048]!	; 0x418

00010c48 <__stack_chk_fail@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #69632	; 0x11000
   10c50:	ldr	pc, [ip, #1040]!	; 0x410

00010c54 <nl_cli_class_alloc@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #69632	; 0x11000
   10c5c:	ldr	pc, [ip, #1032]!	; 0x408

00010c60 <nl_cli_tc_parse_kind@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #69632	; 0x11000
   10c68:	ldr	pc, [ip, #1024]!	; 0x400

00010c6c <rtnl_tc_get_parent@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #69632	; 0x11000
   10c74:	ldr	pc, [ip, #1016]!	; 0x3f8

00010c78 <nl_object_dump@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #69632	; 0x11000
   10c80:	ldr	pc, [ip, #1008]!	; 0x3f0

00010c84 <rtnl_qdisc_put@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #69632	; 0x11000
   10c8c:	ldr	pc, [ip, #1000]!	; 0x3e8

00010c90 <puts@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #69632	; 0x11000
   10c98:	ldr	pc, [ip, #992]!	; 0x3e0

00010c9c <nl_cli_connect@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #69632	; 0x11000
   10ca4:	ldr	pc, [ip, #984]!	; 0x3d8

00010ca8 <nl_cli_tc_parse_dev@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #69632	; 0x11000
   10cb0:	ldr	pc, [ip, #976]!	; 0x3d0

00010cb4 <nl_cli_cls_alloc_cache@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #69632	; 0x11000
   10cbc:	ldr	pc, [ip, #968]!	; 0x3c8

00010cc0 <nl_cli_tc_parse_handle@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #69632	; 0x11000
   10cc8:	ldr	pc, [ip, #960]!	; 0x3c0

00010ccc <exit@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #69632	; 0x11000
   10cd4:	ldr	pc, [ip, #952]!	; 0x3b8

Disassembly of section .text:

00010cd8 <.text>:
   10cd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10cdc:	movw	r3, #8508	; 0x213c
   10ce0:	movw	sl, #8504	; 0x2138
   10ce4:	movt	r3, #2
   10ce8:	movt	sl, #2
   10cec:	sub	sp, sp, #28
   10cf0:	ldr	r3, [r3]
   10cf4:	movw	r4, #8520	; 0x2148
   10cf8:	ldr	r2, [sl]
   10cfc:	movt	r4, #2
   10d00:	mov	r7, r1
   10d04:	mov	r8, r0
   10d08:	str	r3, [r4, #32]
   10d0c:	movw	r9, #8512	; 0x2140
   10d10:	str	r2, [sp, #20]
   10d14:	bl	10bc4 <nl_cli_alloc_socket@plt>
   10d18:	mov	r1, #0
   10d1c:	add	r6, sp, #16
   10d20:	mov	r5, r1
   10d24:	movt	r9, #2
   10d28:	str	r0, [r4]
   10d2c:	bl	10c9c <nl_cli_connect@plt>
   10d30:	ldr	r0, [r4]
   10d34:	bl	10c3c <nl_cli_link_alloc_cache@plt>
   10d38:	movw	r1, #4752	; 0x1290
   10d3c:	movw	r2, #3060	; 0xbf4
   10d40:	movt	r1, #1
   10d44:	movt	r2, #1
   10d48:	str	r0, [sp, #8]
   10d4c:	ldr	r0, [r4]
   10d50:	bl	10ba0 <nl_cli_alloc_cache@plt>
   10d54:	str	r0, [sp, #12]
   10d58:	bl	10be8 <nl_cli_qdisc_alloc@plt>
   10d5c:	mov	fp, r0
   10d60:	str	r6, [sp]
   10d64:	movw	r2, #4776	; 0x12a8
   10d68:	movw	r3, #8344	; 0x2098
   10d6c:	movt	r2, #1
   10d70:	movt	r3, #2
   10d74:	mov	r0, r8
   10d78:	mov	r1, r7
   10d7c:	str	r5, [sp, #16]
   10d80:	bl	10c18 <getopt_long@plt>
   10d84:	cmn	r0, #1
   10d88:	beq	10e64 <exit@plt+0x198>
   10d8c:	cmp	r0, #112	; 0x70
   10d90:	beq	10e40 <exit@plt+0x174>
   10d94:	bgt	10dc4 <exit@plt+0xf8>
   10d98:	cmp	r0, #104	; 0x68
   10d9c:	beq	10e24 <exit@plt+0x158>
   10da0:	ble	10df8 <exit@plt+0x12c>
   10da4:	cmp	r0, #105	; 0x69
   10da8:	beq	10e50 <exit@plt+0x184>
   10dac:	cmp	r0, #107	; 0x6b
   10db0:	bne	10d60 <exit@plt+0x94>
   10db4:	mov	r0, fp
   10db8:	ldr	r1, [r9]
   10dbc:	bl	10c60 <nl_cli_tc_parse_kind@plt>
   10dc0:	b	10d60 <exit@plt+0x94>
   10dc4:	cmp	r0, #118	; 0x76
   10dc8:	beq	10e38 <exit@plt+0x16c>
   10dcc:	ble	10e14 <exit@plt+0x148>
   10dd0:	movw	r3, #257	; 0x101
   10dd4:	cmp	r0, r3
   10dd8:	moveq	r3, #1
   10ddc:	streq	r3, [r4, #4]
   10de0:	beq	10d60 <exit@plt+0x94>
   10de4:	add	r3, r3, #1
   10de8:	cmp	r0, r3
   10dec:	moveq	r3, #2
   10df0:	streq	r3, [r4, #4]
   10df4:	b	10d60 <exit@plt+0x94>
   10df8:	cmp	r0, #100	; 0x64
   10dfc:	bne	10d60 <exit@plt+0x94>
   10e00:	mov	r0, fp
   10e04:	ldr	r1, [sp, #8]
   10e08:	ldr	r2, [r9]
   10e0c:	bl	10ca8 <nl_cli_tc_parse_dev@plt>
   10e10:	b	10d60 <exit@plt+0x94>
   10e14:	cmp	r0, #114	; 0x72
   10e18:	moveq	r3, #1
   10e1c:	streq	r3, [r4, #56]	; 0x38
   10e20:	b	10d60 <exit@plt+0x94>
   10e24:	movw	r0, #4788	; 0x12b4
   10e28:	movt	r0, #1
   10e2c:	bl	10c90 <puts@plt>
   10e30:	mov	r0, #0
   10e34:	bl	10ccc <exit@plt>
   10e38:	bl	10bb8 <nl_cli_print_version@plt>
   10e3c:	b	10d60 <exit@plt+0x94>
   10e40:	mov	r0, fp
   10e44:	ldr	r1, [r9]
   10e48:	bl	10bac <nl_cli_tc_parse_parent@plt>
   10e4c:	b	10d60 <exit@plt+0x94>
   10e50:	mov	r0, fp
   10e54:	ldr	r1, [r9]
   10e58:	mov	r2, #0
   10e5c:	bl	10cc0 <nl_cli_tc_parse_handle@plt>
   10e60:	b	10d60 <exit@plt+0x94>
   10e64:	ldr	r3, [r4, #56]	; 0x38
   10e68:	ldr	r0, [sp, #12]
   10e6c:	cmp	r3, #0
   10e70:	bne	10e9c <exit@plt+0x1d0>
   10e74:	mov	r2, fp
   10e78:	ldr	r1, [pc, #56]	; 10eb8 <exit@plt+0x1ec>
   10e7c:	bl	10b58 <nl_cache_dump_filter@plt>
   10e80:	ldr	r2, [sp, #20]
   10e84:	mov	r0, #0
   10e88:	ldr	r3, [sl]
   10e8c:	cmp	r2, r3
   10e90:	bne	10eb4 <exit@plt+0x1e8>
   10e94:	add	sp, sp, #28
   10e98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10e9c:	mov	r1, fp
   10ea0:	movw	r2, #4280	; 0x10b8
   10ea4:	mov	r3, #0
   10ea8:	movt	r2, #1
   10eac:	bl	10b64 <nl_cache_foreach_filter@plt>
   10eb0:	b	10e80 <exit@plt+0x1b4>
   10eb4:	bl	10c48 <__stack_chk_fail@plt>
   10eb8:	andeq	r2, r2, ip, asr #2
   10ebc:	mov	fp, #0
   10ec0:	mov	lr, #0
   10ec4:	pop	{r1}		; (ldr r1, [sp], #4)
   10ec8:	mov	r2, sp
   10ecc:	push	{r2}		; (str r2, [sp, #-4]!)
   10ed0:	push	{r0}		; (str r0, [sp, #-4]!)
   10ed4:	ldr	ip, [pc, #16]	; 10eec <exit@plt+0x220>
   10ed8:	push	{ip}		; (str ip, [sp, #-4]!)
   10edc:	ldr	r0, [pc, #12]	; 10ef0 <exit@plt+0x224>
   10ee0:	ldr	r3, [pc, #12]	; 10ef4 <exit@plt+0x228>
   10ee4:	bl	10b70 <__libc_start_main@plt>
   10ee8:	bl	10b4c <abort@plt>
   10eec:	andeq	r1, r1, ip, ror r2
   10ef0:	ldrdeq	r0, [r1], -r8
   10ef4:	andeq	r1, r1, r8, lsl r2
   10ef8:	ldr	r3, [pc, #20]	; 10f14 <exit@plt+0x248>
   10efc:	ldr	r2, [pc, #20]	; 10f18 <exit@plt+0x24c>
   10f00:	add	r3, pc, r3
   10f04:	ldr	r2, [r3, r2]
   10f08:	cmp	r2, #0
   10f0c:	bxeq	lr
   10f10:	b	10b94 <__gmon_start__@plt>
   10f14:	strdeq	r1, [r1], -r8
   10f18:	muleq	r0, r0, r0
   10f1c:	push	{r3, lr}
   10f20:	movw	r0, #8504	; 0x2138
   10f24:	ldr	r3, [pc, #36]	; 10f50 <exit@plt+0x284>
   10f28:	movt	r0, #2
   10f2c:	rsb	r3, r0, r3
   10f30:	cmp	r3, #6
   10f34:	popls	{r3, pc}
   10f38:	movw	r3, #0
   10f3c:	movt	r3, #0
   10f40:	cmp	r3, #0
   10f44:	popeq	{r3, pc}
   10f48:	blx	r3
   10f4c:	pop	{r3, pc}
   10f50:	andeq	r2, r2, fp, lsr r1
   10f54:	push	{r3, lr}
   10f58:	movw	r0, #8504	; 0x2138
   10f5c:	movw	r3, #8504	; 0x2138
   10f60:	movt	r0, #2
   10f64:	movt	r3, #2
   10f68:	rsb	r3, r0, r3
   10f6c:	asr	r3, r3, #2
   10f70:	add	r3, r3, r3, lsr #31
   10f74:	asrs	r1, r3, #1
   10f78:	popeq	{r3, pc}
   10f7c:	movw	r2, #0
   10f80:	movt	r2, #0
   10f84:	cmp	r2, #0
   10f88:	popeq	{r3, pc}
   10f8c:	blx	r2
   10f90:	pop	{r3, pc}
   10f94:	push	{r4, lr}
   10f98:	movw	r4, #8516	; 0x2144
   10f9c:	movt	r4, #2
   10fa0:	ldrb	r3, [r4]
   10fa4:	cmp	r3, #0
   10fa8:	popne	{r4, pc}
   10fac:	bl	10f1c <exit@plt+0x250>
   10fb0:	mov	r3, #1
   10fb4:	strb	r3, [r4]
   10fb8:	pop	{r4, pc}
   10fbc:	movw	r0, #7868	; 0x1ebc
   10fc0:	movt	r0, #2
   10fc4:	push	{r3, lr}
   10fc8:	ldr	r3, [r0]
   10fcc:	cmp	r3, #0
   10fd0:	beq	10fe8 <exit@plt+0x31c>
   10fd4:	movw	r3, #0
   10fd8:	movt	r3, #0
   10fdc:	cmp	r3, #0
   10fe0:	beq	10fe8 <exit@plt+0x31c>
   10fe4:	blx	r3
   10fe8:	pop	{r3, lr}
   10fec:	b	10f54 <exit@plt+0x288>
   10ff0:	push	{r3, r4, r5, lr}
   10ff4:	movw	r4, #8520	; 0x2148
   10ff8:	movt	r4, #2
   10ffc:	mov	r2, r1
   11000:	mov	r1, r0
   11004:	ldr	r0, [r4]
   11008:	bl	10cb4 <nl_cli_cls_alloc_cache@plt>
   1100c:	ldr	r3, [r4, #8]
   11010:	add	r1, r4, #4
   11014:	add	r3, r3, #4
   11018:	str	r3, [r4, #8]
   1101c:	mov	r5, r0
   11020:	bl	10bd0 <nl_cache_dump@plt>
   11024:	ldr	r3, [r4, #8]
   11028:	mov	r0, r5
   1102c:	sub	r3, r3, #4
   11030:	str	r3, [r4, #8]
   11034:	pop	{r3, r4, r5, lr}
   11038:	b	10c30 <nl_cache_free@plt>
   1103c:	push	{r3, r4, r5, r6, r7, lr}
   11040:	mov	r7, r1
   11044:	mov	r6, r0
   11048:	bl	10c54 <nl_cli_class_alloc@plt>
   1104c:	movw	r4, #8520	; 0x2148
   11050:	movt	r4, #2
   11054:	mov	r1, r6
   11058:	mov	r5, r0
   1105c:	ldr	r0, [r4]
   11060:	bl	10bdc <nl_cli_class_alloc_cache@plt>
   11064:	mov	r1, r7
   11068:	mov	r6, r0
   1106c:	mov	r0, r5
   11070:	bl	10b7c <rtnl_tc_set_parent@plt>
   11074:	ldr	ip, [r4, #8]
   11078:	mov	r0, r6
   1107c:	mov	r1, r5
   11080:	mov	r3, #0
   11084:	movw	r2, #4424	; 0x1148
   11088:	movt	r2, #1
   1108c:	add	ip, ip, #4
   11090:	str	ip, [r4, #8]
   11094:	bl	10b64 <nl_cache_foreach_filter@plt>
   11098:	ldr	r3, [r4, #8]
   1109c:	mov	r0, r5
   110a0:	sub	r3, r3, #4
   110a4:	str	r3, [r4, #8]
   110a8:	bl	10c0c <rtnl_class_put@plt>
   110ac:	mov	r0, r6
   110b0:	pop	{r3, r4, r5, r6, r7, lr}
   110b4:	b	10c30 <nl_cache_free@plt>
   110b8:	push	{r3, r4, r5, lr}
   110bc:	mov	r4, r0
   110c0:	ldr	r1, [pc, #124]	; 11144 <exit@plt+0x478>
   110c4:	bl	10c78 <nl_object_dump@plt>
   110c8:	mov	r0, r4
   110cc:	bl	10c24 <rtnl_tc_get_ifindex@plt>
   110d0:	mov	r5, r0
   110d4:	mov	r0, r4
   110d8:	bl	10c00 <rtnl_tc_get_handle@plt>
   110dc:	mov	r1, r0
   110e0:	mov	r0, r5
   110e4:	bl	10ff0 <exit@plt+0x324>
   110e8:	mov	r0, r4
   110ec:	bl	10c6c <rtnl_tc_get_parent@plt>
   110f0:	cmn	r0, #1
   110f4:	mov	r5, r0
   110f8:	beq	11120 <exit@plt+0x454>
   110fc:	mov	r0, r4
   11100:	bl	10c24 <rtnl_tc_get_ifindex@plt>
   11104:	mov	r5, r0
   11108:	mov	r0, r4
   1110c:	bl	10c00 <rtnl_tc_get_handle@plt>
   11110:	mov	r1, r0
   11114:	mov	r0, r5
   11118:	pop	{r3, r4, r5, lr}
   1111c:	b	1103c <exit@plt+0x370>
   11120:	mov	r0, r4
   11124:	bl	10c24 <rtnl_tc_get_ifindex@plt>
   11128:	mov	r1, r5
   1112c:	bl	10ff0 <exit@plt+0x324>
   11130:	mov	r0, r4
   11134:	bl	10c24 <rtnl_tc_get_ifindex@plt>
   11138:	mov	r1, r5
   1113c:	bl	1103c <exit@plt+0x370>
   11140:	b	110fc <exit@plt+0x430>
   11144:	andeq	r2, r2, ip, asr #2
   11148:	push	{r4, r5, r6, r7, r8, lr}
   1114c:	movw	r4, #8520	; 0x2148
   11150:	movt	r4, #2
   11154:	mov	r5, r0
   11158:	add	r1, r4, #4
   1115c:	bl	10c78 <nl_object_dump@plt>
   11160:	mov	r0, r5
   11164:	bl	10c24 <rtnl_tc_get_ifindex@plt>
   11168:	mov	r6, r0
   1116c:	mov	r0, r5
   11170:	bl	10c00 <rtnl_tc_get_handle@plt>
   11174:	mov	r1, r0
   11178:	mov	r0, r6
   1117c:	bl	1103c <exit@plt+0x370>
   11180:	mov	r0, r5
   11184:	bl	10c24 <rtnl_tc_get_ifindex@plt>
   11188:	mov	r8, r0
   1118c:	mov	r0, r5
   11190:	bl	10c00 <rtnl_tc_get_handle@plt>
   11194:	mov	r7, r0
   11198:	bl	10be8 <nl_cli_qdisc_alloc@plt>
   1119c:	movw	r1, #4752	; 0x1290
   111a0:	movw	r2, #3060	; 0xbf4
   111a4:	movt	r1, #1
   111a8:	movt	r2, #1
   111ac:	mov	r5, r0
   111b0:	ldr	r0, [r4]
   111b4:	bl	10ba0 <nl_cli_alloc_cache@plt>
   111b8:	mov	r1, r8
   111bc:	mov	r6, r0
   111c0:	mov	r0, r5
   111c4:	bl	10b88 <rtnl_tc_set_ifindex@plt>
   111c8:	mov	r0, r5
   111cc:	mov	r1, r7
   111d0:	bl	10b7c <rtnl_tc_set_parent@plt>
   111d4:	ldr	ip, [r4, #8]
   111d8:	mov	r0, r6
   111dc:	mov	r1, r5
   111e0:	mov	r3, #0
   111e4:	movw	r2, #4280	; 0x10b8
   111e8:	movt	r2, #1
   111ec:	add	ip, ip, #4
   111f0:	str	ip, [r4, #8]
   111f4:	bl	10b64 <nl_cache_foreach_filter@plt>
   111f8:	ldr	r3, [r4, #8]
   111fc:	mov	r0, r5
   11200:	sub	r3, r3, #4
   11204:	str	r3, [r4, #8]
   11208:	bl	10c84 <rtnl_qdisc_put@plt>
   1120c:	mov	r0, r6
   11210:	pop	{r4, r5, r6, r7, r8, lr}
   11214:	b	10c30 <nl_cache_free@plt>
   11218:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1121c:	mov	r7, r0
   11220:	ldr	r6, [pc, #76]	; 11274 <exit@plt+0x5a8>
   11224:	mov	r8, r1
   11228:	ldr	r5, [pc, #72]	; 11278 <exit@plt+0x5ac>
   1122c:	mov	r9, r2
   11230:	add	r6, pc, r6
   11234:	bl	10b2c <abort@plt-0x20>
   11238:	add	r5, pc, r5
   1123c:	rsb	r6, r5, r6
   11240:	asrs	r6, r6, #2
   11244:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   11248:	sub	r5, r5, #4
   1124c:	mov	r4, #0
   11250:	add	r4, r4, #1
   11254:	ldr	r3, [r5, #4]!
   11258:	mov	r0, r7
   1125c:	mov	r1, r8
   11260:	mov	r2, r9
   11264:	blx	r3
   11268:	cmp	r4, r6
   1126c:	bne	11250 <exit@plt+0x584>
   11270:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11274:	andeq	r0, r1, r0, lsl #25
   11278:	andeq	r0, r1, r4, ror ip
   1127c:	bx	lr

Disassembly of section .fini:

00011280 <.fini>:
   11280:	push	{r3, lr}
   11284:	pop	{r3, pc}
