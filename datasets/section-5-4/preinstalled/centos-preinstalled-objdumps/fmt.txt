
centos-preinstalled/fmt:     file format elf32-littlearm


Disassembly of section .init:

00010f80 <.init>:
   10f80:	push	{r3, lr}
   10f84:	bl	11924 <__assert_fail@plt+0x6cc>
   10f88:	pop	{r3, pc}

Disassembly of section .plt:

00010f8c <fdopen@plt-0x14>:
   10f8c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f90:	ldr	lr, [pc, #4]	; 10f9c <fdopen@plt-0x4>
   10f94:	add	lr, pc, lr
   10f98:	ldr	pc, [lr, #8]!
   10f9c:	andeq	r7, r1, r4, rrx

00010fa0 <fdopen@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #94208	; 0x17000
   10fa8:	ldr	pc, [ip, #100]!	; 0x64

00010fac <calloc@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #94208	; 0x17000
   10fb4:	ldr	pc, [ip, #92]!	; 0x5c

00010fb8 <fputs_unlocked@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #94208	; 0x17000
   10fc0:	ldr	pc, [ip, #84]!	; 0x54

00010fc4 <raise@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #94208	; 0x17000
   10fcc:	ldr	pc, [ip, #76]!	; 0x4c

00010fd0 <strcmp@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #94208	; 0x17000
   10fd8:	ldr	pc, [ip, #68]!	; 0x44

00010fdc <posix_fadvise64@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #94208	; 0x17000
   10fe4:	ldr	pc, [ip, #60]!	; 0x3c

00010fe8 <fflush@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #94208	; 0x17000
   10ff0:	ldr	pc, [ip, #52]!	; 0x34

00010ff4 <__memmove_chk@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #94208	; 0x17000
   10ffc:	ldr	pc, [ip, #44]!	; 0x2c

00011000 <free@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #94208	; 0x17000
   11008:	ldr	pc, [ip, #36]!	; 0x24

0001100c <_exit@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #94208	; 0x17000
   11014:	ldr	pc, [ip, #28]!

00011018 <memcpy@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #94208	; 0x17000
   11020:	ldr	pc, [ip, #20]!

00011024 <mbsinit@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #94208	; 0x17000
   1102c:	ldr	pc, [ip, #12]!

00011030 <fwrite_unlocked@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #94208	; 0x17000
   11038:	ldr	pc, [ip, #4]!

0001103c <memcmp@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #4092]!	; 0xffc

00011048 <dcgettext@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #4084]!	; 0xff4

00011054 <__stack_chk_fail@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #4076]!	; 0xfec

00011060 <realloc@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #4068]!	; 0xfe4

0001106c <textdomain@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #4060]!	; 0xfdc

00011078 <iswprint@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #4052]!	; 0xfd4

00011084 <fwrite@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #4044]!	; 0xfcc

00011090 <lseek64@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #4036]!	; 0xfc4

0001109c <__ctype_get_mb_cur_max@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #4028]!	; 0xfbc

000110a8 <strcpy@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #4020]!	; 0xfb4

000110b4 <__fpending@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #4012]!	; 0xfac

000110c0 <mbrtowc@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #4004]!	; 0xfa4

000110cc <error@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #3996]!	; 0xf9c

000110d8 <open64@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #90112	; 0x16000
   110e0:	ldr	pc, [ip, #3988]!	; 0xf94

000110e4 <getenv@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #90112	; 0x16000
   110ec:	ldr	pc, [ip, #3980]!	; 0xf8c

000110f0 <malloc@plt>:
   110f0:	add	ip, pc, #0, 12
   110f4:	add	ip, ip, #90112	; 0x16000
   110f8:	ldr	pc, [ip, #3972]!	; 0xf84

000110fc <__libc_start_main@plt>:
   110fc:	add	ip, pc, #0, 12
   11100:	add	ip, ip, #90112	; 0x16000
   11104:	ldr	pc, [ip, #3964]!	; 0xf7c

00011108 <__freading@plt>:
   11108:	add	ip, pc, #0, 12
   1110c:	add	ip, ip, #90112	; 0x16000
   11110:	ldr	pc, [ip, #3956]!	; 0xf74

00011114 <__gmon_start__@plt>:
   11114:	add	ip, pc, #0, 12
   11118:	add	ip, ip, #90112	; 0x16000
   1111c:	ldr	pc, [ip, #3948]!	; 0xf6c

00011120 <getopt_long@plt>:
   11120:	add	ip, pc, #0, 12
   11124:	add	ip, ip, #90112	; 0x16000
   11128:	ldr	pc, [ip, #3940]!	; 0xf64

0001112c <__ctype_b_loc@plt>:
   1112c:	add	ip, pc, #0, 12
   11130:	add	ip, ip, #90112	; 0x16000
   11134:	ldr	pc, [ip, #3932]!	; 0xf5c

00011138 <exit@plt>:
   11138:	add	ip, pc, #0, 12
   1113c:	add	ip, ip, #90112	; 0x16000
   11140:	ldr	pc, [ip, #3924]!	; 0xf54

00011144 <strtoul@plt>:
   11144:	add	ip, pc, #0, 12
   11148:	add	ip, ip, #90112	; 0x16000
   1114c:	ldr	pc, [ip, #3916]!	; 0xf4c

00011150 <strlen@plt>:
   11150:	add	ip, pc, #0, 12
   11154:	add	ip, ip, #90112	; 0x16000
   11158:	ldr	pc, [ip, #3908]!	; 0xf44

0001115c <strchr@plt>:
   1115c:	add	ip, pc, #0, 12
   11160:	add	ip, ip, #90112	; 0x16000
   11164:	ldr	pc, [ip, #3900]!	; 0xf3c

00011168 <ungetc@plt>:
   11168:	add	ip, pc, #0, 12
   1116c:	add	ip, ip, #90112	; 0x16000
   11170:	ldr	pc, [ip, #3892]!	; 0xf34

00011174 <__errno_location@plt>:
   11174:	add	ip, pc, #0, 12
   11178:	add	ip, ip, #90112	; 0x16000
   1117c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011180 <__cxa_atexit@plt>:
   11180:	add	ip, pc, #0, 12
   11184:	add	ip, ip, #90112	; 0x16000
   11188:	ldr	pc, [ip, #3876]!	; 0xf24

0001118c <memset@plt>:
   1118c:	add	ip, pc, #0, 12
   11190:	add	ip, ip, #90112	; 0x16000
   11194:	ldr	pc, [ip, #3868]!	; 0xf1c

00011198 <fscanf@plt>:
   11198:	add	ip, pc, #0, 12
   1119c:	add	ip, ip, #90112	; 0x16000
   111a0:	ldr	pc, [ip, #3860]!	; 0xf14

000111a4 <__printf_chk@plt>:
   111a4:	add	ip, pc, #0, 12
   111a8:	add	ip, ip, #90112	; 0x16000
   111ac:	ldr	pc, [ip, #3852]!	; 0xf0c

000111b0 <fileno@plt>:
   111b0:	add	ip, pc, #0, 12
   111b4:	add	ip, ip, #90112	; 0x16000
   111b8:	ldr	pc, [ip, #3844]!	; 0xf04

000111bc <__fprintf_chk@plt>:
   111bc:	add	ip, pc, #0, 12
   111c0:	add	ip, ip, #90112	; 0x16000
   111c4:	ldr	pc, [ip, #3836]!	; 0xefc

000111c8 <fclose@plt>:
   111c8:	add	ip, pc, #0, 12
   111cc:	add	ip, ip, #90112	; 0x16000
   111d0:	ldr	pc, [ip, #3828]!	; 0xef4

000111d4 <fseeko64@plt>:
   111d4:	add	ip, pc, #0, 12
   111d8:	add	ip, ip, #90112	; 0x16000
   111dc:	ldr	pc, [ip, #3820]!	; 0xeec

000111e0 <__uflow@plt>:
   111e0:	add	ip, pc, #0, 12
   111e4:	add	ip, ip, #90112	; 0x16000
   111e8:	ldr	pc, [ip, #3812]!	; 0xee4

000111ec <__overflow@plt>:
   111ec:	add	ip, pc, #0, 12
   111f0:	add	ip, ip, #90112	; 0x16000
   111f4:	ldr	pc, [ip, #3804]!	; 0xedc

000111f8 <setlocale@plt>:
   111f8:	add	ip, pc, #0, 12
   111fc:	add	ip, ip, #90112	; 0x16000
   11200:	ldr	pc, [ip, #3796]!	; 0xed4

00011204 <strrchr@plt>:
   11204:	add	ip, pc, #0, 12
   11208:	add	ip, ip, #90112	; 0x16000
   1120c:	ldr	pc, [ip, #3788]!	; 0xecc

00011210 <nl_langinfo@plt>:
   11210:	add	ip, pc, #0, 12
   11214:	add	ip, ip, #90112	; 0x16000
   11218:	ldr	pc, [ip, #3780]!	; 0xec4

0001121c <fopen64@plt>:
   1121c:	add	ip, pc, #0, 12
   11220:	add	ip, ip, #90112	; 0x16000
   11224:	ldr	pc, [ip, #3772]!	; 0xebc

00011228 <bindtextdomain@plt>:
   11228:	add	ip, pc, #0, 12
   1122c:	add	ip, ip, #90112	; 0x16000
   11230:	ldr	pc, [ip, #3764]!	; 0xeb4

00011234 <strncmp@plt>:
   11234:	add	ip, pc, #0, 12
   11238:	add	ip, ip, #90112	; 0x16000
   1123c:	ldr	pc, [ip, #3756]!	; 0xeac

00011240 <abort@plt>:
   11240:	add	ip, pc, #0, 12
   11244:	add	ip, ip, #90112	; 0x16000
   11248:	ldr	pc, [ip, #3748]!	; 0xea4

0001124c <close@plt>:
   1124c:	add	ip, pc, #0, 12
   11250:	add	ip, ip, #90112	; 0x16000
   11254:	ldr	pc, [ip, #3740]!	; 0xe9c

00011258 <__assert_fail@plt>:
   11258:	add	ip, pc, #0, 12
   1125c:	add	ip, ip, #90112	; 0x16000
   11260:	ldr	pc, [ip, #3732]!	; 0xe94

Disassembly of section .text:

00011264 <close_stdout@@Base-0x1cf4>:
   11264:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11268:	sub	sp, sp, #44	; 0x2c
   1126c:	ldr	r6, [pc, #1484]	; 11840 <__assert_fail@plt+0x5e8>
   11270:	mov	r5, r0
   11274:	ldr	r3, [pc, #1480]	; 11844 <__assert_fail@plt+0x5ec>
   11278:	mov	r4, r1
   1127c:	add	r6, pc, r6
   11280:	ldr	r8, [pc, #1472]	; 11848 <__assert_fail@plt+0x5f0>
   11284:	ldr	r0, [r1]
   11288:	ldr	r3, [r6, r3]
   1128c:	add	r8, pc, r8
   11290:	ldr	r7, [pc, #1460]	; 1184c <__assert_fail@plt+0x5f4>
   11294:	ldr	r3, [r3]
   11298:	add	r7, pc, r7
   1129c:	str	r3, [sp, #36]	; 0x24
   112a0:	bl	13154 <close_stdout@@Base+0x1fc>
   112a4:	mov	r1, r8
   112a8:	mov	r0, #6
   112ac:	bl	111f8 <setlocale@plt>
   112b0:	ldr	r1, [pc, #1432]	; 11850 <__assert_fail@plt+0x5f8>
   112b4:	mov	r0, r7
   112b8:	add	r1, pc, r1
   112bc:	bl	11228 <bindtextdomain@plt>
   112c0:	mov	r0, r7
   112c4:	bl	1106c <textdomain@plt>
   112c8:	ldr	r3, [pc, #1412]	; 11854 <__assert_fail@plt+0x5fc>
   112cc:	mov	r7, #0
   112d0:	ldr	r0, [r6, r3]
   112d4:	bl	16200 <close_stdout@@Base+0x32a8>
   112d8:	ldr	r3, [pc, #1400]	; 11858 <__assert_fail@plt+0x600>
   112dc:	ldr	r0, [pc, #1400]	; 1185c <__assert_fail@plt+0x604>
   112e0:	cmp	r5, #1
   112e4:	ldr	r1, [pc, #1396]	; 11860 <__assert_fail@plt+0x608>
   112e8:	add	r3, pc, r3
   112ec:	add	r0, pc, r0
   112f0:	mov	r2, #75	; 0x4b
   112f4:	add	r1, pc, r1
   112f8:	str	r8, [r3, #3492]	; 0xda4
   112fc:	strb	r7, [r3, #3500]	; 0xdac
   11300:	strb	r7, [r3, #3502]	; 0xdae
   11304:	strb	r7, [r3, #3501]	; 0xdad
   11308:	str	r7, [r3, #3488]	; 0xda0
   1130c:	str	r7, [r3, #3480]	; 0xd98
   11310:	strb	r7, [r0, #328]	; 0x148
   11314:	str	r7, [r0, #336]	; 0x150
   11318:	str	r2, [r1, #4]
   1131c:	ble	11330 <__assert_fail@plt+0xd8>
   11320:	ldr	r3, [r4, #4]
   11324:	ldrb	r2, [r3]
   11328:	cmp	r2, #45	; 0x2d
   1132c:	beq	1155c <__assert_fail@plt+0x304>
   11330:	ldr	fp, [pc, #1324]	; 11864 <__assert_fail@plt+0x60c>
   11334:	mov	r8, #0
   11338:	ldr	sl, [pc, #1320]	; 11868 <__assert_fail@plt+0x610>
   1133c:	ldr	r2, [pc, #1320]	; 1186c <__assert_fail@plt+0x614>
   11340:	add	fp, pc, fp
   11344:	ldr	r3, [pc, #1316]	; 11870 <__assert_fail@plt+0x618>
   11348:	add	sl, pc, sl
   1134c:	add	r2, pc, r2
   11350:	str	r2, [sp, #16]
   11354:	add	r3, pc, r3
   11358:	ldr	r2, [pc, #1300]	; 11874 <__assert_fail@plt+0x61c>
   1135c:	str	r3, [sp, #20]
   11360:	ldr	r3, [pc, #1296]	; 11878 <__assert_fail@plt+0x620>
   11364:	add	r2, pc, r2
   11368:	str	r2, [sp, #28]
   1136c:	add	r3, pc, r3
   11370:	str	r3, [sp, #24]
   11374:	ldr	r2, [pc, #1280]	; 1187c <__assert_fail@plt+0x624>
   11378:	mov	r9, #0
   1137c:	ldr	r3, [pc, #1276]	; 11880 <__assert_fail@plt+0x628>
   11380:	mov	r0, r5
   11384:	str	r9, [sp]
   11388:	mov	r1, r4
   1138c:	add	r2, pc, r2
   11390:	add	r3, pc, r3
   11394:	bl	11120 <getopt_long@plt>
   11398:	cmn	r0, #1
   1139c:	beq	115ac <__assert_fail@plt+0x354>
   113a0:	cmp	r0, #112	; 0x70
   113a4:	beq	114c4 <__assert_fail@plt+0x26c>
   113a8:	bgt	113d8 <__assert_fail@plt+0x180>
   113ac:	cmn	r0, #2
   113b0:	beq	114bc <__assert_fail@plt+0x264>
   113b4:	ble	11448 <__assert_fail@plt+0x1f0>
   113b8:	cmp	r0, #99	; 0x63
   113bc:	beq	11418 <__assert_fail@plt+0x1c0>
   113c0:	cmp	r0, #103	; 0x67
   113c4:	bne	114a4 <__assert_fail@plt+0x24c>
   113c8:	ldr	r3, [pc, #1204]	; 11884 <__assert_fail@plt+0x62c>
   113cc:	ldr	r3, [r6, r3]
   113d0:	ldr	r8, [r3]
   113d4:	b	11374 <__assert_fail@plt+0x11c>
   113d8:	cmp	r0, #116	; 0x74
   113dc:	beq	11494 <__assert_fail@plt+0x23c>
   113e0:	ble	1142c <__assert_fail@plt+0x1d4>
   113e4:	cmp	r0, #117	; 0x75
   113e8:	beq	11404 <__assert_fail@plt+0x1ac>
   113ec:	cmp	r0, #119	; 0x77
   113f0:	bne	114a4 <__assert_fail@plt+0x24c>
   113f4:	ldr	r3, [pc, #1160]	; 11884 <__assert_fail@plt+0x62c>
   113f8:	ldr	r3, [r6, r3]
   113fc:	ldr	r7, [r3]
   11400:	b	11374 <__assert_fail@plt+0x11c>
   11404:	ldr	r3, [pc, #1148]	; 11888 <__assert_fail@plt+0x630>
   11408:	mov	r2, #1
   1140c:	add	r3, pc, r3
   11410:	strb	r2, [r3, #328]	; 0x148
   11414:	b	11374 <__assert_fail@plt+0x11c>
   11418:	ldr	r3, [pc, #1132]	; 1188c <__assert_fail@plt+0x634>
   1141c:	mov	r2, #1
   11420:	add	r3, pc, r3
   11424:	strb	r2, [r3, #3501]	; 0xdad
   11428:	b	11374 <__assert_fail@plt+0x11c>
   1142c:	cmp	r0, #115	; 0x73
   11430:	bne	114a4 <__assert_fail@plt+0x24c>
   11434:	ldr	r3, [pc, #1108]	; 11890 <__assert_fail@plt+0x638>
   11438:	mov	r2, #1
   1143c:	add	r3, pc, r3
   11440:	strb	r2, [r3, #3500]	; 0xdac
   11444:	b	11374 <__assert_fail@plt+0x11c>
   11448:	cmn	r0, #3
   1144c:	mov	r3, r0
   11450:	bne	114a8 <__assert_fail@plt+0x250>
   11454:	ldr	r1, [pc, #1080]	; 11894 <__assert_fail@plt+0x63c>
   11458:	ldr	r3, [pc, #1080]	; 11898 <__assert_fail@plt+0x640>
   1145c:	ldr	r2, [pc, #1080]	; 1189c <__assert_fail@plt+0x644>
   11460:	ldr	r0, [r6, r1]
   11464:	ldr	r3, [r6, r3]
   11468:	add	r2, pc, r2
   1146c:	ldr	r1, [pc, #1068]	; 118a0 <__assert_fail@plt+0x648>
   11470:	ldr	r0, [r0]
   11474:	ldr	r3, [r3]
   11478:	add	r1, pc, r1
   1147c:	stm	sp, {r2, r9}
   11480:	ldr	r2, [pc, #1052]	; 118a4 <__assert_fail@plt+0x64c>
   11484:	add	r2, pc, r2
   11488:	bl	14e40 <close_stdout@@Base+0x1ee8>
   1148c:	mov	r0, r9
   11490:	bl	11138 <exit@plt>
   11494:	ldr	r2, [sp, #24]
   11498:	mov	r3, #1
   1149c:	strb	r3, [r2, #3502]	; 0xdae
   114a0:	b	11374 <__assert_fail@plt+0x11c>
   114a4:	mov	r3, r0
   114a8:	sub	r2, r3, #48	; 0x30
   114ac:	cmp	r2, #9
   114b0:	bls	1157c <__assert_fail@plt+0x324>
   114b4:	mov	r0, #1
   114b8:	bl	12cd4 <__assert_fail@plt+0x1a7c>
   114bc:	mov	r0, r9
   114c0:	bl	12cd4 <__assert_fail@plt+0x1a7c>
   114c4:	ldr	r3, [pc, #952]	; 11884 <__assert_fail@plt+0x62c>
   114c8:	ldr	r3, [r6, r3]
   114cc:	str	r9, [fp, #3488]	; 0xda0
   114d0:	ldr	r9, [r3]
   114d4:	ldrb	r3, [r9]
   114d8:	cmp	r3, #32
   114dc:	bne	11508 <__assert_fail@plt+0x2b0>
   114e0:	add	r3, r9, #1
   114e4:	ldrb	r1, [r3]
   114e8:	mov	r2, r3
   114ec:	rsb	r0, r9, r3
   114f0:	add	r3, r3, #1
   114f4:	cmp	r1, #32
   114f8:	beq	114e4 <__assert_fail@plt+0x28c>
   114fc:	ldr	r3, [sp, #28]
   11500:	mov	r9, r2
   11504:	str	r0, [r3, #3488]	; 0xda0
   11508:	mov	r0, r9
   1150c:	str	r9, [sl, #3492]	; 0xda4
   11510:	bl	11150 <strlen@plt>
   11514:	ldr	r2, [sp, #16]
   11518:	add	r3, r9, r0
   1151c:	str	r0, [r2, #336]	; 0x150
   11520:	cmp	r3, r9
   11524:	bhi	11538 <__assert_fail@plt+0x2e0>
   11528:	b	11544 <__assert_fail@plt+0x2ec>
   1152c:	sub	r3, r3, #1
   11530:	cmp	r3, r9
   11534:	beq	11544 <__assert_fail@plt+0x2ec>
   11538:	ldrb	r2, [r3, #-1]
   1153c:	cmp	r2, #32
   11540:	beq	1152c <__assert_fail@plt+0x2d4>
   11544:	ldr	r2, [sp, #20]
   11548:	rsb	r9, r9, r3
   1154c:	str	r9, [r2, #3480]	; 0xd98
   11550:	mov	r2, #0
   11554:	strb	r2, [r3]
   11558:	b	11374 <__assert_fail@plt+0x11c>
   1155c:	ldrb	r2, [r3, #1]
   11560:	sub	r2, r2, #48	; 0x30
   11564:	cmp	r2, #9
   11568:	addls	r7, r3, #1
   1156c:	subls	r5, r5, #1
   11570:	ldrls	r2, [r4]
   11574:	strls	r2, [r4, #4]!
   11578:	b	11330 <__assert_fail@plt+0xd8>
   1157c:	ldr	r1, [pc, #804]	; 118a8 <__assert_fail@plt+0x650>
   11580:	mov	r2, #5
   11584:	mov	r0, #0
   11588:	str	r3, [sp, #12]
   1158c:	add	r1, pc, r1
   11590:	bl	11048 <dcgettext@plt>
   11594:	ldr	r3, [sp, #12]
   11598:	mov	r2, r0
   1159c:	mov	r0, #0
   115a0:	mov	r1, r0
   115a4:	bl	110cc <error@plt>
   115a8:	b	114b4 <__assert_fail@plt+0x25c>
   115ac:	cmp	r7, r9
   115b0:	beq	11630 <__assert_fail@plt+0x3d8>
   115b4:	ldr	lr, [pc, #752]	; 118ac <__assert_fail@plt+0x654>
   115b8:	mov	r1, r9
   115bc:	mov	r0, r7
   115c0:	mov	r2, #10
   115c4:	add	lr, pc, lr
   115c8:	add	r3, sp, #32
   115cc:	str	lr, [sp]
   115d0:	bl	151bc <close_stdout@@Base+0x2264>
   115d4:	cmp	r0, r9
   115d8:	bne	115ec <__assert_fail@plt+0x394>
   115dc:	ldr	r3, [sp, #32]
   115e0:	movw	r2, #2500	; 0x9c4
   115e4:	cmp	r3, r2
   115e8:	bls	11624 <__assert_fail@plt+0x3cc>
   115ec:	ldr	r1, [pc, #700]	; 118b0 <__assert_fail@plt+0x658>
   115f0:	mov	r2, #5
   115f4:	mov	r0, #0
   115f8:	add	r1, pc, r1
   115fc:	bl	11048 <dcgettext@plt>
   11600:	mov	r9, r0
   11604:	mov	r0, r7
   11608:	bl	149a4 <close_stdout@@Base+0x1a4c>
   1160c:	mov	r2, r9
   11610:	mov	r1, #0
   11614:	mov	r3, r0
   11618:	mov	r0, #1
   1161c:	bl	110cc <error@plt>
   11620:	ldr	r3, [sp, #32]
   11624:	ldr	r2, [pc, #648]	; 118b4 <__assert_fail@plt+0x65c>
   11628:	add	r2, pc, r2
   1162c:	str	r3, [r2, #4]
   11630:	cmp	r8, #0
   11634:	beq	11800 <__assert_fail@plt+0x5a8>
   11638:	ldr	ip, [pc, #632]	; 118b8 <__assert_fail@plt+0x660>
   1163c:	mov	r0, r8
   11640:	mov	r1, #0
   11644:	mov	r2, #10
   11648:	add	ip, pc, ip
   1164c:	add	r3, sp, #32
   11650:	str	ip, [sp]
   11654:	bl	151bc <close_stdout@@Base+0x2264>
   11658:	cmp	r0, #0
   1165c:	bne	11678 <__assert_fail@plt+0x420>
   11660:	ldr	r2, [pc, #596]	; 118bc <__assert_fail@plt+0x664>
   11664:	ldr	r3, [sp, #32]
   11668:	add	r2, pc, r2
   1166c:	ldr	r2, [r2, #4]
   11670:	cmp	r2, r3
   11674:	bcs	116b0 <__assert_fail@plt+0x458>
   11678:	ldr	r1, [pc, #576]	; 118c0 <__assert_fail@plt+0x668>
   1167c:	mov	r2, #5
   11680:	mov	r0, #0
   11684:	add	r1, pc, r1
   11688:	bl	11048 <dcgettext@plt>
   1168c:	mov	r9, r0
   11690:	mov	r0, r8
   11694:	bl	149a4 <close_stdout@@Base+0x1a4c>
   11698:	mov	r2, r9
   1169c:	mov	r1, #0
   116a0:	mov	r3, r0
   116a4:	mov	r0, #1
   116a8:	bl	110cc <error@plt>
   116ac:	ldr	r3, [sp, #32]
   116b0:	ldr	r2, [pc, #524]	; 118c4 <__assert_fail@plt+0x66c>
   116b4:	cmp	r7, #0
   116b8:	add	r2, pc, r2
   116bc:	str	r3, [r2, #3464]	; 0xd88
   116c0:	beq	1182c <__assert_fail@plt+0x5d4>
   116c4:	ldr	r3, [pc, #508]	; 118c8 <__assert_fail@plt+0x670>
   116c8:	ldr	r8, [r6, r3]
   116cc:	ldr	r3, [r8]
   116d0:	cmp	r3, r5
   116d4:	beq	117e8 <__assert_fail@plt+0x590>
   116d8:	bge	117f8 <__assert_fail@plt+0x5a0>
   116dc:	ldr	r2, [pc, #488]	; 118cc <__assert_fail@plt+0x674>
   116e0:	mov	sl, #1
   116e4:	ldr	r9, [pc, #484]	; 118d0 <__assert_fail@plt+0x678>
   116e8:	add	r2, pc, r2
   116ec:	str	r2, [sp, #16]
   116f0:	ldr	r2, [pc, #476]	; 118d4 <__assert_fail@plt+0x67c>
   116f4:	add	r9, pc, r9
   116f8:	add	r2, pc, r2
   116fc:	str	r2, [sp, #20]
   11700:	b	11734 <__assert_fail@plt+0x4dc>
   11704:	ldrb	r3, [r7, #1]
   11708:	cmp	r3, #0
   1170c:	bne	11744 <__assert_fail@plt+0x4ec>
   11710:	ldr	r3, [pc, #448]	; 118d8 <__assert_fail@plt+0x680>
   11714:	ldr	r3, [r6, r3]
   11718:	ldr	r0, [r3]
   1171c:	bl	12658 <__assert_fail@plt+0x1400>
   11720:	ldr	r3, [r8]
   11724:	add	r3, r3, #1
   11728:	str	r3, [r8]
   1172c:	cmp	r5, r3
   11730:	ble	1178c <__assert_fail@plt+0x534>
   11734:	ldr	r7, [r4, r3, lsl #2]
   11738:	ldrb	r3, [r7]
   1173c:	cmp	r3, #45	; 0x2d
   11740:	beq	11704 <__assert_fail@plt+0x4ac>
   11744:	mov	r0, r7
   11748:	mov	r1, r9
   1174c:	bl	1121c <fopen64@plt>
   11750:	subs	fp, r0, #0
   11754:	beq	1179c <__assert_fail@plt+0x544>
   11758:	bl	12658 <__assert_fail@plt+0x1400>
   1175c:	mov	r0, fp
   11760:	bl	156f4 <close_stdout@@Base+0x279c>
   11764:	cmn	r0, #1
   11768:	bne	11720 <__assert_fail@plt+0x4c8>
   1176c:	bl	11174 <__errno_location@plt>
   11770:	mov	r3, r7
   11774:	ldr	r2, [sp, #20]
   11778:	mov	sl, #0
   1177c:	ldr	r1, [r0]
   11780:	mov	r0, #0
   11784:	bl	110cc <error@plt>
   11788:	b	11720 <__assert_fail@plt+0x4c8>
   1178c:	cmp	sl, #0
   11790:	bne	117f8 <__assert_fail@plt+0x5a0>
   11794:	mov	r0, #1
   11798:	bl	11138 <exit@plt>
   1179c:	bl	11174 <__errno_location@plt>
   117a0:	ldr	r1, [sp, #16]
   117a4:	mov	r2, #5
   117a8:	mov	sl, fp
   117ac:	ldr	ip, [r0]
   117b0:	mov	r0, fp
   117b4:	str	ip, [sp, #8]
   117b8:	bl	11048 <dcgettext@plt>
   117bc:	mov	r2, r0
   117c0:	mov	r0, r7
   117c4:	str	r2, [sp, #12]
   117c8:	bl	149a4 <close_stdout@@Base+0x1a4c>
   117cc:	ldr	ip, [sp, #8]
   117d0:	ldr	r2, [sp, #12]
   117d4:	mov	r1, ip
   117d8:	mov	r3, r0
   117dc:	mov	r0, fp
   117e0:	bl	110cc <error@plt>
   117e4:	b	11720 <__assert_fail@plt+0x4c8>
   117e8:	ldr	r3, [pc, #232]	; 118d8 <__assert_fail@plt+0x680>
   117ec:	ldr	r3, [r6, r3]
   117f0:	ldr	r0, [r3]
   117f4:	bl	12658 <__assert_fail@plt+0x1400>
   117f8:	mov	r0, #0
   117fc:	b	11798 <__assert_fail@plt+0x540>
   11800:	ldr	r3, [pc, #212]	; 118dc <__assert_fail@plt+0x684>
   11804:	mov	r0, #187	; 0xbb
   11808:	mov	r1, #200	; 0xc8
   1180c:	ldr	r7, [pc, #204]	; 118e0 <__assert_fail@plt+0x688>
   11810:	add	r3, pc, r3
   11814:	add	r7, pc, r7
   11818:	ldr	r3, [r3, #4]
   1181c:	mul	r0, r0, r3
   11820:	bl	15f48 <close_stdout@@Base+0x2ff0>
   11824:	str	r0, [r7, #3464]	; 0xd88
   11828:	b	116c4 <__assert_fail@plt+0x46c>
   1182c:	ldr	r2, [pc, #176]	; 118e4 <__assert_fail@plt+0x68c>
   11830:	add	r3, r3, #10
   11834:	add	r2, pc, r2
   11838:	str	r3, [r2, #4]
   1183c:	b	116c4 <__assert_fail@plt+0x46c>
   11840:	andeq	r6, r1, ip, ror sp
   11844:	strdeq	r0, [r0], -ip
   11848:	ldrdeq	r5, [r0], -r0
   1184c:	andeq	r5, r0, r4, lsl #8
   11850:	andeq	r5, r0, r8, lsr #9
   11854:	andeq	r0, r0, ip, lsl #2
   11858:	andeq	ip, r1, r0, lsl #29
   1185c:	andeq	lr, r1, r4, ror lr
   11860:	andeq	r6, r1, ip, lsl #29
   11864:	andeq	ip, r1, r8, lsr #28
   11868:	andeq	ip, r1, r0, lsr #28
   1186c:	andeq	lr, r1, r4, lsl lr
   11870:	andeq	ip, r1, r4, lsl lr
   11874:	andeq	ip, r1, r4, lsl #28
   11878:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   1187c:	andeq	r5, r0, ip, asr r4
   11880:	andeq	r6, r1, ip, lsr #21
   11884:	andeq	r0, r0, r4, lsr r1
   11888:	andeq	lr, r1, r4, asr sp
   1188c:	andeq	ip, r1, r8, asr #26
   11890:	andeq	ip, r1, ip, lsr #26
   11894:	andeq	r0, r0, ip, lsl r1
   11898:	andeq	r0, r0, r4, lsl #2
   1189c:	andeq	r5, r0, r0, ror r3
   118a0:	andeq	r5, r0, ip, asr r3
   118a4:	andeq	r5, r0, r4, lsl r2
   118a8:	andeq	r5, r0, r8, ror #3
   118ac:	muleq	r0, r8, r1
   118b0:	andeq	r5, r0, r8, lsl #4
   118b4:	andeq	r6, r1, r8, asr fp
   118b8:	andeq	r5, r0, r4, lsl r1
   118bc:	andeq	r6, r1, r8, lsl fp
   118c0:	andeq	r5, r0, ip, ror r1
   118c4:			; <UNDEFINED> instruction: 0x0001cab0
   118c8:	andeq	r0, r0, r0, lsl #2
   118cc:	andeq	r5, r0, r0, lsr r1
   118d0:	andeq	r5, r0, r0, lsr #2
   118d4:			; <UNDEFINED> instruction: 0x000051bc
   118d8:	andeq	r0, r0, r8, lsl r1
   118dc:	andeq	r6, r1, r0, ror r9
   118e0:	andeq	ip, r1, r4, asr r9
   118e4:	andeq	r6, r1, ip, asr #18
   118e8:	mov	fp, #0
   118ec:	mov	lr, #0
   118f0:	pop	{r1}		; (ldr r1, [sp], #4)
   118f4:	mov	r2, sp
   118f8:	push	{r2}		; (str r2, [sp, #-4]!)
   118fc:	push	{r0}		; (str r0, [sp, #-4]!)
   11900:	ldr	ip, [pc, #16]	; 11918 <__assert_fail@plt+0x6c0>
   11904:	push	{ip}		; (str ip, [sp, #-4]!)
   11908:	ldr	r0, [pc, #12]	; 1191c <__assert_fail@plt+0x6c4>
   1190c:	ldr	r3, [pc, #12]	; 11920 <__assert_fail@plt+0x6c8>
   11910:	bl	110fc <__libc_start_main@plt>
   11914:	bl	11240 <abort@plt>
   11918:	strdeq	r6, [r1], -ip
   1191c:	andeq	r1, r1, r4, ror #4
   11920:	muleq	r1, r8, r1
   11924:	ldr	r3, [pc, #20]	; 11940 <__assert_fail@plt+0x6e8>
   11928:	ldr	r2, [pc, #20]	; 11944 <__assert_fail@plt+0x6ec>
   1192c:	add	r3, pc, r3
   11930:	ldr	r2, [r3, r2]
   11934:	cmp	r2, #0
   11938:	bxeq	lr
   1193c:	b	11114 <__gmon_start__@plt>
   11940:	andeq	r6, r1, ip, asr #13
   11944:	andeq	r0, r0, r0, lsl r1
   11948:	push	{r3, lr}
   1194c:	movw	r0, #33156	; 0x8184
   11950:	ldr	r3, [pc, #36]	; 1197c <__assert_fail@plt+0x724>
   11954:	movt	r0, #2
   11958:	rsb	r3, r0, r3
   1195c:	cmp	r3, #6
   11960:	popls	{r3, pc}
   11964:	movw	r3, #0
   11968:	movt	r3, #0
   1196c:	cmp	r3, #0
   11970:	popeq	{r3, pc}
   11974:	blx	r3
   11978:	pop	{r3, pc}
   1197c:	andeq	r8, r2, r7, lsl #3
   11980:	push	{r3, lr}
   11984:	movw	r0, #33156	; 0x8184
   11988:	movw	r3, #33156	; 0x8184
   1198c:	movt	r0, #2
   11990:	movt	r3, #2
   11994:	rsb	r3, r0, r3
   11998:	asr	r3, r3, #2
   1199c:	add	r3, r3, r3, lsr #31
   119a0:	asrs	r1, r3, #1
   119a4:	popeq	{r3, pc}
   119a8:	movw	r2, #0
   119ac:	movt	r2, #0
   119b0:	cmp	r2, #0
   119b4:	popeq	{r3, pc}
   119b8:	blx	r2
   119bc:	pop	{r3, pc}
   119c0:	push	{r4, lr}
   119c4:	movw	r4, #33156	; 0x8184
   119c8:	movt	r4, #2
   119cc:	ldrb	r3, [r4]
   119d0:	cmp	r3, #0
   119d4:	popne	{r4, pc}
   119d8:	bl	11948 <__assert_fail@plt+0x6f0>
   119dc:	mov	r3, #1
   119e0:	strb	r3, [r4]
   119e4:	pop	{r4, pc}
   119e8:	movw	r0, #32320	; 0x7e40
   119ec:	movt	r0, #2
   119f0:	push	{r3, lr}
   119f4:	ldr	r3, [r0]
   119f8:	cmp	r3, #0
   119fc:	beq	11a14 <__assert_fail@plt+0x7bc>
   11a00:	movw	r3, #0
   11a04:	movt	r3, #0
   11a08:	cmp	r3, #0
   11a0c:	beq	11a14 <__assert_fail@plt+0x7bc>
   11a10:	blx	r3
   11a14:	pop	{r3, lr}
   11a18:	b	11980 <__assert_fail@plt+0x728>
   11a1c:	ldr	r3, [pc, #564]	; 11c58 <__assert_fail@plt+0xa00>
   11a20:	mov	r1, #0
   11a24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11a28:	add	r3, pc, r3
   11a2c:	add	r2, r3, #8
   11a30:	sub	sp, sp, #60	; 0x3c
   11a34:	ldm	r3, {r4, r8}
   11a38:	sub	fp, r4, #28
   11a3c:	str	fp, [sp, #44]	; 0x2c
   11a40:	ldr	ip, [r4, #4]
   11a44:	cmp	fp, r2
   11a48:	str	r1, [r4, #20]
   11a4c:	str	r8, [r4, #4]
   11a50:	str	ip, [sp, #52]	; 0x34
   11a54:	bcc	11bf4 <__assert_fail@plt+0x99c>
   11a58:	ldr	r1, [pc, #508]	; 11c5c <__assert_fail@plt+0xa04>
   11a5c:	add	r3, r3, #36	; 0x24
   11a60:	ldr	r5, [sp, #44]	; 0x2c
   11a64:	mov	r7, r2
   11a68:	add	r1, pc, r1
   11a6c:	str	r3, [sp, #48]	; 0x30
   11a70:	sub	r3, r4, #56	; 0x38
   11a74:	str	r3, [sp, #12]
   11a78:	ldr	fp, [r1, #3456]	; 0xd80
   11a7c:	mov	r9, #100	; 0x64
   11a80:	ldr	ip, [r1, #3460]	; 0xd84
   11a84:	ldr	r3, [r1, #3468]	; 0xd8c
   11a88:	ldr	sl, [r1, #3464]	; 0xd88
   11a8c:	str	r2, [sp, #24]
   11a90:	str	r2, [sp, #36]	; 0x24
   11a94:	str	fp, [sp, #28]
   11a98:	str	r2, [sp, #40]	; 0x28
   11a9c:	str	ip, [sp, #32]
   11aa0:	str	r3, [sp, #16]
   11aa4:	ldr	r2, [sp, #12]
   11aa8:	mvn	r6, #-2147483648	; 0x80000000
   11aac:	ldr	fp, [sp, #24]
   11ab0:	ldr	r3, [sp, #28]
   11ab4:	ldr	r2, [r2, #32]
   11ab8:	cmp	r5, fp
   11abc:	ldr	r1, [sp, #12]
   11ac0:	str	r2, [sp, #20]
   11ac4:	ldr	ip, [sp, #20]
   11ac8:	ldr	r2, [sp, #32]
   11acc:	moveq	r2, r3
   11ad0:	mov	r3, r5
   11ad4:	add	r2, r2, ip
   11ad8:	b	11b10 <__assert_fail@plt+0x8b8>
   11adc:	cmp	r0, r6
   11ae0:	strlt	r3, [r5, #24]
   11ae4:	strlt	r2, [r5, #16]
   11ae8:	movlt	r6, r0
   11aec:	cmp	r4, r3
   11af0:	beq	11b74 <__assert_fail@plt+0x91c>
   11af4:	ldr	ip, [r1, #36]	; 0x24
   11af8:	add	r1, r1, #28
   11afc:	ldr	r0, [r3, #4]
   11b00:	add	r0, ip, r0
   11b04:	add	r2, r2, r0
   11b08:	cmp	r8, r2
   11b0c:	ble	11b74 <__assert_fail@plt+0x91c>
   11b10:	add	r3, r3, #28
   11b14:	cmp	r4, r3
   11b18:	moveq	r0, #0
   11b1c:	beq	11b48 <__assert_fail@plt+0x8f0>
   11b20:	ldr	ip, [r3, #24]
   11b24:	rsb	r0, r2, sl
   11b28:	cmp	r4, ip
   11b2c:	mul	r0, r0, r0
   11b30:	ldrne	ip, [r3, #16]
   11b34:	movne	fp, #50	; 0x32
   11b38:	rsbne	ip, ip, r2
   11b3c:	mulne	ip, ip, ip
   11b40:	mul	r0, r9, r0
   11b44:	mlane	r0, fp, ip, r0
   11b48:	ldr	ip, [r3, #20]
   11b4c:	cmp	r5, r7
   11b50:	add	r0, r0, ip
   11b54:	bne	11adc <__assert_fail@plt+0x884>
   11b58:	ldr	ip, [sp, #16]
   11b5c:	cmp	ip, #0
   11b60:	rsbgt	fp, ip, r2
   11b64:	mulgt	ip, fp, fp
   11b68:	movgt	fp, #50	; 0x32
   11b6c:	mlagt	r0, fp, ip, r0
   11b70:	b	11adc <__assert_fail@plt+0x884>
   11b74:	ldr	ip, [sp, #36]	; 0x24
   11b78:	cmp	r5, ip
   11b7c:	bls	11c28 <__assert_fail@plt+0x9d0>
   11b80:	ldrb	r3, [r5, #-16]
   11b84:	tst	r3, #2
   11b88:	beq	11c04 <__assert_fail@plt+0x9ac>
   11b8c:	tst	r3, #8
   11b90:	movw	r3, #37220	; 0x9164
   11b94:	movt	r3, #5
   11b98:	movne	r3, #2400	; 0x960
   11b9c:	ldrb	r2, [r5, #12]
   11ba0:	tst	r2, #1
   11ba4:	subne	r3, r3, #1600	; 0x640
   11ba8:	bne	11bd0 <__assert_fail@plt+0x978>
   11bac:	tst	r2, #8
   11bb0:	beq	11bd0 <__assert_fail@plt+0x978>
   11bb4:	ldr	ip, [sp, #20]
   11bb8:	movw	r0, #22500	; 0x57e4
   11bbc:	str	r3, [sp, #8]
   11bc0:	add	r1, ip, #2
   11bc4:	bl	15f48 <close_stdout@@Base+0x2ff0>
   11bc8:	ldr	r3, [sp, #8]
   11bcc:	add	r3, r3, r0
   11bd0:	add	r6, r6, r3
   11bd4:	ldr	r3, [sp, #40]	; 0x28
   11bd8:	str	r6, [r5, #20]
   11bdc:	sub	r5, r5, #28
   11be0:	ldr	r2, [sp, #12]
   11be4:	cmp	r5, r3
   11be8:	sub	r2, r2, #28
   11bec:	str	r2, [sp, #12]
   11bf0:	bcs	11aa4 <__assert_fail@plt+0x84c>
   11bf4:	ldr	r2, [sp, #52]	; 0x34
   11bf8:	str	r2, [r4, #4]
   11bfc:	add	sp, sp, #60	; 0x3c
   11c00:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c04:	tst	r3, #4
   11c08:	movwne	r3, #3300	; 0xce4
   11c0c:	bne	11b9c <__assert_fail@plt+0x944>
   11c10:	ldr	r2, [sp, #48]	; 0x30
   11c14:	cmp	r5, r2
   11c18:	bls	11c28 <__assert_fail@plt+0x9d0>
   11c1c:	ldrb	r3, [r5, #-44]	; 0xffffffd4
   11c20:	tst	r3, #8
   11c24:	bne	11c30 <__assert_fail@plt+0x9d8>
   11c28:	movw	r3, #4900	; 0x1324
   11c2c:	b	11b9c <__assert_fail@plt+0x944>
   11c30:	ldr	fp, [sp, #44]	; 0x2c
   11c34:	rsb	r3, r4, r5
   11c38:	movw	r0, #40000	; 0x9c40
   11c3c:	add	r3, fp, r3
   11c40:	ldr	r1, [r3, #4]
   11c44:	add	r1, r1, #2
   11c48:	bl	15f48 <close_stdout@@Base+0x2ff0>
   11c4c:	add	r3, r0, #4864	; 0x1300
   11c50:	add	r3, r3, #36	; 0x24
   11c54:	b	11b9c <__assert_fail@plt+0x944>
   11c58:	andeq	r6, r1, r8, asr r7
   11c5c:	andeq	ip, r1, r0, lsl #14
   11c60:	push	{r3, r4, r5, r6, r7, lr}
   11c64:	mov	r4, r0
   11c68:	ldr	r5, [pc, #124]	; 11cec <__assert_fail@plt+0xa94>
   11c6c:	mov	r0, r1
   11c70:	ldr	r6, [pc, #120]	; 11cf0 <__assert_fail@plt+0xa98>
   11c74:	mov	r7, #1
   11c78:	add	r5, pc, r5
   11c7c:	add	r6, pc, r6
   11c80:	b	11cc8 <__assert_fail@plt+0xa70>
   11c84:	cmp	r0, #9
   11c88:	popne	{r3, r4, r5, r6, r7, pc}
   11c8c:	ldr	r3, [r5, #3472]	; 0xd90
   11c90:	strb	r7, [r5, #3476]	; 0xd94
   11c94:	add	r2, r3, #7
   11c98:	cmp	r3, #0
   11c9c:	movlt	r3, r2
   11ca0:	bic	r3, r3, #7
   11ca4:	add	r3, r3, #8
   11ca8:	str	r3, [r5, #3472]	; 0xd90
   11cac:	ldr	r3, [r4, #4]
   11cb0:	ldr	r2, [r4, #8]
   11cb4:	add	r1, r3, #1
   11cb8:	cmp	r3, r2
   11cbc:	strcc	r1, [r4, #4]
   11cc0:	ldrbcc	r0, [r3]
   11cc4:	bcs	11ce0 <__assert_fail@plt+0xa88>
   11cc8:	cmp	r0, #32
   11ccc:	bne	11c84 <__assert_fail@plt+0xa2c>
   11cd0:	ldr	r3, [r6, #3472]	; 0xd90
   11cd4:	add	r3, r3, #1
   11cd8:	str	r3, [r6, #3472]	; 0xd90
   11cdc:	b	11cac <__assert_fail@plt+0xa54>
   11ce0:	mov	r0, r4
   11ce4:	bl	111e0 <__uflow@plt>
   11ce8:	b	11cc8 <__assert_fail@plt+0xa70>
   11cec:	strdeq	ip, [r1], -r0
   11cf0:	andeq	ip, r1, ip, ror #9
   11cf4:	push	{r3, r4, r5, r6, r7, lr}
   11cf8:	mov	ip, #0
   11cfc:	ldr	r1, [pc, #244]	; 11df8 <__assert_fail@plt+0xba0>
   11d00:	mov	r4, r0
   11d04:	ldr	r3, [r0, #4]
   11d08:	ldr	r2, [r0, #8]
   11d0c:	add	r1, pc, r1
   11d10:	cmp	r3, r2
   11d14:	str	ip, [r1, #3472]	; 0xd90
   11d18:	bcs	11dec <__assert_fail@plt+0xb94>
   11d1c:	add	r2, r3, #1
   11d20:	str	r2, [r0, #4]
   11d24:	ldrb	r1, [r3]
   11d28:	mov	r0, r4
   11d2c:	ldr	r6, [pc, #200]	; 11dfc <__assert_fail@plt+0xba4>
   11d30:	bl	11c60 <__assert_fail@plt+0xa08>
   11d34:	add	r6, pc, r6
   11d38:	ldr	r3, [r6, #3480]	; 0xd98
   11d3c:	cmp	r3, #0
   11d40:	mov	r1, r0
   11d44:	bne	11d64 <__assert_fail@plt+0xb0c>
   11d48:	ldr	r2, [r6, #3488]	; 0xda0
   11d4c:	ldr	r3, [r6, #3472]	; 0xd90
   11d50:	cmp	r2, r3
   11d54:	strle	r2, [r6, #3484]	; 0xd9c
   11d58:	strgt	r3, [r6, #3484]	; 0xd9c
   11d5c:	mov	r0, r1
   11d60:	pop	{r3, r4, r5, r6, r7, pc}
   11d64:	ldr	r5, [r6, #3492]	; 0xda4
   11d68:	ldr	r2, [r6, #3472]	; 0xd90
   11d6c:	ldrb	r3, [r5]
   11d70:	str	r2, [r6, #3484]	; 0xd9c
   11d74:	cmp	r3, #0
   11d78:	beq	11dd0 <__assert_fail@plt+0xb78>
   11d7c:	cmp	r0, r3
   11d80:	bne	11d5c <__assert_fail@plt+0xb04>
   11d84:	ldr	r7, [pc, #116]	; 11e00 <__assert_fail@plt+0xba8>
   11d88:	mov	r1, r2
   11d8c:	add	r7, pc, r7
   11d90:	b	11da0 <__assert_fail@plt+0xb48>
   11d94:	cmp	r3, r1
   11d98:	bne	11d5c <__assert_fail@plt+0xb04>
   11d9c:	ldr	r1, [r7, #3472]	; 0xd90
   11da0:	ldr	r3, [r4, #4]
   11da4:	add	r1, r1, #1
   11da8:	ldr	r2, [r4, #8]
   11dac:	add	r0, r3, #1
   11db0:	str	r1, [r6, #3472]	; 0xd90
   11db4:	cmp	r3, r2
   11db8:	strcc	r0, [r4, #4]
   11dbc:	ldrbcc	r1, [r3]
   11dc0:	bcs	11ddc <__assert_fail@plt+0xb84>
   11dc4:	ldrb	r3, [r5, #1]!
   11dc8:	cmp	r3, #0
   11dcc:	bne	11d94 <__assert_fail@plt+0xb3c>
   11dd0:	mov	r0, r4
   11dd4:	pop	{r3, r4, r5, r6, r7, lr}
   11dd8:	b	11c60 <__assert_fail@plt+0xa08>
   11ddc:	mov	r0, r4
   11de0:	bl	111e0 <__uflow@plt>
   11de4:	mov	r1, r0
   11de8:	b	11dc4 <__assert_fail@plt+0xb6c>
   11dec:	bl	111e0 <__uflow@plt>
   11df0:	mov	r1, r0
   11df4:	b	11d28 <__assert_fail@plt+0xad0>
   11df8:	andeq	ip, r1, ip, asr r4
   11dfc:	andeq	ip, r1, r4, lsr r4
   11e00:	ldrdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   11e04:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11e08:	ldr	r4, [pc, #252]	; 11f0c <__assert_fail@plt+0xcb4>
   11e0c:	ldr	r8, [pc, #252]	; 11f10 <__assert_fail@plt+0xcb8>
   11e10:	add	r4, pc, r4
   11e14:	add	r8, pc, r8
   11e18:	ldrb	r2, [r4, #3476]	; 0xd94
   11e1c:	ldr	r3, [r4, #3496]	; 0xda8
   11e20:	cmp	r2, #0
   11e24:	add	r6, r3, r0
   11e28:	beq	11ea0 <__assert_fail@plt+0xc48>
   11e2c:	cmp	r6, #0
   11e30:	add	r7, r6, #7
   11e34:	add	r2, r3, #1
   11e38:	movge	r7, r6
   11e3c:	bic	r7, r7, #7
   11e40:	cmp	r7, r2
   11e44:	ble	11ea0 <__assert_fail@plt+0xc48>
   11e48:	cmp	r3, r7
   11e4c:	bge	11ea0 <__assert_fail@plt+0xc48>
   11e50:	ldr	r3, [pc, #188]	; 11f14 <__assert_fail@plt+0xcbc>
   11e54:	mov	r9, #9
   11e58:	ldr	r5, [r8, r3]
   11e5c:	ldr	r0, [r5]
   11e60:	ldr	r3, [r0, #20]
   11e64:	ldr	r1, [r0, #24]
   11e68:	add	r2, r3, #1
   11e6c:	cmp	r3, r1
   11e70:	strcc	r2, [r0, #20]
   11e74:	strbcc	r9, [r3]
   11e78:	bcs	11f00 <__assert_fail@plt+0xca8>
   11e7c:	ldr	r3, [r4, #3496]	; 0xda8
   11e80:	cmp	r3, #0
   11e84:	add	r2, r3, #7
   11e88:	movlt	r3, r2
   11e8c:	bic	r3, r3, #7
   11e90:	add	r3, r3, #8
   11e94:	str	r3, [r4, #3496]	; 0xda8
   11e98:	cmp	r7, r3
   11e9c:	bgt	11e5c <__assert_fail@plt+0xc04>
   11ea0:	cmp	r6, r3
   11ea4:	pople	{r3, r4, r5, r6, r7, r8, r9, pc}
   11ea8:	ldr	r3, [pc, #100]	; 11f14 <__assert_fail@plt+0xcbc>
   11eac:	mov	r7, #32
   11eb0:	ldr	r4, [pc, #96]	; 11f18 <__assert_fail@plt+0xcc0>
   11eb4:	ldr	r5, [r8, r3]
   11eb8:	add	r4, pc, r4
   11ebc:	ldr	r0, [r5]
   11ec0:	ldr	r2, [r0, #20]
   11ec4:	ldr	r1, [r0, #24]
   11ec8:	add	ip, r2, #1
   11ecc:	cmp	r2, r1
   11ed0:	strcc	ip, [r0, #20]
   11ed4:	strbcc	r7, [r2]
   11ed8:	bcs	11ef4 <__assert_fail@plt+0xc9c>
   11edc:	ldr	r3, [r4, #3496]	; 0xda8
   11ee0:	add	r3, r3, #1
   11ee4:	str	r3, [r4, #3496]	; 0xda8
   11ee8:	cmp	r6, r3
   11eec:	bgt	11ebc <__assert_fail@plt+0xc64>
   11ef0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11ef4:	mov	r1, #32
   11ef8:	bl	111ec <__overflow@plt>
   11efc:	b	11edc <__assert_fail@plt+0xc84>
   11f00:	mov	r1, #9
   11f04:	bl	111ec <__overflow@plt>
   11f08:	b	11e7c <__assert_fail@plt+0xc24>
   11f0c:	andeq	ip, r1, r8, asr r3
   11f10:	andeq	r6, r1, r4, ror #3
   11f14:	andeq	r0, r0, ip, lsl r1
   11f18:			; <UNDEFINED> instruction: 0x0001c2b0
   11f1c:	ldr	r3, [pc, #156]	; 11fc0 <__assert_fail@plt+0xd68>
   11f20:	add	r3, pc, r3
   11f24:	ldrb	r2, [r3, #3500]	; 0xdac
   11f28:	cmp	r2, #0
   11f2c:	bne	11f64 <__assert_fail@plt+0xd0c>
   11f30:	ldrb	r2, [r3, #3501]	; 0xdad
   11f34:	cmp	r2, #0
   11f38:	beq	11f58 <__assert_fail@plt+0xd00>
   11f3c:	cmp	r0, #0
   11f40:	ldrne	r2, [r3, #3472]	; 0xd90
   11f44:	ldreq	r2, [r3, #3456]	; 0xd80
   11f48:	ldr	r3, [pc, #116]	; 11fc4 <__assert_fail@plt+0xd6c>
   11f4c:	add	r3, pc, r3
   11f50:	str	r2, [r3, #3460]	; 0xd84
   11f54:	bx	lr
   11f58:	ldrb	r2, [r3, #3502]	; 0xdae
   11f5c:	cmp	r2, #0
   11f60:	bne	11f78 <__assert_fail@plt+0xd20>
   11f64:	ldr	r3, [pc, #92]	; 11fc8 <__assert_fail@plt+0xd70>
   11f68:	add	r3, pc, r3
   11f6c:	ldr	r2, [r3, #3456]	; 0xd80
   11f70:	str	r2, [r3, #3460]	; 0xd84
   11f74:	bx	lr
   11f78:	cmp	r0, #0
   11f7c:	beq	11f98 <__assert_fail@plt+0xd40>
   11f80:	ldr	r2, [r3, #3472]	; 0xd90
   11f84:	ldr	r1, [r3, #3456]	; 0xd80
   11f88:	cmp	r2, r1
   11f8c:	beq	11f9c <__assert_fail@plt+0xd44>
   11f90:	str	r2, [r3, #3460]	; 0xd84
   11f94:	bx	lr
   11f98:	ldr	r2, [r3, #3456]	; 0xd80
   11f9c:	ldr	r3, [pc, #40]	; 11fcc <__assert_fail@plt+0xd74>
   11fa0:	add	r3, pc, r3
   11fa4:	ldr	r1, [r3, #3460]	; 0xd84
   11fa8:	cmp	r1, r2
   11fac:	bxne	lr
   11fb0:	cmp	r2, #0
   11fb4:	moveq	r2, #3
   11fb8:	movne	r2, #0
   11fbc:	b	11f90 <__assert_fail@plt+0xd38>
   11fc0:	andeq	ip, r1, r8, asr #4
   11fc4:	andeq	ip, r1, ip, lsl r2
   11fc8:	andeq	ip, r1, r0, lsl #4
   11fcc:	andeq	ip, r1, r8, asr #3
   11fd0:	push	{r4, r5, r6, r7, r8, lr}
   11fd4:	mov	r8, r1
   11fd8:	ldr	r4, [r1]
   11fdc:	ldr	r3, [pc, #100]	; 12048 <__assert_fail@plt+0xdf0>
   11fe0:	cmp	r4, #0
   11fe4:	add	r3, pc, r3
   11fe8:	beq	12028 <__assert_fail@plt+0xdd0>
   11fec:	ldr	r2, [pc, #88]	; 1204c <__assert_fail@plt+0xdf4>
   11ff0:	sub	r5, r0, #1
   11ff4:	ldr	r7, [r3, r2]
   11ff8:	ldr	r0, [r7]
   11ffc:	ldrb	r1, [r5, #1]!
   12000:	ldr	r2, [r0, #20]
   12004:	ldr	r3, [r0, #24]
   12008:	add	r6, r2, #1
   1200c:	cmp	r2, r3
   12010:	strcc	r6, [r0, #20]
   12014:	strbcc	r1, [r2]
   12018:	bcs	12040 <__assert_fail@plt+0xde8>
   1201c:	subs	r4, r4, #1
   12020:	bne	11ff8 <__assert_fail@plt+0xda0>
   12024:	ldr	r4, [r8]
   12028:	ldr	r3, [pc, #32]	; 12050 <__assert_fail@plt+0xdf8>
   1202c:	add	r3, pc, r3
   12030:	ldr	r2, [r3, #3496]	; 0xda8
   12034:	add	r4, r2, r4
   12038:	str	r4, [r3, #3496]	; 0xda8
   1203c:	pop	{r4, r5, r6, r7, r8, pc}
   12040:	bl	111ec <__overflow@plt>
   12044:	b	1201c <__assert_fail@plt+0xdc4>
   12048:	andeq	r6, r1, r4, lsl r0
   1204c:	andeq	r0, r0, ip, lsl r1
   12050:	andeq	ip, r1, ip, lsr r1
   12054:	push	{r4, r5, r6, r7, r8, lr}
   12058:	mov	r4, r0
   1205c:	ldr	r5, [pc, #204]	; 12130 <__assert_fail@plt+0xed8>
   12060:	mov	r8, r1
   12064:	ldr	r6, [pc, #200]	; 12134 <__assert_fail@plt+0xedc>
   12068:	mov	r3, #0
   1206c:	add	r5, pc, r5
   12070:	add	r6, pc, r6
   12074:	ldr	r0, [r5, #3504]	; 0xdb0
   12078:	str	r3, [r5, #3496]	; 0xda8
   1207c:	bl	11e04 <__assert_fail@plt+0xbac>
   12080:	ldr	r3, [pc, #176]	; 12138 <__assert_fail@plt+0xee0>
   12084:	ldr	r0, [r5, #3492]	; 0xda4
   12088:	ldr	r7, [r6, r3]
   1208c:	ldr	r1, [r7]
   12090:	bl	10fb8 <fputs_unlocked@plt>
   12094:	ldr	r2, [r5, #3496]	; 0xda8
   12098:	ldr	r3, [r5, #3480]	; 0xd98
   1209c:	add	r0, r2, r3
   120a0:	str	r0, [r5, #3496]	; 0xda8
   120a4:	rsb	r0, r0, r8
   120a8:	bl	11e04 <__assert_fail@plt+0xbac>
   120ac:	ldr	r6, [r4, #24]
   120b0:	sub	r6, r6, #28
   120b4:	cmp	r4, r6
   120b8:	beq	120e4 <__assert_fail@plt+0xe8c>
   120bc:	add	r5, r4, #4
   120c0:	ldr	r0, [r5, #-4]
   120c4:	mov	r1, r5
   120c8:	bl	11fd0 <__assert_fail@plt+0xd78>
   120cc:	add	r4, r4, #28
   120d0:	ldr	r0, [r4, #-20]	; 0xffffffec
   120d4:	add	r5, r5, #28
   120d8:	bl	11e04 <__assert_fail@plt+0xbac>
   120dc:	cmp	r6, r4
   120e0:	bne	120c0 <__assert_fail@plt+0xe68>
   120e4:	mov	r1, r4
   120e8:	ldr	r0, [r1], #4
   120ec:	bl	11fd0 <__assert_fail@plt+0xd78>
   120f0:	ldr	r0, [r7]
   120f4:	ldr	r2, [pc, #64]	; 1213c <__assert_fail@plt+0xee4>
   120f8:	add	r2, pc, r2
   120fc:	ldr	r3, [r0, #20]
   12100:	ldr	ip, [r0, #24]
   12104:	ldr	r1, [r2, #3496]	; 0xda8
   12108:	cmp	r3, ip
   1210c:	str	r1, [r2, #3468]	; 0xd8c
   12110:	addcc	r1, r3, #1
   12114:	movcc	r2, #10
   12118:	strcc	r1, [r0, #20]
   1211c:	strbcc	r2, [r3]
   12120:	popcc	{r4, r5, r6, r7, r8, pc}
   12124:	mov	r1, #10
   12128:	pop	{r4, r5, r6, r7, r8, lr}
   1212c:	b	111ec <__overflow@plt>
   12130:	strdeq	ip, [r1], -ip	; <UNPREDICTABLE>
   12134:	andeq	r5, r1, r8, lsl #31
   12138:	andeq	r0, r0, ip, lsl r1
   1213c:	andeq	ip, r1, r0, ror r0
   12140:	push	{r4, r5, r6, lr}
   12144:	mov	r5, r0
   12148:	ldr	r6, [pc, #60]	; 1218c <__assert_fail@plt+0xf34>
   1214c:	ldr	r4, [pc, #60]	; 12190 <__assert_fail@plt+0xf38>
   12150:	add	r6, pc, r6
   12154:	add	r4, pc, r4
   12158:	add	r0, r4, #8
   1215c:	ldr	r1, [r6, #3456]	; 0xd80
   12160:	bl	12054 <__assert_fail@plt+0xdfc>
   12164:	ldr	r4, [r4, #32]
   12168:	cmp	r4, r5
   1216c:	popeq	{r4, r5, r6, pc}
   12170:	mov	r0, r4
   12174:	ldr	r1, [r6, #3460]	; 0xd84
   12178:	bl	12054 <__assert_fail@plt+0xdfc>
   1217c:	ldr	r4, [r4, #24]
   12180:	cmp	r5, r4
   12184:	bne	12170 <__assert_fail@plt+0xf18>
   12188:	pop	{r4, r5, r6, pc}
   1218c:	andeq	ip, r1, r8, lsl r0
   12190:	andeq	r6, r1, ip, lsr #32
   12194:	push	{r3, r4, r5, r6, r7, lr}
   12198:	ldr	r4, [pc, #372]	; 12314 <__assert_fail@plt+0x10bc>
   1219c:	ldr	r2, [pc, #372]	; 12318 <__assert_fail@plt+0x10c0>
   121a0:	add	r4, pc, r4
   121a4:	add	r2, pc, r2
   121a8:	mov	r3, r4
   121ac:	ldr	r6, [r3], #8
   121b0:	cmp	r6, r3
   121b4:	beq	122cc <__assert_fail@plt+0x1074>
   121b8:	bl	11a1c <__assert_fail@plt+0x7c4>
   121bc:	ldr	lr, [r4, #32]
   121c0:	cmp	r6, lr
   121c4:	beq	1230c <__assert_fail@plt+0x10b4>
   121c8:	ldr	r1, [lr, #20]
   121cc:	mov	r5, r6
   121d0:	mvn	r4, #-2147483648	; 0x80000000
   121d4:	ldr	r2, [lr, #24]
   121d8:	ldr	ip, [r2, #20]
   121dc:	rsb	r3, ip, r1
   121e0:	cmp	r3, r4
   121e4:	mov	r1, ip
   121e8:	movge	r3, r4
   121ec:	movlt	r5, lr
   121f0:	cmn	r3, #-2147483638	; 0x8000000a
   121f4:	mov	lr, r2
   121f8:	addle	r3, r3, #9
   121fc:	cmp	r6, r2
   12200:	mov	r4, r3
   12204:	bne	121d4 <__assert_fail@plt+0xf7c>
   12208:	mov	r0, r5
   1220c:	ldr	r6, [pc, #264]	; 1231c <__assert_fail@plt+0x10c4>
   12210:	bl	12140 <__assert_fail@plt+0xee8>
   12214:	ldr	ip, [pc, #260]	; 12320 <__assert_fail@plt+0x10c8>
   12218:	add	r6, pc, r6
   1221c:	ldr	r1, [r5]
   12220:	add	ip, pc, ip
   12224:	movw	r3, #5000	; 0x1388
   12228:	add	ip, ip, #3504	; 0xdb0
   1222c:	ldr	r7, [r6, #324]	; 0x144
   12230:	add	ip, ip, #4
   12234:	rsb	r2, r1, r7
   12238:	mov	r0, ip
   1223c:	bl	10ff4 <__memmove_chk@plt>
   12240:	ldr	r3, [pc, #220]	; 12324 <__assert_fail@plt+0x10cc>
   12244:	ldr	r1, [r5]
   12248:	add	r3, pc, r3
   1224c:	ldr	r4, [r3]
   12250:	cmp	r4, r5
   12254:	addcs	lr, r5, #28
   12258:	movcs	r2, r5
   1225c:	rsb	r0, r1, r0
   12260:	movcs	r3, lr
   12264:	add	r7, r7, r0
   12268:	str	r7, [r6, #324]	; 0x144
   1226c:	bcs	12278 <__assert_fail@plt+0x1020>
   12270:	b	12294 <__assert_fail@plt+0x103c>
   12274:	ldr	r1, [lr, ip]
   12278:	cmp	r4, r3
   1227c:	rsb	ip, r5, r2
   12280:	add	r1, r1, r0
   12284:	add	r2, r2, #28
   12288:	str	r1, [r3, #-28]	; 0xffffffe4
   1228c:	add	r3, r3, #28
   12290:	bcs	12274 <__assert_fail@plt+0x101c>
   12294:	ldr	r6, [pc, #140]	; 12328 <__assert_fail@plt+0x10d0>
   12298:	rsb	r2, r5, r4
   1229c:	bic	r2, r2, #3
   122a0:	mov	r1, r5
   122a4:	add	r6, pc, r6
   122a8:	add	r2, r2, #28
   122ac:	add	ip, r6, #8
   122b0:	movw	r3, #28000	; 0x6d60
   122b4:	mov	r0, ip
   122b8:	bl	10ff4 <__memmove_chk@plt>
   122bc:	rsb	r5, r0, r5
   122c0:	rsb	r4, r5, r4
   122c4:	str	r4, [r6]
   122c8:	pop	{r3, r4, r5, r6, r7, pc}
   122cc:	ldr	r3, [pc, #88]	; 1232c <__assert_fail@plt+0x10d4>
   122d0:	mov	r1, #1
   122d4:	ldr	r4, [pc, #84]	; 12330 <__assert_fail@plt+0x10d8>
   122d8:	ldr	r5, [pc, #84]	; 12334 <__assert_fail@plt+0x10dc>
   122dc:	add	r4, pc, r4
   122e0:	ldr	r3, [r2, r3]
   122e4:	add	r5, pc, r5
   122e8:	add	r4, r4, #3504	; 0xdb0
   122ec:	add	r4, r4, #4
   122f0:	ldr	r2, [r5, #324]	; 0x144
   122f4:	mov	r0, r4
   122f8:	ldr	r3, [r3]
   122fc:	rsb	r2, r4, r2
   12300:	bl	11030 <fwrite_unlocked@plt>
   12304:	str	r4, [r5, #324]	; 0x144
   12308:	pop	{r3, r4, r5, r6, r7, pc}
   1230c:	mov	r5, r6
   12310:	b	12208 <__assert_fail@plt+0xfb0>
   12314:	andeq	r5, r1, r0, ror #31
   12318:	andeq	r5, r1, r4, asr lr
   1231c:	andeq	sp, r1, r8, asr #30
   12320:	andeq	fp, r1, r8, asr #30
   12324:	andeq	r5, r1, r8, lsr pc
   12328:	ldrdeq	r5, [r1], -ip
   1232c:	andeq	r0, r0, ip, lsl r1
   12330:	andeq	fp, r1, ip, lsl #29
   12334:	andeq	sp, r1, ip, ror lr
   12338:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1233c:	sub	sp, sp, #20
   12340:	mov	fp, r0
   12344:	mov	r5, r1
   12348:	bl	1112c <__ctype_b_loc@plt>
   1234c:	ldr	r4, [pc, #720]	; 12624 <__assert_fail@plt+0x13cc>
   12350:	ldr	r9, [pc, #720]	; 12628 <__assert_fail@plt+0x13d0>
   12354:	add	r4, pc, r4
   12358:	add	r9, pc, r9
   1235c:	add	r9, r9, #8448	; 0x2100
   12360:	mov	r7, r0
   12364:	ldr	r0, [r4], #8
   12368:	add	r4, r4, #27904	; 0x6d00
   1236c:	add	r3, r4, #40	; 0x28
   12370:	str	r3, [sp, #12]
   12374:	add	r3, r9, #60	; 0x3c
   12378:	str	r3, [sp, #8]
   1237c:	ldr	r6, [pc, #680]	; 1262c <__assert_fail@plt+0x13d4>
   12380:	ldr	r8, [pc, #680]	; 12630 <__assert_fail@plt+0x13d8>
   12384:	add	r6, pc, r6
   12388:	ldr	r9, [sp, #8]
   1238c:	add	r8, pc, r8
   12390:	ldr	r1, [r6, #324]	; 0x144
   12394:	mov	r4, r6
   12398:	mov	r2, r1
   1239c:	str	r1, [r0]
   123a0:	b	123e4 <__assert_fail@plt+0x118c>
   123a4:	add	r1, r2, #1
   123a8:	strb	r5, [r2]
   123ac:	ldr	r3, [fp, #4]
   123b0:	str	r1, [r4, #324]	; 0x144
   123b4:	mov	r2, r1
   123b8:	ldr	r1, [fp, #8]
   123bc:	add	r0, r3, #1
   123c0:	cmp	r3, r1
   123c4:	strcc	r0, [fp, #4]
   123c8:	ldrbcc	r5, [r3]
   123cc:	bcs	12400 <__assert_fail@plt+0x11a8>
   123d0:	ldr	r1, [r7]
   123d4:	lsl	r3, r5, #1
   123d8:	ldrh	r3, [r1, r3]
   123dc:	tst	r3, #8192	; 0x2000
   123e0:	bne	12418 <__assert_fail@plt+0x11c0>
   123e4:	cmp	r2, r9
   123e8:	bne	123a4 <__assert_fail@plt+0x114c>
   123ec:	mov	r0, #1
   123f0:	bl	11f1c <__assert_fail@plt+0xcc4>
   123f4:	bl	12194 <__assert_fail@plt+0xf3c>
   123f8:	ldr	r2, [r8, #324]	; 0x144
   123fc:	b	123a4 <__assert_fail@plt+0x114c>
   12400:	mov	r0, fp
   12404:	bl	111e0 <__uflow@plt>
   12408:	cmn	r0, #1
   1240c:	mov	r5, r0
   12410:	bne	1261c <__assert_fail@plt+0x13c4>
   12414:	ldr	r2, [r6, #324]	; 0x144
   12418:	ldr	r1, [pc, #532]	; 12634 <__assert_fail@plt+0x13dc>
   1241c:	ldr	ip, [pc, #532]	; 12638 <__assert_fail@plt+0x13e0>
   12420:	add	r1, pc, r1
   12424:	ldr	r0, [pc, #528]	; 1263c <__assert_fail@plt+0x13e4>
   12428:	add	ip, pc, ip
   1242c:	ldr	r1, [r1]
   12430:	add	r0, pc, r0
   12434:	ldr	r3, [ip, #3472]	; 0xd90
   12438:	ldr	r6, [r1]
   1243c:	str	r1, [sp]
   12440:	rsb	r2, r6, r2
   12444:	str	r2, [r1, #4]
   12448:	ldrb	r1, [r6]
   1244c:	add	r3, r2, r3
   12450:	sub	r8, r2, #1
   12454:	str	r3, [sp, #4]
   12458:	str	r3, [ip, #3472]	; 0xd90
   1245c:	bl	1115c <strchr@plt>
   12460:	ldr	r3, [sp]
   12464:	add	r4, r6, r8
   12468:	ldrb	r1, [r6, r8]
   1246c:	ldrb	r2, [r3, #12]
   12470:	lsl	r1, r1, #1
   12474:	adds	r0, r0, #0
   12478:	movne	r0, #1
   1247c:	bfi	r2, r0, #0, #1
   12480:	strb	r2, [r3, #12]
   12484:	cmp	r6, r4
   12488:	ldr	r0, [r7]
   1248c:	uxtb	r2, r2
   12490:	ldrh	r1, [r0, r1]
   12494:	ubfx	r1, r1, #2, #1
   12498:	bfi	r2, r1, #2, #1
   1249c:	strb	r2, [r3, #12]
   124a0:	ldrbcs	sl, [r6, r8]
   124a4:	bcs	124dc <__assert_fail@plt+0x1284>
   124a8:	ldr	r8, [pc, #400]	; 12640 <__assert_fail@plt+0x13e8>
   124ac:	add	r8, pc, r8
   124b0:	b	124bc <__assert_fail@plt+0x1264>
   124b4:	cmp	r4, r6
   124b8:	beq	125cc <__assert_fail@plt+0x1374>
   124bc:	ldrb	sl, [r4]
   124c0:	mov	r0, r8
   124c4:	mov	r9, r4
   124c8:	sub	r4, r4, #1
   124cc:	mov	r1, sl
   124d0:	bl	1115c <strchr@plt>
   124d4:	cmp	r0, #0
   124d8:	bne	124b4 <__assert_fail@plt+0x125c>
   124dc:	ldr	r0, [pc, #352]	; 12644 <__assert_fail@plt+0x13ec>
   124e0:	mov	r1, sl
   124e4:	add	r0, pc, r0
   124e8:	bl	1115c <strchr@plt>
   124ec:	ldr	r3, [sp]
   124f0:	mov	r1, r5
   124f4:	ldrb	r2, [r3, #12]
   124f8:	adds	ip, r0, #0
   124fc:	mov	r0, fp
   12500:	movne	ip, #1
   12504:	bfi	r2, ip, #1, #1
   12508:	strb	r2, [r3, #12]
   1250c:	bl	11c60 <__assert_fail@plt+0xa08>
   12510:	ldr	r2, [pc, #304]	; 12648 <__assert_fail@plt+0x13f0>
   12514:	ldr	r1, [pc, #304]	; 1264c <__assert_fail@plt+0x13f4>
   12518:	add	r2, pc, r2
   1251c:	add	r1, pc, r1
   12520:	ldr	r2, [r2]
   12524:	ldr	r1, [r1, #3472]	; 0xd90
   12528:	mov	r5, r0
   1252c:	cmn	r0, #1
   12530:	ldr	r0, [sp, #4]
   12534:	rsb	r3, r0, r1
   12538:	str	r3, [r2, #8]
   1253c:	beq	125d4 <__assert_fail@plt+0x137c>
   12540:	ldrb	r0, [r2, #12]
   12544:	ubfx	r1, r0, #1, #1
   12548:	cmp	r1, #0
   1254c:	beq	125e8 <__assert_fail@plt+0x1390>
   12550:	cmp	r5, #10
   12554:	beq	125d4 <__assert_fail@plt+0x137c>
   12558:	cmp	r3, #1
   1255c:	orrgt	r0, r0, #8
   12560:	strbgt	r0, [r2, #12]
   12564:	movgt	r1, #1
   12568:	ble	125fc <__assert_fail@plt+0x13a4>
   1256c:	ldr	r0, [pc, #220]	; 12650 <__assert_fail@plt+0x13f8>
   12570:	add	r0, pc, r0
   12574:	ldrb	r0, [r0, #328]	; 0x148
   12578:	cmp	r0, #0
   1257c:	beq	12590 <__assert_fail@plt+0x1338>
   12580:	cmp	r1, #0
   12584:	bne	125e0 <__assert_fail@plt+0x1388>
   12588:	mov	r1, #1
   1258c:	str	r1, [r2, #8]
   12590:	ldr	r3, [sp, #12]
   12594:	cmp	r2, r3
   12598:	beq	1260c <__assert_fail@plt+0x13b4>
   1259c:	ldr	r2, [pc, #176]	; 12654 <__assert_fail@plt+0x13fc>
   125a0:	cmp	r5, #10
   125a4:	cmnne	r5, #1
   125a8:	add	r2, pc, r2
   125ac:	ldr	r0, [r2]
   125b0:	add	r0, r0, #28
   125b4:	str	r0, [r2]
   125b8:	bne	1237c <__assert_fail@plt+0x1124>
   125bc:	mov	r0, fp
   125c0:	add	sp, sp, #20
   125c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125c8:	b	11cf4 <__assert_fail@plt+0xa9c>
   125cc:	ldrb	sl, [r9, #-1]
   125d0:	b	124dc <__assert_fail@plt+0x1284>
   125d4:	ldrb	r1, [r2, #12]
   125d8:	orr	r1, r1, #8
   125dc:	strb	r1, [r2, #12]
   125e0:	mov	r1, #2
   125e4:	b	1258c <__assert_fail@plt+0x1334>
   125e8:	cmp	r5, #10
   125ec:	bfi	r0, r1, #3, #1
   125f0:	strb	r0, [r2, #12]
   125f4:	bne	1256c <__assert_fail@plt+0x1314>
   125f8:	b	12588 <__assert_fail@plt+0x1330>
   125fc:	bfc	r0, #3, #1
   12600:	mov	r1, #0
   12604:	strb	r0, [r2, #12]
   12608:	b	1256c <__assert_fail@plt+0x1314>
   1260c:	mov	r0, #1
   12610:	bl	11f1c <__assert_fail@plt+0xcc4>
   12614:	bl	12194 <__assert_fail@plt+0xf3c>
   12618:	b	1259c <__assert_fail@plt+0x1344>
   1261c:	ldr	r2, [r4, #324]	; 0x144
   12620:	b	123d0 <__assert_fail@plt+0x1178>
   12624:	andeq	r5, r1, ip, lsr #28
   12628:	andeq	fp, r1, r0, lsl lr
   1262c:	ldrdeq	sp, [r1], -ip
   12630:	ldrdeq	sp, [r1], -r4
   12634:	andeq	r5, r1, r0, ror #26
   12638:	andeq	fp, r1, r0, asr #26
   1263c:	andeq	r3, r0, r4, lsl lr
   12640:	andeq	r3, r0, r0, lsr #27
   12644:	andeq	r3, r0, r0, ror sp
   12648:	andeq	r5, r1, r8, ror #24
   1264c:	andeq	fp, r1, ip, asr #24
   12650:	strdeq	sp, [r1], -r0
   12654:	ldrdeq	r5, [r1], -r8
   12658:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1265c:	mov	r1, #2
   12660:	ldr	r4, [pc, #1544]	; 12c70 <__assert_fail@plt+0x1a18>
   12664:	sub	sp, sp, #36	; 0x24
   12668:	ldr	r7, [pc, #1540]	; 12c74 <__assert_fail@plt+0x1a1c>
   1266c:	mov	fp, r0
   12670:	add	r4, pc, r4
   12674:	bl	13118 <close_stdout@@Base+0x1c0>
   12678:	add	r7, pc, r7
   1267c:	mov	r0, fp
   12680:	mov	r3, #0
   12684:	add	r2, r7, #3504	; 0xdb0
   12688:	strb	r3, [r4, #3476]	; 0xd94
   1268c:	str	r2, [sp, #28]
   12690:	str	r3, [r4, #3460]	; 0xd84
   12694:	bl	11cf4 <__assert_fail@plt+0xa9c>
   12698:	ldr	r3, [pc, #1496]	; 12c78 <__assert_fail@plt+0x1a20>
   1269c:	ldr	ip, [sp, #28]
   126a0:	add	r3, pc, r3
   126a4:	ldr	r2, [pc, #1488]	; 12c7c <__assert_fail@plt+0x1a24>
   126a8:	ldr	r9, [pc, #1488]	; 12c80 <__assert_fail@plt+0x1a28>
   126ac:	add	ip, ip, #4
   126b0:	add	r2, pc, r2
   126b4:	str	ip, [sp, #28]
   126b8:	str	r2, [sp, #20]
   126bc:	add	r9, pc, r9
   126c0:	str	r4, [sp, #24]
   126c4:	mov	r8, r0
   126c8:	str	r0, [r3, #332]	; 0x14c
   126cc:	ldr	r3, [sp, #24]
   126d0:	mov	ip, #0
   126d4:	ldr	r2, [pc, #1448]	; 12c84 <__assert_fail@plt+0x1a2c>
   126d8:	str	ip, [r3, #3468]	; 0xd8c
   126dc:	add	r2, pc, r2
   126e0:	ldr	r3, [pc, #1440]	; 12c88 <__assert_fail@plt+0x1a30>
   126e4:	str	r2, [sp, #12]
   126e8:	ldr	ip, [pc, #1436]	; 12c8c <__assert_fail@plt+0x1a34>
   126ec:	add	r3, pc, r3
   126f0:	ldr	r2, [pc, #1432]	; 12c90 <__assert_fail@plt+0x1a38>
   126f4:	add	ip, pc, ip
   126f8:	str	r3, [sp, #4]
   126fc:	add	r2, pc, r2
   12700:	str	ip, [sp, #8]
   12704:	str	r2, [sp, #16]
   12708:	cmn	r8, #1
   1270c:	movne	sl, #0
   12710:	moveq	sl, #1
   12714:	cmp	r8, #10
   12718:	movne	r4, sl
   1271c:	orreq	r4, sl, #1
   12720:	cmp	r4, #0
   12724:	bne	128b4 <__assert_fail@plt+0x165c>
   12728:	ldr	r3, [r7, #3484]	; 0xd9c
   1272c:	ldr	r2, [r7, #3488]	; 0xda0
   12730:	cmp	r3, r2
   12734:	blt	128b4 <__assert_fail@plt+0x165c>
   12738:	ldr	r2, [sp, #20]
   1273c:	ldr	r1, [r2, #336]	; 0x150
   12740:	ldr	r2, [r7, #3472]	; 0xd90
   12744:	add	r1, r3, r1
   12748:	cmp	r1, r2
   1274c:	ble	12958 <__assert_fail@plt+0x1700>
   12750:	ldr	ip, [sp, #4]
   12754:	mov	r1, #0
   12758:	ldr	r0, [ip, #3484]	; 0xd9c
   1275c:	str	r1, [ip, #3496]	; 0xda8
   12760:	cmp	r0, r2
   12764:	blt	128c0 <__assert_fail@plt+0x1668>
   12768:	cmp	r8, #10
   1276c:	cmnne	r8, #1
   12770:	moveq	r2, #0
   12774:	movne	r2, #1
   12778:	beq	12818 <__assert_fail@plt+0x15c0>
   1277c:	str	r2, [sp]
   12780:	bl	11e04 <__assert_fail@plt+0xbac>
   12784:	ldr	ip, [sp, #8]
   12788:	ldr	r2, [sp]
   1278c:	ldr	r3, [ip, #3496]	; 0xda8
   12790:	ldr	r0, [ip, #3472]	; 0xd90
   12794:	ldr	r5, [ip, #3492]	; 0xda4
   12798:	cmp	r3, r0
   1279c:	beq	12808 <__assert_fail@plt+0x15b0>
   127a0:	ldrb	r1, [r5]
   127a4:	cmp	r1, #0
   127a8:	beq	12808 <__assert_fail@plt+0x15b0>
   127ac:	ldr	r3, [pc, #1248]	; 12c94 <__assert_fail@plt+0x1a3c>
   127b0:	ldr	r4, [pc, #1248]	; 12c98 <__assert_fail@plt+0x1a40>
   127b4:	ldr	r6, [r9, r3]
   127b8:	add	r4, pc, r4
   127bc:	b	127cc <__assert_fail@plt+0x1574>
   127c0:	ldrb	r1, [r5, #1]!
   127c4:	cmp	r1, #0
   127c8:	beq	12808 <__assert_fail@plt+0x15b0>
   127cc:	ldr	r0, [r6]
   127d0:	ldr	r3, [r0, #20]
   127d4:	ldr	ip, [r0, #24]
   127d8:	cmp	r3, ip
   127dc:	addcc	ip, r3, #1
   127e0:	strcc	ip, [r0, #20]
   127e4:	strbcc	r1, [r3]
   127e8:	bcs	12afc <__assert_fail@plt+0x18a4>
   127ec:	ldr	r3, [r4, #3496]	; 0xda8
   127f0:	ldr	r0, [r4, #3472]	; 0xd90
   127f4:	add	r3, r3, #1
   127f8:	str	r3, [r4, #3496]	; 0xda8
   127fc:	cmp	r3, r0
   12800:	bne	127c0 <__assert_fail@plt+0x1568>
   12804:	mov	r3, r0
   12808:	cmp	r2, #0
   1280c:	bne	128d4 <__assert_fail@plt+0x167c>
   12810:	cmp	sl, #0
   12814:	bne	128e4 <__assert_fail@plt+0x168c>
   12818:	mov	r1, r8
   1281c:	b	12864 <__assert_fail@plt+0x160c>
   12820:	ldr	r3, [pc, #1132]	; 12c94 <__assert_fail@plt+0x1a3c>
   12824:	ldr	r3, [r9, r3]
   12828:	ldr	r0, [r3]
   1282c:	ldr	r3, [r0, #20]
   12830:	ldr	r2, [r0, #24]
   12834:	cmp	r3, r2
   12838:	addcc	r2, r3, #1
   1283c:	strcc	r2, [r0, #20]
   12840:	strbcc	r1, [r3]
   12844:	bcs	12a4c <__assert_fail@plt+0x17f4>
   12848:	ldr	r3, [fp, #4]
   1284c:	ldr	r2, [fp, #8]
   12850:	cmp	r3, r2
   12854:	bcs	12a3c <__assert_fail@plt+0x17e4>
   12858:	add	r2, r3, #1
   1285c:	str	r2, [fp, #4]
   12860:	ldrb	r1, [r3]
   12864:	cmp	r1, #10
   12868:	cmnne	r1, #1
   1286c:	bne	12820 <__assert_fail@plt+0x15c8>
   12870:	cmn	r1, #1
   12874:	beq	12944 <__assert_fail@plt+0x16ec>
   12878:	ldr	r3, [pc, #1044]	; 12c94 <__assert_fail@plt+0x1a3c>
   1287c:	ldr	r6, [r9, r3]
   12880:	ldr	r0, [r6]
   12884:	ldr	r2, [r0, #24]
   12888:	ldr	r3, [r0, #20]
   1288c:	cmp	r3, r2
   12890:	addcc	r2, r3, #1
   12894:	strcc	r2, [r0, #20]
   12898:	movcc	r2, #10
   1289c:	strbcc	r2, [r3]
   128a0:	bcs	12c30 <__assert_fail@plt+0x19d8>
   128a4:	mov	r0, fp
   128a8:	bl	11cf4 <__assert_fail@plt+0xa9c>
   128ac:	mov	r8, r0
   128b0:	b	12708 <__assert_fail@plt+0x14b0>
   128b4:	ldr	r3, [sp, #12]
   128b8:	ldr	r2, [r3, #3472]	; 0xd90
   128bc:	b	12750 <__assert_fail@plt+0x14f8>
   128c0:	cmp	r8, #10
   128c4:	cmnne	r8, #1
   128c8:	moveq	r2, #0
   128cc:	movne	r2, #1
   128d0:	b	1277c <__assert_fail@plt+0x1524>
   128d4:	rsb	r0, r3, r0
   128d8:	bl	11e04 <__assert_fail@plt+0xbac>
   128dc:	mov	r1, r8
   128e0:	b	12864 <__assert_fail@plt+0x160c>
   128e4:	ldr	r2, [sp, #16]
   128e8:	ldr	ip, [sp, #16]
   128ec:	ldr	r1, [r2, #3484]	; 0xd9c
   128f0:	ldr	r2, [r2, #3480]	; 0xd98
   128f4:	ldr	r3, [ip, #3472]	; 0xd90
   128f8:	add	r2, r1, r2
   128fc:	cmp	r2, r3
   12900:	mvngt	r8, #0
   12904:	movgt	r1, r8
   12908:	bgt	12864 <__assert_fail@plt+0x160c>
   1290c:	ldr	r3, [pc, #896]	; 12c94 <__assert_fail@plt+0x1a3c>
   12910:	ldr	r3, [r9, r3]
   12914:	ldr	r0, [r3]
   12918:	ldr	r3, [r0, #20]
   1291c:	ldr	r2, [r0, #24]
   12920:	cmp	r3, r2
   12924:	bcs	12c3c <__assert_fail@plt+0x19e4>
   12928:	mvn	r8, #0
   1292c:	add	r2, r3, #1
   12930:	mov	r1, r8
   12934:	str	r2, [r0, #20]
   12938:	mov	r2, #10
   1293c:	strb	r2, [r3]
   12940:	b	12864 <__assert_fail@plt+0x160c>
   12944:	ldr	r3, [pc, #848]	; 12c9c <__assert_fail@plt+0x1a44>
   12948:	add	r3, pc, r3
   1294c:	str	r1, [r3, #332]	; 0x14c
   12950:	add	sp, sp, #36	; 0x24
   12954:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12958:	ldr	ip, [pc, #832]	; 12ca0 <__assert_fail@plt+0x1a48>
   1295c:	mov	r1, r8
   12960:	str	r3, [r7, #3504]	; 0xdb0
   12964:	mov	r0, fp
   12968:	add	ip, pc, ip
   1296c:	str	r2, [r7, #3456]	; 0xd80
   12970:	ldr	lr, [sp, #20]
   12974:	add	r2, ip, #8
   12978:	mov	r3, ip
   1297c:	ldr	ip, [sp, #28]
   12980:	str	r2, [r3]
   12984:	str	ip, [lr, #324]	; 0x144
   12988:	bl	12338 <__assert_fail@plt+0x10e0>
   1298c:	ldr	r6, [r7, #3484]	; 0xd9c
   12990:	ldr	r8, [r7, #3504]	; 0xdb0
   12994:	cmp	r6, r8
   12998:	mov	r5, r0
   1299c:	beq	12a10 <__assert_fail@plt+0x17b8>
   129a0:	mov	r0, r4
   129a4:	bl	11f1c <__assert_fail@plt+0xcc4>
   129a8:	ldr	r3, [pc, #756]	; 12ca4 <__assert_fail@plt+0x1a4c>
   129ac:	add	r3, pc, r3
   129b0:	ldrb	r2, [r3, #3500]	; 0xdac
   129b4:	cmp	r2, #0
   129b8:	bne	129d0 <__assert_fail@plt+0x1778>
   129bc:	ldrb	r2, [r3, #3501]	; 0xdad
   129c0:	cmp	r2, #0
   129c4:	beq	12a58 <__assert_fail@plt+0x1800>
   129c8:	cmp	r6, r8
   129cc:	beq	12ba4 <__assert_fail@plt+0x194c>
   129d0:	ldr	r3, [pc, #720]	; 12ca8 <__assert_fail@plt+0x1a50>
   129d4:	add	r3, pc, r3
   129d8:	ldr	r4, [r3], #8
   129dc:	cmp	r4, r3
   129e0:	bls	12c50 <__assert_fail@plt+0x19f8>
   129e4:	ldr	r6, [pc, #704]	; 12cac <__assert_fail@plt+0x1a54>
   129e8:	ldrb	r3, [r4, #-16]
   129ec:	add	r6, pc, r6
   129f0:	orr	r3, r3, #10
   129f4:	strb	r3, [r4, #-16]
   129f8:	str	r5, [r6, #332]	; 0x14c
   129fc:	bl	11a1c <__assert_fail@plt+0x7c4>
   12a00:	mov	r0, r4
   12a04:	bl	12140 <__assert_fail@plt+0xee8>
   12a08:	ldr	r8, [r6, #332]	; 0x14c
   12a0c:	b	126cc <__assert_fail@plt+0x1474>
   12a10:	ldr	r3, [sp, #20]
   12a14:	ldr	r2, [r3, #336]	; 0x150
   12a18:	ldr	r3, [r7, #3472]	; 0xd90
   12a1c:	add	r2, r6, r2
   12a20:	cmp	r2, r3
   12a24:	bgt	129a0 <__assert_fail@plt+0x1748>
   12a28:	cmp	r0, #10
   12a2c:	cmnne	r0, #1
   12a30:	moveq	r4, #0
   12a34:	movne	r4, #1
   12a38:	b	129a0 <__assert_fail@plt+0x1748>
   12a3c:	mov	r0, fp
   12a40:	bl	111e0 <__uflow@plt>
   12a44:	mov	r1, r0
   12a48:	b	12864 <__assert_fail@plt+0x160c>
   12a4c:	uxtb	r1, r1
   12a50:	bl	111ec <__overflow@plt>
   12a54:	b	12848 <__assert_fail@plt+0x15f0>
   12a58:	ldrb	r2, [r3, #3502]	; 0xdae
   12a5c:	cmp	r2, #0
   12a60:	bne	12b0c <__assert_fail@plt+0x18b4>
   12a64:	cmp	r6, r8
   12a68:	bne	129d0 <__assert_fail@plt+0x1778>
   12a6c:	ldr	r1, [pc, #572]	; 12cb0 <__assert_fail@plt+0x1a58>
   12a70:	ldr	r2, [r3, #3472]	; 0xd90
   12a74:	add	r1, pc, r1
   12a78:	ldr	r1, [r1, #336]	; 0x150
   12a7c:	add	r6, r6, r1
   12a80:	cmp	r6, r2
   12a84:	bgt	129d0 <__assert_fail@plt+0x1778>
   12a88:	cmp	r5, #10
   12a8c:	cmnne	r5, #1
   12a90:	beq	129d0 <__assert_fail@plt+0x1778>
   12a94:	ldr	r1, [r3, #3460]	; 0xd84
   12a98:	cmp	r1, r2
   12a9c:	bne	129d0 <__assert_fail@plt+0x1778>
   12aa0:	ldr	r6, [pc, #524]	; 12cb4 <__assert_fail@plt+0x1a5c>
   12aa4:	mov	r4, r3
   12aa8:	mov	r1, r5
   12aac:	add	r6, pc, r6
   12ab0:	mov	r0, fp
   12ab4:	bl	12338 <__assert_fail@plt+0x10e0>
   12ab8:	ldr	r2, [r4, #3484]	; 0xd9c
   12abc:	ldr	r3, [r4, #3504]	; 0xdb0
   12ac0:	cmp	r2, r3
   12ac4:	mov	r1, r0
   12ac8:	bne	12bf8 <__assert_fail@plt+0x19a0>
   12acc:	ldr	ip, [r6, #336]	; 0x150
   12ad0:	ldr	r3, [r4, #3472]	; 0xd90
   12ad4:	add	r2, r2, ip
   12ad8:	cmp	r2, r3
   12adc:	bgt	12bf8 <__assert_fail@plt+0x19a0>
   12ae0:	cmp	r0, #10
   12ae4:	cmnne	r0, #1
   12ae8:	beq	12bf8 <__assert_fail@plt+0x19a0>
   12aec:	ldr	r2, [r4, #3460]	; 0xd84
   12af0:	cmp	r3, r2
   12af4:	beq	12ab0 <__assert_fail@plt+0x1858>
   12af8:	b	12bf8 <__assert_fail@plt+0x19a0>
   12afc:	str	r2, [sp]
   12b00:	bl	111ec <__overflow@plt>
   12b04:	ldr	r2, [sp]
   12b08:	b	127ec <__assert_fail@plt+0x1594>
   12b0c:	cmp	r6, r8
   12b10:	bne	129d0 <__assert_fail@plt+0x1778>
   12b14:	ldr	r1, [pc, #412]	; 12cb8 <__assert_fail@plt+0x1a60>
   12b18:	ldr	r2, [r3, #3472]	; 0xd90
   12b1c:	add	r1, pc, r1
   12b20:	ldr	r1, [r1, #336]	; 0x150
   12b24:	add	r6, r6, r1
   12b28:	cmp	r6, r2
   12b2c:	bgt	129d0 <__assert_fail@plt+0x1778>
   12b30:	cmp	r5, #10
   12b34:	cmnne	r5, #1
   12b38:	beq	129d0 <__assert_fail@plt+0x1778>
   12b3c:	ldr	r1, [r3, #3456]	; 0xd80
   12b40:	cmp	r2, r1
   12b44:	beq	129d0 <__assert_fail@plt+0x1778>
   12b48:	ldr	r6, [pc, #364]	; 12cbc <__assert_fail@plt+0x1a64>
   12b4c:	mov	r4, r3
   12b50:	mov	r1, r5
   12b54:	add	r6, pc, r6
   12b58:	mov	r0, fp
   12b5c:	bl	12338 <__assert_fail@plt+0x10e0>
   12b60:	ldr	r2, [r4, #3484]	; 0xd9c
   12b64:	ldr	r3, [r4, #3504]	; 0xdb0
   12b68:	cmp	r2, r3
   12b6c:	mov	r1, r0
   12b70:	bne	12bf8 <__assert_fail@plt+0x19a0>
   12b74:	ldr	ip, [r6, #336]	; 0x150
   12b78:	ldr	r3, [r4, #3472]	; 0xd90
   12b7c:	add	r2, r2, ip
   12b80:	cmp	r2, r3
   12b84:	bgt	12bf8 <__assert_fail@plt+0x19a0>
   12b88:	cmp	r0, #10
   12b8c:	cmnne	r0, #1
   12b90:	beq	12bf8 <__assert_fail@plt+0x19a0>
   12b94:	ldr	r2, [r4, #3460]	; 0xd84
   12b98:	cmp	r3, r2
   12b9c:	beq	12b58 <__assert_fail@plt+0x1900>
   12ba0:	b	12bf8 <__assert_fail@plt+0x19a0>
   12ba4:	ldr	r1, [pc, #276]	; 12cc0 <__assert_fail@plt+0x1a68>
   12ba8:	ldr	r2, [r3, #3472]	; 0xd90
   12bac:	add	r1, pc, r1
   12bb0:	ldr	r1, [r1, #336]	; 0x150
   12bb4:	add	r6, r6, r1
   12bb8:	cmp	r6, r2
   12bbc:	bgt	129d0 <__assert_fail@plt+0x1778>
   12bc0:	cmp	r5, #10
   12bc4:	cmnne	r5, #1
   12bc8:	beq	129d0 <__assert_fail@plt+0x1778>
   12bcc:	ldr	r4, [pc, #240]	; 12cc4 <__assert_fail@plt+0x1a6c>
   12bd0:	mov	r6, r3
   12bd4:	mov	r1, r5
   12bd8:	add	r4, pc, r4
   12bdc:	mov	r0, fp
   12be0:	bl	12338 <__assert_fail@plt+0x10e0>
   12be4:	ldr	r3, [r6, #3484]	; 0xd9c
   12be8:	ldr	r2, [r6, #3504]	; 0xdb0
   12bec:	cmp	r3, r2
   12bf0:	mov	r1, r0
   12bf4:	beq	12c00 <__assert_fail@plt+0x19a8>
   12bf8:	mov	r5, r1
   12bfc:	b	129d0 <__assert_fail@plt+0x1778>
   12c00:	ldr	r0, [r4, #336]	; 0x150
   12c04:	ldr	r2, [r6, #3472]	; 0xd90
   12c08:	add	r3, r3, r0
   12c0c:	cmp	r3, r2
   12c10:	bgt	12bf8 <__assert_fail@plt+0x19a0>
   12c14:	cmp	r1, #10
   12c18:	cmnne	r1, #1
   12c1c:	beq	12bf8 <__assert_fail@plt+0x19a0>
   12c20:	ldr	r3, [r6, #3460]	; 0xd84
   12c24:	cmp	r2, r3
   12c28:	beq	12bdc <__assert_fail@plt+0x1984>
   12c2c:	b	12bf8 <__assert_fail@plt+0x19a0>
   12c30:	mov	r1, #10
   12c34:	bl	111ec <__overflow@plt>
   12c38:	b	128a4 <__assert_fail@plt+0x164c>
   12c3c:	mov	r1, #10
   12c40:	mvn	r8, #0
   12c44:	bl	111ec <__overflow@plt>
   12c48:	mov	r1, r8
   12c4c:	b	12864 <__assert_fail@plt+0x160c>
   12c50:	ldr	r0, [pc, #112]	; 12cc8 <__assert_fail@plt+0x1a70>
   12c54:	movw	r2, #618	; 0x26a
   12c58:	ldr	r1, [pc, #108]	; 12ccc <__assert_fail@plt+0x1a74>
   12c5c:	ldr	r3, [pc, #108]	; 12cd0 <__assert_fail@plt+0x1a78>
   12c60:	add	r0, pc, r0
   12c64:	add	r1, pc, r1
   12c68:	add	r3, pc, r3
   12c6c:	bl	11258 <__assert_fail@plt>
   12c70:	strdeq	fp, [r1], -r8
   12c74:	strdeq	fp, [r1], -r0
   12c78:	andeq	sp, r1, r0, asr #21
   12c7c:			; <UNDEFINED> instruction: 0x0001dab0
   12c80:	andeq	r5, r1, ip, lsr r9
   12c84:	andeq	fp, r1, ip, lsl #21
   12c88:	andeq	fp, r1, ip, ror sl
   12c8c:	andeq	fp, r1, r4, ror sl
   12c90:	andeq	fp, r1, ip, ror #20
   12c94:	andeq	r0, r0, ip, lsl r1
   12c98:			; <UNDEFINED> instruction: 0x0001b9b0
   12c9c:	andeq	sp, r1, r8, lsl r8
   12ca0:	andeq	r5, r1, r8, lsl r8
   12ca4:			; <UNDEFINED> instruction: 0x0001b7bc
   12ca8:	andeq	r5, r1, ip, lsr #15
   12cac:	andeq	sp, r1, r4, ror r7
   12cb0:	andeq	sp, r1, ip, ror #13
   12cb4:			; <UNDEFINED> instruction: 0x0001d6b4
   12cb8:	andeq	sp, r1, r4, asr #12
   12cbc:	andeq	sp, r1, ip, lsl #12
   12cc0:			; <UNDEFINED> instruction: 0x0001d5b4
   12cc4:	andeq	sp, r1, r8, lsl #11
   12cc8:	strdeq	r3, [r0], -r8
   12ccc:	andeq	r3, r0, r4, lsl r6
   12cd0:	andeq	r3, r0, ip, asr #11
   12cd4:	push	{r4, r5, r6, lr}
   12cd8:	subs	r4, r0, #0
   12cdc:	ldr	r5, [pc, #512]	; 12ee4 <__assert_fail@plt+0x1c8c>
   12ce0:	add	r5, pc, r5
   12ce4:	beq	12d2c <__assert_fail@plt+0x1ad4>
   12ce8:	ldr	r3, [pc, #504]	; 12ee8 <__assert_fail@plt+0x1c90>
   12cec:	mov	r2, #5
   12cf0:	ldr	r1, [pc, #500]	; 12eec <__assert_fail@plt+0x1c94>
   12cf4:	mov	r0, #0
   12cf8:	ldr	r3, [r5, r3]
   12cfc:	add	r1, pc, r1
   12d00:	ldr	r6, [r3]
   12d04:	bl	11048 <dcgettext@plt>
   12d08:	ldr	r3, [pc, #480]	; 12ef0 <__assert_fail@plt+0x1c98>
   12d0c:	mov	r1, #1
   12d10:	ldr	r3, [r5, r3]
   12d14:	ldr	r3, [r3]
   12d18:	mov	r2, r0
   12d1c:	mov	r0, r6
   12d20:	bl	111bc <__fprintf_chk@plt>
   12d24:	mov	r0, r4
   12d28:	bl	11138 <exit@plt>
   12d2c:	ldr	r1, [pc, #448]	; 12ef4 <__assert_fail@plt+0x1c9c>
   12d30:	mov	r2, #5
   12d34:	add	r1, pc, r1
   12d38:	bl	11048 <dcgettext@plt>
   12d3c:	ldr	r3, [pc, #428]	; 12ef0 <__assert_fail@plt+0x1c98>
   12d40:	ldr	r6, [r5, r3]
   12d44:	ldr	r2, [r6]
   12d48:	mov	r1, r0
   12d4c:	mov	r0, #1
   12d50:	bl	111a4 <__printf_chk@plt>
   12d54:	ldr	r1, [pc, #412]	; 12ef8 <__assert_fail@plt+0x1ca0>
   12d58:	mov	r2, #5
   12d5c:	mov	r0, r4
   12d60:	add	r1, pc, r1
   12d64:	bl	11048 <dcgettext@plt>
   12d68:	ldr	r3, [pc, #396]	; 12efc <__assert_fail@plt+0x1ca4>
   12d6c:	ldr	r5, [r5, r3]
   12d70:	ldr	r1, [r5]
   12d74:	bl	10fb8 <fputs_unlocked@plt>
   12d78:	ldr	r1, [pc, #384]	; 12f00 <__assert_fail@plt+0x1ca8>
   12d7c:	mov	r2, #5
   12d80:	mov	r0, r4
   12d84:	add	r1, pc, r1
   12d88:	bl	11048 <dcgettext@plt>
   12d8c:	ldr	r1, [r5]
   12d90:	bl	10fb8 <fputs_unlocked@plt>
   12d94:	ldr	r1, [pc, #360]	; 12f04 <__assert_fail@plt+0x1cac>
   12d98:	mov	r2, #5
   12d9c:	mov	r0, r4
   12da0:	add	r1, pc, r1
   12da4:	bl	11048 <dcgettext@plt>
   12da8:	ldr	r1, [r5]
   12dac:	bl	10fb8 <fputs_unlocked@plt>
   12db0:	ldr	r1, [pc, #336]	; 12f08 <__assert_fail@plt+0x1cb0>
   12db4:	mov	r2, #5
   12db8:	mov	r0, r4
   12dbc:	add	r1, pc, r1
   12dc0:	bl	11048 <dcgettext@plt>
   12dc4:	ldr	r1, [r5]
   12dc8:	bl	10fb8 <fputs_unlocked@plt>
   12dcc:	ldr	r1, [pc, #312]	; 12f0c <__assert_fail@plt+0x1cb4>
   12dd0:	mov	r2, #5
   12dd4:	mov	r0, r4
   12dd8:	add	r1, pc, r1
   12ddc:	bl	11048 <dcgettext@plt>
   12de0:	ldr	r1, [r5]
   12de4:	bl	10fb8 <fputs_unlocked@plt>
   12de8:	ldr	r1, [pc, #288]	; 12f10 <__assert_fail@plt+0x1cb8>
   12dec:	mov	r2, #5
   12df0:	mov	r0, r4
   12df4:	add	r1, pc, r1
   12df8:	bl	11048 <dcgettext@plt>
   12dfc:	ldr	r1, [r5]
   12e00:	bl	10fb8 <fputs_unlocked@plt>
   12e04:	ldr	r1, [pc, #264]	; 12f14 <__assert_fail@plt+0x1cbc>
   12e08:	mov	r2, #5
   12e0c:	mov	r0, r4
   12e10:	add	r1, pc, r1
   12e14:	bl	11048 <dcgettext@plt>
   12e18:	ldr	r1, [r5]
   12e1c:	bl	10fb8 <fputs_unlocked@plt>
   12e20:	ldr	r1, [pc, #240]	; 12f18 <__assert_fail@plt+0x1cc0>
   12e24:	mov	r2, #5
   12e28:	mov	r0, r4
   12e2c:	add	r1, pc, r1
   12e30:	bl	11048 <dcgettext@plt>
   12e34:	ldr	r2, [pc, #224]	; 12f1c <__assert_fail@plt+0x1cc4>
   12e38:	ldr	r3, [pc, #224]	; 12f20 <__assert_fail@plt+0x1cc8>
   12e3c:	add	r2, pc, r2
   12e40:	add	r3, pc, r3
   12e44:	mov	r1, r0
   12e48:	mov	r0, #1
   12e4c:	bl	111a4 <__printf_chk@plt>
   12e50:	mov	r0, #5
   12e54:	mov	r1, r4
   12e58:	bl	111f8 <setlocale@plt>
   12e5c:	cmp	r0, #0
   12e60:	beq	12e7c <__assert_fail@plt+0x1c24>
   12e64:	ldr	r1, [pc, #184]	; 12f24 <__assert_fail@plt+0x1ccc>
   12e68:	mov	r2, #3
   12e6c:	add	r1, pc, r1
   12e70:	bl	11234 <strncmp@plt>
   12e74:	cmp	r0, #0
   12e78:	bne	12eb0 <__assert_fail@plt+0x1c58>
   12e7c:	ldr	r1, [pc, #164]	; 12f28 <__assert_fail@plt+0x1cd0>
   12e80:	mov	r2, #5
   12e84:	mov	r0, #0
   12e88:	add	r1, pc, r1
   12e8c:	bl	11048 <dcgettext@plt>
   12e90:	mov	r5, r0
   12e94:	ldr	r0, [r6]
   12e98:	bl	13070 <close_stdout@@Base+0x118>
   12e9c:	mov	r1, r5
   12ea0:	mov	r2, r0
   12ea4:	mov	r0, #1
   12ea8:	bl	111a4 <__printf_chk@plt>
   12eac:	b	12d24 <__assert_fail@plt+0x1acc>
   12eb0:	ldr	r1, [pc, #116]	; 12f2c <__assert_fail@plt+0x1cd4>
   12eb4:	mov	r2, #5
   12eb8:	mov	r0, r4
   12ebc:	add	r1, pc, r1
   12ec0:	bl	11048 <dcgettext@plt>
   12ec4:	mov	r5, r0
   12ec8:	ldr	r0, [r6]
   12ecc:	bl	13070 <close_stdout@@Base+0x118>
   12ed0:	mov	r1, r5
   12ed4:	mov	r2, r0
   12ed8:	mov	r0, #1
   12edc:	bl	111a4 <__printf_chk@plt>
   12ee0:	b	12e7c <__assert_fail@plt+0x1c24>
   12ee4:	andeq	r5, r1, r8, lsl r3
   12ee8:	andeq	r0, r0, r8, lsl #2
   12eec:	andeq	r3, r0, r8, lsl #11
   12ef0:	andeq	r0, r0, r8, lsr #2
   12ef4:	andeq	r3, r0, r8, ror r5
   12ef8:	andeq	r3, r0, r8, ror r5
   12efc:	andeq	r0, r0, ip, lsl r1
   12f00:	ldrdeq	r3, [r0], -r8
   12f04:	andeq	r3, r0, r8, lsl #12
   12f08:	andeq	r3, r0, r4, lsl #14
   12f0c:	andeq	r3, r0, r8, lsl #16
   12f10:	andeq	r3, r0, ip, lsl r8
   12f14:	andeq	r3, r0, r8, lsr r8
   12f18:	andeq	r3, r0, r4, asr r8
   12f1c:	andeq	r3, r0, ip, asr r8
   12f20:	andeq	r3, r0, r8, ror #16
   12f24:	andeq	r3, r0, r4, ror #16
   12f28:	muleq	r0, r4, r8
   12f2c:	andeq	r3, r0, r8, lsl r8
   12f30:	ldr	r3, [pc, #8]	; 12f40 <__assert_fail@plt+0x1ce8>
   12f34:	add	r3, pc, r3
   12f38:	str	r0, [r3]
   12f3c:	bx	lr
   12f40:	andeq	sp, r1, r0, lsl #7
   12f44:	ldr	r3, [pc, #8]	; 12f54 <__assert_fail@plt+0x1cfc>
   12f48:	add	r3, pc, r3
   12f4c:	strb	r0, [r3, #4]
   12f50:	bx	lr
   12f54:	andeq	sp, r1, ip, ror #6

00012f58 <close_stdout@@Base>:
   12f58:	push	{r4, r5, r6, r7, lr}
   12f5c:	sub	sp, sp, #12
   12f60:	ldr	r4, [pc, #228]	; 1304c <close_stdout@@Base+0xf4>
   12f64:	ldr	r3, [pc, #228]	; 13050 <close_stdout@@Base+0xf8>
   12f68:	add	r4, pc, r4
   12f6c:	ldr	r3, [r4, r3]
   12f70:	ldr	r0, [r3]
   12f74:	bl	1589c <close_stdout@@Base+0x2944>
   12f78:	cmp	r0, #0
   12f7c:	beq	12fa4 <close_stdout@@Base+0x4c>
   12f80:	ldr	r3, [pc, #204]	; 13054 <close_stdout@@Base+0xfc>
   12f84:	add	r3, pc, r3
   12f88:	ldrb	r3, [r3, #4]
   12f8c:	cmp	r3, #0
   12f90:	beq	12fc4 <close_stdout@@Base+0x6c>
   12f94:	bl	11174 <__errno_location@plt>
   12f98:	ldr	r3, [r0]
   12f9c:	cmp	r3, #32
   12fa0:	bne	12fc4 <close_stdout@@Base+0x6c>
   12fa4:	ldr	r3, [pc, #172]	; 13058 <close_stdout@@Base+0x100>
   12fa8:	ldr	r3, [r4, r3]
   12fac:	ldr	r0, [r3]
   12fb0:	bl	1589c <close_stdout@@Base+0x2944>
   12fb4:	cmp	r0, #0
   12fb8:	bne	13018 <close_stdout@@Base+0xc0>
   12fbc:	add	sp, sp, #12
   12fc0:	pop	{r4, r5, r6, r7, pc}
   12fc4:	ldr	r1, [pc, #144]	; 1305c <close_stdout@@Base+0x104>
   12fc8:	mov	r0, #0
   12fcc:	mov	r2, #5
   12fd0:	add	r1, pc, r1
   12fd4:	bl	11048 <dcgettext@plt>
   12fd8:	ldr	r3, [pc, #128]	; 13060 <close_stdout@@Base+0x108>
   12fdc:	ldr	r5, [pc, r3]
   12fe0:	cmp	r5, #0
   12fe4:	mov	r6, r0
   12fe8:	beq	13028 <close_stdout@@Base+0xd0>
   12fec:	bl	11174 <__errno_location@plt>
   12ff0:	ldr	r7, [r0]
   12ff4:	mov	r0, r5
   12ff8:	bl	14850 <close_stdout@@Base+0x18f8>
   12ffc:	ldr	r2, [pc, #96]	; 13064 <close_stdout@@Base+0x10c>
   13000:	str	r6, [sp]
   13004:	mov	r1, r7
   13008:	add	r2, pc, r2
   1300c:	mov	r3, r0
   13010:	mov	r0, #0
   13014:	bl	110cc <error@plt>
   13018:	ldr	r3, [pc, #72]	; 13068 <close_stdout@@Base+0x110>
   1301c:	ldr	r3, [r4, r3]
   13020:	ldr	r0, [r3]
   13024:	bl	1100c <_exit@plt>
   13028:	bl	11174 <__errno_location@plt>
   1302c:	ldr	r2, [pc, #56]	; 1306c <close_stdout@@Base+0x114>
   13030:	add	r2, pc, r2
   13034:	mov	r3, r0
   13038:	mov	r0, r5
   1303c:	ldr	r1, [r3]
   13040:	mov	r3, r6
   13044:	bl	110cc <error@plt>
   13048:	b	13018 <close_stdout@@Base+0xc0>
   1304c:	muleq	r1, r0, r0
   13050:	andeq	r0, r0, ip, lsl r1
   13054:	andeq	sp, r1, r0, lsr r3
   13058:	andeq	r0, r0, r8, lsl #2
   1305c:	ldrdeq	r3, [r0], -r4
   13060:	ldrdeq	sp, [r1], -r8
   13064:	andeq	r3, r0, r8, lsr #17
   13068:	andeq	r0, r0, r0, lsr #2
   1306c:	andeq	r3, r0, r4, lsl #17
   13070:	ldrb	r3, [r0]
   13074:	cmp	r3, #47	; 0x2f
   13078:	bne	13094 <close_stdout@@Base+0x13c>
   1307c:	add	r2, r0, #1
   13080:	mov	r0, r2
   13084:	add	r2, r2, #1
   13088:	ldrb	r3, [r0]
   1308c:	cmp	r3, #47	; 0x2f
   13090:	beq	13080 <close_stdout@@Base+0x128>
   13094:	cmp	r3, #0
   13098:	bxeq	lr
   1309c:	mov	r2, r0
   130a0:	mov	r1, #0
   130a4:	cmp	r3, #47	; 0x2f
   130a8:	moveq	r1, #1
   130ac:	beq	130bc <close_stdout@@Base+0x164>
   130b0:	cmp	r1, #0
   130b4:	movne	r0, r2
   130b8:	movne	r1, #0
   130bc:	ldrb	r3, [r2, #1]!
   130c0:	cmp	r3, #0
   130c4:	bne	130a4 <close_stdout@@Base+0x14c>
   130c8:	bx	lr
   130cc:	push	{r4, lr}
   130d0:	mov	r4, r0
   130d4:	bl	11150 <strlen@plt>
   130d8:	cmp	r0, #1
   130dc:	popls	{r4, pc}
   130e0:	sub	r3, r0, #1
   130e4:	ldrb	r2, [r4, r3]
   130e8:	cmp	r2, #47	; 0x2f
   130ec:	popne	{r4, pc}
   130f0:	mov	r0, r3
   130f4:	cmp	r0, #1
   130f8:	sub	r3, r3, #1
   130fc:	beq	13110 <close_stdout@@Base+0x1b8>
   13100:	ldrb	r2, [r4, r3]
   13104:	cmp	r2, #47	; 0x2f
   13108:	popne	{r4, pc}
   1310c:	b	130f0 <close_stdout@@Base+0x198>
   13110:	pop	{r4, pc}
   13114:	b	10fdc <posix_fadvise64@plt>
   13118:	cmp	r0, #0
   1311c:	push	{r4, r5, r6, lr}
   13120:	mov	r6, r1
   13124:	sub	sp, sp, #16
   13128:	beq	1314c <close_stdout@@Base+0x1f4>
   1312c:	mov	r4, #0
   13130:	mov	r5, #0
   13134:	bl	111b0 <fileno@plt>
   13138:	str	r6, [sp, #8]
   1313c:	mov	r2, r4
   13140:	mov	r3, r5
   13144:	strd	r4, [sp]
   13148:	bl	13114 <close_stdout@@Base+0x1bc>
   1314c:	add	sp, sp, #16
   13150:	pop	{r4, r5, r6, pc}
   13154:	push	{r3, r4, r5, r6, r7, lr}
   13158:	subs	r4, r0, #0
   1315c:	ldr	r5, [pc, #172]	; 13210 <close_stdout@@Base+0x2b8>
   13160:	add	r5, pc, r5
   13164:	beq	131ec <close_stdout@@Base+0x294>
   13168:	mov	r1, #47	; 0x2f
   1316c:	bl	11204 <strrchr@plt>
   13170:	subs	r6, r0, #0
   13174:	beq	131d0 <close_stdout@@Base+0x278>
   13178:	add	r7, r6, #1
   1317c:	rsb	r3, r4, r7
   13180:	cmp	r3, #6
   13184:	ble	131d0 <close_stdout@@Base+0x278>
   13188:	ldr	r1, [pc, #132]	; 13214 <close_stdout@@Base+0x2bc>
   1318c:	sub	r0, r6, #6
   13190:	mov	r2, #7
   13194:	add	r1, pc, r1
   13198:	bl	11234 <strncmp@plt>
   1319c:	cmp	r0, #0
   131a0:	bne	131d0 <close_stdout@@Base+0x278>
   131a4:	ldr	r1, [pc, #108]	; 13218 <close_stdout@@Base+0x2c0>
   131a8:	mov	r0, r7
   131ac:	mov	r2, #3
   131b0:	add	r1, pc, r1
   131b4:	bl	11234 <strncmp@plt>
   131b8:	cmp	r0, #0
   131bc:	movne	r4, r7
   131c0:	ldreq	r3, [pc, #84]	; 1321c <close_stdout@@Base+0x2c4>
   131c4:	addeq	r4, r6, #4
   131c8:	ldreq	r3, [r5, r3]
   131cc:	streq	r4, [r3]
   131d0:	ldr	r2, [pc, #72]	; 13220 <close_stdout@@Base+0x2c8>
   131d4:	ldr	r3, [pc, #72]	; 13224 <close_stdout@@Base+0x2cc>
   131d8:	ldr	r2, [r5, r2]
   131dc:	str	r4, [r2]
   131e0:	ldr	r3, [r5, r3]
   131e4:	str	r4, [r3]
   131e8:	pop	{r3, r4, r5, r6, r7, pc}
   131ec:	ldr	r3, [pc, #52]	; 13228 <close_stdout@@Base+0x2d0>
   131f0:	mov	r1, #1
   131f4:	ldr	r0, [pc, #48]	; 1322c <close_stdout@@Base+0x2d4>
   131f8:	mov	r2, #55	; 0x37
   131fc:	ldr	r3, [r5, r3]
   13200:	add	r0, pc, r0
   13204:	ldr	r3, [r3]
   13208:	bl	11084 <fwrite@plt>
   1320c:	bl	11240 <abort@plt>
   13210:	muleq	r1, r8, lr
   13214:	andeq	r3, r0, ip, asr r7
   13218:	andeq	r3, r0, r8, asr #14
   1321c:	andeq	r0, r0, r0, lsr r1
   13220:	andeq	r0, r0, r8, lsr #2
   13224:	andeq	r0, r0, r4, lsr #2
   13228:	andeq	r0, r0, r8, lsl #2
   1322c:			; <UNDEFINED> instruction: 0x000036b8
   13230:	push	{r3, lr}
   13234:	mov	r3, r0
   13238:	mov	r2, #0
   1323c:	cmp	r1, #8
   13240:	str	r2, [r3], #4
   13244:	add	r3, r3, #4
   13248:	str	r2, [r0, #4]
   1324c:	str	r2, [r3], #4
   13250:	str	r2, [r3], #4
   13254:	str	r2, [r3], #4
   13258:	str	r2, [r3], #4
   1325c:	str	r2, [r3], #4
   13260:	str	r2, [r3], #4
   13264:	str	r2, [r3], #4
   13268:	str	r2, [r3], #4
   1326c:	str	r2, [r3], #4
   13270:	str	r2, [r3]
   13274:	beq	13280 <close_stdout@@Base+0x328>
   13278:	str	r1, [r0]
   1327c:	pop	{r3, pc}
   13280:	bl	11240 <abort@plt>
   13284:	push	{r4, r5, r6, lr}
   13288:	mov	r4, r0
   1328c:	mov	r6, r1
   13290:	mov	r0, #0
   13294:	mov	r1, r4
   13298:	mov	r2, #5
   1329c:	bl	11048 <dcgettext@plt>
   132a0:	cmp	r0, r4
   132a4:	mov	r5, r0
   132a8:	beq	132b0 <close_stdout@@Base+0x358>
   132ac:	pop	{r4, r5, r6, pc}
   132b0:	bl	1591c <close_stdout@@Base+0x29c4>
   132b4:	ldrb	r3, [r0]
   132b8:	bic	r3, r3, #32
   132bc:	cmp	r3, #85	; 0x55
   132c0:	bne	13334 <close_stdout@@Base+0x3dc>
   132c4:	ldrb	r3, [r0, #1]
   132c8:	bic	r3, r3, #32
   132cc:	cmp	r3, #84	; 0x54
   132d0:	bne	13320 <close_stdout@@Base+0x3c8>
   132d4:	ldrb	r3, [r0, #2]
   132d8:	bic	r3, r3, #32
   132dc:	cmp	r3, #70	; 0x46
   132e0:	bne	13320 <close_stdout@@Base+0x3c8>
   132e4:	ldrb	r3, [r0, #3]
   132e8:	cmp	r3, #45	; 0x2d
   132ec:	bne	13320 <close_stdout@@Base+0x3c8>
   132f0:	ldrb	r3, [r0, #4]
   132f4:	cmp	r3, #56	; 0x38
   132f8:	bne	13320 <close_stdout@@Base+0x3c8>
   132fc:	ldrb	r3, [r0, #5]
   13300:	cmp	r3, #0
   13304:	bne	13320 <close_stdout@@Base+0x3c8>
   13308:	ldrb	r3, [r5]
   1330c:	cmp	r3, #96	; 0x60
   13310:	beq	133ac <close_stdout@@Base+0x454>
   13314:	ldr	r0, [pc, #180]	; 133d0 <close_stdout@@Base+0x478>
   13318:	add	r0, pc, r0
   1331c:	pop	{r4, r5, r6, pc}
   13320:	cmp	r6, #7
   13324:	beq	133b8 <close_stdout@@Base+0x460>
   13328:	ldr	r0, [pc, #164]	; 133d4 <close_stdout@@Base+0x47c>
   1332c:	add	r0, pc, r0
   13330:	pop	{r4, r5, r6, pc}
   13334:	cmp	r3, #71	; 0x47
   13338:	bne	13320 <close_stdout@@Base+0x3c8>
   1333c:	ldrb	r3, [r0, #1]
   13340:	bic	r3, r3, #32
   13344:	cmp	r3, #66	; 0x42
   13348:	bne	13320 <close_stdout@@Base+0x3c8>
   1334c:	ldrb	r3, [r0, #2]
   13350:	cmp	r3, #49	; 0x31
   13354:	bne	13320 <close_stdout@@Base+0x3c8>
   13358:	ldrb	r3, [r0, #3]
   1335c:	cmp	r3, #56	; 0x38
   13360:	bne	13320 <close_stdout@@Base+0x3c8>
   13364:	ldrb	r3, [r0, #4]
   13368:	cmp	r3, #48	; 0x30
   1336c:	bne	13320 <close_stdout@@Base+0x3c8>
   13370:	ldrb	r3, [r0, #5]
   13374:	cmp	r3, #51	; 0x33
   13378:	bne	13320 <close_stdout@@Base+0x3c8>
   1337c:	ldrb	r3, [r0, #6]
   13380:	cmp	r3, #48	; 0x30
   13384:	bne	13320 <close_stdout@@Base+0x3c8>
   13388:	ldrb	r3, [r0, #7]
   1338c:	cmp	r3, #0
   13390:	bne	13320 <close_stdout@@Base+0x3c8>
   13394:	ldrb	r3, [r5]
   13398:	cmp	r3, #96	; 0x60
   1339c:	beq	133c4 <close_stdout@@Base+0x46c>
   133a0:	ldr	r0, [pc, #48]	; 133d8 <close_stdout@@Base+0x480>
   133a4:	add	r0, pc, r0
   133a8:	pop	{r4, r5, r6, pc}
   133ac:	ldr	r0, [pc, #40]	; 133dc <close_stdout@@Base+0x484>
   133b0:	add	r0, pc, r0
   133b4:	pop	{r4, r5, r6, pc}
   133b8:	ldr	r0, [pc, #32]	; 133e0 <close_stdout@@Base+0x488>
   133bc:	add	r0, pc, r0
   133c0:	pop	{r4, r5, r6, pc}
   133c4:	ldr	r0, [pc, #24]	; 133e4 <close_stdout@@Base+0x48c>
   133c8:	add	r0, pc, r0
   133cc:	pop	{r4, r5, r6, pc}
   133d0:	andeq	r3, r0, r4, lsl #12
   133d4:	strdeq	r3, [r0], -r8
   133d8:	andeq	r3, r0, ip, ror r5
   133dc:	andeq	r3, r0, ip, ror r5
   133e0:	andeq	r2, r0, ip, lsl #29
   133e4:	andeq	r3, r0, r0, ror #10
   133e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133ec:	sub	sp, sp, #124	; 0x7c
   133f0:	ldr	ip, [pc, #3304]	; 140e0 <close_stdout@@Base+0x1188>
   133f4:	mov	sl, r1
   133f8:	str	r0, [sp, #40]	; 0x28
   133fc:	mov	r8, r3
   13400:	ldr	r0, [pc, #3292]	; 140e4 <close_stdout@@Base+0x118c>
   13404:	add	ip, pc, ip
   13408:	str	r2, [sp, #32]
   1340c:	ldr	r1, [sp, #164]	; 0xa4
   13410:	mov	r3, ip
   13414:	ldr	r0, [ip, r0]
   13418:	ldr	r2, [sp, #172]	; 0xac
   1341c:	ubfx	r1, r1, #1, #1
   13420:	str	r1, [sp, #36]	; 0x24
   13424:	str	r0, [sp, #56]	; 0x38
   13428:	ldr	r0, [sp, #168]	; 0xa8
   1342c:	ldr	r1, [sp, #176]	; 0xb0
   13430:	str	r2, [sp, #72]	; 0x48
   13434:	str	r0, [sp, #48]	; 0x30
   13438:	ldr	r0, [sp, #56]	; 0x38
   1343c:	str	r1, [sp, #68]	; 0x44
   13440:	ldr	r3, [r0]
   13444:	str	r3, [sp, #116]	; 0x74
   13448:	bl	1109c <__ctype_get_mb_cur_max@plt>
   1344c:	ldr	r2, [sp, #160]	; 0xa0
   13450:	str	r0, [sp, #64]	; 0x40
   13454:	cmp	r2, #8
   13458:	addls	pc, pc, r2, lsl #2
   1345c:	b	13fbc <close_stdout@@Base+0x1064>
   13460:	b	13484 <close_stdout@@Base+0x52c>
   13464:	b	13cd4 <close_stdout@@Base+0xd7c>
   13468:	b	13d04 <close_stdout@@Base+0xdac>
   1346c:	b	13bb4 <close_stdout@@Base+0xc5c>
   13470:	b	13bf4 <close_stdout@@Base+0xc9c>
   13474:	b	13c20 <close_stdout@@Base+0xcc8>
   13478:	b	13c40 <close_stdout@@Base+0xce8>
   1347c:	b	13c40 <close_stdout@@Base+0xce8>
   13480:	b	13c40 <close_stdout@@Base+0xce8>
   13484:	mov	r2, #0
   13488:	str	r2, [sp, #36]	; 0x24
   1348c:	mov	r9, r2
   13490:	str	r2, [sp, #24]
   13494:	str	r2, [sp, #28]
   13498:	str	r2, [sp, #52]	; 0x34
   1349c:	ldr	r0, [sp, #36]	; 0x24
   134a0:	mov	fp, #0
   134a4:	ldr	r1, [sp, #24]
   134a8:	eor	r2, r0, #1
   134ac:	eor	r3, r1, #1
   134b0:	and	r3, r2, r3
   134b4:	and	r2, r1, r0
   134b8:	str	r3, [sp, #44]	; 0x2c
   134bc:	str	r2, [sp, #76]	; 0x4c
   134c0:	cmn	r8, #1
   134c4:	beq	13844 <close_stdout@@Base+0x8ec>
   134c8:	subs	r3, fp, r8
   134cc:	movne	r3, #1
   134d0:	cmp	r3, #0
   134d4:	beq	1385c <close_stdout@@Base+0x904>
   134d8:	ldr	r3, [sp, #28]
   134dc:	ldr	r0, [sp, #24]
   134e0:	adds	r7, r3, #0
   134e4:	movne	r7, #1
   134e8:	ands	r6, r7, r0
   134ec:	bne	13d48 <close_stdout@@Base+0xdf0>
   134f0:	ldr	r1, [sp, #32]
   134f4:	add	r5, r1, fp
   134f8:	ldrb	r4, [r5]
   134fc:	cmp	r4, #126	; 0x7e
   13500:	addls	pc, pc, r4, lsl #2
   13504:	b	13ac8 <close_stdout@@Base+0xb70>
   13508:	b	139d4 <close_stdout@@Base+0xa7c>
   1350c:	b	13ac8 <close_stdout@@Base+0xb70>
   13510:	b	13ac8 <close_stdout@@Base+0xb70>
   13514:	b	13ac8 <close_stdout@@Base+0xb70>
   13518:	b	13ac8 <close_stdout@@Base+0xb70>
   1351c:	b	13ac8 <close_stdout@@Base+0xb70>
   13520:	b	13ac8 <close_stdout@@Base+0xb70>
   13524:	b	139bc <close_stdout@@Base+0xa64>
   13528:	b	139a4 <close_stdout@@Base+0xa4c>
   1352c:	b	139cc <close_stdout@@Base+0xa74>
   13530:	b	139c4 <close_stdout@@Base+0xa6c>
   13534:	b	139b4 <close_stdout@@Base+0xa5c>
   13538:	b	139ac <close_stdout@@Base+0xa54>
   1353c:	b	13970 <close_stdout@@Base+0xa18>
   13540:	b	13ac8 <close_stdout@@Base+0xb70>
   13544:	b	13ac8 <close_stdout@@Base+0xb70>
   13548:	b	13ac8 <close_stdout@@Base+0xb70>
   1354c:	b	13ac8 <close_stdout@@Base+0xb70>
   13550:	b	13ac8 <close_stdout@@Base+0xb70>
   13554:	b	13ac8 <close_stdout@@Base+0xb70>
   13558:	b	13ac8 <close_stdout@@Base+0xb70>
   1355c:	b	13ac8 <close_stdout@@Base+0xb70>
   13560:	b	13ac8 <close_stdout@@Base+0xb70>
   13564:	b	13ac8 <close_stdout@@Base+0xb70>
   13568:	b	13ac8 <close_stdout@@Base+0xb70>
   1356c:	b	13ac8 <close_stdout@@Base+0xb70>
   13570:	b	13ac8 <close_stdout@@Base+0xb70>
   13574:	b	13ac8 <close_stdout@@Base+0xb70>
   13578:	b	13ac8 <close_stdout@@Base+0xb70>
   1357c:	b	13ac8 <close_stdout@@Base+0xb70>
   13580:	b	13ac8 <close_stdout@@Base+0xb70>
   13584:	b	13ac8 <close_stdout@@Base+0xb70>
   13588:	b	138fc <close_stdout@@Base+0x9a4>
   1358c:	b	138fc <close_stdout@@Base+0x9a4>
   13590:	b	138fc <close_stdout@@Base+0x9a4>
   13594:	b	138f4 <close_stdout@@Base+0x99c>
   13598:	b	138fc <close_stdout@@Base+0x9a4>
   1359c:	b	137d0 <close_stdout@@Base+0x878>
   135a0:	b	138fc <close_stdout@@Base+0x9a4>
   135a4:	b	13a70 <close_stdout@@Base+0xb18>
   135a8:	b	138fc <close_stdout@@Base+0x9a4>
   135ac:	b	138fc <close_stdout@@Base+0x9a4>
   135b0:	b	138fc <close_stdout@@Base+0x9a4>
   135b4:	b	137d0 <close_stdout@@Base+0x878>
   135b8:	b	137d0 <close_stdout@@Base+0x878>
   135bc:	b	137d0 <close_stdout@@Base+0x878>
   135c0:	b	137d0 <close_stdout@@Base+0x878>
   135c4:	b	137d0 <close_stdout@@Base+0x878>
   135c8:	b	137d0 <close_stdout@@Base+0x878>
   135cc:	b	137d0 <close_stdout@@Base+0x878>
   135d0:	b	137d0 <close_stdout@@Base+0x878>
   135d4:	b	137d0 <close_stdout@@Base+0x878>
   135d8:	b	137d0 <close_stdout@@Base+0x878>
   135dc:	b	137d0 <close_stdout@@Base+0x878>
   135e0:	b	137d0 <close_stdout@@Base+0x878>
   135e4:	b	137d0 <close_stdout@@Base+0x878>
   135e8:	b	137d0 <close_stdout@@Base+0x878>
   135ec:	b	137d0 <close_stdout@@Base+0x878>
   135f0:	b	137d0 <close_stdout@@Base+0x878>
   135f4:	b	138fc <close_stdout@@Base+0x9a4>
   135f8:	b	138fc <close_stdout@@Base+0x9a4>
   135fc:	b	138fc <close_stdout@@Base+0x9a4>
   13600:	b	138fc <close_stdout@@Base+0x9a4>
   13604:	b	13704 <close_stdout@@Base+0x7ac>
   13608:	b	13ac8 <close_stdout@@Base+0xb70>
   1360c:	b	137d0 <close_stdout@@Base+0x878>
   13610:	b	137d0 <close_stdout@@Base+0x878>
   13614:	b	137d0 <close_stdout@@Base+0x878>
   13618:	b	137d0 <close_stdout@@Base+0x878>
   1361c:	b	137d0 <close_stdout@@Base+0x878>
   13620:	b	137d0 <close_stdout@@Base+0x878>
   13624:	b	137d0 <close_stdout@@Base+0x878>
   13628:	b	137d0 <close_stdout@@Base+0x878>
   1362c:	b	137d0 <close_stdout@@Base+0x878>
   13630:	b	137d0 <close_stdout@@Base+0x878>
   13634:	b	137d0 <close_stdout@@Base+0x878>
   13638:	b	137d0 <close_stdout@@Base+0x878>
   1363c:	b	137d0 <close_stdout@@Base+0x878>
   13640:	b	137d0 <close_stdout@@Base+0x878>
   13644:	b	137d0 <close_stdout@@Base+0x878>
   13648:	b	137d0 <close_stdout@@Base+0x878>
   1364c:	b	137d0 <close_stdout@@Base+0x878>
   13650:	b	137d0 <close_stdout@@Base+0x878>
   13654:	b	137d0 <close_stdout@@Base+0x878>
   13658:	b	137d0 <close_stdout@@Base+0x878>
   1365c:	b	137d0 <close_stdout@@Base+0x878>
   13660:	b	137d0 <close_stdout@@Base+0x878>
   13664:	b	137d0 <close_stdout@@Base+0x878>
   13668:	b	137d0 <close_stdout@@Base+0x878>
   1366c:	b	137d0 <close_stdout@@Base+0x878>
   13670:	b	137d0 <close_stdout@@Base+0x878>
   13674:	b	138fc <close_stdout@@Base+0x9a4>
   13678:	b	13a54 <close_stdout@@Base+0xafc>
   1367c:	b	137d0 <close_stdout@@Base+0x878>
   13680:	b	138fc <close_stdout@@Base+0x9a4>
   13684:	b	137d0 <close_stdout@@Base+0x878>
   13688:	b	138fc <close_stdout@@Base+0x9a4>
   1368c:	b	137d0 <close_stdout@@Base+0x878>
   13690:	b	137d0 <close_stdout@@Base+0x878>
   13694:	b	137d0 <close_stdout@@Base+0x878>
   13698:	b	137d0 <close_stdout@@Base+0x878>
   1369c:	b	137d0 <close_stdout@@Base+0x878>
   136a0:	b	137d0 <close_stdout@@Base+0x878>
   136a4:	b	137d0 <close_stdout@@Base+0x878>
   136a8:	b	137d0 <close_stdout@@Base+0x878>
   136ac:	b	137d0 <close_stdout@@Base+0x878>
   136b0:	b	137d0 <close_stdout@@Base+0x878>
   136b4:	b	137d0 <close_stdout@@Base+0x878>
   136b8:	b	137d0 <close_stdout@@Base+0x878>
   136bc:	b	137d0 <close_stdout@@Base+0x878>
   136c0:	b	137d0 <close_stdout@@Base+0x878>
   136c4:	b	137d0 <close_stdout@@Base+0x878>
   136c8:	b	137d0 <close_stdout@@Base+0x878>
   136cc:	b	137d0 <close_stdout@@Base+0x878>
   136d0:	b	137d0 <close_stdout@@Base+0x878>
   136d4:	b	137d0 <close_stdout@@Base+0x878>
   136d8:	b	137d0 <close_stdout@@Base+0x878>
   136dc:	b	137d0 <close_stdout@@Base+0x878>
   136e0:	b	137d0 <close_stdout@@Base+0x878>
   136e4:	b	137d0 <close_stdout@@Base+0x878>
   136e8:	b	137d0 <close_stdout@@Base+0x878>
   136ec:	b	137d0 <close_stdout@@Base+0x878>
   136f0:	b	137d0 <close_stdout@@Base+0x878>
   136f4:	b	138dc <close_stdout@@Base+0x984>
   136f8:	b	138fc <close_stdout@@Base+0x9a4>
   136fc:	b	138dc <close_stdout@@Base+0x984>
   13700:	b	138f4 <close_stdout@@Base+0x99c>
   13704:	ldr	r3, [sp, #160]	; 0xa0
   13708:	cmp	r3, #2
   1370c:	beq	13f98 <close_stdout@@Base+0x1040>
   13710:	cmp	r3, #3
   13714:	bne	137d0 <close_stdout@@Base+0x878>
   13718:	ldr	r1, [sp, #164]	; 0xa4
   1371c:	tst	r1, #4
   13720:	beq	137d0 <close_stdout@@Base+0x878>
   13724:	add	r3, fp, #2
   13728:	cmp	r8, r3
   1372c:	bls	137d0 <close_stdout@@Base+0x878>
   13730:	ldrb	r2, [r5, #1]
   13734:	mov	r1, #1
   13738:	cmp	r2, #63	; 0x3f
   1373c:	bne	137d0 <close_stdout@@Base+0x878>
   13740:	ldr	r0, [sp, #32]
   13744:	ldrb	ip, [r0, r3]
   13748:	sub	r0, ip, #33	; 0x21
   1374c:	uxtb	r0, r0
   13750:	cmp	r0, #29
   13754:	bhi	137d0 <close_stdout@@Base+0x878>
   13758:	lsl	r1, r1, r0
   1375c:	movw	r0, #20929	; 0x51c1
   13760:	movt	r0, #14336	; 0x3800
   13764:	and	r0, r1, r0
   13768:	cmp	r0, #0
   1376c:	beq	137d0 <close_stdout@@Base+0x878>
   13770:	ldr	r1, [sp, #36]	; 0x24
   13774:	cmp	r1, #0
   13778:	bne	13918 <close_stdout@@Base+0x9c0>
   1377c:	cmp	r9, sl
   13780:	mov	r4, ip
   13784:	mov	fp, r3
   13788:	ldrcc	r0, [sp, #40]	; 0x28
   1378c:	strbcc	r2, [r0, r9]
   13790:	add	r2, r9, #1
   13794:	cmp	sl, r2
   13798:	ldrhi	r0, [sp, #40]	; 0x28
   1379c:	movhi	r1, #34	; 0x22
   137a0:	strbhi	r1, [r0, r2]
   137a4:	add	r2, r9, #2
   137a8:	cmp	sl, r2
   137ac:	ldrhi	r0, [sp, #40]	; 0x28
   137b0:	movhi	r1, #34	; 0x22
   137b4:	strbhi	r1, [r0, r2]
   137b8:	add	r2, r9, #3
   137bc:	cmp	sl, r2
   137c0:	add	r9, r9, #4
   137c4:	ldrhi	r0, [sp, #40]	; 0x28
   137c8:	movhi	r1, #63	; 0x3f
   137cc:	strbhi	r1, [r0, r2]
   137d0:	ldr	r0, [sp, #44]	; 0x2c
   137d4:	cmp	r0, #0
   137d8:	bne	13800 <close_stdout@@Base+0x8a8>
   137dc:	ldr	r1, [sp, #48]	; 0x30
   137e0:	cmp	r1, #0
   137e4:	beq	13800 <close_stdout@@Base+0x8a8>
   137e8:	ubfx	r2, r4, #5, #8
   137ec:	and	r3, r4, #31
   137f0:	ldr	r2, [r1, r2, lsl #2]
   137f4:	lsr	r3, r2, r3
   137f8:	tst	r3, #1
   137fc:	bne	13808 <close_stdout@@Base+0x8b0>
   13800:	cmp	r6, #0
   13804:	beq	13828 <close_stdout@@Base+0x8d0>
   13808:	ldr	r2, [sp, #36]	; 0x24
   1380c:	cmp	r2, #0
   13810:	bne	13918 <close_stdout@@Base+0x9c0>
   13814:	cmp	r9, sl
   13818:	ldrcc	r0, [sp, #40]	; 0x28
   1381c:	movcc	r3, #92	; 0x5c
   13820:	strbcc	r3, [r0, r9]
   13824:	add	r9, r9, #1
   13828:	add	fp, fp, #1
   1382c:	cmp	r9, sl
   13830:	ldrcc	r1, [sp, #40]	; 0x28
   13834:	strbcc	r4, [r1, r9]
   13838:	cmn	r8, #1
   1383c:	add	r9, r9, #1
   13840:	bne	134c8 <close_stdout@@Base+0x570>
   13844:	ldr	r2, [sp, #32]
   13848:	ldrb	r3, [r2, fp]
   1384c:	adds	r3, r3, #0
   13850:	movne	r3, #1
   13854:	cmp	r3, #0
   13858:	bne	134d8 <close_stdout@@Base+0x580>
   1385c:	ldr	r3, [sp, #160]	; 0xa0
   13860:	cmp	r9, #0
   13864:	cmpeq	r3, #2
   13868:	bne	13878 <close_stdout@@Base+0x920>
   1386c:	ldr	r0, [sp, #36]	; 0x24
   13870:	cmp	r0, #0
   13874:	bne	13918 <close_stdout@@Base+0x9c0>
   13878:	ldr	r1, [sp, #36]	; 0x24
   1387c:	ldr	r2, [sp, #52]	; 0x34
   13880:	eor	r3, r1, #1
   13884:	cmp	r2, #0
   13888:	moveq	r3, #0
   1388c:	andne	r3, r3, #1
   13890:	cmp	r3, #0
   13894:	beq	138c0 <close_stdout@@Base+0x968>
   13898:	ldrb	r3, [r2]
   1389c:	cmp	r3, #0
   138a0:	beq	138c0 <close_stdout@@Base+0x968>
   138a4:	ldr	r1, [sp, #40]	; 0x28
   138a8:	cmp	sl, r9
   138ac:	strbhi	r3, [r1, r9]
   138b0:	ldrb	r3, [r2, #1]!
   138b4:	add	r9, r9, #1
   138b8:	cmp	r3, #0
   138bc:	bne	138a8 <close_stdout@@Base+0x950>
   138c0:	cmp	r9, sl
   138c4:	movcs	r0, r9
   138c8:	ldrcc	r1, [sp, #40]	; 0x28
   138cc:	movcc	r3, #0
   138d0:	movcc	r0, r9
   138d4:	strbcc	r3, [r1, r9]
   138d8:	b	13954 <close_stdout@@Base+0x9fc>
   138dc:	cmn	r8, #1
   138e0:	beq	13fa8 <close_stdout@@Base+0x1050>
   138e4:	subs	r3, r8, #1
   138e8:	movne	r3, #1
   138ec:	cmp	r3, #0
   138f0:	bne	137d0 <close_stdout@@Base+0x878>
   138f4:	cmp	fp, #0
   138f8:	bne	137d0 <close_stdout@@Base+0x878>
   138fc:	ldr	r3, [sp, #36]	; 0x24
   13900:	ldr	r0, [sp, #160]	; 0xa0
   13904:	cmp	r0, #2
   13908:	movne	r3, #0
   1390c:	andeq	r3, r3, #1
   13910:	cmp	r3, #0
   13914:	beq	137d0 <close_stdout@@Base+0x878>
   13918:	ldr	r2, [sp, #164]	; 0xa4
   1391c:	mov	ip, #0
   13920:	ldr	r0, [sp, #160]	; 0xa0
   13924:	bic	r3, r2, #2
   13928:	ldr	r1, [sp, #72]	; 0x48
   1392c:	ldr	r2, [sp, #68]	; 0x44
   13930:	stm	sp, {r0, r3}
   13934:	mov	r3, r8
   13938:	str	r1, [sp, #12]
   1393c:	mov	r1, sl
   13940:	str	r2, [sp, #16]
   13944:	ldr	r0, [sp, #40]	; 0x28
   13948:	ldr	r2, [sp, #32]
   1394c:	str	ip, [sp, #8]
   13950:	bl	133e8 <close_stdout@@Base+0x490>
   13954:	ldr	r1, [sp, #56]	; 0x38
   13958:	ldr	r2, [sp, #116]	; 0x74
   1395c:	ldr	r3, [r1]
   13960:	cmp	r2, r3
   13964:	bne	14098 <close_stdout@@Base+0x1140>
   13968:	add	sp, sp, #124	; 0x7c
   1396c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13970:	mov	r3, #114	; 0x72
   13974:	ldr	r2, [sp, #36]	; 0x24
   13978:	ldr	r0, [sp, #160]	; 0xa0
   1397c:	cmp	r0, #2
   13980:	movne	r2, #0
   13984:	andeq	r2, r2, #1
   13988:	cmp	r2, #0
   1398c:	bne	13918 <close_stdout@@Base+0x9c0>
   13990:	ldr	r1, [sp, #24]
   13994:	cmp	r1, #0
   13998:	beq	137d0 <close_stdout@@Base+0x878>
   1399c:	mov	r4, r3
   139a0:	b	13808 <close_stdout@@Base+0x8b0>
   139a4:	mov	r3, #98	; 0x62
   139a8:	b	13990 <close_stdout@@Base+0xa38>
   139ac:	mov	r3, #102	; 0x66
   139b0:	b	13990 <close_stdout@@Base+0xa38>
   139b4:	mov	r3, #118	; 0x76
   139b8:	b	13990 <close_stdout@@Base+0xa38>
   139bc:	mov	r3, #97	; 0x61
   139c0:	b	13990 <close_stdout@@Base+0xa38>
   139c4:	mov	r3, #110	; 0x6e
   139c8:	b	13974 <close_stdout@@Base+0xa1c>
   139cc:	mov	r3, #116	; 0x74
   139d0:	b	13974 <close_stdout@@Base+0xa1c>
   139d4:	ldr	r2, [sp, #24]
   139d8:	cmp	r2, #0
   139dc:	beq	13f84 <close_stdout@@Base+0x102c>
   139e0:	ldr	r3, [sp, #36]	; 0x24
   139e4:	cmp	r3, #0
   139e8:	bne	13918 <close_stdout@@Base+0x9c0>
   139ec:	cmp	r9, sl
   139f0:	add	r2, r9, #1
   139f4:	ldrcc	r0, [sp, #40]	; 0x28
   139f8:	movcc	r3, #92	; 0x5c
   139fc:	strbcc	r3, [r0, r9]
   13a00:	add	r3, fp, #1
   13a04:	cmp	r8, r3
   13a08:	bls	13a48 <close_stdout@@Base+0xaf0>
   13a0c:	ldr	r1, [sp, #32]
   13a10:	ldrb	r3, [r1, r3]
   13a14:	sub	r3, r3, #48	; 0x30
   13a18:	cmp	r3, #9
   13a1c:	bhi	13a48 <close_stdout@@Base+0xaf0>
   13a20:	cmp	sl, r2
   13a24:	ldrhi	r0, [sp, #40]	; 0x28
   13a28:	movhi	r3, #48	; 0x30
   13a2c:	strbhi	r3, [r0, r2]
   13a30:	add	r3, r9, #2
   13a34:	cmp	sl, r3
   13a38:	ldrhi	r1, [sp, #40]	; 0x28
   13a3c:	movhi	r2, #48	; 0x30
   13a40:	strbhi	r2, [r1, r3]
   13a44:	add	r2, r9, #3
   13a48:	mov	r9, r2
   13a4c:	mov	r4, #48	; 0x30
   13a50:	b	137dc <close_stdout@@Base+0x884>
   13a54:	ldr	r1, [sp, #76]	; 0x4c
   13a58:	cmp	r1, #0
   13a5c:	beq	13a68 <close_stdout@@Base+0xb10>
   13a60:	cmp	r7, #0
   13a64:	bne	13828 <close_stdout@@Base+0x8d0>
   13a68:	mov	r3, r4
   13a6c:	b	13974 <close_stdout@@Base+0xa1c>
   13a70:	ldr	r1, [sp, #160]	; 0xa0
   13a74:	cmp	r1, #2
   13a78:	bne	137d0 <close_stdout@@Base+0x878>
   13a7c:	ldr	r2, [sp, #36]	; 0x24
   13a80:	cmp	r2, #0
   13a84:	bne	13918 <close_stdout@@Base+0x9c0>
   13a88:	cmp	r9, sl
   13a8c:	ldrcc	r0, [sp, #40]	; 0x28
   13a90:	movcc	r3, #39	; 0x27
   13a94:	strbcc	r3, [r0, r9]
   13a98:	add	r3, r9, #1
   13a9c:	cmp	sl, r3
   13aa0:	ldrhi	r1, [sp, #40]	; 0x28
   13aa4:	movhi	r2, #92	; 0x5c
   13aa8:	strbhi	r2, [r1, r3]
   13aac:	add	r3, r9, #2
   13ab0:	cmp	sl, r3
   13ab4:	add	r9, r9, #3
   13ab8:	ldrhi	r0, [sp, #40]	; 0x28
   13abc:	movhi	r2, #39	; 0x27
   13ac0:	strbhi	r2, [r0, r3]
   13ac4:	b	137d0 <close_stdout@@Base+0x878>
   13ac8:	ldr	r1, [sp, #64]	; 0x40
   13acc:	cmp	r1, #1
   13ad0:	bne	13dc8 <close_stdout@@Base+0xe70>
   13ad4:	bl	1112c <__ctype_b_loc@plt>
   13ad8:	ldr	r2, [sp, #64]	; 0x40
   13adc:	sxth	r3, r4
   13ae0:	str	r2, [sp, #60]	; 0x3c
   13ae4:	lsl	r3, r3, #1
   13ae8:	ldr	r2, [r0]
   13aec:	ldrh	r2, [r2, r3]
   13af0:	eor	r2, r2, #16384	; 0x4000
   13af4:	ubfx	r2, r2, #14, #1
   13af8:	ldr	r1, [sp, #24]
   13afc:	ands	r2, r2, r1
   13b00:	beq	137d0 <close_stdout@@Base+0x878>
   13b04:	ldr	r3, [sp, #60]	; 0x3c
   13b08:	mov	r0, #92	; 0x5c
   13b0c:	ldr	r7, [sp, #36]	; 0x24
   13b10:	add	r1, r3, fp
   13b14:	str	r8, [sp, #60]	; 0x3c
   13b18:	ldr	r3, [sp, #40]	; 0x28
   13b1c:	b	13b80 <close_stdout@@Base+0xc28>
   13b20:	cmp	r7, #0
   13b24:	bne	13fc0 <close_stdout@@Base+0x1068>
   13b28:	add	ip, r9, #1
   13b2c:	cmp	r9, sl
   13b30:	strbcc	r0, [r3, r9]
   13b34:	cmp	sl, ip
   13b38:	lsrhi	r8, r4, #6
   13b3c:	addhi	r8, r8, #48	; 0x30
   13b40:	strbhi	r8, [r3, ip]
   13b44:	add	ip, r9, #2
   13b48:	add	r9, r9, #3
   13b4c:	cmp	sl, ip
   13b50:	ubfxhi	r8, r4, #3, #3
   13b54:	and	r4, r4, #7
   13b58:	add	r4, r4, #48	; 0x30
   13b5c:	addhi	r8, r8, #48	; 0x30
   13b60:	strbhi	r8, [r3, ip]
   13b64:	add	fp, fp, #1
   13b68:	cmp	r1, fp
   13b6c:	bls	13bac <close_stdout@@Base+0xc54>
   13b70:	cmp	r9, sl
   13b74:	strbcc	r4, [r3, r9]
   13b78:	ldrb	r4, [r5, #1]!
   13b7c:	add	r9, r9, #1
   13b80:	cmp	r2, #0
   13b84:	bne	13b20 <close_stdout@@Base+0xbc8>
   13b88:	cmp	r6, #0
   13b8c:	beq	13b64 <close_stdout@@Base+0xc0c>
   13b90:	add	fp, fp, #1
   13b94:	cmp	r9, sl
   13b98:	strbcc	r0, [r3, r9]
   13b9c:	cmp	r1, fp
   13ba0:	add	r9, r9, #1
   13ba4:	mov	r6, #0
   13ba8:	bhi	13b70 <close_stdout@@Base+0xc18>
   13bac:	ldr	r8, [sp, #60]	; 0x3c
   13bb0:	b	1382c <close_stdout@@Base+0x8d4>
   13bb4:	ldr	r3, [sp, #36]	; 0x24
   13bb8:	cmp	r3, #0
   13bbc:	bne	140c0 <close_stdout@@Base+0x1168>
   13bc0:	cmp	sl, #0
   13bc4:	beq	13fd8 <close_stdout@@Base+0x1080>
   13bc8:	ldr	r1, [sp, #40]	; 0x28
   13bcc:	mov	r0, #1
   13bd0:	ldr	r2, [pc, #1296]	; 140e8 <close_stdout@@Base+0x1190>
   13bd4:	mov	r3, #34	; 0x22
   13bd8:	str	r0, [sp, #24]
   13bdc:	mov	r9, r0
   13be0:	add	r2, pc, r2
   13be4:	str	r0, [sp, #28]
   13be8:	strb	r3, [r1]
   13bec:	str	r2, [sp, #52]	; 0x34
   13bf0:	b	1349c <close_stdout@@Base+0x544>
   13bf4:	ldr	r3, [pc, #1264]	; 140ec <close_stdout@@Base+0x1194>
   13bf8:	mov	r2, #1
   13bfc:	mov	r0, #3
   13c00:	str	r2, [sp, #36]	; 0x24
   13c04:	add	r3, pc, r3
   13c08:	str	r2, [sp, #24]
   13c0c:	str	r3, [sp, #52]	; 0x34
   13c10:	mov	r9, #0
   13c14:	str	r2, [sp, #28]
   13c18:	str	r0, [sp, #160]	; 0xa0
   13c1c:	b	1349c <close_stdout@@Base+0x544>
   13c20:	mov	r0, #0
   13c24:	mov	r1, #1
   13c28:	str	r0, [sp, #36]	; 0x24
   13c2c:	mov	r9, r0
   13c30:	str	r1, [sp, #24]
   13c34:	str	r0, [sp, #28]
   13c38:	str	r0, [sp, #52]	; 0x34
   13c3c:	b	1349c <close_stdout@@Base+0x544>
   13c40:	ldr	r3, [sp, #160]	; 0xa0
   13c44:	cmp	r3, #8
   13c48:	beq	13c74 <close_stdout@@Base+0xd1c>
   13c4c:	ldr	r0, [pc, #1180]	; 140f0 <close_stdout@@Base+0x1198>
   13c50:	mov	r1, r3
   13c54:	add	r0, pc, r0
   13c58:	bl	13284 <close_stdout@@Base+0x32c>
   13c5c:	ldr	r1, [sp, #160]	; 0xa0
   13c60:	str	r0, [sp, #72]	; 0x48
   13c64:	ldr	r0, [pc, #1160]	; 140f4 <close_stdout@@Base+0x119c>
   13c68:	add	r0, pc, r0
   13c6c:	bl	13284 <close_stdout@@Base+0x32c>
   13c70:	str	r0, [sp, #68]	; 0x44
   13c74:	ldr	r0, [sp, #36]	; 0x24
   13c78:	cmp	r0, #0
   13c7c:	movne	r9, #0
   13c80:	bne	13cb8 <close_stdout@@Base+0xd60>
   13c84:	ldr	r1, [sp, #72]	; 0x48
   13c88:	ldrb	r3, [r1]
   13c8c:	cmp	r3, #0
   13c90:	beq	14090 <close_stdout@@Base+0x1138>
   13c94:	mov	r2, r1
   13c98:	ldr	r1, [sp, #40]	; 0x28
   13c9c:	mov	r9, r0
   13ca0:	cmp	r9, sl
   13ca4:	strbcc	r3, [r1, r9]
   13ca8:	ldrb	r3, [r2, #1]!
   13cac:	add	r9, r9, #1
   13cb0:	cmp	r3, #0
   13cb4:	bne	13ca0 <close_stdout@@Base+0xd48>
   13cb8:	ldr	r0, [sp, #68]	; 0x44
   13cbc:	str	r0, [sp, #52]	; 0x34
   13cc0:	bl	11150 <strlen@plt>
   13cc4:	mov	r2, #1
   13cc8:	str	r2, [sp, #24]
   13ccc:	str	r0, [sp, #28]
   13cd0:	b	1349c <close_stdout@@Base+0x544>
   13cd4:	ldr	r3, [pc, #1052]	; 140f8 <close_stdout@@Base+0x11a0>
   13cd8:	mov	r2, #0
   13cdc:	mov	r1, #1
   13ce0:	mov	r0, #2
   13ce4:	add	r3, pc, r3
   13ce8:	str	r1, [sp, #36]	; 0x24
   13cec:	str	r2, [sp, #24]
   13cf0:	mov	r9, r2
   13cf4:	str	r1, [sp, #28]
   13cf8:	str	r3, [sp, #52]	; 0x34
   13cfc:	str	r0, [sp, #160]	; 0xa0
   13d00:	b	1349c <close_stdout@@Base+0x544>
   13d04:	ldr	r3, [sp, #36]	; 0x24
   13d08:	cmp	r3, #0
   13d0c:	bne	1409c <close_stdout@@Base+0x1144>
   13d10:	cmp	sl, #0
   13d14:	beq	13ff8 <close_stdout@@Base+0x10a0>
   13d18:	ldr	r1, [sp, #40]	; 0x28
   13d1c:	mov	r3, #39	; 0x27
   13d20:	ldr	r2, [sp, #36]	; 0x24
   13d24:	mov	r0, #1
   13d28:	mov	r9, r0
   13d2c:	str	r0, [sp, #28]
   13d30:	strb	r3, [r1]
   13d34:	ldr	r3, [pc, #960]	; 140fc <close_stdout@@Base+0x11a4>
   13d38:	str	r2, [sp, #24]
   13d3c:	add	r3, pc, r3
   13d40:	str	r3, [sp, #52]	; 0x34
   13d44:	b	1349c <close_stdout@@Base+0x544>
   13d48:	ldr	r2, [sp, #28]
   13d4c:	cmp	r2, #1
   13d50:	add	r4, fp, r2
   13d54:	movls	r3, #0
   13d58:	movhi	r3, #1
   13d5c:	cmn	r8, #1
   13d60:	movne	r3, #0
   13d64:	cmp	r3, #0
   13d68:	beq	13d78 <close_stdout@@Base+0xe20>
   13d6c:	ldr	r0, [sp, #32]
   13d70:	bl	11150 <strlen@plt>
   13d74:	mov	r8, r0
   13d78:	cmp	r8, r4
   13d7c:	ldrcc	r3, [sp, #32]
   13d80:	movcc	r6, #0
   13d84:	addcc	r5, r3, fp
   13d88:	bcc	134f8 <close_stdout@@Base+0x5a0>
   13d8c:	ldr	r0, [sp, #32]
   13d90:	ldr	r1, [sp, #52]	; 0x34
   13d94:	add	r5, r0, fp
   13d98:	ldr	r2, [sp, #28]
   13d9c:	mov	r0, r5
   13da0:	bl	1103c <memcmp@plt>
   13da4:	cmp	r0, #0
   13da8:	bne	13dc0 <close_stdout@@Base+0xe68>
   13dac:	ldr	r1, [sp, #36]	; 0x24
   13db0:	cmp	r1, #0
   13db4:	bne	13918 <close_stdout@@Base+0x9c0>
   13db8:	mov	r6, #1
   13dbc:	b	134f8 <close_stdout@@Base+0x5a0>
   13dc0:	mov	r6, #0
   13dc4:	b	134f8 <close_stdout@@Base+0x5a0>
   13dc8:	add	r7, sp, #108	; 0x6c
   13dcc:	cmn	r8, #1
   13dd0:	mov	r3, #0
   13dd4:	str	r3, [sp, #108]	; 0x6c
   13dd8:	str	r3, [r7, #4]
   13ddc:	beq	13fc8 <close_stdout@@Base+0x1070>
   13de0:	mov	r1, #0
   13de4:	ldr	r0, [sp, #32]
   13de8:	mov	ip, #1
   13dec:	str	r9, [sp, #88]	; 0x58
   13df0:	str	r6, [sp, #96]	; 0x60
   13df4:	mov	r9, r1
   13df8:	str	r5, [sp, #100]	; 0x64
   13dfc:	mov	r6, ip
   13e00:	mov	r5, r7
   13e04:	add	r3, sp, #104	; 0x68
   13e08:	sub	r0, r0, #1
   13e0c:	str	r3, [sp, #80]	; 0x50
   13e10:	str	r0, [sp, #84]	; 0x54
   13e14:	str	r1, [sp, #60]	; 0x3c
   13e18:	str	r4, [sp, #92]	; 0x5c
   13e1c:	ldr	r2, [sp, #32]
   13e20:	add	r7, r9, fp
   13e24:	add	r0, sp, #104	; 0x68
   13e28:	mov	r3, r5
   13e2c:	add	r4, r2, r7
   13e30:	rsb	r2, r7, r8
   13e34:	mov	r1, r4
   13e38:	bl	110c0 <mbrtowc@plt>
   13e3c:	subs	r2, r0, #0
   13e40:	beq	13f4c <close_stdout@@Base+0xff4>
   13e44:	cmn	r2, #1
   13e48:	beq	14074 <close_stdout@@Base+0x111c>
   13e4c:	cmn	r2, #2
   13e50:	beq	14018 <close_stdout@@Base+0x10c0>
   13e54:	ldr	r3, [sp, #36]	; 0x24
   13e58:	ldr	r0, [sp, #160]	; 0xa0
   13e5c:	cmp	r0, #2
   13e60:	movne	r3, #0
   13e64:	andeq	r3, r3, #1
   13e68:	cmp	r3, #0
   13e6c:	beq	13f28 <close_stdout@@Base+0xfd0>
   13e70:	cmp	r2, #1
   13e74:	beq	13f28 <close_stdout@@Base+0xfd0>
   13e78:	ldr	r1, [sp, #84]	; 0x54
   13e7c:	add	r3, r1, r2
   13e80:	add	r7, r3, r7
   13e84:	ldrb	r3, [r4, #1]!
   13e88:	sub	r3, r3, #91	; 0x5b
   13e8c:	cmp	r3, #33	; 0x21
   13e90:	addls	pc, pc, r3, lsl #2
   13e94:	b	13f20 <close_stdout@@Base+0xfc8>
   13e98:	b	13918 <close_stdout@@Base+0x9c0>
   13e9c:	b	13918 <close_stdout@@Base+0x9c0>
   13ea0:	b	13f20 <close_stdout@@Base+0xfc8>
   13ea4:	b	13918 <close_stdout@@Base+0x9c0>
   13ea8:	b	13f20 <close_stdout@@Base+0xfc8>
   13eac:	b	13918 <close_stdout@@Base+0x9c0>
   13eb0:	b	13f20 <close_stdout@@Base+0xfc8>
   13eb4:	b	13f20 <close_stdout@@Base+0xfc8>
   13eb8:	b	13f20 <close_stdout@@Base+0xfc8>
   13ebc:	b	13f20 <close_stdout@@Base+0xfc8>
   13ec0:	b	13f20 <close_stdout@@Base+0xfc8>
   13ec4:	b	13f20 <close_stdout@@Base+0xfc8>
   13ec8:	b	13f20 <close_stdout@@Base+0xfc8>
   13ecc:	b	13f20 <close_stdout@@Base+0xfc8>
   13ed0:	b	13f20 <close_stdout@@Base+0xfc8>
   13ed4:	b	13f20 <close_stdout@@Base+0xfc8>
   13ed8:	b	13f20 <close_stdout@@Base+0xfc8>
   13edc:	b	13f20 <close_stdout@@Base+0xfc8>
   13ee0:	b	13f20 <close_stdout@@Base+0xfc8>
   13ee4:	b	13f20 <close_stdout@@Base+0xfc8>
   13ee8:	b	13f20 <close_stdout@@Base+0xfc8>
   13eec:	b	13f20 <close_stdout@@Base+0xfc8>
   13ef0:	b	13f20 <close_stdout@@Base+0xfc8>
   13ef4:	b	13f20 <close_stdout@@Base+0xfc8>
   13ef8:	b	13f20 <close_stdout@@Base+0xfc8>
   13efc:	b	13f20 <close_stdout@@Base+0xfc8>
   13f00:	b	13f20 <close_stdout@@Base+0xfc8>
   13f04:	b	13f20 <close_stdout@@Base+0xfc8>
   13f08:	b	13f20 <close_stdout@@Base+0xfc8>
   13f0c:	b	13f20 <close_stdout@@Base+0xfc8>
   13f10:	b	13f20 <close_stdout@@Base+0xfc8>
   13f14:	b	13f20 <close_stdout@@Base+0xfc8>
   13f18:	b	13f20 <close_stdout@@Base+0xfc8>
   13f1c:	b	13918 <close_stdout@@Base+0x9c0>
   13f20:	cmp	r4, r7
   13f24:	bne	13e84 <close_stdout@@Base+0xf2c>
   13f28:	ldr	r0, [sp, #104]	; 0x68
   13f2c:	add	r9, r9, r2
   13f30:	bl	11078 <iswprint@plt>
   13f34:	cmp	r0, #0
   13f38:	mov	r0, r5
   13f3c:	moveq	r6, #0
   13f40:	bl	11024 <mbsinit@plt>
   13f44:	cmp	r0, #0
   13f48:	beq	13e1c <close_stdout@@Base+0xec4>
   13f4c:	mov	ip, r6
   13f50:	eor	r2, ip, #1
   13f54:	str	r9, [sp, #60]	; 0x3c
   13f58:	ldr	r4, [sp, #92]	; 0x5c
   13f5c:	uxtb	r2, r2
   13f60:	ldr	r9, [sp, #88]	; 0x58
   13f64:	ldr	r6, [sp, #96]	; 0x60
   13f68:	ldr	r5, [sp, #100]	; 0x64
   13f6c:	ldr	r3, [sp, #60]	; 0x3c
   13f70:	cmp	r3, #1
   13f74:	bls	13af8 <close_stdout@@Base+0xba0>
   13f78:	ldr	r0, [sp, #24]
   13f7c:	and	r2, r2, r0
   13f80:	b	13b04 <close_stdout@@Base+0xbac>
   13f84:	ldr	r2, [sp, #164]	; 0xa4
   13f88:	tst	r2, #1
   13f8c:	addne	fp, fp, #1
   13f90:	bne	134c0 <close_stdout@@Base+0x568>
   13f94:	b	137d0 <close_stdout@@Base+0x878>
   13f98:	ldr	r0, [sp, #36]	; 0x24
   13f9c:	cmp	r0, #0
   13fa0:	beq	137d0 <close_stdout@@Base+0x878>
   13fa4:	b	13918 <close_stdout@@Base+0x9c0>
   13fa8:	ldr	r2, [sp, #32]
   13fac:	ldrb	r3, [r2, #1]
   13fb0:	adds	r3, r3, #0
   13fb4:	movne	r3, #1
   13fb8:	b	138ec <close_stdout@@Base+0x994>
   13fbc:	bl	11240 <abort@plt>
   13fc0:	ldr	r8, [sp, #60]	; 0x3c
   13fc4:	b	13918 <close_stdout@@Base+0x9c0>
   13fc8:	ldr	r0, [sp, #32]
   13fcc:	bl	11150 <strlen@plt>
   13fd0:	mov	r8, r0
   13fd4:	b	13de0 <close_stdout@@Base+0xe88>
   13fd8:	ldr	r2, [pc, #288]	; 14100 <close_stdout@@Base+0x11a8>
   13fdc:	mov	r1, #1
   13fe0:	mov	r9, r1
   13fe4:	str	r1, [sp, #24]
   13fe8:	add	r2, pc, r2
   13fec:	str	r1, [sp, #28]
   13ff0:	str	r2, [sp, #52]	; 0x34
   13ff4:	b	1349c <close_stdout@@Base+0x544>
   13ff8:	ldr	r2, [pc, #260]	; 14104 <close_stdout@@Base+0x11ac>
   13ffc:	mov	r3, #1
   14000:	mov	r9, r3
   14004:	str	r3, [sp, #28]
   14008:	add	r2, pc, r2
   1400c:	str	sl, [sp, #24]
   14010:	str	r2, [sp, #52]	; 0x34
   14014:	b	1349c <close_stdout@@Base+0x544>
   14018:	cmp	r8, r7
   1401c:	str	r9, [sp, #60]	; 0x3c
   14020:	mov	ip, r4
   14024:	ldr	r6, [sp, #96]	; 0x60
   14028:	ldr	r9, [sp, #88]	; 0x58
   1402c:	ldr	r4, [sp, #92]	; 0x5c
   14030:	ldr	r5, [sp, #100]	; 0x64
   14034:	bls	1406c <close_stdout@@Base+0x1114>
   14038:	ldrb	r3, [ip]
   1403c:	cmp	r3, #0
   14040:	beq	1406c <close_stdout@@Base+0x1114>
   14044:	ldr	r3, [sp, #60]	; 0x3c
   14048:	b	14058 <close_stdout@@Base+0x1100>
   1404c:	ldrb	r2, [r5, r3]
   14050:	cmp	r2, #0
   14054:	beq	14068 <close_stdout@@Base+0x1110>
   14058:	add	r3, r3, #1
   1405c:	add	r2, fp, r3
   14060:	cmp	r8, r2
   14064:	bhi	1404c <close_stdout@@Base+0x10f4>
   14068:	str	r3, [sp, #60]	; 0x3c
   1406c:	mov	r2, #1
   14070:	b	13f6c <close_stdout@@Base+0x1014>
   14074:	str	r9, [sp, #60]	; 0x3c
   14078:	mov	r2, #1
   1407c:	ldr	r4, [sp, #92]	; 0x5c
   14080:	ldr	r6, [sp, #96]	; 0x60
   14084:	ldr	r9, [sp, #88]	; 0x58
   14088:	ldr	r5, [sp, #100]	; 0x64
   1408c:	b	13f6c <close_stdout@@Base+0x1014>
   14090:	ldr	r9, [sp, #36]	; 0x24
   14094:	b	13cb8 <close_stdout@@Base+0xd60>
   14098:	bl	11054 <__stack_chk_fail@plt>
   1409c:	ldr	r1, [pc, #100]	; 14108 <close_stdout@@Base+0x11b0>
   140a0:	mov	r3, #0
   140a4:	mov	r0, #1
   140a8:	str	r3, [sp, #24]
   140ac:	add	r1, pc, r1
   140b0:	str	r0, [sp, #28]
   140b4:	mov	r9, r3
   140b8:	str	r1, [sp, #52]	; 0x34
   140bc:	b	1349c <close_stdout@@Base+0x544>
   140c0:	ldr	r0, [pc, #68]	; 1410c <close_stdout@@Base+0x11b4>
   140c4:	mov	r3, #1
   140c8:	mov	r9, #0
   140cc:	str	r3, [sp, #24]
   140d0:	add	r0, pc, r0
   140d4:	str	r3, [sp, #28]
   140d8:	str	r0, [sp, #52]	; 0x34
   140dc:	b	1349c <close_stdout@@Base+0x544>
   140e0:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   140e4:	strdeq	r0, [r0], -ip
   140e8:	andeq	r2, r0, r8, ror #12
   140ec:	andeq	r2, r0, r4, asr #12
   140f0:	ldrdeq	r2, [r0], -ip
   140f4:			; <UNDEFINED> instruction: 0x00002cbc
   140f8:	andeq	r2, r0, r0, asr #24
   140fc:	andeq	r2, r0, r8, ror #23
   14100:	andeq	r2, r0, r0, ror #4
   14104:	andeq	r2, r0, ip, lsl r9
   14108:	andeq	r2, r0, r8, ror r8
   1410c:	andeq	r2, r0, r8, ror r1
   14110:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14114:	sub	sp, sp, #44	; 0x2c
   14118:	mov	r6, r0
   1411c:	mov	r9, r1
   14120:	mov	sl, r2
   14124:	mov	r4, r3
   14128:	bl	11174 <__errno_location@plt>
   1412c:	ldr	fp, [pc, #412]	; 142d0 <close_stdout@@Base+0x1378>
   14130:	cmp	r6, #0
   14134:	add	fp, pc, fp
   14138:	ldr	r5, [fp]
   1413c:	ldr	r1, [r0]
   14140:	mov	r8, r0
   14144:	str	r1, [sp, #36]	; 0x24
   14148:	blt	142c8 <close_stdout@@Base+0x1370>
   1414c:	ldr	r3, [pc, #384]	; 142d4 <close_stdout@@Base+0x137c>
   14150:	add	r3, pc, r3
   14154:	ldr	r3, [r3]
   14158:	cmp	r6, r3
   1415c:	bcc	141b0 <close_stdout@@Base+0x1258>
   14160:	add	r7, r6, #1
   14164:	cmn	r7, #-536870911	; 0xe0000001
   14168:	bhi	142cc <close_stdout@@Base+0x1374>
   1416c:	add	r3, fp, #4
   14170:	cmp	r5, r3
   14174:	beq	142a0 <close_stdout@@Base+0x1348>
   14178:	mov	r0, r5
   1417c:	lsl	r1, r7, #3
   14180:	bl	14fa8 <close_stdout@@Base+0x2050>
   14184:	mov	r5, r0
   14188:	str	r0, [fp]
   1418c:	ldr	fp, [pc, #324]	; 142d8 <close_stdout@@Base+0x1380>
   14190:	mov	r1, #0
   14194:	add	fp, pc, fp
   14198:	ldr	r0, [fp]
   1419c:	rsb	r2, r0, r7
   141a0:	add	r0, r5, r0, lsl #3
   141a4:	lsl	r2, r2, #3
   141a8:	bl	1118c <memset@plt>
   141ac:	str	r7, [fp]
   141b0:	add	r2, r4, #8
   141b4:	str	r2, [sp, #32]
   141b8:	ldr	r1, [r4]
   141bc:	add	fp, r5, r6, lsl #3
   141c0:	ldr	lr, [sp, #32]
   141c4:	mov	r2, r9
   141c8:	ldr	r3, [r4, #4]
   141cc:	ldr	ip, [r5, r6, lsl #3]
   141d0:	ldr	r7, [fp, #4]
   141d4:	orr	r3, r3, #1
   141d8:	str	r1, [sp]
   141dc:	str	r3, [sp, #4]
   141e0:	mov	r1, ip
   141e4:	str	lr, [sp, #8]
   141e8:	mov	r0, r7
   141ec:	ldr	lr, [r4, #40]	; 0x28
   141f0:	str	r3, [sp, #28]
   141f4:	mov	r3, sl
   141f8:	str	lr, [sp, #12]
   141fc:	ldr	lr, [r4, #44]	; 0x2c
   14200:	str	ip, [sp, #24]
   14204:	str	lr, [sp, #16]
   14208:	bl	133e8 <close_stdout@@Base+0x490>
   1420c:	ldr	ip, [sp, #24]
   14210:	cmp	ip, r0
   14214:	bhi	1428c <close_stdout@@Base+0x1334>
   14218:	ldr	r3, [pc, #188]	; 142dc <close_stdout@@Base+0x1384>
   1421c:	add	r1, r0, #1
   14220:	str	r1, [r5, r6, lsl #3]
   14224:	add	r3, pc, r3
   14228:	cmp	r7, r3
   1422c:	beq	14240 <close_stdout@@Base+0x12e8>
   14230:	mov	r0, r7
   14234:	str	r1, [sp, #24]
   14238:	bl	11000 <free@plt>
   1423c:	ldr	r1, [sp, #24]
   14240:	mov	r0, r1
   14244:	str	r1, [sp, #24]
   14248:	bl	14f50 <close_stdout@@Base+0x1ff8>
   1424c:	ldr	r3, [sp, #28]
   14250:	ldr	lr, [sp, #32]
   14254:	mov	r2, r9
   14258:	str	r0, [fp, #4]
   1425c:	mov	r7, r0
   14260:	ldr	ip, [r4]
   14264:	str	r3, [sp, #4]
   14268:	mov	r3, sl
   1426c:	str	lr, [sp, #8]
   14270:	str	ip, [sp]
   14274:	ldr	ip, [r4, #40]	; 0x28
   14278:	ldr	r1, [sp, #24]
   1427c:	str	ip, [sp, #12]
   14280:	ldr	ip, [r4, #44]	; 0x2c
   14284:	str	ip, [sp, #16]
   14288:	bl	133e8 <close_stdout@@Base+0x490>
   1428c:	ldr	r1, [sp, #36]	; 0x24
   14290:	mov	r0, r7
   14294:	str	r1, [r8]
   14298:	add	sp, sp, #44	; 0x2c
   1429c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142a0:	lsl	r1, r7, #3
   142a4:	mov	r0, #0
   142a8:	str	r3, [sp, #24]
   142ac:	bl	14fa8 <close_stdout@@Base+0x2050>
   142b0:	ldr	r3, [sp, #24]
   142b4:	mov	r5, r0
   142b8:	ldm	r3, {r0, r1}
   142bc:	str	r5, [fp]
   142c0:	stm	r5, {r0, r1}
   142c4:	b	1418c <close_stdout@@Base+0x1234>
   142c8:	bl	11240 <abort@plt>
   142cc:	bl	15164 <close_stdout@@Base+0x220c>
   142d0:	andeq	r4, r1, ip, lsr r0
   142d4:	andeq	r3, r1, ip, ror #31
   142d8:	andeq	r3, r1, r8, lsr #31
   142dc:	muleq	r1, ip, r0
   142e0:	push	{r4, r5, r6, lr}
   142e4:	mov	r5, r0
   142e8:	bl	11174 <__errno_location@plt>
   142ec:	cmp	r5, #0
   142f0:	mov	r1, #48	; 0x30
   142f4:	mov	r4, r0
   142f8:	ldr	r0, [pc, #24]	; 14318 <close_stdout@@Base+0x13c0>
   142fc:	ldr	r6, [r4]
   14300:	add	r0, pc, r0
   14304:	add	r0, r0, #256	; 0x100
   14308:	movne	r0, r5
   1430c:	bl	15124 <close_stdout@@Base+0x21cc>
   14310:	str	r6, [r4]
   14314:	pop	{r4, r5, r6, pc}
   14318:	andeq	fp, r1, r0, asr #31
   1431c:	cmp	r0, #0
   14320:	beq	1432c <close_stdout@@Base+0x13d4>
   14324:	ldr	r0, [r0]
   14328:	bx	lr
   1432c:	ldr	r0, [pc, #12]	; 14340 <close_stdout@@Base+0x13e8>
   14330:	add	r0, pc, r0
   14334:	add	r0, r0, #256	; 0x100
   14338:	ldr	r0, [r0]
   1433c:	bx	lr
   14340:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   14344:	cmp	r0, #0
   14348:	beq	14354 <close_stdout@@Base+0x13fc>
   1434c:	str	r1, [r0]
   14350:	bx	lr
   14354:	ldr	r0, [pc, #12]	; 14368 <close_stdout@@Base+0x1410>
   14358:	add	r0, pc, r0
   1435c:	add	r0, r0, #256	; 0x100
   14360:	str	r1, [r0]
   14364:	bx	lr
   14368:	andeq	fp, r1, r8, ror #30
   1436c:	cmp	r0, #0
   14370:	movne	r3, r0
   14374:	beq	143a4 <close_stdout@@Base+0x144c>
   14378:	lsr	ip, r1, #5
   1437c:	and	r1, r1, #31
   14380:	add	r3, r3, ip, lsl #2
   14384:	ldr	ip, [r3, #8]
   14388:	lsr	r0, ip, r1
   1438c:	eor	r2, r0, r2
   14390:	and	r0, r0, #1
   14394:	and	r2, r2, #1
   14398:	eor	ip, ip, r2, lsl r1
   1439c:	str	ip, [r3, #8]
   143a0:	bx	lr
   143a4:	ldr	r3, [pc, #8]	; 143b4 <close_stdout@@Base+0x145c>
   143a8:	add	r3, pc, r3
   143ac:	add	r3, r3, #256	; 0x100
   143b0:	b	14378 <close_stdout@@Base+0x1420>
   143b4:	andeq	fp, r1, r8, lsl pc
   143b8:	subs	r3, r0, #0
   143bc:	beq	143cc <close_stdout@@Base+0x1474>
   143c0:	ldr	r0, [r3, #4]
   143c4:	str	r1, [r3, #4]
   143c8:	bx	lr
   143cc:	ldr	r3, [pc, #8]	; 143dc <close_stdout@@Base+0x1484>
   143d0:	add	r3, pc, r3
   143d4:	add	r3, r3, #256	; 0x100
   143d8:	b	143c0 <close_stdout@@Base+0x1468>
   143dc:	strdeq	fp, [r1], -r0
   143e0:	cmp	r0, #0
   143e4:	push	{r3, lr}
   143e8:	beq	1440c <close_stdout@@Base+0x14b4>
   143ec:	cmp	r2, #0
   143f0:	cmpne	r1, #0
   143f4:	mov	r3, #8
   143f8:	strne	r1, [r0, #40]	; 0x28
   143fc:	str	r3, [r0]
   14400:	strne	r2, [r0, #44]	; 0x2c
   14404:	popne	{r3, pc}
   14408:	bl	11240 <abort@plt>
   1440c:	ldr	r0, [pc, #8]	; 1441c <close_stdout@@Base+0x14c4>
   14410:	add	r0, pc, r0
   14414:	add	r0, r0, #256	; 0x100
   14418:	b	143ec <close_stdout@@Base+0x1494>
   1441c:			; <UNDEFINED> instruction: 0x0001beb0
   14420:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14424:	sub	sp, sp, #24
   14428:	mov	r7, r0
   1442c:	mov	sl, r1
   14430:	ldr	r4, [sp, #56]	; 0x38
   14434:	mov	r9, r2
   14438:	mov	r8, r3
   1443c:	cmp	r4, #0
   14440:	beq	14494 <close_stdout@@Base+0x153c>
   14444:	bl	11174 <__errno_location@plt>
   14448:	ldr	r3, [r4]
   1444c:	add	lr, r4, #8
   14450:	mov	r1, sl
   14454:	mov	r2, r9
   14458:	ldr	r6, [r0]
   1445c:	mov	r5, r0
   14460:	str	r3, [sp]
   14464:	mov	r0, r7
   14468:	ldr	ip, [r4, #4]
   1446c:	mov	r3, r8
   14470:	stmib	sp, {ip, lr}
   14474:	ldr	ip, [r4, #40]	; 0x28
   14478:	str	ip, [sp, #12]
   1447c:	ldr	ip, [r4, #44]	; 0x2c
   14480:	str	ip, [sp, #16]
   14484:	bl	133e8 <close_stdout@@Base+0x490>
   14488:	str	r6, [r5]
   1448c:	add	sp, sp, #24
   14490:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14494:	ldr	r4, [pc, #8]	; 144a4 <close_stdout@@Base+0x154c>
   14498:	add	r4, pc, r4
   1449c:	add	r4, r4, #256	; 0x100
   144a0:	b	14444 <close_stdout@@Base+0x14ec>
   144a4:	andeq	fp, r1, r8, lsr #28
   144a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   144ac:	subs	r4, r3, #0
   144b0:	sub	sp, sp, #36	; 0x24
   144b4:	mov	r7, r0
   144b8:	mov	r6, r1
   144bc:	mov	r5, r2
   144c0:	beq	1457c <close_stdout@@Base+0x1624>
   144c4:	bl	11174 <__errno_location@plt>
   144c8:	ldr	r3, [r4]
   144cc:	ldr	sl, [r4, #4]
   144d0:	add	r9, r4, #8
   144d4:	mov	r8, r0
   144d8:	mov	r0, #0
   144dc:	ldr	r2, [r8]
   144e0:	cmp	r5, r0
   144e4:	orreq	sl, sl, #1
   144e8:	str	r9, [sp, #8]
   144ec:	mov	r1, r0
   144f0:	stm	sp, {r3, sl}
   144f4:	mov	r3, r6
   144f8:	ldr	ip, [r4, #40]	; 0x28
   144fc:	str	r2, [sp, #28]
   14500:	mov	r2, r7
   14504:	str	ip, [sp, #12]
   14508:	ldr	ip, [r4, #44]	; 0x2c
   1450c:	str	ip, [sp, #16]
   14510:	bl	133e8 <close_stdout@@Base+0x490>
   14514:	add	r1, r0, #1
   14518:	mov	fp, r0
   1451c:	str	r1, [sp, #24]
   14520:	mov	r0, r1
   14524:	bl	14f50 <close_stdout@@Base+0x1ff8>
   14528:	ldr	lr, [r4]
   1452c:	str	sl, [sp, #4]
   14530:	mov	r3, r6
   14534:	str	r9, [sp, #8]
   14538:	mov	r2, r7
   1453c:	str	lr, [sp]
   14540:	ldr	lr, [r4, #40]	; 0x28
   14544:	ldr	r1, [sp, #24]
   14548:	str	lr, [sp, #12]
   1454c:	ldr	lr, [r4, #44]	; 0x2c
   14550:	str	lr, [sp, #16]
   14554:	str	r0, [sp, #24]
   14558:	bl	133e8 <close_stdout@@Base+0x490>
   1455c:	ldr	r3, [sp, #28]
   14560:	cmp	r5, #0
   14564:	str	r3, [r8]
   14568:	ldr	ip, [sp, #24]
   1456c:	strne	fp, [r5]
   14570:	mov	r0, ip
   14574:	add	sp, sp, #36	; 0x24
   14578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1457c:	ldr	r4, [pc, #8]	; 1458c <close_stdout@@Base+0x1634>
   14580:	add	r4, pc, r4
   14584:	add	r4, r4, #256	; 0x100
   14588:	b	144c4 <close_stdout@@Base+0x156c>
   1458c:	andeq	fp, r1, r0, asr #26
   14590:	mov	r3, r2
   14594:	mov	r2, #0
   14598:	b	144a8 <close_stdout@@Base+0x1550>
   1459c:	ldr	r2, [pc, #152]	; 1463c <close_stdout@@Base+0x16e4>
   145a0:	push	{r3, r4, r5, r6, r7, lr}
   145a4:	add	r2, pc, r2
   145a8:	ldr	r3, [pc, #144]	; 14640 <close_stdout@@Base+0x16e8>
   145ac:	ldr	r6, [r2]
   145b0:	add	r3, pc, r3
   145b4:	cmp	r6, #1
   145b8:	ldr	r7, [r3]
   145bc:	movhi	r4, #1
   145c0:	movhi	r5, r7
   145c4:	bls	145e0 <close_stdout@@Base+0x1688>
   145c8:	ldr	r0, [r5, #12]
   145cc:	add	r4, r4, #1
   145d0:	bl	11000 <free@plt>
   145d4:	cmp	r4, r6
   145d8:	add	r5, r5, #8
   145dc:	bne	145c8 <close_stdout@@Base+0x1670>
   145e0:	ldr	r4, [pc, #92]	; 14644 <close_stdout@@Base+0x16ec>
   145e4:	ldr	r0, [r7, #4]
   145e8:	add	r4, pc, r4
   145ec:	cmp	r0, r4
   145f0:	beq	14608 <close_stdout@@Base+0x16b0>
   145f4:	bl	11000 <free@plt>
   145f8:	ldr	r3, [pc, #72]	; 14648 <close_stdout@@Base+0x16f0>
   145fc:	mov	r2, #256	; 0x100
   14600:	add	r3, pc, r3
   14604:	stmib	r3, {r2, r4}
   14608:	ldr	r4, [pc, #60]	; 1464c <close_stdout@@Base+0x16f4>
   1460c:	add	r4, pc, r4
   14610:	add	r5, r4, #4
   14614:	cmp	r7, r5
   14618:	beq	14628 <close_stdout@@Base+0x16d0>
   1461c:	mov	r0, r7
   14620:	bl	11000 <free@plt>
   14624:	str	r5, [r4]
   14628:	ldr	r3, [pc, #32]	; 14650 <close_stdout@@Base+0x16f8>
   1462c:	mov	r2, #1
   14630:	add	r3, pc, r3
   14634:	str	r2, [r3]
   14638:	pop	{r3, r4, r5, r6, r7, pc}
   1463c:	muleq	r1, r8, fp
   14640:	andeq	r3, r1, r0, asr #23
   14644:	ldrdeq	fp, [r1], -r8
   14648:	andeq	r3, r1, r0, ror fp
   1464c:	andeq	r3, r1, r4, ror #22
   14650:	andeq	r3, r1, ip, lsl #22
   14654:	ldr	r3, [pc, #12]	; 14668 <close_stdout@@Base+0x1710>
   14658:	mvn	r2, #0
   1465c:	add	r3, pc, r3
   14660:	add	r3, r3, #256	; 0x100
   14664:	b	14110 <close_stdout@@Base+0x11b8>
   14668:	andeq	fp, r1, r4, ror #24
   1466c:	ldr	r3, [pc, #8]	; 1467c <close_stdout@@Base+0x1724>
   14670:	add	r3, pc, r3
   14674:	add	r3, r3, #256	; 0x100
   14678:	b	14110 <close_stdout@@Base+0x11b8>
   1467c:	andeq	fp, r1, r0, asr ip
   14680:	mov	r1, r0
   14684:	mov	r0, #0
   14688:	b	14654 <close_stdout@@Base+0x16fc>
   1468c:	mov	r2, r1
   14690:	mov	r1, r0
   14694:	mov	r0, #0
   14698:	b	1466c <close_stdout@@Base+0x1714>
   1469c:	ldr	r3, [pc, #92]	; 14700 <close_stdout@@Base+0x17a8>
   146a0:	ldr	ip, [pc, #92]	; 14704 <close_stdout@@Base+0x17ac>
   146a4:	add	r3, pc, r3
   146a8:	push	{r4, r5, r6, r7, lr}
   146ac:	sub	sp, sp, #60	; 0x3c
   146b0:	ldr	r4, [r3, ip]
   146b4:	add	r5, sp, #4
   146b8:	mov	r7, r2
   146bc:	mov	r6, r0
   146c0:	mov	r0, r5
   146c4:	ldr	r3, [r4]
   146c8:	str	r3, [sp, #52]	; 0x34
   146cc:	bl	13230 <close_stdout@@Base+0x2d8>
   146d0:	mov	r3, r5
   146d4:	mvn	r2, #0
   146d8:	mov	r0, r6
   146dc:	mov	r1, r7
   146e0:	bl	14110 <close_stdout@@Base+0x11b8>
   146e4:	ldr	r2, [sp, #52]	; 0x34
   146e8:	ldr	r3, [r4]
   146ec:	cmp	r2, r3
   146f0:	bne	146fc <close_stdout@@Base+0x17a4>
   146f4:	add	sp, sp, #60	; 0x3c
   146f8:	pop	{r4, r5, r6, r7, pc}
   146fc:	bl	11054 <__stack_chk_fail@plt>
   14700:	andeq	r3, r1, r4, asr r9
   14704:	strdeq	r0, [r0], -ip
   14708:	ldr	ip, [pc, #96]	; 14770 <close_stdout@@Base+0x1818>
   1470c:	push	{r4, r5, r6, r7, r8, lr}
   14710:	add	ip, pc, ip
   14714:	ldr	lr, [pc, #88]	; 14774 <close_stdout@@Base+0x181c>
   14718:	sub	sp, sp, #56	; 0x38
   1471c:	mov	r8, r3
   14720:	add	r5, sp, #4
   14724:	mov	r7, r2
   14728:	mov	r6, r0
   1472c:	ldr	r4, [ip, lr]
   14730:	mov	r0, r5
   14734:	ldr	r3, [r4]
   14738:	str	r3, [sp, #52]	; 0x34
   1473c:	bl	13230 <close_stdout@@Base+0x2d8>
   14740:	mov	r2, r8
   14744:	mov	r3, r5
   14748:	mov	r0, r6
   1474c:	mov	r1, r7
   14750:	bl	14110 <close_stdout@@Base+0x11b8>
   14754:	ldr	r2, [sp, #52]	; 0x34
   14758:	ldr	r3, [r4]
   1475c:	cmp	r2, r3
   14760:	bne	1476c <close_stdout@@Base+0x1814>
   14764:	add	sp, sp, #56	; 0x38
   14768:	pop	{r4, r5, r6, r7, r8, pc}
   1476c:	bl	11054 <__stack_chk_fail@plt>
   14770:	andeq	r3, r1, r8, ror #17
   14774:	strdeq	r0, [r0], -ip
   14778:	mov	r2, r1
   1477c:	mov	r1, r0
   14780:	mov	r0, #0
   14784:	b	1469c <close_stdout@@Base+0x1744>
   14788:	mov	ip, r1
   1478c:	mov	r3, r2
   14790:	mov	r1, r0
   14794:	mov	r2, ip
   14798:	mov	r0, #0
   1479c:	b	14708 <close_stdout@@Base+0x17b0>
   147a0:	push	{r4, r5, r6, r7, r8, lr}
   147a4:	mov	r5, r2
   147a8:	ldr	lr, [pc, #136]	; 14838 <close_stdout@@Base+0x18e0>
   147ac:	mov	r7, r0
   147b0:	mov	r6, r1
   147b4:	ldr	r4, [pc, #128]	; 1483c <close_stdout@@Base+0x18e4>
   147b8:	add	lr, pc, lr
   147bc:	sub	sp, sp, #56	; 0x38
   147c0:	add	lr, lr, #256	; 0x100
   147c4:	ldr	r8, [pc, #116]	; 14840 <close_stdout@@Base+0x18e8>
   147c8:	add	r4, pc, r4
   147cc:	add	ip, sp, #4
   147d0:	ldm	lr!, {r0, r1, r2, r3}
   147d4:	ldr	r4, [r4, r8]
   147d8:	stmia	ip!, {r0, r1, r2, r3}
   147dc:	ldm	lr!, {r0, r1, r2, r3}
   147e0:	ldr	r8, [r4]
   147e4:	stmia	ip!, {r0, r1, r2, r3}
   147e8:	ldm	lr, {r0, r1, r2, r3}
   147ec:	str	r8, [sp, #52]	; 0x34
   147f0:	stm	ip, {r0, r1, r2, r3}
   147f4:	mov	r1, r5
   147f8:	add	r5, sp, #4
   147fc:	mov	r2, #1
   14800:	mov	r0, r5
   14804:	bl	1436c <close_stdout@@Base+0x1414>
   14808:	mov	r2, r6
   1480c:	mov	r3, r5
   14810:	mov	r1, r7
   14814:	mov	r0, #0
   14818:	bl	14110 <close_stdout@@Base+0x11b8>
   1481c:	ldr	r2, [sp, #52]	; 0x34
   14820:	ldr	r3, [r4]
   14824:	cmp	r2, r3
   14828:	bne	14834 <close_stdout@@Base+0x18dc>
   1482c:	add	sp, sp, #56	; 0x38
   14830:	pop	{r4, r5, r6, r7, r8, pc}
   14834:	bl	11054 <__stack_chk_fail@plt>
   14838:	andeq	fp, r1, r8, lsl #22
   1483c:	andeq	r3, r1, r0, lsr r8
   14840:	strdeq	r0, [r0], -ip
   14844:	mov	r2, r1
   14848:	mvn	r1, #0
   1484c:	b	147a0 <close_stdout@@Base+0x1848>
   14850:	mov	r1, #58	; 0x3a
   14854:	b	14844 <close_stdout@@Base+0x18ec>
   14858:	mov	r2, #58	; 0x3a
   1485c:	b	147a0 <close_stdout@@Base+0x1848>
   14860:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14864:	mov	r5, r2
   14868:	ldr	lr, [pc, #144]	; 14900 <close_stdout@@Base+0x19a8>
   1486c:	mov	r8, r0
   14870:	mov	r9, r1
   14874:	mov	r7, r3
   14878:	add	lr, pc, lr
   1487c:	ldr	r4, [pc, #128]	; 14904 <close_stdout@@Base+0x19ac>
   14880:	add	lr, lr, #256	; 0x100
   14884:	sub	sp, sp, #56	; 0x38
   14888:	ldr	sl, [pc, #120]	; 14908 <close_stdout@@Base+0x19b0>
   1488c:	add	r4, pc, r4
   14890:	ldm	lr!, {r0, r1, r2, r3}
   14894:	add	ip, sp, #4
   14898:	ldr	r4, [r4, sl]
   1489c:	ldr	r6, [sp, #88]	; 0x58
   148a0:	stmia	ip!, {r0, r1, r2, r3}
   148a4:	ldm	lr!, {r0, r1, r2, r3}
   148a8:	ldr	sl, [r4]
   148ac:	stmia	ip!, {r0, r1, r2, r3}
   148b0:	ldm	lr, {r0, r1, r2, r3}
   148b4:	str	sl, [sp, #52]	; 0x34
   148b8:	stm	ip, {r0, r1, r2, r3}
   148bc:	mov	r2, r5
   148c0:	add	r5, sp, #4
   148c4:	mov	r1, r9
   148c8:	mov	r0, r5
   148cc:	bl	143e0 <close_stdout@@Base+0x1488>
   148d0:	mov	r2, r6
   148d4:	mov	r3, r5
   148d8:	mov	r0, r8
   148dc:	mov	r1, r7
   148e0:	bl	14110 <close_stdout@@Base+0x11b8>
   148e4:	ldr	r2, [sp, #52]	; 0x34
   148e8:	ldr	r3, [r4]
   148ec:	cmp	r2, r3
   148f0:	bne	148fc <close_stdout@@Base+0x19a4>
   148f4:	add	sp, sp, #56	; 0x38
   148f8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   148fc:	bl	11054 <__stack_chk_fail@plt>
   14900:	andeq	fp, r1, r8, asr #20
   14904:	andeq	r3, r1, ip, ror #14
   14908:	strdeq	r0, [r0], -ip
   1490c:	push	{lr}		; (str lr, [sp, #-4]!)
   14910:	sub	sp, sp, #12
   14914:	mvn	ip, #0
   14918:	str	ip, [sp]
   1491c:	bl	14860 <close_stdout@@Base+0x1908>
   14920:	add	sp, sp, #12
   14924:	pop	{pc}		; (ldr pc, [sp], #4)
   14928:	mov	ip, r1
   1492c:	mov	r3, r2
   14930:	mov	r1, r0
   14934:	mov	r2, ip
   14938:	mov	r0, #0
   1493c:	b	1490c <close_stdout@@Base+0x19b4>
   14940:	push	{lr}		; (str lr, [sp, #-4]!)
   14944:	sub	sp, sp, #12
   14948:	mov	lr, r1
   1494c:	mov	ip, r2
   14950:	mov	r1, r0
   14954:	str	r3, [sp]
   14958:	mov	r2, lr
   1495c:	mov	r3, ip
   14960:	mov	r0, #0
   14964:	bl	14860 <close_stdout@@Base+0x1908>
   14968:	add	sp, sp, #12
   1496c:	pop	{pc}		; (ldr pc, [sp], #4)
   14970:	ldr	r3, [pc, #12]	; 14984 <close_stdout@@Base+0x1a2c>
   14974:	ldr	ip, [pc, #12]	; 14988 <close_stdout@@Base+0x1a30>
   14978:	add	r3, pc, r3
   1497c:	ldr	r3, [r3, ip]
   14980:	b	14110 <close_stdout@@Base+0x11b8>
   14984:	andeq	r3, r1, r0, lsl #13
   14988:	strdeq	r0, [r0], -r8
   1498c:	mov	r2, r1
   14990:	mov	r1, r0
   14994:	mov	r0, #0
   14998:	b	14970 <close_stdout@@Base+0x1a18>
   1499c:	mvn	r2, #0
   149a0:	b	14970 <close_stdout@@Base+0x1a18>
   149a4:	mov	r1, r0
   149a8:	mov	r0, #0
   149ac:	b	1499c <close_stdout@@Base+0x1a44>
   149b0:	push	{r4, r5, r6, r7, lr}
   149b4:	cmp	r1, #0
   149b8:	sub	sp, sp, #36	; 0x24
   149bc:	ldr	r7, [pc, #896]	; 14d44 <close_stdout@@Base+0x1dec>
   149c0:	mov	ip, r3
   149c4:	mov	r5, r0
   149c8:	add	r7, pc, r7
   149cc:	ldr	r4, [sp, #56]	; 0x38
   149d0:	ldr	r6, [sp, #60]	; 0x3c
   149d4:	beq	14d18 <close_stdout@@Base+0x1dc0>
   149d8:	str	r2, [sp]
   149dc:	mov	r3, r1
   149e0:	ldr	r2, [pc, #864]	; 14d48 <close_stdout@@Base+0x1df0>
   149e4:	mov	r1, #1
   149e8:	str	ip, [sp, #4]
   149ec:	add	r2, pc, r2
   149f0:	bl	111bc <__fprintf_chk@plt>
   149f4:	ldr	r1, [pc, #848]	; 14d4c <close_stdout@@Base+0x1df4>
   149f8:	mov	r2, #5
   149fc:	mov	r0, #0
   14a00:	add	r1, pc, r1
   14a04:	bl	11048 <dcgettext@plt>
   14a08:	ldr	r2, [pc, #832]	; 14d50 <close_stdout@@Base+0x1df8>
   14a0c:	movw	ip, #2013	; 0x7dd
   14a10:	mov	r1, #1
   14a14:	ldr	r2, [r7, r2]
   14a18:	str	ip, [sp]
   14a1c:	mov	r3, r0
   14a20:	mov	r0, r5
   14a24:	bl	111bc <__fprintf_chk@plt>
   14a28:	ldr	r1, [pc, #804]	; 14d54 <close_stdout@@Base+0x1dfc>
   14a2c:	mov	r0, #0
   14a30:	mov	r2, #5
   14a34:	add	r1, pc, r1
   14a38:	bl	11048 <dcgettext@plt>
   14a3c:	mov	r1, r5
   14a40:	bl	10fb8 <fputs_unlocked@plt>
   14a44:	cmp	r6, #9
   14a48:	addls	pc, pc, r6, lsl #2
   14a4c:	b	14d34 <close_stdout@@Base+0x1ddc>
   14a50:	b	14ae4 <close_stdout@@Base+0x1b8c>
   14a54:	b	14ae8 <close_stdout@@Base+0x1b90>
   14a58:	b	14b18 <close_stdout@@Base+0x1bc0>
   14a5c:	b	14b4c <close_stdout@@Base+0x1bf4>
   14a60:	b	14b88 <close_stdout@@Base+0x1c30>
   14a64:	b	14bc8 <close_stdout@@Base+0x1c70>
   14a68:	b	14c10 <close_stdout@@Base+0x1cb8>
   14a6c:	b	14c60 <close_stdout@@Base+0x1d08>
   14a70:	b	14cb8 <close_stdout@@Base+0x1d60>
   14a74:	b	14a78 <close_stdout@@Base+0x1b20>
   14a78:	ldr	r1, [pc, #728]	; 14d58 <close_stdout@@Base+0x1e00>
   14a7c:	mov	r0, #0
   14a80:	add	r1, pc, r1
   14a84:	mov	r2, #5
   14a88:	bl	11048 <dcgettext@plt>
   14a8c:	ldm	r4, {r3, ip}
   14a90:	mov	r1, #1
   14a94:	str	ip, [sp]
   14a98:	ldr	ip, [r4, #8]
   14a9c:	str	ip, [sp, #4]
   14aa0:	ldr	ip, [r4, #12]
   14aa4:	str	ip, [sp, #8]
   14aa8:	ldr	ip, [r4, #16]
   14aac:	str	ip, [sp, #12]
   14ab0:	ldr	ip, [r4, #20]
   14ab4:	str	ip, [sp, #16]
   14ab8:	ldr	ip, [r4, #24]
   14abc:	str	ip, [sp, #20]
   14ac0:	ldr	ip, [r4, #28]
   14ac4:	str	ip, [sp, #24]
   14ac8:	ldr	ip, [r4, #32]
   14acc:	str	ip, [sp, #28]
   14ad0:	mov	r2, r0
   14ad4:	mov	r0, r5
   14ad8:	bl	111bc <__fprintf_chk@plt>
   14adc:	add	sp, sp, #36	; 0x24
   14ae0:	pop	{r4, r5, r6, r7, pc}
   14ae4:	bl	11240 <abort@plt>
   14ae8:	ldr	r1, [pc, #620]	; 14d5c <close_stdout@@Base+0x1e04>
   14aec:	mov	r2, #5
   14af0:	mov	r0, #0
   14af4:	add	r1, pc, r1
   14af8:	bl	11048 <dcgettext@plt>
   14afc:	ldr	r3, [r4]
   14b00:	mov	r1, #1
   14b04:	mov	r2, r0
   14b08:	mov	r0, r5
   14b0c:	add	sp, sp, #36	; 0x24
   14b10:	pop	{r4, r5, r6, r7, lr}
   14b14:	b	111bc <__fprintf_chk@plt>
   14b18:	ldr	r1, [pc, #576]	; 14d60 <close_stdout@@Base+0x1e08>
   14b1c:	mov	r2, #5
   14b20:	mov	r0, #0
   14b24:	add	r1, pc, r1
   14b28:	bl	11048 <dcgettext@plt>
   14b2c:	ldm	r4, {r3, ip}
   14b30:	mov	r1, #1
   14b34:	str	ip, [sp, #56]	; 0x38
   14b38:	mov	r2, r0
   14b3c:	mov	r0, r5
   14b40:	add	sp, sp, #36	; 0x24
   14b44:	pop	{r4, r5, r6, r7, lr}
   14b48:	b	111bc <__fprintf_chk@plt>
   14b4c:	ldr	r1, [pc, #528]	; 14d64 <close_stdout@@Base+0x1e0c>
   14b50:	mov	r2, #5
   14b54:	mov	r0, #0
   14b58:	add	r1, pc, r1
   14b5c:	bl	11048 <dcgettext@plt>
   14b60:	ldm	r4, {r3, ip}
   14b64:	mov	r1, #1
   14b68:	str	ip, [sp, #56]	; 0x38
   14b6c:	ldr	ip, [r4, #8]
   14b70:	str	ip, [sp, #60]	; 0x3c
   14b74:	mov	r2, r0
   14b78:	mov	r0, r5
   14b7c:	add	sp, sp, #36	; 0x24
   14b80:	pop	{r4, r5, r6, r7, lr}
   14b84:	b	111bc <__fprintf_chk@plt>
   14b88:	ldr	r1, [pc, #472]	; 14d68 <close_stdout@@Base+0x1e10>
   14b8c:	mov	r2, #5
   14b90:	mov	r0, #0
   14b94:	add	r1, pc, r1
   14b98:	bl	11048 <dcgettext@plt>
   14b9c:	ldm	r4, {r3, ip}
   14ba0:	mov	r1, #1
   14ba4:	str	ip, [sp]
   14ba8:	ldr	ip, [r4, #8]
   14bac:	str	ip, [sp, #4]
   14bb0:	ldr	ip, [r4, #12]
   14bb4:	str	ip, [sp, #8]
   14bb8:	mov	r2, r0
   14bbc:	mov	r0, r5
   14bc0:	bl	111bc <__fprintf_chk@plt>
   14bc4:	b	14adc <close_stdout@@Base+0x1b84>
   14bc8:	ldr	r1, [pc, #412]	; 14d6c <close_stdout@@Base+0x1e14>
   14bcc:	mov	r2, #5
   14bd0:	mov	r0, #0
   14bd4:	add	r1, pc, r1
   14bd8:	bl	11048 <dcgettext@plt>
   14bdc:	ldm	r4, {r3, ip}
   14be0:	mov	r1, #1
   14be4:	str	ip, [sp]
   14be8:	ldr	ip, [r4, #8]
   14bec:	str	ip, [sp, #4]
   14bf0:	ldr	ip, [r4, #12]
   14bf4:	str	ip, [sp, #8]
   14bf8:	ldr	ip, [r4, #16]
   14bfc:	str	ip, [sp, #12]
   14c00:	mov	r2, r0
   14c04:	mov	r0, r5
   14c08:	bl	111bc <__fprintf_chk@plt>
   14c0c:	b	14adc <close_stdout@@Base+0x1b84>
   14c10:	ldr	r1, [pc, #344]	; 14d70 <close_stdout@@Base+0x1e18>
   14c14:	mov	r2, #5
   14c18:	mov	r0, #0
   14c1c:	add	r1, pc, r1
   14c20:	bl	11048 <dcgettext@plt>
   14c24:	ldm	r4, {r3, ip}
   14c28:	mov	r1, #1
   14c2c:	str	ip, [sp]
   14c30:	ldr	ip, [r4, #8]
   14c34:	str	ip, [sp, #4]
   14c38:	ldr	ip, [r4, #12]
   14c3c:	str	ip, [sp, #8]
   14c40:	ldr	ip, [r4, #16]
   14c44:	str	ip, [sp, #12]
   14c48:	ldr	ip, [r4, #20]
   14c4c:	str	ip, [sp, #16]
   14c50:	mov	r2, r0
   14c54:	mov	r0, r5
   14c58:	bl	111bc <__fprintf_chk@plt>
   14c5c:	b	14adc <close_stdout@@Base+0x1b84>
   14c60:	ldr	r1, [pc, #268]	; 14d74 <close_stdout@@Base+0x1e1c>
   14c64:	mov	r2, #5
   14c68:	mov	r0, #0
   14c6c:	add	r1, pc, r1
   14c70:	bl	11048 <dcgettext@plt>
   14c74:	ldm	r4, {r3, ip}
   14c78:	mov	r1, #1
   14c7c:	str	ip, [sp]
   14c80:	ldr	ip, [r4, #8]
   14c84:	str	ip, [sp, #4]
   14c88:	ldr	ip, [r4, #12]
   14c8c:	str	ip, [sp, #8]
   14c90:	ldr	ip, [r4, #16]
   14c94:	str	ip, [sp, #12]
   14c98:	ldr	ip, [r4, #20]
   14c9c:	str	ip, [sp, #16]
   14ca0:	ldr	ip, [r4, #24]
   14ca4:	str	ip, [sp, #20]
   14ca8:	mov	r2, r0
   14cac:	mov	r0, r5
   14cb0:	bl	111bc <__fprintf_chk@plt>
   14cb4:	b	14adc <close_stdout@@Base+0x1b84>
   14cb8:	ldr	r1, [pc, #184]	; 14d78 <close_stdout@@Base+0x1e20>
   14cbc:	mov	r2, #5
   14cc0:	mov	r0, #0
   14cc4:	add	r1, pc, r1
   14cc8:	bl	11048 <dcgettext@plt>
   14ccc:	ldm	r4, {r3, ip}
   14cd0:	mov	r1, #1
   14cd4:	str	ip, [sp]
   14cd8:	ldr	ip, [r4, #8]
   14cdc:	str	ip, [sp, #4]
   14ce0:	ldr	ip, [r4, #12]
   14ce4:	str	ip, [sp, #8]
   14ce8:	ldr	ip, [r4, #16]
   14cec:	str	ip, [sp, #12]
   14cf0:	ldr	ip, [r4, #20]
   14cf4:	str	ip, [sp, #16]
   14cf8:	ldr	ip, [r4, #24]
   14cfc:	str	ip, [sp, #20]
   14d00:	ldr	ip, [r4, #28]
   14d04:	str	ip, [sp, #24]
   14d08:	mov	r2, r0
   14d0c:	mov	r0, r5
   14d10:	bl	111bc <__fprintf_chk@plt>
   14d14:	b	14adc <close_stdout@@Base+0x1b84>
   14d18:	str	r3, [sp]
   14d1c:	mov	r3, r2
   14d20:	ldr	r2, [pc, #84]	; 14d7c <close_stdout@@Base+0x1e24>
   14d24:	mov	r1, #1
   14d28:	add	r2, pc, r2
   14d2c:	bl	111bc <__fprintf_chk@plt>
   14d30:	b	149f4 <close_stdout@@Base+0x1a9c>
   14d34:	ldr	r1, [pc, #68]	; 14d80 <close_stdout@@Base+0x1e28>
   14d38:	mov	r0, #0
   14d3c:	add	r1, pc, r1
   14d40:	b	14a84 <close_stdout@@Base+0x1b2c>
   14d44:	andeq	r3, r1, r0, lsr r6
   14d48:	andeq	r1, r0, r8, lsl #31
   14d4c:	andeq	r1, r0, r8, lsl #31
   14d50:	andeq	r0, r0, ip, lsr #2
   14d54:	andeq	r1, r0, r8, asr pc
   14d58:	andeq	r2, r0, r4, ror #1
   14d5c:	andeq	r1, r0, r4, ror #30
   14d60:	andeq	r1, r0, r4, asr #30
   14d64:	andeq	r1, r0, r8, lsr #30
   14d68:	andeq	r1, r0, r8, lsl #30
   14d6c:	andeq	r1, r0, r8, ror #29
   14d70:	andeq	r1, r0, r4, asr #29
   14d74:	muleq	r0, ip, lr
   14d78:	andeq	r1, r0, r0, ror lr
   14d7c:	andeq	r1, r0, r8, asr ip
   14d80:	andeq	r1, r0, ip, asr lr
   14d84:	push	{r4, r5, lr}
   14d88:	sub	sp, sp, #12
   14d8c:	ldr	r5, [sp, #24]
   14d90:	ldr	ip, [r5]
   14d94:	cmp	ip, #0
   14d98:	beq	14db4 <close_stdout@@Base+0x1e5c>
   14d9c:	mov	lr, r5
   14da0:	mov	ip, #0
   14da4:	ldr	r4, [lr, #4]!
   14da8:	add	ip, ip, #1
   14dac:	cmp	r4, #0
   14db0:	bne	14da4 <close_stdout@@Base+0x1e4c>
   14db4:	stm	sp, {r5, ip}
   14db8:	bl	149b0 <close_stdout@@Base+0x1a58>
   14dbc:	add	sp, sp, #12
   14dc0:	pop	{r4, r5, pc}
   14dc4:	push	{r4, r5, r6, r7, lr}
   14dc8:	sub	sp, sp, #60	; 0x3c
   14dcc:	ldr	r4, [pc, #100]	; 14e38 <close_stdout@@Base+0x1ee0>
   14dd0:	mov	ip, #0
   14dd4:	ldr	r5, [pc, #96]	; 14e3c <close_stdout@@Base+0x1ee4>
   14dd8:	mov	lr, ip
   14ddc:	add	r4, pc, r4
   14de0:	ldr	r6, [sp, #80]	; 0x50
   14de4:	ldr	r7, [r4, r5]
   14de8:	add	r5, sp, #12
   14dec:	ldr	r4, [r7]
   14df0:	str	r4, [sp, #52]	; 0x34
   14df4:	ldr	r4, [r6, ip]
   14df8:	cmp	r4, #0
   14dfc:	str	r4, [r5, ip]
   14e00:	beq	14e14 <close_stdout@@Base+0x1ebc>
   14e04:	add	lr, lr, #1
   14e08:	add	ip, ip, #4
   14e0c:	cmp	lr, #10
   14e10:	bne	14df4 <close_stdout@@Base+0x1e9c>
   14e14:	stm	sp, {r5, lr}
   14e18:	bl	149b0 <close_stdout@@Base+0x1a58>
   14e1c:	ldr	r2, [sp, #52]	; 0x34
   14e20:	ldr	r3, [r7]
   14e24:	cmp	r2, r3
   14e28:	bne	14e34 <close_stdout@@Base+0x1edc>
   14e2c:	add	sp, sp, #60	; 0x3c
   14e30:	pop	{r4, r5, r6, r7, pc}
   14e34:	bl	11054 <__stack_chk_fail@plt>
   14e38:	andeq	r3, r1, ip, lsl r2
   14e3c:	strdeq	r0, [r0], -ip
   14e40:	push	{r3}		; (str r3, [sp, #-4]!)
   14e44:	push	{r4, lr}
   14e48:	sub	sp, sp, #20
   14e4c:	ldr	lr, [pc, #72]	; 14e9c <close_stdout@@Base+0x1f44>
   14e50:	add	ip, sp, #32
   14e54:	ldr	r4, [pc, #68]	; 14ea0 <close_stdout@@Base+0x1f48>
   14e58:	add	lr, pc, lr
   14e5c:	ldr	r3, [sp, #28]
   14e60:	ldr	r4, [lr, r4]
   14e64:	str	ip, [sp]
   14e68:	str	ip, [sp, #8]
   14e6c:	ldr	ip, [r4]
   14e70:	str	ip, [sp, #12]
   14e74:	bl	14dc4 <close_stdout@@Base+0x1e6c>
   14e78:	ldr	r2, [sp, #12]
   14e7c:	ldr	r3, [r4]
   14e80:	cmp	r2, r3
   14e84:	bne	14e98 <close_stdout@@Base+0x1f40>
   14e88:	add	sp, sp, #20
   14e8c:	pop	{r4, lr}
   14e90:	add	sp, sp, #4
   14e94:	bx	lr
   14e98:	bl	11054 <__stack_chk_fail@plt>
   14e9c:	andeq	r3, r1, r0, lsr #3
   14ea0:	strdeq	r0, [r0], -ip
   14ea4:	ldr	r1, [pc, #132]	; 14f30 <close_stdout@@Base+0x1fd8>
   14ea8:	mov	r2, #5
   14eac:	push	{r4, lr}
   14eb0:	add	r1, pc, r1
   14eb4:	mov	r0, #0
   14eb8:	ldr	r4, [pc, #116]	; 14f34 <close_stdout@@Base+0x1fdc>
   14ebc:	bl	11048 <dcgettext@plt>
   14ec0:	ldr	r2, [pc, #112]	; 14f38 <close_stdout@@Base+0x1fe0>
   14ec4:	add	r4, pc, r4
   14ec8:	add	r2, pc, r2
   14ecc:	mov	r1, r0
   14ed0:	mov	r0, #1
   14ed4:	bl	111a4 <__printf_chk@plt>
   14ed8:	ldr	r1, [pc, #92]	; 14f3c <close_stdout@@Base+0x1fe4>
   14edc:	mov	r2, #5
   14ee0:	mov	r0, #0
   14ee4:	add	r1, pc, r1
   14ee8:	bl	11048 <dcgettext@plt>
   14eec:	ldr	r2, [pc, #76]	; 14f40 <close_stdout@@Base+0x1fe8>
   14ef0:	ldr	r3, [pc, #76]	; 14f44 <close_stdout@@Base+0x1fec>
   14ef4:	add	r2, pc, r2
   14ef8:	add	r3, pc, r3
   14efc:	mov	r1, r0
   14f00:	mov	r0, #1
   14f04:	bl	111a4 <__printf_chk@plt>
   14f08:	ldr	r1, [pc, #56]	; 14f48 <close_stdout@@Base+0x1ff0>
   14f0c:	mov	r0, #0
   14f10:	mov	r2, #5
   14f14:	add	r1, pc, r1
   14f18:	bl	11048 <dcgettext@plt>
   14f1c:	ldr	r3, [pc, #40]	; 14f4c <close_stdout@@Base+0x1ff4>
   14f20:	ldr	r3, [r4, r3]
   14f24:	pop	{r4, lr}
   14f28:	ldr	r1, [r3]
   14f2c:	b	10fb8 <fputs_unlocked@plt>
   14f30:	andeq	r1, r0, r4, lsr #26
   14f34:	andeq	r3, r1, r4, lsr r1
   14f38:	andeq	r1, r0, r4, lsr #26
   14f3c:	andeq	r1, r0, r0, lsr #26
   14f40:	andeq	r1, r0, r4, lsr #15
   14f44:			; <UNDEFINED> instruction: 0x000017b0
   14f48:	andeq	r1, r0, r4, lsl #26
   14f4c:	andeq	r0, r0, ip, lsl r1
   14f50:	push	{r4, lr}
   14f54:	mov	r4, r0
   14f58:	bl	110f0 <malloc@plt>
   14f5c:	rsbs	r3, r0, #1
   14f60:	movcc	r3, #0
   14f64:	cmp	r4, #0
   14f68:	moveq	r3, #0
   14f6c:	cmp	r3, #0
   14f70:	popeq	{r4, pc}
   14f74:	bl	15164 <close_stdout@@Base+0x220c>
   14f78:	push	{r3, r4, r5, lr}
   14f7c:	mov	r4, r0
   14f80:	mvn	r0, #0
   14f84:	mov	r5, r1
   14f88:	bl	15d3c <close_stdout@@Base+0x2de4>
   14f8c:	cmp	r0, r4
   14f90:	bcc	14fa0 <close_stdout@@Base+0x2048>
   14f94:	mul	r0, r4, r5
   14f98:	pop	{r3, r4, r5, lr}
   14f9c:	b	14f50 <close_stdout@@Base+0x1ff8>
   14fa0:	bl	15164 <close_stdout@@Base+0x220c>
   14fa4:	b	14f50 <close_stdout@@Base+0x1ff8>
   14fa8:	rsbs	r3, r1, #1
   14fac:	push	{r4, lr}
   14fb0:	movcc	r3, #0
   14fb4:	cmp	r0, #0
   14fb8:	mov	r4, r1
   14fbc:	moveq	r3, #0
   14fc0:	cmp	r3, #0
   14fc4:	bne	14fe8 <close_stdout@@Base+0x2090>
   14fc8:	bl	11060 <realloc@plt>
   14fcc:	rsbs	r3, r0, #1
   14fd0:	movcc	r3, #0
   14fd4:	cmp	r4, #0
   14fd8:	moveq	r3, #0
   14fdc:	cmp	r3, #0
   14fe0:	popeq	{r4, pc}
   14fe4:	bl	15164 <close_stdout@@Base+0x220c>
   14fe8:	bl	11000 <free@plt>
   14fec:	mov	r0, #0
   14ff0:	pop	{r4, pc}
   14ff4:	push	{r4, r5, r6, lr}
   14ff8:	mov	r5, r1
   14ffc:	mov	r6, r0
   15000:	mov	r1, r2
   15004:	mvn	r0, #0
   15008:	mov	r4, r2
   1500c:	bl	15d3c <close_stdout@@Base+0x2de4>
   15010:	cmp	r0, r5
   15014:	bcc	15028 <close_stdout@@Base+0x20d0>
   15018:	mov	r0, r6
   1501c:	mul	r1, r5, r4
   15020:	pop	{r4, r5, r6, lr}
   15024:	b	14fa8 <close_stdout@@Base+0x2050>
   15028:	bl	15164 <close_stdout@@Base+0x220c>
   1502c:	push	{r3, r4, r5, r6, r7, lr}
   15030:	subs	r7, r0, #0
   15034:	mov	r5, r1
   15038:	mov	r6, r2
   1503c:	ldr	r4, [r1]
   15040:	beq	15078 <close_stdout@@Base+0x2120>
   15044:	movw	r0, #43690	; 0xaaaa
   15048:	mov	r1, r2
   1504c:	bfi	r0, r0, #16, #16
   15050:	bl	15d3c <close_stdout@@Base+0x2de4>
   15054:	cmp	r4, r0
   15058:	addcc	r3, r4, #1
   1505c:	addcc	r4, r4, r3, lsr #1
   15060:	bcs	1509c <close_stdout@@Base+0x2144>
   15064:	str	r4, [r5]
   15068:	mov	r0, r7
   1506c:	mul	r1, r6, r4
   15070:	pop	{r3, r4, r5, r6, r7, lr}
   15074:	b	14fa8 <close_stdout@@Base+0x2050>
   15078:	cmp	r4, #0
   1507c:	bne	15064 <close_stdout@@Base+0x210c>
   15080:	mov	r0, #64	; 0x40
   15084:	mov	r1, r2
   15088:	bl	15d3c <close_stdout@@Base+0x2de4>
   1508c:	cmp	r0, #0
   15090:	movne	r4, r0
   15094:	addeq	r4, r0, #1
   15098:	b	15064 <close_stdout@@Base+0x210c>
   1509c:	bl	15164 <close_stdout@@Base+0x220c>
   150a0:	cmp	r0, #0
   150a4:	push	{r3, lr}
   150a8:	ldr	r3, [r1]
   150ac:	beq	150d8 <close_stdout@@Base+0x2180>
   150b0:	movw	r2, #43689	; 0xaaa9
   150b4:	movt	r2, #43690	; 0xaaaa
   150b8:	cmp	r3, r2
   150bc:	addls	r2, r3, #1
   150c0:	addls	r3, r3, r2, lsr #1
   150c4:	bhi	150f0 <close_stdout@@Base+0x2198>
   150c8:	str	r3, [r1]
   150cc:	mov	r1, r3
   150d0:	pop	{r3, lr}
   150d4:	b	14fa8 <close_stdout@@Base+0x2050>
   150d8:	cmp	r3, #0
   150dc:	moveq	r3, #64	; 0x40
   150e0:	str	r3, [r1]
   150e4:	mov	r1, r3
   150e8:	pop	{r3, lr}
   150ec:	b	14fa8 <close_stdout@@Base+0x2050>
   150f0:	bl	15164 <close_stdout@@Base+0x220c>
   150f4:	push	{r4, lr}
   150f8:	mov	r4, r0
   150fc:	bl	14f50 <close_stdout@@Base+0x1ff8>
   15100:	mov	r2, r4
   15104:	mov	r1, #0
   15108:	pop	{r4, lr}
   1510c:	b	1118c <memset@plt>
   15110:	push	{r3, lr}
   15114:	bl	10fac <calloc@plt>
   15118:	cmp	r0, #0
   1511c:	popne	{r3, pc}
   15120:	bl	15164 <close_stdout@@Base+0x220c>
   15124:	push	{r3, r4, r5, lr}
   15128:	mov	r4, r1
   1512c:	mov	r5, r0
   15130:	mov	r0, r1
   15134:	bl	14f50 <close_stdout@@Base+0x1ff8>
   15138:	mov	r1, r5
   1513c:	mov	r2, r4
   15140:	pop	{r3, r4, r5, lr}
   15144:	b	11018 <memcpy@plt>
   15148:	push	{r4, lr}
   1514c:	mov	r4, r0
   15150:	bl	11150 <strlen@plt>
   15154:	add	r1, r0, #1
   15158:	mov	r0, r4
   1515c:	pop	{r4, lr}
   15160:	b	15124 <close_stdout@@Base+0x21cc>
   15164:	ldr	r3, [pc, #64]	; 151ac <close_stdout@@Base+0x2254>
   15168:	mov	r2, #5
   1516c:	ldr	ip, [pc, #60]	; 151b0 <close_stdout@@Base+0x2258>
   15170:	mov	r0, #0
   15174:	add	r3, pc, r3
   15178:	ldr	r1, [pc, #52]	; 151b4 <close_stdout@@Base+0x225c>
   1517c:	push	{r4, lr}
   15180:	add	r1, pc, r1
   15184:	ldr	r3, [r3, ip]
   15188:	ldr	r4, [r3]
   1518c:	bl	11048 <dcgettext@plt>
   15190:	ldr	r2, [pc, #32]	; 151b8 <close_stdout@@Base+0x2260>
   15194:	mov	r1, #0
   15198:	add	r2, pc, r2
   1519c:	mov	r3, r0
   151a0:	mov	r0, r4
   151a4:	bl	110cc <error@plt>
   151a8:	bl	11240 <abort@plt>
   151ac:	andeq	r2, r1, r4, lsl #29
   151b0:	andeq	r0, r0, r0, lsr #2
   151b4:	andeq	r1, r0, r8, lsl #22
   151b8:	andeq	r1, r0, ip, lsl r7
   151bc:	ldr	ip, [pc, #1308]	; 156e0 <close_stdout@@Base+0x2788>
   151c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   151c4:	mov	sl, r2
   151c8:	ldr	r2, [pc, #1300]	; 156e4 <close_stdout@@Base+0x278c>
   151cc:	add	ip, pc, ip
   151d0:	mov	r9, r3
   151d4:	sub	sp, sp, #20
   151d8:	mov	r3, ip
   151dc:	cmp	sl, #36	; 0x24
   151e0:	ldr	r6, [ip, r2]
   151e4:	mov	r5, r0
   151e8:	mov	r7, r1
   151ec:	ldr	r8, [sp, #56]	; 0x38
   151f0:	ldr	r3, [r6]
   151f4:	str	r3, [sp, #12]
   151f8:	bhi	156c0 <close_stdout@@Base+0x2768>
   151fc:	cmp	r1, #0
   15200:	addeq	r7, sp, #8
   15204:	bl	1112c <__ctype_b_loc@plt>
   15208:	ldrb	ip, [r5]
   1520c:	mov	r2, r5
   15210:	ldr	r1, [r0]
   15214:	b	1521c <close_stdout@@Base+0x22c4>
   15218:	ldrb	ip, [r2, #1]!
   1521c:	lsl	r3, ip, #1
   15220:	ldrh	r4, [r1, r3]
   15224:	and	r4, r4, #8192	; 0x2000
   15228:	uxth	r4, r4
   1522c:	cmp	r4, #0
   15230:	bne	15218 <close_stdout@@Base+0x22c0>
   15234:	cmp	ip, #45	; 0x2d
   15238:	bne	15258 <close_stdout@@Base+0x2300>
   1523c:	mov	r0, #4
   15240:	ldr	r2, [sp, #12]
   15244:	ldr	r3, [r6]
   15248:	cmp	r2, r3
   1524c:	bne	156bc <close_stdout@@Base+0x2764>
   15250:	add	sp, sp, #20
   15254:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15258:	bl	11174 <__errno_location@plt>
   1525c:	mov	r2, sl
   15260:	mov	r1, r7
   15264:	str	r4, [r0]
   15268:	mov	fp, r0
   1526c:	mov	r0, r5
   15270:	bl	11144 <strtoul@plt>
   15274:	ldr	r3, [r7]
   15278:	cmp	r3, r5
   1527c:	mov	sl, r0
   15280:	beq	15410 <close_stdout@@Base+0x24b8>
   15284:	ldr	r0, [fp]
   15288:	cmp	r0, #0
   1528c:	bne	152bc <close_stdout@@Base+0x2364>
   15290:	mov	r4, r0
   15294:	cmp	r8, #0
   15298:	streq	sl, [r9]
   1529c:	moveq	r0, r4
   152a0:	beq	15240 <close_stdout@@Base+0x22e8>
   152a4:	ldrb	r5, [r3]
   152a8:	cmp	r5, #0
   152ac:	bne	152cc <close_stdout@@Base+0x2374>
   152b0:	mov	r0, r4
   152b4:	str	sl, [r9]
   152b8:	b	15240 <close_stdout@@Base+0x22e8>
   152bc:	cmp	r0, #34	; 0x22
   152c0:	moveq	r4, #1
   152c4:	bne	1523c <close_stdout@@Base+0x22e4>
   152c8:	b	15294 <close_stdout@@Base+0x233c>
   152cc:	mov	r0, r8
   152d0:	mov	r1, r5
   152d4:	str	r3, [sp, #4]
   152d8:	bl	1115c <strchr@plt>
   152dc:	ldr	r3, [sp, #4]
   152e0:	cmp	r0, #0
   152e4:	beq	15448 <close_stdout@@Base+0x24f0>
   152e8:	mov	r0, r8
   152ec:	mov	r1, #48	; 0x30
   152f0:	str	r3, [sp, #4]
   152f4:	bl	1115c <strchr@plt>
   152f8:	ldr	r3, [sp, #4]
   152fc:	cmp	r0, #0
   15300:	beq	15320 <close_stdout@@Base+0x23c8>
   15304:	ldrb	r2, [r3, #1]
   15308:	cmp	r2, #68	; 0x44
   1530c:	beq	156a4 <close_stdout@@Base+0x274c>
   15310:	cmp	r2, #105	; 0x69
   15314:	beq	1568c <close_stdout@@Base+0x2734>
   15318:	cmp	r2, #66	; 0x42
   1531c:	beq	156a4 <close_stdout@@Base+0x274c>
   15320:	mov	r8, #1
   15324:	mov	fp, #1024	; 0x400
   15328:	sub	r5, r5, #66	; 0x42
   1532c:	cmp	r5, #53	; 0x35
   15330:	addls	pc, pc, r5, lsl #2
   15334:	b	15448 <close_stdout@@Base+0x24f0>
   15338:	b	15638 <close_stdout@@Base+0x26e0>
   1533c:	b	15448 <close_stdout@@Base+0x24f0>
   15340:	b	15448 <close_stdout@@Base+0x24f0>
   15344:	b	155f8 <close_stdout@@Base+0x26a0>
   15348:	b	15448 <close_stdout@@Base+0x24f0>
   1534c:	b	1564c <close_stdout@@Base+0x26f4>
   15350:	b	15448 <close_stdout@@Base+0x24f0>
   15354:	b	15448 <close_stdout@@Base+0x24f0>
   15358:	b	15448 <close_stdout@@Base+0x24f0>
   1535c:	b	155d8 <close_stdout@@Base+0x2680>
   15360:	b	15448 <close_stdout@@Base+0x24f0>
   15364:	b	155a4 <close_stdout@@Base+0x264c>
   15368:	b	15448 <close_stdout@@Base+0x24f0>
   1536c:	b	15448 <close_stdout@@Base+0x24f0>
   15370:	b	15564 <close_stdout@@Base+0x260c>
   15374:	b	15448 <close_stdout@@Base+0x24f0>
   15378:	b	15448 <close_stdout@@Base+0x24f0>
   1537c:	b	15448 <close_stdout@@Base+0x24f0>
   15380:	b	15524 <close_stdout@@Base+0x25cc>
   15384:	b	15448 <close_stdout@@Base+0x24f0>
   15388:	b	15448 <close_stdout@@Base+0x24f0>
   1538c:	b	15448 <close_stdout@@Base+0x24f0>
   15390:	b	15448 <close_stdout@@Base+0x24f0>
   15394:	b	154e4 <close_stdout@@Base+0x258c>
   15398:	b	154a4 <close_stdout@@Base+0x254c>
   1539c:	b	15448 <close_stdout@@Base+0x24f0>
   153a0:	b	15448 <close_stdout@@Base+0x24f0>
   153a4:	b	15448 <close_stdout@@Base+0x24f0>
   153a8:	b	15448 <close_stdout@@Base+0x24f0>
   153ac:	b	15448 <close_stdout@@Base+0x24f0>
   153b0:	b	15448 <close_stdout@@Base+0x24f0>
   153b4:	b	15448 <close_stdout@@Base+0x24f0>
   153b8:	b	15490 <close_stdout@@Base+0x2538>
   153bc:	b	15454 <close_stdout@@Base+0x24fc>
   153c0:	b	15448 <close_stdout@@Base+0x24f0>
   153c4:	b	15448 <close_stdout@@Base+0x24f0>
   153c8:	b	15448 <close_stdout@@Base+0x24f0>
   153cc:	b	1564c <close_stdout@@Base+0x26f4>
   153d0:	b	15448 <close_stdout@@Base+0x24f0>
   153d4:	b	15448 <close_stdout@@Base+0x24f0>
   153d8:	b	15448 <close_stdout@@Base+0x24f0>
   153dc:	b	155d8 <close_stdout@@Base+0x2680>
   153e0:	b	15448 <close_stdout@@Base+0x24f0>
   153e4:	b	155a4 <close_stdout@@Base+0x264c>
   153e8:	b	15448 <close_stdout@@Base+0x24f0>
   153ec:	b	15448 <close_stdout@@Base+0x24f0>
   153f0:	b	15448 <close_stdout@@Base+0x24f0>
   153f4:	b	15448 <close_stdout@@Base+0x24f0>
   153f8:	b	15448 <close_stdout@@Base+0x24f0>
   153fc:	b	15448 <close_stdout@@Base+0x24f0>
   15400:	b	15524 <close_stdout@@Base+0x25cc>
   15404:	b	15448 <close_stdout@@Base+0x24f0>
   15408:	b	15448 <close_stdout@@Base+0x24f0>
   1540c:	b	15474 <close_stdout@@Base+0x251c>
   15410:	cmp	r8, #0
   15414:	beq	1523c <close_stdout@@Base+0x22e4>
   15418:	ldrb	r5, [r5]
   1541c:	cmp	r5, #0
   15420:	beq	1523c <close_stdout@@Base+0x22e4>
   15424:	mov	r0, r8
   15428:	mov	r1, r5
   1542c:	str	r3, [sp, #4]
   15430:	bl	1115c <strchr@plt>
   15434:	ldr	r3, [sp, #4]
   15438:	cmp	r0, #0
   1543c:	movne	sl, #1
   15440:	bne	152e8 <close_stdout@@Base+0x2390>
   15444:	b	1523c <close_stdout@@Base+0x22e4>
   15448:	str	sl, [r9]
   1544c:	orr	r0, r4, #2
   15450:	b	15240 <close_stdout@@Base+0x22e8>
   15454:	mov	r2, #0
   15458:	add	r1, r3, r8
   1545c:	str	r1, [r7]
   15460:	ldrb	r3, [r3, r8]
   15464:	orr	r4, r4, r2
   15468:	cmp	r3, #0
   1546c:	orrne	r4, r4, #2
   15470:	b	152b0 <close_stdout@@Base+0x2358>
   15474:	cmn	sl, #-2147483647	; 0x80000001
   15478:	lslls	sl, sl, #1
   1547c:	movls	r2, #0
   15480:	bls	15458 <close_stdout@@Base+0x2500>
   15484:	mvn	sl, #0
   15488:	mov	r2, #1
   1548c:	b	15458 <close_stdout@@Base+0x2500>
   15490:	cmp	sl, #8388608	; 0x800000
   15494:	lslcc	sl, sl, #9
   15498:	movcc	r2, #0
   1549c:	bcc	15458 <close_stdout@@Base+0x2500>
   154a0:	b	15484 <close_stdout@@Base+0x252c>
   154a4:	mov	r1, fp
   154a8:	mvn	r0, #0
   154ac:	str	r3, [sp, #4]
   154b0:	bl	15d3c <close_stdout@@Base+0x2de4>
   154b4:	ldr	r3, [sp, #4]
   154b8:	mov	r1, #7
   154bc:	mov	r2, #0
   154c0:	cmp	r0, sl
   154c4:	movcs	ip, #0
   154c8:	movcc	ip, #1
   154cc:	mulcs	sl, fp, sl
   154d0:	mvncc	sl, #0
   154d4:	subs	r1, r1, #1
   154d8:	orr	r2, r2, ip
   154dc:	bne	154c0 <close_stdout@@Base+0x2568>
   154e0:	b	15458 <close_stdout@@Base+0x2500>
   154e4:	mov	r1, fp
   154e8:	mvn	r0, #0
   154ec:	str	r3, [sp, #4]
   154f0:	bl	15d3c <close_stdout@@Base+0x2de4>
   154f4:	ldr	r3, [sp, #4]
   154f8:	mov	r1, #8
   154fc:	mov	r2, #0
   15500:	cmp	r0, sl
   15504:	movcs	ip, #0
   15508:	movcc	ip, #1
   1550c:	mulcs	sl, fp, sl
   15510:	mvncc	sl, #0
   15514:	subs	r1, r1, #1
   15518:	orr	r2, r2, ip
   1551c:	bne	15500 <close_stdout@@Base+0x25a8>
   15520:	b	15458 <close_stdout@@Base+0x2500>
   15524:	mov	r1, fp
   15528:	mvn	r0, #0
   1552c:	str	r3, [sp, #4]
   15530:	bl	15d3c <close_stdout@@Base+0x2de4>
   15534:	ldr	r3, [sp, #4]
   15538:	mov	r1, #4
   1553c:	mov	r2, #0
   15540:	cmp	r0, sl
   15544:	movcs	ip, #0
   15548:	movcc	ip, #1
   1554c:	mulcs	sl, fp, sl
   15550:	mvncc	sl, #0
   15554:	subs	r1, r1, #1
   15558:	orr	r2, r2, ip
   1555c:	bne	15540 <close_stdout@@Base+0x25e8>
   15560:	b	15458 <close_stdout@@Base+0x2500>
   15564:	mov	r1, fp
   15568:	mvn	r0, #0
   1556c:	str	r3, [sp, #4]
   15570:	bl	15d3c <close_stdout@@Base+0x2de4>
   15574:	ldr	r3, [sp, #4]
   15578:	mov	r1, #5
   1557c:	mov	r2, #0
   15580:	cmp	r0, sl
   15584:	movcs	ip, #0
   15588:	movcc	ip, #1
   1558c:	mulcs	sl, fp, sl
   15590:	mvncc	sl, #0
   15594:	subs	r1, r1, #1
   15598:	orr	r2, r2, ip
   1559c:	bne	15580 <close_stdout@@Base+0x2628>
   155a0:	b	15458 <close_stdout@@Base+0x2500>
   155a4:	mvn	r0, #0
   155a8:	mov	r1, fp
   155ac:	str	r3, [sp, #4]
   155b0:	bl	15d3c <close_stdout@@Base+0x2de4>
   155b4:	ldr	r3, [sp, #4]
   155b8:	cmp	sl, r0
   155bc:	bhi	156b0 <close_stdout@@Base+0x2758>
   155c0:	mul	sl, sl, fp
   155c4:	cmp	r0, sl
   155c8:	bcc	156b0 <close_stdout@@Base+0x2758>
   155cc:	mul	sl, fp, sl
   155d0:	mov	r2, #0
   155d4:	b	15458 <close_stdout@@Base+0x2500>
   155d8:	mvn	r0, #0
   155dc:	mov	r1, fp
   155e0:	str	r3, [sp, #4]
   155e4:	bl	15d3c <close_stdout@@Base+0x2de4>
   155e8:	ldr	r3, [sp, #4]
   155ec:	cmp	sl, r0
   155f0:	bhi	15484 <close_stdout@@Base+0x252c>
   155f4:	b	155cc <close_stdout@@Base+0x2674>
   155f8:	mov	r1, fp
   155fc:	mvn	r0, #0
   15600:	str	r3, [sp, #4]
   15604:	bl	15d3c <close_stdout@@Base+0x2de4>
   15608:	ldr	r3, [sp, #4]
   1560c:	mov	r1, #6
   15610:	mov	r2, #0
   15614:	cmp	r0, sl
   15618:	movcs	ip, #0
   1561c:	movcc	ip, #1
   15620:	mulcs	sl, fp, sl
   15624:	mvncc	sl, #0
   15628:	subs	r1, r1, #1
   1562c:	orr	r2, r2, ip
   15630:	bne	15614 <close_stdout@@Base+0x26bc>
   15634:	b	15458 <close_stdout@@Base+0x2500>
   15638:	cmp	sl, #4194304	; 0x400000
   1563c:	lslcc	sl, sl, #10
   15640:	movcc	r2, #0
   15644:	bcc	15458 <close_stdout@@Base+0x2500>
   15648:	b	15484 <close_stdout@@Base+0x252c>
   1564c:	mov	r1, fp
   15650:	mvn	r0, #0
   15654:	str	r3, [sp, #4]
   15658:	bl	15d3c <close_stdout@@Base+0x2de4>
   1565c:	ldr	r3, [sp, #4]
   15660:	mov	r1, #3
   15664:	mov	r2, #0
   15668:	cmp	r0, sl
   1566c:	movcs	ip, #0
   15670:	movcc	ip, #1
   15674:	mulcs	sl, fp, sl
   15678:	mvncc	sl, #0
   1567c:	subs	r1, r1, #1
   15680:	orr	r2, r2, ip
   15684:	bne	15668 <close_stdout@@Base+0x2710>
   15688:	b	15458 <close_stdout@@Base+0x2500>
   1568c:	ldrb	r8, [r3, #2]
   15690:	mov	fp, #1024	; 0x400
   15694:	cmp	r8, #66	; 0x42
   15698:	moveq	r8, #3
   1569c:	movne	r8, #1
   156a0:	b	15328 <close_stdout@@Base+0x23d0>
   156a4:	mov	r8, #2
   156a8:	mov	fp, #1000	; 0x3e8
   156ac:	b	15328 <close_stdout@@Base+0x23d0>
   156b0:	mov	r2, #1
   156b4:	mvn	sl, #0
   156b8:	b	15458 <close_stdout@@Base+0x2500>
   156bc:	bl	11054 <__stack_chk_fail@plt>
   156c0:	ldr	r0, [pc, #32]	; 156e8 <close_stdout@@Base+0x2790>
   156c4:	mov	r2, #96	; 0x60
   156c8:	ldr	r1, [pc, #28]	; 156ec <close_stdout@@Base+0x2794>
   156cc:	ldr	r3, [pc, #28]	; 156f0 <close_stdout@@Base+0x2798>
   156d0:	add	r0, pc, r0
   156d4:	add	r1, pc, r1
   156d8:	add	r3, pc, r3
   156dc:	bl	11258 <__assert_fail@plt>
   156e0:	andeq	r2, r1, ip, lsr #28
   156e4:	strdeq	r0, [r0], -ip
   156e8:	ldrdeq	r1, [r0], -r8
   156ec:	strdeq	r1, [r0], -ip
   156f0:	andeq	r1, r0, r4, asr #11
   156f4:	push	{r4, r5, r6, lr}
   156f8:	sub	sp, sp, #8
   156fc:	mov	r4, r0
   15700:	bl	111b0 <fileno@plt>
   15704:	cmp	r0, #0
   15708:	mov	r0, r4
   1570c:	blt	15788 <close_stdout@@Base+0x2830>
   15710:	bl	11108 <__freading@plt>
   15714:	cmp	r0, #0
   15718:	bne	15754 <close_stdout@@Base+0x27fc>
   1571c:	mov	r0, r4
   15720:	bl	15794 <close_stdout@@Base+0x283c>
   15724:	cmp	r0, #0
   15728:	beq	15784 <close_stdout@@Base+0x282c>
   1572c:	bl	11174 <__errno_location@plt>
   15730:	ldr	r6, [r0]
   15734:	mov	r5, r0
   15738:	mov	r0, r4
   1573c:	bl	111c8 <fclose@plt>
   15740:	cmp	r6, #0
   15744:	mvnne	r0, #0
   15748:	strne	r6, [r5]
   1574c:	add	sp, sp, #8
   15750:	pop	{r4, r5, r6, pc}
   15754:	mov	r0, r4
   15758:	bl	111b0 <fileno@plt>
   1575c:	mov	r1, #1
   15760:	mov	r2, #0
   15764:	mov	r3, #0
   15768:	str	r1, [sp]
   1576c:	bl	11090 <lseek64@plt>
   15770:	mvn	r2, #0
   15774:	mvn	r3, #0
   15778:	cmp	r1, r3
   1577c:	cmpeq	r0, r2
   15780:	bne	1571c <close_stdout@@Base+0x27c4>
   15784:	mov	r0, r4
   15788:	add	sp, sp, #8
   1578c:	pop	{r4, r5, r6, lr}
   15790:	b	111c8 <fclose@plt>
   15794:	push	{r4, lr}
   15798:	subs	r4, r0, #0
   1579c:	sub	sp, sp, #8
   157a0:	beq	157b0 <close_stdout@@Base+0x2858>
   157a4:	bl	11108 <__freading@plt>
   157a8:	cmp	r0, #0
   157ac:	bne	157c0 <close_stdout@@Base+0x2868>
   157b0:	mov	r0, r4
   157b4:	add	sp, sp, #8
   157b8:	pop	{r4, lr}
   157bc:	b	10fe8 <fflush@plt>
   157c0:	ldr	r3, [r4]
   157c4:	tst	r3, #256	; 0x100
   157c8:	beq	157b0 <close_stdout@@Base+0x2858>
   157cc:	mov	r3, #1
   157d0:	mov	r0, r4
   157d4:	str	r3, [sp]
   157d8:	mov	r2, #0
   157dc:	mov	r3, #0
   157e0:	bl	157f4 <close_stdout@@Base+0x289c>
   157e4:	mov	r0, r4
   157e8:	add	sp, sp, #8
   157ec:	pop	{r4, lr}
   157f0:	b	10fe8 <fflush@plt>
   157f4:	push	{r4, r5, r6, r7, lr}
   157f8:	sub	sp, sp, #20
   157fc:	ldmib	r0, {r1, ip}
   15800:	mov	r6, r0
   15804:	ldr	r4, [sp, #40]	; 0x28
   15808:	cmp	ip, r1
   1580c:	beq	15824 <close_stdout@@Base+0x28cc>
   15810:	str	r4, [sp, #40]	; 0x28
   15814:	mov	r0, r6
   15818:	add	sp, sp, #20
   1581c:	pop	{r4, r5, r6, r7, lr}
   15820:	b	111d4 <fseeko64@plt>
   15824:	ldr	ip, [r0, #20]
   15828:	ldr	r1, [r0, #16]
   1582c:	cmp	ip, r1
   15830:	bne	15810 <close_stdout@@Base+0x28b8>
   15834:	ldr	r7, [r0, #36]	; 0x24
   15838:	cmp	r7, #0
   1583c:	bne	15810 <close_stdout@@Base+0x28b8>
   15840:	str	r2, [sp, #12]
   15844:	mvn	r5, #0
   15848:	str	r3, [sp, #8]
   1584c:	bl	111b0 <fileno@plt>
   15850:	str	r4, [sp]
   15854:	mvn	r4, #0
   15858:	ldr	r2, [sp, #12]
   1585c:	ldr	r3, [sp, #8]
   15860:	bl	11090 <lseek64@plt>
   15864:	mov	r2, r0
   15868:	mov	r3, r1
   1586c:	cmp	r3, r5
   15870:	cmpeq	r2, r4
   15874:	beq	15894 <close_stdout@@Base+0x293c>
   15878:	ldr	r1, [r6]
   1587c:	mov	r0, r7
   15880:	strd	r2, [r6, #80]	; 0x50
   15884:	bic	r3, r1, #16
   15888:	str	r3, [r6]
   1588c:	add	sp, sp, #20
   15890:	pop	{r4, r5, r6, r7, pc}
   15894:	mvn	r0, #0
   15898:	b	1588c <close_stdout@@Base+0x2934>
   1589c:	push	{r4, r5, r6, lr}
   158a0:	mov	r4, r0
   158a4:	bl	110b4 <__fpending@plt>
   158a8:	mov	r6, r0
   158ac:	mov	r0, r4
   158b0:	ldr	r4, [r4]
   158b4:	bl	156f4 <close_stdout@@Base+0x279c>
   158b8:	and	r4, r4, #32
   158bc:	adds	r5, r0, #0
   158c0:	movne	r5, #1
   158c4:	cmp	r4, #0
   158c8:	bne	158e8 <close_stdout@@Base+0x2990>
   158cc:	cmp	r5, #0
   158d0:	beq	158e0 <close_stdout@@Base+0x2988>
   158d4:	cmp	r6, #0
   158d8:	beq	15904 <close_stdout@@Base+0x29ac>
   158dc:	mvn	r4, #0
   158e0:	mov	r0, r4
   158e4:	pop	{r4, r5, r6, pc}
   158e8:	cmp	r5, #0
   158ec:	bne	158dc <close_stdout@@Base+0x2984>
   158f0:	bl	11174 <__errno_location@plt>
   158f4:	mvn	r4, #0
   158f8:	str	r5, [r0]
   158fc:	mov	r0, r4
   15900:	pop	{r4, r5, r6, pc}
   15904:	bl	11174 <__errno_location@plt>
   15908:	ldr	r4, [r0]
   1590c:	subs	r4, r4, #9
   15910:	mvnne	r4, #0
   15914:	mov	r0, r4
   15918:	pop	{r4, r5, r6, pc}
   1591c:	ldr	r3, [pc, #984]	; 15cfc <close_stdout@@Base+0x2da4>
   15920:	mov	r0, #14
   15924:	ldr	r2, [pc, #980]	; 15d00 <close_stdout@@Base+0x2da8>
   15928:	add	r3, pc, r3
   1592c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15930:	sub	sp, sp, #132	; 0x84
   15934:	ldr	r6, [r3, r2]
   15938:	ldr	r3, [r6]
   1593c:	str	r3, [sp, #124]	; 0x7c
   15940:	bl	11210 <nl_langinfo@plt>
   15944:	subs	r5, r0, #0
   15948:	beq	159fc <close_stdout@@Base+0x2aa4>
   1594c:	ldr	r3, [pc, #944]	; 15d04 <close_stdout@@Base+0x2dac>
   15950:	ldr	r4, [pc, r3]
   15954:	cmp	r4, #0
   15958:	beq	15a08 <close_stdout@@Base+0x2ab0>
   1595c:	ldrb	r7, [r4]
   15960:	cmp	r7, #0
   15964:	bne	15998 <close_stdout@@Base+0x2a40>
   15968:	b	159d0 <close_stdout@@Base+0x2a78>
   1596c:	mov	r0, r4
   15970:	bl	11150 <strlen@plt>
   15974:	add	r0, r0, #1
   15978:	add	r7, r4, r0
   1597c:	mov	r0, r7
   15980:	bl	11150 <strlen@plt>
   15984:	add	r0, r0, #1
   15988:	add	r4, r7, r0
   1598c:	ldrb	r7, [r7, r0]
   15990:	cmp	r7, #0
   15994:	beq	159d0 <close_stdout@@Base+0x2a78>
   15998:	mov	r0, r5
   1599c:	mov	r1, r4
   159a0:	bl	10fd0 <strcmp@plt>
   159a4:	cmp	r0, #0
   159a8:	beq	159c0 <close_stdout@@Base+0x2a68>
   159ac:	cmp	r7, #42	; 0x2a
   159b0:	bne	1596c <close_stdout@@Base+0x2a14>
   159b4:	ldrb	r3, [r4, #1]
   159b8:	cmp	r3, #0
   159bc:	bne	1596c <close_stdout@@Base+0x2a14>
   159c0:	mov	r0, r4
   159c4:	bl	11150 <strlen@plt>
   159c8:	add	r0, r0, #1
   159cc:	add	r5, r4, r0
   159d0:	ldrb	r3, [r5]
   159d4:	cmp	r3, #0
   159d8:	ldreq	r5, [pc, #808]	; 15d08 <close_stdout@@Base+0x2db0>
   159dc:	addeq	r5, pc, r5
   159e0:	ldr	r2, [sp, #124]	; 0x7c
   159e4:	mov	r0, r5
   159e8:	ldr	r3, [r6]
   159ec:	cmp	r2, r3
   159f0:	bne	15cd0 <close_stdout@@Base+0x2d78>
   159f4:	add	sp, sp, #132	; 0x84
   159f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159fc:	ldr	r5, [pc, #776]	; 15d0c <close_stdout@@Base+0x2db4>
   15a00:	add	r5, pc, r5
   15a04:	b	1594c <close_stdout@@Base+0x29f4>
   15a08:	ldr	r0, [pc, #768]	; 15d10 <close_stdout@@Base+0x2db8>
   15a0c:	add	r0, pc, r0
   15a10:	bl	110e4 <getenv@plt>
   15a14:	subs	r8, r0, #0
   15a18:	beq	15ca8 <close_stdout@@Base+0x2d50>
   15a1c:	ldrb	r3, [r8]
   15a20:	cmp	r3, #0
   15a24:	beq	15c3c <close_stdout@@Base+0x2ce4>
   15a28:	bl	11150 <strlen@plt>
   15a2c:	subs	sl, r0, #0
   15a30:	subne	r3, sl, #1
   15a34:	bne	15c4c <close_stdout@@Base+0x2cf4>
   15a38:	mov	r9, #0
   15a3c:	mov	fp, r9
   15a40:	add	r9, sl, r9
   15a44:	add	r0, r9, #14
   15a48:	bl	110f0 <malloc@plt>
   15a4c:	subs	r7, r0, #0
   15a50:	beq	15c9c <close_stdout@@Base+0x2d44>
   15a54:	mov	r1, r8
   15a58:	mov	r2, sl
   15a5c:	bl	11018 <memcpy@plt>
   15a60:	cmp	fp, #0
   15a64:	add	ip, r7, r9
   15a68:	movne	r3, #47	; 0x2f
   15a6c:	strbne	r3, [r7, sl]
   15a70:	ldr	r3, [pc, #668]	; 15d14 <close_stdout@@Base+0x2dbc>
   15a74:	add	r3, pc, r3
   15a78:	ldm	r3!, {r0, r1, r2}
   15a7c:	ldrh	r3, [r3]
   15a80:	str	r0, [r7, r9]
   15a84:	mov	r0, r7
   15a88:	str	r1, [ip, #4]
   15a8c:	mov	r1, #32768	; 0x8000
   15a90:	strh	r3, [ip, #12]
   15a94:	str	r2, [ip, #8]
   15a98:	bl	110d8 <open64@plt>
   15a9c:	subs	r8, r0, #0
   15aa0:	blt	15c64 <close_stdout@@Base+0x2d0c>
   15aa4:	ldr	r1, [pc, #620]	; 15d18 <close_stdout@@Base+0x2dc0>
   15aa8:	add	r1, pc, r1
   15aac:	bl	10fa0 <fdopen@plt>
   15ab0:	subs	fp, r0, #0
   15ab4:	beq	15cbc <close_stdout@@Base+0x2d64>
   15ab8:	ldr	r0, [pc, #604]	; 15d1c <close_stdout@@Base+0x2dc4>
   15abc:	add	sl, sp, #20
   15ac0:	add	r9, sp, #72	; 0x48
   15ac4:	mov	r8, #0
   15ac8:	add	r0, pc, r0
   15acc:	str	r0, [sp, #12]
   15ad0:	ldr	r3, [fp, #4]
   15ad4:	ldr	r2, [fp, #8]
   15ad8:	cmp	r3, r2
   15adc:	bcs	15bc8 <close_stdout@@Base+0x2c70>
   15ae0:	add	r2, r3, #1
   15ae4:	str	r2, [fp, #4]
   15ae8:	ldrb	r0, [r3]
   15aec:	cmp	r0, #32
   15af0:	beq	15ad0 <close_stdout@@Base+0x2b78>
   15af4:	sub	r3, r0, #9
   15af8:	cmp	r3, #1
   15afc:	bls	15ad0 <close_stdout@@Base+0x2b78>
   15b00:	cmp	r0, #35	; 0x23
   15b04:	beq	15bdc <close_stdout@@Base+0x2c84>
   15b08:	mov	r1, fp
   15b0c:	bl	11168 <ungetc@plt>
   15b10:	mov	r0, fp
   15b14:	ldr	r1, [sp, #12]
   15b18:	mov	r2, sl
   15b1c:	mov	r3, r9
   15b20:	bl	11198 <fscanf@plt>
   15b24:	cmp	r0, #1
   15b28:	ble	15c0c <close_stdout@@Base+0x2cb4>
   15b2c:	mov	r0, sl
   15b30:	bl	11150 <strlen@plt>
   15b34:	str	r0, [sp, #8]
   15b38:	mov	r0, r9
   15b3c:	bl	11150 <strlen@plt>
   15b40:	cmp	r8, #0
   15b44:	mov	r2, r0
   15b48:	bne	15c70 <close_stdout@@Base+0x2d18>
   15b4c:	ldr	r3, [sp, #8]
   15b50:	str	r2, [sp]
   15b54:	add	r8, r0, r3
   15b58:	add	r0, r8, #3
   15b5c:	add	r8, r8, #2
   15b60:	bl	110f0 <malloc@plt>
   15b64:	ldr	r2, [sp]
   15b68:	mov	r3, r0
   15b6c:	cmp	r3, #0
   15b70:	beq	15cd4 <close_stdout@@Base+0x2d7c>
   15b74:	ldr	r0, [sp, #8]
   15b78:	movw	r1, #65534	; 0xfffe
   15b7c:	movt	r1, #65535	; 0xffff
   15b80:	rsb	r2, r2, r8
   15b84:	rsb	r1, r0, r1
   15b88:	stm	sp, {r2, r3}
   15b8c:	add	r0, r1, r2
   15b90:	mov	r1, sl
   15b94:	add	r0, r3, r0
   15b98:	mov	r4, r3
   15b9c:	bl	110a8 <strcpy@plt>
   15ba0:	ldr	r2, [sp]
   15ba4:	ldr	r3, [sp, #4]
   15ba8:	mov	r1, r9
   15bac:	sub	r0, r2, #1
   15bb0:	add	r0, r3, r0
   15bb4:	bl	110a8 <strcpy@plt>
   15bb8:	ldr	r3, [fp, #4]
   15bbc:	ldr	r2, [fp, #8]
   15bc0:	cmp	r3, r2
   15bc4:	bcc	15ae0 <close_stdout@@Base+0x2b88>
   15bc8:	mov	r0, fp
   15bcc:	bl	111e0 <__uflow@plt>
   15bd0:	cmn	r0, #1
   15bd4:	beq	15c0c <close_stdout@@Base+0x2cb4>
   15bd8:	b	15aec <close_stdout@@Base+0x2b94>
   15bdc:	ldr	r3, [fp, #4]
   15be0:	ldr	r2, [fp, #8]
   15be4:	cmp	r3, r2
   15be8:	bcs	15cf0 <close_stdout@@Base+0x2d98>
   15bec:	add	r2, r3, #1
   15bf0:	str	r2, [fp, #4]
   15bf4:	ldrb	r0, [r3]
   15bf8:	cmp	r0, #10
   15bfc:	cmnne	r0, #1
   15c00:	bne	15bdc <close_stdout@@Base+0x2c84>
   15c04:	cmn	r0, #1
   15c08:	bne	15ad0 <close_stdout@@Base+0x2b78>
   15c0c:	mov	r0, fp
   15c10:	bl	156f4 <close_stdout@@Base+0x279c>
   15c14:	cmp	r8, #0
   15c18:	beq	15c64 <close_stdout@@Base+0x2d0c>
   15c1c:	mov	r3, #0
   15c20:	strb	r3, [r4, r8]
   15c24:	mov	r0, r7
   15c28:	bl	11000 <free@plt>
   15c2c:	ldr	r3, [pc, #236]	; 15d20 <close_stdout@@Base+0x2dc8>
   15c30:	add	r3, pc, r3
   15c34:	str	r4, [r3]
   15c38:	b	1595c <close_stdout@@Base+0x2a04>
   15c3c:	ldr	r8, [pc, #224]	; 15d24 <close_stdout@@Base+0x2dcc>
   15c40:	mov	r3, #7
   15c44:	mov	sl, #8
   15c48:	add	r8, pc, r8
   15c4c:	ldrb	r3, [r8, r3]
   15c50:	cmp	r3, #47	; 0x2f
   15c54:	movne	r9, #1
   15c58:	movne	fp, r9
   15c5c:	bne	15a40 <close_stdout@@Base+0x2ae8>
   15c60:	b	15a38 <close_stdout@@Base+0x2ae0>
   15c64:	ldr	r4, [pc, #188]	; 15d28 <close_stdout@@Base+0x2dd0>
   15c68:	add	r4, pc, r4
   15c6c:	b	15c24 <close_stdout@@Base+0x2ccc>
   15c70:	ldr	r0, [sp, #8]
   15c74:	str	r2, [sp]
   15c78:	add	r3, r0, r2
   15c7c:	mov	r0, r4
   15c80:	add	r8, r3, r8
   15c84:	add	r1, r8, #3
   15c88:	add	r8, r8, #2
   15c8c:	bl	11060 <realloc@plt>
   15c90:	ldr	r2, [sp]
   15c94:	mov	r3, r0
   15c98:	b	15b6c <close_stdout@@Base+0x2c14>
   15c9c:	ldr	r4, [pc, #136]	; 15d2c <close_stdout@@Base+0x2dd4>
   15ca0:	add	r4, pc, r4
   15ca4:	b	15c2c <close_stdout@@Base+0x2cd4>
   15ca8:	ldr	r8, [pc, #128]	; 15d30 <close_stdout@@Base+0x2dd8>
   15cac:	mov	r3, #7
   15cb0:	mov	sl, #8
   15cb4:	add	r8, pc, r8
   15cb8:	b	15c4c <close_stdout@@Base+0x2cf4>
   15cbc:	ldr	r4, [pc, #112]	; 15d34 <close_stdout@@Base+0x2ddc>
   15cc0:	mov	r0, r8
   15cc4:	add	r4, pc, r4
   15cc8:	bl	1124c <close@plt>
   15ccc:	b	15c24 <close_stdout@@Base+0x2ccc>
   15cd0:	bl	11054 <__stack_chk_fail@plt>
   15cd4:	mov	r0, r4
   15cd8:	ldr	r4, [pc, #88]	; 15d38 <close_stdout@@Base+0x2de0>
   15cdc:	bl	11000 <free@plt>
   15ce0:	mov	r0, fp
   15ce4:	add	r4, pc, r4
   15ce8:	bl	156f4 <close_stdout@@Base+0x279c>
   15cec:	b	15c24 <close_stdout@@Base+0x2ccc>
   15cf0:	mov	r0, fp
   15cf4:	bl	111e0 <__uflow@plt>
   15cf8:	b	15bf8 <close_stdout@@Base+0x2ca0>
   15cfc:	ldrdeq	r2, [r1], -r0
   15d00:	strdeq	r0, [r0], -ip
   15d04:	andeq	sl, r1, r0, lsr #21
   15d08:	andeq	r1, r0, r0, lsl r3
   15d0c:	andeq	r0, r0, ip, asr sp
   15d10:	andeq	r1, r0, r8, ror #5
   15d14:	muleq	r0, r0, r2
   15d18:	andeq	r0, r0, ip, ror #26
   15d1c:	andeq	r1, r0, ip, asr #4
   15d20:	andeq	sl, r1, r0, asr #15
   15d24:	muleq	r0, r8, r0
   15d28:	strdeq	r0, [r0], -r4
   15d2c:			; <UNDEFINED> instruction: 0x00000abc
   15d30:	andeq	r1, r0, ip, lsr #32
   15d34:	muleq	r0, r8, sl
   15d38:	andeq	r0, r0, r8, ror sl
   15d3c:	subs	r2, r1, #1
   15d40:	bxeq	lr
   15d44:	bcc	15f1c <close_stdout@@Base+0x2fc4>
   15d48:	cmp	r0, r1
   15d4c:	bls	15f00 <close_stdout@@Base+0x2fa8>
   15d50:	tst	r1, r2
   15d54:	beq	15f0c <close_stdout@@Base+0x2fb4>
   15d58:	clz	r3, r0
   15d5c:	clz	r2, r1
   15d60:	sub	r3, r2, r3
   15d64:	rsbs	r3, r3, #31
   15d68:	addne	r3, r3, r3, lsl #1
   15d6c:	mov	r2, #0
   15d70:	addne	pc, pc, r3, lsl #2
   15d74:	nop	{0}
   15d78:	cmp	r0, r1, lsl #31
   15d7c:	adc	r2, r2, r2
   15d80:	subcs	r0, r0, r1, lsl #31
   15d84:	cmp	r0, r1, lsl #30
   15d88:	adc	r2, r2, r2
   15d8c:	subcs	r0, r0, r1, lsl #30
   15d90:	cmp	r0, r1, lsl #29
   15d94:	adc	r2, r2, r2
   15d98:	subcs	r0, r0, r1, lsl #29
   15d9c:	cmp	r0, r1, lsl #28
   15da0:	adc	r2, r2, r2
   15da4:	subcs	r0, r0, r1, lsl #28
   15da8:	cmp	r0, r1, lsl #27
   15dac:	adc	r2, r2, r2
   15db0:	subcs	r0, r0, r1, lsl #27
   15db4:	cmp	r0, r1, lsl #26
   15db8:	adc	r2, r2, r2
   15dbc:	subcs	r0, r0, r1, lsl #26
   15dc0:	cmp	r0, r1, lsl #25
   15dc4:	adc	r2, r2, r2
   15dc8:	subcs	r0, r0, r1, lsl #25
   15dcc:	cmp	r0, r1, lsl #24
   15dd0:	adc	r2, r2, r2
   15dd4:	subcs	r0, r0, r1, lsl #24
   15dd8:	cmp	r0, r1, lsl #23
   15ddc:	adc	r2, r2, r2
   15de0:	subcs	r0, r0, r1, lsl #23
   15de4:	cmp	r0, r1, lsl #22
   15de8:	adc	r2, r2, r2
   15dec:	subcs	r0, r0, r1, lsl #22
   15df0:	cmp	r0, r1, lsl #21
   15df4:	adc	r2, r2, r2
   15df8:	subcs	r0, r0, r1, lsl #21
   15dfc:	cmp	r0, r1, lsl #20
   15e00:	adc	r2, r2, r2
   15e04:	subcs	r0, r0, r1, lsl #20
   15e08:	cmp	r0, r1, lsl #19
   15e0c:	adc	r2, r2, r2
   15e10:	subcs	r0, r0, r1, lsl #19
   15e14:	cmp	r0, r1, lsl #18
   15e18:	adc	r2, r2, r2
   15e1c:	subcs	r0, r0, r1, lsl #18
   15e20:	cmp	r0, r1, lsl #17
   15e24:	adc	r2, r2, r2
   15e28:	subcs	r0, r0, r1, lsl #17
   15e2c:	cmp	r0, r1, lsl #16
   15e30:	adc	r2, r2, r2
   15e34:	subcs	r0, r0, r1, lsl #16
   15e38:	cmp	r0, r1, lsl #15
   15e3c:	adc	r2, r2, r2
   15e40:	subcs	r0, r0, r1, lsl #15
   15e44:	cmp	r0, r1, lsl #14
   15e48:	adc	r2, r2, r2
   15e4c:	subcs	r0, r0, r1, lsl #14
   15e50:	cmp	r0, r1, lsl #13
   15e54:	adc	r2, r2, r2
   15e58:	subcs	r0, r0, r1, lsl #13
   15e5c:	cmp	r0, r1, lsl #12
   15e60:	adc	r2, r2, r2
   15e64:	subcs	r0, r0, r1, lsl #12
   15e68:	cmp	r0, r1, lsl #11
   15e6c:	adc	r2, r2, r2
   15e70:	subcs	r0, r0, r1, lsl #11
   15e74:	cmp	r0, r1, lsl #10
   15e78:	adc	r2, r2, r2
   15e7c:	subcs	r0, r0, r1, lsl #10
   15e80:	cmp	r0, r1, lsl #9
   15e84:	adc	r2, r2, r2
   15e88:	subcs	r0, r0, r1, lsl #9
   15e8c:	cmp	r0, r1, lsl #8
   15e90:	adc	r2, r2, r2
   15e94:	subcs	r0, r0, r1, lsl #8
   15e98:	cmp	r0, r1, lsl #7
   15e9c:	adc	r2, r2, r2
   15ea0:	subcs	r0, r0, r1, lsl #7
   15ea4:	cmp	r0, r1, lsl #6
   15ea8:	adc	r2, r2, r2
   15eac:	subcs	r0, r0, r1, lsl #6
   15eb0:	cmp	r0, r1, lsl #5
   15eb4:	adc	r2, r2, r2
   15eb8:	subcs	r0, r0, r1, lsl #5
   15ebc:	cmp	r0, r1, lsl #4
   15ec0:	adc	r2, r2, r2
   15ec4:	subcs	r0, r0, r1, lsl #4
   15ec8:	cmp	r0, r1, lsl #3
   15ecc:	adc	r2, r2, r2
   15ed0:	subcs	r0, r0, r1, lsl #3
   15ed4:	cmp	r0, r1, lsl #2
   15ed8:	adc	r2, r2, r2
   15edc:	subcs	r0, r0, r1, lsl #2
   15ee0:	cmp	r0, r1, lsl #1
   15ee4:	adc	r2, r2, r2
   15ee8:	subcs	r0, r0, r1, lsl #1
   15eec:	cmp	r0, r1
   15ef0:	adc	r2, r2, r2
   15ef4:	subcs	r0, r0, r1
   15ef8:	mov	r0, r2
   15efc:	bx	lr
   15f00:	moveq	r0, #1
   15f04:	movne	r0, #0
   15f08:	bx	lr
   15f0c:	clz	r2, r1
   15f10:	rsb	r2, r2, #31
   15f14:	lsr	r0, r0, r2
   15f18:	bx	lr
   15f1c:	cmp	r0, #0
   15f20:	mvnne	r0, #0
   15f24:	b	16188 <close_stdout@@Base+0x3230>
   15f28:	cmp	r1, #0
   15f2c:	beq	15f1c <close_stdout@@Base+0x2fc4>
   15f30:	push	{r0, r1, lr}
   15f34:	bl	15d3c <close_stdout@@Base+0x2de4>
   15f38:	pop	{r1, r2, lr}
   15f3c:	mul	r3, r2, r0
   15f40:	sub	r1, r1, r3
   15f44:	bx	lr
   15f48:	cmp	r1, #0
   15f4c:	beq	16158 <close_stdout@@Base+0x3200>
   15f50:	eor	ip, r0, r1
   15f54:	rsbmi	r1, r1, #0
   15f58:	subs	r2, r1, #1
   15f5c:	beq	16124 <close_stdout@@Base+0x31cc>
   15f60:	movs	r3, r0
   15f64:	rsbmi	r3, r0, #0
   15f68:	cmp	r3, r1
   15f6c:	bls	16130 <close_stdout@@Base+0x31d8>
   15f70:	tst	r1, r2
   15f74:	beq	16140 <close_stdout@@Base+0x31e8>
   15f78:	clz	r2, r3
   15f7c:	clz	r0, r1
   15f80:	sub	r2, r0, r2
   15f84:	rsbs	r2, r2, #31
   15f88:	addne	r2, r2, r2, lsl #1
   15f8c:	mov	r0, #0
   15f90:	addne	pc, pc, r2, lsl #2
   15f94:	nop	{0}
   15f98:	cmp	r3, r1, lsl #31
   15f9c:	adc	r0, r0, r0
   15fa0:	subcs	r3, r3, r1, lsl #31
   15fa4:	cmp	r3, r1, lsl #30
   15fa8:	adc	r0, r0, r0
   15fac:	subcs	r3, r3, r1, lsl #30
   15fb0:	cmp	r3, r1, lsl #29
   15fb4:	adc	r0, r0, r0
   15fb8:	subcs	r3, r3, r1, lsl #29
   15fbc:	cmp	r3, r1, lsl #28
   15fc0:	adc	r0, r0, r0
   15fc4:	subcs	r3, r3, r1, lsl #28
   15fc8:	cmp	r3, r1, lsl #27
   15fcc:	adc	r0, r0, r0
   15fd0:	subcs	r3, r3, r1, lsl #27
   15fd4:	cmp	r3, r1, lsl #26
   15fd8:	adc	r0, r0, r0
   15fdc:	subcs	r3, r3, r1, lsl #26
   15fe0:	cmp	r3, r1, lsl #25
   15fe4:	adc	r0, r0, r0
   15fe8:	subcs	r3, r3, r1, lsl #25
   15fec:	cmp	r3, r1, lsl #24
   15ff0:	adc	r0, r0, r0
   15ff4:	subcs	r3, r3, r1, lsl #24
   15ff8:	cmp	r3, r1, lsl #23
   15ffc:	adc	r0, r0, r0
   16000:	subcs	r3, r3, r1, lsl #23
   16004:	cmp	r3, r1, lsl #22
   16008:	adc	r0, r0, r0
   1600c:	subcs	r3, r3, r1, lsl #22
   16010:	cmp	r3, r1, lsl #21
   16014:	adc	r0, r0, r0
   16018:	subcs	r3, r3, r1, lsl #21
   1601c:	cmp	r3, r1, lsl #20
   16020:	adc	r0, r0, r0
   16024:	subcs	r3, r3, r1, lsl #20
   16028:	cmp	r3, r1, lsl #19
   1602c:	adc	r0, r0, r0
   16030:	subcs	r3, r3, r1, lsl #19
   16034:	cmp	r3, r1, lsl #18
   16038:	adc	r0, r0, r0
   1603c:	subcs	r3, r3, r1, lsl #18
   16040:	cmp	r3, r1, lsl #17
   16044:	adc	r0, r0, r0
   16048:	subcs	r3, r3, r1, lsl #17
   1604c:	cmp	r3, r1, lsl #16
   16050:	adc	r0, r0, r0
   16054:	subcs	r3, r3, r1, lsl #16
   16058:	cmp	r3, r1, lsl #15
   1605c:	adc	r0, r0, r0
   16060:	subcs	r3, r3, r1, lsl #15
   16064:	cmp	r3, r1, lsl #14
   16068:	adc	r0, r0, r0
   1606c:	subcs	r3, r3, r1, lsl #14
   16070:	cmp	r3, r1, lsl #13
   16074:	adc	r0, r0, r0
   16078:	subcs	r3, r3, r1, lsl #13
   1607c:	cmp	r3, r1, lsl #12
   16080:	adc	r0, r0, r0
   16084:	subcs	r3, r3, r1, lsl #12
   16088:	cmp	r3, r1, lsl #11
   1608c:	adc	r0, r0, r0
   16090:	subcs	r3, r3, r1, lsl #11
   16094:	cmp	r3, r1, lsl #10
   16098:	adc	r0, r0, r0
   1609c:	subcs	r3, r3, r1, lsl #10
   160a0:	cmp	r3, r1, lsl #9
   160a4:	adc	r0, r0, r0
   160a8:	subcs	r3, r3, r1, lsl #9
   160ac:	cmp	r3, r1, lsl #8
   160b0:	adc	r0, r0, r0
   160b4:	subcs	r3, r3, r1, lsl #8
   160b8:	cmp	r3, r1, lsl #7
   160bc:	adc	r0, r0, r0
   160c0:	subcs	r3, r3, r1, lsl #7
   160c4:	cmp	r3, r1, lsl #6
   160c8:	adc	r0, r0, r0
   160cc:	subcs	r3, r3, r1, lsl #6
   160d0:	cmp	r3, r1, lsl #5
   160d4:	adc	r0, r0, r0
   160d8:	subcs	r3, r3, r1, lsl #5
   160dc:	cmp	r3, r1, lsl #4
   160e0:	adc	r0, r0, r0
   160e4:	subcs	r3, r3, r1, lsl #4
   160e8:	cmp	r3, r1, lsl #3
   160ec:	adc	r0, r0, r0
   160f0:	subcs	r3, r3, r1, lsl #3
   160f4:	cmp	r3, r1, lsl #2
   160f8:	adc	r0, r0, r0
   160fc:	subcs	r3, r3, r1, lsl #2
   16100:	cmp	r3, r1, lsl #1
   16104:	adc	r0, r0, r0
   16108:	subcs	r3, r3, r1, lsl #1
   1610c:	cmp	r3, r1
   16110:	adc	r0, r0, r0
   16114:	subcs	r3, r3, r1
   16118:	cmp	ip, #0
   1611c:	rsbmi	r0, r0, #0
   16120:	bx	lr
   16124:	teq	ip, r0
   16128:	rsbmi	r0, r0, #0
   1612c:	bx	lr
   16130:	movcc	r0, #0
   16134:	asreq	r0, ip, #31
   16138:	orreq	r0, r0, #1
   1613c:	bx	lr
   16140:	clz	r2, r1
   16144:	rsb	r2, r2, #31
   16148:	cmp	ip, #0
   1614c:	lsr	r0, r3, r2
   16150:	rsbmi	r0, r0, #0
   16154:	bx	lr
   16158:	cmp	r0, #0
   1615c:	mvngt	r0, #-2147483648	; 0x80000000
   16160:	movlt	r0, #-2147483648	; 0x80000000
   16164:	b	16188 <close_stdout@@Base+0x3230>
   16168:	cmp	r1, #0
   1616c:	beq	16158 <close_stdout@@Base+0x3200>
   16170:	push	{r0, r1, lr}
   16174:	bl	15f50 <close_stdout@@Base+0x2ff8>
   16178:	pop	{r1, r2, lr}
   1617c:	mul	r3, r2, r0
   16180:	sub	r1, r1, r3
   16184:	bx	lr
   16188:	push	{r1, lr}
   1618c:	mov	r0, #8
   16190:	bl	10fc4 <raise@plt>
   16194:	pop	{r1, pc}
   16198:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1619c:	mov	r7, r0
   161a0:	ldr	r6, [pc, #76]	; 161f4 <close_stdout@@Base+0x329c>
   161a4:	mov	r8, r1
   161a8:	ldr	r5, [pc, #72]	; 161f8 <close_stdout@@Base+0x32a0>
   161ac:	mov	r9, r2
   161b0:	add	r6, pc, r6
   161b4:	bl	10f80 <fdopen@plt-0x20>
   161b8:	add	r5, pc, r5
   161bc:	rsb	r6, r5, r6
   161c0:	asrs	r6, r6, #2
   161c4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   161c8:	sub	r5, r5, #4
   161cc:	mov	r4, #0
   161d0:	add	r4, r4, #1
   161d4:	ldr	r3, [r5, #4]!
   161d8:	mov	r0, r7
   161dc:	mov	r1, r8
   161e0:	mov	r2, r9
   161e4:	blx	r3
   161e8:	cmp	r4, r6
   161ec:	bne	161d0 <close_stdout@@Base+0x3278>
   161f0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   161f4:	andeq	r1, r1, r4, lsl #25
   161f8:	andeq	r1, r1, r8, ror ip
   161fc:	bx	lr
   16200:	ldr	r3, [pc, #28]	; 16224 <close_stdout@@Base+0x32cc>
   16204:	mov	r1, #0
   16208:	ldr	r2, [pc, #24]	; 16228 <close_stdout@@Base+0x32d0>
   1620c:	add	r3, pc, r3
   16210:	ldr	r3, [r3, r2]
   16214:	cmp	r3, #0
   16218:	ldrne	r2, [r3]
   1621c:	moveq	r2, r3
   16220:	b	11180 <__cxa_atexit@plt>
   16224:	andeq	r1, r1, ip, ror #27
   16228:	andeq	r0, r0, r4, lsl r1

Disassembly of section .fini:

0001622c <.fini>:
   1622c:	push	{r3, lr}
   16230:	pop	{r3, pc}
