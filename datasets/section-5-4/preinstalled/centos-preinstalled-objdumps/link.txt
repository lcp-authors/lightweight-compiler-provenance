
centos-preinstalled/link:     file format elf32-littlearm


Disassembly of section .init:

00010e58 <.init>:
   10e58:	push	{r3, lr}
   10e5c:	bl	11368 <close@plt+0x28c>
   10e60:	pop	{r3, pc}

Disassembly of section .plt:

00010e64 <fdopen@plt-0x14>:
   10e64:	push	{lr}		; (str lr, [sp, #-4]!)
   10e68:	ldr	lr, [pc, #4]	; 10e74 <fdopen@plt-0x4>
   10e6c:	add	lr, pc, lr
   10e70:	ldr	pc, [lr, #8]!
   10e74:	andeq	r4, r1, ip, lsl #3

00010e78 <fdopen@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #20, 20	; 0x14000
   10e80:	ldr	pc, [ip, #396]!	; 0x18c

00010e84 <calloc@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #20, 20	; 0x14000
   10e8c:	ldr	pc, [ip, #388]!	; 0x184

00010e90 <fputs_unlocked@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #20, 20	; 0x14000
   10e98:	ldr	pc, [ip, #380]!	; 0x17c

00010e9c <raise@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #20, 20	; 0x14000
   10ea4:	ldr	pc, [ip, #372]!	; 0x174

00010ea8 <strcmp@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #20, 20	; 0x14000
   10eb0:	ldr	pc, [ip, #364]!	; 0x16c

00010eb4 <fflush@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #20, 20	; 0x14000
   10ebc:	ldr	pc, [ip, #356]!	; 0x164

00010ec0 <free@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #20, 20	; 0x14000
   10ec8:	ldr	pc, [ip, #348]!	; 0x15c

00010ecc <_exit@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #20, 20	; 0x14000
   10ed4:	ldr	pc, [ip, #340]!	; 0x154

00010ed8 <memcpy@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #20, 20	; 0x14000
   10ee0:	ldr	pc, [ip, #332]!	; 0x14c

00010ee4 <mbsinit@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #20, 20	; 0x14000
   10eec:	ldr	pc, [ip, #324]!	; 0x144

00010ef0 <memcmp@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #20, 20	; 0x14000
   10ef8:	ldr	pc, [ip, #316]!	; 0x13c

00010efc <dcgettext@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #20, 20	; 0x14000
   10f04:	ldr	pc, [ip, #308]!	; 0x134

00010f08 <__stack_chk_fail@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #20, 20	; 0x14000
   10f10:	ldr	pc, [ip, #300]!	; 0x12c

00010f14 <realloc@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #20, 20	; 0x14000
   10f1c:	ldr	pc, [ip, #292]!	; 0x124

00010f20 <textdomain@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #20, 20	; 0x14000
   10f28:	ldr	pc, [ip, #284]!	; 0x11c

00010f2c <iswprint@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #20, 20	; 0x14000
   10f34:	ldr	pc, [ip, #276]!	; 0x114

00010f38 <fwrite@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #20, 20	; 0x14000
   10f40:	ldr	pc, [ip, #268]!	; 0x10c

00010f44 <lseek64@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #20, 20	; 0x14000
   10f4c:	ldr	pc, [ip, #260]!	; 0x104

00010f50 <__ctype_get_mb_cur_max@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #20, 20	; 0x14000
   10f58:	ldr	pc, [ip, #252]!	; 0xfc

00010f5c <strcpy@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #20, 20	; 0x14000
   10f64:	ldr	pc, [ip, #244]!	; 0xf4

00010f68 <__fpending@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #20, 20	; 0x14000
   10f70:	ldr	pc, [ip, #236]!	; 0xec

00010f74 <mbrtowc@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #20, 20	; 0x14000
   10f7c:	ldr	pc, [ip, #228]!	; 0xe4

00010f80 <error@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #20, 20	; 0x14000
   10f88:	ldr	pc, [ip, #220]!	; 0xdc

00010f8c <open64@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #20, 20	; 0x14000
   10f94:	ldr	pc, [ip, #212]!	; 0xd4

00010f98 <getenv@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #20, 20	; 0x14000
   10fa0:	ldr	pc, [ip, #204]!	; 0xcc

00010fa4 <malloc@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #20, 20	; 0x14000
   10fac:	ldr	pc, [ip, #196]!	; 0xc4

00010fb0 <__libc_start_main@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #20, 20	; 0x14000
   10fb8:	ldr	pc, [ip, #188]!	; 0xbc

00010fbc <__freading@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #20, 20	; 0x14000
   10fc4:	ldr	pc, [ip, #180]!	; 0xb4

00010fc8 <__gmon_start__@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #20, 20	; 0x14000
   10fd0:	ldr	pc, [ip, #172]!	; 0xac

00010fd4 <getopt_long@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #20, 20	; 0x14000
   10fdc:	ldr	pc, [ip, #164]!	; 0xa4

00010fe0 <__ctype_b_loc@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #20, 20	; 0x14000
   10fe8:	ldr	pc, [ip, #156]!	; 0x9c

00010fec <exit@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #20, 20	; 0x14000
   10ff4:	ldr	pc, [ip, #148]!	; 0x94

00010ff8 <strlen@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #20, 20	; 0x14000
   11000:	ldr	pc, [ip, #140]!	; 0x8c

00011004 <ungetc@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #20, 20	; 0x14000
   1100c:	ldr	pc, [ip, #132]!	; 0x84

00011010 <__errno_location@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #20, 20	; 0x14000
   11018:	ldr	pc, [ip, #124]!	; 0x7c

0001101c <__cxa_atexit@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #20, 20	; 0x14000
   11024:	ldr	pc, [ip, #116]!	; 0x74

00011028 <memset@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #20, 20	; 0x14000
   11030:	ldr	pc, [ip, #108]!	; 0x6c

00011034 <fscanf@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #20, 20	; 0x14000
   1103c:	ldr	pc, [ip, #100]!	; 0x64

00011040 <__printf_chk@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #20, 20	; 0x14000
   11048:	ldr	pc, [ip, #92]!	; 0x5c

0001104c <link@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #20, 20	; 0x14000
   11054:	ldr	pc, [ip, #84]!	; 0x54

00011058 <fileno@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #20, 20	; 0x14000
   11060:	ldr	pc, [ip, #76]!	; 0x4c

00011064 <__fprintf_chk@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #20, 20	; 0x14000
   1106c:	ldr	pc, [ip, #68]!	; 0x44

00011070 <fclose@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #20, 20	; 0x14000
   11078:	ldr	pc, [ip, #60]!	; 0x3c

0001107c <fseeko64@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #20, 20	; 0x14000
   11084:	ldr	pc, [ip, #52]!	; 0x34

00011088 <__uflow@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #20, 20	; 0x14000
   11090:	ldr	pc, [ip, #44]!	; 0x2c

00011094 <setlocale@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #20, 20	; 0x14000
   1109c:	ldr	pc, [ip, #36]!	; 0x24

000110a0 <strrchr@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #20, 20	; 0x14000
   110a8:	ldr	pc, [ip, #28]!

000110ac <nl_langinfo@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #20, 20	; 0x14000
   110b4:	ldr	pc, [ip, #20]!

000110b8 <bindtextdomain@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #20, 20	; 0x14000
   110c0:	ldr	pc, [ip, #12]!

000110c4 <strncmp@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #20, 20	; 0x14000
   110cc:	ldr	pc, [ip, #4]!

000110d0 <abort@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #77824	; 0x13000
   110d8:	ldr	pc, [ip, #4092]!	; 0xffc

000110dc <close@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #77824	; 0x13000
   110e4:	ldr	pc, [ip, #4084]!	; 0xff4

Disassembly of section .text:

000110e8 <usage@@Base-0x378>:
   110e8:	push	{r4, r5, r6, r7, r8, r9, lr}
   110ec:	mov	r7, r0
   110f0:	ldr	r8, [pc, #504]	; 112f0 <close@plt+0x214>
   110f4:	sub	sp, sp, #20
   110f8:	ldr	r0, [r1]
   110fc:	mov	r6, r1
   11100:	add	r8, pc, r8
   11104:	ldr	r9, [pc, #488]	; 112f4 <close@plt+0x218>
   11108:	bl	11930 <close_stdout@@Base+0x2c8>
   1110c:	mov	r0, #6
   11110:	mov	r1, r8
   11114:	add	r9, pc, r9
   11118:	bl	11094 <setlocale@plt>
   1111c:	ldr	r1, [pc, #468]	; 112f8 <close@plt+0x21c>
   11120:	mov	r0, r9
   11124:	ldr	r4, [pc, #464]	; 112fc <close@plt+0x220>
   11128:	add	r1, pc, r1
   1112c:	mov	r5, #0
   11130:	bl	110b8 <bindtextdomain@plt>
   11134:	mov	r0, r9
   11138:	bl	10f20 <textdomain@plt>
   1113c:	ldr	r3, [pc, #444]	; 11300 <close@plt+0x224>
   11140:	add	r4, pc, r4
   11144:	ldr	r0, [r4, r3]
   11148:	bl	14264 <close_stdout@@Base+0x2bfc>
   1114c:	ldr	r3, [pc, #432]	; 11304 <close@plt+0x228>
   11150:	ldr	ip, [pc, #432]	; 11308 <close@plt+0x22c>
   11154:	mov	r0, r7
   11158:	ldr	lr, [pc, #428]	; 1130c <close@plt+0x230>
   1115c:	mov	r1, r6
   11160:	ldr	r9, [r4, r3]
   11164:	ldr	r2, [pc, #420]	; 11310 <close@plt+0x234>
   11168:	add	lr, pc, lr
   1116c:	ldr	r3, [pc, #416]	; 11314 <close@plt+0x238>
   11170:	ldr	r9, [r9]
   11174:	add	r2, pc, r2
   11178:	add	r3, pc, r3
   1117c:	str	r9, [sp]
   11180:	ldr	ip, [r4, ip]
   11184:	str	lr, [sp, #8]
   11188:	str	r5, [sp, #12]
   1118c:	str	ip, [sp, #4]
   11190:	bl	11824 <close_stdout@@Base+0x1bc>
   11194:	str	r5, [sp]
   11198:	mov	r2, r8
   1119c:	mov	r0, r7
   111a0:	mov	r1, r6
   111a4:	mov	r3, r5
   111a8:	bl	10fd4 <getopt_long@plt>
   111ac:	cmn	r0, #1
   111b0:	beq	111bc <close@plt+0xe0>
   111b4:	mov	r0, #1
   111b8:	bl	11460 <usage@@Base>
   111bc:	ldr	r3, [pc, #340]	; 11318 <close@plt+0x23c>
   111c0:	ldr	r4, [r4, r3]
   111c4:	ldr	r3, [r4]
   111c8:	add	r2, r3, #1
   111cc:	cmp	r7, r2
   111d0:	bgt	11204 <close@plt+0x128>
   111d4:	cmp	r7, r3
   111d8:	mov	r0, r5
   111dc:	bgt	11270 <close@plt+0x194>
   111e0:	ldr	r1, [pc, #308]	; 1131c <close@plt+0x240>
   111e4:	mov	r2, #5
   111e8:	add	r1, pc, r1
   111ec:	bl	10efc <dcgettext@plt>
   111f0:	mov	r1, r5
   111f4:	mov	r2, r0
   111f8:	mov	r0, r5
   111fc:	bl	10f80 <error@plt>
   11200:	b	111b4 <close@plt+0xd8>
   11204:	add	r2, r3, #2
   11208:	cmp	r7, r2
   1120c:	ble	11250 <close@plt+0x174>
   11210:	ldr	r1, [pc, #264]	; 11320 <close@plt+0x244>
   11214:	mov	r0, r5
   11218:	mov	r2, #5
   1121c:	add	r1, pc, r1
   11220:	bl	10efc <dcgettext@plt>
   11224:	ldr	r3, [r4]
   11228:	add	r3, r3, #2
   1122c:	mov	r7, r0
   11230:	ldr	r0, [r6, r3, lsl #2]
   11234:	bl	13180 <close_stdout@@Base+0x1b18>
   11238:	mov	r1, r5
   1123c:	mov	r2, r7
   11240:	mov	r3, r0
   11244:	mov	r0, r5
   11248:	bl	10f80 <error@plt>
   1124c:	b	111b4 <close@plt+0xd8>
   11250:	add	r2, r6, r3, lsl #2
   11254:	ldr	r0, [r6, r3, lsl #2]
   11258:	ldr	r1, [r2, #4]
   1125c:	bl	1104c <link@plt>
   11260:	cmp	r0, #0
   11264:	bne	1128c <close@plt+0x1b0>
   11268:	mov	r0, #0
   1126c:	bl	10fec <exit@plt>
   11270:	ldr	r1, [pc, #172]	; 11324 <close@plt+0x248>
   11274:	mov	r2, #5
   11278:	add	r1, pc, r1
   1127c:	bl	10efc <dcgettext@plt>
   11280:	ldr	r3, [r4]
   11284:	mov	r7, r0
   11288:	b	11230 <close@plt+0x154>
   1128c:	bl	11010 <__errno_location@plt>
   11290:	ldr	r1, [pc, #144]	; 11328 <close@plt+0x24c>
   11294:	mov	r2, #5
   11298:	add	r1, pc, r1
   1129c:	ldr	r7, [r0]
   112a0:	mov	r0, r5
   112a4:	bl	10efc <dcgettext@plt>
   112a8:	ldr	r3, [r4]
   112ac:	add	r3, r3, #1
   112b0:	ldr	r1, [r6, r3, lsl #2]
   112b4:	mov	r8, r0
   112b8:	mov	r0, r5
   112bc:	bl	13178 <close_stdout@@Base+0x1b10>
   112c0:	ldr	r3, [r4]
   112c4:	ldr	r1, [r6, r3, lsl #2]
   112c8:	mov	r5, r0
   112cc:	mov	r0, #1
   112d0:	bl	13178 <close_stdout@@Base+0x1b10>
   112d4:	mov	r1, r7
   112d8:	mov	r2, r8
   112dc:	mov	r3, r5
   112e0:	str	r0, [sp]
   112e4:	mov	r0, #1
   112e8:	bl	10f80 <error@plt>
   112ec:	b	11268 <close@plt+0x18c>
   112f0:	andeq	r3, r0, r8, ror r3
   112f4:	andeq	r3, r0, r4, lsr #5
   112f8:	andeq	r3, r0, r4, asr r3
   112fc:			; <UNDEFINED> instruction: 0x00013eb8
   11300:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11304:	andeq	r0, r0, r8, ror #1
   11308:	andeq	r0, r0, r0, lsl #2
   1130c:	andeq	r3, r0, r0, lsr r3
   11310:	andeq	r3, r0, ip, lsl r3
   11314:	andeq	r3, r0, ip, lsr r2
   11318:	andeq	r0, r0, r4, ror #1
   1131c:	andeq	r3, r0, r0, asr #5
   11320:			; <UNDEFINED> instruction: 0x000032b8
   11324:	andeq	r3, r0, r0, asr #4
   11328:	andeq	r3, r0, r0, asr r2
   1132c:	mov	fp, #0
   11330:	mov	lr, #0
   11334:	pop	{r1}		; (ldr r1, [sp], #4)
   11338:	mov	r2, sp
   1133c:	push	{r2}		; (str r2, [sp, #-4]!)
   11340:	push	{r0}		; (str r0, [sp, #-4]!)
   11344:	ldr	ip, [pc, #16]	; 1135c <close@plt+0x280>
   11348:	push	{ip}		; (str ip, [sp, #-4]!)
   1134c:	ldr	r0, [pc, #12]	; 11360 <close@plt+0x284>
   11350:	ldr	r3, [pc, #12]	; 11364 <close@plt+0x288>
   11354:	bl	10fb0 <__libc_start_main@plt>
   11358:	bl	110d0 <abort@plt>
   1135c:	andeq	r4, r1, r0, ror #4
   11360:	andeq	r1, r1, r8, ror #1
   11364:	strdeq	r4, [r1], -ip
   11368:	ldr	r3, [pc, #20]	; 11384 <close@plt+0x2a8>
   1136c:	ldr	r2, [pc, #20]	; 11388 <close@plt+0x2ac>
   11370:	add	r3, pc, r3
   11374:	ldr	r2, [r3, r2]
   11378:	cmp	r2, #0
   1137c:	bxeq	lr
   11380:	b	10fc8 <__gmon_start__@plt>
   11384:	andeq	r3, r1, r8, lsl #25
   11388:	strdeq	r0, [r0], -r4
   1138c:	push	{r3, lr}
   11390:	movw	r0, #20840	; 0x5168
   11394:	ldr	r3, [pc, #36]	; 113c0 <close@plt+0x2e4>
   11398:	movt	r0, #2
   1139c:	rsb	r3, r0, r3
   113a0:	cmp	r3, #6
   113a4:	popls	{r3, pc}
   113a8:	movw	r3, #0
   113ac:	movt	r3, #0
   113b0:	cmp	r3, #0
   113b4:	popeq	{r3, pc}
   113b8:	blx	r3
   113bc:	pop	{r3, pc}
   113c0:	andeq	r5, r2, fp, ror #2
   113c4:	push	{r3, lr}
   113c8:	movw	r0, #20840	; 0x5168
   113cc:	movw	r3, #20840	; 0x5168
   113d0:	movt	r0, #2
   113d4:	movt	r3, #2
   113d8:	rsb	r3, r0, r3
   113dc:	asr	r3, r3, #2
   113e0:	add	r3, r3, r3, lsr #31
   113e4:	asrs	r1, r3, #1
   113e8:	popeq	{r3, pc}
   113ec:	movw	r2, #0
   113f0:	movt	r2, #0
   113f4:	cmp	r2, #0
   113f8:	popeq	{r3, pc}
   113fc:	blx	r2
   11400:	pop	{r3, pc}
   11404:	push	{r4, lr}
   11408:	movw	r4, #20840	; 0x5168
   1140c:	movt	r4, #2
   11410:	ldrb	r3, [r4]
   11414:	cmp	r3, #0
   11418:	popne	{r4, pc}
   1141c:	bl	1138c <close@plt+0x2b0>
   11420:	mov	r3, #1
   11424:	strb	r3, [r4]
   11428:	pop	{r4, pc}
   1142c:	movw	r0, #20144	; 0x4eb0
   11430:	movt	r0, #2
   11434:	push	{r3, lr}
   11438:	ldr	r3, [r0]
   1143c:	cmp	r3, #0
   11440:	beq	11458 <close@plt+0x37c>
   11444:	movw	r3, #0
   11448:	movt	r3, #0
   1144c:	cmp	r3, #0
   11450:	beq	11458 <close@plt+0x37c>
   11454:	blx	r3
   11458:	pop	{r3, lr}
   1145c:	b	113c4 <close@plt+0x2e8>

00011460 <usage@@Base>:
   11460:	push	{r4, r5, r6, lr}
   11464:	subs	r4, r0, #0
   11468:	ldr	r5, [pc, #404]	; 11604 <usage@@Base+0x1a4>
   1146c:	add	r5, pc, r5
   11470:	beq	114b8 <usage@@Base+0x58>
   11474:	ldr	r3, [pc, #396]	; 11608 <usage@@Base+0x1a8>
   11478:	mov	r2, #5
   1147c:	ldr	r1, [pc, #392]	; 1160c <usage@@Base+0x1ac>
   11480:	mov	r0, #0
   11484:	ldr	r3, [r5, r3]
   11488:	add	r1, pc, r1
   1148c:	ldr	r6, [r3]
   11490:	bl	10efc <dcgettext@plt>
   11494:	ldr	r3, [pc, #372]	; 11610 <usage@@Base+0x1b0>
   11498:	mov	r1, #1
   1149c:	ldr	r3, [r5, r3]
   114a0:	ldr	r3, [r3]
   114a4:	mov	r2, r0
   114a8:	mov	r0, r6
   114ac:	bl	11064 <__fprintf_chk@plt>
   114b0:	mov	r0, r4
   114b4:	bl	10fec <exit@plt>
   114b8:	ldr	r1, [pc, #340]	; 11614 <usage@@Base+0x1b4>
   114bc:	mov	r2, #5
   114c0:	add	r1, pc, r1
   114c4:	bl	10efc <dcgettext@plt>
   114c8:	ldr	r3, [pc, #320]	; 11610 <usage@@Base+0x1b0>
   114cc:	ldr	r6, [r5, r3]
   114d0:	ldr	r2, [r6]
   114d4:	mov	r3, r2
   114d8:	mov	r1, r0
   114dc:	mov	r0, #1
   114e0:	bl	11040 <__printf_chk@plt>
   114e4:	ldr	r1, [pc, #300]	; 11618 <usage@@Base+0x1b8>
   114e8:	mov	r2, #5
   114ec:	mov	r0, r4
   114f0:	add	r1, pc, r1
   114f4:	bl	10efc <dcgettext@plt>
   114f8:	ldr	r3, [pc, #284]	; 1161c <usage@@Base+0x1bc>
   114fc:	ldr	r5, [r5, r3]
   11500:	ldr	r1, [r5]
   11504:	bl	10e90 <fputs_unlocked@plt>
   11508:	ldr	r1, [pc, #272]	; 11620 <usage@@Base+0x1c0>
   1150c:	mov	r2, #5
   11510:	mov	r0, r4
   11514:	add	r1, pc, r1
   11518:	bl	10efc <dcgettext@plt>
   1151c:	ldr	r1, [r5]
   11520:	bl	10e90 <fputs_unlocked@plt>
   11524:	ldr	r1, [pc, #248]	; 11624 <usage@@Base+0x1c4>
   11528:	mov	r2, #5
   1152c:	mov	r0, r4
   11530:	add	r1, pc, r1
   11534:	bl	10efc <dcgettext@plt>
   11538:	ldr	r1, [r5]
   1153c:	bl	10e90 <fputs_unlocked@plt>
   11540:	ldr	r1, [pc, #224]	; 11628 <usage@@Base+0x1c8>
   11544:	mov	r2, #5
   11548:	mov	r0, r4
   1154c:	add	r1, pc, r1
   11550:	bl	10efc <dcgettext@plt>
   11554:	ldr	r2, [pc, #208]	; 1162c <usage@@Base+0x1cc>
   11558:	ldr	r3, [pc, #208]	; 11630 <usage@@Base+0x1d0>
   1155c:	add	r2, pc, r2
   11560:	add	r3, pc, r3
   11564:	mov	r1, r0
   11568:	mov	r0, #1
   1156c:	bl	11040 <__printf_chk@plt>
   11570:	mov	r0, #5
   11574:	mov	r1, r4
   11578:	bl	11094 <setlocale@plt>
   1157c:	cmp	r0, #0
   11580:	beq	1159c <usage@@Base+0x13c>
   11584:	ldr	r1, [pc, #168]	; 11634 <usage@@Base+0x1d4>
   11588:	mov	r2, #3
   1158c:	add	r1, pc, r1
   11590:	bl	110c4 <strncmp@plt>
   11594:	cmp	r0, #0
   11598:	bne	115d0 <usage@@Base+0x170>
   1159c:	ldr	r1, [pc, #148]	; 11638 <usage@@Base+0x1d8>
   115a0:	mov	r2, #5
   115a4:	mov	r0, #0
   115a8:	add	r1, pc, r1
   115ac:	bl	10efc <dcgettext@plt>
   115b0:	mov	r5, r0
   115b4:	ldr	r0, [r6]
   115b8:	bl	11780 <close_stdout@@Base+0x118>
   115bc:	mov	r1, r5
   115c0:	mov	r2, r0
   115c4:	mov	r0, #1
   115c8:	bl	11040 <__printf_chk@plt>
   115cc:	b	114b0 <usage@@Base+0x50>
   115d0:	ldr	r1, [pc, #100]	; 1163c <usage@@Base+0x1dc>
   115d4:	mov	r2, #5
   115d8:	mov	r0, r4
   115dc:	add	r1, pc, r1
   115e0:	bl	10efc <dcgettext@plt>
   115e4:	mov	r5, r0
   115e8:	ldr	r0, [r6]
   115ec:	bl	11780 <close_stdout@@Base+0x118>
   115f0:	mov	r1, r5
   115f4:	mov	r2, r0
   115f8:	mov	r0, #1
   115fc:	bl	11040 <__printf_chk@plt>
   11600:	b	1159c <usage@@Base+0x13c>
   11604:	andeq	r3, r1, ip, lsl #23
   11608:	andeq	r0, r0, ip, ror #1
   1160c:	andeq	r2, r0, r0, lsl lr
   11610:	andeq	r0, r0, ip, lsl #2
   11614:	andeq	r2, r0, r0, lsl #28
   11618:	strdeq	r2, [r0], -r8
   1161c:	strdeq	r0, [r0], -ip
   11620:	andeq	r2, r0, r0, lsr #28
   11624:	andeq	r2, r0, r4, lsr lr
   11628:	andeq	r2, r0, r0, asr lr
   1162c:	andeq	r2, r0, r8, asr lr
   11630:	andeq	r2, r0, r4, ror #28
   11634:	andeq	r2, r0, r0, ror #28
   11638:	muleq	r0, r0, lr
   1163c:	andeq	r2, r0, r4, lsl lr
   11640:	ldr	r3, [pc, #8]	; 11650 <usage@@Base+0x1f0>
   11644:	add	r3, pc, r3
   11648:	str	r0, [r3]
   1164c:	bx	lr
   11650:	andeq	r3, r1, r0, lsr #22
   11654:	ldr	r3, [pc, #8]	; 11664 <usage@@Base+0x204>
   11658:	add	r3, pc, r3
   1165c:	strb	r0, [r3, #4]
   11660:	bx	lr
   11664:	andeq	r3, r1, ip, lsl #22

00011668 <close_stdout@@Base>:
   11668:	push	{r4, r5, r6, r7, lr}
   1166c:	sub	sp, sp, #12
   11670:	ldr	r4, [pc, #228]	; 1175c <close_stdout@@Base+0xf4>
   11674:	ldr	r3, [pc, #228]	; 11760 <close_stdout@@Base+0xf8>
   11678:	add	r4, pc, r4
   1167c:	ldr	r3, [r4, r3]
   11680:	ldr	r0, [r3]
   11684:	bl	13998 <close_stdout@@Base+0x2330>
   11688:	cmp	r0, #0
   1168c:	beq	116b4 <close_stdout@@Base+0x4c>
   11690:	ldr	r3, [pc, #204]	; 11764 <close_stdout@@Base+0xfc>
   11694:	add	r3, pc, r3
   11698:	ldrb	r3, [r3, #4]
   1169c:	cmp	r3, #0
   116a0:	beq	116d4 <close_stdout@@Base+0x6c>
   116a4:	bl	11010 <__errno_location@plt>
   116a8:	ldr	r3, [r0]
   116ac:	cmp	r3, #32
   116b0:	bne	116d4 <close_stdout@@Base+0x6c>
   116b4:	ldr	r3, [pc, #172]	; 11768 <close_stdout@@Base+0x100>
   116b8:	ldr	r3, [r4, r3]
   116bc:	ldr	r0, [r3]
   116c0:	bl	13998 <close_stdout@@Base+0x2330>
   116c4:	cmp	r0, #0
   116c8:	bne	11728 <close_stdout@@Base+0xc0>
   116cc:	add	sp, sp, #12
   116d0:	pop	{r4, r5, r6, r7, pc}
   116d4:	ldr	r1, [pc, #144]	; 1176c <close_stdout@@Base+0x104>
   116d8:	mov	r0, #0
   116dc:	mov	r2, #5
   116e0:	add	r1, pc, r1
   116e4:	bl	10efc <dcgettext@plt>
   116e8:	ldr	r3, [pc, #128]	; 11770 <close_stdout@@Base+0x108>
   116ec:	ldr	r5, [pc, r3]
   116f0:	cmp	r5, #0
   116f4:	mov	r6, r0
   116f8:	beq	11738 <close_stdout@@Base+0xd0>
   116fc:	bl	11010 <__errno_location@plt>
   11700:	ldr	r7, [r0]
   11704:	mov	r0, r5
   11708:	bl	1302c <close_stdout@@Base+0x19c4>
   1170c:	ldr	r2, [pc, #96]	; 11774 <close_stdout@@Base+0x10c>
   11710:	str	r6, [sp]
   11714:	mov	r1, r7
   11718:	add	r2, pc, r2
   1171c:	mov	r3, r0
   11720:	mov	r0, #0
   11724:	bl	10f80 <error@plt>
   11728:	ldr	r3, [pc, #72]	; 11778 <close_stdout@@Base+0x110>
   1172c:	ldr	r3, [r4, r3]
   11730:	ldr	r0, [r3]
   11734:	bl	10ecc <_exit@plt>
   11738:	bl	11010 <__errno_location@plt>
   1173c:	ldr	r2, [pc, #56]	; 1177c <close_stdout@@Base+0x114>
   11740:	add	r2, pc, r2
   11744:	mov	r3, r0
   11748:	mov	r0, r5
   1174c:	ldr	r1, [r3]
   11750:	mov	r3, r6
   11754:	bl	10f80 <error@plt>
   11758:	b	11728 <close_stdout@@Base+0xc0>
   1175c:	andeq	r3, r1, r0, lsl #19
   11760:	strdeq	r0, [r0], -ip
   11764:	ldrdeq	r3, [r1], -r0
   11768:	andeq	r0, r0, ip, ror #1
   1176c:	andeq	r2, r0, ip, lsr #28
   11770:	andeq	r3, r1, r8, ror sl
   11774:	andeq	r2, r0, r0, lsl #28
   11778:	andeq	r0, r0, r4, lsl #2
   1177c:	ldrdeq	r2, [r0], -ip
   11780:	ldrb	r3, [r0]
   11784:	cmp	r3, #47	; 0x2f
   11788:	bne	117a4 <close_stdout@@Base+0x13c>
   1178c:	add	r2, r0, #1
   11790:	mov	r0, r2
   11794:	add	r2, r2, #1
   11798:	ldrb	r3, [r0]
   1179c:	cmp	r3, #47	; 0x2f
   117a0:	beq	11790 <close_stdout@@Base+0x128>
   117a4:	cmp	r3, #0
   117a8:	bxeq	lr
   117ac:	mov	r2, r0
   117b0:	mov	r1, #0
   117b4:	cmp	r3, #47	; 0x2f
   117b8:	moveq	r1, #1
   117bc:	beq	117cc <close_stdout@@Base+0x164>
   117c0:	cmp	r1, #0
   117c4:	movne	r0, r2
   117c8:	movne	r1, #0
   117cc:	ldrb	r3, [r2, #1]!
   117d0:	cmp	r3, #0
   117d4:	bne	117b4 <close_stdout@@Base+0x14c>
   117d8:	bx	lr
   117dc:	push	{r4, lr}
   117e0:	mov	r4, r0
   117e4:	bl	10ff8 <strlen@plt>
   117e8:	cmp	r0, #1
   117ec:	popls	{r4, pc}
   117f0:	sub	r3, r0, #1
   117f4:	ldrb	r2, [r4, r3]
   117f8:	cmp	r2, #47	; 0x2f
   117fc:	popne	{r4, pc}
   11800:	mov	r0, r3
   11804:	cmp	r0, #1
   11808:	sub	r3, r3, #1
   1180c:	beq	11820 <close_stdout@@Base+0x1b8>
   11810:	ldrb	r2, [r4, r3]
   11814:	cmp	r2, #47	; 0x2f
   11818:	popne	{r4, pc}
   1181c:	b	11800 <close_stdout@@Base+0x198>
   11820:	pop	{r4, pc}
   11824:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11828:	mov	r9, r3
   1182c:	ldr	r4, [pc, #224]	; 11914 <close_stdout@@Base+0x2ac>
   11830:	sub	sp, sp, #28
   11834:	ldr	ip, [pc, #220]	; 11918 <close_stdout@@Base+0x2b0>
   11838:	cmp	r0, #2
   1183c:	add	r4, pc, r4
   11840:	ldr	r5, [pc, #212]	; 1191c <close_stdout@@Base+0x2b4>
   11844:	mov	r7, #0
   11848:	mov	sl, r2
   1184c:	ldr	r6, [r4, ip]
   11850:	ldr	r8, [sp, #64]	; 0x40
   11854:	ldr	fp, [sp, #68]	; 0x44
   11858:	ldr	r3, [r6]
   1185c:	str	r3, [sp, #20]
   11860:	ldr	r5, [r4, r5]
   11864:	ldr	ip, [r5]
   11868:	str	r7, [r5]
   1186c:	beq	1189c <close_stdout@@Base+0x234>
   11870:	ldr	r3, [pc, #168]	; 11920 <close_stdout@@Base+0x2b8>
   11874:	mov	r2, #0
   11878:	ldr	r0, [sp, #20]
   1187c:	ldr	r1, [r6]
   11880:	str	ip, [r5]
   11884:	ldr	r3, [r4, r3]
   11888:	cmp	r0, r1
   1188c:	str	r2, [r3]
   11890:	bne	11910 <close_stdout@@Base+0x2a8>
   11894:	add	sp, sp, #28
   11898:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1189c:	ldr	r2, [pc, #128]	; 11924 <close_stdout@@Base+0x2bc>
   118a0:	ldr	r3, [pc, #128]	; 11928 <close_stdout@@Base+0x2c0>
   118a4:	str	r7, [sp]
   118a8:	add	r2, pc, r2
   118ac:	add	r3, pc, r3
   118b0:	str	ip, [sp, #12]
   118b4:	bl	10fd4 <getopt_long@plt>
   118b8:	ldr	ip, [sp, #12]
   118bc:	cmn	r0, #1
   118c0:	beq	11870 <close_stdout@@Base+0x208>
   118c4:	cmp	r0, #104	; 0x68
   118c8:	beq	11904 <close_stdout@@Base+0x29c>
   118cc:	cmp	r0, #118	; 0x76
   118d0:	bne	11870 <close_stdout@@Base+0x208>
   118d4:	ldr	ip, [pc, #80]	; 1192c <close_stdout@@Base+0x2c4>
   118d8:	add	r0, sp, #72	; 0x48
   118dc:	str	r0, [sp, #16]
   118e0:	mov	r1, sl
   118e4:	mov	r2, r9
   118e8:	mov	r3, r8
   118ec:	ldr	ip, [r4, ip]
   118f0:	str	r0, [sp]
   118f4:	ldr	r0, [ip]
   118f8:	bl	135a0 <close_stdout@@Base+0x1f38>
   118fc:	mov	r0, #0
   11900:	bl	10fec <exit@plt>
   11904:	mov	r0, r7
   11908:	blx	fp
   1190c:	b	118d4 <close_stdout@@Base+0x26c>
   11910:	bl	10f08 <__stack_chk_fail@plt>
   11914:			; <UNDEFINED> instruction: 0x000137bc
   11918:	andeq	r0, r0, r0, ror #1
   1191c:	andeq	r0, r0, r4, lsl r1
   11920:	andeq	r0, r0, r4, ror #1
   11924:	andeq	r2, r0, r8, ror ip
   11928:	andeq	r3, r1, r0, lsl #12
   1192c:	strdeq	r0, [r0], -ip
   11930:	push	{r3, r4, r5, r6, r7, lr}
   11934:	subs	r4, r0, #0
   11938:	ldr	r5, [pc, #172]	; 119ec <close_stdout@@Base+0x384>
   1193c:	add	r5, pc, r5
   11940:	beq	119c8 <close_stdout@@Base+0x360>
   11944:	mov	r1, #47	; 0x2f
   11948:	bl	110a0 <strrchr@plt>
   1194c:	subs	r6, r0, #0
   11950:	beq	119ac <close_stdout@@Base+0x344>
   11954:	add	r7, r6, #1
   11958:	rsb	r3, r4, r7
   1195c:	cmp	r3, #6
   11960:	ble	119ac <close_stdout@@Base+0x344>
   11964:	ldr	r1, [pc, #132]	; 119f0 <close_stdout@@Base+0x388>
   11968:	sub	r0, r6, #6
   1196c:	mov	r2, #7
   11970:	add	r1, pc, r1
   11974:	bl	110c4 <strncmp@plt>
   11978:	cmp	r0, #0
   1197c:	bne	119ac <close_stdout@@Base+0x344>
   11980:	ldr	r1, [pc, #108]	; 119f4 <close_stdout@@Base+0x38c>
   11984:	mov	r0, r7
   11988:	mov	r2, #3
   1198c:	add	r1, pc, r1
   11990:	bl	110c4 <strncmp@plt>
   11994:	cmp	r0, #0
   11998:	movne	r4, r7
   1199c:	ldreq	r3, [pc, #84]	; 119f8 <close_stdout@@Base+0x390>
   119a0:	addeq	r4, r6, #4
   119a4:	ldreq	r3, [r5, r3]
   119a8:	streq	r4, [r3]
   119ac:	ldr	r2, [pc, #72]	; 119fc <close_stdout@@Base+0x394>
   119b0:	ldr	r3, [pc, #72]	; 11a00 <close_stdout@@Base+0x398>
   119b4:	ldr	r2, [r5, r2]
   119b8:	str	r4, [r2]
   119bc:	ldr	r3, [r5, r3]
   119c0:	str	r4, [r3]
   119c4:	pop	{r3, r4, r5, r6, r7, pc}
   119c8:	ldr	r3, [pc, #52]	; 11a04 <close_stdout@@Base+0x39c>
   119cc:	mov	r1, #1
   119d0:	ldr	r0, [pc, #48]	; 11a08 <close_stdout@@Base+0x3a0>
   119d4:	mov	r2, #55	; 0x37
   119d8:	ldr	r3, [r5, r3]
   119dc:	add	r0, pc, r0
   119e0:	ldr	r3, [r3]
   119e4:	bl	10f38 <fwrite@plt>
   119e8:	bl	110d0 <abort@plt>
   119ec:			; <UNDEFINED> instruction: 0x000136bc
   119f0:	strdeq	r2, [r0], -ip
   119f4:	andeq	r2, r0, r8, ror #23
   119f8:	andeq	r0, r0, r8, lsl r1
   119fc:	andeq	r0, r0, ip, lsl #2
   11a00:	andeq	r0, r0, r8, lsl #2
   11a04:	andeq	r0, r0, ip, ror #1
   11a08:	andeq	r2, r0, r8, asr fp
   11a0c:	push	{r3, lr}
   11a10:	mov	r3, r0
   11a14:	mov	r2, #0
   11a18:	cmp	r1, #8
   11a1c:	str	r2, [r3], #4
   11a20:	add	r3, r3, #4
   11a24:	str	r2, [r0, #4]
   11a28:	str	r2, [r3], #4
   11a2c:	str	r2, [r3], #4
   11a30:	str	r2, [r3], #4
   11a34:	str	r2, [r3], #4
   11a38:	str	r2, [r3], #4
   11a3c:	str	r2, [r3], #4
   11a40:	str	r2, [r3], #4
   11a44:	str	r2, [r3], #4
   11a48:	str	r2, [r3], #4
   11a4c:	str	r2, [r3]
   11a50:	beq	11a5c <close_stdout@@Base+0x3f4>
   11a54:	str	r1, [r0]
   11a58:	pop	{r3, pc}
   11a5c:	bl	110d0 <abort@plt>
   11a60:	push	{r4, r5, r6, lr}
   11a64:	mov	r4, r0
   11a68:	mov	r6, r1
   11a6c:	mov	r0, #0
   11a70:	mov	r1, r4
   11a74:	mov	r2, #5
   11a78:	bl	10efc <dcgettext@plt>
   11a7c:	cmp	r0, r4
   11a80:	mov	r5, r0
   11a84:	beq	11a8c <close_stdout@@Base+0x424>
   11a88:	pop	{r4, r5, r6, pc}
   11a8c:	bl	13a18 <close_stdout@@Base+0x23b0>
   11a90:	ldrb	r3, [r0]
   11a94:	bic	r3, r3, #32
   11a98:	cmp	r3, #85	; 0x55
   11a9c:	bne	11b10 <close_stdout@@Base+0x4a8>
   11aa0:	ldrb	r3, [r0, #1]
   11aa4:	bic	r3, r3, #32
   11aa8:	cmp	r3, #84	; 0x54
   11aac:	bne	11afc <close_stdout@@Base+0x494>
   11ab0:	ldrb	r3, [r0, #2]
   11ab4:	bic	r3, r3, #32
   11ab8:	cmp	r3, #70	; 0x46
   11abc:	bne	11afc <close_stdout@@Base+0x494>
   11ac0:	ldrb	r3, [r0, #3]
   11ac4:	cmp	r3, #45	; 0x2d
   11ac8:	bne	11afc <close_stdout@@Base+0x494>
   11acc:	ldrb	r3, [r0, #4]
   11ad0:	cmp	r3, #56	; 0x38
   11ad4:	bne	11afc <close_stdout@@Base+0x494>
   11ad8:	ldrb	r3, [r0, #5]
   11adc:	cmp	r3, #0
   11ae0:	bne	11afc <close_stdout@@Base+0x494>
   11ae4:	ldrb	r3, [r5]
   11ae8:	cmp	r3, #96	; 0x60
   11aec:	beq	11b88 <close_stdout@@Base+0x520>
   11af0:	ldr	r0, [pc, #180]	; 11bac <close_stdout@@Base+0x544>
   11af4:	add	r0, pc, r0
   11af8:	pop	{r4, r5, r6, pc}
   11afc:	cmp	r6, #7
   11b00:	beq	11b94 <close_stdout@@Base+0x52c>
   11b04:	ldr	r0, [pc, #164]	; 11bb0 <close_stdout@@Base+0x548>
   11b08:	add	r0, pc, r0
   11b0c:	pop	{r4, r5, r6, pc}
   11b10:	cmp	r3, #71	; 0x47
   11b14:	bne	11afc <close_stdout@@Base+0x494>
   11b18:	ldrb	r3, [r0, #1]
   11b1c:	bic	r3, r3, #32
   11b20:	cmp	r3, #66	; 0x42
   11b24:	bne	11afc <close_stdout@@Base+0x494>
   11b28:	ldrb	r3, [r0, #2]
   11b2c:	cmp	r3, #49	; 0x31
   11b30:	bne	11afc <close_stdout@@Base+0x494>
   11b34:	ldrb	r3, [r0, #3]
   11b38:	cmp	r3, #56	; 0x38
   11b3c:	bne	11afc <close_stdout@@Base+0x494>
   11b40:	ldrb	r3, [r0, #4]
   11b44:	cmp	r3, #48	; 0x30
   11b48:	bne	11afc <close_stdout@@Base+0x494>
   11b4c:	ldrb	r3, [r0, #5]
   11b50:	cmp	r3, #51	; 0x33
   11b54:	bne	11afc <close_stdout@@Base+0x494>
   11b58:	ldrb	r3, [r0, #6]
   11b5c:	cmp	r3, #48	; 0x30
   11b60:	bne	11afc <close_stdout@@Base+0x494>
   11b64:	ldrb	r3, [r0, #7]
   11b68:	cmp	r3, #0
   11b6c:	bne	11afc <close_stdout@@Base+0x494>
   11b70:	ldrb	r3, [r5]
   11b74:	cmp	r3, #96	; 0x60
   11b78:	beq	11ba0 <close_stdout@@Base+0x538>
   11b7c:	ldr	r0, [pc, #48]	; 11bb4 <close_stdout@@Base+0x54c>
   11b80:	add	r0, pc, r0
   11b84:	pop	{r4, r5, r6, pc}
   11b88:	ldr	r0, [pc, #40]	; 11bb8 <close_stdout@@Base+0x550>
   11b8c:	add	r0, pc, r0
   11b90:	pop	{r4, r5, r6, pc}
   11b94:	ldr	r0, [pc, #32]	; 11bbc <close_stdout@@Base+0x554>
   11b98:	add	r0, pc, r0
   11b9c:	pop	{r4, r5, r6, pc}
   11ba0:	ldr	r0, [pc, #24]	; 11bc0 <close_stdout@@Base+0x558>
   11ba4:	add	r0, pc, r0
   11ba8:	pop	{r4, r5, r6, pc}
   11bac:	andeq	r2, r0, r4, lsr #21
   11bb0:	muleq	r0, r8, sl
   11bb4:	andeq	r2, r0, ip, lsl sl
   11bb8:	andeq	r2, r0, r0, lsr #20
   11bbc:	andeq	r2, r0, ip, lsl #20
   11bc0:	andeq	r2, r0, r4, lsl #20
   11bc4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11bc8:	sub	sp, sp, #124	; 0x7c
   11bcc:	ldr	ip, [pc, #3304]	; 128bc <close_stdout@@Base+0x1254>
   11bd0:	mov	sl, r1
   11bd4:	str	r0, [sp, #40]	; 0x28
   11bd8:	mov	r8, r3
   11bdc:	ldr	r0, [pc, #3292]	; 128c0 <close_stdout@@Base+0x1258>
   11be0:	add	ip, pc, ip
   11be4:	str	r2, [sp, #32]
   11be8:	ldr	r1, [sp, #164]	; 0xa4
   11bec:	mov	r3, ip
   11bf0:	ldr	r0, [ip, r0]
   11bf4:	ldr	r2, [sp, #172]	; 0xac
   11bf8:	ubfx	r1, r1, #1, #1
   11bfc:	str	r1, [sp, #36]	; 0x24
   11c00:	str	r0, [sp, #56]	; 0x38
   11c04:	ldr	r0, [sp, #168]	; 0xa8
   11c08:	ldr	r1, [sp, #176]	; 0xb0
   11c0c:	str	r2, [sp, #72]	; 0x48
   11c10:	str	r0, [sp, #48]	; 0x30
   11c14:	ldr	r0, [sp, #56]	; 0x38
   11c18:	str	r1, [sp, #68]	; 0x44
   11c1c:	ldr	r3, [r0]
   11c20:	str	r3, [sp, #116]	; 0x74
   11c24:	bl	10f50 <__ctype_get_mb_cur_max@plt>
   11c28:	ldr	r2, [sp, #160]	; 0xa0
   11c2c:	str	r0, [sp, #64]	; 0x40
   11c30:	cmp	r2, #8
   11c34:	addls	pc, pc, r2, lsl #2
   11c38:	b	12798 <close_stdout@@Base+0x1130>
   11c3c:	b	11c60 <close_stdout@@Base+0x5f8>
   11c40:	b	124b0 <close_stdout@@Base+0xe48>
   11c44:	b	124e0 <close_stdout@@Base+0xe78>
   11c48:	b	12390 <close_stdout@@Base+0xd28>
   11c4c:	b	123d0 <close_stdout@@Base+0xd68>
   11c50:	b	123fc <close_stdout@@Base+0xd94>
   11c54:	b	1241c <close_stdout@@Base+0xdb4>
   11c58:	b	1241c <close_stdout@@Base+0xdb4>
   11c5c:	b	1241c <close_stdout@@Base+0xdb4>
   11c60:	mov	r2, #0
   11c64:	str	r2, [sp, #36]	; 0x24
   11c68:	mov	r9, r2
   11c6c:	str	r2, [sp, #24]
   11c70:	str	r2, [sp, #28]
   11c74:	str	r2, [sp, #52]	; 0x34
   11c78:	ldr	r0, [sp, #36]	; 0x24
   11c7c:	mov	fp, #0
   11c80:	ldr	r1, [sp, #24]
   11c84:	eor	r2, r0, #1
   11c88:	eor	r3, r1, #1
   11c8c:	and	r3, r2, r3
   11c90:	and	r2, r1, r0
   11c94:	str	r3, [sp, #44]	; 0x2c
   11c98:	str	r2, [sp, #76]	; 0x4c
   11c9c:	cmn	r8, #1
   11ca0:	beq	12020 <close_stdout@@Base+0x9b8>
   11ca4:	subs	r3, fp, r8
   11ca8:	movne	r3, #1
   11cac:	cmp	r3, #0
   11cb0:	beq	12038 <close_stdout@@Base+0x9d0>
   11cb4:	ldr	r3, [sp, #28]
   11cb8:	ldr	r0, [sp, #24]
   11cbc:	adds	r7, r3, #0
   11cc0:	movne	r7, #1
   11cc4:	ands	r6, r7, r0
   11cc8:	bne	12524 <close_stdout@@Base+0xebc>
   11ccc:	ldr	r1, [sp, #32]
   11cd0:	add	r5, r1, fp
   11cd4:	ldrb	r4, [r5]
   11cd8:	cmp	r4, #126	; 0x7e
   11cdc:	addls	pc, pc, r4, lsl #2
   11ce0:	b	122a4 <close_stdout@@Base+0xc3c>
   11ce4:	b	121b0 <close_stdout@@Base+0xb48>
   11ce8:	b	122a4 <close_stdout@@Base+0xc3c>
   11cec:	b	122a4 <close_stdout@@Base+0xc3c>
   11cf0:	b	122a4 <close_stdout@@Base+0xc3c>
   11cf4:	b	122a4 <close_stdout@@Base+0xc3c>
   11cf8:	b	122a4 <close_stdout@@Base+0xc3c>
   11cfc:	b	122a4 <close_stdout@@Base+0xc3c>
   11d00:	b	12198 <close_stdout@@Base+0xb30>
   11d04:	b	12180 <close_stdout@@Base+0xb18>
   11d08:	b	121a8 <close_stdout@@Base+0xb40>
   11d0c:	b	121a0 <close_stdout@@Base+0xb38>
   11d10:	b	12190 <close_stdout@@Base+0xb28>
   11d14:	b	12188 <close_stdout@@Base+0xb20>
   11d18:	b	1214c <close_stdout@@Base+0xae4>
   11d1c:	b	122a4 <close_stdout@@Base+0xc3c>
   11d20:	b	122a4 <close_stdout@@Base+0xc3c>
   11d24:	b	122a4 <close_stdout@@Base+0xc3c>
   11d28:	b	122a4 <close_stdout@@Base+0xc3c>
   11d2c:	b	122a4 <close_stdout@@Base+0xc3c>
   11d30:	b	122a4 <close_stdout@@Base+0xc3c>
   11d34:	b	122a4 <close_stdout@@Base+0xc3c>
   11d38:	b	122a4 <close_stdout@@Base+0xc3c>
   11d3c:	b	122a4 <close_stdout@@Base+0xc3c>
   11d40:	b	122a4 <close_stdout@@Base+0xc3c>
   11d44:	b	122a4 <close_stdout@@Base+0xc3c>
   11d48:	b	122a4 <close_stdout@@Base+0xc3c>
   11d4c:	b	122a4 <close_stdout@@Base+0xc3c>
   11d50:	b	122a4 <close_stdout@@Base+0xc3c>
   11d54:	b	122a4 <close_stdout@@Base+0xc3c>
   11d58:	b	122a4 <close_stdout@@Base+0xc3c>
   11d5c:	b	122a4 <close_stdout@@Base+0xc3c>
   11d60:	b	122a4 <close_stdout@@Base+0xc3c>
   11d64:	b	120d8 <close_stdout@@Base+0xa70>
   11d68:	b	120d8 <close_stdout@@Base+0xa70>
   11d6c:	b	120d8 <close_stdout@@Base+0xa70>
   11d70:	b	120d0 <close_stdout@@Base+0xa68>
   11d74:	b	120d8 <close_stdout@@Base+0xa70>
   11d78:	b	11fac <close_stdout@@Base+0x944>
   11d7c:	b	120d8 <close_stdout@@Base+0xa70>
   11d80:	b	1224c <close_stdout@@Base+0xbe4>
   11d84:	b	120d8 <close_stdout@@Base+0xa70>
   11d88:	b	120d8 <close_stdout@@Base+0xa70>
   11d8c:	b	120d8 <close_stdout@@Base+0xa70>
   11d90:	b	11fac <close_stdout@@Base+0x944>
   11d94:	b	11fac <close_stdout@@Base+0x944>
   11d98:	b	11fac <close_stdout@@Base+0x944>
   11d9c:	b	11fac <close_stdout@@Base+0x944>
   11da0:	b	11fac <close_stdout@@Base+0x944>
   11da4:	b	11fac <close_stdout@@Base+0x944>
   11da8:	b	11fac <close_stdout@@Base+0x944>
   11dac:	b	11fac <close_stdout@@Base+0x944>
   11db0:	b	11fac <close_stdout@@Base+0x944>
   11db4:	b	11fac <close_stdout@@Base+0x944>
   11db8:	b	11fac <close_stdout@@Base+0x944>
   11dbc:	b	11fac <close_stdout@@Base+0x944>
   11dc0:	b	11fac <close_stdout@@Base+0x944>
   11dc4:	b	11fac <close_stdout@@Base+0x944>
   11dc8:	b	11fac <close_stdout@@Base+0x944>
   11dcc:	b	11fac <close_stdout@@Base+0x944>
   11dd0:	b	120d8 <close_stdout@@Base+0xa70>
   11dd4:	b	120d8 <close_stdout@@Base+0xa70>
   11dd8:	b	120d8 <close_stdout@@Base+0xa70>
   11ddc:	b	120d8 <close_stdout@@Base+0xa70>
   11de0:	b	11ee0 <close_stdout@@Base+0x878>
   11de4:	b	122a4 <close_stdout@@Base+0xc3c>
   11de8:	b	11fac <close_stdout@@Base+0x944>
   11dec:	b	11fac <close_stdout@@Base+0x944>
   11df0:	b	11fac <close_stdout@@Base+0x944>
   11df4:	b	11fac <close_stdout@@Base+0x944>
   11df8:	b	11fac <close_stdout@@Base+0x944>
   11dfc:	b	11fac <close_stdout@@Base+0x944>
   11e00:	b	11fac <close_stdout@@Base+0x944>
   11e04:	b	11fac <close_stdout@@Base+0x944>
   11e08:	b	11fac <close_stdout@@Base+0x944>
   11e0c:	b	11fac <close_stdout@@Base+0x944>
   11e10:	b	11fac <close_stdout@@Base+0x944>
   11e14:	b	11fac <close_stdout@@Base+0x944>
   11e18:	b	11fac <close_stdout@@Base+0x944>
   11e1c:	b	11fac <close_stdout@@Base+0x944>
   11e20:	b	11fac <close_stdout@@Base+0x944>
   11e24:	b	11fac <close_stdout@@Base+0x944>
   11e28:	b	11fac <close_stdout@@Base+0x944>
   11e2c:	b	11fac <close_stdout@@Base+0x944>
   11e30:	b	11fac <close_stdout@@Base+0x944>
   11e34:	b	11fac <close_stdout@@Base+0x944>
   11e38:	b	11fac <close_stdout@@Base+0x944>
   11e3c:	b	11fac <close_stdout@@Base+0x944>
   11e40:	b	11fac <close_stdout@@Base+0x944>
   11e44:	b	11fac <close_stdout@@Base+0x944>
   11e48:	b	11fac <close_stdout@@Base+0x944>
   11e4c:	b	11fac <close_stdout@@Base+0x944>
   11e50:	b	120d8 <close_stdout@@Base+0xa70>
   11e54:	b	12230 <close_stdout@@Base+0xbc8>
   11e58:	b	11fac <close_stdout@@Base+0x944>
   11e5c:	b	120d8 <close_stdout@@Base+0xa70>
   11e60:	b	11fac <close_stdout@@Base+0x944>
   11e64:	b	120d8 <close_stdout@@Base+0xa70>
   11e68:	b	11fac <close_stdout@@Base+0x944>
   11e6c:	b	11fac <close_stdout@@Base+0x944>
   11e70:	b	11fac <close_stdout@@Base+0x944>
   11e74:	b	11fac <close_stdout@@Base+0x944>
   11e78:	b	11fac <close_stdout@@Base+0x944>
   11e7c:	b	11fac <close_stdout@@Base+0x944>
   11e80:	b	11fac <close_stdout@@Base+0x944>
   11e84:	b	11fac <close_stdout@@Base+0x944>
   11e88:	b	11fac <close_stdout@@Base+0x944>
   11e8c:	b	11fac <close_stdout@@Base+0x944>
   11e90:	b	11fac <close_stdout@@Base+0x944>
   11e94:	b	11fac <close_stdout@@Base+0x944>
   11e98:	b	11fac <close_stdout@@Base+0x944>
   11e9c:	b	11fac <close_stdout@@Base+0x944>
   11ea0:	b	11fac <close_stdout@@Base+0x944>
   11ea4:	b	11fac <close_stdout@@Base+0x944>
   11ea8:	b	11fac <close_stdout@@Base+0x944>
   11eac:	b	11fac <close_stdout@@Base+0x944>
   11eb0:	b	11fac <close_stdout@@Base+0x944>
   11eb4:	b	11fac <close_stdout@@Base+0x944>
   11eb8:	b	11fac <close_stdout@@Base+0x944>
   11ebc:	b	11fac <close_stdout@@Base+0x944>
   11ec0:	b	11fac <close_stdout@@Base+0x944>
   11ec4:	b	11fac <close_stdout@@Base+0x944>
   11ec8:	b	11fac <close_stdout@@Base+0x944>
   11ecc:	b	11fac <close_stdout@@Base+0x944>
   11ed0:	b	120b8 <close_stdout@@Base+0xa50>
   11ed4:	b	120d8 <close_stdout@@Base+0xa70>
   11ed8:	b	120b8 <close_stdout@@Base+0xa50>
   11edc:	b	120d0 <close_stdout@@Base+0xa68>
   11ee0:	ldr	r3, [sp, #160]	; 0xa0
   11ee4:	cmp	r3, #2
   11ee8:	beq	12774 <close_stdout@@Base+0x110c>
   11eec:	cmp	r3, #3
   11ef0:	bne	11fac <close_stdout@@Base+0x944>
   11ef4:	ldr	r1, [sp, #164]	; 0xa4
   11ef8:	tst	r1, #4
   11efc:	beq	11fac <close_stdout@@Base+0x944>
   11f00:	add	r3, fp, #2
   11f04:	cmp	r8, r3
   11f08:	bls	11fac <close_stdout@@Base+0x944>
   11f0c:	ldrb	r2, [r5, #1]
   11f10:	mov	r1, #1
   11f14:	cmp	r2, #63	; 0x3f
   11f18:	bne	11fac <close_stdout@@Base+0x944>
   11f1c:	ldr	r0, [sp, #32]
   11f20:	ldrb	ip, [r0, r3]
   11f24:	sub	r0, ip, #33	; 0x21
   11f28:	uxtb	r0, r0
   11f2c:	cmp	r0, #29
   11f30:	bhi	11fac <close_stdout@@Base+0x944>
   11f34:	lsl	r1, r1, r0
   11f38:	movw	r0, #20929	; 0x51c1
   11f3c:	movt	r0, #14336	; 0x3800
   11f40:	and	r0, r1, r0
   11f44:	cmp	r0, #0
   11f48:	beq	11fac <close_stdout@@Base+0x944>
   11f4c:	ldr	r1, [sp, #36]	; 0x24
   11f50:	cmp	r1, #0
   11f54:	bne	120f4 <close_stdout@@Base+0xa8c>
   11f58:	cmp	r9, sl
   11f5c:	mov	r4, ip
   11f60:	mov	fp, r3
   11f64:	ldrcc	r0, [sp, #40]	; 0x28
   11f68:	strbcc	r2, [r0, r9]
   11f6c:	add	r2, r9, #1
   11f70:	cmp	sl, r2
   11f74:	ldrhi	r0, [sp, #40]	; 0x28
   11f78:	movhi	r1, #34	; 0x22
   11f7c:	strbhi	r1, [r0, r2]
   11f80:	add	r2, r9, #2
   11f84:	cmp	sl, r2
   11f88:	ldrhi	r0, [sp, #40]	; 0x28
   11f8c:	movhi	r1, #34	; 0x22
   11f90:	strbhi	r1, [r0, r2]
   11f94:	add	r2, r9, #3
   11f98:	cmp	sl, r2
   11f9c:	add	r9, r9, #4
   11fa0:	ldrhi	r0, [sp, #40]	; 0x28
   11fa4:	movhi	r1, #63	; 0x3f
   11fa8:	strbhi	r1, [r0, r2]
   11fac:	ldr	r0, [sp, #44]	; 0x2c
   11fb0:	cmp	r0, #0
   11fb4:	bne	11fdc <close_stdout@@Base+0x974>
   11fb8:	ldr	r1, [sp, #48]	; 0x30
   11fbc:	cmp	r1, #0
   11fc0:	beq	11fdc <close_stdout@@Base+0x974>
   11fc4:	ubfx	r2, r4, #5, #8
   11fc8:	and	r3, r4, #31
   11fcc:	ldr	r2, [r1, r2, lsl #2]
   11fd0:	lsr	r3, r2, r3
   11fd4:	tst	r3, #1
   11fd8:	bne	11fe4 <close_stdout@@Base+0x97c>
   11fdc:	cmp	r6, #0
   11fe0:	beq	12004 <close_stdout@@Base+0x99c>
   11fe4:	ldr	r2, [sp, #36]	; 0x24
   11fe8:	cmp	r2, #0
   11fec:	bne	120f4 <close_stdout@@Base+0xa8c>
   11ff0:	cmp	r9, sl
   11ff4:	ldrcc	r0, [sp, #40]	; 0x28
   11ff8:	movcc	r3, #92	; 0x5c
   11ffc:	strbcc	r3, [r0, r9]
   12000:	add	r9, r9, #1
   12004:	add	fp, fp, #1
   12008:	cmp	r9, sl
   1200c:	ldrcc	r1, [sp, #40]	; 0x28
   12010:	strbcc	r4, [r1, r9]
   12014:	cmn	r8, #1
   12018:	add	r9, r9, #1
   1201c:	bne	11ca4 <close_stdout@@Base+0x63c>
   12020:	ldr	r2, [sp, #32]
   12024:	ldrb	r3, [r2, fp]
   12028:	adds	r3, r3, #0
   1202c:	movne	r3, #1
   12030:	cmp	r3, #0
   12034:	bne	11cb4 <close_stdout@@Base+0x64c>
   12038:	ldr	r3, [sp, #160]	; 0xa0
   1203c:	cmp	r9, #0
   12040:	cmpeq	r3, #2
   12044:	bne	12054 <close_stdout@@Base+0x9ec>
   12048:	ldr	r0, [sp, #36]	; 0x24
   1204c:	cmp	r0, #0
   12050:	bne	120f4 <close_stdout@@Base+0xa8c>
   12054:	ldr	r1, [sp, #36]	; 0x24
   12058:	ldr	r2, [sp, #52]	; 0x34
   1205c:	eor	r3, r1, #1
   12060:	cmp	r2, #0
   12064:	moveq	r3, #0
   12068:	andne	r3, r3, #1
   1206c:	cmp	r3, #0
   12070:	beq	1209c <close_stdout@@Base+0xa34>
   12074:	ldrb	r3, [r2]
   12078:	cmp	r3, #0
   1207c:	beq	1209c <close_stdout@@Base+0xa34>
   12080:	ldr	r1, [sp, #40]	; 0x28
   12084:	cmp	sl, r9
   12088:	strbhi	r3, [r1, r9]
   1208c:	ldrb	r3, [r2, #1]!
   12090:	add	r9, r9, #1
   12094:	cmp	r3, #0
   12098:	bne	12084 <close_stdout@@Base+0xa1c>
   1209c:	cmp	r9, sl
   120a0:	movcs	r0, r9
   120a4:	ldrcc	r1, [sp, #40]	; 0x28
   120a8:	movcc	r3, #0
   120ac:	movcc	r0, r9
   120b0:	strbcc	r3, [r1, r9]
   120b4:	b	12130 <close_stdout@@Base+0xac8>
   120b8:	cmn	r8, #1
   120bc:	beq	12784 <close_stdout@@Base+0x111c>
   120c0:	subs	r3, r8, #1
   120c4:	movne	r3, #1
   120c8:	cmp	r3, #0
   120cc:	bne	11fac <close_stdout@@Base+0x944>
   120d0:	cmp	fp, #0
   120d4:	bne	11fac <close_stdout@@Base+0x944>
   120d8:	ldr	r3, [sp, #36]	; 0x24
   120dc:	ldr	r0, [sp, #160]	; 0xa0
   120e0:	cmp	r0, #2
   120e4:	movne	r3, #0
   120e8:	andeq	r3, r3, #1
   120ec:	cmp	r3, #0
   120f0:	beq	11fac <close_stdout@@Base+0x944>
   120f4:	ldr	r2, [sp, #164]	; 0xa4
   120f8:	mov	ip, #0
   120fc:	ldr	r0, [sp, #160]	; 0xa0
   12100:	bic	r3, r2, #2
   12104:	ldr	r1, [sp, #72]	; 0x48
   12108:	ldr	r2, [sp, #68]	; 0x44
   1210c:	stm	sp, {r0, r3}
   12110:	mov	r3, r8
   12114:	str	r1, [sp, #12]
   12118:	mov	r1, sl
   1211c:	str	r2, [sp, #16]
   12120:	ldr	r0, [sp, #40]	; 0x28
   12124:	ldr	r2, [sp, #32]
   12128:	str	ip, [sp, #8]
   1212c:	bl	11bc4 <close_stdout@@Base+0x55c>
   12130:	ldr	r1, [sp, #56]	; 0x38
   12134:	ldr	r2, [sp, #116]	; 0x74
   12138:	ldr	r3, [r1]
   1213c:	cmp	r2, r3
   12140:	bne	12874 <close_stdout@@Base+0x120c>
   12144:	add	sp, sp, #124	; 0x7c
   12148:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1214c:	mov	r3, #114	; 0x72
   12150:	ldr	r2, [sp, #36]	; 0x24
   12154:	ldr	r0, [sp, #160]	; 0xa0
   12158:	cmp	r0, #2
   1215c:	movne	r2, #0
   12160:	andeq	r2, r2, #1
   12164:	cmp	r2, #0
   12168:	bne	120f4 <close_stdout@@Base+0xa8c>
   1216c:	ldr	r1, [sp, #24]
   12170:	cmp	r1, #0
   12174:	beq	11fac <close_stdout@@Base+0x944>
   12178:	mov	r4, r3
   1217c:	b	11fe4 <close_stdout@@Base+0x97c>
   12180:	mov	r3, #98	; 0x62
   12184:	b	1216c <close_stdout@@Base+0xb04>
   12188:	mov	r3, #102	; 0x66
   1218c:	b	1216c <close_stdout@@Base+0xb04>
   12190:	mov	r3, #118	; 0x76
   12194:	b	1216c <close_stdout@@Base+0xb04>
   12198:	mov	r3, #97	; 0x61
   1219c:	b	1216c <close_stdout@@Base+0xb04>
   121a0:	mov	r3, #110	; 0x6e
   121a4:	b	12150 <close_stdout@@Base+0xae8>
   121a8:	mov	r3, #116	; 0x74
   121ac:	b	12150 <close_stdout@@Base+0xae8>
   121b0:	ldr	r2, [sp, #24]
   121b4:	cmp	r2, #0
   121b8:	beq	12760 <close_stdout@@Base+0x10f8>
   121bc:	ldr	r3, [sp, #36]	; 0x24
   121c0:	cmp	r3, #0
   121c4:	bne	120f4 <close_stdout@@Base+0xa8c>
   121c8:	cmp	r9, sl
   121cc:	add	r2, r9, #1
   121d0:	ldrcc	r0, [sp, #40]	; 0x28
   121d4:	movcc	r3, #92	; 0x5c
   121d8:	strbcc	r3, [r0, r9]
   121dc:	add	r3, fp, #1
   121e0:	cmp	r8, r3
   121e4:	bls	12224 <close_stdout@@Base+0xbbc>
   121e8:	ldr	r1, [sp, #32]
   121ec:	ldrb	r3, [r1, r3]
   121f0:	sub	r3, r3, #48	; 0x30
   121f4:	cmp	r3, #9
   121f8:	bhi	12224 <close_stdout@@Base+0xbbc>
   121fc:	cmp	sl, r2
   12200:	ldrhi	r0, [sp, #40]	; 0x28
   12204:	movhi	r3, #48	; 0x30
   12208:	strbhi	r3, [r0, r2]
   1220c:	add	r3, r9, #2
   12210:	cmp	sl, r3
   12214:	ldrhi	r1, [sp, #40]	; 0x28
   12218:	movhi	r2, #48	; 0x30
   1221c:	strbhi	r2, [r1, r3]
   12220:	add	r2, r9, #3
   12224:	mov	r9, r2
   12228:	mov	r4, #48	; 0x30
   1222c:	b	11fb8 <close_stdout@@Base+0x950>
   12230:	ldr	r1, [sp, #76]	; 0x4c
   12234:	cmp	r1, #0
   12238:	beq	12244 <close_stdout@@Base+0xbdc>
   1223c:	cmp	r7, #0
   12240:	bne	12004 <close_stdout@@Base+0x99c>
   12244:	mov	r3, r4
   12248:	b	12150 <close_stdout@@Base+0xae8>
   1224c:	ldr	r1, [sp, #160]	; 0xa0
   12250:	cmp	r1, #2
   12254:	bne	11fac <close_stdout@@Base+0x944>
   12258:	ldr	r2, [sp, #36]	; 0x24
   1225c:	cmp	r2, #0
   12260:	bne	120f4 <close_stdout@@Base+0xa8c>
   12264:	cmp	r9, sl
   12268:	ldrcc	r0, [sp, #40]	; 0x28
   1226c:	movcc	r3, #39	; 0x27
   12270:	strbcc	r3, [r0, r9]
   12274:	add	r3, r9, #1
   12278:	cmp	sl, r3
   1227c:	ldrhi	r1, [sp, #40]	; 0x28
   12280:	movhi	r2, #92	; 0x5c
   12284:	strbhi	r2, [r1, r3]
   12288:	add	r3, r9, #2
   1228c:	cmp	sl, r3
   12290:	add	r9, r9, #3
   12294:	ldrhi	r0, [sp, #40]	; 0x28
   12298:	movhi	r2, #39	; 0x27
   1229c:	strbhi	r2, [r0, r3]
   122a0:	b	11fac <close_stdout@@Base+0x944>
   122a4:	ldr	r1, [sp, #64]	; 0x40
   122a8:	cmp	r1, #1
   122ac:	bne	125a4 <close_stdout@@Base+0xf3c>
   122b0:	bl	10fe0 <__ctype_b_loc@plt>
   122b4:	ldr	r2, [sp, #64]	; 0x40
   122b8:	sxth	r3, r4
   122bc:	str	r2, [sp, #60]	; 0x3c
   122c0:	lsl	r3, r3, #1
   122c4:	ldr	r2, [r0]
   122c8:	ldrh	r2, [r2, r3]
   122cc:	eor	r2, r2, #16384	; 0x4000
   122d0:	ubfx	r2, r2, #14, #1
   122d4:	ldr	r1, [sp, #24]
   122d8:	ands	r2, r2, r1
   122dc:	beq	11fac <close_stdout@@Base+0x944>
   122e0:	ldr	r3, [sp, #60]	; 0x3c
   122e4:	mov	r0, #92	; 0x5c
   122e8:	ldr	r7, [sp, #36]	; 0x24
   122ec:	add	r1, r3, fp
   122f0:	str	r8, [sp, #60]	; 0x3c
   122f4:	ldr	r3, [sp, #40]	; 0x28
   122f8:	b	1235c <close_stdout@@Base+0xcf4>
   122fc:	cmp	r7, #0
   12300:	bne	1279c <close_stdout@@Base+0x1134>
   12304:	add	ip, r9, #1
   12308:	cmp	r9, sl
   1230c:	strbcc	r0, [r3, r9]
   12310:	cmp	sl, ip
   12314:	lsrhi	r8, r4, #6
   12318:	addhi	r8, r8, #48	; 0x30
   1231c:	strbhi	r8, [r3, ip]
   12320:	add	ip, r9, #2
   12324:	add	r9, r9, #3
   12328:	cmp	sl, ip
   1232c:	ubfxhi	r8, r4, #3, #3
   12330:	and	r4, r4, #7
   12334:	add	r4, r4, #48	; 0x30
   12338:	addhi	r8, r8, #48	; 0x30
   1233c:	strbhi	r8, [r3, ip]
   12340:	add	fp, fp, #1
   12344:	cmp	r1, fp
   12348:	bls	12388 <close_stdout@@Base+0xd20>
   1234c:	cmp	r9, sl
   12350:	strbcc	r4, [r3, r9]
   12354:	ldrb	r4, [r5, #1]!
   12358:	add	r9, r9, #1
   1235c:	cmp	r2, #0
   12360:	bne	122fc <close_stdout@@Base+0xc94>
   12364:	cmp	r6, #0
   12368:	beq	12340 <close_stdout@@Base+0xcd8>
   1236c:	add	fp, fp, #1
   12370:	cmp	r9, sl
   12374:	strbcc	r0, [r3, r9]
   12378:	cmp	r1, fp
   1237c:	add	r9, r9, #1
   12380:	mov	r6, #0
   12384:	bhi	1234c <close_stdout@@Base+0xce4>
   12388:	ldr	r8, [sp, #60]	; 0x3c
   1238c:	b	12008 <close_stdout@@Base+0x9a0>
   12390:	ldr	r3, [sp, #36]	; 0x24
   12394:	cmp	r3, #0
   12398:	bne	1289c <close_stdout@@Base+0x1234>
   1239c:	cmp	sl, #0
   123a0:	beq	127b4 <close_stdout@@Base+0x114c>
   123a4:	ldr	r1, [sp, #40]	; 0x28
   123a8:	mov	r0, #1
   123ac:	ldr	r2, [pc, #1296]	; 128c4 <close_stdout@@Base+0x125c>
   123b0:	mov	r3, #34	; 0x22
   123b4:	str	r0, [sp, #24]
   123b8:	mov	r9, r0
   123bc:	add	r2, pc, r2
   123c0:	str	r0, [sp, #28]
   123c4:	strb	r3, [r1]
   123c8:	str	r2, [sp, #52]	; 0x34
   123cc:	b	11c78 <close_stdout@@Base+0x610>
   123d0:	ldr	r3, [pc, #1264]	; 128c8 <close_stdout@@Base+0x1260>
   123d4:	mov	r2, #1
   123d8:	mov	r0, #3
   123dc:	str	r2, [sp, #36]	; 0x24
   123e0:	add	r3, pc, r3
   123e4:	str	r2, [sp, #24]
   123e8:	str	r3, [sp, #52]	; 0x34
   123ec:	mov	r9, #0
   123f0:	str	r2, [sp, #28]
   123f4:	str	r0, [sp, #160]	; 0xa0
   123f8:	b	11c78 <close_stdout@@Base+0x610>
   123fc:	mov	r0, #0
   12400:	mov	r1, #1
   12404:	str	r0, [sp, #36]	; 0x24
   12408:	mov	r9, r0
   1240c:	str	r1, [sp, #24]
   12410:	str	r0, [sp, #28]
   12414:	str	r0, [sp, #52]	; 0x34
   12418:	b	11c78 <close_stdout@@Base+0x610>
   1241c:	ldr	r3, [sp, #160]	; 0xa0
   12420:	cmp	r3, #8
   12424:	beq	12450 <close_stdout@@Base+0xde8>
   12428:	ldr	r0, [pc, #1180]	; 128cc <close_stdout@@Base+0x1264>
   1242c:	mov	r1, r3
   12430:	add	r0, pc, r0
   12434:	bl	11a60 <close_stdout@@Base+0x3f8>
   12438:	ldr	r1, [sp, #160]	; 0xa0
   1243c:	str	r0, [sp, #72]	; 0x48
   12440:	ldr	r0, [pc, #1160]	; 128d0 <close_stdout@@Base+0x1268>
   12444:	add	r0, pc, r0
   12448:	bl	11a60 <close_stdout@@Base+0x3f8>
   1244c:	str	r0, [sp, #68]	; 0x44
   12450:	ldr	r0, [sp, #36]	; 0x24
   12454:	cmp	r0, #0
   12458:	movne	r9, #0
   1245c:	bne	12494 <close_stdout@@Base+0xe2c>
   12460:	ldr	r1, [sp, #72]	; 0x48
   12464:	ldrb	r3, [r1]
   12468:	cmp	r3, #0
   1246c:	beq	1286c <close_stdout@@Base+0x1204>
   12470:	mov	r2, r1
   12474:	ldr	r1, [sp, #40]	; 0x28
   12478:	mov	r9, r0
   1247c:	cmp	r9, sl
   12480:	strbcc	r3, [r1, r9]
   12484:	ldrb	r3, [r2, #1]!
   12488:	add	r9, r9, #1
   1248c:	cmp	r3, #0
   12490:	bne	1247c <close_stdout@@Base+0xe14>
   12494:	ldr	r0, [sp, #68]	; 0x44
   12498:	str	r0, [sp, #52]	; 0x34
   1249c:	bl	10ff8 <strlen@plt>
   124a0:	mov	r2, #1
   124a4:	str	r2, [sp, #24]
   124a8:	str	r0, [sp, #28]
   124ac:	b	11c78 <close_stdout@@Base+0x610>
   124b0:	ldr	r3, [pc, #1052]	; 128d4 <close_stdout@@Base+0x126c>
   124b4:	mov	r2, #0
   124b8:	mov	r1, #1
   124bc:	mov	r0, #2
   124c0:	add	r3, pc, r3
   124c4:	str	r1, [sp, #36]	; 0x24
   124c8:	str	r2, [sp, #24]
   124cc:	mov	r9, r2
   124d0:	str	r1, [sp, #28]
   124d4:	str	r3, [sp, #52]	; 0x34
   124d8:	str	r0, [sp, #160]	; 0xa0
   124dc:	b	11c78 <close_stdout@@Base+0x610>
   124e0:	ldr	r3, [sp, #36]	; 0x24
   124e4:	cmp	r3, #0
   124e8:	bne	12878 <close_stdout@@Base+0x1210>
   124ec:	cmp	sl, #0
   124f0:	beq	127d4 <close_stdout@@Base+0x116c>
   124f4:	ldr	r1, [sp, #40]	; 0x28
   124f8:	mov	r3, #39	; 0x27
   124fc:	ldr	r2, [sp, #36]	; 0x24
   12500:	mov	r0, #1
   12504:	mov	r9, r0
   12508:	str	r0, [sp, #28]
   1250c:	strb	r3, [r1]
   12510:	ldr	r3, [pc, #960]	; 128d8 <close_stdout@@Base+0x1270>
   12514:	str	r2, [sp, #24]
   12518:	add	r3, pc, r3
   1251c:	str	r3, [sp, #52]	; 0x34
   12520:	b	11c78 <close_stdout@@Base+0x610>
   12524:	ldr	r2, [sp, #28]
   12528:	cmp	r2, #1
   1252c:	add	r4, fp, r2
   12530:	movls	r3, #0
   12534:	movhi	r3, #1
   12538:	cmn	r8, #1
   1253c:	movne	r3, #0
   12540:	cmp	r3, #0
   12544:	beq	12554 <close_stdout@@Base+0xeec>
   12548:	ldr	r0, [sp, #32]
   1254c:	bl	10ff8 <strlen@plt>
   12550:	mov	r8, r0
   12554:	cmp	r8, r4
   12558:	ldrcc	r3, [sp, #32]
   1255c:	movcc	r6, #0
   12560:	addcc	r5, r3, fp
   12564:	bcc	11cd4 <close_stdout@@Base+0x66c>
   12568:	ldr	r0, [sp, #32]
   1256c:	ldr	r1, [sp, #52]	; 0x34
   12570:	add	r5, r0, fp
   12574:	ldr	r2, [sp, #28]
   12578:	mov	r0, r5
   1257c:	bl	10ef0 <memcmp@plt>
   12580:	cmp	r0, #0
   12584:	bne	1259c <close_stdout@@Base+0xf34>
   12588:	ldr	r1, [sp, #36]	; 0x24
   1258c:	cmp	r1, #0
   12590:	bne	120f4 <close_stdout@@Base+0xa8c>
   12594:	mov	r6, #1
   12598:	b	11cd4 <close_stdout@@Base+0x66c>
   1259c:	mov	r6, #0
   125a0:	b	11cd4 <close_stdout@@Base+0x66c>
   125a4:	add	r7, sp, #108	; 0x6c
   125a8:	cmn	r8, #1
   125ac:	mov	r3, #0
   125b0:	str	r3, [sp, #108]	; 0x6c
   125b4:	str	r3, [r7, #4]
   125b8:	beq	127a4 <close_stdout@@Base+0x113c>
   125bc:	mov	r1, #0
   125c0:	ldr	r0, [sp, #32]
   125c4:	mov	ip, #1
   125c8:	str	r9, [sp, #88]	; 0x58
   125cc:	str	r6, [sp, #96]	; 0x60
   125d0:	mov	r9, r1
   125d4:	str	r5, [sp, #100]	; 0x64
   125d8:	mov	r6, ip
   125dc:	mov	r5, r7
   125e0:	add	r3, sp, #104	; 0x68
   125e4:	sub	r0, r0, #1
   125e8:	str	r3, [sp, #80]	; 0x50
   125ec:	str	r0, [sp, #84]	; 0x54
   125f0:	str	r1, [sp, #60]	; 0x3c
   125f4:	str	r4, [sp, #92]	; 0x5c
   125f8:	ldr	r2, [sp, #32]
   125fc:	add	r7, r9, fp
   12600:	add	r0, sp, #104	; 0x68
   12604:	mov	r3, r5
   12608:	add	r4, r2, r7
   1260c:	rsb	r2, r7, r8
   12610:	mov	r1, r4
   12614:	bl	10f74 <mbrtowc@plt>
   12618:	subs	r2, r0, #0
   1261c:	beq	12728 <close_stdout@@Base+0x10c0>
   12620:	cmn	r2, #1
   12624:	beq	12850 <close_stdout@@Base+0x11e8>
   12628:	cmn	r2, #2
   1262c:	beq	127f4 <close_stdout@@Base+0x118c>
   12630:	ldr	r3, [sp, #36]	; 0x24
   12634:	ldr	r0, [sp, #160]	; 0xa0
   12638:	cmp	r0, #2
   1263c:	movne	r3, #0
   12640:	andeq	r3, r3, #1
   12644:	cmp	r3, #0
   12648:	beq	12704 <close_stdout@@Base+0x109c>
   1264c:	cmp	r2, #1
   12650:	beq	12704 <close_stdout@@Base+0x109c>
   12654:	ldr	r1, [sp, #84]	; 0x54
   12658:	add	r3, r1, r2
   1265c:	add	r7, r3, r7
   12660:	ldrb	r3, [r4, #1]!
   12664:	sub	r3, r3, #91	; 0x5b
   12668:	cmp	r3, #33	; 0x21
   1266c:	addls	pc, pc, r3, lsl #2
   12670:	b	126fc <close_stdout@@Base+0x1094>
   12674:	b	120f4 <close_stdout@@Base+0xa8c>
   12678:	b	120f4 <close_stdout@@Base+0xa8c>
   1267c:	b	126fc <close_stdout@@Base+0x1094>
   12680:	b	120f4 <close_stdout@@Base+0xa8c>
   12684:	b	126fc <close_stdout@@Base+0x1094>
   12688:	b	120f4 <close_stdout@@Base+0xa8c>
   1268c:	b	126fc <close_stdout@@Base+0x1094>
   12690:	b	126fc <close_stdout@@Base+0x1094>
   12694:	b	126fc <close_stdout@@Base+0x1094>
   12698:	b	126fc <close_stdout@@Base+0x1094>
   1269c:	b	126fc <close_stdout@@Base+0x1094>
   126a0:	b	126fc <close_stdout@@Base+0x1094>
   126a4:	b	126fc <close_stdout@@Base+0x1094>
   126a8:	b	126fc <close_stdout@@Base+0x1094>
   126ac:	b	126fc <close_stdout@@Base+0x1094>
   126b0:	b	126fc <close_stdout@@Base+0x1094>
   126b4:	b	126fc <close_stdout@@Base+0x1094>
   126b8:	b	126fc <close_stdout@@Base+0x1094>
   126bc:	b	126fc <close_stdout@@Base+0x1094>
   126c0:	b	126fc <close_stdout@@Base+0x1094>
   126c4:	b	126fc <close_stdout@@Base+0x1094>
   126c8:	b	126fc <close_stdout@@Base+0x1094>
   126cc:	b	126fc <close_stdout@@Base+0x1094>
   126d0:	b	126fc <close_stdout@@Base+0x1094>
   126d4:	b	126fc <close_stdout@@Base+0x1094>
   126d8:	b	126fc <close_stdout@@Base+0x1094>
   126dc:	b	126fc <close_stdout@@Base+0x1094>
   126e0:	b	126fc <close_stdout@@Base+0x1094>
   126e4:	b	126fc <close_stdout@@Base+0x1094>
   126e8:	b	126fc <close_stdout@@Base+0x1094>
   126ec:	b	126fc <close_stdout@@Base+0x1094>
   126f0:	b	126fc <close_stdout@@Base+0x1094>
   126f4:	b	126fc <close_stdout@@Base+0x1094>
   126f8:	b	120f4 <close_stdout@@Base+0xa8c>
   126fc:	cmp	r4, r7
   12700:	bne	12660 <close_stdout@@Base+0xff8>
   12704:	ldr	r0, [sp, #104]	; 0x68
   12708:	add	r9, r9, r2
   1270c:	bl	10f2c <iswprint@plt>
   12710:	cmp	r0, #0
   12714:	mov	r0, r5
   12718:	moveq	r6, #0
   1271c:	bl	10ee4 <mbsinit@plt>
   12720:	cmp	r0, #0
   12724:	beq	125f8 <close_stdout@@Base+0xf90>
   12728:	mov	ip, r6
   1272c:	eor	r2, ip, #1
   12730:	str	r9, [sp, #60]	; 0x3c
   12734:	ldr	r4, [sp, #92]	; 0x5c
   12738:	uxtb	r2, r2
   1273c:	ldr	r9, [sp, #88]	; 0x58
   12740:	ldr	r6, [sp, #96]	; 0x60
   12744:	ldr	r5, [sp, #100]	; 0x64
   12748:	ldr	r3, [sp, #60]	; 0x3c
   1274c:	cmp	r3, #1
   12750:	bls	122d4 <close_stdout@@Base+0xc6c>
   12754:	ldr	r0, [sp, #24]
   12758:	and	r2, r2, r0
   1275c:	b	122e0 <close_stdout@@Base+0xc78>
   12760:	ldr	r2, [sp, #164]	; 0xa4
   12764:	tst	r2, #1
   12768:	addne	fp, fp, #1
   1276c:	bne	11c9c <close_stdout@@Base+0x634>
   12770:	b	11fac <close_stdout@@Base+0x944>
   12774:	ldr	r0, [sp, #36]	; 0x24
   12778:	cmp	r0, #0
   1277c:	beq	11fac <close_stdout@@Base+0x944>
   12780:	b	120f4 <close_stdout@@Base+0xa8c>
   12784:	ldr	r2, [sp, #32]
   12788:	ldrb	r3, [r2, #1]
   1278c:	adds	r3, r3, #0
   12790:	movne	r3, #1
   12794:	b	120c8 <close_stdout@@Base+0xa60>
   12798:	bl	110d0 <abort@plt>
   1279c:	ldr	r8, [sp, #60]	; 0x3c
   127a0:	b	120f4 <close_stdout@@Base+0xa8c>
   127a4:	ldr	r0, [sp, #32]
   127a8:	bl	10ff8 <strlen@plt>
   127ac:	mov	r8, r0
   127b0:	b	125bc <close_stdout@@Base+0xf54>
   127b4:	ldr	r2, [pc, #288]	; 128dc <close_stdout@@Base+0x1274>
   127b8:	mov	r1, #1
   127bc:	mov	r9, r1
   127c0:	str	r1, [sp, #24]
   127c4:	add	r2, pc, r2
   127c8:	str	r1, [sp, #28]
   127cc:	str	r2, [sp, #52]	; 0x34
   127d0:	b	11c78 <close_stdout@@Base+0x610>
   127d4:	ldr	r2, [pc, #260]	; 128e0 <close_stdout@@Base+0x1278>
   127d8:	mov	r3, #1
   127dc:	mov	r9, r3
   127e0:	str	r3, [sp, #28]
   127e4:	add	r2, pc, r2
   127e8:	str	sl, [sp, #24]
   127ec:	str	r2, [sp, #52]	; 0x34
   127f0:	b	11c78 <close_stdout@@Base+0x610>
   127f4:	cmp	r8, r7
   127f8:	str	r9, [sp, #60]	; 0x3c
   127fc:	mov	ip, r4
   12800:	ldr	r6, [sp, #96]	; 0x60
   12804:	ldr	r9, [sp, #88]	; 0x58
   12808:	ldr	r4, [sp, #92]	; 0x5c
   1280c:	ldr	r5, [sp, #100]	; 0x64
   12810:	bls	12848 <close_stdout@@Base+0x11e0>
   12814:	ldrb	r3, [ip]
   12818:	cmp	r3, #0
   1281c:	beq	12848 <close_stdout@@Base+0x11e0>
   12820:	ldr	r3, [sp, #60]	; 0x3c
   12824:	b	12834 <close_stdout@@Base+0x11cc>
   12828:	ldrb	r2, [r5, r3]
   1282c:	cmp	r2, #0
   12830:	beq	12844 <close_stdout@@Base+0x11dc>
   12834:	add	r3, r3, #1
   12838:	add	r2, fp, r3
   1283c:	cmp	r8, r2
   12840:	bhi	12828 <close_stdout@@Base+0x11c0>
   12844:	str	r3, [sp, #60]	; 0x3c
   12848:	mov	r2, #1
   1284c:	b	12748 <close_stdout@@Base+0x10e0>
   12850:	str	r9, [sp, #60]	; 0x3c
   12854:	mov	r2, #1
   12858:	ldr	r4, [sp, #92]	; 0x5c
   1285c:	ldr	r6, [sp, #96]	; 0x60
   12860:	ldr	r9, [sp, #88]	; 0x58
   12864:	ldr	r5, [sp, #100]	; 0x64
   12868:	b	12748 <close_stdout@@Base+0x10e0>
   1286c:	ldr	r9, [sp, #36]	; 0x24
   12870:	b	12494 <close_stdout@@Base+0xe2c>
   12874:	bl	10f08 <__stack_chk_fail@plt>
   12878:	ldr	r1, [pc, #100]	; 128e4 <close_stdout@@Base+0x127c>
   1287c:	mov	r3, #0
   12880:	mov	r0, #1
   12884:	str	r3, [sp, #24]
   12888:	add	r1, pc, r1
   1288c:	str	r0, [sp, #28]
   12890:	mov	r9, r3
   12894:	str	r1, [sp, #52]	; 0x34
   12898:	b	11c78 <close_stdout@@Base+0x610>
   1289c:	ldr	r0, [pc, #68]	; 128e8 <close_stdout@@Base+0x1280>
   128a0:	mov	r3, #1
   128a4:	mov	r9, #0
   128a8:	str	r3, [sp, #24]
   128ac:	add	r0, pc, r0
   128b0:	str	r3, [sp, #28]
   128b4:	str	r0, [sp, #52]	; 0x34
   128b8:	b	11c78 <close_stdout@@Base+0x610>
   128bc:	andeq	r3, r1, r8, lsl r4
   128c0:	andeq	r0, r0, r0, ror #1
   128c4:	andeq	r2, r0, r8, ror #3
   128c8:	andeq	r2, r0, r4, asr #3
   128cc:	andeq	r2, r0, r0, lsl #3
   128d0:	andeq	r2, r0, ip, asr r1
   128d4:	andeq	r2, r0, r0, ror #1
   128d8:	andeq	r2, r0, r8, lsl #1
   128dc:	andeq	r1, r0, r0, ror #27
   128e0:			; <UNDEFINED> instruction: 0x00001dbc
   128e4:	andeq	r1, r0, r8, lsl sp
   128e8:	strdeq	r1, [r0], -r8
   128ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128f0:	sub	sp, sp, #44	; 0x2c
   128f4:	mov	r6, r0
   128f8:	mov	r9, r1
   128fc:	mov	sl, r2
   12900:	mov	r4, r3
   12904:	bl	11010 <__errno_location@plt>
   12908:	ldr	fp, [pc, #412]	; 12aac <close_stdout@@Base+0x1444>
   1290c:	cmp	r6, #0
   12910:	add	fp, pc, fp
   12914:	ldr	r5, [fp]
   12918:	ldr	r1, [r0]
   1291c:	mov	r8, r0
   12920:	str	r1, [sp, #36]	; 0x24
   12924:	blt	12aa4 <close_stdout@@Base+0x143c>
   12928:	ldr	r3, [pc, #384]	; 12ab0 <close_stdout@@Base+0x1448>
   1292c:	add	r3, pc, r3
   12930:	ldr	r3, [r3]
   12934:	cmp	r6, r3
   12938:	bcc	1298c <close_stdout@@Base+0x1324>
   1293c:	add	r7, r6, #1
   12940:	cmn	r7, #-536870911	; 0xe0000001
   12944:	bhi	12aa8 <close_stdout@@Base+0x1440>
   12948:	add	r3, fp, #4
   1294c:	cmp	r5, r3
   12950:	beq	12a7c <close_stdout@@Base+0x1414>
   12954:	mov	r0, r5
   12958:	lsl	r1, r7, #3
   1295c:	bl	13784 <close_stdout@@Base+0x211c>
   12960:	mov	r5, r0
   12964:	str	r0, [fp]
   12968:	ldr	fp, [pc, #324]	; 12ab4 <close_stdout@@Base+0x144c>
   1296c:	mov	r1, #0
   12970:	add	fp, pc, fp
   12974:	ldr	r0, [fp]
   12978:	rsb	r2, r0, r7
   1297c:	add	r0, r5, r0, lsl #3
   12980:	lsl	r2, r2, #3
   12984:	bl	11028 <memset@plt>
   12988:	str	r7, [fp]
   1298c:	add	r2, r4, #8
   12990:	str	r2, [sp, #32]
   12994:	ldr	r1, [r4]
   12998:	add	fp, r5, r6, lsl #3
   1299c:	ldr	lr, [sp, #32]
   129a0:	mov	r2, r9
   129a4:	ldr	r3, [r4, #4]
   129a8:	ldr	ip, [r5, r6, lsl #3]
   129ac:	ldr	r7, [fp, #4]
   129b0:	orr	r3, r3, #1
   129b4:	str	r1, [sp]
   129b8:	str	r3, [sp, #4]
   129bc:	mov	r1, ip
   129c0:	str	lr, [sp, #8]
   129c4:	mov	r0, r7
   129c8:	ldr	lr, [r4, #40]	; 0x28
   129cc:	str	r3, [sp, #28]
   129d0:	mov	r3, sl
   129d4:	str	lr, [sp, #12]
   129d8:	ldr	lr, [r4, #44]	; 0x2c
   129dc:	str	ip, [sp, #24]
   129e0:	str	lr, [sp, #16]
   129e4:	bl	11bc4 <close_stdout@@Base+0x55c>
   129e8:	ldr	ip, [sp, #24]
   129ec:	cmp	ip, r0
   129f0:	bhi	12a68 <close_stdout@@Base+0x1400>
   129f4:	ldr	r3, [pc, #188]	; 12ab8 <close_stdout@@Base+0x1450>
   129f8:	add	r1, r0, #1
   129fc:	str	r1, [r5, r6, lsl #3]
   12a00:	add	r3, pc, r3
   12a04:	cmp	r7, r3
   12a08:	beq	12a1c <close_stdout@@Base+0x13b4>
   12a0c:	mov	r0, r7
   12a10:	str	r1, [sp, #24]
   12a14:	bl	10ec0 <free@plt>
   12a18:	ldr	r1, [sp, #24]
   12a1c:	mov	r0, r1
   12a20:	str	r1, [sp, #24]
   12a24:	bl	1372c <close_stdout@@Base+0x20c4>
   12a28:	ldr	r3, [sp, #28]
   12a2c:	ldr	lr, [sp, #32]
   12a30:	mov	r2, r9
   12a34:	str	r0, [fp, #4]
   12a38:	mov	r7, r0
   12a3c:	ldr	ip, [r4]
   12a40:	str	r3, [sp, #4]
   12a44:	mov	r3, sl
   12a48:	str	lr, [sp, #8]
   12a4c:	str	ip, [sp]
   12a50:	ldr	ip, [r4, #40]	; 0x28
   12a54:	ldr	r1, [sp, #24]
   12a58:	str	ip, [sp, #12]
   12a5c:	ldr	ip, [r4, #44]	; 0x2c
   12a60:	str	ip, [sp, #16]
   12a64:	bl	11bc4 <close_stdout@@Base+0x55c>
   12a68:	ldr	r1, [sp, #36]	; 0x24
   12a6c:	mov	r0, r7
   12a70:	str	r1, [r8]
   12a74:	add	sp, sp, #44	; 0x2c
   12a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a7c:	lsl	r1, r7, #3
   12a80:	mov	r0, #0
   12a84:	str	r3, [sp, #24]
   12a88:	bl	13784 <close_stdout@@Base+0x211c>
   12a8c:	ldr	r3, [sp, #24]
   12a90:	mov	r5, r0
   12a94:	ldm	r3, {r0, r1}
   12a98:	str	r5, [fp]
   12a9c:	stm	r5, {r0, r1}
   12aa0:	b	12968 <close_stdout@@Base+0x1300>
   12aa4:	bl	110d0 <abort@plt>
   12aa8:	bl	13940 <close_stdout@@Base+0x22d8>
   12aac:	andeq	r2, r1, r4, asr #16
   12ab0:	strdeq	r2, [r1], -r4
   12ab4:			; <UNDEFINED> instruction: 0x000127b0
   12ab8:	andeq	r2, r1, r0, ror r7
   12abc:	push	{r4, r5, r6, lr}
   12ac0:	mov	r5, r0
   12ac4:	bl	11010 <__errno_location@plt>
   12ac8:	cmp	r5, #0
   12acc:	mov	r1, #48	; 0x30
   12ad0:	mov	r4, r0
   12ad4:	ldr	r0, [pc, #24]	; 12af4 <close_stdout@@Base+0x148c>
   12ad8:	ldr	r6, [r4]
   12adc:	add	r0, pc, r0
   12ae0:	add	r0, r0, #256	; 0x100
   12ae4:	movne	r0, r5
   12ae8:	bl	13900 <close_stdout@@Base+0x2298>
   12aec:	str	r6, [r4]
   12af0:	pop	{r4, r5, r6, pc}
   12af4:	muleq	r1, r4, r6
   12af8:	cmp	r0, #0
   12afc:	beq	12b08 <close_stdout@@Base+0x14a0>
   12b00:	ldr	r0, [r0]
   12b04:	bx	lr
   12b08:	ldr	r0, [pc, #12]	; 12b1c <close_stdout@@Base+0x14b4>
   12b0c:	add	r0, pc, r0
   12b10:	add	r0, r0, #256	; 0x100
   12b14:	ldr	r0, [r0]
   12b18:	bx	lr
   12b1c:	andeq	r2, r1, r4, ror #12
   12b20:	cmp	r0, #0
   12b24:	beq	12b30 <close_stdout@@Base+0x14c8>
   12b28:	str	r1, [r0]
   12b2c:	bx	lr
   12b30:	ldr	r0, [pc, #12]	; 12b44 <close_stdout@@Base+0x14dc>
   12b34:	add	r0, pc, r0
   12b38:	add	r0, r0, #256	; 0x100
   12b3c:	str	r1, [r0]
   12b40:	bx	lr
   12b44:	andeq	r2, r1, ip, lsr r6
   12b48:	cmp	r0, #0
   12b4c:	movne	r3, r0
   12b50:	beq	12b80 <close_stdout@@Base+0x1518>
   12b54:	lsr	ip, r1, #5
   12b58:	and	r1, r1, #31
   12b5c:	add	r3, r3, ip, lsl #2
   12b60:	ldr	ip, [r3, #8]
   12b64:	lsr	r0, ip, r1
   12b68:	eor	r2, r0, r2
   12b6c:	and	r0, r0, #1
   12b70:	and	r2, r2, #1
   12b74:	eor	ip, ip, r2, lsl r1
   12b78:	str	ip, [r3, #8]
   12b7c:	bx	lr
   12b80:	ldr	r3, [pc, #8]	; 12b90 <close_stdout@@Base+0x1528>
   12b84:	add	r3, pc, r3
   12b88:	add	r3, r3, #256	; 0x100
   12b8c:	b	12b54 <close_stdout@@Base+0x14ec>
   12b90:	andeq	r2, r1, ip, ror #11
   12b94:	subs	r3, r0, #0
   12b98:	beq	12ba8 <close_stdout@@Base+0x1540>
   12b9c:	ldr	r0, [r3, #4]
   12ba0:	str	r1, [r3, #4]
   12ba4:	bx	lr
   12ba8:	ldr	r3, [pc, #8]	; 12bb8 <close_stdout@@Base+0x1550>
   12bac:	add	r3, pc, r3
   12bb0:	add	r3, r3, #256	; 0x100
   12bb4:	b	12b9c <close_stdout@@Base+0x1534>
   12bb8:	andeq	r2, r1, r4, asr #11
   12bbc:	cmp	r0, #0
   12bc0:	push	{r3, lr}
   12bc4:	beq	12be8 <close_stdout@@Base+0x1580>
   12bc8:	cmp	r2, #0
   12bcc:	cmpne	r1, #0
   12bd0:	mov	r3, #8
   12bd4:	strne	r1, [r0, #40]	; 0x28
   12bd8:	str	r3, [r0]
   12bdc:	strne	r2, [r0, #44]	; 0x2c
   12be0:	popne	{r3, pc}
   12be4:	bl	110d0 <abort@plt>
   12be8:	ldr	r0, [pc, #8]	; 12bf8 <close_stdout@@Base+0x1590>
   12bec:	add	r0, pc, r0
   12bf0:	add	r0, r0, #256	; 0x100
   12bf4:	b	12bc8 <close_stdout@@Base+0x1560>
   12bf8:	andeq	r2, r1, r4, lsl #11
   12bfc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12c00:	sub	sp, sp, #24
   12c04:	mov	r7, r0
   12c08:	mov	sl, r1
   12c0c:	ldr	r4, [sp, #56]	; 0x38
   12c10:	mov	r9, r2
   12c14:	mov	r8, r3
   12c18:	cmp	r4, #0
   12c1c:	beq	12c70 <close_stdout@@Base+0x1608>
   12c20:	bl	11010 <__errno_location@plt>
   12c24:	ldr	r3, [r4]
   12c28:	add	lr, r4, #8
   12c2c:	mov	r1, sl
   12c30:	mov	r2, r9
   12c34:	ldr	r6, [r0]
   12c38:	mov	r5, r0
   12c3c:	str	r3, [sp]
   12c40:	mov	r0, r7
   12c44:	ldr	ip, [r4, #4]
   12c48:	mov	r3, r8
   12c4c:	stmib	sp, {ip, lr}
   12c50:	ldr	ip, [r4, #40]	; 0x28
   12c54:	str	ip, [sp, #12]
   12c58:	ldr	ip, [r4, #44]	; 0x2c
   12c5c:	str	ip, [sp, #16]
   12c60:	bl	11bc4 <close_stdout@@Base+0x55c>
   12c64:	str	r6, [r5]
   12c68:	add	sp, sp, #24
   12c6c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12c70:	ldr	r4, [pc, #8]	; 12c80 <close_stdout@@Base+0x1618>
   12c74:	add	r4, pc, r4
   12c78:	add	r4, r4, #256	; 0x100
   12c7c:	b	12c20 <close_stdout@@Base+0x15b8>
   12c80:	strdeq	r2, [r1], -ip
   12c84:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c88:	subs	r4, r3, #0
   12c8c:	sub	sp, sp, #36	; 0x24
   12c90:	mov	r7, r0
   12c94:	mov	r6, r1
   12c98:	mov	r5, r2
   12c9c:	beq	12d58 <close_stdout@@Base+0x16f0>
   12ca0:	bl	11010 <__errno_location@plt>
   12ca4:	ldr	r3, [r4]
   12ca8:	ldr	sl, [r4, #4]
   12cac:	add	r9, r4, #8
   12cb0:	mov	r8, r0
   12cb4:	mov	r0, #0
   12cb8:	ldr	r2, [r8]
   12cbc:	cmp	r5, r0
   12cc0:	orreq	sl, sl, #1
   12cc4:	str	r9, [sp, #8]
   12cc8:	mov	r1, r0
   12ccc:	stm	sp, {r3, sl}
   12cd0:	mov	r3, r6
   12cd4:	ldr	ip, [r4, #40]	; 0x28
   12cd8:	str	r2, [sp, #28]
   12cdc:	mov	r2, r7
   12ce0:	str	ip, [sp, #12]
   12ce4:	ldr	ip, [r4, #44]	; 0x2c
   12ce8:	str	ip, [sp, #16]
   12cec:	bl	11bc4 <close_stdout@@Base+0x55c>
   12cf0:	add	r1, r0, #1
   12cf4:	mov	fp, r0
   12cf8:	str	r1, [sp, #24]
   12cfc:	mov	r0, r1
   12d00:	bl	1372c <close_stdout@@Base+0x20c4>
   12d04:	ldr	lr, [r4]
   12d08:	str	sl, [sp, #4]
   12d0c:	mov	r3, r6
   12d10:	str	r9, [sp, #8]
   12d14:	mov	r2, r7
   12d18:	str	lr, [sp]
   12d1c:	ldr	lr, [r4, #40]	; 0x28
   12d20:	ldr	r1, [sp, #24]
   12d24:	str	lr, [sp, #12]
   12d28:	ldr	lr, [r4, #44]	; 0x2c
   12d2c:	str	lr, [sp, #16]
   12d30:	str	r0, [sp, #24]
   12d34:	bl	11bc4 <close_stdout@@Base+0x55c>
   12d38:	ldr	r3, [sp, #28]
   12d3c:	cmp	r5, #0
   12d40:	str	r3, [r8]
   12d44:	ldr	ip, [sp, #24]
   12d48:	strne	fp, [r5]
   12d4c:	mov	r0, ip
   12d50:	add	sp, sp, #36	; 0x24
   12d54:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d58:	ldr	r4, [pc, #8]	; 12d68 <close_stdout@@Base+0x1700>
   12d5c:	add	r4, pc, r4
   12d60:	add	r4, r4, #256	; 0x100
   12d64:	b	12ca0 <close_stdout@@Base+0x1638>
   12d68:	andeq	r2, r1, r4, lsl r4
   12d6c:	mov	r3, r2
   12d70:	mov	r2, #0
   12d74:	b	12c84 <close_stdout@@Base+0x161c>
   12d78:	ldr	r2, [pc, #152]	; 12e18 <close_stdout@@Base+0x17b0>
   12d7c:	push	{r3, r4, r5, r6, r7, lr}
   12d80:	add	r2, pc, r2
   12d84:	ldr	r3, [pc, #144]	; 12e1c <close_stdout@@Base+0x17b4>
   12d88:	ldr	r6, [r2]
   12d8c:	add	r3, pc, r3
   12d90:	cmp	r6, #1
   12d94:	ldr	r7, [r3]
   12d98:	movhi	r4, #1
   12d9c:	movhi	r5, r7
   12da0:	bls	12dbc <close_stdout@@Base+0x1754>
   12da4:	ldr	r0, [r5, #12]
   12da8:	add	r4, r4, #1
   12dac:	bl	10ec0 <free@plt>
   12db0:	cmp	r4, r6
   12db4:	add	r5, r5, #8
   12db8:	bne	12da4 <close_stdout@@Base+0x173c>
   12dbc:	ldr	r4, [pc, #92]	; 12e20 <close_stdout@@Base+0x17b8>
   12dc0:	ldr	r0, [r7, #4]
   12dc4:	add	r4, pc, r4
   12dc8:	cmp	r0, r4
   12dcc:	beq	12de4 <close_stdout@@Base+0x177c>
   12dd0:	bl	10ec0 <free@plt>
   12dd4:	ldr	r3, [pc, #72]	; 12e24 <close_stdout@@Base+0x17bc>
   12dd8:	mov	r2, #256	; 0x100
   12ddc:	add	r3, pc, r3
   12de0:	stmib	r3, {r2, r4}
   12de4:	ldr	r4, [pc, #60]	; 12e28 <close_stdout@@Base+0x17c0>
   12de8:	add	r4, pc, r4
   12dec:	add	r5, r4, #4
   12df0:	cmp	r7, r5
   12df4:	beq	12e04 <close_stdout@@Base+0x179c>
   12df8:	mov	r0, r7
   12dfc:	bl	10ec0 <free@plt>
   12e00:	str	r5, [r4]
   12e04:	ldr	r3, [pc, #32]	; 12e2c <close_stdout@@Base+0x17c4>
   12e08:	mov	r2, #1
   12e0c:	add	r3, pc, r3
   12e10:	str	r2, [r3]
   12e14:	pop	{r3, r4, r5, r6, r7, pc}
   12e18:	andeq	r2, r1, r0, lsr #7
   12e1c:	andeq	r2, r1, r8, asr #7
   12e20:	andeq	r2, r1, ip, lsr #7
   12e24:	andeq	r2, r1, r8, ror r3
   12e28:	andeq	r2, r1, ip, ror #6
   12e2c:	andeq	r2, r1, r4, lsl r3
   12e30:	ldr	r3, [pc, #12]	; 12e44 <close_stdout@@Base+0x17dc>
   12e34:	mvn	r2, #0
   12e38:	add	r3, pc, r3
   12e3c:	add	r3, r3, #256	; 0x100
   12e40:	b	128ec <close_stdout@@Base+0x1284>
   12e44:	andeq	r2, r1, r8, lsr r3
   12e48:	ldr	r3, [pc, #8]	; 12e58 <close_stdout@@Base+0x17f0>
   12e4c:	add	r3, pc, r3
   12e50:	add	r3, r3, #256	; 0x100
   12e54:	b	128ec <close_stdout@@Base+0x1284>
   12e58:	andeq	r2, r1, r4, lsr #6
   12e5c:	mov	r1, r0
   12e60:	mov	r0, #0
   12e64:	b	12e30 <close_stdout@@Base+0x17c8>
   12e68:	mov	r2, r1
   12e6c:	mov	r1, r0
   12e70:	mov	r0, #0
   12e74:	b	12e48 <close_stdout@@Base+0x17e0>
   12e78:	ldr	r3, [pc, #92]	; 12edc <close_stdout@@Base+0x1874>
   12e7c:	ldr	ip, [pc, #92]	; 12ee0 <close_stdout@@Base+0x1878>
   12e80:	add	r3, pc, r3
   12e84:	push	{r4, r5, r6, r7, lr}
   12e88:	sub	sp, sp, #60	; 0x3c
   12e8c:	ldr	r4, [r3, ip]
   12e90:	add	r5, sp, #4
   12e94:	mov	r7, r2
   12e98:	mov	r6, r0
   12e9c:	mov	r0, r5
   12ea0:	ldr	r3, [r4]
   12ea4:	str	r3, [sp, #52]	; 0x34
   12ea8:	bl	11a0c <close_stdout@@Base+0x3a4>
   12eac:	mov	r3, r5
   12eb0:	mvn	r2, #0
   12eb4:	mov	r0, r6
   12eb8:	mov	r1, r7
   12ebc:	bl	128ec <close_stdout@@Base+0x1284>
   12ec0:	ldr	r2, [sp, #52]	; 0x34
   12ec4:	ldr	r3, [r4]
   12ec8:	cmp	r2, r3
   12ecc:	bne	12ed8 <close_stdout@@Base+0x1870>
   12ed0:	add	sp, sp, #60	; 0x3c
   12ed4:	pop	{r4, r5, r6, r7, pc}
   12ed8:	bl	10f08 <__stack_chk_fail@plt>
   12edc:	andeq	r2, r1, r8, ror r1
   12ee0:	andeq	r0, r0, r0, ror #1
   12ee4:	ldr	ip, [pc, #96]	; 12f4c <close_stdout@@Base+0x18e4>
   12ee8:	push	{r4, r5, r6, r7, r8, lr}
   12eec:	add	ip, pc, ip
   12ef0:	ldr	lr, [pc, #88]	; 12f50 <close_stdout@@Base+0x18e8>
   12ef4:	sub	sp, sp, #56	; 0x38
   12ef8:	mov	r8, r3
   12efc:	add	r5, sp, #4
   12f00:	mov	r7, r2
   12f04:	mov	r6, r0
   12f08:	ldr	r4, [ip, lr]
   12f0c:	mov	r0, r5
   12f10:	ldr	r3, [r4]
   12f14:	str	r3, [sp, #52]	; 0x34
   12f18:	bl	11a0c <close_stdout@@Base+0x3a4>
   12f1c:	mov	r2, r8
   12f20:	mov	r3, r5
   12f24:	mov	r0, r6
   12f28:	mov	r1, r7
   12f2c:	bl	128ec <close_stdout@@Base+0x1284>
   12f30:	ldr	r2, [sp, #52]	; 0x34
   12f34:	ldr	r3, [r4]
   12f38:	cmp	r2, r3
   12f3c:	bne	12f48 <close_stdout@@Base+0x18e0>
   12f40:	add	sp, sp, #56	; 0x38
   12f44:	pop	{r4, r5, r6, r7, r8, pc}
   12f48:	bl	10f08 <__stack_chk_fail@plt>
   12f4c:	andeq	r2, r1, ip, lsl #2
   12f50:	andeq	r0, r0, r0, ror #1
   12f54:	mov	r2, r1
   12f58:	mov	r1, r0
   12f5c:	mov	r0, #0
   12f60:	b	12e78 <close_stdout@@Base+0x1810>
   12f64:	mov	ip, r1
   12f68:	mov	r3, r2
   12f6c:	mov	r1, r0
   12f70:	mov	r2, ip
   12f74:	mov	r0, #0
   12f78:	b	12ee4 <close_stdout@@Base+0x187c>
   12f7c:	push	{r4, r5, r6, r7, r8, lr}
   12f80:	mov	r5, r2
   12f84:	ldr	lr, [pc, #136]	; 13014 <close_stdout@@Base+0x19ac>
   12f88:	mov	r7, r0
   12f8c:	mov	r6, r1
   12f90:	ldr	r4, [pc, #128]	; 13018 <close_stdout@@Base+0x19b0>
   12f94:	add	lr, pc, lr
   12f98:	sub	sp, sp, #56	; 0x38
   12f9c:	add	lr, lr, #256	; 0x100
   12fa0:	ldr	r8, [pc, #116]	; 1301c <close_stdout@@Base+0x19b4>
   12fa4:	add	r4, pc, r4
   12fa8:	add	ip, sp, #4
   12fac:	ldm	lr!, {r0, r1, r2, r3}
   12fb0:	ldr	r4, [r4, r8]
   12fb4:	stmia	ip!, {r0, r1, r2, r3}
   12fb8:	ldm	lr!, {r0, r1, r2, r3}
   12fbc:	ldr	r8, [r4]
   12fc0:	stmia	ip!, {r0, r1, r2, r3}
   12fc4:	ldm	lr, {r0, r1, r2, r3}
   12fc8:	str	r8, [sp, #52]	; 0x34
   12fcc:	stm	ip, {r0, r1, r2, r3}
   12fd0:	mov	r1, r5
   12fd4:	add	r5, sp, #4
   12fd8:	mov	r2, #1
   12fdc:	mov	r0, r5
   12fe0:	bl	12b48 <close_stdout@@Base+0x14e0>
   12fe4:	mov	r2, r6
   12fe8:	mov	r3, r5
   12fec:	mov	r1, r7
   12ff0:	mov	r0, #0
   12ff4:	bl	128ec <close_stdout@@Base+0x1284>
   12ff8:	ldr	r2, [sp, #52]	; 0x34
   12ffc:	ldr	r3, [r4]
   13000:	cmp	r2, r3
   13004:	bne	13010 <close_stdout@@Base+0x19a8>
   13008:	add	sp, sp, #56	; 0x38
   1300c:	pop	{r4, r5, r6, r7, r8, pc}
   13010:	bl	10f08 <__stack_chk_fail@plt>
   13014:	ldrdeq	r2, [r1], -ip
   13018:	andeq	r2, r1, r4, asr r0
   1301c:	andeq	r0, r0, r0, ror #1
   13020:	mov	r2, r1
   13024:	mvn	r1, #0
   13028:	b	12f7c <close_stdout@@Base+0x1914>
   1302c:	mov	r1, #58	; 0x3a
   13030:	b	13020 <close_stdout@@Base+0x19b8>
   13034:	mov	r2, #58	; 0x3a
   13038:	b	12f7c <close_stdout@@Base+0x1914>
   1303c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13040:	mov	r5, r2
   13044:	ldr	lr, [pc, #144]	; 130dc <close_stdout@@Base+0x1a74>
   13048:	mov	r8, r0
   1304c:	mov	r9, r1
   13050:	mov	r7, r3
   13054:	add	lr, pc, lr
   13058:	ldr	r4, [pc, #128]	; 130e0 <close_stdout@@Base+0x1a78>
   1305c:	add	lr, lr, #256	; 0x100
   13060:	sub	sp, sp, #56	; 0x38
   13064:	ldr	sl, [pc, #120]	; 130e4 <close_stdout@@Base+0x1a7c>
   13068:	add	r4, pc, r4
   1306c:	ldm	lr!, {r0, r1, r2, r3}
   13070:	add	ip, sp, #4
   13074:	ldr	r4, [r4, sl]
   13078:	ldr	r6, [sp, #88]	; 0x58
   1307c:	stmia	ip!, {r0, r1, r2, r3}
   13080:	ldm	lr!, {r0, r1, r2, r3}
   13084:	ldr	sl, [r4]
   13088:	stmia	ip!, {r0, r1, r2, r3}
   1308c:	ldm	lr, {r0, r1, r2, r3}
   13090:	str	sl, [sp, #52]	; 0x34
   13094:	stm	ip, {r0, r1, r2, r3}
   13098:	mov	r2, r5
   1309c:	add	r5, sp, #4
   130a0:	mov	r1, r9
   130a4:	mov	r0, r5
   130a8:	bl	12bbc <close_stdout@@Base+0x1554>
   130ac:	mov	r2, r6
   130b0:	mov	r3, r5
   130b4:	mov	r0, r8
   130b8:	mov	r1, r7
   130bc:	bl	128ec <close_stdout@@Base+0x1284>
   130c0:	ldr	r2, [sp, #52]	; 0x34
   130c4:	ldr	r3, [r4]
   130c8:	cmp	r2, r3
   130cc:	bne	130d8 <close_stdout@@Base+0x1a70>
   130d0:	add	sp, sp, #56	; 0x38
   130d4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   130d8:	bl	10f08 <__stack_chk_fail@plt>
   130dc:	andeq	r2, r1, ip, lsl r1
   130e0:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   130e4:	andeq	r0, r0, r0, ror #1
   130e8:	push	{lr}		; (str lr, [sp, #-4]!)
   130ec:	sub	sp, sp, #12
   130f0:	mvn	ip, #0
   130f4:	str	ip, [sp]
   130f8:	bl	1303c <close_stdout@@Base+0x19d4>
   130fc:	add	sp, sp, #12
   13100:	pop	{pc}		; (ldr pc, [sp], #4)
   13104:	mov	ip, r1
   13108:	mov	r3, r2
   1310c:	mov	r1, r0
   13110:	mov	r2, ip
   13114:	mov	r0, #0
   13118:	b	130e8 <close_stdout@@Base+0x1a80>
   1311c:	push	{lr}		; (str lr, [sp, #-4]!)
   13120:	sub	sp, sp, #12
   13124:	mov	lr, r1
   13128:	mov	ip, r2
   1312c:	mov	r1, r0
   13130:	str	r3, [sp]
   13134:	mov	r2, lr
   13138:	mov	r3, ip
   1313c:	mov	r0, #0
   13140:	bl	1303c <close_stdout@@Base+0x19d4>
   13144:	add	sp, sp, #12
   13148:	pop	{pc}		; (ldr pc, [sp], #4)
   1314c:	ldr	r3, [pc, #12]	; 13160 <close_stdout@@Base+0x1af8>
   13150:	ldr	ip, [pc, #12]	; 13164 <close_stdout@@Base+0x1afc>
   13154:	add	r3, pc, r3
   13158:	ldr	r3, [r3, ip]
   1315c:	b	128ec <close_stdout@@Base+0x1284>
   13160:	andeq	r1, r1, r4, lsr #29
   13164:	ldrdeq	r0, [r0], -ip
   13168:	mov	r2, r1
   1316c:	mov	r1, r0
   13170:	mov	r0, #0
   13174:	b	1314c <close_stdout@@Base+0x1ae4>
   13178:	mvn	r2, #0
   1317c:	b	1314c <close_stdout@@Base+0x1ae4>
   13180:	mov	r1, r0
   13184:	mov	r0, #0
   13188:	b	13178 <close_stdout@@Base+0x1b10>
   1318c:	push	{r4, r5, r6, r7, lr}
   13190:	cmp	r1, #0
   13194:	sub	sp, sp, #36	; 0x24
   13198:	ldr	r7, [pc, #896]	; 13520 <close_stdout@@Base+0x1eb8>
   1319c:	mov	ip, r3
   131a0:	mov	r5, r0
   131a4:	add	r7, pc, r7
   131a8:	ldr	r4, [sp, #56]	; 0x38
   131ac:	ldr	r6, [sp, #60]	; 0x3c
   131b0:	beq	134f4 <close_stdout@@Base+0x1e8c>
   131b4:	str	r2, [sp]
   131b8:	mov	r3, r1
   131bc:	ldr	r2, [pc, #864]	; 13524 <close_stdout@@Base+0x1ebc>
   131c0:	mov	r1, #1
   131c4:	str	ip, [sp, #4]
   131c8:	add	r2, pc, r2
   131cc:	bl	11064 <__fprintf_chk@plt>
   131d0:	ldr	r1, [pc, #848]	; 13528 <close_stdout@@Base+0x1ec0>
   131d4:	mov	r2, #5
   131d8:	mov	r0, #0
   131dc:	add	r1, pc, r1
   131e0:	bl	10efc <dcgettext@plt>
   131e4:	ldr	r2, [pc, #832]	; 1352c <close_stdout@@Base+0x1ec4>
   131e8:	movw	ip, #2013	; 0x7dd
   131ec:	mov	r1, #1
   131f0:	ldr	r2, [r7, r2]
   131f4:	str	ip, [sp]
   131f8:	mov	r3, r0
   131fc:	mov	r0, r5
   13200:	bl	11064 <__fprintf_chk@plt>
   13204:	ldr	r1, [pc, #804]	; 13530 <close_stdout@@Base+0x1ec8>
   13208:	mov	r0, #0
   1320c:	mov	r2, #5
   13210:	add	r1, pc, r1
   13214:	bl	10efc <dcgettext@plt>
   13218:	mov	r1, r5
   1321c:	bl	10e90 <fputs_unlocked@plt>
   13220:	cmp	r6, #9
   13224:	addls	pc, pc, r6, lsl #2
   13228:	b	13510 <close_stdout@@Base+0x1ea8>
   1322c:	b	132c0 <close_stdout@@Base+0x1c58>
   13230:	b	132c4 <close_stdout@@Base+0x1c5c>
   13234:	b	132f4 <close_stdout@@Base+0x1c8c>
   13238:	b	13328 <close_stdout@@Base+0x1cc0>
   1323c:	b	13364 <close_stdout@@Base+0x1cfc>
   13240:	b	133a4 <close_stdout@@Base+0x1d3c>
   13244:	b	133ec <close_stdout@@Base+0x1d84>
   13248:	b	1343c <close_stdout@@Base+0x1dd4>
   1324c:	b	13494 <close_stdout@@Base+0x1e2c>
   13250:	b	13254 <close_stdout@@Base+0x1bec>
   13254:	ldr	r1, [pc, #728]	; 13534 <close_stdout@@Base+0x1ecc>
   13258:	mov	r0, #0
   1325c:	add	r1, pc, r1
   13260:	mov	r2, #5
   13264:	bl	10efc <dcgettext@plt>
   13268:	ldm	r4, {r3, ip}
   1326c:	mov	r1, #1
   13270:	str	ip, [sp]
   13274:	ldr	ip, [r4, #8]
   13278:	str	ip, [sp, #4]
   1327c:	ldr	ip, [r4, #12]
   13280:	str	ip, [sp, #8]
   13284:	ldr	ip, [r4, #16]
   13288:	str	ip, [sp, #12]
   1328c:	ldr	ip, [r4, #20]
   13290:	str	ip, [sp, #16]
   13294:	ldr	ip, [r4, #24]
   13298:	str	ip, [sp, #20]
   1329c:	ldr	ip, [r4, #28]
   132a0:	str	ip, [sp, #24]
   132a4:	ldr	ip, [r4, #32]
   132a8:	str	ip, [sp, #28]
   132ac:	mov	r2, r0
   132b0:	mov	r0, r5
   132b4:	bl	11064 <__fprintf_chk@plt>
   132b8:	add	sp, sp, #36	; 0x24
   132bc:	pop	{r4, r5, r6, r7, pc}
   132c0:	bl	110d0 <abort@plt>
   132c4:	ldr	r1, [pc, #620]	; 13538 <close_stdout@@Base+0x1ed0>
   132c8:	mov	r2, #5
   132cc:	mov	r0, #0
   132d0:	add	r1, pc, r1
   132d4:	bl	10efc <dcgettext@plt>
   132d8:	ldr	r3, [r4]
   132dc:	mov	r1, #1
   132e0:	mov	r2, r0
   132e4:	mov	r0, r5
   132e8:	add	sp, sp, #36	; 0x24
   132ec:	pop	{r4, r5, r6, r7, lr}
   132f0:	b	11064 <__fprintf_chk@plt>
   132f4:	ldr	r1, [pc, #576]	; 1353c <close_stdout@@Base+0x1ed4>
   132f8:	mov	r2, #5
   132fc:	mov	r0, #0
   13300:	add	r1, pc, r1
   13304:	bl	10efc <dcgettext@plt>
   13308:	ldm	r4, {r3, ip}
   1330c:	mov	r1, #1
   13310:	str	ip, [sp, #56]	; 0x38
   13314:	mov	r2, r0
   13318:	mov	r0, r5
   1331c:	add	sp, sp, #36	; 0x24
   13320:	pop	{r4, r5, r6, r7, lr}
   13324:	b	11064 <__fprintf_chk@plt>
   13328:	ldr	r1, [pc, #528]	; 13540 <close_stdout@@Base+0x1ed8>
   1332c:	mov	r2, #5
   13330:	mov	r0, #0
   13334:	add	r1, pc, r1
   13338:	bl	10efc <dcgettext@plt>
   1333c:	ldm	r4, {r3, ip}
   13340:	mov	r1, #1
   13344:	str	ip, [sp, #56]	; 0x38
   13348:	ldr	ip, [r4, #8]
   1334c:	str	ip, [sp, #60]	; 0x3c
   13350:	mov	r2, r0
   13354:	mov	r0, r5
   13358:	add	sp, sp, #36	; 0x24
   1335c:	pop	{r4, r5, r6, r7, lr}
   13360:	b	11064 <__fprintf_chk@plt>
   13364:	ldr	r1, [pc, #472]	; 13544 <close_stdout@@Base+0x1edc>
   13368:	mov	r2, #5
   1336c:	mov	r0, #0
   13370:	add	r1, pc, r1
   13374:	bl	10efc <dcgettext@plt>
   13378:	ldm	r4, {r3, ip}
   1337c:	mov	r1, #1
   13380:	str	ip, [sp]
   13384:	ldr	ip, [r4, #8]
   13388:	str	ip, [sp, #4]
   1338c:	ldr	ip, [r4, #12]
   13390:	str	ip, [sp, #8]
   13394:	mov	r2, r0
   13398:	mov	r0, r5
   1339c:	bl	11064 <__fprintf_chk@plt>
   133a0:	b	132b8 <close_stdout@@Base+0x1c50>
   133a4:	ldr	r1, [pc, #412]	; 13548 <close_stdout@@Base+0x1ee0>
   133a8:	mov	r2, #5
   133ac:	mov	r0, #0
   133b0:	add	r1, pc, r1
   133b4:	bl	10efc <dcgettext@plt>
   133b8:	ldm	r4, {r3, ip}
   133bc:	mov	r1, #1
   133c0:	str	ip, [sp]
   133c4:	ldr	ip, [r4, #8]
   133c8:	str	ip, [sp, #4]
   133cc:	ldr	ip, [r4, #12]
   133d0:	str	ip, [sp, #8]
   133d4:	ldr	ip, [r4, #16]
   133d8:	str	ip, [sp, #12]
   133dc:	mov	r2, r0
   133e0:	mov	r0, r5
   133e4:	bl	11064 <__fprintf_chk@plt>
   133e8:	b	132b8 <close_stdout@@Base+0x1c50>
   133ec:	ldr	r1, [pc, #344]	; 1354c <close_stdout@@Base+0x1ee4>
   133f0:	mov	r2, #5
   133f4:	mov	r0, #0
   133f8:	add	r1, pc, r1
   133fc:	bl	10efc <dcgettext@plt>
   13400:	ldm	r4, {r3, ip}
   13404:	mov	r1, #1
   13408:	str	ip, [sp]
   1340c:	ldr	ip, [r4, #8]
   13410:	str	ip, [sp, #4]
   13414:	ldr	ip, [r4, #12]
   13418:	str	ip, [sp, #8]
   1341c:	ldr	ip, [r4, #16]
   13420:	str	ip, [sp, #12]
   13424:	ldr	ip, [r4, #20]
   13428:	str	ip, [sp, #16]
   1342c:	mov	r2, r0
   13430:	mov	r0, r5
   13434:	bl	11064 <__fprintf_chk@plt>
   13438:	b	132b8 <close_stdout@@Base+0x1c50>
   1343c:	ldr	r1, [pc, #268]	; 13550 <close_stdout@@Base+0x1ee8>
   13440:	mov	r2, #5
   13444:	mov	r0, #0
   13448:	add	r1, pc, r1
   1344c:	bl	10efc <dcgettext@plt>
   13450:	ldm	r4, {r3, ip}
   13454:	mov	r1, #1
   13458:	str	ip, [sp]
   1345c:	ldr	ip, [r4, #8]
   13460:	str	ip, [sp, #4]
   13464:	ldr	ip, [r4, #12]
   13468:	str	ip, [sp, #8]
   1346c:	ldr	ip, [r4, #16]
   13470:	str	ip, [sp, #12]
   13474:	ldr	ip, [r4, #20]
   13478:	str	ip, [sp, #16]
   1347c:	ldr	ip, [r4, #24]
   13480:	str	ip, [sp, #20]
   13484:	mov	r2, r0
   13488:	mov	r0, r5
   1348c:	bl	11064 <__fprintf_chk@plt>
   13490:	b	132b8 <close_stdout@@Base+0x1c50>
   13494:	ldr	r1, [pc, #184]	; 13554 <close_stdout@@Base+0x1eec>
   13498:	mov	r2, #5
   1349c:	mov	r0, #0
   134a0:	add	r1, pc, r1
   134a4:	bl	10efc <dcgettext@plt>
   134a8:	ldm	r4, {r3, ip}
   134ac:	mov	r1, #1
   134b0:	str	ip, [sp]
   134b4:	ldr	ip, [r4, #8]
   134b8:	str	ip, [sp, #4]
   134bc:	ldr	ip, [r4, #12]
   134c0:	str	ip, [sp, #8]
   134c4:	ldr	ip, [r4, #16]
   134c8:	str	ip, [sp, #12]
   134cc:	ldr	ip, [r4, #20]
   134d0:	str	ip, [sp, #16]
   134d4:	ldr	ip, [r4, #24]
   134d8:	str	ip, [sp, #20]
   134dc:	ldr	ip, [r4, #28]
   134e0:	str	ip, [sp, #24]
   134e4:	mov	r2, r0
   134e8:	mov	r0, r5
   134ec:	bl	11064 <__fprintf_chk@plt>
   134f0:	b	132b8 <close_stdout@@Base+0x1c50>
   134f4:	str	r3, [sp]
   134f8:	mov	r3, r2
   134fc:	ldr	r2, [pc, #84]	; 13558 <close_stdout@@Base+0x1ef0>
   13500:	mov	r1, #1
   13504:	add	r2, pc, r2
   13508:	bl	11064 <__fprintf_chk@plt>
   1350c:	b	131d0 <close_stdout@@Base+0x1b68>
   13510:	ldr	r1, [pc, #68]	; 1355c <close_stdout@@Base+0x1ef4>
   13514:	mov	r0, #0
   13518:	add	r1, pc, r1
   1351c:	b	13260 <close_stdout@@Base+0x1bf8>
   13520:	andeq	r1, r1, r4, asr lr
   13524:	andeq	r1, r0, r0, lsr r4
   13528:	andeq	r1, r0, r0, lsr r4
   1352c:	andeq	r0, r0, r0, lsl r1
   13530:	andeq	r1, r0, r0, lsl #8
   13534:	andeq	r1, r0, ip, lsl #11
   13538:	andeq	r1, r0, ip, lsl #8
   1353c:	andeq	r1, r0, ip, ror #7
   13540:	ldrdeq	r1, [r0], -r0
   13544:			; <UNDEFINED> instruction: 0x000013b0
   13548:	muleq	r0, r0, r3
   1354c:	andeq	r1, r0, ip, ror #6
   13550:	andeq	r1, r0, r4, asr #6
   13554:	andeq	r1, r0, r8, lsl r3
   13558:	andeq	r1, r0, r0, lsl #2
   1355c:	andeq	r1, r0, r4, lsl #6
   13560:	push	{r4, r5, lr}
   13564:	sub	sp, sp, #12
   13568:	ldr	r5, [sp, #24]
   1356c:	ldr	ip, [r5]
   13570:	cmp	ip, #0
   13574:	beq	13590 <close_stdout@@Base+0x1f28>
   13578:	mov	lr, r5
   1357c:	mov	ip, #0
   13580:	ldr	r4, [lr, #4]!
   13584:	add	ip, ip, #1
   13588:	cmp	r4, #0
   1358c:	bne	13580 <close_stdout@@Base+0x1f18>
   13590:	stm	sp, {r5, ip}
   13594:	bl	1318c <close_stdout@@Base+0x1b24>
   13598:	add	sp, sp, #12
   1359c:	pop	{r4, r5, pc}
   135a0:	push	{r4, r5, r6, r7, lr}
   135a4:	sub	sp, sp, #60	; 0x3c
   135a8:	ldr	r4, [pc, #100]	; 13614 <close_stdout@@Base+0x1fac>
   135ac:	mov	ip, #0
   135b0:	ldr	r5, [pc, #96]	; 13618 <close_stdout@@Base+0x1fb0>
   135b4:	mov	lr, ip
   135b8:	add	r4, pc, r4
   135bc:	ldr	r6, [sp, #80]	; 0x50
   135c0:	ldr	r7, [r4, r5]
   135c4:	add	r5, sp, #12
   135c8:	ldr	r4, [r7]
   135cc:	str	r4, [sp, #52]	; 0x34
   135d0:	ldr	r4, [r6, ip]
   135d4:	cmp	r4, #0
   135d8:	str	r4, [r5, ip]
   135dc:	beq	135f0 <close_stdout@@Base+0x1f88>
   135e0:	add	lr, lr, #1
   135e4:	add	ip, ip, #4
   135e8:	cmp	lr, #10
   135ec:	bne	135d0 <close_stdout@@Base+0x1f68>
   135f0:	stm	sp, {r5, lr}
   135f4:	bl	1318c <close_stdout@@Base+0x1b24>
   135f8:	ldr	r2, [sp, #52]	; 0x34
   135fc:	ldr	r3, [r7]
   13600:	cmp	r2, r3
   13604:	bne	13610 <close_stdout@@Base+0x1fa8>
   13608:	add	sp, sp, #60	; 0x3c
   1360c:	pop	{r4, r5, r6, r7, pc}
   13610:	bl	10f08 <__stack_chk_fail@plt>
   13614:	andeq	r1, r1, r0, asr #20
   13618:	andeq	r0, r0, r0, ror #1
   1361c:	push	{r3}		; (str r3, [sp, #-4]!)
   13620:	push	{r4, lr}
   13624:	sub	sp, sp, #20
   13628:	ldr	lr, [pc, #72]	; 13678 <close_stdout@@Base+0x2010>
   1362c:	add	ip, sp, #32
   13630:	ldr	r4, [pc, #68]	; 1367c <close_stdout@@Base+0x2014>
   13634:	add	lr, pc, lr
   13638:	ldr	r3, [sp, #28]
   1363c:	ldr	r4, [lr, r4]
   13640:	str	ip, [sp]
   13644:	str	ip, [sp, #8]
   13648:	ldr	ip, [r4]
   1364c:	str	ip, [sp, #12]
   13650:	bl	135a0 <close_stdout@@Base+0x1f38>
   13654:	ldr	r2, [sp, #12]
   13658:	ldr	r3, [r4]
   1365c:	cmp	r2, r3
   13660:	bne	13674 <close_stdout@@Base+0x200c>
   13664:	add	sp, sp, #20
   13668:	pop	{r4, lr}
   1366c:	add	sp, sp, #4
   13670:	bx	lr
   13674:	bl	10f08 <__stack_chk_fail@plt>
   13678:	andeq	r1, r1, r4, asr #19
   1367c:	andeq	r0, r0, r0, ror #1
   13680:	ldr	r1, [pc, #132]	; 1370c <close_stdout@@Base+0x20a4>
   13684:	mov	r2, #5
   13688:	push	{r4, lr}
   1368c:	add	r1, pc, r1
   13690:	mov	r0, #0
   13694:	ldr	r4, [pc, #116]	; 13710 <close_stdout@@Base+0x20a8>
   13698:	bl	10efc <dcgettext@plt>
   1369c:	ldr	r2, [pc, #112]	; 13714 <close_stdout@@Base+0x20ac>
   136a0:	add	r4, pc, r4
   136a4:	add	r2, pc, r2
   136a8:	mov	r1, r0
   136ac:	mov	r0, #1
   136b0:	bl	11040 <__printf_chk@plt>
   136b4:	ldr	r1, [pc, #92]	; 13718 <close_stdout@@Base+0x20b0>
   136b8:	mov	r2, #5
   136bc:	mov	r0, #0
   136c0:	add	r1, pc, r1
   136c4:	bl	10efc <dcgettext@plt>
   136c8:	ldr	r2, [pc, #76]	; 1371c <close_stdout@@Base+0x20b4>
   136cc:	ldr	r3, [pc, #76]	; 13720 <close_stdout@@Base+0x20b8>
   136d0:	add	r2, pc, r2
   136d4:	add	r3, pc, r3
   136d8:	mov	r1, r0
   136dc:	mov	r0, #1
   136e0:	bl	11040 <__printf_chk@plt>
   136e4:	ldr	r1, [pc, #56]	; 13724 <close_stdout@@Base+0x20bc>
   136e8:	mov	r0, #0
   136ec:	mov	r2, #5
   136f0:	add	r1, pc, r1
   136f4:	bl	10efc <dcgettext@plt>
   136f8:	ldr	r3, [pc, #40]	; 13728 <close_stdout@@Base+0x20c0>
   136fc:	ldr	r3, [r4, r3]
   13700:	pop	{r4, lr}
   13704:	ldr	r1, [r3]
   13708:	b	10e90 <fputs_unlocked@plt>
   1370c:	andeq	r1, r0, ip, asr #3
   13710:	andeq	r1, r1, r8, asr r9
   13714:	andeq	r1, r0, ip, asr #3
   13718:	andeq	r1, r0, r8, asr #3
   1371c:	andeq	r0, r0, r4, ror #25
   13720:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13724:	andeq	r1, r0, ip, lsr #3
   13728:	strdeq	r0, [r0], -ip
   1372c:	push	{r4, lr}
   13730:	mov	r4, r0
   13734:	bl	10fa4 <malloc@plt>
   13738:	rsbs	r3, r0, #1
   1373c:	movcc	r3, #0
   13740:	cmp	r4, #0
   13744:	moveq	r3, #0
   13748:	cmp	r3, #0
   1374c:	popeq	{r4, pc}
   13750:	bl	13940 <close_stdout@@Base+0x22d8>
   13754:	push	{r3, r4, r5, lr}
   13758:	mov	r4, r0
   1375c:	mvn	r0, #0
   13760:	mov	r5, r1
   13764:	bl	13fe0 <close_stdout@@Base+0x2978>
   13768:	cmp	r0, r4
   1376c:	bcc	1377c <close_stdout@@Base+0x2114>
   13770:	mul	r0, r4, r5
   13774:	pop	{r3, r4, r5, lr}
   13778:	b	1372c <close_stdout@@Base+0x20c4>
   1377c:	bl	13940 <close_stdout@@Base+0x22d8>
   13780:	b	1372c <close_stdout@@Base+0x20c4>
   13784:	rsbs	r3, r1, #1
   13788:	push	{r4, lr}
   1378c:	movcc	r3, #0
   13790:	cmp	r0, #0
   13794:	mov	r4, r1
   13798:	moveq	r3, #0
   1379c:	cmp	r3, #0
   137a0:	bne	137c4 <close_stdout@@Base+0x215c>
   137a4:	bl	10f14 <realloc@plt>
   137a8:	rsbs	r3, r0, #1
   137ac:	movcc	r3, #0
   137b0:	cmp	r4, #0
   137b4:	moveq	r3, #0
   137b8:	cmp	r3, #0
   137bc:	popeq	{r4, pc}
   137c0:	bl	13940 <close_stdout@@Base+0x22d8>
   137c4:	bl	10ec0 <free@plt>
   137c8:	mov	r0, #0
   137cc:	pop	{r4, pc}
   137d0:	push	{r4, r5, r6, lr}
   137d4:	mov	r5, r1
   137d8:	mov	r6, r0
   137dc:	mov	r1, r2
   137e0:	mvn	r0, #0
   137e4:	mov	r4, r2
   137e8:	bl	13fe0 <close_stdout@@Base+0x2978>
   137ec:	cmp	r0, r5
   137f0:	bcc	13804 <close_stdout@@Base+0x219c>
   137f4:	mov	r0, r6
   137f8:	mul	r1, r5, r4
   137fc:	pop	{r4, r5, r6, lr}
   13800:	b	13784 <close_stdout@@Base+0x211c>
   13804:	bl	13940 <close_stdout@@Base+0x22d8>
   13808:	push	{r3, r4, r5, r6, r7, lr}
   1380c:	subs	r7, r0, #0
   13810:	mov	r5, r1
   13814:	mov	r6, r2
   13818:	ldr	r4, [r1]
   1381c:	beq	13854 <close_stdout@@Base+0x21ec>
   13820:	movw	r0, #43690	; 0xaaaa
   13824:	mov	r1, r2
   13828:	bfi	r0, r0, #16, #16
   1382c:	bl	13fe0 <close_stdout@@Base+0x2978>
   13830:	cmp	r4, r0
   13834:	addcc	r3, r4, #1
   13838:	addcc	r4, r4, r3, lsr #1
   1383c:	bcs	13878 <close_stdout@@Base+0x2210>
   13840:	str	r4, [r5]
   13844:	mov	r0, r7
   13848:	mul	r1, r6, r4
   1384c:	pop	{r3, r4, r5, r6, r7, lr}
   13850:	b	13784 <close_stdout@@Base+0x211c>
   13854:	cmp	r4, #0
   13858:	bne	13840 <close_stdout@@Base+0x21d8>
   1385c:	mov	r0, #64	; 0x40
   13860:	mov	r1, r2
   13864:	bl	13fe0 <close_stdout@@Base+0x2978>
   13868:	cmp	r0, #0
   1386c:	movne	r4, r0
   13870:	addeq	r4, r0, #1
   13874:	b	13840 <close_stdout@@Base+0x21d8>
   13878:	bl	13940 <close_stdout@@Base+0x22d8>
   1387c:	cmp	r0, #0
   13880:	push	{r3, lr}
   13884:	ldr	r3, [r1]
   13888:	beq	138b4 <close_stdout@@Base+0x224c>
   1388c:	movw	r2, #43689	; 0xaaa9
   13890:	movt	r2, #43690	; 0xaaaa
   13894:	cmp	r3, r2
   13898:	addls	r2, r3, #1
   1389c:	addls	r3, r3, r2, lsr #1
   138a0:	bhi	138cc <close_stdout@@Base+0x2264>
   138a4:	str	r3, [r1]
   138a8:	mov	r1, r3
   138ac:	pop	{r3, lr}
   138b0:	b	13784 <close_stdout@@Base+0x211c>
   138b4:	cmp	r3, #0
   138b8:	moveq	r3, #64	; 0x40
   138bc:	str	r3, [r1]
   138c0:	mov	r1, r3
   138c4:	pop	{r3, lr}
   138c8:	b	13784 <close_stdout@@Base+0x211c>
   138cc:	bl	13940 <close_stdout@@Base+0x22d8>
   138d0:	push	{r4, lr}
   138d4:	mov	r4, r0
   138d8:	bl	1372c <close_stdout@@Base+0x20c4>
   138dc:	mov	r2, r4
   138e0:	mov	r1, #0
   138e4:	pop	{r4, lr}
   138e8:	b	11028 <memset@plt>
   138ec:	push	{r3, lr}
   138f0:	bl	10e84 <calloc@plt>
   138f4:	cmp	r0, #0
   138f8:	popne	{r3, pc}
   138fc:	bl	13940 <close_stdout@@Base+0x22d8>
   13900:	push	{r3, r4, r5, lr}
   13904:	mov	r4, r1
   13908:	mov	r5, r0
   1390c:	mov	r0, r1
   13910:	bl	1372c <close_stdout@@Base+0x20c4>
   13914:	mov	r1, r5
   13918:	mov	r2, r4
   1391c:	pop	{r3, r4, r5, lr}
   13920:	b	10ed8 <memcpy@plt>
   13924:	push	{r4, lr}
   13928:	mov	r4, r0
   1392c:	bl	10ff8 <strlen@plt>
   13930:	add	r1, r0, #1
   13934:	mov	r0, r4
   13938:	pop	{r4, lr}
   1393c:	b	13900 <close_stdout@@Base+0x2298>
   13940:	ldr	r3, [pc, #64]	; 13988 <close_stdout@@Base+0x2320>
   13944:	mov	r2, #5
   13948:	ldr	ip, [pc, #60]	; 1398c <close_stdout@@Base+0x2324>
   1394c:	mov	r0, #0
   13950:	add	r3, pc, r3
   13954:	ldr	r1, [pc, #52]	; 13990 <close_stdout@@Base+0x2328>
   13958:	push	{r4, lr}
   1395c:	add	r1, pc, r1
   13960:	ldr	r3, [r3, ip]
   13964:	ldr	r4, [r3]
   13968:	bl	10efc <dcgettext@plt>
   1396c:	ldr	r2, [pc, #32]	; 13994 <close_stdout@@Base+0x232c>
   13970:	mov	r1, #0
   13974:	add	r2, pc, r2
   13978:	mov	r3, r0
   1397c:	mov	r0, r4
   13980:	bl	10f80 <error@plt>
   13984:	bl	110d0 <abort@plt>
   13988:	andeq	r1, r1, r8, lsr #13
   1398c:	andeq	r0, r0, r4, lsl #2
   13990:			; <UNDEFINED> instruction: 0x00000fb0
   13994:	andeq	r0, r0, r8, lsr #23
   13998:	push	{r4, r5, r6, lr}
   1399c:	mov	r4, r0
   139a0:	bl	10f68 <__fpending@plt>
   139a4:	mov	r6, r0
   139a8:	mov	r0, r4
   139ac:	ldr	r4, [r4]
   139b0:	bl	13e38 <close_stdout@@Base+0x27d0>
   139b4:	and	r4, r4, #32
   139b8:	adds	r5, r0, #0
   139bc:	movne	r5, #1
   139c0:	cmp	r4, #0
   139c4:	bne	139e4 <close_stdout@@Base+0x237c>
   139c8:	cmp	r5, #0
   139cc:	beq	139dc <close_stdout@@Base+0x2374>
   139d0:	cmp	r6, #0
   139d4:	beq	13a00 <close_stdout@@Base+0x2398>
   139d8:	mvn	r4, #0
   139dc:	mov	r0, r4
   139e0:	pop	{r4, r5, r6, pc}
   139e4:	cmp	r5, #0
   139e8:	bne	139d8 <close_stdout@@Base+0x2370>
   139ec:	bl	11010 <__errno_location@plt>
   139f0:	mvn	r4, #0
   139f4:	str	r5, [r0]
   139f8:	mov	r0, r4
   139fc:	pop	{r4, r5, r6, pc}
   13a00:	bl	11010 <__errno_location@plt>
   13a04:	ldr	r4, [r0]
   13a08:	subs	r4, r4, #9
   13a0c:	mvnne	r4, #0
   13a10:	mov	r0, r4
   13a14:	pop	{r4, r5, r6, pc}
   13a18:	ldr	r3, [pc, #984]	; 13df8 <close_stdout@@Base+0x2790>
   13a1c:	mov	r0, #14
   13a20:	ldr	r2, [pc, #980]	; 13dfc <close_stdout@@Base+0x2794>
   13a24:	add	r3, pc, r3
   13a28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a2c:	sub	sp, sp, #132	; 0x84
   13a30:	ldr	r6, [r3, r2]
   13a34:	ldr	r3, [r6]
   13a38:	str	r3, [sp, #124]	; 0x7c
   13a3c:	bl	110ac <nl_langinfo@plt>
   13a40:	subs	r5, r0, #0
   13a44:	beq	13af8 <close_stdout@@Base+0x2490>
   13a48:	ldr	r3, [pc, #944]	; 13e00 <close_stdout@@Base+0x2798>
   13a4c:	ldr	r4, [pc, r3]
   13a50:	cmp	r4, #0
   13a54:	beq	13b04 <close_stdout@@Base+0x249c>
   13a58:	ldrb	r7, [r4]
   13a5c:	cmp	r7, #0
   13a60:	bne	13a94 <close_stdout@@Base+0x242c>
   13a64:	b	13acc <close_stdout@@Base+0x2464>
   13a68:	mov	r0, r4
   13a6c:	bl	10ff8 <strlen@plt>
   13a70:	add	r0, r0, #1
   13a74:	add	r7, r4, r0
   13a78:	mov	r0, r7
   13a7c:	bl	10ff8 <strlen@plt>
   13a80:	add	r0, r0, #1
   13a84:	add	r4, r7, r0
   13a88:	ldrb	r7, [r7, r0]
   13a8c:	cmp	r7, #0
   13a90:	beq	13acc <close_stdout@@Base+0x2464>
   13a94:	mov	r0, r5
   13a98:	mov	r1, r4
   13a9c:	bl	10ea8 <strcmp@plt>
   13aa0:	cmp	r0, #0
   13aa4:	beq	13abc <close_stdout@@Base+0x2454>
   13aa8:	cmp	r7, #42	; 0x2a
   13aac:	bne	13a68 <close_stdout@@Base+0x2400>
   13ab0:	ldrb	r3, [r4, #1]
   13ab4:	cmp	r3, #0
   13ab8:	bne	13a68 <close_stdout@@Base+0x2400>
   13abc:	mov	r0, r4
   13ac0:	bl	10ff8 <strlen@plt>
   13ac4:	add	r0, r0, #1
   13ac8:	add	r5, r4, r0
   13acc:	ldrb	r3, [r5]
   13ad0:	cmp	r3, #0
   13ad4:	ldreq	r5, [pc, #808]	; 13e04 <close_stdout@@Base+0x279c>
   13ad8:	addeq	r5, pc, r5
   13adc:	ldr	r2, [sp, #124]	; 0x7c
   13ae0:	mov	r0, r5
   13ae4:	ldr	r3, [r6]
   13ae8:	cmp	r2, r3
   13aec:	bne	13dcc <close_stdout@@Base+0x2764>
   13af0:	add	sp, sp, #132	; 0x84
   13af4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13af8:	ldr	r5, [pc, #776]	; 13e08 <close_stdout@@Base+0x27a0>
   13afc:	add	r5, pc, r5
   13b00:	b	13a48 <close_stdout@@Base+0x23e0>
   13b04:	ldr	r0, [pc, #768]	; 13e0c <close_stdout@@Base+0x27a4>
   13b08:	add	r0, pc, r0
   13b0c:	bl	10f98 <getenv@plt>
   13b10:	subs	r8, r0, #0
   13b14:	beq	13da4 <close_stdout@@Base+0x273c>
   13b18:	ldrb	r3, [r8]
   13b1c:	cmp	r3, #0
   13b20:	beq	13d38 <close_stdout@@Base+0x26d0>
   13b24:	bl	10ff8 <strlen@plt>
   13b28:	subs	sl, r0, #0
   13b2c:	subne	r3, sl, #1
   13b30:	bne	13d48 <close_stdout@@Base+0x26e0>
   13b34:	mov	r9, #0
   13b38:	mov	fp, r9
   13b3c:	add	r9, sl, r9
   13b40:	add	r0, r9, #14
   13b44:	bl	10fa4 <malloc@plt>
   13b48:	subs	r7, r0, #0
   13b4c:	beq	13d98 <close_stdout@@Base+0x2730>
   13b50:	mov	r1, r8
   13b54:	mov	r2, sl
   13b58:	bl	10ed8 <memcpy@plt>
   13b5c:	cmp	fp, #0
   13b60:	add	ip, r7, r9
   13b64:	movne	r3, #47	; 0x2f
   13b68:	strbne	r3, [r7, sl]
   13b6c:	ldr	r3, [pc, #668]	; 13e10 <close_stdout@@Base+0x27a8>
   13b70:	add	r3, pc, r3
   13b74:	ldm	r3!, {r0, r1, r2}
   13b78:	ldrh	r3, [r3]
   13b7c:	str	r0, [r7, r9]
   13b80:	mov	r0, r7
   13b84:	str	r1, [ip, #4]
   13b88:	mov	r1, #32768	; 0x8000
   13b8c:	strh	r3, [ip, #12]
   13b90:	str	r2, [ip, #8]
   13b94:	bl	10f8c <open64@plt>
   13b98:	subs	r8, r0, #0
   13b9c:	blt	13d60 <close_stdout@@Base+0x26f8>
   13ba0:	ldr	r1, [pc, #620]	; 13e14 <close_stdout@@Base+0x27ac>
   13ba4:	add	r1, pc, r1
   13ba8:	bl	10e78 <fdopen@plt>
   13bac:	subs	fp, r0, #0
   13bb0:	beq	13db8 <close_stdout@@Base+0x2750>
   13bb4:	ldr	r0, [pc, #604]	; 13e18 <close_stdout@@Base+0x27b0>
   13bb8:	add	sl, sp, #20
   13bbc:	add	r9, sp, #72	; 0x48
   13bc0:	mov	r8, #0
   13bc4:	add	r0, pc, r0
   13bc8:	str	r0, [sp, #12]
   13bcc:	ldr	r3, [fp, #4]
   13bd0:	ldr	r2, [fp, #8]
   13bd4:	cmp	r3, r2
   13bd8:	bcs	13cc4 <close_stdout@@Base+0x265c>
   13bdc:	add	r2, r3, #1
   13be0:	str	r2, [fp, #4]
   13be4:	ldrb	r0, [r3]
   13be8:	cmp	r0, #32
   13bec:	beq	13bcc <close_stdout@@Base+0x2564>
   13bf0:	sub	r3, r0, #9
   13bf4:	cmp	r3, #1
   13bf8:	bls	13bcc <close_stdout@@Base+0x2564>
   13bfc:	cmp	r0, #35	; 0x23
   13c00:	beq	13cd8 <close_stdout@@Base+0x2670>
   13c04:	mov	r1, fp
   13c08:	bl	11004 <ungetc@plt>
   13c0c:	mov	r0, fp
   13c10:	ldr	r1, [sp, #12]
   13c14:	mov	r2, sl
   13c18:	mov	r3, r9
   13c1c:	bl	11034 <fscanf@plt>
   13c20:	cmp	r0, #1
   13c24:	ble	13d08 <close_stdout@@Base+0x26a0>
   13c28:	mov	r0, sl
   13c2c:	bl	10ff8 <strlen@plt>
   13c30:	str	r0, [sp, #8]
   13c34:	mov	r0, r9
   13c38:	bl	10ff8 <strlen@plt>
   13c3c:	cmp	r8, #0
   13c40:	mov	r2, r0
   13c44:	bne	13d6c <close_stdout@@Base+0x2704>
   13c48:	ldr	r3, [sp, #8]
   13c4c:	str	r2, [sp]
   13c50:	add	r8, r0, r3
   13c54:	add	r0, r8, #3
   13c58:	add	r8, r8, #2
   13c5c:	bl	10fa4 <malloc@plt>
   13c60:	ldr	r2, [sp]
   13c64:	mov	r3, r0
   13c68:	cmp	r3, #0
   13c6c:	beq	13dd0 <close_stdout@@Base+0x2768>
   13c70:	ldr	r0, [sp, #8]
   13c74:	movw	r1, #65534	; 0xfffe
   13c78:	movt	r1, #65535	; 0xffff
   13c7c:	rsb	r2, r2, r8
   13c80:	rsb	r1, r0, r1
   13c84:	stm	sp, {r2, r3}
   13c88:	add	r0, r1, r2
   13c8c:	mov	r1, sl
   13c90:	add	r0, r3, r0
   13c94:	mov	r4, r3
   13c98:	bl	10f5c <strcpy@plt>
   13c9c:	ldr	r2, [sp]
   13ca0:	ldr	r3, [sp, #4]
   13ca4:	mov	r1, r9
   13ca8:	sub	r0, r2, #1
   13cac:	add	r0, r3, r0
   13cb0:	bl	10f5c <strcpy@plt>
   13cb4:	ldr	r3, [fp, #4]
   13cb8:	ldr	r2, [fp, #8]
   13cbc:	cmp	r3, r2
   13cc0:	bcc	13bdc <close_stdout@@Base+0x2574>
   13cc4:	mov	r0, fp
   13cc8:	bl	11088 <__uflow@plt>
   13ccc:	cmn	r0, #1
   13cd0:	beq	13d08 <close_stdout@@Base+0x26a0>
   13cd4:	b	13be8 <close_stdout@@Base+0x2580>
   13cd8:	ldr	r3, [fp, #4]
   13cdc:	ldr	r2, [fp, #8]
   13ce0:	cmp	r3, r2
   13ce4:	bcs	13dec <close_stdout@@Base+0x2784>
   13ce8:	add	r2, r3, #1
   13cec:	str	r2, [fp, #4]
   13cf0:	ldrb	r0, [r3]
   13cf4:	cmp	r0, #10
   13cf8:	cmnne	r0, #1
   13cfc:	bne	13cd8 <close_stdout@@Base+0x2670>
   13d00:	cmn	r0, #1
   13d04:	bne	13bcc <close_stdout@@Base+0x2564>
   13d08:	mov	r0, fp
   13d0c:	bl	13e38 <close_stdout@@Base+0x27d0>
   13d10:	cmp	r8, #0
   13d14:	beq	13d60 <close_stdout@@Base+0x26f8>
   13d18:	mov	r3, #0
   13d1c:	strb	r3, [r4, r8]
   13d20:	mov	r0, r7
   13d24:	bl	10ec0 <free@plt>
   13d28:	ldr	r3, [pc, #236]	; 13e1c <close_stdout@@Base+0x27b4>
   13d2c:	add	r3, pc, r3
   13d30:	str	r4, [r3]
   13d34:	b	13a58 <close_stdout@@Base+0x23f0>
   13d38:	ldr	r8, [pc, #224]	; 13e20 <close_stdout@@Base+0x27b8>
   13d3c:	mov	r3, #7
   13d40:	mov	sl, #8
   13d44:	add	r8, pc, r8
   13d48:	ldrb	r3, [r8, r3]
   13d4c:	cmp	r3, #47	; 0x2f
   13d50:	movne	r9, #1
   13d54:	movne	fp, r9
   13d58:	bne	13b3c <close_stdout@@Base+0x24d4>
   13d5c:	b	13b34 <close_stdout@@Base+0x24cc>
   13d60:	ldr	r4, [pc, #188]	; 13e24 <close_stdout@@Base+0x27bc>
   13d64:	add	r4, pc, r4
   13d68:	b	13d20 <close_stdout@@Base+0x26b8>
   13d6c:	ldr	r0, [sp, #8]
   13d70:	str	r2, [sp]
   13d74:	add	r3, r0, r2
   13d78:	mov	r0, r4
   13d7c:	add	r8, r3, r8
   13d80:	add	r1, r8, #3
   13d84:	add	r8, r8, #2
   13d88:	bl	10f14 <realloc@plt>
   13d8c:	ldr	r2, [sp]
   13d90:	mov	r3, r0
   13d94:	b	13c68 <close_stdout@@Base+0x2600>
   13d98:	ldr	r4, [pc, #136]	; 13e28 <close_stdout@@Base+0x27c0>
   13d9c:	add	r4, pc, r4
   13da0:	b	13d28 <close_stdout@@Base+0x26c0>
   13da4:	ldr	r8, [pc, #128]	; 13e2c <close_stdout@@Base+0x27c4>
   13da8:	mov	r3, #7
   13dac:	mov	sl, #8
   13db0:	add	r8, pc, r8
   13db4:	b	13d48 <close_stdout@@Base+0x26e0>
   13db8:	ldr	r4, [pc, #112]	; 13e30 <close_stdout@@Base+0x27c8>
   13dbc:	mov	r0, r8
   13dc0:	add	r4, pc, r4
   13dc4:	bl	110dc <close@plt>
   13dc8:	b	13d20 <close_stdout@@Base+0x26b8>
   13dcc:	bl	10f08 <__stack_chk_fail@plt>
   13dd0:	mov	r0, r4
   13dd4:	ldr	r4, [pc, #88]	; 13e34 <close_stdout@@Base+0x27cc>
   13dd8:	bl	10ec0 <free@plt>
   13ddc:	mov	r0, fp
   13de0:	add	r4, pc, r4
   13de4:	bl	13e38 <close_stdout@@Base+0x27d0>
   13de8:	b	13d20 <close_stdout@@Base+0x26b8>
   13dec:	mov	r0, fp
   13df0:	bl	11088 <__uflow@plt>
   13df4:	b	13cf4 <close_stdout@@Base+0x268c>
   13df8:	ldrdeq	r1, [r1], -r4
   13dfc:	andeq	r0, r0, r0, ror #1
   13e00:	andeq	r1, r1, r4, asr r8
   13e04:	andeq	r0, r0, r4, asr lr
   13e08:	andeq	r0, r0, ip, ror r9
   13e0c:	andeq	r0, r0, ip, lsr #28
   13e10:	ldrdeq	r0, [r0], -r4
   13e14:			; <UNDEFINED> instruction: 0x00000db0
   13e18:	muleq	r0, r4, sp
   13e1c:	andeq	r1, r1, r4, ror r5
   13e20:	ldrdeq	r0, [r0], -ip
   13e24:	andeq	r0, r0, r4, lsl r7
   13e28:	ldrdeq	r0, [r0], -ip
   13e2c:	andeq	r0, r0, r0, ror fp
   13e30:			; <UNDEFINED> instruction: 0x000006b8
   13e34:	muleq	r0, r8, r6
   13e38:	push	{r4, r5, r6, lr}
   13e3c:	sub	sp, sp, #8
   13e40:	mov	r4, r0
   13e44:	bl	11058 <fileno@plt>
   13e48:	cmp	r0, #0
   13e4c:	mov	r0, r4
   13e50:	blt	13ecc <close_stdout@@Base+0x2864>
   13e54:	bl	10fbc <__freading@plt>
   13e58:	cmp	r0, #0
   13e5c:	bne	13e98 <close_stdout@@Base+0x2830>
   13e60:	mov	r0, r4
   13e64:	bl	13ed8 <close_stdout@@Base+0x2870>
   13e68:	cmp	r0, #0
   13e6c:	beq	13ec8 <close_stdout@@Base+0x2860>
   13e70:	bl	11010 <__errno_location@plt>
   13e74:	ldr	r6, [r0]
   13e78:	mov	r5, r0
   13e7c:	mov	r0, r4
   13e80:	bl	11070 <fclose@plt>
   13e84:	cmp	r6, #0
   13e88:	mvnne	r0, #0
   13e8c:	strne	r6, [r5]
   13e90:	add	sp, sp, #8
   13e94:	pop	{r4, r5, r6, pc}
   13e98:	mov	r0, r4
   13e9c:	bl	11058 <fileno@plt>
   13ea0:	mov	r1, #1
   13ea4:	mov	r2, #0
   13ea8:	mov	r3, #0
   13eac:	str	r1, [sp]
   13eb0:	bl	10f44 <lseek64@plt>
   13eb4:	mvn	r2, #0
   13eb8:	mvn	r3, #0
   13ebc:	cmp	r1, r3
   13ec0:	cmpeq	r0, r2
   13ec4:	bne	13e60 <close_stdout@@Base+0x27f8>
   13ec8:	mov	r0, r4
   13ecc:	add	sp, sp, #8
   13ed0:	pop	{r4, r5, r6, lr}
   13ed4:	b	11070 <fclose@plt>
   13ed8:	push	{r4, lr}
   13edc:	subs	r4, r0, #0
   13ee0:	sub	sp, sp, #8
   13ee4:	beq	13ef4 <close_stdout@@Base+0x288c>
   13ee8:	bl	10fbc <__freading@plt>
   13eec:	cmp	r0, #0
   13ef0:	bne	13f04 <close_stdout@@Base+0x289c>
   13ef4:	mov	r0, r4
   13ef8:	add	sp, sp, #8
   13efc:	pop	{r4, lr}
   13f00:	b	10eb4 <fflush@plt>
   13f04:	ldr	r3, [r4]
   13f08:	tst	r3, #256	; 0x100
   13f0c:	beq	13ef4 <close_stdout@@Base+0x288c>
   13f10:	mov	r3, #1
   13f14:	mov	r0, r4
   13f18:	str	r3, [sp]
   13f1c:	mov	r2, #0
   13f20:	mov	r3, #0
   13f24:	bl	13f38 <close_stdout@@Base+0x28d0>
   13f28:	mov	r0, r4
   13f2c:	add	sp, sp, #8
   13f30:	pop	{r4, lr}
   13f34:	b	10eb4 <fflush@plt>
   13f38:	push	{r4, r5, r6, r7, lr}
   13f3c:	sub	sp, sp, #20
   13f40:	ldmib	r0, {r1, ip}
   13f44:	mov	r6, r0
   13f48:	ldr	r4, [sp, #40]	; 0x28
   13f4c:	cmp	ip, r1
   13f50:	beq	13f68 <close_stdout@@Base+0x2900>
   13f54:	str	r4, [sp, #40]	; 0x28
   13f58:	mov	r0, r6
   13f5c:	add	sp, sp, #20
   13f60:	pop	{r4, r5, r6, r7, lr}
   13f64:	b	1107c <fseeko64@plt>
   13f68:	ldr	ip, [r0, #20]
   13f6c:	ldr	r1, [r0, #16]
   13f70:	cmp	ip, r1
   13f74:	bne	13f54 <close_stdout@@Base+0x28ec>
   13f78:	ldr	r7, [r0, #36]	; 0x24
   13f7c:	cmp	r7, #0
   13f80:	bne	13f54 <close_stdout@@Base+0x28ec>
   13f84:	str	r2, [sp, #12]
   13f88:	mvn	r5, #0
   13f8c:	str	r3, [sp, #8]
   13f90:	bl	11058 <fileno@plt>
   13f94:	str	r4, [sp]
   13f98:	mvn	r4, #0
   13f9c:	ldr	r2, [sp, #12]
   13fa0:	ldr	r3, [sp, #8]
   13fa4:	bl	10f44 <lseek64@plt>
   13fa8:	mov	r2, r0
   13fac:	mov	r3, r1
   13fb0:	cmp	r3, r5
   13fb4:	cmpeq	r2, r4
   13fb8:	beq	13fd8 <close_stdout@@Base+0x2970>
   13fbc:	ldr	r1, [r6]
   13fc0:	mov	r0, r7
   13fc4:	strd	r2, [r6, #80]	; 0x50
   13fc8:	bic	r3, r1, #16
   13fcc:	str	r3, [r6]
   13fd0:	add	sp, sp, #20
   13fd4:	pop	{r4, r5, r6, r7, pc}
   13fd8:	mvn	r0, #0
   13fdc:	b	13fd0 <close_stdout@@Base+0x2968>
   13fe0:	subs	r2, r1, #1
   13fe4:	bxeq	lr
   13fe8:	bcc	141c0 <close_stdout@@Base+0x2b58>
   13fec:	cmp	r0, r1
   13ff0:	bls	141a4 <close_stdout@@Base+0x2b3c>
   13ff4:	tst	r1, r2
   13ff8:	beq	141b0 <close_stdout@@Base+0x2b48>
   13ffc:	clz	r3, r0
   14000:	clz	r2, r1
   14004:	sub	r3, r2, r3
   14008:	rsbs	r3, r3, #31
   1400c:	addne	r3, r3, r3, lsl #1
   14010:	mov	r2, #0
   14014:	addne	pc, pc, r3, lsl #2
   14018:	nop	{0}
   1401c:	cmp	r0, r1, lsl #31
   14020:	adc	r2, r2, r2
   14024:	subcs	r0, r0, r1, lsl #31
   14028:	cmp	r0, r1, lsl #30
   1402c:	adc	r2, r2, r2
   14030:	subcs	r0, r0, r1, lsl #30
   14034:	cmp	r0, r1, lsl #29
   14038:	adc	r2, r2, r2
   1403c:	subcs	r0, r0, r1, lsl #29
   14040:	cmp	r0, r1, lsl #28
   14044:	adc	r2, r2, r2
   14048:	subcs	r0, r0, r1, lsl #28
   1404c:	cmp	r0, r1, lsl #27
   14050:	adc	r2, r2, r2
   14054:	subcs	r0, r0, r1, lsl #27
   14058:	cmp	r0, r1, lsl #26
   1405c:	adc	r2, r2, r2
   14060:	subcs	r0, r0, r1, lsl #26
   14064:	cmp	r0, r1, lsl #25
   14068:	adc	r2, r2, r2
   1406c:	subcs	r0, r0, r1, lsl #25
   14070:	cmp	r0, r1, lsl #24
   14074:	adc	r2, r2, r2
   14078:	subcs	r0, r0, r1, lsl #24
   1407c:	cmp	r0, r1, lsl #23
   14080:	adc	r2, r2, r2
   14084:	subcs	r0, r0, r1, lsl #23
   14088:	cmp	r0, r1, lsl #22
   1408c:	adc	r2, r2, r2
   14090:	subcs	r0, r0, r1, lsl #22
   14094:	cmp	r0, r1, lsl #21
   14098:	adc	r2, r2, r2
   1409c:	subcs	r0, r0, r1, lsl #21
   140a0:	cmp	r0, r1, lsl #20
   140a4:	adc	r2, r2, r2
   140a8:	subcs	r0, r0, r1, lsl #20
   140ac:	cmp	r0, r1, lsl #19
   140b0:	adc	r2, r2, r2
   140b4:	subcs	r0, r0, r1, lsl #19
   140b8:	cmp	r0, r1, lsl #18
   140bc:	adc	r2, r2, r2
   140c0:	subcs	r0, r0, r1, lsl #18
   140c4:	cmp	r0, r1, lsl #17
   140c8:	adc	r2, r2, r2
   140cc:	subcs	r0, r0, r1, lsl #17
   140d0:	cmp	r0, r1, lsl #16
   140d4:	adc	r2, r2, r2
   140d8:	subcs	r0, r0, r1, lsl #16
   140dc:	cmp	r0, r1, lsl #15
   140e0:	adc	r2, r2, r2
   140e4:	subcs	r0, r0, r1, lsl #15
   140e8:	cmp	r0, r1, lsl #14
   140ec:	adc	r2, r2, r2
   140f0:	subcs	r0, r0, r1, lsl #14
   140f4:	cmp	r0, r1, lsl #13
   140f8:	adc	r2, r2, r2
   140fc:	subcs	r0, r0, r1, lsl #13
   14100:	cmp	r0, r1, lsl #12
   14104:	adc	r2, r2, r2
   14108:	subcs	r0, r0, r1, lsl #12
   1410c:	cmp	r0, r1, lsl #11
   14110:	adc	r2, r2, r2
   14114:	subcs	r0, r0, r1, lsl #11
   14118:	cmp	r0, r1, lsl #10
   1411c:	adc	r2, r2, r2
   14120:	subcs	r0, r0, r1, lsl #10
   14124:	cmp	r0, r1, lsl #9
   14128:	adc	r2, r2, r2
   1412c:	subcs	r0, r0, r1, lsl #9
   14130:	cmp	r0, r1, lsl #8
   14134:	adc	r2, r2, r2
   14138:	subcs	r0, r0, r1, lsl #8
   1413c:	cmp	r0, r1, lsl #7
   14140:	adc	r2, r2, r2
   14144:	subcs	r0, r0, r1, lsl #7
   14148:	cmp	r0, r1, lsl #6
   1414c:	adc	r2, r2, r2
   14150:	subcs	r0, r0, r1, lsl #6
   14154:	cmp	r0, r1, lsl #5
   14158:	adc	r2, r2, r2
   1415c:	subcs	r0, r0, r1, lsl #5
   14160:	cmp	r0, r1, lsl #4
   14164:	adc	r2, r2, r2
   14168:	subcs	r0, r0, r1, lsl #4
   1416c:	cmp	r0, r1, lsl #3
   14170:	adc	r2, r2, r2
   14174:	subcs	r0, r0, r1, lsl #3
   14178:	cmp	r0, r1, lsl #2
   1417c:	adc	r2, r2, r2
   14180:	subcs	r0, r0, r1, lsl #2
   14184:	cmp	r0, r1, lsl #1
   14188:	adc	r2, r2, r2
   1418c:	subcs	r0, r0, r1, lsl #1
   14190:	cmp	r0, r1
   14194:	adc	r2, r2, r2
   14198:	subcs	r0, r0, r1
   1419c:	mov	r0, r2
   141a0:	bx	lr
   141a4:	moveq	r0, #1
   141a8:	movne	r0, #0
   141ac:	bx	lr
   141b0:	clz	r2, r1
   141b4:	rsb	r2, r2, #31
   141b8:	lsr	r0, r0, r2
   141bc:	bx	lr
   141c0:	cmp	r0, #0
   141c4:	mvnne	r0, #0
   141c8:	b	141ec <close_stdout@@Base+0x2b84>
   141cc:	cmp	r1, #0
   141d0:	beq	141c0 <close_stdout@@Base+0x2b58>
   141d4:	push	{r0, r1, lr}
   141d8:	bl	13fe0 <close_stdout@@Base+0x2978>
   141dc:	pop	{r1, r2, lr}
   141e0:	mul	r3, r2, r0
   141e4:	sub	r1, r1, r3
   141e8:	bx	lr
   141ec:	push	{r1, lr}
   141f0:	mov	r0, #8
   141f4:	bl	10e9c <raise@plt>
   141f8:	pop	{r1, pc}
   141fc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14200:	mov	r7, r0
   14204:	ldr	r6, [pc, #76]	; 14258 <close_stdout@@Base+0x2bf0>
   14208:	mov	r8, r1
   1420c:	ldr	r5, [pc, #72]	; 1425c <close_stdout@@Base+0x2bf4>
   14210:	mov	r9, r2
   14214:	add	r6, pc, r6
   14218:	bl	10e58 <fdopen@plt-0x20>
   1421c:	add	r5, pc, r5
   14220:	rsb	r6, r5, r6
   14224:	asrs	r6, r6, #2
   14228:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1422c:	sub	r5, r5, #4
   14230:	mov	r4, #0
   14234:	add	r4, r4, #1
   14238:	ldr	r3, [r5, #4]!
   1423c:	mov	r0, r7
   14240:	mov	r1, r8
   14244:	mov	r2, r9
   14248:	blx	r3
   1424c:	cmp	r4, r6
   14250:	bne	14234 <close_stdout@@Base+0x2bcc>
   14254:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14258:	muleq	r1, r0, ip
   1425c:	andeq	r0, r1, r4, lsl #25
   14260:	bx	lr
   14264:	ldr	r3, [pc, #28]	; 14288 <close_stdout@@Base+0x2c20>
   14268:	mov	r1, #0
   1426c:	ldr	r2, [pc, #24]	; 1428c <close_stdout@@Base+0x2c24>
   14270:	add	r3, pc, r3
   14274:	ldr	r3, [r3, r2]
   14278:	cmp	r3, #0
   1427c:	ldrne	r2, [r3]
   14280:	moveq	r2, r3
   14284:	b	1101c <__cxa_atexit@plt>
   14288:	andeq	r0, r1, r8, lsl #27
   1428c:	strdeq	r0, [r0], -r8

Disassembly of section .fini:

00014290 <.fini>:
   14290:	push	{r3, lr}
   14294:	pop	{r3, pc}
