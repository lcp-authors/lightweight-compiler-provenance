
centos-preinstalled/fdtoverlay:     file format elf32-littlearm


Disassembly of section .init:

00010904 <.init>:
   10904:	push	{r3, lr}
   10908:	bl	11000 <__assert_fail@plt+0x550>
   1090c:	pop	{r3, pc}

Disassembly of section .plt:

00010910 <strcmp@plt-0x14>:
   10910:	push	{lr}		; (str lr, [sp, #-4]!)
   10914:	ldr	lr, [pc, #4]	; 10920 <strcmp@plt-0x4>
   10918:	add	lr, pc, lr
   1091c:	ldr	pc, [lr, #8]!
   10920:	andeq	r5, r1, r0, ror #13

00010924 <strcmp@plt>:
   10924:	add	ip, pc, #0, 12
   10928:	add	ip, ip, #86016	; 0x15000
   1092c:	ldr	pc, [ip, #1760]!	; 0x6e0

00010930 <strtol@plt>:
   10930:	add	ip, pc, #0, 12
   10934:	add	ip, ip, #86016	; 0x15000
   10938:	ldr	pc, [ip, #1752]!	; 0x6d8

0001093c <printf@plt>:
   1093c:	add	ip, pc, #0, 12
   10940:	add	ip, ip, #86016	; 0x15000
   10944:	ldr	pc, [ip, #1744]!	; 0x6d0

00010948 <read@plt>:
   10948:	add	ip, pc, #0, 12
   1094c:	add	ip, ip, #86016	; 0x15000
   10950:	ldr	pc, [ip, #1736]!	; 0x6c8

00010954 <memmove@plt>:
   10954:	add	ip, pc, #0, 12
   10958:	add	ip, ip, #86016	; 0x15000
   1095c:	ldr	pc, [ip, #1728]!	; 0x6c0

00010960 <free@plt>:
   10960:	add	ip, pc, #0, 12
   10964:	add	ip, ip, #86016	; 0x15000
   10968:	ldr	pc, [ip, #1720]!	; 0x6b8

0001096c <memcpy@plt>:
   1096c:	add	ip, pc, #0, 12
   10970:	add	ip, ip, #86016	; 0x15000
   10974:	ldr	pc, [ip, #1712]!	; 0x6b0

00010978 <memcmp@plt>:
   10978:	add	ip, pc, #0, 12
   1097c:	add	ip, ip, #86016	; 0x15000
   10980:	ldr	pc, [ip, #1704]!	; 0x6a8

00010984 <realloc@plt>:
   10984:	add	ip, pc, #0, 12
   10988:	add	ip, ip, #86016	; 0x15000
   1098c:	ldr	pc, [ip, #1696]!	; 0x6a0

00010990 <malloc@plt>:
   10990:	add	ip, pc, #0, 12
   10994:	add	ip, ip, #86016	; 0x15000
   10998:	ldr	pc, [ip, #1688]!	; 0x698

0001099c <__libc_start_main@plt>:
   1099c:	add	ip, pc, #0, 12
   109a0:	add	ip, ip, #86016	; 0x15000
   109a4:	ldr	pc, [ip, #1680]!	; 0x690

000109a8 <strerror@plt>:
   109a8:	add	ip, pc, #0, 12
   109ac:	add	ip, ip, #86016	; 0x15000
   109b0:	ldr	pc, [ip, #1672]!	; 0x688

000109b4 <__gmon_start__@plt>:
   109b4:	add	ip, pc, #0, 12
   109b8:	add	ip, ip, #86016	; 0x15000
   109bc:	ldr	pc, [ip, #1664]!	; 0x680

000109c0 <open@plt>:
   109c0:	add	ip, pc, #0, 12
   109c4:	add	ip, ip, #86016	; 0x15000
   109c8:	ldr	pc, [ip, #1656]!	; 0x678

000109cc <getopt_long@plt>:
   109cc:	add	ip, pc, #0, 12
   109d0:	add	ip, ip, #86016	; 0x15000
   109d4:	ldr	pc, [ip, #1648]!	; 0x670

000109d8 <__ctype_b_loc@plt>:
   109d8:	add	ip, pc, #0, 12
   109dc:	add	ip, ip, #86016	; 0x15000
   109e0:	ldr	pc, [ip, #1640]!	; 0x668

000109e4 <exit@plt>:
   109e4:	add	ip, pc, #0, 12
   109e8:	add	ip, ip, #86016	; 0x15000
   109ec:	ldr	pc, [ip, #1632]!	; 0x660

000109f0 <strtoul@plt>:
   109f0:	add	ip, pc, #0, 12
   109f4:	add	ip, ip, #86016	; 0x15000
   109f8:	ldr	pc, [ip, #1624]!	; 0x658

000109fc <strlen@plt>:
   109fc:	add	ip, pc, #0, 12
   10a00:	add	ip, ip, #86016	; 0x15000
   10a04:	ldr	pc, [ip, #1616]!	; 0x650

00010a08 <strchr@plt>:
   10a08:	add	ip, pc, #0, 12
   10a0c:	add	ip, ip, #86016	; 0x15000
   10a10:	ldr	pc, [ip, #1608]!	; 0x648

00010a14 <fprintf@plt>:
   10a14:	add	ip, pc, #0, 12
   10a18:	add	ip, ip, #86016	; 0x15000
   10a1c:	ldr	pc, [ip, #1600]!	; 0x640

00010a20 <__errno_location@plt>:
   10a20:	add	ip, pc, #0, 12
   10a24:	add	ip, ip, #86016	; 0x15000
   10a28:	ldr	pc, [ip, #1592]!	; 0x638

00010a2c <memset@plt>:
   10a2c:	add	ip, pc, #0, 12
   10a30:	add	ip, ip, #86016	; 0x15000
   10a34:	ldr	pc, [ip, #1584]!	; 0x630

00010a38 <putchar@plt>:
   10a38:	add	ip, pc, #0, 12
   10a3c:	add	ip, ip, #86016	; 0x15000
   10a40:	ldr	pc, [ip, #1576]!	; 0x628

00010a44 <strncpy@plt>:
   10a44:	add	ip, pc, #0, 12
   10a48:	add	ip, ip, #86016	; 0x15000
   10a4c:	ldr	pc, [ip, #1568]!	; 0x620

00010a50 <write@plt>:
   10a50:	add	ip, pc, #0, 12
   10a54:	add	ip, ip, #86016	; 0x15000
   10a58:	ldr	pc, [ip, #1560]!	; 0x618

00010a5c <memchr@plt>:
   10a5c:	add	ip, pc, #0, 12
   10a60:	add	ip, ip, #86016	; 0x15000
   10a64:	ldr	pc, [ip, #1552]!	; 0x610

00010a68 <strnlen@plt>:
   10a68:	add	ip, pc, #0, 12
   10a6c:	add	ip, ip, #86016	; 0x15000
   10a70:	ldr	pc, [ip, #1544]!	; 0x608

00010a74 <vfprintf@plt>:
   10a74:	add	ip, pc, #0, 12
   10a78:	add	ip, ip, #86016	; 0x15000
   10a7c:	ldr	pc, [ip, #1536]!	; 0x600

00010a80 <vsnprintf@plt>:
   10a80:	add	ip, pc, #0, 12
   10a84:	add	ip, ip, #86016	; 0x15000
   10a88:	ldr	pc, [ip, #1528]!	; 0x5f8

00010a8c <fputs@plt>:
   10a8c:	add	ip, pc, #0, 12
   10a90:	add	ip, ip, #86016	; 0x15000
   10a94:	ldr	pc, [ip, #1520]!	; 0x5f0

00010a98 <abort@plt>:
   10a98:	add	ip, pc, #0, 12
   10a9c:	add	ip, ip, #86016	; 0x15000
   10aa0:	ldr	pc, [ip, #1512]!	; 0x5e8

00010aa4 <close@plt>:
   10aa4:	add	ip, pc, #0, 12
   10aa8:	add	ip, ip, #86016	; 0x15000
   10aac:	ldr	pc, [ip, #1504]!	; 0x5e0

00010ab0 <__assert_fail@plt>:
   10ab0:	add	ip, pc, #0, 12
   10ab4:	add	ip, ip, #86016	; 0x15000
   10ab8:	ldr	pc, [ip, #1496]!	; 0x5d8

Disassembly of section .text:

00010abc <.text>:
   10abc:	push	{r0, r1, r2, r3}
   10ac0:	ldr	r3, [pc, #64]	; 10b08 <__assert_fail@plt+0x58>
   10ac4:	push	{r0, r1, r2, lr}
   10ac8:	add	r2, sp, #20
   10acc:	str	r2, [sp, #4]
   10ad0:	add	r3, pc, r3
   10ad4:	ldr	r2, [pc, #48]	; 10b0c <__assert_fail@plt+0x5c>
   10ad8:	ldr	r0, [pc, #48]	; 10b10 <__assert_fail@plt+0x60>
   10adc:	ldr	r4, [r3, r2]
   10ae0:	add	r0, pc, r0
   10ae4:	ldr	r1, [r4]
   10ae8:	bl	10a8c <fputs@plt>
   10aec:	ldr	r1, [pc, #32]	; 10b14 <__assert_fail@plt+0x64>
   10af0:	ldr	r0, [r4]
   10af4:	add	r1, pc, r1
   10af8:	ldr	r2, [sp, #4]
   10afc:	bl	10a74 <vfprintf@plt>
   10b00:	mov	r0, #1
   10b04:	bl	109e4 <exit@plt>
   10b08:	andeq	r5, r1, r8, lsr #10
   10b0c:	muleq	r0, r8, r0
   10b10:	andeq	r4, r0, sp, lsr #32
   10b14:	andeq	r4, r0, r7, lsr #32
   10b18:	push	{r0, r1, r2, r3}
   10b1c:	ldr	r3, [pc, #60]	; 10b60 <__assert_fail@plt+0xb0>
   10b20:	push	{r0, r1, r2, lr}
   10b24:	add	r2, sp, #20
   10b28:	str	r2, [sp, #4]
   10b2c:	add	r3, pc, r3
   10b30:	ldr	r2, [pc, #44]	; 10b64 <__assert_fail@plt+0xb4>
   10b34:	ldr	r0, [pc, #44]	; 10b68 <__assert_fail@plt+0xb8>
   10b38:	ldr	r4, [r3, r2]
   10b3c:	add	r0, pc, r0
   10b40:	ldr	r1, [r4]
   10b44:	bl	10a8c <fputs@plt>
   10b48:	ldr	r0, [r4]
   10b4c:	ldr	r1, [sp, #16]
   10b50:	ldr	r2, [sp, #4]
   10b54:	bl	10a74 <vfprintf@plt>
   10b58:	mov	r0, #1
   10b5c:	bl	109e4 <exit@plt>
   10b60:	andeq	r5, r1, ip, asr #9
   10b64:	muleq	r0, r8, r0
   10b68:	ldrdeq	r3, [r0], -r1
   10b6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b70:	mov	r6, #0
   10b74:	ldr	sl, [pc, #1016]	; 10f74 <__assert_fail@plt+0x4c4>
   10b78:	sub	sp, sp, #44	; 0x2c
   10b7c:	ldr	r5, [pc, #1012]	; 10f78 <__assert_fail@plt+0x4c8>
   10b80:	mov	r7, r0
   10b84:	add	sl, pc, sl
   10b88:	ldr	r4, [pc, #1004]	; 10f7c <__assert_fail@plt+0x4cc>
   10b8c:	add	r8, sl, #213	; 0xd5
   10b90:	add	r5, pc, r5
   10b94:	mov	fp, r1
   10b98:	mov	r9, r6
   10b9c:	mov	ip, r6
   10ba0:	add	r4, pc, r4
   10ba4:	str	ip, [sp]
   10ba8:	mov	r0, r7
   10bac:	mov	r1, fp
   10bb0:	mov	r2, r8
   10bb4:	mov	r3, r5
   10bb8:	str	ip, [sp, #12]
   10bbc:	bl	109cc <getopt_long@plt>
   10bc0:	ldr	ip, [sp, #12]
   10bc4:	cmn	r0, #1
   10bc8:	beq	10c64 <__assert_fail@plt+0x1b4>
   10bcc:	cmp	r0, #104	; 0x68
   10bd0:	beq	10c10 <__assert_fail@plt+0x160>
   10bd4:	bgt	10bec <__assert_fail@plt+0x13c>
   10bd8:	cmp	r0, #63	; 0x3f
   10bdc:	beq	10c20 <__assert_fail@plt+0x170>
   10be0:	cmp	r0, #86	; 0x56
   10be4:	bne	10ba4 <__assert_fail@plt+0xf4>
   10be8:	bl	11984 <__assert_fail@plt+0xed4>
   10bec:	cmp	r0, #111	; 0x6f
   10bf0:	beq	10c40 <__assert_fail@plt+0x190>
   10bf4:	cmp	r0, #118	; 0x76
   10bf8:	beq	10c50 <__assert_fail@plt+0x1a0>
   10bfc:	cmp	r0, #105	; 0x69
   10c00:	ldreq	r3, [pc, #888]	; 10f80 <__assert_fail@plt+0x4d0>
   10c04:	ldreq	r3, [r4, r3]
   10c08:	ldreq	r9, [r3]
   10c0c:	b	10ba4 <__assert_fail@plt+0xf4>
   10c10:	add	r3, r5, #96	; 0x60
   10c14:	mov	r0, #0
   10c18:	str	r3, [sp]
   10c1c:	b	10c30 <__assert_fail@plt+0x180>
   10c20:	ldr	r0, [pc, #860]	; 10f84 <__assert_fail@plt+0x4d4>
   10c24:	add	r3, r5, #96	; 0x60
   10c28:	str	r3, [sp]
   10c2c:	add	r0, pc, r0
   10c30:	mov	r1, sl
   10c34:	mov	r2, r8
   10c38:	mov	r3, r5
   10c3c:	bl	119ac <__assert_fail@plt+0xefc>
   10c40:	ldr	r3, [pc, #824]	; 10f80 <__assert_fail@plt+0x4d0>
   10c44:	ldr	r3, [r4, r3]
   10c48:	ldr	r6, [r3]
   10c4c:	b	10ba4 <__assert_fail@plt+0xf4>
   10c50:	ldr	r3, [pc, #816]	; 10f88 <__assert_fail@plt+0x4d8>
   10c54:	mov	r2, #1
   10c58:	ldr	r3, [r4, r3]
   10c5c:	str	r2, [r3]
   10c60:	b	10ba4 <__assert_fail@plt+0xf4>
   10c64:	cmp	r9, #0
   10c68:	ldreq	r0, [pc, #796]	; 10f8c <__assert_fail@plt+0x4dc>
   10c6c:	addeq	r3, r5, #96	; 0x60
   10c70:	streq	r3, [sp]
   10c74:	addeq	r0, pc, r0
   10c78:	beq	10c30 <__assert_fail@plt+0x180>
   10c7c:	cmp	r6, #0
   10c80:	ldreq	r0, [pc, #776]	; 10f90 <__assert_fail@plt+0x4e0>
   10c84:	addeq	r3, r5, #96	; 0x60
   10c88:	streq	r3, [sp]
   10c8c:	addeq	r0, pc, r0
   10c90:	beq	10c30 <__assert_fail@plt+0x180>
   10c94:	ldr	r3, [pc, #760]	; 10f94 <__assert_fail@plt+0x4e4>
   10c98:	ldr	r3, [r4, r3]
   10c9c:	ldr	r3, [r3]
   10ca0:	rsb	r7, r3, r7
   10ca4:	cmp	r7, #0
   10ca8:	add	fp, fp, r3, lsl #2
   10cac:	ldrle	r0, [pc, #740]	; 10f98 <__assert_fail@plt+0x4e8>
   10cb0:	addle	r3, r5, #96	; 0x60
   10cb4:	strle	r3, [sp]
   10cb8:	addle	r0, pc, r0
   10cbc:	ble	10c30 <__assert_fail@plt+0x180>
   10cc0:	ldr	r3, [pc, #704]	; 10f88 <__assert_fail@plt+0x4d8>
   10cc4:	ldr	r3, [r4, r3]
   10cc8:	ldr	r3, [r3]
   10ccc:	cmp	r3, #0
   10cd0:	bne	10d08 <__assert_fail@plt+0x258>
   10cd4:	mov	r0, r9
   10cd8:	add	r1, sp, #24
   10cdc:	bl	11568 <__assert_fail@plt+0xab8>
   10ce0:	subs	r5, r0, #0
   10ce4:	bne	10d54 <__assert_fail@plt+0x2a4>
   10ce8:	ldr	r3, [pc, #684]	; 10f9c <__assert_fail@plt+0x4ec>
   10cec:	mov	r2, r9
   10cf0:	ldr	r1, [pc, #680]	; 10fa0 <__assert_fail@plt+0x4f0>
   10cf4:	ldr	r3, [r4, r3]
   10cf8:	add	r1, pc, r1
   10cfc:	ldr	r0, [r3]
   10d00:	bl	10a14 <fprintf@plt>
   10d04:	b	10f6c <__assert_fail@plt+0x4bc>
   10d08:	ldr	r0, [pc, #660]	; 10fa4 <__assert_fail@plt+0x4f4>
   10d0c:	mov	r1, r9
   10d10:	ldr	r8, [pc, #656]	; 10fa8 <__assert_fail@plt+0x4f8>
   10d14:	mov	r5, #0
   10d18:	add	r0, pc, r0
   10d1c:	bl	1093c <printf@plt>
   10d20:	ldr	r0, [pc, #644]	; 10fac <__assert_fail@plt+0x4fc>
   10d24:	mov	r1, r6
   10d28:	add	r8, pc, r8
   10d2c:	add	r0, pc, r0
   10d30:	bl	1093c <printf@plt>
   10d34:	mov	r1, r5
   10d38:	ldr	r2, [fp, r5, lsl #2]
   10d3c:	mov	r0, r8
   10d40:	add	r5, r5, #1
   10d44:	bl	1093c <printf@plt>
   10d48:	cmp	r5, r7
   10d4c:	bne	10d34 <__assert_fail@plt+0x284>
   10d50:	b	10cd4 <__assert_fail@plt+0x224>
   10d54:	ldr	r2, [r5, #4]
   10d58:	ubfx	r3, r2, #8, #8
   10d5c:	str	r2, [sp, #32]
   10d60:	lsl	r3, r3, #16
   10d64:	orr	r3, r3, r2, lsl #24
   10d68:	orr	r3, r3, r2, lsr #24
   10d6c:	ubfx	r2, r2, #16, #8
   10d70:	orr	r3, r3, r2, lsl #8
   10d74:	ldr	r2, [sp, #24]
   10d78:	cmp	r3, r2
   10d7c:	bls	10d9c <__assert_fail@plt+0x2ec>
   10d80:	ldr	r1, [pc, #532]	; 10f9c <__assert_fail@plt+0x4ec>
   10d84:	ldr	r1, [r4, r1]
   10d88:	ldr	r0, [r1]
   10d8c:	ldr	r1, [pc, #540]	; 10fb0 <__assert_fail@plt+0x500>
   10d90:	add	r1, pc, r1
   10d94:	bl	10a14 <fprintf@plt>
   10d98:	b	10f6c <__assert_fail@plt+0x4bc>
   10d9c:	lsl	r9, r7, #2
   10da0:	mov	r0, r9
   10da4:	bl	10990 <malloc@plt>
   10da8:	mov	r2, r9
   10dac:	mov	r1, #0
   10db0:	mov	r9, #0
   10db4:	mov	sl, r9
   10db8:	mov	r8, r0
   10dbc:	bl	10a2c <memset@plt>
   10dc0:	mov	r2, fp
   10dc4:	add	r3, sp, #28
   10dc8:	str	r3, [sp, #20]
   10dcc:	mov	ip, r2
   10dd0:	add	r1, sp, #28
   10dd4:	ldr	r0, [ip]
   10dd8:	add	r2, r2, #4
   10ddc:	str	ip, [sp, #12]
   10de0:	str	r2, [sp, #16]
   10de4:	bl	11568 <__assert_fail@plt+0xab8>
   10de8:	ldr	r2, [sp, #16]
   10dec:	ldr	ip, [sp, #12]
   10df0:	cmp	r0, #0
   10df4:	mov	r3, r0
   10df8:	str	r0, [r8, sl, lsl #2]
   10dfc:	bne	10e2c <__assert_fail@plt+0x37c>
   10e00:	ldr	r2, [pc, #404]	; 10f9c <__assert_fail@plt+0x4ec>
   10e04:	ldr	r1, [pc, #424]	; 10fb4 <__assert_fail@plt+0x504>
   10e08:	ldr	r2, [r4, r2]
   10e0c:	add	r1, pc, r1
   10e10:	ldr	r0, [r2]
   10e14:	ldr	r2, [ip]
   10e18:	str	r3, [sp, #16]
   10e1c:	bl	10a14 <fprintf@plt>
   10e20:	ldr	r3, [sp, #16]
   10e24:	mov	r9, r3
   10e28:	b	10f24 <__assert_fail@plt+0x474>
   10e2c:	add	sl, sl, #1
   10e30:	ldr	r3, [sp, #28]
   10e34:	cmp	sl, r7
   10e38:	add	r9, r9, r3
   10e3c:	bne	10dcc <__assert_fail@plt+0x31c>
   10e40:	ldr	r3, [r5, #4]
   10e44:	mov	r0, r5
   10e48:	ubfx	r2, r3, #8, #8
   10e4c:	str	r3, [sp, #36]	; 0x24
   10e50:	lsl	r2, r2, #16
   10e54:	orr	r2, r2, r3, lsl #24
   10e58:	orr	r2, r2, r3, lsr #24
   10e5c:	ubfx	r3, r3, #16, #8
   10e60:	orr	r3, r2, r3, lsl #8
   10e64:	add	r9, r9, r3
   10e68:	str	r9, [sp, #24]
   10e6c:	mov	r1, r9
   10e70:	bl	10984 <realloc@plt>
   10e74:	subs	r5, r0, #0
   10e78:	bne	10e8c <__assert_fail@plt+0x3dc>
   10e7c:	ldr	r0, [pc, #308]	; 10fb8 <__assert_fail@plt+0x508>
   10e80:	mov	r1, r9
   10e84:	add	r0, pc, r0
   10e88:	bl	10abc <__assert_fail@plt+0xc>
   10e8c:	mov	r1, r5
   10e90:	ldr	r2, [sp, #24]
   10e94:	bl	12688 <__assert_fail@plt+0x1bd8>
   10e98:	mov	sl, #0
   10e9c:	ldr	r1, [r8, sl, lsl #2]
   10ea0:	mov	r0, r5
   10ea4:	lsl	r3, sl, #2
   10ea8:	str	r3, [sp, #16]
   10eac:	bl	12e28 <__assert_fail@plt+0x2378>
   10eb0:	ldr	r3, [sp, #16]
   10eb4:	subs	r9, r0, #0
   10eb8:	beq	10ee0 <__assert_fail@plt+0x430>
   10ebc:	ldr	r2, [pc, #216]	; 10f9c <__assert_fail@plt+0x4ec>
   10ec0:	ldr	r1, [pc, #244]	; 10fbc <__assert_fail@plt+0x50c>
   10ec4:	ldr	r2, [r4, r2]
   10ec8:	add	r1, pc, r1
   10ecc:	ldr	r0, [r2]
   10ed0:	ldr	r2, [fp, r3]
   10ed4:	mov	r3, r9
   10ed8:	bl	10a14 <fprintf@plt>
   10edc:	b	10f24 <__assert_fail@plt+0x474>
   10ee0:	add	sl, sl, #1
   10ee4:	cmp	sl, r7
   10ee8:	bne	10e9c <__assert_fail@plt+0x3ec>
   10eec:	mov	r0, r5
   10ef0:	bl	1283c <__assert_fail@plt+0x1d8c>
   10ef4:	mov	r0, r6
   10ef8:	mov	r1, r5
   10efc:	bl	116b4 <__assert_fail@plt+0xc04>
   10f00:	subs	r9, r0, #0
   10f04:	beq	10f24 <__assert_fail@plt+0x474>
   10f08:	ldr	r3, [pc, #140]	; 10f9c <__assert_fail@plt+0x4ec>
   10f0c:	mov	r2, r6
   10f10:	ldr	r1, [pc, #168]	; 10fc0 <__assert_fail@plt+0x510>
   10f14:	ldr	r3, [r4, r3]
   10f18:	add	r1, pc, r1
   10f1c:	ldr	r0, [r3]
   10f20:	bl	10a14 <fprintf@plt>
   10f24:	cmp	r8, #0
   10f28:	beq	10f54 <__assert_fail@plt+0x4a4>
   10f2c:	mov	r4, #0
   10f30:	ldr	r0, [r8, r4, lsl #2]
   10f34:	cmp	r0, #0
   10f38:	beq	10f40 <__assert_fail@plt+0x490>
   10f3c:	bl	10960 <free@plt>
   10f40:	add	r4, r4, #1
   10f44:	cmp	r4, r7
   10f48:	bne	10f30 <__assert_fail@plt+0x480>
   10f4c:	mov	r0, r8
   10f50:	bl	10960 <free@plt>
   10f54:	mov	r0, r5
   10f58:	bl	10960 <free@plt>
   10f5c:	adds	r0, r9, #0
   10f60:	movne	r0, #1
   10f64:	add	sp, sp, #44	; 0x2c
   10f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   10f6c:	mvn	r9, #0
   10f70:	b	10f54 <__assert_fail@plt+0x4a4>
   10f74:	andeq	r3, r0, ip, lsr #29
   10f78:	andeq	r5, r1, r0, lsl #6
   10f7c:	andeq	r5, r1, r8, asr r4
   10f80:	andeq	r0, r0, r8, lsr #1
   10f84:	andeq	r3, r0, fp, lsl #30
   10f88:	andeq	r0, r0, r4, lsr #1
   10f8c:	ldrdeq	r3, [r0], -r2
   10f90:	andeq	r3, r0, sp, asr #29
   10f94:	muleq	r0, r4, r0
   10f98:			; <UNDEFINED> instruction: 0x00003eb5
   10f9c:	muleq	r0, r8, r0
   10fa0:			; <UNDEFINED> instruction: 0x00003eb9
   10fa4:	andeq	r3, r0, sp, ror #28
   10fa8:	andeq	r3, r0, r7, ror lr
   10fac:	andeq	r3, r0, r6, ror #28
   10fb0:	andeq	r3, r0, pc, lsr lr
   10fb4:	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   10fb8:	muleq	r0, r7, ip
   10fbc:	andeq	r3, r0, r3, asr sp
   10fc0:	andeq	r3, r0, sp, lsl sp
   10fc4:	mov	fp, #0
   10fc8:	mov	lr, #0
   10fcc:	pop	{r1}		; (ldr r1, [sp], #4)
   10fd0:	mov	r2, sp
   10fd4:	push	{r2}		; (str r2, [sp, #-4]!)
   10fd8:	push	{r0}		; (str r0, [sp, #-4]!)
   10fdc:	ldr	ip, [pc, #16]	; 10ff4 <__assert_fail@plt+0x544>
   10fe0:	push	{ip}		; (str ip, [sp, #-4]!)
   10fe4:	ldr	r0, [pc, #12]	; 10ff8 <__assert_fail@plt+0x548>
   10fe8:	ldr	r3, [pc, #12]	; 10ffc <__assert_fail@plt+0x54c>
   10fec:	bl	1099c <__libc_start_main@plt>
   10ff0:	bl	10a98 <abort@plt>
   10ff4:	andeq	r4, r1, r4, lsr #20
   10ff8:	andeq	r0, r1, ip, ror #22
   10ffc:	andeq	r4, r1, r0, asr #19
   11000:	ldr	r3, [pc, #20]	; 1101c <__assert_fail@plt+0x56c>
   11004:	ldr	r2, [pc, #20]	; 11020 <__assert_fail@plt+0x570>
   11008:	add	r3, pc, r3
   1100c:	ldr	r2, [r3, r2]
   11010:	cmp	r2, #0
   11014:	bxeq	lr
   11018:	b	109b4 <__gmon_start__@plt>
   1101c:	strdeq	r4, [r1], -r0
   11020:	muleq	r0, ip, r0
   11024:	push	{r3, lr}
   11028:	movw	r0, #24752	; 0x60b0
   1102c:	ldr	r3, [pc, #36]	; 11058 <__assert_fail@plt+0x5a8>
   11030:	movt	r0, #2
   11034:	rsb	r3, r0, r3
   11038:	cmp	r3, #6
   1103c:	popls	{r3, pc}
   11040:	movw	r3, #0
   11044:	movt	r3, #0
   11048:	cmp	r3, #0
   1104c:	popeq	{r3, pc}
   11050:	blx	r3
   11054:	pop	{r3, pc}
   11058:	strheq	r6, [r2], -r3
   1105c:	push	{r3, lr}
   11060:	movw	r0, #24752	; 0x60b0
   11064:	movw	r3, #24752	; 0x60b0
   11068:	movt	r0, #2
   1106c:	movt	r3, #2
   11070:	rsb	r3, r0, r3
   11074:	asr	r3, r3, #2
   11078:	add	r3, r3, r3, lsr #31
   1107c:	asrs	r1, r3, #1
   11080:	popeq	{r3, pc}
   11084:	movw	r2, #0
   11088:	movt	r2, #0
   1108c:	cmp	r2, #0
   11090:	popeq	{r3, pc}
   11094:	blx	r2
   11098:	pop	{r3, pc}
   1109c:	push	{r4, lr}
   110a0:	movw	r4, #24752	; 0x60b0
   110a4:	movt	r4, #2
   110a8:	ldrb	r3, [r4]
   110ac:	cmp	r3, #0
   110b0:	popne	{r4, pc}
   110b4:	bl	11024 <__assert_fail@plt+0x574>
   110b8:	mov	r3, #1
   110bc:	strb	r3, [r4]
   110c0:	pop	{r4, pc}
   110c4:	movw	r0, #24212	; 0x5e94
   110c8:	movt	r0, #2
   110cc:	push	{r3, lr}
   110d0:	ldr	r3, [r0]
   110d4:	cmp	r3, #0
   110d8:	beq	110f0 <__assert_fail@plt+0x640>
   110dc:	movw	r3, #0
   110e0:	movt	r3, #0
   110e4:	cmp	r3, #0
   110e8:	beq	110f0 <__assert_fail@plt+0x640>
   110ec:	blx	r3
   110f0:	pop	{r3, lr}
   110f4:	b	1105c <__assert_fail@plt+0x5ac>
   110f8:	push	{r3, lr}
   110fc:	bl	10990 <malloc@plt>
   11100:	cmp	r0, #0
   11104:	popne	{r3, pc}
   11108:	ldr	r0, [pc, #4]	; 11114 <__assert_fail@plt+0x664>
   1110c:	add	r0, pc, r0
   11110:	bl	10b18 <__assert_fail@plt+0x68>
   11114:	andeq	r3, r0, r7, ror #23
   11118:	push	{r3, r4, r5, lr}
   1111c:	mov	r5, r0
   11120:	bl	109fc <strlen@plt>
   11124:	add	r4, r0, #1
   11128:	mov	r0, r4
   1112c:	bl	110f8 <__assert_fail@plt+0x648>
   11130:	mov	r1, r5
   11134:	mov	r2, r4
   11138:	bl	1096c <memcpy@plt>
   1113c:	pop	{r3, r4, r5, pc}
   11140:	push	{r1, r2, r3}
   11144:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   11148:	add	r6, sp, #40	; 0x28
   1114c:	ldr	r8, [sp, #36]	; 0x24
   11150:	mov	r7, r0
   11154:	mov	r5, #0
   11158:	mov	r4, #128	; 0x80
   1115c:	mov	r0, r5
   11160:	mov	r1, r4
   11164:	bl	10984 <realloc@plt>
   11168:	subs	r5, r0, #0
   1116c:	bne	11180 <__assert_fail@plt+0x6d0>
   11170:	ldr	r0, [pc, #100]	; 111dc <__assert_fail@plt+0x72c>
   11174:	mov	r1, r4
   11178:	add	r0, pc, r0
   1117c:	bl	10b18 <__assert_fail@plt+0x68>
   11180:	mov	r2, r8
   11184:	mov	r3, r6
   11188:	mov	r1, r4
   1118c:	str	r6, [sp, #4]
   11190:	bl	10a80 <vsnprintf@plt>
   11194:	mvn	r3, r0
   11198:	lsr	r3, r3, #31
   1119c:	cmp	r0, r4
   111a0:	movge	r2, #0
   111a4:	andlt	r2, r3, #1
   111a8:	cmp	r2, #0
   111ac:	bne	111c0 <__assert_fail@plt+0x710>
   111b0:	cmp	r3, #0
   111b4:	addne	r4, r0, #1
   111b8:	lsleq	r4, r4, #1
   111bc:	b	1115c <__assert_fail@plt+0x6ac>
   111c0:	str	r5, [r7]
   111c4:	mov	r0, r5
   111c8:	bl	109fc <strlen@plt>
   111cc:	add	sp, sp, #12
   111d0:	pop	{r4, r5, r6, r7, r8, lr}
   111d4:	add	sp, sp, #12
   111d8:	bx	lr
   111dc:	andeq	r3, r0, r3, lsr #19
   111e0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   111e4:	mov	r7, r1
   111e8:	mov	r9, r0
   111ec:	bl	109fc <strlen@plt>
   111f0:	mov	r4, r0
   111f4:	mov	r8, r0
   111f8:	mov	r0, r7
   111fc:	bl	109fc <strlen@plt>
   11200:	cmp	r4, #0
   11204:	add	r3, r4, r0
   11208:	mov	sl, r0
   1120c:	add	r0, r3, #2
   11210:	ble	1122c <__assert_fail@plt+0x77c>
   11214:	add	r2, r9, r4
   11218:	ldrb	r2, [r2, #-1]
   1121c:	cmp	r2, #47	; 0x2f
   11220:	addeq	r0, r3, #1
   11224:	moveq	r6, #0
   11228:	beq	11230 <__assert_fail@plt+0x780>
   1122c:	mov	r6, #1
   11230:	bl	110f8 <__assert_fail@plt+0x648>
   11234:	mov	r1, r9
   11238:	mov	r2, r4
   1123c:	mov	r5, r0
   11240:	bl	1096c <memcpy@plt>
   11244:	cmp	r6, #0
   11248:	mov	r1, r7
   1124c:	addne	r8, r4, #1
   11250:	add	r2, sl, #1
   11254:	movne	r3, #47	; 0x2f
   11258:	add	r0, r5, r8
   1125c:	strbne	r3, [r5, r4]
   11260:	bl	1096c <memcpy@plt>
   11264:	mov	r0, r5
   11268:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1126c:	cmp	r1, #0
   11270:	push	{r4, r5, r6, r7, r8, lr}
   11274:	mov	r4, r0
   11278:	beq	112e8 <__assert_fail@plt+0x838>
   1127c:	add	r7, r0, r1
   11280:	ldrb	r3, [r7, #-1]
   11284:	cmp	r3, #0
   11288:	bne	112e8 <__assert_fail@plt+0x838>
   1128c:	cmp	r4, r7
   11290:	bcs	112f0 <__assert_fail@plt+0x840>
   11294:	mov	r5, r4
   11298:	mov	r6, r5
   1129c:	ldrb	r8, [r5], #1
   112a0:	cmp	r8, #0
   112a4:	beq	112cc <__assert_fail@plt+0x81c>
   112a8:	bl	109d8 <__ctype_b_loc@plt>
   112ac:	lsl	r8, r8, #1
   112b0:	ldr	r3, [r0]
   112b4:	ldrh	r3, [r3, r8]
   112b8:	tst	r3, #16384	; 0x4000
   112bc:	beq	112cc <__assert_fail@plt+0x81c>
   112c0:	cmp	r5, r7
   112c4:	mov	r6, r5
   112c8:	bne	11298 <__assert_fail@plt+0x7e8>
   112cc:	ldrb	r0, [r6]
   112d0:	cmp	r0, #0
   112d4:	bne	112e8 <__assert_fail@plt+0x838>
   112d8:	cmp	r6, r4
   112dc:	popeq	{r4, r5, r6, r7, r8, pc}
   112e0:	add	r4, r6, #1
   112e4:	b	1128c <__assert_fail@plt+0x7dc>
   112e8:	mov	r0, #0
   112ec:	pop	{r4, r5, r6, r7, r8, pc}
   112f0:	mov	r0, #1
   112f4:	pop	{r4, r5, r6, r7, r8, pc}
   112f8:	push	{r0, r1, r4, r5, r6, lr}
   112fc:	mov	r3, r0
   11300:	ldr	r5, [r1]
   11304:	mov	r6, r1
   11308:	add	r1, r0, r5
   1130c:	add	r4, r5, #1
   11310:	ldrb	r0, [r0, r5]
   11314:	cmp	r0, #102	; 0x66
   11318:	beq	11398 <__assert_fail@plt+0x8e8>
   1131c:	bhi	11348 <__assert_fail@plt+0x898>
   11320:	cmp	r0, #97	; 0x61
   11324:	beq	11380 <__assert_fail@plt+0x8d0>
   11328:	bhi	1133c <__assert_fail@plt+0x88c>
   1132c:	sub	r3, r0, #48	; 0x30
   11330:	cmp	r3, #7
   11334:	bls	113a0 <__assert_fail@plt+0x8f0>
   11338:	b	11448 <__assert_fail@plt+0x998>
   1133c:	cmp	r0, #98	; 0x62
   11340:	moveq	r0, #8
   11344:	b	11448 <__assert_fail@plt+0x998>
   11348:	cmp	r0, #116	; 0x74
   1134c:	beq	11388 <__assert_fail@plt+0x8d8>
   11350:	bhi	1136c <__assert_fail@plt+0x8bc>
   11354:	cmp	r0, #110	; 0x6e
   11358:	moveq	r0, #10
   1135c:	beq	11448 <__assert_fail@plt+0x998>
   11360:	cmp	r0, #114	; 0x72
   11364:	moveq	r0, #13
   11368:	b	11448 <__assert_fail@plt+0x998>
   1136c:	cmp	r0, #118	; 0x76
   11370:	beq	11390 <__assert_fail@plt+0x8e0>
   11374:	cmp	r0, #120	; 0x78
   11378:	beq	113f8 <__assert_fail@plt+0x948>
   1137c:	b	11448 <__assert_fail@plt+0x998>
   11380:	mov	r0, #7
   11384:	b	11448 <__assert_fail@plt+0x998>
   11388:	mov	r0, #9
   1138c:	b	11448 <__assert_fail@plt+0x998>
   11390:	mov	r0, #11
   11394:	b	11448 <__assert_fail@plt+0x998>
   11398:	mov	r0, #12
   1139c:	b	11448 <__assert_fail@plt+0x998>
   113a0:	mov	r2, #3
   113a4:	mov	r0, sp
   113a8:	mov	r3, #0
   113ac:	strb	r3, [sp, #3]
   113b0:	bl	10a44 <strncpy@plt>
   113b4:	mov	r0, sp
   113b8:	add	r1, sp, #4
   113bc:	mov	r2, #8
   113c0:	bl	10930 <strtol@plt>
   113c4:	ldr	r3, [sp, #4]
   113c8:	mov	r4, sp
   113cc:	cmp	r3, r4
   113d0:	rsbhi	r4, r4, r3
   113d4:	bhi	11440 <__assert_fail@plt+0x990>
   113d8:	ldr	r0, [pc, #116]	; 11454 <__assert_fail@plt+0x9a4>
   113dc:	mov	r2, #150	; 0x96
   113e0:	ldr	r1, [pc, #112]	; 11458 <__assert_fail@plt+0x9a8>
   113e4:	ldr	r3, [pc, #112]	; 1145c <__assert_fail@plt+0x9ac>
   113e8:	add	r0, pc, r0
   113ec:	add	r1, pc, r1
   113f0:	add	r3, pc, r3
   113f4:	bl	10ab0 <__assert_fail@plt>
   113f8:	add	r1, r3, r4
   113fc:	mov	r2, #0
   11400:	mov	r0, sp
   11404:	strb	r2, [sp, #2]
   11408:	mov	r2, #2
   1140c:	mov	r5, sp
   11410:	bl	10a44 <strncpy@plt>
   11414:	mov	r0, sp
   11418:	add	r1, sp, #4
   1141c:	mov	r2, #16
   11420:	bl	10930 <strtol@plt>
   11424:	ldr	r3, [sp, #4]
   11428:	cmp	r3, r5
   1142c:	rsbhi	r5, r5, r3
   11430:	bhi	11440 <__assert_fail@plt+0x990>
   11434:	ldr	r0, [pc, #36]	; 11460 <__assert_fail@plt+0x9b0>
   11438:	add	r0, pc, r0
   1143c:	bl	10b18 <__assert_fail@plt+0x68>
   11440:	add	r4, r4, r5
   11444:	uxtb	r0, r0
   11448:	str	r4, [r6]
   1144c:	add	sp, sp, #8
   11450:	pop	{r4, r5, r6, pc}
   11454:	andeq	r3, r0, ip, lsl r9
   11458:	andeq	r3, r0, r1, lsr #18
   1145c:	andeq	r3, r0, fp, ror #17
   11460:	ldrdeq	r3, [r0], -ip
   11464:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11468:	mov	r9, r1
   1146c:	mov	r4, #0
   11470:	str	r4, [r1]
   11474:	ldr	r1, [pc, #208]	; 1154c <__assert_fail@plt+0xa9c>
   11478:	mov	r5, r0
   1147c:	mov	sl, r2
   11480:	add	r1, pc, r1
   11484:	bl	10924 <strcmp@plt>
   11488:	cmp	r0, #0
   1148c:	beq	114b0 <__assert_fail@plt+0xa00>
   11490:	mov	r0, r5
   11494:	mov	r1, r4
   11498:	bl	109c0 <open@plt>
   1149c:	subs	r8, r0, #0
   114a0:	bge	114b4 <__assert_fail@plt+0xa04>
   114a4:	bl	10a20 <__errno_location@plt>
   114a8:	ldr	r0, [r0]
   114ac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   114b0:	mov	r8, r0
   114b4:	mov	r0, #1024	; 0x400
   114b8:	mov	r5, #0
   114bc:	bl	110f8 <__assert_fail@plt+0x648>
   114c0:	mov	r4, #1024	; 0x400
   114c4:	mov	r6, r0
   114c8:	mov	r0, r8
   114cc:	add	r1, r6, r5
   114d0:	rsb	r2, r5, r4
   114d4:	bl	10948 <read@plt>
   114d8:	subs	r7, r0, #0
   114dc:	bge	114ec <__assert_fail@plt+0xa3c>
   114e0:	bl	10a20 <__errno_location@plt>
   114e4:	ldr	r7, [r0]
   114e8:	b	11524 <__assert_fail@plt+0xa74>
   114ec:	add	r5, r5, r7
   114f0:	beq	11524 <__assert_fail@plt+0xa74>
   114f4:	cmp	r5, r4
   114f8:	bne	114c8 <__assert_fail@plt+0xa18>
   114fc:	lsl	r4, r5, #1
   11500:	mov	r0, r6
   11504:	mov	r1, r4
   11508:	bl	10984 <realloc@plt>
   1150c:	subs	r6, r0, #0
   11510:	bne	114c8 <__assert_fail@plt+0xa18>
   11514:	ldr	r0, [pc, #52]	; 11550 <__assert_fail@plt+0xaa0>
   11518:	mov	r1, r4
   1151c:	add	r0, pc, r0
   11520:	bl	10b18 <__assert_fail@plt+0x68>
   11524:	mov	r0, r8
   11528:	bl	10aa4 <close@plt>
   1152c:	cmp	r7, #0
   11530:	streq	r6, [r9]
   11534:	beq	11540 <__assert_fail@plt+0xa90>
   11538:	mov	r0, r6
   1153c:	bl	10960 <free@plt>
   11540:	str	r4, [sl]
   11544:	mov	r0, r7
   11548:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1154c:			; <UNDEFINED> instruction: 0x000038ba
   11550:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   11554:	push	{r0, r1, r2, lr}
   11558:	add	r2, sp, #4
   1155c:	bl	11464 <__assert_fail@plt+0x9b4>
   11560:	add	sp, sp, #12
   11564:	pop	{pc}		; (ldr pc, [sp], #4)
   11568:	push	{r0, r1, r2, r4, r5, lr}
   1156c:	mov	r2, r1
   11570:	add	r1, sp, #4
   11574:	mov	r5, r0
   11578:	bl	11464 <__assert_fail@plt+0x9b4>
   1157c:	ldr	r4, [pc, #64]	; 115c4 <__assert_fail@plt+0xb14>
   11580:	add	r4, pc, r4
   11584:	cmp	r0, #0
   11588:	ldreq	r0, [sp, #4]
   1158c:	beq	115bc <__assert_fail@plt+0xb0c>
   11590:	ldr	r3, [pc, #48]	; 115c8 <__assert_fail@plt+0xb18>
   11594:	ldr	r3, [r4, r3]
   11598:	ldr	r4, [r3]
   1159c:	bl	109a8 <strerror@plt>
   115a0:	ldr	r1, [pc, #36]	; 115cc <__assert_fail@plt+0xb1c>
   115a4:	mov	r2, r5
   115a8:	add	r1, pc, r1
   115ac:	mov	r3, r0
   115b0:	mov	r0, r4
   115b4:	bl	10a14 <fprintf@plt>
   115b8:	mov	r0, #0
   115bc:	add	sp, sp, #12
   115c0:	pop	{r4, r5, pc}
   115c4:	andeq	r4, r1, r8, ror sl
   115c8:	muleq	r0, r8, r0
   115cc:	muleq	r0, r4, r7
   115d0:	push	{r0, r1, r2, lr}
   115d4:	add	r1, sp, #4
   115d8:	bl	11568 <__assert_fail@plt+0xab8>
   115dc:	add	sp, sp, #12
   115e0:	pop	{pc}		; (ldr pc, [sp], #4)
   115e4:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   115e8:	mov	r7, r1
   115ec:	ldr	r1, [pc, #188]	; 116b0 <__assert_fail@plt+0xc00>
   115f0:	mov	r4, r0
   115f4:	add	r1, pc, r1
   115f8:	bl	10924 <strcmp@plt>
   115fc:	cmp	r0, #0
   11600:	moveq	r6, #1
   11604:	beq	1162c <__assert_fail@plt+0xb7c>
   11608:	mov	r0, r4
   1160c:	movw	r1, #577	; 0x241
   11610:	movw	r2, #438	; 0x1b6
   11614:	bl	109c0 <open@plt>
   11618:	subs	r6, r0, #0
   1161c:	bge	1162c <__assert_fail@plt+0xb7c>
   11620:	bl	10a20 <__errno_location@plt>
   11624:	ldr	r0, [r0]
   11628:	b	116a8 <__assert_fail@plt+0xbf8>
   1162c:	ldr	r3, [r7, #4]
   11630:	mov	r4, #0
   11634:	mov	r5, r4
   11638:	ubfx	r8, r3, #8, #8
   1163c:	str	r3, [sp, #4]
   11640:	lsl	r8, r8, #16
   11644:	orr	r8, r8, r3, lsl #24
   11648:	orr	r8, r8, r3, lsr #24
   1164c:	ubfx	r3, r3, #16, #8
   11650:	orr	r8, r8, r3, lsl #8
   11654:	cmp	r5, r8
   11658:	bge	1168c <__assert_fail@plt+0xbdc>
   1165c:	mov	r0, r6
   11660:	add	r1, r7, r5
   11664:	rsb	r2, r5, r8
   11668:	bl	10a50 <write@plt>
   1166c:	subs	r4, r0, #0
   11670:	bge	11684 <__assert_fail@plt+0xbd4>
   11674:	bl	10a20 <__errno_location@plt>
   11678:	ldr	r4, [r0]
   1167c:	rsb	r4, r4, #0
   11680:	b	1168c <__assert_fail@plt+0xbdc>
   11684:	add	r5, r5, r4
   11688:	b	11654 <__assert_fail@plt+0xba4>
   1168c:	cmp	r6, #1
   11690:	beq	1169c <__assert_fail@plt+0xbec>
   11694:	mov	r0, r6
   11698:	bl	10aa4 <close@plt>
   1169c:	cmp	r4, #0
   116a0:	rsblt	r0, r4, #0
   116a4:	movge	r0, #0
   116a8:	add	sp, sp, #8
   116ac:	pop	{r4, r5, r6, r7, r8, pc}
   116b0:	andeq	r3, r0, r6, asr #14
   116b4:	push	{r3, r4, r5, lr}
   116b8:	mov	r5, r0
   116bc:	bl	115e4 <__assert_fail@plt+0xb34>
   116c0:	ldr	r4, [pc, #64]	; 11708 <__assert_fail@plt+0xc58>
   116c4:	add	r4, pc, r4
   116c8:	subs	r3, r0, #0
   116cc:	beq	11700 <__assert_fail@plt+0xc50>
   116d0:	ldr	r3, [pc, #52]	; 1170c <__assert_fail@plt+0xc5c>
   116d4:	ldr	r3, [r4, r3]
   116d8:	ldr	r4, [r3]
   116dc:	bl	109a8 <strerror@plt>
   116e0:	ldr	r1, [pc, #40]	; 11710 <__assert_fail@plt+0xc60>
   116e4:	mov	r2, r5
   116e8:	add	r1, pc, r1
   116ec:	mov	r3, r0
   116f0:	mov	r0, r4
   116f4:	bl	10a14 <fprintf@plt>
   116f8:	mvn	r0, #0
   116fc:	pop	{r3, r4, r5, pc}
   11700:	mov	r0, r3
   11704:	pop	{r3, r4, r5, pc}
   11708:	andeq	r4, r1, r4, lsr r9
   1170c:	muleq	r0, r8, r0
   11710:	andeq	r3, r0, r6, ror r6
   11714:	push	{r4, r5, r6, r7, r8, lr}
   11718:	mov	r4, r0
   1171c:	ldrb	r3, [r0]
   11720:	mov	r8, r1
   11724:	mov	r7, r2
   11728:	cmp	r3, #0
   1172c:	bne	11738 <__assert_fail@plt+0xc88>
   11730:	mvn	r0, #0
   11734:	pop	{r4, r5, r6, r7, r8, pc}
   11738:	mvn	r3, #0
   1173c:	str	r3, [r2]
   11740:	ldrb	r5, [r0]
   11744:	ldr	r0, [pc, #156]	; 117e8 <__assert_fail@plt+0xd38>
   11748:	mov	r1, r5
   1174c:	add	r0, pc, r0
   11750:	bl	10a08 <strchr@plt>
   11754:	cmp	r0, #0
   11758:	moveq	r5, r0
   1175c:	beq	1177c <__assert_fail@plt+0xccc>
   11760:	ldrb	r3, [r4, #1]
   11764:	cmp	r5, r3
   11768:	addne	r4, r4, #1
   1176c:	bne	1177c <__assert_fail@plt+0xccc>
   11770:	cmp	r5, #104	; 0x68
   11774:	add	r4, r4, #2
   11778:	moveq	r5, #98	; 0x62
   1177c:	ldrb	r6, [r4]
   11780:	cmp	r6, #0
   11784:	beq	11730 <__assert_fail@plt+0xc80>
   11788:	ldr	r0, [pc, #92]	; 117ec <__assert_fail@plt+0xd3c>
   1178c:	mov	r1, r6
   11790:	add	r0, pc, r0
   11794:	bl	10a08 <strchr@plt>
   11798:	cmp	r0, #0
   1179c:	beq	11730 <__assert_fail@plt+0xc80>
   117a0:	cmp	r6, #115	; 0x73
   117a4:	beq	117d0 <__assert_fail@plt+0xd20>
   117a8:	cmp	r5, #98	; 0x62
   117ac:	moveq	r3, #1
   117b0:	beq	117cc <__assert_fail@plt+0xd1c>
   117b4:	cmp	r5, #104	; 0x68
   117b8:	moveq	r3, #2
   117bc:	beq	117cc <__assert_fail@plt+0xd1c>
   117c0:	cmp	r5, #108	; 0x6c
   117c4:	mvnne	r3, #0
   117c8:	moveq	r3, #4
   117cc:	str	r3, [r7]
   117d0:	ldrb	r3, [r4]
   117d4:	str	r3, [r8]
   117d8:	ldrb	r0, [r4, #1]
   117dc:	subs	r0, r0, #0
   117e0:	mvnne	r0, #0
   117e4:	pop	{r4, r5, r6, r7, r8, pc}
   117e8:	andeq	r3, r0, r3, lsr r6
   117ec:	strdeq	r3, [r0], -r4
   117f0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   117f4:	subs	r4, r1, #0
   117f8:	mov	r6, r0
   117fc:	beq	11950 <__assert_fail@plt+0xea0>
   11800:	bl	1126c <__assert_fail@plt+0x7bc>
   11804:	subs	r5, r0, #0
   11808:	beq	11860 <__assert_fail@plt+0xdb0>
   1180c:	ldr	r0, [pc, #324]	; 11958 <__assert_fail@plt+0xea8>
   11810:	mov	r5, r6
   11814:	ldr	r7, [pc, #320]	; 1195c <__assert_fail@plt+0xeac>
   11818:	add	r4, r6, r4
   1181c:	add	r0, pc, r0
   11820:	ldr	r6, [pc, #312]	; 11960 <__assert_fail@plt+0xeb0>
   11824:	bl	1093c <printf@plt>
   11828:	add	r7, pc, r7
   1182c:	add	r6, pc, r6
   11830:	mov	r1, r5
   11834:	mov	r0, r7
   11838:	bl	1093c <printf@plt>
   1183c:	mov	r0, r5
   11840:	bl	109fc <strlen@plt>
   11844:	add	r0, r0, #1
   11848:	add	r5, r5, r0
   1184c:	cmp	r5, r4
   11850:	bcs	11950 <__assert_fail@plt+0xea0>
   11854:	mov	r0, r6
   11858:	bl	1093c <printf@plt>
   1185c:	b	11830 <__assert_fail@plt+0xd80>
   11860:	ands	r7, r4, #3
   11864:	bne	118f0 <__assert_fail@plt+0xe40>
   11868:	ldr	r0, [pc, #244]	; 11964 <__assert_fail@plt+0xeb4>
   1186c:	mov	r5, r7
   11870:	ldr	r8, [pc, #240]	; 11968 <__assert_fail@plt+0xeb8>
   11874:	add	r0, pc, r0
   11878:	ldr	r7, [pc, #236]	; 1196c <__assert_fail@plt+0xebc>
   1187c:	bl	1093c <printf@plt>
   11880:	add	r3, r4, #3
   11884:	cmp	r4, #0
   11888:	ldr	r9, [pc, #224]	; 11970 <__assert_fail@plt+0xec0>
   1188c:	add	r7, pc, r7
   11890:	add	r8, pc, r8
   11894:	movlt	r4, r3
   11898:	add	r9, pc, r9
   1189c:	asr	r4, r4, #2
   118a0:	cmp	r5, r4
   118a4:	bge	118e8 <__assert_fail@plt+0xe38>
   118a8:	ldr	r3, [r6, r5, lsl #2]
   118ac:	sub	r2, r4, #1
   118b0:	cmp	r5, r2
   118b4:	mov	r0, r9
   118b8:	ubfx	r1, r3, #8, #8
   118bc:	add	r5, r5, #1
   118c0:	str	r3, [sp, #4]
   118c4:	movge	r2, r7
   118c8:	movlt	r2, r8
   118cc:	lsl	r1, r1, #16
   118d0:	orr	r1, r1, r3, lsl #24
   118d4:	orr	r1, r1, r3, lsr #24
   118d8:	ubfx	r3, r3, #16, #8
   118dc:	orr	r1, r1, r3, lsl #8
   118e0:	bl	1093c <printf@plt>
   118e4:	b	118a0 <__assert_fail@plt+0xdf0>
   118e8:	mov	r0, #62	; 0x3e
   118ec:	b	11944 <__assert_fail@plt+0xe94>
   118f0:	ldr	r0, [pc, #124]	; 11974 <__assert_fail@plt+0xec4>
   118f4:	ldr	r7, [pc, #124]	; 11978 <__assert_fail@plt+0xec8>
   118f8:	add	r0, pc, r0
   118fc:	ldr	r8, [pc, #120]	; 1197c <__assert_fail@plt+0xecc>
   11900:	bl	1093c <printf@plt>
   11904:	ldr	r9, [pc, #116]	; 11980 <__assert_fail@plt+0xed0>
   11908:	add	r7, pc, r7
   1190c:	add	r8, pc, r8
   11910:	add	r9, pc, r9
   11914:	cmp	r5, r4
   11918:	bge	11940 <__assert_fail@plt+0xe90>
   1191c:	sub	r3, r4, #1
   11920:	ldrb	r1, [r6, r5]
   11924:	cmp	r5, r3
   11928:	mov	r0, r9
   1192c:	add	r5, r5, #1
   11930:	movge	r2, r7
   11934:	movlt	r2, r8
   11938:	bl	1093c <printf@plt>
   1193c:	b	11914 <__assert_fail@plt+0xe64>
   11940:	mov	r0, #93	; 0x5d
   11944:	add	sp, sp, #12
   11948:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1194c:	b	10a38 <putchar@plt>
   11950:	add	sp, sp, #12
   11954:	pop	{r4, r5, r6, r7, r8, r9, pc}
   11958:	andeq	r3, r0, sp, ror #10
   1195c:	andeq	r3, r0, r5, ror #10
   11960:	ldrdeq	r3, [r0], -sl
   11964:	andeq	r3, r0, lr, lsl r5
   11968:	andeq	r3, r0, pc, ror #10
   1196c:	andeq	r3, r0, r8, lsr #7
   11970:	strdeq	r3, [r0], -pc	; <UNPREDICTABLE>
   11974:	andeq	r3, r0, r8, lsr #9
   11978:	andeq	r3, r0, ip, lsr #6
   1197c:	strdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   11980:	muleq	r0, r5, r4
   11984:	ldr	r0, [pc, #24]	; 119a4 <__assert_fail@plt+0xef4>
   11988:	ldr	r1, [pc, #24]	; 119a8 <__assert_fail@plt+0xef8>
   1198c:	push	{r3, lr}
   11990:	add	r0, pc, r0
   11994:	add	r1, pc, r1
   11998:	bl	1093c <printf@plt>
   1199c:	mov	r0, #0
   119a0:	bl	109e4 <exit@plt>
   119a4:	andeq	r3, r0, ip, lsl r4
   119a8:	andeq	r3, r0, r5, lsr #8
   119ac:	ldr	ip, [pc, #444]	; 11b70 <__assert_fail@plt+0x10c0>
   119b0:	subs	r8, r0, #0
   119b4:	push	{r0, r1, r2, r3, r4, r5, r6, r7, fp, lr}
   119b8:	add	ip, pc, ip
   119bc:	mov	r6, r1
   119c0:	mov	lr, r2
   119c4:	mov	r5, r3
   119c8:	ldrne	r3, [pc, #420]	; 11b74 <__assert_fail@plt+0x10c4>
   119cc:	ldreq	r3, [pc, #420]	; 11b78 <__assert_fail@plt+0x10c8>
   119d0:	ldr	r3, [ip, r3]
   119d4:	mov	r2, r6
   119d8:	ldr	ip, [pc, #412]	; 11b7c <__assert_fail@plt+0x10cc>
   119dc:	mov	r6, #0
   119e0:	ldr	r1, [pc, #408]	; 11b80 <__assert_fail@plt+0x10d0>
   119e4:	mov	r7, r6
   119e8:	add	ip, pc, ip
   119ec:	ldr	r4, [r3]
   119f0:	add	r1, pc, r1
   119f4:	ldr	r0, [ip]
   119f8:	ldrh	r3, [ip, #4]
   119fc:	str	r0, [sp, #16]
   11a00:	mov	r0, r4
   11a04:	strh	r3, [sp, #20]
   11a08:	mov	r3, lr
   11a0c:	bl	10a14 <fprintf@plt>
   11a10:	ldr	r0, [r5, r6]
   11a14:	cmp	r0, #0
   11a18:	beq	11a44 <__assert_fail@plt+0xf94>
   11a1c:	bl	109fc <strlen@plt>
   11a20:	add	r3, r5, r6
   11a24:	add	r6, r6, #16
   11a28:	ldr	r3, [r3, #4]
   11a2c:	cmp	r3, #1
   11a30:	addne	r0, r0, #1
   11a34:	addeq	r0, r0, #7
   11a38:	cmp	r7, r0
   11a3c:	movlt	r7, r0
   11a40:	b	11a10 <__assert_fail@plt+0xf60>
   11a44:	ldr	r6, [sp, #40]	; 0x28
   11a48:	ldr	r9, [pc, #308]	; 11b84 <__assert_fail@plt+0x10d4>
   11a4c:	ldr	sl, [pc, #308]	; 11b88 <__assert_fail@plt+0x10d8>
   11a50:	sub	r6, r6, #4
   11a54:	ldr	fp, [pc, #304]	; 11b8c <__assert_fail@plt+0x10dc>
   11a58:	add	r9, pc, r9
   11a5c:	add	sl, pc, sl
   11a60:	add	fp, pc, fp
   11a64:	ldr	r3, [r5]
   11a68:	cmp	r3, #0
   11a6c:	beq	11b48 <__assert_fail@plt+0x1098>
   11a70:	ldr	r3, [r6, #4]
   11a74:	cmp	r3, #0
   11a78:	bne	11aa0 <__assert_fail@plt+0xff0>
   11a7c:	ldr	r3, [pc, #268]	; 11b90 <__assert_fail@plt+0x10e0>
   11a80:	movw	r2, #450	; 0x1c2
   11a84:	ldr	r0, [pc, #264]	; 11b94 <__assert_fail@plt+0x10e4>
   11a88:	ldr	r1, [pc, #264]	; 11b98 <__assert_fail@plt+0x10e8>
   11a8c:	add	r3, pc, r3
   11a90:	add	r0, pc, r0
   11a94:	add	r3, r3, #13
   11a98:	add	r1, pc, r1
   11a9c:	bl	10ab0 <__assert_fail@plt>
   11aa0:	ldr	r2, [r5, #12]
   11aa4:	cmp	r2, #126	; 0x7e
   11aa8:	ble	11abc <__assert_fail@plt+0x100c>
   11aac:	mov	r0, sl
   11ab0:	mov	r1, r4
   11ab4:	bl	10a8c <fputs@plt>
   11ab8:	b	11ac8 <__assert_fail@plt+0x1018>
   11abc:	mov	r0, r4
   11ac0:	mov	r1, r9
   11ac4:	bl	10a14 <fprintf@plt>
   11ac8:	ldr	r3, [r5, #4]
   11acc:	cmp	r3, #0
   11ad0:	bne	11af0 <__assert_fail@plt+0x1040>
   11ad4:	ldr	r1, [pc, #192]	; 11b9c <__assert_fail@plt+0x10ec>
   11ad8:	mov	r0, r4
   11adc:	mov	r2, r7
   11ae0:	ldr	r3, [r5]
   11ae4:	add	r1, pc, r1
   11ae8:	bl	10a14 <fprintf@plt>
   11aec:	b	11b2c <__assert_fail@plt+0x107c>
   11af0:	ldr	r2, [r5]
   11af4:	mov	r0, r2
   11af8:	str	r2, [sp, #12]
   11afc:	bl	109fc <strlen@plt>
   11b00:	sub	r3, r7, #6
   11b04:	mov	r1, fp
   11b08:	ldr	r2, [sp, #12]
   11b0c:	rsb	r0, r0, r3
   11b10:	ldr	r3, [pc, #136]	; 11ba0 <__assert_fail@plt+0x10f0>
   11b14:	str	r0, [sp]
   11b18:	mov	r0, r4
   11b1c:	add	r3, pc, r3
   11b20:	str	r3, [sp, #4]
   11b24:	add	r3, sp, #16
   11b28:	bl	10a14 <fprintf@plt>
   11b2c:	ldr	r1, [pc, #112]	; 11ba4 <__assert_fail@plt+0x10f4>
   11b30:	mov	r0, r4
   11b34:	ldr	r2, [r6, #4]!
   11b38:	add	r5, r5, #16
   11b3c:	add	r1, pc, r1
   11b40:	bl	10a14 <fprintf@plt>
   11b44:	b	11a64 <__assert_fail@plt+0xfb4>
   11b48:	cmp	r8, #0
   11b4c:	moveq	r0, r8
   11b50:	beq	11b6c <__assert_fail@plt+0x10bc>
   11b54:	ldr	r1, [pc, #76]	; 11ba8 <__assert_fail@plt+0x10f8>
   11b58:	mov	r0, r4
   11b5c:	mov	r2, r8
   11b60:	add	r1, pc, r1
   11b64:	bl	10a14 <fprintf@plt>
   11b68:	mov	r0, #1
   11b6c:	bl	109e4 <exit@plt>
   11b70:	andeq	r4, r1, r0, asr #12
   11b74:	muleq	r0, r8, r0
   11b78:	andeq	r0, r0, r0, lsr #1
   11b7c:	andeq	r3, r0, pc, lsr r4
   11b80:	ldrdeq	r3, [r0], -r3	; <UNPREDICTABLE>
   11b84:	andeq	r3, r0, r9, lsr #7
   11b88:	muleq	r0, lr, r3
   11b8c:			; <UNDEFINED> instruction: 0x000033b0
   11b90:	andeq	r3, r0, pc, asr #4
   11b94:	andeq	r3, r0, lr, asr #6
   11b98:	andeq	r3, r0, r5, ror r2
   11b9c:	andeq	r3, r0, r5, lsr #6
   11ba0:	andeq	r3, r0, r8, lsl r1
   11ba4:	andeq	r3, r0, lr, lsl r2
   11ba8:			; <UNDEFINED> instruction: 0x000032bb
   11bac:	ubfx	r3, r0, #8, #8
   11bb0:	sub	sp, sp, #8
   11bb4:	lsl	r3, r3, #16
   11bb8:	orr	r3, r3, r0, lsl #24
   11bbc:	orr	r3, r3, r0, lsr #24
   11bc0:	ubfx	r0, r0, #16, #8
   11bc4:	orr	r0, r3, r0, lsl #8
   11bc8:	add	sp, sp, #8
   11bcc:	bx	lr
   11bd0:	ubfx	r3, r0, #8, #8
   11bd4:	sub	sp, sp, #8
   11bd8:	lsl	r3, r3, #16
   11bdc:	orr	r3, r3, r0, lsl #24
   11be0:	orr	r3, r3, r0, lsr #24
   11be4:	ubfx	r0, r0, #16, #8
   11be8:	orr	r0, r3, r0, lsl #8
   11bec:	add	sp, sp, #8
   11bf0:	bx	lr
   11bf4:	push	{r4, r5, r6, r7, r8, lr}
   11bf8:	mov	r4, r0
   11bfc:	ldr	r0, [r0, #16]
   11c00:	mov	r8, r1
   11c04:	mov	r7, r2
   11c08:	bl	11bac <__assert_fail@plt+0x10fc>
   11c0c:	cmp	r0, #39	; 0x27
   11c10:	mov	r5, r0
   11c14:	bls	11c70 <__assert_fail@plt+0x11c0>
   11c18:	ldr	r0, [r4, #8]
   11c1c:	add	r5, r5, r8
   11c20:	bl	11bac <__assert_fail@plt+0x10fc>
   11c24:	cmp	r0, r5
   11c28:	mov	r6, r0
   11c2c:	bcc	11c70 <__assert_fail@plt+0x11c0>
   11c30:	ldr	r0, [r4, #12]
   11c34:	add	r6, r6, r7
   11c38:	bl	11bac <__assert_fail@plt+0x10fc>
   11c3c:	cmp	r0, r6
   11c40:	mov	r5, r0
   11c44:	bcc	11c70 <__assert_fail@plt+0x11c0>
   11c48:	ldr	r0, [r4, #4]
   11c4c:	bl	11bac <__assert_fail@plt+0x10fc>
   11c50:	mov	r6, r0
   11c54:	ldr	r0, [r4, #32]
   11c58:	bl	11bac <__assert_fail@plt+0x10fc>
   11c5c:	add	r0, r0, r5
   11c60:	cmp	r6, r0
   11c64:	movcs	r0, #0
   11c68:	movcc	r0, #1
   11c6c:	pop	{r4, r5, r6, r7, r8, pc}
   11c70:	mov	r0, #1
   11c74:	pop	{r4, r5, r6, r7, r8, pc}
   11c78:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   11c7c:	mov	r4, r0
   11c80:	ldr	r0, [r0, #12]
   11c84:	mov	r5, r2
   11c88:	mov	r6, r1
   11c8c:	mov	r8, r3
   11c90:	bl	11bac <__assert_fail@plt+0x10fc>
   11c94:	mov	r7, r0
   11c98:	ldr	r0, [r4, #32]
   11c9c:	bl	11bac <__assert_fail@plt+0x10fc>
   11ca0:	cmp	r5, #0
   11ca4:	add	r0, r0, r7
   11ca8:	add	r7, r4, r0
   11cac:	blt	11d04 <__assert_fail@plt+0x1254>
   11cb0:	add	r9, r6, r5
   11cb4:	cmp	r9, r7
   11cb8:	bhi	11d04 <__assert_fail@plt+0x1254>
   11cbc:	cmp	r6, r4
   11cc0:	bcc	11d04 <__assert_fail@plt+0x1254>
   11cc4:	rsb	sl, r5, r8
   11cc8:	add	sl, r7, sl
   11ccc:	cmp	sl, r4
   11cd0:	bcc	11d04 <__assert_fail@plt+0x1254>
   11cd4:	ldr	r0, [r4, #4]
   11cd8:	bl	11bac <__assert_fail@plt+0x10fc>
   11cdc:	add	r0, r4, r0
   11ce0:	cmp	sl, r0
   11ce4:	bhi	11d0c <__assert_fail@plt+0x125c>
   11ce8:	rsb	r2, r6, r7
   11cec:	add	r0, r6, r8
   11cf0:	mov	r1, r9
   11cf4:	rsb	r2, r5, r2
   11cf8:	bl	10954 <memmove@plt>
   11cfc:	mov	r0, #0
   11d00:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d04:	mvn	r0, #3
   11d08:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d0c:	mvn	r0, #2
   11d10:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   11d14:	push	{r3, r4, r5, r6, r7, lr}
   11d18:	mov	r4, r0
   11d1c:	mov	r5, r2
   11d20:	mov	r6, r3
   11d24:	bl	11c78 <__assert_fail@plt+0x11c8>
   11d28:	subs	r7, r0, #0
   11d2c:	bne	11d5c <__assert_fail@plt+0x12ac>
   11d30:	ldr	r0, [r4, #36]	; 0x24
   11d34:	rsb	r5, r5, r6
   11d38:	bl	11bac <__assert_fail@plt+0x10fc>
   11d3c:	add	r0, r0, r5
   11d40:	bl	11bd0 <__assert_fail@plt+0x1120>
   11d44:	str	r0, [r4, #36]	; 0x24
   11d48:	ldr	r0, [r4, #12]
   11d4c:	bl	11bac <__assert_fail@plt+0x10fc>
   11d50:	add	r0, r0, r5
   11d54:	bl	11bd0 <__assert_fail@plt+0x1120>
   11d58:	str	r0, [r4, #12]
   11d5c:	mov	r0, r7
   11d60:	pop	{r3, r4, r5, r6, r7, pc}
   11d64:	push	{r3, r4, r5, r6, r7, lr}
   11d68:	mov	r5, r2
   11d6c:	mov	r6, r3
   11d70:	lsl	r2, r2, #4
   11d74:	lsl	r3, r3, #4
   11d78:	mov	r4, r0
   11d7c:	bl	11c78 <__assert_fail@plt+0x11c8>
   11d80:	subs	r7, r0, #0
   11d84:	bne	11db8 <__assert_fail@plt+0x1308>
   11d88:	ldr	r0, [r4, #8]
   11d8c:	rsb	r5, r5, r6
   11d90:	bl	11bac <__assert_fail@plt+0x10fc>
   11d94:	lsl	r5, r5, #4
   11d98:	add	r0, r0, r5
   11d9c:	bl	11bd0 <__assert_fail@plt+0x1120>
   11da0:	str	r0, [r4, #8]
   11da4:	ldr	r0, [r4, #12]
   11da8:	bl	11bac <__assert_fail@plt+0x10fc>
   11dac:	add	r0, r0, r5
   11db0:	bl	11bd0 <__assert_fail@plt+0x1120>
   11db4:	str	r0, [r4, #12]
   11db8:	mov	r0, r7
   11dbc:	pop	{r3, r4, r5, r6, r7, pc}
   11dc0:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11dc4:	mov	r4, r0
   11dc8:	mov	r8, r2
   11dcc:	mov	sl, r3
   11dd0:	bl	13770 <__assert_fail@plt+0x2cc0>
   11dd4:	subs	r9, r0, #0
   11dd8:	movlt	r5, r9
   11ddc:	blt	11ef4 <__assert_fail@plt+0x1444>
   11de0:	ldr	r0, [r4, #12]
   11de4:	bl	11bac <__assert_fail@plt+0x10fc>
   11de8:	add	r6, r4, r0
   11dec:	mov	r0, r8
   11df0:	bl	109fc <strlen@plt>
   11df4:	mov	r7, r0
   11df8:	ldr	r0, [r4, #32]
   11dfc:	bl	11bac <__assert_fail@plt+0x10fc>
   11e00:	mov	r2, r8
   11e04:	mov	r1, r0
   11e08:	mov	r0, r6
   11e0c:	bl	13948 <__assert_fail@plt+0x2e98>
   11e10:	subs	fp, r0, #0
   11e14:	rsbne	r5, r6, fp
   11e18:	bne	11e84 <__assert_fail@plt+0x13d4>
   11e1c:	ldr	r0, [r4, #32]
   11e20:	add	r7, r7, #1
   11e24:	bl	11bac <__assert_fail@plt+0x10fc>
   11e28:	mov	r5, r0
   11e2c:	ldr	r0, [r4, #12]
   11e30:	bl	11bac <__assert_fail@plt+0x10fc>
   11e34:	mov	r2, fp
   11e38:	mov	r3, r7
   11e3c:	add	r1, r0, r5
   11e40:	mov	r0, r4
   11e44:	add	r1, r4, r1
   11e48:	bl	11c78 <__assert_fail@plt+0x11c8>
   11e4c:	cmp	r0, #0
   11e50:	movne	r5, r0
   11e54:	bne	11e84 <__assert_fail@plt+0x13d4>
   11e58:	ldr	r0, [r4, #32]
   11e5c:	add	r5, r6, r5
   11e60:	bl	11bac <__assert_fail@plt+0x10fc>
   11e64:	add	r0, r0, r7
   11e68:	bl	11bd0 <__assert_fail@plt+0x1120>
   11e6c:	mov	r1, r8
   11e70:	mov	r2, r7
   11e74:	str	r0, [r4, #32]
   11e78:	mov	r0, r5
   11e7c:	bl	1096c <memcpy@plt>
   11e80:	rsb	r5, r6, r5
   11e84:	cmp	r5, #0
   11e88:	blt	11ef4 <__assert_fail@plt+0x1444>
   11e8c:	ldr	r0, [r4, #8]
   11e90:	bl	11bac <__assert_fail@plt+0x10fc>
   11e94:	ldr	r3, [sp, #40]	; 0x28
   11e98:	mov	r2, #0
   11e9c:	add	r0, r0, r9
   11ea0:	add	r1, r4, r0
   11ea4:	str	r1, [r3]
   11ea8:	add	r3, sl, #3
   11eac:	mov	r0, r4
   11eb0:	bic	r3, r3, #3
   11eb4:	add	r3, r3, #12
   11eb8:	bl	11d14 <__assert_fail@plt+0x1264>
   11ebc:	subs	r6, r0, #0
   11ec0:	bne	11ef0 <__assert_fail@plt+0x1440>
   11ec4:	ldr	r3, [sp, #40]	; 0x28
   11ec8:	mov	r0, #3
   11ecc:	ldr	r4, [r3]
   11ed0:	bl	11bd0 <__assert_fail@plt+0x1120>
   11ed4:	str	r0, [r4]
   11ed8:	mov	r0, r5
   11edc:	bl	11bd0 <__assert_fail@plt+0x1120>
   11ee0:	str	r0, [r4, #8]
   11ee4:	mov	r0, sl
   11ee8:	bl	11bd0 <__assert_fail@plt+0x1120>
   11eec:	str	r0, [r4, #4]
   11ef0:	mov	r5, r6
   11ef4:	mov	r0, r5
   11ef8:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11efc:	push	{r4, r5, r6, lr}
   11f00:	mov	r4, r0
   11f04:	bl	13584 <__assert_fail@plt+0x2ad4>
   11f08:	cmp	r0, #0
   11f0c:	movne	r5, r0
   11f10:	bne	11f6c <__assert_fail@plt+0x14bc>
   11f14:	ldr	r0, [r4, #20]
   11f18:	bl	11bac <__assert_fail@plt+0x10fc>
   11f1c:	cmp	r0, #16
   11f20:	mov	r6, r0
   11f24:	bls	11f60 <__assert_fail@plt+0x14b0>
   11f28:	ldr	r0, [r4, #36]	; 0x24
   11f2c:	bl	11bac <__assert_fail@plt+0x10fc>
   11f30:	mov	r1, #16
   11f34:	mov	r2, r0
   11f38:	mov	r0, r4
   11f3c:	bl	11bf4 <__assert_fail@plt+0x1144>
   11f40:	subs	r5, r0, #0
   11f44:	bne	11f68 <__assert_fail@plt+0x14b8>
   11f48:	cmp	r6, #17
   11f4c:	beq	11f6c <__assert_fail@plt+0x14bc>
   11f50:	mov	r0, #17
   11f54:	bl	11bd0 <__assert_fail@plt+0x1120>
   11f58:	str	r0, [r4, #20]
   11f5c:	b	11f6c <__assert_fail@plt+0x14bc>
   11f60:	mvn	r5, #9
   11f64:	b	11f6c <__assert_fail@plt+0x14bc>
   11f68:	mvn	r5, #11
   11f6c:	mov	r0, r5
   11f70:	pop	{r4, r5, r6, pc}
   11f74:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11f78:	mov	r5, r0
   11f7c:	add	r7, r2, #40	; 0x28
   11f80:	ldr	r0, [r0, #16]
   11f84:	mov	r6, r3
   11f88:	add	r8, r7, r3
   11f8c:	mov	r4, r1
   11f90:	mov	r9, r2
   11f94:	bl	11bac <__assert_fail@plt+0x10fc>
   11f98:	mov	r2, r9
   11f9c:	add	r9, r4, r7
   11fa0:	add	r1, r5, r0
   11fa4:	add	r0, r4, #40	; 0x28
   11fa8:	bl	10954 <memmove@plt>
   11fac:	mov	r0, #40	; 0x28
   11fb0:	bl	11bd0 <__assert_fail@plt+0x1120>
   11fb4:	str	r0, [r4, #16]
   11fb8:	ldr	r0, [r5, #8]
   11fbc:	bl	11bac <__assert_fail@plt+0x10fc>
   11fc0:	mov	r2, r6
   11fc4:	add	r1, r5, r0
   11fc8:	mov	r0, r9
   11fcc:	bl	10954 <memmove@plt>
   11fd0:	mov	r0, r7
   11fd4:	bl	11bd0 <__assert_fail@plt+0x1120>
   11fd8:	add	r7, r4, r8
   11fdc:	str	r0, [r4, #8]
   11fe0:	mov	r0, r6
   11fe4:	bl	11bd0 <__assert_fail@plt+0x1120>
   11fe8:	str	r0, [r4, #36]	; 0x24
   11fec:	ldr	r0, [r5, #12]
   11ff0:	bl	11bac <__assert_fail@plt+0x10fc>
   11ff4:	add	r6, r5, r0
   11ff8:	ldr	r0, [r5, #32]
   11ffc:	bl	11bac <__assert_fail@plt+0x10fc>
   12000:	mov	r1, r6
   12004:	mov	r2, r0
   12008:	mov	r0, r7
   1200c:	bl	10954 <memmove@plt>
   12010:	mov	r0, r8
   12014:	bl	11bd0 <__assert_fail@plt+0x1120>
   12018:	str	r0, [r4, #12]
   1201c:	ldr	r0, [r5, #32]
   12020:	bl	11bac <__assert_fail@plt+0x10fc>
   12024:	bl	11bd0 <__assert_fail@plt+0x1120>
   12028:	str	r0, [r4, #32]
   1202c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12030:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12034:	sub	sp, sp, #28
   12038:	mov	r5, r3
   1203c:	mov	r6, r0
   12040:	ldr	r3, [sp, #68]	; 0x44
   12044:	mov	r4, r2
   12048:	ldr	r8, [sp, #64]	; 0x40
   1204c:	str	r3, [sp, #4]
   12050:	bl	11efc <__assert_fail@plt+0x144c>
   12054:	subs	r7, r0, #0
   12058:	movne	r0, r7
   1205c:	bne	121b0 <__assert_fail@plt+0x1700>
   12060:	mov	r0, r6
   12064:	bl	13b7c <__assert_fail@plt+0x30cc>
   12068:	mov	r9, r0
   1206c:	ldr	r0, [r6, #16]
   12070:	bl	11bac <__assert_fail@plt+0x10fc>
   12074:	lsl	r9, r9, #4
   12078:	mov	r2, r7
   1207c:	mov	r3, #1
   12080:	add	sl, r6, r0
   12084:	mov	r0, r6
   12088:	add	fp, sl, r9
   1208c:	mov	r1, fp
   12090:	bl	11d64 <__assert_fail@plt+0x12b4>
   12094:	cmp	r0, #0
   12098:	bne	121b0 <__assert_fail@plt+0x1700>
   1209c:	str	r5, [sp, #12]
   120a0:	orr	r6, r0, r0
   120a4:	ldrb	r2, [sp, #15]
   120a8:	lsl	r3, r4, #8
   120ac:	str	r4, [sp, #8]
   120b0:	lsl	r7, r4, #24
   120b4:	orr	r4, r6, r2
   120b8:	ldrb	r2, [sp, #10]
   120bc:	and	r5, r3, #16711680	; 0xff0000
   120c0:	mov	r3, #0
   120c4:	orr	r7, r7, r5
   120c8:	orr	r6, r0, r4
   120cc:	orr	r5, r7, r3
   120d0:	lsl	r7, r2, #8
   120d4:	ldrb	r2, [sp, #12]
   120d8:	orr	r6, r6, r0
   120dc:	orr	r7, r7, r5
   120e0:	ldrb	r5, [sp, #11]
   120e4:	ldr	r3, [sp, #4]
   120e8:	lsl	r4, r2, #24
   120ec:	ldrb	r2, [sp, #13]
   120f0:	orr	r6, r6, r4
   120f4:	orr	r7, r7, r5
   120f8:	mov	r5, #0
   120fc:	orr	r7, r7, r5
   12100:	lsl	r4, r2, #16
   12104:	ldrb	r2, [sp, #14]
   12108:	orr	r6, r6, r4
   1210c:	str	r3, [sp, #20]
   12110:	mov	r5, #0
   12114:	orr	r7, r7, r5
   12118:	lsl	r4, r2, #8
   1211c:	mov	r5, #0
   12120:	orr	r4, r4, r6
   12124:	ldrb	r6, [sp, #23]
   12128:	orr	r5, r5, r7
   1212c:	strd	r4, [sl, r9]
   12130:	orr	r4, r0, r0
   12134:	str	r8, [sp, #16]
   12138:	orr	r4, r4, r6
   1213c:	ldrb	r6, [sp, #18]
   12140:	lsl	r5, r8, #24
   12144:	lsl	r8, r8, #8
   12148:	and	r3, r8, #16711680	; 0xff0000
   1214c:	mov	r7, #0
   12150:	orr	r5, r5, r3
   12154:	lsl	r3, r6, #8
   12158:	ldrb	r6, [sp, #20]
   1215c:	orr	r5, r5, r7
   12160:	orr	r4, r4, r0
   12164:	orr	r5, r5, r3
   12168:	orr	r4, r4, r0
   1216c:	ldrb	r3, [sp, #19]
   12170:	lsl	r2, r6, #24
   12174:	ldrb	r6, [sp, #21]
   12178:	orr	r4, r4, r2
   1217c:	orr	r5, r5, r3
   12180:	mov	r3, #0
   12184:	orr	r5, r5, r3
   12188:	lsl	r2, r6, #16
   1218c:	ldrb	r6, [sp, #22]
   12190:	mov	r3, #0
   12194:	orr	r4, r4, r2
   12198:	orr	r5, r5, r3
   1219c:	mov	r3, #0
   121a0:	lsl	r2, r6, #8
   121a4:	orr	r3, r3, r5
   121a8:	orr	r2, r2, r4
   121ac:	strd	r2, [fp, #8]
   121b0:	add	sp, sp, #28
   121b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   121b8:	push	{r4, r5, r6, r7, r8, lr}
   121bc:	mov	r4, r0
   121c0:	ldr	r0, [r0, #16]
   121c4:	mov	r5, r1
   121c8:	bl	11bac <__assert_fail@plt+0x10fc>
   121cc:	mov	r7, r0
   121d0:	mov	r0, r4
   121d4:	bl	11efc <__assert_fail@plt+0x144c>
   121d8:	subs	r6, r0, #0
   121dc:	bne	1220c <__assert_fail@plt+0x175c>
   121e0:	mov	r0, r4
   121e4:	bl	13b7c <__assert_fail@plt+0x30cc>
   121e8:	cmp	r5, r0
   121ec:	bge	12214 <__assert_fail@plt+0x1764>
   121f0:	add	r1, r4, r7
   121f4:	mov	r0, r4
   121f8:	add	r1, r1, r5, lsl #4
   121fc:	mov	r3, r6
   12200:	mov	r2, #1
   12204:	pop	{r4, r5, r6, r7, r8, lr}
   12208:	b	11d64 <__assert_fail@plt+0x12b4>
   1220c:	mov	r0, r6
   12210:	pop	{r4, r5, r6, r7, r8, pc}
   12214:	mvn	r0, #0
   12218:	pop	{r4, r5, r6, r7, r8, pc}
   1221c:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   12220:	mov	r6, r0
   12224:	mov	r5, r1
   12228:	mov	r4, r2
   1222c:	bl	11efc <__assert_fail@plt+0x144c>
   12230:	cmp	r0, #0
   12234:	bne	1229c <__assert_fail@plt+0x17ec>
   12238:	mov	r1, r5
   1223c:	mov	r0, r6
   12240:	add	r2, sp, #4
   12244:	bl	13cb4 <__assert_fail@plt+0x3204>
   12248:	ldr	r8, [sp, #4]
   1224c:	subs	r5, r0, #0
   12250:	moveq	r0, r8
   12254:	beq	1229c <__assert_fail@plt+0x17ec>
   12258:	mov	r0, r4
   1225c:	bl	109fc <strlen@plt>
   12260:	add	r2, r8, #4
   12264:	mov	r1, r5
   12268:	bic	r2, r2, #3
   1226c:	add	r3, r0, #4
   12270:	mov	r7, r0
   12274:	bic	r3, r3, #3
   12278:	mov	r0, r6
   1227c:	bl	11d14 <__assert_fail@plt+0x1264>
   12280:	subs	r6, r0, #0
   12284:	bne	12298 <__assert_fail@plt+0x17e8>
   12288:	mov	r0, r5
   1228c:	mov	r1, r4
   12290:	add	r2, r7, #1
   12294:	bl	1096c <memcpy@plt>
   12298:	mov	r0, r6
   1229c:	add	sp, sp, #8
   122a0:	pop	{r4, r5, r6, r7, r8, pc}
   122a4:	push	{r4, r5, r7, r8, lr}
   122a8:	sub	sp, sp, #20
   122ac:	mov	r5, r0
   122b0:	mov	r8, r1
   122b4:	mov	r7, r2
   122b8:	mov	r4, r3
   122bc:	bl	11efc <__assert_fail@plt+0x144c>
   122c0:	cmp	r0, #0
   122c4:	bne	1236c <__assert_fail@plt+0x18bc>
   122c8:	mov	r1, r8
   122cc:	mov	r0, r5
   122d0:	mov	r2, r7
   122d4:	add	r3, sp, #12
   122d8:	bl	13e6c <__assert_fail@plt+0x33bc>
   122dc:	ldr	ip, [sp, #12]
   122e0:	cmp	r0, #0
   122e4:	mov	r1, r0
   122e8:	str	r0, [sp, #8]
   122ec:	moveq	r0, ip
   122f0:	beq	1232c <__assert_fail@plt+0x187c>
   122f4:	add	r2, ip, #3
   122f8:	add	r3, r4, #3
   122fc:	mov	r0, r5
   12300:	add	r1, r1, #12
   12304:	bic	r2, r2, #3
   12308:	bic	r3, r3, #3
   1230c:	bl	11d14 <__assert_fail@plt+0x1264>
   12310:	cmp	r0, #0
   12314:	bne	1232c <__assert_fail@plt+0x187c>
   12318:	mov	r0, r4
   1231c:	ldr	r5, [sp, #8]
   12320:	bl	11bd0 <__assert_fail@plt+0x1120>
   12324:	str	r0, [r5, #4]
   12328:	b	12358 <__assert_fail@plt+0x18a8>
   1232c:	cmn	r0, #1
   12330:	bne	12350 <__assert_fail@plt+0x18a0>
   12334:	add	r3, sp, #8
   12338:	mov	r0, r5
   1233c:	str	r3, [sp]
   12340:	mov	r1, r8
   12344:	mov	r2, r7
   12348:	mov	r3, r4
   1234c:	bl	11dc0 <__assert_fail@plt+0x1310>
   12350:	cmp	r0, #0
   12354:	bne	1236c <__assert_fail@plt+0x18bc>
   12358:	ldr	r3, [sp, #40]	; 0x28
   1235c:	mov	r0, #0
   12360:	ldr	r2, [sp, #8]
   12364:	add	r2, r2, #12
   12368:	str	r2, [r3]
   1236c:	add	sp, sp, #20
   12370:	pop	{r4, r5, r7, r8, pc}
   12374:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   12378:	mov	r6, r3
   1237c:	ldr	r4, [sp, #32]
   12380:	add	r3, sp, #12
   12384:	str	r3, [sp]
   12388:	mov	r3, r4
   1238c:	bl	122a4 <__assert_fail@plt+0x17f4>
   12390:	subs	r5, r0, #0
   12394:	bne	123b4 <__assert_fail@plt+0x1904>
   12398:	cmp	r4, #0
   1239c:	moveq	r0, r4
   123a0:	beq	123b8 <__assert_fail@plt+0x1908>
   123a4:	ldr	r0, [sp, #12]
   123a8:	mov	r1, r6
   123ac:	mov	r2, r4
   123b0:	bl	1096c <memcpy@plt>
   123b4:	mov	r0, r5
   123b8:	add	sp, sp, #16
   123bc:	pop	{r4, r5, r6, pc}
   123c0:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   123c4:	mov	r5, r0
   123c8:	mov	r8, r1
   123cc:	mov	r7, r2
   123d0:	mov	r6, r3
   123d4:	ldr	r4, [sp, #40]	; 0x28
   123d8:	bl	11efc <__assert_fail@plt+0x144c>
   123dc:	cmp	r0, #0
   123e0:	bne	1248c <__assert_fail@plt+0x19dc>
   123e4:	mov	r1, r8
   123e8:	mov	r0, r5
   123ec:	mov	r2, r7
   123f0:	add	r3, sp, #12
   123f4:	bl	13e6c <__assert_fail@plt+0x33bc>
   123f8:	cmp	r0, #0
   123fc:	mov	r1, r0
   12400:	str	r0, [sp, #8]
   12404:	beq	12450 <__assert_fail@plt+0x19a0>
   12408:	ldr	r2, [sp, #12]
   1240c:	mov	r0, r5
   12410:	add	r1, r1, #12
   12414:	add	r7, r4, r2
   12418:	add	r2, r2, #3
   1241c:	add	r3, r7, #3
   12420:	bic	r2, r2, #3
   12424:	bic	r3, r3, #3
   12428:	bl	11d14 <__assert_fail@plt+0x1264>
   1242c:	subs	r5, r0, #0
   12430:	bne	12488 <__assert_fail@plt+0x19d8>
   12434:	mov	r0, r7
   12438:	ldr	r8, [sp, #8]
   1243c:	bl	11bd0 <__assert_fail@plt+0x1120>
   12440:	ldr	r3, [sp, #12]
   12444:	str	r0, [r8, #4]
   12448:	add	r0, r8, r3
   1244c:	b	12478 <__assert_fail@plt+0x19c8>
   12450:	add	r3, sp, #8
   12454:	mov	r0, r5
   12458:	str	r3, [sp]
   1245c:	mov	r1, r8
   12460:	mov	r2, r7
   12464:	mov	r3, r4
   12468:	bl	11dc0 <__assert_fail@plt+0x1310>
   1246c:	subs	r5, r0, #0
   12470:	bne	12488 <__assert_fail@plt+0x19d8>
   12474:	ldr	r0, [sp, #8]
   12478:	add	r0, r0, #12
   1247c:	mov	r1, r6
   12480:	mov	r2, r4
   12484:	bl	1096c <memcpy@plt>
   12488:	mov	r0, r5
   1248c:	add	sp, sp, #16
   12490:	pop	{r4, r5, r6, r7, r8, pc}
   12494:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12498:	mov	r4, r0
   1249c:	mov	r7, r1
   124a0:	mov	r6, r2
   124a4:	bl	11efc <__assert_fail@plt+0x144c>
   124a8:	subs	r5, r0, #0
   124ac:	movne	r0, r5
   124b0:	bne	124ec <__assert_fail@plt+0x1a3c>
   124b4:	mov	r1, r7
   124b8:	mov	r0, r4
   124bc:	mov	r2, r6
   124c0:	add	r3, sp, #4
   124c4:	bl	13e6c <__assert_fail@plt+0x33bc>
   124c8:	subs	r1, r0, #0
   124cc:	ldr	r0, [sp, #4]
   124d0:	beq	124ec <__assert_fail@plt+0x1a3c>
   124d4:	add	r0, r0, #3
   124d8:	mov	r3, r5
   124dc:	bic	r2, r0, #3
   124e0:	mov	r0, r4
   124e4:	add	r2, r2, #12
   124e8:	bl	11d14 <__assert_fail@plt+0x1264>
   124ec:	add	sp, sp, #12
   124f0:	pop	{r4, r5, r6, r7, pc}
   124f4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   124f8:	mov	r4, r0
   124fc:	mov	r5, r1
   12500:	mov	r9, r2
   12504:	mov	r8, r3
   12508:	bl	11efc <__assert_fail@plt+0x144c>
   1250c:	cmp	r0, #0
   12510:	bne	125f0 <__assert_fail@plt+0x1b40>
   12514:	mov	r0, r4
   12518:	mov	r1, r5
   1251c:	mov	r2, r9
   12520:	mov	r3, r8
   12524:	bl	13bb4 <__assert_fail@plt+0x3104>
   12528:	cmp	r0, #0
   1252c:	bge	125ec <__assert_fail@plt+0x1b3c>
   12530:	cmn	r0, #1
   12534:	bne	125f0 <__assert_fail@plt+0x1b40>
   12538:	add	r6, sp, #4
   1253c:	mov	r0, r4
   12540:	mov	r1, r5
   12544:	mov	r2, r6
   12548:	bl	13674 <__assert_fail@plt+0x2bc4>
   1254c:	ldr	r5, [sp, #4]
   12550:	mov	r0, r4
   12554:	mov	r2, r6
   12558:	mov	r1, r5
   1255c:	bl	13674 <__assert_fail@plt+0x2bc4>
   12560:	sub	r0, r0, #3
   12564:	cmp	r0, #1
   12568:	bls	1254c <__assert_fail@plt+0x1a9c>
   1256c:	ldr	r0, [r4, #8]
   12570:	add	r7, r8, #4
   12574:	bl	11bac <__assert_fail@plt+0x10fc>
   12578:	bic	r7, r7, #3
   1257c:	mov	r2, #0
   12580:	add	r3, r7, #8
   12584:	add	sl, r5, r0
   12588:	mov	r0, r4
   1258c:	add	r6, r4, sl
   12590:	mov	r1, r6
   12594:	bl	11d14 <__assert_fail@plt+0x1264>
   12598:	subs	fp, r0, #0
   1259c:	movne	r0, fp
   125a0:	bne	125f0 <__assert_fail@plt+0x1b40>
   125a4:	mov	r0, #1
   125a8:	bl	11bd0 <__assert_fail@plt+0x1120>
   125ac:	mov	r2, r7
   125b0:	mov	r1, fp
   125b4:	add	r7, r7, #4
   125b8:	str	r0, [r4, sl]
   125bc:	add	r4, r6, #4
   125c0:	mov	r0, r4
   125c4:	bl	10a2c <memset@plt>
   125c8:	mov	r1, r9
   125cc:	mov	r2, r8
   125d0:	mov	r0, r4
   125d4:	bl	1096c <memcpy@plt>
   125d8:	mov	r0, #2
   125dc:	bl	11bd0 <__assert_fail@plt+0x1120>
   125e0:	str	r0, [r6, r7]
   125e4:	mov	r0, r5
   125e8:	b	125f0 <__assert_fail@plt+0x1b40>
   125ec:	mvn	r0, #1
   125f0:	add	sp, sp, #12
   125f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   125f8:	push	{r4, r5, r6, lr}
   125fc:	mov	r5, r0
   12600:	mov	r0, r2
   12604:	mov	r6, r1
   12608:	mov	r4, r2
   1260c:	bl	109fc <strlen@plt>
   12610:	mov	r1, r6
   12614:	mov	r2, r4
   12618:	mov	r3, r0
   1261c:	mov	r0, r5
   12620:	pop	{r4, r5, r6, lr}
   12624:	b	124f4 <__assert_fail@plt+0x1a44>
   12628:	push	{r4, r5, r6, r7, r8, lr}
   1262c:	mov	r5, r0
   12630:	mov	r4, r1
   12634:	bl	11efc <__assert_fail@plt+0x144c>
   12638:	subs	r6, r0, #0
   1263c:	bne	12678 <__assert_fail@plt+0x1bc8>
   12640:	mov	r0, r5
   12644:	mov	r1, r4
   12648:	bl	1493c <__assert_fail@plt+0x3e8c>
   1264c:	subs	r7, r0, #0
   12650:	blt	12680 <__assert_fail@plt+0x1bd0>
   12654:	ldr	r0, [r5, #8]
   12658:	bl	11bac <__assert_fail@plt+0x10fc>
   1265c:	rsb	r2, r4, r7
   12660:	mov	r3, r6
   12664:	add	r1, r0, r4
   12668:	mov	r0, r5
   1266c:	add	r1, r5, r1
   12670:	pop	{r4, r5, r6, r7, r8, lr}
   12674:	b	11d14 <__assert_fail@plt+0x1264>
   12678:	mov	r0, r6
   1267c:	pop	{r4, r5, r6, r7, r8, pc}
   12680:	mov	r0, r7
   12684:	pop	{r4, r5, r6, r7, r8, pc}
   12688:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   1268c:	mov	r5, r0
   12690:	ldr	r0, [r0, #4]
   12694:	mov	r4, r1
   12698:	mov	r7, r2
   1269c:	bl	11bac <__assert_fail@plt+0x10fc>
   126a0:	mov	r6, r0
   126a4:	mov	r0, r5
   126a8:	bl	13584 <__assert_fail@plt+0x2ad4>
   126ac:	subs	sl, r0, #0
   126b0:	movne	r0, sl
   126b4:	bne	12830 <__assert_fail@plt+0x1d80>
   126b8:	mov	r0, r5
   126bc:	bl	13b7c <__assert_fail@plt+0x30cc>
   126c0:	add	r0, r0, #1
   126c4:	lsl	r9, r0, #4
   126c8:	ldr	r0, [r5, #20]
   126cc:	bl	11bac <__assert_fail@plt+0x10fc>
   126d0:	cmp	r0, #16
   126d4:	bls	126e8 <__assert_fail@plt+0x1c38>
   126d8:	ldr	r0, [r5, #36]	; 0x24
   126dc:	bl	11bac <__assert_fail@plt+0x10fc>
   126e0:	str	r0, [sp, #4]
   126e4:	b	12714 <__assert_fail@plt+0x1c64>
   126e8:	add	r8, sp, #8
   126ec:	str	sl, [r8, #-4]!
   126f0:	mov	r0, r5
   126f4:	ldr	r1, [sp, #4]
   126f8:	mov	r2, r8
   126fc:	bl	13674 <__assert_fail@plt+0x2bc4>
   12700:	cmp	r0, #9
   12704:	bne	126f0 <__assert_fail@plt+0x1c40>
   12708:	ldr	r0, [sp, #4]
   1270c:	cmp	r0, #0
   12710:	blt	12830 <__assert_fail@plt+0x1d80>
   12714:	ldr	sl, [sp, #4]
   12718:	mov	r0, r5
   1271c:	mov	r1, r9
   12720:	mov	r2, sl
   12724:	bl	11bf4 <__assert_fail@plt+0x1144>
   12728:	cmp	r0, #0
   1272c:	bne	12774 <__assert_fail@plt+0x1cc4>
   12730:	mov	r0, r5
   12734:	mov	r1, r4
   12738:	mov	r2, r7
   1273c:	bl	139a4 <__assert_fail@plt+0x2ef4>
   12740:	subs	r5, r0, #0
   12744:	movne	r0, r5
   12748:	bne	12830 <__assert_fail@plt+0x1d80>
   1274c:	mov	r0, #17
   12750:	bl	11bd0 <__assert_fail@plt+0x1120>
   12754:	str	r0, [r4, #20]
   12758:	ldr	r0, [sp, #4]
   1275c:	bl	11bd0 <__assert_fail@plt+0x1120>
   12760:	str	r0, [r4, #36]	; 0x24
   12764:	mov	r0, r7
   12768:	bl	11bd0 <__assert_fail@plt+0x1120>
   1276c:	str	r0, [r4, #4]
   12770:	b	12824 <__assert_fail@plt+0x1d74>
   12774:	ldr	r0, [r5, #32]
   12778:	add	r8, sl, #40	; 0x28
   1277c:	bl	11bac <__assert_fail@plt+0x10fc>
   12780:	add	r8, r8, r9
   12784:	add	r8, r8, r0
   12788:	cmp	r7, r8
   1278c:	blt	1282c <__assert_fail@plt+0x1d7c>
   12790:	add	r3, r4, r8
   12794:	cmp	r5, r3
   12798:	bcs	127bc <__assert_fail@plt+0x1d0c>
   1279c:	add	r6, r5, r6
   127a0:	cmp	r4, r6
   127a4:	bcs	127bc <__assert_fail@plt+0x1d0c>
   127a8:	add	r2, r6, r8
   127ac:	add	r3, r4, r7
   127b0:	cmp	r2, r3
   127b4:	bls	127c0 <__assert_fail@plt+0x1d10>
   127b8:	b	1282c <__assert_fail@plt+0x1d7c>
   127bc:	mov	r6, r4
   127c0:	mov	r3, sl
   127c4:	mov	r0, r5
   127c8:	mov	r1, r6
   127cc:	mov	r2, r9
   127d0:	bl	11f74 <__assert_fail@plt+0x14c4>
   127d4:	mov	r1, r6
   127d8:	mov	r2, r8
   127dc:	mov	r0, r4
   127e0:	bl	10954 <memmove@plt>
   127e4:	ldr	r0, [pc, #76]	; 12838 <__assert_fail@plt+0x1d88>
   127e8:	bl	11bd0 <__assert_fail@plt+0x1120>
   127ec:	str	r0, [r4]
   127f0:	mov	r0, r7
   127f4:	bl	11bd0 <__assert_fail@plt+0x1120>
   127f8:	str	r0, [r4, #4]
   127fc:	mov	r0, #17
   12800:	bl	11bd0 <__assert_fail@plt+0x1120>
   12804:	str	r0, [r4, #20]
   12808:	mov	r0, #16
   1280c:	bl	11bd0 <__assert_fail@plt+0x1120>
   12810:	str	r0, [r4, #24]
   12814:	ldr	r0, [r5, #28]
   12818:	bl	11bac <__assert_fail@plt+0x10fc>
   1281c:	bl	11bd0 <__assert_fail@plt+0x1120>
   12820:	str	r0, [r4, #28]
   12824:	mov	r0, #0
   12828:	b	12830 <__assert_fail@plt+0x1d80>
   1282c:	mvn	r0, #2
   12830:	add	sp, sp, #8
   12834:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12838:	andle	pc, sp, sp, ror #29
   1283c:	push	{r4, r5, r6, lr}
   12840:	mov	r4, r0
   12844:	bl	11efc <__assert_fail@plt+0x144c>
   12848:	subs	r5, r0, #0
   1284c:	bne	1289c <__assert_fail@plt+0x1dec>
   12850:	mov	r0, r4
   12854:	bl	13b7c <__assert_fail@plt+0x30cc>
   12858:	mov	r6, r0
   1285c:	ldr	r0, [r4, #36]	; 0x24
   12860:	bl	11bac <__assert_fail@plt+0x10fc>
   12864:	add	r2, r6, #1
   12868:	mov	r1, r4
   1286c:	lsl	r2, r2, #4
   12870:	mov	r3, r0
   12874:	mov	r0, r4
   12878:	bl	11f74 <__assert_fail@plt+0x14c4>
   1287c:	ldr	r0, [r4, #12]
   12880:	bl	11bac <__assert_fail@plt+0x10fc>
   12884:	mov	r6, r0
   12888:	ldr	r0, [r4, #32]
   1288c:	bl	11bac <__assert_fail@plt+0x10fc>
   12890:	add	r0, r0, r6
   12894:	bl	11bd0 <__assert_fail@plt+0x1120>
   12898:	str	r0, [r4, #4]
   1289c:	mov	r0, r5
   128a0:	pop	{r4, r5, r6, pc}
   128a4:	ubfx	r3, r0, #8, #8
   128a8:	sub	sp, sp, #8
   128ac:	lsl	r3, r3, #16
   128b0:	orr	r3, r3, r0, lsl #24
   128b4:	orr	r3, r3, r0, lsr #24
   128b8:	ubfx	r0, r0, #16, #8
   128bc:	orr	r0, r3, r0, lsl #8
   128c0:	add	sp, sp, #8
   128c4:	bx	lr
   128c8:	push	{r4, r5, r6, r7, r8, lr}
   128cc:	sub	sp, sp, #24
   128d0:	mov	r5, r3
   128d4:	add	r3, sp, #12
   128d8:	mov	r8, r0
   128dc:	mov	r7, r1
   128e0:	mov	r6, r2
   128e4:	bl	13f14 <__assert_fail@plt+0x3464>
   128e8:	ldr	r4, [sp, #12]
   128ec:	cmp	r0, #0
   128f0:	moveq	r0, r4
   128f4:	beq	12960 <__assert_fail@plt+0x1eb0>
   128f8:	cmp	r4, #4
   128fc:	bne	12954 <__assert_fail@plt+0x1ea4>
   12900:	ldr	ip, [r0]
   12904:	ubfx	r3, ip, #8, #8
   12908:	str	ip, [sp, #16]
   1290c:	lsl	r3, r3, #16
   12910:	orr	r3, r3, ip, lsl #24
   12914:	orr	r3, r3, ip, lsr #24
   12918:	ubfx	ip, ip, #16, #8
   1291c:	orr	ip, r3, ip, lsl #8
   12920:	adds	r0, ip, r5
   12924:	bcs	1295c <__assert_fail@plt+0x1eac>
   12928:	cmn	r0, #1
   1292c:	beq	1295c <__assert_fail@plt+0x1eac>
   12930:	bl	128a4 <__assert_fail@plt+0x1df4>
   12934:	add	r3, sp, #24
   12938:	mov	r1, r7
   1293c:	mov	r2, r6
   12940:	str	r0, [r3, #-4]!
   12944:	mov	r0, r8
   12948:	str	r4, [sp]
   1294c:	bl	1489c <__assert_fail@plt+0x3dec>
   12950:	b	12960 <__assert_fail@plt+0x1eb0>
   12954:	mvn	r0, #5
   12958:	b	12960 <__assert_fail@plt+0x1eb0>
   1295c:	mvn	r0, #16
   12960:	add	sp, sp, #24
   12964:	pop	{r4, r5, r6, r7, r8, pc}
   12968:	push	{r4, r5, r6, lr}
   1296c:	mov	r6, r2
   12970:	ldr	r2, [pc, #136]	; 12a00 <__assert_fail@plt+0x1f50>
   12974:	mov	r3, r6
   12978:	mov	r4, r0
   1297c:	mov	r5, r1
   12980:	add	r2, pc, r2
   12984:	bl	128c8 <__assert_fail@plt+0x1e18>
   12988:	add	r3, r0, #1
   1298c:	cmp	r3, #1
   12990:	pophi	{r4, r5, r6, pc}
   12994:	ldr	r2, [pc, #104]	; 12a04 <__assert_fail@plt+0x1f54>
   12998:	mov	r3, r6
   1299c:	mov	r0, r4
   129a0:	mov	r1, r5
   129a4:	add	r2, pc, r2
   129a8:	bl	128c8 <__assert_fail@plt+0x1e18>
   129ac:	add	r3, r0, #1
   129b0:	cmp	r3, #1
   129b4:	pophi	{r4, r5, r6, pc}
   129b8:	mov	r0, r4
   129bc:	mov	r1, r5
   129c0:	bl	138c0 <__assert_fail@plt+0x2e10>
   129c4:	cmp	r0, #0
   129c8:	mov	r5, r0
   129cc:	blt	129f8 <__assert_fail@plt+0x1f48>
   129d0:	mov	r0, r4
   129d4:	mov	r1, r5
   129d8:	mov	r2, r6
   129dc:	bl	12968 <__assert_fail@plt+0x1eb8>
   129e0:	cmp	r0, #0
   129e4:	popne	{r4, r5, r6, pc}
   129e8:	mov	r0, r4
   129ec:	mov	r1, r5
   129f0:	bl	138f8 <__assert_fail@plt+0x2e48>
   129f4:	b	129c4 <__assert_fail@plt+0x1f14>
   129f8:	mov	r0, #0
   129fc:	pop	{r4, r5, r6, pc}
   12a00:			; <UNDEFINED> instruction: 0x000024b3
   12a04:	andeq	r2, r0, r9, lsl #9
   12a08:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   12a0c:	mov	r6, r0
   12a10:	mov	r7, r1
   12a14:	mov	r0, r2
   12a18:	mov	r1, r3
   12a1c:	mov	r4, r2
   12a20:	mov	r8, r3
   12a24:	bl	13d30 <__assert_fail@plt+0x3280>
   12a28:	add	r9, sp, #8
   12a2c:	add	sl, sp, #12
   12a30:	mov	r5, r0
   12a34:	cmp	r5, #0
   12a38:	mov	r0, r4
   12a3c:	blt	12aa0 <__assert_fail@plt+0x1ff0>
   12a40:	mov	r3, sl
   12a44:	mov	r1, r5
   12a48:	mov	r2, r9
   12a4c:	bl	13ec8 <__assert_fail@plt+0x3418>
   12a50:	ldr	ip, [sp, #12]
   12a54:	cmn	ip, #1
   12a58:	mov	r3, r0
   12a5c:	beq	12b38 <__assert_fail@plt+0x2088>
   12a60:	cmp	ip, #0
   12a64:	blt	12a98 <__assert_fail@plt+0x1fe8>
   12a68:	str	ip, [sp]
   12a6c:	mov	r0, r6
   12a70:	mov	r1, r7
   12a74:	ldr	r2, [sp, #8]
   12a78:	bl	12374 <__assert_fail@plt+0x18c4>
   12a7c:	cmp	r0, #0
   12a80:	bne	12b44 <__assert_fail@plt+0x2094>
   12a84:	mov	r1, r5
   12a88:	mov	r0, r4
   12a8c:	bl	13d50 <__assert_fail@plt+0x32a0>
   12a90:	mov	r5, r0
   12a94:	b	12a34 <__assert_fail@plt+0x1f84>
   12a98:	mov	r0, ip
   12a9c:	b	12b44 <__assert_fail@plt+0x2094>
   12aa0:	mov	r1, r8
   12aa4:	bl	138c0 <__assert_fail@plt+0x2e10>
   12aa8:	cmp	r0, #0
   12aac:	mov	r5, r0
   12ab0:	blt	12b30 <__assert_fail@plt+0x2080>
   12ab4:	mov	r1, r5
   12ab8:	mov	r2, #0
   12abc:	mov	r0, r4
   12ac0:	bl	13cb4 <__assert_fail@plt+0x3204>
   12ac4:	mov	r1, r7
   12ac8:	mov	r8, r0
   12acc:	mov	r0, r6
   12ad0:	mov	r2, r8
   12ad4:	bl	125f8 <__assert_fail@plt+0x1b48>
   12ad8:	cmn	r0, #2
   12adc:	mov	r1, r0
   12ae0:	bne	12b00 <__assert_fail@plt+0x2050>
   12ae4:	mov	r1, r7
   12ae8:	mov	r0, r6
   12aec:	mov	r2, r8
   12af0:	bl	13c84 <__assert_fail@plt+0x31d4>
   12af4:	cmn	r0, #1
   12af8:	mov	r1, r0
   12afc:	beq	12b38 <__assert_fail@plt+0x2088>
   12b00:	cmp	r1, #0
   12b04:	blt	12b40 <__assert_fail@plt+0x2090>
   12b08:	mov	r0, r6
   12b0c:	mov	r2, r4
   12b10:	mov	r3, r5
   12b14:	bl	12a08 <__assert_fail@plt+0x1f58>
   12b18:	cmp	r0, #0
   12b1c:	bne	12b44 <__assert_fail@plt+0x2094>
   12b20:	mov	r0, r4
   12b24:	mov	r1, r5
   12b28:	bl	138f8 <__assert_fail@plt+0x2e48>
   12b2c:	b	12aa8 <__assert_fail@plt+0x1ff8>
   12b30:	mov	r0, #0
   12b34:	b	12b44 <__assert_fail@plt+0x2094>
   12b38:	mvn	r0, #12
   12b3c:	b	12b44 <__assert_fail@plt+0x2094>
   12b40:	mov	r0, r1
   12b44:	add	sp, sp, #16
   12b48:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12b4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b50:	mov	r7, r1
   12b54:	sub	sp, sp, #68	; 0x44
   12b58:	mov	r1, r2
   12b5c:	mov	r4, r0
   12b60:	mov	r9, r2
   12b64:	mov	r8, r3
   12b68:	bl	13d30 <__assert_fail@plt+0x3280>
   12b6c:	add	sl, sp, #48	; 0x30
   12b70:	add	r1, sp, #36	; 0x24
   12b74:	str	r1, [sp, #28]
   12b78:	mov	r5, r0
   12b7c:	cmp	r5, #0
   12b80:	mov	r0, r4
   12b84:	blt	12cb8 <__assert_fail@plt+0x2208>
   12b88:	mov	r1, r5
   12b8c:	add	r2, sp, #36	; 0x24
   12b90:	add	r3, sp, #40	; 0x28
   12b94:	bl	13ec8 <__assert_fail@plt+0x3418>
   12b98:	subs	fp, r0, #0
   12b9c:	ldr	r0, [sp, #40]	; 0x28
   12ba0:	beq	12d34 <__assert_fail@plt+0x2284>
   12ba4:	ands	r6, r0, #3
   12ba8:	bne	12d30 <__assert_fail@plt+0x2280>
   12bac:	mov	r0, r4
   12bb0:	mov	r1, r7
   12bb4:	ldr	r2, [sp, #36]	; 0x24
   12bb8:	add	r3, sp, #44	; 0x2c
   12bbc:	bl	13f14 <__assert_fail@plt+0x3464>
   12bc0:	subs	ip, r0, #0
   12bc4:	bne	12c98 <__assert_fail@plt+0x21e8>
   12bc8:	ldr	r0, [sp, #44]	; 0x2c
   12bcc:	cmn	r0, #1
   12bd0:	mvneq	r0, #15
   12bd4:	b	12d34 <__assert_fail@plt+0x2284>
   12bd8:	ldr	r3, [fp, r6, lsl #2]
   12bdc:	ubfx	r1, r3, #8, #8
   12be0:	str	r3, [sp, #52]	; 0x34
   12be4:	lsl	r1, r1, #16
   12be8:	orr	r1, r1, r3, lsl #24
   12bec:	orr	r1, r1, r3, lsr #24
   12bf0:	ubfx	r3, r3, #16, #8
   12bf4:	orr	r1, r1, r3, lsl #8
   12bf8:	ldr	r0, [ip, r1]
   12bfc:	str	r0, [sl]
   12c00:	ldr	r2, [sp, #48]	; 0x30
   12c04:	str	ip, [sp, #16]
   12c08:	ubfx	r3, r2, #8, #8
   12c0c:	str	r1, [sp, #20]
   12c10:	str	r2, [sp, #56]	; 0x38
   12c14:	lsl	r3, r3, #16
   12c18:	orr	r3, r3, r2, lsl #24
   12c1c:	orr	r3, r3, r2, lsr #24
   12c20:	ubfx	r2, r2, #16, #8
   12c24:	orr	r3, r3, r2, lsl #8
   12c28:	add	r3, r3, r8
   12c2c:	str	r3, [sp, #60]	; 0x3c
   12c30:	ubfx	r2, r3, #8, #8
   12c34:	lsl	r2, r2, #16
   12c38:	orr	r2, r2, r3, lsl #24
   12c3c:	orr	r2, r2, r3, lsr #24
   12c40:	ubfx	r3, r3, #16, #8
   12c44:	orr	r3, r2, r3, lsl #8
   12c48:	ldr	r2, [sp, #36]	; 0x24
   12c4c:	str	r3, [sp, #48]	; 0x30
   12c50:	mov	r0, r2
   12c54:	str	r2, [sp, #24]
   12c58:	bl	109fc <strlen@plt>
   12c5c:	ldr	r1, [sp, #20]
   12c60:	ldr	r2, [sp, #24]
   12c64:	stm	sp, {r1, sl}
   12c68:	mov	r1, #4
   12c6c:	str	r1, [sp, #8]
   12c70:	mov	r1, r7
   12c74:	mov	r3, r0
   12c78:	mov	r0, r4
   12c7c:	bl	14844 <__assert_fail@plt+0x3d94>
   12c80:	ldr	ip, [sp, #16]
   12c84:	cmn	r0, #3
   12c88:	beq	12d30 <__assert_fail@plt+0x2280>
   12c8c:	cmp	r0, #0
   12c90:	bne	12d34 <__assert_fail@plt+0x2284>
   12c94:	add	r6, r6, #1
   12c98:	ldr	r3, [sp, #40]	; 0x28
   12c9c:	cmp	r6, r3, lsr #2
   12ca0:	bcc	12bd8 <__assert_fail@plt+0x2128>
   12ca4:	mov	r1, r5
   12ca8:	mov	r0, r4
   12cac:	bl	13d50 <__assert_fail@plt+0x32a0>
   12cb0:	mov	r5, r0
   12cb4:	b	12b7c <__assert_fail@plt+0x20cc>
   12cb8:	mov	r1, r9
   12cbc:	bl	138c0 <__assert_fail@plt+0x2e10>
   12cc0:	cmp	r0, #0
   12cc4:	mov	r5, r0
   12cc8:	blt	12d28 <__assert_fail@plt+0x2278>
   12ccc:	mov	r1, r5
   12cd0:	mov	r2, #0
   12cd4:	mov	r0, r4
   12cd8:	bl	13cb4 <__assert_fail@plt+0x3204>
   12cdc:	mov	r1, r7
   12ce0:	mov	r2, r0
   12ce4:	mov	r0, r4
   12ce8:	bl	13c84 <__assert_fail@plt+0x31d4>
   12cec:	cmn	r0, #1
   12cf0:	mov	r1, r0
   12cf4:	beq	12d30 <__assert_fail@plt+0x2280>
   12cf8:	cmp	r0, #0
   12cfc:	blt	12d34 <__assert_fail@plt+0x2284>
   12d00:	mov	r0, r4
   12d04:	mov	r2, r5
   12d08:	mov	r3, r8
   12d0c:	bl	12b4c <__assert_fail@plt+0x209c>
   12d10:	cmp	r0, #0
   12d14:	bne	12d34 <__assert_fail@plt+0x2284>
   12d18:	mov	r0, r4
   12d1c:	mov	r1, r5
   12d20:	bl	138f8 <__assert_fail@plt+0x2e48>
   12d24:	b	12cc0 <__assert_fail@plt+0x2210>
   12d28:	mov	r0, #0
   12d2c:	b	12d34 <__assert_fail@plt+0x2284>
   12d30:	mvn	r0, #15
   12d34:	add	sp, sp, #68	; 0x44
   12d38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d3c:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   12d40:	mov	r6, r0
   12d44:	mov	r8, r1
   12d48:	mov	r0, r1
   12d4c:	mov	r7, r2
   12d50:	mov	r1, r2
   12d54:	ldr	r2, [pc, #196]	; 12e20 <__assert_fail@plt+0x2370>
   12d58:	mov	r5, r3
   12d5c:	add	r3, sp, #8
   12d60:	mov	r4, #0
   12d64:	add	r2, pc, r2
   12d68:	str	r4, [sp, #4]
   12d6c:	bl	13f14 <__assert_fail@plt+0x3464>
   12d70:	cmp	r0, #0
   12d74:	beq	12db4 <__assert_fail@plt+0x2304>
   12d78:	ldr	r3, [sp, #8]
   12d7c:	cmp	r3, #4
   12d80:	bne	12e08 <__assert_fail@plt+0x2358>
   12d84:	ldr	ip, [r0]
   12d88:	ubfx	r3, ip, #8, #8
   12d8c:	str	ip, [sp, #12]
   12d90:	lsl	r3, r3, #16
   12d94:	orr	r3, r3, ip, lsl #24
   12d98:	orr	r3, r3, ip, lsr #24
   12d9c:	ubfx	ip, ip, #16, #8
   12da0:	orr	r1, r3, ip, lsl #8
   12da4:	cmn	r1, #1
   12da8:	beq	12e08 <__assert_fail@plt+0x2358>
   12dac:	cmp	r1, r4
   12db0:	bne	12de8 <__assert_fail@plt+0x2338>
   12db4:	ldr	r2, [pc, #104]	; 12e24 <__assert_fail@plt+0x2374>
   12db8:	mov	r0, r8
   12dbc:	mov	r1, r7
   12dc0:	add	r3, sp, #4
   12dc4:	add	r2, pc, r2
   12dc8:	bl	13f14 <__assert_fail@plt+0x3464>
   12dcc:	subs	r4, r0, #0
   12dd0:	ldreq	r0, [sp, #4]
   12dd4:	beq	12df0 <__assert_fail@plt+0x2340>
   12dd8:	mov	r0, r6
   12ddc:	mov	r1, r4
   12de0:	bl	14178 <__assert_fail@plt+0x36c8>
   12de4:	b	12df0 <__assert_fail@plt+0x2340>
   12de8:	mov	r0, r6
   12dec:	bl	144c8 <__assert_fail@plt+0x3a18>
   12df0:	cmp	r0, #0
   12df4:	bge	12e10 <__assert_fail@plt+0x2360>
   12df8:	ldr	r3, [sp, #4]
   12dfc:	cmn	r3, #1
   12e00:	mvneq	r0, #15
   12e04:	b	12e18 <__assert_fail@plt+0x2368>
   12e08:	mvn	r0, #5
   12e0c:	b	12e18 <__assert_fail@plt+0x2368>
   12e10:	cmp	r5, #0
   12e14:	strne	r4, [r5]
   12e18:	add	sp, sp, #16
   12e1c:	pop	{r4, r5, r6, r7, r8, pc}
   12e20:	ldrdeq	r2, [r0], -r7
   12e24:	andeq	r2, r0, lr, ror r0
   12e28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e2c:	sub	sp, sp, #76	; 0x4c
   12e30:	mov	r5, r0
   12e34:	mov	r4, r1
   12e38:	bl	13fcc <__assert_fail@plt+0x351c>
   12e3c:	mov	r8, r0
   12e40:	mov	r0, r5
   12e44:	bl	13584 <__assert_fail@plt+0x2ad4>
   12e48:	cmp	r0, #0
   12e4c:	bne	1353c <__assert_fail@plt+0x2a8c>
   12e50:	mov	r0, r4
   12e54:	bl	13584 <__assert_fail@plt+0x2ad4>
   12e58:	subs	r1, r0, #0
   12e5c:	movne	r0, r1
   12e60:	bne	1353c <__assert_fail@plt+0x2a8c>
   12e64:	mov	r0, r4
   12e68:	mov	r2, r8
   12e6c:	bl	12968 <__assert_fail@plt+0x1eb8>
   12e70:	subs	r6, r0, #0
   12e74:	bne	13140 <__assert_fail@plt+0x2690>
   12e78:	ldr	r1, [pc, #1732]	; 13544 <__assert_fail@plt+0x2a94>
   12e7c:	mov	r0, r4
   12e80:	add	r1, pc, r1
   12e84:	bl	14178 <__assert_fail@plt+0x36c8>
   12e88:	subs	r2, r0, #0
   12e8c:	bge	12ebc <__assert_fail@plt+0x240c>
   12e90:	cmn	r2, #1
   12e94:	movne	r6, r2
   12e98:	bne	13140 <__assert_fail@plt+0x2690>
   12e9c:	ldr	r1, [pc, #1700]	; 13548 <__assert_fail@plt+0x2a98>
   12ea0:	mov	r0, r4
   12ea4:	add	r1, pc, r1
   12ea8:	bl	14178 <__assert_fail@plt+0x36c8>
   12eac:	cmn	r0, #1
   12eb0:	mov	r6, r0
   12eb4:	bne	12edc <__assert_fail@plt+0x242c>
   12eb8:	b	13160 <__assert_fail@plt+0x26b0>
   12ebc:	mov	r1, r6
   12ec0:	mov	r0, r4
   12ec4:	mov	r3, r8
   12ec8:	bl	12b4c <__assert_fail@plt+0x209c>
   12ecc:	cmp	r0, #0
   12ed0:	movne	r6, r0
   12ed4:	bne	13140 <__assert_fail@plt+0x2690>
   12ed8:	b	12e9c <__assert_fail@plt+0x23ec>
   12edc:	cmp	r0, #0
   12ee0:	blt	13140 <__assert_fail@plt+0x2690>
   12ee4:	ldr	r1, [pc, #1632]	; 1354c <__assert_fail@plt+0x2a9c>
   12ee8:	mov	r0, r5
   12eec:	add	r1, pc, r1
   12ef0:	bl	14178 <__assert_fail@plt+0x36c8>
   12ef4:	cmn	r0, #1
   12ef8:	mov	sl, r0
   12efc:	blt	1313c <__assert_fail@plt+0x268c>
   12f00:	mov	r0, r4
   12f04:	mov	r1, r6
   12f08:	bl	13d30 <__assert_fail@plt+0x3280>
   12f0c:	add	r3, sp, #52	; 0x34
   12f10:	str	r3, [sp, #36]	; 0x24
   12f14:	add	r3, sp, #60	; 0x3c
   12f18:	str	r3, [sp, #40]	; 0x28
   12f1c:	mov	fp, r0
   12f20:	cmp	fp, #0
   12f24:	blt	13160 <__assert_fail@plt+0x26b0>
   12f28:	mov	r0, r4
   12f2c:	mov	r1, fp
   12f30:	add	r2, sp, #52	; 0x34
   12f34:	add	r3, sp, #56	; 0x38
   12f38:	bl	13ec8 <__assert_fail@plt+0x3418>
   12f3c:	subs	r8, r0, #0
   12f40:	bne	12f58 <__assert_fail@plt+0x24a8>
   12f44:	ldr	r6, [sp, #56]	; 0x38
   12f48:	cmn	r6, #1
   12f4c:	bne	13120 <__assert_fail@plt+0x2670>
   12f50:	mvn	r6, #12
   12f54:	b	13140 <__assert_fail@plt+0x2690>
   12f58:	add	r3, sp, #68	; 0x44
   12f5c:	str	r3, [sp, #28]
   12f60:	add	r3, sp, #64	; 0x40
   12f64:	str	r3, [sp, #32]
   12f68:	ldr	r7, [sp, #56]	; 0x38
   12f6c:	mov	r0, r8
   12f70:	mov	r1, #0
   12f74:	mov	r2, r7
   12f78:	bl	10a5c <memchr@plt>
   12f7c:	cmp	r0, #0
   12f80:	beq	13118 <__assert_fail@plt+0x2668>
   12f84:	rsb	r6, r8, r0
   12f88:	sub	r7, r7, #1
   12f8c:	add	r3, r6, #1
   12f90:	mov	r0, r8
   12f94:	mov	r1, #58	; 0x3a
   12f98:	mov	r2, r6
   12f9c:	add	r3, r8, r3
   12fa0:	rsb	r7, r6, r7
   12fa4:	str	r3, [sp, #20]
   12fa8:	str	r7, [sp, #56]	; 0x38
   12fac:	bl	10a5c <memchr@plt>
   12fb0:	cmp	r0, #0
   12fb4:	beq	13118 <__assert_fail@plt+0x2668>
   12fb8:	ldrb	r1, [r0]
   12fbc:	cmp	r1, #58	; 0x3a
   12fc0:	bne	13118 <__assert_fail@plt+0x2668>
   12fc4:	rsb	r7, r8, r0
   12fc8:	sub	r3, r6, #1
   12fcc:	cmp	r7, r3
   12fd0:	beq	13118 <__assert_fail@plt+0x2668>
   12fd4:	add	r9, r0, #1
   12fd8:	rsb	r2, r7, r6
   12fdc:	sub	r2, r2, #1
   12fe0:	mov	r0, r9
   12fe4:	bl	10a5c <memchr@plt>
   12fe8:	cmp	r0, #0
   12fec:	beq	13118 <__assert_fail@plt+0x2668>
   12ff0:	ldrb	r3, [r0]
   12ff4:	cmp	r3, #58	; 0x3a
   12ff8:	bne	13118 <__assert_fail@plt+0x2668>
   12ffc:	subs	r3, r0, r9
   13000:	str	r3, [sp, #24]
   13004:	beq	13118 <__assert_fail@plt+0x2668>
   13008:	add	r3, r0, #1
   1300c:	add	r1, sp, #60	; 0x3c
   13010:	mov	r2, #10
   13014:	str	r3, [sp, #16]
   13018:	mov	r0, r3
   1301c:	bl	109f0 <strtoul@plt>
   13020:	ldr	r2, [sp, #60]	; 0x3c
   13024:	ldr	r3, [sp, #16]
   13028:	ldrb	r1, [r2]
   1302c:	cmp	r1, #0
   13030:	mov	r6, r0
   13034:	bne	13118 <__assert_fail@plt+0x2668>
   13038:	cmp	r2, r3
   1303c:	bls	13118 <__assert_fail@plt+0x2668>
   13040:	cmn	sl, #1
   13044:	ldr	r2, [sp, #52]	; 0x34
   13048:	bne	13054 <__assert_fail@plt+0x25a4>
   1304c:	mvn	r0, #0
   13050:	b	1311c <__assert_fail@plt+0x266c>
   13054:	mov	r1, sl
   13058:	mov	r0, r5
   1305c:	add	r3, sp, #68	; 0x44
   13060:	bl	13f14 <__assert_fail@plt+0x3464>
   13064:	subs	r1, r0, #0
   13068:	ldreq	r0, [sp, #68]	; 0x44
   1306c:	beq	130fc <__assert_fail@plt+0x264c>
   13070:	mov	r0, r5
   13074:	bl	14178 <__assert_fail@plt+0x36c8>
   13078:	subs	r1, r0, #0
   1307c:	blt	130f8 <__assert_fail@plt+0x2648>
   13080:	mov	r0, r5
   13084:	bl	13f50 <__assert_fail@plt+0x34a0>
   13088:	subs	r3, r0, #0
   1308c:	beq	1304c <__assert_fail@plt+0x259c>
   13090:	mov	r2, r7
   13094:	mov	r0, r4
   13098:	mov	r1, r8
   1309c:	str	r3, [sp, #16]
   130a0:	bl	1408c <__assert_fail@plt+0x35dc>
   130a4:	ldr	r3, [sp, #16]
   130a8:	cmn	r0, #1
   130ac:	mov	r7, r0
   130b0:	beq	13118 <__assert_fail@plt+0x2668>
   130b4:	cmp	r0, #0
   130b8:	movlt	r0, r0
   130bc:	blt	130fc <__assert_fail@plt+0x264c>
   130c0:	mov	r0, r3
   130c4:	bl	128a4 <__assert_fail@plt+0x1df4>
   130c8:	add	r3, sp, #64	; 0x40
   130cc:	str	r6, [sp]
   130d0:	mov	r1, r7
   130d4:	str	r3, [sp, #4]
   130d8:	mov	r2, r9
   130dc:	mov	r3, #4
   130e0:	str	r3, [sp, #8]
   130e4:	ldr	r3, [sp, #24]
   130e8:	str	r0, [sp, #64]	; 0x40
   130ec:	mov	r0, r4
   130f0:	bl	14844 <__assert_fail@plt+0x3d94>
   130f4:	b	130fc <__assert_fail@plt+0x264c>
   130f8:	mov	r0, r1
   130fc:	cmp	r0, #0
   13100:	bne	1311c <__assert_fail@plt+0x266c>
   13104:	ldr	r3, [sp, #56]	; 0x38
   13108:	cmp	r3, #0
   1310c:	ble	13128 <__assert_fail@plt+0x2678>
   13110:	ldr	r8, [sp, #20]
   13114:	b	12f68 <__assert_fail@plt+0x24b8>
   13118:	mvn	r0, #15
   1311c:	mov	r6, r0
   13120:	cmp	r6, #0
   13124:	bne	13140 <__assert_fail@plt+0x2690>
   13128:	mov	r1, fp
   1312c:	mov	r0, r4
   13130:	bl	13d50 <__assert_fail@plt+0x32a0>
   13134:	mov	fp, r0
   13138:	b	12f20 <__assert_fail@plt+0x2470>
   1313c:	mov	r6, r0
   13140:	mvn	r0, #0
   13144:	bl	128a4 <__assert_fail@plt+0x1df4>
   13148:	str	r0, [r4]
   1314c:	mvn	r0, #0
   13150:	bl	128a4 <__assert_fail@plt+0x1df4>
   13154:	str	r0, [r5]
   13158:	mov	r0, r6
   1315c:	b	1353c <__assert_fail@plt+0x2a8c>
   13160:	mov	r0, r4
   13164:	mov	r1, #0
   13168:	bl	138c0 <__assert_fail@plt+0x2e10>
   1316c:	ldr	r8, [pc, #988]	; 13550 <__assert_fail@plt+0x2aa0>
   13170:	add	r8, pc, r8
   13174:	mov	r7, r0
   13178:	cmp	r7, #0
   1317c:	blt	131ec <__assert_fail@plt+0x273c>
   13180:	mov	r0, r4
   13184:	mov	r1, r7
   13188:	mov	r2, r8
   1318c:	bl	13c84 <__assert_fail@plt+0x31d4>
   13190:	cmn	r0, #1
   13194:	mov	r6, r0
   13198:	beq	131d8 <__assert_fail@plt+0x2728>
   1319c:	cmp	r0, #0
   131a0:	blt	13140 <__assert_fail@plt+0x2690>
   131a4:	mov	r1, r4
   131a8:	mov	r0, r5
   131ac:	mov	r2, r7
   131b0:	mov	r3, #0
   131b4:	bl	12d3c <__assert_fail@plt+0x228c>
   131b8:	subs	r1, r0, #0
   131bc:	blt	13534 <__assert_fail@plt+0x2a84>
   131c0:	mov	r3, r6
   131c4:	mov	r0, r5
   131c8:	mov	r2, r4
   131cc:	bl	12a08 <__assert_fail@plt+0x1f58>
   131d0:	subs	r6, r0, #0
   131d4:	bne	13140 <__assert_fail@plt+0x2690>
   131d8:	mov	r1, r7
   131dc:	mov	r0, r4
   131e0:	bl	138f8 <__assert_fail@plt+0x2e48>
   131e4:	mov	r7, r0
   131e8:	b	13178 <__assert_fail@plt+0x26c8>
   131ec:	ldr	r6, [pc, #864]	; 13554 <__assert_fail@plt+0x2aa4>
   131f0:	mov	r0, r4
   131f4:	mov	r1, #0
   131f8:	add	r6, pc, r6
   131fc:	mov	r2, r6
   13200:	bl	13c84 <__assert_fail@plt+0x31d4>
   13204:	subs	r8, r0, #0
   13208:	blt	13520 <__assert_fail@plt+0x2a70>
   1320c:	mov	r0, r5
   13210:	mov	r1, #0
   13214:	mov	r2, r6
   13218:	bl	13c84 <__assert_fail@plt+0x31d4>
   1321c:	cmn	r0, #1
   13220:	mov	r7, r0
   13224:	bne	1323c <__assert_fail@plt+0x278c>
   13228:	mov	r0, r5
   1322c:	mov	r1, #0
   13230:	mov	r2, r6
   13234:	bl	125f8 <__assert_fail@plt+0x1b48>
   13238:	mov	r7, r0
   1323c:	cmp	r7, #0
   13240:	blt	134fc <__assert_fail@plt+0x2a4c>
   13244:	mov	r0, r4
   13248:	mov	r1, r8
   1324c:	bl	13d30 <__assert_fail@plt+0x3280>
   13250:	add	r3, sp, #56	; 0x38
   13254:	str	r3, [sp, #36]	; 0x24
   13258:	ldr	r3, [pc, #760]	; 13558 <__assert_fail@plt+0x2aa8>
   1325c:	add	r3, pc, r3
   13260:	str	r3, [sp, #40]	; 0x28
   13264:	ldr	r3, [pc, #752]	; 1355c <__assert_fail@plt+0x2aac>
   13268:	add	r3, pc, r3
   1326c:	str	r3, [sp, #44]	; 0x2c
   13270:	str	r0, [sp, #20]
   13274:	ldr	r3, [sp, #20]
   13278:	cmp	r3, #0
   1327c:	blt	13520 <__assert_fail@plt+0x2a70>
   13280:	mov	r0, r4
   13284:	ldr	r1, [sp, #20]
   13288:	add	r2, sp, #56	; 0x38
   1328c:	add	r3, sp, #52	; 0x34
   13290:	bl	13ec8 <__assert_fail@plt+0x3418>
   13294:	ldr	r6, [sp, #52]	; 0x34
   13298:	subs	sl, r0, #0
   1329c:	beq	13518 <__assert_fail@plt+0x2a68>
   132a0:	cmp	r6, #0
   132a4:	ble	13504 <__assert_fail@plt+0x2a54>
   132a8:	mov	r1, #0
   132ac:	mov	r2, r6
   132b0:	bl	10a5c <memchr@plt>
   132b4:	sub	r3, r6, #1
   132b8:	add	r3, sl, r3
   132bc:	cmp	r0, r3
   132c0:	bne	13504 <__assert_fail@plt+0x2a54>
   132c4:	ldrb	r1, [sl]
   132c8:	add	r9, sl, r6
   132cc:	cmp	r1, #47	; 0x2f
   132d0:	bne	13504 <__assert_fail@plt+0x2a54>
   132d4:	add	fp, sl, #1
   132d8:	mov	r0, fp
   132dc:	bl	10a08 <strchr@plt>
   132e0:	subs	r6, r0, #0
   132e4:	bne	132f0 <__assert_fail@plt+0x2840>
   132e8:	mvn	r6, #15
   132ec:	b	13140 <__assert_fail@plt+0x2690>
   132f0:	rsb	r3, r6, r9
   132f4:	rsb	sl, sl, r6
   132f8:	cmp	r3, #12
   132fc:	sub	sl, sl, #1
   13300:	ble	132e8 <__assert_fail@plt+0x2838>
   13304:	ldr	r1, [sp, #40]	; 0x28
   13308:	mov	r2, #13
   1330c:	bl	10978 <memcmp@plt>
   13310:	subs	r1, r0, #0
   13314:	bne	132e8 <__assert_fail@plt+0x2838>
   13318:	mov	r3, sl
   1331c:	mov	r0, r4
   13320:	mov	r2, fp
   13324:	add	r6, r6, #13
   13328:	str	r6, [sp, #24]
   1332c:	bl	13bb4 <__assert_fail@plt+0x3104>
   13330:	rsb	r9, r6, r9
   13334:	subs	sl, r0, #0
   13338:	blt	132e8 <__assert_fail@plt+0x2838>
   1333c:	mov	r0, r4
   13340:	mov	r1, sl
   13344:	ldr	r2, [sp, #44]	; 0x2c
   13348:	bl	13c84 <__assert_fail@plt+0x31d4>
   1334c:	cmp	r0, #0
   13350:	blt	132e8 <__assert_fail@plt+0x2838>
   13354:	add	r3, sp, #60	; 0x3c
   13358:	mov	r0, r5
   1335c:	mov	r1, r4
   13360:	mov	r2, sl
   13364:	str	r3, [sp, #28]
   13368:	bl	12d3c <__assert_fail@plt+0x228c>
   1336c:	subs	r6, r0, #0
   13370:	blt	13518 <__assert_fail@plt+0x2a68>
   13374:	ldr	r0, [sp, #60]	; 0x3c
   13378:	cmp	r0, #0
   1337c:	bne	13408 <__assert_fail@plt+0x2958>
   13380:	mov	r0, r5
   13384:	bl	13584 <__assert_fail@plt+0x2ad4>
   13388:	subs	r8, r0, #0
   1338c:	bne	133fc <__assert_fail@plt+0x294c>
   13390:	mov	fp, r8
   13394:	mov	r8, r6
   13398:	add	r3, sp, #68	; 0x44
   1339c:	str	r3, [sp, #32]
   133a0:	add	r2, sp, #68	; 0x44
   133a4:	mov	r0, r5
   133a8:	mov	r1, r8
   133ac:	bl	13cb4 <__assert_fail@plt+0x3204>
   133b0:	ldr	r2, [sp, #68]	; 0x44
   133b4:	cmp	r0, #0
   133b8:	moveq	r8, r2
   133bc:	beq	133fc <__assert_fail@plt+0x294c>
   133c0:	cmp	r2, #0
   133c4:	beq	133ec <__assert_fail@plt+0x293c>
   133c8:	mov	r1, r8
   133cc:	mov	r0, r5
   133d0:	bl	143f4 <__assert_fail@plt+0x3944>
   133d4:	subs	r8, r0, #0
   133d8:	blt	1350c <__assert_fail@plt+0x2a5c>
   133dc:	ldr	r2, [sp, #68]	; 0x44
   133e0:	add	r2, r2, #1
   133e4:	add	fp, fp, r2
   133e8:	b	133a0 <__assert_fail@plt+0x28f0>
   133ec:	cmp	fp, #0
   133f0:	moveq	r8, #1
   133f4:	beq	13410 <__assert_fail@plt+0x2960>
   133f8:	mov	r8, fp
   133fc:	cmp	r8, #0
   13400:	bge	13410 <__assert_fail@plt+0x2960>
   13404:	b	1350c <__assert_fail@plt+0x2a5c>
   13408:	bl	109fc <strlen@plt>
   1340c:	mov	r8, r0
   13410:	cmp	r8, #1
   13414:	add	r2, sp, #64	; 0x40
   13418:	mov	r0, r5
   1341c:	str	r2, [sp]
   13420:	movle	fp, #0
   13424:	movgt	fp, #1
   13428:	add	r3, r8, fp
   1342c:	mov	r1, r7
   13430:	add	r3, r3, r9
   13434:	ldr	r2, [sp, #56]	; 0x38
   13438:	add	r3, r3, #1
   1343c:	bl	122a4 <__assert_fail@plt+0x17f4>
   13440:	cmp	r0, #0
   13444:	blt	13514 <__assert_fail@plt+0x2a64>
   13448:	ldr	r3, [sp, #60]	; 0x3c
   1344c:	cmp	r3, #0
   13450:	bne	13470 <__assert_fail@plt+0x29c0>
   13454:	mov	r0, r5
   13458:	mov	r1, r4
   1345c:	mov	r2, sl
   13460:	add	r3, sp, #60	; 0x3c
   13464:	bl	12d3c <__assert_fail@plt+0x228c>
   13468:	subs	r6, r0, #0
   1346c:	blt	13518 <__assert_fail@plt+0x2a68>
   13470:	cmp	fp, #0
   13474:	ldr	sl, [sp, #64]	; 0x40
   13478:	beq	134b8 <__assert_fail@plt+0x2a08>
   1347c:	ldr	r1, [sp, #60]	; 0x3c
   13480:	add	r3, r8, #1
   13484:	cmp	r1, #0
   13488:	bne	134a8 <__assert_fail@plt+0x29f8>
   1348c:	mov	r0, r5
   13490:	mov	r1, r6
   13494:	mov	r2, sl
   13498:	bl	141c8 <__assert_fail@plt+0x3718>
   1349c:	cmp	r0, #0
   134a0:	bge	134bc <__assert_fail@plt+0x2a0c>
   134a4:	b	13514 <__assert_fail@plt+0x2a64>
   134a8:	mov	r0, sl
   134ac:	mov	r2, r3
   134b0:	bl	1096c <memcpy@plt>
   134b4:	b	134bc <__assert_fail@plt+0x2a0c>
   134b8:	sub	r8, r8, #1
   134bc:	add	r0, r8, #1
   134c0:	mov	r3, #47	; 0x2f
   134c4:	mov	r2, r9
   134c8:	strb	r3, [sl, r8]
   134cc:	ldr	r1, [sp, #24]
   134d0:	add	r0, sl, r0
   134d4:	add	r9, sl, r9
   134d8:	bl	1096c <memcpy@plt>
   134dc:	add	ip, r9, r8
   134e0:	mov	r3, #0
   134e4:	mov	r0, r4
   134e8:	ldr	r1, [sp, #20]
   134ec:	strb	r3, [ip, #1]
   134f0:	bl	13d50 <__assert_fail@plt+0x32a0>
   134f4:	str	r0, [sp, #20]
   134f8:	b	13274 <__assert_fail@plt+0x27c4>
   134fc:	mov	r6, r7
   13500:	b	13518 <__assert_fail@plt+0x2a68>
   13504:	mvn	r6, #14
   13508:	b	13140 <__assert_fail@plt+0x2690>
   1350c:	mov	r6, r8
   13510:	b	13518 <__assert_fail@plt+0x2a68>
   13514:	mov	r6, r0
   13518:	cmp	r6, #0
   1351c:	bne	13140 <__assert_fail@plt+0x2690>
   13520:	mvn	r0, #0
   13524:	bl	128a4 <__assert_fail@plt+0x1df4>
   13528:	str	r0, [r4]
   1352c:	mov	r0, #0
   13530:	b	1353c <__assert_fail@plt+0x2a8c>
   13534:	mov	r6, r1
   13538:	b	13140 <__assert_fail@plt+0x2690>
   1353c:	add	sp, sp, #76	; 0x4c
   13540:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13544:	andeq	r1, r0, lr, asr #31
   13548:			; <UNDEFINED> instruction: 0x00001fbc
   1354c:	andeq	r1, r0, r0, lsl #31
   13550:	andeq	r1, r0, r9, lsl #26
   13554:	andeq	r1, r0, r5, ror ip
   13558:	andeq	r1, r0, r9, lsr #24
   1355c:	andeq	r1, r0, r1, lsl ip
   13560:	ubfx	r3, r0, #8, #8
   13564:	sub	sp, sp, #8
   13568:	lsl	r3, r3, #16
   1356c:	orr	r3, r3, r0, lsl #24
   13570:	orr	r3, r3, r0, lsr #24
   13574:	ubfx	r0, r0, #16, #8
   13578:	orr	r0, r3, r0, lsl #8
   1357c:	add	sp, sp, #8
   13580:	bx	lr
   13584:	push	{r4, lr}
   13588:	mov	r4, r0
   1358c:	ldr	r0, [r0]
   13590:	bl	13560 <__assert_fail@plt+0x2ab0>
   13594:	ldr	r3, [pc, #96]	; 135fc <__assert_fail@plt+0x2b4c>
   13598:	cmp	r0, r3
   1359c:	bne	135c8 <__assert_fail@plt+0x2b18>
   135a0:	ldr	r0, [r4, #20]
   135a4:	bl	13560 <__assert_fail@plt+0x2ab0>
   135a8:	cmp	r0, #15
   135ac:	bls	135ec <__assert_fail@plt+0x2b3c>
   135b0:	ldr	r0, [r4, #24]
   135b4:	bl	13560 <__assert_fail@plt+0x2ab0>
   135b8:	cmp	r0, #17
   135bc:	mvnhi	r0, #9
   135c0:	movls	r0, #0
   135c4:	pop	{r4, pc}
   135c8:	ldr	r3, [pc, #48]	; 13600 <__assert_fail@plt+0x2b50>
   135cc:	cmp	r0, r3
   135d0:	bne	135f4 <__assert_fail@plt+0x2b44>
   135d4:	ldr	r0, [r4, #36]	; 0x24
   135d8:	bl	13560 <__assert_fail@plt+0x2ab0>
   135dc:	cmp	r0, #0
   135e0:	mvneq	r0, #6
   135e4:	movne	r0, #0
   135e8:	pop	{r4, pc}
   135ec:	mvn	r0, #9
   135f0:	pop	{r4, pc}
   135f4:	mvn	r0, #8
   135f8:	pop	{r4, pc}
   135fc:	andle	pc, sp, sp, ror #29
   13600:	svccs	0x00f20112
   13604:	push	{r4, r5, r6, r7, r8, lr}
   13608:	mov	r4, r0
   1360c:	ldr	r0, [r0, #8]
   13610:	mov	r5, r1
   13614:	mov	r7, r2
   13618:	bl	13560 <__assert_fail@plt+0x2ab0>
   1361c:	adds	r6, r0, r5
   13620:	bcs	1366c <__assert_fail@plt+0x2bbc>
   13624:	adds	r8, r6, r7
   13628:	bcs	1366c <__assert_fail@plt+0x2bbc>
   1362c:	ldr	r0, [r4, #4]
   13630:	bl	13560 <__assert_fail@plt+0x2ab0>
   13634:	cmp	r8, r0
   13638:	bhi	1366c <__assert_fail@plt+0x2bbc>
   1363c:	ldr	r0, [r4, #20]
   13640:	bl	13560 <__assert_fail@plt+0x2ab0>
   13644:	cmp	r0, #16
   13648:	bls	13664 <__assert_fail@plt+0x2bb4>
   1364c:	adds	r5, r5, r7
   13650:	bcs	1366c <__assert_fail@plt+0x2bbc>
   13654:	ldr	r0, [r4, #36]	; 0x24
   13658:	bl	13560 <__assert_fail@plt+0x2ab0>
   1365c:	cmp	r5, r0
   13660:	bhi	1366c <__assert_fail@plt+0x2bbc>
   13664:	add	r0, r4, r6
   13668:	pop	{r4, r5, r6, r7, r8, pc}
   1366c:	mov	r0, #0
   13670:	pop	{r4, r5, r6, r7, r8, pc}
   13674:	push	{r4, r5, r6, r7, r8, lr}
   13678:	mvn	r3, #7
   1367c:	mov	r5, r2
   13680:	str	r3, [r2]
   13684:	mov	r2, #4
   13688:	mov	r7, r0
   1368c:	mov	r6, r1
   13690:	bl	13604 <__assert_fail@plt+0x2b54>
   13694:	cmp	r0, #0
   13698:	beq	13768 <__assert_fail@plt+0x2cb8>
   1369c:	ldr	r0, [r0]
   136a0:	add	r4, r6, #4
   136a4:	bl	13560 <__assert_fail@plt+0x2ab0>
   136a8:	mvn	r3, #10
   136ac:	str	r3, [r5]
   136b0:	sub	r3, r0, #1
   136b4:	mov	r8, r0
   136b8:	cmp	r3, #8
   136bc:	addls	pc, pc, r3, lsl #2
   136c0:	b	13768 <__assert_fail@plt+0x2cb8>
   136c4:	b	136f4 <__assert_fail@plt+0x2c44>
   136c8:	b	1373c <__assert_fail@plt+0x2c8c>
   136cc:	b	13714 <__assert_fail@plt+0x2c64>
   136d0:	b	1373c <__assert_fail@plt+0x2c8c>
   136d4:	b	13768 <__assert_fail@plt+0x2cb8>
   136d8:	b	13768 <__assert_fail@plt+0x2cb8>
   136dc:	b	13768 <__assert_fail@plt+0x2cb8>
   136e0:	b	13768 <__assert_fail@plt+0x2cb8>
   136e4:	b	1373c <__assert_fail@plt+0x2c8c>
   136e8:	ldrb	r3, [r0]
   136ec:	cmp	r3, #0
   136f0:	beq	1373c <__assert_fail@plt+0x2c8c>
   136f4:	mov	r1, r4
   136f8:	mov	r0, r7
   136fc:	mov	r2, #1
   13700:	add	r4, r4, #1
   13704:	bl	13604 <__assert_fail@plt+0x2b54>
   13708:	cmp	r0, #0
   1370c:	bne	136e8 <__assert_fail@plt+0x2c38>
   13710:	b	13768 <__assert_fail@plt+0x2cb8>
   13714:	mov	r0, r7
   13718:	mov	r1, r4
   1371c:	mov	r2, #4
   13720:	bl	13604 <__assert_fail@plt+0x2b54>
   13724:	cmp	r0, #0
   13728:	beq	13768 <__assert_fail@plt+0x2cb8>
   1372c:	ldr	r0, [r0]
   13730:	add	r4, r6, #12
   13734:	bl	13560 <__assert_fail@plt+0x2ab0>
   13738:	add	r4, r4, r0
   1373c:	mov	r0, r7
   13740:	mov	r1, r6
   13744:	rsb	r2, r6, r4
   13748:	bl	13604 <__assert_fail@plt+0x2b54>
   1374c:	cmp	r0, #0
   13750:	beq	13768 <__assert_fail@plt+0x2cb8>
   13754:	add	r4, r4, #3
   13758:	mov	r0, r8
   1375c:	bic	r4, r4, #3
   13760:	str	r4, [r5]
   13764:	pop	{r4, r5, r6, r7, r8, pc}
   13768:	mov	r0, #9
   1376c:	pop	{r4, r5, r6, r7, r8, pc}
   13770:	subs	r3, r1, #0
   13774:	push	{r0, r1, r2, lr}
   13778:	str	r1, [sp, #4]
   1377c:	bge	13788 <__assert_fail@plt+0x2cd8>
   13780:	mvn	r0, #3
   13784:	b	137a4 <__assert_fail@plt+0x2cf4>
   13788:	tst	r3, #3
   1378c:	bne	13780 <__assert_fail@plt+0x2cd0>
   13790:	add	r2, sp, #4
   13794:	bl	13674 <__assert_fail@plt+0x2bc4>
   13798:	cmp	r0, #1
   1379c:	bne	13780 <__assert_fail@plt+0x2cd0>
   137a0:	ldr	r0, [sp, #4]
   137a4:	add	sp, sp, #12
   137a8:	pop	{pc}		; (ldr pc, [sp], #4)
   137ac:	subs	r3, r1, #0
   137b0:	push	{r0, r1, r2, lr}
   137b4:	str	r1, [sp, #4]
   137b8:	bge	137c4 <__assert_fail@plt+0x2d14>
   137bc:	mvn	r0, #3
   137c0:	b	137e0 <__assert_fail@plt+0x2d30>
   137c4:	tst	r3, #3
   137c8:	bne	137bc <__assert_fail@plt+0x2d0c>
   137cc:	add	r2, sp, #4
   137d0:	bl	13674 <__assert_fail@plt+0x2bc4>
   137d4:	cmp	r0, #3
   137d8:	bne	137bc <__assert_fail@plt+0x2d0c>
   137dc:	ldr	r0, [sp, #4]
   137e0:	add	sp, sp, #12
   137e4:	pop	{pc}		; (ldr pc, [sp], #4)
   137e8:	mov	r3, #0
   137ec:	cmp	r1, r3
   137f0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   137f4:	mov	r6, r0
   137f8:	mov	r4, r2
   137fc:	str	r3, [sp, #4]
   13800:	bge	1380c <__assert_fail@plt+0x2d5c>
   13804:	add	r7, sp, #4
   13808:	b	13830 <__assert_fail@plt+0x2d80>
   1380c:	bl	13770 <__assert_fail@plt+0x2cc0>
   13810:	cmp	r0, #0
   13814:	str	r0, [sp, #4]
   13818:	bge	13804 <__assert_fail@plt+0x2d54>
   1381c:	b	138b8 <__assert_fail@plt+0x2e08>
   13820:	cmp	r0, #9
   13824:	beq	13888 <__assert_fail@plt+0x2dd8>
   13828:	cmp	r0, #1
   1382c:	beq	13850 <__assert_fail@plt+0x2da0>
   13830:	ldr	r5, [sp, #4]
   13834:	mov	r0, r6
   13838:	mov	r2, r7
   1383c:	mov	r1, r5
   13840:	bl	13674 <__assert_fail@plt+0x2bc4>
   13844:	cmp	r0, #2
   13848:	bne	13820 <__assert_fail@plt+0x2d70>
   1384c:	b	13864 <__assert_fail@plt+0x2db4>
   13850:	cmp	r4, #0
   13854:	ldrne	r3, [r4]
   13858:	addne	r3, r3, #1
   1385c:	strne	r3, [r4]
   13860:	b	138b4 <__assert_fail@plt+0x2e04>
   13864:	cmp	r4, #0
   13868:	beq	13830 <__assert_fail@plt+0x2d80>
   1386c:	ldr	r3, [r4]
   13870:	sub	r3, r3, #1
   13874:	str	r3, [r4]
   13878:	cmp	r3, #0
   1387c:	bge	13830 <__assert_fail@plt+0x2d80>
   13880:	ldr	r0, [sp, #4]
   13884:	b	138b8 <__assert_fail@plt+0x2e08>
   13888:	ldr	r0, [sp, #4]
   1388c:	cmp	r0, #0
   13890:	bge	138ac <__assert_fail@plt+0x2dfc>
   13894:	cmn	r0, #8
   13898:	bne	138b8 <__assert_fail@plt+0x2e08>
   1389c:	cmp	r4, #0
   138a0:	mvneq	r0, #0
   138a4:	mvnne	r0, #7
   138a8:	b	138b8 <__assert_fail@plt+0x2e08>
   138ac:	mvn	r0, #0
   138b0:	b	138b8 <__assert_fail@plt+0x2e08>
   138b4:	mov	r0, r5
   138b8:	add	sp, sp, #12
   138bc:	pop	{r4, r5, r6, r7, pc}
   138c0:	push	{r0, r1, r2, lr}
   138c4:	add	r2, sp, #8
   138c8:	mov	r3, #0
   138cc:	str	r3, [r2, #-4]!
   138d0:	bl	137e8 <__assert_fail@plt+0x2d38>
   138d4:	cmp	r0, #0
   138d8:	blt	138ec <__assert_fail@plt+0x2e3c>
   138dc:	ldr	r3, [sp, #4]
   138e0:	cmp	r3, #1
   138e4:	mvnne	r0, #0
   138e8:	b	138f0 <__assert_fail@plt+0x2e40>
   138ec:	mvn	r0, #0
   138f0:	add	sp, sp, #12
   138f4:	pop	{pc}		; (ldr pc, [sp], #4)
   138f8:	push	{r0, r1, r2, r4, r5, lr}
   138fc:	add	r4, sp, #8
   13900:	mov	r5, r0
   13904:	mov	r3, #1
   13908:	str	r3, [r4, #-4]!
   1390c:	mov	r0, r5
   13910:	mov	r2, r4
   13914:	bl	137e8 <__assert_fail@plt+0x2d38>
   13918:	subs	r1, r0, #0
   1391c:	blt	1393c <__assert_fail@plt+0x2e8c>
   13920:	ldr	r3, [sp, #4]
   13924:	cmp	r3, #0
   13928:	ble	1393c <__assert_fail@plt+0x2e8c>
   1392c:	cmp	r3, #1
   13930:	bne	1390c <__assert_fail@plt+0x2e5c>
   13934:	mov	r0, r1
   13938:	b	13940 <__assert_fail@plt+0x2e90>
   1393c:	mvn	r0, #0
   13940:	add	sp, sp, #12
   13944:	pop	{r4, r5, pc}
   13948:	push	{r3, r4, r5, r6, r7, lr}
   1394c:	mov	r4, r0
   13950:	mov	r0, r2
   13954:	mov	r7, r1
   13958:	mov	r5, r2
   1395c:	bl	109fc <strlen@plt>
   13960:	add	r6, r0, #1
   13964:	rsb	r7, r6, r7
   13968:	add	r7, r4, r7
   1396c:	cmp	r4, r7
   13970:	bhi	13994 <__assert_fail@plt+0x2ee4>
   13974:	mov	r0, r4
   13978:	mov	r1, r5
   1397c:	mov	r2, r6
   13980:	bl	10978 <memcmp@plt>
   13984:	cmp	r0, #0
   13988:	beq	1399c <__assert_fail@plt+0x2eec>
   1398c:	add	r4, r4, #1
   13990:	b	1396c <__assert_fail@plt+0x2ebc>
   13994:	mov	r0, #0
   13998:	pop	{r3, r4, r5, r6, r7, pc}
   1399c:	mov	r0, r4
   139a0:	pop	{r3, r4, r5, r6, r7, pc}
   139a4:	push	{r3, r4, r5, r6, r7, lr}
   139a8:	mov	r5, r0
   139ac:	mov	r6, r1
   139b0:	mov	r7, r2
   139b4:	bl	13584 <__assert_fail@plt+0x2ad4>
   139b8:	subs	r4, r0, #0
   139bc:	bne	139e0 <__assert_fail@plt+0x2f30>
   139c0:	ldr	r0, [r5, #4]
   139c4:	bl	13560 <__assert_fail@plt+0x2ab0>
   139c8:	cmp	r0, r7
   139cc:	mov	r2, r0
   139d0:	bhi	139e8 <__assert_fail@plt+0x2f38>
   139d4:	mov	r0, r6
   139d8:	mov	r1, r5
   139dc:	bl	10954 <memmove@plt>
   139e0:	mov	r0, r4
   139e4:	pop	{r3, r4, r5, r6, r7, pc}
   139e8:	mvn	r0, #2
   139ec:	pop	{r3, r4, r5, r6, r7, pc}
   139f0:	ubfx	r3, r0, #8, #8
   139f4:	sub	sp, sp, #8
   139f8:	lsl	r3, r3, #16
   139fc:	orr	r3, r3, r0, lsl #24
   13a00:	orr	r3, r3, r0, lsr #24
   13a04:	ubfx	r0, r0, #16, #8
   13a08:	orr	r0, r3, r0, lsl #8
   13a0c:	add	sp, sp, #8
   13a10:	bx	lr
   13a14:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13a18:	lsl	r3, r0, #24
   13a1c:	strd	r0, [sp]
   13a20:	lsl	r0, r0, #8
   13a24:	ldrb	r6, [sp, #2]
   13a28:	and	r5, r0, #16711680	; 0xff0000
   13a2c:	orr	r5, r5, r3
   13a30:	mov	r1, #0
   13a34:	orr	r5, r5, r1
   13a38:	ldrb	r0, [sp, #7]
   13a3c:	lsl	r1, r6, #8
   13a40:	ldrb	r6, [sp, #4]
   13a44:	mov	r2, #0
   13a48:	orr	r4, r2, r2
   13a4c:	orr	r4, r4, r0
   13a50:	orr	r5, r5, r1
   13a54:	lsl	r0, r6, #24
   13a58:	ldrb	r6, [sp, #5]
   13a5c:	orr	r4, r4, r2
   13a60:	ldrb	r1, [sp, #3]
   13a64:	orr	r4, r4, r2
   13a68:	orr	r4, r4, r0
   13a6c:	lsl	r0, r6, #16
   13a70:	ldrb	r6, [sp, #6]
   13a74:	orr	r5, r5, r1
   13a78:	orr	r5, r5, r2
   13a7c:	orr	r4, r4, r0
   13a80:	orr	r5, r5, r2
   13a84:	lsl	r0, r6, #8
   13a88:	orr	r1, r2, r5
   13a8c:	orr	r0, r0, r4
   13a90:	add	sp, sp, #12
   13a94:	pop	{r4, r5, r6, r7, pc}
   13a98:	push	{r0, r1, r4, r5, r6, lr}
   13a9c:	add	r6, sp, #4
   13aa0:	mov	r5, r0
   13aa4:	mov	r4, r1
   13aa8:	mov	r0, r5
   13aac:	mov	r1, r4
   13ab0:	mov	r2, r6
   13ab4:	bl	13674 <__assert_fail@plt+0x2bc4>
   13ab8:	cmp	r0, #3
   13abc:	beq	13aec <__assert_fail@plt+0x303c>
   13ac0:	cmp	r0, #9
   13ac4:	ldr	r4, [sp, #4]
   13ac8:	bne	13adc <__assert_fail@plt+0x302c>
   13acc:	cmp	r4, #0
   13ad0:	movlt	r0, r4
   13ad4:	mvnge	r0, #10
   13ad8:	b	13af0 <__assert_fail@plt+0x3040>
   13adc:	cmp	r0, #4
   13ae0:	beq	13aa8 <__assert_fail@plt+0x2ff8>
   13ae4:	mvn	r0, #0
   13ae8:	b	13af0 <__assert_fail@plt+0x3040>
   13aec:	mov	r0, r4
   13af0:	add	sp, sp, #8
   13af4:	pop	{r4, r5, r6, pc}
   13af8:	push	{r3, r4, r5, lr}
   13afc:	mov	r4, r0
   13b00:	ldr	r0, [r0, #12]
   13b04:	mov	r5, r1
   13b08:	bl	139f0 <__assert_fail@plt+0x2f40>
   13b0c:	add	r0, r0, r5
   13b10:	add	r0, r4, r0
   13b14:	pop	{r3, r4, r5, pc}
   13b18:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13b1c:	mov	r4, r0
   13b20:	mov	r5, r1
   13b24:	mov	r8, r2
   13b28:	mov	r7, r3
   13b2c:	bl	13584 <__assert_fail@plt+0x2ad4>
   13b30:	subs	r9, r0, #0
   13b34:	bne	13b74 <__assert_fail@plt+0x30c4>
   13b38:	ldr	r6, [r4, #16]
   13b3c:	lsl	r5, r5, #4
   13b40:	mov	r0, r6
   13b44:	bl	139f0 <__assert_fail@plt+0x2f40>
   13b48:	add	r0, r4, r0
   13b4c:	ldrd	r0, [r0, r5]
   13b50:	bl	13a14 <__assert_fail@plt+0x2f64>
   13b54:	strd	r0, [r8]
   13b58:	mov	r0, r6
   13b5c:	bl	139f0 <__assert_fail@plt+0x2f40>
   13b60:	add	r0, r4, r0
   13b64:	add	r5, r0, r5
   13b68:	ldrd	r0, [r5, #8]
   13b6c:	bl	13a14 <__assert_fail@plt+0x2f64>
   13b70:	strd	r0, [r7]
   13b74:	mov	r0, r9
   13b78:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13b7c:	push	{r3, r4, r5, lr}
   13b80:	mov	r5, r0
   13b84:	ldr	r0, [r0, #16]
   13b88:	mov	r4, #0
   13b8c:	bl	139f0 <__assert_fail@plt+0x2f40>
   13b90:	add	r5, r5, r0
   13b94:	ldrd	r0, [r5, #8]
   13b98:	add	r5, r5, #16
   13b9c:	bl	13a14 <__assert_fail@plt+0x2f64>
   13ba0:	orrs	r3, r0, r1
   13ba4:	addne	r4, r4, #1
   13ba8:	bne	13b94 <__assert_fail@plt+0x30e4>
   13bac:	mov	r0, r4
   13bb0:	pop	{r3, r4, r5, pc}
   13bb4:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13bb8:	mov	r7, r0
   13bbc:	mov	r4, r1
   13bc0:	mov	r8, r2
   13bc4:	mov	r5, r3
   13bc8:	bl	13584 <__assert_fail@plt+0x2ad4>
   13bcc:	cmp	r0, #0
   13bd0:	bne	13c7c <__assert_fail@plt+0x31cc>
   13bd4:	add	r6, sp, #8
   13bd8:	add	sl, r5, #1
   13bdc:	str	r0, [r6, #-4]!
   13be0:	ldr	r3, [sp, #4]
   13be4:	cmp	r4, #0
   13be8:	cmpge	r3, #0
   13bec:	blt	13c68 <__assert_fail@plt+0x31b8>
   13bf0:	cmp	r3, #1
   13bf4:	bne	13c50 <__assert_fail@plt+0x31a0>
   13bf8:	mov	r0, r7
   13bfc:	add	r1, r4, #4
   13c00:	mov	r2, sl
   13c04:	bl	13604 <__assert_fail@plt+0x2b54>
   13c08:	subs	r9, r0, #0
   13c0c:	beq	13c50 <__assert_fail@plt+0x31a0>
   13c10:	mov	r1, r8
   13c14:	mov	r2, r5
   13c18:	bl	10978 <memcmp@plt>
   13c1c:	cmp	r0, #0
   13c20:	bne	13c50 <__assert_fail@plt+0x31a0>
   13c24:	ldrb	r9, [r9, r5]
   13c28:	cmp	r9, #0
   13c2c:	beq	13c78 <__assert_fail@plt+0x31c8>
   13c30:	mov	r0, r8
   13c34:	mov	r1, #64	; 0x40
   13c38:	mov	r2, r5
   13c3c:	bl	10a5c <memchr@plt>
   13c40:	cmp	r0, #0
   13c44:	bne	13c50 <__assert_fail@plt+0x31a0>
   13c48:	cmp	r9, #64	; 0x40
   13c4c:	beq	13c78 <__assert_fail@plt+0x31c8>
   13c50:	mov	r1, r4
   13c54:	mov	r0, r7
   13c58:	mov	r2, r6
   13c5c:	bl	137e8 <__assert_fail@plt+0x2d38>
   13c60:	mov	r4, r0
   13c64:	b	13be0 <__assert_fail@plt+0x3130>
   13c68:	cmp	r3, #0
   13c6c:	movge	r0, r4
   13c70:	mvnlt	r0, #0
   13c74:	b	13c7c <__assert_fail@plt+0x31cc>
   13c78:	mov	r0, r4
   13c7c:	add	sp, sp, #8
   13c80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13c84:	push	{r4, r5, r6, lr}
   13c88:	mov	r5, r0
   13c8c:	mov	r0, r2
   13c90:	mov	r6, r1
   13c94:	mov	r4, r2
   13c98:	bl	109fc <strlen@plt>
   13c9c:	mov	r1, r6
   13ca0:	mov	r2, r4
   13ca4:	mov	r3, r0
   13ca8:	mov	r0, r5
   13cac:	pop	{r4, r5, r6, lr}
   13cb0:	b	13bb4 <__assert_fail@plt+0x3104>
   13cb4:	push	{r3, r4, r5, r6, r7, lr}
   13cb8:	mov	r5, r0
   13cbc:	ldr	r0, [r0, #8]
   13cc0:	mov	r6, r1
   13cc4:	mov	r4, r2
   13cc8:	bl	139f0 <__assert_fail@plt+0x2f40>
   13ccc:	mov	r7, r0
   13cd0:	mov	r0, r5
   13cd4:	bl	13584 <__assert_fail@plt+0x2ad4>
   13cd8:	cmp	r0, #0
   13cdc:	bne	13d1c <__assert_fail@plt+0x326c>
   13ce0:	mov	r0, r5
   13ce4:	mov	r1, r6
   13ce8:	bl	13770 <__assert_fail@plt+0x2cc0>
   13cec:	cmp	r0, #0
   13cf0:	blt	13d1c <__assert_fail@plt+0x326c>
   13cf4:	add	r6, r7, r6
   13cf8:	cmp	r4, #0
   13cfc:	add	r5, r5, r6
   13d00:	add	r5, r5, #4
   13d04:	beq	13d14 <__assert_fail@plt+0x3264>
   13d08:	mov	r0, r5
   13d0c:	bl	109fc <strlen@plt>
   13d10:	str	r0, [r4]
   13d14:	mov	r0, r5
   13d18:	pop	{r3, r4, r5, r6, r7, pc}
   13d1c:	cmp	r4, #0
   13d20:	strne	r0, [r4]
   13d24:	movne	r0, #0
   13d28:	moveq	r0, r4
   13d2c:	pop	{r3, r4, r5, r6, r7, pc}
   13d30:	push	{r4, lr}
   13d34:	mov	r4, r0
   13d38:	bl	13770 <__assert_fail@plt+0x2cc0>
   13d3c:	subs	r1, r0, #0
   13d40:	poplt	{r4, pc}
   13d44:	mov	r0, r4
   13d48:	pop	{r4, lr}
   13d4c:	b	13a98 <__assert_fail@plt+0x2fe8>
   13d50:	push	{r4, lr}
   13d54:	mov	r4, r0
   13d58:	bl	137ac <__assert_fail@plt+0x2cfc>
   13d5c:	subs	r1, r0, #0
   13d60:	poplt	{r4, pc}
   13d64:	mov	r0, r4
   13d68:	pop	{r4, lr}
   13d6c:	b	13a98 <__assert_fail@plt+0x2fe8>
   13d70:	push	{r4, r5, r6, lr}
   13d74:	mov	r6, r0
   13d78:	mov	r5, r1
   13d7c:	mov	r4, r2
   13d80:	bl	137ac <__assert_fail@plt+0x2cfc>
   13d84:	cmp	r0, #0
   13d88:	bge	13d9c <__assert_fail@plt+0x32ec>
   13d8c:	cmp	r4, #0
   13d90:	strne	r0, [r4]
   13d94:	mov	r0, #0
   13d98:	pop	{r4, r5, r6, pc}
   13d9c:	ldr	r0, [r6, #8]
   13da0:	bl	139f0 <__assert_fail@plt+0x2f40>
   13da4:	cmp	r4, #0
   13da8:	add	r0, r0, r5
   13dac:	add	r5, r6, r0
   13db0:	beq	13dc0 <__assert_fail@plt+0x3310>
   13db4:	ldr	r0, [r5, #4]
   13db8:	bl	139f0 <__assert_fail@plt+0x2f40>
   13dbc:	str	r0, [r4]
   13dc0:	mov	r0, r5
   13dc4:	pop	{r4, r5, r6, pc}
   13dc8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13dcc:	mov	r6, r0
   13dd0:	mov	r9, r2
   13dd4:	mov	r7, r3
   13dd8:	ldr	r5, [sp, #32]
   13ddc:	bl	13d30 <__assert_fail@plt+0x3280>
   13de0:	mov	r4, r0
   13de4:	cmp	r4, #0
   13de8:	blt	13e4c <__assert_fail@plt+0x339c>
   13dec:	mov	r0, r6
   13df0:	mov	r1, r4
   13df4:	mov	r2, r5
   13df8:	bl	13d70 <__assert_fail@plt+0x32c0>
   13dfc:	subs	r8, r0, #0
   13e00:	beq	13e48 <__assert_fail@plt+0x3398>
   13e04:	ldr	r0, [r8, #8]
   13e08:	bl	139f0 <__assert_fail@plt+0x2f40>
   13e0c:	mov	r1, r0
   13e10:	mov	r0, r6
   13e14:	bl	13af8 <__assert_fail@plt+0x3048>
   13e18:	mov	sl, r0
   13e1c:	bl	109fc <strlen@plt>
   13e20:	cmp	r0, r7
   13e24:	bne	13e5c <__assert_fail@plt+0x33ac>
   13e28:	mov	r0, sl
   13e2c:	mov	r1, r9
   13e30:	mov	r2, r7
   13e34:	bl	10978 <memcmp@plt>
   13e38:	cmp	r0, #0
   13e3c:	bne	13e5c <__assert_fail@plt+0x33ac>
   13e40:	mov	r0, r8
   13e44:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e48:	mvn	r4, #12
   13e4c:	cmp	r5, #0
   13e50:	mov	r0, #0
   13e54:	strne	r4, [r5]
   13e58:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e5c:	mov	r0, r6
   13e60:	mov	r1, r4
   13e64:	bl	13d50 <__assert_fail@plt+0x32a0>
   13e68:	b	13de0 <__assert_fail@plt+0x3330>
   13e6c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13e70:	mov	r5, r0
   13e74:	mov	r0, r2
   13e78:	mov	r7, r3
   13e7c:	mov	r6, r1
   13e80:	mov	r4, r2
   13e84:	bl	109fc <strlen@plt>
   13e88:	str	r7, [sp]
   13e8c:	mov	r1, r6
   13e90:	mov	r2, r4
   13e94:	mov	r3, r0
   13e98:	mov	r0, r5
   13e9c:	bl	13dc8 <__assert_fail@plt+0x3318>
   13ea0:	add	sp, sp, #12
   13ea4:	pop	{r4, r5, r6, r7, pc}
   13ea8:	push	{r0, r1, r2, lr}
   13eac:	ldr	ip, [sp, #16]
   13eb0:	str	ip, [sp]
   13eb4:	bl	13dc8 <__assert_fail@plt+0x3318>
   13eb8:	cmp	r0, #0
   13ebc:	addne	r0, r0, #12
   13ec0:	add	sp, sp, #12
   13ec4:	pop	{pc}		; (ldr pc, [sp], #4)
   13ec8:	push	{r4, r5, r6, lr}
   13ecc:	mov	r5, r2
   13ed0:	mov	r2, r3
   13ed4:	mov	r6, r0
   13ed8:	bl	13d70 <__assert_fail@plt+0x32c0>
   13edc:	subs	r4, r0, #0
   13ee0:	beq	13f0c <__assert_fail@plt+0x345c>
   13ee4:	cmp	r5, #0
   13ee8:	beq	13f04 <__assert_fail@plt+0x3454>
   13eec:	ldr	r0, [r4, #8]
   13ef0:	bl	139f0 <__assert_fail@plt+0x2f40>
   13ef4:	mov	r1, r0
   13ef8:	mov	r0, r6
   13efc:	bl	13af8 <__assert_fail@plt+0x3048>
   13f00:	str	r0, [r5]
   13f04:	add	r0, r4, #12
   13f08:	pop	{r4, r5, r6, pc}
   13f0c:	mov	r0, r4
   13f10:	pop	{r4, r5, r6, pc}
   13f14:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   13f18:	mov	r5, r0
   13f1c:	mov	r0, r2
   13f20:	mov	r7, r3
   13f24:	mov	r6, r1
   13f28:	mov	r4, r2
   13f2c:	bl	109fc <strlen@plt>
   13f30:	str	r7, [sp]
   13f34:	mov	r1, r6
   13f38:	mov	r2, r4
   13f3c:	mov	r3, r0
   13f40:	mov	r0, r5
   13f44:	bl	13ea8 <__assert_fail@plt+0x33f8>
   13f48:	add	sp, sp, #12
   13f4c:	pop	{r4, r5, r6, r7, pc}
   13f50:	push	{r0, r1, r4, r5, r6, lr}
   13f54:	add	r4, sp, #4
   13f58:	ldr	r2, [pc, #100]	; 13fc4 <__assert_fail@plt+0x3514>
   13f5c:	mov	r6, r0
   13f60:	mov	r3, r4
   13f64:	mov	r5, r1
   13f68:	add	r2, pc, r2
   13f6c:	bl	13f14 <__assert_fail@plt+0x3464>
   13f70:	cmp	r0, #0
   13f74:	beq	13f84 <__assert_fail@plt+0x34d4>
   13f78:	ldr	r3, [sp, #4]
   13f7c:	cmp	r3, #4
   13f80:	beq	13fb4 <__assert_fail@plt+0x3504>
   13f84:	ldr	r2, [pc, #60]	; 13fc8 <__assert_fail@plt+0x3518>
   13f88:	mov	r0, r6
   13f8c:	mov	r1, r5
   13f90:	mov	r3, r4
   13f94:	add	r2, pc, r2
   13f98:	bl	13f14 <__assert_fail@plt+0x3464>
   13f9c:	cmp	r0, #0
   13fa0:	beq	13fbc <__assert_fail@plt+0x350c>
   13fa4:	ldr	r3, [sp, #4]
   13fa8:	cmp	r3, #4
   13fac:	movne	r0, #0
   13fb0:	bne	13fbc <__assert_fail@plt+0x350c>
   13fb4:	ldr	r0, [r0]
   13fb8:	bl	139f0 <__assert_fail@plt+0x2f40>
   13fbc:	add	sp, sp, #8
   13fc0:	pop	{r4, r5, r6, pc}
   13fc4:	andeq	r0, r0, fp, asr #29
   13fc8:	muleq	r0, r9, lr
   13fcc:	push	{r4, r5, r6, lr}
   13fd0:	mvn	r1, #0
   13fd4:	mov	r2, #0
   13fd8:	mov	r6, r0
   13fdc:	bl	137e8 <__assert_fail@plt+0x2d38>
   13fe0:	mov	r5, #0
   13fe4:	mov	r4, r0
   13fe8:	cmn	r4, #1
   13fec:	beq	1402c <__assert_fail@plt+0x357c>
   13ff0:	cmp	r4, #0
   13ff4:	blt	14034 <__assert_fail@plt+0x3584>
   13ff8:	mov	r0, r6
   13ffc:	mov	r1, r4
   14000:	bl	13f50 <__assert_fail@plt+0x34a0>
   14004:	cmn	r0, #1
   14008:	beq	14014 <__assert_fail@plt+0x3564>
   1400c:	cmp	r5, r0
   14010:	movcc	r5, r0
   14014:	mov	r1, r4
   14018:	mov	r0, r6
   1401c:	mov	r2, #0
   14020:	bl	137e8 <__assert_fail@plt+0x2d38>
   14024:	mov	r4, r0
   14028:	b	13fe8 <__assert_fail@plt+0x3538>
   1402c:	mov	r0, r5
   14030:	pop	{r4, r5, r6, pc}
   14034:	mvn	r0, #0
   14038:	pop	{r4, r5, r6, pc}
   1403c:	push	{r0, r1, r4, r5, r6, lr}
   14040:	mov	r5, r1
   14044:	ldr	r1, [pc, #60]	; 14088 <__assert_fail@plt+0x35d8>
   14048:	mov	r6, r0
   1404c:	mov	r4, r2
   14050:	add	r1, pc, r1
   14054:	bl	14178 <__assert_fail@plt+0x36c8>
   14058:	mov	ip, #0
   1405c:	subs	r1, r0, #0
   14060:	blt	1407c <__assert_fail@plt+0x35cc>
   14064:	str	ip, [sp]
   14068:	mov	r0, r6
   1406c:	mov	r2, r5
   14070:	mov	r3, r4
   14074:	bl	13ea8 <__assert_fail@plt+0x33f8>
   14078:	b	14080 <__assert_fail@plt+0x35d0>
   1407c:	mov	r0, ip
   14080:	add	sp, sp, #8
   14084:	pop	{r4, r5, r6, pc}
   14088:	andeq	r0, r0, r3, asr #28
   1408c:	push	{r4, r5, r6, r7, r8, lr}
   14090:	mov	r8, r0
   14094:	mov	r4, r1
   14098:	mov	r5, r2
   1409c:	bl	13584 <__assert_fail@plt+0x2ad4>
   140a0:	cmp	r0, #0
   140a4:	popne	{r4, r5, r6, r7, r8, pc}
   140a8:	ldrb	r3, [r4]
   140ac:	add	r5, r4, r5
   140b0:	cmp	r3, #47	; 0x2f
   140b4:	beq	14100 <__assert_fail@plt+0x3650>
   140b8:	mov	r1, #47	; 0x2f
   140bc:	rsb	r2, r4, r5
   140c0:	mov	r0, r4
   140c4:	bl	10a5c <memchr@plt>
   140c8:	mov	r1, r4
   140cc:	cmp	r0, #0
   140d0:	movne	r7, r0
   140d4:	moveq	r7, r5
   140d8:	mov	r0, r8
   140dc:	rsb	r2, r4, r7
   140e0:	bl	1403c <__assert_fail@plt+0x358c>
   140e4:	subs	r1, r0, #0
   140e8:	beq	14168 <__assert_fail@plt+0x36b8>
   140ec:	mov	r0, r8
   140f0:	mov	r4, r7
   140f4:	bl	14178 <__assert_fail@plt+0x36c8>
   140f8:	mov	r6, r0
   140fc:	b	14104 <__assert_fail@plt+0x3654>
   14100:	mov	r6, r0
   14104:	cmp	r4, r5
   14108:	bcs	14170 <__assert_fail@plt+0x36c0>
   1410c:	mov	r7, r4
   14110:	add	r4, r4, #1
   14114:	ldrb	r3, [r7]
   14118:	cmp	r3, #47	; 0x2f
   1411c:	bne	1412c <__assert_fail@plt+0x367c>
   14120:	cmp	r4, r5
   14124:	bne	1410c <__assert_fail@plt+0x365c>
   14128:	b	14170 <__assert_fail@plt+0x36c0>
   1412c:	mov	r1, #47	; 0x2f
   14130:	rsb	r2, r7, r5
   14134:	mov	r0, r7
   14138:	bl	10a5c <memchr@plt>
   1413c:	mov	r1, r6
   14140:	mov	r2, r7
   14144:	cmp	r0, #0
   14148:	movne	r4, r0
   1414c:	moveq	r4, r5
   14150:	mov	r0, r8
   14154:	rsb	r3, r7, r4
   14158:	bl	13bb4 <__assert_fail@plt+0x3104>
   1415c:	subs	r6, r0, #0
   14160:	bge	14104 <__assert_fail@plt+0x3654>
   14164:	b	14170 <__assert_fail@plt+0x36c0>
   14168:	mvn	r0, #4
   1416c:	pop	{r4, r5, r6, r7, r8, pc}
   14170:	mov	r0, r6
   14174:	pop	{r4, r5, r6, r7, r8, pc}
   14178:	push	{r3, r4, r5, lr}
   1417c:	mov	r5, r0
   14180:	mov	r0, r1
   14184:	mov	r4, r1
   14188:	bl	109fc <strlen@plt>
   1418c:	mov	r1, r4
   14190:	mov	r2, r0
   14194:	mov	r0, r5
   14198:	pop	{r3, r4, r5, lr}
   1419c:	b	1408c <__assert_fail@plt+0x35dc>
   141a0:	push	{r3, r4, r5, lr}
   141a4:	mov	r5, r0
   141a8:	mov	r0, r1
   141ac:	mov	r4, r1
   141b0:	bl	109fc <strlen@plt>
   141b4:	mov	r1, r4
   141b8:	mov	r2, r0
   141bc:	mov	r0, r5
   141c0:	pop	{r3, r4, r5, lr}
   141c4:	b	1403c <__assert_fail@plt+0x358c>
   141c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   141cc:	sub	sp, sp, #20
   141d0:	mov	r7, r0
   141d4:	mov	r8, r1
   141d8:	mov	r6, r2
   141dc:	mov	r9, r3
   141e0:	bl	13584 <__assert_fail@plt+0x2ad4>
   141e4:	cmp	r0, #0
   141e8:	bne	1430c <__assert_fail@plt+0x385c>
   141ec:	cmp	r9, #1
   141f0:	bgt	141fc <__assert_fail@plt+0x374c>
   141f4:	mvn	r0, #2
   141f8:	b	1430c <__assert_fail@plt+0x385c>
   141fc:	add	fp, sp, #8
   14200:	mov	r4, r0
   14204:	mov	r5, r0
   14208:	mov	sl, r0
   1420c:	add	r3, sp, #12
   14210:	str	r0, [sp, #8]
   14214:	str	r3, [sp, #4]
   14218:	cmp	r4, r8
   1421c:	movgt	r2, #0
   14220:	movle	r2, #1
   14224:	cmp	r4, #0
   14228:	movlt	r2, #0
   1422c:	cmp	r2, #0
   14230:	beq	142f0 <__assert_fail@plt+0x3840>
   14234:	ldr	r1, [sp, #8]
   14238:	cmp	sl, r1
   1423c:	ble	14260 <__assert_fail@plt+0x37b0>
   14240:	sub	r5, r5, #1
   14244:	add	r2, r6, r5
   14248:	rsb	r5, r6, r2
   1424c:	ldrb	r0, [r2, #-1]!
   14250:	cmp	r0, #47	; 0x2f
   14254:	bne	14248 <__assert_fail@plt+0x3798>
   14258:	sub	sl, sl, #1
   1425c:	b	14238 <__assert_fail@plt+0x3788>
   14260:	blt	142b0 <__assert_fail@plt+0x3800>
   14264:	mov	r1, r4
   14268:	add	r2, sp, #12
   1426c:	mov	r0, r7
   14270:	bl	13cb4 <__assert_fail@plt+0x3204>
   14274:	ldr	r2, [sp, #12]
   14278:	subs	r1, r0, #0
   1427c:	moveq	r0, r2
   14280:	beq	1430c <__assert_fail@plt+0x385c>
   14284:	add	ip, r5, r2
   14288:	cmp	ip, r9
   1428c:	bge	142b0 <__assert_fail@plt+0x3800>
   14290:	add	r0, r6, r5
   14294:	str	ip, [sp]
   14298:	bl	1096c <memcpy@plt>
   1429c:	ldr	ip, [sp]
   142a0:	add	sl, sl, #1
   142a4:	mov	r3, #47	; 0x2f
   142a8:	add	r5, ip, #1
   142ac:	strb	r3, [r6, ip]
   142b0:	cmp	r4, r8
   142b4:	bne	142d8 <__assert_fail@plt+0x3828>
   142b8:	ldr	r2, [sp, #8]
   142bc:	cmp	r2, sl
   142c0:	bge	141f4 <__assert_fail@plt+0x3744>
   142c4:	cmp	r5, #1
   142c8:	mov	r0, #0
   142cc:	subgt	r5, r5, #1
   142d0:	strb	r0, [r6, r5]
   142d4:	b	1430c <__assert_fail@plt+0x385c>
   142d8:	mov	r1, r4
   142dc:	mov	r0, r7
   142e0:	mov	r2, fp
   142e4:	bl	137e8 <__assert_fail@plt+0x2d38>
   142e8:	mov	r4, r0
   142ec:	b	14218 <__assert_fail@plt+0x3768>
   142f0:	cmn	r4, #1
   142f4:	bge	14308 <__assert_fail@plt+0x3858>
   142f8:	cmn	r4, #4
   142fc:	movne	r0, r4
   14300:	mvneq	r0, #10
   14304:	b	1430c <__assert_fail@plt+0x385c>
   14308:	mvn	r0, #3
   1430c:	add	sp, sp, #20
   14310:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14314:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14318:	mov	r9, r0
   1431c:	mov	r7, r1
   14320:	mov	r4, r2
   14324:	mov	r8, r3
   14328:	bl	13584 <__assert_fail@plt+0x2ad4>
   1432c:	cmp	r0, #0
   14330:	bne	143c4 <__assert_fail@plt+0x3914>
   14334:	cmp	r4, #0
   14338:	blt	143c0 <__assert_fail@plt+0x3910>
   1433c:	add	r6, sp, #8
   14340:	mvn	r5, #12
   14344:	str	r0, [r6, #-4]!
   14348:	cmp	r0, r7
   1434c:	mov	r1, r0
   14350:	movgt	r3, #0
   14354:	movle	r3, #1
   14358:	cmp	r0, #0
   1435c:	movlt	r3, #0
   14360:	cmp	r3, #0
   14364:	beq	143a4 <__assert_fail@plt+0x38f4>
   14368:	ldr	r3, [sp, #4]
   1436c:	cmp	r3, r4
   14370:	moveq	r5, r1
   14374:	cmp	r1, r7
   14378:	bne	14394 <__assert_fail@plt+0x38e4>
   1437c:	cmp	r8, #0
   14380:	strne	r3, [r8]
   14384:	cmp	r4, r3
   14388:	movle	r0, r5
   1438c:	mvngt	r0, #0
   14390:	b	143c4 <__assert_fail@plt+0x3914>
   14394:	mov	r0, r9
   14398:	mov	r2, r6
   1439c:	bl	137e8 <__assert_fail@plt+0x2d38>
   143a0:	b	14348 <__assert_fail@plt+0x3898>
   143a4:	cmn	r0, #1
   143a8:	bge	143b8 <__assert_fail@plt+0x3908>
   143ac:	cmn	r0, #4
   143b0:	mvneq	r0, #10
   143b4:	b	143c4 <__assert_fail@plt+0x3914>
   143b8:	mvn	r0, #3
   143bc:	b	143c4 <__assert_fail@plt+0x3914>
   143c0:	mvn	r0, #0
   143c4:	add	sp, sp, #12
   143c8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   143cc:	push	{r0, r1, r2, lr}
   143d0:	mov	r2, #0
   143d4:	add	r3, sp, #4
   143d8:	bl	14314 <__assert_fail@plt+0x3864>
   143dc:	cmp	r0, #0
   143e0:	ldreq	r0, [sp, #4]
   143e4:	beq	143ec <__assert_fail@plt+0x393c>
   143e8:	mvnge	r0, #12
   143ec:	add	sp, sp, #12
   143f0:	pop	{pc}		; (ldr pc, [sp], #4)
   143f4:	push	{r4, r5, r6, lr}
   143f8:	mov	r5, r0
   143fc:	mov	r4, r1
   14400:	bl	143cc <__assert_fail@plt+0x391c>
   14404:	subs	r2, r0, #0
   14408:	poplt	{r4, r5, r6, pc}
   1440c:	mov	r0, r5
   14410:	mov	r1, r4
   14414:	sub	r2, r2, #1
   14418:	mov	r3, #0
   1441c:	pop	{r4, r5, r6, lr}
   14420:	b	14314 <__assert_fail@plt+0x3864>
   14424:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14428:	mov	r7, r2
   1442c:	mov	r5, r0
   14430:	mov	r9, r1
   14434:	mov	r8, r3
   14438:	ldr	r6, [sp, #40]	; 0x28
   1443c:	bl	13584 <__assert_fail@plt+0x2ad4>
   14440:	subs	r2, r0, #0
   14444:	movne	r0, r2
   14448:	bne	144c0 <__assert_fail@plt+0x3a10>
   1444c:	mov	r1, r9
   14450:	mov	r0, r5
   14454:	bl	137e8 <__assert_fail@plt+0x2d38>
   14458:	add	r9, sp, #4
   1445c:	mov	r4, r0
   14460:	cmp	r4, #0
   14464:	blt	144bc <__assert_fail@plt+0x3a0c>
   14468:	mov	r0, r5
   1446c:	mov	r1, r4
   14470:	mov	r2, r7
   14474:	mov	r3, r9
   14478:	bl	13f14 <__assert_fail@plt+0x3464>
   1447c:	cmp	r0, #0
   14480:	beq	144a4 <__assert_fail@plt+0x39f4>
   14484:	ldr	r3, [sp, #4]
   14488:	cmp	r3, r6
   1448c:	bne	144a4 <__assert_fail@plt+0x39f4>
   14490:	mov	r1, r8
   14494:	mov	r2, r6
   14498:	bl	10978 <memcmp@plt>
   1449c:	cmp	r0, #0
   144a0:	beq	144bc <__assert_fail@plt+0x3a0c>
   144a4:	mov	r1, r4
   144a8:	mov	r0, r5
   144ac:	mov	r2, #0
   144b0:	bl	137e8 <__assert_fail@plt+0x2d38>
   144b4:	mov	r4, r0
   144b8:	b	14460 <__assert_fail@plt+0x39b0>
   144bc:	mov	r0, r4
   144c0:	add	sp, sp, #12
   144c4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   144c8:	sub	r3, r1, #1
   144cc:	cmn	r3, #3
   144d0:	push	{r4, r5, r6, lr}
   144d4:	mov	r5, r0
   144d8:	mov	r6, r1
   144dc:	bhi	14528 <__assert_fail@plt+0x3a78>
   144e0:	bl	13584 <__assert_fail@plt+0x2ad4>
   144e4:	subs	r2, r0, #0
   144e8:	moveq	r0, r5
   144ec:	mvneq	r1, #0
   144f0:	bne	14530 <__assert_fail@plt+0x3a80>
   144f4:	bl	137e8 <__assert_fail@plt+0x2d38>
   144f8:	cmp	r0, #0
   144fc:	mov	r4, r0
   14500:	blt	14538 <__assert_fail@plt+0x3a88>
   14504:	mov	r0, r5
   14508:	mov	r1, r4
   1450c:	bl	13f50 <__assert_fail@plt+0x34a0>
   14510:	cmp	r0, r6
   14514:	beq	14538 <__assert_fail@plt+0x3a88>
   14518:	mov	r0, r5
   1451c:	mov	r1, r4
   14520:	mov	r2, #0
   14524:	b	144f4 <__assert_fail@plt+0x3a44>
   14528:	mvn	r0, #5
   1452c:	pop	{r4, r5, r6, pc}
   14530:	mov	r0, r2
   14534:	pop	{r4, r5, r6, pc}
   14538:	mov	r0, r4
   1453c:	pop	{r4, r5, r6, pc}
   14540:	push	{r4, r5, r6, r7, r8, lr}
   14544:	mov	r5, r0
   14548:	mov	r0, r2
   1454c:	mov	r4, r1
   14550:	mov	r7, r2
   14554:	bl	109fc <strlen@plt>
   14558:	add	r8, r0, #1
   1455c:	mov	r6, r0
   14560:	cmp	r4, r6
   14564:	blt	145ac <__assert_fail@plt+0x3afc>
   14568:	mov	r0, r7
   1456c:	mov	r1, r5
   14570:	mov	r2, r8
   14574:	bl	10978 <memcmp@plt>
   14578:	cmp	r0, #0
   1457c:	beq	145b4 <__assert_fail@plt+0x3b04>
   14580:	mov	r0, r5
   14584:	mov	r1, #0
   14588:	mov	r2, r4
   1458c:	bl	10a5c <memchr@plt>
   14590:	cmp	r0, #0
   14594:	popeq	{r4, r5, r6, r7, r8, pc}
   14598:	rsb	r5, r5, r0
   1459c:	mvn	r5, r5
   145a0:	add	r4, r4, r5
   145a4:	add	r5, r0, #1
   145a8:	b	14560 <__assert_fail@plt+0x3ab0>
   145ac:	mov	r0, #0
   145b0:	pop	{r4, r5, r6, r7, r8, pc}
   145b4:	mov	r0, #1
   145b8:	pop	{r4, r5, r6, r7, r8, pc}
   145bc:	push	{r0, r1, r4, r5, r6, lr}
   145c0:	add	r3, sp, #4
   145c4:	bl	13f14 <__assert_fail@plt+0x3464>
   145c8:	subs	r4, r0, #0
   145cc:	ldr	r0, [sp, #4]
   145d0:	beq	14618 <__assert_fail@plt+0x3b68>
   145d4:	add	r6, r4, r0
   145d8:	mov	r5, #0
   145dc:	cmp	r4, r6
   145e0:	bcs	1460c <__assert_fail@plt+0x3b5c>
   145e4:	mov	r0, r4
   145e8:	rsb	r1, r4, r6
   145ec:	bl	10a68 <strnlen@plt>
   145f0:	add	r0, r0, #1
   145f4:	str	r0, [sp, #4]
   145f8:	add	r4, r4, r0
   145fc:	cmp	r4, r6
   14600:	bhi	14614 <__assert_fail@plt+0x3b64>
   14604:	add	r5, r5, #1
   14608:	b	145dc <__assert_fail@plt+0x3b2c>
   1460c:	mov	r0, r5
   14610:	b	14618 <__assert_fail@plt+0x3b68>
   14614:	mvn	r0, #14
   14618:	add	sp, sp, #8
   1461c:	pop	{r4, r5, r6, pc}
   14620:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14624:	mov	r8, r3
   14628:	add	r3, sp, #4
   1462c:	bl	13f14 <__assert_fail@plt+0x3464>
   14630:	ldr	r6, [sp, #4]
   14634:	subs	r4, r0, #0
   14638:	moveq	r0, r6
   1463c:	beq	146bc <__assert_fail@plt+0x3c0c>
   14640:	mov	r0, r8
   14644:	add	r6, r4, r6
   14648:	bl	109fc <strlen@plt>
   1464c:	mov	r5, #0
   14650:	add	r7, r0, #1
   14654:	cmp	r4, r6
   14658:	bcs	146a8 <__assert_fail@plt+0x3bf8>
   1465c:	mov	r0, r4
   14660:	rsb	r1, r4, r6
   14664:	bl	10a68 <strnlen@plt>
   14668:	add	r0, r0, #1
   1466c:	str	r0, [sp, #4]
   14670:	add	r9, r4, r0
   14674:	cmp	r9, r6
   14678:	bhi	146b0 <__assert_fail@plt+0x3c00>
   1467c:	cmp	r0, r7
   14680:	bne	1469c <__assert_fail@plt+0x3bec>
   14684:	mov	r0, r4
   14688:	mov	r1, r8
   1468c:	mov	r2, r7
   14690:	bl	10978 <memcmp@plt>
   14694:	cmp	r0, #0
   14698:	beq	146b8 <__assert_fail@plt+0x3c08>
   1469c:	add	r5, r5, #1
   146a0:	mov	r4, r9
   146a4:	b	14654 <__assert_fail@plt+0x3ba4>
   146a8:	mvn	r0, #0
   146ac:	b	146bc <__assert_fail@plt+0x3c0c>
   146b0:	mvn	r0, #14
   146b4:	b	146bc <__assert_fail@plt+0x3c0c>
   146b8:	mov	r0, r5
   146bc:	add	sp, sp, #12
   146c0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   146c4:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   146c8:	mov	r6, r3
   146cc:	add	r3, sp, #4
   146d0:	ldr	r5, [sp, #32]
   146d4:	bl	13f14 <__assert_fail@plt+0x3464>
   146d8:	subs	r4, r0, #0
   146dc:	ldrne	r7, [sp, #4]
   146e0:	addne	r7, r4, r7
   146e4:	bne	14728 <__assert_fail@plt+0x3c78>
   146e8:	cmp	r5, #0
   146ec:	ldrne	r3, [sp, #4]
   146f0:	bne	1475c <__assert_fail@plt+0x3cac>
   146f4:	b	14760 <__assert_fail@plt+0x3cb0>
   146f8:	mov	r0, r4
   146fc:	rsb	r1, r4, r7
   14700:	bl	10a68 <strnlen@plt>
   14704:	add	r3, r0, #1
   14708:	str	r3, [sp, #4]
   1470c:	add	r3, r4, r3
   14710:	cmp	r3, r7
   14714:	bhi	14734 <__assert_fail@plt+0x3c84>
   14718:	cmp	r6, #0
   1471c:	beq	14744 <__assert_fail@plt+0x3c94>
   14720:	sub	r6, r6, #1
   14724:	mov	r4, r3
   14728:	cmp	r4, r7
   1472c:	bcc	146f8 <__assert_fail@plt+0x3c48>
   14730:	b	14750 <__assert_fail@plt+0x3ca0>
   14734:	cmp	r5, #0
   14738:	mvnne	r3, #14
   1473c:	bne	1475c <__assert_fail@plt+0x3cac>
   14740:	b	14760 <__assert_fail@plt+0x3cb0>
   14744:	cmp	r5, #0
   14748:	strne	r0, [r5]
   1474c:	b	14768 <__assert_fail@plt+0x3cb8>
   14750:	cmp	r5, #0
   14754:	beq	14760 <__assert_fail@plt+0x3cb0>
   14758:	mvn	r3, #0
   1475c:	str	r3, [r5]
   14760:	mov	r0, #0
   14764:	b	1476c <__assert_fail@plt+0x3cbc>
   14768:	mov	r0, r4
   1476c:	add	sp, sp, #12
   14770:	pop	{r4, r5, r6, r7, pc}
   14774:	push	{r0, r1, r4, lr}
   14778:	mov	r4, r2
   1477c:	ldr	r2, [pc, #48]	; 147b4 <__assert_fail@plt+0x3d04>
   14780:	add	r3, sp, #4
   14784:	add	r2, pc, r2
   14788:	bl	13f14 <__assert_fail@plt+0x3464>
   1478c:	cmp	r0, #0
   14790:	ldreq	r0, [sp, #4]
   14794:	beq	147ac <__assert_fail@plt+0x3cfc>
   14798:	ldr	r1, [sp, #4]
   1479c:	mov	r2, r4
   147a0:	bl	14540 <__assert_fail@plt+0x3a90>
   147a4:	rsbs	r0, r0, #1
   147a8:	movcc	r0, #0
   147ac:	add	sp, sp, #8
   147b0:	pop	{r4, pc}
   147b4:	andeq	r0, r0, r8, lsl r7
   147b8:	push	{r3, r4, r5, r6, r7, lr}
   147bc:	mov	r5, r0
   147c0:	mov	r7, r1
   147c4:	mov	r6, r2
   147c8:	bl	13584 <__assert_fail@plt+0x2ad4>
   147cc:	subs	r2, r0, #0
   147d0:	moveq	r0, r5
   147d4:	moveq	r1, r7
   147d8:	bne	1481c <__assert_fail@plt+0x3d6c>
   147dc:	bl	137e8 <__assert_fail@plt+0x2d38>
   147e0:	cmp	r0, #0
   147e4:	mov	r4, r0
   147e8:	blt	14824 <__assert_fail@plt+0x3d74>
   147ec:	mov	r0, r5
   147f0:	mov	r1, r4
   147f4:	mov	r2, r6
   147f8:	bl	14774 <__assert_fail@plt+0x3cc4>
   147fc:	cmn	r0, #1
   14800:	poplt	{r3, r4, r5, r6, r7, pc}
   14804:	cmp	r0, #0
   14808:	beq	14824 <__assert_fail@plt+0x3d74>
   1480c:	mov	r0, r5
   14810:	mov	r1, r4
   14814:	mov	r2, #0
   14818:	b	147dc <__assert_fail@plt+0x3d2c>
   1481c:	mov	r0, r2
   14820:	pop	{r3, r4, r5, r6, r7, pc}
   14824:	mov	r0, r4
   14828:	pop	{r3, r4, r5, r6, r7, pc}
   1482c:	add	r1, r0, r1
   14830:	mov	r3, #67108864	; 0x4000000
   14834:	cmp	r0, r1
   14838:	strcc	r3, [r0], #4
   1483c:	bcc	14834 <__assert_fail@plt+0x3d84>
   14840:	bx	lr
   14844:	push	{r4, r5, lr}
   14848:	sub	sp, sp, #20
   1484c:	add	ip, sp, #12
   14850:	str	ip, [sp]
   14854:	ldr	r5, [sp, #32]
   14858:	ldr	r4, [sp, #40]	; 0x28
   1485c:	bl	13ea8 <__assert_fail@plt+0x33f8>
   14860:	subs	r3, r0, #0
   14864:	ldr	r0, [sp, #12]
   14868:	beq	14894 <__assert_fail@plt+0x3de4>
   1486c:	add	r2, r4, r5
   14870:	cmp	r0, r2
   14874:	bcc	14890 <__assert_fail@plt+0x3de0>
   14878:	add	r0, r3, r5
   1487c:	ldr	r1, [sp, #36]	; 0x24
   14880:	mov	r2, r4
   14884:	bl	1096c <memcpy@plt>
   14888:	mov	r0, #0
   1488c:	b	14894 <__assert_fail@plt+0x3de4>
   14890:	mvn	r0, #2
   14894:	add	sp, sp, #20
   14898:	pop	{r4, r5, pc}
   1489c:	push	{r4, r5, r6, r7, r8, lr}
   148a0:	sub	sp, sp, #24
   148a4:	mov	r8, r3
   148a8:	add	r3, sp, #20
   148ac:	mov	r7, r0
   148b0:	mov	r6, r1
   148b4:	mov	r5, r2
   148b8:	bl	13f14 <__assert_fail@plt+0x3464>
   148bc:	ldr	r4, [sp, #20]
   148c0:	cmp	r0, #0
   148c4:	moveq	r0, r4
   148c8:	beq	14904 <__assert_fail@plt+0x3e54>
   148cc:	ldr	r3, [sp, #48]	; 0x30
   148d0:	cmp	r4, r3
   148d4:	mvnne	r0, #2
   148d8:	bne	14904 <__assert_fail@plt+0x3e54>
   148dc:	mov	r0, r5
   148e0:	bl	109fc <strlen@plt>
   148e4:	mov	r2, #0
   148e8:	str	r4, [sp, #8]
   148ec:	mov	r1, r6
   148f0:	stm	sp, {r2, r8}
   148f4:	mov	r2, r5
   148f8:	mov	r3, r0
   148fc:	mov	r0, r7
   14900:	bl	14844 <__assert_fail@plt+0x3d94>
   14904:	add	sp, sp, #24
   14908:	pop	{r4, r5, r6, r7, r8, pc}
   1490c:	push	{r0, r1, r2, lr}
   14910:	add	r3, sp, #4
   14914:	bl	13e6c <__assert_fail@plt+0x33bc>
   14918:	ldr	r1, [sp, #4]
   1491c:	cmp	r0, #0
   14920:	moveq	r0, r1
   14924:	beq	14934 <__assert_fail@plt+0x3e84>
   14928:	add	r1, r1, #12
   1492c:	bl	1482c <__assert_fail@plt+0x3d7c>
   14930:	mov	r0, #0
   14934:	add	sp, sp, #12
   14938:	pop	{pc}		; (ldr pc, [sp], #4)
   1493c:	push	{r0, r1, r2, r4, r5, lr}
   14940:	add	r4, sp, #8
   14944:	mov	r5, r0
   14948:	mov	r3, #0
   1494c:	str	r3, [r4, #-4]!
   14950:	ldr	r3, [sp, #4]
   14954:	cmp	r1, #0
   14958:	cmpge	r3, #0
   1495c:	blt	14974 <__assert_fail@plt+0x3ec4>
   14960:	mov	r0, r5
   14964:	mov	r2, r4
   14968:	bl	137e8 <__assert_fail@plt+0x2d38>
   1496c:	mov	r1, r0
   14970:	b	14950 <__assert_fail@plt+0x3ea0>
   14974:	mov	r0, r1
   14978:	add	sp, sp, #12
   1497c:	pop	{r4, r5, pc}
   14980:	push	{r4, r5, r6, lr}
   14984:	mov	r6, r0
   14988:	mov	r4, r1
   1498c:	bl	1493c <__assert_fail@plt+0x3e8c>
   14990:	subs	r5, r0, #0
   14994:	blt	149b8 <__assert_fail@plt+0x3f08>
   14998:	mov	r1, r4
   1499c:	mov	r2, #0
   149a0:	mov	r0, r6
   149a4:	bl	13604 <__assert_fail@plt+0x2b54>
   149a8:	rsb	r1, r4, r5
   149ac:	bl	1482c <__assert_fail@plt+0x3d7c>
   149b0:	mov	r0, #0
   149b4:	pop	{r4, r5, r6, pc}
   149b8:	mov	r0, r5
   149bc:	pop	{r4, r5, r6, pc}
   149c0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   149c4:	mov	r7, r0
   149c8:	ldr	r6, [pc, #76]	; 14a1c <__assert_fail@plt+0x3f6c>
   149cc:	mov	r8, r1
   149d0:	ldr	r5, [pc, #72]	; 14a20 <__assert_fail@plt+0x3f70>
   149d4:	mov	r9, r2
   149d8:	add	r6, pc, r6
   149dc:	bl	10904 <strcmp@plt-0x20>
   149e0:	add	r5, pc, r5
   149e4:	rsb	r6, r5, r6
   149e8:	asrs	r6, r6, #2
   149ec:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   149f0:	sub	r5, r5, #4
   149f4:	mov	r4, #0
   149f8:	add	r4, r4, #1
   149fc:	ldr	r3, [r5, #4]!
   14a00:	mov	r0, r7
   14a04:	mov	r1, r8
   14a08:	mov	r2, r9
   14a0c:	blx	r3
   14a10:	cmp	r4, r6
   14a14:	bne	149f8 <__assert_fail@plt+0x3f48>
   14a18:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14a1c:			; <UNDEFINED> instruction: 0x000114b0
   14a20:	andeq	r1, r1, r4, lsr #9
   14a24:	bx	lr

Disassembly of section .fini:

00014a28 <.fini>:
   14a28:	push	{r3, lr}
   14a2c:	pop	{r3, pc}
