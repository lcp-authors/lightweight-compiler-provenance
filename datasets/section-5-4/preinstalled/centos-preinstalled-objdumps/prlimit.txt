
centos-preinstalled/prlimit:     file format elf32-littlearm


Disassembly of section .init:

00011078 <.init>:
   11078:	push	{r3, lr}
   1107c:	bl	11eb8 <__assert_fail@plt+0xafc>
   11080:	pop	{r3, pc}

Disassembly of section .plt:

00011084 <calloc@plt-0x14>:
   11084:	push	{lr}		; (str lr, [sp, #-4]!)
   11088:	ldr	lr, [pc, #4]	; 11094 <calloc@plt-0x4>
   1108c:	add	lr, pc, lr
   11090:	ldr	pc, [lr, #8]!
   11094:	andeq	r6, r1, ip, ror #30

00011098 <calloc@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #90112	; 0x16000
   110a0:	ldr	pc, [ip, #3948]!	; 0xf6c

000110a4 <raise@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #90112	; 0x16000
   110ac:	ldr	pc, [ip, #3940]!	; 0xf64

000110b0 <strcmp@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #90112	; 0x16000
   110b8:	ldr	pc, [ip, #3932]!	; 0xf5c

000110bc <strtol@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #90112	; 0x16000
   110c4:	ldr	pc, [ip, #3924]!	; 0xf54

000110c8 <strcspn@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #90112	; 0x16000
   110d0:	ldr	pc, [ip, #3916]!	; 0xf4c

000110d4 <wcwidth@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #90112	; 0x16000
   110dc:	ldr	pc, [ip, #3908]!	; 0xf44

000110e0 <free@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #90112	; 0x16000
   110e8:	ldr	pc, [ip, #3900]!	; 0xf3c

000110ec <ferror@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #90112	; 0x16000
   110f4:	ldr	pc, [ip, #3892]!	; 0xf34

000110f8 <_exit@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #90112	; 0x16000
   11100:	ldr	pc, [ip, #3884]!	; 0xf2c

00011104 <memcpy@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #90112	; 0x16000
   1110c:	ldr	pc, [ip, #3876]!	; 0xf24

00011110 <execvp@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #90112	; 0x16000
   11118:	ldr	pc, [ip, #3868]!	; 0xf1c

0001111c <__strtoull_internal@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #90112	; 0x16000
   11124:	ldr	pc, [ip, #3860]!	; 0xf14

00011128 <dcgettext@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #90112	; 0x16000
   11130:	ldr	pc, [ip, #3852]!	; 0xf0c

00011134 <__stack_chk_fail@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #90112	; 0x16000
   1113c:	ldr	pc, [ip, #3844]!	; 0xf04

00011140 <textdomain@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #90112	; 0x16000
   11148:	ldr	pc, [ip, #3836]!	; 0xefc

0001114c <__strndup@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #90112	; 0x16000
   11154:	ldr	pc, [ip, #3828]!	; 0xef4

00011158 <err@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #90112	; 0x16000
   11160:	ldr	pc, [ip, #3820]!	; 0xeec

00011164 <iswprint@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #90112	; 0x16000
   1116c:	ldr	pc, [ip, #3812]!	; 0xee4

00011170 <ioctl@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #90112	; 0x16000
   11178:	ldr	pc, [ip, #3804]!	; 0xedc

0001117c <__ctype_get_mb_cur_max@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #90112	; 0x16000
   11184:	ldr	pc, [ip, #3796]!	; 0xed4

00011188 <__fpending@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #90112	; 0x16000
   11190:	ldr	pc, [ip, #3788]!	; 0xecc

00011194 <mbrtowc@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #90112	; 0x16000
   1119c:	ldr	pc, [ip, #3780]!	; 0xec4

000111a0 <prlimit64@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #90112	; 0x16000
   111a8:	ldr	pc, [ip, #3772]!	; 0xebc

000111ac <wcstombs@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #90112	; 0x16000
   111b4:	ldr	pc, [ip, #3764]!	; 0xeb4

000111b8 <getenv@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #90112	; 0x16000
   111c0:	ldr	pc, [ip, #3756]!	; 0xeac

000111c4 <malloc@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #90112	; 0x16000
   111cc:	ldr	pc, [ip, #3748]!	; 0xea4

000111d0 <__libc_start_main@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #90112	; 0x16000
   111d8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111dc <__gmon_start__@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #90112	; 0x16000
   111e4:	ldr	pc, [ip, #3732]!	; 0xe94

000111e8 <mempcpy@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #90112	; 0x16000
   111f0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111f4 <getopt_long@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #90112	; 0x16000
   111fc:	ldr	pc, [ip, #3716]!	; 0xe84

00011200 <__ctype_b_loc@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #90112	; 0x16000
   11208:	ldr	pc, [ip, #3708]!	; 0xe7c

0001120c <exit@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #90112	; 0x16000
   11214:	ldr	pc, [ip, #3700]!	; 0xe74

00011218 <strtoul@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #90112	; 0x16000
   11220:	ldr	pc, [ip, #3692]!	; 0xe6c

00011224 <ttyname@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #90112	; 0x16000
   1122c:	ldr	pc, [ip, #3684]!	; 0xe64

00011230 <strlen@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #90112	; 0x16000
   11238:	ldr	pc, [ip, #3676]!	; 0xe5c

0001123c <strchr@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #90112	; 0x16000
   11244:	ldr	pc, [ip, #3668]!	; 0xe54

00011248 <warnx@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #90112	; 0x16000
   11250:	ldr	pc, [ip, #3660]!	; 0xe4c

00011254 <__errno_location@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #90112	; 0x16000
   1125c:	ldr	pc, [ip, #3652]!	; 0xe44

00011260 <strncasecmp@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #90112	; 0x16000
   11268:	ldr	pc, [ip, #3644]!	; 0xe3c

0001126c <__sprintf_chk@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #90112	; 0x16000
   11274:	ldr	pc, [ip, #3636]!	; 0xe34

00011278 <snprintf@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #90112	; 0x16000
   11280:	ldr	pc, [ip, #3628]!	; 0xe2c

00011284 <__cxa_atexit@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #90112	; 0x16000
   1128c:	ldr	pc, [ip, #3620]!	; 0xe24

00011290 <__vasprintf_chk@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #90112	; 0x16000
   11298:	ldr	pc, [ip, #3612]!	; 0xe1c

0001129c <__strdup@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #90112	; 0x16000
   112a4:	ldr	pc, [ip, #3604]!	; 0xe14

000112a8 <memset@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #90112	; 0x16000
   112b0:	ldr	pc, [ip, #3596]!	; 0xe0c

000112b4 <strncpy@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #90112	; 0x16000
   112bc:	ldr	pc, [ip, #3588]!	; 0xe04

000112c0 <strtoull@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #90112	; 0x16000
   112c8:	ldr	pc, [ip, #3580]!	; 0xdfc

000112cc <fgetc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #90112	; 0x16000
   112d4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112d8 <__printf_chk@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #90112	; 0x16000
   112e0:	ldr	pc, [ip, #3564]!	; 0xdec

000112e4 <strtod@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #90112	; 0x16000
   112ec:	ldr	pc, [ip, #3556]!	; 0xde4

000112f0 <__fprintf_chk@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #90112	; 0x16000
   112f8:	ldr	pc, [ip, #3548]!	; 0xddc

000112fc <fclose@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #90112	; 0x16000
   11304:	ldr	pc, [ip, #3540]!	; 0xdd4

00011308 <setlocale@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #90112	; 0x16000
   11310:	ldr	pc, [ip, #3532]!	; 0xdcc

00011314 <errx@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #90112	; 0x16000
   1131c:	ldr	pc, [ip, #3524]!	; 0xdc4

00011320 <warn@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #90112	; 0x16000
   11328:	ldr	pc, [ip, #3516]!	; 0xdbc

0001132c <nl_langinfo@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #90112	; 0x16000
   11334:	ldr	pc, [ip, #3508]!	; 0xdb4

00011338 <fputc@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #90112	; 0x16000
   11340:	ldr	pc, [ip, #3500]!	; 0xdac

00011344 <localeconv@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #90112	; 0x16000
   1134c:	ldr	pc, [ip, #3492]!	; 0xda4

00011350 <mbstowcs@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #90112	; 0x16000
   11358:	ldr	pc, [ip, #3484]!	; 0xd9c

0001135c <__strtoll_internal@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #90112	; 0x16000
   11364:	ldr	pc, [ip, #3476]!	; 0xd94

00011368 <bindtextdomain@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #90112	; 0x16000
   11370:	ldr	pc, [ip, #3468]!	; 0xd8c

00011374 <isatty@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #90112	; 0x16000
   1137c:	ldr	pc, [ip, #3460]!	; 0xd84

00011380 <fputs@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #90112	; 0x16000
   11388:	ldr	pc, [ip, #3452]!	; 0xd7c

0001138c <strncmp@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #90112	; 0x16000
   11394:	ldr	pc, [ip, #3444]!	; 0xd74

00011398 <abort@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #90112	; 0x16000
   113a0:	ldr	pc, [ip, #3436]!	; 0xd6c

000113a4 <__snprintf_chk@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #90112	; 0x16000
   113ac:	ldr	pc, [ip, #3428]!	; 0xd64

000113b0 <strspn@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #90112	; 0x16000
   113b8:	ldr	pc, [ip, #3420]!	; 0xd5c

000113bc <__assert_fail@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #90112	; 0x16000
   113c4:	ldr	pc, [ip, #3412]!	; 0xd54

Disassembly of section .text:

000113c8 <.text>:
   113c8:	push	{r3, lr}
   113cc:	movw	r0, #29688	; 0x73f8
   113d0:	movw	r1, #29704	; 0x7408
   113d4:	movw	r3, #27708	; 0x6c3c
   113d8:	movt	r0, #1
   113dc:	movt	r1, #1
   113e0:	mov	r2, #201	; 0xc9
   113e4:	movt	r3, #1
   113e8:	bl	113bc <__assert_fail@plt>
   113ec:	movw	ip, #33464	; 0x82b8
   113f0:	movt	ip, #2
   113f4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113f8:	sub	sp, sp, #68	; 0x44
   113fc:	ldr	r3, [ip]
   11400:	mov	r9, r0
   11404:	str	r1, [sp, #8]
   11408:	mov	r0, #6
   1140c:	movw	r1, #28148	; 0x6df4
   11410:	movt	r1, #1
   11414:	str	ip, [sp, #12]
   11418:	movw	r6, #33496	; 0x82d8
   1141c:	str	r3, [sp, #60]	; 0x3c
   11420:	bl	11308 <setlocale@plt>
   11424:	movw	r0, #29832	; 0x7488
   11428:	movw	r1, #29844	; 0x7494
   1142c:	movt	r0, #1
   11430:	movt	r1, #1
   11434:	bl	11368 <bindtextdomain@plt>
   11438:	movw	r5, #33488	; 0x82d0
   1143c:	movw	r0, #29832	; 0x7488
   11440:	movt	r6, #2
   11444:	movt	r0, #1
   11448:	movt	r5, #2
   1144c:	bl	11140 <textdomain@plt>
   11450:	movw	r0, #9524	; 0x2534
   11454:	movt	r0, #1
   11458:	add	r7, sp, #32
   1145c:	bl	16c00 <__assert_fail@plt+0x5844>
   11460:	mov	ip, #0
   11464:	str	r7, [sp, #32]
   11468:	str	ip, [sp, #16]
   1146c:	str	r7, [sp, #36]	; 0x24
   11470:	mov	r4, #0
   11474:	movw	r2, #29960	; 0x7508
   11478:	str	r4, [sp]
   1147c:	movt	r2, #1
   11480:	mov	r0, r9
   11484:	ldr	r1, [sp, #8]
   11488:	ldr	r3, [pc, #2528]	; 11e70 <__assert_fail@plt+0xab4>
   1148c:	bl	111f4 <getopt_long@plt>
   11490:	cmn	r0, #1
   11494:	beq	117a0 <__assert_fail@plt+0x3e4>
   11498:	sub	r3, r0, #86	; 0x56
   1149c:	cmp	r3, #44	; 0x2c
   114a0:	ldrls	pc, [pc, r3, lsl #2]
   114a4:	b	11790 <__assert_fail@plt+0x3d4>
   114a8:	andeq	r1, r1, ip, lsr r7
   114ac:	muleq	r1, r0, r7
   114b0:	muleq	r1, r0, r7
   114b4:	muleq	r1, r0, r7
   114b8:	muleq	r1, r0, r7
   114bc:	muleq	r1, r0, r7
   114c0:	muleq	r1, r0, r7
   114c4:	muleq	r1, r0, r7
   114c8:	muleq	r1, r0, r7
   114cc:	muleq	r1, r0, r7
   114d0:	muleq	r1, r0, r7
   114d4:	muleq	r1, r0, r7
   114d8:	muleq	r1, r0, r7
   114dc:	andeq	r1, r1, r8, lsr #14
   114e0:	andeq	r1, r1, r4, lsl r7
   114e4:	andeq	r1, r1, r0, lsl #14
   114e8:	andeq	r1, r1, ip, ror #13
   114ec:	muleq	r1, r0, r7
   114f0:	ldrdeq	r1, [r1], -ip
   114f4:	andeq	r1, r1, r8, asr #13
   114f8:	muleq	r1, r0, r7
   114fc:	muleq	r1, r0, r7
   11500:			; <UNDEFINED> instruction: 0x000116b4
   11504:	andeq	r1, r1, r0, lsr #13
   11508:	andeq	r1, r1, ip, lsl #13
   1150c:	andeq	r1, r1, r0, ror #12
   11510:	andeq	r1, r1, ip, lsr #12
   11514:	andeq	r1, r1, r8, lsl r6
   11518:	andeq	r1, r1, r4, lsl #12
   1151c:	strdeq	r1, [r1], -r0
   11520:	ldrdeq	r1, [r1], -ip
   11524:	andeq	r1, r1, r8, asr #11
   11528:			; <UNDEFINED> instruction: 0x000115b4
   1152c:	muleq	r1, r0, r7
   11530:	andeq	r1, r1, r0, lsr #11
   11534:	andeq	r1, r1, ip, lsl #11
   11538:	muleq	r1, r0, r7
   1153c:	muleq	r1, r0, r7
   11540:	muleq	r1, r0, r7
   11544:	muleq	r1, r0, r7
   11548:	muleq	r1, r0, r7
   1154c:	muleq	r1, r0, r7
   11550:	andeq	r1, r1, ip, ror r5
   11554:	andeq	r1, r1, ip, ror #10
   11558:	andeq	r1, r1, ip, asr r5
   1155c:	ldr	ip, [sp, #16]
   11560:	orr	ip, ip, #8
   11564:	str	ip, [sp, #16]
   11568:	b	11470 <__assert_fail@plt+0xb4>
   1156c:	ldr	ip, [sp, #16]
   11570:	orr	ip, ip, #2
   11574:	str	ip, [sp, #16]
   11578:	b	11470 <__assert_fail@plt+0xb4>
   1157c:	ldr	r3, [r6, #28]
   11580:	add	r3, r3, #1
   11584:	str	r3, [r6, #28]
   11588:	b	11470 <__assert_fail@plt+0xb4>
   1158c:	ldr	r0, [r5]
   11590:	mov	r1, r7
   11594:	mov	r2, #13
   11598:	bl	12260 <__assert_fail@plt+0xea4>
   1159c:	b	11470 <__assert_fail@plt+0xb4>
   115a0:	ldr	r0, [r5]
   115a4:	mov	r1, r7
   115a8:	mov	r2, #5
   115ac:	bl	12260 <__assert_fail@plt+0xea4>
   115b0:	b	11470 <__assert_fail@plt+0xb4>
   115b4:	ldr	r0, [r5]
   115b8:	mov	r1, r7
   115bc:	mov	r2, #0
   115c0:	bl	12260 <__assert_fail@plt+0xea4>
   115c4:	b	11470 <__assert_fail@plt+0xb4>
   115c8:	ldr	r0, [r5]
   115cc:	mov	r1, r7
   115d0:	mov	r2, #10
   115d4:	bl	12260 <__assert_fail@plt+0xea4>
   115d8:	b	11470 <__assert_fail@plt+0xb4>
   115dc:	ldr	r0, [r5]
   115e0:	mov	r1, r7
   115e4:	mov	r2, #2
   115e8:	bl	12260 <__assert_fail@plt+0xea4>
   115ec:	b	11470 <__assert_fail@plt+0xb4>
   115f0:	ldr	r0, [r5]
   115f4:	mov	r1, r7
   115f8:	mov	r2, #15
   115fc:	bl	12260 <__assert_fail@plt+0xea4>
   11600:	b	11470 <__assert_fail@plt+0xb4>
   11604:	ldr	r0, [r5]
   11608:	mov	r1, r7
   1160c:	mov	r2, #12
   11610:	bl	12260 <__assert_fail@plt+0xea4>
   11614:	b	11470 <__assert_fail@plt+0xb4>
   11618:	ldr	r0, [r5]
   1161c:	mov	r1, r7
   11620:	mov	r2, #7
   11624:	bl	12260 <__assert_fail@plt+0xea4>
   11628:	b	11470 <__assert_fail@plt+0xb4>
   1162c:	ldr	r0, [r6]
   11630:	cmp	r0, #0
   11634:	bne	11dfc <__assert_fail@plt+0xa40>
   11638:	mov	r2, #5
   1163c:	movw	r1, #29904	; 0x74d0
   11640:	movt	r1, #1
   11644:	ldr	r4, [r5]
   11648:	bl	11128 <dcgettext@plt>
   1164c:	mov	r1, r0
   11650:	mov	r0, r4
   11654:	bl	12d24 <__assert_fail@plt+0x1968>
   11658:	str	r0, [r6]
   1165c:	b	11470 <__assert_fail@plt+0xb4>
   11660:	movw	r3, #8636	; 0x21bc
   11664:	ldr	r0, [r5]
   11668:	movt	r3, #1
   1166c:	ldr	r1, [pc, #2048]	; 11e74 <__assert_fail@plt+0xab8>
   11670:	mov	r2, #5
   11674:	bl	135fc <__assert_fail@plt+0x2240>
   11678:	cmp	r0, #0
   1167c:	str	r0, [r6, #24]
   11680:	bge	11470 <__assert_fail@plt+0xb4>
   11684:	mov	r0, #1
   11688:	b	11774 <__assert_fail@plt+0x3b8>
   1168c:	ldr	r0, [r5]
   11690:	mov	r1, r7
   11694:	mov	r2, #9
   11698:	bl	12260 <__assert_fail@plt+0xea4>
   1169c:	b	11470 <__assert_fail@plt+0xb4>
   116a0:	ldr	r0, [r5]
   116a4:	mov	r1, r7
   116a8:	mov	r2, #11
   116ac:	bl	12260 <__assert_fail@plt+0xea4>
   116b0:	b	11470 <__assert_fail@plt+0xb4>
   116b4:	ldr	r0, [r5]
   116b8:	mov	r1, r7
   116bc:	mov	r2, #6
   116c0:	bl	12260 <__assert_fail@plt+0xea4>
   116c4:	b	11470 <__assert_fail@plt+0xb4>
   116c8:	ldr	r0, [r5]
   116cc:	mov	r1, r7
   116d0:	mov	r2, #14
   116d4:	bl	12260 <__assert_fail@plt+0xea4>
   116d8:	b	11470 <__assert_fail@plt+0xb4>
   116dc:	movw	r3, #33480	; 0x82c8
   116e0:	movt	r3, #2
   116e4:	ldr	r0, [r3]
   116e8:	bl	11fb0 <__assert_fail@plt+0xbf4>
   116ec:	ldr	r0, [r5]
   116f0:	mov	r1, r7
   116f4:	mov	r2, #4
   116f8:	bl	12260 <__assert_fail@plt+0xea4>
   116fc:	b	11470 <__assert_fail@plt+0xb4>
   11700:	ldr	r0, [r5]
   11704:	mov	r1, r7
   11708:	mov	r2, #8
   1170c:	bl	12260 <__assert_fail@plt+0xea4>
   11710:	b	11470 <__assert_fail@plt+0xb4>
   11714:	ldr	r0, [r5]
   11718:	mov	r1, r7
   1171c:	mov	r2, #3
   11720:	bl	12260 <__assert_fail@plt+0xea4>
   11724:	b	11470 <__assert_fail@plt+0xb4>
   11728:	ldr	r0, [r5]
   1172c:	mov	r1, r7
   11730:	mov	r2, #1
   11734:	bl	12260 <__assert_fail@plt+0xea4>
   11738:	b	11470 <__assert_fail@plt+0xb4>
   1173c:	mov	r2, #5
   11740:	movw	r1, #29928	; 0x74e8
   11744:	mov	r0, #0
   11748:	movt	r1, #1
   1174c:	bl	11128 <dcgettext@plt>
   11750:	movw	r2, #33456	; 0x82b0
   11754:	movt	r2, #2
   11758:	movw	r3, #29940	; 0x74f4
   1175c:	movt	r3, #1
   11760:	ldr	r2, [r2]
   11764:	mov	r1, r0
   11768:	mov	r0, #1
   1176c:	bl	112d8 <__printf_chk@plt>
   11770:	mov	r0, #0
   11774:	ldr	ip, [sp, #12]
   11778:	ldr	r2, [sp, #60]	; 0x3c
   1177c:	ldr	r3, [ip]
   11780:	cmp	r2, r3
   11784:	bne	11de8 <__assert_fail@plt+0xa2c>
   11788:	add	sp, sp, #68	; 0x44
   1178c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11790:	movw	r3, #33476	; 0x82c4
   11794:	movt	r3, #2
   11798:	ldr	r0, [r3]
   1179c:	bl	11fb0 <__assert_fail@plt+0xbf4>
   117a0:	movw	ip, #33472	; 0x82c0
   117a4:	movt	ip, #2
   117a8:	movw	fp, #33496	; 0x82d8
   117ac:	str	ip, [sp, #24]
   117b0:	ldr	r3, [ip]
   117b4:	movt	fp, #2
   117b8:	cmp	r9, r3
   117bc:	ble	117cc <__assert_fail@plt+0x410>
   117c0:	ldr	r3, [fp]
   117c4:	cmp	r3, #0
   117c8:	bne	11e34 <__assert_fail@plt+0xa78>
   117cc:	ldr	r2, [fp, #24]
   117d0:	movw	r3, #33496	; 0x82d8
   117d4:	movt	r3, #2
   117d8:	cmp	r2, #0
   117dc:	bne	1180c <__assert_fail@plt+0x450>
   117e0:	mov	r1, #1
   117e4:	str	r2, [r3, #8]
   117e8:	str	r1, [r3, #4]
   117ec:	mov	r2, #2
   117f0:	mov	r1, #3
   117f4:	str	r2, [r3, #12]
   117f8:	str	r1, [r3, #16]
   117fc:	mov	r2, #5
   11800:	str	r2, [r3, #24]
   11804:	mov	r2, #4
   11808:	str	r2, [r3, #20]
   1180c:	ldr	sl, [sp, #32]
   11810:	cmp	sl, r7
   11814:	strne	r9, [sp, #20]
   11818:	ldrne	r8, [sl]
   1181c:	movne	r6, r8
   11820:	bne	11984 <__assert_fail@plt+0x5c8>
   11824:	b	11d20 <__assert_fail@plt+0x964>
   11828:	cmp	r4, #6
   1182c:	beq	11868 <__assert_fail@plt+0x4ac>
   11830:	ldr	r1, [sl, #24]
   11834:	mov	r2, #0
   11838:	ldr	r0, [fp]
   1183c:	add	r3, sp, #40	; 0x28
   11840:	ldr	r1, [r1, #12]
   11844:	bl	111a0 <prlimit64@plt>
   11848:	cmn	r0, #1
   1184c:	beq	11dc0 <__assert_fail@plt+0xa04>
   11850:	ldr	r3, [sl, #28]
   11854:	tst	r3, #2
   11858:	beq	11998 <__assert_fail@plt+0x5dc>
   1185c:	tst	r3, #4
   11860:	ldrdeq	r2, [sp, #48]	; 0x30
   11864:	strdeq	r2, [sl, #16]
   11868:	ldrd	r2, [sl, #8]
   1186c:	ldrd	r4, [sl, #16]
   11870:	cmp	r3, r5
   11874:	cmpeq	r2, r4
   11878:	bls	1189c <__assert_fail@plt+0x4e0>
   1187c:	mvn	r8, #0
   11880:	mvn	r9, #0
   11884:	cmp	r3, r9
   11888:	cmpeq	r2, r8
   1188c:	bne	11d98 <__assert_fail@plt+0x9dc>
   11890:	cmp	r5, r3
   11894:	cmpeq	r4, r2
   11898:	bne	11d98 <__assert_fail@plt+0x9dc>
   1189c:	ldr	r3, [fp, #28]
   118a0:	add	r4, sl, #8
   118a4:	cmp	r3, #0
   118a8:	beq	11930 <__assert_fail@plt+0x574>
   118ac:	mov	r2, #5
   118b0:	movw	r1, #30148	; 0x75c4
   118b4:	mov	r0, #0
   118b8:	movt	r1, #1
   118bc:	bl	11128 <dcgettext@plt>
   118c0:	ldr	r3, [sl, #24]
   118c4:	ldr	r2, [r3]
   118c8:	mov	r1, r0
   118cc:	mov	r0, #1
   118d0:	bl	112d8 <__printf_chk@plt>
   118d4:	ldrd	r2, [sl, #8]
   118d8:	mvn	r0, #0
   118dc:	mvn	r1, #0
   118e0:	cmp	r3, r1
   118e4:	cmpeq	r2, r0
   118e8:	beq	119d4 <__assert_fail@plt+0x618>
   118ec:	movw	r1, #30168	; 0x75d8
   118f0:	mov	r0, #1
   118f4:	movt	r1, #1
   118f8:	bl	112d8 <__printf_chk@plt>
   118fc:	ldrd	r0, [sl, #16]
   11900:	mvn	r2, #0
   11904:	mvn	r3, #0
   11908:	cmp	r1, r3
   1190c:	cmpeq	r0, r2
   11910:	beq	119a4 <__assert_fail@plt+0x5e8>
   11914:	mov	r3, r1
   11918:	mov	r2, r0
   1191c:	movw	r1, #30184	; 0x75e8
   11920:	mov	r0, #1
   11924:	movt	r1, #1
   11928:	bl	112d8 <__printf_chk@plt>
   1192c:	mov	r3, #0
   11930:	ldr	r1, [sl, #24]
   11934:	mov	r2, r4
   11938:	ldr	r0, [fp]
   1193c:	ldr	r1, [r1, #12]
   11940:	bl	111a0 <prlimit64@plt>
   11944:	cmn	r0, #1
   11948:	beq	11d5c <__assert_fail@plt+0x9a0>
   1194c:	ldr	r3, [sl, #28]
   11950:	cmp	r3, #0
   11954:	beq	11970 <__assert_fail@plt+0x5b4>
   11958:	ldr	r3, [sl, #4]
   1195c:	mov	r0, sl
   11960:	ldr	r2, [sl]
   11964:	str	r3, [r2, #4]
   11968:	str	r2, [r3]
   1196c:	bl	110e0 <free@plt>
   11970:	cmp	r6, r7
   11974:	ldr	r3, [r6]
   11978:	beq	11a00 <__assert_fail@plt+0x644>
   1197c:	mov	sl, r6
   11980:	mov	r6, r3
   11984:	ldr	r4, [sl, #28]
   11988:	cmp	r4, #0
   1198c:	bne	11828 <__assert_fail@plt+0x46c>
   11990:	add	r3, sl, #8
   11994:	b	11930 <__assert_fail@plt+0x574>
   11998:	ldrd	r2, [sp, #40]	; 0x28
   1199c:	strd	r2, [sl, #8]
   119a0:	b	11868 <__assert_fail@plt+0x4ac>
   119a4:	mov	r2, #5
   119a8:	movw	r1, #29780	; 0x7454
   119ac:	mov	r0, #0
   119b0:	movt	r1, #1
   119b4:	bl	11128 <dcgettext@plt>
   119b8:	movw	r1, #30176	; 0x75e0
   119bc:	movt	r1, #1
   119c0:	mov	r2, r0
   119c4:	mov	r0, #1
   119c8:	bl	112d8 <__printf_chk@plt>
   119cc:	mov	r3, #0
   119d0:	b	11930 <__assert_fail@plt+0x574>
   119d4:	mov	r2, #5
   119d8:	movw	r1, #29780	; 0x7454
   119dc:	mov	r0, #0
   119e0:	movt	r1, #1
   119e4:	bl	11128 <dcgettext@plt>
   119e8:	movw	r1, #30164	; 0x75d4
   119ec:	movt	r1, #1
   119f0:	mov	r2, r0
   119f4:	mov	r0, #1
   119f8:	bl	112d8 <__printf_chk@plt>
   119fc:	b	118fc <__assert_fail@plt+0x540>
   11a00:	ldr	r3, [sp, #32]
   11a04:	ldr	r9, [sp, #20]
   11a08:	cmp	r3, r7
   11a0c:	beq	11ab8 <__assert_fail@plt+0x6fc>
   11a10:	ldr	r0, [sp, #16]
   11a14:	bl	142e4 <__assert_fail@plt+0x2f28>
   11a18:	subs	ip, r0, #0
   11a1c:	str	ip, [sp, #16]
   11a20:	beq	11e1c <__assert_fail@plt+0xa60>
   11a24:	ldr	r3, [fp, #24]
   11a28:	movw	r4, #33496	; 0x82d8
   11a2c:	movt	r4, #2
   11a30:	cmp	r3, #0
   11a34:	ble	11b10 <__assert_fail@plt+0x754>
   11a38:	ldr	r3, [r4, #4]
   11a3c:	cmp	r3, #4
   11a40:	bgt	11c10 <__assert_fail@plt+0x854>
   11a44:	movw	r6, #33080	; 0x8138
   11a48:	add	r4, r4, #4
   11a4c:	movt	r6, #2
   11a50:	mov	r5, #0
   11a54:	ldr	r8, [sp, #16]
   11a58:	b	11a78 <__assert_fail@plt+0x6bc>
   11a5c:	ldr	r3, [fp, #24]
   11a60:	add	r5, r5, #1
   11a64:	cmp	r5, r3
   11a68:	bge	11b10 <__assert_fail@plt+0x754>
   11a6c:	ldr	r3, [r4, #4]!
   11a70:	cmp	r3, #4
   11a74:	bgt	11c10 <__assert_fail@plt+0x854>
   11a78:	add	r3, r3, r3, lsl #1
   11a7c:	mov	r0, r8
   11a80:	add	r2, r6, r3, lsl #3
   11a84:	ldr	r1, [r6, r3, lsl #3]
   11a88:	vldr	d0, [r2, #8]
   11a8c:	ldr	r2, [r2, #16]
   11a90:	bl	14414 <__assert_fail@plt+0x3058>
   11a94:	cmp	r0, #0
   11a98:	bne	11a5c <__assert_fail@plt+0x6a0>
   11a9c:	movw	r1, #30464	; 0x7700
   11aa0:	mov	r2, #5
   11aa4:	movt	r1, #1
   11aa8:	bl	11128 <dcgettext@plt>
   11aac:	bl	11248 <warnx@plt>
   11ab0:	ldr	r0, [sp, #16]
   11ab4:	bl	143c4 <__assert_fail@plt+0x3008>
   11ab8:	ldr	ip, [sp, #24]
   11abc:	movw	r4, #33472	; 0x82c0
   11ac0:	movt	r4, #2
   11ac4:	ldr	r1, [ip]
   11ac8:	cmp	r9, r1
   11acc:	movle	r0, #0
   11ad0:	ble	11774 <__assert_fail@plt+0x3b8>
   11ad4:	ldr	ip, [sp, #8]
   11ad8:	ldr	r0, [ip, r1, lsl #2]
   11adc:	add	r1, ip, r1, lsl #2
   11ae0:	bl	11110 <execvp@plt>
   11ae4:	mov	r2, #5
   11ae8:	movw	r1, #30568	; 0x7768
   11aec:	mov	r0, #0
   11af0:	movt	r1, #1
   11af4:	bl	11128 <dcgettext@plt>
   11af8:	ldr	r3, [r4]
   11afc:	ldr	ip, [sp, #8]
   11b00:	ldr	r2, [ip, r3, lsl #2]
   11b04:	mov	r1, r0
   11b08:	mov	r0, #1
   11b0c:	bl	11158 <err@plt>
   11b10:	ldr	r5, [sp, #32]
   11b14:	movw	ip, #33496	; 0x82d8
   11b18:	str	r9, [sp, #28]
   11b1c:	movt	ip, #2
   11b20:	str	ip, [sp, #20]
   11b24:	ldr	r3, [r5]
   11b28:	mov	r9, r3
   11b2c:	cmp	r5, r7
   11b30:	beq	11d10 <__assert_fail@plt+0x954>
   11b34:	cmp	r5, #0
   11b38:	beq	11e54 <__assert_fail@plt+0xa98>
   11b3c:	ldr	r0, [sp, #16]
   11b40:	mov	r1, #0
   11b44:	bl	144a4 <__assert_fail@plt+0x30e8>
   11b48:	subs	r8, r0, #0
   11b4c:	beq	11cd8 <__assert_fail@plt+0x91c>
   11b50:	ldr	r3, [fp, #24]
   11b54:	cmp	r3, #0
   11b58:	ble	11cec <__assert_fail@plt+0x930>
   11b5c:	ldr	ip, [sp, #20]
   11b60:	ldr	r3, [ip, #4]
   11b64:	mov	ip, #0
   11b68:	str	ip, [sp, #40]	; 0x28
   11b6c:	cmp	r3, #4
   11b70:	bgt	11c10 <__assert_fail@plt+0x854>
   11b74:	ldr	r4, [pc, #760]	; 11e74 <__assert_fail@plt+0xab8>
   11b78:	mov	sl, ip
   11b7c:	mov	r6, ip
   11b80:	cmp	r3, #4
   11b84:	ldrls	pc, [pc, r3, lsl #2]
   11b88:	b	11c58 <__assert_fail@plt+0x89c>
   11b8c:			; <UNDEFINED> instruction: 0x00011cb8
   11b90:	andeq	r1, r1, r0, ror #24
   11b94:	andeq	r1, r1, r0, lsr ip
   11b98:	andeq	r1, r1, r0, lsl #25
   11b9c:	andeq	r1, r1, r0, lsr #23
   11ba0:	ldr	r3, [r5, #24]
   11ba4:	ldr	r1, [r3, #8]
   11ba8:	cmp	r1, #0
   11bac:	beq	11bd4 <__assert_fail@plt+0x818>
   11bb0:	mov	r0, #0
   11bb4:	mov	r2, #5
   11bb8:	bl	11128 <dcgettext@plt>
   11bbc:	subs	r1, r0, #0
   11bc0:	beq	11bd4 <__assert_fail@plt+0x818>
   11bc4:	bl	1129c <__strdup@plt>
   11bc8:	cmp	r0, #0
   11bcc:	beq	11dec <__assert_fail@plt+0xa30>
   11bd0:	mov	r1, r0
   11bd4:	mov	r2, r1
   11bd8:	str	r1, [sp, #40]	; 0x28
   11bdc:	cmp	r2, #0
   11be0:	beq	11bf0 <__assert_fail@plt+0x834>
   11be4:	mov	r0, r8
   11be8:	mov	r1, sl
   11bec:	bl	145b0 <__assert_fail@plt+0x31f4>
   11bf0:	ldr	r3, [fp, #24]
   11bf4:	add	sl, sl, #1
   11bf8:	cmp	sl, r3
   11bfc:	bge	11cec <__assert_fail@plt+0x930>
   11c00:	ldr	r3, [r4, #4]!
   11c04:	str	r6, [sp, #40]	; 0x28
   11c08:	cmp	r3, #4
   11c0c:	ble	11b80 <__assert_fail@plt+0x7c4>
   11c10:	movw	r0, #30264	; 0x7638
   11c14:	movw	r1, #29704	; 0x7408
   11c18:	movw	r3, #27708	; 0x6c3c
   11c1c:	movt	r0, #1
   11c20:	movt	r1, #1
   11c24:	mov	r2, #202	; 0xca
   11c28:	movt	r3, #1
   11c2c:	bl	113bc <__assert_fail@plt>
   11c30:	ldrd	r2, [r5, #8]
   11c34:	mvn	r0, #0
   11c38:	mvn	r1, #0
   11c3c:	cmp	r3, r1
   11c40:	cmpeq	r2, r0
   11c44:	beq	11c98 <__assert_fail@plt+0x8dc>
   11c48:	movw	r1, #30536	; 0x7748
   11c4c:	add	r0, sp, #40	; 0x28
   11c50:	movt	r1, #1
   11c54:	bl	1214c <__assert_fail@plt+0xd90>
   11c58:	ldr	r2, [sp, #40]	; 0x28
   11c5c:	b	11bdc <__assert_fail@plt+0x820>
   11c60:	ldr	r3, [r5, #24]
   11c64:	movw	r1, #29748	; 0x7434
   11c68:	add	r0, sp, #40	; 0x28
   11c6c:	movt	r1, #1
   11c70:	ldr	r2, [r3]
   11c74:	bl	1214c <__assert_fail@plt+0xd90>
   11c78:	ldr	r2, [sp, #40]	; 0x28
   11c7c:	b	11bdc <__assert_fail@plt+0x820>
   11c80:	ldrd	r2, [r5, #16]
   11c84:	mvn	r0, #0
   11c88:	mvn	r1, #0
   11c8c:	cmp	r3, r1
   11c90:	cmpeq	r2, r0
   11c94:	bne	11c48 <__assert_fail@plt+0x88c>
   11c98:	movw	r1, #29748	; 0x7434
   11c9c:	movw	r2, #29780	; 0x7454
   11ca0:	movt	r1, #1
   11ca4:	movt	r2, #1
   11ca8:	add	r0, sp, #40	; 0x28
   11cac:	bl	1214c <__assert_fail@plt+0xd90>
   11cb0:	ldr	r2, [sp, #40]	; 0x28
   11cb4:	b	11bdc <__assert_fail@plt+0x820>
   11cb8:	ldr	r3, [r5, #24]
   11cbc:	movw	r1, #29748	; 0x7434
   11cc0:	add	r0, sp, #40	; 0x28
   11cc4:	movt	r1, #1
   11cc8:	ldr	r2, [r3, #4]
   11ccc:	bl	1214c <__assert_fail@plt+0xd90>
   11cd0:	ldr	r2, [sp, #40]	; 0x28
   11cd4:	b	11bdc <__assert_fail@plt+0x820>
   11cd8:	movw	r1, #30504	; 0x7728
   11cdc:	mov	r2, #5
   11ce0:	movt	r1, #1
   11ce4:	bl	11128 <dcgettext@plt>
   11ce8:	bl	11320 <warn@plt>
   11cec:	ldr	r3, [r5, #4]
   11cf0:	mov	r0, r5
   11cf4:	ldr	r2, [r5]
   11cf8:	mov	r5, r9
   11cfc:	str	r3, [r2, #4]
   11d00:	str	r2, [r3]
   11d04:	bl	110e0 <free@plt>
   11d08:	ldr	r9, [r9]
   11d0c:	b	11b2c <__assert_fail@plt+0x770>
   11d10:	ldr	r0, [sp, #16]
   11d14:	ldr	r9, [sp, #28]
   11d18:	bl	14c4c <__assert_fail@plt+0x3890>
   11d1c:	b	11ab0 <__assert_fail@plt+0x6f4>
   11d20:	mov	r4, #0
   11d24:	mov	r2, r4
   11d28:	mov	r0, #0
   11d2c:	mov	r1, r7
   11d30:	add	r4, r4, #1
   11d34:	bl	12260 <__assert_fail@plt+0xea4>
   11d38:	cmp	r4, #16
   11d3c:	bne	11d24 <__assert_fail@plt+0x968>
   11d40:	ldr	sl, [sp, #32]
   11d44:	cmp	sl, r7
   11d48:	ldr	r8, [sl]
   11d4c:	beq	11ab8 <__assert_fail@plt+0x6fc>
   11d50:	mov	r6, r8
   11d54:	str	r9, [sp, #20]
   11d58:	b	11984 <__assert_fail@plt+0x5c8>
   11d5c:	ldr	r0, [sl, #28]
   11d60:	cmp	r0, #0
   11d64:	movwne	r1, #30192	; 0x75f0
   11d68:	movweq	r1, #30228	; 0x7614
   11d6c:	movtne	r1, #1
   11d70:	movne	r2, #5
   11d74:	moveq	r2, #5
   11d78:	movteq	r1, #1
   11d7c:	movne	r0, #0
   11d80:	bl	11128 <dcgettext@plt>
   11d84:	ldr	r3, [sl, #24]
   11d88:	ldr	r2, [r3]
   11d8c:	mov	r1, r0
   11d90:	mov	r0, #1
   11d94:	bl	11158 <err@plt>
   11d98:	mov	r2, #5
   11d9c:	movw	r1, #30100	; 0x7594
   11da0:	mov	r0, #0
   11da4:	movt	r1, #1
   11da8:	bl	11128 <dcgettext@plt>
   11dac:	ldr	r3, [sl, #24]
   11db0:	ldr	r2, [r3]
   11db4:	mov	r1, r0
   11db8:	mov	r0, #1
   11dbc:	bl	11314 <errx@plt>
   11dc0:	mov	r2, #5
   11dc4:	movw	r1, #30072	; 0x7578
   11dc8:	mov	r0, #0
   11dcc:	movt	r1, #1
   11dd0:	bl	11128 <dcgettext@plt>
   11dd4:	ldr	r3, [sl, #24]
   11dd8:	ldr	r2, [r3]
   11ddc:	mov	r1, r0
   11de0:	mov	r0, #1
   11de4:	bl	11158 <err@plt>
   11de8:	bl	11134 <__stack_chk_fail@plt>
   11dec:	movw	r1, #30544	; 0x7750
   11df0:	mov	r0, #1
   11df4:	movt	r1, #1
   11df8:	bl	11158 <err@plt>
   11dfc:	movw	r1, #29864	; 0x74a8
   11e00:	mov	r0, #0
   11e04:	movt	r1, #1
   11e08:	mov	r2, #5
   11e0c:	bl	11128 <dcgettext@plt>
   11e10:	mov	r1, r0
   11e14:	mov	r0, #1
   11e18:	bl	11314 <errx@plt>
   11e1c:	mov	r2, #5
   11e20:	movw	r1, #30428	; 0x76dc
   11e24:	movt	r1, #1
   11e28:	bl	11128 <dcgettext@plt>
   11e2c:	bl	11320 <warn@plt>
   11e30:	b	11ab8 <__assert_fail@plt+0x6fc>
   11e34:	mov	r0, r4
   11e38:	movw	r1, #30020	; 0x7544
   11e3c:	mov	r2, #5
   11e40:	movt	r1, #1
   11e44:	bl	11128 <dcgettext@plt>
   11e48:	mov	r1, r0
   11e4c:	mov	r0, #1
   11e50:	bl	11314 <errx@plt>
   11e54:	movw	r0, #30500	; 0x7724
   11e58:	movw	r1, #29704	; 0x7408
   11e5c:	movt	r0, #1
   11e60:	movt	r1, #1
   11e64:	mov	r2, #218	; 0xda
   11e68:	ldr	r3, [pc, #8]	; 11e78 <__assert_fail@plt+0xabc>
   11e6c:	bl	113bc <__assert_fail@plt>
   11e70:	andeq	r6, r1, r0, ror #24
   11e74:	ldrdeq	r8, [r2], -ip
   11e78:	andeq	r6, r1, r0, ror #27
   11e7c:	mov	fp, #0
   11e80:	mov	lr, #0
   11e84:	pop	{r1}		; (ldr r1, [sp], #4)
   11e88:	mov	r2, sp
   11e8c:	push	{r2}		; (str r2, [sp, #-4]!)
   11e90:	push	{r0}		; (str r0, [sp, #-4]!)
   11e94:	ldr	ip, [pc, #16]	; 11eac <__assert_fail@plt+0xaf0>
   11e98:	push	{ip}		; (str ip, [sp, #-4]!)
   11e9c:	ldr	r0, [pc, #12]	; 11eb0 <__assert_fail@plt+0xaf4>
   11ea0:	ldr	r3, [pc, #12]	; 11eb4 <__assert_fail@plt+0xaf8>
   11ea4:	bl	111d0 <__libc_start_main@plt>
   11ea8:	bl	11398 <abort@plt>
   11eac:	strdeq	r6, [r1], -ip
   11eb0:	andeq	r1, r1, ip, ror #7
   11eb4:	muleq	r1, r8, fp
   11eb8:	ldr	r3, [pc, #20]	; 11ed4 <__assert_fail@plt+0xb18>
   11ebc:	ldr	r2, [pc, #20]	; 11ed8 <__assert_fail@plt+0xb1c>
   11ec0:	add	r3, pc, r3
   11ec4:	ldr	r2, [r3, r2]
   11ec8:	cmp	r2, #0
   11ecc:	bxeq	lr
   11ed0:	b	111dc <__gmon_start__@plt>
   11ed4:	andeq	r6, r1, r8, lsr r1
   11ed8:	andeq	r0, r0, r0, lsr #2
   11edc:	push	{r3, lr}
   11ee0:	movw	r0, #33456	; 0x82b0
   11ee4:	ldr	r3, [pc, #36]	; 11f10 <__assert_fail@plt+0xb54>
   11ee8:	movt	r0, #2
   11eec:	rsb	r3, r0, r3
   11ef0:	cmp	r3, #6
   11ef4:	popls	{r3, pc}
   11ef8:	movw	r3, #0
   11efc:	movt	r3, #0
   11f00:	cmp	r3, #0
   11f04:	popeq	{r3, pc}
   11f08:	blx	r3
   11f0c:	pop	{r3, pc}
   11f10:			; <UNDEFINED> instruction: 0x000282b3
   11f14:	push	{r3, lr}
   11f18:	movw	r0, #33456	; 0x82b0
   11f1c:	movw	r3, #33456	; 0x82b0
   11f20:	movt	r0, #2
   11f24:	movt	r3, #2
   11f28:	rsb	r3, r0, r3
   11f2c:	asr	r3, r3, #2
   11f30:	add	r3, r3, r3, lsr #31
   11f34:	asrs	r1, r3, #1
   11f38:	popeq	{r3, pc}
   11f3c:	movw	r2, #0
   11f40:	movt	r2, #0
   11f44:	cmp	r2, #0
   11f48:	popeq	{r3, pc}
   11f4c:	blx	r2
   11f50:	pop	{r3, pc}
   11f54:	push	{r4, lr}
   11f58:	movw	r4, #33492	; 0x82d4
   11f5c:	movt	r4, #2
   11f60:	ldrb	r3, [r4]
   11f64:	cmp	r3, #0
   11f68:	popne	{r4, pc}
   11f6c:	bl	11edc <__assert_fail@plt+0xb20>
   11f70:	mov	r3, #1
   11f74:	strb	r3, [r4]
   11f78:	pop	{r4, pc}
   11f7c:	movw	r0, #32492	; 0x7eec
   11f80:	movt	r0, #2
   11f84:	push	{r3, lr}
   11f88:	ldr	r3, [r0]
   11f8c:	cmp	r3, #0
   11f90:	beq	11fa8 <__assert_fail@plt+0xbec>
   11f94:	movw	r3, #0
   11f98:	movt	r3, #0
   11f9c:	cmp	r3, #0
   11fa0:	beq	11fa8 <__assert_fail@plt+0xbec>
   11fa4:	blx	r3
   11fa8:	pop	{r3, lr}
   11fac:	b	11f14 <__assert_fail@plt+0xb58>
   11fb0:	push	{r4, r5, r6, r7, lr}
   11fb4:	mov	r2, #5
   11fb8:	sub	sp, sp, #12
   11fbc:	mov	r5, r0
   11fc0:	movw	r1, #28140	; 0x6dec
   11fc4:	mov	r0, #0
   11fc8:	movt	r1, #1
   11fcc:	movw	r6, #33456	; 0x82b0
   11fd0:	bl	11128 <dcgettext@plt>
   11fd4:	mov	r1, r5
   11fd8:	bl	11380 <fputs@plt>
   11fdc:	mov	r2, #5
   11fe0:	movw	r1, #28152	; 0x6df8
   11fe4:	mov	r0, #0
   11fe8:	movt	r1, #1
   11fec:	movt	r6, #2
   11ff0:	bl	11128 <dcgettext@plt>
   11ff4:	mov	r1, #1
   11ff8:	ldr	r3, [r6]
   11ffc:	movw	r4, #33080	; 0x8138
   12000:	movt	r4, #2
   12004:	add	r7, r4, #120	; 0x78
   12008:	mov	r2, r0
   1200c:	mov	r0, r5
   12010:	bl	112f0 <__fprintf_chk@plt>
   12014:	mov	r2, #5
   12018:	movw	r1, #28176	; 0x6e10
   1201c:	mov	r0, #0
   12020:	movt	r1, #1
   12024:	bl	11128 <dcgettext@plt>
   12028:	ldr	r3, [r6]
   1202c:	mov	r1, #1
   12030:	mov	r2, r0
   12034:	mov	r0, r5
   12038:	bl	112f0 <__fprintf_chk@plt>
   1203c:	mov	r2, #5
   12040:	movw	r1, #28200	; 0x6e28
   12044:	mov	r0, #0
   12048:	movt	r1, #1
   1204c:	bl	11128 <dcgettext@plt>
   12050:	mov	r1, r5
   12054:	bl	11380 <fputs@plt>
   12058:	mov	r2, #5
   1205c:	movw	r1, #28220	; 0x6e3c
   12060:	mov	r0, #0
   12064:	movt	r1, #1
   12068:	bl	11128 <dcgettext@plt>
   1206c:	mov	r1, r5
   12070:	bl	11380 <fputs@plt>
   12074:	mov	r2, #5
   12078:	movw	r1, #28560	; 0x6f90
   1207c:	mov	r0, #0
   12080:	movt	r1, #1
   12084:	bl	11128 <dcgettext@plt>
   12088:	mov	r1, r5
   1208c:	bl	11380 <fputs@plt>
   12090:	mov	r2, #5
   12094:	movw	r1, #28584	; 0x6fa8
   12098:	mov	r0, #0
   1209c:	movt	r1, #1
   120a0:	bl	11128 <dcgettext@plt>
   120a4:	mov	r1, r5
   120a8:	bl	11380 <fputs@plt>
   120ac:	movw	r1, #29576	; 0x7388
   120b0:	mov	r0, #0
   120b4:	movt	r1, #1
   120b8:	mov	r2, #5
   120bc:	bl	11128 <dcgettext@plt>
   120c0:	mov	r1, r5
   120c4:	bl	11380 <fputs@plt>
   120c8:	ldr	r1, [r4, #20]
   120cc:	mov	r2, #5
   120d0:	mov	r0, #0
   120d4:	ldr	r6, [r4]
   120d8:	bl	11128 <dcgettext@plt>
   120dc:	add	r4, r4, #24
   120e0:	movw	r2, #29612	; 0x73ac
   120e4:	mov	r1, #1
   120e8:	mov	r3, r6
   120ec:	movt	r2, #1
   120f0:	str	r0, [sp]
   120f4:	mov	r0, r5
   120f8:	bl	112f0 <__fprintf_chk@plt>
   120fc:	cmp	r4, r7
   12100:	bne	120c8 <__assert_fail@plt+0xd0c>
   12104:	mov	r2, #5
   12108:	movw	r1, #29624	; 0x73b8
   1210c:	mov	r0, #0
   12110:	movt	r1, #1
   12114:	bl	11128 <dcgettext@plt>
   12118:	movw	r3, #29652	; 0x73d4
   1211c:	mov	r1, #1
   12120:	movt	r3, #1
   12124:	mov	r2, r0
   12128:	mov	r0, r5
   1212c:	bl	112f0 <__fprintf_chk@plt>
   12130:	movw	r3, #33476	; 0x82c4
   12134:	movt	r3, #2
   12138:	ldr	r0, [r3]
   1213c:	subs	r3, r5, r0
   12140:	rsbs	r0, r3, #0
   12144:	adcs	r0, r0, r3
   12148:	bl	1120c <exit@plt>
   1214c:	push	{r1, r2, r3}
   12150:	mov	r1, #1
   12154:	push	{r4, lr}
   12158:	movw	r4, #33464	; 0x82b8
   1215c:	movt	r4, #2
   12160:	sub	sp, sp, #12
   12164:	add	ip, sp, #24
   12168:	ldr	lr, [r4]
   1216c:	ldr	r2, [sp, #20]
   12170:	mov	r3, ip
   12174:	str	ip, [sp]
   12178:	str	lr, [sp, #4]
   1217c:	bl	11290 <__vasprintf_chk@plt>
   12180:	cmp	r0, #0
   12184:	blt	121ac <__assert_fail@plt+0xdf0>
   12188:	ldr	r2, [sp, #4]
   1218c:	ldr	r3, [r4]
   12190:	cmp	r2, r3
   12194:	bne	121a8 <__assert_fail@plt+0xdec>
   12198:	add	sp, sp, #12
   1219c:	pop	{r4, lr}
   121a0:	add	sp, sp, #12
   121a4:	bx	lr
   121a8:	bl	11134 <__stack_chk_fail@plt>
   121ac:	movw	r1, #29664	; 0x73e0
   121b0:	mov	r0, #1
   121b4:	movt	r1, #1
   121b8:	bl	11158 <err@plt>
   121bc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   121c0:	subs	r9, r0, #0
   121c4:	mov	r7, r1
   121c8:	movne	r4, #0
   121cc:	movwne	r8, #33080	; 0x8138
   121d0:	movne	r6, r4
   121d4:	movtne	r8, #2
   121d8:	beq	12240 <__assert_fail@plt+0xe84>
   121dc:	ldr	r5, [r8, r4]
   121e0:	mov	r0, r9
   121e4:	mov	r2, r7
   121e8:	mov	r1, r5
   121ec:	bl	11260 <strncasecmp@plt>
   121f0:	cmp	r0, #0
   121f4:	bne	12204 <__assert_fail@plt+0xe48>
   121f8:	ldrsb	r3, [r5, r7]
   121fc:	cmp	r3, #0
   12200:	beq	12238 <__assert_fail@plt+0xe7c>
   12204:	add	r4, r4, #24
   12208:	add	r6, r6, #1
   1220c:	cmp	r4, #120	; 0x78
   12210:	bne	121dc <__assert_fail@plt+0xe20>
   12214:	mov	r2, #5
   12218:	movw	r1, #29732	; 0x7424
   1221c:	mov	r0, #0
   12220:	movt	r1, #1
   12224:	bl	11128 <dcgettext@plt>
   12228:	mov	r1, r9
   1222c:	bl	11248 <warnx@plt>
   12230:	mvn	r0, #0
   12234:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12238:	mov	r0, r6
   1223c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12240:	movw	r0, #29724	; 0x741c
   12244:	movw	r1, #29704	; 0x7408
   12248:	movt	r0, #1
   1224c:	movt	r1, #1
   12250:	mov	r2, #264	; 0x108
   12254:	ldr	r3, [pc]	; 1225c <__assert_fail@plt+0xea0>
   12258:	bl	113bc <__assert_fail@plt>
   1225c:	andeq	r6, r1, ip, asr #24
   12260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12264:	movw	r5, #33464	; 0x82b8
   12268:	movt	r5, #2
   1226c:	sub	sp, sp, #12
   12270:	mov	r6, r0
   12274:	mov	r7, r1
   12278:	ldr	r3, [r5]
   1227c:	mov	r0, #1
   12280:	mov	r1, #32
   12284:	mov	r8, r2
   12288:	str	r3, [sp, #4]
   1228c:	bl	11098 <calloc@plt>
   12290:	subs	r4, r0, #0
   12294:	bne	122ac <__assert_fail@plt+0xef0>
   12298:	movw	r1, #29752	; 0x7438
   1229c:	mov	r0, #1
   122a0:	movt	r1, #1
   122a4:	mov	r2, #32
   122a8:	bl	11158 <err@plt>
   122ac:	ldr	r3, [pc, #636]	; 12530 <__assert_fail@plt+0x1174>
   122b0:	cmp	r6, #0
   122b4:	lsl	r8, r8, #4
   122b8:	str	r4, [r4]
   122bc:	add	r3, r3, r8
   122c0:	str	r4, [r4, #4]
   122c4:	str	r3, [r4, #24]
   122c8:	beq	1235c <__assert_fail@plt+0xfa0>
   122cc:	mov	r9, #0
   122d0:	str	r9, [sp]
   122d4:	bl	11254 <__errno_location@plt>
   122d8:	movw	r1, #29780	; 0x7454
   122dc:	movt	r1, #1
   122e0:	str	r9, [r0]
   122e4:	mov	sl, r0
   122e8:	mov	r0, r6
   122ec:	bl	110b0 <strcmp@plt>
   122f0:	cmp	r0, r9
   122f4:	beq	1238c <__assert_fail@plt+0xfd0>
   122f8:	ldrsb	r3, [r6]
   122fc:	cmp	r3, #58	; 0x3a
   12300:	beq	123a4 <__assert_fail@plt+0xfe8>
   12304:	movw	r1, #29780	; 0x7454
   12308:	mov	r0, r6
   1230c:	movt	r1, #1
   12310:	mov	r2, #9
   12314:	bl	1138c <strncmp@plt>
   12318:	cmp	r0, #0
   1231c:	bne	123d8 <__assert_fail@plt+0x101c>
   12320:	mvn	fp, #0
   12324:	add	r6, r6, #9
   12328:	mov	r9, fp
   1232c:	str	r6, [sp]
   12330:	ldrsb	r3, [r6]
   12334:	cmp	r3, #58	; 0x3a
   12338:	movne	r3, fp
   1233c:	movne	r1, r9
   12340:	movne	r2, #6
   12344:	beq	12418 <__assert_fail@plt+0x105c>
   12348:	str	fp, [r4, #8]
   1234c:	str	r9, [r4, #12]
   12350:	str	r3, [r4, #16]
   12354:	str	r1, [r4, #20]
   12358:	str	r2, [r4, #28]
   1235c:	ldr	r1, [sp, #4]
   12360:	mov	r0, #0
   12364:	ldr	r2, [r5]
   12368:	ldr	r3, [r7, #4]
   1236c:	cmp	r1, r2
   12370:	str	r4, [r7, #4]
   12374:	str	r7, [r4]
   12378:	str	r3, [r4, #4]
   1237c:	str	r4, [r3]
   12380:	bne	1252c <__assert_fail@plt+0x1170>
   12384:	add	sp, sp, #12
   12388:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1238c:	mvn	r3, #0
   12390:	mov	r1, r3
   12394:	mov	fp, r3
   12398:	mov	r9, r3
   1239c:	mov	r2, #6
   123a0:	b	12348 <__assert_fail@plt+0xf8c>
   123a4:	add	r6, r6, #1
   123a8:	movw	r1, #29780	; 0x7454
   123ac:	movt	r1, #1
   123b0:	mov	r0, r6
   123b4:	bl	110b0 <strcmp@plt>
   123b8:	cmp	r0, r9
   123bc:	bne	124cc <__assert_fail@plt+0x1110>
   123c0:	mvn	r3, #0
   123c4:	mov	r2, #4
   123c8:	mov	r1, r3
   123cc:	mov	fp, r3
   123d0:	mov	r9, r3
   123d4:	b	12348 <__assert_fail@plt+0xf8c>
   123d8:	mov	r0, r6
   123dc:	mov	r1, sp
   123e0:	mov	r2, #10
   123e4:	bl	112c0 <strtoull@plt>
   123e8:	ldr	r3, [sl]
   123ec:	cmp	r3, #0
   123f0:	mov	fp, r0
   123f4:	mov	r9, r1
   123f8:	bne	1249c <__assert_fail@plt+0x10e0>
   123fc:	ldr	r3, [sp]
   12400:	cmp	r3, #0
   12404:	beq	1249c <__assert_fail@plt+0x10e0>
   12408:	cmp	r6, r3
   1240c:	beq	1249c <__assert_fail@plt+0x10e0>
   12410:	mov	r6, r3
   12414:	b	12330 <__assert_fail@plt+0xf74>
   12418:	ldrsb	r3, [r6, #1]
   1241c:	cmp	r3, #0
   12420:	beq	1251c <__assert_fail@plt+0x1160>
   12424:	add	r6, r6, #1
   12428:	movw	r1, #29780	; 0x7454
   1242c:	movt	r1, #1
   12430:	mov	r0, r6
   12434:	bl	110b0 <strcmp@plt>
   12438:	cmp	r0, #0
   1243c:	mvneq	r3, #0
   12440:	moveq	r2, #6
   12444:	moveq	r1, r3
   12448:	beq	12348 <__assert_fail@plt+0xf8c>
   1244c:	add	r1, sp, #8
   12450:	mov	r3, #0
   12454:	mov	r2, #10
   12458:	str	r3, [sl]
   1245c:	str	r3, [r1, #-8]!
   12460:	mov	r0, r6
   12464:	mov	r1, sp
   12468:	bl	112c0 <strtoull@plt>
   1246c:	ldr	r2, [sl]
   12470:	cmp	r2, #0
   12474:	mov	r3, r0
   12478:	bne	1249c <__assert_fail@plt+0x10e0>
   1247c:	ldr	r2, [sp]
   12480:	cmp	r2, #0
   12484:	beq	1249c <__assert_fail@plt+0x10e0>
   12488:	ldrsb	r0, [r2]
   1248c:	cmp	r0, #0
   12490:	bne	1249c <__assert_fail@plt+0x10e0>
   12494:	cmp	r6, r2
   12498:	bne	1239c <__assert_fail@plt+0xfe0>
   1249c:	mov	r2, #5
   124a0:	movw	r1, #29792	; 0x7460
   124a4:	mov	r0, #0
   124a8:	movt	r1, #1
   124ac:	bl	11128 <dcgettext@plt>
   124b0:	movw	r3, #33080	; 0x8138
   124b4:	movt	r3, #2
   124b8:	add	r3, r3, r8
   124bc:	ldr	r2, [r3, #120]	; 0x78
   124c0:	mov	r1, r0
   124c4:	mov	r0, #1
   124c8:	bl	11314 <errx@plt>
   124cc:	mov	r2, #10
   124d0:	mov	r0, r6
   124d4:	mov	r1, sp
   124d8:	bl	112c0 <strtoull@plt>
   124dc:	ldr	r2, [sl]
   124e0:	cmp	r2, r9
   124e4:	mov	r3, r0
   124e8:	bne	1249c <__assert_fail@plt+0x10e0>
   124ec:	ldr	r2, [sp]
   124f0:	cmp	r2, r9
   124f4:	beq	1249c <__assert_fail@plt+0x10e0>
   124f8:	ldrsb	r0, [r2]
   124fc:	cmp	r0, r9
   12500:	bne	1249c <__assert_fail@plt+0x10e0>
   12504:	cmp	r6, r2
   12508:	beq	1249c <__assert_fail@plt+0x10e0>
   1250c:	mvn	fp, #0
   12510:	mov	r2, #4
   12514:	mov	r9, fp
   12518:	b	12348 <__assert_fail@plt+0xf8c>
   1251c:	mov	r3, fp
   12520:	mov	r1, r9
   12524:	mov	r2, #2
   12528:	b	12348 <__assert_fail@plt+0xf8c>
   1252c:	bl	11134 <__stack_chk_fail@plt>
   12530:			; <UNDEFINED> instruction: 0x000281b0
   12534:	movw	r3, #33480	; 0x82c8
   12538:	movt	r3, #2
   1253c:	push	{r4, r5, r6, lr}
   12540:	ldr	r4, [r3]
   12544:	mov	r0, r4
   12548:	bl	11188 <__fpending@plt>
   1254c:	mov	r6, r0
   12550:	mov	r0, r4
   12554:	bl	110ec <ferror@plt>
   12558:	mov	r5, r0
   1255c:	mov	r0, r4
   12560:	bl	112fc <fclose@plt>
   12564:	adds	r4, r0, #0
   12568:	movne	r4, #1
   1256c:	cmp	r5, #0
   12570:	bne	125e8 <__assert_fail@plt+0x122c>
   12574:	cmp	r4, #0
   12578:	beq	12594 <__assert_fail@plt+0x11d8>
   1257c:	cmp	r6, #0
   12580:	beq	12638 <__assert_fail@plt+0x127c>
   12584:	bl	11254 <__errno_location@plt>
   12588:	ldr	r3, [r0]
   1258c:	cmp	r3, #32
   12590:	bne	1264c <__assert_fail@plt+0x1290>
   12594:	movw	r3, #33476	; 0x82c4
   12598:	movt	r3, #2
   1259c:	ldr	r4, [r3]
   125a0:	mov	r0, r4
   125a4:	bl	11188 <__fpending@plt>
   125a8:	mov	r6, r0
   125ac:	mov	r0, r4
   125b0:	bl	110ec <ferror@plt>
   125b4:	mov	r5, r0
   125b8:	mov	r0, r4
   125bc:	bl	112fc <fclose@plt>
   125c0:	adds	r4, r0, #0
   125c4:	movne	r4, #1
   125c8:	cmp	r5, #0
   125cc:	beq	12614 <__assert_fail@plt+0x1258>
   125d0:	cmp	r4, #0
   125d4:	bne	125e0 <__assert_fail@plt+0x1224>
   125d8:	bl	11254 <__errno_location@plt>
   125dc:	str	r4, [r0]
   125e0:	mov	r0, #1
   125e4:	bl	110f8 <_exit@plt>
   125e8:	cmp	r4, #0
   125ec:	bne	12584 <__assert_fail@plt+0x11c8>
   125f0:	bl	11254 <__errno_location@plt>
   125f4:	str	r4, [r0]
   125f8:	mov	r2, #5
   125fc:	movw	r1, #29820	; 0x747c
   12600:	mov	r0, #0
   12604:	movt	r1, #1
   12608:	bl	11128 <dcgettext@plt>
   1260c:	bl	11248 <warnx@plt>
   12610:	b	125e0 <__assert_fail@plt+0x1224>
   12614:	cmp	r4, #0
   12618:	popeq	{r4, r5, r6, pc}
   1261c:	cmp	r6, #0
   12620:	bne	125e0 <__assert_fail@plt+0x1224>
   12624:	bl	11254 <__errno_location@plt>
   12628:	ldr	r3, [r0]
   1262c:	cmp	r3, #9
   12630:	bne	125e0 <__assert_fail@plt+0x1224>
   12634:	pop	{r4, r5, r6, pc}
   12638:	bl	11254 <__errno_location@plt>
   1263c:	ldr	r3, [r0]
   12640:	cmp	r3, #9
   12644:	bne	1258c <__assert_fail@plt+0x11d0>
   12648:	b	12594 <__assert_fail@plt+0x11d8>
   1264c:	cmp	r3, #0
   12650:	beq	125f8 <__assert_fail@plt+0x123c>
   12654:	mov	r2, #5
   12658:	movw	r1, #29820	; 0x747c
   1265c:	mov	r0, #0
   12660:	movt	r1, #1
   12664:	bl	11128 <dcgettext@plt>
   12668:	bl	11320 <warn@plt>
   1266c:	b	125e0 <__assert_fail@plt+0x1224>
   12670:	cmp	r0, #0
   12674:	mov	r3, #0
   12678:	str	r3, [r1]
   1267c:	bxeq	lr
   12680:	ldrb	r2, [r0]
   12684:	cmp	r2, #47	; 0x2f
   12688:	bne	126d0 <__assert_fail@plt+0x1314>
   1268c:	ldrsb	r3, [r0, #1]
   12690:	cmp	r3, #47	; 0x2f
   12694:	bne	126d8 <__assert_fail@plt+0x131c>
   12698:	mov	r3, r0
   1269c:	b	126bc <__assert_fail@plt+0x1300>
   126a0:	ldrb	r2, [r3, #1]
   126a4:	mov	r3, r0
   126a8:	cmp	r2, #47	; 0x2f
   126ac:	bne	126d0 <__assert_fail@plt+0x1314>
   126b0:	ldrsb	r2, [r0, #1]
   126b4:	cmp	r2, #47	; 0x2f
   126b8:	bne	126d8 <__assert_fail@plt+0x131c>
   126bc:	cmn	r3, #1
   126c0:	add	r0, r0, #1
   126c4:	bne	126a0 <__assert_fail@plt+0x12e4>
   126c8:	mov	r0, #0
   126cc:	bx	lr
   126d0:	cmp	r2, #0
   126d4:	beq	126c8 <__assert_fail@plt+0x130c>
   126d8:	mov	r3, #1
   126dc:	str	r3, [r1]
   126e0:	ldrsb	r3, [r0, #1]
   126e4:	cmp	r3, #47	; 0x2f
   126e8:	cmpne	r3, #0
   126ec:	bxeq	lr
   126f0:	mov	r3, #2
   126f4:	str	r3, [r1]
   126f8:	ldrb	r2, [r0, r3]
   126fc:	add	r3, r3, #1
   12700:	cmp	r2, #47	; 0x2f
   12704:	cmpne	r2, #0
   12708:	bne	126f4 <__assert_fail@plt+0x1338>
   1270c:	bx	lr
   12710:	push	{r3, r4, r5, r6, r7, lr}
   12714:	mov	r7, r1
   12718:	ldrb	r3, [r0]
   1271c:	cmp	r3, #0
   12720:	beq	12798 <__assert_fail@plt+0x13dc>
   12724:	mov	r4, #0
   12728:	mov	r5, r0
   1272c:	mov	r6, r4
   12730:	b	12760 <__assert_fail@plt+0x13a4>
   12734:	cmp	r3, #92	; 0x5c
   12738:	mov	r0, r7
   1273c:	mov	r1, r3
   12740:	beq	12788 <__assert_fail@plt+0x13cc>
   12744:	bl	1123c <strchr@plt>
   12748:	cmp	r0, #0
   1274c:	bne	12790 <__assert_fail@plt+0x13d4>
   12750:	ldrb	r3, [r5, #1]!
   12754:	add	r4, r4, #1
   12758:	cmp	r3, #0
   1275c:	beq	12780 <__assert_fail@plt+0x13c4>
   12760:	cmp	r6, #0
   12764:	sxtb	r3, r3
   12768:	beq	12734 <__assert_fail@plt+0x1378>
   1276c:	ldrb	r3, [r5, #1]!
   12770:	mov	r6, #0
   12774:	add	r4, r4, #1
   12778:	cmp	r3, #0
   1277c:	bne	12760 <__assert_fail@plt+0x13a4>
   12780:	rsb	r0, r6, r4
   12784:	pop	{r3, r4, r5, r6, r7, pc}
   12788:	mov	r6, #1
   1278c:	b	12750 <__assert_fail@plt+0x1394>
   12790:	mov	r0, r4
   12794:	pop	{r3, r4, r5, r6, r7, pc}
   12798:	mov	r0, r3
   1279c:	pop	{r3, r4, r5, r6, r7, pc}
   127a0:	ldr	r3, [pc, #224]	; 12888 <__assert_fail@plt+0x14cc>
   127a4:	push	{r4, r5, r6, r7, r8, r9, lr}
   127a8:	mov	r6, r0
   127ac:	ldr	r0, [pc, #216]	; 1288c <__assert_fail@plt+0x14d0>
   127b0:	add	r3, pc, r3
   127b4:	sub	sp, sp, #12
   127b8:	mov	r4, #0
   127bc:	mov	r9, r1
   127c0:	mov	r5, r2
   127c4:	ldr	r8, [r3, r0]
   127c8:	str	r4, [sp]
   127cc:	ldr	r3, [r8]
   127d0:	str	r3, [sp, #4]
   127d4:	bl	11254 <__errno_location@plt>
   127d8:	cmp	r6, r4
   127dc:	mov	r7, r0
   127e0:	str	r4, [r0]
   127e4:	beq	127f4 <__assert_fail@plt+0x1438>
   127e8:	ldrsb	r3, [r6]
   127ec:	cmp	r3, r4
   127f0:	bne	1280c <__assert_fail@plt+0x1450>
   127f4:	ldr	r1, [pc, #148]	; 12890 <__assert_fail@plt+0x14d4>
   127f8:	mov	r2, r9
   127fc:	mov	r3, r6
   12800:	mov	r0, #1
   12804:	add	r1, pc, r1
   12808:	bl	11314 <errx@plt>
   1280c:	mov	r3, r4
   12810:	mov	r2, r5
   12814:	mov	r0, r6
   12818:	mov	r1, sp
   1281c:	bl	1111c <__strtoull_internal@plt>
   12820:	ldr	r3, [r7]
   12824:	cmp	r3, r4
   12828:	bne	12864 <__assert_fail@plt+0x14a8>
   1282c:	ldr	r3, [sp]
   12830:	cmp	r6, r3
   12834:	beq	127f4 <__assert_fail@plt+0x1438>
   12838:	cmp	r3, r4
   1283c:	beq	1284c <__assert_fail@plt+0x1490>
   12840:	ldrsb	r3, [r3]
   12844:	cmp	r3, r4
   12848:	bne	127f4 <__assert_fail@plt+0x1438>
   1284c:	ldr	r2, [sp, #4]
   12850:	ldr	r3, [r8]
   12854:	cmp	r2, r3
   12858:	bne	12884 <__assert_fail@plt+0x14c8>
   1285c:	add	sp, sp, #12
   12860:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12864:	cmp	r3, #34	; 0x22
   12868:	bne	127f4 <__assert_fail@plt+0x1438>
   1286c:	ldr	r1, [pc, #32]	; 12894 <__assert_fail@plt+0x14d8>
   12870:	mov	r2, r9
   12874:	mov	r3, r6
   12878:	mov	r0, #1
   1287c:	add	r1, pc, r1
   12880:	bl	11158 <err@plt>
   12884:	bl	11134 <__stack_chk_fail@plt>
   12888:	andeq	r5, r1, r8, asr #16
   1288c:	andeq	r0, r0, ip, lsl r1
   12890:	andeq	r5, r0, ip, asr #5
   12894:	andeq	r5, r0, r4, asr r2
   12898:	ldr	r3, [pc, #596]	; 12af4 <__assert_fail@plt+0x1738>
   1289c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   128a0:	add	r3, pc, r3
   128a4:	subs	r6, r0, #0
   128a8:	ldr	r0, [pc, #584]	; 12af8 <__assert_fail@plt+0x173c>
   128ac:	mov	r8, r1
   128b0:	mov	r1, r3
   128b4:	sub	sp, sp, #20
   128b8:	mov	r9, r2
   128bc:	ldr	sl, [r1, r0]
   128c0:	mov	r2, #0
   128c4:	mov	r3, #0
   128c8:	ldr	r1, [sl]
   128cc:	strd	r2, [r8]
   128d0:	str	r1, [sp, #12]
   128d4:	beq	129bc <__assert_fail@plt+0x1600>
   128d8:	ldrb	r5, [r6]
   128dc:	cmp	r5, #0
   128e0:	beq	129bc <__assert_fail@plt+0x1600>
   128e4:	str	r6, [sp, #8]
   128e8:	bl	11200 <__ctype_b_loc@plt>
   128ec:	mov	r3, r6
   128f0:	ldr	r1, [r0]
   128f4:	b	12908 <__assert_fail@plt+0x154c>
   128f8:	add	r2, r3, #1
   128fc:	str	r2, [sp, #8]
   12900:	ldrb	r5, [r3, #1]
   12904:	mov	r3, r2
   12908:	lsl	r2, r5, #1
   1290c:	ldrh	r4, [r1, r2]
   12910:	and	r4, r4, #8192	; 0x2000
   12914:	uxth	r4, r4
   12918:	cmp	r4, #0
   1291c:	bne	128f8 <__assert_fail@plt+0x153c>
   12920:	cmp	r5, #45	; 0x2d
   12924:	beq	129bc <__assert_fail@plt+0x1600>
   12928:	add	r5, sp, #16
   1292c:	str	r4, [r5, #-8]!
   12930:	bl	11254 <__errno_location@plt>
   12934:	mov	r2, r4
   12938:	mov	r1, r5
   1293c:	mov	r3, r4
   12940:	mov	r7, r0
   12944:	mov	r0, r6
   12948:	str	r4, [r7]
   1294c:	bl	1111c <__strtoull_internal@plt>
   12950:	mov	r5, r1
   12954:	ldr	r1, [sp, #8]
   12958:	mov	r4, r0
   1295c:	cmp	r1, r6
   12960:	beq	129bc <__assert_fail@plt+0x1600>
   12964:	ldr	r3, [r7]
   12968:	cmp	r3, #0
   1296c:	bne	129a0 <__assert_fail@plt+0x15e4>
   12970:	cmp	r1, #0
   12974:	beq	12aa4 <__assert_fail@plt+0x16e8>
   12978:	ldrb	r0, [r1]
   1297c:	cmp	r0, #0
   12980:	bne	129c4 <__assert_fail@plt+0x1608>
   12984:	strd	r4, [r8]
   12988:	ldr	r2, [sp, #12]
   1298c:	ldr	r3, [sl]
   12990:	cmp	r2, r3
   12994:	bne	12af0 <__assert_fail@plt+0x1734>
   12998:	add	sp, sp, #20
   1299c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129a0:	subs	r2, r4, #1
   129a4:	mvn	r6, #2
   129a8:	sbc	r3, r5, #0
   129ac:	mvn	r7, #0
   129b0:	cmp	r3, r7
   129b4:	cmpeq	r2, r6
   129b8:	bls	12970 <__assert_fail@plt+0x15b4>
   129bc:	mvn	r0, #0
   129c0:	b	12988 <__assert_fail@plt+0x15cc>
   129c4:	ldrb	r2, [r1, #1]
   129c8:	sxtb	r3, r2
   129cc:	cmp	r3, #105	; 0x69
   129d0:	beq	12aac <__assert_fail@plt+0x16f0>
   129d4:	cmp	r3, #66	; 0x42
   129d8:	beq	12a88 <__assert_fail@plt+0x16cc>
   129dc:	cmp	r2, #0
   129e0:	bne	129bc <__assert_fail@plt+0x1600>
   129e4:	mov	r6, #1024	; 0x400
   129e8:	ldr	r7, [pc, #268]	; 12afc <__assert_fail@plt+0x1740>
   129ec:	sxtb	r3, r0
   129f0:	str	r3, [sp, #4]
   129f4:	add	r7, pc, r7
   129f8:	mov	r1, r3
   129fc:	mov	r0, r7
   12a00:	bl	1123c <strchr@plt>
   12a04:	ldr	r3, [sp, #4]
   12a08:	cmp	r0, #0
   12a0c:	rsbne	fp, r7, r0
   12a10:	addne	fp, fp, #1
   12a14:	beq	12ac8 <__assert_fail@plt+0x170c>
   12a18:	cmp	fp, #0
   12a1c:	beq	12a78 <__assert_fail@plt+0x16bc>
   12a20:	asr	r7, r6, #31
   12a24:	mvn	r0, #0
   12a28:	mvn	r1, #0
   12a2c:	mov	r2, r6
   12a30:	mov	r3, r7
   12a34:	bl	16218 <__assert_fail@plt+0x4e5c>
   12a38:	cmp	r1, r5
   12a3c:	cmpeq	r0, r4
   12a40:	bcc	12a9c <__assert_fail@plt+0x16e0>
   12a44:	sub	ip, fp, #1
   12a48:	mov	r3, #0
   12a4c:	b	12a60 <__assert_fail@plt+0x16a4>
   12a50:	cmp	r1, r5
   12a54:	cmpeq	r0, r4
   12a58:	add	r3, r3, #1
   12a5c:	bcc	12a9c <__assert_fail@plt+0x16e0>
   12a60:	mul	r2, r4, r7
   12a64:	cmp	r3, ip
   12a68:	mla	r2, r6, r5, r2
   12a6c:	umull	r4, r5, r4, r6
   12a70:	add	r5, r2, r5
   12a74:	bne	12a50 <__assert_fail@plt+0x1694>
   12a78:	mov	r0, #0
   12a7c:	cmp	r9, #0
   12a80:	strne	fp, [r9]
   12a84:	b	12984 <__assert_fail@plt+0x15c8>
   12a88:	ldrsb	r3, [r1, #2]
   12a8c:	cmp	r3, #0
   12a90:	bne	129bc <__assert_fail@plt+0x1600>
   12a94:	mov	r6, #1000	; 0x3e8
   12a98:	b	129e8 <__assert_fail@plt+0x162c>
   12a9c:	mvn	r0, #1
   12aa0:	b	12a7c <__assert_fail@plt+0x16c0>
   12aa4:	mov	r0, r1
   12aa8:	b	12984 <__assert_fail@plt+0x15c8>
   12aac:	ldrsb	r3, [r1, #2]
   12ab0:	cmp	r3, #66	; 0x42
   12ab4:	bne	129bc <__assert_fail@plt+0x1600>
   12ab8:	ldrsb	r3, [r1, #3]
   12abc:	cmp	r3, #0
   12ac0:	beq	129e4 <__assert_fail@plt+0x1628>
   12ac4:	b	129bc <__assert_fail@plt+0x1600>
   12ac8:	ldr	r7, [pc, #48]	; 12b00 <__assert_fail@plt+0x1744>
   12acc:	mov	r1, r3
   12ad0:	add	r7, pc, r7
   12ad4:	mov	r0, r7
   12ad8:	bl	1123c <strchr@plt>
   12adc:	cmp	r0, #0
   12ae0:	beq	129bc <__assert_fail@plt+0x1600>
   12ae4:	rsb	r7, r7, r0
   12ae8:	add	fp, r7, #1
   12aec:	b	12a18 <__assert_fail@plt+0x165c>
   12af0:	bl	11134 <__stack_chk_fail@plt>
   12af4:	andeq	r5, r1, r8, asr r7
   12af8:	andeq	r0, r0, ip, lsl r1
   12afc:	andeq	r5, r0, r8, ror #1
   12b00:	andeq	r5, r0, r8, lsl r0
   12b04:	mov	r2, #0
   12b08:	b	12898 <__assert_fail@plt+0x14dc>
   12b0c:	push	{r4, r5, r6, lr}
   12b10:	subs	r6, r0, #0
   12b14:	beq	12b98 <__assert_fail@plt+0x17dc>
   12b18:	ldrb	r4, [r6]
   12b1c:	cmp	r4, #0
   12b20:	beq	12ba0 <__assert_fail@plt+0x17e4>
   12b24:	bl	11200 <__ctype_b_loc@plt>
   12b28:	mov	r3, r6
   12b2c:	ldr	r5, [r0]
   12b30:	b	12b4c <__assert_fail@plt+0x1790>
   12b34:	cmn	r3, #1
   12b38:	beq	12b88 <__assert_fail@plt+0x17cc>
   12b3c:	ldrb	r4, [r3, #1]
   12b40:	mov	r3, r1
   12b44:	cmp	r4, #0
   12b48:	beq	12b90 <__assert_fail@plt+0x17d4>
   12b4c:	lsl	r4, r4, #1
   12b50:	mov	ip, r3
   12b54:	add	r1, r3, #1
   12b58:	ldrh	r2, [r5, r4]
   12b5c:	tst	r2, #2048	; 0x800
   12b60:	bne	12b34 <__assert_fail@plt+0x1778>
   12b64:	cmp	ip, #0
   12b68:	cmpne	ip, r6
   12b6c:	movls	r0, #0
   12b70:	movhi	r0, #1
   12b74:	popls	{r4, r5, r6, pc}
   12b78:	ldrsb	r0, [ip]
   12b7c:	rsbs	r0, r0, #1
   12b80:	movcc	r0, #0
   12b84:	pop	{r4, r5, r6, pc}
   12b88:	mov	r0, #0
   12b8c:	pop	{r4, r5, r6, pc}
   12b90:	mov	ip, r1
   12b94:	b	12b64 <__assert_fail@plt+0x17a8>
   12b98:	mov	r0, r6
   12b9c:	pop	{r4, r5, r6, pc}
   12ba0:	mov	r0, r4
   12ba4:	pop	{r4, r5, r6, pc}
   12ba8:	cmp	r1, #0
   12bac:	push	{r4, r5}
   12bb0:	sub	r4, r1, #1
   12bb4:	beq	12c20 <__assert_fail@plt+0x1864>
   12bb8:	ldrb	r1, [r0]
   12bbc:	cmp	r1, #0
   12bc0:	beq	12c20 <__assert_fail@plt+0x1864>
   12bc4:	sxtb	r1, r1
   12bc8:	sxtb	r2, r2
   12bcc:	cmp	r1, r2
   12bd0:	beq	12c0c <__assert_fail@plt+0x1850>
   12bd4:	add	r1, r0, #1
   12bd8:	mov	r3, #0
   12bdc:	b	12bf8 <__assert_fail@plt+0x183c>
   12be0:	ldrb	r0, [r1], #1
   12be4:	cmp	r0, #0
   12be8:	sxtb	ip, r0
   12bec:	beq	12c0c <__assert_fail@plt+0x1850>
   12bf0:	cmp	ip, r2
   12bf4:	beq	12c14 <__assert_fail@plt+0x1858>
   12bf8:	cmp	r3, r4
   12bfc:	mov	r5, r1
   12c00:	add	r3, r3, #1
   12c04:	bne	12be0 <__assert_fail@plt+0x1824>
   12c08:	mov	r0, #0
   12c0c:	pop	{r4, r5}
   12c10:	bx	lr
   12c14:	mov	r0, r5
   12c18:	pop	{r4, r5}
   12c1c:	bx	lr
   12c20:	mov	r0, r1
   12c24:	b	12c0c <__assert_fail@plt+0x1850>
   12c28:	ldr	r3, [pc, #228]	; 12d14 <__assert_fail@plt+0x1958>
   12c2c:	ldr	r2, [pc, #228]	; 12d18 <__assert_fail@plt+0x195c>
   12c30:	add	r3, pc, r3
   12c34:	push	{r4, r6, r7, r8, r9, lr}
   12c38:	subs	r6, r0, #0
   12c3c:	ldr	r7, [r3, r2]
   12c40:	mov	r0, r3
   12c44:	sub	sp, sp, #8
   12c48:	mov	r4, #0
   12c4c:	mov	r8, r1
   12c50:	ldr	r3, [r7]
   12c54:	str	r4, [sp]
   12c58:	str	r3, [sp, #4]
   12c5c:	beq	12c6c <__assert_fail@plt+0x18b0>
   12c60:	ldrsb	r3, [r6]
   12c64:	cmp	r3, r4
   12c68:	bne	12c94 <__assert_fail@plt+0x18d8>
   12c6c:	bl	11254 <__errno_location@plt>
   12c70:	ldr	r3, [r0]
   12c74:	cmp	r3, #0
   12c78:	bne	12cc0 <__assert_fail@plt+0x1904>
   12c7c:	ldr	r1, [pc, #152]	; 12d1c <__assert_fail@plt+0x1960>
   12c80:	mov	r2, r8
   12c84:	mov	r3, r6
   12c88:	mov	r0, #1
   12c8c:	add	r1, pc, r1
   12c90:	bl	11314 <errx@plt>
   12c94:	bl	11254 <__errno_location@plt>
   12c98:	mov	r3, r4
   12c9c:	mov	r1, sp
   12ca0:	mov	r2, #10
   12ca4:	mov	r9, r0
   12ca8:	str	r4, [r0]
   12cac:	mov	r0, r6
   12cb0:	bl	1135c <__strtoll_internal@plt>
   12cb4:	ldr	r3, [r9]
   12cb8:	cmp	r3, r4
   12cbc:	beq	12cd8 <__assert_fail@plt+0x191c>
   12cc0:	ldr	r1, [pc, #88]	; 12d20 <__assert_fail@plt+0x1964>
   12cc4:	mov	r2, r8
   12cc8:	mov	r3, r6
   12ccc:	mov	r0, #1
   12cd0:	add	r1, pc, r1
   12cd4:	bl	11158 <err@plt>
   12cd8:	ldr	r3, [sp]
   12cdc:	cmp	r6, r3
   12ce0:	beq	12c7c <__assert_fail@plt+0x18c0>
   12ce4:	cmp	r3, #0
   12ce8:	beq	12cf8 <__assert_fail@plt+0x193c>
   12cec:	ldrsb	r3, [r3]
   12cf0:	cmp	r3, #0
   12cf4:	bne	12c7c <__assert_fail@plt+0x18c0>
   12cf8:	ldr	r2, [sp, #4]
   12cfc:	ldr	r3, [r7]
   12d00:	cmp	r2, r3
   12d04:	bne	12d10 <__assert_fail@plt+0x1954>
   12d08:	add	sp, sp, #8
   12d0c:	pop	{r4, r6, r7, r8, r9, pc}
   12d10:	bl	11134 <__stack_chk_fail@plt>
   12d14:	andeq	r5, r1, r8, asr #7
   12d18:	andeq	r0, r0, ip, lsl r1
   12d1c:	andeq	r4, r0, r4, asr #28
   12d20:	andeq	r4, r0, r0, lsl #28
   12d24:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12d28:	mov	r8, r0
   12d2c:	mov	r9, r1
   12d30:	bl	12c28 <__assert_fail@plt+0x186c>
   12d34:	mvn	r4, #0
   12d38:	mov	r5, #0
   12d3c:	adds	r6, r0, #-2147483648	; 0x80000000
   12d40:	adc	r7, r1, #0
   12d44:	cmp	r7, r5
   12d48:	cmpeq	r6, r4
   12d4c:	popls	{r3, r4, r5, r6, r7, r8, r9, pc}
   12d50:	ldr	r1, [pc, #16]	; 12d68 <__assert_fail@plt+0x19ac>
   12d54:	mov	r2, r9
   12d58:	mov	r3, r8
   12d5c:	mov	r0, #1
   12d60:	add	r1, pc, r1
   12d64:	bl	11314 <errx@plt>
   12d68:	andeq	r4, r0, r0, ror sp
   12d6c:	push	{r3, r4, r5, lr}
   12d70:	mov	r4, r0
   12d74:	mov	r5, r1
   12d78:	bl	12d24 <__assert_fail@plt+0x1968>
   12d7c:	add	ip, r0, #32768	; 0x8000
   12d80:	cmp	ip, #65536	; 0x10000
   12d84:	bcs	12d90 <__assert_fail@plt+0x19d4>
   12d88:	sxth	r0, r0
   12d8c:	pop	{r3, r4, r5, pc}
   12d90:	ldr	r1, [pc, #16]	; 12da8 <__assert_fail@plt+0x19ec>
   12d94:	mov	r2, r5
   12d98:	mov	r3, r4
   12d9c:	mov	r0, #1
   12da0:	add	r1, pc, r1
   12da4:	bl	11314 <errx@plt>
   12da8:	andeq	r4, r0, r0, lsr sp
   12dac:	mov	r2, #10
   12db0:	b	127a0 <__assert_fail@plt+0x13e4>
   12db4:	push	{r3, r4, r5, r6, r7, lr}
   12db8:	mov	r6, r0
   12dbc:	mov	r7, r1
   12dc0:	bl	12dac <__assert_fail@plt+0x19f0>
   12dc4:	mvn	r4, #0
   12dc8:	mov	r5, #0
   12dcc:	cmp	r1, r5
   12dd0:	cmpeq	r0, r4
   12dd4:	popls	{r3, r4, r5, r6, r7, pc}
   12dd8:	ldr	r1, [pc, #16]	; 12df0 <__assert_fail@plt+0x1a34>
   12ddc:	mov	r2, r7
   12de0:	mov	r3, r6
   12de4:	mov	r0, #1
   12de8:	add	r1, pc, r1
   12dec:	bl	11314 <errx@plt>
   12df0:	andeq	r4, r0, r8, ror #25
   12df4:	push	{r3, r4, r5, lr}
   12df8:	mov	r4, r0
   12dfc:	mov	r5, r1
   12e00:	bl	12db4 <__assert_fail@plt+0x19f8>
   12e04:	cmp	r0, #65536	; 0x10000
   12e08:	bcs	12e14 <__assert_fail@plt+0x1a58>
   12e0c:	uxth	r0, r0
   12e10:	pop	{r3, r4, r5, pc}
   12e14:	ldr	r1, [pc, #16]	; 12e2c <__assert_fail@plt+0x1a70>
   12e18:	mov	r2, r5
   12e1c:	mov	r3, r4
   12e20:	mov	r0, #1
   12e24:	add	r1, pc, r1
   12e28:	bl	11314 <errx@plt>
   12e2c:	andeq	r4, r0, ip, lsr #25
   12e30:	mov	r2, #16
   12e34:	b	127a0 <__assert_fail@plt+0x13e4>
   12e38:	ldr	r3, [pc, #216]	; 12f18 <__assert_fail@plt+0x1b5c>
   12e3c:	push	{r4, r5, r6, r7, r8, lr}
   12e40:	subs	r4, r0, #0
   12e44:	ldr	r0, [pc, #208]	; 12f1c <__assert_fail@plt+0x1b60>
   12e48:	add	r3, pc, r3
   12e4c:	sub	sp, sp, #8
   12e50:	mov	r5, #0
   12e54:	mov	r7, r1
   12e58:	ldr	r6, [r3, r0]
   12e5c:	str	r5, [sp]
   12e60:	ldr	r3, [r6]
   12e64:	str	r3, [sp, #4]
   12e68:	beq	12e78 <__assert_fail@plt+0x1abc>
   12e6c:	ldrsb	r3, [r4]
   12e70:	cmp	r3, r5
   12e74:	bne	12ea0 <__assert_fail@plt+0x1ae4>
   12e78:	bl	11254 <__errno_location@plt>
   12e7c:	ldr	r3, [r0]
   12e80:	cmp	r3, #0
   12e84:	bne	12ec4 <__assert_fail@plt+0x1b08>
   12e88:	ldr	r1, [pc, #144]	; 12f20 <__assert_fail@plt+0x1b64>
   12e8c:	mov	r2, r7
   12e90:	mov	r3, r4
   12e94:	mov	r0, #1
   12e98:	add	r1, pc, r1
   12e9c:	bl	11314 <errx@plt>
   12ea0:	bl	11254 <__errno_location@plt>
   12ea4:	mov	r1, sp
   12ea8:	mov	r8, r0
   12eac:	str	r5, [r0]
   12eb0:	mov	r0, r4
   12eb4:	bl	112e4 <strtod@plt>
   12eb8:	ldr	r3, [r8]
   12ebc:	cmp	r3, r5
   12ec0:	beq	12edc <__assert_fail@plt+0x1b20>
   12ec4:	ldr	r1, [pc, #88]	; 12f24 <__assert_fail@plt+0x1b68>
   12ec8:	mov	r2, r7
   12ecc:	mov	r3, r4
   12ed0:	mov	r0, #1
   12ed4:	add	r1, pc, r1
   12ed8:	bl	11158 <err@plt>
   12edc:	ldr	r3, [sp]
   12ee0:	cmp	r4, r3
   12ee4:	beq	12e88 <__assert_fail@plt+0x1acc>
   12ee8:	cmp	r3, #0
   12eec:	beq	12efc <__assert_fail@plt+0x1b40>
   12ef0:	ldrsb	r3, [r3]
   12ef4:	cmp	r3, #0
   12ef8:	bne	12e88 <__assert_fail@plt+0x1acc>
   12efc:	ldr	r2, [sp, #4]
   12f00:	ldr	r3, [r6]
   12f04:	cmp	r2, r3
   12f08:	bne	12f14 <__assert_fail@plt+0x1b58>
   12f0c:	add	sp, sp, #8
   12f10:	pop	{r4, r5, r6, r7, r8, pc}
   12f14:	bl	11134 <__stack_chk_fail@plt>
   12f18:			; <UNDEFINED> instruction: 0x000151b0
   12f1c:	andeq	r0, r0, ip, lsl r1
   12f20:	andeq	r4, r0, r8, lsr ip
   12f24:	strdeq	r4, [r0], -ip
   12f28:	ldr	r3, [pc, #220]	; 1300c <__assert_fail@plt+0x1c50>
   12f2c:	push	{r4, r5, r6, r7, r8, lr}
   12f30:	subs	r4, r0, #0
   12f34:	ldr	r0, [pc, #212]	; 13010 <__assert_fail@plt+0x1c54>
   12f38:	add	r3, pc, r3
   12f3c:	sub	sp, sp, #8
   12f40:	mov	r5, #0
   12f44:	mov	r7, r1
   12f48:	ldr	r6, [r3, r0]
   12f4c:	str	r5, [sp]
   12f50:	ldr	r3, [r6]
   12f54:	str	r3, [sp, #4]
   12f58:	beq	12f68 <__assert_fail@plt+0x1bac>
   12f5c:	ldrsb	r3, [r4]
   12f60:	cmp	r3, r5
   12f64:	bne	12f90 <__assert_fail@plt+0x1bd4>
   12f68:	bl	11254 <__errno_location@plt>
   12f6c:	ldr	r3, [r0]
   12f70:	cmp	r3, #0
   12f74:	bne	12fb8 <__assert_fail@plt+0x1bfc>
   12f78:	ldr	r1, [pc, #148]	; 13014 <__assert_fail@plt+0x1c58>
   12f7c:	mov	r2, r7
   12f80:	mov	r3, r4
   12f84:	mov	r0, #1
   12f88:	add	r1, pc, r1
   12f8c:	bl	11314 <errx@plt>
   12f90:	bl	11254 <__errno_location@plt>
   12f94:	mov	r1, sp
   12f98:	mov	r2, #10
   12f9c:	mov	r8, r0
   12fa0:	str	r5, [r0]
   12fa4:	mov	r0, r4
   12fa8:	bl	110bc <strtol@plt>
   12fac:	ldr	r3, [r8]
   12fb0:	cmp	r3, r5
   12fb4:	beq	12fd0 <__assert_fail@plt+0x1c14>
   12fb8:	ldr	r1, [pc, #88]	; 13018 <__assert_fail@plt+0x1c5c>
   12fbc:	mov	r2, r7
   12fc0:	mov	r3, r4
   12fc4:	mov	r0, #1
   12fc8:	add	r1, pc, r1
   12fcc:	bl	11158 <err@plt>
   12fd0:	ldr	r3, [sp]
   12fd4:	cmp	r4, r3
   12fd8:	beq	12f78 <__assert_fail@plt+0x1bbc>
   12fdc:	cmp	r3, #0
   12fe0:	beq	12ff0 <__assert_fail@plt+0x1c34>
   12fe4:	ldrsb	r3, [r3]
   12fe8:	cmp	r3, #0
   12fec:	bne	12f78 <__assert_fail@plt+0x1bbc>
   12ff0:	ldr	r2, [sp, #4]
   12ff4:	ldr	r3, [r6]
   12ff8:	cmp	r2, r3
   12ffc:	bne	13008 <__assert_fail@plt+0x1c4c>
   13000:	add	sp, sp, #8
   13004:	pop	{r4, r5, r6, r7, r8, pc}
   13008:	bl	11134 <__stack_chk_fail@plt>
   1300c:	andeq	r5, r1, r0, asr #1
   13010:	andeq	r0, r0, ip, lsl r1
   13014:	andeq	r4, r0, r8, asr #22
   13018:	andeq	r4, r0, r8, lsl #22
   1301c:	ldr	r3, [pc, #220]	; 13100 <__assert_fail@plt+0x1d44>
   13020:	push	{r4, r5, r6, r7, r8, lr}
   13024:	subs	r4, r0, #0
   13028:	ldr	r0, [pc, #212]	; 13104 <__assert_fail@plt+0x1d48>
   1302c:	add	r3, pc, r3
   13030:	sub	sp, sp, #8
   13034:	mov	r5, #0
   13038:	mov	r7, r1
   1303c:	ldr	r6, [r3, r0]
   13040:	str	r5, [sp]
   13044:	ldr	r3, [r6]
   13048:	str	r3, [sp, #4]
   1304c:	beq	1305c <__assert_fail@plt+0x1ca0>
   13050:	ldrsb	r3, [r4]
   13054:	cmp	r3, r5
   13058:	bne	13084 <__assert_fail@plt+0x1cc8>
   1305c:	bl	11254 <__errno_location@plt>
   13060:	ldr	r3, [r0]
   13064:	cmp	r3, #0
   13068:	bne	130ac <__assert_fail@plt+0x1cf0>
   1306c:	ldr	r1, [pc, #148]	; 13108 <__assert_fail@plt+0x1d4c>
   13070:	mov	r2, r7
   13074:	mov	r3, r4
   13078:	mov	r0, #1
   1307c:	add	r1, pc, r1
   13080:	bl	11314 <errx@plt>
   13084:	bl	11254 <__errno_location@plt>
   13088:	mov	r1, sp
   1308c:	mov	r2, #10
   13090:	mov	r8, r0
   13094:	str	r5, [r0]
   13098:	mov	r0, r4
   1309c:	bl	11218 <strtoul@plt>
   130a0:	ldr	r3, [r8]
   130a4:	cmp	r3, r5
   130a8:	beq	130c4 <__assert_fail@plt+0x1d08>
   130ac:	ldr	r1, [pc, #88]	; 1310c <__assert_fail@plt+0x1d50>
   130b0:	mov	r2, r7
   130b4:	mov	r3, r4
   130b8:	mov	r0, #1
   130bc:	add	r1, pc, r1
   130c0:	bl	11158 <err@plt>
   130c4:	ldr	r3, [sp]
   130c8:	cmp	r4, r3
   130cc:	beq	1306c <__assert_fail@plt+0x1cb0>
   130d0:	cmp	r3, #0
   130d4:	beq	130e4 <__assert_fail@plt+0x1d28>
   130d8:	ldrsb	r3, [r3]
   130dc:	cmp	r3, #0
   130e0:	bne	1306c <__assert_fail@plt+0x1cb0>
   130e4:	ldr	r2, [sp, #4]
   130e8:	ldr	r3, [r6]
   130ec:	cmp	r2, r3
   130f0:	bne	130fc <__assert_fail@plt+0x1d40>
   130f4:	add	sp, sp, #8
   130f8:	pop	{r4, r5, r6, r7, r8, pc}
   130fc:	bl	11134 <__stack_chk_fail@plt>
   13100:	andeq	r4, r1, ip, asr #31
   13104:	andeq	r0, r0, ip, lsl r1
   13108:	andeq	r4, r0, r4, asr sl
   1310c:	andeq	r4, r0, r4, lsl sl
   13110:	ldr	ip, [pc, #132]	; 1319c <__assert_fail@plt+0x1de0>
   13114:	push	{r4, r5, r6, lr}
   13118:	add	ip, pc, ip
   1311c:	ldr	lr, [pc, #124]	; 131a0 <__assert_fail@plt+0x1de4>
   13120:	sub	sp, sp, #16
   13124:	mov	r6, r1
   13128:	mov	r5, r0
   1312c:	mov	r1, sp
   13130:	ldr	r4, [ip, lr]
   13134:	ldr	ip, [r4]
   13138:	str	ip, [sp, #12]
   1313c:	bl	12b04 <__assert_fail@plt+0x1748>
   13140:	cmp	r0, #0
   13144:	bne	13164 <__assert_fail@plt+0x1da8>
   13148:	ldr	r2, [sp, #12]
   1314c:	ldr	r3, [r4]
   13150:	ldrd	r0, [sp]
   13154:	cmp	r2, r3
   13158:	bne	13198 <__assert_fail@plt+0x1ddc>
   1315c:	add	sp, sp, #16
   13160:	pop	{r4, r5, r6, pc}
   13164:	bl	11254 <__errno_location@plt>
   13168:	mov	r2, r6
   1316c:	ldr	r3, [r0]
   13170:	mov	r0, #1
   13174:	cmp	r3, #0
   13178:	mov	r3, r5
   1317c:	beq	1318c <__assert_fail@plt+0x1dd0>
   13180:	ldr	r1, [pc, #28]	; 131a4 <__assert_fail@plt+0x1de8>
   13184:	add	r1, pc, r1
   13188:	bl	11158 <err@plt>
   1318c:	ldr	r1, [pc, #20]	; 131a8 <__assert_fail@plt+0x1dec>
   13190:	add	r1, pc, r1
   13194:	bl	11314 <errx@plt>
   13198:	bl	11134 <__stack_chk_fail@plt>
   1319c:	andeq	r4, r1, r0, ror #29
   131a0:	andeq	r0, r0, ip, lsl r1
   131a4:	andeq	r4, r0, ip, asr #18
   131a8:	andeq	r4, r0, r0, asr #18
   131ac:	push	{r4, lr}
   131b0:	mov	r4, r1
   131b4:	mov	r1, r2
   131b8:	bl	12e38 <__assert_fail@plt+0x1a7c>
   131bc:	vldr	d7, [pc, #28]	; 131e0 <__assert_fail@plt+0x1e24>
   131c0:	vcvt.s32.f64	s11, d0
   131c4:	vcvt.f64.s32	d6, s11
   131c8:	vstr	s11, [r4]
   131cc:	vsub.f64	d0, d0, d6
   131d0:	vmul.f64	d0, d0, d7
   131d4:	vcvt.s32.f64	s0, d0
   131d8:	vstr	s0, [r4, #4]
   131dc:	pop	{r4, pc}
   131e0:	andeq	r0, r0, r0
   131e4:	smlawbmi	lr, r0, r4, r8
   131e8:	and	r3, r0, #61440	; 0xf000
   131ec:	cmp	r3, #16384	; 0x4000
   131f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   131f4:	moveq	r3, #100	; 0x64
   131f8:	beq	13270 <__assert_fail@plt+0x1eb4>
   131fc:	cmp	r3, #40960	; 0xa000
   13200:	moveq	r3, #108	; 0x6c
   13204:	beq	13270 <__assert_fail@plt+0x1eb4>
   13208:	cmp	r3, #8192	; 0x2000
   1320c:	moveq	r3, #99	; 0x63
   13210:	beq	13270 <__assert_fail@plt+0x1eb4>
   13214:	cmp	r3, #24576	; 0x6000
   13218:	moveq	r3, #98	; 0x62
   1321c:	beq	13270 <__assert_fail@plt+0x1eb4>
   13220:	cmp	r3, #49152	; 0xc000
   13224:	moveq	r3, #115	; 0x73
   13228:	beq	13270 <__assert_fail@plt+0x1eb4>
   1322c:	cmp	r3, #4096	; 0x1000
   13230:	moveq	r3, #112	; 0x70
   13234:	beq	13270 <__assert_fail@plt+0x1eb4>
   13238:	cmp	r3, #32768	; 0x8000
   1323c:	beq	1326c <__assert_fail@plt+0x1eb0>
   13240:	mov	r4, #9
   13244:	mov	r3, #8
   13248:	mov	r6, #7
   1324c:	mov	r7, #6
   13250:	mov	r2, #5
   13254:	mov	r8, #4
   13258:	mov	r9, #3
   1325c:	mov	ip, #2
   13260:	mov	sl, #1
   13264:	mov	fp, #0
   13268:	b	1329c <__assert_fail@plt+0x1ee0>
   1326c:	mov	r3, #45	; 0x2d
   13270:	strb	r3, [r1]
   13274:	mov	r4, #10
   13278:	mov	r3, #9
   1327c:	mov	r6, #8
   13280:	mov	r7, #7
   13284:	mov	r2, #6
   13288:	mov	r8, #5
   1328c:	mov	r9, #4
   13290:	mov	ip, #3
   13294:	mov	sl, #2
   13298:	mov	fp, #1
   1329c:	tst	r0, #256	; 0x100
   132a0:	add	ip, r1, ip
   132a4:	moveq	r5, #45	; 0x2d
   132a8:	movne	r5, #114	; 0x72
   132ac:	tst	r0, #128	; 0x80
   132b0:	strb	r5, [r1, fp]
   132b4:	moveq	r5, #45	; 0x2d
   132b8:	movne	r5, #119	; 0x77
   132bc:	tst	r0, #2048	; 0x800
   132c0:	strb	r5, [r1, sl]
   132c4:	beq	13360 <__assert_fail@plt+0x1fa4>
   132c8:	tst	r0, #64	; 0x40
   132cc:	moveq	r5, #83	; 0x53
   132d0:	movne	r5, #115	; 0x73
   132d4:	tst	r0, #32
   132d8:	strb	r5, [ip]
   132dc:	add	r2, r1, r2
   132e0:	moveq	ip, #45	; 0x2d
   132e4:	movne	ip, #114	; 0x72
   132e8:	tst	r0, #16
   132ec:	strb	ip, [r1, r9]
   132f0:	moveq	ip, #45	; 0x2d
   132f4:	movne	ip, #119	; 0x77
   132f8:	tst	r0, #1024	; 0x400
   132fc:	strb	ip, [r1, r8]
   13300:	beq	13380 <__assert_fail@plt+0x1fc4>
   13304:	tst	r0, #8
   13308:	moveq	ip, #83	; 0x53
   1330c:	movne	ip, #115	; 0x73
   13310:	tst	r0, #4
   13314:	strb	ip, [r2]
   13318:	add	r3, r1, r3
   1331c:	moveq	r2, #45	; 0x2d
   13320:	movne	r2, #114	; 0x72
   13324:	tst	r0, #2
   13328:	strb	r2, [r1, r7]
   1332c:	moveq	r2, #45	; 0x2d
   13330:	movne	r2, #119	; 0x77
   13334:	tst	r0, #512	; 0x200
   13338:	strb	r2, [r1, r6]
   1333c:	beq	13370 <__assert_fail@plt+0x1fb4>
   13340:	tst	r0, #1
   13344:	moveq	r2, #84	; 0x54
   13348:	movne	r2, #116	; 0x74
   1334c:	strb	r2, [r3]
   13350:	mov	r3, #0
   13354:	strb	r3, [r1, r4]
   13358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   1335c:	bx	lr
   13360:	tst	r0, #64	; 0x40
   13364:	moveq	r5, #45	; 0x2d
   13368:	movne	r5, #120	; 0x78
   1336c:	b	132d4 <__assert_fail@plt+0x1f18>
   13370:	tst	r0, #1
   13374:	moveq	r2, #45	; 0x2d
   13378:	movne	r2, #120	; 0x78
   1337c:	b	1334c <__assert_fail@plt+0x1f90>
   13380:	tst	r0, #8
   13384:	moveq	ip, #45	; 0x2d
   13388:	movne	ip, #120	; 0x78
   1338c:	b	13310 <__assert_fail@plt+0x1f54>
   13390:	ldr	r1, [pc, #580]	; 135dc <__assert_fail@plt+0x2220>
   13394:	tst	r0, #2
   13398:	ldr	ip, [pc, #576]	; 135e0 <__assert_fail@plt+0x2224>
   1339c:	add	r1, pc, r1
   133a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   133a4:	sub	sp, sp, #100	; 0x64
   133a8:	ldr	r6, [r1, ip]
   133ac:	addeq	r7, sp, #52	; 0x34
   133b0:	addne	lr, sp, #53	; 0x35
   133b4:	addne	r7, sp, #52	; 0x34
   133b8:	moveq	lr, r7
   133bc:	mov	ip, #10
   133c0:	ldr	r1, [r6]
   133c4:	str	r1, [sp, #92]	; 0x5c
   133c8:	movne	r1, #32
   133cc:	strbne	r1, [sp, #52]	; 0x34
   133d0:	mov	r1, #1
   133d4:	sub	r9, ip, #32
   133d8:	rsb	r8, ip, #32
   133dc:	lsl	r5, r1, r9
   133e0:	lsl	r4, r1, ip
   133e4:	orr	r5, r5, r1, lsr r8
   133e8:	cmp	r3, r5
   133ec:	cmpeq	r2, r4
   133f0:	bcc	1355c <__assert_fail@plt+0x21a0>
   133f4:	add	ip, ip, #10
   133f8:	cmp	ip, #70	; 0x46
   133fc:	bne	133d4 <__assert_fail@plt+0x2018>
   13400:	mov	r1, #60	; 0x3c
   13404:	movw	r5, #26215	; 0x6667
   13408:	movt	r5, #26214	; 0x6666
   1340c:	ldr	r8, [pc, #464]	; 135e4 <__assert_fail@plt+0x2228>
   13410:	mov	fp, #1
   13414:	smull	sl, r9, r5, r1
   13418:	add	r8, pc, r8
   1341c:	str	r8, [sp, #36]	; 0x24
   13420:	sub	r8, r1, #32
   13424:	asr	r4, r1, #31
   13428:	lsl	r5, fp, r8
   1342c:	str	r4, [sp, #44]	; 0x2c
   13430:	lsl	r4, fp, r1
   13434:	subs	r4, r4, #1
   13438:	str	r9, [sp, #40]	; 0x28
   1343c:	rsb	r9, r1, #32
   13440:	ldr	sl, [sp, #40]	; 0x28
   13444:	orr	r5, r5, fp, lsr r9
   13448:	ldr	fp, [sp, #44]	; 0x2c
   1344c:	sbc	r5, r5, #0
   13450:	tst	r0, #1
   13454:	lsr	r1, r2, r1
   13458:	rsb	fp, fp, sl, asr #2
   1345c:	ldr	sl, [sp, #36]	; 0x24
   13460:	orr	r1, r1, r3, lsl r9
   13464:	and	r5, r5, r3
   13468:	orr	r8, r1, r3, lsr r8
   1346c:	and	r4, r4, r2
   13470:	ldrb	r0, [sl, fp]
   13474:	add	r3, lr, #1
   13478:	strb	r0, [lr]
   1347c:	bne	13540 <__assert_fail@plt+0x2184>
   13480:	orrs	fp, r4, r5
   13484:	mov	r2, #0
   13488:	strb	r2, [r3]
   1348c:	beq	13574 <__assert_fail@plt+0x21b8>
   13490:	sub	lr, ip, #20
   13494:	sub	ip, ip, #52	; 0x34
   13498:	rsb	r3, lr, #32
   1349c:	lsr	r0, r4, lr
   134a0:	orr	r0, r0, r5, lsl r3
   134a4:	lsr	r1, r5, lr
   134a8:	orr	r0, r0, r5, lsr ip
   134ac:	mov	r2, #100	; 0x64
   134b0:	adds	r0, r0, #50	; 0x32
   134b4:	mov	r3, #0
   134b8:	adc	r1, r1, #0
   134bc:	bl	16218 <__assert_fail@plt+0x4e5c>
   134c0:	mov	r4, r0
   134c4:	mov	r5, r1
   134c8:	cmp	r5, #0
   134cc:	cmpeq	r4, #10
   134d0:	addeq	r8, r8, #1
   134d4:	beq	13574 <__assert_fail@plt+0x21b8>
   134d8:	orrs	r2, r4, r5
   134dc:	beq	13574 <__assert_fail@plt+0x21b8>
   134e0:	bl	11344 <localeconv@plt>
   134e4:	cmp	r0, #0
   134e8:	beq	135c0 <__assert_fail@plt+0x2204>
   134ec:	ldr	r3, [r0]
   134f0:	cmp	r3, #0
   134f4:	beq	135d0 <__assert_fail@plt+0x2214>
   134f8:	ldrsb	r2, [r3]
   134fc:	cmp	r2, #0
   13500:	ldreq	r3, [pc, #224]	; 135e8 <__assert_fail@plt+0x222c>
   13504:	addeq	r3, pc, r3
   13508:	add	r9, sp, #60	; 0x3c
   1350c:	ldr	ip, [pc, #216]	; 135ec <__assert_fail@plt+0x2230>
   13510:	mov	r1, #32
   13514:	str	r3, [sp, #8]
   13518:	add	ip, pc, ip
   1351c:	str	r8, [sp, #4]
   13520:	mov	r0, r9
   13524:	strd	r4, [sp, #16]
   13528:	mov	r3, r1
   1352c:	str	r7, [sp, #24]
   13530:	mov	r2, #1
   13534:	str	ip, [sp]
   13538:	bl	113a4 <__snprintf_chk@plt>
   1353c:	b	135a0 <__assert_fail@plt+0x21e4>
   13540:	cmp	r0, #66	; 0x42
   13544:	addne	r3, lr, #3
   13548:	movne	r1, #105	; 0x69
   1354c:	movne	r2, #66	; 0x42
   13550:	strbne	r1, [lr, #1]
   13554:	strbne	r2, [lr, #2]
   13558:	b	13480 <__assert_fail@plt+0x20c4>
   1355c:	subs	r1, ip, #10
   13560:	strbeq	r1, [lr, #1]
   13564:	moveq	r3, #66	; 0x42
   13568:	moveq	r8, r2
   1356c:	strbeq	r3, [lr]
   13570:	bne	13404 <__assert_fail@plt+0x2048>
   13574:	ldr	r3, [pc, #116]	; 135f0 <__assert_fail@plt+0x2234>
   13578:	add	r9, sp, #60	; 0x3c
   1357c:	mov	r1, #32
   13580:	str	r8, [sp, #4]
   13584:	add	r3, pc, r3
   13588:	str	r7, [sp, #8]
   1358c:	str	r3, [sp]
   13590:	mov	r0, r9
   13594:	mov	r3, r1
   13598:	mov	r2, #1
   1359c:	bl	113a4 <__snprintf_chk@plt>
   135a0:	mov	r0, r9
   135a4:	bl	1129c <__strdup@plt>
   135a8:	ldr	r2, [sp, #92]	; 0x5c
   135ac:	ldr	r3, [r6]
   135b0:	cmp	r2, r3
   135b4:	bne	135cc <__assert_fail@plt+0x2210>
   135b8:	add	sp, sp, #100	; 0x64
   135bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135c0:	ldr	r3, [pc, #44]	; 135f4 <__assert_fail@plt+0x2238>
   135c4:	add	r3, pc, r3
   135c8:	b	13508 <__assert_fail@plt+0x214c>
   135cc:	bl	11134 <__stack_chk_fail@plt>
   135d0:	ldr	r3, [pc, #32]	; 135f8 <__assert_fail@plt+0x223c>
   135d4:	add	r3, pc, r3
   135d8:	b	13508 <__assert_fail@plt+0x214c>
   135dc:	andeq	r4, r1, ip, asr ip
   135e0:	andeq	r0, r0, ip, lsl r1
   135e4:	andeq	r4, r0, r0, ror #13
   135e8:	strdeq	r4, [r0], -r0
   135ec:	andeq	r4, r0, r8, ror #11
   135f0:	andeq	r4, r0, r8, lsl #11
   135f4:	andeq	r4, r0, r0, lsr r5
   135f8:	andeq	r4, r0, r0, lsr #10
   135fc:	cmp	r0, #0
   13600:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13604:	mov	r8, r1
   13608:	mov	sl, r2
   1360c:	mov	r9, r3
   13610:	beq	136cc <__assert_fail@plt+0x2310>
   13614:	ldrb	r5, [r0]
   13618:	cmp	r5, #0
   1361c:	beq	136cc <__assert_fail@plt+0x2310>
   13620:	cmp	r2, #0
   13624:	cmpne	r1, #0
   13628:	movne	ip, #0
   1362c:	moveq	ip, #1
   13630:	beq	136cc <__assert_fail@plt+0x2310>
   13634:	cmp	r3, #0
   13638:	movne	r4, r0
   1363c:	movne	r6, ip
   13640:	bne	13654 <__assert_fail@plt+0x2298>
   13644:	b	136cc <__assert_fail@plt+0x2310>
   13648:	ldrb	r5, [r4, #1]!
   1364c:	cmp	r5, #0
   13650:	beq	136c4 <__assert_fail@plt+0x2308>
   13654:	cmp	sl, r6
   13658:	bls	136d4 <__assert_fail@plt+0x2318>
   1365c:	cmp	ip, #0
   13660:	ldrsb	r7, [r4, #1]
   13664:	moveq	ip, r4
   13668:	cmp	r5, #44	; 0x2c
   1366c:	mov	r0, ip
   13670:	moveq	r5, r4
   13674:	movne	r5, #0
   13678:	cmp	r7, #0
   1367c:	addeq	r5, r4, #1
   13680:	cmp	r5, #0
   13684:	rsb	r1, ip, r5
   13688:	beq	136bc <__assert_fail@plt+0x2300>
   1368c:	cmp	ip, r5
   13690:	bcs	136cc <__assert_fail@plt+0x2310>
   13694:	blx	r9
   13698:	mov	ip, #0
   1369c:	add	r3, r6, #1
   136a0:	cmn	r0, #1
   136a4:	beq	136cc <__assert_fail@plt+0x2310>
   136a8:	str	r0, [r8, r6, lsl #2]
   136ac:	mov	r6, r3
   136b0:	ldrsb	r2, [r5]
   136b4:	cmp	r2, ip
   136b8:	beq	136dc <__assert_fail@plt+0x2320>
   136bc:	cmn	r4, #1
   136c0:	bne	13648 <__assert_fail@plt+0x228c>
   136c4:	mov	r0, r6
   136c8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136cc:	mvn	r0, #0
   136d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136d4:	mvn	r0, #1
   136d8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   136dc:	mov	r6, r3
   136e0:	b	136c4 <__assert_fail@plt+0x2308>
   136e4:	cmp	r0, #0
   136e8:	push	{r4, lr}
   136ec:	mov	r4, r3
   136f0:	beq	13768 <__assert_fail@plt+0x23ac>
   136f4:	ldrb	ip, [r0]
   136f8:	cmp	ip, #0
   136fc:	beq	13768 <__assert_fail@plt+0x23ac>
   13700:	cmp	r3, #0
   13704:	beq	13768 <__assert_fail@plt+0x23ac>
   13708:	ldr	r3, [r3]
   1370c:	cmp	r3, #0
   13710:	blt	13768 <__assert_fail@plt+0x23ac>
   13714:	cmp	r3, r2
   13718:	bhi	13768 <__assert_fail@plt+0x23ac>
   1371c:	cmp	ip, #43	; 0x2b
   13720:	lsleq	ip, r3, #2
   13724:	addeq	r0, r0, #1
   13728:	movne	ip, #0
   1372c:	strne	ip, [r4]
   13730:	movne	r3, ip
   13734:	add	r1, r1, ip
   13738:	rsb	r2, r3, r2
   1373c:	ldr	r3, [sp, #8]
   13740:	bl	135fc <__assert_fail@plt+0x2240>
   13744:	subs	r3, r0, #0
   13748:	ble	13760 <__assert_fail@plt+0x23a4>
   1374c:	ldr	r2, [r4]
   13750:	mov	r0, r3
   13754:	add	r3, r2, r3
   13758:	str	r3, [r4]
   1375c:	pop	{r4, pc}
   13760:	mov	r0, r3
   13764:	pop	{r4, pc}
   13768:	mvn	r0, #0
   1376c:	pop	{r4, pc}
   13770:	cmp	r2, #0
   13774:	cmpne	r0, #0
   13778:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1377c:	mov	r4, r0
   13780:	mov	r7, r2
   13784:	movne	r3, #0
   13788:	moveq	r3, #1
   1378c:	mov	r9, r1
   13790:	beq	1382c <__assert_fail@plt+0x2470>
   13794:	cmp	r1, #0
   13798:	beq	1382c <__assert_fail@plt+0x2470>
   1379c:	mov	r6, r0
   137a0:	mov	r8, #1
   137a4:	ldrb	r5, [r6], #1
   137a8:	cmp	r5, #0
   137ac:	beq	1381c <__assert_fail@plt+0x2460>
   137b0:	cmp	r5, #44	; 0x2c
   137b4:	ldrsb	r0, [r4, #1]
   137b8:	moveq	r5, r4
   137bc:	movne	r5, #0
   137c0:	cmp	r3, #0
   137c4:	moveq	r3, r4
   137c8:	cmp	r0, #0
   137cc:	mov	r0, r3
   137d0:	moveq	r5, r6
   137d4:	cmp	r5, #0
   137d8:	rsb	r1, r3, r5
   137dc:	beq	13814 <__assert_fail@plt+0x2458>
   137e0:	cmp	r3, r5
   137e4:	bcs	13824 <__assert_fail@plt+0x2468>
   137e8:	blx	r7
   137ec:	mov	r3, #0
   137f0:	cmp	r0, #0
   137f4:	and	r2, r0, #7
   137f8:	poplt	{r3, r4, r5, r6, r7, r8, r9, pc}
   137fc:	ldrb	r1, [r9, r0, asr #3]
   13800:	orr	r2, r1, r8, lsl r2
   13804:	strb	r2, [r9, r0, asr #3]
   13808:	ldrsb	r2, [r5]
   1380c:	cmp	r2, r3
   13810:	beq	1381c <__assert_fail@plt+0x2460>
   13814:	adds	r4, r4, #1
   13818:	bne	137a4 <__assert_fail@plt+0x23e8>
   1381c:	mov	r0, #0
   13820:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13824:	mvn	r0, #0
   13828:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1382c:	mvn	r0, #21
   13830:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13834:	cmp	r2, #0
   13838:	cmpne	r0, #0
   1383c:	push	{r4, r5, r6, r7, r8, lr}
   13840:	movne	r3, #0
   13844:	moveq	r3, #1
   13848:	mov	r4, r0
   1384c:	mov	r8, r2
   13850:	mov	r7, r1
   13854:	beq	138e8 <__assert_fail@plt+0x252c>
   13858:	cmp	r1, #0
   1385c:	beq	138e8 <__assert_fail@plt+0x252c>
   13860:	mov	r6, r0
   13864:	ldrb	r5, [r6], #1
   13868:	cmp	r5, #0
   1386c:	beq	138d8 <__assert_fail@plt+0x251c>
   13870:	cmp	r5, #44	; 0x2c
   13874:	ldrsb	r0, [r4, #1]
   13878:	moveq	r5, r4
   1387c:	movne	r5, #0
   13880:	cmp	r3, #0
   13884:	moveq	r3, r4
   13888:	cmp	r0, #0
   1388c:	mov	r0, r3
   13890:	moveq	r5, r6
   13894:	cmp	r5, #0
   13898:	rsb	r1, r3, r5
   1389c:	beq	138d0 <__assert_fail@plt+0x2514>
   138a0:	cmp	r3, r5
   138a4:	bcs	138e0 <__assert_fail@plt+0x2524>
   138a8:	blx	r8
   138ac:	mov	r3, #0
   138b0:	cmp	r0, #0
   138b4:	poplt	{r4, r5, r6, r7, r8, pc}
   138b8:	ldr	r2, [r7]
   138bc:	orr	r0, r2, r0
   138c0:	str	r0, [r7]
   138c4:	ldrsb	r2, [r5]
   138c8:	cmp	r2, r3
   138cc:	beq	138d8 <__assert_fail@plt+0x251c>
   138d0:	adds	r4, r4, #1
   138d4:	bne	13864 <__assert_fail@plt+0x24a8>
   138d8:	mov	r0, #0
   138dc:	pop	{r4, r5, r6, r7, r8, pc}
   138e0:	mvn	r0, #0
   138e4:	pop	{r4, r5, r6, r7, r8, pc}
   138e8:	mvn	r0, #21
   138ec:	pop	{r4, r5, r6, r7, r8, pc}
   138f0:	ldr	ip, [pc, #380]	; 13a74 <__assert_fail@plt+0x26b8>
   138f4:	push	{r4, r5, r6, r7, r8, r9, lr}
   138f8:	subs	r4, r0, #0
   138fc:	ldr	r0, [pc, #372]	; 13a78 <__assert_fail@plt+0x26bc>
   13900:	add	ip, pc, ip
   13904:	mov	r6, r2
   13908:	sub	sp, sp, #12
   1390c:	mov	r2, ip
   13910:	mov	r8, #0
   13914:	ldr	r7, [ip, r0]
   13918:	mov	r9, r1
   1391c:	str	r8, [sp]
   13920:	ldr	r2, [r7]
   13924:	str	r2, [sp, #4]
   13928:	beq	13998 <__assert_fail@plt+0x25dc>
   1392c:	str	r3, [r1]
   13930:	str	r3, [r6]
   13934:	bl	11254 <__errno_location@plt>
   13938:	str	r8, [r0]
   1393c:	mov	r5, r0
   13940:	ldrsb	r3, [r4]
   13944:	cmp	r3, #58	; 0x3a
   13948:	beq	139b4 <__assert_fail@plt+0x25f8>
   1394c:	mov	r0, r4
   13950:	mov	r2, #10
   13954:	mov	r1, sp
   13958:	bl	110bc <strtol@plt>
   1395c:	str	r0, [r9]
   13960:	str	r0, [r6]
   13964:	ldr	r0, [r5]
   13968:	cmp	r0, #0
   1396c:	bne	13a68 <__assert_fail@plt+0x26ac>
   13970:	ldr	r3, [sp]
   13974:	cmp	r3, #0
   13978:	beq	13a68 <__assert_fail@plt+0x26ac>
   1397c:	cmp	r4, r3
   13980:	beq	13a68 <__assert_fail@plt+0x26ac>
   13984:	ldrsb	r2, [r3]
   13988:	cmp	r2, #58	; 0x3a
   1398c:	beq	13a00 <__assert_fail@plt+0x2644>
   13990:	cmp	r2, #45	; 0x2d
   13994:	beq	13a10 <__assert_fail@plt+0x2654>
   13998:	mov	r0, #0
   1399c:	ldr	r2, [sp, #4]
   139a0:	ldr	r3, [r7]
   139a4:	cmp	r2, r3
   139a8:	bne	13a70 <__assert_fail@plt+0x26b4>
   139ac:	add	sp, sp, #12
   139b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
   139b4:	add	r4, r4, #1
   139b8:	mov	r1, sp
   139bc:	mov	r2, #10
   139c0:	mov	r0, r4
   139c4:	bl	110bc <strtol@plt>
   139c8:	str	r0, [r6]
   139cc:	ldr	r3, [r5]
   139d0:	cmp	r3, #0
   139d4:	bne	13a68 <__assert_fail@plt+0x26ac>
   139d8:	ldr	r3, [sp]
   139dc:	cmp	r3, #0
   139e0:	beq	13a68 <__assert_fail@plt+0x26ac>
   139e4:	ldrsb	r2, [r3]
   139e8:	cmp	r2, #0
   139ec:	bne	13a68 <__assert_fail@plt+0x26ac>
   139f0:	cmp	r4, r3
   139f4:	movne	r0, #0
   139f8:	mvneq	r0, #0
   139fc:	b	1399c <__assert_fail@plt+0x25e0>
   13a00:	ldrsb	r2, [r3, #1]
   13a04:	cmp	r2, #0
   13a08:	streq	r0, [r6]
   13a0c:	beq	1399c <__assert_fail@plt+0x25e0>
   13a10:	add	r4, r3, #1
   13a14:	mov	ip, #0
   13a18:	mov	r1, sp
   13a1c:	mov	r2, #10
   13a20:	mov	r0, r4
   13a24:	str	ip, [r5]
   13a28:	str	ip, [sp]
   13a2c:	bl	110bc <strtol@plt>
   13a30:	str	r0, [r6]
   13a34:	ldr	r3, [r5]
   13a38:	cmp	r3, #0
   13a3c:	bne	13a68 <__assert_fail@plt+0x26ac>
   13a40:	ldr	r2, [sp]
   13a44:	cmp	r2, #0
   13a48:	beq	13a68 <__assert_fail@plt+0x26ac>
   13a4c:	ldrsb	r3, [r2]
   13a50:	cmp	r3, #0
   13a54:	bne	13a68 <__assert_fail@plt+0x26ac>
   13a58:	cmp	r4, r2
   13a5c:	movne	r0, #0
   13a60:	mvneq	r0, #0
   13a64:	b	1399c <__assert_fail@plt+0x25e0>
   13a68:	mvn	r0, #0
   13a6c:	b	1399c <__assert_fail@plt+0x25e0>
   13a70:	bl	11134 <__stack_chk_fail@plt>
   13a74:	strdeq	r4, [r1], -r8
   13a78:	andeq	r0, r0, ip, lsl r1
   13a7c:	rsbs	r2, r0, #1
   13a80:	push	{r4, r5, r6, lr}
   13a84:	movcc	r2, #0
   13a88:	rsbs	r3, r1, #1
   13a8c:	mov	r5, r0
   13a90:	mov	r4, r1
   13a94:	movcc	r3, #0
   13a98:	ands	ip, r2, r3
   13a9c:	bne	13b08 <__assert_fail@plt+0x274c>
   13aa0:	orrs	r3, r2, r3
   13aa4:	bne	13b10 <__assert_fail@plt+0x2754>
   13aa8:	bl	110b0 <strcmp@plt>
   13aac:	cmp	r0, #0
   13ab0:	beq	13b08 <__assert_fail@plt+0x274c>
   13ab4:	mov	r0, r5
   13ab8:	bl	11230 <strlen@plt>
   13abc:	mov	r6, r0
   13ac0:	mov	r0, r4
   13ac4:	bl	11230 <strlen@plt>
   13ac8:	cmp	r6, #0
   13acc:	beq	13ae0 <__assert_fail@plt+0x2724>
   13ad0:	sub	r3, r6, #1
   13ad4:	ldrsb	r2, [r5, r3]
   13ad8:	cmp	r2, #47	; 0x2f
   13adc:	moveq	r6, r3
   13ae0:	cmp	r0, #0
   13ae4:	beq	13af8 <__assert_fail@plt+0x273c>
   13ae8:	sub	r3, r0, #1
   13aec:	ldrsb	r2, [r4, r3]
   13af0:	cmp	r2, #47	; 0x2f
   13af4:	moveq	r0, r3
   13af8:	cmp	r6, r0
   13afc:	beq	13b18 <__assert_fail@plt+0x275c>
   13b00:	mov	r0, #0
   13b04:	pop	{r4, r5, r6, pc}
   13b08:	mov	r0, #1
   13b0c:	pop	{r4, r5, r6, pc}
   13b10:	mov	r0, ip
   13b14:	pop	{r4, r5, r6, pc}
   13b18:	mov	r0, r5
   13b1c:	mov	r1, r4
   13b20:	mov	r2, r6
   13b24:	bl	1138c <strncmp@plt>
   13b28:	rsbs	r0, r0, #1
   13b2c:	movcc	r0, #0
   13b30:	pop	{r4, r5, r6, pc}
   13b34:	ldr	r3, [pc, #248]	; 13c34 <__assert_fail@plt+0x2878>
   13b38:	cmp	r0, #0
   13b3c:	cmpne	r1, #0
   13b40:	ldr	r2, [pc, #240]	; 13c38 <__assert_fail@plt+0x287c>
   13b44:	add	r3, pc, r3
   13b48:	push	{r4, r5, r6, r7, r8, r9, lr}
   13b4c:	sub	sp, sp, #20
   13b50:	ldr	r9, [r3, r2]
   13b54:	mov	r6, r1
   13b58:	addne	r8, sp, #4
   13b5c:	addne	r7, sp, #8
   13b60:	ldr	r3, [r9]
   13b64:	str	r3, [sp, #12]
   13b68:	bne	13bb0 <__assert_fail@plt+0x27f4>
   13b6c:	b	13c28 <__assert_fail@plt+0x286c>
   13b70:	cmp	r4, r3
   13b74:	bne	13c28 <__assert_fail@plt+0x286c>
   13b78:	mov	r0, r5
   13b7c:	mov	r1, r6
   13b80:	mov	r2, r4
   13b84:	bl	1138c <strncmp@plt>
   13b88:	cmp	r0, #0
   13b8c:	bne	13c28 <__assert_fail@plt+0x286c>
   13b90:	adds	r6, r6, r4
   13b94:	moveq	r3, #0
   13b98:	movne	r3, #1
   13b9c:	adds	r0, r5, r4
   13ba0:	moveq	r3, #0
   13ba4:	andne	r3, r3, #1
   13ba8:	cmp	r3, #0
   13bac:	beq	13c28 <__assert_fail@plt+0x286c>
   13bb0:	mov	r1, r8
   13bb4:	bl	12670 <__assert_fail@plt+0x12b4>
   13bb8:	mov	r1, r7
   13bbc:	mov	r5, r0
   13bc0:	mov	r0, r6
   13bc4:	bl	12670 <__assert_fail@plt+0x12b4>
   13bc8:	ldr	r4, [sp, #4]
   13bcc:	ldr	r3, [sp, #8]
   13bd0:	mov	r6, r0
   13bd4:	adds	r0, r3, r4
   13bd8:	beq	13c0c <__assert_fail@plt+0x2850>
   13bdc:	cmp	r0, #1
   13be0:	bne	13b70 <__assert_fail@plt+0x27b4>
   13be4:	cmp	r5, #0
   13be8:	beq	13bf8 <__assert_fail@plt+0x283c>
   13bec:	ldrsb	r2, [r5]
   13bf0:	cmp	r2, #47	; 0x2f
   13bf4:	beq	13c10 <__assert_fail@plt+0x2854>
   13bf8:	cmp	r6, #0
   13bfc:	beq	13b70 <__assert_fail@plt+0x27b4>
   13c00:	ldrsb	r2, [r6]
   13c04:	cmp	r2, #47	; 0x2f
   13c08:	bne	13b70 <__assert_fail@plt+0x27b4>
   13c0c:	mov	r0, #1
   13c10:	ldr	r2, [sp, #12]
   13c14:	ldr	r3, [r9]
   13c18:	cmp	r2, r3
   13c1c:	bne	13c30 <__assert_fail@plt+0x2874>
   13c20:	add	sp, sp, #20
   13c24:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13c28:	mov	r0, #0
   13c2c:	b	13c10 <__assert_fail@plt+0x2854>
   13c30:	bl	11134 <__stack_chk_fail@plt>
   13c34:			; <UNDEFINED> instruction: 0x000144b4
   13c38:	andeq	r0, r0, ip, lsl r1
   13c3c:	rsbs	r3, r0, #1
   13c40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13c44:	movcc	r3, #0
   13c48:	rsbs	r4, r1, #1
   13c4c:	mov	r7, r1
   13c50:	mov	r6, r2
   13c54:	mov	sl, r0
   13c58:	movcc	r4, #0
   13c5c:	tst	r3, r4
   13c60:	bne	13cc4 <__assert_fail@plt+0x2908>
   13c64:	cmp	r3, #0
   13c68:	bne	13cdc <__assert_fail@plt+0x2920>
   13c6c:	cmp	r4, #0
   13c70:	bne	13cec <__assert_fail@plt+0x2930>
   13c74:	bl	11230 <strlen@plt>
   13c78:	mvn	r3, r0
   13c7c:	cmp	r6, r3
   13c80:	mov	r5, r0
   13c84:	bhi	13cd4 <__assert_fail@plt+0x2918>
   13c88:	add	r9, r0, r6
   13c8c:	add	r0, r9, #1
   13c90:	bl	111c4 <malloc@plt>
   13c94:	subs	r8, r0, #0
   13c98:	beq	13cf4 <__assert_fail@plt+0x2938>
   13c9c:	mov	r1, sl
   13ca0:	mov	r2, r5
   13ca4:	bl	11104 <memcpy@plt>
   13ca8:	add	r0, r8, r5
   13cac:	mov	r1, r7
   13cb0:	mov	r2, r6
   13cb4:	bl	11104 <memcpy@plt>
   13cb8:	strb	r4, [r8, r9]
   13cbc:	mov	r0, r8
   13cc0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cc4:	mov	r0, #1
   13cc8:	mov	r1, r0
   13ccc:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cd0:	b	11098 <calloc@plt>
   13cd4:	mov	r0, r4
   13cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cdc:	mov	r0, r1
   13ce0:	mov	r1, r2
   13ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13ce8:	b	1114c <__strndup@plt>
   13cec:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13cf0:	b	1129c <__strdup@plt>
   13cf4:	mov	r0, r8
   13cf8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13cfc:	push	{r3, r4, r5, lr}
   13d00:	subs	r4, r1, #0
   13d04:	mov	r5, r0
   13d08:	beq	13d28 <__assert_fail@plt+0x296c>
   13d0c:	mov	r0, r4
   13d10:	bl	11230 <strlen@plt>
   13d14:	mov	r1, r4
   13d18:	mov	r2, r0
   13d1c:	mov	r0, r5
   13d20:	pop	{r3, r4, r5, lr}
   13d24:	b	13c3c <__assert_fail@plt+0x2880>
   13d28:	mov	r2, r4
   13d2c:	mov	r0, r5
   13d30:	mov	r1, r4
   13d34:	pop	{r3, r4, r5, lr}
   13d38:	b	13c3c <__assert_fail@plt+0x2880>
   13d3c:	push	{r1, r2, r3}
   13d40:	mov	r1, #1
   13d44:	push	{r4, r5, lr}
   13d48:	sub	sp, sp, #16
   13d4c:	ldr	lr, [pc, #124]	; 13dd0 <__assert_fail@plt+0x2a14>
   13d50:	add	ip, sp, #32
   13d54:	ldr	r4, [pc, #120]	; 13dd4 <__assert_fail@plt+0x2a18>
   13d58:	mov	r5, r0
   13d5c:	add	lr, pc, lr
   13d60:	mov	r3, ip
   13d64:	ldr	r2, [sp, #28]
   13d68:	add	r0, sp, #8
   13d6c:	ldr	r4, [lr, r4]
   13d70:	str	ip, [sp, #4]
   13d74:	ldr	ip, [r4]
   13d78:	str	ip, [sp, #12]
   13d7c:	bl	11290 <__vasprintf_chk@plt>
   13d80:	subs	r2, r0, #0
   13d84:	blt	13dc4 <__assert_fail@plt+0x2a08>
   13d88:	mov	r0, r5
   13d8c:	ldr	r1, [sp, #8]
   13d90:	bl	13c3c <__assert_fail@plt+0x2880>
   13d94:	mov	r5, r0
   13d98:	ldr	r0, [sp, #8]
   13d9c:	bl	110e0 <free@plt>
   13da0:	mov	r0, r5
   13da4:	ldr	r2, [sp, #12]
   13da8:	ldr	r3, [r4]
   13dac:	cmp	r2, r3
   13db0:	bne	13dcc <__assert_fail@plt+0x2a10>
   13db4:	add	sp, sp, #16
   13db8:	pop	{r4, r5, lr}
   13dbc:	add	sp, sp, #12
   13dc0:	bx	lr
   13dc4:	mov	r0, #0
   13dc8:	b	13da4 <__assert_fail@plt+0x29e8>
   13dcc:	bl	11134 <__stack_chk_fail@plt>
   13dd0:	muleq	r1, ip, r2
   13dd4:	andeq	r0, r0, ip, lsl r1
   13dd8:	ldr	ip, [pc, #372]	; 13f54 <__assert_fail@plt+0x2b98>
   13ddc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13de0:	mov	r6, r0
   13de4:	ldr	r0, [pc, #364]	; 13f58 <__assert_fail@plt+0x2b9c>
   13de8:	add	ip, pc, ip
   13dec:	ldr	r4, [r6]
   13df0:	mov	r9, r3
   13df4:	sub	sp, sp, #12
   13df8:	mov	r7, r1
   13dfc:	ldr	r5, [ip, r0]
   13e00:	mov	r8, r2
   13e04:	ldrsb	ip, [r4]
   13e08:	ldr	r3, [r5]
   13e0c:	cmp	ip, #0
   13e10:	moveq	r0, ip
   13e14:	str	r3, [sp, #4]
   13e18:	beq	13ec8 <__assert_fail@plt+0x2b0c>
   13e1c:	mov	r0, r4
   13e20:	mov	r1, r2
   13e24:	bl	113b0 <strspn@plt>
   13e28:	ldrb	sl, [r4, r0]
   13e2c:	add	r4, r4, r0
   13e30:	cmp	sl, #0
   13e34:	beq	13f44 <__assert_fail@plt+0x2b88>
   13e38:	cmp	r9, #0
   13e3c:	beq	13ee0 <__assert_fail@plt+0x2b24>
   13e40:	sxtb	r9, sl
   13e44:	ldr	r0, [pc, #272]	; 13f5c <__assert_fail@plt+0x2ba0>
   13e48:	mov	r1, r9
   13e4c:	add	r0, pc, r0
   13e50:	bl	1123c <strchr@plt>
   13e54:	cmp	r0, #0
   13e58:	beq	13f04 <__assert_fail@plt+0x2b48>
   13e5c:	add	fp, r4, #1
   13e60:	mov	r1, sp
   13e64:	mov	r3, #0
   13e68:	strb	sl, [sp]
   13e6c:	mov	r0, fp
   13e70:	strb	r3, [sp, #1]
   13e74:	bl	12710 <__assert_fail@plt+0x1354>
   13e78:	add	r3, r4, r0
   13e7c:	str	r0, [r7]
   13e80:	ldrb	r3, [r3, #1]
   13e84:	cmp	r3, #0
   13e88:	beq	13f44 <__assert_fail@plt+0x2b88>
   13e8c:	sxtb	r3, r3
   13e90:	cmp	r9, r3
   13e94:	bne	13f44 <__assert_fail@plt+0x2b88>
   13e98:	add	r0, r0, #2
   13e9c:	add	r7, r4, r0
   13ea0:	ldrb	r1, [r4, r0]
   13ea4:	cmp	r1, #0
   13ea8:	beq	13ec0 <__assert_fail@plt+0x2b04>
   13eac:	mov	r0, r8
   13eb0:	sxtb	r1, r1
   13eb4:	bl	1123c <strchr@plt>
   13eb8:	cmp	r0, #0
   13ebc:	beq	13f44 <__assert_fail@plt+0x2b88>
   13ec0:	mov	r0, fp
   13ec4:	str	r7, [r6]
   13ec8:	ldr	r2, [sp, #4]
   13ecc:	ldr	r3, [r5]
   13ed0:	cmp	r2, r3
   13ed4:	bne	13f50 <__assert_fail@plt+0x2b94>
   13ed8:	add	sp, sp, #12
   13edc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13ee0:	mov	r0, r4
   13ee4:	mov	r1, r8
   13ee8:	bl	110c8 <strcspn@plt>
   13eec:	mov	r3, r0
   13ef0:	mov	r0, r4
   13ef4:	add	r4, r4, r3
   13ef8:	str	r3, [r7]
   13efc:	str	r4, [r6]
   13f00:	b	13ec8 <__assert_fail@plt+0x2b0c>
   13f04:	mov	r1, r8
   13f08:	mov	r0, r4
   13f0c:	bl	12710 <__assert_fail@plt+0x1354>
   13f10:	str	r0, [r7]
   13f14:	add	r7, r4, r0
   13f18:	ldrb	r1, [r4, r0]
   13f1c:	cmp	r1, #0
   13f20:	beq	13f38 <__assert_fail@plt+0x2b7c>
   13f24:	mov	r0, r8
   13f28:	sxtb	r1, r1
   13f2c:	bl	1123c <strchr@plt>
   13f30:	cmp	r0, #0
   13f34:	beq	13efc <__assert_fail@plt+0x2b40>
   13f38:	str	r7, [r6]
   13f3c:	mov	r0, r4
   13f40:	b	13ec8 <__assert_fail@plt+0x2b0c>
   13f44:	str	r4, [r6]
   13f48:	mov	r0, #0
   13f4c:	b	13ec8 <__assert_fail@plt+0x2b0c>
   13f50:	bl	11134 <__stack_chk_fail@plt>
   13f54:	andeq	r4, r1, r0, lsl r2
   13f58:	andeq	r0, r0, ip, lsl r1
   13f5c:	andeq	r3, r0, r8, asr #25
   13f60:	push	{r4, lr}
   13f64:	mov	r4, r0
   13f68:	b	13f74 <__assert_fail@plt+0x2bb8>
   13f6c:	cmp	r0, #10
   13f70:	beq	13f8c <__assert_fail@plt+0x2bd0>
   13f74:	mov	r0, r4
   13f78:	bl	112cc <fgetc@plt>
   13f7c:	cmn	r0, #1
   13f80:	bne	13f6c <__assert_fail@plt+0x2bb0>
   13f84:	mov	r0, #1
   13f88:	pop	{r4, pc}
   13f8c:	mov	r0, #0
   13f90:	pop	{r4, pc}
   13f94:	push	{r3, r4, r5, r6, r7, lr}
   13f98:	mov	r4, r0
   13f9c:	ldr	r0, [r0, #40]	; 0x28
   13fa0:	mov	r7, r1
   13fa4:	mov	r5, r2
   13fa8:	cmp	r0, #0
   13fac:	beq	14018 <__assert_fail@plt+0x2c5c>
   13fb0:	bl	13f94 <__assert_fail@plt+0x2bd8>
   13fb4:	subs	r7, r0, #0
   13fb8:	beq	14018 <__assert_fail@plt+0x2c5c>
   13fbc:	ldr	r2, [r4, #40]	; 0x28
   13fc0:	add	r3, r4, #32
   13fc4:	ldr	r2, [r2, #28]
   13fc8:	cmp	r2, r3
   13fcc:	beq	14028 <__assert_fail@plt+0x2c6c>
   13fd0:	ldr	r3, [r4]
   13fd4:	ldr	r3, [r3, #36]	; 0x24
   13fd8:	ldr	r6, [r3, #4]
   13fdc:	mov	r0, r6
   13fe0:	bl	11230 <strlen@plt>
   13fe4:	mov	r4, r0
   13fe8:	ldr	r3, [r5]
   13fec:	cmp	r3, r4
   13ff0:	bcc	14020 <__assert_fail@plt+0x2c64>
   13ff4:	mov	r2, r4
   13ff8:	mov	r1, r6
   13ffc:	mov	r0, r7
   14000:	bl	11104 <memcpy@plt>
   14004:	ldr	r3, [r5]
   14008:	add	r0, r7, r4
   1400c:	rsb	r4, r4, r3
   14010:	str	r4, [r5]
   14014:	pop	{r3, r4, r5, r6, r7, pc}
   14018:	mov	r0, r7
   1401c:	pop	{r3, r4, r5, r6, r7, pc}
   14020:	mov	r0, #0
   14024:	pop	{r3, r4, r5, r6, r7, pc}
   14028:	ldr	r6, [pc, #8]	; 14038 <__assert_fail@plt+0x2c7c>
   1402c:	mov	r4, #2
   14030:	add	r6, pc, r6
   14034:	b	13fe8 <__assert_fail@plt+0x2c2c>
   14038:	andeq	r3, r0, r8, ror #21
   1403c:	push	{r4, r5, r6, r7, r8, lr}
   14040:	sub	sp, sp, #16
   14044:	ldr	ip, [r0, #4]
   14048:	mov	r4, r0
   1404c:	ldr	r7, [sp, #40]	; 0x28
   14050:	mov	r8, r2
   14054:	mov	r0, r3
   14058:	mov	r5, r3
   1405c:	ldr	r6, [ip, r1, lsl #2]
   14060:	mov	r1, #0
   14064:	mov	r2, r7
   14068:	bl	112a8 <memset@plt>
   1406c:	cmp	r6, #0
   14070:	beq	14178 <__assert_fail@plt+0x2dbc>
   14074:	ldr	r3, [r8]
   14078:	ands	r8, r3, #64	; 0x40
   1407c:	beq	14120 <__assert_fail@plt+0x2d64>
   14080:	ldr	r0, [r4, #40]	; 0x28
   14084:	cmp	r0, #0
   14088:	beq	140fc <__assert_fail@plt+0x2d40>
   1408c:	mov	r1, r5
   14090:	add	r2, sp, #40	; 0x28
   14094:	bl	13f94 <__assert_fail@plt+0x2bd8>
   14098:	subs	r8, r0, #0
   1409c:	beq	14178 <__assert_fail@plt+0x2dbc>
   140a0:	ldr	r3, [r4, #40]	; 0x28
   140a4:	ldr	r2, [r4]
   140a8:	cmp	r3, #0
   140ac:	ldr	ip, [r2, #36]	; 0x24
   140b0:	ldreq	r1, [sp, #40]	; 0x28
   140b4:	beq	14104 <__assert_fail@plt+0x2d48>
   140b8:	ldr	r3, [r3, #28]
   140bc:	add	r4, r4, #32
   140c0:	cmp	r3, r4
   140c4:	beq	14144 <__assert_fail@plt+0x2d88>
   140c8:	ldr	lr, [pc, #176]	; 14180 <__assert_fail@plt+0x2dc4>
   140cc:	mov	r2, #1
   140d0:	ldr	r1, [sp, #40]	; 0x28
   140d4:	mvn	r3, #0
   140d8:	add	lr, pc, lr
   140dc:	str	lr, [sp]
   140e0:	ldr	ip, [ip]
   140e4:	str	r6, [sp, #8]
   140e8:	str	ip, [sp, #4]
   140ec:	bl	113a4 <__snprintf_chk@plt>
   140f0:	mov	r0, r5
   140f4:	add	sp, sp, #16
   140f8:	pop	{r4, r5, r6, r7, r8, pc}
   140fc:	mov	r1, r7
   14100:	mov	r8, r5
   14104:	ldr	r2, [pc, #120]	; 14184 <__assert_fail@plt+0x2dc8>
   14108:	mov	r0, r8
   1410c:	mov	r3, r6
   14110:	add	r2, pc, r2
   14114:	bl	11278 <snprintf@plt>
   14118:	mov	r0, r5
   1411c:	b	140f4 <__assert_fail@plt+0x2d38>
   14120:	mov	r2, r7
   14124:	mov	r1, r6
   14128:	mov	r0, r5
   1412c:	add	r7, r5, r7
   14130:	bl	112b4 <strncpy@plt>
   14134:	mov	r0, r5
   14138:	strb	r8, [r7, #-1]
   1413c:	add	sp, sp, #16
   14140:	pop	{r4, r5, r6, r7, r8, pc}
   14144:	ldr	lr, [pc, #60]	; 14188 <__assert_fail@plt+0x2dcc>
   14148:	mov	r2, #1
   1414c:	ldr	r1, [sp, #40]	; 0x28
   14150:	mvn	r3, #0
   14154:	add	lr, pc, lr
   14158:	str	lr, [sp]
   1415c:	ldr	ip, [ip, #8]
   14160:	str	r6, [sp, #8]
   14164:	str	ip, [sp, #4]
   14168:	bl	113a4 <__snprintf_chk@plt>
   1416c:	mov	r0, r5
   14170:	add	sp, sp, #16
   14174:	pop	{r4, r5, r6, r7, r8, pc}
   14178:	mov	r0, #0
   1417c:	b	140f4 <__assert_fail@plt+0x2d38>
   14180:	andeq	r3, r0, r4, asr #20
   14184:	andeq	r3, r0, ip, lsl r3
   14188:	andeq	r3, r0, r8, asr #19
   1418c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14190:	mov	r5, r0
   14194:	ldr	fp, [r5, #28]!
   14198:	mov	sl, #0
   1419c:	sub	sp, sp, #12
   141a0:	mov	r4, r1
   141a4:	cmp	fp, r5
   141a8:	mov	r6, r2
   141ac:	mov	r7, r3
   141b0:	str	sl, [r1, #8]
   141b4:	beq	14278 <__assert_fail@plt+0x2ebc>
   141b8:	add	r8, r1, #32
   141bc:	mov	r9, sl
   141c0:	b	1421c <__assert_fail@plt+0x2e60>
   141c4:	bl	15618 <__assert_fail@plt+0x425c>
   141c8:	cmn	r0, #1
   141cc:	beq	1423c <__assert_fail@plt+0x2e80>
   141d0:	ldr	r3, [r4, #16]
   141d4:	cmp	r0, r3
   141d8:	strhi	r0, [r4, #16]
   141dc:	ldr	r3, [r4, #36]	; 0x24
   141e0:	cmp	r3, #0
   141e4:	beq	141f4 <__assert_fail@plt+0x2e38>
   141e8:	ldr	r3, [r4, #20]
   141ec:	cmp	r0, r3, lsl #1
   141f0:	bhi	14210 <__assert_fail@plt+0x2e54>
   141f4:	ldr	r3, [r4, #32]
   141f8:	tst	r3, #512	; 0x200
   141fc:	ldr	r3, [r4, #8]
   14200:	addne	sl, sl, r0
   14204:	addne	r9, r9, #1
   14208:	cmp	r3, r0
   1420c:	strcc	r0, [r4, #8]
   14210:	ldr	fp, [fp]
   14214:	cmp	fp, r5
   14218:	beq	14244 <__assert_fail@plt+0x2e88>
   1421c:	ldr	r1, [r4, #4]
   14220:	sub	r0, fp, #16
   14224:	str	r7, [sp]
   14228:	mov	r2, r8
   1422c:	mov	r3, r6
   14230:	bl	1403c <__assert_fail@plt+0x2c80>
   14234:	cmp	r0, #0
   14238:	bne	141c4 <__assert_fail@plt+0x2e08>
   1423c:	mov	r0, #0
   14240:	b	141dc <__assert_fail@plt+0x2e20>
   14244:	cmp	r9, #0
   14248:	beq	14278 <__assert_fail@plt+0x2ebc>
   1424c:	ldr	r3, [r4, #20]
   14250:	cmp	r3, #0
   14254:	bne	14278 <__assert_fail@plt+0x2ebc>
   14258:	mov	r0, sl
   1425c:	mov	r1, r9
   14260:	bl	1600c <__assert_fail@plt+0x4c50>
   14264:	ldr	r3, [r4, #16]
   14268:	cmp	r3, r0, lsl #1
   1426c:	str	r0, [r4, #20]
   14270:	movhi	r3, #1
   14274:	strhi	r3, [r4, #36]	; 0x24
   14278:	ldr	r0, [r4]
   1427c:	cmp	r0, #0
   14280:	ldreq	r2, [r4, #12]
   14284:	beq	14294 <__assert_fail@plt+0x2ed8>
   14288:	bl	15618 <__assert_fail@plt+0x425c>
   1428c:	mov	r2, r0
   14290:	str	r0, [r4, #12]
   14294:	ldr	r3, [r4, #8]
   14298:	cmp	r2, r3
   1429c:	bls	142b0 <__assert_fail@plt+0x2ef4>
   142a0:	ldr	r1, [r4, #32]
   142a4:	tst	r1, #256	; 0x100
   142a8:	streq	r2, [r4, #8]
   142ac:	beq	142dc <__assert_fail@plt+0x2f20>
   142b0:	vmov.f64	d6, #112	; 0x3f800000  1.0
   142b4:	vldr	d7, [r4, #24]
   142b8:	vcmpe.f64	d7, d6
   142bc:	vmrs	APSR_nzcv, fpscr
   142c0:	blt	142dc <__assert_fail@plt+0x2f20>
   142c4:	vcvt.u32.f64	s13, d7
   142c8:	vmov	r1, s13
   142cc:	cmp	r3, r1
   142d0:	bcs	142dc <__assert_fail@plt+0x2f20>
   142d4:	cmp	r2, r1
   142d8:	strcc	r1, [r4, #8]
   142dc:	add	sp, sp, #12
   142e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   142e4:	push	{r3, r4, r5, lr}
   142e8:	mov	r1, #40	; 0x28
   142ec:	mov	r5, r0
   142f0:	mov	r0, #1
   142f4:	bl	11098 <calloc@plt>
   142f8:	subs	r4, r0, #0
   142fc:	beq	1433c <__assert_fail@plt+0x2f80>
   14300:	tst	r5, #4
   14304:	add	r2, r4, #28
   14308:	add	r3, r4, #20
   1430c:	str	r5, [r4, #12]
   14310:	str	r2, [r4, #28]
   14314:	str	r2, [r4, #32]
   14318:	str	r3, [r4, #20]
   1431c:	str	r3, [r4, #24]
   14320:	beq	14344 <__assert_fail@plt+0x2f88>
   14324:	ldr	r3, [pc, #68]	; 14370 <__assert_fail@plt+0x2fb4>
   14328:	add	r3, pc, r3
   1432c:	add	r3, r3, #12
   14330:	str	r3, [r4, #36]	; 0x24
   14334:	mov	r3, #1
   14338:	str	r3, [r4, #16]
   1433c:	mov	r0, r4
   14340:	pop	{r3, r4, r5, pc}
   14344:	mov	r0, #14
   14348:	bl	1132c <nl_langinfo@plt>
   1434c:	ldr	r1, [pc, #32]	; 14374 <__assert_fail@plt+0x2fb8>
   14350:	add	r1, pc, r1
   14354:	bl	110b0 <strcmp@plt>
   14358:	cmp	r0, #0
   1435c:	bne	14324 <__assert_fail@plt+0x2f68>
   14360:	ldr	r3, [pc, #16]	; 14378 <__assert_fail@plt+0x2fbc>
   14364:	add	r3, pc, r3
   14368:	str	r3, [r4, #36]	; 0x24
   1436c:	b	14334 <__assert_fail@plt+0x2f78>
   14370:	andeq	r3, r1, r0, asr #23
   14374:	ldrdeq	r3, [r0], -r4
   14378:	andeq	r3, r1, r4, lsl #23
   1437c:	push	{r4, r5, r6, lr}
   14380:	subs	r5, r0, #0
   14384:	popeq	{r4, r5, r6, pc}
   14388:	ldr	r4, [r5, #28]
   1438c:	add	r6, r5, #28
   14390:	cmp	r6, r4
   14394:	popeq	{r4, r5, r6, pc}
   14398:	ldm	r4, {r2, r3}
   1439c:	ldr	r0, [r4, #-12]
   143a0:	str	r3, [r2, #4]
   143a4:	str	r2, [r3]
   143a8:	bl	110e0 <free@plt>
   143ac:	sub	r0, r4, #16
   143b0:	bl	110e0 <free@plt>
   143b4:	ldr	r4, [r5, #28]
   143b8:	cmp	r4, r6
   143bc:	bne	14398 <__assert_fail@plt+0x2fdc>
   143c0:	pop	{r4, r5, r6, pc}
   143c4:	push	{r3, r4, r5, lr}
   143c8:	subs	r4, r0, #0
   143cc:	popeq	{r3, r4, r5, pc}
   143d0:	bl	1437c <__assert_fail@plt+0x2fc0>
   143d4:	ldr	r3, [r4, #20]
   143d8:	add	r5, r4, #20
   143dc:	cmp	r5, r3
   143e0:	beq	14408 <__assert_fail@plt+0x304c>
   143e4:	mov	r0, r3
   143e8:	ldr	r3, [r3, #4]
   143ec:	ldr	r2, [r0], #-40	; 0xffffffd8
   143f0:	str	r3, [r2, #4]
   143f4:	str	r2, [r3]
   143f8:	bl	110e0 <free@plt>
   143fc:	ldr	r3, [r4, #20]
   14400:	cmp	r3, r5
   14404:	bne	143e4 <__assert_fail@plt+0x3028>
   14408:	mov	r0, r4
   1440c:	pop	{r3, r4, r5, lr}
   14410:	b	110e0 <free@plt>
   14414:	push	{r4, r5, r6, lr}
   14418:	vpush	{d8}
   1441c:	subs	r4, r0, #0
   14420:	mov	r6, r1
   14424:	vmov.f64	d8, d0
   14428:	mov	r5, r2
   1442c:	beq	1449c <__assert_fail@plt+0x30e0>
   14430:	mov	r0, #1
   14434:	mov	r1, #48	; 0x30
   14438:	bl	11098 <calloc@plt>
   1443c:	subs	r3, r0, #0
   14440:	beq	1449c <__assert_fail@plt+0x30e0>
   14444:	ldr	r2, [r4]
   14448:	tst	r5, #64	; 0x40
   1444c:	str	r6, [r3]
   14450:	vstr	d8, [r3, #24]
   14454:	add	r1, r2, #1
   14458:	str	r5, [r3, #32]
   1445c:	str	r1, [r4]
   14460:	mov	r0, r3
   14464:	str	r2, [r3, #4]
   14468:	add	r4, r4, #20
   1446c:	ldrne	r2, [r4, #-8]
   14470:	orrne	r2, r2, #64	; 0x40
   14474:	strne	r2, [r4, #-8]
   14478:	add	r2, r3, #40	; 0x28
   1447c:	str	r2, [r3, #44]	; 0x2c
   14480:	ldr	r1, [r4, #4]
   14484:	str	r2, [r4, #4]
   14488:	str	r4, [r3, #40]	; 0x28
   1448c:	str	r1, [r3, #44]	; 0x2c
   14490:	str	r2, [r1]
   14494:	vpop	{d8}
   14498:	pop	{r4, r5, r6, pc}
   1449c:	mov	r0, #0
   144a0:	b	14494 <__assert_fail@plt+0x30d8>
   144a4:	push	{r4, r5, r6, r7, r8, lr}
   144a8:	subs	r5, r0, #0
   144ac:	mov	r6, r1
   144b0:	beq	1455c <__assert_fail@plt+0x31a0>
   144b4:	ldr	r7, [r5]
   144b8:	cmp	r7, #0
   144bc:	beq	1455c <__assert_fail@plt+0x31a0>
   144c0:	mov	r0, #1
   144c4:	mov	r1, #44	; 0x2c
   144c8:	bl	11098 <calloc@plt>
   144cc:	cmp	r0, #0
   144d0:	mov	r4, r0
   144d4:	mov	r8, r0
   144d8:	beq	1455c <__assert_fail@plt+0x31a0>
   144dc:	mov	r0, r7
   144e0:	mov	r1, #4
   144e4:	bl	11098 <calloc@plt>
   144e8:	cmp	r0, #0
   144ec:	str	r0, [r4, #4]
   144f0:	beq	14560 <__assert_fail@plt+0x31a4>
   144f4:	add	r2, r4, #16
   144f8:	add	r3, r4, #32
   144fc:	str	r2, [r4, #20]
   14500:	add	r0, r4, #24
   14504:	str	r3, [r4, #36]	; 0x24
   14508:	cmp	r6, #0
   1450c:	str	r0, [r4, #28]
   14510:	add	ip, r5, #28
   14514:	ldr	r1, [r5, #32]
   14518:	str	r5, [r4]
   1451c:	str	r6, [r4, #40]	; 0x28
   14520:	str	r3, [r4, #32]
   14524:	str	r0, [r4, #24]
   14528:	str	r2, [r5, #32]
   1452c:	str	r1, [r4, #20]
   14530:	str	ip, [r4, #16]
   14534:	str	r2, [r1]
   14538:	beq	14570 <__assert_fail@plt+0x31b4>
   1453c:	ldr	r2, [r6, #28]
   14540:	add	r1, r6, #24
   14544:	str	r3, [r6, #28]
   14548:	mov	r0, r4
   1454c:	str	r1, [r4, #32]
   14550:	str	r2, [r4, #36]	; 0x24
   14554:	str	r3, [r2]
   14558:	pop	{r4, r5, r6, r7, r8, pc}
   1455c:	mov	r8, #0
   14560:	mov	r0, r8
   14564:	bl	110e0 <free@plt>
   14568:	mov	r0, #0
   1456c:	pop	{r4, r5, r6, r7, r8, pc}
   14570:	mov	r0, r4
   14574:	pop	{r4, r5, r6, r7, r8, pc}
   14578:	ldr	r3, [r0, #20]!
   1457c:	cmp	r3, r0
   14580:	bne	14594 <__assert_fail@plt+0x31d8>
   14584:	b	145a8 <__assert_fail@plt+0x31ec>
   14588:	ldr	r3, [r3]
   1458c:	cmp	r3, r0
   14590:	beq	145a8 <__assert_fail@plt+0x31ec>
   14594:	ldr	r2, [r3, #-36]	; 0xffffffdc
   14598:	cmp	r2, r1
   1459c:	bne	14588 <__assert_fail@plt+0x31cc>
   145a0:	sub	r0, r3, #40	; 0x28
   145a4:	bx	lr
   145a8:	mov	r0, #0
   145ac:	bx	lr
   145b0:	push	{r3, r4, r5, r6, r7, lr}
   145b4:	subs	r4, r0, #0
   145b8:	mov	r5, r2
   145bc:	beq	14628 <__assert_fail@plt+0x326c>
   145c0:	ldr	r0, [r4]
   145c4:	bl	14578 <__assert_fail@plt+0x31bc>
   145c8:	cmp	r0, #0
   145cc:	beq	14628 <__assert_fail@plt+0x326c>
   145d0:	ldr	r7, [r0, #4]
   145d4:	ldr	r6, [r4, #4]
   145d8:	ldr	r0, [r6, r7, lsl #2]
   145dc:	cmp	r0, #0
   145e0:	beq	145fc <__assert_fail@plt+0x3240>
   145e4:	bl	11230 <strlen@plt>
   145e8:	ldr	r3, [r4, #12]
   145ec:	cmp	r0, r3
   145f0:	rsbcc	r0, r0, r3
   145f4:	movcs	r0, #0
   145f8:	str	r0, [r4, #12]
   145fc:	cmp	r5, #0
   14600:	str	r5, [r6, r7, lsl #2]
   14604:	beq	14620 <__assert_fail@plt+0x3264>
   14608:	mov	r0, r5
   1460c:	mov	r5, #0
   14610:	bl	11230 <strlen@plt>
   14614:	ldr	r3, [r4, #12]
   14618:	add	r0, r3, r0
   1461c:	str	r0, [r4, #12]
   14620:	mov	r0, r5
   14624:	pop	{r3, r4, r5, r6, r7, pc}
   14628:	mvn	r5, #0
   1462c:	b	14620 <__assert_fail@plt+0x3264>
   14630:	cmp	r0, #0
   14634:	strne	r1, [r0, #8]
   14638:	movne	r0, #0
   1463c:	mvneq	r0, #0
   14640:	bx	lr
   14644:	push	{r4, r5, r6, r7, r8, lr}
   14648:	mov	r6, r0
   1464c:	mov	r0, #34	; 0x22
   14650:	mov	r7, r1
   14654:	bl	11338 <fputc@plt>
   14658:	cmp	r6, #0
   1465c:	beq	146e8 <__assert_fail@plt+0x332c>
   14660:	ldrb	r4, [r6]
   14664:	cmp	r4, #0
   14668:	beq	146e8 <__assert_fail@plt+0x332c>
   1466c:	ldr	r8, [pc, #132]	; 146f8 <__assert_fail@plt+0x333c>
   14670:	add	r8, pc, r8
   14674:	b	1469c <__assert_fail@plt+0x32e0>
   14678:	mov	r1, #1
   1467c:	mov	r0, r7
   14680:	mov	r2, r8
   14684:	bl	112f0 <__fprintf_chk@plt>
   14688:	cmn	r6, #1
   1468c:	beq	146e8 <__assert_fail@plt+0x332c>
   14690:	ldrb	r4, [r6, #1]!
   14694:	cmp	r4, #0
   14698:	beq	146e8 <__assert_fail@plt+0x332c>
   1469c:	sxtb	r5, r4
   146a0:	cmp	r5, #34	; 0x22
   146a4:	cmpne	r5, #92	; 0x5c
   146a8:	uxtbeq	r3, r4
   146ac:	beq	14678 <__assert_fail@plt+0x32bc>
   146b0:	bl	11200 <__ctype_b_loc@plt>
   146b4:	uxtb	r3, r4
   146b8:	movw	ip, #16386	; 0x4002
   146bc:	lsl	lr, r3, #1
   146c0:	ldr	r2, [r0]
   146c4:	ldrh	r2, [r2, lr]
   146c8:	and	ip, r2, ip
   146cc:	cmp	ip, #16384	; 0x4000
   146d0:	bne	14678 <__assert_fail@plt+0x32bc>
   146d4:	mov	r0, r5
   146d8:	mov	r1, r7
   146dc:	bl	11338 <fputc@plt>
   146e0:	cmn	r6, #1
   146e4:	bne	14690 <__assert_fail@plt+0x32d4>
   146e8:	mov	r1, r7
   146ec:	mov	r0, #34	; 0x22
   146f0:	pop	{r4, r5, r6, r7, r8, lr}
   146f4:	b	11338 <fputc@plt>
   146f8:			; <UNDEFINED> instruction: 0x000034bc
   146fc:	cmp	r0, #0
   14700:	push	{r4, r5, r6, r7, r8, lr}
   14704:	mov	r6, r1
   14708:	popeq	{r4, r5, r6, r7, r8, pc}
   1470c:	ldrb	r4, [r0]
   14710:	cmp	r4, #0
   14714:	popeq	{r4, r5, r6, r7, r8, pc}
   14718:	mov	r5, r0
   1471c:	bl	11200 <__ctype_b_loc@plt>
   14720:	ldr	r7, [pc, #124]	; 147a4 <__assert_fail@plt+0x33e8>
   14724:	add	r7, pc, r7
   14728:	mov	r8, r0
   1472c:	b	14748 <__assert_fail@plt+0x338c>
   14730:	bl	112f0 <__fprintf_chk@plt>
   14734:	cmn	r5, #1
   14738:	popeq	{r4, r5, r6, r7, r8, pc}
   1473c:	ldrb	r4, [r5, #1]!
   14740:	cmp	r4, #0
   14744:	beq	147a0 <__assert_fail@plt+0x33e4>
   14748:	uxtb	r3, r4
   1474c:	ldr	lr, [r8]
   14750:	mov	r1, #1
   14754:	mov	r0, r6
   14758:	lsl	ip, r3, r1
   1475c:	mov	r2, r7
   14760:	sxtb	r4, r4
   14764:	ldrh	lr, [lr, ip]
   14768:	movw	ip, #16386	; 0x4002
   1476c:	tst	lr, #1
   14770:	and	ip, lr, ip
   14774:	bne	14730 <__assert_fail@plt+0x3374>
   14778:	cmp	r4, #92	; 0x5c
   1477c:	beq	14730 <__assert_fail@plt+0x3374>
   14780:	cmp	ip, #16384	; 0x4000
   14784:	bne	14730 <__assert_fail@plt+0x3374>
   14788:	mov	r0, r4
   1478c:	mov	r1, r6
   14790:	bl	11338 <fputc@plt>
   14794:	cmn	r5, #1
   14798:	bne	1473c <__assert_fail@plt+0x3380>
   1479c:	pop	{r4, r5, r6, r7, r8, pc}
   147a0:	pop	{r4, r5, r6, r7, r8, pc}
   147a4:	andeq	r3, r0, r8, lsl #8
   147a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147ac:	subs	r4, r2, #0
   147b0:	ldr	r5, [pc, #728]	; 14a90 <__assert_fail@plt+0x36d4>
   147b4:	sub	sp, sp, #36	; 0x24
   147b8:	ldr	r3, [pc, #724]	; 14a94 <__assert_fail@plt+0x36d8>
   147bc:	mov	r2, #0
   147c0:	add	r5, pc, r5
   147c4:	mov	r7, r0
   147c8:	mov	r8, r1
   147cc:	ldr	r9, [r5, r3]
   147d0:	str	r2, [sp, #20]
   147d4:	ldr	r3, [r9]
   147d8:	str	r3, [sp, #28]
   147dc:	beq	14a74 <__assert_fail@plt+0x36b8>
   147e0:	ldr	r3, [r7, #12]
   147e4:	tst	r3, #2
   147e8:	bne	149a0 <__assert_fail@plt+0x35e4>
   147ec:	tst	r3, #16
   147f0:	beq	14850 <__assert_fail@plt+0x3494>
   147f4:	ldr	r0, [pc, #668]	; 14a98 <__assert_fail@plt+0x36dc>
   147f8:	mov	r1, #1
   147fc:	ldr	r2, [pc, #664]	; 14a9c <__assert_fail@plt+0x36e0>
   14800:	ldr	r3, [r8], #40	; 0x28
   14804:	ldr	r5, [r5, r0]
   14808:	add	r2, pc, r2
   1480c:	ldr	r0, [r5]
   14810:	bl	112f0 <__fprintf_chk@plt>
   14814:	mov	r0, r4
   14818:	ldr	r1, [r5]
   1481c:	bl	14644 <__assert_fail@plt+0x3288>
   14820:	ldr	r3, [r7, #24]
   14824:	cmp	r3, r8
   14828:	beq	14838 <__assert_fail@plt+0x347c>
   1482c:	ldr	r1, [r5]
   14830:	mov	r0, #32
   14834:	bl	11338 <fputc@plt>
   14838:	ldr	r2, [sp, #28]
   1483c:	ldr	r3, [r9]
   14840:	cmp	r2, r3
   14844:	bne	14a8c <__assert_fail@plt+0x36d0>
   14848:	add	sp, sp, #36	; 0x24
   1484c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14850:	mov	r0, r4
   14854:	add	r1, sp, #20
   14858:	bl	15b1c <__assert_fail@plt+0x4760>
   1485c:	subs	fp, r0, #0
   14860:	movne	r4, fp
   14864:	beq	14a80 <__assert_fail@plt+0x36c4>
   14868:	ldr	r3, [sp, #20]
   1486c:	add	sl, r8, #40	; 0x28
   14870:	ldr	r1, [r7, #24]
   14874:	sub	r2, r3, #1
   14878:	cmn	r2, #3
   1487c:	movhi	r4, #0
   14880:	movls	r2, r3
   14884:	ldr	r3, [r8, #8]
   14888:	movhi	r2, r4
   1488c:	strhi	r4, [sp, #20]
   14890:	cmp	sl, r1
   14894:	str	r3, [sp, #24]
   14898:	beq	148e0 <__assert_fail@plt+0x3524>
   1489c:	cmp	r3, r2
   148a0:	bcs	148f0 <__assert_fail@plt+0x3534>
   148a4:	ldr	r1, [r8, #32]
   148a8:	tst	r1, #32
   148ac:	beq	148f0 <__assert_fail@plt+0x3534>
   148b0:	cmp	r4, #0
   148b4:	beq	148d4 <__assert_fail@plt+0x3518>
   148b8:	mov	r0, r4
   148bc:	add	r1, sp, #24
   148c0:	bl	15bd0 <__assert_fail@plt+0x4814>
   148c4:	cmn	r0, #1
   148c8:	str	r0, [sp, #20]
   148cc:	bne	148fc <__assert_fail@plt+0x3540>
   148d0:	ldr	r3, [sp, #24]
   148d4:	mov	r4, #0
   148d8:	str	r4, [sp, #20]
   148dc:	b	14930 <__assert_fail@plt+0x3574>
   148e0:	cmp	r3, r2
   148e4:	strhi	r2, [sp, #24]
   148e8:	movhi	r3, r2
   148ec:	bls	1489c <__assert_fail@plt+0x34e0>
   148f0:	cmp	r4, #0
   148f4:	moveq	r4, r2
   148f8:	beq	14930 <__assert_fail@plt+0x3574>
   148fc:	ldr	r3, [r7, #12]
   14900:	tst	r3, #2
   14904:	bne	14914 <__assert_fail@plt+0x3558>
   14908:	ldr	r3, [r8, #32]
   1490c:	tst	r3, #128	; 0x80
   14910:	bne	14a2c <__assert_fail@plt+0x3670>
   14914:	ldr	r3, [pc, #380]	; 14a98 <__assert_fail@plt+0x36dc>
   14918:	mov	r0, r4
   1491c:	ldr	r6, [r5, r3]
   14920:	ldr	r1, [r6]
   14924:	bl	11380 <fputs@plt>
   14928:	ldr	r3, [sp, #24]
   1492c:	ldr	r4, [sp, #20]
   14930:	cmp	r4, r3
   14934:	bcs	1495c <__assert_fail@plt+0x35a0>
   14938:	ldr	r3, [pc, #344]	; 14a98 <__assert_fail@plt+0x36dc>
   1493c:	ldr	r6, [r5, r3]
   14940:	mov	r0, #32
   14944:	ldr	r1, [r6]
   14948:	bl	11338 <fputc@plt>
   1494c:	ldr	r3, [sp, #24]
   14950:	add	r4, r4, #1
   14954:	cmp	r3, r4
   14958:	bhi	14940 <__assert_fail@plt+0x3584>
   1495c:	ldr	r2, [r7, #24]
   14960:	cmp	sl, r2
   14964:	beq	14994 <__assert_fail@plt+0x35d8>
   14968:	ldr	r2, [sp, #20]
   1496c:	cmp	r2, r3
   14970:	ldr	r3, [pc, #288]	; 14a98 <__assert_fail@plt+0x36dc>
   14974:	bls	14984 <__assert_fail@plt+0x35c8>
   14978:	ldr	r4, [r8, #32]
   1497c:	ands	r4, r4, #32
   14980:	beq	149d4 <__assert_fail@plt+0x3618>
   14984:	ldr	r3, [r5, r3]
   14988:	mov	r0, #32
   1498c:	ldr	r1, [r3]
   14990:	bl	11338 <fputc@plt>
   14994:	mov	r0, fp
   14998:	bl	110e0 <free@plt>
   1499c:	b	14838 <__assert_fail@plt+0x347c>
   149a0:	ldr	r3, [pc, #240]	; 14a98 <__assert_fail@plt+0x36dc>
   149a4:	mov	r0, r4
   149a8:	add	r8, r8, #40	; 0x28
   149ac:	ldr	r4, [r5, r3]
   149b0:	ldr	r1, [r4]
   149b4:	bl	146fc <__assert_fail@plt+0x3340>
   149b8:	ldr	r3, [r7, #24]
   149bc:	cmp	r3, r8
   149c0:	beq	14838 <__assert_fail@plt+0x347c>
   149c4:	ldr	r1, [r4]
   149c8:	mov	r0, #32
   149cc:	bl	11338 <fputc@plt>
   149d0:	b	14838 <__assert_fail@plt+0x347c>
   149d4:	ldr	r3, [r5, r3]
   149d8:	mov	r0, #10
   149dc:	ldr	sl, [pc, #188]	; 14aa0 <__assert_fail@plt+0x36e4>
   149e0:	ldr	r6, [pc, #188]	; 14aa4 <__assert_fail@plt+0x36e8>
   149e4:	ldr	r1, [r3]
   149e8:	add	sl, pc, sl
   149ec:	add	r6, pc, r6
   149f0:	bl	11338 <fputc@plt>
   149f4:	mov	r1, r4
   149f8:	mov	r0, r7
   149fc:	bl	14578 <__assert_fail@plt+0x31bc>
   14a00:	mov	r3, r6
   14a04:	mov	r1, sl
   14a08:	add	r4, r4, #1
   14a0c:	ldr	r2, [r0, #8]
   14a10:	mov	r0, #1
   14a14:	rsb	r2, r2, #0
   14a18:	bl	112d8 <__printf_chk@plt>
   14a1c:	ldr	r3, [r8, #4]
   14a20:	cmp	r3, r4
   14a24:	bcs	149f4 <__assert_fail@plt+0x3638>
   14a28:	b	14994 <__assert_fail@plt+0x35d8>
   14a2c:	ldr	r3, [pc, #100]	; 14a98 <__assert_fail@plt+0x36dc>
   14a30:	mov	r1, #1
   14a34:	ldr	ip, [r8, #8]
   14a38:	ldr	r2, [pc, #104]	; 14aa8 <__assert_fail@plt+0x36ec>
   14a3c:	ldr	r6, [r5, r3]
   14a40:	add	r2, pc, r2
   14a44:	mov	r3, ip
   14a48:	ldr	r0, [r6]
   14a4c:	str	r4, [sp]
   14a50:	str	ip, [sp, #12]
   14a54:	bl	112f0 <__fprintf_chk@plt>
   14a58:	ldr	r4, [sp, #20]
   14a5c:	ldr	ip, [sp, #12]
   14a60:	ldr	r3, [sp, #24]
   14a64:	cmp	ip, r4
   14a68:	strhi	ip, [sp, #20]
   14a6c:	movhi	r4, ip
   14a70:	b	14930 <__assert_fail@plt+0x3574>
   14a74:	ldr	r4, [pc, #48]	; 14aac <__assert_fail@plt+0x36f0>
   14a78:	add	r4, pc, r4
   14a7c:	b	147e0 <__assert_fail@plt+0x3424>
   14a80:	ldr	r4, [pc, #40]	; 14ab0 <__assert_fail@plt+0x36f4>
   14a84:	add	r4, pc, r4
   14a88:	b	14868 <__assert_fail@plt+0x34ac>
   14a8c:	bl	11134 <__stack_chk_fail@plt>
   14a90:	andeq	r3, r1, r8, lsr r8
   14a94:	andeq	r0, r0, ip, lsl r1
   14a98:	andeq	r0, r0, r8, lsr #2
   14a9c:	andeq	r3, r0, ip, lsr #6
   14aa0:	andeq	r3, r0, r4, asr r1
   14aa4:	andeq	r3, r0, r8, asr r1
   14aa8:	strdeq	r3, [r0], -r8
   14aac:	andeq	r2, r0, r4, ror r3
   14ab0:	andeq	r2, r0, r8, ror #6
   14ab4:	ldr	r3, [r0, #16]
   14ab8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14abc:	cmp	r3, #0
   14ac0:	sub	sp, sp, #12
   14ac4:	mov	r8, r2
   14ac8:	ldr	r2, [pc, #160]	; 14b70 <__assert_fail@plt+0x37b4>
   14acc:	mov	r6, r0
   14ad0:	mov	r5, r1
   14ad4:	add	r2, pc, r2
   14ad8:	str	r2, [sp, #4]
   14adc:	beq	14b68 <__assert_fail@plt+0x37ac>
   14ae0:	ldr	sl, [r0, #12]
   14ae4:	ands	sl, sl, #24
   14ae8:	bne	14b68 <__assert_fail@plt+0x37ac>
   14aec:	ldr	r2, [r0, #28]
   14af0:	add	r3, r0, #28
   14af4:	cmp	r2, r3
   14af8:	beq	14b68 <__assert_fail@plt+0x37ac>
   14afc:	mov	r7, r0
   14b00:	ldr	r4, [r7, #20]!
   14b04:	cmp	r4, r7
   14b08:	subne	r9, r8, #1
   14b0c:	addne	r9, r1, r9
   14b10:	beq	14b48 <__assert_fail@plt+0x378c>
   14b14:	mov	fp, r4
   14b18:	mov	r2, r8
   14b1c:	ldr	r1, [fp, #-40]!	; 0xffffffd8
   14b20:	mov	r0, r5
   14b24:	bl	112b4 <strncpy@plt>
   14b28:	strb	sl, [r9]
   14b2c:	mov	r0, r6
   14b30:	mov	r2, r5
   14b34:	mov	r1, fp
   14b38:	bl	147a8 <__assert_fail@plt+0x33ec>
   14b3c:	ldr	r4, [r4]
   14b40:	cmp	r7, r4
   14b44:	bne	14b14 <__assert_fail@plt+0x3758>
   14b48:	ldr	r2, [sp, #4]
   14b4c:	mov	r0, #10
   14b50:	ldr	r3, [pc, #28]	; 14b74 <__assert_fail@plt+0x37b8>
   14b54:	ldr	r3, [r2, r3]
   14b58:	ldr	r1, [r3]
   14b5c:	add	sp, sp, #12
   14b60:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b64:	b	11338 <fputc@plt>
   14b68:	add	sp, sp, #12
   14b6c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14b70:	andeq	r3, r1, r4, lsr #10
   14b74:	andeq	r0, r0, r8, lsr #2
   14b78:	push	{r4, r5, r6, r7, r8, r9, lr}
   14b7c:	mov	r6, r0
   14b80:	ldr	r5, [r0]
   14b84:	sub	sp, sp, #12
   14b88:	ldr	r9, [pc, #112]	; 14c00 <__assert_fail@plt+0x3844>
   14b8c:	mov	r8, r1
   14b90:	mov	r7, r2
   14b94:	mov	r3, r5
   14b98:	add	r9, pc, r9
   14b9c:	ldr	r4, [r3, #20]!
   14ba0:	cmp	r4, r3
   14ba4:	beq	14be4 <__assert_fail@plt+0x3828>
   14ba8:	ldr	r1, [r4, #-36]	; 0xffffffdc
   14bac:	sub	r2, r4, #8
   14bb0:	mov	r3, r8
   14bb4:	mov	r0, r6
   14bb8:	str	r7, [sp]
   14bbc:	bl	1403c <__assert_fail@plt+0x2c80>
   14bc0:	sub	r1, r4, #40	; 0x28
   14bc4:	mov	r2, r0
   14bc8:	mov	r0, r5
   14bcc:	bl	147a8 <__assert_fail@plt+0x33ec>
   14bd0:	ldr	r5, [r6]
   14bd4:	ldr	r4, [r4]
   14bd8:	add	r0, r5, #20
   14bdc:	cmp	r4, r0
   14be0:	bne	14ba8 <__assert_fail@plt+0x37ec>
   14be4:	ldr	r3, [pc, #24]	; 14c04 <__assert_fail@plt+0x3848>
   14be8:	mov	r0, #10
   14bec:	ldr	r3, [r9, r3]
   14bf0:	ldr	r1, [r3]
   14bf4:	add	sp, sp, #12
   14bf8:	pop	{r4, r5, r6, r7, r8, r9, lr}
   14bfc:	b	11338 <fputc@plt>
   14c00:	andeq	r3, r1, r0, ror #8
   14c04:	andeq	r0, r0, r8, lsr #2
   14c08:	push	{r3, r4, r5, r6, r7, lr}
   14c0c:	mov	r5, r0
   14c10:	mov	r7, r1
   14c14:	mov	r6, r2
   14c18:	bl	14b78 <__assert_fail@plt+0x37bc>
   14c1c:	ldr	r4, [r5, #24]
   14c20:	add	r5, r5, #24
   14c24:	cmp	r5, r4
   14c28:	popeq	{r3, r4, r5, r6, r7, pc}
   14c2c:	sub	r0, r4, #32
   14c30:	mov	r1, r7
   14c34:	mov	r2, r6
   14c38:	bl	14c08 <__assert_fail@plt+0x384c>
   14c3c:	ldr	r4, [r4]
   14c40:	cmp	r5, r4
   14c44:	bne	14c2c <__assert_fail@plt+0x3870>
   14c48:	pop	{r3, r4, r5, r6, r7, pc}
   14c4c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14c50:	subs	r6, r0, #0
   14c54:	sub	sp, sp, #12
   14c58:	beq	15040 <__assert_fail@plt+0x3c84>
   14c5c:	ldr	r3, [r6, #16]
   14c60:	cmp	r3, #0
   14c64:	bne	14d5c <__assert_fail@plt+0x39a0>
   14c68:	ldr	r2, [r6, #4]
   14c6c:	mov	r4, r6
   14c70:	ldr	r3, [r4, #28]!
   14c74:	cmp	r3, r4
   14c78:	beq	14c90 <__assert_fail@plt+0x38d4>
   14c7c:	ldmda	r3, {r1, r3}
   14c80:	cmp	r2, r1
   14c84:	movcc	r2, r1
   14c88:	cmp	r3, r4
   14c8c:	bne	14c7c <__assert_fail@plt+0x38c0>
   14c90:	add	r8, r2, #1
   14c94:	mov	r0, r8
   14c98:	bl	111c4 <malloc@plt>
   14c9c:	subs	r7, r0, #0
   14ca0:	beq	15040 <__assert_fail@plt+0x3c84>
   14ca4:	ldr	r3, [r6, #16]
   14ca8:	cmp	r3, #0
   14cac:	beq	14cbc <__assert_fail@plt+0x3900>
   14cb0:	ldr	fp, [r6, #12]
   14cb4:	ands	fp, fp, #18
   14cb8:	beq	14d98 <__assert_fail@plt+0x39dc>
   14cbc:	ldr	r3, [r6, #12]
   14cc0:	mov	r0, r6
   14cc4:	mov	r1, r7
   14cc8:	mov	r2, r8
   14ccc:	tst	r3, #64	; 0x40
   14cd0:	beq	14d18 <__assert_fail@plt+0x395c>
   14cd4:	bl	14ab4 <__assert_fail@plt+0x36f8>
   14cd8:	ldr	r5, [r6, #28]
   14cdc:	cmp	r5, r4
   14ce0:	beq	14cfc <__assert_fail@plt+0x3940>
   14ce4:	ldr	r3, [r5, #24]
   14ce8:	cmp	r3, #0
   14cec:	beq	14d48 <__assert_fail@plt+0x398c>
   14cf0:	ldr	r5, [r5]
   14cf4:	cmp	r5, r4
   14cf8:	bne	14ce4 <__assert_fail@plt+0x3928>
   14cfc:	mov	r0, r7
   14d00:	bl	110e0 <free@plt>
   14d04:	mov	r3, #0
   14d08:	mov	r0, r3
   14d0c:	str	r3, [r6, #16]
   14d10:	add	sp, sp, #12
   14d14:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14d18:	bl	14ab4 <__assert_fail@plt+0x36f8>
   14d1c:	ldr	r5, [r6, #28]
   14d20:	cmp	r5, r4
   14d24:	beq	14cfc <__assert_fail@plt+0x3940>
   14d28:	sub	r0, r5, #16
   14d2c:	mov	r1, r7
   14d30:	mov	r2, r8
   14d34:	bl	14b78 <__assert_fail@plt+0x37bc>
   14d38:	ldr	r5, [r5]
   14d3c:	cmp	r5, r4
   14d40:	bne	14d28 <__assert_fail@plt+0x396c>
   14d44:	b	14cfc <__assert_fail@plt+0x3940>
   14d48:	sub	r0, r5, #16
   14d4c:	mov	r1, r7
   14d50:	mov	r2, r8
   14d54:	bl	14c08 <__assert_fail@plt+0x384c>
   14d58:	b	14cf0 <__assert_fail@plt+0x3934>
   14d5c:	mov	r0, #1
   14d60:	bl	11374 <isatty@plt>
   14d64:	ldr	r2, [r6, #4]
   14d68:	cmp	r0, #0
   14d6c:	str	r0, [r6, #8]
   14d70:	beq	14d88 <__assert_fail@plt+0x39cc>
   14d74:	cmp	r2, #0
   14d78:	bne	14c6c <__assert_fail@plt+0x38b0>
   14d7c:	bl	15208 <__assert_fail@plt+0x3e4c>
   14d80:	mov	r2, r0
   14d84:	str	r0, [r6, #4]
   14d88:	cmp	r2, #0
   14d8c:	moveq	r2, #80	; 0x50
   14d90:	streq	r2, [r6, #4]
   14d94:	b	14c6c <__assert_fail@plt+0x38b0>
   14d98:	mov	r9, r6
   14d9c:	mov	sl, fp
   14da0:	ldr	r5, [r9, #20]!
   14da4:	cmp	r5, r9
   14da8:	beq	14de8 <__assert_fail@plt+0x3a2c>
   14dac:	sub	r1, r5, #40	; 0x28
   14db0:	mov	r2, r7
   14db4:	mov	r3, r8
   14db8:	mov	r0, r6
   14dbc:	bl	1418c <__assert_fail@plt+0x2dd0>
   14dc0:	ldr	r2, [r5, #-32]	; 0xffffffe0
   14dc4:	ldr	r1, [r6, #24]
   14dc8:	ldr	r3, [r5, #-4]
   14dcc:	cmp	r1, r5
   14dd0:	addne	r2, r2, #1
   14dd4:	ldr	r5, [r5]
   14dd8:	add	sl, sl, r2
   14ddc:	add	fp, fp, r3
   14de0:	cmp	r5, r9
   14de4:	bne	14dac <__assert_fail@plt+0x39f0>
   14de8:	ldr	r3, [r6, #8]
   14dec:	cmp	r3, #0
   14df0:	beq	14cbc <__assert_fail@plt+0x3900>
   14df4:	ldr	r3, [r6, #4]
   14df8:	cmp	r3, sl
   14dfc:	bcs	14e70 <__assert_fail@plt+0x3ab4>
   14e00:	cmp	fp, #0
   14e04:	ldr	r1, [r6, #20]
   14e08:	beq	14e84 <__assert_fail@plt+0x3ac8>
   14e0c:	cmp	r1, r9
   14e10:	mov	r5, r1
   14e14:	bne	14e28 <__assert_fail@plt+0x3a6c>
   14e18:	b	14e84 <__assert_fail@plt+0x3ac8>
   14e1c:	ldr	r5, [r5]
   14e20:	cmp	r5, r9
   14e24:	beq	14e6c <__assert_fail@plt+0x3ab0>
   14e28:	ldr	r3, [r5, #-4]
   14e2c:	cmp	r3, #0
   14e30:	beq	14e1c <__assert_fail@plt+0x3a60>
   14e34:	ldr	ip, [r5, #-32]	; 0xffffffe0
   14e38:	mov	r2, r7
   14e3c:	mov	r3, r8
   14e40:	mov	r0, r6
   14e44:	sub	r1, r5, #40	; 0x28
   14e48:	str	ip, [sp, #4]
   14e4c:	bl	1418c <__assert_fail@plt+0x2dd0>
   14e50:	ldr	r3, [r5, #-32]	; 0xffffffe0
   14e54:	ldr	ip, [sp, #4]
   14e58:	cmp	ip, r3
   14e5c:	rsb	r2, ip, r3
   14e60:	addhi	sl, sl, r2
   14e64:	subls	fp, fp, #1
   14e68:	b	14e1c <__assert_fail@plt+0x3a60>
   14e6c:	ldr	r3, [r6, #4]
   14e70:	cmp	sl, r3
   14e74:	bcc	14fac <__assert_fail@plt+0x3bf0>
   14e78:	cmp	sl, r3
   14e7c:	bls	14cbc <__assert_fail@plt+0x3900>
   14e80:	ldr	r1, [r6, #20]
   14e84:	vmov.f64	d6, #112	; 0x3f800000  1.0
   14e88:	mov	r0, #1
   14e8c:	cmp	r1, r9
   14e90:	beq	14f98 <__assert_fail@plt+0x3bdc>
   14e94:	cmp	r3, sl
   14e98:	bcs	14f98 <__assert_fail@plt+0x3bdc>
   14e9c:	mov	ip, r1
   14ea0:	mov	r5, sl
   14ea4:	eor	fp, r0, #1
   14ea8:	b	14ef4 <__assert_fail@plt+0x3b38>
   14eac:	vcmpe.f64	d7, d6
   14eb0:	vmrs	APSR_nzcv, fpscr
   14eb4:	ble	14ee0 <__assert_fail@plt+0x3b24>
   14eb8:	ldr	r2, [ip, #-32]	; 0xffffffe0
   14ebc:	cmp	r2, #0
   14ec0:	beq	14ee0 <__assert_fail@plt+0x3b24>
   14ec4:	cmp	r5, #0
   14ec8:	moveq	lr, #0
   14ecc:	andne	lr, fp, #1
   14ed0:	cmp	lr, #0
   14ed4:	subne	r5, r5, #1
   14ed8:	subne	r2, r2, #1
   14edc:	strne	r2, [ip, #-32]	; 0xffffffe0
   14ee0:	ldr	ip, [ip]
   14ee4:	cmp	ip, r9
   14ee8:	beq	14f80 <__assert_fail@plt+0x3bc4>
   14eec:	cmp	r5, r3
   14ef0:	bls	14f80 <__assert_fail@plt+0x3bc4>
   14ef4:	vldr	d7, [ip, #-16]
   14ef8:	vcmpe.f64	d7, d6
   14efc:	ldr	lr, [ip, #-8]
   14f00:	vmrs	APSR_nzcv, fpscr
   14f04:	ble	14f10 <__assert_fail@plt+0x3b54>
   14f08:	tst	lr, #32
   14f0c:	beq	14ee0 <__assert_fail@plt+0x3b24>
   14f10:	tst	lr, #64	; 0x40
   14f14:	bne	14ee0 <__assert_fail@plt+0x3b24>
   14f18:	cmp	r0, #0
   14f1c:	beq	14f28 <__assert_fail@plt+0x3b6c>
   14f20:	tst	lr, #32
   14f24:	beq	14ee0 <__assert_fail@plt+0x3b24>
   14f28:	ldr	r2, [ip, #-32]	; 0xffffffe0
   14f2c:	ldr	lr, [ip, #-28]	; 0xffffffe4
   14f30:	cmp	r2, lr
   14f34:	beq	14ee0 <__assert_fail@plt+0x3b24>
   14f38:	vcmpe.f64	d7, d6
   14f3c:	vmrs	APSR_nzcv, fpscr
   14f40:	bpl	14eac <__assert_fail@plt+0x3af0>
   14f44:	cmp	r2, #0
   14f48:	beq	14eac <__assert_fail@plt+0x3af0>
   14f4c:	cmp	r5, #0
   14f50:	beq	14eac <__assert_fail@plt+0x3af0>
   14f54:	vmov	s7, r3
   14f58:	vcvt.f64.u32	d5, s7
   14f5c:	vmov	s7, r2
   14f60:	vmul.f64	d5, d7, d5
   14f64:	vcvt.f64.u32	d4, s7
   14f68:	vcmpe.f64	d4, d5
   14f6c:	vmrs	APSR_nzcv, fpscr
   14f70:	subgt	r2, r2, #1
   14f74:	subgt	r5, r5, #1
   14f78:	strgt	r2, [ip, #-32]	; 0xffffffe0
   14f7c:	b	14eac <__assert_fail@plt+0x3af0>
   14f80:	cmp	r5, sl
   14f84:	beq	14f9c <__assert_fail@plt+0x3be0>
   14f88:	cmp	r5, r3
   14f8c:	bls	14cbc <__assert_fail@plt+0x3900>
   14f90:	mov	sl, r5
   14f94:	b	14e8c <__assert_fail@plt+0x3ad0>
   14f98:	mov	r5, sl
   14f9c:	cmp	r0, #0
   14fa0:	beq	14cbc <__assert_fail@plt+0x3900>
   14fa4:	mov	r0, #0
   14fa8:	b	14f88 <__assert_fail@plt+0x3bcc>
   14fac:	cmp	fp, #0
   14fb0:	beq	1501c <__assert_fail@plt+0x3c60>
   14fb4:	ldr	r2, [r6, #20]
   14fb8:	cmp	r2, r9
   14fbc:	bne	14fe4 <__assert_fail@plt+0x3c28>
   14fc0:	b	1501c <__assert_fail@plt+0x3c60>
   14fc4:	ldr	r0, [r2, #-32]	; 0xffffffe0
   14fc8:	add	sl, sl, r1
   14fcc:	str	r0, [r2, #-32]	; 0xffffffe0
   14fd0:	cmp	sl, r3
   14fd4:	beq	14cbc <__assert_fail@plt+0x3900>
   14fd8:	ldr	r2, [r2]
   14fdc:	cmp	r2, r9
   14fe0:	beq	15014 <__assert_fail@plt+0x3c58>
   14fe4:	ldr	r1, [r2, #-4]
   14fe8:	cmp	r1, #0
   14fec:	beq	14fd8 <__assert_fail@plt+0x3c1c>
   14ff0:	subs	r1, r3, sl
   14ff4:	beq	14fc4 <__assert_fail@plt+0x3c08>
   14ff8:	ldr	lr, [r2, #-32]	; 0xffffffe0
   14ffc:	ldr	ip, [r2, #-24]	; 0xffffffe8
   15000:	add	r0, r1, lr
   15004:	cmp	r0, ip
   15008:	rsbhi	r1, lr, ip
   1500c:	movhi	r0, ip
   15010:	b	14fc8 <__assert_fail@plt+0x3c0c>
   15014:	cmp	sl, r3
   15018:	bcs	14e78 <__assert_fail@plt+0x3abc>
   1501c:	ldr	r2, [r6, #24]
   15020:	ldr	r1, [r2, #-8]
   15024:	tst	r1, #128	; 0x80
   15028:	bne	14e78 <__assert_fail@plt+0x3abc>
   1502c:	ldr	r1, [r2, #-32]	; 0xffffffe0
   15030:	add	r3, r3, r1
   15034:	rsb	sl, sl, r3
   15038:	str	sl, [r2, #-32]	; 0xffffffe0
   1503c:	b	14cbc <__assert_fail@plt+0x3900>
   15040:	mvn	r0, #0
   15044:	b	14d10 <__assert_fail@plt+0x3954>
   15048:	ldr	r3, [pc, #164]	; 150f4 <__assert_fail@plt+0x3d38>
   1504c:	ldr	r2, [pc, #164]	; 150f8 <__assert_fail@plt+0x3d3c>
   15050:	add	r3, pc, r3
   15054:	push	{r4, r5, r6, r7, r8, lr}
   15058:	sub	sp, sp, #8
   1505c:	ldr	r5, [r3, r2]
   15060:	ldr	r3, [r5]
   15064:	str	r3, [sp, #4]
   15068:	bl	111b8 <getenv@plt>
   1506c:	subs	r8, r0, #0
   15070:	beq	150e8 <__assert_fail@plt+0x3d2c>
   15074:	add	r4, sp, #8
   15078:	mov	r7, #0
   1507c:	str	r7, [r4, #-8]!
   15080:	bl	11254 <__errno_location@plt>
   15084:	mov	r1, sp
   15088:	mov	r2, #10
   1508c:	mov	r6, r0
   15090:	mov	r0, r8
   15094:	str	r7, [r6]
   15098:	bl	110bc <strtol@plt>
   1509c:	ldr	r3, [r6]
   150a0:	cmp	r3, r7
   150a4:	bne	150e8 <__assert_fail@plt+0x3d2c>
   150a8:	ldr	r3, [sp]
   150ac:	cmp	r3, r7
   150b0:	beq	150e8 <__assert_fail@plt+0x3d2c>
   150b4:	ldrsb	r2, [r3]
   150b8:	cmp	r2, r7
   150bc:	bne	150e8 <__assert_fail@plt+0x3d2c>
   150c0:	cmp	r8, r3
   150c4:	bcs	150e8 <__assert_fail@plt+0x3d2c>
   150c8:	cmp	r0, r7
   150cc:	ble	150e8 <__assert_fail@plt+0x3d2c>
   150d0:	ldr	r2, [sp, #4]
   150d4:	ldr	r3, [r5]
   150d8:	cmp	r2, r3
   150dc:	bne	150f0 <__assert_fail@plt+0x3d34>
   150e0:	add	sp, sp, #8
   150e4:	pop	{r4, r5, r6, r7, r8, pc}
   150e8:	mvn	r0, #0
   150ec:	b	150d0 <__assert_fail@plt+0x3d14>
   150f0:	bl	11134 <__stack_chk_fail@plt>
   150f4:	andeq	r2, r1, r8, lsr #31
   150f8:	andeq	r0, r0, ip, lsl r1
   150fc:	ldr	r3, [pc, #244]	; 151f8 <__assert_fail@plt+0x3e3c>
   15100:	ldr	ip, [pc, #244]	; 151fc <__assert_fail@plt+0x3e40>
   15104:	add	r3, pc, r3
   15108:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1510c:	sub	sp, sp, #20
   15110:	ldr	r5, [r3, ip]
   15114:	mov	r9, r0
   15118:	mov	r8, r1
   1511c:	mov	r0, #1
   15120:	movw	r1, #21523	; 0x5413
   15124:	add	r2, sp, #4
   15128:	ldr	r3, [r5]
   1512c:	str	r3, [sp, #12]
   15130:	bl	11170 <ioctl@plt>
   15134:	cmp	r0, #0
   15138:	bne	151a0 <__assert_fail@plt+0x3de4>
   1513c:	ldrh	sl, [sp, #6]
   15140:	ldrh	r4, [sp, #4]
   15144:	rsbs	r3, sl, #1
   15148:	movcc	r3, #0
   1514c:	rsbs	fp, r4, #1
   15150:	movcc	fp, #0
   15154:	adds	r7, r9, #0
   15158:	movne	r7, #1
   1515c:	tst	r3, r7
   15160:	bne	151c0 <__assert_fail@plt+0x3e04>
   15164:	adds	r6, r8, #0
   15168:	movne	r6, #1
   1516c:	tst	fp, r6
   15170:	bne	151e0 <__assert_fail@plt+0x3e24>
   15174:	ldr	r2, [sp, #12]
   15178:	cmp	r7, #0
   1517c:	ldr	r3, [r5]
   15180:	mov	r0, #0
   15184:	strne	sl, [r9]
   15188:	cmp	r6, #0
   1518c:	strne	r4, [r8]
   15190:	cmp	r2, r3
   15194:	bne	151f4 <__assert_fail@plt+0x3e38>
   15198:	add	sp, sp, #20
   1519c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   151a0:	adds	r7, r9, #0
   151a4:	mov	fp, #1
   151a8:	mov	r3, fp
   151ac:	mov	r4, #0
   151b0:	movne	r7, #1
   151b4:	tst	r3, r7
   151b8:	mov	sl, r4
   151bc:	beq	15164 <__assert_fail@plt+0x3da8>
   151c0:	ldr	r0, [pc, #56]	; 15200 <__assert_fail@plt+0x3e44>
   151c4:	add	r0, pc, r0
   151c8:	bl	15048 <__assert_fail@plt+0x3c8c>
   151cc:	adds	r6, r8, #0
   151d0:	movne	r6, #1
   151d4:	tst	fp, r6
   151d8:	mov	sl, r0
   151dc:	beq	15174 <__assert_fail@plt+0x3db8>
   151e0:	ldr	r0, [pc, #28]	; 15204 <__assert_fail@plt+0x3e48>
   151e4:	add	r0, pc, r0
   151e8:	bl	15048 <__assert_fail@plt+0x3c8c>
   151ec:	mov	r4, r0
   151f0:	b	15174 <__assert_fail@plt+0x3db8>
   151f4:	bl	11134 <__stack_chk_fail@plt>
   151f8:	strdeq	r2, [r1], -r4
   151fc:	andeq	r0, r0, ip, lsl r1
   15200:	andeq	r2, r0, r8, lsr #19
   15204:	muleq	r0, r0, r9
   15208:	ldr	r3, [pc, #204]	; 152dc <__assert_fail@plt+0x3f20>
   1520c:	mov	r0, #0
   15210:	ldr	ip, [pc, #200]	; 152e0 <__assert_fail@plt+0x3f24>
   15214:	movw	r1, #21523	; 0x5413
   15218:	add	r3, pc, r3
   1521c:	push	{r4, r5, r6, r7, r8, lr}
   15220:	sub	sp, sp, #16
   15224:	ldr	r4, [r3, ip]
   15228:	add	r2, sp, #4
   1522c:	ldr	r3, [r4]
   15230:	str	r3, [sp, #12]
   15234:	bl	11170 <ioctl@plt>
   15238:	cmp	r0, #0
   1523c:	bne	1525c <__assert_fail@plt+0x3ea0>
   15240:	ldrh	r0, [sp, #6]
   15244:	ldr	r2, [sp, #12]
   15248:	ldr	r3, [r4]
   1524c:	cmp	r2, r3
   15250:	bne	152d8 <__assert_fail@plt+0x3f1c>
   15254:	add	sp, sp, #16
   15258:	pop	{r4, r5, r6, r7, r8, pc}
   1525c:	ldr	r0, [pc, #128]	; 152e4 <__assert_fail@plt+0x3f28>
   15260:	add	r0, pc, r0
   15264:	bl	111b8 <getenv@plt>
   15268:	subs	r8, r0, #0
   1526c:	moveq	r0, r8
   15270:	beq	15244 <__assert_fail@plt+0x3e88>
   15274:	add	r5, sp, #16
   15278:	mov	r7, #0
   1527c:	str	r7, [r5, #-16]!
   15280:	bl	11254 <__errno_location@plt>
   15284:	mov	r1, sp
   15288:	mov	r2, #10
   1528c:	mov	r6, r0
   15290:	mov	r0, r8
   15294:	str	r7, [r6]
   15298:	bl	110bc <strtol@plt>
   1529c:	ldr	r3, [r6]
   152a0:	cmp	r3, r7
   152a4:	bne	152d0 <__assert_fail@plt+0x3f14>
   152a8:	ldr	r3, [sp]
   152ac:	cmp	r3, r7
   152b0:	beq	152d0 <__assert_fail@plt+0x3f14>
   152b4:	ldrsb	r2, [r3]
   152b8:	cmp	r2, r7
   152bc:	bne	152d0 <__assert_fail@plt+0x3f14>
   152c0:	cmp	r8, r3
   152c4:	bcs	152d0 <__assert_fail@plt+0x3f14>
   152c8:	cmp	r0, r7
   152cc:	bgt	15244 <__assert_fail@plt+0x3e88>
   152d0:	mov	r0, #0
   152d4:	b	15244 <__assert_fail@plt+0x3e88>
   152d8:	bl	11134 <__stack_chk_fail@plt>
   152dc:	andeq	r2, r1, r0, ror #27
   152e0:	andeq	r0, r0, ip, lsl r1
   152e4:	andeq	r2, r0, ip, lsl #18
   152e8:	push	{r3, r4, r5, r6, r7, lr}
   152ec:	subs	r7, r2, #0
   152f0:	mov	r5, r3
   152f4:	mov	r4, r1
   152f8:	movne	r3, #0
   152fc:	strne	r3, [r7]
   15300:	cmp	r1, #0
   15304:	movne	r3, #0
   15308:	strne	r3, [r1]
   1530c:	cmp	r5, #0
   15310:	movne	r3, #0
   15314:	strne	r3, [r5]
   15318:	bl	11224 <ttyname@plt>
   1531c:	subs	r6, r0, #0
   15320:	beq	153bc <__assert_fail@plt+0x4000>
   15324:	ldr	r1, [pc, #152]	; 153c4 <__assert_fail@plt+0x4008>
   15328:	cmp	r4, #0
   1532c:	mov	r0, r6
   15330:	strne	r6, [r4]
   15334:	add	r1, pc, r1
   15338:	mov	r2, #5
   1533c:	bl	1138c <strncmp@plt>
   15340:	cmp	r0, #0
   15344:	addeq	r6, r6, #5
   15348:	cmp	r7, #0
   1534c:	strne	r6, [r7]
   15350:	cmp	r5, #0
   15354:	beq	153b4 <__assert_fail@plt+0x3ff8>
   15358:	cmp	r6, #0
   1535c:	beq	153b4 <__assert_fail@plt+0x3ff8>
   15360:	ldrb	r4, [r6]
   15364:	cmp	r4, #0
   15368:	beq	153b4 <__assert_fail@plt+0x3ff8>
   1536c:	bl	11200 <__ctype_b_loc@plt>
   15370:	mov	r2, r6
   15374:	ldr	r3, [r0]
   15378:	b	15390 <__assert_fail@plt+0x3fd4>
   1537c:	cmn	r2, #1
   15380:	beq	153b4 <__assert_fail@plt+0x3ff8>
   15384:	ldrb	r4, [r2, #1]!
   15388:	cmp	r4, #0
   1538c:	beq	153b4 <__assert_fail@plt+0x3ff8>
   15390:	sxtb	r4, r4
   15394:	sxth	r4, r4
   15398:	lsl	r4, r4, #1
   1539c:	ldrh	r4, [r3, r4]
   153a0:	and	r4, r4, #2048	; 0x800
   153a4:	uxth	r4, r4
   153a8:	cmp	r4, #0
   153ac:	beq	1537c <__assert_fail@plt+0x3fc0>
   153b0:	str	r2, [r5]
   153b4:	mov	r0, #0
   153b8:	pop	{r3, r4, r5, r6, r7, pc}
   153bc:	mvn	r0, #0
   153c0:	pop	{r3, r4, r5, r6, r7, pc}
   153c4:	andeq	r2, r0, r8, asr #16
   153c8:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   153cc:	mov	r6, r0
   153d0:	ldr	r0, [r0]
   153d4:	mov	r7, r1
   153d8:	cmp	r0, #0
   153dc:	beq	15448 <__assert_fail@plt+0x408c>
   153e0:	add	r4, r6, #4
   153e4:	mov	r5, r6
   153e8:	mov	r9, #0
   153ec:	movw	r8, #65533	; 0xfffd
   153f0:	b	15404 <__assert_fail@plt+0x4048>
   153f4:	ldr	r0, [r5, #4]!
   153f8:	mov	r9, r3
   153fc:	cmp	r0, #0
   15400:	beq	1543c <__assert_fail@plt+0x4080>
   15404:	bl	110d4 <wcwidth@plt>
   15408:	mov	r6, r5
   1540c:	mov	r2, r4
   15410:	add	r4, r4, #4
   15414:	cmn	r0, #1
   15418:	streq	r8, [r4, #-8]
   1541c:	moveq	r0, #1
   15420:	add	r3, r0, r9
   15424:	cmp	r3, r7
   15428:	bls	153f4 <__assert_fail@plt+0x4038>
   1542c:	mov	r3, #0
   15430:	mov	r0, r9
   15434:	str	r3, [r6]
   15438:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1543c:	mov	r9, r3
   15440:	mov	r6, r2
   15444:	b	1542c <__assert_fail@plt+0x4070>
   15448:	mov	r9, r0
   1544c:	b	1542c <__assert_fail@plt+0x4070>
   15450:	ldr	r3, [pc, #440]	; 15610 <__assert_fail@plt+0x4254>
   15454:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15458:	subs	r4, r0, #0
   1545c:	ldr	r0, [pc, #432]	; 15614 <__assert_fail@plt+0x4258>
   15460:	sub	sp, sp, #28
   15464:	add	r3, pc, r3
   15468:	add	r8, sp, #12
   1546c:	str	r2, [sp, #4]
   15470:	mov	r5, #0
   15474:	ldr	r0, [r3, r0]
   15478:	str	r5, [r8, #4]
   1547c:	str	r5, [sp, #12]
   15480:	ldr	r3, [r0]
   15484:	str	r0, [sp]
   15488:	str	r3, [sp, #20]
   1548c:	beq	155f8 <__assert_fail@plt+0x423c>
   15490:	ldrb	sl, [r4]
   15494:	cmp	sl, r5
   15498:	moveq	r5, sl
   1549c:	moveq	r6, r5
   154a0:	beq	15574 <__assert_fail@plt+0x41b8>
   154a4:	cmp	r1, r5
   154a8:	beq	155f0 <__assert_fail@plt+0x4234>
   154ac:	sub	r1, r1, #1
   154b0:	adds	r7, r4, r1
   154b4:	bcs	15604 <__assert_fail@plt+0x4248>
   154b8:	mov	r5, #0
   154bc:	add	r9, sp, #8
   154c0:	mov	r6, r5
   154c4:	b	154f0 <__assert_fail@plt+0x4134>
   154c8:	add	r4, r4, #1
   154cc:	add	r6, r6, #4
   154d0:	cmp	r4, #0
   154d4:	add	r5, r5, #4
   154d8:	beq	15574 <__assert_fail@plt+0x41b8>
   154dc:	ldrb	sl, [r4]
   154e0:	cmp	sl, #0
   154e4:	beq	15574 <__assert_fail@plt+0x41b8>
   154e8:	cmp	r4, r7
   154ec:	bhi	15574 <__assert_fail@plt+0x41b8>
   154f0:	cmp	r4, r7
   154f4:	bcs	15500 <__assert_fail@plt+0x4144>
   154f8:	cmp	sl, #92	; 0x5c
   154fc:	beq	155a0 <__assert_fail@plt+0x41e4>
   15500:	bl	11200 <__ctype_b_loc@plt>
   15504:	lsl	r3, sl, #1
   15508:	ldr	r2, [r0]
   1550c:	mov	fp, r0
   15510:	ldrh	r3, [r2, r3]
   15514:	tst	r3, #2
   15518:	bne	154c8 <__assert_fail@plt+0x410c>
   1551c:	bl	1117c <__ctype_get_mb_cur_max@plt>
   15520:	mov	r1, r4
   15524:	mov	r3, r8
   15528:	mov	r2, r0
   1552c:	mov	r0, r9
   15530:	bl	11194 <mbrtowc@plt>
   15534:	subs	sl, r0, #0
   15538:	beq	15574 <__assert_fail@plt+0x41b8>
   1553c:	add	r2, sl, #2
   15540:	cmp	r2, #1
   15544:	bls	155b0 <__assert_fail@plt+0x41f4>
   15548:	ldr	fp, [sp, #8]
   1554c:	mov	r0, fp
   15550:	bl	11164 <iswprint@plt>
   15554:	cmp	r0, #0
   15558:	bne	155dc <__assert_fail@plt+0x4220>
   1555c:	lsl	r2, sl, #2
   15560:	add	r6, r6, r2
   15564:	add	r5, r5, r2
   15568:	add	r4, r4, sl
   1556c:	cmp	r4, #0
   15570:	bne	154dc <__assert_fail@plt+0x4120>
   15574:	ldr	r3, [sp, #4]
   15578:	mov	r0, r6
   1557c:	ldr	r1, [sp]
   15580:	cmp	r3, #0
   15584:	ldr	r2, [sp, #20]
   15588:	strne	r5, [r3]
   1558c:	ldr	r3, [r1]
   15590:	cmp	r2, r3
   15594:	bne	1560c <__assert_fail@plt+0x4250>
   15598:	add	sp, sp, #28
   1559c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   155a0:	ldrsb	r2, [r4, #1]
   155a4:	cmp	r2, #120	; 0x78
   155a8:	bne	15500 <__assert_fail@plt+0x4144>
   155ac:	b	154c8 <__assert_fail@plt+0x410c>
   155b0:	ldrb	r3, [r4]
   155b4:	mov	sl, #1
   155b8:	ldr	r2, [fp]
   155bc:	lsl	r3, r3, #1
   155c0:	ldrh	r3, [r2, r3]
   155c4:	tst	r3, #16384	; 0x4000
   155c8:	addne	r6, r6, #1
   155cc:	addne	r5, r5, #1
   155d0:	addeq	r6, r6, #4
   155d4:	addeq	r5, r5, #4
   155d8:	b	15568 <__assert_fail@plt+0x41ac>
   155dc:	mov	r0, fp
   155e0:	add	r5, r5, sl
   155e4:	bl	110d4 <wcwidth@plt>
   155e8:	add	r6, r6, r0
   155ec:	b	15568 <__assert_fail@plt+0x41ac>
   155f0:	mov	r7, r4
   155f4:	b	154b8 <__assert_fail@plt+0x40fc>
   155f8:	mov	r5, r4
   155fc:	mov	r6, r4
   15600:	b	15574 <__assert_fail@plt+0x41b8>
   15604:	mov	r6, r5
   15608:	b	15574 <__assert_fail@plt+0x41b8>
   1560c:	bl	11134 <__stack_chk_fail@plt>
   15610:	muleq	r1, r4, fp
   15614:	andeq	r0, r0, ip, lsl r1
   15618:	push	{r4, lr}
   1561c:	subs	r4, r0, #0
   15620:	beq	15630 <__assert_fail@plt+0x4274>
   15624:	ldrsb	r3, [r4]
   15628:	cmp	r3, #0
   1562c:	bne	15638 <__assert_fail@plt+0x427c>
   15630:	mov	r0, #0
   15634:	pop	{r4, pc}
   15638:	bl	11230 <strlen@plt>
   1563c:	mov	r2, #0
   15640:	mov	r1, r0
   15644:	mov	r0, r4
   15648:	pop	{r4, lr}
   1564c:	b	15450 <__assert_fail@plt+0x4094>
   15650:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15654:	sub	sp, sp, #52	; 0x34
   15658:	ldr	r5, [pc, #664]	; 158f8 <__assert_fail@plt+0x453c>
   1565c:	mov	r8, r3
   15660:	ldr	ip, [pc, #660]	; 158fc <__assert_fail@plt+0x4540>
   15664:	subs	r4, r0, #0
   15668:	add	r5, pc, r5
   1566c:	str	r2, [sp, #12]
   15670:	mov	r6, r1
   15674:	ldr	ip, [r5, ip]
   15678:	mov	r3, r5
   1567c:	ldr	r3, [ip]
   15680:	str	ip, [sp, #20]
   15684:	str	r3, [sp, #44]	; 0x2c
   15688:	beq	158dc <__assert_fail@plt+0x4520>
   1568c:	bl	11230 <strlen@plt>
   15690:	ldr	r2, [sp, #12]
   15694:	mov	r3, #0
   15698:	add	r1, sp, #36	; 0x24
   1569c:	str	r3, [sp, #36]	; 0x24
   156a0:	str	r1, [sp, #16]
   156a4:	str	r3, [sp, #40]	; 0x28
   156a8:	cmp	r2, r3
   156ac:	cmpne	r0, r3
   156b0:	movne	r0, #0
   156b4:	moveq	r0, #1
   156b8:	moveq	r0, r3
   156bc:	beq	157a8 <__assert_fail@plt+0x43ec>
   156c0:	str	r0, [r6]
   156c4:	ldrb	sl, [r4]
   156c8:	cmp	sl, r3
   156cc:	beq	158ec <__assert_fail@plt+0x4530>
   156d0:	ldr	r3, [pc, #552]	; 15900 <__assert_fail@plt+0x4544>
   156d4:	mov	r5, r2
   156d8:	ldr	r9, [pc, #548]	; 15904 <__assert_fail@plt+0x4548>
   156dc:	add	r1, sp, #32
   156e0:	ldr	r2, [pc, #544]	; 15908 <__assert_fail@plt+0x454c>
   156e4:	add	r3, pc, r3
   156e8:	str	r1, [sp, #24]
   156ec:	add	r9, pc, r9
   156f0:	add	r2, pc, r2
   156f4:	str	r3, [sp, #8]
   156f8:	str	r2, [sp, #28]
   156fc:	b	15720 <__assert_fail@plt+0x4364>
   15700:	strb	sl, [r5]
   15704:	add	r4, r4, #1
   15708:	add	r5, r5, #1
   1570c:	cmp	r4, #0
   15710:	beq	1579c <__assert_fail@plt+0x43e0>
   15714:	ldrb	sl, [r4]
   15718:	cmp	sl, #0
   1571c:	beq	1579c <__assert_fail@plt+0x43e0>
   15720:	cmp	r8, #0
   15724:	sxtb	r7, sl
   15728:	beq	15740 <__assert_fail@plt+0x4384>
   1572c:	mov	r0, r8
   15730:	mov	r1, r7
   15734:	bl	1123c <strchr@plt>
   15738:	cmp	r0, #0
   1573c:	bne	15700 <__assert_fail@plt+0x4344>
   15740:	cmp	r7, #92	; 0x5c
   15744:	beq	157c4 <__assert_fail@plt+0x4408>
   15748:	bl	11200 <__ctype_b_loc@plt>
   1574c:	uxtb	sl, sl
   15750:	lsl	r3, sl, #1
   15754:	ldr	r2, [r0]
   15758:	mov	r7, r0
   1575c:	ldrh	r3, [r2, r3]
   15760:	tst	r3, #2
   15764:	beq	157d8 <__assert_fail@plt+0x441c>
   15768:	ldr	r3, [sp, #8]
   1576c:	mov	r0, r5
   15770:	mov	r1, #1
   15774:	mvn	r2, #0
   15778:	str	sl, [sp]
   1577c:	add	r4, r4, r1
   15780:	bl	1126c <__sprintf_chk@plt>
   15784:	ldr	r3, [r6]
   15788:	cmp	r4, #0
   1578c:	add	r5, r5, #4
   15790:	add	r3, r3, #4
   15794:	str	r3, [r6]
   15798:	bne	15714 <__assert_fail@plt+0x4358>
   1579c:	ldr	r0, [sp, #12]
   157a0:	mov	r3, #0
   157a4:	strb	r3, [r5]
   157a8:	ldr	r1, [sp, #20]
   157ac:	ldr	r2, [sp, #44]	; 0x2c
   157b0:	ldr	r3, [r1]
   157b4:	cmp	r2, r3
   157b8:	bne	158f4 <__assert_fail@plt+0x4538>
   157bc:	add	sp, sp, #52	; 0x34
   157c0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   157c4:	ldrsb	r3, [r4, #1]
   157c8:	cmp	r3, #120	; 0x78
   157cc:	bne	15748 <__assert_fail@plt+0x438c>
   157d0:	mov	sl, r7
   157d4:	b	15768 <__assert_fail@plt+0x43ac>
   157d8:	bl	1117c <__ctype_get_mb_cur_max@plt>
   157dc:	mov	r1, r4
   157e0:	add	r3, sp, #36	; 0x24
   157e4:	mov	r2, r0
   157e8:	add	r0, sp, #32
   157ec:	bl	11194 <mbrtowc@plt>
   157f0:	subs	sl, r0, #0
   157f4:	beq	1579c <__assert_fail@plt+0x43e0>
   157f8:	add	r3, sl, #2
   157fc:	cmp	r3, #1
   15800:	bls	15860 <__assert_fail@plt+0x44a4>
   15804:	ldr	r7, [sp, #32]
   15808:	mov	r0, r7
   1580c:	bl	11164 <iswprint@plt>
   15810:	cmp	r0, #0
   15814:	bne	15894 <__assert_fail@plt+0x44d8>
   15818:	mov	r7, r4
   1581c:	add	r4, r4, sl
   15820:	mov	fp, r5
   15824:	ldrb	ip, [r7], #1
   15828:	mov	r0, fp
   1582c:	mov	r3, r9
   15830:	mov	r1, #1
   15834:	mvn	r2, #0
   15838:	add	fp, fp, #4
   1583c:	str	ip, [sp]
   15840:	bl	1126c <__sprintf_chk@plt>
   15844:	ldr	r3, [r6]
   15848:	cmp	r7, r4
   1584c:	add	r3, r3, #4
   15850:	str	r3, [r6]
   15854:	bne	15824 <__assert_fail@plt+0x4468>
   15858:	add	r5, r5, sl, lsl #2
   1585c:	b	1570c <__assert_fail@plt+0x4350>
   15860:	ldrb	r3, [r4]
   15864:	ldr	r1, [r7]
   15868:	lsl	r2, r3, #1
   1586c:	ldrh	r2, [r1, r2]
   15870:	tst	r2, #16384	; 0x4000
   15874:	beq	158c4 <__assert_fail@plt+0x4508>
   15878:	ldr	r3, [r6]
   1587c:	add	r5, r5, #1
   15880:	add	r3, r3, #1
   15884:	str	r3, [r6]
   15888:	ldrb	r3, [r4], #1
   1588c:	strb	r3, [r5, #-1]
   15890:	b	1570c <__assert_fail@plt+0x4350>
   15894:	mov	r1, r4
   15898:	mov	r0, r5
   1589c:	mov	r2, sl
   158a0:	add	r5, r5, sl
   158a4:	bl	11104 <memcpy@plt>
   158a8:	mov	r0, r7
   158ac:	ldr	r7, [r6]
   158b0:	bl	110d4 <wcwidth@plt>
   158b4:	add	r4, sl, r4
   158b8:	add	r0, r0, r7
   158bc:	str	r0, [r6]
   158c0:	b	1570c <__assert_fail@plt+0x4350>
   158c4:	str	r3, [sp]
   158c8:	mov	r0, r5
   158cc:	mov	r1, #1
   158d0:	mvn	r2, #0
   158d4:	ldr	r3, [sp, #28]
   158d8:	b	1577c <__assert_fail@plt+0x43c0>
   158dc:	str	r4, [sp, #36]	; 0x24
   158e0:	mov	r0, r4
   158e4:	str	r4, [sp, #40]	; 0x28
   158e8:	b	157a8 <__assert_fail@plt+0x43ec>
   158ec:	ldr	r5, [sp, #12]
   158f0:	b	1579c <__assert_fail@plt+0x43e0>
   158f4:	bl	11134 <__stack_chk_fail@plt>
   158f8:	muleq	r1, r0, r9
   158fc:	andeq	r0, r0, ip, lsl r1
   15900:	andeq	r2, r0, r8, asr #8
   15904:	andeq	r2, r0, r0, asr #8
   15908:	andeq	r2, r0, ip, lsr r4
   1590c:	ldr	r3, [pc, #492]	; 15b00 <__assert_fail@plt+0x4744>
   15910:	ldr	ip, [pc, #492]	; 15b04 <__assert_fail@plt+0x4748>
   15914:	add	r3, pc, r3
   15918:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1591c:	subs	r4, r0, #0
   15920:	ldr	ip, [r3, ip]
   15924:	sub	sp, sp, #44	; 0x2c
   15928:	mov	r6, r1
   1592c:	mov	r9, r2
   15930:	ldr	r3, [ip]
   15934:	str	ip, [sp, #12]
   15938:	str	r3, [sp, #36]	; 0x24
   1593c:	beq	15ae4 <__assert_fail@plt+0x4728>
   15940:	bl	11230 <strlen@plt>
   15944:	add	r7, sp, #28
   15948:	mov	r3, #0
   1594c:	str	r3, [sp, #28]
   15950:	str	r3, [r7, #4]
   15954:	cmp	r9, r3
   15958:	cmpne	r0, r3
   1595c:	movne	r0, #0
   15960:	moveq	r0, #1
   15964:	moveq	r0, r3
   15968:	beq	15a6c <__assert_fail@plt+0x46b0>
   1596c:	str	r0, [r6]
   15970:	ldrsb	r3, [r4]
   15974:	cmp	r3, #0
   15978:	beq	15af4 <__assert_fail@plt+0x4738>
   1597c:	ldr	r1, [pc, #388]	; 15b08 <__assert_fail@plt+0x474c>
   15980:	add	r8, sp, #24
   15984:	ldr	r2, [pc, #384]	; 15b0c <__assert_fail@plt+0x4750>
   15988:	mov	r5, r9
   1598c:	add	r1, pc, r1
   15990:	str	r1, [sp, #20]
   15994:	add	r2, pc, r2
   15998:	str	r2, [sp, #16]
   1599c:	b	159f4 <__assert_fail@plt+0x4638>
   159a0:	ldrsb	r3, [r4]
   159a4:	cmp	r3, #92	; 0x5c
   159a8:	bne	159b8 <__assert_fail@plt+0x45fc>
   159ac:	ldrsb	r2, [r4, #1]
   159b0:	cmp	r2, #120	; 0x78
   159b4:	beq	15ab8 <__assert_fail@plt+0x46fc>
   159b8:	mov	r0, r5
   159bc:	mov	r1, r4
   159c0:	mov	r2, sl
   159c4:	add	r5, r5, sl
   159c8:	bl	11104 <memcpy@plt>
   159cc:	ldr	r0, [sp, #24]
   159d0:	ldr	fp, [r6]
   159d4:	bl	110d4 <wcwidth@plt>
   159d8:	add	r0, r0, fp
   159dc:	str	r0, [r6]
   159e0:	adds	r4, r4, sl
   159e4:	beq	15a60 <__assert_fail@plt+0x46a4>
   159e8:	ldrsb	r3, [r4]
   159ec:	cmp	r3, #0
   159f0:	beq	15a60 <__assert_fail@plt+0x46a4>
   159f4:	bl	1117c <__ctype_get_mb_cur_max@plt>
   159f8:	mov	r1, r4
   159fc:	mov	r3, r7
   15a00:	mov	r2, r0
   15a04:	mov	r0, r8
   15a08:	bl	11194 <mbrtowc@plt>
   15a0c:	subs	sl, r0, #0
   15a10:	beq	15a60 <__assert_fail@plt+0x46a4>
   15a14:	add	r3, sl, #2
   15a18:	cmp	r3, #1
   15a1c:	bhi	159a0 <__assert_fail@plt+0x45e4>
   15a20:	bl	11200 <__ctype_b_loc@plt>
   15a24:	ldrb	r3, [r4]
   15a28:	lsl	r2, r3, #1
   15a2c:	ldr	r1, [r0]
   15a30:	ldrh	r2, [r1, r2]
   15a34:	tst	r2, #16384	; 0x4000
   15a38:	beq	15a88 <__assert_fail@plt+0x46cc>
   15a3c:	ldr	r3, [r6]
   15a40:	mov	sl, #1
   15a44:	add	r3, r3, sl
   15a48:	str	r3, [r6]
   15a4c:	ldrb	r3, [r4]
   15a50:	adds	r4, r4, sl
   15a54:	strb	r3, [r5]
   15a58:	add	r5, r5, sl
   15a5c:	bne	159e8 <__assert_fail@plt+0x462c>
   15a60:	mov	r0, r9
   15a64:	mov	r3, #0
   15a68:	strb	r3, [r5]
   15a6c:	ldr	r1, [sp, #12]
   15a70:	ldr	r2, [sp, #36]	; 0x24
   15a74:	ldr	r3, [r1]
   15a78:	cmp	r2, r3
   15a7c:	bne	15afc <__assert_fail@plt+0x4740>
   15a80:	add	sp, sp, #44	; 0x2c
   15a84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15a88:	str	r3, [sp]
   15a8c:	mov	r0, r5
   15a90:	ldr	r3, [sp, #16]
   15a94:	mov	r1, #1
   15a98:	mvn	r2, #0
   15a9c:	add	r5, r5, #4
   15aa0:	bl	1126c <__sprintf_chk@plt>
   15aa4:	ldr	r3, [r6]
   15aa8:	mov	sl, #1
   15aac:	add	r3, r3, #4
   15ab0:	str	r3, [r6]
   15ab4:	b	159e0 <__assert_fail@plt+0x4624>
   15ab8:	str	r3, [sp]
   15abc:	mov	r0, r5
   15ac0:	ldr	r3, [sp, #20]
   15ac4:	mov	r1, #1
   15ac8:	mvn	r2, #0
   15acc:	add	r5, r5, #4
   15ad0:	bl	1126c <__sprintf_chk@plt>
   15ad4:	ldr	r3, [r6]
   15ad8:	add	r3, r3, #4
   15adc:	str	r3, [r6]
   15ae0:	b	159e0 <__assert_fail@plt+0x4624>
   15ae4:	str	r4, [sp, #28]
   15ae8:	mov	r0, r4
   15aec:	str	r4, [sp, #32]
   15af0:	b	15a6c <__assert_fail@plt+0x46b0>
   15af4:	mov	r5, r9
   15af8:	b	15a60 <__assert_fail@plt+0x46a4>
   15afc:	bl	11134 <__stack_chk_fail@plt>
   15b00:	andeq	r2, r1, r4, ror #13
   15b04:	andeq	r0, r0, ip, lsl r1
   15b08:	andeq	r2, r0, r0, lsr #3
   15b0c:	muleq	r0, r8, r1
   15b10:	lsl	r0, r0, #2
   15b14:	add	r0, r0, #1
   15b18:	bx	lr
   15b1c:	push	{r4, r5, r6, lr}
   15b20:	subs	r4, r0, #0
   15b24:	mov	r6, r1
   15b28:	beq	15b70 <__assert_fail@plt+0x47b4>
   15b2c:	bl	11230 <strlen@plt>
   15b30:	subs	r3, r0, #0
   15b34:	beq	15b70 <__assert_fail@plt+0x47b4>
   15b38:	bl	15b10 <__assert_fail@plt+0x4754>
   15b3c:	bl	111c4 <malloc@plt>
   15b40:	subs	r5, r0, #0
   15b44:	beq	15b68 <__assert_fail@plt+0x47ac>
   15b48:	mov	r0, r4
   15b4c:	mov	r1, r6
   15b50:	mov	r2, r5
   15b54:	mov	r3, #0
   15b58:	bl	15650 <__assert_fail@plt+0x4294>
   15b5c:	cmp	r0, #0
   15b60:	beq	15b68 <__assert_fail@plt+0x47ac>
   15b64:	pop	{r4, r5, r6, pc}
   15b68:	mov	r0, r5
   15b6c:	bl	110e0 <free@plt>
   15b70:	mov	r0, #0
   15b74:	pop	{r4, r5, r6, pc}
   15b78:	push	{r4, r5, r6, lr}
   15b7c:	subs	r4, r0, #0
   15b80:	mov	r6, r1
   15b84:	beq	15bc8 <__assert_fail@plt+0x480c>
   15b88:	bl	11230 <strlen@plt>
   15b8c:	subs	r3, r0, #0
   15b90:	beq	15bc8 <__assert_fail@plt+0x480c>
   15b94:	bl	15b10 <__assert_fail@plt+0x4754>
   15b98:	bl	111c4 <malloc@plt>
   15b9c:	subs	r5, r0, #0
   15ba0:	beq	15bc0 <__assert_fail@plt+0x4804>
   15ba4:	mov	r0, r4
   15ba8:	mov	r1, r6
   15bac:	mov	r2, r5
   15bb0:	bl	1590c <__assert_fail@plt+0x4550>
   15bb4:	cmp	r0, #0
   15bb8:	beq	15bc0 <__assert_fail@plt+0x4804>
   15bbc:	pop	{r4, r5, r6, pc}
   15bc0:	mov	r0, r5
   15bc4:	bl	110e0 <free@plt>
   15bc8:	mov	r0, #0
   15bcc:	pop	{r4, r5, r6, pc}
   15bd0:	push	{r4, r5, r6, r7, r8, lr}
   15bd4:	mov	r8, r1
   15bd8:	mov	r5, r0
   15bdc:	bl	11230 <strlen@plt>
   15be0:	mov	r1, r5
   15be4:	mov	r4, r0
   15be8:	mov	r0, #0
   15bec:	mov	r2, r0
   15bf0:	bl	11350 <mbstowcs@plt>
   15bf4:	cmn	r0, #1
   15bf8:	mov	r6, r0
   15bfc:	moveq	r7, #0
   15c00:	beq	15c30 <__assert_fail@plt+0x4874>
   15c04:	add	r1, r0, #1
   15c08:	mov	r0, #1
   15c0c:	lsl	r1, r1, #2
   15c10:	bl	11098 <calloc@plt>
   15c14:	subs	r7, r0, #0
   15c18:	beq	15c30 <__assert_fail@plt+0x4874>
   15c1c:	mov	r2, r6
   15c20:	mov	r1, r5
   15c24:	bl	11350 <mbstowcs@plt>
   15c28:	cmp	r0, #0
   15c2c:	bne	15c4c <__assert_fail@plt+0x4890>
   15c30:	mov	r0, r7
   15c34:	bl	110e0 <free@plt>
   15c38:	cmp	r4, #0
   15c3c:	mov	r0, r4
   15c40:	movge	r3, #0
   15c44:	strbge	r3, [r5, r4]
   15c48:	pop	{r4, r5, r6, r7, r8, pc}
   15c4c:	ldr	r1, [r8]
   15c50:	mov	r0, r7
   15c54:	bl	153c8 <__assert_fail@plt+0x400c>
   15c58:	mov	r2, r4
   15c5c:	mov	r1, r7
   15c60:	str	r0, [r8]
   15c64:	mov	r0, r5
   15c68:	bl	111ac <wcstombs@plt>
   15c6c:	mov	r4, r0
   15c70:	b	15c30 <__assert_fail@plt+0x4874>
   15c74:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c78:	sub	sp, sp, #12
   15c7c:	mov	r8, r1
   15c80:	mov	r9, r2
   15c84:	mov	r6, r3
   15c88:	str	r0, [sp]
   15c8c:	bl	11230 <strlen@plt>
   15c90:	mov	r7, r0
   15c94:	bl	1117c <__ctype_get_mb_cur_max@plt>
   15c98:	cmp	r0, #1
   15c9c:	bls	15e30 <__assert_fail@plt+0x4a74>
   15ca0:	mov	r0, #0
   15ca4:	ldr	r1, [sp]
   15ca8:	mov	r2, r0
   15cac:	bl	11350 <mbstowcs@plt>
   15cb0:	cmn	r0, #1
   15cb4:	mov	r4, r0
   15cb8:	beq	15e14 <__assert_fail@plt+0x4a58>
   15cbc:	add	fp, r0, #1
   15cc0:	lsl	sl, fp, #2
   15cc4:	mov	r0, sl
   15cc8:	bl	111c4 <malloc@plt>
   15ccc:	subs	r5, r0, #0
   15cd0:	beq	15fb0 <__assert_fail@plt+0x4bf4>
   15cd4:	mov	r2, fp
   15cd8:	ldr	r1, [sp]
   15cdc:	bl	11350 <mbstowcs@plt>
   15ce0:	cmp	r0, #0
   15ce4:	bne	15e78 <__assert_fail@plt+0x4abc>
   15ce8:	mov	sl, r7
   15cec:	mov	fp, #0
   15cf0:	ldr	r2, [r6]
   15cf4:	cmp	sl, r2
   15cf8:	movhi	sl, r2
   15cfc:	movhi	r3, #0
   15d00:	bls	15e4c <__assert_fail@plt+0x4a90>
   15d04:	cmp	r9, #0
   15d08:	str	sl, [r6]
   15d0c:	add	r6, r2, r3
   15d10:	beq	15df8 <__assert_fail@plt+0x4a3c>
   15d14:	ldr	r1, [sp, #48]	; 0x30
   15d18:	sub	r9, r9, #1
   15d1c:	add	r9, r8, r9
   15d20:	cmp	r1, #1
   15d24:	beq	15f80 <__assert_fail@plt+0x4bc4>
   15d28:	bcc	15f70 <__assert_fail@plt+0x4bb4>
   15d2c:	cmp	r1, #2
   15d30:	bne	15e64 <__assert_fail@plt+0x4aa8>
   15d34:	lsr	r4, r3, #1
   15d38:	and	r3, r3, #1
   15d3c:	adds	r3, r3, r4
   15d40:	moveq	r1, #0
   15d44:	movne	r1, #1
   15d48:	adds	r7, r4, #0
   15d4c:	movne	r7, #1
   15d50:	cmp	r8, r9
   15d54:	movcs	r1, #0
   15d58:	andcc	r1, r1, #1
   15d5c:	cmp	r1, #0
   15d60:	beq	15d90 <__assert_fail@plt+0x49d4>
   15d64:	ldr	r1, [sp, #56]	; 0x38
   15d68:	uxtb	r0, r1
   15d6c:	subs	r3, r3, #1
   15d70:	strb	r0, [r8], #1
   15d74:	moveq	r1, #0
   15d78:	movne	r1, #1
   15d7c:	cmp	r9, r8
   15d80:	movls	r1, #0
   15d84:	andhi	r1, r1, #1
   15d88:	cmp	r1, #0
   15d8c:	bne	15d6c <__assert_fail@plt+0x49b0>
   15d90:	rsb	r3, r8, r9
   15d94:	ldr	r1, [sp]
   15d98:	cmp	r3, r2
   15d9c:	movcc	r2, r3
   15da0:	mov	r0, r8
   15da4:	mov	r3, #0
   15da8:	strb	r3, [r8]
   15dac:	bl	111e8 <mempcpy@plt>
   15db0:	cmp	r9, r0
   15db4:	movls	r7, #0
   15db8:	andhi	r7, r7, #1
   15dbc:	cmp	r7, #0
   15dc0:	beq	15df0 <__assert_fail@plt+0x4a34>
   15dc4:	ldr	r3, [sp, #56]	; 0x38
   15dc8:	uxtb	r1, r3
   15dcc:	subs	r4, r4, #1
   15dd0:	strb	r1, [r0], #1
   15dd4:	moveq	r2, #0
   15dd8:	movne	r2, #1
   15ddc:	cmp	r9, r0
   15de0:	movls	r2, #0
   15de4:	andhi	r2, r2, #1
   15de8:	cmp	r2, #0
   15dec:	bne	15dcc <__assert_fail@plt+0x4a10>
   15df0:	mov	r2, #0
   15df4:	strb	r2, [r0]
   15df8:	mov	r0, r5
   15dfc:	bl	110e0 <free@plt>
   15e00:	mov	r0, fp
   15e04:	bl	110e0 <free@plt>
   15e08:	mov	r0, r6
   15e0c:	add	sp, sp, #12
   15e10:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15e14:	ldr	r1, [sp, #52]	; 0x34
   15e18:	tst	r1, #1
   15e1c:	bne	15e68 <__assert_fail@plt+0x4aac>
   15e20:	mov	r5, #0
   15e24:	mvn	r6, #0
   15e28:	mov	fp, r5
   15e2c:	b	15df8 <__assert_fail@plt+0x4a3c>
   15e30:	mov	r5, #0
   15e34:	b	15ce8 <__assert_fail@plt+0x492c>
   15e38:	ldr	r2, [r6]
   15e3c:	cmp	r2, sl
   15e40:	addcc	r4, r7, #1
   15e44:	bcc	15f34 <__assert_fail@plt+0x4b78>
   15e48:	ldr	fp, [sp, #4]
   15e4c:	cmp	r2, sl
   15e50:	rsbhi	r3, sl, r2
   15e54:	movls	r2, r7
   15e58:	movls	r3, #0
   15e5c:	movhi	r2, r7
   15e60:	b	15d04 <__assert_fail@plt+0x4948>
   15e64:	bl	11398 <abort@plt>
   15e68:	mov	r5, #0
   15e6c:	mov	sl, r7
   15e70:	mov	fp, r5
   15e74:	b	15cf0 <__assert_fail@plt+0x4934>
   15e78:	add	sl, r5, sl
   15e7c:	mov	r3, #0
   15e80:	str	r3, [sl, #-4]
   15e84:	ldr	r0, [r5]
   15e88:	cmp	r0, r3
   15e8c:	beq	15fd8 <__assert_fail@plt+0x4c1c>
   15e90:	add	fp, r5, #4
   15e94:	movw	sl, #65533	; 0xfffd
   15e98:	str	r3, [sp, #4]
   15e9c:	bl	11164 <iswprint@plt>
   15ea0:	cmp	r0, #0
   15ea4:	streq	sl, [fp, #-4]
   15ea8:	ldr	r0, [fp], #4
   15eac:	moveq	r1, #1
   15eb0:	streq	r1, [sp, #4]
   15eb4:	cmp	r0, #0
   15eb8:	bne	15e9c <__assert_fail@plt+0x4ae0>
   15ebc:	ldr	r0, [r5]
   15ec0:	cmp	r0, #0
   15ec4:	beq	15f10 <__assert_fail@plt+0x4b54>
   15ec8:	mov	sl, r5
   15ecc:	mov	fp, #0
   15ed0:	b	15f04 <__assert_fail@plt+0x4b48>
   15ed4:	movw	r3, #65535	; 0xffff
   15ed8:	movt	r3, #32767	; 0x7fff
   15edc:	rsb	r3, r0, r3
   15ee0:	cmp	r3, fp
   15ee4:	blt	15fd0 <__assert_fail@plt+0x4c14>
   15ee8:	sub	r4, r4, #1
   15eec:	add	fp, fp, r0
   15ef0:	cmn	r4, #1
   15ef4:	beq	15fc8 <__assert_fail@plt+0x4c0c>
   15ef8:	ldr	r0, [sl, #4]!
   15efc:	cmp	r0, #0
   15f00:	beq	15fc8 <__assert_fail@plt+0x4c0c>
   15f04:	bl	110d4 <wcwidth@plt>
   15f08:	cmn	r0, #1
   15f0c:	bne	15ed4 <__assert_fail@plt+0x4b18>
   15f10:	mov	sl, r0
   15f14:	ldr	r3, [sp, #4]
   15f18:	cmp	r3, #0
   15f1c:	beq	15e38 <__assert_fail@plt+0x4a7c>
   15f20:	mov	r0, #0
   15f24:	mov	r1, r5
   15f28:	mov	r2, r0
   15f2c:	bl	111ac <wcstombs@plt>
   15f30:	add	r4, r0, #1
   15f34:	mov	r0, r4
   15f38:	bl	111c4 <malloc@plt>
   15f3c:	subs	fp, r0, #0
   15f40:	beq	15f9c <__assert_fail@plt+0x4be0>
   15f44:	ldr	r1, [r6]
   15f48:	mov	r0, r5
   15f4c:	bl	153c8 <__assert_fail@plt+0x400c>
   15f50:	mov	r1, r5
   15f54:	mov	r2, r4
   15f58:	mov	sl, r0
   15f5c:	mov	r0, fp
   15f60:	bl	111ac <wcstombs@plt>
   15f64:	str	fp, [sp]
   15f68:	mov	r7, r0
   15f6c:	b	15cf0 <__assert_fail@plt+0x4934>
   15f70:	adds	r7, r3, #0
   15f74:	mov	r4, r3
   15f78:	movne	r7, #1
   15f7c:	b	15d90 <__assert_fail@plt+0x49d4>
   15f80:	mov	r7, #0
   15f84:	cmp	r3, r7
   15f88:	cmpne	r8, r9
   15f8c:	mov	r4, r7
   15f90:	movcs	r1, #0
   15f94:	movcc	r1, #1
   15f98:	b	15d5c <__assert_fail@plt+0x49a0>
   15f9c:	ldr	r1, [sp, #52]	; 0x34
   15fa0:	tst	r1, #1
   15fa4:	mvneq	r6, #0
   15fa8:	beq	15df8 <__assert_fail@plt+0x4a3c>
   15fac:	b	15cf0 <__assert_fail@plt+0x4934>
   15fb0:	ldr	r3, [sp, #52]	; 0x34
   15fb4:	tst	r3, #1
   15fb8:	beq	15e20 <__assert_fail@plt+0x4a64>
   15fbc:	mov	sl, r7
   15fc0:	mov	fp, r5
   15fc4:	b	15cf0 <__assert_fail@plt+0x4934>
   15fc8:	mov	sl, fp
   15fcc:	b	15f14 <__assert_fail@plt+0x4b58>
   15fd0:	mvn	sl, #0
   15fd4:	b	15f14 <__assert_fail@plt+0x4b58>
   15fd8:	str	r0, [sp, #4]
   15fdc:	b	15ebc <__assert_fail@plt+0x4b00>
   15fe0:	push	{r4, lr}
   15fe4:	sub	sp, sp, #16
   15fe8:	mov	r4, #32
   15fec:	ldr	lr, [sp, #24]
   15ff0:	ldr	ip, [sp, #28]
   15ff4:	str	r4, [sp, #8]
   15ff8:	str	lr, [sp]
   15ffc:	str	ip, [sp, #4]
   16000:	bl	15c74 <__assert_fail@plt+0x48b8>
   16004:	add	sp, sp, #16
   16008:	pop	{r4, pc}
   1600c:	subs	r2, r1, #1
   16010:	bxeq	lr
   16014:	bcc	161ec <__assert_fail@plt+0x4e30>
   16018:	cmp	r0, r1
   1601c:	bls	161d0 <__assert_fail@plt+0x4e14>
   16020:	tst	r1, r2
   16024:	beq	161dc <__assert_fail@plt+0x4e20>
   16028:	clz	r3, r0
   1602c:	clz	r2, r1
   16030:	sub	r3, r2, r3
   16034:	rsbs	r3, r3, #31
   16038:	addne	r3, r3, r3, lsl #1
   1603c:	mov	r2, #0
   16040:	addne	pc, pc, r3, lsl #2
   16044:	nop	{0}
   16048:	cmp	r0, r1, lsl #31
   1604c:	adc	r2, r2, r2
   16050:	subcs	r0, r0, r1, lsl #31
   16054:	cmp	r0, r1, lsl #30
   16058:	adc	r2, r2, r2
   1605c:	subcs	r0, r0, r1, lsl #30
   16060:	cmp	r0, r1, lsl #29
   16064:	adc	r2, r2, r2
   16068:	subcs	r0, r0, r1, lsl #29
   1606c:	cmp	r0, r1, lsl #28
   16070:	adc	r2, r2, r2
   16074:	subcs	r0, r0, r1, lsl #28
   16078:	cmp	r0, r1, lsl #27
   1607c:	adc	r2, r2, r2
   16080:	subcs	r0, r0, r1, lsl #27
   16084:	cmp	r0, r1, lsl #26
   16088:	adc	r2, r2, r2
   1608c:	subcs	r0, r0, r1, lsl #26
   16090:	cmp	r0, r1, lsl #25
   16094:	adc	r2, r2, r2
   16098:	subcs	r0, r0, r1, lsl #25
   1609c:	cmp	r0, r1, lsl #24
   160a0:	adc	r2, r2, r2
   160a4:	subcs	r0, r0, r1, lsl #24
   160a8:	cmp	r0, r1, lsl #23
   160ac:	adc	r2, r2, r2
   160b0:	subcs	r0, r0, r1, lsl #23
   160b4:	cmp	r0, r1, lsl #22
   160b8:	adc	r2, r2, r2
   160bc:	subcs	r0, r0, r1, lsl #22
   160c0:	cmp	r0, r1, lsl #21
   160c4:	adc	r2, r2, r2
   160c8:	subcs	r0, r0, r1, lsl #21
   160cc:	cmp	r0, r1, lsl #20
   160d0:	adc	r2, r2, r2
   160d4:	subcs	r0, r0, r1, lsl #20
   160d8:	cmp	r0, r1, lsl #19
   160dc:	adc	r2, r2, r2
   160e0:	subcs	r0, r0, r1, lsl #19
   160e4:	cmp	r0, r1, lsl #18
   160e8:	adc	r2, r2, r2
   160ec:	subcs	r0, r0, r1, lsl #18
   160f0:	cmp	r0, r1, lsl #17
   160f4:	adc	r2, r2, r2
   160f8:	subcs	r0, r0, r1, lsl #17
   160fc:	cmp	r0, r1, lsl #16
   16100:	adc	r2, r2, r2
   16104:	subcs	r0, r0, r1, lsl #16
   16108:	cmp	r0, r1, lsl #15
   1610c:	adc	r2, r2, r2
   16110:	subcs	r0, r0, r1, lsl #15
   16114:	cmp	r0, r1, lsl #14
   16118:	adc	r2, r2, r2
   1611c:	subcs	r0, r0, r1, lsl #14
   16120:	cmp	r0, r1, lsl #13
   16124:	adc	r2, r2, r2
   16128:	subcs	r0, r0, r1, lsl #13
   1612c:	cmp	r0, r1, lsl #12
   16130:	adc	r2, r2, r2
   16134:	subcs	r0, r0, r1, lsl #12
   16138:	cmp	r0, r1, lsl #11
   1613c:	adc	r2, r2, r2
   16140:	subcs	r0, r0, r1, lsl #11
   16144:	cmp	r0, r1, lsl #10
   16148:	adc	r2, r2, r2
   1614c:	subcs	r0, r0, r1, lsl #10
   16150:	cmp	r0, r1, lsl #9
   16154:	adc	r2, r2, r2
   16158:	subcs	r0, r0, r1, lsl #9
   1615c:	cmp	r0, r1, lsl #8
   16160:	adc	r2, r2, r2
   16164:	subcs	r0, r0, r1, lsl #8
   16168:	cmp	r0, r1, lsl #7
   1616c:	adc	r2, r2, r2
   16170:	subcs	r0, r0, r1, lsl #7
   16174:	cmp	r0, r1, lsl #6
   16178:	adc	r2, r2, r2
   1617c:	subcs	r0, r0, r1, lsl #6
   16180:	cmp	r0, r1, lsl #5
   16184:	adc	r2, r2, r2
   16188:	subcs	r0, r0, r1, lsl #5
   1618c:	cmp	r0, r1, lsl #4
   16190:	adc	r2, r2, r2
   16194:	subcs	r0, r0, r1, lsl #4
   16198:	cmp	r0, r1, lsl #3
   1619c:	adc	r2, r2, r2
   161a0:	subcs	r0, r0, r1, lsl #3
   161a4:	cmp	r0, r1, lsl #2
   161a8:	adc	r2, r2, r2
   161ac:	subcs	r0, r0, r1, lsl #2
   161b0:	cmp	r0, r1, lsl #1
   161b4:	adc	r2, r2, r2
   161b8:	subcs	r0, r0, r1, lsl #1
   161bc:	cmp	r0, r1
   161c0:	adc	r2, r2, r2
   161c4:	subcs	r0, r0, r1
   161c8:	mov	r0, r2
   161cc:	bx	lr
   161d0:	moveq	r0, #1
   161d4:	movne	r0, #0
   161d8:	bx	lr
   161dc:	clz	r2, r1
   161e0:	rsb	r2, r2, #31
   161e4:	lsr	r0, r0, r2
   161e8:	bx	lr
   161ec:	cmp	r0, #0
   161f0:	mvnne	r0, #0
   161f4:	b	16254 <__assert_fail@plt+0x4e98>
   161f8:	cmp	r1, #0
   161fc:	beq	161ec <__assert_fail@plt+0x4e30>
   16200:	push	{r0, r1, lr}
   16204:	bl	1600c <__assert_fail@plt+0x4c50>
   16208:	pop	{r1, r2, lr}
   1620c:	mul	r3, r2, r0
   16210:	sub	r1, r1, r3
   16214:	bx	lr
   16218:	cmp	r3, #0
   1621c:	cmpeq	r2, #0
   16220:	bne	16238 <__assert_fail@plt+0x4e7c>
   16224:	cmp	r1, #0
   16228:	cmpeq	r0, #0
   1622c:	mvnne	r1, #0
   16230:	mvnne	r0, #0
   16234:	b	16254 <__assert_fail@plt+0x4e98>
   16238:	sub	sp, sp, #8
   1623c:	push	{sp, lr}
   16240:	bl	162a0 <__assert_fail@plt+0x4ee4>
   16244:	ldr	lr, [sp, #4]
   16248:	add	sp, sp, #8
   1624c:	pop	{r2, r3}
   16250:	bx	lr
   16254:	push	{r1, lr}
   16258:	mov	r0, #8
   1625c:	bl	110a4 <raise@plt>
   16260:	pop	{r1, pc}
   16264:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16268:	mov	r8, r2
   1626c:	mov	r6, r0
   16270:	mov	r7, r1
   16274:	mov	sl, r3
   16278:	ldr	r9, [sp, #32]
   1627c:	bl	162dc <__assert_fail@plt+0x4f20>
   16280:	umull	r4, r5, r8, r0
   16284:	mul	r8, r8, r1
   16288:	mla	r2, r0, sl, r8
   1628c:	add	r5, r2, r5
   16290:	subs	r4, r6, r4
   16294:	sbc	r5, r7, r5
   16298:	strd	r4, [r9]
   1629c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   162a0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   162a4:	mov	r8, r2
   162a8:	mov	r6, r0
   162ac:	mov	r7, r1
   162b0:	mov	r5, r3
   162b4:	ldr	r9, [sp, #32]
   162b8:	bl	16768 <__assert_fail@plt+0x53ac>
   162bc:	mul	r3, r0, r5
   162c0:	umull	r4, r5, r0, r8
   162c4:	mla	r8, r8, r1, r3
   162c8:	add	r5, r8, r5
   162cc:	subs	r4, r6, r4
   162d0:	sbc	r5, r7, r5
   162d4:	strd	r4, [r9]
   162d8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   162dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162e0:	rsbs	r4, r0, #0
   162e4:	rsc	r5, r1, #0
   162e8:	cmp	r1, #0
   162ec:	mvn	r6, #0
   162f0:	sub	sp, sp, #12
   162f4:	movge	r4, r0
   162f8:	movge	r5, r1
   162fc:	movge	r6, #0
   16300:	cmp	r3, #0
   16304:	blt	1653c <__assert_fail@plt+0x5180>
   16308:	cmp	r3, #0
   1630c:	mov	sl, r4
   16310:	mov	ip, r5
   16314:	mov	r0, r2
   16318:	mov	r1, r3
   1631c:	mov	r8, r2
   16320:	mov	r7, r4
   16324:	mov	r9, r5
   16328:	bne	16420 <__assert_fail@plt+0x5064>
   1632c:	cmp	r2, r5
   16330:	bls	1645c <__assert_fail@plt+0x50a0>
   16334:	clz	r3, r2
   16338:	cmp	r3, #0
   1633c:	rsbne	r2, r3, #32
   16340:	lslne	r8, r0, r3
   16344:	lsrne	r2, r4, r2
   16348:	lslne	r7, r4, r3
   1634c:	orrne	r9, r2, r5, lsl r3
   16350:	lsr	r4, r8, #16
   16354:	uxth	sl, r8
   16358:	mov	r1, r4
   1635c:	mov	r0, r9
   16360:	bl	1600c <__assert_fail@plt+0x4c50>
   16364:	mov	r1, r4
   16368:	mov	fp, r0
   1636c:	mov	r0, r9
   16370:	bl	161f8 <__assert_fail@plt+0x4e3c>
   16374:	mul	r0, sl, fp
   16378:	lsr	r2, r7, #16
   1637c:	orr	r1, r2, r1, lsl #16
   16380:	cmp	r0, r1
   16384:	bls	163a8 <__assert_fail@plt+0x4fec>
   16388:	adds	r1, r1, r8
   1638c:	sub	r3, fp, #1
   16390:	bcs	163a4 <__assert_fail@plt+0x4fe8>
   16394:	cmp	r0, r1
   16398:	subhi	fp, fp, #2
   1639c:	addhi	r1, r1, r8
   163a0:	bhi	163a8 <__assert_fail@plt+0x4fec>
   163a4:	mov	fp, r3
   163a8:	rsb	r9, r0, r1
   163ac:	mov	r1, r4
   163b0:	uxth	r7, r7
   163b4:	mov	r0, r9
   163b8:	bl	1600c <__assert_fail@plt+0x4c50>
   163bc:	mov	r1, r4
   163c0:	mov	r5, r0
   163c4:	mov	r0, r9
   163c8:	bl	161f8 <__assert_fail@plt+0x4e3c>
   163cc:	mul	sl, sl, r5
   163d0:	orr	r1, r7, r1, lsl #16
   163d4:	cmp	sl, r1
   163d8:	bls	163f8 <__assert_fail@plt+0x503c>
   163dc:	adds	r8, r1, r8
   163e0:	sub	r3, r5, #1
   163e4:	bcs	163f4 <__assert_fail@plt+0x5038>
   163e8:	cmp	sl, r8
   163ec:	subhi	r5, r5, #2
   163f0:	bhi	163f8 <__assert_fail@plt+0x503c>
   163f4:	mov	r5, r3
   163f8:	orr	r3, r5, fp, lsl #16
   163fc:	mov	r4, #0
   16400:	cmp	r6, #0
   16404:	mov	r0, r3
   16408:	mov	r1, r4
   1640c:	beq	16418 <__assert_fail@plt+0x505c>
   16410:	rsbs	r0, r0, #0
   16414:	rsc	r1, r1, #0
   16418:	add	sp, sp, #12
   1641c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16420:	cmp	r3, r5
   16424:	movhi	r4, #0
   16428:	movhi	r3, r4
   1642c:	bhi	16400 <__assert_fail@plt+0x5044>
   16430:	clz	r5, r1
   16434:	cmp	r5, #0
   16438:	bne	16628 <__assert_fail@plt+0x526c>
   1643c:	cmp	r1, ip
   16440:	cmpcs	r2, sl
   16444:	movhi	r4, #0
   16448:	movls	r4, #1
   1644c:	movls	r3, #1
   16450:	movls	r4, r5
   16454:	movhi	r3, r4
   16458:	b	16400 <__assert_fail@plt+0x5044>
   1645c:	cmp	r2, #0
   16460:	bne	16474 <__assert_fail@plt+0x50b8>
   16464:	mov	r1, r2
   16468:	mov	r0, #1
   1646c:	bl	1600c <__assert_fail@plt+0x4c50>
   16470:	mov	r8, r0
   16474:	clz	r3, r8
   16478:	cmp	r3, #0
   1647c:	bne	1654c <__assert_fail@plt+0x5190>
   16480:	rsb	r9, r8, r9
   16484:	lsr	r5, r8, #16
   16488:	uxth	sl, r8
   1648c:	mov	r4, #1
   16490:	mov	r1, r5
   16494:	mov	r0, r9
   16498:	bl	1600c <__assert_fail@plt+0x4c50>
   1649c:	mov	r1, r5
   164a0:	mov	fp, r0
   164a4:	mov	r0, r9
   164a8:	bl	161f8 <__assert_fail@plt+0x4e3c>
   164ac:	mul	r0, sl, fp
   164b0:	lsr	r2, r7, #16
   164b4:	orr	r1, r2, r1, lsl #16
   164b8:	cmp	r0, r1
   164bc:	bls	164dc <__assert_fail@plt+0x5120>
   164c0:	adds	r1, r1, r8
   164c4:	sub	r3, fp, #1
   164c8:	bcs	16748 <__assert_fail@plt+0x538c>
   164cc:	cmp	r0, r1
   164d0:	subhi	fp, fp, #2
   164d4:	addhi	r1, r1, r8
   164d8:	bls	16748 <__assert_fail@plt+0x538c>
   164dc:	rsb	r2, r0, r1
   164e0:	mov	r1, r5
   164e4:	str	r2, [sp]
   164e8:	uxth	r7, r7
   164ec:	mov	r0, r2
   164f0:	bl	1600c <__assert_fail@plt+0x4c50>
   164f4:	ldr	r2, [sp]
   164f8:	mov	r1, r5
   164fc:	mov	r9, r0
   16500:	mov	r0, r2
   16504:	bl	161f8 <__assert_fail@plt+0x4e3c>
   16508:	mul	sl, sl, r9
   1650c:	orr	r1, r7, r1, lsl #16
   16510:	cmp	sl, r1
   16514:	bls	16534 <__assert_fail@plt+0x5178>
   16518:	adds	r8, r1, r8
   1651c:	sub	r3, r9, #1
   16520:	bcs	16530 <__assert_fail@plt+0x5174>
   16524:	cmp	sl, r8
   16528:	subhi	r9, r9, #2
   1652c:	bhi	16534 <__assert_fail@plt+0x5178>
   16530:	mov	r9, r3
   16534:	orr	r3, r9, fp, lsl #16
   16538:	b	16400 <__assert_fail@plt+0x5044>
   1653c:	mvn	r6, r6
   16540:	rsbs	r2, r2, #0
   16544:	rsc	r3, r3, #0
   16548:	b	16308 <__assert_fail@plt+0x4f4c>
   1654c:	lsl	r8, r8, r3
   16550:	rsb	fp, r3, #32
   16554:	lsr	r4, r9, fp
   16558:	lsr	fp, r7, fp
   1655c:	lsr	r5, r8, #16
   16560:	orr	fp, fp, r9, lsl r3
   16564:	mov	r0, r4
   16568:	lsl	r7, r7, r3
   1656c:	mov	r1, r5
   16570:	uxth	sl, r8
   16574:	bl	1600c <__assert_fail@plt+0x4c50>
   16578:	mov	r1, r5
   1657c:	mov	r3, r0
   16580:	mov	r0, r4
   16584:	str	r3, [sp]
   16588:	bl	161f8 <__assert_fail@plt+0x4e3c>
   1658c:	ldr	r3, [sp]
   16590:	lsr	r2, fp, #16
   16594:	mul	r0, sl, r3
   16598:	orr	r1, r2, r1, lsl #16
   1659c:	cmp	r0, r1
   165a0:	bls	165c0 <__assert_fail@plt+0x5204>
   165a4:	adds	r1, r1, r8
   165a8:	sub	r2, r3, #1
   165ac:	bcs	16760 <__assert_fail@plt+0x53a4>
   165b0:	cmp	r0, r1
   165b4:	subhi	r3, r3, #2
   165b8:	addhi	r1, r1, r8
   165bc:	bls	16760 <__assert_fail@plt+0x53a4>
   165c0:	rsb	r9, r0, r1
   165c4:	mov	r1, r5
   165c8:	str	r3, [sp]
   165cc:	uxth	fp, fp
   165d0:	mov	r0, r9
   165d4:	bl	1600c <__assert_fail@plt+0x4c50>
   165d8:	mov	r1, r5
   165dc:	mov	r4, r0
   165e0:	mov	r0, r9
   165e4:	bl	161f8 <__assert_fail@plt+0x4e3c>
   165e8:	mul	r9, sl, r4
   165ec:	ldr	r3, [sp]
   165f0:	orr	r1, fp, r1, lsl #16
   165f4:	cmp	r9, r1
   165f8:	bls	1661c <__assert_fail@plt+0x5260>
   165fc:	adds	r1, r1, r8
   16600:	sub	r2, r4, #1
   16604:	bcs	16618 <__assert_fail@plt+0x525c>
   16608:	cmp	r9, r1
   1660c:	subhi	r4, r4, #2
   16610:	addhi	r1, r1, r8
   16614:	bhi	1661c <__assert_fail@plt+0x5260>
   16618:	mov	r4, r2
   1661c:	rsb	r9, r9, r1
   16620:	orr	r4, r4, r3, lsl #16
   16624:	b	16490 <__assert_fail@plt+0x50d4>
   16628:	rsb	sl, r5, #32
   1662c:	lsl	r3, r2, r5
   16630:	lsr	r0, r2, sl
   16634:	lsr	r2, ip, sl
   16638:	orr	r4, r0, r1, lsl r5
   1663c:	lsr	sl, r7, sl
   16640:	mov	r0, r2
   16644:	orr	sl, sl, ip, lsl r5
   16648:	lsr	r9, r4, #16
   1664c:	str	r3, [sp, #4]
   16650:	str	r2, [sp]
   16654:	uxth	fp, r4
   16658:	mov	r1, r9
   1665c:	bl	1600c <__assert_fail@plt+0x4c50>
   16660:	ldr	r2, [sp]
   16664:	mov	r1, r9
   16668:	mov	r8, r0
   1666c:	mov	r0, r2
   16670:	bl	161f8 <__assert_fail@plt+0x4e3c>
   16674:	mul	r0, fp, r8
   16678:	lsr	r2, sl, #16
   1667c:	orr	r1, r2, r1, lsl #16
   16680:	cmp	r0, r1
   16684:	bls	166a4 <__assert_fail@plt+0x52e8>
   16688:	adds	r1, r1, r4
   1668c:	sub	r2, r8, #1
   16690:	bcs	16758 <__assert_fail@plt+0x539c>
   16694:	cmp	r0, r1
   16698:	subhi	r8, r8, #2
   1669c:	addhi	r1, r1, r4
   166a0:	bls	16758 <__assert_fail@plt+0x539c>
   166a4:	rsb	ip, r0, r1
   166a8:	mov	r1, r9
   166ac:	str	ip, [sp]
   166b0:	mov	r0, ip
   166b4:	bl	1600c <__assert_fail@plt+0x4c50>
   166b8:	ldr	ip, [sp]
   166bc:	mov	r1, r9
   166c0:	mov	r2, r0
   166c4:	mov	r0, ip
   166c8:	str	r2, [sp]
   166cc:	bl	161f8 <__assert_fail@plt+0x4e3c>
   166d0:	ldr	r2, [sp]
   166d4:	uxth	ip, sl
   166d8:	mul	fp, fp, r2
   166dc:	orr	ip, ip, r1, lsl #16
   166e0:	cmp	fp, ip
   166e4:	bls	16704 <__assert_fail@plt+0x5348>
   166e8:	adds	ip, ip, r4
   166ec:	sub	r1, r2, #1
   166f0:	bcs	16750 <__assert_fail@plt+0x5394>
   166f4:	cmp	fp, ip
   166f8:	subhi	r2, r2, #2
   166fc:	addhi	ip, ip, r4
   16700:	bls	16750 <__assert_fail@plt+0x5394>
   16704:	ldr	r0, [sp, #4]
   16708:	orr	r1, r2, r8, lsl #16
   1670c:	rsb	fp, fp, ip
   16710:	umull	r2, r3, r1, r0
   16714:	cmp	fp, r3
   16718:	bcc	1673c <__assert_fail@plt+0x5380>
   1671c:	movne	r4, #0
   16720:	moveq	r4, #1
   16724:	cmp	r2, r7, lsl r5
   16728:	movls	r4, #0
   1672c:	andhi	r4, r4, #1
   16730:	cmp	r4, #0
   16734:	moveq	r3, r1
   16738:	beq	16400 <__assert_fail@plt+0x5044>
   1673c:	sub	r3, r1, #1
   16740:	mov	r4, #0
   16744:	b	16400 <__assert_fail@plt+0x5044>
   16748:	mov	fp, r3
   1674c:	b	164dc <__assert_fail@plt+0x5120>
   16750:	mov	r2, r1
   16754:	b	16704 <__assert_fail@plt+0x5348>
   16758:	mov	r8, r2
   1675c:	b	166a4 <__assert_fail@plt+0x52e8>
   16760:	mov	r3, r2
   16764:	b	165c0 <__assert_fail@plt+0x5204>
   16768:	cmp	r3, #0
   1676c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16770:	mov	r6, r0
   16774:	sub	sp, sp, #12
   16778:	mov	r5, r1
   1677c:	mov	r7, r0
   16780:	mov	r4, r2
   16784:	mov	r8, r1
   16788:	bne	16868 <__assert_fail@plt+0x54ac>
   1678c:	cmp	r2, r1
   16790:	bls	168a4 <__assert_fail@plt+0x54e8>
   16794:	clz	r3, r2
   16798:	cmp	r3, #0
   1679c:	rsbne	r8, r3, #32
   167a0:	lslne	r4, r2, r3
   167a4:	lsrne	r8, r0, r8
   167a8:	lslne	r7, r0, r3
   167ac:	orrne	r8, r8, r1, lsl r3
   167b0:	lsr	r5, r4, #16
   167b4:	uxth	sl, r4
   167b8:	mov	r1, r5
   167bc:	mov	r0, r8
   167c0:	bl	1600c <__assert_fail@plt+0x4c50>
   167c4:	mov	r1, r5
   167c8:	mov	r9, r0
   167cc:	mov	r0, r8
   167d0:	bl	161f8 <__assert_fail@plt+0x4e3c>
   167d4:	mul	r0, sl, r9
   167d8:	lsr	r3, r7, #16
   167dc:	orr	r1, r3, r1, lsl #16
   167e0:	cmp	r0, r1
   167e4:	bls	16808 <__assert_fail@plt+0x544c>
   167e8:	adds	r1, r1, r4
   167ec:	sub	r2, r9, #1
   167f0:	bcs	16804 <__assert_fail@plt+0x5448>
   167f4:	cmp	r0, r1
   167f8:	subhi	r9, r9, #2
   167fc:	addhi	r1, r1, r4
   16800:	bhi	16808 <__assert_fail@plt+0x544c>
   16804:	mov	r9, r2
   16808:	rsb	r8, r0, r1
   1680c:	mov	r1, r5
   16810:	uxth	r7, r7
   16814:	mov	r0, r8
   16818:	bl	1600c <__assert_fail@plt+0x4c50>
   1681c:	mov	r1, r5
   16820:	mov	r6, r0
   16824:	mov	r0, r8
   16828:	bl	161f8 <__assert_fail@plt+0x4e3c>
   1682c:	mul	sl, sl, r6
   16830:	orr	r1, r7, r1, lsl #16
   16834:	cmp	sl, r1
   16838:	bls	16854 <__assert_fail@plt+0x5498>
   1683c:	adds	r4, r1, r4
   16840:	sub	r3, r6, #1
   16844:	bcs	16b50 <__assert_fail@plt+0x5794>
   16848:	cmp	sl, r4
   1684c:	subhi	r6, r6, #2
   16850:	bls	16b50 <__assert_fail@plt+0x5794>
   16854:	orr	r0, r6, r9, lsl #16
   16858:	mov	r6, #0
   1685c:	mov	r1, r6
   16860:	add	sp, sp, #12
   16864:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16868:	cmp	r3, r1
   1686c:	movhi	r6, #0
   16870:	movhi	r0, r6
   16874:	bhi	1685c <__assert_fail@plt+0x54a0>
   16878:	clz	r7, r3
   1687c:	cmp	r7, #0
   16880:	bne	16980 <__assert_fail@plt+0x55c4>
   16884:	cmp	r3, r1
   16888:	cmpcs	r2, r6
   1688c:	movhi	r6, #0
   16890:	movls	r6, #1
   16894:	movls	r0, #1
   16898:	movls	r6, r7
   1689c:	movhi	r0, r6
   168a0:	b	1685c <__assert_fail@plt+0x54a0>
   168a4:	cmp	r2, #0
   168a8:	bne	168bc <__assert_fail@plt+0x5500>
   168ac:	mov	r1, r2
   168b0:	mov	r0, #1
   168b4:	bl	1600c <__assert_fail@plt+0x4c50>
   168b8:	mov	r4, r0
   168bc:	clz	r3, r4
   168c0:	cmp	r3, #0
   168c4:	bne	16a7c <__assert_fail@plt+0x56c0>
   168c8:	rsb	r5, r4, r5
   168cc:	lsr	r8, r4, #16
   168d0:	uxth	sl, r4
   168d4:	mov	r6, #1
   168d8:	mov	r1, r8
   168dc:	mov	r0, r5
   168e0:	bl	1600c <__assert_fail@plt+0x4c50>
   168e4:	mov	r1, r8
   168e8:	mov	r9, r0
   168ec:	mov	r0, r5
   168f0:	bl	161f8 <__assert_fail@plt+0x4e3c>
   168f4:	mul	r0, sl, r9
   168f8:	lsr	r3, r7, #16
   168fc:	orr	r1, r3, r1, lsl #16
   16900:	cmp	r0, r1
   16904:	bls	16924 <__assert_fail@plt+0x5568>
   16908:	adds	r1, r1, r4
   1690c:	sub	r2, r9, #1
   16910:	bcs	16b58 <__assert_fail@plt+0x579c>
   16914:	cmp	r0, r1
   16918:	subhi	r9, r9, #2
   1691c:	addhi	r1, r1, r4
   16920:	bls	16b58 <__assert_fail@plt+0x579c>
   16924:	rsb	fp, r0, r1
   16928:	mov	r1, r8
   1692c:	uxth	r7, r7
   16930:	mov	r0, fp
   16934:	bl	1600c <__assert_fail@plt+0x4c50>
   16938:	mov	r1, r8
   1693c:	mov	r5, r0
   16940:	mov	r0, fp
   16944:	bl	161f8 <__assert_fail@plt+0x4e3c>
   16948:	mul	sl, sl, r5
   1694c:	orr	r1, r7, r1, lsl #16
   16950:	cmp	sl, r1
   16954:	bls	16970 <__assert_fail@plt+0x55b4>
   16958:	adds	r4, r1, r4
   1695c:	sub	r3, r5, #1
   16960:	bcs	16b60 <__assert_fail@plt+0x57a4>
   16964:	cmp	sl, r4
   16968:	subhi	r5, r5, #2
   1696c:	bls	16b60 <__assert_fail@plt+0x57a4>
   16970:	orr	r0, r5, r9, lsl #16
   16974:	mov	r1, r6
   16978:	add	sp, sp, #12
   1697c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16980:	rsb	r1, r7, #32
   16984:	lsl	r0, r2, r7
   16988:	lsr	r2, r2, r1
   1698c:	lsr	fp, r5, r1
   16990:	orr	r8, r2, r3, lsl r7
   16994:	lsr	r1, r6, r1
   16998:	str	r0, [sp, #4]
   1699c:	orr	r5, r1, r5, lsl r7
   169a0:	lsr	r9, r8, #16
   169a4:	mov	r0, fp
   169a8:	uxth	sl, r8
   169ac:	mov	r1, r9
   169b0:	bl	1600c <__assert_fail@plt+0x4c50>
   169b4:	mov	r1, r9
   169b8:	mov	r4, r0
   169bc:	mov	r0, fp
   169c0:	bl	161f8 <__assert_fail@plt+0x4e3c>
   169c4:	mul	r0, sl, r4
   169c8:	lsr	ip, r5, #16
   169cc:	orr	r1, ip, r1, lsl #16
   169d0:	cmp	r0, r1
   169d4:	bls	169e8 <__assert_fail@plt+0x562c>
   169d8:	adds	r1, r1, r8
   169dc:	sub	r2, r4, #1
   169e0:	bcc	16b7c <__assert_fail@plt+0x57c0>
   169e4:	mov	r4, r2
   169e8:	rsb	ip, r0, r1
   169ec:	mov	r1, r9
   169f0:	str	ip, [sp]
   169f4:	uxth	r5, r5
   169f8:	mov	r0, ip
   169fc:	bl	1600c <__assert_fail@plt+0x4c50>
   16a00:	ldr	ip, [sp]
   16a04:	mov	r1, r9
   16a08:	mov	fp, r0
   16a0c:	mov	r0, ip
   16a10:	bl	161f8 <__assert_fail@plt+0x4e3c>
   16a14:	mul	sl, sl, fp
   16a18:	orr	r1, r5, r1, lsl #16
   16a1c:	cmp	sl, r1
   16a20:	bls	16a34 <__assert_fail@plt+0x5678>
   16a24:	adds	r1, r1, r8
   16a28:	sub	r2, fp, #1
   16a2c:	bcc	16b68 <__assert_fail@plt+0x57ac>
   16a30:	mov	fp, r2
   16a34:	ldr	r3, [sp, #4]
   16a38:	orr	r0, fp, r4, lsl #16
   16a3c:	rsb	sl, sl, r1
   16a40:	umull	r4, r5, r0, r3
   16a44:	cmp	sl, r5
   16a48:	bcc	16a68 <__assert_fail@plt+0x56ac>
   16a4c:	movne	r3, #0
   16a50:	moveq	r3, #1
   16a54:	cmp	r4, r6, lsl r7
   16a58:	movls	r6, #0
   16a5c:	andhi	r6, r3, #1
   16a60:	cmp	r6, #0
   16a64:	beq	1685c <__assert_fail@plt+0x54a0>
   16a68:	mov	r6, #0
   16a6c:	sub	r0, r0, #1
   16a70:	mov	r1, r6
   16a74:	add	sp, sp, #12
   16a78:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16a7c:	lsl	r4, r4, r3
   16a80:	rsb	r9, r3, #32
   16a84:	lsr	r2, r5, r9
   16a88:	lsr	r9, r6, r9
   16a8c:	lsr	r8, r4, #16
   16a90:	orr	r9, r9, r5, lsl r3
   16a94:	mov	r0, r2
   16a98:	lsl	r7, r6, r3
   16a9c:	mov	r1, r8
   16aa0:	str	r2, [sp]
   16aa4:	bl	1600c <__assert_fail@plt+0x4c50>
   16aa8:	ldr	r2, [sp]
   16aac:	mov	r1, r8
   16ab0:	uxth	sl, r4
   16ab4:	mov	fp, r0
   16ab8:	mov	r0, r2
   16abc:	bl	161f8 <__assert_fail@plt+0x4e3c>
   16ac0:	mul	r0, sl, fp
   16ac4:	lsr	r3, r9, #16
   16ac8:	orr	r1, r3, r1, lsl #16
   16acc:	cmp	r0, r1
   16ad0:	bls	16af0 <__assert_fail@plt+0x5734>
   16ad4:	adds	r1, r1, r4
   16ad8:	sub	r3, fp, #1
   16adc:	bcs	16b90 <__assert_fail@plt+0x57d4>
   16ae0:	cmp	r0, r1
   16ae4:	subhi	fp, fp, #2
   16ae8:	addhi	r1, r1, r4
   16aec:	bls	16b90 <__assert_fail@plt+0x57d4>
   16af0:	rsb	r5, r0, r1
   16af4:	mov	r1, r8
   16af8:	uxth	r9, r9
   16afc:	mov	r0, r5
   16b00:	bl	1600c <__assert_fail@plt+0x4c50>
   16b04:	mov	r1, r8
   16b08:	mov	r6, r0
   16b0c:	mov	r0, r5
   16b10:	bl	161f8 <__assert_fail@plt+0x4e3c>
   16b14:	mul	r5, sl, r6
   16b18:	orr	r1, r9, r1, lsl #16
   16b1c:	cmp	r5, r1
   16b20:	bls	16b44 <__assert_fail@plt+0x5788>
   16b24:	adds	r1, r1, r4
   16b28:	sub	r3, r6, #1
   16b2c:	bcs	16b40 <__assert_fail@plt+0x5784>
   16b30:	cmp	r5, r1
   16b34:	subhi	r6, r6, #2
   16b38:	addhi	r1, r1, r4
   16b3c:	bhi	16b44 <__assert_fail@plt+0x5788>
   16b40:	mov	r6, r3
   16b44:	rsb	r5, r5, r1
   16b48:	orr	r6, r6, fp, lsl #16
   16b4c:	b	168d8 <__assert_fail@plt+0x551c>
   16b50:	mov	r6, r3
   16b54:	b	16854 <__assert_fail@plt+0x5498>
   16b58:	mov	r9, r2
   16b5c:	b	16924 <__assert_fail@plt+0x5568>
   16b60:	mov	r5, r3
   16b64:	b	16970 <__assert_fail@plt+0x55b4>
   16b68:	cmp	sl, r1
   16b6c:	subhi	fp, fp, #2
   16b70:	addhi	r1, r1, r8
   16b74:	bhi	16a34 <__assert_fail@plt+0x5678>
   16b78:	b	16a30 <__assert_fail@plt+0x5674>
   16b7c:	cmp	r0, r1
   16b80:	subhi	r4, r4, #2
   16b84:	addhi	r1, r1, r8
   16b88:	bhi	169e8 <__assert_fail@plt+0x562c>
   16b8c:	b	169e4 <__assert_fail@plt+0x5628>
   16b90:	mov	fp, r3
   16b94:	b	16af0 <__assert_fail@plt+0x5734>
   16b98:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   16b9c:	mov	r7, r0
   16ba0:	ldr	r6, [pc, #76]	; 16bf4 <__assert_fail@plt+0x5838>
   16ba4:	mov	r8, r1
   16ba8:	ldr	r5, [pc, #72]	; 16bf8 <__assert_fail@plt+0x583c>
   16bac:	mov	r9, r2
   16bb0:	add	r6, pc, r6
   16bb4:	bl	11078 <calloc@plt-0x20>
   16bb8:	add	r5, pc, r5
   16bbc:	rsb	r6, r5, r6
   16bc0:	asrs	r6, r6, #2
   16bc4:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   16bc8:	sub	r5, r5, #4
   16bcc:	mov	r4, #0
   16bd0:	add	r4, r4, #1
   16bd4:	ldr	r3, [r5, #4]!
   16bd8:	mov	r0, r7
   16bdc:	mov	r1, r8
   16be0:	mov	r2, r9
   16be4:	blx	r3
   16be8:	cmp	r4, r6
   16bec:	bne	16bd0 <__assert_fail@plt+0x5814>
   16bf0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16bf4:	andeq	r1, r1, r0, lsr r3
   16bf8:	andeq	r1, r1, r4, lsr #6
   16bfc:	bx	lr
   16c00:	ldr	r3, [pc, #28]	; 16c24 <__assert_fail@plt+0x5868>
   16c04:	mov	r1, #0
   16c08:	ldr	r2, [pc, #24]	; 16c28 <__assert_fail@plt+0x586c>
   16c0c:	add	r3, pc, r3
   16c10:	ldr	r3, [r3, r2]
   16c14:	cmp	r3, #0
   16c18:	ldrne	r2, [r3]
   16c1c:	moveq	r2, r3
   16c20:	b	11284 <__cxa_atexit@plt>
   16c24:	andeq	r1, r1, ip, ror #7
   16c28:	andeq	r0, r0, r4, lsr #2

Disassembly of section .fini:

00016c2c <.fini>:
   16c2c:	push	{r3, lr}
   16c30:	pop	{r3, pc}
