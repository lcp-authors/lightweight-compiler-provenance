
centos-preinstalled/dtc:     file format elf32-littlearm


Disassembly of section .init:

00011060 <.init>:
   11060:	push	{r3, lr}
   11064:	bl	11eec <__assert_fail@plt+0xbb4>
   11068:	pop	{r3, pc}

Disassembly of section .plt:

0001106c <strstr@plt-0x14>:
   1106c:	push	{lr}		; (str lr, [sp, #-4]!)
   11070:	ldr	lr, [pc, #4]	; 1107c <strstr@plt-0x4>
   11074:	add	lr, pc, lr
   11078:	ldr	pc, [lr, #8]!
   1107c:	andeq	r2, r2, r4, lsl #31

00011080 <strstr@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #139264	; 0x22000
   11088:	ldr	pc, [ip, #3972]!	; 0xf84

0001108c <raise@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #139264	; 0x22000
   11094:	ldr	pc, [ip, #3964]!	; 0xf7c

00011098 <strcmp@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #139264	; 0x22000
   110a0:	ldr	pc, [ip, #3956]!	; 0xf74

000110a4 <strtol@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #139264	; 0x22000
   110ac:	ldr	pc, [ip, #3948]!	; 0xf6c

000110b0 <printf@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #139264	; 0x22000
   110b8:	ldr	pc, [ip, #3940]!	; 0xf64

000110bc <fopen@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #139264	; 0x22000
   110c4:	ldr	pc, [ip, #3932]!	; 0xf5c

000110c8 <read@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #139264	; 0x22000
   110d0:	ldr	pc, [ip, #3924]!	; 0xf54

000110d4 <memmove@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #139264	; 0x22000
   110dc:	ldr	pc, [ip, #3916]!	; 0xf4c

000110e0 <free@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #139264	; 0x22000
   110e8:	ldr	pc, [ip, #3908]!	; 0xf44

000110ec <ferror@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #139264	; 0x22000
   110f4:	ldr	pc, [ip, #3900]!	; 0xf3c

000110f8 <memcpy@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #139264	; 0x22000
   11100:	ldr	pc, [ip, #3892]!	; 0xf34

00011104 <_IO_getc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #139264	; 0x22000
   1110c:	ldr	pc, [ip, #3884]!	; 0xf2c

00011110 <memcmp@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #139264	; 0x22000
   11118:	ldr	pc, [ip, #3876]!	; 0xf24

0001111c <realloc@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #139264	; 0x22000
   11124:	ldr	pc, [ip, #3868]!	; 0xf1c

00011128 <strcasecmp@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #139264	; 0x22000
   11130:	ldr	pc, [ip, #3860]!	; 0xf14

00011134 <__xstat@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #139264	; 0x22000
   1113c:	ldr	pc, [ip, #3852]!	; 0xf0c

00011140 <fwrite@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #139264	; 0x22000
   11148:	ldr	pc, [ip, #3844]!	; 0xf04

0001114c <strtoll@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #139264	; 0x22000
   11154:	ldr	pc, [ip, #3836]!	; 0xefc

00011158 <fread@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #139264	; 0x22000
   11160:	ldr	pc, [ip, #3828]!	; 0xef4

00011164 <opendir@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #139264	; 0x22000
   1116c:	ldr	pc, [ip, #3820]!	; 0xeec

00011170 <malloc@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #139264	; 0x22000
   11178:	ldr	pc, [ip, #3812]!	; 0xee4

0001117c <__libc_start_main@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #139264	; 0x22000
   11184:	ldr	pc, [ip, #3804]!	; 0xedc

00011188 <strerror@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #139264	; 0x22000
   11190:	ldr	pc, [ip, #3796]!	; 0xed4

00011194 <__gmon_start__@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #139264	; 0x22000
   1119c:	ldr	pc, [ip, #3788]!	; 0xecc

000111a0 <open@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #139264	; 0x22000
   111a8:	ldr	pc, [ip, #3780]!	; 0xec4

000111ac <getopt_long@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #139264	; 0x22000
   111b4:	ldr	pc, [ip, #3772]!	; 0xebc

000111b8 <__ctype_b_loc@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #139264	; 0x22000
   111c0:	ldr	pc, [ip, #3764]!	; 0xeb4

000111c4 <exit@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #139264	; 0x22000
   111cc:	ldr	pc, [ip, #3756]!	; 0xeac

000111d0 <feof@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #139264	; 0x22000
   111d8:	ldr	pc, [ip, #3748]!	; 0xea4

000111dc <strlen@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #139264	; 0x22000
   111e4:	ldr	pc, [ip, #3740]!	; 0xe9c

000111e8 <strchr@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #139264	; 0x22000
   111f0:	ldr	pc, [ip, #3732]!	; 0xe94

000111f4 <fprintf@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #139264	; 0x22000
   111fc:	ldr	pc, [ip, #3724]!	; 0xe8c

00011200 <__errno_location@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #139264	; 0x22000
   11208:	ldr	pc, [ip, #3716]!	; 0xe84

0001120c <snprintf@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #139264	; 0x22000
   11214:	ldr	pc, [ip, #3708]!	; 0xe7c

00011218 <memset@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #139264	; 0x22000
   11220:	ldr	pc, [ip, #3700]!	; 0xe74

00011224 <putchar@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #139264	; 0x22000
   1122c:	ldr	pc, [ip, #3692]!	; 0xe6c

00011230 <strncpy@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #139264	; 0x22000
   11238:	ldr	pc, [ip, #3684]!	; 0xe64

0001123c <strtoull@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #139264	; 0x22000
   11244:	ldr	pc, [ip, #3676]!	; 0xe5c

00011248 <write@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #139264	; 0x22000
   11250:	ldr	pc, [ip, #3668]!	; 0xe54

00011254 <memchr@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #139264	; 0x22000
   1125c:	ldr	pc, [ip, #3660]!	; 0xe4c

00011260 <fclose@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #139264	; 0x22000
   11268:	ldr	pc, [ip, #3652]!	; 0xe44

0001126c <strnlen@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #139264	; 0x22000
   11274:	ldr	pc, [ip, #3644]!	; 0xe3c

00011278 <readdir@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #139264	; 0x22000
   11280:	ldr	pc, [ip, #3636]!	; 0xe34

00011284 <strrchr@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #139264	; 0x22000
   1128c:	ldr	pc, [ip, #3628]!	; 0xe2c

00011290 <vfprintf@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #139264	; 0x22000
   11298:	ldr	pc, [ip, #3620]!	; 0xe24

0001129c <fputc@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #139264	; 0x22000
   112a4:	ldr	pc, [ip, #3612]!	; 0xe1c

000112a8 <clearerr@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #139264	; 0x22000
   112b0:	ldr	pc, [ip, #3604]!	; 0xe14

000112b4 <vsnprintf@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #139264	; 0x22000
   112bc:	ldr	pc, [ip, #3596]!	; 0xe0c

000112c0 <atoi@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #139264	; 0x22000
   112c8:	ldr	pc, [ip, #3588]!	; 0xe04

000112cc <qsort@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #139264	; 0x22000
   112d4:	ldr	pc, [ip, #3580]!	; 0xdfc

000112d8 <__lxstat@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #139264	; 0x22000
   112e0:	ldr	pc, [ip, #3572]!	; 0xdf4

000112e4 <fseek@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #139264	; 0x22000
   112ec:	ldr	pc, [ip, #3564]!	; 0xdec

000112f0 <fputs@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #139264	; 0x22000
   112f8:	ldr	pc, [ip, #3556]!	; 0xde4

000112fc <strncmp@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #139264	; 0x22000
   11304:	ldr	pc, [ip, #3548]!	; 0xddc

00011308 <abort@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #139264	; 0x22000
   11310:	ldr	pc, [ip, #3540]!	; 0xdd4

00011314 <close@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #139264	; 0x22000
   1131c:	ldr	pc, [ip, #3532]!	; 0xdcc

00011320 <closedir@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #139264	; 0x22000
   11328:	ldr	pc, [ip, #3524]!	; 0xdc4

0001132c <strspn@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #139264	; 0x22000
   11334:	ldr	pc, [ip, #3516]!	; 0xdbc

00011338 <__assert_fail@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #139264	; 0x22000
   11340:	ldr	pc, [ip, #3508]!	; 0xdb4

Disassembly of section .text:

00011344 <.text>:
   11344:	push	{r0, r1, r2, r3}
   11348:	ldr	r3, [pc, #60]	; 1138c <__assert_fail@plt+0x54>
   1134c:	push	{r0, r1, r2, lr}
   11350:	add	r2, sp, #20
   11354:	str	r2, [sp, #4]
   11358:	add	r3, pc, r3
   1135c:	ldr	r2, [pc, #44]	; 11390 <__assert_fail@plt+0x58>
   11360:	ldr	r0, [pc, #44]	; 11394 <__assert_fail@plt+0x5c>
   11364:	ldr	r4, [r3, r2]
   11368:	add	r0, pc, r0
   1136c:	ldr	r1, [r4]
   11370:	bl	112f0 <fputs@plt>
   11374:	ldr	r0, [r4]
   11378:	ldr	r1, [sp, #16]
   1137c:	ldr	r2, [sp, #4]
   11380:	bl	11290 <vfprintf@plt>
   11384:	mov	r0, #1
   11388:	bl	111c4 <exit@plt>
   1138c:	andeq	r2, r2, r0, lsr #25
   11390:	andeq	r0, r0, r4, lsr r1
   11394:	strdeq	sp, [r0], -r5
   11398:	push	{r0, r1, r2, r3}
   1139c:	ldr	r3, [pc, #60]	; 113e0 <__assert_fail@plt+0xa8>
   113a0:	push	{r0, r1, r2, lr}
   113a4:	add	r2, sp, #20
   113a8:	str	r2, [sp, #4]
   113ac:	add	r3, pc, r3
   113b0:	ldr	r2, [pc, #44]	; 113e4 <__assert_fail@plt+0xac>
   113b4:	ldr	r0, [pc, #44]	; 113e8 <__assert_fail@plt+0xb0>
   113b8:	ldr	r4, [r3, r2]
   113bc:	add	r0, pc, r0
   113c0:	ldr	r1, [r4]
   113c4:	bl	112f0 <fputs@plt>
   113c8:	ldr	r0, [r4]
   113cc:	ldr	r1, [sp, #16]
   113d0:	ldr	r2, [sp, #4]
   113d4:	bl	11290 <vfprintf@plt>
   113d8:	mov	r0, #1
   113dc:	bl	111c4 <exit@plt>
   113e0:	andeq	r2, r2, ip, asr #24
   113e4:	andeq	r0, r0, r4, lsr r1
   113e8:	andeq	sp, r0, r1, lsr #17
   113ec:	push	{r0, r1, r2, r3}
   113f0:	ldr	r3, [pc, #60]	; 11434 <__assert_fail@plt+0xfc>
   113f4:	push	{r0, r1, r2, lr}
   113f8:	add	r2, sp, #20
   113fc:	str	r2, [sp, #4]
   11400:	add	r3, pc, r3
   11404:	ldr	r2, [pc, #44]	; 11438 <__assert_fail@plt+0x100>
   11408:	ldr	r0, [pc, #44]	; 1143c <__assert_fail@plt+0x104>
   1140c:	ldr	r4, [r3, r2]
   11410:	add	r0, pc, r0
   11414:	ldr	r1, [r4]
   11418:	bl	112f0 <fputs@plt>
   1141c:	ldr	r0, [r4]
   11420:	ldr	r1, [sp, #16]
   11424:	ldr	r2, [sp, #4]
   11428:	bl	11290 <vfprintf@plt>
   1142c:	mov	r0, #1
   11430:	bl	111c4 <exit@plt>
   11434:	strdeq	r2, [r2], -r8
   11438:	andeq	r0, r0, r4, lsr r1
   1143c:	andeq	sp, r0, sp, asr #16
   11440:	push	{r0, r1, r2, r3}
   11444:	ldr	r3, [pc, #60]	; 11488 <__assert_fail@plt+0x150>
   11448:	push	{r0, r1, r2, lr}
   1144c:	add	r2, sp, #20
   11450:	str	r2, [sp, #4]
   11454:	add	r3, pc, r3
   11458:	ldr	r2, [pc, #44]	; 1148c <__assert_fail@plt+0x154>
   1145c:	ldr	r0, [pc, #44]	; 11490 <__assert_fail@plt+0x158>
   11460:	ldr	r4, [r3, r2]
   11464:	add	r0, pc, r0
   11468:	ldr	r1, [r4]
   1146c:	bl	112f0 <fputs@plt>
   11470:	ldr	r0, [r4]
   11474:	ldr	r1, [sp, #16]
   11478:	ldr	r2, [sp, #4]
   1147c:	bl	11290 <vfprintf@plt>
   11480:	mov	r0, #1
   11484:	bl	111c4 <exit@plt>
   11488:	andeq	r2, r2, r4, lsr #23
   1148c:	andeq	r0, r0, r4, lsr r1
   11490:	strdeq	sp, [r0], -r9
   11494:	push	{r0, r1, r2, r3}
   11498:	ldr	r3, [pc, #64]	; 114e0 <__assert_fail@plt+0x1a8>
   1149c:	push	{r0, r1, r2, lr}
   114a0:	add	r2, sp, #20
   114a4:	str	r2, [sp, #4]
   114a8:	add	r3, pc, r3
   114ac:	ldr	r2, [pc, #48]	; 114e4 <__assert_fail@plt+0x1ac>
   114b0:	ldr	r0, [pc, #48]	; 114e8 <__assert_fail@plt+0x1b0>
   114b4:	ldr	r4, [r3, r2]
   114b8:	add	r0, pc, r0
   114bc:	ldr	r1, [r4]
   114c0:	bl	112f0 <fputs@plt>
   114c4:	ldr	r1, [pc, #32]	; 114ec <__assert_fail@plt+0x1b4>
   114c8:	ldr	r0, [r4]
   114cc:	add	r1, pc, r1
   114d0:	ldr	r2, [sp, #4]
   114d4:	bl	11290 <vfprintf@plt>
   114d8:	mov	r0, #1
   114dc:	bl	111c4 <exit@plt>
   114e0:	andeq	r2, r2, r0, asr fp
   114e4:	andeq	r0, r0, r4, lsr r1
   114e8:	andeq	sp, r0, r5, lsr #15
   114ec:	andeq	r2, r1, r2, lsr r0
   114f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   114f4:	sub	sp, sp, #172	; 0xac
   114f8:	ldr	r4, [pc, #2244]	; 11dc4 <__assert_fail@plt+0xa8c>
   114fc:	mov	r9, #0
   11500:	ldr	r3, [pc, #2240]	; 11dc8 <__assert_fail@plt+0xa90>
   11504:	mvn	r6, #0
   11508:	add	r4, pc, r4
   1150c:	str	r0, [sp, #28]
   11510:	str	r1, [sp, #36]	; 0x24
   11514:	mvn	r7, #0
   11518:	ldr	ip, [r4, r3]
   1151c:	mov	sl, r9
   11520:	ldr	r3, [pc, #2212]	; 11dcc <__assert_fail@plt+0xa94>
   11524:	mov	r5, r9
   11528:	ldr	fp, [pc, #2208]	; 11dd0 <__assert_fail@plt+0xa98>
   1152c:	str	r9, [ip]
   11530:	ldr	r0, [r4, r3]
   11534:	add	fp, pc, fp
   11538:	ldr	r3, [pc, #2196]	; 11dd4 <__assert_fail@plt+0xa9c>
   1153c:	ldr	lr, [pc, #2196]	; 11dd8 <__assert_fail@plt+0xaa0>
   11540:	str	r9, [r0]
   11544:	ldr	r1, [r4, r3]
   11548:	add	lr, pc, lr
   1154c:	ldr	r3, [pc, #2184]	; 11ddc <__assert_fail@plt+0xaa4>
   11550:	str	r9, [r1]
   11554:	ldr	r2, [r4, r3]
   11558:	ldr	r3, [pc, #2176]	; 11de0 <__assert_fail@plt+0xaa8>
   1155c:	str	r9, [r2]
   11560:	ldr	r3, [r4, r3]
   11564:	strd	r6, [sp, #16]
   11568:	mov	r7, #17
   1156c:	str	r7, [sp, #24]
   11570:	mov	r6, r9
   11574:	ldr	r7, [pc, #2152]	; 11de4 <__assert_fail@plt+0xaac>
   11578:	str	r1, [sp, #44]	; 0x2c
   1157c:	add	r7, pc, r7
   11580:	ldr	r1, [pc, #2144]	; 11de8 <__assert_fail@plt+0xab0>
   11584:	str	r0, [sp, #60]	; 0x3c
   11588:	add	r0, lr, #27
   1158c:	add	r1, pc, r1
   11590:	str	r9, [r3]
   11594:	str	r9, [sp, #32]
   11598:	str	ip, [sp, #40]	; 0x28
   1159c:	str	r2, [sp, #48]	; 0x30
   115a0:	str	r3, [sp, #64]	; 0x40
   115a4:	str	lr, [sp, #52]	; 0x34
   115a8:	str	r0, [sp, #56]	; 0x38
   115ac:	str	r1, [sp, #68]	; 0x44
   115b0:	mov	r3, #0
   115b4:	ldr	r0, [sp, #28]
   115b8:	str	r3, [sp]
   115bc:	mov	r3, fp
   115c0:	ldr	r1, [sp, #36]	; 0x24
   115c4:	ldr	r2, [sp, #56]	; 0x38
   115c8:	bl	111ac <getopt_long@plt>
   115cc:	cmn	r0, #1
   115d0:	beq	1193c <__assert_fail@plt+0x604>
   115d4:	sub	r0, r0, #64	; 0x40
   115d8:	cmp	r0, #54	; 0x36
   115dc:	addls	pc, pc, r0, lsl #2
   115e0:	b	11900 <__assert_fail@plt+0x5c8>
   115e4:	b	118c4 <__assert_fail@plt+0x58c>
   115e8:	b	118cc <__assert_fail@plt+0x594>
   115ec:	b	11900 <__assert_fail@plt+0x5c8>
   115f0:	b	11900 <__assert_fail@plt+0x5c8>
   115f4:	b	11900 <__assert_fail@plt+0x5c8>
   115f8:	b	118a8 <__assert_fail@plt+0x570>
   115fc:	b	11900 <__assert_fail@plt+0x5c8>
   11600:	b	11900 <__assert_fail@plt+0x5c8>
   11604:	b	11814 <__assert_fail@plt+0x4dc>
   11608:	b	116c0 <__assert_fail@plt+0x388>
   1160c:	b	11900 <__assert_fail@plt+0x5c8>
   11610:	b	11900 <__assert_fail@plt+0x5c8>
   11614:	b	11900 <__assert_fail@plt+0x5c8>
   11618:	b	11900 <__assert_fail@plt+0x5c8>
   1161c:	b	11900 <__assert_fail@plt+0x5c8>
   11620:	b	116d0 <__assert_fail@plt+0x398>
   11624:	b	11900 <__assert_fail@plt+0x5c8>
   11628:	b	11900 <__assert_fail@plt+0x5c8>
   1162c:	b	11720 <__assert_fail@plt+0x3e8>
   11630:	b	11744 <__assert_fail@plt+0x40c>
   11634:	b	11900 <__assert_fail@plt+0x5c8>
   11638:	b	11900 <__assert_fail@plt+0x5c8>
   1163c:	b	116f0 <__assert_fail@plt+0x3b8>
   11640:	b	11894 <__assert_fail@plt+0x55c>
   11644:	b	11900 <__assert_fail@plt+0x5c8>
   11648:	b	11900 <__assert_fail@plt+0x5c8>
   1164c:	b	11900 <__assert_fail@plt+0x5c8>
   11650:	b	11900 <__assert_fail@plt+0x5c8>
   11654:	b	11900 <__assert_fail@plt+0x5c8>
   11658:	b	11900 <__assert_fail@plt+0x5c8>
   1165c:	b	11900 <__assert_fail@plt+0x5c8>
   11660:	b	11900 <__assert_fail@plt+0x5c8>
   11664:	b	11900 <__assert_fail@plt+0x5c8>
   11668:	b	1178c <__assert_fail@plt+0x454>
   1166c:	b	117dc <__assert_fail@plt+0x4a4>
   11670:	b	11900 <__assert_fail@plt+0x5c8>
   11674:	b	11710 <__assert_fail@plt+0x3d8>
   11678:	b	11900 <__assert_fail@plt+0x5c8>
   1167c:	b	11928 <__assert_fail@plt+0x5f0>
   11680:	b	11900 <__assert_fail@plt+0x5c8>
   11684:	b	118e0 <__assert_fail@plt+0x5a8>
   11688:	b	117fc <__assert_fail@plt+0x4c4>
   1168c:	b	11900 <__assert_fail@plt+0x5c8>
   11690:	b	11900 <__assert_fail@plt+0x5c8>
   11694:	b	11900 <__assert_fail@plt+0x5c8>
   11698:	b	11900 <__assert_fail@plt+0x5c8>
   1169c:	b	11900 <__assert_fail@plt+0x5c8>
   116a0:	b	116e0 <__assert_fail@plt+0x3a8>
   116a4:	b	11768 <__assert_fail@plt+0x430>
   116a8:	b	117c8 <__assert_fail@plt+0x490>
   116ac:	b	11900 <__assert_fail@plt+0x5c8>
   116b0:	b	11934 <__assert_fail@plt+0x5fc>
   116b4:	b	11900 <__assert_fail@plt+0x5c8>
   116b8:	b	11900 <__assert_fail@plt+0x5c8>
   116bc:	b	11810 <__assert_fail@plt+0x4d8>
   116c0:	ldr	r3, [pc, #1828]	; 11dec <__assert_fail@plt+0xab4>
   116c4:	ldr	r3, [r4, r3]
   116c8:	ldr	r5, [r3]
   116cc:	b	115b0 <__assert_fail@plt+0x278>
   116d0:	ldr	r3, [pc, #1812]	; 11dec <__assert_fail@plt+0xab4>
   116d4:	ldr	r3, [r4, r3]
   116d8:	ldr	r6, [r3]
   116dc:	b	115b0 <__assert_fail@plt+0x278>
   116e0:	ldr	r3, [pc, #1796]	; 11dec <__assert_fail@plt+0xab4>
   116e4:	ldr	r3, [r4, r3]
   116e8:	ldr	r7, [r3]
   116ec:	b	115b0 <__assert_fail@plt+0x278>
   116f0:	ldr	r3, [pc, #1780]	; 11dec <__assert_fail@plt+0xab4>
   116f4:	mov	r1, #0
   116f8:	mov	r2, r1
   116fc:	ldr	r3, [r4, r3]
   11700:	ldr	r0, [r3]
   11704:	bl	110a4 <strtol@plt>
   11708:	str	r0, [sp, #24]
   1170c:	b	115b0 <__assert_fail@plt+0x278>
   11710:	ldr	r3, [pc, #1748]	; 11dec <__assert_fail@plt+0xab4>
   11714:	ldr	r3, [r4, r3]
   11718:	ldr	sl, [r3]
   1171c:	b	115b0 <__assert_fail@plt+0x278>
   11720:	ldr	r3, [pc, #1732]	; 11dec <__assert_fail@plt+0xab4>
   11724:	mov	r1, #0
   11728:	mov	r2, r1
   1172c:	ldr	r3, [r4, r3]
   11730:	ldr	r0, [r3]
   11734:	bl	110a4 <strtol@plt>
   11738:	ldr	r2, [sp, #60]	; 0x3c
   1173c:	str	r0, [r2]
   11740:	b	115b0 <__assert_fail@plt+0x278>
   11744:	ldr	r3, [pc, #1696]	; 11dec <__assert_fail@plt+0xab4>
   11748:	mov	r1, #0
   1174c:	mov	r2, r1
   11750:	ldr	r3, [r4, r3]
   11754:	ldr	r0, [r3]
   11758:	bl	110a4 <strtol@plt>
   1175c:	ldr	r3, [sp, #44]	; 0x2c
   11760:	str	r0, [r3]
   11764:	b	115b0 <__assert_fail@plt+0x278>
   11768:	ldr	r3, [pc, #1660]	; 11dec <__assert_fail@plt+0xab4>
   1176c:	mov	r1, #0
   11770:	mov	r2, r1
   11774:	ldr	r3, [r4, r3]
   11778:	ldr	r0, [r3]
   1177c:	bl	110a4 <strtol@plt>
   11780:	ldr	lr, [sp, #48]	; 0x30
   11784:	str	r0, [lr]
   11788:	b	115b0 <__assert_fail@plt+0x278>
   1178c:	ldr	r3, [pc, #1624]	; 11dec <__assert_fail@plt+0xab4>
   11790:	mov	r1, #0
   11794:	mov	r2, r1
   11798:	ldr	r3, [r4, r3]
   1179c:	ldr	r0, [r3]
   117a0:	bl	110a4 <strtol@plt>
   117a4:	mov	r1, r0
   117a8:	ldr	r0, [sp, #64]	; 0x40
   117ac:	cmp	r1, #0
   117b0:	str	r1, [r0]
   117b4:	ble	11db8 <__assert_fail@plt+0xa80>
   117b8:	sub	r3, r1, #1
   117bc:	tst	r3, r1
   117c0:	bne	11db8 <__assert_fail@plt+0xa80>
   117c4:	b	115b0 <__assert_fail@plt+0x278>
   117c8:	ldr	r1, [sp, #40]	; 0x28
   117cc:	ldr	r3, [r1]
   117d0:	add	r3, r3, #1
   117d4:	str	r3, [r1]
   117d8:	b	115b0 <__assert_fail@plt+0x278>
   117dc:	ldr	r3, [pc, #1544]	; 11dec <__assert_fail@plt+0xab4>
   117e0:	mov	r1, #0
   117e4:	mov	r2, r1
   117e8:	ldr	r3, [r4, r3]
   117ec:	ldr	r0, [r3]
   117f0:	bl	1114c <strtoll@plt>
   117f4:	strd	r0, [sp, #16]
   117f8:	b	115b0 <__assert_fail@plt+0x278>
   117fc:	ldr	r3, [pc, #1512]	; 11dec <__assert_fail@plt+0xab4>
   11800:	ldr	r3, [r4, r3]
   11804:	ldr	r0, [r3]
   11808:	bl	19244 <__assert_fail@plt+0x7f0c>
   1180c:	b	115b0 <__assert_fail@plt+0x278>
   11810:	bl	1a78c <__assert_fail@plt+0x9454>
   11814:	ldr	r3, [pc, #1488]	; 11dec <__assert_fail@plt+0xab4>
   11818:	ldr	r1, [sp, #68]	; 0x44
   1181c:	ldr	r3, [r4, r3]
   11820:	ldr	r8, [r3]
   11824:	mov	r0, r8
   11828:	bl	11098 <strcmp@plt>
   1182c:	ldr	r3, [pc, #1468]	; 11df0 <__assert_fail@plt+0xab8>
   11830:	ldr	r3, [r4, r3]
   11834:	cmp	r0, #0
   11838:	beq	118d4 <__assert_fail@plt+0x59c>
   1183c:	ldr	r1, [pc, #1456]	; 11df4 <__assert_fail@plt+0xabc>
   11840:	mov	r0, r8
   11844:	str	r3, [sp, #12]
   11848:	add	r1, pc, r1
   1184c:	bl	11098 <strcmp@plt>
   11850:	ldr	r3, [sp, #12]
   11854:	cmp	r0, #0
   11858:	moveq	r2, #2
   1185c:	beq	118d8 <__assert_fail@plt+0x5a0>
   11860:	ldr	r1, [pc, #1424]	; 11df8 <__assert_fail@plt+0xac0>
   11864:	mov	r0, r8
   11868:	str	r3, [sp, #12]
   1186c:	add	r1, pc, r1
   11870:	bl	11098 <strcmp@plt>
   11874:	ldr	r3, [sp, #12]
   11878:	cmp	r0, #0
   1187c:	moveq	r2, #3
   11880:	beq	118d8 <__assert_fail@plt+0x5a0>
   11884:	ldr	r0, [pc, #1392]	; 11dfc <__assert_fail@plt+0xac4>
   11888:	mov	r1, r8
   1188c:	add	r0, pc, r0
   11890:	b	11bd4 <__assert_fail@plt+0x89c>
   11894:	ldr	r3, [pc, #1360]	; 11dec <__assert_fail@plt+0xab4>
   11898:	mov	r0, #1
   1189c:	mov	r1, #0
   118a0:	ldr	r3, [r4, r3]
   118a4:	b	118b8 <__assert_fail@plt+0x580>
   118a8:	ldr	r3, [pc, #1340]	; 11dec <__assert_fail@plt+0xab4>
   118ac:	mov	r0, #0
   118b0:	mov	r1, #1
   118b4:	ldr	r3, [r4, r3]
   118b8:	ldr	r2, [r3]
   118bc:	bl	14a5c <__assert_fail@plt+0x3724>
   118c0:	b	115b0 <__assert_fail@plt+0x278>
   118c4:	ldr	r3, [pc, #1332]	; 11e00 <__assert_fail@plt+0xac8>
   118c8:	b	118d0 <__assert_fail@plt+0x598>
   118cc:	ldr	r3, [pc, #1328]	; 11e04 <__assert_fail@plt+0xacc>
   118d0:	ldr	r3, [r4, r3]
   118d4:	mov	r2, #1
   118d8:	str	r2, [r3]
   118dc:	b	115b0 <__assert_fail@plt+0x278>
   118e0:	ldr	r3, [pc, #1312]	; 11e08 <__assert_fail@plt+0xad0>
   118e4:	mov	r0, #0
   118e8:	ldr	r1, [pc, #1308]	; 11e0c <__assert_fail@plt+0xad4>
   118ec:	add	r3, pc, r3
   118f0:	add	r2, r3, #352	; 0x160
   118f4:	add	r1, pc, r1
   118f8:	str	r2, [sp]
   118fc:	b	11920 <__assert_fail@plt+0x5e8>
   11900:	ldr	r0, [pc, #1288]	; 11e10 <__assert_fail@plt+0xad8>
   11904:	ldr	r1, [pc, #1288]	; 11e14 <__assert_fail@plt+0xadc>
   11908:	ldr	r3, [pc, #1288]	; 11e18 <__assert_fail@plt+0xae0>
   1190c:	add	r0, pc, r0
   11910:	add	r1, pc, r1
   11914:	add	r3, pc, r3
   11918:	add	r2, r3, #352	; 0x160
   1191c:	str	r2, [sp]
   11920:	add	r2, r1, #27
   11924:	bl	1a7b4 <__assert_fail@plt+0x947c>
   11928:	mov	r2, #1
   1192c:	str	r2, [sp, #32]
   11930:	b	115b0 <__assert_fail@plt+0x278>
   11934:	mov	r9, #1
   11938:	b	115b0 <__assert_fail@plt+0x278>
   1193c:	ldr	r3, [pc, #1240]	; 11e1c <__assert_fail@plt+0xae4>
   11940:	ldr	lr, [sp, #28]
   11944:	ldr	r3, [r4, r3]
   11948:	ldr	r3, [r3]
   1194c:	add	r2, r3, #1
   11950:	cmp	lr, r2
   11954:	ble	11978 <__assert_fail@plt+0x640>
   11958:	ldr	r0, [pc, #1216]	; 11e20 <__assert_fail@plt+0xae8>
   1195c:	add	r3, fp, #352	; 0x160
   11960:	ldr	r1, [sp, #52]	; 0x34
   11964:	str	r3, [sp]
   11968:	add	r0, pc, r0
   1196c:	ldr	r2, [sp, #56]	; 0x38
   11970:	mov	r3, fp
   11974:	b	11924 <__assert_fail@plt+0x5ec>
   11978:	ldr	r0, [sp, #28]
   1197c:	cmp	r3, r0
   11980:	ldrlt	r1, [sp, #36]	; 0x24
   11984:	ldrlt	r8, [r1, r3, lsl #2]
   11988:	ldrge	r8, [pc, #1172]	; 11e24 <__assert_fail@plt+0xaec>
   1198c:	addge	r8, pc, r8
   11990:	ldr	r2, [sp, #44]	; 0x2c
   11994:	ldr	r3, [r2]
   11998:	cmp	r3, #0
   1199c:	beq	119bc <__assert_fail@plt+0x684>
   119a0:	ldr	lr, [sp, #48]	; 0x30
   119a4:	ldr	r3, [lr]
   119a8:	cmp	r3, #0
   119ac:	beq	119bc <__assert_fail@plt+0x684>
   119b0:	ldr	r0, [pc, #1136]	; 11e28 <__assert_fail@plt+0xaf0>
   119b4:	add	r0, pc, r0
   119b8:	bl	120cc <__assert_fail@plt+0xd94>
   119bc:	ldr	r3, [pc, #1128]	; 11e2c <__assert_fail@plt+0xaf4>
   119c0:	cmp	sl, #0
   119c4:	ldr	fp, [r4, r3]
   119c8:	beq	11a18 <__assert_fail@plt+0x6e0>
   119cc:	ldr	r1, [pc, #1116]	; 11e30 <__assert_fail@plt+0xaf8>
   119d0:	mov	r0, sl
   119d4:	add	r1, pc, r1
   119d8:	bl	110bc <fopen@plt>
   119dc:	cmp	r0, #0
   119e0:	str	r0, [fp]
   119e4:	bne	11a08 <__assert_fail@plt+0x6d0>
   119e8:	bl	11200 <__errno_location@plt>
   119ec:	ldr	r0, [r0]
   119f0:	bl	11188 <strerror@plt>
   119f4:	mov	r1, sl
   119f8:	mov	r2, r0
   119fc:	ldr	r0, [pc, #1072]	; 11e34 <__assert_fail@plt+0xafc>
   11a00:	add	r0, pc, r0
   11a04:	b	11d08 <__assert_fail@plt+0x9d0>
   11a08:	ldr	r1, [pc, #1064]	; 11e38 <__assert_fail@plt+0xb00>
   11a0c:	mov	r2, r7
   11a10:	add	r1, pc, r1
   11a14:	bl	111f4 <fprintf@plt>
   11a18:	cmp	r5, #0
   11a1c:	bne	11afc <__assert_fail@plt+0x7c4>
   11a20:	mov	r0, r8
   11a24:	add	r1, sp, #80	; 0x50
   11a28:	bl	1ebec <__assert_fail@plt+0xd8b4>
   11a2c:	cmp	r0, #0
   11a30:	beq	11a40 <__assert_fail@plt+0x708>
   11a34:	ldr	r5, [pc, #1024]	; 11e3c <__assert_fail@plt+0xb04>
   11a38:	add	r5, pc, r5
   11a3c:	b	11afc <__assert_fail@plt+0x7c4>
   11a40:	ldr	r3, [sp, #96]	; 0x60
   11a44:	and	r3, r3, #61440	; 0xf000
   11a48:	cmp	r3, #16384	; 0x4000
   11a4c:	beq	11ae8 <__assert_fail@plt+0x7b0>
   11a50:	cmp	r3, #32768	; 0x8000
   11a54:	bne	11a34 <__assert_fail@plt+0x6fc>
   11a58:	ldr	r1, [pc, #992]	; 11e40 <__assert_fail@plt+0xb08>
   11a5c:	mov	r0, r8
   11a60:	add	r1, pc, r1
   11a64:	bl	110bc <fopen@plt>
   11a68:	subs	r5, r0, #0
   11a6c:	beq	11a34 <__assert_fail@plt+0x6fc>
   11a70:	add	r0, sp, #72	; 0x48
   11a74:	mov	r1, #4
   11a78:	mov	r2, #1
   11a7c:	mov	r3, r5
   11a80:	bl	11158 <fread@plt>
   11a84:	cmp	r0, #1
   11a88:	mov	r0, r5
   11a8c:	beq	11aa0 <__assert_fail@plt+0x768>
   11a90:	ldr	r5, [pc, #940]	; 11e44 <__assert_fail@plt+0xb0c>
   11a94:	bl	11260 <fclose@plt>
   11a98:	add	r5, pc, r5
   11a9c:	b	11afc <__assert_fail@plt+0x7c4>
   11aa0:	bl	11260 <fclose@plt>
   11aa4:	ldr	r3, [sp, #72]	; 0x48
   11aa8:	ubfx	r2, r3, #8, #8
   11aac:	str	r3, [sp, #76]	; 0x4c
   11ab0:	lsl	r2, r2, #16
   11ab4:	orr	r2, r2, r3, lsl #24
   11ab8:	orr	r2, r2, r3, lsr #24
   11abc:	ubfx	r3, r3, #16, #8
   11ac0:	orr	r3, r2, r3, lsl #8
   11ac4:	ldr	r2, [pc, #892]	; 11e48 <__assert_fail@plt+0xb10>
   11ac8:	cmp	r3, r2
   11acc:	beq	11af4 <__assert_fail@plt+0x7bc>
   11ad0:	ldr	r1, [pc, #884]	; 11e4c <__assert_fail@plt+0xb14>
   11ad4:	mov	r0, r8
   11ad8:	add	r1, pc, r1
   11adc:	bl	11fe4 <__assert_fail@plt+0xcac>
   11ae0:	mov	r5, r0
   11ae4:	b	11afc <__assert_fail@plt+0x7c4>
   11ae8:	ldr	r5, [pc, #864]	; 11e50 <__assert_fail@plt+0xb18>
   11aec:	add	r5, pc, r5
   11af0:	b	11afc <__assert_fail@plt+0x7c4>
   11af4:	ldr	r5, [pc, #856]	; 11e54 <__assert_fail@plt+0xb1c>
   11af8:	add	r5, pc, r5
   11afc:	cmp	r6, #0
   11b00:	bne	11b38 <__assert_fail@plt+0x800>
   11b04:	mov	r1, r6
   11b08:	mov	r0, r7
   11b0c:	bl	11fe4 <__assert_fail@plt+0xcac>
   11b10:	subs	r6, r0, #0
   11b14:	bne	11b38 <__assert_fail@plt+0x800>
   11b18:	ldr	r6, [pc, #824]	; 11e58 <__assert_fail@plt+0xb20>
   11b1c:	mov	r0, r5
   11b20:	add	r6, pc, r6
   11b24:	mov	r1, r6
   11b28:	bl	11098 <strcmp@plt>
   11b2c:	cmp	r0, #0
   11b30:	ldreq	r6, [pc, #804]	; 11e5c <__assert_fail@plt+0xb24>
   11b34:	addeq	r6, pc, r6
   11b38:	ldr	r1, [pc, #800]	; 11e60 <__assert_fail@plt+0xb28>
   11b3c:	mov	r0, r5
   11b40:	add	r1, pc, r1
   11b44:	bl	11098 <strcmp@plt>
   11b48:	cmp	r0, #0
   11b4c:	bne	11b5c <__assert_fail@plt+0x824>
   11b50:	mov	r0, r8
   11b54:	bl	19dac <__assert_fail@plt+0x8a74>
   11b58:	b	11ba0 <__assert_fail@plt+0x868>
   11b5c:	ldr	r1, [pc, #768]	; 11e64 <__assert_fail@plt+0xb2c>
   11b60:	mov	r0, r5
   11b64:	add	r1, pc, r1
   11b68:	bl	11098 <strcmp@plt>
   11b6c:	cmp	r0, #0
   11b70:	bne	11b80 <__assert_fail@plt+0x848>
   11b74:	mov	r0, r8
   11b78:	bl	17614 <__assert_fail@plt+0x62dc>
   11b7c:	b	11ba0 <__assert_fail@plt+0x868>
   11b80:	ldr	r1, [pc, #736]	; 11e68 <__assert_fail@plt+0xb30>
   11b84:	mov	r0, r5
   11b88:	add	r1, pc, r1
   11b8c:	bl	11098 <strcmp@plt>
   11b90:	cmp	r0, #0
   11b94:	bne	11bc8 <__assert_fail@plt+0x890>
   11b98:	mov	r0, r8
   11b9c:	bl	16dd0 <__assert_fail@plt+0x5a98>
   11ba0:	ldr	r1, [fp]
   11ba4:	mov	r5, r0
   11ba8:	str	r7, [r0, #16]
   11bac:	cmp	r1, #0
   11bb0:	beq	11bd8 <__assert_fail@plt+0x8a0>
   11bb4:	mov	r0, #10
   11bb8:	bl	1129c <fputc@plt>
   11bbc:	ldr	r0, [fp]
   11bc0:	bl	11260 <fclose@plt>
   11bc4:	b	11bd8 <__assert_fail@plt+0x8a0>
   11bc8:	ldr	r0, [pc, #668]	; 11e6c <__assert_fail@plt+0xb34>
   11bcc:	mov	r1, r5
   11bd0:	add	r0, pc, r0
   11bd4:	bl	120cc <__assert_fail@plt+0xd94>
   11bd8:	ldrd	r0, [sp, #16]
   11bdc:	mvn	r2, #0
   11be0:	mvn	r3, #0
   11be4:	cmp	r1, r3
   11be8:	cmpeq	r0, r2
   11bec:	ldr	r1, [pc, #636]	; 11e70 <__assert_fail@plt+0xb38>
   11bf0:	strne	r0, [r5, #8]
   11bf4:	add	r1, pc, r1
   11bf8:	ldr	r0, [r5, #12]
   11bfc:	bl	12058 <__assert_fail@plt+0xd20>
   11c00:	ldr	r3, [r5]
   11c04:	ldr	r0, [sp, #32]
   11c08:	mov	r1, r5
   11c0c:	tst	r3, #2
   11c10:	ldr	r3, [pc, #604]	; 11e74 <__assert_fail@plt+0xb3c>
   11c14:	ldr	r8, [r4, r3]
   11c18:	movne	r3, #1
   11c1c:	strne	r3, [r8]
   11c20:	bl	14b24 <__assert_fail@plt+0x37ec>
   11c24:	ldr	r3, [pc, #472]	; 11e04 <__assert_fail@plt+0xacc>
   11c28:	ldr	r3, [r4, r3]
   11c2c:	ldr	r3, [r3]
   11c30:	cmp	r3, #0
   11c34:	beq	11c4c <__assert_fail@plt+0x914>
   11c38:	ldr	r1, [pc, #568]	; 11e78 <__assert_fail@plt+0xb40>
   11c3c:	mov	r0, r5
   11c40:	mov	r2, #0
   11c44:	add	r1, pc, r1
   11c48:	bl	18e54 <__assert_fail@plt+0x7b1c>
   11c4c:	ldr	r3, [pc, #428]	; 11e00 <__assert_fail@plt+0xac8>
   11c50:	ldr	r3, [r4, r3]
   11c54:	ldr	r3, [r3]
   11c58:	cmp	r3, #0
   11c5c:	beq	11c74 <__assert_fail@plt+0x93c>
   11c60:	ldr	r1, [pc, #532]	; 11e7c <__assert_fail@plt+0xb44>
   11c64:	mov	r0, r5
   11c68:	mov	r2, #1
   11c6c:	add	r1, pc, r1
   11c70:	bl	18e54 <__assert_fail@plt+0x7b1c>
   11c74:	ldr	r3, [r8]
   11c78:	cmp	r3, #0
   11c7c:	beq	11ca0 <__assert_fail@plt+0x968>
   11c80:	ldr	r1, [pc, #504]	; 11e80 <__assert_fail@plt+0xb48>
   11c84:	mov	r0, r5
   11c88:	add	r1, pc, r1
   11c8c:	bl	18e9c <__assert_fail@plt+0x7b64>
   11c90:	ldr	r1, [pc, #492]	; 11e84 <__assert_fail@plt+0xb4c>
   11c94:	mov	r0, r5
   11c98:	add	r1, pc, r1
   11c9c:	bl	18ed8 <__assert_fail@plt+0x7ba0>
   11ca0:	cmp	r9, #0
   11ca4:	beq	11cb0 <__assert_fail@plt+0x978>
   11ca8:	mov	r0, r5
   11cac:	bl	18d98 <__assert_fail@plt+0x7a60>
   11cb0:	ldr	r1, [pc, #464]	; 11e88 <__assert_fail@plt+0xb50>
   11cb4:	mov	r0, r7
   11cb8:	add	r1, pc, r1
   11cbc:	bl	11098 <strcmp@plt>
   11cc0:	cmp	r0, #0
   11cc4:	ldreq	r3, [pc, #448]	; 11e8c <__assert_fail@plt+0xb54>
   11cc8:	ldreq	r3, [r4, r3]
   11ccc:	ldreq	r4, [r3]
   11cd0:	beq	11d0c <__assert_fail@plt+0x9d4>
   11cd4:	ldr	r1, [pc, #436]	; 11e90 <__assert_fail@plt+0xb58>
   11cd8:	mov	r0, r7
   11cdc:	add	r1, pc, r1
   11ce0:	bl	110bc <fopen@plt>
   11ce4:	subs	r4, r0, #0
   11ce8:	bne	11d0c <__assert_fail@plt+0x9d4>
   11cec:	bl	11200 <__errno_location@plt>
   11cf0:	ldr	r0, [r0]
   11cf4:	bl	11188 <strerror@plt>
   11cf8:	mov	r1, r7
   11cfc:	mov	r2, r0
   11d00:	ldr	r0, [pc, #396]	; 11e94 <__assert_fail@plt+0xb5c>
   11d04:	add	r0, pc, r0
   11d08:	bl	120cc <__assert_fail@plt+0xd94>
   11d0c:	ldr	r1, [pc, #388]	; 11e98 <__assert_fail@plt+0xb60>
   11d10:	mov	r0, r6
   11d14:	add	r1, pc, r1
   11d18:	bl	11098 <strcmp@plt>
   11d1c:	cmp	r0, #0
   11d20:	bne	11d34 <__assert_fail@plt+0x9fc>
   11d24:	mov	r0, r4
   11d28:	mov	r1, r5
   11d2c:	bl	19e54 <__assert_fail@plt+0x8b1c>
   11d30:	b	11db0 <__assert_fail@plt+0xa78>
   11d34:	ldr	r1, [pc, #352]	; 11e9c <__assert_fail@plt+0xb64>
   11d38:	mov	r0, r6
   11d3c:	add	r1, pc, r1
   11d40:	bl	11098 <strcmp@plt>
   11d44:	cmp	r0, #0
   11d48:	bne	11d60 <__assert_fail@plt+0xa28>
   11d4c:	mov	r0, r4
   11d50:	mov	r1, r5
   11d54:	ldr	r2, [sp, #24]
   11d58:	bl	160b8 <__assert_fail@plt+0x4d80>
   11d5c:	b	11db0 <__assert_fail@plt+0xa78>
   11d60:	ldr	r1, [pc, #312]	; 11ea0 <__assert_fail@plt+0xb68>
   11d64:	mov	r0, r6
   11d68:	add	r1, pc, r1
   11d6c:	bl	11098 <strcmp@plt>
   11d70:	cmp	r0, #0
   11d74:	bne	11d8c <__assert_fail@plt+0xa54>
   11d78:	mov	r0, r4
   11d7c:	mov	r1, r5
   11d80:	ldr	r2, [sp, #24]
   11d84:	bl	16554 <__assert_fail@plt+0x521c>
   11d88:	b	11db0 <__assert_fail@plt+0xa78>
   11d8c:	ldr	r1, [pc, #272]	; 11ea4 <__assert_fail@plt+0xb6c>
   11d90:	mov	r0, r6
   11d94:	add	r1, pc, r1
   11d98:	bl	11098 <strcmp@plt>
   11d9c:	cmp	r0, #0
   11da0:	ldrne	r0, [pc, #256]	; 11ea8 <__assert_fail@plt+0xb70>
   11da4:	movne	r1, r6
   11da8:	addne	r0, pc, r0
   11dac:	bne	11bd4 <__assert_fail@plt+0x89c>
   11db0:	mov	r0, #0
   11db4:	bl	111c4 <exit@plt>
   11db8:	ldr	r0, [pc, #236]	; 11eac <__assert_fail@plt+0xb74>
   11dbc:	add	r0, pc, r0
   11dc0:	b	11bd4 <__assert_fail@plt+0x89c>
   11dc4:	strdeq	r2, [r2], -r0
   11dc8:	andeq	r0, r0, r8, lsr r1
   11dcc:	andeq	r0, r0, r4, lsl #2
   11dd0:	andeq	r2, r2, r8, lsr #14
   11dd4:	andeq	r0, r0, r8, ror #2
   11dd8:	andeq	sp, r0, ip, asr #13
   11ddc:	andeq	r0, r0, ip, lsl r1
   11de0:	andeq	r0, r0, r8, lsl #2
   11de4:	andeq	pc, r0, sp, asr #5
   11de8:	andeq	sp, r0, r2, ror #13
   11dec:	andeq	r0, r0, r4, ror #2
   11df0:	andeq	r0, r0, r0, lsl #2
   11df4:	andeq	sp, r0, sp, lsr #8
   11df8:	andeq	sp, r0, pc, lsl #8
   11dfc:	strdeq	sp, [r0], -r4
   11e00:	andeq	r0, r0, ip, lsl #2
   11e04:	andeq	r0, r0, r4, asr r1
   11e08:	andeq	r2, r2, r0, ror r3
   11e0c:	andeq	sp, r0, r0, lsr #6
   11e10:	muleq	r0, r8, r3
   11e14:	andeq	sp, r0, r4, lsl #6
   11e18:	andeq	r2, r2, r8, asr #6
   11e1c:	andeq	r0, r0, r8, lsl r1
   11e20:	andeq	sp, r0, fp, asr #6
   11e24:			; <UNDEFINED> instruction: 0x0000eebd
   11e28:	andeq	sp, r0, sp, lsl #6
   11e2c:	andeq	r0, r0, r4, lsr #2
   11e30:			; <UNDEFINED> instruction: 0x000115b5
   11e34:	ldrdeq	sp, [r0], -fp
   11e38:	andeq	r0, r1, r5, ror r1
   11e3c:	andeq	sp, r0, ip, lsl r2
   11e40:	andeq	r0, r1, r7, ror #1
   11e44:			; <UNDEFINED> instruction: 0x0000d1bc
   11e48:	andle	pc, sp, sp, ror #29
   11e4c:	andeq	sp, r0, ip, ror r1
   11e50:	andeq	sp, r0, pc, ror r1
   11e54:	andeq	sp, r0, r1, ror #2
   11e58:	andeq	sp, r0, r4, lsr r1
   11e5c:	andeq	sp, r0, r5, lsr #2
   11e60:	andeq	sp, r0, r4, lsl r1
   11e64:	andeq	sp, r0, r7, lsl #2
   11e68:	ldrdeq	sp, [r0], -r1
   11e6c:	andeq	sp, r0, r1, lsr r1
   11e70:	andeq	pc, r0, r2, ror r1	; <UNPREDICTABLE>
   11e74:	andeq	r0, r0, r8, asr #2
   11e78:	ldrdeq	sp, [r0], -r8
   11e7c:	strheq	sp, [r0], -r8
   11e80:	andeq	sp, r0, r8, lsr #1
   11e84:	andeq	sp, r0, r3, lsr #1
   11e88:	muleq	r0, r1, fp
   11e8c:	andeq	r0, r0, r8, asr r1
   11e90:	andeq	sp, r0, r0, ror r0
   11e94:	andeq	sp, r0, fp, asr #32
   11e98:	andeq	ip, r0, r0, asr #30
   11e9c:	andeq	ip, r0, sp, lsl pc
   11ea0:	andeq	sp, r0, r9
   11ea4:	andeq	ip, r0, r1, ror #31
   11ea8:	ldrdeq	ip, [r0], -r2
   11eac:	ldrdeq	ip, [r0], -sl
   11eb0:	mov	fp, #0
   11eb4:	mov	lr, #0
   11eb8:	pop	{r1}		; (ldr r1, [sp], #4)
   11ebc:	mov	r2, sp
   11ec0:	push	{r2}		; (str r2, [sp, #-4]!)
   11ec4:	push	{r0}		; (str r0, [sp, #-4]!)
   11ec8:	ldr	ip, [pc, #16]	; 11ee0 <__assert_fail@plt+0xba8>
   11ecc:	push	{ip}		; (str ip, [sp, #-4]!)
   11ed0:	ldr	r0, [pc, #12]	; 11ee4 <__assert_fail@plt+0xbac>
   11ed4:	ldr	r3, [pc, #12]	; 11ee8 <__assert_fail@plt+0xbb0>
   11ed8:	bl	1117c <__libc_start_main@plt>
   11edc:	bl	11308 <abort@plt>
   11ee0:	andeq	lr, r1, r8, ror #23
   11ee4:	strdeq	r1, [r1], -r0
   11ee8:	andeq	lr, r1, r4, lsl #23
   11eec:	ldr	r3, [pc, #20]	; 11f08 <__assert_fail@plt+0xbd0>
   11ef0:	ldr	r2, [pc, #20]	; 11f0c <__assert_fail@plt+0xbd4>
   11ef4:	add	r3, pc, r3
   11ef8:	ldr	r2, [r3, r2]
   11efc:	cmp	r2, #0
   11f00:	bxeq	lr
   11f04:	b	11194 <__gmon_start__@plt>
   11f08:	andeq	r2, r2, r4, lsl #2
   11f0c:	andeq	r0, r0, r0, asr #2
   11f10:	push	{r3, lr}
   11f14:	movw	r0, #19144	; 0x4ac8
   11f18:	ldr	r3, [pc, #36]	; 11f44 <__assert_fail@plt+0xc0c>
   11f1c:	movt	r0, #3
   11f20:	rsb	r3, r0, r3
   11f24:	cmp	r3, #6
   11f28:	popls	{r3, pc}
   11f2c:	movw	r3, #0
   11f30:	movt	r3, #0
   11f34:	cmp	r3, #0
   11f38:	popeq	{r3, pc}
   11f3c:	blx	r3
   11f40:	pop	{r3, pc}
   11f44:	andeq	r4, r3, fp, asr #21
   11f48:	push	{r3, lr}
   11f4c:	movw	r0, #19144	; 0x4ac8
   11f50:	movw	r3, #19144	; 0x4ac8
   11f54:	movt	r0, #3
   11f58:	movt	r3, #3
   11f5c:	rsb	r3, r0, r3
   11f60:	asr	r3, r3, #2
   11f64:	add	r3, r3, r3, lsr #31
   11f68:	asrs	r1, r3, #1
   11f6c:	popeq	{r3, pc}
   11f70:	movw	r2, #0
   11f74:	movt	r2, #0
   11f78:	cmp	r2, #0
   11f7c:	popeq	{r3, pc}
   11f80:	blx	r2
   11f84:	pop	{r3, pc}
   11f88:	push	{r4, lr}
   11f8c:	movw	r4, #19144	; 0x4ac8
   11f90:	movt	r4, #3
   11f94:	ldrb	r3, [r4]
   11f98:	cmp	r3, #0
   11f9c:	popne	{r4, pc}
   11fa0:	bl	11f10 <__assert_fail@plt+0xbd8>
   11fa4:	mov	r3, #1
   11fa8:	strb	r3, [r4]
   11fac:	pop	{r4, pc}
   11fb0:	movw	r0, #15456	; 0x3c60
   11fb4:	movt	r0, #3
   11fb8:	push	{r3, lr}
   11fbc:	ldr	r3, [r0]
   11fc0:	cmp	r3, #0
   11fc4:	beq	11fdc <__assert_fail@plt+0xca4>
   11fc8:	movw	r3, #0
   11fcc:	movt	r3, #0
   11fd0:	cmp	r3, #0
   11fd4:	beq	11fdc <__assert_fail@plt+0xca4>
   11fd8:	blx	r3
   11fdc:	pop	{r3, lr}
   11fe0:	b	11f48 <__assert_fail@plt+0xc10>
   11fe4:	push	{r3, r4, r5, lr}
   11fe8:	mov	r4, r1
   11fec:	mov	r1, #46	; 0x2e
   11ff0:	bl	11284 <strrchr@plt>
   11ff4:	subs	r5, r0, #0
   11ff8:	beq	12040 <__assert_fail@plt+0xd08>
   11ffc:	ldr	r1, [pc, #68]	; 12048 <__assert_fail@plt+0xd10>
   12000:	add	r1, pc, r1
   12004:	bl	11128 <strcasecmp@plt>
   12008:	cmp	r0, #0
   1200c:	beq	12034 <__assert_fail@plt+0xcfc>
   12010:	ldr	r1, [pc, #52]	; 1204c <__assert_fail@plt+0xd14>
   12014:	mov	r0, r5
   12018:	add	r1, pc, r1
   1201c:	bl	11128 <strcasecmp@plt>
   12020:	cmp	r0, #0
   12024:	bne	12040 <__assert_fail@plt+0xd08>
   12028:	ldr	r0, [pc, #32]	; 12050 <__assert_fail@plt+0xd18>
   1202c:	add	r0, pc, r0
   12030:	pop	{r3, r4, r5, pc}
   12034:	ldr	r0, [pc, #24]	; 12054 <__assert_fail@plt+0xd1c>
   12038:	add	r0, pc, r0
   1203c:	pop	{r3, r4, r5, pc}
   12040:	mov	r0, r4
   12044:	pop	{r3, r4, r5, pc}
   12048:	andeq	ip, r0, r3, asr ip
   1204c:	andeq	ip, r0, r0, asr #24
   12050:	andeq	ip, r0, sp, lsr #24
   12054:	andeq	ip, r0, ip, lsl ip
   12058:	push	{r3, r4, r5, lr}
   1205c:	mov	r4, r0
   12060:	mov	r0, r1
   12064:	ldr	r1, [r4, #4]
   12068:	bl	19fe8 <__assert_fail@plt+0x8cb0>
   1206c:	ldr	r5, [r4, #4]
   12070:	mov	r1, #64	; 0x40
   12074:	str	r0, [r4, #24]
   12078:	mov	r0, r5
   1207c:	bl	111e8 <strchr@plt>
   12080:	cmp	r0, #0
   12084:	rsbne	r5, r5, r0
   12088:	strne	r5, [r4, #28]
   1208c:	bne	1209c <__assert_fail@plt+0xd64>
   12090:	mov	r0, r5
   12094:	bl	111dc <strlen@plt>
   12098:	str	r0, [r4, #28]
   1209c:	ldr	r5, [r4, #12]
   120a0:	cmp	r5, #0
   120a4:	beq	120c8 <__assert_fail@plt+0xd90>
   120a8:	ldrb	r3, [r5]
   120ac:	cmp	r3, #0
   120b0:	bne	120c0 <__assert_fail@plt+0xd88>
   120b4:	mov	r0, r5
   120b8:	ldr	r1, [r4, #24]
   120bc:	bl	12058 <__assert_fail@plt+0xd20>
   120c0:	ldr	r5, [r5, #20]
   120c4:	b	120a0 <__assert_fail@plt+0xd68>
   120c8:	pop	{r3, r4, r5, pc}
   120cc:	push	{r0, r1, r2, r3}
   120d0:	ldr	r3, [pc, #60]	; 12114 <__assert_fail@plt+0xddc>
   120d4:	push	{r0, r1, r2, lr}
   120d8:	add	r2, sp, #20
   120dc:	str	r2, [sp, #4]
   120e0:	add	r3, pc, r3
   120e4:	ldr	r2, [pc, #44]	; 12118 <__assert_fail@plt+0xde0>
   120e8:	ldr	r0, [pc, #44]	; 1211c <__assert_fail@plt+0xde4>
   120ec:	ldr	r4, [r3, r2]
   120f0:	add	r0, pc, r0
   120f4:	ldr	r1, [r4]
   120f8:	bl	112f0 <fputs@plt>
   120fc:	ldr	r0, [r4]
   12100:	ldr	r1, [sp, #16]
   12104:	ldr	r2, [sp, #4]
   12108:	bl	11290 <vfprintf@plt>
   1210c:	mov	r0, #1
   12110:	bl	111c4 <exit@plt>
   12114:	andeq	r1, r2, r8, lsl pc
   12118:	andeq	r0, r0, r4, lsr r1
   1211c:	andeq	ip, r0, sp, ror #22
   12120:	ubfx	r3, r0, #8, #8
   12124:	sub	sp, sp, #8
   12128:	lsl	r3, r3, #16
   1212c:	orr	r3, r3, r0, lsl #24
   12130:	orr	r3, r3, r0, lsr #24
   12134:	ubfx	r0, r0, #16, #8
   12138:	orr	r0, r3, r0, lsl #8
   1213c:	add	sp, sp, #8
   12140:	bx	lr
   12144:	ldr	r3, [r0, #4]
   12148:	push	{r4, r5, r6, lr}
   1214c:	cmp	r3, #0
   12150:	mov	r5, r0
   12154:	mov	r6, r1
   12158:	mov	r4, r2
   1215c:	beq	12164 <__assert_fail@plt+0xe2c>
   12160:	blx	r3
   12164:	ldr	r4, [r4, #12]
   12168:	cmp	r4, #0
   1216c:	beq	12194 <__assert_fail@plt+0xe5c>
   12170:	ldrb	r3, [r4]
   12174:	cmp	r3, #0
   12178:	bne	1218c <__assert_fail@plt+0xe54>
   1217c:	mov	r0, r5
   12180:	mov	r1, r6
   12184:	mov	r2, r4
   12188:	bl	12144 <__assert_fail@plt+0xe0c>
   1218c:	ldr	r4, [r4, #20]
   12190:	b	12168 <__assert_fail@plt+0xe30>
   12194:	pop	{r4, r5, r6, pc}
   12198:	push	{r3, r4, r5, r6, r7, lr}
   1219c:	subs	r7, r1, #0
   121a0:	mov	r4, r0
   121a4:	mov	r6, r2
   121a8:	beq	121b8 <__assert_fail@plt+0xe80>
   121ac:	ldrb	r3, [r0, #12]
   121b0:	cmp	r3, #0
   121b4:	beq	121cc <__assert_fail@plt+0xe94>
   121b8:	cmp	r6, #0
   121bc:	beq	121f8 <__assert_fail@plt+0xec0>
   121c0:	ldrb	r3, [r4, #13]
   121c4:	cmp	r3, #0
   121c8:	bne	121f8 <__assert_fail@plt+0xec0>
   121cc:	mov	r5, #0
   121d0:	ldr	r3, [r4, #24]
   121d4:	cmp	r5, r3
   121d8:	bge	121f8 <__assert_fail@plt+0xec0>
   121dc:	ldr	r3, [r4, #28]
   121e0:	mov	r1, r7
   121e4:	mov	r2, r6
   121e8:	ldr	r0, [r3, r5, lsl #2]
   121ec:	add	r5, r5, #1
   121f0:	bl	12198 <__assert_fail@plt+0xe60>
   121f4:	b	121d0 <__assert_fail@plt+0xe98>
   121f8:	ldrb	r3, [r4, #12]
   121fc:	cmp	r3, #0
   12200:	ldrb	r3, [r4, #13]
   12204:	movne	r7, #1
   12208:	cmp	r3, #0
   1220c:	and	r7, r7, #1
   12210:	strb	r7, [r4, #12]
   12214:	movne	r6, #1
   12218:	and	r6, r6, #1
   1221c:	strb	r6, [r4, #13]
   12220:	pop	{r3, r4, r5, r6, r7, pc}
   12224:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12228:	subs	r9, r1, #0
   1222c:	mov	r4, r0
   12230:	mov	r7, r2
   12234:	beq	12244 <__assert_fail@plt+0xf0c>
   12238:	ldrb	r3, [r0, #12]
   1223c:	cmp	r3, #0
   12240:	bne	12294 <__assert_fail@plt+0xf5c>
   12244:	cmp	r7, #0
   12248:	bne	12260 <__assert_fail@plt+0xf28>
   1224c:	ldrb	r3, [r4, #12]
   12250:	cmp	r3, #0
   12254:	moveq	r9, r3
   12258:	eorne	r9, r9, #1
   1225c:	b	12270 <__assert_fail@plt+0xf38>
   12260:	ldrb	r3, [r4, #13]
   12264:	cmp	r3, #0
   12268:	bne	12294 <__assert_fail@plt+0xf5c>
   1226c:	b	1224c <__assert_fail@plt+0xf14>
   12270:	ldrb	r3, [r4, #13]
   12274:	and	r9, r9, #1
   12278:	strb	r9, [r4, #12]
   1227c:	cmp	r3, #0
   12280:	eorne	r7, r7, #1
   12284:	moveq	r7, r3
   12288:	and	r7, r7, #1
   1228c:	strb	r7, [r4, #13]
   12290:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12294:	ldr	sl, [pc, #80]	; 122ec <__assert_fail@plt+0xfb4>
   12298:	mov	r5, #0
   1229c:	add	sl, pc, sl
   122a0:	ldr	r8, [r5, sl]
   122a4:	mov	r6, #0
   122a8:	ldr	r3, [r8, #24]
   122ac:	cmp	r6, r3
   122b0:	bge	122dc <__assert_fail@plt+0xfa4>
   122b4:	ldr	r3, [r8, #28]
   122b8:	ldr	r3, [r3, r6, lsl #2]
   122bc:	cmp	r3, r4
   122c0:	bne	122d4 <__assert_fail@plt+0xf9c>
   122c4:	mov	r0, r8
   122c8:	mov	r1, r9
   122cc:	mov	r2, r7
   122d0:	bl	12224 <__assert_fail@plt+0xeec>
   122d4:	add	r6, r6, #1
   122d8:	b	122a8 <__assert_fail@plt+0xf70>
   122dc:	add	r5, r5, #4
   122e0:	cmp	r5, #236	; 0xec
   122e4:	bne	122a0 <__assert_fail@plt+0xf68>
   122e8:	b	1224c <__assert_fail@plt+0xf14>
   122ec:	andeq	r1, r2, r8, ror fp
   122f0:	push	{r2, r3}
   122f4:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   122f8:	add	r2, sp, #44	; 0x2c
   122fc:	str	r2, [sp, #12]
   12300:	mov	r4, r0
   12304:	ldrb	r2, [r0, #12]
   12308:	ldr	r3, [pc, #196]	; 123d4 <__assert_fail@plt+0x109c>
   1230c:	cmp	r2, #0
   12310:	ldrb	r6, [r0, #13]
   12314:	add	r3, pc, r3
   12318:	beq	12330 <__assert_fail@plt+0xff8>
   1231c:	ldr	r2, [pc, #180]	; 123d8 <__assert_fail@plt+0x10a0>
   12320:	ldr	r2, [r3, r2]
   12324:	ldr	r2, [r2]
   12328:	cmp	r2, #0
   1232c:	ble	1234c <__assert_fail@plt+0x1014>
   12330:	cmp	r6, #0
   12334:	beq	123c4 <__assert_fail@plt+0x108c>
   12338:	ldr	r2, [pc, #152]	; 123d8 <__assert_fail@plt+0x10a0>
   1233c:	ldr	r2, [r3, r2]
   12340:	ldr	r2, [r2]
   12344:	cmp	r2, #1
   12348:	bgt	123c4 <__assert_fail@plt+0x108c>
   1234c:	ldr	r7, [r1, #16]
   12350:	ldr	r2, [pc, #132]	; 123dc <__assert_fail@plt+0x10a4>
   12354:	ldr	r1, [pc, #132]	; 123e0 <__assert_fail@plt+0x10a8>
   12358:	mov	r0, r7
   1235c:	add	r1, pc, r1
   12360:	ldr	r5, [r3, r2]
   12364:	bl	11098 <strcmp@plt>
   12368:	ldr	r8, [r5]
   1236c:	cmp	r0, #0
   12370:	movne	r2, r7
   12374:	ldreq	r2, [pc, #104]	; 123e4 <__assert_fail@plt+0x10ac>
   12378:	addeq	r2, pc, r2
   1237c:	cmp	r6, #0
   12380:	ldrne	r3, [pc, #96]	; 123e8 <__assert_fail@plt+0x10b0>
   12384:	addne	r3, pc, r3
   12388:	ldreq	r3, [pc, #92]	; 123ec <__assert_fail@plt+0x10b4>
   1238c:	addeq	r3, pc, r3
   12390:	ldr	r1, [r4]
   12394:	mov	r0, r8
   12398:	str	r1, [sp]
   1239c:	ldr	r1, [pc, #76]	; 123f0 <__assert_fail@plt+0x10b8>
   123a0:	add	r1, pc, r1
   123a4:	bl	111f4 <fprintf@plt>
   123a8:	ldr	r1, [sp, #40]	; 0x28
   123ac:	ldr	r0, [r5]
   123b0:	ldr	r2, [sp, #12]
   123b4:	bl	11290 <vfprintf@plt>
   123b8:	mov	r0, #10
   123bc:	ldr	r1, [r5]
   123c0:	bl	1129c <fputc@plt>
   123c4:	add	sp, sp, #16
   123c8:	pop	{r4, r5, r6, r7, r8, lr}
   123cc:	add	sp, sp, #8
   123d0:	bx	lr
   123d4:	andeq	r1, r2, r4, ror #25
   123d8:	andeq	r0, r0, r8, lsr r1
   123dc:	andeq	r0, r0, r4, lsr r1
   123e0:	andeq	lr, r0, sp, ror #9
   123e4:	andeq	ip, r0, r5, asr #31
   123e8:	andeq	ip, r0, r2, asr #31
   123ec:	andeq	ip, r0, r0, asr #31
   123f0:			; <UNDEFINED> instruction: 0x0000cfb4
   123f4:	ldr	r2, [pc, #12]	; 12408 <__assert_fail@plt+0x10d0>
   123f8:	mov	r3, #3
   123fc:	str	r3, [r0, #16]
   12400:	add	r2, pc, r2
   12404:	b	122f0 <__assert_fail@plt+0xfb8>
   12408:	andeq	ip, r0, r2, ror #30
   1240c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12410:	mov	r6, r0
   12414:	ldr	fp, [pc, #140]	; 124a8 <__assert_fail@plt+0x1170>
   12418:	mov	r9, r1
   1241c:	ldr	r4, [r2, #8]
   12420:	mov	r7, r2
   12424:	add	fp, pc, fp
   12428:	mov	sl, #3
   1242c:	cmp	r4, #0
   12430:	beq	124a0 <__assert_fail@plt+0x1168>
   12434:	ldrb	r3, [r4]
   12438:	cmp	r3, #0
   1243c:	ldreq	r5, [r4, #20]
   12440:	bne	12498 <__assert_fail@plt+0x1160>
   12444:	cmp	r5, #0
   12448:	beq	12498 <__assert_fail@plt+0x1160>
   1244c:	ldrb	r3, [r5]
   12450:	cmp	r3, #0
   12454:	bne	12490 <__assert_fail@plt+0x1158>
   12458:	ldr	r8, [r4, #4]
   1245c:	ldr	r1, [r5, #4]
   12460:	mov	r0, r8
   12464:	bl	11098 <strcmp@plt>
   12468:	cmp	r0, #0
   1246c:	bne	12490 <__assert_fail@plt+0x1158>
   12470:	ldr	r3, [r7, #24]
   12474:	mov	r0, r6
   12478:	str	sl, [r6, #16]
   1247c:	mov	r1, r9
   12480:	mov	r2, fp
   12484:	str	r3, [sp]
   12488:	mov	r3, r8
   1248c:	bl	122f0 <__assert_fail@plt+0xfb8>
   12490:	ldr	r5, [r5, #20]
   12494:	b	12444 <__assert_fail@plt+0x110c>
   12498:	ldr	r4, [r4, #20]
   1249c:	b	1242c <__assert_fail@plt+0x10f4>
   124a0:	add	sp, sp, #12
   124a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124a8:	andeq	ip, r0, r0, asr pc
   124ac:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   124b0:	mov	r6, r0
   124b4:	ldr	r9, [pc, #108]	; 12528 <__assert_fail@plt+0x11f0>
   124b8:	mov	r7, r1
   124bc:	ldr	r4, [r2, #12]
   124c0:	mov	r8, #3
   124c4:	add	r9, pc, r9
   124c8:	cmp	r4, #0
   124cc:	beq	12524 <__assert_fail@plt+0x11ec>
   124d0:	ldrb	r3, [r4]
   124d4:	cmp	r3, #0
   124d8:	ldreq	r5, [r4, #20]
   124dc:	bne	1251c <__assert_fail@plt+0x11e4>
   124e0:	cmp	r5, #0
   124e4:	beq	1251c <__assert_fail@plt+0x11e4>
   124e8:	ldr	r0, [r4, #4]
   124ec:	ldr	r1, [r5, #4]
   124f0:	bl	11098 <strcmp@plt>
   124f4:	cmp	r0, #0
   124f8:	bne	12514 <__assert_fail@plt+0x11dc>
   124fc:	str	r8, [r6, #16]
   12500:	mov	r0, r6
   12504:	mov	r1, r7
   12508:	mov	r2, r9
   1250c:	ldr	r3, [r4, #24]
   12510:	bl	122f0 <__assert_fail@plt+0xfb8>
   12514:	ldr	r5, [r5, #20]
   12518:	b	124e0 <__assert_fail@plt+0x11a8>
   1251c:	ldr	r4, [r4, #20]
   12520:	b	124c8 <__assert_fail@plt+0x1190>
   12524:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12528:	ldrdeq	ip, [r0], -r1
   1252c:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12530:	mov	r4, r0
   12534:	ldr	r6, [r2, #4]
   12538:	mov	r7, r1
   1253c:	ldr	r1, [r4, #8]
   12540:	mov	r5, r2
   12544:	mov	r0, r6
   12548:	bl	1132c <strspn@plt>
   1254c:	ldr	r3, [r5, #28]
   12550:	cmp	r0, r3
   12554:	bge	12580 <__assert_fail@plt+0x1248>
   12558:	ldr	r2, [r5, #24]
   1255c:	mov	r3, #3
   12560:	str	r3, [r4, #16]
   12564:	mov	r1, r7
   12568:	ldrb	r3, [r6, r0]
   1256c:	mov	r0, r4
   12570:	str	r2, [sp]
   12574:	ldr	r2, [pc, #12]	; 12588 <__assert_fail@plt+0x1250>
   12578:	add	r2, pc, r2
   1257c:	bl	122f0 <__assert_fail@plt+0xfb8>
   12580:	add	sp, sp, #12
   12584:	pop	{r4, r5, r6, r7, pc}
   12588:	andeq	ip, r0, r4, lsr lr
   1258c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12590:	sub	sp, sp, #28
   12594:	ldr	fp, [pc, #260]	; 126a0 <__assert_fail@plt+0x1368>
   12598:	mov	r5, r0
   1259c:	ldr	r4, [r2, #8]
   125a0:	mov	r6, r2
   125a4:	ldr	r3, [pc, #248]	; 126a4 <__assert_fail@plt+0x136c>
   125a8:	add	fp, pc, fp
   125ac:	mov	sl, #3
   125b0:	str	r1, [sp, #16]
   125b4:	add	r3, pc, r3
   125b8:	str	r3, [sp, #20]
   125bc:	cmp	r4, #0
   125c0:	beq	12698 <__assert_fail@plt+0x1360>
   125c4:	ldrb	r3, [r4]
   125c8:	cmp	r3, #0
   125cc:	bne	12690 <__assert_fail@plt+0x1358>
   125d0:	ldr	r8, [r4, #4]
   125d4:	ldr	r7, [r5, #8]
   125d8:	mov	r0, r8
   125dc:	mov	r1, r7
   125e0:	bl	1132c <strspn@plt>
   125e4:	mov	r9, r0
   125e8:	mov	r0, r8
   125ec:	bl	111dc <strlen@plt>
   125f0:	cmp	r9, r0
   125f4:	beq	12690 <__assert_fail@plt+0x1358>
   125f8:	mov	r0, r8
   125fc:	ldr	r1, [sp, #20]
   12600:	bl	11098 <strcmp@plt>
   12604:	cmp	r0, #0
   12608:	beq	12690 <__assert_fail@plt+0x1358>
   1260c:	ldrb	r0, [r8, r9]
   12610:	mov	r1, r9
   12614:	cmp	r0, #35	; 0x23
   12618:	bne	12650 <__assert_fail@plt+0x1318>
   1261c:	cmp	r9, #0
   12620:	beq	12634 <__assert_fail@plt+0x12fc>
   12624:	add	r0, r8, r9
   12628:	ldrb	r0, [r0, #-1]
   1262c:	cmp	r0, #44	; 0x2c
   12630:	bne	12650 <__assert_fail@plt+0x1318>
   12634:	add	r3, r9, #1
   12638:	mov	r1, r7
   1263c:	add	r9, r8, r3
   12640:	mov	r0, r9
   12644:	bl	1132c <strspn@plt>
   12648:	mov	r1, r0
   1264c:	b	12654 <__assert_fail@plt+0x131c>
   12650:	mov	r9, r8
   12654:	mov	r0, r9
   12658:	str	r1, [sp, #12]
   1265c:	bl	111dc <strlen@plt>
   12660:	ldr	r1, [sp, #12]
   12664:	cmp	r1, r0
   12668:	bcs	12690 <__assert_fail@plt+0x1358>
   1266c:	str	sl, [r5, #16]
   12670:	mov	r0, r5
   12674:	ldrb	r3, [r9, r1]
   12678:	str	r8, [sp]
   1267c:	ldr	r2, [r6, #24]
   12680:	ldr	r1, [sp, #16]
   12684:	str	r2, [sp, #4]
   12688:	mov	r2, fp
   1268c:	bl	122f0 <__assert_fail@plt+0xfb8>
   12690:	ldr	r4, [r4, #20]
   12694:	b	125bc <__assert_fail@plt+0x1284>
   12698:	add	sp, sp, #28
   1269c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   126a0:	andeq	ip, r0, sl, lsr lr
   126a4:	andeq	ip, r0, r2, lsr #28
   126a8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126ac:	mov	r6, r0
   126b0:	ldr	fp, [pc, #124]	; 12734 <__assert_fail@plt+0x13fc>
   126b4:	mov	r9, r1
   126b8:	ldr	r4, [r2, #8]
   126bc:	mov	r7, r2
   126c0:	add	fp, pc, fp
   126c4:	mov	sl, #3
   126c8:	cmp	r4, #0
   126cc:	beq	1272c <__assert_fail@plt+0x13f4>
   126d0:	ldrb	r3, [r4]
   126d4:	cmp	r3, #0
   126d8:	bne	12724 <__assert_fail@plt+0x13ec>
   126dc:	ldr	r5, [r4, #4]
   126e0:	ldr	r1, [r6, #8]
   126e4:	mov	r0, r5
   126e8:	bl	1132c <strspn@plt>
   126ec:	mov	r8, r0
   126f0:	mov	r0, r5
   126f4:	bl	111dc <strlen@plt>
   126f8:	cmp	r8, r0
   126fc:	bcs	12724 <__assert_fail@plt+0x13ec>
   12700:	str	sl, [r6, #16]
   12704:	mov	r0, r6
   12708:	ldrb	r3, [r5, r8]
   1270c:	mov	r1, r9
   12710:	str	r5, [sp]
   12714:	ldr	r2, [r7, #24]
   12718:	str	r2, [sp, #4]
   1271c:	mov	r2, fp
   12720:	bl	122f0 <__assert_fail@plt+0xfb8>
   12724:	ldr	r4, [r4, #20]
   12728:	b	126c8 <__assert_fail@plt+0x1390>
   1272c:	add	sp, sp, #12
   12730:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12734:	andeq	ip, r0, r0, ror #26
   12738:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1273c:	mov	r4, r0
   12740:	ldr	r5, [r2, #4]
   12744:	mov	r8, r1
   12748:	ldr	r1, [r4, #8]
   1274c:	mov	r6, r2
   12750:	mov	r0, r5
   12754:	bl	1132c <strspn@plt>
   12758:	mov	r7, r0
   1275c:	mov	r0, r5
   12760:	bl	111dc <strlen@plt>
   12764:	cmp	r7, r0
   12768:	bcs	12794 <__assert_fail@plt+0x145c>
   1276c:	ldr	r2, [r6, #24]
   12770:	mov	r3, #3
   12774:	str	r3, [r4, #16]
   12778:	mov	r0, r4
   1277c:	ldrb	r3, [r5, r7]
   12780:	mov	r1, r8
   12784:	str	r2, [sp]
   12788:	ldr	r2, [pc, #12]	; 1279c <__assert_fail@plt+0x1464>
   1278c:	add	r2, pc, r2
   12790:	bl	122f0 <__assert_fail@plt+0xfb8>
   12794:	add	sp, sp, #8
   12798:	pop	{r4, r5, r6, r7, r8, pc}
   1279c:	andeq	ip, r0, r6, asr #25
   127a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127a4:	mov	sl, r1
   127a8:	ldr	r1, [pc, #332]	; 128fc <__assert_fail@plt+0x15c4>
   127ac:	sub	sp, sp, #20
   127b0:	mov	r5, r0
   127b4:	mov	r0, r2
   127b8:	add	r1, pc, r1
   127bc:	mov	r4, r2
   127c0:	bl	18044 <__assert_fail@plt+0x6d0c>
   127c4:	cmp	r0, #0
   127c8:	beq	128f4 <__assert_fail@plt+0x15bc>
   127cc:	ldr	r3, [r4, #16]
   127d0:	cmp	r3, #0
   127d4:	bne	127fc <__assert_fail@plt+0x14c4>
   127d8:	ldr	r2, [pc, #288]	; 12900 <__assert_fail@plt+0x15c8>
   127dc:	mov	r3, #3
   127e0:	mov	r0, r5
   127e4:	str	r3, [r5, #16]
   127e8:	mov	r1, sl
   127ec:	add	r2, pc, r2
   127f0:	add	sp, sp, #20
   127f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   127f8:	b	122f0 <__assert_fail@plt+0xfb8>
   127fc:	ldr	r8, [r3, #36]	; 0x24
   12800:	ldr	r9, [r3, #40]	; 0x28
   12804:	cmn	r8, #1
   12808:	ldr	r7, [r4, #36]	; 0x24
   1280c:	ldr	r6, [r4, #40]	; 0x28
   12810:	moveq	r8, #2
   12814:	cmn	r9, #1
   12818:	ldr	fp, [r0, #8]
   1281c:	moveq	r9, #1
   12820:	cmn	r7, #1
   12824:	moveq	r7, #2
   12828:	cmn	r6, #1
   1282c:	moveq	r6, #1
   12830:	cmp	fp, #0
   12834:	bne	128a8 <__assert_fail@plt+0x1570>
   12838:	cmp	r8, r7
   1283c:	beq	1286c <__assert_fail@plt+0x1534>
   12840:	mov	r2, #3
   12844:	str	r2, [r5, #16]
   12848:	str	r7, [sp]
   1284c:	mov	r0, r5
   12850:	ldr	r3, [r3, #24]
   12854:	mov	r1, sl
   12858:	ldr	r2, [pc, #164]	; 12904 <__assert_fail@plt+0x15cc>
   1285c:	stmib	sp, {r3, r8}
   12860:	add	r2, pc, r2
   12864:	ldr	r3, [r4, #24]
   12868:	bl	122f0 <__assert_fail@plt+0xfb8>
   1286c:	cmp	r9, r6
   12870:	beq	128f4 <__assert_fail@plt+0x15bc>
   12874:	mov	r3, #3
   12878:	str	r3, [r5, #16]
   1287c:	str	r6, [sp]
   12880:	mov	r0, r5
   12884:	ldr	r3, [r4, #16]
   12888:	mov	r1, sl
   1288c:	ldr	r2, [pc, #116]	; 12908 <__assert_fail@plt+0x15d0>
   12890:	ldr	r3, [r3, #24]
   12894:	add	r2, pc, r2
   12898:	stmib	sp, {r3, r9}
   1289c:	ldr	r3, [r4, #24]
   128a0:	bl	122f0 <__assert_fail@plt+0xfb8>
   128a4:	b	128f4 <__assert_fail@plt+0x15bc>
   128a8:	add	r1, r8, r7
   128ac:	mov	r0, fp
   128b0:	add	r1, r1, r6
   128b4:	lsl	r1, r1, #2
   128b8:	bl	1e1ac <__assert_fail@plt+0xce74>
   128bc:	cmp	r1, #0
   128c0:	beq	128f4 <__assert_fail@plt+0x15bc>
   128c4:	ldr	r2, [pc, #64]	; 1290c <__assert_fail@plt+0x15d4>
   128c8:	mov	r3, #3
   128cc:	mov	r0, r5
   128d0:	str	r3, [r5, #16]
   128d4:	mov	r1, sl
   128d8:	str	fp, [sp]
   128dc:	str	r8, [sp, #4]
   128e0:	add	r2, pc, r2
   128e4:	str	r7, [sp, #8]
   128e8:	str	r6, [sp, #12]
   128ec:	ldr	r3, [r4, #24]
   128f0:	bl	122f0 <__assert_fail@plt+0xfb8>
   128f4:	add	sp, sp, #20
   128f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   128fc:			; <UNDEFINED> instruction: 0x0000ccb8
   12900:	andeq	ip, r0, fp, lsl #25
   12904:	andeq	ip, r0, r9, lsr ip
   12908:	andeq	ip, r0, r5, asr ip
   1290c:	andeq	ip, r0, r6, asr ip
   12910:	push	{r4, r5, r6, r7, r8, r9, lr}
   12914:	mov	r8, r1
   12918:	ldr	r1, [pc, #232]	; 12a08 <__assert_fail@plt+0x16d0>
   1291c:	sub	sp, sp, #20
   12920:	mov	r4, r0
   12924:	mov	r0, r2
   12928:	add	r1, pc, r1
   1292c:	mov	r5, r2
   12930:	bl	18044 <__assert_fail@plt+0x6d0c>
   12934:	subs	r9, r0, #0
   12938:	beq	12a00 <__assert_fail@plt+0x16c8>
   1293c:	ldr	r3, [r5, #16]
   12940:	cmp	r3, #0
   12944:	bne	1296c <__assert_fail@plt+0x1634>
   12948:	ldr	r2, [pc, #188]	; 12a0c <__assert_fail@plt+0x16d4>
   1294c:	mov	r3, #3
   12950:	mov	r0, r4
   12954:	str	r3, [r4, #16]
   12958:	mov	r1, r8
   1295c:	add	r2, pc, r2
   12960:	add	sp, sp, #20
   12964:	pop	{r4, r5, r6, r7, r8, r9, lr}
   12968:	b	122f0 <__assert_fail@plt+0xfb8>
   1296c:	ldr	r3, [r9, #8]
   12970:	cmp	r3, #0
   12974:	bne	12998 <__assert_fail@plt+0x1660>
   12978:	ldr	r2, [pc, #144]	; 12a10 <__assert_fail@plt+0x16d8>
   1297c:	mov	r3, #3
   12980:	mov	r0, r4
   12984:	str	r3, [r4, #16]
   12988:	mov	r1, r8
   1298c:	add	r2, pc, r2
   12990:	ldr	r3, [r5, #24]
   12994:	bl	122f0 <__assert_fail@plt+0xfb8>
   12998:	ldr	r3, [r5, #16]
   1299c:	ldr	r9, [r9, #8]
   129a0:	ldr	r7, [r3, #36]	; 0x24
   129a4:	ldr	r6, [r3, #40]	; 0x28
   129a8:	cmn	r7, #1
   129ac:	moveq	r7, #2
   129b0:	cmn	r6, #1
   129b4:	moveq	r6, #1
   129b8:	add	r1, r7, r6
   129bc:	lsls	r1, r1, #2
   129c0:	beq	129d4 <__assert_fail@plt+0x169c>
   129c4:	mov	r0, r9
   129c8:	bl	1e1ac <__assert_fail@plt+0xce74>
   129cc:	cmp	r1, #0
   129d0:	beq	12a00 <__assert_fail@plt+0x16c8>
   129d4:	ldr	r2, [pc, #56]	; 12a14 <__assert_fail@plt+0x16dc>
   129d8:	mov	r3, #3
   129dc:	mov	r0, r4
   129e0:	str	r3, [r4, #16]
   129e4:	mov	r1, r8
   129e8:	str	r9, [sp]
   129ec:	str	r7, [sp, #4]
   129f0:	add	r2, pc, r2
   129f4:	str	r6, [sp, #8]
   129f8:	ldr	r3, [r5, #24]
   129fc:	bl	122f0 <__assert_fail@plt+0xfb8>
   12a00:	add	sp, sp, #20
   12a04:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12a08:	andeq	sp, r0, r4, asr #26
   12a0c:	andeq	ip, r0, sp, asr ip
   12a10:	andeq	ip, r0, ip, asr #24
   12a14:	andeq	ip, r0, r6, lsl #24
   12a18:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12a1c:	mov	r4, r0
   12a20:	ldr	r5, [r0, #8]
   12a24:	mov	r7, r1
   12a28:	mov	r0, r2
   12a2c:	mov	r6, r2
   12a30:	mov	r1, r5
   12a34:	bl	18044 <__assert_fail@plt+0x6d0c>
   12a38:	cmp	r0, #0
   12a3c:	beq	12a74 <__assert_fail@plt+0x173c>
   12a40:	ldr	r3, [r0, #8]
   12a44:	cmp	r3, #4
   12a48:	beq	12a74 <__assert_fail@plt+0x173c>
   12a4c:	mov	r3, #3
   12a50:	str	r3, [r4, #16]
   12a54:	ldr	r3, [r6, #24]
   12a58:	mov	r0, r4
   12a5c:	ldr	r2, [pc, #24]	; 12a7c <__assert_fail@plt+0x1744>
   12a60:	mov	r1, r7
   12a64:	str	r3, [sp]
   12a68:	add	r2, pc, r2
   12a6c:	mov	r3, r5
   12a70:	bl	122f0 <__assert_fail@plt+0xfb8>
   12a74:	add	sp, sp, #12
   12a78:	pop	{r4, r5, r6, r7, pc}
   12a7c:	andeq	ip, r0, fp, ror #23
   12a80:	ldr	r1, [pc, #80]	; 12ad8 <__assert_fail@plt+0x17a0>
   12a84:	mvn	r3, #0
   12a88:	push	{r4, lr}
   12a8c:	mov	r0, r2
   12a90:	str	r3, [r2, #36]	; 0x24
   12a94:	add	r1, pc, r1
   12a98:	str	r3, [r2, #40]	; 0x28
   12a9c:	mov	r4, r2
   12aa0:	bl	18044 <__assert_fail@plt+0x6d0c>
   12aa4:	cmp	r0, #0
   12aa8:	beq	12ab4 <__assert_fail@plt+0x177c>
   12aac:	bl	1811c <__assert_fail@plt+0x6de4>
   12ab0:	str	r0, [r4, #36]	; 0x24
   12ab4:	ldr	r1, [pc, #32]	; 12adc <__assert_fail@plt+0x17a4>
   12ab8:	mov	r0, r4
   12abc:	add	r1, pc, r1
   12ac0:	bl	18044 <__assert_fail@plt+0x6d0c>
   12ac4:	cmp	r0, #0
   12ac8:	popeq	{r4, pc}
   12acc:	bl	1811c <__assert_fail@plt+0x6de4>
   12ad0:	str	r0, [r4, #40]	; 0x28
   12ad4:	pop	{r4, pc}
   12ad8:	andeq	ip, r0, r8, ror #23
   12adc:	andeq	ip, r0, pc, asr #23
   12ae0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   12ae4:	mov	r4, r0
   12ae8:	ldr	r5, [r0, #8]
   12aec:	mov	r7, r1
   12af0:	mov	r0, r2
   12af4:	mov	r6, r2
   12af8:	mov	r1, r5
   12afc:	bl	18044 <__assert_fail@plt+0x6d0c>
   12b00:	cmp	r0, #0
   12b04:	beq	12b44 <__assert_fail@plt+0x180c>
   12b08:	add	ip, r0, #8
   12b0c:	ldm	ip, {r0, r1, r2}
   12b10:	bl	15450 <__assert_fail@plt+0x4118>
   12b14:	cmp	r0, #0
   12b18:	bne	12b44 <__assert_fail@plt+0x180c>
   12b1c:	mov	r3, #3
   12b20:	str	r3, [r4, #16]
   12b24:	ldr	r3, [r6, #24]
   12b28:	mov	r0, r4
   12b2c:	ldr	r2, [pc, #24]	; 12b4c <__assert_fail@plt+0x1814>
   12b30:	mov	r1, r7
   12b34:	str	r3, [sp]
   12b38:	add	r2, pc, r2
   12b3c:	mov	r3, r5
   12b40:	bl	122f0 <__assert_fail@plt+0xfb8>
   12b44:	add	sp, sp, #12
   12b48:	pop	{r4, r5, r6, r7, pc}
   12b4c:	andeq	ip, r0, pc, asr fp
   12b50:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b54:	mov	r9, r0
   12b58:	sub	sp, sp, #36	; 0x24
   12b5c:	mov	r0, r2
   12b60:	mov	r8, r2
   12b64:	mov	sl, r1
   12b68:	bl	18014 <__assert_fail@plt+0x6cdc>
   12b6c:	ldr	r3, [r8, #16]
   12b70:	cmp	r3, #0
   12b74:	mov	fp, r0
   12b78:	beq	12ce0 <__assert_fail@plt+0x19a8>
   12b7c:	ldr	r2, [r3, #48]	; 0x30
   12b80:	ldr	r3, [pc, #352]	; 12ce8 <__assert_fail@plt+0x19b0>
   12b84:	add	r3, pc, r3
   12b88:	add	r3, r3, #236	; 0xec
   12b8c:	cmp	r2, r3
   12b90:	bne	12ce0 <__assert_fail@plt+0x19a8>
   12b94:	ldr	r1, [pc, #336]	; 12cec <__assert_fail@plt+0x19b4>
   12b98:	mov	r0, r8
   12b9c:	add	r1, pc, r1
   12ba0:	bl	18044 <__assert_fail@plt+0x6d0c>
   12ba4:	cmp	r0, #0
   12ba8:	ldrne	r5, [r0, #12]
   12bac:	bne	12c00 <__assert_fail@plt+0x18c8>
   12bb0:	ldr	r1, [pc, #312]	; 12cf0 <__assert_fail@plt+0x19b8>
   12bb4:	mov	r0, r8
   12bb8:	add	r1, pc, r1
   12bbc:	bl	18044 <__assert_fail@plt+0x6d0c>
   12bc0:	cmp	r0, #0
   12bc4:	bne	12bdc <__assert_fail@plt+0x18a4>
   12bc8:	ldr	r3, [r8, #16]
   12bcc:	ldr	r3, [r3, #16]
   12bd0:	cmp	r3, #0
   12bd4:	bne	12c28 <__assert_fail@plt+0x18f0>
   12bd8:	b	12ce0 <__assert_fail@plt+0x19a8>
   12bdc:	ldr	r3, [r0, #8]
   12be0:	cmp	r3, #0
   12be4:	beq	12bc8 <__assert_fail@plt+0x1890>
   12be8:	ldr	r3, [r8, #36]	; 0x24
   12bec:	ldr	r2, [r0, #12]
   12bf0:	cmn	r3, #1
   12bf4:	lslne	r3, r3, #2
   12bf8:	moveq	r3, #8
   12bfc:	add	r5, r2, r3
   12c00:	cmp	r5, #0
   12c04:	beq	12bc8 <__assert_fail@plt+0x1890>
   12c08:	ldr	r2, [r8, #16]
   12c0c:	mov	r0, #0
   12c10:	mov	r1, #0
   12c14:	ldr	r2, [r2, #36]	; 0x24
   12c18:	cmn	r2, #1
   12c1c:	movne	r4, r2
   12c20:	moveq	r4, #2
   12c24:	b	12c64 <__assert_fail@plt+0x192c>
   12c28:	ldr	r3, [pc, #196]	; 12cf4 <__assert_fail@plt+0x19bc>
   12c2c:	ldr	r2, [r8, #48]	; 0x30
   12c30:	add	r3, pc, r3
   12c34:	add	r3, r3, #236	; 0xec
   12c38:	cmp	r2, r3
   12c3c:	beq	12ce0 <__assert_fail@plt+0x19a8>
   12c40:	ldr	r2, [pc, #176]	; 12cf8 <__assert_fail@plt+0x19c0>
   12c44:	mov	r3, #3
   12c48:	mov	r0, r9
   12c4c:	str	r3, [r9, #16]
   12c50:	mov	r1, sl
   12c54:	add	r2, pc, r2
   12c58:	ldr	r3, [r8, #24]
   12c5c:	bl	122f0 <__assert_fail@plt+0xfb8>
   12c60:	b	12ce0 <__assert_fail@plt+0x19a8>
   12c64:	subs	r4, r4, #1
   12c68:	bcc	12c8c <__assert_fail@plt+0x1954>
   12c6c:	mov	r7, r0
   12c70:	ldr	r0, [r5], #4
   12c74:	bl	12120 <__assert_fail@plt+0xde8>
   12c78:	mov	r6, #0
   12c7c:	mov	r1, r7
   12c80:	orr	r2, r6, r0
   12c84:	mov	r0, r2
   12c88:	b	12c64 <__assert_fail@plt+0x192c>
   12c8c:	add	r6, sp, #12
   12c90:	ldr	r2, [pc, #100]	; 12cfc <__assert_fail@plt+0x19c4>
   12c94:	strd	r0, [sp]
   12c98:	mov	r1, #17
   12c9c:	add	r2, pc, r2
   12ca0:	mov	r0, r6
   12ca4:	bl	1120c <snprintf@plt>
   12ca8:	mov	r0, fp
   12cac:	mov	r1, r6
   12cb0:	bl	11098 <strcmp@plt>
   12cb4:	cmp	r0, #0
   12cb8:	beq	12ce0 <__assert_fail@plt+0x19a8>
   12cbc:	ldr	r2, [pc, #60]	; 12d00 <__assert_fail@plt+0x19c8>
   12cc0:	mov	r3, #3
   12cc4:	mov	r0, r9
   12cc8:	str	r3, [r9, #16]
   12ccc:	mov	r1, sl
   12cd0:	str	r6, [sp]
   12cd4:	add	r2, pc, r2
   12cd8:	ldr	r3, [r8, #24]
   12cdc:	bl	122f0 <__assert_fail@plt+0xfb8>
   12ce0:	add	sp, sp, #36	; 0x24
   12ce4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12ce8:	muleq	r2, r0, r2
   12cec:	ldrdeq	sp, [r0], -r0
   12cf0:			; <UNDEFINED> instruction: 0x0000c8b8
   12cf4:	andeq	r1, r2, r4, ror #3
   12cf8:	andeq	ip, r0, r7, ror #20
   12cfc:	andeq	ip, r0, ip, asr #20
   12d00:	andeq	ip, r0, r9, lsl sl
   12d04:	push	{r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
   12d08:	mov	r4, r0
   12d0c:	mov	r0, r2
   12d10:	mov	r5, r2
   12d14:	mov	r6, r1
   12d18:	bl	18014 <__assert_fail@plt+0x6cdc>
   12d1c:	ldr	r3, [r5, #16]
   12d20:	cmp	r3, #0
   12d24:	mov	r8, r0
   12d28:	beq	12eb0 <__assert_fail@plt+0x1b78>
   12d2c:	ldr	r2, [r3, #48]	; 0x30
   12d30:	ldr	r3, [pc, #384]	; 12eb8 <__assert_fail@plt+0x1b80>
   12d34:	add	r3, pc, r3
   12d38:	add	r3, r3, #240	; 0xf0
   12d3c:	cmp	r2, r3
   12d40:	bne	12eb0 <__assert_fail@plt+0x1b78>
   12d44:	ldr	r1, [pc, #368]	; 12ebc <__assert_fail@plt+0x1b84>
   12d48:	mov	r0, r5
   12d4c:	add	r1, pc, r1
   12d50:	bl	18044 <__assert_fail@plt+0x6d0c>
   12d54:	cmp	r0, #0
   12d58:	bne	12d80 <__assert_fail@plt+0x1a48>
   12d5c:	ldr	r2, [pc, #348]	; 12ec0 <__assert_fail@plt+0x1b88>
   12d60:	mov	r3, #3
   12d64:	mov	r0, r4
   12d68:	str	r3, [r4, #16]
   12d6c:	mov	r1, r6
   12d70:	add	r2, pc, r2
   12d74:	ldr	r3, [r5, #24]
   12d78:	bl	122f0 <__assert_fail@plt+0xfb8>
   12d7c:	b	12eb0 <__assert_fail@plt+0x1b78>
   12d80:	ldr	r7, [r0, #12]
   12d84:	ldr	r3, [r7, #4]
   12d88:	cmp	r3, #0
   12d8c:	bne	12d9c <__assert_fail@plt+0x1a64>
   12d90:	ldr	r3, [r7, #8]
   12d94:	cmp	r3, #0
   12d98:	beq	12dbc <__assert_fail@plt+0x1a84>
   12d9c:	ldr	r2, [pc, #288]	; 12ec4 <__assert_fail@plt+0x1b8c>
   12da0:	mov	r3, #3
   12da4:	mov	r0, r4
   12da8:	str	r3, [r4, #16]
   12dac:	mov	r1, r6
   12db0:	add	r2, pc, r2
   12db4:	ldr	r3, [r5, #24]
   12db8:	bl	122f0 <__assert_fail@plt+0xfb8>
   12dbc:	ldr	r0, [r7]
   12dc0:	bl	12120 <__assert_fail@plt+0xde8>
   12dc4:	tst	r0, #-16777216	; 0xff000000
   12dc8:	mov	r7, r0
   12dcc:	ubfx	r9, r0, #11, #5
   12dd0:	ubfx	sl, r0, #8, #3
   12dd4:	beq	12df8 <__assert_fail@plt+0x1ac0>
   12dd8:	ldr	r2, [pc, #232]	; 12ec8 <__assert_fail@plt+0x1b90>
   12ddc:	mov	r3, #3
   12de0:	mov	r0, r4
   12de4:	str	r3, [r4, #16]
   12de8:	mov	r1, r6
   12dec:	add	r2, pc, r2
   12df0:	ldr	r3, [r5, #24]
   12df4:	bl	122f0 <__assert_fail@plt+0xfb8>
   12df8:	tst	r7, #255	; 0xff
   12dfc:	beq	12e20 <__assert_fail@plt+0x1ae8>
   12e00:	ldr	r2, [pc, #196]	; 12ecc <__assert_fail@plt+0x1b94>
   12e04:	mov	r3, #3
   12e08:	mov	r0, r4
   12e0c:	str	r3, [r4, #16]
   12e10:	mov	r1, r6
   12e14:	add	r2, pc, r2
   12e18:	ldr	r3, [r5, #24]
   12e1c:	bl	122f0 <__assert_fail@plt+0xfb8>
   12e20:	cmp	sl, #0
   12e24:	add	r7, sp, #8
   12e28:	beq	12e84 <__assert_fail@plt+0x1b4c>
   12e2c:	ldr	r2, [pc, #156]	; 12ed0 <__assert_fail@plt+0x1b98>
   12e30:	mov	r1, #5
   12e34:	mov	r3, r9
   12e38:	str	sl, [sp]
   12e3c:	add	r2, pc, r2
   12e40:	mov	r0, r7
   12e44:	bl	1120c <snprintf@plt>
   12e48:	mov	r0, r8
   12e4c:	mov	r1, r7
   12e50:	bl	11098 <strcmp@plt>
   12e54:	cmp	r0, #0
   12e58:	beq	12eb0 <__assert_fail@plt+0x1b78>
   12e5c:	ldr	r2, [pc, #112]	; 12ed4 <__assert_fail@plt+0x1b9c>
   12e60:	mov	r3, #3
   12e64:	mov	r0, r4
   12e68:	str	r3, [r4, #16]
   12e6c:	mov	r1, r6
   12e70:	str	r7, [sp]
   12e74:	add	r2, pc, r2
   12e78:	ldr	r3, [r5, #24]
   12e7c:	bl	122f0 <__assert_fail@plt+0xfb8>
   12e80:	b	12eb0 <__assert_fail@plt+0x1b78>
   12e84:	ldr	r2, [pc, #76]	; 12ed8 <__assert_fail@plt+0x1ba0>
   12e88:	mov	r1, #5
   12e8c:	mov	r3, r9
   12e90:	mov	r0, r7
   12e94:	add	r2, pc, r2
   12e98:	bl	1120c <snprintf@plt>
   12e9c:	mov	r0, r8
   12ea0:	mov	r1, r7
   12ea4:	bl	11098 <strcmp@plt>
   12ea8:	cmp	r0, #0
   12eac:	bne	12e2c <__assert_fail@plt+0x1af4>
   12eb0:	add	sp, sp, #16
   12eb4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12eb8:	andeq	r1, r2, r0, ror #1
   12ebc:	andeq	sp, r0, r0, lsr #18
   12ec0:			; <UNDEFINED> instruction: 0x0000c9b9
   12ec4:	muleq	r0, sl, r9
   12ec8:	muleq	r0, fp, r9
   12ecc:	andeq	ip, r0, r6, lsr #19
   12ed0:			; <UNDEFINED> instruction: 0x0000c9bd
   12ed4:	andeq	ip, r0, fp, lsl #19
   12ed8:	andeq	ip, r0, r8, ror #18
   12edc:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   12ee0:	mov	r5, r0
   12ee4:	ldr	r7, [r0, #8]
   12ee8:	mov	r9, r1
   12eec:	mov	r0, r2
   12ef0:	mov	r8, r2
   12ef4:	mov	r1, r7
   12ef8:	bl	18044 <__assert_fail@plt+0x6d0c>
   12efc:	cmp	r0, #0
   12f00:	beq	12f68 <__assert_fail@plt+0x1c30>
   12f04:	ldr	r6, [r0, #12]
   12f08:	ldr	r4, [r0, #8]
   12f0c:	cmp	r4, #0
   12f10:	ble	12f68 <__assert_fail@plt+0x1c30>
   12f14:	mov	r0, r6
   12f18:	mov	r1, r4
   12f1c:	bl	1126c <strnlen@plt>
   12f20:	cmp	r0, r4
   12f24:	bne	12f54 <__assert_fail@plt+0x1c1c>
   12f28:	mov	r3, #3
   12f2c:	str	r3, [r5, #16]
   12f30:	ldr	r3, [r8, #24]
   12f34:	mov	r0, r5
   12f38:	ldr	r2, [pc, #48]	; 12f70 <__assert_fail@plt+0x1c38>
   12f3c:	mov	r1, r9
   12f40:	str	r3, [sp]
   12f44:	add	r2, pc, r2
   12f48:	mov	r3, r7
   12f4c:	bl	122f0 <__assert_fail@plt+0xfb8>
   12f50:	b	12f68 <__assert_fail@plt+0x1c30>
   12f54:	mvn	r3, r0
   12f58:	add	r0, r0, #1
   12f5c:	add	r4, r4, r3
   12f60:	add	r6, r6, r0
   12f64:	b	12f0c <__assert_fail@plt+0x1bd4>
   12f68:	add	sp, sp, #12
   12f6c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   12f70:	strdeq	ip, [r0], -r0
   12f74:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12f78:	mov	r5, r0
   12f7c:	ldr	r9, [pc, #104]	; 12fec <__assert_fail@plt+0x1cb4>
   12f80:	mov	r8, r1
   12f84:	ldr	r4, [r2, #8]
   12f88:	mov	r6, r2
   12f8c:	add	r9, pc, r9
   12f90:	cmp	r4, #0
   12f94:	beq	12fe8 <__assert_fail@plt+0x1cb0>
   12f98:	ldrb	r3, [r4]
   12f9c:	cmp	r3, #0
   12fa0:	bne	12fe0 <__assert_fail@plt+0x1ca8>
   12fa4:	ldr	r7, [r4, #4]
   12fa8:	mov	r1, #45	; 0x2d
   12fac:	mov	r0, r7
   12fb0:	bl	11284 <strrchr@plt>
   12fb4:	cmp	r0, #0
   12fb8:	beq	12fe0 <__assert_fail@plt+0x1ca8>
   12fbc:	mov	r1, r9
   12fc0:	bl	11098 <strcmp@plt>
   12fc4:	cmp	r0, #0
   12fc8:	bne	12fe0 <__assert_fail@plt+0x1ca8>
   12fcc:	str	r7, [r5, #8]
   12fd0:	mov	r0, r5
   12fd4:	mov	r1, r8
   12fd8:	mov	r2, r6
   12fdc:	bl	12edc <__assert_fail@plt+0x1ba4>
   12fe0:	ldr	r4, [r4, #20]
   12fe4:	b	12f90 <__assert_fail@plt+0x1c58>
   12fe8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12fec:	ldrdeq	ip, [r0], -r1
   12ff0:	push	{r4, r5, r6, r7, r8, lr}
   12ff4:	mov	r6, r0
   12ff8:	mov	r0, r2
   12ffc:	mov	r5, r2
   13000:	mov	r7, r1
   13004:	bl	18014 <__assert_fail@plt+0x6cdc>
   13008:	ldr	r3, [r5, #16]
   1300c:	cmp	r3, #0
   13010:	mov	r4, r0
   13014:	beq	13024 <__assert_fail@plt+0x1cec>
   13018:	ldr	r3, [r3, #48]	; 0x30
   1301c:	cmp	r3, #0
   13020:	popne	{r4, r5, r6, r7, r8, pc}
   13024:	ldrb	r3, [r4]
   13028:	cmp	r3, #0
   1302c:	popeq	{r4, r5, r6, r7, r8, pc}
   13030:	ldr	r1, [pc, #132]	; 130bc <__assert_fail@plt+0x1d84>
   13034:	mov	r0, r4
   13038:	mov	r2, #2
   1303c:	add	r1, pc, r1
   13040:	bl	112fc <strncmp@plt>
   13044:	cmp	r0, #0
   13048:	bne	13070 <__assert_fail@plt+0x1d38>
   1304c:	ldr	r2, [pc, #108]	; 130c0 <__assert_fail@plt+0x1d88>
   13050:	mov	r3, #3
   13054:	mov	r0, r6
   13058:	str	r3, [r6, #16]
   1305c:	mov	r1, r7
   13060:	add	r2, pc, r2
   13064:	ldr	r3, [r5, #24]
   13068:	add	r4, r4, #2
   1306c:	bl	122f0 <__assert_fail@plt+0xfb8>
   13070:	ldrb	r3, [r4]
   13074:	cmp	r3, #48	; 0x30
   13078:	popne	{r4, r5, r6, r7, r8, pc}
   1307c:	bl	111b8 <__ctype_b_loc@plt>
   13080:	ldrb	r3, [r4, #1]
   13084:	lsl	r3, r3, #1
   13088:	ldr	r2, [r0]
   1308c:	ldrh	r3, [r2, r3]
   13090:	tst	r3, #4096	; 0x1000
   13094:	popeq	{r4, r5, r6, r7, r8, pc}
   13098:	ldr	r2, [pc, #36]	; 130c4 <__assert_fail@plt+0x1d8c>
   1309c:	mov	r3, #3
   130a0:	mov	r0, r6
   130a4:	str	r3, [r6, #16]
   130a8:	mov	r1, r7
   130ac:	ldr	r3, [r5, #24]
   130b0:	add	r2, pc, r2
   130b4:	pop	{r4, r5, r6, r7, r8, lr}
   130b8:	b	122f0 <__assert_fail@plt+0xfb8>
   130bc:	andeq	ip, r0, r8, lsr #16
   130c0:	andeq	ip, r0, r7, lsl #16
   130c4:	andeq	ip, r0, r6, ror #15
   130c8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   130cc:	mov	r4, r0
   130d0:	ldrb	r5, [r0, #20]
   130d4:	mov	r7, r1
   130d8:	ldr	r9, [r1, #12]
   130dc:	cmp	r5, #0
   130e0:	beq	13104 <__assert_fail@plt+0x1dcc>
   130e4:	ldr	r0, [pc, #256]	; 131ec <__assert_fail@plt+0x1eb4>
   130e8:	mov	r2, #117	; 0x75
   130ec:	ldr	r1, [pc, #252]	; 131f0 <__assert_fail@plt+0x1eb8>
   130f0:	ldr	r3, [pc, #252]	; 131f4 <__assert_fail@plt+0x1ebc>
   130f4:	add	r0, pc, r0
   130f8:	add	r1, pc, r1
   130fc:	add	r3, pc, r3
   13100:	bl	11338 <__assert_fail@plt>
   13104:	ldr	r6, [r0, #16]
   13108:	cmp	r6, #0
   1310c:	bne	131c0 <__assert_fail@plt+0x1e88>
   13110:	ldr	fp, [pc, #224]	; 131f8 <__assert_fail@plt+0x1ec0>
   13114:	mov	r5, r6
   13118:	mov	sl, #1
   1311c:	strb	sl, [r0, #20]
   13120:	add	fp, pc, fp
   13124:	ldr	r3, [r4, #24]
   13128:	cmp	r6, r3
   1312c:	bge	13194 <__assert_fail@plt+0x1e5c>
   13130:	ldr	r2, [r4, #28]
   13134:	cmp	r5, #0
   13138:	lsl	r3, r6, #2
   1313c:	movne	r0, #1
   13140:	ldr	r8, [r2, r6, lsl #2]
   13144:	bne	1315c <__assert_fail@plt+0x1e24>
   13148:	mov	r0, r8
   1314c:	mov	r1, r7
   13150:	str	r3, [sp, #4]
   13154:	bl	130c8 <__assert_fail@plt+0x1d90>
   13158:	ldr	r3, [sp, #4]
   1315c:	ldr	r2, [r8, #16]
   13160:	and	r5, r0, #1
   13164:	cmp	r2, #2
   13168:	beq	1318c <__assert_fail@plt+0x1e54>
   1316c:	ldr	r2, [r4, #28]
   13170:	mov	r0, r4
   13174:	str	sl, [r4, #16]
   13178:	mov	r1, r7
   1317c:	ldr	r3, [r2, r3]
   13180:	mov	r2, fp
   13184:	ldr	r3, [r3]
   13188:	bl	122f0 <__assert_fail@plt+0xfb8>
   1318c:	add	r6, r6, #1
   13190:	b	13124 <__assert_fail@plt+0x1dec>
   13194:	ldr	r3, [r4, #16]
   13198:	cmp	r3, #0
   1319c:	bne	131c0 <__assert_fail@plt+0x1e88>
   131a0:	mov	r0, r4
   131a4:	mov	r1, r7
   131a8:	mov	r2, r9
   131ac:	bl	12144 <__assert_fail@plt+0xe0c>
   131b0:	ldr	r3, [r4, #16]
   131b4:	cmp	r3, #0
   131b8:	moveq	r3, #2
   131bc:	streq	r3, [r4, #16]
   131c0:	mov	r3, #0
   131c4:	strb	r3, [r4, #20]
   131c8:	ldr	r3, [r4, #16]
   131cc:	cmp	r3, #2
   131d0:	beq	131e0 <__assert_fail@plt+0x1ea8>
   131d4:	ldrb	r3, [r4, #13]
   131d8:	cmp	r3, #0
   131dc:	movne	r5, #1
   131e0:	mov	r0, r5
   131e4:	add	sp, sp, #12
   131e8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   131ec:	andeq	ip, r0, pc, asr #15
   131f0:	ldrdeq	ip, [r0], -sl
   131f4:	ldrdeq	ip, [r0], -sp
   131f8:			; <UNDEFINED> instruction: 0x0000c7bb
   131fc:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13200:	mov	r5, r0
   13204:	ldr	sl, [r1, #12]
   13208:	mov	r8, r1
   1320c:	mov	r0, r2
   13210:	mov	r1, r3
   13214:	mov	r7, r2
   13218:	bl	18044 <__assert_fail@plt+0x6d0c>
   1321c:	subs	r6, r0, #0
   13220:	beq	13260 <__assert_fail@plt+0x1f28>
   13224:	ldr	r3, [r6, #8]
   13228:	cmp	r3, #4
   1322c:	ldreq	r4, [r6, #16]
   13230:	beq	13278 <__assert_fail@plt+0x1f40>
   13234:	mov	r2, #3
   13238:	str	r2, [r5, #16]
   1323c:	str	r3, [sp]
   13240:	mov	r0, r5
   13244:	ldr	r3, [r6, #4]
   13248:	mov	r1, r8
   1324c:	ldr	r2, [pc, #236]	; 13340 <__assert_fail@plt+0x2008>
   13250:	str	r3, [sp, #4]
   13254:	add	r2, pc, r2
   13258:	ldr	r3, [r7, #24]
   1325c:	bl	122f0 <__assert_fail@plt+0xfb8>
   13260:	mov	r0, #0
   13264:	b	13338 <__assert_fail@plt+0x2000>
   13268:	ldr	r3, [r4]
   1326c:	cmp	r3, #0
   13270:	beq	13284 <__assert_fail@plt+0x1f4c>
   13274:	ldr	r4, [r4, #12]
   13278:	cmp	r4, #0
   1327c:	bne	13268 <__assert_fail@plt+0x1f30>
   13280:	b	132f4 <__assert_fail@plt+0x1fbc>
   13284:	ldr	r9, [r4, #4]
   13288:	cmp	r9, #0
   1328c:	beq	132b4 <__assert_fail@plt+0x1f7c>
   13290:	ldr	r3, [pc, #172]	; 13344 <__assert_fail@plt+0x200c>
   13294:	movw	r2, #450	; 0x1c2
   13298:	ldr	r0, [pc, #168]	; 13348 <__assert_fail@plt+0x2010>
   1329c:	ldr	r1, [pc, #168]	; 1334c <__assert_fail@plt+0x2014>
   132a0:	add	r3, pc, r3
   132a4:	add	r0, pc, r0
   132a8:	add	r3, r3, #10
   132ac:	add	r1, pc, r1
   132b0:	bl	11338 <__assert_fail@plt>
   132b4:	mov	r0, sl
   132b8:	ldr	r1, [r4, #8]
   132bc:	bl	1862c <__assert_fail@plt+0x72f4>
   132c0:	cmp	r7, r0
   132c4:	beq	13260 <__assert_fail@plt+0x1f28>
   132c8:	mov	r3, #3
   132cc:	str	r3, [r5, #16]
   132d0:	ldr	r3, [r7, #24]
   132d4:	mov	r0, r5
   132d8:	ldr	r2, [pc, #112]	; 13350 <__assert_fail@plt+0x2018>
   132dc:	mov	r1, r8
   132e0:	str	r3, [sp]
   132e4:	add	r2, pc, r2
   132e8:	ldr	r3, [r6, #4]
   132ec:	bl	122f0 <__assert_fail@plt+0xfb8>
   132f0:	b	13260 <__assert_fail@plt+0x1f28>
   132f4:	mov	r0, r6
   132f8:	bl	1811c <__assert_fail@plt+0x6de4>
   132fc:	sub	r3, r0, #1
   13300:	cmn	r3, #3
   13304:	bls	13338 <__assert_fail@plt+0x2000>
   13308:	mov	r3, #3
   1330c:	str	r3, [r5, #16]
   13310:	str	r0, [sp]
   13314:	mov	r1, r8
   13318:	ldr	r3, [r6, #4]
   1331c:	mov	r0, r5
   13320:	ldr	r2, [pc, #44]	; 13354 <__assert_fail@plt+0x201c>
   13324:	str	r3, [sp, #4]
   13328:	add	r2, pc, r2
   1332c:	ldr	r3, [r7, #24]
   13330:	bl	122f0 <__assert_fail@plt+0xfb8>
   13334:	mov	r0, r4
   13338:	add	sp, sp, #8
   1333c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13340:	andeq	ip, r0, r0, lsr #13
   13344:	andeq	ip, r0, r9, lsr r0
   13348:	andeq	ip, r0, r3, ror r6
   1334c:	andeq	ip, r0, r6, lsr #12
   13350:	andeq	ip, r0, r2, asr #12
   13354:	andeq	ip, r0, r6, lsr #12
   13358:	ldr	r3, [r2, #32]
   1335c:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   13360:	cmp	r3, #0
   13364:	mov	r6, r0
   13368:	mov	r8, r1
   1336c:	mov	r5, r2
   13370:	ldr	r9, [r1, #12]
   13374:	beq	1339c <__assert_fail@plt+0x2064>
   13378:	ldr	r3, [pc, #240]	; 13470 <__assert_fail@plt+0x2138>
   1337c:	movw	r2, #485	; 0x1e5
   13380:	ldr	r0, [pc, #236]	; 13474 <__assert_fail@plt+0x213c>
   13384:	ldr	r1, [pc, #236]	; 13478 <__assert_fail@plt+0x2140>
   13388:	add	r3, pc, r3
   1338c:	add	r0, pc, r0
   13390:	add	r3, r3, #29
   13394:	add	r1, pc, r1
   13398:	bl	11338 <__assert_fail@plt>
   1339c:	ldr	r3, [pc, #216]	; 1347c <__assert_fail@plt+0x2144>
   133a0:	add	r3, pc, r3
   133a4:	bl	131fc <__assert_fail@plt+0x1ec4>
   133a8:	ldr	r3, [pc, #208]	; 13480 <__assert_fail@plt+0x2148>
   133ac:	mov	r1, r8
   133b0:	mov	r2, r5
   133b4:	add	r3, pc, r3
   133b8:	mov	r4, r0
   133bc:	mov	r0, r6
   133c0:	bl	131fc <__assert_fail@plt+0x1ec4>
   133c4:	orrs	r3, r0, r4
   133c8:	mov	r7, r0
   133cc:	beq	13468 <__assert_fail@plt+0x2130>
   133d0:	adds	sl, r0, #0
   133d4:	movne	sl, #1
   133d8:	cmp	r4, #0
   133dc:	cmpne	r0, #0
   133e0:	beq	1340c <__assert_fail@plt+0x20d4>
   133e4:	cmp	r4, r0
   133e8:	beq	1340c <__assert_fail@plt+0x20d4>
   133ec:	ldr	r2, [pc, #144]	; 13484 <__assert_fail@plt+0x214c>
   133f0:	mov	r3, #3
   133f4:	mov	r0, r6
   133f8:	str	r3, [r6, #16]
   133fc:	mov	r1, r8
   13400:	add	r2, pc, r2
   13404:	ldr	r3, [r5, #24]
   13408:	bl	122f0 <__assert_fail@plt+0xfb8>
   1340c:	cmp	r4, #0
   13410:	movne	sl, #0
   13414:	andeq	sl, sl, #1
   13418:	mov	r0, r9
   1341c:	cmp	sl, #0
   13420:	movne	r4, r7
   13424:	mov	r1, r4
   13428:	bl	18568 <__assert_fail@plt+0x7230>
   1342c:	cmp	r0, r5
   13430:	cmpne	r0, #0
   13434:	streq	r4, [r5, #32]
   13438:	beq	13468 <__assert_fail@plt+0x2130>
   1343c:	mov	r3, #3
   13440:	str	r3, [r6, #16]
   13444:	str	r4, [sp]
   13448:	mov	r1, r8
   1344c:	ldr	r3, [r0, #24]
   13450:	mov	r0, r6
   13454:	ldr	r2, [pc, #44]	; 13488 <__assert_fail@plt+0x2150>
   13458:	str	r3, [sp, #4]
   1345c:	add	r2, pc, r2
   13460:	ldr	r3, [r5, #24]
   13464:	bl	122f0 <__assert_fail@plt+0xfb8>
   13468:	add	sp, sp, #8
   1346c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13470:	andeq	fp, r0, r1, asr pc
   13474:	andeq	ip, r0, r9, ror #11
   13478:	andeq	ip, r0, lr, lsr r5
   1347c:	andeq	ip, r0, sl, ror #11
   13480:	ldrdeq	ip, [r0], -r0
   13484:	muleq	r0, r2, r5
   13488:	andeq	ip, r0, r2, ror r5
   1348c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13490:	sub	sp, sp, #44	; 0x2c
   13494:	ldr	sl, [pc, #260]	; 135a0 <__assert_fail@plt+0x2268>
   13498:	add	r6, sp, #24
   1349c:	ldr	r9, [r1, #12]
   134a0:	mov	r7, r0
   134a4:	ldr	r5, [r2, #8]
   134a8:	add	sl, pc, sl
   134ac:	mov	r8, r1
   134b0:	cmp	r5, #0
   134b4:	beq	13598 <__assert_fail@plt+0x2260>
   134b8:	ldrb	r3, [r5]
   134bc:	cmp	r3, #0
   134c0:	ldreq	r4, [r5, #16]
   134c4:	moveq	fp, #3
   134c8:	bne	13590 <__assert_fail@plt+0x2258>
   134cc:	cmp	r4, #0
   134d0:	beq	13590 <__assert_fail@plt+0x2258>
   134d4:	ldr	r3, [r4]
   134d8:	cmp	r3, #1
   134dc:	bne	13588 <__assert_fail@plt+0x2250>
   134e0:	ldr	r2, [r4, #4]
   134e4:	ldr	r3, [r5, #8]
   134e8:	cmp	r2, r3
   134ec:	ble	13514 <__assert_fail@plt+0x21dc>
   134f0:	ldr	r3, [pc, #172]	; 135a4 <__assert_fail@plt+0x226c>
   134f4:	mov	r2, #592	; 0x250
   134f8:	ldr	r0, [pc, #168]	; 135a8 <__assert_fail@plt+0x2270>
   134fc:	ldr	r1, [pc, #168]	; 135ac <__assert_fail@plt+0x2274>
   13500:	add	r3, pc, r3
   13504:	add	r0, pc, r0
   13508:	add	r3, r3, #53	; 0x35
   1350c:	add	r1, pc, r1
   13510:	bl	11338 <__assert_fail@plt>
   13514:	mov	r0, r9
   13518:	ldr	r1, [r4, #8]
   1351c:	bl	1862c <__assert_fail@plt+0x72f4>
   13520:	cmp	r0, #0
   13524:	bne	13544 <__assert_fail@plt+0x220c>
   13528:	str	fp, [r7, #16]
   1352c:	mov	r0, r7
   13530:	mov	r1, r8
   13534:	mov	r2, sl
   13538:	ldr	r3, [r4, #8]
   1353c:	bl	122f0 <__assert_fail@plt+0xfb8>
   13540:	b	13588 <__assert_fail@plt+0x2250>
   13544:	ldr	r3, [r0, #24]
   13548:	mov	r0, r3
   1354c:	str	r3, [sp, #20]
   13550:	bl	111dc <strlen@plt>
   13554:	ldr	r3, [sp, #20]
   13558:	add	ip, r5, #8
   1355c:	str	r4, [sp]
   13560:	str	r3, [sp, #4]
   13564:	add	r0, r0, #1
   13568:	str	r0, [sp, #8]
   1356c:	mov	r0, r6
   13570:	ldm	ip, {r1, r2, r3}
   13574:	str	ip, [sp, #20]
   13578:	bl	14fec <__assert_fail@plt+0x3cb4>
   1357c:	ldm	r6, {r0, r1, r2}
   13580:	ldr	ip, [sp, #20]
   13584:	stm	ip, {r0, r1, r2}
   13588:	ldr	r4, [r4, #12]
   1358c:	b	134cc <__assert_fail@plt+0x2194>
   13590:	ldr	r5, [r5, #20]
   13594:	b	134b0 <__assert_fail@plt+0x2178>
   13598:	add	sp, sp, #44	; 0x2c
   1359c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   135a0:	andeq	ip, r0, r4, ror r5
   135a4:	ldrdeq	fp, [r0], -r9
   135a8:	strdeq	ip, [r0], -sp
   135ac:	andeq	ip, r0, r6, asr #7
   135b0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   135b4:	sub	sp, sp, #48	; 0x30
   135b8:	ldr	r6, [r1, #12]
   135bc:	mov	r7, r0
   135c0:	mov	r8, r1
   135c4:	mov	r1, r2
   135c8:	mov	r4, r2
   135cc:	mov	r9, r3
   135d0:	mov	r0, r6
   135d4:	mov	r3, #0
   135d8:	ldr	r5, [sp, #80]	; 0x50
   135dc:	ldr	sl, [sp, #84]	; 0x54
   135e0:	str	r3, [sp, #40]	; 0x28
   135e4:	str	r3, [sp, #44]	; 0x2c
   135e8:	bl	184a8 <__assert_fail@plt+0x7170>
   135ec:	cmp	r0, #0
   135f0:	str	r0, [sp, #40]	; 0x28
   135f4:	bne	1360c <__assert_fail@plt+0x22d4>
   135f8:	mov	r0, r6
   135fc:	mov	r1, r4
   13600:	add	r2, sp, #40	; 0x28
   13604:	bl	181ec <__assert_fail@plt+0x6eb4>
   13608:	str	r0, [sp, #44]	; 0x2c
   1360c:	ldr	r3, [sp, #40]	; 0x28
   13610:	cmp	r3, #0
   13614:	movne	r0, #0
   13618:	bne	13630 <__assert_fail@plt+0x22f8>
   1361c:	mov	r0, r6
   13620:	mov	r1, r4
   13624:	add	r2, sp, #40	; 0x28
   13628:	add	r3, sp, #44	; 0x2c
   1362c:	bl	18298 <__assert_fail@plt+0x6f60>
   13630:	ldr	r1, [sp, #40]	; 0x28
   13634:	cmp	r1, #0
   13638:	beq	13734 <__assert_fail@plt+0x23fc>
   1363c:	cmp	r1, r9
   13640:	ldr	ip, [sp, #44]	; 0x2c
   13644:	bne	13658 <__assert_fail@plt+0x2320>
   13648:	cmp	ip, r5
   1364c:	bne	13658 <__assert_fail@plt+0x2320>
   13650:	cmp	r0, sl
   13654:	beq	13734 <__assert_fail@plt+0x23fc>
   13658:	cmp	sl, #0
   1365c:	mov	r3, #3
   13660:	str	r3, [r7, #16]
   13664:	ldrne	lr, [pc, #208]	; 1373c <__assert_fail@plt+0x2404>
   13668:	addne	lr, pc, lr
   1366c:	ldreq	lr, [pc, #204]	; 13740 <__assert_fail@plt+0x2408>
   13670:	addeq	lr, pc, lr
   13674:	cmp	r5, #0
   13678:	bne	13704 <__assert_fail@plt+0x23cc>
   1367c:	ldr	r2, [pc, #192]	; 13744 <__assert_fail@plt+0x240c>
   13680:	add	r2, pc, r2
   13684:	mov	r6, r2
   13688:	mov	r5, r2
   1368c:	cmp	r0, #0
   13690:	ldr	r9, [r9, #24]
   13694:	ldrne	sl, [pc, #172]	; 13748 <__assert_fail@plt+0x2410>
   13698:	addne	sl, pc, sl
   1369c:	ldreq	sl, [pc, #168]	; 1374c <__assert_fail@plt+0x2414>
   136a0:	addeq	sl, pc, sl
   136a4:	cmp	ip, #0
   136a8:	bne	1371c <__assert_fail@plt+0x23e4>
   136ac:	ldr	r3, [pc, #156]	; 13750 <__assert_fail@plt+0x2418>
   136b0:	add	r3, pc, r3
   136b4:	mov	ip, r3
   136b8:	mov	r0, r3
   136bc:	str	r2, [sp, #8]
   136c0:	str	r0, [sp, #32]
   136c4:	mov	r0, r7
   136c8:	str	lr, [sp]
   136cc:	str	r6, [sp, #4]
   136d0:	str	r5, [sp, #12]
   136d4:	str	r9, [sp, #16]
   136d8:	str	sl, [sp, #20]
   136dc:	str	ip, [sp, #24]
   136e0:	str	r3, [sp, #28]
   136e4:	ldr	r3, [r1, #24]
   136e8:	mov	r1, r8
   136ec:	ldr	r2, [pc, #96]	; 13754 <__assert_fail@plt+0x241c>
   136f0:	str	r3, [sp, #36]	; 0x24
   136f4:	add	r2, pc, r2
   136f8:	mov	r3, r4
   136fc:	bl	122f0 <__assert_fail@plt+0xfb8>
   13700:	b	13734 <__assert_fail@plt+0x23fc>
   13704:	ldr	r2, [r5, #4]
   13708:	ldr	r6, [pc, #72]	; 13758 <__assert_fail@plt+0x2420>
   1370c:	ldr	r5, [pc, #72]	; 1375c <__assert_fail@plt+0x2424>
   13710:	add	r6, pc, r6
   13714:	add	r5, pc, r5
   13718:	b	1368c <__assert_fail@plt+0x2354>
   1371c:	ldr	r3, [ip, #4]
   13720:	ldr	r0, [pc, #56]	; 13760 <__assert_fail@plt+0x2428>
   13724:	ldr	ip, [pc, #56]	; 13764 <__assert_fail@plt+0x242c>
   13728:	add	r0, pc, r0
   1372c:	add	ip, pc, ip
   13730:	b	136bc <__assert_fail@plt+0x2384>
   13734:	add	sp, sp, #48	; 0x30
   13738:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1373c:	andeq	ip, r0, r2, ror #7
   13740:	strdeq	sp, [r0], -r6
   13744:	andeq	sp, r0, r6, ror #13
   13748:			; <UNDEFINED> instruction: 0x0000c3b2
   1374c:	andeq	sp, r0, r6, asr #13
   13750:			; <UNDEFINED> instruction: 0x0000d6b6
   13754:	andeq	ip, r0, r6, ror #6
   13758:	andeq	lr, r0, r5, lsl r4
   1375c:	andeq	ip, r0, r0, asr #6
   13760:	andeq	ip, r0, ip, lsr #6
   13764:	strdeq	lr, [r0], -r9
   13768:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1376c:	mov	r8, r0
   13770:	ldr	r4, [r2, #44]	; 0x2c
   13774:	mov	r9, r1
   13778:	mov	r6, r2
   1377c:	cmp	r4, #0
   13780:	beq	137b4 <__assert_fail@plt+0x247c>
   13784:	ldrb	r3, [r4]
   13788:	cmp	r3, #0
   1378c:	bne	137ac <__assert_fail@plt+0x2474>
   13790:	str	r3, [sp]
   13794:	mov	r0, r8
   13798:	str	r3, [sp, #4]
   1379c:	mov	r1, r9
   137a0:	ldr	r2, [r4, #4]
   137a4:	mov	r3, r6
   137a8:	bl	135b0 <__assert_fail@plt+0x2278>
   137ac:	ldr	r4, [r4, #8]
   137b0:	b	1377c <__assert_fail@plt+0x2444>
   137b4:	ldr	r4, [r6, #8]
   137b8:	cmp	r4, #0
   137bc:	beq	13844 <__assert_fail@plt+0x250c>
   137c0:	ldrb	r3, [r4]
   137c4:	cmp	r3, #0
   137c8:	ldreq	r5, [r4, #16]
   137cc:	ldreq	r7, [r4, #24]
   137d0:	bne	1383c <__assert_fail@plt+0x2504>
   137d4:	cmp	r7, #0
   137d8:	beq	13834 <__assert_fail@plt+0x24fc>
   137dc:	ldrb	r3, [r7]
   137e0:	cmp	r3, #0
   137e4:	bne	13804 <__assert_fail@plt+0x24cc>
   137e8:	str	r3, [sp, #4]
   137ec:	mov	r0, r8
   137f0:	str	r4, [sp]
   137f4:	mov	r1, r9
   137f8:	ldr	r2, [r7, #4]
   137fc:	mov	r3, r6
   13800:	bl	135b0 <__assert_fail@plt+0x2278>
   13804:	ldr	r7, [r7, #8]
   13808:	b	137d4 <__assert_fail@plt+0x249c>
   1380c:	ldr	r3, [r5]
   13810:	cmp	r3, #2
   13814:	bne	13830 <__assert_fail@plt+0x24f8>
   13818:	stm	sp, {r4, r5}
   1381c:	mov	r0, r8
   13820:	mov	r1, r9
   13824:	ldr	r2, [r5, #8]
   13828:	mov	r3, r6
   1382c:	bl	135b0 <__assert_fail@plt+0x2278>
   13830:	ldr	r5, [r5, #12]
   13834:	cmp	r5, #0
   13838:	bne	1380c <__assert_fail@plt+0x24d4>
   1383c:	ldr	r4, [r4, #20]
   13840:	b	137b8 <__assert_fail@plt+0x2480>
   13844:	add	sp, sp, #12
   13848:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1384c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   13850:	add	r6, r2, #8
   13854:	ldr	r9, [pc, #184]	; 13914 <__assert_fail@plt+0x25dc>
   13858:	mov	r7, r0
   1385c:	mov	r8, r1
   13860:	mov	r5, r2
   13864:	add	r9, pc, r9
   13868:	ldr	r4, [r6]
   1386c:	cmp	r4, #0
   13870:	beq	1390c <__assert_fail@plt+0x25d4>
   13874:	ldr	r0, [r4, #4]
   13878:	mov	r1, r9
   1387c:	bl	11098 <strcmp@plt>
   13880:	cmp	r0, #0
   13884:	addne	r6, r4, #20
   13888:	bne	13868 <__assert_fail@plt+0x2530>
   1388c:	ldr	r2, [r5, #28]
   13890:	ldr	r1, [r4, #8]
   13894:	add	r3, r2, #1
   13898:	cmp	r1, r3
   1389c:	bne	138b4 <__assert_fail@plt+0x257c>
   138a0:	ldr	r0, [r4, #12]
   138a4:	ldr	r1, [r5, #4]
   138a8:	bl	11110 <memcmp@plt>
   138ac:	cmp	r0, #0
   138b0:	beq	138e0 <__assert_fail@plt+0x25a8>
   138b4:	mov	r3, #3
   138b8:	str	r3, [r7, #16]
   138bc:	ldr	r3, [r4, #12]
   138c0:	mov	r0, r7
   138c4:	ldr	r2, [pc, #76]	; 13918 <__assert_fail@plt+0x25e0>
   138c8:	mov	r1, r8
   138cc:	str	r3, [sp]
   138d0:	add	r2, pc, r2
   138d4:	ldr	r3, [r5, #24]
   138d8:	bl	122f0 <__assert_fail@plt+0xfb8>
   138dc:	b	1390c <__assert_fail@plt+0x25d4>
   138e0:	ldr	r3, [r4, #20]
   138e4:	str	r3, [r6]
   138e8:	ldr	r0, [r4, #4]
   138ec:	bl	110e0 <free@plt>
   138f0:	add	r3, r4, #8
   138f4:	ldm	r3, {r0, r1, r2}
   138f8:	bl	14cd8 <__assert_fail@plt+0x39a0>
   138fc:	mov	r0, r4
   13900:	add	sp, sp, #12
   13904:	pop	{r4, r5, r6, r7, r8, r9, lr}
   13908:	b	110e0 <free@plt>
   1390c:	add	sp, sp, #12
   13910:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13914:	muleq	r0, r3, r2
   13918:			; <UNDEFINED> instruction: 0x0000c1bc
   1391c:	push	{r4, r5, r6, lr}
   13920:	mov	r5, r0
   13924:	mov	r0, r2
   13928:	mov	r6, r1
   1392c:	mov	r4, r2
   13930:	bl	18014 <__assert_fail@plt+0x6cdc>
   13934:	mov	r1, #64	; 0x40
   13938:	bl	111e8 <strchr@plt>
   1393c:	cmp	r0, #0
   13940:	popeq	{r4, r5, r6, pc}
   13944:	ldr	r2, [pc, #28]	; 13968 <__assert_fail@plt+0x2630>
   13948:	mov	r3, #3
   1394c:	mov	r0, r5
   13950:	str	r3, [r5, #16]
   13954:	mov	r1, r6
   13958:	ldr	r3, [r4, #24]
   1395c:	add	r2, pc, r2
   13960:	pop	{r4, r5, r6, lr}
   13964:	b	122f0 <__assert_fail@plt+0xfb8>
   13968:	andeq	ip, r0, r4, ror r1
   1396c:	push	{r4, r5, r6, lr}
   13970:	mov	r5, r1
   13974:	ldr	r1, [pc, #76]	; 139c8 <__assert_fail@plt+0x2690>
   13978:	mov	r6, r0
   1397c:	ldr	r0, [r2, #4]
   13980:	mov	r4, r2
   13984:	add	r1, pc, r1
   13988:	bl	11098 <strcmp@plt>
   1398c:	cmp	r0, #0
   13990:	popne	{r4, r5, r6, pc}
   13994:	ldr	r2, [r4, #16]
   13998:	ldr	r3, [r5, #12]
   1399c:	cmp	r2, r3
   139a0:	popeq	{r4, r5, r6, pc}
   139a4:	ldr	r2, [pc, #32]	; 139cc <__assert_fail@plt+0x2694>
   139a8:	mov	r3, #3
   139ac:	mov	r0, r6
   139b0:	str	r3, [r6, #16]
   139b4:	mov	r1, r5
   139b8:	ldr	r3, [r4, #24]
   139bc:	add	r2, pc, r2
   139c0:	pop	{r4, r5, r6, lr}
   139c4:	b	122f0 <__assert_fail@plt+0xfb8>
   139c8:	andeq	ip, r0, ip, lsl r2
   139cc:	andeq	ip, r0, r0, asr #2
   139d0:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   139d4:	mov	r6, r1
   139d8:	ldr	r1, [pc, #220]	; 13abc <__assert_fail@plt+0x2784>
   139dc:	mov	r5, r0
   139e0:	ldr	r0, [r2, #4]
   139e4:	mov	r4, r2
   139e8:	add	r1, pc, r1
   139ec:	bl	11098 <strcmp@plt>
   139f0:	cmp	r0, #0
   139f4:	bne	13ab4 <__assert_fail@plt+0x277c>
   139f8:	ldr	r8, [pc, #192]	; 13ac0 <__assert_fail@plt+0x2788>
   139fc:	ldr	r9, [pc, #192]	; 13ac4 <__assert_fail@plt+0x278c>
   13a00:	ldr	sl, [pc, #192]	; 13ac8 <__assert_fail@plt+0x2790>
   13a04:	add	r8, pc, r8
   13a08:	ldr	r4, [r4, #8]
   13a0c:	add	r9, pc, r9
   13a10:	add	sl, pc, sl
   13a14:	cmp	r4, #0
   13a18:	beq	13ab4 <__assert_fail@plt+0x277c>
   13a1c:	ldrb	r3, [r4]
   13a20:	cmp	r3, #0
   13a24:	bne	13aac <__assert_fail@plt+0x2774>
   13a28:	ldr	r1, [r4, #12]
   13a2c:	cmp	r1, #0
   13a30:	bne	13a5c <__assert_fail@plt+0x2724>
   13a34:	mov	r3, #3
   13a38:	str	r3, [r5, #16]
   13a3c:	ldr	r3, [r4, #12]
   13a40:	mov	r0, r5
   13a44:	mov	r1, r6
   13a48:	mov	r2, sl
   13a4c:	str	r3, [sp]
   13a50:	ldr	r3, [r4, #4]
   13a54:	bl	122f0 <__assert_fail@plt+0xfb8>
   13a58:	b	13aac <__assert_fail@plt+0x2774>
   13a5c:	ldr	r0, [r6, #12]
   13a60:	bl	183d8 <__assert_fail@plt+0x70a0>
   13a64:	cmp	r0, #0
   13a68:	beq	13a34 <__assert_fail@plt+0x26fc>
   13a6c:	ldr	r7, [r4, #4]
   13a70:	mov	r1, r8
   13a74:	mov	r0, r7
   13a78:	bl	1132c <strspn@plt>
   13a7c:	mov	fp, r0
   13a80:	mov	r0, r7
   13a84:	bl	111dc <strlen@plt>
   13a88:	cmp	fp, r0
   13a8c:	beq	13aac <__assert_fail@plt+0x2774>
   13a90:	mov	r3, #3
   13a94:	mov	r0, r5
   13a98:	str	r3, [r5, #16]
   13a9c:	mov	r1, r6
   13aa0:	mov	r2, r9
   13aa4:	mov	r3, r7
   13aa8:	bl	122f0 <__assert_fail@plt+0xfb8>
   13aac:	ldr	r4, [r4, #20]
   13ab0:	b	13a14 <__assert_fail@plt+0x26dc>
   13ab4:	add	sp, sp, #12
   13ab8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13abc:	andeq	fp, r0, r4, lsr r3
   13ac0:	andeq	ip, r0, sp, asr #2
   13ac4:	andeq	ip, r0, fp, ror #2
   13ac8:	andeq	ip, r0, r2, lsl r1
   13acc:	push	{r3, r4, r5, lr}
   13ad0:	mov	r4, r0
   13ad4:	ldr	r3, [r1, #12]
   13ad8:	mov	r5, r1
   13adc:	cmp	r2, r3
   13ae0:	popne	{r3, r4, r5, pc}
   13ae4:	ldr	r1, [pc, #68]	; 13b30 <__assert_fail@plt+0x27f8>
   13ae8:	mov	r0, r2
   13aec:	add	r1, pc, r1
   13af0:	bl	183d8 <__assert_fail@plt+0x70a0>
   13af4:	cmp	r0, #0
   13af8:	popeq	{r3, r4, r5, pc}
   13afc:	ldr	r1, [pc, #48]	; 13b34 <__assert_fail@plt+0x27fc>
   13b00:	add	r1, pc, r1
   13b04:	bl	18044 <__assert_fail@plt+0x6d0c>
   13b08:	cmp	r0, #0
   13b0c:	popeq	{r3, r4, r5, pc}
   13b10:	ldr	r2, [pc, #32]	; 13b38 <__assert_fail@plt+0x2800>
   13b14:	mov	r3, #3
   13b18:	mov	r0, r4
   13b1c:	str	r3, [r4, #16]
   13b20:	mov	r1, r5
   13b24:	add	r2, pc, r2
   13b28:	pop	{r3, r4, r5, lr}
   13b2c:	b	122f0 <__assert_fail@plt+0xfb8>
   13b30:	strheq	ip, [r0], -r3
   13b34:	andeq	ip, r0, r7, lsr #1
   13b38:	muleq	r0, r8, r0
   13b3c:	ldr	r3, [r2, #16]
   13b40:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13b44:	cmp	r3, #0
   13b48:	mov	r7, r0
   13b4c:	mov	r8, r1
   13b50:	mov	r4, r2
   13b54:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b58:	ldr	r3, [r2, #36]	; 0x24
   13b5c:	cmp	r3, #0
   13b60:	poplt	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b64:	ldr	r3, [r2, #40]	; 0x28
   13b68:	cmp	r3, #0
   13b6c:	poplt	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b70:	ldr	r1, [pc, #128]	; 13bf8 <__assert_fail@plt+0x28c0>
   13b74:	mov	r0, r2
   13b78:	add	r1, pc, r1
   13b7c:	bl	18044 <__assert_fail@plt+0x6d0c>
   13b80:	cmp	r0, #0
   13b84:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b88:	ldr	r5, [r4, #12]
   13b8c:	cmp	r5, #0
   13b90:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13b94:	ldr	r9, [pc, #96]	; 13bfc <__assert_fail@plt+0x28c4>
   13b98:	mov	r6, r0
   13b9c:	add	r9, pc, r9
   13ba0:	ldrb	r3, [r5]
   13ba4:	cmp	r3, #0
   13ba8:	bne	13bc0 <__assert_fail@plt+0x2888>
   13bac:	mov	r0, r5
   13bb0:	mov	r1, r9
   13bb4:	bl	18044 <__assert_fail@plt+0x6d0c>
   13bb8:	cmp	r0, #0
   13bbc:	movne	r6, #1
   13bc0:	ldr	r5, [r5, #20]
   13bc4:	cmp	r5, #0
   13bc8:	bne	13ba0 <__assert_fail@plt+0x2868>
   13bcc:	cmp	r6, #0
   13bd0:	popne	{r4, r5, r6, r7, r8, r9, sl, pc}
   13bd4:	ldr	r2, [pc, #36]	; 13c00 <__assert_fail@plt+0x28c8>
   13bd8:	mov	r3, #3
   13bdc:	mov	r0, r7
   13be0:	str	r3, [r7, #16]
   13be4:	mov	r1, r8
   13be8:	ldr	r3, [r4, #24]
   13bec:	add	r2, pc, r2
   13bf0:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   13bf4:	b	122f0 <__assert_fail@plt+0xfb8>
   13bf8:	strdeq	fp, [r0], -r8
   13bfc:	ldrdeq	ip, [r0], -r0
   13c00:	andeq	ip, r0, r5
   13c04:	ldr	r3, [r2, #16]
   13c08:	push	{r4, r5, r6, r7, r8, lr}
   13c0c:	cmp	r3, #0
   13c10:	mov	r5, r0
   13c14:	mov	r6, r1
   13c18:	mov	r4, r2
   13c1c:	popeq	{r4, r5, r6, r7, r8, pc}
   13c20:	ldr	r1, [pc, #140]	; 13cb4 <__assert_fail@plt+0x297c>
   13c24:	mov	r0, r2
   13c28:	add	r1, pc, r1
   13c2c:	bl	18044 <__assert_fail@plt+0x6d0c>
   13c30:	ldr	r1, [pc, #128]	; 13cb8 <__assert_fail@plt+0x2980>
   13c34:	add	r1, pc, r1
   13c38:	mov	r7, r0
   13c3c:	mov	r0, r4
   13c40:	bl	18044 <__assert_fail@plt+0x6d0c>
   13c44:	cmp	r0, #0
   13c48:	cmpeq	r7, #0
   13c4c:	popeq	{r4, r5, r6, r7, r8, pc}
   13c50:	ldr	r3, [r4, #16]
   13c54:	ldr	r3, [r3, #36]	; 0x24
   13c58:	cmn	r3, #1
   13c5c:	bne	13c80 <__assert_fail@plt+0x2948>
   13c60:	ldr	r2, [pc, #84]	; 13cbc <__assert_fail@plt+0x2984>
   13c64:	mov	r3, #3
   13c68:	mov	r0, r5
   13c6c:	str	r3, [r5, #16]
   13c70:	mov	r1, r6
   13c74:	add	r2, pc, r2
   13c78:	ldr	r3, [r4, #24]
   13c7c:	bl	122f0 <__assert_fail@plt+0xfb8>
   13c80:	ldr	r3, [r4, #16]
   13c84:	ldr	r3, [r3, #40]	; 0x28
   13c88:	cmn	r3, #1
   13c8c:	popne	{r4, r5, r6, r7, r8, pc}
   13c90:	ldr	r2, [pc, #40]	; 13cc0 <__assert_fail@plt+0x2988>
   13c94:	mov	r3, #3
   13c98:	mov	r0, r5
   13c9c:	str	r3, [r5, #16]
   13ca0:	mov	r1, r6
   13ca4:	ldr	r3, [r4, #24]
   13ca8:	add	r2, pc, r2
   13cac:	pop	{r4, r5, r6, r7, r8, lr}
   13cb0:	b	122f0 <__assert_fail@plt+0xfb8>
   13cb4:	andeq	ip, r0, r4, asr #20
   13cb8:	andeq	fp, r0, ip, lsr r8
   13cbc:	ldrdeq	fp, [r0], -r3
   13cc0:	andeq	fp, r0, lr, asr #31
   13cc4:	ldr	r3, [r2, #16]
   13cc8:	push	{r4, r5, r6, r7, lr}
   13ccc:	cmp	r3, #0
   13cd0:	sub	sp, sp, #20
   13cd4:	mov	r5, r0
   13cd8:	mov	r7, r1
   13cdc:	mov	r4, r2
   13ce0:	beq	13d7c <__assert_fail@plt+0x2a44>
   13ce4:	ldr	r2, [r3, #48]	; 0x30
   13ce8:	ldr	r3, [pc, #148]	; 13d84 <__assert_fail@plt+0x2a4c>
   13cec:	add	r3, pc, r3
   13cf0:	add	r3, r3, #240	; 0xf0
   13cf4:	cmp	r2, r3
   13cf8:	bne	13d7c <__assert_fail@plt+0x2a44>
   13cfc:	ldr	r1, [pc, #132]	; 13d88 <__assert_fail@plt+0x2a50>
   13d00:	mov	r0, r4
   13d04:	add	r1, pc, r1
   13d08:	bl	18044 <__assert_fail@plt+0x6d0c>
   13d0c:	cmp	r0, #0
   13d10:	beq	13d7c <__assert_fail@plt+0x2a44>
   13d14:	ldr	r3, [r0, #12]
   13d18:	ldr	r0, [r3]
   13d1c:	bl	12120 <__assert_fail@plt+0xde8>
   13d20:	ldr	r1, [pc, #100]	; 13d8c <__assert_fail@plt+0x2a54>
   13d24:	add	r1, pc, r1
   13d28:	ubfx	r6, r0, #16, #8
   13d2c:	ldr	r0, [r4, #16]
   13d30:	bl	18044 <__assert_fail@plt+0x6d0c>
   13d34:	cmp	r0, #0
   13d38:	beq	13d48 <__assert_fail@plt+0x2a10>
   13d3c:	ldr	r3, [r0, #12]
   13d40:	ldr	r0, [r3]
   13d44:	bl	12120 <__assert_fail@plt+0xde8>
   13d48:	cmp	r6, r0
   13d4c:	beq	13d7c <__assert_fail@plt+0x2a44>
   13d50:	mov	r2, #3
   13d54:	str	r2, [r5, #16]
   13d58:	ldr	r2, [pc, #48]	; 13d90 <__assert_fail@plt+0x2a58>
   13d5c:	mov	r1, r7
   13d60:	str	r0, [sp, #4]
   13d64:	str	r0, [sp, #8]
   13d68:	add	r2, pc, r2
   13d6c:	str	r6, [sp]
   13d70:	mov	r0, r5
   13d74:	ldr	r3, [r4, #24]
   13d78:	bl	122f0 <__assert_fail@plt+0xfb8>
   13d7c:	add	sp, sp, #20
   13d80:	pop	{r4, r5, r6, r7, pc}
   13d84:	andeq	r0, r2, r8, lsr #2
   13d88:	andeq	ip, r0, r8, ror #18
   13d8c:	andeq	fp, r0, lr, ror pc
   13d90:	andeq	fp, r0, r4, asr #30
   13d94:	ldr	r1, [pc, #108]	; 13e08 <__assert_fail@plt+0x2ad0>
   13d98:	push	{r4, lr}
   13d9c:	add	r1, pc, r1
   13da0:	mov	r4, r0
   13da4:	bl	11080 <strstr@plt>
   13da8:	cmp	r0, #0
   13dac:	bne	13df8 <__assert_fail@plt+0x2ac0>
   13db0:	mov	r0, r4
   13db4:	mov	r1, #45	; 0x2d
   13db8:	bl	11284 <strrchr@plt>
   13dbc:	ldr	r1, [pc, #72]	; 13e0c <__assert_fail@plt+0x2ad4>
   13dc0:	add	r1, pc, r1
   13dc4:	cmp	r0, #0
   13dc8:	addne	r4, r0, #1
   13dcc:	mov	r0, r4
   13dd0:	bl	11098 <strcmp@plt>
   13dd4:	cmp	r0, #0
   13dd8:	beq	13e00 <__assert_fail@plt+0x2ac8>
   13ddc:	ldr	r1, [pc, #44]	; 13e10 <__assert_fail@plt+0x2ad8>
   13de0:	mov	r0, r4
   13de4:	add	r1, pc, r1
   13de8:	bl	11098 <strcmp@plt>
   13dec:	rsbs	r0, r0, #1
   13df0:	movcc	r0, #0
   13df4:	pop	{r4, pc}
   13df8:	mov	r0, #0
   13dfc:	pop	{r4, pc}
   13e00:	mov	r0, #1
   13e04:	pop	{r4, pc}
   13e08:	andeq	fp, r0, fp, asr #30
   13e0c:	andeq	fp, r0, pc, lsr #30
   13e10:	andeq	fp, r0, r6, lsl #30
   13e14:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e18:	mov	r6, r0
   13e1c:	ldr	r8, [pc, #136]	; 13eac <__assert_fail@plt+0x2b74>
   13e20:	mov	r9, r1
   13e24:	ldr	fp, [pc, #132]	; 13eb0 <__assert_fail@plt+0x2b78>
   13e28:	mov	r7, r2
   13e2c:	ldr	r4, [r2, #8]
   13e30:	add	r8, pc, r8
   13e34:	add	fp, pc, fp
   13e38:	mov	sl, #3
   13e3c:	cmp	r4, #0
   13e40:	beq	13ea4 <__assert_fail@plt+0x2b6c>
   13e44:	ldrb	r3, [r4]
   13e48:	cmp	r3, #0
   13e4c:	bne	13e9c <__assert_fail@plt+0x2b64>
   13e50:	ldr	r5, [r4, #4]
   13e54:	mov	r0, r5
   13e58:	bl	13d94 <__assert_fail@plt+0x2a5c>
   13e5c:	cmp	r0, #0
   13e60:	beq	13e9c <__assert_fail@plt+0x2b64>
   13e64:	mov	r1, r8
   13e68:	mov	r0, r5
   13e6c:	bl	11080 <strstr@plt>
   13e70:	mov	r1, r8
   13e74:	bl	11098 <strcmp@plt>
   13e78:	cmp	r0, #0
   13e7c:	bne	13e9c <__assert_fail@plt+0x2b64>
   13e80:	str	sl, [r6, #16]
   13e84:	mov	r0, r6
   13e88:	str	r5, [sp]
   13e8c:	mov	r1, r9
   13e90:	mov	r2, fp
   13e94:	ldr	r3, [r7, #24]
   13e98:	bl	122f0 <__assert_fail@plt+0xfb8>
   13e9c:	ldr	r4, [r4, #20]
   13ea0:	b	13e3c <__assert_fail@plt+0x2b04>
   13ea4:	add	sp, sp, #12
   13ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13eac:			; <UNDEFINED> instruction: 0x0000beba
   13eb0:	andeq	fp, r0, r1, asr #29
   13eb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13eb8:	mov	r4, r3
   13ebc:	ldr	r3, [r1, #12]
   13ec0:	sub	sp, sp, #36	; 0x24
   13ec4:	mov	r5, r0
   13ec8:	mov	r7, r1
   13ecc:	mov	r8, r2
   13ed0:	ldr	r9, [sp, #72]	; 0x48
   13ed4:	str	r3, [sp, #24]
   13ed8:	ldr	r3, [r4, #8]
   13edc:	ands	r6, r3, #3
   13ee0:	bne	13f00 <__assert_fail@plt+0x2bc8>
   13ee4:	ldr	fp, [pc, #480]	; 140cc <__assert_fail@plt+0x2d94>
   13ee8:	mov	sl, #3
   13eec:	ldr	r3, [pc, #476]	; 140d0 <__assert_fail@plt+0x2d98>
   13ef0:	add	fp, pc, fp
   13ef4:	add	r3, pc, r3
   13ef8:	str	r3, [sp, #28]
   13efc:	b	13f60 <__assert_fail@plt+0x2c28>
   13f00:	mov	r2, #3
   13f04:	str	r2, [r0, #16]
   13f08:	str	r3, [sp]
   13f0c:	mov	r3, #4
   13f10:	str	r3, [sp, #4]
   13f14:	ldr	r3, [r8]
   13f18:	ldr	r2, [pc, #436]	; 140d4 <__assert_fail@plt+0x2d9c>
   13f1c:	str	r3, [sp, #8]
   13f20:	add	r2, pc, r2
   13f24:	ldr	r3, [r4, #4]
   13f28:	bl	122f0 <__assert_fail@plt+0xfb8>
   13f2c:	b	140c4 <__assert_fail@plt+0x2d8c>
   13f30:	mov	r0, r4
   13f34:	mov	r1, r6
   13f38:	bl	18184 <__assert_fail@plt+0x6e4c>
   13f3c:	add	r3, r0, #1
   13f40:	mov	ip, r0
   13f44:	cmp	r3, #1
   13f48:	bhi	13f70 <__assert_fail@plt+0x2c38>
   13f4c:	ldr	ip, [r7]
   13f50:	ands	ip, ip, #2
   13f54:	bne	140c4 <__assert_fail@plt+0x2d8c>
   13f58:	add	ip, ip, #1
   13f5c:	add	r6, r6, ip
   13f60:	ldr	r3, [r4, #8]
   13f64:	cmp	r6, r3, lsr #2
   13f68:	bcc	13f30 <__assert_fail@plt+0x2bf8>
   13f6c:	b	140c4 <__assert_fail@plt+0x2d8c>
   13f70:	ldr	r3, [r4, #16]
   13f74:	cmp	r3, #0
   13f78:	beq	13fd0 <__assert_fail@plt+0x2c98>
   13f7c:	lsl	r2, r6, #2
   13f80:	ldr	r1, [r3]
   13f84:	cmp	r1, #0
   13f88:	bne	13f98 <__assert_fail@plt+0x2c60>
   13f8c:	ldr	r1, [r3, #4]
   13f90:	cmp	r1, r2
   13f94:	beq	13fd0 <__assert_fail@plt+0x2c98>
   13f98:	ldr	r3, [r3, #12]
   13f9c:	cmp	r3, #0
   13fa0:	bne	13f80 <__assert_fail@plt+0x2c48>
   13fa4:	ldr	r3, [r8]
   13fa8:	mov	r0, r5
   13fac:	str	sl, [r5, #16]
   13fb0:	mov	r1, r7
   13fb4:	str	r6, [sp]
   13fb8:	str	r3, [sp, #4]
   13fbc:	ldr	r2, [sp, #28]
   13fc0:	ldr	r3, [r4, #4]
   13fc4:	str	ip, [sp, #20]
   13fc8:	bl	122f0 <__assert_fail@plt+0xfb8>
   13fcc:	ldr	ip, [sp, #20]
   13fd0:	ldr	r0, [sp, #24]
   13fd4:	mov	r1, ip
   13fd8:	bl	18568 <__assert_fail@plt+0x7230>
   13fdc:	subs	r3, r0, #0
   13fe0:	bne	14010 <__assert_fail@plt+0x2cd8>
   13fe4:	mov	r3, #3
   13fe8:	str	r3, [r5, #16]
   13fec:	ldr	r3, [r4, #4]
   13ff0:	mov	r0, r5
   13ff4:	ldr	r2, [pc, #220]	; 140d8 <__assert_fail@plt+0x2da0>
   13ff8:	mov	r1, r7
   13ffc:	stm	sp, {r3, r6}
   14000:	add	r2, pc, r2
   14004:	ldr	r3, [r8]
   14008:	bl	122f0 <__assert_fail@plt+0xfb8>
   1400c:	b	140c4 <__assert_fail@plt+0x2d8c>
   14010:	ldr	r1, [r9, #4]
   14014:	str	r3, [sp, #20]
   14018:	bl	18044 <__assert_fail@plt+0x6d0c>
   1401c:	ldr	r3, [sp, #20]
   14020:	subs	ip, r0, #0
   14024:	beq	14034 <__assert_fail@plt+0x2cfc>
   14028:	bl	1811c <__assert_fail@plt+0x6de4>
   1402c:	mov	ip, r0
   14030:	b	14080 <__assert_fail@plt+0x2d48>
   14034:	ldrb	r2, [r9, #8]
   14038:	cmp	r2, #0
   1403c:	bne	14080 <__assert_fail@plt+0x2d48>
   14040:	ldr	r3, [r3, #24]
   14044:	mov	r2, #3
   14048:	str	r2, [r5, #16]
   1404c:	mov	r0, r5
   14050:	ldr	r2, [pc, #132]	; 140dc <__assert_fail@plt+0x2da4>
   14054:	mov	r1, r7
   14058:	str	r3, [sp]
   1405c:	ldr	r3, [r8]
   14060:	add	r2, pc, r2
   14064:	str	r3, [sp, #4]
   14068:	ldr	r3, [r4, #4]
   1406c:	str	r6, [sp, #12]
   14070:	str	r3, [sp, #8]
   14074:	ldr	r3, [r9, #4]
   14078:	bl	122f0 <__assert_fail@plt+0xfb8>
   1407c:	b	140c4 <__assert_fail@plt+0x2d8c>
   14080:	add	r2, r6, ip
   14084:	ldr	r3, [r4, #8]
   14088:	add	r2, r2, #1
   1408c:	cmp	r3, r2, lsl #2
   14090:	bcs	13f58 <__assert_fail@plt+0x2c20>
   14094:	str	sl, [r5, #16]
   14098:	mov	r0, r5
   1409c:	stm	sp, {r3, ip}
   140a0:	mov	r1, r7
   140a4:	ldr	r3, [r8]
   140a8:	mov	r2, fp
   140ac:	str	r3, [sp, #8]
   140b0:	ldr	r3, [r4, #4]
   140b4:	str	ip, [sp, #20]
   140b8:	bl	122f0 <__assert_fail@plt+0xfb8>
   140bc:	ldr	ip, [sp, #20]
   140c0:	b	13f58 <__assert_fail@plt+0x2c20>
   140c4:	add	sp, sp, #36	; 0x24
   140c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   140cc:	andeq	fp, r0, r1, lsl #30
   140d0:	andeq	fp, r0, r4, lsr pc
   140d4:	andeq	fp, r0, r1, lsl lr
   140d8:	andeq	fp, r0, r9, ror sp
   140dc:	andeq	fp, r0, r7, asr #26
   140e0:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   140e4:	mov	r4, r0
   140e8:	ldr	r6, [r0, #8]
   140ec:	mov	r7, r1
   140f0:	mov	r0, r2
   140f4:	mov	r5, r2
   140f8:	ldr	r1, [r6]
   140fc:	bl	18044 <__assert_fail@plt+0x6d0c>
   14100:	subs	r3, r0, #0
   14104:	beq	1411c <__assert_fail@plt+0x2de4>
   14108:	str	r6, [sp]
   1410c:	mov	r0, r4
   14110:	mov	r1, r7
   14114:	add	r2, r5, #24
   14118:	bl	13eb4 <__assert_fail@plt+0x2b7c>
   1411c:	add	sp, sp, #12
   14120:	pop	{r4, r5, r6, r7, pc}
   14124:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14128:	mov	r9, r1
   1412c:	ldr	r1, [pc, #140]	; 141c0 <__assert_fail@plt+0x2e88>
   14130:	sub	sp, sp, #28
   14134:	mov	r8, r0
   14138:	mov	r0, r2
   1413c:	add	r1, pc, r1
   14140:	mov	r5, r2
   14144:	bl	18044 <__assert_fail@plt+0x6d0c>
   14148:	cmp	r0, #0
   1414c:	bne	141b8 <__assert_fail@plt+0x2e80>
   14150:	ldr	sl, [pc, #108]	; 141c4 <__assert_fail@plt+0x2e8c>
   14154:	add	r5, r5, #24
   14158:	ldr	r4, [r5, #-16]
   1415c:	add	fp, sp, #12
   14160:	add	sl, pc, sl
   14164:	cmp	r4, #0
   14168:	beq	141b8 <__assert_fail@plt+0x2e80>
   1416c:	ldrb	r6, [r4]
   14170:	cmp	r6, #0
   14174:	bne	141b0 <__assert_fail@plt+0x2e78>
   14178:	ldr	r7, [r4, #4]
   1417c:	mov	r0, r7
   14180:	bl	13d94 <__assert_fail@plt+0x2a5c>
   14184:	cmp	r0, #0
   14188:	beq	141b0 <__assert_fail@plt+0x2e78>
   1418c:	str	fp, [sp]
   14190:	mov	r0, r8
   14194:	mov	r1, r9
   14198:	mov	r2, r5
   1419c:	mov	r3, r4
   141a0:	str	r7, [sp, #12]
   141a4:	str	sl, [sp, #16]
   141a8:	strb	r6, [sp, #20]
   141ac:	bl	13eb4 <__assert_fail@plt+0x2b7c>
   141b0:	ldr	r4, [r4, #20]
   141b4:	b	14164 <__assert_fail@plt+0x2e2c>
   141b8:	add	sp, sp, #28
   141bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   141c0:	andeq	fp, r0, r4, lsr #26
   141c4:	andeq	fp, r0, r9, lsl #26
   141c8:	push	{r3, r4, r5, r6, r7, lr}
   141cc:	mov	r6, r1
   141d0:	ldr	r1, [pc, #128]	; 14258 <__assert_fail@plt+0x2f20>
   141d4:	mov	r5, r0
   141d8:	ldr	r0, [r2, #4]
   141dc:	mov	r4, r2
   141e0:	add	r1, pc, r1
   141e4:	bl	11098 <strcmp@plt>
   141e8:	cmp	r0, #0
   141ec:	popne	{r3, r4, r5, r6, r7, pc}
   141f0:	ldr	r1, [pc, #100]	; 1425c <__assert_fail@plt+0x2f24>
   141f4:	mov	r0, r4
   141f8:	add	r1, pc, r1
   141fc:	bl	18044 <__assert_fail@plt+0x6d0c>
   14200:	subs	r7, r0, #0
   14204:	bne	1423c <__assert_fail@plt+0x2f04>
   14208:	ldr	r1, [pc, #80]	; 14260 <__assert_fail@plt+0x2f28>
   1420c:	mov	r0, r4
   14210:	add	r1, pc, r1
   14214:	bl	18044 <__assert_fail@plt+0x6d0c>
   14218:	subs	r7, r0, #0
   1421c:	popeq	{r3, r4, r5, r6, r7, pc}
   14220:	ldr	r2, [pc, #60]	; 14264 <__assert_fail@plt+0x2f2c>
   14224:	mov	r3, #3
   14228:	mov	r0, r5
   1422c:	str	r3, [r5, #16]
   14230:	mov	r1, r6
   14234:	add	r2, pc, r2
   14238:	bl	122f0 <__assert_fail@plt+0xfb8>
   1423c:	ldr	r3, [r7, #4]
   14240:	mov	r0, r5
   14244:	mov	r1, r6
   14248:	mov	r2, r4
   1424c:	str	r3, [r5, #8]
   14250:	pop	{r3, r4, r5, r6, r7, lr}
   14254:	b	12ae0 <__assert_fail@plt+0x17a8>
   14258:	andeq	fp, r0, r0, asr #19
   1425c:	andeq	fp, r0, r3, lsl #25
   14260:	andeq	fp, r0, r5, ror #24
   14264:	andeq	fp, r0, r3, asr ip
   14268:	push	{r4, r5, r6, lr}
   1426c:	mov	r6, r1
   14270:	ldr	r1, [pc, #76]	; 142c4 <__assert_fail@plt+0x2f8c>
   14274:	mov	r5, r0
   14278:	ldr	r0, [r2, #4]
   1427c:	mov	r4, r2
   14280:	add	r1, pc, r1
   14284:	bl	11098 <strcmp@plt>
   14288:	cmp	r0, #0
   1428c:	popne	{r4, r5, r6, pc}
   14290:	ldr	r1, [pc, #48]	; 142c8 <__assert_fail@plt+0x2f90>
   14294:	mov	r0, r4
   14298:	add	r1, pc, r1
   1429c:	bl	18044 <__assert_fail@plt+0x6d0c>
   142a0:	cmp	r0, #0
   142a4:	popeq	{r4, r5, r6, pc}
   142a8:	ldr	r3, [r0, #4]
   142ac:	mov	r1, r6
   142b0:	mov	r0, r5
   142b4:	mov	r2, r4
   142b8:	str	r3, [r5, #8]
   142bc:	pop	{r4, r5, r6, lr}
   142c0:	b	12ae0 <__assert_fail@plt+0x17a8>
   142c4:	andeq	fp, r0, r0, lsr #18
   142c8:	andeq	ip, r0, lr, lsl r3
   142cc:	push	{r4, r5, r6, r7, r8, lr}
   142d0:	mov	r5, r0
   142d4:	mov	r0, r2
   142d8:	mov	r4, r2
   142dc:	mov	r7, r1
   142e0:	bl	18014 <__assert_fail@plt+0x6cdc>
   142e4:	ldr	r1, [pc, #144]	; 1437c <__assert_fail@plt+0x3044>
   142e8:	add	r1, pc, r1
   142ec:	mov	r6, r0
   142f0:	mov	r0, r4
   142f4:	bl	18044 <__assert_fail@plt+0x6d0c>
   142f8:	cmp	r0, #0
   142fc:	bne	14324 <__assert_fail@plt+0x2fec>
   14300:	ldr	r1, [pc, #120]	; 14380 <__assert_fail@plt+0x3048>
   14304:	mov	r0, r4
   14308:	add	r1, pc, r1
   1430c:	bl	18044 <__assert_fail@plt+0x6d0c>
   14310:	cmp	r0, #0
   14314:	beq	1434c <__assert_fail@plt+0x3014>
   14318:	ldr	r3, [r0, #8]
   1431c:	cmp	r3, #0
   14320:	beq	1434c <__assert_fail@plt+0x3014>
   14324:	ldrb	r3, [r6]
   14328:	cmp	r3, #0
   1432c:	popne	{r4, r5, r6, r7, r8, pc}
   14330:	ldr	r2, [pc, #76]	; 14384 <__assert_fail@plt+0x304c>
   14334:	mov	r3, #3
   14338:	mov	r0, r5
   1433c:	str	r3, [r5, #16]
   14340:	mov	r1, r7
   14344:	add	r2, pc, r2
   14348:	b	14370 <__assert_fail@plt+0x3038>
   1434c:	ldrb	r3, [r6]
   14350:	cmp	r3, #0
   14354:	popeq	{r4, r5, r6, r7, r8, pc}
   14358:	ldr	r2, [pc, #40]	; 14388 <__assert_fail@plt+0x3050>
   1435c:	mov	r0, r5
   14360:	mov	r1, r7
   14364:	mov	r3, #3
   14368:	add	r2, pc, r2
   1436c:	str	r3, [r5, #16]
   14370:	ldr	r3, [r4, #24]
   14374:	pop	{r4, r5, r6, r7, r8, lr}
   14378:	b	122f0 <__assert_fail@plt+0xfb8>
   1437c:	andeq	ip, r0, r4, lsl #7
   14380:	andeq	fp, r0, r8, ror #2
   14384:	andeq	fp, r0, r4, ror fp
   14388:	andeq	fp, r0, r7, lsl #23
   1438c:	push	{r4, r5, r6, r7, r8, lr}
   14390:	mov	r6, r1
   14394:	ldr	r1, [pc, #504]	; 14594 <__assert_fail@plt+0x325c>
   14398:	mov	r5, r0
   1439c:	mov	r0, r2
   143a0:	mov	r4, r2
   143a4:	add	r1, pc, r1
   143a8:	bl	18044 <__assert_fail@plt+0x6d0c>
   143ac:	cmp	r0, #0
   143b0:	popeq	{r4, r5, r6, r7, r8, pc}
   143b4:	ldr	r7, [pc, #476]	; 14598 <__assert_fail@plt+0x3260>
   143b8:	ldr	r0, [r0, #12]
   143bc:	add	r7, pc, r7
   143c0:	mov	r1, r7
   143c4:	bl	11098 <strcmp@plt>
   143c8:	cmp	r0, #0
   143cc:	popne	{r4, r5, r6, r7, r8, pc}
   143d0:	ldr	r2, [r4, #28]
   143d4:	ldr	r3, [pc, #448]	; 1459c <__assert_fail@plt+0x3264>
   143d8:	cmp	r2, #3
   143dc:	add	r3, pc, r3
   143e0:	add	r3, r3, #240	; 0xf0
   143e4:	ldreq	r0, [r4, #4]
   143e8:	str	r3, [r4, #48]	; 0x30
   143ec:	moveq	r1, r7
   143f0:	beq	14408 <__assert_fail@plt+0x30d0>
   143f4:	cmp	r2, #4
   143f8:	bne	14414 <__assert_fail@plt+0x30dc>
   143fc:	ldr	r1, [pc, #412]	; 145a0 <__assert_fail@plt+0x3268>
   14400:	ldr	r0, [r4, #4]
   14404:	add	r1, pc, r1
   14408:	bl	11110 <memcmp@plt>
   1440c:	cmp	r0, #0
   14410:	beq	14434 <__assert_fail@plt+0x30fc>
   14414:	ldr	r2, [pc, #392]	; 145a4 <__assert_fail@plt+0x326c>
   14418:	mov	r3, #3
   1441c:	mov	r0, r5
   14420:	str	r3, [r5, #16]
   14424:	mov	r1, r6
   14428:	add	r2, pc, r2
   1442c:	ldr	r3, [r4, #24]
   14430:	bl	122f0 <__assert_fail@plt+0xfb8>
   14434:	ldr	r1, [pc, #364]	; 145a8 <__assert_fail@plt+0x3270>
   14438:	mov	r0, r4
   1443c:	add	r1, pc, r1
   14440:	bl	18044 <__assert_fail@plt+0x6d0c>
   14444:	cmp	r0, #0
   14448:	bne	1446c <__assert_fail@plt+0x3134>
   1444c:	ldr	r2, [pc, #344]	; 145ac <__assert_fail@plt+0x3274>
   14450:	mov	r3, #3
   14454:	mov	r0, r5
   14458:	str	r3, [r5, #16]
   1445c:	mov	r1, r6
   14460:	add	r2, pc, r2
   14464:	ldr	r3, [r4, #24]
   14468:	bl	122f0 <__assert_fail@plt+0xfb8>
   1446c:	ldr	r3, [r4, #36]	; 0x24
   14470:	cmp	r3, #3
   14474:	beq	14498 <__assert_fail@plt+0x3160>
   14478:	ldr	r2, [pc, #304]	; 145b0 <__assert_fail@plt+0x3278>
   1447c:	mov	r3, #3
   14480:	mov	r0, r5
   14484:	str	r3, [r5, #16]
   14488:	mov	r1, r6
   1448c:	add	r2, pc, r2
   14490:	ldr	r3, [r4, #24]
   14494:	bl	122f0 <__assert_fail@plt+0xfb8>
   14498:	ldr	r3, [r4, #40]	; 0x28
   1449c:	cmp	r3, #2
   144a0:	beq	144c4 <__assert_fail@plt+0x318c>
   144a4:	ldr	r2, [pc, #264]	; 145b4 <__assert_fail@plt+0x327c>
   144a8:	mov	r3, #3
   144ac:	mov	r0, r5
   144b0:	str	r3, [r5, #16]
   144b4:	mov	r1, r6
   144b8:	add	r2, pc, r2
   144bc:	ldr	r3, [r4, #24]
   144c0:	bl	122f0 <__assert_fail@plt+0xfb8>
   144c4:	ldr	r1, [pc, #236]	; 145b8 <__assert_fail@plt+0x3280>
   144c8:	mov	r0, r4
   144cc:	add	r1, pc, r1
   144d0:	bl	18044 <__assert_fail@plt+0x6d0c>
   144d4:	cmp	r0, #0
   144d8:	bne	144f8 <__assert_fail@plt+0x31c0>
   144dc:	ldr	r2, [pc, #216]	; 145bc <__assert_fail@plt+0x3284>
   144e0:	mov	r3, #3
   144e4:	mov	r0, r5
   144e8:	str	r3, [r5, #16]
   144ec:	mov	r1, r6
   144f0:	add	r2, pc, r2
   144f4:	b	14588 <__assert_fail@plt+0x3250>
   144f8:	ldr	r3, [r0, #8]
   144fc:	cmp	r3, #8
   14500:	beq	14520 <__assert_fail@plt+0x31e8>
   14504:	ldr	r2, [pc, #180]	; 145c0 <__assert_fail@plt+0x3288>
   14508:	mov	r3, #3
   1450c:	mov	r0, r5
   14510:	str	r3, [r5, #16]
   14514:	mov	r1, r6
   14518:	add	r2, pc, r2
   1451c:	b	14588 <__assert_fail@plt+0x3250>
   14520:	ldr	r7, [r0, #12]
   14524:	ldr	r0, [r7]
   14528:	bl	12120 <__assert_fail@plt+0xde8>
   1452c:	mov	r8, r0
   14530:	ldr	r0, [r7, #4]
   14534:	bl	12120 <__assert_fail@plt+0xde8>
   14538:	cmp	r8, r0
   1453c:	bls	14560 <__assert_fail@plt+0x3228>
   14540:	ldr	r2, [pc, #124]	; 145c4 <__assert_fail@plt+0x328c>
   14544:	mov	r3, #3
   14548:	mov	r0, r5
   1454c:	str	r3, [r5, #16]
   14550:	mov	r1, r6
   14554:	add	r2, pc, r2
   14558:	ldr	r3, [r4, #24]
   1455c:	bl	122f0 <__assert_fail@plt+0xfb8>
   14560:	ldr	r0, [r7, #4]
   14564:	bl	12120 <__assert_fail@plt+0xde8>
   14568:	cmp	r0, #255	; 0xff
   1456c:	popls	{r4, r5, r6, r7, r8, pc}
   14570:	ldr	r2, [pc, #80]	; 145c8 <__assert_fail@plt+0x3290>
   14574:	mov	r0, r5
   14578:	mov	r1, r6
   1457c:	mov	r3, #3
   14580:	add	r2, pc, r2
   14584:	str	r3, [r5, #16]
   14588:	ldr	r3, [r4, #24]
   1458c:	pop	{r4, r5, r6, r7, r8, lr}
   14590:	b	122f0 <__assert_fail@plt+0xfb8>
   14594:	andeq	fp, r0, r2, lsr r0
   14598:	andeq	fp, r0, r0, ror #22
   1459c:	andeq	pc, r1, r8, lsr sl	; <UNPREDICTABLE>
   145a0:	andeq	fp, r0, ip, lsl fp
   145a4:	strdeq	fp, [r0], -sp
   145a8:	andeq	fp, r0, r4, lsr r0
   145ac:	andeq	fp, r0, lr, ror #21
   145b0:	strdeq	fp, [r0], -sl
   145b4:	strdeq	fp, [r0], -lr
   145b8:	ldrdeq	fp, [r0], -r6
   145bc:	strdeq	fp, [r0], -r3
   145c0:	strdeq	fp, [r0], -r4
   145c4:	ldrdeq	fp, [r0], -sl
   145c8:	strdeq	fp, [r0], -r0
   145cc:	ldr	r1, [pc, #136]	; 1465c <__assert_fail@plt+0x3324>
   145d0:	mov	r0, r2
   145d4:	push	{r4, r5, r6, r7, r8, lr}
   145d8:	add	r1, pc, r1
   145dc:	mov	r6, r2
   145e0:	bl	18044 <__assert_fail@plt+0x6d0c>
   145e4:	cmp	r0, #0
   145e8:	popeq	{r4, r5, r6, r7, r8, pc}
   145ec:	ldr	r4, [r0, #12]
   145f0:	ldr	r7, [r0, #8]
   145f4:	ldr	r8, [pc, #100]	; 14660 <__assert_fail@plt+0x3328>
   145f8:	add	r7, r4, r7
   145fc:	add	r8, pc, r8
   14600:	cmp	r4, r7
   14604:	bcs	14644 <__assert_fail@plt+0x330c>
   14608:	rsb	r5, r4, r7
   1460c:	cmp	r5, #10
   14610:	bne	1462c <__assert_fail@plt+0x32f4>
   14614:	mov	r0, r4
   14618:	mov	r1, r8
   1461c:	mov	r2, r5
   14620:	bl	11110 <memcmp@plt>
   14624:	cmp	r0, #0
   14628:	beq	14648 <__assert_fail@plt+0x3310>
   1462c:	mov	r0, r4
   14630:	mov	r1, r5
   14634:	bl	1126c <strnlen@plt>
   14638:	add	r0, r0, #1
   1463c:	add	r4, r4, r0
   14640:	b	14600 <__assert_fail@plt+0x32c8>
   14644:	pop	{r4, r5, r6, r7, r8, pc}
   14648:	ldr	r3, [pc, #20]	; 14664 <__assert_fail@plt+0x332c>
   1464c:	add	r3, pc, r3
   14650:	add	r3, r3, #236	; 0xec
   14654:	str	r3, [r6, #48]	; 0x30
   14658:	pop	{r4, r5, r6, r7, r8, pc}
   1465c:	ldrdeq	fp, [r0], -r3
   14660:			; <UNDEFINED> instruction: 0x0000baba
   14664:	andeq	pc, r1, r8, asr #15
   14668:	push	{r0, r1, r2, r3}
   1466c:	ldr	r3, [pc, #64]	; 146b4 <__assert_fail@plt+0x337c>
   14670:	push	{r0, r1, r2, lr}
   14674:	add	r2, sp, #20
   14678:	str	r2, [sp, #4]
   1467c:	add	r3, pc, r3
   14680:	ldr	r2, [pc, #48]	; 146b8 <__assert_fail@plt+0x3380>
   14684:	ldr	r0, [pc, #48]	; 146bc <__assert_fail@plt+0x3384>
   14688:	ldr	r4, [r3, r2]
   1468c:	add	r0, pc, r0
   14690:	ldr	r1, [r4]
   14694:	bl	112f0 <fputs@plt>
   14698:	ldr	r1, [pc, #32]	; 146c0 <__assert_fail@plt+0x3388>
   1469c:	ldr	r0, [r4]
   146a0:	add	r1, pc, r1
   146a4:	ldr	r2, [sp, #4]
   146a8:	bl	11290 <vfprintf@plt>
   146ac:	mov	r0, #1
   146b0:	bl	111c4 <exit@plt>
   146b4:	andeq	pc, r1, ip, ror r9	; <UNPREDICTABLE>
   146b8:	andeq	r0, r0, r4, lsr r1
   146bc:	ldrdeq	sl, [r0], -r1
   146c0:	andeq	fp, r0, r1, lsr #20
   146c4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146c8:	mov	r8, r0
   146cc:	ldr	sl, [pc, #264]	; 147dc <__assert_fail@plt+0x34a4>
   146d0:	mov	r6, r1
   146d4:	ldr	r7, [r1, #12]
   146d8:	mvn	r9, #0
   146dc:	ldr	r5, [r2, #8]
   146e0:	add	sl, pc, sl
   146e4:	cmp	r5, #0
   146e8:	beq	147d4 <__assert_fail@plt+0x349c>
   146ec:	ldrb	r3, [r5]
   146f0:	cmp	r3, #0
   146f4:	ldreq	r4, [r5, #16]
   146f8:	moveq	fp, #3
   146fc:	bne	147cc <__assert_fail@plt+0x3494>
   14700:	cmp	r4, #0
   14704:	beq	147cc <__assert_fail@plt+0x3494>
   14708:	ldr	r3, [r4]
   1470c:	cmp	r3, #0
   14710:	bne	147c4 <__assert_fail@plt+0x348c>
   14714:	ldr	r2, [r4, #4]
   14718:	ldr	r3, [r5, #8]
   1471c:	add	r2, r2, #4
   14720:	cmp	r2, r3
   14724:	bls	1474c <__assert_fail@plt+0x3414>
   14728:	ldr	r3, [pc, #176]	; 147e0 <__assert_fail@plt+0x34a8>
   1472c:	movw	r2, #559	; 0x22f
   14730:	ldr	r0, [pc, #172]	; 147e4 <__assert_fail@plt+0x34ac>
   14734:	ldr	r1, [pc, #172]	; 147e8 <__assert_fail@plt+0x34b0>
   14738:	add	r3, pc, r3
   1473c:	add	r0, pc, r0
   14740:	add	r3, r3, #75	; 0x4b
   14744:	add	r1, pc, r1
   14748:	bl	11338 <__assert_fail@plt>
   1474c:	ldr	r1, [r4, #8]
   14750:	mov	r0, r7
   14754:	bl	1862c <__assert_fail@plt+0x72f4>
   14758:	subs	r1, r0, #0
   1475c:	bne	14794 <__assert_fail@plt+0x345c>
   14760:	ldr	r3, [r6]
   14764:	tst	r3, #2
   14768:	ldrne	r2, [r5, #12]
   1476c:	ldrne	r3, [r4, #4]
   14770:	strne	r9, [r2, r3]
   14774:	bne	147c4 <__assert_fail@plt+0x348c>
   14778:	str	fp, [r8, #16]
   1477c:	mov	r0, r8
   14780:	mov	r1, r6
   14784:	mov	r2, sl
   14788:	ldr	r3, [r4, #8]
   1478c:	bl	122f0 <__assert_fail@plt+0xfb8>
   14790:	b	147c4 <__assert_fail@plt+0x348c>
   14794:	mov	r0, r7
   14798:	bl	18aac <__assert_fail@plt+0x7774>
   1479c:	ldr	r2, [r5, #12]
   147a0:	ldr	r3, [r4, #4]
   147a4:	ubfx	r1, r0, #8, #8
   147a8:	str	r0, [sp, #4]
   147ac:	lsl	r1, r1, #16
   147b0:	orr	r1, r1, r0, lsl #24
   147b4:	orr	r1, r1, r0, lsr #24
   147b8:	ubfx	r0, r0, #16, #8
   147bc:	orr	r0, r1, r0, lsl #8
   147c0:	str	r0, [r2, r3]
   147c4:	ldr	r4, [r4, #12]
   147c8:	b	14700 <__assert_fail@plt+0x33c8>
   147cc:	ldr	r5, [r5, #20]
   147d0:	b	146e4 <__assert_fail@plt+0x33ac>
   147d4:	add	sp, sp, #12
   147d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147dc:	andeq	fp, r0, ip, lsr r3
   147e0:	andeq	sl, r0, r1, lsr #23
   147e4:	andeq	fp, r0, r3, lsr #19
   147e8:	andeq	fp, r0, lr, lsl #3
   147ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   147f0:	mov	r6, r1
   147f4:	ldr	r3, [r1, #12]
   147f8:	sub	sp, sp, #28
   147fc:	ldr	r1, [pc, #548]	; 14a28 <__assert_fail@plt+0x36f0>
   14800:	mov	r5, r0
   14804:	mov	r0, r2
   14808:	mov	r7, r2
   1480c:	add	r1, pc, r1
   14810:	str	r3, [sp, #20]
   14814:	bl	18044 <__assert_fail@plt+0x6d0c>
   14818:	subs	r8, r0, #0
   1481c:	beq	14a20 <__assert_fail@plt+0x36e8>
   14820:	ldr	r3, [r8, #8]
   14824:	tst	r3, #3
   14828:	beq	14860 <__assert_fail@plt+0x3528>
   1482c:	mov	r2, #3
   14830:	str	r2, [r5, #16]
   14834:	str	r3, [sp]
   14838:	mov	r3, #4
   1483c:	str	r3, [sp, #4]
   14840:	mov	r0, r5
   14844:	ldr	r3, [r7, #24]
   14848:	mov	r1, r6
   1484c:	ldr	r2, [pc, #472]	; 14a2c <__assert_fail@plt+0x36f4>
   14850:	str	r3, [sp, #8]
   14854:	add	r2, pc, r2
   14858:	ldr	r3, [r8, #4]
   1485c:	bl	122f0 <__assert_fail@plt+0xfb8>
   14860:	ldr	r9, [pc, #456]	; 14a30 <__assert_fail@plt+0x36f8>
   14864:	mov	r4, r7
   14868:	ldr	sl, [pc, #452]	; 14a34 <__assert_fail@plt+0x36fc>
   1486c:	ldr	fp, [pc, #452]	; 14a38 <__assert_fail@plt+0x3700>
   14870:	add	r9, pc, r9
   14874:	add	sl, pc, sl
   14878:	add	fp, pc, fp
   1487c:	cmp	r4, #0
   14880:	beq	14974 <__assert_fail@plt+0x363c>
   14884:	cmp	r4, r7
   14888:	bne	148a4 <__assert_fail@plt+0x356c>
   1488c:	mov	r0, r4
   14890:	mov	r1, fp
   14894:	bl	18044 <__assert_fail@plt+0x6d0c>
   14898:	cmp	r0, #0
   1489c:	beq	1496c <__assert_fail@plt+0x3634>
   148a0:	b	148d0 <__assert_fail@plt+0x3598>
   148a4:	mov	r0, r4
   148a8:	mov	r1, r9
   148ac:	bl	18044 <__assert_fail@plt+0x6d0c>
   148b0:	cmp	r0, #0
   148b4:	bne	1499c <__assert_fail@plt+0x3664>
   148b8:	mov	r0, r4
   148bc:	mov	r1, sl
   148c0:	bl	18044 <__assert_fail@plt+0x6d0c>
   148c4:	cmp	r0, #0
   148c8:	beq	1488c <__assert_fail@plt+0x3554>
   148cc:	b	1499c <__assert_fail@plt+0x3664>
   148d0:	bl	1811c <__assert_fail@plt+0x6de4>
   148d4:	add	r3, r0, #1
   148d8:	mov	r1, r0
   148dc:	cmp	r3, #1
   148e0:	bhi	148f0 <__assert_fail@plt+0x35b8>
   148e4:	ldr	r3, [r6]
   148e8:	tst	r3, #2
   148ec:	bne	14a20 <__assert_fail@plt+0x36e8>
   148f0:	ldr	r0, [sp, #20]
   148f4:	bl	18568 <__assert_fail@plt+0x7230>
   148f8:	subs	r4, r0, #0
   148fc:	bne	1491c <__assert_fail@plt+0x35e4>
   14900:	ldr	r2, [pc, #308]	; 14a3c <__assert_fail@plt+0x3704>
   14904:	mov	r3, #3
   14908:	mov	r0, r5
   1490c:	str	r3, [r5, #16]
   14910:	mov	r1, r6
   14914:	add	r2, pc, r2
   14918:	b	1498c <__assert_fail@plt+0x3654>
   1491c:	ldr	r1, [pc, #284]	; 14a40 <__assert_fail@plt+0x3708>
   14920:	add	r1, pc, r1
   14924:	bl	18044 <__assert_fail@plt+0x6d0c>
   14928:	cmp	r0, #0
   1492c:	bne	1499c <__assert_fail@plt+0x3664>
   14930:	ldr	r1, [pc, #268]	; 14a44 <__assert_fail@plt+0x370c>
   14934:	mov	r0, r4
   14938:	add	r1, pc, r1
   1493c:	bl	18044 <__assert_fail@plt+0x6d0c>
   14940:	cmp	r0, #0
   14944:	bne	1499c <__assert_fail@plt+0x3664>
   14948:	ldr	r2, [pc, #248]	; 14a48 <__assert_fail@plt+0x3710>
   1494c:	mov	r3, #3
   14950:	mov	r0, r5
   14954:	str	r3, [r5, #16]
   14958:	mov	r1, r6
   1495c:	add	r2, pc, r2
   14960:	ldr	r3, [r4, #24]
   14964:	bl	122f0 <__assert_fail@plt+0xfb8>
   14968:	b	1499c <__assert_fail@plt+0x3664>
   1496c:	ldr	r4, [r4, #16]
   14970:	b	1487c <__assert_fail@plt+0x3544>
   14974:	ldr	r2, [pc, #208]	; 14a4c <__assert_fail@plt+0x3714>
   14978:	mov	r0, r5
   1497c:	mov	r1, r6
   14980:	mov	r3, #3
   14984:	add	r2, pc, r2
   14988:	str	r3, [r5, #16]
   1498c:	ldr	r3, [r7, #24]
   14990:	add	sp, sp, #28
   14994:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14998:	b	122f0 <__assert_fail@plt+0xfb8>
   1499c:	ldr	r1, [pc, #172]	; 14a50 <__assert_fail@plt+0x3718>
   149a0:	mov	r0, r4
   149a4:	add	r1, pc, r1
   149a8:	bl	18044 <__assert_fail@plt+0x6d0c>
   149ac:	cmp	r0, #0
   149b0:	bne	149d4 <__assert_fail@plt+0x369c>
   149b4:	ldr	r2, [pc, #152]	; 14a54 <__assert_fail@plt+0x371c>
   149b8:	mov	r3, #3
   149bc:	mov	r0, r5
   149c0:	str	r3, [r5, #16]
   149c4:	mov	r1, r6
   149c8:	add	r2, pc, r2
   149cc:	ldr	r3, [r4, #24]
   149d0:	b	14990 <__assert_fail@plt+0x3658>
   149d4:	bl	1811c <__assert_fail@plt+0x6de4>
   149d8:	ldr	r4, [r8, #8]
   149dc:	lsl	r8, r0, #2
   149e0:	mov	r0, r4
   149e4:	mov	r1, r8
   149e8:	bl	1df6c <__assert_fail@plt+0xcc34>
   149ec:	cmp	r1, #0
   149f0:	beq	14a20 <__assert_fail@plt+0x36e8>
   149f4:	mov	r3, #3
   149f8:	str	r3, [r5, #16]
   149fc:	str	r8, [sp]
   14a00:	mov	r0, r5
   14a04:	ldr	r3, [r7, #24]
   14a08:	mov	r1, r6
   14a0c:	ldr	r2, [pc, #68]	; 14a58 <__assert_fail@plt+0x3720>
   14a10:	str	r3, [sp, #4]
   14a14:	add	r2, pc, r2
   14a18:	mov	r3, r4
   14a1c:	bl	122f0 <__assert_fail@plt+0xfb8>
   14a20:	add	sp, sp, #28
   14a24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14a28:	strdeq	fp, [r0], -pc	; <UNPREDICTABLE>
   14a2c:	ldrdeq	fp, [r0], -sp
   14a30:	andeq	fp, r0, r7, lsr r3
   14a34:			; <UNDEFINED> instruction: 0x0000b8b3
   14a38:	muleq	r0, lr, r8
   14a3c:	andeq	fp, r0, r1, lsr #16
   14a40:	andeq	fp, r0, r7, lsl #5
   14a44:	andeq	fp, r0, pc, ror #15
   14a48:	strdeq	fp, [r0], -sp
   14a4c:	andeq	fp, r0, r9, ror r8
   14a50:	andeq	fp, r0, r9, ror r8
   14a54:	andeq	fp, r0, lr, asr #15
   14a58:			; <UNDEFINED> instruction: 0x0000b7b2
   14a5c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a60:	mov	r8, r1
   14a64:	ldr	r1, [pc, #168]	; 14b14 <__assert_fail@plt+0x37dc>
   14a68:	mov	r7, r0
   14a6c:	mov	r4, r2
   14a70:	mov	r0, r2
   14a74:	add	r1, pc, r1
   14a78:	mov	r2, #3
   14a7c:	bl	112fc <strncmp@plt>
   14a80:	cmp	r0, #0
   14a84:	beq	14aa8 <__assert_fail@plt+0x3770>
   14a88:	ldr	r1, [pc, #136]	; 14b18 <__assert_fail@plt+0x37e0>
   14a8c:	mov	r0, r4
   14a90:	mov	r2, #3
   14a94:	add	r1, pc, r1
   14a98:	bl	112fc <strncmp@plt>
   14a9c:	cmp	r0, #0
   14aa0:	movne	r9, #1
   14aa4:	bne	14ab0 <__assert_fail@plt+0x3778>
   14aa8:	add	r4, r4, #3
   14aac:	mov	r9, #0
   14ab0:	ldr	sl, [pc, #100]	; 14b1c <__assert_fail@plt+0x37e4>
   14ab4:	mov	r5, #0
   14ab8:	add	sl, pc, sl
   14abc:	ldr	r6, [r5, sl]
   14ac0:	mov	r1, r4
   14ac4:	add	r5, r5, #4
   14ac8:	ldr	r0, [r6]
   14acc:	bl	11098 <strcmp@plt>
   14ad0:	cmp	r0, #0
   14ad4:	bne	14afc <__assert_fail@plt+0x37c4>
   14ad8:	cmp	r9, #0
   14adc:	mov	r0, r6
   14ae0:	mov	r1, r7
   14ae4:	mov	r2, r8
   14ae8:	beq	14af4 <__assert_fail@plt+0x37bc>
   14aec:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14af0:	b	12198 <__assert_fail@plt+0xe60>
   14af4:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   14af8:	b	12224 <__assert_fail@plt+0xeec>
   14afc:	cmp	r5, #236	; 0xec
   14b00:	bne	14abc <__assert_fail@plt+0x3784>
   14b04:	ldr	r0, [pc, #20]	; 14b20 <__assert_fail@plt+0x37e8>
   14b08:	mov	r1, r4
   14b0c:	add	r0, pc, r0
   14b10:	bl	14668 <__assert_fail@plt+0x3330>
   14b14:			; <UNDEFINED> instruction: 0x0000b7ba
   14b18:	muleq	r0, lr, r7
   14b1c:	andeq	pc, r1, ip, asr r3	; <UNPREDICTABLE>
   14b20:			; <UNDEFINED> instruction: 0x0000b5b5
   14b24:	push	{r4, r5, r6, r7, r8, lr}
   14b28:	mov	r4, #0
   14b2c:	ldr	r8, [pc, #180]	; 14be8 <__assert_fail@plt+0x38b0>
   14b30:	mov	r6, r0
   14b34:	ldr	r5, [pc, #176]	; 14bec <__assert_fail@plt+0x38b4>
   14b38:	mov	r7, r1
   14b3c:	add	r8, pc, r8
   14b40:	mov	r0, r4
   14b44:	add	r5, pc, r5
   14b48:	ldr	r2, [r4, r8]
   14b4c:	ldrb	r1, [r2, #12]
   14b50:	cmp	r1, #0
   14b54:	bne	14b64 <__assert_fail@plt+0x382c>
   14b58:	ldrb	r1, [r2, #13]
   14b5c:	cmp	r1, #0
   14b60:	beq	14b7c <__assert_fail@plt+0x3844>
   14b64:	cmp	r0, #0
   14b68:	movne	r0, #1
   14b6c:	bne	14b7c <__assert_fail@plt+0x3844>
   14b70:	mov	r0, r2
   14b74:	mov	r1, r7
   14b78:	bl	130c8 <__assert_fail@plt+0x1d90>
   14b7c:	add	r4, r4, #4
   14b80:	cmp	r4, #236	; 0xec
   14b84:	bne	14b48 <__assert_fail@plt+0x3810>
   14b88:	cmp	r0, #0
   14b8c:	popeq	{r4, r5, r6, r7, r8, pc}
   14b90:	cmp	r6, #0
   14b94:	bne	14bb8 <__assert_fail@plt+0x3880>
   14b98:	ldr	r3, [pc, #80]	; 14bf0 <__assert_fail@plt+0x38b8>
   14b9c:	ldr	r0, [pc, #80]	; 14bf4 <__assert_fail@plt+0x38bc>
   14ba0:	ldr	r3, [r5, r3]
   14ba4:	add	r0, pc, r0
   14ba8:	ldr	r1, [r3]
   14bac:	bl	112f0 <fputs@plt>
   14bb0:	mov	r0, #2
   14bb4:	bl	111c4 <exit@plt>
   14bb8:	ldr	r3, [pc, #56]	; 14bf8 <__assert_fail@plt+0x38c0>
   14bbc:	ldr	r3, [r5, r3]
   14bc0:	ldr	r3, [r3]
   14bc4:	cmp	r3, #2
   14bc8:	popgt	{r4, r5, r6, r7, r8, pc}
   14bcc:	ldr	r3, [pc, #28]	; 14bf0 <__assert_fail@plt+0x38b8>
   14bd0:	ldr	r0, [pc, #36]	; 14bfc <__assert_fail@plt+0x38c4>
   14bd4:	ldr	r3, [r5, r3]
   14bd8:	add	r0, pc, r0
   14bdc:	pop	{r4, r5, r6, r7, r8, lr}
   14be0:	ldr	r1, [r3]
   14be4:	b	112f0 <fputs@plt>
   14be8:	ldrdeq	pc, [r1], -r8
   14bec:			; <UNDEFINED> instruction: 0x0001f4b4
   14bf0:	andeq	r0, r0, r4, lsr r1
   14bf4:	muleq	r0, r2, r6
   14bf8:	andeq	r0, r0, r8, lsr r1
   14bfc:	muleq	r0, pc, r6	; <UNPREDICTABLE>
   14c00:	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   14c04:	lsl	r3, r0, #24
   14c08:	strd	r0, [sp]
   14c0c:	lsl	r0, r0, #8
   14c10:	ldrb	r6, [sp, #2]
   14c14:	and	r5, r0, #16711680	; 0xff0000
   14c18:	orr	r5, r5, r3
   14c1c:	mov	r1, #0
   14c20:	orr	r5, r5, r1
   14c24:	ldrb	r0, [sp, #7]
   14c28:	lsl	r1, r6, #8
   14c2c:	ldrb	r6, [sp, #4]
   14c30:	mov	r2, #0
   14c34:	orr	r4, r2, r2
   14c38:	orr	r4, r4, r0
   14c3c:	orr	r5, r5, r1
   14c40:	lsl	r0, r6, #24
   14c44:	ldrb	r6, [sp, #5]
   14c48:	orr	r4, r4, r2
   14c4c:	ldrb	r1, [sp, #3]
   14c50:	orr	r4, r4, r2
   14c54:	orr	r4, r4, r0
   14c58:	lsl	r0, r6, #16
   14c5c:	ldrb	r6, [sp, #6]
   14c60:	orr	r5, r5, r1
   14c64:	orr	r5, r5, r2
   14c68:	orr	r4, r4, r0
   14c6c:	orr	r5, r5, r2
   14c70:	lsl	r0, r6, #8
   14c74:	orr	r1, r2, r5
   14c78:	orr	r0, r0, r4
   14c7c:	add	sp, sp, #12
   14c80:	pop	{r4, r5, r6, r7, pc}
   14c84:	push	{r0, r1, r2, r3}
   14c88:	ldr	r3, [pc, #60]	; 14ccc <__assert_fail@plt+0x3994>
   14c8c:	push	{r0, r1, r2, lr}
   14c90:	add	r2, sp, #20
   14c94:	str	r2, [sp, #4]
   14c98:	add	r3, pc, r3
   14c9c:	ldr	r2, [pc, #44]	; 14cd0 <__assert_fail@plt+0x3998>
   14ca0:	ldr	r0, [pc, #44]	; 14cd4 <__assert_fail@plt+0x399c>
   14ca4:	ldr	r4, [r3, r2]
   14ca8:	add	r0, pc, r0
   14cac:	ldr	r1, [r4]
   14cb0:	bl	112f0 <fputs@plt>
   14cb4:	ldr	r0, [r4]
   14cb8:	ldr	r1, [sp, #16]
   14cbc:	ldr	r2, [sp, #4]
   14cc0:	bl	11290 <vfprintf@plt>
   14cc4:	mov	r0, #1
   14cc8:	bl	111c4 <exit@plt>
   14ccc:	andeq	pc, r1, r0, ror #6
   14cd0:	andeq	r0, r0, r4, lsr r1
   14cd4:			; <UNDEFINED> instruction: 0x00009fb5
   14cd8:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   14cdc:	add	r3, sp, #16
   14ce0:	stmdb	r3, {r0, r1, r2}
   14ce4:	ldr	r5, [sp, #8]
   14ce8:	ldr	r4, [sp, #12]
   14cec:	cmp	r4, #0
   14cf0:	beq	14d10 <__assert_fail@plt+0x39d8>
   14cf4:	ldr	r6, [r4, #12]
   14cf8:	ldr	r0, [r4, #8]
   14cfc:	bl	110e0 <free@plt>
   14d00:	mov	r0, r4
   14d04:	bl	110e0 <free@plt>
   14d08:	mov	r4, r6
   14d0c:	b	14cec <__assert_fail@plt+0x39b4>
   14d10:	cmp	r5, #0
   14d14:	beq	14d28 <__assert_fail@plt+0x39f0>
   14d18:	mov	r0, r5
   14d1c:	add	sp, sp, #16
   14d20:	pop	{r4, r5, r6, lr}
   14d24:	b	110e0 <free@plt>
   14d28:	add	sp, sp, #16
   14d2c:	pop	{r4, r5, r6, pc}
   14d30:	push	{r4, r5, r6, r7, r8, lr}
   14d34:	sub	sp, sp, #32
   14d38:	add	ip, sp, #4
   14d3c:	mov	r4, r0
   14d40:	ldr	r6, [sp, #56]	; 0x38
   14d44:	mov	r7, r1
   14d48:	stm	ip, {r1, r2, r3}
   14d4c:	cmp	r6, #0
   14d50:	ldr	r8, [sp, #8]
   14d54:	ldmeq	ip, {r0, r1, r2}
   14d58:	stmeq	r4, {r0, r1, r3}
   14d5c:	beq	14db0 <__assert_fail@plt+0x3a78>
   14d60:	ldm	ip, {r0, r1, r2}
   14d64:	add	r5, sp, #20
   14d68:	stm	r5, {r0, r1, r3}
   14d6c:	add	r3, r7, r6
   14d70:	cmp	r3, r6
   14d74:	lslgt	r6, r6, #1
   14d78:	bgt	14d70 <__assert_fail@plt+0x3a38>
   14d7c:	mov	r0, r8
   14d80:	mov	r1, r6
   14d84:	bl	1111c <realloc@plt>
   14d88:	cmp	r0, #0
   14d8c:	bne	14da0 <__assert_fail@plt+0x3a68>
   14d90:	ldr	r0, [pc, #36]	; 14dbc <__assert_fail@plt+0x3a84>
   14d94:	mov	r1, r6
   14d98:	add	r0, pc, r0
   14d9c:	bl	14c84 <__assert_fail@plt+0x394c>
   14da0:	str	r7, [sp, #20]
   14da4:	str	r0, [sp, #24]
   14da8:	ldm	r5, {r0, r1, r2}
   14dac:	stm	r4, {r0, r1, r2}
   14db0:	mov	r0, r4
   14db4:	add	sp, sp, #32
   14db8:	pop	{r4, r5, r6, r7, r8, pc}
   14dbc:	ldrdeq	fp, [r0], -ip
   14dc0:	push	{r4, r5, r6, r7, lr}
   14dc4:	sub	sp, sp, #28
   14dc8:	add	r5, sp, #12
   14dcc:	mov	r4, r0
   14dd0:	mov	r6, r2
   14dd4:	mov	r7, r1
   14dd8:	mov	r0, r5
   14ddc:	mov	r1, #0
   14de0:	mov	r2, #12
   14de4:	bl	11218 <memset@plt>
   14de8:	str	r6, [sp]
   14dec:	mov	r0, r4
   14df0:	ldm	r5, {r1, r2, r3}
   14df4:	bl	14d30 <__assert_fail@plt+0x39f8>
   14df8:	mov	r1, r7
   14dfc:	ldr	r0, [r4, #4]
   14e00:	mov	r2, r6
   14e04:	bl	110f8 <memcpy@plt>
   14e08:	mov	r0, r4
   14e0c:	str	r6, [r4]
   14e10:	add	sp, sp, #28
   14e14:	pop	{r4, r5, r6, r7, pc}
   14e18:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e1c:	sub	sp, sp, #24
   14e20:	add	r5, sp, #12
   14e24:	mov	r4, r0
   14e28:	mov	r6, r2
   14e2c:	mov	r7, r1
   14e30:	mov	r0, r5
   14e34:	mov	r1, #0
   14e38:	mov	r2, #12
   14e3c:	str	r1, [sp, #8]
   14e40:	bl	11218 <memset@plt>
   14e44:	add	r3, r6, #1
   14e48:	mov	r0, r4
   14e4c:	str	r3, [sp]
   14e50:	ldm	r5, {r1, r2, r3}
   14e54:	bl	14d30 <__assert_fail@plt+0x39f8>
   14e58:	add	sl, sp, #8
   14e5c:	ldm	r4, {r5, r9}
   14e60:	ldr	r3, [sp, #8]
   14e64:	add	r8, r5, #1
   14e68:	cmp	r3, r6
   14e6c:	bge	14e9c <__assert_fail@plt+0x3b64>
   14e70:	ldrb	r0, [r7, r3]
   14e74:	add	r2, r3, #1
   14e78:	str	r2, [sp, #8]
   14e7c:	cmp	r0, #92	; 0x5c
   14e80:	bne	14e90 <__assert_fail@plt+0x3b58>
   14e84:	mov	r0, r7
   14e88:	mov	r1, sl
   14e8c:	bl	1a100 <__assert_fail@plt+0x8dc8>
   14e90:	strb	r0, [r9, r5]
   14e94:	mov	r5, r8
   14e98:	b	14e60 <__assert_fail@plt+0x3b28>
   14e9c:	mov	r3, #0
   14ea0:	mov	r0, r4
   14ea4:	strb	r3, [r9, r5]
   14ea8:	str	r8, [r4]
   14eac:	add	sp, sp, #24
   14eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14eb4:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   14eb8:	mov	r8, r1
   14ebc:	mov	r7, r2
   14ec0:	mov	r1, #0
   14ec4:	mov	r2, #12
   14ec8:	mov	r4, r0
   14ecc:	bl	11218 <memset@plt>
   14ed0:	mov	r5, #0
   14ed4:	mov	r6, r5
   14ed8:	mov	r0, r8
   14edc:	bl	111d0 <feof@plt>
   14ee0:	cmp	r0, #0
   14ee4:	bne	14f74 <__assert_fail@plt+0x3c3c>
   14ee8:	cmp	r6, r7
   14eec:	bcs	14f74 <__assert_fail@plt+0x3c3c>
   14ef0:	cmn	r7, #1
   14ef4:	str	r5, [r4, #4]
   14ef8:	rsbne	r9, r6, r7
   14efc:	str	r6, [r4]
   14f00:	moveq	r9, #4096	; 0x1000
   14f04:	mov	r0, r4
   14f08:	str	r9, [sp]
   14f0c:	ldm	r4, {r1, r2, r3}
   14f10:	bl	14d30 <__assert_fail@plt+0x39f8>
   14f14:	mov	r2, r9
   14f18:	ldr	r5, [r4, #4]
   14f1c:	mov	r1, #1
   14f20:	ldr	r6, [r4]
   14f24:	mov	r3, r8
   14f28:	add	r0, r5, r6
   14f2c:	bl	11158 <fread@plt>
   14f30:	mov	r9, r0
   14f34:	mov	r0, r8
   14f38:	bl	110ec <ferror@plt>
   14f3c:	cmp	r0, #0
   14f40:	beq	14f60 <__assert_fail@plt+0x3c28>
   14f44:	bl	11200 <__errno_location@plt>
   14f48:	ldr	r0, [r0]
   14f4c:	bl	11188 <strerror@plt>
   14f50:	mov	r1, r0
   14f54:	ldr	r0, [pc, #44]	; 14f88 <__assert_fail@plt+0x3c50>
   14f58:	add	r0, pc, r0
   14f5c:	bl	14c84 <__assert_fail@plt+0x394c>
   14f60:	adds	r6, r9, r6
   14f64:	bcc	14ed8 <__assert_fail@plt+0x3ba0>
   14f68:	ldr	r0, [pc, #28]	; 14f8c <__assert_fail@plt+0x3c54>
   14f6c:	add	r0, pc, r0
   14f70:	bl	14c84 <__assert_fail@plt+0x394c>
   14f74:	mov	r0, r4
   14f78:	str	r6, [r4]
   14f7c:	str	r5, [r4, #4]
   14f80:	add	sp, sp, #12
   14f84:	pop	{r4, r5, r6, r7, r8, r9, pc}
   14f88:	andeq	fp, r0, r8, lsr sl
   14f8c:	andeq	fp, r0, r5, asr #20
   14f90:	push	{r4, r5, r6, r7, lr}
   14f94:	sub	sp, sp, #28
   14f98:	add	r4, sp, #12
   14f9c:	mov	r5, r0
   14fa0:	ldr	r6, [sp, #52]	; 0x34
   14fa4:	stm	r4, {r1, r2, r3}
   14fa8:	mov	r0, r4
   14fac:	str	r6, [sp]
   14fb0:	ldm	r4, {r1, r2, r3}
   14fb4:	bl	14d30 <__assert_fail@plt+0x39f8>
   14fb8:	mov	r2, r6
   14fbc:	ldr	r7, [sp, #12]
   14fc0:	ldr	r0, [sp, #16]
   14fc4:	ldr	r1, [sp, #48]	; 0x30
   14fc8:	add	r6, r7, r6
   14fcc:	add	r0, r0, r7
   14fd0:	bl	110f8 <memcpy@plt>
   14fd4:	str	r6, [sp, #12]
   14fd8:	ldm	r4, {r0, r1, r2}
   14fdc:	stm	r5, {r0, r1, r2}
   14fe0:	mov	r0, r5
   14fe4:	add	sp, sp, #28
   14fe8:	pop	{r4, r5, r6, r7, pc}
   14fec:	push	{r4, r5, r6, r7, r8, r9, lr}
   14ff0:	sub	sp, sp, #28
   14ff4:	add	r4, sp, #12
   14ff8:	mov	r6, r0
   14ffc:	ldr	r5, [sp, #64]	; 0x40
   15000:	ldr	r7, [sp, #56]	; 0x38
   15004:	mov	r0, r4
   15008:	stm	r4, {r1, r2, r3}
   1500c:	str	r5, [sp]
   15010:	ldm	r4, {r1, r2, r3}
   15014:	bl	14d30 <__assert_fail@plt+0x39f8>
   15018:	ldr	r2, [r7, #4]
   1501c:	ldr	r8, [sp, #16]
   15020:	ldr	r9, [sp, #12]
   15024:	add	r0, r5, r2
   15028:	add	r1, r8, r2
   1502c:	add	r0, r8, r0
   15030:	rsb	r2, r2, r9
   15034:	add	r9, r9, r5
   15038:	bl	110d4 <memmove@plt>
   1503c:	ldr	r0, [r7, #4]
   15040:	ldr	r1, [sp, #60]	; 0x3c
   15044:	mov	r2, r5
   15048:	add	r0, r8, r0
   1504c:	bl	110f8 <memcpy@plt>
   15050:	ldr	r3, [r7, #12]
   15054:	cmp	r3, #0
   15058:	ldrne	r2, [r3, #4]
   1505c:	addne	r2, r2, r5
   15060:	strne	r2, [r3, #4]
   15064:	ldrne	r3, [r3, #12]
   15068:	bne	15054 <__assert_fail@plt+0x3d1c>
   1506c:	str	r9, [sp, #12]
   15070:	ldm	r4, {r0, r1, r2}
   15074:	stm	r6, {r0, r1, r2}
   15078:	mov	r0, r6
   1507c:	add	sp, sp, #28
   15080:	pop	{r4, r5, r6, r7, r8, r9, pc}
   15084:	push	{r4, r5, r6, lr}
   15088:	sub	sp, sp, #48	; 0x30
   1508c:	add	ip, sp, #12
   15090:	add	r6, sp, #24
   15094:	mov	r5, r0
   15098:	ldr	r4, [sp, #72]	; 0x48
   1509c:	stm	ip, {r1, r2, r3}
   150a0:	mov	r0, r6
   150a4:	ldr	r3, [sp, #68]	; 0x44
   150a8:	str	r3, [sp]
   150ac:	ldr	r3, [sp, #64]	; 0x40
   150b0:	str	r3, [sp, #4]
   150b4:	ldm	ip, {r1, r2, r3}
   150b8:	bl	14f90 <__assert_fail@plt+0x3c58>
   150bc:	add	r3, sp, #36	; 0x24
   150c0:	ldm	r6, {r0, r1, r2}
   150c4:	stm	r3, {r0, r1, r2}
   150c8:	add	r1, r3, #8
   150cc:	ldr	r2, [sp, #44]	; 0x2c
   150d0:	cmp	r2, #0
   150d4:	addne	r1, r2, #12
   150d8:	ldrne	r2, [r2, #12]
   150dc:	bne	150d0 <__assert_fail@plt+0x3d98>
   150e0:	str	r4, [r1]
   150e4:	ldm	r3, {r0, r1, r2}
   150e8:	ldr	r3, [sp, #12]
   150ec:	stm	r5, {r0, r1, r2}
   150f0:	cmp	r4, #0
   150f4:	ldrne	r2, [r4, #4]
   150f8:	addne	r2, r2, r3
   150fc:	strne	r2, [r4, #4]
   15100:	ldrne	r4, [r4, #12]
   15104:	bne	150f0 <__assert_fail@plt+0x3db8>
   15108:	add	r3, sp, #60	; 0x3c
   1510c:	str	r4, [sp, #72]	; 0x48
   15110:	ldmib	r3, {r0, r1, r2}
   15114:	bl	14cd8 <__assert_fail@plt+0x39a0>
   15118:	mov	r0, r5
   1511c:	add	sp, sp, #48	; 0x30
   15120:	pop	{r4, r5, r6, pc}
   15124:	push	{r4, r5, lr}
   15128:	sub	sp, sp, #44	; 0x2c
   1512c:	add	r4, sp, #12
   15130:	mov	r5, r0
   15134:	stm	r4, {r1, r2, r3}
   15138:	ldr	r2, [sp, #64]	; 0x40
   1513c:	ldr	r3, [sp, #56]	; 0x38
   15140:	cmp	r2, #16
   15144:	ldr	r1, [sp, #60]	; 0x3c
   15148:	beq	151a0 <__assert_fail@plt+0x3e68>
   1514c:	bgt	1516c <__assert_fail@plt+0x3e34>
   15150:	cmp	r2, #8
   15154:	bne	15208 <__assert_fail@plt+0x3ed0>
   15158:	add	r2, sp, #40	; 0x28
   1515c:	strb	r3, [r2, #-8]!
   15160:	mov	r3, #1
   15164:	str	r2, [sp]
   15168:	b	151f0 <__assert_fail@plt+0x3eb8>
   1516c:	cmp	r2, #32
   15170:	beq	151c4 <__assert_fail@plt+0x3e8c>
   15174:	cmp	r2, #64	; 0x40
   15178:	bne	15208 <__assert_fail@plt+0x3ed0>
   1517c:	mov	r0, r3
   15180:	bl	14c00 <__assert_fail@plt+0x38c8>
   15184:	add	r3, sp, #40	; 0x28
   15188:	strd	r0, [r3, #-8]!
   1518c:	mov	r0, r5
   15190:	str	r3, [sp]
   15194:	mov	r3, #8
   15198:	str	r3, [sp, #4]
   1519c:	b	151f4 <__assert_fail@plt+0x3ebc>
   151a0:	uxtb	r2, r3
   151a4:	strh	r3, [sp, #28]
   151a8:	ubfx	r3, r3, #8, #8
   151ac:	orr	r3, r3, r2, lsl #8
   151b0:	add	r2, sp, #40	; 0x28
   151b4:	strh	r3, [r2, #-8]!
   151b8:	mov	r3, #2
   151bc:	str	r2, [sp]
   151c0:	b	151f0 <__assert_fail@plt+0x3eb8>
   151c4:	ubfx	r2, r3, #8, #8
   151c8:	str	r3, [sp, #32]
   151cc:	lsl	r2, r2, #16
   151d0:	orr	r2, r2, r3, lsl #24
   151d4:	orr	r2, r2, r3, lsr #24
   151d8:	ubfx	r3, r3, #16, #8
   151dc:	orr	r3, r2, r3, lsl #8
   151e0:	add	r2, sp, #40	; 0x28
   151e4:	str	r3, [r2, #-12]!
   151e8:	mov	r3, #4
   151ec:	str	r2, [sp]
   151f0:	str	r3, [sp, #4]
   151f4:	ldm	r4, {r1, r2, r3}
   151f8:	bl	14f90 <__assert_fail@plt+0x3c58>
   151fc:	mov	r0, r5
   15200:	add	sp, sp, #44	; 0x2c
   15204:	pop	{r4, r5, pc}
   15208:	ldr	r0, [pc, #8]	; 15218 <__assert_fail@plt+0x3ee0>
   1520c:	mov	r1, r2
   15210:	add	r0, pc, r0
   15214:	bl	14c84 <__assert_fail@plt+0x394c>
   15218:	andeq	fp, r0, r2, asr #15
   1521c:	push	{r4, r5, lr}
   15220:	sub	sp, sp, #44	; 0x2c
   15224:	add	r4, sp, #12
   15228:	mov	r5, r0
   1522c:	stm	r4, {r1, r2, r3}
   15230:	ldrd	r0, [sp, #56]	; 0x38
   15234:	bl	14c00 <__assert_fail@plt+0x38c8>
   15238:	strd	r0, [sp, #24]
   1523c:	ldrd	r0, [sp, #64]	; 0x40
   15240:	bl	14c00 <__assert_fail@plt+0x38c8>
   15244:	add	r3, sp, #24
   15248:	str	r3, [sp]
   1524c:	mov	r3, #16
   15250:	str	r3, [sp, #4]
   15254:	strd	r0, [sp, #32]
   15258:	mov	r0, r5
   1525c:	ldm	r4, {r1, r2, r3}
   15260:	bl	14f90 <__assert_fail@plt+0x3c58>
   15264:	mov	r0, r5
   15268:	add	sp, sp, #44	; 0x2c
   1526c:	pop	{r4, r5, pc}
   15270:	push	{r4, lr}
   15274:	sub	sp, sp, #32
   15278:	add	ip, sp, #20
   1527c:	mov	r4, r0
   15280:	stm	ip, {r1, r2, r3}
   15284:	mov	r3, #0
   15288:	ldr	r2, [sp, #40]	; 0x28
   1528c:	strd	r2, [sp]
   15290:	mov	r3, #32
   15294:	str	r3, [sp, #8]
   15298:	ldm	ip, {r1, r2, r3}
   1529c:	bl	15124 <__assert_fail@plt+0x3dec>
   152a0:	mov	r0, r4
   152a4:	add	sp, sp, #32
   152a8:	pop	{r4, pc}
   152ac:	push	{r4, lr}
   152b0:	sub	sp, sp, #32
   152b4:	add	ip, sp, #20
   152b8:	mov	r4, r0
   152bc:	stm	ip, {r1, r2, r3}
   152c0:	ldrd	r2, [sp, #40]	; 0x28
   152c4:	strd	r2, [sp]
   152c8:	mov	r3, #64	; 0x40
   152cc:	str	r3, [sp, #8]
   152d0:	ldm	ip, {r1, r2, r3}
   152d4:	bl	15124 <__assert_fail@plt+0x3dec>
   152d8:	mov	r0, r4
   152dc:	add	sp, sp, #32
   152e0:	pop	{r4, pc}
   152e4:	push	{r4, lr}
   152e8:	sub	sp, sp, #24
   152ec:	add	ip, sp, #12
   152f0:	mov	r4, r0
   152f4:	stm	ip, {r1, r2, r3}
   152f8:	add	r3, sp, #32
   152fc:	str	r3, [sp]
   15300:	mov	r3, #1
   15304:	str	r3, [sp, #4]
   15308:	ldm	ip, {r1, r2, r3}
   1530c:	bl	14f90 <__assert_fail@plt+0x3c58>
   15310:	mov	r0, r4
   15314:	add	sp, sp, #24
   15318:	pop	{r4, pc}
   1531c:	push	{r4, r5, r6, r7, lr}
   15320:	sub	sp, sp, #28
   15324:	add	r4, sp, #12
   15328:	mov	r5, r0
   1532c:	ldr	r6, [sp, #48]	; 0x30
   15330:	stm	r4, {r1, r2, r3}
   15334:	mov	r0, r4
   15338:	str	r6, [sp]
   1533c:	ldm	r4, {r1, r2, r3}
   15340:	bl	14d30 <__assert_fail@plt+0x39f8>
   15344:	mov	r2, r6
   15348:	ldr	r7, [sp, #12]
   1534c:	mov	r1, #0
   15350:	ldr	r0, [sp, #16]
   15354:	add	r6, r7, r6
   15358:	add	r0, r0, r7
   1535c:	bl	11218 <memset@plt>
   15360:	str	r6, [sp, #12]
   15364:	ldm	r4, {r0, r1, r2}
   15368:	stm	r5, {r0, r1, r2}
   1536c:	mov	r0, r5
   15370:	add	sp, sp, #28
   15374:	pop	{r4, r5, r6, r7, pc}
   15378:	push	{r4, lr}
   1537c:	sub	sp, sp, #24
   15380:	add	ip, sp, #12
   15384:	mov	r4, r0
   15388:	stm	ip, {r1, r2, r3}
   1538c:	mov	r3, r1
   15390:	ldr	r2, [sp, #32]
   15394:	add	r1, r1, r2
   15398:	rsb	r2, r2, #0
   1539c:	sub	r1, r1, #1
   153a0:	and	r2, r1, r2
   153a4:	rsb	r3, r3, r2
   153a8:	str	r3, [sp]
   153ac:	ldm	ip, {r1, r2, r3}
   153b0:	bl	1531c <__assert_fail@plt+0x3fe4>
   153b4:	mov	r0, r4
   153b8:	add	sp, sp, #24
   153bc:	pop	{r4, pc}
   153c0:	push	{r4, r5, lr}
   153c4:	sub	sp, sp, #36	; 0x24
   153c8:	add	r4, sp, #4
   153cc:	mov	r5, r0
   153d0:	mov	r0, #16
   153d4:	stm	r4, {r1, r2, r3}
   153d8:	bl	11170 <malloc@plt>
   153dc:	subs	ip, r0, #0
   153e0:	bne	153f0 <__assert_fail@plt+0x40b8>
   153e4:	ldr	r0, [pc, #96]	; 1544c <__assert_fail@plt+0x4114>
   153e8:	add	r0, pc, r0
   153ec:	bl	14c84 <__assert_fail@plt+0x394c>
   153f0:	ldr	r3, [sp, #4]
   153f4:	ldm	r4, {r0, r1, r2}
   153f8:	str	r3, [ip, #4]
   153fc:	ldr	r3, [sp, #48]	; 0x30
   15400:	str	r3, [ip]
   15404:	ldr	r3, [sp, #52]	; 0x34
   15408:	str	r3, [ip, #8]
   1540c:	mov	r3, #0
   15410:	str	r3, [ip, #12]
   15414:	add	r3, sp, #20
   15418:	stm	r3, {r0, r1, r2}
   1541c:	add	r1, r3, #8
   15420:	ldr	r2, [sp, #28]
   15424:	cmp	r2, #0
   15428:	addne	r1, r2, #12
   1542c:	ldrne	r2, [r2, #12]
   15430:	bne	15424 <__assert_fail@plt+0x40ec>
   15434:	str	ip, [r1]
   15438:	ldm	r3, {r0, r1, r2}
   1543c:	stm	r5, {r0, r1, r2}
   15440:	mov	r0, r5
   15444:	add	sp, sp, #36	; 0x24
   15448:	pop	{r4, r5, pc}
   1544c:	andeq	fp, r0, r5, lsl #12
   15450:	sub	sp, sp, #16
   15454:	add	r3, sp, #16
   15458:	stmdb	r3, {r0, r1, r2}
   1545c:	ldr	r3, [sp, #4]
   15460:	ldr	r1, [sp, #8]
   15464:	cmp	r3, #0
   15468:	moveq	r0, r3
   1546c:	beq	154a4 <__assert_fail@plt+0x416c>
   15470:	sub	ip, r3, #1
   15474:	mov	r2, #0
   15478:	cmp	r2, ip
   1547c:	bge	15494 <__assert_fail@plt+0x415c>
   15480:	ldrb	r0, [r1, r2]
   15484:	cmp	r0, #0
   15488:	beq	154a4 <__assert_fail@plt+0x416c>
   1548c:	add	r2, r2, #1
   15490:	b	15478 <__assert_fail@plt+0x4140>
   15494:	add	r3, r1, r3
   15498:	ldrb	r0, [r3, #-1]
   1549c:	rsbs	r0, r0, #1
   154a0:	movcc	r0, #0
   154a4:	add	sp, sp, #16
   154a8:	bx	lr
   154ac:	ubfx	r3, r0, #8, #8
   154b0:	sub	sp, sp, #8
   154b4:	lsl	r3, r3, #16
   154b8:	orr	r3, r3, r0, lsl #24
   154bc:	orr	r3, r3, r0, lsr #24
   154c0:	ubfx	r0, r0, #16, #8
   154c4:	orr	r0, r3, r0, lsl #8
   154c8:	add	sp, sp, #8
   154cc:	bx	lr
   154d0:	ubfx	r3, r0, #8, #8
   154d4:	sub	sp, sp, #8
   154d8:	lsl	r3, r3, #16
   154dc:	orr	r3, r3, r0, lsl #24
   154e0:	orr	r3, r3, r0, lsr #24
   154e4:	ubfx	r0, r0, #16, #8
   154e8:	orr	r0, r3, r0, lsl #8
   154ec:	add	sp, sp, #8
   154f0:	bx	lr
   154f4:	cmp	r2, #0
   154f8:	mov	r3, r1
   154fc:	beq	1550c <__assert_fail@plt+0x41d4>
   15500:	ldr	r1, [pc, #20]	; 1551c <__assert_fail@plt+0x41e4>
   15504:	add	r1, pc, r1
   15508:	b	111f4 <fprintf@plt>
   1550c:	ldr	r1, [pc, #12]	; 15520 <__assert_fail@plt+0x41e8>
   15510:	mov	r2, r3
   15514:	add	r1, pc, r1
   15518:	b	111f4 <fprintf@plt>
   1551c:	andeq	fp, r0, r7, lsl r5
   15520:	andeq	fp, r0, r8, lsl r5
   15524:	push	{r0, r1, r2, lr}
   15528:	mov	r3, r1
   1552c:	ubfx	r2, r1, #8, #8
   15530:	str	r2, [sp]
   15534:	uxtb	r2, r1
   15538:	ldr	r1, [pc, #24]	; 15558 <__assert_fail@plt+0x4220>
   1553c:	str	r2, [sp, #4]
   15540:	lsr	r2, r3, #24
   15544:	add	r1, pc, r1
   15548:	ubfx	r3, r3, #16, #8
   1554c:	bl	111f4 <fprintf@plt>
   15550:	add	sp, sp, #12
   15554:	pop	{pc}		; (ldr pc, [sp], #4)
   15558:	strdeq	fp, [r0], -r7
   1555c:	mov	r2, r1
   15560:	ldr	r1, [pc, #4]	; 1556c <__assert_fail@plt+0x4234>
   15564:	add	r1, pc, r1
   15568:	b	111f4 <fprintf@plt>
   1556c:	andeq	fp, r0, r0, lsl r5
   15570:	push	{r4, r5, lr}
   15574:	sub	sp, sp, #44	; 0x2c
   15578:	mov	r4, r0
   1557c:	add	r0, sp, #40	; 0x28
   15580:	add	r5, sp, #8
   15584:	stmdb	r0, {r1, r2, r3}
   15588:	mov	r0, r5
   1558c:	ldr	r3, [sp, #32]
   15590:	str	r3, [sp]
   15594:	ldr	r3, [sp, #28]
   15598:	str	r3, [sp, #4]
   1559c:	ldm	r4, {r1, r2, r3}
   155a0:	bl	14f90 <__assert_fail@plt+0x3c58>
   155a4:	ldm	r5, {r0, r1, r2}
   155a8:	stm	r4, {r0, r1, r2}
   155ac:	add	sp, sp, #44	; 0x2c
   155b0:	pop	{r4, r5, pc}
   155b4:	push	{r4, r5, lr}
   155b8:	sub	sp, sp, #28
   155bc:	add	r5, sp, #8
   155c0:	mov	r4, r0
   155c4:	str	r1, [sp]
   155c8:	mov	r0, r5
   155cc:	ldm	r4, {r1, r2, r3}
   155d0:	bl	15378 <__assert_fail@plt+0x4040>
   155d4:	ldm	r5, {r0, r1, r2}
   155d8:	stm	r4, {r0, r1, r2}
   155dc:	add	sp, sp, #28
   155e0:	pop	{r4, r5, pc}
   155e4:	push	{r4, r5, lr}
   155e8:	mov	r4, r0
   155ec:	subs	r0, r2, #0
   155f0:	sub	sp, sp, #28
   155f4:	mov	r5, r1
   155f8:	bne	15604 <__assert_fail@plt+0x42cc>
   155fc:	mov	r0, r1
   15600:	bl	111dc <strlen@plt>
   15604:	str	r5, [sp]
   15608:	add	r5, sp, #8
   1560c:	str	r0, [sp, #4]
   15610:	mov	r0, r5
   15614:	ldm	r4, {r1, r2, r3}
   15618:	bl	14f90 <__assert_fail@plt+0x3c58>
   1561c:	mov	r3, #0
   15620:	ldm	r5, {r0, r1, r2}
   15624:	stm	r4, {r0, r1, r2}
   15628:	mov	r0, r5
   1562c:	str	r3, [sp]
   15630:	ldm	r4, {r1, r2, r3}
   15634:	bl	152e4 <__assert_fail@plt+0x3fac>
   15638:	ldm	r5, {r0, r1, r2}
   1563c:	stm	r4, {r0, r1, r2}
   15640:	add	sp, sp, #28
   15644:	pop	{r4, r5, pc}
   15648:	push	{r4, r5, lr}
   1564c:	sub	sp, sp, #28
   15650:	add	r5, sp, #8
   15654:	mov	r4, r0
   15658:	str	r1, [sp]
   1565c:	mov	r0, r5
   15660:	ldm	r4, {r1, r2, r3}
   15664:	bl	15270 <__assert_fail@plt+0x3f38>
   15668:	ldm	r5, {r0, r1, r2}
   1566c:	stm	r4, {r0, r1, r2}
   15670:	add	sp, sp, #28
   15674:	pop	{r4, r5, pc}
   15678:	mov	r1, #3
   1567c:	b	15648 <__assert_fail@plt+0x4310>
   15680:	mov	r1, #2
   15684:	b	15648 <__assert_fail@plt+0x4310>
   15688:	mov	r1, #1
   1568c:	b	15648 <__assert_fail@plt+0x4310>
   15690:	push	{r3, r4, r5, r6, r7, lr}
   15694:	mov	r5, r0
   15698:	ldr	r7, [pc, #104]	; 15708 <__assert_fail@plt+0x43d0>
   1569c:	mov	r4, r1
   156a0:	ldr	r6, [pc, #100]	; 1570c <__assert_fail@plt+0x43d4>
   156a4:	add	r7, pc, r7
   156a8:	add	r6, pc, r6
   156ac:	cmp	r4, #0
   156b0:	beq	156e8 <__assert_fail@plt+0x43b0>
   156b4:	ldrb	r3, [r4]
   156b8:	cmp	r3, #0
   156bc:	bne	156e0 <__assert_fail@plt+0x43a8>
   156c0:	mov	r1, r7
   156c4:	ldr	r2, [r4, #4]
   156c8:	mov	r0, r5
   156cc:	bl	111f4 <fprintf@plt>
   156d0:	mov	r0, r5
   156d4:	mov	r1, r6
   156d8:	ldr	r2, [r4, #4]
   156dc:	bl	111f4 <fprintf@plt>
   156e0:	ldr	r4, [r4, #8]
   156e4:	b	156ac <__assert_fail@plt+0x4374>
   156e8:	ldr	r0, [pc, #32]	; 15710 <__assert_fail@plt+0x43d8>
   156ec:	mov	r1, r5
   156f0:	add	r0, pc, r0
   156f4:	bl	112f0 <fputs@plt>
   156f8:	mov	r0, r5
   156fc:	mov	r1, #3
   15700:	pop	{r3, r4, r5, r6, r7, lr}
   15704:	b	15524 <__assert_fail@plt+0x41ec>
   15708:	andeq	fp, r0, r0, ror #7
   1570c:	strdeq	fp, [r0], -ip
   15710:	andeq	fp, r0, r0, lsr #7
   15714:	push	{r3, r4, r5, r6, r7, lr}
   15718:	mov	r5, r0
   1571c:	ldr	r0, [pc, #104]	; 1578c <__assert_fail@plt+0x4454>
   15720:	mov	r4, r1
   15724:	mov	r1, r5
   15728:	ldr	r7, [pc, #96]	; 15790 <__assert_fail@plt+0x4458>
   1572c:	add	r0, pc, r0
   15730:	ldr	r6, [pc, #92]	; 15794 <__assert_fail@plt+0x445c>
   15734:	bl	112f0 <fputs@plt>
   15738:	mov	r0, r5
   1573c:	mov	r1, #2
   15740:	add	r7, pc, r7
   15744:	bl	15524 <__assert_fail@plt+0x41ec>
   15748:	add	r6, pc, r6
   1574c:	cmp	r4, #0
   15750:	beq	15788 <__assert_fail@plt+0x4450>
   15754:	ldrb	r3, [r4]
   15758:	cmp	r3, #0
   1575c:	bne	15780 <__assert_fail@plt+0x4448>
   15760:	mov	r1, r7
   15764:	ldr	r2, [r4, #4]
   15768:	mov	r0, r5
   1576c:	bl	111f4 <fprintf@plt>
   15770:	mov	r0, r5
   15774:	mov	r1, r6
   15778:	ldr	r2, [r4, #4]
   1577c:	bl	111f4 <fprintf@plt>
   15780:	ldr	r4, [r4, #8]
   15784:	b	1574c <__assert_fail@plt+0x4414>
   15788:	pop	{r3, r4, r5, r6, r7, pc}
   1578c:	andeq	fp, r0, r5, ror r3
   15790:	andeq	fp, r0, r6, ror r3
   15794:	andeq	fp, r0, lr, ror r3
   15798:	push	{r3, r4, r5, r6, r7, lr}
   1579c:	mov	r5, r0
   157a0:	ldr	r7, [pc, #104]	; 15810 <__assert_fail@plt+0x44d8>
   157a4:	mov	r4, r1
   157a8:	ldr	r6, [pc, #100]	; 15814 <__assert_fail@plt+0x44dc>
   157ac:	add	r7, pc, r7
   157b0:	add	r6, pc, r6
   157b4:	cmp	r4, #0
   157b8:	beq	157f0 <__assert_fail@plt+0x44b8>
   157bc:	ldrb	r3, [r4]
   157c0:	cmp	r3, #0
   157c4:	bne	157e8 <__assert_fail@plt+0x44b0>
   157c8:	mov	r1, r7
   157cc:	ldr	r2, [r4, #4]
   157d0:	mov	r0, r5
   157d4:	bl	111f4 <fprintf@plt>
   157d8:	mov	r0, r5
   157dc:	mov	r1, r6
   157e0:	ldr	r2, [r4, #4]
   157e4:	bl	111f4 <fprintf@plt>
   157e8:	ldr	r4, [r4, #8]
   157ec:	b	157b4 <__assert_fail@plt+0x447c>
   157f0:	ldr	r0, [pc, #32]	; 15818 <__assert_fail@plt+0x44e0>
   157f4:	mov	r1, r5
   157f8:	add	r0, pc, r0
   157fc:	bl	112f0 <fputs@plt>
   15800:	mov	r0, r5
   15804:	mov	r1, #1
   15808:	pop	{r3, r4, r5, r6, r7, lr}
   1580c:	b	15524 <__assert_fail@plt+0x41ec>
   15810:	ldrdeq	fp, [r0], -r8
   15814:	strdeq	fp, [r0], -r4
   15818:	ldrdeq	fp, [r0], -r7
   1581c:	push	{r0, r1, r2, r3}
   15820:	ldr	r3, [pc, #60]	; 15864 <__assert_fail@plt+0x452c>
   15824:	push	{r0, r1, r2, lr}
   15828:	add	r2, sp, #20
   1582c:	str	r2, [sp, #4]
   15830:	add	r3, pc, r3
   15834:	ldr	r2, [pc, #44]	; 15868 <__assert_fail@plt+0x4530>
   15838:	ldr	r0, [pc, #44]	; 1586c <__assert_fail@plt+0x4534>
   1583c:	ldr	r4, [r3, r2]
   15840:	add	r0, pc, r0
   15844:	ldr	r1, [r4]
   15848:	bl	112f0 <fputs@plt>
   1584c:	ldr	r0, [r4]
   15850:	ldr	r1, [sp, #16]
   15854:	ldr	r2, [sp, #4]
   15858:	bl	11290 <vfprintf@plt>
   1585c:	mov	r0, #1
   15860:	bl	111c4 <exit@plt>
   15864:	andeq	lr, r1, r8, asr #15
   15868:	andeq	r0, r0, r4, lsr r1
   1586c:	andeq	r9, r0, sp, lsl r4
   15870:	push	{r3, lr}
   15874:	ldr	r2, [r0, #8]
   15878:	ldr	r3, [r0]
   1587c:	rsb	r2, r3, r2
   15880:	add	r2, r2, r1
   15884:	rsb	r1, r1, #0
   15888:	sub	r2, r2, #1
   1588c:	and	r1, r2, r1
   15890:	add	r1, r3, r1
   15894:	ldr	r3, [r0, #4]
   15898:	str	r1, [r0, #8]
   1589c:	cmp	r1, r3
   158a0:	popls	{r3, pc}
   158a4:	ldr	r0, [pc, #4]	; 158b0 <__assert_fail@plt+0x4578>
   158a8:	add	r0, pc, r0
   158ac:	bl	1581c <__assert_fail@plt+0x44e4>
   158b0:	andeq	fp, r0, lr, lsr r2
   158b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   158b8:	sub	sp, sp, #20
   158bc:	mov	r5, r0
   158c0:	add	r0, sp, #16
   158c4:	ldr	sl, [pc, #240]	; 159bc <__assert_fail@plt+0x4684>
   158c8:	ldr	r7, [pc, #240]	; 159c0 <__assert_fail@plt+0x4688>
   158cc:	stmdb	r0, {r1, r2, r3}
   158d0:	add	sl, pc, sl
   158d4:	ldmib	sp, {r8, r9}
   158d8:	add	r7, pc, r7
   158dc:	ldr	r4, [sp, #12]
   158e0:	cmp	r4, #0
   158e4:	beq	15928 <__assert_fail@plt+0x45f0>
   158e8:	ldr	r3, [r4]
   158ec:	cmp	r3, #2
   158f0:	bne	15920 <__assert_fail@plt+0x45e8>
   158f4:	ldr	r6, [r4, #8]
   158f8:	mov	r1, sl
   158fc:	ldr	fp, [r4, #4]
   15900:	mov	r0, r5
   15904:	mov	r2, r6
   15908:	bl	111f4 <fprintf@plt>
   1590c:	mov	r0, r5
   15910:	mov	r1, r7
   15914:	mov	r2, r6
   15918:	mov	r3, fp
   1591c:	bl	111f4 <fprintf@plt>
   15920:	ldr	r4, [r4, #12]
   15924:	b	158e0 <__assert_fail@plt+0x45a8>
   15928:	rsb	r7, r4, r8
   1592c:	cmp	r7, #3
   15930:	bls	15950 <__assert_fail@plt+0x4618>
   15934:	ldr	r0, [r9, r4]
   15938:	add	r4, r4, #4
   1593c:	bl	154ac <__assert_fail@plt+0x4174>
   15940:	mov	r1, r0
   15944:	mov	r0, r5
   15948:	bl	15524 <__assert_fail@plt+0x41ec>
   1594c:	b	15928 <__assert_fail@plt+0x45f0>
   15950:	ldr	sl, [pc, #108]	; 159c4 <__assert_fail@plt+0x468c>
   15954:	add	r9, r9, r4
   15958:	mov	r6, #0
   1595c:	add	sl, pc, sl
   15960:	rsb	r3, r6, r7
   15964:	cmp	r3, #0
   15968:	ble	15984 <__assert_fail@plt+0x464c>
   1596c:	ldrb	r2, [r9, r6]
   15970:	mov	r0, r5
   15974:	mov	r1, sl
   15978:	add	r6, r6, #1
   1597c:	bl	111f4 <fprintf@plt>
   15980:	b	15960 <__assert_fail@plt+0x4628>
   15984:	cmp	r7, #0
   15988:	addge	r4, r4, r7
   1598c:	cmp	r4, r8
   15990:	beq	159b4 <__assert_fail@plt+0x467c>
   15994:	ldr	r0, [pc, #44]	; 159c8 <__assert_fail@plt+0x4690>
   15998:	mov	r2, #183	; 0xb7
   1599c:	ldr	r1, [pc, #40]	; 159cc <__assert_fail@plt+0x4694>
   159a0:	ldr	r3, [pc, #40]	; 159d0 <__assert_fail@plt+0x4698>
   159a4:	add	r0, pc, r0
   159a8:	add	r1, pc, r1
   159ac:	add	r3, pc, r3
   159b0:	bl	11338 <__assert_fail@plt>
   159b4:	add	sp, sp, #20
   159b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   159bc:			; <UNDEFINED> instruction: 0x0000b1b4
   159c0:	andeq	fp, r0, lr, lsr r2
   159c4:	andeq	fp, r0, r7, asr #3
   159c8:	andeq	fp, r0, lr, lsl #3
   159cc:	muleq	r0, r7, r1
   159d0:	andeq	fp, r0, r2, asr r0
   159d4:	push	{r3, r4, r5, lr}
   159d8:	mov	r4, r0
   159dc:	ldr	r3, [r0, #8]
   159e0:	mov	r5, r2
   159e4:	ldr	ip, [r4, #4]
   159e8:	add	r0, r3, r2
   159ec:	cmp	ip, r0
   159f0:	bcs	15a00 <__assert_fail@plt+0x46c8>
   159f4:	ldr	r0, [pc, #32]	; 15a1c <__assert_fail@plt+0x46e4>
   159f8:	add	r0, pc, r0
   159fc:	bl	1581c <__assert_fail@plt+0x44e4>
   15a00:	mov	r0, r1
   15a04:	mov	r1, r3
   15a08:	bl	110f8 <memcpy@plt>
   15a0c:	ldr	r3, [r4, #8]
   15a10:	add	r5, r3, r5
   15a14:	str	r5, [r4, #8]
   15a18:	pop	{r3, r4, r5, pc}
   15a1c:	andeq	fp, r0, lr, ror #1
   15a20:	push	{r4, r5, r6, r7, lr}
   15a24:	sub	sp, sp, #28
   15a28:	ldr	r7, [r0]
   15a2c:	mov	r4, r0
   15a30:	mov	r6, r1
   15a34:	mov	r5, #0
   15a38:	cmp	r5, r7
   15a3c:	bge	15a60 <__assert_fail@plt+0x4728>
   15a40:	ldr	r1, [r4, #4]
   15a44:	mov	r0, r6
   15a48:	add	r1, r1, r5
   15a4c:	bl	11098 <strcmp@plt>
   15a50:	cmp	r0, #0
   15a54:	beq	15a8c <__assert_fail@plt+0x4754>
   15a58:	add	r5, r5, #1
   15a5c:	b	15a38 <__assert_fail@plt+0x4700>
   15a60:	mov	r0, r6
   15a64:	bl	111dc <strlen@plt>
   15a68:	str	r6, [sp]
   15a6c:	add	r6, sp, #8
   15a70:	add	r0, r0, #1
   15a74:	str	r0, [sp, #4]
   15a78:	mov	r0, r6
   15a7c:	ldm	r4, {r1, r2, r3}
   15a80:	bl	14f90 <__assert_fail@plt+0x3c58>
   15a84:	ldm	r6, {r0, r1, r2}
   15a88:	stm	r4, {r0, r1, r2}
   15a8c:	mov	r0, r5
   15a90:	add	sp, sp, #28
   15a94:	pop	{r4, r5, r6, r7, pc}
   15a98:	push	{r0, r1, r2, lr}
   15a9c:	ldr	r3, [r0]
   15aa0:	ldr	r2, [r0, #8]
   15aa4:	rsb	r3, r3, r2
   15aa8:	tst	r3, #3
   15aac:	beq	15ad4 <__assert_fail@plt+0x479c>
   15ab0:	ldr	r3, [pc, #56]	; 15af0 <__assert_fail@plt+0x47b8>
   15ab4:	movw	r2, #605	; 0x25d
   15ab8:	ldr	r0, [pc, #52]	; 15af4 <__assert_fail@plt+0x47bc>
   15abc:	ldr	r1, [pc, #52]	; 15af8 <__assert_fail@plt+0x47c0>
   15ac0:	add	r3, pc, r3
   15ac4:	add	r0, pc, r0
   15ac8:	add	r3, r3, #14
   15acc:	add	r1, pc, r1
   15ad0:	bl	11338 <__assert_fail@plt>
   15ad4:	add	r1, sp, #4
   15ad8:	mov	r2, #4
   15adc:	bl	159d4 <__assert_fail@plt+0x469c>
   15ae0:	ldr	r0, [sp, #4]
   15ae4:	bl	154ac <__assert_fail@plt+0x4174>
   15ae8:	add	sp, sp, #12
   15aec:	pop	{pc}		; (ldr pc, [sp], #4)
   15af0:	andeq	sl, r0, lr, lsr pc
   15af4:	andeq	fp, r0, r6, lsl #1
   15af8:	andeq	fp, r0, r3, ror r0
   15afc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15b00:	mov	r4, r0
   15b04:	mov	r0, #0
   15b08:	sub	sp, sp, #52	; 0x34
   15b0c:	mov	fp, r1
   15b10:	mov	r1, r0
   15b14:	mov	r9, r3
   15b18:	mov	r5, r2
   15b1c:	bl	17a28 <__assert_fail@plt+0x66f0>
   15b20:	ldr	r1, [r4, #4]
   15b24:	ldr	sl, [pc, #704]	; 15dec <__assert_fail@plt+0x4ab4>
   15b28:	mov	r8, #0
   15b2c:	add	sl, pc, sl
   15b30:	mov	r6, r0
   15b34:	ldr	r0, [r4, #8]
   15b38:	mov	r3, r0
   15b3c:	cmp	r3, r1
   15b40:	ldrcs	r0, [pc, #680]	; 15df0 <__assert_fail@plt+0x4ab8>
   15b44:	addcs	r0, pc, r0
   15b48:	bcs	15d9c <__assert_fail@plt+0x4a64>
   15b4c:	ldrb	r2, [r3], #1
   15b50:	add	r8, r8, #1
   15b54:	cmp	r2, #0
   15b58:	bne	15b3c <__assert_fail@plt+0x4804>
   15b5c:	bl	19f20 <__assert_fail@plt+0x8be8>
   15b60:	ldr	r3, [r4, #8]
   15b64:	mov	r1, #4
   15b68:	add	r8, r3, r8
   15b6c:	str	r8, [r4, #8]
   15b70:	mov	r7, r0
   15b74:	mov	r0, r4
   15b78:	bl	15870 <__assert_fail@plt+0x4538>
   15b7c:	tst	r9, #1
   15b80:	streq	r7, [r6, #4]
   15b84:	beq	15be4 <__assert_fail@plt+0x48ac>
   15b88:	mov	r0, r5
   15b8c:	bl	111dc <strlen@plt>
   15b90:	mov	r1, r5
   15b94:	mov	r8, r0
   15b98:	mov	r0, r7
   15b9c:	mov	r2, r8
   15ba0:	bl	112fc <strncmp@plt>
   15ba4:	cmp	r0, #0
   15ba8:	beq	15bc0 <__assert_fail@plt+0x4888>
   15bac:	ldr	r0, [pc, #576]	; 15df4 <__assert_fail@plt+0x4abc>
   15bb0:	mov	r1, r7
   15bb4:	mov	r2, r5
   15bb8:	add	r0, pc, r0
   15bbc:	bl	1581c <__assert_fail@plt+0x44e4>
   15bc0:	ldr	r1, [pc, #560]	; 15df8 <__assert_fail@plt+0x4ac0>
   15bc4:	mov	r0, r5
   15bc8:	add	r1, pc, r1
   15bcc:	bl	11098 <strcmp@plt>
   15bd0:	cmp	r0, #0
   15bd4:	addne	r8, r8, #1
   15bd8:	add	r0, r7, r8
   15bdc:	bl	19f20 <__assert_fail@plt+0x8be8>
   15be0:	str	r0, [r6, #4]
   15be4:	ldr	r3, [pc, #528]	; 15dfc <__assert_fail@plt+0x4ac4>
   15be8:	add	r5, sp, #36	; 0x24
   15bec:	add	r3, pc, r3
   15bf0:	str	r3, [sp, #16]
   15bf4:	ldr	r3, [pc, #516]	; 15e00 <__assert_fail@plt+0x4ac8>
   15bf8:	add	r3, pc, r3
   15bfc:	str	r3, [sp, #20]
   15c00:	mov	r0, r4
   15c04:	bl	15a98 <__assert_fail@plt+0x4760>
   15c08:	sub	r3, r0, #1
   15c0c:	mov	r1, r0
   15c10:	cmp	r3, #8
   15c14:	addls	pc, pc, r3, lsl #2
   15c18:	b	15dc0 <__assert_fail@plt+0x4a88>
   15c1c:	b	15d70 <__assert_fail@plt+0x4a38>
   15c20:	b	15dcc <__assert_fail@plt+0x4a94>
   15c24:	b	15c40 <__assert_fail@plt+0x4908>
   15c28:	b	15da0 <__assert_fail@plt+0x4a68>
   15c2c:	b	15dc0 <__assert_fail@plt+0x4a88>
   15c30:	b	15dc0 <__assert_fail@plt+0x4a88>
   15c34:	b	15dc0 <__assert_fail@plt+0x4a88>
   15c38:	b	15dc0 <__assert_fail@plt+0x4a88>
   15c3c:	b	15d94 <__assert_fail@plt+0x4a5c>
   15c40:	ldr	r3, [r6, #12]
   15c44:	cmp	r3, #0
   15c48:	beq	15c60 <__assert_fail@plt+0x4928>
   15c4c:	ldr	r3, [pc, #432]	; 15e04 <__assert_fail@plt+0x4acc>
   15c50:	ldr	r0, [sp, #20]
   15c54:	ldr	r3, [sl, r3]
   15c58:	ldr	r1, [r3]
   15c5c:	bl	112f0 <fputs@plt>
   15c60:	mov	r0, r4
   15c64:	bl	15a98 <__assert_fail@plt+0x4760>
   15c68:	mov	r8, r0
   15c6c:	mov	r0, r4
   15c70:	bl	15a98 <__assert_fail@plt+0x4760>
   15c74:	ldr	r2, [fp]
   15c78:	ldr	lr, [fp, #4]
   15c7c:	mov	r1, r0
   15c80:	add	r0, r2, r0
   15c84:	mov	r3, r0
   15c88:	cmp	r3, lr
   15c8c:	mov	ip, r3
   15c90:	bcc	15ca0 <__assert_fail@plt+0x4968>
   15c94:	ldr	r0, [pc, #364]	; 15e08 <__assert_fail@plt+0x4ad0>
   15c98:	add	r0, pc, r0
   15c9c:	b	15dc8 <__assert_fail@plt+0x4a90>
   15ca0:	cmp	r3, r2
   15ca4:	bcc	15c94 <__assert_fail@plt+0x495c>
   15ca8:	ldrb	ip, [ip]
   15cac:	add	r3, r3, #1
   15cb0:	cmp	ip, #0
   15cb4:	bne	15c88 <__assert_fail@plt+0x4950>
   15cb8:	bl	19f20 <__assert_fail@plt+0x8be8>
   15cbc:	tst	r9, #2
   15cc0:	str	r0, [sp, #12]
   15cc4:	beq	15cdc <__assert_fail@plt+0x49a4>
   15cc8:	cmp	r8, #7
   15ccc:	bls	15cdc <__assert_fail@plt+0x49a4>
   15cd0:	mov	r0, r4
   15cd4:	mov	r1, #8
   15cd8:	bl	15870 <__assert_fail@plt+0x4538>
   15cdc:	mov	r0, r5
   15ce0:	mov	r1, #0
   15ce4:	mov	r2, #12
   15ce8:	bl	11218 <memset@plt>
   15cec:	cmp	r8, #0
   15cf0:	add	ip, sp, #24
   15cf4:	bne	15d14 <__assert_fail@plt+0x49dc>
   15cf8:	mov	r0, ip
   15cfc:	mov	r1, r8
   15d00:	mov	r2, #12
   15d04:	str	ip, [sp, #8]
   15d08:	bl	11218 <memset@plt>
   15d0c:	ldr	ip, [sp, #8]
   15d10:	b	15d54 <__assert_fail@plt+0x4a1c>
   15d14:	str	r8, [sp]
   15d18:	mov	r0, r5
   15d1c:	ldm	r5, {r1, r2, r3}
   15d20:	str	ip, [sp, #8]
   15d24:	bl	14d30 <__assert_fail@plt+0x39f8>
   15d28:	mov	r2, r8
   15d2c:	mov	r0, r4
   15d30:	ldr	r1, [sp, #40]	; 0x28
   15d34:	bl	159d4 <__assert_fail@plt+0x469c>
   15d38:	mov	r0, r4
   15d3c:	mov	r1, #4
   15d40:	bl	15870 <__assert_fail@plt+0x4538>
   15d44:	str	r8, [sp, #36]	; 0x24
   15d48:	ldm	r5, {r0, r1, r2}
   15d4c:	ldr	ip, [sp, #8]
   15d50:	stm	ip, {r0, r1, r2}
   15d54:	ldm	ip, {r1, r2, r3}
   15d58:	ldr	r0, [sp, #12]
   15d5c:	bl	17948 <__assert_fail@plt+0x6610>
   15d60:	mov	r1, r0
   15d64:	mov	r0, r6
   15d68:	bl	17b3c <__assert_fail@plt+0x6804>
   15d6c:	b	15c00 <__assert_fail@plt+0x48c8>
   15d70:	mov	r1, fp
   15d74:	mov	r0, r4
   15d78:	mov	r2, r7
   15d7c:	mov	r3, r9
   15d80:	bl	15afc <__assert_fail@plt+0x47c4>
   15d84:	mov	r1, r0
   15d88:	mov	r0, r6
   15d8c:	bl	17bac <__assert_fail@plt+0x6874>
   15d90:	b	15c00 <__assert_fail@plt+0x48c8>
   15d94:	ldr	r0, [pc, #112]	; 15e0c <__assert_fail@plt+0x4ad4>
   15d98:	add	r0, pc, r0
   15d9c:	bl	1581c <__assert_fail@plt+0x44e4>
   15da0:	tst	r9, #64	; 0x40
   15da4:	bne	15c00 <__assert_fail@plt+0x48c8>
   15da8:	ldr	r3, [pc, #84]	; 15e04 <__assert_fail@plt+0x4acc>
   15dac:	ldr	r0, [sp, #16]
   15db0:	ldr	r3, [sl, r3]
   15db4:	ldr	r1, [r3]
   15db8:	bl	112f0 <fputs@plt>
   15dbc:	b	15c00 <__assert_fail@plt+0x48c8>
   15dc0:	ldr	r0, [pc, #72]	; 15e10 <__assert_fail@plt+0x4ad8>
   15dc4:	add	r0, pc, r0
   15dc8:	bl	1581c <__assert_fail@plt+0x44e4>
   15dcc:	ldr	r3, [r6, #4]
   15dd0:	cmp	r3, r7
   15dd4:	beq	15de0 <__assert_fail@plt+0x4aa8>
   15dd8:	mov	r0, r7
   15ddc:	bl	110e0 <free@plt>
   15de0:	mov	r0, r6
   15de4:	add	sp, sp, #52	; 0x34
   15de8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15dec:	andeq	lr, r1, ip, asr #9
   15df0:	andeq	sl, r0, r2, lsr #31
   15df4:			; <UNDEFINED> instruction: 0x0000afbe
   15df8:	ldrdeq	sl, [r0], -r9
   15dfc:	andeq	fp, r0, r3, asr #32
   15e00:	andeq	sl, r0, fp, lsr #31
   15e04:	andeq	r0, r0, r4, lsr r1
   15e08:	andeq	sl, r0, r8, asr #30
   15e0c:	andeq	sl, r0, r0, ror lr
   15e10:	muleq	r0, ip, lr
   15e14:	push	{r4, r5, r6, lr}
   15e18:	mov	r4, r1
   15e1c:	ldr	r5, [pc, #76]	; 15e70 <__assert_fail@plt+0x4b38>
   15e20:	mov	r3, r4
   15e24:	ldr	r1, [pc, #72]	; 15e74 <__assert_fail@plt+0x4b3c>
   15e28:	mov	r6, r0
   15e2c:	add	r5, pc, r5
   15e30:	add	r1, pc, r1
   15e34:	mov	r2, r5
   15e38:	bl	111f4 <fprintf@plt>
   15e3c:	ldr	r1, [pc, #52]	; 15e78 <__assert_fail@plt+0x4b40>
   15e40:	mov	r2, r5
   15e44:	mov	r3, r4
   15e48:	mov	r0, r6
   15e4c:	add	r1, pc, r1
   15e50:	bl	111f4 <fprintf@plt>
   15e54:	ldr	r1, [pc, #32]	; 15e7c <__assert_fail@plt+0x4b44>
   15e58:	mov	r0, r6
   15e5c:	mov	r2, r5
   15e60:	mov	r3, r4
   15e64:	add	r1, pc, r1
   15e68:	pop	{r4, r5, r6, lr}
   15e6c:	b	111f4 <fprintf@plt>
   15e70:	andeq	sl, r0, r1, ror lr
   15e74:	andeq	sl, r0, lr, asr lr
   15e78:	andeq	sl, r0, r5, asr lr
   15e7c:	andeq	sl, r0, ip, lsr lr
   15e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e84:	sub	sp, sp, #20
   15e88:	mov	r6, r0
   15e8c:	mov	r5, r1
   15e90:	ldr	r8, [sp, #56]	; 0x38
   15e94:	mov	r0, r2
   15e98:	mov	sl, r3
   15e9c:	ldr	r3, [r1, #16]
   15ea0:	ldr	r1, [r6, #44]	; 0x2c
   15ea4:	mov	r4, r2
   15ea8:	blx	r3
   15eac:	ldr	r2, [r8, #12]
   15eb0:	mov	r0, r4
   15eb4:	ldr	r3, [r5, #4]
   15eb8:	ands	r2, r2, #1
   15ebc:	ldr	fp, [pc, #492]	; 160b0 <__assert_fail@plt+0x4d78>
   15ec0:	mov	r9, #0
   15ec4:	ldrne	r1, [r6, #24]
   15ec8:	movne	r2, #0
   15ecc:	ldreq	r1, [r6, #4]
   15ed0:	add	fp, pc, fp
   15ed4:	blx	r3
   15ed8:	ldr	r3, [r5, #8]
   15edc:	mov	r0, r4
   15ee0:	mov	r1, #4
   15ee4:	blx	r3
   15ee8:	ldr	r7, [r6, #8]
   15eec:	cmp	r7, #0
   15ef0:	beq	15fbc <__assert_fail@plt+0x4c84>
   15ef4:	ldrb	r3, [r7]
   15ef8:	cmp	r3, #0
   15efc:	bne	15fb4 <__assert_fail@plt+0x4c7c>
   15f00:	ldr	r3, [r7, #4]
   15f04:	mov	r1, fp
   15f08:	mov	r0, r3
   15f0c:	str	r3, [sp, #12]
   15f10:	bl	11098 <strcmp@plt>
   15f14:	ldr	r3, [sp, #12]
   15f18:	mov	r1, r3
   15f1c:	cmp	r0, #0
   15f20:	mov	r0, sl
   15f24:	moveq	r9, #1
   15f28:	bl	15a20 <__assert_fail@plt+0x46e8>
   15f2c:	ldr	r3, [r5, #24]
   15f30:	ldr	r1, [r7, #24]
   15f34:	mov	r2, r0
   15f38:	mov	r0, r4
   15f3c:	str	r2, [sp, #12]
   15f40:	blx	r3
   15f44:	ldr	r3, [r5]
   15f48:	mov	r0, r4
   15f4c:	ldr	r1, [r7, #8]
   15f50:	blx	r3
   15f54:	ldr	r2, [sp, #12]
   15f58:	ldr	r3, [r5]
   15f5c:	mov	r0, r4
   15f60:	mov	r1, r2
   15f64:	blx	r3
   15f68:	ldr	r3, [r8, #12]
   15f6c:	tst	r3, #2
   15f70:	beq	15f90 <__assert_fail@plt+0x4c58>
   15f74:	ldr	r3, [r7, #8]
   15f78:	cmp	r3, #7
   15f7c:	ble	15f90 <__assert_fail@plt+0x4c58>
   15f80:	ldr	r3, [r5, #8]
   15f84:	mov	r0, r4
   15f88:	mov	r1, #8
   15f8c:	blx	r3
   15f90:	add	r3, r7, #8
   15f94:	mov	r0, r4
   15f98:	ldr	ip, [r5, #12]
   15f9c:	ldm	r3, {r1, r2, r3}
   15fa0:	blx	ip
   15fa4:	mov	r0, r4
   15fa8:	ldr	r3, [r5, #8]
   15fac:	mov	r1, #4
   15fb0:	blx	r3
   15fb4:	ldr	r7, [r7, #20]
   15fb8:	b	15eec <__assert_fail@plt+0x4bb4>
   15fbc:	ldr	r3, [r8, #12]
   15fc0:	tst	r3, #4
   15fc4:	beq	16060 <__assert_fail@plt+0x4d28>
   15fc8:	cmp	r9, #0
   15fcc:	bne	16060 <__assert_fail@plt+0x4d28>
   15fd0:	ldr	r3, [r5, #24]
   15fd4:	mov	r0, r4
   15fd8:	mov	r1, r9
   15fdc:	blx	r3
   15fe0:	ldr	r1, [r6, #28]
   15fe4:	ldr	r3, [r5]
   15fe8:	mov	r0, r4
   15fec:	add	r1, r1, #1
   15ff0:	blx	r3
   15ff4:	ldr	r1, [pc, #184]	; 160b4 <__assert_fail@plt+0x4d7c>
   15ff8:	mov	r0, sl
   15ffc:	ldr	r7, [r5]
   16000:	add	r1, pc, r1
   16004:	bl	15a20 <__assert_fail@plt+0x46e8>
   16008:	mov	r1, r0
   1600c:	mov	r0, r4
   16010:	blx	r7
   16014:	ldr	r3, [r8, #12]
   16018:	tst	r3, #2
   1601c:	beq	1603c <__assert_fail@plt+0x4d04>
   16020:	ldr	r3, [r6, #28]
   16024:	cmp	r3, #6
   16028:	ble	1603c <__assert_fail@plt+0x4d04>
   1602c:	ldr	r3, [r5, #8]
   16030:	mov	r0, r4
   16034:	mov	r1, #8
   16038:	blx	r3
   1603c:	ldr	r3, [r5, #4]
   16040:	mov	r0, r4
   16044:	ldr	r1, [r6, #4]
   16048:	ldr	r2, [r6, #28]
   1604c:	blx	r3
   16050:	ldr	r3, [r5, #8]
   16054:	mov	r0, r4
   16058:	mov	r1, #4
   1605c:	blx	r3
   16060:	ldr	r7, [r6, #12]
   16064:	cmp	r7, #0
   16068:	beq	16098 <__assert_fail@plt+0x4d60>
   1606c:	ldrb	r3, [r7]
   16070:	cmp	r3, #0
   16074:	bne	16090 <__assert_fail@plt+0x4d58>
   16078:	str	r8, [sp]
   1607c:	mov	r0, r7
   16080:	mov	r1, r5
   16084:	mov	r2, r4
   16088:	mov	r3, sl
   1608c:	bl	15e80 <__assert_fail@plt+0x4b48>
   16090:	ldr	r7, [r7, #20]
   16094:	b	16064 <__assert_fail@plt+0x4d2c>
   16098:	ldr	r3, [r5, #20]
   1609c:	mov	r0, r4
   160a0:	ldr	r1, [r6, #44]	; 0x2c
   160a4:	blx	r3
   160a8:	add	sp, sp, #20
   160ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   160b0:	andeq	r9, r0, r7, lsr #24
   160b4:	strdeq	r9, [r0], -r7
   160b8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160bc:	sub	sp, sp, #156	; 0x9c
   160c0:	add	r4, sp, #64	; 0x40
   160c4:	add	fp, sp, #88	; 0x58
   160c8:	str	r0, [sp, #44]	; 0x2c
   160cc:	mov	r9, r1
   160d0:	mov	r5, r2
   160d4:	mov	r1, #0
   160d8:	mov	r2, #12
   160dc:	mov	r0, r4
   160e0:	bl	11218 <memset@plt>
   160e4:	mov	r1, #0
   160e8:	mov	r2, #12
   160ec:	mov	r0, fp
   160f0:	bl	11218 <memset@plt>
   160f4:	add	r2, sp, #100	; 0x64
   160f8:	mov	r1, #0
   160fc:	str	r2, [sp, #28]
   16100:	mov	r0, r2
   16104:	mov	r2, #12
   16108:	bl	11218 <memset@plt>
   1610c:	ldr	r2, [pc, #1032]	; 1651c <__assert_fail@plt+0x51e4>
   16110:	ldr	r8, [pc, #1032]	; 16520 <__assert_fail@plt+0x51e8>
   16114:	mov	r3, #0
   16118:	add	r2, pc, r2
   1611c:	mov	r7, r3
   16120:	add	r8, pc, r8
   16124:	ldr	r1, [r3, r2]
   16128:	cmp	r1, r5
   1612c:	addeq	r7, r2, r3
   16130:	add	r3, r3, #16
   16134:	cmp	r3, #80	; 0x50
   16138:	bne	16124 <__assert_fail@plt+0x4dec>
   1613c:	cmp	r7, #0
   16140:	ldreq	r0, [pc, #988]	; 16524 <__assert_fail@plt+0x51ec>
   16144:	moveq	r1, r5
   16148:	addeq	r0, pc, r0
   1614c:	beq	164f4 <__assert_fail@plt+0x51bc>
   16150:	ldr	r0, [r9, #12]
   16154:	ldrb	r3, [r0]
   16158:	cmp	r3, #0
   1615c:	bne	16178 <__assert_fail@plt+0x4e40>
   16160:	ldr	r1, [pc, #960]	; 16528 <__assert_fail@plt+0x51f0>
   16164:	mov	r2, fp
   16168:	str	r7, [sp]
   1616c:	add	r3, sp, #100	; 0x64
   16170:	add	r1, pc, r1
   16174:	bl	15e80 <__assert_fail@plt+0x4b48>
   16178:	add	r6, sp, #112	; 0x70
   1617c:	mov	r0, fp
   16180:	mov	r1, #9
   16184:	bl	15648 <__assert_fail@plt+0x4310>
   16188:	mov	r0, r6
   1618c:	mov	r1, #0
   16190:	mov	r2, #12
   16194:	ldr	sl, [r9, #4]
   16198:	bl	11218 <memset@plt>
   1619c:	cmp	sl, #0
   161a0:	beq	161c8 <__assert_fail@plt+0x4e90>
   161a4:	ldrd	r2, [sl]
   161a8:	mov	r0, r6
   161ac:	strd	r2, [sp]
   161b0:	ldrd	r2, [sl, #8]
   161b4:	strd	r2, [sp, #8]
   161b8:	ldm	r6, {r1, r2, r3}
   161bc:	bl	1521c <__assert_fail@plt+0x3ee4>
   161c0:	ldr	sl, [sl, #16]
   161c4:	b	1619c <__assert_fail@plt+0x4e64>
   161c8:	ldr	r3, [pc, #860]	; 1652c <__assert_fail@plt+0x51f4>
   161cc:	add	r5, sp, #48	; 0x30
   161d0:	ldr	r3, [r8, r3]
   161d4:	str	r3, [sp, #24]
   161d8:	ldr	r2, [sp, #24]
   161dc:	ldr	r3, [r2]
   161e0:	cmp	sl, r3
   161e4:	bge	16214 <__assert_fail@plt+0x4edc>
   161e8:	mov	r2, #0
   161ec:	mov	r3, #0
   161f0:	mov	r0, r5
   161f4:	strd	r2, [sp]
   161f8:	strd	r2, [sp, #8]
   161fc:	add	sl, sl, #1
   16200:	ldm	r6, {r1, r2, r3}
   16204:	bl	1521c <__assert_fail@plt+0x3ee4>
   16208:	ldm	r5, {r0, r1, r2}
   1620c:	stm	r6, {r0, r1, r2}
   16210:	b	161d8 <__assert_fail@plt+0x4ea0>
   16214:	ldm	r6, {r0, r1, r2}
   16218:	add	r3, sp, #76	; 0x4c
   1621c:	ldr	ip, [r9, #8]
   16220:	str	r3, [sp, #24]
   16224:	ldr	sl, [sp, #100]	; 0x64
   16228:	stm	r3, {r0, r1, r2}
   1622c:	mov	r1, #255	; 0xff
   16230:	ldr	r2, [sp, #112]	; 0x70
   16234:	mov	r0, r6
   16238:	ldr	r3, [sp, #88]	; 0x58
   1623c:	str	ip, [sp, #20]
   16240:	str	r2, [sp, #40]	; 0x28
   16244:	mov	r2, #40	; 0x28
   16248:	str	r3, [sp, #32]
   1624c:	bl	11218 <memset@plt>
   16250:	ldr	r0, [pc, #728]	; 16530 <__assert_fail@plt+0x51f8>
   16254:	bl	154d0 <__assert_fail@plt+0x4198>
   16258:	str	r0, [sp, #112]	; 0x70
   1625c:	ldr	r0, [r7]
   16260:	bl	154d0 <__assert_fail@plt+0x4198>
   16264:	str	r0, [sp, #132]	; 0x84
   16268:	ldr	r0, [r7, #4]
   1626c:	bl	154d0 <__assert_fail@plt+0x4198>
   16270:	ldr	r9, [r7, #8]
   16274:	add	r9, r9, #7
   16278:	bic	r9, r9, #7
   1627c:	str	r0, [sp, #136]	; 0x88
   16280:	mov	r0, r9
   16284:	bl	154d0 <__assert_fail@plt+0x4198>
   16288:	ldr	r2, [sp, #40]	; 0x28
   1628c:	add	r3, r2, #16
   16290:	add	r9, r9, r3
   16294:	str	r0, [sp, #128]	; 0x80
   16298:	mov	r0, r9
   1629c:	bl	154d0 <__assert_fail@plt+0x4198>
   162a0:	ldr	r3, [sp, #32]
   162a4:	add	r9, r9, r3
   162a8:	str	r0, [sp, #120]	; 0x78
   162ac:	mov	r0, r9
   162b0:	bl	154d0 <__assert_fail@plt+0x4198>
   162b4:	str	r0, [sp, #124]	; 0x7c
   162b8:	add	r0, r9, sl
   162bc:	bl	154d0 <__assert_fail@plt+0x4198>
   162c0:	ldr	r9, [r7, #12]
   162c4:	ldr	ip, [sp, #20]
   162c8:	tst	r9, #8
   162cc:	str	r0, [sp, #36]	; 0x24
   162d0:	str	r0, [sp, #116]	; 0x74
   162d4:	beq	162e4 <__assert_fail@plt+0x4fac>
   162d8:	mov	r0, ip
   162dc:	bl	154d0 <__assert_fail@plt+0x4198>
   162e0:	str	r0, [sp, #140]	; 0x8c
   162e4:	tst	r9, #16
   162e8:	beq	162f8 <__assert_fail@plt+0x4fc0>
   162ec:	mov	r0, sl
   162f0:	bl	154d0 <__assert_fail@plt+0x4198>
   162f4:	str	r0, [sp, #144]	; 0x90
   162f8:	tst	r9, #32
   162fc:	beq	1630c <__assert_fail@plt+0x4fd4>
   16300:	ldr	r0, [sp, #32]
   16304:	bl	154d0 <__assert_fail@plt+0x4198>
   16308:	str	r0, [sp, #148]	; 0x94
   1630c:	ldr	r3, [pc, #544]	; 16534 <__assert_fail@plt+0x51fc>
   16310:	ldr	r3, [r8, r3]
   16314:	ldr	sl, [r3]
   16318:	cmp	sl, #0
   1631c:	ble	16364 <__assert_fail@plt+0x502c>
   16320:	ldr	r0, [sp, #36]	; 0x24
   16324:	bl	154ac <__assert_fail@plt+0x4174>
   16328:	subs	r3, sl, r0
   1632c:	mov	r2, r0
   16330:	bpl	16368 <__assert_fail@plt+0x5030>
   16334:	ldr	r3, [pc, #508]	; 16538 <__assert_fail@plt+0x5200>
   16338:	ldr	r3, [r8, r3]
   1633c:	ldr	r3, [r3]
   16340:	cmp	r3, #0
   16344:	bgt	16364 <__assert_fail@plt+0x502c>
   16348:	ldr	r3, [pc, #492]	; 1653c <__assert_fail@plt+0x5204>
   1634c:	ldr	r1, [pc, #492]	; 16540 <__assert_fail@plt+0x5208>
   16350:	ldr	r3, [r8, r3]
   16354:	add	r1, pc, r1
   16358:	ldr	r0, [r3]
   1635c:	mov	r3, sl
   16360:	bl	111f4 <fprintf@plt>
   16364:	mov	r3, #0
   16368:	ldr	r2, [pc, #468]	; 16544 <__assert_fail@plt+0x520c>
   1636c:	ldr	r2, [r8, r2]
   16370:	ldr	r9, [r2]
   16374:	cmp	r9, #0
   16378:	movle	r9, r3
   1637c:	ldr	r3, [pc, #452]	; 16548 <__assert_fail@plt+0x5210>
   16380:	ldr	r3, [r8, r3]
   16384:	ldr	r8, [r3]
   16388:	cmp	r8, #0
   1638c:	ble	163b0 <__assert_fail@plt+0x5078>
   16390:	ldr	r0, [sp, #116]	; 0x74
   16394:	bl	154ac <__assert_fail@plt+0x4174>
   16398:	sub	r3, r8, #1
   1639c:	add	r9, r3, r9
   163a0:	rsb	r8, r8, #0
   163a4:	add	r9, r9, r0
   163a8:	and	r9, r9, r8
   163ac:	rsb	r9, r0, r9
   163b0:	cmp	r9, #0
   163b4:	ble	163cc <__assert_fail@plt+0x5094>
   163b8:	ldr	r0, [sp, #116]	; 0x74
   163bc:	bl	154ac <__assert_fail@plt+0x4174>
   163c0:	add	r0, r0, r9
   163c4:	bl	154d0 <__assert_fail@plt+0x4198>
   163c8:	str	r0, [sp, #116]	; 0x74
   163cc:	str	r6, [sp]
   163d0:	mov	r0, r4
   163d4:	ldr	r3, [r7, #8]
   163d8:	str	r3, [sp, #4]
   163dc:	ldm	r4, {r1, r2, r3}
   163e0:	bl	14f90 <__assert_fail@plt+0x3c58>
   163e4:	mov	r3, #8
   163e8:	mov	r0, r5
   163ec:	str	r3, [sp]
   163f0:	ldm	r4, {r1, r2, r3}
   163f4:	bl	15378 <__assert_fail@plt+0x4040>
   163f8:	ldm	r5, {r0, r1, r2}
   163fc:	ldr	r3, [sp, #24]
   16400:	stm	r4, {r0, r1, r2}
   16404:	ldr	r2, [sp, #40]	; 0x28
   16408:	str	r2, [sp, #76]	; 0x4c
   1640c:	ldm	r3, {r0, r1, r2}
   16410:	stm	sp, {r0, r1, r2}
   16414:	mov	r0, r5
   16418:	ldm	r4, {r1, r2, r3}
   1641c:	bl	15084 <__assert_fail@plt+0x3d4c>
   16420:	mov	r3, #16
   16424:	ldm	r5, {r0, r1, r2}
   16428:	stm	r4, {r0, r1, r2}
   1642c:	mov	r0, r5
   16430:	str	r3, [sp]
   16434:	ldm	r4, {r1, r2, r3}
   16438:	bl	1531c <__assert_fail@plt+0x3fe4>
   1643c:	ldm	r5, {r0, r1, r2}
   16440:	stm	r4, {r0, r1, r2}
   16444:	ldm	fp, {r0, r1, r2}
   16448:	stm	sp, {r0, r1, r2}
   1644c:	mov	r0, r5
   16450:	ldm	r4, {r1, r2, r3}
   16454:	bl	15084 <__assert_fail@plt+0x3d4c>
   16458:	ldm	r5, {r0, r1, r2}
   1645c:	ldr	r3, [sp, #28]
   16460:	stm	r4, {r0, r1, r2}
   16464:	ldm	r3, {r0, r1, r2}
   16468:	stm	sp, {r0, r1, r2}
   1646c:	mov	r0, r5
   16470:	ldm	r4, {r1, r2, r3}
   16474:	bl	15084 <__assert_fail@plt+0x3d4c>
   16478:	cmp	r9, #0
   1647c:	ldm	r5, {r0, r1, r2}
   16480:	stm	r4, {r0, r1, r2}
   16484:	ldr	r7, [sp, #64]	; 0x40
   16488:	ldr	r6, [sp, #68]	; 0x44
   1648c:	ble	164b0 <__assert_fail@plt+0x5178>
   16490:	str	r9, [sp]
   16494:	mov	r0, r5
   16498:	ldm	r4, {r1, r2, r3}
   1649c:	bl	1531c <__assert_fail@plt+0x3fe4>
   164a0:	ldm	r5, {r0, r1, r2}
   164a4:	stm	r4, {r0, r1, r2}
   164a8:	ldr	r7, [sp, #64]	; 0x40
   164ac:	ldr	r6, [sp, #68]	; 0x44
   164b0:	mov	r0, r6
   164b4:	mov	r1, r7
   164b8:	mov	r2, #1
   164bc:	ldr	r3, [sp, #44]	; 0x2c
   164c0:	bl	11140 <fwrite@plt>
   164c4:	cmp	r0, #1
   164c8:	beq	16504 <__assert_fail@plt+0x51cc>
   164cc:	ldr	r0, [sp, #44]	; 0x2c
   164d0:	bl	110ec <ferror@plt>
   164d4:	cmp	r0, #0
   164d8:	beq	164f8 <__assert_fail@plt+0x51c0>
   164dc:	bl	11200 <__errno_location@plt>
   164e0:	ldr	r0, [r0]
   164e4:	bl	11188 <strerror@plt>
   164e8:	mov	r1, r0
   164ec:	ldr	r0, [pc, #88]	; 1654c <__assert_fail@plt+0x5214>
   164f0:	add	r0, pc, r0
   164f4:	bl	1581c <__assert_fail@plt+0x44e4>
   164f8:	ldr	r0, [pc, #80]	; 16550 <__assert_fail@plt+0x5218>
   164fc:	add	r0, pc, r0
   16500:	bl	1581c <__assert_fail@plt+0x44e4>
   16504:	str	r7, [sp, #64]	; 0x40
   16508:	str	r6, [sp, #68]	; 0x44
   1650c:	ldm	r4, {r0, r1, r2}
   16510:	bl	14cd8 <__assert_fail@plt+0x39a0>
   16514:	add	sp, sp, #156	; 0x9c
   16518:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1651c:	andeq	lr, r1, r4, lsl r9
   16520:	ldrdeq	sp, [r1], -r8
   16524:	andeq	sl, r0, r1, ror #22
   16528:	andeq	lr, r1, ip, lsl #18
   1652c:	andeq	r0, r0, r4, lsl #2
   16530:	andle	pc, sp, sp, ror #29
   16534:	andeq	r0, r0, r8, ror #2
   16538:	andeq	r0, r0, r8, lsr r1
   1653c:	andeq	r0, r0, r4, lsr r1
   16540:	andeq	sl, r0, sl, ror r9
   16544:	andeq	r0, r0, ip, lsl r1
   16548:	andeq	r0, r0, r8, lsl #2
   1654c:	andeq	sl, r0, r8, lsl #16
   16550:	andeq	sl, r0, r0, lsr #16
   16554:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16558:	sub	sp, sp, #44	; 0x2c
   1655c:	add	r3, sp, #28
   16560:	mov	r4, r0
   16564:	str	r1, [sp, #12]
   16568:	mov	r5, r2
   1656c:	mov	r0, r3
   16570:	mov	r2, #12
   16574:	mov	r1, #0
   16578:	str	r3, [sp, #8]
   1657c:	bl	11218 <memset@plt>
   16580:	ldr	r2, [pc, #1840]	; 16cb8 <__assert_fail@plt+0x5980>
   16584:	ldr	r7, [pc, #1840]	; 16cbc <__assert_fail@plt+0x5984>
   16588:	mov	r3, #0
   1658c:	add	r2, pc, r2
   16590:	mov	r6, r3
   16594:	add	r7, pc, r7
   16598:	ldr	r1, [r3, r2]
   1659c:	cmp	r1, r5
   165a0:	addeq	r6, r2, r3
   165a4:	add	r3, r3, #16
   165a8:	cmp	r3, #80	; 0x50
   165ac:	bne	16598 <__assert_fail@plt+0x5260>
   165b0:	cmp	r6, #0
   165b4:	bne	165c8 <__assert_fail@plt+0x5290>
   165b8:	ldr	r0, [pc, #1792]	; 16cc0 <__assert_fail@plt+0x5988>
   165bc:	mov	r1, r5
   165c0:	add	r0, pc, r0
   165c4:	bl	1581c <__assert_fail@plt+0x44e4>
   165c8:	ldr	r0, [pc, #1780]	; 16cc4 <__assert_fail@plt+0x598c>
   165cc:	mov	r1, r4
   165d0:	ldr	r5, [pc, #1776]	; 16cc8 <__assert_fail@plt+0x5990>
   165d4:	add	r0, pc, r0
   165d8:	bl	112f0 <fputs@plt>
   165dc:	ldr	r1, [pc, #1768]	; 16ccc <__assert_fail@plt+0x5994>
   165e0:	mov	r0, r4
   165e4:	add	r5, pc, r5
   165e8:	add	r1, pc, r1
   165ec:	bl	15e14 <__assert_fail@plt+0x4adc>
   165f0:	ldr	r1, [pc, #1752]	; 16cd0 <__assert_fail@plt+0x5998>
   165f4:	mov	r0, r4
   165f8:	add	r1, pc, r1
   165fc:	bl	15e14 <__assert_fail@plt+0x4adc>
   16600:	ldr	r0, [pc, #1740]	; 16cd4 <__assert_fail@plt+0x599c>
   16604:	mov	r1, r4
   16608:	add	r0, pc, r0
   1660c:	bl	112f0 <fputs@plt>
   16610:	mov	r0, r4
   16614:	ldr	r1, [pc, #1724]	; 16cd8 <__assert_fail@plt+0x59a0>
   16618:	bl	15524 <__assert_fail@plt+0x41ec>
   1661c:	ldr	r0, [pc, #1720]	; 16cdc <__assert_fail@plt+0x59a4>
   16620:	mov	r1, r4
   16624:	add	r0, pc, r0
   16628:	bl	112f0 <fputs@plt>
   1662c:	ldr	r1, [pc, #1708]	; 16ce0 <__assert_fail@plt+0x59a8>
   16630:	mov	r2, r5
   16634:	mov	r3, r5
   16638:	add	r1, pc, r1
   1663c:	mov	r0, r4
   16640:	bl	111f4 <fprintf@plt>
   16644:	ldr	r1, [pc, #1688]	; 16ce4 <__assert_fail@plt+0x59ac>
   16648:	mov	r2, r5
   1664c:	mov	r3, r5
   16650:	add	r1, pc, r1
   16654:	mov	r0, r4
   16658:	bl	111f4 <fprintf@plt>
   1665c:	ldr	r1, [pc, #1668]	; 16ce8 <__assert_fail@plt+0x59b0>
   16660:	mov	r2, r5
   16664:	mov	r3, r5
   16668:	add	r1, pc, r1
   1666c:	mov	r0, r4
   16670:	bl	111f4 <fprintf@plt>
   16674:	ldr	r1, [pc, #1648]	; 16cec <__assert_fail@plt+0x59b4>
   16678:	mov	r2, r5
   1667c:	mov	r3, r5
   16680:	add	r1, pc, r1
   16684:	mov	r0, r4
   16688:	bl	111f4 <fprintf@plt>
   1668c:	ldr	r0, [pc, #1628]	; 16cf0 <__assert_fail@plt+0x59b8>
   16690:	mov	r1, r4
   16694:	add	r0, pc, r0
   16698:	bl	112f0 <fputs@plt>
   1669c:	ldr	r1, [pc, #1616]	; 16cf4 <__assert_fail@plt+0x59bc>
   166a0:	mov	r2, r5
   166a4:	mov	r3, r5
   166a8:	add	r1, pc, r1
   166ac:	mov	r0, r4
   166b0:	bl	111f4 <fprintf@plt>
   166b4:	ldr	r1, [pc, #1596]	; 16cf8 <__assert_fail@plt+0x59c0>
   166b8:	mov	r2, r5
   166bc:	mov	r3, r5
   166c0:	add	r1, pc, r1
   166c4:	mov	r0, r4
   166c8:	bl	111f4 <fprintf@plt>
   166cc:	ldr	r1, [pc, #1576]	; 16cfc <__assert_fail@plt+0x59c4>
   166d0:	mov	r2, r5
   166d4:	mov	r3, r5
   166d8:	add	r1, pc, r1
   166dc:	mov	r0, r4
   166e0:	bl	111f4 <fprintf@plt>
   166e4:	ldr	r1, [pc, #1556]	; 16d00 <__assert_fail@plt+0x59c8>
   166e8:	mov	r2, r5
   166ec:	mov	r3, r5
   166f0:	add	r1, pc, r1
   166f4:	mov	r0, r4
   166f8:	bl	111f4 <fprintf@plt>
   166fc:	ldr	r0, [pc, #1536]	; 16d04 <__assert_fail@plt+0x59cc>
   16700:	mov	r1, r4
   16704:	add	r0, pc, r0
   16708:	bl	112f0 <fputs@plt>
   1670c:	ldr	r1, [pc, #1524]	; 16d08 <__assert_fail@plt+0x59d0>
   16710:	mov	r2, r5
   16714:	mov	r3, r5
   16718:	add	r1, pc, r1
   1671c:	mov	r0, r4
   16720:	bl	111f4 <fprintf@plt>
   16724:	ldr	r1, [pc, #1504]	; 16d0c <__assert_fail@plt+0x59d4>
   16728:	mov	r2, r5
   1672c:	mov	r3, r5
   16730:	add	r1, pc, r1
   16734:	mov	r0, r4
   16738:	bl	111f4 <fprintf@plt>
   1673c:	ldr	r1, [pc, #1484]	; 16d10 <__assert_fail@plt+0x59d8>
   16740:	mov	r2, r5
   16744:	mov	r3, r5
   16748:	add	r1, pc, r1
   1674c:	mov	r0, r4
   16750:	bl	111f4 <fprintf@plt>
   16754:	ldr	r1, [pc, #1464]	; 16d14 <__assert_fail@plt+0x59dc>
   16758:	mov	r2, r5
   1675c:	mov	r3, r5
   16760:	add	r1, pc, r1
   16764:	mov	r0, r4
   16768:	bl	111f4 <fprintf@plt>
   1676c:	ldr	r0, [pc, #1444]	; 16d18 <__assert_fail@plt+0x59e0>
   16770:	mov	r1, r4
   16774:	add	r0, pc, r0
   16778:	bl	112f0 <fputs@plt>
   1677c:	ldr	r1, [pc, #1432]	; 16d1c <__assert_fail@plt+0x59e4>
   16780:	mov	r2, r5
   16784:	mov	r3, r5
   16788:	add	r1, pc, r1
   1678c:	mov	r0, r4
   16790:	bl	111f4 <fprintf@plt>
   16794:	ldr	r1, [pc, #1412]	; 16d20 <__assert_fail@plt+0x59e8>
   16798:	mov	r2, r5
   1679c:	mov	r3, r5
   167a0:	add	r1, pc, r1
   167a4:	mov	r0, r4
   167a8:	bl	111f4 <fprintf@plt>
   167ac:	ldr	r1, [pc, #1392]	; 16d24 <__assert_fail@plt+0x59ec>
   167b0:	mov	r2, r5
   167b4:	mov	r3, r5
   167b8:	add	r1, pc, r1
   167bc:	mov	r0, r4
   167c0:	bl	111f4 <fprintf@plt>
   167c4:	ldr	r1, [pc, #1372]	; 16d28 <__assert_fail@plt+0x59f0>
   167c8:	mov	r3, r5
   167cc:	mov	r2, r5
   167d0:	add	r1, pc, r1
   167d4:	mov	r0, r4
   167d8:	bl	111f4 <fprintf@plt>
   167dc:	ldr	r0, [pc, #1352]	; 16d2c <__assert_fail@plt+0x59f4>
   167e0:	mov	r1, r4
   167e4:	add	r0, pc, r0
   167e8:	bl	112f0 <fputs@plt>
   167ec:	mov	r0, r4
   167f0:	ldr	r1, [r6]
   167f4:	bl	15524 <__assert_fail@plt+0x41ec>
   167f8:	ldr	r0, [pc, #1328]	; 16d30 <__assert_fail@plt+0x59f8>
   167fc:	mov	r1, r4
   16800:	add	r0, pc, r0
   16804:	bl	112f0 <fputs@plt>
   16808:	mov	r0, r4
   1680c:	ldr	r1, [r6, #4]
   16810:	bl	15524 <__assert_fail@plt+0x41ec>
   16814:	ldr	r3, [r6, #12]
   16818:	tst	r3, #8
   1681c:	beq	16840 <__assert_fail@plt+0x5508>
   16820:	ldr	r0, [pc, #1292]	; 16d34 <__assert_fail@plt+0x59fc>
   16824:	mov	r1, r4
   16828:	add	r0, pc, r0
   1682c:	bl	112f0 <fputs@plt>
   16830:	ldr	r3, [sp, #12]
   16834:	mov	r0, r4
   16838:	ldr	r1, [r3, #8]
   1683c:	bl	15524 <__assert_fail@plt+0x41ec>
   16840:	ldr	r3, [r6, #12]
   16844:	tst	r3, #16
   16848:	beq	168c4 <__assert_fail@plt+0x558c>
   1684c:	ldr	r0, [pc, #1252]	; 16d38 <__assert_fail@plt+0x5a00>
   16850:	mov	r1, r4
   16854:	ldr	r5, [pc, #1248]	; 16d3c <__assert_fail@plt+0x5a04>
   16858:	add	r0, pc, r0
   1685c:	add	r5, pc, r5
   16860:	bl	112f0 <fputs@plt>
   16864:	ldr	r1, [pc, #1236]	; 16d40 <__assert_fail@plt+0x5a08>
   16868:	mov	r0, r4
   1686c:	mov	r2, r5
   16870:	mov	r3, r5
   16874:	add	r1, pc, r1
   16878:	bl	111f4 <fprintf@plt>
   1687c:	ldr	r1, [pc, #1216]	; 16d44 <__assert_fail@plt+0x5a0c>
   16880:	mov	r2, r5
   16884:	mov	r3, r5
   16888:	add	r1, pc, r1
   1688c:	mov	r0, r4
   16890:	bl	111f4 <fprintf@plt>
   16894:	ldr	r1, [pc, #1196]	; 16d48 <__assert_fail@plt+0x5a10>
   16898:	mov	r2, r5
   1689c:	mov	r3, r5
   168a0:	add	r1, pc, r1
   168a4:	mov	r0, r4
   168a8:	bl	111f4 <fprintf@plt>
   168ac:	ldr	r1, [pc, #1176]	; 16d4c <__assert_fail@plt+0x5a14>
   168b0:	mov	r0, r4
   168b4:	mov	r2, r5
   168b8:	add	r1, pc, r1
   168bc:	mov	r3, r5
   168c0:	bl	111f4 <fprintf@plt>
   168c4:	ldr	r3, [r6, #12]
   168c8:	tst	r3, #32
   168cc:	beq	16948 <__assert_fail@plt+0x5610>
   168d0:	ldr	r0, [pc, #1144]	; 16d50 <__assert_fail@plt+0x5a18>
   168d4:	mov	r1, r4
   168d8:	ldr	r5, [pc, #1140]	; 16d54 <__assert_fail@plt+0x5a1c>
   168dc:	add	r0, pc, r0
   168e0:	add	r5, pc, r5
   168e4:	bl	112f0 <fputs@plt>
   168e8:	ldr	r1, [pc, #1128]	; 16d58 <__assert_fail@plt+0x5a20>
   168ec:	mov	r0, r4
   168f0:	mov	r2, r5
   168f4:	mov	r3, r5
   168f8:	add	r1, pc, r1
   168fc:	bl	111f4 <fprintf@plt>
   16900:	ldr	r1, [pc, #1108]	; 16d5c <__assert_fail@plt+0x5a24>
   16904:	mov	r2, r5
   16908:	mov	r3, r5
   1690c:	add	r1, pc, r1
   16910:	mov	r0, r4
   16914:	bl	111f4 <fprintf@plt>
   16918:	ldr	r1, [pc, #1088]	; 16d60 <__assert_fail@plt+0x5a28>
   1691c:	mov	r2, r5
   16920:	mov	r3, r5
   16924:	add	r1, pc, r1
   16928:	mov	r0, r4
   1692c:	bl	111f4 <fprintf@plt>
   16930:	ldr	r1, [pc, #1068]	; 16d64 <__assert_fail@plt+0x5a2c>
   16934:	mov	r0, r4
   16938:	mov	r2, r5
   1693c:	add	r1, pc, r1
   16940:	mov	r3, r5
   16944:	bl	111f4 <fprintf@plt>
   16948:	mov	r0, r4
   1694c:	mov	r1, #8
   16950:	bl	1555c <__assert_fail@plt+0x4224>
   16954:	ldr	r1, [pc, #1036]	; 16d68 <__assert_fail@plt+0x5a30>
   16958:	mov	r0, r4
   1695c:	add	r1, pc, r1
   16960:	bl	15e14 <__assert_fail@plt+0x4adc>
   16964:	ldr	r0, [pc, #1024]	; 16d6c <__assert_fail@plt+0x5a34>
   16968:	mov	r1, r4
   1696c:	add	r0, pc, r0
   16970:	bl	112f0 <fputs@plt>
   16974:	ldr	r3, [sp, #12]
   16978:	ldr	r5, [r3, #4]
   1697c:	ldr	r3, [pc, #1004]	; 16d70 <__assert_fail@plt+0x5a38>
   16980:	add	r3, pc, r3
   16984:	str	r3, [sp, #16]
   16988:	ldr	r3, [pc, #996]	; 16d74 <__assert_fail@plt+0x5a3c>
   1698c:	add	r3, pc, r3
   16990:	str	r3, [sp, #20]
   16994:	cmp	r5, #0
   16998:	beq	16b04 <__assert_fail@plt+0x57cc>
   1699c:	ldr	r8, [r5, #20]
   169a0:	cmp	r8, #0
   169a4:	beq	169dc <__assert_fail@plt+0x56a4>
   169a8:	ldrb	r3, [r8]
   169ac:	cmp	r3, #0
   169b0:	bne	169d4 <__assert_fail@plt+0x569c>
   169b4:	ldr	r1, [sp, #16]
   169b8:	mov	r0, r4
   169bc:	ldr	r2, [r8, #4]
   169c0:	bl	111f4 <fprintf@plt>
   169c4:	mov	r0, r4
   169c8:	ldr	r1, [sp, #20]
   169cc:	ldr	r2, [r8, #4]
   169d0:	bl	111f4 <fprintf@plt>
   169d4:	ldr	r8, [r8, #8]
   169d8:	b	169a0 <__assert_fail@plt+0x5668>
   169dc:	ldr	fp, [pc, #916]	; 16d78 <__assert_fail@plt+0x5a40>
   169e0:	mov	r0, r4
   169e4:	ldr	sl, [pc, #912]	; 16d7c <__assert_fail@plt+0x5a44>
   169e8:	add	fp, pc, fp
   169ec:	ldr	r9, [pc, #908]	; 16d80 <__assert_fail@plt+0x5a48>
   169f0:	add	sl, pc, sl
   169f4:	ldr	r8, [pc, #904]	; 16d84 <__assert_fail@plt+0x5a4c>
   169f8:	add	r9, pc, r9
   169fc:	ldr	r2, [r5, #4]
   16a00:	mov	r1, fp
   16a04:	add	r8, pc, r8
   16a08:	bl	111f4 <fprintf@plt>
   16a0c:	ldr	r2, [r5, #4]
   16a10:	mov	r1, sl
   16a14:	mov	r0, r4
   16a18:	bl	111f4 <fprintf@plt>
   16a1c:	ldr	r2, [r5, #4]
   16a20:	mov	r1, r9
   16a24:	mov	r0, r4
   16a28:	bl	111f4 <fprintf@plt>
   16a2c:	ldr	r2, [r5, #4]
   16a30:	mov	r1, r8
   16a34:	mov	r0, r4
   16a38:	bl	111f4 <fprintf@plt>
   16a3c:	ldr	r2, [r5]
   16a40:	mov	r1, fp
   16a44:	mov	r0, r4
   16a48:	bl	111f4 <fprintf@plt>
   16a4c:	ldr	r2, [r5]
   16a50:	mov	r1, sl
   16a54:	mov	r0, r4
   16a58:	bl	111f4 <fprintf@plt>
   16a5c:	ldr	r2, [r5]
   16a60:	mov	r1, r9
   16a64:	mov	r0, r4
   16a68:	bl	111f4 <fprintf@plt>
   16a6c:	ldr	r2, [r5]
   16a70:	mov	r1, r8
   16a74:	mov	r0, r4
   16a78:	bl	111f4 <fprintf@plt>
   16a7c:	ldr	r2, [r5, #12]
   16a80:	mov	r1, fp
   16a84:	mov	r0, r4
   16a88:	bl	111f4 <fprintf@plt>
   16a8c:	ldr	r2, [r5, #12]
   16a90:	mov	r1, sl
   16a94:	mov	r0, r4
   16a98:	bl	111f4 <fprintf@plt>
   16a9c:	ldr	r2, [r5, #12]
   16aa0:	mov	r1, r9
   16aa4:	mov	r0, r4
   16aa8:	bl	111f4 <fprintf@plt>
   16aac:	ldr	r2, [r5, #12]
   16ab0:	mov	r1, r8
   16ab4:	mov	r0, r4
   16ab8:	bl	111f4 <fprintf@plt>
   16abc:	ldr	r2, [r5, #8]
   16ac0:	mov	r1, fp
   16ac4:	mov	r0, r4
   16ac8:	bl	111f4 <fprintf@plt>
   16acc:	ldr	r2, [r5, #8]
   16ad0:	mov	r1, sl
   16ad4:	mov	r0, r4
   16ad8:	bl	111f4 <fprintf@plt>
   16adc:	ldr	r2, [r5, #8]
   16ae0:	mov	r1, r9
   16ae4:	mov	r0, r4
   16ae8:	bl	111f4 <fprintf@plt>
   16aec:	ldr	r2, [r5, #8]
   16af0:	mov	r0, r4
   16af4:	mov	r1, r8
   16af8:	bl	111f4 <fprintf@plt>
   16afc:	ldr	r5, [r5, #16]
   16b00:	b	16994 <__assert_fail@plt+0x565c>
   16b04:	ldr	r3, [pc, #636]	; 16d88 <__assert_fail@plt+0x5a50>
   16b08:	ldr	r9, [pc, #636]	; 16d8c <__assert_fail@plt+0x5a54>
   16b0c:	ldr	r8, [r7, r3]
   16b10:	add	r9, pc, r9
   16b14:	ldr	r3, [r8]
   16b18:	cmp	r5, r3
   16b1c:	bge	16b34 <__assert_fail@plt+0x57fc>
   16b20:	mov	r0, r9
   16b24:	mov	r1, r4
   16b28:	bl	112f0 <fputs@plt>
   16b2c:	add	r5, r5, #1
   16b30:	b	16b14 <__assert_fail@plt+0x57dc>
   16b34:	ldr	r0, [pc, #596]	; 16d90 <__assert_fail@plt+0x5a58>
   16b38:	mov	r1, r4
   16b3c:	add	r0, pc, r0
   16b40:	bl	112f0 <fputs@plt>
   16b44:	ldr	r1, [pc, #584]	; 16d94 <__assert_fail@plt+0x5a5c>
   16b48:	mov	r0, r4
   16b4c:	add	r1, pc, r1
   16b50:	bl	15e14 <__assert_fail@plt+0x4adc>
   16b54:	ldr	r3, [sp, #12]
   16b58:	ldr	r0, [r3, #12]
   16b5c:	ldrb	r3, [r0]
   16b60:	cmp	r3, #0
   16b64:	bne	16b84 <__assert_fail@plt+0x584c>
   16b68:	ldr	r1, [pc, #552]	; 16d98 <__assert_fail@plt+0x5a60>
   16b6c:	mov	r2, r4
   16b70:	str	r6, [sp]
   16b74:	add	r3, sp, #28
   16b78:	add	r1, pc, r1
   16b7c:	add	r1, r1, #28
   16b80:	bl	15e80 <__assert_fail@plt+0x4b48>
   16b84:	ldr	r0, [pc, #528]	; 16d9c <__assert_fail@plt+0x5a64>
   16b88:	mov	r1, r4
   16b8c:	ldr	r6, [pc, #524]	; 16da0 <__assert_fail@plt+0x5a68>
   16b90:	add	r0, pc, r0
   16b94:	bl	112f0 <fputs@plt>
   16b98:	mov	r0, r4
   16b9c:	mov	r1, #9
   16ba0:	add	r6, pc, r6
   16ba4:	bl	15524 <__assert_fail@plt+0x41ec>
   16ba8:	ldr	r1, [pc, #500]	; 16da4 <__assert_fail@plt+0x5a6c>
   16bac:	mov	r0, r4
   16bb0:	add	r1, pc, r1
   16bb4:	bl	15e14 <__assert_fail@plt+0x4adc>
   16bb8:	ldr	r1, [pc, #488]	; 16da8 <__assert_fail@plt+0x5a70>
   16bbc:	mov	r0, r4
   16bc0:	add	r1, pc, r1
   16bc4:	bl	15e14 <__assert_fail@plt+0x4adc>
   16bc8:	ldr	r5, [sp, #32]
   16bcc:	ldr	r8, [sp, #28]
   16bd0:	add	r8, r5, r8
   16bd4:	cmp	r5, r8
   16bd8:	bcs	16c04 <__assert_fail@plt+0x58cc>
   16bdc:	mov	r0, r5
   16be0:	bl	111dc <strlen@plt>
   16be4:	mov	r2, r5
   16be8:	mov	r1, r6
   16bec:	mov	r9, r0
   16bf0:	mov	r0, r4
   16bf4:	add	r9, r9, #1
   16bf8:	bl	111f4 <fprintf@plt>
   16bfc:	add	r5, r5, r9
   16c00:	b	16bd4 <__assert_fail@plt+0x589c>
   16c04:	ldr	r1, [pc, #416]	; 16dac <__assert_fail@plt+0x5a74>
   16c08:	mov	r0, r4
   16c0c:	add	r1, pc, r1
   16c10:	bl	15e14 <__assert_fail@plt+0x4adc>
   16c14:	ldr	r1, [pc, #404]	; 16db0 <__assert_fail@plt+0x5a78>
   16c18:	mov	r0, r4
   16c1c:	add	r1, pc, r1
   16c20:	bl	15e14 <__assert_fail@plt+0x4adc>
   16c24:	ldr	r3, [pc, #392]	; 16db4 <__assert_fail@plt+0x5a7c>
   16c28:	ldr	r3, [r7, r3]
   16c2c:	ldr	r2, [r3]
   16c30:	cmp	r2, #0
   16c34:	ble	16c54 <__assert_fail@plt+0x591c>
   16c38:	ldr	r3, [pc, #376]	; 16db8 <__assert_fail@plt+0x5a80>
   16c3c:	mov	r0, r4
   16c40:	ldr	r1, [pc, #372]	; 16dbc <__assert_fail@plt+0x5a84>
   16c44:	add	r3, pc, r3
   16c48:	str	r3, [sp]
   16c4c:	add	r1, pc, r1
   16c50:	bl	111f4 <fprintf@plt>
   16c54:	ldr	r3, [pc, #356]	; 16dc0 <__assert_fail@plt+0x5a88>
   16c58:	ldr	r3, [r7, r3]
   16c5c:	ldr	r2, [r3]
   16c60:	cmp	r2, #0
   16c64:	ble	16c78 <__assert_fail@plt+0x5940>
   16c68:	ldr	r1, [pc, #340]	; 16dc4 <__assert_fail@plt+0x5a8c>
   16c6c:	mov	r0, r4
   16c70:	add	r1, pc, r1
   16c74:	bl	111f4 <fprintf@plt>
   16c78:	ldr	r3, [pc, #328]	; 16dc8 <__assert_fail@plt+0x5a90>
   16c7c:	ldr	r3, [r7, r3]
   16c80:	ldr	r1, [r3]
   16c84:	cmp	r1, #0
   16c88:	ble	16c94 <__assert_fail@plt+0x595c>
   16c8c:	mov	r0, r4
   16c90:	bl	1555c <__assert_fail@plt+0x4224>
   16c94:	ldr	r1, [pc, #304]	; 16dcc <__assert_fail@plt+0x5a94>
   16c98:	mov	r0, r4
   16c9c:	add	r1, pc, r1
   16ca0:	bl	15e14 <__assert_fail@plt+0x4adc>
   16ca4:	ldr	r3, [sp, #8]
   16ca8:	ldm	r3, {r0, r1, r2}
   16cac:	bl	14cd8 <__assert_fail@plt+0x39a0>
   16cb0:	add	sp, sp, #44	; 0x2c
   16cb4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16cb8:	andeq	lr, r1, r0, lsr #9
   16cbc:	andeq	sp, r1, r4, ror #20
   16cc0:	andeq	sl, r0, r9, ror #13
   16cc4:	andeq	sl, r0, r9, ror #14
   16cc8:			; <UNDEFINED> instruction: 0x0000a6b9
   16ccc:	andeq	sl, r0, pc, ror r7
   16cd0:	andeq	sl, r0, sl, ror r7
   16cd4:	andeq	sl, r0, r1, ror r7
   16cd8:	andle	pc, sp, sp, ror #29
   16cdc:	andeq	sl, r0, r3, ror #14
   16ce0:	andeq	sl, r0, r1, ror #14
   16ce4:	andeq	sl, r0, r4, lsl #15
   16ce8:	andeq	sl, r0, r7, lsr #15
   16cec:	andeq	sl, r0, r9, asr #15
   16cf0:	andeq	sl, r0, r8, ror #15
   16cf4:	andeq	sl, r0, sl, ror #15
   16cf8:	andeq	sl, r0, sp, lsl #16
   16cfc:	andeq	sl, r0, r0, lsr r8
   16d00:	andeq	sl, r0, r2, asr r8
   16d04:	andeq	sl, r0, r1, ror r8
   16d08:	andeq	sl, r0, r4, ror r8
   16d0c:	muleq	r0, r8, r8
   16d10:			; <UNDEFINED> instruction: 0x0000a8bc
   16d14:	ldrdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   16d18:	strdeq	sl, [r0], -pc	; <UNPREDICTABLE>
   16d1c:	andeq	sl, r0, r2, lsl #18
   16d20:	andeq	sl, r0, r4, lsr #18
   16d24:	andeq	sl, r0, r6, asr #18
   16d28:	andeq	sl, r0, r7, ror #18
   16d2c:	andeq	sl, r0, r5, lsl #19
   16d30:	andeq	sl, r0, r9, ror r9
   16d34:	andeq	sl, r0, fp, ror #18
   16d38:	andeq	sl, r0, r3, asr r9
   16d3c:	andeq	sl, r0, r1, asr #8
   16d40:	andeq	sl, r0, pc, asr #18
   16d44:	andeq	sl, r0, r8, ror r9
   16d48:	muleq	r0, sp, r9
   16d4c:	andeq	sl, r0, r1, asr #19
   16d50:	ldrdeq	sl, [r0], -r2
   16d54:			; <UNDEFINED> instruction: 0x0000a3bd
   16d58:	andeq	sl, r0, sp, asr #19
   16d5c:	strdeq	sl, [r0], -r4
   16d60:	andeq	sl, r0, r7, lsl sl
   16d64:	andeq	sl, r0, r9, lsr sl
   16d68:	andeq	sl, r0, ip, asr #20
   16d6c:	andeq	sl, r0, r8, asr #20
   16d70:	andeq	sl, r0, r4, lsl #2
   16d74:	andeq	sl, r0, r8, lsl r3
   16d78:	strdeq	sl, [r0], -r7
   16d7c:	andeq	sl, r0, pc, lsl #20
   16d80:	andeq	sl, r0, r7, lsr #20
   16d84:	andeq	sl, r0, sl, lsr sl
   16d88:	andeq	r0, r0, r4, lsl #2
   16d8c:	andeq	sl, r0, r6, asr #18
   16d90:	andeq	sl, r0, sl, lsl r9
   16d94:	andeq	sl, r0, r3, lsr #18
   16d98:	andeq	sp, r1, r4, lsl #30
   16d9c:	andeq	sl, r0, ip, ror #17
   16da0:	andeq	sl, r0, r5, lsl #18
   16da4:	ldrdeq	sl, [r0], -ip
   16da8:	ldrdeq	sl, [r0], -r7
   16dac:	andeq	sl, r0, r8, lsr #17
   16db0:	andeq	sl, r0, r4, lsr #17
   16db4:	andeq	r0, r0, r8, ror #2
   16db8:	andeq	sl, r0, r9, asr r0
   16dbc:	andeq	sl, r0, sp, ror r8
   16dc0:	andeq	r0, r0, ip, lsl r1
   16dc4:	andeq	sl, r0, sl, lsl #17
   16dc8:	andeq	r0, r0, r8, lsl #2
   16dcc:	andeq	sl, r0, sp, ror #16
   16dd0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16dd4:	mov	r1, #0
   16dd8:	sub	sp, sp, #212	; 0xd4
   16ddc:	bl	18f9c <__assert_fail@plt+0x7c64>
   16de0:	mov	r1, #4
   16de4:	mov	r2, #1
   16de8:	mov	r5, r0
   16dec:	add	r0, sp, #128	; 0x80
   16df0:	mov	r3, r5
   16df4:	bl	11158 <fread@plt>
   16df8:	mov	r4, r0
   16dfc:	mov	r0, r5
   16e00:	bl	110ec <ferror@plt>
   16e04:	cmp	r0, #0
   16e08:	beq	16e28 <__assert_fail@plt+0x5af0>
   16e0c:	bl	11200 <__errno_location@plt>
   16e10:	ldr	r0, [r0]
   16e14:	bl	11188 <strerror@plt>
   16e18:	mov	r1, r0
   16e1c:	ldr	r0, [pc, #1352]	; 1736c <__assert_fail@plt+0x6034>
   16e20:	add	r0, pc, r0
   16e24:	b	16eb4 <__assert_fail@plt+0x5b7c>
   16e28:	cmp	r4, #0
   16e2c:	bgt	16e54 <__assert_fail@plt+0x5b1c>
   16e30:	mov	r0, r5
   16e34:	bl	111d0 <feof@plt>
   16e38:	cmp	r0, #0
   16e3c:	ldrne	r0, [pc, #1324]	; 17370 <__assert_fail@plt+0x6038>
   16e40:	addne	r0, pc, r0
   16e44:	bne	1733c <__assert_fail@plt+0x6004>
   16e48:	ldr	r0, [pc, #1316]	; 17374 <__assert_fail@plt+0x603c>
   16e4c:	add	r0, pc, r0
   16e50:	b	1733c <__assert_fail@plt+0x6004>
   16e54:	ldr	r0, [sp, #128]	; 0x80
   16e58:	bl	154ac <__assert_fail@plt+0x4174>
   16e5c:	ldr	r3, [pc, #1300]	; 17378 <__assert_fail@plt+0x6040>
   16e60:	mov	r6, r0
   16e64:	ldr	r0, [pc, #1296]	; 1737c <__assert_fail@plt+0x6044>
   16e68:	cmp	r6, r3
   16e6c:	add	r0, pc, r0
   16e70:	bne	1733c <__assert_fail@plt+0x6004>
   16e74:	mov	r1, #4
   16e78:	mov	r2, #1
   16e7c:	mov	r3, r5
   16e80:	add	r0, sp, #132	; 0x84
   16e84:	bl	11158 <fread@plt>
   16e88:	mov	r4, r0
   16e8c:	mov	r0, r5
   16e90:	bl	110ec <ferror@plt>
   16e94:	cmp	r0, #0
   16e98:	beq	16eb8 <__assert_fail@plt+0x5b80>
   16e9c:	bl	11200 <__errno_location@plt>
   16ea0:	ldr	r0, [r0]
   16ea4:	bl	11188 <strerror@plt>
   16ea8:	mov	r1, r0
   16eac:	ldr	r0, [pc, #1228]	; 17380 <__assert_fail@plt+0x6048>
   16eb0:	add	r0, pc, r0
   16eb4:	bl	1581c <__assert_fail@plt+0x44e4>
   16eb8:	cmp	r4, #0
   16ebc:	bgt	16ee4 <__assert_fail@plt+0x5bac>
   16ec0:	mov	r0, r5
   16ec4:	bl	111d0 <feof@plt>
   16ec8:	cmp	r0, #0
   16ecc:	ldrne	r0, [pc, #1200]	; 17384 <__assert_fail@plt+0x604c>
   16ed0:	addne	r0, pc, r0
   16ed4:	bne	1733c <__assert_fail@plt+0x6004>
   16ed8:	ldr	r0, [pc, #1192]	; 17388 <__assert_fail@plt+0x6050>
   16edc:	add	r0, pc, r0
   16ee0:	b	1733c <__assert_fail@plt+0x6004>
   16ee4:	ldr	r0, [sp, #132]	; 0x84
   16ee8:	bl	154ac <__assert_fail@plt+0x4174>
   16eec:	cmp	r0, #27
   16ef0:	mov	r7, r0
   16ef4:	ldrls	r0, [pc, #1168]	; 1738c <__assert_fail@plt+0x6054>
   16ef8:	addls	r0, pc, r0
   16efc:	bls	16f4c <__assert_fail@plt+0x5c14>
   16f00:	bl	11170 <malloc@plt>
   16f04:	subs	r4, r0, #0
   16f08:	ldreq	r0, [pc, #1152]	; 17390 <__assert_fail@plt+0x6058>
   16f0c:	addeq	r0, pc, r0
   16f10:	beq	1733c <__assert_fail@plt+0x6004>
   16f14:	mov	r0, r6
   16f18:	add	r8, r4, #8
   16f1c:	bl	154d0 <__assert_fail@plt+0x4198>
   16f20:	sub	r6, r7, #8
   16f24:	str	r0, [r4]
   16f28:	mov	r0, r7
   16f2c:	bl	154d0 <__assert_fail@plt+0x4198>
   16f30:	str	r0, [r4, #4]
   16f34:	mov	r0, r5
   16f38:	bl	111d0 <feof@plt>
   16f3c:	cmp	r0, #0
   16f40:	beq	16f54 <__assert_fail@plt+0x5c1c>
   16f44:	ldr	r0, [pc, #1096]	; 17394 <__assert_fail@plt+0x605c>
   16f48:	add	r0, pc, r0
   16f4c:	mov	r1, r7
   16f50:	b	16eb4 <__assert_fail@plt+0x5b7c>
   16f54:	mov	r1, #1
   16f58:	mov	r2, r6
   16f5c:	mov	r3, r5
   16f60:	mov	r0, r8
   16f64:	bl	11158 <fread@plt>
   16f68:	mov	r9, r0
   16f6c:	mov	r0, r5
   16f70:	bl	110ec <ferror@plt>
   16f74:	cmp	r0, #0
   16f78:	beq	16f98 <__assert_fail@plt+0x5c60>
   16f7c:	bl	11200 <__errno_location@plt>
   16f80:	ldr	r0, [r0]
   16f84:	bl	11188 <strerror@plt>
   16f88:	mov	r1, r0
   16f8c:	ldr	r0, [pc, #1028]	; 17398 <__assert_fail@plt+0x6060>
   16f90:	add	r0, pc, r0
   16f94:	b	16eb4 <__assert_fail@plt+0x5b7c>
   16f98:	subs	r6, r6, r9
   16f9c:	add	r8, r8, r9
   16fa0:	bne	16f34 <__assert_fail@plt+0x5bfc>
   16fa4:	ldr	r0, [r4, #8]
   16fa8:	bl	154ac <__assert_fail@plt+0x4174>
   16fac:	mov	r6, r0
   16fb0:	ldr	r0, [r4, #12]
   16fb4:	bl	154ac <__assert_fail@plt+0x4174>
   16fb8:	mov	fp, r0
   16fbc:	ldr	r0, [r4, #16]
   16fc0:	bl	154ac <__assert_fail@plt+0x4174>
   16fc4:	str	r0, [sp, #8]
   16fc8:	ldr	r0, [r4, #20]
   16fcc:	bl	154ac <__assert_fail@plt+0x4174>
   16fd0:	mov	r9, r0
   16fd4:	ldr	r0, [r4, #28]
   16fd8:	bl	154ac <__assert_fail@plt+0x4174>
   16fdc:	ldr	r1, [sp, #8]
   16fe0:	cmp	r1, r7
   16fe4:	str	r0, [sp, #124]	; 0x7c
   16fe8:	ldr	r0, [pc, #940]	; 1739c <__assert_fail@plt+0x6064>
   16fec:	add	r0, pc, r0
   16ff0:	bcs	1733c <__assert_fail@plt+0x6004>
   16ff4:	ldr	r0, [pc, #932]	; 173a0 <__assert_fail@plt+0x6068>
   16ff8:	cmp	r6, r7
   16ffc:	add	r0, pc, r0
   17000:	bcs	1733c <__assert_fail@plt+0x6004>
   17004:	ldr	r0, [pc, #920]	; 173a4 <__assert_fail@plt+0x606c>
   17008:	cmp	fp, r7
   1700c:	add	r0, pc, r0
   17010:	bhi	1733c <__assert_fail@plt+0x6004>
   17014:	cmp	r9, #2
   17018:	add	sl, r4, fp
   1701c:	add	r8, r4, r7
   17020:	bls	17064 <__assert_fail@plt+0x5d2c>
   17024:	ldr	r0, [r4, #32]
   17028:	bl	154ac <__assert_fail@plt+0x4174>
   1702c:	adds	r0, r0, fp
   17030:	bcs	1703c <__assert_fail@plt+0x5d04>
   17034:	cmp	r0, r7
   17038:	bls	17048 <__assert_fail@plt+0x5d10>
   1703c:	ldr	r0, [pc, #868]	; 173a8 <__assert_fail@plt+0x6070>
   17040:	add	r0, pc, r0
   17044:	b	1733c <__assert_fail@plt+0x6004>
   17048:	cmp	r9, #16
   1704c:	add	fp, r4, r0
   17050:	str	sl, [sp, #168]	; 0xa8
   17054:	str	fp, [sp, #172]	; 0xac
   17058:	str	sl, [sp, #176]	; 0xb0
   1705c:	bhi	17074 <__assert_fail@plt+0x5d3c>
   17060:	b	170a0 <__assert_fail@plt+0x5d68>
   17064:	str	sl, [sp, #168]	; 0xa8
   17068:	str	r8, [sp, #172]	; 0xac
   1706c:	str	sl, [sp, #176]	; 0xb0
   17070:	b	170a8 <__assert_fail@plt+0x5d70>
   17074:	ldr	r0, [r4, #36]	; 0x24
   17078:	bl	154ac <__assert_fail@plt+0x4174>
   1707c:	adds	r0, r0, r6
   17080:	bcs	17094 <__assert_fail@plt+0x5d5c>
   17084:	cmp	r0, r7
   17088:	bhi	17094 <__assert_fail@plt+0x5d5c>
   1708c:	mov	r7, #64	; 0x40
   17090:	b	170ac <__assert_fail@plt+0x5d74>
   17094:	ldr	r0, [pc, #784]	; 173ac <__assert_fail@plt+0x6074>
   17098:	add	r0, pc, r0
   1709c:	b	1733c <__assert_fail@plt+0x6004>
   170a0:	cmp	r9, #15
   170a4:	bhi	1708c <__assert_fail@plt+0x5d54>
   170a8:	mov	r7, #7
   170ac:	ldr	r2, [sp, #8]
   170b0:	add	sl, sp, #192	; 0xc0
   170b4:	add	r6, r4, r6
   170b8:	str	r6, [sp, #156]	; 0x9c
   170bc:	add	r9, r4, r2
   170c0:	str	r9, [sp, #180]	; 0xb4
   170c4:	str	r9, [sp, #188]	; 0xbc
   170c8:	add	r9, sp, #180	; 0xb4
   170cc:	str	r6, [sp, #164]	; 0xa4
   170d0:	mov	r6, #0
   170d4:	str	r8, [sp, #184]	; 0xb8
   170d8:	str	r8, [sp, #160]	; 0xa0
   170dc:	mov	r0, r9
   170e0:	mov	r1, sl
   170e4:	mov	r2, #16
   170e8:	bl	159d4 <__assert_fail@plt+0x469c>
   170ec:	ldr	r3, [sp, #192]	; 0xc0
   170f0:	ldr	r2, [sp, #196]	; 0xc4
   170f4:	mov	r0, #0
   170f8:	str	r0, [sp, #64]	; 0x40
   170fc:	str	r3, [sp, #136]	; 0x88
   17100:	lsl	ip, r3, #24
   17104:	lsl	r3, r3, #8
   17108:	str	ip, [sp, #4]
   1710c:	str	r0, [sp]
   17110:	and	r3, r3, #16711680	; 0xff0000
   17114:	str	r3, [sp, #68]	; 0x44
   17118:	str	r2, [sp, #140]	; 0x8c
   1711c:	ldrd	r0, [sp]
   17120:	ldrd	r2, [sp, #64]	; 0x40
   17124:	orr	r0, r0, r2
   17128:	ldrb	r2, [sp, #143]	; 0x8f
   1712c:	orr	r1, r1, r3
   17130:	mov	r3, #0
   17134:	orr	r2, r2, r0
   17138:	ldrb	r0, [sp, #138]	; 0x8a
   1713c:	orr	r3, r3, r1
   17140:	lsl	ip, r0, #8
   17144:	mov	r0, #0
   17148:	str	ip, [sp, #76]	; 0x4c
   1714c:	mov	ip, #0
   17150:	str	r0, [sp, #72]	; 0x48
   17154:	ldrd	r0, [sp, #72]	; 0x48
   17158:	str	ip, [sp, #80]	; 0x50
   1715c:	orr	r3, r3, r1
   17160:	ldrb	r1, [sp, #139]	; 0x8b
   17164:	orr	r2, r2, r0
   17168:	str	ip, [sp, #20]
   1716c:	str	r1, [sp, #84]	; 0x54
   17170:	ldrd	r0, [sp, #80]	; 0x50
   17174:	orr	r2, r2, r0
   17178:	ldrb	r0, [sp, #140]	; 0x8c
   1717c:	orr	r3, r3, r1
   17180:	lsl	ip, r0, #24
   17184:	str	ip, [sp, #16]
   17188:	ldrd	r0, [sp, #16]
   1718c:	mov	ip, #0
   17190:	str	ip, [sp, #28]
   17194:	orr	r2, r2, r0
   17198:	ldrb	r0, [sp, #141]	; 0x8d
   1719c:	orr	r3, r3, r1
   171a0:	lsl	ip, r0, #16
   171a4:	str	ip, [sp, #24]
   171a8:	ldrd	r0, [sp, #24]
   171ac:	mov	ip, #0
   171b0:	str	ip, [sp, #36]	; 0x24
   171b4:	orr	r2, r2, r0
   171b8:	ldrb	r0, [sp, #142]	; 0x8e
   171bc:	orr	r3, r3, r1
   171c0:	lsl	ip, r0, #8
   171c4:	str	ip, [sp, #32]
   171c8:	ldrd	r0, [sp, #32]
   171cc:	orr	r1, r1, r3
   171d0:	ldr	r3, [sp, #200]	; 0xc8
   171d4:	orr	r0, r0, r2
   171d8:	strd	r0, [sp, #8]
   171dc:	str	r3, [sp, #144]	; 0x90
   171e0:	lsl	r1, r3, #24
   171e4:	ldr	r2, [sp, #204]	; 0xcc
   171e8:	lsl	r3, r3, #8
   171ec:	and	r3, r3, #16711680	; 0xff0000
   171f0:	str	r1, [sp, #92]	; 0x5c
   171f4:	str	r3, [sp, #100]	; 0x64
   171f8:	str	r2, [sp, #148]	; 0x94
   171fc:	mov	r2, #0
   17200:	str	r2, [sp, #88]	; 0x58
   17204:	str	r2, [sp, #96]	; 0x60
   17208:	ldrd	r2, [sp, #96]	; 0x60
   1720c:	ldrd	r0, [sp, #88]	; 0x58
   17210:	orr	r0, r0, r2
   17214:	ldrb	r2, [sp, #151]	; 0x97
   17218:	orr	r1, r1, r3
   1721c:	mov	r3, #0
   17220:	orr	r2, r2, r0
   17224:	ldrb	r0, [sp, #146]	; 0x92
   17228:	orr	r3, r3, r1
   1722c:	lsl	ip, r0, #8
   17230:	mov	r0, #0
   17234:	str	ip, [sp, #108]	; 0x6c
   17238:	mov	ip, #0
   1723c:	str	r0, [sp, #104]	; 0x68
   17240:	ldrd	r0, [sp, #104]	; 0x68
   17244:	str	ip, [sp, #112]	; 0x70
   17248:	orr	r3, r3, r1
   1724c:	ldrb	r1, [sp, #147]	; 0x93
   17250:	orr	r2, r2, r0
   17254:	str	ip, [sp, #44]	; 0x2c
   17258:	str	r1, [sp, #116]	; 0x74
   1725c:	ldrd	r0, [sp, #112]	; 0x70
   17260:	orr	r2, r2, r0
   17264:	ldrb	r0, [sp, #148]	; 0x94
   17268:	orr	r3, r3, r1
   1726c:	lsl	ip, r0, #24
   17270:	str	ip, [sp, #40]	; 0x28
   17274:	ldrd	r0, [sp, #40]	; 0x28
   17278:	mov	ip, #0
   1727c:	str	ip, [sp, #52]	; 0x34
   17280:	orr	r2, r2, r0
   17284:	ldrb	r0, [sp, #149]	; 0x95
   17288:	orr	r3, r3, r1
   1728c:	lsl	ip, r0, #16
   17290:	str	ip, [sp, #48]	; 0x30
   17294:	ldrd	r0, [sp, #48]	; 0x30
   17298:	mov	ip, #0
   1729c:	str	ip, [sp, #60]	; 0x3c
   172a0:	orr	r2, r2, r0
   172a4:	ldrb	r0, [sp, #150]	; 0x96
   172a8:	orr	r3, r3, r1
   172ac:	lsl	ip, r0, #8
   172b0:	str	ip, [sp, #56]	; 0x38
   172b4:	ldrd	r0, [sp, #56]	; 0x38
   172b8:	orr	r2, r2, r0
   172bc:	orr	r3, r3, r1
   172c0:	orrs	r1, r2, r3
   172c4:	beq	172e4 <__assert_fail@plt+0x5fac>
   172c8:	ldrd	r0, [sp, #8]
   172cc:	bl	17f30 <__assert_fail@plt+0x6bf8>
   172d0:	mov	r1, r0
   172d4:	mov	r0, r6
   172d8:	bl	17fb4 <__assert_fail@plt+0x6c7c>
   172dc:	mov	r6, r0
   172e0:	b	170dc <__assert_fail@plt+0x5da4>
   172e4:	add	sl, sp, #156	; 0x9c
   172e8:	mov	r0, sl
   172ec:	bl	15a98 <__assert_fail@plt+0x4760>
   172f0:	cmp	r0, #1
   172f4:	mov	r9, r0
   172f8:	ldrne	r0, [pc, #176]	; 173b0 <__assert_fail@plt+0x6078>
   172fc:	movne	r1, r9
   17300:	addne	r0, pc, r0
   17304:	bne	16eb4 <__assert_fail@plt+0x5b7c>
   17308:	ldr	r2, [pc, #164]	; 173b4 <__assert_fail@plt+0x607c>
   1730c:	mov	r3, r7
   17310:	add	r1, sp, #168	; 0xa8
   17314:	mov	r0, sl
   17318:	add	r2, pc, r2
   1731c:	bl	15afc <__assert_fail@plt+0x47c4>
   17320:	mov	r7, r0
   17324:	mov	r0, sl
   17328:	bl	15a98 <__assert_fail@plt+0x4760>
   1732c:	cmp	r0, #9
   17330:	beq	17340 <__assert_fail@plt+0x6008>
   17334:	ldr	r0, [pc, #124]	; 173b8 <__assert_fail@plt+0x6080>
   17338:	add	r0, pc, r0
   1733c:	bl	1581c <__assert_fail@plt+0x44e4>
   17340:	mov	r0, r4
   17344:	bl	110e0 <free@plt>
   17348:	mov	r0, r5
   1734c:	bl	11260 <fclose@plt>
   17350:	mov	r0, r9
   17354:	mov	r1, r6
   17358:	mov	r2, r7
   1735c:	ldr	r3, [sp, #124]	; 0x7c
   17360:	bl	17fe8 <__assert_fail@plt+0x6cb0>
   17364:	add	sp, sp, #212	; 0xd4
   17368:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1736c:	strdeq	sl, [r0], -r6
   17370:	strdeq	sl, [r0], -lr
   17374:	andeq	sl, r0, r4, lsl r7
   17378:	andle	pc, sp, sp, ror #29
   1737c:	andeq	sl, r0, r0, lsr #14
   17380:	strdeq	sl, [r0], -sp
   17384:	strdeq	sl, [r0], -sp
   17388:	andeq	sl, r0, fp, lsl #14
   1738c:	andeq	sl, r0, r8, lsl r7
   17390:	andeq	r9, r0, r1, ror #21
   17394:	andeq	sl, r0, r8, ror #13
   17398:	andeq	sl, r0, r8, asr #13
   1739c:	andeq	sl, r0, r7, lsl #13
   173a0:	andeq	sl, r0, r8, lsr #13
   173a4:	andeq	sl, r0, r0, asr #13
   173a8:			; <UNDEFINED> instruction: 0x0000a6b4
   173ac:	andeq	sl, r0, r2, lsl #13
   173b0:	andeq	sl, r0, r3, asr #8
   173b4:	andeq	r9, r0, lr, asr #20
   173b8:	andeq	sl, r0, r4, asr r4
   173bc:	push	{r0, r1, r2, r3}
   173c0:	ldr	r3, [pc, #60]	; 17404 <__assert_fail@plt+0x60cc>
   173c4:	push	{r0, r1, r2, lr}
   173c8:	add	r2, sp, #20
   173cc:	str	r2, [sp, #4]
   173d0:	add	r3, pc, r3
   173d4:	ldr	r2, [pc, #44]	; 17408 <__assert_fail@plt+0x60d0>
   173d8:	ldr	r0, [pc, #44]	; 1740c <__assert_fail@plt+0x60d4>
   173dc:	ldr	r4, [r3, r2]
   173e0:	add	r0, pc, r0
   173e4:	ldr	r1, [r4]
   173e8:	bl	112f0 <fputs@plt>
   173ec:	ldr	r0, [r4]
   173f0:	ldr	r1, [sp, #16]
   173f4:	ldr	r2, [sp, #4]
   173f8:	bl	11290 <vfprintf@plt>
   173fc:	mov	r0, #1
   17400:	bl	111c4 <exit@plt>
   17404:	andeq	ip, r1, r8, lsr #24
   17408:	andeq	r0, r0, r4, lsr r1
   1740c:	andeq	r7, r0, sp, ror r8
   17410:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17414:	sub	sp, sp, #124	; 0x7c
   17418:	mov	r8, r0
   1741c:	bl	11164 <opendir@plt>
   17420:	ldr	r9, [pc, #460]	; 175f4 <__assert_fail@plt+0x62bc>
   17424:	add	r9, pc, r9
   17428:	subs	r7, r0, #0
   1742c:	bne	17450 <__assert_fail@plt+0x6118>
   17430:	bl	11200 <__errno_location@plt>
   17434:	ldr	r0, [r0]
   17438:	bl	11188 <strerror@plt>
   1743c:	mov	r1, r8
   17440:	mov	r2, r0
   17444:	ldr	r0, [pc, #428]	; 175f8 <__assert_fail@plt+0x62c0>
   17448:	add	r0, pc, r0
   1744c:	b	17558 <__assert_fail@plt+0x6220>
   17450:	mov	r0, #0
   17454:	ldr	fp, [pc, #416]	; 175fc <__assert_fail@plt+0x62c4>
   17458:	mov	r1, r0
   1745c:	bl	17a28 <__assert_fail@plt+0x66f0>
   17460:	ldr	r3, [pc, #408]	; 17600 <__assert_fail@plt+0x62c8>
   17464:	add	fp, pc, fp
   17468:	add	r3, pc, r3
   1746c:	str	r3, [sp, #8]
   17470:	ldr	r3, [pc, #396]	; 17604 <__assert_fail@plt+0x62cc>
   17474:	add	r3, pc, r3
   17478:	str	r3, [sp, #12]
   1747c:	mov	r6, r0
   17480:	b	174e0 <__assert_fail@plt+0x61a8>
   17484:	ldr	r3, [sp, #48]	; 0x30
   17488:	and	r3, r3, #61440	; 0xf000
   1748c:	cmp	r3, #32768	; 0x8000
   17490:	bne	175a8 <__assert_fail@plt+0x6270>
   17494:	mov	r0, r4
   17498:	mov	r1, fp
   1749c:	bl	110bc <fopen@plt>
   174a0:	subs	sl, r0, #0
   174a4:	bne	1755c <__assert_fail@plt+0x6224>
   174a8:	ldr	r3, [pc, #344]	; 17608 <__assert_fail@plt+0x62d0>
   174ac:	ldr	r3, [r9, r3]
   174b0:	ldr	r5, [r3]
   174b4:	bl	11200 <__errno_location@plt>
   174b8:	ldr	r0, [r0]
   174bc:	bl	11188 <strerror@plt>
   174c0:	ldr	r1, [pc, #324]	; 1760c <__assert_fail@plt+0x62d4>
   174c4:	mov	r2, r4
   174c8:	add	r1, pc, r1
   174cc:	mov	r3, r0
   174d0:	mov	r0, r5
   174d4:	bl	111f4 <fprintf@plt>
   174d8:	mov	r0, r4
   174dc:	bl	110e0 <free@plt>
   174e0:	mov	r0, r7
   174e4:	bl	11278 <readdir@plt>
   174e8:	cmp	r0, #0
   174ec:	beq	175e0 <__assert_fail@plt+0x62a8>
   174f0:	add	r5, r0, #11
   174f4:	ldr	r1, [sp, #8]
   174f8:	mov	r0, r5
   174fc:	bl	11098 <strcmp@plt>
   17500:	cmp	r0, #0
   17504:	beq	174e0 <__assert_fail@plt+0x61a8>
   17508:	mov	r0, r5
   1750c:	ldr	r1, [sp, #12]
   17510:	bl	11098 <strcmp@plt>
   17514:	cmp	r0, #0
   17518:	beq	174e0 <__assert_fail@plt+0x61a8>
   1751c:	mov	r1, r5
   17520:	mov	r0, r8
   17524:	bl	19fe8 <__assert_fail@plt+0x8cb0>
   17528:	add	r1, sp, #32
   1752c:	mov	r4, r0
   17530:	bl	1ebfc <__assert_fail@plt+0xd8c4>
   17534:	cmp	r0, #0
   17538:	bge	17484 <__assert_fail@plt+0x614c>
   1753c:	bl	11200 <__errno_location@plt>
   17540:	ldr	r0, [r0]
   17544:	bl	11188 <strerror@plt>
   17548:	mov	r1, r4
   1754c:	mov	r2, r0
   17550:	ldr	r0, [pc, #184]	; 17610 <__assert_fail@plt+0x62d8>
   17554:	add	r0, pc, r0
   17558:	bl	173bc <__assert_fail@plt+0x6084>
   1755c:	mov	r0, r5
   17560:	add	r5, sp, #20
   17564:	bl	19f20 <__assert_fail@plt+0x8be8>
   17568:	mov	r1, sl
   1756c:	ldr	r2, [sp, #76]	; 0x4c
   17570:	mov	r3, r0
   17574:	mov	r0, r5
   17578:	str	r3, [sp, #4]
   1757c:	bl	14eb4 <__assert_fail@plt+0x3b7c>
   17580:	ldr	r3, [sp, #4]
   17584:	mov	r0, r3
   17588:	ldm	r5, {r1, r2, r3}
   1758c:	bl	17948 <__assert_fail@plt+0x6610>
   17590:	mov	r1, r0
   17594:	mov	r0, r6
   17598:	bl	17b3c <__assert_fail@plt+0x6804>
   1759c:	mov	r0, sl
   175a0:	bl	11260 <fclose@plt>
   175a4:	b	174d8 <__assert_fail@plt+0x61a0>
   175a8:	cmp	r3, #16384	; 0x4000
   175ac:	bne	174d8 <__assert_fail@plt+0x61a0>
   175b0:	mov	r0, r4
   175b4:	bl	17410 <__assert_fail@plt+0x60d8>
   175b8:	mov	sl, r0
   175bc:	mov	r0, r5
   175c0:	bl	19f20 <__assert_fail@plt+0x8be8>
   175c4:	mov	r1, r0
   175c8:	mov	r0, sl
   175cc:	bl	17aac <__assert_fail@plt+0x6774>
   175d0:	mov	r1, r0
   175d4:	mov	r0, r6
   175d8:	bl	17bac <__assert_fail@plt+0x6874>
   175dc:	b	174d8 <__assert_fail@plt+0x61a0>
   175e0:	mov	r0, r7
   175e4:	bl	11320 <closedir@plt>
   175e8:	mov	r0, r6
   175ec:	add	sp, sp, #124	; 0x7c
   175f0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   175f4:	ldrdeq	ip, [r1], -r4
   175f8:	andeq	sl, r0, pc, ror #6
   175fc:	andeq	sl, r0, r1, lsl #7
   17600:	andeq	sl, r0, sp, ror #6
   17604:	andeq	sl, r0, r0, ror #6
   17608:	andeq	r0, r0, r4, lsr r1
   1760c:	andeq	sl, r0, r0, lsr #6
   17610:	andeq	sl, r0, r3, lsl #5
   17614:	push	{r4, lr}
   17618:	bl	17410 <__assert_fail@plt+0x60d8>
   1761c:	ldr	r1, [pc, #36]	; 17648 <__assert_fail@plt+0x6310>
   17620:	add	r1, pc, r1
   17624:	bl	17aac <__assert_fail@plt+0x6774>
   17628:	mov	r4, r0
   1762c:	bl	18d3c <__assert_fail@plt+0x7a04>
   17630:	mov	r2, r4
   17634:	mov	r1, #0
   17638:	pop	{r4, lr}
   1763c:	mov	r3, r0
   17640:	mov	r0, #1
   17644:	b	17fe8 <__assert_fail@plt+0x6cb0>
   17648:	andeq	r9, r0, r6, asr #14
   1764c:	push	{r4, lr}
   17650:	ldr	ip, [r0]
   17654:	ldr	r4, [r1]
   17658:	ldrd	r0, [ip]
   1765c:	ldrd	r2, [r4]
   17660:	cmp	r1, r3
   17664:	cmpeq	r0, r2
   17668:	bcc	17698 <__assert_fail@plt+0x6360>
   1766c:	bhi	17690 <__assert_fail@plt+0x6358>
   17670:	ldrd	r0, [ip, #8]
   17674:	ldrd	r2, [r4, #8]
   17678:	cmp	r1, r3
   1767c:	cmpeq	r0, r2
   17680:	bcc	17698 <__assert_fail@plt+0x6360>
   17684:	movls	r0, #0
   17688:	movhi	r0, #1
   1768c:	pop	{r4, pc}
   17690:	mov	r0, #1
   17694:	pop	{r4, pc}
   17698:	mvn	r0, #0
   1769c:	pop	{r4, pc}
   176a0:	push	{r3, r4, r5, lr}
   176a4:	mov	r5, r0
   176a8:	ldr	r3, [r1, #44]	; 0x2c
   176ac:	cmp	r3, #0
   176b0:	ldreq	r4, [r1, #12]
   176b4:	bne	176f0 <__assert_fail@plt+0x63b8>
   176b8:	cmp	r4, #0
   176bc:	beq	176e8 <__assert_fail@plt+0x63b0>
   176c0:	ldrb	r3, [r4]
   176c4:	cmp	r3, #0
   176c8:	bne	176e0 <__assert_fail@plt+0x63a8>
   176cc:	mov	r0, r5
   176d0:	mov	r1, r4
   176d4:	bl	176a0 <__assert_fail@plt+0x6368>
   176d8:	cmp	r0, #0
   176dc:	popne	{r3, r4, r5, pc}
   176e0:	ldr	r4, [r4, #20]
   176e4:	b	176b8 <__assert_fail@plt+0x6380>
   176e8:	mov	r0, r4
   176ec:	pop	{r3, r4, r5, pc}
   176f0:	mov	r0, #1
   176f4:	pop	{r3, r4, r5, pc}
   176f8:	ldr	r2, [r0]
   176fc:	ldr	r3, [r1]
   17700:	ldr	r0, [r2, #4]
   17704:	ldr	r1, [r3, #4]
   17708:	b	11098 <strcmp@plt>
   1770c:	ldr	r2, [r0]
   17710:	ldr	r3, [r1]
   17714:	ldr	r0, [r2, #4]
   17718:	ldr	r1, [r3, #4]
   1771c:	b	11098 <strcmp@plt>
   17720:	push	{r3, lr}
   17724:	bl	11170 <malloc@plt>
   17728:	cmp	r0, #0
   1772c:	popne	{r3, pc}
   17730:	ldr	r0, [pc, #4]	; 1773c <__assert_fail@plt+0x6404>
   17734:	add	r0, pc, r0
   17738:	bl	11344 <__assert_fail@plt+0xc>
   1773c:			; <UNDEFINED> instruction: 0x000092b9
   17740:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   17744:	mov	r4, r0
   17748:	ldr	r3, [r0, #8]
   1774c:	mov	r5, #0
   17750:	cmp	r3, #0
   17754:	addne	r5, r5, #1
   17758:	ldrne	r3, [r3, #20]
   1775c:	bne	17750 <__assert_fail@plt+0x6418>
   17760:	cmp	r5, #0
   17764:	beq	177ec <__assert_fail@plt+0x64b4>
   17768:	lsl	r8, r5, #2
   1776c:	mov	r0, r8
   17770:	bl	17720 <__assert_fail@plt+0x63e8>
   17774:	ldr	r7, [r4, #8]
   17778:	sub	r9, r0, #4
   1777c:	mov	r6, r0
   17780:	mov	r3, r9
   17784:	cmp	r7, #0
   17788:	strne	r7, [r3, #4]!
   1778c:	ldrne	r7, [r7, #20]
   17790:	bne	17784 <__assert_fail@plt+0x644c>
   17794:	ldr	r3, [pc, #276]	; 178b0 <__assert_fail@plt+0x6578>
   17798:	mov	r1, r5
   1779c:	mov	r0, r6
   177a0:	mov	r2, #4
   177a4:	add	r3, pc, r3
   177a8:	sub	r5, r5, #1
   177ac:	bl	112cc <qsort@plt>
   177b0:	ldr	r3, [r6]
   177b4:	str	r3, [r4, #8]
   177b8:	mov	r3, r9
   177bc:	cmp	r7, r5
   177c0:	ldrlt	r2, [r3, #4]!
   177c4:	addlt	r7, r7, #1
   177c8:	ldrlt	r1, [r3, #4]
   177cc:	strlt	r1, [r2, #20]
   177d0:	blt	177bc <__assert_fail@plt+0x6484>
   177d4:	add	r8, r6, r8
   177d8:	mov	r2, #0
   177dc:	mov	r0, r6
   177e0:	ldr	r3, [r8, #-4]
   177e4:	str	r2, [r3, #20]
   177e8:	bl	110e0 <free@plt>
   177ec:	ldr	r3, [r4, #12]
   177f0:	mov	r5, #0
   177f4:	cmp	r3, #0
   177f8:	addne	r5, r5, #1
   177fc:	ldrne	r3, [r3, #20]
   17800:	bne	177f4 <__assert_fail@plt+0x64bc>
   17804:	cmp	r5, #0
   17808:	beq	17890 <__assert_fail@plt+0x6558>
   1780c:	lsl	r8, r5, #2
   17810:	mov	r0, r8
   17814:	bl	17720 <__assert_fail@plt+0x63e8>
   17818:	ldr	r7, [r4, #12]
   1781c:	sub	r9, r0, #4
   17820:	mov	r6, r0
   17824:	mov	r3, r9
   17828:	cmp	r7, #0
   1782c:	strne	r7, [r3, #4]!
   17830:	ldrne	r7, [r7, #20]
   17834:	bne	17828 <__assert_fail@plt+0x64f0>
   17838:	ldr	r3, [pc, #116]	; 178b4 <__assert_fail@plt+0x657c>
   1783c:	mov	r1, r5
   17840:	mov	r0, r6
   17844:	mov	r2, #4
   17848:	add	r3, pc, r3
   1784c:	sub	r5, r5, #1
   17850:	bl	112cc <qsort@plt>
   17854:	ldr	r3, [r6]
   17858:	str	r3, [r4, #12]
   1785c:	mov	r3, r9
   17860:	cmp	r7, r5
   17864:	ldrlt	r2, [r3, #4]!
   17868:	addlt	r7, r7, #1
   1786c:	ldrlt	r1, [r3, #4]
   17870:	strlt	r1, [r2, #20]
   17874:	blt	17860 <__assert_fail@plt+0x6528>
   17878:	add	r8, r6, r8
   1787c:	mov	r2, #0
   17880:	mov	r0, r6
   17884:	ldr	r3, [r8, #-4]
   17888:	str	r2, [r3, #20]
   1788c:	bl	110e0 <free@plt>
   17890:	ldr	r4, [r4, #12]
   17894:	cmp	r4, #0
   17898:	beq	178ac <__assert_fail@plt+0x6574>
   1789c:	mov	r0, r4
   178a0:	bl	17740 <__assert_fail@plt+0x6408>
   178a4:	ldr	r4, [r4, #20]
   178a8:	b	17894 <__assert_fail@plt+0x655c>
   178ac:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   178b0:			; <UNDEFINED> instruction: 0xffffff4c
   178b4:			; <UNDEFINED> instruction: 0xfffffebc
   178b8:	push	{r3, r4, r5, r6, r7, lr}
   178bc:	mov	r5, r0
   178c0:	ldr	r4, [r0]
   178c4:	mov	r7, r1
   178c8:	cmp	r4, #0
   178cc:	beq	178f4 <__assert_fail@plt+0x65bc>
   178d0:	ldr	r0, [r4, #4]
   178d4:	mov	r1, r7
   178d8:	bl	11098 <strcmp@plt>
   178dc:	cmp	r0, #0
   178e0:	bne	178ec <__assert_fail@plt+0x65b4>
   178e4:	strb	r0, [r4]
   178e8:	pop	{r3, r4, r5, r6, r7, pc}
   178ec:	ldr	r4, [r4, #8]
   178f0:	b	178c8 <__assert_fail@plt+0x6590>
   178f4:	mov	r0, #12
   178f8:	bl	17720 <__assert_fail@plt+0x63e8>
   178fc:	mov	r1, r4
   17900:	mov	r2, #12
   17904:	mov	r6, r0
   17908:	bl	11218 <memset@plt>
   1790c:	str	r7, [r6, #4]
   17910:	ldr	r3, [r5]
   17914:	str	r3, [r6, #8]
   17918:	str	r6, [r5]
   1791c:	pop	{r3, r4, r5, r6, r7, pc}
   17920:	ldr	r3, [r0]
   17924:	mov	r2, #1
   17928:	cmp	r3, #0
   1792c:	beq	17944 <__assert_fail@plt+0x660c>
   17930:	ldrb	r1, [r3]
   17934:	cmp	r1, #0
   17938:	strbeq	r2, [r3]
   1793c:	ldr	r3, [r3, #8]
   17940:	b	17928 <__assert_fail@plt+0x65f0>
   17944:	bx	lr
   17948:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1794c:	add	r4, sp, #4
   17950:	mov	r6, r0
   17954:	mov	r0, #28
   17958:	stm	r4, {r1, r2, r3}
   1795c:	bl	17720 <__assert_fail@plt+0x63e8>
   17960:	mov	r1, #0
   17964:	mov	r2, #28
   17968:	mov	r5, r0
   1796c:	bl	11218 <memset@plt>
   17970:	ldm	r4, {r0, r1, r2}
   17974:	add	r3, r5, #8
   17978:	str	r6, [r5, #4]
   1797c:	stm	r3, {r0, r1, r2}
   17980:	mov	r0, r5
   17984:	add	sp, sp, #16
   17988:	pop	{r4, r5, r6, pc}
   1798c:	push	{r3, r4, r5, lr}
   17990:	mov	r5, r0
   17994:	mov	r0, #28
   17998:	bl	17720 <__assert_fail@plt+0x63e8>
   1799c:	mov	r1, #0
   179a0:	mov	r2, #28
   179a4:	mov	r4, r0
   179a8:	bl	11218 <memset@plt>
   179ac:	mov	r3, #1
   179b0:	str	r5, [r4, #4]
   179b4:	strb	r3, [r4]
   179b8:	mov	r0, r4
   179bc:	pop	{r3, r4, r5, pc}
   179c0:	ldr	r2, [r0, #20]
   179c4:	push	{r3, lr}
   179c8:	cmp	r2, #0
   179cc:	beq	179f0 <__assert_fail@plt+0x66b8>
   179d0:	ldr	r0, [pc, #32]	; 179f8 <__assert_fail@plt+0x66c0>
   179d4:	mov	r2, #79	; 0x4f
   179d8:	ldr	r1, [pc, #28]	; 179fc <__assert_fail@plt+0x66c4>
   179dc:	ldr	r3, [pc, #28]	; 17a00 <__assert_fail@plt+0x66c8>
   179e0:	add	r0, pc, r0
   179e4:	add	r1, pc, r1
   179e8:	add	r3, pc, r3
   179ec:	bl	11338 <__assert_fail@plt>
   179f0:	str	r1, [r0, #20]
   179f4:	pop	{r3, pc}
   179f8:	andeq	r9, r0, pc, lsr #29
   179fc:	andeq	r9, r0, r6, asr #29
   17a00:	andeq	r9, r0, sp, lsl lr
   17a04:	mov	r3, r0
   17a08:	mov	r0, #0
   17a0c:	cmp	r3, #0
   17a10:	ldrne	r2, [r3, #20]
   17a14:	strne	r0, [r3, #20]
   17a18:	movne	r0, r3
   17a1c:	movne	r3, r2
   17a20:	bne	17a0c <__assert_fail@plt+0x66d4>
   17a24:	bx	lr
   17a28:	push	{r4, r5, r6, lr}
   17a2c:	mov	r6, r0
   17a30:	mov	r0, #52	; 0x34
   17a34:	mov	r4, r1
   17a38:	bl	17720 <__assert_fail@plt+0x63e8>
   17a3c:	mov	r1, #0
   17a40:	mov	r2, #52	; 0x34
   17a44:	mov	r5, r0
   17a48:	bl	11218 <memset@plt>
   17a4c:	mov	r0, r6
   17a50:	bl	17a04 <__assert_fail@plt+0x66cc>
   17a54:	str	r4, [r5, #12]
   17a58:	str	r0, [r5, #8]
   17a5c:	cmp	r4, #0
   17a60:	beq	17a78 <__assert_fail@plt+0x6740>
   17a64:	ldrb	r3, [r4]
   17a68:	cmp	r3, #0
   17a6c:	streq	r5, [r4, #16]
   17a70:	ldr	r4, [r4, #20]
   17a74:	b	17a5c <__assert_fail@plt+0x6724>
   17a78:	mov	r0, r5
   17a7c:	pop	{r4, r5, r6, pc}
   17a80:	push	{r4, lr}
   17a84:	mov	r0, #52	; 0x34
   17a88:	bl	17720 <__assert_fail@plt+0x63e8>
   17a8c:	mov	r1, #0
   17a90:	mov	r2, #52	; 0x34
   17a94:	mov	r4, r0
   17a98:	bl	11218 <memset@plt>
   17a9c:	mov	r3, #1
   17aa0:	mov	r0, r4
   17aa4:	strb	r3, [r4]
   17aa8:	pop	{r4, pc}
   17aac:	ldr	r2, [r0, #4]
   17ab0:	push	{r3, lr}
   17ab4:	cmp	r2, #0
   17ab8:	beq	17ae0 <__assert_fail@plt+0x67a8>
   17abc:	ldr	r3, [pc, #36]	; 17ae8 <__assert_fail@plt+0x67b0>
   17ac0:	mov	r2, #130	; 0x82
   17ac4:	ldr	r0, [pc, #32]	; 17aec <__assert_fail@plt+0x67b4>
   17ac8:	ldr	r1, [pc, #32]	; 17af0 <__assert_fail@plt+0x67b8>
   17acc:	add	r3, pc, r3
   17ad0:	add	r0, pc, r0
   17ad4:	add	r3, r3, #15
   17ad8:	add	r1, pc, r1
   17adc:	bl	11338 <__assert_fail@plt>
   17ae0:	str	r1, [r0, #4]
   17ae4:	pop	{r3, pc}
   17ae8:	andeq	r9, r0, r9, lsr sp
   17aec:	andeq	r9, r0, r5, ror #27
   17af0:	ldrdeq	r9, [r0], -r2
   17af4:	ldr	r2, [r0, #20]
   17af8:	push	{r3, lr}
   17afc:	cmp	r2, #0
   17b00:	beq	17b28 <__assert_fail@plt+0x67f0>
   17b04:	ldr	r3, [pc, #36]	; 17b30 <__assert_fail@plt+0x67f8>
   17b08:	mov	r2, #244	; 0xf4
   17b0c:	ldr	r0, [pc, #32]	; 17b34 <__assert_fail@plt+0x67fc>
   17b10:	ldr	r1, [pc, #32]	; 17b38 <__assert_fail@plt+0x6800>
   17b14:	add	r3, pc, r3
   17b18:	add	r0, pc, r0
   17b1c:	add	r3, r3, #25
   17b20:	add	r1, pc, r1
   17b24:	bl	11338 <__assert_fail@plt>
   17b28:	str	r1, [r0, #20]
   17b2c:	pop	{r3, pc}
   17b30:	strdeq	r9, [r0], -r1
   17b34:			; <UNDEFINED> instruction: 0x00009db7
   17b38:	andeq	r9, r0, sl, lsl #27
   17b3c:	add	r0, r0, #8
   17b40:	mov	r3, #0
   17b44:	str	r3, [r1, #20]
   17b48:	ldr	r3, [r0]
   17b4c:	cmp	r3, #0
   17b50:	addne	r0, r3, #20
   17b54:	bne	17b48 <__assert_fail@plt+0x6810>
   17b58:	str	r1, [r0]
   17b5c:	bx	lr
   17b60:	mov	r3, #1
   17b64:	strb	r3, [r0], #24
   17b68:	b	17920 <__assert_fail@plt+0x65e8>
   17b6c:	push	{r3, r4, r5, lr}
   17b70:	mov	r5, r1
   17b74:	ldr	r4, [r0, #8]
   17b78:	cmp	r4, #0
   17b7c:	beq	17ba8 <__assert_fail@plt+0x6870>
   17b80:	ldr	r0, [r4, #4]
   17b84:	mov	r1, r5
   17b88:	bl	11098 <strcmp@plt>
   17b8c:	cmp	r0, #0
   17b90:	bne	17ba0 <__assert_fail@plt+0x6868>
   17b94:	mov	r0, r4
   17b98:	pop	{r3, r4, r5, lr}
   17b9c:	b	17b60 <__assert_fail@plt+0x6828>
   17ba0:	ldr	r4, [r4, #20]
   17ba4:	b	17b78 <__assert_fail@plt+0x6840>
   17ba8:	pop	{r3, r4, r5, pc}
   17bac:	str	r0, [r1, #16]
   17bb0:	add	r0, r0, #12
   17bb4:	mov	r3, #0
   17bb8:	str	r3, [r1, #20]
   17bbc:	ldr	r3, [r0]
   17bc0:	cmp	r3, #0
   17bc4:	addne	r0, r3, #20
   17bc8:	bne	17bbc <__assert_fail@plt+0x6884>
   17bcc:	str	r1, [r0]
   17bd0:	bx	lr
   17bd4:	push	{r4, r5, r6, r7, lr}
   17bd8:	sub	sp, sp, #52	; 0x34
   17bdc:	add	r4, sp, #36	; 0x24
   17be0:	mov	r6, r0
   17be4:	mov	r7, r1
   17be8:	mov	r5, r2
   17bec:	mov	r0, r4
   17bf0:	mov	r1, #0
   17bf4:	mov	r2, #12
   17bf8:	bl	11218 <memset@plt>
   17bfc:	mov	r3, #0
   17c00:	stm	sp, {r3, r5}
   17c04:	add	r5, sp, #16
   17c08:	ldm	r4, {r1, r2, r3}
   17c0c:	mov	r0, r4
   17c10:	bl	153c0 <__assert_fail@plt+0x4088>
   17c14:	mov	r0, r5
   17c18:	mvn	r2, #0
   17c1c:	mov	r3, #0
   17c20:	strd	r2, [sp]
   17c24:	mov	r3, #32
   17c28:	str	r3, [sp, #8]
   17c2c:	ldm	r4, {r1, r2, r3}
   17c30:	bl	15124 <__assert_fail@plt+0x3dec>
   17c34:	ldm	r5, {r0, r1, r2}
   17c38:	stm	r4, {r0, r1, r2}
   17c3c:	ldr	r0, [pc, #112]	; 17cb4 <__assert_fail@plt+0x697c>
   17c40:	ldm	r4, {r1, r2, r3}
   17c44:	add	r0, pc, r0
   17c48:	bl	17948 <__assert_fail@plt+0x6610>
   17c4c:	ldr	r3, [pc, #100]	; 17cb8 <__assert_fail@plt+0x6980>
   17c50:	add	r3, pc, r3
   17c54:	ldr	r2, [r3]
   17c58:	add	r1, r2, #1
   17c5c:	str	r1, [r3]
   17c60:	ldr	r1, [pc, #84]	; 17cbc <__assert_fail@plt+0x6984>
   17c64:	add	r1, pc, r1
   17c68:	mov	r4, r0
   17c6c:	add	r0, sp, #32
   17c70:	bl	19f48 <__assert_fail@plt+0x8c10>
   17c74:	ldr	r1, [pc, #68]	; 17cc0 <__assert_fail@plt+0x6988>
   17c78:	mov	r0, r7
   17c7c:	add	r1, pc, r1
   17c80:	bl	17aac <__assert_fail@plt+0x6774>
   17c84:	mov	r1, r7
   17c88:	mov	r0, r4
   17c8c:	bl	17a28 <__assert_fail@plt+0x66f0>
   17c90:	ldr	r1, [sp, #32]
   17c94:	mov	r4, r0
   17c98:	bl	17aac <__assert_fail@plt+0x6774>
   17c9c:	mov	r0, r6
   17ca0:	mov	r1, r4
   17ca4:	bl	17bac <__assert_fail@plt+0x6874>
   17ca8:	mov	r0, r6
   17cac:	add	sp, sp, #52	; 0x34
   17cb0:	pop	{r4, r5, r6, r7, pc}
   17cb4:	andeq	r9, r0, lr, lsr #25
   17cb8:	andeq	ip, r1, r4, ror lr
   17cbc:	muleq	r0, r5, ip
   17cc0:	andeq	r9, r0, r9, lsl #25
   17cc4:	push	{r4, r5, r6, lr}
   17cc8:	mov	r5, r0
   17ccc:	mov	r0, #0
   17cd0:	mov	r6, r1
   17cd4:	mov	r1, r0
   17cd8:	bl	17a28 <__assert_fail@plt+0x66f0>
   17cdc:	mov	r4, r0
   17ce0:	mov	r0, r6
   17ce4:	bl	19f20 <__assert_fail@plt+0x8be8>
   17ce8:	mov	r1, r0
   17cec:	mov	r0, r4
   17cf0:	bl	17aac <__assert_fail@plt+0x6774>
   17cf4:	mov	r0, r5
   17cf8:	mov	r1, r4
   17cfc:	bl	17bac <__assert_fail@plt+0x6874>
   17d00:	mov	r0, r4
   17d04:	pop	{r4, r5, r6, pc}
   17d08:	push	{r3, r4, r5, lr}
   17d0c:	mov	r5, r0
   17d10:	ldr	r4, [r0, #12]
   17d14:	mov	r3, #1
   17d18:	strb	r3, [r0]
   17d1c:	cmp	r4, #0
   17d20:	beq	17d40 <__assert_fail@plt+0x6a08>
   17d24:	ldrb	r3, [r4]
   17d28:	cmp	r3, #0
   17d2c:	bne	17d38 <__assert_fail@plt+0x6a00>
   17d30:	mov	r0, r4
   17d34:	bl	17d08 <__assert_fail@plt+0x69d0>
   17d38:	ldr	r4, [r4, #20]
   17d3c:	b	17d1c <__assert_fail@plt+0x69e4>
   17d40:	ldr	r4, [r5, #8]
   17d44:	cmp	r4, #0
   17d48:	beq	17d68 <__assert_fail@plt+0x6a30>
   17d4c:	ldrb	r3, [r4]
   17d50:	cmp	r3, #0
   17d54:	bne	17d60 <__assert_fail@plt+0x6a28>
   17d58:	mov	r0, r4
   17d5c:	bl	17b60 <__assert_fail@plt+0x6828>
   17d60:	ldr	r4, [r4, #20]
   17d64:	b	17d44 <__assert_fail@plt+0x6a0c>
   17d68:	add	r0, r5, #44	; 0x2c
   17d6c:	pop	{r3, r4, r5, lr}
   17d70:	b	17920 <__assert_fail@plt+0x65e8>
   17d74:	push	{r3, r4, r5, lr}
   17d78:	mov	r5, r1
   17d7c:	ldr	r4, [r0, #12]
   17d80:	cmp	r4, #0
   17d84:	beq	17db0 <__assert_fail@plt+0x6a78>
   17d88:	ldr	r0, [r4, #4]
   17d8c:	mov	r1, r5
   17d90:	bl	11098 <strcmp@plt>
   17d94:	cmp	r0, #0
   17d98:	bne	17da8 <__assert_fail@plt+0x6a70>
   17d9c:	mov	r0, r4
   17da0:	pop	{r3, r4, r5, lr}
   17da4:	b	17d08 <__assert_fail@plt+0x69d0>
   17da8:	ldr	r4, [r4, #20]
   17dac:	b	17d80 <__assert_fail@plt+0x6a48>
   17db0:	pop	{r3, r4, r5, pc}
   17db4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   17db8:	mov	r5, r0
   17dbc:	ldr	r4, [r1, #44]	; 0x2c
   17dc0:	mov	r6, r0
   17dc4:	mov	r7, r1
   17dc8:	mov	r3, #0
   17dcc:	strb	r3, [r5], #44	; 0x2c
   17dd0:	cmp	r4, #0
   17dd4:	beq	17dec <__assert_fail@plt+0x6ab4>
   17dd8:	ldr	r1, [r4, #4]
   17ddc:	mov	r0, r5
   17de0:	bl	178b8 <__assert_fail@plt+0x6580>
   17de4:	ldr	r4, [r4, #8]
   17de8:	b	17dd0 <__assert_fail@plt+0x6a98>
   17dec:	mov	r9, r4
   17df0:	ldr	r4, [r7, #8]
   17df4:	cmp	r4, #0
   17df8:	beq	17ec0 <__assert_fail@plt+0x6b88>
   17dfc:	ldr	r3, [r4, #20]
   17e00:	str	r3, [r7, #8]
   17e04:	ldrb	r3, [r4]
   17e08:	str	r9, [r4, #20]
   17e0c:	cmp	r3, #0
   17e10:	ldreq	r5, [r6, #8]
   17e14:	beq	17e4c <__assert_fail@plt+0x6b14>
   17e18:	mov	r0, r6
   17e1c:	ldr	r1, [r4, #4]
   17e20:	bl	17b6c <__assert_fail@plt+0x6834>
   17e24:	b	17e3c <__assert_fail@plt+0x6b04>
   17e28:	add	r2, r4, #8
   17e2c:	add	r3, r5, #8
   17e30:	ldm	r2, {r0, r1, r2}
   17e34:	stm	r3, {r0, r1, r2}
   17e38:	strb	r8, [r5]
   17e3c:	mov	r0, r4
   17e40:	bl	110e0 <free@plt>
   17e44:	b	17df0 <__assert_fail@plt+0x6ab8>
   17e48:	ldr	r5, [r5, #20]
   17e4c:	cmp	r5, #0
   17e50:	beq	17f00 <__assert_fail@plt+0x6bc8>
   17e54:	ldr	r0, [r5, #4]
   17e58:	ldr	r1, [r4, #4]
   17e5c:	bl	11098 <strcmp@plt>
   17e60:	cmp	r0, #0
   17e64:	bne	17e48 <__assert_fail@plt+0x6b10>
   17e68:	ldr	r8, [r4, #24]
   17e6c:	add	sl, r5, #24
   17e70:	cmp	r8, #0
   17e74:	beq	17e28 <__assert_fail@plt+0x6af0>
   17e78:	ldr	r1, [r8, #4]
   17e7c:	mov	r0, sl
   17e80:	bl	178b8 <__assert_fail@plt+0x6580>
   17e84:	ldr	r8, [r8, #8]
   17e88:	b	17e70 <__assert_fail@plt+0x6b38>
   17e8c:	ldr	r3, [r5, #20]
   17e90:	str	r3, [r7, #12]
   17e94:	ldrb	r3, [r5]
   17e98:	str	r4, [r5, #16]
   17e9c:	cmp	r3, #0
   17ea0:	str	r4, [r5, #20]
   17ea4:	ldreq	r8, [r6, #12]
   17ea8:	beq	17ed4 <__assert_fail@plt+0x6b9c>
   17eac:	mov	r0, r6
   17eb0:	ldr	r1, [r5, #4]
   17eb4:	bl	17d74 <__assert_fail@plt+0x6a3c>
   17eb8:	mov	r0, r5
   17ebc:	bl	110e0 <free@plt>
   17ec0:	ldr	r5, [r7, #12]
   17ec4:	cmp	r5, #0
   17ec8:	bne	17e8c <__assert_fail@plt+0x6b54>
   17ecc:	b	17f20 <__assert_fail@plt+0x6be8>
   17ed0:	ldr	r8, [r8, #20]
   17ed4:	cmp	r8, #0
   17ed8:	beq	17f10 <__assert_fail@plt+0x6bd8>
   17edc:	ldr	r0, [r8, #4]
   17ee0:	ldr	r1, [r5, #4]
   17ee4:	bl	11098 <strcmp@plt>
   17ee8:	cmp	r0, #0
   17eec:	bne	17ed0 <__assert_fail@plt+0x6b98>
   17ef0:	mov	r0, r8
   17ef4:	mov	r1, r5
   17ef8:	bl	17db4 <__assert_fail@plt+0x6a7c>
   17efc:	b	17ec0 <__assert_fail@plt+0x6b88>
   17f00:	mov	r0, r6
   17f04:	mov	r1, r4
   17f08:	bl	17b3c <__assert_fail@plt+0x6804>
   17f0c:	b	17df0 <__assert_fail@plt+0x6ab8>
   17f10:	mov	r0, r6
   17f14:	mov	r1, r5
   17f18:	bl	17bac <__assert_fail@plt+0x6874>
   17f1c:	b	17ec0 <__assert_fail@plt+0x6b88>
   17f20:	mov	r0, r7
   17f24:	bl	110e0 <free@plt>
   17f28:	mov	r0, r6
   17f2c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   17f30:	push	{r4, r5, r6, r7, r8, lr}
   17f34:	mov	r6, r0
   17f38:	mov	r0, #24
   17f3c:	mov	r7, r1
   17f40:	mov	r4, r2
   17f44:	mov	r5, r3
   17f48:	bl	17720 <__assert_fail@plt+0x63e8>
   17f4c:	mov	r1, #0
   17f50:	mov	r2, #24
   17f54:	mov	r8, r0
   17f58:	bl	11218 <memset@plt>
   17f5c:	strd	r6, [r8]
   17f60:	mov	r0, r8
   17f64:	strd	r4, [r8, #8]
   17f68:	pop	{r4, r5, r6, r7, r8, pc}
   17f6c:	ldr	r2, [r0, #16]
   17f70:	push	{r3, lr}
   17f74:	cmp	r2, #0
   17f78:	beq	17fa0 <__assert_fail@plt+0x6c68>
   17f7c:	ldr	r3, [pc, #36]	; 17fa8 <__assert_fail@plt+0x6c70>
   17f80:	movw	r2, #354	; 0x162
   17f84:	ldr	r0, [pc, #32]	; 17fac <__assert_fail@plt+0x6c74>
   17f88:	ldr	r1, [pc, #32]	; 17fb0 <__assert_fail@plt+0x6c78>
   17f8c:	add	r3, pc, r3
   17f90:	add	r0, pc, r0
   17f94:	add	r3, r3, #36	; 0x24
   17f98:	add	r1, pc, r1
   17f9c:	bl	11338 <__assert_fail@plt>
   17fa0:	str	r1, [r0, #16]
   17fa4:	pop	{r3, pc}
   17fa8:	andeq	r9, r0, r9, ror r8
   17fac:	strdeq	r9, [r0], -pc	; <UNPREDICTABLE>
   17fb0:	andeq	r9, r0, r2, lsl r9
   17fb4:	cmp	r0, #0
   17fb8:	mov	r3, #0
   17fbc:	str	r3, [r1, #16]
   17fc0:	beq	17fe0 <__assert_fail@plt+0x6ca8>
   17fc4:	mov	r3, r0
   17fc8:	ldr	r2, [r3, #16]
   17fcc:	cmp	r2, #0
   17fd0:	movne	r3, r2
   17fd4:	bne	17fc8 <__assert_fail@plt+0x6c90>
   17fd8:	str	r1, [r3, #16]
   17fdc:	bx	lr
   17fe0:	mov	r0, r1
   17fe4:	bx	lr
   17fe8:	push	{r3, r4, r5, r6, r7, lr}
   17fec:	mov	r4, r0
   17ff0:	mov	r0, #20
   17ff4:	mov	r5, r1
   17ff8:	mov	r6, r2
   17ffc:	mov	r7, r3
   18000:	bl	17720 <__assert_fail@plt+0x63e8>
   18004:	stm	r0, {r4, r5}
   18008:	str	r6, [r0, #12]
   1800c:	str	r7, [r0, #8]
   18010:	pop	{r3, r4, r5, r6, r7, pc}
   18014:	ldr	r3, [r0, #4]
   18018:	ldr	r0, [r0, #28]
   1801c:	ldrb	r2, [r3, r0]
   18020:	cmp	r2, #0
   18024:	beq	18034 <__assert_fail@plt+0x6cfc>
   18028:	add	r0, r0, #1
   1802c:	add	r0, r3, r0
   18030:	bx	lr
   18034:	ldr	r0, [pc, #4]	; 18040 <__assert_fail@plt+0x6d08>
   18038:	add	r0, pc, r0
   1803c:	bx	lr
   18040:	andeq	r8, r0, lr, lsr #26
   18044:	push	{r3, r4, r5, lr}
   18048:	mov	r5, r1
   1804c:	ldr	r4, [r0, #8]
   18050:	cmp	r4, #0
   18054:	beq	18080 <__assert_fail@plt+0x6d48>
   18058:	ldrb	r3, [r4]
   1805c:	cmp	r3, #0
   18060:	bne	18078 <__assert_fail@plt+0x6d40>
   18064:	ldr	r0, [r4, #4]
   18068:	mov	r1, r5
   1806c:	bl	11098 <strcmp@plt>
   18070:	cmp	r0, #0
   18074:	beq	18080 <__assert_fail@plt+0x6d48>
   18078:	ldr	r4, [r4, #20]
   1807c:	b	18050 <__assert_fail@plt+0x6d18>
   18080:	mov	r0, r4
   18084:	pop	{r3, r4, r5, pc}
   18088:	push	{r4, r5, r6, r7, r8, r9, lr}
   1808c:	sub	sp, sp, #36	; 0x24
   18090:	mov	r9, r1
   18094:	mov	r8, r0
   18098:	mov	r7, r2
   1809c:	mov	r6, r3
   180a0:	bl	18044 <__assert_fail@plt+0x6d0c>
   180a4:	add	r4, sp, #20
   180a8:	subs	r1, r0, #0
   180ac:	beq	180d8 <__assert_fail@plt+0x6da0>
   180b0:	add	r5, r1, #8
   180b4:	str	r7, [sp]
   180b8:	str	r6, [sp, #4]
   180bc:	mov	r0, r4
   180c0:	ldm	r5, {r1, r2, r3}
   180c4:	bl	14f90 <__assert_fail@plt+0x3c58>
   180c8:	ldm	r4, {r0, r1, r2}
   180cc:	stm	r5, {r0, r1, r2}
   180d0:	add	sp, sp, #36	; 0x24
   180d4:	pop	{r4, r5, r6, r7, r8, r9, pc}
   180d8:	add	r5, sp, #8
   180dc:	mov	r0, r4
   180e0:	mov	r2, #12
   180e4:	bl	11218 <memset@plt>
   180e8:	str	r7, [sp]
   180ec:	str	r6, [sp, #4]
   180f0:	mov	r0, r5
   180f4:	ldm	r4, {r1, r2, r3}
   180f8:	bl	14f90 <__assert_fail@plt+0x3c58>
   180fc:	mov	r0, r9
   18100:	ldm	r5, {r1, r2, r3}
   18104:	bl	17948 <__assert_fail@plt+0x6610>
   18108:	mov	r1, r0
   1810c:	mov	r0, r8
   18110:	add	sp, sp, #36	; 0x24
   18114:	pop	{r4, r5, r6, r7, r8, r9, lr}
   18118:	b	17b3c <__assert_fail@plt+0x6804>
   1811c:	ldr	r3, [r0, #8]
   18120:	push	{r0, r1, r2, lr}
   18124:	cmp	r3, #4
   18128:	beq	18150 <__assert_fail@plt+0x6e18>
   1812c:	ldr	r3, [pc, #68]	; 18178 <__assert_fail@plt+0x6e40>
   18130:	movw	r2, #418	; 0x1a2
   18134:	ldr	r0, [pc, #64]	; 1817c <__assert_fail@plt+0x6e44>
   18138:	ldr	r1, [pc, #64]	; 18180 <__assert_fail@plt+0x6e48>
   1813c:	add	r3, pc, r3
   18140:	add	r0, pc, r0
   18144:	add	r3, r3, #56	; 0x38
   18148:	add	r1, pc, r1
   1814c:	bl	11338 <__assert_fail@plt>
   18150:	ldr	r3, [r0, #12]
   18154:	ldr	r3, [r3]
   18158:	ubfx	r2, r3, #8, #8
   1815c:	lsl	r2, r2, #16
   18160:	orr	r2, r2, r3, lsl #24
   18164:	orr	r0, r2, r3, lsr #24
   18168:	ubfx	r3, r3, #16, #8
   1816c:	orr	r0, r0, r3, lsl #8
   18170:	add	sp, sp, #12
   18174:	pop	{pc}		; (ldr pc, [sp], #4)
   18178:	andeq	r9, r0, r9, asr #13
   1817c:	ldrdeq	r9, [r0], -r1
   18180:	andeq	r9, r0, r2, ror #14
   18184:	ldr	r3, [r0, #8]
   18188:	push	{r0, r1, r2, lr}
   1818c:	cmp	r1, r3, lsr #2
   18190:	bls	181b8 <__assert_fail@plt+0x6e80>
   18194:	ldr	r3, [pc, #68]	; 181e0 <__assert_fail@plt+0x6ea8>
   18198:	mov	r2, #424	; 0x1a8
   1819c:	ldr	r0, [pc, #64]	; 181e4 <__assert_fail@plt+0x6eac>
   181a0:	ldr	r1, [pc, #64]	; 181e8 <__assert_fail@plt+0x6eb0>
   181a4:	add	r3, pc, r3
   181a8:	add	r0, pc, r0
   181ac:	add	r3, r3, #69	; 0x45
   181b0:	add	r1, pc, r1
   181b4:	bl	11338 <__assert_fail@plt>
   181b8:	ldr	r3, [r0, #12]
   181bc:	ldr	r3, [r3, r1, lsl #2]
   181c0:	ubfx	r2, r3, #8, #8
   181c4:	lsl	r2, r2, #16
   181c8:	orr	r2, r2, r3, lsl #24
   181cc:	orr	r0, r2, r3, lsr #24
   181d0:	ubfx	r3, r3, #16, #8
   181d4:	orr	r0, r0, r3, lsl #8
   181d8:	add	sp, sp, #12
   181dc:	pop	{pc}		; (ldr pc, [sp], #4)
   181e0:	andeq	r9, r0, r1, ror #12
   181e4:	andeq	r9, r0, r9, lsl #15
   181e8:	strdeq	r9, [r0], -sl
   181ec:	push	{r4, r5, r6, r7, r8, lr}
   181f0:	mov	r6, r2
   181f4:	str	r0, [r6]
   181f8:	mov	r7, r0
   181fc:	ldr	r4, [r0, #8]
   18200:	mov	r8, r1
   18204:	cmp	r4, #0
   18208:	beq	18254 <__assert_fail@plt+0x6f1c>
   1820c:	ldrb	r3, [r4]
   18210:	cmp	r3, #0
   18214:	ldreq	r5, [r4, #24]
   18218:	bne	1824c <__assert_fail@plt+0x6f14>
   1821c:	cmp	r5, #0
   18220:	beq	1824c <__assert_fail@plt+0x6f14>
   18224:	ldrb	r3, [r5]
   18228:	cmp	r3, #0
   1822c:	bne	18244 <__assert_fail@plt+0x6f0c>
   18230:	ldr	r0, [r5, #4]
   18234:	mov	r1, r8
   18238:	bl	11098 <strcmp@plt>
   1823c:	cmp	r0, #0
   18240:	beq	18290 <__assert_fail@plt+0x6f58>
   18244:	ldr	r5, [r5, #8]
   18248:	b	1821c <__assert_fail@plt+0x6ee4>
   1824c:	ldr	r4, [r4, #20]
   18250:	b	18204 <__assert_fail@plt+0x6ecc>
   18254:	ldr	r4, [r7, #12]
   18258:	cmp	r4, #0
   1825c:	beq	1828c <__assert_fail@plt+0x6f54>
   18260:	ldrb	r3, [r4]
   18264:	cmp	r3, #0
   18268:	bne	18284 <__assert_fail@plt+0x6f4c>
   1826c:	mov	r0, r4
   18270:	mov	r1, r8
   18274:	mov	r2, r6
   18278:	bl	181ec <__assert_fail@plt+0x6eb4>
   1827c:	cmp	r0, #0
   18280:	popne	{r4, r5, r6, r7, r8, pc}
   18284:	ldr	r4, [r4, #20]
   18288:	b	18258 <__assert_fail@plt+0x6f20>
   1828c:	str	r4, [r6]
   18290:	mov	r0, r4
   18294:	pop	{r4, r5, r6, r7, r8, pc}
   18298:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1829c:	mov	r6, r2
   182a0:	str	r0, [r6]
   182a4:	mov	r8, r0
   182a8:	ldr	r5, [r0, #8]
   182ac:	mov	r9, r1
   182b0:	mov	r7, r3
   182b4:	cmp	r5, #0
   182b8:	beq	18308 <__assert_fail@plt+0x6fd0>
   182bc:	ldrb	r3, [r5]
   182c0:	cmp	r3, #0
   182c4:	streq	r5, [r7]
   182c8:	ldreq	r4, [r5, #16]
   182cc:	bne	18300 <__assert_fail@plt+0x6fc8>
   182d0:	cmp	r4, #0
   182d4:	beq	18300 <__assert_fail@plt+0x6fc8>
   182d8:	ldr	r3, [r4]
   182dc:	cmp	r3, #2
   182e0:	bne	182f8 <__assert_fail@plt+0x6fc0>
   182e4:	ldr	r0, [r4, #8]
   182e8:	mov	r1, r9
   182ec:	bl	11098 <strcmp@plt>
   182f0:	cmp	r0, #0
   182f4:	beq	1834c <__assert_fail@plt+0x7014>
   182f8:	ldr	r4, [r4, #12]
   182fc:	b	182d0 <__assert_fail@plt+0x6f98>
   18300:	ldr	r5, [r5, #20]
   18304:	b	182b4 <__assert_fail@plt+0x6f7c>
   18308:	ldr	r4, [r8, #12]
   1830c:	cmp	r4, #0
   18310:	beq	18344 <__assert_fail@plt+0x700c>
   18314:	ldrb	r3, [r4]
   18318:	cmp	r3, #0
   1831c:	bne	1833c <__assert_fail@plt+0x7004>
   18320:	mov	r0, r4
   18324:	mov	r1, r9
   18328:	mov	r2, r6
   1832c:	mov	r3, r7
   18330:	bl	18298 <__assert_fail@plt+0x6f60>
   18334:	cmp	r0, #0
   18338:	popne	{r3, r4, r5, r6, r7, r8, r9, pc}
   1833c:	ldr	r4, [r4, #20]
   18340:	b	1830c <__assert_fail@plt+0x6fd4>
   18344:	str	r4, [r7]
   18348:	str	r4, [r6]
   1834c:	mov	r0, r4
   18350:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   18354:	push	{r3, r4, r5, lr}
   18358:	mov	r5, r1
   1835c:	ldr	r4, [r0, #12]
   18360:	cmp	r4, #0
   18364:	beq	18390 <__assert_fail@plt+0x7058>
   18368:	ldrb	r3, [r4]
   1836c:	cmp	r3, #0
   18370:	bne	18388 <__assert_fail@plt+0x7050>
   18374:	ldr	r0, [r4, #4]
   18378:	mov	r1, r5
   1837c:	bl	11098 <strcmp@plt>
   18380:	cmp	r0, #0
   18384:	beq	18390 <__assert_fail@plt+0x7058>
   18388:	ldr	r4, [r4, #20]
   1838c:	b	18360 <__assert_fail@plt+0x7028>
   18390:	mov	r0, r4
   18394:	pop	{r3, r4, r5, pc}
   18398:	push	{r3, r4, r5, lr}
   1839c:	mov	r5, r0
   183a0:	mov	r4, r1
   183a4:	bl	18354 <__assert_fail@plt+0x701c>
   183a8:	cmp	r0, #0
   183ac:	popne	{r3, r4, r5, pc}
   183b0:	mov	r0, r5
   183b4:	mov	r1, r4
   183b8:	bl	17cc4 <__assert_fail@plt+0x698c>
   183bc:	cmp	r0, #0
   183c0:	popne	{r3, r4, r5, pc}
   183c4:	ldr	r0, [pc, #8]	; 183d4 <__assert_fail@plt+0x709c>
   183c8:	mov	r1, r4
   183cc:	add	r0, pc, r0
   183d0:	bl	11344 <__assert_fail@plt+0xc>
   183d4:	andeq	r9, r0, r9, lsl #11
   183d8:	push	{r4, r5, r6, r7, r8, lr}
   183dc:	mov	r4, r0
   183e0:	cmp	r1, #0
   183e4:	bne	183fc <__assert_fail@plt+0x70c4>
   183e8:	ldrb	r3, [r4]
   183ec:	cmp	r3, #0
   183f0:	moveq	r0, r4
   183f4:	movne	r0, #0
   183f8:	pop	{r4, r5, r6, r7, r8, pc}
   183fc:	ldrb	r3, [r1]
   18400:	cmp	r3, #0
   18404:	beq	183e8 <__assert_fail@plt+0x70b0>
   18408:	mov	r5, r1
   1840c:	add	r1, r1, #1
   18410:	ldrb	r3, [r5]
   18414:	cmp	r3, #47	; 0x2f
   18418:	beq	18408 <__assert_fail@plt+0x70d0>
   1841c:	mov	r0, r5
   18420:	mov	r1, #47	; 0x2f
   18424:	bl	111e8 <strchr@plt>
   18428:	ldr	r4, [r4, #12]
   1842c:	rsb	r7, r5, r0
   18430:	mov	r6, r0
   18434:	cmp	r4, #0
   18438:	beq	184a0 <__assert_fail@plt+0x7168>
   1843c:	ldrb	r3, [r4]
   18440:	cmp	r3, #0
   18444:	bne	18498 <__assert_fail@plt+0x7160>
   18448:	cmp	r6, #0
   1844c:	beq	18484 <__assert_fail@plt+0x714c>
   18450:	ldr	r8, [r4, #4]
   18454:	mov	r0, r8
   18458:	bl	111dc <strlen@plt>
   1845c:	cmp	r0, r7
   18460:	bne	18498 <__assert_fail@plt+0x7160>
   18464:	mov	r0, r5
   18468:	mov	r1, r8
   1846c:	mov	r2, r7
   18470:	bl	11110 <memcmp@plt>
   18474:	cmp	r0, #0
   18478:	bne	18498 <__assert_fail@plt+0x7160>
   1847c:	add	r1, r6, #1
   18480:	b	183e0 <__assert_fail@plt+0x70a8>
   18484:	mov	r0, r5
   18488:	ldr	r1, [r4, #4]
   1848c:	bl	11098 <strcmp@plt>
   18490:	cmp	r0, #0
   18494:	beq	184a0 <__assert_fail@plt+0x7168>
   18498:	ldr	r4, [r4, #20]
   1849c:	b	18434 <__assert_fail@plt+0x70fc>
   184a0:	mov	r0, r4
   184a4:	pop	{r4, r5, r6, r7, r8, pc}
   184a8:	push	{r4, r5, r6, lr}
   184ac:	subs	r6, r1, #0
   184b0:	mov	r4, r0
   184b4:	beq	184c8 <__assert_fail@plt+0x7190>
   184b8:	ldrb	r3, [r6]
   184bc:	cmp	r3, #0
   184c0:	ldrne	r5, [r0, #44]	; 0x2c
   184c4:	bne	184fc <__assert_fail@plt+0x71c4>
   184c8:	ldr	r3, [pc, #140]	; 1855c <__assert_fail@plt+0x7224>
   184cc:	movw	r2, #525	; 0x20d
   184d0:	ldr	r0, [pc, #136]	; 18560 <__assert_fail@plt+0x7228>
   184d4:	ldr	r1, [pc, #136]	; 18564 <__assert_fail@plt+0x722c>
   184d8:	add	r3, pc, r3
   184dc:	add	r0, pc, r0
   184e0:	add	r3, r3, #84	; 0x54
   184e4:	add	r1, pc, r1
   184e8:	bl	11338 <__assert_fail@plt>
   184ec:	ldrb	r3, [r5]
   184f0:	cmp	r3, #0
   184f4:	beq	18508 <__assert_fail@plt+0x71d0>
   184f8:	ldr	r5, [r5, #8]
   184fc:	cmp	r5, #0
   18500:	bne	184ec <__assert_fail@plt+0x71b4>
   18504:	b	18520 <__assert_fail@plt+0x71e8>
   18508:	ldr	r0, [r5, #4]
   1850c:	mov	r1, r6
   18510:	bl	11098 <strcmp@plt>
   18514:	cmp	r0, #0
   18518:	bne	184f8 <__assert_fail@plt+0x71c0>
   1851c:	b	18554 <__assert_fail@plt+0x721c>
   18520:	ldr	r4, [r4, #12]
   18524:	cmp	r4, #0
   18528:	beq	18554 <__assert_fail@plt+0x721c>
   1852c:	ldrb	r3, [r4]
   18530:	cmp	r3, #0
   18534:	bne	1854c <__assert_fail@plt+0x7214>
   18538:	mov	r0, r4
   1853c:	mov	r1, r6
   18540:	bl	184a8 <__assert_fail@plt+0x7170>
   18544:	cmp	r0, #0
   18548:	popne	{r4, r5, r6, pc}
   1854c:	ldr	r4, [r4, #20]
   18550:	b	18524 <__assert_fail@plt+0x71ec>
   18554:	mov	r0, r4
   18558:	pop	{r4, r5, r6, pc}
   1855c:	andeq	r9, r0, sp, lsr #6
   18560:	muleq	r0, r8, r4
   18564:	andeq	r9, r0, r6, asr #7
   18568:	sub	r2, r1, #1
   1856c:	push	{r3, r4, r5, lr}
   18570:	cmn	r2, #3
   18574:	ldr	r3, [pc, #156]	; 18618 <__assert_fail@plt+0x72e0>
   18578:	mov	r5, r1
   1857c:	add	r3, pc, r3
   18580:	bls	185c4 <__assert_fail@plt+0x728c>
   18584:	ldr	r2, [pc, #144]	; 1861c <__assert_fail@plt+0x72e4>
   18588:	ldr	r3, [r3, r2]
   1858c:	ldr	r3, [r3]
   18590:	cmp	r3, #0
   18594:	beq	185a0 <__assert_fail@plt+0x7268>
   18598:	mov	r0, #0
   1859c:	pop	{r3, r4, r5, pc}
   185a0:	ldr	r3, [pc, #120]	; 18620 <__assert_fail@plt+0x72e8>
   185a4:	movw	r2, #545	; 0x221
   185a8:	ldr	r0, [pc, #116]	; 18624 <__assert_fail@plt+0x72ec>
   185ac:	ldr	r1, [pc, #116]	; 18628 <__assert_fail@plt+0x72f0>
   185b0:	add	r3, pc, r3
   185b4:	add	r0, pc, r0
   185b8:	add	r3, r3, #102	; 0x66
   185bc:	add	r1, pc, r1
   185c0:	bl	11338 <__assert_fail@plt>
   185c4:	ldr	r3, [r0, #32]
   185c8:	cmp	r3, r1
   185cc:	ldrne	r4, [r0, #12]
   185d0:	bne	185f4 <__assert_fail@plt+0x72bc>
   185d4:	ldrb	r3, [r0]
   185d8:	cmp	r3, #0
   185dc:	bne	18598 <__assert_fail@plt+0x7260>
   185e0:	pop	{r3, r4, r5, pc}
   185e4:	ldrb	r3, [r4]
   185e8:	cmp	r3, #0
   185ec:	beq	18600 <__assert_fail@plt+0x72c8>
   185f0:	ldr	r4, [r4, #20]
   185f4:	cmp	r4, #0
   185f8:	bne	185e4 <__assert_fail@plt+0x72ac>
   185fc:	b	18598 <__assert_fail@plt+0x7260>
   18600:	mov	r0, r4
   18604:	mov	r1, r5
   18608:	bl	18568 <__assert_fail@plt+0x7230>
   1860c:	cmp	r0, #0
   18610:	beq	185f0 <__assert_fail@plt+0x72b8>
   18614:	pop	{r3, r4, r5, pc}
   18618:	andeq	fp, r1, ip, ror sl
   1861c:	andeq	r0, r0, r8, asr #2
   18620:	andeq	r9, r0, r5, asr r2
   18624:	ldrdeq	r9, [r0], -sp
   18628:	andeq	r9, r0, lr, ror #5
   1862c:	push	{r3, r4, r5, lr}
   18630:	mov	r5, r0
   18634:	mov	r4, r1
   18638:	mov	r0, r1
   1863c:	ldr	r1, [pc, #56]	; 1867c <__assert_fail@plt+0x7344>
   18640:	add	r1, pc, r1
   18644:	bl	11098 <strcmp@plt>
   18648:	cmp	r0, #0
   1864c:	beq	18674 <__assert_fail@plt+0x733c>
   18650:	ldrb	r3, [r4]
   18654:	mov	r0, r5
   18658:	mov	r1, r4
   1865c:	cmp	r3, #47	; 0x2f
   18660:	bne	1866c <__assert_fail@plt+0x7334>
   18664:	pop	{r3, r4, r5, lr}
   18668:	b	183d8 <__assert_fail@plt+0x70a0>
   1866c:	pop	{r3, r4, r5, lr}
   18670:	b	184a8 <__assert_fail@plt+0x7170>
   18674:	mov	r0, r5
   18678:	pop	{r3, r4, r5, pc}
   1867c:	andeq	r8, r0, r1, ror #10
   18680:	push	{r3, r4, r5, r6, r7, lr}
   18684:	mov	r6, r0
   18688:	ldr	r4, [r1, #8]
   1868c:	mov	r7, r1
   18690:	cmp	r4, #0
   18694:	beq	186e8 <__assert_fail@plt+0x73b0>
   18698:	ldrb	r3, [r4]
   1869c:	cmp	r3, #0
   186a0:	ldreq	r5, [r4, #16]
   186a4:	bne	186e0 <__assert_fail@plt+0x73a8>
   186a8:	cmp	r5, #0
   186ac:	beq	186e0 <__assert_fail@plt+0x73a8>
   186b0:	ldr	r3, [r5]
   186b4:	cmp	r3, #0
   186b8:	bne	186d8 <__assert_fail@plt+0x73a0>
   186bc:	ldr	r0, [r6, #12]
   186c0:	ldr	r1, [r5, #8]
   186c4:	bl	1862c <__assert_fail@plt+0x72f4>
   186c8:	cmp	r0, #0
   186cc:	bne	186d8 <__assert_fail@plt+0x73a0>
   186d0:	mov	r0, #1
   186d4:	pop	{r3, r4, r5, r6, r7, pc}
   186d8:	ldr	r5, [r5, #12]
   186dc:	b	186a8 <__assert_fail@plt+0x7370>
   186e0:	ldr	r4, [r4, #20]
   186e4:	b	18690 <__assert_fail@plt+0x7358>
   186e8:	ldr	r4, [r7, #12]
   186ec:	cmp	r4, #0
   186f0:	beq	1871c <__assert_fail@plt+0x73e4>
   186f4:	ldrb	r3, [r4]
   186f8:	cmp	r3, #0
   186fc:	bne	18714 <__assert_fail@plt+0x73dc>
   18700:	mov	r0, r6
   18704:	mov	r1, r4
   18708:	bl	18680 <__assert_fail@plt+0x7348>
   1870c:	cmp	r0, #0
   18710:	bne	186d0 <__assert_fail@plt+0x7398>
   18714:	ldr	r4, [r4, #20]
   18718:	b	186ec <__assert_fail@plt+0x73b4>
   1871c:	mov	r0, r4
   18720:	pop	{r3, r4, r5, r6, r7, pc}
   18724:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18728:	sub	sp, sp, #28
   1872c:	ldr	fp, [pc, #344]	; 1888c <__assert_fail@plt+0x7554>
   18730:	add	sl, sp, #20
   18734:	ldr	r3, [r0, #12]
   18738:	mov	r6, r0
   1873c:	ldr	r4, [r2, #8]
   18740:	add	fp, pc, fp
   18744:	mov	r7, r1
   18748:	mov	r5, r2
   1874c:	str	r3, [sp, #12]
   18750:	cmp	r4, #0
   18754:	beq	18854 <__assert_fail@plt+0x751c>
   18758:	ldrb	r3, [r4]
   1875c:	cmp	r3, #0
   18760:	ldreq	r9, [r4, #16]
   18764:	bne	1884c <__assert_fail@plt+0x7514>
   18768:	cmp	r9, #0
   1876c:	beq	1884c <__assert_fail@plt+0x7514>
   18770:	ldr	r3, [r9]
   18774:	cmp	r3, #0
   18778:	bne	18844 <__assert_fail@plt+0x750c>
   1877c:	ldr	r0, [sp, #12]
   18780:	ldr	r1, [r9, #8]
   18784:	bl	1862c <__assert_fail@plt+0x72f4>
   18788:	cmp	r0, #0
   1878c:	bne	18844 <__assert_fail@plt+0x750c>
   18790:	ldr	r3, [r9]
   18794:	cmp	r3, #0
   18798:	beq	187c0 <__assert_fail@plt+0x7488>
   1879c:	ldr	r3, [pc, #236]	; 18890 <__assert_fail@plt+0x7558>
   187a0:	movw	r2, #874	; 0x36a
   187a4:	ldr	r0, [pc, #232]	; 18894 <__assert_fail@plt+0x755c>
   187a8:	ldr	r1, [pc, #232]	; 18898 <__assert_fail@plt+0x7560>
   187ac:	add	r3, pc, r3
   187b0:	add	r0, pc, r0
   187b4:	add	r3, r3, #122	; 0x7a
   187b8:	add	r1, pc, r1
   187bc:	bl	11338 <__assert_fail@plt>
   187c0:	ldr	r8, [r5, #24]
   187c4:	mov	r1, #58	; 0x3a
   187c8:	mov	r0, r8
   187cc:	bl	111e8 <strchr@plt>
   187d0:	cmp	r0, #0
   187d4:	bne	187f8 <__assert_fail@plt+0x74c0>
   187d8:	ldr	r3, [r4, #4]
   187dc:	mov	r1, #58	; 0x3a
   187e0:	mov	r0, r3
   187e4:	str	r3, [sp, #8]
   187e8:	bl	111e8 <strchr@plt>
   187ec:	ldr	r3, [sp, #8]
   187f0:	cmp	r0, #0
   187f4:	beq	18804 <__assert_fail@plt+0x74cc>
   187f8:	ldr	r0, [pc, #156]	; 1889c <__assert_fail@plt+0x7564>
   187fc:	add	r0, pc, r0
   18800:	bl	11344 <__assert_fail@plt+0xc>
   18804:	ldr	r2, [r9, #4]
   18808:	mov	r1, fp
   1880c:	mov	r0, sl
   18810:	str	r2, [sp]
   18814:	mov	r2, r8
   18818:	bl	19f48 <__assert_fail@plt+0x8c10>
   1881c:	ldr	r8, [sp, #20]
   18820:	mov	r0, r8
   18824:	bl	111dc <strlen@plt>
   18828:	ldr	r1, [r9, #8]
   1882c:	mov	r2, r8
   18830:	add	r3, r0, #1
   18834:	mov	r0, r7
   18838:	bl	18088 <__assert_fail@plt+0x6d50>
   1883c:	ldr	r0, [sp, #20]
   18840:	bl	110e0 <free@plt>
   18844:	ldr	r9, [r9, #12]
   18848:	b	18768 <__assert_fail@plt+0x7430>
   1884c:	ldr	r4, [r4, #20]
   18850:	b	18750 <__assert_fail@plt+0x7418>
   18854:	ldr	r4, [r5, #12]
   18858:	cmp	r4, #0
   1885c:	beq	18884 <__assert_fail@plt+0x754c>
   18860:	ldrb	r3, [r4]
   18864:	cmp	r3, #0
   18868:	bne	1887c <__assert_fail@plt+0x7544>
   1886c:	mov	r0, r6
   18870:	mov	r1, r7
   18874:	mov	r2, r4
   18878:	bl	18724 <__assert_fail@plt+0x73ec>
   1887c:	ldr	r4, [r4, #20]
   18880:	b	18858 <__assert_fail@plt+0x7520>
   18884:	add	sp, sp, #28
   18888:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1888c:	muleq	r0, sl, r2
   18890:	andeq	r9, r0, r9, asr r0
   18894:	strdeq	r9, [r0], -r1
   18898:	strdeq	r9, [r0], -r2
   1889c:			; <UNDEFINED> instruction: 0x000091bc
   188a0:	push	{r3, r4, r5, r6, r7, lr}
   188a4:	mov	r6, r0
   188a8:	ldr	r4, [r1, #8]
   188ac:	mov	r7, r1
   188b0:	cmp	r4, #0
   188b4:	beq	18908 <__assert_fail@plt+0x75d0>
   188b8:	ldrb	r3, [r4]
   188bc:	cmp	r3, #0
   188c0:	ldreq	r5, [r4, #16]
   188c4:	bne	18900 <__assert_fail@plt+0x75c8>
   188c8:	cmp	r5, #0
   188cc:	beq	18900 <__assert_fail@plt+0x75c8>
   188d0:	ldr	r3, [r5]
   188d4:	cmp	r3, #0
   188d8:	bne	188f8 <__assert_fail@plt+0x75c0>
   188dc:	ldr	r0, [r6, #12]
   188e0:	ldr	r1, [r5, #8]
   188e4:	bl	1862c <__assert_fail@plt+0x72f4>
   188e8:	cmp	r0, #0
   188ec:	beq	188f8 <__assert_fail@plt+0x75c0>
   188f0:	mov	r0, #1
   188f4:	pop	{r3, r4, r5, r6, r7, pc}
   188f8:	ldr	r5, [r5, #12]
   188fc:	b	188c8 <__assert_fail@plt+0x7590>
   18900:	ldr	r4, [r4, #20]
   18904:	b	188b0 <__assert_fail@plt+0x7578>
   18908:	ldr	r4, [r7, #12]
   1890c:	cmp	r4, #0
   18910:	beq	1893c <__assert_fail@plt+0x7604>
   18914:	ldrb	r3, [r4]
   18918:	cmp	r3, #0
   1891c:	bne	18934 <__assert_fail@plt+0x75fc>
   18920:	mov	r0, r6
   18924:	mov	r1, r4
   18928:	bl	188a0 <__assert_fail@plt+0x7568>
   1892c:	cmp	r0, #0
   18930:	bne	188f0 <__assert_fail@plt+0x75b8>
   18934:	ldr	r4, [r4, #20]
   18938:	b	1890c <__assert_fail@plt+0x75d4>
   1893c:	mov	r0, r4
   18940:	pop	{r3, r4, r5, r6, r7, pc}
   18944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18948:	sub	sp, sp, #28
   1894c:	ldr	r3, [r0, #12]
   18950:	mov	r6, r2
   18954:	ldr	r4, [r2, #8]
   18958:	stm	sp, {r0, r1}
   1895c:	str	r3, [sp, #8]
   18960:	add	r3, sp, #16
   18964:	str	r3, [sp, #12]
   18968:	cmp	r4, #0
   1896c:	beq	18a78 <__assert_fail@plt+0x7740>
   18970:	ldrb	r3, [r4]
   18974:	cmp	r3, #0
   18978:	ldreq	r5, [r4, #16]
   1897c:	bne	18a70 <__assert_fail@plt+0x7738>
   18980:	cmp	r5, #0
   18984:	beq	18a70 <__assert_fail@plt+0x7738>
   18988:	ldr	r8, [r5]
   1898c:	cmp	r8, #0
   18990:	bne	18a68 <__assert_fail@plt+0x7730>
   18994:	ldr	r0, [sp, #8]
   18998:	ldr	r1, [r5, #8]
   1899c:	bl	1862c <__assert_fail@plt+0x72f4>
   189a0:	cmp	r0, #0
   189a4:	beq	18a68 <__assert_fail@plt+0x7730>
   189a8:	mov	r3, r6
   189ac:	ldr	r3, [r3, #16]
   189b0:	add	r8, r8, #1
   189b4:	cmp	r3, #0
   189b8:	bne	189ac <__assert_fail@plt+0x7674>
   189bc:	lsl	r7, r8, #2
   189c0:	mov	r0, r7
   189c4:	bl	17720 <__assert_fail@plt+0x63e8>
   189c8:	mov	r2, r6
   189cc:	add	r7, r0, r7
   189d0:	mov	fp, r0
   189d4:	ldr	r1, [r2, #4]
   189d8:	str	r1, [r7, #-4]!
   189dc:	ldr	r2, [r2, #16]
   189e0:	cmp	r2, #0
   189e4:	bne	189d4 <__assert_fail@plt+0x769c>
   189e8:	ldr	r7, [sp, #4]
   189ec:	add	sl, fp, #4
   189f0:	mov	r9, #1
   189f4:	cmp	r9, r8
   189f8:	bge	18a28 <__assert_fail@plt+0x76f0>
   189fc:	mov	r0, r7
   18a00:	ldr	r1, [sl], #4
   18a04:	bl	18354 <__assert_fail@plt+0x701c>
   18a08:	cmp	r0, #0
   18a0c:	bne	18a1c <__assert_fail@plt+0x76e4>
   18a10:	mov	r0, r7
   18a14:	ldr	r1, [sl, #-4]
   18a18:	bl	17cc4 <__assert_fail@plt+0x698c>
   18a1c:	add	r9, r9, #1
   18a20:	mov	r7, r0
   18a24:	b	189f4 <__assert_fail@plt+0x76bc>
   18a28:	mov	r0, fp
   18a2c:	bl	110e0 <free@plt>
   18a30:	ldr	r3, [r5, #4]
   18a34:	mov	r0, r7
   18a38:	ldr	r1, [r4, #4]
   18a3c:	ubfx	r2, r3, #8, #8
   18a40:	str	r3, [sp, #20]
   18a44:	lsl	r2, r2, #16
   18a48:	orr	r2, r2, r3, lsl #24
   18a4c:	orr	r2, r2, r3, lsr #24
   18a50:	ubfx	r3, r3, #16, #8
   18a54:	orr	r3, r2, r3, lsl #8
   18a58:	add	r2, sp, #16
   18a5c:	str	r3, [sp, #16]
   18a60:	mov	r3, #4
   18a64:	bl	18088 <__assert_fail@plt+0x6d50>
   18a68:	ldr	r5, [r5, #12]
   18a6c:	b	18980 <__assert_fail@plt+0x7648>
   18a70:	ldr	r4, [r4, #20]
   18a74:	b	18968 <__assert_fail@plt+0x7630>
   18a78:	ldr	r4, [r6, #12]
   18a7c:	cmp	r4, #0
   18a80:	beq	18aa4 <__assert_fail@plt+0x776c>
   18a84:	ldrb	r3, [r4]
   18a88:	cmp	r3, #0
   18a8c:	bne	18a9c <__assert_fail@plt+0x7764>
   18a90:	ldm	sp, {r0, r1}
   18a94:	mov	r2, r4
   18a98:	bl	18944 <__assert_fail@plt+0x760c>
   18a9c:	ldr	r4, [r4, #20]
   18aa0:	b	18a7c <__assert_fail@plt+0x7744>
   18aa4:	add	sp, sp, #28
   18aa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18aac:	ldr	r3, [r1, #32]
   18ab0:	push	{r4, r5, r6, r7, r8, lr}
   18ab4:	sub	r2, r3, #1
   18ab8:	ldr	r7, [pc, #312]	; 18bf8 <__assert_fail@plt+0x78c0>
   18abc:	cmn	r2, #3
   18ac0:	mov	r6, r0
   18ac4:	sub	sp, sp, #56	; 0x38
   18ac8:	add	r7, pc, r7
   18acc:	mov	r4, r1
   18ad0:	movls	r0, r3
   18ad4:	bls	18bf0 <__assert_fail@plt+0x78b8>
   18ad8:	ldr	r5, [pc, #284]	; 18bfc <__assert_fail@plt+0x78c4>
   18adc:	add	r5, pc, r5
   18ae0:	mov	r0, r6
   18ae4:	ldr	r1, [r5]
   18ae8:	bl	18568 <__assert_fail@plt+0x7230>
   18aec:	ldr	r3, [r5]
   18af0:	cmp	r0, #0
   18af4:	addne	r3, r3, #1
   18af8:	strne	r3, [r5]
   18afc:	bne	18ae0 <__assert_fail@plt+0x77a8>
   18b00:	ldr	r8, [pc, #248]	; 18c00 <__assert_fail@plt+0x78c8>
   18b04:	mov	r0, r4
   18b08:	str	r3, [r4, #32]
   18b0c:	add	r8, pc, r8
   18b10:	mov	r1, r8
   18b14:	bl	18044 <__assert_fail@plt+0x6d0c>
   18b18:	subs	r1, r0, #0
   18b1c:	bne	18b74 <__assert_fail@plt+0x783c>
   18b20:	ldr	r3, [pc, #220]	; 18c04 <__assert_fail@plt+0x78cc>
   18b24:	ldr	r3, [r7, r3]
   18b28:	ldr	r3, [r3]
   18b2c:	tst	r3, #1
   18b30:	beq	18b74 <__assert_fail@plt+0x783c>
   18b34:	add	r6, sp, #8
   18b38:	mov	r2, #12
   18b3c:	mov	r0, r6
   18b40:	bl	11218 <memset@plt>
   18b44:	ldr	r3, [r5]
   18b48:	add	r5, sp, #32
   18b4c:	str	r3, [sp]
   18b50:	mov	r0, r5
   18b54:	ldm	r6, {r1, r2, r3}
   18b58:	bl	15270 <__assert_fail@plt+0x3f38>
   18b5c:	mov	r0, r8
   18b60:	ldm	r5, {r1, r2, r3}
   18b64:	bl	17948 <__assert_fail@plt+0x6610>
   18b68:	mov	r1, r0
   18b6c:	mov	r0, r4
   18b70:	bl	17b3c <__assert_fail@plt+0x6804>
   18b74:	ldr	r8, [pc, #140]	; 18c08 <__assert_fail@plt+0x78d0>
   18b78:	mov	r0, r4
   18b7c:	add	r8, pc, r8
   18b80:	mov	r1, r8
   18b84:	bl	18044 <__assert_fail@plt+0x6d0c>
   18b88:	subs	r1, r0, #0
   18b8c:	bne	18bec <__assert_fail@plt+0x78b4>
   18b90:	ldr	r3, [pc, #108]	; 18c04 <__assert_fail@plt+0x78cc>
   18b94:	ldr	r3, [r7, r3]
   18b98:	ldr	r3, [r3]
   18b9c:	tst	r3, #2
   18ba0:	beq	18bec <__assert_fail@plt+0x78b4>
   18ba4:	add	r6, sp, #20
   18ba8:	mov	r2, #12
   18bac:	add	r5, sp, #44	; 0x2c
   18bb0:	mov	r0, r6
   18bb4:	bl	11218 <memset@plt>
   18bb8:	ldr	r3, [pc, #76]	; 18c0c <__assert_fail@plt+0x78d4>
   18bbc:	mov	r0, r5
   18bc0:	add	r3, pc, r3
   18bc4:	ldr	r3, [r3]
   18bc8:	str	r3, [sp]
   18bcc:	ldm	r6, {r1, r2, r3}
   18bd0:	bl	15270 <__assert_fail@plt+0x3f38>
   18bd4:	mov	r0, r8
   18bd8:	ldm	r5, {r1, r2, r3}
   18bdc:	bl	17948 <__assert_fail@plt+0x6610>
   18be0:	mov	r1, r0
   18be4:	mov	r0, r4
   18be8:	bl	17b3c <__assert_fail@plt+0x6804>
   18bec:	ldr	r0, [r4, #32]
   18bf0:	add	sp, sp, #56	; 0x38
   18bf4:	pop	{r4, r5, r6, r7, r8, pc}
   18bf8:	andeq	fp, r1, r0, lsr r5
   18bfc:	ldrdeq	fp, [r1], -r8
   18c00:	andeq	r6, r0, r8, ror lr
   18c04:	andeq	r0, r0, r0, lsl #2
   18c08:	andeq	r6, r0, lr, lsl #28
   18c0c:	strdeq	fp, [r1], -r4
   18c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18c14:	mov	r8, r3
   18c18:	ldr	sl, [r2, #44]	; 0x2c
   18c1c:	sub	sp, sp, #36	; 0x24
   18c20:	ldr	r3, [r0, #12]
   18c24:	mov	r7, r0
   18c28:	ldr	r9, [pc, #256]	; 18d30 <__assert_fail@plt+0x79f8>
   18c2c:	cmp	sl, #0
   18c30:	mov	r4, r1
   18c34:	mov	r5, r2
   18c38:	add	r9, pc, r9
   18c3c:	str	r3, [sp, #12]
   18c40:	beq	18cf4 <__assert_fail@plt+0x79bc>
   18c44:	ldr	fp, [pc, #232]	; 18d34 <__assert_fail@plt+0x79fc>
   18c48:	add	r6, sp, #20
   18c4c:	add	fp, pc, fp
   18c50:	ldrb	r3, [sl]
   18c54:	cmp	r3, #0
   18c58:	bne	18cd4 <__assert_fail@plt+0x799c>
   18c5c:	mov	r0, r4
   18c60:	ldr	r1, [sl, #4]
   18c64:	bl	18044 <__assert_fail@plt+0x6d0c>
   18c68:	cmp	r0, #0
   18c6c:	beq	18c90 <__assert_fail@plt+0x7958>
   18c70:	ldr	r3, [pc, #192]	; 18d38 <__assert_fail@plt+0x7a00>
   18c74:	mov	r1, fp
   18c78:	ldr	r2, [sl, #4]
   18c7c:	ldr	r3, [r9, r3]
   18c80:	ldr	r0, [r3]
   18c84:	ldr	r3, [r4, #4]
   18c88:	bl	111f4 <fprintf@plt>
   18c8c:	b	18cd4 <__assert_fail@plt+0x799c>
   18c90:	ldr	r1, [r5, #24]
   18c94:	ldr	r3, [sl, #4]
   18c98:	mov	r0, r1
   18c9c:	str	r1, [sp, #8]
   18ca0:	str	r3, [sp, #4]
   18ca4:	bl	111dc <strlen@plt>
   18ca8:	ldr	r1, [sp, #8]
   18cac:	add	r2, r0, #1
   18cb0:	mov	r0, r6
   18cb4:	bl	14dc0 <__assert_fail@plt+0x3a88>
   18cb8:	ldr	r3, [sp, #4]
   18cbc:	mov	r0, r3
   18cc0:	ldm	r6, {r1, r2, r3}
   18cc4:	bl	17948 <__assert_fail@plt+0x6610>
   18cc8:	mov	r1, r0
   18ccc:	mov	r0, r4
   18cd0:	bl	17b3c <__assert_fail@plt+0x6804>
   18cd4:	ldr	sl, [sl, #8]
   18cd8:	cmp	sl, #0
   18cdc:	bne	18c50 <__assert_fail@plt+0x7918>
   18ce0:	cmp	r8, #0
   18ce4:	beq	18cf4 <__assert_fail@plt+0x79bc>
   18ce8:	ldr	r0, [sp, #12]
   18cec:	mov	r1, r5
   18cf0:	bl	18aac <__assert_fail@plt+0x7774>
   18cf4:	ldr	r5, [r5, #12]
   18cf8:	cmp	r5, #0
   18cfc:	beq	18d28 <__assert_fail@plt+0x79f0>
   18d00:	ldrb	r3, [r5]
   18d04:	cmp	r3, #0
   18d08:	bne	18d20 <__assert_fail@plt+0x79e8>
   18d0c:	mov	r0, r7
   18d10:	mov	r1, r4
   18d14:	mov	r2, r5
   18d18:	mov	r3, r8
   18d1c:	bl	18c10 <__assert_fail@plt+0x78d8>
   18d20:	ldr	r5, [r5, #20]
   18d24:	b	18cf8 <__assert_fail@plt+0x79c0>
   18d28:	add	sp, sp, #36	; 0x24
   18d2c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18d30:	andeq	fp, r1, r0, asr #7
   18d34:	muleq	r0, r7, sp
   18d38:	andeq	r0, r0, r4, lsr r1
   18d3c:	ldr	r1, [pc, #76]	; 18d90 <__assert_fail@plt+0x7a58>
   18d40:	push	{r3, lr}
   18d44:	add	r1, pc, r1
   18d48:	bl	183d8 <__assert_fail@plt+0x70a0>
   18d4c:	cmp	r0, #0
   18d50:	beq	18d88 <__assert_fail@plt+0x7a50>
   18d54:	ldr	r0, [r0, #12]
   18d58:	cmp	r0, #0
   18d5c:	beq	18d88 <__assert_fail@plt+0x7a50>
   18d60:	ldr	r1, [pc, #44]	; 18d94 <__assert_fail@plt+0x7a5c>
   18d64:	add	r1, pc, r1
   18d68:	bl	18044 <__assert_fail@plt+0x6d0c>
   18d6c:	subs	r3, r0, #0
   18d70:	beq	18d88 <__assert_fail@plt+0x7a50>
   18d74:	ldr	r3, [r3, #8]
   18d78:	cmp	r3, #4
   18d7c:	bne	18d88 <__assert_fail@plt+0x7a50>
   18d80:	pop	{r3, lr}
   18d84:	b	1811c <__assert_fail@plt+0x6de4>
   18d88:	mov	r0, #0
   18d8c:	pop	{r3, pc}
   18d90:	andeq	r8, r0, r7, asr #25
   18d94:	andeq	r7, r0, r8, lsl #18
   18d98:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   18d9c:	mov	r7, r0
   18da0:	ldr	r3, [r0, #4]
   18da4:	mov	r4, #0
   18da8:	cmp	r3, #0
   18dac:	addne	r4, r4, #1
   18db0:	ldrne	r3, [r3, #16]
   18db4:	bne	18da8 <__assert_fail@plt+0x7a70>
   18db8:	cmp	r4, #0
   18dbc:	beq	18e44 <__assert_fail@plt+0x7b0c>
   18dc0:	lsl	r8, r4, #2
   18dc4:	mov	r0, r8
   18dc8:	bl	17720 <__assert_fail@plt+0x63e8>
   18dcc:	ldr	r6, [r7, #4]
   18dd0:	sub	r9, r0, #4
   18dd4:	mov	r5, r0
   18dd8:	mov	r3, r9
   18ddc:	cmp	r6, #0
   18de0:	strne	r6, [r3, #4]!
   18de4:	ldrne	r6, [r6, #16]
   18de8:	bne	18ddc <__assert_fail@plt+0x7aa4>
   18dec:	ldr	r3, [pc, #92]	; 18e50 <__assert_fail@plt+0x7b18>
   18df0:	mov	r1, r4
   18df4:	mov	r0, r5
   18df8:	mov	r2, #4
   18dfc:	add	r3, pc, r3
   18e00:	sub	r4, r4, #1
   18e04:	bl	112cc <qsort@plt>
   18e08:	ldr	r3, [r5]
   18e0c:	str	r3, [r7, #4]
   18e10:	mov	r3, r9
   18e14:	cmp	r6, r4
   18e18:	ldrlt	r2, [r3, #4]!
   18e1c:	addlt	r6, r6, #1
   18e20:	ldrlt	r1, [r3, #4]
   18e24:	strlt	r1, [r2, #16]
   18e28:	blt	18e14 <__assert_fail@plt+0x7adc>
   18e2c:	add	r8, r5, r8
   18e30:	mov	r2, #0
   18e34:	mov	r0, r5
   18e38:	ldr	r3, [r8, #-4]
   18e3c:	str	r2, [r3, #16]
   18e40:	bl	110e0 <free@plt>
   18e44:	ldr	r0, [r7, #12]
   18e48:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   18e4c:	b	17740 <__assert_fail@plt+0x6408>
   18e50:			; <UNDEFINED> instruction: 0xffffe848
   18e54:	push	{r4, r5, r6, r7, r8, lr}
   18e58:	mov	r7, r1
   18e5c:	ldr	r5, [r0, #12]
   18e60:	mov	r4, r0
   18e64:	mov	r6, r2
   18e68:	mov	r1, r5
   18e6c:	bl	176a0 <__assert_fail@plt+0x6368>
   18e70:	cmp	r0, #0
   18e74:	popeq	{r4, r5, r6, r7, r8, pc}
   18e78:	mov	r1, r7
   18e7c:	mov	r0, r5
   18e80:	bl	18398 <__assert_fail@plt+0x7060>
   18e84:	ldr	r2, [r4, #12]
   18e88:	mov	r3, r6
   18e8c:	mov	r1, r0
   18e90:	mov	r0, r4
   18e94:	pop	{r4, r5, r6, r7, r8, lr}
   18e98:	b	18c10 <__assert_fail@plt+0x78d8>
   18e9c:	push	{r3, r4, r5, lr}
   18ea0:	mov	r5, r1
   18ea4:	ldr	r1, [r0, #12]
   18ea8:	mov	r4, r0
   18eac:	bl	18680 <__assert_fail@plt+0x7348>
   18eb0:	cmp	r0, #0
   18eb4:	popeq	{r3, r4, r5, pc}
   18eb8:	mov	r1, r5
   18ebc:	ldr	r0, [r4, #12]
   18ec0:	bl	18398 <__assert_fail@plt+0x7060>
   18ec4:	ldr	r2, [r4, #12]
   18ec8:	mov	r1, r0
   18ecc:	mov	r0, r4
   18ed0:	pop	{r3, r4, r5, lr}
   18ed4:	b	18724 <__assert_fail@plt+0x73ec>
   18ed8:	push	{r3, r4, r5, lr}
   18edc:	mov	r5, r1
   18ee0:	ldr	r1, [r0, #12]
   18ee4:	mov	r4, r0
   18ee8:	bl	188a0 <__assert_fail@plt+0x7568>
   18eec:	cmp	r0, #0
   18ef0:	popeq	{r3, r4, r5, pc}
   18ef4:	mov	r1, r5
   18ef8:	ldr	r0, [r4, #12]
   18efc:	bl	18398 <__assert_fail@plt+0x7060>
   18f00:	ldr	r2, [r4, #12]
   18f04:	mov	r1, r0
   18f08:	mov	r0, r4
   18f0c:	pop	{r3, r4, r5, lr}
   18f10:	b	18944 <__assert_fail@plt+0x760c>
   18f14:	cmp	r0, #0
   18f18:	mov	r3, r1
   18f1c:	push	{r4, r5, r6, lr}
   18f20:	mov	r6, r2
   18f24:	beq	18f34 <__assert_fail@plt+0x7bfc>
   18f28:	ldrb	r2, [r1]
   18f2c:	cmp	r2, #47	; 0x2f
   18f30:	bne	18f40 <__assert_fail@plt+0x7c08>
   18f34:	mov	r0, r3
   18f38:	bl	19f20 <__assert_fail@plt+0x8be8>
   18f3c:	b	18f44 <__assert_fail@plt+0x7c0c>
   18f40:	bl	19fe8 <__assert_fail@plt+0x8cb0>
   18f44:	ldr	r1, [pc, #44]	; 18f78 <__assert_fail@plt+0x7c40>
   18f48:	mov	r4, r0
   18f4c:	add	r1, pc, r1
   18f50:	bl	110bc <fopen@plt>
   18f54:	cmp	r0, #0
   18f58:	mov	r5, r0
   18f5c:	str	r0, [r6]
   18f60:	bne	18f70 <__assert_fail@plt+0x7c38>
   18f64:	mov	r0, r4
   18f68:	mov	r4, r5
   18f6c:	bl	110e0 <free@plt>
   18f70:	mov	r0, r4
   18f74:	pop	{r4, r5, r6, pc}
   18f78:	muleq	r0, r9, r8
   18f7c:	push	{r3, lr}
   18f80:	bl	11170 <malloc@plt>
   18f84:	cmp	r0, #0
   18f88:	popne	{r3, pc}
   18f8c:	ldr	r0, [pc, #4]	; 18f98 <__assert_fail@plt+0x7c60>
   18f90:	add	r0, pc, r0
   18f94:	bl	11398 <__assert_fail@plt+0x60>
   18f98:	andeq	r7, r0, sp, asr sl
   18f9c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   18fa0:	mov	r8, r1
   18fa4:	ldr	r1, [pc, #256]	; 190ac <__assert_fail@plt+0x7d74>
   18fa8:	mov	r7, r0
   18fac:	ldr	r5, [pc, #252]	; 190b0 <__assert_fail@plt+0x7d78>
   18fb0:	add	r1, pc, r1
   18fb4:	bl	11098 <strcmp@plt>
   18fb8:	add	r5, pc, r5
   18fbc:	cmp	r0, #0
   18fc0:	bne	18fe8 <__assert_fail@plt+0x7cb0>
   18fc4:	ldr	r3, [pc, #232]	; 190b4 <__assert_fail@plt+0x7d7c>
   18fc8:	ldr	r0, [pc, #232]	; 190b8 <__assert_fail@plt+0x7d80>
   18fcc:	ldr	r3, [r5, r3]
   18fd0:	add	r0, pc, r0
   18fd4:	ldr	r3, [r3]
   18fd8:	str	r3, [sp, #4]
   18fdc:	bl	19f20 <__assert_fail@plt+0x8be8>
   18fe0:	mov	r4, r0
   18fe4:	b	19048 <__assert_fail@plt+0x7d10>
   18fe8:	ldr	r3, [pc, #204]	; 190bc <__assert_fail@plt+0x7d84>
   18fec:	add	r9, sp, #4
   18ff0:	mov	r1, r7
   18ff4:	mov	r2, r9
   18ff8:	ldr	r3, [r5, r3]
   18ffc:	ldr	r0, [r3]
   19000:	cmp	r0, #0
   19004:	ldrne	r0, [r0, #8]
   19008:	bl	18f14 <__assert_fail@plt+0x7bdc>
   1900c:	ldr	r3, [pc, #172]	; 190c0 <__assert_fail@plt+0x7d88>
   19010:	ldr	r6, [pc, r3]
   19014:	mov	r4, r0
   19018:	ldr	r3, [sp, #4]
   1901c:	cmp	r3, #0
   19020:	bne	19048 <__assert_fail@plt+0x7d10>
   19024:	cmp	r6, #0
   19028:	beq	1908c <__assert_fail@plt+0x7d54>
   1902c:	ldr	r0, [r6, #4]
   19030:	mov	r1, r7
   19034:	mov	r2, r9
   19038:	bl	18f14 <__assert_fail@plt+0x7bdc>
   1903c:	ldr	r6, [r6]
   19040:	mov	r4, r0
   19044:	b	19018 <__assert_fail@plt+0x7ce0>
   19048:	ldr	r3, [pc, #116]	; 190c4 <__assert_fail@plt+0x7d8c>
   1904c:	ldr	r3, [r5, r3]
   19050:	ldr	r0, [r3]
   19054:	cmp	r0, #0
   19058:	beq	1906c <__assert_fail@plt+0x7d34>
   1905c:	ldr	r1, [pc, #100]	; 190c8 <__assert_fail@plt+0x7d90>
   19060:	mov	r2, r4
   19064:	add	r1, pc, r1
   19068:	bl	111f4 <fprintf@plt>
   1906c:	cmp	r8, #0
   19070:	strne	r4, [r8]
   19074:	bne	19080 <__assert_fail@plt+0x7d48>
   19078:	mov	r0, r4
   1907c:	bl	110e0 <free@plt>
   19080:	ldr	r0, [sp, #4]
   19084:	add	sp, sp, #12
   19088:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1908c:	bl	11200 <__errno_location@plt>
   19090:	ldr	r0, [r0]
   19094:	bl	11188 <strerror@plt>
   19098:	mov	r1, r7
   1909c:	mov	r2, r0
   190a0:	ldr	r0, [pc, #36]	; 190cc <__assert_fail@plt+0x7d94>
   190a4:	add	r0, pc, r0
   190a8:	bl	11398 <__assert_fail@plt+0x60>
   190ac:	muleq	r0, r9, r8
   190b0:	andeq	fp, r1, r0, asr #32
   190b4:	andeq	r0, r0, ip, asr #2
   190b8:	andeq	r8, r0, sp, asr #20
   190bc:	andeq	r0, r0, r8, lsr #2
   190c0:			; <UNDEFINED> instruction: 0x0001bab8
   190c4:	andeq	r0, r0, r4, lsr #2
   190c8:			; <UNDEFINED> instruction: 0x0000a4bf
   190cc:	andeq	r8, r0, r1, lsl #19
   190d0:	ldr	r2, [pc, #184]	; 19190 <__assert_fail@plt+0x7e58>
   190d4:	push	{r3, r4, r5, r6, r7, lr}
   190d8:	add	r2, pc, r2
   190dc:	ldr	r7, [pc, #176]	; 19194 <__assert_fail@plt+0x7e5c>
   190e0:	mov	r5, r0
   190e4:	ldr	r3, [r2, #4]
   190e8:	add	r7, pc, r7
   190ec:	cmp	r3, #99	; 0x63
   190f0:	add	r1, r3, #1
   190f4:	str	r1, [r2, #4]
   190f8:	ble	19108 <__assert_fail@plt+0x7dd0>
   190fc:	ldr	r0, [pc, #148]	; 19198 <__assert_fail@plt+0x7e60>
   19100:	add	r0, pc, r0
   19104:	bl	11398 <__assert_fail@plt+0x60>
   19108:	mov	r0, #24
   1910c:	bl	18f7c <__assert_fail@plt+0x7c44>
   19110:	mov	r4, r0
   19114:	mov	r0, r5
   19118:	add	r1, r4, #4
   1911c:	bl	18f9c <__assert_fail@plt+0x7c64>
   19120:	ldr	r6, [r4, #4]
   19124:	mov	r1, #47	; 0x2f
   19128:	str	r0, [r4]
   1912c:	mov	r0, r6
   19130:	bl	11284 <strrchr@plt>
   19134:	cmp	r0, #0
   19138:	beq	19164 <__assert_fail@plt+0x7e2c>
   1913c:	rsb	r5, r6, r0
   19140:	add	r0, r5, #1
   19144:	bl	18f7c <__assert_fail@plt+0x7c44>
   19148:	mov	r2, r5
   1914c:	mov	r1, r6
   19150:	bl	110f8 <memcpy@plt>
   19154:	mov	r2, #0
   19158:	mov	r3, r0
   1915c:	strb	r2, [r0, r5]
   19160:	b	19168 <__assert_fail@plt+0x7e30>
   19164:	mov	r3, r0
   19168:	str	r3, [r4, #8]
   1916c:	ldr	r3, [pc, #40]	; 1919c <__assert_fail@plt+0x7e64>
   19170:	ldr	r3, [r7, r3]
   19174:	ldr	r2, [r3]
   19178:	str	r4, [r3]
   1917c:	str	r2, [r4, #20]
   19180:	mov	r2, #1
   19184:	str	r2, [r4, #12]
   19188:	str	r2, [r4, #16]
   1918c:	pop	{r3, r4, r5, r6, r7, pc}
   19190:	strdeq	fp, [r1], -r0
   19194:	andeq	sl, r1, r0, lsl pc
   19198:	andeq	r8, r0, sp, lsr r9
   1919c:	andeq	r0, r0, r8, lsr #2
   191a0:	push	{r3, r4, r5, lr}
   191a4:	ldr	r3, [pc, #128]	; 1922c <__assert_fail@plt+0x7ef4>
   191a8:	ldr	r2, [pc, #128]	; 19230 <__assert_fail@plt+0x7ef8>
   191ac:	add	r3, pc, r3
   191b0:	ldr	r5, [r3, r2]
   191b4:	ldr	r4, [r5]
   191b8:	cmp	r4, #0
   191bc:	bne	191e0 <__assert_fail@plt+0x7ea8>
   191c0:	ldr	r0, [pc, #108]	; 19234 <__assert_fail@plt+0x7efc>
   191c4:	mov	r2, #166	; 0xa6
   191c8:	ldr	r1, [pc, #104]	; 19238 <__assert_fail@plt+0x7f00>
   191cc:	ldr	r3, [pc, #104]	; 1923c <__assert_fail@plt+0x7f04>
   191d0:	add	r0, pc, r0
   191d4:	add	r1, pc, r1
   191d8:	add	r3, pc, r3
   191dc:	bl	11338 <__assert_fail@plt>
   191e0:	ldr	r3, [r4, #20]
   191e4:	ldr	r0, [r4]
   191e8:	str	r3, [r5]
   191ec:	bl	11260 <fclose@plt>
   191f0:	cmp	r0, #0
   191f4:	beq	1921c <__assert_fail@plt+0x7ee4>
   191f8:	bl	11200 <__errno_location@plt>
   191fc:	ldr	r4, [r4, #4]
   19200:	ldr	r0, [r0]
   19204:	bl	11188 <strerror@plt>
   19208:	mov	r1, r4
   1920c:	mov	r2, r0
   19210:	ldr	r0, [pc, #40]	; 19240 <__assert_fail@plt+0x7f08>
   19214:	add	r0, pc, r0
   19218:	bl	11398 <__assert_fail@plt+0x60>
   1921c:	ldr	r0, [r5]
   19220:	adds	r0, r0, #0
   19224:	movne	r0, #1
   19228:	pop	{r3, r4, r5, pc}
   1922c:	andeq	sl, r1, ip, asr #28
   19230:	andeq	r0, r0, r8, lsr #2
   19234:	andeq	r8, r0, r8, lsl #17
   19238:	andeq	r8, r0, ip, lsl #17
   1923c:	andeq	r8, r0, r9, lsr r8
   19240:	andeq	r8, r0, r5, asr r8
   19244:	push	{r3, r4, r5, lr}
   19248:	mov	r5, r0
   1924c:	mov	r0, #8
   19250:	bl	18f7c <__assert_fail@plt+0x7c44>
   19254:	mov	r3, #0
   19258:	mov	r4, r0
   1925c:	str	r3, [r0]
   19260:	mov	r0, r5
   19264:	bl	19f20 <__assert_fail@plt+0x8be8>
   19268:	ldr	r3, [pc, #36]	; 19294 <__assert_fail@plt+0x7f5c>
   1926c:	add	r3, pc, r3
   19270:	ldr	r2, [r3, #8]
   19274:	cmp	r2, #0
   19278:	streq	r4, [r3]
   1927c:	ldr	r3, [pc, #20]	; 19298 <__assert_fail@plt+0x7f60>
   19280:	add	r3, pc, r3
   19284:	str	r4, [r3, #8]
   19288:	str	r0, [r4, #4]
   1928c:	strne	r4, [r2]
   19290:	pop	{r3, r4, r5, pc}
   19294:	andeq	fp, r1, ip, asr r8
   19298:	andeq	fp, r1, r8, asr #16
   1929c:	ldr	r3, [pc, #140]	; 19330 <__assert_fail@plt+0x7ff8>
   192a0:	ldr	ip, [pc, #140]	; 19334 <__assert_fail@plt+0x7ffc>
   192a4:	add	r3, pc, r3
   192a8:	push	{r4, r5, r6, lr}
   192ac:	mov	r6, #1
   192b0:	ldr	r4, [r3, ip]
   192b4:	ldr	r3, [r4]
   192b8:	ldr	ip, [r3, #12]
   192bc:	str	r3, [r0, #16]
   192c0:	ldr	r3, [r3, #16]
   192c4:	str	ip, [r0]
   192c8:	mov	ip, #0
   192cc:	str	r3, [r0, #4]
   192d0:	ldr	r3, [r4]
   192d4:	cmp	ip, r2
   192d8:	bge	19318 <__assert_fail@plt+0x7fe0>
   192dc:	ldrb	r5, [r1, ip]
   192e0:	cmp	r5, #10
   192e4:	ldreq	r5, [r3, #12]
   192e8:	streq	r6, [r3, #16]
   192ec:	addeq	r5, r5, #1
   192f0:	streq	r5, [r3, #12]
   192f4:	beq	19310 <__assert_fail@plt+0x7fd8>
   192f8:	cmp	r5, #9
   192fc:	ldr	r5, [r3, #16]
   19300:	addeq	r5, r5, #7
   19304:	addne	r5, r5, #1
   19308:	biceq	r5, r5, #7
   1930c:	str	r5, [r3, #16]
   19310:	add	ip, ip, #1
   19314:	b	192d4 <__assert_fail@plt+0x7f9c>
   19318:	ldr	r3, [r4]
   1931c:	ldr	r2, [r3, #12]
   19320:	ldr	r3, [r3, #16]
   19324:	str	r2, [r0, #8]
   19328:	str	r3, [r0, #12]
   1932c:	pop	{r4, r5, r6, pc}
   19330:	andeq	sl, r1, r4, asr sp
   19334:	andeq	r0, r0, r8, lsr #2
   19338:	push	{r4, lr}
   1933c:	mov	r4, r0
   19340:	mov	r0, #20
   19344:	bl	18f7c <__assert_fail@plt+0x7c44>
   19348:	add	r1, r4, #20
   1934c:	mov	r3, r4
   19350:	mov	r2, r0
   19354:	ldr	ip, [r3], #4
   19358:	cmp	r3, r1
   1935c:	str	ip, [r2], #4
   19360:	bne	19354 <__assert_fail@plt+0x801c>
   19364:	pop	{r4, pc}
   19368:	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   1936c:	mov	r1, r0
   19370:	ldr	r3, [r0, #16]
   19374:	cmp	r3, #0
   19378:	beq	19390 <__assert_fail@plt+0x8058>
   1937c:	ldr	r2, [r3, #4]
   19380:	cmp	r2, #0
   19384:	ldreq	r2, [pc, #124]	; 19408 <__assert_fail@plt+0x80d0>
   19388:	addeq	r2, pc, r2
   1938c:	b	19398 <__assert_fail@plt+0x8060>
   19390:	ldr	r2, [pc, #116]	; 1940c <__assert_fail@plt+0x80d4>
   19394:	add	r2, pc, r2
   19398:	ldr	r3, [r1]
   1939c:	add	r0, sp, #20
   193a0:	ldr	lr, [r1, #8]
   193a4:	ldr	ip, [r1, #4]
   193a8:	cmp	r3, lr
   193ac:	beq	193cc <__assert_fail@plt+0x8094>
   193b0:	stm	sp, {ip, lr}
   193b4:	ldr	r1, [r1, #12]
   193b8:	str	r1, [sp, #8]
   193bc:	ldr	r1, [pc, #76]	; 19410 <__assert_fail@plt+0x80d8>
   193c0:	add	r1, pc, r1
   193c4:	bl	19f48 <__assert_fail@plt+0x8c10>
   193c8:	b	193fc <__assert_fail@plt+0x80c4>
   193cc:	ldr	r1, [r1, #12]
   193d0:	str	ip, [sp]
   193d4:	cmp	ip, r1
   193d8:	beq	193f0 <__assert_fail@plt+0x80b8>
   193dc:	str	r1, [sp, #4]
   193e0:	ldr	r1, [pc, #44]	; 19414 <__assert_fail@plt+0x80dc>
   193e4:	add	r1, pc, r1
   193e8:	bl	19f48 <__assert_fail@plt+0x8c10>
   193ec:	b	193fc <__assert_fail@plt+0x80c4>
   193f0:	ldr	r1, [pc, #32]	; 19418 <__assert_fail@plt+0x80e0>
   193f4:	add	r1, pc, r1
   193f8:	bl	19f48 <__assert_fail@plt+0x8c10>
   193fc:	ldr	r0, [sp, #20]
   19400:	add	sp, sp, #28
   19404:	pop	{pc}		; (ldr pc, [sp], #4)
   19408:	strdeq	r8, [r0], -r9
   1940c:	andeq	r8, r0, sp, ror #13
   19410:	andeq	r8, r0, fp, asr #13
   19414:			; <UNDEFINED> instruction: 0x000086b6
   19418:			; <UNDEFINED> instruction: 0x000086b2
   1941c:	push	{r4, r5, r6, r7, r8, lr}
   19420:	mov	r8, r1
   19424:	mov	r7, r2
   19428:	mov	r6, r3
   1942c:	bl	19368 <__assert_fail@plt+0x8030>
   19430:	ldr	r4, [pc, #76]	; 19484 <__assert_fail@plt+0x814c>
   19434:	ldr	r3, [pc, #76]	; 19488 <__assert_fail@plt+0x8150>
   19438:	mov	r2, r8
   1943c:	add	r4, pc, r4
   19440:	ldr	r1, [pc, #68]	; 1948c <__assert_fail@plt+0x8154>
   19444:	ldr	r4, [r4, r3]
   19448:	add	r1, pc, r1
   1944c:	mov	r5, r0
   19450:	ldr	r0, [r4]
   19454:	mov	r3, r5
   19458:	bl	111f4 <fprintf@plt>
   1945c:	mov	r1, r7
   19460:	mov	r2, r6
   19464:	ldr	r0, [r4]
   19468:	bl	11290 <vfprintf@plt>
   1946c:	ldr	r1, [r4]
   19470:	mov	r0, #10
   19474:	bl	1129c <fputc@plt>
   19478:	mov	r0, r5
   1947c:	pop	{r4, r5, r6, r7, r8, lr}
   19480:	b	110e0 <free@plt>
   19484:			; <UNDEFINED> instruction: 0x0001abbc
   19488:	andeq	r0, r0, r4, lsr r1
   1948c:	andeq	r8, r0, r7, ror #12
   19490:	push	{r2, r3}
   19494:	push	{r0, r1, r2, lr}
   19498:	add	r3, sp, #20
   1949c:	ldr	r2, [sp, #16]
   194a0:	str	r3, [sp, #4]
   194a4:	bl	1941c <__assert_fail@plt+0x80e4>
   194a8:	add	sp, sp, #12
   194ac:	pop	{lr}		; (ldr lr, [sp], #4)
   194b0:	add	sp, sp, #8
   194b4:	bx	lr
   194b8:	ldr	r3, [pc, #24]	; 194d8 <__assert_fail@plt+0x81a0>
   194bc:	ldr	r2, [pc, #24]	; 194dc <__assert_fail@plt+0x81a4>
   194c0:	add	r3, pc, r3
   194c4:	ldr	r3, [r3, r2]
   194c8:	ldr	r3, [r3]
   194cc:	str	r0, [r3, #4]
   194d0:	str	r1, [r3, #12]
   194d4:	bx	lr
   194d8:	andeq	sl, r1, r8, lsr fp
   194dc:	andeq	r0, r0, r8, lsr #2
   194e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   194e4:	sub	sp, sp, #36	; 0x24
   194e8:	mov	r4, r0
   194ec:	mov	r5, #0
   194f0:	str	r1, [sp, #12]
   194f4:	str	r2, [sp, #16]
   194f8:	ldr	r3, [sp, #16]
   194fc:	cmp	r5, r3
   19500:	bge	19518 <__assert_fail@plt+0x81e0>
   19504:	mov	r0, #9
   19508:	mov	r1, r4
   1950c:	bl	1129c <fputc@plt>
   19510:	add	r5, r5, #1
   19514:	b	194f8 <__assert_fail@plt+0x81c0>
   19518:	ldr	r3, [sp, #12]
   1951c:	ldr	r6, [pc, #2000]	; 19cf4 <__assert_fail@plt+0x89bc>
   19520:	ldr	r5, [r3, #44]	; 0x2c
   19524:	add	r6, pc, r6
   19528:	cmp	r5, #0
   1952c:	beq	19554 <__assert_fail@plt+0x821c>
   19530:	ldrb	r3, [r5]
   19534:	cmp	r3, #0
   19538:	bne	1954c <__assert_fail@plt+0x8214>
   1953c:	mov	r0, r4
   19540:	mov	r1, r6
   19544:	ldr	r2, [r5, #4]
   19548:	bl	111f4 <fprintf@plt>
   1954c:	ldr	r5, [r5, #8]
   19550:	b	19528 <__assert_fail@plt+0x81f0>
   19554:	ldr	r3, [sp, #12]
   19558:	ldr	r2, [r3, #4]
   1955c:	cmp	r2, #0
   19560:	beq	19584 <__assert_fail@plt+0x824c>
   19564:	ldrb	r3, [r2]
   19568:	cmp	r3, #0
   1956c:	beq	19584 <__assert_fail@plt+0x824c>
   19570:	ldr	r1, [pc, #1920]	; 19cf8 <__assert_fail@plt+0x89c0>
   19574:	mov	r0, r4
   19578:	add	r1, pc, r1
   1957c:	bl	111f4 <fprintf@plt>
   19580:	b	19594 <__assert_fail@plt+0x825c>
   19584:	ldr	r0, [pc, #1904]	; 19cfc <__assert_fail@plt+0x89c4>
   19588:	mov	r1, r4
   1958c:	add	r0, pc, r0
   19590:	bl	112f0 <fputs@plt>
   19594:	ldr	r3, [sp, #12]
   19598:	ldr	r5, [r3, #8]
   1959c:	ldr	r3, [pc, #1884]	; 19d00 <__assert_fail@plt+0x89c8>
   195a0:	add	r3, pc, r3
   195a4:	str	r3, [sp, #20]
   195a8:	cmp	r5, #0
   195ac:	beq	19c74 <__assert_fail@plt+0x893c>
   195b0:	ldrb	r6, [r5]
   195b4:	cmp	r6, #0
   195b8:	bne	19c6c <__assert_fail@plt+0x8934>
   195bc:	ldr	r3, [sp, #16]
   195c0:	cmp	r3, r6
   195c4:	blt	195dc <__assert_fail@plt+0x82a4>
   195c8:	mov	r0, #9
   195cc:	mov	r1, r4
   195d0:	bl	1129c <fputc@plt>
   195d4:	add	r6, r6, #1
   195d8:	b	195bc <__assert_fail@plt+0x8284>
   195dc:	ldr	r6, [pc, #1824]	; 19d04 <__assert_fail@plt+0x89cc>
   195e0:	ldr	r8, [r5, #24]
   195e4:	add	r6, pc, r6
   195e8:	cmp	r8, #0
   195ec:	beq	19614 <__assert_fail@plt+0x82dc>
   195f0:	ldrb	r3, [r8]
   195f4:	cmp	r3, #0
   195f8:	bne	1960c <__assert_fail@plt+0x82d4>
   195fc:	mov	r0, r4
   19600:	mov	r1, r6
   19604:	ldr	r2, [r8, #4]
   19608:	bl	111f4 <fprintf@plt>
   1960c:	ldr	r8, [r8, #8]
   19610:	b	195e8 <__assert_fail@plt+0x82b0>
   19614:	ldr	r0, [r5, #4]
   19618:	mov	r1, r4
   1961c:	bl	112f0 <fputs@plt>
   19620:	ldr	r9, [r5, #8]
   19624:	ldr	r6, [r5, #12]
   19628:	cmp	r9, #0
   1962c:	ldr	r7, [r5, #16]
   19630:	beq	19770 <__assert_fail@plt+0x8438>
   19634:	ldr	r3, [pc, #1740]	; 19d08 <__assert_fail@plt+0x89d0>
   19638:	mov	sl, r8
   1963c:	mov	fp, r8
   19640:	add	r3, pc, r3
   19644:	str	r3, [sp, #8]
   19648:	b	196a4 <__assert_fail@plt+0x836c>
   1964c:	ldrb	r3, [r6, r8]
   19650:	str	r3, [sp, #4]
   19654:	bl	111b8 <__ctype_b_loc@plt>
   19658:	ldr	r3, [sp, #4]
   1965c:	lsl	r1, r3, #1
   19660:	ldr	r0, [r0]
   19664:	ldrh	r1, [r0, r1]
   19668:	tst	r1, #16384	; 0x4000
   1966c:	bne	19784 <__assert_fail@plt+0x844c>
   19670:	cmp	r3, #0
   19674:	beq	19784 <__assert_fail@plt+0x844c>
   19678:	mov	r1, r3
   1967c:	ldr	r0, [sp, #8]
   19680:	bl	111e8 <strchr@plt>
   19684:	ldr	r3, [sp, #4]
   19688:	adds	r0, r0, #0
   1968c:	movne	r0, #1
   19690:	cmp	r0, #0
   19694:	add	r8, r8, #1
   19698:	addeq	fp, fp, #1
   1969c:	cmp	r3, #0
   196a0:	addeq	sl, sl, #1
   196a4:	cmp	r8, r9
   196a8:	blt	1964c <__assert_fail@plt+0x8314>
   196ac:	mov	r8, #0
   196b0:	mov	r3, r8
   196b4:	cmp	r7, #0
   196b8:	bne	1978c <__assert_fail@plt+0x8454>
   196bc:	ldr	r0, [pc, #1608]	; 19d0c <__assert_fail@plt+0x89d4>
   196c0:	add	r6, r6, r9
   196c4:	mov	r1, r4
   196c8:	str	r3, [sp, #4]
   196cc:	add	r0, pc, r0
   196d0:	bl	112f0 <fputs@plt>
   196d4:	ldrb	r2, [r6, #-1]
   196d8:	ldr	r7, [r5, #8]
   196dc:	cmp	r2, #0
   196e0:	ldr	r6, [r5, #12]
   196e4:	ldr	r2, [r5, #16]
   196e8:	ldr	r3, [sp, #4]
   196ec:	bne	199f0 <__assert_fail@plt+0x86b8>
   196f0:	cmp	fp, #0
   196f4:	bne	199f0 <__assert_fail@plt+0x86b8>
   196f8:	rsb	r1, sl, r9
   196fc:	cmp	sl, r1
   19700:	bge	199f0 <__assert_fail@plt+0x86b8>
   19704:	cmp	r3, #0
   19708:	bne	199f0 <__assert_fail@plt+0x86b8>
   1970c:	add	r3, r6, r7
   19710:	mov	r8, r2
   19714:	ldrb	r3, [r3, #-1]
   19718:	cmp	r3, #0
   1971c:	bne	197c4 <__assert_fail@plt+0x848c>
   19720:	ldr	r9, [pc, #1512]	; 19d10 <__assert_fail@plt+0x89d8>
   19724:	add	r9, pc, r9
   19728:	cmp	r8, #0
   1972c:	bne	197e4 <__assert_fail@plt+0x84ac>
   19730:	mov	r0, #34	; 0x22
   19734:	mov	r1, r4
   19738:	bl	1129c <fputc@plt>
   1973c:	ldr	sl, [pc, #1488]	; 19d14 <__assert_fail@plt+0x89dc>
   19740:	mov	r9, #0
   19744:	add	sl, pc, sl
   19748:	sub	r3, r7, #1
   1974c:	cmp	r9, r3
   19750:	blt	19814 <__assert_fail@plt+0x84dc>
   19754:	mov	r0, #34	; 0x22
   19758:	mov	r1, r4
   1975c:	bl	1129c <fputc@plt>
   19760:	ldr	r6, [pc, #1456]	; 19d18 <__assert_fail@plt+0x89e0>
   19764:	add	r6, pc, r6
   19768:	cmp	r8, #0
   1976c:	bne	199a0 <__assert_fail@plt+0x8668>
   19770:	ldr	r0, [pc, #1444]	; 19d1c <__assert_fail@plt+0x89e4>
   19774:	mov	r1, r4
   19778:	add	r0, pc, r0
   1977c:	bl	112f0 <fputs@plt>
   19780:	b	19c6c <__assert_fail@plt+0x8934>
   19784:	mov	r0, #1
   19788:	b	19690 <__assert_fail@plt+0x8358>
   1978c:	ldr	r1, [r7]
   19790:	cmp	r1, #2
   19794:	bne	197bc <__assert_fail@plt+0x8484>
   19798:	ldr	r1, [r7, #4]
   1979c:	cmp	r1, #0
   197a0:	ble	197b4 <__assert_fail@plt+0x847c>
   197a4:	add	r0, r6, r1
   197a8:	ldrb	r0, [r0, #-1]
   197ac:	cmp	r0, #0
   197b0:	addne	r3, r3, #1
   197b4:	tst	r1, #3
   197b8:	addne	r8, r8, #1
   197bc:	ldr	r7, [r7, #12]
   197c0:	b	196b4 <__assert_fail@plt+0x837c>
   197c4:	ldr	r0, [pc, #1364]	; 19d20 <__assert_fail@plt+0x89e8>
   197c8:	mov	r2, #70	; 0x46
   197cc:	ldr	r1, [pc, #1360]	; 19d24 <__assert_fail@plt+0x89ec>
   197d0:	ldr	r3, [pc, #1360]	; 19d28 <__assert_fail@plt+0x89f0>
   197d4:	add	r0, pc, r0
   197d8:	add	r1, pc, r1
   197dc:	add	r3, pc, r3
   197e0:	b	19890 <__assert_fail@plt+0x8558>
   197e4:	ldr	r3, [r8, #4]
   197e8:	cmp	r3, #0
   197ec:	bne	19730 <__assert_fail@plt+0x83f8>
   197f0:	ldr	r3, [r8]
   197f4:	cmp	r3, #2
   197f8:	bne	1980c <__assert_fail@plt+0x84d4>
   197fc:	mov	r0, r4
   19800:	mov	r1, r9
   19804:	ldr	r2, [r8, #8]
   19808:	bl	111f4 <fprintf@plt>
   1980c:	ldr	r8, [r8, #12]
   19810:	b	19728 <__assert_fail@plt+0x83f0>
   19814:	ldrb	fp, [r6, r9]
   19818:	add	r9, r9, #1
   1981c:	cmp	fp, #10
   19820:	beq	19914 <__assert_fail@plt+0x85dc>
   19824:	bhi	198b0 <__assert_fail@plt+0x8578>
   19828:	cmp	fp, #7
   1982c:	beq	198f4 <__assert_fail@plt+0x85bc>
   19830:	bhi	19894 <__assert_fail@plt+0x855c>
   19834:	cmp	fp, #0
   19838:	bne	19960 <__assert_fail@plt+0x8628>
   1983c:	ldr	r0, [pc, #1256]	; 19d2c <__assert_fail@plt+0x89f4>
   19840:	mov	r1, r4
   19844:	add	r0, pc, r0
   19848:	bl	112f0 <fputs@plt>
   1984c:	cmp	r8, #0
   19850:	beq	19958 <__assert_fail@plt+0x8620>
   19854:	ldr	r3, [r8, #4]
   19858:	cmp	r3, r9
   1985c:	bgt	19958 <__assert_fail@plt+0x8620>
   19860:	ldr	r2, [r8]
   19864:	cmp	r2, #2
   19868:	bne	19950 <__assert_fail@plt+0x8618>
   1986c:	cmp	r3, r9
   19870:	beq	19940 <__assert_fail@plt+0x8608>
   19874:	ldr	r0, [pc, #1204]	; 19d30 <__assert_fail@plt+0x89f8>
   19878:	mov	r2, #114	; 0x72
   1987c:	ldr	r1, [pc, #1200]	; 19d34 <__assert_fail@plt+0x89fc>
   19880:	ldr	r3, [pc, #1200]	; 19d38 <__assert_fail@plt+0x8a00>
   19884:	add	r0, pc, r0
   19888:	add	r1, pc, r1
   1988c:	add	r3, pc, r3
   19890:	bl	11338 <__assert_fail@plt>
   19894:	cmp	fp, #8
   19898:	beq	19900 <__assert_fail@plt+0x85c8>
   1989c:	cmp	fp, #9
   198a0:	bne	19960 <__assert_fail@plt+0x8628>
   198a4:	ldr	r0, [pc, #1168]	; 19d3c <__assert_fail@plt+0x8a04>
   198a8:	add	r0, pc, r0
   198ac:	b	19908 <__assert_fail@plt+0x85d0>
   198b0:	cmp	fp, #13
   198b4:	beq	19928 <__assert_fail@plt+0x85f0>
   198b8:	bhi	198d8 <__assert_fail@plt+0x85a0>
   198bc:	cmp	fp, #11
   198c0:	beq	1991c <__assert_fail@plt+0x85e4>
   198c4:	cmp	fp, #12
   198c8:	bne	19960 <__assert_fail@plt+0x8628>
   198cc:	ldr	r0, [pc, #1132]	; 19d40 <__assert_fail@plt+0x8a08>
   198d0:	add	r0, pc, r0
   198d4:	b	19908 <__assert_fail@plt+0x85d0>
   198d8:	cmp	fp, #34	; 0x22
   198dc:	beq	19934 <__assert_fail@plt+0x85fc>
   198e0:	cmp	fp, #92	; 0x5c
   198e4:	bne	19960 <__assert_fail@plt+0x8628>
   198e8:	ldr	r0, [pc, #1108]	; 19d44 <__assert_fail@plt+0x8a0c>
   198ec:	add	r0, pc, r0
   198f0:	b	19908 <__assert_fail@plt+0x85d0>
   198f4:	ldr	r0, [pc, #1100]	; 19d48 <__assert_fail@plt+0x8a10>
   198f8:	add	r0, pc, r0
   198fc:	b	19908 <__assert_fail@plt+0x85d0>
   19900:	ldr	r0, [pc, #1092]	; 19d4c <__assert_fail@plt+0x8a14>
   19904:	add	r0, pc, r0
   19908:	mov	r1, r4
   1990c:	bl	112f0 <fputs@plt>
   19910:	b	19748 <__assert_fail@plt+0x8410>
   19914:	mov	r0, sl
   19918:	b	19908 <__assert_fail@plt+0x85d0>
   1991c:	ldr	r0, [pc, #1068]	; 19d50 <__assert_fail@plt+0x8a18>
   19920:	add	r0, pc, r0
   19924:	b	19908 <__assert_fail@plt+0x85d0>
   19928:	ldr	r0, [pc, #1060]	; 19d54 <__assert_fail@plt+0x8a1c>
   1992c:	add	r0, pc, r0
   19930:	b	19908 <__assert_fail@plt+0x85d0>
   19934:	ldr	r0, [pc, #1052]	; 19d58 <__assert_fail@plt+0x8a20>
   19938:	add	r0, pc, r0
   1993c:	b	19908 <__assert_fail@plt+0x85d0>
   19940:	mov	r0, r4
   19944:	ldr	r1, [sp, #20]
   19948:	ldr	r2, [r8, #8]
   1994c:	bl	111f4 <fprintf@plt>
   19950:	ldr	r8, [r8, #12]
   19954:	b	1984c <__assert_fail@plt+0x8514>
   19958:	mov	r0, #34	; 0x22
   1995c:	b	1997c <__assert_fail@plt+0x8644>
   19960:	bl	111b8 <__ctype_b_loc@plt>
   19964:	lsl	r3, fp, #1
   19968:	ldr	r2, [r0]
   1996c:	ldrh	r3, [r2, r3]
   19970:	tst	r3, #16384	; 0x4000
   19974:	beq	19988 <__assert_fail@plt+0x8650>
   19978:	mov	r0, fp
   1997c:	mov	r1, r4
   19980:	bl	1129c <fputc@plt>
   19984:	b	19748 <__assert_fail@plt+0x8410>
   19988:	ldr	r1, [pc, #972]	; 19d5c <__assert_fail@plt+0x8a24>
   1998c:	mov	r0, r4
   19990:	mov	r2, fp
   19994:	add	r1, pc, r1
   19998:	bl	111f4 <fprintf@plt>
   1999c:	b	19748 <__assert_fail@plt+0x8410>
   199a0:	ldr	r3, [r8]
   199a4:	cmp	r3, #2
   199a8:	bne	199e8 <__assert_fail@plt+0x86b0>
   199ac:	ldr	r3, [r8, #4]
   199b0:	cmp	r3, r7
   199b4:	beq	199d8 <__assert_fail@plt+0x86a0>
   199b8:	ldr	r0, [pc, #928]	; 19d60 <__assert_fail@plt+0x8a28>
   199bc:	mov	r2, #132	; 0x84
   199c0:	ldr	r1, [pc, #924]	; 19d64 <__assert_fail@plt+0x8a2c>
   199c4:	ldr	r3, [pc, #924]	; 19d68 <__assert_fail@plt+0x8a30>
   199c8:	add	r0, pc, r0
   199cc:	add	r1, pc, r1
   199d0:	add	r3, pc, r3
   199d4:	b	19890 <__assert_fail@plt+0x8558>
   199d8:	mov	r0, r4
   199dc:	mov	r1, r6
   199e0:	ldr	r2, [r8, #8]
   199e4:	bl	111f4 <fprintf@plt>
   199e8:	ldr	r8, [r8, #12]
   199ec:	b	19768 <__assert_fail@plt+0x8430>
   199f0:	tst	r9, #3
   199f4:	bne	19b50 <__assert_fail@plt+0x8818>
   199f8:	cmp	r8, #0
   199fc:	bne	19b50 <__assert_fail@plt+0x8818>
   19a00:	ldr	fp, [pc, #868]	; 19d6c <__assert_fail@plt+0x8a34>
   19a04:	mov	r0, #60	; 0x3c
   19a08:	ldr	sl, [pc, #864]	; 19d70 <__assert_fail@plt+0x8a38>
   19a0c:	mov	r1, r4
   19a10:	add	fp, pc, fp
   19a14:	add	r3, r6, r7
   19a18:	add	sl, pc, sl
   19a1c:	mov	r8, r2
   19a20:	str	r3, [sp, #8]
   19a24:	bl	1129c <fputc@plt>
   19a28:	mov	ip, r6
   19a2c:	cmp	r8, #0
   19a30:	beq	19a98 <__assert_fail@plt+0x8760>
   19a34:	ldr	r1, [r8, #4]
   19a38:	rsb	r2, r6, ip
   19a3c:	cmp	r1, r2
   19a40:	bgt	19a98 <__assert_fail@plt+0x8760>
   19a44:	ldr	r0, [r8]
   19a48:	cmp	r0, #2
   19a4c:	bne	19a90 <__assert_fail@plt+0x8758>
   19a50:	cmp	r1, r2
   19a54:	beq	19a78 <__assert_fail@plt+0x8740>
   19a58:	ldr	r0, [pc, #788]	; 19d74 <__assert_fail@plt+0x8a3c>
   19a5c:	mov	r2, #147	; 0x93
   19a60:	ldr	r1, [pc, #784]	; 19d78 <__assert_fail@plt+0x8a40>
   19a64:	ldr	r3, [pc, #784]	; 19d7c <__assert_fail@plt+0x8a44>
   19a68:	add	r0, pc, r0
   19a6c:	add	r1, pc, r1
   19a70:	add	r3, pc, r3
   19a74:	b	19b40 <__assert_fail@plt+0x8808>
   19a78:	ldr	r2, [r8, #8]
   19a7c:	mov	r0, r4
   19a80:	mov	r1, sl
   19a84:	str	ip, [sp, #4]
   19a88:	bl	111f4 <fprintf@plt>
   19a8c:	ldr	ip, [sp, #4]
   19a90:	ldr	r8, [r8, #12]
   19a94:	b	19a2c <__assert_fail@plt+0x86f4>
   19a98:	ldr	r1, [ip]
   19a9c:	add	r9, ip, #4
   19aa0:	mov	r0, r4
   19aa4:	ubfx	r2, r1, #8, #8
   19aa8:	ubfx	ip, r1, #16, #8
   19aac:	str	r1, [sp, #28]
   19ab0:	lsl	r2, r2, #16
   19ab4:	orr	r2, r2, r1, lsl #24
   19ab8:	orr	r2, r2, r1, lsr #24
   19abc:	mov	r1, fp
   19ac0:	orr	r2, r2, ip, lsl #8
   19ac4:	bl	111f4 <fprintf@plt>
   19ac8:	ldr	r3, [sp, #8]
   19acc:	cmp	r9, r3
   19ad0:	ldrcs	r6, [pc, #680]	; 19d80 <__assert_fail@plt+0x8a48>
   19ad4:	addcs	r6, pc, r6
   19ad8:	bcs	19b04 <__assert_fail@plt+0x87cc>
   19adc:	mov	r0, #32
   19ae0:	mov	r1, r4
   19ae4:	bl	1129c <fputc@plt>
   19ae8:	mov	ip, r9
   19aec:	b	19a2c <__assert_fail@plt+0x86f4>
   19af0:	mov	r0, r4
   19af4:	mov	r1, r6
   19af8:	ldr	r2, [r8, #8]
   19afc:	bl	111f4 <fprintf@plt>
   19b00:	ldr	r8, [r8, #12]
   19b04:	cmp	r8, #0
   19b08:	beq	19b48 <__assert_fail@plt+0x8810>
   19b0c:	ldr	r2, [r8]
   19b10:	cmp	r2, #2
   19b14:	bne	19b00 <__assert_fail@plt+0x87c8>
   19b18:	ldr	r2, [r8, #4]
   19b1c:	cmp	r2, r7
   19b20:	beq	19af0 <__assert_fail@plt+0x87b8>
   19b24:	ldr	r0, [pc, #600]	; 19d84 <__assert_fail@plt+0x8a4c>
   19b28:	mov	r2, #161	; 0xa1
   19b2c:	ldr	r1, [pc, #596]	; 19d88 <__assert_fail@plt+0x8a50>
   19b30:	ldr	r3, [pc, #596]	; 19d8c <__assert_fail@plt+0x8a54>
   19b34:	add	r0, pc, r0
   19b38:	add	r1, pc, r1
   19b3c:	add	r3, pc, r3
   19b40:	add	r3, r3, #21
   19b44:	b	19890 <__assert_fail@plt+0x8558>
   19b48:	mov	r0, #62	; 0x3e
   19b4c:	b	19c60 <__assert_fail@plt+0x8928>
   19b50:	ldr	sl, [pc, #568]	; 19d90 <__assert_fail@plt+0x8a58>
   19b54:	mov	r0, #91	; 0x5b
   19b58:	ldr	fp, [pc, #564]	; 19d94 <__assert_fail@plt+0x8a5c>
   19b5c:	mov	r1, r4
   19b60:	add	sl, pc, sl
   19b64:	add	r3, r6, r7
   19b68:	add	fp, pc, fp
   19b6c:	mov	r9, r2
   19b70:	str	r3, [sp, #8]
   19b74:	bl	1129c <fputc@plt>
   19b78:	mov	ip, r6
   19b7c:	cmp	r9, #0
   19b80:	beq	19bc0 <__assert_fail@plt+0x8888>
   19b84:	ldr	r1, [r9, #4]
   19b88:	rsb	r2, r6, ip
   19b8c:	cmp	r1, r2
   19b90:	bne	19bc0 <__assert_fail@plt+0x8888>
   19b94:	ldr	r2, [r9]
   19b98:	cmp	r2, #2
   19b9c:	bne	19bb8 <__assert_fail@plt+0x8880>
   19ba0:	ldr	r2, [r9, #8]
   19ba4:	mov	r0, r4
   19ba8:	mov	r1, fp
   19bac:	str	ip, [sp, #4]
   19bb0:	bl	111f4 <fprintf@plt>
   19bb4:	ldr	ip, [sp, #4]
   19bb8:	ldr	r9, [r9, #12]
   19bbc:	b	19b7c <__assert_fail@plt+0x8844>
   19bc0:	mov	r0, r4
   19bc4:	mov	r1, sl
   19bc8:	ldrb	r2, [ip]
   19bcc:	add	r8, ip, #1
   19bd0:	bl	111f4 <fprintf@plt>
   19bd4:	ldr	r3, [sp, #8]
   19bd8:	cmp	r8, r3
   19bdc:	ldrcs	r6, [pc, #436]	; 19d98 <__assert_fail@plt+0x8a60>
   19be0:	addcs	r6, pc, r6
   19be4:	bcs	19c0c <__assert_fail@plt+0x88d4>
   19be8:	mov	r0, #32
   19bec:	mov	r1, r4
   19bf0:	bl	1129c <fputc@plt>
   19bf4:	mov	ip, r8
   19bf8:	b	19b7c <__assert_fail@plt+0x8844>
   19bfc:	ldr	r2, [r9]
   19c00:	cmp	r2, #2
   19c04:	beq	19c18 <__assert_fail@plt+0x88e0>
   19c08:	ldr	r9, [r9, #12]
   19c0c:	cmp	r9, #0
   19c10:	bne	19bfc <__assert_fail@plt+0x88c4>
   19c14:	b	19c5c <__assert_fail@plt+0x8924>
   19c18:	ldr	r2, [r9, #4]
   19c1c:	cmp	r2, r7
   19c20:	beq	19c48 <__assert_fail@plt+0x8910>
   19c24:	ldr	r3, [pc, #368]	; 19d9c <__assert_fail@plt+0x8a64>
   19c28:	mov	r2, #189	; 0xbd
   19c2c:	ldr	r0, [pc, #364]	; 19da0 <__assert_fail@plt+0x8a68>
   19c30:	ldr	r1, [pc, #364]	; 19da4 <__assert_fail@plt+0x8a6c>
   19c34:	add	r3, pc, r3
   19c38:	add	r0, pc, r0
   19c3c:	add	r3, r3, #41	; 0x29
   19c40:	add	r1, pc, r1
   19c44:	b	19890 <__assert_fail@plt+0x8558>
   19c48:	mov	r0, r4
   19c4c:	mov	r1, r6
   19c50:	ldr	r2, [r9, #8]
   19c54:	bl	111f4 <fprintf@plt>
   19c58:	b	19c08 <__assert_fail@plt+0x88d0>
   19c5c:	mov	r0, #93	; 0x5d
   19c60:	mov	r1, r4
   19c64:	bl	1129c <fputc@plt>
   19c68:	b	19770 <__assert_fail@plt+0x8438>
   19c6c:	ldr	r5, [r5, #20]
   19c70:	b	195a8 <__assert_fail@plt+0x8270>
   19c74:	ldr	r3, [sp, #12]
   19c78:	ldr	r5, [r3, #12]
   19c7c:	ldr	r3, [sp, #16]
   19c80:	add	r6, r3, #1
   19c84:	cmp	r5, #0
   19c88:	beq	19cbc <__assert_fail@plt+0x8984>
   19c8c:	ldrb	r3, [r5]
   19c90:	cmp	r3, #0
   19c94:	bne	19cb4 <__assert_fail@plt+0x897c>
   19c98:	mov	r1, r4
   19c9c:	mov	r0, #10
   19ca0:	bl	1129c <fputc@plt>
   19ca4:	mov	r0, r4
   19ca8:	mov	r1, r5
   19cac:	mov	r2, r6
   19cb0:	bl	194e0 <__assert_fail@plt+0x81a8>
   19cb4:	ldr	r5, [r5, #20]
   19cb8:	b	19c84 <__assert_fail@plt+0x894c>
   19cbc:	ldr	r3, [sp, #16]
   19cc0:	cmp	r5, r3
   19cc4:	bge	19cdc <__assert_fail@plt+0x89a4>
   19cc8:	mov	r0, #9
   19ccc:	mov	r1, r4
   19cd0:	bl	1129c <fputc@plt>
   19cd4:	add	r5, r5, #1
   19cd8:	b	19cbc <__assert_fail@plt+0x8984>
   19cdc:	ldr	r0, [pc, #196]	; 19da8 <__assert_fail@plt+0x8a70>
   19ce0:	mov	r1, r4
   19ce4:	add	r0, pc, r0
   19ce8:	add	sp, sp, #36	; 0x24
   19cec:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cf0:	b	112f0 <fputs@plt>
   19cf4:	ldrdeq	r8, [r0], -r0
   19cf8:	andeq	r8, r0, r1, lsl #11
   19cfc:	andeq	r8, r0, r3, ror r5
   19d00:	andeq	r8, r0, r4, asr r5
   19d04:	andeq	r8, r0, r0, lsl r5
   19d08:	andeq	r8, r0, r4, asr #9
   19d0c:	andeq	r8, r0, r0, asr #8
   19d10:	ldrdeq	r8, [r0], -r0
   19d14:	strdeq	r8, [r0], -r9
   19d18:	andeq	r8, r0, r0, lsr #8
   19d1c:	andeq	r8, r0, r7, lsr #9
   19d20:	andeq	r8, r0, ip, lsr r3
   19d24:	andeq	r8, r0, pc, asr #6
   19d28:	ldrdeq	r8, [r0], -fp
   19d2c:	andeq	r8, r0, fp, lsl #6
   19d30:	andeq	r8, r0, pc, asr #5
   19d34:	muleq	r0, pc, r2	; <UNPREDICTABLE>
   19d38:	andeq	r8, r0, fp, lsr #4
   19d3c:	muleq	r0, r2, r2
   19d40:	andeq	r8, r0, r3, ror r2
   19d44:	andeq	r8, r0, sp, asr r2
   19d48:	andeq	r8, r0, ip, lsr r2
   19d4c:	andeq	r8, r0, r3, lsr r2
   19d50:	andeq	r8, r0, r0, lsr #4
   19d54:	andeq	r8, r0, sl, lsl r2
   19d58:	andeq	r8, r0, r4, lsl r2
   19d5c:	ldrdeq	r8, [r0], -r2
   19d60:	andeq	r8, r0, r7, lsr #3
   19d64:	andeq	r8, r0, fp, asr r1
   19d68:	andeq	r8, r0, r7, ror #1
   19d6c:	muleq	r0, sp, r1
   19d70:	ldrdeq	r8, [r0], -ip
   19d74:	andeq	r8, r0, r1, lsr #2
   19d78:	strheq	r8, [r0], -fp
   19d7c:	andeq	r8, r0, r7, asr #32
   19d80:	strheq	r8, [r0], -r0
   19d84:	andeq	r8, r0, fp, lsr r0
   19d88:	andeq	r7, r0, pc, ror #31
   19d8c:	andeq	r7, r0, fp, ror pc
   19d90:	andeq	r8, r0, r8
   19d94:	andeq	r7, r0, ip, lsl #31
   19d98:	andeq	r7, r0, r4, lsr #31
   19d9c:	andeq	r7, r0, r3, lsl #29
   19da0:	andeq	r7, r0, r7, lsr pc
   19da4:	andeq	r7, r0, r7, ror #29
   19da8:	andeq	r7, r0, lr, asr #29
   19dac:	push	{r4, r5, r6, lr}
   19db0:	ldr	r4, [pc, #124]	; 19e34 <__assert_fail@plt+0x8afc>
   19db4:	ldr	r3, [pc, #124]	; 19e38 <__assert_fail@plt+0x8b00>
   19db8:	add	r4, pc, r4
   19dbc:	ldr	r2, [pc, #120]	; 19e3c <__assert_fail@plt+0x8b04>
   19dc0:	ldr	r5, [r4, r3]
   19dc4:	mov	r3, #0
   19dc8:	str	r3, [r5]
   19dcc:	ldr	r6, [r4, r2]
   19dd0:	strb	r3, [r6]
   19dd4:	bl	190d0 <__assert_fail@plt+0x7d98>
   19dd8:	ldr	r3, [pc, #96]	; 19e40 <__assert_fail@plt+0x8b08>
   19ddc:	ldr	r2, [pc, #96]	; 19e44 <__assert_fail@plt+0x8b0c>
   19de0:	ldr	r3, [r4, r3]
   19de4:	ldr	r2, [r4, r2]
   19de8:	ldr	r3, [r3]
   19dec:	ldr	r1, [r3]
   19df0:	str	r1, [r2]
   19df4:	ldr	r2, [pc, #76]	; 19e48 <__assert_fail@plt+0x8b10>
   19df8:	ldr	r2, [r4, r2]
   19dfc:	str	r3, [r2, #16]
   19e00:	bl	1cba8 <__assert_fail@plt+0xb870>
   19e04:	cmp	r0, #0
   19e08:	ldrne	r0, [pc, #60]	; 19e4c <__assert_fail@plt+0x8b14>
   19e0c:	addne	r0, pc, r0
   19e10:	bne	19e28 <__assert_fail@plt+0x8af0>
   19e14:	ldrb	r3, [r6]
   19e18:	cmp	r3, #0
   19e1c:	beq	19e2c <__assert_fail@plt+0x8af4>
   19e20:	ldr	r0, [pc, #40]	; 19e50 <__assert_fail@plt+0x8b18>
   19e24:	add	r0, pc, r0
   19e28:	bl	113ec <__assert_fail@plt+0xb4>
   19e2c:	ldr	r0, [r5]
   19e30:	pop	{r4, r5, r6, pc}
   19e34:	andeq	sl, r1, r0, asr #4
   19e38:	andeq	r0, r0, ip, asr r1
   19e3c:	strdeq	r0, [r0], -ip
   19e40:	andeq	r0, r0, r8, lsr #2
   19e44:	andeq	r0, r0, r0, lsl r1
   19e48:	andeq	r0, r0, r4, lsl r1
   19e4c:	andeq	r7, r0, sl, lsr #27
   19e50:	andeq	r7, r0, lr, lsr #27
   19e54:	push	{r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   19e58:	mov	r7, r0
   19e5c:	ldr	r0, [pc, #144]	; 19ef4 <__assert_fail@plt+0x8bbc>
   19e60:	mov	r8, r1
   19e64:	ldr	r9, [pc, #140]	; 19ef8 <__assert_fail@plt+0x8bc0>
   19e68:	mov	r1, r7
   19e6c:	add	r0, pc, r0
   19e70:	ldr	sl, [pc, #132]	; 19efc <__assert_fail@plt+0x8bc4>
   19e74:	bl	112f0 <fputs@plt>
   19e78:	ldr	r6, [r8, #4]
   19e7c:	add	r9, pc, r9
   19e80:	add	sl, pc, sl
   19e84:	cmp	r6, #0
   19e88:	beq	19edc <__assert_fail@plt+0x8ba4>
   19e8c:	ldr	r4, [r6, #20]
   19e90:	cmp	r4, #0
   19e94:	beq	19ebc <__assert_fail@plt+0x8b84>
   19e98:	ldrb	r3, [r4]
   19e9c:	cmp	r3, #0
   19ea0:	bne	19eb4 <__assert_fail@plt+0x8b7c>
   19ea4:	mov	r0, r7
   19ea8:	mov	r1, r9
   19eac:	ldr	r2, [r4, #4]
   19eb0:	bl	111f4 <fprintf@plt>
   19eb4:	ldr	r4, [r4, #8]
   19eb8:	b	19e90 <__assert_fail@plt+0x8b58>
   19ebc:	ldrd	r4, [r6, #8]
   19ec0:	mov	r0, r7
   19ec4:	mov	r1, sl
   19ec8:	strd	r4, [sp]
   19ecc:	ldrd	r2, [r6]
   19ed0:	bl	111f4 <fprintf@plt>
   19ed4:	ldr	r6, [r6, #16]
   19ed8:	b	19e84 <__assert_fail@plt+0x8b4c>
   19edc:	mov	r0, r7
   19ee0:	ldr	r1, [r8, #12]
   19ee4:	mov	r2, r6
   19ee8:	add	sp, sp, #8
   19eec:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   19ef0:	b	194e0 <__assert_fail@plt+0x81a8>
   19ef4:	andeq	r7, r0, r7, lsl #27
   19ef8:	andeq	r7, r0, r8, ror ip
   19efc:	andeq	r7, r0, pc, ror sp
   19f00:	push	{r3, lr}
   19f04:	bl	11170 <malloc@plt>
   19f08:	cmp	r0, #0
   19f0c:	popne	{r3, pc}
   19f10:	ldr	r0, [pc, #4]	; 19f1c <__assert_fail@plt+0x8be4>
   19f14:	add	r0, pc, r0
   19f18:	bl	11440 <__assert_fail@plt+0x108>
   19f1c:	ldrdeq	r6, [r0], -r9
   19f20:	push	{r3, r4, r5, lr}
   19f24:	mov	r5, r0
   19f28:	bl	111dc <strlen@plt>
   19f2c:	add	r4, r0, #1
   19f30:	mov	r0, r4
   19f34:	bl	19f00 <__assert_fail@plt+0x8bc8>
   19f38:	mov	r1, r5
   19f3c:	mov	r2, r4
   19f40:	bl	110f8 <memcpy@plt>
   19f44:	pop	{r3, r4, r5, pc}
   19f48:	push	{r1, r2, r3}
   19f4c:	push	{r0, r1, r2, r4, r5, r6, r7, r8, lr}
   19f50:	add	r6, sp, #40	; 0x28
   19f54:	ldr	r8, [sp, #36]	; 0x24
   19f58:	mov	r7, r0
   19f5c:	mov	r5, #0
   19f60:	mov	r4, #128	; 0x80
   19f64:	mov	r0, r5
   19f68:	mov	r1, r4
   19f6c:	bl	1111c <realloc@plt>
   19f70:	subs	r5, r0, #0
   19f74:	bne	19f88 <__assert_fail@plt+0x8c50>
   19f78:	ldr	r0, [pc, #100]	; 19fe4 <__assert_fail@plt+0x8cac>
   19f7c:	mov	r1, r4
   19f80:	add	r0, pc, r0
   19f84:	bl	11440 <__assert_fail@plt+0x108>
   19f88:	mov	r2, r8
   19f8c:	mov	r3, r6
   19f90:	mov	r1, r4
   19f94:	str	r6, [sp, #4]
   19f98:	bl	112b4 <vsnprintf@plt>
   19f9c:	mvn	r3, r0
   19fa0:	lsr	r3, r3, #31
   19fa4:	cmp	r0, r4
   19fa8:	movge	r2, #0
   19fac:	andlt	r2, r3, #1
   19fb0:	cmp	r2, #0
   19fb4:	bne	19fc8 <__assert_fail@plt+0x8c90>
   19fb8:	cmp	r3, #0
   19fbc:	addne	r4, r0, #1
   19fc0:	lsleq	r4, r4, #1
   19fc4:	b	19f64 <__assert_fail@plt+0x8c2c>
   19fc8:	str	r5, [r7]
   19fcc:	mov	r0, r5
   19fd0:	bl	111dc <strlen@plt>
   19fd4:	add	sp, sp, #12
   19fd8:	pop	{r4, r5, r6, r7, r8, lr}
   19fdc:	add	sp, sp, #12
   19fe0:	bx	lr
   19fe4:	strdeq	r6, [r0], -r4
   19fe8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   19fec:	mov	r7, r1
   19ff0:	mov	r9, r0
   19ff4:	bl	111dc <strlen@plt>
   19ff8:	mov	r4, r0
   19ffc:	mov	r8, r0
   1a000:	mov	r0, r7
   1a004:	bl	111dc <strlen@plt>
   1a008:	cmp	r4, #0
   1a00c:	add	r3, r4, r0
   1a010:	mov	sl, r0
   1a014:	add	r0, r3, #2
   1a018:	ble	1a034 <__assert_fail@plt+0x8cfc>
   1a01c:	add	r2, r9, r4
   1a020:	ldrb	r2, [r2, #-1]
   1a024:	cmp	r2, #47	; 0x2f
   1a028:	addeq	r0, r3, #1
   1a02c:	moveq	r6, #0
   1a030:	beq	1a038 <__assert_fail@plt+0x8d00>
   1a034:	mov	r6, #1
   1a038:	bl	19f00 <__assert_fail@plt+0x8bc8>
   1a03c:	mov	r1, r9
   1a040:	mov	r2, r4
   1a044:	mov	r5, r0
   1a048:	bl	110f8 <memcpy@plt>
   1a04c:	cmp	r6, #0
   1a050:	mov	r1, r7
   1a054:	addne	r8, r4, #1
   1a058:	add	r2, sl, #1
   1a05c:	movne	r3, #47	; 0x2f
   1a060:	add	r0, r5, r8
   1a064:	strbne	r3, [r5, r4]
   1a068:	bl	110f8 <memcpy@plt>
   1a06c:	mov	r0, r5
   1a070:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a074:	cmp	r1, #0
   1a078:	push	{r4, r5, r6, r7, r8, lr}
   1a07c:	mov	r4, r0
   1a080:	beq	1a0f0 <__assert_fail@plt+0x8db8>
   1a084:	add	r7, r0, r1
   1a088:	ldrb	r3, [r7, #-1]
   1a08c:	cmp	r3, #0
   1a090:	bne	1a0f0 <__assert_fail@plt+0x8db8>
   1a094:	cmp	r4, r7
   1a098:	bcs	1a0f8 <__assert_fail@plt+0x8dc0>
   1a09c:	mov	r5, r4
   1a0a0:	mov	r6, r5
   1a0a4:	ldrb	r8, [r5], #1
   1a0a8:	cmp	r8, #0
   1a0ac:	beq	1a0d4 <__assert_fail@plt+0x8d9c>
   1a0b0:	bl	111b8 <__ctype_b_loc@plt>
   1a0b4:	lsl	r8, r8, #1
   1a0b8:	ldr	r3, [r0]
   1a0bc:	ldrh	r3, [r3, r8]
   1a0c0:	tst	r3, #16384	; 0x4000
   1a0c4:	beq	1a0d4 <__assert_fail@plt+0x8d9c>
   1a0c8:	cmp	r5, r7
   1a0cc:	mov	r6, r5
   1a0d0:	bne	1a0a0 <__assert_fail@plt+0x8d68>
   1a0d4:	ldrb	r0, [r6]
   1a0d8:	cmp	r0, #0
   1a0dc:	bne	1a0f0 <__assert_fail@plt+0x8db8>
   1a0e0:	cmp	r6, r4
   1a0e4:	popeq	{r4, r5, r6, r7, r8, pc}
   1a0e8:	add	r4, r6, #1
   1a0ec:	b	1a094 <__assert_fail@plt+0x8d5c>
   1a0f0:	mov	r0, #0
   1a0f4:	pop	{r4, r5, r6, r7, r8, pc}
   1a0f8:	mov	r0, #1
   1a0fc:	pop	{r4, r5, r6, r7, r8, pc}
   1a100:	push	{r0, r1, r4, r5, r6, lr}
   1a104:	mov	r3, r0
   1a108:	ldr	r5, [r1]
   1a10c:	mov	r6, r1
   1a110:	add	r1, r0, r5
   1a114:	add	r4, r5, #1
   1a118:	ldrb	r0, [r0, r5]
   1a11c:	cmp	r0, #102	; 0x66
   1a120:	beq	1a1a0 <__assert_fail@plt+0x8e68>
   1a124:	bhi	1a150 <__assert_fail@plt+0x8e18>
   1a128:	cmp	r0, #97	; 0x61
   1a12c:	beq	1a188 <__assert_fail@plt+0x8e50>
   1a130:	bhi	1a144 <__assert_fail@plt+0x8e0c>
   1a134:	sub	r3, r0, #48	; 0x30
   1a138:	cmp	r3, #7
   1a13c:	bls	1a1a8 <__assert_fail@plt+0x8e70>
   1a140:	b	1a250 <__assert_fail@plt+0x8f18>
   1a144:	cmp	r0, #98	; 0x62
   1a148:	moveq	r0, #8
   1a14c:	b	1a250 <__assert_fail@plt+0x8f18>
   1a150:	cmp	r0, #116	; 0x74
   1a154:	beq	1a190 <__assert_fail@plt+0x8e58>
   1a158:	bhi	1a174 <__assert_fail@plt+0x8e3c>
   1a15c:	cmp	r0, #110	; 0x6e
   1a160:	moveq	r0, #10
   1a164:	beq	1a250 <__assert_fail@plt+0x8f18>
   1a168:	cmp	r0, #114	; 0x72
   1a16c:	moveq	r0, #13
   1a170:	b	1a250 <__assert_fail@plt+0x8f18>
   1a174:	cmp	r0, #118	; 0x76
   1a178:	beq	1a198 <__assert_fail@plt+0x8e60>
   1a17c:	cmp	r0, #120	; 0x78
   1a180:	beq	1a200 <__assert_fail@plt+0x8ec8>
   1a184:	b	1a250 <__assert_fail@plt+0x8f18>
   1a188:	mov	r0, #7
   1a18c:	b	1a250 <__assert_fail@plt+0x8f18>
   1a190:	mov	r0, #9
   1a194:	b	1a250 <__assert_fail@plt+0x8f18>
   1a198:	mov	r0, #11
   1a19c:	b	1a250 <__assert_fail@plt+0x8f18>
   1a1a0:	mov	r0, #12
   1a1a4:	b	1a250 <__assert_fail@plt+0x8f18>
   1a1a8:	mov	r2, #3
   1a1ac:	mov	r0, sp
   1a1b0:	mov	r3, #0
   1a1b4:	strb	r3, [sp, #3]
   1a1b8:	bl	11230 <strncpy@plt>
   1a1bc:	mov	r0, sp
   1a1c0:	add	r1, sp, #4
   1a1c4:	mov	r2, #8
   1a1c8:	bl	110a4 <strtol@plt>
   1a1cc:	ldr	r3, [sp, #4]
   1a1d0:	mov	r4, sp
   1a1d4:	cmp	r3, r4
   1a1d8:	rsbhi	r4, r4, r3
   1a1dc:	bhi	1a248 <__assert_fail@plt+0x8f10>
   1a1e0:	ldr	r0, [pc, #116]	; 1a25c <__assert_fail@plt+0x8f24>
   1a1e4:	mov	r2, #150	; 0x96
   1a1e8:	ldr	r1, [pc, #112]	; 1a260 <__assert_fail@plt+0x8f28>
   1a1ec:	ldr	r3, [pc, #112]	; 1a264 <__assert_fail@plt+0x8f2c>
   1a1f0:	add	r0, pc, r0
   1a1f4:	add	r1, pc, r1
   1a1f8:	add	r3, pc, r3
   1a1fc:	bl	11338 <__assert_fail@plt>
   1a200:	add	r1, r3, r4
   1a204:	mov	r2, #0
   1a208:	mov	r0, sp
   1a20c:	strb	r2, [sp, #2]
   1a210:	mov	r2, #2
   1a214:	mov	r5, sp
   1a218:	bl	11230 <strncpy@plt>
   1a21c:	mov	r0, sp
   1a220:	add	r1, sp, #4
   1a224:	mov	r2, #16
   1a228:	bl	110a4 <strtol@plt>
   1a22c:	ldr	r3, [sp, #4]
   1a230:	cmp	r3, r5
   1a234:	rsbhi	r5, r5, r3
   1a238:	bhi	1a248 <__assert_fail@plt+0x8f10>
   1a23c:	ldr	r0, [pc, #36]	; 1a268 <__assert_fail@plt+0x8f30>
   1a240:	add	r0, pc, r0
   1a244:	bl	11440 <__assert_fail@plt+0x108>
   1a248:	add	r4, r4, r5
   1a24c:	uxtb	r0, r0
   1a250:	str	r4, [r6]
   1a254:	add	sp, sp, #8
   1a258:	pop	{r4, r5, r6, pc}
   1a25c:	andeq	r7, r0, sl, asr #20
   1a260:	andeq	r7, r0, pc, asr #20
   1a264:	andeq	r7, r0, sl, lsr #20
   1a268:	andeq	r7, r0, sl, lsl #20
   1a26c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a270:	mov	r9, r1
   1a274:	mov	r4, #0
   1a278:	str	r4, [r1]
   1a27c:	ldr	r1, [pc, #208]	; 1a354 <__assert_fail@plt+0x901c>
   1a280:	mov	r5, r0
   1a284:	mov	sl, r2
   1a288:	add	r1, pc, r1
   1a28c:	bl	11098 <strcmp@plt>
   1a290:	cmp	r0, #0
   1a294:	beq	1a2b8 <__assert_fail@plt+0x8f80>
   1a298:	mov	r0, r5
   1a29c:	mov	r1, r4
   1a2a0:	bl	111a0 <open@plt>
   1a2a4:	subs	r8, r0, #0
   1a2a8:	bge	1a2bc <__assert_fail@plt+0x8f84>
   1a2ac:	bl	11200 <__errno_location@plt>
   1a2b0:	ldr	r0, [r0]
   1a2b4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a2b8:	mov	r8, r0
   1a2bc:	mov	r0, #1024	; 0x400
   1a2c0:	mov	r5, #0
   1a2c4:	bl	19f00 <__assert_fail@plt+0x8bc8>
   1a2c8:	mov	r4, #1024	; 0x400
   1a2cc:	mov	r6, r0
   1a2d0:	mov	r0, r8
   1a2d4:	add	r1, r6, r5
   1a2d8:	rsb	r2, r5, r4
   1a2dc:	bl	110c8 <read@plt>
   1a2e0:	subs	r7, r0, #0
   1a2e4:	bge	1a2f4 <__assert_fail@plt+0x8fbc>
   1a2e8:	bl	11200 <__errno_location@plt>
   1a2ec:	ldr	r7, [r0]
   1a2f0:	b	1a32c <__assert_fail@plt+0x8ff4>
   1a2f4:	add	r5, r5, r7
   1a2f8:	beq	1a32c <__assert_fail@plt+0x8ff4>
   1a2fc:	cmp	r5, r4
   1a300:	bne	1a2d0 <__assert_fail@plt+0x8f98>
   1a304:	lsl	r4, r5, #1
   1a308:	mov	r0, r6
   1a30c:	mov	r1, r4
   1a310:	bl	1111c <realloc@plt>
   1a314:	subs	r6, r0, #0
   1a318:	bne	1a2d0 <__assert_fail@plt+0x8f98>
   1a31c:	ldr	r0, [pc, #52]	; 1a358 <__assert_fail@plt+0x9020>
   1a320:	mov	r1, r4
   1a324:	add	r0, pc, r0
   1a328:	bl	11440 <__assert_fail@plt+0x108>
   1a32c:	mov	r0, r8
   1a330:	bl	11314 <close@plt>
   1a334:	cmp	r7, #0
   1a338:	streq	r6, [r9]
   1a33c:	beq	1a348 <__assert_fail@plt+0x9010>
   1a340:	mov	r0, r6
   1a344:	bl	110e0 <free@plt>
   1a348:	str	r4, [sl]
   1a34c:	mov	r0, r7
   1a350:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1a354:	andeq	r6, r0, r1, asr #11
   1a358:	andeq	r6, r0, r0, asr r6
   1a35c:	push	{r0, r1, r2, lr}
   1a360:	add	r2, sp, #4
   1a364:	bl	1a26c <__assert_fail@plt+0x8f34>
   1a368:	add	sp, sp, #12
   1a36c:	pop	{pc}		; (ldr pc, [sp], #4)
   1a370:	push	{r0, r1, r2, r4, r5, lr}
   1a374:	mov	r2, r1
   1a378:	add	r1, sp, #4
   1a37c:	mov	r5, r0
   1a380:	bl	1a26c <__assert_fail@plt+0x8f34>
   1a384:	ldr	r4, [pc, #64]	; 1a3cc <__assert_fail@plt+0x9094>
   1a388:	add	r4, pc, r4
   1a38c:	cmp	r0, #0
   1a390:	ldreq	r0, [sp, #4]
   1a394:	beq	1a3c4 <__assert_fail@plt+0x908c>
   1a398:	ldr	r3, [pc, #48]	; 1a3d0 <__assert_fail@plt+0x9098>
   1a39c:	ldr	r3, [r4, r3]
   1a3a0:	ldr	r4, [r3]
   1a3a4:	bl	11188 <strerror@plt>
   1a3a8:	ldr	r1, [pc, #36]	; 1a3d4 <__assert_fail@plt+0x909c>
   1a3ac:	mov	r2, r5
   1a3b0:	add	r1, pc, r1
   1a3b4:	mov	r3, r0
   1a3b8:	mov	r0, r4
   1a3bc:	bl	111f4 <fprintf@plt>
   1a3c0:	mov	r0, #0
   1a3c4:	add	sp, sp, #12
   1a3c8:	pop	{r4, r5, pc}
   1a3cc:	andeq	r9, r1, r0, ror ip
   1a3d0:	andeq	r0, r0, r4, lsr r1
   1a3d4:	andeq	r7, r0, r0, asr #17
   1a3d8:	push	{r0, r1, r2, lr}
   1a3dc:	add	r1, sp, #4
   1a3e0:	bl	1a370 <__assert_fail@plt+0x9038>
   1a3e4:	add	sp, sp, #12
   1a3e8:	pop	{pc}		; (ldr pc, [sp], #4)
   1a3ec:	push	{r0, r1, r4, r5, r6, r7, r8, lr}
   1a3f0:	mov	r7, r1
   1a3f4:	ldr	r1, [pc, #188]	; 1a4b8 <__assert_fail@plt+0x9180>
   1a3f8:	mov	r4, r0
   1a3fc:	add	r1, pc, r1
   1a400:	bl	11098 <strcmp@plt>
   1a404:	cmp	r0, #0
   1a408:	moveq	r6, #1
   1a40c:	beq	1a434 <__assert_fail@plt+0x90fc>
   1a410:	mov	r0, r4
   1a414:	movw	r1, #577	; 0x241
   1a418:	movw	r2, #438	; 0x1b6
   1a41c:	bl	111a0 <open@plt>
   1a420:	subs	r6, r0, #0
   1a424:	bge	1a434 <__assert_fail@plt+0x90fc>
   1a428:	bl	11200 <__errno_location@plt>
   1a42c:	ldr	r0, [r0]
   1a430:	b	1a4b0 <__assert_fail@plt+0x9178>
   1a434:	ldr	r3, [r7, #4]
   1a438:	mov	r4, #0
   1a43c:	mov	r5, r4
   1a440:	ubfx	r8, r3, #8, #8
   1a444:	str	r3, [sp, #4]
   1a448:	lsl	r8, r8, #16
   1a44c:	orr	r8, r8, r3, lsl #24
   1a450:	orr	r8, r8, r3, lsr #24
   1a454:	ubfx	r3, r3, #16, #8
   1a458:	orr	r8, r8, r3, lsl #8
   1a45c:	cmp	r5, r8
   1a460:	bge	1a494 <__assert_fail@plt+0x915c>
   1a464:	mov	r0, r6
   1a468:	add	r1, r7, r5
   1a46c:	rsb	r2, r5, r8
   1a470:	bl	11248 <write@plt>
   1a474:	subs	r4, r0, #0
   1a478:	bge	1a48c <__assert_fail@plt+0x9154>
   1a47c:	bl	11200 <__errno_location@plt>
   1a480:	ldr	r4, [r0]
   1a484:	rsb	r4, r4, #0
   1a488:	b	1a494 <__assert_fail@plt+0x915c>
   1a48c:	add	r5, r5, r4
   1a490:	b	1a45c <__assert_fail@plt+0x9124>
   1a494:	cmp	r6, #1
   1a498:	beq	1a4a4 <__assert_fail@plt+0x916c>
   1a49c:	mov	r0, r6
   1a4a0:	bl	11314 <close@plt>
   1a4a4:	cmp	r4, #0
   1a4a8:	rsblt	r0, r4, #0
   1a4ac:	movge	r0, #0
   1a4b0:	add	sp, sp, #8
   1a4b4:	pop	{r4, r5, r6, r7, r8, pc}
   1a4b8:	andeq	r6, r0, sp, asr #8
   1a4bc:	push	{r3, r4, r5, lr}
   1a4c0:	mov	r5, r0
   1a4c4:	bl	1a3ec <__assert_fail@plt+0x90b4>
   1a4c8:	ldr	r4, [pc, #64]	; 1a510 <__assert_fail@plt+0x91d8>
   1a4cc:	add	r4, pc, r4
   1a4d0:	subs	r3, r0, #0
   1a4d4:	beq	1a508 <__assert_fail@plt+0x91d0>
   1a4d8:	ldr	r3, [pc, #52]	; 1a514 <__assert_fail@plt+0x91dc>
   1a4dc:	ldr	r3, [r4, r3]
   1a4e0:	ldr	r4, [r3]
   1a4e4:	bl	11188 <strerror@plt>
   1a4e8:	ldr	r1, [pc, #40]	; 1a518 <__assert_fail@plt+0x91e0>
   1a4ec:	mov	r2, r5
   1a4f0:	add	r1, pc, r1
   1a4f4:	mov	r3, r0
   1a4f8:	mov	r0, r4
   1a4fc:	bl	111f4 <fprintf@plt>
   1a500:	mvn	r0, #0
   1a504:	pop	{r3, r4, r5, pc}
   1a508:	mov	r0, r3
   1a50c:	pop	{r3, r4, r5, pc}
   1a510:	andeq	r9, r1, ip, lsr #22
   1a514:	andeq	r0, r0, r4, lsr r1
   1a518:	andeq	r7, r0, r2, lsr #15
   1a51c:	push	{r4, r5, r6, r7, r8, lr}
   1a520:	mov	r4, r0
   1a524:	ldrb	r3, [r0]
   1a528:	mov	r8, r1
   1a52c:	mov	r7, r2
   1a530:	cmp	r3, #0
   1a534:	bne	1a540 <__assert_fail@plt+0x9208>
   1a538:	mvn	r0, #0
   1a53c:	pop	{r4, r5, r6, r7, r8, pc}
   1a540:	mvn	r3, #0
   1a544:	str	r3, [r2]
   1a548:	ldrb	r5, [r0]
   1a54c:	ldr	r0, [pc, #156]	; 1a5f0 <__assert_fail@plt+0x92b8>
   1a550:	mov	r1, r5
   1a554:	add	r0, pc, r0
   1a558:	bl	111e8 <strchr@plt>
   1a55c:	cmp	r0, #0
   1a560:	moveq	r5, r0
   1a564:	beq	1a584 <__assert_fail@plt+0x924c>
   1a568:	ldrb	r3, [r4, #1]
   1a56c:	cmp	r5, r3
   1a570:	addne	r4, r4, #1
   1a574:	bne	1a584 <__assert_fail@plt+0x924c>
   1a578:	cmp	r5, #104	; 0x68
   1a57c:	add	r4, r4, #2
   1a580:	moveq	r5, #98	; 0x62
   1a584:	ldrb	r6, [r4]
   1a588:	cmp	r6, #0
   1a58c:	beq	1a538 <__assert_fail@plt+0x9200>
   1a590:	ldr	r0, [pc, #92]	; 1a5f4 <__assert_fail@plt+0x92bc>
   1a594:	mov	r1, r6
   1a598:	add	r0, pc, r0
   1a59c:	bl	111e8 <strchr@plt>
   1a5a0:	cmp	r0, #0
   1a5a4:	beq	1a538 <__assert_fail@plt+0x9200>
   1a5a8:	cmp	r6, #115	; 0x73
   1a5ac:	beq	1a5d8 <__assert_fail@plt+0x92a0>
   1a5b0:	cmp	r5, #98	; 0x62
   1a5b4:	moveq	r3, #1
   1a5b8:	beq	1a5d4 <__assert_fail@plt+0x929c>
   1a5bc:	cmp	r5, #104	; 0x68
   1a5c0:	moveq	r3, #2
   1a5c4:	beq	1a5d4 <__assert_fail@plt+0x929c>
   1a5c8:	cmp	r5, #108	; 0x6c
   1a5cc:	mvnne	r3, #0
   1a5d0:	moveq	r3, #4
   1a5d4:	str	r3, [r7]
   1a5d8:	ldrb	r3, [r4]
   1a5dc:	str	r3, [r8]
   1a5e0:	ldrb	r0, [r4, #1]
   1a5e4:	subs	r0, r0, #0
   1a5e8:	mvnne	r0, #0
   1a5ec:	pop	{r4, r5, r6, r7, r8, pc}
   1a5f0:	andeq	r7, r0, pc, asr r7
   1a5f4:	andeq	r7, r0, r0, lsr #14
   1a5f8:	push	{r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1a5fc:	subs	r4, r1, #0
   1a600:	mov	r6, r0
   1a604:	beq	1a758 <__assert_fail@plt+0x9420>
   1a608:	bl	1a074 <__assert_fail@plt+0x8d3c>
   1a60c:	subs	r5, r0, #0
   1a610:	beq	1a668 <__assert_fail@plt+0x9330>
   1a614:	ldr	r0, [pc, #324]	; 1a760 <__assert_fail@plt+0x9428>
   1a618:	mov	r5, r6
   1a61c:	ldr	r7, [pc, #320]	; 1a764 <__assert_fail@plt+0x942c>
   1a620:	add	r4, r6, r4
   1a624:	add	r0, pc, r0
   1a628:	ldr	r6, [pc, #312]	; 1a768 <__assert_fail@plt+0x9430>
   1a62c:	bl	110b0 <printf@plt>
   1a630:	add	r7, pc, r7
   1a634:	add	r6, pc, r6
   1a638:	mov	r1, r5
   1a63c:	mov	r0, r7
   1a640:	bl	110b0 <printf@plt>
   1a644:	mov	r0, r5
   1a648:	bl	111dc <strlen@plt>
   1a64c:	add	r0, r0, #1
   1a650:	add	r5, r5, r0
   1a654:	cmp	r5, r4
   1a658:	bcs	1a758 <__assert_fail@plt+0x9420>
   1a65c:	mov	r0, r6
   1a660:	bl	110b0 <printf@plt>
   1a664:	b	1a638 <__assert_fail@plt+0x9300>
   1a668:	ands	r7, r4, #3
   1a66c:	bne	1a6f8 <__assert_fail@plt+0x93c0>
   1a670:	ldr	r0, [pc, #244]	; 1a76c <__assert_fail@plt+0x9434>
   1a674:	mov	r5, r7
   1a678:	ldr	r8, [pc, #240]	; 1a770 <__assert_fail@plt+0x9438>
   1a67c:	add	r0, pc, r0
   1a680:	ldr	r7, [pc, #236]	; 1a774 <__assert_fail@plt+0x943c>
   1a684:	bl	110b0 <printf@plt>
   1a688:	add	r3, r4, #3
   1a68c:	cmp	r4, #0
   1a690:	ldr	r9, [pc, #224]	; 1a778 <__assert_fail@plt+0x9440>
   1a694:	add	r7, pc, r7
   1a698:	add	r8, pc, r8
   1a69c:	movlt	r4, r3
   1a6a0:	add	r9, pc, r9
   1a6a4:	asr	r4, r4, #2
   1a6a8:	cmp	r5, r4
   1a6ac:	bge	1a6f0 <__assert_fail@plt+0x93b8>
   1a6b0:	ldr	r3, [r6, r5, lsl #2]
   1a6b4:	sub	r2, r4, #1
   1a6b8:	cmp	r5, r2
   1a6bc:	mov	r0, r9
   1a6c0:	ubfx	r1, r3, #8, #8
   1a6c4:	add	r5, r5, #1
   1a6c8:	str	r3, [sp, #4]
   1a6cc:	movge	r2, r7
   1a6d0:	movlt	r2, r8
   1a6d4:	lsl	r1, r1, #16
   1a6d8:	orr	r1, r1, r3, lsl #24
   1a6dc:	orr	r1, r1, r3, lsr #24
   1a6e0:	ubfx	r3, r3, #16, #8
   1a6e4:	orr	r1, r1, r3, lsl #8
   1a6e8:	bl	110b0 <printf@plt>
   1a6ec:	b	1a6a8 <__assert_fail@plt+0x9370>
   1a6f0:	mov	r0, #62	; 0x3e
   1a6f4:	b	1a74c <__assert_fail@plt+0x9414>
   1a6f8:	ldr	r0, [pc, #124]	; 1a77c <__assert_fail@plt+0x9444>
   1a6fc:	ldr	r7, [pc, #124]	; 1a780 <__assert_fail@plt+0x9448>
   1a700:	add	r0, pc, r0
   1a704:	ldr	r8, [pc, #120]	; 1a784 <__assert_fail@plt+0x944c>
   1a708:	bl	110b0 <printf@plt>
   1a70c:	ldr	r9, [pc, #116]	; 1a788 <__assert_fail@plt+0x9450>
   1a710:	add	r7, pc, r7
   1a714:	add	r8, pc, r8
   1a718:	add	r9, pc, r9
   1a71c:	cmp	r5, r4
   1a720:	bge	1a748 <__assert_fail@plt+0x9410>
   1a724:	sub	r3, r4, #1
   1a728:	ldrb	r1, [r6, r5]
   1a72c:	cmp	r5, r3
   1a730:	mov	r0, r9
   1a734:	add	r5, r5, #1
   1a738:	movge	r2, r7
   1a73c:	movlt	r2, r8
   1a740:	bl	110b0 <printf@plt>
   1a744:	b	1a71c <__assert_fail@plt+0x93e4>
   1a748:	mov	r0, #93	; 0x5d
   1a74c:	add	sp, sp, #12
   1a750:	pop	{r4, r5, r6, r7, r8, r9, lr}
   1a754:	b	11224 <putchar@plt>
   1a758:	add	sp, sp, #12
   1a75c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   1a760:	andeq	r7, r0, r8, ror #9
   1a764:	strdeq	r5, [r0], -pc	; <UNPREDICTABLE>
   1a768:	andeq	r7, r0, ip, lsl r5
   1a76c:	andeq	r7, r0, r1, asr #12
   1a770:	muleq	r0, r2, r6
   1a774:	ldrdeq	r6, [r0], -r2
   1a778:	andeq	r7, r0, r2, lsr #12
   1a77c:	andeq	r7, r0, fp, asr #11
   1a780:	andeq	r6, r0, r6, asr r6
   1a784:	andeq	r7, r0, r6, lsl r6
   1a788:			; <UNDEFINED> instruction: 0x000075b8
   1a78c:	ldr	r0, [pc, #24]	; 1a7ac <__assert_fail@plt+0x9474>
   1a790:	ldr	r1, [pc, #24]	; 1a7b0 <__assert_fail@plt+0x9478>
   1a794:	push	{r3, lr}
   1a798:	add	r0, pc, r0
   1a79c:	add	r1, pc, r1
   1a7a0:	bl	110b0 <printf@plt>
   1a7a4:	mov	r0, #0
   1a7a8:	bl	111c4 <exit@plt>
   1a7ac:	andeq	r7, r0, pc, lsr r5
   1a7b0:	andeq	r7, r0, r8, asr #10
   1a7b4:	ldr	ip, [pc, #444]	; 1a978 <__assert_fail@plt+0x9640>
   1a7b8:	subs	r8, r0, #0
   1a7bc:	push	{r0, r1, r2, r3, r4, r5, r6, r7, fp, lr}
   1a7c0:	add	ip, pc, ip
   1a7c4:	mov	r6, r1
   1a7c8:	mov	lr, r2
   1a7cc:	mov	r5, r3
   1a7d0:	ldrne	r3, [pc, #420]	; 1a97c <__assert_fail@plt+0x9644>
   1a7d4:	ldreq	r3, [pc, #420]	; 1a980 <__assert_fail@plt+0x9648>
   1a7d8:	ldr	r3, [ip, r3]
   1a7dc:	mov	r2, r6
   1a7e0:	ldr	ip, [pc, #412]	; 1a984 <__assert_fail@plt+0x964c>
   1a7e4:	mov	r6, #0
   1a7e8:	ldr	r1, [pc, #408]	; 1a988 <__assert_fail@plt+0x9650>
   1a7ec:	mov	r7, r6
   1a7f0:	add	ip, pc, ip
   1a7f4:	ldr	r4, [r3]
   1a7f8:	add	r1, pc, r1
   1a7fc:	ldr	r0, [ip]
   1a800:	ldrh	r3, [ip, #4]
   1a804:	str	r0, [sp, #16]
   1a808:	mov	r0, r4
   1a80c:	strh	r3, [sp, #20]
   1a810:	mov	r3, lr
   1a814:	bl	111f4 <fprintf@plt>
   1a818:	ldr	r0, [r5, r6]
   1a81c:	cmp	r0, #0
   1a820:	beq	1a84c <__assert_fail@plt+0x9514>
   1a824:	bl	111dc <strlen@plt>
   1a828:	add	r3, r5, r6
   1a82c:	add	r6, r6, #16
   1a830:	ldr	r3, [r3, #4]
   1a834:	cmp	r3, #1
   1a838:	addne	r0, r0, #1
   1a83c:	addeq	r0, r0, #7
   1a840:	cmp	r7, r0
   1a844:	movlt	r7, r0
   1a848:	b	1a818 <__assert_fail@plt+0x94e0>
   1a84c:	ldr	r6, [sp, #40]	; 0x28
   1a850:	ldr	r9, [pc, #308]	; 1a98c <__assert_fail@plt+0x9654>
   1a854:	ldr	sl, [pc, #308]	; 1a990 <__assert_fail@plt+0x9658>
   1a858:	sub	r6, r6, #4
   1a85c:	ldr	fp, [pc, #304]	; 1a994 <__assert_fail@plt+0x965c>
   1a860:	add	r9, pc, r9
   1a864:	add	sl, pc, sl
   1a868:	add	fp, pc, fp
   1a86c:	ldr	r3, [r5]
   1a870:	cmp	r3, #0
   1a874:	beq	1a950 <__assert_fail@plt+0x9618>
   1a878:	ldr	r3, [r6, #4]
   1a87c:	cmp	r3, #0
   1a880:	bne	1a8a8 <__assert_fail@plt+0x9570>
   1a884:	ldr	r3, [pc, #268]	; 1a998 <__assert_fail@plt+0x9660>
   1a888:	movw	r2, #450	; 0x1c2
   1a88c:	ldr	r0, [pc, #264]	; 1a99c <__assert_fail@plt+0x9664>
   1a890:	ldr	r1, [pc, #264]	; 1a9a0 <__assert_fail@plt+0x9668>
   1a894:	add	r3, pc, r3
   1a898:	add	r0, pc, r0
   1a89c:	add	r3, r3, #13
   1a8a0:	add	r1, pc, r1
   1a8a4:	bl	11338 <__assert_fail@plt>
   1a8a8:	ldr	r2, [r5, #12]
   1a8ac:	cmp	r2, #126	; 0x7e
   1a8b0:	ble	1a8c4 <__assert_fail@plt+0x958c>
   1a8b4:	mov	r0, sl
   1a8b8:	mov	r1, r4
   1a8bc:	bl	112f0 <fputs@plt>
   1a8c0:	b	1a8d0 <__assert_fail@plt+0x9598>
   1a8c4:	mov	r0, r4
   1a8c8:	mov	r1, r9
   1a8cc:	bl	111f4 <fprintf@plt>
   1a8d0:	ldr	r3, [r5, #4]
   1a8d4:	cmp	r3, #0
   1a8d8:	bne	1a8f8 <__assert_fail@plt+0x95c0>
   1a8dc:	ldr	r1, [pc, #192]	; 1a9a4 <__assert_fail@plt+0x966c>
   1a8e0:	mov	r0, r4
   1a8e4:	mov	r2, r7
   1a8e8:	ldr	r3, [r5]
   1a8ec:	add	r1, pc, r1
   1a8f0:	bl	111f4 <fprintf@plt>
   1a8f4:	b	1a934 <__assert_fail@plt+0x95fc>
   1a8f8:	ldr	r2, [r5]
   1a8fc:	mov	r0, r2
   1a900:	str	r2, [sp, #12]
   1a904:	bl	111dc <strlen@plt>
   1a908:	sub	r3, r7, #6
   1a90c:	mov	r1, fp
   1a910:	ldr	r2, [sp, #12]
   1a914:	rsb	r0, r0, r3
   1a918:	ldr	r3, [pc, #136]	; 1a9a8 <__assert_fail@plt+0x9670>
   1a91c:	str	r0, [sp]
   1a920:	mov	r0, r4
   1a924:	add	r3, pc, r3
   1a928:	str	r3, [sp, #4]
   1a92c:	add	r3, sp, #16
   1a930:	bl	111f4 <fprintf@plt>
   1a934:	ldr	r1, [pc, #112]	; 1a9ac <__assert_fail@plt+0x9674>
   1a938:	mov	r0, r4
   1a93c:	ldr	r2, [r6, #4]!
   1a940:	add	r5, r5, #16
   1a944:	add	r1, pc, r1
   1a948:	bl	111f4 <fprintf@plt>
   1a94c:	b	1a86c <__assert_fail@plt+0x9534>
   1a950:	cmp	r8, #0
   1a954:	moveq	r0, r8
   1a958:	beq	1a974 <__assert_fail@plt+0x963c>
   1a95c:	ldr	r1, [pc, #76]	; 1a9b0 <__assert_fail@plt+0x9678>
   1a960:	mov	r0, r4
   1a964:	mov	r2, r8
   1a968:	add	r1, pc, r1
   1a96c:	bl	111f4 <fprintf@plt>
   1a970:	mov	r0, #1
   1a974:	bl	111c4 <exit@plt>
   1a978:	andeq	r9, r1, r8, lsr r8
   1a97c:	andeq	r0, r0, r4, lsr r1
   1a980:	andeq	r0, r0, r8, asr r1
   1a984:	andeq	r7, r0, r2, ror #10
   1a988:	strdeq	r7, [r0], -r6
   1a98c:	andeq	r7, r0, ip, asr #9
   1a990:	andeq	r7, r0, r1, asr #9
   1a994:	ldrdeq	r7, [r0], -r3
   1a998:	andeq	r7, r0, lr, lsl #7
   1a99c:	andeq	r7, r0, r1, ror r4
   1a9a0:	andeq	r7, r0, r3, lsr #7
   1a9a4:	andeq	r7, r0, r8, asr #8
   1a9a8:	andeq	r6, r0, r2, asr #8
   1a9ac:	andeq	r6, r0, r8, asr #2
   1a9b0:	ldrdeq	r7, [r0], -lr
   1a9b4:	ldr	r3, [pc, #228]	; 1aaa0 <__assert_fail@plt+0x9768>
   1a9b8:	ldr	r2, [pc, #228]	; 1aaa4 <__assert_fail@plt+0x976c>
   1a9bc:	add	r3, pc, r3
   1a9c0:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1a9c4:	add	r2, pc, r2
   1a9c8:	ldm	r3, {r0, r1, ip}
   1a9cc:	ldr	r6, [r3, #12]
   1a9d0:	ldr	r7, [pc, #208]	; 1aaa8 <__assert_fail@plt+0x9770>
   1a9d4:	ldr	r8, [pc, #208]	; 1aaac <__assert_fail@plt+0x9774>
   1a9d8:	ldr	r1, [r1, ip, lsl #2]
   1a9dc:	add	r7, pc, r7
   1a9e0:	ldr	ip, [r3, #16]
   1a9e4:	add	r8, pc, r8
   1a9e8:	ldr	r4, [pc, #192]	; 1aab0 <__assert_fail@plt+0x9778>
   1a9ec:	ldr	r1, [r1, #28]
   1a9f0:	add	r4, pc, r4
   1a9f4:	add	r0, r0, r1
   1a9f8:	ldr	r1, [r3, #20]
   1a9fc:	ldr	r3, [pc, #176]	; 1aab4 <__assert_fail@plt+0x977c>
   1aa00:	ldr	r3, [r2, r3]
   1aa04:	ldr	r3, [r3]
   1aa08:	cmp	r3, r6
   1aa0c:	mov	r5, r3
   1aa10:	bcs	1aa8c <__assert_fail@plt+0x9754>
   1aa14:	add	r9, r8, r0, lsl #1
   1aa18:	ldrb	r2, [r3], #1
   1aa1c:	add	r9, r9, #1024	; 0x400
   1aa20:	cmp	r2, #0
   1aa24:	ldrsh	r9, [r9]
   1aa28:	ldrbne	r2, [r7, r2, lsl #2]
   1aa2c:	moveq	r2, #1
   1aa30:	cmp	r9, #0
   1aa34:	movne	r1, r5
   1aa38:	movne	ip, r0
   1aa3c:	add	sl, r4, r0, lsl #1
   1aa40:	add	r5, sl, #1904	; 0x770
   1aa44:	ldrsh	r9, [r5, #4]
   1aa48:	add	r9, r9, r2
   1aa4c:	add	r9, r4, r9, lsl #1
   1aa50:	add	r5, r9, #2256	; 0x8d0
   1aa54:	add	r5, r5, #12
   1aa58:	ldrsh	r5, [r5]
   1aa5c:	cmp	r5, r0
   1aa60:	beq	1aa80 <__assert_fail@plt+0x9748>
   1aa64:	add	r0, sl, #1344	; 0x540
   1aa68:	add	r0, r0, #12
   1aa6c:	ldrsh	r0, [r0]
   1aa70:	cmp	r0, #165	; 0xa5
   1aa74:	addgt	r2, r4, r2, lsl #2
   1aa78:	ldrbgt	r2, [r2, #1716]	; 0x6b4
   1aa7c:	b	1aa3c <__assert_fail@plt+0x9704>
   1aa80:	add	r2, r9, #3152	; 0xc50
   1aa84:	ldrsh	r0, [r2, #14]
   1aa88:	b	1aa08 <__assert_fail@plt+0x96d0>
   1aa8c:	ldr	r3, [pc, #36]	; 1aab8 <__assert_fail@plt+0x9780>
   1aa90:	add	r3, pc, r3
   1aa94:	str	ip, [r3, #16]
   1aa98:	str	r1, [r3, #20]
   1aa9c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1aaa0:	andeq	sl, r1, ip, lsr #2
   1aaa4:	andeq	r9, r1, r4, lsr r6
   1aaa8:	andeq	r7, r0, ip, ror r3
   1aaac:	andeq	r7, r0, r4, ror r3
   1aab0:	andeq	r7, r0, r8, ror #6
   1aab4:	andeq	r0, r0, r0, lsr #2
   1aab8:	andeq	sl, r1, r8, asr r0
   1aabc:	ldr	r3, [pc, #80]	; 1ab14 <__assert_fail@plt+0x97dc>
   1aac0:	push	{r4, lr}
   1aac4:	add	r3, pc, r3
   1aac8:	ldr	r1, [pc, #72]	; 1ab18 <__assert_fail@plt+0x97e0>
   1aacc:	ldmib	r3, {r0, ip}
   1aad0:	add	r1, pc, r1
   1aad4:	ldr	r2, [r0, ip, lsl #2]
   1aad8:	ldr	r4, [r2, #16]
   1aadc:	ldr	r2, [r2, #8]
   1aae0:	str	r4, [r3, #24]
   1aae4:	ldr	r4, [pc, #48]	; 1ab1c <__assert_fail@plt+0x97e4>
   1aae8:	str	r2, [r3, #12]
   1aaec:	ldr	r4, [r1, r4]
   1aaf0:	str	r2, [r4]
   1aaf4:	ldr	r4, [pc, #36]	; 1ab20 <__assert_fail@plt+0x97e8>
   1aaf8:	ldr	r0, [r0, ip, lsl #2]
   1aafc:	ldr	r1, [r1, r4]
   1ab00:	ldr	r0, [r0]
   1ab04:	str	r0, [r1]
   1ab08:	ldrb	r2, [r2]
   1ab0c:	strb	r2, [r3, #28]
   1ab10:	pop	{r4, pc}
   1ab14:	andeq	sl, r1, r4, lsr #32
   1ab18:	andeq	r9, r1, r8, lsr #10
   1ab1c:	andeq	r0, r0, r0, lsr #2
   1ab20:	andeq	r0, r0, r0, lsl r1
   1ab24:	push	{r0, r1, r2, r3}
   1ab28:	push	{r0, r1, r4, lr}
   1ab2c:	add	r3, sp, #20
   1ab30:	ldr	r4, [pc, #60]	; 1ab74 <__assert_fail@plt+0x983c>
   1ab34:	ldr	r2, [pc, #60]	; 1ab78 <__assert_fail@plt+0x9840>
   1ab38:	add	r4, pc, r4
   1ab3c:	ldr	r1, [pc, #56]	; 1ab7c <__assert_fail@plt+0x9844>
   1ab40:	str	r3, [sp, #4]
   1ab44:	ldr	r0, [r4, r2]
   1ab48:	add	r1, pc, r1
   1ab4c:	ldr	r2, [sp, #16]
   1ab50:	bl	1941c <__assert_fail@plt+0x80e4>
   1ab54:	ldr	r3, [pc, #36]	; 1ab80 <__assert_fail@plt+0x9848>
   1ab58:	mov	r2, #1
   1ab5c:	ldr	r3, [r4, r3]
   1ab60:	strb	r2, [r3]
   1ab64:	add	sp, sp, #8
   1ab68:	pop	{r4, lr}
   1ab6c:	add	sp, sp, #16
   1ab70:	bx	lr
   1ab74:	andeq	r9, r1, r0, asr #9
   1ab78:	andeq	r0, r0, r4, lsl r1
   1ab7c:	andeq	r8, r0, r8, lsl #4
   1ab80:	strdeq	r0, [r0], -ip
   1ab84:	push	{r3, lr}
   1ab88:	mov	r2, r0
   1ab8c:	ldr	r3, [pc, #32]	; 1abb4 <__assert_fail@plt+0x987c>
   1ab90:	ldr	r1, [pc, #32]	; 1abb8 <__assert_fail@plt+0x9880>
   1ab94:	add	r3, pc, r3
   1ab98:	ldr	r3, [r3, r1]
   1ab9c:	ldr	r1, [pc, #24]	; 1abbc <__assert_fail@plt+0x9884>
   1aba0:	ldr	r0, [r3]
   1aba4:	add	r1, pc, r1
   1aba8:	bl	111f4 <fprintf@plt>
   1abac:	mov	r0, #2
   1abb0:	bl	111c4 <exit@plt>
   1abb4:	andeq	r9, r1, r4, ror #8
   1abb8:	andeq	r0, r0, r4, lsr r1
   1abbc:	andeq	r5, r0, r8, ror #29
   1abc0:	cmp	r0, #0
   1abc4:	bxeq	lr
   1abc8:	ldr	r2, [r0, #4]
   1abcc:	mov	r3, #0
   1abd0:	str	r3, [r0, #16]
   1abd4:	strb	r3, [r2]
   1abd8:	ldr	r2, [r0, #4]
   1abdc:	strb	r3, [r2, #1]
   1abe0:	ldr	r2, [r0, #4]
   1abe4:	str	r3, [r0, #44]	; 0x2c
   1abe8:	str	r2, [r0, #8]
   1abec:	mov	r2, #1
   1abf0:	str	r2, [r0, #28]
   1abf4:	ldr	r2, [pc, #32]	; 1ac1c <__assert_fail@plt+0x98e4>
   1abf8:	add	r2, pc, r2
   1abfc:	ldr	r3, [r2, #4]
   1ac00:	cmp	r3, #0
   1ac04:	bxeq	lr
   1ac08:	ldr	r2, [r2, #8]
   1ac0c:	ldr	r3, [r3, r2, lsl #2]
   1ac10:	cmp	r0, r3
   1ac14:	bxne	lr
   1ac18:	b	1aabc <__assert_fail@plt+0x9784>
   1ac1c:	strdeq	r9, [r1], -r0
   1ac20:	push	{r3, r4, r5, r6, r7, lr}
   1ac24:	mov	r4, r0
   1ac28:	mov	r7, r1
   1ac2c:	bl	11200 <__errno_location@plt>
   1ac30:	ldr	r6, [r0]
   1ac34:	mov	r5, r0
   1ac38:	mov	r0, r4
   1ac3c:	bl	1abc0 <__assert_fail@plt+0x9888>
   1ac40:	ldr	r2, [pc, #72]	; 1ac90 <__assert_fail@plt+0x9958>
   1ac44:	mov	r3, #1
   1ac48:	str	r3, [r4, #40]	; 0x28
   1ac4c:	add	r2, pc, r2
   1ac50:	str	r7, [r4]
   1ac54:	ldr	r3, [r2, #4]
   1ac58:	cmp	r3, #0
   1ac5c:	beq	1ac70 <__assert_fail@plt+0x9938>
   1ac60:	ldr	r2, [r2, #8]
   1ac64:	ldr	r3, [r3, r2, lsl #2]
   1ac68:	cmp	r4, r3
   1ac6c:	beq	1ac80 <__assert_fail@plt+0x9948>
   1ac70:	mov	r3, #1
   1ac74:	str	r3, [r4, #32]
   1ac78:	mov	r3, #0
   1ac7c:	str	r3, [r4, #36]	; 0x24
   1ac80:	mov	r3, #0
   1ac84:	str	r3, [r4, #24]
   1ac88:	str	r6, [r5]
   1ac8c:	pop	{r3, r4, r5, r6, r7, pc}
   1ac90:	muleq	r1, ip, lr
   1ac94:	ldr	r3, [pc, #16]	; 1acac <__assert_fail@plt+0x9974>
   1ac98:	ldr	r2, [pc, #16]	; 1acb0 <__assert_fail@plt+0x9978>
   1ac9c:	add	r3, pc, r3
   1aca0:	ldr	r3, [r3, r2]
   1aca4:	ldr	r0, [r3]
   1aca8:	bx	lr
   1acac:	andeq	r9, r1, ip, asr r3
   1acb0:	andeq	r0, r0, ip, lsr #2
   1acb4:	ldr	r3, [pc, #16]	; 1accc <__assert_fail@plt+0x9994>
   1acb8:	ldr	r2, [pc, #16]	; 1acd0 <__assert_fail@plt+0x9998>
   1acbc:	add	r3, pc, r3
   1acc0:	ldr	r3, [r3, r2]
   1acc4:	ldr	r0, [r3]
   1acc8:	bx	lr
   1accc:	andeq	r9, r1, ip, lsr r3
   1acd0:	andeq	r0, r0, r0, lsl r1
   1acd4:	ldr	r3, [pc, #16]	; 1acec <__assert_fail@plt+0x99b4>
   1acd8:	ldr	r2, [pc, #16]	; 1acf0 <__assert_fail@plt+0x99b8>
   1acdc:	add	r3, pc, r3
   1ace0:	ldr	r3, [r3, r2]
   1ace4:	ldr	r0, [r3]
   1ace8:	bx	lr
   1acec:	andeq	r9, r1, ip, lsl r3
   1acf0:	andeq	r0, r0, ip, lsr r1
   1acf4:	ldr	r3, [pc, #16]	; 1ad0c <__assert_fail@plt+0x99d4>
   1acf8:	ldr	r2, [pc, #16]	; 1ad10 <__assert_fail@plt+0x99d8>
   1acfc:	add	r3, pc, r3
   1ad00:	ldr	r3, [r3, r2]
   1ad04:	ldr	r0, [r3]
   1ad08:	bx	lr
   1ad0c:	strdeq	r9, [r1], -ip
   1ad10:	andeq	r0, r0, r0, asr r1
   1ad14:	ldr	r3, [pc, #16]	; 1ad2c <__assert_fail@plt+0x99f4>
   1ad18:	ldr	r2, [pc, #16]	; 1ad30 <__assert_fail@plt+0x99f8>
   1ad1c:	add	r3, pc, r3
   1ad20:	ldr	r3, [r3, r2]
   1ad24:	ldr	r0, [r3]
   1ad28:	bx	lr
   1ad2c:	ldrdeq	r9, [r1], -ip
   1ad30:	andeq	r0, r0, r0, lsr #2
   1ad34:	ldr	r3, [pc, #16]	; 1ad4c <__assert_fail@plt+0x9a14>
   1ad38:	ldr	r2, [pc, #16]	; 1ad50 <__assert_fail@plt+0x9a18>
   1ad3c:	add	r3, pc, r3
   1ad40:	ldr	r3, [r3, r2]
   1ad44:	str	r0, [r3]
   1ad48:	bx	lr
   1ad4c:			; <UNDEFINED> instruction: 0x000192bc
   1ad50:	andeq	r0, r0, ip, lsr #2
   1ad54:	ldr	r3, [pc, #16]	; 1ad6c <__assert_fail@plt+0x9a34>
   1ad58:	ldr	r2, [pc, #16]	; 1ad70 <__assert_fail@plt+0x9a38>
   1ad5c:	add	r3, pc, r3
   1ad60:	ldr	r3, [r3, r2]
   1ad64:	str	r0, [r3]
   1ad68:	bx	lr
   1ad6c:	muleq	r1, ip, r2
   1ad70:	andeq	r0, r0, r0, lsl r1
   1ad74:	ldr	r3, [pc, #16]	; 1ad8c <__assert_fail@plt+0x9a54>
   1ad78:	ldr	r2, [pc, #16]	; 1ad90 <__assert_fail@plt+0x9a58>
   1ad7c:	add	r3, pc, r3
   1ad80:	ldr	r3, [r3, r2]
   1ad84:	str	r0, [r3]
   1ad88:	bx	lr
   1ad8c:	andeq	r9, r1, ip, ror r2
   1ad90:	andeq	r0, r0, ip, lsr r1
   1ad94:	ldr	r3, [pc, #16]	; 1adac <__assert_fail@plt+0x9a74>
   1ad98:	ldr	r2, [pc, #16]	; 1adb0 <__assert_fail@plt+0x9a78>
   1ad9c:	add	r3, pc, r3
   1ada0:	ldr	r3, [r3, r2]
   1ada4:	ldr	r0, [r3]
   1ada8:	bx	lr
   1adac:	andeq	r9, r1, ip, asr r2
   1adb0:	andeq	r0, r0, r0, lsr r1
   1adb4:	ldr	r3, [pc, #16]	; 1adcc <__assert_fail@plt+0x9a94>
   1adb8:	ldr	r2, [pc, #16]	; 1add0 <__assert_fail@plt+0x9a98>
   1adbc:	add	r3, pc, r3
   1adc0:	ldr	r3, [r3, r2]
   1adc4:	str	r0, [r3]
   1adc8:	bx	lr
   1adcc:	andeq	r9, r1, ip, lsr r2
   1add0:	andeq	r0, r0, r0, lsr r1
   1add4:	b	11170 <malloc@plt>
   1add8:	push	{r4, r5, r6, lr}
   1addc:	mov	r6, r0
   1ade0:	mov	r0, #48	; 0x30
   1ade4:	mov	r5, r1
   1ade8:	bl	1add4 <__assert_fail@plt+0x9a9c>
   1adec:	subs	r4, r0, #0
   1adf0:	bne	1ae00 <__assert_fail@plt+0x9ac8>
   1adf4:	ldr	r0, [pc, #56]	; 1ae34 <__assert_fail@plt+0x9afc>
   1adf8:	add	r0, pc, r0
   1adfc:	bl	1ab84 <__assert_fail@plt+0x984c>
   1ae00:	str	r5, [r4, #12]
   1ae04:	add	r0, r5, #2
   1ae08:	bl	1add4 <__assert_fail@plt+0x9a9c>
   1ae0c:	cmp	r0, #0
   1ae10:	str	r0, [r4, #4]
   1ae14:	beq	1adf4 <__assert_fail@plt+0x9abc>
   1ae18:	mov	r3, #1
   1ae1c:	mov	r0, r4
   1ae20:	str	r3, [r4, #20]
   1ae24:	mov	r1, r6
   1ae28:	bl	1ac20 <__assert_fail@plt+0x98e8>
   1ae2c:	mov	r0, r4
   1ae30:	pop	{r4, r5, r6, pc}
   1ae34:	andeq	r7, r0, r6, ror #30
   1ae38:	b	1111c <realloc@plt>
   1ae3c:	push	{r4, r5, r6, lr}
   1ae40:	ldr	r4, [pc, #148]	; 1aedc <__assert_fail@plt+0x9ba4>
   1ae44:	add	r4, pc, r4
   1ae48:	ldr	r5, [r4, #4]
   1ae4c:	cmp	r5, #0
   1ae50:	bne	1ae90 <__assert_fail@plt+0x9b58>
   1ae54:	mov	r0, #4
   1ae58:	bl	1add4 <__assert_fail@plt+0x9a9c>
   1ae5c:	cmp	r0, #0
   1ae60:	str	r0, [r4, #4]
   1ae64:	bne	1ae74 <__assert_fail@plt+0x9b3c>
   1ae68:	ldr	r0, [pc, #112]	; 1aee0 <__assert_fail@plt+0x9ba8>
   1ae6c:	add	r0, pc, r0
   1ae70:	bl	1ab84 <__assert_fail@plt+0x984c>
   1ae74:	mov	r1, r5
   1ae78:	mov	r2, #4
   1ae7c:	bl	11218 <memset@plt>
   1ae80:	mov	r3, #1
   1ae84:	str	r5, [r4, #8]
   1ae88:	str	r3, [r4, #32]
   1ae8c:	pop	{r4, r5, r6, pc}
   1ae90:	ldr	r6, [r4, #32]
   1ae94:	ldr	r2, [r4, #8]
   1ae98:	sub	r3, r6, #1
   1ae9c:	cmp	r2, r3
   1aea0:	popcc	{r4, r5, r6, pc}
   1aea4:	add	r6, r6, #8
   1aea8:	mov	r0, r5
   1aeac:	lsl	r1, r6, #2
   1aeb0:	bl	1ae38 <__assert_fail@plt+0x9b00>
   1aeb4:	cmp	r0, #0
   1aeb8:	str	r0, [r4, #4]
   1aebc:	beq	1ae68 <__assert_fail@plt+0x9b30>
   1aec0:	ldr	r3, [r4, #32]
   1aec4:	mov	r1, #0
   1aec8:	mov	r2, #32
   1aecc:	add	r0, r0, r3, lsl #2
   1aed0:	bl	11218 <memset@plt>
   1aed4:	str	r6, [r4, #32]
   1aed8:	pop	{r4, r5, r6, pc}
   1aedc:	andeq	r9, r1, r4, lsr #25
   1aee0:	andeq	r7, r0, lr, lsl pc
   1aee4:	ldr	r2, [pc, #128]	; 1af6c <__assert_fail@plt+0x9c34>
   1aee8:	push	{r3, r4, r5, r6, r7, lr}
   1aeec:	add	r2, pc, r2
   1aef0:	ldr	r4, [pc, #120]	; 1af70 <__assert_fail@plt+0x9c38>
   1aef4:	mov	r5, r0
   1aef8:	ldr	r3, [r2, #4]
   1aefc:	add	r4, pc, r4
   1af00:	cmp	r3, #0
   1af04:	beq	1af18 <__assert_fail@plt+0x9be0>
   1af08:	ldr	r2, [r2, #8]
   1af0c:	ldr	r3, [r3, r2, lsl #2]
   1af10:	cmp	r3, #0
   1af14:	bne	1af40 <__assert_fail@plt+0x9c08>
   1af18:	bl	1ae3c <__assert_fail@plt+0x9b04>
   1af1c:	ldr	r3, [pc, #80]	; 1af74 <__assert_fail@plt+0x9c3c>
   1af20:	mov	r1, #16384	; 0x4000
   1af24:	add	r3, pc, r3
   1af28:	ldmib	r3, {r6, r7}
   1af2c:	ldr	r3, [pc, #68]	; 1af78 <__assert_fail@plt+0x9c40>
   1af30:	ldr	r3, [r4, r3]
   1af34:	ldr	r0, [r3]
   1af38:	bl	1add8 <__assert_fail@plt+0x9aa0>
   1af3c:	str	r0, [r6, r7, lsl #2]
   1af40:	ldr	r2, [pc, #52]	; 1af7c <__assert_fail@plt+0x9c44>
   1af44:	mov	r1, r5
   1af48:	add	r2, pc, r2
   1af4c:	ldr	r3, [r2, #4]
   1af50:	cmp	r3, #0
   1af54:	ldrne	r2, [r2, #8]
   1af58:	moveq	r0, r3
   1af5c:	ldrne	r0, [r3, r2, lsl #2]
   1af60:	bl	1ac20 <__assert_fail@plt+0x98e8>
   1af64:	pop	{r3, r4, r5, r6, r7, lr}
   1af68:	b	1aabc <__assert_fail@plt+0x9784>
   1af6c:	strdeq	r9, [r1], -ip
   1af70:	strdeq	r9, [r1], -ip
   1af74:	andeq	r9, r1, r4, asr #23
   1af78:	andeq	r0, r0, r0, lsl r1
   1af7c:	andeq	r9, r1, r0, lsr #23
   1af80:	push	{r3, r4, r5, lr}
   1af84:	mov	r4, r0
   1af88:	bl	1ae3c <__assert_fail@plt+0x9b04>
   1af8c:	ldr	r2, [pc, #112]	; 1b004 <__assert_fail@plt+0x9ccc>
   1af90:	add	r2, pc, r2
   1af94:	ldr	r3, [r2, #4]
   1af98:	cmp	r3, #0
   1af9c:	beq	1aff8 <__assert_fail@plt+0x9cc0>
   1afa0:	ldr	r1, [r2, #8]
   1afa4:	ldr	r0, [r3, r1, lsl #2]
   1afa8:	cmp	r0, r4
   1afac:	popeq	{r3, r4, r5, pc}
   1afb0:	cmp	r0, #0
   1afb4:	beq	1afd8 <__assert_fail@plt+0x9ca0>
   1afb8:	ldr	r0, [r2, #12]
   1afbc:	ldrb	ip, [r2, #28]
   1afc0:	ldr	r2, [r2, #24]
   1afc4:	strb	ip, [r0]
   1afc8:	ldr	ip, [r3, r1, lsl #2]
   1afcc:	str	r0, [ip, #8]
   1afd0:	ldr	r1, [r3, r1, lsl #2]
   1afd4:	str	r2, [r1, #16]
   1afd8:	ldr	r5, [pc, #40]	; 1b008 <__assert_fail@plt+0x9cd0>
   1afdc:	add	r5, pc, r5
   1afe0:	ldr	r2, [r5, #8]
   1afe4:	str	r4, [r3, r2, lsl #2]
   1afe8:	bl	1aabc <__assert_fail@plt+0x9784>
   1afec:	mov	r3, #1
   1aff0:	str	r3, [r5, #36]	; 0x24
   1aff4:	pop	{r3, r4, r5, pc}
   1aff8:	cmp	r4, #0
   1affc:	bne	1afd8 <__assert_fail@plt+0x9ca0>
   1b000:	pop	{r3, r4, r5, pc}
   1b004:	andeq	r9, r1, r8, asr fp
   1b008:	andeq	r9, r1, ip, lsl #22
   1b00c:	cmp	r1, #1
   1b010:	push	{r3, r4, r5, r6, r7, lr}
   1b014:	mov	r6, r0
   1b018:	bls	1b090 <__assert_fail@plt+0x9d58>
   1b01c:	sub	r7, r1, #2
   1b020:	ldrb	r0, [r0, r7]
   1b024:	cmp	r0, #0
   1b028:	bne	1b090 <__assert_fail@plt+0x9d58>
   1b02c:	add	r1, r6, r1
   1b030:	ldrb	r5, [r1, #-1]
   1b034:	cmp	r5, #0
   1b038:	popne	{r3, r4, r5, r6, r7, pc}
   1b03c:	mov	r0, #48	; 0x30
   1b040:	bl	1add4 <__assert_fail@plt+0x9a9c>
   1b044:	subs	r4, r0, #0
   1b048:	bne	1b058 <__assert_fail@plt+0x9d20>
   1b04c:	ldr	r0, [pc, #68]	; 1b098 <__assert_fail@plt+0x9d60>
   1b050:	add	r0, pc, r0
   1b054:	bl	1ab84 <__assert_fail@plt+0x984c>
   1b058:	mov	r3, #1
   1b05c:	str	r7, [r4, #12]
   1b060:	str	r6, [r4, #4]
   1b064:	str	r6, [r4, #8]
   1b068:	str	r5, [r4, #20]
   1b06c:	str	r5, [r4]
   1b070:	str	r7, [r4, #16]
   1b074:	str	r5, [r4, #24]
   1b078:	str	r3, [r4, #28]
   1b07c:	str	r5, [r4, #40]	; 0x28
   1b080:	str	r5, [r4, #44]	; 0x2c
   1b084:	bl	1af80 <__assert_fail@plt+0x9c48>
   1b088:	mov	r0, r4
   1b08c:	pop	{r3, r4, r5, r6, r7, pc}
   1b090:	mov	r0, #0
   1b094:	pop	{r3, r4, r5, r6, r7, pc}
   1b098:	andeq	r7, r0, fp, ror #26
   1b09c:	push	{r4, r5, r6, lr}
   1b0a0:	add	r4, r1, #2
   1b0a4:	mov	r6, r0
   1b0a8:	mov	r5, r1
   1b0ac:	mov	r0, r4
   1b0b0:	bl	1add4 <__assert_fail@plt+0x9a9c>
   1b0b4:	subs	r2, r0, #0
   1b0b8:	movne	r3, #0
   1b0bc:	ldreq	r0, [pc, #84]	; 1b118 <__assert_fail@plt+0x9de0>
   1b0c0:	addeq	r0, pc, r0
   1b0c4:	beq	1b108 <__assert_fail@plt+0x9dd0>
   1b0c8:	cmp	r3, r5
   1b0cc:	ldrbne	r1, [r6, r3]
   1b0d0:	strbne	r1, [r2, r3]
   1b0d4:	addne	r3, r3, #1
   1b0d8:	bne	1b0c8 <__assert_fail@plt+0x9d90>
   1b0dc:	add	r0, r2, r3
   1b0e0:	mov	r1, #0
   1b0e4:	strb	r1, [r0, #1]
   1b0e8:	mov	r0, r2
   1b0ec:	strb	r1, [r2, r3]
   1b0f0:	mov	r1, r4
   1b0f4:	bl	1b00c <__assert_fail@plt+0x9cd4>
   1b0f8:	subs	r3, r0, #0
   1b0fc:	bne	1b10c <__assert_fail@plt+0x9dd4>
   1b100:	ldr	r0, [pc, #20]	; 1b11c <__assert_fail@plt+0x9de4>
   1b104:	add	r0, pc, r0
   1b108:	bl	1ab84 <__assert_fail@plt+0x984c>
   1b10c:	mov	r2, #1
   1b110:	str	r2, [r3, #20]
   1b114:	pop	{r4, r5, r6, pc}
   1b118:	andeq	r7, r0, r5, lsr #26
   1b11c:	andeq	r7, r0, sl, lsl #26
   1b120:	push	{r4, lr}
   1b124:	mov	r4, r0
   1b128:	bl	111dc <strlen@plt>
   1b12c:	mov	r1, r0
   1b130:	mov	r0, r4
   1b134:	pop	{r4, lr}
   1b138:	b	1b09c <__assert_fail@plt+0x9d64>
   1b13c:	push	{r3, r4, r5, lr}
   1b140:	subs	r5, r0, #0
   1b144:	popeq	{r3, r4, r5, pc}
   1b148:	bl	1ae3c <__assert_fail@plt+0x9b04>
   1b14c:	ldr	r1, [pc, #116]	; 1b1c8 <__assert_fail@plt+0x9e90>
   1b150:	add	r1, pc, r1
   1b154:	ldr	r3, [r1, #4]
   1b158:	cmp	r3, #0
   1b15c:	beq	1b1a8 <__assert_fail@plt+0x9e70>
   1b160:	ldr	r2, [r1, #8]
   1b164:	ldr	r0, [r3, r2, lsl #2]
   1b168:	cmp	r0, #0
   1b16c:	beq	1b190 <__assert_fail@plt+0x9e58>
   1b170:	ldr	ip, [r1, #12]
   1b174:	ldrb	r0, [r1, #28]
   1b178:	ldr	r1, [r1, #24]
   1b17c:	strb	r0, [ip]
   1b180:	ldr	r0, [r3, r2, lsl #2]
   1b184:	str	ip, [r0, #8]
   1b188:	ldr	r0, [r3, r2, lsl #2]
   1b18c:	str	r1, [r0, #16]
   1b190:	ldr	r1, [r3, r2, lsl #2]
   1b194:	cmp	r1, #0
   1b198:	ldrne	r1, [pc, #44]	; 1b1cc <__assert_fail@plt+0x9e94>
   1b19c:	addne	r2, r2, #1
   1b1a0:	addne	r1, pc, r1
   1b1a4:	strne	r2, [r1, #8]
   1b1a8:	ldr	r4, [pc, #32]	; 1b1d0 <__assert_fail@plt+0x9e98>
   1b1ac:	add	r4, pc, r4
   1b1b0:	ldr	r2, [r4, #8]
   1b1b4:	str	r5, [r3, r2, lsl #2]
   1b1b8:	bl	1aabc <__assert_fail@plt+0x9784>
   1b1bc:	mov	r3, #1
   1b1c0:	str	r3, [r4, #36]	; 0x24
   1b1c4:	pop	{r3, r4, r5, pc}
   1b1c8:	muleq	r1, r8, r9
   1b1cc:	andeq	r9, r1, r8, asr #18
   1b1d0:	andeq	r9, r1, ip, lsr r9
   1b1d4:	b	110e0 <free@plt>
   1b1d8:	push	{r4, lr}
   1b1dc:	subs	r4, r0, #0
   1b1e0:	popeq	{r4, pc}
   1b1e4:	ldr	r2, [pc, #64]	; 1b22c <__assert_fail@plt+0x9ef4>
   1b1e8:	add	r2, pc, r2
   1b1ec:	ldr	r3, [r2, #4]
   1b1f0:	cmp	r3, #0
   1b1f4:	beq	1b20c <__assert_fail@plt+0x9ed4>
   1b1f8:	ldr	r2, [r2, #8]
   1b1fc:	ldr	r1, [r3, r2, lsl #2]
   1b200:	cmp	r4, r1
   1b204:	moveq	r1, #0
   1b208:	streq	r1, [r3, r2, lsl #2]
   1b20c:	ldr	r3, [r4, #20]
   1b210:	cmp	r3, #0
   1b214:	beq	1b220 <__assert_fail@plt+0x9ee8>
   1b218:	ldr	r0, [r4, #4]
   1b21c:	bl	1b1d4 <__assert_fail@plt+0x9e9c>
   1b220:	mov	r0, r4
   1b224:	pop	{r4, lr}
   1b228:	b	1b1d4 <__assert_fail@plt+0x9e9c>
   1b22c:	andeq	r9, r1, r0, lsl #18
   1b230:	push	{r4, lr}
   1b234:	ldr	r4, [pc, #108]	; 1b2a8 <__assert_fail@plt+0x9f70>
   1b238:	add	r4, pc, r4
   1b23c:	ldr	r3, [r4, #4]
   1b240:	cmp	r3, #0
   1b244:	popeq	{r4, pc}
   1b248:	ldr	r2, [r4, #8]
   1b24c:	ldr	r0, [r3, r2, lsl #2]
   1b250:	cmp	r0, #0
   1b254:	popeq	{r4, pc}
   1b258:	bl	1b1d8 <__assert_fail@plt+0x9ea0>
   1b25c:	ldr	r2, [r4, #8]
   1b260:	ldr	r3, [r4, #4]
   1b264:	mov	r1, #0
   1b268:	cmp	r2, r1
   1b26c:	str	r1, [r3, r2, lsl #2]
   1b270:	subne	r2, r2, #1
   1b274:	strne	r2, [r4, #8]
   1b278:	cmp	r3, #0
   1b27c:	popeq	{r4, pc}
   1b280:	ldr	r4, [pc, #36]	; 1b2ac <__assert_fail@plt+0x9f74>
   1b284:	add	r4, pc, r4
   1b288:	ldr	r2, [r4, #8]
   1b28c:	ldr	r3, [r3, r2, lsl #2]
   1b290:	cmp	r3, #0
   1b294:	popeq	{r4, pc}
   1b298:	bl	1aabc <__assert_fail@plt+0x9784>
   1b29c:	mov	r3, #1
   1b2a0:	str	r3, [r4, #36]	; 0x24
   1b2a4:	pop	{r4, pc}
   1b2a8:			; <UNDEFINED> instruction: 0x000198b0
   1b2ac:	andeq	r9, r1, r4, ror #16
   1b2b0:	ldr	r3, [pc, #4020]	; 1c26c <__assert_fail@plt+0xaf34>
   1b2b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b2b8:	add	r3, pc, r3
   1b2bc:	ldr	r5, [pc, #4012]	; 1c270 <__assert_fail@plt+0xaf38>
   1b2c0:	sub	sp, sp, #92	; 0x5c
   1b2c4:	ldr	r2, [r3, #40]	; 0x28
   1b2c8:	add	r5, pc, r5
   1b2cc:	cmp	r2, #0
   1b2d0:	bne	1b370 <__assert_fail@plt+0xa038>
   1b2d4:	ldr	r1, [r3]
   1b2d8:	mov	r2, #1
   1b2dc:	str	r2, [r3, #40]	; 0x28
   1b2e0:	cmp	r1, #0
   1b2e4:	streq	r2, [r3]
   1b2e8:	ldr	r3, [pc, #3972]	; 1c274 <__assert_fail@plt+0xaf3c>
   1b2ec:	ldr	r4, [r5, r3]
   1b2f0:	ldr	r3, [r4]
   1b2f4:	cmp	r3, #0
   1b2f8:	ldreq	r3, [pc, #3960]	; 1c278 <__assert_fail@plt+0xaf40>
   1b2fc:	ldreq	r3, [r5, r3]
   1b300:	ldreq	r3, [r3]
   1b304:	streq	r3, [r4]
   1b308:	ldr	r3, [pc, #3948]	; 1c27c <__assert_fail@plt+0xaf44>
   1b30c:	ldr	r3, [r5, r3]
   1b310:	ldr	r2, [r3]
   1b314:	cmp	r2, #0
   1b318:	ldreq	r2, [pc, #3936]	; 1c280 <__assert_fail@plt+0xaf48>
   1b31c:	ldreq	r2, [r5, r2]
   1b320:	ldreq	r2, [r2]
   1b324:	streq	r2, [r3]
   1b328:	ldr	r2, [pc, #3924]	; 1c284 <__assert_fail@plt+0xaf4c>
   1b32c:	add	r2, pc, r2
   1b330:	ldr	r3, [r2, #4]
   1b334:	cmp	r3, #0
   1b338:	beq	1b34c <__assert_fail@plt+0xa014>
   1b33c:	ldr	r2, [r2, #8]
   1b340:	ldr	r3, [r3, r2, lsl #2]
   1b344:	cmp	r3, #0
   1b348:	bne	1b36c <__assert_fail@plt+0xa034>
   1b34c:	bl	1ae3c <__assert_fail@plt+0x9b04>
   1b350:	ldr	r3, [pc, #3888]	; 1c288 <__assert_fail@plt+0xaf50>
   1b354:	ldr	r0, [r4]
   1b358:	mov	r1, #16384	; 0x4000
   1b35c:	add	r3, pc, r3
   1b360:	ldmib	r3, {r6, r7}
   1b364:	bl	1add8 <__assert_fail@plt+0x9aa0>
   1b368:	str	r0, [r6, r7, lsl #2]
   1b36c:	bl	1aabc <__assert_fail@plt+0x9784>
   1b370:	ldr	ip, [pc, #3860]	; 1c28c <__assert_fail@plt+0xaf54>
   1b374:	add	ip, pc, ip
   1b378:	str	ip, [sp, #16]
   1b37c:	ldr	ip, [pc, #3852]	; 1c290 <__assert_fail@plt+0xaf58>
   1b380:	add	ip, pc, ip
   1b384:	str	ip, [sp, #20]
   1b388:	ldr	ip, [pc, #3844]	; 1c294 <__assert_fail@plt+0xaf5c>
   1b38c:	add	ip, pc, ip
   1b390:	str	ip, [sp, #32]
   1b394:	ldr	ip, [pc, #3836]	; 1c298 <__assert_fail@plt+0xaf60>
   1b398:	add	ip, pc, ip
   1b39c:	str	ip, [sp, #28]
   1b3a0:	ldr	ip, [sp, #16]
   1b3a4:	ldr	ip, [ip, #12]
   1b3a8:	str	ip, [sp, #8]
   1b3ac:	ldr	ip, [sp, #16]
   1b3b0:	ldr	r6, [sp, #8]
   1b3b4:	ldrb	r3, [ip, #28]
   1b3b8:	ldr	ip, [sp, #8]
   1b3bc:	strb	r3, [ip]
   1b3c0:	ldr	ip, [sp, #16]
   1b3c4:	ldr	r2, [ip, #8]
   1b3c8:	ldr	r3, [ip, #4]
   1b3cc:	ldr	r0, [ip]
   1b3d0:	ldr	ip, [pc, #3780]	; 1c29c <__assert_fail@plt+0xaf64>
   1b3d4:	ldr	r3, [r3, r2, lsl #2]
   1b3d8:	add	ip, pc, ip
   1b3dc:	str	ip, [sp, #48]	; 0x30
   1b3e0:	ldr	r3, [r3, #28]
   1b3e4:	add	r0, r0, r3
   1b3e8:	ldr	r1, [pc, #3760]	; 1c2a0 <__assert_fail@plt+0xaf68>
   1b3ec:	mov	r2, r6
   1b3f0:	ldr	ip, [sp, #48]	; 0x30
   1b3f4:	add	r1, pc, r1
   1b3f8:	ldr	r3, [ip, #16]
   1b3fc:	ldr	r7, [ip, #20]
   1b400:	mov	ip, r1
   1b404:	add	r6, r1, r0, lsl #1
   1b408:	mov	lr, r2
   1b40c:	add	r6, r6, #1024	; 0x400
   1b410:	ldrb	r4, [lr]
   1b414:	add	r2, r2, #1
   1b418:	ldrsh	r6, [r6]
   1b41c:	ldrb	r4, [r1, r4, lsl #2]
   1b420:	cmp	r6, #0
   1b424:	movne	r7, lr
   1b428:	movne	r3, r0
   1b42c:	add	r8, ip, r0, lsl #1
   1b430:	add	lr, r8, #1904	; 0x770
   1b434:	ldrsh	r6, [lr, #4]
   1b438:	add	r6, r6, r4
   1b43c:	add	r6, ip, r6, lsl #1
   1b440:	add	lr, r6, #2256	; 0x8d0
   1b444:	add	lr, lr, #12
   1b448:	ldrsh	lr, [lr]
   1b44c:	cmp	lr, r0
   1b450:	beq	1b46c <__assert_fail@plt+0xa134>
   1b454:	add	r8, r8, #1344	; 0x540
   1b458:	ldrsh	r0, [r8, #12]
   1b45c:	cmp	r0, #165	; 0xa5
   1b460:	addgt	r4, ip, r4, lsl #2
   1b464:	ldrbgt	r4, [r4, #1716]	; 0x6b4
   1b468:	b	1b42c <__assert_fail@plt+0xa0f4>
   1b46c:	add	r6, r6, #3152	; 0xc50
   1b470:	ldrsh	r0, [r6, #14]
   1b474:	cmp	r0, #165	; 0xa5
   1b478:	bne	1b404 <__assert_fail@plt+0xa0cc>
   1b47c:	ldr	r2, [pc, #3616]	; 1c2a4 <__assert_fail@plt+0xaf6c>
   1b480:	mov	r0, r3
   1b484:	ldr	ip, [pc, #3612]	; 1c2a8 <__assert_fail@plt+0xaf70>
   1b488:	add	r2, pc, r2
   1b48c:	str	r2, [sp, #44]	; 0x2c
   1b490:	add	ip, pc, ip
   1b494:	str	ip, [sp, #52]	; 0x34
   1b498:	str	r3, [r2, #16]
   1b49c:	str	r7, [r2, #20]
   1b4a0:	ldr	r2, [pc, #3588]	; 1c2ac <__assert_fail@plt+0xaf74>
   1b4a4:	ldr	ip, [sp, #52]	; 0x34
   1b4a8:	ldr	r2, [r5, r2]
   1b4ac:	add	r0, ip, r0, lsl #1
   1b4b0:	ldr	ip, [sp, #8]
   1b4b4:	add	r0, r0, #1024	; 0x400
   1b4b8:	str	r2, [sp, #12]
   1b4bc:	str	ip, [r2]
   1b4c0:	ldr	r2, [pc, #3560]	; 1c2b0 <__assert_fail@plt+0xaf78>
   1b4c4:	ldrsh	r3, [r0]
   1b4c8:	ldr	r4, [sp, #12]
   1b4cc:	ldr	r6, [r5, r2]
   1b4d0:	rsb	r2, ip, r7
   1b4d4:	ldr	ip, [sp, #44]	; 0x2c
   1b4d8:	str	r2, [r6]
   1b4dc:	ldrb	r2, [r7]
   1b4e0:	str	r7, [ip, #12]
   1b4e4:	strb	r2, [ip, #28]
   1b4e8:	mov	r2, #0
   1b4ec:	ldr	ip, [pc, #3520]	; 1c2b4 <__assert_fail@plt+0xaf7c>
   1b4f0:	strb	r2, [r7]
   1b4f4:	add	ip, pc, ip
   1b4f8:	str	ip, [sp, #24]
   1b4fc:	cmp	r3, #36	; 0x24
   1b500:	addls	pc, pc, r3, lsl #2
   1b504:	b	1ca84 <__assert_fail@plt+0xb74c>
   1b508:	b	1b59c <__assert_fail@plt+0xa264>
   1b50c:	b	1b5b0 <__assert_fail@plt+0xa278>
   1b510:	b	1b678 <__assert_fail@plt+0xa340>
   1b514:	b	1b7f8 <__assert_fail@plt+0xa4c0>
   1b518:	b	1b878 <__assert_fail@plt+0xa540>
   1b51c:	b	1b8ec <__assert_fail@plt+0xa5b4>
   1b520:	b	1b940 <__assert_fail@plt+0xa608>
   1b524:	b	1b9a4 <__assert_fail@plt+0xa66c>
   1b528:	b	1ba08 <__assert_fail@plt+0xa6d0>
   1b52c:	b	1ba6c <__assert_fail@plt+0xa734>
   1b530:	b	1bad0 <__assert_fail@plt+0xa798>
   1b534:	b	1bb48 <__assert_fail@plt+0xa810>
   1b538:	b	1bc48 <__assert_fail@plt+0xa910>
   1b53c:	b	1bd1c <__assert_fail@plt+0xa9e4>
   1b540:	b	1bd74 <__assert_fail@plt+0xaa3c>
   1b544:	b	1bdf4 <__assert_fail@plt+0xaabc>
   1b548:	b	1be64 <__assert_fail@plt+0xab2c>
   1b54c:	b	1bec8 <__assert_fail@plt+0xab90>
   1b550:	b	1bf4c <__assert_fail@plt+0xac14>
   1b554:	b	1bfa0 <__assert_fail@plt+0xac68>
   1b558:	b	1bfb8 <__assert_fail@plt+0xac80>
   1b55c:	b	1bfd0 <__assert_fail@plt+0xac98>
   1b560:	b	1c020 <__assert_fail@plt+0xace8>
   1b564:	b	1c074 <__assert_fail@plt+0xad3c>
   1b568:	b	1c0c8 <__assert_fail@plt+0xad90>
   1b56c:	b	1c11c <__assert_fail@plt+0xade4>
   1b570:	b	1c170 <__assert_fail@plt+0xae38>
   1b574:	b	1c1c4 <__assert_fail@plt+0xae8c>
   1b578:	b	1c218 <__assert_fail@plt+0xaee0>
   1b57c:	b	1c400 <__assert_fail@plt+0xb0c8>
   1b580:	b	1c454 <__assert_fail@plt+0xb11c>
   1b584:	b	1c4d8 <__assert_fail@plt+0xb1a0>
   1b588:	b	1c548 <__assert_fail@plt+0xb210>
   1b58c:	b	1b7c8 <__assert_fail@plt+0xa490>
   1b590:	b	1b7c8 <__assert_fail@plt+0xa490>
   1b594:	b	1b7c8 <__assert_fail@plt+0xa490>
   1b598:	b	1b7c8 <__assert_fail@plt+0xa490>
   1b59c:	ldr	r3, [pc, #3348]	; 1c2b8 <__assert_fail@plt+0xaf80>
   1b5a0:	add	r3, pc, r3
   1b5a4:	ldrb	r2, [r3, #28]
   1b5a8:	strb	r2, [r7]
   1b5ac:	b	1c670 <__assert_fail@plt+0xb338>
   1b5b0:	ldr	r2, [r6]
   1b5b4:	cmp	r2, #0
   1b5b8:	beq	1b5ec <__assert_fail@plt+0xa2b4>
   1b5bc:	ldr	r3, [pc, #3320]	; 1c2bc <__assert_fail@plt+0xaf84>
   1b5c0:	add	r3, pc, r3
   1b5c4:	ldr	r1, [r3, #8]
   1b5c8:	ldr	r3, [r3, #4]
   1b5cc:	ldr	r3, [r3, r1, lsl #2]
   1b5d0:	ldr	r1, [r4]
   1b5d4:	add	r1, r1, r2
   1b5d8:	ldrb	r1, [r1, #-1]
   1b5dc:	subs	r0, r1, #10
   1b5e0:	rsbs	r1, r0, #0
   1b5e4:	adcs	r1, r1, r0
   1b5e8:	str	r1, [r3, #28]
   1b5ec:	ldr	r3, [pc, #3504]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1b5f0:	ldr	r1, [r4]
   1b5f4:	ldr	r0, [r5, r3]
   1b5f8:	bl	1929c <__assert_fail@plt+0x7f64>
   1b5fc:	ldr	r4, [r4]
   1b600:	mov	r1, #34	; 0x22
   1b604:	mov	r0, r4
   1b608:	bl	111e8 <strchr@plt>
   1b60c:	ldr	r3, [r6]
   1b610:	add	r4, r4, r3
   1b614:	mov	r3, #0
   1b618:	strb	r3, [r4, #-1]
   1b61c:	adds	r0, r0, #1
   1b620:	bne	1b648 <__assert_fail@plt+0xa310>
   1b624:	ldr	r3, [pc, #3220]	; 1c2c0 <__assert_fail@plt+0xaf88>
   1b628:	movw	r2, #277	; 0x115
   1b62c:	ldr	r0, [pc, #3216]	; 1c2c4 <__assert_fail@plt+0xaf8c>
   1b630:	ldr	r1, [pc, #3216]	; 1c2c8 <__assert_fail@plt+0xaf90>
   1b634:	add	r3, pc, r3
   1b638:	add	r0, pc, r0
   1b63c:	add	r3, r3, #4064	; 0xfe0
   1b640:	add	r1, pc, r1
   1b644:	b	1b754 <__assert_fail@plt+0xa41c>
   1b648:	bl	190d0 <__assert_fail@plt+0x7d98>
   1b64c:	ldr	r3, [pc, #3192]	; 1c2cc <__assert_fail@plt+0xaf94>
   1b650:	mov	r1, #16384	; 0x4000
   1b654:	ldr	r3, [r5, r3]
   1b658:	ldr	r3, [r3]
   1b65c:	ldr	r0, [r3]
   1b660:	ldr	r3, [pc, #3084]	; 1c274 <__assert_fail@plt+0xaf3c>
   1b664:	ldr	r3, [r5, r3]
   1b668:	str	r0, [r3]
   1b66c:	bl	1add8 <__assert_fail@plt+0x9aa0>
   1b670:	bl	1b13c <__assert_fail@plt+0x9e04>
   1b674:	b	1b3a0 <__assert_fail@plt+0xa068>
   1b678:	ldr	r2, [r6]
   1b67c:	cmp	r2, #0
   1b680:	beq	1b6b4 <__assert_fail@plt+0xa37c>
   1b684:	ldr	r3, [pc, #3140]	; 1c2d0 <__assert_fail@plt+0xaf98>
   1b688:	add	r3, pc, r3
   1b68c:	ldr	r1, [r3, #8]
   1b690:	ldr	r3, [r3, #4]
   1b694:	ldr	r3, [r3, r1, lsl #2]
   1b698:	ldr	r1, [r4]
   1b69c:	add	r1, r1, r2
   1b6a0:	ldrb	r1, [r1, #-1]
   1b6a4:	subs	fp, r1, #10
   1b6a8:	rsbs	r1, fp, #0
   1b6ac:	adcs	r1, r1, fp
   1b6b0:	str	r1, [r3, #28]
   1b6b4:	ldr	r3, [pc, #3304]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1b6b8:	ldr	r1, [r4]
   1b6bc:	ldr	r0, [r5, r3]
   1b6c0:	bl	1929c <__assert_fail@plt+0x7f64>
   1b6c4:	ldr	r4, [r4]
   1b6c8:	bl	111b8 <__ctype_b_loc@plt>
   1b6cc:	mov	r3, r4
   1b6d0:	ldr	r1, [r0]
   1b6d4:	ldrb	r2, [r3]
   1b6d8:	mov	r7, r3
   1b6dc:	add	r3, r3, #1
   1b6e0:	lsl	r2, r2, #1
   1b6e4:	ldrh	r2, [r1, r2]
   1b6e8:	tst	r2, #2048	; 0x800
   1b6ec:	beq	1b6d4 <__assert_fail@plt+0xa39c>
   1b6f0:	ldr	r6, [r6]
   1b6f4:	mov	r0, r4
   1b6f8:	mov	r1, #34	; 0x22
   1b6fc:	mov	r2, r6
   1b700:	sub	r6, r6, #1
   1b704:	bl	11254 <memchr@plt>
   1b708:	add	r4, r4, r6
   1b70c:	mov	r1, r0
   1b710:	mov	r3, r4
   1b714:	sub	r4, r4, #1
   1b718:	ldrb	r2, [r3]
   1b71c:	cmp	r2, #34	; 0x22
   1b720:	bne	1b710 <__assert_fail@plt+0xa3d8>
   1b724:	cmp	r1, #0
   1b728:	beq	1b734 <__assert_fail@plt+0xa3fc>
   1b72c:	cmp	r3, r1
   1b730:	bhi	1b758 <__assert_fail@plt+0xa420>
   1b734:	ldr	r0, [pc, #2968]	; 1c2d4 <__assert_fail@plt+0xaf9c>
   1b738:	mov	r2, #91	; 0x5b
   1b73c:	ldr	r1, [pc, #2964]	; 1c2d8 <__assert_fail@plt+0xafa0>
   1b740:	ldr	r3, [pc, #2964]	; 1c2dc <__assert_fail@plt+0xafa4>
   1b744:	add	r0, pc, r0
   1b748:	add	r1, pc, r1
   1b74c:	add	r3, pc, r3
   1b750:	add	r3, r3, #4080	; 0xff0
   1b754:	bl	11338 <__assert_fail@plt>
   1b758:	add	r4, sp, #76	; 0x4c
   1b75c:	rsb	r2, r1, r3
   1b760:	sub	r2, r2, #1
   1b764:	add	r1, r1, #1
   1b768:	mov	r0, r4
   1b76c:	bl	14e18 <__assert_fail@plt+0x3ae0>
   1b770:	ldr	r6, [sp, #80]	; 0x50
   1b774:	ldr	r2, [sp, #76]	; 0x4c
   1b778:	mov	r1, #0
   1b77c:	mov	r0, r6
   1b780:	sub	r2, r2, #1
   1b784:	bl	11254 <memchr@plt>
   1b788:	cmp	r0, #0
   1b78c:	beq	1b79c <__assert_fail@plt+0xa464>
   1b790:	ldr	r0, [pc, #2888]	; 1c2e0 <__assert_fail@plt+0xafa8>
   1b794:	add	r0, pc, r0
   1b798:	bl	1ab24 <__assert_fail@plt+0x97ec>
   1b79c:	mov	r0, r6
   1b7a0:	bl	19f20 <__assert_fail@plt+0x8be8>
   1b7a4:	mov	r6, r0
   1b7a8:	mov	r0, r7
   1b7ac:	bl	112c0 <atoi@plt>
   1b7b0:	sub	r1, r0, #1
   1b7b4:	mov	r0, r6
   1b7b8:	bl	194b8 <__assert_fail@plt+0x8180>
   1b7bc:	ldm	r4, {r0, r1, r2}
   1b7c0:	bl	14cd8 <__assert_fail@plt+0x39a0>
   1b7c4:	b	1b3a0 <__assert_fail@plt+0xa068>
   1b7c8:	bl	191a0 <__assert_fail@plt+0x7e68>
   1b7cc:	cmp	r0, #0
   1b7d0:	beq	1caa4 <__assert_fail@plt+0xb76c>
   1b7d4:	bl	1b230 <__assert_fail@plt+0x9ef8>
   1b7d8:	ldr	r2, [pc, #2796]	; 1c2cc <__assert_fail@plt+0xaf94>
   1b7dc:	ldr	r3, [pc, #2704]	; 1c274 <__assert_fail@plt+0xaf3c>
   1b7e0:	ldr	r2, [r5, r2]
   1b7e4:	ldr	r3, [r5, r3]
   1b7e8:	ldr	r2, [r2]
   1b7ec:	ldr	r2, [r2]
   1b7f0:	str	r2, [r3]
   1b7f4:	b	1b3a0 <__assert_fail@plt+0xa068>
   1b7f8:	ldr	r2, [r6]
   1b7fc:	cmp	r2, #0
   1b800:	beq	1b834 <__assert_fail@plt+0xa4fc>
   1b804:	ldr	r3, [pc, #2776]	; 1c2e4 <__assert_fail@plt+0xafac>
   1b808:	add	r3, pc, r3
   1b80c:	ldr	r1, [r3, #8]
   1b810:	ldr	r3, [r3, #4]
   1b814:	ldr	r3, [r3, r1, lsl #2]
   1b818:	ldr	r1, [r4]
   1b81c:	add	r1, r1, r2
   1b820:	ldrb	r1, [r1, #-1]
   1b824:	subs	sl, r1, #10
   1b828:	rsbs	r1, sl, #0
   1b82c:	adcs	r1, r1, sl
   1b830:	str	r1, [r3, #28]
   1b834:	ldr	r3, [pc, #2920]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1b838:	ldr	r1, [r4]
   1b83c:	ldr	r0, [r5, r3]
   1b840:	bl	1929c <__assert_fail@plt+0x7f64>
   1b844:	ldr	r1, [r4]
   1b848:	ldr	r3, [pc, #2712]	; 1c2e8 <__assert_fail@plt+0xafb0>
   1b84c:	add	r4, sp, #56	; 0x38
   1b850:	ldr	r2, [r6]
   1b854:	add	r1, r1, #1
   1b858:	mov	r0, r4
   1b85c:	sub	r2, r2, #2
   1b860:	ldr	r5, [r5, r3]
   1b864:	bl	14e18 <__assert_fail@plt+0x3ae0>
   1b868:	ldm	r4, {r0, r1, r2}
   1b86c:	stm	r5, {r0, r1, r2}
   1b870:	mov	r0, #276	; 0x114
   1b874:	b	1caa4 <__assert_fail@plt+0xb76c>
   1b878:	ldr	r2, [r6]
   1b87c:	cmp	r2, #0
   1b880:	beq	1b8b4 <__assert_fail@plt+0xa57c>
   1b884:	ldr	r3, [pc, #2656]	; 1c2ec <__assert_fail@plt+0xafb4>
   1b888:	add	r3, pc, r3
   1b88c:	ldr	r1, [r3, #8]
   1b890:	ldr	r3, [r3, #4]
   1b894:	ldr	r3, [r3, r1, lsl #2]
   1b898:	ldr	r1, [r4]
   1b89c:	add	r1, r1, r2
   1b8a0:	ldrb	r1, [r1, #-1]
   1b8a4:	subs	r9, r1, #10
   1b8a8:	rsbs	r1, r9, #0
   1b8ac:	adcs	r1, r1, r9
   1b8b0:	str	r1, [r3, #28]
   1b8b4:	ldr	r3, [pc, #2792]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1b8b8:	ldr	r1, [r4]
   1b8bc:	ldr	r0, [r5, r3]
   1b8c0:	bl	1929c <__assert_fail@plt+0x7f64>
   1b8c4:	ldr	r3, [pc, #2596]	; 1c2f0 <__assert_fail@plt+0xafb8>
   1b8c8:	mov	r2, #1
   1b8cc:	movw	r0, #258	; 0x102
   1b8d0:	add	r3, pc, r3
   1b8d4:	str	r2, [r3]
   1b8d8:	mov	r2, #7
   1b8dc:	ldr	r3, [pc, #2576]	; 1c2f4 <__assert_fail@plt+0xafbc>
   1b8e0:	add	r3, pc, r3
   1b8e4:	str	r2, [r3]
   1b8e8:	b	1caa4 <__assert_fail@plt+0xb76c>
   1b8ec:	ldr	r2, [r6]
   1b8f0:	cmp	r2, #0
   1b8f4:	beq	1b928 <__assert_fail@plt+0xa5f0>
   1b8f8:	ldr	r3, [pc, #2552]	; 1c2f8 <__assert_fail@plt+0xafc0>
   1b8fc:	add	r3, pc, r3
   1b900:	ldr	r1, [r3, #8]
   1b904:	ldr	r3, [r3, #4]
   1b908:	ldr	r3, [r3, r1, lsl #2]
   1b90c:	ldr	r1, [r4]
   1b910:	add	r1, r1, r2
   1b914:	ldrb	r1, [r1, #-1]
   1b918:	subs	r8, r1, #10
   1b91c:	rsbs	r1, r8, #0
   1b920:	adcs	r1, r1, r8
   1b924:	str	r1, [r3, #28]
   1b928:	ldr	r3, [pc, #2676]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1b92c:	ldr	r1, [r4]
   1b930:	ldr	r0, [r5, r3]
   1b934:	bl	1929c <__assert_fail@plt+0x7f64>
   1b938:	movw	r0, #259	; 0x103
   1b93c:	b	1caa4 <__assert_fail@plt+0xb76c>
   1b940:	ldr	r2, [r6]
   1b944:	cmp	r2, #0
   1b948:	beq	1b97c <__assert_fail@plt+0xa644>
   1b94c:	ldr	r3, [pc, #2472]	; 1c2fc <__assert_fail@plt+0xafc4>
   1b950:	add	r3, pc, r3
   1b954:	ldr	r1, [r3, #8]
   1b958:	ldr	r3, [r3, #4]
   1b95c:	ldr	r3, [r3, r1, lsl #2]
   1b960:	ldr	r1, [r4]
   1b964:	add	r1, r1, r2
   1b968:	ldrb	r1, [r1, #-1]
   1b96c:	subs	r7, r1, #10
   1b970:	rsbs	r1, r7, #0
   1b974:	adcs	r1, r1, r7
   1b978:	str	r1, [r3, #28]
   1b97c:	ldr	r3, [pc, #2592]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1b980:	ldr	r1, [r4]
   1b984:	ldr	r0, [r5, r3]
   1b988:	bl	1929c <__assert_fail@plt+0x7f64>
   1b98c:	ldr	r3, [pc, #2412]	; 1c300 <__assert_fail@plt+0xafc8>
   1b990:	mov	r2, #7
   1b994:	mov	r0, #260	; 0x104
   1b998:	add	r3, pc, r3
   1b99c:	str	r2, [r3]
   1b9a0:	b	1caa4 <__assert_fail@plt+0xb76c>
   1b9a4:	ldr	r2, [r6]
   1b9a8:	cmp	r2, #0
   1b9ac:	beq	1b9e0 <__assert_fail@plt+0xa6a8>
   1b9b0:	ldr	r3, [pc, #2380]	; 1c304 <__assert_fail@plt+0xafcc>
   1b9b4:	add	r3, pc, r3
   1b9b8:	ldr	r1, [r3, #8]
   1b9bc:	ldr	r3, [r3, #4]
   1b9c0:	ldr	r3, [r3, r1, lsl #2]
   1b9c4:	ldr	r1, [r4]
   1b9c8:	add	r1, r1, r2
   1b9cc:	ldrb	r1, [r1, #-1]
   1b9d0:	subs	r6, r1, #10
   1b9d4:	rsbs	r1, r6, #0
   1b9d8:	adcs	r1, r1, r6
   1b9dc:	str	r1, [r3, #28]
   1b9e0:	ldr	r3, [pc, #2492]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1b9e4:	ldr	r1, [r4]
   1b9e8:	ldr	r0, [r5, r3]
   1b9ec:	bl	1929c <__assert_fail@plt+0x7f64>
   1b9f0:	ldr	r3, [pc, #2320]	; 1c308 <__assert_fail@plt+0xafd0>
   1b9f4:	mov	r2, #7
   1b9f8:	movw	r0, #269	; 0x10d
   1b9fc:	add	r3, pc, r3
   1ba00:	str	r2, [r3]
   1ba04:	b	1caa4 <__assert_fail@plt+0xb76c>
   1ba08:	ldr	r2, [r6]
   1ba0c:	cmp	r2, #0
   1ba10:	beq	1ba44 <__assert_fail@plt+0xa70c>
   1ba14:	ldr	r3, [pc, #2288]	; 1c30c <__assert_fail@plt+0xafd4>
   1ba18:	add	r3, pc, r3
   1ba1c:	ldr	r1, [r3, #8]
   1ba20:	ldr	r3, [r3, #4]
   1ba24:	ldr	r3, [r3, r1, lsl #2]
   1ba28:	ldr	r1, [r4]
   1ba2c:	add	r1, r1, r2
   1ba30:	ldrb	r1, [r1, #-1]
   1ba34:	subs	lr, r1, #10
   1ba38:	rsbs	r1, lr, #0
   1ba3c:	adcs	r1, r1, lr
   1ba40:	str	r1, [r3, #28]
   1ba44:	ldr	r3, [pc, #2392]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1ba48:	ldr	r1, [r4]
   1ba4c:	ldr	r0, [r5, r3]
   1ba50:	bl	1929c <__assert_fail@plt+0x7f64>
   1ba54:	ldr	r3, [pc, #2228]	; 1c310 <__assert_fail@plt+0xafd8>
   1ba58:	mov	r2, #5
   1ba5c:	movw	r0, #270	; 0x10e
   1ba60:	add	r3, pc, r3
   1ba64:	str	r2, [r3]
   1ba68:	b	1caa4 <__assert_fail@plt+0xb76c>
   1ba6c:	ldr	r2, [r6]
   1ba70:	cmp	r2, #0
   1ba74:	beq	1baa8 <__assert_fail@plt+0xa770>
   1ba78:	ldr	r3, [pc, #2196]	; 1c314 <__assert_fail@plt+0xafdc>
   1ba7c:	add	r3, pc, r3
   1ba80:	ldr	r1, [r3, #8]
   1ba84:	ldr	r3, [r3, #4]
   1ba88:	ldr	r3, [r3, r1, lsl #2]
   1ba8c:	ldr	r1, [r4]
   1ba90:	add	r1, r1, r2
   1ba94:	ldrb	r1, [r1, #-1]
   1ba98:	subs	ip, r1, #10
   1ba9c:	rsbs	r1, ip, #0
   1baa0:	adcs	r1, r1, ip
   1baa4:	str	r1, [r3, #28]
   1baa8:	ldr	r3, [pc, #2292]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1baac:	ldr	r1, [r4]
   1bab0:	ldr	r0, [r5, r3]
   1bab4:	bl	1929c <__assert_fail@plt+0x7f64>
   1bab8:	ldr	r3, [pc, #2136]	; 1c318 <__assert_fail@plt+0xafe0>
   1babc:	mov	r2, #5
   1bac0:	movw	r0, #271	; 0x10f
   1bac4:	add	r3, pc, r3
   1bac8:	str	r2, [r3]
   1bacc:	b	1caa4 <__assert_fail@plt+0xb76c>
   1bad0:	ldr	r2, [r6]
   1bad4:	cmp	r2, #0
   1bad8:	beq	1bb0c <__assert_fail@plt+0xa7d4>
   1badc:	ldr	r3, [pc, #2104]	; 1c31c <__assert_fail@plt+0xafe4>
   1bae0:	add	r3, pc, r3
   1bae4:	ldr	r1, [r3, #8]
   1bae8:	ldr	r3, [r3, #4]
   1baec:	ldr	r3, [r3, r1, lsl #2]
   1baf0:	ldr	r1, [r4]
   1baf4:	add	r1, r1, r2
   1baf8:	ldrb	r1, [r1, #-1]
   1bafc:	subs	r0, r1, #10
   1bb00:	rsbs	r1, r0, #0
   1bb04:	adcs	r1, r1, r0
   1bb08:	str	r1, [r3, #28]
   1bb0c:	ldr	r3, [pc, #2192]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1bb10:	ldr	r1, [r4]
   1bb14:	ldr	r0, [r5, r3]
   1bb18:	bl	1929c <__assert_fail@plt+0x7f64>
   1bb1c:	ldr	r0, [r4]
   1bb20:	bl	19f20 <__assert_fail@plt+0x8be8>
   1bb24:	ldr	r3, [pc, #1980]	; 1c2e8 <__assert_fail@plt+0xafb0>
   1bb28:	ldr	r3, [r5, r3]
   1bb2c:	str	r0, [r3]
   1bb30:	ldr	r3, [r6]
   1bb34:	add	r0, r0, r3
   1bb38:	mov	r3, #0
   1bb3c:	strb	r3, [r0, #-1]
   1bb40:	movw	r0, #277	; 0x115
   1bb44:	b	1caa4 <__assert_fail@plt+0xb76c>
   1bb48:	ldr	r2, [r6]
   1bb4c:	cmp	r2, #0
   1bb50:	beq	1bb84 <__assert_fail@plt+0xa84c>
   1bb54:	ldr	r3, [pc, #1988]	; 1c320 <__assert_fail@plt+0xafe8>
   1bb58:	add	r3, pc, r3
   1bb5c:	ldr	r1, [r3, #8]
   1bb60:	ldr	r3, [r3, #4]
   1bb64:	ldr	r3, [r3, r1, lsl #2]
   1bb68:	ldr	r1, [r4]
   1bb6c:	add	r1, r1, r2
   1bb70:	ldrb	r1, [r1, #-1]
   1bb74:	subs	fp, r1, #10
   1bb78:	rsbs	r1, fp, #0
   1bb7c:	adcs	r1, r1, fp
   1bb80:	str	r1, [r3, #28]
   1bb84:	ldr	r3, [pc, #2072]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1bb88:	ldr	r1, [r4]
   1bb8c:	ldr	r0, [r5, r3]
   1bb90:	bl	1929c <__assert_fail@plt+0x7f64>
   1bb94:	bl	11200 <__errno_location@plt>
   1bb98:	mov	r2, #0
   1bb9c:	add	r1, sp, #76	; 0x4c
   1bba0:	str	r2, [r0]
   1bba4:	mov	r6, r0
   1bba8:	ldr	r0, [r4]
   1bbac:	bl	1123c <strtoull@plt>
   1bbb0:	ldr	r3, [pc, #1840]	; 1c2e8 <__assert_fail@plt+0xafb0>
   1bbb4:	ldr	r3, [r5, r3]
   1bbb8:	ldr	r5, [sp, #76]	; 0x4c
   1bbbc:	strd	r0, [r3]
   1bbc0:	ldrb	r3, [r5]
   1bbc4:	cmp	r3, #0
   1bbc8:	beq	1bbf8 <__assert_fail@plt+0xa8c0>
   1bbcc:	ldr	r1, [pc, #1872]	; 1c324 <__assert_fail@plt+0xafec>
   1bbd0:	mov	r0, r5
   1bbd4:	add	r1, pc, r1
   1bbd8:	bl	1132c <strspn@plt>
   1bbdc:	ldrb	r3, [r5, r0]
   1bbe0:	cmp	r3, #0
   1bbe4:	beq	1bbf8 <__assert_fail@plt+0xa8c0>
   1bbe8:	ldr	r0, [pc, #1848]	; 1c328 <__assert_fail@plt+0xaff0>
   1bbec:	ldr	r1, [r4]
   1bbf0:	add	r0, pc, r0
   1bbf4:	bl	1ab24 <__assert_fail@plt+0x97ec>
   1bbf8:	ldr	r3, [r6]
   1bbfc:	cmp	r3, #34	; 0x22
   1bc00:	bne	1bc18 <__assert_fail@plt+0xa8e0>
   1bc04:	ldr	r0, [pc, #1824]	; 1c32c <__assert_fail@plt+0xaff4>
   1bc08:	ldr	r1, [r4]
   1bc0c:	add	r0, pc, r0
   1bc10:	bl	1ab24 <__assert_fail@plt+0x97ec>
   1bc14:	b	1bc40 <__assert_fail@plt+0xa908>
   1bc18:	cmp	r3, #0
   1bc1c:	beq	1bc40 <__assert_fail@plt+0xa908>
   1bc20:	ldr	r0, [pc, #1800]	; 1c330 <__assert_fail@plt+0xaff8>
   1bc24:	mov	r2, #181	; 0xb5
   1bc28:	ldr	r1, [pc, #1796]	; 1c334 <__assert_fail@plt+0xaffc>
   1bc2c:	ldr	r3, [pc, #1796]	; 1c338 <__assert_fail@plt+0xb000>
   1bc30:	add	r0, pc, r0
   1bc34:	add	r1, pc, r1
   1bc38:	add	r3, pc, r3
   1bc3c:	b	1b750 <__assert_fail@plt+0xa418>
   1bc40:	movw	r0, #273	; 0x111
   1bc44:	b	1caa4 <__assert_fail@plt+0xb76c>
   1bc48:	ldr	r2, [r6]
   1bc4c:	cmp	r2, #0
   1bc50:	beq	1bc84 <__assert_fail@plt+0xa94c>
   1bc54:	ldr	r3, [pc, #1760]	; 1c33c <__assert_fail@plt+0xb004>
   1bc58:	add	r3, pc, r3
   1bc5c:	ldr	r1, [r3, #8]
   1bc60:	ldr	r3, [r3, #4]
   1bc64:	ldr	r3, [r3, r1, lsl #2]
   1bc68:	ldr	r1, [r4]
   1bc6c:	add	r1, r1, r2
   1bc70:	ldrb	r1, [r1, #-1]
   1bc74:	subs	sl, r1, #10
   1bc78:	rsbs	r1, sl, #0
   1bc7c:	adcs	r1, r1, sl
   1bc80:	str	r1, [r3, #28]
   1bc84:	ldr	r3, [pc, #1816]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1bc88:	add	r7, sp, #76	; 0x4c
   1bc8c:	ldr	r1, [r4]
   1bc90:	ldr	r0, [r5, r3]
   1bc94:	bl	1929c <__assert_fail@plt+0x7f64>
   1bc98:	ldr	r1, [r4]
   1bc9c:	ldr	r2, [r6]
   1bca0:	mov	r0, r7
   1bca4:	add	r1, r1, #1
   1bca8:	sub	r2, r2, #2
   1bcac:	bl	14e18 <__assert_fail@plt+0x3ae0>
   1bcb0:	ldr	r4, [sp, #76]	; 0x4c
   1bcb4:	ldr	r3, [pc, #1580]	; 1c2e8 <__assert_fail@plt+0xafb0>
   1bcb8:	cmp	r4, #1
   1bcbc:	ldr	r5, [r5, r3]
   1bcc0:	bne	1bce0 <__assert_fail@plt+0xa9a8>
   1bcc4:	ldr	r0, [pc, #1652]	; 1c340 <__assert_fail@plt+0xb008>
   1bcc8:	add	r0, pc, r0
   1bccc:	bl	1ab24 <__assert_fail@plt+0x97ec>
   1bcd0:	mov	r2, #0
   1bcd4:	mov	r3, #0
   1bcd8:	strd	r2, [r5]
   1bcdc:	b	1bd08 <__assert_fail@plt+0xa9d0>
   1bce0:	ldr	r3, [sp, #80]	; 0x50
   1bce4:	cmp	r4, #2
   1bce8:	ldrb	r2, [r3]
   1bcec:	mov	r3, #0
   1bcf0:	strd	r2, [r5]
   1bcf4:	ble	1bd08 <__assert_fail@plt+0xa9d0>
   1bcf8:	ldr	r0, [pc, #1604]	; 1c344 <__assert_fail@plt+0xb00c>
   1bcfc:	sub	r1, r4, #1
   1bd00:	add	r0, pc, r0
   1bd04:	bl	1ab24 <__assert_fail@plt+0x97ec>
   1bd08:	str	r4, [sp, #76]	; 0x4c
   1bd0c:	ldm	r7, {r0, r1, r2}
   1bd10:	bl	14cd8 <__assert_fail@plt+0x39a0>
   1bd14:	movw	r0, #274	; 0x112
   1bd18:	b	1caa4 <__assert_fail@plt+0xb76c>
   1bd1c:	ldr	r2, [r6]
   1bd20:	cmp	r2, #0
   1bd24:	beq	1bd58 <__assert_fail@plt+0xaa20>
   1bd28:	ldr	r3, [pc, #1560]	; 1c348 <__assert_fail@plt+0xb010>
   1bd2c:	add	r3, pc, r3
   1bd30:	ldr	r1, [r3, #8]
   1bd34:	ldr	r3, [r3, #4]
   1bd38:	ldr	r3, [r3, r1, lsl #2]
   1bd3c:	ldr	r1, [r4]
   1bd40:	add	r1, r1, r2
   1bd44:	ldrb	r1, [r1, #-1]
   1bd48:	subs	r9, r1, #10
   1bd4c:	rsbs	r1, r9, #0
   1bd50:	adcs	r1, r1, r9
   1bd54:	str	r1, [r3, #28]
   1bd58:	ldr	r3, [pc, #1604]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1bd5c:	ldr	r1, [r4]
   1bd60:	ldr	r0, [r5, r3]
   1bd64:	bl	1929c <__assert_fail@plt+0x7f64>
   1bd68:	ldr	r0, [r4]
   1bd6c:	add	r0, r0, #1
   1bd70:	b	1bddc <__assert_fail@plt+0xaaa4>
   1bd74:	ldr	r2, [r6]
   1bd78:	cmp	r2, #0
   1bd7c:	beq	1bdb0 <__assert_fail@plt+0xaa78>
   1bd80:	ldr	r3, [pc, #1476]	; 1c34c <__assert_fail@plt+0xb014>
   1bd84:	add	r3, pc, r3
   1bd88:	ldr	r1, [r3, #8]
   1bd8c:	ldr	r3, [r3, #4]
   1bd90:	ldr	r3, [r3, r1, lsl #2]
   1bd94:	ldr	r1, [r4]
   1bd98:	add	r1, r1, r2
   1bd9c:	ldrb	r1, [r1, #-1]
   1bda0:	subs	r8, r1, #10
   1bda4:	rsbs	r1, r8, #0
   1bda8:	adcs	r1, r1, r8
   1bdac:	str	r1, [r3, #28]
   1bdb0:	ldr	r3, [pc, #1516]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1bdb4:	ldr	r1, [r4]
   1bdb8:	ldr	r0, [r5, r3]
   1bdbc:	bl	1929c <__assert_fail@plt+0x7f64>
   1bdc0:	ldr	r2, [r4]
   1bdc4:	ldr	r3, [r6]
   1bdc8:	add	r3, r2, r3
   1bdcc:	mov	r2, #0
   1bdd0:	strb	r2, [r3, #-1]
   1bdd4:	ldr	r0, [r4]
   1bdd8:	add	r0, r0, #2
   1bddc:	bl	19f20 <__assert_fail@plt+0x8be8>
   1bde0:	ldr	r3, [pc, #1280]	; 1c2e8 <__assert_fail@plt+0xafb0>
   1bde4:	ldr	r3, [r5, r3]
   1bde8:	str	r0, [r3]
   1bdec:	movw	r0, #278	; 0x116
   1bdf0:	b	1caa4 <__assert_fail@plt+0xb76c>
   1bdf4:	ldr	r2, [r6]
   1bdf8:	cmp	r2, #0
   1bdfc:	beq	1be30 <__assert_fail@plt+0xaaf8>
   1be00:	ldr	r3, [pc, #1352]	; 1c350 <__assert_fail@plt+0xb018>
   1be04:	add	r3, pc, r3
   1be08:	ldr	r1, [r3, #8]
   1be0c:	ldr	r3, [r3, #4]
   1be10:	ldr	r3, [r3, r1, lsl #2]
   1be14:	ldr	r1, [r4]
   1be18:	add	r1, r1, r2
   1be1c:	ldrb	r1, [r1, #-1]
   1be20:	subs	r7, r1, #10
   1be24:	rsbs	r1, r7, #0
   1be28:	adcs	r1, r1, r7
   1be2c:	str	r1, [r3, #28]
   1be30:	ldr	r3, [pc, #1388]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1be34:	ldr	r1, [r4]
   1be38:	ldr	r0, [r5, r3]
   1be3c:	bl	1929c <__assert_fail@plt+0x7f64>
   1be40:	ldr	r0, [r4]
   1be44:	mov	r1, #0
   1be48:	mov	r2, #16
   1be4c:	bl	110a4 <strtol@plt>
   1be50:	ldr	r3, [pc, #1168]	; 1c2e8 <__assert_fail@plt+0xafb0>
   1be54:	ldr	r3, [r5, r3]
   1be58:	strb	r0, [r3]
   1be5c:	movw	r0, #275	; 0x113
   1be60:	b	1caa4 <__assert_fail@plt+0xb76c>
   1be64:	ldr	r2, [r6]
   1be68:	cmp	r2, #0
   1be6c:	beq	1bea0 <__assert_fail@plt+0xab68>
   1be70:	ldr	r3, [pc, #1244]	; 1c354 <__assert_fail@plt+0xb01c>
   1be74:	add	r3, pc, r3
   1be78:	ldr	r1, [r3, #8]
   1be7c:	ldr	r3, [r3, #4]
   1be80:	ldr	r3, [r3, r1, lsl #2]
   1be84:	ldr	r1, [r4]
   1be88:	add	r1, r1, r2
   1be8c:	ldrb	r1, [r1, #-1]
   1be90:	subs	r6, r1, #10
   1be94:	rsbs	r1, r6, #0
   1be98:	adcs	r1, r1, r6
   1be9c:	str	r1, [r3, #28]
   1bea0:	ldr	r3, [pc, #1276]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1bea4:	ldr	r1, [r4]
   1bea8:	ldr	r0, [r5, r3]
   1beac:	bl	1929c <__assert_fail@plt+0x7f64>
   1beb0:	ldr	r3, [pc, #1184]	; 1c358 <__assert_fail@plt+0xb020>
   1beb4:	mov	r2, #7
   1beb8:	mov	r0, #93	; 0x5d
   1bebc:	add	r3, pc, r3
   1bec0:	str	r2, [r3]
   1bec4:	b	1caa4 <__assert_fail@plt+0xb76c>
   1bec8:	ldr	r2, [r6]
   1becc:	cmp	r2, #0
   1bed0:	beq	1bf04 <__assert_fail@plt+0xabcc>
   1bed4:	ldr	r3, [pc, #1152]	; 1c35c <__assert_fail@plt+0xb024>
   1bed8:	add	r3, pc, r3
   1bedc:	ldr	r1, [r3, #8]
   1bee0:	ldr	r3, [r3, #4]
   1bee4:	ldr	r3, [r3, r1, lsl #2]
   1bee8:	ldr	r1, [r4]
   1beec:	add	r1, r1, r2
   1bef0:	ldrb	r1, [r1, #-1]
   1bef4:	subs	lr, r1, #10
   1bef8:	rsbs	r1, lr, #0
   1befc:	adcs	r1, r1, lr
   1bf00:	str	r1, [r3, #28]
   1bf04:	ldr	r3, [pc, #1176]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1bf08:	ldr	r1, [r4]
   1bf0c:	ldr	r0, [r5, r3]
   1bf10:	bl	1929c <__assert_fail@plt+0x7f64>
   1bf14:	ldr	r0, [r4]
   1bf18:	ldrb	r3, [r0]
   1bf1c:	cmp	r3, #92	; 0x5c
   1bf20:	addeq	r0, r0, #1
   1bf24:	bl	19f20 <__assert_fail@plt+0x8be8>
   1bf28:	ldr	r3, [pc, #952]	; 1c2e8 <__assert_fail@plt+0xafb0>
   1bf2c:	mov	r2, #7
   1bf30:	ldr	r3, [r5, r3]
   1bf34:	str	r0, [r3]
   1bf38:	mov	r0, #272	; 0x110
   1bf3c:	ldr	r3, [pc, #1052]	; 1c360 <__assert_fail@plt+0xb028>
   1bf40:	add	r3, pc, r3
   1bf44:	str	r2, [r3]
   1bf48:	b	1caa4 <__assert_fail@plt+0xb76c>
   1bf4c:	ldr	r2, [r6]
   1bf50:	cmp	r2, #0
   1bf54:	beq	1bf88 <__assert_fail@plt+0xac50>
   1bf58:	ldr	r3, [pc, #1028]	; 1c364 <__assert_fail@plt+0xb02c>
   1bf5c:	add	r3, pc, r3
   1bf60:	ldr	r1, [r3, #8]
   1bf64:	ldr	r3, [r3, #4]
   1bf68:	ldr	r3, [r3, r1, lsl #2]
   1bf6c:	ldr	r1, [r4]
   1bf70:	add	r1, r1, r2
   1bf74:	ldrb	r1, [r1, #-1]
   1bf78:	subs	ip, r1, #10
   1bf7c:	rsbs	r1, ip, #0
   1bf80:	adcs	r1, r1, ip
   1bf84:	str	r1, [r3, #28]
   1bf88:	ldr	r3, [pc, #1044]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1bf8c:	ldr	r1, [r4]
   1bf90:	ldr	r0, [r5, r3]
   1bf94:	bl	1929c <__assert_fail@plt+0x7f64>
   1bf98:	movw	r0, #279	; 0x117
   1bf9c:	b	1caa4 <__assert_fail@plt+0xb76c>
   1bfa0:	ldr	r2, [r6]
   1bfa4:	cmp	r2, #0
   1bfa8:	beq	1c00c <__assert_fail@plt+0xacd4>
   1bfac:	ldr	r3, [pc, #948]	; 1c368 <__assert_fail@plt+0xb030>
   1bfb0:	add	r3, pc, r3
   1bfb4:	b	1bfe4 <__assert_fail@plt+0xacac>
   1bfb8:	ldr	r2, [r6]
   1bfbc:	cmp	r2, #0
   1bfc0:	beq	1c00c <__assert_fail@plt+0xacd4>
   1bfc4:	ldr	r3, [pc, #928]	; 1c36c <__assert_fail@plt+0xb034>
   1bfc8:	add	r3, pc, r3
   1bfcc:	b	1bfe4 <__assert_fail@plt+0xacac>
   1bfd0:	ldr	r2, [r6]
   1bfd4:	cmp	r2, #0
   1bfd8:	beq	1c00c <__assert_fail@plt+0xacd4>
   1bfdc:	ldr	r3, [pc, #908]	; 1c370 <__assert_fail@plt+0xb038>
   1bfe0:	add	r3, pc, r3
   1bfe4:	ldr	r1, [r3, #8]
   1bfe8:	ldr	r3, [r3, #4]
   1bfec:	ldr	r3, [r3, r1, lsl #2]
   1bff0:	ldr	r1, [r4]
   1bff4:	add	r1, r1, r2
   1bff8:	ldrb	r1, [r1, #-1]
   1bffc:	subs	r0, r1, #10
   1c000:	rsbs	r1, r0, #0
   1c004:	adcs	r1, r1, r0
   1c008:	str	r1, [r3, #28]
   1c00c:	ldr	r3, [pc, #912]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1c010:	ldr	r1, [r4]
   1c014:	ldr	r0, [r5, r3]
   1c018:	bl	1929c <__assert_fail@plt+0x7f64>
   1c01c:	b	1b3a0 <__assert_fail@plt+0xa068>
   1c020:	ldr	r2, [r6]
   1c024:	cmp	r2, #0
   1c028:	beq	1c05c <__assert_fail@plt+0xad24>
   1c02c:	ldr	r3, [pc, #832]	; 1c374 <__assert_fail@plt+0xb03c>
   1c030:	add	r3, pc, r3
   1c034:	ldr	r1, [r3, #8]
   1c038:	ldr	r3, [r3, #4]
   1c03c:	ldr	r3, [r3, r1, lsl #2]
   1c040:	ldr	r1, [r4]
   1c044:	add	r1, r1, r2
   1c048:	ldrb	r1, [r1, #-1]
   1c04c:	subs	fp, r1, #10
   1c050:	rsbs	r1, fp, #0
   1c054:	adcs	r1, r1, fp
   1c058:	str	r1, [r3, #28]
   1c05c:	ldr	r3, [pc, #832]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1c060:	ldr	r1, [r4]
   1c064:	ldr	r0, [r5, r3]
   1c068:	bl	1929c <__assert_fail@plt+0x7f64>
   1c06c:	movw	r0, #261	; 0x105
   1c070:	b	1caa4 <__assert_fail@plt+0xb76c>
   1c074:	ldr	r2, [r6]
   1c078:	cmp	r2, #0
   1c07c:	beq	1c0b0 <__assert_fail@plt+0xad78>
   1c080:	ldr	r3, [pc, #752]	; 1c378 <__assert_fail@plt+0xb040>
   1c084:	add	r3, pc, r3
   1c088:	ldr	r1, [r3, #8]
   1c08c:	ldr	r3, [r3, #4]
   1c090:	ldr	r3, [r3, r1, lsl #2]
   1c094:	ldr	r1, [r4]
   1c098:	add	r1, r1, r2
   1c09c:	ldrb	r1, [r1, #-1]
   1c0a0:	subs	sl, r1, #10
   1c0a4:	rsbs	r1, sl, #0
   1c0a8:	adcs	r1, r1, sl
   1c0ac:	str	r1, [r3, #28]
   1c0b0:	ldr	r3, [pc, #748]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1c0b4:	ldr	r1, [r4]
   1c0b8:	ldr	r0, [r5, r3]
   1c0bc:	bl	1929c <__assert_fail@plt+0x7f64>
   1c0c0:	movw	r0, #262	; 0x106
   1c0c4:	b	1caa4 <__assert_fail@plt+0xb76c>
   1c0c8:	ldr	r2, [r6]
   1c0cc:	cmp	r2, #0
   1c0d0:	beq	1c104 <__assert_fail@plt+0xadcc>
   1c0d4:	ldr	r3, [pc, #672]	; 1c37c <__assert_fail@plt+0xb044>
   1c0d8:	add	r3, pc, r3
   1c0dc:	ldr	r1, [r3, #8]
   1c0e0:	ldr	r3, [r3, #4]
   1c0e4:	ldr	r3, [r3, r1, lsl #2]
   1c0e8:	ldr	r1, [r4]
   1c0ec:	add	r1, r1, r2
   1c0f0:	ldrb	r1, [r1, #-1]
   1c0f4:	subs	r9, r1, #10
   1c0f8:	rsbs	r1, r9, #0
   1c0fc:	adcs	r1, r1, r9
   1c100:	str	r1, [r3, #28]
   1c104:	ldr	r3, [pc, #664]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1c108:	ldr	r1, [r4]
   1c10c:	ldr	r0, [r5, r3]
   1c110:	bl	1929c <__assert_fail@plt+0x7f64>
   1c114:	movw	r0, #263	; 0x107
   1c118:	b	1caa4 <__assert_fail@plt+0xb76c>
   1c11c:	ldr	r2, [r6]
   1c120:	cmp	r2, #0
   1c124:	beq	1c158 <__assert_fail@plt+0xae20>
   1c128:	ldr	r3, [pc, #592]	; 1c380 <__assert_fail@plt+0xb048>
   1c12c:	add	r3, pc, r3
   1c130:	ldr	r1, [r3, #8]
   1c134:	ldr	r3, [r3, #4]
   1c138:	ldr	r3, [r3, r1, lsl #2]
   1c13c:	ldr	r1, [r4]
   1c140:	add	r1, r1, r2
   1c144:	ldrb	r1, [r1, #-1]
   1c148:	subs	r8, r1, #10
   1c14c:	rsbs	r1, r8, #0
   1c150:	adcs	r1, r1, r8
   1c154:	str	r1, [r3, #28]
   1c158:	ldr	r3, [pc, #580]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1c15c:	ldr	r1, [r4]
   1c160:	ldr	r0, [r5, r3]
   1c164:	bl	1929c <__assert_fail@plt+0x7f64>
   1c168:	mov	r0, #264	; 0x108
   1c16c:	b	1caa4 <__assert_fail@plt+0xb76c>
   1c170:	ldr	r2, [r6]
   1c174:	cmp	r2, #0
   1c178:	beq	1c1ac <__assert_fail@plt+0xae74>
   1c17c:	ldr	r3, [pc, #512]	; 1c384 <__assert_fail@plt+0xb04c>
   1c180:	add	r3, pc, r3
   1c184:	ldr	r1, [r3, #8]
   1c188:	ldr	r3, [r3, #4]
   1c18c:	ldr	r3, [r3, r1, lsl #2]
   1c190:	ldr	r1, [r4]
   1c194:	add	r1, r1, r2
   1c198:	ldrb	r1, [r1, #-1]
   1c19c:	subs	r7, r1, #10
   1c1a0:	rsbs	r1, r7, #0
   1c1a4:	adcs	r1, r1, r7
   1c1a8:	str	r1, [r3, #28]
   1c1ac:	ldr	r3, [pc, #496]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1c1b0:	ldr	r1, [r4]
   1c1b4:	ldr	r0, [r5, r3]
   1c1b8:	bl	1929c <__assert_fail@plt+0x7f64>
   1c1bc:	movw	r0, #265	; 0x109
   1c1c0:	b	1caa4 <__assert_fail@plt+0xb76c>
   1c1c4:	ldr	r2, [r6]
   1c1c8:	cmp	r2, #0
   1c1cc:	beq	1c200 <__assert_fail@plt+0xaec8>
   1c1d0:	ldr	r3, [pc, #432]	; 1c388 <__assert_fail@plt+0xb050>
   1c1d4:	add	r3, pc, r3
   1c1d8:	ldr	r1, [r3, #8]
   1c1dc:	ldr	r3, [r3, #4]
   1c1e0:	ldr	r3, [r3, r1, lsl #2]
   1c1e4:	ldr	r1, [r4]
   1c1e8:	add	r1, r1, r2
   1c1ec:	ldrb	r1, [r1, #-1]
   1c1f0:	subs	r6, r1, #10
   1c1f4:	rsbs	r1, r6, #0
   1c1f8:	adcs	r1, r1, r6
   1c1fc:	str	r1, [r3, #28]
   1c200:	ldr	r3, [pc, #412]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1c204:	ldr	r1, [r4]
   1c208:	ldr	r0, [r5, r3]
   1c20c:	bl	1929c <__assert_fail@plt+0x7f64>
   1c210:	movw	r0, #266	; 0x10a
   1c214:	b	1caa4 <__assert_fail@plt+0xb76c>
   1c218:	ldr	r2, [r6]
   1c21c:	cmp	r2, #0
   1c220:	beq	1c254 <__assert_fail@plt+0xaf1c>
   1c224:	ldr	r3, [pc, #352]	; 1c38c <__assert_fail@plt+0xb054>
   1c228:	add	r3, pc, r3
   1c22c:	ldr	r1, [r3, #8]
   1c230:	ldr	r3, [r3, #4]
   1c234:	ldr	r3, [r3, r1, lsl #2]
   1c238:	ldr	r1, [r4]
   1c23c:	add	r1, r1, r2
   1c240:	ldrb	r1, [r1, #-1]
   1c244:	subs	lr, r1, #10
   1c248:	rsbs	r1, lr, #0
   1c24c:	adcs	r1, r1, lr
   1c250:	str	r1, [r3, #28]
   1c254:	ldr	r3, [pc, #328]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1c258:	ldr	r1, [r4]
   1c25c:	ldr	r0, [r5, r3]
   1c260:	bl	1929c <__assert_fail@plt+0x7f64>
   1c264:	movw	r0, #267	; 0x10b
   1c268:	b	1caa4 <__assert_fail@plt+0xb76c>
   1c26c:	andeq	r9, r1, r0, lsr r8
   1c270:	andeq	r8, r1, r0, lsr sp
   1c274:	andeq	r0, r0, r0, lsl r1
   1c278:	andeq	r0, r0, ip, asr #2
   1c27c:	andeq	r0, r0, ip, lsr r1
   1c280:	andeq	r0, r0, r8, asr r1
   1c284:			; <UNDEFINED> instruction: 0x000197bc
   1c288:	andeq	r9, r1, ip, lsl #15
   1c28c:	andeq	r9, r1, r4, ror r7
   1c290:	andeq	r9, r1, r8, ror #14
   1c294:	andeq	r9, r1, ip, asr r7
   1c298:	andeq	r9, r1, r0, asr r7
   1c29c:	andeq	r9, r1, r0, lsl r7
   1c2a0:	andeq	r6, r0, r4, ror #18
   1c2a4:	andeq	r9, r1, r0, ror #12
   1c2a8:	andeq	r6, r0, r8, asr #17
   1c2ac:	andeq	r0, r0, r0, lsr #2
   1c2b0:	andeq	r0, r0, r0, asr r1
   1c2b4:	strdeq	r9, [r1], -r4
   1c2b8:	andeq	r9, r1, r8, asr #10
   1c2bc:	andeq	r9, r1, r8, lsr #10
   1c2c0:	andeq	r6, r0, r4, lsr #14
   1c2c4:	strdeq	r7, [r0], -r4
   1c2c8:	strdeq	r7, [r0], -r5
   1c2cc:	andeq	r0, r0, r8, lsr #2
   1c2d0:	andeq	r9, r1, r0, ror #8
   1c2d4:	strdeq	r7, [r0], -sp
   1c2d8:	andeq	r7, r0, sp, ror #13
   1c2dc:	andeq	r6, r0, ip, lsl #12
   1c2e0:	ldrdeq	r7, [r0], -r3
   1c2e4:	andeq	r9, r1, r0, ror #5
   1c2e8:	andeq	r0, r0, r0, ror #2
   1c2ec:	andeq	r9, r1, r0, ror #4
   1c2f0:	andeq	r9, r1, r8, ror #3
   1c2f4:	andeq	r9, r1, r8, lsl #4
   1c2f8:	andeq	r9, r1, ip, ror #3
   1c2fc:	muleq	r1, r8, r1
   1c300:	andeq	r9, r1, r0, asr r1
   1c304:	andeq	r9, r1, r4, lsr r1
   1c308:	andeq	r9, r1, ip, ror #1
   1c30c:	ldrdeq	r9, [r1], -r0
   1c310:	andeq	r9, r1, r8, lsl #1
   1c314:	andeq	r9, r1, ip, rrx
   1c318:	andeq	r9, r1, r4, lsr #32
   1c31c:	andeq	r9, r1, r8
   1c320:	muleq	r1, r0, pc	; <UNPREDICTABLE>
   1c324:			; <UNDEFINED> instruction: 0x000072b0
   1c328:	muleq	r0, r7, r2
   1c32c:	muleq	r0, r4, r2
   1c330:	muleq	r0, r2, r2
   1c334:	andeq	r7, r0, r1, lsl #4
   1c338:	andeq	r6, r0, r0, lsr #2
   1c33c:	muleq	r1, r0, lr
   1c340:	andeq	r7, r0, r6, lsl r2
   1c344:	strdeq	r7, [r0], -r6
   1c348:			; <UNDEFINED> instruction: 0x00018dbc
   1c34c:	andeq	r8, r1, r4, ror #26
   1c350:	andeq	r8, r1, r4, ror #25
   1c354:	andeq	r8, r1, r4, ror ip
   1c358:	andeq	r8, r1, ip, lsr #24
   1c35c:	andeq	r8, r1, r0, lsl ip
   1c360:	andeq	r8, r1, r8, lsr #23
   1c364:	andeq	r8, r1, ip, lsl #23
   1c368:	andeq	r8, r1, r8, lsr fp
   1c36c:	andeq	r8, r1, r0, lsr #22
   1c370:	andeq	r8, r1, r8, lsl #22
   1c374:			; <UNDEFINED> instruction: 0x00018ab8
   1c378:	andeq	r8, r1, r4, ror #20
   1c37c:	andeq	r8, r1, r0, lsl sl
   1c380:			; <UNDEFINED> instruction: 0x000189bc
   1c384:	andeq	r8, r1, r8, ror #18
   1c388:	andeq	r8, r1, r4, lsl r9
   1c38c:	andeq	r8, r1, r0, asr #17
   1c390:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1c394:	andeq	r8, r1, r4, lsl #13
   1c398:	andeq	r8, r1, r4, lsr r6
   1c39c:	andeq	r8, r1, ip, lsl r6
   1c3a0:	andeq	r8, r1, r0, lsl #12
   1c3a4:	andeq	r0, r0, r4, lsl r1
   1c3a8:	andeq	r0, r0, ip, lsr r1
   1c3ac:	andeq	r8, r1, r0, asr #10
   1c3b0:	andeq	r5, r0, r4, ror r7
   1c3b4:	andeq	r5, r0, r0, ror r7
   1c3b8:	andeq	r8, r1, ip, lsl #9
   1c3bc:	andeq	r8, r1, ip, ror r4
   1c3c0:	muleq	r0, r7, r8
   1c3c4:	andeq	r8, r1, r4, lsl #8
   1c3c8:	andeq	r8, r1, r4, ror #7
   1c3cc:	andeq	r8, r1, r0, ror #7
   1c3d0:	andeq	r6, r0, r3, ror #15
   1c3d4:	andeq	r8, r1, r0, lsr r3
   1c3d8:	andeq	r8, r1, r4, lsl #6
   1c3dc:			; <UNDEFINED> instruction: 0x000182b0
   1c3e0:	andeq	r8, r1, ip, lsl #5
   1c3e4:			; <UNDEFINED> instruction: 0x000066b3
   1c3e8:	strdeq	r8, [r1], -r4
   1c3ec:	ldrdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1c3f0:	andeq	r0, r0, r0, lsl r1
   1c3f4:	andeq	r8, r1, ip, lsl #3
   1c3f8:	andeq	r6, r0, r0, lsl #12
   1c3fc:	andeq	r6, r0, lr, asr #10
   1c400:	ldr	r2, [r6]
   1c404:	cmp	r2, #0
   1c408:	beq	1c43c <__assert_fail@plt+0xb104>
   1c40c:	ldr	r3, [pc, #-132]	; 1c390 <__assert_fail@plt+0xb058>
   1c410:	add	r3, pc, r3
   1c414:	ldr	r1, [r3, #8]
   1c418:	ldr	r3, [r3, #4]
   1c41c:	ldr	r3, [r3, r1, lsl #2]
   1c420:	ldr	r1, [r4]
   1c424:	add	r1, r1, r2
   1c428:	ldrb	r1, [r1, #-1]
   1c42c:	subs	ip, r1, #10
   1c430:	rsbs	r1, ip, #0
   1c434:	adcs	r1, r1, ip
   1c438:	str	r1, [r3, #28]
   1c43c:	ldr	r3, [pc, #-160]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1c440:	ldr	r1, [r4]
   1c444:	ldr	r0, [r5, r3]
   1c448:	bl	1929c <__assert_fail@plt+0x7f64>
   1c44c:	mov	r0, #268	; 0x10c
   1c450:	b	1caa4 <__assert_fail@plt+0xb76c>
   1c454:	ldr	r2, [r6]
   1c458:	cmp	r2, #0
   1c45c:	beq	1c490 <__assert_fail@plt+0xb158>
   1c460:	ldr	r3, [pc, #-212]	; 1c394 <__assert_fail@plt+0xb05c>
   1c464:	add	r3, pc, r3
   1c468:	ldr	r1, [r3, #8]
   1c46c:	ldr	r3, [r3, #4]
   1c470:	ldr	r3, [r3, r1, lsl #2]
   1c474:	ldr	r1, [r4]
   1c478:	add	r1, r1, r2
   1c47c:	ldrb	r1, [r1, #-1]
   1c480:	subs	r0, r1, #10
   1c484:	rsbs	r1, r0, #0
   1c488:	adcs	r1, r1, r0
   1c48c:	str	r1, [r3, #28]
   1c490:	ldr	r3, [pc, #-244]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1c494:	ldr	r1, [r4]
   1c498:	ldr	r0, [r5, r3]
   1c49c:	bl	1929c <__assert_fail@plt+0x7f64>
   1c4a0:	ldr	r3, [r4]
   1c4a4:	ldrb	r0, [r3]
   1c4a8:	cmp	r0, #91	; 0x5b
   1c4ac:	ldreq	r3, [pc, #-284]	; 1c398 <__assert_fail@plt+0xb060>
   1c4b0:	moveq	r2, #3
   1c4b4:	addeq	r3, pc, r3
   1c4b8:	streq	r2, [r3]
   1c4bc:	and	r3, r0, #191	; 0xbf
   1c4c0:	cmp	r3, #59	; 0x3b
   1c4c4:	ldreq	r3, [pc, #-304]	; 1c39c <__assert_fail@plt+0xb064>
   1c4c8:	moveq	r2, #5
   1c4cc:	addeq	r3, pc, r3
   1c4d0:	streq	r2, [r3]
   1c4d4:	b	1caa4 <__assert_fail@plt+0xb76c>
   1c4d8:	ldr	r3, [r6]
   1c4dc:	cmp	r3, #0
   1c4e0:	beq	1c514 <__assert_fail@plt+0xb1dc>
   1c4e4:	ldr	r2, [pc, #-332]	; 1c3a0 <__assert_fail@plt+0xb068>
   1c4e8:	add	r2, pc, r2
   1c4ec:	ldr	r1, [r2, #8]
   1c4f0:	ldr	r2, [r2, #4]
   1c4f4:	ldr	r2, [r2, r1, lsl #2]
   1c4f8:	ldr	r1, [r4]
   1c4fc:	add	r3, r1, r3
   1c500:	ldrb	r3, [r3, #-1]
   1c504:	subs	r1, r3, #10
   1c508:	rsbs	r3, r1, #0
   1c50c:	adcs	r3, r3, r1
   1c510:	str	r3, [r2, #28]
   1c514:	ldr	r3, [pc, #-376]	; 1c3a4 <__assert_fail@plt+0xb06c>
   1c518:	ldr	r1, [r4]
   1c51c:	ldr	r2, [r6]
   1c520:	ldr	r0, [r5, r3]
   1c524:	bl	1929c <__assert_fail@plt+0x7f64>
   1c528:	ldr	r3, [pc, #-392]	; 1c3a8 <__assert_fail@plt+0xb070>
   1c52c:	ldr	r0, [r4]
   1c530:	mov	r2, #1
   1c534:	ldr	r1, [r6]
   1c538:	ldr	r3, [r5, r3]
   1c53c:	ldr	r3, [r3]
   1c540:	bl	11140 <fwrite@plt>
   1c544:	b	1b3a0 <__assert_fail@plt+0xa068>
   1c548:	ldr	ip, [sp, #24]
   1c54c:	ldr	r2, [r4]
   1c550:	ldrb	r3, [ip, #28]
   1c554:	rsb	r2, r2, r7
   1c558:	ldr	r0, [ip, #8]
   1c55c:	sub	r2, r2, #1
   1c560:	ldr	r1, [ip, #4]
   1c564:	strb	r3, [r7]
   1c568:	str	r2, [sp, #36]	; 0x24
   1c56c:	ldr	r3, [r1, r0, lsl #2]
   1c570:	ldr	r2, [r3, #44]	; 0x2c
   1c574:	cmp	r2, #0
   1c578:	bne	1c5a0 <__assert_fail@plt+0xb268>
   1c57c:	ldr	r2, [r3, #16]
   1c580:	str	r2, [ip, #24]
   1c584:	ldr	r2, [pc, #-412]	; 1c3f0 <__assert_fail@plt+0xb0b8>
   1c588:	ldr	r2, [r5, r2]
   1c58c:	ldr	r2, [r2]
   1c590:	str	r2, [r3]
   1c594:	mov	r2, #1
   1c598:	ldr	r3, [r1, r0, lsl #2]
   1c59c:	str	r2, [r3, #44]	; 0x2c
   1c5a0:	ldr	r8, [pc, #-508]	; 1c3ac <__assert_fail@plt+0xb074>
   1c5a4:	ldr	r2, [r1, r0, lsl #2]
   1c5a8:	add	r8, pc, r8
   1c5ac:	ldr	ip, [r2, #4]
   1c5b0:	ldr	r9, [r8, #24]
   1c5b4:	ldr	r3, [r8, #12]
   1c5b8:	add	lr, ip, r9
   1c5bc:	cmp	r3, lr
   1c5c0:	bhi	1c67c <__assert_fail@plt+0xb344>
   1c5c4:	ldr	ip, [sp, #12]
   1c5c8:	ldr	r4, [ip]
   1c5cc:	ldr	ip, [sp, #36]	; 0x24
   1c5d0:	add	r4, r4, ip
   1c5d4:	str	r4, [r8, #12]
   1c5d8:	bl	1a9b4 <__assert_fail@plt+0x967c>
   1c5dc:	ldr	r3, [pc, #-564]	; 1c3b0 <__assert_fail@plt+0xb078>
   1c5e0:	ldr	r1, [pc, #-564]	; 1c3b4 <__assert_fail@plt+0xb07c>
   1c5e4:	add	r3, pc, r3
   1c5e8:	add	r1, pc, r1
   1c5ec:	add	r3, r3, r0, lsl #1
   1c5f0:	add	r3, r3, #1024	; 0x400
   1c5f4:	ldrsh	r3, [r3]
   1c5f8:	cmp	r3, #0
   1c5fc:	strne	r0, [r8, #16]
   1c600:	strne	r4, [r8, #20]
   1c604:	add	ip, r1, r0, lsl #1
   1c608:	add	r3, ip, #1904	; 0x770
   1c60c:	ldrsh	r2, [r3, #4]
   1c610:	add	r2, r2, #1
   1c614:	add	r2, r1, r2, lsl #1
   1c618:	add	r3, r2, #2256	; 0x8d0
   1c61c:	add	r3, r3, #12
   1c620:	ldrsh	r3, [r3]
   1c624:	cmp	r3, r0
   1c628:	addne	ip, ip, #1344	; 0x540
   1c62c:	ldrshne	r0, [ip, #12]
   1c630:	bne	1c604 <__assert_fail@plt+0xb2cc>
   1c634:	add	r2, r2, #3152	; 0xc50
   1c638:	ldr	ip, [sp, #12]
   1c63c:	ldrsh	r0, [r2, #14]
   1c640:	ldr	ip, [ip]
   1c644:	cmp	r0, #165	; 0xa5
   1c648:	moveq	r0, #0
   1c64c:	cmp	r0, #0
   1c650:	str	ip, [sp, #8]
   1c654:	ldrne	r3, [pc, #-676]	; 1c3b8 <__assert_fail@plt+0xb080>
   1c658:	addne	r6, r4, #1
   1c65c:	addne	r3, pc, r3
   1c660:	strne	r6, [r3, #12]
   1c664:	bne	1b3e8 <__assert_fail@plt+0xa0b0>
   1c668:	ldr	r3, [pc, #-692]	; 1c3bc <__assert_fail@plt+0xb084>
   1c66c:	add	r3, pc, r3
   1c670:	ldr	r7, [r3, #20]
   1c674:	ldr	r0, [r3, #16]
   1c678:	b	1b4a0 <__assert_fail@plt+0xa168>
   1c67c:	add	r9, r9, #1
   1c680:	ldr	lr, [r4]
   1c684:	add	r9, ip, r9
   1c688:	cmp	r3, r9
   1c68c:	ldrhi	r0, [pc, #-724]	; 1c3c0 <__assert_fail@plt+0xb088>
   1c690:	addhi	r0, pc, r0
   1c694:	bhi	1ca8c <__assert_fail@plt+0xb754>
   1c698:	ldr	r2, [r2, #40]	; 0x28
   1c69c:	rsb	r3, lr, r3
   1c6a0:	cmp	r2, #0
   1c6a4:	bne	1c6b4 <__assert_fail@plt+0xb37c>
   1c6a8:	cmp	r3, #1
   1c6ac:	bne	1ca50 <__assert_fail@plt+0xb718>
   1c6b0:	b	1ca24 <__assert_fail@plt+0xb6ec>
   1c6b4:	sub	r8, r3, #1
   1c6b8:	mov	r2, #0
   1c6bc:	cmp	r2, r8
   1c6c0:	ldrblt	r9, [lr, r2]
   1c6c4:	strblt	r9, [ip, r2]
   1c6c8:	addlt	r2, r2, #1
   1c6cc:	blt	1c6bc <__assert_fail@plt+0xb384>
   1c6d0:	ldr	r2, [r1, r0, lsl #2]
   1c6d4:	ldr	r1, [r2, #44]	; 0x2c
   1c6d8:	cmp	r1, #2
   1c6dc:	ldreq	r1, [pc, #-800]	; 1c3c4 <__assert_fail@plt+0xb08c>
   1c6e0:	moveq	r3, #0
   1c6e4:	addeq	r1, pc, r1
   1c6e8:	streq	r3, [r1, #24]
   1c6ec:	beq	1c908 <__assert_fail@plt+0xb5d0>
   1c6f0:	ldr	r1, [r2, #12]
   1c6f4:	ldr	sl, [pc, #-820]	; 1c3c8 <__assert_fail@plt+0xb090>
   1c6f8:	ldr	fp, [pc, #-820]	; 1c3cc <__assert_fail@plt+0xb094>
   1c6fc:	sub	r1, r1, #1
   1c700:	rsb	r1, r8, r1
   1c704:	add	sl, pc, sl
   1c708:	add	fp, pc, fp
   1c70c:	cmp	r1, #0
   1c710:	bne	1c7a8 <__assert_fail@plt+0xb470>
   1c714:	ldr	r0, [sl, #8]
   1c718:	ldr	r2, [sl, #4]
   1c71c:	ldr	r9, [r2, r0, lsl #2]
   1c720:	ldr	r2, [sl, #12]
   1c724:	ldr	ip, [r9, #20]
   1c728:	ldr	r0, [r9, #4]
   1c72c:	cmp	ip, #0
   1c730:	streq	r1, [r9, #4]
   1c734:	rsb	r2, r0, r2
   1c738:	beq	1c770 <__assert_fail@plt+0xb438>
   1c73c:	ldr	r1, [r9, #12]
   1c740:	lsls	ip, r1, #1
   1c744:	strne	ip, [r9, #12]
   1c748:	addeq	r1, r1, r1, lsr #3
   1c74c:	streq	r1, [r9, #12]
   1c750:	ldr	r1, [r9, #12]
   1c754:	str	r2, [sp, #4]
   1c758:	add	r1, r1, #2
   1c75c:	str	r3, [sp]
   1c760:	bl	1ae38 <__assert_fail@plt+0x9b00>
   1c764:	ldr	r2, [sp, #4]
   1c768:	ldr	r3, [sp]
   1c76c:	str	r0, [r9, #4]
   1c770:	ldr	r1, [r9, #4]
   1c774:	cmp	r1, #0
   1c778:	ldreq	r0, [pc, #-944]	; 1c3d0 <__assert_fail@plt+0xb098>
   1c77c:	addeq	r0, pc, r0
   1c780:	beq	1ca8c <__assert_fail@plt+0xb754>
   1c784:	add	r2, r1, r2
   1c788:	ldr	r1, [fp, #8]
   1c78c:	str	r2, [fp, #12]
   1c790:	ldr	r2, [fp, #4]
   1c794:	ldr	r2, [r2, r1, lsl #2]
   1c798:	ldr	r1, [r2, #12]
   1c79c:	sub	r1, r1, #1
   1c7a0:	rsb	r1, r8, r1
   1c7a4:	b	1c70c <__assert_fail@plt+0xb3d4>
   1c7a8:	ldr	fp, [pc, #-988]	; 1c3d4 <__assert_fail@plt+0xb09c>
   1c7ac:	cmp	r1, #8192	; 0x2000
   1c7b0:	movcs	r1, #8192	; 0x2000
   1c7b4:	str	r1, [sp, #40]	; 0x28
   1c7b8:	add	fp, pc, fp
   1c7bc:	ldr	r1, [fp, #8]
   1c7c0:	ldr	r2, [fp, #4]
   1c7c4:	ldr	r2, [r2, r1, lsl #2]
   1c7c8:	ldr	r1, [pc, #-992]	; 1c3f0 <__assert_fail@plt+0xb0b8>
   1c7cc:	ldr	r2, [r2, #24]
   1c7d0:	ldr	r9, [r5, r1]
   1c7d4:	cmp	r2, #0
   1c7d8:	beq	1c868 <__assert_fail@plt+0xb530>
   1c7dc:	ldr	fp, [pc, #-1036]	; 1c3d8 <__assert_fail@plt+0xb0a0>
   1c7e0:	mov	sl, #0
   1c7e4:	add	fp, pc, fp
   1c7e8:	ldr	r0, [r9]
   1c7ec:	str	r3, [sp]
   1c7f0:	bl	11104 <_IO_getc@plt>
   1c7f4:	ldr	r3, [sp]
   1c7f8:	cmn	r0, #1
   1c7fc:	beq	1ca90 <__assert_fail@plt+0xb758>
   1c800:	cmp	r0, #10
   1c804:	beq	1c834 <__assert_fail@plt+0xb4fc>
   1c808:	ldmib	fp, {r1, ip}
   1c80c:	ldr	r1, [r1, ip, lsl #2]
   1c810:	ldr	ip, [sp, #40]	; 0x28
   1c814:	ldr	r1, [r1, #4]
   1c818:	add	r1, r1, r3
   1c81c:	add	r1, r1, sl
   1c820:	add	sl, sl, #1
   1c824:	cmp	sl, ip
   1c828:	strb	r0, [r1, #-1]
   1c82c:	bcc	1c7e8 <__assert_fail@plt+0xb4b0>
   1c830:	b	1c858 <__assert_fail@plt+0xb520>
   1c834:	ldr	r3, [pc, #-1120]	; 1c3dc <__assert_fail@plt+0xb0a4>
   1c838:	add	r3, pc, r3
   1c83c:	ldr	r2, [r3, #8]
   1c840:	ldr	r3, [r3, #4]
   1c844:	ldr	r3, [r3, r2, lsl #2]
   1c848:	ldr	r3, [r3, #4]
   1c84c:	add	r3, r3, r8
   1c850:	strb	r0, [r3, sl]
   1c854:	add	sl, sl, #1
   1c858:	ldr	r3, [pc, #-1152]	; 1c3e0 <__assert_fail@plt+0xb0a8>
   1c85c:	add	r3, pc, r3
   1c860:	str	sl, [r3, #24]
   1c864:	b	1c8f0 <__assert_fail@plt+0xb5b8>
   1c868:	str	r2, [sp, #4]
   1c86c:	bl	11200 <__errno_location@plt>
   1c870:	ldr	r2, [sp, #4]
   1c874:	mov	sl, r0
   1c878:	str	r2, [r0]
   1c87c:	ldr	r2, [fp, #8]
   1c880:	mov	r1, #1
   1c884:	ldr	r3, [fp, #4]
   1c888:	ldr	r3, [r3, r2, lsl #2]
   1c88c:	ldr	r2, [sp, #40]	; 0x28
   1c890:	ldr	r0, [r3, #4]
   1c894:	ldr	r3, [r9]
   1c898:	add	r0, r0, r8
   1c89c:	bl	11158 <fread@plt>
   1c8a0:	cmp	r0, #0
   1c8a4:	mov	r3, r0
   1c8a8:	str	r0, [fp, #24]
   1c8ac:	bne	1c8f0 <__assert_fail@plt+0xb5b8>
   1c8b0:	ldr	r0, [r9]
   1c8b4:	str	r3, [sp]
   1c8b8:	bl	110ec <ferror@plt>
   1c8bc:	ldr	r3, [sp]
   1c8c0:	cmp	r0, #0
   1c8c4:	beq	1c8f0 <__assert_fail@plt+0xb5b8>
   1c8c8:	ldr	r2, [sl]
   1c8cc:	cmp	r2, #4
   1c8d0:	beq	1c8e0 <__assert_fail@plt+0xb5a8>
   1c8d4:	ldr	r0, [pc, #-1272]	; 1c3e4 <__assert_fail@plt+0xb0ac>
   1c8d8:	add	r0, pc, r0
   1c8dc:	b	1ca8c <__assert_fail@plt+0xb754>
   1c8e0:	str	r3, [sl]
   1c8e4:	ldr	r0, [r9]
   1c8e8:	bl	112a8 <clearerr@plt>
   1c8ec:	b	1c87c <__assert_fail@plt+0xb544>
   1c8f0:	ldr	r3, [pc, #-1296]	; 1c3e8 <__assert_fail@plt+0xb0b0>
   1c8f4:	add	r3, pc, r3
   1c8f8:	ldr	r1, [r3, #8]
   1c8fc:	ldr	r2, [r3, #4]
   1c900:	ldr	r3, [r3, #24]
   1c904:	ldr	r2, [r2, r1, lsl #2]
   1c908:	str	r3, [r2, #16]
   1c90c:	ldr	r3, [pc, #-1320]	; 1c3ec <__assert_fail@plt+0xb0b4>
   1c910:	add	r3, pc, r3
   1c914:	ldr	r2, [r3, #24]
   1c918:	cmp	r2, #0
   1c91c:	movne	sl, #0
   1c920:	bne	1c958 <__assert_fail@plt+0xb620>
   1c924:	cmp	r8, #0
   1c928:	bne	1c944 <__assert_fail@plt+0xb60c>
   1c92c:	ldr	r3, [pc, #-1348]	; 1c3f0 <__assert_fail@plt+0xb0b8>
   1c930:	mov	sl, #1
   1c934:	ldr	r3, [r5, r3]
   1c938:	ldr	r0, [r3]
   1c93c:	bl	1aee4 <__assert_fail@plt+0x9bac>
   1c940:	b	1c958 <__assert_fail@plt+0xb620>
   1c944:	ldr	r2, [r3, #8]
   1c948:	mov	sl, #2
   1c94c:	ldr	r3, [r3, #4]
   1c950:	ldr	r3, [r3, r2, lsl #2]
   1c954:	str	sl, [r3, #44]	; 0x2c
   1c958:	ldr	r9, [pc, #-1388]	; 1c3f4 <__assert_fail@plt+0xb0bc>
   1c95c:	add	r9, pc, r9
   1c960:	ldr	r2, [r9, #4]
   1c964:	ldr	r0, [r9, #8]
   1c968:	ldr	r1, [r9, #24]
   1c96c:	ldr	fp, [r2, r0, lsl #2]
   1c970:	add	r3, r8, r1
   1c974:	ldr	r2, [fp, #12]
   1c978:	cmp	r3, r2
   1c97c:	bls	1c9b0 <__assert_fail@plt+0xb678>
   1c980:	add	r1, r3, r1, lsr #1
   1c984:	ldr	r0, [fp, #4]
   1c988:	bl	1ae38 <__assert_fail@plt+0x9b00>
   1c98c:	ldr	r2, [r9, #8]
   1c990:	ldr	r3, [r9, #4]
   1c994:	str	r0, [fp, #4]
   1c998:	ldr	r3, [r3, r2, lsl #2]
   1c99c:	ldr	r3, [r3, #4]
   1c9a0:	cmp	r3, #0
   1c9a4:	ldreq	r0, [pc, #-1460]	; 1c3f8 <__assert_fail@plt+0xb0c0>
   1c9a8:	addeq	r0, pc, r0
   1c9ac:	beq	1ca8c <__assert_fail@plt+0xb754>
   1c9b0:	ldr	ip, [sp, #20]
   1c9b4:	cmp	sl, #1
   1c9b8:	ldr	r3, [ip, #24]
   1c9bc:	ldr	r2, [ip, #8]
   1c9c0:	add	r8, r8, r3
   1c9c4:	ldr	r3, [ip, #4]
   1c9c8:	str	r8, [ip, #24]
   1c9cc:	ldr	r1, [r3, r2, lsl #2]
   1c9d0:	ldr	r0, [r1, #4]
   1c9d4:	mov	r1, #0
   1c9d8:	strb	r1, [r0, r8]
   1c9dc:	ldr	r0, [r3, r2, lsl #2]
   1c9e0:	ldr	r0, [r0, #4]
   1c9e4:	add	r8, r0, r8
   1c9e8:	strb	r1, [r8, #1]
   1c9ec:	ldr	r3, [r3, r2, lsl #2]
   1c9f0:	ldr	r2, [r3, #4]
   1c9f4:	str	r2, [r4]
   1c9f8:	beq	1ca24 <__assert_fail@plt+0xb6ec>
   1c9fc:	cmp	sl, #2
   1ca00:	beq	1ca50 <__assert_fail@plt+0xb718>
   1ca04:	ldr	ip, [sp, #36]	; 0x24
   1ca08:	add	r6, r2, ip
   1ca0c:	ldr	ip, [sp, #20]
   1ca10:	str	r6, [ip, #12]
   1ca14:	bl	1a9b4 <__assert_fail@plt+0x967c>
   1ca18:	ldr	r4, [r4]
   1ca1c:	str	r4, [sp, #8]
   1ca20:	b	1b3e8 <__assert_fail@plt+0xa0b0>
   1ca24:	ldr	ip, [sp, #32]
   1ca28:	mov	r3, #0
   1ca2c:	str	r3, [ip, #36]	; 0x24
   1ca30:	ldr	r3, [r4]
   1ca34:	str	r3, [ip, #12]
   1ca38:	ldr	r3, [ip]
   1ca3c:	sub	r3, r3, #1
   1ca40:	add	r3, r3, r3, lsr #31
   1ca44:	asr	r3, r3, #1
   1ca48:	add	r3, r3, #33	; 0x21
   1ca4c:	b	1b4fc <__assert_fail@plt+0xa1c4>
   1ca50:	ldr	ip, [sp, #28]
   1ca54:	ldr	r2, [ip, #8]
   1ca58:	ldr	r3, [ip, #4]
   1ca5c:	ldr	r3, [r3, r2, lsl #2]
   1ca60:	ldr	r7, [r3, #4]
   1ca64:	ldr	r3, [ip, #24]
   1ca68:	add	r7, r7, r3
   1ca6c:	str	r7, [ip, #12]
   1ca70:	bl	1a9b4 <__assert_fail@plt+0x967c>
   1ca74:	ldr	ip, [sp, #12]
   1ca78:	ldr	ip, [ip]
   1ca7c:	str	ip, [sp, #8]
   1ca80:	b	1b4a0 <__assert_fail@plt+0xa168>
   1ca84:	ldr	r0, [pc, #-1680]	; 1c3fc <__assert_fail@plt+0xb0c4>
   1ca88:	add	r0, pc, r0
   1ca8c:	bl	1ab84 <__assert_fail@plt+0x984c>
   1ca90:	ldr	r0, [r9]
   1ca94:	bl	110ec <ferror@plt>
   1ca98:	cmp	r0, #0
   1ca9c:	beq	1c858 <__assert_fail@plt+0xb520>
   1caa0:	b	1c8d4 <__assert_fail@plt+0xb59c>
   1caa4:	add	sp, sp, #92	; 0x5c
   1caa8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1caac:	push	{r4, r5, r6, lr}
   1cab0:	mov	r6, #0
   1cab4:	ldr	r4, [pc, #132]	; 1cb40 <__assert_fail@plt+0xb808>
   1cab8:	ldr	r5, [pc, #132]	; 1cb44 <__assert_fail@plt+0xb80c>
   1cabc:	add	r4, pc, r4
   1cac0:	add	r5, pc, r5
   1cac4:	ldr	r3, [r4, #4]
   1cac8:	cmp	r3, #0
   1cacc:	beq	1caf8 <__assert_fail@plt+0xb7c0>
   1cad0:	ldr	r2, [r4, #8]
   1cad4:	ldr	r0, [r3, r2, lsl #2]
   1cad8:	cmp	r0, #0
   1cadc:	beq	1caf8 <__assert_fail@plt+0xb7c0>
   1cae0:	bl	1b1d8 <__assert_fail@plt+0x9ea0>
   1cae4:	ldr	r2, [r4, #8]
   1cae8:	ldr	r3, [r4, #4]
   1caec:	str	r6, [r3, r2, lsl #2]
   1caf0:	bl	1b230 <__assert_fail@plt+0x9ef8>
   1caf4:	b	1cac4 <__assert_fail@plt+0xb78c>
   1caf8:	mov	r0, r3
   1cafc:	bl	1b1d4 <__assert_fail@plt+0x9e9c>
   1cb00:	ldr	r3, [pc, #64]	; 1cb48 <__assert_fail@plt+0xb810>
   1cb04:	mov	r0, #0
   1cb08:	add	r3, pc, r3
   1cb0c:	str	r0, [r3]
   1cb10:	str	r0, [r3, #4]
   1cb14:	str	r0, [r3, #8]
   1cb18:	str	r0, [r3, #32]
   1cb1c:	str	r0, [r3, #12]
   1cb20:	str	r0, [r3, #40]	; 0x28
   1cb24:	ldr	r3, [pc, #32]	; 1cb4c <__assert_fail@plt+0xb814>
   1cb28:	ldr	r3, [r5, r3]
   1cb2c:	str	r0, [r3]
   1cb30:	ldr	r3, [pc, #24]	; 1cb50 <__assert_fail@plt+0xb818>
   1cb34:	ldr	r3, [r5, r3]
   1cb38:	str	r0, [r3]
   1cb3c:	pop	{r4, r5, r6, pc}
   1cb40:	andeq	r8, r1, ip, lsr #32
   1cb44:	andeq	r7, r1, r8, lsr r5
   1cb48:	andeq	r7, r1, r0, ror #31
   1cb4c:	andeq	r0, r0, r0, lsl r1
   1cb50:	andeq	r0, r0, ip, lsr r1
   1cb54:	push	{r4, lr}
   1cb58:	mov	r3, r0
   1cb5c:	ldr	r4, [pc, #48]	; 1cb94 <__assert_fail@plt+0xb85c>
   1cb60:	ldr	r2, [pc, #48]	; 1cb98 <__assert_fail@plt+0xb860>
   1cb64:	add	r4, pc, r4
   1cb68:	ldr	r1, [pc, #44]	; 1cb9c <__assert_fail@plt+0xb864>
   1cb6c:	ldr	r0, [r4, r2]
   1cb70:	add	r1, pc, r1
   1cb74:	ldr	r2, [pc, #36]	; 1cba0 <__assert_fail@plt+0xb868>
   1cb78:	add	r2, pc, r2
   1cb7c:	bl	19490 <__assert_fail@plt+0x8158>
   1cb80:	ldr	r3, [pc, #28]	; 1cba4 <__assert_fail@plt+0xb86c>
   1cb84:	mov	r2, #1
   1cb88:	ldr	r3, [r4, r3]
   1cb8c:	strb	r2, [r3]
   1cb90:	pop	{r4, pc}
   1cb94:	muleq	r1, r4, r4
   1cb98:	andeq	r0, r0, r4, lsl r1
   1cb9c:			; <UNDEFINED> instruction: 0x000069b7
   1cba0:	andeq	r6, r0, ip, lsr #19
   1cba4:	strdeq	r0, [r0], -ip
   1cba8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cbac:	mov	r4, #0
   1cbb0:	ldr	r9, [pc, #3992]	; 1db50 <__assert_fail@plt+0xc818>
   1cbb4:	sub	sp, sp, #7744	; 0x1e40
   1cbb8:	ldr	r3, [pc, #3988]	; 1db54 <__assert_fail@plt+0xc81c>
   1cbbc:	sub	sp, sp, #20
   1cbc0:	add	r9, pc, r9
   1cbc4:	add	r6, sp, #3760	; 0xeb0
   1cbc8:	add	sl, sp, #160	; 0xa0
   1cbcc:	ldr	r8, [r9, r3]
   1cbd0:	ldr	r3, [pc, #3968]	; 1db58 <__assert_fail@plt+0xc820>
   1cbd4:	str	r4, [r8]
   1cbd8:	ldr	r5, [r9, r3]
   1cbdc:	mvn	r3, #1
   1cbe0:	str	r3, [r5]
   1cbe4:	ldr	r3, [pc, #3952]	; 1db5c <__assert_fail@plt+0xc824>
   1cbe8:	ldr	ip, [r9, r3]
   1cbec:	str	sl, [sp, #24]
   1cbf0:	str	r4, [sp, #32]
   1cbf4:	mov	r7, ip
   1cbf8:	str	r8, [sp, #68]	; 0x44
   1cbfc:	ldm	r7!, {r0, r1, r2, r3}
   1cc00:	str	r5, [sp, #36]	; 0x24
   1cc04:	str	ip, [sp, #44]	; 0x2c
   1cc08:	str	sl, [sp, #72]	; 0x48
   1cc0c:	stmia	r6!, {r0, r1, r2, r3}
   1cc10:	mov	r0, #200	; 0xc8
   1cc14:	ldr	r3, [r7]
   1cc18:	add	r7, sp, #3760	; 0xeb0
   1cc1c:	ldr	r1, [pc, #3900]	; 1db60 <__assert_fail@plt+0xc828>
   1cc20:	ldr	r2, [pc, #3900]	; 1db64 <__assert_fail@plt+0xc82c>
   1cc24:	str	r3, [r6]
   1cc28:	add	r1, pc, r1
   1cc2c:	add	r6, sp, #560	; 0x230
   1cc30:	add	r2, pc, r2
   1cc34:	str	r0, [sp, #40]	; 0x28
   1cc38:	str	r7, [sp, #64]	; 0x40
   1cc3c:	str	r6, [sp, #60]	; 0x3c
   1cc40:	str	r1, [sp, #76]	; 0x4c
   1cc44:	str	r2, [sp, #56]	; 0x38
   1cc48:	ldr	r0, [sp, #40]	; 0x28
   1cc4c:	ldr	r1, [sp, #24]
   1cc50:	sub	r3, r0, #-2147483647	; 0x80000001
   1cc54:	strh	r4, [sl]
   1cc58:	lsl	r3, r3, #1
   1cc5c:	add	r2, r1, r3
   1cc60:	cmp	sl, r2
   1cc64:	bcc	1cd7c <__assert_fail@plt+0xba44>
   1cc68:	rsb	r7, r1, sl
   1cc6c:	movw	r2, #9999	; 0x270f
   1cc70:	cmp	r0, r2
   1cc74:	asr	r7, r7, #1
   1cc78:	add	r7, r7, #1
   1cc7c:	bhi	1dd30 <__assert_fail@plt+0xc9f8>
   1cc80:	add	r2, r2, #1
   1cc84:	add	r3, r3, #2
   1cc88:	cmp	r3, r2
   1cc8c:	movcs	r3, r2
   1cc90:	mov	r0, #38	; 0x26
   1cc94:	str	r3, [sp, #40]	; 0x28
   1cc98:	mul	r0, r0, r3
   1cc9c:	add	r0, r0, #46	; 0x2e
   1cca0:	bl	11170 <malloc@plt>
   1cca4:	subs	r5, r0, #0
   1cca8:	beq	1dd30 <__assert_fail@plt+0xc9f8>
   1ccac:	lsl	fp, r7, #1
   1ccb0:	ldr	r1, [sp, #24]
   1ccb4:	mov	sl, #24
   1ccb8:	lsl	r6, r7, #4
   1ccbc:	mov	r2, fp
   1ccc0:	bl	110f8 <memcpy@plt>
   1ccc4:	ldr	r3, [sp, #40]	; 0x28
   1ccc8:	mov	r1, #24
   1cccc:	lsl	r3, r3, #1
   1ccd0:	str	r3, [sp, #20]
   1ccd4:	add	r0, r3, #23
   1ccd8:	bl	1dd80 <__assert_fail@plt+0xca48>
   1ccdc:	mov	r2, r6
   1cce0:	ldr	r1, [sp, #60]	; 0x3c
   1cce4:	mla	r8, sl, r0, r5
   1cce8:	mov	r0, r8
   1ccec:	bl	110f8 <memcpy@plt>
   1ccf0:	ldr	r1, [sp, #40]	; 0x28
   1ccf4:	lsl	r0, r1, #4
   1ccf8:	mov	r1, sl
   1ccfc:	add	r0, r0, #23
   1cd00:	bl	1dd80 <__assert_fail@plt+0xca48>
   1cd04:	mov	r3, #20
   1cd08:	mul	r7, r3, r7
   1cd0c:	ldr	r1, [sp, #64]	; 0x40
   1cd10:	mov	r2, r7
   1cd14:	mla	ip, sl, r0, r8
   1cd18:	mov	r0, ip
   1cd1c:	bl	110f8 <memcpy@plt>
   1cd20:	ldr	r2, [sp, #24]
   1cd24:	ldr	r3, [sp, #72]	; 0x48
   1cd28:	cmp	r2, r3
   1cd2c:	mov	ip, r0
   1cd30:	beq	1cd44 <__assert_fail@plt+0xba0c>
   1cd34:	mov	r0, r2
   1cd38:	str	ip, [sp, #16]
   1cd3c:	bl	110e0 <free@plt>
   1cd40:	ldr	ip, [sp, #16]
   1cd44:	ldr	r0, [sp, #20]
   1cd48:	sub	fp, fp, #2
   1cd4c:	add	sl, r5, fp
   1cd50:	sub	r6, r6, #16
   1cd54:	sub	r3, r0, #2
   1cd58:	sub	r7, r7, #20
   1cd5c:	add	r3, r5, r3
   1cd60:	add	r6, r8, r6
   1cd64:	cmp	sl, r3
   1cd68:	add	r7, ip, r7
   1cd6c:	bcs	1dd44 <__assert_fail@plt+0xca0c>
   1cd70:	str	ip, [sp, #64]	; 0x40
   1cd74:	str	r8, [sp, #60]	; 0x3c
   1cd78:	str	r5, [sp, #24]
   1cd7c:	cmp	r4, #6
   1cd80:	beq	1dd4c <__assert_fail@plt+0xca14>
   1cd84:	ldr	r1, [sp, #76]	; 0x4c
   1cd88:	ldrsb	r5, [r1, r4]
   1cd8c:	cmn	r5, #81	; 0x51
   1cd90:	beq	1ce6c <__assert_fail@plt+0xbb34>
   1cd94:	ldr	r2, [sp, #36]	; 0x24
   1cd98:	ldr	r3, [r2]
   1cd9c:	cmn	r3, #2
   1cda0:	bne	1cdb0 <__assert_fail@plt+0xba78>
   1cda4:	bl	1b2b0 <__assert_fail@plt+0x9f78>
   1cda8:	ldr	r3, [sp, #36]	; 0x24
   1cdac:	str	r0, [r3]
   1cdb0:	ldr	r0, [sp, #36]	; 0x24
   1cdb4:	ldr	r3, [r0]
   1cdb8:	cmp	r3, #0
   1cdbc:	movle	r3, #0
   1cdc0:	strle	r3, [r0]
   1cdc4:	ble	1cde0 <__assert_fail@plt+0xbaa8>
   1cdc8:	cmp	r3, #280	; 0x118
   1cdcc:	movcs	r3, #2
   1cdd0:	ldrcc	r2, [pc, #3472]	; 1db68 <__assert_fail@plt+0xc830>
   1cdd4:	addcc	r2, pc, r2
   1cdd8:	addcc	r3, r2, r3
   1cddc:	ldrbcc	r3, [r3, #151]	; 0x97
   1cde0:	add	r2, r5, r3
   1cde4:	cmp	r2, #140	; 0x8c
   1cde8:	bhi	1ce6c <__assert_fail@plt+0xbb34>
   1cdec:	ldr	r1, [pc, #3448]	; 1db6c <__assert_fail@plt+0xc834>
   1cdf0:	add	r1, pc, r1
   1cdf4:	add	r0, r1, r2, lsl #1
   1cdf8:	add	r0, r0, #432	; 0x1b0
   1cdfc:	ldrsh	r0, [r0]
   1ce00:	cmp	r0, r3
   1ce04:	bne	1ce6c <__assert_fail@plt+0xbb34>
   1ce08:	add	r2, r1, r2
   1ce0c:	ldrb	r4, [r2, #714]	; 0x2ca
   1ce10:	cmp	r4, #0
   1ce14:	beq	1ce8c <__assert_fail@plt+0xbb54>
   1ce18:	ldr	r2, [sp, #36]	; 0x24
   1ce1c:	mvn	r3, #1
   1ce20:	ldr	r1, [sp, #32]
   1ce24:	add	r6, r6, #16
   1ce28:	ldr	r5, [sp, #44]	; 0x2c
   1ce2c:	add	r7, r7, #20
   1ce30:	str	r3, [r2]
   1ce34:	cmp	r1, #0
   1ce38:	ldr	r3, [pc, #3508]	; 1dbf4 <__assert_fail@plt+0xc8bc>
   1ce3c:	subne	r1, r1, #1
   1ce40:	strne	r1, [sp, #32]
   1ce44:	mov	ip, r7
   1ce48:	ldr	r3, [r9, r3]
   1ce4c:	ldm	r3, {r0, r1, r2, r3}
   1ce50:	stm	r6, {r0, r1, r2, r3}
   1ce54:	ldm	r5!, {r0, r1, r2, r3}
   1ce58:	stmia	ip!, {r0, r1, r2, r3}
   1ce5c:	ldr	r3, [r5]
   1ce60:	str	r3, [ip]
   1ce64:	add	sl, sl, #2
   1ce68:	b	1cc48 <__assert_fail@plt+0xb910>
   1ce6c:	ldr	r3, [pc, #3324]	; 1db70 <__assert_fail@plt+0xc838>
   1ce70:	add	r3, pc, r3
   1ce74:	add	r3, r3, r4
   1ce78:	ldrb	r3, [r3, #855]	; 0x357
   1ce7c:	cmp	r3, #0
   1ce80:	str	r3, [sp, #48]	; 0x30
   1ce84:	beq	1dc00 <__assert_fail@plt+0xc8c8>
   1ce88:	b	1ce90 <__assert_fail@plt+0xbb58>
   1ce8c:	str	r4, [sp, #48]	; 0x30
   1ce90:	ldr	r3, [pc, #3292]	; 1db74 <__assert_fail@plt+0xc83c>
   1ce94:	add	fp, sp, #120	; 0x78
   1ce98:	ldr	r0, [sp, #48]	; 0x30
   1ce9c:	add	r3, pc, r3
   1cea0:	add	r3, r3, r0
   1cea4:	ldrb	ip, [r3, #1006]	; 0x3ee
   1cea8:	rsb	r4, ip, #1
   1ceac:	cmp	ip, #0
   1ceb0:	add	r3, r6, r4, lsl #4
   1ceb4:	ldm	r3, {r0, r1, r2, r3}
   1ceb8:	stm	fp, {r0, r1, r2, r3}
   1cebc:	add	r1, sp, #140	; 0x8c
   1cec0:	str	r3, [sp, #52]	; 0x34
   1cec4:	str	r1, [sp, #20]
   1cec8:	ldr	r3, [pc, #3368]	; 1dbf8 <__assert_fail@plt+0xc8c0>
   1cecc:	beq	1cf0c <__assert_fail@plt+0xbbd4>
   1ced0:	mvn	r2, #19
   1ced4:	add	r0, sp, #7744	; 0x1e40
   1ced8:	mul	r2, r2, ip
   1cedc:	add	r0, r0, #16
   1cee0:	add	r2, r2, #20
   1cee4:	add	r1, r7, r2
   1cee8:	ldr	r2, [r7, r2]
   1ceec:	str	r2, [r0, r3]
   1cef0:	ldr	r3, [r7, #8]
   1cef4:	ldr	r2, [r1, #4]
   1cef8:	str	r3, [sp, #148]	; 0x94
   1cefc:	ldr	r3, [r7, #12]
   1cf00:	str	r2, [sp, #144]	; 0x90
   1cf04:	str	r3, [sp, #152]	; 0x98
   1cf08:	b	1cf2c <__assert_fail@plt+0xbbf4>
   1cf0c:	ldr	r2, [r7, #8]
   1cf10:	add	r1, sp, #7744	; 0x1e40
   1cf14:	add	r1, r1, #16
   1cf18:	str	r2, [r1, r3]
   1cf1c:	ldr	r3, [r7, #12]
   1cf20:	str	r2, [sp, #148]	; 0x94
   1cf24:	str	r3, [sp, #152]	; 0x98
   1cf28:	str	r3, [sp, #144]	; 0x90
   1cf2c:	ldr	r3, [r7, #16]
   1cf30:	sxth	ip, ip
   1cf34:	ldr	r2, [sp, #48]	; 0x30
   1cf38:	str	ip, [sp, #28]
   1cf3c:	str	r3, [sp, #156]	; 0x9c
   1cf40:	sub	r3, r2, #2
   1cf44:	cmp	r3, #83	; 0x53
   1cf48:	addls	pc, pc, r3, lsl #2
   1cf4c:	b	1da94 <__assert_fail@plt+0xc75c>
   1cf50:	b	1d0a0 <__assert_fail@plt+0xbd68>
   1cf54:	b	1d0d8 <__assert_fail@plt+0xbda0>
   1cf58:	b	1d0e0 <__assert_fail@plt+0xbda8>
   1cf5c:	b	1da94 <__assert_fail@plt+0xc75c>
   1cf60:	b	1d0e8 <__assert_fail@plt+0xbdb0>
   1cf64:	b	1d128 <__assert_fail@plt+0xbdf0>
   1cf68:	b	1d140 <__assert_fail@plt+0xbe08>
   1cf6c:	b	1d150 <__assert_fail@plt+0xbe18>
   1cf70:	b	1d160 <__assert_fail@plt+0xbe28>
   1cf74:	b	1d16c <__assert_fail@plt+0xbe34>
   1cf78:	b	1d17c <__assert_fail@plt+0xbe44>
   1cf7c:	b	1d18c <__assert_fail@plt+0xbe54>
   1cf80:	b	1d1ec <__assert_fail@plt+0xbeb4>
   1cf84:	b	1d234 <__assert_fail@plt+0xbefc>
   1cf88:	b	1d2a8 <__assert_fail@plt+0xbf70>
   1cf8c:	b	1d2f8 <__assert_fail@plt+0xbfc0>
   1cf90:	b	1d308 <__assert_fail@plt+0xbfd0>
   1cf94:	b	1d310 <__assert_fail@plt+0xbfd8>
   1cf98:	b	1d320 <__assert_fail@plt+0xbfe8>
   1cf9c:	b	1d334 <__assert_fail@plt+0xbffc>
   1cfa0:	b	1d35c <__assert_fail@plt+0xc024>
   1cfa4:	b	1d368 <__assert_fail@plt+0xc030>
   1cfa8:	b	1d374 <__assert_fail@plt+0xc03c>
   1cfac:	b	1d388 <__assert_fail@plt+0xc050>
   1cfb0:	b	1d3a0 <__assert_fail@plt+0xc068>
   1cfb4:	b	1d3c0 <__assert_fail@plt+0xc088>
   1cfb8:	b	1d3c8 <__assert_fail@plt+0xc090>
   1cfbc:	b	1d450 <__assert_fail@plt+0xc118>
   1cfc0:	b	1d998 <__assert_fail@plt+0xc660>
   1cfc4:	b	1d968 <__assert_fail@plt+0xc630>
   1cfc8:	b	1d498 <__assert_fail@plt+0xc160>
   1cfcc:	b	1d998 <__assert_fail@plt+0xc660>
   1cfd0:	b	1d4a8 <__assert_fail@plt+0xc170>
   1cfd4:	b	1d540 <__assert_fail@plt+0xc208>
   1cfd8:	b	1d55c <__assert_fail@plt+0xc224>
   1cfdc:	b	1d5f8 <__assert_fail@plt+0xc2c0>
   1cfe0:	b	1d998 <__assert_fail@plt+0xc660>
   1cfe4:	b	1da94 <__assert_fail@plt+0xc75c>
   1cfe8:	b	1da94 <__assert_fail@plt+0xc75c>
   1cfec:	b	1d698 <__assert_fail@plt+0xc360>
   1cff0:	b	1da94 <__assert_fail@plt+0xc75c>
   1cff4:	b	1da94 <__assert_fail@plt+0xc75c>
   1cff8:	b	1d6a0 <__assert_fail@plt+0xc368>
   1cffc:	b	1da94 <__assert_fail@plt+0xc75c>
   1d000:	b	1d6b4 <__assert_fail@plt+0xc37c>
   1d004:	b	1da94 <__assert_fail@plt+0xc75c>
   1d008:	b	1d6c8 <__assert_fail@plt+0xc390>
   1d00c:	b	1da94 <__assert_fail@plt+0xc75c>
   1d010:	b	1d6f0 <__assert_fail@plt+0xc3b8>
   1d014:	b	1da94 <__assert_fail@plt+0xc75c>
   1d018:	b	1d704 <__assert_fail@plt+0xc3cc>
   1d01c:	b	1da94 <__assert_fail@plt+0xc75c>
   1d020:	b	1d718 <__assert_fail@plt+0xc3e0>
   1d024:	b	1da94 <__assert_fail@plt+0xc75c>
   1d028:	b	1d72c <__assert_fail@plt+0xc3f4>
   1d02c:	b	1d748 <__assert_fail@plt+0xc410>
   1d030:	b	1da94 <__assert_fail@plt+0xc75c>
   1d034:	b	1d764 <__assert_fail@plt+0xc42c>
   1d038:	b	1d780 <__assert_fail@plt+0xc448>
   1d03c:	b	1d79c <__assert_fail@plt+0xc464>
   1d040:	b	1d7b8 <__assert_fail@plt+0xc480>
   1d044:	b	1d7d4 <__assert_fail@plt+0xc49c>
   1d048:	b	1d7e4 <__assert_fail@plt+0xc4ac>
   1d04c:	b	1da94 <__assert_fail@plt+0xc75c>
   1d050:	b	1d7f4 <__assert_fail@plt+0xc4bc>
   1d054:	b	1d808 <__assert_fail@plt+0xc4d0>
   1d058:	b	1da94 <__assert_fail@plt+0xc75c>
   1d05c:	b	1d82c <__assert_fail@plt+0xc4f4>
   1d060:	b	1d850 <__assert_fail@plt+0xc518>
   1d064:	b	1d8b8 <__assert_fail@plt+0xc580>
   1d068:	b	1da94 <__assert_fail@plt+0xc75c>
   1d06c:	b	1da94 <__assert_fail@plt+0xc75c>
   1d070:	b	1d920 <__assert_fail@plt+0xc5e8>
   1d074:	b	1d940 <__assert_fail@plt+0xc608>
   1d078:	b	1d950 <__assert_fail@plt+0xc618>
   1d07c:	b	1d968 <__assert_fail@plt+0xc630>
   1d080:	b	1d97c <__assert_fail@plt+0xc644>
   1d084:	b	1d998 <__assert_fail@plt+0xc660>
   1d088:	b	1d128 <__assert_fail@plt+0xbdf0>
   1d08c:	b	1d9bc <__assert_fail@plt+0xc684>
   1d090:	b	1d9cc <__assert_fail@plt+0xc694>
   1d094:	b	1da30 <__assert_fail@plt+0xc6f8>
   1d098:	b	1da50 <__assert_fail@plt+0xc718>
   1d09c:	b	1da70 <__assert_fail@plt+0xc738>
   1d0a0:	ldr	r4, [r6]
   1d0a4:	ldr	r8, [r6, #-32]	; 0xffffffe0
   1d0a8:	ldr	r5, [r6, #-16]
   1d0ac:	mov	r0, r4
   1d0b0:	bl	18d3c <__assert_fail@plt+0x7a04>
   1d0b4:	mov	r2, r4
   1d0b8:	mov	r1, r5
   1d0bc:	mov	r3, r0
   1d0c0:	mov	r0, r8
   1d0c4:	bl	17fe8 <__assert_fail@plt+0x6cb0>
   1d0c8:	ldr	r3, [pc, #2728]	; 1db78 <__assert_fail@plt+0xc840>
   1d0cc:	ldr	r3, [r9, r3]
   1d0d0:	str	r0, [r3]
   1d0d4:	b	1da94 <__assert_fail@plt+0xc75c>
   1d0d8:	mov	r2, #1
   1d0dc:	b	1da84 <__assert_fail@plt+0xc74c>
   1d0e0:	mov	r2, #3
   1d0e4:	b	1d12c <__assert_fail@plt+0xbdf4>
   1d0e8:	ldr	r2, [r6]
   1d0ec:	ldr	r3, [r6, #-16]
   1d0f0:	cmp	r2, r3
   1d0f4:	beq	1d120 <__assert_fail@plt+0xbde8>
   1d0f8:	ldr	r1, [pc, #2684]	; 1db7c <__assert_fail@plt+0xc844>
   1d0fc:	mov	r0, r7
   1d100:	ldr	r2, [pc, #2680]	; 1db80 <__assert_fail@plt+0xc848>
   1d104:	add	r1, pc, r1
   1d108:	add	r2, pc, r2
   1d10c:	bl	19490 <__assert_fail@plt+0x8158>
   1d110:	ldr	r3, [pc, #2668]	; 1db84 <__assert_fail@plt+0xc84c>
   1d114:	mov	r2, #1
   1d118:	ldr	r3, [r9, r3]
   1d11c:	strb	r2, [r3]
   1d120:	ldr	r2, [r6, #-16]
   1d124:	b	1da84 <__assert_fail@plt+0xc74c>
   1d128:	mov	r2, #0
   1d12c:	ldr	r3, [pc, #2644]	; 1db88 <__assert_fail@plt+0xc850>
   1d130:	add	r1, sp, #7744	; 0x1e40
   1d134:	add	r1, r1, #16
   1d138:	str	r2, [r1, r3]
   1d13c:	b	1da94 <__assert_fail@plt+0xc75c>
   1d140:	ldr	r0, [r6, #-16]
   1d144:	ldr	r1, [r6]
   1d148:	bl	17f6c <__assert_fail@plt+0x6c34>
   1d14c:	b	1da5c <__assert_fail@plt+0xc724>
   1d150:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d154:	ldrd	r2, [r6, #-16]
   1d158:	bl	17f30 <__assert_fail@plt+0x6bf8>
   1d15c:	b	1da3c <__assert_fail@plt+0xc704>
   1d160:	ldr	r0, [r6]
   1d164:	add	r0, r0, #20
   1d168:	b	1da78 <__assert_fail@plt+0xc740>
   1d16c:	ldr	r1, [pc, #2584]	; 1db8c <__assert_fail@plt+0xc854>
   1d170:	ldr	r0, [r6]
   1d174:	add	r1, pc, r1
   1d178:	b	1da38 <__assert_fail@plt+0xc700>
   1d17c:	ldr	r0, [r6, #-32]	; 0xffffffe0
   1d180:	ldr	r1, [r6]
   1d184:	bl	17db4 <__assert_fail@plt+0x6a7c>
   1d188:	b	1da5c <__assert_fail@plt+0xc724>
   1d18c:	ldr	r3, [r6, #-48]	; 0xffffffd0
   1d190:	tst	r3, #2
   1d194:	bne	1d1c4 <__assert_fail@plt+0xbe8c>
   1d198:	ldr	r1, [pc, #2544]	; 1db90 <__assert_fail@plt+0xc858>
   1d19c:	mov	r0, r7
   1d1a0:	ldr	r2, [pc, #2540]	; 1db94 <__assert_fail@plt+0xc85c>
   1d1a4:	ldr	r3, [r6, #-16]
   1d1a8:	add	r1, pc, r1
   1d1ac:	add	r2, pc, r2
   1d1b0:	bl	19490 <__assert_fail@plt+0x8158>
   1d1b4:	ldr	r3, [pc, #2504]	; 1db84 <__assert_fail@plt+0xc84c>
   1d1b8:	mov	r2, #1
   1d1bc:	ldr	r3, [r9, r3]
   1d1c0:	strb	r2, [r3]
   1d1c4:	mov	r0, #0
   1d1c8:	mov	r1, r0
   1d1cc:	bl	17a28 <__assert_fail@plt+0x66f0>
   1d1d0:	ldr	r1, [pc, #2496]	; 1db98 <__assert_fail@plt+0xc860>
   1d1d4:	add	r1, pc, r1
   1d1d8:	bl	17aac <__assert_fail@plt+0x6774>
   1d1dc:	ldr	r1, [r6]
   1d1e0:	ldr	r2, [r6, #-16]
   1d1e4:	bl	17bd4 <__assert_fail@plt+0x689c>
   1d1e8:	b	1da3c <__assert_fail@plt+0xc704>
   1d1ec:	ldr	r0, [r6, #-48]	; 0xffffffd0
   1d1f0:	ldr	r1, [r6, #-16]
   1d1f4:	bl	1862c <__assert_fail@plt+0x72f4>
   1d1f8:	subs	r4, r0, #0
   1d1fc:	beq	1d21c <__assert_fail@plt+0xbee4>
   1d200:	add	r0, r4, #44	; 0x2c
   1d204:	ldr	r1, [r6, #-32]	; 0xffffffe0
   1d208:	bl	178b8 <__assert_fail@plt+0x6580>
   1d20c:	mov	r0, r4
   1d210:	ldr	r1, [r6]
   1d214:	bl	17db4 <__assert_fail@plt+0x6a7c>
   1d218:	b	1d2f0 <__assert_fail@plt+0xbfb8>
   1d21c:	ldr	r1, [pc, #2424]	; 1db9c <__assert_fail@plt+0xc864>
   1d220:	sub	r0, r7, #20
   1d224:	ldr	r2, [pc, #2420]	; 1dba0 <__assert_fail@plt+0xc868>
   1d228:	add	r1, pc, r1
   1d22c:	add	r2, pc, r2
   1d230:	b	1d2d8 <__assert_fail@plt+0xbfa0>
   1d234:	ldr	r0, [r6, #-32]	; 0xffffffe0
   1d238:	ldr	r1, [r6, #-16]
   1d23c:	bl	1862c <__assert_fail@plt+0x72f4>
   1d240:	cmp	r0, #0
   1d244:	beq	1d254 <__assert_fail@plt+0xbf1c>
   1d248:	ldr	r1, [r6]
   1d24c:	bl	17db4 <__assert_fail@plt+0x6a7c>
   1d250:	b	1d2a0 <__assert_fail@plt+0xbf68>
   1d254:	ldr	r3, [r6, #-64]	; 0xffffffc0
   1d258:	tst	r3, #2
   1d25c:	beq	1d274 <__assert_fail@plt+0xbf3c>
   1d260:	ldr	r0, [r6, #-32]	; 0xffffffe0
   1d264:	ldr	r1, [r6]
   1d268:	ldr	r2, [r6, #-16]
   1d26c:	bl	17bd4 <__assert_fail@plt+0x689c>
   1d270:	b	1d2a0 <__assert_fail@plt+0xbf68>
   1d274:	ldr	r1, [pc, #2344]	; 1dba4 <__assert_fail@plt+0xc86c>
   1d278:	sub	r0, r7, #20
   1d27c:	ldr	r2, [pc, #2340]	; 1dba8 <__assert_fail@plt+0xc870>
   1d280:	ldr	r3, [r6, #-16]
   1d284:	add	r1, pc, r1
   1d288:	add	r2, pc, r2
   1d28c:	bl	19490 <__assert_fail@plt+0x8158>
   1d290:	ldr	r3, [pc, #2284]	; 1db84 <__assert_fail@plt+0xc84c>
   1d294:	mov	r2, #1
   1d298:	ldr	r3, [r9, r3]
   1d29c:	strb	r2, [r3]
   1d2a0:	ldr	r2, [r6, #-32]	; 0xffffffe0
   1d2a4:	b	1d12c <__assert_fail@plt+0xbdf4>
   1d2a8:	ldr	r0, [r6, #-48]	; 0xffffffd0
   1d2ac:	ldr	r1, [r6, #-16]
   1d2b0:	bl	1862c <__assert_fail@plt+0x72f4>
   1d2b4:	cmp	r0, #0
   1d2b8:	beq	1d2c4 <__assert_fail@plt+0xbf8c>
   1d2bc:	bl	17d08 <__assert_fail@plt+0x69d0>
   1d2c0:	b	1d2f0 <__assert_fail@plt+0xbfb8>
   1d2c4:	ldr	r1, [pc, #2272]	; 1dbac <__assert_fail@plt+0xc874>
   1d2c8:	sub	r0, r7, #20
   1d2cc:	ldr	r2, [pc, #2268]	; 1dbb0 <__assert_fail@plt+0xc878>
   1d2d0:	add	r1, pc, r1
   1d2d4:	add	r2, pc, r2
   1d2d8:	ldr	r3, [r6, #-16]
   1d2dc:	bl	19490 <__assert_fail@plt+0x8158>
   1d2e0:	ldr	r3, [pc, #2204]	; 1db84 <__assert_fail@plt+0xc84c>
   1d2e4:	mov	r2, #1
   1d2e8:	ldr	r3, [r9, r3]
   1d2ec:	strb	r2, [r3]
   1d2f0:	ldr	r2, [r6, #-48]	; 0xffffffd0
   1d2f4:	b	1da84 <__assert_fail@plt+0xc74c>
   1d2f8:	ldr	r0, [r6, #-48]	; 0xffffffd0
   1d2fc:	ldr	r1, [r6, #-32]	; 0xffffffe0
   1d300:	bl	17a28 <__assert_fail@plt+0x66f0>
   1d304:	b	1da3c <__assert_fail@plt+0xc704>
   1d308:	mov	r2, #0
   1d30c:	b	1da84 <__assert_fail@plt+0xc74c>
   1d310:	ldr	r0, [r6]
   1d314:	ldr	r1, [r6, #-16]
   1d318:	bl	179c0 <__assert_fail@plt+0x6688>
   1d31c:	b	1da3c <__assert_fail@plt+0xc704>
   1d320:	sub	r3, r6, #16
   1d324:	ldr	r0, [r6, #-48]	; 0xffffffd0
   1d328:	ldm	r3, {r1, r2, r3}
   1d32c:	bl	17948 <__assert_fail@plt+0x6610>
   1d330:	b	1da5c <__assert_fail@plt+0xc724>
   1d334:	ldr	r5, [r6, #-16]
   1d338:	add	r4, sp, #96	; 0x60
   1d33c:	mov	r1, #0
   1d340:	mov	r2, #12
   1d344:	mov	r0, r4
   1d348:	bl	11218 <memset@plt>
   1d34c:	mov	r0, r5
   1d350:	ldm	r4, {r1, r2, r3}
   1d354:	bl	17948 <__assert_fail@plt+0x6610>
   1d358:	b	1da3c <__assert_fail@plt+0xc704>
   1d35c:	ldr	r0, [r6, #-16]
   1d360:	bl	1798c <__assert_fail@plt+0x6654>
   1d364:	b	1da5c <__assert_fail@plt+0xc724>
   1d368:	ldr	r0, [r6]
   1d36c:	add	r0, r0, #24
   1d370:	b	1da78 <__assert_fail@plt+0xc740>
   1d374:	ldm	r6, {r0, r1, r2}
   1d378:	sub	r3, r6, #16
   1d37c:	stm	sp, {r0, r1, r2}
   1d380:	mov	r0, fp
   1d384:	b	1d3b4 <__assert_fail@plt+0xc07c>
   1d388:	sub	r3, r6, #16
   1d38c:	ldm	r3, {r0, r1, r2}
   1d390:	sub	r3, r6, #32
   1d394:	stm	sp, {r0, r1, r2}
   1d398:	mov	r0, fp
   1d39c:	b	1d3b4 <__assert_fail@plt+0xc07c>
   1d3a0:	sub	r3, r6, #16
   1d3a4:	ldm	r3, {r0, r1, r2}
   1d3a8:	sub	r3, r6, #48	; 0x30
   1d3ac:	stm	sp, {r0, r1, r2}
   1d3b0:	mov	r0, fp
   1d3b4:	ldm	r3, {r1, r2, r3}
   1d3b8:	bl	15084 <__assert_fail@plt+0x3d4c>
   1d3bc:	b	1da94 <__assert_fail@plt+0xc75c>
   1d3c0:	mov	r3, #1
   1d3c4:	b	1d99c <__assert_fail@plt+0xc664>
   1d3c8:	mov	r1, #0
   1d3cc:	ldr	r0, [r6, #-76]	; 0xffffffb4
   1d3d0:	bl	18f9c <__assert_fail@plt+0x7c64>
   1d3d4:	ldrd	r2, [r6, #-48]	; 0xffffffd0
   1d3d8:	orrs	r1, r2, r3
   1d3dc:	mov	r4, r0
   1d3e0:	beq	1d428 <__assert_fail@plt+0xc0f0>
   1d3e4:	mov	r1, r2
   1d3e8:	mov	r2, #0
   1d3ec:	bl	112e4 <fseek@plt>
   1d3f0:	cmp	r0, #0
   1d3f4:	beq	1d428 <__assert_fail@plt+0xc0f0>
   1d3f8:	bl	11200 <__errno_location@plt>
   1d3fc:	ldrd	r4, [r6, #-48]	; 0xffffffd0
   1d400:	ldr	r6, [r6, #-76]	; 0xffffffb4
   1d404:	ldr	r0, [r0]
   1d408:	bl	11188 <strerror@plt>
   1d40c:	str	r6, [sp]
   1d410:	mov	r2, r4
   1d414:	mov	r3, r5
   1d418:	str	r0, [sp, #4]
   1d41c:	ldr	r0, [pc, #1936]	; 1dbb4 <__assert_fail@plt+0xc87c>
   1d420:	add	r0, pc, r0
   1d424:	bl	11494 <__assert_fail@plt+0x15c>
   1d428:	add	r5, sp, #108	; 0x6c
   1d42c:	mov	r1, r4
   1d430:	ldr	r2, [r6, #-16]
   1d434:	mov	r0, r5
   1d438:	bl	14eb4 <__assert_fail@plt+0x3b7c>
   1d43c:	ldm	r5, {r0, r1, r2}
   1d440:	sub	r3, r6, #128	; 0x80
   1d444:	stm	sp, {r0, r1, r2}
   1d448:	mov	r0, fp
   1d44c:	b	1d484 <__assert_fail@plt+0xc14c>
   1d450:	mov	r1, #0
   1d454:	ldr	r0, [r6, #-12]
   1d458:	bl	18f9c <__assert_fail@plt+0x7c64>
   1d45c:	add	r5, sp, #108	; 0x6c
   1d460:	mvn	r2, #0
   1d464:	mov	r4, r0
   1d468:	mov	r0, r5
   1d46c:	mov	r1, r4
   1d470:	bl	14eb4 <__assert_fail@plt+0x3b7c>
   1d474:	ldm	r5, {r0, r1, r2}
   1d478:	sub	r3, r6, #64	; 0x40
   1d47c:	stm	sp, {r0, r1, r2}
   1d480:	mov	r0, fp
   1d484:	ldm	r3, {r1, r2, r3}
   1d488:	bl	15084 <__assert_fail@plt+0x3d4c>
   1d48c:	mov	r0, r4
   1d490:	bl	11260 <fclose@plt>
   1d494:	b	1da94 <__assert_fail@plt+0xc75c>
   1d498:	sub	r3, r6, #16
   1d49c:	ldm	r3, {r0, r1, r2}
   1d4a0:	stm	fp, {r0, r1, r2}
   1d4a4:	b	1da94 <__assert_fail@plt+0xc75c>
   1d4a8:	ldrd	r4, [r6, #-16]
   1d4ac:	cmp	r5, #0
   1d4b0:	cmpeq	r4, #8
   1d4b4:	moveq	r3, #0
   1d4b8:	movne	r3, #1
   1d4bc:	cmp	r5, #0
   1d4c0:	cmpeq	r4, #16
   1d4c4:	moveq	r3, #0
   1d4c8:	andne	r3, r3, #1
   1d4cc:	cmp	r3, #0
   1d4d0:	beq	1d528 <__assert_fail@plt+0xc1f0>
   1d4d4:	cmp	r5, #0
   1d4d8:	cmpeq	r4, #32
   1d4dc:	moveq	r3, #0
   1d4e0:	movne	r3, #1
   1d4e4:	cmp	r5, #0
   1d4e8:	cmpeq	r4, #64	; 0x40
   1d4ec:	moveq	r3, #0
   1d4f0:	andne	r3, r3, #1
   1d4f4:	cmp	r3, #0
   1d4f8:	beq	1d528 <__assert_fail@plt+0xc1f0>
   1d4fc:	ldr	r1, [pc, #1716]	; 1dbb8 <__assert_fail@plt+0xc880>
   1d500:	sub	r0, r7, #20
   1d504:	ldr	r2, [pc, #1712]	; 1dbbc <__assert_fail@plt+0xc884>
   1d508:	mov	r4, #32
   1d50c:	add	r1, pc, r1
   1d510:	add	r2, pc, r2
   1d514:	bl	19490 <__assert_fail@plt+0x8158>
   1d518:	ldr	r3, [pc, #1636]	; 1db84 <__assert_fail@plt+0xc84c>
   1d51c:	mov	r2, #1
   1d520:	ldr	r3, [r9, r3]
   1d524:	strb	r2, [r3]
   1d528:	mov	r0, fp
   1d52c:	mov	r1, #0
   1d530:	mov	r2, #12
   1d534:	bl	11218 <memset@plt>
   1d538:	str	r4, [sp, #52]	; 0x34
   1d53c:	b	1da94 <__assert_fail@plt+0xc75c>
   1d540:	mov	r2, #12
   1d544:	mov	r0, fp
   1d548:	mov	r1, #0
   1d54c:	bl	11218 <memset@plt>
   1d550:	mov	r2, #32
   1d554:	str	r2, [sp, #52]	; 0x34
   1d558:	b	1da94 <__assert_fail@plt+0xc75c>
   1d55c:	ldr	r8, [r6, #-4]
   1d560:	cmp	r8, #63	; 0x3f
   1d564:	bgt	1d5d8 <__assert_fail@plt+0xc2a0>
   1d568:	mov	r0, #1
   1d56c:	mov	r1, #0
   1d570:	mov	r2, r8
   1d574:	bl	1e1e8 <__assert_fail@plt+0xceb0>
   1d578:	ldrd	r4, [r6]
   1d57c:	subs	r0, r0, #1
   1d580:	sbc	r1, r1, #0
   1d584:	cmp	r5, r1
   1d588:	cmpeq	r4, r0
   1d58c:	bls	1d5d8 <__assert_fail@plt+0xc2a0>
   1d590:	orr	r4, r4, r0
   1d594:	orr	r5, r5, r1
   1d598:	mvn	r2, #0
   1d59c:	mvn	r3, #0
   1d5a0:	cmp	r5, r3
   1d5a4:	cmpeq	r4, r2
   1d5a8:	beq	1d5d8 <__assert_fail@plt+0xc2a0>
   1d5ac:	ldr	r1, [pc, #1548]	; 1dbc0 <__assert_fail@plt+0xc888>
   1d5b0:	mov	r3, r8
   1d5b4:	ldr	r2, [pc, #1544]	; 1dbc4 <__assert_fail@plt+0xc88c>
   1d5b8:	mov	r0, r7
   1d5bc:	add	r1, pc, r1
   1d5c0:	add	r2, pc, r2
   1d5c4:	bl	19490 <__assert_fail@plt+0x8158>
   1d5c8:	ldr	r3, [pc, #1460]	; 1db84 <__assert_fail@plt+0xc84c>
   1d5cc:	mov	r2, #1
   1d5d0:	ldr	r3, [r9, r3]
   1d5d4:	strb	r2, [r3]
   1d5d8:	ldrd	r2, [r6]
   1d5dc:	mov	r0, fp
   1d5e0:	strd	r2, [sp]
   1d5e4:	ldr	r3, [r6, #-4]
   1d5e8:	str	r3, [sp, #8]
   1d5ec:	sub	r3, r6, #16
   1d5f0:	ldm	r3, {r1, r2, r3}
   1d5f4:	b	1d690 <__assert_fail@plt+0xc358>
   1d5f8:	ldr	r8, [r6, #-4]
   1d5fc:	mvn	r0, #0
   1d600:	mvn	r1, #0
   1d604:	rsb	r2, r8, #64	; 0x40
   1d608:	bl	1e1cc <__assert_fail@plt+0xce94>
   1d60c:	cmp	r8, #32
   1d610:	sub	r8, r6, #16
   1d614:	mov	r4, r0
   1d618:	mov	r5, r1
   1d61c:	bne	1d654 <__assert_fail@plt+0xc31c>
   1d620:	mov	r3, #0
   1d624:	str	r3, [sp]
   1d628:	ldr	r3, [r6]
   1d62c:	add	ip, sp, #80	; 0x50
   1d630:	mov	r0, ip
   1d634:	str	r3, [sp, #4]
   1d638:	ldm	r8, {r1, r2, r3}
   1d63c:	str	ip, [sp, #16]
   1d640:	bl	153c0 <__assert_fail@plt+0x4088>
   1d644:	ldr	ip, [sp, #16]
   1d648:	ldm	ip, {r0, r1, r2}
   1d64c:	stm	r8, {r0, r1, r2}
   1d650:	b	1d67c <__assert_fail@plt+0xc344>
   1d654:	ldr	r1, [pc, #1388]	; 1dbc8 <__assert_fail@plt+0xc890>
   1d658:	mov	r0, r7
   1d65c:	ldr	r2, [pc, #1384]	; 1dbcc <__assert_fail@plt+0xc894>
   1d660:	add	r1, pc, r1
   1d664:	add	r2, pc, r2
   1d668:	bl	19490 <__assert_fail@plt+0x8158>
   1d66c:	ldr	r3, [pc, #1296]	; 1db84 <__assert_fail@plt+0xc84c>
   1d670:	mov	r2, #1
   1d674:	ldr	r3, [r9, r3]
   1d678:	strb	r2, [r3]
   1d67c:	strd	r4, [sp]
   1d680:	mov	r0, fp
   1d684:	ldr	r3, [r6, #-4]
   1d688:	str	r3, [sp, #8]
   1d68c:	ldm	r8, {r1, r2, r3}
   1d690:	bl	15124 <__assert_fail@plt+0x3dec>
   1d694:	b	1da94 <__assert_fail@plt+0xc75c>
   1d698:	ldrd	r2, [r6, #-16]
   1d69c:	b	1d92c <__assert_fail@plt+0xc5f4>
   1d6a0:	ldrd	r2, [r6, #-64]	; 0xffffffc0
   1d6a4:	orrs	r1, r2, r3
   1d6a8:	ldrdne	r2, [r6, #-32]	; 0xffffffe0
   1d6ac:	ldrdeq	r2, [r6]
   1d6b0:	b	1d92c <__assert_fail@plt+0xc5f4>
   1d6b4:	ldrd	r2, [r6, #-32]	; 0xffffffe0
   1d6b8:	orrs	r1, r2, r3
   1d6bc:	movne	r2, #1
   1d6c0:	bne	1d6e8 <__assert_fail@plt+0xc3b0>
   1d6c4:	b	1d6d8 <__assert_fail@plt+0xc3a0>
   1d6c8:	ldrd	r2, [r6, #-32]	; 0xffffffe0
   1d6cc:	orrs	r1, r2, r3
   1d6d0:	moveq	r2, #0
   1d6d4:	beq	1d6e8 <__assert_fail@plt+0xc3b0>
   1d6d8:	ldm	r6, {r2, r3}
   1d6dc:	orr	r2, r2, r3
   1d6e0:	adds	r2, r2, #0
   1d6e4:	movne	r2, #1
   1d6e8:	asr	r3, r2, #31
   1d6ec:	b	1d92c <__assert_fail@plt+0xc5f4>
   1d6f0:	ldrd	r0, [r6]
   1d6f4:	ldrd	r2, [r6, #-32]	; 0xffffffe0
   1d6f8:	orr	r2, r2, r0
   1d6fc:	orr	r3, r3, r1
   1d700:	b	1d92c <__assert_fail@plt+0xc5f4>
   1d704:	ldrd	r0, [r6]
   1d708:	ldrd	r2, [r6, #-32]	; 0xffffffe0
   1d70c:	eor	r2, r2, r0
   1d710:	eor	r3, r3, r1
   1d714:	b	1d92c <__assert_fail@plt+0xc5f4>
   1d718:	ldrd	r0, [r6]
   1d71c:	ldrd	r2, [r6, #-32]	; 0xffffffe0
   1d720:	and	r2, r2, r0
   1d724:	and	r3, r3, r1
   1d728:	b	1d92c <__assert_fail@plt+0xc5f4>
   1d72c:	ldrd	r2, [r6]
   1d730:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d734:	cmp	r1, r3
   1d738:	cmpeq	r0, r2
   1d73c:	movne	r2, #0
   1d740:	moveq	r2, #1
   1d744:	b	1d960 <__assert_fail@plt+0xc628>
   1d748:	ldrd	r2, [r6]
   1d74c:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d750:	cmp	r1, r3
   1d754:	cmpeq	r0, r2
   1d758:	moveq	r2, #0
   1d75c:	movne	r2, #1
   1d760:	b	1d960 <__assert_fail@plt+0xc628>
   1d764:	ldrd	r2, [r6]
   1d768:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d76c:	cmp	r1, r3
   1d770:	cmpeq	r0, r2
   1d774:	movcs	r2, #0
   1d778:	movcc	r2, #1
   1d77c:	b	1d960 <__assert_fail@plt+0xc628>
   1d780:	ldrd	r2, [r6]
   1d784:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d788:	cmp	r1, r3
   1d78c:	cmpeq	r0, r2
   1d790:	movls	r2, #0
   1d794:	movhi	r2, #1
   1d798:	b	1d960 <__assert_fail@plt+0xc628>
   1d79c:	ldrd	r2, [r6]
   1d7a0:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d7a4:	cmp	r1, r3
   1d7a8:	cmpeq	r0, r2
   1d7ac:	movhi	r2, #0
   1d7b0:	movls	r2, #1
   1d7b4:	b	1d960 <__assert_fail@plt+0xc628>
   1d7b8:	ldrd	r4, [r6, #-32]	; 0xffffffe0
   1d7bc:	ldrd	r0, [r6]
   1d7c0:	cmp	r5, r1
   1d7c4:	cmpeq	r4, r0
   1d7c8:	movcc	r2, #0
   1d7cc:	movcs	r2, #1
   1d7d0:	b	1d960 <__assert_fail@plt+0xc628>
   1d7d4:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d7d8:	ldr	r2, [r6]
   1d7dc:	bl	1e1e8 <__assert_fail@plt+0xceb0>
   1d7e0:	b	1d818 <__assert_fail@plt+0xc4e0>
   1d7e4:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d7e8:	ldr	r2, [r6]
   1d7ec:	bl	1e1cc <__assert_fail@plt+0xce94>
   1d7f0:	b	1d818 <__assert_fail@plt+0xc4e0>
   1d7f4:	ldrd	r4, [r6]
   1d7f8:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d7fc:	adds	r0, r0, r4
   1d800:	adc	r1, r1, r5
   1d804:	b	1d818 <__assert_fail@plt+0xc4e0>
   1d808:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d80c:	ldrd	r2, [r6]
   1d810:	subs	r0, r0, r2
   1d814:	sbc	r1, r1, r3
   1d818:	ldr	r3, [pc, #872]	; 1db88 <__assert_fail@plt+0xc850>
   1d81c:	add	r2, sp, #7744	; 0x1e40
   1d820:	add	r2, r2, #16
   1d824:	strd	r0, [r2, r3]
   1d828:	b	1da94 <__assert_fail@plt+0xc75c>
   1d82c:	ldr	r2, [r6]
   1d830:	ldr	r1, [r6, #-28]	; 0xffffffe4
   1d834:	ldr	r3, [r6, #-32]	; 0xffffffe0
   1d838:	ldr	r0, [r6, #4]
   1d83c:	mul	r1, r2, r1
   1d840:	mla	r1, r3, r0, r1
   1d844:	umull	r2, r3, r2, r3
   1d848:	add	r3, r1, r3
   1d84c:	b	1d92c <__assert_fail@plt+0xc5f4>
   1d850:	ldrd	r4, [r6]
   1d854:	ldr	r8, [pc, #812]	; 1db88 <__assert_fail@plt+0xc850>
   1d858:	orrs	r1, r4, r5
   1d85c:	beq	1d880 <__assert_fail@plt+0xc548>
   1d860:	mov	r2, r4
   1d864:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d868:	mov	r3, r5
   1d86c:	bl	1e204 <__assert_fail@plt+0xcecc>
   1d870:	add	r2, sp, #7744	; 0x1e40
   1d874:	add	r2, r2, #16
   1d878:	strd	r0, [r2, r8]
   1d87c:	b	1da94 <__assert_fail@plt+0xc75c>
   1d880:	ldr	r1, [pc, #840]	; 1dbd0 <__assert_fail@plt+0xc898>
   1d884:	add	r0, sp, #140	; 0x8c
   1d888:	ldr	r2, [pc, #836]	; 1dbd4 <__assert_fail@plt+0xc89c>
   1d88c:	add	r1, pc, r1
   1d890:	add	r2, pc, r2
   1d894:	bl	19490 <__assert_fail@plt+0x8158>
   1d898:	ldr	r3, [pc, #740]	; 1db84 <__assert_fail@plt+0xc84c>
   1d89c:	mov	r2, #1
   1d8a0:	ldr	r3, [r9, r3]
   1d8a4:	strb	r2, [r3]
   1d8a8:	add	r3, sp, #7744	; 0x1e40
   1d8ac:	add	r3, r3, #16
   1d8b0:	strd	r4, [r3, r8]
   1d8b4:	b	1da94 <__assert_fail@plt+0xc75c>
   1d8b8:	ldrd	r4, [r6]
   1d8bc:	ldr	r8, [pc, #708]	; 1db88 <__assert_fail@plt+0xc850>
   1d8c0:	orrs	r0, r4, r5
   1d8c4:	beq	1d8e8 <__assert_fail@plt+0xc5b0>
   1d8c8:	ldrd	r0, [r6, #-32]	; 0xffffffe0
   1d8cc:	mov	r2, r4
   1d8d0:	mov	r3, r5
   1d8d4:	bl	1e204 <__assert_fail@plt+0xcecc>
   1d8d8:	add	r1, sp, #7744	; 0x1e40
   1d8dc:	add	r1, r1, #16
   1d8e0:	strd	r2, [r1, r8]
   1d8e4:	b	1da94 <__assert_fail@plt+0xc75c>
   1d8e8:	ldr	r1, [pc, #744]	; 1dbd8 <__assert_fail@plt+0xc8a0>
   1d8ec:	add	r0, sp, #140	; 0x8c
   1d8f0:	ldr	r2, [pc, #740]	; 1dbdc <__assert_fail@plt+0xc8a4>
   1d8f4:	add	r1, pc, r1
   1d8f8:	add	r2, pc, r2
   1d8fc:	bl	19490 <__assert_fail@plt+0x8158>
   1d900:	ldr	r3, [pc, #636]	; 1db84 <__assert_fail@plt+0xc84c>
   1d904:	mov	r2, #1
   1d908:	ldr	r3, [r9, r3]
   1d90c:	strb	r2, [r3]
   1d910:	add	r2, sp, #7744	; 0x1e40
   1d914:	add	r2, r2, #16
   1d918:	strd	r4, [r2, r8]
   1d91c:	b	1da94 <__assert_fail@plt+0xc75c>
   1d920:	ldrd	r2, [r6]
   1d924:	rsbs	r2, r2, #0
   1d928:	rsc	r3, r3, #0
   1d92c:	ldr	r1, [pc, #596]	; 1db88 <__assert_fail@plt+0xc850>
   1d930:	add	r0, sp, #7744	; 0x1e40
   1d934:	add	r0, r0, #16
   1d938:	strd	r2, [r0, r1]
   1d93c:	b	1da94 <__assert_fail@plt+0xc75c>
   1d940:	ldrd	r2, [r6]
   1d944:	mvn	r2, r2
   1d948:	mvn	r3, r3
   1d94c:	b	1d92c <__assert_fail@plt+0xc5f4>
   1d950:	ldm	r6, {r1, r2}
   1d954:	orr	r2, r1, r2
   1d958:	rsbs	r2, r2, #1
   1d95c:	movcc	r2, #0
   1d960:	mov	r3, #0
   1d964:	b	1d92c <__assert_fail@plt+0xc5f4>
   1d968:	mov	r0, fp
   1d96c:	mov	r1, #0
   1d970:	mov	r2, #12
   1d974:	bl	11218 <memset@plt>
   1d978:	b	1da94 <__assert_fail@plt+0xc75c>
   1d97c:	mov	r3, r6
   1d980:	mov	r0, fp
   1d984:	ldrb	r2, [r3], #-16
   1d988:	str	r2, [sp]
   1d98c:	ldm	r3, {r1, r2, r3}
   1d990:	bl	152e4 <__assert_fail@plt+0x3fac>
   1d994:	b	1da94 <__assert_fail@plt+0xc75c>
   1d998:	mov	r3, #2
   1d99c:	str	r3, [sp]
   1d9a0:	mov	r3, r6
   1d9a4:	ldr	r2, [r3], #-16
   1d9a8:	mov	r0, fp
   1d9ac:	str	r2, [sp, #4]
   1d9b0:	ldm	r3, {r1, r2, r3}
   1d9b4:	bl	153c0 <__assert_fail@plt+0x4088>
   1d9b8:	b	1da94 <__assert_fail@plt+0xc75c>
   1d9bc:	ldr	r0, [r6, #-16]
   1d9c0:	ldr	r1, [r6]
   1d9c4:	bl	17af4 <__assert_fail@plt+0x67bc>
   1d9c8:	b	1da5c <__assert_fail@plt+0xc724>
   1d9cc:	ldr	r1, [pc, #524]	; 1dbe0 <__assert_fail@plt+0xc8a8>
   1d9d0:	mov	r0, r7
   1d9d4:	ldr	r2, [pc, #520]	; 1dbe4 <__assert_fail@plt+0xc8ac>
   1d9d8:	add	r1, pc, r1
   1d9dc:	add	r2, pc, r2
   1d9e0:	bl	19490 <__assert_fail@plt+0x8158>
   1d9e4:	ldr	r3, [pc, #408]	; 1db84 <__assert_fail@plt+0xc84c>
   1d9e8:	mov	r2, #1
   1d9ec:	ldr	r0, [sp, #28]
   1d9f0:	ldr	r3, [r9, r3]
   1d9f4:	strb	r2, [r3]
   1d9f8:	mov	r3, #20
   1d9fc:	mul	r4, r3, r4
   1da00:	add	r3, r7, r4
   1da04:	ldr	ip, [r3, #4]
   1da08:	lsl	r3, r0, #4
   1da0c:	rsb	r6, r3, r6
   1da10:	lsl	r3, r0, r2
   1da14:	rsb	sl, r3, sl
   1da18:	add	r3, r0, r0, lsl #2
   1da1c:	ldr	r5, [r7, r4]
   1da20:	lsl	r3, r3, #2
   1da24:	ldrsh	r4, [sl]
   1da28:	rsb	r7, r3, r7
   1da2c:	b	1dc5c <__assert_fail@plt+0xc924>
   1da30:	ldr	r0, [r6]
   1da34:	ldr	r1, [r6, #-16]
   1da38:	bl	17aac <__assert_fail@plt+0x6774>
   1da3c:	ldr	r3, [pc, #324]	; 1db88 <__assert_fail@plt+0xc850>
   1da40:	add	r1, sp, #7744	; 0x1e40
   1da44:	add	r1, r1, #16
   1da48:	str	r0, [r1, r3]
   1da4c:	b	1da94 <__assert_fail@plt+0xc75c>
   1da50:	bl	17a80 <__assert_fail@plt+0x6748>
   1da54:	ldr	r1, [r6, #-16]
   1da58:	bl	17aac <__assert_fail@plt+0x6774>
   1da5c:	ldr	r3, [pc, #292]	; 1db88 <__assert_fail@plt+0xc850>
   1da60:	add	r2, sp, #7744	; 0x1e40
   1da64:	add	r2, r2, #16
   1da68:	str	r0, [r2, r3]
   1da6c:	b	1da94 <__assert_fail@plt+0xc75c>
   1da70:	ldr	r0, [r6]
   1da74:	add	r0, r0, #44	; 0x2c
   1da78:	ldr	r1, [r6, #-16]
   1da7c:	bl	178b8 <__assert_fail@plt+0x6580>
   1da80:	ldr	r2, [r6]
   1da84:	ldr	r3, [pc, #252]	; 1db88 <__assert_fail@plt+0xc850>
   1da88:	add	r0, sp, #7744	; 0x1e40
   1da8c:	add	r0, r0, #16
   1da90:	str	r2, [r0, r3]
   1da94:	ldr	r1, [sp, #28]
   1da98:	add	r4, sp, #140	; 0x8c
   1da9c:	ldr	r2, [sp, #52]	; 0x34
   1daa0:	lsl	r3, r1, #4
   1daa4:	rsb	r6, r3, r6
   1daa8:	lsl	r3, r1, #1
   1daac:	rsb	sl, r3, sl
   1dab0:	add	r3, r1, r1, lsl #2
   1dab4:	str	r2, [fp, #12]
   1dab8:	add	r6, r6, #16
   1dabc:	lsl	r3, r3, #2
   1dac0:	rsb	r7, r3, r7
   1dac4:	ldm	fp, {r0, r1, r2, r3}
   1dac8:	add	r7, r7, #20
   1dacc:	mov	ip, r7
   1dad0:	stm	r6, {r0, r1, r2, r3}
   1dad4:	ldm	r4!, {r0, r1, r2, r3}
   1dad8:	stmia	ip!, {r0, r1, r2, r3}
   1dadc:	ldr	r3, [r4]
   1dae0:	ldr	r0, [sp, #48]	; 0x30
   1dae4:	str	r3, [ip]
   1dae8:	ldr	r3, [pc, #248]	; 1dbe8 <__assert_fail@plt+0xc8b0>
   1daec:	add	r3, pc, r3
   1daf0:	add	r2, r3, r0
   1daf4:	ldrsh	r0, [sl]
   1daf8:	ldrb	r1, [r2, #1092]	; 0x444
   1dafc:	sub	r1, r1, #48	; 0x30
   1db00:	add	r2, r3, r1
   1db04:	add	r2, r2, #1168	; 0x490
   1db08:	add	r2, r2, #10
   1db0c:	ldrsb	r2, [r2]
   1db10:	add	r2, r2, r0
   1db14:	cmp	r2, #140	; 0x8c
   1db18:	bhi	1db38 <__assert_fail@plt+0xc800>
   1db1c:	add	ip, r3, r2, lsl #1
   1db20:	add	ip, ip, #432	; 0x1b0
   1db24:	ldrsh	ip, [ip]
   1db28:	cmp	ip, r0
   1db2c:	addeq	r3, r3, r2
   1db30:	ldrbeq	r4, [r3, #714]	; 0x2ca
   1db34:	beq	1ce64 <__assert_fail@plt+0xbb2c>
   1db38:	ldr	r3, [pc, #172]	; 1dbec <__assert_fail@plt+0xc8b4>
   1db3c:	add	r3, pc, r3
   1db40:	add	r1, r3, r1, lsl #1
   1db44:	add	r1, r1, #1200	; 0x4b0
   1db48:	ldrsh	r4, [r1, #8]
   1db4c:	b	1ce64 <__assert_fail@plt+0xbb2c>
   1db50:	andeq	r7, r1, r8, lsr r4
   1db54:	strdeq	r0, [r0], -r8
   1db58:	andeq	r0, r0, r4, asr #2
   1db5c:	andeq	r0, r0, r4, lsl r1
   1db60:	andeq	r6, r0, r2, ror #7
   1db64:	ldrdeq	r6, [r0], -sl
   1db68:	andeq	r6, r0, r6, lsr r2
   1db6c:	andeq	r6, r0, sl, lsl r2
   1db70:	muleq	r0, sl, r1
   1db74:	andeq	r6, r0, lr, ror #2
   1db78:	andeq	r0, r0, ip, asr r1
   1db7c:	andeq	r6, r0, r3, lsr #8
   1db80:	andeq	r6, r0, r5, lsr #8
   1db84:	strdeq	r0, [r0], -ip
   1db88:			; <UNDEFINED> instruction: 0xffffe228
   1db8c:	strdeq	r3, [r0], -r2
   1db90:	andeq	r6, r0, pc, ror r3
   1db94:	andeq	r6, r0, r7, lsr #7
   1db98:	muleq	r0, r2, fp
   1db9c:	strdeq	r6, [r0], -pc	; <UNPREDICTABLE>
   1dba0:	andeq	r6, r0, r7, lsr #6
   1dba4:	andeq	r6, r0, r3, lsr #5
   1dba8:	andeq	r6, r0, fp, asr #5
   1dbac:	andeq	r6, r0, r7, asr r2
   1dbb0:	andeq	r6, r0, pc, ror r2
   1dbb4:	ldrdeq	r6, [r0], -lr
   1dbb8:	andeq	r6, r0, fp, lsl r0
   1dbbc:	andeq	r6, r0, lr, asr r0
   1dbc0:	andeq	r5, r0, fp, ror #30
   1dbc4:	ldrdeq	r5, [r0], -sl
   1dbc8:	andeq	r5, r0, r7, asr #29
   1dbcc:	andeq	r5, r0, r2, ror #30
   1dbd0:	muleq	r0, fp, ip
   1dbd4:	andeq	r5, r0, r2, ror sp
   1dbd8:	andeq	r5, r0, r3, lsr ip
   1dbdc:	andeq	r5, r0, sl, lsl #26
   1dbe0:	andeq	r5, r0, pc, asr #22
   1dbe4:	andeq	r5, r0, r7, lsr ip
   1dbe8:	andeq	r5, r0, lr, lsl r5
   1dbec:	andeq	r5, r0, lr, asr #9
   1dbf0:	andeq	r5, r0, ip, lsl sl
   1dbf4:	andeq	r0, r0, r0, ror #2
   1dbf8:			; <UNDEFINED> instruction: 0xffffe23c
   1dbfc:	andeq	r5, r0, r9, lsl #18
   1dc00:	ldr	r1, [sp, #32]
   1dc04:	cmp	r1, #0
   1dc08:	bne	1dc28 <__assert_fail@plt+0xc8f0>
   1dc0c:	ldr	r2, [sp, #68]	; 0x44
   1dc10:	ldr	r0, [pc, #-40]	; 1dbf0 <__assert_fail@plt+0xc8b8>
   1dc14:	ldr	r3, [r2]
   1dc18:	add	r0, pc, r0
   1dc1c:	add	r3, r3, #1
   1dc20:	str	r3, [r2]
   1dc24:	bl	1cb54 <__assert_fail@plt+0xb81c>
   1dc28:	ldr	r0, [sp, #32]
   1dc2c:	ldr	r3, [sp, #44]	; 0x2c
   1dc30:	cmp	r0, #3
   1dc34:	ldm	r3, {r5, ip}
   1dc38:	bne	1dc5c <__assert_fail@plt+0xc924>
   1dc3c:	ldr	r1, [sp, #36]	; 0x24
   1dc40:	ldr	r3, [r1]
   1dc44:	cmp	r3, #0
   1dc48:	ldrgt	r2, [sp, #36]	; 0x24
   1dc4c:	mvngt	r3, #1
   1dc50:	strgt	r3, [r2]
   1dc54:	bgt	1dc5c <__assert_fail@plt+0xc924>
   1dc58:	beq	1dd54 <__assert_fail@plt+0xca1c>
   1dc5c:	mov	r3, sl
   1dc60:	ldr	r0, [sp, #56]	; 0x38
   1dc64:	mov	sl, r3
   1dc68:	ldrsb	r2, [r0, r4]
   1dc6c:	cmn	r2, #81	; 0x51
   1dc70:	beq	1dca4 <__assert_fail@plt+0xc96c>
   1dc74:	add	r2, r2, #1
   1dc78:	cmp	r2, #140	; 0x8c
   1dc7c:	bhi	1dca4 <__assert_fail@plt+0xc96c>
   1dc80:	add	r1, r0, r2, lsl #1
   1dc84:	add	r1, r1, #432	; 0x1b0
   1dc88:	ldrsh	r1, [r1]
   1dc8c:	cmp	r1, #1
   1dc90:	bne	1dca4 <__assert_fail@plt+0xc96c>
   1dc94:	add	r2, r0, r2
   1dc98:	ldrb	r4, [r2, #714]	; 0x2ca
   1dc9c:	cmp	r4, #0
   1dca0:	bne	1dcc4 <__assert_fail@plt+0xc98c>
   1dca4:	ldr	r1, [sp, #24]
   1dca8:	cmp	r3, r1
   1dcac:	beq	1dd54 <__assert_fail@plt+0xca1c>
   1dcb0:	ldm	r7, {r5, ip}
   1dcb4:	sub	r6, r6, #16
   1dcb8:	sub	r7, r7, #20
   1dcbc:	ldrsh	r4, [r3, #-2]!
   1dcc0:	b	1dc60 <__assert_fail@plt+0xc928>
   1dcc4:	ldr	r3, [pc, #-216]	; 1dbf4 <__assert_fail@plt+0xc8bc>
   1dcc8:	add	r6, r6, #16
   1dccc:	add	r7, r7, #20
   1dcd0:	ldr	r3, [r9, r3]
   1dcd4:	str	ip, [sp, #144]	; 0x90
   1dcd8:	mov	ip, r7
   1dcdc:	ldm	r3, {r0, r1, r2, r3}
   1dce0:	stm	r6, {r0, r1, r2, r3}
   1dce4:	ldr	r0, [sp, #44]	; 0x2c
   1dce8:	ldr	r3, [sp, #44]	; 0x2c
   1dcec:	ldr	r1, [pc, #-252]	; 1dbf8 <__assert_fail@plt+0xc8c0>
   1dcf0:	ldr	r8, [r0, #16]
   1dcf4:	add	r0, sp, #7744	; 0x1e40
   1dcf8:	add	r0, r0, #16
   1dcfc:	ldr	r2, [r3, #8]
   1dd00:	ldr	r3, [r3, #12]
   1dd04:	str	r5, [r0, r1]
   1dd08:	add	r5, sp, #140	; 0x8c
   1dd0c:	str	r2, [sp, #148]	; 0x94
   1dd10:	str	r3, [sp, #152]	; 0x98
   1dd14:	ldm	r5!, {r0, r1, r2, r3}
   1dd18:	str	r8, [sp, #156]	; 0x9c
   1dd1c:	stmia	ip!, {r0, r1, r2, r3}
   1dd20:	mov	r1, #3
   1dd24:	str	r8, [ip]
   1dd28:	str	r1, [sp, #32]
   1dd2c:	b	1ce64 <__assert_fail@plt+0xbb2c>
   1dd30:	ldr	r0, [pc, #-316]	; 1dbfc <__assert_fail@plt+0xc8c4>
   1dd34:	mov	r4, #2
   1dd38:	add	r0, pc, r0
   1dd3c:	bl	1cb54 <__assert_fail@plt+0xb81c>
   1dd40:	b	1dd58 <__assert_fail@plt+0xca20>
   1dd44:	str	r5, [sp, #24]
   1dd48:	b	1dd54 <__assert_fail@plt+0xca1c>
   1dd4c:	mov	r4, #0
   1dd50:	b	1dd58 <__assert_fail@plt+0xca20>
   1dd54:	mov	r4, #1
   1dd58:	ldr	r2, [sp, #24]
   1dd5c:	ldr	r3, [sp, #72]	; 0x48
   1dd60:	cmp	r2, r3
   1dd64:	beq	1dd70 <__assert_fail@plt+0xca38>
   1dd68:	mov	r0, r2
   1dd6c:	bl	110e0 <free@plt>
   1dd70:	mov	r0, r4
   1dd74:	add	sp, sp, #7744	; 0x1e40
   1dd78:	add	sp, sp, #20
   1dd7c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1dd80:	subs	r2, r1, #1
   1dd84:	bxeq	lr
   1dd88:	bcc	1df60 <__assert_fail@plt+0xcc28>
   1dd8c:	cmp	r0, r1
   1dd90:	bls	1df44 <__assert_fail@plt+0xcc0c>
   1dd94:	tst	r1, r2
   1dd98:	beq	1df50 <__assert_fail@plt+0xcc18>
   1dd9c:	clz	r3, r0
   1dda0:	clz	r2, r1
   1dda4:	sub	r3, r2, r3
   1dda8:	rsbs	r3, r3, #31
   1ddac:	addne	r3, r3, r3, lsl #1
   1ddb0:	mov	r2, #0
   1ddb4:	addne	pc, pc, r3, lsl #2
   1ddb8:	nop	{0}
   1ddbc:	cmp	r0, r1, lsl #31
   1ddc0:	adc	r2, r2, r2
   1ddc4:	subcs	r0, r0, r1, lsl #31
   1ddc8:	cmp	r0, r1, lsl #30
   1ddcc:	adc	r2, r2, r2
   1ddd0:	subcs	r0, r0, r1, lsl #30
   1ddd4:	cmp	r0, r1, lsl #29
   1ddd8:	adc	r2, r2, r2
   1dddc:	subcs	r0, r0, r1, lsl #29
   1dde0:	cmp	r0, r1, lsl #28
   1dde4:	adc	r2, r2, r2
   1dde8:	subcs	r0, r0, r1, lsl #28
   1ddec:	cmp	r0, r1, lsl #27
   1ddf0:	adc	r2, r2, r2
   1ddf4:	subcs	r0, r0, r1, lsl #27
   1ddf8:	cmp	r0, r1, lsl #26
   1ddfc:	adc	r2, r2, r2
   1de00:	subcs	r0, r0, r1, lsl #26
   1de04:	cmp	r0, r1, lsl #25
   1de08:	adc	r2, r2, r2
   1de0c:	subcs	r0, r0, r1, lsl #25
   1de10:	cmp	r0, r1, lsl #24
   1de14:	adc	r2, r2, r2
   1de18:	subcs	r0, r0, r1, lsl #24
   1de1c:	cmp	r0, r1, lsl #23
   1de20:	adc	r2, r2, r2
   1de24:	subcs	r0, r0, r1, lsl #23
   1de28:	cmp	r0, r1, lsl #22
   1de2c:	adc	r2, r2, r2
   1de30:	subcs	r0, r0, r1, lsl #22
   1de34:	cmp	r0, r1, lsl #21
   1de38:	adc	r2, r2, r2
   1de3c:	subcs	r0, r0, r1, lsl #21
   1de40:	cmp	r0, r1, lsl #20
   1de44:	adc	r2, r2, r2
   1de48:	subcs	r0, r0, r1, lsl #20
   1de4c:	cmp	r0, r1, lsl #19
   1de50:	adc	r2, r2, r2
   1de54:	subcs	r0, r0, r1, lsl #19
   1de58:	cmp	r0, r1, lsl #18
   1de5c:	adc	r2, r2, r2
   1de60:	subcs	r0, r0, r1, lsl #18
   1de64:	cmp	r0, r1, lsl #17
   1de68:	adc	r2, r2, r2
   1de6c:	subcs	r0, r0, r1, lsl #17
   1de70:	cmp	r0, r1, lsl #16
   1de74:	adc	r2, r2, r2
   1de78:	subcs	r0, r0, r1, lsl #16
   1de7c:	cmp	r0, r1, lsl #15
   1de80:	adc	r2, r2, r2
   1de84:	subcs	r0, r0, r1, lsl #15
   1de88:	cmp	r0, r1, lsl #14
   1de8c:	adc	r2, r2, r2
   1de90:	subcs	r0, r0, r1, lsl #14
   1de94:	cmp	r0, r1, lsl #13
   1de98:	adc	r2, r2, r2
   1de9c:	subcs	r0, r0, r1, lsl #13
   1dea0:	cmp	r0, r1, lsl #12
   1dea4:	adc	r2, r2, r2
   1dea8:	subcs	r0, r0, r1, lsl #12
   1deac:	cmp	r0, r1, lsl #11
   1deb0:	adc	r2, r2, r2
   1deb4:	subcs	r0, r0, r1, lsl #11
   1deb8:	cmp	r0, r1, lsl #10
   1debc:	adc	r2, r2, r2
   1dec0:	subcs	r0, r0, r1, lsl #10
   1dec4:	cmp	r0, r1, lsl #9
   1dec8:	adc	r2, r2, r2
   1decc:	subcs	r0, r0, r1, lsl #9
   1ded0:	cmp	r0, r1, lsl #8
   1ded4:	adc	r2, r2, r2
   1ded8:	subcs	r0, r0, r1, lsl #8
   1dedc:	cmp	r0, r1, lsl #7
   1dee0:	adc	r2, r2, r2
   1dee4:	subcs	r0, r0, r1, lsl #7
   1dee8:	cmp	r0, r1, lsl #6
   1deec:	adc	r2, r2, r2
   1def0:	subcs	r0, r0, r1, lsl #6
   1def4:	cmp	r0, r1, lsl #5
   1def8:	adc	r2, r2, r2
   1defc:	subcs	r0, r0, r1, lsl #5
   1df00:	cmp	r0, r1, lsl #4
   1df04:	adc	r2, r2, r2
   1df08:	subcs	r0, r0, r1, lsl #4
   1df0c:	cmp	r0, r1, lsl #3
   1df10:	adc	r2, r2, r2
   1df14:	subcs	r0, r0, r1, lsl #3
   1df18:	cmp	r0, r1, lsl #2
   1df1c:	adc	r2, r2, r2
   1df20:	subcs	r0, r0, r1, lsl #2
   1df24:	cmp	r0, r1, lsl #1
   1df28:	adc	r2, r2, r2
   1df2c:	subcs	r0, r0, r1, lsl #1
   1df30:	cmp	r0, r1
   1df34:	adc	r2, r2, r2
   1df38:	subcs	r0, r0, r1
   1df3c:	mov	r0, r2
   1df40:	bx	lr
   1df44:	moveq	r0, #1
   1df48:	movne	r0, #0
   1df4c:	bx	lr
   1df50:	clz	r2, r1
   1df54:	rsb	r2, r2, #31
   1df58:	lsr	r0, r0, r2
   1df5c:	bx	lr
   1df60:	cmp	r0, #0
   1df64:	mvnne	r0, #0
   1df68:	b	1e240 <__assert_fail@plt+0xcf08>
   1df6c:	cmp	r1, #0
   1df70:	beq	1df60 <__assert_fail@plt+0xcc28>
   1df74:	push	{r0, r1, lr}
   1df78:	bl	1dd80 <__assert_fail@plt+0xca48>
   1df7c:	pop	{r1, r2, lr}
   1df80:	mul	r3, r2, r0
   1df84:	sub	r1, r1, r3
   1df88:	bx	lr
   1df8c:	cmp	r1, #0
   1df90:	beq	1e19c <__assert_fail@plt+0xce64>
   1df94:	eor	ip, r0, r1
   1df98:	rsbmi	r1, r1, #0
   1df9c:	subs	r2, r1, #1
   1dfa0:	beq	1e168 <__assert_fail@plt+0xce30>
   1dfa4:	movs	r3, r0
   1dfa8:	rsbmi	r3, r0, #0
   1dfac:	cmp	r3, r1
   1dfb0:	bls	1e174 <__assert_fail@plt+0xce3c>
   1dfb4:	tst	r1, r2
   1dfb8:	beq	1e184 <__assert_fail@plt+0xce4c>
   1dfbc:	clz	r2, r3
   1dfc0:	clz	r0, r1
   1dfc4:	sub	r2, r0, r2
   1dfc8:	rsbs	r2, r2, #31
   1dfcc:	addne	r2, r2, r2, lsl #1
   1dfd0:	mov	r0, #0
   1dfd4:	addne	pc, pc, r2, lsl #2
   1dfd8:	nop	{0}
   1dfdc:	cmp	r3, r1, lsl #31
   1dfe0:	adc	r0, r0, r0
   1dfe4:	subcs	r3, r3, r1, lsl #31
   1dfe8:	cmp	r3, r1, lsl #30
   1dfec:	adc	r0, r0, r0
   1dff0:	subcs	r3, r3, r1, lsl #30
   1dff4:	cmp	r3, r1, lsl #29
   1dff8:	adc	r0, r0, r0
   1dffc:	subcs	r3, r3, r1, lsl #29
   1e000:	cmp	r3, r1, lsl #28
   1e004:	adc	r0, r0, r0
   1e008:	subcs	r3, r3, r1, lsl #28
   1e00c:	cmp	r3, r1, lsl #27
   1e010:	adc	r0, r0, r0
   1e014:	subcs	r3, r3, r1, lsl #27
   1e018:	cmp	r3, r1, lsl #26
   1e01c:	adc	r0, r0, r0
   1e020:	subcs	r3, r3, r1, lsl #26
   1e024:	cmp	r3, r1, lsl #25
   1e028:	adc	r0, r0, r0
   1e02c:	subcs	r3, r3, r1, lsl #25
   1e030:	cmp	r3, r1, lsl #24
   1e034:	adc	r0, r0, r0
   1e038:	subcs	r3, r3, r1, lsl #24
   1e03c:	cmp	r3, r1, lsl #23
   1e040:	adc	r0, r0, r0
   1e044:	subcs	r3, r3, r1, lsl #23
   1e048:	cmp	r3, r1, lsl #22
   1e04c:	adc	r0, r0, r0
   1e050:	subcs	r3, r3, r1, lsl #22
   1e054:	cmp	r3, r1, lsl #21
   1e058:	adc	r0, r0, r0
   1e05c:	subcs	r3, r3, r1, lsl #21
   1e060:	cmp	r3, r1, lsl #20
   1e064:	adc	r0, r0, r0
   1e068:	subcs	r3, r3, r1, lsl #20
   1e06c:	cmp	r3, r1, lsl #19
   1e070:	adc	r0, r0, r0
   1e074:	subcs	r3, r3, r1, lsl #19
   1e078:	cmp	r3, r1, lsl #18
   1e07c:	adc	r0, r0, r0
   1e080:	subcs	r3, r3, r1, lsl #18
   1e084:	cmp	r3, r1, lsl #17
   1e088:	adc	r0, r0, r0
   1e08c:	subcs	r3, r3, r1, lsl #17
   1e090:	cmp	r3, r1, lsl #16
   1e094:	adc	r0, r0, r0
   1e098:	subcs	r3, r3, r1, lsl #16
   1e09c:	cmp	r3, r1, lsl #15
   1e0a0:	adc	r0, r0, r0
   1e0a4:	subcs	r3, r3, r1, lsl #15
   1e0a8:	cmp	r3, r1, lsl #14
   1e0ac:	adc	r0, r0, r0
   1e0b0:	subcs	r3, r3, r1, lsl #14
   1e0b4:	cmp	r3, r1, lsl #13
   1e0b8:	adc	r0, r0, r0
   1e0bc:	subcs	r3, r3, r1, lsl #13
   1e0c0:	cmp	r3, r1, lsl #12
   1e0c4:	adc	r0, r0, r0
   1e0c8:	subcs	r3, r3, r1, lsl #12
   1e0cc:	cmp	r3, r1, lsl #11
   1e0d0:	adc	r0, r0, r0
   1e0d4:	subcs	r3, r3, r1, lsl #11
   1e0d8:	cmp	r3, r1, lsl #10
   1e0dc:	adc	r0, r0, r0
   1e0e0:	subcs	r3, r3, r1, lsl #10
   1e0e4:	cmp	r3, r1, lsl #9
   1e0e8:	adc	r0, r0, r0
   1e0ec:	subcs	r3, r3, r1, lsl #9
   1e0f0:	cmp	r3, r1, lsl #8
   1e0f4:	adc	r0, r0, r0
   1e0f8:	subcs	r3, r3, r1, lsl #8
   1e0fc:	cmp	r3, r1, lsl #7
   1e100:	adc	r0, r0, r0
   1e104:	subcs	r3, r3, r1, lsl #7
   1e108:	cmp	r3, r1, lsl #6
   1e10c:	adc	r0, r0, r0
   1e110:	subcs	r3, r3, r1, lsl #6
   1e114:	cmp	r3, r1, lsl #5
   1e118:	adc	r0, r0, r0
   1e11c:	subcs	r3, r3, r1, lsl #5
   1e120:	cmp	r3, r1, lsl #4
   1e124:	adc	r0, r0, r0
   1e128:	subcs	r3, r3, r1, lsl #4
   1e12c:	cmp	r3, r1, lsl #3
   1e130:	adc	r0, r0, r0
   1e134:	subcs	r3, r3, r1, lsl #3
   1e138:	cmp	r3, r1, lsl #2
   1e13c:	adc	r0, r0, r0
   1e140:	subcs	r3, r3, r1, lsl #2
   1e144:	cmp	r3, r1, lsl #1
   1e148:	adc	r0, r0, r0
   1e14c:	subcs	r3, r3, r1, lsl #1
   1e150:	cmp	r3, r1
   1e154:	adc	r0, r0, r0
   1e158:	subcs	r3, r3, r1
   1e15c:	cmp	ip, #0
   1e160:	rsbmi	r0, r0, #0
   1e164:	bx	lr
   1e168:	teq	ip, r0
   1e16c:	rsbmi	r0, r0, #0
   1e170:	bx	lr
   1e174:	movcc	r0, #0
   1e178:	asreq	r0, ip, #31
   1e17c:	orreq	r0, r0, #1
   1e180:	bx	lr
   1e184:	clz	r2, r1
   1e188:	rsb	r2, r2, #31
   1e18c:	cmp	ip, #0
   1e190:	lsr	r0, r3, r2
   1e194:	rsbmi	r0, r0, #0
   1e198:	bx	lr
   1e19c:	cmp	r0, #0
   1e1a0:	mvngt	r0, #-2147483648	; 0x80000000
   1e1a4:	movlt	r0, #-2147483648	; 0x80000000
   1e1a8:	b	1e240 <__assert_fail@plt+0xcf08>
   1e1ac:	cmp	r1, #0
   1e1b0:	beq	1e19c <__assert_fail@plt+0xce64>
   1e1b4:	push	{r0, r1, lr}
   1e1b8:	bl	1df94 <__assert_fail@plt+0xcc5c>
   1e1bc:	pop	{r1, r2, lr}
   1e1c0:	mul	r3, r2, r0
   1e1c4:	sub	r1, r1, r3
   1e1c8:	bx	lr
   1e1cc:	subs	r3, r2, #32
   1e1d0:	rsb	ip, r2, #32
   1e1d4:	lsrmi	r0, r0, r2
   1e1d8:	lsrpl	r0, r1, r3
   1e1dc:	orrmi	r0, r0, r1, lsl ip
   1e1e0:	lsr	r1, r1, r2
   1e1e4:	bx	lr
   1e1e8:	subs	r3, r2, #32
   1e1ec:	rsb	ip, r2, #32
   1e1f0:	lslmi	r1, r1, r2
   1e1f4:	lslpl	r1, r0, r3
   1e1f8:	orrmi	r1, r1, r0, lsr ip
   1e1fc:	lsl	r0, r0, r2
   1e200:	bx	lr
   1e204:	cmp	r3, #0
   1e208:	cmpeq	r2, #0
   1e20c:	bne	1e224 <__assert_fail@plt+0xceec>
   1e210:	cmp	r1, #0
   1e214:	cmpeq	r0, #0
   1e218:	mvnne	r1, #0
   1e21c:	mvnne	r0, #0
   1e220:	b	1e240 <__assert_fail@plt+0xcf08>
   1e224:	sub	sp, sp, #8
   1e228:	push	{sp, lr}
   1e22c:	bl	1e28c <__assert_fail@plt+0xcf54>
   1e230:	ldr	lr, [sp, #4]
   1e234:	add	sp, sp, #8
   1e238:	pop	{r2, r3}
   1e23c:	bx	lr
   1e240:	push	{r1, lr}
   1e244:	mov	r0, #8
   1e248:	bl	1108c <raise@plt>
   1e24c:	pop	{r1, pc}
   1e250:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1e254:	mov	r8, r2
   1e258:	mov	r6, r0
   1e25c:	mov	r7, r1
   1e260:	mov	sl, r3
   1e264:	ldr	r9, [sp, #32]
   1e268:	bl	1e2c8 <__assert_fail@plt+0xcf90>
   1e26c:	umull	r4, r5, r8, r0
   1e270:	mul	r8, r8, r1
   1e274:	mla	r2, r0, sl, r8
   1e278:	add	r5, r2, r5
   1e27c:	subs	r4, r6, r4
   1e280:	sbc	r5, r7, r5
   1e284:	strd	r4, [r9]
   1e288:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1e28c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1e290:	mov	r8, r2
   1e294:	mov	r6, r0
   1e298:	mov	r7, r1
   1e29c:	mov	r5, r3
   1e2a0:	ldr	r9, [sp, #32]
   1e2a4:	bl	1e754 <__assert_fail@plt+0xd41c>
   1e2a8:	mul	r3, r0, r5
   1e2ac:	umull	r4, r5, r0, r8
   1e2b0:	mla	r8, r8, r1, r3
   1e2b4:	add	r5, r8, r5
   1e2b8:	subs	r4, r6, r4
   1e2bc:	sbc	r5, r7, r5
   1e2c0:	strd	r4, [r9]
   1e2c4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1e2c8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e2cc:	rsbs	r4, r0, #0
   1e2d0:	rsc	r5, r1, #0
   1e2d4:	cmp	r1, #0
   1e2d8:	mvn	r6, #0
   1e2dc:	sub	sp, sp, #12
   1e2e0:	movge	r4, r0
   1e2e4:	movge	r5, r1
   1e2e8:	movge	r6, #0
   1e2ec:	cmp	r3, #0
   1e2f0:	blt	1e528 <__assert_fail@plt+0xd1f0>
   1e2f4:	cmp	r3, #0
   1e2f8:	mov	sl, r4
   1e2fc:	mov	ip, r5
   1e300:	mov	r0, r2
   1e304:	mov	r1, r3
   1e308:	mov	r8, r2
   1e30c:	mov	r7, r4
   1e310:	mov	r9, r5
   1e314:	bne	1e40c <__assert_fail@plt+0xd0d4>
   1e318:	cmp	r2, r5
   1e31c:	bls	1e448 <__assert_fail@plt+0xd110>
   1e320:	clz	r3, r2
   1e324:	cmp	r3, #0
   1e328:	rsbne	r2, r3, #32
   1e32c:	lslne	r8, r0, r3
   1e330:	lsrne	r2, r4, r2
   1e334:	lslne	r7, r4, r3
   1e338:	orrne	r9, r2, r5, lsl r3
   1e33c:	lsr	r4, r8, #16
   1e340:	uxth	sl, r8
   1e344:	mov	r1, r4
   1e348:	mov	r0, r9
   1e34c:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e350:	mov	r1, r4
   1e354:	mov	fp, r0
   1e358:	mov	r0, r9
   1e35c:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e360:	mul	r0, sl, fp
   1e364:	lsr	r2, r7, #16
   1e368:	orr	r1, r2, r1, lsl #16
   1e36c:	cmp	r0, r1
   1e370:	bls	1e394 <__assert_fail@plt+0xd05c>
   1e374:	adds	r1, r1, r8
   1e378:	sub	r3, fp, #1
   1e37c:	bcs	1e390 <__assert_fail@plt+0xd058>
   1e380:	cmp	r0, r1
   1e384:	subhi	fp, fp, #2
   1e388:	addhi	r1, r1, r8
   1e38c:	bhi	1e394 <__assert_fail@plt+0xd05c>
   1e390:	mov	fp, r3
   1e394:	rsb	r9, r0, r1
   1e398:	mov	r1, r4
   1e39c:	uxth	r7, r7
   1e3a0:	mov	r0, r9
   1e3a4:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e3a8:	mov	r1, r4
   1e3ac:	mov	r5, r0
   1e3b0:	mov	r0, r9
   1e3b4:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e3b8:	mul	sl, sl, r5
   1e3bc:	orr	r1, r7, r1, lsl #16
   1e3c0:	cmp	sl, r1
   1e3c4:	bls	1e3e4 <__assert_fail@plt+0xd0ac>
   1e3c8:	adds	r8, r1, r8
   1e3cc:	sub	r3, r5, #1
   1e3d0:	bcs	1e3e0 <__assert_fail@plt+0xd0a8>
   1e3d4:	cmp	sl, r8
   1e3d8:	subhi	r5, r5, #2
   1e3dc:	bhi	1e3e4 <__assert_fail@plt+0xd0ac>
   1e3e0:	mov	r5, r3
   1e3e4:	orr	r3, r5, fp, lsl #16
   1e3e8:	mov	r4, #0
   1e3ec:	cmp	r6, #0
   1e3f0:	mov	r0, r3
   1e3f4:	mov	r1, r4
   1e3f8:	beq	1e404 <__assert_fail@plt+0xd0cc>
   1e3fc:	rsbs	r0, r0, #0
   1e400:	rsc	r1, r1, #0
   1e404:	add	sp, sp, #12
   1e408:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e40c:	cmp	r3, r5
   1e410:	movhi	r4, #0
   1e414:	movhi	r3, r4
   1e418:	bhi	1e3ec <__assert_fail@plt+0xd0b4>
   1e41c:	clz	r5, r1
   1e420:	cmp	r5, #0
   1e424:	bne	1e614 <__assert_fail@plt+0xd2dc>
   1e428:	cmp	r1, ip
   1e42c:	cmpcs	r2, sl
   1e430:	movhi	r4, #0
   1e434:	movls	r4, #1
   1e438:	movls	r3, #1
   1e43c:	movls	r4, r5
   1e440:	movhi	r3, r4
   1e444:	b	1e3ec <__assert_fail@plt+0xd0b4>
   1e448:	cmp	r2, #0
   1e44c:	bne	1e460 <__assert_fail@plt+0xd128>
   1e450:	mov	r1, r2
   1e454:	mov	r0, #1
   1e458:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e45c:	mov	r8, r0
   1e460:	clz	r3, r8
   1e464:	cmp	r3, #0
   1e468:	bne	1e538 <__assert_fail@plt+0xd200>
   1e46c:	rsb	r9, r8, r9
   1e470:	lsr	r5, r8, #16
   1e474:	uxth	sl, r8
   1e478:	mov	r4, #1
   1e47c:	mov	r1, r5
   1e480:	mov	r0, r9
   1e484:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e488:	mov	r1, r5
   1e48c:	mov	fp, r0
   1e490:	mov	r0, r9
   1e494:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e498:	mul	r0, sl, fp
   1e49c:	lsr	r2, r7, #16
   1e4a0:	orr	r1, r2, r1, lsl #16
   1e4a4:	cmp	r0, r1
   1e4a8:	bls	1e4c8 <__assert_fail@plt+0xd190>
   1e4ac:	adds	r1, r1, r8
   1e4b0:	sub	r3, fp, #1
   1e4b4:	bcs	1e734 <__assert_fail@plt+0xd3fc>
   1e4b8:	cmp	r0, r1
   1e4bc:	subhi	fp, fp, #2
   1e4c0:	addhi	r1, r1, r8
   1e4c4:	bls	1e734 <__assert_fail@plt+0xd3fc>
   1e4c8:	rsb	r2, r0, r1
   1e4cc:	mov	r1, r5
   1e4d0:	str	r2, [sp]
   1e4d4:	uxth	r7, r7
   1e4d8:	mov	r0, r2
   1e4dc:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e4e0:	ldr	r2, [sp]
   1e4e4:	mov	r1, r5
   1e4e8:	mov	r9, r0
   1e4ec:	mov	r0, r2
   1e4f0:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e4f4:	mul	sl, sl, r9
   1e4f8:	orr	r1, r7, r1, lsl #16
   1e4fc:	cmp	sl, r1
   1e500:	bls	1e520 <__assert_fail@plt+0xd1e8>
   1e504:	adds	r8, r1, r8
   1e508:	sub	r3, r9, #1
   1e50c:	bcs	1e51c <__assert_fail@plt+0xd1e4>
   1e510:	cmp	sl, r8
   1e514:	subhi	r9, r9, #2
   1e518:	bhi	1e520 <__assert_fail@plt+0xd1e8>
   1e51c:	mov	r9, r3
   1e520:	orr	r3, r9, fp, lsl #16
   1e524:	b	1e3ec <__assert_fail@plt+0xd0b4>
   1e528:	mvn	r6, r6
   1e52c:	rsbs	r2, r2, #0
   1e530:	rsc	r3, r3, #0
   1e534:	b	1e2f4 <__assert_fail@plt+0xcfbc>
   1e538:	lsl	r8, r8, r3
   1e53c:	rsb	fp, r3, #32
   1e540:	lsr	r4, r9, fp
   1e544:	lsr	fp, r7, fp
   1e548:	lsr	r5, r8, #16
   1e54c:	orr	fp, fp, r9, lsl r3
   1e550:	mov	r0, r4
   1e554:	lsl	r7, r7, r3
   1e558:	mov	r1, r5
   1e55c:	uxth	sl, r8
   1e560:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e564:	mov	r1, r5
   1e568:	mov	r3, r0
   1e56c:	mov	r0, r4
   1e570:	str	r3, [sp]
   1e574:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e578:	ldr	r3, [sp]
   1e57c:	lsr	r2, fp, #16
   1e580:	mul	r0, sl, r3
   1e584:	orr	r1, r2, r1, lsl #16
   1e588:	cmp	r0, r1
   1e58c:	bls	1e5ac <__assert_fail@plt+0xd274>
   1e590:	adds	r1, r1, r8
   1e594:	sub	r2, r3, #1
   1e598:	bcs	1e74c <__assert_fail@plt+0xd414>
   1e59c:	cmp	r0, r1
   1e5a0:	subhi	r3, r3, #2
   1e5a4:	addhi	r1, r1, r8
   1e5a8:	bls	1e74c <__assert_fail@plt+0xd414>
   1e5ac:	rsb	r9, r0, r1
   1e5b0:	mov	r1, r5
   1e5b4:	str	r3, [sp]
   1e5b8:	uxth	fp, fp
   1e5bc:	mov	r0, r9
   1e5c0:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e5c4:	mov	r1, r5
   1e5c8:	mov	r4, r0
   1e5cc:	mov	r0, r9
   1e5d0:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e5d4:	mul	r9, sl, r4
   1e5d8:	ldr	r3, [sp]
   1e5dc:	orr	r1, fp, r1, lsl #16
   1e5e0:	cmp	r9, r1
   1e5e4:	bls	1e608 <__assert_fail@plt+0xd2d0>
   1e5e8:	adds	r1, r1, r8
   1e5ec:	sub	r2, r4, #1
   1e5f0:	bcs	1e604 <__assert_fail@plt+0xd2cc>
   1e5f4:	cmp	r9, r1
   1e5f8:	subhi	r4, r4, #2
   1e5fc:	addhi	r1, r1, r8
   1e600:	bhi	1e608 <__assert_fail@plt+0xd2d0>
   1e604:	mov	r4, r2
   1e608:	rsb	r9, r9, r1
   1e60c:	orr	r4, r4, r3, lsl #16
   1e610:	b	1e47c <__assert_fail@plt+0xd144>
   1e614:	rsb	sl, r5, #32
   1e618:	lsl	r3, r2, r5
   1e61c:	lsr	r0, r2, sl
   1e620:	lsr	r2, ip, sl
   1e624:	orr	r4, r0, r1, lsl r5
   1e628:	lsr	sl, r7, sl
   1e62c:	mov	r0, r2
   1e630:	orr	sl, sl, ip, lsl r5
   1e634:	lsr	r9, r4, #16
   1e638:	str	r3, [sp, #4]
   1e63c:	str	r2, [sp]
   1e640:	uxth	fp, r4
   1e644:	mov	r1, r9
   1e648:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e64c:	ldr	r2, [sp]
   1e650:	mov	r1, r9
   1e654:	mov	r8, r0
   1e658:	mov	r0, r2
   1e65c:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e660:	mul	r0, fp, r8
   1e664:	lsr	r2, sl, #16
   1e668:	orr	r1, r2, r1, lsl #16
   1e66c:	cmp	r0, r1
   1e670:	bls	1e690 <__assert_fail@plt+0xd358>
   1e674:	adds	r1, r1, r4
   1e678:	sub	r2, r8, #1
   1e67c:	bcs	1e744 <__assert_fail@plt+0xd40c>
   1e680:	cmp	r0, r1
   1e684:	subhi	r8, r8, #2
   1e688:	addhi	r1, r1, r4
   1e68c:	bls	1e744 <__assert_fail@plt+0xd40c>
   1e690:	rsb	ip, r0, r1
   1e694:	mov	r1, r9
   1e698:	str	ip, [sp]
   1e69c:	mov	r0, ip
   1e6a0:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e6a4:	ldr	ip, [sp]
   1e6a8:	mov	r1, r9
   1e6ac:	mov	r2, r0
   1e6b0:	mov	r0, ip
   1e6b4:	str	r2, [sp]
   1e6b8:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e6bc:	ldr	r2, [sp]
   1e6c0:	uxth	ip, sl
   1e6c4:	mul	fp, fp, r2
   1e6c8:	orr	ip, ip, r1, lsl #16
   1e6cc:	cmp	fp, ip
   1e6d0:	bls	1e6f0 <__assert_fail@plt+0xd3b8>
   1e6d4:	adds	ip, ip, r4
   1e6d8:	sub	r1, r2, #1
   1e6dc:	bcs	1e73c <__assert_fail@plt+0xd404>
   1e6e0:	cmp	fp, ip
   1e6e4:	subhi	r2, r2, #2
   1e6e8:	addhi	ip, ip, r4
   1e6ec:	bls	1e73c <__assert_fail@plt+0xd404>
   1e6f0:	ldr	r0, [sp, #4]
   1e6f4:	orr	r1, r2, r8, lsl #16
   1e6f8:	rsb	fp, fp, ip
   1e6fc:	umull	r2, r3, r1, r0
   1e700:	cmp	fp, r3
   1e704:	bcc	1e728 <__assert_fail@plt+0xd3f0>
   1e708:	movne	r4, #0
   1e70c:	moveq	r4, #1
   1e710:	cmp	r2, r7, lsl r5
   1e714:	movls	r4, #0
   1e718:	andhi	r4, r4, #1
   1e71c:	cmp	r4, #0
   1e720:	moveq	r3, r1
   1e724:	beq	1e3ec <__assert_fail@plt+0xd0b4>
   1e728:	sub	r3, r1, #1
   1e72c:	mov	r4, #0
   1e730:	b	1e3ec <__assert_fail@plt+0xd0b4>
   1e734:	mov	fp, r3
   1e738:	b	1e4c8 <__assert_fail@plt+0xd190>
   1e73c:	mov	r2, r1
   1e740:	b	1e6f0 <__assert_fail@plt+0xd3b8>
   1e744:	mov	r8, r2
   1e748:	b	1e690 <__assert_fail@plt+0xd358>
   1e74c:	mov	r3, r2
   1e750:	b	1e5ac <__assert_fail@plt+0xd274>
   1e754:	cmp	r3, #0
   1e758:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e75c:	mov	r6, r0
   1e760:	sub	sp, sp, #12
   1e764:	mov	r5, r1
   1e768:	mov	r7, r0
   1e76c:	mov	r4, r2
   1e770:	mov	r8, r1
   1e774:	bne	1e854 <__assert_fail@plt+0xd51c>
   1e778:	cmp	r2, r1
   1e77c:	bls	1e890 <__assert_fail@plt+0xd558>
   1e780:	clz	r3, r2
   1e784:	cmp	r3, #0
   1e788:	rsbne	r8, r3, #32
   1e78c:	lslne	r4, r2, r3
   1e790:	lsrne	r8, r0, r8
   1e794:	lslne	r7, r0, r3
   1e798:	orrne	r8, r8, r1, lsl r3
   1e79c:	lsr	r5, r4, #16
   1e7a0:	uxth	sl, r4
   1e7a4:	mov	r1, r5
   1e7a8:	mov	r0, r8
   1e7ac:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e7b0:	mov	r1, r5
   1e7b4:	mov	r9, r0
   1e7b8:	mov	r0, r8
   1e7bc:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e7c0:	mul	r0, sl, r9
   1e7c4:	lsr	r3, r7, #16
   1e7c8:	orr	r1, r3, r1, lsl #16
   1e7cc:	cmp	r0, r1
   1e7d0:	bls	1e7f4 <__assert_fail@plt+0xd4bc>
   1e7d4:	adds	r1, r1, r4
   1e7d8:	sub	r2, r9, #1
   1e7dc:	bcs	1e7f0 <__assert_fail@plt+0xd4b8>
   1e7e0:	cmp	r0, r1
   1e7e4:	subhi	r9, r9, #2
   1e7e8:	addhi	r1, r1, r4
   1e7ec:	bhi	1e7f4 <__assert_fail@plt+0xd4bc>
   1e7f0:	mov	r9, r2
   1e7f4:	rsb	r8, r0, r1
   1e7f8:	mov	r1, r5
   1e7fc:	uxth	r7, r7
   1e800:	mov	r0, r8
   1e804:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e808:	mov	r1, r5
   1e80c:	mov	r6, r0
   1e810:	mov	r0, r8
   1e814:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e818:	mul	sl, sl, r6
   1e81c:	orr	r1, r7, r1, lsl #16
   1e820:	cmp	sl, r1
   1e824:	bls	1e840 <__assert_fail@plt+0xd508>
   1e828:	adds	r4, r1, r4
   1e82c:	sub	r3, r6, #1
   1e830:	bcs	1eb3c <__assert_fail@plt+0xd804>
   1e834:	cmp	sl, r4
   1e838:	subhi	r6, r6, #2
   1e83c:	bls	1eb3c <__assert_fail@plt+0xd804>
   1e840:	orr	r0, r6, r9, lsl #16
   1e844:	mov	r6, #0
   1e848:	mov	r1, r6
   1e84c:	add	sp, sp, #12
   1e850:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e854:	cmp	r3, r1
   1e858:	movhi	r6, #0
   1e85c:	movhi	r0, r6
   1e860:	bhi	1e848 <__assert_fail@plt+0xd510>
   1e864:	clz	r7, r3
   1e868:	cmp	r7, #0
   1e86c:	bne	1e96c <__assert_fail@plt+0xd634>
   1e870:	cmp	r3, r1
   1e874:	cmpcs	r2, r6
   1e878:	movhi	r6, #0
   1e87c:	movls	r6, #1
   1e880:	movls	r0, #1
   1e884:	movls	r6, r7
   1e888:	movhi	r0, r6
   1e88c:	b	1e848 <__assert_fail@plt+0xd510>
   1e890:	cmp	r2, #0
   1e894:	bne	1e8a8 <__assert_fail@plt+0xd570>
   1e898:	mov	r1, r2
   1e89c:	mov	r0, #1
   1e8a0:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e8a4:	mov	r4, r0
   1e8a8:	clz	r3, r4
   1e8ac:	cmp	r3, #0
   1e8b0:	bne	1ea68 <__assert_fail@plt+0xd730>
   1e8b4:	rsb	r5, r4, r5
   1e8b8:	lsr	r8, r4, #16
   1e8bc:	uxth	sl, r4
   1e8c0:	mov	r6, #1
   1e8c4:	mov	r1, r8
   1e8c8:	mov	r0, r5
   1e8cc:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e8d0:	mov	r1, r8
   1e8d4:	mov	r9, r0
   1e8d8:	mov	r0, r5
   1e8dc:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e8e0:	mul	r0, sl, r9
   1e8e4:	lsr	r3, r7, #16
   1e8e8:	orr	r1, r3, r1, lsl #16
   1e8ec:	cmp	r0, r1
   1e8f0:	bls	1e910 <__assert_fail@plt+0xd5d8>
   1e8f4:	adds	r1, r1, r4
   1e8f8:	sub	r2, r9, #1
   1e8fc:	bcs	1eb44 <__assert_fail@plt+0xd80c>
   1e900:	cmp	r0, r1
   1e904:	subhi	r9, r9, #2
   1e908:	addhi	r1, r1, r4
   1e90c:	bls	1eb44 <__assert_fail@plt+0xd80c>
   1e910:	rsb	fp, r0, r1
   1e914:	mov	r1, r8
   1e918:	uxth	r7, r7
   1e91c:	mov	r0, fp
   1e920:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e924:	mov	r1, r8
   1e928:	mov	r5, r0
   1e92c:	mov	r0, fp
   1e930:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e934:	mul	sl, sl, r5
   1e938:	orr	r1, r7, r1, lsl #16
   1e93c:	cmp	sl, r1
   1e940:	bls	1e95c <__assert_fail@plt+0xd624>
   1e944:	adds	r4, r1, r4
   1e948:	sub	r3, r5, #1
   1e94c:	bcs	1eb4c <__assert_fail@plt+0xd814>
   1e950:	cmp	sl, r4
   1e954:	subhi	r5, r5, #2
   1e958:	bls	1eb4c <__assert_fail@plt+0xd814>
   1e95c:	orr	r0, r5, r9, lsl #16
   1e960:	mov	r1, r6
   1e964:	add	sp, sp, #12
   1e968:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1e96c:	rsb	r1, r7, #32
   1e970:	lsl	r0, r2, r7
   1e974:	lsr	r2, r2, r1
   1e978:	lsr	fp, r5, r1
   1e97c:	orr	r8, r2, r3, lsl r7
   1e980:	lsr	r1, r6, r1
   1e984:	str	r0, [sp, #4]
   1e988:	orr	r5, r1, r5, lsl r7
   1e98c:	lsr	r9, r8, #16
   1e990:	mov	r0, fp
   1e994:	uxth	sl, r8
   1e998:	mov	r1, r9
   1e99c:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e9a0:	mov	r1, r9
   1e9a4:	mov	r4, r0
   1e9a8:	mov	r0, fp
   1e9ac:	bl	1df6c <__assert_fail@plt+0xcc34>
   1e9b0:	mul	r0, sl, r4
   1e9b4:	lsr	ip, r5, #16
   1e9b8:	orr	r1, ip, r1, lsl #16
   1e9bc:	cmp	r0, r1
   1e9c0:	bls	1e9d4 <__assert_fail@plt+0xd69c>
   1e9c4:	adds	r1, r1, r8
   1e9c8:	sub	r2, r4, #1
   1e9cc:	bcc	1eb68 <__assert_fail@plt+0xd830>
   1e9d0:	mov	r4, r2
   1e9d4:	rsb	ip, r0, r1
   1e9d8:	mov	r1, r9
   1e9dc:	str	ip, [sp]
   1e9e0:	uxth	r5, r5
   1e9e4:	mov	r0, ip
   1e9e8:	bl	1dd80 <__assert_fail@plt+0xca48>
   1e9ec:	ldr	ip, [sp]
   1e9f0:	mov	r1, r9
   1e9f4:	mov	fp, r0
   1e9f8:	mov	r0, ip
   1e9fc:	bl	1df6c <__assert_fail@plt+0xcc34>
   1ea00:	mul	sl, sl, fp
   1ea04:	orr	r1, r5, r1, lsl #16
   1ea08:	cmp	sl, r1
   1ea0c:	bls	1ea20 <__assert_fail@plt+0xd6e8>
   1ea10:	adds	r1, r1, r8
   1ea14:	sub	r2, fp, #1
   1ea18:	bcc	1eb54 <__assert_fail@plt+0xd81c>
   1ea1c:	mov	fp, r2
   1ea20:	ldr	r3, [sp, #4]
   1ea24:	orr	r0, fp, r4, lsl #16
   1ea28:	rsb	sl, sl, r1
   1ea2c:	umull	r4, r5, r0, r3
   1ea30:	cmp	sl, r5
   1ea34:	bcc	1ea54 <__assert_fail@plt+0xd71c>
   1ea38:	movne	r3, #0
   1ea3c:	moveq	r3, #1
   1ea40:	cmp	r4, r6, lsl r7
   1ea44:	movls	r6, #0
   1ea48:	andhi	r6, r3, #1
   1ea4c:	cmp	r6, #0
   1ea50:	beq	1e848 <__assert_fail@plt+0xd510>
   1ea54:	mov	r6, #0
   1ea58:	sub	r0, r0, #1
   1ea5c:	mov	r1, r6
   1ea60:	add	sp, sp, #12
   1ea64:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1ea68:	lsl	r4, r4, r3
   1ea6c:	rsb	r9, r3, #32
   1ea70:	lsr	r2, r5, r9
   1ea74:	lsr	r9, r6, r9
   1ea78:	lsr	r8, r4, #16
   1ea7c:	orr	r9, r9, r5, lsl r3
   1ea80:	mov	r0, r2
   1ea84:	lsl	r7, r6, r3
   1ea88:	mov	r1, r8
   1ea8c:	str	r2, [sp]
   1ea90:	bl	1dd80 <__assert_fail@plt+0xca48>
   1ea94:	ldr	r2, [sp]
   1ea98:	mov	r1, r8
   1ea9c:	uxth	sl, r4
   1eaa0:	mov	fp, r0
   1eaa4:	mov	r0, r2
   1eaa8:	bl	1df6c <__assert_fail@plt+0xcc34>
   1eaac:	mul	r0, sl, fp
   1eab0:	lsr	r3, r9, #16
   1eab4:	orr	r1, r3, r1, lsl #16
   1eab8:	cmp	r0, r1
   1eabc:	bls	1eadc <__assert_fail@plt+0xd7a4>
   1eac0:	adds	r1, r1, r4
   1eac4:	sub	r3, fp, #1
   1eac8:	bcs	1eb7c <__assert_fail@plt+0xd844>
   1eacc:	cmp	r0, r1
   1ead0:	subhi	fp, fp, #2
   1ead4:	addhi	r1, r1, r4
   1ead8:	bls	1eb7c <__assert_fail@plt+0xd844>
   1eadc:	rsb	r5, r0, r1
   1eae0:	mov	r1, r8
   1eae4:	uxth	r9, r9
   1eae8:	mov	r0, r5
   1eaec:	bl	1dd80 <__assert_fail@plt+0xca48>
   1eaf0:	mov	r1, r8
   1eaf4:	mov	r6, r0
   1eaf8:	mov	r0, r5
   1eafc:	bl	1df6c <__assert_fail@plt+0xcc34>
   1eb00:	mul	r5, sl, r6
   1eb04:	orr	r1, r9, r1, lsl #16
   1eb08:	cmp	r5, r1
   1eb0c:	bls	1eb30 <__assert_fail@plt+0xd7f8>
   1eb10:	adds	r1, r1, r4
   1eb14:	sub	r3, r6, #1
   1eb18:	bcs	1eb2c <__assert_fail@plt+0xd7f4>
   1eb1c:	cmp	r5, r1
   1eb20:	subhi	r6, r6, #2
   1eb24:	addhi	r1, r1, r4
   1eb28:	bhi	1eb30 <__assert_fail@plt+0xd7f8>
   1eb2c:	mov	r6, r3
   1eb30:	rsb	r5, r5, r1
   1eb34:	orr	r6, r6, fp, lsl #16
   1eb38:	b	1e8c4 <__assert_fail@plt+0xd58c>
   1eb3c:	mov	r6, r3
   1eb40:	b	1e840 <__assert_fail@plt+0xd508>
   1eb44:	mov	r9, r2
   1eb48:	b	1e910 <__assert_fail@plt+0xd5d8>
   1eb4c:	mov	r5, r3
   1eb50:	b	1e95c <__assert_fail@plt+0xd624>
   1eb54:	cmp	sl, r1
   1eb58:	subhi	fp, fp, #2
   1eb5c:	addhi	r1, r1, r8
   1eb60:	bhi	1ea20 <__assert_fail@plt+0xd6e8>
   1eb64:	b	1ea1c <__assert_fail@plt+0xd6e4>
   1eb68:	cmp	r0, r1
   1eb6c:	subhi	r4, r4, #2
   1eb70:	addhi	r1, r1, r8
   1eb74:	bhi	1e9d4 <__assert_fail@plt+0xd69c>
   1eb78:	b	1e9d0 <__assert_fail@plt+0xd698>
   1eb7c:	mov	fp, r3
   1eb80:	b	1eadc <__assert_fail@plt+0xd7a4>
   1eb84:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1eb88:	mov	r7, r0
   1eb8c:	ldr	r6, [pc, #76]	; 1ebe0 <__assert_fail@plt+0xd8a8>
   1eb90:	mov	r8, r1
   1eb94:	ldr	r5, [pc, #72]	; 1ebe4 <__assert_fail@plt+0xd8ac>
   1eb98:	mov	r9, r2
   1eb9c:	add	r6, pc, r6
   1eba0:	bl	11060 <strstr@plt-0x20>
   1eba4:	add	r5, pc, r5
   1eba8:	rsb	r6, r5, r6
   1ebac:	asrs	r6, r6, #2
   1ebb0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   1ebb4:	sub	r5, r5, #4
   1ebb8:	mov	r4, #0
   1ebbc:	add	r4, r4, #1
   1ebc0:	ldr	r3, [r5, #4]!
   1ebc4:	mov	r0, r7
   1ebc8:	mov	r1, r8
   1ebcc:	mov	r2, r9
   1ebd0:	blx	r3
   1ebd4:	cmp	r4, r6
   1ebd8:	bne	1ebbc <__assert_fail@plt+0xd884>
   1ebdc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1ebe0:	strheq	r5, [r1], -r8
   1ebe4:	andeq	r5, r1, ip, lsr #1
   1ebe8:	bx	lr
   1ebec:	mov	r2, r1
   1ebf0:	mov	r1, r0
   1ebf4:	mov	r0, #3
   1ebf8:	b	11134 <__xstat@plt>
   1ebfc:	mov	r2, r1
   1ec00:	mov	r1, r0
   1ec04:	mov	r0, #3
   1ec08:	b	112d8 <__lxstat@plt>

Disassembly of section .fini:

0001ec0c <.fini>:
   1ec0c:	push	{r3, lr}
   1ec10:	pop	{r3, pc}
