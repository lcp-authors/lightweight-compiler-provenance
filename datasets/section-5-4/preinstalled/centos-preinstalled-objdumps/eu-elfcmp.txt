
centos-preinstalled/eu-elfcmp:     file format elf32-littlearm


Disassembly of section .init:

00010e54 <.init>:
   10e54:	push	{r3, lr}
   10e58:	bl	12ff0 <__assert_fail@plt+0x1f0c>
   10e5c:	pop	{r3, pc}

Disassembly of section .plt:

00010e60 <calloc@plt-0x14>:
   10e60:	push	{lr}		; (str lr, [sp, #-4]!)
   10e64:	ldr	lr, [pc, #4]	; 10e70 <calloc@plt-0x4>
   10e68:	add	lr, pc, lr
   10e6c:	ldr	pc, [lr, #8]!
   10e70:	muleq	r1, r0, r1

00010e74 <calloc@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #90112	; 0x16000
   10e7c:	ldr	pc, [ip, #400]!	; 0x190

00010e80 <gelf_getehdr@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #90112	; 0x16000
   10e88:	ldr	pc, [ip, #392]!	; 0x188

00010e8c <raise@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #90112	; 0x16000
   10e94:	ldr	pc, [ip, #384]!	; 0x180

00010e98 <gelf_getshdr@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #90112	; 0x16000
   10ea0:	ldr	pc, [ip, #376]!	; 0x178

00010ea4 <strcmp@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #90112	; 0x16000
   10eac:	ldr	pc, [ip, #368]!	; 0x170

00010eb0 <elf_version@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #90112	; 0x16000
   10eb8:	ldr	pc, [ip, #360]!	; 0x168

00010ebc <free@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #90112	; 0x16000
   10ec4:	ldr	pc, [ip, #352]!	; 0x160

00010ec8 <memcmp@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #90112	; 0x16000
   10ed0:	ldr	pc, [ip, #344]!	; 0x158

00010ed4 <dcgettext@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #90112	; 0x16000
   10edc:	ldr	pc, [ip, #336]!	; 0x150

00010ee0 <gelf_getnote@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #90112	; 0x16000
   10ee8:	ldr	pc, [ip, #328]!	; 0x148

00010eec <__stack_chk_fail@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #90112	; 0x16000
   10ef4:	ldr	pc, [ip, #320]!	; 0x140

00010ef8 <dlclose@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #90112	; 0x16000
   10f00:	ldr	pc, [ip, #312]!	; 0x138

00010f04 <gelf_getphdr@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #90112	; 0x16000
   10f0c:	ldr	pc, [ip, #304]!	; 0x130

00010f10 <gelf_getsym@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #90112	; 0x16000
   10f18:	ldr	pc, [ip, #296]!	; 0x128

00010f1c <elf_strptr@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #90112	; 0x16000
   10f24:	ldr	pc, [ip, #288]!	; 0x120

00010f28 <textdomain@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #90112	; 0x16000
   10f30:	ldr	pc, [ip, #280]!	; 0x118

00010f34 <strcasecmp@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #90112	; 0x16000
   10f3c:	ldr	pc, [ip, #272]!	; 0x110

00010f40 <__stpcpy_chk@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #90112	; 0x16000
   10f48:	ldr	pc, [ip, #264]!	; 0x108

00010f4c <dlopen@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #90112	; 0x16000
   10f54:	ldr	pc, [ip, #256]!	; 0x100

00010f58 <elf_getdata@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #90112	; 0x16000
   10f60:	ldr	pc, [ip, #248]!	; 0xf8

00010f64 <error@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #90112	; 0x16000
   10f6c:	ldr	pc, [ip, #240]!	; 0xf0

00010f70 <open64@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #90112	; 0x16000
   10f78:	ldr	pc, [ip, #232]!	; 0xe8

00010f7c <__libc_start_main@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #90112	; 0x16000
   10f84:	ldr	pc, [ip, #224]!	; 0xe0

00010f88 <__gmon_start__@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #90112	; 0x16000
   10f90:	ldr	pc, [ip, #216]!	; 0xd8

00010f94 <elf_end@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #90112	; 0x16000
   10f9c:	ldr	pc, [ip, #208]!	; 0xd0

00010fa0 <exit@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #90112	; 0x16000
   10fa8:	ldr	pc, [ip, #200]!	; 0xc8

00010fac <elf_errmsg@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #90112	; 0x16000
   10fb4:	ldr	pc, [ip, #192]!	; 0xc0

00010fb8 <gelf_getrela@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #90112	; 0x16000
   10fc0:	ldr	pc, [ip, #184]!	; 0xb8

00010fc4 <__errno_location@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #90112	; 0x16000
   10fcc:	ldr	pc, [ip, #176]!	; 0xb0

00010fd0 <argp_help@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #90112	; 0x16000
   10fd8:	ldr	pc, [ip, #168]!	; 0xa8

00010fdc <elf_getphdrnum@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #90112	; 0x16000
   10fe4:	ldr	pc, [ip, #160]!	; 0xa0

00010fe8 <memset@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #90112	; 0x16000
   10ff0:	ldr	pc, [ip, #152]!	; 0x98

00010ff4 <argp_parse@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #90112	; 0x16000
   10ffc:	ldr	pc, [ip, #144]!	; 0x90

00011000 <elf_rawfile@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #90112	; 0x16000
   11008:	ldr	pc, [ip, #136]!	; 0x88

0001100c <__fprintf_chk@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #90112	; 0x16000
   11014:	ldr	pc, [ip, #128]!	; 0x80

00011018 <elf_begin@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #90112	; 0x16000
   11020:	ldr	pc, [ip, #120]!	; 0x78

00011024 <setlocale@plt>:
   11024:	add	ip, pc, #0, 12
   11028:	add	ip, ip, #90112	; 0x16000
   1102c:	ldr	pc, [ip, #112]!	; 0x70

00011030 <elf_nextscn@plt>:
   11030:	add	ip, pc, #0, 12
   11034:	add	ip, ip, #90112	; 0x16000
   11038:	ldr	pc, [ip, #104]!	; 0x68

0001103c <gelf_getrel@plt>:
   1103c:	add	ip, pc, #0, 12
   11040:	add	ip, ip, #90112	; 0x16000
   11044:	ldr	pc, [ip, #96]!	; 0x60

00011048 <qsort@plt>:
   11048:	add	ip, pc, #0, 12
   1104c:	add	ip, ip, #90112	; 0x16000
   11050:	ldr	pc, [ip, #88]!	; 0x58

00011054 <elf_ndxscn@plt>:
   11054:	add	ip, pc, #0, 12
   11058:	add	ip, ip, #90112	; 0x16000
   1105c:	ldr	pc, [ip, #80]!	; 0x50

00011060 <elf_getscn@plt>:
   11060:	add	ip, pc, #0, 12
   11064:	add	ip, ip, #90112	; 0x16000
   11068:	ldr	pc, [ip, #72]!	; 0x48

0001106c <elf_getshdrnum@plt>:
   1106c:	add	ip, pc, #0, 12
   11070:	add	ip, ip, #90112	; 0x16000
   11074:	ldr	pc, [ip, #64]!	; 0x40

00011078 <bindtextdomain@plt>:
   11078:	add	ip, pc, #0, 12
   1107c:	add	ip, ip, #90112	; 0x16000
   11080:	ldr	pc, [ip, #56]!	; 0x38

00011084 <fputs@plt>:
   11084:	add	ip, pc, #0, 12
   11088:	add	ip, ip, #90112	; 0x16000
   1108c:	ldr	pc, [ip, #48]!	; 0x30

00011090 <strncmp@plt>:
   11090:	add	ip, pc, #0, 12
   11094:	add	ip, ip, #90112	; 0x16000
   11098:	ldr	pc, [ip, #40]!	; 0x28

0001109c <abort@plt>:
   1109c:	add	ip, pc, #0, 12
   110a0:	add	ip, ip, #90112	; 0x16000
   110a4:	ldr	pc, [ip, #32]!

000110a8 <close@plt>:
   110a8:	add	ip, pc, #0, 12
   110ac:	add	ip, ip, #90112	; 0x16000
   110b0:	ldr	pc, [ip, #24]!

000110b4 <elf_getshdrstrndx@plt>:
   110b4:	add	ip, pc, #0, 12
   110b8:	add	ip, ip, #90112	; 0x16000
   110bc:	ldr	pc, [ip, #16]!

000110c0 <dlsym@plt>:
   110c0:	add	ip, pc, #0, 12
   110c4:	add	ip, ip, #90112	; 0x16000
   110c8:	ldr	pc, [ip, #8]!

000110cc <__snprintf_chk@plt>:
   110cc:	add	ip, pc, #0, 12
   110d0:	add	ip, ip, #90112	; 0x16000
   110d4:	ldr	pc, [ip, #0]!

000110d8 <__mempcpy_chk@plt>:
   110d8:	add	ip, pc, #0, 12
   110dc:	add	ip, ip, #86016	; 0x15000
   110e0:	ldr	pc, [ip, #4088]!	; 0xff8

000110e4 <__assert_fail@plt>:
   110e4:	add	ip, pc, #0, 12
   110e8:	add	ip, ip, #86016	; 0x15000
   110ec:	ldr	pc, [ip, #4080]!	; 0xff0

Disassembly of section .text:

000110f0 <.text>:
   110f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   110f4:	add	fp, sp, #32
   110f8:	sub	sp, sp, #500	; 0x1f4
   110fc:	movw	r4, #28944	; 0x7110
   11100:	movt	r4, #2
   11104:	str	r4, [fp, #-472]	; 0xfffffe28
   11108:	mov	r6, r0
   1110c:	ldr	r5, [fp, #-472]	; 0xfffffe28
   11110:	mov	r4, r1
   11114:	mov	r0, #6
   11118:	movw	r1, #20096	; 0x4e80
   1111c:	movt	r1, #1
   11120:	ldr	r3, [r5]
   11124:	mov	r5, #0
   11128:	str	r3, [fp, #-40]	; 0xffffffd8
   1112c:	bl	11024 <setlocale@plt>
   11130:	movw	r0, #20360	; 0x4f88
   11134:	movw	r1, #20372	; 0x4f94
   11138:	movt	r0, #1
   1113c:	movt	r1, #1
   11140:	bl	11078 <bindtextdomain@plt>
   11144:	movw	r0, #20360	; 0x4f88
   11148:	movt	r0, #1
   1114c:	bl	10f28 <textdomain@plt>
   11150:	mov	r3, r5
   11154:	sub	ip, fp, #400	; 0x190
   11158:	mov	r1, r6
   1115c:	mov	r2, r4
   11160:	str	r5, [sp, #4]
   11164:	movw	r0, #28908	; 0x70ec
   11168:	str	ip, [sp]
   1116c:	movt	r0, #2
   11170:	bl	10ff4 <argp_parse@plt>
   11174:	ldr	r3, [fp, #-400]	; 0xfffffe70
   11178:	add	r3, r3, #2
   1117c:	cmp	r6, r3
   11180:	bne	127c4 <__assert_fail@plt+0x16e0>
   11184:	movw	r6, #28956	; 0x711c
   11188:	movt	r6, #2
   1118c:	mov	r0, #1
   11190:	str	r6, [fp, #-432]	; 0xfffffe50
   11194:	ldrb	r3, [r6]
   11198:	cmp	r3, #0
   1119c:	strbne	r5, [r6, #1]
   111a0:	bl	10eb0 <elf_version@plt>
   111a4:	ldr	r3, [fp, #-400]	; 0xfffffe70
   111a8:	sub	r1, fp, #396	; 0x18c
   111ac:	sub	r2, fp, #392	; 0x188
   111b0:	ldr	r3, [r4, r3, lsl #2]
   111b4:	mov	r0, r3
   111b8:	str	r3, [fp, #-444]	; 0xfffffe44
   111bc:	bl	13150 <__assert_fail@plt+0x206c>
   111c0:	ldr	r3, [fp, #-400]	; 0xfffffe70
   111c4:	sub	r1, fp, #388	; 0x184
   111c8:	sub	r2, fp, #384	; 0x180
   111cc:	add	r3, r3, #1
   111d0:	ldr	r3, [r4, r3, lsl #2]
   111d4:	str	r3, [fp, #-456]	; 0xfffffe38
   111d8:	str	r0, [fp, #-412]	; 0xfffffe64
   111dc:	mov	r0, r3
   111e0:	bl	13150 <__assert_fail@plt+0x206c>
   111e4:	sub	r1, fp, #300	; 0x12c
   111e8:	mov	sl, r0
   111ec:	ldr	r0, [fp, #-412]	; 0xfffffe64
   111f0:	bl	10e80 <gelf_getehdr@plt>
   111f4:	subs	r7, r0, #0
   111f8:	str	r7, [fp, #-460]	; 0xfffffe34
   111fc:	beq	12790 <__assert_fail@plt+0x16ac>
   11200:	sub	r1, fp, #236	; 0xec
   11204:	mov	r0, sl
   11208:	bl	10e80 <gelf_getehdr@plt>
   1120c:	subs	r4, r0, #0
   11210:	movweq	r1, #20424	; 0x4fc8
   11214:	moveq	r2, #5
   11218:	movteq	r1, #1
   1121c:	beq	12768 <__assert_fail@plt+0x1684>
   11220:	ldr	r0, [fp, #-460]	; 0xfffffe34
   11224:	mov	r1, r4
   11228:	mov	r2, #16
   1122c:	bl	10ec8 <memcmp@plt>
   11230:	cmp	r0, #0
   11234:	bne	11e04 <__assert_fail@plt+0xd20>
   11238:	ldr	ip, [fp, #-460]	; 0xfffffe34
   1123c:	ldr	r3, [r4, #16]
   11240:	ldr	r2, [ip, #16]
   11244:	cmp	r2, r3
   11248:	bne	11e04 <__assert_fail@plt+0xd20>
   1124c:	ldr	r6, [fp, #-460]	; 0xfffffe34
   11250:	ldr	r3, [r4, #20]
   11254:	ldr	r2, [r6, #20]
   11258:	cmp	r2, r3
   1125c:	bne	11e04 <__assert_fail@plt+0xd20>
   11260:	ldrd	r0, [r6, #24]
   11264:	ldrd	r2, [r4, #24]
   11268:	cmp	r1, r3
   1126c:	cmpeq	r0, r2
   11270:	bne	11e04 <__assert_fail@plt+0xd20>
   11274:	ldrd	r0, [r6, #32]
   11278:	ldrd	r2, [r4, #32]
   1127c:	cmp	r1, r3
   11280:	cmpeq	r0, r2
   11284:	bne	11e04 <__assert_fail@plt+0xd20>
   11288:	ldr	r2, [r6, #48]	; 0x30
   1128c:	ldr	r3, [r4, #48]	; 0x30
   11290:	cmp	r2, r3
   11294:	bne	11e04 <__assert_fail@plt+0xd20>
   11298:	ldr	r2, [r6, #52]	; 0x34
   1129c:	ldr	r3, [r4, #52]	; 0x34
   112a0:	cmp	r2, r3
   112a4:	bne	11e04 <__assert_fail@plt+0xd20>
   112a8:	ldr	r3, [r4, #56]	; 0x38
   112ac:	ldr	r2, [r6, #56]	; 0x38
   112b0:	cmp	r2, r3
   112b4:	bne	11e04 <__assert_fail@plt+0xd20>
   112b8:	mov	r7, #0
   112bc:	str	r7, [fp, #-436]	; 0xfffffe4c
   112c0:	sub	r1, fp, #380	; 0x17c
   112c4:	ldr	r0, [fp, #-412]	; 0xfffffe64
   112c8:	bl	1106c <elf_getshdrnum@plt>
   112cc:	subs	r4, r0, #0
   112d0:	movwne	r1, #20484	; 0x5004
   112d4:	movne	r0, #0
   112d8:	movtne	r1, #1
   112dc:	bne	128d4 <__assert_fail@plt+0x17f0>
   112e0:	mov	r0, sl
   112e4:	sub	r1, fp, #376	; 0x178
   112e8:	bl	1106c <elf_getshdrnum@plt>
   112ec:	cmp	r0, #0
   112f0:	bne	12758 <__assert_fail@plt+0x1674>
   112f4:	ldr	r2, [fp, #-380]	; 0xfffffe84
   112f8:	ldr	r3, [fp, #-376]	; 0xfffffe88
   112fc:	cmp	r2, r3
   11300:	bne	12870 <__assert_fail@plt+0x178c>
   11304:	ldr	r0, [fp, #-412]	; 0xfffffe64
   11308:	sub	r1, fp, #372	; 0x174
   1130c:	bl	10fdc <elf_getphdrnum@plt>
   11310:	subs	r4, r0, #0
   11314:	bne	128c8 <__assert_fail@plt+0x17e4>
   11318:	sub	r1, fp, #368	; 0x170
   1131c:	mov	r0, sl
   11320:	bl	10fdc <elf_getphdrnum@plt>
   11324:	cmp	r0, #0
   11328:	movwne	r1, #20552	; 0x5048
   1132c:	movne	r0, r4
   11330:	movtne	r1, #1
   11334:	bne	12764 <__assert_fail@plt+0x1680>
   11338:	ldr	r2, [fp, #-372]	; 0xfffffe8c
   1133c:	ldr	r3, [fp, #-368]	; 0xfffffe90
   11340:	cmp	r2, r3
   11344:	bne	12eac <__assert_fail@plt+0x1dc8>
   11348:	sub	r1, fp, #364	; 0x16c
   1134c:	ldr	r0, [fp, #-412]	; 0xfffffe64
   11350:	bl	110b4 <elf_getshdrstrndx@plt>
   11354:	subs	r4, r0, #0
   11358:	movwne	r1, #20632	; 0x5098
   1135c:	movne	r0, #0
   11360:	movtne	r1, #1
   11364:	bne	128d4 <__assert_fail@plt+0x17f0>
   11368:	sub	r1, fp, #360	; 0x168
   1136c:	mov	r0, sl
   11370:	bl	110b4 <elf_getshdrstrndx@plt>
   11374:	cmp	r0, #0
   11378:	movwne	r1, #20632	; 0x5098
   1137c:	movne	r0, r4
   11380:	movtne	r1, #1
   11384:	bne	12764 <__assert_fail@plt+0x1680>
   11388:	ldr	r2, [fp, #-364]	; 0xfffffe94
   1138c:	ldr	r3, [fp, #-360]	; 0xfffffe98
   11390:	cmp	r2, r3
   11394:	beq	113c0 <__assert_fail@plt+0x2dc>
   11398:	ldr	r5, [fp, #-432]	; 0xfffffe50
   1139c:	ldrb	r4, [r5]
   113a0:	cmp	r4, #0
   113a4:	beq	11f3c <__assert_fail@plt+0xe58>
   113a8:	ldr	r7, [fp, #-432]	; 0xfffffe50
   113ac:	ldrb	r3, [r7, #1]
   113b0:	cmp	r3, #0
   113b4:	movne	r4, #1
   113b8:	strne	r4, [fp, #-436]	; 0xfffffe4c
   113bc:	beq	11e2c <__assert_fail@plt+0xd48>
   113c0:	mov	r5, #0
   113c4:	movw	ip, #28956	; 0x711c
   113c8:	mov	r8, r5
   113cc:	mov	r9, r5
   113d0:	movt	ip, #2
   113d4:	str	r5, [fp, #-476]	; 0xfffffe24
   113d8:	str	r5, [fp, #-480]	; 0xfffffe20
   113dc:	str	ip, [fp, #-484]	; 0xfffffe1c
   113e0:	str	sl, [fp, #-420]	; 0xfffffe5c
   113e4:	mov	sl, #0
   113e8:	ldr	r5, [fp, #-412]	; 0xfffffe64
   113ec:	mov	r4, sl
   113f0:	b	11414 <__assert_fail@plt+0x330>
   113f4:	ldr	r0, [fp, #-392]	; 0xfffffe78
   113f8:	mov	r1, r7
   113fc:	str	r4, [sp]
   11400:	mov	r2, sl
   11404:	mov	r3, #1
   11408:	bl	13f30 <__assert_fail@plt+0x2e4c>
   1140c:	cmp	r0, #0
   11410:	beq	11450 <__assert_fail@plt+0x36c>
   11414:	mov	r1, r8
   11418:	mov	r0, r5
   1141c:	bl	11030 <elf_nextscn@plt>
   11420:	sub	r1, fp, #172	; 0xac
   11424:	mov	r8, r0
   11428:	bl	10e98 <gelf_getshdr@plt>
   1142c:	subs	r7, r0, #0
   11430:	beq	11448 <__assert_fail@plt+0x364>
   11434:	mov	r0, r5
   11438:	ldr	r1, [fp, #-364]	; 0xfffffe94
   1143c:	ldr	r2, [r7]
   11440:	bl	10f1c <elf_strptr@plt>
   11444:	mov	sl, r0
   11448:	cmp	r8, #0
   1144c:	bne	113f4 <__assert_fail@plt+0x310>
   11450:	mov	r4, #0
   11454:	str	sl, [fp, #-408]	; 0xfffffe68
   11458:	mov	r6, r4
   1145c:	ldr	sl, [fp, #-420]	; 0xfffffe5c
   11460:	b	11484 <__assert_fail@plt+0x3a0>
   11464:	ldr	r0, [fp, #-384]	; 0xfffffe80
   11468:	mov	r1, r5
   1146c:	str	r6, [sp]
   11470:	mov	r2, r4
   11474:	mov	r3, #1
   11478:	bl	13f30 <__assert_fail@plt+0x2e4c>
   1147c:	cmp	r0, #0
   11480:	beq	1160c <__assert_fail@plt+0x528>
   11484:	mov	r1, r9
   11488:	mov	r0, sl
   1148c:	bl	11030 <elf_nextscn@plt>
   11490:	sub	r1, fp, #108	; 0x6c
   11494:	mov	r9, r0
   11498:	bl	10e98 <gelf_getshdr@plt>
   1149c:	subs	r5, r0, #0
   114a0:	beq	114b8 <__assert_fail@plt+0x3d4>
   114a4:	mov	r0, sl
   114a8:	ldr	r1, [fp, #-360]	; 0xfffffe98
   114ac:	ldr	r2, [r5]
   114b0:	bl	10f1c <elf_strptr@plt>
   114b4:	mov	r4, r0
   114b8:	cmp	r9, #0
   114bc:	bne	11464 <__assert_fail@plt+0x380>
   114c0:	mov	r6, r8
   114c4:	mov	r7, r9
   114c8:	cmp	r7, r6
   114cc:	bne	12e08 <__assert_fail@plt+0x1d24>
   114d0:	ldr	r5, [fp, #-432]	; 0xfffffe50
   114d4:	ldr	r3, [r5, #4]
   114d8:	cmp	r3, #0
   114dc:	beq	121b0 <__assert_fail@plt+0x10cc>
   114e0:	ldr	r7, [fp, #-460]	; 0xfffffe34
   114e4:	movw	r0, #65224	; 0xfec8
   114e8:	ldr	r6, [fp, #-476]	; 0xfffffe24
   114ec:	movt	r0, #65535	; 0xffff
   114f0:	ldr	ip, [fp, #-372]	; 0xfffffe8c
   114f4:	mov	r2, #0
   114f8:	ldrh	r1, [r7, #54]	; 0x36
   114fc:	add	r6, r6, #2
   11500:	str	r6, [fp, #-476]	; 0xfffffe24
   11504:	mov	r3, #0
   11508:	ldr	r4, [fp, #-476]	; 0xfffffe24
   1150c:	mov	r6, #24
   11510:	mul	r1, ip, r1
   11514:	sub	ip, fp, #36	; 0x24
   11518:	sub	r5, fp, #36	; 0x24
   1151c:	movw	lr, #65248	; 0xfee0
   11520:	strd	r2, [ip, r0]
   11524:	movw	ip, #65232	; 0xfed0
   11528:	ldrh	r2, [r7, #52]	; 0x34
   1152c:	movt	ip, #65535	; 0xffff
   11530:	mul	r0, r6, r4
   11534:	mov	r3, #0
   11538:	strd	r2, [r5, ip]
   1153c:	movt	lr, #65535	; 0xffff
   11540:	ldrd	r2, [r7, #32]
   11544:	movw	ip, #65256	; 0xfee8
   11548:	ldr	r7, [fp, #-480]	; 0xfffffe20
   1154c:	add	r0, r0, #8
   11550:	movt	ip, #65535	; 0xffff
   11554:	sub	sp, sp, r0
   11558:	strd	r2, [r5, lr]
   1155c:	adds	r2, r2, r1
   11560:	ldr	r0, [fp, #-412]	; 0xfffffe64
   11564:	sub	r1, fp, #356	; 0x164
   11568:	adc	r3, r3, #0
   1156c:	str	r7, [fp, #-308]	; 0xfffffecc
   11570:	strd	r2, [r5, ip]
   11574:	mov	r4, #0
   11578:	sub	r3, fp, #324	; 0x144
   1157c:	str	r4, [fp, #-356]	; 0xfffffe9c
   11580:	str	r3, [fp, #-332]	; 0xfffffeb4
   11584:	add	r5, sp, #16
   11588:	str	r4, [fp, #-352]	; 0xfffffea0
   1158c:	str	r5, [fp, #-440]	; 0xfffffe48
   11590:	bl	11000 <elf_rawfile@plt>
   11594:	subs	r7, r0, #0
   11598:	str	r7, [fp, #-408]	; 0xfffffe68
   1159c:	beq	126a8 <__assert_fail@plt+0x15c4>
   115a0:	mov	r0, sl
   115a4:	sub	r1, fp, #352	; 0x160
   115a8:	bl	11000 <elf_rawfile@plt>
   115ac:	subs	ip, r0, #0
   115b0:	str	ip, [fp, #-452]	; 0xfffffe3c
   115b4:	beq	12dd4 <__assert_fail@plt+0x1cf0>
   115b8:	sub	r5, fp, #348	; 0x15c
   115bc:	ldr	r7, [fp, #-476]	; 0xfffffe24
   115c0:	ldr	r8, [fp, #-440]	; 0xfffffe48
   115c4:	b	115e8 <__assert_fail@plt+0x504>
   115c8:	mov	lr, r5
   115cc:	mla	ip, r6, r4, r8
   115d0:	add	r4, r4, #1
   115d4:	ldm	lr!, {r0, r1, r2, r3}
   115d8:	stmia	ip!, {r0, r1, r2, r3}
   115dc:	ldm	lr, {r0, r1}
   115e0:	stm	ip, {r0, r1}
   115e4:	ldr	r5, [r5, #16]
   115e8:	cmp	r4, r7
   115ec:	bcc	115c8 <__assert_fail@plt+0x4e4>
   115f0:	movw	r3, #12520	; 0x30e8
   115f4:	ldr	r0, [fp, #-440]	; 0xfffffe48
   115f8:	movt	r3, #1
   115fc:	ldr	r1, [fp, #-476]	; 0xfffffe24
   11600:	mov	r2, #24
   11604:	bl	11048 <qsort@plt>
   11608:	b	121dc <__assert_fail@plt+0x10f8>
   1160c:	cmp	r8, #0
   11610:	ldr	sl, [fp, #-408]	; 0xfffffe68
   11614:	mov	ip, r0
   11618:	beq	12dc4 <__assert_fail@plt+0x1ce0>
   1161c:	ldr	r6, [fp, #-432]	; 0xfffffe50
   11620:	ldr	r3, [r6, #4]
   11624:	cmp	r3, #0
   11628:	beq	11648 <__assert_fail@plt+0x564>
   1162c:	ldrd	r2, [r7, #8]
   11630:	mov	r0, #2
   11634:	mov	r1, #0
   11638:	and	r2, r2, r0
   1163c:	and	r3, r3, r1
   11640:	orrs	lr, r2, r3
   11644:	bne	11860 <__assert_fail@plt+0x77c>
   11648:	cmp	sl, #0
   1164c:	cmpne	r4, #0
   11650:	beq	124d8 <__assert_fail@plt+0x13f4>
   11654:	mov	r0, sl
   11658:	mov	r1, r4
   1165c:	str	ip, [fp, #-512]	; 0xfffffe00
   11660:	bl	10ea4 <strcmp@plt>
   11664:	ldr	ip, [fp, #-512]	; 0xfffffe00
   11668:	cmp	r0, #0
   1166c:	bne	124d8 <__assert_fail@plt+0x13f4>
   11670:	movw	r1, #20740	; 0x5104
   11674:	mov	r0, sl
   11678:	movt	r1, #1
   1167c:	str	ip, [fp, #-512]	; 0xfffffe00
   11680:	bl	10ea4 <strcmp@plt>
   11684:	cmp	r0, #0
   11688:	beq	113e4 <__assert_fail@plt+0x300>
   1168c:	movw	r1, #20756	; 0x5114
   11690:	mov	r0, sl
   11694:	movt	r1, #1
   11698:	bl	10ea4 <strcmp@plt>
   1169c:	ldr	ip, [fp, #-512]	; 0xfffffe00
   116a0:	cmp	r0, #0
   116a4:	beq	113e4 <__assert_fail@plt+0x300>
   116a8:	ldr	r2, [r7, #4]
   116ac:	ldr	r3, [r5, #4]
   116b0:	cmp	r2, r3
   116b4:	bne	116d4 <__assert_fail@plt+0x5f0>
   116b8:	ldrd	r0, [r7, #8]
   116bc:	sub	r2, fp, #512	; 0x200
   116c0:	strd	r0, [r2, #84]	; 0x54
   116c4:	ldrd	r2, [r5, #8]
   116c8:	cmp	r1, r3
   116cc:	cmpeq	r0, r2
   116d0:	beq	11e84 <__assert_fail@plt+0xda0>
   116d4:	mov	r2, #5
   116d8:	movw	r1, #20776	; 0x5128
   116dc:	mov	r0, #0
   116e0:	movt	r1, #1
   116e4:	str	ip, [fp, #-512]	; 0xfffffe00
   116e8:	bl	10ed4 <dcgettext@plt>
   116ec:	mov	r6, r0
   116f0:	mov	r0, r8
   116f4:	bl	11054 <elf_ndxscn@plt>
   116f8:	mov	r2, r6
   116fc:	ldr	r6, [fp, #-456]	; 0xfffffe38
   11700:	str	r6, [sp]
   11704:	ldr	r3, [fp, #-444]	; 0xfffffe44
   11708:	stmib	sp, {r0, sl}
   1170c:	mov	r0, #0
   11710:	mov	r1, r0
   11714:	bl	10f64 <error@plt>
   11718:	ldr	r6, [fp, #-432]	; 0xfffffe50
   1171c:	ldr	ip, [fp, #-512]	; 0xfffffe00
   11720:	ldrb	r3, [r6, #1]
   11724:	cmp	r3, #0
   11728:	beq	11c50 <__assert_fail@plt+0xb6c>
   1172c:	mov	r6, #1
   11730:	str	r6, [fp, #-436]	; 0xfffffe4c
   11734:	mov	r0, r8
   11738:	mov	r1, #0
   1173c:	str	ip, [fp, #-512]	; 0xfffffe00
   11740:	bl	10f58 <elf_getdata@plt>
   11744:	ldr	ip, [fp, #-512]	; 0xfffffe00
   11748:	subs	r6, r0, #0
   1174c:	str	r6, [fp, #-440]	; 0xfffffe48
   11750:	beq	12e64 <__assert_fail@plt+0x1d80>
   11754:	mov	r0, r9
   11758:	mov	r1, #0
   1175c:	str	ip, [fp, #-512]	; 0xfffffe00
   11760:	bl	10f58 <elf_getdata@plt>
   11764:	ldr	ip, [fp, #-512]	; 0xfffffe00
   11768:	subs	r6, r0, #0
   1176c:	str	r6, [fp, #-428]	; 0xfffffe54
   11770:	beq	12f04 <__assert_fail@plt+0x1e20>
   11774:	ldr	r6, [r7, #4]
   11778:	cmp	r6, #7
   1177c:	beq	119f8 <__assert_fail@plt+0x914>
   11780:	cmp	r6, #11
   11784:	beq	1189c <__assert_fail@plt+0x7b8>
   11788:	cmp	r6, #2
   1178c:	beq	1189c <__assert_fail@plt+0x7b8>
   11790:	cmp	r6, #8
   11794:	ldreq	r3, [fp, #-440]	; 0xfffffe48
   11798:	ldreq	r3, [r3, #12]
   1179c:	streq	r3, [fp, #-408]	; 0xfffffe68
   117a0:	beq	117bc <__assert_fail@plt+0x6d8>
   117a4:	ldr	r4, [fp, #-440]	; 0xfffffe48
   117a8:	ldr	r3, [r4]
   117ac:	cmp	r3, #0
   117b0:	beq	1217c <__assert_fail@plt+0x1098>
   117b4:	ldr	r3, [r4, #12]
   117b8:	str	r3, [fp, #-408]	; 0xfffffe68
   117bc:	ldr	r3, [r5, #4]
   117c0:	cmp	r3, #8
   117c4:	beq	117d8 <__assert_fail@plt+0x6f4>
   117c8:	ldr	r5, [fp, #-428]	; 0xfffffe54
   117cc:	ldr	r3, [r5]
   117d0:	cmp	r3, #0
   117d4:	beq	1201c <__assert_fail@plt+0xf38>
   117d8:	ldr	r5, [fp, #-428]	; 0xfffffe54
   117dc:	ldr	r3, [fp, #-408]	; 0xfffffe68
   117e0:	ldr	r4, [r5, #12]
   117e4:	cmp	r3, r4
   117e8:	bne	11824 <__assert_fail@plt+0x740>
   117ec:	cmp	r6, #8
   117f0:	beq	113e4 <__assert_fail@plt+0x300>
   117f4:	cmp	r3, #0
   117f8:	beq	113e4 <__assert_fail@plt+0x300>
   117fc:	ldr	r5, [fp, #-440]	; 0xfffffe48
   11800:	ldr	r2, [fp, #-408]	; 0xfffffe68
   11804:	ldr	r0, [r5]
   11808:	ldr	r5, [fp, #-428]	; 0xfffffe54
   1180c:	ldr	r1, [r5]
   11810:	str	ip, [fp, #-512]	; 0xfffffe00
   11814:	bl	10ec8 <memcmp@plt>
   11818:	ldr	ip, [fp, #-512]	; 0xfffffe00
   1181c:	cmp	r0, #0
   11820:	beq	113e4 <__assert_fail@plt+0x300>
   11824:	ldr	r5, [fp, #-432]	; 0xfffffe50
   11828:	ldrb	r3, [r5, #8]
   1182c:	cmp	r3, #0
   11830:	bne	11f6c <__assert_fail@plt+0xe88>
   11834:	ldr	r5, [fp, #-432]	; 0xfffffe50
   11838:	ldrb	r4, [r5]
   1183c:	cmp	r4, #0
   11840:	beq	12108 <__assert_fail@plt+0x1024>
   11844:	ldr	ip, [fp, #-432]	; 0xfffffe50
   11848:	ldrb	r3, [ip, #1]
   1184c:	cmp	r3, #0
   11850:	beq	11c50 <__assert_fail@plt+0xb6c>
   11854:	mov	r4, #1
   11858:	str	r4, [fp, #-436]	; 0xfffffe4c
   1185c:	b	113e4 <__assert_fail@plt+0x300>
   11860:	ldr	r6, [fp, #-476]	; 0xfffffe24
   11864:	sub	sp, sp, #32
   11868:	ldrd	r2, [r7, #24]
   1186c:	add	lr, sp, #16
   11870:	ldrd	r0, [r7, #32]
   11874:	add	r6, r6, #1
   11878:	str	r6, [fp, #-476]	; 0xfffffe24
   1187c:	ldr	r6, [fp, #-480]	; 0xfffffe20
   11880:	strd	r2, [sp, #16]
   11884:	adds	r2, r2, r0
   11888:	adc	r3, r3, r1
   1188c:	str	lr, [fp, #-480]	; 0xfffffe20
   11890:	str	r6, [sp, #32]
   11894:	strd	r2, [sp, #24]
   11898:	b	11648 <__assert_fail@plt+0x564>
   1189c:	ldrd	r2, [r7, #56]	; 0x38
   118a0:	orrs	ip, r2, r3
   118a4:	beq	12638 <__assert_fail@plt+0x1554>
   118a8:	ldrd	r0, [r7, #32]
   118ac:	bl	14158 <__assert_fail@plt+0x3074>
   118b0:	cmp	r0, #0
   118b4:	strgt	r9, [fp, #-452]	; 0xfffffe3c
   118b8:	strgt	r8, [fp, #-408]	; 0xfffffe68
   118bc:	movgt	sl, #0
   118c0:	ldrgt	r9, [fp, #-440]	; 0xfffffe48
   118c4:	ble	113e4 <__assert_fail@plt+0x300>
   118c8:	mov	r0, r9
   118cc:	mov	r1, sl
   118d0:	sub	r2, fp, #348	; 0x15c
   118d4:	bl	10f10 <gelf_getsym@plt>
   118d8:	subs	r6, r0, #0
   118dc:	beq	12594 <__assert_fail@plt+0x14b0>
   118e0:	ldr	r0, [fp, #-428]	; 0xfffffe54
   118e4:	mov	r1, sl
   118e8:	sub	r2, fp, #324	; 0x144
   118ec:	bl	10f10 <gelf_getsym@plt>
   118f0:	subs	r4, r0, #0
   118f4:	beq	1255c <__assert_fail@plt+0x1478>
   118f8:	ldr	r1, [r7, #40]	; 0x28
   118fc:	ldr	r2, [r6]
   11900:	ldr	r0, [fp, #-412]	; 0xfffffe64
   11904:	bl	10f1c <elf_strptr@plt>
   11908:	ldr	r1, [r5, #40]	; 0x28
   1190c:	ldr	r2, [r4]
   11910:	mov	r8, r0
   11914:	ldr	r0, [fp, #-420]	; 0xfffffe5c
   11918:	bl	10f1c <elf_strptr@plt>
   1191c:	cmp	r8, #0
   11920:	cmpne	r0, #0
   11924:	mov	r1, r0
   11928:	beq	12080 <__assert_fail@plt+0xf9c>
   1192c:	mov	r0, r8
   11930:	bl	10ea4 <strcmp@plt>
   11934:	cmp	r0, #0
   11938:	bne	12080 <__assert_fail@plt+0xf9c>
   1193c:	ldrd	r2, [r6, #8]
   11940:	ldrd	r0, [r4, #8]
   11944:	cmp	r3, r1
   11948:	cmpeq	r2, r0
   1194c:	bne	12080 <__assert_fail@plt+0xf9c>
   11950:	ldrd	r2, [r6, #16]
   11954:	ldrd	r0, [r4, #16]
   11958:	cmp	r3, r1
   1195c:	cmpeq	r2, r0
   11960:	bne	12074 <__assert_fail@plt+0xf90>
   11964:	ldr	ip, [r4, #4]
   11968:	ldr	lr, [r6, #4]
   1196c:	cmp	lr, ip
   11970:	bne	12080 <__assert_fail@plt+0xf9c>
   11974:	ldrh	ip, [r6, #6]
   11978:	cmp	ip, #0
   1197c:	bne	119d4 <__assert_fail@plt+0x8f0>
   11980:	cmp	r3, r1
   11984:	cmpeq	r2, r0
   11988:	beq	119d4 <__assert_fail@plt+0x8f0>
   1198c:	ldr	r0, [fp, #-408]	; 0xfffffe68
   11990:	ldr	r4, [fp, #-392]	; 0xfffffe78
   11994:	bl	11054 <elf_ndxscn@plt>
   11998:	mov	r2, sl
   1199c:	mov	r1, r0
   119a0:	mov	r0, r4
   119a4:	bl	13234 <__assert_fail@plt+0x2150>
   119a8:	cmp	r0, #0
   119ac:	bne	12080 <__assert_fail@plt+0xf9c>
   119b0:	ldr	r0, [fp, #-452]	; 0xfffffe3c
   119b4:	ldr	r4, [fp, #-384]	; 0xfffffe80
   119b8:	bl	11054 <elf_ndxscn@plt>
   119bc:	mov	r2, sl
   119c0:	mov	r1, r0
   119c4:	mov	r0, r4
   119c8:	bl	13234 <__assert_fail@plt+0x2150>
   119cc:	cmp	r0, #0
   119d0:	bne	12080 <__assert_fail@plt+0xf9c>
   119d4:	ldrd	r0, [r7, #32]
   119d8:	add	sl, sl, #1
   119dc:	ldrd	r2, [r7, #56]	; 0x38
   119e0:	bl	14158 <__assert_fail@plt+0x3074>
   119e4:	cmp	sl, r0
   119e8:	blt	118c8 <__assert_fail@plt+0x7e4>
   119ec:	ldr	r8, [fp, #-408]	; 0xfffffe68
   119f0:	ldr	r9, [fp, #-452]	; 0xfffffe3c
   119f4:	b	113e4 <__assert_fail@plt+0x300>
   119f8:	str	r9, [fp, #-488]	; 0xfffffe18
   119fc:	mov	r5, #0
   11a00:	str	sl, [fp, #-468]	; 0xfffffe2c
   11a04:	mov	r7, r5
   11a08:	str	r4, [fp, #-492]	; 0xfffffe14
   11a0c:	ldr	sl, [fp, #-436]	; 0xfffffe4c
   11a10:	ldr	r9, [fp, #-440]	; 0xfffffe48
   11a14:	ldr	r6, [fp, #-428]	; 0xfffffe54
   11a18:	ldr	r4, [fp, #-432]	; 0xfffffe50
   11a1c:	str	r8, [fp, #-464]	; 0xfffffe30
   11a20:	ldr	r3, [r9, #12]
   11a24:	cmp	r7, r3
   11a28:	bcs	11b88 <__assert_fail@plt+0xaa4>
   11a2c:	mov	r1, r7
   11a30:	sub	r8, fp, #352	; 0x160
   11a34:	mov	r0, r9
   11a38:	sub	r3, fp, #356	; 0x164
   11a3c:	str	r8, [sp]
   11a40:	sub	r2, fp, #348	; 0x15c
   11a44:	bl	10ee0 <gelf_getnote@plt>
   11a48:	subs	r7, r0, #0
   11a4c:	beq	11b88 <__assert_fail@plt+0xaa4>
   11a50:	ldr	r3, [fp, #-348]	; 0xfffffea4
   11a54:	ldr	ip, [r9]
   11a58:	cmp	r3, #0
   11a5c:	ldrne	r3, [fp, #-356]	; 0xfffffe9c
   11a60:	str	ip, [fp, #-436]	; 0xfffffe4c
   11a64:	movweq	ip, #20096	; 0x4e80
   11a68:	addne	r3, ip, r3
   11a6c:	movteq	ip, #1
   11a70:	strne	r3, [fp, #-408]	; 0xfffffe68
   11a74:	ldr	r3, [r6, #12]
   11a78:	streq	ip, [fp, #-408]	; 0xfffffe68
   11a7c:	ldr	ip, [fp, #-352]	; 0xfffffea0
   11a80:	cmp	r5, r3
   11a84:	str	ip, [fp, #-440]	; 0xfffffe48
   11a88:	bcc	11aa8 <__assert_fail@plt+0x9c4>
   11a8c:	ldrb	sl, [r4]
   11a90:	cmp	sl, #0
   11a94:	beq	11d5c <__assert_fail@plt+0xc78>
   11a98:	ldrb	r3, [r4, #1]
   11a9c:	cmp	r3, #0
   11aa0:	beq	11c50 <__assert_fail@plt+0xb6c>
   11aa4:	mov	sl, #1
   11aa8:	mov	r1, r5
   11aac:	str	r8, [sp]
   11ab0:	sub	r3, fp, #356	; 0x164
   11ab4:	mov	r0, r6
   11ab8:	sub	r2, fp, #324	; 0x144
   11abc:	bl	10ee0 <gelf_getnote@plt>
   11ac0:	subs	r5, r0, #0
   11ac4:	beq	12f4c <__assert_fail@plt+0x1e68>
   11ac8:	ldr	r2, [fp, #-324]	; 0xfffffebc
   11acc:	ldr	r3, [fp, #-348]	; 0xfffffea4
   11ad0:	cmp	r2, #0
   11ad4:	ldr	lr, [fp, #-352]	; 0xfffffea0
   11ad8:	ldrne	ip, [r6]
   11adc:	movweq	r1, #20096	; 0x4e80
   11ae0:	ldrne	r1, [fp, #-356]	; 0xfffffe9c
   11ae4:	movteq	r1, #1
   11ae8:	ldreq	ip, [r6]
   11aec:	addne	r1, ip, r1
   11af0:	cmp	r2, r3
   11af4:	str	lr, [fp, #-452]	; 0xfffffe3c
   11af8:	beq	11bd4 <__assert_fail@plt+0xaf0>
   11afc:	ldrb	r8, [r4]
   11b00:	cmp	r8, #0
   11b04:	beq	11bf8 <__assert_fail@plt+0xb14>
   11b08:	ldrb	r3, [r4, #1]
   11b0c:	cmp	r3, #0
   11b10:	beq	11c50 <__assert_fail@plt+0xb6c>
   11b14:	mov	sl, #1
   11b18:	ldr	r2, [fp, #-340]	; 0xfffffeac
   11b1c:	ldr	r3, [fp, #-316]	; 0xfffffec4
   11b20:	cmp	r2, r3
   11b24:	beq	11b44 <__assert_fail@plt+0xa60>
   11b28:	ldrb	r8, [r4]
   11b2c:	cmp	r8, #0
   11b30:	beq	11da8 <__assert_fail@plt+0xcc4>
   11b34:	ldrb	r3, [r4, #1]
   11b38:	cmp	r3, #0
   11b3c:	beq	11c50 <__assert_fail@plt+0xb6c>
   11b40:	mov	sl, #1
   11b44:	ldr	r8, [fp, #-344]	; 0xfffffea8
   11b48:	ldr	r3, [fp, #-320]	; 0xfffffec0
   11b4c:	cmp	r8, r3
   11b50:	beq	11c60 <__assert_fail@plt+0xb7c>
   11b54:	ldr	r2, [fp, #-340]	; 0xfffffeac
   11b58:	cmp	r2, #3
   11b5c:	beq	11c98 <__assert_fail@plt+0xbb4>
   11b60:	ldrb	r8, [r4]
   11b64:	cmp	r8, #0
   11b68:	beq	11d08 <__assert_fail@plt+0xc24>
   11b6c:	ldrb	r3, [r4, #1]
   11b70:	cmp	r3, #0
   11b74:	beq	11c50 <__assert_fail@plt+0xb6c>
   11b78:	ldr	r3, [r9, #12]
   11b7c:	mov	sl, #1
   11b80:	cmp	r7, r3
   11b84:	bcc	11a2c <__assert_fail@plt+0x948>
   11b88:	ldr	r4, [fp, #-428]	; 0xfffffe54
   11b8c:	str	sl, [fp, #-436]	; 0xfffffe4c
   11b90:	ldr	r8, [fp, #-464]	; 0xfffffe30
   11b94:	ldr	r3, [r4, #12]
   11b98:	ldr	r9, [fp, #-488]	; 0xfffffe18
   11b9c:	cmp	r3, r5
   11ba0:	ldr	sl, [fp, #-468]	; 0xfffffe2c
   11ba4:	bls	113e4 <__assert_fail@plt+0x300>
   11ba8:	ldr	r5, [fp, #-432]	; 0xfffffe50
   11bac:	ldrb	r4, [r5]
   11bb0:	cmp	r4, #0
   11bb4:	beq	12404 <__assert_fail@plt+0x1320>
   11bb8:	ldr	r7, [fp, #-432]	; 0xfffffe50
   11bbc:	ldrb	r3, [r7, #1]
   11bc0:	cmp	r3, #0
   11bc4:	beq	11c50 <__assert_fail@plt+0xb6c>
   11bc8:	mov	ip, #1
   11bcc:	str	ip, [fp, #-436]	; 0xfffffe4c
   11bd0:	b	113e4 <__assert_fail@plt+0x300>
   11bd4:	ldr	r0, [fp, #-408]	; 0xfffffe68
   11bd8:	str	ip, [fp, #-512]	; 0xfffffe00
   11bdc:	bl	10ec8 <memcmp@plt>
   11be0:	ldr	ip, [fp, #-512]	; 0xfffffe00
   11be4:	cmp	r0, #0
   11be8:	beq	11b18 <__assert_fail@plt+0xa34>
   11bec:	ldrb	r8, [r4]
   11bf0:	cmp	r8, #0
   11bf4:	bne	11b08 <__assert_fail@plt+0xa24>
   11bf8:	mov	r2, #5
   11bfc:	movw	r1, #21120	; 0x5280
   11c00:	mov	r0, r8
   11c04:	movt	r1, #1
   11c08:	str	ip, [fp, #-512]	; 0xfffffe00
   11c0c:	bl	10ed4 <dcgettext@plt>
   11c10:	mov	sl, r0
   11c14:	ldr	r0, [fp, #-464]	; 0xfffffe30
   11c18:	bl	11054 <elf_ndxscn@plt>
   11c1c:	ldr	r1, [fp, #-456]	; 0xfffffe38
   11c20:	mov	r2, sl
   11c24:	str	r1, [sp]
   11c28:	mov	r1, r8
   11c2c:	ldr	lr, [fp, #-468]	; 0xfffffe2c
   11c30:	ldr	r3, [fp, #-444]	; 0xfffffe44
   11c34:	stmib	sp, {r0, lr}
   11c38:	mov	r0, r8
   11c3c:	bl	10f64 <error@plt>
   11c40:	ldrb	r3, [r4, #1]
   11c44:	ldr	ip, [fp, #-512]	; 0xfffffe00
   11c48:	cmp	r3, #0
   11c4c:	bne	11b14 <__assert_fail@plt+0xa30>
   11c50:	mov	r5, #1
   11c54:	ldr	sl, [fp, #-420]	; 0xfffffe5c
   11c58:	str	r5, [fp, #-436]	; 0xfffffe4c
   11c5c:	b	11e34 <__assert_fail@plt+0xd50>
   11c60:	ldr	r2, [fp, #-436]	; 0xfffffe4c
   11c64:	ldr	lr, [fp, #-440]	; 0xfffffe48
   11c68:	str	r3, [fp, #-508]	; 0xfffffe04
   11c6c:	add	r0, r2, lr
   11c70:	ldr	r2, [fp, #-452]	; 0xfffffe3c
   11c74:	add	r1, ip, r2
   11c78:	mov	r2, r8
   11c7c:	bl	10ec8 <memcmp@plt>
   11c80:	ldr	r3, [fp, #-508]	; 0xfffffe04
   11c84:	cmp	r0, #0
   11c88:	beq	11a20 <__assert_fail@plt+0x93c>
   11c8c:	ldr	r2, [fp, #-340]	; 0xfffffeac
   11c90:	cmp	r2, #3
   11c94:	bne	11b60 <__assert_fail@plt+0xa7c>
   11c98:	ldr	r2, [fp, #-348]	; 0xfffffea4
   11c9c:	cmp	r2, #4
   11ca0:	bne	11b60 <__assert_fail@plt+0xa7c>
   11ca4:	movw	r1, #21212	; 0x52dc
   11ca8:	ldr	r0, [fp, #-408]	; 0xfffffe68
   11cac:	movt	r1, #1
   11cb0:	str	r3, [fp, #-508]	; 0xfffffe04
   11cb4:	bl	10ec8 <memcmp@plt>
   11cb8:	ldr	r3, [fp, #-508]	; 0xfffffe04
   11cbc:	cmp	r0, #0
   11cc0:	bne	11b60 <__assert_fail@plt+0xa7c>
   11cc4:	cmp	r8, r3
   11cc8:	beq	12048 <__assert_fail@plt+0xf64>
   11ccc:	ldrb	r8, [r4]
   11cd0:	cmp	r8, #0
   11cd4:	bne	11b6c <__assert_fail@plt+0xa88>
   11cd8:	movw	r1, #21216	; 0x52e0
   11cdc:	movt	r1, #1
   11ce0:	mov	r2, #5
   11ce4:	bl	10ed4 <dcgettext@plt>
   11ce8:	ldr	ip, [fp, #-456]	; 0xfffffe38
   11cec:	mov	r1, r8
   11cf0:	str	ip, [sp]
   11cf4:	ldr	r3, [fp, #-444]	; 0xfffffe44
   11cf8:	mov	r2, r0
   11cfc:	mov	r0, r8
   11d00:	bl	10f64 <error@plt>
   11d04:	b	11b6c <__assert_fail@plt+0xa88>
   11d08:	mov	r2, #5
   11d0c:	mov	r0, r8
   11d10:	movw	r1, #21280	; 0x5320
   11d14:	movt	r1, #1
   11d18:	bl	10ed4 <dcgettext@plt>
   11d1c:	mov	sl, r0
   11d20:	ldr	r0, [fp, #-464]	; 0xfffffe30
   11d24:	bl	11054 <elf_ndxscn@plt>
   11d28:	ldr	ip, [fp, #-456]	; 0xfffffe38
   11d2c:	mov	r2, sl
   11d30:	mov	r1, r8
   11d34:	str	ip, [sp]
   11d38:	ldr	ip, [fp, #-468]	; 0xfffffe2c
   11d3c:	ldr	r3, [fp, #-444]	; 0xfffffe44
   11d40:	str	ip, [sp, #8]
   11d44:	ldr	ip, [fp, #-408]	; 0xfffffe68
   11d48:	str	ip, [sp, #12]
   11d4c:	str	r0, [sp, #4]
   11d50:	mov	r0, r8
   11d54:	bl	10f64 <error@plt>
   11d58:	b	11b6c <__assert_fail@plt+0xa88>
   11d5c:	mov	r0, sl
   11d60:	mov	r2, #5
   11d64:	movw	r1, #21020	; 0x521c
   11d68:	movt	r1, #1
   11d6c:	bl	10ed4 <dcgettext@plt>
   11d70:	mov	r2, r0
   11d74:	ldr	r0, [fp, #-464]	; 0xfffffe30
   11d78:	str	r2, [fp, #-508]	; 0xfffffe04
   11d7c:	bl	11054 <elf_ndxscn@plt>
   11d80:	ldr	ip, [fp, #-456]	; 0xfffffe38
   11d84:	mov	r1, sl
   11d88:	ldr	r2, [fp, #-508]	; 0xfffffe04
   11d8c:	str	ip, [sp]
   11d90:	ldr	ip, [fp, #-468]	; 0xfffffe2c
   11d94:	ldr	r3, [fp, #-444]	; 0xfffffe44
   11d98:	stmib	sp, {r0, ip}
   11d9c:	mov	r0, sl
   11da0:	bl	10f64 <error@plt>
   11da4:	b	11a98 <__assert_fail@plt+0x9b4>
   11da8:	mov	r2, #5
   11dac:	movw	r1, #21164	; 0x52ac
   11db0:	mov	r0, r8
   11db4:	movt	r1, #1
   11db8:	str	ip, [fp, #-512]	; 0xfffffe00
   11dbc:	bl	10ed4 <dcgettext@plt>
   11dc0:	mov	sl, r0
   11dc4:	ldr	r0, [fp, #-464]	; 0xfffffe30
   11dc8:	bl	11054 <elf_ndxscn@plt>
   11dcc:	ldr	r1, [fp, #-456]	; 0xfffffe38
   11dd0:	mov	r2, sl
   11dd4:	str	r1, [sp]
   11dd8:	ldr	lr, [fp, #-468]	; 0xfffffe2c
   11ddc:	ldr	r3, [fp, #-444]	; 0xfffffe44
   11de0:	str	lr, [sp, #8]
   11de4:	ldr	r1, [fp, #-408]	; 0xfffffe68
   11de8:	str	r1, [sp, #12]
   11dec:	mov	r1, r8
   11df0:	str	r0, [sp, #4]
   11df4:	mov	r0, r8
   11df8:	bl	10f64 <error@plt>
   11dfc:	ldr	ip, [fp, #-512]	; 0xfffffe00
   11e00:	b	11b34 <__assert_fail@plt+0xa50>
   11e04:	ldr	r5, [fp, #-432]	; 0xfffffe50
   11e08:	ldrb	r4, [r5]
   11e0c:	cmp	r4, #0
   11e10:	beq	11fe8 <__assert_fail@plt+0xf04>
   11e14:	ldr	r7, [fp, #-432]	; 0xfffffe50
   11e18:	ldrb	r3, [r7, #1]
   11e1c:	cmp	r3, #0
   11e20:	movne	r4, #1
   11e24:	strne	r4, [fp, #-436]	; 0xfffffe4c
   11e28:	bne	112c0 <__assert_fail@plt+0x1dc>
   11e2c:	mov	ip, #1
   11e30:	str	ip, [fp, #-436]	; 0xfffffe4c
   11e34:	ldr	r0, [fp, #-412]	; 0xfffffe64
   11e38:	bl	10f94 <elf_end@plt>
   11e3c:	mov	r0, sl
   11e40:	bl	10f94 <elf_end@plt>
   11e44:	ldr	r0, [fp, #-392]	; 0xfffffe78
   11e48:	bl	13eec <__assert_fail@plt+0x2e08>
   11e4c:	ldr	r0, [fp, #-384]	; 0xfffffe80
   11e50:	bl	13eec <__assert_fail@plt+0x2e08>
   11e54:	ldr	r0, [fp, #-396]	; 0xfffffe74
   11e58:	bl	110a8 <close@plt>
   11e5c:	ldr	r0, [fp, #-388]	; 0xfffffe7c
   11e60:	bl	110a8 <close@plt>
   11e64:	ldr	r5, [fp, #-472]	; 0xfffffe28
   11e68:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11e6c:	ldr	r0, [fp, #-436]	; 0xfffffe4c
   11e70:	ldr	r3, [r5]
   11e74:	cmp	r2, r3
   11e78:	bne	12634 <__assert_fail@plt+0x1550>
   11e7c:	sub	sp, fp, #32
   11e80:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e84:	ldrd	r0, [r7, #16]
   11e88:	ldrd	r2, [r5, #16]
   11e8c:	cmp	r1, r3
   11e90:	cmpeq	r0, r2
   11e94:	bne	116d4 <__assert_fail@plt+0x5f0>
   11e98:	ldrd	r0, [r7, #24]
   11e9c:	ldrd	r2, [r5, #24]
   11ea0:	cmp	r1, r3
   11ea4:	cmpeq	r0, r2
   11ea8:	beq	11edc <__assert_fail@plt+0xdf8>
   11eac:	sub	r1, fp, #512	; 0x200
   11eb0:	mov	r2, #2
   11eb4:	mov	r3, #0
   11eb8:	ldrd	r0, [r1, #84]	; 0x54
   11ebc:	and	r2, r2, r0
   11ec0:	and	r3, r3, r1
   11ec4:	orrs	r6, r2, r3
   11ec8:	beq	11edc <__assert_fail@plt+0xdf8>
   11ecc:	ldr	r6, [fp, #-460]	; 0xfffffe34
   11ed0:	ldrh	r3, [r6, #16]
   11ed4:	cmp	r3, #1
   11ed8:	bne	116d4 <__assert_fail@plt+0x5f0>
   11edc:	ldrd	r0, [r7, #32]
   11ee0:	ldrd	r2, [r5, #32]
   11ee4:	cmp	r1, r3
   11ee8:	cmpeq	r0, r2
   11eec:	bne	116d4 <__assert_fail@plt+0x5f0>
   11ef0:	ldr	r2, [r7, #40]	; 0x28
   11ef4:	ldr	r3, [r5, #40]	; 0x28
   11ef8:	cmp	r2, r3
   11efc:	bne	116d4 <__assert_fail@plt+0x5f0>
   11f00:	ldr	r2, [r7, #44]	; 0x2c
   11f04:	ldr	r3, [r5, #44]	; 0x2c
   11f08:	cmp	r2, r3
   11f0c:	bne	116d4 <__assert_fail@plt+0x5f0>
   11f10:	ldrd	r0, [r7, #48]	; 0x30
   11f14:	ldrd	r2, [r5, #48]	; 0x30
   11f18:	cmp	r1, r3
   11f1c:	cmpeq	r0, r2
   11f20:	bne	116d4 <__assert_fail@plt+0x5f0>
   11f24:	ldrd	r0, [r7, #56]	; 0x38
   11f28:	ldrd	r2, [r5, #56]	; 0x38
   11f2c:	cmp	r1, r3
   11f30:	cmpeq	r0, r2
   11f34:	bne	116d4 <__assert_fail@plt+0x5f0>
   11f38:	b	11734 <__assert_fail@plt+0x650>
   11f3c:	mov	r2, #5
   11f40:	movw	r1, #20668	; 0x50bc
   11f44:	movt	r1, #1
   11f48:	bl	10ed4 <dcgettext@plt>
   11f4c:	ldr	r6, [fp, #-456]	; 0xfffffe38
   11f50:	mov	r1, r4
   11f54:	str	r6, [sp]
   11f58:	ldr	r3, [fp, #-444]	; 0xfffffe44
   11f5c:	mov	r2, r0
   11f60:	mov	r0, r4
   11f64:	bl	10f64 <error@plt>
   11f68:	b	113a8 <__assert_fail@plt+0x2c4>
   11f6c:	cmp	r6, #5
   11f70:	bne	11834 <__assert_fail@plt+0x750>
   11f74:	ldr	r6, [fp, #-408]	; 0xfffffe68
   11f78:	cmp	r6, r4
   11f7c:	bne	11834 <__assert_fail@plt+0x750>
   11f80:	ldr	r3, [r7, #56]	; 0x38
   11f84:	cmp	r3, #4
   11f88:	beq	12a70 <__assert_fail@plt+0x198c>
   11f8c:	cmp	r3, #8
   11f90:	bne	11834 <__assert_fail@plt+0x750>
   11f94:	ldr	r6, [fp, #-440]	; 0xfffffe48
   11f98:	sub	r2, fp, #512	; 0x200
   11f9c:	ldr	r7, [fp, #-428]	; 0xfffffe54
   11fa0:	str	sp, [fp, #-500]	; 0xfffffe0c
   11fa4:	ldr	lr, [r6]
   11fa8:	ldr	r6, [r7]
   11fac:	ldrd	r0, [lr]
   11fb0:	ldrd	r4, [lr, #8]
   11fb4:	strd	r0, [r2, #84]	; 0x54
   11fb8:	add	r3, r4, r0
   11fbc:	ldr	r7, [fp, #-428]	; 0xfffffe54
   11fc0:	add	r3, r3, #2
   11fc4:	str	r4, [fp, #-440]	; 0xfffffe48
   11fc8:	str	r7, [fp, #-504]	; 0xfffffe08
   11fcc:	ldr	r7, [fp, #-408]	; 0xfffffe68
   11fd0:	cmp	r7, r3, lsl #3
   11fd4:	beq	12900 <__assert_fail@plt+0x181c>
   11fd8:	cmp	ip, #0
   11fdc:	ldr	sp, [fp, #-500]	; 0xfffffe0c
   11fe0:	bne	113e4 <__assert_fail@plt+0x300>
   11fe4:	b	11834 <__assert_fail@plt+0x750>
   11fe8:	mov	r0, r4
   11fec:	mov	r2, #5
   11ff0:	movw	r1, #20460	; 0x4fec
   11ff4:	movt	r1, #1
   11ff8:	bl	10ed4 <dcgettext@plt>
   11ffc:	ldr	r6, [fp, #-456]	; 0xfffffe38
   12000:	mov	r1, r4
   12004:	str	r6, [sp]
   12008:	ldr	r3, [fp, #-444]	; 0xfffffe44
   1200c:	mov	r2, r0
   12010:	mov	r0, r4
   12014:	bl	10f64 <error@plt>
   12018:	b	11e14 <__assert_fail@plt+0xd30>
   1201c:	ldr	r3, [fp, #-408]	; 0xfffffe68
   12020:	cmp	r3, #0
   12024:	beq	117d8 <__assert_fail@plt+0x6f4>
   12028:	movw	r0, #21420	; 0x53ac
   1202c:	movw	r1, #21408	; 0x53a0
   12030:	movw	r3, #19804	; 0x4d5c
   12034:	movt	r0, #1
   12038:	movt	r1, #1
   1203c:	movw	r2, #526	; 0x20e
   12040:	movt	r3, #1
   12044:	bl	110e4 <__assert_fail@plt>
   12048:	ldrb	r3, [r4, #9]
   1204c:	cmp	r3, #0
   12050:	bne	11a20 <__assert_fail@plt+0x93c>
   12054:	ldr	ip, [fp, #-484]	; 0xfffffe1c
   12058:	ldrb	r8, [ip]
   1205c:	cmp	r8, #0
   12060:	bne	11b6c <__assert_fail@plt+0xa88>
   12064:	movw	r1, #21248	; 0x5300
   12068:	mov	r2, #5
   1206c:	movt	r1, #1
   12070:	b	11ce4 <__assert_fail@plt+0xc00>
   12074:	ldrh	ip, [r6, #6]
   12078:	cmp	ip, #0
   1207c:	beq	11964 <__assert_fail@plt+0x880>
   12080:	ldr	r5, [fp, #-432]	; 0xfffffe50
   12084:	ldr	r8, [fp, #-408]	; 0xfffffe68
   12088:	ldr	r9, [fp, #-452]	; 0xfffffe3c
   1208c:	ldrb	r4, [r5]
   12090:	cmp	r4, #0
   12094:	bne	11844 <__assert_fail@plt+0x760>
   12098:	mov	r0, r8
   1209c:	bl	11054 <elf_ndxscn@plt>
   120a0:	mov	r5, r0
   120a4:	mov	r0, r9
   120a8:	bl	11054 <elf_ndxscn@plt>
   120ac:	cmp	r5, r0
   120b0:	beq	12494 <__assert_fail@plt+0x13b0>
   120b4:	mov	r2, #5
   120b8:	mov	r0, r4
   120bc:	movw	r1, #20980	; 0x51f4
   120c0:	movt	r1, #1
   120c4:	bl	10ed4 <dcgettext@plt>
   120c8:	mov	r5, r0
   120cc:	mov	r0, r8
   120d0:	bl	11054 <elf_ndxscn@plt>
   120d4:	mov	r6, r0
   120d8:	mov	r0, r9
   120dc:	bl	11054 <elf_ndxscn@plt>
   120e0:	str	r6, [sp, #4]
   120e4:	ldr	r7, [fp, #-456]	; 0xfffffe38
   120e8:	mov	r2, r5
   120ec:	mov	r1, r4
   120f0:	str	r7, [sp]
   120f4:	ldr	r3, [fp, #-444]	; 0xfffffe44
   120f8:	str	r0, [sp, #8]
   120fc:	mov	r0, r4
   12100:	bl	10f64 <error@plt>
   12104:	b	11844 <__assert_fail@plt+0x760>
   12108:	mov	r0, r8
   1210c:	bl	11054 <elf_ndxscn@plt>
   12110:	mov	r5, r0
   12114:	mov	r0, r9
   12118:	bl	11054 <elf_ndxscn@plt>
   1211c:	cmp	r5, r0
   12120:	beq	12448 <__assert_fail@plt+0x1364>
   12124:	mov	r2, #5
   12128:	mov	r0, r4
   1212c:	movw	r1, #21540	; 0x5424
   12130:	movt	r1, #1
   12134:	bl	10ed4 <dcgettext@plt>
   12138:	mov	r5, r0
   1213c:	mov	r0, r8
   12140:	bl	11054 <elf_ndxscn@plt>
   12144:	mov	r6, r0
   12148:	mov	r0, r9
   1214c:	bl	11054 <elf_ndxscn@plt>
   12150:	str	r6, [sp, #4]
   12154:	ldr	r7, [fp, #-456]	; 0xfffffe38
   12158:	mov	r2, r5
   1215c:	str	sl, [sp, #12]
   12160:	mov	r1, r4
   12164:	str	r7, [sp]
   12168:	ldr	r3, [fp, #-444]	; 0xfffffe44
   1216c:	str	r0, [sp, #8]
   12170:	mov	r0, r4
   12174:	bl	10f64 <error@plt>
   12178:	b	11844 <__assert_fail@plt+0x760>
   1217c:	ldr	r4, [fp, #-440]	; 0xfffffe48
   12180:	ldr	r4, [r4, #12]
   12184:	cmp	r4, #0
   12188:	str	r4, [fp, #-408]	; 0xfffffe68
   1218c:	beq	117bc <__assert_fail@plt+0x6d8>
   12190:	movw	r0, #21332	; 0x5354
   12194:	movw	r1, #21408	; 0x53a0
   12198:	movw	r3, #19804	; 0x4d5c
   1219c:	movt	r0, #1
   121a0:	movt	r1, #1
   121a4:	mov	r2, #524	; 0x20c
   121a8:	movt	r3, #1
   121ac:	bl	110e4 <__assert_fail@plt>
   121b0:	ldr	r6, [fp, #-476]	; 0xfffffe24
   121b4:	mov	r2, #24
   121b8:	str	r3, [fp, #-452]	; 0xfffffe3c
   121bc:	str	r3, [fp, #-356]	; 0xfffffe9c
   121c0:	mul	r2, r2, r6
   121c4:	str	r3, [fp, #-352]	; 0xfffffea0
   121c8:	str	r3, [fp, #-408]	; 0xfffffe68
   121cc:	add	r3, r2, #8
   121d0:	sub	sp, sp, r3
   121d4:	add	r7, sp, #16
   121d8:	str	r7, [fp, #-440]	; 0xfffffe48
   121dc:	ldr	r3, [fp, #-372]	; 0xfffffe8c
   121e0:	cmp	r3, #0
   121e4:	beq	11e34 <__assert_fail@plt+0xd50>
   121e8:	mov	r6, #0
   121ec:	ldr	r7, [fp, #-476]	; 0xfffffe24
   121f0:	str	sl, [fp, #-428]	; 0xfffffe54
   121f4:	b	12208 <__assert_fail@plt+0x1124>
   121f8:	ldr	r3, [fp, #-372]	; 0xfffffe8c
   121fc:	add	r6, r6, #1
   12200:	cmp	r3, r6
   12204:	bls	1248c <__assert_fail@plt+0x13a8>
   12208:	ldr	r0, [fp, #-412]	; 0xfffffe64
   1220c:	mov	r1, r6
   12210:	sub	r2, fp, #172	; 0xac
   12214:	bl	10f04 <gelf_getphdr@plt>
   12218:	subs	r8, r0, #0
   1221c:	beq	1271c <__assert_fail@plt+0x1638>
   12220:	mov	r1, r6
   12224:	ldr	r0, [fp, #-428]	; 0xfffffe54
   12228:	sub	r2, fp, #108	; 0x6c
   1222c:	bl	10f04 <gelf_getphdr@plt>
   12230:	subs	r1, r0, #0
   12234:	beq	126dc <__assert_fail@plt+0x15f8>
   12238:	mov	r0, r8
   1223c:	mov	r2, #56	; 0x38
   12240:	bl	10ec8 <memcmp@plt>
   12244:	cmp	r0, #0
   12248:	bne	12810 <__assert_fail@plt+0x172c>
   1224c:	ldr	r4, [fp, #-432]	; 0xfffffe50
   12250:	ldr	r3, [r4, #4]
   12254:	cmp	r3, #0
   12258:	beq	121f8 <__assert_fail@plt+0x1114>
   1225c:	ldr	r2, [r8]
   12260:	cmp	r2, #1
   12264:	bne	121f8 <__assert_fail@plt+0x1114>
   12268:	cmp	r7, #0
   1226c:	beq	125dc <__assert_fail@plt+0x14f8>
   12270:	ldr	ip, [fp, #-440]	; 0xfffffe48
   12274:	ldrd	r4, [r8, #8]
   12278:	ldrd	r0, [ip, #8]
   1227c:	cmp	r1, r5
   12280:	cmpeq	r0, r4
   12284:	mov	r0, r4
   12288:	mov	r1, r5
   1228c:	bcs	125c8 <__assert_fail@plt+0x14e4>
   12290:	sub	lr, fp, #512	; 0x200
   12294:	mov	r2, ip
   12298:	mov	sl, #0
   1229c:	strd	r4, [lr, #92]	; 0x5c
   122a0:	b	122b8 <__assert_fail@plt+0x11d4>
   122a4:	add	r2, r2, #24
   122a8:	ldrd	r4, [r2, #8]
   122ac:	cmp	r5, r1
   122b0:	cmpeq	r4, r0
   122b4:	bcs	12328 <__assert_fail@plt+0x1244>
   122b8:	add	sl, sl, #1
   122bc:	cmp	sl, r7
   122c0:	bne	122a4 <__assert_fail@plt+0x11c0>
   122c4:	ldrd	r8, [r8, #32]
   122c8:	mov	r4, r0
   122cc:	mov	r5, r1
   122d0:	adds	r8, r8, r0
   122d4:	adc	r9, r9, r1
   122d8:	cmp	r5, r9
   122dc:	cmpeq	r4, r8
   122e0:	movcs	r3, #0
   122e4:	movcc	r3, #1
   122e8:	cmp	sl, r7
   122ec:	movne	r3, #0
   122f0:	andeq	r3, r3, #1
   122f4:	cmp	r3, #0
   122f8:	beq	121f8 <__assert_fail@plt+0x1114>
   122fc:	ldr	ip, [fp, #-432]	; 0xfffffe50
   12300:	ldrb	r3, [ip]
   12304:	cmp	r3, #0
   12308:	beq	125e8 <__assert_fail@plt+0x1504>
   1230c:	ldr	ip, [fp, #-432]	; 0xfffffe50
   12310:	ldrb	r3, [ip, #1]
   12314:	cmp	r3, #0
   12318:	beq	12624 <__assert_fail@plt+0x1540>
   1231c:	mov	ip, #1
   12320:	str	ip, [fp, #-436]	; 0xfffffe4c
   12324:	b	122d8 <__assert_fail@plt+0x11f4>
   12328:	ldrd	r8, [r8, #32]
   1232c:	sub	ip, fp, #512	; 0x200
   12330:	adds	r8, r8, r0
   12334:	ldrd	r4, [ip, #92]	; 0x5c
   12338:	adc	r9, r9, r1
   1233c:	mov	lr, #24
   12340:	ldr	r0, [fp, #-440]	; 0xfffffe48
   12344:	mul	r2, lr, sl
   12348:	add	ip, r0, r2
   1234c:	ldrd	r0, [r0, r2]
   12350:	cmp	r1, r9
   12354:	cmpeq	r0, r8
   12358:	bcs	122d8 <__assert_fail@plt+0x11f4>
   1235c:	sub	r2, fp, #512	; 0x200
   12360:	str	r6, [fp, #-460]	; 0xfffffe34
   12364:	mov	r6, ip
   12368:	strd	r8, [r2, #92]	; 0x5c
   1236c:	mov	r8, r7
   12370:	mov	r2, r0
   12374:	mov	r7, r3
   12378:	ldr	r9, [fp, #-452]	; 0xfffffe3c
   1237c:	mov	r3, r1
   12380:	b	1239c <__assert_fail@plt+0x12b8>
   12384:	sub	r1, fp, #512	; 0x200
   12388:	ldrd	r2, [r6, #24]!
   1238c:	ldrd	r0, [r1, #92]	; 0x5c
   12390:	cmp	r3, r1
   12394:	cmpeq	r2, r0
   12398:	bcs	123f0 <__assert_fail@plt+0x130c>
   1239c:	cmp	r5, r3
   123a0:	cmpeq	r4, r2
   123a4:	bcs	123cc <__assert_fail@plt+0x12e8>
   123a8:	cmp	r7, #1
   123ac:	bne	12688 <__assert_fail@plt+0x15a4>
   123b0:	ldr	ip, [fp, #-408]	; 0xfffffe68
   123b4:	rsb	r2, r4, r2
   123b8:	add	r1, r9, r4
   123bc:	add	r0, ip, r4
   123c0:	bl	10ec8 <memcmp@plt>
   123c4:	cmp	r0, #0
   123c8:	bne	12674 <__assert_fail@plt+0x1590>
   123cc:	add	sl, sl, #1
   123d0:	ldrd	r4, [r6, #8]
   123d4:	cmp	sl, r8
   123d8:	bcc	12384 <__assert_fail@plt+0x12a0>
   123dc:	sub	lr, fp, #512	; 0x200
   123e0:	mov	r7, r8
   123e4:	ldr	r6, [fp, #-460]	; 0xfffffe34
   123e8:	ldrd	r8, [lr, #92]	; 0x5c
   123ec:	b	122d8 <__assert_fail@plt+0x11f4>
   123f0:	mov	r7, r8
   123f4:	ldr	r6, [fp, #-460]	; 0xfffffe34
   123f8:	mov	r8, r0
   123fc:	mov	r9, r1
   12400:	b	122d8 <__assert_fail@plt+0x11f4>
   12404:	mov	r2, #5
   12408:	mov	r0, r4
   1240c:	movw	r1, #21020	; 0x521c
   12410:	movt	r1, #1
   12414:	bl	10ed4 <dcgettext@plt>
   12418:	mov	r5, r0
   1241c:	mov	r0, r8
   12420:	bl	11054 <elf_ndxscn@plt>
   12424:	ldr	r6, [fp, #-456]	; 0xfffffe38
   12428:	mov	r2, r5
   1242c:	mov	r1, r4
   12430:	str	r6, [sp]
   12434:	ldr	r3, [fp, #-444]	; 0xfffffe44
   12438:	stmib	sp, {r0, sl}
   1243c:	mov	r0, r4
   12440:	bl	10f64 <error@plt>
   12444:	b	11bb8 <__assert_fail@plt+0xad4>
   12448:	mov	r2, #5
   1244c:	mov	r0, r4
   12450:	movw	r1, #21496	; 0x53f8
   12454:	movt	r1, #1
   12458:	bl	10ed4 <dcgettext@plt>
   1245c:	mov	r5, r0
   12460:	mov	r0, r8
   12464:	bl	11054 <elf_ndxscn@plt>
   12468:	ldr	r6, [fp, #-456]	; 0xfffffe38
   1246c:	mov	r2, r5
   12470:	mov	r1, r4
   12474:	str	r6, [sp]
   12478:	ldr	r3, [fp, #-444]	; 0xfffffe44
   1247c:	stmib	sp, {r0, sl}
   12480:	mov	r0, r4
   12484:	bl	10f64 <error@plt>
   12488:	b	11844 <__assert_fail@plt+0x760>
   1248c:	ldr	sl, [fp, #-428]	; 0xfffffe54
   12490:	b	11e34 <__assert_fail@plt+0xd50>
   12494:	mov	r2, #5
   12498:	mov	r0, r4
   1249c:	movw	r1, #20944	; 0x51d0
   124a0:	movt	r1, #1
   124a4:	bl	10ed4 <dcgettext@plt>
   124a8:	mov	r5, r0
   124ac:	mov	r0, r8
   124b0:	bl	11054 <elf_ndxscn@plt>
   124b4:	ldr	r6, [fp, #-456]	; 0xfffffe38
   124b8:	mov	r2, r5
   124bc:	mov	r1, r4
   124c0:	str	r6, [sp]
   124c4:	ldr	r3, [fp, #-444]	; 0xfffffe44
   124c8:	str	r0, [sp, #4]
   124cc:	mov	r0, r4
   124d0:	bl	10f64 <error@plt>
   124d4:	b	11844 <__assert_fail@plt+0x760>
   124d8:	mov	r2, #5
   124dc:	movw	r1, #20700	; 0x50dc
   124e0:	mov	r0, #0
   124e4:	movt	r1, #1
   124e8:	str	ip, [fp, #-512]	; 0xfffffe00
   124ec:	bl	10ed4 <dcgettext@plt>
   124f0:	mov	r6, r0
   124f4:	mov	r0, r8
   124f8:	bl	11054 <elf_ndxscn@plt>
   124fc:	mov	r3, r0
   12500:	mov	r0, r9
   12504:	str	r3, [fp, #-508]	; 0xfffffe04
   12508:	bl	11054 <elf_ndxscn@plt>
   1250c:	ldr	r3, [fp, #-508]	; 0xfffffe04
   12510:	mov	r2, r6
   12514:	str	r3, [sp, #4]
   12518:	ldr	r6, [fp, #-456]	; 0xfffffe38
   1251c:	str	r6, [sp]
   12520:	ldr	r3, [fp, #-444]	; 0xfffffe44
   12524:	str	r0, [sp, #8]
   12528:	mov	r0, #0
   1252c:	mov	r1, r0
   12530:	bl	10f64 <error@plt>
   12534:	ldr	r6, [fp, #-432]	; 0xfffffe50
   12538:	ldr	ip, [fp, #-512]	; 0xfffffe00
   1253c:	ldrb	r3, [r6, #1]
   12540:	cmp	r3, #0
   12544:	beq	11c50 <__assert_fail@plt+0xb6c>
   12548:	cmp	sl, #0
   1254c:	mov	r6, #1
   12550:	str	r6, [fp, #-436]	; 0xfffffe4c
   12554:	beq	116a8 <__assert_fail@plt+0x5c4>
   12558:	b	11670 <__assert_fail@plt+0x58c>
   1255c:	mov	r2, #5
   12560:	movw	r1, #20912	; 0x51b0
   12564:	movt	r1, #1
   12568:	mov	r5, r4
   1256c:	bl	10ed4 <dcgettext@plt>
   12570:	mov	r4, r0
   12574:	mvn	r0, #0
   12578:	bl	10fac <elf_errmsg@plt>
   1257c:	ldr	r3, [fp, #-456]	; 0xfffffe38
   12580:	mov	r2, r4
   12584:	mov	r1, r5
   12588:	str	r0, [sp]
   1258c:	mov	r0, #2
   12590:	bl	10f64 <error@plt>
   12594:	mov	r2, #5
   12598:	movw	r1, #20912	; 0x51b0
   1259c:	movt	r1, #1
   125a0:	bl	10ed4 <dcgettext@plt>
   125a4:	mov	r5, r0
   125a8:	mvn	r0, #0
   125ac:	bl	10fac <elf_errmsg@plt>
   125b0:	ldr	r3, [fp, #-444]	; 0xfffffe44
   125b4:	mov	r2, r5
   125b8:	mov	r1, r6
   125bc:	str	r0, [sp]
   125c0:	mov	r0, #2
   125c4:	bl	10f64 <error@plt>
   125c8:	ldrd	r8, [r8, #32]
   125cc:	mov	sl, #0
   125d0:	adds	r8, r8, r4
   125d4:	adc	r9, r9, r5
   125d8:	b	1233c <__assert_fail@plt+0x1258>
   125dc:	ldrd	r0, [r8, #8]
   125e0:	mov	sl, r7
   125e4:	b	122c4 <__assert_fail@plt+0x11e0>
   125e8:	mov	r0, r3
   125ec:	mov	r2, #5
   125f0:	movw	r1, #21772	; 0x550c
   125f4:	movt	r1, #1
   125f8:	str	r3, [fp, #-508]	; 0xfffffe04
   125fc:	bl	10ed4 <dcgettext@plt>
   12600:	ldr	ip, [fp, #-456]	; 0xfffffe38
   12604:	ldr	r3, [fp, #-508]	; 0xfffffe04
   12608:	str	ip, [sp]
   1260c:	mov	r1, r3
   12610:	mov	r2, r0
   12614:	mov	r0, r3
   12618:	ldr	r3, [fp, #-444]	; 0xfffffe44
   1261c:	bl	10f64 <error@plt>
   12620:	b	1230c <__assert_fail@plt+0x1228>
   12624:	mov	r4, #1
   12628:	ldr	sl, [fp, #-428]	; 0xfffffe54
   1262c:	str	r4, [fp, #-436]	; 0xfffffe4c
   12630:	b	11e34 <__assert_fail@plt+0xd50>
   12634:	bl	10eec <__stack_chk_fail@plt>
   12638:	mov	r2, #5
   1263c:	movw	r1, #20864	; 0x5180
   12640:	mov	r0, #0
   12644:	movt	r1, #1
   12648:	bl	10ed4 <dcgettext@plt>
   1264c:	mov	r4, r0
   12650:	mov	r0, r8
   12654:	bl	11054 <elf_ndxscn@plt>
   12658:	mov	r2, r4
   1265c:	ldr	r4, [fp, #-444]	; 0xfffffe44
   12660:	mov	r1, #0
   12664:	str	r4, [sp]
   12668:	mov	r3, r0
   1266c:	mov	r0, #2
   12670:	bl	10f64 <error@plt>
   12674:	sub	lr, fp, #512	; 0x200
   12678:	mov	r7, r8
   1267c:	ldr	r6, [fp, #-460]	; 0xfffffe34
   12680:	ldrd	r8, [lr, #92]	; 0x5c
   12684:	b	122fc <__assert_fail@plt+0x1218>
   12688:	movw	r0, #21752	; 0x54f8
   1268c:	movw	r1, #21408	; 0x53a0
   12690:	movw	r3, #19804	; 0x4d5c
   12694:	movt	r0, #1
   12698:	movt	r1, #1
   1269c:	movw	r2, #649	; 0x289
   126a0:	movt	r3, #1
   126a4:	bl	110e4 <__assert_fail@plt>
   126a8:	mov	r2, #5
   126ac:	movw	r1, #21640	; 0x5488
   126b0:	movt	r1, #1
   126b4:	bl	10ed4 <dcgettext@plt>
   126b8:	mov	r4, r0
   126bc:	mvn	r0, #0
   126c0:	bl	10fac <elf_errmsg@plt>
   126c4:	ldr	r1, [fp, #-408]	; 0xfffffe68
   126c8:	ldr	r3, [fp, #-444]	; 0xfffffe44
   126cc:	mov	r2, r4
   126d0:	str	r0, [sp]
   126d4:	mov	r0, #2
   126d8:	bl	10f64 <error@plt>
   126dc:	mov	r2, #5
   126e0:	mov	r4, r1
   126e4:	movw	r1, #21672	; 0x54a8
   126e8:	movt	r1, #1
   126ec:	bl	10ed4 <dcgettext@plt>
   126f0:	mov	r5, r0
   126f4:	mvn	r0, #0
   126f8:	bl	10fac <elf_errmsg@plt>
   126fc:	mov	r2, r5
   12700:	ldr	r5, [fp, #-456]	; 0xfffffe38
   12704:	mov	r1, r4
   12708:	mov	r3, r6
   1270c:	str	r5, [sp]
   12710:	str	r0, [sp, #4]
   12714:	mov	r0, #2
   12718:	bl	10f64 <error@plt>
   1271c:	mov	r2, #5
   12720:	movw	r1, #21672	; 0x54a8
   12724:	movt	r1, #1
   12728:	bl	10ed4 <dcgettext@plt>
   1272c:	mov	r4, r0
   12730:	mvn	r0, #0
   12734:	bl	10fac <elf_errmsg@plt>
   12738:	mov	r2, r4
   1273c:	ldr	r4, [fp, #-444]	; 0xfffffe44
   12740:	mov	r1, r8
   12744:	mov	r3, r6
   12748:	str	r4, [sp]
   1274c:	str	r0, [sp, #4]
   12750:	mov	r0, #2
   12754:	bl	10f64 <error@plt>
   12758:	movw	r1, #20484	; 0x5004
   1275c:	movt	r1, #1
   12760:	mov	r0, r4
   12764:	mov	r2, #5
   12768:	bl	10ed4 <dcgettext@plt>
   1276c:	mov	r5, r0
   12770:	mvn	r0, #0
   12774:	bl	10fac <elf_errmsg@plt>
   12778:	ldr	r3, [fp, #-456]	; 0xfffffe38
   1277c:	mov	r2, r5
   12780:	mov	r1, r4
   12784:	str	r0, [sp]
   12788:	mov	r0, #2
   1278c:	bl	10f64 <error@plt>
   12790:	mov	r2, #5
   12794:	movw	r1, #20424	; 0x4fc8
   12798:	movt	r1, #1
   1279c:	bl	10ed4 <dcgettext@plt>
   127a0:	mov	r4, r0
   127a4:	mvn	r0, #0
   127a8:	bl	10fac <elf_errmsg@plt>
   127ac:	ldr	r1, [fp, #-460]	; 0xfffffe34
   127b0:	ldr	r3, [fp, #-444]	; 0xfffffe44
   127b4:	mov	r2, r4
   127b8:	str	r0, [sp]
   127bc:	mov	r0, #2
   127c0:	bl	10f64 <error@plt>
   127c4:	movw	r4, #28948	; 0x7114
   127c8:	movt	r4, #2
   127cc:	mov	r2, #5
   127d0:	mov	r0, r5
   127d4:	movw	r1, #20392	; 0x4fa8
   127d8:	movt	r1, #1
   127dc:	bl	10ed4 <dcgettext@plt>
   127e0:	ldr	r1, [r4]
   127e4:	bl	11084 <fputs@plt>
   127e8:	movw	r3, #28936	; 0x7108
   127ec:	movt	r3, #2
   127f0:	ldr	r1, [r4]
   127f4:	movw	r0, #28908	; 0x70ec
   127f8:	mov	r2, #4
   127fc:	movt	r0, #2
   12800:	ldr	r3, [r3]
   12804:	bl	10fd0 <argp_help@plt>
   12808:	mov	r0, #1
   1280c:	bl	10fa0 <exit@plt>
   12810:	ldr	ip, [fp, #-432]	; 0xfffffe50
   12814:	ldrb	r4, [ip]
   12818:	cmp	r4, #0
   1281c:	bne	12854 <__assert_fail@plt+0x1770>
   12820:	mov	r0, r4
   12824:	mov	r2, #5
   12828:	movw	r1, #21720	; 0x54d8
   1282c:	movt	r1, #1
   12830:	bl	10ed4 <dcgettext@plt>
   12834:	mov	r2, r0
   12838:	mov	r0, r4
   1283c:	ldr	r4, [fp, #-456]	; 0xfffffe38
   12840:	mov	r1, r0
   12844:	str	r6, [sp, #4]
   12848:	str	r4, [sp]
   1284c:	ldr	r3, [fp, #-444]	; 0xfffffe44
   12850:	bl	10f64 <error@plt>
   12854:	ldr	r5, [fp, #-432]	; 0xfffffe50
   12858:	ldrb	r3, [r5, #1]
   1285c:	cmp	r3, #0
   12860:	beq	12624 <__assert_fail@plt+0x1540>
   12864:	mov	ip, #1
   12868:	str	ip, [fp, #-436]	; 0xfffffe4c
   1286c:	b	1224c <__assert_fail@plt+0x1168>
   12870:	ldr	r5, [fp, #-432]	; 0xfffffe50
   12874:	ldrb	r4, [r5]
   12878:	cmp	r4, #0
   1287c:	bne	128ac <__assert_fail@plt+0x17c8>
   12880:	mov	r2, #5
   12884:	movw	r1, #20524	; 0x502c
   12888:	movt	r1, #1
   1288c:	bl	10ed4 <dcgettext@plt>
   12890:	ldr	r6, [fp, #-456]	; 0xfffffe38
   12894:	mov	r1, r4
   12898:	str	r6, [sp]
   1289c:	ldr	r3, [fp, #-444]	; 0xfffffe44
   128a0:	mov	r2, r0
   128a4:	mov	r0, r4
   128a8:	bl	10f64 <error@plt>
   128ac:	ldr	r7, [fp, #-432]	; 0xfffffe50
   128b0:	ldrb	r3, [r7, #1]
   128b4:	cmp	r3, #0
   128b8:	beq	11e2c <__assert_fail@plt+0xd48>
   128bc:	mov	ip, #1
   128c0:	str	ip, [fp, #-436]	; 0xfffffe4c
   128c4:	b	11304 <__assert_fail@plt+0x220>
   128c8:	movw	r1, #20552	; 0x5048
   128cc:	movt	r1, #1
   128d0:	mov	r0, #0
   128d4:	mov	r2, #5
   128d8:	bl	10ed4 <dcgettext@plt>
   128dc:	mov	r4, r0
   128e0:	mvn	r0, #0
   128e4:	bl	10fac <elf_errmsg@plt>
   128e8:	ldr	r3, [fp, #-444]	; 0xfffffe44
   128ec:	mov	r2, r4
   128f0:	mov	r1, #0
   128f4:	str	r0, [sp]
   128f8:	mov	r0, #2
   128fc:	bl	10f64 <error@plt>
   12900:	mov	r3, #0
   12904:	and	r1, r1, r3
   12908:	sub	r3, fp, #512	; 0x200
   1290c:	mvn	r2, #0
   12910:	and	r0, r0, r2
   12914:	strd	r0, [r3, #60]	; 0x3c
   12918:	ldrd	r2, [r6]
   1291c:	cmp	r3, r1
   12920:	cmpeq	r2, r0
   12924:	bne	11fd8 <__assert_fail@plt+0xef4>
   12928:	ldrd	r0, [r6, #8]
   1292c:	sub	r2, fp, #512	; 0x200
   12930:	strd	r0, [r2, #60]	; 0x3c
   12934:	mvn	r0, #0
   12938:	ldrd	r2, [r2, #60]	; 0x3c
   1293c:	mov	r1, #0
   12940:	and	r0, r0, r4
   12944:	and	r1, r1, r5
   12948:	cmp	r3, r1
   1294c:	cmpeq	r2, r0
   12950:	bne	11fd8 <__assert_fail@plt+0xef4>
   12954:	add	r2, r4, #7
   12958:	ldr	r7, [fp, #-428]	; 0xfffffe54
   1295c:	bic	r2, r2, #7
   12960:	lsl	r1, r4, #3
   12964:	sub	sp, sp, r2
   12968:	add	r5, lr, #16
   1296c:	mov	r2, r4
   12970:	str	r5, [fp, #-428]	; 0xfffffe54
   12974:	add	r4, sp, #16
   12978:	ldr	r5, [fp, #-428]	; 0xfffffe54
   1297c:	sub	sp, sp, r1
   12980:	lsl	r3, r7, #3
   12984:	str	r4, [fp, #-464]	; 0xfffffe30
   12988:	mov	r0, r4
   1298c:	add	r7, sp, #16
   12990:	add	r4, r6, #16
   12994:	sub	sp, sp, r1
   12998:	mov	r1, #0
   1299c:	add	r4, r4, r3
   129a0:	add	r5, r5, r3
   129a4:	add	lr, lr, #8
   129a8:	str	r4, [fp, #-488]	; 0xfffffe18
   129ac:	add	r6, r6, #8
   129b0:	str	ip, [fp, #-512]	; 0xfffffe00
   129b4:	str	r6, [fp, #-428]	; 0xfffffe54
   129b8:	add	r6, sp, #16
   129bc:	str	r1, [fp, #-408]	; 0xfffffe68
   129c0:	str	r5, [fp, #-468]	; 0xfffffe2c
   129c4:	str	lr, [fp, #-492]	; 0xfffffe14
   129c8:	bl	10fe8 <memset@plt>
   129cc:	ldr	ip, [fp, #-512]	; 0xfffffe00
   129d0:	ldr	r4, [fp, #-440]	; 0xfffffe48
   129d4:	sub	r4, r4, #1
   129d8:	str	r4, [fp, #-496]	; 0xfffffe10
   129dc:	ldr	r5, [fp, #-504]	; 0xfffffe08
   129e0:	ldr	r4, [fp, #-408]	; 0xfffffe68
   129e4:	cmp	r5, r4
   129e8:	bls	12c04 <__assert_fail@plt+0x1b20>
   129ec:	ldr	r5, [fp, #-492]	; 0xfffffe14
   129f0:	sub	r3, fp, #512	; 0x200
   129f4:	ldrd	r2, [r3, #60]	; 0x3c
   129f8:	ldrd	r0, [r5, #8]!
   129fc:	cmp	r3, r1
   12a00:	cmpeq	r2, r0
   12a04:	str	r5, [fp, #-492]	; 0xfffffe14
   12a08:	bls	11fd8 <__assert_fail@plt+0xef4>
   12a0c:	ldr	r4, [fp, #-428]	; 0xfffffe54
   12a10:	sub	r5, fp, #512	; 0x200
   12a14:	ldrd	r2, [r4, #8]
   12a18:	ldrd	r4, [r5, #60]	; 0x3c
   12a1c:	cmp	r5, r3
   12a20:	cmpeq	r4, r2
   12a24:	bls	11fd8 <__assert_fail@plt+0xef4>
   12a28:	mov	r3, r0
   12a2c:	mov	r4, #0
   12a30:	cmp	r3, #0
   12a34:	beq	12bb8 <__assert_fail@plt+0x1ad4>
   12a38:	ldr	r5, [fp, #-440]	; 0xfffffe48
   12a3c:	cmp	r5, r3
   12a40:	bls	11fd8 <__assert_fail@plt+0xef4>
   12a44:	ldr	r5, [fp, #-496]	; 0xfffffe10
   12a48:	cmp	r5, r4
   12a4c:	bls	11fd8 <__assert_fail@plt+0xef4>
   12a50:	ldr	r5, [fp, #-468]	; 0xfffffe2c
   12a54:	add	r2, r7, r4, lsl #3
   12a58:	str	r3, [r7, r4, lsl #3]
   12a5c:	mov	lr, #0
   12a60:	add	r4, r4, #1
   12a64:	str	lr, [r2, #4]
   12a68:	ldr	r3, [r5, r3, lsl #3]
   12a6c:	b	12a30 <__assert_fail@plt+0x194c>
   12a70:	ldr	r7, [fp, #-440]	; 0xfffffe48
   12a74:	ldr	r6, [fp, #-428]	; 0xfffffe54
   12a78:	str	sp, [fp, #-500]	; 0xfffffe0c
   12a7c:	ldr	r5, [r7]
   12a80:	ldr	r4, [r6]
   12a84:	ldr	r7, [r5]
   12a88:	ldr	r6, [r5, #4]
   12a8c:	add	r3, r7, r6
   12a90:	str	r7, [fp, #-428]	; 0xfffffe54
   12a94:	add	r3, r3, #2
   12a98:	ldr	r7, [fp, #-408]	; 0xfffffe68
   12a9c:	cmp	r7, r3, lsl #2
   12aa0:	bne	11fd8 <__assert_fail@plt+0xef4>
   12aa4:	ldr	r3, [r4]
   12aa8:	ldr	r7, [fp, #-428]	; 0xfffffe54
   12aac:	cmp	r7, r3
   12ab0:	bne	11fd8 <__assert_fail@plt+0xef4>
   12ab4:	ldr	r3, [r4, #4]
   12ab8:	cmp	r6, r3
   12abc:	bne	11fd8 <__assert_fail@plt+0xef4>
   12ac0:	add	r3, r6, #7
   12ac4:	lsl	r2, r6, #2
   12ac8:	bic	r3, r3, #7
   12acc:	add	r2, r2, #6
   12ad0:	sub	sp, sp, r3
   12ad4:	bic	r2, r2, #7
   12ad8:	add	r7, sp, #16
   12adc:	sub	sp, sp, r2
   12ae0:	str	r7, [fp, #-464]	; 0xfffffe30
   12ae4:	add	r7, sp, #16
   12ae8:	str	r7, [fp, #-440]	; 0xfffffe48
   12aec:	sub	sp, sp, r2
   12af0:	ldr	r7, [fp, #-428]	; 0xfffffe54
   12af4:	add	lr, r5, #8
   12af8:	ldr	r0, [fp, #-464]	; 0xfffffe30
   12afc:	mov	r1, #0
   12b00:	mov	r2, r6
   12b04:	add	r5, r5, #4
   12b08:	lsl	r3, r7, #2
   12b0c:	add	r7, r4, #8
   12b10:	add	r7, r7, r3
   12b14:	add	lr, lr, r3
   12b18:	str	r5, [fp, #-468]	; 0xfffffe2c
   12b1c:	add	r4, r4, #4
   12b20:	str	r7, [fp, #-492]	; 0xfffffe14
   12b24:	add	r7, sp, #16
   12b28:	str	r4, [fp, #-408]	; 0xfffffe68
   12b2c:	sub	r5, r6, #1
   12b30:	str	ip, [fp, #-512]	; 0xfffffe00
   12b34:	mov	r4, #0
   12b38:	str	lr, [fp, #-488]	; 0xfffffe18
   12b3c:	bl	10fe8 <memset@plt>
   12b40:	ldr	ip, [fp, #-512]	; 0xfffffe00
   12b44:	str	r4, [fp, #-452]	; 0xfffffe3c
   12b48:	str	r5, [fp, #-496]	; 0xfffffe10
   12b4c:	ldr	r5, [fp, #-452]	; 0xfffffe3c
   12b50:	ldr	r4, [fp, #-428]	; 0xfffffe54
   12b54:	cmp	r5, r4
   12b58:	beq	12d08 <__assert_fail@plt+0x1c24>
   12b5c:	ldr	r4, [fp, #-468]	; 0xfffffe2c
   12b60:	ldr	r3, [r4, #4]!
   12b64:	cmp	r6, r3
   12b68:	str	r4, [fp, #-468]	; 0xfffffe2c
   12b6c:	bls	11fd8 <__assert_fail@plt+0xef4>
   12b70:	ldr	r5, [fp, #-408]	; 0xfffffe68
   12b74:	ldr	r2, [r5, #4]
   12b78:	cmp	r6, r2
   12b7c:	bls	11fd8 <__assert_fail@plt+0xef4>
   12b80:	mov	r4, #0
   12b84:	cmp	r3, #0
   12b88:	beq	12ccc <__assert_fail@plt+0x1be8>
   12b8c:	cmp	r6, r3
   12b90:	bls	11fd8 <__assert_fail@plt+0xef4>
   12b94:	ldr	r5, [fp, #-496]	; 0xfffffe10
   12b98:	cmp	r5, r4
   12b9c:	bls	11fd8 <__assert_fail@plt+0xef4>
   12ba0:	ldr	r5, [fp, #-440]	; 0xfffffe48
   12ba4:	str	r3, [r5, r4, lsl #2]
   12ba8:	add	r4, r4, #1
   12bac:	ldr	r5, [fp, #-488]	; 0xfffffe18
   12bb0:	ldr	r3, [r5, r3, lsl #2]
   12bb4:	b	12b84 <__assert_fail@plt+0x1aa0>
   12bb8:	ldr	lr, [fp, #-428]	; 0xfffffe54
   12bbc:	ldr	r5, [lr, #8]!
   12bc0:	str	lr, [fp, #-428]	; 0xfffffe54
   12bc4:	cmp	r5, #0
   12bc8:	beq	12c54 <__assert_fail@plt+0x1b70>
   12bcc:	ldr	r0, [fp, #-440]	; 0xfffffe48
   12bd0:	cmp	r0, r5
   12bd4:	bls	11fd8 <__assert_fail@plt+0xef4>
   12bd8:	ldr	r1, [fp, #-496]	; 0xfffffe10
   12bdc:	cmp	r1, r3
   12be0:	bls	11fd8 <__assert_fail@plt+0xef4>
   12be4:	ldr	r0, [fp, #-488]	; 0xfffffe18
   12be8:	add	r2, r6, r3, lsl #3
   12bec:	str	r5, [r6, r3, lsl #3]
   12bf0:	mov	lr, #0
   12bf4:	add	r3, r3, #1
   12bf8:	str	lr, [r2, #4]
   12bfc:	ldr	r5, [r0, r5, lsl #3]
   12c00:	b	12bc4 <__assert_fail@plt+0x1ae0>
   12c04:	mov	lr, #0
   12c08:	ldr	r4, [fp, #-440]	; 0xfffffe48
   12c0c:	cmp	r4, lr
   12c10:	bls	12c4c <__assert_fail@plt+0x1b68>
   12c14:	ldr	r5, [fp, #-464]	; 0xfffffe30
   12c18:	ldrb	r3, [r5, lr]
   12c1c:	cmp	r3, #0
   12c20:	bne	12c44 <__assert_fail@plt+0x1b60>
   12c24:	ldr	r6, [fp, #-468]	; 0xfffffe2c
   12c28:	lsl	r3, lr, #3
   12c2c:	ldr	r7, [fp, #-488]	; 0xfffffe18
   12c30:	ldrd	r0, [r6, r3]
   12c34:	ldrd	r2, [r3, r7]
   12c38:	cmp	r1, r3
   12c3c:	cmpeq	r0, r2
   12c40:	bne	11fd8 <__assert_fail@plt+0xef4>
   12c44:	add	lr, lr, #1
   12c48:	b	12c08 <__assert_fail@plt+0x1b24>
   12c4c:	mov	ip, #1
   12c50:	b	11fd8 <__assert_fail@plt+0xef4>
   12c54:	cmp	r4, r3
   12c58:	bne	11fd8 <__assert_fail@plt+0xef4>
   12c5c:	mov	r0, r7
   12c60:	mov	r1, r4
   12c64:	mov	r2, #8
   12c68:	movw	r3, #12584	; 0x3128
   12c6c:	movt	r3, #1
   12c70:	str	ip, [fp, #-512]	; 0xfffffe00
   12c74:	bl	11048 <qsort@plt>
   12c78:	mov	r0, r6
   12c7c:	mov	r1, r4
   12c80:	movw	r3, #12584	; 0x3128
   12c84:	mov	r2, #8
   12c88:	movt	r3, #1
   12c8c:	bl	11048 <qsort@plt>
   12c90:	ldr	ip, [fp, #-512]	; 0xfffffe00
   12c94:	cmp	r5, r4
   12c98:	beq	12d44 <__assert_fail@plt+0x1c60>
   12c9c:	lsl	r1, r5, #3
   12ca0:	ldrd	r2, [r7, r1]
   12ca4:	ldrd	r0, [r1, r6]
   12ca8:	cmp	r3, r1
   12cac:	cmpeq	r2, r0
   12cb0:	bne	11fd8 <__assert_fail@plt+0xef4>
   12cb4:	ldr	r1, [fp, #-464]	; 0xfffffe30
   12cb8:	mov	r3, #1
   12cbc:	add	r5, r5, #1
   12cc0:	add	r2, r1, r2
   12cc4:	strb	r3, [r2]
   12cc8:	b	12c94 <__assert_fail@plt+0x1bb0>
   12ccc:	ldr	lr, [fp, #-408]	; 0xfffffe68
   12cd0:	ldr	r5, [lr, #4]!
   12cd4:	str	lr, [fp, #-408]	; 0xfffffe68
   12cd8:	cmp	r5, #0
   12cdc:	beq	12d54 <__assert_fail@plt+0x1c70>
   12ce0:	cmp	r6, r5
   12ce4:	bls	11fd8 <__assert_fail@plt+0xef4>
   12ce8:	ldr	r0, [fp, #-496]	; 0xfffffe10
   12cec:	cmp	r0, r3
   12cf0:	bls	11fd8 <__assert_fail@plt+0xef4>
   12cf4:	ldr	r1, [fp, #-492]	; 0xfffffe14
   12cf8:	str	r5, [r7, r3, lsl #2]
   12cfc:	add	r3, r3, #1
   12d00:	ldr	r5, [r1, r5, lsl #2]
   12d04:	b	12cd8 <__assert_fail@plt+0x1bf4>
   12d08:	ldr	r0, [fp, #-488]	; 0xfffffe18
   12d0c:	mov	r3, #0
   12d10:	ldr	lr, [fp, #-492]	; 0xfffffe14
   12d14:	cmp	r3, r6
   12d18:	beq	12c4c <__assert_fail@plt+0x1b68>
   12d1c:	ldr	r5, [fp, #-464]	; 0xfffffe30
   12d20:	ldrb	r2, [r5, r3]
   12d24:	cmp	r2, #0
   12d28:	bne	12d3c <__assert_fail@plt+0x1c58>
   12d2c:	ldr	r1, [r0, r3, lsl #2]
   12d30:	ldr	r2, [lr, r3, lsl #2]
   12d34:	cmp	r1, r2
   12d38:	bne	11fd8 <__assert_fail@plt+0xef4>
   12d3c:	add	r3, r3, #1
   12d40:	b	12d14 <__assert_fail@plt+0x1c30>
   12d44:	ldr	r4, [fp, #-408]	; 0xfffffe68
   12d48:	add	r4, r4, #1
   12d4c:	str	r4, [fp, #-408]	; 0xfffffe68
   12d50:	b	129dc <__assert_fail@plt+0x18f8>
   12d54:	cmp	r4, r3
   12d58:	bne	11fd8 <__assert_fail@plt+0xef4>
   12d5c:	ldr	r0, [fp, #-440]	; 0xfffffe48
   12d60:	mov	r1, r4
   12d64:	mov	r2, #4
   12d68:	movw	r3, #12548	; 0x3104
   12d6c:	movt	r3, #1
   12d70:	str	ip, [fp, #-512]	; 0xfffffe00
   12d74:	bl	11048 <qsort@plt>
   12d78:	mov	r0, r7
   12d7c:	mov	r1, r4
   12d80:	movw	r3, #12548	; 0x3104
   12d84:	mov	r2, #4
   12d88:	movt	r3, #1
   12d8c:	bl	11048 <qsort@plt>
   12d90:	ldr	ip, [fp, #-512]	; 0xfffffe00
   12d94:	cmp	r5, r4
   12d98:	beq	12fa4 <__assert_fail@plt+0x1ec0>
   12d9c:	ldr	r2, [fp, #-440]	; 0xfffffe48
   12da0:	ldr	r3, [r2, r5, lsl #2]
   12da4:	ldr	r2, [r7, r5, lsl #2]
   12da8:	cmp	r3, r2
   12dac:	bne	11fd8 <__assert_fail@plt+0xef4>
   12db0:	ldr	r0, [fp, #-464]	; 0xfffffe30
   12db4:	mov	lr, #1
   12db8:	add	r5, r5, #1
   12dbc:	strb	lr, [r0, r3]
   12dc0:	b	12d94 <__assert_fail@plt+0x1cb0>
   12dc4:	mov	r6, r8
   12dc8:	mov	r7, r9
   12dcc:	ldr	sl, [fp, #-420]	; 0xfffffe5c
   12dd0:	b	114c8 <__assert_fail@plt+0x3e4>
   12dd4:	mov	r2, #5
   12dd8:	movw	r1, #21640	; 0x5488
   12ddc:	movt	r1, #1
   12de0:	bl	10ed4 <dcgettext@plt>
   12de4:	mov	r4, r0
   12de8:	mvn	r0, #0
   12dec:	bl	10fac <elf_errmsg@plt>
   12df0:	ldr	r1, [fp, #-452]	; 0xfffffe3c
   12df4:	ldr	r3, [fp, #-456]	; 0xfffffe38
   12df8:	mov	r2, r4
   12dfc:	str	r0, [sp]
   12e00:	mov	r0, #2
   12e04:	bl	10f64 <error@plt>
   12e08:	ldr	r6, [fp, #-432]	; 0xfffffe50
   12e0c:	ldrb	r4, [r6]
   12e10:	cmp	r4, #0
   12e14:	bne	12e48 <__assert_fail@plt+0x1d64>
   12e18:	mov	r2, #5
   12e1c:	movw	r1, #21588	; 0x5454
   12e20:	mov	r0, r4
   12e24:	movt	r1, #1
   12e28:	bl	10ed4 <dcgettext@plt>
   12e2c:	ldr	r7, [fp, #-456]	; 0xfffffe38
   12e30:	mov	r1, r4
   12e34:	str	r7, [sp]
   12e38:	ldr	r3, [fp, #-444]	; 0xfffffe44
   12e3c:	mov	r2, r0
   12e40:	mov	r0, r4
   12e44:	bl	10f64 <error@plt>
   12e48:	ldr	ip, [fp, #-432]	; 0xfffffe50
   12e4c:	ldrb	r3, [ip, #1]
   12e50:	cmp	r3, #0
   12e54:	beq	11e2c <__assert_fail@plt+0xd48>
   12e58:	mov	r4, #1
   12e5c:	str	r4, [fp, #-436]	; 0xfffffe4c
   12e60:	b	114d0 <__assert_fail@plt+0x3ec>
   12e64:	mov	r2, #5
   12e68:	movw	r1, #20816	; 0x5150
   12e6c:	movt	r1, #1
   12e70:	bl	10ed4 <dcgettext@plt>
   12e74:	mov	r5, r0
   12e78:	mov	r0, r8
   12e7c:	bl	11054 <elf_ndxscn@plt>
   12e80:	mov	r4, r0
   12e84:	mvn	r0, #0
   12e88:	bl	10fac <elf_errmsg@plt>
   12e8c:	ldr	r7, [fp, #-444]	; 0xfffffe44
   12e90:	mov	r2, r5
   12e94:	mov	r3, r4
   12e98:	str	r7, [sp]
   12e9c:	ldr	r1, [fp, #-440]	; 0xfffffe48
   12ea0:	str	r0, [sp, #4]
   12ea4:	mov	r0, #2
   12ea8:	bl	10f64 <error@plt>
   12eac:	ldr	r5, [fp, #-432]	; 0xfffffe50
   12eb0:	ldrb	r4, [r5]
   12eb4:	cmp	r4, #0
   12eb8:	bne	12ee8 <__assert_fail@plt+0x1e04>
   12ebc:	mov	r2, #5
   12ec0:	movw	r1, #20596	; 0x5074
   12ec4:	movt	r1, #1
   12ec8:	bl	10ed4 <dcgettext@plt>
   12ecc:	ldr	r6, [fp, #-456]	; 0xfffffe38
   12ed0:	mov	r1, r4
   12ed4:	str	r6, [sp]
   12ed8:	ldr	r3, [fp, #-444]	; 0xfffffe44
   12edc:	mov	r2, r0
   12ee0:	mov	r0, r4
   12ee4:	bl	10f64 <error@plt>
   12ee8:	ldr	r7, [fp, #-432]	; 0xfffffe50
   12eec:	ldrb	r3, [r7, #1]
   12ef0:	cmp	r3, #0
   12ef4:	beq	11e2c <__assert_fail@plt+0xd48>
   12ef8:	mov	ip, #1
   12efc:	str	ip, [fp, #-436]	; 0xfffffe4c
   12f00:	b	11348 <__assert_fail@plt+0x264>
   12f04:	mov	r2, #5
   12f08:	movw	r1, #20816	; 0x5150
   12f0c:	movt	r1, #1
   12f10:	bl	10ed4 <dcgettext@plt>
   12f14:	mov	r5, r0
   12f18:	mov	r0, r9
   12f1c:	bl	11054 <elf_ndxscn@plt>
   12f20:	mov	r4, r0
   12f24:	mvn	r0, #0
   12f28:	bl	10fac <elf_errmsg@plt>
   12f2c:	ldr	r7, [fp, #-456]	; 0xfffffe38
   12f30:	mov	r2, r5
   12f34:	mov	r3, r4
   12f38:	str	r7, [sp]
   12f3c:	ldr	r1, [fp, #-428]	; 0xfffffe54
   12f40:	str	r0, [sp, #4]
   12f44:	mov	r0, #2
   12f48:	bl	10f64 <error@plt>
   12f4c:	mov	r2, #5
   12f50:	movw	r1, #21072	; 0x5250
   12f54:	movt	r1, #1
   12f58:	ldr	r7, [fp, #-488]	; 0xfffffe18
   12f5c:	mov	r9, r5
   12f60:	ldr	r5, [fp, #-492]	; 0xfffffe14
   12f64:	bl	10ed4 <dcgettext@plt>
   12f68:	mov	r6, r0
   12f6c:	mov	r0, r7
   12f70:	bl	11054 <elf_ndxscn@plt>
   12f74:	mov	r4, r0
   12f78:	mvn	r0, #0
   12f7c:	bl	10fac <elf_errmsg@plt>
   12f80:	str	r5, [sp]
   12f84:	mov	r3, r4
   12f88:	ldr	r4, [fp, #-456]	; 0xfffffe38
   12f8c:	mov	r2, r6
   12f90:	mov	r1, r9
   12f94:	str	r4, [sp, #4]
   12f98:	str	r0, [sp, #8]
   12f9c:	mov	r0, #2
   12fa0:	bl	10f64 <error@plt>
   12fa4:	ldr	r4, [fp, #-452]	; 0xfffffe3c
   12fa8:	add	r4, r4, #1
   12fac:	str	r4, [fp, #-452]	; 0xfffffe3c
   12fb0:	b	12b4c <__assert_fail@plt+0x1a68>
   12fb4:	mov	fp, #0
   12fb8:	mov	lr, #0
   12fbc:	pop	{r1}		; (ldr r1, [sp], #4)
   12fc0:	mov	r2, sp
   12fc4:	push	{r2}		; (str r2, [sp, #-4]!)
   12fc8:	push	{r0}		; (str r0, [sp, #-4]!)
   12fcc:	ldr	ip, [pc, #16]	; 12fe4 <__assert_fail@plt+0x1f00>
   12fd0:	push	{ip}		; (str ip, [sp, #-4]!)
   12fd4:	ldr	r0, [pc, #12]	; 12fe8 <__assert_fail@plt+0x1f04>
   12fd8:	ldr	r3, [pc, #12]	; 12fec <__assert_fail@plt+0x1f08>
   12fdc:	bl	10f7c <__libc_start_main@plt>
   12fe0:	bl	1109c <abort@plt>
   12fe4:	andeq	r4, r1, r8, asr #26
   12fe8:	strdeq	r1, [r1], -r0
   12fec:	andeq	r4, r1, r4, ror #25
   12ff0:	ldr	r3, [pc, #20]	; 1300c <__assert_fail@plt+0x1f28>
   12ff4:	ldr	r2, [pc, #20]	; 13010 <__assert_fail@plt+0x1f2c>
   12ff8:	add	r3, pc, r3
   12ffc:	ldr	r2, [r3, r2]
   13000:	cmp	r2, #0
   13004:	bxeq	lr
   13008:	b	10f88 <__gmon_start__@plt>
   1300c:	andeq	r4, r1, r0
   13010:	andeq	r0, r0, r4, ror #1
   13014:	push	{r3, lr}
   13018:	movw	r0, #28936	; 0x7108
   1301c:	ldr	r3, [pc, #36]	; 13048 <__assert_fail@plt+0x1f64>
   13020:	movt	r0, #2
   13024:	rsb	r3, r0, r3
   13028:	cmp	r3, #6
   1302c:	popls	{r3, pc}
   13030:	movw	r3, #0
   13034:	movt	r3, #0
   13038:	cmp	r3, #0
   1303c:	popeq	{r3, pc}
   13040:	blx	r3
   13044:	pop	{r3, pc}
   13048:	andeq	r7, r2, fp, lsl #2
   1304c:	push	{r3, lr}
   13050:	movw	r0, #28936	; 0x7108
   13054:	movw	r3, #28936	; 0x7108
   13058:	movt	r0, #2
   1305c:	movt	r3, #2
   13060:	rsb	r3, r0, r3
   13064:	asr	r3, r3, #2
   13068:	add	r3, r3, r3, lsr #31
   1306c:	asrs	r1, r3, #1
   13070:	popeq	{r3, pc}
   13074:	movw	r2, #0
   13078:	movt	r2, #0
   1307c:	cmp	r2, #0
   13080:	popeq	{r3, pc}
   13084:	blx	r2
   13088:	pop	{r3, pc}
   1308c:	push	{r4, lr}
   13090:	movw	r4, #28952	; 0x7118
   13094:	movt	r4, #2
   13098:	ldrb	r3, [r4]
   1309c:	cmp	r3, #0
   130a0:	popne	{r4, pc}
   130a4:	bl	13014 <__assert_fail@plt+0x1f30>
   130a8:	mov	r3, #1
   130ac:	strb	r3, [r4]
   130b0:	pop	{r4, pc}
   130b4:	movw	r0, #26164	; 0x6634
   130b8:	movt	r0, #2
   130bc:	push	{r3, lr}
   130c0:	ldr	r3, [r0]
   130c4:	cmp	r3, #0
   130c8:	beq	130e0 <__assert_fail@plt+0x1ffc>
   130cc:	movw	r3, #0
   130d0:	movt	r3, #0
   130d4:	cmp	r3, #0
   130d8:	beq	130e0 <__assert_fail@plt+0x1ffc>
   130dc:	blx	r3
   130e0:	pop	{r3, lr}
   130e4:	b	1304c <__assert_fail@plt+0x1f68>
   130e8:	ldrd	r2, [r0]
   130ec:	ldrd	r0, [r1]
   130f0:	cmp	r3, r1
   130f4:	cmpeq	r2, r0
   130f8:	movcs	r0, #1
   130fc:	mvncc	r0, #0
   13100:	bx	lr
   13104:	ldr	r3, [r0]
   13108:	ldr	r2, [r1]
   1310c:	cmp	r3, r2
   13110:	bcc	13120 <__assert_fail@plt+0x203c>
   13114:	movls	r0, #0
   13118:	movhi	r0, #1
   1311c:	bx	lr
   13120:	mvn	r0, #0
   13124:	bx	lr
   13128:	ldrd	r2, [r0]
   1312c:	ldrd	r0, [r1]
   13130:	cmp	r3, r1
   13134:	cmpeq	r2, r0
   13138:	bcc	13148 <__assert_fail@plt+0x2064>
   1313c:	movls	r0, #0
   13140:	movhi	r0, #1
   13144:	bx	lr
   13148:	mvn	r0, #0
   1314c:	bx	lr
   13150:	push	{r4, r5, r6, r7, r8, r9, lr}
   13154:	mov	r7, r1
   13158:	sub	sp, sp, #12
   1315c:	mov	r1, #0
   13160:	mov	r5, r2
   13164:	mov	r9, r0
   13168:	bl	10f70 <open64@plt>
   1316c:	cmn	r0, #1
   13170:	mov	r4, r0
   13174:	beq	131ac <__assert_fail@plt+0x20c8>
   13178:	mov	r1, #8
   1317c:	mov	r2, #0
   13180:	bl	11018 <elf_begin@plt>
   13184:	subs	r6, r0, #0
   13188:	beq	13200 <__assert_fail@plt+0x211c>
   1318c:	bl	13e5c <__assert_fail@plt+0x2d78>
   13190:	subs	r8, r0, #0
   13194:	beq	131dc <__assert_fail@plt+0x20f8>
   13198:	str	r4, [r7]
   1319c:	mov	r0, r6
   131a0:	str	r8, [r5]
   131a4:	add	sp, sp, #12
   131a8:	pop	{r4, r5, r6, r7, r8, r9, pc}
   131ac:	bl	10fc4 <__errno_location@plt>
   131b0:	mov	r2, #5
   131b4:	movw	r1, #20080	; 0x4e70
   131b8:	movt	r1, #1
   131bc:	ldr	r4, [r0]
   131c0:	mov	r0, #0
   131c4:	bl	10ed4 <dcgettext@plt>
   131c8:	mov	r3, r9
   131cc:	mov	r1, r4
   131d0:	mov	r2, r0
   131d4:	mov	r0, #2
   131d8:	bl	10f64 <error@plt>
   131dc:	mov	r2, #5
   131e0:	movw	r1, #20144	; 0x4eb0
   131e4:	movt	r1, #1
   131e8:	bl	10ed4 <dcgettext@plt>
   131ec:	mov	r1, r8
   131f0:	mov	r3, r9
   131f4:	mov	r2, r0
   131f8:	mov	r0, #2
   131fc:	bl	10f64 <error@plt>
   13200:	mov	r2, #5
   13204:	movw	r1, #20100	; 0x4e84
   13208:	movt	r1, #1
   1320c:	bl	10ed4 <dcgettext@plt>
   13210:	mov	r4, r0
   13214:	mvn	r0, #0
   13218:	bl	10fac <elf_errmsg@plt>
   1321c:	mov	r2, r4
   13220:	mov	r1, r6
   13224:	mov	r3, r9
   13228:	str	r0, [sp]
   1322c:	mov	r0, #2
   13230:	bl	10f64 <error@plt>
   13234:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13238:	movw	fp, #28944	; 0x7110
   1323c:	movt	fp, #2
   13240:	sub	sp, sp, #116	; 0x74
   13244:	mov	r6, r0
   13248:	mov	sl, r1
   1324c:	ldr	r3, [fp]
   13250:	mov	r8, r2
   13254:	mov	r5, #0
   13258:	str	r3, [sp, #108]	; 0x6c
   1325c:	mov	r1, r5
   13260:	ldr	r0, [r6, #16]
   13264:	bl	11030 <elf_nextscn@plt>
   13268:	subs	r5, r0, #0
   1326c:	beq	1333c <__assert_fail@plt+0x2258>
   13270:	add	r1, sp, #40	; 0x28
   13274:	bl	10e98 <gelf_getshdr@plt>
   13278:	subs	r4, r0, #0
   1327c:	beq	133c8 <__assert_fail@plt+0x22e4>
   13280:	ldr	r9, [r4, #4]
   13284:	cmp	r9, #4
   13288:	cmpne	r9, #9
   1328c:	moveq	r9, #0
   13290:	movne	r9, #1
   13294:	bne	1325c <__assert_fail@plt+0x2178>
   13298:	ldr	r3, [r4, #40]	; 0x28
   1329c:	cmp	r3, sl
   132a0:	bne	1325c <__assert_fail@plt+0x2178>
   132a4:	mov	r0, r5
   132a8:	mov	r1, r9
   132ac:	bl	10f58 <elf_getdata@plt>
   132b0:	subs	r7, r0, #0
   132b4:	beq	13444 <__assert_fail@plt+0x2360>
   132b8:	ldr	r3, [r4, #4]
   132bc:	cmp	r3, #9
   132c0:	ldrd	r2, [r4, #56]	; 0x38
   132c4:	beq	13358 <__assert_fail@plt+0x2274>
   132c8:	orrs	r1, r2, r3
   132cc:	beq	1325c <__assert_fail@plt+0x2178>
   132d0:	ldrd	r0, [r4, #32]
   132d4:	bl	14158 <__assert_fail@plt+0x3074>
   132d8:	cmp	r0, #0
   132dc:	bgt	132fc <__assert_fail@plt+0x2218>
   132e0:	b	1325c <__assert_fail@plt+0x2178>
   132e4:	ldrd	r0, [r4, #32]
   132e8:	add	r9, r9, #1
   132ec:	ldrd	r2, [r4, #56]	; 0x38
   132f0:	bl	14158 <__assert_fail@plt+0x3074>
   132f4:	cmp	r9, r0
   132f8:	bge	1325c <__assert_fail@plt+0x2178>
   132fc:	mov	r0, r7
   13300:	mov	r1, r9
   13304:	add	r2, sp, #16
   13308:	bl	10fb8 <gelf_getrela@plt>
   1330c:	subs	ip, r0, #0
   13310:	beq	13408 <__assert_fail@plt+0x2324>
   13314:	ldr	r3, [ip, #12]
   13318:	ldr	r1, [ip, #8]
   1331c:	cmp	r8, r3
   13320:	bne	132e4 <__assert_fail@plt+0x2200>
   13324:	mov	r0, r6
   13328:	bl	13f1c <__assert_fail@plt+0x2e38>
   1332c:	cmp	r0, #0
   13330:	beq	132e4 <__assert_fail@plt+0x2200>
   13334:	mov	r0, #1
   13338:	b	13340 <__assert_fail@plt+0x225c>
   1333c:	mov	r0, r5
   13340:	ldr	r2, [sp, #108]	; 0x6c
   13344:	ldr	r3, [fp]
   13348:	cmp	r2, r3
   1334c:	bne	13440 <__assert_fail@plt+0x235c>
   13350:	add	sp, sp, #116	; 0x74
   13354:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13358:	orrs	r1, r2, r3
   1335c:	beq	1325c <__assert_fail@plt+0x2178>
   13360:	ldrd	r0, [r4, #32]
   13364:	bl	14158 <__assert_fail@plt+0x3074>
   13368:	cmp	r0, #0
   1336c:	bgt	1338c <__assert_fail@plt+0x22a8>
   13370:	b	1325c <__assert_fail@plt+0x2178>
   13374:	ldrd	r0, [r4, #32]
   13378:	add	r9, r9, #1
   1337c:	ldrd	r2, [r4, #56]	; 0x38
   13380:	bl	14158 <__assert_fail@plt+0x3074>
   13384:	cmp	r9, r0
   13388:	bge	1325c <__assert_fail@plt+0x2178>
   1338c:	mov	r0, r7
   13390:	mov	r1, r9
   13394:	add	r2, sp, #16
   13398:	bl	1103c <gelf_getrel@plt>
   1339c:	subs	ip, r0, #0
   133a0:	beq	13408 <__assert_fail@plt+0x2324>
   133a4:	ldr	r3, [ip, #12]
   133a8:	ldr	r1, [ip, #8]
   133ac:	cmp	r8, r3
   133b0:	bne	13374 <__assert_fail@plt+0x2290>
   133b4:	mov	r0, r6
   133b8:	bl	13f1c <__assert_fail@plt+0x2e38>
   133bc:	cmp	r0, #0
   133c0:	beq	13374 <__assert_fail@plt+0x2290>
   133c4:	b	13334 <__assert_fail@plt+0x2250>
   133c8:	mov	r2, #5
   133cc:	movw	r1, #20184	; 0x4ed8
   133d0:	movt	r1, #1
   133d4:	bl	10ed4 <dcgettext@plt>
   133d8:	mov	r6, r0
   133dc:	mov	r0, r5
   133e0:	bl	11054 <elf_ndxscn@plt>
   133e4:	mov	r5, r0
   133e8:	mvn	r0, #0
   133ec:	bl	10fac <elf_errmsg@plt>
   133f0:	mov	r2, r6
   133f4:	mov	r3, r5
   133f8:	mov	r1, r4
   133fc:	str	r0, [sp]
   13400:	mov	r0, #2
   13404:	bl	10f64 <error@plt>
   13408:	mov	r2, #5
   1340c:	movw	r1, #20272	; 0x4f30
   13410:	movt	r1, #1
   13414:	str	ip, [sp, #12]
   13418:	bl	10ed4 <dcgettext@plt>
   1341c:	mov	r4, r0
   13420:	mvn	r0, #0
   13424:	bl	10fac <elf_errmsg@plt>
   13428:	ldr	ip, [sp, #12]
   1342c:	mov	r2, r4
   13430:	mov	r1, ip
   13434:	mov	r3, r0
   13438:	mov	r0, #2
   1343c:	bl	10f64 <error@plt>
   13440:	bl	10eec <__stack_chk_fail@plt>
   13444:	mov	r2, #5
   13448:	movw	r1, #20232	; 0x4f08
   1344c:	movt	r1, #1
   13450:	bl	10ed4 <dcgettext@plt>
   13454:	mov	r6, r0
   13458:	mov	r0, r5
   1345c:	bl	11054 <elf_ndxscn@plt>
   13460:	mov	r4, r0
   13464:	mvn	r0, #0
   13468:	bl	10fac <elf_errmsg@plt>
   1346c:	mov	r2, r6
   13470:	mov	r3, r4
   13474:	mov	r1, r7
   13478:	str	r0, [sp]
   1347c:	mov	r0, #2
   13480:	bl	10f64 <error@plt>
   13484:	cmp	r0, #256	; 0x100
   13488:	push	{r4, r5, r6, lr}
   1348c:	mov	r4, r1
   13490:	beq	13528 <__assert_fail@plt+0x2444>
   13494:	bgt	134c0 <__assert_fail@plt+0x23dc>
   13498:	cmp	r0, #108	; 0x6c
   1349c:	beq	13510 <__assert_fail@plt+0x242c>
   134a0:	cmp	r0, #113	; 0x71
   134a4:	bne	134f0 <__assert_fail@plt+0x240c>
   134a8:	movw	r3, #28956	; 0x711c
   134ac:	movt	r3, #2
   134b0:	mov	r2, #1
   134b4:	mov	r0, #0
   134b8:	strb	r2, [r3]
   134bc:	pop	{r4, r5, r6, pc}
   134c0:	movw	r3, #257	; 0x101
   134c4:	cmp	r0, r3
   134c8:	beq	134f8 <__assert_fail@plt+0x2414>
   134cc:	add	r3, r3, #1
   134d0:	cmp	r0, r3
   134d4:	bne	134f0 <__assert_fail@plt+0x240c>
   134d8:	movw	r3, #28956	; 0x711c
   134dc:	movt	r3, #2
   134e0:	mov	r2, #1
   134e4:	mov	r0, #0
   134e8:	strb	r2, [r3, #9]
   134ec:	pop	{r4, r5, r6, pc}
   134f0:	mov	r0, #7
   134f4:	pop	{r4, r5, r6, pc}
   134f8:	movw	r3, #28956	; 0x711c
   134fc:	movt	r3, #2
   13500:	mov	r2, #1
   13504:	mov	r0, #0
   13508:	strb	r2, [r3, #8]
   1350c:	pop	{r4, r5, r6, pc}
   13510:	movw	r3, #28956	; 0x711c
   13514:	movt	r3, #2
   13518:	mov	r2, #1
   1351c:	mov	r0, #0
   13520:	strb	r2, [r3, #1]
   13524:	pop	{r4, r5, r6, pc}
   13528:	movw	r1, #20300	; 0x4f4c
   1352c:	mov	r0, r4
   13530:	movt	r1, #1
   13534:	bl	10f34 <strcasecmp@plt>
   13538:	subs	r3, r0, #0
   1353c:	beq	1356c <__assert_fail@plt+0x2488>
   13540:	movw	r1, #20308	; 0x4f54
   13544:	mov	r0, r4
   13548:	movt	r1, #1
   1354c:	bl	10f34 <strcasecmp@plt>
   13550:	cmp	r0, #0
   13554:	bne	13580 <__assert_fail@plt+0x249c>
   13558:	movw	r3, #28956	; 0x711c
   1355c:	movt	r3, #2
   13560:	mov	r2, #1
   13564:	str	r2, [r3, #4]
   13568:	pop	{r4, r5, r6, pc}
   1356c:	movw	r2, #28956	; 0x711c
   13570:	movt	r2, #2
   13574:	mov	r0, r3
   13578:	str	r3, [r2, #4]
   1357c:	pop	{r4, r5, r6, pc}
   13580:	movw	r5, #28948	; 0x7114
   13584:	movt	r5, #2
   13588:	mov	r2, #5
   1358c:	movw	r1, #20316	; 0x4f5c
   13590:	mov	r0, #0
   13594:	movt	r1, #1
   13598:	ldr	r6, [r5]
   1359c:	bl	10ed4 <dcgettext@plt>
   135a0:	mov	r3, r4
   135a4:	mov	r1, #1
   135a8:	mov	r2, r0
   135ac:	mov	r0, r6
   135b0:	bl	1100c <__fprintf_chk@plt>
   135b4:	movw	r3, #28936	; 0x7108
   135b8:	movt	r3, #2
   135bc:	ldr	r1, [r5]
   135c0:	movw	r0, #28908	; 0x70ec
   135c4:	mov	r2, #4
   135c8:	movt	r0, #2
   135cc:	ldr	r3, [r3]
   135d0:	bl	10fd0 <argp_help@plt>
   135d4:	mov	r0, #1
   135d8:	bl	10fa0 <exit@plt>
   135dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   135e0:	mov	r2, #0
   135e4:	ldr	r3, [pc, #456]	; 137b4 <__assert_fail@plt+0x26d0>
   135e8:	ldr	fp, [pc, #456]	; 137b8 <__assert_fail@plt+0x26d4>
   135ec:	ldr	sl, [pc, #456]	; 137bc <__assert_fail@plt+0x26d8>
   135f0:	add	r3, pc, r3
   135f4:	ldr	r9, [pc, #452]	; 137c0 <__assert_fail@plt+0x26dc>
   135f8:	add	fp, pc, fp
   135fc:	add	sl, pc, sl
   13600:	str	r3, [r0, #20]
   13604:	add	r9, pc, r9
   13608:	str	fp, [r0, #24]
   1360c:	str	sl, [r0, #32]
   13610:	str	r9, [r0, #28]
   13614:	ldr	r8, [pc, #424]	; 137c4 <__assert_fail@plt+0x26e0>
   13618:	ldr	r7, [pc, #424]	; 137c8 <__assert_fail@plt+0x26e4>
   1361c:	ldr	r6, [pc, #424]	; 137cc <__assert_fail@plt+0x26e8>
   13620:	add	r8, pc, r8
   13624:	ldr	r5, [pc, #420]	; 137d0 <__assert_fail@plt+0x26ec>
   13628:	add	r7, pc, r7
   1362c:	ldr	r4, [pc, #416]	; 137d4 <__assert_fail@plt+0x26f0>
   13630:	add	r6, pc, r6
   13634:	ldr	ip, [pc, #412]	; 137d8 <__assert_fail@plt+0x26f4>
   13638:	add	r5, pc, r5
   1363c:	ldr	r1, [pc, #408]	; 137dc <__assert_fail@plt+0x26f8>
   13640:	add	r4, pc, r4
   13644:	ldr	r3, [pc, #404]	; 137e0 <__assert_fail@plt+0x26fc>
   13648:	add	ip, pc, ip
   1364c:	ldr	fp, [pc, #400]	; 137e4 <__assert_fail@plt+0x2700>
   13650:	add	r1, pc, r1
   13654:	ldr	sl, [pc, #396]	; 137e8 <__assert_fail@plt+0x2704>
   13658:	add	r3, pc, r3
   1365c:	ldr	r9, [pc, #392]	; 137ec <__assert_fail@plt+0x2708>
   13660:	add	fp, pc, fp
   13664:	add	sl, pc, sl
   13668:	str	r8, [r0, #36]	; 0x24
   1366c:	add	r9, pc, r9
   13670:	str	r7, [r0, #40]	; 0x28
   13674:	str	r6, [r0, #44]	; 0x2c
   13678:	str	r5, [r0, #48]	; 0x30
   1367c:	str	r4, [r0, #52]	; 0x34
   13680:	str	ip, [r0, #56]	; 0x38
   13684:	str	r1, [r0, #60]	; 0x3c
   13688:	str	r3, [r0, #64]	; 0x40
   1368c:	str	fp, [r0, #68]	; 0x44
   13690:	str	sl, [r0, #72]	; 0x48
   13694:	str	r9, [r0, #76]	; 0x4c
   13698:	ldr	r8, [pc, #336]	; 137f0 <__assert_fail@plt+0x270c>
   1369c:	ldr	r7, [pc, #336]	; 137f4 <__assert_fail@plt+0x2710>
   136a0:	ldr	r6, [pc, #336]	; 137f8 <__assert_fail@plt+0x2714>
   136a4:	add	r8, pc, r8
   136a8:	ldr	r5, [pc, #332]	; 137fc <__assert_fail@plt+0x2718>
   136ac:	add	r7, pc, r7
   136b0:	ldr	r4, [pc, #328]	; 13800 <__assert_fail@plt+0x271c>
   136b4:	add	r6, pc, r6
   136b8:	ldr	ip, [pc, #324]	; 13804 <__assert_fail@plt+0x2720>
   136bc:	add	r5, pc, r5
   136c0:	ldr	r1, [pc, #320]	; 13808 <__assert_fail@plt+0x2724>
   136c4:	add	r4, pc, r4
   136c8:	ldr	r3, [pc, #316]	; 1380c <__assert_fail@plt+0x2728>
   136cc:	add	ip, pc, ip
   136d0:	ldr	fp, [pc, #312]	; 13810 <__assert_fail@plt+0x272c>
   136d4:	add	r1, pc, r1
   136d8:	ldr	sl, [pc, #308]	; 13814 <__assert_fail@plt+0x2730>
   136dc:	add	r3, pc, r3
   136e0:	ldr	r9, [pc, #304]	; 13818 <__assert_fail@plt+0x2734>
   136e4:	add	fp, pc, fp
   136e8:	add	sl, pc, sl
   136ec:	str	r8, [r0, #80]	; 0x50
   136f0:	add	r9, pc, r9
   136f4:	str	r7, [r0, #84]	; 0x54
   136f8:	str	r6, [r0, #88]	; 0x58
   136fc:	str	r5, [r0, #92]	; 0x5c
   13700:	str	r4, [r0, #96]	; 0x60
   13704:	str	ip, [r0, #112]	; 0x70
   13708:	str	r1, [r0, #100]	; 0x64
   1370c:	str	r3, [r0, #116]	; 0x74
   13710:	str	fp, [r0, #120]	; 0x78
   13714:	str	sl, [r0, #124]	; 0x7c
   13718:	str	r9, [r0, #128]	; 0x80
   1371c:	ldr	r8, [pc, #248]	; 1381c <__assert_fail@plt+0x2738>
   13720:	ldr	r7, [pc, #248]	; 13820 <__assert_fail@plt+0x273c>
   13724:	ldr	r6, [pc, #248]	; 13824 <__assert_fail@plt+0x2740>
   13728:	add	r8, pc, r8
   1372c:	ldr	r5, [pc, #244]	; 13828 <__assert_fail@plt+0x2744>
   13730:	add	r7, pc, r7
   13734:	ldr	r4, [pc, #240]	; 1382c <__assert_fail@plt+0x2748>
   13738:	add	r6, pc, r6
   1373c:	ldr	ip, [pc, #236]	; 13830 <__assert_fail@plt+0x274c>
   13740:	add	r5, pc, r5
   13744:	ldr	r1, [pc, #232]	; 13834 <__assert_fail@plt+0x2750>
   13748:	add	r4, pc, r4
   1374c:	ldr	r3, [pc, #228]	; 13838 <__assert_fail@plt+0x2754>
   13750:	add	ip, pc, ip
   13754:	ldr	fp, [pc, #224]	; 1383c <__assert_fail@plt+0x2758>
   13758:	add	r1, pc, r1
   1375c:	ldr	sl, [pc, #220]	; 13840 <__assert_fail@plt+0x275c>
   13760:	add	r3, pc, r3
   13764:	ldr	r9, [pc, #216]	; 13844 <__assert_fail@plt+0x2760>
   13768:	add	fp, pc, fp
   1376c:	add	sl, pc, sl
   13770:	str	r8, [r0, #132]	; 0x84
   13774:	add	r9, pc, r9
   13778:	str	r7, [r0, #136]	; 0x88
   1377c:	str	r6, [r0, #140]	; 0x8c
   13780:	str	r5, [r0, #144]	; 0x90
   13784:	str	r4, [r0, #148]	; 0x94
   13788:	str	ip, [r0, #152]	; 0x98
   1378c:	str	r1, [r0, #156]	; 0x9c
   13790:	str	r3, [r0, #104]	; 0x68
   13794:	mov	r3, #4
   13798:	str	fp, [r0, #108]	; 0x6c
   1379c:	str	sl, [r0, #164]	; 0xa4
   137a0:	str	r9, [r0, #188]	; 0xbc
   137a4:	str	r2, [r0, #160]	; 0xa0
   137a8:	str	r3, [r0, #192]	; 0xc0
   137ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   137b0:	bx	lr
   137b4:	andeq	r0, r0, r0, asr r2
   137b8:	andeq	r0, r0, r0, asr r2
   137bc:	andeq	r0, r0, r4, asr r2
   137c0:	andeq	r0, r0, r4, asr r2
   137c4:	andeq	r0, r0, r0, asr #4
   137c8:	andeq	r0, r0, r0, asr #4
   137cc:	andeq	r0, r0, r0, asr #4
   137d0:	andeq	r0, r0, r0, asr #4
   137d4:	andeq	r0, r0, r0, asr #4
   137d8:	andeq	r0, r0, r0, asr #4
   137dc:	andeq	r0, r0, r4, asr #4
   137e0:	andeq	r0, r0, ip, asr #4
   137e4:	andeq	r0, r0, ip, asr #4
   137e8:	andeq	r0, r0, r0, asr r2
   137ec:	andeq	r0, r0, r0, asr r2
   137f0:	andeq	r0, r0, r0, lsr #4
   137f4:	andeq	r0, r0, r4, lsr #4
   137f8:	andeq	r0, r0, r4, lsr #4
   137fc:	andeq	r0, r0, r4, lsr r2
   13800:	andeq	r0, r0, r4, lsr #4
   13804:	andeq	r0, r0, r4, lsl r2
   13808:	andeq	r0, r0, r4, lsr #4
   1380c:	andeq	r0, r0, ip, lsr r3
   13810:	andeq	r0, r0, ip, lsl r2
   13814:	andeq	r0, r0, r8, lsl r2
   13818:	andeq	r0, r0, r0, lsl r2
   1381c:	andeq	r0, r0, r0, ror #3
   13820:	andeq	r0, r0, r0, ror #3
   13824:	andeq	r0, r0, r0, ror #3
   13828:	andeq	r0, r0, r0, ror #3
   1382c:	andeq	r0, r0, r0, ror #3
   13830:	andeq	r0, r0, r8, asr #4
   13834:	ldrdeq	r0, [r0], -r8
   13838:	andeq	r0, r0, ip, lsl #4
   1383c:	andeq	r0, r0, r0, lsr #4
   13840:	andeq	r0, r0, r4, lsr #4
   13844:	andeq	r0, r0, r8, asr r1
   13848:	mov	r0, #0
   1384c:	bx	lr
   13850:	mov	r0, #0
   13854:	bx	lr
   13858:	mov	r0, #0
   1385c:	bx	lr
   13860:	mov	r0, #27
   13864:	bx	lr
   13868:	mov	r0, #0
   1386c:	bx	lr
   13870:	mov	r0, #0
   13874:	bx	lr
   13878:	mov	r0, #0
   1387c:	bx	lr
   13880:	mov	r0, #0
   13884:	bx	lr
   13888:	mov	r0, #0
   1388c:	bx	lr
   13890:	rsbs	r0, r0, #1
   13894:	movcc	r0, #0
   13898:	bx	lr
   1389c:	orrs	r1, r0, r1
   138a0:	movne	r0, #0
   138a4:	moveq	r0, #1
   138a8:	bx	lr
   138ac:	mov	r0, #0
   138b0:	bx	lr
   138b4:	mov	r0, #0
   138b8:	bx	lr
   138bc:	mov	r0, #0
   138c0:	bx	lr
   138c4:	mov	r0, #0
   138c8:	bx	lr
   138cc:	mov	r0, #0
   138d0:	bx	lr
   138d4:	bx	lr
   138d8:	mov	r0, #0
   138dc:	bx	lr
   138e0:	mov	r0, #0
   138e4:	bx	lr
   138e8:	mov	r0, #0
   138ec:	bx	lr
   138f0:	mov	r0, #0
   138f4:	bx	lr
   138f8:	mov	r0, #0
   138fc:	bx	lr
   13900:	mov	r0, #0
   13904:	bx	lr
   13908:	mov	r0, #0
   1390c:	bx	lr
   13910:	mov	r0, #0
   13914:	bx	lr
   13918:	mov	r0, #0
   1391c:	bx	lr
   13920:	mov	r0, #0
   13924:	bx	lr
   13928:	mov	r0, #0
   1392c:	bx	lr
   13930:	mvn	r0, #1
   13934:	bx	lr
   13938:	push	{r4}		; (str r4, [sp, #-4]!)
   1393c:	mvn	ip, #0
   13940:	ldr	r4, [sp, #4]
   13944:	mov	r0, ip
   13948:	str	ip, [r3]
   1394c:	str	ip, [r2]
   13950:	str	ip, [r1]
   13954:	str	ip, [r4]
   13958:	str	ip, [r4, #4]
   1395c:	str	ip, [r4, #8]
   13960:	str	ip, [r4, #12]
   13964:	str	ip, [r4, #16]
   13968:	str	ip, [r4, #20]
   1396c:	pop	{r4}		; (ldr r4, [sp], #4)
   13970:	bx	lr
   13974:	ldr	r1, [sp, #8]
   13978:	mov	r3, #0
   1397c:	ldr	r2, [sp, #12]
   13980:	mov	r0, r3
   13984:	str	r3, [r1]
   13988:	str	r3, [r2]
   1398c:	bx	lr
   13990:	mov	r0, #0
   13994:	bx	lr
   13998:	mvn	r0, #0
   1399c:	bx	lr
   139a0:	subs	r0, r2, #0
   139a4:	push	{r4, r5, r6, r7, r8, r9, sl}
   139a8:	mov	r7, r1
   139ac:	ldr	r2, [sp, #28]
   139b0:	ldr	r6, [sp, #32]
   139b4:	ldr	r5, [sp, #36]	; 0x24
   139b8:	ldr	r4, [sp, #40]	; 0x28
   139bc:	beq	13a0c <__assert_fail@plt+0x2928>
   139c0:	ldr	sl, [pc, #76]	; 13a14 <__assert_fail@plt+0x2930>
   139c4:	mvn	ip, #0
   139c8:	ldr	r9, [pc, #72]	; 13a18 <__assert_fail@plt+0x2934>
   139cc:	mov	r1, r3
   139d0:	ldr	r8, [pc, #68]	; 13a1c <__assert_fail@plt+0x2938>
   139d4:	add	sl, pc, sl
   139d8:	str	r7, [sp, #32]
   139dc:	add	r9, pc, r9
   139e0:	str	sl, [r6]
   139e4:	add	r8, pc, r8
   139e8:	str	r9, [r2]
   139ec:	mov	r6, #0
   139f0:	str	ip, [r5]
   139f4:	mov	r3, ip
   139f8:	str	r8, [sp, #28]
   139fc:	mov	r2, #1
   13a00:	str	r6, [r4]
   13a04:	pop	{r4, r5, r6, r7, r8, r9, sl}
   13a08:	b	110cc <__snprintf_chk@plt>
   13a0c:	pop	{r4, r5, r6, r7, r8, r9, sl}
   13a10:	bx	lr
   13a14:	strdeq	r1, [r0], -ip
   13a18:	muleq	r0, ip, r4
   13a1c:	strdeq	r1, [r0], -r0
   13a20:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13a24:	add	r8, r0, #2
   13a28:	ldr	r9, [pc, #112]	; 13aa0 <__assert_fail@plt+0x29bc>
   13a2c:	mov	r6, r0
   13a30:	ldr	r7, [pc, #108]	; 13aa4 <__assert_fail@plt+0x29c0>
   13a34:	add	r9, pc, r9
   13a38:	sub	r4, r9, #4
   13a3c:	add	r7, pc, r7
   13a40:	add	r9, r9, #108	; 0x6c
   13a44:	ldr	r5, [r4, #4]!
   13a48:	mov	r0, r6
   13a4c:	mov	r1, r5
   13a50:	bl	10ea4 <strcmp@plt>
   13a54:	mov	r1, r7
   13a58:	mov	r2, #7
   13a5c:	cmp	r0, #0
   13a60:	mov	r0, r6
   13a64:	beq	13a98 <__assert_fail@plt+0x29b4>
   13a68:	bl	11090 <strncmp@plt>
   13a6c:	add	r1, r5, #1
   13a70:	cmp	r0, #0
   13a74:	mov	r0, r8
   13a78:	bne	13a88 <__assert_fail@plt+0x29a4>
   13a7c:	bl	10ea4 <strcmp@plt>
   13a80:	cmp	r0, #0
   13a84:	beq	13a98 <__assert_fail@plt+0x29b4>
   13a88:	cmp	r4, r9
   13a8c:	bne	13a44 <__assert_fail@plt+0x2960>
   13a90:	mov	r0, #0
   13a94:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13a98:	mov	r0, #1
   13a9c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13aa0:	strdeq	r2, [r1], -ip
   13aa4:	andeq	r1, r0, r0, lsr #25
   13aa8:	ldr	r3, [pc, #860]	; 13e0c <__assert_fail@plt+0x2d28>
   13aac:	ldr	ip, [pc, #860]	; 13e10 <__assert_fail@plt+0x2d2c>
   13ab0:	add	r3, pc, r3
   13ab4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ab8:	sub	sp, sp, #148	; 0x94
   13abc:	ldr	ip, [r3, ip]
   13ac0:	mov	r6, r0
   13ac4:	mov	r9, r1
   13ac8:	mov	r0, #1
   13acc:	mov	r1, #232	; 0xe8
   13ad0:	mov	r7, r2
   13ad4:	ldr	r3, [ip]
   13ad8:	str	ip, [sp, #8]
   13adc:	str	r3, [sp, #140]	; 0x8c
   13ae0:	bl	10e74 <calloc@plt>
   13ae4:	subs	r5, r0, #0
   13ae8:	beq	13cbc <__assert_fail@plt+0x2bd8>
   13aec:	ldr	r8, [pc, #800]	; 13e14 <__assert_fail@plt+0x2d30>
   13af0:	bl	135dc <__assert_fail@plt+0x24f8>
   13af4:	mov	r4, #0
   13af8:	add	r8, pc, r8
   13afc:	add	r8, r8, #128	; 0x80
   13b00:	b	13b2c <__assert_fail@plt+0x2a48>
   13b04:	ldr	sl, [r8, #-12]
   13b08:	mov	r0, r9
   13b0c:	mov	r1, sl
   13b10:	bl	10ea4 <strcmp@plt>
   13b14:	cmp	r0, #0
   13b18:	beq	13b5c <__assert_fail@plt+0x2a78>
   13b1c:	add	r4, r4, #1
   13b20:	add	r8, r8, #28
   13b24:	cmp	r4, #76	; 0x4c
   13b28:	beq	13d30 <__assert_fail@plt+0x2c4c>
   13b2c:	cmp	r9, #0
   13b30:	bne	13b04 <__assert_fail@plt+0x2a20>
   13b34:	ldr	r3, [r8]
   13b38:	cmp	r3, r7
   13b3c:	bne	13b1c <__assert_fail@plt+0x2a38>
   13b40:	lsl	r9, r4, #3
   13b44:	ldr	r3, [pc, #716]	; 13e18 <__assert_fail@plt+0x2d34>
   13b48:	rsb	r2, r4, r9
   13b4c:	add	r3, pc, r3
   13b50:	add	r3, r3, r2, lsl #2
   13b54:	ldr	sl, [r3, #116]	; 0x74
   13b58:	b	13b60 <__assert_fail@plt+0x2a7c>
   13b5c:	lsl	r9, r4, #3
   13b60:	cmp	r6, #0
   13b64:	str	sl, [r5, #4]
   13b68:	beq	13d58 <__assert_fail@plt+0x2c74>
   13b6c:	ldr	r3, [r6, #56]	; 0x38
   13b70:	ldrh	r3, [r3, #18]
   13b74:	str	r3, [r5, #8]
   13b78:	ldr	r3, [r6, #56]	; 0x38
   13b7c:	ldrb	r3, [r3, #4]
   13b80:	strb	r3, [r5, #12]
   13b84:	ldr	r3, [r6, #56]	; 0x38
   13b88:	ldrb	r3, [r3, #5]
   13b8c:	strb	r3, [r5, #13]
   13b90:	ldr	sl, [pc, #644]	; 13e1c <__assert_fail@plt+0x2d38>
   13b94:	add	r8, sp, #40	; 0x28
   13b98:	ldr	ip, [pc, #640]	; 13e20 <__assert_fail@plt+0x2d3c>
   13b9c:	rsb	fp, r4, r9
   13ba0:	add	sl, pc, sl
   13ba4:	mov	lr, r8
   13ba8:	add	ip, pc, ip
   13bac:	ldm	sl!, {r0, r1, r2, r3}
   13bb0:	add	fp, ip, fp, lsl #2
   13bb4:	str	fp, [sp, #12]
   13bb8:	ldr	fp, [pc, #612]	; 13e24 <__assert_fail@plt+0x2d40>
   13bbc:	stmia	lr!, {r0, r1, r2, r3}
   13bc0:	add	fp, pc, fp
   13bc4:	ldm	sl!, {r0, r1, r2, r3}
   13bc8:	str	fp, [sp]
   13bcc:	ldr	fp, [sp, #12]
   13bd0:	ldr	sl, [sl]
   13bd4:	ldr	ip, [fp, #112]	; 0x70
   13bd8:	stmia	lr!, {r0, r1, r2, r3}
   13bdc:	mov	r2, #68	; 0x44
   13be0:	mov	r1, ip
   13be4:	strb	sl, [lr]
   13be8:	add	r0, sp, #72	; 0x48
   13bec:	str	ip, [sp, #4]
   13bf0:	bl	10f40 <__stpcpy_chk@plt>
   13bf4:	ldr	fp, [sp]
   13bf8:	mov	r1, #1
   13bfc:	mov	r3, r0
   13c00:	ldr	r0, [fp]
   13c04:	str	r0, [r3]
   13c08:	mov	r0, r8
   13c0c:	bl	10f4c <dlopen@plt>
   13c10:	ldr	ip, [sp, #4]
   13c14:	subs	sl, r0, #0
   13c18:	beq	13d80 <__assert_fail@plt+0x2c9c>
   13c1c:	ldr	r3, [pc, #516]	; 13e28 <__assert_fail@plt+0x2d44>
   13c20:	rsb	r4, r4, r9
   13c24:	add	r3, pc, r3
   13c28:	add	r4, r3, r4, lsl #2
   13c2c:	ldr	r2, [r4, #124]	; 0x7c
   13c30:	cmp	r2, #16
   13c34:	bgt	13dd0 <__assert_fail@plt+0x2cec>
   13c38:	ldr	r8, [r4, #120]	; 0x78
   13c3c:	add	r4, sp, #16
   13c40:	mov	r3, #22
   13c44:	mov	r0, r4
   13c48:	mov	r1, r8
   13c4c:	bl	110d8 <__mempcpy_chk@plt>
   13c50:	ldr	r2, [pc, #468]	; 13e2c <__assert_fail@plt+0x2d48>
   13c54:	mov	r1, r4
   13c58:	add	r2, pc, r2
   13c5c:	mov	r3, r0
   13c60:	ldr	r0, [r2]
   13c64:	ldrh	r2, [r2, #4]
   13c68:	str	r0, [r3]
   13c6c:	mov	r0, sl
   13c70:	strh	r2, [r3, #4]
   13c74:	bl	110c0 <dlsym@plt>
   13c78:	subs	ip, r0, #0
   13c7c:	beq	13c9c <__assert_fail@plt+0x2bb8>
   13c80:	mov	r1, r7
   13c84:	mov	r0, r6
   13c88:	mov	r2, r5
   13c8c:	mov	r3, #232	; 0xe8
   13c90:	blx	ip
   13c94:	subs	r1, r0, #0
   13c98:	bne	13cdc <__assert_fail@plt+0x2bf8>
   13c9c:	mov	r0, sl
   13ca0:	bl	10ef8 <dlclose@plt>
   13ca4:	mov	r3, #0
   13ca8:	str	r6, [r5, #16]
   13cac:	str	r8, [r5]
   13cb0:	mov	r0, r5
   13cb4:	str	r3, [r5, #228]	; 0xe4
   13cb8:	bl	135dc <__assert_fail@plt+0x24f8>
   13cbc:	ldr	fp, [sp, #8]
   13cc0:	mov	r0, r5
   13cc4:	ldr	r2, [sp, #140]	; 0x8c
   13cc8:	ldr	r3, [fp]
   13ccc:	cmp	r2, r3
   13cd0:	bne	13dcc <__assert_fail@plt+0x2ce8>
   13cd4:	add	sp, sp, #148	; 0x94
   13cd8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13cdc:	ldr	r4, [pc, #332]	; 13e30 <__assert_fail@plt+0x2d4c>
   13ce0:	add	r4, pc, r4
   13ce4:	add	r0, r4, #12
   13ce8:	bl	10ea4 <strcmp@plt>
   13cec:	cmp	r0, #0
   13cf0:	bne	13c9c <__assert_fail@plt+0x2bb8>
   13cf4:	ldr	r3, [r5]
   13cf8:	str	sl, [r5, #228]	; 0xe4
   13cfc:	cmp	r3, #0
   13d00:	str	r6, [r5, #16]
   13d04:	beq	13df0 <__assert_fail@plt+0x2d0c>
   13d08:	ldr	r3, [r5, #188]	; 0xbc
   13d0c:	cmp	r3, #0
   13d10:	bne	13cbc <__assert_fail@plt+0x2bd8>
   13d14:	ldr	r0, [pc, #280]	; 13e34 <__assert_fail@plt+0x2d50>
   13d18:	mov	r3, r4
   13d1c:	ldr	r1, [pc, #276]	; 13e38 <__assert_fail@plt+0x2d54>
   13d20:	movw	r2, #365	; 0x16d
   13d24:	add	r0, pc, r0
   13d28:	add	r1, pc, r1
   13d2c:	bl	110e4 <__assert_fail@plt>
   13d30:	ldr	r3, [pc, #260]	; 13e3c <__assert_fail@plt+0x2d58>
   13d34:	mov	r2, #0
   13d38:	str	r6, [r5, #16]
   13d3c:	mov	r0, r5
   13d40:	add	r3, pc, r3
   13d44:	str	r2, [r5, #228]	; 0xe4
   13d48:	str	r3, [r5, #4]
   13d4c:	str	r3, [r5]
   13d50:	bl	135dc <__assert_fail@plt+0x24f8>
   13d54:	b	13cbc <__assert_fail@plt+0x2bd8>
   13d58:	ldr	r3, [pc, #224]	; 13e40 <__assert_fail@plt+0x2d5c>
   13d5c:	rsb	r2, r4, r9
   13d60:	add	r3, pc, r3
   13d64:	add	r3, r3, r2, lsl #2
   13d68:	add	r1, r3, #128	; 0x80
   13d6c:	ldm	r1, {r1, r2, r3}
   13d70:	str	r1, [r5, #8]
   13d74:	strb	r2, [r5, #12]
   13d78:	strb	r3, [r5, #13]
   13d7c:	b	13b90 <__assert_fail@plt+0x2aac>
   13d80:	ldr	r3, [pc, #188]	; 13e44 <__assert_fail@plt+0x2d60>
   13d84:	mov	r2, #93	; 0x5d
   13d88:	add	r3, pc, r3
   13d8c:	ldm	r3, {r0, r1}
   13d90:	stm	r8, {r0, r1}
   13d94:	mov	r1, ip
   13d98:	add	r0, sp, #47	; 0x2f
   13d9c:	bl	10f40 <__stpcpy_chk@plt>
   13da0:	mov	r1, #1
   13da4:	mov	r3, r0
   13da8:	ldr	r0, [fp]
   13dac:	str	r0, [r3]
   13db0:	mov	r0, r8
   13db4:	bl	10f4c <dlopen@plt>
   13db8:	subs	sl, r0, #0
   13dbc:	bne	13c1c <__assert_fail@plt+0x2b38>
   13dc0:	ldr	ip, [sp, #12]
   13dc4:	ldr	r8, [ip, #120]	; 0x78
   13dc8:	b	13ca4 <__assert_fail@plt+0x2bc0>
   13dcc:	bl	10eec <__stack_chk_fail@plt>
   13dd0:	ldr	r0, [pc, #112]	; 13e48 <__assert_fail@plt+0x2d64>
   13dd4:	mov	r2, #348	; 0x15c
   13dd8:	ldr	r1, [pc, #108]	; 13e4c <__assert_fail@plt+0x2d68>
   13ddc:	ldr	r3, [pc, #108]	; 13e50 <__assert_fail@plt+0x2d6c>
   13de0:	add	r0, pc, r0
   13de4:	add	r1, pc, r1
   13de8:	add	r3, pc, r3
   13dec:	bl	110e4 <__assert_fail@plt>
   13df0:	ldr	r0, [pc, #92]	; 13e54 <__assert_fail@plt+0x2d70>
   13df4:	mov	r3, r4
   13df8:	ldr	r1, [pc, #88]	; 13e58 <__assert_fail@plt+0x2d74>
   13dfc:	mov	r2, #364	; 0x16c
   13e00:	add	r0, pc, r0
   13e04:	add	r1, pc, r1
   13e08:	bl	110e4 <__assert_fail@plt>
   13e0c:	andeq	r3, r1, r8, asr #10
   13e10:	andeq	r0, r0, r0, ror #1
   13e14:	andeq	r2, r1, r8, lsr fp
   13e18:	andeq	r2, r1, r4, ror #21
   13e1c:	andeq	r1, r0, r4, asr #22
   13e20:	andeq	r2, r1, r8, lsl #21
   13e24:	andeq	r1, r0, r8, asr #22
   13e28:	andeq	r2, r1, ip, lsl #20
   13e2c:	strdeq	r1, [r0], -r0
   13e30:			; <UNDEFINED> instruction: 0x000019b4
   13e34:	andeq	r1, r0, r8, asr #20
   13e38:	andeq	r1, r0, ip, lsl #20
   13e3c:	andeq	r1, r0, ip, asr #20
   13e40:	ldrdeq	r2, [r1], -r0
   13e44:	andeq	r1, r0, r4, lsl #19
   13e48:	andeq	r1, r0, r4, lsr r9
   13e4c:	andeq	r1, r0, r0, asr r9
   13e50:	andeq	r1, r0, ip, lsr #17
   13e54:	andeq	r1, r0, r0, asr r9
   13e58:	andeq	r1, r0, r0, lsr r9
   13e5c:	ldr	r3, [pc, #96]	; 13ec4 <__assert_fail@plt+0x2de0>
   13e60:	ldr	r2, [pc, #96]	; 13ec8 <__assert_fail@plt+0x2de4>
   13e64:	add	r3, pc, r3
   13e68:	push	{r4, r5, lr}
   13e6c:	sub	sp, sp, #76	; 0x4c
   13e70:	ldr	r4, [r3, r2]
   13e74:	mov	r5, r0
   13e78:	mov	r1, sp
   13e7c:	ldr	r3, [r4]
   13e80:	str	r3, [sp, #68]	; 0x44
   13e84:	bl	10e80 <gelf_getehdr@plt>
   13e88:	subs	r3, r0, #0
   13e8c:	beq	13eb8 <__assert_fail@plt+0x2dd4>
   13e90:	mov	r0, r5
   13e94:	ldrh	r2, [r3, #18]
   13e98:	mov	r1, #0
   13e9c:	bl	13aa8 <__assert_fail@plt+0x29c4>
   13ea0:	ldr	r2, [sp, #68]	; 0x44
   13ea4:	ldr	r3, [r4]
   13ea8:	cmp	r2, r3
   13eac:	bne	13ec0 <__assert_fail@plt+0x2ddc>
   13eb0:	add	sp, sp, #76	; 0x4c
   13eb4:	pop	{r4, r5, pc}
   13eb8:	mov	r0, r3
   13ebc:	b	13ea0 <__assert_fail@plt+0x2dbc>
   13ec0:	bl	10eec <__stack_chk_fail@plt>
   13ec4:	muleq	r1, r4, r1
   13ec8:	andeq	r0, r0, r0, ror #1
   13ecc:	mov	r2, r0
   13ed0:	mov	r0, #0
   13ed4:	mov	r1, r0
   13ed8:	b	13aa8 <__assert_fail@plt+0x29c4>
   13edc:	mov	r1, r0
   13ee0:	mov	r0, #0
   13ee4:	mov	r2, r0
   13ee8:	b	13aa8 <__assert_fail@plt+0x29c4>
   13eec:	push	{r4, lr}
   13ef0:	subs	r4, r0, #0
   13ef4:	popeq	{r4, pc}
   13ef8:	ldr	r3, [r4, #188]	; 0xbc
   13efc:	blx	r3
   13f00:	ldr	r0, [r4, #228]	; 0xe4
   13f04:	cmp	r0, #0
   13f08:	beq	13f10 <__assert_fail@plt+0x2e2c>
   13f0c:	bl	10ef8 <dlclose@plt>
   13f10:	mov	r0, r4
   13f14:	pop	{r4, lr}
   13f18:	b	10ebc <free@plt>
   13f1c:	push	{r3, lr}
   13f20:	ldr	r3, [r0, #120]	; 0x78
   13f24:	mov	r0, r1
   13f28:	blx	r3
   13f2c:	pop	{r3, pc}
   13f30:	ldr	ip, [pc, #348]	; 14094 <__assert_fail@plt+0x2fb0>
   13f34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13f38:	add	ip, pc, ip
   13f3c:	ldr	r4, [pc, #340]	; 14098 <__assert_fail@plt+0x2fb4>
   13f40:	sub	sp, sp, #88	; 0x58
   13f44:	mov	sl, r2
   13f48:	mov	r9, r1
   13f4c:	ldrb	r2, [sp, #120]	; 0x78
   13f50:	mov	r1, ip
   13f54:	ldr	r8, [ip, r4]
   13f58:	mov	r5, r0
   13f5c:	cmp	r2, #0
   13f60:	ldr	r1, [r8]
   13f64:	str	r1, [sp, #84]	; 0x54
   13f68:	bne	1401c <__assert_fail@plt+0x2f38>
   13f6c:	ldrd	r4, [r9, #8]
   13f70:	mov	r6, #2
   13f74:	mov	r7, #0
   13f78:	and	r4, r4, r6
   13f7c:	and	r5, r5, r7
   13f80:	orrs	r1, r4, r5
   13f84:	beq	13fa8 <__assert_fail@plt+0x2ec4>
   13f88:	mov	sl, r2
   13f8c:	ldr	r1, [sp, #84]	; 0x54
   13f90:	mov	r0, sl
   13f94:	ldr	r3, [r8]
   13f98:	cmp	r1, r3
   13f9c:	bne	14018 <__assert_fail@plt+0x2f34>
   13fa0:	add	sp, sp, #88	; 0x58
   13fa4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13fa8:	ldr	r4, [r9, #4]
   13fac:	cmp	r4, #7
   13fb0:	beq	13f88 <__assert_fail@plt+0x2ea4>
   13fb4:	cmp	r4, #1
   13fb8:	movne	sl, #1
   13fbc:	bne	13f8c <__assert_fail@plt+0x2ea8>
   13fc0:	cmp	sl, #0
   13fc4:	beq	13f8c <__assert_fail@plt+0x2ea8>
   13fc8:	ldr	r1, [pc, #204]	; 1409c <__assert_fail@plt+0x2fb8>
   13fcc:	mov	r0, sl
   13fd0:	mov	r2, #13
   13fd4:	str	r3, [sp, #4]
   13fd8:	add	r1, pc, r1
   13fdc:	bl	11090 <strncmp@plt>
   13fe0:	ldr	r3, [sp, #4]
   13fe4:	cmp	r0, #0
   13fe8:	moveq	sl, r0
   13fec:	beq	13f8c <__assert_fail@plt+0x2ea8>
   13ff0:	cmp	r3, #0
   13ff4:	movne	sl, r4
   13ff8:	bne	13f8c <__assert_fail@plt+0x2ea8>
   13ffc:	ldr	r1, [pc, #156]	; 140a0 <__assert_fail@plt+0x2fbc>
   14000:	mov	r0, sl
   14004:	add	r1, pc, r1
   14008:	bl	10ea4 <strcmp@plt>
   1400c:	adds	sl, r0, #0
   14010:	movne	sl, #1
   14014:	b	13f8c <__assert_fail@plt+0x2ea8>
   14018:	bl	10eec <__stack_chk_fail@plt>
   1401c:	mov	r1, sl
   14020:	bl	140a4 <__assert_fail@plt+0x2fc0>
   14024:	subs	sl, r0, #0
   14028:	bne	13f8c <__assert_fail@plt+0x2ea8>
   1402c:	ldr	r3, [r9, #4]
   14030:	cmp	r3, #4
   14034:	cmpne	r3, #9
   14038:	bne	13f8c <__assert_fail@plt+0x2ea8>
   1403c:	ldr	r1, [r9, #44]	; 0x2c
   14040:	ldr	r0, [r5, #16]
   14044:	bl	11060 <elf_getscn@plt>
   14048:	add	r1, sp, #16
   1404c:	bl	10e98 <gelf_getshdr@plt>
   14050:	subs	r4, r0, #0
   14054:	beq	13f8c <__assert_fail@plt+0x2ea8>
   14058:	ldr	r0, [r5, #16]
   1405c:	add	r1, sp, #12
   14060:	bl	110b4 <elf_getshdrstrndx@plt>
   14064:	cmp	r0, #0
   14068:	bne	13f8c <__assert_fail@plt+0x2ea8>
   1406c:	ldr	r1, [sp, #12]
   14070:	ldr	r2, [r4]
   14074:	ldr	r0, [r5, #16]
   14078:	bl	10f1c <elf_strptr@plt>
   1407c:	subs	r1, r0, #0
   14080:	beq	13f8c <__assert_fail@plt+0x2ea8>
   14084:	mov	r0, r5
   14088:	bl	140a4 <__assert_fail@plt+0x2fc0>
   1408c:	mov	sl, r0
   14090:	b	13f8c <__assert_fail@plt+0x2ea8>
   14094:	andeq	r3, r1, r0, asr #1
   14098:	andeq	r0, r0, r0, ror #1
   1409c:	ldrdeq	r1, [r0], -r4
   140a0:			; <UNDEFINED> instruction: 0x00001cb8
   140a4:	cmp	r1, #0
   140a8:	push	{r3, lr}
   140ac:	beq	140c0 <__assert_fail@plt+0x2fdc>
   140b0:	ldr	r3, [r0, #116]	; 0x74
   140b4:	mov	r0, r1
   140b8:	blx	r3
   140bc:	pop	{r3, pc}
   140c0:	mov	r0, r1
   140c4:	pop	{r3, pc}
   140c8:	push	{r4, lr}
   140cc:	sub	sp, sp, #8
   140d0:	ldr	lr, [pc, #104]	; 14140 <__assert_fail@plt+0x305c>
   140d4:	mov	r4, r0
   140d8:	ldr	ip, [pc, #100]	; 14144 <__assert_fail@plt+0x3060>
   140dc:	ldr	r2, [pc, #100]	; 14148 <__assert_fail@plt+0x3064>
   140e0:	add	lr, pc, lr
   140e4:	ldr	r3, [r1, #40]	; 0x28
   140e8:	add	ip, pc, ip
   140ec:	str	lr, [sp]
   140f0:	mov	r1, #1
   140f4:	str	ip, [sp, #4]
   140f8:	add	r2, pc, r2
   140fc:	bl	1100c <__fprintf_chk@plt>
   14100:	ldr	r1, [pc, #68]	; 1414c <__assert_fail@plt+0x3068>
   14104:	mov	r2, #5
   14108:	mov	r0, #0
   1410c:	add	r1, pc, r1
   14110:	bl	10ed4 <dcgettext@plt>
   14114:	ldr	ip, [pc, #52]	; 14150 <__assert_fail@plt+0x306c>
   14118:	ldr	r3, [pc, #52]	; 14154 <__assert_fail@plt+0x3070>
   1411c:	mov	r1, #1
   14120:	add	ip, pc, ip
   14124:	str	ip, [sp]
   14128:	add	r3, pc, r3
   1412c:	mov	r2, r0
   14130:	mov	r0, r4
   14134:	bl	1100c <__fprintf_chk@plt>
   14138:	add	sp, sp, #8
   1413c:	pop	{r4, pc}
   14140:	andeq	r0, r0, r0, lsr #29
   14144:	andeq	r1, r0, ip, ror #23
   14148:	ldrdeq	r1, [r0], -r0
   1414c:	ldrdeq	r1, [r0], -r0
   14150:	andeq	r1, r0, ip, lsl #25
   14154:	andeq	r1, r0, ip, ror ip
   14158:	cmp	r3, #0
   1415c:	cmpeq	r2, #0
   14160:	bne	14178 <__assert_fail@plt+0x3094>
   14164:	cmp	r1, #0
   14168:	cmpeq	r0, #0
   1416c:	mvnne	r1, #0
   14170:	mvnne	r0, #0
   14174:	b	14194 <__assert_fail@plt+0x30b0>
   14178:	sub	sp, sp, #8
   1417c:	push	{sp, lr}
   14180:	bl	141e0 <__assert_fail@plt+0x30fc>
   14184:	ldr	lr, [sp, #4]
   14188:	add	sp, sp, #8
   1418c:	pop	{r2, r3}
   14190:	bx	lr
   14194:	push	{r1, lr}
   14198:	mov	r0, #8
   1419c:	bl	10e8c <raise@plt>
   141a0:	pop	{r1, pc}
   141a4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   141a8:	mov	r8, r2
   141ac:	mov	r6, r0
   141b0:	mov	r7, r1
   141b4:	mov	sl, r3
   141b8:	ldr	r9, [sp, #32]
   141bc:	bl	1421c <__assert_fail@plt+0x3138>
   141c0:	umull	r4, r5, r8, r0
   141c4:	mul	r8, r8, r1
   141c8:	mla	r2, r0, sl, r8
   141cc:	add	r5, r2, r5
   141d0:	subs	r4, r6, r4
   141d4:	sbc	r5, r7, r5
   141d8:	strd	r4, [r9]
   141dc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   141e0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   141e4:	mov	r8, r2
   141e8:	mov	r6, r0
   141ec:	mov	r7, r1
   141f0:	mov	r5, r3
   141f4:	ldr	r9, [sp, #32]
   141f8:	bl	146a8 <__assert_fail@plt+0x35c4>
   141fc:	mul	r3, r0, r5
   14200:	umull	r4, r5, r0, r8
   14204:	mla	r8, r8, r1, r3
   14208:	add	r5, r8, r5
   1420c:	subs	r4, r6, r4
   14210:	sbc	r5, r7, r5
   14214:	strd	r4, [r9]
   14218:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1421c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14220:	rsbs	r4, r0, #0
   14224:	rsc	r5, r1, #0
   14228:	cmp	r1, #0
   1422c:	mvn	r6, #0
   14230:	sub	sp, sp, #12
   14234:	movge	r4, r0
   14238:	movge	r5, r1
   1423c:	movge	r6, #0
   14240:	cmp	r3, #0
   14244:	blt	1447c <__assert_fail@plt+0x3398>
   14248:	cmp	r3, #0
   1424c:	mov	sl, r4
   14250:	mov	ip, r5
   14254:	mov	r0, r2
   14258:	mov	r1, r3
   1425c:	mov	r8, r2
   14260:	mov	r7, r4
   14264:	mov	r9, r5
   14268:	bne	14360 <__assert_fail@plt+0x327c>
   1426c:	cmp	r2, r5
   14270:	bls	1439c <__assert_fail@plt+0x32b8>
   14274:	clz	r3, r2
   14278:	cmp	r3, #0
   1427c:	rsbne	r2, r3, #32
   14280:	lslne	r8, r0, r3
   14284:	lsrne	r2, r4, r2
   14288:	lslne	r7, r4, r3
   1428c:	orrne	r9, r2, r5, lsl r3
   14290:	lsr	r4, r8, #16
   14294:	uxth	sl, r8
   14298:	mov	r1, r4
   1429c:	mov	r0, r9
   142a0:	bl	14ad8 <__assert_fail@plt+0x39f4>
   142a4:	mov	r1, r4
   142a8:	mov	fp, r0
   142ac:	mov	r0, r9
   142b0:	bl	14cc4 <__assert_fail@plt+0x3be0>
   142b4:	mul	r0, sl, fp
   142b8:	lsr	r2, r7, #16
   142bc:	orr	r1, r2, r1, lsl #16
   142c0:	cmp	r0, r1
   142c4:	bls	142e8 <__assert_fail@plt+0x3204>
   142c8:	adds	r1, r1, r8
   142cc:	sub	r3, fp, #1
   142d0:	bcs	142e4 <__assert_fail@plt+0x3200>
   142d4:	cmp	r0, r1
   142d8:	subhi	fp, fp, #2
   142dc:	addhi	r1, r1, r8
   142e0:	bhi	142e8 <__assert_fail@plt+0x3204>
   142e4:	mov	fp, r3
   142e8:	rsb	r9, r0, r1
   142ec:	mov	r1, r4
   142f0:	uxth	r7, r7
   142f4:	mov	r0, r9
   142f8:	bl	14ad8 <__assert_fail@plt+0x39f4>
   142fc:	mov	r1, r4
   14300:	mov	r5, r0
   14304:	mov	r0, r9
   14308:	bl	14cc4 <__assert_fail@plt+0x3be0>
   1430c:	mul	sl, sl, r5
   14310:	orr	r1, r7, r1, lsl #16
   14314:	cmp	sl, r1
   14318:	bls	14338 <__assert_fail@plt+0x3254>
   1431c:	adds	r8, r1, r8
   14320:	sub	r3, r5, #1
   14324:	bcs	14334 <__assert_fail@plt+0x3250>
   14328:	cmp	sl, r8
   1432c:	subhi	r5, r5, #2
   14330:	bhi	14338 <__assert_fail@plt+0x3254>
   14334:	mov	r5, r3
   14338:	orr	r3, r5, fp, lsl #16
   1433c:	mov	r4, #0
   14340:	cmp	r6, #0
   14344:	mov	r0, r3
   14348:	mov	r1, r4
   1434c:	beq	14358 <__assert_fail@plt+0x3274>
   14350:	rsbs	r0, r0, #0
   14354:	rsc	r1, r1, #0
   14358:	add	sp, sp, #12
   1435c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14360:	cmp	r3, r5
   14364:	movhi	r4, #0
   14368:	movhi	r3, r4
   1436c:	bhi	14340 <__assert_fail@plt+0x325c>
   14370:	clz	r5, r1
   14374:	cmp	r5, #0
   14378:	bne	14568 <__assert_fail@plt+0x3484>
   1437c:	cmp	r1, ip
   14380:	cmpcs	r2, sl
   14384:	movhi	r4, #0
   14388:	movls	r4, #1
   1438c:	movls	r3, #1
   14390:	movls	r4, r5
   14394:	movhi	r3, r4
   14398:	b	14340 <__assert_fail@plt+0x325c>
   1439c:	cmp	r2, #0
   143a0:	bne	143b4 <__assert_fail@plt+0x32d0>
   143a4:	mov	r1, r2
   143a8:	mov	r0, #1
   143ac:	bl	14ad8 <__assert_fail@plt+0x39f4>
   143b0:	mov	r8, r0
   143b4:	clz	r3, r8
   143b8:	cmp	r3, #0
   143bc:	bne	1448c <__assert_fail@plt+0x33a8>
   143c0:	rsb	r9, r8, r9
   143c4:	lsr	r5, r8, #16
   143c8:	uxth	sl, r8
   143cc:	mov	r4, #1
   143d0:	mov	r1, r5
   143d4:	mov	r0, r9
   143d8:	bl	14ad8 <__assert_fail@plt+0x39f4>
   143dc:	mov	r1, r5
   143e0:	mov	fp, r0
   143e4:	mov	r0, r9
   143e8:	bl	14cc4 <__assert_fail@plt+0x3be0>
   143ec:	mul	r0, sl, fp
   143f0:	lsr	r2, r7, #16
   143f4:	orr	r1, r2, r1, lsl #16
   143f8:	cmp	r0, r1
   143fc:	bls	1441c <__assert_fail@plt+0x3338>
   14400:	adds	r1, r1, r8
   14404:	sub	r3, fp, #1
   14408:	bcs	14688 <__assert_fail@plt+0x35a4>
   1440c:	cmp	r0, r1
   14410:	subhi	fp, fp, #2
   14414:	addhi	r1, r1, r8
   14418:	bls	14688 <__assert_fail@plt+0x35a4>
   1441c:	rsb	r2, r0, r1
   14420:	mov	r1, r5
   14424:	str	r2, [sp]
   14428:	uxth	r7, r7
   1442c:	mov	r0, r2
   14430:	bl	14ad8 <__assert_fail@plt+0x39f4>
   14434:	ldr	r2, [sp]
   14438:	mov	r1, r5
   1443c:	mov	r9, r0
   14440:	mov	r0, r2
   14444:	bl	14cc4 <__assert_fail@plt+0x3be0>
   14448:	mul	sl, sl, r9
   1444c:	orr	r1, r7, r1, lsl #16
   14450:	cmp	sl, r1
   14454:	bls	14474 <__assert_fail@plt+0x3390>
   14458:	adds	r8, r1, r8
   1445c:	sub	r3, r9, #1
   14460:	bcs	14470 <__assert_fail@plt+0x338c>
   14464:	cmp	sl, r8
   14468:	subhi	r9, r9, #2
   1446c:	bhi	14474 <__assert_fail@plt+0x3390>
   14470:	mov	r9, r3
   14474:	orr	r3, r9, fp, lsl #16
   14478:	b	14340 <__assert_fail@plt+0x325c>
   1447c:	mvn	r6, r6
   14480:	rsbs	r2, r2, #0
   14484:	rsc	r3, r3, #0
   14488:	b	14248 <__assert_fail@plt+0x3164>
   1448c:	lsl	r8, r8, r3
   14490:	rsb	fp, r3, #32
   14494:	lsr	r4, r9, fp
   14498:	lsr	fp, r7, fp
   1449c:	lsr	r5, r8, #16
   144a0:	orr	fp, fp, r9, lsl r3
   144a4:	mov	r0, r4
   144a8:	lsl	r7, r7, r3
   144ac:	mov	r1, r5
   144b0:	uxth	sl, r8
   144b4:	bl	14ad8 <__assert_fail@plt+0x39f4>
   144b8:	mov	r1, r5
   144bc:	mov	r3, r0
   144c0:	mov	r0, r4
   144c4:	str	r3, [sp]
   144c8:	bl	14cc4 <__assert_fail@plt+0x3be0>
   144cc:	ldr	r3, [sp]
   144d0:	lsr	r2, fp, #16
   144d4:	mul	r0, sl, r3
   144d8:	orr	r1, r2, r1, lsl #16
   144dc:	cmp	r0, r1
   144e0:	bls	14500 <__assert_fail@plt+0x341c>
   144e4:	adds	r1, r1, r8
   144e8:	sub	r2, r3, #1
   144ec:	bcs	146a0 <__assert_fail@plt+0x35bc>
   144f0:	cmp	r0, r1
   144f4:	subhi	r3, r3, #2
   144f8:	addhi	r1, r1, r8
   144fc:	bls	146a0 <__assert_fail@plt+0x35bc>
   14500:	rsb	r9, r0, r1
   14504:	mov	r1, r5
   14508:	str	r3, [sp]
   1450c:	uxth	fp, fp
   14510:	mov	r0, r9
   14514:	bl	14ad8 <__assert_fail@plt+0x39f4>
   14518:	mov	r1, r5
   1451c:	mov	r4, r0
   14520:	mov	r0, r9
   14524:	bl	14cc4 <__assert_fail@plt+0x3be0>
   14528:	mul	r9, sl, r4
   1452c:	ldr	r3, [sp]
   14530:	orr	r1, fp, r1, lsl #16
   14534:	cmp	r9, r1
   14538:	bls	1455c <__assert_fail@plt+0x3478>
   1453c:	adds	r1, r1, r8
   14540:	sub	r2, r4, #1
   14544:	bcs	14558 <__assert_fail@plt+0x3474>
   14548:	cmp	r9, r1
   1454c:	subhi	r4, r4, #2
   14550:	addhi	r1, r1, r8
   14554:	bhi	1455c <__assert_fail@plt+0x3478>
   14558:	mov	r4, r2
   1455c:	rsb	r9, r9, r1
   14560:	orr	r4, r4, r3, lsl #16
   14564:	b	143d0 <__assert_fail@plt+0x32ec>
   14568:	rsb	sl, r5, #32
   1456c:	lsl	r3, r2, r5
   14570:	lsr	r0, r2, sl
   14574:	lsr	r2, ip, sl
   14578:	orr	r4, r0, r1, lsl r5
   1457c:	lsr	sl, r7, sl
   14580:	mov	r0, r2
   14584:	orr	sl, sl, ip, lsl r5
   14588:	lsr	r9, r4, #16
   1458c:	str	r3, [sp, #4]
   14590:	str	r2, [sp]
   14594:	uxth	fp, r4
   14598:	mov	r1, r9
   1459c:	bl	14ad8 <__assert_fail@plt+0x39f4>
   145a0:	ldr	r2, [sp]
   145a4:	mov	r1, r9
   145a8:	mov	r8, r0
   145ac:	mov	r0, r2
   145b0:	bl	14cc4 <__assert_fail@plt+0x3be0>
   145b4:	mul	r0, fp, r8
   145b8:	lsr	r2, sl, #16
   145bc:	orr	r1, r2, r1, lsl #16
   145c0:	cmp	r0, r1
   145c4:	bls	145e4 <__assert_fail@plt+0x3500>
   145c8:	adds	r1, r1, r4
   145cc:	sub	r2, r8, #1
   145d0:	bcs	14698 <__assert_fail@plt+0x35b4>
   145d4:	cmp	r0, r1
   145d8:	subhi	r8, r8, #2
   145dc:	addhi	r1, r1, r4
   145e0:	bls	14698 <__assert_fail@plt+0x35b4>
   145e4:	rsb	ip, r0, r1
   145e8:	mov	r1, r9
   145ec:	str	ip, [sp]
   145f0:	mov	r0, ip
   145f4:	bl	14ad8 <__assert_fail@plt+0x39f4>
   145f8:	ldr	ip, [sp]
   145fc:	mov	r1, r9
   14600:	mov	r2, r0
   14604:	mov	r0, ip
   14608:	str	r2, [sp]
   1460c:	bl	14cc4 <__assert_fail@plt+0x3be0>
   14610:	ldr	r2, [sp]
   14614:	uxth	ip, sl
   14618:	mul	fp, fp, r2
   1461c:	orr	ip, ip, r1, lsl #16
   14620:	cmp	fp, ip
   14624:	bls	14644 <__assert_fail@plt+0x3560>
   14628:	adds	ip, ip, r4
   1462c:	sub	r1, r2, #1
   14630:	bcs	14690 <__assert_fail@plt+0x35ac>
   14634:	cmp	fp, ip
   14638:	subhi	r2, r2, #2
   1463c:	addhi	ip, ip, r4
   14640:	bls	14690 <__assert_fail@plt+0x35ac>
   14644:	ldr	r0, [sp, #4]
   14648:	orr	r1, r2, r8, lsl #16
   1464c:	rsb	fp, fp, ip
   14650:	umull	r2, r3, r1, r0
   14654:	cmp	fp, r3
   14658:	bcc	1467c <__assert_fail@plt+0x3598>
   1465c:	movne	r4, #0
   14660:	moveq	r4, #1
   14664:	cmp	r2, r7, lsl r5
   14668:	movls	r4, #0
   1466c:	andhi	r4, r4, #1
   14670:	cmp	r4, #0
   14674:	moveq	r3, r1
   14678:	beq	14340 <__assert_fail@plt+0x325c>
   1467c:	sub	r3, r1, #1
   14680:	mov	r4, #0
   14684:	b	14340 <__assert_fail@plt+0x325c>
   14688:	mov	fp, r3
   1468c:	b	1441c <__assert_fail@plt+0x3338>
   14690:	mov	r2, r1
   14694:	b	14644 <__assert_fail@plt+0x3560>
   14698:	mov	r8, r2
   1469c:	b	145e4 <__assert_fail@plt+0x3500>
   146a0:	mov	r3, r2
   146a4:	b	14500 <__assert_fail@plt+0x341c>
   146a8:	cmp	r3, #0
   146ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   146b0:	mov	r6, r0
   146b4:	sub	sp, sp, #12
   146b8:	mov	r5, r1
   146bc:	mov	r7, r0
   146c0:	mov	r4, r2
   146c4:	mov	r8, r1
   146c8:	bne	147a8 <__assert_fail@plt+0x36c4>
   146cc:	cmp	r2, r1
   146d0:	bls	147e4 <__assert_fail@plt+0x3700>
   146d4:	clz	r3, r2
   146d8:	cmp	r3, #0
   146dc:	rsbne	r8, r3, #32
   146e0:	lslne	r4, r2, r3
   146e4:	lsrne	r8, r0, r8
   146e8:	lslne	r7, r0, r3
   146ec:	orrne	r8, r8, r1, lsl r3
   146f0:	lsr	r5, r4, #16
   146f4:	uxth	sl, r4
   146f8:	mov	r1, r5
   146fc:	mov	r0, r8
   14700:	bl	14ad8 <__assert_fail@plt+0x39f4>
   14704:	mov	r1, r5
   14708:	mov	r9, r0
   1470c:	mov	r0, r8
   14710:	bl	14cc4 <__assert_fail@plt+0x3be0>
   14714:	mul	r0, sl, r9
   14718:	lsr	r3, r7, #16
   1471c:	orr	r1, r3, r1, lsl #16
   14720:	cmp	r0, r1
   14724:	bls	14748 <__assert_fail@plt+0x3664>
   14728:	adds	r1, r1, r4
   1472c:	sub	r2, r9, #1
   14730:	bcs	14744 <__assert_fail@plt+0x3660>
   14734:	cmp	r0, r1
   14738:	subhi	r9, r9, #2
   1473c:	addhi	r1, r1, r4
   14740:	bhi	14748 <__assert_fail@plt+0x3664>
   14744:	mov	r9, r2
   14748:	rsb	r8, r0, r1
   1474c:	mov	r1, r5
   14750:	uxth	r7, r7
   14754:	mov	r0, r8
   14758:	bl	14ad8 <__assert_fail@plt+0x39f4>
   1475c:	mov	r1, r5
   14760:	mov	r6, r0
   14764:	mov	r0, r8
   14768:	bl	14cc4 <__assert_fail@plt+0x3be0>
   1476c:	mul	sl, sl, r6
   14770:	orr	r1, r7, r1, lsl #16
   14774:	cmp	sl, r1
   14778:	bls	14794 <__assert_fail@plt+0x36b0>
   1477c:	adds	r4, r1, r4
   14780:	sub	r3, r6, #1
   14784:	bcs	14a90 <__assert_fail@plt+0x39ac>
   14788:	cmp	sl, r4
   1478c:	subhi	r6, r6, #2
   14790:	bls	14a90 <__assert_fail@plt+0x39ac>
   14794:	orr	r0, r6, r9, lsl #16
   14798:	mov	r6, #0
   1479c:	mov	r1, r6
   147a0:	add	sp, sp, #12
   147a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   147a8:	cmp	r3, r1
   147ac:	movhi	r6, #0
   147b0:	movhi	r0, r6
   147b4:	bhi	1479c <__assert_fail@plt+0x36b8>
   147b8:	clz	r7, r3
   147bc:	cmp	r7, #0
   147c0:	bne	148c0 <__assert_fail@plt+0x37dc>
   147c4:	cmp	r3, r1
   147c8:	cmpcs	r2, r6
   147cc:	movhi	r6, #0
   147d0:	movls	r6, #1
   147d4:	movls	r0, #1
   147d8:	movls	r6, r7
   147dc:	movhi	r0, r6
   147e0:	b	1479c <__assert_fail@plt+0x36b8>
   147e4:	cmp	r2, #0
   147e8:	bne	147fc <__assert_fail@plt+0x3718>
   147ec:	mov	r1, r2
   147f0:	mov	r0, #1
   147f4:	bl	14ad8 <__assert_fail@plt+0x39f4>
   147f8:	mov	r4, r0
   147fc:	clz	r3, r4
   14800:	cmp	r3, #0
   14804:	bne	149bc <__assert_fail@plt+0x38d8>
   14808:	rsb	r5, r4, r5
   1480c:	lsr	r8, r4, #16
   14810:	uxth	sl, r4
   14814:	mov	r6, #1
   14818:	mov	r1, r8
   1481c:	mov	r0, r5
   14820:	bl	14ad8 <__assert_fail@plt+0x39f4>
   14824:	mov	r1, r8
   14828:	mov	r9, r0
   1482c:	mov	r0, r5
   14830:	bl	14cc4 <__assert_fail@plt+0x3be0>
   14834:	mul	r0, sl, r9
   14838:	lsr	r3, r7, #16
   1483c:	orr	r1, r3, r1, lsl #16
   14840:	cmp	r0, r1
   14844:	bls	14864 <__assert_fail@plt+0x3780>
   14848:	adds	r1, r1, r4
   1484c:	sub	r2, r9, #1
   14850:	bcs	14a98 <__assert_fail@plt+0x39b4>
   14854:	cmp	r0, r1
   14858:	subhi	r9, r9, #2
   1485c:	addhi	r1, r1, r4
   14860:	bls	14a98 <__assert_fail@plt+0x39b4>
   14864:	rsb	fp, r0, r1
   14868:	mov	r1, r8
   1486c:	uxth	r7, r7
   14870:	mov	r0, fp
   14874:	bl	14ad8 <__assert_fail@plt+0x39f4>
   14878:	mov	r1, r8
   1487c:	mov	r5, r0
   14880:	mov	r0, fp
   14884:	bl	14cc4 <__assert_fail@plt+0x3be0>
   14888:	mul	sl, sl, r5
   1488c:	orr	r1, r7, r1, lsl #16
   14890:	cmp	sl, r1
   14894:	bls	148b0 <__assert_fail@plt+0x37cc>
   14898:	adds	r4, r1, r4
   1489c:	sub	r3, r5, #1
   148a0:	bcs	14aa0 <__assert_fail@plt+0x39bc>
   148a4:	cmp	sl, r4
   148a8:	subhi	r5, r5, #2
   148ac:	bls	14aa0 <__assert_fail@plt+0x39bc>
   148b0:	orr	r0, r5, r9, lsl #16
   148b4:	mov	r1, r6
   148b8:	add	sp, sp, #12
   148bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148c0:	rsb	r1, r7, #32
   148c4:	lsl	r0, r2, r7
   148c8:	lsr	r2, r2, r1
   148cc:	lsr	fp, r5, r1
   148d0:	orr	r8, r2, r3, lsl r7
   148d4:	lsr	r1, r6, r1
   148d8:	str	r0, [sp, #4]
   148dc:	orr	r5, r1, r5, lsl r7
   148e0:	lsr	r9, r8, #16
   148e4:	mov	r0, fp
   148e8:	uxth	sl, r8
   148ec:	mov	r1, r9
   148f0:	bl	14ad8 <__assert_fail@plt+0x39f4>
   148f4:	mov	r1, r9
   148f8:	mov	r4, r0
   148fc:	mov	r0, fp
   14900:	bl	14cc4 <__assert_fail@plt+0x3be0>
   14904:	mul	r0, sl, r4
   14908:	lsr	ip, r5, #16
   1490c:	orr	r1, ip, r1, lsl #16
   14910:	cmp	r0, r1
   14914:	bls	14928 <__assert_fail@plt+0x3844>
   14918:	adds	r1, r1, r8
   1491c:	sub	r2, r4, #1
   14920:	bcc	14abc <__assert_fail@plt+0x39d8>
   14924:	mov	r4, r2
   14928:	rsb	ip, r0, r1
   1492c:	mov	r1, r9
   14930:	str	ip, [sp]
   14934:	uxth	r5, r5
   14938:	mov	r0, ip
   1493c:	bl	14ad8 <__assert_fail@plt+0x39f4>
   14940:	ldr	ip, [sp]
   14944:	mov	r1, r9
   14948:	mov	fp, r0
   1494c:	mov	r0, ip
   14950:	bl	14cc4 <__assert_fail@plt+0x3be0>
   14954:	mul	sl, sl, fp
   14958:	orr	r1, r5, r1, lsl #16
   1495c:	cmp	sl, r1
   14960:	bls	14974 <__assert_fail@plt+0x3890>
   14964:	adds	r1, r1, r8
   14968:	sub	r2, fp, #1
   1496c:	bcc	14aa8 <__assert_fail@plt+0x39c4>
   14970:	mov	fp, r2
   14974:	ldr	r3, [sp, #4]
   14978:	orr	r0, fp, r4, lsl #16
   1497c:	rsb	sl, sl, r1
   14980:	umull	r4, r5, r0, r3
   14984:	cmp	sl, r5
   14988:	bcc	149a8 <__assert_fail@plt+0x38c4>
   1498c:	movne	r3, #0
   14990:	moveq	r3, #1
   14994:	cmp	r4, r6, lsl r7
   14998:	movls	r6, #0
   1499c:	andhi	r6, r3, #1
   149a0:	cmp	r6, #0
   149a4:	beq	1479c <__assert_fail@plt+0x36b8>
   149a8:	mov	r6, #0
   149ac:	sub	r0, r0, #1
   149b0:	mov	r1, r6
   149b4:	add	sp, sp, #12
   149b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   149bc:	lsl	r4, r4, r3
   149c0:	rsb	r9, r3, #32
   149c4:	lsr	r2, r5, r9
   149c8:	lsr	r9, r6, r9
   149cc:	lsr	r8, r4, #16
   149d0:	orr	r9, r9, r5, lsl r3
   149d4:	mov	r0, r2
   149d8:	lsl	r7, r6, r3
   149dc:	mov	r1, r8
   149e0:	str	r2, [sp]
   149e4:	bl	14ad8 <__assert_fail@plt+0x39f4>
   149e8:	ldr	r2, [sp]
   149ec:	mov	r1, r8
   149f0:	uxth	sl, r4
   149f4:	mov	fp, r0
   149f8:	mov	r0, r2
   149fc:	bl	14cc4 <__assert_fail@plt+0x3be0>
   14a00:	mul	r0, sl, fp
   14a04:	lsr	r3, r9, #16
   14a08:	orr	r1, r3, r1, lsl #16
   14a0c:	cmp	r0, r1
   14a10:	bls	14a30 <__assert_fail@plt+0x394c>
   14a14:	adds	r1, r1, r4
   14a18:	sub	r3, fp, #1
   14a1c:	bcs	14ad0 <__assert_fail@plt+0x39ec>
   14a20:	cmp	r0, r1
   14a24:	subhi	fp, fp, #2
   14a28:	addhi	r1, r1, r4
   14a2c:	bls	14ad0 <__assert_fail@plt+0x39ec>
   14a30:	rsb	r5, r0, r1
   14a34:	mov	r1, r8
   14a38:	uxth	r9, r9
   14a3c:	mov	r0, r5
   14a40:	bl	14ad8 <__assert_fail@plt+0x39f4>
   14a44:	mov	r1, r8
   14a48:	mov	r6, r0
   14a4c:	mov	r0, r5
   14a50:	bl	14cc4 <__assert_fail@plt+0x3be0>
   14a54:	mul	r5, sl, r6
   14a58:	orr	r1, r9, r1, lsl #16
   14a5c:	cmp	r5, r1
   14a60:	bls	14a84 <__assert_fail@plt+0x39a0>
   14a64:	adds	r1, r1, r4
   14a68:	sub	r3, r6, #1
   14a6c:	bcs	14a80 <__assert_fail@plt+0x399c>
   14a70:	cmp	r5, r1
   14a74:	subhi	r6, r6, #2
   14a78:	addhi	r1, r1, r4
   14a7c:	bhi	14a84 <__assert_fail@plt+0x39a0>
   14a80:	mov	r6, r3
   14a84:	rsb	r5, r5, r1
   14a88:	orr	r6, r6, fp, lsl #16
   14a8c:	b	14818 <__assert_fail@plt+0x3734>
   14a90:	mov	r6, r3
   14a94:	b	14794 <__assert_fail@plt+0x36b0>
   14a98:	mov	r9, r2
   14a9c:	b	14864 <__assert_fail@plt+0x3780>
   14aa0:	mov	r5, r3
   14aa4:	b	148b0 <__assert_fail@plt+0x37cc>
   14aa8:	cmp	sl, r1
   14aac:	subhi	fp, fp, #2
   14ab0:	addhi	r1, r1, r8
   14ab4:	bhi	14974 <__assert_fail@plt+0x3890>
   14ab8:	b	14970 <__assert_fail@plt+0x388c>
   14abc:	cmp	r0, r1
   14ac0:	subhi	r4, r4, #2
   14ac4:	addhi	r1, r1, r8
   14ac8:	bhi	14928 <__assert_fail@plt+0x3844>
   14acc:	b	14924 <__assert_fail@plt+0x3840>
   14ad0:	mov	fp, r3
   14ad4:	b	14a30 <__assert_fail@plt+0x394c>
   14ad8:	subs	r2, r1, #1
   14adc:	bxeq	lr
   14ae0:	bcc	14cb8 <__assert_fail@plt+0x3bd4>
   14ae4:	cmp	r0, r1
   14ae8:	bls	14c9c <__assert_fail@plt+0x3bb8>
   14aec:	tst	r1, r2
   14af0:	beq	14ca8 <__assert_fail@plt+0x3bc4>
   14af4:	clz	r3, r0
   14af8:	clz	r2, r1
   14afc:	sub	r3, r2, r3
   14b00:	rsbs	r3, r3, #31
   14b04:	addne	r3, r3, r3, lsl #1
   14b08:	mov	r2, #0
   14b0c:	addne	pc, pc, r3, lsl #2
   14b10:	nop	{0}
   14b14:	cmp	r0, r1, lsl #31
   14b18:	adc	r2, r2, r2
   14b1c:	subcs	r0, r0, r1, lsl #31
   14b20:	cmp	r0, r1, lsl #30
   14b24:	adc	r2, r2, r2
   14b28:	subcs	r0, r0, r1, lsl #30
   14b2c:	cmp	r0, r1, lsl #29
   14b30:	adc	r2, r2, r2
   14b34:	subcs	r0, r0, r1, lsl #29
   14b38:	cmp	r0, r1, lsl #28
   14b3c:	adc	r2, r2, r2
   14b40:	subcs	r0, r0, r1, lsl #28
   14b44:	cmp	r0, r1, lsl #27
   14b48:	adc	r2, r2, r2
   14b4c:	subcs	r0, r0, r1, lsl #27
   14b50:	cmp	r0, r1, lsl #26
   14b54:	adc	r2, r2, r2
   14b58:	subcs	r0, r0, r1, lsl #26
   14b5c:	cmp	r0, r1, lsl #25
   14b60:	adc	r2, r2, r2
   14b64:	subcs	r0, r0, r1, lsl #25
   14b68:	cmp	r0, r1, lsl #24
   14b6c:	adc	r2, r2, r2
   14b70:	subcs	r0, r0, r1, lsl #24
   14b74:	cmp	r0, r1, lsl #23
   14b78:	adc	r2, r2, r2
   14b7c:	subcs	r0, r0, r1, lsl #23
   14b80:	cmp	r0, r1, lsl #22
   14b84:	adc	r2, r2, r2
   14b88:	subcs	r0, r0, r1, lsl #22
   14b8c:	cmp	r0, r1, lsl #21
   14b90:	adc	r2, r2, r2
   14b94:	subcs	r0, r0, r1, lsl #21
   14b98:	cmp	r0, r1, lsl #20
   14b9c:	adc	r2, r2, r2
   14ba0:	subcs	r0, r0, r1, lsl #20
   14ba4:	cmp	r0, r1, lsl #19
   14ba8:	adc	r2, r2, r2
   14bac:	subcs	r0, r0, r1, lsl #19
   14bb0:	cmp	r0, r1, lsl #18
   14bb4:	adc	r2, r2, r2
   14bb8:	subcs	r0, r0, r1, lsl #18
   14bbc:	cmp	r0, r1, lsl #17
   14bc0:	adc	r2, r2, r2
   14bc4:	subcs	r0, r0, r1, lsl #17
   14bc8:	cmp	r0, r1, lsl #16
   14bcc:	adc	r2, r2, r2
   14bd0:	subcs	r0, r0, r1, lsl #16
   14bd4:	cmp	r0, r1, lsl #15
   14bd8:	adc	r2, r2, r2
   14bdc:	subcs	r0, r0, r1, lsl #15
   14be0:	cmp	r0, r1, lsl #14
   14be4:	adc	r2, r2, r2
   14be8:	subcs	r0, r0, r1, lsl #14
   14bec:	cmp	r0, r1, lsl #13
   14bf0:	adc	r2, r2, r2
   14bf4:	subcs	r0, r0, r1, lsl #13
   14bf8:	cmp	r0, r1, lsl #12
   14bfc:	adc	r2, r2, r2
   14c00:	subcs	r0, r0, r1, lsl #12
   14c04:	cmp	r0, r1, lsl #11
   14c08:	adc	r2, r2, r2
   14c0c:	subcs	r0, r0, r1, lsl #11
   14c10:	cmp	r0, r1, lsl #10
   14c14:	adc	r2, r2, r2
   14c18:	subcs	r0, r0, r1, lsl #10
   14c1c:	cmp	r0, r1, lsl #9
   14c20:	adc	r2, r2, r2
   14c24:	subcs	r0, r0, r1, lsl #9
   14c28:	cmp	r0, r1, lsl #8
   14c2c:	adc	r2, r2, r2
   14c30:	subcs	r0, r0, r1, lsl #8
   14c34:	cmp	r0, r1, lsl #7
   14c38:	adc	r2, r2, r2
   14c3c:	subcs	r0, r0, r1, lsl #7
   14c40:	cmp	r0, r1, lsl #6
   14c44:	adc	r2, r2, r2
   14c48:	subcs	r0, r0, r1, lsl #6
   14c4c:	cmp	r0, r1, lsl #5
   14c50:	adc	r2, r2, r2
   14c54:	subcs	r0, r0, r1, lsl #5
   14c58:	cmp	r0, r1, lsl #4
   14c5c:	adc	r2, r2, r2
   14c60:	subcs	r0, r0, r1, lsl #4
   14c64:	cmp	r0, r1, lsl #3
   14c68:	adc	r2, r2, r2
   14c6c:	subcs	r0, r0, r1, lsl #3
   14c70:	cmp	r0, r1, lsl #2
   14c74:	adc	r2, r2, r2
   14c78:	subcs	r0, r0, r1, lsl #2
   14c7c:	cmp	r0, r1, lsl #1
   14c80:	adc	r2, r2, r2
   14c84:	subcs	r0, r0, r1, lsl #1
   14c88:	cmp	r0, r1
   14c8c:	adc	r2, r2, r2
   14c90:	subcs	r0, r0, r1
   14c94:	mov	r0, r2
   14c98:	bx	lr
   14c9c:	moveq	r0, #1
   14ca0:	movne	r0, #0
   14ca4:	bx	lr
   14ca8:	clz	r2, r1
   14cac:	rsb	r2, r2, #31
   14cb0:	lsr	r0, r0, r2
   14cb4:	bx	lr
   14cb8:	cmp	r0, #0
   14cbc:	mvnne	r0, #0
   14cc0:	b	14194 <__assert_fail@plt+0x30b0>
   14cc4:	cmp	r1, #0
   14cc8:	beq	14cb8 <__assert_fail@plt+0x3bd4>
   14ccc:	push	{r0, r1, lr}
   14cd0:	bl	14ad8 <__assert_fail@plt+0x39f4>
   14cd4:	pop	{r1, r2, lr}
   14cd8:	mul	r3, r2, r0
   14cdc:	sub	r1, r1, r3
   14ce0:	bx	lr
   14ce4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   14ce8:	mov	r7, r0
   14cec:	ldr	r6, [pc, #76]	; 14d40 <__assert_fail@plt+0x3c5c>
   14cf0:	mov	r8, r1
   14cf4:	ldr	r5, [pc, #72]	; 14d44 <__assert_fail@plt+0x3c60>
   14cf8:	mov	r9, r2
   14cfc:	add	r6, pc, r6
   14d00:	bl	10e54 <calloc@plt-0x20>
   14d04:	add	r5, pc, r5
   14d08:	rsb	r6, r5, r6
   14d0c:	asrs	r6, r6, #2
   14d10:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14d14:	sub	r5, r5, #4
   14d18:	mov	r4, #0
   14d1c:	add	r4, r4, #1
   14d20:	ldr	r3, [r5, #4]!
   14d24:	mov	r0, r7
   14d28:	mov	r1, r8
   14d2c:	mov	r2, r9
   14d30:	blx	r3
   14d34:	cmp	r4, r6
   14d38:	bne	14d1c <__assert_fail@plt+0x3c38>
   14d3c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   14d40:	andeq	r1, r1, ip, lsr #18
   14d44:	andeq	r1, r1, r0, lsr #18
   14d48:	bx	lr

Disassembly of section .fini:

00014d4c <.fini>:
   14d4c:	push	{r3, lr}
   14d50:	pop	{r3, pc}
