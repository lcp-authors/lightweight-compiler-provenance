
centos-preinstalled/proftool:     file format elf32-littlearm


Disassembly of section .init:

000108e4 <.init>:
   108e4:	push	{r3, lr}
   108e8:	bl	111e4 <__assert_fail@plt+0x778>
   108ec:	pop	{r3, pc}

Disassembly of section .plt:

000108f0 <calloc@plt-0x14>:
   108f0:	push	{lr}		; (str lr, [sp, #-4]!)
   108f4:	ldr	lr, [pc, #4]	; 10900 <calloc@plt-0x4>
   108f8:	add	lr, pc, lr
   108fc:	ldr	pc, [lr, #8]!
   10900:	andeq	r2, r1, r0, lsl #14

00010904 <calloc@plt>:
   10904:	add	ip, pc, #0, 12
   10908:	add	ip, ip, #73728	; 0x12000
   1090c:	ldr	pc, [ip, #1792]!	; 0x700

00010910 <strcmp@plt>:
   10910:	add	ip, pc, #0, 12
   10914:	add	ip, ip, #73728	; 0x12000
   10918:	ldr	pc, [ip, #1784]!	; 0x6f8

0001091c <strtol@plt>:
   1091c:	add	ip, pc, #0, 12
   10920:	add	ip, ip, #73728	; 0x12000
   10924:	ldr	pc, [ip, #1776]!	; 0x6f0

00010928 <fopen@plt>:
   10928:	add	ip, pc, #0, 12
   1092c:	add	ip, ip, #73728	; 0x12000
   10930:	ldr	pc, [ip, #1768]!	; 0x6e8

00010934 <regerror@plt>:
   10934:	add	ip, pc, #0, 12
   10938:	add	ip, ip, #73728	; 0x12000
   1093c:	ldr	pc, [ip, #1760]!	; 0x6e0

00010940 <free@plt>:
   10940:	add	ip, pc, #0, 12
   10944:	add	ip, ip, #73728	; 0x12000
   10948:	ldr	pc, [ip, #1752]!	; 0x6d8

0001094c <fgets@plt>:
   1094c:	add	ip, pc, #0, 12
   10950:	add	ip, ip, #73728	; 0x12000
   10954:	ldr	pc, [ip, #1744]!	; 0x6d0

00010958 <__strtok_r@plt>:
   10958:	add	ip, pc, #0, 12
   1095c:	add	ip, ip, #73728	; 0x12000
   10960:	ldr	pc, [ip, #1736]!	; 0x6c8

00010964 <ftell@plt>:
   10964:	add	ip, pc, #0, 12
   10968:	add	ip, ip, #73728	; 0x12000
   1096c:	ldr	pc, [ip, #1728]!	; 0x6c0

00010970 <__stack_chk_fail@plt>:
   10970:	add	ip, pc, #0, 12
   10974:	add	ip, ip, #73728	; 0x12000
   10978:	ldr	pc, [ip, #1720]!	; 0x6b8

0001097c <realloc@plt>:
   1097c:	add	ip, pc, #0, 12
   10980:	add	ip, ip, #73728	; 0x12000
   10984:	ldr	pc, [ip, #1712]!	; 0x6b0

00010988 <regexec@plt>:
   10988:	add	ip, pc, #0, 12
   1098c:	add	ip, ip, #73728	; 0x12000
   10990:	ldr	pc, [ip, #1704]!	; 0x6a8

00010994 <fwrite@plt>:
   10994:	add	ip, pc, #0, 12
   10998:	add	ip, ip, #73728	; 0x12000
   1099c:	ldr	pc, [ip, #1696]!	; 0x6a0

000109a0 <fread@plt>:
   109a0:	add	ip, pc, #0, 12
   109a4:	add	ip, ip, #73728	; 0x12000
   109a8:	ldr	pc, [ip, #1688]!	; 0x698

000109ac <puts@plt>:
   109ac:	add	ip, pc, #0, 12
   109b0:	add	ip, ip, #73728	; 0x12000
   109b4:	ldr	pc, [ip, #1680]!	; 0x690

000109b8 <__libc_start_main@plt>:
   109b8:	add	ip, pc, #0, 12
   109bc:	add	ip, ip, #73728	; 0x12000
   109c0:	ldr	pc, [ip, #1672]!	; 0x688

000109c4 <__vfprintf_chk@plt>:
   109c4:	add	ip, pc, #0, 12
   109c8:	add	ip, ip, #73728	; 0x12000
   109cc:	ldr	pc, [ip, #1664]!	; 0x680

000109d0 <__ctype_tolower_loc@plt>:
   109d0:	add	ip, pc, #0, 12
   109d4:	add	ip, ip, #73728	; 0x12000
   109d8:	ldr	pc, [ip, #1656]!	; 0x678

000109dc <__gmon_start__@plt>:
   109dc:	add	ip, pc, #0, 12
   109e0:	add	ip, ip, #73728	; 0x12000
   109e4:	ldr	pc, [ip, #1648]!	; 0x670

000109e8 <exit@plt>:
   109e8:	add	ip, pc, #0, 12
   109ec:	add	ip, ip, #73728	; 0x12000
   109f0:	ldr	pc, [ip, #1640]!	; 0x668

000109f4 <feof@plt>:
   109f4:	add	ip, pc, #0, 12
   109f8:	add	ip, ip, #73728	; 0x12000
   109fc:	ldr	pc, [ip, #1632]!	; 0x660

00010a00 <strlen@plt>:
   10a00:	add	ip, pc, #0, 12
   10a04:	add	ip, ip, #73728	; 0x12000
   10a08:	ldr	pc, [ip, #1624]!	; 0x658

00010a0c <getopt@plt>:
   10a0c:	add	ip, pc, #0, 12
   10a10:	add	ip, ip, #73728	; 0x12000
   10a14:	ldr	pc, [ip, #1616]!	; 0x650

00010a18 <__strdup@plt>:
   10a18:	add	ip, pc, #0, 12
   10a1c:	add	ip, ip, #73728	; 0x12000
   10a20:	ldr	pc, [ip, #1608]!	; 0x648

00010a24 <bsearch@plt>:
   10a24:	add	ip, pc, #0, 12
   10a28:	add	ip, ip, #73728	; 0x12000
   10a2c:	ldr	pc, [ip, #1600]!	; 0x640

00010a30 <__printf_chk@plt>:
   10a30:	add	ip, pc, #0, 12
   10a34:	add	ip, ip, #73728	; 0x12000
   10a38:	ldr	pc, [ip, #1592]!	; 0x638

00010a3c <fclose@plt>:
   10a3c:	add	ip, pc, #0, 12
   10a40:	add	ip, ip, #73728	; 0x12000
   10a44:	ldr	pc, [ip, #1584]!	; 0x630

00010a48 <sscanf@plt>:
   10a48:	add	ip, pc, #0, 12
   10a4c:	add	ip, ip, #73728	; 0x12000
   10a50:	ldr	pc, [ip, #1576]!	; 0x628

00010a54 <regcomp@plt>:
   10a54:	add	ip, pc, #0, 12
   10a58:	add	ip, ip, #73728	; 0x12000
   10a5c:	ldr	pc, [ip, #1568]!	; 0x620

00010a60 <abort@plt>:
   10a60:	add	ip, pc, #0, 12
   10a64:	add	ip, ip, #73728	; 0x12000
   10a68:	ldr	pc, [ip, #1560]!	; 0x618

00010a6c <__assert_fail@plt>:
   10a6c:	add	ip, pc, #0, 12
   10a70:	add	ip, ip, #73728	; 0x12000
   10a74:	ldr	pc, [ip, #1552]!	; 0x610

Disassembly of section .text:

00010a78 <.text>:
   10a78:	movw	r3, #12032	; 0x2f00
   10a7c:	movt	r3, #2
   10a80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a84:	movw	sl, #12464	; 0x30b0
   10a88:	ldr	r2, [r3]
   10a8c:	sub	sp, sp, #284	; 0x11c
   10a90:	movt	sl, #2
   10a94:	mov	r7, #0
   10a98:	movw	r9, #7392	; 0x1ce0
   10a9c:	movw	r4, #7404	; 0x1cec
   10aa0:	movw	r6, #12440	; 0x3098
   10aa4:	movt	r9, #1
   10aa8:	movt	r4, #1
   10aac:	movt	r6, #2
   10ab0:	mov	r5, r0
   10ab4:	mov	r8, r7
   10ab8:	str	r3, [sp, #44]	; 0x2c
   10abc:	mov	r3, #2
   10ac0:	str	r1, [sp, #8]
   10ac4:	str	r2, [sp, #276]	; 0x114
   10ac8:	str	r3, [sl]
   10acc:	mov	r2, r4
   10ad0:	ldr	r1, [sp, #8]
   10ad4:	mov	r0, r5
   10ad8:	bl	10a0c <getopt@plt>
   10adc:	cmn	r0, #1
   10ae0:	beq	10b4c <__assert_fail@plt+0xe0>
   10ae4:	sub	r0, r0, #109	; 0x6d
   10ae8:	cmp	r0, #9
   10aec:	ldrls	pc, [pc, r0, lsl #2]
   10af0:	b	11178 <__assert_fail@plt+0x70c>
   10af4:	andeq	r0, r1, r4, asr #22
   10af8:	andeq	r1, r1, r8, ror r1
   10afc:	andeq	r1, r1, r8, ror r1
   10b00:	andeq	r0, r1, ip, lsr fp
   10b04:	andeq	r1, r1, r8, ror r1
   10b08:	andeq	r1, r1, r8, ror r1
   10b0c:	andeq	r1, r1, r8, ror r1
   10b10:	andeq	r0, r1, r4, lsr fp
   10b14:	andeq	r1, r1, r8, ror r1
   10b18:	andeq	r0, r1, ip, lsl fp
   10b1c:	mov	r2, #10
   10b20:	mov	r1, #0
   10b24:	ldr	r0, [r6]
   10b28:	bl	1091c <strtol@plt>
   10b2c:	str	r0, [sl]
   10b30:	b	10acc <__assert_fail@plt+0x60>
   10b34:	ldr	r7, [r6]
   10b38:	b	10acc <__assert_fail@plt+0x60>
   10b3c:	ldr	r8, [r6]
   10b40:	b	10acc <__assert_fail@plt+0x60>
   10b44:	ldr	r9, [r6]
   10b48:	b	10acc <__assert_fail@plt+0x60>
   10b4c:	movw	r3, #12432	; 0x3090
   10b50:	movt	r3, #2
   10b54:	mov	fp, r0
   10b58:	ldr	r3, [r3]
   10b5c:	sub	r2, r5, r3
   10b60:	str	r2, [sp, #16]
   10b64:	cmp	r2, #0
   10b68:	lsl	r3, r3, #2
   10b6c:	str	r3, [sp, #36]	; 0x24
   10b70:	ble	11178 <__assert_fail@plt+0x70c>
   10b74:	mov	r0, #4
   10b78:	movw	r1, #7416	; 0x1cf8
   10b7c:	movt	r1, #1
   10b80:	bl	11360 <__assert_fail@plt+0x8f4>
   10b84:	movw	r1, #7432	; 0x1d08
   10b88:	mov	r0, r9
   10b8c:	movt	r1, #1
   10b90:	bl	10928 <fopen@plt>
   10b94:	subs	r4, r0, #0
   10b98:	beq	110ac <__assert_fail@plt+0x640>
   10b9c:	bl	113d8 <__assert_fail@plt+0x96c>
   10ba0:	mov	r5, r0
   10ba4:	str	r0, [sp, #32]
   10ba8:	mov	r0, r4
   10bac:	bl	10a3c <fclose@plt>
   10bb0:	cmp	r5, #0
   10bb4:	bne	1117c <__assert_fail@plt+0x710>
   10bb8:	cmp	r8, #0
   10bbc:	beq	10c2c <__assert_fail@plt+0x1c0>
   10bc0:	movw	r1, #7464	; 0x1d28
   10bc4:	mov	r0, r8
   10bc8:	movt	r1, #1
   10bcc:	bl	10928 <fopen@plt>
   10bd0:	subs	r5, r0, #0
   10bd4:	beq	110c4 <__assert_fail@plt+0x658>
   10bd8:	movw	r6, #7504	; 0x1d50
   10bdc:	movt	r6, #1
   10be0:	b	10c14 <__assert_fail@plt+0x1a8>
   10be4:	mov	r2, #8
   10be8:	add	r1, sp, #52	; 0x34
   10bec:	mov	r0, r5
   10bf0:	bl	11934 <__assert_fail@plt+0xec8>
   10bf4:	cmp	r0, #1
   10bf8:	mov	r4, r0
   10bfc:	beq	10c24 <__assert_fail@plt+0x1b8>
   10c00:	cmp	r0, #0
   10c04:	bne	110e8 <__assert_fail@plt+0x67c>
   10c08:	ldr	r3, [sp, #52]	; 0x34
   10c0c:	cmp	r3, #1
   10c10:	beq	110fc <__assert_fail@plt+0x690>
   10c14:	mov	r0, r5
   10c18:	bl	109f4 <feof@plt>
   10c1c:	cmp	r0, #0
   10c20:	beq	10be4 <__assert_fail@plt+0x178>
   10c24:	mov	r0, r5
   10c28:	bl	10a3c <fclose@plt>
   10c2c:	cmp	r7, #0
   10c30:	beq	10c64 <__assert_fail@plt+0x1f8>
   10c34:	movw	r1, #7432	; 0x1d08
   10c38:	mov	r0, r7
   10c3c:	movt	r1, #1
   10c40:	bl	10928 <fopen@plt>
   10c44:	subs	r5, r0, #0
   10c48:	beq	11188 <__assert_fail@plt+0x71c>
   10c4c:	bl	115f8 <__assert_fail@plt+0xb8c>
   10c50:	mov	r4, r0
   10c54:	mov	r0, r5
   10c58:	bl	10a3c <fclose@plt>
   10c5c:	cmp	r4, #0
   10c60:	bne	1117c <__assert_fail@plt+0x710>
   10c64:	movw	r3, #12472	; 0x30b8
   10c68:	movw	fp, #12452	; 0x30a4
   10c6c:	movt	r3, #2
   10c70:	movt	fp, #2
   10c74:	str	r3, [sp, #20]
   10c78:	mov	r2, #24
   10c7c:	ldr	r3, [r3]
   10c80:	ldr	r1, [fp]
   10c84:	mla	r1, r2, r1, r3
   10c88:	cmp	r3, r1
   10c8c:	movcs	r3, #0
   10c90:	strcs	r3, [sp, #40]	; 0x28
   10c94:	bcs	10cc8 <__assert_fail@plt+0x25c>
   10c98:	ldr	ip, [sp, #32]
   10c9c:	mov	r0, #0
   10ca0:	ldr	r2, [r3, #20]
   10ca4:	add	r3, r3, #24
   10ca8:	cmp	r2, #0
   10cac:	addeq	ip, ip, #1
   10cb0:	ldreq	r2, [r3, #-16]
   10cb4:	addeq	r0, r0, r2
   10cb8:	cmp	r1, r3
   10cbc:	bhi	10ca0 <__assert_fail@plt+0x234>
   10cc0:	str	r0, [sp, #40]	; 0x28
   10cc4:	str	ip, [sp, #32]
   10cc8:	movw	r3, #12456	; 0x30a8
   10ccc:	movt	r3, #2
   10cd0:	ldr	r7, [r3]
   10cd4:	cmp	r7, #0
   10cd8:	beq	10e20 <__assert_fail@plt+0x3b4>
   10cdc:	movw	r2, #12448	; 0x30a0
   10ce0:	movw	r3, #7584	; 0x1da0
   10ce4:	movt	r3, #1
   10ce8:	str	r3, [sp, #28]
   10cec:	mov	r3, r2
   10cf0:	movt	r3, #2
   10cf4:	str	fp, [sp, #24]
   10cf8:	mov	fp, r3
   10cfc:	ldr	r2, [r7, #8]
   10d00:	mov	r0, #4
   10d04:	ldr	r1, [sp, #28]
   10d08:	bl	11360 <__assert_fail@plt+0x8f4>
   10d0c:	ldr	r3, [sp, #20]
   10d10:	ldr	r4, [r3]
   10d14:	ldr	r3, [sp, #24]
   10d18:	ldr	r8, [r3]
   10d1c:	mov	r3, #24
   10d20:	mla	r8, r3, r8, r4
   10d24:	cmp	r4, r8
   10d28:	bcs	10e10 <__assert_fail@plt+0x3a4>
   10d2c:	movw	r9, #7620	; 0x1dc4
   10d30:	movw	r3, #7664	; 0x1df0
   10d34:	movt	r9, #1
   10d38:	movt	r3, #1
   10d3c:	add	sl, r7, #12
   10d40:	str	r3, [sp, #12]
   10d44:	b	10d88 <__assert_fail@plt+0x31c>
   10d48:	cmp	r3, #1
   10d4c:	bne	10d7c <__assert_fail@plt+0x310>
   10d50:	ldr	ip, [r4]
   10d54:	movw	r1, #7692	; 0x1e0c
   10d58:	ldr	r3, [fp]
   10d5c:	movt	r1, #1
   10d60:	ldr	r2, [r4, #4]
   10d64:	mov	r0, #3
   10d68:	add	r3, ip, r3
   10d6c:	bl	11360 <__assert_fail@plt+0x8f4>
   10d70:	ldr	r3, [r4, #16]
   10d74:	bic	r3, r3, #1
   10d78:	str	r3, [r4, #16]
   10d7c:	add	r4, r4, #24
   10d80:	cmp	r8, r4
   10d84:	bls	10e10 <__assert_fail@plt+0x3a4>
   10d88:	mov	r5, #0
   10d8c:	ldr	r1, [r4, #4]
   10d90:	mov	r3, r5
   10d94:	mov	r2, r5
   10d98:	str	r5, [sp]
   10d9c:	mov	r0, sl
   10da0:	bl	10988 <regexec@plt>
   10da4:	ldr	r3, [r4, #4]
   10da8:	ldr	r2, [r7, #8]
   10dac:	mov	r1, r9
   10db0:	mov	r6, r0
   10db4:	mov	r0, #4
   10db8:	str	r6, [sp]
   10dbc:	bl	11360 <__assert_fail@plt+0x8f4>
   10dc0:	cmp	r6, #1
   10dc4:	beq	10d7c <__assert_fail@plt+0x310>
   10dc8:	cmp	r6, r5
   10dcc:	bne	11030 <__assert_fail@plt+0x5c4>
   10dd0:	ldr	r3, [r7, #4]
   10dd4:	cmp	r3, #0
   10dd8:	bne	10d48 <__assert_fail@plt+0x2dc>
   10ddc:	ldr	ip, [r4]
   10de0:	mov	r0, #3
   10de4:	ldr	r3, [fp]
   10de8:	add	r4, r4, #24
   10dec:	ldr	r2, [r4, #-20]	; 0xffffffec
   10df0:	add	r3, ip, r3
   10df4:	ldr	r1, [sp, #12]
   10df8:	bl	11360 <__assert_fail@plt+0x8f4>
   10dfc:	ldr	r3, [r4, #-8]
   10e00:	orr	r3, r3, #1
   10e04:	str	r3, [r4, #-8]
   10e08:	cmp	r8, r4
   10e0c:	bhi	10d88 <__assert_fail@plt+0x31c>
   10e10:	ldr	r7, [r7]
   10e14:	cmp	r7, #0
   10e18:	bne	10cfc <__assert_fail@plt+0x290>
   10e1c:	ldr	fp, [sp, #24]
   10e20:	ldr	r3, [sp, #40]	; 0x28
   10e24:	movw	r1, #7720	; 0x1e28
   10e28:	ldr	r2, [sp, #32]
   10e2c:	mov	r0, #1
   10e30:	movt	r1, #1
   10e34:	movw	r4, #7768	; 0x1e58
   10e38:	bl	11360 <__assert_fail@plt+0x8f4>
   10e3c:	ldr	r3, [sp, #36]	; 0x24
   10e40:	ldr	sl, [sp, #20]
   10e44:	movt	r4, #1
   10e48:	ldr	r2, [sp, #8]
   10e4c:	sub	r3, r3, #4
   10e50:	str	r4, [sp, #36]	; 0x24
   10e54:	add	r3, r2, r3
   10e58:	movw	r2, #56963	; 0xde83
   10e5c:	str	r3, [sp, #8]
   10e60:	movt	r2, #17179	; 0x431b
   10e64:	movw	r3, #8064	; 0x1f80
   10e68:	str	r2, [sp, #24]
   10e6c:	movt	r3, #1
   10e70:	str	r3, [sp, #40]	; 0x28
   10e74:	movw	r3, #16960	; 0x4240
   10e78:	movt	r3, #15
   10e7c:	str	r3, [sp, #28]
   10e80:	ldr	r3, [sp, #8]
   10e84:	ldr	r1, [sp, #36]	; 0x24
   10e88:	ldr	r4, [r3, #4]!
   10e8c:	mov	r0, r4
   10e90:	str	r3, [sp, #8]
   10e94:	bl	10910 <strcmp@plt>
   10e98:	subs	r8, r0, #0
   10e9c:	bne	1101c <__assert_fail@plt+0x5b0>
   10ea0:	movw	r6, #12460	; 0x30ac
   10ea4:	movt	r6, #2
   10ea8:	movw	r0, #7780	; 0x1e64
   10eac:	movt	r0, #1
   10eb0:	bl	109ac <puts@plt>
   10eb4:	ldr	r2, [r6]
   10eb8:	movw	r3, #12468	; 0x30b4
   10ebc:	movt	r3, #2
   10ec0:	cmp	r2, #0
   10ec4:	strle	r8, [sp, #12]
   10ec8:	ldr	r4, [r3]
   10ecc:	ble	10fd4 <__assert_fail@plt+0x568>
   10ed0:	movw	r7, #4760	; 0x1298
   10ed4:	movw	r9, #7972	; 0x1f24
   10ed8:	add	r4, r4, #12
   10edc:	movt	r9, #1
   10ee0:	movt	r7, #1
   10ee4:	mov	r5, r8
   10ee8:	str	r8, [sp, #12]
   10eec:	str	r8, [sp, #32]
   10ef0:	str	r9, [sp, #20]
   10ef4:	b	10f6c <__assert_fail@plt+0x500>
   10ef8:	ldr	r2, [sp, #24]
   10efc:	bic	ip, r3, #-1073741824	; 0xc0000000
   10f00:	mov	r3, #1
   10f04:	movw	r1, #7980	; 0x1f2c
   10f08:	mov	r0, r3
   10f0c:	movt	r1, #1
   10f10:	umull	r8, r9, ip, r2
   10f14:	ldr	r8, [sp, #28]
   10f18:	ldr	r2, [sp, #20]
   10f1c:	lsr	lr, r9, #18
   10f20:	str	lr, [sp]
   10f24:	mls	ip, r8, lr, ip
   10f28:	str	ip, [sp, #4]
   10f2c:	bl	10a30 <__printf_chk@plt>
   10f30:	mov	r1, #0
   10f34:	ldr	r0, [r4, #-12]
   10f38:	movw	r2, #8008	; 0x1f48
   10f3c:	movt	r2, #1
   10f40:	bl	118cc <__assert_fail@plt+0xe60>
   10f44:	movw	r2, #8084	; 0x1f94
   10f48:	mov	r1, #1
   10f4c:	movt	r2, #1
   10f50:	ldr	r0, [r4, #-8]
   10f54:	bl	118cc <__assert_fail@plt+0xe60>
   10f58:	ldr	r3, [r6]
   10f5c:	add	r5, r5, #1
   10f60:	add	r4, r4, #12
   10f64:	cmp	r5, r3
   10f68:	bge	10fd0 <__assert_fail@plt+0x564>
   10f6c:	ldr	ip, [r4, #-12]
   10f70:	mov	r3, #24
   10f74:	ldr	r2, [fp]
   10f78:	add	r0, sp, #52	; 0x34
   10f7c:	ldr	r1, [sl]
   10f80:	str	r7, [sp]
   10f84:	str	ip, [sp, #52]	; 0x34
   10f88:	bl	10a24 <bsearch@plt>
   10f8c:	ldr	r3, [r4, #-4]
   10f90:	cmp	r3, #0
   10f94:	blt	10f58 <__assert_fail@plt+0x4ec>
   10f98:	cmp	r0, #0
   10f9c:	beq	11078 <__assert_fail@plt+0x60c>
   10fa0:	ldr	r2, [r0, #16]
   10fa4:	tst	r2, #1
   10fa8:	bne	10ef8 <__assert_fail@plt+0x48c>
   10fac:	ldr	r3, [sp, #12]
   10fb0:	movw	r1, #7932	; 0x1efc
   10fb4:	ldr	r2, [r0, #4]
   10fb8:	movt	r1, #1
   10fbc:	mov	r0, #4
   10fc0:	add	r3, r3, #1
   10fc4:	str	r3, [sp, #12]
   10fc8:	bl	11360 <__assert_fail@plt+0x8f4>
   10fcc:	b	10f58 <__assert_fail@plt+0x4ec>
   10fd0:	ldr	r8, [sp, #32]
   10fd4:	movw	r1, #8016	; 0x1f50
   10fd8:	ldr	r3, [sp, #12]
   10fdc:	mov	r2, r8
   10fe0:	mov	r0, #3
   10fe4:	movt	r1, #1
   10fe8:	bl	11360 <__assert_fail@plt+0x8f4>
   10fec:	ldr	r3, [sp, #16]
   10ff0:	subs	r3, r3, #1
   10ff4:	str	r3, [sp, #16]
   10ff8:	bne	10e80 <__assert_fail@plt+0x414>
   10ffc:	ldr	r3, [sp, #44]	; 0x2c
   11000:	ldr	r2, [sp, #276]	; 0x114
   11004:	ldr	r0, [sp, #16]
   11008:	ldr	r3, [r3]
   1100c:	cmp	r2, r3
   11010:	bne	111a4 <__assert_fail@plt+0x738>
   11014:	add	sp, sp, #284	; 0x11c
   11018:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1101c:	mov	r2, r4
   11020:	ldr	r1, [sp, #40]	; 0x28
   11024:	mov	r0, #1
   11028:	bl	11360 <__assert_fail@plt+0x8f4>
   1102c:	b	10fec <__assert_fail@plt+0x580>
   11030:	ldr	r4, [r7, #8]
   11034:	mov	r1, sl
   11038:	add	r2, sp, #76	; 0x4c
   1103c:	mov	r3, #200	; 0xc8
   11040:	mov	r0, r6
   11044:	bl	10934 <regerror@plt>
   11048:	str	r4, [sp]
   1104c:	add	r2, sp, #76	; 0x4c
   11050:	mov	r0, r5
   11054:	movw	r3, #7656	; 0x1de8
   11058:	movw	r1, #7252	; 0x1c54
   1105c:	movt	r3, #1
   11060:	movt	r1, #1
   11064:	bl	11360 <__assert_fail@plt+0x8f4>
   11068:	ldr	r7, [r7]
   1106c:	cmp	r7, #0
   11070:	bne	10cfc <__assert_fail@plt+0x290>
   11074:	b	10e1c <__assert_fail@plt+0x3b0>
   11078:	movw	r3, #12448	; 0x30a0
   1107c:	movt	r3, #2
   11080:	ldr	r2, [r4, #-12]
   11084:	mov	r0, #1
   11088:	ldr	r3, [r3]
   1108c:	movw	r1, #7900	; 0x1edc
   11090:	ldr	ip, [sp, #32]
   11094:	movt	r1, #1
   11098:	add	r2, r2, r3
   1109c:	add	ip, ip, r0
   110a0:	str	ip, [sp, #32]
   110a4:	bl	11360 <__assert_fail@plt+0x8f4>
   110a8:	b	10f58 <__assert_fail@plt+0x4ec>
   110ac:	mov	r2, r9
   110b0:	movw	r1, #7436	; 0x1d0c
   110b4:	movt	r1, #1
   110b8:	str	fp, [sp, #16]
   110bc:	bl	11360 <__assert_fail@plt+0x8f4>
   110c0:	b	10ffc <__assert_fail@plt+0x590>
   110c4:	mov	r2, r8
   110c8:	movw	r1, #7468	; 0x1d2c
   110cc:	movt	r1, #1
   110d0:	str	fp, [sp, #16]
   110d4:	bl	11360 <__assert_fail@plt+0x8f4>
   110d8:	b	10ffc <__assert_fail@plt+0x590>
   110dc:	movw	r1, #7520	; 0x1d60
   110e0:	movt	r1, #1
   110e4:	bl	11360 <__assert_fail@plt+0x8f4>
   110e8:	mov	r0, r5
   110ec:	mvn	r3, #0
   110f0:	str	r3, [sp, #16]
   110f4:	bl	10a3c <fclose@plt>
   110f8:	b	10ffc <__assert_fail@plt+0x590>
   110fc:	ldr	r9, [sp, #56]	; 0x38
   11100:	mov	r1, r6
   11104:	mov	r0, #2
   11108:	mov	r2, r9
   1110c:	bl	11360 <__assert_fail@plt+0x8f4>
   11110:	mov	r0, r9
   11114:	mov	r1, #12
   11118:	bl	10904 <calloc@plt>
   1111c:	movw	r3, #12468	; 0x30b4
   11120:	movt	r3, #2
   11124:	cmp	r0, #0
   11128:	mov	r8, r0
   1112c:	str	r0, [r3]
   11130:	beq	110dc <__assert_fail@plt+0x670>
   11134:	movw	r3, #12460	; 0x30ac
   11138:	cmp	r9, #0
   1113c:	movt	r3, #2
   11140:	str	r9, [r3]
   11144:	bgt	1115c <__assert_fail@plt+0x6f0>
   11148:	b	10c14 <__assert_fail@plt+0x1a8>
   1114c:	add	r4, r4, #1
   11150:	add	r8, r8, #12
   11154:	cmp	r9, r4
   11158:	beq	10c14 <__assert_fail@plt+0x1a8>
   1115c:	mov	r2, #12
   11160:	mov	r1, r8
   11164:	mov	r0, r5
   11168:	bl	11934 <__assert_fail@plt+0xec8>
   1116c:	cmp	r0, #0
   11170:	beq	1114c <__assert_fail@plt+0x6e0>
   11174:	b	110e8 <__assert_fail@plt+0x67c>
   11178:	bl	11334 <__assert_fail@plt+0x8c8>
   1117c:	mvn	r3, #0
   11180:	str	r3, [sp, #16]
   11184:	b	10ffc <__assert_fail@plt+0x590>
   11188:	mov	r2, r7
   1118c:	movw	r1, #7548	; 0x1d7c
   11190:	movt	r1, #1
   11194:	mvn	r3, #0
   11198:	str	r3, [sp, #16]
   1119c:	bl	11360 <__assert_fail@plt+0x8f4>
   111a0:	b	10ffc <__assert_fail@plt+0x590>
   111a4:	bl	10970 <__stack_chk_fail@plt>
   111a8:	mov	fp, #0
   111ac:	mov	lr, #0
   111b0:	pop	{r1}		; (ldr r1, [sp], #4)
   111b4:	mov	r2, sp
   111b8:	push	{r2}		; (str r2, [sp, #-4]!)
   111bc:	push	{r0}		; (str r0, [sp, #-4]!)
   111c0:	ldr	ip, [pc, #16]	; 111d8 <__assert_fail@plt+0x76c>
   111c4:	push	{ip}		; (str ip, [sp, #-4]!)
   111c8:	ldr	r0, [pc, #12]	; 111dc <__assert_fail@plt+0x770>
   111cc:	ldr	r3, [pc, #12]	; 111e0 <__assert_fail@plt+0x774>
   111d0:	bl	109b8 <__libc_start_main@plt>
   111d4:	bl	10a60 <abort@plt>
   111d8:	strdeq	r1, [r1], -r8
   111dc:	andeq	r0, r1, r8, ror sl
   111e0:	muleq	r1, r4, r9
   111e4:	ldr	r3, [pc, #20]	; 11200 <__assert_fail@plt+0x794>
   111e8:	ldr	r2, [pc, #20]	; 11204 <__assert_fail@plt+0x798>
   111ec:	add	r3, pc, r3
   111f0:	ldr	r2, [r3, r2]
   111f4:	cmp	r2, #0
   111f8:	bxeq	lr
   111fc:	b	109dc <__gmon_start__@plt>
   11200:	andeq	r1, r1, ip, lsl #28
   11204:	andeq	r0, r0, r8, lsl #1
   11208:	movw	r0, #12432	; 0x3090
   1120c:	movt	r0, #2
   11210:	movw	r3, #12432	; 0x3090
   11214:	movt	r3, #2
   11218:	cmp	r3, r0
   1121c:	bxeq	lr
   11220:	movw	r3, #0
   11224:	movt	r3, #0
   11228:	cmp	r3, #0
   1122c:	bxeq	lr
   11230:	bx	r3
   11234:	movw	r0, #12432	; 0x3090
   11238:	movt	r0, #2
   1123c:	movw	r1, #12432	; 0x3090
   11240:	movt	r1, #2
   11244:	sub	r1, r1, r0
   11248:	asr	r1, r1, #2
   1124c:	add	r1, r1, r1, lsr #31
   11250:	asrs	r1, r1, #1
   11254:	bxeq	lr
   11258:	movw	r3, #0
   1125c:	movt	r3, #0
   11260:	cmp	r3, #0
   11264:	bxeq	lr
   11268:	bx	r3
   1126c:	push	{r4, lr}
   11270:	movw	r4, #12444	; 0x309c
   11274:	movt	r4, #2
   11278:	ldrb	r3, [r4]
   1127c:	cmp	r3, #0
   11280:	popne	{r4, pc}
   11284:	bl	11208 <__assert_fail@plt+0x79c>
   11288:	mov	r3, #1
   1128c:	strb	r3, [r4]
   11290:	pop	{r4, pc}
   11294:	b	11234 <__assert_fail@plt+0x7c8>
   11298:	ldr	r3, [r1]
   1129c:	ldr	r0, [r0]
   112a0:	lsr	r3, r3, #2
   112a4:	rsb	r0, r3, r0, lsr #2
   112a8:	bx	lr
   112ac:	movw	r2, #12452	; 0x30a4
   112b0:	movt	r2, #2
   112b4:	movw	r3, #12472	; 0x30b8
   112b8:	movt	r3, #2
   112bc:	ldr	ip, [r2]
   112c0:	mov	r1, #0
   112c4:	push	{r4, r5, r6, lr}
   112c8:	sub	ip, ip, #1
   112cc:	lsr	r5, r0, #2
   112d0:	ldr	lr, [r3]
   112d4:	mov	r4, #1
   112d8:	mov	r6, #24
   112dc:	b	11304 <__assert_fail@plt+0x898>
   112e0:	asr	r3, r3, #1
   112e4:	mul	r2, r6, r3
   112e8:	add	r0, lr, r2
   112ec:	ldr	r2, [lr, r2]
   112f0:	sub	r2, r5, r2, lsr #2
   112f4:	cmp	r2, #0
   112f8:	movgt	r1, r3
   112fc:	addgt	r4, r1, #1
   11300:	ble	11328 <__assert_fail@plt+0x8bc>
   11304:	add	r3, r1, ip
   11308:	cmp	r4, ip
   1130c:	add	r3, r3, r3, lsr #31
   11310:	blt	112e0 <__assert_fail@plt+0x874>
   11314:	cmp	r1, #0
   11318:	movge	r0, #24
   1131c:	mlage	r0, r0, r1, lr
   11320:	movlt	r0, #0
   11324:	pop	{r4, r5, r6, pc}
   11328:	mov	ip, r3
   1132c:	bne	11304 <__assert_fail@plt+0x898>
   11330:	pop	{r4, r5, r6, pc}
   11334:	movw	r3, #12436	; 0x3094
   11338:	movt	r3, #2
   1133c:	push	{r4, lr}
   11340:	movw	r0, #6684	; 0x1a1c
   11344:	mov	r2, #236	; 0xec
   11348:	ldr	r3, [r3]
   1134c:	movt	r0, #1
   11350:	mov	r1, #1
   11354:	bl	10994 <fwrite@plt>
   11358:	mov	r0, #1
   1135c:	bl	109e8 <exit@plt>
   11360:	push	{r1, r2, r3}
   11364:	movw	r3, #12464	; 0x30b0
   11368:	movt	r3, #2
   1136c:	push	{r4, lr}
   11370:	movw	r4, #12032	; 0x2f00
   11374:	movt	r4, #2
   11378:	ldr	r2, [r3]
   1137c:	sub	sp, sp, #12
   11380:	ldr	r3, [r4]
   11384:	cmp	r2, r0
   11388:	ldr	r2, [sp, #20]
   1138c:	str	r3, [sp, #4]
   11390:	blt	113b4 <__assert_fail@plt+0x948>
   11394:	add	ip, sp, #24
   11398:	movw	r0, #12436	; 0x3094
   1139c:	movt	r0, #2
   113a0:	mov	r1, #1
   113a4:	mov	r3, ip
   113a8:	str	ip, [sp]
   113ac:	ldr	r0, [r0]
   113b0:	bl	109c4 <__vfprintf_chk@plt>
   113b4:	ldr	r2, [sp, #4]
   113b8:	ldr	r3, [r4]
   113bc:	cmp	r2, r3
   113c0:	bne	113d4 <__assert_fail@plt+0x968>
   113c4:	add	sp, sp, #12
   113c8:	pop	{r4, lr}
   113cc:	add	sp, sp, #12
   113d0:	bx	lr
   113d4:	bl	10970 <__stack_chk_fail@plt>
   113d8:	movw	r3, #12032	; 0x2f00
   113dc:	movt	r3, #2
   113e0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113e4:	mov	r2, r3
   113e8:	sub	sp, sp, #1024	; 0x400
   113ec:	ldr	r2, [r2]
   113f0:	sub	sp, sp, #12
   113f4:	movw	r6, #12452	; 0x30a4
   113f8:	movt	r6, #2
   113fc:	movw	r8, #6960	; 0x1b30
   11400:	str	r3, [sp, #12]
   11404:	mov	r3, #0
   11408:	mov	r9, r3
   1140c:	movt	r8, #1
   11410:	mov	r7, r0
   11414:	str	r3, [sp, #8]
   11418:	str	r2, [sp, #1028]	; 0x404
   1141c:	mov	r5, #1
   11420:	str	r3, [r6]
   11424:	b	1151c <__assert_fail@plt+0xab0>
   11428:	add	r4, sp, #524	; 0x20c
   1142c:	add	r3, sp, #19
   11430:	str	r4, [sp]
   11434:	add	r2, sp, #20
   11438:	mov	r1, r8
   1143c:	add	r0, sp, #24
   11440:	bl	10a48 <sscanf@plt>
   11444:	cmp	r0, #2
   11448:	mov	sl, r0
   1144c:	beq	11518 <__assert_fail@plt+0xaac>
   11450:	mov	r0, r7
   11454:	bl	109f4 <feof@plt>
   11458:	cmp	r0, #0
   1145c:	bne	115a8 <__assert_fail@plt+0xb3c>
   11460:	cmp	sl, #1
   11464:	ble	11544 <__assert_fail@plt+0xad8>
   11468:	bl	109d0 <__ctype_tolower_loc@plt>
   1146c:	ldrb	r2, [sp, #19]
   11470:	ldr	r3, [r0]
   11474:	ldrb	r3, [r3, r2, lsl #2]
   11478:	cmp	r3, #116	; 0x74
   1147c:	cmpne	r3, #119	; 0x77
   11480:	strb	r3, [sp, #19]
   11484:	bne	11518 <__assert_fail@plt+0xaac>
   11488:	ldr	r1, [r6]
   1148c:	movw	fp, #12472	; 0x30b8
   11490:	movt	fp, #2
   11494:	cmp	r9, r1
   11498:	ldr	sl, [fp]
   1149c:	beq	1157c <__assert_fail@plt+0xb10>
   114a0:	cmp	r1, #0
   114a4:	add	r0, r1, #1
   114a8:	str	r0, [r6]
   114ac:	mov	r0, r4
   114b0:	ldreq	r3, [sp, #20]
   114b4:	streq	r3, [sp, #8]
   114b8:	mov	r3, #24
   114bc:	mul	fp, r3, r1
   114c0:	mov	r1, #0
   114c4:	ldr	r3, [sp, #8]
   114c8:	add	r4, sl, fp
   114cc:	str	r1, [sl, fp]
   114d0:	ldr	ip, [sp, #20]
   114d4:	str	r1, [r4, #4]
   114d8:	sub	ip, ip, r3
   114dc:	str	r1, [r4, #8]
   114e0:	str	r1, [r4, #12]
   114e4:	str	r1, [r4, #16]
   114e8:	str	r1, [r4, #20]
   114ec:	str	ip, [sl, fp]
   114f0:	bl	10a18 <__strdup@plt>
   114f4:	ldr	r1, [r6]
   114f8:	mov	ip, #1
   114fc:	str	ip, [r4, #16]
   11500:	cmp	r1, ip
   11504:	ldrgt	r3, [sl, fp]
   11508:	ldrgt	r2, [r4, #-24]	; 0xffffffe8
   1150c:	str	r0, [r4, #4]
   11510:	subgt	r3, r3, r2
   11514:	strgt	r3, [r4, #-16]
   11518:	add	r5, r5, #1
   1151c:	mov	r2, r7
   11520:	mov	r1, #500	; 0x1f4
   11524:	add	r0, sp, #24
   11528:	bl	1094c <fgets@plt>
   1152c:	cmp	r0, #0
   11530:	bne	11428 <__assert_fail@plt+0x9bc>
   11534:	mov	r0, r7
   11538:	bl	109f4 <feof@plt>
   1153c:	cmp	r0, #0
   11540:	bne	115a8 <__assert_fail@plt+0xb3c>
   11544:	mov	r0, #0
   11548:	mov	r2, r5
   1154c:	movw	r1, #6924	; 0x1b0c
   11550:	movt	r1, #1
   11554:	bl	11360 <__assert_fail@plt+0x8f4>
   11558:	mov	r0, #1
   1155c:	ldr	r3, [sp, #12]
   11560:	ldr	r2, [sp, #1028]	; 0x404
   11564:	ldr	r3, [r3]
   11568:	cmp	r2, r3
   1156c:	bne	115d4 <__assert_fail@plt+0xb68>
   11570:	add	sp, sp, #1024	; 0x400
   11574:	add	sp, sp, #12
   11578:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1157c:	add	r9, r9, #256	; 0x100
   11580:	mov	r1, #24
   11584:	mov	r0, sl
   11588:	mul	r1, r1, r9
   1158c:	bl	1097c <realloc@plt>
   11590:	cmp	r0, #0
   11594:	mov	sl, r0
   11598:	str	r0, [fp]
   1159c:	beq	115d8 <__assert_fail@plt+0xb6c>
   115a0:	ldr	r1, [r6]
   115a4:	b	114a0 <__assert_fail@plt+0xa34>
   115a8:	ldr	r2, [r6]
   115ac:	mov	r0, #2
   115b0:	movw	r1, #7008	; 0x1b60
   115b4:	movt	r1, #1
   115b8:	bl	11360 <__assert_fail@plt+0x8f4>
   115bc:	ldr	r2, [sp, #8]
   115c0:	movw	r3, #12448	; 0x30a0
   115c4:	movt	r3, #2
   115c8:	mov	r0, #0
   115cc:	str	r2, [r3]
   115d0:	b	1155c <__assert_fail@plt+0xaf0>
   115d4:	bl	10970 <__stack_chk_fail@plt>
   115d8:	movw	r3, #6668	; 0x1a0c
   115dc:	movw	r1, #6976	; 0x1b40
   115e0:	movw	r0, #6996	; 0x1b54
   115e4:	movt	r3, #1
   115e8:	movt	r1, #1
   115ec:	mov	r2, #137	; 0x89
   115f0:	movt	r0, #1
   115f4:	bl	10a6c <__assert_fail@plt>
   115f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   115fc:	movw	r3, #12032	; 0x2f00
   11600:	sub	sp, sp, #436	; 0x1b4
   11604:	movt	r3, #2
   11608:	movw	r9, #12456	; 0x30a8
   1160c:	movw	r7, #7072	; 0x1ba0
   11610:	str	r3, [sp, #20]
   11614:	movt	r9, #2
   11618:	ldr	r3, [r3]
   1161c:	movt	r7, #1
   11620:	mov	r8, r0
   11624:	mov	r6, #0
   11628:	movw	r2, #7116	; 0x1bcc
   1162c:	movt	r2, #1
   11630:	str	r3, [sp, #428]	; 0x1ac
   11634:	movw	r3, #7132	; 0x1bdc
   11638:	str	r2, [sp, #12]
   1163c:	movt	r3, #1
   11640:	str	r3, [sp, #16]
   11644:	mov	r2, r8
   11648:	mov	r1, #200	; 0xc8
   1164c:	add	r0, sp, #28
   11650:	bl	1094c <fgets@plt>
   11654:	cmp	r0, #0
   11658:	beq	11778 <__assert_fail@plt+0xd0c>
   1165c:	add	r0, sp, #28
   11660:	add	r6, r6, #1
   11664:	bl	10a00 <strlen@plt>
   11668:	cmp	r0, #0
   1166c:	beq	1168c <__assert_fail@plt+0xc20>
   11670:	add	r3, sp, #432	; 0x1b0
   11674:	sub	r0, r0, #1
   11678:	add	r0, r3, r0
   1167c:	ldrb	r3, [r0, #-404]	; 0xfffffe6c
   11680:	cmp	r3, #10
   11684:	moveq	r3, #0
   11688:	strbeq	r3, [r0, #-404]	; 0xfffffe6c
   1168c:	ldrb	r3, [sp, #28]
   11690:	add	sl, sp, #28
   11694:	cmp	r3, #9
   11698:	cmpne	r3, #32
   1169c:	bne	116b0 <__assert_fail@plt+0xc44>
   116a0:	ldrb	r3, [sl, #1]!
   116a4:	cmp	r3, #9
   116a8:	cmpne	r3, #32
   116ac:	beq	116a0 <__assert_fail@plt+0xc34>
   116b0:	sub	r4, r3, #35	; 0x23
   116b4:	cmp	r3, #0
   116b8:	clz	r4, r4
   116bc:	lsr	r4, r4, #5
   116c0:	moveq	r4, #1
   116c4:	cmp	r4, #0
   116c8:	bne	11644 <__assert_fail@plt+0xbd8>
   116cc:	mov	r1, #44	; 0x2c
   116d0:	mov	r0, #1
   116d4:	bl	10904 <calloc@plt>
   116d8:	subs	r5, r0, #0
   116dc:	beq	117ac <__assert_fail@plt+0xd40>
   116e0:	mov	r0, sl
   116e4:	mov	r1, r7
   116e8:	add	r2, sp, #24
   116ec:	bl	10958 <__strtok_r@plt>
   116f0:	subs	sl, r0, #0
   116f4:	beq	117d4 <__assert_fail@plt+0xd68>
   116f8:	ldr	r1, [sp, #12]
   116fc:	bl	10910 <strcmp@plt>
   11700:	cmp	r0, #0
   11704:	streq	r0, [r5, #4]
   11708:	beq	11728 <__assert_fail@plt+0xcbc>
   1170c:	mov	r0, sl
   11710:	ldr	r1, [sp, #16]
   11714:	bl	10910 <strcmp@plt>
   11718:	cmp	r0, #0
   1171c:	bne	11824 <__assert_fail@plt+0xdb8>
   11720:	mov	r3, #1
   11724:	str	r3, [r5, #4]
   11728:	add	r2, sp, #24
   1172c:	mov	r1, r7
   11730:	mov	r0, #0
   11734:	bl	10958 <__strtok_r@plt>
   11738:	subs	r4, r0, #0
   1173c:	beq	117c0 <__assert_fail@plt+0xd54>
   11740:	add	sl, r5, #12
   11744:	mov	r2, #8
   11748:	mov	r1, r4
   1174c:	mov	r0, sl
   11750:	bl	10a54 <regcomp@plt>
   11754:	subs	fp, r0, #0
   11758:	bne	117e8 <__assert_fail@plt+0xd7c>
   1175c:	mov	r0, r4
   11760:	bl	10a18 <__strdup@plt>
   11764:	str	fp, [r5]
   11768:	str	r0, [r5, #8]
   1176c:	str	r5, [r9]
   11770:	mov	r9, r5
   11774:	b	11644 <__assert_fail@plt+0xbd8>
   11778:	mov	r4, r0
   1177c:	mov	r0, r8
   11780:	bl	109f4 <feof@plt>
   11784:	subs	r5, r0, #0
   11788:	movne	r0, r4
   1178c:	beq	11840 <__assert_fail@plt+0xdd4>
   11790:	ldr	r3, [sp, #20]
   11794:	ldr	r2, [sp, #428]	; 0x1ac
   11798:	ldr	r3, [r3]
   1179c:	cmp	r2, r3
   117a0:	bne	1183c <__assert_fail@plt+0xdd0>
   117a4:	add	sp, sp, #436	; 0x1b4
   117a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   117ac:	movw	r1, #7040	; 0x1b80
   117b0:	movt	r1, #1
   117b4:	bl	11360 <__assert_fail@plt+0x8f4>
   117b8:	mvn	r0, #0
   117bc:	b	11790 <__assert_fail@plt+0xd24>
   117c0:	mov	r2, r6
   117c4:	movw	r1, #7196	; 0x1c1c
   117c8:	movt	r1, #1
   117cc:	bl	11360 <__assert_fail@plt+0x8f4>
   117d0:	b	117b8 <__assert_fail@plt+0xd4c>
   117d4:	mov	r2, r6
   117d8:	movw	r1, #7076	; 0x1ba4
   117dc:	movt	r1, #1
   117e0:	bl	11360 <__assert_fail@plt+0x8f4>
   117e4:	b	117b8 <__assert_fail@plt+0xd4c>
   117e8:	mov	r1, sl
   117ec:	add	r2, sp, #228	; 0xe4
   117f0:	mov	r3, #200	; 0xc8
   117f4:	bl	10934 <regerror@plt>
   117f8:	add	r2, sp, #228	; 0xe4
   117fc:	str	r4, [sp]
   11800:	mov	r0, #0
   11804:	movw	r3, #7244	; 0x1c4c
   11808:	movw	r1, #7252	; 0x1c54
   1180c:	movt	r3, #1
   11810:	movt	r1, #1
   11814:	bl	11360 <__assert_fail@plt+0x8f4>
   11818:	mov	r0, r5
   1181c:	bl	10940 <free@plt>
   11820:	b	117b8 <__assert_fail@plt+0xd4c>
   11824:	mov	r2, r6
   11828:	mov	r0, r4
   1182c:	movw	r1, #7148	; 0x1bec
   11830:	movt	r1, #1
   11834:	bl	11360 <__assert_fail@plt+0x8f4>
   11838:	b	117b8 <__assert_fail@plt+0xd4c>
   1183c:	bl	10970 <__stack_chk_fail@plt>
   11840:	mov	r0, r8
   11844:	bl	10964 <ftell@plt>
   11848:	movw	r1, #7284	; 0x1c74
   1184c:	movt	r1, #1
   11850:	mov	r2, r0
   11854:	mov	r0, r5
   11858:	bl	11360 <__assert_fail@plt+0x8f4>
   1185c:	b	117b8 <__assert_fail@plt+0xd4c>
   11860:	push	{r4, lr}
   11864:	movw	r3, #12452	; 0x30a4
   11868:	movw	r4, #12032	; 0x2f00
   1186c:	movt	r3, #2
   11870:	movt	r4, #2
   11874:	sub	sp, sp, #40	; 0x28
   11878:	ldr	r2, [r3]
   1187c:	movw	r1, #12472	; 0x30b8
   11880:	add	r3, sp, #40	; 0x28
   11884:	ldr	ip, [r4]
   11888:	movt	r1, #2
   1188c:	str	r0, [r3, #-28]!	; 0xffffffe4
   11890:	mov	r0, r3
   11894:	ldr	r1, [r1]
   11898:	movw	r3, #4760	; 0x1298
   1189c:	movt	r3, #1
   118a0:	str	r3, [sp]
   118a4:	mov	r3, #24
   118a8:	str	ip, [sp, #36]	; 0x24
   118ac:	bl	10a24 <bsearch@plt>
   118b0:	ldr	r2, [sp, #36]	; 0x24
   118b4:	ldr	r3, [r4]
   118b8:	cmp	r2, r3
   118bc:	bne	118c8 <__assert_fail@plt+0xe5c>
   118c0:	add	sp, sp, #40	; 0x28
   118c4:	pop	{r4, pc}
   118c8:	bl	10970 <__stack_chk_fail@plt>
   118cc:	cmp	r1, #0
   118d0:	movw	r3, #4780	; 0x12ac
   118d4:	movw	ip, #6240	; 0x1860
   118d8:	movt	r3, #1
   118dc:	movt	ip, #1
   118e0:	push	{r4, r5, r6, lr}
   118e4:	movne	r1, r3
   118e8:	moveq	r1, ip
   118ec:	mov	r4, r2
   118f0:	mov	r5, r0
   118f4:	blx	r1
   118f8:	mov	r3, r4
   118fc:	cmp	r0, #0
   11900:	beq	1191c <__assert_fail@plt+0xeb0>
   11904:	ldr	r2, [r0, #4]
   11908:	movw	r1, #7336	; 0x1ca8
   1190c:	mov	r0, #1
   11910:	movt	r1, #1
   11914:	pop	{r4, r5, r6, lr}
   11918:	b	10a30 <__printf_chk@plt>
   1191c:	mov	r2, r5
   11920:	movw	r1, #7344	; 0x1cb0
   11924:	mov	r0, #1
   11928:	movt	r1, #1
   1192c:	pop	{r4, r5, r6, lr}
   11930:	b	10a30 <__printf_chk@plt>
   11934:	push	{r4, r5, r6, lr}
   11938:	mov	r4, r0
   1193c:	mov	r3, r4
   11940:	mov	r0, r1
   11944:	mov	r1, #1
   11948:	mov	r5, r2
   1194c:	bl	109a0 <fread@plt>
   11950:	cmp	r0, #0
   11954:	beq	11968 <__assert_fail@plt+0xefc>
   11958:	cmp	r5, r0
   1195c:	bne	11970 <__assert_fail@plt+0xf04>
   11960:	mov	r0, #0
   11964:	pop	{r4, r5, r6, pc}
   11968:	mov	r0, #1
   1196c:	pop	{r4, r5, r6, pc}
   11970:	mov	r0, r4
   11974:	bl	10964 <ftell@plt>
   11978:	movw	r1, #7352	; 0x1cb8
   1197c:	movt	r1, #1
   11980:	mov	r2, r0
   11984:	mov	r0, #0
   11988:	bl	11360 <__assert_fail@plt+0x8f4>
   1198c:	mvn	r0, #0
   11990:	pop	{r4, r5, r6, pc}
   11994:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11998:	mov	r7, r0
   1199c:	ldr	r6, [pc, #76]	; 119f0 <__assert_fail@plt+0xf84>
   119a0:	mov	r8, r1
   119a4:	ldr	r5, [pc, #72]	; 119f4 <__assert_fail@plt+0xf88>
   119a8:	mov	r9, r2
   119ac:	add	r6, pc, r6
   119b0:	bl	108e4 <calloc@plt-0x20>
   119b4:	add	r5, pc, r5
   119b8:	rsb	r6, r5, r6
   119bc:	asrs	r6, r6, #2
   119c0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   119c4:	sub	r5, r5, #4
   119c8:	mov	r4, #0
   119cc:	add	r4, r4, #1
   119d0:	ldr	r3, [r5, #4]!
   119d4:	mov	r0, r7
   119d8:	mov	r1, r8
   119dc:	mov	r2, r9
   119e0:	blx	r3
   119e4:	cmp	r4, r6
   119e8:	bne	119cc <__assert_fail@plt+0xf60>
   119ec:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   119f0:	andeq	r1, r1, r8, asr #10
   119f4:	andeq	r1, r1, ip, lsr r5
   119f8:	bx	lr

Disassembly of section .fini:

000119fc <.fini>:
   119fc:	push	{r3, lr}
   11a00:	pop	{r3, pc}
