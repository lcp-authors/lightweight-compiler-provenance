
centos-preinstalled/nproc:     file format elf32-littlearm


Disassembly of section .init:

00010f30 <.init>:
   10f30:	push	{r3, lr}
   10f34:	bl	1148c <__assert_fail@plt+0x29c>
   10f38:	pop	{r3, pc}

Disassembly of section .plt:

00010f3c <fdopen@plt-0x14>:
   10f3c:	push	{lr}		; (str lr, [sp, #-4]!)
   10f40:	ldr	lr, [pc, #4]	; 10f4c <fdopen@plt-0x4>
   10f44:	add	lr, pc, lr
   10f48:	ldr	pc, [lr, #8]!
   10f4c:	strheq	r5, [r1], -r4

00010f50 <fdopen@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #86016	; 0x15000
   10f58:	ldr	pc, [ip, #180]!	; 0xb4

00010f5c <calloc@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #86016	; 0x15000
   10f64:	ldr	pc, [ip, #172]!	; 0xac

00010f68 <fputs_unlocked@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #86016	; 0x15000
   10f70:	ldr	pc, [ip, #164]!	; 0xa4

00010f74 <raise@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #86016	; 0x15000
   10f7c:	ldr	pc, [ip, #156]!	; 0x9c

00010f80 <strcmp@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #86016	; 0x15000
   10f88:	ldr	pc, [ip, #148]!	; 0x94

00010f8c <fflush@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #86016	; 0x15000
   10f94:	ldr	pc, [ip, #140]!	; 0x8c

00010f98 <free@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #86016	; 0x15000
   10fa0:	ldr	pc, [ip, #132]!	; 0x84

00010fa4 <_exit@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #86016	; 0x15000
   10fac:	ldr	pc, [ip, #124]!	; 0x7c

00010fb0 <memcpy@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #86016	; 0x15000
   10fb8:	ldr	pc, [ip, #116]!	; 0x74

00010fbc <mbsinit@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #86016	; 0x15000
   10fc4:	ldr	pc, [ip, #108]!	; 0x6c

00010fc8 <__sched_cpucount@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #86016	; 0x15000
   10fd0:	ldr	pc, [ip, #100]!	; 0x64

00010fd4 <memcmp@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #86016	; 0x15000
   10fdc:	ldr	pc, [ip, #92]!	; 0x5c

00010fe0 <dcgettext@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #86016	; 0x15000
   10fe8:	ldr	pc, [ip, #84]!	; 0x54

00010fec <__stack_chk_fail@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #86016	; 0x15000
   10ff4:	ldr	pc, [ip, #76]!	; 0x4c

00010ff8 <sysconf@plt>:
   10ff8:	add	ip, pc, #0, 12
   10ffc:	add	ip, ip, #86016	; 0x15000
   11000:	ldr	pc, [ip, #68]!	; 0x44

00011004 <realloc@plt>:
   11004:	add	ip, pc, #0, 12
   11008:	add	ip, ip, #86016	; 0x15000
   1100c:	ldr	pc, [ip, #60]!	; 0x3c

00011010 <textdomain@plt>:
   11010:	add	ip, pc, #0, 12
   11014:	add	ip, ip, #86016	; 0x15000
   11018:	ldr	pc, [ip, #52]!	; 0x34

0001101c <iswprint@plt>:
   1101c:	add	ip, pc, #0, 12
   11020:	add	ip, ip, #86016	; 0x15000
   11024:	ldr	pc, [ip, #44]!	; 0x2c

00011028 <fwrite@plt>:
   11028:	add	ip, pc, #0, 12
   1102c:	add	ip, ip, #86016	; 0x15000
   11030:	ldr	pc, [ip, #36]!	; 0x24

00011034 <lseek64@plt>:
   11034:	add	ip, pc, #0, 12
   11038:	add	ip, ip, #86016	; 0x15000
   1103c:	ldr	pc, [ip, #28]!

00011040 <__ctype_get_mb_cur_max@plt>:
   11040:	add	ip, pc, #0, 12
   11044:	add	ip, ip, #86016	; 0x15000
   11048:	ldr	pc, [ip, #20]!

0001104c <strcpy@plt>:
   1104c:	add	ip, pc, #0, 12
   11050:	add	ip, ip, #86016	; 0x15000
   11054:	ldr	pc, [ip, #12]!

00011058 <__fpending@plt>:
   11058:	add	ip, pc, #0, 12
   1105c:	add	ip, ip, #86016	; 0x15000
   11060:	ldr	pc, [ip, #4]!

00011064 <mbrtowc@plt>:
   11064:	add	ip, pc, #0, 12
   11068:	add	ip, ip, #20, 20	; 0x14000
   1106c:	ldr	pc, [ip, #4092]!	; 0xffc

00011070 <error@plt>:
   11070:	add	ip, pc, #0, 12
   11074:	add	ip, ip, #20, 20	; 0x14000
   11078:	ldr	pc, [ip, #4084]!	; 0xff4

0001107c <open64@plt>:
   1107c:	add	ip, pc, #0, 12
   11080:	add	ip, ip, #20, 20	; 0x14000
   11084:	ldr	pc, [ip, #4076]!	; 0xfec

00011088 <getenv@plt>:
   11088:	add	ip, pc, #0, 12
   1108c:	add	ip, ip, #20, 20	; 0x14000
   11090:	ldr	pc, [ip, #4068]!	; 0xfe4

00011094 <malloc@plt>:
   11094:	add	ip, pc, #0, 12
   11098:	add	ip, ip, #20, 20	; 0x14000
   1109c:	ldr	pc, [ip, #4060]!	; 0xfdc

000110a0 <__libc_start_main@plt>:
   110a0:	add	ip, pc, #0, 12
   110a4:	add	ip, ip, #20, 20	; 0x14000
   110a8:	ldr	pc, [ip, #4052]!	; 0xfd4

000110ac <__freading@plt>:
   110ac:	add	ip, pc, #0, 12
   110b0:	add	ip, ip, #20, 20	; 0x14000
   110b4:	ldr	pc, [ip, #4044]!	; 0xfcc

000110b8 <__gmon_start__@plt>:
   110b8:	add	ip, pc, #0, 12
   110bc:	add	ip, ip, #20, 20	; 0x14000
   110c0:	ldr	pc, [ip, #4036]!	; 0xfc4

000110c4 <getopt_long@plt>:
   110c4:	add	ip, pc, #0, 12
   110c8:	add	ip, ip, #20, 20	; 0x14000
   110cc:	ldr	pc, [ip, #4028]!	; 0xfbc

000110d0 <__ctype_b_loc@plt>:
   110d0:	add	ip, pc, #0, 12
   110d4:	add	ip, ip, #20, 20	; 0x14000
   110d8:	ldr	pc, [ip, #4020]!	; 0xfb4

000110dc <exit@plt>:
   110dc:	add	ip, pc, #0, 12
   110e0:	add	ip, ip, #20, 20	; 0x14000
   110e4:	ldr	pc, [ip, #4012]!	; 0xfac

000110e8 <strtoul@plt>:
   110e8:	add	ip, pc, #0, 12
   110ec:	add	ip, ip, #20, 20	; 0x14000
   110f0:	ldr	pc, [ip, #4004]!	; 0xfa4

000110f4 <strlen@plt>:
   110f4:	add	ip, pc, #0, 12
   110f8:	add	ip, ip, #20, 20	; 0x14000
   110fc:	ldr	pc, [ip, #3996]!	; 0xf9c

00011100 <strchr@plt>:
   11100:	add	ip, pc, #0, 12
   11104:	add	ip, ip, #20, 20	; 0x14000
   11108:	ldr	pc, [ip, #3988]!	; 0xf94

0001110c <ungetc@plt>:
   1110c:	add	ip, pc, #0, 12
   11110:	add	ip, ip, #20, 20	; 0x14000
   11114:	ldr	pc, [ip, #3980]!	; 0xf8c

00011118 <__errno_location@plt>:
   11118:	add	ip, pc, #0, 12
   1111c:	add	ip, ip, #20, 20	; 0x14000
   11120:	ldr	pc, [ip, #3972]!	; 0xf84

00011124 <__cxa_atexit@plt>:
   11124:	add	ip, pc, #0, 12
   11128:	add	ip, ip, #20, 20	; 0x14000
   1112c:	ldr	pc, [ip, #3964]!	; 0xf7c

00011130 <memset@plt>:
   11130:	add	ip, pc, #0, 12
   11134:	add	ip, ip, #20, 20	; 0x14000
   11138:	ldr	pc, [ip, #3956]!	; 0xf74

0001113c <fscanf@plt>:
   1113c:	add	ip, pc, #0, 12
   11140:	add	ip, ip, #20, 20	; 0x14000
   11144:	ldr	pc, [ip, #3948]!	; 0xf6c

00011148 <__printf_chk@plt>:
   11148:	add	ip, pc, #0, 12
   1114c:	add	ip, ip, #20, 20	; 0x14000
   11150:	ldr	pc, [ip, #3940]!	; 0xf64

00011154 <fileno@plt>:
   11154:	add	ip, pc, #0, 12
   11158:	add	ip, ip, #20, 20	; 0x14000
   1115c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011160 <__fprintf_chk@plt>:
   11160:	add	ip, pc, #0, 12
   11164:	add	ip, ip, #20, 20	; 0x14000
   11168:	ldr	pc, [ip, #3924]!	; 0xf54

0001116c <fclose@plt>:
   1116c:	add	ip, pc, #0, 12
   11170:	add	ip, ip, #20, 20	; 0x14000
   11174:	ldr	pc, [ip, #3916]!	; 0xf4c

00011178 <fseeko64@plt>:
   11178:	add	ip, pc, #0, 12
   1117c:	add	ip, ip, #20, 20	; 0x14000
   11180:	ldr	pc, [ip, #3908]!	; 0xf44

00011184 <__uflow@plt>:
   11184:	add	ip, pc, #0, 12
   11188:	add	ip, ip, #20, 20	; 0x14000
   1118c:	ldr	pc, [ip, #3900]!	; 0xf3c

00011190 <setlocale@plt>:
   11190:	add	ip, pc, #0, 12
   11194:	add	ip, ip, #20, 20	; 0x14000
   11198:	ldr	pc, [ip, #3892]!	; 0xf34

0001119c <strrchr@plt>:
   1119c:	add	ip, pc, #0, 12
   111a0:	add	ip, ip, #20, 20	; 0x14000
   111a4:	ldr	pc, [ip, #3884]!	; 0xf2c

000111a8 <nl_langinfo@plt>:
   111a8:	add	ip, pc, #0, 12
   111ac:	add	ip, ip, #20, 20	; 0x14000
   111b0:	ldr	pc, [ip, #3876]!	; 0xf24

000111b4 <sched_getaffinity@plt>:
   111b4:	add	ip, pc, #0, 12
   111b8:	add	ip, ip, #20, 20	; 0x14000
   111bc:	ldr	pc, [ip, #3868]!	; 0xf1c

000111c0 <bindtextdomain@plt>:
   111c0:	add	ip, pc, #0, 12
   111c4:	add	ip, ip, #20, 20	; 0x14000
   111c8:	ldr	pc, [ip, #3860]!	; 0xf14

000111cc <strncmp@plt>:
   111cc:	add	ip, pc, #0, 12
   111d0:	add	ip, ip, #20, 20	; 0x14000
   111d4:	ldr	pc, [ip, #3852]!	; 0xf0c

000111d8 <abort@plt>:
   111d8:	add	ip, pc, #0, 12
   111dc:	add	ip, ip, #20, 20	; 0x14000
   111e0:	ldr	pc, [ip, #3844]!	; 0xf04

000111e4 <close@plt>:
   111e4:	add	ip, pc, #0, 12
   111e8:	add	ip, ip, #20, 20	; 0x14000
   111ec:	ldr	pc, [ip, #3836]!	; 0xefc

000111f0 <__assert_fail@plt>:
   111f0:	add	ip, pc, #0, 12
   111f4:	add	ip, ip, #20, 20	; 0x14000
   111f8:	ldr	pc, [ip, #3828]!	; 0xef4

Disassembly of section .text:

000111fc <close_stdout@@Base-0x5ac>:
   111fc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11200:	sub	sp, sp, #28
   11204:	ldr	r4, [pc, #512]	; 1140c <__assert_fail@plt+0x21c>
   11208:	add	r6, sp, #24
   1120c:	ldr	r2, [pc, #508]	; 11410 <__assert_fail@plt+0x220>
   11210:	mov	r3, #0
   11214:	add	r4, pc, r4
   11218:	ldr	fp, [pc, #500]	; 11414 <__assert_fail@plt+0x224>
   1121c:	mov	sl, r3
   11220:	mov	r9, r0
   11224:	ldr	r2, [r4, r2]
   11228:	add	fp, pc, fp
   1122c:	str	r3, [r6, #-8]!
   11230:	mov	r3, #2
   11234:	str	r3, [sp, #12]
   11238:	mov	r5, r1
   1123c:	ldr	r3, [r2]
   11240:	mov	r8, fp
   11244:	ldr	r2, [pc, #460]	; 11418 <__assert_fail@plt+0x228>
   11248:	ldr	r0, [r1]
   1124c:	ldr	r7, [pc, #456]	; 1141c <__assert_fail@plt+0x22c>
   11250:	add	r2, pc, r2
   11254:	str	r3, [sp, #20]
   11258:	str	r2, [sp, #8]
   1125c:	bl	11b44 <close_stdout@@Base+0x39c>
   11260:	mov	r1, fp
   11264:	mov	r0, #6
   11268:	bl	11190 <setlocale@plt>
   1126c:	add	r7, pc, r7
   11270:	ldr	r1, [pc, #424]	; 11420 <__assert_fail@plt+0x230>
   11274:	mov	r0, r7
   11278:	add	r1, pc, r1
   1127c:	bl	111c0 <bindtextdomain@plt>
   11280:	mov	r0, r7
   11284:	bl	11010 <textdomain@plt>
   11288:	ldr	r3, [pc, #404]	; 11424 <__assert_fail@plt+0x234>
   1128c:	ldr	r0, [r4, r3]
   11290:	bl	149b0 <close_stdout@@Base+0x3208>
   11294:	str	sl, [sp]
   11298:	mov	r0, r9
   1129c:	mov	r1, r5
   112a0:	mov	r2, r8
   112a4:	ldr	r3, [sp, #8]
   112a8:	mov	r7, #0
   112ac:	bl	110c4 <getopt_long@plt>
   112b0:	cmn	r0, #1
   112b4:	beq	11380 <__assert_fail@plt+0x190>
   112b8:	cmn	r0, #2
   112bc:	beq	113d4 <__assert_fail@plt+0x1e4>
   112c0:	ble	11338 <__assert_fail@plt+0x148>
   112c4:	cmp	r0, #256	; 0x100
   112c8:	beq	11330 <__assert_fail@plt+0x140>
   112cc:	movw	r3, #257	; 0x101
   112d0:	cmp	r0, r3
   112d4:	bne	113cc <__assert_fail@plt+0x1dc>
   112d8:	ldr	r0, [pc, #328]	; 11428 <__assert_fail@plt+0x238>
   112dc:	mov	r1, r7
   112e0:	mov	r2, #10
   112e4:	mov	r3, r6
   112e8:	ldr	fp, [r4, r0]
   112ec:	str	r8, [sp]
   112f0:	ldr	r0, [fp]
   112f4:	bl	13bac <close_stdout@@Base+0x2404>
   112f8:	cmp	r0, #0
   112fc:	beq	11294 <__assert_fail@plt+0xa4>
   11300:	ldr	r1, [pc, #292]	; 1142c <__assert_fail@plt+0x23c>
   11304:	mov	r2, #5
   11308:	mov	r0, r7
   1130c:	add	r1, pc, r1
   11310:	bl	10fe0 <dcgettext@plt>
   11314:	mov	r1, r7
   11318:	ldr	r3, [fp]
   1131c:	mov	r2, r0
   11320:	mov	r0, r7
   11324:	bl	11070 <error@plt>
   11328:	mov	r0, #1
   1132c:	bl	11584 <__assert_fail@plt+0x394>
   11330:	str	r7, [sp, #12]
   11334:	b	11294 <__assert_fail@plt+0xa4>
   11338:	cmn	r0, #3
   1133c:	bne	113cc <__assert_fail@plt+0x1dc>
   11340:	ldr	r1, [pc, #232]	; 11430 <__assert_fail@plt+0x240>
   11344:	ldr	r3, [pc, #232]	; 11434 <__assert_fail@plt+0x244>
   11348:	ldr	r2, [pc, #232]	; 11438 <__assert_fail@plt+0x248>
   1134c:	ldr	r0, [r4, r1]
   11350:	ldr	r3, [r4, r3]
   11354:	add	r2, pc, r2
   11358:	ldr	r1, [pc, #220]	; 1143c <__assert_fail@plt+0x24c>
   1135c:	ldr	r0, [r0]
   11360:	ldr	r3, [r3]
   11364:	add	r1, pc, r1
   11368:	stm	sp, {r2, r7}
   1136c:	ldr	r2, [pc, #204]	; 11440 <__assert_fail@plt+0x250>
   11370:	add	r2, pc, r2
   11374:	bl	13830 <close_stdout@@Base+0x2088>
   11378:	mov	r0, r7
   1137c:	bl	110dc <exit@plt>
   11380:	ldr	r3, [pc, #188]	; 11444 <__assert_fail@plt+0x254>
   11384:	ldr	r4, [r4, r3]
   11388:	ldr	r3, [r4]
   1138c:	cmp	r9, r3
   11390:	beq	113dc <__assert_fail@plt+0x1ec>
   11394:	ldr	r1, [pc, #172]	; 11448 <__assert_fail@plt+0x258>
   11398:	mov	r2, #5
   1139c:	mov	r0, r7
   113a0:	add	r1, pc, r1
   113a4:	bl	10fe0 <dcgettext@plt>
   113a8:	ldr	r3, [r4]
   113ac:	mov	r6, r0
   113b0:	ldr	r0, [r5, r3, lsl #2]
   113b4:	bl	13394 <close_stdout@@Base+0x1bec>
   113b8:	mov	r1, r7
   113bc:	mov	r2, r6
   113c0:	mov	r3, r0
   113c4:	mov	r0, r7
   113c8:	bl	11070 <error@plt>
   113cc:	mov	r0, #1
   113d0:	bl	11584 <__assert_fail@plt+0x394>
   113d4:	mov	r0, r7
   113d8:	bl	11584 <__assert_fail@plt+0x394>
   113dc:	ldr	r0, [sp, #12]
   113e0:	bl	119e0 <close_stdout@@Base+0x238>
   113e4:	ldr	r3, [sp, #16]
   113e8:	ldr	r1, [pc, #92]	; 1144c <__assert_fail@plt+0x25c>
   113ec:	add	r1, pc, r1
   113f0:	cmp	r0, r3
   113f4:	rsbhi	r2, r3, r0
   113f8:	mov	r0, #1
   113fc:	movls	r2, #1
   11400:	bl	11148 <__printf_chk@plt>
   11404:	mov	r0, #0
   11408:	bl	110dc <exit@plt>
   1140c:	andeq	r4, r1, r4, ror #27
   11410:	strdeq	r0, [r0], -r4
   11414:	andeq	r3, r0, r4, lsr sl
   11418:	andeq	r4, r1, ip, lsr ip
   1141c:	andeq	r3, r0, r0, lsr r9
   11420:	andeq	r3, r0, r8, ror #19
   11424:	andeq	r0, r0, r4, lsl #2
   11428:	andeq	r0, r0, r8, lsr #2
   1142c:	andeq	r3, r0, r4, lsl #19
   11430:	andeq	r0, r0, r0, lsl r1
   11434:	strdeq	r0, [r0], -ip
   11438:	andeq	r3, r0, r8, lsr #18
   1143c:	andeq	r3, r0, r0, lsl r9
   11440:	andeq	r3, r0, r8, lsr #16
   11444:	strdeq	r0, [r0], -r8
   11448:	andeq	r3, r0, r0, lsl r9
   1144c:	ldrdeq	r3, [r0], -r8
   11450:	mov	fp, #0
   11454:	mov	lr, #0
   11458:	pop	{r1}		; (ldr r1, [sp], #4)
   1145c:	mov	r2, sp
   11460:	push	{r2}		; (str r2, [sp, #-4]!)
   11464:	push	{r0}		; (str r0, [sp, #-4]!)
   11468:	ldr	ip, [pc, #16]	; 11480 <__assert_fail@plt+0x290>
   1146c:	push	{ip}		; (str ip, [sp, #-4]!)
   11470:	ldr	r0, [pc, #12]	; 11484 <__assert_fail@plt+0x294>
   11474:	ldr	r3, [pc, #12]	; 11488 <__assert_fail@plt+0x298>
   11478:	bl	110a0 <__libc_start_main@plt>
   1147c:	bl	111d8 <abort@plt>
   11480:	andeq	r4, r1, ip, lsr #19
   11484:	strdeq	r1, [r1], -ip
   11488:	andeq	r4, r1, r8, asr #18
   1148c:	ldr	r3, [pc, #20]	; 114a8 <__assert_fail@plt+0x2b8>
   11490:	ldr	r2, [pc, #20]	; 114ac <__assert_fail@plt+0x2bc>
   11494:	add	r3, pc, r3
   11498:	ldr	r2, [r3, r2]
   1149c:	cmp	r2, #0
   114a0:	bxeq	lr
   114a4:	b	110b8 <__gmon_start__@plt>
   114a8:	andeq	r4, r1, r4, ror #22
   114ac:	andeq	r0, r0, r8, lsl #2
   114b0:	push	{r3, lr}
   114b4:	movw	r0, #24952	; 0x6178
   114b8:	ldr	r3, [pc, #36]	; 114e4 <__assert_fail@plt+0x2f4>
   114bc:	movt	r0, #2
   114c0:	rsb	r3, r0, r3
   114c4:	cmp	r3, #6
   114c8:	popls	{r3, pc}
   114cc:	movw	r3, #0
   114d0:	movt	r3, #0
   114d4:	cmp	r3, #0
   114d8:	popeq	{r3, pc}
   114dc:	blx	r3
   114e0:	pop	{r3, pc}
   114e4:	andeq	r6, r2, fp, ror r1
   114e8:	push	{r3, lr}
   114ec:	movw	r0, #24952	; 0x6178
   114f0:	movw	r3, #24952	; 0x6178
   114f4:	movt	r0, #2
   114f8:	movt	r3, #2
   114fc:	rsb	r3, r0, r3
   11500:	asr	r3, r3, #2
   11504:	add	r3, r3, r3, lsr #31
   11508:	asrs	r1, r3, #1
   1150c:	popeq	{r3, pc}
   11510:	movw	r2, #0
   11514:	movt	r2, #0
   11518:	cmp	r2, #0
   1151c:	popeq	{r3, pc}
   11520:	blx	r2
   11524:	pop	{r3, pc}
   11528:	push	{r4, lr}
   1152c:	movw	r4, #24952	; 0x6178
   11530:	movt	r4, #2
   11534:	ldrb	r3, [r4]
   11538:	cmp	r3, #0
   1153c:	popne	{r4, pc}
   11540:	bl	114b0 <__assert_fail@plt+0x2c0>
   11544:	mov	r3, #1
   11548:	strb	r3, [r4]
   1154c:	pop	{r4, pc}
   11550:	movw	r0, #24208	; 0x5e90
   11554:	movt	r0, #2
   11558:	push	{r3, lr}
   1155c:	ldr	r3, [r0]
   11560:	cmp	r3, #0
   11564:	beq	1157c <__assert_fail@plt+0x38c>
   11568:	movw	r3, #0
   1156c:	movt	r3, #0
   11570:	cmp	r3, #0
   11574:	beq	1157c <__assert_fail@plt+0x38c>
   11578:	blx	r3
   1157c:	pop	{r3, lr}
   11580:	b	114e8 <__assert_fail@plt+0x2f8>
   11584:	push	{r4, r5, r6, lr}
   11588:	subs	r4, r0, #0
   1158c:	ldr	r5, [pc, #428]	; 11740 <__assert_fail@plt+0x550>
   11590:	add	r5, pc, r5
   11594:	beq	115dc <__assert_fail@plt+0x3ec>
   11598:	ldr	r3, [pc, #420]	; 11744 <__assert_fail@plt+0x554>
   1159c:	mov	r2, #5
   115a0:	ldr	r1, [pc, #416]	; 11748 <__assert_fail@plt+0x558>
   115a4:	mov	r0, #0
   115a8:	ldr	r3, [r5, r3]
   115ac:	add	r1, pc, r1
   115b0:	ldr	r6, [r3]
   115b4:	bl	10fe0 <dcgettext@plt>
   115b8:	ldr	r3, [pc, #396]	; 1174c <__assert_fail@plt+0x55c>
   115bc:	mov	r1, #1
   115c0:	ldr	r3, [r5, r3]
   115c4:	ldr	r3, [r3]
   115c8:	mov	r2, r0
   115cc:	mov	r0, r6
   115d0:	bl	11160 <__fprintf_chk@plt>
   115d4:	mov	r0, r4
   115d8:	bl	110dc <exit@plt>
   115dc:	ldr	r1, [pc, #364]	; 11750 <__assert_fail@plt+0x560>
   115e0:	mov	r2, #5
   115e4:	add	r1, pc, r1
   115e8:	bl	10fe0 <dcgettext@plt>
   115ec:	ldr	r3, [pc, #344]	; 1174c <__assert_fail@plt+0x55c>
   115f0:	ldr	r6, [r5, r3]
   115f4:	ldr	r2, [r6]
   115f8:	mov	r1, r0
   115fc:	mov	r0, #1
   11600:	bl	11148 <__printf_chk@plt>
   11604:	ldr	r1, [pc, #328]	; 11754 <__assert_fail@plt+0x564>
   11608:	mov	r2, #5
   1160c:	mov	r0, r4
   11610:	add	r1, pc, r1
   11614:	bl	10fe0 <dcgettext@plt>
   11618:	ldr	r3, [pc, #312]	; 11758 <__assert_fail@plt+0x568>
   1161c:	ldr	r5, [r5, r3]
   11620:	ldr	r1, [r5]
   11624:	bl	10f68 <fputs_unlocked@plt>
   11628:	ldr	r1, [pc, #300]	; 1175c <__assert_fail@plt+0x56c>
   1162c:	mov	r2, #5
   11630:	mov	r0, r4
   11634:	add	r1, pc, r1
   11638:	bl	10fe0 <dcgettext@plt>
   1163c:	ldr	r1, [r5]
   11640:	bl	10f68 <fputs_unlocked@plt>
   11644:	ldr	r1, [pc, #276]	; 11760 <__assert_fail@plt+0x570>
   11648:	mov	r2, #5
   1164c:	mov	r0, r4
   11650:	add	r1, pc, r1
   11654:	bl	10fe0 <dcgettext@plt>
   11658:	ldr	r1, [r5]
   1165c:	bl	10f68 <fputs_unlocked@plt>
   11660:	ldr	r1, [pc, #252]	; 11764 <__assert_fail@plt+0x574>
   11664:	mov	r2, #5
   11668:	mov	r0, r4
   1166c:	add	r1, pc, r1
   11670:	bl	10fe0 <dcgettext@plt>
   11674:	ldr	r1, [r5]
   11678:	bl	10f68 <fputs_unlocked@plt>
   1167c:	ldr	r1, [pc, #228]	; 11768 <__assert_fail@plt+0x578>
   11680:	mov	r2, #5
   11684:	mov	r0, r4
   11688:	add	r1, pc, r1
   1168c:	bl	10fe0 <dcgettext@plt>
   11690:	ldr	r2, [pc, #212]	; 1176c <__assert_fail@plt+0x57c>
   11694:	ldr	r3, [pc, #212]	; 11770 <__assert_fail@plt+0x580>
   11698:	add	r2, pc, r2
   1169c:	add	r3, pc, r3
   116a0:	mov	r1, r0
   116a4:	mov	r0, #1
   116a8:	bl	11148 <__printf_chk@plt>
   116ac:	mov	r0, #5
   116b0:	mov	r1, r4
   116b4:	bl	11190 <setlocale@plt>
   116b8:	cmp	r0, #0
   116bc:	beq	116d8 <__assert_fail@plt+0x4e8>
   116c0:	ldr	r1, [pc, #172]	; 11774 <__assert_fail@plt+0x584>
   116c4:	mov	r2, #3
   116c8:	add	r1, pc, r1
   116cc:	bl	111cc <strncmp@plt>
   116d0:	cmp	r0, #0
   116d4:	bne	1170c <__assert_fail@plt+0x51c>
   116d8:	ldr	r1, [pc, #152]	; 11778 <__assert_fail@plt+0x588>
   116dc:	mov	r2, #5
   116e0:	mov	r0, #0
   116e4:	add	r1, pc, r1
   116e8:	bl	10fe0 <dcgettext@plt>
   116ec:	mov	r5, r0
   116f0:	ldr	r0, [r6]
   116f4:	bl	118c0 <close_stdout@@Base+0x118>
   116f8:	mov	r1, r5
   116fc:	mov	r2, r0
   11700:	mov	r0, #1
   11704:	bl	11148 <__printf_chk@plt>
   11708:	b	115d4 <__assert_fail@plt+0x3e4>
   1170c:	ldr	r1, [pc, #104]	; 1177c <__assert_fail@plt+0x58c>
   11710:	mov	r2, #5
   11714:	mov	r0, r4
   11718:	add	r1, pc, r1
   1171c:	bl	10fe0 <dcgettext@plt>
   11720:	mov	r5, r0
   11724:	ldr	r0, [r6]
   11728:	bl	118c0 <close_stdout@@Base+0x118>
   1172c:	mov	r1, r5
   11730:	mov	r2, r0
   11734:	mov	r0, #1
   11738:	bl	11148 <__printf_chk@plt>
   1173c:	b	116d8 <__assert_fail@plt+0x4e8>
   11740:	andeq	r4, r1, r8, ror #20
   11744:	andeq	r0, r0, r0, lsl #2
   11748:	andeq	r3, r0, r8, lsr r4
   1174c:	andeq	r0, r0, ip, lsl r1
   11750:	andeq	r3, r0, r8, lsr #8
   11754:	andeq	r3, r0, r4, lsl r4
   11758:	andeq	r0, r0, r0, lsl r1
   1175c:	andeq	r3, r0, r0, ror r4
   11760:	andeq	r3, r0, r8, asr #9
   11764:	ldrdeq	r3, [r0], -ip
   11768:	strdeq	r3, [r0], -r8
   1176c:	andeq	r3, r0, r0, lsl #10
   11770:	andeq	r3, r0, ip, lsl #10
   11774:	andeq	r3, r0, r8, lsl #10
   11778:	andeq	r3, r0, r8, lsr r5
   1177c:			; <UNDEFINED> instruction: 0x000034bc
   11780:	ldr	r3, [pc, #8]	; 11790 <__assert_fail@plt+0x5a0>
   11784:	add	r3, pc, r3
   11788:	str	r0, [r3]
   1178c:	bx	lr
   11790:	strdeq	r4, [r1], -r0
   11794:	ldr	r3, [pc, #8]	; 117a4 <__assert_fail@plt+0x5b4>
   11798:	add	r3, pc, r3
   1179c:	strb	r0, [r3, #4]
   117a0:	bx	lr
   117a4:	ldrdeq	r4, [r1], -ip

000117a8 <close_stdout@@Base>:
   117a8:	push	{r4, r5, r6, r7, lr}
   117ac:	sub	sp, sp, #12
   117b0:	ldr	r4, [pc, #228]	; 1189c <close_stdout@@Base+0xf4>
   117b4:	ldr	r3, [pc, #228]	; 118a0 <close_stdout@@Base+0xf8>
   117b8:	add	r4, pc, r4
   117bc:	ldr	r3, [r4, r3]
   117c0:	ldr	r0, [r3]
   117c4:	bl	140e4 <close_stdout@@Base+0x293c>
   117c8:	cmp	r0, #0
   117cc:	beq	117f4 <close_stdout@@Base+0x4c>
   117d0:	ldr	r3, [pc, #204]	; 118a4 <close_stdout@@Base+0xfc>
   117d4:	add	r3, pc, r3
   117d8:	ldrb	r3, [r3, #4]
   117dc:	cmp	r3, #0
   117e0:	beq	11814 <close_stdout@@Base+0x6c>
   117e4:	bl	11118 <__errno_location@plt>
   117e8:	ldr	r3, [r0]
   117ec:	cmp	r3, #32
   117f0:	bne	11814 <close_stdout@@Base+0x6c>
   117f4:	ldr	r3, [pc, #172]	; 118a8 <close_stdout@@Base+0x100>
   117f8:	ldr	r3, [r4, r3]
   117fc:	ldr	r0, [r3]
   11800:	bl	140e4 <close_stdout@@Base+0x293c>
   11804:	cmp	r0, #0
   11808:	bne	11868 <close_stdout@@Base+0xc0>
   1180c:	add	sp, sp, #12
   11810:	pop	{r4, r5, r6, r7, pc}
   11814:	ldr	r1, [pc, #144]	; 118ac <close_stdout@@Base+0x104>
   11818:	mov	r0, #0
   1181c:	mov	r2, #5
   11820:	add	r1, pc, r1
   11824:	bl	10fe0 <dcgettext@plt>
   11828:	ldr	r3, [pc, #128]	; 118b0 <close_stdout@@Base+0x108>
   1182c:	ldr	r5, [pc, r3]
   11830:	cmp	r5, #0
   11834:	mov	r6, r0
   11838:	beq	11878 <close_stdout@@Base+0xd0>
   1183c:	bl	11118 <__errno_location@plt>
   11840:	ldr	r7, [r0]
   11844:	mov	r0, r5
   11848:	bl	13240 <close_stdout@@Base+0x1a98>
   1184c:	ldr	r2, [pc, #96]	; 118b4 <close_stdout@@Base+0x10c>
   11850:	str	r6, [sp]
   11854:	mov	r1, r7
   11858:	add	r2, pc, r2
   1185c:	mov	r3, r0
   11860:	mov	r0, #0
   11864:	bl	11070 <error@plt>
   11868:	ldr	r3, [pc, #72]	; 118b8 <close_stdout@@Base+0x110>
   1186c:	ldr	r3, [r4, r3]
   11870:	ldr	r0, [r3]
   11874:	bl	10fa4 <_exit@plt>
   11878:	bl	11118 <__errno_location@plt>
   1187c:	ldr	r2, [pc, #56]	; 118bc <close_stdout@@Base+0x114>
   11880:	add	r2, pc, r2
   11884:	mov	r3, r0
   11888:	mov	r0, r5
   1188c:	ldr	r1, [r3]
   11890:	mov	r3, r6
   11894:	bl	11070 <error@plt>
   11898:	b	11868 <close_stdout@@Base+0xc0>
   1189c:	andeq	r4, r1, r0, asr #16
   118a0:	andeq	r0, r0, r0, lsl r1
   118a4:	andeq	r4, r1, r0, lsr #19
   118a8:	andeq	r0, r0, r0, lsl #2
   118ac:	ldrdeq	r3, [r0], -r0
   118b0:	andeq	r4, r1, r8, asr #18
   118b4:	andeq	r3, r0, r4, lsr #9
   118b8:	andeq	r0, r0, r4, lsl r1
   118bc:	andeq	r3, r0, r0, lsl #9
   118c0:	ldrb	r3, [r0]
   118c4:	cmp	r3, #47	; 0x2f
   118c8:	bne	118e4 <close_stdout@@Base+0x13c>
   118cc:	add	r2, r0, #1
   118d0:	mov	r0, r2
   118d4:	add	r2, r2, #1
   118d8:	ldrb	r3, [r0]
   118dc:	cmp	r3, #47	; 0x2f
   118e0:	beq	118d0 <close_stdout@@Base+0x128>
   118e4:	cmp	r3, #0
   118e8:	bxeq	lr
   118ec:	mov	r2, r0
   118f0:	mov	r1, #0
   118f4:	cmp	r3, #47	; 0x2f
   118f8:	moveq	r1, #1
   118fc:	beq	1190c <close_stdout@@Base+0x164>
   11900:	cmp	r1, #0
   11904:	movne	r0, r2
   11908:	movne	r1, #0
   1190c:	ldrb	r3, [r2, #1]!
   11910:	cmp	r3, #0
   11914:	bne	118f4 <close_stdout@@Base+0x14c>
   11918:	bx	lr
   1191c:	push	{r4, lr}
   11920:	mov	r4, r0
   11924:	bl	110f4 <strlen@plt>
   11928:	cmp	r0, #1
   1192c:	popls	{r4, pc}
   11930:	sub	r3, r0, #1
   11934:	ldrb	r2, [r4, r3]
   11938:	cmp	r2, #47	; 0x2f
   1193c:	popne	{r4, pc}
   11940:	mov	r0, r3
   11944:	cmp	r0, #1
   11948:	sub	r3, r3, #1
   1194c:	beq	11960 <close_stdout@@Base+0x1b8>
   11950:	ldrb	r2, [r4, r3]
   11954:	cmp	r2, #47	; 0x2f
   11958:	popne	{r4, pc}
   1195c:	b	11940 <close_stdout@@Base+0x198>
   11960:	pop	{r4, pc}
   11964:	ldr	r3, [pc, #108]	; 119d8 <close_stdout@@Base+0x230>
   11968:	mov	r0, #0
   1196c:	ldr	ip, [pc, #104]	; 119dc <close_stdout@@Base+0x234>
   11970:	mov	r1, #128	; 0x80
   11974:	add	r3, pc, r3
   11978:	push	{r4, r5, lr}
   1197c:	sub	sp, sp, #140	; 0x8c
   11980:	ldr	r4, [r3, ip]
   11984:	add	r5, sp, #4
   11988:	mov	r2, r5
   1198c:	ldr	r3, [r4]
   11990:	str	r3, [sp, #132]	; 0x84
   11994:	bl	111b4 <sched_getaffinity@plt>
   11998:	cmp	r0, #0
   1199c:	beq	119bc <close_stdout@@Base+0x214>
   119a0:	mov	r0, #0
   119a4:	ldr	r2, [sp, #132]	; 0x84
   119a8:	ldr	r3, [r4]
   119ac:	cmp	r2, r3
   119b0:	bne	119d4 <close_stdout@@Base+0x22c>
   119b4:	add	sp, sp, #140	; 0x8c
   119b8:	pop	{r4, r5, pc}
   119bc:	mov	r1, r5
   119c0:	mov	r0, #128	; 0x80
   119c4:	bl	10fc8 <__sched_cpucount@plt>
   119c8:	cmp	r0, #0
   119cc:	beq	119a0 <close_stdout@@Base+0x1f8>
   119d0:	b	119a4 <close_stdout@@Base+0x1fc>
   119d4:	bl	10fec <__stack_chk_fail@plt>
   119d8:	andeq	r4, r1, r4, lsl #13
   119dc:	strdeq	r0, [r0], -r4
   119e0:	ldr	r3, [pc, #336]	; 11b38 <close_stdout@@Base+0x390>
   119e4:	cmp	r0, #2
   119e8:	ldr	r2, [pc, #332]	; 11b3c <close_stdout@@Base+0x394>
   119ec:	add	r3, pc, r3
   119f0:	push	{r4, r5, lr}
   119f4:	sub	sp, sp, #12
   119f8:	ldr	r4, [r3, r2]
   119fc:	ldr	r3, [r4]
   11a00:	str	r3, [sp, #4]
   11a04:	beq	11a48 <close_stdout@@Base+0x2a0>
   11a08:	cmp	r0, #1
   11a0c:	beq	11ae0 <close_stdout@@Base+0x338>
   11a10:	mov	r0, #83	; 0x53
   11a14:	bl	10ff8 <sysconf@plt>
   11a18:	cmp	r0, #1
   11a1c:	mov	r5, r0
   11a20:	beq	11b14 <close_stdout@@Base+0x36c>
   11a24:	cmp	r5, #0
   11a28:	ble	11afc <close_stdout@@Base+0x354>
   11a2c:	mov	r0, r5
   11a30:	ldr	r2, [sp, #4]
   11a34:	ldr	r3, [r4]
   11a38:	cmp	r2, r3
   11a3c:	bne	11b34 <close_stdout@@Base+0x38c>
   11a40:	add	sp, sp, #12
   11a44:	pop	{r4, r5, pc}
   11a48:	ldr	r0, [pc, #240]	; 11b40 <close_stdout@@Base+0x398>
   11a4c:	add	r0, pc, r0
   11a50:	bl	11088 <getenv@plt>
   11a54:	cmp	r0, #0
   11a58:	beq	11ae0 <close_stdout@@Base+0x338>
   11a5c:	ldrb	r3, [r0]
   11a60:	cmp	r3, #0
   11a64:	beq	11ae0 <close_stdout@@Base+0x338>
   11a68:	sub	r2, r3, #9
   11a6c:	cmp	r3, #32
   11a70:	cmpne	r2, #4
   11a74:	movhi	r2, #0
   11a78:	movls	r2, #1
   11a7c:	bls	11b04 <close_stdout@@Base+0x35c>
   11a80:	sub	r3, r3, #48	; 0x30
   11a84:	cmp	r3, #9
   11a88:	bhi	11ae0 <close_stdout@@Base+0x338>
   11a8c:	add	r1, sp, #8
   11a90:	str	r2, [r1, #-8]!
   11a94:	mov	r2, #10
   11a98:	mov	r1, sp
   11a9c:	bl	110e8 <strtoul@plt>
   11aa0:	ldr	r2, [sp]
   11aa4:	cmp	r2, #0
   11aa8:	beq	11ae0 <close_stdout@@Base+0x338>
   11aac:	ldrb	r3, [r2]
   11ab0:	cmp	r3, #0
   11ab4:	addne	r2, r2, #1
   11ab8:	bne	11ad0 <close_stdout@@Base+0x328>
   11abc:	b	11b28 <close_stdout@@Base+0x380>
   11ac0:	str	r2, [sp]
   11ac4:	ldrb	r3, [r2], #1
   11ac8:	cmp	r3, #0
   11acc:	beq	11b28 <close_stdout@@Base+0x380>
   11ad0:	sub	r1, r3, #9
   11ad4:	cmp	r3, #32
   11ad8:	cmpne	r1, #4
   11adc:	bls	11ac0 <close_stdout@@Base+0x318>
   11ae0:	bl	11964 <close_stdout@@Base+0x1bc>
   11ae4:	cmp	r0, #0
   11ae8:	bne	11a30 <close_stdout@@Base+0x288>
   11aec:	mov	r0, #84	; 0x54
   11af0:	bl	10ff8 <sysconf@plt>
   11af4:	cmp	r0, #0
   11af8:	bgt	11a30 <close_stdout@@Base+0x288>
   11afc:	mov	r0, #1
   11b00:	b	11a30 <close_stdout@@Base+0x288>
   11b04:	ldrb	r3, [r0, #1]!
   11b08:	cmp	r3, #0
   11b0c:	bne	11a68 <close_stdout@@Base+0x2c0>
   11b10:	b	11ae0 <close_stdout@@Base+0x338>
   11b14:	bl	11964 <close_stdout@@Base+0x1bc>
   11b18:	cmp	r0, #0
   11b1c:	beq	11a2c <close_stdout@@Base+0x284>
   11b20:	mov	r5, r0
   11b24:	b	11a24 <close_stdout@@Base+0x27c>
   11b28:	cmp	r0, #0
   11b2c:	moveq	r0, #1
   11b30:	b	11a30 <close_stdout@@Base+0x288>
   11b34:	bl	10fec <__stack_chk_fail@plt>
   11b38:	andeq	r4, r1, ip, lsl #12
   11b3c:	strdeq	r0, [r0], -r4
   11b40:			; <UNDEFINED> instruction: 0x000032b8
   11b44:	push	{r3, r4, r5, r6, r7, lr}
   11b48:	subs	r4, r0, #0
   11b4c:	ldr	r5, [pc, #172]	; 11c00 <close_stdout@@Base+0x458>
   11b50:	add	r5, pc, r5
   11b54:	beq	11bdc <close_stdout@@Base+0x434>
   11b58:	mov	r1, #47	; 0x2f
   11b5c:	bl	1119c <strrchr@plt>
   11b60:	subs	r6, r0, #0
   11b64:	beq	11bc0 <close_stdout@@Base+0x418>
   11b68:	add	r7, r6, #1
   11b6c:	rsb	r3, r4, r7
   11b70:	cmp	r3, #6
   11b74:	ble	11bc0 <close_stdout@@Base+0x418>
   11b78:	ldr	r1, [pc, #132]	; 11c04 <close_stdout@@Base+0x45c>
   11b7c:	sub	r0, r6, #6
   11b80:	mov	r2, #7
   11b84:	add	r1, pc, r1
   11b88:	bl	111cc <strncmp@plt>
   11b8c:	cmp	r0, #0
   11b90:	bne	11bc0 <close_stdout@@Base+0x418>
   11b94:	ldr	r1, [pc, #108]	; 11c08 <close_stdout@@Base+0x460>
   11b98:	mov	r0, r7
   11b9c:	mov	r2, #3
   11ba0:	add	r1, pc, r1
   11ba4:	bl	111cc <strncmp@plt>
   11ba8:	cmp	r0, #0
   11bac:	movne	r4, r7
   11bb0:	ldreq	r3, [pc, #84]	; 11c0c <close_stdout@@Base+0x464>
   11bb4:	addeq	r4, r6, #4
   11bb8:	ldreq	r3, [r5, r3]
   11bbc:	streq	r4, [r3]
   11bc0:	ldr	r2, [pc, #72]	; 11c10 <close_stdout@@Base+0x468>
   11bc4:	ldr	r3, [pc, #72]	; 11c14 <close_stdout@@Base+0x46c>
   11bc8:	ldr	r2, [r5, r2]
   11bcc:	str	r4, [r2]
   11bd0:	ldr	r3, [r5, r3]
   11bd4:	str	r4, [r3]
   11bd8:	pop	{r3, r4, r5, r6, r7, pc}
   11bdc:	ldr	r3, [pc, #52]	; 11c18 <close_stdout@@Base+0x470>
   11be0:	mov	r1, #1
   11be4:	ldr	r0, [pc, #48]	; 11c1c <close_stdout@@Base+0x474>
   11be8:	mov	r2, #55	; 0x37
   11bec:	ldr	r3, [r5, r3]
   11bf0:	add	r0, pc, r0
   11bf4:	ldr	r3, [r3]
   11bf8:	bl	11028 <fwrite@plt>
   11bfc:	bl	111d8 <abort@plt>
   11c00:	andeq	r4, r1, r8, lsr #9
   11c04:	andeq	r3, r0, r8, asr #3
   11c08:			; <UNDEFINED> instruction: 0x000031b4
   11c0c:	andeq	r0, r0, r4, lsr #2
   11c10:	andeq	r0, r0, ip, lsl r1
   11c14:	andeq	r0, r0, r8, lsl r1
   11c18:	andeq	r0, r0, r0, lsl #2
   11c1c:	andeq	r3, r0, r4, lsr #2
   11c20:	push	{r3, lr}
   11c24:	mov	r3, r0
   11c28:	mov	r2, #0
   11c2c:	cmp	r1, #8
   11c30:	str	r2, [r3], #4
   11c34:	add	r3, r3, #4
   11c38:	str	r2, [r0, #4]
   11c3c:	str	r2, [r3], #4
   11c40:	str	r2, [r3], #4
   11c44:	str	r2, [r3], #4
   11c48:	str	r2, [r3], #4
   11c4c:	str	r2, [r3], #4
   11c50:	str	r2, [r3], #4
   11c54:	str	r2, [r3], #4
   11c58:	str	r2, [r3], #4
   11c5c:	str	r2, [r3], #4
   11c60:	str	r2, [r3]
   11c64:	beq	11c70 <close_stdout@@Base+0x4c8>
   11c68:	str	r1, [r0]
   11c6c:	pop	{r3, pc}
   11c70:	bl	111d8 <abort@plt>
   11c74:	push	{r4, r5, r6, lr}
   11c78:	mov	r4, r0
   11c7c:	mov	r6, r1
   11c80:	mov	r0, #0
   11c84:	mov	r1, r4
   11c88:	mov	r2, #5
   11c8c:	bl	10fe0 <dcgettext@plt>
   11c90:	cmp	r0, r4
   11c94:	mov	r5, r0
   11c98:	beq	11ca0 <close_stdout@@Base+0x4f8>
   11c9c:	pop	{r4, r5, r6, pc}
   11ca0:	bl	14164 <close_stdout@@Base+0x29bc>
   11ca4:	ldrb	r3, [r0]
   11ca8:	bic	r3, r3, #32
   11cac:	cmp	r3, #85	; 0x55
   11cb0:	bne	11d24 <close_stdout@@Base+0x57c>
   11cb4:	ldrb	r3, [r0, #1]
   11cb8:	bic	r3, r3, #32
   11cbc:	cmp	r3, #84	; 0x54
   11cc0:	bne	11d10 <close_stdout@@Base+0x568>
   11cc4:	ldrb	r3, [r0, #2]
   11cc8:	bic	r3, r3, #32
   11ccc:	cmp	r3, #70	; 0x46
   11cd0:	bne	11d10 <close_stdout@@Base+0x568>
   11cd4:	ldrb	r3, [r0, #3]
   11cd8:	cmp	r3, #45	; 0x2d
   11cdc:	bne	11d10 <close_stdout@@Base+0x568>
   11ce0:	ldrb	r3, [r0, #4]
   11ce4:	cmp	r3, #56	; 0x38
   11ce8:	bne	11d10 <close_stdout@@Base+0x568>
   11cec:	ldrb	r3, [r0, #5]
   11cf0:	cmp	r3, #0
   11cf4:	bne	11d10 <close_stdout@@Base+0x568>
   11cf8:	ldrb	r3, [r5]
   11cfc:	cmp	r3, #96	; 0x60
   11d00:	beq	11d9c <close_stdout@@Base+0x5f4>
   11d04:	ldr	r0, [pc, #180]	; 11dc0 <close_stdout@@Base+0x618>
   11d08:	add	r0, pc, r0
   11d0c:	pop	{r4, r5, r6, pc}
   11d10:	cmp	r6, #7
   11d14:	beq	11da8 <close_stdout@@Base+0x600>
   11d18:	ldr	r0, [pc, #164]	; 11dc4 <close_stdout@@Base+0x61c>
   11d1c:	add	r0, pc, r0
   11d20:	pop	{r4, r5, r6, pc}
   11d24:	cmp	r3, #71	; 0x47
   11d28:	bne	11d10 <close_stdout@@Base+0x568>
   11d2c:	ldrb	r3, [r0, #1]
   11d30:	bic	r3, r3, #32
   11d34:	cmp	r3, #66	; 0x42
   11d38:	bne	11d10 <close_stdout@@Base+0x568>
   11d3c:	ldrb	r3, [r0, #2]
   11d40:	cmp	r3, #49	; 0x31
   11d44:	bne	11d10 <close_stdout@@Base+0x568>
   11d48:	ldrb	r3, [r0, #3]
   11d4c:	cmp	r3, #56	; 0x38
   11d50:	bne	11d10 <close_stdout@@Base+0x568>
   11d54:	ldrb	r3, [r0, #4]
   11d58:	cmp	r3, #48	; 0x30
   11d5c:	bne	11d10 <close_stdout@@Base+0x568>
   11d60:	ldrb	r3, [r0, #5]
   11d64:	cmp	r3, #51	; 0x33
   11d68:	bne	11d10 <close_stdout@@Base+0x568>
   11d6c:	ldrb	r3, [r0, #6]
   11d70:	cmp	r3, #48	; 0x30
   11d74:	bne	11d10 <close_stdout@@Base+0x568>
   11d78:	ldrb	r3, [r0, #7]
   11d7c:	cmp	r3, #0
   11d80:	bne	11d10 <close_stdout@@Base+0x568>
   11d84:	ldrb	r3, [r5]
   11d88:	cmp	r3, #96	; 0x60
   11d8c:	beq	11db4 <close_stdout@@Base+0x60c>
   11d90:	ldr	r0, [pc, #48]	; 11dc8 <close_stdout@@Base+0x620>
   11d94:	add	r0, pc, r0
   11d98:	pop	{r4, r5, r6, pc}
   11d9c:	ldr	r0, [pc, #40]	; 11dcc <close_stdout@@Base+0x624>
   11da0:	add	r0, pc, r0
   11da4:	pop	{r4, r5, r6, pc}
   11da8:	ldr	r0, [pc, #32]	; 11dd0 <close_stdout@@Base+0x628>
   11dac:	add	r0, pc, r0
   11db0:	pop	{r4, r5, r6, pc}
   11db4:	ldr	r0, [pc, #24]	; 11dd4 <close_stdout@@Base+0x62c>
   11db8:	add	r0, pc, r0
   11dbc:	pop	{r4, r5, r6, pc}
   11dc0:	andeq	r3, r0, r0, ror r0
   11dc4:	andeq	r3, r0, r4, rrx
   11dc8:	andeq	r2, r0, r8, ror #31
   11dcc:	andeq	r2, r0, ip, ror #31
   11dd0:	ldrdeq	r2, [r0], -r8
   11dd4:	ldrdeq	r2, [r0], -r0
   11dd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ddc:	sub	sp, sp, #124	; 0x7c
   11de0:	ldr	ip, [pc, #3304]	; 12ad0 <close_stdout@@Base+0x1328>
   11de4:	mov	sl, r1
   11de8:	str	r0, [sp, #40]	; 0x28
   11dec:	mov	r8, r3
   11df0:	ldr	r0, [pc, #3292]	; 12ad4 <close_stdout@@Base+0x132c>
   11df4:	add	ip, pc, ip
   11df8:	str	r2, [sp, #32]
   11dfc:	ldr	r1, [sp, #164]	; 0xa4
   11e00:	mov	r3, ip
   11e04:	ldr	r0, [ip, r0]
   11e08:	ldr	r2, [sp, #172]	; 0xac
   11e0c:	ubfx	r1, r1, #1, #1
   11e10:	str	r1, [sp, #36]	; 0x24
   11e14:	str	r0, [sp, #56]	; 0x38
   11e18:	ldr	r0, [sp, #168]	; 0xa8
   11e1c:	ldr	r1, [sp, #176]	; 0xb0
   11e20:	str	r2, [sp, #72]	; 0x48
   11e24:	str	r0, [sp, #48]	; 0x30
   11e28:	ldr	r0, [sp, #56]	; 0x38
   11e2c:	str	r1, [sp, #68]	; 0x44
   11e30:	ldr	r3, [r0]
   11e34:	str	r3, [sp, #116]	; 0x74
   11e38:	bl	11040 <__ctype_get_mb_cur_max@plt>
   11e3c:	ldr	r2, [sp, #160]	; 0xa0
   11e40:	str	r0, [sp, #64]	; 0x40
   11e44:	cmp	r2, #8
   11e48:	addls	pc, pc, r2, lsl #2
   11e4c:	b	129ac <close_stdout@@Base+0x1204>
   11e50:	b	11e74 <close_stdout@@Base+0x6cc>
   11e54:	b	126c4 <close_stdout@@Base+0xf1c>
   11e58:	b	126f4 <close_stdout@@Base+0xf4c>
   11e5c:	b	125a4 <close_stdout@@Base+0xdfc>
   11e60:	b	125e4 <close_stdout@@Base+0xe3c>
   11e64:	b	12610 <close_stdout@@Base+0xe68>
   11e68:	b	12630 <close_stdout@@Base+0xe88>
   11e6c:	b	12630 <close_stdout@@Base+0xe88>
   11e70:	b	12630 <close_stdout@@Base+0xe88>
   11e74:	mov	r2, #0
   11e78:	str	r2, [sp, #36]	; 0x24
   11e7c:	mov	r9, r2
   11e80:	str	r2, [sp, #24]
   11e84:	str	r2, [sp, #28]
   11e88:	str	r2, [sp, #52]	; 0x34
   11e8c:	ldr	r0, [sp, #36]	; 0x24
   11e90:	mov	fp, #0
   11e94:	ldr	r1, [sp, #24]
   11e98:	eor	r2, r0, #1
   11e9c:	eor	r3, r1, #1
   11ea0:	and	r3, r2, r3
   11ea4:	and	r2, r1, r0
   11ea8:	str	r3, [sp, #44]	; 0x2c
   11eac:	str	r2, [sp, #76]	; 0x4c
   11eb0:	cmn	r8, #1
   11eb4:	beq	12234 <close_stdout@@Base+0xa8c>
   11eb8:	subs	r3, fp, r8
   11ebc:	movne	r3, #1
   11ec0:	cmp	r3, #0
   11ec4:	beq	1224c <close_stdout@@Base+0xaa4>
   11ec8:	ldr	r3, [sp, #28]
   11ecc:	ldr	r0, [sp, #24]
   11ed0:	adds	r7, r3, #0
   11ed4:	movne	r7, #1
   11ed8:	ands	r6, r7, r0
   11edc:	bne	12738 <close_stdout@@Base+0xf90>
   11ee0:	ldr	r1, [sp, #32]
   11ee4:	add	r5, r1, fp
   11ee8:	ldrb	r4, [r5]
   11eec:	cmp	r4, #126	; 0x7e
   11ef0:	addls	pc, pc, r4, lsl #2
   11ef4:	b	124b8 <close_stdout@@Base+0xd10>
   11ef8:	b	123c4 <close_stdout@@Base+0xc1c>
   11efc:	b	124b8 <close_stdout@@Base+0xd10>
   11f00:	b	124b8 <close_stdout@@Base+0xd10>
   11f04:	b	124b8 <close_stdout@@Base+0xd10>
   11f08:	b	124b8 <close_stdout@@Base+0xd10>
   11f0c:	b	124b8 <close_stdout@@Base+0xd10>
   11f10:	b	124b8 <close_stdout@@Base+0xd10>
   11f14:	b	123ac <close_stdout@@Base+0xc04>
   11f18:	b	12394 <close_stdout@@Base+0xbec>
   11f1c:	b	123bc <close_stdout@@Base+0xc14>
   11f20:	b	123b4 <close_stdout@@Base+0xc0c>
   11f24:	b	123a4 <close_stdout@@Base+0xbfc>
   11f28:	b	1239c <close_stdout@@Base+0xbf4>
   11f2c:	b	12360 <close_stdout@@Base+0xbb8>
   11f30:	b	124b8 <close_stdout@@Base+0xd10>
   11f34:	b	124b8 <close_stdout@@Base+0xd10>
   11f38:	b	124b8 <close_stdout@@Base+0xd10>
   11f3c:	b	124b8 <close_stdout@@Base+0xd10>
   11f40:	b	124b8 <close_stdout@@Base+0xd10>
   11f44:	b	124b8 <close_stdout@@Base+0xd10>
   11f48:	b	124b8 <close_stdout@@Base+0xd10>
   11f4c:	b	124b8 <close_stdout@@Base+0xd10>
   11f50:	b	124b8 <close_stdout@@Base+0xd10>
   11f54:	b	124b8 <close_stdout@@Base+0xd10>
   11f58:	b	124b8 <close_stdout@@Base+0xd10>
   11f5c:	b	124b8 <close_stdout@@Base+0xd10>
   11f60:	b	124b8 <close_stdout@@Base+0xd10>
   11f64:	b	124b8 <close_stdout@@Base+0xd10>
   11f68:	b	124b8 <close_stdout@@Base+0xd10>
   11f6c:	b	124b8 <close_stdout@@Base+0xd10>
   11f70:	b	124b8 <close_stdout@@Base+0xd10>
   11f74:	b	124b8 <close_stdout@@Base+0xd10>
   11f78:	b	122ec <close_stdout@@Base+0xb44>
   11f7c:	b	122ec <close_stdout@@Base+0xb44>
   11f80:	b	122ec <close_stdout@@Base+0xb44>
   11f84:	b	122e4 <close_stdout@@Base+0xb3c>
   11f88:	b	122ec <close_stdout@@Base+0xb44>
   11f8c:	b	121c0 <close_stdout@@Base+0xa18>
   11f90:	b	122ec <close_stdout@@Base+0xb44>
   11f94:	b	12460 <close_stdout@@Base+0xcb8>
   11f98:	b	122ec <close_stdout@@Base+0xb44>
   11f9c:	b	122ec <close_stdout@@Base+0xb44>
   11fa0:	b	122ec <close_stdout@@Base+0xb44>
   11fa4:	b	121c0 <close_stdout@@Base+0xa18>
   11fa8:	b	121c0 <close_stdout@@Base+0xa18>
   11fac:	b	121c0 <close_stdout@@Base+0xa18>
   11fb0:	b	121c0 <close_stdout@@Base+0xa18>
   11fb4:	b	121c0 <close_stdout@@Base+0xa18>
   11fb8:	b	121c0 <close_stdout@@Base+0xa18>
   11fbc:	b	121c0 <close_stdout@@Base+0xa18>
   11fc0:	b	121c0 <close_stdout@@Base+0xa18>
   11fc4:	b	121c0 <close_stdout@@Base+0xa18>
   11fc8:	b	121c0 <close_stdout@@Base+0xa18>
   11fcc:	b	121c0 <close_stdout@@Base+0xa18>
   11fd0:	b	121c0 <close_stdout@@Base+0xa18>
   11fd4:	b	121c0 <close_stdout@@Base+0xa18>
   11fd8:	b	121c0 <close_stdout@@Base+0xa18>
   11fdc:	b	121c0 <close_stdout@@Base+0xa18>
   11fe0:	b	121c0 <close_stdout@@Base+0xa18>
   11fe4:	b	122ec <close_stdout@@Base+0xb44>
   11fe8:	b	122ec <close_stdout@@Base+0xb44>
   11fec:	b	122ec <close_stdout@@Base+0xb44>
   11ff0:	b	122ec <close_stdout@@Base+0xb44>
   11ff4:	b	120f4 <close_stdout@@Base+0x94c>
   11ff8:	b	124b8 <close_stdout@@Base+0xd10>
   11ffc:	b	121c0 <close_stdout@@Base+0xa18>
   12000:	b	121c0 <close_stdout@@Base+0xa18>
   12004:	b	121c0 <close_stdout@@Base+0xa18>
   12008:	b	121c0 <close_stdout@@Base+0xa18>
   1200c:	b	121c0 <close_stdout@@Base+0xa18>
   12010:	b	121c0 <close_stdout@@Base+0xa18>
   12014:	b	121c0 <close_stdout@@Base+0xa18>
   12018:	b	121c0 <close_stdout@@Base+0xa18>
   1201c:	b	121c0 <close_stdout@@Base+0xa18>
   12020:	b	121c0 <close_stdout@@Base+0xa18>
   12024:	b	121c0 <close_stdout@@Base+0xa18>
   12028:	b	121c0 <close_stdout@@Base+0xa18>
   1202c:	b	121c0 <close_stdout@@Base+0xa18>
   12030:	b	121c0 <close_stdout@@Base+0xa18>
   12034:	b	121c0 <close_stdout@@Base+0xa18>
   12038:	b	121c0 <close_stdout@@Base+0xa18>
   1203c:	b	121c0 <close_stdout@@Base+0xa18>
   12040:	b	121c0 <close_stdout@@Base+0xa18>
   12044:	b	121c0 <close_stdout@@Base+0xa18>
   12048:	b	121c0 <close_stdout@@Base+0xa18>
   1204c:	b	121c0 <close_stdout@@Base+0xa18>
   12050:	b	121c0 <close_stdout@@Base+0xa18>
   12054:	b	121c0 <close_stdout@@Base+0xa18>
   12058:	b	121c0 <close_stdout@@Base+0xa18>
   1205c:	b	121c0 <close_stdout@@Base+0xa18>
   12060:	b	121c0 <close_stdout@@Base+0xa18>
   12064:	b	122ec <close_stdout@@Base+0xb44>
   12068:	b	12444 <close_stdout@@Base+0xc9c>
   1206c:	b	121c0 <close_stdout@@Base+0xa18>
   12070:	b	122ec <close_stdout@@Base+0xb44>
   12074:	b	121c0 <close_stdout@@Base+0xa18>
   12078:	b	122ec <close_stdout@@Base+0xb44>
   1207c:	b	121c0 <close_stdout@@Base+0xa18>
   12080:	b	121c0 <close_stdout@@Base+0xa18>
   12084:	b	121c0 <close_stdout@@Base+0xa18>
   12088:	b	121c0 <close_stdout@@Base+0xa18>
   1208c:	b	121c0 <close_stdout@@Base+0xa18>
   12090:	b	121c0 <close_stdout@@Base+0xa18>
   12094:	b	121c0 <close_stdout@@Base+0xa18>
   12098:	b	121c0 <close_stdout@@Base+0xa18>
   1209c:	b	121c0 <close_stdout@@Base+0xa18>
   120a0:	b	121c0 <close_stdout@@Base+0xa18>
   120a4:	b	121c0 <close_stdout@@Base+0xa18>
   120a8:	b	121c0 <close_stdout@@Base+0xa18>
   120ac:	b	121c0 <close_stdout@@Base+0xa18>
   120b0:	b	121c0 <close_stdout@@Base+0xa18>
   120b4:	b	121c0 <close_stdout@@Base+0xa18>
   120b8:	b	121c0 <close_stdout@@Base+0xa18>
   120bc:	b	121c0 <close_stdout@@Base+0xa18>
   120c0:	b	121c0 <close_stdout@@Base+0xa18>
   120c4:	b	121c0 <close_stdout@@Base+0xa18>
   120c8:	b	121c0 <close_stdout@@Base+0xa18>
   120cc:	b	121c0 <close_stdout@@Base+0xa18>
   120d0:	b	121c0 <close_stdout@@Base+0xa18>
   120d4:	b	121c0 <close_stdout@@Base+0xa18>
   120d8:	b	121c0 <close_stdout@@Base+0xa18>
   120dc:	b	121c0 <close_stdout@@Base+0xa18>
   120e0:	b	121c0 <close_stdout@@Base+0xa18>
   120e4:	b	122cc <close_stdout@@Base+0xb24>
   120e8:	b	122ec <close_stdout@@Base+0xb44>
   120ec:	b	122cc <close_stdout@@Base+0xb24>
   120f0:	b	122e4 <close_stdout@@Base+0xb3c>
   120f4:	ldr	r3, [sp, #160]	; 0xa0
   120f8:	cmp	r3, #2
   120fc:	beq	12988 <close_stdout@@Base+0x11e0>
   12100:	cmp	r3, #3
   12104:	bne	121c0 <close_stdout@@Base+0xa18>
   12108:	ldr	r1, [sp, #164]	; 0xa4
   1210c:	tst	r1, #4
   12110:	beq	121c0 <close_stdout@@Base+0xa18>
   12114:	add	r3, fp, #2
   12118:	cmp	r8, r3
   1211c:	bls	121c0 <close_stdout@@Base+0xa18>
   12120:	ldrb	r2, [r5, #1]
   12124:	mov	r1, #1
   12128:	cmp	r2, #63	; 0x3f
   1212c:	bne	121c0 <close_stdout@@Base+0xa18>
   12130:	ldr	r0, [sp, #32]
   12134:	ldrb	ip, [r0, r3]
   12138:	sub	r0, ip, #33	; 0x21
   1213c:	uxtb	r0, r0
   12140:	cmp	r0, #29
   12144:	bhi	121c0 <close_stdout@@Base+0xa18>
   12148:	lsl	r1, r1, r0
   1214c:	movw	r0, #20929	; 0x51c1
   12150:	movt	r0, #14336	; 0x3800
   12154:	and	r0, r1, r0
   12158:	cmp	r0, #0
   1215c:	beq	121c0 <close_stdout@@Base+0xa18>
   12160:	ldr	r1, [sp, #36]	; 0x24
   12164:	cmp	r1, #0
   12168:	bne	12308 <close_stdout@@Base+0xb60>
   1216c:	cmp	r9, sl
   12170:	mov	r4, ip
   12174:	mov	fp, r3
   12178:	ldrcc	r0, [sp, #40]	; 0x28
   1217c:	strbcc	r2, [r0, r9]
   12180:	add	r2, r9, #1
   12184:	cmp	sl, r2
   12188:	ldrhi	r0, [sp, #40]	; 0x28
   1218c:	movhi	r1, #34	; 0x22
   12190:	strbhi	r1, [r0, r2]
   12194:	add	r2, r9, #2
   12198:	cmp	sl, r2
   1219c:	ldrhi	r0, [sp, #40]	; 0x28
   121a0:	movhi	r1, #34	; 0x22
   121a4:	strbhi	r1, [r0, r2]
   121a8:	add	r2, r9, #3
   121ac:	cmp	sl, r2
   121b0:	add	r9, r9, #4
   121b4:	ldrhi	r0, [sp, #40]	; 0x28
   121b8:	movhi	r1, #63	; 0x3f
   121bc:	strbhi	r1, [r0, r2]
   121c0:	ldr	r0, [sp, #44]	; 0x2c
   121c4:	cmp	r0, #0
   121c8:	bne	121f0 <close_stdout@@Base+0xa48>
   121cc:	ldr	r1, [sp, #48]	; 0x30
   121d0:	cmp	r1, #0
   121d4:	beq	121f0 <close_stdout@@Base+0xa48>
   121d8:	ubfx	r2, r4, #5, #8
   121dc:	and	r3, r4, #31
   121e0:	ldr	r2, [r1, r2, lsl #2]
   121e4:	lsr	r3, r2, r3
   121e8:	tst	r3, #1
   121ec:	bne	121f8 <close_stdout@@Base+0xa50>
   121f0:	cmp	r6, #0
   121f4:	beq	12218 <close_stdout@@Base+0xa70>
   121f8:	ldr	r2, [sp, #36]	; 0x24
   121fc:	cmp	r2, #0
   12200:	bne	12308 <close_stdout@@Base+0xb60>
   12204:	cmp	r9, sl
   12208:	ldrcc	r0, [sp, #40]	; 0x28
   1220c:	movcc	r3, #92	; 0x5c
   12210:	strbcc	r3, [r0, r9]
   12214:	add	r9, r9, #1
   12218:	add	fp, fp, #1
   1221c:	cmp	r9, sl
   12220:	ldrcc	r1, [sp, #40]	; 0x28
   12224:	strbcc	r4, [r1, r9]
   12228:	cmn	r8, #1
   1222c:	add	r9, r9, #1
   12230:	bne	11eb8 <close_stdout@@Base+0x710>
   12234:	ldr	r2, [sp, #32]
   12238:	ldrb	r3, [r2, fp]
   1223c:	adds	r3, r3, #0
   12240:	movne	r3, #1
   12244:	cmp	r3, #0
   12248:	bne	11ec8 <close_stdout@@Base+0x720>
   1224c:	ldr	r3, [sp, #160]	; 0xa0
   12250:	cmp	r9, #0
   12254:	cmpeq	r3, #2
   12258:	bne	12268 <close_stdout@@Base+0xac0>
   1225c:	ldr	r0, [sp, #36]	; 0x24
   12260:	cmp	r0, #0
   12264:	bne	12308 <close_stdout@@Base+0xb60>
   12268:	ldr	r1, [sp, #36]	; 0x24
   1226c:	ldr	r2, [sp, #52]	; 0x34
   12270:	eor	r3, r1, #1
   12274:	cmp	r2, #0
   12278:	moveq	r3, #0
   1227c:	andne	r3, r3, #1
   12280:	cmp	r3, #0
   12284:	beq	122b0 <close_stdout@@Base+0xb08>
   12288:	ldrb	r3, [r2]
   1228c:	cmp	r3, #0
   12290:	beq	122b0 <close_stdout@@Base+0xb08>
   12294:	ldr	r1, [sp, #40]	; 0x28
   12298:	cmp	sl, r9
   1229c:	strbhi	r3, [r1, r9]
   122a0:	ldrb	r3, [r2, #1]!
   122a4:	add	r9, r9, #1
   122a8:	cmp	r3, #0
   122ac:	bne	12298 <close_stdout@@Base+0xaf0>
   122b0:	cmp	r9, sl
   122b4:	movcs	r0, r9
   122b8:	ldrcc	r1, [sp, #40]	; 0x28
   122bc:	movcc	r3, #0
   122c0:	movcc	r0, r9
   122c4:	strbcc	r3, [r1, r9]
   122c8:	b	12344 <close_stdout@@Base+0xb9c>
   122cc:	cmn	r8, #1
   122d0:	beq	12998 <close_stdout@@Base+0x11f0>
   122d4:	subs	r3, r8, #1
   122d8:	movne	r3, #1
   122dc:	cmp	r3, #0
   122e0:	bne	121c0 <close_stdout@@Base+0xa18>
   122e4:	cmp	fp, #0
   122e8:	bne	121c0 <close_stdout@@Base+0xa18>
   122ec:	ldr	r3, [sp, #36]	; 0x24
   122f0:	ldr	r0, [sp, #160]	; 0xa0
   122f4:	cmp	r0, #2
   122f8:	movne	r3, #0
   122fc:	andeq	r3, r3, #1
   12300:	cmp	r3, #0
   12304:	beq	121c0 <close_stdout@@Base+0xa18>
   12308:	ldr	r2, [sp, #164]	; 0xa4
   1230c:	mov	ip, #0
   12310:	ldr	r0, [sp, #160]	; 0xa0
   12314:	bic	r3, r2, #2
   12318:	ldr	r1, [sp, #72]	; 0x48
   1231c:	ldr	r2, [sp, #68]	; 0x44
   12320:	stm	sp, {r0, r3}
   12324:	mov	r3, r8
   12328:	str	r1, [sp, #12]
   1232c:	mov	r1, sl
   12330:	str	r2, [sp, #16]
   12334:	ldr	r0, [sp, #40]	; 0x28
   12338:	ldr	r2, [sp, #32]
   1233c:	str	ip, [sp, #8]
   12340:	bl	11dd8 <close_stdout@@Base+0x630>
   12344:	ldr	r1, [sp, #56]	; 0x38
   12348:	ldr	r2, [sp, #116]	; 0x74
   1234c:	ldr	r3, [r1]
   12350:	cmp	r2, r3
   12354:	bne	12a88 <close_stdout@@Base+0x12e0>
   12358:	add	sp, sp, #124	; 0x7c
   1235c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12360:	mov	r3, #114	; 0x72
   12364:	ldr	r2, [sp, #36]	; 0x24
   12368:	ldr	r0, [sp, #160]	; 0xa0
   1236c:	cmp	r0, #2
   12370:	movne	r2, #0
   12374:	andeq	r2, r2, #1
   12378:	cmp	r2, #0
   1237c:	bne	12308 <close_stdout@@Base+0xb60>
   12380:	ldr	r1, [sp, #24]
   12384:	cmp	r1, #0
   12388:	beq	121c0 <close_stdout@@Base+0xa18>
   1238c:	mov	r4, r3
   12390:	b	121f8 <close_stdout@@Base+0xa50>
   12394:	mov	r3, #98	; 0x62
   12398:	b	12380 <close_stdout@@Base+0xbd8>
   1239c:	mov	r3, #102	; 0x66
   123a0:	b	12380 <close_stdout@@Base+0xbd8>
   123a4:	mov	r3, #118	; 0x76
   123a8:	b	12380 <close_stdout@@Base+0xbd8>
   123ac:	mov	r3, #97	; 0x61
   123b0:	b	12380 <close_stdout@@Base+0xbd8>
   123b4:	mov	r3, #110	; 0x6e
   123b8:	b	12364 <close_stdout@@Base+0xbbc>
   123bc:	mov	r3, #116	; 0x74
   123c0:	b	12364 <close_stdout@@Base+0xbbc>
   123c4:	ldr	r2, [sp, #24]
   123c8:	cmp	r2, #0
   123cc:	beq	12974 <close_stdout@@Base+0x11cc>
   123d0:	ldr	r3, [sp, #36]	; 0x24
   123d4:	cmp	r3, #0
   123d8:	bne	12308 <close_stdout@@Base+0xb60>
   123dc:	cmp	r9, sl
   123e0:	add	r2, r9, #1
   123e4:	ldrcc	r0, [sp, #40]	; 0x28
   123e8:	movcc	r3, #92	; 0x5c
   123ec:	strbcc	r3, [r0, r9]
   123f0:	add	r3, fp, #1
   123f4:	cmp	r8, r3
   123f8:	bls	12438 <close_stdout@@Base+0xc90>
   123fc:	ldr	r1, [sp, #32]
   12400:	ldrb	r3, [r1, r3]
   12404:	sub	r3, r3, #48	; 0x30
   12408:	cmp	r3, #9
   1240c:	bhi	12438 <close_stdout@@Base+0xc90>
   12410:	cmp	sl, r2
   12414:	ldrhi	r0, [sp, #40]	; 0x28
   12418:	movhi	r3, #48	; 0x30
   1241c:	strbhi	r3, [r0, r2]
   12420:	add	r3, r9, #2
   12424:	cmp	sl, r3
   12428:	ldrhi	r1, [sp, #40]	; 0x28
   1242c:	movhi	r2, #48	; 0x30
   12430:	strbhi	r2, [r1, r3]
   12434:	add	r2, r9, #3
   12438:	mov	r9, r2
   1243c:	mov	r4, #48	; 0x30
   12440:	b	121cc <close_stdout@@Base+0xa24>
   12444:	ldr	r1, [sp, #76]	; 0x4c
   12448:	cmp	r1, #0
   1244c:	beq	12458 <close_stdout@@Base+0xcb0>
   12450:	cmp	r7, #0
   12454:	bne	12218 <close_stdout@@Base+0xa70>
   12458:	mov	r3, r4
   1245c:	b	12364 <close_stdout@@Base+0xbbc>
   12460:	ldr	r1, [sp, #160]	; 0xa0
   12464:	cmp	r1, #2
   12468:	bne	121c0 <close_stdout@@Base+0xa18>
   1246c:	ldr	r2, [sp, #36]	; 0x24
   12470:	cmp	r2, #0
   12474:	bne	12308 <close_stdout@@Base+0xb60>
   12478:	cmp	r9, sl
   1247c:	ldrcc	r0, [sp, #40]	; 0x28
   12480:	movcc	r3, #39	; 0x27
   12484:	strbcc	r3, [r0, r9]
   12488:	add	r3, r9, #1
   1248c:	cmp	sl, r3
   12490:	ldrhi	r1, [sp, #40]	; 0x28
   12494:	movhi	r2, #92	; 0x5c
   12498:	strbhi	r2, [r1, r3]
   1249c:	add	r3, r9, #2
   124a0:	cmp	sl, r3
   124a4:	add	r9, r9, #3
   124a8:	ldrhi	r0, [sp, #40]	; 0x28
   124ac:	movhi	r2, #39	; 0x27
   124b0:	strbhi	r2, [r0, r3]
   124b4:	b	121c0 <close_stdout@@Base+0xa18>
   124b8:	ldr	r1, [sp, #64]	; 0x40
   124bc:	cmp	r1, #1
   124c0:	bne	127b8 <close_stdout@@Base+0x1010>
   124c4:	bl	110d0 <__ctype_b_loc@plt>
   124c8:	ldr	r2, [sp, #64]	; 0x40
   124cc:	sxth	r3, r4
   124d0:	str	r2, [sp, #60]	; 0x3c
   124d4:	lsl	r3, r3, #1
   124d8:	ldr	r2, [r0]
   124dc:	ldrh	r2, [r2, r3]
   124e0:	eor	r2, r2, #16384	; 0x4000
   124e4:	ubfx	r2, r2, #14, #1
   124e8:	ldr	r1, [sp, #24]
   124ec:	ands	r2, r2, r1
   124f0:	beq	121c0 <close_stdout@@Base+0xa18>
   124f4:	ldr	r3, [sp, #60]	; 0x3c
   124f8:	mov	r0, #92	; 0x5c
   124fc:	ldr	r7, [sp, #36]	; 0x24
   12500:	add	r1, r3, fp
   12504:	str	r8, [sp, #60]	; 0x3c
   12508:	ldr	r3, [sp, #40]	; 0x28
   1250c:	b	12570 <close_stdout@@Base+0xdc8>
   12510:	cmp	r7, #0
   12514:	bne	129b0 <close_stdout@@Base+0x1208>
   12518:	add	ip, r9, #1
   1251c:	cmp	r9, sl
   12520:	strbcc	r0, [r3, r9]
   12524:	cmp	sl, ip
   12528:	lsrhi	r8, r4, #6
   1252c:	addhi	r8, r8, #48	; 0x30
   12530:	strbhi	r8, [r3, ip]
   12534:	add	ip, r9, #2
   12538:	add	r9, r9, #3
   1253c:	cmp	sl, ip
   12540:	ubfxhi	r8, r4, #3, #3
   12544:	and	r4, r4, #7
   12548:	add	r4, r4, #48	; 0x30
   1254c:	addhi	r8, r8, #48	; 0x30
   12550:	strbhi	r8, [r3, ip]
   12554:	add	fp, fp, #1
   12558:	cmp	r1, fp
   1255c:	bls	1259c <close_stdout@@Base+0xdf4>
   12560:	cmp	r9, sl
   12564:	strbcc	r4, [r3, r9]
   12568:	ldrb	r4, [r5, #1]!
   1256c:	add	r9, r9, #1
   12570:	cmp	r2, #0
   12574:	bne	12510 <close_stdout@@Base+0xd68>
   12578:	cmp	r6, #0
   1257c:	beq	12554 <close_stdout@@Base+0xdac>
   12580:	add	fp, fp, #1
   12584:	cmp	r9, sl
   12588:	strbcc	r0, [r3, r9]
   1258c:	cmp	r1, fp
   12590:	add	r9, r9, #1
   12594:	mov	r6, #0
   12598:	bhi	12560 <close_stdout@@Base+0xdb8>
   1259c:	ldr	r8, [sp, #60]	; 0x3c
   125a0:	b	1221c <close_stdout@@Base+0xa74>
   125a4:	ldr	r3, [sp, #36]	; 0x24
   125a8:	cmp	r3, #0
   125ac:	bne	12ab0 <close_stdout@@Base+0x1308>
   125b0:	cmp	sl, #0
   125b4:	beq	129c8 <close_stdout@@Base+0x1220>
   125b8:	ldr	r1, [sp, #40]	; 0x28
   125bc:	mov	r0, #1
   125c0:	ldr	r2, [pc, #1296]	; 12ad8 <close_stdout@@Base+0x1330>
   125c4:	mov	r3, #34	; 0x22
   125c8:	str	r0, [sp, #24]
   125cc:	mov	r9, r0
   125d0:	add	r2, pc, r2
   125d4:	str	r0, [sp, #28]
   125d8:	strb	r3, [r1]
   125dc:	str	r2, [sp, #52]	; 0x34
   125e0:	b	11e8c <close_stdout@@Base+0x6e4>
   125e4:	ldr	r3, [pc, #1264]	; 12adc <close_stdout@@Base+0x1334>
   125e8:	mov	r2, #1
   125ec:	mov	r0, #3
   125f0:	str	r2, [sp, #36]	; 0x24
   125f4:	add	r3, pc, r3
   125f8:	str	r2, [sp, #24]
   125fc:	str	r3, [sp, #52]	; 0x34
   12600:	mov	r9, #0
   12604:	str	r2, [sp, #28]
   12608:	str	r0, [sp, #160]	; 0xa0
   1260c:	b	11e8c <close_stdout@@Base+0x6e4>
   12610:	mov	r0, #0
   12614:	mov	r1, #1
   12618:	str	r0, [sp, #36]	; 0x24
   1261c:	mov	r9, r0
   12620:	str	r1, [sp, #24]
   12624:	str	r0, [sp, #28]
   12628:	str	r0, [sp, #52]	; 0x34
   1262c:	b	11e8c <close_stdout@@Base+0x6e4>
   12630:	ldr	r3, [sp, #160]	; 0xa0
   12634:	cmp	r3, #8
   12638:	beq	12664 <close_stdout@@Base+0xebc>
   1263c:	ldr	r0, [pc, #1180]	; 12ae0 <close_stdout@@Base+0x1338>
   12640:	mov	r1, r3
   12644:	add	r0, pc, r0
   12648:	bl	11c74 <close_stdout@@Base+0x4cc>
   1264c:	ldr	r1, [sp, #160]	; 0xa0
   12650:	str	r0, [sp, #72]	; 0x48
   12654:	ldr	r0, [pc, #1160]	; 12ae4 <close_stdout@@Base+0x133c>
   12658:	add	r0, pc, r0
   1265c:	bl	11c74 <close_stdout@@Base+0x4cc>
   12660:	str	r0, [sp, #68]	; 0x44
   12664:	ldr	r0, [sp, #36]	; 0x24
   12668:	cmp	r0, #0
   1266c:	movne	r9, #0
   12670:	bne	126a8 <close_stdout@@Base+0xf00>
   12674:	ldr	r1, [sp, #72]	; 0x48
   12678:	ldrb	r3, [r1]
   1267c:	cmp	r3, #0
   12680:	beq	12a80 <close_stdout@@Base+0x12d8>
   12684:	mov	r2, r1
   12688:	ldr	r1, [sp, #40]	; 0x28
   1268c:	mov	r9, r0
   12690:	cmp	r9, sl
   12694:	strbcc	r3, [r1, r9]
   12698:	ldrb	r3, [r2, #1]!
   1269c:	add	r9, r9, #1
   126a0:	cmp	r3, #0
   126a4:	bne	12690 <close_stdout@@Base+0xee8>
   126a8:	ldr	r0, [sp, #68]	; 0x44
   126ac:	str	r0, [sp, #52]	; 0x34
   126b0:	bl	110f4 <strlen@plt>
   126b4:	mov	r2, #1
   126b8:	str	r2, [sp, #24]
   126bc:	str	r0, [sp, #28]
   126c0:	b	11e8c <close_stdout@@Base+0x6e4>
   126c4:	ldr	r3, [pc, #1052]	; 12ae8 <close_stdout@@Base+0x1340>
   126c8:	mov	r2, #0
   126cc:	mov	r1, #1
   126d0:	mov	r0, #2
   126d4:	add	r3, pc, r3
   126d8:	str	r1, [sp, #36]	; 0x24
   126dc:	str	r2, [sp, #24]
   126e0:	mov	r9, r2
   126e4:	str	r1, [sp, #28]
   126e8:	str	r3, [sp, #52]	; 0x34
   126ec:	str	r0, [sp, #160]	; 0xa0
   126f0:	b	11e8c <close_stdout@@Base+0x6e4>
   126f4:	ldr	r3, [sp, #36]	; 0x24
   126f8:	cmp	r3, #0
   126fc:	bne	12a8c <close_stdout@@Base+0x12e4>
   12700:	cmp	sl, #0
   12704:	beq	129e8 <close_stdout@@Base+0x1240>
   12708:	ldr	r1, [sp, #40]	; 0x28
   1270c:	mov	r3, #39	; 0x27
   12710:	ldr	r2, [sp, #36]	; 0x24
   12714:	mov	r0, #1
   12718:	mov	r9, r0
   1271c:	str	r0, [sp, #28]
   12720:	strb	r3, [r1]
   12724:	ldr	r3, [pc, #960]	; 12aec <close_stdout@@Base+0x1344>
   12728:	str	r2, [sp, #24]
   1272c:	add	r3, pc, r3
   12730:	str	r3, [sp, #52]	; 0x34
   12734:	b	11e8c <close_stdout@@Base+0x6e4>
   12738:	ldr	r2, [sp, #28]
   1273c:	cmp	r2, #1
   12740:	add	r4, fp, r2
   12744:	movls	r3, #0
   12748:	movhi	r3, #1
   1274c:	cmn	r8, #1
   12750:	movne	r3, #0
   12754:	cmp	r3, #0
   12758:	beq	12768 <close_stdout@@Base+0xfc0>
   1275c:	ldr	r0, [sp, #32]
   12760:	bl	110f4 <strlen@plt>
   12764:	mov	r8, r0
   12768:	cmp	r8, r4
   1276c:	ldrcc	r3, [sp, #32]
   12770:	movcc	r6, #0
   12774:	addcc	r5, r3, fp
   12778:	bcc	11ee8 <close_stdout@@Base+0x740>
   1277c:	ldr	r0, [sp, #32]
   12780:	ldr	r1, [sp, #52]	; 0x34
   12784:	add	r5, r0, fp
   12788:	ldr	r2, [sp, #28]
   1278c:	mov	r0, r5
   12790:	bl	10fd4 <memcmp@plt>
   12794:	cmp	r0, #0
   12798:	bne	127b0 <close_stdout@@Base+0x1008>
   1279c:	ldr	r1, [sp, #36]	; 0x24
   127a0:	cmp	r1, #0
   127a4:	bne	12308 <close_stdout@@Base+0xb60>
   127a8:	mov	r6, #1
   127ac:	b	11ee8 <close_stdout@@Base+0x740>
   127b0:	mov	r6, #0
   127b4:	b	11ee8 <close_stdout@@Base+0x740>
   127b8:	add	r7, sp, #108	; 0x6c
   127bc:	cmn	r8, #1
   127c0:	mov	r3, #0
   127c4:	str	r3, [sp, #108]	; 0x6c
   127c8:	str	r3, [r7, #4]
   127cc:	beq	129b8 <close_stdout@@Base+0x1210>
   127d0:	mov	r1, #0
   127d4:	ldr	r0, [sp, #32]
   127d8:	mov	ip, #1
   127dc:	str	r9, [sp, #88]	; 0x58
   127e0:	str	r6, [sp, #96]	; 0x60
   127e4:	mov	r9, r1
   127e8:	str	r5, [sp, #100]	; 0x64
   127ec:	mov	r6, ip
   127f0:	mov	r5, r7
   127f4:	add	r3, sp, #104	; 0x68
   127f8:	sub	r0, r0, #1
   127fc:	str	r3, [sp, #80]	; 0x50
   12800:	str	r0, [sp, #84]	; 0x54
   12804:	str	r1, [sp, #60]	; 0x3c
   12808:	str	r4, [sp, #92]	; 0x5c
   1280c:	ldr	r2, [sp, #32]
   12810:	add	r7, r9, fp
   12814:	add	r0, sp, #104	; 0x68
   12818:	mov	r3, r5
   1281c:	add	r4, r2, r7
   12820:	rsb	r2, r7, r8
   12824:	mov	r1, r4
   12828:	bl	11064 <mbrtowc@plt>
   1282c:	subs	r2, r0, #0
   12830:	beq	1293c <close_stdout@@Base+0x1194>
   12834:	cmn	r2, #1
   12838:	beq	12a64 <close_stdout@@Base+0x12bc>
   1283c:	cmn	r2, #2
   12840:	beq	12a08 <close_stdout@@Base+0x1260>
   12844:	ldr	r3, [sp, #36]	; 0x24
   12848:	ldr	r0, [sp, #160]	; 0xa0
   1284c:	cmp	r0, #2
   12850:	movne	r3, #0
   12854:	andeq	r3, r3, #1
   12858:	cmp	r3, #0
   1285c:	beq	12918 <close_stdout@@Base+0x1170>
   12860:	cmp	r2, #1
   12864:	beq	12918 <close_stdout@@Base+0x1170>
   12868:	ldr	r1, [sp, #84]	; 0x54
   1286c:	add	r3, r1, r2
   12870:	add	r7, r3, r7
   12874:	ldrb	r3, [r4, #1]!
   12878:	sub	r3, r3, #91	; 0x5b
   1287c:	cmp	r3, #33	; 0x21
   12880:	addls	pc, pc, r3, lsl #2
   12884:	b	12910 <close_stdout@@Base+0x1168>
   12888:	b	12308 <close_stdout@@Base+0xb60>
   1288c:	b	12308 <close_stdout@@Base+0xb60>
   12890:	b	12910 <close_stdout@@Base+0x1168>
   12894:	b	12308 <close_stdout@@Base+0xb60>
   12898:	b	12910 <close_stdout@@Base+0x1168>
   1289c:	b	12308 <close_stdout@@Base+0xb60>
   128a0:	b	12910 <close_stdout@@Base+0x1168>
   128a4:	b	12910 <close_stdout@@Base+0x1168>
   128a8:	b	12910 <close_stdout@@Base+0x1168>
   128ac:	b	12910 <close_stdout@@Base+0x1168>
   128b0:	b	12910 <close_stdout@@Base+0x1168>
   128b4:	b	12910 <close_stdout@@Base+0x1168>
   128b8:	b	12910 <close_stdout@@Base+0x1168>
   128bc:	b	12910 <close_stdout@@Base+0x1168>
   128c0:	b	12910 <close_stdout@@Base+0x1168>
   128c4:	b	12910 <close_stdout@@Base+0x1168>
   128c8:	b	12910 <close_stdout@@Base+0x1168>
   128cc:	b	12910 <close_stdout@@Base+0x1168>
   128d0:	b	12910 <close_stdout@@Base+0x1168>
   128d4:	b	12910 <close_stdout@@Base+0x1168>
   128d8:	b	12910 <close_stdout@@Base+0x1168>
   128dc:	b	12910 <close_stdout@@Base+0x1168>
   128e0:	b	12910 <close_stdout@@Base+0x1168>
   128e4:	b	12910 <close_stdout@@Base+0x1168>
   128e8:	b	12910 <close_stdout@@Base+0x1168>
   128ec:	b	12910 <close_stdout@@Base+0x1168>
   128f0:	b	12910 <close_stdout@@Base+0x1168>
   128f4:	b	12910 <close_stdout@@Base+0x1168>
   128f8:	b	12910 <close_stdout@@Base+0x1168>
   128fc:	b	12910 <close_stdout@@Base+0x1168>
   12900:	b	12910 <close_stdout@@Base+0x1168>
   12904:	b	12910 <close_stdout@@Base+0x1168>
   12908:	b	12910 <close_stdout@@Base+0x1168>
   1290c:	b	12308 <close_stdout@@Base+0xb60>
   12910:	cmp	r4, r7
   12914:	bne	12874 <close_stdout@@Base+0x10cc>
   12918:	ldr	r0, [sp, #104]	; 0x68
   1291c:	add	r9, r9, r2
   12920:	bl	1101c <iswprint@plt>
   12924:	cmp	r0, #0
   12928:	mov	r0, r5
   1292c:	moveq	r6, #0
   12930:	bl	10fbc <mbsinit@plt>
   12934:	cmp	r0, #0
   12938:	beq	1280c <close_stdout@@Base+0x1064>
   1293c:	mov	ip, r6
   12940:	eor	r2, ip, #1
   12944:	str	r9, [sp, #60]	; 0x3c
   12948:	ldr	r4, [sp, #92]	; 0x5c
   1294c:	uxtb	r2, r2
   12950:	ldr	r9, [sp, #88]	; 0x58
   12954:	ldr	r6, [sp, #96]	; 0x60
   12958:	ldr	r5, [sp, #100]	; 0x64
   1295c:	ldr	r3, [sp, #60]	; 0x3c
   12960:	cmp	r3, #1
   12964:	bls	124e8 <close_stdout@@Base+0xd40>
   12968:	ldr	r0, [sp, #24]
   1296c:	and	r2, r2, r0
   12970:	b	124f4 <close_stdout@@Base+0xd4c>
   12974:	ldr	r2, [sp, #164]	; 0xa4
   12978:	tst	r2, #1
   1297c:	addne	fp, fp, #1
   12980:	bne	11eb0 <close_stdout@@Base+0x708>
   12984:	b	121c0 <close_stdout@@Base+0xa18>
   12988:	ldr	r0, [sp, #36]	; 0x24
   1298c:	cmp	r0, #0
   12990:	beq	121c0 <close_stdout@@Base+0xa18>
   12994:	b	12308 <close_stdout@@Base+0xb60>
   12998:	ldr	r2, [sp, #32]
   1299c:	ldrb	r3, [r2, #1]
   129a0:	adds	r3, r3, #0
   129a4:	movne	r3, #1
   129a8:	b	122dc <close_stdout@@Base+0xb34>
   129ac:	bl	111d8 <abort@plt>
   129b0:	ldr	r8, [sp, #60]	; 0x3c
   129b4:	b	12308 <close_stdout@@Base+0xb60>
   129b8:	ldr	r0, [sp, #32]
   129bc:	bl	110f4 <strlen@plt>
   129c0:	mov	r8, r0
   129c4:	b	127d0 <close_stdout@@Base+0x1028>
   129c8:	ldr	r2, [pc, #288]	; 12af0 <close_stdout@@Base+0x1348>
   129cc:	mov	r1, #1
   129d0:	mov	r9, r1
   129d4:	str	r1, [sp, #24]
   129d8:	add	r2, pc, r2
   129dc:	str	r1, [sp, #28]
   129e0:	str	r2, [sp, #52]	; 0x34
   129e4:	b	11e8c <close_stdout@@Base+0x6e4>
   129e8:	ldr	r2, [pc, #260]	; 12af4 <close_stdout@@Base+0x134c>
   129ec:	mov	r3, #1
   129f0:	mov	r9, r3
   129f4:	str	r3, [sp, #28]
   129f8:	add	r2, pc, r2
   129fc:	str	sl, [sp, #24]
   12a00:	str	r2, [sp, #52]	; 0x34
   12a04:	b	11e8c <close_stdout@@Base+0x6e4>
   12a08:	cmp	r8, r7
   12a0c:	str	r9, [sp, #60]	; 0x3c
   12a10:	mov	ip, r4
   12a14:	ldr	r6, [sp, #96]	; 0x60
   12a18:	ldr	r9, [sp, #88]	; 0x58
   12a1c:	ldr	r4, [sp, #92]	; 0x5c
   12a20:	ldr	r5, [sp, #100]	; 0x64
   12a24:	bls	12a5c <close_stdout@@Base+0x12b4>
   12a28:	ldrb	r3, [ip]
   12a2c:	cmp	r3, #0
   12a30:	beq	12a5c <close_stdout@@Base+0x12b4>
   12a34:	ldr	r3, [sp, #60]	; 0x3c
   12a38:	b	12a48 <close_stdout@@Base+0x12a0>
   12a3c:	ldrb	r2, [r5, r3]
   12a40:	cmp	r2, #0
   12a44:	beq	12a58 <close_stdout@@Base+0x12b0>
   12a48:	add	r3, r3, #1
   12a4c:	add	r2, fp, r3
   12a50:	cmp	r8, r2
   12a54:	bhi	12a3c <close_stdout@@Base+0x1294>
   12a58:	str	r3, [sp, #60]	; 0x3c
   12a5c:	mov	r2, #1
   12a60:	b	1295c <close_stdout@@Base+0x11b4>
   12a64:	str	r9, [sp, #60]	; 0x3c
   12a68:	mov	r2, #1
   12a6c:	ldr	r4, [sp, #92]	; 0x5c
   12a70:	ldr	r6, [sp, #96]	; 0x60
   12a74:	ldr	r9, [sp, #88]	; 0x58
   12a78:	ldr	r5, [sp, #100]	; 0x64
   12a7c:	b	1295c <close_stdout@@Base+0x11b4>
   12a80:	ldr	r9, [sp, #36]	; 0x24
   12a84:	b	126a8 <close_stdout@@Base+0xf00>
   12a88:	bl	10fec <__stack_chk_fail@plt>
   12a8c:	ldr	r1, [pc, #100]	; 12af8 <close_stdout@@Base+0x1350>
   12a90:	mov	r3, #0
   12a94:	mov	r0, #1
   12a98:	str	r3, [sp, #24]
   12a9c:	add	r1, pc, r1
   12aa0:	str	r0, [sp, #28]
   12aa4:	mov	r9, r3
   12aa8:	str	r1, [sp, #52]	; 0x34
   12aac:	b	11e8c <close_stdout@@Base+0x6e4>
   12ab0:	ldr	r0, [pc, #68]	; 12afc <close_stdout@@Base+0x1354>
   12ab4:	mov	r3, #1
   12ab8:	mov	r9, #0
   12abc:	str	r3, [sp, #24]
   12ac0:	add	r0, pc, r0
   12ac4:	str	r3, [sp, #28]
   12ac8:	str	r0, [sp, #52]	; 0x34
   12acc:	b	11e8c <close_stdout@@Base+0x6e4>
   12ad0:	andeq	r4, r1, r4, lsl #4
   12ad4:	strdeq	r0, [r0], -r4
   12ad8:			; <UNDEFINED> instruction: 0x000027b4
   12adc:	muleq	r0, r0, r7
   12ae0:	andeq	r2, r0, ip, asr #14
   12ae4:	andeq	r2, r0, r8, lsr #14
   12ae8:	andeq	r2, r0, ip, lsr #13
   12aec:	andeq	r2, r0, r4, asr r6
   12af0:	andeq	r2, r0, ip, lsr #7
   12af4:	andeq	r2, r0, r8, lsl #7
   12af8:	andeq	r2, r0, r4, ror #5
   12afc:	andeq	r2, r0, r4, asr #5
   12b00:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b04:	sub	sp, sp, #44	; 0x2c
   12b08:	mov	r6, r0
   12b0c:	mov	r9, r1
   12b10:	mov	sl, r2
   12b14:	mov	r4, r3
   12b18:	bl	11118 <__errno_location@plt>
   12b1c:	ldr	fp, [pc, #412]	; 12cc0 <close_stdout@@Base+0x1518>
   12b20:	cmp	r6, #0
   12b24:	add	fp, pc, fp
   12b28:	ldr	r5, [fp]
   12b2c:	ldr	r1, [r0]
   12b30:	mov	r8, r0
   12b34:	str	r1, [sp, #36]	; 0x24
   12b38:	blt	12cb8 <close_stdout@@Base+0x1510>
   12b3c:	ldr	r3, [pc, #384]	; 12cc4 <close_stdout@@Base+0x151c>
   12b40:	add	r3, pc, r3
   12b44:	ldr	r3, [r3]
   12b48:	cmp	r6, r3
   12b4c:	bcc	12ba0 <close_stdout@@Base+0x13f8>
   12b50:	add	r7, r6, #1
   12b54:	cmn	r7, #-536870911	; 0xe0000001
   12b58:	bhi	12cbc <close_stdout@@Base+0x1514>
   12b5c:	add	r3, fp, #4
   12b60:	cmp	r5, r3
   12b64:	beq	12c90 <close_stdout@@Base+0x14e8>
   12b68:	mov	r0, r5
   12b6c:	lsl	r1, r7, #3
   12b70:	bl	13998 <close_stdout@@Base+0x21f0>
   12b74:	mov	r5, r0
   12b78:	str	r0, [fp]
   12b7c:	ldr	fp, [pc, #324]	; 12cc8 <close_stdout@@Base+0x1520>
   12b80:	mov	r1, #0
   12b84:	add	fp, pc, fp
   12b88:	ldr	r0, [fp]
   12b8c:	rsb	r2, r0, r7
   12b90:	add	r0, r5, r0, lsl #3
   12b94:	lsl	r2, r2, #3
   12b98:	bl	11130 <memset@plt>
   12b9c:	str	r7, [fp]
   12ba0:	add	r2, r4, #8
   12ba4:	str	r2, [sp, #32]
   12ba8:	ldr	r1, [r4]
   12bac:	add	fp, r5, r6, lsl #3
   12bb0:	ldr	lr, [sp, #32]
   12bb4:	mov	r2, r9
   12bb8:	ldr	r3, [r4, #4]
   12bbc:	ldr	ip, [r5, r6, lsl #3]
   12bc0:	ldr	r7, [fp, #4]
   12bc4:	orr	r3, r3, #1
   12bc8:	str	r1, [sp]
   12bcc:	str	r3, [sp, #4]
   12bd0:	mov	r1, ip
   12bd4:	str	lr, [sp, #8]
   12bd8:	mov	r0, r7
   12bdc:	ldr	lr, [r4, #40]	; 0x28
   12be0:	str	r3, [sp, #28]
   12be4:	mov	r3, sl
   12be8:	str	lr, [sp, #12]
   12bec:	ldr	lr, [r4, #44]	; 0x2c
   12bf0:	str	ip, [sp, #24]
   12bf4:	str	lr, [sp, #16]
   12bf8:	bl	11dd8 <close_stdout@@Base+0x630>
   12bfc:	ldr	ip, [sp, #24]
   12c00:	cmp	ip, r0
   12c04:	bhi	12c7c <close_stdout@@Base+0x14d4>
   12c08:	ldr	r3, [pc, #188]	; 12ccc <close_stdout@@Base+0x1524>
   12c0c:	add	r1, r0, #1
   12c10:	str	r1, [r5, r6, lsl #3]
   12c14:	add	r3, pc, r3
   12c18:	cmp	r7, r3
   12c1c:	beq	12c30 <close_stdout@@Base+0x1488>
   12c20:	mov	r0, r7
   12c24:	str	r1, [sp, #24]
   12c28:	bl	10f98 <free@plt>
   12c2c:	ldr	r1, [sp, #24]
   12c30:	mov	r0, r1
   12c34:	str	r1, [sp, #24]
   12c38:	bl	13940 <close_stdout@@Base+0x2198>
   12c3c:	ldr	r3, [sp, #28]
   12c40:	ldr	lr, [sp, #32]
   12c44:	mov	r2, r9
   12c48:	str	r0, [fp, #4]
   12c4c:	mov	r7, r0
   12c50:	ldr	ip, [r4]
   12c54:	str	r3, [sp, #4]
   12c58:	mov	r3, sl
   12c5c:	str	lr, [sp, #8]
   12c60:	str	ip, [sp]
   12c64:	ldr	ip, [r4, #40]	; 0x28
   12c68:	ldr	r1, [sp, #24]
   12c6c:	str	ip, [sp, #12]
   12c70:	ldr	ip, [r4, #44]	; 0x2c
   12c74:	str	ip, [sp, #16]
   12c78:	bl	11dd8 <close_stdout@@Base+0x630>
   12c7c:	ldr	r1, [sp, #36]	; 0x24
   12c80:	mov	r0, r7
   12c84:	str	r1, [r8]
   12c88:	add	sp, sp, #44	; 0x2c
   12c8c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12c90:	lsl	r1, r7, #3
   12c94:	mov	r0, #0
   12c98:	str	r3, [sp, #24]
   12c9c:	bl	13998 <close_stdout@@Base+0x21f0>
   12ca0:	ldr	r3, [sp, #24]
   12ca4:	mov	r5, r0
   12ca8:	ldm	r3, {r0, r1}
   12cac:	str	r5, [fp]
   12cb0:	stm	r5, {r0, r1}
   12cb4:	b	12b7c <close_stdout@@Base+0x13d4>
   12cb8:	bl	111d8 <abort@plt>
   12cbc:	bl	13b54 <close_stdout@@Base+0x23ac>
   12cc0:	andeq	r3, r1, r0, asr #12
   12cc4:	strdeq	r3, [r1], -r0
   12cc8:	andeq	r3, r1, ip, lsr #11
   12ccc:	andeq	r3, r1, ip, ror #10
   12cd0:	push	{r4, r5, r6, lr}
   12cd4:	mov	r5, r0
   12cd8:	bl	11118 <__errno_location@plt>
   12cdc:	cmp	r5, #0
   12ce0:	mov	r1, #48	; 0x30
   12ce4:	mov	r4, r0
   12ce8:	ldr	r0, [pc, #24]	; 12d08 <close_stdout@@Base+0x1560>
   12cec:	ldr	r6, [r4]
   12cf0:	add	r0, pc, r0
   12cf4:	add	r0, r0, #256	; 0x100
   12cf8:	movne	r0, r5
   12cfc:	bl	13b14 <close_stdout@@Base+0x236c>
   12d00:	str	r6, [r4]
   12d04:	pop	{r4, r5, r6, pc}
   12d08:	muleq	r1, r0, r4
   12d0c:	cmp	r0, #0
   12d10:	beq	12d1c <close_stdout@@Base+0x1574>
   12d14:	ldr	r0, [r0]
   12d18:	bx	lr
   12d1c:	ldr	r0, [pc, #12]	; 12d30 <close_stdout@@Base+0x1588>
   12d20:	add	r0, pc, r0
   12d24:	add	r0, r0, #256	; 0x100
   12d28:	ldr	r0, [r0]
   12d2c:	bx	lr
   12d30:	andeq	r3, r1, r0, ror #8
   12d34:	cmp	r0, #0
   12d38:	beq	12d44 <close_stdout@@Base+0x159c>
   12d3c:	str	r1, [r0]
   12d40:	bx	lr
   12d44:	ldr	r0, [pc, #12]	; 12d58 <close_stdout@@Base+0x15b0>
   12d48:	add	r0, pc, r0
   12d4c:	add	r0, r0, #256	; 0x100
   12d50:	str	r1, [r0]
   12d54:	bx	lr
   12d58:	andeq	r3, r1, r8, lsr r4
   12d5c:	cmp	r0, #0
   12d60:	movne	r3, r0
   12d64:	beq	12d94 <close_stdout@@Base+0x15ec>
   12d68:	lsr	ip, r1, #5
   12d6c:	and	r1, r1, #31
   12d70:	add	r3, r3, ip, lsl #2
   12d74:	ldr	ip, [r3, #8]
   12d78:	lsr	r0, ip, r1
   12d7c:	eor	r2, r0, r2
   12d80:	and	r0, r0, #1
   12d84:	and	r2, r2, #1
   12d88:	eor	ip, ip, r2, lsl r1
   12d8c:	str	ip, [r3, #8]
   12d90:	bx	lr
   12d94:	ldr	r3, [pc, #8]	; 12da4 <close_stdout@@Base+0x15fc>
   12d98:	add	r3, pc, r3
   12d9c:	add	r3, r3, #256	; 0x100
   12da0:	b	12d68 <close_stdout@@Base+0x15c0>
   12da4:	andeq	r3, r1, r8, ror #7
   12da8:	subs	r3, r0, #0
   12dac:	beq	12dbc <close_stdout@@Base+0x1614>
   12db0:	ldr	r0, [r3, #4]
   12db4:	str	r1, [r3, #4]
   12db8:	bx	lr
   12dbc:	ldr	r3, [pc, #8]	; 12dcc <close_stdout@@Base+0x1624>
   12dc0:	add	r3, pc, r3
   12dc4:	add	r3, r3, #256	; 0x100
   12dc8:	b	12db0 <close_stdout@@Base+0x1608>
   12dcc:	andeq	r3, r1, r0, asr #7
   12dd0:	cmp	r0, #0
   12dd4:	push	{r3, lr}
   12dd8:	beq	12dfc <close_stdout@@Base+0x1654>
   12ddc:	cmp	r2, #0
   12de0:	cmpne	r1, #0
   12de4:	mov	r3, #8
   12de8:	strne	r1, [r0, #40]	; 0x28
   12dec:	str	r3, [r0]
   12df0:	strne	r2, [r0, #44]	; 0x2c
   12df4:	popne	{r3, pc}
   12df8:	bl	111d8 <abort@plt>
   12dfc:	ldr	r0, [pc, #8]	; 12e0c <close_stdout@@Base+0x1664>
   12e00:	add	r0, pc, r0
   12e04:	add	r0, r0, #256	; 0x100
   12e08:	b	12ddc <close_stdout@@Base+0x1634>
   12e0c:	andeq	r3, r1, r0, lsl #7
   12e10:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12e14:	sub	sp, sp, #24
   12e18:	mov	r7, r0
   12e1c:	mov	sl, r1
   12e20:	ldr	r4, [sp, #56]	; 0x38
   12e24:	mov	r9, r2
   12e28:	mov	r8, r3
   12e2c:	cmp	r4, #0
   12e30:	beq	12e84 <close_stdout@@Base+0x16dc>
   12e34:	bl	11118 <__errno_location@plt>
   12e38:	ldr	r3, [r4]
   12e3c:	add	lr, r4, #8
   12e40:	mov	r1, sl
   12e44:	mov	r2, r9
   12e48:	ldr	r6, [r0]
   12e4c:	mov	r5, r0
   12e50:	str	r3, [sp]
   12e54:	mov	r0, r7
   12e58:	ldr	ip, [r4, #4]
   12e5c:	mov	r3, r8
   12e60:	stmib	sp, {ip, lr}
   12e64:	ldr	ip, [r4, #40]	; 0x28
   12e68:	str	ip, [sp, #12]
   12e6c:	ldr	ip, [r4, #44]	; 0x2c
   12e70:	str	ip, [sp, #16]
   12e74:	bl	11dd8 <close_stdout@@Base+0x630>
   12e78:	str	r6, [r5]
   12e7c:	add	sp, sp, #24
   12e80:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12e84:	ldr	r4, [pc, #8]	; 12e94 <close_stdout@@Base+0x16ec>
   12e88:	add	r4, pc, r4
   12e8c:	add	r4, r4, #256	; 0x100
   12e90:	b	12e34 <close_stdout@@Base+0x168c>
   12e94:	strdeq	r3, [r1], -r8
   12e98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12e9c:	subs	r4, r3, #0
   12ea0:	sub	sp, sp, #36	; 0x24
   12ea4:	mov	r7, r0
   12ea8:	mov	r6, r1
   12eac:	mov	r5, r2
   12eb0:	beq	12f6c <close_stdout@@Base+0x17c4>
   12eb4:	bl	11118 <__errno_location@plt>
   12eb8:	ldr	r3, [r4]
   12ebc:	ldr	sl, [r4, #4]
   12ec0:	add	r9, r4, #8
   12ec4:	mov	r8, r0
   12ec8:	mov	r0, #0
   12ecc:	ldr	r2, [r8]
   12ed0:	cmp	r5, r0
   12ed4:	orreq	sl, sl, #1
   12ed8:	str	r9, [sp, #8]
   12edc:	mov	r1, r0
   12ee0:	stm	sp, {r3, sl}
   12ee4:	mov	r3, r6
   12ee8:	ldr	ip, [r4, #40]	; 0x28
   12eec:	str	r2, [sp, #28]
   12ef0:	mov	r2, r7
   12ef4:	str	ip, [sp, #12]
   12ef8:	ldr	ip, [r4, #44]	; 0x2c
   12efc:	str	ip, [sp, #16]
   12f00:	bl	11dd8 <close_stdout@@Base+0x630>
   12f04:	add	r1, r0, #1
   12f08:	mov	fp, r0
   12f0c:	str	r1, [sp, #24]
   12f10:	mov	r0, r1
   12f14:	bl	13940 <close_stdout@@Base+0x2198>
   12f18:	ldr	lr, [r4]
   12f1c:	str	sl, [sp, #4]
   12f20:	mov	r3, r6
   12f24:	str	r9, [sp, #8]
   12f28:	mov	r2, r7
   12f2c:	str	lr, [sp]
   12f30:	ldr	lr, [r4, #40]	; 0x28
   12f34:	ldr	r1, [sp, #24]
   12f38:	str	lr, [sp, #12]
   12f3c:	ldr	lr, [r4, #44]	; 0x2c
   12f40:	str	lr, [sp, #16]
   12f44:	str	r0, [sp, #24]
   12f48:	bl	11dd8 <close_stdout@@Base+0x630>
   12f4c:	ldr	r3, [sp, #28]
   12f50:	cmp	r5, #0
   12f54:	str	r3, [r8]
   12f58:	ldr	ip, [sp, #24]
   12f5c:	strne	fp, [r5]
   12f60:	mov	r0, ip
   12f64:	add	sp, sp, #36	; 0x24
   12f68:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12f6c:	ldr	r4, [pc, #8]	; 12f7c <close_stdout@@Base+0x17d4>
   12f70:	add	r4, pc, r4
   12f74:	add	r4, r4, #256	; 0x100
   12f78:	b	12eb4 <close_stdout@@Base+0x170c>
   12f7c:	andeq	r3, r1, r0, lsl r2
   12f80:	mov	r3, r2
   12f84:	mov	r2, #0
   12f88:	b	12e98 <close_stdout@@Base+0x16f0>
   12f8c:	ldr	r2, [pc, #152]	; 1302c <close_stdout@@Base+0x1884>
   12f90:	push	{r3, r4, r5, r6, r7, lr}
   12f94:	add	r2, pc, r2
   12f98:	ldr	r3, [pc, #144]	; 13030 <close_stdout@@Base+0x1888>
   12f9c:	ldr	r6, [r2]
   12fa0:	add	r3, pc, r3
   12fa4:	cmp	r6, #1
   12fa8:	ldr	r7, [r3]
   12fac:	movhi	r4, #1
   12fb0:	movhi	r5, r7
   12fb4:	bls	12fd0 <close_stdout@@Base+0x1828>
   12fb8:	ldr	r0, [r5, #12]
   12fbc:	add	r4, r4, #1
   12fc0:	bl	10f98 <free@plt>
   12fc4:	cmp	r4, r6
   12fc8:	add	r5, r5, #8
   12fcc:	bne	12fb8 <close_stdout@@Base+0x1810>
   12fd0:	ldr	r4, [pc, #92]	; 13034 <close_stdout@@Base+0x188c>
   12fd4:	ldr	r0, [r7, #4]
   12fd8:	add	r4, pc, r4
   12fdc:	cmp	r0, r4
   12fe0:	beq	12ff8 <close_stdout@@Base+0x1850>
   12fe4:	bl	10f98 <free@plt>
   12fe8:	ldr	r3, [pc, #72]	; 13038 <close_stdout@@Base+0x1890>
   12fec:	mov	r2, #256	; 0x100
   12ff0:	add	r3, pc, r3
   12ff4:	stmib	r3, {r2, r4}
   12ff8:	ldr	r4, [pc, #60]	; 1303c <close_stdout@@Base+0x1894>
   12ffc:	add	r4, pc, r4
   13000:	add	r5, r4, #4
   13004:	cmp	r7, r5
   13008:	beq	13018 <close_stdout@@Base+0x1870>
   1300c:	mov	r0, r7
   13010:	bl	10f98 <free@plt>
   13014:	str	r5, [r4]
   13018:	ldr	r3, [pc, #32]	; 13040 <close_stdout@@Base+0x1898>
   1301c:	mov	r2, #1
   13020:	add	r3, pc, r3
   13024:	str	r2, [r3]
   13028:	pop	{r3, r4, r5, r6, r7, pc}
   1302c:	muleq	r1, ip, r1
   13030:	andeq	r3, r1, r4, asr #3
   13034:	andeq	r3, r1, r8, lsr #3
   13038:	andeq	r3, r1, r4, ror r1
   1303c:	andeq	r3, r1, r8, ror #2
   13040:	andeq	r3, r1, r0, lsl r1
   13044:	ldr	r3, [pc, #12]	; 13058 <close_stdout@@Base+0x18b0>
   13048:	mvn	r2, #0
   1304c:	add	r3, pc, r3
   13050:	add	r3, r3, #256	; 0x100
   13054:	b	12b00 <close_stdout@@Base+0x1358>
   13058:	andeq	r3, r1, r4, lsr r1
   1305c:	ldr	r3, [pc, #8]	; 1306c <close_stdout@@Base+0x18c4>
   13060:	add	r3, pc, r3
   13064:	add	r3, r3, #256	; 0x100
   13068:	b	12b00 <close_stdout@@Base+0x1358>
   1306c:	andeq	r3, r1, r0, lsr #2
   13070:	mov	r1, r0
   13074:	mov	r0, #0
   13078:	b	13044 <close_stdout@@Base+0x189c>
   1307c:	mov	r2, r1
   13080:	mov	r1, r0
   13084:	mov	r0, #0
   13088:	b	1305c <close_stdout@@Base+0x18b4>
   1308c:	ldr	r3, [pc, #92]	; 130f0 <close_stdout@@Base+0x1948>
   13090:	ldr	ip, [pc, #92]	; 130f4 <close_stdout@@Base+0x194c>
   13094:	add	r3, pc, r3
   13098:	push	{r4, r5, r6, r7, lr}
   1309c:	sub	sp, sp, #60	; 0x3c
   130a0:	ldr	r4, [r3, ip]
   130a4:	add	r5, sp, #4
   130a8:	mov	r7, r2
   130ac:	mov	r6, r0
   130b0:	mov	r0, r5
   130b4:	ldr	r3, [r4]
   130b8:	str	r3, [sp, #52]	; 0x34
   130bc:	bl	11c20 <close_stdout@@Base+0x478>
   130c0:	mov	r3, r5
   130c4:	mvn	r2, #0
   130c8:	mov	r0, r6
   130cc:	mov	r1, r7
   130d0:	bl	12b00 <close_stdout@@Base+0x1358>
   130d4:	ldr	r2, [sp, #52]	; 0x34
   130d8:	ldr	r3, [r4]
   130dc:	cmp	r2, r3
   130e0:	bne	130ec <close_stdout@@Base+0x1944>
   130e4:	add	sp, sp, #60	; 0x3c
   130e8:	pop	{r4, r5, r6, r7, pc}
   130ec:	bl	10fec <__stack_chk_fail@plt>
   130f0:	andeq	r2, r1, r4, ror #30
   130f4:	strdeq	r0, [r0], -r4
   130f8:	ldr	ip, [pc, #96]	; 13160 <close_stdout@@Base+0x19b8>
   130fc:	push	{r4, r5, r6, r7, r8, lr}
   13100:	add	ip, pc, ip
   13104:	ldr	lr, [pc, #88]	; 13164 <close_stdout@@Base+0x19bc>
   13108:	sub	sp, sp, #56	; 0x38
   1310c:	mov	r8, r3
   13110:	add	r5, sp, #4
   13114:	mov	r7, r2
   13118:	mov	r6, r0
   1311c:	ldr	r4, [ip, lr]
   13120:	mov	r0, r5
   13124:	ldr	r3, [r4]
   13128:	str	r3, [sp, #52]	; 0x34
   1312c:	bl	11c20 <close_stdout@@Base+0x478>
   13130:	mov	r2, r8
   13134:	mov	r3, r5
   13138:	mov	r0, r6
   1313c:	mov	r1, r7
   13140:	bl	12b00 <close_stdout@@Base+0x1358>
   13144:	ldr	r2, [sp, #52]	; 0x34
   13148:	ldr	r3, [r4]
   1314c:	cmp	r2, r3
   13150:	bne	1315c <close_stdout@@Base+0x19b4>
   13154:	add	sp, sp, #56	; 0x38
   13158:	pop	{r4, r5, r6, r7, r8, pc}
   1315c:	bl	10fec <__stack_chk_fail@plt>
   13160:	strdeq	r2, [r1], -r8
   13164:	strdeq	r0, [r0], -r4
   13168:	mov	r2, r1
   1316c:	mov	r1, r0
   13170:	mov	r0, #0
   13174:	b	1308c <close_stdout@@Base+0x18e4>
   13178:	mov	ip, r1
   1317c:	mov	r3, r2
   13180:	mov	r1, r0
   13184:	mov	r2, ip
   13188:	mov	r0, #0
   1318c:	b	130f8 <close_stdout@@Base+0x1950>
   13190:	push	{r4, r5, r6, r7, r8, lr}
   13194:	mov	r5, r2
   13198:	ldr	lr, [pc, #136]	; 13228 <close_stdout@@Base+0x1a80>
   1319c:	mov	r7, r0
   131a0:	mov	r6, r1
   131a4:	ldr	r4, [pc, #128]	; 1322c <close_stdout@@Base+0x1a84>
   131a8:	add	lr, pc, lr
   131ac:	sub	sp, sp, #56	; 0x38
   131b0:	add	lr, lr, #256	; 0x100
   131b4:	ldr	r8, [pc, #116]	; 13230 <close_stdout@@Base+0x1a88>
   131b8:	add	r4, pc, r4
   131bc:	add	ip, sp, #4
   131c0:	ldm	lr!, {r0, r1, r2, r3}
   131c4:	ldr	r4, [r4, r8]
   131c8:	stmia	ip!, {r0, r1, r2, r3}
   131cc:	ldm	lr!, {r0, r1, r2, r3}
   131d0:	ldr	r8, [r4]
   131d4:	stmia	ip!, {r0, r1, r2, r3}
   131d8:	ldm	lr, {r0, r1, r2, r3}
   131dc:	str	r8, [sp, #52]	; 0x34
   131e0:	stm	ip, {r0, r1, r2, r3}
   131e4:	mov	r1, r5
   131e8:	add	r5, sp, #4
   131ec:	mov	r2, #1
   131f0:	mov	r0, r5
   131f4:	bl	12d5c <close_stdout@@Base+0x15b4>
   131f8:	mov	r2, r6
   131fc:	mov	r3, r5
   13200:	mov	r1, r7
   13204:	mov	r0, #0
   13208:	bl	12b00 <close_stdout@@Base+0x1358>
   1320c:	ldr	r2, [sp, #52]	; 0x34
   13210:	ldr	r3, [r4]
   13214:	cmp	r2, r3
   13218:	bne	13224 <close_stdout@@Base+0x1a7c>
   1321c:	add	sp, sp, #56	; 0x38
   13220:	pop	{r4, r5, r6, r7, r8, pc}
   13224:	bl	10fec <__stack_chk_fail@plt>
   13228:	ldrdeq	r2, [r1], -r8
   1322c:	andeq	r2, r1, r0, asr #28
   13230:	strdeq	r0, [r0], -r4
   13234:	mov	r2, r1
   13238:	mvn	r1, #0
   1323c:	b	13190 <close_stdout@@Base+0x19e8>
   13240:	mov	r1, #58	; 0x3a
   13244:	b	13234 <close_stdout@@Base+0x1a8c>
   13248:	mov	r2, #58	; 0x3a
   1324c:	b	13190 <close_stdout@@Base+0x19e8>
   13250:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13254:	mov	r5, r2
   13258:	ldr	lr, [pc, #144]	; 132f0 <close_stdout@@Base+0x1b48>
   1325c:	mov	r8, r0
   13260:	mov	r9, r1
   13264:	mov	r7, r3
   13268:	add	lr, pc, lr
   1326c:	ldr	r4, [pc, #128]	; 132f4 <close_stdout@@Base+0x1b4c>
   13270:	add	lr, lr, #256	; 0x100
   13274:	sub	sp, sp, #56	; 0x38
   13278:	ldr	sl, [pc, #120]	; 132f8 <close_stdout@@Base+0x1b50>
   1327c:	add	r4, pc, r4
   13280:	ldm	lr!, {r0, r1, r2, r3}
   13284:	add	ip, sp, #4
   13288:	ldr	r4, [r4, sl]
   1328c:	ldr	r6, [sp, #88]	; 0x58
   13290:	stmia	ip!, {r0, r1, r2, r3}
   13294:	ldm	lr!, {r0, r1, r2, r3}
   13298:	ldr	sl, [r4]
   1329c:	stmia	ip!, {r0, r1, r2, r3}
   132a0:	ldm	lr, {r0, r1, r2, r3}
   132a4:	str	sl, [sp, #52]	; 0x34
   132a8:	stm	ip, {r0, r1, r2, r3}
   132ac:	mov	r2, r5
   132b0:	add	r5, sp, #4
   132b4:	mov	r1, r9
   132b8:	mov	r0, r5
   132bc:	bl	12dd0 <close_stdout@@Base+0x1628>
   132c0:	mov	r2, r6
   132c4:	mov	r3, r5
   132c8:	mov	r0, r8
   132cc:	mov	r1, r7
   132d0:	bl	12b00 <close_stdout@@Base+0x1358>
   132d4:	ldr	r2, [sp, #52]	; 0x34
   132d8:	ldr	r3, [r4]
   132dc:	cmp	r2, r3
   132e0:	bne	132ec <close_stdout@@Base+0x1b44>
   132e4:	add	sp, sp, #56	; 0x38
   132e8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   132ec:	bl	10fec <__stack_chk_fail@plt>
   132f0:	andeq	r2, r1, r8, lsl pc
   132f4:	andeq	r2, r1, ip, ror sp
   132f8:	strdeq	r0, [r0], -r4
   132fc:	push	{lr}		; (str lr, [sp, #-4]!)
   13300:	sub	sp, sp, #12
   13304:	mvn	ip, #0
   13308:	str	ip, [sp]
   1330c:	bl	13250 <close_stdout@@Base+0x1aa8>
   13310:	add	sp, sp, #12
   13314:	pop	{pc}		; (ldr pc, [sp], #4)
   13318:	mov	ip, r1
   1331c:	mov	r3, r2
   13320:	mov	r1, r0
   13324:	mov	r2, ip
   13328:	mov	r0, #0
   1332c:	b	132fc <close_stdout@@Base+0x1b54>
   13330:	push	{lr}		; (str lr, [sp, #-4]!)
   13334:	sub	sp, sp, #12
   13338:	mov	lr, r1
   1333c:	mov	ip, r2
   13340:	mov	r1, r0
   13344:	str	r3, [sp]
   13348:	mov	r2, lr
   1334c:	mov	r3, ip
   13350:	mov	r0, #0
   13354:	bl	13250 <close_stdout@@Base+0x1aa8>
   13358:	add	sp, sp, #12
   1335c:	pop	{pc}		; (ldr pc, [sp], #4)
   13360:	ldr	r3, [pc, #12]	; 13374 <close_stdout@@Base+0x1bcc>
   13364:	ldr	ip, [pc, #12]	; 13378 <close_stdout@@Base+0x1bd0>
   13368:	add	r3, pc, r3
   1336c:	ldr	r3, [r3, ip]
   13370:	b	12b00 <close_stdout@@Base+0x1358>
   13374:	muleq	r1, r0, ip
   13378:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1337c:	mov	r2, r1
   13380:	mov	r1, r0
   13384:	mov	r0, #0
   13388:	b	13360 <close_stdout@@Base+0x1bb8>
   1338c:	mvn	r2, #0
   13390:	b	13360 <close_stdout@@Base+0x1bb8>
   13394:	mov	r1, r0
   13398:	mov	r0, #0
   1339c:	b	1338c <close_stdout@@Base+0x1be4>
   133a0:	push	{r4, r5, r6, r7, lr}
   133a4:	cmp	r1, #0
   133a8:	sub	sp, sp, #36	; 0x24
   133ac:	ldr	r7, [pc, #896]	; 13734 <close_stdout@@Base+0x1f8c>
   133b0:	mov	ip, r3
   133b4:	mov	r5, r0
   133b8:	add	r7, pc, r7
   133bc:	ldr	r4, [sp, #56]	; 0x38
   133c0:	ldr	r6, [sp, #60]	; 0x3c
   133c4:	beq	13708 <close_stdout@@Base+0x1f60>
   133c8:	str	r2, [sp]
   133cc:	mov	r3, r1
   133d0:	ldr	r2, [pc, #864]	; 13738 <close_stdout@@Base+0x1f90>
   133d4:	mov	r1, #1
   133d8:	str	ip, [sp, #4]
   133dc:	add	r2, pc, r2
   133e0:	bl	11160 <__fprintf_chk@plt>
   133e4:	ldr	r1, [pc, #848]	; 1373c <close_stdout@@Base+0x1f94>
   133e8:	mov	r2, #5
   133ec:	mov	r0, #0
   133f0:	add	r1, pc, r1
   133f4:	bl	10fe0 <dcgettext@plt>
   133f8:	ldr	r2, [pc, #832]	; 13740 <close_stdout@@Base+0x1f98>
   133fc:	movw	ip, #2013	; 0x7dd
   13400:	mov	r1, #1
   13404:	ldr	r2, [r7, r2]
   13408:	str	ip, [sp]
   1340c:	mov	r3, r0
   13410:	mov	r0, r5
   13414:	bl	11160 <__fprintf_chk@plt>
   13418:	ldr	r1, [pc, #804]	; 13744 <close_stdout@@Base+0x1f9c>
   1341c:	mov	r0, #0
   13420:	mov	r2, #5
   13424:	add	r1, pc, r1
   13428:	bl	10fe0 <dcgettext@plt>
   1342c:	mov	r1, r5
   13430:	bl	10f68 <fputs_unlocked@plt>
   13434:	cmp	r6, #9
   13438:	addls	pc, pc, r6, lsl #2
   1343c:	b	13724 <close_stdout@@Base+0x1f7c>
   13440:	b	134d4 <close_stdout@@Base+0x1d2c>
   13444:	b	134d8 <close_stdout@@Base+0x1d30>
   13448:	b	13508 <close_stdout@@Base+0x1d60>
   1344c:	b	1353c <close_stdout@@Base+0x1d94>
   13450:	b	13578 <close_stdout@@Base+0x1dd0>
   13454:	b	135b8 <close_stdout@@Base+0x1e10>
   13458:	b	13600 <close_stdout@@Base+0x1e58>
   1345c:	b	13650 <close_stdout@@Base+0x1ea8>
   13460:	b	136a8 <close_stdout@@Base+0x1f00>
   13464:	b	13468 <close_stdout@@Base+0x1cc0>
   13468:	ldr	r1, [pc, #728]	; 13748 <close_stdout@@Base+0x1fa0>
   1346c:	mov	r0, #0
   13470:	add	r1, pc, r1
   13474:	mov	r2, #5
   13478:	bl	10fe0 <dcgettext@plt>
   1347c:	ldm	r4, {r3, ip}
   13480:	mov	r1, #1
   13484:	str	ip, [sp]
   13488:	ldr	ip, [r4, #8]
   1348c:	str	ip, [sp, #4]
   13490:	ldr	ip, [r4, #12]
   13494:	str	ip, [sp, #8]
   13498:	ldr	ip, [r4, #16]
   1349c:	str	ip, [sp, #12]
   134a0:	ldr	ip, [r4, #20]
   134a4:	str	ip, [sp, #16]
   134a8:	ldr	ip, [r4, #24]
   134ac:	str	ip, [sp, #20]
   134b0:	ldr	ip, [r4, #28]
   134b4:	str	ip, [sp, #24]
   134b8:	ldr	ip, [r4, #32]
   134bc:	str	ip, [sp, #28]
   134c0:	mov	r2, r0
   134c4:	mov	r0, r5
   134c8:	bl	11160 <__fprintf_chk@plt>
   134cc:	add	sp, sp, #36	; 0x24
   134d0:	pop	{r4, r5, r6, r7, pc}
   134d4:	bl	111d8 <abort@plt>
   134d8:	ldr	r1, [pc, #620]	; 1374c <close_stdout@@Base+0x1fa4>
   134dc:	mov	r2, #5
   134e0:	mov	r0, #0
   134e4:	add	r1, pc, r1
   134e8:	bl	10fe0 <dcgettext@plt>
   134ec:	ldr	r3, [r4]
   134f0:	mov	r1, #1
   134f4:	mov	r2, r0
   134f8:	mov	r0, r5
   134fc:	add	sp, sp, #36	; 0x24
   13500:	pop	{r4, r5, r6, r7, lr}
   13504:	b	11160 <__fprintf_chk@plt>
   13508:	ldr	r1, [pc, #576]	; 13750 <close_stdout@@Base+0x1fa8>
   1350c:	mov	r2, #5
   13510:	mov	r0, #0
   13514:	add	r1, pc, r1
   13518:	bl	10fe0 <dcgettext@plt>
   1351c:	ldm	r4, {r3, ip}
   13520:	mov	r1, #1
   13524:	str	ip, [sp, #56]	; 0x38
   13528:	mov	r2, r0
   1352c:	mov	r0, r5
   13530:	add	sp, sp, #36	; 0x24
   13534:	pop	{r4, r5, r6, r7, lr}
   13538:	b	11160 <__fprintf_chk@plt>
   1353c:	ldr	r1, [pc, #528]	; 13754 <close_stdout@@Base+0x1fac>
   13540:	mov	r2, #5
   13544:	mov	r0, #0
   13548:	add	r1, pc, r1
   1354c:	bl	10fe0 <dcgettext@plt>
   13550:	ldm	r4, {r3, ip}
   13554:	mov	r1, #1
   13558:	str	ip, [sp, #56]	; 0x38
   1355c:	ldr	ip, [r4, #8]
   13560:	str	ip, [sp, #60]	; 0x3c
   13564:	mov	r2, r0
   13568:	mov	r0, r5
   1356c:	add	sp, sp, #36	; 0x24
   13570:	pop	{r4, r5, r6, r7, lr}
   13574:	b	11160 <__fprintf_chk@plt>
   13578:	ldr	r1, [pc, #472]	; 13758 <close_stdout@@Base+0x1fb0>
   1357c:	mov	r2, #5
   13580:	mov	r0, #0
   13584:	add	r1, pc, r1
   13588:	bl	10fe0 <dcgettext@plt>
   1358c:	ldm	r4, {r3, ip}
   13590:	mov	r1, #1
   13594:	str	ip, [sp]
   13598:	ldr	ip, [r4, #8]
   1359c:	str	ip, [sp, #4]
   135a0:	ldr	ip, [r4, #12]
   135a4:	str	ip, [sp, #8]
   135a8:	mov	r2, r0
   135ac:	mov	r0, r5
   135b0:	bl	11160 <__fprintf_chk@plt>
   135b4:	b	134cc <close_stdout@@Base+0x1d24>
   135b8:	ldr	r1, [pc, #412]	; 1375c <close_stdout@@Base+0x1fb4>
   135bc:	mov	r2, #5
   135c0:	mov	r0, #0
   135c4:	add	r1, pc, r1
   135c8:	bl	10fe0 <dcgettext@plt>
   135cc:	ldm	r4, {r3, ip}
   135d0:	mov	r1, #1
   135d4:	str	ip, [sp]
   135d8:	ldr	ip, [r4, #8]
   135dc:	str	ip, [sp, #4]
   135e0:	ldr	ip, [r4, #12]
   135e4:	str	ip, [sp, #8]
   135e8:	ldr	ip, [r4, #16]
   135ec:	str	ip, [sp, #12]
   135f0:	mov	r2, r0
   135f4:	mov	r0, r5
   135f8:	bl	11160 <__fprintf_chk@plt>
   135fc:	b	134cc <close_stdout@@Base+0x1d24>
   13600:	ldr	r1, [pc, #344]	; 13760 <close_stdout@@Base+0x1fb8>
   13604:	mov	r2, #5
   13608:	mov	r0, #0
   1360c:	add	r1, pc, r1
   13610:	bl	10fe0 <dcgettext@plt>
   13614:	ldm	r4, {r3, ip}
   13618:	mov	r1, #1
   1361c:	str	ip, [sp]
   13620:	ldr	ip, [r4, #8]
   13624:	str	ip, [sp, #4]
   13628:	ldr	ip, [r4, #12]
   1362c:	str	ip, [sp, #8]
   13630:	ldr	ip, [r4, #16]
   13634:	str	ip, [sp, #12]
   13638:	ldr	ip, [r4, #20]
   1363c:	str	ip, [sp, #16]
   13640:	mov	r2, r0
   13644:	mov	r0, r5
   13648:	bl	11160 <__fprintf_chk@plt>
   1364c:	b	134cc <close_stdout@@Base+0x1d24>
   13650:	ldr	r1, [pc, #268]	; 13764 <close_stdout@@Base+0x1fbc>
   13654:	mov	r2, #5
   13658:	mov	r0, #0
   1365c:	add	r1, pc, r1
   13660:	bl	10fe0 <dcgettext@plt>
   13664:	ldm	r4, {r3, ip}
   13668:	mov	r1, #1
   1366c:	str	ip, [sp]
   13670:	ldr	ip, [r4, #8]
   13674:	str	ip, [sp, #4]
   13678:	ldr	ip, [r4, #12]
   1367c:	str	ip, [sp, #8]
   13680:	ldr	ip, [r4, #16]
   13684:	str	ip, [sp, #12]
   13688:	ldr	ip, [r4, #20]
   1368c:	str	ip, [sp, #16]
   13690:	ldr	ip, [r4, #24]
   13694:	str	ip, [sp, #20]
   13698:	mov	r2, r0
   1369c:	mov	r0, r5
   136a0:	bl	11160 <__fprintf_chk@plt>
   136a4:	b	134cc <close_stdout@@Base+0x1d24>
   136a8:	ldr	r1, [pc, #184]	; 13768 <close_stdout@@Base+0x1fc0>
   136ac:	mov	r2, #5
   136b0:	mov	r0, #0
   136b4:	add	r1, pc, r1
   136b8:	bl	10fe0 <dcgettext@plt>
   136bc:	ldm	r4, {r3, ip}
   136c0:	mov	r1, #1
   136c4:	str	ip, [sp]
   136c8:	ldr	ip, [r4, #8]
   136cc:	str	ip, [sp, #4]
   136d0:	ldr	ip, [r4, #12]
   136d4:	str	ip, [sp, #8]
   136d8:	ldr	ip, [r4, #16]
   136dc:	str	ip, [sp, #12]
   136e0:	ldr	ip, [r4, #20]
   136e4:	str	ip, [sp, #16]
   136e8:	ldr	ip, [r4, #24]
   136ec:	str	ip, [sp, #20]
   136f0:	ldr	ip, [r4, #28]
   136f4:	str	ip, [sp, #24]
   136f8:	mov	r2, r0
   136fc:	mov	r0, r5
   13700:	bl	11160 <__fprintf_chk@plt>
   13704:	b	134cc <close_stdout@@Base+0x1d24>
   13708:	str	r3, [sp]
   1370c:	mov	r3, r2
   13710:	ldr	r2, [pc, #84]	; 1376c <close_stdout@@Base+0x1fc4>
   13714:	mov	r1, #1
   13718:	add	r2, pc, r2
   1371c:	bl	11160 <__fprintf_chk@plt>
   13720:	b	133e4 <close_stdout@@Base+0x1c3c>
   13724:	ldr	r1, [pc, #68]	; 13770 <close_stdout@@Base+0x1fc8>
   13728:	mov	r0, #0
   1372c:	add	r1, pc, r1
   13730:	b	13474 <close_stdout@@Base+0x1ccc>
   13734:	andeq	r2, r1, r0, asr #24
   13738:	strdeq	r1, [r0], -r8
   1373c:	strdeq	r1, [r0], -r8
   13740:	andeq	r0, r0, r0, lsr #2
   13744:	andeq	r1, r0, r8, asr #19
   13748:	andeq	r1, r0, r4, asr fp
   1374c:	ldrdeq	r1, [r0], -r4
   13750:			; <UNDEFINED> instruction: 0x000019b4
   13754:	muleq	r0, r8, r9
   13758:	andeq	r1, r0, r8, ror r9
   1375c:	andeq	r1, r0, r8, asr r9
   13760:	andeq	r1, r0, r4, lsr r9
   13764:	andeq	r1, r0, ip, lsl #18
   13768:	andeq	r1, r0, r0, ror #17
   1376c:	andeq	r1, r0, r8, asr #13
   13770:	andeq	r1, r0, ip, asr #17
   13774:	push	{r4, r5, lr}
   13778:	sub	sp, sp, #12
   1377c:	ldr	r5, [sp, #24]
   13780:	ldr	ip, [r5]
   13784:	cmp	ip, #0
   13788:	beq	137a4 <close_stdout@@Base+0x1ffc>
   1378c:	mov	lr, r5
   13790:	mov	ip, #0
   13794:	ldr	r4, [lr, #4]!
   13798:	add	ip, ip, #1
   1379c:	cmp	r4, #0
   137a0:	bne	13794 <close_stdout@@Base+0x1fec>
   137a4:	stm	sp, {r5, ip}
   137a8:	bl	133a0 <close_stdout@@Base+0x1bf8>
   137ac:	add	sp, sp, #12
   137b0:	pop	{r4, r5, pc}
   137b4:	push	{r4, r5, r6, r7, lr}
   137b8:	sub	sp, sp, #60	; 0x3c
   137bc:	ldr	r4, [pc, #100]	; 13828 <close_stdout@@Base+0x2080>
   137c0:	mov	ip, #0
   137c4:	ldr	r5, [pc, #96]	; 1382c <close_stdout@@Base+0x2084>
   137c8:	mov	lr, ip
   137cc:	add	r4, pc, r4
   137d0:	ldr	r6, [sp, #80]	; 0x50
   137d4:	ldr	r7, [r4, r5]
   137d8:	add	r5, sp, #12
   137dc:	ldr	r4, [r7]
   137e0:	str	r4, [sp, #52]	; 0x34
   137e4:	ldr	r4, [r6, ip]
   137e8:	cmp	r4, #0
   137ec:	str	r4, [r5, ip]
   137f0:	beq	13804 <close_stdout@@Base+0x205c>
   137f4:	add	lr, lr, #1
   137f8:	add	ip, ip, #4
   137fc:	cmp	lr, #10
   13800:	bne	137e4 <close_stdout@@Base+0x203c>
   13804:	stm	sp, {r5, lr}
   13808:	bl	133a0 <close_stdout@@Base+0x1bf8>
   1380c:	ldr	r2, [sp, #52]	; 0x34
   13810:	ldr	r3, [r7]
   13814:	cmp	r2, r3
   13818:	bne	13824 <close_stdout@@Base+0x207c>
   1381c:	add	sp, sp, #60	; 0x3c
   13820:	pop	{r4, r5, r6, r7, pc}
   13824:	bl	10fec <__stack_chk_fail@plt>
   13828:	andeq	r2, r1, ip, lsr #16
   1382c:	strdeq	r0, [r0], -r4
   13830:	push	{r3}		; (str r3, [sp, #-4]!)
   13834:	push	{r4, lr}
   13838:	sub	sp, sp, #20
   1383c:	ldr	lr, [pc, #72]	; 1388c <close_stdout@@Base+0x20e4>
   13840:	add	ip, sp, #32
   13844:	ldr	r4, [pc, #68]	; 13890 <close_stdout@@Base+0x20e8>
   13848:	add	lr, pc, lr
   1384c:	ldr	r3, [sp, #28]
   13850:	ldr	r4, [lr, r4]
   13854:	str	ip, [sp]
   13858:	str	ip, [sp, #8]
   1385c:	ldr	ip, [r4]
   13860:	str	ip, [sp, #12]
   13864:	bl	137b4 <close_stdout@@Base+0x200c>
   13868:	ldr	r2, [sp, #12]
   1386c:	ldr	r3, [r4]
   13870:	cmp	r2, r3
   13874:	bne	13888 <close_stdout@@Base+0x20e0>
   13878:	add	sp, sp, #20
   1387c:	pop	{r4, lr}
   13880:	add	sp, sp, #4
   13884:	bx	lr
   13888:	bl	10fec <__stack_chk_fail@plt>
   1388c:			; <UNDEFINED> instruction: 0x000127b0
   13890:	strdeq	r0, [r0], -r4
   13894:	ldr	r1, [pc, #132]	; 13920 <close_stdout@@Base+0x2178>
   13898:	mov	r2, #5
   1389c:	push	{r4, lr}
   138a0:	add	r1, pc, r1
   138a4:	mov	r0, #0
   138a8:	ldr	r4, [pc, #116]	; 13924 <close_stdout@@Base+0x217c>
   138ac:	bl	10fe0 <dcgettext@plt>
   138b0:	ldr	r2, [pc, #112]	; 13928 <close_stdout@@Base+0x2180>
   138b4:	add	r4, pc, r4
   138b8:	add	r2, pc, r2
   138bc:	mov	r1, r0
   138c0:	mov	r0, #1
   138c4:	bl	11148 <__printf_chk@plt>
   138c8:	ldr	r1, [pc, #92]	; 1392c <close_stdout@@Base+0x2184>
   138cc:	mov	r2, #5
   138d0:	mov	r0, #0
   138d4:	add	r1, pc, r1
   138d8:	bl	10fe0 <dcgettext@plt>
   138dc:	ldr	r2, [pc, #76]	; 13930 <close_stdout@@Base+0x2188>
   138e0:	ldr	r3, [pc, #76]	; 13934 <close_stdout@@Base+0x218c>
   138e4:	add	r2, pc, r2
   138e8:	add	r3, pc, r3
   138ec:	mov	r1, r0
   138f0:	mov	r0, #1
   138f4:	bl	11148 <__printf_chk@plt>
   138f8:	ldr	r1, [pc, #56]	; 13938 <close_stdout@@Base+0x2190>
   138fc:	mov	r0, #0
   13900:	mov	r2, #5
   13904:	add	r1, pc, r1
   13908:	bl	10fe0 <dcgettext@plt>
   1390c:	ldr	r3, [pc, #40]	; 1393c <close_stdout@@Base+0x2194>
   13910:	ldr	r3, [r4, r3]
   13914:	pop	{r4, lr}
   13918:	ldr	r1, [r3]
   1391c:	b	10f68 <fputs_unlocked@plt>
   13920:	muleq	r0, r4, r7
   13924:	andeq	r2, r1, r4, asr #14
   13928:	muleq	r0, r4, r7
   1392c:	muleq	r0, r0, r7
   13930:			; <UNDEFINED> instruction: 0x000012b4
   13934:	andeq	r1, r0, r0, asr #5
   13938:	andeq	r1, r0, r4, ror r7
   1393c:	andeq	r0, r0, r0, lsl r1
   13940:	push	{r4, lr}
   13944:	mov	r4, r0
   13948:	bl	11094 <malloc@plt>
   1394c:	rsbs	r3, r0, #1
   13950:	movcc	r3, #0
   13954:	cmp	r4, #0
   13958:	moveq	r3, #0
   1395c:	cmp	r3, #0
   13960:	popeq	{r4, pc}
   13964:	bl	13b54 <close_stdout@@Base+0x23ac>
   13968:	push	{r3, r4, r5, lr}
   1396c:	mov	r4, r0
   13970:	mvn	r0, #0
   13974:	mov	r5, r1
   13978:	bl	1472c <close_stdout@@Base+0x2f84>
   1397c:	cmp	r0, r4
   13980:	bcc	13990 <close_stdout@@Base+0x21e8>
   13984:	mul	r0, r4, r5
   13988:	pop	{r3, r4, r5, lr}
   1398c:	b	13940 <close_stdout@@Base+0x2198>
   13990:	bl	13b54 <close_stdout@@Base+0x23ac>
   13994:	b	13940 <close_stdout@@Base+0x2198>
   13998:	rsbs	r3, r1, #1
   1399c:	push	{r4, lr}
   139a0:	movcc	r3, #0
   139a4:	cmp	r0, #0
   139a8:	mov	r4, r1
   139ac:	moveq	r3, #0
   139b0:	cmp	r3, #0
   139b4:	bne	139d8 <close_stdout@@Base+0x2230>
   139b8:	bl	11004 <realloc@plt>
   139bc:	rsbs	r3, r0, #1
   139c0:	movcc	r3, #0
   139c4:	cmp	r4, #0
   139c8:	moveq	r3, #0
   139cc:	cmp	r3, #0
   139d0:	popeq	{r4, pc}
   139d4:	bl	13b54 <close_stdout@@Base+0x23ac>
   139d8:	bl	10f98 <free@plt>
   139dc:	mov	r0, #0
   139e0:	pop	{r4, pc}
   139e4:	push	{r4, r5, r6, lr}
   139e8:	mov	r5, r1
   139ec:	mov	r6, r0
   139f0:	mov	r1, r2
   139f4:	mvn	r0, #0
   139f8:	mov	r4, r2
   139fc:	bl	1472c <close_stdout@@Base+0x2f84>
   13a00:	cmp	r0, r5
   13a04:	bcc	13a18 <close_stdout@@Base+0x2270>
   13a08:	mov	r0, r6
   13a0c:	mul	r1, r5, r4
   13a10:	pop	{r4, r5, r6, lr}
   13a14:	b	13998 <close_stdout@@Base+0x21f0>
   13a18:	bl	13b54 <close_stdout@@Base+0x23ac>
   13a1c:	push	{r3, r4, r5, r6, r7, lr}
   13a20:	subs	r7, r0, #0
   13a24:	mov	r5, r1
   13a28:	mov	r6, r2
   13a2c:	ldr	r4, [r1]
   13a30:	beq	13a68 <close_stdout@@Base+0x22c0>
   13a34:	movw	r0, #43690	; 0xaaaa
   13a38:	mov	r1, r2
   13a3c:	bfi	r0, r0, #16, #16
   13a40:	bl	1472c <close_stdout@@Base+0x2f84>
   13a44:	cmp	r4, r0
   13a48:	addcc	r3, r4, #1
   13a4c:	addcc	r4, r4, r3, lsr #1
   13a50:	bcs	13a8c <close_stdout@@Base+0x22e4>
   13a54:	str	r4, [r5]
   13a58:	mov	r0, r7
   13a5c:	mul	r1, r6, r4
   13a60:	pop	{r3, r4, r5, r6, r7, lr}
   13a64:	b	13998 <close_stdout@@Base+0x21f0>
   13a68:	cmp	r4, #0
   13a6c:	bne	13a54 <close_stdout@@Base+0x22ac>
   13a70:	mov	r0, #64	; 0x40
   13a74:	mov	r1, r2
   13a78:	bl	1472c <close_stdout@@Base+0x2f84>
   13a7c:	cmp	r0, #0
   13a80:	movne	r4, r0
   13a84:	addeq	r4, r0, #1
   13a88:	b	13a54 <close_stdout@@Base+0x22ac>
   13a8c:	bl	13b54 <close_stdout@@Base+0x23ac>
   13a90:	cmp	r0, #0
   13a94:	push	{r3, lr}
   13a98:	ldr	r3, [r1]
   13a9c:	beq	13ac8 <close_stdout@@Base+0x2320>
   13aa0:	movw	r2, #43689	; 0xaaa9
   13aa4:	movt	r2, #43690	; 0xaaaa
   13aa8:	cmp	r3, r2
   13aac:	addls	r2, r3, #1
   13ab0:	addls	r3, r3, r2, lsr #1
   13ab4:	bhi	13ae0 <close_stdout@@Base+0x2338>
   13ab8:	str	r3, [r1]
   13abc:	mov	r1, r3
   13ac0:	pop	{r3, lr}
   13ac4:	b	13998 <close_stdout@@Base+0x21f0>
   13ac8:	cmp	r3, #0
   13acc:	moveq	r3, #64	; 0x40
   13ad0:	str	r3, [r1]
   13ad4:	mov	r1, r3
   13ad8:	pop	{r3, lr}
   13adc:	b	13998 <close_stdout@@Base+0x21f0>
   13ae0:	bl	13b54 <close_stdout@@Base+0x23ac>
   13ae4:	push	{r4, lr}
   13ae8:	mov	r4, r0
   13aec:	bl	13940 <close_stdout@@Base+0x2198>
   13af0:	mov	r2, r4
   13af4:	mov	r1, #0
   13af8:	pop	{r4, lr}
   13afc:	b	11130 <memset@plt>
   13b00:	push	{r3, lr}
   13b04:	bl	10f5c <calloc@plt>
   13b08:	cmp	r0, #0
   13b0c:	popne	{r3, pc}
   13b10:	bl	13b54 <close_stdout@@Base+0x23ac>
   13b14:	push	{r3, r4, r5, lr}
   13b18:	mov	r4, r1
   13b1c:	mov	r5, r0
   13b20:	mov	r0, r1
   13b24:	bl	13940 <close_stdout@@Base+0x2198>
   13b28:	mov	r1, r5
   13b2c:	mov	r2, r4
   13b30:	pop	{r3, r4, r5, lr}
   13b34:	b	10fb0 <memcpy@plt>
   13b38:	push	{r4, lr}
   13b3c:	mov	r4, r0
   13b40:	bl	110f4 <strlen@plt>
   13b44:	add	r1, r0, #1
   13b48:	mov	r0, r4
   13b4c:	pop	{r4, lr}
   13b50:	b	13b14 <close_stdout@@Base+0x236c>
   13b54:	ldr	r3, [pc, #64]	; 13b9c <close_stdout@@Base+0x23f4>
   13b58:	mov	r2, #5
   13b5c:	ldr	ip, [pc, #60]	; 13ba0 <close_stdout@@Base+0x23f8>
   13b60:	mov	r0, #0
   13b64:	add	r3, pc, r3
   13b68:	ldr	r1, [pc, #52]	; 13ba4 <close_stdout@@Base+0x23fc>
   13b6c:	push	{r4, lr}
   13b70:	add	r1, pc, r1
   13b74:	ldr	r3, [r3, ip]
   13b78:	ldr	r4, [r3]
   13b7c:	bl	10fe0 <dcgettext@plt>
   13b80:	ldr	r2, [pc, #32]	; 13ba8 <close_stdout@@Base+0x2400>
   13b84:	mov	r1, #0
   13b88:	add	r2, pc, r2
   13b8c:	mov	r3, r0
   13b90:	mov	r0, r4
   13b94:	bl	11070 <error@plt>
   13b98:	bl	111d8 <abort@plt>
   13b9c:	muleq	r1, r4, r4
   13ba0:	andeq	r0, r0, r4, lsl r1
   13ba4:	andeq	r1, r0, r8, ror r5
   13ba8:	andeq	r1, r0, r8, ror r1
   13bac:	ldr	ip, [pc, #1308]	; 140d0 <close_stdout@@Base+0x2928>
   13bb0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13bb4:	mov	sl, r2
   13bb8:	ldr	r2, [pc, #1300]	; 140d4 <close_stdout@@Base+0x292c>
   13bbc:	add	ip, pc, ip
   13bc0:	mov	r9, r3
   13bc4:	sub	sp, sp, #20
   13bc8:	mov	r3, ip
   13bcc:	cmp	sl, #36	; 0x24
   13bd0:	ldr	r6, [ip, r2]
   13bd4:	mov	r5, r0
   13bd8:	mov	r7, r1
   13bdc:	ldr	r8, [sp, #56]	; 0x38
   13be0:	ldr	r3, [r6]
   13be4:	str	r3, [sp, #12]
   13be8:	bhi	140b0 <close_stdout@@Base+0x2908>
   13bec:	cmp	r1, #0
   13bf0:	addeq	r7, sp, #8
   13bf4:	bl	110d0 <__ctype_b_loc@plt>
   13bf8:	ldrb	ip, [r5]
   13bfc:	mov	r2, r5
   13c00:	ldr	r1, [r0]
   13c04:	b	13c0c <close_stdout@@Base+0x2464>
   13c08:	ldrb	ip, [r2, #1]!
   13c0c:	lsl	r3, ip, #1
   13c10:	ldrh	r4, [r1, r3]
   13c14:	and	r4, r4, #8192	; 0x2000
   13c18:	uxth	r4, r4
   13c1c:	cmp	r4, #0
   13c20:	bne	13c08 <close_stdout@@Base+0x2460>
   13c24:	cmp	ip, #45	; 0x2d
   13c28:	bne	13c48 <close_stdout@@Base+0x24a0>
   13c2c:	mov	r0, #4
   13c30:	ldr	r2, [sp, #12]
   13c34:	ldr	r3, [r6]
   13c38:	cmp	r2, r3
   13c3c:	bne	140ac <close_stdout@@Base+0x2904>
   13c40:	add	sp, sp, #20
   13c44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c48:	bl	11118 <__errno_location@plt>
   13c4c:	mov	r2, sl
   13c50:	mov	r1, r7
   13c54:	str	r4, [r0]
   13c58:	mov	fp, r0
   13c5c:	mov	r0, r5
   13c60:	bl	110e8 <strtoul@plt>
   13c64:	ldr	r3, [r7]
   13c68:	cmp	r3, r5
   13c6c:	mov	sl, r0
   13c70:	beq	13e00 <close_stdout@@Base+0x2658>
   13c74:	ldr	r0, [fp]
   13c78:	cmp	r0, #0
   13c7c:	bne	13cac <close_stdout@@Base+0x2504>
   13c80:	mov	r4, r0
   13c84:	cmp	r8, #0
   13c88:	streq	sl, [r9]
   13c8c:	moveq	r0, r4
   13c90:	beq	13c30 <close_stdout@@Base+0x2488>
   13c94:	ldrb	r5, [r3]
   13c98:	cmp	r5, #0
   13c9c:	bne	13cbc <close_stdout@@Base+0x2514>
   13ca0:	mov	r0, r4
   13ca4:	str	sl, [r9]
   13ca8:	b	13c30 <close_stdout@@Base+0x2488>
   13cac:	cmp	r0, #34	; 0x22
   13cb0:	moveq	r4, #1
   13cb4:	bne	13c2c <close_stdout@@Base+0x2484>
   13cb8:	b	13c84 <close_stdout@@Base+0x24dc>
   13cbc:	mov	r0, r8
   13cc0:	mov	r1, r5
   13cc4:	str	r3, [sp, #4]
   13cc8:	bl	11100 <strchr@plt>
   13ccc:	ldr	r3, [sp, #4]
   13cd0:	cmp	r0, #0
   13cd4:	beq	13e38 <close_stdout@@Base+0x2690>
   13cd8:	mov	r0, r8
   13cdc:	mov	r1, #48	; 0x30
   13ce0:	str	r3, [sp, #4]
   13ce4:	bl	11100 <strchr@plt>
   13ce8:	ldr	r3, [sp, #4]
   13cec:	cmp	r0, #0
   13cf0:	beq	13d10 <close_stdout@@Base+0x2568>
   13cf4:	ldrb	r2, [r3, #1]
   13cf8:	cmp	r2, #68	; 0x44
   13cfc:	beq	14094 <close_stdout@@Base+0x28ec>
   13d00:	cmp	r2, #105	; 0x69
   13d04:	beq	1407c <close_stdout@@Base+0x28d4>
   13d08:	cmp	r2, #66	; 0x42
   13d0c:	beq	14094 <close_stdout@@Base+0x28ec>
   13d10:	mov	r8, #1
   13d14:	mov	fp, #1024	; 0x400
   13d18:	sub	r5, r5, #66	; 0x42
   13d1c:	cmp	r5, #53	; 0x35
   13d20:	addls	pc, pc, r5, lsl #2
   13d24:	b	13e38 <close_stdout@@Base+0x2690>
   13d28:	b	14028 <close_stdout@@Base+0x2880>
   13d2c:	b	13e38 <close_stdout@@Base+0x2690>
   13d30:	b	13e38 <close_stdout@@Base+0x2690>
   13d34:	b	13fe8 <close_stdout@@Base+0x2840>
   13d38:	b	13e38 <close_stdout@@Base+0x2690>
   13d3c:	b	1403c <close_stdout@@Base+0x2894>
   13d40:	b	13e38 <close_stdout@@Base+0x2690>
   13d44:	b	13e38 <close_stdout@@Base+0x2690>
   13d48:	b	13e38 <close_stdout@@Base+0x2690>
   13d4c:	b	13fc8 <close_stdout@@Base+0x2820>
   13d50:	b	13e38 <close_stdout@@Base+0x2690>
   13d54:	b	13f94 <close_stdout@@Base+0x27ec>
   13d58:	b	13e38 <close_stdout@@Base+0x2690>
   13d5c:	b	13e38 <close_stdout@@Base+0x2690>
   13d60:	b	13f54 <close_stdout@@Base+0x27ac>
   13d64:	b	13e38 <close_stdout@@Base+0x2690>
   13d68:	b	13e38 <close_stdout@@Base+0x2690>
   13d6c:	b	13e38 <close_stdout@@Base+0x2690>
   13d70:	b	13f14 <close_stdout@@Base+0x276c>
   13d74:	b	13e38 <close_stdout@@Base+0x2690>
   13d78:	b	13e38 <close_stdout@@Base+0x2690>
   13d7c:	b	13e38 <close_stdout@@Base+0x2690>
   13d80:	b	13e38 <close_stdout@@Base+0x2690>
   13d84:	b	13ed4 <close_stdout@@Base+0x272c>
   13d88:	b	13e94 <close_stdout@@Base+0x26ec>
   13d8c:	b	13e38 <close_stdout@@Base+0x2690>
   13d90:	b	13e38 <close_stdout@@Base+0x2690>
   13d94:	b	13e38 <close_stdout@@Base+0x2690>
   13d98:	b	13e38 <close_stdout@@Base+0x2690>
   13d9c:	b	13e38 <close_stdout@@Base+0x2690>
   13da0:	b	13e38 <close_stdout@@Base+0x2690>
   13da4:	b	13e38 <close_stdout@@Base+0x2690>
   13da8:	b	13e80 <close_stdout@@Base+0x26d8>
   13dac:	b	13e44 <close_stdout@@Base+0x269c>
   13db0:	b	13e38 <close_stdout@@Base+0x2690>
   13db4:	b	13e38 <close_stdout@@Base+0x2690>
   13db8:	b	13e38 <close_stdout@@Base+0x2690>
   13dbc:	b	1403c <close_stdout@@Base+0x2894>
   13dc0:	b	13e38 <close_stdout@@Base+0x2690>
   13dc4:	b	13e38 <close_stdout@@Base+0x2690>
   13dc8:	b	13e38 <close_stdout@@Base+0x2690>
   13dcc:	b	13fc8 <close_stdout@@Base+0x2820>
   13dd0:	b	13e38 <close_stdout@@Base+0x2690>
   13dd4:	b	13f94 <close_stdout@@Base+0x27ec>
   13dd8:	b	13e38 <close_stdout@@Base+0x2690>
   13ddc:	b	13e38 <close_stdout@@Base+0x2690>
   13de0:	b	13e38 <close_stdout@@Base+0x2690>
   13de4:	b	13e38 <close_stdout@@Base+0x2690>
   13de8:	b	13e38 <close_stdout@@Base+0x2690>
   13dec:	b	13e38 <close_stdout@@Base+0x2690>
   13df0:	b	13f14 <close_stdout@@Base+0x276c>
   13df4:	b	13e38 <close_stdout@@Base+0x2690>
   13df8:	b	13e38 <close_stdout@@Base+0x2690>
   13dfc:	b	13e64 <close_stdout@@Base+0x26bc>
   13e00:	cmp	r8, #0
   13e04:	beq	13c2c <close_stdout@@Base+0x2484>
   13e08:	ldrb	r5, [r5]
   13e0c:	cmp	r5, #0
   13e10:	beq	13c2c <close_stdout@@Base+0x2484>
   13e14:	mov	r0, r8
   13e18:	mov	r1, r5
   13e1c:	str	r3, [sp, #4]
   13e20:	bl	11100 <strchr@plt>
   13e24:	ldr	r3, [sp, #4]
   13e28:	cmp	r0, #0
   13e2c:	movne	sl, #1
   13e30:	bne	13cd8 <close_stdout@@Base+0x2530>
   13e34:	b	13c2c <close_stdout@@Base+0x2484>
   13e38:	str	sl, [r9]
   13e3c:	orr	r0, r4, #2
   13e40:	b	13c30 <close_stdout@@Base+0x2488>
   13e44:	mov	r2, #0
   13e48:	add	r1, r3, r8
   13e4c:	str	r1, [r7]
   13e50:	ldrb	r3, [r3, r8]
   13e54:	orr	r4, r4, r2
   13e58:	cmp	r3, #0
   13e5c:	orrne	r4, r4, #2
   13e60:	b	13ca0 <close_stdout@@Base+0x24f8>
   13e64:	cmn	sl, #-2147483647	; 0x80000001
   13e68:	lslls	sl, sl, #1
   13e6c:	movls	r2, #0
   13e70:	bls	13e48 <close_stdout@@Base+0x26a0>
   13e74:	mvn	sl, #0
   13e78:	mov	r2, #1
   13e7c:	b	13e48 <close_stdout@@Base+0x26a0>
   13e80:	cmp	sl, #8388608	; 0x800000
   13e84:	lslcc	sl, sl, #9
   13e88:	movcc	r2, #0
   13e8c:	bcc	13e48 <close_stdout@@Base+0x26a0>
   13e90:	b	13e74 <close_stdout@@Base+0x26cc>
   13e94:	mov	r1, fp
   13e98:	mvn	r0, #0
   13e9c:	str	r3, [sp, #4]
   13ea0:	bl	1472c <close_stdout@@Base+0x2f84>
   13ea4:	ldr	r3, [sp, #4]
   13ea8:	mov	r1, #7
   13eac:	mov	r2, #0
   13eb0:	cmp	r0, sl
   13eb4:	movcs	ip, #0
   13eb8:	movcc	ip, #1
   13ebc:	mulcs	sl, fp, sl
   13ec0:	mvncc	sl, #0
   13ec4:	subs	r1, r1, #1
   13ec8:	orr	r2, r2, ip
   13ecc:	bne	13eb0 <close_stdout@@Base+0x2708>
   13ed0:	b	13e48 <close_stdout@@Base+0x26a0>
   13ed4:	mov	r1, fp
   13ed8:	mvn	r0, #0
   13edc:	str	r3, [sp, #4]
   13ee0:	bl	1472c <close_stdout@@Base+0x2f84>
   13ee4:	ldr	r3, [sp, #4]
   13ee8:	mov	r1, #8
   13eec:	mov	r2, #0
   13ef0:	cmp	r0, sl
   13ef4:	movcs	ip, #0
   13ef8:	movcc	ip, #1
   13efc:	mulcs	sl, fp, sl
   13f00:	mvncc	sl, #0
   13f04:	subs	r1, r1, #1
   13f08:	orr	r2, r2, ip
   13f0c:	bne	13ef0 <close_stdout@@Base+0x2748>
   13f10:	b	13e48 <close_stdout@@Base+0x26a0>
   13f14:	mov	r1, fp
   13f18:	mvn	r0, #0
   13f1c:	str	r3, [sp, #4]
   13f20:	bl	1472c <close_stdout@@Base+0x2f84>
   13f24:	ldr	r3, [sp, #4]
   13f28:	mov	r1, #4
   13f2c:	mov	r2, #0
   13f30:	cmp	r0, sl
   13f34:	movcs	ip, #0
   13f38:	movcc	ip, #1
   13f3c:	mulcs	sl, fp, sl
   13f40:	mvncc	sl, #0
   13f44:	subs	r1, r1, #1
   13f48:	orr	r2, r2, ip
   13f4c:	bne	13f30 <close_stdout@@Base+0x2788>
   13f50:	b	13e48 <close_stdout@@Base+0x26a0>
   13f54:	mov	r1, fp
   13f58:	mvn	r0, #0
   13f5c:	str	r3, [sp, #4]
   13f60:	bl	1472c <close_stdout@@Base+0x2f84>
   13f64:	ldr	r3, [sp, #4]
   13f68:	mov	r1, #5
   13f6c:	mov	r2, #0
   13f70:	cmp	r0, sl
   13f74:	movcs	ip, #0
   13f78:	movcc	ip, #1
   13f7c:	mulcs	sl, fp, sl
   13f80:	mvncc	sl, #0
   13f84:	subs	r1, r1, #1
   13f88:	orr	r2, r2, ip
   13f8c:	bne	13f70 <close_stdout@@Base+0x27c8>
   13f90:	b	13e48 <close_stdout@@Base+0x26a0>
   13f94:	mvn	r0, #0
   13f98:	mov	r1, fp
   13f9c:	str	r3, [sp, #4]
   13fa0:	bl	1472c <close_stdout@@Base+0x2f84>
   13fa4:	ldr	r3, [sp, #4]
   13fa8:	cmp	sl, r0
   13fac:	bhi	140a0 <close_stdout@@Base+0x28f8>
   13fb0:	mul	sl, sl, fp
   13fb4:	cmp	r0, sl
   13fb8:	bcc	140a0 <close_stdout@@Base+0x28f8>
   13fbc:	mul	sl, fp, sl
   13fc0:	mov	r2, #0
   13fc4:	b	13e48 <close_stdout@@Base+0x26a0>
   13fc8:	mvn	r0, #0
   13fcc:	mov	r1, fp
   13fd0:	str	r3, [sp, #4]
   13fd4:	bl	1472c <close_stdout@@Base+0x2f84>
   13fd8:	ldr	r3, [sp, #4]
   13fdc:	cmp	sl, r0
   13fe0:	bhi	13e74 <close_stdout@@Base+0x26cc>
   13fe4:	b	13fbc <close_stdout@@Base+0x2814>
   13fe8:	mov	r1, fp
   13fec:	mvn	r0, #0
   13ff0:	str	r3, [sp, #4]
   13ff4:	bl	1472c <close_stdout@@Base+0x2f84>
   13ff8:	ldr	r3, [sp, #4]
   13ffc:	mov	r1, #6
   14000:	mov	r2, #0
   14004:	cmp	r0, sl
   14008:	movcs	ip, #0
   1400c:	movcc	ip, #1
   14010:	mulcs	sl, fp, sl
   14014:	mvncc	sl, #0
   14018:	subs	r1, r1, #1
   1401c:	orr	r2, r2, ip
   14020:	bne	14004 <close_stdout@@Base+0x285c>
   14024:	b	13e48 <close_stdout@@Base+0x26a0>
   14028:	cmp	sl, #4194304	; 0x400000
   1402c:	lslcc	sl, sl, #10
   14030:	movcc	r2, #0
   14034:	bcc	13e48 <close_stdout@@Base+0x26a0>
   14038:	b	13e74 <close_stdout@@Base+0x26cc>
   1403c:	mov	r1, fp
   14040:	mvn	r0, #0
   14044:	str	r3, [sp, #4]
   14048:	bl	1472c <close_stdout@@Base+0x2f84>
   1404c:	ldr	r3, [sp, #4]
   14050:	mov	r1, #3
   14054:	mov	r2, #0
   14058:	cmp	r0, sl
   1405c:	movcs	ip, #0
   14060:	movcc	ip, #1
   14064:	mulcs	sl, fp, sl
   14068:	mvncc	sl, #0
   1406c:	subs	r1, r1, #1
   14070:	orr	r2, r2, ip
   14074:	bne	14058 <close_stdout@@Base+0x28b0>
   14078:	b	13e48 <close_stdout@@Base+0x26a0>
   1407c:	ldrb	r8, [r3, #2]
   14080:	mov	fp, #1024	; 0x400
   14084:	cmp	r8, #66	; 0x42
   14088:	moveq	r8, #3
   1408c:	movne	r8, #1
   14090:	b	13d18 <close_stdout@@Base+0x2570>
   14094:	mov	r8, #2
   14098:	mov	fp, #1000	; 0x3e8
   1409c:	b	13d18 <close_stdout@@Base+0x2570>
   140a0:	mov	r2, #1
   140a4:	mvn	sl, #0
   140a8:	b	13e48 <close_stdout@@Base+0x26a0>
   140ac:	bl	10fec <__stack_chk_fail@plt>
   140b0:	ldr	r0, [pc, #32]	; 140d8 <close_stdout@@Base+0x2930>
   140b4:	mov	r2, #96	; 0x60
   140b8:	ldr	r1, [pc, #28]	; 140dc <close_stdout@@Base+0x2934>
   140bc:	ldr	r3, [pc, #28]	; 140e0 <close_stdout@@Base+0x2938>
   140c0:	add	r0, pc, r0
   140c4:	add	r1, pc, r1
   140c8:	add	r3, pc, r3
   140cc:	bl	111f0 <__assert_fail@plt>
   140d0:	andeq	r2, r1, ip, lsr r4
   140d4:	strdeq	r0, [r0], -r4
   140d8:	andeq	r1, r0, r8, asr #32
   140dc:	andeq	r1, r0, ip, rrx
   140e0:	andeq	r1, r0, r4, lsr r0
   140e4:	push	{r4, r5, r6, lr}
   140e8:	mov	r4, r0
   140ec:	bl	11058 <__fpending@plt>
   140f0:	mov	r6, r0
   140f4:	mov	r0, r4
   140f8:	ldr	r4, [r4]
   140fc:	bl	14584 <close_stdout@@Base+0x2ddc>
   14100:	and	r4, r4, #32
   14104:	adds	r5, r0, #0
   14108:	movne	r5, #1
   1410c:	cmp	r4, #0
   14110:	bne	14130 <close_stdout@@Base+0x2988>
   14114:	cmp	r5, #0
   14118:	beq	14128 <close_stdout@@Base+0x2980>
   1411c:	cmp	r6, #0
   14120:	beq	1414c <close_stdout@@Base+0x29a4>
   14124:	mvn	r4, #0
   14128:	mov	r0, r4
   1412c:	pop	{r4, r5, r6, pc}
   14130:	cmp	r5, #0
   14134:	bne	14124 <close_stdout@@Base+0x297c>
   14138:	bl	11118 <__errno_location@plt>
   1413c:	mvn	r4, #0
   14140:	str	r5, [r0]
   14144:	mov	r0, r4
   14148:	pop	{r4, r5, r6, pc}
   1414c:	bl	11118 <__errno_location@plt>
   14150:	ldr	r4, [r0]
   14154:	subs	r4, r4, #9
   14158:	mvnne	r4, #0
   1415c:	mov	r0, r4
   14160:	pop	{r4, r5, r6, pc}
   14164:	ldr	r3, [pc, #984]	; 14544 <close_stdout@@Base+0x2d9c>
   14168:	mov	r0, #14
   1416c:	ldr	r2, [pc, #980]	; 14548 <close_stdout@@Base+0x2da0>
   14170:	add	r3, pc, r3
   14174:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14178:	sub	sp, sp, #132	; 0x84
   1417c:	ldr	r6, [r3, r2]
   14180:	ldr	r3, [r6]
   14184:	str	r3, [sp, #124]	; 0x7c
   14188:	bl	111a8 <nl_langinfo@plt>
   1418c:	subs	r5, r0, #0
   14190:	beq	14244 <close_stdout@@Base+0x2a9c>
   14194:	ldr	r3, [pc, #944]	; 1454c <close_stdout@@Base+0x2da4>
   14198:	ldr	r4, [pc, r3]
   1419c:	cmp	r4, #0
   141a0:	beq	14250 <close_stdout@@Base+0x2aa8>
   141a4:	ldrb	r7, [r4]
   141a8:	cmp	r7, #0
   141ac:	bne	141e0 <close_stdout@@Base+0x2a38>
   141b0:	b	14218 <close_stdout@@Base+0x2a70>
   141b4:	mov	r0, r4
   141b8:	bl	110f4 <strlen@plt>
   141bc:	add	r0, r0, #1
   141c0:	add	r7, r4, r0
   141c4:	mov	r0, r7
   141c8:	bl	110f4 <strlen@plt>
   141cc:	add	r0, r0, #1
   141d0:	add	r4, r7, r0
   141d4:	ldrb	r7, [r7, r0]
   141d8:	cmp	r7, #0
   141dc:	beq	14218 <close_stdout@@Base+0x2a70>
   141e0:	mov	r0, r5
   141e4:	mov	r1, r4
   141e8:	bl	10f80 <strcmp@plt>
   141ec:	cmp	r0, #0
   141f0:	beq	14208 <close_stdout@@Base+0x2a60>
   141f4:	cmp	r7, #42	; 0x2a
   141f8:	bne	141b4 <close_stdout@@Base+0x2a0c>
   141fc:	ldrb	r3, [r4, #1]
   14200:	cmp	r3, #0
   14204:	bne	141b4 <close_stdout@@Base+0x2a0c>
   14208:	mov	r0, r4
   1420c:	bl	110f4 <strlen@plt>
   14210:	add	r0, r0, #1
   14214:	add	r5, r4, r0
   14218:	ldrb	r3, [r5]
   1421c:	cmp	r3, #0
   14220:	ldreq	r5, [pc, #808]	; 14550 <close_stdout@@Base+0x2da8>
   14224:	addeq	r5, pc, r5
   14228:	ldr	r2, [sp, #124]	; 0x7c
   1422c:	mov	r0, r5
   14230:	ldr	r3, [r6]
   14234:	cmp	r2, r3
   14238:	bne	14518 <close_stdout@@Base+0x2d70>
   1423c:	add	sp, sp, #132	; 0x84
   14240:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14244:	ldr	r5, [pc, #776]	; 14554 <close_stdout@@Base+0x2dac>
   14248:	add	r5, pc, r5
   1424c:	b	14194 <close_stdout@@Base+0x29ec>
   14250:	ldr	r0, [pc, #768]	; 14558 <close_stdout@@Base+0x2db0>
   14254:	add	r0, pc, r0
   14258:	bl	11088 <getenv@plt>
   1425c:	subs	r8, r0, #0
   14260:	beq	144f0 <close_stdout@@Base+0x2d48>
   14264:	ldrb	r3, [r8]
   14268:	cmp	r3, #0
   1426c:	beq	14484 <close_stdout@@Base+0x2cdc>
   14270:	bl	110f4 <strlen@plt>
   14274:	subs	sl, r0, #0
   14278:	subne	r3, sl, #1
   1427c:	bne	14494 <close_stdout@@Base+0x2cec>
   14280:	mov	r9, #0
   14284:	mov	fp, r9
   14288:	add	r9, sl, r9
   1428c:	add	r0, r9, #14
   14290:	bl	11094 <malloc@plt>
   14294:	subs	r7, r0, #0
   14298:	beq	144e4 <close_stdout@@Base+0x2d3c>
   1429c:	mov	r1, r8
   142a0:	mov	r2, sl
   142a4:	bl	10fb0 <memcpy@plt>
   142a8:	cmp	fp, #0
   142ac:	add	ip, r7, r9
   142b0:	movne	r3, #47	; 0x2f
   142b4:	strbne	r3, [r7, sl]
   142b8:	ldr	r3, [pc, #668]	; 1455c <close_stdout@@Base+0x2db4>
   142bc:	add	r3, pc, r3
   142c0:	ldm	r3!, {r0, r1, r2}
   142c4:	ldrh	r3, [r3]
   142c8:	str	r0, [r7, r9]
   142cc:	mov	r0, r7
   142d0:	str	r1, [ip, #4]
   142d4:	mov	r1, #32768	; 0x8000
   142d8:	strh	r3, [ip, #12]
   142dc:	str	r2, [ip, #8]
   142e0:	bl	1107c <open64@plt>
   142e4:	subs	r8, r0, #0
   142e8:	blt	144ac <close_stdout@@Base+0x2d04>
   142ec:	ldr	r1, [pc, #620]	; 14560 <close_stdout@@Base+0x2db8>
   142f0:	add	r1, pc, r1
   142f4:	bl	10f50 <fdopen@plt>
   142f8:	subs	fp, r0, #0
   142fc:	beq	14504 <close_stdout@@Base+0x2d5c>
   14300:	ldr	r0, [pc, #604]	; 14564 <close_stdout@@Base+0x2dbc>
   14304:	add	sl, sp, #20
   14308:	add	r9, sp, #72	; 0x48
   1430c:	mov	r8, #0
   14310:	add	r0, pc, r0
   14314:	str	r0, [sp, #12]
   14318:	ldr	r3, [fp, #4]
   1431c:	ldr	r2, [fp, #8]
   14320:	cmp	r3, r2
   14324:	bcs	14410 <close_stdout@@Base+0x2c68>
   14328:	add	r2, r3, #1
   1432c:	str	r2, [fp, #4]
   14330:	ldrb	r0, [r3]
   14334:	cmp	r0, #32
   14338:	beq	14318 <close_stdout@@Base+0x2b70>
   1433c:	sub	r3, r0, #9
   14340:	cmp	r3, #1
   14344:	bls	14318 <close_stdout@@Base+0x2b70>
   14348:	cmp	r0, #35	; 0x23
   1434c:	beq	14424 <close_stdout@@Base+0x2c7c>
   14350:	mov	r1, fp
   14354:	bl	1110c <ungetc@plt>
   14358:	mov	r0, fp
   1435c:	ldr	r1, [sp, #12]
   14360:	mov	r2, sl
   14364:	mov	r3, r9
   14368:	bl	1113c <fscanf@plt>
   1436c:	cmp	r0, #1
   14370:	ble	14454 <close_stdout@@Base+0x2cac>
   14374:	mov	r0, sl
   14378:	bl	110f4 <strlen@plt>
   1437c:	str	r0, [sp, #8]
   14380:	mov	r0, r9
   14384:	bl	110f4 <strlen@plt>
   14388:	cmp	r8, #0
   1438c:	mov	r2, r0
   14390:	bne	144b8 <close_stdout@@Base+0x2d10>
   14394:	ldr	r3, [sp, #8]
   14398:	str	r2, [sp]
   1439c:	add	r8, r0, r3
   143a0:	add	r0, r8, #3
   143a4:	add	r8, r8, #2
   143a8:	bl	11094 <malloc@plt>
   143ac:	ldr	r2, [sp]
   143b0:	mov	r3, r0
   143b4:	cmp	r3, #0
   143b8:	beq	1451c <close_stdout@@Base+0x2d74>
   143bc:	ldr	r0, [sp, #8]
   143c0:	movw	r1, #65534	; 0xfffe
   143c4:	movt	r1, #65535	; 0xffff
   143c8:	rsb	r2, r2, r8
   143cc:	rsb	r1, r0, r1
   143d0:	stm	sp, {r2, r3}
   143d4:	add	r0, r1, r2
   143d8:	mov	r1, sl
   143dc:	add	r0, r3, r0
   143e0:	mov	r4, r3
   143e4:	bl	1104c <strcpy@plt>
   143e8:	ldr	r2, [sp]
   143ec:	ldr	r3, [sp, #4]
   143f0:	mov	r1, r9
   143f4:	sub	r0, r2, #1
   143f8:	add	r0, r3, r0
   143fc:	bl	1104c <strcpy@plt>
   14400:	ldr	r3, [fp, #4]
   14404:	ldr	r2, [fp, #8]
   14408:	cmp	r3, r2
   1440c:	bcc	14328 <close_stdout@@Base+0x2b80>
   14410:	mov	r0, fp
   14414:	bl	11184 <__uflow@plt>
   14418:	cmn	r0, #1
   1441c:	beq	14454 <close_stdout@@Base+0x2cac>
   14420:	b	14334 <close_stdout@@Base+0x2b8c>
   14424:	ldr	r3, [fp, #4]
   14428:	ldr	r2, [fp, #8]
   1442c:	cmp	r3, r2
   14430:	bcs	14538 <close_stdout@@Base+0x2d90>
   14434:	add	r2, r3, #1
   14438:	str	r2, [fp, #4]
   1443c:	ldrb	r0, [r3]
   14440:	cmp	r0, #10
   14444:	cmnne	r0, #1
   14448:	bne	14424 <close_stdout@@Base+0x2c7c>
   1444c:	cmn	r0, #1
   14450:	bne	14318 <close_stdout@@Base+0x2b70>
   14454:	mov	r0, fp
   14458:	bl	14584 <close_stdout@@Base+0x2ddc>
   1445c:	cmp	r8, #0
   14460:	beq	144ac <close_stdout@@Base+0x2d04>
   14464:	mov	r3, #0
   14468:	strb	r3, [r4, r8]
   1446c:	mov	r0, r7
   14470:	bl	10f98 <free@plt>
   14474:	ldr	r3, [pc, #236]	; 14568 <close_stdout@@Base+0x2dc0>
   14478:	add	r3, pc, r3
   1447c:	str	r4, [r3]
   14480:	b	141a4 <close_stdout@@Base+0x29fc>
   14484:	ldr	r8, [pc, #224]	; 1456c <close_stdout@@Base+0x2dc4>
   14488:	mov	r3, #7
   1448c:	mov	sl, #8
   14490:	add	r8, pc, r8
   14494:	ldrb	r3, [r8, r3]
   14498:	cmp	r3, #47	; 0x2f
   1449c:	movne	r9, #1
   144a0:	movne	fp, r9
   144a4:	bne	14288 <close_stdout@@Base+0x2ae0>
   144a8:	b	14280 <close_stdout@@Base+0x2ad8>
   144ac:	ldr	r4, [pc, #188]	; 14570 <close_stdout@@Base+0x2dc8>
   144b0:	add	r4, pc, r4
   144b4:	b	1446c <close_stdout@@Base+0x2cc4>
   144b8:	ldr	r0, [sp, #8]
   144bc:	str	r2, [sp]
   144c0:	add	r3, r0, r2
   144c4:	mov	r0, r4
   144c8:	add	r8, r3, r8
   144cc:	add	r1, r8, #3
   144d0:	add	r8, r8, #2
   144d4:	bl	11004 <realloc@plt>
   144d8:	ldr	r2, [sp]
   144dc:	mov	r3, r0
   144e0:	b	143b4 <close_stdout@@Base+0x2c0c>
   144e4:	ldr	r4, [pc, #136]	; 14574 <close_stdout@@Base+0x2dcc>
   144e8:	add	r4, pc, r4
   144ec:	b	14474 <close_stdout@@Base+0x2ccc>
   144f0:	ldr	r8, [pc, #128]	; 14578 <close_stdout@@Base+0x2dd0>
   144f4:	mov	r3, #7
   144f8:	mov	sl, #8
   144fc:	add	r8, pc, r8
   14500:	b	14494 <close_stdout@@Base+0x2cec>
   14504:	ldr	r4, [pc, #112]	; 1457c <close_stdout@@Base+0x2dd4>
   14508:	mov	r0, r8
   1450c:	add	r4, pc, r4
   14510:	bl	111e4 <close@plt>
   14514:	b	1446c <close_stdout@@Base+0x2cc4>
   14518:	bl	10fec <__stack_chk_fail@plt>
   1451c:	mov	r0, r4
   14520:	ldr	r4, [pc, #88]	; 14580 <close_stdout@@Base+0x2dd8>
   14524:	bl	10f98 <free@plt>
   14528:	mov	r0, fp
   1452c:	add	r4, pc, r4
   14530:	bl	14584 <close_stdout@@Base+0x2ddc>
   14534:	b	1446c <close_stdout@@Base+0x2cc4>
   14538:	mov	r0, fp
   1453c:	bl	11184 <__uflow@plt>
   14540:	b	14440 <close_stdout@@Base+0x2c98>
   14544:	andeq	r1, r1, r8, lsl #29
   14548:	strdeq	r0, [r0], -r4
   1454c:	andeq	r2, r1, r8, lsl r1
   14550:	andeq	r0, r0, r8, lsr #30
   14554:	andeq	r0, r0, r4, lsl sl
   14558:	andeq	r0, r0, r0, lsl #30
   1455c:	andeq	r0, r0, r8, lsr #29
   14560:	andeq	r0, r0, r4, lsl #29
   14564:	andeq	r0, r0, r8, ror #28
   14568:	andeq	r1, r1, r8, lsr lr
   1456c:			; <UNDEFINED> instruction: 0x00000cb0
   14570:	andeq	r0, r0, ip, lsr #15
   14574:	andeq	r0, r0, r4, ror r7
   14578:	andeq	r0, r0, r4, asr #24
   1457c:	andeq	r0, r0, r0, asr r7
   14580:	andeq	r0, r0, r0, lsr r7
   14584:	push	{r4, r5, r6, lr}
   14588:	sub	sp, sp, #8
   1458c:	mov	r4, r0
   14590:	bl	11154 <fileno@plt>
   14594:	cmp	r0, #0
   14598:	mov	r0, r4
   1459c:	blt	14618 <close_stdout@@Base+0x2e70>
   145a0:	bl	110ac <__freading@plt>
   145a4:	cmp	r0, #0
   145a8:	bne	145e4 <close_stdout@@Base+0x2e3c>
   145ac:	mov	r0, r4
   145b0:	bl	14624 <close_stdout@@Base+0x2e7c>
   145b4:	cmp	r0, #0
   145b8:	beq	14614 <close_stdout@@Base+0x2e6c>
   145bc:	bl	11118 <__errno_location@plt>
   145c0:	ldr	r6, [r0]
   145c4:	mov	r5, r0
   145c8:	mov	r0, r4
   145cc:	bl	1116c <fclose@plt>
   145d0:	cmp	r6, #0
   145d4:	mvnne	r0, #0
   145d8:	strne	r6, [r5]
   145dc:	add	sp, sp, #8
   145e0:	pop	{r4, r5, r6, pc}
   145e4:	mov	r0, r4
   145e8:	bl	11154 <fileno@plt>
   145ec:	mov	r1, #1
   145f0:	mov	r2, #0
   145f4:	mov	r3, #0
   145f8:	str	r1, [sp]
   145fc:	bl	11034 <lseek64@plt>
   14600:	mvn	r2, #0
   14604:	mvn	r3, #0
   14608:	cmp	r1, r3
   1460c:	cmpeq	r0, r2
   14610:	bne	145ac <close_stdout@@Base+0x2e04>
   14614:	mov	r0, r4
   14618:	add	sp, sp, #8
   1461c:	pop	{r4, r5, r6, lr}
   14620:	b	1116c <fclose@plt>
   14624:	push	{r4, lr}
   14628:	subs	r4, r0, #0
   1462c:	sub	sp, sp, #8
   14630:	beq	14640 <close_stdout@@Base+0x2e98>
   14634:	bl	110ac <__freading@plt>
   14638:	cmp	r0, #0
   1463c:	bne	14650 <close_stdout@@Base+0x2ea8>
   14640:	mov	r0, r4
   14644:	add	sp, sp, #8
   14648:	pop	{r4, lr}
   1464c:	b	10f8c <fflush@plt>
   14650:	ldr	r3, [r4]
   14654:	tst	r3, #256	; 0x100
   14658:	beq	14640 <close_stdout@@Base+0x2e98>
   1465c:	mov	r3, #1
   14660:	mov	r0, r4
   14664:	str	r3, [sp]
   14668:	mov	r2, #0
   1466c:	mov	r3, #0
   14670:	bl	14684 <close_stdout@@Base+0x2edc>
   14674:	mov	r0, r4
   14678:	add	sp, sp, #8
   1467c:	pop	{r4, lr}
   14680:	b	10f8c <fflush@plt>
   14684:	push	{r4, r5, r6, r7, lr}
   14688:	sub	sp, sp, #20
   1468c:	ldmib	r0, {r1, ip}
   14690:	mov	r6, r0
   14694:	ldr	r4, [sp, #40]	; 0x28
   14698:	cmp	ip, r1
   1469c:	beq	146b4 <close_stdout@@Base+0x2f0c>
   146a0:	str	r4, [sp, #40]	; 0x28
   146a4:	mov	r0, r6
   146a8:	add	sp, sp, #20
   146ac:	pop	{r4, r5, r6, r7, lr}
   146b0:	b	11178 <fseeko64@plt>
   146b4:	ldr	ip, [r0, #20]
   146b8:	ldr	r1, [r0, #16]
   146bc:	cmp	ip, r1
   146c0:	bne	146a0 <close_stdout@@Base+0x2ef8>
   146c4:	ldr	r7, [r0, #36]	; 0x24
   146c8:	cmp	r7, #0
   146cc:	bne	146a0 <close_stdout@@Base+0x2ef8>
   146d0:	str	r2, [sp, #12]
   146d4:	mvn	r5, #0
   146d8:	str	r3, [sp, #8]
   146dc:	bl	11154 <fileno@plt>
   146e0:	str	r4, [sp]
   146e4:	mvn	r4, #0
   146e8:	ldr	r2, [sp, #12]
   146ec:	ldr	r3, [sp, #8]
   146f0:	bl	11034 <lseek64@plt>
   146f4:	mov	r2, r0
   146f8:	mov	r3, r1
   146fc:	cmp	r3, r5
   14700:	cmpeq	r2, r4
   14704:	beq	14724 <close_stdout@@Base+0x2f7c>
   14708:	ldr	r1, [r6]
   1470c:	mov	r0, r7
   14710:	strd	r2, [r6, #80]	; 0x50
   14714:	bic	r3, r1, #16
   14718:	str	r3, [r6]
   1471c:	add	sp, sp, #20
   14720:	pop	{r4, r5, r6, r7, pc}
   14724:	mvn	r0, #0
   14728:	b	1471c <close_stdout@@Base+0x2f74>
   1472c:	subs	r2, r1, #1
   14730:	bxeq	lr
   14734:	bcc	1490c <close_stdout@@Base+0x3164>
   14738:	cmp	r0, r1
   1473c:	bls	148f0 <close_stdout@@Base+0x3148>
   14740:	tst	r1, r2
   14744:	beq	148fc <close_stdout@@Base+0x3154>
   14748:	clz	r3, r0
   1474c:	clz	r2, r1
   14750:	sub	r3, r2, r3
   14754:	rsbs	r3, r3, #31
   14758:	addne	r3, r3, r3, lsl #1
   1475c:	mov	r2, #0
   14760:	addne	pc, pc, r3, lsl #2
   14764:	nop	{0}
   14768:	cmp	r0, r1, lsl #31
   1476c:	adc	r2, r2, r2
   14770:	subcs	r0, r0, r1, lsl #31
   14774:	cmp	r0, r1, lsl #30
   14778:	adc	r2, r2, r2
   1477c:	subcs	r0, r0, r1, lsl #30
   14780:	cmp	r0, r1, lsl #29
   14784:	adc	r2, r2, r2
   14788:	subcs	r0, r0, r1, lsl #29
   1478c:	cmp	r0, r1, lsl #28
   14790:	adc	r2, r2, r2
   14794:	subcs	r0, r0, r1, lsl #28
   14798:	cmp	r0, r1, lsl #27
   1479c:	adc	r2, r2, r2
   147a0:	subcs	r0, r0, r1, lsl #27
   147a4:	cmp	r0, r1, lsl #26
   147a8:	adc	r2, r2, r2
   147ac:	subcs	r0, r0, r1, lsl #26
   147b0:	cmp	r0, r1, lsl #25
   147b4:	adc	r2, r2, r2
   147b8:	subcs	r0, r0, r1, lsl #25
   147bc:	cmp	r0, r1, lsl #24
   147c0:	adc	r2, r2, r2
   147c4:	subcs	r0, r0, r1, lsl #24
   147c8:	cmp	r0, r1, lsl #23
   147cc:	adc	r2, r2, r2
   147d0:	subcs	r0, r0, r1, lsl #23
   147d4:	cmp	r0, r1, lsl #22
   147d8:	adc	r2, r2, r2
   147dc:	subcs	r0, r0, r1, lsl #22
   147e0:	cmp	r0, r1, lsl #21
   147e4:	adc	r2, r2, r2
   147e8:	subcs	r0, r0, r1, lsl #21
   147ec:	cmp	r0, r1, lsl #20
   147f0:	adc	r2, r2, r2
   147f4:	subcs	r0, r0, r1, lsl #20
   147f8:	cmp	r0, r1, lsl #19
   147fc:	adc	r2, r2, r2
   14800:	subcs	r0, r0, r1, lsl #19
   14804:	cmp	r0, r1, lsl #18
   14808:	adc	r2, r2, r2
   1480c:	subcs	r0, r0, r1, lsl #18
   14810:	cmp	r0, r1, lsl #17
   14814:	adc	r2, r2, r2
   14818:	subcs	r0, r0, r1, lsl #17
   1481c:	cmp	r0, r1, lsl #16
   14820:	adc	r2, r2, r2
   14824:	subcs	r0, r0, r1, lsl #16
   14828:	cmp	r0, r1, lsl #15
   1482c:	adc	r2, r2, r2
   14830:	subcs	r0, r0, r1, lsl #15
   14834:	cmp	r0, r1, lsl #14
   14838:	adc	r2, r2, r2
   1483c:	subcs	r0, r0, r1, lsl #14
   14840:	cmp	r0, r1, lsl #13
   14844:	adc	r2, r2, r2
   14848:	subcs	r0, r0, r1, lsl #13
   1484c:	cmp	r0, r1, lsl #12
   14850:	adc	r2, r2, r2
   14854:	subcs	r0, r0, r1, lsl #12
   14858:	cmp	r0, r1, lsl #11
   1485c:	adc	r2, r2, r2
   14860:	subcs	r0, r0, r1, lsl #11
   14864:	cmp	r0, r1, lsl #10
   14868:	adc	r2, r2, r2
   1486c:	subcs	r0, r0, r1, lsl #10
   14870:	cmp	r0, r1, lsl #9
   14874:	adc	r2, r2, r2
   14878:	subcs	r0, r0, r1, lsl #9
   1487c:	cmp	r0, r1, lsl #8
   14880:	adc	r2, r2, r2
   14884:	subcs	r0, r0, r1, lsl #8
   14888:	cmp	r0, r1, lsl #7
   1488c:	adc	r2, r2, r2
   14890:	subcs	r0, r0, r1, lsl #7
   14894:	cmp	r0, r1, lsl #6
   14898:	adc	r2, r2, r2
   1489c:	subcs	r0, r0, r1, lsl #6
   148a0:	cmp	r0, r1, lsl #5
   148a4:	adc	r2, r2, r2
   148a8:	subcs	r0, r0, r1, lsl #5
   148ac:	cmp	r0, r1, lsl #4
   148b0:	adc	r2, r2, r2
   148b4:	subcs	r0, r0, r1, lsl #4
   148b8:	cmp	r0, r1, lsl #3
   148bc:	adc	r2, r2, r2
   148c0:	subcs	r0, r0, r1, lsl #3
   148c4:	cmp	r0, r1, lsl #2
   148c8:	adc	r2, r2, r2
   148cc:	subcs	r0, r0, r1, lsl #2
   148d0:	cmp	r0, r1, lsl #1
   148d4:	adc	r2, r2, r2
   148d8:	subcs	r0, r0, r1, lsl #1
   148dc:	cmp	r0, r1
   148e0:	adc	r2, r2, r2
   148e4:	subcs	r0, r0, r1
   148e8:	mov	r0, r2
   148ec:	bx	lr
   148f0:	moveq	r0, #1
   148f4:	movne	r0, #0
   148f8:	bx	lr
   148fc:	clz	r2, r1
   14900:	rsb	r2, r2, #31
   14904:	lsr	r0, r0, r2
   14908:	bx	lr
   1490c:	cmp	r0, #0
   14910:	mvnne	r0, #0
   14914:	b	14938 <close_stdout@@Base+0x3190>
   14918:	cmp	r1, #0
   1491c:	beq	1490c <close_stdout@@Base+0x3164>
   14920:	push	{r0, r1, lr}
   14924:	bl	1472c <close_stdout@@Base+0x2f84>
   14928:	pop	{r1, r2, lr}
   1492c:	mul	r3, r2, r0
   14930:	sub	r1, r1, r3
   14934:	bx	lr
   14938:	push	{r1, lr}
   1493c:	mov	r0, #8
   14940:	bl	10f74 <raise@plt>
   14944:	pop	{r1, pc}
   14948:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1494c:	mov	r7, r0
   14950:	ldr	r6, [pc, #76]	; 149a4 <close_stdout@@Base+0x31fc>
   14954:	mov	r8, r1
   14958:	ldr	r5, [pc, #72]	; 149a8 <close_stdout@@Base+0x3200>
   1495c:	mov	r9, r2
   14960:	add	r6, pc, r6
   14964:	bl	10f30 <fdopen@plt-0x20>
   14968:	add	r5, pc, r5
   1496c:	rsb	r6, r5, r6
   14970:	asrs	r6, r6, #2
   14974:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   14978:	sub	r5, r5, #4
   1497c:	mov	r4, #0
   14980:	add	r4, r4, #1
   14984:	ldr	r3, [r5, #4]!
   14988:	mov	r0, r7
   1498c:	mov	r1, r8
   14990:	mov	r2, r9
   14994:	blx	r3
   14998:	cmp	r4, r6
   1499c:	bne	14980 <close_stdout@@Base+0x31d8>
   149a0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   149a4:	andeq	r1, r1, r4, lsr #10
   149a8:	andeq	r1, r1, r8, lsl r5
   149ac:	bx	lr
   149b0:	ldr	r3, [pc, #28]	; 149d4 <close_stdout@@Base+0x322c>
   149b4:	mov	r1, #0
   149b8:	ldr	r2, [pc, #24]	; 149d8 <close_stdout@@Base+0x3230>
   149bc:	add	r3, pc, r3
   149c0:	ldr	r3, [r3, r2]
   149c4:	cmp	r3, #0
   149c8:	ldrne	r2, [r3]
   149cc:	moveq	r2, r3
   149d0:	b	11124 <__cxa_atexit@plt>
   149d4:	andeq	r1, r1, ip, lsr r6
   149d8:	andeq	r0, r0, ip, lsl #2

Disassembly of section .fini:

000149dc <.fini>:
   149dc:	push	{r3, lr}
   149e0:	pop	{r3, pc}
