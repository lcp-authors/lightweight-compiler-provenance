
centos-preinstalled/stunbdc:     file format elf32-littlearm


Disassembly of section .init:

00008a68 <.init>:
    8a68:	push	{r3, lr}
    8a6c:	bl	8f94 <__assert_fail@plt+0x35c>
    8a70:	pop	{r3, pc}

Disassembly of section .plt:

00008a74 <setsockopt@plt-0x14>:
    8a74:	push	{lr}		; (str lr, [sp, #-4]!)
    8a78:	ldr	lr, [pc, #4]	; 8a84 <setsockopt@plt-0x4>
    8a7c:	add	lr, pc, lr
    8a80:	ldr	pc, [lr, #8]!
    8a84:	andeq	r0, r1, ip, ror r5

00008a88 <setsockopt@plt>:
    8a88:	add	ip, pc, #0, 12
    8a8c:	add	ip, ip, #16, 20	; 0x10000
    8a90:	ldr	pc, [ip, #1404]!	; 0x57c

00008a94 <fopen@plt>:
    8a94:	add	ip, pc, #0, 12
    8a98:	add	ip, ip, #16, 20	; 0x10000
    8a9c:	ldr	pc, [ip, #1396]!	; 0x574

00008aa0 <memmove@plt>:
    8aa0:	add	ip, pc, #0, 12
    8aa4:	add	ip, ip, #16, 20	; 0x10000
    8aa8:	ldr	pc, [ip, #1388]!	; 0x56c

00008aac <gai_strerror@plt>:
    8aac:	add	ip, pc, #0, 12
    8ab0:	add	ip, ip, #16, 20	; 0x10000
    8ab4:	ldr	pc, [ip, #1380]!	; 0x564

00008ab8 <memcpy@plt>:
    8ab8:	add	ip, pc, #0, 12
    8abc:	add	ip, ip, #16, 20	; 0x10000
    8ac0:	ldr	pc, [ip, #1372]!	; 0x55c

00008ac4 <time@plt>:
    8ac4:	add	ip, pc, #0, 12
    8ac8:	add	ip, ip, #16, 20	; 0x10000
    8acc:	ldr	pc, [ip, #1364]!	; 0x554

00008ad0 <memcmp@plt>:
    8ad0:	add	ip, pc, #0, 12
    8ad4:	add	ip, ip, #16, 20	; 0x10000
    8ad8:	ldr	pc, [ip, #1356]!	; 0x54c

00008adc <__stack_chk_fail@plt>:
    8adc:	add	ip, pc, #0, 12
    8ae0:	add	ip, ip, #16, 20	; 0x10000
    8ae4:	ldr	pc, [ip, #1348]!	; 0x544

00008ae8 <poll@plt>:
    8ae8:	add	ip, pc, #0, 12
    8aec:	add	ip, ip, #16, 20	; 0x10000
    8af0:	ldr	pc, [ip, #1340]!	; 0x53c

00008af4 <__memcpy_chk@plt>:
    8af4:	add	ip, pc, #0, 12
    8af8:	add	ip, ip, #16, 20	; 0x10000
    8afc:	ldr	pc, [ip, #1332]!	; 0x534

00008b00 <gettimeofday@plt>:
    8b00:	add	ip, pc, #0, 12
    8b04:	add	ip, ip, #16, 20	; 0x10000
    8b08:	ldr	pc, [ip, #1324]!	; 0x52c

00008b0c <fread@plt>:
    8b0c:	add	ip, pc, #0, 12
    8b10:	add	ip, ip, #16, 20	; 0x10000
    8b14:	ldr	pc, [ip, #1316]!	; 0x524

00008b18 <__libc_start_main@plt>:
    8b18:	add	ip, pc, #0, 12
    8b1c:	add	ip, ip, #16, 20	; 0x10000
    8b20:	ldr	pc, [ip, #1308]!	; 0x51c

00008b24 <__vfprintf_chk@plt>:
    8b24:	add	ip, pc, #0, 12
    8b28:	add	ip, ip, #16, 20	; 0x10000
    8b2c:	ldr	pc, [ip, #1300]!	; 0x514

00008b30 <__gmon_start__@plt>:
    8b30:	add	ip, pc, #0, 12
    8b34:	add	ip, ip, #16, 20	; 0x10000
    8b38:	ldr	pc, [ip, #1292]!	; 0x50c

00008b3c <clock@plt>:
    8b3c:	add	ip, pc, #0, 12
    8b40:	add	ip, ip, #16, 20	; 0x10000
    8b44:	ldr	pc, [ip, #1284]!	; 0x504

00008b48 <getopt_long@plt>:
    8b48:	add	ip, pc, #0, 12
    8b4c:	add	ip, ip, #16, 20	; 0x10000
    8b50:	ldr	pc, [ip, #1276]!	; 0x4fc

00008b54 <strlen@plt>:
    8b54:	add	ip, pc, #0, 12
    8b58:	add	ip, ip, #16, 20	; 0x10000
    8b5c:	ldr	pc, [ip, #1268]!	; 0x4f4

00008b60 <fcntl@plt>:
    8b60:	add	ip, pc, #0, 12
    8b64:	add	ip, ip, #16, 20	; 0x10000
    8b68:	ldr	pc, [ip, #1260]!	; 0x4ec

00008b6c <__errno_location@plt>:
    8b6c:	add	ip, pc, #0, 12
    8b70:	add	ip, ip, #16, 20	; 0x10000
    8b74:	ldr	pc, [ip, #1252]!	; 0x4e4

00008b78 <memset@plt>:
    8b78:	add	ip, pc, #0, 12
    8b7c:	add	ip, ip, #16, 20	; 0x10000
    8b80:	ldr	pc, [ip, #1244]!	; 0x4dc

00008b84 <__printf_chk@plt>:
    8b84:	add	ip, pc, #0, 12
    8b88:	add	ip, ip, #16, 20	; 0x10000
    8b8c:	ldr	pc, [ip, #1236]!	; 0x4d4

00008b90 <__fprintf_chk@plt>:
    8b90:	add	ip, pc, #0, 12
    8b94:	add	ip, ip, #16, 20	; 0x10000
    8b98:	ldr	pc, [ip, #1228]!	; 0x4cc

00008b9c <fclose@plt>:
    8b9c:	add	ip, pc, #0, 12
    8ba0:	add	ip, ip, #16, 20	; 0x10000
    8ba4:	ldr	pc, [ip, #1220]!	; 0x4c4

00008ba8 <sendto@plt>:
    8ba8:	add	ip, pc, #0, 12
    8bac:	add	ip, ip, #16, 20	; 0x10000
    8bb0:	ldr	pc, [ip, #1212]!	; 0x4bc

00008bb4 <getnameinfo@plt>:
    8bb4:	add	ip, pc, #0, 12
    8bb8:	add	ip, ip, #16, 20	; 0x10000
    8bbc:	ldr	pc, [ip, #1204]!	; 0x4b4

00008bc0 <recvmsg@plt>:
    8bc0:	add	ip, pc, #0, 12
    8bc4:	add	ip, ip, #16, 20	; 0x10000
    8bc8:	ldr	pc, [ip, #1196]!	; 0x4ac

00008bcc <freeaddrinfo@plt>:
    8bcc:	add	ip, pc, #0, 12
    8bd0:	add	ip, ip, #16, 20	; 0x10000
    8bd4:	ldr	pc, [ip, #1188]!	; 0x4a4

00008bd8 <getaddrinfo@plt>:
    8bd8:	add	ip, pc, #0, 12
    8bdc:	add	ip, ip, #16, 20	; 0x10000
    8be0:	ldr	pc, [ip, #1180]!	; 0x49c

00008be4 <socket@plt>:
    8be4:	add	ip, pc, #0, 12
    8be8:	add	ip, ip, #16, 20	; 0x10000
    8bec:	ldr	pc, [ip, #1172]!	; 0x494

00008bf0 <clock_gettime@plt>:
    8bf0:	add	ip, pc, #0, 12
    8bf4:	add	ip, ip, #16, 20	; 0x10000
    8bf8:	ldr	pc, [ip, #1164]!	; 0x48c

00008bfc <abort@plt>:
    8bfc:	add	ip, pc, #0, 12
    8c00:	add	ip, ip, #16, 20	; 0x10000
    8c04:	ldr	pc, [ip, #1156]!	; 0x484

00008c08 <recv@plt>:
    8c08:	add	ip, pc, #0, 12
    8c0c:	add	ip, ip, #16, 20	; 0x10000
    8c10:	ldr	pc, [ip, #1148]!	; 0x47c

00008c14 <close@plt>:
    8c14:	add	ip, pc, #0, 12
    8c18:	add	ip, ip, #16, 20	; 0x10000
    8c1c:	ldr	pc, [ip, #1140]!	; 0x474

00008c20 <send@plt>:
    8c20:	add	ip, pc, #0, 12
    8c24:	add	ip, ip, #16, 20	; 0x10000
    8c28:	ldr	pc, [ip, #1132]!	; 0x46c

00008c2c <div@plt>:
    8c2c:	add	ip, pc, #0, 12
    8c30:	add	ip, ip, #16, 20	; 0x10000
    8c34:	ldr	pc, [ip, #1124]!	; 0x464

00008c38 <__assert_fail@plt>:
    8c38:	add	ip, pc, #0, 12
    8c3c:	add	ip, ip, #16, 20	; 0x10000
    8c40:	ldr	pc, [ip, #1116]!	; 0x45c

Disassembly of section .text:

00008c44 <.text>:
    8c44:	push	{r3, lr}
    8c48:	mov	r2, #209	; 0xd1
    8c4c:	ldr	r0, [pc, #20]	; 8c68 <__assert_fail@plt+0x30>
    8c50:	ldr	r1, [pc, #20]	; 8c6c <__assert_fail@plt+0x34>
    8c54:	ldr	r3, [pc, #20]	; 8c70 <__assert_fail@plt+0x38>
    8c58:	add	r0, pc, r0
    8c5c:	add	r1, pc, r1
    8c60:	add	r3, pc, r3
    8c64:	bl	8c38 <__assert_fail@plt>
    8c68:	muleq	r0, r0, pc	; <UNPREDICTABLE>
    8c6c:	andeq	r6, r0, r4, ror sp
    8c70:	strdeq	r6, [r0], -ip
    8c74:	push	{r4, r5, r6, r7, r8, r9, lr}
    8c78:	movw	r4, #37048	; 0x90b8
    8c7c:	movt	r4, #1
    8c80:	sub	sp, sp, #188	; 0xbc
    8c84:	mov	r9, #0
    8c88:	movw	r5, #37072	; 0x90d0
    8c8c:	ldr	r3, [r4]
    8c90:	movt	r5, #1
    8c94:	mov	r7, r0
    8c98:	mov	r6, r1
    8c9c:	mov	r8, r9
    8ca0:	str	r3, [sp, #180]	; 0xb4
    8ca4:	str	r8, [sp]
    8ca8:	movw	r2, #63468	; 0xf7ec
    8cac:	movw	r3, #63340	; 0xf76c
    8cb0:	movt	r2, #0
    8cb4:	movt	r3, #0
    8cb8:	mov	r0, r7
    8cbc:	mov	r1, r6
    8cc0:	bl	8b48 <getopt_long@plt>
    8cc4:	cmn	r0, #1
    8cc8:	beq	8d78 <__assert_fail@plt+0x140>
    8ccc:	cmp	r0, #86	; 0x56
    8cd0:	beq	8d50 <__assert_fail@plt+0x118>
    8cd4:	bgt	8cf0 <__assert_fail@plt+0xb8>
    8cd8:	cmp	r0, #52	; 0x34
    8cdc:	beq	8d10 <__assert_fail@plt+0xd8>
    8ce0:	cmp	r0, #54	; 0x36
    8ce4:	bne	8d48 <__assert_fail@plt+0x110>
    8ce8:	mov	r9, #10
    8cec:	b	8ca4 <__assert_fail@plt+0x6c>
    8cf0:	cmp	r0, #104	; 0x68
    8cf4:	beq	8d18 <__assert_fail@plt+0xe0>
    8cf8:	cmp	r0, #110	; 0x6e
    8cfc:	bne	8d48 <__assert_fail@plt+0x110>
    8d00:	ldr	r3, [r5]
    8d04:	orr	r3, r3, #4
    8d08:	str	r3, [r5]
    8d0c:	b	8ca4 <__assert_fail@plt+0x6c>
    8d10:	mov	r9, #2
    8d14:	b	8ca4 <__assert_fail@plt+0x6c>
    8d18:	ldr	r2, [r6]
    8d1c:	movw	r1, #63476	; 0xf7f4
    8d20:	mov	r0, #1
    8d24:	movt	r1, #0
    8d28:	bl	8b84 <__printf_chk@plt>
    8d2c:	mov	r0, #0
    8d30:	ldr	r2, [sp, #180]	; 0xb4
    8d34:	ldr	r3, [r4]
    8d38:	cmp	r2, r3
    8d3c:	bne	8ed8 <__assert_fail@plt+0x2a0>
    8d40:	add	sp, sp, #188	; 0xbc
    8d44:	pop	{r4, r5, r6, r7, r8, r9, pc}
    8d48:	mov	r0, #2
    8d4c:	b	8d30 <__assert_fail@plt+0xf8>
    8d50:	movw	r1, #63664	; 0xf8b0
    8d54:	movw	r2, #63716	; 0xf8e4
    8d58:	movt	r1, #0
    8d5c:	movt	r2, #0
    8d60:	movw	r3, #840	; 0x348
    8d64:	mov	r0, #1
    8d68:	movt	r3, #1
    8d6c:	bl	8b84 <__printf_chk@plt>
    8d70:	mov	r0, #0
    8d74:	b	8d30 <__assert_fail@plt+0xf8>
    8d78:	movw	r2, #37056	; 0x90c0
    8d7c:	movt	r2, #1
    8d80:	ldr	r1, [r2]
    8d84:	cmp	r7, r1
    8d88:	ble	8dec <__assert_fail@plt+0x1b4>
    8d8c:	add	r0, r1, #1
    8d90:	lsl	r3, r1, #2
    8d94:	cmp	r7, r0
    8d98:	str	r0, [r2]
    8d9c:	ldr	r8, [r6, r1, lsl #2]
    8da0:	ble	8df0 <__assert_fail@plt+0x1b8>
    8da4:	add	r1, r1, #2
    8da8:	add	r3, r6, r3
    8dac:	cmp	r7, r1
    8db0:	str	r1, [r2]
    8db4:	ldr	r5, [r3, #4]
    8db8:	ble	8f14 <__assert_fail@plt+0x2dc>
    8dbc:	ldr	ip, [r3, #8]
    8dc0:	movw	r0, #37064	; 0x90c8
    8dc4:	movt	r0, #1
    8dc8:	ldr	r3, [r6]
    8dcc:	movw	r2, #63724	; 0xf8ec
    8dd0:	mov	r1, #1
    8dd4:	str	ip, [sp]
    8dd8:	movt	r2, #0
    8ddc:	ldr	r0, [r0]
    8de0:	bl	8b90 <__fprintf_chk@plt>
    8de4:	mov	r0, #2
    8de8:	b	8d30 <__assert_fail@plt+0xf8>
    8dec:	mov	r8, #0
    8df0:	add	r6, sp, #20
    8df4:	mov	r2, #32
    8df8:	mov	r1, #0
    8dfc:	movw	r5, #63460	; 0xf7e4
    8e00:	mov	r0, r6
    8e04:	movt	r5, #0
    8e08:	bl	8b78 <memset@plt>
    8e0c:	movw	r3, #37072	; 0x90d0
    8e10:	movt	r3, #1
    8e14:	mov	r2, #2
    8e18:	str	r9, [sp, #24]
    8e1c:	ldr	r3, [r3]
    8e20:	str	r2, [sp, #28]
    8e24:	str	r3, [sp, #20]
    8e28:	mov	r2, r6
    8e2c:	mov	r1, r5
    8e30:	mov	r0, r8
    8e34:	add	r3, sp, #12
    8e38:	bl	8bd8 <getaddrinfo@plt>
    8e3c:	cmp	r0, #0
    8e40:	movweq	r6, #37064	; 0x90c8
    8e44:	ldreq	r5, [sp, #12]
    8e48:	movteq	r6, #1
    8e4c:	beq	8e6c <__assert_fail@plt+0x234>
    8e50:	b	8edc <__assert_fail@plt+0x2a4>
    8e54:	movw	r2, #64176	; 0xfab0
    8e58:	ldr	r0, [r6]
    8e5c:	movt	r2, #0
    8e60:	mov	r1, #1
    8e64:	bl	8b90 <__fprintf_chk@plt>
    8e68:	ldr	r5, [r5, #28]
    8e6c:	cmp	r5, #0
    8e70:	beq	8ec4 <__assert_fail@plt+0x28c>
    8e74:	ldr	r1, [r5, #20]
    8e78:	movw	r0, #63772	; 0xf91c
    8e7c:	ldr	r2, [r5, #16]
    8e80:	movt	r0, #0
    8e84:	mov	r3, #128	; 0x80
    8e88:	str	r3, [sp, #16]
    8e8c:	bl	908c <__assert_fail@plt+0x454>
    8e90:	add	r3, sp, #16
    8e94:	ldr	r0, [r5, #20]
    8e98:	add	r2, sp, #52	; 0x34
    8e9c:	ldr	r1, [r5, #16]
    8ea0:	bl	95d0 <__assert_fail@plt+0x998>
    8ea4:	subs	r3, r0, #0
    8ea8:	bne	8e54 <__assert_fail@plt+0x21c>
    8eac:	movw	r0, #63788	; 0xf92c
    8eb0:	add	r1, sp, #52	; 0x34
    8eb4:	movt	r0, #0
    8eb8:	ldr	r2, [sp, #16]
    8ebc:	bl	908c <__assert_fail@plt+0x454>
    8ec0:	b	8e68 <__assert_fail@plt+0x230>
    8ec4:	ldr	r0, [sp, #12]
    8ec8:	bl	8bcc <freeaddrinfo@plt>
    8ecc:	adds	r0, r5, #0
    8ed0:	movne	r0, #1
    8ed4:	b	8d30 <__assert_fail@plt+0xf8>
    8ed8:	bl	8adc <__stack_chk_fail@plt>
    8edc:	movw	r3, #37064	; 0x90c8
    8ee0:	movt	r3, #1
    8ee4:	ldr	r6, [r3]
    8ee8:	bl	8aac <gai_strerror@plt>
    8eec:	str	r5, [sp]
    8ef0:	mov	r3, r8
    8ef4:	movw	r2, #63752	; 0xf908
    8ef8:	mov	r1, #1
    8efc:	movt	r2, #0
    8f00:	mvn	r5, #0
    8f04:	str	r0, [sp, #4]
    8f08:	mov	r0, r6
    8f0c:	bl	8b90 <__fprintf_chk@plt>
    8f10:	b	8ecc <__assert_fail@plt+0x294>
    8f14:	add	r6, sp, #20
    8f18:	mov	r2, #32
    8f1c:	mov	r1, #0
    8f20:	mov	r0, r6
    8f24:	bl	8b78 <memset@plt>
    8f28:	movw	r2, #37072	; 0x90d0
    8f2c:	movt	r2, #1
    8f30:	movw	r3, #63460	; 0xf7e4
    8f34:	cmp	r5, #0
    8f38:	movt	r3, #0
    8f3c:	ldr	r2, [r2]
    8f40:	moveq	r5, r3
    8f44:	str	r9, [sp, #24]
    8f48:	mov	r3, #2
    8f4c:	str	r3, [sp, #28]
    8f50:	str	r2, [sp, #20]
    8f54:	b	8e28 <__assert_fail@plt+0x1f0>
    8f58:	mov	fp, #0
    8f5c:	mov	lr, #0
    8f60:	pop	{r1}		; (ldr r1, [sp], #4)
    8f64:	mov	r2, sp
    8f68:	push	{r2}		; (str r2, [sp, #-4]!)
    8f6c:	push	{r0}		; (str r0, [sp, #-4]!)
    8f70:	ldr	ip, [pc, #16]	; 8f88 <__assert_fail@plt+0x350>
    8f74:	push	{ip}		; (str ip, [sp, #-4]!)
    8f78:	ldr	r0, [pc, #12]	; 8f8c <__assert_fail@plt+0x354>
    8f7c:	ldr	r3, [pc, #12]	; 8f90 <__assert_fail@plt+0x358>
    8f80:	bl	8b18 <__libc_start_main@plt>
    8f84:	bl	8bfc <abort@plt>
    8f88:	andeq	pc, r0, r8, asr r7	; <UNPREDICTABLE>
    8f8c:	andeq	r8, r0, r4, ror ip
    8f90:	strdeq	pc, [r0], -r4
    8f94:	ldr	r3, [pc, #20]	; 8fb0 <__assert_fail@plt+0x378>
    8f98:	ldr	r2, [pc, #20]	; 8fb4 <__assert_fail@plt+0x37c>
    8f9c:	add	r3, pc, r3
    8fa0:	ldr	r2, [r3, r2]
    8fa4:	cmp	r2, #0
    8fa8:	bxeq	lr
    8fac:	b	8b30 <__gmon_start__@plt>
    8fb0:	andeq	r0, r1, ip, asr r0
    8fb4:	andeq	r0, r0, r8, lsr #1
    8fb8:	push	{r3, lr}
    8fbc:	movw	r0, #37048	; 0x90b8
    8fc0:	ldr	r3, [pc, #36]	; 8fec <__assert_fail@plt+0x3b4>
    8fc4:	movt	r0, #1
    8fc8:	rsb	r3, r0, r3
    8fcc:	cmp	r3, #6
    8fd0:	popls	{r3, pc}
    8fd4:	movw	r3, #0
    8fd8:	movt	r3, #0
    8fdc:	cmp	r3, #0
    8fe0:	popeq	{r3, pc}
    8fe4:	blx	r3
    8fe8:	pop	{r3, pc}
    8fec:	strheq	r9, [r1], -fp
    8ff0:	push	{r3, lr}
    8ff4:	movw	r0, #37048	; 0x90b8
    8ff8:	movw	r3, #37048	; 0x90b8
    8ffc:	movt	r0, #1
    9000:	movt	r3, #1
    9004:	rsb	r3, r0, r3
    9008:	asr	r3, r3, #2
    900c:	add	r3, r3, r3, lsr #31
    9010:	asrs	r1, r3, #1
    9014:	popeq	{r3, pc}
    9018:	movw	r2, #0
    901c:	movt	r2, #0
    9020:	cmp	r2, #0
    9024:	popeq	{r3, pc}
    9028:	blx	r2
    902c:	pop	{r3, pc}
    9030:	push	{r4, lr}
    9034:	movw	r4, #37068	; 0x90cc
    9038:	movt	r4, #1
    903c:	ldrb	r3, [r4]
    9040:	cmp	r3, #0
    9044:	popne	{r4, pc}
    9048:	bl	8fb8 <__assert_fail@plt+0x380>
    904c:	mov	r3, #1
    9050:	strb	r3, [r4]
    9054:	pop	{r4, pc}
    9058:	movw	r0, #36604	; 0x8efc
    905c:	movt	r0, #1
    9060:	push	{r3, lr}
    9064:	ldr	r3, [r0]
    9068:	cmp	r3, #0
    906c:	beq	9084 <__assert_fail@plt+0x44c>
    9070:	movw	r3, #0
    9074:	movt	r3, #0
    9078:	cmp	r3, #0
    907c:	beq	9084 <__assert_fail@plt+0x44c>
    9080:	blx	r3
    9084:	pop	{r3, lr}
    9088:	b	8ff0 <__assert_fail@plt+0x3b8>
    908c:	push	{r4, r5, r6, lr}
    9090:	movw	r4, #37048	; 0x90b8
    9094:	movt	r4, #1
    9098:	sub	sp, sp, #1072	; 0x430
    909c:	sub	sp, sp, #8
    90a0:	mov	r3, #32
    90a4:	ldr	ip, [r4]
    90a8:	mov	lr, #3
    90ac:	str	r3, [sp, #4]
    90b0:	mov	r6, r0
    90b4:	add	r5, sp, #16
    90b8:	mov	r0, r1
    90bc:	str	r5, [sp]
    90c0:	mov	r1, r2
    90c4:	movw	r3, #1025	; 0x401
    90c8:	add	r2, sp, #48	; 0x30
    90cc:	str	lr, [sp, #8]
    90d0:	str	ip, [sp, #1076]	; 0x434
    90d4:	bl	8bb4 <getnameinfo@plt>
    90d8:	cmp	r0, #0
    90dc:	bne	9118 <__assert_fail@plt+0x4e0>
    90e0:	movw	r1, #63444	; 0xf7d4
    90e4:	str	r5, [sp]
    90e8:	mov	r2, r6
    90ec:	add	r3, sp, #48	; 0x30
    90f0:	mov	r0, #1
    90f4:	movt	r1, #0
    90f8:	bl	8b84 <__printf_chk@plt>
    90fc:	ldr	r2, [sp, #1076]	; 0x434
    9100:	ldr	r3, [r4]
    9104:	cmp	r2, r3
    9108:	bne	9138 <__assert_fail@plt+0x500>
    910c:	add	sp, sp, #1072	; 0x430
    9110:	add	sp, sp, #8
    9114:	pop	{r4, r5, r6, pc}
    9118:	bl	8aac <gai_strerror@plt>
    911c:	mov	r2, r6
    9120:	movw	r1, #63436	; 0xf7cc
    9124:	movt	r1, #0
    9128:	mov	r3, r0
    912c:	mov	r0, #1
    9130:	bl	8b84 <__printf_chk@plt>
    9134:	b	90fc <__assert_fail@plt+0x4c4>
    9138:	bl	8adc <__stack_chk_fail@plt>
    913c:	ldr	r3, [pc, #128]	; 91c4 <__assert_fail@plt+0x58c>
    9140:	ldr	r2, [pc, #128]	; 91c8 <__assert_fail@plt+0x590>
    9144:	add	r3, pc, r3
    9148:	push	{r4, r5, r6, lr}
    914c:	sub	sp, sp, #32
    9150:	ldr	r4, [r3, r2]
    9154:	mov	r6, r0
    9158:	ldr	r3, [r4]
    915c:	str	r3, [sp, #28]
    9160:	bl	8b6c <__errno_location@plt>
    9164:	mov	r2, #8192	; 0x2000
    9168:	mov	r1, sp
    916c:	mov	r3, #0
    9170:	str	r3, [sp]
    9174:	str	r3, [sp, #4]
    9178:	str	r3, [sp, #8]
    917c:	str	r3, [sp, #12]
    9180:	str	r3, [sp, #16]
    9184:	str	r3, [sp, #20]
    9188:	str	r3, [sp, #24]
    918c:	mov	r5, r0
    9190:	mov	r0, r6
    9194:	ldr	r6, [r5]
    9198:	bl	8bc0 <recvmsg@plt>
    919c:	ldr	r2, [sp, #28]
    91a0:	str	r6, [r5]
    91a4:	ldr	r3, [r4]
    91a8:	cmp	r2, r3
    91ac:	mvn	r0, r0
    91b0:	lsr	r0, r0, #31
    91b4:	bne	91c0 <__assert_fail@plt+0x588>
    91b8:	add	sp, sp, #32
    91bc:	pop	{r4, r5, r6, pc}
    91c0:	bl	8adc <__stack_chk_fail@plt>
    91c4:			; <UNDEFINED> instruction: 0x0000feb4
    91c8:	andeq	r0, r0, r0, lsr #1
    91cc:	push	{r4, r5, r6, r7, r8, r9, lr}
    91d0:	sub	sp, sp, #12
    91d4:	mov	r5, r0
    91d8:	mov	r7, r1
    91dc:	ldr	r8, [sp, #40]	; 0x28
    91e0:	mov	r6, r2
    91e4:	mov	r9, r3
    91e8:	b	9214 <__assert_fail@plt+0x5dc>
    91ec:	str	r9, [sp]
    91f0:	str	r8, [sp, #4]
    91f4:	bl	8ba8 <sendto@plt>
    91f8:	mov	r4, r0
    91fc:	cmn	r4, #1
    9200:	bne	9248 <__assert_fail@plt+0x610>
    9204:	ldr	r0, [r5]
    9208:	bl	913c <__assert_fail@plt+0x504>
    920c:	cmp	r0, #0
    9210:	beq	9248 <__assert_fail@plt+0x610>
    9214:	cmp	r8, #0
    9218:	mov	r1, r7
    921c:	mov	r2, r6
    9220:	movw	r3, #16448	; 0x4040
    9224:	ldr	r0, [r5]
    9228:	bne	91ec <__assert_fail@plt+0x5b4>
    922c:	mov	r1, r7
    9230:	mov	r2, r6
    9234:	movw	r3, #16448	; 0x4040
    9238:	bl	8c20 <send@plt>
    923c:	mov	r4, r0
    9240:	cmn	r4, #1
    9244:	beq	9204 <__assert_fail@plt+0x5cc>
    9248:	mov	r0, r4
    924c:	add	sp, sp, #12
    9250:	pop	{r4, r5, r6, r7, r8, r9, pc}
    9254:	ldr	r3, [pc, #316]	; 9398 <__assert_fail@plt+0x760>
    9258:	ldr	ip, [pc, #316]	; 939c <__assert_fail@plt+0x764>
    925c:	add	r3, pc, r3
    9260:	push	{r4, r5, r6, r7, r8, r9, lr}
    9264:	sub	sp, sp, #20
    9268:	ldr	r6, [r3, ip]
    926c:	mov	r8, r1
    9270:	ldrh	r5, [r1]
    9274:	mov	r9, r0
    9278:	mov	r7, r2
    927c:	mov	r1, #2
    9280:	ldr	r3, [r6]
    9284:	mov	r2, #0
    9288:	mov	r0, r5
    928c:	str	r3, [sp, #12]
    9290:	bl	8be4 <socket@plt>
    9294:	cmn	r0, #1
    9298:	mov	r4, r0
    929c:	beq	938c <__assert_fail@plt+0x754>
    92a0:	mov	r1, #1
    92a4:	bl	8b60 <fcntl@plt>
    92a8:	mov	r1, #2
    92ac:	orr	r2, r0, #1
    92b0:	mov	r0, r4
    92b4:	bl	8b60 <fcntl@plt>
    92b8:	mov	r1, #3
    92bc:	mov	r0, r4
    92c0:	bl	8b60 <fcntl@plt>
    92c4:	mov	r1, #4
    92c8:	orr	r2, r0, #2048	; 0x800
    92cc:	mov	r0, r4
    92d0:	bl	8b60 <fcntl@plt>
    92d4:	cmp	r5, #2
    92d8:	mov	r3, #1
    92dc:	str	r3, [sp, #8]
    92e0:	beq	936c <__assert_fail@plt+0x734>
    92e4:	cmp	r5, #10
    92e8:	beq	9318 <__assert_fail@plt+0x6e0>
    92ec:	cmp	r7, #128	; 0x80
    92f0:	bls	933c <__assert_fail@plt+0x704>
    92f4:	mov	r0, r4
    92f8:	bl	8c14 <close@plt>
    92fc:	mov	r0, #3
    9300:	ldr	r2, [sp, #12]
    9304:	ldr	r3, [r6]
    9308:	cmp	r2, r3
    930c:	bne	9394 <__assert_fail@plt+0x75c>
    9310:	add	sp, sp, #20
    9314:	pop	{r4, r5, r6, r7, r8, r9, pc}
    9318:	mov	r3, #4
    931c:	mov	r0, r4
    9320:	str	r3, [sp]
    9324:	mov	r1, #41	; 0x29
    9328:	mov	r2, #25
    932c:	add	r3, sp, #8
    9330:	bl	8a88 <setsockopt@plt>
    9334:	cmp	r7, #128	; 0x80
    9338:	bhi	92f4 <__assert_fail@plt+0x6bc>
    933c:	mvn	r3, #0
    9340:	str	r4, [r9]
    9344:	str	r3, [r9, #4]
    9348:	mov	r1, r8
    934c:	str	r7, [r9, #8]
    9350:	mov	r2, r7
    9354:	add	r0, r9, #12
    9358:	bl	8ab8 <memcpy@plt>
    935c:	ldr	r3, [r9]
    9360:	mov	r0, #0
    9364:	str	r3, [r9, #4]
    9368:	b	9300 <__assert_fail@plt+0x6c8>
    936c:	mov	r3, #4
    9370:	mov	r0, r4
    9374:	str	r3, [sp]
    9378:	mov	r1, #0
    937c:	mov	r2, #11
    9380:	add	r3, sp, #8
    9384:	bl	8a88 <setsockopt@plt>
    9388:	b	92ec <__assert_fail@plt+0x6b4>
    938c:	mov	r0, #1
    9390:	b	9300 <__assert_fail@plt+0x6c8>
    9394:	bl	8adc <__stack_chk_fail@plt>
    9398:	muleq	r0, ip, sp
    939c:	andeq	r0, r0, r0, lsr #1
    93a0:	push	{r4, r5, lr}
    93a4:	sub	sp, sp, #12
    93a8:	mov	ip, #1
    93ac:	mov	r5, r0
    93b0:	str	ip, [sp]
    93b4:	mov	r4, r1
    93b8:	bl	a780 <__assert_fail@plt+0x1b48>
    93bc:	mov	r2, #0
    93c0:	mov	r0, r5
    93c4:	mov	r1, r4
    93c8:	mov	r3, r2
    93cc:	add	sp, sp, #12
    93d0:	pop	{r4, r5, lr}
    93d4:	b	ab94 <__assert_fail@plt+0x1f5c>
    93d8:	ldr	ip, [pc, #404]	; 9574 <__assert_fail@plt+0x93c>
    93dc:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    93e0:	mov	r8, r1
    93e4:	ldr	r1, [pc, #396]	; 9578 <__assert_fail@plt+0x940>
    93e8:	add	ip, pc, ip
    93ec:	sub	sp, sp, #8
    93f0:	mov	r9, r3
    93f4:	mvn	r3, #0
    93f8:	mov	r7, r2
    93fc:	ldr	r4, [ip, r1]
    9400:	mov	r6, r0
    9404:	str	r3, [sp]
    9408:	ldr	sl, [sp, #40]	; 0x28
    940c:	ldr	r3, [r4]
    9410:	str	r3, [sp, #4]
    9414:	bl	be18 <__assert_fail@plt+0x31e0>
    9418:	cmp	r0, #1
    941c:	mov	r5, r0
    9420:	beq	9440 <__assert_fail@plt+0x808>
    9424:	mov	r0, #2
    9428:	ldr	r2, [sp, #4]
    942c:	ldr	r3, [r4]
    9430:	cmp	r2, r3
    9434:	bne	9570 <__assert_fail@plt+0x938>
    9438:	add	sp, sp, #8
    943c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9440:	mov	r0, r6
    9444:	bl	be4c <__assert_fail@plt+0x3214>
    9448:	cmp	r0, #1
    944c:	bls	9424 <__assert_fail@plt+0x7ec>
    9450:	cmp	r0, #3
    9454:	mov	r0, r6
    9458:	bne	94cc <__assert_fail@plt+0x894>
    945c:	mov	r1, sp
    9460:	bl	b7a8 <__assert_fail@plt+0x2b70>
    9464:	cmp	r0, #0
    9468:	bne	9424 <__assert_fail@plt+0x7ec>
    946c:	ldr	r0, [pc, #264]	; 957c <__assert_fail@plt+0x944>
    9470:	ldr	r1, [sp]
    9474:	add	r0, pc, r0
    9478:	bl	c62c <__assert_fail@plt+0x39f4>
    947c:	ldr	r3, [sp]
    9480:	sub	r3, r3, #300	; 0x12c
    9484:	cmp	r3, #99	; 0x63
    9488:	movhi	r0, r5
    948c:	bhi	9428 <__assert_fail@plt+0x7f0>
    9490:	cmp	r9, #0
    9494:	cmpne	sl, #0
    9498:	mov	r0, r6
    949c:	beq	954c <__assert_fail@plt+0x914>
    94a0:	mov	r2, r9
    94a4:	mov	r3, sl
    94a8:	movw	r1, #32803	; 0x8023
    94ac:	bl	b5d0 <__assert_fail@plt+0x2998>
    94b0:	cmp	r0, #0
    94b4:	bne	955c <__assert_fail@plt+0x924>
    94b8:	ldr	r0, [pc, #192]	; 9580 <__assert_fail@plt+0x948>
    94bc:	add	r0, pc, r0
    94c0:	bl	c62c <__assert_fail@plt+0x39f4>
    94c4:	mov	r0, #3
    94c8:	b	9428 <__assert_fail@plt+0x7f0>
    94cc:	bl	b268 <__assert_fail@plt+0x2630>
    94d0:	mov	r1, r0
    94d4:	ldr	r0, [pc, #168]	; 9584 <__assert_fail@plt+0x94c>
    94d8:	add	r0, pc, r0
    94dc:	bl	c62c <__assert_fail@plt+0x39f4>
    94e0:	mov	r1, #32
    94e4:	mov	r0, r6
    94e8:	mov	r2, r8
    94ec:	mov	r3, r7
    94f0:	bl	b738 <__assert_fail@plt+0x2b00>
    94f4:	subs	r1, r0, #0
    94f8:	beq	9524 <__assert_fail@plt+0x8ec>
    94fc:	ldr	r0, [pc, #132]	; 9588 <__assert_fail@plt+0x950>
    9500:	add	r0, pc, r0
    9504:	bl	c62c <__assert_fail@plt+0x39f4>
    9508:	mov	r1, r5
    950c:	mov	r0, r6
    9510:	mov	r2, r8
    9514:	mov	r3, r7
    9518:	bl	b5d0 <__assert_fail@plt+0x2998>
    951c:	subs	r1, r0, #0
    9520:	bne	9538 <__assert_fail@plt+0x900>
    9524:	ldr	r0, [pc, #96]	; 958c <__assert_fail@plt+0x954>
    9528:	add	r0, pc, r0
    952c:	bl	c62c <__assert_fail@plt+0x39f4>
    9530:	mov	r0, #0
    9534:	b	9428 <__assert_fail@plt+0x7f0>
    9538:	ldr	r0, [pc, #80]	; 9590 <__assert_fail@plt+0x958>
    953c:	add	r0, pc, r0
    9540:	bl	c62c <__assert_fail@plt+0x39f4>
    9544:	mov	r0, r5
    9548:	b	9428 <__assert_fail@plt+0x7f0>
    954c:	movw	r1, #32803	; 0x8023
    9550:	bl	be74 <__assert_fail@plt+0x323c>
    9554:	cmp	r0, #0
    9558:	bne	94b8 <__assert_fail@plt+0x880>
    955c:	ldr	r0, [pc, #48]	; 9594 <__assert_fail@plt+0x95c>
    9560:	add	r0, pc, r0
    9564:	bl	c62c <__assert_fail@plt+0x39f4>
    9568:	mov	r0, #1
    956c:	b	9428 <__assert_fail@plt+0x7f0>
    9570:	bl	8adc <__stack_chk_fail@plt>
    9574:	andeq	pc, r0, r0, lsl ip	; <UNPREDICTABLE>
    9578:	andeq	r0, r0, r0, lsr #1
    957c:	andeq	r6, r0, ip, ror #10
    9580:	andeq	r6, r0, r4, lsl #11
    9584:	andeq	r6, r0, r0, lsl #11
    9588:	andeq	r6, r0, r8, ror r5
    958c:	andeq	r6, r0, r4, lsl #11
    9590:	andeq	r6, r0, r8, asr r5
    9594:	andeq	r6, r0, ip, lsr #9
    9598:	push	{r4, r5, lr}
    959c:	sub	sp, sp, #12
    95a0:	mov	ip, #1
    95a4:	mov	r5, r0
    95a8:	str	ip, [sp]
    95ac:	mov	r4, r1
    95b0:	bl	a884 <__assert_fail@plt+0x1c4c>
    95b4:	mov	r2, #0
    95b8:	mov	r0, r5
    95bc:	mov	r1, r4
    95c0:	mov	r3, r2
    95c4:	add	sp, sp, #12
    95c8:	pop	{r4, r5, lr}
    95cc:	b	ab94 <__assert_fail@plt+0x1f5c>
    95d0:	ldr	ip, [pc, #996]	; 99bc <__assert_fail@plt+0xd84>
    95d4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    95d8:	sub	sp, sp, #140288	; 0x22400
    95dc:	ldr	lr, [pc, #988]	; 99c0 <__assert_fail@plt+0xd88>
    95e0:	sub	sp, sp, #868	; 0x364
    95e4:	add	ip, pc, ip
    95e8:	ldr	r6, [pc, #980]	; 99c4 <__assert_fail@plt+0xd8c>
    95ec:	str	r2, [sp, #32]
    95f0:	mov	r5, r1
    95f4:	ldr	lr, [ip, lr]
    95f8:	add	r6, pc, r6
    95fc:	add	r1, r6, #16
    9600:	add	r6, sp, #140288	; 0x22400
    9604:	add	r7, sp, #864	; 0x360
    9608:	movw	fp, #55504	; 0xd8d0
    960c:	add	r6, r6, #864	; 0x360
    9610:	movt	fp, #65533	; 0xfffd
    9614:	sub	sl, r7, #436	; 0x1b4
    9618:	str	lr, [sp, #20]
    961c:	ldr	lr, [lr]
    9620:	mov	r2, #0
    9624:	mov	ip, #128	; 0x80
    9628:	str	ip, [r6, fp]
    962c:	add	ip, sp, #139264	; 0x22000
    9630:	str	r3, [sp, #36]	; 0x24
    9634:	mov	r4, r0
    9638:	mov	r3, r2
    963c:	mov	r0, sl
    9640:	str	lr, [ip, #1884]	; 0x75c
    9644:	bl	9d70 <__assert_fail@plt+0x1138>
    9648:	add	r3, sp, #10048	; 0x2740
    964c:	add	r3, r3, #32
    9650:	add	r2, sp, #9984	; 0x2700
    9654:	sub	r3, r3, #36	; 0x24
    9658:	mov	r0, sl
    965c:	str	r3, [sp, #16]
    9660:	sub	r1, r7, #784	; 0x310
    9664:	mov	r3, #16
    9668:	add	r2, r2, #60	; 0x3c
    966c:	movt	r3, #1
    9670:	bl	93a0 <__assert_fail@plt+0x768>
    9674:	cmp	r5, #15
    9678:	str	r0, [sp, #28]
    967c:	bhi	96b4 <__assert_fail@plt+0xa7c>
    9680:	ldr	r0, [pc, #832]	; 99c8 <__assert_fail@plt+0xd90>
    9684:	add	r0, pc, r0
    9688:	bl	c62c <__assert_fail@plt+0x39f4>
    968c:	mov	r0, #1
    9690:	ldr	r6, [sp, #20]
    9694:	add	r3, sp, #139264	; 0x22000
    9698:	ldr	r2, [r3, #1884]	; 0x75c
    969c:	ldr	r3, [r6]
    96a0:	cmp	r2, r3
    96a4:	bne	9994 <__assert_fail@plt+0xd5c>
    96a8:	add	sp, sp, #140288	; 0x22400
    96ac:	add	sp, sp, #868	; 0x364
    96b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    96b4:	mov	r1, r4
    96b8:	mov	r2, r5
    96bc:	add	r0, sp, #288	; 0x120
    96c0:	sub	r6, r7, #576	; 0x240
    96c4:	str	r6, [sp, #24]
    96c8:	bl	9254 <__assert_fail@plt+0x61c>
    96cc:	cmp	r0, #0
    96d0:	bne	9680 <__assert_fail@plt+0xa48>
    96d4:	ldr	ip, [sp, #296]	; 0x128
    96d8:	add	r1, sp, #9984	; 0x2700
    96dc:	add	r0, sp, #288	; 0x120
    96e0:	add	r1, r1, #60	; 0x3c
    96e4:	ldr	r2, [sp, #28]
    96e8:	sub	r3, r7, #564	; 0x234
    96ec:	str	ip, [sp]
    96f0:	bl	91cc <__assert_fail@plt+0x594>
    96f4:	cmn	r0, #1
    96f8:	blt	98c4 <__assert_fail@plt+0xc8c>
    96fc:	sub	r6, r7, #804	; 0x324
    9700:	ldr	ip, [pc, #708]	; 99cc <__assert_fail@plt+0xd94>
    9704:	mov	r1, #600	; 0x258
    9708:	mov	r2, #3
    970c:	mov	r0, r6
    9710:	add	ip, pc, ip
    9714:	str	ip, [sp, #44]	; 0x2c
    9718:	bl	9af0 <__assert_fail@plt+0xeb8>
    971c:	mov	r0, r6
    9720:	add	r8, sp, #74752	; 0x12400
    9724:	bl	9b2c <__assert_fail@plt+0xef4>
    9728:	add	r8, r8, #864	; 0x360
    972c:	movw	r9, #55508	; 0xd8d4
    9730:	movw	r5, #55744	; 0xd9c0
    9734:	sub	r8, r8, #20
    9738:	movt	r9, #65533	; 0xfffd
    973c:	add	r4, sp, #52	; 0x34
    9740:	movt	r5, #65533	; 0xfffd
    9744:	mov	r1, r0
    9748:	ldr	r0, [pc, #640]	; 99d0 <__assert_fail@plt+0xd98>
    974c:	add	r0, pc, r0
    9750:	bl	c62c <__assert_fail@plt+0x39f4>
    9754:	mov	r0, r6
    9758:	bl	9b2c <__assert_fail@plt+0xef4>
    975c:	mov	r3, #1
    9760:	mov	r1, #0
    9764:	str	r1, [r4, #4]
    9768:	mov	r1, r3
    976c:	strh	r3, [r4, #4]
    9770:	mov	r2, r0
    9774:	add	r0, sp, #140288	; 0x22400
    9778:	add	r0, r0, #864	; 0x360
    977c:	ldr	ip, [r0, r5]
    9780:	str	ip, [r0, r9]
    9784:	mov	r0, r4
    9788:	bl	8ae8 <poll@plt>
    978c:	cmp	r0, #0
    9790:	ble	9830 <__assert_fail@plt+0xbf8>
    9794:	add	r1, sp, #140288	; 0x22400
    9798:	mov	r2, #16
    979c:	add	r1, r1, #864	; 0x360
    97a0:	movt	r2, #1
    97a4:	movw	r3, #16448	; 0x4040
    97a8:	ldr	r0, [r1, r5]
    97ac:	mov	r1, r8
    97b0:	bl	8c08 <recv@plt>
    97b4:	cmn	r0, #1
    97b8:	beq	9860 <__assert_fail@plt+0xc28>
    97bc:	cmp	r0, #0
    97c0:	blt	9754 <__assert_fail@plt+0xb1c>
    97c4:	sub	fp, r7, #744	; 0x2e8
    97c8:	mov	r2, #0
    97cc:	mov	r3, r0
    97d0:	str	r2, [sp]
    97d4:	str	r2, [sp, #4]
    97d8:	mov	r0, sl
    97dc:	mov	r1, fp
    97e0:	mov	r2, r8
    97e4:	bl	9ec4 <__assert_fail@plt+0x128c>
    97e8:	cmp	r0, #8
    97ec:	beq	993c <__assert_fail@plt+0xd04>
    97f0:	cmp	r0, #0
    97f4:	bne	9754 <__assert_fail@plt+0xb1c>
    97f8:	sub	r2, r7, #816	; 0x330
    97fc:	mov	r0, fp
    9800:	str	r2, [sp]
    9804:	add	r3, sp, #160	; 0xa0
    9808:	ldr	r1, [sp, #32]
    980c:	sub	ip, r7, #704	; 0x2c0
    9810:	ldr	r2, [sp, #36]	; 0x24
    9814:	str	ip, [sp, #40]	; 0x28
    9818:	bl	93d8 <__assert_fail@plt+0x7a0>
    981c:	cmp	r0, #3
    9820:	beq	98d8 <__assert_fail@plt+0xca0>
    9824:	cmp	r0, #2
    9828:	beq	9754 <__assert_fail@plt+0xb1c>
    982c:	b	9690 <__assert_fail@plt+0xa58>
    9830:	mov	r0, r6
    9834:	bl	9bcc <__assert_fail@plt+0xf94>
    9838:	cmp	r0, #1
    983c:	mov	fp, r0
    9840:	beq	9874 <__assert_fail@plt+0xc3c>
    9844:	cmp	r0, #2
    9848:	bne	9794 <__assert_fail@plt+0xb5c>
    984c:	ldr	r0, [pc, #384]	; 99d4 <__assert_fail@plt+0xd9c>
    9850:	add	r0, pc, r0
    9854:	bl	c62c <__assert_fail@plt+0x39f4>
    9858:	mov	r0, #4
    985c:	b	9690 <__assert_fail@plt+0xa58>
    9860:	add	r3, sp, #140288	; 0x22400
    9864:	add	r3, r3, #864	; 0x360
    9868:	ldr	r0, [r3, r5]
    986c:	bl	913c <__assert_fail@plt+0x504>
    9870:	b	9754 <__assert_fail@plt+0xb1c>
    9874:	mov	r0, r6
    9878:	bl	9b2c <__assert_fail@plt+0xef4>
    987c:	mov	r1, r0
    9880:	ldr	r0, [sp, #44]	; 0x2c
    9884:	bl	c62c <__assert_fail@plt+0x39f4>
    9888:	ldr	ip, [sp, #296]	; 0x128
    988c:	add	r1, sp, #9984	; 0x2700
    9890:	add	r0, sp, #288	; 0x120
    9894:	add	r1, r1, #60	; 0x3c
    9898:	ldr	r2, [sp, #28]
    989c:	sub	r3, r7, #564	; 0x234
    98a0:	str	ip, [sp]
    98a4:	bl	91cc <__assert_fail@plt+0x594>
    98a8:	cmn	r0, #1
    98ac:	bge	9754 <__assert_fail@plt+0xb1c>
    98b0:	ldr	r0, [pc, #288]	; 99d8 <__assert_fail@plt+0xda0>
    98b4:	add	r0, pc, r0
    98b8:	bl	c62c <__assert_fail@plt+0x39f4>
    98bc:	mov	r0, fp
    98c0:	b	9690 <__assert_fail@plt+0xa58>
    98c4:	ldr	r0, [pc, #272]	; 99dc <__assert_fail@plt+0xda4>
    98c8:	add	r0, pc, r0
    98cc:	bl	c62c <__assert_fail@plt+0x39f4>
    98d0:	mov	r0, #1
    98d4:	b	9690 <__assert_fail@plt+0xa58>
    98d8:	bl	8b6c <__errno_location@plt>
    98dc:	mov	r3, r0
    98e0:	add	r0, sp, #140288	; 0x22400
    98e4:	add	r0, r0, #864	; 0x360
    98e8:	ldr	r1, [r3]
    98ec:	ldr	r2, [r0, r5]
    98f0:	cmn	r2, #1
    98f4:	beq	9998 <__assert_fail@plt+0xd60>
    98f8:	ldr	r0, [sp, #292]	; 0x124
    98fc:	cmn	r0, #1
    9900:	beq	9918 <__assert_fail@plt+0xce0>
    9904:	str	r1, [sp, #8]
    9908:	str	r3, [sp, #12]
    990c:	bl	8c14 <close@plt>
    9910:	ldr	r3, [sp, #12]
    9914:	ldr	r1, [sp, #8]
    9918:	ldr	r2, [sp, #48]	; 0x30
    991c:	str	r1, [r3]
    9920:	add	r1, sp, #140288	; 0x22400
    9924:	add	r1, r1, #864	; 0x360
    9928:	cmp	r2, #15
    992c:	mvn	r3, #0
    9930:	str	r3, [sp, #292]	; 0x124
    9934:	str	r3, [r1, r5]
    9938:	bhi	9944 <__assert_fail@plt+0xd0c>
    993c:	mov	r0, #1
    9940:	b	9690 <__assert_fail@plt+0xa58>
    9944:	add	r1, sp, #160	; 0xa0
    9948:	add	r0, sp, #288	; 0x120
    994c:	bl	9254 <__assert_fail@plt+0x61c>
    9950:	cmp	r0, #0
    9954:	bne	993c <__assert_fail@plt+0xd04>
    9958:	ldr	ip, [sp, #296]	; 0x128
    995c:	add	r1, sp, #9984	; 0x2700
    9960:	add	r0, sp, #288	; 0x120
    9964:	add	r1, r1, #60	; 0x3c
    9968:	ldr	r2, [sp, #28]
    996c:	sub	r3, r7, #564	; 0x234
    9970:	str	ip, [sp]
    9974:	bl	91cc <__assert_fail@plt+0x594>
    9978:	cmn	r0, #1
    997c:	blt	993c <__assert_fail@plt+0xd04>
    9980:	mov	r0, r6
    9984:	mov	r1, #600	; 0x258
    9988:	mov	r2, #3
    998c:	bl	9af0 <__assert_fail@plt+0xeb8>
    9990:	b	9754 <__assert_fail@plt+0xb1c>
    9994:	bl	8adc <__stack_chk_fail@plt>
    9998:	ldr	r3, [pc, #64]	; 99e0 <__assert_fail@plt+0xda8>
    999c:	mov	r2, #312	; 0x138
    99a0:	ldr	r0, [pc, #60]	; 99e4 <__assert_fail@plt+0xdac>
    99a4:	ldr	r1, [pc, #60]	; 99e8 <__assert_fail@plt+0xdb0>
    99a8:	add	r3, pc, r3
    99ac:	add	r0, pc, r0
    99b0:	add	r3, r3, #96	; 0x60
    99b4:	add	r1, pc, r1
    99b8:	bl	8c38 <__assert_fail@plt>
    99bc:	andeq	pc, r0, r4, lsl sl	; <UNPREDICTABLE>
    99c0:	andeq	r0, r0, r0, lsr #1
    99c4:	andeq	r6, r0, r4, ror #6
    99c8:	andeq	r6, r0, r0, asr #8
    99cc:	andeq	r6, r0, r0, ror r4
    99d0:	andeq	r6, r0, r4, ror #7
    99d4:	andeq	r6, r0, ip, lsl #6
    99d8:	strdeq	r6, [r0], -ip
    99dc:	andeq	r6, r0, r4, lsr r2
    99e0:			; <UNDEFINED> instruction: 0x00005fb4
    99e4:	andeq	r6, r0, r8, lsr r2
    99e8:	andeq	r6, r0, ip, lsl r0
    99ec:	ldr	r3, [pc, #128]	; 9a74 <__assert_fail@plt+0xe3c>
    99f0:	ldr	r2, [pc, #128]	; 9a78 <__assert_fail@plt+0xe40>
    99f4:	add	r3, pc, r3
    99f8:	push	{r4, r5, lr}
    99fc:	sub	sp, sp, #20
    9a00:	ldr	r4, [r3, r2]
    9a04:	mov	r5, r0
    9a08:	add	r1, sp, #4
    9a0c:	mov	r0, #1
    9a10:	ldr	r3, [r4]
    9a14:	str	r3, [sp, #12]
    9a18:	bl	8bf0 <clock_gettime@plt>
    9a1c:	cmp	r0, #0
    9a20:	bne	9a60 <__assert_fail@plt+0xe28>
    9a24:	ldr	r3, [sp, #8]
    9a28:	movw	r2, #19923	; 0x4dd3
    9a2c:	movt	r2, #4194	; 0x1062
    9a30:	ldr	r1, [sp, #4]
    9a34:	smull	r0, r2, r2, r3
    9a38:	asr	r3, r3, #31
    9a3c:	str	r1, [r5]
    9a40:	rsb	r3, r3, r2, asr #6
    9a44:	str	r3, [r5, #4]
    9a48:	ldr	r2, [sp, #12]
    9a4c:	ldr	r3, [r4]
    9a50:	cmp	r2, r3
    9a54:	bne	9a70 <__assert_fail@plt+0xe38>
    9a58:	add	sp, sp, #20
    9a5c:	pop	{r4, r5, pc}
    9a60:	mov	r0, r5
    9a64:	mov	r1, #0
    9a68:	bl	8b00 <gettimeofday@plt>
    9a6c:	b	9a48 <__assert_fail@plt+0xe10>
    9a70:	bl	8adc <__stack_chk_fail@plt>
    9a74:	andeq	pc, r0, r4, lsl #12
    9a78:	andeq	r0, r0, r0, lsr #1
    9a7c:	push	{r4, lr}
    9a80:	sub	sp, sp, #8
    9a84:	mov	r4, r0
    9a88:	mov	r2, #1000	; 0x3e8
    9a8c:	mov	r0, sp
    9a90:	bl	8c2c <div@plt>
    9a94:	ldr	r2, [r4, #4]
    9a98:	ldr	r3, [sp, #4]
    9a9c:	mov	r0, #1000	; 0x3e8
    9aa0:	movw	ip, #16960	; 0x4240
    9aa4:	movt	ip, #15
    9aa8:	ldr	r1, [r4]
    9aac:	mla	r3, r0, r3, r2
    9ab0:	ldr	r2, [sp]
    9ab4:	add	r2, r1, r2
    9ab8:	str	r2, [r4]
    9abc:	cmp	r3, ip
    9ac0:	str	r3, [r4, #4]
    9ac4:	ble	9ae8 <__assert_fail@plt+0xeb0>
    9ac8:	add	r2, r2, #1
    9acc:	sub	r3, r3, #999424	; 0xf4000
    9ad0:	mov	r1, r2
    9ad4:	sub	r3, r3, #576	; 0x240
    9ad8:	add	r2, r2, #1
    9adc:	cmp	r3, ip
    9ae0:	bgt	9acc <__assert_fail@plt+0xe94>
    9ae4:	stm	r4, {r1, r3}
    9ae8:	add	sp, sp, #8
    9aec:	pop	{r4, pc}
    9af0:	push	{r4, r5, r6, lr}
    9af4:	mov	r4, r0
    9af8:	mov	r5, r1
    9afc:	mov	r6, r2
    9b00:	bl	99ec <__assert_fail@plt+0xdb4>
    9b04:	str	r6, [r4, #16]
    9b08:	mov	r1, r5
    9b0c:	str	r5, [r4, #8]
    9b10:	mov	r3, #0
    9b14:	mov	r0, r4
    9b18:	str	r3, [r4, #12]
    9b1c:	pop	{r4, r5, r6, lr}
    9b20:	b	9a7c <__assert_fail@plt+0xe44>
    9b24:	mov	r2, #0
    9b28:	b	9af0 <__assert_fail@plt+0xeb8>
    9b2c:	ldr	r3, [pc, #144]	; 9bc4 <__assert_fail@plt+0xf8c>
    9b30:	ldr	r2, [pc, #144]	; 9bc8 <__assert_fail@plt+0xf90>
    9b34:	add	r3, pc, r3
    9b38:	push	{r4, r5, lr}
    9b3c:	sub	sp, sp, #20
    9b40:	ldr	r4, [r3, r2]
    9b44:	mov	r5, r0
    9b48:	add	r0, sp, #4
    9b4c:	ldr	r3, [r4]
    9b50:	str	r3, [sp, #12]
    9b54:	bl	99ec <__assert_fail@plt+0xdb4>
    9b58:	ldr	r2, [r5]
    9b5c:	ldr	r3, [sp, #4]
    9b60:	cmp	r3, r2
    9b64:	movgt	r0, #0
    9b68:	bgt	9ba8 <__assert_fail@plt+0xf70>
    9b6c:	subs	r3, r2, r3
    9b70:	ldr	ip, [r5, #4]
    9b74:	ldr	r2, [sp, #8]
    9b78:	bne	9b88 <__assert_fail@plt+0xf50>
    9b7c:	cmp	r2, ip
    9b80:	movge	r0, r3
    9b84:	bge	9ba8 <__assert_fail@plt+0xf70>
    9b88:	rsb	ip, r2, ip
    9b8c:	movw	r1, #19923	; 0x4dd3
    9b90:	movt	r1, #4194	; 0x1062
    9b94:	mov	r0, #1000	; 0x3e8
    9b98:	asr	r2, ip, #31
    9b9c:	smull	r5, r1, r1, ip
    9ba0:	rsb	r1, r2, r1, asr #6
    9ba4:	mla	r0, r0, r3, r1
    9ba8:	ldr	r1, [sp, #12]
    9bac:	ldr	r3, [r4]
    9bb0:	cmp	r1, r3
    9bb4:	bne	9bc0 <__assert_fail@plt+0xf88>
    9bb8:	add	sp, sp, #20
    9bbc:	pop	{r4, r5, pc}
    9bc0:	bl	8adc <__stack_chk_fail@plt>
    9bc4:	andeq	pc, r0, r4, asr #9
    9bc8:	andeq	r0, r0, r0, lsr #1
    9bcc:	push	{r4, lr}
    9bd0:	mov	r4, r0
    9bd4:	bl	9b2c <__assert_fail@plt+0xef4>
    9bd8:	cmp	r0, #0
    9bdc:	bne	9bf8 <__assert_fail@plt+0xfc0>
    9be0:	ldr	r2, [r4, #12]
    9be4:	ldr	r3, [r4, #16]
    9be8:	cmp	r2, r3
    9bec:	bcc	9c00 <__assert_fail@plt+0xfc8>
    9bf0:	mov	r0, #2
    9bf4:	pop	{r4, pc}
    9bf8:	mov	r0, #0
    9bfc:	pop	{r4, pc}
    9c00:	ldr	r1, [r4, #8]
    9c04:	mov	r0, r4
    9c08:	lsl	r1, r1, #1
    9c0c:	str	r1, [r4, #8]
    9c10:	bl	9a7c <__assert_fail@plt+0xe44>
    9c14:	ldr	r3, [r4, #12]
    9c18:	mov	r0, #1
    9c1c:	add	r3, r3, r0
    9c20:	str	r3, [r4, #12]
    9c24:	pop	{r4, pc}
    9c28:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9c2c:	sub	sp, sp, #20
    9c30:	mov	r8, r0
    9c34:	mov	r0, r1
    9c38:	mov	r6, r1
    9c3c:	str	r2, [sp, #8]
    9c40:	str	r3, [sp, #4]
    9c44:	bl	b268 <__assert_fail@plt+0x2630>
    9c48:	cmp	r0, #20
    9c4c:	str	r0, [sp]
    9c50:	bls	9d60 <__assert_fail@plt+0x1128>
    9c54:	ldr	r3, [sp, #4]
    9c58:	cmp	r3, #0
    9c5c:	beq	9d60 <__assert_fail@plt+0x1128>
    9c60:	ldr	r3, [pc, #256]	; 9d68 <__assert_fail@plt+0x1130>
    9c64:	mov	r4, #20
    9c68:	mov	r7, #0
    9c6c:	movw	fp, #9608	; 0x2588
    9c70:	add	r3, pc, r3
    9c74:	str	r3, [sp, #12]
    9c78:	ldr	r0, [r6, #4]
    9c7c:	add	r2, r4, #2
    9c80:	add	r0, r0, r2
    9c84:	bl	c4d0 <__assert_fail@plt+0x3898>
    9c88:	mov	sl, r0
    9c8c:	ldr	r0, [r6, #4]
    9c90:	mov	r9, sl
    9c94:	add	r0, r0, r4
    9c98:	bl	c4d0 <__assert_fail@plt+0x3898>
    9c9c:	mov	r5, r0
    9ca0:	bl	bec8 <__assert_fail@plt+0x3290>
    9ca4:	cmp	r0, #0
    9ca8:	bne	9d08 <__assert_fail@plt+0x10d0>
    9cac:	movw	r3, #9604	; 0x2584
    9cb0:	ldr	r1, [r8, r3]
    9cb4:	ldrh	r2, [r1]
    9cb8:	cmp	r2, #0
    9cbc:	beq	9ce0 <__assert_fail@plt+0x10a8>
    9cc0:	cmp	r5, r2
    9cc4:	bne	9cd4 <__assert_fail@plt+0x109c>
    9cc8:	b	9d08 <__assert_fail@plt+0x10d0>
    9ccc:	cmp	r5, r3
    9cd0:	beq	9d08 <__assert_fail@plt+0x10d0>
    9cd4:	ldrh	r3, [r1, #2]!
    9cd8:	cmp	r3, #0
    9cdc:	bne	9ccc <__assert_fail@plt+0x1094>
    9ce0:	mov	r1, r5
    9ce4:	mov	r2, sl
    9ce8:	ldr	r0, [sp, #12]
    9cec:	bl	c62c <__assert_fail@plt+0x39f4>
    9cf0:	ldr	r3, [sp, #8]
    9cf4:	lsl	r2, r7, #1
    9cf8:	add	r7, r7, #1
    9cfc:	lsl	r1, r5, #8
    9d00:	orr	r5, r1, r5, lsr #8
    9d04:	strh	r5, [r3, r2]
    9d08:	ldr	r2, [r8, fp]
    9d0c:	tst	r2, #128	; 0x80
    9d10:	beq	9d50 <__assert_fail@plt+0x1118>
    9d14:	add	r9, r9, #4
    9d18:	ldr	r3, [sp]
    9d1c:	add	r4, r4, r9
    9d20:	cmp	r4, r3
    9d24:	bcs	9d34 <__assert_fail@plt+0x10fc>
    9d28:	ldr	r3, [sp, #4]
    9d2c:	cmp	r7, r3
    9d30:	bcc	9c78 <__assert_fail@plt+0x1040>
    9d34:	ldr	r0, [pc, #48]	; 9d6c <__assert_fail@plt+0x1134>
    9d38:	mov	r1, r7
    9d3c:	add	r0, pc, r0
    9d40:	bl	c62c <__assert_fail@plt+0x39f4>
    9d44:	mov	r0, r7
    9d48:	add	sp, sp, #20
    9d4c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9d50:	mov	r0, sl
    9d54:	bl	c4c4 <__assert_fail@plt+0x388c>
    9d58:	mov	r9, r0
    9d5c:	b	9d14 <__assert_fail@plt+0x10dc>
    9d60:	mov	r7, #0
    9d64:	b	9d34 <__assert_fail@plt+0x10fc>
    9d68:			; <UNDEFINED> instruction: 0x00005fb0
    9d6c:			; <UNDEFINED> instruction: 0x00005eb8
    9d70:	push	{r4, r5, r6, r7, r8, r9}
    9d74:	mov	r6, #0
    9d78:	movw	r9, #9604	; 0x2584
    9d7c:	movw	r8, #9608	; 0x2588
    9d80:	movw	r7, #9612	; 0x258c
    9d84:	mov	r4, r0
    9d88:	mov	r5, r6
    9d8c:	mov	ip, #200	; 0xc8
    9d90:	str	r2, [r0]
    9d94:	str	r1, [r0, r9]
    9d98:	str	r3, [r0, r8]
    9d9c:	str	r6, [r0, r7]
    9da0:	subs	ip, ip, #1
    9da4:	strb	r5, [r4, #49]	; 0x31
    9da8:	add	r4, r4, #48	; 0x30
    9dac:	bne	9da0 <__assert_fail@plt+0x1168>
    9db0:	pop	{r4, r5, r6, r7, r8, r9}
    9db4:	bx	lr
    9db8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
    9dbc:	mov	r7, r2
    9dc0:	ldr	r4, [sp, #40]	; 0x28
    9dc4:	mov	r5, r3
    9dc8:	cmp	r4, #0
    9dcc:	beq	9eac <__assert_fail@plt+0x1274>
    9dd0:	ldr	r3, [r4]
    9dd4:	cmp	r3, #0
    9dd8:	beq	9eac <__assert_fail@plt+0x1274>
    9ddc:	ldr	sl, [pc, #208]	; 9eb4 <__assert_fail@plt+0x127c>
    9de0:	add	r6, r4, #16
    9de4:	ldr	r9, [pc, #204]	; 9eb8 <__assert_fail@plt+0x1280>
    9de8:	ldr	r8, [pc, #204]	; 9ebc <__assert_fail@plt+0x1284>
    9dec:	add	sl, pc, sl
    9df0:	add	r9, pc, r9
    9df4:	add	r8, pc, r8
    9df8:	b	9e0c <__assert_fail@plt+0x11d4>
    9dfc:	mov	r4, r6
    9e00:	ldr	r3, [r6], #16
    9e04:	cmp	r3, #0
    9e08:	beq	9eac <__assert_fail@plt+0x1274>
    9e0c:	mov	r0, sl
    9e10:	bl	c62c <__assert_fail@plt+0x39f4>
    9e14:	mov	r0, r7
    9e18:	mov	r1, r5
    9e1c:	bl	c6b8 <__assert_fail@plt+0x3a80>
    9e20:	mov	r0, r9
    9e24:	mov	r1, r5
    9e28:	bl	c62c <__assert_fail@plt+0x39f4>
    9e2c:	ldm	r4, {r0, r1}
    9e30:	bl	c6b8 <__assert_fail@plt+0x3a80>
    9e34:	ldr	r1, [r4]
    9e38:	mov	r2, r5
    9e3c:	mov	r0, r7
    9e40:	bl	8ad0 <memcmp@plt>
    9e44:	ldr	r1, [r4, #4]
    9e48:	mov	r2, r0
    9e4c:	mov	r0, r8
    9e50:	bl	c62c <__assert_fail@plt+0x39f4>
    9e54:	ldr	r3, [r4, #4]
    9e58:	cmp	r3, r5
    9e5c:	bne	9dfc <__assert_fail@plt+0x11c4>
    9e60:	mov	r0, r7
    9e64:	ldr	r1, [r4]
    9e68:	mov	r2, r5
    9e6c:	bl	8ad0 <memcmp@plt>
    9e70:	cmp	r0, #0
    9e74:	bne	9dfc <__assert_fail@plt+0x11c4>
    9e78:	ldr	r3, [r4, #8]
    9e7c:	ldr	r2, [sp, #32]
    9e80:	ldr	r0, [pc, #56]	; 9ec0 <__assert_fail@plt+0x1288>
    9e84:	str	r3, [r2]
    9e88:	add	r0, pc, r0
    9e8c:	ldr	r3, [r4, #12]
    9e90:	ldr	r2, [sp, #36]	; 0x24
    9e94:	str	r3, [r2]
    9e98:	ldr	r3, [sp, #32]
    9e9c:	ldr	r1, [r3]
    9ea0:	bl	c62c <__assert_fail@plt+0x39f4>
    9ea4:	mov	r0, #1
    9ea8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9eac:	mov	r0, #0
    9eb0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
    9eb4:	andeq	r5, r0, r0, ror #28
    9eb8:	andeq	r5, r0, r4, ror lr
    9ebc:	andeq	r5, r0, r0, lsl #29
    9ec0:	strdeq	r5, [r0], -ip
    9ec4:	ldr	ip, [pc, #2064]	; a6dc <__assert_fail@plt+0x1aa4>
    9ec8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ecc:	add	ip, pc, ip
    9ed0:	ldr	lr, [pc, #2056]	; a6e0 <__assert_fail@plt+0x1aa8>
    9ed4:	movw	sl, #9608	; 0x2588
    9ed8:	mov	r6, r0
    9edc:	ldr	r0, [r0, sl]
    9ee0:	sub	sp, sp, #124	; 0x7c
    9ee4:	mov	r9, r2
    9ee8:	ldr	lr, [ip, lr]
    9eec:	eor	r2, r0, #128	; 0x80
    9ef0:	mov	r5, r1
    9ef4:	ubfx	r2, r2, #7, #1
    9ef8:	mov	r0, r9
    9efc:	mov	r1, r3
    9f00:	ldr	ip, [lr]
    9f04:	mov	fp, r3
    9f08:	str	lr, [sp, #20]
    9f0c:	mov	r4, #0
    9f10:	ldr	r7, [sp, #160]	; 0xa0
    9f14:	str	r4, [sp, #36]	; 0x24
    9f18:	str	ip, [sp, #116]	; 0x74
    9f1c:	ldr	r8, [sp, #164]	; 0xa4
    9f20:	bl	bca8 <__assert_fail@plt+0x3070>
    9f24:	cmn	r0, #1
    9f28:	beq	9f5c <__assert_fail@plt+0x1324>
    9f2c:	cmp	r0, r4
    9f30:	moveq	r0, #2
    9f34:	bne	9f54 <__assert_fail@plt+0x131c>
    9f38:	ldr	r1, [sp, #20]
    9f3c:	ldr	r2, [sp, #116]	; 0x74
    9f40:	ldr	r3, [r1]
    9f44:	cmp	r2, r3
    9f48:	bne	a558 <__assert_fail@plt+0x1920>
    9f4c:	add	sp, sp, #124	; 0x7c
    9f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9f54:	cmp	r0, fp
    9f58:	beq	9f64 <__assert_fail@plt+0x132c>
    9f5c:	mov	r0, #1
    9f60:	b	9f38 <__assert_fail@plt+0x1300>
    9f64:	str	r9, [r5, #4]
    9f68:	str	r0, [r5, #8]
    9f6c:	str	r6, [r5]
    9f70:	str	r4, [r5, #12]
    9f74:	str	r4, [r5, #16]
    9f78:	strb	r4, [r5, #36]	; 0x24
    9f7c:	ldr	r3, [r6]
    9f80:	sub	r3, r3, #1
    9f84:	cmp	r3, #1
    9f88:	bls	a1cc <__assert_fail@plt+0x1594>
    9f8c:	mov	r0, r5
    9f90:	bl	be4c <__assert_fail@plt+0x3214>
    9f94:	cmp	r0, #2
    9f98:	beq	a060 <__assert_fail@plt+0x1428>
    9f9c:	mov	r0, r5
    9fa0:	bl	be4c <__assert_fail@plt+0x3214>
    9fa4:	cmp	r0, #3
    9fa8:	beq	a060 <__assert_fail@plt+0x1428>
    9fac:	mov	fp, #0
    9fb0:	mvn	sl, #0
    9fb4:	movw	r3, #9608	; 0x2588
    9fb8:	ldr	r3, [r6, r3]
    9fbc:	tst	r3, #16
    9fc0:	beq	a164 <__assert_fail@plt+0x152c>
    9fc4:	mov	r4, #0
    9fc8:	mov	r9, #1
    9fcc:	mov	r0, r5
    9fd0:	mov	r1, #8
    9fd4:	bl	be74 <__assert_fail@plt+0x323c>
    9fd8:	cmp	r0, #0
    9fdc:	beq	a0f4 <__assert_fail@plt+0x14bc>
    9fe0:	ldr	r3, [sp, #36]	; 0x24
    9fe4:	cmp	r3, #0
    9fe8:	movne	r3, #0
    9fec:	andeq	r3, r4, #1
    9ff0:	cmp	r3, #0
    9ff4:	bne	a008 <__assert_fail@plt+0x13d0>
    9ff8:	movw	r3, #9608	; 0x2588
    9ffc:	ldr	r3, [r6, r3]
    a000:	tst	r3, #64	; 0x40
    a004:	beq	a0f4 <__assert_fail@plt+0x14bc>
    a008:	add	r2, sp, #120	; 0x78
    a00c:	mov	r3, #0
    a010:	mov	r0, r5
    a014:	mov	r1, #6
    a018:	strh	r3, [r2, #-96]!	; 0xffffffa0
    a01c:	bl	b284 <__assert_fail@plt+0x264c>
    a020:	cmp	r7, #0
    a024:	beq	a058 <__assert_fail@plt+0x1420>
    a028:	mov	r2, r0
    a02c:	add	r1, sp, #36	; 0x24
    a030:	ldrh	r3, [sp, #24]
    a034:	mov	r0, r6
    a038:	str	r1, [sp]
    a03c:	add	r1, sp, #40	; 0x28
    a040:	str	r8, [sp, #8]
    a044:	str	r1, [sp, #4]
    a048:	mov	r1, r5
    a04c:	blx	r7
    a050:	cmp	r0, #0
    a054:	bne	a0f4 <__assert_fail@plt+0x14bc>
    a058:	mov	r0, #5
    a05c:	b	9f38 <__assert_fail@plt+0x1300>
    a060:	add	r4, sp, #48	; 0x30
    a064:	mov	r0, r5
    a068:	add	r9, r6, #4
    a06c:	mov	sl, #0
    a070:	mov	r1, r4
    a074:	bl	bdf0 <__assert_fail@plt+0x31b8>
    a078:	b	a08c <__assert_fail@plt+0x1454>
    a07c:	add	sl, sl, #1
    a080:	add	r9, r9, #48	; 0x30
    a084:	cmp	sl, #200	; 0xc8
    a088:	beq	a15c <__assert_fail@plt+0x1524>
    a08c:	ldrb	r3, [r9, #45]	; 0x2d
    a090:	cmp	r3, #0
    a094:	beq	a07c <__assert_fail@plt+0x1444>
    a098:	mov	r0, r5
    a09c:	ldr	fp, [r9, #16]
    a0a0:	bl	be18 <__assert_fail@plt+0x31e0>
    a0a4:	cmp	fp, r0
    a0a8:	bne	a07c <__assert_fail@plt+0x1444>
    a0ac:	mov	r0, r4
    a0b0:	mov	r1, r9
    a0b4:	mov	r2, #16
    a0b8:	bl	8ad0 <memcmp@plt>
    a0bc:	cmp	r0, #0
    a0c0:	bne	a07c <__assert_fail@plt+0x1444>
    a0c4:	add	lr, sl, sl, lsl #1
    a0c8:	add	lr, r6, lr, lsl #4
    a0cc:	add	r3, lr, #32
    a0d0:	ldr	ip, [lr, #24]
    a0d4:	ldm	r3, {r0, r1, r2, r3}
    a0d8:	ldr	r9, [lr, #28]
    a0dc:	ldrb	fp, [lr, #48]	; 0x30
    a0e0:	add	lr, sp, #64	; 0x40
    a0e4:	str	ip, [sp, #36]	; 0x24
    a0e8:	stm	lr, {r0, r1, r2, r3}
    a0ec:	str	r9, [sp, #40]	; 0x28
    a0f0:	b	9fb4 <__assert_fail@plt+0x137c>
    a0f4:	cmp	r9, #0
    a0f8:	bne	a114 <__assert_fail@plt+0x14dc>
    a0fc:	ldr	r3, [sp, #36]	; 0x24
    a100:	cmp	r3, #0
    a104:	beq	a114 <__assert_fail@plt+0x14dc>
    a108:	ldr	r3, [sp, #40]	; 0x28
    a10c:	cmp	r3, #0
    a110:	bne	a2ec <__assert_fail@plt+0x16b4>
    a114:	cmn	sl, #1
    a118:	mov	r0, r6
    a11c:	addne	ip, sl, sl, lsl #1
    a120:	mov	r1, r5
    a124:	movne	r2, #0
    a128:	addne	r3, r6, ip, lsl #4
    a12c:	strbne	r2, [r3, #49]	; 0x31
    a130:	add	r2, sp, #30
    a134:	mov	r3, #1
    a138:	bl	9c28 <__assert_fail@plt+0xff0>
    a13c:	cmp	r0, #0
    a140:	beq	9f38 <__assert_fail@plt+0x1300>
    a144:	mov	r0, r5
    a148:	bl	be4c <__assert_fail@plt+0x3214>
    a14c:	cmp	r0, #0
    a150:	movne	r0, #8
    a154:	moveq	r0, #7
    a158:	b	9f38 <__assert_fail@plt+0x1300>
    a15c:	mov	r0, #6
    a160:	b	9f38 <__assert_fail@plt+0x1300>
    a164:	mov	r0, r5
    a168:	bl	be4c <__assert_fail@plt+0x3214>
    a16c:	cmp	r0, #3
    a170:	beq	a284 <__assert_fail@plt+0x164c>
    a174:	mov	r0, r5
    a178:	bl	be4c <__assert_fail@plt+0x3214>
    a17c:	cmp	r0, #1
    a180:	beq	a2d8 <__assert_fail@plt+0x16a0>
    a184:	ldr	r3, [sp, #36]	; 0x24
    a188:	cmp	r3, #0
    a18c:	bne	a1c0 <__assert_fail@plt+0x1588>
    a190:	mov	r0, r5
    a194:	bl	be4c <__assert_fail@plt+0x3214>
    a198:	cmp	r0, #0
    a19c:	bne	a224 <__assert_fail@plt+0x15ec>
    a1a0:	movw	r9, #9608	; 0x2588
    a1a4:	ldr	r3, [r6, r9]
    a1a8:	tst	r3, #1
    a1ac:	bne	a238 <__assert_fail@plt+0x1600>
    a1b0:	tst	r3, #2
    a1b4:	bne	a268 <__assert_fail@plt+0x1630>
    a1b8:	tst	r3, #16
    a1bc:	beq	a2ac <__assert_fail@plt+0x1674>
    a1c0:	mov	r4, #1
    a1c4:	mov	r9, #0
    a1c8:	b	9fcc <__assert_fail@plt+0x1394>
    a1cc:	mov	r0, r5
    a1d0:	bl	c048 <__assert_fail@plt+0x3410>
    a1d4:	cmp	r0, r4
    a1d8:	beq	a254 <__assert_fail@plt+0x161c>
    a1dc:	ldr	r3, [r6]
    a1e0:	sub	r3, r3, #1
    a1e4:	cmp	r3, #1
    a1e8:	bhi	9f8c <__assert_fail@plt+0x1354>
    a1ec:	ldr	r3, [r6, sl]
    a1f0:	tst	r3, #4
    a1f4:	beq	9f8c <__assert_fail@plt+0x1354>
    a1f8:	mov	r0, r5
    a1fc:	movw	r1, #32808	; 0x8028
    a200:	add	r2, sp, #32
    a204:	bl	b3f4 <__assert_fail@plt+0x27bc>
    a208:	cmp	r0, #0
    a20c:	beq	a428 <__assert_fail@plt+0x17f0>
    a210:	ldr	r0, [pc, #1228]	; a6e4 <__assert_fail@plt+0x1aac>
    a214:	add	r0, pc, r0
    a218:	bl	c62c <__assert_fail@plt+0x39f4>
    a21c:	mov	r0, #3
    a220:	b	9f38 <__assert_fail@plt+0x1300>
    a224:	mov	r0, r5
    a228:	bl	be4c <__assert_fail@plt+0x3214>
    a22c:	cmp	r0, #1
    a230:	bne	a1c0 <__assert_fail@plt+0x1588>
    a234:	b	a1a0 <__assert_fail@plt+0x1568>
    a238:	mov	r0, r5
    a23c:	mov	r1, #6
    a240:	bl	be74 <__assert_fail@plt+0x323c>
    a244:	cmp	r0, #0
    a248:	bne	a53c <__assert_fail@plt+0x1904>
    a24c:	mov	r0, #4
    a250:	b	9f38 <__assert_fail@plt+0x1300>
    a254:	ldr	r0, [pc, #1164]	; a6e8 <__assert_fail@plt+0x1ab0>
    a258:	add	r0, pc, r0
    a25c:	bl	c62c <__assert_fail@plt+0x39f4>
    a260:	mov	r0, #3
    a264:	b	9f38 <__assert_fail@plt+0x1300>
    a268:	mov	r0, r5
    a26c:	bl	be4c <__assert_fail@plt+0x3214>
    a270:	cmp	r0, #0
    a274:	beq	a4c8 <__assert_fail@plt+0x1890>
    a278:	movw	r3, #9608	; 0x2588
    a27c:	ldr	r3, [r6, r3]
    a280:	b	a1b8 <__assert_fail@plt+0x1580>
    a284:	mov	r0, r5
    a288:	add	r1, sp, #44	; 0x2c
    a28c:	bl	b7a8 <__assert_fail@plt+0x2b70>
    a290:	cmp	r0, #0
    a294:	bne	a174 <__assert_fail@plt+0x153c>
    a298:	ldr	r3, [sp, #44]	; 0x2c
    a29c:	sub	r3, r3, #400	; 0x190
    a2a0:	cmp	r3, #1
    a2a4:	bhi	a174 <__assert_fail@plt+0x153c>
    a2a8:	b	9fc4 <__assert_fail@plt+0x138c>
    a2ac:	mov	r0, r5
    a2b0:	mov	r1, #6
    a2b4:	bl	be74 <__assert_fail@plt+0x323c>
    a2b8:	cmp	r0, #0
    a2bc:	beq	a1c0 <__assert_fail@plt+0x1588>
    a2c0:	mov	r0, r5
    a2c4:	mov	r1, #8
    a2c8:	bl	be74 <__assert_fail@plt+0x323c>
    a2cc:	cmp	r0, #0
    a2d0:	beq	a24c <__assert_fail@plt+0x1614>
    a2d4:	b	a1c0 <__assert_fail@plt+0x1588>
    a2d8:	movw	r3, #9608	; 0x2588
    a2dc:	ldr	r3, [r6, r3]
    a2e0:	tst	r3, #32
    a2e4:	bne	9fc4 <__assert_fail@plt+0x138c>
    a2e8:	b	a184 <__assert_fail@plt+0x154c>
    a2ec:	mov	r0, r5
    a2f0:	mov	r1, #8
    a2f4:	add	r2, sp, #26
    a2f8:	bl	b284 <__assert_fail@plt+0x264c>
    a2fc:	subs	r8, r0, #0
    a300:	beq	a694 <__assert_fail@plt+0x1a5c>
    a304:	movw	r3, #9608	; 0x2588
    a308:	ldr	r3, [r6, r3]
    a30c:	tst	r3, #2
    a310:	beq	a47c <__assert_fail@plt+0x1844>
    a314:	cmp	fp, #0
    a318:	beq	a5ec <__assert_fail@plt+0x19b4>
    a31c:	add	r3, sp, #64	; 0x40
    a320:	add	r9, sp, #80	; 0x50
    a324:	ldm	r3, {r0, r1, r2, r3}
    a328:	stm	r9, {r0, r1, r2, r3}
    a32c:	mov	lr, r9
    a330:	ldm	lr!, {r0, r1, r2, r3}
    a334:	add	r7, r5, #20
    a338:	mov	r4, #1
    a33c:	str	r0, [r5, #20]
    a340:	str	r2, [r7, #8]
    a344:	str	r1, [r7, #4]
    a348:	str	r3, [r7, #12]
    a34c:	strb	r4, [r5, #36]	; 0x24
    a350:	ldr	r3, [r6]
    a354:	cmp	r3, #0
    a358:	cmpne	r3, #3
    a35c:	movne	r2, #0
    a360:	moveq	r2, #1
    a364:	beq	a5d4 <__assert_fail@plt+0x199c>
    a368:	cmp	r3, #2
    a36c:	beq	a658 <__assert_fail@plt+0x1a20>
    a370:	add	r7, sp, #96	; 0x60
    a374:	add	r1, r8, #20
    a378:	ldr	r0, [r5, #4]
    a37c:	str	r9, [sp]
    a380:	str	r2, [sp, #8]
    a384:	mov	lr, #16
    a388:	mov	r3, r7
    a38c:	rsb	r1, r0, r1
    a390:	rsb	r2, r0, r8
    a394:	str	lr, [sp, #4]
    a398:	bl	c1cc <__assert_fail@plt+0x3594>
    a39c:	ldr	r0, [pc, #840]	; a6ec <__assert_fail@plt+0x1ab4>
    a3a0:	add	r0, pc, r0
    a3a4:	bl	c62c <__assert_fail@plt+0x39f4>
    a3a8:	ldr	r0, [pc, #832]	; a6f0 <__assert_fail@plt+0x1ab8>
    a3ac:	add	r0, pc, r0
    a3b0:	bl	c62c <__assert_fail@plt+0x39f4>
    a3b4:	ldr	r1, [sp, #40]	; 0x28
    a3b8:	ldr	r0, [sp, #36]	; 0x24
    a3bc:	bl	c6b8 <__assert_fail@plt+0x3a80>
    a3c0:	ldr	r0, [pc, #812]	; a6f4 <__assert_fail@plt+0x1abc>
    a3c4:	add	r0, pc, r0
    a3c8:	bl	c62c <__assert_fail@plt+0x39f4>
    a3cc:	mov	r1, #20
    a3d0:	mov	r0, r7
    a3d4:	bl	c6b8 <__assert_fail@plt+0x3a80>
    a3d8:	ldr	r0, [pc, #792]	; a6f8 <__assert_fail@plt+0x1ac0>
    a3dc:	add	r0, pc, r0
    a3e0:	bl	c62c <__assert_fail@plt+0x39f4>
    a3e4:	mov	r1, #20
    a3e8:	mov	r0, r8
    a3ec:	bl	c6b8 <__assert_fail@plt+0x3a80>
    a3f0:	ldr	r0, [pc, #772]	; a6fc <__assert_fail@plt+0x1ac4>
    a3f4:	add	r0, pc, r0
    a3f8:	bl	c62c <__assert_fail@plt+0x39f4>
    a3fc:	mov	r0, r7
    a400:	mov	r1, r8
    a404:	mov	r2, #20
    a408:	bl	8ad0 <memcmp@plt>
    a40c:	cmp	r0, #0
    a410:	beq	a51c <__assert_fail@plt+0x18e4>
    a414:	ldr	r0, [pc, #740]	; a700 <__assert_fail@plt+0x1ac8>
    a418:	add	r0, pc, r0
    a41c:	bl	c62c <__assert_fail@plt+0x39f4>
    a420:	mov	r0, #5
    a424:	b	9f38 <__assert_fail@plt+0x1300>
    a428:	mov	r0, r5
    a42c:	ldr	r9, [r5, #4]
    a430:	bl	b268 <__assert_fail@plt+0x2630>
    a434:	ldr	r2, [r6]
    a438:	subs	r3, r2, #2
    a43c:	rsbs	r2, r3, #0
    a440:	adcs	r2, r2, r3
    a444:	mov	r1, r0
    a448:	mov	r0, r9
    a44c:	bl	bfa8 <__assert_fail@plt+0x3370>
    a450:	ldr	r1, [sp, #32]
    a454:	rev	r1, r1
    a458:	str	r1, [sp, #32]
    a45c:	cmp	r0, r1
    a460:	mov	r2, r0
    a464:	beq	a648 <__assert_fail@plt+0x1a10>
    a468:	ldr	r0, [pc, #660]	; a704 <__assert_fail@plt+0x1acc>
    a46c:	add	r0, pc, r0
    a470:	bl	c62c <__assert_fail@plt+0x39f4>
    a474:	mov	r0, #3
    a478:	b	9f38 <__assert_fail@plt+0x1300>
    a47c:	ldr	r3, [r6]
    a480:	cmp	r3, #0
    a484:	cmpne	r3, #3
    a488:	beq	a5a0 <__assert_fail@plt+0x1968>
    a48c:	cmp	r3, #2
    a490:	beq	a55c <__assert_fail@plt+0x1924>
    a494:	ldr	r2, [sp, #36]	; 0x24
    a498:	add	r7, sp, #96	; 0x60
    a49c:	ldr	lr, [sp, #40]	; 0x28
    a4a0:	add	r1, r8, #20
    a4a4:	ldr	r0, [r5, #4]
    a4a8:	mov	r3, r7
    a4ac:	str	r2, [sp]
    a4b0:	str	r9, [sp, #8]
    a4b4:	rsb	r1, r0, r1
    a4b8:	rsb	r2, r0, r8
    a4bc:	str	lr, [sp, #4]
    a4c0:	bl	c1cc <__assert_fail@plt+0x3594>
    a4c4:	b	a39c <__assert_fail@plt+0x1764>
    a4c8:	mov	r0, r5
    a4cc:	mov	r1, #6
    a4d0:	bl	be74 <__assert_fail@plt+0x323c>
    a4d4:	cmp	r0, #0
    a4d8:	beq	a24c <__assert_fail@plt+0x1614>
    a4dc:	mov	r0, r5
    a4e0:	mov	r1, #8
    a4e4:	bl	be74 <__assert_fail@plt+0x323c>
    a4e8:	cmp	r0, #0
    a4ec:	beq	a24c <__assert_fail@plt+0x1614>
    a4f0:	mov	r0, r5
    a4f4:	mov	r1, #21
    a4f8:	bl	be74 <__assert_fail@plt+0x323c>
    a4fc:	cmp	r0, #0
    a500:	beq	a24c <__assert_fail@plt+0x1614>
    a504:	mov	r0, r5
    a508:	mov	r1, #20
    a50c:	bl	be74 <__assert_fail@plt+0x323c>
    a510:	cmp	r0, #0
    a514:	beq	a24c <__assert_fail@plt+0x1614>
    a518:	b	a278 <__assert_fail@plt+0x1640>
    a51c:	ldr	r0, [pc, #484]	; a708 <__assert_fail@plt+0x1ad0>
    a520:	add	r0, pc, r0
    a524:	bl	c62c <__assert_fail@plt+0x39f4>
    a528:	ldr	r2, [sp, #36]	; 0x24
    a52c:	ldr	r3, [sp, #40]	; 0x28
    a530:	str	r2, [r5, #12]
    a534:	str	r3, [r5, #16]
    a538:	b	a114 <__assert_fail@plt+0x14dc>
    a53c:	mov	r0, r5
    a540:	mov	r1, #8
    a544:	bl	be74 <__assert_fail@plt+0x323c>
    a548:	cmp	r0, #0
    a54c:	beq	a24c <__assert_fail@plt+0x1614>
    a550:	ldr	r3, [r6, r9]
    a554:	b	a1b0 <__assert_fail@plt+0x1578>
    a558:	bl	8adc <__stack_chk_fail@plt>
    a55c:	mov	r0, r5
    a560:	ldr	r9, [r5, #4]
    a564:	bl	b268 <__assert_fail@plt+0x2630>
    a568:	ldr	r3, [sp, #36]	; 0x24
    a56c:	ldr	lr, [sp, #40]	; 0x28
    a570:	add	r7, sp, #96	; 0x60
    a574:	add	r1, r8, #20
    a578:	mov	r2, #1
    a57c:	str	r3, [sp]
    a580:	rsb	r1, r9, r1
    a584:	str	r2, [sp, #8]
    a588:	mov	r3, r7
    a58c:	str	lr, [sp, #4]
    a590:	sub	r2, r0, #20
    a594:	mov	r0, r9
    a598:	bl	c1cc <__assert_fail@plt+0x3594>
    a59c:	b	a39c <__assert_fail@plt+0x1764>
    a5a0:	ldr	ip, [sp, #36]	; 0x24
    a5a4:	add	r7, sp, #96	; 0x60
    a5a8:	ldr	r9, [sp, #40]	; 0x28
    a5ac:	add	r1, r8, #20
    a5b0:	ldr	r0, [r5, #4]
    a5b4:	mov	lr, #1
    a5b8:	mov	r3, r7
    a5bc:	str	ip, [sp]
    a5c0:	rsb	r1, r0, r1
    a5c4:	rsb	r2, r0, r8
    a5c8:	stmib	sp, {r9, lr}
    a5cc:	bl	c1cc <__assert_fail@plt+0x3594>
    a5d0:	b	a39c <__assert_fail@plt+0x1764>
    a5d4:	ldr	r0, [r5, #4]
    a5d8:	add	r7, sp, #96	; 0x60
    a5dc:	add	r1, r8, #20
    a5e0:	str	r9, [sp]
    a5e4:	str	r4, [sp, #8]
    a5e8:	b	a384 <__assert_fail@plt+0x174c>
    a5ec:	mov	r1, #20
    a5f0:	add	r2, sp, #28
    a5f4:	mov	r0, r5
    a5f8:	bl	b284 <__assert_fail@plt+0x264c>
    a5fc:	add	r2, sp, #30
    a600:	mov	r1, #6
    a604:	mov	r7, r0
    a608:	mov	r0, r5
    a60c:	bl	b284 <__assert_fail@plt+0x264c>
    a610:	cmp	r0, #0
    a614:	cmpne	r7, #0
    a618:	mov	r2, r0
    a61c:	beq	a058 <__assert_fail@plt+0x1420>
    a620:	mov	r0, r7
    a624:	ldr	lr, [sp, #40]	; 0x28
    a628:	ldr	r7, [sp, #36]	; 0x24
    a62c:	add	r9, sp, #80	; 0x50
    a630:	ldrh	r1, [sp, #28]
    a634:	ldrh	r3, [sp, #30]
    a638:	str	r9, [sp, #8]
    a63c:	stm	sp, {r7, lr}
    a640:	bl	c2ec <__assert_fail@plt+0x36b4>
    a644:	b	a32c <__assert_fail@plt+0x16f4>
    a648:	ldr	r0, [pc, #188]	; a70c <__assert_fail@plt+0x1ad4>
    a64c:	add	r0, pc, r0
    a650:	bl	c62c <__assert_fail@plt+0x39f4>
    a654:	b	9f8c <__assert_fail@plt+0x1354>
    a658:	mov	r0, r5
    a65c:	ldr	fp, [r5, #4]
    a660:	bl	b268 <__assert_fail@plt+0x2630>
    a664:	add	r7, sp, #96	; 0x60
    a668:	add	r1, r8, #20
    a66c:	mov	r2, #16
    a670:	str	r9, [sp]
    a674:	mov	r3, r7
    a678:	str	r2, [sp, #4]
    a67c:	rsb	r1, fp, r1
    a680:	str	r4, [sp, #8]
    a684:	sub	r2, r0, #20
    a688:	mov	r0, fp
    a68c:	bl	c1cc <__assert_fail@plt+0x3594>
    a690:	b	a39c <__assert_fail@plt+0x1764>
    a694:	mov	r0, r5
    a698:	bl	be4c <__assert_fail@plt+0x3214>
    a69c:	cmp	r0, #3
    a6a0:	beq	a6b4 <__assert_fail@plt+0x1a7c>
    a6a4:	ldr	r0, [pc, #100]	; a710 <__assert_fail@plt+0x1ad8>
    a6a8:	add	r0, pc, r0
    a6ac:	bl	c62c <__assert_fail@plt+0x39f4>
    a6b0:	b	a058 <__assert_fail@plt+0x1420>
    a6b4:	mov	r0, r5
    a6b8:	add	r1, sp, #44	; 0x2c
    a6bc:	bl	b7a8 <__assert_fail@plt+0x2b70>
    a6c0:	cmp	r0, #0
    a6c4:	bne	a6a4 <__assert_fail@plt+0x1a6c>
    a6c8:	ldr	r3, [sp, #44]	; 0x2c
    a6cc:	sub	r3, r3, #400	; 0x190
    a6d0:	cmp	r3, #1
    a6d4:	bhi	a6a4 <__assert_fail@plt+0x1a6c>
    a6d8:	b	a114 <__assert_fail@plt+0x14dc>
    a6dc:	andeq	pc, r0, ip, lsr #2
    a6e0:	andeq	r0, r0, r0, lsr #1
    a6e4:	andeq	r5, r0, r4, asr #21
    a6e8:	andeq	r5, r0, r0, ror #20
    a6ec:			; <UNDEFINED> instruction: 0x000059bc
    a6f0:	ldrdeq	r5, [r0], -r0
    a6f4:	andeq	r5, r0, r4, asr #19
    a6f8:			; <UNDEFINED> instruction: 0x000059bc
    a6fc:	andeq	r5, r0, r8, lsr #16
    a700:	muleq	r0, r0, r9
    a704:	muleq	r0, ip, r8
    a708:			; <UNDEFINED> instruction: 0x000058b8
    a70c:	strdeq	r5, [r0], -ip
    a710:	andeq	r5, r0, r0, asr #14
    a714:	push	{r4, r5, r6, r7, r8, lr}
    a718:	mov	r8, r0
    a71c:	add	r4, r0, #4
    a720:	mov	r7, r1
    a724:	mov	r5, #0
    a728:	b	a738 <__assert_fail@plt+0x1b00>
    a72c:	add	r5, r5, #1
    a730:	cmp	r5, #200	; 0xc8
    a734:	beq	a774 <__assert_fail@plt+0x1b3c>
    a738:	ldrb	r6, [r4, #45]	; 0x2d
    a73c:	mov	r1, r4
    a740:	mov	r0, r7
    a744:	mov	r2, #16
    a748:	cmp	r6, #0
    a74c:	add	r4, r4, #48	; 0x30
    a750:	beq	a72c <__assert_fail@plt+0x1af4>
    a754:	bl	8ad0 <memcmp@plt>
    a758:	cmp	r0, #0
    a75c:	bne	a72c <__assert_fail@plt+0x1af4>
    a760:	add	r5, r5, r5, lsl #1
    a764:	add	r8, r8, r5, lsl #4
    a768:	strb	r0, [r8, #49]	; 0x31
    a76c:	mov	r0, r6
    a770:	pop	{r4, r5, r6, r7, r8, pc}
    a774:	mov	r6, #0
    a778:	mov	r0, r6
    a77c:	pop	{r4, r5, r6, r7, r8, pc}
    a780:	push	{r4, r5, r6, r7, r8, r9, lr}
    a784:	sub	sp, sp, #28
    a788:	ldr	lr, [pc, #236]	; a87c <__assert_fail@plt+0x1c44>
    a78c:	mov	r4, r1
    a790:	ldr	ip, [pc, #232]	; a880 <__assert_fail@plt+0x1c48>
    a794:	add	r7, sp, #4
    a798:	add	lr, pc, lr
    a79c:	ldr	r9, [sp, #56]	; 0x38
    a7a0:	mov	r5, #0
    a7a4:	mov	r8, r0
    a7a8:	ldr	r6, [lr, ip]
    a7ac:	mov	r0, r7
    a7b0:	stmib	r4, {r2, r3}
    a7b4:	mov	r1, lr
    a7b8:	str	r5, [r4, #12]
    a7bc:	ldr	r3, [r6]
    a7c0:	str	r5, [r4, #16]
    a7c4:	strb	r5, [r4, #36]	; 0x24
    a7c8:	str	r8, [r4]
    a7cc:	str	r3, [sp, #20]
    a7d0:	bl	c4b0 <__assert_fail@plt+0x3878>
    a7d4:	mov	r1, r5
    a7d8:	mov	r0, r4
    a7dc:	mov	r2, r9
    a7e0:	mov	r3, r7
    a7e4:	bl	b1f4 <__assert_fail@plt+0x25bc>
    a7e8:	subs	r5, r0, #0
    a7ec:	beq	a800 <__assert_fail@plt+0x1bc8>
    a7f0:	ldr	r3, [r8]
    a7f4:	sub	r3, r3, #1
    a7f8:	cmp	r3, #1
    a7fc:	bls	a81c <__assert_fail@plt+0x1be4>
    a800:	ldr	r2, [sp, #20]
    a804:	mov	r0, r5
    a808:	ldr	r3, [r6]
    a80c:	cmp	r2, r3
    a810:	bne	a878 <__assert_fail@plt+0x1c40>
    a814:	add	sp, sp, #28
    a818:	pop	{r4, r5, r6, r7, r8, r9, pc}
    a81c:	add	r3, sp, #24
    a820:	movw	r2, #4641	; 0x1221
    a824:	ldr	r1, [r4, #4]
    a828:	movt	r2, #17060	; 0x42a4
    a82c:	str	r2, [r3, #-24]!	; 0xffffffe8
    a830:	ldr	r0, [r3]
    a834:	str	r0, [r1, #4]
    a838:	ldr	r3, [r8]
    a83c:	sub	r3, r3, #1
    a840:	cmp	r3, #1
    a844:	bhi	a800 <__assert_fail@plt+0x1bc8>
    a848:	movw	r3, #9612	; 0x258c
    a84c:	ldr	r1, [r8, r3]
    a850:	cmp	r1, #0
    a854:	beq	a864 <__assert_fail@plt+0x1c2c>
    a858:	mov	r0, r4
    a85c:	bl	c0bc <__assert_fail@plt+0x3484>
    a860:	b	a800 <__assert_fail@plt+0x1bc8>
    a864:	movw	r3, #9608	; 0x2588
    a868:	ldr	r3, [r8, r3]
    a86c:	tst	r3, #8
    a870:	bne	a858 <__assert_fail@plt+0x1c20>
    a874:	b	a800 <__assert_fail@plt+0x1bc8>
    a878:	bl	8adc <__stack_chk_fail@plt>
    a87c:	andeq	lr, r0, r0, ror #16
    a880:	andeq	r0, r0, r0, lsr #1
    a884:	ldr	ip, [pc, #180]	; a940 <__assert_fail@plt+0x1d08>
    a888:	push	{r4, r5, r6, r7, r8, lr}
    a88c:	add	ip, pc, ip
    a890:	ldr	lr, [pc, #172]	; a944 <__assert_fail@plt+0x1d0c>
    a894:	sub	sp, sp, #24
    a898:	mov	r4, r1
    a89c:	add	r6, sp, #4
    a8a0:	ldr	r8, [sp, #48]	; 0x30
    a8a4:	mov	r1, #0
    a8a8:	ldr	r5, [ip, lr]
    a8ac:	mov	r7, r0
    a8b0:	stmib	r4, {r2, r3}
    a8b4:	mov	r0, r6
    a8b8:	str	r1, [r4, #12]
    a8bc:	ldr	r3, [r5]
    a8c0:	str	r1, [r4, #16]
    a8c4:	strb	r1, [r4, #36]	; 0x24
    a8c8:	str	r7, [r4]
    a8cc:	str	r3, [sp, #20]
    a8d0:	bl	c4b0 <__assert_fail@plt+0x3878>
    a8d4:	mov	r3, r6
    a8d8:	mov	r0, r4
    a8dc:	mov	r2, r8
    a8e0:	mov	r1, #1
    a8e4:	bl	b1f4 <__assert_fail@plt+0x25bc>
    a8e8:	subs	r3, r0, #0
    a8ec:	beq	a900 <__assert_fail@plt+0x1cc8>
    a8f0:	ldr	r2, [r7]
    a8f4:	sub	r2, r2, #1
    a8f8:	cmp	r2, #1
    a8fc:	bls	a91c <__assert_fail@plt+0x1ce4>
    a900:	ldr	r2, [sp, #20]
    a904:	mov	r0, r3
    a908:	ldr	r3, [r5]
    a90c:	cmp	r2, r3
    a910:	bne	a93c <__assert_fail@plt+0x1d04>
    a914:	add	sp, sp, #24
    a918:	pop	{r4, r5, r6, r7, r8, pc}
    a91c:	add	r2, sp, #24
    a920:	ldr	ip, [r4, #4]
    a924:	movw	r1, #4641	; 0x1221
    a928:	movt	r1, #17060	; 0x42a4
    a92c:	str	r1, [r2, #-24]!	; 0xffffffe8
    a930:	ldr	r0, [r2]
    a934:	str	r0, [ip, #4]
    a938:	b	a900 <__assert_fail@plt+0x1cc8>
    a93c:	bl	8adc <__stack_chk_fail@plt>
    a940:	andeq	lr, r0, ip, ror #14
    a944:	andeq	r0, r0, r0, lsr #1
    a948:	ldr	ip, [pc, #268]	; aa5c <__assert_fail@plt+0x1e24>
    a94c:	push	{r4, r5, r6, r7, r8, r9, lr}
    a950:	mov	r7, r0
    a954:	ldr	r0, [pc, #260]	; aa60 <__assert_fail@plt+0x1e28>
    a958:	add	ip, pc, ip
    a95c:	sub	sp, sp, #28
    a960:	mov	r8, r3
    a964:	mov	r5, r1
    a968:	mov	r9, r2
    a96c:	ldr	r6, [ip, r0]
    a970:	mov	r1, ip
    a974:	ldr	r4, [sp, #56]	; 0x38
    a978:	ldr	r3, [r6]
    a97c:	mov	r0, r4
    a980:	str	r3, [sp, #20]
    a984:	bl	be4c <__assert_fail@plt+0x3214>
    a988:	cmp	r0, #0
    a98c:	beq	a9b0 <__assert_fail@plt+0x1d78>
    a990:	mov	r4, #0
    a994:	ldr	r2, [sp, #20]
    a998:	mov	r0, r4
    a99c:	ldr	r3, [r6]
    a9a0:	cmp	r2, r3
    a9a4:	bne	aa58 <__assert_fail@plt+0x1e20>
    a9a8:	add	sp, sp, #28
    a9ac:	pop	{r4, r5, r6, r7, r8, r9, pc}
    a9b0:	str	r8, [r5, #8]
    a9b4:	mov	r2, #16
    a9b8:	str	r9, [r5, #4]
    a9bc:	add	r1, r4, #20
    a9c0:	str	r7, [r5]
    a9c4:	add	r0, r5, #20
    a9c8:	ldr	r3, [r4, #12]
    a9cc:	add	r8, sp, #4
    a9d0:	str	r3, [r5, #12]
    a9d4:	ldr	r3, [r4, #16]
    a9d8:	str	r3, [r5, #16]
    a9dc:	bl	8aa0 <memmove@plt>
    a9e0:	ldrb	r3, [r4, #36]	; 0x24
    a9e4:	mov	r1, r8
    a9e8:	mov	r0, r4
    a9ec:	strb	r3, [r5, #36]	; 0x24
    a9f0:	bl	bdf0 <__assert_fail@plt+0x31b8>
    a9f4:	mov	r0, r4
    a9f8:	bl	be18 <__assert_fail@plt+0x31e0>
    a9fc:	mov	r3, r8
    aa00:	mov	r1, #2
    aa04:	mov	r2, r0
    aa08:	mov	r0, r5
    aa0c:	bl	b1f4 <__assert_fail@plt+0x25bc>
    aa10:	subs	r4, r0, #0
    aa14:	beq	a990 <__assert_fail@plt+0x1d58>
    aa18:	ldr	r3, [r7]
    aa1c:	sub	r3, r3, #1
    aa20:	cmp	r3, #1
    aa24:	bhi	a994 <__assert_fail@plt+0x1d5c>
    aa28:	movw	r3, #9612	; 0x258c
    aa2c:	ldr	r1, [r7, r3]
    aa30:	cmp	r1, #0
    aa34:	beq	aa44 <__assert_fail@plt+0x1e0c>
    aa38:	mov	r0, r5
    aa3c:	bl	c0bc <__assert_fail@plt+0x3484>
    aa40:	b	a994 <__assert_fail@plt+0x1d5c>
    aa44:	movw	r3, #9608	; 0x2588
    aa48:	ldr	r3, [r7, r3]
    aa4c:	tst	r3, #8
    aa50:	bne	aa38 <__assert_fail@plt+0x1e00>
    aa54:	b	a994 <__assert_fail@plt+0x1d5c>
    aa58:	bl	8adc <__stack_chk_fail@plt>
    aa5c:	andeq	lr, r0, r0, lsr #13
    aa60:	andeq	r0, r0, r0, lsr #1
    aa64:	ldr	ip, [pc, #288]	; ab8c <__assert_fail@plt+0x1f54>
    aa68:	push	{r4, r5, r6, r7, r8, r9, lr}
    aa6c:	mov	r7, r0
    aa70:	ldr	r0, [pc, #280]	; ab90 <__assert_fail@plt+0x1f58>
    aa74:	add	ip, pc, ip
    aa78:	sub	sp, sp, #28
    aa7c:	mov	r8, r3
    aa80:	mov	r4, r1
    aa84:	mov	r9, r2
    aa88:	ldr	r6, [ip, r0]
    aa8c:	mov	r1, ip
    aa90:	ldr	r5, [sp, #56]	; 0x38
    aa94:	ldr	r3, [r6]
    aa98:	mov	r0, r5
    aa9c:	str	r3, [sp, #20]
    aaa0:	bl	be4c <__assert_fail@plt+0x3214>
    aaa4:	cmp	r0, #0
    aaa8:	beq	aac8 <__assert_fail@plt+0x1e90>
    aaac:	mov	r0, #0
    aab0:	ldr	r2, [sp, #20]
    aab4:	ldr	r3, [r6]
    aab8:	cmp	r2, r3
    aabc:	bne	ab88 <__assert_fail@plt+0x1f50>
    aac0:	add	sp, sp, #28
    aac4:	pop	{r4, r5, r6, r7, r8, r9, pc}
    aac8:	str	r8, [r4, #8]
    aacc:	mov	r2, #16
    aad0:	str	r9, [r4, #4]
    aad4:	add	r1, r5, #20
    aad8:	str	r7, [r4]
    aadc:	add	r0, r4, #20
    aae0:	ldr	r3, [r5, #12]
    aae4:	add	r8, sp, #4
    aae8:	str	r3, [r4, #12]
    aaec:	ldr	r3, [r5, #16]
    aaf0:	str	r3, [r4, #16]
    aaf4:	bl	8aa0 <memmove@plt>
    aaf8:	ldrb	r3, [r5, #36]	; 0x24
    aafc:	mov	r1, r8
    ab00:	mov	r0, r5
    ab04:	strb	r3, [r4, #36]	; 0x24
    ab08:	bl	bdf0 <__assert_fail@plt+0x31b8>
    ab0c:	mov	r0, r5
    ab10:	bl	be18 <__assert_fail@plt+0x31e0>
    ab14:	mov	r3, r8
    ab18:	mov	r1, #3
    ab1c:	mov	r2, r0
    ab20:	mov	r0, r4
    ab24:	bl	b1f4 <__assert_fail@plt+0x25bc>
    ab28:	cmp	r0, #0
    ab2c:	beq	aaac <__assert_fail@plt+0x1e74>
    ab30:	ldr	r3, [r7]
    ab34:	sub	r3, r3, #1
    ab38:	cmp	r3, #1
    ab3c:	bls	ab58 <__assert_fail@plt+0x1f20>
    ab40:	mov	r0, r4
    ab44:	ldr	r1, [sp, #60]	; 0x3c
    ab48:	bl	bf20 <__assert_fail@plt+0x32e8>
    ab4c:	rsbs	r0, r0, #1
    ab50:	movcc	r0, #0
    ab54:	b	aab0 <__assert_fail@plt+0x1e78>
    ab58:	movw	r3, #9612	; 0x258c
    ab5c:	ldr	r1, [r7, r3]
    ab60:	cmp	r1, #0
    ab64:	beq	ab74 <__assert_fail@plt+0x1f3c>
    ab68:	mov	r0, r4
    ab6c:	bl	c0bc <__assert_fail@plt+0x3484>
    ab70:	b	ab40 <__assert_fail@plt+0x1f08>
    ab74:	movw	r3, #9608	; 0x2588
    ab78:	ldr	r3, [r7, r3]
    ab7c:	tst	r3, #8
    ab80:	beq	ab40 <__assert_fail@plt+0x1f08>
    ab84:	b	ab68 <__assert_fail@plt+0x1f30>
    ab88:	bl	8adc <__stack_chk_fail@plt>
    ab8c:	andeq	lr, r0, r4, lsl #11
    ab90:	andeq	r0, r0, r0, lsr #1
    ab94:	ldr	ip, [pc, #1316]	; b0c0 <__assert_fail@plt+0x2488>
    ab98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ab9c:	mov	r5, r1
    aba0:	ldr	r1, [pc, #1308]	; b0c4 <__assert_fail@plt+0x248c>
    aba4:	add	ip, pc, ip
    aba8:	mov	r7, r3
    abac:	sub	sp, sp, #60	; 0x3c
    abb0:	mov	r3, ip
    abb4:	mov	r6, r0
    abb8:	ldr	r8, [ip, r1]
    abbc:	mov	r0, r5
    abc0:	mov	r9, r2
    abc4:	ldr	r3, [r8]
    abc8:	str	r3, [sp, #52]	; 0x34
    abcc:	bl	be4c <__assert_fail@plt+0x3214>
    abd0:	cmp	r0, #0
    abd4:	bne	ad90 <__assert_fail@plt+0x2158>
    abd8:	mov	r4, r0
    abdc:	mov	ip, r6
    abe0:	b	abf4 <__assert_fail@plt+0x1fbc>
    abe4:	add	r4, r4, #1
    abe8:	add	ip, ip, #48	; 0x30
    abec:	cmp	r4, #200	; 0xc8
    abf0:	beq	ae60 <__assert_fail@plt+0x2228>
    abf4:	ldrb	lr, [ip, #49]	; 0x31
    abf8:	cmp	lr, #0
    abfc:	bne	abe4 <__assert_fail@plt+0x1fac>
    ac00:	ldr	sl, [r5, #12]
    ac04:	cmp	sl, #0
    ac08:	ldrne	r7, [r5, #16]
    ac0c:	beq	ada4 <__assert_fail@plt+0x216c>
    ac10:	ldrb	r3, [r5, #36]	; 0x24
    ac14:	cmp	r3, #0
    ac18:	bne	ade0 <__assert_fail@plt+0x21a8>
    ac1c:	movw	r3, #9608	; 0x2588
    ac20:	ldr	r3, [r6, r3]
    ac24:	tst	r3, #2
    ac28:	bne	aef4 <__assert_fail@plt+0x22bc>
    ac2c:	mov	r0, r5
    ac30:	mov	r1, #8
    ac34:	mov	r2, #20
    ac38:	bl	b858 <__assert_fail@plt+0x2c20>
    ac3c:	subs	r9, r0, #0
    ac40:	beq	ae6c <__assert_fail@plt+0x2234>
    ac44:	movw	r3, #9608	; 0x2588
    ac48:	ldr	r2, [r6, r3]
    ac4c:	ldr	r3, [r6]
    ac50:	tst	r2, #2
    ac54:	beq	ae00 <__assert_fail@plt+0x21c8>
    ac58:	cmp	r3, #0
    ac5c:	cmpne	r3, #3
    ac60:	movne	fp, #0
    ac64:	moveq	fp, #1
    ac68:	beq	b038 <__assert_fail@plt+0x2400>
    ac6c:	cmp	r3, #2
    ac70:	beq	afa8 <__assert_fail@plt+0x2370>
    ac74:	ldr	ip, [r5, #4]
    ac78:	mov	r0, r5
    ac7c:	str	ip, [sp, #20]
    ac80:	bl	b268 <__assert_fail@plt+0x2630>
    ac84:	mov	r1, r0
    ac88:	mov	r0, r5
    ac8c:	str	r1, [sp, #16]
    ac90:	bl	b268 <__assert_fail@plt+0x2630>
    ac94:	ldr	ip, [sp, #20]
    ac98:	mov	r3, #16
    ac9c:	add	r2, sp, #36	; 0x24
    aca0:	ldr	r1, [sp, #16]
    aca4:	stm	sp, {r2, r3}
    aca8:	mov	r3, r9
    acac:	str	fp, [sp, #8]
    acb0:	sub	r2, r0, #20
    acb4:	mov	r0, ip
    acb8:	bl	c1cc <__assert_fail@plt+0x3594>
    acbc:	ldr	r0, [pc, #1028]	; b0c8 <__assert_fail@plt+0x2490>
    acc0:	add	r0, pc, r0
    acc4:	bl	c62c <__assert_fail@plt+0x39f4>
    acc8:	mov	r1, r7
    accc:	mov	r0, sl
    acd0:	bl	c6b8 <__assert_fail@plt+0x3a80>
    acd4:	ldr	r0, [pc, #1008]	; b0cc <__assert_fail@plt+0x2494>
    acd8:	add	r0, pc, r0
    acdc:	bl	c62c <__assert_fail@plt+0x39f4>
    ace0:	mov	r0, r9
    ace4:	mov	r1, #20
    ace8:	bl	c6b8 <__assert_fail@plt+0x3a80>
    acec:	ldr	r0, [pc, #988]	; b0d0 <__assert_fail@plt+0x2498>
    acf0:	add	r0, pc, r0
    acf4:	bl	c62c <__assert_fail@plt+0x39f4>
    acf8:	ldr	r3, [r6]
    acfc:	sub	r3, r3, #1
    ad00:	cmp	r3, #1
    ad04:	bhi	adbc <__assert_fail@plt+0x2184>
    ad08:	movw	r3, #9608	; 0x2588
    ad0c:	ldr	r3, [r6, r3]
    ad10:	tst	r3, #4
    ad14:	beq	adbc <__assert_fail@plt+0x2184>
    ad18:	mov	r0, r5
    ad1c:	movw	r1, #32808	; 0x8028
    ad20:	mov	r2, #4
    ad24:	bl	b858 <__assert_fail@plt+0x2c20>
    ad28:	subs	r9, r0, #0
    ad2c:	beq	ae6c <__assert_fail@plt+0x2234>
    ad30:	mov	r0, r5
    ad34:	ldr	fp, [r5, #4]
    ad38:	bl	b268 <__assert_fail@plt+0x2630>
    ad3c:	ldr	r2, [r6]
    ad40:	subs	r3, r2, #2
    ad44:	rsbs	r2, r3, #0
    ad48:	adcs	r2, r2, r3
    ad4c:	mov	r1, r0
    ad50:	mov	r0, fp
    ad54:	bl	bfa8 <__assert_fail@plt+0x3370>
    ad58:	add	r3, sp, #56	; 0x38
    ad5c:	str	r0, [r3, #-24]!	; 0xffffffe8
    ad60:	ldr	r0, [r3]
    ad64:	str	r0, [r9]
    ad68:	ldr	r0, [pc, #868]	; b0d4 <__assert_fail@plt+0x249c>
    ad6c:	add	r0, pc, r0
    ad70:	bl	c62c <__assert_fail@plt+0x39f4>
    ad74:	mov	r0, r9
    ad78:	mov	r1, #4
    ad7c:	bl	c6b8 <__assert_fail@plt+0x3a80>
    ad80:	ldr	r0, [pc, #848]	; b0d8 <__assert_fail@plt+0x24a0>
    ad84:	add	r0, pc, r0
    ad88:	bl	c62c <__assert_fail@plt+0x39f4>
    ad8c:	b	adbc <__assert_fail@plt+0x2184>
    ad90:	ldr	sl, [r5, #12]
    ad94:	mov	r4, #0
    ad98:	cmp	sl, #0
    ad9c:	ldrne	r7, [r5, #16]
    ada0:	bne	ac10 <__assert_fail@plt+0x1fd8>
    ada4:	cmp	r9, #0
    ada8:	bne	b0b8 <__assert_fail@plt+0x2480>
    adac:	ldr	r3, [r6]
    adb0:	sub	r3, r3, #1
    adb4:	cmp	r3, #1
    adb8:	bls	ad08 <__assert_fail@plt+0x20d0>
    adbc:	mov	r0, r5
    adc0:	bl	be4c <__assert_fail@plt+0x3214>
    adc4:	cmp	r0, #0
    adc8:	beq	ae88 <__assert_fail@plt+0x2250>
    adcc:	str	sl, [r5, #12]
    add0:	mov	r0, r5
    add4:	str	r7, [r5, #16]
    add8:	bl	b268 <__assert_fail@plt+0x2630>
    addc:	b	ae70 <__assert_fail@plt+0x2238>
    ade0:	mov	r3, r5
    ade4:	add	ip, sp, #36	; 0x24
    ade8:	ldr	r0, [r3, #20]!
    adec:	ldr	r1, [r3, #4]
    adf0:	ldr	r2, [r3, #8]
    adf4:	ldr	r3, [r3, #12]
    adf8:	stmia	ip!, {r0, r1, r2, r3}
    adfc:	b	ac2c <__assert_fail@plt+0x1ff4>
    ae00:	cmp	r3, #0
    ae04:	cmpne	r3, #3
    ae08:	movne	fp, #0
    ae0c:	moveq	fp, #1
    ae10:	beq	b084 <__assert_fail@plt+0x244c>
    ae14:	cmp	r3, #2
    ae18:	beq	af50 <__assert_fail@plt+0x2318>
    ae1c:	ldr	ip, [r5, #4]
    ae20:	mov	r0, r5
    ae24:	str	ip, [sp, #20]
    ae28:	bl	b268 <__assert_fail@plt+0x2630>
    ae2c:	mov	r1, r0
    ae30:	mov	r0, r5
    ae34:	str	r1, [sp, #16]
    ae38:	bl	b268 <__assert_fail@plt+0x2630>
    ae3c:	ldr	ip, [sp, #20]
    ae40:	mov	r3, r9
    ae44:	ldr	r1, [sp, #16]
    ae48:	str	sl, [sp]
    ae4c:	stmib	sp, {r7, fp}
    ae50:	sub	r2, r0, #20
    ae54:	mov	r0, ip
    ae58:	bl	c1cc <__assert_fail@plt+0x3594>
    ae5c:	b	acbc <__assert_fail@plt+0x2084>
    ae60:	ldr	r0, [pc, #628]	; b0dc <__assert_fail@plt+0x24a4>
    ae64:	add	r0, pc, r0
    ae68:	bl	c62c <__assert_fail@plt+0x39f4>
    ae6c:	mov	r0, #0
    ae70:	ldr	r2, [sp, #52]	; 0x34
    ae74:	ldr	r3, [r8]
    ae78:	cmp	r2, r3
    ae7c:	bne	b0b4 <__assert_fail@plt+0x247c>
    ae80:	add	sp, sp, #60	; 0x3c
    ae84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae88:	add	r4, r4, r4, lsl #1
    ae8c:	mov	r0, r5
    ae90:	lsl	r4, r4, #4
    ae94:	add	r9, r6, r4
    ae98:	add	r4, r4, #24
    ae9c:	add	r1, r9, #4
    aea0:	add	r6, r6, r4
    aea4:	bl	bdf0 <__assert_fail@plt+0x31b8>
    aea8:	mov	r0, r5
    aeac:	bl	be18 <__assert_fail@plt+0x31e0>
    aeb0:	mov	r3, r5
    aeb4:	str	sl, [r9, #24]
    aeb8:	mov	ip, #1
    aebc:	str	r7, [r9, #28]
    aec0:	str	r0, [r9, #20]
    aec4:	ldr	r4, [r3, #20]!
    aec8:	ldr	lr, [r3, #4]
    aecc:	ldr	r0, [r3, #8]
    aed0:	ldr	r3, [r3, #12]
    aed4:	str	r4, [r6, #8]
    aed8:	str	lr, [r6, #12]
    aedc:	str	r0, [r6, #16]
    aee0:	str	r3, [r6, #20]
    aee4:	ldrb	r3, [r5, #36]	; 0x24
    aee8:	strb	ip, [r9, #49]	; 0x31
    aeec:	strb	r3, [r9, #48]	; 0x30
    aef0:	b	adcc <__assert_fail@plt+0x2194>
    aef4:	mov	r1, #20
    aef8:	add	r2, sp, #30
    aefc:	mov	r0, r5
    af00:	bl	b284 <__assert_fail@plt+0x264c>
    af04:	add	r2, sp, #32
    af08:	mov	r1, #6
    af0c:	mov	r9, r0
    af10:	mov	r0, r5
    af14:	bl	b284 <__assert_fail@plt+0x264c>
    af18:	cmp	r0, #0
    af1c:	cmpne	r9, #0
    af20:	mov	r2, r0
    af24:	bne	aff0 <__assert_fail@plt+0x23b8>
    af28:	add	ip, sp, #36	; 0x24
    af2c:	add	r9, r5, #20
    af30:	mov	lr, #1
    af34:	ldm	ip!, {r0, r1, r2, r3}
    af38:	str	r0, [r5, #20]
    af3c:	str	r1, [r9, #4]
    af40:	str	r2, [r9, #8]
    af44:	str	r3, [r9, #12]
    af48:	strb	lr, [r5, #36]	; 0x24
    af4c:	b	adac <__assert_fail@plt+0x2174>
    af50:	tst	r2, #4
    af54:	mov	r0, r5
    af58:	ldr	fp, [r5, #4]
    af5c:	moveq	r2, #20
    af60:	movne	r2, #12
    af64:	str	r2, [sp, #20]
    af68:	bl	b268 <__assert_fail@plt+0x2630>
    af6c:	mov	r1, r0
    af70:	mov	r0, r5
    af74:	str	r1, [sp, #16]
    af78:	bl	b268 <__assert_fail@plt+0x2630>
    af7c:	ldr	r1, [sp, #16]
    af80:	mov	ip, #1
    af84:	str	sl, [sp]
    af88:	str	r7, [sp, #4]
    af8c:	ldr	r2, [sp, #20]
    af90:	mov	r3, r9
    af94:	str	ip, [sp, #8]
    af98:	rsb	r2, r2, r0
    af9c:	mov	r0, fp
    afa0:	bl	c1cc <__assert_fail@plt+0x3594>
    afa4:	b	acbc <__assert_fail@plt+0x2084>
    afa8:	tst	r2, #4
    afac:	mov	r0, r5
    afb0:	ldr	fp, [r5, #4]
    afb4:	movne	r2, #12
    afb8:	moveq	r2, #20
    afbc:	str	r2, [sp, #20]
    afc0:	bl	b268 <__assert_fail@plt+0x2630>
    afc4:	mov	r1, r0
    afc8:	mov	r0, r5
    afcc:	str	r1, [sp, #16]
    afd0:	bl	b268 <__assert_fail@plt+0x2630>
    afd4:	add	ip, sp, #36	; 0x24
    afd8:	mov	r3, #16
    afdc:	str	ip, [sp]
    afe0:	mov	ip, #1
    afe4:	ldr	r1, [sp, #16]
    afe8:	str	r3, [sp, #4]
    afec:	b	af8c <__assert_fail@plt+0x2354>
    aff0:	mov	r0, r9
    aff4:	add	r9, sp, #36	; 0x24
    aff8:	ldrh	r1, [sp, #30]
    affc:	ldrh	r3, [sp, #32]
    b000:	str	sl, [sp]
    b004:	str	r7, [sp, #4]
    b008:	str	r9, [sp, #8]
    b00c:	bl	c2ec <__assert_fail@plt+0x36b4>
    b010:	mov	ip, r9
    b014:	ldm	ip!, {r0, r1, r2, r3}
    b018:	add	lr, r5, #20
    b01c:	mov	ip, #1
    b020:	str	r0, [r5, #20]
    b024:	str	r1, [lr, #4]
    b028:	str	r2, [lr, #8]
    b02c:	str	r3, [lr, #12]
    b030:	strb	ip, [r5, #36]	; 0x24
    b034:	b	ac2c <__assert_fail@plt+0x1ff4>
    b038:	mov	r0, r5
    b03c:	ldr	fp, [r5, #4]
    b040:	bl	b268 <__assert_fail@plt+0x2630>
    b044:	mov	r1, r0
    b048:	mov	r0, r5
    b04c:	str	r1, [sp, #16]
    b050:	bl	b268 <__assert_fail@plt+0x2630>
    b054:	ldr	r1, [sp, #16]
    b058:	add	r2, sp, #36	; 0x24
    b05c:	str	r2, [sp]
    b060:	mov	r2, #1
    b064:	mov	r3, #16
    b068:	str	r3, [sp, #4]
    b06c:	str	r2, [sp, #8]
    b070:	mov	r3, r9
    b074:	sub	r2, r0, #20
    b078:	mov	r0, fp
    b07c:	bl	c1cc <__assert_fail@plt+0x3594>
    b080:	b	acbc <__assert_fail@plt+0x2084>
    b084:	mov	r0, r5
    b088:	ldr	fp, [r5, #4]
    b08c:	bl	b268 <__assert_fail@plt+0x2630>
    b090:	mov	r1, r0
    b094:	mov	r0, r5
    b098:	str	r1, [sp, #16]
    b09c:	bl	b268 <__assert_fail@plt+0x2630>
    b0a0:	ldr	r1, [sp, #16]
    b0a4:	mov	r2, #1
    b0a8:	str	sl, [sp]
    b0ac:	str	r7, [sp, #4]
    b0b0:	b	b06c <__assert_fail@plt+0x2434>
    b0b4:	bl	8adc <__stack_chk_fail@plt>
    b0b8:	mov	sl, r9
    b0bc:	b	ac10 <__assert_fail@plt+0x1fd8>
    b0c0:	andeq	lr, r0, r4, asr r4
    b0c4:	andeq	r0, r0, r0, lsr #1
    b0c8:	andeq	r5, r0, ip, asr r1
    b0cc:	andeq	r5, r0, r8, ror r1
    b0d0:	andeq	r4, r0, ip, lsr #30
    b0d4:	strdeq	r5, [r0], -r4
    b0d8:	muleq	r0, r8, lr
    b0dc:	andeq	r5, r0, r0, lsr #32
    b0e0:	ldr	ip, [pc, #248]	; b1e0 <__assert_fail@plt+0x25a8>
    b0e4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b0e8:	add	ip, pc, ip
    b0ec:	ldr	lr, [pc, #240]	; b1e4 <__assert_fail@plt+0x25ac>
    b0f0:	sub	sp, sp, #532	; 0x214
    b0f4:	add	r7, sp, #12
    b0f8:	mov	r6, r1
    b0fc:	ldr	r4, [sp, #568]	; 0x238
    b100:	mov	sl, r2
    b104:	ldr	r5, [ip, lr]
    b108:	mov	r9, r3
    b10c:	mov	r2, r7
    b110:	mov	r3, #256	; 0x100
    b114:	mov	r1, r4
    b118:	mov	r8, r0
    b11c:	ldr	ip, [r5]
    b120:	str	ip, [sp, #524]	; 0x20c
    b124:	bl	9c28 <__assert_fail@plt+0xff0>
    b128:	mov	ip, #420	; 0x1a4
    b12c:	str	r4, [sp]
    b130:	mov	r2, sl
    b134:	mov	r3, r9
    b138:	mov	r1, r6
    b13c:	str	ip, [sp, #4]
    b140:	mov	fp, r0
    b144:	mov	r0, r8
    b148:	bl	aa64 <__assert_fail@plt+0x1e2c>
    b14c:	cmp	r0, #0
    b150:	bne	b170 <__assert_fail@plt+0x2538>
    b154:	mov	r0, #0
    b158:	ldr	r2, [sp, #524]	; 0x20c
    b15c:	ldr	r3, [r5]
    b160:	cmp	r2, r3
    b164:	bne	b1dc <__assert_fail@plt+0x25a4>
    b168:	add	sp, sp, #532	; 0x214
    b16c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b170:	mov	r0, r4
    b174:	bl	c048 <__assert_fail@plt+0x3410>
    b178:	cmp	r0, #0
    b17c:	bne	b1a8 <__assert_fail@plt+0x2570>
    b180:	tst	fp, #1
    b184:	beq	b1a8 <__assert_fail@plt+0x2570>
    b188:	add	r1, sp, #528	; 0x210
    b18c:	movw	r3, #65020	; 0xfdfc
    b190:	movt	r3, #65535	; 0xffff
    b194:	ldrh	r2, [r1, r3]
    b198:	add	r3, r1, fp, lsl #1
    b19c:	sub	r3, r3, #516	; 0x204
    b1a0:	add	fp, fp, #1
    b1a4:	strh	r2, [r3]
    b1a8:	mov	r2, r7
    b1ac:	lsl	r3, fp, #1
    b1b0:	mov	r0, r6
    b1b4:	mov	r1, #10
    b1b8:	bl	b984 <__assert_fail@plt+0x2d4c>
    b1bc:	cmp	r0, #0
    b1c0:	bne	b154 <__assert_fail@plt+0x251c>
    b1c4:	mov	r0, r8
    b1c8:	mov	r1, r6
    b1cc:	ldr	r2, [r4, #12]
    b1d0:	ldr	r3, [r4, #16]
    b1d4:	bl	ab94 <__assert_fail@plt+0x1f5c>
    b1d8:	b	b158 <__assert_fail@plt+0x2520>
    b1dc:	bl	8adc <__stack_chk_fail@plt>
    b1e0:	andeq	sp, r0, r0, lsl pc
    b1e4:	andeq	r0, r0, r0, lsr #1
    b1e8:	movw	r3, #9612	; 0x258c
    b1ec:	str	r1, [r0, r3]
    b1f0:	bx	lr
    b1f4:	push	{r4, r5, r6, lr}
    b1f8:	mov	r5, r3
    b1fc:	ldr	r3, [r0, #8]
    b200:	mov	r4, r0
    b204:	cmp	r3, #19
    b208:	bhi	b214 <__assert_fail@plt+0x25dc>
    b20c:	mov	r0, #0
    b210:	pop	{r4, r5, r6, pc}
    b214:	ldr	ip, [r0, #4]
    b218:	mov	r3, #0
    b21c:	mov	r0, ip
    b220:	strb	r3, [r0], #1
    b224:	add	r0, r0, #1
    b228:	strb	r3, [ip, #1]
    b22c:	strb	r3, [r0], #1
    b230:	strb	r3, [r0]
    b234:	ldr	r0, [r4, #4]
    b238:	bl	c4f8 <__assert_fail@plt+0x38c0>
    b23c:	ldr	r2, [r4, #4]
    b240:	ldr	r6, [r5]
    b244:	mov	r0, #1
    b248:	ldr	r4, [r5, #4]
    b24c:	ldr	ip, [r5, #8]
    b250:	ldr	r1, [r5, #12]
    b254:	str	r6, [r2, #4]
    b258:	str	r4, [r2, #8]
    b25c:	str	ip, [r2, #12]
    b260:	str	r1, [r2, #16]
    b264:	pop	{r4, r5, r6, pc}
    b268:	push	{r3, lr}
    b26c:	ldr	r0, [r0, #4]
    b270:	add	r0, r0, #2
    b274:	bl	c4d0 <__assert_fail@plt+0x3898>
    b278:	add	r0, r0, #20
    b27c:	uxth	r0, r0
    b280:	pop	{r3, pc}
    b284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b288:	sub	sp, sp, #12
    b28c:	mov	r5, r0
    b290:	mov	r6, r1
    b294:	str	r2, [sp, #4]
    b298:	bl	b268 <__assert_fail@plt+0x2630>
    b29c:	ldr	r3, [r5]
    b2a0:	cmp	r3, #0
    b2a4:	mov	r8, r0
    b2a8:	beq	b2b8 <__assert_fail@plt+0x2680>
    b2ac:	ldr	r3, [r3]
    b2b0:	cmp	r3, #3
    b2b4:	beq	b354 <__assert_fail@plt+0x271c>
    b2b8:	cmp	r8, #20
    b2bc:	movhi	r4, #20
    b2c0:	movwhi	r9, #32808	; 0x8028
    b2c4:	movwhi	sl, #9608	; 0x2588
    b2c8:	bls	b30c <__assert_fail@plt+0x26d4>
    b2cc:	ldr	r0, [r5, #4]
    b2d0:	add	r7, r4, #4
    b2d4:	add	r0, r0, r4
    b2d8:	add	r4, r4, #2
    b2dc:	bl	c4d0 <__assert_fail@plt+0x3898>
    b2e0:	mov	fp, r0
    b2e4:	ldr	r0, [r5, #4]
    b2e8:	add	r0, r0, r4
    b2ec:	bl	c4d0 <__assert_fail@plt+0x3898>
    b2f0:	cmp	fp, r6
    b2f4:	mov	r4, r0
    b2f8:	beq	b36c <__assert_fail@plt+0x2734>
    b2fc:	cmp	fp, #8
    b300:	beq	b318 <__assert_fail@plt+0x26e0>
    b304:	cmp	fp, r9
    b308:	bne	b320 <__assert_fail@plt+0x26e8>
    b30c:	mov	r0, #0
    b310:	add	sp, sp, #12
    b314:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b318:	cmp	r6, r9
    b31c:	bne	b30c <__assert_fail@plt+0x26d4>
    b320:	ldr	r3, [r5]
    b324:	mov	r0, r4
    b328:	cmp	r3, #0
    b32c:	beq	b33c <__assert_fail@plt+0x2704>
    b330:	ldr	r3, [r3, sl]
    b334:	tst	r3, #128	; 0x80
    b338:	bne	b344 <__assert_fail@plt+0x270c>
    b33c:	bl	c4c4 <__assert_fail@plt+0x388c>
    b340:	mov	r4, r0
    b344:	add	r4, r4, r7
    b348:	cmp	r8, r4
    b34c:	bhi	b2cc <__assert_fail@plt+0x2694>
    b350:	b	b30c <__assert_fail@plt+0x26d4>
    b354:	cmp	r6, #20
    b358:	moveq	r6, #21
    b35c:	beq	b2b8 <__assert_fail@plt+0x2680>
    b360:	cmp	r6, #21
    b364:	moveq	r6, #20
    b368:	b	b2b8 <__assert_fail@plt+0x2680>
    b36c:	ldr	r3, [sp, #4]
    b370:	strh	r0, [r3]
    b374:	ldr	r0, [r5, #4]
    b378:	add	r0, r0, r7
    b37c:	b	b310 <__assert_fail@plt+0x26d8>
    b380:	ldr	r3, [pc, #100]	; b3ec <__assert_fail@plt+0x27b4>
    b384:	mov	ip, #0
    b388:	push	{r4, lr}
    b38c:	add	r3, pc, r3
    b390:	ldr	lr, [pc, #88]	; b3f0 <__assert_fail@plt+0x27b8>
    b394:	sub	sp, sp, #8
    b398:	add	r2, sp, #8
    b39c:	ldr	r4, [r3, lr]
    b3a0:	strh	ip, [r2, #-6]!
    b3a4:	ldr	r3, [r4]
    b3a8:	str	r3, [sp, #4]
    b3ac:	bl	b284 <__assert_fail@plt+0x264c>
    b3b0:	cmp	r0, #0
    b3b4:	beq	b3e0 <__assert_fail@plt+0x27a8>
    b3b8:	ldrh	r0, [sp, #2]
    b3bc:	cmp	r0, #0
    b3c0:	movne	r0, #2
    b3c4:	moveq	r0, #0
    b3c8:	ldr	r2, [sp, #4]
    b3cc:	ldr	r3, [r4]
    b3d0:	cmp	r2, r3
    b3d4:	bne	b3e8 <__assert_fail@plt+0x27b0>
    b3d8:	add	sp, sp, #8
    b3dc:	pop	{r4, pc}
    b3e0:	mov	r0, #1
    b3e4:	b	b3c8 <__assert_fail@plt+0x2790>
    b3e8:	bl	8adc <__stack_chk_fail@plt>
    b3ec:	andeq	sp, r0, ip, ror #24
    b3f0:	andeq	r0, r0, r0, lsr #1
    b3f4:	ldr	ip, [pc, #136]	; b484 <__assert_fail@plt+0x284c>
    b3f8:	push	{r4, r5, r6, lr}
    b3fc:	add	ip, pc, ip
    b400:	ldr	lr, [pc, #128]	; b488 <__assert_fail@plt+0x2850>
    b404:	sub	sp, sp, #16
    b408:	add	r3, sp, #16
    b40c:	mov	r6, r2
    b410:	mov	r5, #0
    b414:	ldr	r4, [ip, lr]
    b418:	strh	r5, [r3, #-10]!
    b41c:	mov	r2, r3
    b420:	ldr	r3, [r4]
    b424:	str	r3, [sp, #12]
    b428:	bl	b284 <__assert_fail@plt+0x264c>
    b42c:	cmp	r0, #0
    b430:	beq	b460 <__assert_fail@plt+0x2828>
    b434:	ldrh	r3, [sp, #6]
    b438:	cmp	r3, #4
    b43c:	movne	r5, #2
    b440:	beq	b468 <__assert_fail@plt+0x2830>
    b444:	ldr	r2, [sp, #12]
    b448:	mov	r0, r5
    b44c:	ldr	r3, [r4]
    b450:	cmp	r2, r3
    b454:	bne	b480 <__assert_fail@plt+0x2848>
    b458:	add	sp, sp, #16
    b45c:	pop	{r4, r5, r6, pc}
    b460:	mov	r5, #1
    b464:	b	b444 <__assert_fail@plt+0x280c>
    b468:	ldr	r0, [r0]
    b46c:	str	r0, [sp, #8]
    b470:	ldr	r3, [sp, #8]
    b474:	rev	r3, r3
    b478:	str	r3, [r6]
    b47c:	b	b444 <__assert_fail@plt+0x280c>
    b480:	bl	8adc <__stack_chk_fail@plt>
    b484:	strdeq	sp, [r0], -ip
    b488:	andeq	r0, r0, r0, lsr #1
    b48c:	ldr	ip, [pc, #156]	; b530 <__assert_fail@plt+0x28f8>
    b490:	push	{r4, r5, r6, r7, r8, lr}
    b494:	add	ip, pc, ip
    b498:	ldr	lr, [pc, #148]	; b534 <__assert_fail@plt+0x28fc>
    b49c:	sub	sp, sp, #16
    b4a0:	add	r3, sp, #16
    b4a4:	mov	r7, r2
    b4a8:	mov	r8, #0
    b4ac:	ldr	r6, [ip, lr]
    b4b0:	strh	r8, [r3, #-14]!
    b4b4:	mov	r2, r3
    b4b8:	ldr	r3, [r6]
    b4bc:	str	r3, [sp, #12]
    b4c0:	bl	b284 <__assert_fail@plt+0x264c>
    b4c4:	subs	r2, r0, #0
    b4c8:	beq	b4f8 <__assert_fail@plt+0x28c0>
    b4cc:	ldrh	r3, [sp, #2]
    b4d0:	cmp	r3, #8
    b4d4:	movne	r3, #2
    b4d8:	beq	b500 <__assert_fail@plt+0x28c8>
    b4dc:	ldr	r2, [sp, #12]
    b4e0:	mov	r0, r3
    b4e4:	ldr	r3, [r6]
    b4e8:	cmp	r2, r3
    b4ec:	bne	b52c <__assert_fail@plt+0x28f4>
    b4f0:	add	sp, sp, #16
    b4f4:	pop	{r4, r5, r6, r7, r8, pc}
    b4f8:	mov	r3, #1
    b4fc:	b	b4dc <__assert_fail@plt+0x28a4>
    b500:	ldr	r0, [r2]
    b504:	add	ip, sp, #4
    b508:	ldr	r1, [r2, #4]
    b50c:	mov	r3, r8
    b510:	rev	r5, r0
    b514:	stmia	ip!, {r0, r1}
    b518:	ldr	r2, [sp, #8]
    b51c:	rev	r2, r2
    b520:	orr	r4, r8, r2
    b524:	strd	r4, [r7]
    b528:	b	b4dc <__assert_fail@plt+0x28a4>
    b52c:	bl	8adc <__stack_chk_fail@plt>
    b530:	andeq	sp, r0, r4, ror #22
    b534:	andeq	r0, r0, r0, lsr #1
    b538:	push	{r4, r5, r6, r7, r8, lr}
    b53c:	sub	sp, sp, #8
    b540:	ldr	lr, [pc, #128]	; b5c8 <__assert_fail@plt+0x2990>
    b544:	add	ip, sp, #8
    b548:	ldr	r4, [pc, #124]	; b5cc <__assert_fail@plt+0x2994>
    b54c:	mov	r8, r3
    b550:	add	lr, pc, lr
    b554:	mov	r7, r2
    b558:	mov	r5, #0
    b55c:	ldr	r4, [lr, r4]
    b560:	strh	r5, [ip, #-6]!
    b564:	mov	r2, ip
    b568:	ldr	r3, [r4]
    b56c:	str	r3, [sp, #4]
    b570:	bl	b284 <__assert_fail@plt+0x264c>
    b574:	subs	r1, r0, #0
    b578:	beq	b5bc <__assert_fail@plt+0x2984>
    b57c:	ldrh	r6, [sp, #2]
    b580:	cmp	r6, r8
    b584:	movcs	r0, #3
    b588:	bcc	b5a4 <__assert_fail@plt+0x296c>
    b58c:	ldr	r2, [sp, #4]
    b590:	ldr	r3, [r4]
    b594:	cmp	r2, r3
    b598:	bne	b5c4 <__assert_fail@plt+0x298c>
    b59c:	add	sp, sp, #8
    b5a0:	pop	{r4, r5, r6, r7, r8, pc}
    b5a4:	mov	r0, r7
    b5a8:	mov	r2, r6
    b5ac:	bl	8ab8 <memcpy@plt>
    b5b0:	strb	r5, [r7, r6]
    b5b4:	mov	r0, r5
    b5b8:	b	b58c <__assert_fail@plt+0x2954>
    b5bc:	mov	r0, #1
    b5c0:	b	b58c <__assert_fail@plt+0x2954>
    b5c4:	bl	8adc <__stack_chk_fail@plt>
    b5c8:	andeq	sp, r0, r8, lsr #21
    b5cc:	andeq	r0, r0, r0, lsr #1
    b5d0:	push	{r4, r5, r6, r7, r8, lr}
    b5d4:	sub	sp, sp, #8
    b5d8:	ldr	lr, [pc, #336]	; b730 <__assert_fail@plt+0x2af8>
    b5dc:	add	ip, sp, #8
    b5e0:	ldr	r4, [pc, #332]	; b734 <__assert_fail@plt+0x2afc>
    b5e4:	mov	r6, r3
    b5e8:	add	lr, pc, lr
    b5ec:	mov	r7, r2
    b5f0:	mov	r5, #0
    b5f4:	ldr	r4, [lr, r4]
    b5f8:	strh	r5, [ip, #-6]!
    b5fc:	mov	r2, ip
    b600:	ldr	r3, [r4]
    b604:	str	r3, [sp, #4]
    b608:	bl	b284 <__assert_fail@plt+0x264c>
    b60c:	subs	r8, r0, #0
    b610:	beq	b688 <__assert_fail@plt+0x2a50>
    b614:	ldrh	r3, [sp, #2]
    b618:	cmp	r3, #3
    b61c:	movls	r0, #2
    b620:	bhi	b63c <__assert_fail@plt+0x2a04>
    b624:	ldr	r2, [sp, #4]
    b628:	ldr	r3, [r4]
    b62c:	cmp	r2, r3
    b630:	bne	b72c <__assert_fail@plt+0x2af4>
    b634:	add	sp, sp, #8
    b638:	pop	{r4, r5, r6, r7, r8, pc}
    b63c:	ldrb	r2, [r8, #1]
    b640:	cmp	r2, #1
    b644:	beq	b66c <__assert_fail@plt+0x2a34>
    b648:	cmp	r2, #2
    b64c:	bne	b690 <__assert_fail@plt+0x2a58>
    b650:	ldr	r2, [r6]
    b654:	cmp	r2, #27
    b658:	bhi	b698 <__assert_fail@plt+0x2a60>
    b65c:	mov	r3, #28
    b660:	mov	r0, #2
    b664:	str	r3, [r6]
    b668:	b	b624 <__assert_fail@plt+0x29ec>
    b66c:	ldr	r2, [r6]
    b670:	cmp	r2, #15
    b674:	bhi	b6f0 <__assert_fail@plt+0x2ab8>
    b678:	mov	r3, #16
    b67c:	mov	r0, #2
    b680:	str	r3, [r6]
    b684:	b	b624 <__assert_fail@plt+0x29ec>
    b688:	mov	r0, #1
    b68c:	b	b624 <__assert_fail@plt+0x29ec>
    b690:	mov	r0, #4
    b694:	b	b624 <__assert_fail@plt+0x29ec>
    b698:	cmp	r3, #20
    b69c:	bne	b65c <__assert_fail@plt+0x2a24>
    b6a0:	mov	r1, r5
    b6a4:	mov	r0, r7
    b6a8:	bl	8b78 <memset@plt>
    b6ac:	mov	r3, #28
    b6b0:	mov	r2, #10
    b6b4:	strh	r2, [r7]
    b6b8:	str	r3, [r6]
    b6bc:	mov	r3, r8
    b6c0:	ldrh	r1, [r8, #2]
    b6c4:	mov	r0, r5
    b6c8:	strh	r1, [r7, #2]
    b6cc:	ldr	r5, [r3, #4]!
    b6d0:	ldr	ip, [r3, #4]
    b6d4:	ldr	r1, [r3, #8]
    b6d8:	ldr	r3, [r3, #12]
    b6dc:	str	r5, [r7, #8]
    b6e0:	str	ip, [r7, #12]
    b6e4:	str	r1, [r7, #16]
    b6e8:	str	r3, [r7, #20]
    b6ec:	b	b624 <__assert_fail@plt+0x29ec>
    b6f0:	cmp	r3, #8
    b6f4:	bne	b678 <__assert_fail@plt+0x2a40>
    b6f8:	mov	r0, r7
    b6fc:	mov	r1, r5
    b700:	bl	8b78 <memset@plt>
    b704:	mov	r3, #16
    b708:	mov	r2, #2
    b70c:	strh	r2, [r7]
    b710:	str	r3, [r6]
    b714:	mov	r0, r5
    b718:	ldrh	r3, [r8, #2]
    b71c:	strh	r3, [r7, #2]
    b720:	ldr	r3, [r8, #4]
    b724:	str	r3, [r7, #4]
    b728:	b	b624 <__assert_fail@plt+0x29ec>
    b72c:	bl	8adc <__stack_chk_fail@plt>
    b730:	andeq	sp, r0, r0, lsl sl
    b734:	andeq	r0, r0, r0, lsr #1
    b738:	push	{r4, r5, r6, lr}
    b73c:	mov	r6, r0
    b740:	mov	r5, r2
    b744:	mov	r4, r3
    b748:	bl	b5d0 <__assert_fail@plt+0x2998>
    b74c:	cmp	r0, #0
    b750:	popne	{r4, r5, r6, pc}
    b754:	mov	r0, r6
    b758:	mov	r1, r5
    b75c:	ldr	r2, [r4]
    b760:	movw	r3, #42050	; 0xa442
    b764:	pop	{r4, r5, r6, lr}
    b768:	movt	r3, #8466	; 0x2112
    b76c:	b	c538 <__assert_fail@plt+0x3900>
    b770:	push	{r4, r5, r6, r7, r8, lr}
    b774:	mov	r7, r0
    b778:	mov	r6, r2
    b77c:	mov	r5, r3
    b780:	ldr	r4, [sp, #24]
    b784:	bl	b5d0 <__assert_fail@plt+0x2998>
    b788:	cmp	r0, #0
    b78c:	popne	{r4, r5, r6, r7, r8, pc}
    b790:	mov	r0, r7
    b794:	mov	r1, r6
    b798:	ldr	r2, [r5]
    b79c:	mov	r3, r4
    b7a0:	pop	{r4, r5, r6, r7, r8, lr}
    b7a4:	b	c538 <__assert_fail@plt+0x3900>
    b7a8:	ldr	r3, [pc, #160]	; b850 <__assert_fail@plt+0x2c18>
    b7ac:	ldr	ip, [pc, #160]	; b854 <__assert_fail@plt+0x2c1c>
    b7b0:	add	r3, pc, r3
    b7b4:	push	{r4, r5, r6, lr}
    b7b8:	sub	sp, sp, #8
    b7bc:	ldr	r4, [r3, ip]
    b7c0:	add	r2, sp, #8
    b7c4:	mov	r6, r1
    b7c8:	mov	r5, #0
    b7cc:	mov	r1, #9
    b7d0:	strh	r5, [r2, #-6]!
    b7d4:	ldr	r3, [r4]
    b7d8:	str	r3, [sp, #4]
    b7dc:	bl	b284 <__assert_fail@plt+0x264c>
    b7e0:	cmp	r0, #0
    b7e4:	beq	b844 <__assert_fail@plt+0x2c0c>
    b7e8:	ldrh	r3, [sp, #2]
    b7ec:	cmp	r3, #3
    b7f0:	bhi	b810 <__assert_fail@plt+0x2bd8>
    b7f4:	mov	r0, #2
    b7f8:	ldr	r2, [sp, #4]
    b7fc:	ldr	r3, [r4]
    b800:	cmp	r2, r3
    b804:	bne	b84c <__assert_fail@plt+0x2c14>
    b808:	add	sp, sp, #8
    b80c:	pop	{r4, r5, r6, pc}
    b810:	ldrb	r3, [r0, #2]
    b814:	ldrb	r1, [r0, #3]
    b818:	and	r3, r3, #7
    b81c:	sub	r2, r3, #3
    b820:	cmp	r2, #3
    b824:	bhi	b7f4 <__assert_fail@plt+0x2bbc>
    b828:	cmp	r1, #99	; 0x63
    b82c:	bhi	b7f4 <__assert_fail@plt+0x2bbc>
    b830:	mov	r2, #100	; 0x64
    b834:	mov	r0, r5
    b838:	smlabb	r3, r2, r3, r1
    b83c:	str	r3, [r6]
    b840:	b	b7f8 <__assert_fail@plt+0x2bc0>
    b844:	mov	r0, #1
    b848:	b	b7f8 <__assert_fail@plt+0x2bc0>
    b84c:	bl	8adc <__stack_chk_fail@plt>
    b850:	andeq	sp, r0, r8, asr #16
    b854:	andeq	r0, r0, r0, lsr #1
    b858:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    b85c:	mov	r4, r0
    b860:	mov	r7, r1
    b864:	mov	r6, r2
    b868:	bl	b268 <__assert_fail@plt+0x2630>
    b86c:	ldr	r3, [r4]
    b870:	cmp	r3, #0
    b874:	mov	r5, r0
    b878:	beq	b888 <__assert_fail@plt+0x2c50>
    b87c:	ldr	r3, [r3]
    b880:	cmp	r3, #3
    b884:	beq	b93c <__assert_fail@plt+0x2d04>
    b888:	add	r2, r6, #4
    b88c:	ldr	r3, [r4, #8]
    b890:	add	r2, r2, r5
    b894:	cmp	r2, r3
    b898:	bhi	b954 <__assert_fail@plt+0x2d1c>
    b89c:	ldr	r0, [r4, #4]
    b8a0:	uxth	r1, r7
    b8a4:	add	r0, r0, r5
    b8a8:	bl	c4e0 <__assert_fail@plt+0x38a8>
    b8ac:	ldr	r3, [r4]
    b8b0:	cmp	r3, #0
    b8b4:	mov	r7, r0
    b8b8:	beq	b8cc <__assert_fail@plt+0x2c94>
    b8bc:	movw	r2, #9608	; 0x2588
    b8c0:	ldr	r3, [r3, r2]
    b8c4:	tst	r3, #128	; 0x80
    b8c8:	bne	b95c <__assert_fail@plt+0x2d24>
    b8cc:	mov	r0, r4
    b8d0:	bl	c048 <__assert_fail@plt+0x3410>
    b8d4:	cmp	r0, #0
    b8d8:	beq	b970 <__assert_fail@plt+0x2d38>
    b8dc:	uxth	r1, r6
    b8e0:	mov	r8, r1
    b8e4:	mov	r0, r7
    b8e8:	bl	c4e0 <__assert_fail@plt+0x38a8>
    b8ec:	mov	r7, r0
    b8f0:	mov	r0, r6
    b8f4:	bl	c4b8 <__assert_fail@plt+0x3880>
    b8f8:	add	r9, r7, r6
    b8fc:	mov	r1, #32
    b900:	mov	r2, r0
    b904:	mov	r0, r9
    b908:	bl	8b78 <memset@plt>
    b90c:	mov	r0, r6
    b910:	bl	c4b8 <__assert_fail@plt+0x3880>
    b914:	add	r0, r5, r0
    b918:	uxth	r5, r0
    b91c:	add	r5, r5, r8
    b920:	ldr	r0, [r4, #4]
    b924:	sub	r1, r5, #16
    b928:	add	r0, r0, #2
    b92c:	uxth	r1, r1
    b930:	bl	c4e0 <__assert_fail@plt+0x38a8>
    b934:	mov	r0, r7
    b938:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    b93c:	cmp	r7, #21
    b940:	moveq	r7, #20
    b944:	beq	b888 <__assert_fail@plt+0x2c50>
    b948:	cmp	r7, #20
    b94c:	moveq	r7, #21
    b950:	b	b888 <__assert_fail@plt+0x2c50>
    b954:	mov	r0, #0
    b958:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    b95c:	uxth	r8, r6
    b960:	mov	r1, r8
    b964:	bl	c4e0 <__assert_fail@plt+0x38a8>
    b968:	mov	r7, r0
    b96c:	b	b91c <__assert_fail@plt+0x2ce4>
    b970:	mov	r0, r6
    b974:	uxth	r8, r6
    b978:	bl	c4c4 <__assert_fail@plt+0x388c>
    b97c:	uxth	r1, r0
    b980:	b	b8e4 <__assert_fail@plt+0x2cac>
    b984:	push	{r3, r4, r5, lr}
    b988:	mov	r5, r2
    b98c:	mov	r2, r3
    b990:	mov	r4, r3
    b994:	bl	b858 <__assert_fail@plt+0x2c20>
    b998:	cmp	r0, #0
    b99c:	beq	b9b4 <__assert_fail@plt+0x2d7c>
    b9a0:	mov	r1, r5
    b9a4:	mov	r2, r4
    b9a8:	bl	8ab8 <memcpy@plt>
    b9ac:	mov	r0, #0
    b9b0:	pop	{r3, r4, r5, pc}
    b9b4:	mov	r0, #3
    b9b8:	pop	{r3, r4, r5, pc}
    b9bc:	mov	r2, #0
    b9c0:	mov	r3, r2
    b9c4:	b	b984 <__assert_fail@plt+0x2d4c>
    b9c8:	push	{lr}		; (str lr, [sp, #-4]!)
    b9cc:	sub	sp, sp, #12
    b9d0:	add	ip, sp, #8
    b9d4:	rev	r2, r2
    b9d8:	mov	r3, #4
    b9dc:	str	r2, [ip, #-4]!
    b9e0:	mov	r2, ip
    b9e4:	bl	b984 <__assert_fail@plt+0x2d4c>
    b9e8:	add	sp, sp, #12
    b9ec:	pop	{pc}		; (ldr pc, [sp], #4)
    b9f0:	ldr	ip, [pc, #76]	; ba44 <__assert_fail@plt+0x2e0c>
    b9f4:	push	{r4, r5, lr}
    b9f8:	add	ip, pc, ip
    b9fc:	ldr	r4, [pc, #68]	; ba48 <__assert_fail@plt+0x2e10>
    ba00:	sub	sp, sp, #20
    ba04:	rev	lr, r2
    ba08:	rev	r5, r3
    ba0c:	add	r2, sp, #4
    ba10:	mov	r3, #8
    ba14:	ldr	r4, [ip, r4]
    ba18:	stmib	sp, {r5, lr}
    ba1c:	ldr	ip, [r4]
    ba20:	str	ip, [sp, #12]
    ba24:	bl	b984 <__assert_fail@plt+0x2d4c>
    ba28:	ldr	r2, [sp, #12]
    ba2c:	ldr	r3, [r4]
    ba30:	cmp	r2, r3
    ba34:	bne	ba40 <__assert_fail@plt+0x2e08>
    ba38:	add	sp, sp, #20
    ba3c:	pop	{r4, r5, pc}
    ba40:	bl	8adc <__stack_chk_fail@plt>
    ba44:	andeq	sp, r0, r0, lsl #12
    ba48:	andeq	r0, r0, r0, lsr #1
    ba4c:	push	{r4, r5, r6, lr}
    ba50:	mov	r5, r0
    ba54:	mov	r0, r2
    ba58:	mov	r4, r2
    ba5c:	mov	r6, r1
    ba60:	bl	8b54 <strlen@plt>
    ba64:	mov	r1, r6
    ba68:	mov	r2, r4
    ba6c:	mov	r3, r0
    ba70:	mov	r0, r5
    ba74:	pop	{r4, r5, r6, lr}
    ba78:	b	b984 <__assert_fail@plt+0x2d4c>
    ba7c:	ldr	ip, [pc, #212]	; bb58 <__assert_fail@plt+0x2f20>
    ba80:	cmp	r3, #15
    ba84:	push	{r4, r5, r6, r7, lr}
    ba88:	add	ip, pc, ip
    ba8c:	ldr	r4, [pc, #200]	; bb5c <__assert_fail@plt+0x2f24>
    ba90:	sub	sp, sp, #12
    ba94:	ldr	r4, [ip, r4]
    ba98:	ldr	ip, [r4]
    ba9c:	str	ip, [sp, #4]
    baa0:	bhi	bac0 <__assert_fail@plt+0x2e88>
    baa4:	mov	r0, #2
    baa8:	ldr	r2, [sp, #4]
    baac:	ldr	r3, [r4]
    bab0:	cmp	r2, r3
    bab4:	bne	bb54 <__assert_fail@plt+0x2f1c>
    bab8:	add	sp, sp, #12
    babc:	pop	{r4, r5, r6, r7, pc}
    bac0:	ldrh	ip, [r2]
    bac4:	cmp	ip, #2
    bac8:	beq	bb00 <__assert_fail@plt+0x2ec8>
    bacc:	cmp	ip, #10
    bad0:	bne	baf8 <__assert_fail@plt+0x2ec0>
    bad4:	cmp	r3, #27
    bad8:	bls	baa4 <__assert_fail@plt+0x2e6c>
    badc:	ldrh	r3, [r2, #2]
    bae0:	add	r7, r2, #8
    bae4:	mov	r6, #2
    bae8:	mov	r2, #20
    baec:	mov	r5, #16
    baf0:	strh	r3, [sp, #2]
    baf4:	b	bb18 <__assert_fail@plt+0x2ee0>
    baf8:	mov	r0, #4
    bafc:	b	baa8 <__assert_fail@plt+0x2e70>
    bb00:	ldrh	r3, [r2, #2]
    bb04:	add	r7, r2, #4
    bb08:	mov	r6, #1
    bb0c:	mov	r2, #8
    bb10:	mov	r5, #4
    bb14:	strh	r3, [sp, #2]
    bb18:	bl	b858 <__assert_fail@plt+0x2c20>
    bb1c:	subs	r3, r0, #0
    bb20:	moveq	r0, #3
    bb24:	beq	baa8 <__assert_fail@plt+0x2e70>
    bb28:	ldrh	ip, [sp, #2]
    bb2c:	mov	r2, r5
    bb30:	mov	r1, r7
    bb34:	mov	r5, #0
    bb38:	strb	r6, [r3, #1]
    bb3c:	add	r0, r3, #4
    bb40:	strh	ip, [r3, #2]
    bb44:	strb	r5, [r3]
    bb48:	bl	8ab8 <memcpy@plt>
    bb4c:	mov	r0, r5
    bb50:	b	baa8 <__assert_fail@plt+0x2e70>
    bb54:	bl	8adc <__stack_chk_fail@plt>
    bb58:	andeq	sp, r0, r0, ror r5
    bb5c:	andeq	r0, r0, r0, lsr #1
    bb60:	ldr	ip, [pc, #148]	; bbfc <__assert_fail@plt+0x2fc4>
    bb64:	push	{r4, r5, r6, r7, r8, lr}
    bb68:	cmp	r3, #128	; 0x80
    bb6c:	movcc	r4, r3
    bb70:	movcs	r4, #128	; 0x80
    bb74:	ldr	r3, [pc, #132]	; bc00 <__assert_fail@plt+0x2fc8>
    bb78:	add	ip, pc, ip
    bb7c:	sub	sp, sp, #136	; 0x88
    bb80:	mov	r7, r0
    bb84:	add	r5, sp, #4
    bb88:	mov	r8, r1
    bb8c:	ldr	r6, [ip, r3]
    bb90:	mov	r1, r2
    bb94:	mov	r3, #128	; 0x80
    bb98:	mov	r2, r4
    bb9c:	mov	r0, r5
    bba0:	ldr	ip, [r6]
    bba4:	str	ip, [sp, #132]	; 0x84
    bba8:	bl	8af4 <__memcpy_chk@plt>
    bbac:	mov	r0, r7
    bbb0:	mov	r1, r5
    bbb4:	mov	r2, r4
    bbb8:	movw	r3, #42050	; 0xa442
    bbbc:	movt	r3, #8466	; 0x2112
    bbc0:	bl	c538 <__assert_fail@plt+0x3900>
    bbc4:	cmp	r0, #0
    bbc8:	bne	bbe0 <__assert_fail@plt+0x2fa8>
    bbcc:	mov	r0, r7
    bbd0:	mov	r1, r8
    bbd4:	mov	r2, r5
    bbd8:	mov	r3, r4
    bbdc:	bl	ba7c <__assert_fail@plt+0x2e44>
    bbe0:	ldr	r2, [sp, #132]	; 0x84
    bbe4:	ldr	r3, [r6]
    bbe8:	cmp	r2, r3
    bbec:	bne	bbf8 <__assert_fail@plt+0x2fc0>
    bbf0:	add	sp, sp, #136	; 0x88
    bbf4:	pop	{r4, r5, r6, r7, r8, pc}
    bbf8:	bl	8adc <__stack_chk_fail@plt>
    bbfc:	andeq	sp, r0, r0, lsl #9
    bc00:	andeq	r0, r0, r0, lsr #1
    bc04:	ldr	ip, [pc, #148]	; bca0 <__assert_fail@plt+0x3068>
    bc08:	push	{r4, r5, r6, r7, r8, r9, lr}
    bc0c:	cmp	r3, #128	; 0x80
    bc10:	movcc	r4, r3
    bc14:	movcs	r4, #128	; 0x80
    bc18:	ldr	r3, [pc, #132]	; bca4 <__assert_fail@plt+0x306c>
    bc1c:	add	ip, pc, ip
    bc20:	sub	sp, sp, #140	; 0x8c
    bc24:	mov	r7, r0
    bc28:	add	r5, sp, #4
    bc2c:	mov	r9, r1
    bc30:	ldr	r6, [ip, r3]
    bc34:	mov	r1, r2
    bc38:	ldr	r8, [sp, #168]	; 0xa8
    bc3c:	mov	r2, r4
    bc40:	mov	r3, #128	; 0x80
    bc44:	mov	r0, r5
    bc48:	ldr	ip, [r6]
    bc4c:	str	ip, [sp, #132]	; 0x84
    bc50:	bl	8af4 <__memcpy_chk@plt>
    bc54:	mov	r0, r7
    bc58:	mov	r1, r5
    bc5c:	mov	r2, r4
    bc60:	mov	r3, r8
    bc64:	bl	c538 <__assert_fail@plt+0x3900>
    bc68:	cmp	r0, #0
    bc6c:	bne	bc84 <__assert_fail@plt+0x304c>
    bc70:	mov	r0, r7
    bc74:	mov	r1, r9
    bc78:	mov	r2, r5
    bc7c:	mov	r3, r4
    bc80:	bl	ba7c <__assert_fail@plt+0x2e44>
    bc84:	ldr	r2, [sp, #132]	; 0x84
    bc88:	ldr	r3, [r6]
    bc8c:	cmp	r2, r3
    bc90:	bne	bc9c <__assert_fail@plt+0x3064>
    bc94:	add	sp, sp, #140	; 0x8c
    bc98:	pop	{r4, r5, r6, r7, r8, r9, pc}
    bc9c:	bl	8adc <__stack_chk_fail@plt>
    bca0:	ldrdeq	sp, [r0], -ip
    bca4:	andeq	r0, r0, r0, lsr #1
    bca8:	push	{r3, r4, r5, r6, r7, lr}
    bcac:	subs	r5, r1, #0
    bcb0:	mov	r4, r0
    bcb4:	mov	r6, r2
    bcb8:	beq	bd38 <__assert_fail@plt+0x3100>
    bcbc:	ldrb	r7, [r0]
    bcc0:	lsrs	r7, r7, #6
    bcc4:	bne	bdc4 <__assert_fail@plt+0x318c>
    bcc8:	cmp	r5, #3
    bccc:	bls	bd50 <__assert_fail@plt+0x3118>
    bcd0:	add	r0, r0, #2
    bcd4:	bl	c4d0 <__assert_fail@plt+0x3898>
    bcd8:	cmp	r6, #0
    bcdc:	add	r7, r0, #20
    bce0:	bne	bd7c <__assert_fail@plt+0x3144>
    bce4:	cmp	r5, r7
    bce8:	bcc	bda4 <__assert_fail@plt+0x316c>
    bcec:	subs	r5, r7, #20
    bcf0:	add	r4, r4, #20
    bcf4:	bne	bd18 <__assert_fail@plt+0x30e0>
    bcf8:	b	bd48 <__assert_fail@plt+0x3110>
    bcfc:	sub	r1, r5, #4
    bd00:	add	ip, r2, #4
    bd04:	cmp	r2, r1
    bd08:	add	r4, r4, ip
    bd0c:	bhi	bd64 <__assert_fail@plt+0x312c>
    bd10:	subs	r5, r1, r2
    bd14:	beq	bd48 <__assert_fail@plt+0x3110>
    bd18:	add	r0, r4, #2
    bd1c:	bl	c4d0 <__assert_fail@plt+0x3898>
    bd20:	cmp	r6, #0
    bd24:	mov	r2, r0
    bd28:	beq	bcfc <__assert_fail@plt+0x30c4>
    bd2c:	bl	c4c4 <__assert_fail@plt+0x388c>
    bd30:	mov	r2, r0
    bd34:	b	bcfc <__assert_fail@plt+0x30c4>
    bd38:	ldr	r0, [pc, #152]	; bdd8 <__assert_fail@plt+0x31a0>
    bd3c:	mvn	r7, #0
    bd40:	add	r0, pc, r0
    bd44:	bl	c62c <__assert_fail@plt+0x39f4>
    bd48:	mov	r0, r7
    bd4c:	pop	{r3, r4, r5, r6, r7, pc}
    bd50:	ldr	r0, [pc, #132]	; bddc <__assert_fail@plt+0x31a4>
    bd54:	add	r0, pc, r0
    bd58:	bl	c62c <__assert_fail@plt+0x39f4>
    bd5c:	mov	r0, r7
    bd60:	pop	{r3, r4, r5, r6, r7, pc}
    bd64:	ldr	r0, [pc, #116]	; bde0 <__assert_fail@plt+0x31a8>
    bd68:	mvn	r7, #0
    bd6c:	add	r0, pc, r0
    bd70:	bl	c62c <__assert_fail@plt+0x39f4>
    bd74:	mov	r0, r7
    bd78:	pop	{r3, r4, r5, r6, r7, pc}
    bd7c:	mov	r0, r7
    bd80:	bl	c4b8 <__assert_fail@plt+0x3880>
    bd84:	cmp	r0, #0
    bd88:	beq	bce4 <__assert_fail@plt+0x30ac>
    bd8c:	ldr	r0, [pc, #80]	; bde4 <__assert_fail@plt+0x31ac>
    bd90:	mov	r1, r7
    bd94:	mvn	r7, #0
    bd98:	add	r0, pc, r0
    bd9c:	bl	c62c <__assert_fail@plt+0x39f4>
    bda0:	b	bd48 <__assert_fail@plt+0x3110>
    bda4:	ldr	r0, [pc, #60]	; bde8 <__assert_fail@plt+0x31b0>
    bda8:	mov	r2, r7
    bdac:	mov	r1, r5
    bdb0:	mov	r7, #0
    bdb4:	add	r0, pc, r0
    bdb8:	bl	c62c <__assert_fail@plt+0x39f4>
    bdbc:	mov	r0, r7
    bdc0:	pop	{r3, r4, r5, r6, r7, pc}
    bdc4:	ldr	r0, [pc, #32]	; bdec <__assert_fail@plt+0x31b4>
    bdc8:	mvn	r7, #0
    bdcc:	add	r0, pc, r0
    bdd0:	bl	c62c <__assert_fail@plt+0x39f4>
    bdd4:	b	bd48 <__assert_fail@plt+0x3110>
    bdd8:	ldrdeq	r4, [r0], -ip
    bddc:	andeq	r4, r0, r0, lsl r4
    bde0:	andeq	r4, r0, r8, lsl #9
    bde4:	strdeq	r4, [r0], -ip
    bde8:	andeq	r4, r0, ip, lsl #8
    bdec:	andeq	r4, r0, r8, ror #6
    bdf0:	ldr	r3, [r0, #4]
    bdf4:	ldr	ip, [r3, #4]!
    bdf8:	ldr	r0, [r3, #4]
    bdfc:	ldr	r2, [r3, #8]
    be00:	ldr	r3, [r3, #12]
    be04:	str	ip, [r1]
    be08:	str	r0, [r1, #4]
    be0c:	str	r2, [r1, #8]
    be10:	str	r3, [r1, #12]
    be14:	bx	lr
    be18:	push	{r3, lr}
    be1c:	ldr	r0, [r0, #4]
    be20:	bl	c4d0 <__assert_fail@plt+0x3898>
    be24:	movw	r3, #277	; 0x115
    be28:	cmp	r0, r3
    be2c:	andne	r3, r0, #224	; 0xe0
    be30:	andne	r2, r0, #15872	; 0x3e00
    be34:	andne	r0, r0, #15
    be38:	asrne	r3, r3, #1
    be3c:	orrne	r3, r3, r2, lsr #2
    be40:	orrne	r0, r3, r0
    be44:	moveq	r0, #7
    be48:	pop	{r3, pc}
    be4c:	push	{r3, lr}
    be50:	ldr	r0, [r0, #4]
    be54:	bl	c4d0 <__assert_fail@plt+0x3898>
    be58:	movw	r3, #277	; 0x115
    be5c:	cmp	r0, r3
    be60:	andne	r3, r0, #256	; 0x100
    be64:	ubfxne	r0, r0, #4, #1
    be68:	orrne	r0, r0, r3, lsr #7
    be6c:	moveq	r0, #1
    be70:	pop	{r3, pc}
    be74:	ldr	r3, [pc, #68]	; bec0 <__assert_fail@plt+0x3288>
    be78:	ldr	ip, [pc, #68]	; bec4 <__assert_fail@plt+0x328c>
    be7c:	add	r3, pc, r3
    be80:	push	{r4, lr}
    be84:	sub	sp, sp, #8
    be88:	ldr	r4, [r3, ip]
    be8c:	add	r2, sp, #2
    be90:	ldr	r3, [r4]
    be94:	str	r3, [sp, #4]
    be98:	bl	b284 <__assert_fail@plt+0x264c>
    be9c:	ldr	r2, [sp, #4]
    bea0:	ldr	r3, [r4]
    bea4:	adds	r0, r0, #0
    bea8:	movne	r0, #1
    beac:	cmp	r2, r3
    beb0:	bne	bebc <__assert_fail@plt+0x3284>
    beb4:	add	sp, sp, #8
    beb8:	pop	{r4, pc}
    bebc:	bl	8adc <__stack_chk_fail@plt>
    bec0:	andeq	sp, r0, ip, ror r1
    bec4:	andeq	r0, r0, r0, lsr #1
    bec8:	lsr	r0, r0, #15
    becc:	bx	lr
    bed0:	ldr	ip, [pc, #64]	; bf18 <__assert_fail@plt+0x32e0>
    bed4:	mov	r3, #0
    bed8:	mov	r2, r3
    bedc:	add	ip, pc, ip
    bee0:	ldr	r1, [r3, ip]
    bee4:	add	r3, r3, #36	; 0x24
    bee8:	cmp	r1, r0
    beec:	beq	bf08 <__assert_fail@plt+0x32d0>
    bef0:	add	r2, r2, #1
    bef4:	cmp	r2, #18
    bef8:	bne	bee0 <__assert_fail@plt+0x32a8>
    befc:	ldr	r0, [pc, #24]	; bf1c <__assert_fail@plt+0x32e4>
    bf00:	add	r0, pc, r0
    bf04:	bx	lr
    bf08:	add	r2, r2, r2, lsl #3
    bf0c:	add	r0, ip, r2, lsl #2
    bf10:	add	r0, r0, #4
    bf14:	bx	lr
    bf18:			; <UNDEFINED> instruction: 0x00003fb8
    bf1c:	andeq	r4, r0, r8, lsr #6
    bf20:	push	{r4, r5, r6, r7, lr}
    bf24:	mov	r6, r0
    bf28:	sub	sp, sp, #12
    bf2c:	mov	r0, r1
    bf30:	mov	r4, r1
    bf34:	bl	bed0 <__assert_fail@plt+0x3298>
    bf38:	mov	r7, r0
    bf3c:	bl	8b54 <strlen@plt>
    bf40:	mov	r1, r4
    bf44:	mov	r2, #100	; 0x64
    bf48:	mov	r5, r0
    bf4c:	mov	r0, sp
    bf50:	bl	8c2c <div@plt>
    bf54:	mov	r0, r6
    bf58:	add	r2, r5, #4
    bf5c:	mov	r1, #9
    bf60:	bl	b858 <__assert_fail@plt+0x2c20>
    bf64:	subs	r3, r0, #0
    bf68:	moveq	r0, #3
    bf6c:	beq	bfa0 <__assert_fail@plt+0x3368>
    bf70:	ldr	lr, [sp]
    bf74:	mov	r4, #0
    bf78:	ldr	ip, [sp, #4]
    bf7c:	mov	r1, r7
    bf80:	mov	r2, r5
    bf84:	add	r0, r3, #4
    bf88:	strb	lr, [r3, #2]
    bf8c:	strb	ip, [r3, #3]
    bf90:	strb	r4, [r3]
    bf94:	strb	r4, [r3, #1]
    bf98:	bl	8ab8 <memcpy@plt>
    bf9c:	mov	r0, r4
    bfa0:	add	sp, sp, #12
    bfa4:	pop	{r4, r5, r6, r7, pc}
    bfa8:	push	{r4, r5, r6, lr}
    bfac:	sub	sp, sp, #32
    bfb0:	ldr	lr, [pc, #136]	; c040 <__assert_fail@plt+0x3408>
    bfb4:	mov	ip, r0
    bfb8:	ldr	r4, [pc, #132]	; c044 <__assert_fail@plt+0x340c>
    bfbc:	mov	r5, r1
    bfc0:	add	lr, pc, lr
    bfc4:	sub	r5, r5, #12
    bfc8:	sub	r3, r1, #20
    bfcc:	add	r0, sp, #4
    bfd0:	ldr	r4, [lr, r4]
    bfd4:	ubfx	r6, r3, #8, #8
    bfd8:	str	r5, [sp, #24]
    bfdc:	add	r5, ip, #4
    bfe0:	str	ip, [sp, #4]
    bfe4:	mov	r1, #3
    bfe8:	ldr	ip, [r4]
    bfec:	orr	lr, r6, r3, lsl #8
    bff0:	str	r5, [sp, #20]
    bff4:	mov	r3, #2
    bff8:	strh	lr, [sp, #2]
    bffc:	str	r3, [sp, #8]
    c000:	str	r3, [sp, #16]
    c004:	add	r3, sp, r3
    c008:	str	ip, [sp, #28]
    c00c:	str	r3, [sp, #12]
    c010:	bl	c12c <__assert_fail@plt+0x34f4>
    c014:	ldr	r1, [sp, #28]
    c018:	movw	r3, #21838	; 0x554e
    c01c:	ldr	r2, [r4]
    c020:	movt	r3, #21332	; 0x5354
    c024:	cmp	r1, r2
    c028:	eor	r3, r0, r3
    c02c:	rev	r0, r3
    c030:	bne	c03c <__assert_fail@plt+0x3404>
    c034:	add	sp, sp, #32
    c038:	pop	{r4, r5, r6, pc}
    c03c:	bl	8adc <__stack_chk_fail@plt>
    c040:	andeq	sp, r0, r8, lsr r0
    c044:	andeq	r0, r0, r0, lsr #1
    c048:	ldr	r2, [pc, #100]	; c0b4 <__assert_fail@plt+0x347c>
    c04c:	movw	r3, #4641	; 0x1221
    c050:	ldr	ip, [pc, #96]	; c0b8 <__assert_fail@plt+0x3480>
    c054:	movt	r3, #17060	; 0x42a4
    c058:	add	r2, pc, r2
    c05c:	push	{r4, r5, lr}
    c060:	sub	sp, sp, #28
    c064:	ldr	r4, [r2, ip]
    c068:	add	r5, sp, #4
    c06c:	str	r3, [sp]
    c070:	mov	r1, r5
    c074:	ldr	r3, [r4]
    c078:	str	r3, [sp, #20]
    c07c:	bl	bdf0 <__assert_fail@plt+0x31b8>
    c080:	mov	r2, #4
    c084:	mov	r0, r5
    c088:	mov	r1, sp
    c08c:	bl	8ad0 <memcmp@plt>
    c090:	ldr	r2, [sp, #20]
    c094:	ldr	r3, [r4]
    c098:	rsbs	r0, r0, #1
    c09c:	movcc	r0, #0
    c0a0:	cmp	r2, r3
    c0a4:	bne	c0b0 <__assert_fail@plt+0x3478>
    c0a8:	add	sp, sp, #28
    c0ac:	pop	{r4, r5, pc}
    c0b0:	bl	8adc <__stack_chk_fail@plt>
    c0b4:	andeq	ip, r0, r0, lsr #31
    c0b8:	andeq	r0, r0, r0, lsr #1
    c0bc:	subs	r2, r1, #0
    c0c0:	push	{r4, r5}
    c0c4:	beq	c110 <__assert_fail@plt+0x34d8>
    c0c8:	ldrb	ip, [r2]
    c0cc:	cmp	ip, #0
    c0d0:	beq	c11c <__assert_fail@plt+0x34e4>
    c0d4:	ldr	r5, [pc, #72]	; c124 <__assert_fail@plt+0x34ec>
    c0d8:	mov	r3, r2
    c0dc:	mov	r4, #128	; 0x80
    c0e0:	add	r5, pc, r5
    c0e4:	b	c0f0 <__assert_fail@plt+0x34b8>
    c0e8:	subs	r4, r4, #1
    c0ec:	beq	c100 <__assert_fail@plt+0x34c8>
    c0f0:	ldrb	ip, [r5, ip]
    c0f4:	ldrb	ip, [r3, ip]!
    c0f8:	cmp	ip, #0
    c0fc:	bne	c0e8 <__assert_fail@plt+0x34b0>
    c100:	rsb	r3, r2, r3
    c104:	movw	r1, #32802	; 0x8022
    c108:	pop	{r4, r5}
    c10c:	b	b984 <__assert_fail@plt+0x2d4c>
    c110:	ldr	r2, [pc, #16]	; c128 <__assert_fail@plt+0x34f0>
    c114:	add	r2, pc, r2
    c118:	b	c0c8 <__assert_fail@plt+0x3490>
    c11c:	mov	r3, ip
    c120:	b	c104 <__assert_fail@plt+0x34cc>
    c124:	andeq	r4, r0, r8, asr r1
    c128:	andeq	r4, r0, r4, lsr #4
    c12c:	cmp	r1, #0
    c130:	push	{r4, r5, r6, r7, r8, r9, sl}
    c134:	beq	c1bc <__assert_fail@plt+0x3584>
    c138:	ldr	r8, [pc, #136]	; c1c8 <__assert_fail@plt+0x3590>
    c13c:	movw	r7, #47338	; 0xb8ea
    c140:	lsl	sl, r1, #3
    c144:	movt	r7, #35774	; 0x8bbe
    c148:	add	r8, pc, r8
    c14c:	mov	r9, #0
    c150:	mvn	ip, #0
    c154:	mov	r3, r0
    c158:	ldr	r1, [r3, r9]!
    c15c:	ldr	r6, [r3, #4]
    c160:	cmp	r6, #0
    c164:	beq	c1a4 <__assert_fail@plt+0x356c>
    c168:	add	r6, r1, r6
    c16c:	ldrb	r3, [r1], #1
    c170:	movw	r4, #59626	; 0xe8ea
    c174:	movt	r4, #2235	; 0x8bb
    c178:	eor	r3, ip, r3
    c17c:	uxtb	r3, r3
    c180:	ldr	r3, [r8, r3, lsl #2]
    c184:	cmp	r3, r7
    c188:	movne	r5, #0
    c18c:	andeq	r5, r2, #1
    c190:	cmp	r5, #0
    c194:	movne	r3, r4
    c198:	cmp	r1, r6
    c19c:	eor	ip, r3, ip, lsr #8
    c1a0:	bne	c16c <__assert_fail@plt+0x3534>
    c1a4:	add	r9, r9, #8
    c1a8:	cmp	r9, sl
    c1ac:	bne	c154 <__assert_fail@plt+0x351c>
    c1b0:	mvn	r0, ip
    c1b4:	pop	{r4, r5, r6, r7, r8, r9, sl}
    c1b8:	bx	lr
    c1bc:	mov	r0, r1
    c1c0:	pop	{r4, r5, r6, r7, r8, r9, sl}
    c1c4:	bx	lr
    c1c8:	andeq	r4, r0, r0, lsl #4
    c1cc:	ldr	ip, [pc, #260]	; c2d8 <__assert_fail@plt+0x36a0>
    c1d0:	push	{r4, r5, r6, r7, r8, r9, lr}
    c1d4:	add	ip, pc, ip
    c1d8:	ldr	r5, [pc, #252]	; c2dc <__assert_fail@plt+0x36a4>
    c1dc:	sub	sp, sp, #116	; 0x74
    c1e0:	add	r7, sp, #44	; 0x2c
    c1e4:	ubfx	lr, r2, #8, #8
    c1e8:	orr	lr, lr, r2, lsl #8
    c1ec:	mov	r4, r1
    c1f0:	ldr	r5, [ip, r5]
    c1f4:	mov	r6, r0
    c1f8:	mov	r1, #0
    c1fc:	mov	r0, r7
    c200:	mov	r2, #64	; 0x40
    c204:	mov	r8, r3
    c208:	ldr	ip, [r5]
    c20c:	strh	lr, [sp, #10]
    c210:	ldr	r9, [sp, #144]	; 0x90
    c214:	str	ip, [sp, #108]	; 0x6c
    c218:	bl	8b78 <memset@plt>
    c21c:	cmp	r4, #43	; 0x2b
    c220:	bls	c2b4 <__assert_fail@plt+0x367c>
    c224:	ldr	r3, [sp, #152]	; 0x98
    c228:	mov	r2, #2
    c22c:	str	r6, [sp, #12]
    c230:	add	r6, r6, #4
    c234:	cmp	r3, #0
    c238:	str	r2, [sp, #28]
    c23c:	sub	r3, r4, #28
    c240:	str	r2, [sp, #32]
    c244:	str	r6, [sp, #20]
    c248:	add	r2, sp, #10
    c24c:	str	r3, [sp, #36]	; 0x24
    c250:	str	r2, [sp, #16]
    c254:	beq	c27c <__assert_fail@plt+0x3644>
    c258:	sub	r4, r4, #24
    c25c:	ands	r4, r4, #63	; 0x3f
    c260:	beq	c27c <__assert_fail@plt+0x3644>
    c264:	rsb	r4, r4, #64	; 0x40
    c268:	str	r7, [sp, #24]
    c26c:	mov	r2, #4
    c270:	uxth	r4, r4
    c274:	str	r4, [sp, #40]	; 0x28
    c278:	b	c280 <__assert_fail@plt+0x3648>
    c27c:	mov	r2, #3
    c280:	add	r3, sp, #28
    c284:	str	r8, [sp, #4]
    c288:	str	r3, [sp]
    c28c:	mov	r0, r9
    c290:	add	r3, sp, #12
    c294:	ldr	r1, [sp, #148]	; 0x94
    c298:	bl	e36c <__assert_fail@plt+0x5734>
    c29c:	ldr	r2, [sp, #108]	; 0x6c
    c2a0:	ldr	r3, [r5]
    c2a4:	cmp	r2, r3
    c2a8:	bne	c2d4 <__assert_fail@plt+0x369c>
    c2ac:	add	sp, sp, #116	; 0x74
    c2b0:	pop	{r4, r5, r6, r7, r8, r9, pc}
    c2b4:	ldr	r0, [pc, #36]	; c2e0 <__assert_fail@plt+0x36a8>
    c2b8:	mov	r2, #62	; 0x3e
    c2bc:	ldr	r1, [pc, #32]	; c2e4 <__assert_fail@plt+0x36ac>
    c2c0:	ldr	r3, [pc, #32]	; c2e8 <__assert_fail@plt+0x36b0>
    c2c4:	add	r0, pc, r0
    c2c8:	add	r1, pc, r1
    c2cc:	add	r3, pc, r3
    c2d0:	bl	8c38 <__assert_fail@plt>
    c2d4:	bl	8adc <__stack_chk_fail@plt>
    c2d8:	andeq	ip, r0, r4, lsr #28
    c2dc:	andeq	r0, r0, r0, lsr #1
    c2e0:	muleq	r0, r0, r4
    c2e4:	muleq	r0, r8, r4
    c2e8:	andeq	r4, r0, ip, ror r4
    c2ec:	ldr	ip, [pc, #432]	; c4a4 <__assert_fail@plt+0x386c>
    c2f0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c2f4:	mov	r9, r2
    c2f8:	ldr	r2, [pc, #424]	; c4a8 <__assert_fail@plt+0x3870>
    c2fc:	add	ip, pc, ip
    c300:	mov	r7, r0
    c304:	ldrb	r0, [r9]
    c308:	mov	r6, r3
    c30c:	mov	r3, ip
    c310:	ldr	r2, [ip, r2]
    c314:	sub	sp, sp, #108	; 0x6c
    c318:	cmp	r0, #34	; 0x22
    c31c:	mov	r4, r1
    c320:	ldr	r8, [sp, #144]	; 0x90
    c324:	ldr	r3, [r2]
    c328:	str	r2, [sp, #4]
    c32c:	ldr	r5, [sp, #148]	; 0x94
    c330:	ldr	sl, [sp, #152]	; 0x98
    c334:	str	r3, [sp, #100]	; 0x64
    c338:	bne	c358 <__assert_fail@plt+0x3720>
    c33c:	add	r3, r9, #1
    c340:	ldrb	r2, [r3]
    c344:	mov	r9, r3
    c348:	sub	r6, r6, #1
    c34c:	add	r3, r3, #1
    c350:	cmp	r2, #34	; 0x22
    c354:	beq	c340 <__assert_fail@plt+0x3708>
    c358:	add	r2, r9, r6
    c35c:	b	c364 <__assert_fail@plt+0x372c>
    c360:	mov	r6, r1
    c364:	ldrb	r3, [r2, #-1]!
    c368:	sub	r1, r6, #1
    c36c:	cmp	r3, #34	; 0x22
    c370:	cmpne	r3, #0
    c374:	beq	c360 <__assert_fail@plt+0x3728>
    c378:	ldrb	r3, [r8]
    c37c:	cmp	r3, #34	; 0x22
    c380:	bne	c3a0 <__assert_fail@plt+0x3768>
    c384:	add	r3, r8, #1
    c388:	ldrb	r2, [r3]
    c38c:	mov	r8, r3
    c390:	sub	r5, r5, #1
    c394:	add	r3, r3, #1
    c398:	cmp	r2, #34	; 0x22
    c39c:	beq	c388 <__assert_fail@plt+0x3750>
    c3a0:	add	r2, r8, r5
    c3a4:	b	c3ac <__assert_fail@plt+0x3774>
    c3a8:	mov	r5, r1
    c3ac:	ldrb	r3, [r2, #-1]!
    c3b0:	sub	r1, r5, #1
    c3b4:	cmp	r3, #34	; 0x22
    c3b8:	cmpne	r3, #0
    c3bc:	beq	c3a8 <__assert_fail@plt+0x3770>
    c3c0:	ldrb	r3, [r7]
    c3c4:	cmp	r3, #34	; 0x22
    c3c8:	bne	c3e8 <__assert_fail@plt+0x37b0>
    c3cc:	add	r3, r7, #1
    c3d0:	ldrb	r2, [r3]
    c3d4:	mov	r7, r3
    c3d8:	sub	r4, r4, #1
    c3dc:	add	r3, r3, #1
    c3e0:	cmp	r2, #34	; 0x22
    c3e4:	beq	c3d0 <__assert_fail@plt+0x3798>
    c3e8:	add	r2, r7, r4
    c3ec:	b	c3f4 <__assert_fail@plt+0x37bc>
    c3f0:	mov	r4, r1
    c3f4:	ldrb	r3, [r2, #-1]!
    c3f8:	sub	r1, r4, #1
    c3fc:	cmp	r3, #34	; 0x22
    c400:	cmpne	r3, #0
    c404:	beq	c3f0 <__assert_fail@plt+0x37b8>
    c408:	add	fp, sp, #12
    c40c:	ldr	r3, [pc, #152]	; c4ac <__assert_fail@plt+0x3874>
    c410:	mov	r0, fp
    c414:	add	r3, pc, r3
    c418:	str	r3, [sp]
    c41c:	bl	f0c4 <__assert_fail@plt+0x648c>
    c420:	mov	r2, r6
    c424:	mov	r0, fp
    c428:	mov	r1, r9
    c42c:	bl	f100 <__assert_fail@plt+0x64c8>
    c430:	ldr	r3, [sp]
    c434:	mov	r0, fp
    c438:	mov	r2, #1
    c43c:	mov	r1, r3
    c440:	mov	r6, r3
    c444:	bl	f100 <__assert_fail@plt+0x64c8>
    c448:	mov	r0, fp
    c44c:	mov	r1, r7
    c450:	mov	r2, r4
    c454:	bl	f100 <__assert_fail@plt+0x64c8>
    c458:	mov	r0, fp
    c45c:	mov	r1, r6
    c460:	mov	r2, #1
    c464:	bl	f100 <__assert_fail@plt+0x64c8>
    c468:	mov	r2, r5
    c46c:	mov	r0, fp
    c470:	mov	r1, r8
    c474:	bl	f100 <__assert_fail@plt+0x64c8>
    c478:	mov	r1, fp
    c47c:	mov	r0, sl
    c480:	bl	f1fc <__assert_fail@plt+0x65c4>
    c484:	ldr	r1, [sp, #4]
    c488:	ldr	r2, [sp, #100]	; 0x64
    c48c:	ldr	r3, [r1]
    c490:	cmp	r2, r3
    c494:	bne	c4a0 <__assert_fail@plt+0x3868>
    c498:	add	sp, sp, #108	; 0x6c
    c49c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    c4a0:	bl	8adc <__stack_chk_fail@plt>
    c4a4:	strdeq	ip, [r0], -ip	; <UNPREDICTABLE>
    c4a8:	andeq	r0, r0, r0, lsr #1
    c4ac:	andeq	r4, r0, r8, asr r3
    c4b0:	mov	r1, #16
    c4b4:	b	f314 <__assert_fail@plt+0x66dc>
    c4b8:	rsb	r0, r0, #0
    c4bc:	and	r0, r0, #3
    c4c0:	bx	lr
    c4c4:	add	r0, r0, #3
    c4c8:	bic	r0, r0, #3
    c4cc:	bx	lr
    c4d0:	ldrb	r2, [r0]
    c4d4:	ldrb	r0, [r0, #1]
    c4d8:	orr	r0, r0, r2, lsl #8
    c4dc:	bx	lr
    c4e0:	mov	r3, r0
    c4e4:	strb	r1, [r0, #1]
    c4e8:	lsr	r1, r1, #8
    c4ec:	add	r0, r0, #2
    c4f0:	strb	r1, [r3]
    c4f4:	bx	lr
    c4f8:	uxtb	r3, r2
    c4fc:	lsr	r2, r2, #6
    c500:	and	ip, r3, #15
    c504:	and	r2, r2, #62	; 0x3e
    c508:	lsl	r3, r3, #1
    c50c:	push	{r4}		; (str r4, [sp, #-4]!)
    c510:	bic	r3, r3, #31
    c514:	lsl	r4, r1, #4
    c518:	orr	ip, r3, ip
    c51c:	and	r4, r4, #16
    c520:	orr	r1, r2, r1, lsr #1
    c524:	orr	ip, ip, r4
    c528:	strb	r1, [r0]
    c52c:	strb	ip, [r0, #1]
    c530:	pop	{r4}		; (ldr r4, [sp], #4)
    c534:	bx	lr
    c538:	push	{r4, r5}
    c53c:	ldrh	ip, [r1]
    c540:	cmp	ip, #2
    c544:	beq	c570 <__assert_fail@plt+0x3938>
    c548:	cmp	ip, #10
    c54c:	bne	c564 <__assert_fail@plt+0x392c>
    c550:	cmp	r2, #27
    c554:	bhi	c5ac <__assert_fail@plt+0x3974>
    c558:	mov	r0, #2
    c55c:	pop	{r4, r5}
    c560:	bx	lr
    c564:	mov	r0, #4
    c568:	pop	{r4, r5}
    c56c:	bx	lr
    c570:	cmp	r2, #15
    c574:	bls	c558 <__assert_fail@plt+0x3920>
    c578:	lsr	r2, r3, #16
    c57c:	ldr	r4, [r1, #4]
    c580:	ldrh	r0, [r1, #2]
    c584:	rev	r3, r3
    c588:	lsl	ip, r2, #8
    c58c:	eor	r3, r4, r3
    c590:	orr	r2, ip, r2, lsr #8
    c594:	str	r3, [r1, #4]
    c598:	eor	r2, r2, r0
    c59c:	mov	r0, #0
    c5a0:	strh	r2, [r1, #2]
    c5a4:	pop	{r4, r5}
    c5a8:	bx	lr
    c5ac:	lsr	r3, r3, #16
    c5b0:	ldrh	r4, [r1, #2]
    c5b4:	mov	ip, r1
    c5b8:	mov	r2, #4
    c5bc:	lsl	r5, r3, #8
    c5c0:	orr	r3, r5, r3, lsr #8
    c5c4:	eor	r3, r3, r4
    c5c8:	strh	r3, [r1, #2]
    c5cc:	ldr	r1, [r0, #4]
    c5d0:	add	ip, ip, #1
    c5d4:	ldrb	r3, [ip, #7]
    c5d8:	ldrb	r1, [r1, r2]
    c5dc:	add	r2, r2, #1
    c5e0:	cmp	r2, #20
    c5e4:	eor	r3, r1, r3
    c5e8:	strb	r3, [ip, #7]
    c5ec:	bne	c5cc <__assert_fail@plt+0x3994>
    c5f0:	mov	r0, #0
    c5f4:	pop	{r4, r5}
    c5f8:	bx	lr
    c5fc:	ldr	r3, [pc, #12]	; c610 <__assert_fail@plt+0x39d8>
    c600:	mov	r2, #1
    c604:	add	r3, pc, r3
    c608:	str	r2, [r3]
    c60c:	bx	lr
    c610:	andeq	ip, r0, r4, lsr #21
    c614:	ldr	r3, [pc, #12]	; c628 <__assert_fail@plt+0x39f0>
    c618:	mov	r2, #0
    c61c:	add	r3, pc, r3
    c620:	str	r2, [r3]
    c624:	bx	lr
    c628:	andeq	ip, r0, ip, lsl #21
    c62c:	push	{r0, r1, r2, r3}
    c630:	ldr	r0, [pc, #112]	; c6a8 <__assert_fail@plt+0x3a70>
    c634:	ldr	r1, [pc, #112]	; c6ac <__assert_fail@plt+0x3a74>
    c638:	add	r0, pc, r0
    c63c:	ldr	r3, [pc, #108]	; c6b0 <__assert_fail@plt+0x3a78>
    c640:	push	{r4, lr}
    c644:	add	r3, pc, r3
    c648:	ldr	r4, [r0, r1]
    c64c:	sub	sp, sp, #8
    c650:	ldr	r1, [r3]
    c654:	ldr	r2, [sp, #16]
    c658:	ldr	r3, [r4]
    c65c:	cmp	r1, #0
    c660:	str	r3, [sp, #4]
    c664:	beq	c684 <__assert_fail@plt+0x3a4c>
    c668:	ldr	ip, [pc, #68]	; c6b4 <__assert_fail@plt+0x3a7c>
    c66c:	add	r3, sp, #20
    c670:	str	r3, [sp]
    c674:	mov	r1, #1
    c678:	ldr	r0, [r0, ip]
    c67c:	ldr	r0, [r0]
    c680:	bl	8b24 <__vfprintf_chk@plt>
    c684:	ldr	r2, [sp, #4]
    c688:	ldr	r3, [r4]
    c68c:	cmp	r2, r3
    c690:	bne	c6a4 <__assert_fail@plt+0x3a6c>
    c694:	add	sp, sp, #8
    c698:	pop	{r4, lr}
    c69c:	add	sp, sp, #16
    c6a0:	bx	lr
    c6a4:	bl	8adc <__stack_chk_fail@plt>
    c6a8:	andeq	ip, r0, r0, asr #19
    c6ac:	andeq	r0, r0, r0, lsr #1
    c6b0:	andeq	ip, r0, r4, ror #20
    c6b4:	andeq	r0, r0, r4, lsr #1
    c6b8:	push	{r4, r5, r6, lr}
    c6bc:	mov	r4, r0
    c6c0:	ldr	r0, [pc, #52]	; c6fc <__assert_fail@plt+0x3ac4>
    c6c4:	mov	r5, r1
    c6c8:	add	r0, pc, r0
    c6cc:	bl	c62c <__assert_fail@plt+0x39f4>
    c6d0:	cmp	r5, #0
    c6d4:	popeq	{r4, r5, r6, pc}
    c6d8:	ldr	r6, [pc, #32]	; c700 <__assert_fail@plt+0x3ac8>
    c6dc:	add	r5, r4, r5
    c6e0:	add	r6, pc, r6
    c6e4:	ldrb	r1, [r4], #1
    c6e8:	mov	r0, r6
    c6ec:	bl	c62c <__assert_fail@plt+0x39f4>
    c6f0:	cmp	r4, r5
    c6f4:	bne	c6e4 <__assert_fail@plt+0x3aac>
    c6f8:	pop	{r4, r5, r6, pc}
    c6fc:	andeq	r4, r0, r8, lsr #1
    c700:	muleq	r0, r4, r0
    c704:	ldr	r3, [pc, #52]	; c740 <__assert_fail@plt+0x3b08>
    c708:	mov	ip, r1
    c70c:	ldr	r2, [pc, #48]	; c744 <__assert_fail@plt+0x3b0c>
    c710:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c714:	add	r3, pc, r3
    c718:	sub	sp, sp, #172	; 0xac
    c71c:	add	r5, r1, #64	; 0x40
    c720:	add	r4, sp, #100	; 0x64
    c724:	str	r0, [sp, #76]	; 0x4c
    c728:	str	r4, [sp, #88]	; 0x58
    c72c:	ldr	r2, [r3, r2]
    c730:	ldr	r3, [r2]
    c734:	str	r2, [sp, #92]	; 0x5c
    c738:	str	r3, [sp, #164]	; 0xa4
    c73c:	b	c748 <__assert_fail@plt+0x3b10>
    c740:	andeq	ip, r0, r4, ror #17
    c744:	andeq	r0, r0, r0, lsr #1
    c748:	ldr	r0, [ip]
    c74c:	add	ip, ip, #16
    c750:	ldr	r1, [ip, #-12]
    c754:	mov	lr, r4
    c758:	ldr	r2, [ip, #-8]
    c75c:	add	r4, r4, #16
    c760:	ldr	r3, [ip, #-4]
    c764:	cmp	ip, r5
    c768:	stmia	lr!, {r0, r1, r2, r3}
    c76c:	bne	c748 <__assert_fail@plt+0x3b10>
    c770:	ldr	r5, [sp, #76]	; 0x4c
    c774:	movw	ip, #31129	; 0x7999
    c778:	ldr	r6, [sp, #76]	; 0x4c
    c77c:	movt	ip, #23170	; 0x5a82
    c780:	ldr	r7, [sp, #76]	; 0x4c
    c784:	movw	r1, #31129	; 0x7999
    c788:	ldr	r8, [sp, #76]	; 0x4c
    c78c:	movt	r1, #23170	; 0x5a82
    c790:	ldr	r9, [sp, #76]	; 0x4c
    c794:	ldr	r5, [r5, #4]
    c798:	ldr	r6, [r6, #8]
    c79c:	ldr	r7, [r7, #12]
    c7a0:	ldr	r8, [r8]
    c7a4:	ror	r0, r5, #2
    c7a8:	ldr	r9, [r9, #16]
    c7ac:	eor	r3, r7, r6
    c7b0:	eor	r2, r0, r6
    c7b4:	and	r3, r3, r5
    c7b8:	add	ip, r9, ip
    c7bc:	ldr	sl, [sp, #100]	; 0x64
    c7c0:	add	ip, ip, r8, ror #27
    c7c4:	str	r9, [sp, #4]
    c7c8:	and	r2, r2, r8
    c7cc:	ldr	r9, [sp, #104]	; 0x68
    c7d0:	eor	r3, r3, r7
    c7d4:	add	r1, r7, r1
    c7d8:	eor	r2, r2, r6
    c7dc:	add	r3, ip, r3
    c7e0:	rev	sl, sl
    c7e4:	rev	r9, r9
    c7e8:	add	r3, r3, sl
    c7ec:	str	r7, [sp, #8]
    c7f0:	add	r2, r1, r2
    c7f4:	ldr	r7, [sp, #108]	; 0x6c
    c7f8:	ror	r1, r8, #2
    c7fc:	add	r2, r2, r9
    c800:	eor	lr, r1, r0
    c804:	movw	ip, #31129	; 0x7999
    c808:	movt	ip, #23170	; 0x5a82
    c80c:	add	r2, r2, r3, ror #27
    c810:	rev	r7, r7
    c814:	str	r5, [sp, #16]
    c818:	add	ip, r6, ip
    c81c:	ror	r5, r3, #2
    c820:	and	r3, r3, lr
    c824:	add	ip, ip, r7
    c828:	eor	r3, r3, r0
    c82c:	eor	r4, r5, r1
    c830:	str	r8, [sp, #20]
    c834:	add	ip, ip, r3
    c838:	ldr	r8, [sp, #112]	; 0x70
    c83c:	ror	r3, r2, #2
    c840:	add	ip, ip, r2, ror #27
    c844:	str	r6, [sp, #12]
    c848:	and	r4, r4, r2
    c84c:	ldr	r6, [sp, #116]	; 0x74
    c850:	movw	lr, #31129	; 0x7999
    c854:	movw	r2, #31129	; 0x7999
    c858:	movt	lr, #23170	; 0x5a82
    c85c:	movt	r2, #23170	; 0x5a82
    c860:	rev	r8, r8
    c864:	eor	r4, r4, r1
    c868:	add	lr, r0, lr
    c86c:	add	r2, r1, r2
    c870:	eor	r0, r3, r5
    c874:	ldr	r1, [sp, #120]	; 0x78
    c878:	rev	r6, r6
    c87c:	add	lr, lr, r8
    c880:	and	r0, r0, ip
    c884:	add	lr, lr, r4
    c888:	eor	r0, r0, r5
    c88c:	add	r2, r2, r6
    c890:	rev	r1, r1
    c894:	str	r1, [sp, #64]	; 0x40
    c898:	add	lr, lr, ip, ror #27
    c89c:	add	r2, r2, r0
    c8a0:	ror	ip, ip, #2
    c8a4:	ldr	r0, [sp, #64]	; 0x40
    c8a8:	str	r6, [sp, #28]
    c8ac:	movw	r1, #31129	; 0x7999
    c8b0:	eor	r6, ip, r3
    c8b4:	ldr	fp, [sp, #124]	; 0x7c
    c8b8:	movt	r1, #23170	; 0x5a82
    c8bc:	and	r6, r6, lr
    c8c0:	add	r1, r0, r1
    c8c4:	add	r4, r2, lr, ror #27
    c8c8:	add	r5, r1, r5
    c8cc:	eor	r2, r6, r3
    c8d0:	rev	fp, fp
    c8d4:	str	fp, [sp, #68]	; 0x44
    c8d8:	ror	lr, lr, #2
    c8dc:	add	r2, r5, r2
    c8e0:	ldr	r5, [sp, #68]	; 0x44
    c8e4:	eor	r0, lr, ip
    c8e8:	ldr	fp, [sp, #128]	; 0x80
    c8ec:	movw	r1, #31129	; 0x7999
    c8f0:	movt	r1, #23170	; 0x5a82
    c8f4:	ror	r6, r4, #2
    c8f8:	add	r1, r5, r1
    c8fc:	and	r0, r0, r4
    c900:	add	r2, r2, r4, ror #27
    c904:	rev	fp, fp
    c908:	add	r3, r1, r3
    c90c:	eor	r5, r0, ip
    c910:	eor	r1, r6, lr
    c914:	movw	r0, #31129	; 0x7999
    c918:	movt	r0, #23170	; 0x5a82
    c91c:	ldr	r4, [sp, #132]	; 0x84
    c920:	add	r5, r3, r5
    c924:	add	r0, fp, r0
    c928:	and	r1, r1, r2
    c92c:	add	r5, r5, r2, ror #27
    c930:	add	r0, r0, ip
    c934:	ror	r2, r2, #2
    c938:	eor	r1, r1, lr
    c93c:	rev	r4, r4
    c940:	eor	ip, r2, r6
    c944:	ldr	r3, [sp, #136]	; 0x88
    c948:	add	r1, r0, r1
    c94c:	movw	r0, #31129	; 0x7999
    c950:	movt	r0, #23170	; 0x5a82
    c954:	and	ip, ip, r5
    c958:	add	r0, r4, r0
    c95c:	eor	ip, ip, r6
    c960:	rev	r3, r3
    c964:	add	r0, r0, lr
    c968:	str	r3, [sp, #48]	; 0x30
    c96c:	add	r1, r1, r5, ror #27
    c970:	str	fp, [sp, #72]	; 0x48
    c974:	ror	r5, r5, #2
    c978:	ldr	fp, [sp, #140]	; 0x8c
    c97c:	add	r0, r0, ip
    c980:	ldr	ip, [sp, #48]	; 0x30
    c984:	movw	r3, #31129	; 0x7999
    c988:	str	r4, [sp, #24]
    c98c:	movt	r3, #23170	; 0x5a82
    c990:	eor	r4, r5, r2
    c994:	ror	lr, r1, #2
    c998:	add	r0, r0, r1, ror #27
    c99c:	add	r3, ip, r3
    c9a0:	and	r4, r4, r1
    c9a4:	rev	fp, fp
    c9a8:	str	fp, [sp, #52]	; 0x34
    c9ac:	add	r6, r3, r6
    c9b0:	ldr	r1, [sp, #144]	; 0x90
    c9b4:	eor	ip, r4, r2
    c9b8:	movw	r3, #31129	; 0x7999
    c9bc:	eor	r4, lr, r5
    c9c0:	movt	r3, #23170	; 0x5a82
    c9c4:	add	ip, r6, ip
    c9c8:	add	r3, fp, r3
    c9cc:	and	r4, r4, r0
    c9d0:	rev	r1, r1
    c9d4:	str	r1, [sp, #56]	; 0x38
    c9d8:	add	ip, ip, r0, ror #27
    c9dc:	add	r3, r3, r2
    c9e0:	ror	r0, r0, #2
    c9e4:	ldr	r6, [sp, #56]	; 0x38
    c9e8:	eor	r4, r4, r5
    c9ec:	eor	r2, r0, lr
    c9f0:	ldr	r1, [sp, #148]	; 0x94
    c9f4:	add	r4, r3, r4
    c9f8:	movw	r3, #31129	; 0x7999
    c9fc:	movt	r3, #23170	; 0x5a82
    ca00:	add	r3, r6, r3
    ca04:	and	r2, r2, ip
    ca08:	eor	r2, r2, lr
    ca0c:	rev	r1, r1
    ca10:	add	r3, r3, r5
    ca14:	str	r1, [sp, #60]	; 0x3c
    ca18:	add	r4, r4, ip, ror #27
    ca1c:	add	r3, r3, r2
    ca20:	ror	ip, ip, #2
    ca24:	ldr	r2, [sp, #60]	; 0x3c
    ca28:	eor	r6, ip, r0
    ca2c:	ldr	fp, [sp, #152]	; 0x98
    ca30:	movw	r1, #31129	; 0x7999
    ca34:	movt	r1, #23170	; 0x5a82
    ca38:	and	r6, r6, r4
    ca3c:	add	r1, r2, r1
    ca40:	ror	r2, r4, #2
    ca44:	add	r3, r3, r4, ror #27
    ca48:	rev	fp, fp
    ca4c:	add	r1, r1, lr
    ca50:	eor	r5, r6, r0
    ca54:	eor	lr, r2, ip
    ca58:	ldr	r6, [sp, #156]	; 0x9c
    ca5c:	movw	r4, #31129	; 0x7999
    ca60:	movt	r4, #23170	; 0x5a82
    ca64:	and	lr, lr, r3
    ca68:	add	r4, fp, r4
    ca6c:	eor	lr, lr, ip
    ca70:	add	r5, r1, r5
    ca74:	rev	r6, r6
    ca78:	add	r1, r4, r0
    ca7c:	str	r6, [sp, #40]	; 0x28
    ca80:	ldr	r6, [sp, #24]
    ca84:	add	r5, r5, r3, ror #27
    ca88:	str	fp, [sp, #36]	; 0x24
    ca8c:	ror	r3, r3, #2
    ca90:	eor	sl, r7, sl
    ca94:	ldr	r4, [sp, #160]	; 0xa0
    ca98:	add	r1, r1, lr
    ca9c:	ldr	lr, [sp, #40]	; 0x28
    caa0:	eor	r0, r3, r2
    caa4:	eor	sl, sl, r6
    caa8:	movw	fp, #31129	; 0x7999
    caac:	ldr	r6, [sp, #36]	; 0x24
    cab0:	movt	fp, #23170	; 0x5a82
    cab4:	and	r0, r0, r5
    cab8:	add	fp, lr, fp
    cabc:	rev	r4, r4
    cac0:	str	r4, [sp, #44]	; 0x2c
    cac4:	add	r1, r1, r5, ror #27
    cac8:	eor	r0, r0, r2
    cacc:	ror	r5, r5, #2
    cad0:	eor	sl, sl, r6
    cad4:	add	fp, fp, ip
    cad8:	eor	ip, r8, r9
    cadc:	ldr	r9, [sp, #44]	; 0x2c
    cae0:	ldr	r6, [sp, #28]
    cae4:	eor	lr, r5, r3
    cae8:	add	fp, fp, r0
    caec:	movw	r4, #31129	; 0x7999
    caf0:	ldr	r0, [sp, #48]	; 0x30
    caf4:	movt	r4, #23170	; 0x5a82
    caf8:	add	fp, fp, r1, ror #27
    cafc:	ror	sl, sl, #31
    cb00:	add	r4, r9, r4
    cb04:	and	lr, lr, r1
    cb08:	ror	r9, r1, #2
    cb0c:	movw	r1, #31129	; 0x7999
    cb10:	movt	r1, #23170	; 0x5a82
    cb14:	str	sl, [sp, #32]
    cb18:	eor	lr, lr, r3
    cb1c:	add	r1, sl, r1
    cb20:	eor	ip, ip, r0
    cb24:	ldr	sl, [sp, #52]	; 0x34
    cb28:	eor	r0, r6, r7
    cb2c:	add	r4, r4, r2
    cb30:	ldr	r7, [sp, #40]	; 0x28
    cb34:	eor	r2, r9, r5
    cb38:	ldr	r6, [sp, #44]	; 0x2c
    cb3c:	add	r4, r4, lr
    cb40:	ldr	lr, [sp, #64]	; 0x40
    cb44:	eor	ip, ip, r7
    cb48:	and	r2, r2, fp
    cb4c:	ldr	r7, [sp, #56]	; 0x38
    cb50:	eor	r0, r0, sl
    cb54:	add	r4, r4, fp, ror #27
    cb58:	add	r3, r1, r3
    cb5c:	ror	fp, fp, #2
    cb60:	eor	r2, r2, r5
    cb64:	eor	r1, lr, r8
    cb68:	ldr	sl, [sp, #68]	; 0x44
    cb6c:	eor	r0, r0, r6
    cb70:	ldr	r6, [sp, #28]
    cb74:	add	r8, r3, r2
    cb78:	eor	r1, r1, r7
    cb7c:	eor	r3, fp, r9
    cb80:	ldr	r7, [sp, #32]
    cb84:	add	r8, r8, r4, ror #27
    cb88:	eor	r2, sl, r6
    cb8c:	and	r3, r3, r4
    cb90:	ldr	sl, [sp, #60]	; 0x3c
    cb94:	ror	r4, r4, #2
    cb98:	ror	r0, r0, #31
    cb9c:	eor	r1, r1, r7
    cba0:	movw	r6, #31129	; 0x7999
    cba4:	eor	r7, r4, fp
    cba8:	movt	r6, #23170	; 0x5a82
    cbac:	ror	ip, ip, #31
    cbb0:	eor	r2, r2, sl
    cbb4:	add	r6, r0, r6
    cbb8:	and	r7, r7, r8
    cbbc:	movw	lr, #31129	; 0x7999
    cbc0:	movt	lr, #23170	; 0x5a82
    cbc4:	eor	r2, r2, ip
    cbc8:	ldr	sl, [sp, #64]	; 0x40
    cbcc:	eor	r7, r7, fp
    cbd0:	str	r2, [sp, #28]
    cbd4:	add	lr, ip, lr
    cbd8:	ldr	r2, [sp, #72]	; 0x48
    cbdc:	add	r6, r6, r9
    cbe0:	eor	r3, r3, r9
    cbe4:	add	lr, lr, r5
    cbe8:	add	r6, r6, r7
    cbec:	ldr	r7, [sp, #28]
    cbf0:	add	lr, lr, r3
    cbf4:	eor	r3, r2, sl
    cbf8:	ldr	r2, [sp, #36]	; 0x24
    cbfc:	ror	r5, r8, #2
    cc00:	ror	r1, r1, #31
    cc04:	add	lr, lr, r8, ror #27
    cc08:	movw	r8, #31129	; 0x7999
    cc0c:	movt	r8, #23170	; 0x5a82
    cc10:	eor	r3, r3, r2
    cc14:	add	r8, r1, r8
    cc18:	ror	r2, r7, #31
    cc1c:	ldr	sl, [sp, #24]
    cc20:	ldr	r7, [sp, #68]	; 0x44
    cc24:	eor	r9, r5, r4
    cc28:	add	r8, r8, fp
    cc2c:	ldr	fp, [sp, #40]	; 0x28
    cc30:	and	r9, r9, lr
    cc34:	eor	sl, sl, r7
    cc38:	eor	r9, r9, r4
    cc3c:	eor	sl, sl, fp
    cc40:	movw	r7, #60321	; 0xeba1
    cc44:	movt	r7, #28377	; 0x6ed9
    cc48:	eor	sl, sl, r1
    cc4c:	add	r8, r8, r9
    cc50:	str	sl, [sp, #28]
    cc54:	add	r7, r2, r7
    cc58:	ldr	r9, [sp, #48]	; 0x30
    cc5c:	add	r6, r6, lr, ror #27
    cc60:	ldr	sl, [sp, #72]	; 0x48
    cc64:	ror	lr, lr, #2
    cc68:	add	r7, r7, r4
    cc6c:	str	r7, [sp, #68]	; 0x44
    cc70:	eor	fp, lr, r5
    cc74:	ldr	r7, [sp, #44]	; 0x2c
    cc78:	eor	r9, r9, sl
    cc7c:	ldr	sl, [sp, #68]	; 0x44
    cc80:	eor	fp, fp, r6
    cc84:	eor	r3, r3, r0
    cc88:	eor	r9, r9, r7
    cc8c:	add	r7, sl, fp
    cc90:	ldr	sl, [sp, #28]
    cc94:	ror	r3, r3, #31
    cc98:	movw	r4, #60321	; 0xeba1
    cc9c:	movt	r4, #28377	; 0x6ed9
    cca0:	eor	r9, r9, r2
    cca4:	add	r4, r3, r4
    cca8:	str	r9, [sp, #68]	; 0x44
    ccac:	ror	sl, sl, #31
    ccb0:	ldr	r9, [sp, #52]	; 0x34
    ccb4:	add	r4, r4, r5
    ccb8:	str	sl, [sp, #28]
    ccbc:	add	r8, r8, r6, ror #27
    ccc0:	ldr	sl, [sp, #24]
    ccc4:	ror	r6, r6, #2
    ccc8:	ldr	r5, [sp, #32]
    cccc:	eor	fp, r6, lr
    ccd0:	eor	r9, r9, sl
    ccd4:	str	r4, [sp, #64]	; 0x40
    ccd8:	eor	sl, r9, r5
    ccdc:	ldr	r5, [sp, #68]	; 0x44
    cce0:	ldr	r9, [sp, #64]	; 0x40
    cce4:	eor	fp, fp, r8
    cce8:	add	r7, r7, r8, ror #27
    ccec:	eor	sl, sl, r3
    ccf0:	add	fp, r9, fp
    ccf4:	ror	r5, r5, #31
    ccf8:	ldr	r9, [sp, #56]	; 0x38
    ccfc:	ror	r8, r8, #2
    cd00:	str	r5, [sp, #24]
    cd04:	movw	r4, #60321	; 0xeba1
    cd08:	ldr	r5, [sp, #48]	; 0x30
    cd0c:	movt	r4, #28377	; 0x6ed9
    cd10:	str	fp, [sp, #64]	; 0x40
    cd14:	eor	r9, r9, r5
    cd18:	str	r9, [sp, #48]	; 0x30
    cd1c:	ldr	r9, [sp, #64]	; 0x40
    cd20:	str	sl, [sp, #68]	; 0x44
    cd24:	ldr	sl, [sp, #48]	; 0x30
    cd28:	add	r5, r9, r7, ror #27
    cd2c:	ldr	r9, [sp, #28]
    cd30:	eor	sl, sl, ip
    cd34:	ldr	fp, [sp, #28]
    cd38:	eor	r9, sl, r9
    cd3c:	ldr	sl, [sp, #68]	; 0x44
    cd40:	add	r4, fp, r4
    cd44:	str	r9, [sp, #64]	; 0x40
    cd48:	eor	fp, r8, r6
    cd4c:	ldr	r9, [sp, #60]	; 0x3c
    cd50:	ror	sl, sl, #31
    cd54:	str	sl, [sp, #48]	; 0x30
    cd58:	ldr	sl, [sp, #52]	; 0x34
    cd5c:	eor	fp, fp, r7
    cd60:	add	lr, r4, lr
    cd64:	ror	r7, r7, #2
    cd68:	add	lr, lr, fp
    cd6c:	eor	r9, r9, sl
    cd70:	ldr	fp, [sp, #24]
    cd74:	eor	sl, r9, r0
    cd78:	movw	r4, #60321	; 0xeba1
    cd7c:	ldr	r9, [sp, #64]	; 0x40
    cd80:	movt	r4, #28377	; 0x6ed9
    cd84:	add	lr, lr, r5, ror #27
    cd88:	add	r4, fp, r4
    cd8c:	eor	fp, r7, r8
    cd90:	eor	fp, fp, r5
    cd94:	add	r6, r4, r6
    cd98:	add	r6, r6, fp
    cd9c:	ror	r9, r9, #31
    cda0:	ldr	fp, [sp, #48]	; 0x30
    cda4:	ror	r5, r5, #2
    cda8:	str	r9, [sp, #52]	; 0x34
    cdac:	movw	r4, #60321	; 0xeba1
    cdb0:	ldr	r9, [sp, #24]
    cdb4:	movt	r4, #28377	; 0x6ed9
    cdb8:	add	r4, fp, r4
    cdbc:	eor	fp, r5, r7
    cdc0:	eor	sl, sl, r9
    cdc4:	str	sl, [sp, #68]	; 0x44
    cdc8:	ldr	r9, [sp, #56]	; 0x38
    cdcc:	add	r8, r4, r8
    cdd0:	ldr	sl, [sp, #36]	; 0x24
    cdd4:	eor	fp, fp, lr
    cdd8:	add	fp, r8, fp
    cddc:	ldr	r8, [sp, #68]	; 0x44
    cde0:	eor	sl, sl, r9
    cde4:	movw	r4, #60321	; 0xeba1
    cde8:	eor	r9, sl, r1
    cdec:	ldr	sl, [sp, #52]	; 0x34
    cdf0:	movt	r4, #28377	; 0x6ed9
    cdf4:	ror	r8, r8, #31
    cdf8:	add	r4, sl, r4
    cdfc:	str	r8, [sp, #56]	; 0x38
    ce00:	ldr	sl, [sp, #40]	; 0x28
    ce04:	add	r6, r6, lr, ror #27
    ce08:	ldr	r8, [sp, #60]	; 0x3c
    ce0c:	ror	lr, lr, #2
    ce10:	str	fp, [sp, #64]	; 0x40
    ce14:	eor	fp, lr, r5
    ce18:	eor	sl, sl, r8
    ce1c:	str	sl, [sp, #60]	; 0x3c
    ce20:	ldr	sl, [sp, #48]	; 0x30
    ce24:	eor	fp, fp, r6
    ce28:	add	r7, r4, r7
    ce2c:	movw	r4, #60321	; 0xeba1
    ce30:	eor	r9, r9, sl
    ce34:	str	r9, [sp, #68]	; 0x44
    ce38:	ldr	r9, [sp, #64]	; 0x40
    ce3c:	add	r7, r7, fp
    ce40:	ldr	sl, [sp, #60]	; 0x3c
    ce44:	movt	r4, #28377	; 0x6ed9
    ce48:	add	r8, r9, r6, ror #27
    ce4c:	ldr	r9, [sp, #52]	; 0x34
    ce50:	eor	sl, sl, r2
    ce54:	ldr	fp, [sp, #56]	; 0x38
    ce58:	eor	r9, sl, r9
    ce5c:	ldr	sl, [sp, #68]	; 0x44
    ce60:	str	r9, [sp, #64]	; 0x40
    ce64:	ror	r6, r6, #2
    ce68:	ldr	r9, [sp, #44]	; 0x2c
    ce6c:	add	r4, fp, r4
    ce70:	ror	sl, sl, #31
    ce74:	str	sl, [sp, #60]	; 0x3c
    ce78:	ldr	sl, [sp, #36]	; 0x24
    ce7c:	eor	fp, r6, lr
    ce80:	eor	fp, fp, r8
    ce84:	add	r5, r4, r5
    ce88:	eor	r9, r9, sl
    ce8c:	ldr	sl, [sp, #64]	; 0x40
    ce90:	add	r5, r5, fp
    ce94:	ldr	fp, [sp, #60]	; 0x3c
    ce98:	eor	r9, r9, r3
    ce9c:	movw	r4, #60321	; 0xeba1
    cea0:	ror	sl, sl, #31
    cea4:	str	sl, [sp, #36]	; 0x24
    cea8:	ldr	sl, [sp, #56]	; 0x38
    ceac:	movt	r4, #28377	; 0x6ed9
    ceb0:	add	r4, fp, r4
    ceb4:	add	r7, r7, r8, ror #27
    ceb8:	eor	r9, r9, sl
    cebc:	ldr	sl, [sp, #40]	; 0x28
    cec0:	str	r9, [sp, #64]	; 0x40
    cec4:	add	r4, r4, lr
    cec8:	ldr	r9, [sp, #32]
    cecc:	ror	r8, r8, #2
    ced0:	ldr	lr, [sp, #28]
    ced4:	eor	fp, r8, r6
    ced8:	str	r4, [sp, #68]	; 0x44
    cedc:	eor	r9, r9, sl
    cee0:	eor	sl, r9, lr
    cee4:	ldr	r9, [sp, #68]	; 0x44
    cee8:	eor	fp, fp, r7
    ceec:	movw	r4, #60321	; 0xeba1
    cef0:	add	lr, r9, fp
    cef4:	ldr	r9, [sp, #64]	; 0x40
    cef8:	ldr	fp, [sp, #36]	; 0x24
    cefc:	movt	r4, #28377	; 0x6ed9
    cf00:	add	r5, r5, r7, ror #27
    cf04:	ror	r7, r7, #2
    cf08:	ror	r9, r9, #31
    cf0c:	str	r9, [sp, #40]	; 0x28
    cf10:	ldr	r9, [sp, #44]	; 0x2c
    cf14:	add	r4, fp, r4
    cf18:	add	r4, r4, r6
    cf1c:	eor	fp, r7, r8
    cf20:	eor	r9, ip, r9
    cf24:	str	r9, [sp, #64]	; 0x40
    cf28:	ldr	r9, [sp, #60]	; 0x3c
    cf2c:	eor	fp, fp, r5
    cf30:	ldr	r6, [sp, #24]
    cf34:	add	lr, lr, r5, ror #27
    cf38:	eor	sl, sl, r9
    cf3c:	str	sl, [sp, #44]	; 0x2c
    cf40:	ldr	sl, [sp, #64]	; 0x40
    cf44:	ror	r5, r5, #2
    cf48:	str	r4, [sp, #68]	; 0x44
    cf4c:	movw	r4, #60321	; 0xeba1
    cf50:	eor	r9, sl, r6
    cf54:	ldr	sl, [sp, #68]	; 0x44
    cf58:	movt	r4, #28377	; 0x6ed9
    cf5c:	eor	ip, r1, ip
    cf60:	add	r6, sl, fp
    cf64:	ldr	sl, [sp, #36]	; 0x24
    cf68:	ldr	fp, [sp, #40]	; 0x28
    cf6c:	add	r6, r6, lr, ror #27
    cf70:	eor	r9, r9, sl
    cf74:	str	r9, [sp, #64]	; 0x40
    cf78:	ldr	r9, [sp, #44]	; 0x2c
    cf7c:	add	r4, fp, r4
    cf80:	eor	fp, r5, r7
    cf84:	add	r4, r4, r8
    cf88:	eor	fp, fp, lr
    cf8c:	ror	r8, lr, #2
    cf90:	ror	r9, r9, #31
    cf94:	str	r9, [sp, #44]	; 0x2c
    cf98:	ldr	r9, [sp, #32]
    cf9c:	add	r4, r4, fp
    cfa0:	ldr	fp, [sp, #44]	; 0x2c
    cfa4:	movw	lr, #60321	; 0xeba1
    cfa8:	eor	sl, r0, r9
    cfac:	ldr	r9, [sp, #48]	; 0x30
    cfb0:	movt	lr, #28377	; 0x6ed9
    cfb4:	add	r4, r4, r6, ror #27
    cfb8:	eor	sl, sl, r9
    cfbc:	ldr	r9, [sp, #64]	; 0x40
    cfc0:	add	lr, fp, lr
    cfc4:	eor	fp, r8, r5
    cfc8:	eor	fp, fp, r6
    cfcc:	add	lr, lr, r7
    cfd0:	ror	r9, r9, #31
    cfd4:	str	r9, [sp, #32]
    cfd8:	ldr	r9, [sp, #40]	; 0x28
    cfdc:	add	lr, lr, fp
    cfe0:	ldr	r7, [sp, #52]	; 0x34
    cfe4:	ror	r6, r6, #2
    cfe8:	ldr	fp, [sp, #32]
    cfec:	eor	sl, sl, r9
    cff0:	movw	r9, #60321	; 0xeba1
    cff4:	movt	r9, #28377	; 0x6ed9
    cff8:	add	r9, fp, r9
    cffc:	eor	ip, ip, r7
    d000:	eor	r7, r6, r8
    d004:	ldr	fp, [sp, #56]	; 0x38
    d008:	eor	r7, r7, r4
    d00c:	ror	sl, sl, #31
    d010:	add	r5, r9, r5
    d014:	str	sl, [sp, #64]	; 0x40
    d018:	ldr	sl, [sp, #44]	; 0x2c
    d01c:	eor	r0, r2, r0
    d020:	ldr	r9, [sp, #32]
    d024:	add	r5, r5, r7
    d028:	ldr	r7, [sp, #64]	; 0x40
    d02c:	add	lr, lr, r4, ror #27
    d030:	eor	ip, ip, sl
    d034:	ror	r4, r4, #2
    d038:	eor	r0, r0, fp
    d03c:	movw	sl, #60321	; 0xeba1
    d040:	movt	sl, #28377	; 0x6ed9
    d044:	eor	fp, r4, r6
    d048:	add	sl, r7, sl
    d04c:	eor	r0, r0, r9
    d050:	eor	fp, fp, lr
    d054:	ror	ip, ip, #31
    d058:	add	r8, sl, r8
    d05c:	str	ip, [sp, #68]	; 0x44
    d060:	ldr	sl, [sp, #60]	; 0x3c
    d064:	eor	r1, r3, r1
    d068:	add	r8, r8, fp
    d06c:	ror	r0, r0, #31
    d070:	ldr	fp, [sp, #68]	; 0x44
    d074:	add	r5, r5, lr, ror #27
    d078:	str	r0, [sp, #72]	; 0x48
    d07c:	ror	lr, lr, #2
    d080:	ldr	r0, [sp, #64]	; 0x40
    d084:	eor	r1, r1, sl
    d088:	movw	ip, #60321	; 0xeba1
    d08c:	movt	ip, #28377	; 0x6ed9
    d090:	add	ip, fp, ip
    d094:	eor	r7, lr, r4
    d098:	ldr	fp, [sp, #72]	; 0x48
    d09c:	eor	r1, r1, r0
    d0a0:	ldr	r9, [sp, #28]
    d0a4:	add	r8, r8, r5, ror #27
    d0a8:	eor	r7, r7, r5
    d0ac:	ldr	sl, [sp, #36]	; 0x24
    d0b0:	ror	r5, r5, #2
    d0b4:	movw	r0, #60321	; 0xeba1
    d0b8:	movt	r0, #28377	; 0x6ed9
    d0bc:	eor	r2, r9, r2
    d0c0:	add	r0, fp, r0
    d0c4:	eor	r9, r5, lr
    d0c8:	add	r6, ip, r6
    d0cc:	ror	r1, r1, #31
    d0d0:	ldr	ip, [sp, #24]
    d0d4:	eor	r9, r9, r8
    d0d8:	str	r1, [sp, #80]	; 0x50
    d0dc:	eor	r2, r2, sl
    d0e0:	ldr	r1, [sp, #68]	; 0x44
    d0e4:	add	r6, r6, r7
    d0e8:	add	r4, r0, r4
    d0ec:	ldr	r7, [sp, #40]	; 0x28
    d0f0:	eor	r3, ip, r3
    d0f4:	eor	r2, r2, r1
    d0f8:	add	r4, r4, r9
    d0fc:	ldr	r9, [sp, #80]	; 0x50
    d100:	add	r6, r6, r8, ror #27
    d104:	eor	r3, r3, r7
    d108:	ror	r8, r8, #2
    d10c:	movw	r1, #60321	; 0xeba1
    d110:	movt	r1, #28377	; 0x6ed9
    d114:	eor	ip, r8, r5
    d118:	add	r1, r9, r1
    d11c:	eor	r3, r3, fp
    d120:	ror	r2, r2, #31
    d124:	str	r2, [sp, #84]	; 0x54
    d128:	ldr	sl, [sp, #48]	; 0x30
    d12c:	eor	ip, ip, r6
    d130:	ldr	fp, [sp, #28]
    d134:	add	lr, r1, lr
    d138:	ldr	r7, [sp, #84]	; 0x54
    d13c:	movw	r0, #60321	; 0xeba1
    d140:	ldr	r1, [sp, #44]	; 0x2c
    d144:	movt	r0, #28377	; 0x6ed9
    d148:	eor	r2, sl, fp
    d14c:	add	r0, r7, r0
    d150:	ldr	fp, [sp, #52]	; 0x34
    d154:	add	lr, lr, ip
    d158:	ror	r3, r3, #31
    d15c:	ldr	ip, [sp, #24]
    d160:	str	r3, [sp, #28]
    d164:	add	r4, r4, r6, ror #27
    d168:	eor	r2, r2, r1
    d16c:	ror	r6, r6, #2
    d170:	ldr	r1, [sp, #28]
    d174:	add	r5, r0, r5
    d178:	ldr	r0, [sp, #32]
    d17c:	eor	sl, r6, r8
    d180:	eor	r2, r2, r9
    d184:	movw	r3, #60321	; 0xeba1
    d188:	eor	r9, fp, ip
    d18c:	movt	r3, #28377	; 0x6ed9
    d190:	add	lr, lr, r4, ror #27
    d194:	eor	sl, sl, r4
    d198:	add	r3, r1, r3
    d19c:	ror	r4, r4, #2
    d1a0:	eor	r9, r9, r0
    d1a4:	eor	r1, r4, r6
    d1a8:	ror	r2, r2, #31
    d1ac:	eor	r9, r9, r7
    d1b0:	str	r2, [sp, #24]
    d1b4:	add	r8, r3, r8
    d1b8:	ldr	r7, [sp, #48]	; 0x30
    d1bc:	eor	r1, r1, lr
    d1c0:	ldr	r3, [sp, #56]	; 0x38
    d1c4:	add	r5, r5, sl
    d1c8:	ldr	fp, [sp, #24]
    d1cc:	add	r8, r8, r1
    d1d0:	ldr	ip, [sp, #64]	; 0x40
    d1d4:	eor	sl, r3, r7
    d1d8:	ldr	r1, [sp, #28]
    d1dc:	movw	r2, #60321	; 0xeba1
    d1e0:	movt	r2, #28377	; 0x6ed9
    d1e4:	add	r5, r5, lr, ror #27
    d1e8:	add	r2, fp, r2
    d1ec:	ror	lr, lr, #2
    d1f0:	eor	sl, sl, ip
    d1f4:	ldr	r7, [sp, #52]	; 0x34
    d1f8:	eor	r0, lr, r4
    d1fc:	ror	r9, r9, #31
    d200:	add	r6, r2, r6
    d204:	str	r9, [sp, #48]	; 0x30
    d208:	ldr	r2, [sp, #60]	; 0x3c
    d20c:	eor	sl, sl, r1
    d210:	eor	r0, r0, r5
    d214:	ldr	fp, [sp, #48]	; 0x30
    d218:	ldr	ip, [sp, #68]	; 0x44
    d21c:	add	r8, r8, r5, ror #27
    d220:	eor	r9, r2, r7
    d224:	ror	r5, r5, #2
    d228:	add	r6, r6, r0
    d22c:	ror	sl, sl, #31
    d230:	ldr	r0, [sp, #24]
    d234:	movw	r3, #60321	; 0xeba1
    d238:	str	sl, [sp, #52]	; 0x34
    d23c:	movt	r3, #28377	; 0x6ed9
    d240:	add	r3, fp, r3
    d244:	eor	r1, r5, lr
    d248:	ldr	r7, [sp, #52]	; 0x34
    d24c:	eor	r9, r9, ip
    d250:	add	r4, r3, r4
    d254:	eor	r1, r1, r8
    d258:	eor	r9, r9, r0
    d25c:	movw	ip, #48348	; 0xbcdc
    d260:	movt	ip, #36635	; 0x8f1b
    d264:	add	r6, r6, r8, ror #27
    d268:	ldr	r3, [sp, #36]	; 0x24
    d26c:	ror	r8, r8, #2
    d270:	add	ip, r7, ip
    d274:	add	r1, r4, r1
    d278:	ldr	r4, [sp, #56]	; 0x38
    d27c:	orr	r2, r6, r8
    d280:	ldr	fp, [sp, #40]	; 0x28
    d284:	ror	r9, r9, #31
    d288:	add	lr, ip, lr
    d28c:	str	r9, [sp, #56]	; 0x38
    d290:	ldr	ip, [sp, #60]	; 0x3c
    d294:	eor	sl, r3, r4
    d298:	ldr	r9, [sp, #72]	; 0x48
    d29c:	and	r4, r6, r8
    d2a0:	ldr	r3, [sp, #48]	; 0x30
    d2a4:	and	r2, r2, r5
    d2a8:	add	r1, r1, r6, ror #27
    d2ac:	orr	r2, r2, r4
    d2b0:	ror	r6, r6, #2
    d2b4:	ldr	r4, [sp, #56]	; 0x38
    d2b8:	eor	sl, sl, r9
    d2bc:	eor	r9, fp, ip
    d2c0:	ldr	fp, [sp, #80]	; 0x50
    d2c4:	orr	r7, r1, r6
    d2c8:	ldr	ip, [sp, #52]	; 0x34
    d2cc:	eor	sl, sl, r3
    d2d0:	movw	r0, #48348	; 0xbcdc
    d2d4:	movt	r0, #36635	; 0x8f1b
    d2d8:	and	r3, r1, r6
    d2dc:	add	r0, r4, r0
    d2e0:	and	r7, r7, r8
    d2e4:	eor	r9, r9, fp
    d2e8:	add	r5, r0, r5
    d2ec:	add	lr, lr, r2
    d2f0:	orr	r7, r7, r3
    d2f4:	eor	r9, r9, ip
    d2f8:	ror	sl, sl, #31
    d2fc:	str	sl, [sp, #60]	; 0x3c
    d300:	ldr	r0, [sp, #44]	; 0x2c
    d304:	add	lr, lr, r1, ror #27
    d308:	ldr	r3, [sp, #36]	; 0x24
    d30c:	ror	r1, r1, #2
    d310:	ldr	r4, [sp, #60]	; 0x3c
    d314:	add	r7, r5, r7
    d318:	ldr	r5, [sp, #84]	; 0x54
    d31c:	orr	r2, lr, r1
    d320:	eor	sl, r0, r3
    d324:	ror	r9, r9, #31
    d328:	movw	fp, #48348	; 0xbcdc
    d32c:	str	r9, [sp, #36]	; 0x24
    d330:	movt	fp, #36635	; 0x8f1b
    d334:	ldr	r9, [sp, #56]	; 0x38
    d338:	and	r3, lr, r1
    d33c:	add	fp, r4, fp
    d340:	and	r2, r2, r6
    d344:	eor	sl, sl, r5
    d348:	orr	r2, r2, r3
    d34c:	add	r8, fp, r8
    d350:	ldr	r3, [sp, #40]	; 0x28
    d354:	eor	sl, sl, r9
    d358:	ldr	fp, [sp, #32]
    d35c:	add	r7, r7, lr, ror #27
    d360:	ldr	r4, [sp, #36]	; 0x24
    d364:	ror	lr, lr, #2
    d368:	ldr	r5, [sp, #28]
    d36c:	orr	ip, r7, lr
    d370:	eor	r9, fp, r3
    d374:	ror	sl, sl, #31
    d378:	movw	r0, #48348	; 0xbcdc
    d37c:	str	sl, [sp, #40]	; 0x28
    d380:	movt	r0, #36635	; 0x8f1b
    d384:	ldr	sl, [sp, #60]	; 0x3c
    d388:	add	r0, r4, r0
    d38c:	add	r8, r8, r2
    d390:	and	r4, r7, lr
    d394:	and	ip, ip, r1
    d398:	eor	r9, r9, r5
    d39c:	add	r8, r8, r7, ror #27
    d3a0:	orr	ip, ip, r4
    d3a4:	ror	r7, r7, #2
    d3a8:	add	r6, r0, r6
    d3ac:	eor	r9, r9, sl
    d3b0:	ldr	r0, [sp, #40]	; 0x28
    d3b4:	orr	r3, r8, r7
    d3b8:	ldr	fp, [sp, #64]	; 0x40
    d3bc:	add	r6, r6, ip
    d3c0:	movw	r5, #48348	; 0xbcdc
    d3c4:	ldr	ip, [sp, #44]	; 0x2c
    d3c8:	movt	r5, #36635	; 0x8f1b
    d3cc:	ldr	r2, [sp, #24]
    d3d0:	add	r5, r0, r5
    d3d4:	and	r3, r3, lr
    d3d8:	and	r0, r8, r7
    d3dc:	ror	r9, r9, #31
    d3e0:	str	r9, [sp, #44]	; 0x2c
    d3e4:	eor	sl, fp, ip
    d3e8:	ldr	r9, [sp, #36]	; 0x24
    d3ec:	orr	r3, r3, r0
    d3f0:	ldr	r0, [sp, #44]	; 0x2c
    d3f4:	eor	sl, sl, r2
    d3f8:	ldr	ip, [sp, #32]
    d3fc:	movw	r2, #48348	; 0xbcdc
    d400:	ldr	fp, [sp, #68]	; 0x44
    d404:	movt	r2, #36635	; 0x8f1b
    d408:	add	r6, r6, r8, ror #27
    d40c:	add	r5, r5, r1
    d410:	ror	r8, r8, #2
    d414:	add	r2, r0, r2
    d418:	ldr	r1, [sp, #48]	; 0x30
    d41c:	eor	sl, sl, r9
    d420:	orr	r4, r6, r8
    d424:	eor	r9, fp, ip
    d428:	add	lr, r2, lr
    d42c:	ldr	r2, [sp, #40]	; 0x28
    d430:	and	fp, r6, r8
    d434:	and	r4, r4, r7
    d438:	eor	r9, r9, r1
    d43c:	ror	sl, sl, #31
    d440:	str	sl, [sp, #32]
    d444:	add	r3, r5, r3
    d448:	ldr	sl, [sp, #64]	; 0x40
    d44c:	orr	fp, r4, fp
    d450:	ldr	ip, [sp, #32]
    d454:	eor	r9, r9, r2
    d458:	ldr	r4, [sp, #72]	; 0x48
    d45c:	add	r3, r3, r6, ror #27
    d460:	add	fp, lr, fp
    d464:	ror	r6, r6, #2
    d468:	ldr	lr, [sp, #52]	; 0x34
    d46c:	movw	r1, #48348	; 0xbcdc
    d470:	movt	r1, #36635	; 0x8f1b
    d474:	orr	r0, r3, r6
    d478:	eor	r5, r4, sl
    d47c:	add	r1, ip, r1
    d480:	ror	r9, r9, #31
    d484:	str	r9, [sp, #64]	; 0x40
    d488:	and	r2, r3, r6
    d48c:	ldr	r9, [sp, #68]	; 0x44
    d490:	and	r0, r0, r8
    d494:	eor	r5, r5, lr
    d498:	add	r7, r1, r7
    d49c:	ldr	lr, [sp, #64]	; 0x40
    d4a0:	ldr	r1, [sp, #80]	; 0x50
    d4a4:	orr	r0, r0, r2
    d4a8:	movw	r2, #48348	; 0xbcdc
    d4ac:	movt	r2, #36635	; 0x8f1b
    d4b0:	add	fp, fp, r3, ror #27
    d4b4:	eor	ip, r1, r9
    d4b8:	ror	r3, r3, #2
    d4bc:	ldr	sl, [sp, #44]	; 0x2c
    d4c0:	add	r2, lr, r2
    d4c4:	ldr	r1, [sp, #56]	; 0x38
    d4c8:	orr	r4, fp, r3
    d4cc:	add	r8, r2, r8
    d4d0:	ldr	r2, [sp, #32]
    d4d4:	add	r7, r7, r0
    d4d8:	eor	r5, r5, sl
    d4dc:	and	r0, fp, r3
    d4e0:	and	r4, r4, r6
    d4e4:	eor	ip, ip, r1
    d4e8:	orr	r4, r4, r0
    d4ec:	eor	ip, ip, r2
    d4f0:	ror	r5, r5, #31
    d4f4:	add	r4, r8, r4
    d4f8:	str	r5, [sp, #68]	; 0x44
    d4fc:	ror	ip, ip, #31
    d500:	ldr	r5, [sp, #84]	; 0x54
    d504:	add	sl, r7, fp, ror #27
    d508:	ldr	r8, [sp, #72]	; 0x48
    d50c:	ror	fp, fp, #2
    d510:	str	ip, [sp, #72]	; 0x48
    d514:	movw	r2, #48348	; 0xbcdc
    d518:	ldr	ip, [sp, #60]	; 0x3c
    d51c:	eor	r7, r5, r8
    d520:	ldr	r9, [sp, #68]	; 0x44
    d524:	movt	r2, #36635	; 0x8f1b
    d528:	eor	r7, r7, ip
    d52c:	ldr	r8, [sp, #80]	; 0x50
    d530:	orr	r0, sl, fp
    d534:	add	r2, r9, r2
    d538:	eor	r7, r7, lr
    d53c:	ldr	r9, [sp, #72]	; 0x48
    d540:	ldr	lr, [sp, #28]
    d544:	and	r1, sl, fp
    d548:	add	r6, r2, r6
    d54c:	and	r0, r0, r3
    d550:	movw	r2, #48348	; 0xbcdc
    d554:	movt	r2, #36635	; 0x8f1b
    d558:	add	r2, r9, r2
    d55c:	orr	r0, r0, r1
    d560:	eor	r1, lr, r8
    d564:	ldr	lr, [sp, #36]	; 0x24
    d568:	add	r4, r4, sl, ror #27
    d56c:	add	r3, r2, r3
    d570:	ror	sl, sl, #2
    d574:	ldr	r2, [sp, #68]	; 0x44
    d578:	orr	r5, r4, sl
    d57c:	eor	r1, r1, lr
    d580:	and	ip, r4, sl
    d584:	add	r0, r6, r0
    d588:	and	r5, r5, fp
    d58c:	ldr	r6, [sp, #24]
    d590:	ror	r7, r7, #31
    d594:	eor	r1, r1, r2
    d598:	str	r7, [sp, #80]	; 0x50
    d59c:	add	r0, r0, r4, ror #27
    d5a0:	ldr	r7, [sp, #84]	; 0x54
    d5a4:	ror	r4, r4, #2
    d5a8:	ldr	r8, [sp, #80]	; 0x50
    d5ac:	orr	r5, r5, ip
    d5b0:	ldr	r9, [sp, #40]	; 0x28
    d5b4:	orr	lr, r0, r4
    d5b8:	eor	ip, r6, r7
    d5bc:	add	r5, r3, r5
    d5c0:	ror	r1, r1, #31
    d5c4:	movw	r3, #48348	; 0xbcdc
    d5c8:	str	r1, [sp, #84]	; 0x54
    d5cc:	movt	r3, #36635	; 0x8f1b
    d5d0:	ldr	r1, [sp, #72]	; 0x48
    d5d4:	and	r7, r0, r4
    d5d8:	add	r3, r8, r3
    d5dc:	and	lr, lr, sl
    d5e0:	eor	ip, ip, r9
    d5e4:	add	r5, r5, r0, ror #27
    d5e8:	ldr	r8, [sp, #28]
    d5ec:	ror	r0, r0, #2
    d5f0:	add	fp, r3, fp
    d5f4:	ldr	r2, [sp, #48]	; 0x30
    d5f8:	ldr	r9, [sp, #84]	; 0x54
    d5fc:	orr	lr, lr, r7
    d600:	eor	ip, ip, r1
    d604:	orr	r6, r5, r0
    d608:	add	lr, fp, lr
    d60c:	movw	r7, #48348	; 0xbcdc
    d610:	ldr	fp, [sp, #44]	; 0x2c
    d614:	movt	r7, #36635	; 0x8f1b
    d618:	eor	r3, r2, r8
    d61c:	add	r7, r9, r7
    d620:	and	r2, r5, r0
    d624:	and	r6, r6, r4
    d628:	ror	ip, ip, #31
    d62c:	str	ip, [sp, #28]
    d630:	ldr	ip, [sp, #80]	; 0x50
    d634:	add	sl, r7, sl
    d638:	orr	r6, r6, r2
    d63c:	eor	r3, r3, fp
    d640:	add	lr, lr, r5, ror #27
    d644:	ldr	r2, [sp, #52]	; 0x34
    d648:	ror	r5, r5, #2
    d64c:	ldr	r7, [sp, #28]
    d650:	eor	r3, r3, ip
    d654:	add	ip, sl, r6
    d658:	ldr	r6, [sp, #24]
    d65c:	orr	r1, lr, r5
    d660:	movw	sl, #48348	; 0xbcdc
    d664:	movt	sl, #36635	; 0x8f1b
    d668:	eor	fp, r2, r6
    d66c:	add	sl, r7, sl
    d670:	and	r6, lr, r5
    d674:	and	r1, r1, r0
    d678:	ldr	r8, [sp, #32]
    d67c:	add	r4, sl, r4
    d680:	ldr	r9, [sp, #56]	; 0x38
    d684:	ror	r3, r3, #31
    d688:	ldr	sl, [sp, #48]	; 0x30
    d68c:	orr	r1, r1, r6
    d690:	str	r3, [sp, #24]
    d694:	add	ip, ip, lr, ror #27
    d698:	ldr	r7, [sp, #64]	; 0x40
    d69c:	ror	lr, lr, #2
    d6a0:	add	r1, r4, r1
    d6a4:	ldr	r4, [sp, #24]
    d6a8:	orr	r3, ip, lr
    d6ac:	eor	fp, fp, r8
    d6b0:	movw	r6, #48348	; 0xbcdc
    d6b4:	eor	r8, r9, sl
    d6b8:	movt	r6, #36635	; 0x8f1b
    d6bc:	ldr	r9, [sp, #28]
    d6c0:	ldr	r2, [sp, #84]	; 0x54
    d6c4:	add	r6, r4, r6
    d6c8:	and	r3, r3, r5
    d6cc:	and	r4, ip, lr
    d6d0:	eor	r8, r8, r7
    d6d4:	add	r0, r6, r0
    d6d8:	orr	r3, r3, r4
    d6dc:	eor	r8, r8, r9
    d6e0:	ldr	r4, [sp, #52]	; 0x34
    d6e4:	eor	fp, fp, r2
    d6e8:	add	r2, r0, r3
    d6ec:	ldr	r3, [sp, #60]	; 0x3c
    d6f0:	add	r1, r1, ip, ror #27
    d6f4:	ror	r8, r8, #31
    d6f8:	ror	ip, ip, #2
    d6fc:	str	r8, [sp, #48]	; 0x30
    d700:	ldr	r6, [sp, #68]	; 0x44
    d704:	ror	fp, fp, #31
    d708:	orr	r0, r1, ip
    d70c:	eor	sl, r3, r4
    d710:	ldr	r7, [sp, #24]
    d714:	movw	r9, #48348	; 0xbcdc
    d718:	movt	r9, #36635	; 0x8f1b
    d71c:	and	r3, r1, ip
    d720:	add	r9, fp, r9
    d724:	and	r0, r0, lr
    d728:	eor	sl, sl, r6
    d72c:	add	r2, r2, r1, ror #27
    d730:	ldr	r6, [sp, #56]	; 0x38
    d734:	ror	r1, r1, #2
    d738:	orr	r0, r0, r3
    d73c:	add	r9, r9, r5
    d740:	eor	sl, sl, r7
    d744:	ldr	r5, [sp, #36]	; 0x24
    d748:	ldr	r7, [sp, #48]	; 0x30
    d74c:	orr	r3, r2, r1
    d750:	add	r9, r9, r0
    d754:	movw	r8, #48348	; 0xbcdc
    d758:	ldr	r0, [sp, #72]	; 0x48
    d75c:	movt	r8, #36635	; 0x8f1b
    d760:	add	r9, r9, r2, ror #27
    d764:	eor	r4, r5, r6
    d768:	add	r8, r7, r8
    d76c:	and	r5, r2, r1
    d770:	and	r3, r3, ip
    d774:	ror	r2, r2, #2
    d778:	ldr	r6, [sp, #60]	; 0x3c
    d77c:	orr	r3, r3, r5
    d780:	ror	sl, sl, #31
    d784:	ldr	r5, [sp, #40]	; 0x28
    d788:	eor	r4, r4, r0
    d78c:	add	lr, r8, lr
    d790:	orr	r0, r9, r2
    d794:	movw	r7, #48348	; 0xbcdc
    d798:	movt	r7, #36635	; 0x8f1b
    d79c:	str	sl, [sp, #52]	; 0x34
    d7a0:	add	r8, lr, r3
    d7a4:	eor	r4, r4, fp
    d7a8:	and	lr, r9, r2
    d7ac:	add	r7, sl, r7
    d7b0:	and	r0, r0, r1
    d7b4:	ldr	sl, [sp, #80]	; 0x50
    d7b8:	eor	r3, r5, r6
    d7bc:	orr	r0, r0, lr
    d7c0:	ldr	lr, [sp, #48]	; 0x30
    d7c4:	ror	r4, r4, #31
    d7c8:	eor	r3, r3, sl
    d7cc:	str	r4, [sp, #56]	; 0x38
    d7d0:	add	r8, r8, r9, ror #27
    d7d4:	ldr	sl, [sp, #36]	; 0x24
    d7d8:	ror	r9, r9, #2
    d7dc:	ldr	r4, [sp, #44]	; 0x2c
    d7e0:	eor	r3, r3, lr
    d7e4:	ldr	lr, [sp, #56]	; 0x38
    d7e8:	orr	r6, r8, r9
    d7ec:	add	r7, r7, ip
    d7f0:	movw	ip, #48348	; 0xbcdc
    d7f4:	movt	ip, #36635	; 0x8f1b
    d7f8:	eor	r5, r4, sl
    d7fc:	add	ip, lr, ip
    d800:	ldr	r4, [sp, #84]	; 0x54
    d804:	add	r7, r7, r0
    d808:	and	r6, r6, r2
    d80c:	and	r0, r8, r9
    d810:	add	r1, ip, r1
    d814:	ldr	sl, [sp, #52]	; 0x34
    d818:	orr	r6, r6, r0
    d81c:	ror	r3, r3, #31
    d820:	str	r3, [sp, #60]	; 0x3c
    d824:	add	r7, r7, r8, ror #27
    d828:	ldr	lr, [sp, #40]	; 0x28
    d82c:	ror	r8, r8, #2
    d830:	ldr	ip, [sp, #32]
    d834:	eor	r5, r5, r4
    d838:	add	r6, r1, r6
    d83c:	ldr	r1, [sp, #60]	; 0x3c
    d840:	orr	r3, r7, r8
    d844:	ldr	r0, [sp, #28]
    d848:	eor	r5, r5, sl
    d84c:	movw	r4, #48348	; 0xbcdc
    d850:	movt	r4, #36635	; 0x8f1b
    d854:	eor	sl, ip, lr
    d858:	add	r4, r1, r4
    d85c:	and	r3, r3, r9
    d860:	and	r1, r7, r8
    d864:	ldr	ip, [sp, #44]	; 0x2c
    d868:	orr	r3, r3, r1
    d86c:	eor	sl, sl, r0
    d870:	ror	r5, r5, #31
    d874:	ldr	r0, [sp, #56]	; 0x38
    d878:	str	r5, [sp, #36]	; 0x24
    d87c:	add	r4, r4, r2
    d880:	ldr	r5, [sp, #64]	; 0x40
    d884:	add	r6, r6, r7, ror #27
    d888:	ldr	r1, [sp, #24]
    d88c:	ror	r7, r7, #2
    d890:	add	r4, r4, r3
    d894:	ldr	r3, [sp, #36]	; 0x24
    d898:	eor	lr, r5, ip
    d89c:	orr	r2, r6, r7
    d8a0:	ldr	r5, [sp, #60]	; 0x3c
    d8a4:	eor	sl, sl, r0
    d8a8:	movw	r0, #48348	; 0xbcdc
    d8ac:	movt	r0, #36635	; 0x8f1b
    d8b0:	eor	lr, lr, r1
    d8b4:	add	r0, r3, r0
    d8b8:	and	r2, r2, r8
    d8bc:	and	r3, r6, r7
    d8c0:	ldr	ip, [sp, #32]
    d8c4:	orr	r2, r2, r3
    d8c8:	eor	lr, lr, r5
    d8cc:	ror	sl, sl, #31
    d8d0:	add	r0, r0, r9
    d8d4:	str	sl, [sp, #40]	; 0x28
    d8d8:	ldr	sl, [sp, #68]	; 0x44
    d8dc:	add	r0, r0, r2
    d8e0:	ldr	r2, [sp, #40]	; 0x28
    d8e4:	ror	lr, lr, #31
    d8e8:	eor	r1, sl, ip
    d8ec:	str	lr, [sp, #32]
    d8f0:	movw	r3, #49622	; 0xc1d6
    d8f4:	ldr	r5, [sp, #36]	; 0x24
    d8f8:	movt	r3, #51810	; 0xca62
    d8fc:	eor	r1, r1, fp
    d900:	add	r3, r2, r3
    d904:	ldr	r9, [sp, #72]	; 0x48
    d908:	ldr	sl, [sp, #64]	; 0x40
    d90c:	eor	r1, r1, r5
    d910:	add	r3, r3, r8
    d914:	ldr	r8, [sp, #32]
    d918:	ldr	r5, [sp, #48]	; 0x30
    d91c:	movw	lr, #49622	; 0xc1d6
    d920:	movt	lr, #51810	; 0xca62
    d924:	add	r4, r4, r6, ror #27
    d928:	eor	ip, r9, sl
    d92c:	ror	r6, r6, #2
    d930:	ldr	sl, [sp, #68]	; 0x44
    d934:	add	lr, r8, lr
    d938:	ldr	r9, [sp, #80]	; 0x50
    d93c:	ror	r1, r1, #31
    d940:	str	r1, [sp, #44]	; 0x2c
    d944:	eor	r2, r6, r7
    d948:	ldr	r1, [sp, #40]	; 0x28
    d94c:	eor	ip, ip, r5
    d950:	add	lr, lr, r7
    d954:	ldr	r7, [sp, #52]	; 0x34
    d958:	eor	r5, r9, sl
    d95c:	ldr	r8, [sp, #44]	; 0x2c
    d960:	ldr	r9, [sp, #32]
    d964:	eor	ip, ip, r1
    d968:	ldr	sl, [sp, #84]	; 0x54
    d96c:	eor	r5, r5, r7
    d970:	movw	r1, #49622	; 0xc1d6
    d974:	ldr	r7, [sp, #72]	; 0x48
    d978:	movt	r1, #51810	; 0xca62
    d97c:	eor	r5, r5, r9
    d980:	add	r1, r8, r1
    d984:	ror	ip, ip, #31
    d988:	ldr	r8, [sp, #56]	; 0x38
    d98c:	add	r0, r0, r4, ror #27
    d990:	str	ip, [sp, #64]	; 0x40
    d994:	eor	r2, r2, r4
    d998:	eor	ip, sl, r7
    d99c:	ror	r4, r4, #2
    d9a0:	ldr	r9, [sp, #64]	; 0x40
    d9a4:	add	r3, r3, r2
    d9a8:	ldr	sl, [sp, #44]	; 0x2c
    d9ac:	eor	r2, r4, r6
    d9b0:	eor	ip, ip, r8
    d9b4:	add	r6, r1, r6
    d9b8:	ldr	r8, [sp, #80]	; 0x50
    d9bc:	ror	r5, r5, #31
    d9c0:	movw	r1, #49622	; 0xc1d6
    d9c4:	str	r5, [sp, #68]	; 0x44
    d9c8:	movt	r1, #51810	; 0xca62
    d9cc:	ldr	r5, [sp, #28]
    d9d0:	add	r1, r9, r1
    d9d4:	eor	ip, ip, sl
    d9d8:	ldr	r9, [sp, #60]	; 0x3c
    d9dc:	add	r3, r3, r0, ror #27
    d9e0:	eor	r2, r2, r0
    d9e4:	eor	r7, r5, r8
    d9e8:	ror	r0, r0, #2
    d9ec:	ldr	sl, [sp, #68]	; 0x44
    d9f0:	ldr	r8, [sp, #84]	; 0x54
    d9f4:	add	lr, lr, r2
    d9f8:	eor	r7, r7, r9
    d9fc:	eor	r2, r0, r4
    da00:	ldr	r9, [sp, #64]	; 0x40
    da04:	add	r4, r1, r4
    da08:	ror	ip, ip, #31
    da0c:	movw	r1, #49622	; 0xc1d6
    da10:	str	ip, [sp, #72]	; 0x48
    da14:	movt	r1, #51810	; 0xca62
    da18:	ldr	ip, [sp, #24]
    da1c:	add	r1, sl, r1
    da20:	ldr	sl, [sp, #36]	; 0x24
    da24:	add	lr, lr, r3, ror #27
    da28:	eor	r2, r2, r3
    da2c:	eor	r5, ip, r8
    da30:	ror	r3, r3, #2
    da34:	ldr	ip, [sp, #72]	; 0x48
    da38:	eor	r7, r7, r9
    da3c:	ldr	r9, [sp, #28]
    da40:	add	r6, r6, r2
    da44:	eor	r5, r5, sl
    da48:	eor	r2, r3, r0
    da4c:	ldr	sl, [sp, #40]	; 0x28
    da50:	add	r0, r1, r0
    da54:	movw	r1, #49622	; 0xc1d6
    da58:	movt	r1, #51810	; 0xca62
    da5c:	add	r6, r6, lr, ror #27
    da60:	eor	r2, r2, lr
    da64:	add	r1, ip, r1
    da68:	ror	lr, lr, #2
    da6c:	eor	ip, fp, r9
    da70:	add	r4, r4, r2
    da74:	ldr	r9, [sp, #48]	; 0x30
    da78:	eor	r2, lr, r3
    da7c:	eor	ip, ip, sl
    da80:	add	r3, r1, r3
    da84:	ldr	sl, [sp, #24]
    da88:	ldr	r1, [sp, #72]	; 0x48
    da8c:	add	r4, r4, r6, ror #27
    da90:	ldr	r8, [sp, #68]	; 0x44
    da94:	eor	r2, r2, r6
    da98:	eor	ip, ip, r1
    da9c:	eor	r1, r9, sl
    daa0:	ldr	r9, [sp, #32]
    daa4:	ror	r6, r6, #2
    daa8:	ldr	sl, [sp, #52]	; 0x34
    daac:	ror	r7, r7, #31
    dab0:	eor	r1, r1, r9
    dab4:	add	r0, r0, r2
    dab8:	eor	r9, sl, fp
    dabc:	eor	r2, r6, lr
    dac0:	eor	r1, r1, r7
    dac4:	eor	r5, r5, r8
    dac8:	str	r1, [sp, #24]
    dacc:	movw	r8, #49622	; 0xc1d6
    dad0:	ldr	fp, [sp, #44]	; 0x2c
    dad4:	movt	r8, #51810	; 0xca62
    dad8:	add	r0, r0, r4, ror #27
    dadc:	eor	r2, r2, r4
    dae0:	add	r8, r7, r8
    dae4:	ror	r4, r4, #2
    dae8:	ror	r5, r5, #31
    daec:	ldr	r1, [sp, #56]	; 0x38
    daf0:	add	r3, r3, r2
    daf4:	add	lr, r8, lr
    daf8:	eor	r2, r4, r6
    dafc:	eor	r9, r9, fp
    db00:	movw	r8, #49622	; 0xc1d6
    db04:	ldr	fp, [sp, #48]	; 0x30
    db08:	movt	r8, #51810	; 0xca62
    db0c:	add	r3, r3, r0, ror #27
    db10:	eor	r2, r2, r0
    db14:	add	r8, r5, r8
    db18:	ror	r0, r0, #2
    db1c:	ror	ip, ip, #31
    db20:	movw	sl, #49622	; 0xc1d6
    db24:	movt	sl, #51810	; 0xca62
    db28:	add	sl, ip, sl
    db2c:	add	lr, lr, r2
    db30:	add	r6, r8, r6
    db34:	eor	r2, r0, r4
    db38:	eor	r8, r1, fp
    db3c:	ldr	fp, [sp, #24]
    db40:	add	lr, lr, r3, ror #27
    db44:	eor	r2, r2, r3
    db48:	add	r4, sl, r4
    db4c:	ror	r3, r3, #2
    db50:	ldr	sl, [sp, #64]	; 0x40
    db54:	add	r6, r6, r2
    db58:	eor	r2, r3, r0
    db5c:	ror	r1, fp, #31
    db60:	eor	r2, r2, lr
    db64:	eor	r8, r8, sl
    db68:	movw	fp, #49622	; 0xc1d6
    db6c:	movt	fp, #51810	; 0xca62
    db70:	add	fp, r1, fp
    db74:	eor	r8, r8, ip
    db78:	eor	r9, r9, r5
    db7c:	str	r8, [sp, #24]
    db80:	add	r4, r4, r2
    db84:	ldr	r8, [sp, #52]	; 0x34
    db88:	ldr	r2, [sp, #60]	; 0x3c
    db8c:	add	r0, fp, r0
    db90:	ldr	fp, [sp, #68]	; 0x44
    db94:	ror	r9, r9, #31
    db98:	str	r9, [sp, #28]
    db9c:	eor	r9, r2, r8
    dba0:	add	r6, r6, lr, ror #27
    dba4:	eor	r9, r9, fp
    dba8:	ror	lr, lr, #2
    dbac:	ldr	fp, [sp, #24]
    dbb0:	eor	sl, lr, r3
    dbb4:	ldr	r8, [sp, #28]
    dbb8:	add	r4, r4, r6, ror #27
    dbbc:	eor	sl, sl, r6
    dbc0:	movw	r2, #49622	; 0xc1d6
    dbc4:	ror	r6, r6, #2
    dbc8:	movt	r2, #51810	; 0xca62
    dbcc:	add	r0, r0, sl
    dbd0:	add	r2, r8, r2
    dbd4:	eor	sl, r6, lr
    dbd8:	ldr	r8, [sp, #36]	; 0x24
    dbdc:	ror	fp, fp, #31
    dbe0:	str	fp, [sp, #24]
    dbe4:	eor	r9, r9, r1
    dbe8:	ldr	fp, [sp, #56]	; 0x38
    dbec:	eor	sl, sl, r4
    dbf0:	str	r9, [sp, #52]	; 0x34
    dbf4:	add	r3, r2, r3
    dbf8:	ldr	r9, [sp, #72]	; 0x48
    dbfc:	eor	r8, r8, fp
    dc00:	add	r3, r3, sl
    dc04:	ldr	fp, [sp, #28]
    dc08:	ldr	sl, [sp, #24]
    dc0c:	add	r0, r0, r4, ror #27
    dc10:	eor	r8, r8, r9
    dc14:	ror	r4, r4, #2
    dc18:	movw	r2, #49622	; 0xc1d6
    dc1c:	movt	r2, #51810	; 0xca62
    dc20:	add	r2, sl, r2
    dc24:	eor	r8, r8, fp
    dc28:	eor	sl, r4, r6
    dc2c:	str	r8, [sp, #48]	; 0x30
    dc30:	ldr	r8, [sp, #52]	; 0x34
    dc34:	eor	sl, sl, r0
    dc38:	add	lr, r2, lr
    dc3c:	ldr	fp, [sp, #40]	; 0x28
    dc40:	add	lr, lr, sl
    dc44:	ldr	sl, [sp, #48]	; 0x30
    dc48:	ror	r9, r8, #31
    dc4c:	ldr	r8, [sp, #60]	; 0x3c
    dc50:	add	r3, r3, r0, ror #27
    dc54:	movw	r2, #49622	; 0xc1d6
    dc58:	eor	fp, fp, r8
    dc5c:	ror	r8, sl, #31
    dc60:	ldr	sl, [sp, #24]
    dc64:	eor	r7, fp, r7
    dc68:	ror	r0, r0, #2
    dc6c:	movt	r2, #51810	; 0xca62
    dc70:	eor	r7, r7, sl
    dc74:	ldr	sl, [sp, #36]	; 0x24
    dc78:	str	r7, [sp, #48]	; 0x30
    dc7c:	eor	fp, r0, r4
    dc80:	ldr	r7, [sp, #32]
    dc84:	add	r2, r9, r2
    dc88:	add	lr, lr, r3, ror #27
    dc8c:	eor	fp, fp, r3
    dc90:	eor	r7, r7, sl
    dc94:	ldr	sl, [sp, #40]	; 0x28
    dc98:	eor	r5, r7, r5
    dc9c:	ldr	r7, [sp, #44]	; 0x2c
    dca0:	add	r2, r2, r6
    dca4:	ror	r6, r3, #2
    dca8:	movw	r3, #49622	; 0xc1d6
    dcac:	movt	r3, #51810	; 0xca62
    dcb0:	eor	r7, r7, sl
    dcb4:	add	r3, r8, r3
    dcb8:	str	r7, [sp, #36]	; 0x24
    dcbc:	add	r2, r2, fp
    dcc0:	ldr	sl, [sp, #48]	; 0x30
    dcc4:	eor	fp, r6, r0
    dcc8:	add	r3, r3, r4
    dccc:	ldr	r4, [sp, #36]	; 0x24
    dcd0:	eor	fp, fp, lr
    dcd4:	add	r2, r2, lr, ror #27
    dcd8:	ror	r7, sl, #31
    dcdc:	ror	lr, lr, #2
    dce0:	eor	r5, r5, r9
    dce4:	eor	ip, r4, ip
    dce8:	add	r3, r3, fp
    dcec:	ldr	r4, [sp, #32]
    dcf0:	ldr	fp, [sp, #64]	; 0x40
    dcf4:	movw	r9, #49622	; 0xc1d6
    dcf8:	movt	r9, #51810	; 0xca62
    dcfc:	eor	sl, lr, r6
    dd00:	add	r9, r7, r9
    dd04:	eor	ip, ip, r8
    dd08:	eor	sl, sl, r2
    dd0c:	eor	r8, fp, r4
    dd10:	ror	r5, r5, #31
    dd14:	add	r0, r9, r0
    dd18:	movw	r4, #49622	; 0xc1d6
    dd1c:	movt	r4, #51810	; 0xca62
    dd20:	add	r3, r3, r2, ror #27
    dd24:	eor	r1, r8, r1
    dd28:	ror	r2, r2, #2
    dd2c:	add	r4, r5, r4
    dd30:	ldr	r8, [sp, #68]	; 0x44
    dd34:	add	r0, r0, sl
    dd38:	ldr	r9, [sp, #44]	; 0x2c
    dd3c:	ror	ip, ip, #31
    dd40:	movw	sl, #49622	; 0xc1d6
    dd44:	movt	sl, #51810	; 0xca62
    dd48:	eor	fp, r2, lr
    dd4c:	add	sl, ip, sl
    dd50:	add	r6, r4, r6
    dd54:	ldr	r4, [sp, #28]
    dd58:	add	r0, r0, r3, ror #27
    dd5c:	eor	fp, fp, r3
    dd60:	eor	r7, r1, r7
    dd64:	ror	r3, r3, #2
    dd68:	eor	r1, r8, r9
    dd6c:	add	lr, sl, lr
    dd70:	ldr	r9, [sp, #72]	; 0x48
    dd74:	eor	r1, r1, r4
    dd78:	ldr	sl, [sp, #64]	; 0x40
    dd7c:	eor	r8, r3, r2
    dd80:	ldr	r4, [sp, #24]
    dd84:	add	r6, r6, fp
    dd88:	add	r6, r6, r0, ror #27
    dd8c:	eor	r8, r8, r0
    dd90:	eor	r5, r1, r5
    dd94:	ror	r0, r0, #2
    dd98:	eor	r1, r9, sl
    dd9c:	eor	fp, r0, r3
    dda0:	eor	r1, r1, r4
    dda4:	ldr	sl, [sp, #20]
    dda8:	add	lr, lr, r8
    ddac:	ror	r4, r6, #2
    ddb0:	add	lr, lr, r6, ror #27
    ddb4:	eor	ip, r1, ip
    ddb8:	ror	r7, r7, #31
    ddbc:	eor	r6, fp, r6
    ddc0:	movw	r9, #49622	; 0xc1d6
    ddc4:	movw	fp, #49622	; 0xc1d6
    ddc8:	movt	r9, #51810	; 0xca62
    ddcc:	movt	fp, #51810	; 0xca62
    ddd0:	add	fp, r7, fp
    ddd4:	add	r9, sl, r9
    ddd8:	add	r2, fp, r2
    dddc:	ror	r5, r5, #31
    dde0:	add	r9, r9, ip, ror #31
    dde4:	movw	ip, #49622	; 0xc1d6
    dde8:	movt	ip, #51810	; 0xca62
    ddec:	eor	r8, r4, r0
    ddf0:	add	r6, r2, r6
    ddf4:	add	ip, r5, ip
    ddf8:	ldr	r5, [sp, #76]	; 0x4c
    ddfc:	add	r3, ip, r3
    de00:	ror	sl, lr, #2
    de04:	eor	r8, r8, lr
    de08:	ldr	fp, [sp, #8]
    de0c:	add	lr, r6, lr, ror #27
    de10:	eor	r1, sl, r4
    de14:	add	r8, r3, r8
    de18:	eor	r1, r1, lr
    de1c:	add	r8, r8, lr, ror #27
    de20:	ldr	ip, [sp, #4]
    de24:	add	r9, r9, r0
    de28:	add	sl, sl, fp
    de2c:	str	sl, [r5, #12]
    de30:	ldr	r6, [sp, #12]
    de34:	add	r9, r9, r1
    de38:	ldr	r7, [sp, #16]
    de3c:	add	r4, r4, ip
    de40:	add	lr, r6, lr, ror #2
    de44:	add	r9, r9, r8, ror #27
    de48:	mov	r2, #64	; 0x40
    de4c:	add	r8, r8, r7
    de50:	add	r0, sp, #100	; 0x64
    de54:	str	r8, [r5, #4]
    de58:	str	r4, [r5, #16]
    de5c:	mov	r1, #0
    de60:	str	lr, [r5, #8]
    de64:	str	r9, [r5]
    de68:	bl	8b78 <memset@plt>
    de6c:	ldr	r8, [sp, #92]	; 0x5c
    de70:	ldr	r2, [sp, #164]	; 0xa4
    de74:	ldr	r3, [r8]
    de78:	cmp	r2, r3
    de7c:	bne	de88 <__assert_fail@plt+0x5250>
    de80:	add	sp, sp, #172	; 0xac
    de84:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    de88:	bl	8adc <__stack_chk_fail@plt>
    de8c:	movw	r2, #8961	; 0x2301
    de90:	movw	r3, #43913	; 0xab89
    de94:	movt	r2, #26437	; 0x6745
    de98:	movt	r3, #61389	; 0xefcd
    de9c:	stm	r0, {r2, r3}
    dea0:	movw	r2, #56574	; 0xdcfe
    dea4:	movw	r3, #21622	; 0x5476
    dea8:	movt	r2, #39098	; 0x98ba
    deac:	movt	r3, #4146	; 0x1032
    deb0:	str	r2, [r0, #8]
    deb4:	str	r3, [r0, #12]
    deb8:	movw	r2, #57840	; 0xe1f0
    debc:	mov	r3, #0
    dec0:	movt	r2, #50130	; 0xc3d2
    dec4:	str	r3, [r0, #24]
    dec8:	str	r2, [r0, #16]
    decc:	str	r3, [r0, #20]
    ded0:	bx	lr
    ded4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    ded8:	lsl	r3, r2, #3
    dedc:	ldr	r8, [r0, #20]
    dee0:	mov	r6, r2
    dee4:	mov	r5, r0
    dee8:	mov	r7, r1
    deec:	add	r2, r3, r8
    def0:	ubfx	r8, r8, #3, #6
    def4:	cmp	r3, r2
    def8:	ldr	r3, [r0, #24]
    defc:	str	r2, [r0, #20]
    df00:	add	r2, r6, r8
    df04:	addhi	r3, r3, #1
    df08:	cmp	r2, #63	; 0x3f
    df0c:	add	r3, r3, r6, lsr #29
    df10:	str	r3, [r0, #24]
    df14:	bhi	df34 <__assert_fail@plt+0x52fc>
    df18:	add	r5, r0, r8
    df1c:	mov	r2, #0
    df20:	add	r0, r5, #28
    df24:	add	r1, r7, r2
    df28:	rsb	r2, r2, r6
    df2c:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
    df30:	b	8ab8 <memcpy@plt>
    df34:	rsb	r4, r8, #64	; 0x40
    df38:	add	r0, r0, r8
    df3c:	add	r9, r5, #28
    df40:	add	r0, r0, #28
    df44:	mov	r2, r4
    df48:	rsb	r8, r8, #127	; 0x7f
    df4c:	bl	8ab8 <memcpy@plt>
    df50:	mov	r1, r9
    df54:	mov	r0, r5
    df58:	bl	c704 <__assert_fail@plt+0x3acc>
    df5c:	cmp	r6, r8
    df60:	bls	df98 <__assert_fail@plt+0x5360>
    df64:	add	r1, r7, r4
    df68:	mov	r0, r5
    df6c:	bl	c704 <__assert_fail@plt+0x3acc>
    df70:	add	r3, r4, #127	; 0x7f
    df74:	add	r2, r4, #64	; 0x40
    df78:	cmp	r3, r6
    df7c:	mov	r4, r2
    df80:	bcc	df64 <__assert_fail@plt+0x532c>
    df84:	add	r1, r7, r2
    df88:	mov	r0, r9
    df8c:	rsb	r2, r2, r6
    df90:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
    df94:	b	8ab8 <memcpy@plt>
    df98:	mov	r0, r9
    df9c:	mov	r2, r4
    dfa0:	b	df24 <__assert_fail@plt+0x52ec>
    dfa4:	ldr	r2, [pc, #332]	; e0f8 <__assert_fail@plt+0x54c0>
    dfa8:	mov	r3, #0
    dfac:	ldr	ip, [pc, #328]	; e0fc <__assert_fail@plt+0x54c4>
    dfb0:	add	r2, pc, r2
    dfb4:	push	{r4, r5, r6, r7, r8, lr}
    dfb8:	sub	sp, sp, #16
    dfbc:	ldr	r8, [r2, ip]
    dfc0:	add	r7, sp, #4
    dfc4:	mov	r6, r0
    dfc8:	mov	r5, r1
    dfcc:	ldr	r2, [r8]
    dfd0:	str	r2, [sp, #12]
    dfd4:	cmp	r3, #3
    dfd8:	mvn	r2, r3
    dfdc:	and	r2, r2, #3
    dfe0:	movls	r1, #20
    dfe4:	movhi	r1, #16
    dfe8:	add	r1, r5, r1
    dfec:	lsl	r2, r2, #3
    dff0:	ldr	r1, [r1, #4]
    dff4:	lsr	r2, r1, r2
    dff8:	strb	r2, [r7, r3]
    dffc:	add	r3, r3, #1
    e000:	cmp	r3, #8
    e004:	bne	dfd4 <__assert_fail@plt+0x539c>
    e008:	ldr	r1, [pc, #240]	; e100 <__assert_fail@plt+0x54c8>
    e00c:	mov	r0, r5
    e010:	mov	r2, #1
    e014:	ldr	r4, [pc, #232]	; e104 <__assert_fail@plt+0x54cc>
    e018:	add	r1, pc, r1
    e01c:	bl	ded4 <__assert_fail@plt+0x529c>
    e020:	ldr	r3, [r5, #20]
    e024:	add	r4, pc, r4
    e028:	and	r3, r3, #504	; 0x1f8
    e02c:	cmp	r3, #448	; 0x1c0
    e030:	beq	e054 <__assert_fail@plt+0x541c>
    e034:	mov	r0, r5
    e038:	mov	r1, r4
    e03c:	mov	r2, #1
    e040:	bl	ded4 <__assert_fail@plt+0x529c>
    e044:	ldr	r3, [r5, #20]
    e048:	and	r3, r3, #504	; 0x1f8
    e04c:	cmp	r3, #448	; 0x1c0
    e050:	bne	e034 <__assert_fail@plt+0x53fc>
    e054:	mov	r0, r5
    e058:	mov	r1, r7
    e05c:	mov	r2, #8
    e060:	mov	r4, #0
    e064:	bl	ded4 <__assert_fail@plt+0x529c>
    e068:	lsr	r2, r4, #2
    e06c:	mvn	r3, r4
    e070:	and	r3, r3, #3
    e074:	ldr	r2, [r5, r2, lsl #2]
    e078:	lsl	r3, r3, #3
    e07c:	lsr	r3, r2, r3
    e080:	strb	r3, [r6, r4]
    e084:	add	r4, r4, #1
    e088:	cmp	r4, #20
    e08c:	bne	e068 <__assert_fail@plt+0x5430>
    e090:	mov	r1, #0
    e094:	mov	r2, #64	; 0x40
    e098:	add	r0, r5, #28
    e09c:	bl	8b78 <memset@plt>
    e0a0:	mov	r2, r4
    e0a4:	mov	r1, #0
    e0a8:	mov	r0, r5
    e0ac:	bl	8b78 <memset@plt>
    e0b0:	ldr	r1, [sp, #12]
    e0b4:	ldr	r2, [r8]
    e0b8:	mov	r3, #0
    e0bc:	str	r3, [sp, #4]
    e0c0:	cmp	r1, r2
    e0c4:	strb	r3, [r5, #20]
    e0c8:	strb	r3, [r5, #21]
    e0cc:	strb	r3, [r5, #22]
    e0d0:	strb	r3, [r5, #23]
    e0d4:	strb	r3, [r5, #24]
    e0d8:	strb	r3, [r5, #25]
    e0dc:	strb	r3, [r5, #26]
    e0e0:	strb	r3, [r5, #27]
    e0e4:	str	r3, [r7, #4]
    e0e8:	bne	e0f4 <__assert_fail@plt+0x54bc>
    e0ec:	add	sp, sp, #16
    e0f0:	pop	{r4, r5, r6, r7, r8, pc}
    e0f4:	bl	8adc <__stack_chk_fail@plt>
    e0f8:	andeq	fp, r0, r8, asr #32
    e0fc:	andeq	r0, r0, r0, lsr #1
    e100:	andeq	r2, r0, r8, ror #14
    e104:	andeq	r2, r0, r8, asr r7
    e108:	b	ded4 <__assert_fail@plt+0x529c>
    e10c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e110:	mov	fp, r3
    e114:	ldr	lr, [pc, #132]	; e1a0 <__assert_fail@plt+0x5568>
    e118:	sub	sp, sp, #100	; 0x64
    e11c:	ldr	ip, [pc, #128]	; e1a4 <__assert_fail@plt+0x556c>
    e120:	mov	r7, r0
    e124:	add	lr, pc, lr
    e128:	mov	r0, sp
    e12c:	mov	r8, r1
    e130:	mov	r9, r2
    e134:	ldr	sl, [lr, ip]
    e138:	mov	r3, lr
    e13c:	ldr	r3, [sl]
    e140:	str	r3, [sp, #92]	; 0x5c
    e144:	bl	de8c <__assert_fail@plt+0x5254>
    e148:	cmp	r7, #0
    e14c:	movne	r4, #0
    e150:	movne	r5, r4
    e154:	beq	e178 <__assert_fail@plt+0x5540>
    e158:	ldr	r1, [r8, r4]
    e15c:	add	r5, r5, #1
    e160:	ldr	r2, [r9, r4]
    e164:	mov	r0, sp
    e168:	bl	ded4 <__assert_fail@plt+0x529c>
    e16c:	cmp	r5, r7
    e170:	add	r4, r4, #4
    e174:	bne	e158 <__assert_fail@plt+0x5520>
    e178:	mov	r0, fp
    e17c:	mov	r1, sp
    e180:	bl	dfa4 <__assert_fail@plt+0x536c>
    e184:	ldr	r2, [sp, #92]	; 0x5c
    e188:	ldr	r3, [sl]
    e18c:	cmp	r2, r3
    e190:	bne	e19c <__assert_fail@plt+0x5564>
    e194:	add	sp, sp, #100	; 0x64
    e198:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e19c:	bl	8adc <__stack_chk_fail@plt>
    e1a0:	ldrdeq	sl, [r0], -r4
    e1a4:	andeq	r0, r0, r0, lsr #1
    e1a8:	ldr	r3, [pc, #236]	; e29c <__assert_fail@plt+0x5664>
    e1ac:	cmp	r2, #64	; 0x40
    e1b0:	ldr	ip, [pc, #232]	; e2a0 <__assert_fail@plt+0x5668>
    e1b4:	push	{r4, r5, r6, r7, r8, lr}
    e1b8:	add	r3, pc, r3
    e1bc:	sub	sp, sp, #96	; 0x60
    e1c0:	mov	r6, r2
    e1c4:	mov	r5, r0
    e1c8:	movls	r8, r1
    e1cc:	str	r1, [sp, #4]
    e1d0:	str	r2, [sp]
    e1d4:	ldr	r7, [r3, ip]
    e1d8:	ldr	r3, [r7]
    e1dc:	str	r3, [sp, #92]	; 0x5c
    e1e0:	bhi	e26c <__assert_fail@plt+0x5634>
    e1e4:	add	r4, sp, #28
    e1e8:	mov	r1, #0
    e1ec:	mov	r2, #64	; 0x40
    e1f0:	mov	r0, r4
    e1f4:	bl	8b78 <memset@plt>
    e1f8:	mov	r2, r6
    e1fc:	mov	r3, #64	; 0x40
    e200:	mov	r0, r4
    e204:	mov	r1, r8
    e208:	bl	8af4 <__memcpy_chk@plt>
    e20c:	add	r2, sp, #92	; 0x5c
    e210:	mov	r3, r4
    e214:	ldrb	ip, [r3]
    e218:	eor	ip, ip, #54	; 0x36
    e21c:	strb	ip, [r3], #1
    e220:	cmp	r3, r2
    e224:	bne	e214 <__assert_fail@plt+0x55dc>
    e228:	mov	r1, r8
    e22c:	mov	r2, r6
    e230:	add	r0, r5, #92	; 0x5c
    e234:	bl	8ab8 <memcpy@plt>
    e238:	mov	r0, r5
    e23c:	str	r6, [r5, #156]	; 0x9c
    e240:	bl	de8c <__assert_fail@plt+0x5254>
    e244:	mov	r2, #64	; 0x40
    e248:	mov	r0, r5
    e24c:	mov	r1, r4
    e250:	bl	ded4 <__assert_fail@plt+0x529c>
    e254:	ldr	r2, [sp, #92]	; 0x5c
    e258:	ldr	r3, [r7]
    e25c:	cmp	r2, r3
    e260:	bne	e298 <__assert_fail@plt+0x5660>
    e264:	add	sp, sp, #96	; 0x60
    e268:	pop	{r4, r5, r6, r7, r8, pc}
    e26c:	add	r4, sp, #8
    e270:	mov	r0, #1
    e274:	add	r1, sp, #4
    e278:	mov	r2, sp
    e27c:	mov	r3, r4
    e280:	mov	r8, r4
    e284:	bl	e10c <__assert_fail@plt+0x54d4>
    e288:	mov	r3, #20
    e28c:	mov	r6, r3
    e290:	stm	sp, {r3, r4}
    e294:	b	e1e4 <__assert_fail@plt+0x55ac>
    e298:	bl	8adc <__stack_chk_fail@plt>
    e29c:	andeq	sl, r0, r0, asr #28
    e2a0:	andeq	r0, r0, r0, lsr #1
    e2a4:	ldr	r3, [pc, #184]	; e364 <__assert_fail@plt+0x572c>
    e2a8:	ldr	r2, [pc, #184]	; e368 <__assert_fail@plt+0x5730>
    e2ac:	add	r3, pc, r3
    e2b0:	push	{r4, r5, r6, r7, r8, lr}
    e2b4:	sub	sp, sp, #104	; 0x68
    e2b8:	ldr	r5, [r3, r2]
    e2bc:	add	r6, sp, #16
    e2c0:	add	r4, sp, #36	; 0x24
    e2c4:	mov	r8, r0
    e2c8:	mov	r0, r6
    e2cc:	mov	r7, r1
    e2d0:	ldr	r3, [r5]
    e2d4:	str	r3, [sp, #100]	; 0x64
    e2d8:	bl	dfa4 <__assert_fail@plt+0x536c>
    e2dc:	mov	r1, #0
    e2e0:	mov	r2, #64	; 0x40
    e2e4:	mov	r0, r4
    e2e8:	bl	8b78 <memset@plt>
    e2ec:	ldr	r2, [r7, #156]	; 0x9c
    e2f0:	mov	r0, r4
    e2f4:	add	r1, r7, #92	; 0x5c
    e2f8:	mov	r3, #64	; 0x40
    e2fc:	bl	8af4 <__memcpy_chk@plt>
    e300:	add	ip, sp, #100	; 0x64
    e304:	mov	r2, r4
    e308:	ldrb	r1, [r2]
    e30c:	eor	r1, r1, #92	; 0x5c
    e310:	strb	r1, [r2], #1
    e314:	cmp	r2, ip
    e318:	bne	e308 <__assert_fail@plt+0x56d0>
    e31c:	mov	r3, r8
    e320:	add	r2, sp, #8
    e324:	mov	r0, #2
    e328:	mov	r1, sp
    e32c:	mov	lr, #64	; 0x40
    e330:	mov	ip, #20
    e334:	str	r4, [sp]
    e338:	str	r6, [sp, #4]
    e33c:	str	lr, [sp, #8]
    e340:	str	ip, [sp, #12]
    e344:	bl	e10c <__assert_fail@plt+0x54d4>
    e348:	ldr	r2, [sp, #100]	; 0x64
    e34c:	ldr	r3, [r5]
    e350:	cmp	r2, r3
    e354:	bne	e360 <__assert_fail@plt+0x5728>
    e358:	add	sp, sp, #104	; 0x68
    e35c:	pop	{r4, r5, r6, r7, r8, pc}
    e360:	bl	8adc <__stack_chk_fail@plt>
    e364:	andeq	sl, r0, ip, asr #26
    e368:	andeq	r0, r0, r0, lsr #1
    e36c:	ldr	ip, [pc, #436]	; e528 <__assert_fail@plt+0x58f0>
    e370:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e374:	mov	r8, r2
    e378:	ldr	r2, [pc, #428]	; e52c <__assert_fail@plt+0x58f4>
    e37c:	sub	sp, sp, #156	; 0x9c
    e380:	add	ip, pc, ip
    e384:	mov	r6, r3
    e388:	str	r0, [sp, #12]
    e38c:	cmp	r8, #5
    e390:	str	r1, [sp, #8]
    e394:	mov	r3, ip
    e398:	ldr	r2, [ip, r2]
    e39c:	ldr	r7, [sp, #192]	; 0xc0
    e3a0:	ldr	r9, [sp, #196]	; 0xc4
    e3a4:	ldr	r3, [r2]
    e3a8:	str	r2, [sp, #4]
    e3ac:	str	r3, [sp, #148]	; 0x94
    e3b0:	bhi	e4cc <__assert_fail@plt+0x5894>
    e3b4:	cmp	r1, #64	; 0x40
    e3b8:	bhi	e4e8 <__assert_fail@plt+0x58b0>
    e3bc:	mov	fp, r0
    e3c0:	mov	sl, r1
    e3c4:	add	r5, sp, #84	; 0x54
    e3c8:	mov	r1, #0
    e3cc:	mov	r2, #64	; 0x40
    e3d0:	add	r4, sp, #148	; 0x94
    e3d4:	mov	r0, r5
    e3d8:	bl	8b78 <memset@plt>
    e3dc:	mov	r3, #64	; 0x40
    e3e0:	mov	r0, r5
    e3e4:	mov	r1, fp
    e3e8:	mov	r2, sl
    e3ec:	bl	8af4 <__memcpy_chk@plt>
    e3f0:	mov	r3, r5
    e3f4:	ldrb	r2, [r3]
    e3f8:	eor	r2, r2, #54	; 0x36
    e3fc:	strb	r2, [r3], #1
    e400:	cmp	r3, r4
    e404:	bne	e3f4 <__assert_fail@plt+0x57bc>
    e408:	cmp	r8, #0
    e40c:	mov	r3, #64	; 0x40
    e410:	str	r5, [sp, #16]
    e414:	str	r3, [sp, #40]	; 0x28
    e418:	beq	e518 <__assert_fail@plt+0x58e0>
    e41c:	mov	r2, #0
    e420:	lsl	lr, r8, #2
    e424:	add	fp, sp, #16
    e428:	add	sl, sp, #40	; 0x28
    e42c:	mov	r3, r2
    e430:	ldr	r0, [r6, r3]
    e434:	add	r2, r2, #4
    e438:	ldr	r1, [r7, r3]
    e43c:	add	r3, r3, #4
    e440:	cmp	r3, lr
    e444:	str	r0, [fp, r2]
    e448:	str	r1, [sl, r2]
    e44c:	bne	e430 <__assert_fail@plt+0x57f8>
    e450:	mov	r3, r9
    e454:	add	r0, r8, #1
    e458:	mov	r1, fp
    e45c:	mov	r2, sl
    e460:	bl	e10c <__assert_fail@plt+0x54d4>
    e464:	mov	r1, #0
    e468:	mov	r2, #64	; 0x40
    e46c:	mov	r0, r5
    e470:	bl	8b78 <memset@plt>
    e474:	mov	r3, #64	; 0x40
    e478:	mov	r0, r5
    e47c:	ldr	r1, [sp, #12]
    e480:	ldr	r2, [sp, #8]
    e484:	bl	8af4 <__memcpy_chk@plt>
    e488:	mov	r3, r5
    e48c:	ldrb	r2, [r3]
    e490:	eor	r2, r2, #92	; 0x5c
    e494:	strb	r2, [r3], #1
    e498:	cmp	r3, r4
    e49c:	bne	e48c <__assert_fail@plt+0x5854>
    e4a0:	mov	r1, fp
    e4a4:	mov	r2, sl
    e4a8:	mov	r3, r9
    e4ac:	mov	r0, #2
    e4b0:	mov	lr, #64	; 0x40
    e4b4:	mov	ip, #20
    e4b8:	str	r5, [sp, #16]
    e4bc:	str	r9, [sp, #20]
    e4c0:	str	lr, [sp, #40]	; 0x28
    e4c4:	str	ip, [sp, #44]	; 0x2c
    e4c8:	bl	e10c <__assert_fail@plt+0x54d4>
    e4cc:	ldr	r1, [sp, #4]
    e4d0:	ldr	r2, [sp, #148]	; 0x94
    e4d4:	ldr	r3, [r1]
    e4d8:	cmp	r2, r3
    e4dc:	bne	e524 <__assert_fail@plt+0x58ec>
    e4e0:	add	sp, sp, #156	; 0x9c
    e4e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e4e8:	add	r4, sp, #64	; 0x40
    e4ec:	mov	r0, #1
    e4f0:	add	r1, sp, #12
    e4f4:	add	r2, sp, #8
    e4f8:	mov	r3, r4
    e4fc:	mov	fp, r4
    e500:	bl	e10c <__assert_fail@plt+0x54d4>
    e504:	mov	r3, #20
    e508:	mov	sl, r3
    e50c:	str	r4, [sp, #12]
    e510:	str	r3, [sp, #8]
    e514:	b	e3c4 <__assert_fail@plt+0x578c>
    e518:	add	fp, sp, #16
    e51c:	add	sl, sp, #40	; 0x28
    e520:	b	e450 <__assert_fail@plt+0x5818>
    e524:	bl	8adc <__stack_chk_fail@plt>
    e528:	andeq	sl, r0, r8, ror ip
    e52c:	andeq	r0, r0, r0, lsr #1
    e530:	push	{lr}		; (str lr, [sp, #-4]!)
    e534:	sub	sp, sp, #20
    e538:	ldr	ip, [sp, #24]
    e53c:	str	r2, [sp, #12]
    e540:	mov	r2, #1
    e544:	str	r3, [sp, #8]
    e548:	add	r3, sp, #12
    e54c:	str	ip, [sp, #4]
    e550:	add	ip, sp, #8
    e554:	str	ip, [sp]
    e558:	bl	e36c <__assert_fail@plt+0x5734>
    e55c:	add	sp, sp, #20
    e560:	pop	{pc}		; (ldr pc, [sp], #4)
    e564:	ldr	ip, [pc, #296]	; e694 <__assert_fail@plt+0x5a5c>
    e568:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e56c:	add	ip, pc, ip
    e570:	ldr	lr, [pc, #288]	; e698 <__assert_fail@plt+0x5a60>
    e574:	mov	r9, r2
    e578:	mov	r6, r0
    e57c:	mov	r0, r2
    e580:	mov	r2, ip
    e584:	sub	sp, sp, #76	; 0x4c
    e588:	ldr	fp, [ip, lr]
    e58c:	mov	sl, r3
    e590:	mov	r4, #0
    e594:	mov	r7, r1
    e598:	strb	r4, [sp, #23]
    e59c:	ldr	r2, [fp]
    e5a0:	ldr	r5, [sp, #120]	; 0x78
    e5a4:	ldr	r8, [sp, #116]	; 0x74
    e5a8:	str	r2, [sp, #68]	; 0x44
    e5ac:	bl	8b54 <strlen@plt>
    e5b0:	ldr	r3, [sp, #112]	; 0x70
    e5b4:	cmp	r5, r4
    e5b8:	add	r2, sp, #23
    e5bc:	str	sl, [sp, #28]
    e5c0:	str	r9, [sp, #24]
    e5c4:	str	r3, [sp, #40]	; 0x28
    e5c8:	mov	r3, #1
    e5cc:	str	r2, [sp, #32]
    e5d0:	str	r3, [sp, #44]	; 0x2c
    e5d4:	add	r0, r0, r3
    e5d8:	str	r0, [sp, #36]	; 0x24
    e5dc:	beq	e638 <__assert_fail@plt+0x5a00>
    e5e0:	cmp	r5, #19
    e5e4:	add	sl, sp, #24
    e5e8:	add	r9, sp, #36	; 0x24
    e5ec:	bhi	e600 <__assert_fail@plt+0x59c8>
    e5f0:	b	e650 <__assert_fail@plt+0x5a18>
    e5f4:	rsb	ip, r4, r5
    e5f8:	cmp	ip, #19
    e5fc:	bls	e654 <__assert_fail@plt+0x5a1c>
    e600:	add	r3, r8, r4
    e604:	str	r9, [sp]
    e608:	str	r3, [sp, #4]
    e60c:	mov	r0, r6
    e610:	mov	r3, sl
    e614:	add	r4, r4, #20
    e618:	mov	r1, r7
    e61c:	mov	r2, #3
    e620:	bl	e36c <__assert_fail@plt+0x5734>
    e624:	ldrb	r3, [sp, #23]
    e628:	cmp	r5, r4
    e62c:	add	r3, r3, #1
    e630:	strb	r3, [sp, #23]
    e634:	bhi	e5f4 <__assert_fail@plt+0x59bc>
    e638:	ldr	r2, [sp, #68]	; 0x44
    e63c:	ldr	r3, [fp]
    e640:	cmp	r2, r3
    e644:	bne	e690 <__assert_fail@plt+0x5a58>
    e648:	add	sp, sp, #76	; 0x4c
    e64c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e650:	mov	ip, r5
    e654:	mov	r0, r6
    e658:	mov	r1, r7
    e65c:	add	r5, sp, #48	; 0x30
    e660:	str	r9, [sp]
    e664:	mov	r3, sl
    e668:	str	r5, [sp, #4]
    e66c:	mov	r2, #3
    e670:	str	ip, [sp, #12]
    e674:	bl	e36c <__assert_fail@plt+0x5734>
    e678:	ldr	ip, [sp, #12]
    e67c:	mov	r1, r5
    e680:	add	r0, r8, r4
    e684:	mov	r2, ip
    e688:	bl	8ab8 <memcpy@plt>
    e68c:	b	e638 <__assert_fail@plt+0x5a00>
    e690:	bl	8adc <__stack_chk_fail@plt>
    e694:	andeq	sl, r0, ip, lsl #21
    e698:	andeq	r0, r0, r0, lsr #1
    e69c:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
    e6a0:	sub	sp, sp, #48	; 0x30
    e6a4:	ldr	r3, [r1]
    e6a8:	movw	ip, #42104	; 0xa478
    e6ac:	ldr	r5, [r0, #8]
    e6b0:	movt	ip, #55146	; 0xd76a
    e6b4:	ldr	r4, [r0, #12]
    e6b8:	movw	r2, #46934	; 0xb756
    e6bc:	str	r3, [sp]
    e6c0:	movt	r2, #59591	; 0xe8c7
    e6c4:	ldr	r6, [r0, #4]
    e6c8:	eor	r3, r4, r5
    e6cc:	ldr	r7, [sp]
    e6d0:	movw	fp, #50730	; 0xc62a
    e6d4:	ldr	r8, [r0]
    e6d8:	and	r3, r3, r6
    e6dc:	add	ip, r7, ip
    e6e0:	eor	r3, r3, r4
    e6e4:	add	ip, ip, r8
    e6e8:	ldr	r9, [r1, #4]
    e6ec:	add	r3, ip, r3
    e6f0:	ldr	ip, [r0, #4]
    e6f4:	eor	r6, r5, r6
    e6f8:	add	r2, r9, r2
    e6fc:	add	r3, ip, r3, ror #25
    e700:	ldr	sl, [r1, #8]
    e704:	and	r6, r3, r6
    e708:	add	r2, r2, r4
    e70c:	eor	r6, r6, r5
    e710:	movw	r4, #28891	; 0x70db
    e714:	add	r6, r2, r6
    e718:	movt	r4, #9248	; 0x2420
    e71c:	add	r4, sl, r4
    e720:	ldr	r2, [r1, #12]
    e724:	add	r6, r3, r6, ror #20
    e728:	add	r4, r4, r5
    e72c:	eor	ip, r3, ip
    e730:	ldr	r5, [r0, #4]
    e734:	and	ip, r6, ip
    e738:	str	r2, [sp, #12]
    e73c:	eor	ip, ip, r5
    e740:	ldr	r8, [sp, #12]
    e744:	add	ip, r4, ip
    e748:	eor	r2, r6, r3
    e74c:	movw	r4, #52974	; 0xceee
    e750:	movt	r4, #49597	; 0xc1bd
    e754:	add	ip, r6, ip, ror #15
    e758:	add	r4, r8, r4
    e75c:	and	r2, ip, r2
    e760:	add	r4, r4, r5
    e764:	eor	r2, r2, r3
    e768:	ldr	r7, [r1, #16]
    e76c:	add	r2, r4, r2
    e770:	movw	r5, #4015	; 0xfaf
    e774:	eor	r4, ip, r6
    e778:	movt	r5, #62844	; 0xf57c
    e77c:	add	r2, ip, r2, ror #10
    e780:	add	r5, r7, r5
    e784:	and	r4, r2, r4
    e788:	add	r3, r5, r3
    e78c:	eor	r4, r4, r6
    e790:	str	r9, [sp, #4]
    e794:	add	r3, r3, r4
    e798:	ldr	r9, [r1, #20]
    e79c:	eor	r4, r2, ip
    e7a0:	movt	fp, #18311	; 0x4787
    e7a4:	add	r3, r2, r3, ror #25
    e7a8:	add	fp, r9, fp
    e7ac:	and	r4, r3, r4
    e7b0:	add	r6, fp, r6
    e7b4:	eor	r4, r4, ip
    e7b8:	str	sl, [sp, #8]
    e7bc:	add	r6, r6, r4
    e7c0:	ldr	sl, [r1, #24]
    e7c4:	eor	r4, r3, r2
    e7c8:	movw	r5, #17939	; 0x4613
    e7cc:	add	r6, r3, r6, ror #20
    e7d0:	movt	r5, #43056	; 0xa830
    e7d4:	str	r7, [sp, #16]
    e7d8:	add	r5, sl, r5
    e7dc:	ldr	r7, [r1, #28]
    e7e0:	and	r4, r6, r4
    e7e4:	eor	r4, r4, r2
    e7e8:	add	ip, r5, ip
    e7ec:	movw	r5, #38145	; 0x9501
    e7f0:	movt	r5, #64838	; 0xfd46
    e7f4:	add	r5, r7, r5
    e7f8:	add	ip, ip, r4
    e7fc:	add	r2, r5, r2
    e800:	ldr	r5, [r1, #32]
    e804:	add	ip, r6, ip, ror #15
    e808:	eor	r4, r6, r3
    e80c:	and	r4, ip, r4
    e810:	str	r9, [sp, #20]
    e814:	str	r5, [sp, #28]
    e818:	eor	r4, r4, r3
    e81c:	ldr	r9, [sp, #28]
    e820:	add	r2, r2, r4
    e824:	movw	r5, #39128	; 0x98d8
    e828:	movt	r5, #27008	; 0x6980
    e82c:	add	r2, ip, r2, ror #10
    e830:	eor	r8, ip, r6
    e834:	add	r5, r9, r5
    e838:	str	sl, [sp, #24]
    e83c:	add	r3, r5, r3
    e840:	and	r5, r2, r8
    e844:	eor	r5, r5, r6
    e848:	ldr	sl, [r1, #36]	; 0x24
    e84c:	add	r5, r3, r5
    e850:	ldr	r3, [r1, #40]	; 0x28
    e854:	eor	r4, r2, ip
    e858:	movw	fp, #63407	; 0xf7af
    e85c:	add	r5, r2, r5, ror #25
    e860:	movt	fp, #35652	; 0x8b44
    e864:	add	fp, sl, fp
    e868:	and	r4, r5, r4
    e86c:	str	r3, [sp, #36]	; 0x24
    e870:	eor	r4, r4, ip
    e874:	add	fp, fp, r6
    e878:	eor	r3, r5, r2
    e87c:	add	fp, fp, r4
    e880:	ldr	r4, [sp, #36]	; 0x24
    e884:	ldr	r6, [r1, #44]	; 0x2c
    e888:	add	fp, r5, fp, ror #20
    e88c:	sub	r9, r4, #41984	; 0xa400
    e890:	sub	r9, r9, #79	; 0x4f
    e894:	and	r3, fp, r3
    e898:	eor	r3, r3, r2
    e89c:	add	ip, r9, ip
    e8a0:	add	r9, ip, r3
    e8a4:	movw	r4, #55230	; 0xd7be
    e8a8:	movt	r4, #35164	; 0x895c
    e8ac:	eor	r3, fp, r5
    e8b0:	add	r9, fp, r9, ror #15
    e8b4:	add	r4, r6, r4
    e8b8:	add	r2, r4, r2
    e8bc:	and	r4, r9, r3
    e8c0:	eor	r4, r4, r5
    e8c4:	str	sl, [sp, #32]
    e8c8:	add	r4, r2, r4
    e8cc:	str	r6, [sp, #40]	; 0x28
    e8d0:	ldr	ip, [r1, #48]	; 0x30
    e8d4:	movw	r3, #4386	; 0x1122
    e8d8:	ldr	r8, [r1, #52]	; 0x34
    e8dc:	movt	r3, #27536	; 0x6b90
    e8e0:	add	r4, r9, r4, ror #10
    e8e4:	eor	r6, r9, fp
    e8e8:	add	r3, ip, r3
    e8ec:	eor	r2, r4, r9
    e8f0:	add	r5, r3, r5
    e8f4:	and	r3, r4, r6
    e8f8:	str	r8, [sp, #44]	; 0x2c
    e8fc:	eor	r3, r3, fp
    e900:	ldr	sl, [sp, #44]	; 0x2c
    e904:	add	r3, r5, r3
    e908:	movw	r8, #29075	; 0x7193
    e90c:	movt	r8, #64920	; 0xfd98
    e910:	add	r3, r4, r3, ror #25
    e914:	add	r8, sl, r8
    e918:	add	fp, r8, fp
    e91c:	and	r8, r3, r2
    e920:	eor	r8, r8, r9
    e924:	ldr	r5, [r1, #56]	; 0x38
    e928:	add	r8, fp, r8
    e92c:	movw	r6, #17294	; 0x438e
    e930:	movt	r6, #42617	; 0xa679
    e934:	eor	r2, r3, r4
    e938:	add	r8, r3, r8, ror #20
    e93c:	add	r6, r5, r6
    e940:	add	r9, r6, r9
    e944:	and	r6, r8, r2
    e948:	eor	r6, r6, r4
    e94c:	ldr	r1, [r1, #60]	; 0x3c
    e950:	add	r6, r9, r6
    e954:	movw	r2, #2081	; 0x821
    e958:	movt	r2, #18868	; 0x49b4
    e95c:	eor	r9, r8, r3
    e960:	add	r6, r8, r6, ror #15
    e964:	add	r2, r1, r2
    e968:	add	r4, r2, r4
    e96c:	and	r2, r6, r9
    e970:	ldr	r9, [sp, #4]
    e974:	eor	r2, r2, r3
    e978:	movw	sl, #9570	; 0x2562
    e97c:	movt	sl, #63006	; 0xf61e
    e980:	add	sl, r9, sl
    e984:	add	r2, r4, r2
    e988:	add	r3, sl, r3
    e98c:	ldr	sl, [sp, #24]
    e990:	add	r2, r6, r2, ror #10
    e994:	movw	r4, #45888	; 0xb340
    e998:	movt	r4, #49216	; 0xc040
    e99c:	movw	fp, #23121	; 0x5a51
    e9a0:	add	r4, sl, r4
    e9a4:	eor	sl, r2, r6
    e9a8:	and	sl, sl, r8
    e9ac:	movt	fp, #9822	; 0x265e
    e9b0:	eor	sl, sl, r6
    e9b4:	add	r4, r4, r8
    e9b8:	add	sl, r3, sl
    e9bc:	ldr	r3, [sp, #40]	; 0x28
    e9c0:	ldr	r9, [sp]
    e9c4:	movw	r8, #51114	; 0xc7aa
    e9c8:	add	sl, r2, sl, ror #27
    e9cc:	add	fp, r3, fp
    e9d0:	eor	r3, sl, r2
    e9d4:	movt	r8, #59830	; 0xe9b6
    e9d8:	and	r3, r3, r6
    e9dc:	add	r8, r9, r8
    e9e0:	eor	r3, r3, r2
    e9e4:	add	fp, fp, r6
    e9e8:	add	r3, r4, r3
    e9ec:	ldr	r4, [sp, #20]
    e9f0:	add	r8, r8, r2
    e9f4:	movw	r6, #4189	; 0x105d
    e9f8:	add	r3, sl, r3, ror #23
    e9fc:	movt	r6, #54831	; 0xd62f
    ea00:	eor	r9, r3, sl
    ea04:	add	r6, r4, r6
    ea08:	and	r9, r9, r2
    ea0c:	ldr	r2, [sp, #36]	; 0x24
    ea10:	eor	r9, r9, sl
    ea14:	movw	r4, #5203	; 0x1453
    ea18:	add	r9, fp, r9
    ea1c:	movt	r4, #580	; 0x244
    ea20:	add	r4, r2, r4
    ea24:	add	r6, r6, sl
    ea28:	add	r9, r3, r9, ror #18
    ea2c:	add	r2, r4, r3
    ea30:	eor	r4, r9, r3
    ea34:	movw	fp, #59009	; 0xe681
    ea38:	and	r4, r4, sl
    ea3c:	movt	fp, #55457	; 0xd8a1
    ea40:	eor	r4, r4, r3
    ea44:	add	fp, r1, fp
    ea48:	add	r4, r8, r4
    ea4c:	add	fp, fp, r9
    ea50:	movw	sl, #64456	; 0xfbc8
    ea54:	movt	sl, #59347	; 0xe7d3
    ea58:	add	r4, r9, r4, ror #12
    ea5c:	eor	r8, r4, r9
    ea60:	and	r8, r8, r3
    ea64:	ldr	r3, [sp, #16]
    ea68:	eor	r8, r8, r9
    ea6c:	add	r8, r6, r8
    ea70:	add	sl, r3, sl
    ea74:	movw	r3, #52710	; 0xcde6
    ea78:	movt	r3, #8673	; 0x21e1
    ea7c:	add	r8, r4, r8, ror #27
    ea80:	add	sl, sl, r4
    ea84:	eor	r6, r8, r4
    ea88:	and	r6, r6, r9
    ea8c:	ldr	r9, [sp, #32]
    ea90:	eor	r6, r6, r4
    ea94:	add	r6, r2, r6
    ea98:	add	r3, r9, r3
    ea9c:	add	r9, r3, r8
    eaa0:	movw	r3, #2006	; 0x7d6
    eaa4:	add	r6, r8, r6, ror #23
    eaa8:	movt	r3, #49975	; 0xc337
    eaac:	eor	r2, r6, r8
    eab0:	add	r3, r5, r3
    eab4:	and	r2, r2, r4
    eab8:	add	r4, r3, r6
    eabc:	eor	r2, r2, r8
    eac0:	add	r2, fp, r2
    eac4:	movw	fp, #3463	; 0xd87
    eac8:	movt	fp, #62677	; 0xf4d5
    eacc:	add	r2, r6, r2, ror #18
    ead0:	eor	r3, r2, r6
    ead4:	and	r3, r3, r8
    ead8:	movw	r8, #5357	; 0x14ed
    eadc:	eor	r3, r3, r6
    eae0:	movt	r8, #17754	; 0x455a
    eae4:	add	r3, sl, r3
    eae8:	ldr	sl, [sp, #12]
    eaec:	add	r3, r2, r3, ror #12
    eaf0:	add	fp, sl, fp
    eaf4:	eor	sl, r3, r2
    eaf8:	add	fp, fp, r2
    eafc:	and	sl, sl, r6
    eb00:	ldr	r6, [sp, #28]
    eb04:	eor	sl, sl, r2
    eb08:	add	sl, r9, sl
    eb0c:	add	r8, r6, r8
    eb10:	add	r8, r8, r3
    eb14:	movw	r6, #59653	; 0xe905
    eb18:	add	sl, r3, sl, ror #27
    eb1c:	movt	r6, #43491	; 0xa9e3
    eb20:	eor	r9, sl, r3
    eb24:	and	r9, r9, r2
    eb28:	ldr	r2, [sp, #44]	; 0x2c
    eb2c:	eor	r9, r9, r3
    eb30:	add	r9, r4, r9
    eb34:	add	r6, r2, r6
    eb38:	movw	r2, #41976	; 0xa3f8
    eb3c:	movt	r2, #64751	; 0xfcef
    eb40:	add	r9, sl, r9, ror #23
    eb44:	add	r6, r6, sl
    eb48:	eor	r4, r9, sl
    eb4c:	and	r4, r4, r3
    eb50:	ldr	r3, [sp, #8]
    eb54:	eor	r4, r4, sl
    eb58:	add	r4, fp, r4
    eb5c:	add	r2, r3, r2
    eb60:	add	r2, r2, r9
    eb64:	movw	fp, #729	; 0x2d9
    eb68:	add	r4, r9, r4, ror #18
    eb6c:	movt	fp, #26479	; 0x676f
    eb70:	eor	r3, r4, r9
    eb74:	add	fp, r7, fp
    eb78:	and	sl, r3, sl
    eb7c:	add	fp, fp, r4
    eb80:	eor	sl, sl, r9
    eb84:	add	r8, r8, sl
    eb88:	movw	sl, #14658	; 0x3942
    eb8c:	movt	sl, #65530	; 0xfffa
    eb90:	add	r8, r4, r8, ror #12
    eb94:	eor	r3, r8, r4
    eb98:	and	r9, r3, r9
    eb9c:	movw	r3, #19594	; 0x4c8a
    eba0:	eor	r9, r9, r4
    eba4:	movt	r3, #36138	; 0x8d2a
    eba8:	add	r6, r6, r9
    ebac:	add	r3, ip, r3
    ebb0:	add	r9, r3, r8
    ebb4:	add	r6, r8, r6, ror #27
    ebb8:	eor	r3, r6, r8
    ebbc:	and	r3, r3, r4
    ebc0:	ldr	r4, [sp, #20]
    ebc4:	eor	r3, r3, r8
    ebc8:	add	r3, r2, r3
    ebcc:	add	sl, r4, sl
    ebd0:	movw	r4, #63105	; 0xf681
    ebd4:	movt	r4, #34673	; 0x8771
    ebd8:	add	r3, r6, r3, ror #23
    ebdc:	add	sl, sl, r6
    ebe0:	eor	r2, r3, r6
    ebe4:	and	r2, r2, r8
    ebe8:	ldr	r8, [sp, #28]
    ebec:	eor	r2, r2, r6
    ebf0:	add	r2, fp, r2
    ebf4:	add	r4, r8, r4
    ebf8:	add	r8, r4, r3
    ebfc:	movw	fp, #53305	; 0xd039
    ec00:	add	r2, r3, r2, ror #18
    ec04:	movt	fp, #55764	; 0xd9d4
    ec08:	eor	r4, r2, r3
    ec0c:	and	r6, r4, r6
    ec10:	eor	r3, r6, r3
    ec14:	movw	r6, #24866	; 0x6122
    ec18:	add	r3, r9, r3
    ec1c:	ldr	r9, [sp, #40]	; 0x28
    ec20:	movt	r6, #28061	; 0x6d9d
    ec24:	add	r3, r2, r3, ror #12
    ec28:	add	r6, r9, r6
    ec2c:	eor	r4, r3, r4
    ec30:	add	r6, r6, r2
    ec34:	add	r4, sl, r4
    ec38:	eor	r2, r3, r2
    ec3c:	movw	r9, #14348	; 0x380c
    ec40:	movt	r9, #64997	; 0xfde5
    ec44:	add	r4, r3, r4, ror #28
    ec48:	add	r9, r5, r9
    ec4c:	eor	r2, r2, r4
    ec50:	add	r9, r9, r3
    ec54:	add	r2, r8, r2
    ec58:	eor	r3, r4, r3
    ec5c:	ldr	r8, [sp, #4]
    ec60:	movw	sl, #59972	; 0xea44
    ec64:	add	r2, r4, r2, ror #21
    ec68:	movt	sl, #42174	; 0xa4be
    ec6c:	eor	r3, r3, r2
    ec70:	add	sl, r8, sl
    ec74:	add	r3, r6, r3
    ec78:	add	sl, sl, r4
    ec7c:	eor	r4, r2, r4
    ec80:	ldr	r6, [sp, #16]
    ec84:	add	r3, r2, r3, ror #16
    ec88:	movw	r8, #53161	; 0xcfa9
    ec8c:	eor	r4, r4, r3
    ec90:	movt	r8, #19422	; 0x4bde
    ec94:	add	r4, r9, r4
    ec98:	add	r8, r6, r8
    ec9c:	add	r8, r8, r2
    eca0:	eor	r2, r3, r2
    eca4:	add	r4, r3, r4, ror #9
    eca8:	movw	r6, #19296	; 0x4b60
    ecac:	eor	r2, r2, r4
    ecb0:	movt	r6, #63163	; 0xf6bb
    ecb4:	add	r2, sl, r2
    ecb8:	add	r6, r7, r6
    ecbc:	add	r6, r6, r3
    ecc0:	eor	r3, r4, r3
    ecc4:	add	r2, r4, r2, ror #28
    ecc8:	ldr	sl, [sp, #36]	; 0x24
    eccc:	eor	r3, r3, r2
    ecd0:	movw	r9, #48240	; 0xbc70
    ecd4:	add	r3, r8, r3
    ecd8:	movt	r9, #48831	; 0xbebf
    ecdc:	add	r9, sl, r9
    ece0:	ldr	r8, [sp, #44]	; 0x2c
    ece4:	add	r3, r2, r3, ror #21
    ece8:	add	r9, r9, r4
    ecec:	eor	r4, r2, r4
    ecf0:	movw	sl, #32454	; 0x7ec6
    ecf4:	eor	r4, r4, r3
    ecf8:	movt	sl, #10395	; 0x289b
    ecfc:	add	r6, r6, r4
    ed00:	add	sl, r8, sl
    ed04:	add	sl, sl, r2
    ed08:	eor	r2, r3, r2
    ed0c:	add	r6, r3, r6, ror #16
    ed10:	ldr	r4, [sp]
    ed14:	eor	r2, r2, r6
    ed18:	movw	r8, #10234	; 0x27fa
    ed1c:	add	r2, r9, r2
    ed20:	movt	r8, #60065	; 0xeaa1
    ed24:	add	r8, r4, r8
    ed28:	ldr	r9, [sp, #12]
    ed2c:	add	r2, r6, r2, ror #9
    ed30:	add	r8, r8, r3
    ed34:	eor	r3, r6, r3
    ed38:	movw	r4, #12421	; 0x3085
    ed3c:	eor	r3, r3, r2
    ed40:	movt	r4, #54511	; 0xd4ef
    ed44:	add	r3, sl, r3
    ed48:	add	r4, r9, r4
    ed4c:	add	r4, r4, r6
    ed50:	eor	r6, r2, r6
    ed54:	add	r3, r2, r3, ror #28
    ed58:	ldr	sl, [sp, #24]
    ed5c:	eor	r6, r6, r3
    ed60:	movw	r9, #7429	; 0x1d05
    ed64:	add	r8, r8, r6
    ed68:	movt	r9, #1160	; 0x488
    ed6c:	add	r9, sl, r9
    ed70:	ldr	r6, [sp, #32]
    ed74:	add	r8, r3, r8, ror #21
    ed78:	add	r9, r9, r2
    ed7c:	eor	r2, r3, r2
    ed80:	add	fp, r6, fp
    ed84:	eor	r2, r2, r8
    ed88:	add	fp, fp, r3
    ed8c:	add	r2, r4, r2
    ed90:	eor	r3, r8, r3
    ed94:	movw	r6, #39397	; 0x99e5
    ed98:	movt	r6, #59099	; 0xe6db
    ed9c:	add	r2, r8, r2, ror #16
    eda0:	add	r6, ip, r6
    eda4:	eor	r3, r3, r2
    eda8:	add	r6, r6, r8
    edac:	add	r3, r9, r3
    edb0:	eor	r8, r2, r8
    edb4:	movw	r4, #31992	; 0x7cf8
    edb8:	movt	r4, #8098	; 0x1fa2
    edbc:	add	r3, r2, r3, ror #9
    edc0:	add	r4, r1, r4
    edc4:	eor	r8, r8, r3
    edc8:	add	r4, r4, r2
    edcc:	add	fp, fp, r8
    edd0:	eor	r2, r3, r2
    edd4:	ldr	r8, [sp, #8]
    edd8:	movw	sl, #22117	; 0x5665
    eddc:	add	fp, r3, fp, ror #28
    ede0:	movt	sl, #50348	; 0xc4ac
    ede4:	eor	r2, r2, fp
    ede8:	add	sl, r8, sl
    edec:	add	r2, r6, r2
    edf0:	add	sl, sl, r3
    edf4:	eor	r3, fp, r3
    edf8:	ldr	r9, [sp]
    edfc:	add	r2, fp, r2, ror #21
    ee00:	movw	r8, #8772	; 0x2244
    ee04:	eor	r3, r3, r2
    ee08:	movt	r8, #62505	; 0xf429
    ee0c:	add	r3, r4, r3
    ee10:	add	r8, r9, r8
    ee14:	add	r8, r8, fp
    ee18:	eor	fp, r2, fp
    ee1c:	add	r3, r2, r3, ror #16
    ee20:	mvn	r9, r2
    ee24:	eor	fp, fp, r3
    ee28:	movw	r4, #9127	; 0x23a7
    ee2c:	add	sl, sl, fp
    ee30:	movt	r4, #43924	; 0xab94
    ee34:	add	r4, r5, r4
    ee38:	movw	r6, #65431	; 0xff97
    ee3c:	add	sl, r3, sl, ror #9
    ee40:	movt	r6, #17194	; 0x432a
    ee44:	orr	r9, sl, r9
    ee48:	add	r6, r7, r6
    ee4c:	eor	r9, r9, r3
    ee50:	mvn	r7, r3
    ee54:	add	r9, r8, r9
    ee58:	add	r4, r4, r3
    ee5c:	ldr	r3, [sp, #20]
    ee60:	add	r2, r6, r2
    ee64:	add	r9, sl, r9, ror #26
    ee68:	movw	r6, #41017	; 0xa039
    ee6c:	movt	r6, #64659	; 0xfc93
    ee70:	orr	r7, r9, r7
    ee74:	add	r6, r3, r6
    ee78:	mvn	r5, sl
    ee7c:	add	r6, r6, sl
    ee80:	eor	sl, r7, sl
    ee84:	add	r2, r2, sl
    ee88:	movw	fp, #22979	; 0x59c3
    ee8c:	movt	fp, #25947	; 0x655b
    ee90:	mvn	r3, r9
    ee94:	add	r2, r9, r2, ror #22
    ee98:	add	fp, ip, fp
    ee9c:	orr	r5, r2, r5
    eea0:	add	fp, fp, r9
    eea4:	eor	r9, r5, r9
    eea8:	ldr	r7, [sp, #12]
    eeac:	add	r4, r4, r9
    eeb0:	movw	ip, #52370	; 0xcc92
    eeb4:	movt	ip, #36620	; 0x8f0c
    eeb8:	mvn	r8, r2
    eebc:	add	r4, r2, r4, ror #17
    eec0:	add	ip, r7, ip
    eec4:	orr	r3, r4, r3
    eec8:	add	ip, ip, r2
    eecc:	eor	r2, r3, r2
    eed0:	ldr	r9, [sp, #36]	; 0x24
    eed4:	add	r6, r6, r2
    eed8:	movw	r7, #62589	; 0xf47d
    eedc:	movt	r7, #65519	; 0xffef
    eee0:	movw	r5, #32335	; 0x7e4f
    eee4:	add	r6, r4, r6, ror #11
    eee8:	add	r7, r9, r7
    eeec:	orr	r8, r6, r8
    eef0:	add	r7, r7, r4
    eef4:	mvn	r9, r4
    eef8:	eor	r4, r8, r4
    eefc:	add	r4, fp, r4
    ef00:	ldr	r8, [sp, #28]
    ef04:	movt	r5, #28584	; 0x6fa8
    ef08:	mvn	r3, r6
    ef0c:	add	r4, r6, r4, ror #26
    ef10:	add	r5, r8, r5
    ef14:	orr	r9, r4, r9
    ef18:	add	r5, r5, r4
    ef1c:	eor	r9, r9, r6
    ef20:	mvn	r8, r4
    ef24:	add	ip, ip, r9
    ef28:	ldr	r2, [sp, #4]
    ef2c:	movw	sl, #24017	; 0x5dd1
    ef30:	movt	sl, #34180	; 0x8584
    ef34:	add	ip, r4, ip, ror #22
    ef38:	add	sl, r2, sl
    ef3c:	orr	r3, ip, r3
    ef40:	add	sl, sl, r6
    ef44:	eor	r4, r3, r4
    ef48:	ldr	r9, [sp, #24]
    ef4c:	add	r7, r7, r4
    ef50:	movw	r2, #59104	; 0xe6e0
    ef54:	movt	r2, #65068	; 0xfe2c
    ef58:	ldr	r3, [sp, #44]	; 0x2c
    ef5c:	add	r7, ip, r7, ror #17
    ef60:	add	r2, r1, r2
    ef64:	orr	r8, r7, r8
    ef68:	movw	r1, #17172	; 0x4314
    ef6c:	eor	r8, r8, ip
    ef70:	movt	r1, #41729	; 0xa301
    ef74:	add	sl, sl, r8
    ef78:	add	r1, r9, r1
    ef7c:	mvn	r9, ip
    ef80:	movw	fp, #4513	; 0x11a1
    ef84:	add	sl, r7, sl, ror #11
    ef88:	movt	fp, #19976	; 0x4e08
    ef8c:	orr	r9, sl, r9
    ef90:	add	fp, r3, fp
    ef94:	eor	r9, r9, r7
    ef98:	mvn	r3, r7
    ef9c:	add	r5, r5, r9
    efa0:	add	r2, r2, ip
    efa4:	ldr	r4, [sp, #16]
    efa8:	add	r1, r1, r7
    efac:	add	r5, sl, r5, ror #26
    efb0:	ldr	r7, [sp, #40]	; 0x28
    efb4:	orr	r3, r5, r3
    efb8:	movw	r6, #32386	; 0x7e82
    efbc:	eor	r3, r3, sl
    efc0:	movt	r6, #63315	; 0xf753
    efc4:	add	r2, r2, r3
    efc8:	add	r6, r4, r6
    efcc:	mvn	ip, sl
    efd0:	movw	r4, #62005	; 0xf235
    efd4:	add	r2, r5, r2, ror #22
    efd8:	movt	r4, #48442	; 0xbd3a
    efdc:	orr	ip, r2, ip
    efe0:	add	r4, r7, r4
    efe4:	add	r6, r6, r5
    efe8:	mvn	r7, r5
    efec:	eor	r5, ip, r5
    eff0:	add	fp, fp, sl
    eff4:	add	r5, r1, r5
    eff8:	mvn	r3, r2
    effc:	ldr	r9, [sp, #8]
    f000:	movw	r8, #53947	; 0xd2bb
    f004:	add	r5, r2, r5, ror #17
    f008:	ldr	sl, [sp, #32]
    f00c:	orr	r7, r5, r7
    f010:	movt	r8, #10967	; 0x2ad7
    f014:	eor	r7, r7, r2
    f018:	add	r8, r9, r8
    f01c:	add	r7, fp, r7
    f020:	movw	r9, #54161	; 0xd391
    f024:	movt	r9, #60294	; 0xeb86
    f028:	mvn	ip, r5
    f02c:	add	r7, r5, r7, ror #11
    f030:	add	r9, sl, r9
    f034:	orr	r3, r7, r3
    f038:	add	r4, r4, r2
    f03c:	eor	r3, r3, r5
    f040:	add	r9, r9, r7
    f044:	add	r6, r6, r3
    f048:	mvn	sl, r7
    f04c:	ldr	r1, [r0]
    f050:	add	r8, r8, r5
    f054:	add	r6, r7, r6, ror #26
    f058:	orr	ip, r6, ip
    f05c:	add	r3, r6, r1
    f060:	eor	r7, ip, r7
    f064:	mvn	r2, r6
    f068:	add	r4, r4, r7
    f06c:	str	r3, [r0]
    f070:	ldr	r5, [r0, #12]
    f074:	add	r4, r6, r4, ror #22
    f078:	ldr	r7, [r0, #8]
    f07c:	orr	sl, r4, sl
    f080:	add	r3, r4, r5
    f084:	eor	r6, sl, r6
    f088:	str	r3, [r0, #12]
    f08c:	add	r8, r8, r6
    f090:	ldr	r6, [r0, #4]
    f094:	add	r8, r4, r8, ror #17
    f098:	orr	r2, r8, r2
    f09c:	add	r3, r8, r6
    f0a0:	eor	r4, r2, r4
    f0a4:	add	r8, r8, r7
    f0a8:	add	r9, r9, r4
    f0ac:	str	r8, [r0, #8]
    f0b0:	add	r9, r3, r9, ror #11
    f0b4:	str	r9, [r0, #4]
    f0b8:	add	sp, sp, #48	; 0x30
    f0bc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
    f0c0:	bx	lr
    f0c4:	movw	r2, #8961	; 0x2301
    f0c8:	movw	r3, #43913	; 0xab89
    f0cc:	movt	r2, #26437	; 0x6745
    f0d0:	movt	r3, #61389	; 0xefcd
    f0d4:	stm	r0, {r2, r3}
    f0d8:	movw	r2, #56574	; 0xdcfe
    f0dc:	movw	r3, #21622	; 0x5476
    f0e0:	movt	r2, #39098	; 0x98ba
    f0e4:	movt	r3, #4146	; 0x1032
    f0e8:	str	r2, [r0, #8]
    f0ec:	str	r3, [r0, #12]
    f0f0:	mov	r3, #0
    f0f4:	str	r3, [r0, #16]
    f0f8:	str	r3, [r0, #20]
    f0fc:	bx	lr
    f100:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f104:	mov	sl, r2
    f108:	ldr	r3, [r0, #16]
    f10c:	mov	r9, r0
    f110:	mov	r8, r1
    f114:	add	r2, r3, r2, lsl #3
    f118:	str	r2, [r0, #16]
    f11c:	cmp	r3, r2
    f120:	ldr	r2, [r0, #20]
    f124:	ubfx	r3, r3, #3, #6
    f128:	addhi	r2, r2, #1
    f12c:	cmp	r3, #0
    f130:	add	r2, r2, sl, lsr #29
    f134:	addeq	r7, r0, #24
    f138:	str	r2, [r0, #20]
    f13c:	beq	f174 <__assert_fail@plt+0x653c>
    f140:	rsb	r4, r3, #64	; 0x40
    f144:	add	r3, r3, #24
    f148:	cmp	sl, r4
    f14c:	add	r0, r0, r3
    f150:	bcc	f1ec <__assert_fail@plt+0x65b4>
    f154:	add	r7, r9, #24
    f158:	mov	r2, r4
    f15c:	bl	8ab8 <memcpy@plt>
    f160:	mov	r0, r9
    f164:	mov	r1, r7
    f168:	rsb	sl, r4, sl
    f16c:	bl	e69c <__assert_fail@plt+0x5a64>
    f170:	add	r8, r8, r4
    f174:	cmp	sl, #63	; 0x3f
    f178:	bls	f1e8 <__assert_fail@plt+0x65b0>
    f17c:	mov	fp, sl
    f180:	mov	r4, r8
    f184:	add	ip, r4, #64	; 0x40
    f188:	mov	r3, r7
    f18c:	ldr	r2, [r4]
    f190:	add	r4, r4, #16
    f194:	ldr	r6, [r4, #-12]
    f198:	add	r3, r3, #16
    f19c:	ldr	r5, [r4, #-8]
    f1a0:	ldr	lr, [r4, #-4]
    f1a4:	cmp	r4, ip
    f1a8:	str	r2, [r3, #-16]
    f1ac:	str	r6, [r3, #-12]
    f1b0:	str	r5, [r3, #-8]
    f1b4:	str	lr, [r3, #-4]
    f1b8:	bne	f18c <__assert_fail@plt+0x6554>
    f1bc:	sub	fp, fp, #64	; 0x40
    f1c0:	mov	r0, r9
    f1c4:	mov	r1, r7
    f1c8:	bl	e69c <__assert_fail@plt+0x5a64>
    f1cc:	cmp	fp, #63	; 0x3f
    f1d0:	bhi	f184 <__assert_fail@plt+0x654c>
    f1d4:	sub	r3, sl, #64	; 0x40
    f1d8:	and	sl, sl, #63	; 0x3f
    f1dc:	bic	r3, r3, #63	; 0x3f
    f1e0:	add	r3, r3, #64	; 0x40
    f1e4:	add	r8, r8, r3
    f1e8:	mov	r0, r7
    f1ec:	mov	r1, r8
    f1f0:	mov	r2, sl
    f1f4:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f1f8:	b	8ab8 <memcpy@plt>
    f1fc:	push	{r3, r4, r5, r6, r7, lr}
    f200:	mov	r4, r1
    f204:	ldr	r3, [r1, #16]
    f208:	mov	r5, r0
    f20c:	mvn	ip, #127	; 0x7f
    f210:	ubfx	r3, r3, #3, #6
    f214:	rsb	r2, r3, #63	; 0x3f
    f218:	add	r1, r1, r3
    f21c:	cmp	r2, #7
    f220:	add	r0, r1, #25
    f224:	strb	ip, [r1, #24]
    f228:	bls	f28c <__assert_fail@plt+0x6654>
    f22c:	rsb	r2, r3, #55	; 0x37
    f230:	mov	r1, #0
    f234:	add	r6, r4, #24
    f238:	bl	8b78 <memset@plt>
    f23c:	ldr	r2, [r4, #16]
    f240:	mov	r1, r6
    f244:	ldr	r3, [r4, #20]
    f248:	mov	r0, r4
    f24c:	str	r2, [r4, #80]	; 0x50
    f250:	str	r3, [r4, #84]	; 0x54
    f254:	bl	e69c <__assert_fail@plt+0x5a64>
    f258:	ldr	r7, [r4]
    f25c:	ldr	r6, [r4, #4]
    f260:	mov	r0, r4
    f264:	ldr	ip, [r4, #8]
    f268:	mov	r1, #0
    f26c:	ldr	r3, [r4, #12]
    f270:	mov	r2, #88	; 0x58
    f274:	str	r7, [r5]
    f278:	str	r6, [r5, #4]
    f27c:	str	ip, [r5, #8]
    f280:	str	r3, [r5, #12]
    f284:	pop	{r3, r4, r5, r6, r7, lr}
    f288:	b	8b78 <memset@plt>
    f28c:	add	r6, r4, #24
    f290:	mov	r1, #0
    f294:	bl	8b78 <memset@plt>
    f298:	mov	r0, r4
    f29c:	mov	r1, r6
    f2a0:	bl	e69c <__assert_fail@plt+0x5a64>
    f2a4:	mov	r0, r6
    f2a8:	mov	r1, #0
    f2ac:	mov	r2, #56	; 0x38
    f2b0:	bl	8b78 <memset@plt>
    f2b4:	b	f23c <__assert_fail@plt+0x6604>
    f2b8:	push	{r4}		; (str r4, [sp, #-4]!)
    f2bc:	movw	ip, #35173	; 0x8965
    f2c0:	ldr	r4, [pc, #68]	; f30c <__assert_fail@plt+0x66d4>
    f2c4:	movt	ip, #27655	; 0x6c07
    f2c8:	mov	r2, r0
    f2cc:	mov	r3, #1
    f2d0:	add	r4, pc, r4
    f2d4:	mov	r1, r4
    f2d8:	str	r0, [r4]
    f2dc:	eor	r2, r2, r2, lsr #30
    f2e0:	add	r1, r1, #4
    f2e4:	mla	r2, ip, r2, r3
    f2e8:	add	r3, r3, #1
    f2ec:	cmp	r3, #624	; 0x270
    f2f0:	str	r2, [r1]
    f2f4:	bne	f2dc <__assert_fail@plt+0x66a4>
    f2f8:	ldr	r2, [pc, #16]	; f310 <__assert_fail@plt+0x66d8>
    f2fc:	add	r2, pc, r2
    f300:	str	r3, [r2]
    f304:	pop	{r4}		; (ldr r4, [sp], #4)
    f308:	bx	lr
    f30c:	strdeq	r9, [r0], -ip
    f310:			; <UNDEFINED> instruction: 0x00009db0
    f314:	ldr	r3, [pc, #916]	; f6b0 <__assert_fail@plt+0x6a78>
    f318:	ldr	r2, [pc, #916]	; f6b4 <__assert_fail@plt+0x6a7c>
    f31c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f320:	add	r3, pc, r3
    f324:	mov	sl, r1
    f328:	ldr	r1, [pc, #904]	; f6b8 <__assert_fail@plt+0x6a80>
    f32c:	ldr	r2, [r3, r2]
    f330:	sub	sp, sp, #60	; 0x3c
    f334:	add	r1, pc, r1
    f338:	mov	r7, r0
    f33c:	ldr	r4, [r1, #2496]	; 0x9c0
    f340:	ldr	r3, [r2]
    f344:	cmp	r4, #0
    f348:	str	r2, [sp, #4]
    f34c:	str	r3, [sp, #52]	; 0x34
    f350:	beq	f4f0 <__assert_fail@plt+0x68b8>
    f354:	cmp	sl, #0
    f358:	ble	f4bc <__assert_fail@plt+0x6884>
    f35c:	ldr	r3, [pc, #856]	; f6bc <__assert_fail@plt+0x6a84>
    f360:	add	sl, r7, sl
    f364:	ldr	r9, [pc, #852]	; f6c0 <__assert_fail@plt+0x6a88>
    f368:	add	r3, pc, r3
    f36c:	ldr	r4, [pc, #848]	; f6c4 <__assert_fail@plt+0x6a8c>
    f370:	ldr	r6, [pc, #848]	; f6c8 <__assert_fail@plt+0x6a90>
    f374:	add	r9, pc, r9
    f378:	ldr	r5, [pc, #844]	; f6cc <__assert_fail@plt+0x6a94>
    f37c:	add	r4, pc, r4
    f380:	ldr	r8, [pc, #840]	; f6d0 <__assert_fail@plt+0x6a98>
    f384:	add	r6, pc, r6
    f388:	ldr	fp, [pc, #836]	; f6d4 <__assert_fail@plt+0x6a9c>
    f38c:	add	r5, pc, r5
    f390:	ldr	r1, [r3]
    f394:	add	r8, pc, r8
    f398:	add	fp, pc, fp
    f39c:	cmp	r1, #624	; 0x270
    f3a0:	blt	f4d8 <__assert_fail@plt+0x68a0>
    f3a4:	movw	r3, #625	; 0x271
    f3a8:	cmp	r1, r3
    f3ac:	beq	f4e4 <__assert_fail@plt+0x68ac>
    f3b0:	mov	r2, r9
    f3b4:	mov	r3, #0
    f3b8:	ldr	r0, [r2, #4]
    f3bc:	add	r2, r2, #4
    f3c0:	ldr	r1, [r3, r4]
    f3c4:	bic	r0, r0, #-2147483648	; 0x80000000
    f3c8:	ldr	ip, [r2, #1584]	; 0x630
    f3cc:	and	r1, r1, #-2147483648	; 0x80000000
    f3d0:	orr	r1, r0, r1
    f3d4:	and	r0, r1, #1
    f3d8:	eor	r1, ip, r1, lsr #1
    f3dc:	ldr	r0, [r6, r0, lsl #2]
    f3e0:	eor	r1, r1, r0
    f3e4:	str	r1, [r3, r4]
    f3e8:	add	r3, r3, #4
    f3ec:	cmp	r3, #908	; 0x38c
    f3f0:	bne	f3b8 <__assert_fail@plt+0x6780>
    f3f4:	mov	r3, r9
    f3f8:	mov	r2, #227	; 0xe3
    f3fc:	movw	ip, #623	; 0x26f
    f400:	str	r4, [sp]
    f404:	ldr	r4, [r3, #908]	; 0x38c
    f408:	add	r2, r2, #1
    f40c:	ldr	r0, [r3, #912]	; 0x390
    f410:	cmp	r2, ip
    f414:	and	r1, r4, #-2147483648	; 0x80000000
    f418:	ldr	r4, [r3]
    f41c:	bic	r0, r0, #-2147483648	; 0x80000000
    f420:	add	r3, r3, #4
    f424:	orr	r1, r0, r1
    f428:	and	r0, r1, #1
    f42c:	eor	r1, r4, r1, lsr #1
    f430:	ldr	r0, [r5, r0, lsl #2]
    f434:	eor	r1, r1, r0
    f438:	str	r1, [r3, #904]	; 0x388
    f43c:	bne	f404 <__assert_fail@plt+0x67cc>
    f440:	ldr	r2, [r8, #2492]	; 0x9bc
    f444:	mov	r1, #1
    f448:	ldr	r3, [r8]
    f44c:	and	r2, r2, #-2147483648	; 0x80000000
    f450:	ldr	ip, [r8, #1584]	; 0x630
    f454:	bic	r0, r3, #-2147483648	; 0x80000000
    f458:	ldr	r4, [sp]
    f45c:	orr	r2, r0, r2
    f460:	and	r0, r2, r1
    f464:	eor	r2, ip, r2, lsr r1
    f468:	ldr	r0, [r5, r0, lsl #2]
    f46c:	eor	r2, r2, r0
    f470:	str	r2, [r8, #2492]	; 0x9bc
    f474:	eor	ip, r3, r3, lsr #11
    f478:	movw	r2, #22144	; 0x5680
    f47c:	movt	r2, #40236	; 0x9d2c
    f480:	mov	r3, #0
    f484:	lsl	r0, ip, #7
    f488:	movt	r3, #61382	; 0xefc6
    f48c:	and	r2, r0, r2
    f490:	ldr	r0, [pc, #576]	; f6d8 <__assert_fail@plt+0x6aa0>
    f494:	eor	r2, r2, ip
    f498:	add	r0, pc, r0
    f49c:	lsl	ip, r2, #15
    f4a0:	and	r3, ip, r3
    f4a4:	str	r1, [r0]
    f4a8:	eor	r3, r3, r2
    f4ac:	eor	r3, r3, r3, lsr #18
    f4b0:	strb	r3, [r7], #1
    f4b4:	cmp	r7, sl
    f4b8:	bne	f39c <__assert_fail@plt+0x6764>
    f4bc:	ldr	r5, [sp, #4]
    f4c0:	ldr	r2, [sp, #52]	; 0x34
    f4c4:	ldr	r3, [r5]
    f4c8:	cmp	r2, r3
    f4cc:	bne	f6ac <__assert_fail@plt+0x6a74>
    f4d0:	add	sp, sp, #60	; 0x3c
    f4d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
    f4d8:	ldr	r3, [fp, r1, lsl #2]
    f4dc:	add	r1, r1, #1
    f4e0:	b	f474 <__assert_fail@plt+0x683c>
    f4e4:	movw	r0, #5489	; 0x1571
    f4e8:	bl	f2b8 <__assert_fail@plt+0x6680>
    f4ec:	b	f3b0 <__assert_fail@plt+0x6778>
    f4f0:	ldr	r0, [pc, #484]	; f6dc <__assert_fail@plt+0x6aa4>
    f4f4:	ldr	r1, [pc, #484]	; f6e0 <__assert_fail@plt+0x6aa8>
    f4f8:	add	r0, pc, r0
    f4fc:	add	r1, pc, r1
    f500:	bl	8a94 <fopen@plt>
    f504:	str	r4, [sp, #12]
    f508:	str	r4, [sp, #16]
    f50c:	str	r4, [sp, #20]
    f510:	str	r4, [sp, #24]
    f514:	str	r4, [sp, #28]
    f518:	str	r4, [sp, #32]
    f51c:	str	r4, [sp, #36]	; 0x24
    f520:	str	r4, [sp, #40]	; 0x28
    f524:	str	r4, [sp, #44]	; 0x2c
    f528:	str	r4, [sp, #48]	; 0x30
    f52c:	subs	r6, r0, #0
    f530:	beq	f664 <__assert_fail@plt+0x6a2c>
    f534:	add	r5, sp, #12
    f538:	mov	r0, r5
    f53c:	mov	r1, #4
    f540:	mov	r2, #1
    f544:	mov	r3, r6
    f548:	bl	8b0c <fread@plt>
    f54c:	add	r4, r4, #1
    f550:	cmp	r0, #0
    f554:	beq	f564 <__assert_fail@plt+0x692c>
    f558:	cmp	r4, #10
    f55c:	add	r5, r5, #4
    f560:	bne	f538 <__assert_fail@plt+0x6900>
    f564:	mov	r0, r6
    f568:	bl	8b9c <fclose@plt>
    f56c:	movw	r0, #54954	; 0xd6aa
    f570:	movt	r0, #299	; 0x12b
    f574:	bl	f2b8 <__assert_fail@plt+0x6680>
    f578:	ldr	r0, [pc, #356]	; f6e4 <__assert_fail@plt+0x6aac>
    f57c:	movw	r6, #26125	; 0x660d
    f580:	movt	r6, #25
    f584:	mov	ip, #624	; 0x270
    f588:	add	r0, pc, r0
    f58c:	mov	r1, #0
    f590:	mov	r3, #1
    f594:	ldr	r2, [r0]
    f598:	eor	r2, r2, r2, lsr #30
    f59c:	add	r5, sp, #56	; 0x38
    f5a0:	add	fp, r5, r1, lsl #2
    f5a4:	ldr	r8, [r0, r3, lsl #2]
    f5a8:	mul	r9, r6, r2
    f5ac:	add	r5, r3, #1
    f5b0:	ldr	r2, [fp, #-44]	; 0xffffffd4
    f5b4:	cmp	r5, #624	; 0x270
    f5b8:	eor	r8, r9, r8
    f5bc:	add	r2, r8, r2
    f5c0:	add	r2, r2, r1
    f5c4:	str	r2, [r0, r3, lsl #2]
    f5c8:	ldrge	r2, [r0, #2492]	; 0x9bc
    f5cc:	add	r1, r1, #1
    f5d0:	movlt	r3, r5
    f5d4:	movge	r3, #1
    f5d8:	strge	r2, [r0]
    f5dc:	cmp	r1, r4
    f5e0:	movge	r1, #0
    f5e4:	subs	ip, ip, #1
    f5e8:	bne	f598 <__assert_fail@plt+0x6960>
    f5ec:	ldr	r4, [pc, #244]	; f6e8 <__assert_fail@plt+0x6ab0>
    f5f0:	movw	r0, #35685	; 0x8b65
    f5f4:	ldr	r5, [pc, #240]	; f6ec <__assert_fail@plt+0x6ab4>
    f5f8:	movt	r0, #23896	; 0x5d58
    f5fc:	add	r4, pc, r4
    f600:	movw	ip, #623	; 0x26f
    f604:	add	r5, pc, r5
    f608:	b	f614 <__assert_fail@plt+0x69dc>
    f60c:	sub	r2, r3, #1
    f610:	ldr	r2, [r5, r2, lsl #2]
    f614:	eor	r2, r2, r2, lsr #30
    f618:	ldr	r1, [r4, r3, lsl #2]
    f61c:	mul	r2, r0, r2
    f620:	eor	r2, r2, r1
    f624:	rsb	r2, r3, r2
    f628:	str	r2, [r4, r3, lsl #2]
    f62c:	add	r3, r3, #1
    f630:	cmp	r3, #624	; 0x270
    f634:	ldrge	r2, [r4, #2492]	; 0x9bc
    f638:	movge	r3, #1
    f63c:	strge	r2, [r4]
    f640:	subs	ip, ip, #1
    f644:	bne	f60c <__assert_fail@plt+0x69d4>
    f648:	ldr	r3, [pc, #160]	; f6f0 <__assert_fail@plt+0x6ab8>
    f64c:	mov	r1, #-2147483648	; 0x80000000
    f650:	mov	r2, #1
    f654:	add	r3, pc, r3
    f658:	str	r1, [r3]
    f65c:	str	r2, [r3, #2496]	; 0x9c0
    f660:	b	f354 <__assert_fail@plt+0x671c>
    f664:	bl	8ac4 <time@plt>
    f668:	mov	r4, r0
    f66c:	bl	8b3c <clock@plt>
    f670:	ldr	r1, [r7]
    f674:	movw	r2, #25198	; 0x626e
    f678:	str	r4, [sp, #24]
    f67c:	movt	r2, #27753	; 0x6c69
    f680:	mov	r3, #25856	; 0x6500
    f684:	str	r2, [sp, #16]
    f688:	movt	r3, #26979	; 0x6963
    f68c:	mov	r4, #5
    f690:	str	r3, [sp, #20]
    f694:	str	r1, [sp, #12]
    f698:	str	r0, [sp, #28]
    f69c:	movw	r0, #54954	; 0xd6aa
    f6a0:	movt	r0, #299	; 0x12b
    f6a4:	bl	f2b8 <__assert_fail@plt+0x6680>
    f6a8:	b	f578 <__assert_fail@plt+0x6940>
    f6ac:	bl	8adc <__stack_chk_fail@plt>
    f6b0:	ldrdeq	r9, [r0], -r8
    f6b4:	andeq	r0, r0, r0, lsr #1
    f6b8:	muleq	r0, r8, sp
    f6bc:	andeq	r9, r0, r4, asr #26
    f6c0:	andeq	r9, r0, r8, asr sp
    f6c4:	andeq	r9, r0, r0, asr sp
    f6c8:	andeq	r1, r0, r0, lsl #8
    f6cc:	strdeq	r1, [r0], -r8
    f6d0:	andeq	r9, r0, r8, lsr sp
    f6d4:	andeq	r9, r0, r4, lsr sp
    f6d8:	andeq	r9, r0, r4, lsl ip
    f6dc:	muleq	r0, r4, r2
    f6e0:	andeq	r1, r0, r0, lsr #5
    f6e4:	andeq	r9, r0, r4, asr #22
    f6e8:	ldrdeq	r9, [r0], -r0
    f6ec:	andeq	r9, r0, r8, asr #21
    f6f0:	andeq	r9, r0, r8, ror sl
    f6f4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
    f6f8:	mov	r7, r0
    f6fc:	ldr	r6, [pc, #76]	; f750 <__assert_fail@plt+0x6b18>
    f700:	mov	r8, r1
    f704:	ldr	r5, [pc, #72]	; f754 <__assert_fail@plt+0x6b1c>
    f708:	mov	r9, r2
    f70c:	add	r6, pc, r6
    f710:	bl	8a68 <setsockopt@plt-0x20>
    f714:	add	r5, pc, r5
    f718:	rsb	r6, r5, r6
    f71c:	asrs	r6, r6, #2
    f720:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
    f724:	sub	r5, r5, #4
    f728:	mov	r4, #0
    f72c:	add	r4, r4, #1
    f730:	ldr	r3, [r5, #4]!
    f734:	mov	r0, r7
    f738:	mov	r1, r8
    f73c:	mov	r2, r9
    f740:	blx	r3
    f744:	cmp	r4, r6
    f748:	bne	f72c <__assert_fail@plt+0x6af4>
    f74c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
    f750:	andeq	r9, r0, r4, ror #15
    f754:	ldrdeq	r9, [r0], -r8
    f758:	bx	lr

Disassembly of section .fini:

0000f75c <.fini>:
    f75c:	push	{r3, lr}
    f760:	pop	{r3, pc}
