
centos-preinstalled/sha256sum:     file format elf32-littlearm


Disassembly of section .init:

000111dc <_init@@Base>:
   111dc:	push	{r3, lr}
   111e0:	bl	12718 <fscanf@plt+0x11ec>
   111e4:	pop	{r3, pc}

Disassembly of section .plt:

000111e8 <fileno@plt-0x14>:
   111e8:	push	{lr}		; (str lr, [sp, #-4]!)
   111ec:	ldr	lr, [pc, #4]	; 111f8 <_init@@Base+0x1c>
   111f0:	add	lr, pc, lr
   111f4:	ldr	pc, [lr, #8]!
   111f8:	andeq	r6, r1, r8, lsl #28

000111fc <fileno@plt>:
   111fc:	add	ip, pc, #0, 12
   11200:	add	ip, ip, #90112	; 0x16000
   11204:	ldr	pc, [ip, #3592]!	; 0xe08

00011208 <abort@plt>:
   11208:	add	ip, pc, #0, 12
   1120c:	add	ip, ip, #90112	; 0x16000
   11210:	ldr	pc, [ip, #3584]!	; 0xe00

00011214 <memcmp@plt>:
   11214:	add	ip, pc, #0, 12
   11218:	add	ip, ip, #90112	; 0x16000
   1121c:	ldr	pc, [ip, #3576]!	; 0xdf8

00011220 <__libc_start_main@plt>:
   11220:	add	ip, pc, #0, 12
   11224:	add	ip, ip, #90112	; 0x16000
   11228:	ldr	pc, [ip, #3568]!	; 0xdf0

0001122c <__gmon_start__@plt>:
   1122c:	add	ip, pc, #0, 12
   11230:	add	ip, ip, #90112	; 0x16000
   11234:	ldr	pc, [ip, #3560]!	; 0xde8

00011238 <fread_unlocked@plt>:
   11238:	add	ip, pc, #0, 12
   1123c:	add	ip, ip, #90112	; 0x16000
   11240:	ldr	pc, [ip, #3552]!	; 0xde0

00011244 <__ctype_get_mb_cur_max@plt>:
   11244:	add	ip, pc, #0, 12
   11248:	add	ip, ip, #90112	; 0x16000
   1124c:	ldr	pc, [ip, #3544]!	; 0xdd8

00011250 <fclose@plt>:
   11250:	add	ip, pc, #0, 12
   11254:	add	ip, ip, #90112	; 0x16000
   11258:	ldr	pc, [ip, #3536]!	; 0xdd0

0001125c <getenv@plt>:
   1125c:	add	ip, pc, #0, 12
   11260:	add	ip, ip, #90112	; 0x16000
   11264:	ldr	pc, [ip, #3528]!	; 0xdc8

00011268 <__printf_chk@plt>:
   11268:	add	ip, pc, #0, 12
   1126c:	add	ip, ip, #90112	; 0x16000
   11270:	ldr	pc, [ip, #3520]!	; 0xdc0

00011274 <strchr@plt>:
   11274:	add	ip, pc, #0, 12
   11278:	add	ip, ip, #90112	; 0x16000
   1127c:	ldr	pc, [ip, #3512]!	; 0xdb8

00011280 <SHA224_Final@plt>:
   11280:	add	ip, pc, #0, 12
   11284:	add	ip, ip, #90112	; 0x16000
   11288:	ldr	pc, [ip, #3504]!	; 0xdb0

0001128c <__cxa_atexit@plt>:
   1128c:	add	ip, pc, #0, 12
   11290:	add	ip, ip, #90112	; 0x16000
   11294:	ldr	pc, [ip, #3496]!	; 0xda8

00011298 <__fpending@plt>:
   11298:	add	ip, pc, #0, 12
   1129c:	add	ip, ip, #90112	; 0x16000
   112a0:	ldr	pc, [ip, #3488]!	; 0xda0

000112a4 <calloc@plt>:
   112a4:	add	ip, pc, #0, 12
   112a8:	add	ip, ip, #90112	; 0x16000
   112ac:	ldr	pc, [ip, #3480]!	; 0xd98

000112b0 <__uflow@plt>:
   112b0:	add	ip, pc, #0, 12
   112b4:	add	ip, ip, #90112	; 0x16000
   112b8:	ldr	pc, [ip, #3472]!	; 0xd90

000112bc <memset@plt>:
   112bc:	add	ip, pc, #0, 12
   112c0:	add	ip, ip, #90112	; 0x16000
   112c4:	ldr	pc, [ip, #3464]!	; 0xd88

000112c8 <strrchr@plt>:
   112c8:	add	ip, pc, #0, 12
   112cc:	add	ip, ip, #90112	; 0x16000
   112d0:	ldr	pc, [ip, #3456]!	; 0xd80

000112d4 <ungetc@plt>:
   112d4:	add	ip, pc, #0, 12
   112d8:	add	ip, ip, #90112	; 0x16000
   112dc:	ldr	pc, [ip, #3448]!	; 0xd78

000112e0 <bindtextdomain@plt>:
   112e0:	add	ip, pc, #0, 12
   112e4:	add	ip, ip, #90112	; 0x16000
   112e8:	ldr	pc, [ip, #3440]!	; 0xd70

000112ec <mbrtowc@plt>:
   112ec:	add	ip, pc, #0, 12
   112f0:	add	ip, ip, #90112	; 0x16000
   112f4:	ldr	pc, [ip, #3432]!	; 0xd68

000112f8 <__overflow@plt>:
   112f8:	add	ip, pc, #0, 12
   112fc:	add	ip, ip, #90112	; 0x16000
   11300:	ldr	pc, [ip, #3424]!	; 0xd60

00011304 <_exit@plt>:
   11304:	add	ip, pc, #0, 12
   11308:	add	ip, ip, #90112	; 0x16000
   1130c:	ldr	pc, [ip, #3416]!	; 0xd58

00011310 <free@plt>:
   11310:	add	ip, pc, #0, 12
   11314:	add	ip, ip, #90112	; 0x16000
   11318:	ldr	pc, [ip, #3408]!	; 0xd50

0001131c <getopt_long@plt>:
   1131c:	add	ip, pc, #0, 12
   11320:	add	ip, ip, #90112	; 0x16000
   11324:	ldr	pc, [ip, #3400]!	; 0xd48

00011328 <dcgettext@plt>:
   11328:	add	ip, pc, #0, 12
   1132c:	add	ip, ip, #90112	; 0x16000
   11330:	ldr	pc, [ip, #3392]!	; 0xd40

00011334 <fputs_unlocked@plt>:
   11334:	add	ip, pc, #0, 12
   11338:	add	ip, ip, #90112	; 0x16000
   1133c:	ldr	pc, [ip, #3384]!	; 0xd38

00011340 <fwrite_unlocked@plt>:
   11340:	add	ip, pc, #0, 12
   11344:	add	ip, ip, #90112	; 0x16000
   11348:	ldr	pc, [ip, #3376]!	; 0xd30

0001134c <SHA256_Init@plt>:
   1134c:	add	ip, pc, #0, 12
   11350:	add	ip, ip, #90112	; 0x16000
   11354:	ldr	pc, [ip, #3368]!	; 0xd28

00011358 <fflush@plt>:
   11358:	add	ip, pc, #0, 12
   1135c:	add	ip, ip, #90112	; 0x16000
   11360:	ldr	pc, [ip, #3360]!	; 0xd20

00011364 <strlen@plt>:
   11364:	add	ip, pc, #0, 12
   11368:	add	ip, ip, #90112	; 0x16000
   1136c:	ldr	pc, [ip, #3352]!	; 0xd18

00011370 <posix_fadvise64@plt>:
   11370:	add	ip, pc, #0, 12
   11374:	add	ip, ip, #90112	; 0x16000
   11378:	ldr	pc, [ip, #3344]!	; 0xd10

0001137c <memcpy@plt>:
   1137c:	add	ip, pc, #0, 12
   11380:	add	ip, ip, #90112	; 0x16000
   11384:	ldr	pc, [ip, #3336]!	; 0xd08

00011388 <setlocale@plt>:
   11388:	add	ip, pc, #0, 12
   1138c:	add	ip, ip, #90112	; 0x16000
   11390:	ldr	pc, [ip, #3328]!	; 0xd00

00011394 <fopen64@plt>:
   11394:	add	ip, pc, #0, 12
   11398:	add	ip, ip, #90112	; 0x16000
   1139c:	ldr	pc, [ip, #3320]!	; 0xcf8

000113a0 <mbsinit@plt>:
   113a0:	add	ip, pc, #0, 12
   113a4:	add	ip, ip, #90112	; 0x16000
   113a8:	ldr	pc, [ip, #3312]!	; 0xcf0

000113ac <SHA224@plt>:
   113ac:	add	ip, pc, #0, 12
   113b0:	add	ip, ip, #90112	; 0x16000
   113b4:	ldr	pc, [ip, #3304]!	; 0xce8

000113b8 <__ctype_tolower_loc@plt>:
   113b8:	add	ip, pc, #0, 12
   113bc:	add	ip, ip, #90112	; 0x16000
   113c0:	ldr	pc, [ip, #3296]!	; 0xce0

000113c4 <strcpy@plt>:
   113c4:	add	ip, pc, #0, 12
   113c8:	add	ip, ip, #90112	; 0x16000
   113cc:	ldr	pc, [ip, #3288]!	; 0xcd8

000113d0 <fseeko64@plt>:
   113d0:	add	ip, pc, #0, 12
   113d4:	add	ip, ip, #90112	; 0x16000
   113d8:	ldr	pc, [ip, #3280]!	; 0xcd0

000113dc <open64@plt>:
   113dc:	add	ip, pc, #0, 12
   113e0:	add	ip, ip, #90112	; 0x16000
   113e4:	ldr	pc, [ip, #3272]!	; 0xcc8

000113e8 <dcngettext@plt>:
   113e8:	add	ip, pc, #0, 12
   113ec:	add	ip, ip, #90112	; 0x16000
   113f0:	ldr	pc, [ip, #3264]!	; 0xcc0

000113f4 <raise@plt>:
   113f4:	add	ip, pc, #0, 12
   113f8:	add	ip, ip, #90112	; 0x16000
   113fc:	ldr	pc, [ip, #3256]!	; 0xcb8

00011400 <SHA256_Final@plt>:
   11400:	add	ip, pc, #0, 12
   11404:	add	ip, ip, #90112	; 0x16000
   11408:	ldr	pc, [ip, #3248]!	; 0xcb0

0001140c <fdopen@plt>:
   1140c:	add	ip, pc, #0, 12
   11410:	add	ip, ip, #90112	; 0x16000
   11414:	ldr	pc, [ip, #3240]!	; 0xca8

00011418 <close@plt>:
   11418:	add	ip, pc, #0, 12
   1141c:	add	ip, ip, #90112	; 0x16000
   11420:	ldr	pc, [ip, #3232]!	; 0xca0

00011424 <fwrite@plt>:
   11424:	add	ip, pc, #0, 12
   11428:	add	ip, ip, #90112	; 0x16000
   1142c:	ldr	pc, [ip, #3224]!	; 0xc98

00011430 <SHA256_Update@plt>:
   11430:	add	ip, pc, #0, 12
   11434:	add	ip, ip, #90112	; 0x16000
   11438:	ldr	pc, [ip, #3216]!	; 0xc90

0001143c <setvbuf@plt>:
   1143c:	add	ip, pc, #0, 12
   11440:	add	ip, ip, #90112	; 0x16000
   11444:	ldr	pc, [ip, #3208]!	; 0xc88

00011448 <__ctype_b_loc@plt>:
   11448:	add	ip, pc, #0, 12
   1144c:	add	ip, ip, #90112	; 0x16000
   11450:	ldr	pc, [ip, #3200]!	; 0xc80

00011454 <lseek64@plt>:
   11454:	add	ip, pc, #0, 12
   11458:	add	ip, ip, #90112	; 0x16000
   1145c:	ldr	pc, [ip, #3192]!	; 0xc78

00011460 <malloc@plt>:
   11460:	add	ip, pc, #0, 12
   11464:	add	ip, ip, #90112	; 0x16000
   11468:	ldr	pc, [ip, #3184]!	; 0xc70

0001146c <error@plt>:
   1146c:	add	ip, pc, #0, 12
   11470:	add	ip, ip, #90112	; 0x16000
   11474:	ldr	pc, [ip, #3176]!	; 0xc68

00011478 <nl_langinfo@plt>:
   11478:	add	ip, pc, #0, 12
   1147c:	add	ip, ip, #90112	; 0x16000
   11480:	ldr	pc, [ip, #3168]!	; 0xc60

00011484 <__stack_chk_fail@plt>:
   11484:	add	ip, pc, #0, 12
   11488:	add	ip, ip, #90112	; 0x16000
   1148c:	ldr	pc, [ip, #3160]!	; 0xc58

00011490 <__fprintf_chk@plt>:
   11490:	add	ip, pc, #0, 12
   11494:	add	ip, ip, #90112	; 0x16000
   11498:	ldr	pc, [ip, #3152]!	; 0xc50

0001149c <__getdelim@plt>:
   1149c:	add	ip, pc, #0, 12
   114a0:	add	ip, ip, #90112	; 0x16000
   114a4:	ldr	pc, [ip, #3144]!	; 0xc48

000114a8 <SHA224_Init@plt>:
   114a8:	add	ip, pc, #0, 12
   114ac:	add	ip, ip, #90112	; 0x16000
   114b0:	ldr	pc, [ip, #3136]!	; 0xc40

000114b4 <textdomain@plt>:
   114b4:	add	ip, pc, #0, 12
   114b8:	add	ip, ip, #90112	; 0x16000
   114bc:	ldr	pc, [ip, #3128]!	; 0xc38

000114c0 <__freading@plt>:
   114c0:	add	ip, pc, #0, 12
   114c4:	add	ip, ip, #90112	; 0x16000
   114c8:	ldr	pc, [ip, #3120]!	; 0xc30

000114cc <fcntl@plt>:
   114cc:	add	ip, pc, #0, 12
   114d0:	add	ip, ip, #90112	; 0x16000
   114d4:	ldr	pc, [ip, #3112]!	; 0xc28

000114d8 <strncmp@plt>:
   114d8:	add	ip, pc, #0, 12
   114dc:	add	ip, ip, #90112	; 0x16000
   114e0:	ldr	pc, [ip, #3104]!	; 0xc20

000114e4 <realloc@plt>:
   114e4:	add	ip, pc, #0, 12
   114e8:	add	ip, ip, #90112	; 0x16000
   114ec:	ldr	pc, [ip, #3096]!	; 0xc18

000114f0 <iswprint@plt>:
   114f0:	add	ip, pc, #0, 12
   114f4:	add	ip, ip, #90112	; 0x16000
   114f8:	ldr	pc, [ip, #3088]!	; 0xc10

000114fc <SHA256@plt>:
   114fc:	add	ip, pc, #0, 12
   11500:	add	ip, ip, #90112	; 0x16000
   11504:	ldr	pc, [ip, #3080]!	; 0xc08

00011508 <strcmp@plt>:
   11508:	add	ip, pc, #0, 12
   1150c:	add	ip, ip, #90112	; 0x16000
   11510:	ldr	pc, [ip, #3072]!	; 0xc00

00011514 <exit@plt>:
   11514:	add	ip, pc, #0, 12
   11518:	add	ip, ip, #90112	; 0x16000
   1151c:	ldr	pc, [ip, #3064]!	; 0xbf8

00011520 <__errno_location@plt>:
   11520:	add	ip, pc, #0, 12
   11524:	add	ip, ip, #90112	; 0x16000
   11528:	ldr	pc, [ip, #3056]!	; 0xbf0

0001152c <fscanf@plt>:
   1152c:	add	ip, pc, #0, 12
   11530:	add	ip, ip, #90112	; 0x16000
   11534:	ldr	pc, [ip, #3048]!	; 0xbe8

Disassembly of section .text:

00011538 <close_stdout@@Base-0x18c0>:
   11538:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1153c:	sub	sp, sp, #244	; 0xf4
   11540:	ldr	sl, [pc, #4072]	; 12530 <fscanf@plt+0x1004>
   11544:	mov	r4, #0
   11548:	ldr	r3, [pc, #4068]	; 12534 <fscanf@plt+0x1008>
   1154c:	mov	r6, r1
   11550:	add	sl, pc, sl
   11554:	str	r0, [sp, #24]
   11558:	str	r4, [sp, #28]
   1155c:	mvn	r5, #0
   11560:	str	r4, [sp, #44]	; 0x2c
   11564:	ldr	r3, [sl, r3]
   11568:	ldr	r0, [r1]
   1156c:	str	r5, [sp, #16]
   11570:	ldr	r3, [r3]
   11574:	ldr	r7, [pc, #4028]	; 12538 <fscanf@plt+0x100c>
   11578:	ldr	r5, [pc, #4028]	; 1253c <fscanf@plt+0x1010>
   1157c:	str	r3, [sp, #236]	; 0xec
   11580:	bl	13408 <close_stdout@@Base+0x610>
   11584:	ldr	r1, [pc, #4020]	; 12540 <fscanf@plt+0x1014>
   11588:	mov	r0, #6
   1158c:	add	r7, pc, r7
   11590:	ldr	r4, [pc, #4012]	; 12544 <fscanf@plt+0x1018>
   11594:	add	r1, pc, r1
   11598:	ldr	r9, [pc, #4008]	; 12548 <fscanf@plt+0x101c>
   1159c:	bl	11388 <setlocale@plt>
   115a0:	ldr	r1, [pc, #4004]	; 1254c <fscanf@plt+0x1020>
   115a4:	mov	r0, r7
   115a8:	ldr	r8, [pc, #4000]	; 12550 <fscanf@plt+0x1024>
   115ac:	add	r1, pc, r1
   115b0:	add	r5, pc, r5
   115b4:	bl	112e0 <bindtextdomain@plt>
   115b8:	mov	r0, r7
   115bc:	bl	114b4 <textdomain@plt>
   115c0:	ldr	r3, [pc, #3980]	; 12554 <fscanf@plt+0x1028>
   115c4:	ldr	r7, [pc, #3980]	; 12558 <fscanf@plt+0x102c>
   115c8:	add	r4, pc, r4
   115cc:	add	r9, pc, r9
   115d0:	add	r8, pc, r8
   115d4:	add	r7, pc, r7
   115d8:	str	r7, [sp, #32]
   115dc:	ldr	r0, [sl, r3]
   115e0:	bl	1682c <close_stdout@@Base+0x3a34>
   115e4:	ldr	r0, [pc, #3952]	; 1255c <fscanf@plt+0x1030>
   115e8:	mov	r1, #0
   115ec:	mov	r2, #1
   115f0:	mov	r3, r1
   115f4:	ldr	r7, [pc, #3940]	; 12560 <fscanf@plt+0x1034>
   115f8:	ldr	r0, [sl, r0]
   115fc:	add	r7, pc, r7
   11600:	str	r0, [sp, #40]	; 0x28
   11604:	ldr	r0, [r0]
   11608:	bl	1143c <setvbuf@plt>
   1160c:	mov	fp, #0
   11610:	ldr	r0, [sp, #24]
   11614:	str	fp, [sp]
   11618:	mov	r1, r6
   1161c:	mov	r2, r5
   11620:	mov	r3, r4
   11624:	bl	1131c <getopt_long@plt>
   11628:	cmn	r0, #1
   1162c:	beq	1179c <fscanf@plt+0x270>
   11630:	cmp	r0, #116	; 0x74
   11634:	beq	11794 <fscanf@plt+0x268>
   11638:	ble	11670 <fscanf@plt+0x144>
   1163c:	movw	r3, #257	; 0x101
   11640:	cmp	r0, r3
   11644:	beq	11778 <fscanf@plt+0x24c>
   11648:	bgt	11698 <fscanf@plt+0x16c>
   1164c:	cmp	r0, #119	; 0x77
   11650:	beq	116dc <fscanf@plt+0x1b0>
   11654:	cmp	r0, #256	; 0x100
   11658:	bne	11770 <fscanf@plt+0x244>
   1165c:	mov	r3, #1
   11660:	strb	fp, [r7, #2]
   11664:	strb	fp, [r7, #3]
   11668:	strb	r3, [r7, #1]
   1166c:	b	1160c <fscanf@plt+0xe0>
   11670:	cmn	r0, #2
   11674:	beq	1178c <fscanf@plt+0x260>
   11678:	ble	116f0 <fscanf@plt+0x1c4>
   1167c:	cmp	r0, #98	; 0x62
   11680:	beq	116d0 <fscanf@plt+0x1a4>
   11684:	cmp	r0, #99	; 0x63
   11688:	bne	11770 <fscanf@plt+0x244>
   1168c:	mov	ip, #1
   11690:	str	ip, [sp, #44]	; 0x2c
   11694:	b	1160c <fscanf@plt+0xe0>
   11698:	movw	r3, #258	; 0x102
   1169c:	cmp	r0, r3
   116a0:	beq	116c0 <fscanf@plt+0x194>
   116a4:	add	r3, r3, #1
   116a8:	cmp	r0, r3
   116ac:	bne	11770 <fscanf@plt+0x244>
   116b0:	mov	ip, #1
   116b4:	str	ip, [sp, #28]
   116b8:	str	ip, [sp, #16]
   116bc:	b	1160c <fscanf@plt+0xe0>
   116c0:	ldr	ip, [sp, #32]
   116c4:	mov	r3, #1
   116c8:	strb	r3, [ip, #4]
   116cc:	b	1160c <fscanf@plt+0xe0>
   116d0:	mov	ip, #1
   116d4:	str	ip, [sp, #16]
   116d8:	b	1160c <fscanf@plt+0xe0>
   116dc:	mov	r3, #1
   116e0:	strb	fp, [r8, #1]
   116e4:	strb	fp, [r8, #3]
   116e8:	strb	r3, [r8, #2]
   116ec:	b	1160c <fscanf@plt+0xe0>
   116f0:	cmn	r0, #3
   116f4:	bne	11770 <fscanf@plt+0x244>
   116f8:	ldr	r3, [pc, #3684]	; 12564 <fscanf@plt+0x1038>
   116fc:	ldr	r4, [sp, #40]	; 0x28
   11700:	ldr	r1, [pc, #3680]	; 12568 <fscanf@plt+0x103c>
   11704:	ldr	r3, [sl, r3]
   11708:	ldr	r2, [pc, #3676]	; 1256c <fscanf@plt+0x1040>
   1170c:	add	r1, pc, r1
   11710:	ldr	r0, [r4]
   11714:	ldr	r3, [r3]
   11718:	add	r2, pc, r2
   1171c:	ldr	ip, [pc, #3660]	; 12570 <fscanf@plt+0x1044>
   11720:	stmib	sp, {r1, r2}
   11724:	ldr	r1, [pc, #3656]	; 12574 <fscanf@plt+0x1048>
   11728:	add	ip, pc, ip
   1172c:	ldr	r2, [pc, #3652]	; 12578 <fscanf@plt+0x104c>
   11730:	str	fp, [sp, #12]
   11734:	add	r1, pc, r1
   11738:	str	ip, [sp]
   1173c:	add	r2, pc, r2
   11740:	bl	15100 <close_stdout@@Base+0x2308>
   11744:	mov	r0, fp
   11748:	bl	11514 <exit@plt>
   1174c:	ldr	r1, [pc, #3624]	; 1257c <fscanf@plt+0x1050>
   11750:	mov	r2, #5
   11754:	mov	r0, fp
   11758:	add	r1, pc, r1
   1175c:	bl	11328 <dcgettext@plt>
   11760:	mov	r1, fp
   11764:	mov	r2, r0
   11768:	mov	r0, fp
   1176c:	bl	1146c <error@plt>
   11770:	mov	r0, #1
   11774:	bl	12b00 <fscanf@plt+0x15d4>
   11778:	mov	r3, #1
   1177c:	strb	fp, [r9, #1]
   11780:	strb	fp, [r9, #2]
   11784:	strb	r3, [r9, #3]
   11788:	b	1160c <fscanf@plt+0xe0>
   1178c:	mov	r0, fp
   11790:	bl	12b00 <fscanf@plt+0x15d4>
   11794:	str	fp, [sp, #16]
   11798:	b	1160c <fscanf@plt+0xe0>
   1179c:	ldr	r4, [sp, #28]
   117a0:	mov	r1, #66	; 0x42
   117a4:	ldr	r5, [sp, #16]
   117a8:	mov	r2, #64	; 0x40
   117ac:	ldr	r3, [pc, #3532]	; 12580 <fscanf@plt+0x1054>
   117b0:	cmp	r5, fp
   117b4:	movne	r4, #0
   117b8:	andeq	r4, r4, #1
   117bc:	add	r3, pc, r3
   117c0:	cmp	r4, fp
   117c4:	str	r1, [r3, #8]
   117c8:	str	r2, [r3, #12]
   117cc:	bne	1174c <fscanf@plt+0x220>
   117d0:	ldr	r7, [sp, #44]	; 0x2c
   117d4:	ldr	ip, [sp, #28]
   117d8:	ands	r5, r7, ip
   117dc:	bne	11868 <fscanf@plt+0x33c>
   117e0:	ldr	r2, [sp, #44]	; 0x2c
   117e4:	ldr	r4, [sp, #16]
   117e8:	cmp	r4, #0
   117ec:	movlt	r2, #0
   117f0:	andge	r2, r2, #1
   117f4:	cmp	r2, #0
   117f8:	bne	123c4 <fscanf@plt+0xe98>
   117fc:	ldrb	r2, [r3, #1]
   11800:	cmp	r2, #0
   11804:	beq	11894 <fscanf@plt+0x368>
   11808:	ldr	r5, [sp, #44]	; 0x2c
   1180c:	cmp	r5, #0
   11810:	beq	12488 <fscanf@plt+0xf5c>
   11814:	ldrb	r3, [r3, #3]
   11818:	cmp	r3, #0
   1181c:	bne	118ac <fscanf@plt+0x380>
   11820:	ldr	r3, [pc, #3420]	; 12584 <fscanf@plt+0x1058>
   11824:	ldr	r4, [sp, #44]	; 0x2c
   11828:	add	r3, pc, r3
   1182c:	eor	r2, r4, #1
   11830:	ldrb	r3, [r3, #4]
   11834:	tst	r2, r3
   11838:	beq	118ac <fscanf@plt+0x380>
   1183c:	ldr	r1, [pc, #3396]	; 12588 <fscanf@plt+0x105c>
   11840:	mov	r2, #5
   11844:	mov	r0, #0
   11848:	add	r1, pc, r1
   1184c:	bl	11328 <dcgettext@plt>
   11850:	mov	r2, r0
   11854:	mov	r0, #0
   11858:	mov	r1, r0
   1185c:	bl	1146c <error@plt>
   11860:	mov	r0, #1
   11864:	bl	12b00 <fscanf@plt+0x15d4>
   11868:	ldr	r1, [pc, #3356]	; 1258c <fscanf@plt+0x1060>
   1186c:	mov	r2, #5
   11870:	mov	r0, r4
   11874:	add	r1, pc, r1
   11878:	bl	11328 <dcgettext@plt>
   1187c:	mov	r1, r4
   11880:	mov	r2, r0
   11884:	mov	r0, r4
   11888:	bl	1146c <error@plt>
   1188c:	mov	r0, #1
   11890:	bl	12b00 <fscanf@plt+0x15d4>
   11894:	ldrb	r2, [r3, #2]
   11898:	cmp	r2, #0
   1189c:	beq	12280 <fscanf@plt+0xd54>
   118a0:	ldr	r7, [sp, #44]	; 0x2c
   118a4:	cmp	r7, #0
   118a8:	beq	124f8 <fscanf@plt+0xfcc>
   118ac:	ldr	r5, [sp, #16]
   118b0:	ldr	r3, [pc, #3288]	; 12590 <fscanf@plt+0x1064>
   118b4:	cmn	r5, #1
   118b8:	ldr	ip, [sp, #24]
   118bc:	moveq	r5, #0
   118c0:	str	r5, [sp, #16]
   118c4:	ldr	r3, [sl, r3]
   118c8:	str	r3, [sp, #88]	; 0x58
   118cc:	ldr	r3, [r3]
   118d0:	cmp	r3, ip
   118d4:	beq	124e0 <fscanf@plt+0xfb4>
   118d8:	ldr	r4, [sp, #16]
   118dc:	mov	r5, #1
   118e0:	str	sl, [sp, #128]	; 0x80
   118e4:	cmp	r4, #0
   118e8:	ldr	sl, [sp, #48]	; 0x30
   118ec:	str	r5, [sp, #120]	; 0x78
   118f0:	movne	r4, #42	; 0x2a
   118f4:	moveq	r4, #32
   118f8:	uxtb	ip, r4
   118fc:	str	r4, [sp, #144]	; 0x90
   11900:	ldr	r7, [pc, #3212]	; 12594 <fscanf@plt+0x1068>
   11904:	ldr	r4, [pc, #3212]	; 12598 <fscanf@plt+0x106c>
   11908:	ldr	r5, [pc, #3212]	; 1259c <fscanf@plt+0x1070>
   1190c:	add	r7, pc, r7
   11910:	add	r4, pc, r4
   11914:	str	r7, [sp, #132]	; 0x84
   11918:	add	r5, pc, r5
   1191c:	str	ip, [sp, #148]	; 0x94
   11920:	str	r4, [sp, #136]	; 0x88
   11924:	str	r5, [sp, #140]	; 0x8c
   11928:	str	r6, [sp, #124]	; 0x7c
   1192c:	ldr	r6, [sp, #88]	; 0x58
   11930:	ldr	r7, [sp, #24]
   11934:	ldr	r3, [r6]
   11938:	cmp	r7, r3
   1193c:	ble	1239c <fscanf@plt+0xe70>
   11940:	ldr	r7, [sp, #124]	; 0x7c
   11944:	ldr	r6, [sp, #44]	; 0x2c
   11948:	ldr	r3, [r7, r3, lsl #2]
   1194c:	cmp	r6, #0
   11950:	str	r3, [sp, #68]	; 0x44
   11954:	beq	11d50 <fscanf@plt+0x824>
   11958:	ldrb	r3, [r3]
   1195c:	cmp	r3, #45	; 0x2d
   11960:	bne	120e4 <fscanf@plt+0xbb8>
   11964:	ldr	ip, [sp, #68]	; 0x44
   11968:	ldrb	r0, [ip, #1]
   1196c:	cmp	r0, #0
   11970:	bne	120e4 <fscanf@plt+0xbb8>
   11974:	ldr	r3, [pc, #3108]	; 125a0 <fscanf@plt+0x1074>
   11978:	mov	r2, #5
   1197c:	ldr	r1, [pc, #3104]	; 125a4 <fscanf@plt+0x1078>
   11980:	mov	r4, #1
   11984:	add	r3, pc, r3
   11988:	add	r1, pc, r1
   1198c:	strb	r4, [r3]
   11990:	bl	11328 <dcgettext@plt>
   11994:	str	r4, [sp, #92]	; 0x5c
   11998:	ldr	r3, [pc, #3080]	; 125a8 <fscanf@plt+0x107c>
   1199c:	ldr	r4, [sp, #128]	; 0x80
   119a0:	str	r0, [sp, #68]	; 0x44
   119a4:	ldr	r3, [r4, r3]
   119a8:	ldr	r9, [r3]
   119ac:	mov	r6, #0
   119b0:	mov	r7, #0
   119b4:	strd	r6, [sp, #80]	; 0x50
   119b8:	add	ip, sp, #160	; 0xa0
   119bc:	strd	r6, [sp, #112]	; 0x70
   119c0:	mov	r4, #1
   119c4:	strd	r6, [sp, #96]	; 0x60
   119c8:	mov	r5, #0
   119cc:	strd	r6, [sp, #32]
   119d0:	mov	r3, #0
   119d4:	strd	r6, [sp, #16]
   119d8:	add	r7, sp, #156	; 0x9c
   119dc:	ldr	r6, [pc, #3016]	; 125ac <fscanf@plt+0x1080>
   119e0:	str	r7, [sp, #48]	; 0x30
   119e4:	add	r6, pc, r6
   119e8:	str	ip, [sp, #52]	; 0x34
   119ec:	str	r6, [sp, #64]	; 0x40
   119f0:	ldr	r7, [pc, #3000]	; 125b0 <fscanf@plt+0x1084>
   119f4:	ldr	ip, [pc, #3000]	; 125b4 <fscanf@plt+0x1088>
   119f8:	ldr	r6, [pc, #3000]	; 125b8 <fscanf@plt+0x108c>
   119fc:	add	r7, pc, r7
   11a00:	add	ip, pc, ip
   11a04:	str	r3, [sp, #156]	; 0x9c
   11a08:	add	r6, pc, r6
   11a0c:	str	r3, [sp, #160]	; 0xa0
   11a10:	str	r7, [sp, #72]	; 0x48
   11a14:	str	ip, [sp, #104]	; 0x68
   11a18:	str	r6, [sp, #108]	; 0x6c
   11a1c:	add	r0, sp, #156	; 0x9c
   11a20:	add	r1, sp, #160	; 0xa0
   11a24:	mov	r2, #10
   11a28:	mov	r3, r9
   11a2c:	bl	1149c <__getdelim@plt>
   11a30:	subs	fp, r0, #0
   11a34:	ble	11ee8 <fscanf@plt+0x9bc>
   11a38:	ldr	r7, [sp, #156]	; 0x9c
   11a3c:	ldrb	r2, [r7]
   11a40:	cmp	r2, #35	; 0x23
   11a44:	beq	11be8 <fscanf@plt+0x6bc>
   11a48:	add	r2, r7, fp
   11a4c:	ldrb	r2, [r2, #-1]
   11a50:	cmp	r2, #10
   11a54:	subeq	fp, fp, #1
   11a58:	moveq	r2, #0
   11a5c:	strbeq	r2, [r7, fp]
   11a60:	ldreq	r7, [sp, #156]	; 0x9c
   11a64:	ldrb	r2, [r7]
   11a68:	cmp	r2, #32
   11a6c:	cmpne	r2, #9
   11a70:	movne	r6, #0
   11a74:	moveq	r6, #1
   11a78:	bne	11a98 <fscanf@plt+0x56c>
   11a7c:	mov	r1, r7
   11a80:	mov	r6, #0
   11a84:	ldrb	r2, [r1, #1]!
   11a88:	add	r6, r6, #1
   11a8c:	cmp	r2, #32
   11a90:	cmpne	r2, #9
   11a94:	beq	11a84 <fscanf@plt+0x558>
   11a98:	cmp	r2, #92	; 0x5c
   11a9c:	ldr	r1, [sp, #64]	; 0x40
   11aa0:	addeq	r6, r6, #1
   11aa4:	mov	r2, #6
   11aa8:	add	r8, r7, r6
   11aac:	moveq	ip, #1
   11ab0:	movne	r3, #0
   11ab4:	streq	ip, [sp, #56]	; 0x38
   11ab8:	mov	r0, r8
   11abc:	strne	r3, [sp, #56]	; 0x38
   11ac0:	bl	114d8 <strncmp@plt>
   11ac4:	cmp	r0, #0
   11ac8:	bne	11aec <fscanf@plt+0x5c0>
   11acc:	ldrb	r2, [r8, #6]
   11ad0:	cmp	r2, #32
   11ad4:	addeq	r6, r6, #1
   11ad8:	add	r2, r6, #6
   11adc:	ldrb	r1, [r7, r2]
   11ae0:	cmp	r1, #40	; 0x28
   11ae4:	beq	12224 <fscanf@plt+0xcf8>
   11ae8:	add	r8, r7, r6
   11aec:	ldr	r2, [pc, #2760]	; 125bc <fscanf@plt+0x1090>
   11af0:	rsb	r1, r6, fp
   11af4:	ldrb	lr, [r8]
   11af8:	mov	r0, r8
   11afc:	add	r2, pc, r2
   11b00:	ldr	ip, [r2, #8]
   11b04:	cmp	lr, #92	; 0x5c
   11b08:	addeq	ip, ip, #1
   11b0c:	cmp	r1, ip
   11b10:	bcc	11c30 <fscanf@plt+0x704>
   11b14:	ldr	r2, [r2, #12]
   11b18:	add	r6, r6, r2
   11b1c:	ldrb	r2, [r7, r6]
   11b20:	cmp	r2, #9
   11b24:	cmpne	r2, #32
   11b28:	moveq	r2, #0
   11b2c:	movne	r2, #1
   11b30:	bne	11c34 <fscanf@plt+0x708>
   11b34:	add	r1, r6, #1
   11b38:	strb	r2, [r7, r6]
   11b3c:	rsb	r2, r1, fp
   11b40:	cmp	r2, #1
   11b44:	beq	11d30 <fscanf@plt+0x804>
   11b48:	ldrb	r2, [r7, r1]
   11b4c:	cmp	r2, #42	; 0x2a
   11b50:	cmpne	r2, #32
   11b54:	moveq	r2, #0
   11b58:	movne	r2, #1
   11b5c:	bne	11d30 <fscanf@plt+0x804>
   11b60:	ldr	r0, [pc, #2648]	; 125c0 <fscanf@plt+0x1094>
   11b64:	add	r0, pc, r0
   11b68:	ldr	ip, [r0]
   11b6c:	cmp	ip, #1
   11b70:	strne	r2, [r0]
   11b74:	addne	r1, r6, #2
   11b78:	ldr	r3, [sp, #56]	; 0x38
   11b7c:	add	r7, r7, r1
   11b80:	str	r7, [sp, #76]	; 0x4c
   11b84:	cmp	r3, #0
   11b88:	moveq	sl, r8
   11b8c:	bne	120c0 <fscanf@plt+0xb94>
   11b90:	ldr	r6, [sp, #92]	; 0x5c
   11b94:	cmp	r6, #0
   11b98:	beq	11c3c <fscanf@plt+0x710>
   11b9c:	ldr	r7, [sp, #76]	; 0x4c
   11ba0:	ldrb	r3, [r7]
   11ba4:	cmp	r3, #45	; 0x2d
   11ba8:	bne	11c3c <fscanf@plt+0x710>
   11bac:	ldrb	r3, [r7, #1]
   11bb0:	cmp	r3, #0
   11bb4:	bne	11c3c <fscanf@plt+0x710>
   11bb8:	ldr	ip, [sp, #72]	; 0x48
   11bbc:	ldrd	r6, [sp, #16]
   11bc0:	ldrb	r3, [ip, #2]
   11bc4:	adds	r6, r6, #1
   11bc8:	adc	r7, r7, #0
   11bcc:	strd	r6, [sp, #16]
   11bd0:	cmp	r3, #0
   11bd4:	bne	11cfc <fscanf@plt+0x7d0>
   11bd8:	ldrd	r6, [sp, #32]
   11bdc:	adds	r6, r6, #1
   11be0:	adc	r7, r7, #0
   11be4:	strd	r6, [sp, #32]
   11be8:	ldr	r3, [r9]
   11bec:	ands	r6, r3, #48	; 0x30
   11bf0:	bne	11ee8 <fscanf@plt+0x9bc>
   11bf4:	adds	r4, r4, #1
   11bf8:	adc	r5, r5, #0
   11bfc:	orrs	r7, r4, r5
   11c00:	bne	11a1c <fscanf@plt+0x4f0>
   11c04:	ldr	r1, [pc, #2488]	; 125c4 <fscanf@plt+0x1098>
   11c08:	mov	r0, r6
   11c0c:	mov	r2, #5
   11c10:	add	r1, pc, r1
   11c14:	bl	11328 <dcgettext@plt>
   11c18:	mov	r1, r6
   11c1c:	ldr	r3, [sp, #68]	; 0x44
   11c20:	mov	r2, r0
   11c24:	mov	r0, #1
   11c28:	bl	1146c <error@plt>
   11c2c:	b	11a1c <fscanf@plt+0x4f0>
   11c30:	mov	r0, sl
   11c34:	mov	sl, r0
   11c38:	b	11bb8 <fscanf@plt+0x68c>
   11c3c:	ldr	r3, [pc, #2436]	; 125c8 <fscanf@plt+0x109c>
   11c40:	add	r3, pc, r3
   11c44:	ldr	r6, [r3, #12]
   11c48:	cmp	r6, #0
   11c4c:	beq	123f0 <fscanf@plt+0xec4>
   11c50:	bl	11448 <__ctype_b_loc@plt>
   11c54:	add	r1, sl, r6
   11c58:	mov	r3, sl
   11c5c:	ldr	r0, [r0]
   11c60:	ldrb	r2, [r3], #1
   11c64:	lsl	r2, r2, #1
   11c68:	ldrh	r2, [r0, r2]
   11c6c:	tst	r2, #4096	; 0x1000
   11c70:	beq	11bb8 <fscanf@plt+0x68c>
   11c74:	cmp	r3, r1
   11c78:	mov	r2, r3
   11c7c:	bne	11c60 <fscanf@plt+0x734>
   11c80:	ldrb	r8, [r2]
   11c84:	cmp	r8, #0
   11c88:	bne	11bb8 <fscanf@plt+0x68c>
   11c8c:	ldrd	r2, [sp, #96]	; 0x60
   11c90:	add	r6, sp, #200	; 0xc8
   11c94:	ldr	r0, [sp, #76]	; 0x4c
   11c98:	adds	r2, r2, #1
   11c9c:	mov	r1, r6
   11ca0:	adc	r3, r3, #0
   11ca4:	strd	r2, [sp, #96]	; 0x60
   11ca8:	bl	129a0 <fscanf@plt+0x1474>
   11cac:	cmp	r0, #0
   11cb0:	bne	12128 <fscanf@plt+0xbfc>
   11cb4:	ldr	r3, [pc, #2320]	; 125cc <fscanf@plt+0x10a0>
   11cb8:	ldrd	r6, [sp, #112]	; 0x70
   11cbc:	add	r3, pc, r3
   11cc0:	adds	r6, r6, #1
   11cc4:	ldrb	r3, [r3, #1]
   11cc8:	adc	r7, r7, #0
   11ccc:	strd	r6, [sp, #112]	; 0x70
   11cd0:	cmp	r3, #0
   11cd4:	bne	11be8 <fscanf@plt+0x6bc>
   11cd8:	ldr	r1, [pc, #2288]	; 125d0 <fscanf@plt+0x10a4>
   11cdc:	mov	r2, #5
   11ce0:	add	r1, pc, r1
   11ce4:	bl	11328 <dcgettext@plt>
   11ce8:	ldr	r2, [sp, #76]	; 0x4c
   11cec:	mov	r1, r0
   11cf0:	mov	r0, #1
   11cf4:	bl	11268 <__printf_chk@plt>
   11cf8:	b	11be8 <fscanf@plt+0x6bc>
   11cfc:	ldr	r1, [sp, #104]	; 0x68
   11d00:	mov	r2, #5
   11d04:	mov	r0, #0
   11d08:	bl	11328 <dcgettext@plt>
   11d0c:	ldr	r7, [sp, #108]	; 0x6c
   11d10:	strd	r4, [sp]
   11d14:	ldr	r3, [sp, #68]	; 0x44
   11d18:	str	r7, [sp, #8]
   11d1c:	mov	r2, r0
   11d20:	mov	r0, #0
   11d24:	mov	r1, r0
   11d28:	bl	1146c <error@plt>
   11d2c:	b	11bd8 <fscanf@plt+0x6ac>
   11d30:	ldr	r2, [pc, #2204]	; 125d4 <fscanf@plt+0x10a8>
   11d34:	add	r2, pc, r2
   11d38:	ldr	ip, [r2]
   11d3c:	cmp	ip, #0
   11d40:	movne	r0, #1
   11d44:	strne	r0, [r2]
   11d48:	bne	11b78 <fscanf@plt+0x64c>
   11d4c:	b	11c34 <fscanf@plt+0x708>
   11d50:	add	r4, sp, #164	; 0xa4
   11d54:	ldr	r0, [sp, #68]	; 0x44
   11d58:	mov	r1, r4
   11d5c:	bl	129a0 <fscanf@plt+0x1474>
   11d60:	cmp	r0, #0
   11d64:	ldreq	r4, [sp, #44]	; 0x2c
   11d68:	streq	r4, [sp, #120]	; 0x78
   11d6c:	beq	11ed4 <fscanf@plt+0x9a8>
   11d70:	ldr	r0, [sp, #68]	; 0x44
   11d74:	mov	r1, #92	; 0x5c
   11d78:	bl	11274 <strchr@plt>
   11d7c:	cmp	r0, #0
   11d80:	beq	1245c <fscanf@plt+0xf30>
   11d84:	ldr	r5, [sp, #28]
   11d88:	cmp	r5, #0
   11d8c:	beq	122cc <fscanf@plt+0xda0>
   11d90:	ldr	ip, [sp, #40]	; 0x28
   11d94:	ldr	r0, [ip]
   11d98:	ldr	r3, [r0, #20]
   11d9c:	ldr	r2, [r0, #24]
   11da0:	cmp	r3, r2
   11da4:	bcs	12520 <fscanf@plt+0xff4>
   11da8:	mov	r5, #1
   11dac:	add	r2, r3, r5
   11db0:	str	r2, [r0, #20]
   11db4:	mov	r2, #92	; 0x5c
   11db8:	strb	r2, [r3]
   11dbc:	ldr	r6, [sp, #40]	; 0x28
   11dc0:	mov	r1, #1
   11dc4:	ldr	r0, [pc, #2060]	; 125d8 <fscanf@plt+0x10ac>
   11dc8:	mov	r2, #6
   11dcc:	ldr	r3, [r6]
   11dd0:	add	r0, pc, r0
   11dd4:	bl	11340 <fwrite_unlocked@plt>
   11dd8:	ldr	r0, [pc, #2044]	; 125dc <fscanf@plt+0x10b0>
   11ddc:	mov	r2, #2
   11de0:	ldr	r3, [r6]
   11de4:	mov	r1, #1
   11de8:	add	r0, pc, r0
   11dec:	bl	11340 <fwrite_unlocked@plt>
   11df0:	ldr	r0, [sp, #68]	; 0x44
   11df4:	mov	r1, r5
   11df8:	bl	128bc <fscanf@plt+0x1390>
   11dfc:	ldr	r0, [pc, #2012]	; 125e0 <fscanf@plt+0x10b4>
   11e00:	mov	r1, #1
   11e04:	mov	r2, #4
   11e08:	add	r0, pc, r0
   11e0c:	ldr	r3, [r6]
   11e10:	bl	11340 <fwrite_unlocked@plt>
   11e14:	mov	r6, #0
   11e18:	ldr	r7, [sp, #132]	; 0x84
   11e1c:	ldr	r8, [sp, #136]	; 0x88
   11e20:	b	11e38 <fscanf@plt+0x90c>
   11e24:	mov	r0, #1
   11e28:	ldrb	r2, [r4, r6]
   11e2c:	mov	r1, r8
   11e30:	add	r6, r6, r0
   11e34:	bl	11268 <__printf_chk@plt>
   11e38:	ldr	r3, [r7, #12]
   11e3c:	cmp	r6, r3, lsr #1
   11e40:	bcc	11e24 <fscanf@plt+0x8f8>
   11e44:	ldr	ip, [sp, #28]
   11e48:	cmp	ip, #0
   11e4c:	bne	11eac <fscanf@plt+0x980>
   11e50:	ldr	r4, [sp, #40]	; 0x28
   11e54:	ldr	r0, [r4]
   11e58:	ldr	r2, [r0, #24]
   11e5c:	ldr	r3, [r0, #20]
   11e60:	cmp	r3, r2
   11e64:	addcc	r2, r3, #1
   11e68:	strcc	r2, [r0, #20]
   11e6c:	movcc	r2, #32
   11e70:	strbcc	r2, [r3]
   11e74:	bcs	12660 <fscanf@plt+0x1134>
   11e78:	ldr	r6, [sp, #40]	; 0x28
   11e7c:	ldr	r0, [r6]
   11e80:	ldr	r3, [r0, #20]
   11e84:	ldr	r2, [r0, #24]
   11e88:	cmp	r3, r2
   11e8c:	addcc	r2, r3, #1
   11e90:	strcc	r2, [r0, #20]
   11e94:	ldrcc	r7, [sp, #148]	; 0x94
   11e98:	strbcc	r7, [r3]
   11e9c:	bcs	12654 <fscanf@plt+0x1128>
   11ea0:	ldr	r0, [sp, #68]	; 0x44
   11ea4:	mov	r1, r5
   11ea8:	bl	128bc <fscanf@plt+0x1390>
   11eac:	ldr	ip, [sp, #40]	; 0x28
   11eb0:	ldr	r0, [ip]
   11eb4:	ldr	r2, [r0, #24]
   11eb8:	ldr	r3, [r0, #20]
   11ebc:	cmp	r3, r2
   11ec0:	addcc	r2, r3, #1
   11ec4:	strcc	r2, [r0, #20]
   11ec8:	movcc	r2, #10
   11ecc:	strbcc	r2, [r3]
   11ed0:	bcs	126d0 <fscanf@plt+0x11a4>
   11ed4:	ldr	r5, [sp, #88]	; 0x58
   11ed8:	ldr	r3, [r5]
   11edc:	add	r3, r3, #1
   11ee0:	str	r3, [r5]
   11ee4:	b	1192c <fscanf@plt+0x400>
   11ee8:	ldr	r0, [sp, #156]	; 0x9c
   11eec:	bl	11310 <free@plt>
   11ef0:	ldr	r3, [r9]
   11ef4:	tst	r3, #32
   11ef8:	bne	1236c <fscanf@plt+0xe40>
   11efc:	ldr	r7, [sp, #92]	; 0x5c
   11f00:	cmp	r7, #0
   11f04:	beq	122fc <fscanf@plt+0xdd0>
   11f08:	ldrd	r4, [sp, #96]	; 0x60
   11f0c:	orrs	r5, r4, r5
   11f10:	beq	12334 <fscanf@plt+0xe08>
   11f14:	ldr	r3, [pc, #1736]	; 125e4 <fscanf@plt+0x10b8>
   11f18:	add	r3, pc, r3
   11f1c:	ldrb	r3, [r3, #1]
   11f20:	cmp	r3, #0
   11f24:	bne	121e4 <fscanf@plt+0xcb8>
   11f28:	ldrd	r6, [sp, #16]
   11f2c:	orrs	r7, r6, r7
   11f30:	beq	11fa8 <fscanf@plt+0xa7c>
   11f34:	ldrd	r4, [sp, #16]
   11f38:	mov	r3, #0
   11f3c:	mvn	r2, #0
   11f40:	cmp	r5, r3
   11f44:	cmpeq	r4, r2
   11f48:	ldrls	r3, [sp, #16]
   11f4c:	bls	11f70 <fscanf@plt+0xa44>
   11f50:	mov	r0, r4
   11f54:	mov	r1, r5
   11f58:	movw	r2, #16960	; 0x4240
   11f5c:	mov	r3, #0
   11f60:	movt	r2, #15
   11f64:	bl	15e44 <close_stdout@@Base+0x304c>
   11f68:	add	r2, r2, #999424	; 0xf4000
   11f6c:	add	r3, r2, #576	; 0x240
   11f70:	mov	r2, #5
   11f74:	ldr	r1, [pc, #1644]	; 125e8 <fscanf@plt+0x10bc>
   11f78:	str	r2, [sp]
   11f7c:	mov	r0, #0
   11f80:	ldr	r2, [pc, #1636]	; 125ec <fscanf@plt+0x10c0>
   11f84:	add	r1, pc, r1
   11f88:	add	r2, pc, r2
   11f8c:	bl	113e8 <dcngettext@plt>
   11f90:	ldrd	r6, [sp, #16]
   11f94:	strd	r6, [sp]
   11f98:	mov	r2, r0
   11f9c:	mov	r0, #0
   11fa0:	mov	r1, r0
   11fa4:	bl	1146c <error@plt>
   11fa8:	ldrd	r4, [sp, #112]	; 0x70
   11fac:	orrs	r5, r4, r5
   11fb0:	beq	12028 <fscanf@plt+0xafc>
   11fb4:	ldrd	r6, [sp, #112]	; 0x70
   11fb8:	mov	r3, #0
   11fbc:	mvn	r2, #0
   11fc0:	cmp	r7, r3
   11fc4:	cmpeq	r6, r2
   11fc8:	ldrls	r3, [sp, #112]	; 0x70
   11fcc:	bls	11ff0 <fscanf@plt+0xac4>
   11fd0:	mov	r0, r6
   11fd4:	mov	r1, r7
   11fd8:	movw	r2, #16960	; 0x4240
   11fdc:	mov	r3, #0
   11fe0:	movt	r2, #15
   11fe4:	bl	15e44 <close_stdout@@Base+0x304c>
   11fe8:	add	r2, r2, #999424	; 0xf4000
   11fec:	add	r3, r2, #576	; 0x240
   11ff0:	mov	r2, #5
   11ff4:	ldr	r1, [pc, #1524]	; 125f0 <fscanf@plt+0x10c4>
   11ff8:	str	r2, [sp]
   11ffc:	mov	r0, #0
   12000:	ldr	r2, [pc, #1516]	; 125f4 <fscanf@plt+0x10c8>
   12004:	add	r1, pc, r1
   12008:	add	r2, pc, r2
   1200c:	bl	113e8 <dcngettext@plt>
   12010:	ldrd	r4, [sp, #112]	; 0x70
   12014:	strd	r4, [sp]
   12018:	mov	r2, r0
   1201c:	mov	r0, #0
   12020:	mov	r1, r0
   12024:	bl	1146c <error@plt>
   12028:	ldrd	r6, [sp, #80]	; 0x50
   1202c:	orrs	r7, r6, r7
   12030:	beq	121f0 <fscanf@plt+0xcc4>
   12034:	ldrd	r6, [sp, #80]	; 0x50
   12038:	mov	r3, #0
   1203c:	mvn	r2, #0
   12040:	cmp	r7, r3
   12044:	cmpeq	r6, r2
   12048:	ldrls	r3, [sp, #80]	; 0x50
   1204c:	bls	12070 <fscanf@plt+0xb44>
   12050:	mov	r0, r6
   12054:	mov	r1, r7
   12058:	movw	r2, #16960	; 0x4240
   1205c:	mov	r3, #0
   12060:	movt	r2, #15
   12064:	bl	15e44 <close_stdout@@Base+0x304c>
   12068:	add	r2, r2, #999424	; 0xf4000
   1206c:	add	r3, r2, #576	; 0x240
   12070:	mov	r2, #5
   12074:	ldr	r1, [pc, #1404]	; 125f8 <fscanf@plt+0x10cc>
   12078:	str	r2, [sp]
   1207c:	mov	r0, #0
   12080:	ldr	r2, [pc, #1396]	; 125fc <fscanf@plt+0x10d0>
   12084:	add	r1, pc, r1
   12088:	add	r2, pc, r2
   1208c:	bl	113e8 <dcngettext@plt>
   12090:	ldrd	r4, [sp, #80]	; 0x50
   12094:	strd	r4, [sp]
   12098:	mov	r2, r0
   1209c:	mov	r0, #0
   120a0:	mov	r1, r0
   120a4:	bl	1146c <error@plt>
   120a8:	mov	r9, #0
   120ac:	ldr	r6, [sp, #120]	; 0x78
   120b0:	and	r9, r9, r6
   120b4:	uxtb	r9, r9
   120b8:	str	r9, [sp, #120]	; 0x78
   120bc:	b	11ed4 <fscanf@plt+0x9a8>
   120c0:	rsb	r1, r1, fp
   120c4:	mov	r0, r7
   120c8:	bl	12810 <fscanf@plt+0x12e4>
   120cc:	mov	sl, r8
   120d0:	adds	r0, r0, #0
   120d4:	movne	r0, #1
   120d8:	cmp	r0, #0
   120dc:	bne	11b90 <fscanf@plt+0x664>
   120e0:	b	11bb8 <fscanf@plt+0x68c>
   120e4:	ldr	r1, [pc, #1300]	; 12600 <fscanf@plt+0x10d4>
   120e8:	ldr	r0, [sp, #68]	; 0x44
   120ec:	add	r1, pc, r1
   120f0:	bl	1336c <close_stdout@@Base+0x574>
   120f4:	subs	r9, r0, #0
   120f8:	movne	r5, #0
   120fc:	strne	r5, [sp, #92]	; 0x5c
   12100:	bne	119ac <fscanf@plt+0x480>
   12104:	bl	11520 <__errno_location@plt>
   12108:	ldr	r2, [pc, #1268]	; 12604 <fscanf@plt+0x10d8>
   1210c:	add	r2, pc, r2
   12110:	mov	r3, r0
   12114:	mov	r0, r9
   12118:	ldr	r1, [r3]
   1211c:	ldr	r3, [sp, #68]	; 0x44
   12120:	bl	1146c <error@plt>
   12124:	b	120ac <fscanf@plt+0xb80>
   12128:	ldr	r3, [pc, #1240]	; 12608 <fscanf@plt+0x10dc>
   1212c:	add	fp, sl, #1
   12130:	strd	r4, [sp, #56]	; 0x38
   12134:	add	r3, pc, r3
   12138:	mov	r4, fp
   1213c:	mov	fp, r6
   12140:	ldr	r6, [sp, #140]	; 0x8c
   12144:	ldr	r7, [r3, #12]
   12148:	lsr	r7, r7, #1
   1214c:	b	1218c <fscanf@plt+0xc60>
   12150:	bl	113b8 <__ctype_tolower_loc@plt>
   12154:	ldrb	lr, [r4, #-1]
   12158:	ldrb	r3, [fp, r8]
   1215c:	ldrb	ip, [r6, r3, lsr #4]
   12160:	ldr	r2, [r0]
   12164:	ldr	r0, [r2, lr, lsl #2]
   12168:	cmp	r0, ip
   1216c:	bne	1266c <fscanf@plt+0x1140>
   12170:	ldrb	r0, [r4], #2
   12174:	and	r3, r3, #15
   12178:	ldrb	r3, [r6, r3]
   1217c:	ldr	r2, [r2, r0, lsl #2]
   12180:	cmp	r2, r3
   12184:	bne	1266c <fscanf@plt+0x1140>
   12188:	add	r8, r8, #1
   1218c:	cmp	r8, r7
   12190:	bne	12150 <fscanf@plt+0xc24>
   12194:	ldr	r3, [pc, #1136]	; 1260c <fscanf@plt+0x10e0>
   12198:	ldrd	r4, [sp, #56]	; 0x38
   1219c:	add	r3, pc, r3
   121a0:	ldrb	r2, [r3, #1]
   121a4:	cmp	r2, #0
   121a8:	bne	11be8 <fscanf@plt+0x6bc>
   121ac:	ldrb	r0, [r3, #3]
   121b0:	cmp	r0, #0
   121b4:	bne	11be8 <fscanf@plt+0x6bc>
   121b8:	ldr	r1, [pc, #1104]	; 12610 <fscanf@plt+0x10e4>
   121bc:	mov	r2, #5
   121c0:	add	r1, pc, r1
   121c4:	bl	11328 <dcgettext@plt>
   121c8:	ldr	r1, [pc, #1092]	; 12614 <fscanf@plt+0x10e8>
   121cc:	ldr	r2, [sp, #76]	; 0x4c
   121d0:	add	r1, pc, r1
   121d4:	mov	r3, r0
   121d8:	mov	r0, #1
   121dc:	bl	11268 <__printf_chk@plt>
   121e0:	b	11be8 <fscanf@plt+0x6bc>
   121e4:	ldrd	r6, [sp, #80]	; 0x50
   121e8:	orrs	r7, r6, r7
   121ec:	bne	120a8 <fscanf@plt+0xb7c>
   121f0:	ldrd	r4, [sp, #112]	; 0x70
   121f4:	orrs	r5, r4, r5
   121f8:	bne	120a8 <fscanf@plt+0xb7c>
   121fc:	ldr	r3, [pc, #1044]	; 12618 <fscanf@plt+0x10ec>
   12200:	add	r3, pc, r3
   12204:	ldrb	r3, [r3, #4]
   12208:	cmp	r3, #0
   1220c:	beq	1221c <fscanf@plt+0xcf0>
   12210:	ldrd	r4, [sp, #32]
   12214:	orrs	r5, r4, r5
   12218:	bne	120a8 <fscanf@plt+0xb7c>
   1221c:	mov	r9, #1
   12220:	b	120ac <fscanf@plt+0xb80>
   12224:	rsb	r3, r2, fp
   12228:	cmp	r3, #1
   1222c:	ldreq	r7, [sp, #76]	; 0x4c
   12230:	moveq	r0, #0
   12234:	beq	12278 <fscanf@plt+0xd4c>
   12238:	add	r6, r6, #7
   1223c:	sub	r8, r3, #2
   12240:	add	r7, r7, r6
   12244:	b	1225c <fscanf@plt+0xd30>
   12248:	ldrb	r3, [r7, r8]
   1224c:	add	r6, r7, r8
   12250:	cmp	r3, #41	; 0x29
   12254:	beq	123fc <fscanf@plt+0xed0>
   12258:	sub	r8, r8, #1
   1225c:	cmp	r8, #0
   12260:	bne	12248 <fscanf@plt+0xd1c>
   12264:	ldrb	r3, [r7]
   12268:	cmp	r3, #41	; 0x29
   1226c:	ldrne	r7, [sp, #76]	; 0x4c
   12270:	movne	r0, r8
   12274:	beq	123f8 <fscanf@plt+0xecc>
   12278:	str	r7, [sp, #76]	; 0x4c
   1227c:	b	120d8 <fscanf@plt+0xbac>
   12280:	ldrb	r3, [r3, #3]
   12284:	cmp	r3, #0
   12288:	beq	11820 <fscanf@plt+0x2f4>
   1228c:	ldr	ip, [sp, #44]	; 0x2c
   12290:	cmp	ip, #0
   12294:	bne	118ac <fscanf@plt+0x380>
   12298:	ldr	r1, [pc, #892]	; 1261c <fscanf@plt+0x10f0>
   1229c:	mov	r0, ip
   122a0:	add	r1, pc, r1
   122a4:	mov	r2, #5
   122a8:	bl	11328 <dcgettext@plt>
   122ac:	mov	r2, r0
   122b0:	ldr	r0, [sp, #44]	; 0x2c
   122b4:	mov	r1, r0
   122b8:	bl	1146c <error@plt>
   122bc:	mov	r0, #1
   122c0:	bl	12b00 <fscanf@plt+0x15d4>
   122c4:	cmp	r5, #0
   122c8:	beq	11e14 <fscanf@plt+0x8e8>
   122cc:	ldr	r7, [sp, #40]	; 0x28
   122d0:	ldr	r0, [r7]
   122d4:	ldr	r3, [r0, #20]
   122d8:	ldr	r2, [r0, #24]
   122dc:	cmp	r3, r2
   122e0:	bcs	126c0 <fscanf@plt+0x1194>
   122e4:	mov	r5, #1
   122e8:	add	r2, r3, r5
   122ec:	str	r2, [r0, #20]
   122f0:	mov	r2, #92	; 0x5c
   122f4:	strb	r2, [r3]
   122f8:	b	11e14 <fscanf@plt+0x8e8>
   122fc:	mov	r0, r9
   12300:	bl	1547c <close_stdout@@Base+0x2684>
   12304:	cmp	r0, #0
   12308:	beq	11f08 <fscanf@plt+0x9dc>
   1230c:	bl	11520 <__errno_location@plt>
   12310:	ldr	r2, [pc, #776]	; 12620 <fscanf@plt+0x10f4>
   12314:	add	r2, pc, r2
   12318:	mov	r3, r0
   1231c:	ldr	r0, [sp, #92]	; 0x5c
   12320:	ldr	r1, [r3]
   12324:	ldr	r3, [sp, #68]	; 0x44
   12328:	bl	1146c <error@plt>
   1232c:	ldr	r9, [sp, #92]	; 0x5c
   12330:	b	120ac <fscanf@plt+0xb80>
   12334:	ldr	r1, [pc, #744]	; 12624 <fscanf@plt+0x10f8>
   12338:	mov	r2, #5
   1233c:	mov	r0, #0
   12340:	add	r1, pc, r1
   12344:	bl	11328 <dcgettext@plt>
   12348:	ldr	ip, [pc, #728]	; 12628 <fscanf@plt+0x10fc>
   1234c:	ldr	r3, [sp, #68]	; 0x44
   12350:	add	ip, pc, ip
   12354:	str	ip, [sp]
   12358:	mov	r2, r0
   1235c:	mov	r0, #0
   12360:	mov	r1, r0
   12364:	bl	1146c <error@plt>
   12368:	b	120a8 <fscanf@plt+0xb7c>
   1236c:	ldr	r1, [pc, #696]	; 1262c <fscanf@plt+0x1100>
   12370:	mov	r2, #5
   12374:	mov	r0, #0
   12378:	mov	r9, #0
   1237c:	add	r1, pc, r1
   12380:	bl	11328 <dcgettext@plt>
   12384:	ldr	r3, [sp, #68]	; 0x44
   12388:	mov	r2, r0
   1238c:	mov	r0, #0
   12390:	mov	r1, r0
   12394:	bl	1146c <error@plt>
   12398:	b	120ac <fscanf@plt+0xb80>
   1239c:	ldr	r3, [pc, #652]	; 12630 <fscanf@plt+0x1104>
   123a0:	ldr	sl, [sp, #128]	; 0x80
   123a4:	add	r3, pc, r3
   123a8:	ldrb	r3, [r3]
   123ac:	cmp	r3, #0
   123b0:	bne	12498 <fscanf@plt+0xf6c>
   123b4:	ldr	ip, [sp, #120]	; 0x78
   123b8:	rsbs	r0, ip, #1
   123bc:	movcc	r0, #0
   123c0:	bl	11514 <exit@plt>
   123c4:	ldr	r1, [pc, #616]	; 12634 <fscanf@plt+0x1108>
   123c8:	mov	r2, #5
   123cc:	mov	r0, r5
   123d0:	add	r1, pc, r1
   123d4:	bl	11328 <dcgettext@plt>
   123d8:	mov	r1, r5
   123dc:	mov	r2, r0
   123e0:	mov	r0, r5
   123e4:	bl	1146c <error@plt>
   123e8:	mov	r0, #1
   123ec:	bl	12b00 <fscanf@plt+0x15d4>
   123f0:	mov	r2, sl
   123f4:	b	11c80 <fscanf@plt+0x754>
   123f8:	mov	r6, r7
   123fc:	ldr	ip, [sp, #56]	; 0x38
   12400:	cmp	ip, #0
   12404:	bne	12508 <fscanf@plt+0xfdc>
   12408:	mov	r3, #0
   1240c:	add	r8, r8, #1
   12410:	strb	r3, [r6]
   12414:	b	1241c <fscanf@plt+0xef0>
   12418:	add	r8, r8, #1
   1241c:	ldrb	r3, [r7, r8]
   12420:	cmp	r3, #32
   12424:	cmpne	r3, #9
   12428:	movne	r0, #0
   1242c:	moveq	r0, #1
   12430:	beq	12418 <fscanf@plt+0xeec>
   12434:	cmp	r3, #61	; 0x3d
   12438:	bne	12278 <fscanf@plt+0xd4c>
   1243c:	add	sl, r7, r8
   12440:	ldrb	r3, [sl, #1]
   12444:	add	sl, sl, #1
   12448:	cmp	r3, #32
   1244c:	cmpne	r3, #9
   12450:	beq	12440 <fscanf@plt+0xf14>
   12454:	mov	r0, #1
   12458:	b	12278 <fscanf@plt+0xd4c>
   1245c:	ldr	r0, [sp, #68]	; 0x44
   12460:	mov	r1, #10
   12464:	bl	11274 <strchr@plt>
   12468:	ldr	r7, [sp, #28]
   1246c:	adds	r5, r0, #0
   12470:	movne	r5, #1
   12474:	cmp	r7, #0
   12478:	beq	122c4 <fscanf@plt+0xd98>
   1247c:	cmp	r5, #0
   12480:	beq	11dbc <fscanf@plt+0x890>
   12484:	b	11d90 <fscanf@plt+0x864>
   12488:	ldr	r1, [pc, #424]	; 12638 <fscanf@plt+0x110c>
   1248c:	mov	r0, r5
   12490:	add	r1, pc, r1
   12494:	b	122a4 <fscanf@plt+0xd78>
   12498:	ldr	r3, [pc, #264]	; 125a8 <fscanf@plt+0x107c>
   1249c:	ldr	r3, [sl, r3]
   124a0:	ldr	r0, [r3]
   124a4:	bl	1547c <close_stdout@@Base+0x2684>
   124a8:	cmn	r0, #1
   124ac:	bne	123b4 <fscanf@plt+0xe88>
   124b0:	bl	11520 <__errno_location@plt>
   124b4:	ldr	r1, [pc, #384]	; 1263c <fscanf@plt+0x1110>
   124b8:	mov	r2, #5
   124bc:	add	r1, pc, r1
   124c0:	ldr	r4, [r0]
   124c4:	mov	r0, #0
   124c8:	bl	11328 <dcgettext@plt>
   124cc:	mov	r1, r4
   124d0:	mov	r2, r0
   124d4:	mov	r0, #1
   124d8:	bl	1146c <error@plt>
   124dc:	b	123b4 <fscanf@plt+0xe88>
   124e0:	ldr	r2, [pc, #344]	; 12640 <fscanf@plt+0x1114>
   124e4:	add	ip, ip, #1
   124e8:	str	ip, [sp, #24]
   124ec:	add	r2, pc, r2
   124f0:	str	r2, [r6, r3, lsl #2]
   124f4:	b	118d8 <fscanf@plt+0x3ac>
   124f8:	ldr	r1, [pc, #324]	; 12644 <fscanf@plt+0x1118>
   124fc:	mov	r0, r7
   12500:	add	r1, pc, r1
   12504:	b	122a4 <fscanf@plt+0xd78>
   12508:	mov	r0, r7
   1250c:	mov	r1, r8
   12510:	bl	12810 <fscanf@plt+0x12e4>
   12514:	cmp	r0, #0
   12518:	bne	12408 <fscanf@plt+0xedc>
   1251c:	b	12278 <fscanf@plt+0xd4c>
   12520:	mov	r1, #92	; 0x5c
   12524:	mov	r5, #1
   12528:	bl	112f8 <__overflow@plt>
   1252c:	b	11dbc <fscanf@plt+0x890>
   12530:	andeq	r6, r1, r8, lsr #21
   12534:	andeq	r0, r0, r4, lsr r1
   12538:	ldrdeq	r5, [r0], -r0
   1253c:	andeq	r5, r0, r0, asr #17
   12540:	andeq	r5, r0, r0, lsr r6
   12544:	andeq	r6, r1, ip, asr r8
   12548:	ldrdeq	r6, [r1], -ip
   1254c:	andeq	r5, r0, r4, ror r8
   12550:	ldrdeq	r6, [r1], -r8
   12554:	andeq	r0, r0, r8, asr #2
   12558:	ldrdeq	r6, [r1], -r4
   1255c:	andeq	r0, r0, ip, asr #2
   12560:	andeq	r6, r1, ip, lsr #23
   12564:	andeq	r0, r0, r8, asr r1
   12568:	andeq	r5, r0, r4, asr #14
   1256c:	andeq	r5, r0, r8, asr #14
   12570:	andeq	r5, r0, r8, lsl r7
   12574:	andeq	r5, r0, r0, lsl #14
   12578:	andeq	r5, r0, ip, lsl r6
   1257c:	andeq	r5, r0, r0, lsr #14
   12580:	andeq	r6, r1, ip, ror #19
   12584:	andeq	r6, r1, r0, lsl #19
   12588:	muleq	r0, ip, r7
   1258c:	andeq	r5, r0, r8, lsr #12
   12590:	andeq	r0, r0, r8, lsr #2
   12594:	muleq	r1, ip, r8
   12598:	andeq	r5, r0, ip, lsl #18
   1259c:	andeq	r4, r0, r8, asr #30
   125a0:	andeq	r6, r1, r4, lsr #16
   125a4:	andeq	r5, r0, r0, lsr #13
   125a8:	andeq	r0, r0, r0, asr #2
   125ac:	andeq	r4, r0, r0, asr #30
   125b0:	andeq	r6, r1, ip, lsr #15
   125b4:	andeq	r5, r0, r4, asr r6
   125b8:	andeq	r4, r0, ip, lsl pc
   125bc:	andeq	r6, r1, ip, lsr #13
   125c0:	strdeq	r6, [r1], -r4
   125c4:	andeq	r5, r0, r8, lsr #8
   125c8:	andeq	r6, r1, r8, ror #10
   125cc:	andeq	r6, r1, ip, ror #9
   125d0:	andeq	r5, r0, r4, lsr #7
   125d4:	andeq	r6, r1, r4, lsr #8
   125d8:	andeq	r4, r0, r4, asr fp
   125dc:	andeq	r5, r0, r8, lsr #8
   125e0:	andeq	r5, r0, ip, lsl #8
   125e4:	muleq	r1, r0, r2
   125e8:	andeq	r5, r0, r4, ror r1
   125ec:	muleq	r0, ip, r1
   125f0:	andeq	r5, r0, r0, asr r1
   125f4:	andeq	r5, r0, r8, ror r1
   125f8:	andeq	r5, r0, ip, lsr #2
   125fc:	andeq	r5, r0, r8, asr r1
   12600:	andeq	r4, r0, ip, lsl #15
   12604:	andeq	r5, r0, ip, ror r1
   12608:	andeq	r6, r1, r4, ror r0
   1260c:	andeq	r6, r1, ip
   12610:	strdeq	r4, [r0], -r0
   12614:	ldrdeq	r4, [r0], -r8
   12618:	andeq	r5, r1, r8, lsr #31
   1261c:	andeq	r4, r0, r4, lsl #26
   12620:	andeq	r4, r0, r4, ror pc
   12624:	andeq	r4, r0, r4, lsl #27
   12628:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   1262c:	andeq	r4, r0, r8, lsr sp
   12630:	andeq	r5, r1, r4, lsl #28
   12634:	andeq	r4, r0, r8, lsl #22
   12638:	muleq	r0, r4, sl
   1263c:	andeq	r4, r0, ip, ror #22
   12640:	andeq	r4, r0, r8, lsr fp
   12644:	andeq	r4, r0, r4, ror #20
   12648:	andeq	r5, r1, r4, lsr fp
   1264c:	andeq	r4, r0, r4, lsl #20
   12650:	strdeq	r4, [r0], -ip
   12654:	ldr	r1, [sp, #144]	; 0x90
   12658:	bl	112f8 <__overflow@plt>
   1265c:	b	11ea0 <fscanf@plt+0x974>
   12660:	mov	r1, #32
   12664:	bl	112f8 <__overflow@plt>
   12668:	b	11e78 <fscanf@plt+0x94c>
   1266c:	ldr	r3, [pc, #-44]	; 12648 <fscanf@plt+0x111c>
   12670:	ldrd	r6, [sp, #80]	; 0x50
   12674:	add	r3, pc, r3
   12678:	ldrd	r4, [sp, #56]	; 0x38
   1267c:	adds	r6, r6, #1
   12680:	ldrb	r0, [r3, #1]
   12684:	adc	r7, r7, #0
   12688:	strd	r6, [sp, #80]	; 0x50
   1268c:	cmp	r0, #0
   12690:	bne	11be8 <fscanf@plt+0x6bc>
   12694:	ldr	r1, [pc, #-80]	; 1264c <fscanf@plt+0x1120>
   12698:	mov	r2, #5
   1269c:	add	r1, pc, r1
   126a0:	bl	11328 <dcgettext@plt>
   126a4:	ldr	r1, [pc, #-92]	; 12650 <fscanf@plt+0x1124>
   126a8:	ldr	r2, [sp, #76]	; 0x4c
   126ac:	add	r1, pc, r1
   126b0:	mov	r3, r0
   126b4:	mov	r0, #1
   126b8:	bl	11268 <__printf_chk@plt>
   126bc:	b	11be8 <fscanf@plt+0x6bc>
   126c0:	mov	r1, #92	; 0x5c
   126c4:	mov	r5, #1
   126c8:	bl	112f8 <__overflow@plt>
   126cc:	b	11e14 <fscanf@plt+0x8e8>
   126d0:	mov	r1, #10
   126d4:	bl	112f8 <__overflow@plt>
   126d8:	b	11ed4 <fscanf@plt+0x9a8>
   126dc:	mov	fp, #0
   126e0:	mov	lr, #0
   126e4:	pop	{r1}		; (ldr r1, [sp], #4)
   126e8:	mov	r2, sp
   126ec:	push	{r2}		; (str r2, [sp, #-4]!)
   126f0:	push	{r0}		; (str r0, [sp, #-4]!)
   126f4:	ldr	ip, [pc, #16]	; 1270c <fscanf@plt+0x11e0>
   126f8:	push	{ip}		; (str ip, [sp, #-4]!)
   126fc:	ldr	r0, [pc, #12]	; 12710 <fscanf@plt+0x11e4>
   12700:	ldr	r3, [pc, #12]	; 12714 <fscanf@plt+0x11e8>
   12704:	bl	11220 <__libc_start_main@plt>
   12708:	bl	11208 <abort@plt>
   1270c:	andeq	r6, r1, r8, lsr #16
   12710:	andeq	r1, r1, r8, lsr r5
   12714:	andeq	r6, r1, r4, asr #15
   12718:	ldr	r3, [pc, #20]	; 12734 <fscanf@plt+0x1208>
   1271c:	ldr	r2, [pc, #20]	; 12738 <fscanf@plt+0x120c>
   12720:	add	r3, pc, r3
   12724:	ldr	r2, [r3, r2]
   12728:	cmp	r2, #0
   1272c:	bxeq	lr
   12730:	b	1122c <__gmon_start__@plt>
   12734:	ldrdeq	r5, [r1], -r8
   12738:	andeq	r0, r0, r0, lsr #2
   1273c:	push	{r3, lr}
   12740:	movw	r0, #33196	; 0x81ac
   12744:	ldr	r3, [pc, #36]	; 12770 <fscanf@plt+0x1244>
   12748:	movt	r0, #2
   1274c:	rsb	r3, r0, r3
   12750:	cmp	r3, #6
   12754:	popls	{r3, pc}
   12758:	movw	r3, #0
   1275c:	movt	r3, #0
   12760:	cmp	r3, #0
   12764:	popeq	{r3, pc}
   12768:	blx	r3
   1276c:	pop	{r3, pc}
   12770:	andeq	r8, r2, pc, lsr #3
   12774:	push	{r3, lr}
   12778:	movw	r0, #33196	; 0x81ac
   1277c:	movw	r3, #33196	; 0x81ac
   12780:	movt	r0, #2
   12784:	movt	r3, #2
   12788:	rsb	r3, r0, r3
   1278c:	asr	r3, r3, #2
   12790:	add	r3, r3, r3, lsr #31
   12794:	asrs	r1, r3, #1
   12798:	popeq	{r3, pc}
   1279c:	movw	r2, #0
   127a0:	movt	r2, #0
   127a4:	cmp	r2, #0
   127a8:	popeq	{r3, pc}
   127ac:	blx	r2
   127b0:	pop	{r3, pc}
   127b4:	push	{r4, lr}
   127b8:	movw	r4, #33196	; 0x81ac
   127bc:	movt	r4, #2
   127c0:	ldrb	r3, [r4]
   127c4:	cmp	r3, #0
   127c8:	popne	{r4, pc}
   127cc:	bl	1273c <fscanf@plt+0x1210>
   127d0:	mov	r3, #1
   127d4:	strb	r3, [r4]
   127d8:	pop	{r4, pc}
   127dc:	movw	r0, #32296	; 0x7e28
   127e0:	movt	r0, #2
   127e4:	push	{r3, lr}
   127e8:	ldr	r3, [r0]
   127ec:	cmp	r3, #0
   127f0:	beq	12808 <fscanf@plt+0x12dc>
   127f4:	movw	r3, #0
   127f8:	movt	r3, #0
   127fc:	cmp	r3, #0
   12800:	beq	12808 <fscanf@plt+0x12dc>
   12804:	blx	r3
   12808:	pop	{r3, lr}
   1280c:	b	12774 <fscanf@plt+0x1248>
   12810:	cmp	r1, #0
   12814:	push	{r4, r5, r6}
   12818:	beq	12890 <fscanf@plt+0x1364>
   1281c:	add	ip, r0, #1
   12820:	sub	r5, r1, #1
   12824:	mov	r3, #0
   12828:	mov	r6, #10
   1282c:	ldrb	r2, [r0, r3]
   12830:	cmp	r2, #0
   12834:	beq	12898 <fscanf@plt+0x136c>
   12838:	cmp	r2, #92	; 0x5c
   1283c:	mov	r4, ip
   12840:	bne	1286c <fscanf@plt+0x1340>
   12844:	cmp	r5, r3
   12848:	add	r3, r3, #1
   1284c:	beq	128b0 <fscanf@plt+0x1384>
   12850:	ldrb	r2, [r0, r3]
   12854:	cmp	r2, #92	; 0x5c
   12858:	beq	128a4 <fscanf@plt+0x1378>
   1285c:	cmp	r2, #110	; 0x6e
   12860:	bne	128b0 <fscanf@plt+0x1384>
   12864:	strb	r6, [ip, #-1]
   12868:	b	12870 <fscanf@plt+0x1344>
   1286c:	strb	r2, [ip, #-1]
   12870:	add	r3, r3, #1
   12874:	add	ip, ip, #1
   12878:	cmp	r1, r3
   1287c:	bhi	1282c <fscanf@plt+0x1300>
   12880:	add	r1, r0, r1
   12884:	cmp	r4, r1
   12888:	movcc	r3, #0
   1288c:	strbcc	r3, [r4]
   12890:	pop	{r4, r5, r6}
   12894:	bx	lr
   12898:	mov	r0, r2
   1289c:	pop	{r4, r5, r6}
   128a0:	bx	lr
   128a4:	strb	r2, [ip, #-1]
   128a8:	mov	r4, ip
   128ac:	b	12870 <fscanf@plt+0x1344>
   128b0:	mov	r0, #0
   128b4:	pop	{r4, r5, r6}
   128b8:	bx	lr
   128bc:	cmp	r1, #0
   128c0:	ldr	r2, [pc, #200]	; 12990 <fscanf@plt+0x1464>
   128c4:	push	{r3, r4, r5, r6, r7, lr}
   128c8:	add	r2, pc, r2
   128cc:	mov	r4, r0
   128d0:	beq	1297c <fscanf@plt+0x1450>
   128d4:	ldrb	r3, [r0]
   128d8:	cmp	r3, #0
   128dc:	popeq	{r3, r4, r5, r6, r7, pc}
   128e0:	ldr	r1, [pc, #172]	; 12994 <fscanf@plt+0x1468>
   128e4:	ldr	r7, [pc, #172]	; 12998 <fscanf@plt+0x146c>
   128e8:	ldr	r6, [pc, #172]	; 1299c <fscanf@plt+0x1470>
   128ec:	add	r7, pc, r7
   128f0:	ldr	r5, [r2, r1]
   128f4:	add	r6, pc, r6
   128f8:	b	12910 <fscanf@plt+0x13e4>
   128fc:	ldr	r3, [r5]
   12900:	bl	11340 <fwrite_unlocked@plt>
   12904:	ldrb	r3, [r4, #1]!
   12908:	cmp	r3, #0
   1290c:	beq	12978 <fscanf@plt+0x144c>
   12910:	cmp	r3, #10
   12914:	beq	12958 <fscanf@plt+0x142c>
   12918:	cmp	r3, #92	; 0x5c
   1291c:	mov	r0, r6
   12920:	mov	r1, #1
   12924:	mov	r2, #2
   12928:	beq	128fc <fscanf@plt+0x13d0>
   1292c:	ldr	r0, [r5]
   12930:	ldr	r1, [r0, #20]
   12934:	ldr	r2, [r0, #24]
   12938:	add	ip, r1, #1
   1293c:	cmp	r1, r2
   12940:	strcc	ip, [r0, #20]
   12944:	strbcc	r3, [r1]
   12948:	bcc	12904 <fscanf@plt+0x13d8>
   1294c:	mov	r1, r3
   12950:	bl	112f8 <__overflow@plt>
   12954:	b	12904 <fscanf@plt+0x13d8>
   12958:	ldr	r3, [r5]
   1295c:	mov	r0, r7
   12960:	mov	r1, #1
   12964:	mov	r2, #2
   12968:	bl	11340 <fwrite_unlocked@plt>
   1296c:	ldrb	r3, [r4, #1]!
   12970:	cmp	r3, #0
   12974:	bne	12910 <fscanf@plt+0x13e4>
   12978:	pop	{r3, r4, r5, r6, r7, pc}
   1297c:	ldr	r3, [pc, #16]	; 12994 <fscanf@plt+0x1468>
   12980:	ldr	r3, [r2, r3]
   12984:	ldr	r1, [r3]
   12988:	pop	{r3, r4, r5, r6, r7, lr}
   1298c:	b	11334 <fputs_unlocked@plt>
   12990:	andeq	r5, r1, r0, lsr r7
   12994:	andeq	r0, r0, ip, asr #2
   12998:	andeq	r3, r0, r4, lsl #31
   1299c:	andeq	r3, r0, r0, lsl #31
   129a0:	push	{r3, r4, r5, r6, r7, lr}
   129a4:	mov	r5, r0
   129a8:	ldrb	r3, [r0]
   129ac:	mov	r7, r1
   129b0:	ldr	r6, [pc, #300]	; 12ae4 <fscanf@plt+0x15b8>
   129b4:	cmp	r3, #45	; 0x2d
   129b8:	add	r6, pc, r6
   129bc:	beq	12a28 <fscanf@plt+0x14fc>
   129c0:	ldr	r1, [pc, #288]	; 12ae8 <fscanf@plt+0x15bc>
   129c4:	mov	r0, r5
   129c8:	add	r1, pc, r1
   129cc:	bl	1336c <close_stdout@@Base+0x574>
   129d0:	subs	r4, r0, #0
   129d4:	beq	12ac0 <fscanf@plt+0x1594>
   129d8:	mov	r1, #2
   129dc:	bl	13330 <close_stdout@@Base+0x538>
   129e0:	mov	r1, r7
   129e4:	mov	r0, r4
   129e8:	bl	13078 <close_stdout@@Base+0x280>
   129ec:	subs	r7, r0, #0
   129f0:	bne	12a78 <fscanf@plt+0x154c>
   129f4:	mov	r0, r4
   129f8:	bl	1547c <close_stdout@@Base+0x2684>
   129fc:	cmp	r0, #0
   12a00:	beq	12a70 <fscanf@plt+0x1544>
   12a04:	bl	11520 <__errno_location@plt>
   12a08:	ldr	r2, [pc, #220]	; 12aec <fscanf@plt+0x15c0>
   12a0c:	mov	r3, r5
   12a10:	add	r2, pc, r2
   12a14:	ldr	r1, [r0]
   12a18:	mov	r0, r7
   12a1c:	bl	1146c <error@plt>
   12a20:	mov	r0, r7
   12a24:	pop	{r3, r4, r5, r6, r7, pc}
   12a28:	ldrb	r3, [r0, #1]
   12a2c:	cmp	r3, #0
   12a30:	bne	129c0 <fscanf@plt+0x1494>
   12a34:	ldr	r2, [pc, #180]	; 12af0 <fscanf@plt+0x15c4>
   12a38:	mov	r0, #1
   12a3c:	ldr	r3, [pc, #176]	; 12af4 <fscanf@plt+0x15c8>
   12a40:	mov	r1, #2
   12a44:	add	r2, pc, r2
   12a48:	strb	r0, [r2]
   12a4c:	ldr	r6, [r6, r3]
   12a50:	ldr	r4, [r6]
   12a54:	mov	r0, r4
   12a58:	bl	13330 <close_stdout@@Base+0x538>
   12a5c:	mov	r0, r4
   12a60:	mov	r1, r7
   12a64:	bl	13078 <close_stdout@@Base+0x280>
   12a68:	cmp	r0, #0
   12a6c:	bne	12a80 <fscanf@plt+0x1554>
   12a70:	mov	r0, #1
   12a74:	pop	{r3, r4, r5, r6, r7, pc}
   12a78:	ldr	r3, [pc, #116]	; 12af4 <fscanf@plt+0x15c8>
   12a7c:	ldr	r6, [r6, r3]
   12a80:	bl	11520 <__errno_location@plt>
   12a84:	ldr	r2, [pc, #108]	; 12af8 <fscanf@plt+0x15cc>
   12a88:	mov	r3, r5
   12a8c:	add	r2, pc, r2
   12a90:	ldr	r1, [r0]
   12a94:	mov	r0, #0
   12a98:	bl	1146c <error@plt>
   12a9c:	ldr	r3, [r6]
   12aa0:	cmp	r4, r3
   12aa4:	beq	12ab8 <fscanf@plt+0x158c>
   12aa8:	mov	r0, r4
   12aac:	bl	1547c <close_stdout@@Base+0x2684>
   12ab0:	mov	r0, #0
   12ab4:	pop	{r3, r4, r5, r6, r7, pc}
   12ab8:	mov	r0, #0
   12abc:	pop	{r3, r4, r5, r6, r7, pc}
   12ac0:	bl	11520 <__errno_location@plt>
   12ac4:	ldr	r2, [pc, #48]	; 12afc <fscanf@plt+0x15d0>
   12ac8:	mov	r3, r5
   12acc:	add	r2, pc, r2
   12ad0:	ldr	r1, [r0]
   12ad4:	mov	r0, r4
   12ad8:	bl	1146c <error@plt>
   12adc:	mov	r0, r4
   12ae0:	pop	{r3, r4, r5, r6, r7, pc}
   12ae4:	andeq	r5, r1, r0, asr #12
   12ae8:			; <UNDEFINED> instruction: 0x00003eb0
   12aec:	andeq	r4, r0, r8, ror r8
   12af0:	andeq	r5, r1, r4, ror #14
   12af4:	andeq	r0, r0, r0, asr #2
   12af8:	strdeq	r4, [r0], -ip
   12afc:			; <UNDEFINED> instruction: 0x000047bc
   12b00:	push	{r4, r5, r6, r7, lr}
   12b04:	subs	r4, r0, #0
   12b08:	ldr	r5, [pc, #612]	; 12d74 <fscanf@plt+0x1848>
   12b0c:	sub	sp, sp, #12
   12b10:	add	r5, pc, r5
   12b14:	beq	12b5c <fscanf@plt+0x1630>
   12b18:	ldr	r3, [pc, #600]	; 12d78 <fscanf@plt+0x184c>
   12b1c:	mov	r2, #5
   12b20:	ldr	r1, [pc, #596]	; 12d7c <fscanf@plt+0x1850>
   12b24:	mov	r0, #0
   12b28:	ldr	r3, [r5, r3]
   12b2c:	add	r1, pc, r1
   12b30:	ldr	r6, [r3]
   12b34:	bl	11328 <dcgettext@plt>
   12b38:	ldr	r3, [pc, #576]	; 12d80 <fscanf@plt+0x1854>
   12b3c:	mov	r1, #1
   12b40:	ldr	r3, [r5, r3]
   12b44:	ldr	r3, [r3]
   12b48:	mov	r2, r0
   12b4c:	mov	r0, r6
   12b50:	bl	11490 <__fprintf_chk@plt>
   12b54:	mov	r0, r4
   12b58:	bl	11514 <exit@plt>
   12b5c:	ldr	r1, [pc, #544]	; 12d84 <fscanf@plt+0x1858>
   12b60:	mov	r2, #5
   12b64:	ldr	r7, [pc, #540]	; 12d88 <fscanf@plt+0x185c>
   12b68:	add	r1, pc, r1
   12b6c:	bl	11328 <dcgettext@plt>
   12b70:	ldr	r3, [pc, #520]	; 12d80 <fscanf@plt+0x1854>
   12b74:	add	r7, pc, r7
   12b78:	mov	r2, #256	; 0x100
   12b7c:	ldr	r6, [r5, r3]
   12b80:	mov	r3, r7
   12b84:	str	r2, [sp]
   12b88:	ldr	r2, [r6]
   12b8c:	mov	r1, r0
   12b90:	mov	r0, #1
   12b94:	bl	11268 <__printf_chk@plt>
   12b98:	ldr	r1, [pc, #492]	; 12d8c <fscanf@plt+0x1860>
   12b9c:	mov	r2, #5
   12ba0:	mov	r0, r4
   12ba4:	add	r1, pc, r1
   12ba8:	bl	11328 <dcgettext@plt>
   12bac:	ldr	r3, [pc, #476]	; 12d90 <fscanf@plt+0x1864>
   12bb0:	ldr	r5, [r5, r3]
   12bb4:	ldr	r1, [r5]
   12bb8:	bl	11334 <fputs_unlocked@plt>
   12bbc:	ldr	r1, [pc, #464]	; 12d94 <fscanf@plt+0x1868>
   12bc0:	mov	r2, #5
   12bc4:	mov	r0, r4
   12bc8:	add	r1, pc, r1
   12bcc:	bl	11328 <dcgettext@plt>
   12bd0:	mov	r2, r7
   12bd4:	mov	r1, r0
   12bd8:	mov	r0, #1
   12bdc:	bl	11268 <__printf_chk@plt>
   12be0:	ldr	r1, [pc, #432]	; 12d98 <fscanf@plt+0x186c>
   12be4:	mov	r2, #5
   12be8:	mov	r0, r4
   12bec:	add	r1, pc, r1
   12bf0:	bl	11328 <dcgettext@plt>
   12bf4:	ldr	r1, [r5]
   12bf8:	bl	11334 <fputs_unlocked@plt>
   12bfc:	ldr	r1, [pc, #408]	; 12d9c <fscanf@plt+0x1870>
   12c00:	mov	r2, #5
   12c04:	mov	r0, r4
   12c08:	add	r1, pc, r1
   12c0c:	bl	11328 <dcgettext@plt>
   12c10:	ldr	r1, [r5]
   12c14:	bl	11334 <fputs_unlocked@plt>
   12c18:	ldr	r1, [pc, #384]	; 12da0 <fscanf@plt+0x1874>
   12c1c:	mov	r2, #5
   12c20:	mov	r0, r4
   12c24:	add	r1, pc, r1
   12c28:	bl	11328 <dcgettext@plt>
   12c2c:	ldr	r1, [r5]
   12c30:	bl	11334 <fputs_unlocked@plt>
   12c34:	ldr	r1, [pc, #360]	; 12da4 <fscanf@plt+0x1878>
   12c38:	mov	r2, #5
   12c3c:	mov	r0, r4
   12c40:	add	r1, pc, r1
   12c44:	bl	11328 <dcgettext@plt>
   12c48:	ldr	r1, [r5]
   12c4c:	bl	11334 <fputs_unlocked@plt>
   12c50:	ldr	r1, [pc, #336]	; 12da8 <fscanf@plt+0x187c>
   12c54:	mov	r2, #5
   12c58:	mov	r0, r4
   12c5c:	add	r1, pc, r1
   12c60:	bl	11328 <dcgettext@plt>
   12c64:	ldr	r1, [r5]
   12c68:	bl	11334 <fputs_unlocked@plt>
   12c6c:	ldr	r1, [pc, #312]	; 12dac <fscanf@plt+0x1880>
   12c70:	mov	r2, #5
   12c74:	mov	r0, r4
   12c78:	add	r1, pc, r1
   12c7c:	bl	11328 <dcgettext@plt>
   12c80:	ldr	r1, [r5]
   12c84:	bl	11334 <fputs_unlocked@plt>
   12c88:	ldr	r1, [pc, #288]	; 12db0 <fscanf@plt+0x1884>
   12c8c:	mov	r2, #5
   12c90:	mov	r0, r4
   12c94:	add	r1, pc, r1
   12c98:	bl	11328 <dcgettext@plt>
   12c9c:	ldr	r2, [pc, #272]	; 12db4 <fscanf@plt+0x1888>
   12ca0:	add	r2, pc, r2
   12ca4:	mov	r1, r0
   12ca8:	mov	r0, #1
   12cac:	bl	11268 <__printf_chk@plt>
   12cb0:	ldr	r1, [pc, #256]	; 12db8 <fscanf@plt+0x188c>
   12cb4:	mov	r2, #5
   12cb8:	mov	r0, r4
   12cbc:	add	r1, pc, r1
   12cc0:	bl	11328 <dcgettext@plt>
   12cc4:	ldr	r2, [pc, #240]	; 12dbc <fscanf@plt+0x1890>
   12cc8:	ldr	r3, [pc, #240]	; 12dc0 <fscanf@plt+0x1894>
   12ccc:	add	r2, pc, r2
   12cd0:	add	r3, pc, r3
   12cd4:	mov	r1, r0
   12cd8:	mov	r0, #1
   12cdc:	bl	11268 <__printf_chk@plt>
   12ce0:	mov	r0, #5
   12ce4:	mov	r1, r4
   12ce8:	bl	11388 <setlocale@plt>
   12cec:	cmp	r0, #0
   12cf0:	beq	12d0c <fscanf@plt+0x17e0>
   12cf4:	ldr	r1, [pc, #200]	; 12dc4 <fscanf@plt+0x1898>
   12cf8:	mov	r2, #3
   12cfc:	add	r1, pc, r1
   12d00:	bl	114d8 <strncmp@plt>
   12d04:	cmp	r0, #0
   12d08:	bne	12d40 <fscanf@plt+0x1814>
   12d0c:	ldr	r1, [pc, #180]	; 12dc8 <fscanf@plt+0x189c>
   12d10:	mov	r2, #5
   12d14:	mov	r0, #0
   12d18:	add	r1, pc, r1
   12d1c:	bl	11328 <dcgettext@plt>
   12d20:	mov	r5, r0
   12d24:	ldr	r0, [r6]
   12d28:	bl	13288 <close_stdout@@Base+0x490>
   12d2c:	mov	r1, r5
   12d30:	mov	r2, r0
   12d34:	mov	r0, #1
   12d38:	bl	11268 <__printf_chk@plt>
   12d3c:	b	12b54 <fscanf@plt+0x1628>
   12d40:	ldr	r1, [pc, #132]	; 12dcc <fscanf@plt+0x18a0>
   12d44:	mov	r2, #5
   12d48:	mov	r0, r4
   12d4c:	add	r1, pc, r1
   12d50:	bl	11328 <dcgettext@plt>
   12d54:	mov	r5, r0
   12d58:	ldr	r0, [r6]
   12d5c:	bl	13288 <close_stdout@@Base+0x490>
   12d60:	mov	r1, r5
   12d64:	mov	r2, r0
   12d68:	mov	r0, #1
   12d6c:	bl	11268 <__printf_chk@plt>
   12d70:	b	12d0c <fscanf@plt+0x17e0>
   12d74:	andeq	r5, r1, r8, ror #9
   12d78:	andeq	r0, r0, r0, asr r1
   12d7c:	andeq	r3, r0, r0, asr sp
   12d80:	andeq	r0, r0, r4, asr r1
   12d84:	andeq	r3, r0, ip, lsr sp
   12d88:			; <UNDEFINED> instruction: 0x00003db0
   12d8c:	andeq	r3, r0, r8, lsl #27
   12d90:	andeq	r0, r0, ip, asr #2
   12d94:	muleq	r0, r0, sp
   12d98:			; <UNDEFINED> instruction: 0x00003db0
   12d9c:	andeq	r3, r0, r8, asr #27
   12da0:	andeq	r3, r0, r0, ror #27
   12da4:	andeq	r3, r0, r8, lsl lr
   12da8:	andeq	r3, r0, ip, ror #30
   12dac:	andeq	r3, r0, r0, lsl #31
   12db0:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   12db4:	muleq	r0, r4, r0
   12db8:	andeq	r4, r0, r4, lsl #1
   12dbc:	andeq	r4, r0, ip, lsl #1
   12dc0:	muleq	r0, r8, r0
   12dc4:	muleq	r0, r4, r0
   12dc8:	andeq	r4, r0, r4, asr #1
   12dcc:	andeq	r4, r0, r8, asr #32
   12dd0:	ldr	r3, [pc, #8]	; 12de0 <fscanf@plt+0x18b4>
   12dd4:	add	r3, pc, r3
   12dd8:	str	r0, [r3]
   12ddc:	bx	lr
   12de0:	andeq	r5, r1, r4, ror #7
   12de4:	ldr	r3, [pc, #8]	; 12df4 <fscanf@plt+0x18c8>
   12de8:	add	r3, pc, r3
   12dec:	strb	r0, [r3, #4]
   12df0:	bx	lr
   12df4:	ldrdeq	r5, [r1], -r0

00012df8 <close_stdout@@Base>:
   12df8:	push	{r4, r5, r6, r7, lr}
   12dfc:	sub	sp, sp, #12
   12e00:	ldr	r4, [pc, #228]	; 12eec <close_stdout@@Base+0xf4>
   12e04:	ldr	r3, [pc, #228]	; 12ef0 <close_stdout@@Base+0xf8>
   12e08:	add	r4, pc, r4
   12e0c:	ldr	r3, [r4, r3]
   12e10:	ldr	r0, [r3]
   12e14:	bl	15798 <close_stdout@@Base+0x29a0>
   12e18:	cmp	r0, #0
   12e1c:	beq	12e44 <close_stdout@@Base+0x4c>
   12e20:	ldr	r3, [pc, #204]	; 12ef4 <close_stdout@@Base+0xfc>
   12e24:	add	r3, pc, r3
   12e28:	ldrb	r3, [r3, #4]
   12e2c:	cmp	r3, #0
   12e30:	beq	12e64 <close_stdout@@Base+0x6c>
   12e34:	bl	11520 <__errno_location@plt>
   12e38:	ldr	r3, [r0]
   12e3c:	cmp	r3, #32
   12e40:	bne	12e64 <close_stdout@@Base+0x6c>
   12e44:	ldr	r3, [pc, #172]	; 12ef8 <close_stdout@@Base+0x100>
   12e48:	ldr	r3, [r4, r3]
   12e4c:	ldr	r0, [r3]
   12e50:	bl	15798 <close_stdout@@Base+0x29a0>
   12e54:	cmp	r0, #0
   12e58:	bne	12eb8 <close_stdout@@Base+0xc0>
   12e5c:	add	sp, sp, #12
   12e60:	pop	{r4, r5, r6, r7, pc}
   12e64:	ldr	r1, [pc, #144]	; 12efc <close_stdout@@Base+0x104>
   12e68:	mov	r0, #0
   12e6c:	mov	r2, #5
   12e70:	add	r1, pc, r1
   12e74:	bl	11328 <dcgettext@plt>
   12e78:	ldr	r3, [pc, #128]	; 12f00 <close_stdout@@Base+0x108>
   12e7c:	ldr	r5, [pc, r3]
   12e80:	cmp	r5, #0
   12e84:	mov	r6, r0
   12e88:	beq	12ec8 <close_stdout@@Base+0xd0>
   12e8c:	bl	11520 <__errno_location@plt>
   12e90:	ldr	r7, [r0]
   12e94:	mov	r0, r5
   12e98:	bl	14b04 <close_stdout@@Base+0x1d0c>
   12e9c:	ldr	r2, [pc, #96]	; 12f04 <close_stdout@@Base+0x10c>
   12ea0:	str	r6, [sp]
   12ea4:	mov	r1, r7
   12ea8:	add	r2, pc, r2
   12eac:	mov	r3, r0
   12eb0:	mov	r0, #0
   12eb4:	bl	1146c <error@plt>
   12eb8:	ldr	r3, [pc, #72]	; 12f08 <close_stdout@@Base+0x110>
   12ebc:	ldr	r3, [r4, r3]
   12ec0:	ldr	r0, [r3]
   12ec4:	bl	11304 <_exit@plt>
   12ec8:	bl	11520 <__errno_location@plt>
   12ecc:	ldr	r2, [pc, #56]	; 12f0c <close_stdout@@Base+0x114>
   12ed0:	add	r2, pc, r2
   12ed4:	mov	r3, r0
   12ed8:	mov	r0, r5
   12edc:	ldr	r1, [r3]
   12ee0:	mov	r3, r6
   12ee4:	bl	1146c <error@plt>
   12ee8:	b	12eb8 <close_stdout@@Base+0xc0>
   12eec:	strdeq	r5, [r1], -r0
   12ef0:	andeq	r0, r0, ip, asr #2
   12ef4:	muleq	r1, r4, r3
   12ef8:	andeq	r0, r0, r0, asr r1
   12efc:	andeq	r4, r0, r8, lsl #8
   12f00:	andeq	r5, r1, ip, lsr r3
   12f04:	ldrdeq	r4, [r0], -ip
   12f08:	andeq	r0, r0, r0, lsr r1
   12f0c:			; <UNDEFINED> instruction: 0x000043b8
   12f10:	b	114a8 <SHA224_Init@plt>
   12f14:	mov	r3, r0
   12f18:	mov	r0, r1
   12f1c:	push	{r4, lr}
   12f20:	mov	r4, r1
   12f24:	mov	r1, r3
   12f28:	bl	11280 <SHA224_Final@plt>
   12f2c:	mov	r0, r4
   12f30:	pop	{r4, pc}
   12f34:	b	113ac <SHA224@plt>
   12f38:	ldr	ip, [pc, #100]	; 12fa4 <close_stdout@@Base+0x1ac>
   12f3c:	mov	r2, r0
   12f40:	push	{r4, r5, lr}
   12f44:	add	ip, pc, ip
   12f48:	ldr	lr, [pc, #88]	; 12fa8 <close_stdout@@Base+0x1b0>
   12f4c:	sub	sp, sp, #124	; 0x7c
   12f50:	add	r3, sp, #4
   12f54:	mov	r5, r1
   12f58:	mov	r1, r2
   12f5c:	mov	r2, #112	; 0x70
   12f60:	ldr	r4, [ip, lr]
   12f64:	mov	r0, r3
   12f68:	ldr	ip, [r4]
   12f6c:	str	ip, [sp, #116]	; 0x74
   12f70:	bl	1137c <memcpy@plt>
   12f74:	mov	r3, r0
   12f78:	mov	r0, r5
   12f7c:	mov	r1, r3
   12f80:	bl	11280 <SHA224_Final@plt>
   12f84:	ldr	r2, [sp, #116]	; 0x74
   12f88:	ldr	r3, [r4]
   12f8c:	mov	r0, r5
   12f90:	cmp	r2, r3
   12f94:	bne	12fa0 <close_stdout@@Base+0x1a8>
   12f98:	add	sp, sp, #124	; 0x7c
   12f9c:	pop	{r4, r5, pc}
   12fa0:	bl	11484 <__stack_chk_fail@plt>
   12fa4:	strheq	r5, [r1], -r4
   12fa8:	andeq	r0, r0, r4, lsr r1
   12fac:	b	1134c <SHA256_Init@plt>
   12fb0:	mov	ip, r0
   12fb4:	mov	r3, r1
   12fb8:	mov	r0, r2
   12fbc:	mov	r1, ip
   12fc0:	mov	r2, r3
   12fc4:	b	11430 <SHA256_Update@plt>
   12fc8:	mov	ip, r0
   12fcc:	mov	r3, r1
   12fd0:	mov	r0, r2
   12fd4:	mov	r1, ip
   12fd8:	mov	r2, r3
   12fdc:	b	11430 <SHA256_Update@plt>
   12fe0:	mov	r3, r0
   12fe4:	mov	r0, r1
   12fe8:	push	{r4, lr}
   12fec:	mov	r4, r1
   12ff0:	mov	r1, r3
   12ff4:	bl	11400 <SHA256_Final@plt>
   12ff8:	mov	r0, r4
   12ffc:	pop	{r4, pc}
   13000:	b	114fc <SHA256@plt>
   13004:	ldr	ip, [pc, #100]	; 13070 <close_stdout@@Base+0x278>
   13008:	mov	r2, r0
   1300c:	push	{r4, r5, lr}
   13010:	add	ip, pc, ip
   13014:	ldr	lr, [pc, #88]	; 13074 <close_stdout@@Base+0x27c>
   13018:	sub	sp, sp, #124	; 0x7c
   1301c:	add	r3, sp, #4
   13020:	mov	r5, r1
   13024:	mov	r1, r2
   13028:	mov	r2, #112	; 0x70
   1302c:	ldr	r4, [ip, lr]
   13030:	mov	r0, r3
   13034:	ldr	ip, [r4]
   13038:	str	ip, [sp, #116]	; 0x74
   1303c:	bl	1137c <memcpy@plt>
   13040:	mov	r3, r0
   13044:	mov	r0, r5
   13048:	mov	r1, r3
   1304c:	bl	11400 <SHA256_Final@plt>
   13050:	ldr	r2, [sp, #116]	; 0x74
   13054:	ldr	r3, [r4]
   13058:	mov	r0, r5
   1305c:	cmp	r2, r3
   13060:	bne	1306c <close_stdout@@Base+0x274>
   13064:	add	sp, sp, #124	; 0x7c
   13068:	pop	{r4, r5, pc}
   1306c:	bl	11484 <__stack_chk_fail@plt>
   13070:	andeq	r4, r1, r8, ror #31
   13074:	andeq	r0, r0, r4, lsr r1
   13078:	ldr	r3, [pc, #248]	; 13178 <close_stdout@@Base+0x380>
   1307c:	ldr	r2, [pc, #248]	; 1317c <close_stdout@@Base+0x384>
   13080:	add	r3, pc, r3
   13084:	push	{r4, r5, r6, r7, r8, r9, lr}
   13088:	sub	sp, sp, #124	; 0x7c
   1308c:	ldr	r8, [r3, r2]
   13090:	mov	r5, r0
   13094:	movw	r0, #32840	; 0x8048
   13098:	mov	r9, r1
   1309c:	ldr	r3, [r8]
   130a0:	str	r3, [sp, #116]	; 0x74
   130a4:	bl	11460 <malloc@plt>
   130a8:	subs	r6, r0, #0
   130ac:	moveq	r0, #1
   130b0:	beq	13118 <close_stdout@@Base+0x320>
   130b4:	add	r7, sp, #4
   130b8:	mov	r4, #0
   130bc:	mov	r0, r7
   130c0:	bl	1134c <SHA256_Init@plt>
   130c4:	add	r0, r6, r4
   130c8:	rsb	r2, r4, #32768	; 0x8000
   130cc:	mov	r1, #1
   130d0:	mov	r3, r5
   130d4:	bl	11238 <fread_unlocked@plt>
   130d8:	add	r4, r4, r0
   130dc:	cmp	r4, #32768	; 0x8000
   130e0:	beq	13130 <close_stdout@@Base+0x338>
   130e4:	cmp	r0, #0
   130e8:	ldr	r3, [r5]
   130ec:	beq	1315c <close_stdout@@Base+0x364>
   130f0:	tst	r3, #16
   130f4:	beq	130c4 <close_stdout@@Base+0x2cc>
   130f8:	cmp	r4, #0
   130fc:	bne	13148 <close_stdout@@Base+0x350>
   13100:	mov	r1, r7
   13104:	mov	r0, r9
   13108:	bl	11400 <SHA256_Final@plt>
   1310c:	mov	r0, r6
   13110:	bl	11310 <free@plt>
   13114:	mov	r0, #0
   13118:	ldr	r2, [sp, #116]	; 0x74
   1311c:	ldr	r3, [r8]
   13120:	cmp	r2, r3
   13124:	bne	13174 <close_stdout@@Base+0x37c>
   13128:	add	sp, sp, #124	; 0x7c
   1312c:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13130:	mov	r2, r4
   13134:	mov	r0, r7
   13138:	mov	r1, r6
   1313c:	mov	r4, #0
   13140:	bl	11430 <SHA256_Update@plt>
   13144:	b	130c4 <close_stdout@@Base+0x2cc>
   13148:	mov	r2, r4
   1314c:	mov	r0, r7
   13150:	mov	r1, r6
   13154:	bl	11430 <SHA256_Update@plt>
   13158:	b	13100 <close_stdout@@Base+0x308>
   1315c:	tst	r3, #32
   13160:	beq	130f8 <close_stdout@@Base+0x300>
   13164:	mov	r0, r6
   13168:	bl	11310 <free@plt>
   1316c:	mov	r0, #1
   13170:	b	13118 <close_stdout@@Base+0x320>
   13174:	bl	11484 <__stack_chk_fail@plt>
   13178:	andeq	r4, r1, r8, ror pc
   1317c:	andeq	r0, r0, r4, lsr r1
   13180:	ldr	r3, [pc, #248]	; 13280 <close_stdout@@Base+0x488>
   13184:	ldr	r2, [pc, #248]	; 13284 <close_stdout@@Base+0x48c>
   13188:	add	r3, pc, r3
   1318c:	push	{r4, r5, r6, r7, r8, r9, lr}
   13190:	sub	sp, sp, #124	; 0x7c
   13194:	ldr	r8, [r3, r2]
   13198:	mov	r5, r0
   1319c:	movw	r0, #32840	; 0x8048
   131a0:	mov	r9, r1
   131a4:	ldr	r3, [r8]
   131a8:	str	r3, [sp, #116]	; 0x74
   131ac:	bl	11460 <malloc@plt>
   131b0:	subs	r6, r0, #0
   131b4:	moveq	r0, #1
   131b8:	beq	13220 <close_stdout@@Base+0x428>
   131bc:	add	r7, sp, #4
   131c0:	mov	r4, #0
   131c4:	mov	r0, r7
   131c8:	bl	114a8 <SHA224_Init@plt>
   131cc:	add	r0, r6, r4
   131d0:	rsb	r2, r4, #32768	; 0x8000
   131d4:	mov	r1, #1
   131d8:	mov	r3, r5
   131dc:	bl	11238 <fread_unlocked@plt>
   131e0:	add	r4, r4, r0
   131e4:	cmp	r4, #32768	; 0x8000
   131e8:	beq	13238 <close_stdout@@Base+0x440>
   131ec:	cmp	r0, #0
   131f0:	ldr	r3, [r5]
   131f4:	beq	13264 <close_stdout@@Base+0x46c>
   131f8:	tst	r3, #16
   131fc:	beq	131cc <close_stdout@@Base+0x3d4>
   13200:	cmp	r4, #0
   13204:	bne	13250 <close_stdout@@Base+0x458>
   13208:	mov	r1, r7
   1320c:	mov	r0, r9
   13210:	bl	11280 <SHA224_Final@plt>
   13214:	mov	r0, r6
   13218:	bl	11310 <free@plt>
   1321c:	mov	r0, #0
   13220:	ldr	r2, [sp, #116]	; 0x74
   13224:	ldr	r3, [r8]
   13228:	cmp	r2, r3
   1322c:	bne	1327c <close_stdout@@Base+0x484>
   13230:	add	sp, sp, #124	; 0x7c
   13234:	pop	{r4, r5, r6, r7, r8, r9, pc}
   13238:	mov	r2, r4
   1323c:	mov	r0, r7
   13240:	mov	r1, r6
   13244:	mov	r4, #0
   13248:	bl	11430 <SHA256_Update@plt>
   1324c:	b	131cc <close_stdout@@Base+0x3d4>
   13250:	mov	r2, r4
   13254:	mov	r0, r7
   13258:	mov	r1, r6
   1325c:	bl	11430 <SHA256_Update@plt>
   13260:	b	13208 <close_stdout@@Base+0x410>
   13264:	tst	r3, #32
   13268:	beq	13200 <close_stdout@@Base+0x408>
   1326c:	mov	r0, r6
   13270:	bl	11310 <free@plt>
   13274:	mov	r0, #1
   13278:	b	13220 <close_stdout@@Base+0x428>
   1327c:	bl	11484 <__stack_chk_fail@plt>
   13280:	andeq	r4, r1, r0, ror lr
   13284:	andeq	r0, r0, r4, lsr r1
   13288:	ldrb	r3, [r0]
   1328c:	cmp	r3, #47	; 0x2f
   13290:	bne	132ac <close_stdout@@Base+0x4b4>
   13294:	add	r2, r0, #1
   13298:	mov	r0, r2
   1329c:	add	r2, r2, #1
   132a0:	ldrb	r3, [r0]
   132a4:	cmp	r3, #47	; 0x2f
   132a8:	beq	13298 <close_stdout@@Base+0x4a0>
   132ac:	cmp	r3, #0
   132b0:	bxeq	lr
   132b4:	mov	r2, r0
   132b8:	mov	r1, #0
   132bc:	cmp	r3, #47	; 0x2f
   132c0:	moveq	r1, #1
   132c4:	beq	132d4 <close_stdout@@Base+0x4dc>
   132c8:	cmp	r1, #0
   132cc:	movne	r0, r2
   132d0:	movne	r1, #0
   132d4:	ldrb	r3, [r2, #1]!
   132d8:	cmp	r3, #0
   132dc:	bne	132bc <close_stdout@@Base+0x4c4>
   132e0:	bx	lr
   132e4:	push	{r4, lr}
   132e8:	mov	r4, r0
   132ec:	bl	11364 <strlen@plt>
   132f0:	cmp	r0, #1
   132f4:	popls	{r4, pc}
   132f8:	sub	r3, r0, #1
   132fc:	ldrb	r2, [r4, r3]
   13300:	cmp	r2, #47	; 0x2f
   13304:	popne	{r4, pc}
   13308:	mov	r0, r3
   1330c:	cmp	r0, #1
   13310:	sub	r3, r3, #1
   13314:	beq	13328 <close_stdout@@Base+0x530>
   13318:	ldrb	r2, [r4, r3]
   1331c:	cmp	r2, #47	; 0x2f
   13320:	popne	{r4, pc}
   13324:	b	13308 <close_stdout@@Base+0x510>
   13328:	pop	{r4, pc}
   1332c:	b	11370 <posix_fadvise64@plt>
   13330:	cmp	r0, #0
   13334:	push	{r4, r5, r6, lr}
   13338:	mov	r6, r1
   1333c:	sub	sp, sp, #16
   13340:	beq	13364 <close_stdout@@Base+0x56c>
   13344:	mov	r4, #0
   13348:	mov	r5, #0
   1334c:	bl	111fc <fileno@plt>
   13350:	str	r6, [sp, #8]
   13354:	mov	r2, r4
   13358:	mov	r3, r5
   1335c:	strd	r4, [sp]
   13360:	bl	1332c <close_stdout@@Base+0x534>
   13364:	add	sp, sp, #16
   13368:	pop	{r4, r5, r6, pc}
   1336c:	push	{r4, r5, r6, lr}
   13370:	mov	r5, r1
   13374:	bl	11394 <fopen64@plt>
   13378:	subs	r4, r0, #0
   1337c:	beq	1338c <close_stdout@@Base+0x594>
   13380:	bl	111fc <fileno@plt>
   13384:	cmp	r0, #2
   13388:	bls	13394 <close_stdout@@Base+0x59c>
   1338c:	mov	r0, r4
   13390:	pop	{r4, r5, r6, pc}
   13394:	bl	14c64 <close_stdout@@Base+0x1e6c>
   13398:	subs	r6, r0, #0
   1339c:	blt	133c8 <close_stdout@@Base+0x5d0>
   133a0:	mov	r0, r4
   133a4:	bl	1547c <close_stdout@@Base+0x2684>
   133a8:	cmp	r0, #0
   133ac:	bne	133e8 <close_stdout@@Base+0x5f0>
   133b0:	mov	r1, r5
   133b4:	mov	r0, r6
   133b8:	bl	1140c <fdopen@plt>
   133bc:	cmp	r0, #0
   133c0:	beq	133e8 <close_stdout@@Base+0x5f0>
   133c4:	pop	{r4, r5, r6, pc}
   133c8:	bl	11520 <__errno_location@plt>
   133cc:	ldr	r6, [r0]
   133d0:	mov	r5, r0
   133d4:	mov	r0, r4
   133d8:	bl	1547c <close_stdout@@Base+0x2684>
   133dc:	mov	r0, #0
   133e0:	str	r6, [r5]
   133e4:	pop	{r4, r5, r6, pc}
   133e8:	bl	11520 <__errno_location@plt>
   133ec:	ldr	r5, [r0]
   133f0:	mov	r4, r0
   133f4:	mov	r0, r6
   133f8:	bl	11418 <close@plt>
   133fc:	mov	r0, #0
   13400:	str	r5, [r4]
   13404:	pop	{r4, r5, r6, pc}
   13408:	push	{r3, r4, r5, r6, r7, lr}
   1340c:	subs	r4, r0, #0
   13410:	ldr	r5, [pc, #172]	; 134c4 <close_stdout@@Base+0x6cc>
   13414:	add	r5, pc, r5
   13418:	beq	134a0 <close_stdout@@Base+0x6a8>
   1341c:	mov	r1, #47	; 0x2f
   13420:	bl	112c8 <strrchr@plt>
   13424:	subs	r6, r0, #0
   13428:	beq	13484 <close_stdout@@Base+0x68c>
   1342c:	add	r7, r6, #1
   13430:	rsb	r3, r4, r7
   13434:	cmp	r3, #6
   13438:	ble	13484 <close_stdout@@Base+0x68c>
   1343c:	ldr	r1, [pc, #132]	; 134c8 <close_stdout@@Base+0x6d0>
   13440:	sub	r0, r6, #6
   13444:	mov	r2, #7
   13448:	add	r1, pc, r1
   1344c:	bl	114d8 <strncmp@plt>
   13450:	cmp	r0, #0
   13454:	bne	13484 <close_stdout@@Base+0x68c>
   13458:	ldr	r1, [pc, #108]	; 134cc <close_stdout@@Base+0x6d4>
   1345c:	mov	r0, r7
   13460:	mov	r2, #3
   13464:	add	r1, pc, r1
   13468:	bl	114d8 <strncmp@plt>
   1346c:	cmp	r0, #0
   13470:	movne	r4, r7
   13474:	ldreq	r3, [pc, #84]	; 134d0 <close_stdout@@Base+0x6d8>
   13478:	addeq	r4, r6, #4
   1347c:	ldreq	r3, [r5, r3]
   13480:	streq	r4, [r3]
   13484:	ldr	r2, [pc, #72]	; 134d4 <close_stdout@@Base+0x6dc>
   13488:	ldr	r3, [pc, #72]	; 134d8 <close_stdout@@Base+0x6e0>
   1348c:	ldr	r2, [r5, r2]
   13490:	str	r4, [r2]
   13494:	ldr	r3, [r5, r3]
   13498:	str	r4, [r3]
   1349c:	pop	{r3, r4, r5, r6, r7, pc}
   134a0:	ldr	r3, [pc, #52]	; 134dc <close_stdout@@Base+0x6e4>
   134a4:	mov	r1, #1
   134a8:	ldr	r0, [pc, #48]	; 134e0 <close_stdout@@Base+0x6e8>
   134ac:	mov	r2, #55	; 0x37
   134b0:	ldr	r3, [r5, r3]
   134b4:	add	r0, pc, r0
   134b8:	ldr	r3, [r3]
   134bc:	bl	11424 <fwrite@plt>
   134c0:	bl	11208 <abort@plt>
   134c4:	andeq	r4, r1, r4, ror #23
   134c8:	andeq	r3, r0, ip, ror lr
   134cc:	andeq	r3, r0, r8, ror #28
   134d0:	andeq	r0, r0, r4, asr #2
   134d4:	andeq	r0, r0, r4, asr r1
   134d8:	andeq	r0, r0, ip, lsr r1
   134dc:	andeq	r0, r0, r0, asr r1
   134e0:	ldrdeq	r3, [r0], -r8
   134e4:	push	{r3, lr}
   134e8:	mov	r3, r0
   134ec:	mov	r2, #0
   134f0:	cmp	r1, #8
   134f4:	str	r2, [r3], #4
   134f8:	add	r3, r3, #4
   134fc:	str	r2, [r0, #4]
   13500:	str	r2, [r3], #4
   13504:	str	r2, [r3], #4
   13508:	str	r2, [r3], #4
   1350c:	str	r2, [r3], #4
   13510:	str	r2, [r3], #4
   13514:	str	r2, [r3], #4
   13518:	str	r2, [r3], #4
   1351c:	str	r2, [r3], #4
   13520:	str	r2, [r3], #4
   13524:	str	r2, [r3]
   13528:	beq	13534 <close_stdout@@Base+0x73c>
   1352c:	str	r1, [r0]
   13530:	pop	{r3, pc}
   13534:	bl	11208 <abort@plt>
   13538:	push	{r4, r5, r6, lr}
   1353c:	mov	r4, r0
   13540:	mov	r6, r1
   13544:	mov	r0, #0
   13548:	mov	r1, r4
   1354c:	mov	r2, #5
   13550:	bl	11328 <dcgettext@plt>
   13554:	cmp	r0, r4
   13558:	mov	r5, r0
   1355c:	beq	13564 <close_stdout@@Base+0x76c>
   13560:	pop	{r4, r5, r6, pc}
   13564:	bl	15818 <close_stdout@@Base+0x2a20>
   13568:	ldrb	r3, [r0]
   1356c:	bic	r3, r3, #32
   13570:	cmp	r3, #85	; 0x55
   13574:	bne	135e8 <close_stdout@@Base+0x7f0>
   13578:	ldrb	r3, [r0, #1]
   1357c:	bic	r3, r3, #32
   13580:	cmp	r3, #84	; 0x54
   13584:	bne	135d4 <close_stdout@@Base+0x7dc>
   13588:	ldrb	r3, [r0, #2]
   1358c:	bic	r3, r3, #32
   13590:	cmp	r3, #70	; 0x46
   13594:	bne	135d4 <close_stdout@@Base+0x7dc>
   13598:	ldrb	r3, [r0, #3]
   1359c:	cmp	r3, #45	; 0x2d
   135a0:	bne	135d4 <close_stdout@@Base+0x7dc>
   135a4:	ldrb	r3, [r0, #4]
   135a8:	cmp	r3, #56	; 0x38
   135ac:	bne	135d4 <close_stdout@@Base+0x7dc>
   135b0:	ldrb	r3, [r0, #5]
   135b4:	cmp	r3, #0
   135b8:	bne	135d4 <close_stdout@@Base+0x7dc>
   135bc:	ldrb	r3, [r5]
   135c0:	cmp	r3, #96	; 0x60
   135c4:	beq	13660 <close_stdout@@Base+0x868>
   135c8:	ldr	r0, [pc, #180]	; 13684 <close_stdout@@Base+0x88c>
   135cc:	add	r0, pc, r0
   135d0:	pop	{r4, r5, r6, pc}
   135d4:	cmp	r6, #7
   135d8:	beq	1366c <close_stdout@@Base+0x874>
   135dc:	ldr	r0, [pc, #164]	; 13688 <close_stdout@@Base+0x890>
   135e0:	add	r0, pc, r0
   135e4:	pop	{r4, r5, r6, pc}
   135e8:	cmp	r3, #71	; 0x47
   135ec:	bne	135d4 <close_stdout@@Base+0x7dc>
   135f0:	ldrb	r3, [r0, #1]
   135f4:	bic	r3, r3, #32
   135f8:	cmp	r3, #66	; 0x42
   135fc:	bne	135d4 <close_stdout@@Base+0x7dc>
   13600:	ldrb	r3, [r0, #2]
   13604:	cmp	r3, #49	; 0x31
   13608:	bne	135d4 <close_stdout@@Base+0x7dc>
   1360c:	ldrb	r3, [r0, #3]
   13610:	cmp	r3, #56	; 0x38
   13614:	bne	135d4 <close_stdout@@Base+0x7dc>
   13618:	ldrb	r3, [r0, #4]
   1361c:	cmp	r3, #48	; 0x30
   13620:	bne	135d4 <close_stdout@@Base+0x7dc>
   13624:	ldrb	r3, [r0, #5]
   13628:	cmp	r3, #51	; 0x33
   1362c:	bne	135d4 <close_stdout@@Base+0x7dc>
   13630:	ldrb	r3, [r0, #6]
   13634:	cmp	r3, #48	; 0x30
   13638:	bne	135d4 <close_stdout@@Base+0x7dc>
   1363c:	ldrb	r3, [r0, #7]
   13640:	cmp	r3, #0
   13644:	bne	135d4 <close_stdout@@Base+0x7dc>
   13648:	ldrb	r3, [r5]
   1364c:	cmp	r3, #96	; 0x60
   13650:	beq	13678 <close_stdout@@Base+0x880>
   13654:	ldr	r0, [pc, #48]	; 1368c <close_stdout@@Base+0x894>
   13658:	add	r0, pc, r0
   1365c:	pop	{r4, r5, r6, pc}
   13660:	ldr	r0, [pc, #40]	; 13690 <close_stdout@@Base+0x898>
   13664:	add	r0, pc, r0
   13668:	pop	{r4, r5, r6, pc}
   1366c:	ldr	r0, [pc, #32]	; 13694 <close_stdout@@Base+0x89c>
   13670:	add	r0, pc, r0
   13674:	pop	{r4, r5, r6, pc}
   13678:	ldr	r0, [pc, #24]	; 13698 <close_stdout@@Base+0x8a0>
   1367c:	add	r0, pc, r0
   13680:	pop	{r4, r5, r6, pc}
   13684:	andeq	r3, r0, r4, lsr #26
   13688:	andeq	r3, r0, r8, lsl sp
   1368c:	muleq	r0, ip, ip
   13690:	andeq	r3, r0, r0, lsr #25
   13694:	andeq	r3, r0, ip, lsl #25
   13698:	andeq	r3, r0, r4, lsl #25
   1369c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   136a0:	sub	sp, sp, #124	; 0x7c
   136a4:	ldr	ip, [pc, #3304]	; 14394 <close_stdout@@Base+0x159c>
   136a8:	mov	sl, r1
   136ac:	str	r0, [sp, #40]	; 0x28
   136b0:	mov	r8, r3
   136b4:	ldr	r0, [pc, #3292]	; 14398 <close_stdout@@Base+0x15a0>
   136b8:	add	ip, pc, ip
   136bc:	str	r2, [sp, #32]
   136c0:	ldr	r1, [sp, #164]	; 0xa4
   136c4:	mov	r3, ip
   136c8:	ldr	r0, [ip, r0]
   136cc:	ldr	r2, [sp, #172]	; 0xac
   136d0:	ubfx	r1, r1, #1, #1
   136d4:	str	r1, [sp, #36]	; 0x24
   136d8:	str	r0, [sp, #56]	; 0x38
   136dc:	ldr	r0, [sp, #168]	; 0xa8
   136e0:	ldr	r1, [sp, #176]	; 0xb0
   136e4:	str	r2, [sp, #72]	; 0x48
   136e8:	str	r0, [sp, #48]	; 0x30
   136ec:	ldr	r0, [sp, #56]	; 0x38
   136f0:	str	r1, [sp, #68]	; 0x44
   136f4:	ldr	r3, [r0]
   136f8:	str	r3, [sp, #116]	; 0x74
   136fc:	bl	11244 <__ctype_get_mb_cur_max@plt>
   13700:	ldr	r2, [sp, #160]	; 0xa0
   13704:	str	r0, [sp, #64]	; 0x40
   13708:	cmp	r2, #8
   1370c:	addls	pc, pc, r2, lsl #2
   13710:	b	14270 <close_stdout@@Base+0x1478>
   13714:	b	13738 <close_stdout@@Base+0x940>
   13718:	b	13f88 <close_stdout@@Base+0x1190>
   1371c:	b	13fb8 <close_stdout@@Base+0x11c0>
   13720:	b	13e68 <close_stdout@@Base+0x1070>
   13724:	b	13ea8 <close_stdout@@Base+0x10b0>
   13728:	b	13ed4 <close_stdout@@Base+0x10dc>
   1372c:	b	13ef4 <close_stdout@@Base+0x10fc>
   13730:	b	13ef4 <close_stdout@@Base+0x10fc>
   13734:	b	13ef4 <close_stdout@@Base+0x10fc>
   13738:	mov	r2, #0
   1373c:	str	r2, [sp, #36]	; 0x24
   13740:	mov	r9, r2
   13744:	str	r2, [sp, #24]
   13748:	str	r2, [sp, #28]
   1374c:	str	r2, [sp, #52]	; 0x34
   13750:	ldr	r0, [sp, #36]	; 0x24
   13754:	mov	fp, #0
   13758:	ldr	r1, [sp, #24]
   1375c:	eor	r2, r0, #1
   13760:	eor	r3, r1, #1
   13764:	and	r3, r2, r3
   13768:	and	r2, r1, r0
   1376c:	str	r3, [sp, #44]	; 0x2c
   13770:	str	r2, [sp, #76]	; 0x4c
   13774:	cmn	r8, #1
   13778:	beq	13af8 <close_stdout@@Base+0xd00>
   1377c:	subs	r3, fp, r8
   13780:	movne	r3, #1
   13784:	cmp	r3, #0
   13788:	beq	13b10 <close_stdout@@Base+0xd18>
   1378c:	ldr	r3, [sp, #28]
   13790:	ldr	r0, [sp, #24]
   13794:	adds	r7, r3, #0
   13798:	movne	r7, #1
   1379c:	ands	r6, r7, r0
   137a0:	bne	13ffc <close_stdout@@Base+0x1204>
   137a4:	ldr	r1, [sp, #32]
   137a8:	add	r5, r1, fp
   137ac:	ldrb	r4, [r5]
   137b0:	cmp	r4, #126	; 0x7e
   137b4:	addls	pc, pc, r4, lsl #2
   137b8:	b	13d7c <close_stdout@@Base+0xf84>
   137bc:	b	13c88 <close_stdout@@Base+0xe90>
   137c0:	b	13d7c <close_stdout@@Base+0xf84>
   137c4:	b	13d7c <close_stdout@@Base+0xf84>
   137c8:	b	13d7c <close_stdout@@Base+0xf84>
   137cc:	b	13d7c <close_stdout@@Base+0xf84>
   137d0:	b	13d7c <close_stdout@@Base+0xf84>
   137d4:	b	13d7c <close_stdout@@Base+0xf84>
   137d8:	b	13c70 <close_stdout@@Base+0xe78>
   137dc:	b	13c58 <close_stdout@@Base+0xe60>
   137e0:	b	13c80 <close_stdout@@Base+0xe88>
   137e4:	b	13c78 <close_stdout@@Base+0xe80>
   137e8:	b	13c68 <close_stdout@@Base+0xe70>
   137ec:	b	13c60 <close_stdout@@Base+0xe68>
   137f0:	b	13c24 <close_stdout@@Base+0xe2c>
   137f4:	b	13d7c <close_stdout@@Base+0xf84>
   137f8:	b	13d7c <close_stdout@@Base+0xf84>
   137fc:	b	13d7c <close_stdout@@Base+0xf84>
   13800:	b	13d7c <close_stdout@@Base+0xf84>
   13804:	b	13d7c <close_stdout@@Base+0xf84>
   13808:	b	13d7c <close_stdout@@Base+0xf84>
   1380c:	b	13d7c <close_stdout@@Base+0xf84>
   13810:	b	13d7c <close_stdout@@Base+0xf84>
   13814:	b	13d7c <close_stdout@@Base+0xf84>
   13818:	b	13d7c <close_stdout@@Base+0xf84>
   1381c:	b	13d7c <close_stdout@@Base+0xf84>
   13820:	b	13d7c <close_stdout@@Base+0xf84>
   13824:	b	13d7c <close_stdout@@Base+0xf84>
   13828:	b	13d7c <close_stdout@@Base+0xf84>
   1382c:	b	13d7c <close_stdout@@Base+0xf84>
   13830:	b	13d7c <close_stdout@@Base+0xf84>
   13834:	b	13d7c <close_stdout@@Base+0xf84>
   13838:	b	13d7c <close_stdout@@Base+0xf84>
   1383c:	b	13bb0 <close_stdout@@Base+0xdb8>
   13840:	b	13bb0 <close_stdout@@Base+0xdb8>
   13844:	b	13bb0 <close_stdout@@Base+0xdb8>
   13848:	b	13ba8 <close_stdout@@Base+0xdb0>
   1384c:	b	13bb0 <close_stdout@@Base+0xdb8>
   13850:	b	13a84 <close_stdout@@Base+0xc8c>
   13854:	b	13bb0 <close_stdout@@Base+0xdb8>
   13858:	b	13d24 <close_stdout@@Base+0xf2c>
   1385c:	b	13bb0 <close_stdout@@Base+0xdb8>
   13860:	b	13bb0 <close_stdout@@Base+0xdb8>
   13864:	b	13bb0 <close_stdout@@Base+0xdb8>
   13868:	b	13a84 <close_stdout@@Base+0xc8c>
   1386c:	b	13a84 <close_stdout@@Base+0xc8c>
   13870:	b	13a84 <close_stdout@@Base+0xc8c>
   13874:	b	13a84 <close_stdout@@Base+0xc8c>
   13878:	b	13a84 <close_stdout@@Base+0xc8c>
   1387c:	b	13a84 <close_stdout@@Base+0xc8c>
   13880:	b	13a84 <close_stdout@@Base+0xc8c>
   13884:	b	13a84 <close_stdout@@Base+0xc8c>
   13888:	b	13a84 <close_stdout@@Base+0xc8c>
   1388c:	b	13a84 <close_stdout@@Base+0xc8c>
   13890:	b	13a84 <close_stdout@@Base+0xc8c>
   13894:	b	13a84 <close_stdout@@Base+0xc8c>
   13898:	b	13a84 <close_stdout@@Base+0xc8c>
   1389c:	b	13a84 <close_stdout@@Base+0xc8c>
   138a0:	b	13a84 <close_stdout@@Base+0xc8c>
   138a4:	b	13a84 <close_stdout@@Base+0xc8c>
   138a8:	b	13bb0 <close_stdout@@Base+0xdb8>
   138ac:	b	13bb0 <close_stdout@@Base+0xdb8>
   138b0:	b	13bb0 <close_stdout@@Base+0xdb8>
   138b4:	b	13bb0 <close_stdout@@Base+0xdb8>
   138b8:	b	139b8 <close_stdout@@Base+0xbc0>
   138bc:	b	13d7c <close_stdout@@Base+0xf84>
   138c0:	b	13a84 <close_stdout@@Base+0xc8c>
   138c4:	b	13a84 <close_stdout@@Base+0xc8c>
   138c8:	b	13a84 <close_stdout@@Base+0xc8c>
   138cc:	b	13a84 <close_stdout@@Base+0xc8c>
   138d0:	b	13a84 <close_stdout@@Base+0xc8c>
   138d4:	b	13a84 <close_stdout@@Base+0xc8c>
   138d8:	b	13a84 <close_stdout@@Base+0xc8c>
   138dc:	b	13a84 <close_stdout@@Base+0xc8c>
   138e0:	b	13a84 <close_stdout@@Base+0xc8c>
   138e4:	b	13a84 <close_stdout@@Base+0xc8c>
   138e8:	b	13a84 <close_stdout@@Base+0xc8c>
   138ec:	b	13a84 <close_stdout@@Base+0xc8c>
   138f0:	b	13a84 <close_stdout@@Base+0xc8c>
   138f4:	b	13a84 <close_stdout@@Base+0xc8c>
   138f8:	b	13a84 <close_stdout@@Base+0xc8c>
   138fc:	b	13a84 <close_stdout@@Base+0xc8c>
   13900:	b	13a84 <close_stdout@@Base+0xc8c>
   13904:	b	13a84 <close_stdout@@Base+0xc8c>
   13908:	b	13a84 <close_stdout@@Base+0xc8c>
   1390c:	b	13a84 <close_stdout@@Base+0xc8c>
   13910:	b	13a84 <close_stdout@@Base+0xc8c>
   13914:	b	13a84 <close_stdout@@Base+0xc8c>
   13918:	b	13a84 <close_stdout@@Base+0xc8c>
   1391c:	b	13a84 <close_stdout@@Base+0xc8c>
   13920:	b	13a84 <close_stdout@@Base+0xc8c>
   13924:	b	13a84 <close_stdout@@Base+0xc8c>
   13928:	b	13bb0 <close_stdout@@Base+0xdb8>
   1392c:	b	13d08 <close_stdout@@Base+0xf10>
   13930:	b	13a84 <close_stdout@@Base+0xc8c>
   13934:	b	13bb0 <close_stdout@@Base+0xdb8>
   13938:	b	13a84 <close_stdout@@Base+0xc8c>
   1393c:	b	13bb0 <close_stdout@@Base+0xdb8>
   13940:	b	13a84 <close_stdout@@Base+0xc8c>
   13944:	b	13a84 <close_stdout@@Base+0xc8c>
   13948:	b	13a84 <close_stdout@@Base+0xc8c>
   1394c:	b	13a84 <close_stdout@@Base+0xc8c>
   13950:	b	13a84 <close_stdout@@Base+0xc8c>
   13954:	b	13a84 <close_stdout@@Base+0xc8c>
   13958:	b	13a84 <close_stdout@@Base+0xc8c>
   1395c:	b	13a84 <close_stdout@@Base+0xc8c>
   13960:	b	13a84 <close_stdout@@Base+0xc8c>
   13964:	b	13a84 <close_stdout@@Base+0xc8c>
   13968:	b	13a84 <close_stdout@@Base+0xc8c>
   1396c:	b	13a84 <close_stdout@@Base+0xc8c>
   13970:	b	13a84 <close_stdout@@Base+0xc8c>
   13974:	b	13a84 <close_stdout@@Base+0xc8c>
   13978:	b	13a84 <close_stdout@@Base+0xc8c>
   1397c:	b	13a84 <close_stdout@@Base+0xc8c>
   13980:	b	13a84 <close_stdout@@Base+0xc8c>
   13984:	b	13a84 <close_stdout@@Base+0xc8c>
   13988:	b	13a84 <close_stdout@@Base+0xc8c>
   1398c:	b	13a84 <close_stdout@@Base+0xc8c>
   13990:	b	13a84 <close_stdout@@Base+0xc8c>
   13994:	b	13a84 <close_stdout@@Base+0xc8c>
   13998:	b	13a84 <close_stdout@@Base+0xc8c>
   1399c:	b	13a84 <close_stdout@@Base+0xc8c>
   139a0:	b	13a84 <close_stdout@@Base+0xc8c>
   139a4:	b	13a84 <close_stdout@@Base+0xc8c>
   139a8:	b	13b90 <close_stdout@@Base+0xd98>
   139ac:	b	13bb0 <close_stdout@@Base+0xdb8>
   139b0:	b	13b90 <close_stdout@@Base+0xd98>
   139b4:	b	13ba8 <close_stdout@@Base+0xdb0>
   139b8:	ldr	r3, [sp, #160]	; 0xa0
   139bc:	cmp	r3, #2
   139c0:	beq	1424c <close_stdout@@Base+0x1454>
   139c4:	cmp	r3, #3
   139c8:	bne	13a84 <close_stdout@@Base+0xc8c>
   139cc:	ldr	r1, [sp, #164]	; 0xa4
   139d0:	tst	r1, #4
   139d4:	beq	13a84 <close_stdout@@Base+0xc8c>
   139d8:	add	r3, fp, #2
   139dc:	cmp	r8, r3
   139e0:	bls	13a84 <close_stdout@@Base+0xc8c>
   139e4:	ldrb	r2, [r5, #1]
   139e8:	mov	r1, #1
   139ec:	cmp	r2, #63	; 0x3f
   139f0:	bne	13a84 <close_stdout@@Base+0xc8c>
   139f4:	ldr	r0, [sp, #32]
   139f8:	ldrb	ip, [r0, r3]
   139fc:	sub	r0, ip, #33	; 0x21
   13a00:	uxtb	r0, r0
   13a04:	cmp	r0, #29
   13a08:	bhi	13a84 <close_stdout@@Base+0xc8c>
   13a0c:	lsl	r1, r1, r0
   13a10:	movw	r0, #20929	; 0x51c1
   13a14:	movt	r0, #14336	; 0x3800
   13a18:	and	r0, r1, r0
   13a1c:	cmp	r0, #0
   13a20:	beq	13a84 <close_stdout@@Base+0xc8c>
   13a24:	ldr	r1, [sp, #36]	; 0x24
   13a28:	cmp	r1, #0
   13a2c:	bne	13bcc <close_stdout@@Base+0xdd4>
   13a30:	cmp	r9, sl
   13a34:	mov	r4, ip
   13a38:	mov	fp, r3
   13a3c:	ldrcc	r0, [sp, #40]	; 0x28
   13a40:	strbcc	r2, [r0, r9]
   13a44:	add	r2, r9, #1
   13a48:	cmp	sl, r2
   13a4c:	ldrhi	r0, [sp, #40]	; 0x28
   13a50:	movhi	r1, #34	; 0x22
   13a54:	strbhi	r1, [r0, r2]
   13a58:	add	r2, r9, #2
   13a5c:	cmp	sl, r2
   13a60:	ldrhi	r0, [sp, #40]	; 0x28
   13a64:	movhi	r1, #34	; 0x22
   13a68:	strbhi	r1, [r0, r2]
   13a6c:	add	r2, r9, #3
   13a70:	cmp	sl, r2
   13a74:	add	r9, r9, #4
   13a78:	ldrhi	r0, [sp, #40]	; 0x28
   13a7c:	movhi	r1, #63	; 0x3f
   13a80:	strbhi	r1, [r0, r2]
   13a84:	ldr	r0, [sp, #44]	; 0x2c
   13a88:	cmp	r0, #0
   13a8c:	bne	13ab4 <close_stdout@@Base+0xcbc>
   13a90:	ldr	r1, [sp, #48]	; 0x30
   13a94:	cmp	r1, #0
   13a98:	beq	13ab4 <close_stdout@@Base+0xcbc>
   13a9c:	ubfx	r2, r4, #5, #8
   13aa0:	and	r3, r4, #31
   13aa4:	ldr	r2, [r1, r2, lsl #2]
   13aa8:	lsr	r3, r2, r3
   13aac:	tst	r3, #1
   13ab0:	bne	13abc <close_stdout@@Base+0xcc4>
   13ab4:	cmp	r6, #0
   13ab8:	beq	13adc <close_stdout@@Base+0xce4>
   13abc:	ldr	r2, [sp, #36]	; 0x24
   13ac0:	cmp	r2, #0
   13ac4:	bne	13bcc <close_stdout@@Base+0xdd4>
   13ac8:	cmp	r9, sl
   13acc:	ldrcc	r0, [sp, #40]	; 0x28
   13ad0:	movcc	r3, #92	; 0x5c
   13ad4:	strbcc	r3, [r0, r9]
   13ad8:	add	r9, r9, #1
   13adc:	add	fp, fp, #1
   13ae0:	cmp	r9, sl
   13ae4:	ldrcc	r1, [sp, #40]	; 0x28
   13ae8:	strbcc	r4, [r1, r9]
   13aec:	cmn	r8, #1
   13af0:	add	r9, r9, #1
   13af4:	bne	1377c <close_stdout@@Base+0x984>
   13af8:	ldr	r2, [sp, #32]
   13afc:	ldrb	r3, [r2, fp]
   13b00:	adds	r3, r3, #0
   13b04:	movne	r3, #1
   13b08:	cmp	r3, #0
   13b0c:	bne	1378c <close_stdout@@Base+0x994>
   13b10:	ldr	r3, [sp, #160]	; 0xa0
   13b14:	cmp	r9, #0
   13b18:	cmpeq	r3, #2
   13b1c:	bne	13b2c <close_stdout@@Base+0xd34>
   13b20:	ldr	r0, [sp, #36]	; 0x24
   13b24:	cmp	r0, #0
   13b28:	bne	13bcc <close_stdout@@Base+0xdd4>
   13b2c:	ldr	r1, [sp, #36]	; 0x24
   13b30:	ldr	r2, [sp, #52]	; 0x34
   13b34:	eor	r3, r1, #1
   13b38:	cmp	r2, #0
   13b3c:	moveq	r3, #0
   13b40:	andne	r3, r3, #1
   13b44:	cmp	r3, #0
   13b48:	beq	13b74 <close_stdout@@Base+0xd7c>
   13b4c:	ldrb	r3, [r2]
   13b50:	cmp	r3, #0
   13b54:	beq	13b74 <close_stdout@@Base+0xd7c>
   13b58:	ldr	r1, [sp, #40]	; 0x28
   13b5c:	cmp	sl, r9
   13b60:	strbhi	r3, [r1, r9]
   13b64:	ldrb	r3, [r2, #1]!
   13b68:	add	r9, r9, #1
   13b6c:	cmp	r3, #0
   13b70:	bne	13b5c <close_stdout@@Base+0xd64>
   13b74:	cmp	r9, sl
   13b78:	movcs	r0, r9
   13b7c:	ldrcc	r1, [sp, #40]	; 0x28
   13b80:	movcc	r3, #0
   13b84:	movcc	r0, r9
   13b88:	strbcc	r3, [r1, r9]
   13b8c:	b	13c08 <close_stdout@@Base+0xe10>
   13b90:	cmn	r8, #1
   13b94:	beq	1425c <close_stdout@@Base+0x1464>
   13b98:	subs	r3, r8, #1
   13b9c:	movne	r3, #1
   13ba0:	cmp	r3, #0
   13ba4:	bne	13a84 <close_stdout@@Base+0xc8c>
   13ba8:	cmp	fp, #0
   13bac:	bne	13a84 <close_stdout@@Base+0xc8c>
   13bb0:	ldr	r3, [sp, #36]	; 0x24
   13bb4:	ldr	r0, [sp, #160]	; 0xa0
   13bb8:	cmp	r0, #2
   13bbc:	movne	r3, #0
   13bc0:	andeq	r3, r3, #1
   13bc4:	cmp	r3, #0
   13bc8:	beq	13a84 <close_stdout@@Base+0xc8c>
   13bcc:	ldr	r2, [sp, #164]	; 0xa4
   13bd0:	mov	ip, #0
   13bd4:	ldr	r0, [sp, #160]	; 0xa0
   13bd8:	bic	r3, r2, #2
   13bdc:	ldr	r1, [sp, #72]	; 0x48
   13be0:	ldr	r2, [sp, #68]	; 0x44
   13be4:	stm	sp, {r0, r3}
   13be8:	mov	r3, r8
   13bec:	str	r1, [sp, #12]
   13bf0:	mov	r1, sl
   13bf4:	str	r2, [sp, #16]
   13bf8:	ldr	r0, [sp, #40]	; 0x28
   13bfc:	ldr	r2, [sp, #32]
   13c00:	str	ip, [sp, #8]
   13c04:	bl	1369c <close_stdout@@Base+0x8a4>
   13c08:	ldr	r1, [sp, #56]	; 0x38
   13c0c:	ldr	r2, [sp, #116]	; 0x74
   13c10:	ldr	r3, [r1]
   13c14:	cmp	r2, r3
   13c18:	bne	1434c <close_stdout@@Base+0x1554>
   13c1c:	add	sp, sp, #124	; 0x7c
   13c20:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c24:	mov	r3, #114	; 0x72
   13c28:	ldr	r2, [sp, #36]	; 0x24
   13c2c:	ldr	r0, [sp, #160]	; 0xa0
   13c30:	cmp	r0, #2
   13c34:	movne	r2, #0
   13c38:	andeq	r2, r2, #1
   13c3c:	cmp	r2, #0
   13c40:	bne	13bcc <close_stdout@@Base+0xdd4>
   13c44:	ldr	r1, [sp, #24]
   13c48:	cmp	r1, #0
   13c4c:	beq	13a84 <close_stdout@@Base+0xc8c>
   13c50:	mov	r4, r3
   13c54:	b	13abc <close_stdout@@Base+0xcc4>
   13c58:	mov	r3, #98	; 0x62
   13c5c:	b	13c44 <close_stdout@@Base+0xe4c>
   13c60:	mov	r3, #102	; 0x66
   13c64:	b	13c44 <close_stdout@@Base+0xe4c>
   13c68:	mov	r3, #118	; 0x76
   13c6c:	b	13c44 <close_stdout@@Base+0xe4c>
   13c70:	mov	r3, #97	; 0x61
   13c74:	b	13c44 <close_stdout@@Base+0xe4c>
   13c78:	mov	r3, #110	; 0x6e
   13c7c:	b	13c28 <close_stdout@@Base+0xe30>
   13c80:	mov	r3, #116	; 0x74
   13c84:	b	13c28 <close_stdout@@Base+0xe30>
   13c88:	ldr	r2, [sp, #24]
   13c8c:	cmp	r2, #0
   13c90:	beq	14238 <close_stdout@@Base+0x1440>
   13c94:	ldr	r3, [sp, #36]	; 0x24
   13c98:	cmp	r3, #0
   13c9c:	bne	13bcc <close_stdout@@Base+0xdd4>
   13ca0:	cmp	r9, sl
   13ca4:	add	r2, r9, #1
   13ca8:	ldrcc	r0, [sp, #40]	; 0x28
   13cac:	movcc	r3, #92	; 0x5c
   13cb0:	strbcc	r3, [r0, r9]
   13cb4:	add	r3, fp, #1
   13cb8:	cmp	r8, r3
   13cbc:	bls	13cfc <close_stdout@@Base+0xf04>
   13cc0:	ldr	r1, [sp, #32]
   13cc4:	ldrb	r3, [r1, r3]
   13cc8:	sub	r3, r3, #48	; 0x30
   13ccc:	cmp	r3, #9
   13cd0:	bhi	13cfc <close_stdout@@Base+0xf04>
   13cd4:	cmp	sl, r2
   13cd8:	ldrhi	r0, [sp, #40]	; 0x28
   13cdc:	movhi	r3, #48	; 0x30
   13ce0:	strbhi	r3, [r0, r2]
   13ce4:	add	r3, r9, #2
   13ce8:	cmp	sl, r3
   13cec:	ldrhi	r1, [sp, #40]	; 0x28
   13cf0:	movhi	r2, #48	; 0x30
   13cf4:	strbhi	r2, [r1, r3]
   13cf8:	add	r2, r9, #3
   13cfc:	mov	r9, r2
   13d00:	mov	r4, #48	; 0x30
   13d04:	b	13a90 <close_stdout@@Base+0xc98>
   13d08:	ldr	r1, [sp, #76]	; 0x4c
   13d0c:	cmp	r1, #0
   13d10:	beq	13d1c <close_stdout@@Base+0xf24>
   13d14:	cmp	r7, #0
   13d18:	bne	13adc <close_stdout@@Base+0xce4>
   13d1c:	mov	r3, r4
   13d20:	b	13c28 <close_stdout@@Base+0xe30>
   13d24:	ldr	r1, [sp, #160]	; 0xa0
   13d28:	cmp	r1, #2
   13d2c:	bne	13a84 <close_stdout@@Base+0xc8c>
   13d30:	ldr	r2, [sp, #36]	; 0x24
   13d34:	cmp	r2, #0
   13d38:	bne	13bcc <close_stdout@@Base+0xdd4>
   13d3c:	cmp	r9, sl
   13d40:	ldrcc	r0, [sp, #40]	; 0x28
   13d44:	movcc	r3, #39	; 0x27
   13d48:	strbcc	r3, [r0, r9]
   13d4c:	add	r3, r9, #1
   13d50:	cmp	sl, r3
   13d54:	ldrhi	r1, [sp, #40]	; 0x28
   13d58:	movhi	r2, #92	; 0x5c
   13d5c:	strbhi	r2, [r1, r3]
   13d60:	add	r3, r9, #2
   13d64:	cmp	sl, r3
   13d68:	add	r9, r9, #3
   13d6c:	ldrhi	r0, [sp, #40]	; 0x28
   13d70:	movhi	r2, #39	; 0x27
   13d74:	strbhi	r2, [r0, r3]
   13d78:	b	13a84 <close_stdout@@Base+0xc8c>
   13d7c:	ldr	r1, [sp, #64]	; 0x40
   13d80:	cmp	r1, #1
   13d84:	bne	1407c <close_stdout@@Base+0x1284>
   13d88:	bl	11448 <__ctype_b_loc@plt>
   13d8c:	ldr	r2, [sp, #64]	; 0x40
   13d90:	sxth	r3, r4
   13d94:	str	r2, [sp, #60]	; 0x3c
   13d98:	lsl	r3, r3, #1
   13d9c:	ldr	r2, [r0]
   13da0:	ldrh	r2, [r2, r3]
   13da4:	eor	r2, r2, #16384	; 0x4000
   13da8:	ubfx	r2, r2, #14, #1
   13dac:	ldr	r1, [sp, #24]
   13db0:	ands	r2, r2, r1
   13db4:	beq	13a84 <close_stdout@@Base+0xc8c>
   13db8:	ldr	r3, [sp, #60]	; 0x3c
   13dbc:	mov	r0, #92	; 0x5c
   13dc0:	ldr	r7, [sp, #36]	; 0x24
   13dc4:	add	r1, r3, fp
   13dc8:	str	r8, [sp, #60]	; 0x3c
   13dcc:	ldr	r3, [sp, #40]	; 0x28
   13dd0:	b	13e34 <close_stdout@@Base+0x103c>
   13dd4:	cmp	r7, #0
   13dd8:	bne	14274 <close_stdout@@Base+0x147c>
   13ddc:	add	ip, r9, #1
   13de0:	cmp	r9, sl
   13de4:	strbcc	r0, [r3, r9]
   13de8:	cmp	sl, ip
   13dec:	lsrhi	r8, r4, #6
   13df0:	addhi	r8, r8, #48	; 0x30
   13df4:	strbhi	r8, [r3, ip]
   13df8:	add	ip, r9, #2
   13dfc:	add	r9, r9, #3
   13e00:	cmp	sl, ip
   13e04:	ubfxhi	r8, r4, #3, #3
   13e08:	and	r4, r4, #7
   13e0c:	add	r4, r4, #48	; 0x30
   13e10:	addhi	r8, r8, #48	; 0x30
   13e14:	strbhi	r8, [r3, ip]
   13e18:	add	fp, fp, #1
   13e1c:	cmp	r1, fp
   13e20:	bls	13e60 <close_stdout@@Base+0x1068>
   13e24:	cmp	r9, sl
   13e28:	strbcc	r4, [r3, r9]
   13e2c:	ldrb	r4, [r5, #1]!
   13e30:	add	r9, r9, #1
   13e34:	cmp	r2, #0
   13e38:	bne	13dd4 <close_stdout@@Base+0xfdc>
   13e3c:	cmp	r6, #0
   13e40:	beq	13e18 <close_stdout@@Base+0x1020>
   13e44:	add	fp, fp, #1
   13e48:	cmp	r9, sl
   13e4c:	strbcc	r0, [r3, r9]
   13e50:	cmp	r1, fp
   13e54:	add	r9, r9, #1
   13e58:	mov	r6, #0
   13e5c:	bhi	13e24 <close_stdout@@Base+0x102c>
   13e60:	ldr	r8, [sp, #60]	; 0x3c
   13e64:	b	13ae0 <close_stdout@@Base+0xce8>
   13e68:	ldr	r3, [sp, #36]	; 0x24
   13e6c:	cmp	r3, #0
   13e70:	bne	14374 <close_stdout@@Base+0x157c>
   13e74:	cmp	sl, #0
   13e78:	beq	1428c <close_stdout@@Base+0x1494>
   13e7c:	ldr	r1, [sp, #40]	; 0x28
   13e80:	mov	r0, #1
   13e84:	ldr	r2, [pc, #1296]	; 1439c <close_stdout@@Base+0x15a4>
   13e88:	mov	r3, #34	; 0x22
   13e8c:	str	r0, [sp, #24]
   13e90:	mov	r9, r0
   13e94:	add	r2, pc, r2
   13e98:	str	r0, [sp, #28]
   13e9c:	strb	r3, [r1]
   13ea0:	str	r2, [sp, #52]	; 0x34
   13ea4:	b	13750 <close_stdout@@Base+0x958>
   13ea8:	ldr	r3, [pc, #1264]	; 143a0 <close_stdout@@Base+0x15a8>
   13eac:	mov	r2, #1
   13eb0:	mov	r0, #3
   13eb4:	str	r2, [sp, #36]	; 0x24
   13eb8:	add	r3, pc, r3
   13ebc:	str	r2, [sp, #24]
   13ec0:	str	r3, [sp, #52]	; 0x34
   13ec4:	mov	r9, #0
   13ec8:	str	r2, [sp, #28]
   13ecc:	str	r0, [sp, #160]	; 0xa0
   13ed0:	b	13750 <close_stdout@@Base+0x958>
   13ed4:	mov	r0, #0
   13ed8:	mov	r1, #1
   13edc:	str	r0, [sp, #36]	; 0x24
   13ee0:	mov	r9, r0
   13ee4:	str	r1, [sp, #24]
   13ee8:	str	r0, [sp, #28]
   13eec:	str	r0, [sp, #52]	; 0x34
   13ef0:	b	13750 <close_stdout@@Base+0x958>
   13ef4:	ldr	r3, [sp, #160]	; 0xa0
   13ef8:	cmp	r3, #8
   13efc:	beq	13f28 <close_stdout@@Base+0x1130>
   13f00:	ldr	r0, [pc, #1180]	; 143a4 <close_stdout@@Base+0x15ac>
   13f04:	mov	r1, r3
   13f08:	add	r0, pc, r0
   13f0c:	bl	13538 <close_stdout@@Base+0x740>
   13f10:	ldr	r1, [sp, #160]	; 0xa0
   13f14:	str	r0, [sp, #72]	; 0x48
   13f18:	ldr	r0, [pc, #1160]	; 143a8 <close_stdout@@Base+0x15b0>
   13f1c:	add	r0, pc, r0
   13f20:	bl	13538 <close_stdout@@Base+0x740>
   13f24:	str	r0, [sp, #68]	; 0x44
   13f28:	ldr	r0, [sp, #36]	; 0x24
   13f2c:	cmp	r0, #0
   13f30:	movne	r9, #0
   13f34:	bne	13f6c <close_stdout@@Base+0x1174>
   13f38:	ldr	r1, [sp, #72]	; 0x48
   13f3c:	ldrb	r3, [r1]
   13f40:	cmp	r3, #0
   13f44:	beq	14344 <close_stdout@@Base+0x154c>
   13f48:	mov	r2, r1
   13f4c:	ldr	r1, [sp, #40]	; 0x28
   13f50:	mov	r9, r0
   13f54:	cmp	r9, sl
   13f58:	strbcc	r3, [r1, r9]
   13f5c:	ldrb	r3, [r2, #1]!
   13f60:	add	r9, r9, #1
   13f64:	cmp	r3, #0
   13f68:	bne	13f54 <close_stdout@@Base+0x115c>
   13f6c:	ldr	r0, [sp, #68]	; 0x44
   13f70:	str	r0, [sp, #52]	; 0x34
   13f74:	bl	11364 <strlen@plt>
   13f78:	mov	r2, #1
   13f7c:	str	r2, [sp, #24]
   13f80:	str	r0, [sp, #28]
   13f84:	b	13750 <close_stdout@@Base+0x958>
   13f88:	ldr	r3, [pc, #1052]	; 143ac <close_stdout@@Base+0x15b4>
   13f8c:	mov	r2, #0
   13f90:	mov	r1, #1
   13f94:	mov	r0, #2
   13f98:	add	r3, pc, r3
   13f9c:	str	r1, [sp, #36]	; 0x24
   13fa0:	str	r2, [sp, #24]
   13fa4:	mov	r9, r2
   13fa8:	str	r1, [sp, #28]
   13fac:	str	r3, [sp, #52]	; 0x34
   13fb0:	str	r0, [sp, #160]	; 0xa0
   13fb4:	b	13750 <close_stdout@@Base+0x958>
   13fb8:	ldr	r3, [sp, #36]	; 0x24
   13fbc:	cmp	r3, #0
   13fc0:	bne	14350 <close_stdout@@Base+0x1558>
   13fc4:	cmp	sl, #0
   13fc8:	beq	142ac <close_stdout@@Base+0x14b4>
   13fcc:	ldr	r1, [sp, #40]	; 0x28
   13fd0:	mov	r3, #39	; 0x27
   13fd4:	ldr	r2, [sp, #36]	; 0x24
   13fd8:	mov	r0, #1
   13fdc:	mov	r9, r0
   13fe0:	str	r0, [sp, #28]
   13fe4:	strb	r3, [r1]
   13fe8:	ldr	r3, [pc, #960]	; 143b0 <close_stdout@@Base+0x15b8>
   13fec:	str	r2, [sp, #24]
   13ff0:	add	r3, pc, r3
   13ff4:	str	r3, [sp, #52]	; 0x34
   13ff8:	b	13750 <close_stdout@@Base+0x958>
   13ffc:	ldr	r2, [sp, #28]
   14000:	cmp	r2, #1
   14004:	add	r4, fp, r2
   14008:	movls	r3, #0
   1400c:	movhi	r3, #1
   14010:	cmn	r8, #1
   14014:	movne	r3, #0
   14018:	cmp	r3, #0
   1401c:	beq	1402c <close_stdout@@Base+0x1234>
   14020:	ldr	r0, [sp, #32]
   14024:	bl	11364 <strlen@plt>
   14028:	mov	r8, r0
   1402c:	cmp	r8, r4
   14030:	ldrcc	r3, [sp, #32]
   14034:	movcc	r6, #0
   14038:	addcc	r5, r3, fp
   1403c:	bcc	137ac <close_stdout@@Base+0x9b4>
   14040:	ldr	r0, [sp, #32]
   14044:	ldr	r1, [sp, #52]	; 0x34
   14048:	add	r5, r0, fp
   1404c:	ldr	r2, [sp, #28]
   14050:	mov	r0, r5
   14054:	bl	11214 <memcmp@plt>
   14058:	cmp	r0, #0
   1405c:	bne	14074 <close_stdout@@Base+0x127c>
   14060:	ldr	r1, [sp, #36]	; 0x24
   14064:	cmp	r1, #0
   14068:	bne	13bcc <close_stdout@@Base+0xdd4>
   1406c:	mov	r6, #1
   14070:	b	137ac <close_stdout@@Base+0x9b4>
   14074:	mov	r6, #0
   14078:	b	137ac <close_stdout@@Base+0x9b4>
   1407c:	add	r7, sp, #108	; 0x6c
   14080:	cmn	r8, #1
   14084:	mov	r3, #0
   14088:	str	r3, [sp, #108]	; 0x6c
   1408c:	str	r3, [r7, #4]
   14090:	beq	1427c <close_stdout@@Base+0x1484>
   14094:	mov	r1, #0
   14098:	ldr	r0, [sp, #32]
   1409c:	mov	ip, #1
   140a0:	str	r9, [sp, #88]	; 0x58
   140a4:	str	r6, [sp, #96]	; 0x60
   140a8:	mov	r9, r1
   140ac:	str	r5, [sp, #100]	; 0x64
   140b0:	mov	r6, ip
   140b4:	mov	r5, r7
   140b8:	add	r3, sp, #104	; 0x68
   140bc:	sub	r0, r0, #1
   140c0:	str	r3, [sp, #80]	; 0x50
   140c4:	str	r0, [sp, #84]	; 0x54
   140c8:	str	r1, [sp, #60]	; 0x3c
   140cc:	str	r4, [sp, #92]	; 0x5c
   140d0:	ldr	r2, [sp, #32]
   140d4:	add	r7, r9, fp
   140d8:	add	r0, sp, #104	; 0x68
   140dc:	mov	r3, r5
   140e0:	add	r4, r2, r7
   140e4:	rsb	r2, r7, r8
   140e8:	mov	r1, r4
   140ec:	bl	112ec <mbrtowc@plt>
   140f0:	subs	r2, r0, #0
   140f4:	beq	14200 <close_stdout@@Base+0x1408>
   140f8:	cmn	r2, #1
   140fc:	beq	14328 <close_stdout@@Base+0x1530>
   14100:	cmn	r2, #2
   14104:	beq	142cc <close_stdout@@Base+0x14d4>
   14108:	ldr	r3, [sp, #36]	; 0x24
   1410c:	ldr	r0, [sp, #160]	; 0xa0
   14110:	cmp	r0, #2
   14114:	movne	r3, #0
   14118:	andeq	r3, r3, #1
   1411c:	cmp	r3, #0
   14120:	beq	141dc <close_stdout@@Base+0x13e4>
   14124:	cmp	r2, #1
   14128:	beq	141dc <close_stdout@@Base+0x13e4>
   1412c:	ldr	r1, [sp, #84]	; 0x54
   14130:	add	r3, r1, r2
   14134:	add	r7, r3, r7
   14138:	ldrb	r3, [r4, #1]!
   1413c:	sub	r3, r3, #91	; 0x5b
   14140:	cmp	r3, #33	; 0x21
   14144:	addls	pc, pc, r3, lsl #2
   14148:	b	141d4 <close_stdout@@Base+0x13dc>
   1414c:	b	13bcc <close_stdout@@Base+0xdd4>
   14150:	b	13bcc <close_stdout@@Base+0xdd4>
   14154:	b	141d4 <close_stdout@@Base+0x13dc>
   14158:	b	13bcc <close_stdout@@Base+0xdd4>
   1415c:	b	141d4 <close_stdout@@Base+0x13dc>
   14160:	b	13bcc <close_stdout@@Base+0xdd4>
   14164:	b	141d4 <close_stdout@@Base+0x13dc>
   14168:	b	141d4 <close_stdout@@Base+0x13dc>
   1416c:	b	141d4 <close_stdout@@Base+0x13dc>
   14170:	b	141d4 <close_stdout@@Base+0x13dc>
   14174:	b	141d4 <close_stdout@@Base+0x13dc>
   14178:	b	141d4 <close_stdout@@Base+0x13dc>
   1417c:	b	141d4 <close_stdout@@Base+0x13dc>
   14180:	b	141d4 <close_stdout@@Base+0x13dc>
   14184:	b	141d4 <close_stdout@@Base+0x13dc>
   14188:	b	141d4 <close_stdout@@Base+0x13dc>
   1418c:	b	141d4 <close_stdout@@Base+0x13dc>
   14190:	b	141d4 <close_stdout@@Base+0x13dc>
   14194:	b	141d4 <close_stdout@@Base+0x13dc>
   14198:	b	141d4 <close_stdout@@Base+0x13dc>
   1419c:	b	141d4 <close_stdout@@Base+0x13dc>
   141a0:	b	141d4 <close_stdout@@Base+0x13dc>
   141a4:	b	141d4 <close_stdout@@Base+0x13dc>
   141a8:	b	141d4 <close_stdout@@Base+0x13dc>
   141ac:	b	141d4 <close_stdout@@Base+0x13dc>
   141b0:	b	141d4 <close_stdout@@Base+0x13dc>
   141b4:	b	141d4 <close_stdout@@Base+0x13dc>
   141b8:	b	141d4 <close_stdout@@Base+0x13dc>
   141bc:	b	141d4 <close_stdout@@Base+0x13dc>
   141c0:	b	141d4 <close_stdout@@Base+0x13dc>
   141c4:	b	141d4 <close_stdout@@Base+0x13dc>
   141c8:	b	141d4 <close_stdout@@Base+0x13dc>
   141cc:	b	141d4 <close_stdout@@Base+0x13dc>
   141d0:	b	13bcc <close_stdout@@Base+0xdd4>
   141d4:	cmp	r4, r7
   141d8:	bne	14138 <close_stdout@@Base+0x1340>
   141dc:	ldr	r0, [sp, #104]	; 0x68
   141e0:	add	r9, r9, r2
   141e4:	bl	114f0 <iswprint@plt>
   141e8:	cmp	r0, #0
   141ec:	mov	r0, r5
   141f0:	moveq	r6, #0
   141f4:	bl	113a0 <mbsinit@plt>
   141f8:	cmp	r0, #0
   141fc:	beq	140d0 <close_stdout@@Base+0x12d8>
   14200:	mov	ip, r6
   14204:	eor	r2, ip, #1
   14208:	str	r9, [sp, #60]	; 0x3c
   1420c:	ldr	r4, [sp, #92]	; 0x5c
   14210:	uxtb	r2, r2
   14214:	ldr	r9, [sp, #88]	; 0x58
   14218:	ldr	r6, [sp, #96]	; 0x60
   1421c:	ldr	r5, [sp, #100]	; 0x64
   14220:	ldr	r3, [sp, #60]	; 0x3c
   14224:	cmp	r3, #1
   14228:	bls	13dac <close_stdout@@Base+0xfb4>
   1422c:	ldr	r0, [sp, #24]
   14230:	and	r2, r2, r0
   14234:	b	13db8 <close_stdout@@Base+0xfc0>
   14238:	ldr	r2, [sp, #164]	; 0xa4
   1423c:	tst	r2, #1
   14240:	addne	fp, fp, #1
   14244:	bne	13774 <close_stdout@@Base+0x97c>
   14248:	b	13a84 <close_stdout@@Base+0xc8c>
   1424c:	ldr	r0, [sp, #36]	; 0x24
   14250:	cmp	r0, #0
   14254:	beq	13a84 <close_stdout@@Base+0xc8c>
   14258:	b	13bcc <close_stdout@@Base+0xdd4>
   1425c:	ldr	r2, [sp, #32]
   14260:	ldrb	r3, [r2, #1]
   14264:	adds	r3, r3, #0
   14268:	movne	r3, #1
   1426c:	b	13ba0 <close_stdout@@Base+0xda8>
   14270:	bl	11208 <abort@plt>
   14274:	ldr	r8, [sp, #60]	; 0x3c
   14278:	b	13bcc <close_stdout@@Base+0xdd4>
   1427c:	ldr	r0, [sp, #32]
   14280:	bl	11364 <strlen@plt>
   14284:	mov	r8, r0
   14288:	b	14094 <close_stdout@@Base+0x129c>
   1428c:	ldr	r2, [pc, #288]	; 143b4 <close_stdout@@Base+0x15bc>
   14290:	mov	r1, #1
   14294:	mov	r9, r1
   14298:	str	r1, [sp, #24]
   1429c:	add	r2, pc, r2
   142a0:	str	r1, [sp, #28]
   142a4:	str	r2, [sp, #52]	; 0x34
   142a8:	b	13750 <close_stdout@@Base+0x958>
   142ac:	ldr	r2, [pc, #260]	; 143b8 <close_stdout@@Base+0x15c0>
   142b0:	mov	r3, #1
   142b4:	mov	r9, r3
   142b8:	str	r3, [sp, #28]
   142bc:	add	r2, pc, r2
   142c0:	str	sl, [sp, #24]
   142c4:	str	r2, [sp, #52]	; 0x34
   142c8:	b	13750 <close_stdout@@Base+0x958>
   142cc:	cmp	r8, r7
   142d0:	str	r9, [sp, #60]	; 0x3c
   142d4:	mov	ip, r4
   142d8:	ldr	r6, [sp, #96]	; 0x60
   142dc:	ldr	r9, [sp, #88]	; 0x58
   142e0:	ldr	r4, [sp, #92]	; 0x5c
   142e4:	ldr	r5, [sp, #100]	; 0x64
   142e8:	bls	14320 <close_stdout@@Base+0x1528>
   142ec:	ldrb	r3, [ip]
   142f0:	cmp	r3, #0
   142f4:	beq	14320 <close_stdout@@Base+0x1528>
   142f8:	ldr	r3, [sp, #60]	; 0x3c
   142fc:	b	1430c <close_stdout@@Base+0x1514>
   14300:	ldrb	r2, [r5, r3]
   14304:	cmp	r2, #0
   14308:	beq	1431c <close_stdout@@Base+0x1524>
   1430c:	add	r3, r3, #1
   14310:	add	r2, fp, r3
   14314:	cmp	r8, r2
   14318:	bhi	14300 <close_stdout@@Base+0x1508>
   1431c:	str	r3, [sp, #60]	; 0x3c
   14320:	mov	r2, #1
   14324:	b	14220 <close_stdout@@Base+0x1428>
   14328:	str	r9, [sp, #60]	; 0x3c
   1432c:	mov	r2, #1
   14330:	ldr	r4, [sp, #92]	; 0x5c
   14334:	ldr	r6, [sp, #96]	; 0x60
   14338:	ldr	r9, [sp, #88]	; 0x58
   1433c:	ldr	r5, [sp, #100]	; 0x64
   14340:	b	14220 <close_stdout@@Base+0x1428>
   14344:	ldr	r9, [sp, #36]	; 0x24
   14348:	b	13f6c <close_stdout@@Base+0x1174>
   1434c:	bl	11484 <__stack_chk_fail@plt>
   14350:	ldr	r1, [pc, #100]	; 143bc <close_stdout@@Base+0x15c4>
   14354:	mov	r3, #0
   14358:	mov	r0, #1
   1435c:	str	r3, [sp, #24]
   14360:	add	r1, pc, r1
   14364:	str	r0, [sp, #28]
   14368:	mov	r9, r3
   1436c:	str	r1, [sp, #52]	; 0x34
   14370:	b	13750 <close_stdout@@Base+0x958>
   14374:	ldr	r0, [pc, #68]	; 143c0 <close_stdout@@Base+0x15c8>
   14378:	mov	r3, #1
   1437c:	mov	r9, #0
   14380:	str	r3, [sp, #24]
   14384:	add	r0, pc, r0
   14388:	str	r3, [sp, #28]
   1438c:	str	r0, [sp, #52]	; 0x34
   14390:	b	13750 <close_stdout@@Base+0x958>
   14394:	andeq	r4, r1, r0, asr #18
   14398:	andeq	r0, r0, r4, lsr r1
   1439c:	andeq	r3, r0, r8, ror #8
   143a0:	andeq	r3, r0, r4, asr #8
   143a4:	andeq	r3, r0, r0, lsl #8
   143a8:	ldrdeq	r3, [r0], -ip
   143ac:	andeq	r3, r0, r0, ror #6
   143b0:	andeq	r3, r0, r8, lsl #6
   143b4:	andeq	r3, r0, r0, rrx
   143b8:	andeq	r3, r0, ip, lsr r0
   143bc:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   143c0:	andeq	r2, r0, r8, ror pc
   143c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   143c8:	sub	sp, sp, #44	; 0x2c
   143cc:	mov	r6, r0
   143d0:	mov	r9, r1
   143d4:	mov	sl, r2
   143d8:	mov	r4, r3
   143dc:	bl	11520 <__errno_location@plt>
   143e0:	ldr	fp, [pc, #412]	; 14584 <close_stdout@@Base+0x178c>
   143e4:	cmp	r6, #0
   143e8:	add	fp, pc, fp
   143ec:	ldr	r5, [fp]
   143f0:	ldr	r1, [r0]
   143f4:	mov	r8, r0
   143f8:	str	r1, [sp, #36]	; 0x24
   143fc:	blt	1457c <close_stdout@@Base+0x1784>
   14400:	ldr	r3, [pc, #384]	; 14588 <close_stdout@@Base+0x1790>
   14404:	add	r3, pc, r3
   14408:	ldr	r3, [r3]
   1440c:	cmp	r6, r3
   14410:	bcc	14464 <close_stdout@@Base+0x166c>
   14414:	add	r7, r6, #1
   14418:	cmn	r7, #-536870911	; 0xe0000001
   1441c:	bhi	14580 <close_stdout@@Base+0x1788>
   14420:	add	r3, fp, #4
   14424:	cmp	r5, r3
   14428:	beq	14554 <close_stdout@@Base+0x175c>
   1442c:	mov	r0, r5
   14430:	lsl	r1, r7, #3
   14434:	bl	15268 <close_stdout@@Base+0x2470>
   14438:	mov	r5, r0
   1443c:	str	r0, [fp]
   14440:	ldr	fp, [pc, #324]	; 1458c <close_stdout@@Base+0x1794>
   14444:	mov	r1, #0
   14448:	add	fp, pc, fp
   1444c:	ldr	r0, [fp]
   14450:	rsb	r2, r0, r7
   14454:	add	r0, r5, r0, lsl #3
   14458:	lsl	r2, r2, #3
   1445c:	bl	112bc <memset@plt>
   14460:	str	r7, [fp]
   14464:	add	r2, r4, #8
   14468:	str	r2, [sp, #32]
   1446c:	ldr	r1, [r4]
   14470:	add	fp, r5, r6, lsl #3
   14474:	ldr	lr, [sp, #32]
   14478:	mov	r2, r9
   1447c:	ldr	r3, [r4, #4]
   14480:	ldr	ip, [r5, r6, lsl #3]
   14484:	ldr	r7, [fp, #4]
   14488:	orr	r3, r3, #1
   1448c:	str	r1, [sp]
   14490:	str	r3, [sp, #4]
   14494:	mov	r1, ip
   14498:	str	lr, [sp, #8]
   1449c:	mov	r0, r7
   144a0:	ldr	lr, [r4, #40]	; 0x28
   144a4:	str	r3, [sp, #28]
   144a8:	mov	r3, sl
   144ac:	str	lr, [sp, #12]
   144b0:	ldr	lr, [r4, #44]	; 0x2c
   144b4:	str	ip, [sp, #24]
   144b8:	str	lr, [sp, #16]
   144bc:	bl	1369c <close_stdout@@Base+0x8a4>
   144c0:	ldr	ip, [sp, #24]
   144c4:	cmp	ip, r0
   144c8:	bhi	14540 <close_stdout@@Base+0x1748>
   144cc:	ldr	r3, [pc, #188]	; 14590 <close_stdout@@Base+0x1798>
   144d0:	add	r1, r0, #1
   144d4:	str	r1, [r5, r6, lsl #3]
   144d8:	add	r3, pc, r3
   144dc:	cmp	r7, r3
   144e0:	beq	144f4 <close_stdout@@Base+0x16fc>
   144e4:	mov	r0, r7
   144e8:	str	r1, [sp, #24]
   144ec:	bl	11310 <free@plt>
   144f0:	ldr	r1, [sp, #24]
   144f4:	mov	r0, r1
   144f8:	str	r1, [sp, #24]
   144fc:	bl	15210 <close_stdout@@Base+0x2418>
   14500:	ldr	r3, [sp, #28]
   14504:	ldr	lr, [sp, #32]
   14508:	mov	r2, r9
   1450c:	str	r0, [fp, #4]
   14510:	mov	r7, r0
   14514:	ldr	ip, [r4]
   14518:	str	r3, [sp, #4]
   1451c:	mov	r3, sl
   14520:	str	lr, [sp, #8]
   14524:	str	ip, [sp]
   14528:	ldr	ip, [r4, #40]	; 0x28
   1452c:	ldr	r1, [sp, #24]
   14530:	str	ip, [sp, #12]
   14534:	ldr	ip, [r4, #44]	; 0x2c
   14538:	str	ip, [sp, #16]
   1453c:	bl	1369c <close_stdout@@Base+0x8a4>
   14540:	ldr	r1, [sp, #36]	; 0x24
   14544:	mov	r0, r7
   14548:	str	r1, [r8]
   1454c:	add	sp, sp, #44	; 0x2c
   14550:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14554:	lsl	r1, r7, #3
   14558:	mov	r0, #0
   1455c:	str	r3, [sp, #24]
   14560:	bl	15268 <close_stdout@@Base+0x2470>
   14564:	ldr	r3, [sp, #24]
   14568:	mov	r5, r0
   1456c:	ldm	r3, {r0, r1}
   14570:	str	r5, [fp]
   14574:	stm	r5, {r0, r1}
   14578:	b	14440 <close_stdout@@Base+0x1648>
   1457c:	bl	11208 <abort@plt>
   14580:	bl	15424 <close_stdout@@Base+0x262c>
   14584:			; <UNDEFINED> instruction: 0x00013db0
   14588:	andeq	r3, r1, r0, ror #26
   1458c:	andeq	r3, r1, ip, lsl sp
   14590:	andeq	r3, r1, ip, ror #25
   14594:	push	{r4, r5, r6, lr}
   14598:	mov	r5, r0
   1459c:	bl	11520 <__errno_location@plt>
   145a0:	cmp	r5, #0
   145a4:	mov	r1, #48	; 0x30
   145a8:	mov	r4, r0
   145ac:	ldr	r0, [pc, #24]	; 145cc <close_stdout@@Base+0x17d4>
   145b0:	ldr	r6, [r4]
   145b4:	add	r0, pc, r0
   145b8:	add	r0, r0, #256	; 0x100
   145bc:	movne	r0, r5
   145c0:	bl	153e4 <close_stdout@@Base+0x25ec>
   145c4:	str	r6, [r4]
   145c8:	pop	{r4, r5, r6, pc}
   145cc:	andeq	r3, r1, r0, lsl ip
   145d0:	cmp	r0, #0
   145d4:	beq	145e0 <close_stdout@@Base+0x17e8>
   145d8:	ldr	r0, [r0]
   145dc:	bx	lr
   145e0:	ldr	r0, [pc, #12]	; 145f4 <close_stdout@@Base+0x17fc>
   145e4:	add	r0, pc, r0
   145e8:	add	r0, r0, #256	; 0x100
   145ec:	ldr	r0, [r0]
   145f0:	bx	lr
   145f4:	andeq	r3, r1, r0, ror #23
   145f8:	cmp	r0, #0
   145fc:	beq	14608 <close_stdout@@Base+0x1810>
   14600:	str	r1, [r0]
   14604:	bx	lr
   14608:	ldr	r0, [pc, #12]	; 1461c <close_stdout@@Base+0x1824>
   1460c:	add	r0, pc, r0
   14610:	add	r0, r0, #256	; 0x100
   14614:	str	r1, [r0]
   14618:	bx	lr
   1461c:			; <UNDEFINED> instruction: 0x00013bb8
   14620:	cmp	r0, #0
   14624:	movne	r3, r0
   14628:	beq	14658 <close_stdout@@Base+0x1860>
   1462c:	lsr	ip, r1, #5
   14630:	and	r1, r1, #31
   14634:	add	r3, r3, ip, lsl #2
   14638:	ldr	ip, [r3, #8]
   1463c:	lsr	r0, ip, r1
   14640:	eor	r2, r0, r2
   14644:	and	r0, r0, #1
   14648:	and	r2, r2, #1
   1464c:	eor	ip, ip, r2, lsl r1
   14650:	str	ip, [r3, #8]
   14654:	bx	lr
   14658:	ldr	r3, [pc, #8]	; 14668 <close_stdout@@Base+0x1870>
   1465c:	add	r3, pc, r3
   14660:	add	r3, r3, #256	; 0x100
   14664:	b	1462c <close_stdout@@Base+0x1834>
   14668:	andeq	r3, r1, r8, ror #22
   1466c:	subs	r3, r0, #0
   14670:	beq	14680 <close_stdout@@Base+0x1888>
   14674:	ldr	r0, [r3, #4]
   14678:	str	r1, [r3, #4]
   1467c:	bx	lr
   14680:	ldr	r3, [pc, #8]	; 14690 <close_stdout@@Base+0x1898>
   14684:	add	r3, pc, r3
   14688:	add	r3, r3, #256	; 0x100
   1468c:	b	14674 <close_stdout@@Base+0x187c>
   14690:	andeq	r3, r1, r0, asr #22
   14694:	cmp	r0, #0
   14698:	push	{r3, lr}
   1469c:	beq	146c0 <close_stdout@@Base+0x18c8>
   146a0:	cmp	r2, #0
   146a4:	cmpne	r1, #0
   146a8:	mov	r3, #8
   146ac:	strne	r1, [r0, #40]	; 0x28
   146b0:	str	r3, [r0]
   146b4:	strne	r2, [r0, #44]	; 0x2c
   146b8:	popne	{r3, pc}
   146bc:	bl	11208 <abort@plt>
   146c0:	ldr	r0, [pc, #8]	; 146d0 <close_stdout@@Base+0x18d8>
   146c4:	add	r0, pc, r0
   146c8:	add	r0, r0, #256	; 0x100
   146cc:	b	146a0 <close_stdout@@Base+0x18a8>
   146d0:	andeq	r3, r1, r0, lsl #22
   146d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   146d8:	sub	sp, sp, #24
   146dc:	mov	r7, r0
   146e0:	mov	sl, r1
   146e4:	ldr	r4, [sp, #56]	; 0x38
   146e8:	mov	r9, r2
   146ec:	mov	r8, r3
   146f0:	cmp	r4, #0
   146f4:	beq	14748 <close_stdout@@Base+0x1950>
   146f8:	bl	11520 <__errno_location@plt>
   146fc:	ldr	r3, [r4]
   14700:	add	lr, r4, #8
   14704:	mov	r1, sl
   14708:	mov	r2, r9
   1470c:	ldr	r6, [r0]
   14710:	mov	r5, r0
   14714:	str	r3, [sp]
   14718:	mov	r0, r7
   1471c:	ldr	ip, [r4, #4]
   14720:	mov	r3, r8
   14724:	stmib	sp, {ip, lr}
   14728:	ldr	ip, [r4, #40]	; 0x28
   1472c:	str	ip, [sp, #12]
   14730:	ldr	ip, [r4, #44]	; 0x2c
   14734:	str	ip, [sp, #16]
   14738:	bl	1369c <close_stdout@@Base+0x8a4>
   1473c:	str	r6, [r5]
   14740:	add	sp, sp, #24
   14744:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14748:	ldr	r4, [pc, #8]	; 14758 <close_stdout@@Base+0x1960>
   1474c:	add	r4, pc, r4
   14750:	add	r4, r4, #256	; 0x100
   14754:	b	146f8 <close_stdout@@Base+0x1900>
   14758:	andeq	r3, r1, r8, ror sl
   1475c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14760:	subs	r4, r3, #0
   14764:	sub	sp, sp, #36	; 0x24
   14768:	mov	r7, r0
   1476c:	mov	r6, r1
   14770:	mov	r5, r2
   14774:	beq	14830 <close_stdout@@Base+0x1a38>
   14778:	bl	11520 <__errno_location@plt>
   1477c:	ldr	r3, [r4]
   14780:	ldr	sl, [r4, #4]
   14784:	add	r9, r4, #8
   14788:	mov	r8, r0
   1478c:	mov	r0, #0
   14790:	ldr	r2, [r8]
   14794:	cmp	r5, r0
   14798:	orreq	sl, sl, #1
   1479c:	str	r9, [sp, #8]
   147a0:	mov	r1, r0
   147a4:	stm	sp, {r3, sl}
   147a8:	mov	r3, r6
   147ac:	ldr	ip, [r4, #40]	; 0x28
   147b0:	str	r2, [sp, #28]
   147b4:	mov	r2, r7
   147b8:	str	ip, [sp, #12]
   147bc:	ldr	ip, [r4, #44]	; 0x2c
   147c0:	str	ip, [sp, #16]
   147c4:	bl	1369c <close_stdout@@Base+0x8a4>
   147c8:	add	r1, r0, #1
   147cc:	mov	fp, r0
   147d0:	str	r1, [sp, #24]
   147d4:	mov	r0, r1
   147d8:	bl	15210 <close_stdout@@Base+0x2418>
   147dc:	ldr	lr, [r4]
   147e0:	str	sl, [sp, #4]
   147e4:	mov	r3, r6
   147e8:	str	r9, [sp, #8]
   147ec:	mov	r2, r7
   147f0:	str	lr, [sp]
   147f4:	ldr	lr, [r4, #40]	; 0x28
   147f8:	ldr	r1, [sp, #24]
   147fc:	str	lr, [sp, #12]
   14800:	ldr	lr, [r4, #44]	; 0x2c
   14804:	str	lr, [sp, #16]
   14808:	str	r0, [sp, #24]
   1480c:	bl	1369c <close_stdout@@Base+0x8a4>
   14810:	ldr	r3, [sp, #28]
   14814:	cmp	r5, #0
   14818:	str	r3, [r8]
   1481c:	ldr	ip, [sp, #24]
   14820:	strne	fp, [r5]
   14824:	mov	r0, ip
   14828:	add	sp, sp, #36	; 0x24
   1482c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14830:	ldr	r4, [pc, #8]	; 14840 <close_stdout@@Base+0x1a48>
   14834:	add	r4, pc, r4
   14838:	add	r4, r4, #256	; 0x100
   1483c:	b	14778 <close_stdout@@Base+0x1980>
   14840:	muleq	r1, r0, r9
   14844:	mov	r3, r2
   14848:	mov	r2, #0
   1484c:	b	1475c <close_stdout@@Base+0x1964>
   14850:	ldr	r2, [pc, #152]	; 148f0 <close_stdout@@Base+0x1af8>
   14854:	push	{r3, r4, r5, r6, r7, lr}
   14858:	add	r2, pc, r2
   1485c:	ldr	r3, [pc, #144]	; 148f4 <close_stdout@@Base+0x1afc>
   14860:	ldr	r6, [r2]
   14864:	add	r3, pc, r3
   14868:	cmp	r6, #1
   1486c:	ldr	r7, [r3]
   14870:	movhi	r4, #1
   14874:	movhi	r5, r7
   14878:	bls	14894 <close_stdout@@Base+0x1a9c>
   1487c:	ldr	r0, [r5, #12]
   14880:	add	r4, r4, #1
   14884:	bl	11310 <free@plt>
   14888:	cmp	r4, r6
   1488c:	add	r5, r5, #8
   14890:	bne	1487c <close_stdout@@Base+0x1a84>
   14894:	ldr	r4, [pc, #92]	; 148f8 <close_stdout@@Base+0x1b00>
   14898:	ldr	r0, [r7, #4]
   1489c:	add	r4, pc, r4
   148a0:	cmp	r0, r4
   148a4:	beq	148bc <close_stdout@@Base+0x1ac4>
   148a8:	bl	11310 <free@plt>
   148ac:	ldr	r3, [pc, #72]	; 148fc <close_stdout@@Base+0x1b04>
   148b0:	mov	r2, #256	; 0x100
   148b4:	add	r3, pc, r3
   148b8:	stmib	r3, {r2, r4}
   148bc:	ldr	r4, [pc, #60]	; 14900 <close_stdout@@Base+0x1b08>
   148c0:	add	r4, pc, r4
   148c4:	add	r5, r4, #4
   148c8:	cmp	r7, r5
   148cc:	beq	148dc <close_stdout@@Base+0x1ae4>
   148d0:	mov	r0, r7
   148d4:	bl	11310 <free@plt>
   148d8:	str	r5, [r4]
   148dc:	ldr	r3, [pc, #32]	; 14904 <close_stdout@@Base+0x1b0c>
   148e0:	mov	r2, #1
   148e4:	add	r3, pc, r3
   148e8:	str	r2, [r3]
   148ec:	pop	{r3, r4, r5, r6, r7, pc}
   148f0:	andeq	r3, r1, ip, lsl #18
   148f4:	andeq	r3, r1, r4, lsr r9
   148f8:	andeq	r3, r1, r8, lsr #18
   148fc:	andeq	r3, r1, r4, ror #17
   14900:	ldrdeq	r3, [r1], -r8
   14904:	andeq	r3, r1, r0, lsl #17
   14908:	ldr	r3, [pc, #12]	; 1491c <close_stdout@@Base+0x1b24>
   1490c:	mvn	r2, #0
   14910:	add	r3, pc, r3
   14914:	add	r3, r3, #256	; 0x100
   14918:	b	143c4 <close_stdout@@Base+0x15cc>
   1491c:			; <UNDEFINED> instruction: 0x000138b4
   14920:	ldr	r3, [pc, #8]	; 14930 <close_stdout@@Base+0x1b38>
   14924:	add	r3, pc, r3
   14928:	add	r3, r3, #256	; 0x100
   1492c:	b	143c4 <close_stdout@@Base+0x15cc>
   14930:	andeq	r3, r1, r0, lsr #17
   14934:	mov	r1, r0
   14938:	mov	r0, #0
   1493c:	b	14908 <close_stdout@@Base+0x1b10>
   14940:	mov	r2, r1
   14944:	mov	r1, r0
   14948:	mov	r0, #0
   1494c:	b	14920 <close_stdout@@Base+0x1b28>
   14950:	ldr	r3, [pc, #92]	; 149b4 <close_stdout@@Base+0x1bbc>
   14954:	ldr	ip, [pc, #92]	; 149b8 <close_stdout@@Base+0x1bc0>
   14958:	add	r3, pc, r3
   1495c:	push	{r4, r5, r6, r7, lr}
   14960:	sub	sp, sp, #60	; 0x3c
   14964:	ldr	r4, [r3, ip]
   14968:	add	r5, sp, #4
   1496c:	mov	r7, r2
   14970:	mov	r6, r0
   14974:	mov	r0, r5
   14978:	ldr	r3, [r4]
   1497c:	str	r3, [sp, #52]	; 0x34
   14980:	bl	134e4 <close_stdout@@Base+0x6ec>
   14984:	mov	r3, r5
   14988:	mvn	r2, #0
   1498c:	mov	r0, r6
   14990:	mov	r1, r7
   14994:	bl	143c4 <close_stdout@@Base+0x15cc>
   14998:	ldr	r2, [sp, #52]	; 0x34
   1499c:	ldr	r3, [r4]
   149a0:	cmp	r2, r3
   149a4:	bne	149b0 <close_stdout@@Base+0x1bb8>
   149a8:	add	sp, sp, #60	; 0x3c
   149ac:	pop	{r4, r5, r6, r7, pc}
   149b0:	bl	11484 <__stack_chk_fail@plt>
   149b4:	andeq	r3, r1, r0, lsr #13
   149b8:	andeq	r0, r0, r4, lsr r1
   149bc:	ldr	ip, [pc, #96]	; 14a24 <close_stdout@@Base+0x1c2c>
   149c0:	push	{r4, r5, r6, r7, r8, lr}
   149c4:	add	ip, pc, ip
   149c8:	ldr	lr, [pc, #88]	; 14a28 <close_stdout@@Base+0x1c30>
   149cc:	sub	sp, sp, #56	; 0x38
   149d0:	mov	r8, r3
   149d4:	add	r5, sp, #4
   149d8:	mov	r7, r2
   149dc:	mov	r6, r0
   149e0:	ldr	r4, [ip, lr]
   149e4:	mov	r0, r5
   149e8:	ldr	r3, [r4]
   149ec:	str	r3, [sp, #52]	; 0x34
   149f0:	bl	134e4 <close_stdout@@Base+0x6ec>
   149f4:	mov	r2, r8
   149f8:	mov	r3, r5
   149fc:	mov	r0, r6
   14a00:	mov	r1, r7
   14a04:	bl	143c4 <close_stdout@@Base+0x15cc>
   14a08:	ldr	r2, [sp, #52]	; 0x34
   14a0c:	ldr	r3, [r4]
   14a10:	cmp	r2, r3
   14a14:	bne	14a20 <close_stdout@@Base+0x1c28>
   14a18:	add	sp, sp, #56	; 0x38
   14a1c:	pop	{r4, r5, r6, r7, r8, pc}
   14a20:	bl	11484 <__stack_chk_fail@plt>
   14a24:	andeq	r3, r1, r4, lsr r6
   14a28:	andeq	r0, r0, r4, lsr r1
   14a2c:	mov	r2, r1
   14a30:	mov	r1, r0
   14a34:	mov	r0, #0
   14a38:	b	14950 <close_stdout@@Base+0x1b58>
   14a3c:	mov	ip, r1
   14a40:	mov	r3, r2
   14a44:	mov	r1, r0
   14a48:	mov	r2, ip
   14a4c:	mov	r0, #0
   14a50:	b	149bc <close_stdout@@Base+0x1bc4>
   14a54:	push	{r4, r5, r6, r7, r8, lr}
   14a58:	mov	r5, r2
   14a5c:	ldr	lr, [pc, #136]	; 14aec <close_stdout@@Base+0x1cf4>
   14a60:	mov	r7, r0
   14a64:	mov	r6, r1
   14a68:	ldr	r4, [pc, #128]	; 14af0 <close_stdout@@Base+0x1cf8>
   14a6c:	add	lr, pc, lr
   14a70:	sub	sp, sp, #56	; 0x38
   14a74:	add	lr, lr, #256	; 0x100
   14a78:	ldr	r8, [pc, #116]	; 14af4 <close_stdout@@Base+0x1cfc>
   14a7c:	add	r4, pc, r4
   14a80:	add	ip, sp, #4
   14a84:	ldm	lr!, {r0, r1, r2, r3}
   14a88:	ldr	r4, [r4, r8]
   14a8c:	stmia	ip!, {r0, r1, r2, r3}
   14a90:	ldm	lr!, {r0, r1, r2, r3}
   14a94:	ldr	r8, [r4]
   14a98:	stmia	ip!, {r0, r1, r2, r3}
   14a9c:	ldm	lr, {r0, r1, r2, r3}
   14aa0:	str	r8, [sp, #52]	; 0x34
   14aa4:	stm	ip, {r0, r1, r2, r3}
   14aa8:	mov	r1, r5
   14aac:	add	r5, sp, #4
   14ab0:	mov	r2, #1
   14ab4:	mov	r0, r5
   14ab8:	bl	14620 <close_stdout@@Base+0x1828>
   14abc:	mov	r2, r6
   14ac0:	mov	r3, r5
   14ac4:	mov	r1, r7
   14ac8:	mov	r0, #0
   14acc:	bl	143c4 <close_stdout@@Base+0x15cc>
   14ad0:	ldr	r2, [sp, #52]	; 0x34
   14ad4:	ldr	r3, [r4]
   14ad8:	cmp	r2, r3
   14adc:	bne	14ae8 <close_stdout@@Base+0x1cf0>
   14ae0:	add	sp, sp, #56	; 0x38
   14ae4:	pop	{r4, r5, r6, r7, r8, pc}
   14ae8:	bl	11484 <__stack_chk_fail@plt>
   14aec:	andeq	r3, r1, r8, asr r7
   14af0:	andeq	r3, r1, ip, ror r5
   14af4:	andeq	r0, r0, r4, lsr r1
   14af8:	mov	r2, r1
   14afc:	mvn	r1, #0
   14b00:	b	14a54 <close_stdout@@Base+0x1c5c>
   14b04:	mov	r1, #58	; 0x3a
   14b08:	b	14af8 <close_stdout@@Base+0x1d00>
   14b0c:	mov	r2, #58	; 0x3a
   14b10:	b	14a54 <close_stdout@@Base+0x1c5c>
   14b14:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14b18:	mov	r5, r2
   14b1c:	ldr	lr, [pc, #144]	; 14bb4 <close_stdout@@Base+0x1dbc>
   14b20:	mov	r8, r0
   14b24:	mov	r9, r1
   14b28:	mov	r7, r3
   14b2c:	add	lr, pc, lr
   14b30:	ldr	r4, [pc, #128]	; 14bb8 <close_stdout@@Base+0x1dc0>
   14b34:	add	lr, lr, #256	; 0x100
   14b38:	sub	sp, sp, #56	; 0x38
   14b3c:	ldr	sl, [pc, #120]	; 14bbc <close_stdout@@Base+0x1dc4>
   14b40:	add	r4, pc, r4
   14b44:	ldm	lr!, {r0, r1, r2, r3}
   14b48:	add	ip, sp, #4
   14b4c:	ldr	r4, [r4, sl]
   14b50:	ldr	r6, [sp, #88]	; 0x58
   14b54:	stmia	ip!, {r0, r1, r2, r3}
   14b58:	ldm	lr!, {r0, r1, r2, r3}
   14b5c:	ldr	sl, [r4]
   14b60:	stmia	ip!, {r0, r1, r2, r3}
   14b64:	ldm	lr, {r0, r1, r2, r3}
   14b68:	str	sl, [sp, #52]	; 0x34
   14b6c:	stm	ip, {r0, r1, r2, r3}
   14b70:	mov	r2, r5
   14b74:	add	r5, sp, #4
   14b78:	mov	r1, r9
   14b7c:	mov	r0, r5
   14b80:	bl	14694 <close_stdout@@Base+0x189c>
   14b84:	mov	r2, r6
   14b88:	mov	r3, r5
   14b8c:	mov	r0, r8
   14b90:	mov	r1, r7
   14b94:	bl	143c4 <close_stdout@@Base+0x15cc>
   14b98:	ldr	r2, [sp, #52]	; 0x34
   14b9c:	ldr	r3, [r4]
   14ba0:	cmp	r2, r3
   14ba4:	bne	14bb0 <close_stdout@@Base+0x1db8>
   14ba8:	add	sp, sp, #56	; 0x38
   14bac:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14bb0:	bl	11484 <__stack_chk_fail@plt>
   14bb4:	muleq	r1, r8, r6
   14bb8:			; <UNDEFINED> instruction: 0x000134b8
   14bbc:	andeq	r0, r0, r4, lsr r1
   14bc0:	push	{lr}		; (str lr, [sp, #-4]!)
   14bc4:	sub	sp, sp, #12
   14bc8:	mvn	ip, #0
   14bcc:	str	ip, [sp]
   14bd0:	bl	14b14 <close_stdout@@Base+0x1d1c>
   14bd4:	add	sp, sp, #12
   14bd8:	pop	{pc}		; (ldr pc, [sp], #4)
   14bdc:	mov	ip, r1
   14be0:	mov	r3, r2
   14be4:	mov	r1, r0
   14be8:	mov	r2, ip
   14bec:	mov	r0, #0
   14bf0:	b	14bc0 <close_stdout@@Base+0x1dc8>
   14bf4:	push	{lr}		; (str lr, [sp, #-4]!)
   14bf8:	sub	sp, sp, #12
   14bfc:	mov	lr, r1
   14c00:	mov	ip, r2
   14c04:	mov	r1, r0
   14c08:	str	r3, [sp]
   14c0c:	mov	r2, lr
   14c10:	mov	r3, ip
   14c14:	mov	r0, #0
   14c18:	bl	14b14 <close_stdout@@Base+0x1d1c>
   14c1c:	add	sp, sp, #12
   14c20:	pop	{pc}		; (ldr pc, [sp], #4)
   14c24:	ldr	r3, [pc, #12]	; 14c38 <close_stdout@@Base+0x1e40>
   14c28:	ldr	ip, [pc, #12]	; 14c3c <close_stdout@@Base+0x1e44>
   14c2c:	add	r3, pc, r3
   14c30:	ldr	r3, [r3, ip]
   14c34:	b	143c4 <close_stdout@@Base+0x15cc>
   14c38:	andeq	r3, r1, ip, asr #7
   14c3c:	andeq	r0, r0, r4, lsr #2
   14c40:	mov	r2, r1
   14c44:	mov	r1, r0
   14c48:	mov	r0, #0
   14c4c:	b	14c24 <close_stdout@@Base+0x1e2c>
   14c50:	mvn	r2, #0
   14c54:	b	14c24 <close_stdout@@Base+0x1e2c>
   14c58:	mov	r1, r0
   14c5c:	mov	r0, #0
   14c60:	b	14c50 <close_stdout@@Base+0x1e58>
   14c64:	mov	r1, #0
   14c68:	mov	r2, #3
   14c6c:	b	1551c <close_stdout@@Base+0x2724>
   14c70:	push	{r4, r5, r6, r7, lr}
   14c74:	cmp	r1, #0
   14c78:	sub	sp, sp, #36	; 0x24
   14c7c:	ldr	r7, [pc, #896]	; 15004 <close_stdout@@Base+0x220c>
   14c80:	mov	ip, r3
   14c84:	mov	r5, r0
   14c88:	add	r7, pc, r7
   14c8c:	ldr	r4, [sp, #56]	; 0x38
   14c90:	ldr	r6, [sp, #60]	; 0x3c
   14c94:	beq	14fd8 <close_stdout@@Base+0x21e0>
   14c98:	str	r2, [sp]
   14c9c:	mov	r3, r1
   14ca0:	ldr	r2, [pc, #864]	; 15008 <close_stdout@@Base+0x2210>
   14ca4:	mov	r1, #1
   14ca8:	str	ip, [sp, #4]
   14cac:	add	r2, pc, r2
   14cb0:	bl	11490 <__fprintf_chk@plt>
   14cb4:	ldr	r1, [pc, #848]	; 1500c <close_stdout@@Base+0x2214>
   14cb8:	mov	r2, #5
   14cbc:	mov	r0, #0
   14cc0:	add	r1, pc, r1
   14cc4:	bl	11328 <dcgettext@plt>
   14cc8:	ldr	r2, [pc, #832]	; 15010 <close_stdout@@Base+0x2218>
   14ccc:	movw	ip, #2013	; 0x7dd
   14cd0:	mov	r1, #1
   14cd4:	ldr	r2, [r7, r2]
   14cd8:	str	ip, [sp]
   14cdc:	mov	r3, r0
   14ce0:	mov	r0, r5
   14ce4:	bl	11490 <__fprintf_chk@plt>
   14ce8:	ldr	r1, [pc, #804]	; 15014 <close_stdout@@Base+0x221c>
   14cec:	mov	r0, #0
   14cf0:	mov	r2, #5
   14cf4:	add	r1, pc, r1
   14cf8:	bl	11328 <dcgettext@plt>
   14cfc:	mov	r1, r5
   14d00:	bl	11334 <fputs_unlocked@plt>
   14d04:	cmp	r6, #9
   14d08:	addls	pc, pc, r6, lsl #2
   14d0c:	b	14ff4 <close_stdout@@Base+0x21fc>
   14d10:	b	14da4 <close_stdout@@Base+0x1fac>
   14d14:	b	14da8 <close_stdout@@Base+0x1fb0>
   14d18:	b	14dd8 <close_stdout@@Base+0x1fe0>
   14d1c:	b	14e0c <close_stdout@@Base+0x2014>
   14d20:	b	14e48 <close_stdout@@Base+0x2050>
   14d24:	b	14e88 <close_stdout@@Base+0x2090>
   14d28:	b	14ed0 <close_stdout@@Base+0x20d8>
   14d2c:	b	14f20 <close_stdout@@Base+0x2128>
   14d30:	b	14f78 <close_stdout@@Base+0x2180>
   14d34:	b	14d38 <close_stdout@@Base+0x1f40>
   14d38:	ldr	r1, [pc, #728]	; 15018 <close_stdout@@Base+0x2220>
   14d3c:	mov	r0, #0
   14d40:	add	r1, pc, r1
   14d44:	mov	r2, #5
   14d48:	bl	11328 <dcgettext@plt>
   14d4c:	ldm	r4, {r3, ip}
   14d50:	mov	r1, #1
   14d54:	str	ip, [sp]
   14d58:	ldr	ip, [r4, #8]
   14d5c:	str	ip, [sp, #4]
   14d60:	ldr	ip, [r4, #12]
   14d64:	str	ip, [sp, #8]
   14d68:	ldr	ip, [r4, #16]
   14d6c:	str	ip, [sp, #12]
   14d70:	ldr	ip, [r4, #20]
   14d74:	str	ip, [sp, #16]
   14d78:	ldr	ip, [r4, #24]
   14d7c:	str	ip, [sp, #20]
   14d80:	ldr	ip, [r4, #28]
   14d84:	str	ip, [sp, #24]
   14d88:	ldr	ip, [r4, #32]
   14d8c:	str	ip, [sp, #28]
   14d90:	mov	r2, r0
   14d94:	mov	r0, r5
   14d98:	bl	11490 <__fprintf_chk@plt>
   14d9c:	add	sp, sp, #36	; 0x24
   14da0:	pop	{r4, r5, r6, r7, pc}
   14da4:	bl	11208 <abort@plt>
   14da8:	ldr	r1, [pc, #620]	; 1501c <close_stdout@@Base+0x2224>
   14dac:	mov	r2, #5
   14db0:	mov	r0, #0
   14db4:	add	r1, pc, r1
   14db8:	bl	11328 <dcgettext@plt>
   14dbc:	ldr	r3, [r4]
   14dc0:	mov	r1, #1
   14dc4:	mov	r2, r0
   14dc8:	mov	r0, r5
   14dcc:	add	sp, sp, #36	; 0x24
   14dd0:	pop	{r4, r5, r6, r7, lr}
   14dd4:	b	11490 <__fprintf_chk@plt>
   14dd8:	ldr	r1, [pc, #576]	; 15020 <close_stdout@@Base+0x2228>
   14ddc:	mov	r2, #5
   14de0:	mov	r0, #0
   14de4:	add	r1, pc, r1
   14de8:	bl	11328 <dcgettext@plt>
   14dec:	ldm	r4, {r3, ip}
   14df0:	mov	r1, #1
   14df4:	str	ip, [sp, #56]	; 0x38
   14df8:	mov	r2, r0
   14dfc:	mov	r0, r5
   14e00:	add	sp, sp, #36	; 0x24
   14e04:	pop	{r4, r5, r6, r7, lr}
   14e08:	b	11490 <__fprintf_chk@plt>
   14e0c:	ldr	r1, [pc, #528]	; 15024 <close_stdout@@Base+0x222c>
   14e10:	mov	r2, #5
   14e14:	mov	r0, #0
   14e18:	add	r1, pc, r1
   14e1c:	bl	11328 <dcgettext@plt>
   14e20:	ldm	r4, {r3, ip}
   14e24:	mov	r1, #1
   14e28:	str	ip, [sp, #56]	; 0x38
   14e2c:	ldr	ip, [r4, #8]
   14e30:	str	ip, [sp, #60]	; 0x3c
   14e34:	mov	r2, r0
   14e38:	mov	r0, r5
   14e3c:	add	sp, sp, #36	; 0x24
   14e40:	pop	{r4, r5, r6, r7, lr}
   14e44:	b	11490 <__fprintf_chk@plt>
   14e48:	ldr	r1, [pc, #472]	; 15028 <close_stdout@@Base+0x2230>
   14e4c:	mov	r2, #5
   14e50:	mov	r0, #0
   14e54:	add	r1, pc, r1
   14e58:	bl	11328 <dcgettext@plt>
   14e5c:	ldm	r4, {r3, ip}
   14e60:	mov	r1, #1
   14e64:	str	ip, [sp]
   14e68:	ldr	ip, [r4, #8]
   14e6c:	str	ip, [sp, #4]
   14e70:	ldr	ip, [r4, #12]
   14e74:	str	ip, [sp, #8]
   14e78:	mov	r2, r0
   14e7c:	mov	r0, r5
   14e80:	bl	11490 <__fprintf_chk@plt>
   14e84:	b	14d9c <close_stdout@@Base+0x1fa4>
   14e88:	ldr	r1, [pc, #412]	; 1502c <close_stdout@@Base+0x2234>
   14e8c:	mov	r2, #5
   14e90:	mov	r0, #0
   14e94:	add	r1, pc, r1
   14e98:	bl	11328 <dcgettext@plt>
   14e9c:	ldm	r4, {r3, ip}
   14ea0:	mov	r1, #1
   14ea4:	str	ip, [sp]
   14ea8:	ldr	ip, [r4, #8]
   14eac:	str	ip, [sp, #4]
   14eb0:	ldr	ip, [r4, #12]
   14eb4:	str	ip, [sp, #8]
   14eb8:	ldr	ip, [r4, #16]
   14ebc:	str	ip, [sp, #12]
   14ec0:	mov	r2, r0
   14ec4:	mov	r0, r5
   14ec8:	bl	11490 <__fprintf_chk@plt>
   14ecc:	b	14d9c <close_stdout@@Base+0x1fa4>
   14ed0:	ldr	r1, [pc, #344]	; 15030 <close_stdout@@Base+0x2238>
   14ed4:	mov	r2, #5
   14ed8:	mov	r0, #0
   14edc:	add	r1, pc, r1
   14ee0:	bl	11328 <dcgettext@plt>
   14ee4:	ldm	r4, {r3, ip}
   14ee8:	mov	r1, #1
   14eec:	str	ip, [sp]
   14ef0:	ldr	ip, [r4, #8]
   14ef4:	str	ip, [sp, #4]
   14ef8:	ldr	ip, [r4, #12]
   14efc:	str	ip, [sp, #8]
   14f00:	ldr	ip, [r4, #16]
   14f04:	str	ip, [sp, #12]
   14f08:	ldr	ip, [r4, #20]
   14f0c:	str	ip, [sp, #16]
   14f10:	mov	r2, r0
   14f14:	mov	r0, r5
   14f18:	bl	11490 <__fprintf_chk@plt>
   14f1c:	b	14d9c <close_stdout@@Base+0x1fa4>
   14f20:	ldr	r1, [pc, #268]	; 15034 <close_stdout@@Base+0x223c>
   14f24:	mov	r2, #5
   14f28:	mov	r0, #0
   14f2c:	add	r1, pc, r1
   14f30:	bl	11328 <dcgettext@plt>
   14f34:	ldm	r4, {r3, ip}
   14f38:	mov	r1, #1
   14f3c:	str	ip, [sp]
   14f40:	ldr	ip, [r4, #8]
   14f44:	str	ip, [sp, #4]
   14f48:	ldr	ip, [r4, #12]
   14f4c:	str	ip, [sp, #8]
   14f50:	ldr	ip, [r4, #16]
   14f54:	str	ip, [sp, #12]
   14f58:	ldr	ip, [r4, #20]
   14f5c:	str	ip, [sp, #16]
   14f60:	ldr	ip, [r4, #24]
   14f64:	str	ip, [sp, #20]
   14f68:	mov	r2, r0
   14f6c:	mov	r0, r5
   14f70:	bl	11490 <__fprintf_chk@plt>
   14f74:	b	14d9c <close_stdout@@Base+0x1fa4>
   14f78:	ldr	r1, [pc, #184]	; 15038 <close_stdout@@Base+0x2240>
   14f7c:	mov	r2, #5
   14f80:	mov	r0, #0
   14f84:	add	r1, pc, r1
   14f88:	bl	11328 <dcgettext@plt>
   14f8c:	ldm	r4, {r3, ip}
   14f90:	mov	r1, #1
   14f94:	str	ip, [sp]
   14f98:	ldr	ip, [r4, #8]
   14f9c:	str	ip, [sp, #4]
   14fa0:	ldr	ip, [r4, #12]
   14fa4:	str	ip, [sp, #8]
   14fa8:	ldr	ip, [r4, #16]
   14fac:	str	ip, [sp, #12]
   14fb0:	ldr	ip, [r4, #20]
   14fb4:	str	ip, [sp, #16]
   14fb8:	ldr	ip, [r4, #24]
   14fbc:	str	ip, [sp, #20]
   14fc0:	ldr	ip, [r4, #28]
   14fc4:	str	ip, [sp, #24]
   14fc8:	mov	r2, r0
   14fcc:	mov	r0, r5
   14fd0:	bl	11490 <__fprintf_chk@plt>
   14fd4:	b	14d9c <close_stdout@@Base+0x1fa4>
   14fd8:	str	r3, [sp]
   14fdc:	mov	r3, r2
   14fe0:	ldr	r2, [pc, #84]	; 1503c <close_stdout@@Base+0x2244>
   14fe4:	mov	r1, #1
   14fe8:	add	r2, pc, r2
   14fec:	bl	11490 <__fprintf_chk@plt>
   14ff0:	b	14cb4 <close_stdout@@Base+0x1ebc>
   14ff4:	ldr	r1, [pc, #68]	; 15040 <close_stdout@@Base+0x2248>
   14ff8:	mov	r0, #0
   14ffc:	add	r1, pc, r1
   15000:	b	14d44 <close_stdout@@Base+0x1f4c>
   15004:	andeq	r3, r1, r0, ror r3
   15008:	andeq	r2, r0, r4, lsr #13
   1500c:	andeq	r2, r0, r4, lsr #13
   15010:	andeq	r0, r0, r8, lsr r1
   15014:	andeq	r2, r0, r4, ror r6
   15018:	andeq	r2, r0, r0, lsl #16
   1501c:	andeq	r2, r0, r0, lsl #13
   15020:	andeq	r2, r0, r0, ror #12
   15024:	andeq	r2, r0, r4, asr #12
   15028:	andeq	r2, r0, r4, lsr #12
   1502c:	andeq	r2, r0, r4, lsl #12
   15030:	andeq	r2, r0, r0, ror #11
   15034:			; <UNDEFINED> instruction: 0x000025b8
   15038:	andeq	r2, r0, ip, lsl #11
   1503c:	andeq	r2, r0, r4, ror r3
   15040:	andeq	r2, r0, r8, ror r5
   15044:	push	{r4, r5, lr}
   15048:	sub	sp, sp, #12
   1504c:	ldr	r5, [sp, #24]
   15050:	ldr	ip, [r5]
   15054:	cmp	ip, #0
   15058:	beq	15074 <close_stdout@@Base+0x227c>
   1505c:	mov	lr, r5
   15060:	mov	ip, #0
   15064:	ldr	r4, [lr, #4]!
   15068:	add	ip, ip, #1
   1506c:	cmp	r4, #0
   15070:	bne	15064 <close_stdout@@Base+0x226c>
   15074:	stm	sp, {r5, ip}
   15078:	bl	14c70 <close_stdout@@Base+0x1e78>
   1507c:	add	sp, sp, #12
   15080:	pop	{r4, r5, pc}
   15084:	push	{r4, r5, r6, r7, lr}
   15088:	sub	sp, sp, #60	; 0x3c
   1508c:	ldr	r4, [pc, #100]	; 150f8 <close_stdout@@Base+0x2300>
   15090:	mov	ip, #0
   15094:	ldr	r5, [pc, #96]	; 150fc <close_stdout@@Base+0x2304>
   15098:	mov	lr, ip
   1509c:	add	r4, pc, r4
   150a0:	ldr	r6, [sp, #80]	; 0x50
   150a4:	ldr	r7, [r4, r5]
   150a8:	add	r5, sp, #12
   150ac:	ldr	r4, [r7]
   150b0:	str	r4, [sp, #52]	; 0x34
   150b4:	ldr	r4, [r6, ip]
   150b8:	cmp	r4, #0
   150bc:	str	r4, [r5, ip]
   150c0:	beq	150d4 <close_stdout@@Base+0x22dc>
   150c4:	add	lr, lr, #1
   150c8:	add	ip, ip, #4
   150cc:	cmp	lr, #10
   150d0:	bne	150b4 <close_stdout@@Base+0x22bc>
   150d4:	stm	sp, {r5, lr}
   150d8:	bl	14c70 <close_stdout@@Base+0x1e78>
   150dc:	ldr	r2, [sp, #52]	; 0x34
   150e0:	ldr	r3, [r7]
   150e4:	cmp	r2, r3
   150e8:	bne	150f4 <close_stdout@@Base+0x22fc>
   150ec:	add	sp, sp, #60	; 0x3c
   150f0:	pop	{r4, r5, r6, r7, pc}
   150f4:	bl	11484 <__stack_chk_fail@plt>
   150f8:	andeq	r2, r1, ip, asr pc
   150fc:	andeq	r0, r0, r4, lsr r1
   15100:	push	{r3}		; (str r3, [sp, #-4]!)
   15104:	push	{r4, lr}
   15108:	sub	sp, sp, #20
   1510c:	ldr	lr, [pc, #72]	; 1515c <close_stdout@@Base+0x2364>
   15110:	add	ip, sp, #32
   15114:	ldr	r4, [pc, #68]	; 15160 <close_stdout@@Base+0x2368>
   15118:	add	lr, pc, lr
   1511c:	ldr	r3, [sp, #28]
   15120:	ldr	r4, [lr, r4]
   15124:	str	ip, [sp]
   15128:	str	ip, [sp, #8]
   1512c:	ldr	ip, [r4]
   15130:	str	ip, [sp, #12]
   15134:	bl	15084 <close_stdout@@Base+0x228c>
   15138:	ldr	r2, [sp, #12]
   1513c:	ldr	r3, [r4]
   15140:	cmp	r2, r3
   15144:	bne	15158 <close_stdout@@Base+0x2360>
   15148:	add	sp, sp, #20
   1514c:	pop	{r4, lr}
   15150:	add	sp, sp, #4
   15154:	bx	lr
   15158:	bl	11484 <__stack_chk_fail@plt>
   1515c:	andeq	r2, r1, r0, ror #29
   15160:	andeq	r0, r0, r4, lsr r1
   15164:	ldr	r1, [pc, #132]	; 151f0 <close_stdout@@Base+0x23f8>
   15168:	mov	r2, #5
   1516c:	push	{r4, lr}
   15170:	add	r1, pc, r1
   15174:	mov	r0, #0
   15178:	ldr	r4, [pc, #116]	; 151f4 <close_stdout@@Base+0x23fc>
   1517c:	bl	11328 <dcgettext@plt>
   15180:	ldr	r2, [pc, #112]	; 151f8 <close_stdout@@Base+0x2400>
   15184:	add	r4, pc, r4
   15188:	add	r2, pc, r2
   1518c:	mov	r1, r0
   15190:	mov	r0, #1
   15194:	bl	11268 <__printf_chk@plt>
   15198:	ldr	r1, [pc, #92]	; 151fc <close_stdout@@Base+0x2404>
   1519c:	mov	r2, #5
   151a0:	mov	r0, #0
   151a4:	add	r1, pc, r1
   151a8:	bl	11328 <dcgettext@plt>
   151ac:	ldr	r2, [pc, #76]	; 15200 <close_stdout@@Base+0x2408>
   151b0:	ldr	r3, [pc, #76]	; 15204 <close_stdout@@Base+0x240c>
   151b4:	add	r2, pc, r2
   151b8:	add	r3, pc, r3
   151bc:	mov	r1, r0
   151c0:	mov	r0, #1
   151c4:	bl	11268 <__printf_chk@plt>
   151c8:	ldr	r1, [pc, #56]	; 15208 <close_stdout@@Base+0x2410>
   151cc:	mov	r0, #0
   151d0:	mov	r2, #5
   151d4:	add	r1, pc, r1
   151d8:	bl	11328 <dcgettext@plt>
   151dc:	ldr	r3, [pc, #40]	; 1520c <close_stdout@@Base+0x2414>
   151e0:	ldr	r3, [r4, r3]
   151e4:	pop	{r4, lr}
   151e8:	ldr	r1, [r3]
   151ec:	b	11334 <fputs_unlocked@plt>
   151f0:	andeq	r2, r0, r0, asr #8
   151f4:	andeq	r2, r1, r4, ror lr
   151f8:	andeq	r2, r0, r0, asr #8
   151fc:	andeq	r2, r0, ip, lsr r4
   15200:	andeq	r1, r0, r4, lsr #23
   15204:			; <UNDEFINED> instruction: 0x00001bb0
   15208:	andeq	r2, r0, r0, lsr #8
   1520c:	andeq	r0, r0, ip, asr #2
   15210:	push	{r4, lr}
   15214:	mov	r4, r0
   15218:	bl	11460 <malloc@plt>
   1521c:	rsbs	r3, r0, #1
   15220:	movcc	r3, #0
   15224:	cmp	r4, #0
   15228:	moveq	r3, #0
   1522c:	cmp	r3, #0
   15230:	popeq	{r4, pc}
   15234:	bl	15424 <close_stdout@@Base+0x262c>
   15238:	push	{r3, r4, r5, lr}
   1523c:	mov	r4, r0
   15240:	mvn	r0, #0
   15244:	mov	r5, r1
   15248:	bl	15c38 <close_stdout@@Base+0x2e40>
   1524c:	cmp	r0, r4
   15250:	bcc	15260 <close_stdout@@Base+0x2468>
   15254:	mul	r0, r4, r5
   15258:	pop	{r3, r4, r5, lr}
   1525c:	b	15210 <close_stdout@@Base+0x2418>
   15260:	bl	15424 <close_stdout@@Base+0x262c>
   15264:	b	15210 <close_stdout@@Base+0x2418>
   15268:	rsbs	r3, r1, #1
   1526c:	push	{r4, lr}
   15270:	movcc	r3, #0
   15274:	cmp	r0, #0
   15278:	mov	r4, r1
   1527c:	moveq	r3, #0
   15280:	cmp	r3, #0
   15284:	bne	152a8 <close_stdout@@Base+0x24b0>
   15288:	bl	114e4 <realloc@plt>
   1528c:	rsbs	r3, r0, #1
   15290:	movcc	r3, #0
   15294:	cmp	r4, #0
   15298:	moveq	r3, #0
   1529c:	cmp	r3, #0
   152a0:	popeq	{r4, pc}
   152a4:	bl	15424 <close_stdout@@Base+0x262c>
   152a8:	bl	11310 <free@plt>
   152ac:	mov	r0, #0
   152b0:	pop	{r4, pc}
   152b4:	push	{r4, r5, r6, lr}
   152b8:	mov	r5, r1
   152bc:	mov	r6, r0
   152c0:	mov	r1, r2
   152c4:	mvn	r0, #0
   152c8:	mov	r4, r2
   152cc:	bl	15c38 <close_stdout@@Base+0x2e40>
   152d0:	cmp	r0, r5
   152d4:	bcc	152e8 <close_stdout@@Base+0x24f0>
   152d8:	mov	r0, r6
   152dc:	mul	r1, r5, r4
   152e0:	pop	{r4, r5, r6, lr}
   152e4:	b	15268 <close_stdout@@Base+0x2470>
   152e8:	bl	15424 <close_stdout@@Base+0x262c>
   152ec:	push	{r3, r4, r5, r6, r7, lr}
   152f0:	subs	r7, r0, #0
   152f4:	mov	r5, r1
   152f8:	mov	r6, r2
   152fc:	ldr	r4, [r1]
   15300:	beq	15338 <close_stdout@@Base+0x2540>
   15304:	movw	r0, #43690	; 0xaaaa
   15308:	mov	r1, r2
   1530c:	bfi	r0, r0, #16, #16
   15310:	bl	15c38 <close_stdout@@Base+0x2e40>
   15314:	cmp	r4, r0
   15318:	addcc	r3, r4, #1
   1531c:	addcc	r4, r4, r3, lsr #1
   15320:	bcs	1535c <close_stdout@@Base+0x2564>
   15324:	str	r4, [r5]
   15328:	mov	r0, r7
   1532c:	mul	r1, r6, r4
   15330:	pop	{r3, r4, r5, r6, r7, lr}
   15334:	b	15268 <close_stdout@@Base+0x2470>
   15338:	cmp	r4, #0
   1533c:	bne	15324 <close_stdout@@Base+0x252c>
   15340:	mov	r0, #64	; 0x40
   15344:	mov	r1, r2
   15348:	bl	15c38 <close_stdout@@Base+0x2e40>
   1534c:	cmp	r0, #0
   15350:	movne	r4, r0
   15354:	addeq	r4, r0, #1
   15358:	b	15324 <close_stdout@@Base+0x252c>
   1535c:	bl	15424 <close_stdout@@Base+0x262c>
   15360:	cmp	r0, #0
   15364:	push	{r3, lr}
   15368:	ldr	r3, [r1]
   1536c:	beq	15398 <close_stdout@@Base+0x25a0>
   15370:	movw	r2, #43689	; 0xaaa9
   15374:	movt	r2, #43690	; 0xaaaa
   15378:	cmp	r3, r2
   1537c:	addls	r2, r3, #1
   15380:	addls	r3, r3, r2, lsr #1
   15384:	bhi	153b0 <close_stdout@@Base+0x25b8>
   15388:	str	r3, [r1]
   1538c:	mov	r1, r3
   15390:	pop	{r3, lr}
   15394:	b	15268 <close_stdout@@Base+0x2470>
   15398:	cmp	r3, #0
   1539c:	moveq	r3, #64	; 0x40
   153a0:	str	r3, [r1]
   153a4:	mov	r1, r3
   153a8:	pop	{r3, lr}
   153ac:	b	15268 <close_stdout@@Base+0x2470>
   153b0:	bl	15424 <close_stdout@@Base+0x262c>
   153b4:	push	{r4, lr}
   153b8:	mov	r4, r0
   153bc:	bl	15210 <close_stdout@@Base+0x2418>
   153c0:	mov	r2, r4
   153c4:	mov	r1, #0
   153c8:	pop	{r4, lr}
   153cc:	b	112bc <memset@plt>
   153d0:	push	{r3, lr}
   153d4:	bl	112a4 <calloc@plt>
   153d8:	cmp	r0, #0
   153dc:	popne	{r3, pc}
   153e0:	bl	15424 <close_stdout@@Base+0x262c>
   153e4:	push	{r3, r4, r5, lr}
   153e8:	mov	r4, r1
   153ec:	mov	r5, r0
   153f0:	mov	r0, r1
   153f4:	bl	15210 <close_stdout@@Base+0x2418>
   153f8:	mov	r1, r5
   153fc:	mov	r2, r4
   15400:	pop	{r3, r4, r5, lr}
   15404:	b	1137c <memcpy@plt>
   15408:	push	{r4, lr}
   1540c:	mov	r4, r0
   15410:	bl	11364 <strlen@plt>
   15414:	add	r1, r0, #1
   15418:	mov	r0, r4
   1541c:	pop	{r4, lr}
   15420:	b	153e4 <close_stdout@@Base+0x25ec>
   15424:	ldr	r3, [pc, #64]	; 1546c <close_stdout@@Base+0x2674>
   15428:	mov	r2, #5
   1542c:	ldr	ip, [pc, #60]	; 15470 <close_stdout@@Base+0x2678>
   15430:	mov	r0, #0
   15434:	add	r3, pc, r3
   15438:	ldr	r1, [pc, #52]	; 15474 <close_stdout@@Base+0x267c>
   1543c:	push	{r4, lr}
   15440:	add	r1, pc, r1
   15444:	ldr	r3, [r3, ip]
   15448:	ldr	r4, [r3]
   1544c:	bl	11328 <dcgettext@plt>
   15450:	ldr	r2, [pc, #32]	; 15478 <close_stdout@@Base+0x2680>
   15454:	mov	r1, #0
   15458:	add	r2, pc, r2
   1545c:	mov	r3, r0
   15460:	mov	r0, r4
   15464:	bl	1146c <error@plt>
   15468:	bl	11208 <abort@plt>
   1546c:	andeq	r2, r1, r4, asr #23
   15470:	andeq	r0, r0, r0, lsr r1
   15474:	andeq	r2, r0, r4, lsr #4
   15478:	andeq	r1, r0, r0, lsr lr
   1547c:	push	{r4, r5, r6, lr}
   15480:	sub	sp, sp, #8
   15484:	mov	r4, r0
   15488:	bl	111fc <fileno@plt>
   1548c:	cmp	r0, #0
   15490:	mov	r0, r4
   15494:	blt	15510 <close_stdout@@Base+0x2718>
   15498:	bl	114c0 <__freading@plt>
   1549c:	cmp	r0, #0
   154a0:	bne	154dc <close_stdout@@Base+0x26e4>
   154a4:	mov	r0, r4
   154a8:	bl	15690 <close_stdout@@Base+0x2898>
   154ac:	cmp	r0, #0
   154b0:	beq	1550c <close_stdout@@Base+0x2714>
   154b4:	bl	11520 <__errno_location@plt>
   154b8:	ldr	r6, [r0]
   154bc:	mov	r5, r0
   154c0:	mov	r0, r4
   154c4:	bl	11250 <fclose@plt>
   154c8:	cmp	r6, #0
   154cc:	mvnne	r0, #0
   154d0:	strne	r6, [r5]
   154d4:	add	sp, sp, #8
   154d8:	pop	{r4, r5, r6, pc}
   154dc:	mov	r0, r4
   154e0:	bl	111fc <fileno@plt>
   154e4:	mov	r1, #1
   154e8:	mov	r2, #0
   154ec:	mov	r3, #0
   154f0:	str	r1, [sp]
   154f4:	bl	11454 <lseek64@plt>
   154f8:	mvn	r2, #0
   154fc:	mvn	r3, #0
   15500:	cmp	r1, r3
   15504:	cmpeq	r0, r2
   15508:	bne	154a4 <close_stdout@@Base+0x26ac>
   1550c:	mov	r0, r4
   15510:	add	sp, sp, #8
   15514:	pop	{r4, r5, r6, lr}
   15518:	b	11250 <fclose@plt>
   1551c:	push	{r1, r2, r3}
   15520:	movw	ip, #1030	; 0x406
   15524:	ldr	r3, [pc, #336]	; 1567c <close_stdout@@Base+0x2884>
   15528:	push	{r4, r5, r6, r7, r8, lr}
   1552c:	add	r3, pc, r3
   15530:	ldr	lr, [pc, #328]	; 15680 <close_stdout@@Base+0x2888>
   15534:	sub	sp, sp, #12
   15538:	add	r2, sp, #40	; 0x28
   1553c:	mov	r6, r0
   15540:	ldr	r1, [sp, #36]	; 0x24
   15544:	ldr	r4, [r3, lr]
   15548:	cmp	r1, ip
   1554c:	str	r2, [sp]
   15550:	ldr	r3, [r4]
   15554:	str	r3, [sp, #4]
   15558:	bne	155dc <close_stdout@@Base+0x27e4>
   1555c:	ldr	r8, [pc, #288]	; 15684 <close_stdout@@Base+0x288c>
   15560:	add	r3, sp, #44	; 0x2c
   15564:	str	r3, [sp]
   15568:	add	r8, pc, r8
   1556c:	ldr	r7, [sp, #40]	; 0x28
   15570:	ldr	r3, [r8]
   15574:	mov	r2, r7
   15578:	cmp	r3, #0
   1557c:	blt	15668 <close_stdout@@Base+0x2870>
   15580:	bl	114cc <fcntl@plt>
   15584:	subs	r5, r0, #0
   15588:	blt	155ec <close_stdout@@Base+0x27f4>
   1558c:	ldr	r3, [pc, #244]	; 15688 <close_stdout@@Base+0x2890>
   15590:	mov	r2, #1
   15594:	add	r3, pc, r3
   15598:	str	r2, [r3]
   1559c:	cmp	r5, #0
   155a0:	blt	155b8 <close_stdout@@Base+0x27c0>
   155a4:	ldr	r3, [pc, #224]	; 1568c <close_stdout@@Base+0x2894>
   155a8:	add	r3, pc, r3
   155ac:	ldr	r3, [r3]
   155b0:	cmn	r3, #1
   155b4:	beq	1561c <close_stdout@@Base+0x2824>
   155b8:	ldr	r2, [sp, #4]
   155bc:	mov	r0, r5
   155c0:	ldr	r3, [r4]
   155c4:	cmp	r2, r3
   155c8:	bne	15678 <close_stdout@@Base+0x2880>
   155cc:	add	sp, sp, #12
   155d0:	pop	{r4, r5, r6, r7, r8, lr}
   155d4:	add	sp, sp, #12
   155d8:	bx	lr
   155dc:	ldr	r2, [sp, #40]	; 0x28
   155e0:	bl	114cc <fcntl@plt>
   155e4:	mov	r5, r0
   155e8:	b	155b8 <close_stdout@@Base+0x27c0>
   155ec:	bl	11520 <__errno_location@plt>
   155f0:	ldr	r3, [r0]
   155f4:	cmp	r3, #22
   155f8:	bne	1558c <close_stdout@@Base+0x2794>
   155fc:	mov	r0, r6
   15600:	mov	r2, r7
   15604:	mov	r1, #0
   15608:	bl	1551c <close_stdout@@Base+0x2724>
   1560c:	subs	r5, r0, #0
   15610:	blt	155b8 <close_stdout@@Base+0x27c0>
   15614:	mvn	r3, #0
   15618:	str	r3, [r8]
   1561c:	mov	r0, r5
   15620:	mov	r1, #1
   15624:	bl	114cc <fcntl@plt>
   15628:	subs	r2, r0, #0
   1562c:	blt	15648 <close_stdout@@Base+0x2850>
   15630:	orr	r2, r2, #1
   15634:	mov	r0, r5
   15638:	mov	r1, #2
   1563c:	bl	114cc <fcntl@plt>
   15640:	cmn	r0, #1
   15644:	bne	155b8 <close_stdout@@Base+0x27c0>
   15648:	bl	11520 <__errno_location@plt>
   1564c:	ldr	r7, [r0]
   15650:	mov	r6, r0
   15654:	mov	r0, r5
   15658:	mvn	r5, #0
   1565c:	bl	11418 <close@plt>
   15660:	str	r7, [r6]
   15664:	b	155b8 <close_stdout@@Base+0x27c0>
   15668:	mov	r1, #0
   1566c:	bl	1551c <close_stdout@@Base+0x2724>
   15670:	mov	r5, r0
   15674:	b	1559c <close_stdout@@Base+0x27a4>
   15678:	bl	11484 <__stack_chk_fail@plt>
   1567c:	andeq	r2, r1, ip, asr #21
   15680:	andeq	r0, r0, r4, lsr r1
   15684:	andeq	r2, r1, ip, lsl #27
   15688:	andeq	r2, r1, r0, ror #26
   1568c:	andeq	r2, r1, ip, asr #26
   15690:	push	{r4, lr}
   15694:	subs	r4, r0, #0
   15698:	sub	sp, sp, #8
   1569c:	beq	156ac <close_stdout@@Base+0x28b4>
   156a0:	bl	114c0 <__freading@plt>
   156a4:	cmp	r0, #0
   156a8:	bne	156bc <close_stdout@@Base+0x28c4>
   156ac:	mov	r0, r4
   156b0:	add	sp, sp, #8
   156b4:	pop	{r4, lr}
   156b8:	b	11358 <fflush@plt>
   156bc:	ldr	r3, [r4]
   156c0:	tst	r3, #256	; 0x100
   156c4:	beq	156ac <close_stdout@@Base+0x28b4>
   156c8:	mov	r3, #1
   156cc:	mov	r0, r4
   156d0:	str	r3, [sp]
   156d4:	mov	r2, #0
   156d8:	mov	r3, #0
   156dc:	bl	156f0 <close_stdout@@Base+0x28f8>
   156e0:	mov	r0, r4
   156e4:	add	sp, sp, #8
   156e8:	pop	{r4, lr}
   156ec:	b	11358 <fflush@plt>
   156f0:	push	{r4, r5, r6, r7, lr}
   156f4:	sub	sp, sp, #20
   156f8:	ldmib	r0, {r1, ip}
   156fc:	mov	r6, r0
   15700:	ldr	r4, [sp, #40]	; 0x28
   15704:	cmp	ip, r1
   15708:	beq	15720 <close_stdout@@Base+0x2928>
   1570c:	str	r4, [sp, #40]	; 0x28
   15710:	mov	r0, r6
   15714:	add	sp, sp, #20
   15718:	pop	{r4, r5, r6, r7, lr}
   1571c:	b	113d0 <fseeko64@plt>
   15720:	ldr	ip, [r0, #20]
   15724:	ldr	r1, [r0, #16]
   15728:	cmp	ip, r1
   1572c:	bne	1570c <close_stdout@@Base+0x2914>
   15730:	ldr	r7, [r0, #36]	; 0x24
   15734:	cmp	r7, #0
   15738:	bne	1570c <close_stdout@@Base+0x2914>
   1573c:	str	r2, [sp, #12]
   15740:	mvn	r5, #0
   15744:	str	r3, [sp, #8]
   15748:	bl	111fc <fileno@plt>
   1574c:	str	r4, [sp]
   15750:	mvn	r4, #0
   15754:	ldr	r2, [sp, #12]
   15758:	ldr	r3, [sp, #8]
   1575c:	bl	11454 <lseek64@plt>
   15760:	mov	r2, r0
   15764:	mov	r3, r1
   15768:	cmp	r3, r5
   1576c:	cmpeq	r2, r4
   15770:	beq	15790 <close_stdout@@Base+0x2998>
   15774:	ldr	r1, [r6]
   15778:	mov	r0, r7
   1577c:	strd	r2, [r6, #80]	; 0x50
   15780:	bic	r3, r1, #16
   15784:	str	r3, [r6]
   15788:	add	sp, sp, #20
   1578c:	pop	{r4, r5, r6, r7, pc}
   15790:	mvn	r0, #0
   15794:	b	15788 <close_stdout@@Base+0x2990>
   15798:	push	{r4, r5, r6, lr}
   1579c:	mov	r4, r0
   157a0:	bl	11298 <__fpending@plt>
   157a4:	mov	r6, r0
   157a8:	mov	r0, r4
   157ac:	ldr	r4, [r4]
   157b0:	bl	1547c <close_stdout@@Base+0x2684>
   157b4:	and	r4, r4, #32
   157b8:	adds	r5, r0, #0
   157bc:	movne	r5, #1
   157c0:	cmp	r4, #0
   157c4:	bne	157e4 <close_stdout@@Base+0x29ec>
   157c8:	cmp	r5, #0
   157cc:	beq	157dc <close_stdout@@Base+0x29e4>
   157d0:	cmp	r6, #0
   157d4:	beq	15800 <close_stdout@@Base+0x2a08>
   157d8:	mvn	r4, #0
   157dc:	mov	r0, r4
   157e0:	pop	{r4, r5, r6, pc}
   157e4:	cmp	r5, #0
   157e8:	bne	157d8 <close_stdout@@Base+0x29e0>
   157ec:	bl	11520 <__errno_location@plt>
   157f0:	mvn	r4, #0
   157f4:	str	r5, [r0]
   157f8:	mov	r0, r4
   157fc:	pop	{r4, r5, r6, pc}
   15800:	bl	11520 <__errno_location@plt>
   15804:	ldr	r4, [r0]
   15808:	subs	r4, r4, #9
   1580c:	mvnne	r4, #0
   15810:	mov	r0, r4
   15814:	pop	{r4, r5, r6, pc}
   15818:	ldr	r3, [pc, #984]	; 15bf8 <close_stdout@@Base+0x2e00>
   1581c:	mov	r0, #14
   15820:	ldr	r2, [pc, #980]	; 15bfc <close_stdout@@Base+0x2e04>
   15824:	add	r3, pc, r3
   15828:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1582c:	sub	sp, sp, #132	; 0x84
   15830:	ldr	r6, [r3, r2]
   15834:	ldr	r3, [r6]
   15838:	str	r3, [sp, #124]	; 0x7c
   1583c:	bl	11478 <nl_langinfo@plt>
   15840:	subs	r5, r0, #0
   15844:	beq	158f8 <close_stdout@@Base+0x2b00>
   15848:	ldr	r3, [pc, #944]	; 15c00 <close_stdout@@Base+0x2e08>
   1584c:	ldr	r4, [pc, r3]
   15850:	cmp	r4, #0
   15854:	beq	15904 <close_stdout@@Base+0x2b0c>
   15858:	ldrb	r7, [r4]
   1585c:	cmp	r7, #0
   15860:	bne	15894 <close_stdout@@Base+0x2a9c>
   15864:	b	158cc <close_stdout@@Base+0x2ad4>
   15868:	mov	r0, r4
   1586c:	bl	11364 <strlen@plt>
   15870:	add	r0, r0, #1
   15874:	add	r7, r4, r0
   15878:	mov	r0, r7
   1587c:	bl	11364 <strlen@plt>
   15880:	add	r0, r0, #1
   15884:	add	r4, r7, r0
   15888:	ldrb	r7, [r7, r0]
   1588c:	cmp	r7, #0
   15890:	beq	158cc <close_stdout@@Base+0x2ad4>
   15894:	mov	r0, r5
   15898:	mov	r1, r4
   1589c:	bl	11508 <strcmp@plt>
   158a0:	cmp	r0, #0
   158a4:	beq	158bc <close_stdout@@Base+0x2ac4>
   158a8:	cmp	r7, #42	; 0x2a
   158ac:	bne	15868 <close_stdout@@Base+0x2a70>
   158b0:	ldrb	r3, [r4, #1]
   158b4:	cmp	r3, #0
   158b8:	bne	15868 <close_stdout@@Base+0x2a70>
   158bc:	mov	r0, r4
   158c0:	bl	11364 <strlen@plt>
   158c4:	add	r0, r0, #1
   158c8:	add	r5, r4, r0
   158cc:	ldrb	r3, [r5]
   158d0:	cmp	r3, #0
   158d4:	ldreq	r5, [pc, #808]	; 15c04 <close_stdout@@Base+0x2e0c>
   158d8:	addeq	r5, pc, r5
   158dc:	ldr	r2, [sp, #124]	; 0x7c
   158e0:	mov	r0, r5
   158e4:	ldr	r3, [r6]
   158e8:	cmp	r2, r3
   158ec:	bne	15bcc <close_stdout@@Base+0x2dd4>
   158f0:	add	sp, sp, #132	; 0x84
   158f4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   158f8:	ldr	r5, [pc, #776]	; 15c08 <close_stdout@@Base+0x2e10>
   158fc:	add	r5, pc, r5
   15900:	b	15848 <close_stdout@@Base+0x2a50>
   15904:	ldr	r0, [pc, #768]	; 15c0c <close_stdout@@Base+0x2e14>
   15908:	add	r0, pc, r0
   1590c:	bl	1125c <getenv@plt>
   15910:	subs	r8, r0, #0
   15914:	beq	15ba4 <close_stdout@@Base+0x2dac>
   15918:	ldrb	r3, [r8]
   1591c:	cmp	r3, #0
   15920:	beq	15b38 <close_stdout@@Base+0x2d40>
   15924:	bl	11364 <strlen@plt>
   15928:	subs	sl, r0, #0
   1592c:	subne	r3, sl, #1
   15930:	bne	15b48 <close_stdout@@Base+0x2d50>
   15934:	mov	r9, #0
   15938:	mov	fp, r9
   1593c:	add	r9, sl, r9
   15940:	add	r0, r9, #14
   15944:	bl	11460 <malloc@plt>
   15948:	subs	r7, r0, #0
   1594c:	beq	15b98 <close_stdout@@Base+0x2da0>
   15950:	mov	r1, r8
   15954:	mov	r2, sl
   15958:	bl	1137c <memcpy@plt>
   1595c:	cmp	fp, #0
   15960:	add	ip, r7, r9
   15964:	movne	r3, #47	; 0x2f
   15968:	strbne	r3, [r7, sl]
   1596c:	ldr	r3, [pc, #668]	; 15c10 <close_stdout@@Base+0x2e18>
   15970:	add	r3, pc, r3
   15974:	ldm	r3!, {r0, r1, r2}
   15978:	ldrh	r3, [r3]
   1597c:	str	r0, [r7, r9]
   15980:	mov	r0, r7
   15984:	str	r1, [ip, #4]
   15988:	mov	r1, #32768	; 0x8000
   1598c:	strh	r3, [ip, #12]
   15990:	str	r2, [ip, #8]
   15994:	bl	113dc <open64@plt>
   15998:	subs	r8, r0, #0
   1599c:	blt	15b60 <close_stdout@@Base+0x2d68>
   159a0:	ldr	r1, [pc, #620]	; 15c14 <close_stdout@@Base+0x2e1c>
   159a4:	add	r1, pc, r1
   159a8:	bl	1140c <fdopen@plt>
   159ac:	subs	fp, r0, #0
   159b0:	beq	15bb8 <close_stdout@@Base+0x2dc0>
   159b4:	ldr	r0, [pc, #604]	; 15c18 <close_stdout@@Base+0x2e20>
   159b8:	add	sl, sp, #20
   159bc:	add	r9, sp, #72	; 0x48
   159c0:	mov	r8, #0
   159c4:	add	r0, pc, r0
   159c8:	str	r0, [sp, #12]
   159cc:	ldr	r3, [fp, #4]
   159d0:	ldr	r2, [fp, #8]
   159d4:	cmp	r3, r2
   159d8:	bcs	15ac4 <close_stdout@@Base+0x2ccc>
   159dc:	add	r2, r3, #1
   159e0:	str	r2, [fp, #4]
   159e4:	ldrb	r0, [r3]
   159e8:	cmp	r0, #32
   159ec:	beq	159cc <close_stdout@@Base+0x2bd4>
   159f0:	sub	r3, r0, #9
   159f4:	cmp	r3, #1
   159f8:	bls	159cc <close_stdout@@Base+0x2bd4>
   159fc:	cmp	r0, #35	; 0x23
   15a00:	beq	15ad8 <close_stdout@@Base+0x2ce0>
   15a04:	mov	r1, fp
   15a08:	bl	112d4 <ungetc@plt>
   15a0c:	mov	r0, fp
   15a10:	ldr	r1, [sp, #12]
   15a14:	mov	r2, sl
   15a18:	mov	r3, r9
   15a1c:	bl	1152c <fscanf@plt>
   15a20:	cmp	r0, #1
   15a24:	ble	15b08 <close_stdout@@Base+0x2d10>
   15a28:	mov	r0, sl
   15a2c:	bl	11364 <strlen@plt>
   15a30:	str	r0, [sp, #8]
   15a34:	mov	r0, r9
   15a38:	bl	11364 <strlen@plt>
   15a3c:	cmp	r8, #0
   15a40:	mov	r2, r0
   15a44:	bne	15b6c <close_stdout@@Base+0x2d74>
   15a48:	ldr	r3, [sp, #8]
   15a4c:	str	r2, [sp]
   15a50:	add	r8, r0, r3
   15a54:	add	r0, r8, #3
   15a58:	add	r8, r8, #2
   15a5c:	bl	11460 <malloc@plt>
   15a60:	ldr	r2, [sp]
   15a64:	mov	r3, r0
   15a68:	cmp	r3, #0
   15a6c:	beq	15bd0 <close_stdout@@Base+0x2dd8>
   15a70:	ldr	r0, [sp, #8]
   15a74:	movw	r1, #65534	; 0xfffe
   15a78:	movt	r1, #65535	; 0xffff
   15a7c:	rsb	r2, r2, r8
   15a80:	rsb	r1, r0, r1
   15a84:	stm	sp, {r2, r3}
   15a88:	add	r0, r1, r2
   15a8c:	mov	r1, sl
   15a90:	add	r0, r3, r0
   15a94:	mov	r4, r3
   15a98:	bl	113c4 <strcpy@plt>
   15a9c:	ldr	r2, [sp]
   15aa0:	ldr	r3, [sp, #4]
   15aa4:	mov	r1, r9
   15aa8:	sub	r0, r2, #1
   15aac:	add	r0, r3, r0
   15ab0:	bl	113c4 <strcpy@plt>
   15ab4:	ldr	r3, [fp, #4]
   15ab8:	ldr	r2, [fp, #8]
   15abc:	cmp	r3, r2
   15ac0:	bcc	159dc <close_stdout@@Base+0x2be4>
   15ac4:	mov	r0, fp
   15ac8:	bl	112b0 <__uflow@plt>
   15acc:	cmn	r0, #1
   15ad0:	beq	15b08 <close_stdout@@Base+0x2d10>
   15ad4:	b	159e8 <close_stdout@@Base+0x2bf0>
   15ad8:	ldr	r3, [fp, #4]
   15adc:	ldr	r2, [fp, #8]
   15ae0:	cmp	r3, r2
   15ae4:	bcs	15bec <close_stdout@@Base+0x2df4>
   15ae8:	add	r2, r3, #1
   15aec:	str	r2, [fp, #4]
   15af0:	ldrb	r0, [r3]
   15af4:	cmp	r0, #10
   15af8:	cmnne	r0, #1
   15afc:	bne	15ad8 <close_stdout@@Base+0x2ce0>
   15b00:	cmn	r0, #1
   15b04:	bne	159cc <close_stdout@@Base+0x2bd4>
   15b08:	mov	r0, fp
   15b0c:	bl	1547c <close_stdout@@Base+0x2684>
   15b10:	cmp	r8, #0
   15b14:	beq	15b60 <close_stdout@@Base+0x2d68>
   15b18:	mov	r3, #0
   15b1c:	strb	r3, [r4, r8]
   15b20:	mov	r0, r7
   15b24:	bl	11310 <free@plt>
   15b28:	ldr	r3, [pc, #236]	; 15c1c <close_stdout@@Base+0x2e24>
   15b2c:	add	r3, pc, r3
   15b30:	str	r4, [r3]
   15b34:	b	15858 <close_stdout@@Base+0x2a60>
   15b38:	ldr	r8, [pc, #224]	; 15c20 <close_stdout@@Base+0x2e28>
   15b3c:	mov	r3, #7
   15b40:	mov	sl, #8
   15b44:	add	r8, pc, r8
   15b48:	ldrb	r3, [r8, r3]
   15b4c:	cmp	r3, #47	; 0x2f
   15b50:	movne	r9, #1
   15b54:	movne	fp, r9
   15b58:	bne	1593c <close_stdout@@Base+0x2b44>
   15b5c:	b	15934 <close_stdout@@Base+0x2b3c>
   15b60:	ldr	r4, [pc, #188]	; 15c24 <close_stdout@@Base+0x2e2c>
   15b64:	add	r4, pc, r4
   15b68:	b	15b20 <close_stdout@@Base+0x2d28>
   15b6c:	ldr	r0, [sp, #8]
   15b70:	str	r2, [sp]
   15b74:	add	r3, r0, r2
   15b78:	mov	r0, r4
   15b7c:	add	r8, r3, r8
   15b80:	add	r1, r8, #3
   15b84:	add	r8, r8, #2
   15b88:	bl	114e4 <realloc@plt>
   15b8c:	ldr	r2, [sp]
   15b90:	mov	r3, r0
   15b94:	b	15a68 <close_stdout@@Base+0x2c70>
   15b98:	ldr	r4, [pc, #136]	; 15c28 <close_stdout@@Base+0x2e30>
   15b9c:	add	r4, pc, r4
   15ba0:	b	15b28 <close_stdout@@Base+0x2d30>
   15ba4:	ldr	r8, [pc, #128]	; 15c2c <close_stdout@@Base+0x2e34>
   15ba8:	mov	r3, #7
   15bac:	mov	sl, #8
   15bb0:	add	r8, pc, r8
   15bb4:	b	15b48 <close_stdout@@Base+0x2d50>
   15bb8:	ldr	r4, [pc, #112]	; 15c30 <close_stdout@@Base+0x2e38>
   15bbc:	mov	r0, r8
   15bc0:	add	r4, pc, r4
   15bc4:	bl	11418 <close@plt>
   15bc8:	b	15b20 <close_stdout@@Base+0x2d28>
   15bcc:	bl	11484 <__stack_chk_fail@plt>
   15bd0:	mov	r0, r4
   15bd4:	ldr	r4, [pc, #88]	; 15c34 <close_stdout@@Base+0x2e3c>
   15bd8:	bl	11310 <free@plt>
   15bdc:	mov	r0, fp
   15be0:	add	r4, pc, r4
   15be4:	bl	1547c <close_stdout@@Base+0x2684>
   15be8:	b	15b20 <close_stdout@@Base+0x2d28>
   15bec:	mov	r0, fp
   15bf0:	bl	112b0 <__uflow@plt>
   15bf4:	b	15af4 <close_stdout@@Base+0x2cfc>
   15bf8:	ldrdeq	r2, [r1], -r4
   15bfc:	andeq	r0, r0, r4, lsr r1
   15c00:	andeq	r2, r1, ip, lsr #21
   15c04:	andeq	r1, r0, ip, lsr #27
   15c08:	andeq	r1, r0, r8, asr #5
   15c0c:	andeq	r1, r0, r4, lsl #27
   15c10:	andeq	r1, r0, ip, lsr #26
   15c14:	ldrdeq	r0, [r0], -r4
   15c18:	andeq	r1, r0, r8, ror #25
   15c1c:	andeq	r2, r1, ip, asr #15
   15c20:	andeq	r1, r0, r4, lsr fp
   15c24:	andeq	r1, r0, r0, rrx
   15c28:	andeq	r1, r0, r8, lsr #32
   15c2c:	andeq	r1, r0, r8, asr #21
   15c30:	andeq	r1, r0, r4
   15c34:	andeq	r0, r0, r4, ror #31
   15c38:	subs	r2, r1, #1
   15c3c:	bxeq	lr
   15c40:	bcc	15e18 <close_stdout@@Base+0x3020>
   15c44:	cmp	r0, r1
   15c48:	bls	15dfc <close_stdout@@Base+0x3004>
   15c4c:	tst	r1, r2
   15c50:	beq	15e08 <close_stdout@@Base+0x3010>
   15c54:	clz	r3, r0
   15c58:	clz	r2, r1
   15c5c:	sub	r3, r2, r3
   15c60:	rsbs	r3, r3, #31
   15c64:	addne	r3, r3, r3, lsl #1
   15c68:	mov	r2, #0
   15c6c:	addne	pc, pc, r3, lsl #2
   15c70:	nop	{0}
   15c74:	cmp	r0, r1, lsl #31
   15c78:	adc	r2, r2, r2
   15c7c:	subcs	r0, r0, r1, lsl #31
   15c80:	cmp	r0, r1, lsl #30
   15c84:	adc	r2, r2, r2
   15c88:	subcs	r0, r0, r1, lsl #30
   15c8c:	cmp	r0, r1, lsl #29
   15c90:	adc	r2, r2, r2
   15c94:	subcs	r0, r0, r1, lsl #29
   15c98:	cmp	r0, r1, lsl #28
   15c9c:	adc	r2, r2, r2
   15ca0:	subcs	r0, r0, r1, lsl #28
   15ca4:	cmp	r0, r1, lsl #27
   15ca8:	adc	r2, r2, r2
   15cac:	subcs	r0, r0, r1, lsl #27
   15cb0:	cmp	r0, r1, lsl #26
   15cb4:	adc	r2, r2, r2
   15cb8:	subcs	r0, r0, r1, lsl #26
   15cbc:	cmp	r0, r1, lsl #25
   15cc0:	adc	r2, r2, r2
   15cc4:	subcs	r0, r0, r1, lsl #25
   15cc8:	cmp	r0, r1, lsl #24
   15ccc:	adc	r2, r2, r2
   15cd0:	subcs	r0, r0, r1, lsl #24
   15cd4:	cmp	r0, r1, lsl #23
   15cd8:	adc	r2, r2, r2
   15cdc:	subcs	r0, r0, r1, lsl #23
   15ce0:	cmp	r0, r1, lsl #22
   15ce4:	adc	r2, r2, r2
   15ce8:	subcs	r0, r0, r1, lsl #22
   15cec:	cmp	r0, r1, lsl #21
   15cf0:	adc	r2, r2, r2
   15cf4:	subcs	r0, r0, r1, lsl #21
   15cf8:	cmp	r0, r1, lsl #20
   15cfc:	adc	r2, r2, r2
   15d00:	subcs	r0, r0, r1, lsl #20
   15d04:	cmp	r0, r1, lsl #19
   15d08:	adc	r2, r2, r2
   15d0c:	subcs	r0, r0, r1, lsl #19
   15d10:	cmp	r0, r1, lsl #18
   15d14:	adc	r2, r2, r2
   15d18:	subcs	r0, r0, r1, lsl #18
   15d1c:	cmp	r0, r1, lsl #17
   15d20:	adc	r2, r2, r2
   15d24:	subcs	r0, r0, r1, lsl #17
   15d28:	cmp	r0, r1, lsl #16
   15d2c:	adc	r2, r2, r2
   15d30:	subcs	r0, r0, r1, lsl #16
   15d34:	cmp	r0, r1, lsl #15
   15d38:	adc	r2, r2, r2
   15d3c:	subcs	r0, r0, r1, lsl #15
   15d40:	cmp	r0, r1, lsl #14
   15d44:	adc	r2, r2, r2
   15d48:	subcs	r0, r0, r1, lsl #14
   15d4c:	cmp	r0, r1, lsl #13
   15d50:	adc	r2, r2, r2
   15d54:	subcs	r0, r0, r1, lsl #13
   15d58:	cmp	r0, r1, lsl #12
   15d5c:	adc	r2, r2, r2
   15d60:	subcs	r0, r0, r1, lsl #12
   15d64:	cmp	r0, r1, lsl #11
   15d68:	adc	r2, r2, r2
   15d6c:	subcs	r0, r0, r1, lsl #11
   15d70:	cmp	r0, r1, lsl #10
   15d74:	adc	r2, r2, r2
   15d78:	subcs	r0, r0, r1, lsl #10
   15d7c:	cmp	r0, r1, lsl #9
   15d80:	adc	r2, r2, r2
   15d84:	subcs	r0, r0, r1, lsl #9
   15d88:	cmp	r0, r1, lsl #8
   15d8c:	adc	r2, r2, r2
   15d90:	subcs	r0, r0, r1, lsl #8
   15d94:	cmp	r0, r1, lsl #7
   15d98:	adc	r2, r2, r2
   15d9c:	subcs	r0, r0, r1, lsl #7
   15da0:	cmp	r0, r1, lsl #6
   15da4:	adc	r2, r2, r2
   15da8:	subcs	r0, r0, r1, lsl #6
   15dac:	cmp	r0, r1, lsl #5
   15db0:	adc	r2, r2, r2
   15db4:	subcs	r0, r0, r1, lsl #5
   15db8:	cmp	r0, r1, lsl #4
   15dbc:	adc	r2, r2, r2
   15dc0:	subcs	r0, r0, r1, lsl #4
   15dc4:	cmp	r0, r1, lsl #3
   15dc8:	adc	r2, r2, r2
   15dcc:	subcs	r0, r0, r1, lsl #3
   15dd0:	cmp	r0, r1, lsl #2
   15dd4:	adc	r2, r2, r2
   15dd8:	subcs	r0, r0, r1, lsl #2
   15ddc:	cmp	r0, r1, lsl #1
   15de0:	adc	r2, r2, r2
   15de4:	subcs	r0, r0, r1, lsl #1
   15de8:	cmp	r0, r1
   15dec:	adc	r2, r2, r2
   15df0:	subcs	r0, r0, r1
   15df4:	mov	r0, r2
   15df8:	bx	lr
   15dfc:	moveq	r0, #1
   15e00:	movne	r0, #0
   15e04:	bx	lr
   15e08:	clz	r2, r1
   15e0c:	rsb	r2, r2, #31
   15e10:	lsr	r0, r0, r2
   15e14:	bx	lr
   15e18:	cmp	r0, #0
   15e1c:	mvnne	r0, #0
   15e20:	b	15e80 <close_stdout@@Base+0x3088>
   15e24:	cmp	r1, #0
   15e28:	beq	15e18 <close_stdout@@Base+0x3020>
   15e2c:	push	{r0, r1, lr}
   15e30:	bl	15c38 <close_stdout@@Base+0x2e40>
   15e34:	pop	{r1, r2, lr}
   15e38:	mul	r3, r2, r0
   15e3c:	sub	r1, r1, r3
   15e40:	bx	lr
   15e44:	cmp	r3, #0
   15e48:	cmpeq	r2, #0
   15e4c:	bne	15e64 <close_stdout@@Base+0x306c>
   15e50:	cmp	r1, #0
   15e54:	cmpeq	r0, #0
   15e58:	mvnne	r1, #0
   15e5c:	mvnne	r0, #0
   15e60:	b	15e80 <close_stdout@@Base+0x3088>
   15e64:	sub	sp, sp, #8
   15e68:	push	{sp, lr}
   15e6c:	bl	15ecc <close_stdout@@Base+0x30d4>
   15e70:	ldr	lr, [sp, #4]
   15e74:	add	sp, sp, #8
   15e78:	pop	{r2, r3}
   15e7c:	bx	lr
   15e80:	push	{r1, lr}
   15e84:	mov	r0, #8
   15e88:	bl	113f4 <raise@plt>
   15e8c:	pop	{r1, pc}
   15e90:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e94:	mov	r8, r2
   15e98:	mov	r6, r0
   15e9c:	mov	r7, r1
   15ea0:	mov	sl, r3
   15ea4:	ldr	r9, [sp, #32]
   15ea8:	bl	15f08 <close_stdout@@Base+0x3110>
   15eac:	umull	r4, r5, r8, r0
   15eb0:	mul	r8, r8, r1
   15eb4:	mla	r2, r0, sl, r8
   15eb8:	add	r5, r2, r5
   15ebc:	subs	r4, r6, r4
   15ec0:	sbc	r5, r7, r5
   15ec4:	strd	r4, [r9]
   15ec8:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ecc:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   15ed0:	mov	r8, r2
   15ed4:	mov	r6, r0
   15ed8:	mov	r7, r1
   15edc:	mov	r5, r3
   15ee0:	ldr	r9, [sp, #32]
   15ee4:	bl	16394 <close_stdout@@Base+0x359c>
   15ee8:	mul	r3, r0, r5
   15eec:	umull	r4, r5, r0, r8
   15ef0:	mla	r8, r8, r1, r3
   15ef4:	add	r5, r8, r5
   15ef8:	subs	r4, r6, r4
   15efc:	sbc	r5, r7, r5
   15f00:	strd	r4, [r9]
   15f04:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   15f08:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15f0c:	rsbs	r4, r0, #0
   15f10:	rsc	r5, r1, #0
   15f14:	cmp	r1, #0
   15f18:	mvn	r6, #0
   15f1c:	sub	sp, sp, #12
   15f20:	movge	r4, r0
   15f24:	movge	r5, r1
   15f28:	movge	r6, #0
   15f2c:	cmp	r3, #0
   15f30:	blt	16168 <close_stdout@@Base+0x3370>
   15f34:	cmp	r3, #0
   15f38:	mov	sl, r4
   15f3c:	mov	ip, r5
   15f40:	mov	r0, r2
   15f44:	mov	r1, r3
   15f48:	mov	r8, r2
   15f4c:	mov	r7, r4
   15f50:	mov	r9, r5
   15f54:	bne	1604c <close_stdout@@Base+0x3254>
   15f58:	cmp	r2, r5
   15f5c:	bls	16088 <close_stdout@@Base+0x3290>
   15f60:	clz	r3, r2
   15f64:	cmp	r3, #0
   15f68:	rsbne	r2, r3, #32
   15f6c:	lslne	r8, r0, r3
   15f70:	lsrne	r2, r4, r2
   15f74:	lslne	r7, r4, r3
   15f78:	orrne	r9, r2, r5, lsl r3
   15f7c:	lsr	r4, r8, #16
   15f80:	uxth	sl, r8
   15f84:	mov	r1, r4
   15f88:	mov	r0, r9
   15f8c:	bl	15c38 <close_stdout@@Base+0x2e40>
   15f90:	mov	r1, r4
   15f94:	mov	fp, r0
   15f98:	mov	r0, r9
   15f9c:	bl	15e24 <close_stdout@@Base+0x302c>
   15fa0:	mul	r0, sl, fp
   15fa4:	lsr	r2, r7, #16
   15fa8:	orr	r1, r2, r1, lsl #16
   15fac:	cmp	r0, r1
   15fb0:	bls	15fd4 <close_stdout@@Base+0x31dc>
   15fb4:	adds	r1, r1, r8
   15fb8:	sub	r3, fp, #1
   15fbc:	bcs	15fd0 <close_stdout@@Base+0x31d8>
   15fc0:	cmp	r0, r1
   15fc4:	subhi	fp, fp, #2
   15fc8:	addhi	r1, r1, r8
   15fcc:	bhi	15fd4 <close_stdout@@Base+0x31dc>
   15fd0:	mov	fp, r3
   15fd4:	rsb	r9, r0, r1
   15fd8:	mov	r1, r4
   15fdc:	uxth	r7, r7
   15fe0:	mov	r0, r9
   15fe4:	bl	15c38 <close_stdout@@Base+0x2e40>
   15fe8:	mov	r1, r4
   15fec:	mov	r5, r0
   15ff0:	mov	r0, r9
   15ff4:	bl	15e24 <close_stdout@@Base+0x302c>
   15ff8:	mul	sl, sl, r5
   15ffc:	orr	r1, r7, r1, lsl #16
   16000:	cmp	sl, r1
   16004:	bls	16024 <close_stdout@@Base+0x322c>
   16008:	adds	r8, r1, r8
   1600c:	sub	r3, r5, #1
   16010:	bcs	16020 <close_stdout@@Base+0x3228>
   16014:	cmp	sl, r8
   16018:	subhi	r5, r5, #2
   1601c:	bhi	16024 <close_stdout@@Base+0x322c>
   16020:	mov	r5, r3
   16024:	orr	r3, r5, fp, lsl #16
   16028:	mov	r4, #0
   1602c:	cmp	r6, #0
   16030:	mov	r0, r3
   16034:	mov	r1, r4
   16038:	beq	16044 <close_stdout@@Base+0x324c>
   1603c:	rsbs	r0, r0, #0
   16040:	rsc	r1, r1, #0
   16044:	add	sp, sp, #12
   16048:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1604c:	cmp	r3, r5
   16050:	movhi	r4, #0
   16054:	movhi	r3, r4
   16058:	bhi	1602c <close_stdout@@Base+0x3234>
   1605c:	clz	r5, r1
   16060:	cmp	r5, #0
   16064:	bne	16254 <close_stdout@@Base+0x345c>
   16068:	cmp	r1, ip
   1606c:	cmpcs	r2, sl
   16070:	movhi	r4, #0
   16074:	movls	r4, #1
   16078:	movls	r3, #1
   1607c:	movls	r4, r5
   16080:	movhi	r3, r4
   16084:	b	1602c <close_stdout@@Base+0x3234>
   16088:	cmp	r2, #0
   1608c:	bne	160a0 <close_stdout@@Base+0x32a8>
   16090:	mov	r1, r2
   16094:	mov	r0, #1
   16098:	bl	15c38 <close_stdout@@Base+0x2e40>
   1609c:	mov	r8, r0
   160a0:	clz	r3, r8
   160a4:	cmp	r3, #0
   160a8:	bne	16178 <close_stdout@@Base+0x3380>
   160ac:	rsb	r9, r8, r9
   160b0:	lsr	r5, r8, #16
   160b4:	uxth	sl, r8
   160b8:	mov	r4, #1
   160bc:	mov	r1, r5
   160c0:	mov	r0, r9
   160c4:	bl	15c38 <close_stdout@@Base+0x2e40>
   160c8:	mov	r1, r5
   160cc:	mov	fp, r0
   160d0:	mov	r0, r9
   160d4:	bl	15e24 <close_stdout@@Base+0x302c>
   160d8:	mul	r0, sl, fp
   160dc:	lsr	r2, r7, #16
   160e0:	orr	r1, r2, r1, lsl #16
   160e4:	cmp	r0, r1
   160e8:	bls	16108 <close_stdout@@Base+0x3310>
   160ec:	adds	r1, r1, r8
   160f0:	sub	r3, fp, #1
   160f4:	bcs	16374 <close_stdout@@Base+0x357c>
   160f8:	cmp	r0, r1
   160fc:	subhi	fp, fp, #2
   16100:	addhi	r1, r1, r8
   16104:	bls	16374 <close_stdout@@Base+0x357c>
   16108:	rsb	r2, r0, r1
   1610c:	mov	r1, r5
   16110:	str	r2, [sp]
   16114:	uxth	r7, r7
   16118:	mov	r0, r2
   1611c:	bl	15c38 <close_stdout@@Base+0x2e40>
   16120:	ldr	r2, [sp]
   16124:	mov	r1, r5
   16128:	mov	r9, r0
   1612c:	mov	r0, r2
   16130:	bl	15e24 <close_stdout@@Base+0x302c>
   16134:	mul	sl, sl, r9
   16138:	orr	r1, r7, r1, lsl #16
   1613c:	cmp	sl, r1
   16140:	bls	16160 <close_stdout@@Base+0x3368>
   16144:	adds	r8, r1, r8
   16148:	sub	r3, r9, #1
   1614c:	bcs	1615c <close_stdout@@Base+0x3364>
   16150:	cmp	sl, r8
   16154:	subhi	r9, r9, #2
   16158:	bhi	16160 <close_stdout@@Base+0x3368>
   1615c:	mov	r9, r3
   16160:	orr	r3, r9, fp, lsl #16
   16164:	b	1602c <close_stdout@@Base+0x3234>
   16168:	mvn	r6, r6
   1616c:	rsbs	r2, r2, #0
   16170:	rsc	r3, r3, #0
   16174:	b	15f34 <close_stdout@@Base+0x313c>
   16178:	lsl	r8, r8, r3
   1617c:	rsb	fp, r3, #32
   16180:	lsr	r4, r9, fp
   16184:	lsr	fp, r7, fp
   16188:	lsr	r5, r8, #16
   1618c:	orr	fp, fp, r9, lsl r3
   16190:	mov	r0, r4
   16194:	lsl	r7, r7, r3
   16198:	mov	r1, r5
   1619c:	uxth	sl, r8
   161a0:	bl	15c38 <close_stdout@@Base+0x2e40>
   161a4:	mov	r1, r5
   161a8:	mov	r3, r0
   161ac:	mov	r0, r4
   161b0:	str	r3, [sp]
   161b4:	bl	15e24 <close_stdout@@Base+0x302c>
   161b8:	ldr	r3, [sp]
   161bc:	lsr	r2, fp, #16
   161c0:	mul	r0, sl, r3
   161c4:	orr	r1, r2, r1, lsl #16
   161c8:	cmp	r0, r1
   161cc:	bls	161ec <close_stdout@@Base+0x33f4>
   161d0:	adds	r1, r1, r8
   161d4:	sub	r2, r3, #1
   161d8:	bcs	1638c <close_stdout@@Base+0x3594>
   161dc:	cmp	r0, r1
   161e0:	subhi	r3, r3, #2
   161e4:	addhi	r1, r1, r8
   161e8:	bls	1638c <close_stdout@@Base+0x3594>
   161ec:	rsb	r9, r0, r1
   161f0:	mov	r1, r5
   161f4:	str	r3, [sp]
   161f8:	uxth	fp, fp
   161fc:	mov	r0, r9
   16200:	bl	15c38 <close_stdout@@Base+0x2e40>
   16204:	mov	r1, r5
   16208:	mov	r4, r0
   1620c:	mov	r0, r9
   16210:	bl	15e24 <close_stdout@@Base+0x302c>
   16214:	mul	r9, sl, r4
   16218:	ldr	r3, [sp]
   1621c:	orr	r1, fp, r1, lsl #16
   16220:	cmp	r9, r1
   16224:	bls	16248 <close_stdout@@Base+0x3450>
   16228:	adds	r1, r1, r8
   1622c:	sub	r2, r4, #1
   16230:	bcs	16244 <close_stdout@@Base+0x344c>
   16234:	cmp	r9, r1
   16238:	subhi	r4, r4, #2
   1623c:	addhi	r1, r1, r8
   16240:	bhi	16248 <close_stdout@@Base+0x3450>
   16244:	mov	r4, r2
   16248:	rsb	r9, r9, r1
   1624c:	orr	r4, r4, r3, lsl #16
   16250:	b	160bc <close_stdout@@Base+0x32c4>
   16254:	rsb	sl, r5, #32
   16258:	lsl	r3, r2, r5
   1625c:	lsr	r0, r2, sl
   16260:	lsr	r2, ip, sl
   16264:	orr	r4, r0, r1, lsl r5
   16268:	lsr	sl, r7, sl
   1626c:	mov	r0, r2
   16270:	orr	sl, sl, ip, lsl r5
   16274:	lsr	r9, r4, #16
   16278:	str	r3, [sp, #4]
   1627c:	str	r2, [sp]
   16280:	uxth	fp, r4
   16284:	mov	r1, r9
   16288:	bl	15c38 <close_stdout@@Base+0x2e40>
   1628c:	ldr	r2, [sp]
   16290:	mov	r1, r9
   16294:	mov	r8, r0
   16298:	mov	r0, r2
   1629c:	bl	15e24 <close_stdout@@Base+0x302c>
   162a0:	mul	r0, fp, r8
   162a4:	lsr	r2, sl, #16
   162a8:	orr	r1, r2, r1, lsl #16
   162ac:	cmp	r0, r1
   162b0:	bls	162d0 <close_stdout@@Base+0x34d8>
   162b4:	adds	r1, r1, r4
   162b8:	sub	r2, r8, #1
   162bc:	bcs	16384 <close_stdout@@Base+0x358c>
   162c0:	cmp	r0, r1
   162c4:	subhi	r8, r8, #2
   162c8:	addhi	r1, r1, r4
   162cc:	bls	16384 <close_stdout@@Base+0x358c>
   162d0:	rsb	ip, r0, r1
   162d4:	mov	r1, r9
   162d8:	str	ip, [sp]
   162dc:	mov	r0, ip
   162e0:	bl	15c38 <close_stdout@@Base+0x2e40>
   162e4:	ldr	ip, [sp]
   162e8:	mov	r1, r9
   162ec:	mov	r2, r0
   162f0:	mov	r0, ip
   162f4:	str	r2, [sp]
   162f8:	bl	15e24 <close_stdout@@Base+0x302c>
   162fc:	ldr	r2, [sp]
   16300:	uxth	ip, sl
   16304:	mul	fp, fp, r2
   16308:	orr	ip, ip, r1, lsl #16
   1630c:	cmp	fp, ip
   16310:	bls	16330 <close_stdout@@Base+0x3538>
   16314:	adds	ip, ip, r4
   16318:	sub	r1, r2, #1
   1631c:	bcs	1637c <close_stdout@@Base+0x3584>
   16320:	cmp	fp, ip
   16324:	subhi	r2, r2, #2
   16328:	addhi	ip, ip, r4
   1632c:	bls	1637c <close_stdout@@Base+0x3584>
   16330:	ldr	r0, [sp, #4]
   16334:	orr	r1, r2, r8, lsl #16
   16338:	rsb	fp, fp, ip
   1633c:	umull	r2, r3, r1, r0
   16340:	cmp	fp, r3
   16344:	bcc	16368 <close_stdout@@Base+0x3570>
   16348:	movne	r4, #0
   1634c:	moveq	r4, #1
   16350:	cmp	r2, r7, lsl r5
   16354:	movls	r4, #0
   16358:	andhi	r4, r4, #1
   1635c:	cmp	r4, #0
   16360:	moveq	r3, r1
   16364:	beq	1602c <close_stdout@@Base+0x3234>
   16368:	sub	r3, r1, #1
   1636c:	mov	r4, #0
   16370:	b	1602c <close_stdout@@Base+0x3234>
   16374:	mov	fp, r3
   16378:	b	16108 <close_stdout@@Base+0x3310>
   1637c:	mov	r2, r1
   16380:	b	16330 <close_stdout@@Base+0x3538>
   16384:	mov	r8, r2
   16388:	b	162d0 <close_stdout@@Base+0x34d8>
   1638c:	mov	r3, r2
   16390:	b	161ec <close_stdout@@Base+0x33f4>
   16394:	cmp	r3, #0
   16398:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1639c:	mov	r6, r0
   163a0:	sub	sp, sp, #12
   163a4:	mov	r5, r1
   163a8:	mov	r7, r0
   163ac:	mov	r4, r2
   163b0:	mov	r8, r1
   163b4:	bne	16494 <close_stdout@@Base+0x369c>
   163b8:	cmp	r2, r1
   163bc:	bls	164d0 <close_stdout@@Base+0x36d8>
   163c0:	clz	r3, r2
   163c4:	cmp	r3, #0
   163c8:	rsbne	r8, r3, #32
   163cc:	lslne	r4, r2, r3
   163d0:	lsrne	r8, r0, r8
   163d4:	lslne	r7, r0, r3
   163d8:	orrne	r8, r8, r1, lsl r3
   163dc:	lsr	r5, r4, #16
   163e0:	uxth	sl, r4
   163e4:	mov	r1, r5
   163e8:	mov	r0, r8
   163ec:	bl	15c38 <close_stdout@@Base+0x2e40>
   163f0:	mov	r1, r5
   163f4:	mov	r9, r0
   163f8:	mov	r0, r8
   163fc:	bl	15e24 <close_stdout@@Base+0x302c>
   16400:	mul	r0, sl, r9
   16404:	lsr	r3, r7, #16
   16408:	orr	r1, r3, r1, lsl #16
   1640c:	cmp	r0, r1
   16410:	bls	16434 <close_stdout@@Base+0x363c>
   16414:	adds	r1, r1, r4
   16418:	sub	r2, r9, #1
   1641c:	bcs	16430 <close_stdout@@Base+0x3638>
   16420:	cmp	r0, r1
   16424:	subhi	r9, r9, #2
   16428:	addhi	r1, r1, r4
   1642c:	bhi	16434 <close_stdout@@Base+0x363c>
   16430:	mov	r9, r2
   16434:	rsb	r8, r0, r1
   16438:	mov	r1, r5
   1643c:	uxth	r7, r7
   16440:	mov	r0, r8
   16444:	bl	15c38 <close_stdout@@Base+0x2e40>
   16448:	mov	r1, r5
   1644c:	mov	r6, r0
   16450:	mov	r0, r8
   16454:	bl	15e24 <close_stdout@@Base+0x302c>
   16458:	mul	sl, sl, r6
   1645c:	orr	r1, r7, r1, lsl #16
   16460:	cmp	sl, r1
   16464:	bls	16480 <close_stdout@@Base+0x3688>
   16468:	adds	r4, r1, r4
   1646c:	sub	r3, r6, #1
   16470:	bcs	1677c <close_stdout@@Base+0x3984>
   16474:	cmp	sl, r4
   16478:	subhi	r6, r6, #2
   1647c:	bls	1677c <close_stdout@@Base+0x3984>
   16480:	orr	r0, r6, r9, lsl #16
   16484:	mov	r6, #0
   16488:	mov	r1, r6
   1648c:	add	sp, sp, #12
   16490:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16494:	cmp	r3, r1
   16498:	movhi	r6, #0
   1649c:	movhi	r0, r6
   164a0:	bhi	16488 <close_stdout@@Base+0x3690>
   164a4:	clz	r7, r3
   164a8:	cmp	r7, #0
   164ac:	bne	165ac <close_stdout@@Base+0x37b4>
   164b0:	cmp	r3, r1
   164b4:	cmpcs	r2, r6
   164b8:	movhi	r6, #0
   164bc:	movls	r6, #1
   164c0:	movls	r0, #1
   164c4:	movls	r6, r7
   164c8:	movhi	r0, r6
   164cc:	b	16488 <close_stdout@@Base+0x3690>
   164d0:	cmp	r2, #0
   164d4:	bne	164e8 <close_stdout@@Base+0x36f0>
   164d8:	mov	r1, r2
   164dc:	mov	r0, #1
   164e0:	bl	15c38 <close_stdout@@Base+0x2e40>
   164e4:	mov	r4, r0
   164e8:	clz	r3, r4
   164ec:	cmp	r3, #0
   164f0:	bne	166a8 <close_stdout@@Base+0x38b0>
   164f4:	rsb	r5, r4, r5
   164f8:	lsr	r8, r4, #16
   164fc:	uxth	sl, r4
   16500:	mov	r6, #1
   16504:	mov	r1, r8
   16508:	mov	r0, r5
   1650c:	bl	15c38 <close_stdout@@Base+0x2e40>
   16510:	mov	r1, r8
   16514:	mov	r9, r0
   16518:	mov	r0, r5
   1651c:	bl	15e24 <close_stdout@@Base+0x302c>
   16520:	mul	r0, sl, r9
   16524:	lsr	r3, r7, #16
   16528:	orr	r1, r3, r1, lsl #16
   1652c:	cmp	r0, r1
   16530:	bls	16550 <close_stdout@@Base+0x3758>
   16534:	adds	r1, r1, r4
   16538:	sub	r2, r9, #1
   1653c:	bcs	16784 <close_stdout@@Base+0x398c>
   16540:	cmp	r0, r1
   16544:	subhi	r9, r9, #2
   16548:	addhi	r1, r1, r4
   1654c:	bls	16784 <close_stdout@@Base+0x398c>
   16550:	rsb	fp, r0, r1
   16554:	mov	r1, r8
   16558:	uxth	r7, r7
   1655c:	mov	r0, fp
   16560:	bl	15c38 <close_stdout@@Base+0x2e40>
   16564:	mov	r1, r8
   16568:	mov	r5, r0
   1656c:	mov	r0, fp
   16570:	bl	15e24 <close_stdout@@Base+0x302c>
   16574:	mul	sl, sl, r5
   16578:	orr	r1, r7, r1, lsl #16
   1657c:	cmp	sl, r1
   16580:	bls	1659c <close_stdout@@Base+0x37a4>
   16584:	adds	r4, r1, r4
   16588:	sub	r3, r5, #1
   1658c:	bcs	1678c <close_stdout@@Base+0x3994>
   16590:	cmp	sl, r4
   16594:	subhi	r5, r5, #2
   16598:	bls	1678c <close_stdout@@Base+0x3994>
   1659c:	orr	r0, r5, r9, lsl #16
   165a0:	mov	r1, r6
   165a4:	add	sp, sp, #12
   165a8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   165ac:	rsb	r1, r7, #32
   165b0:	lsl	r0, r2, r7
   165b4:	lsr	r2, r2, r1
   165b8:	lsr	fp, r5, r1
   165bc:	orr	r8, r2, r3, lsl r7
   165c0:	lsr	r1, r6, r1
   165c4:	str	r0, [sp, #4]
   165c8:	orr	r5, r1, r5, lsl r7
   165cc:	lsr	r9, r8, #16
   165d0:	mov	r0, fp
   165d4:	uxth	sl, r8
   165d8:	mov	r1, r9
   165dc:	bl	15c38 <close_stdout@@Base+0x2e40>
   165e0:	mov	r1, r9
   165e4:	mov	r4, r0
   165e8:	mov	r0, fp
   165ec:	bl	15e24 <close_stdout@@Base+0x302c>
   165f0:	mul	r0, sl, r4
   165f4:	lsr	ip, r5, #16
   165f8:	orr	r1, ip, r1, lsl #16
   165fc:	cmp	r0, r1
   16600:	bls	16614 <close_stdout@@Base+0x381c>
   16604:	adds	r1, r1, r8
   16608:	sub	r2, r4, #1
   1660c:	bcc	167a8 <close_stdout@@Base+0x39b0>
   16610:	mov	r4, r2
   16614:	rsb	ip, r0, r1
   16618:	mov	r1, r9
   1661c:	str	ip, [sp]
   16620:	uxth	r5, r5
   16624:	mov	r0, ip
   16628:	bl	15c38 <close_stdout@@Base+0x2e40>
   1662c:	ldr	ip, [sp]
   16630:	mov	r1, r9
   16634:	mov	fp, r0
   16638:	mov	r0, ip
   1663c:	bl	15e24 <close_stdout@@Base+0x302c>
   16640:	mul	sl, sl, fp
   16644:	orr	r1, r5, r1, lsl #16
   16648:	cmp	sl, r1
   1664c:	bls	16660 <close_stdout@@Base+0x3868>
   16650:	adds	r1, r1, r8
   16654:	sub	r2, fp, #1
   16658:	bcc	16794 <close_stdout@@Base+0x399c>
   1665c:	mov	fp, r2
   16660:	ldr	r3, [sp, #4]
   16664:	orr	r0, fp, r4, lsl #16
   16668:	rsb	sl, sl, r1
   1666c:	umull	r4, r5, r0, r3
   16670:	cmp	sl, r5
   16674:	bcc	16694 <close_stdout@@Base+0x389c>
   16678:	movne	r3, #0
   1667c:	moveq	r3, #1
   16680:	cmp	r4, r6, lsl r7
   16684:	movls	r6, #0
   16688:	andhi	r6, r3, #1
   1668c:	cmp	r6, #0
   16690:	beq	16488 <close_stdout@@Base+0x3690>
   16694:	mov	r6, #0
   16698:	sub	r0, r0, #1
   1669c:	mov	r1, r6
   166a0:	add	sp, sp, #12
   166a4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   166a8:	lsl	r4, r4, r3
   166ac:	rsb	r9, r3, #32
   166b0:	lsr	r2, r5, r9
   166b4:	lsr	r9, r6, r9
   166b8:	lsr	r8, r4, #16
   166bc:	orr	r9, r9, r5, lsl r3
   166c0:	mov	r0, r2
   166c4:	lsl	r7, r6, r3
   166c8:	mov	r1, r8
   166cc:	str	r2, [sp]
   166d0:	bl	15c38 <close_stdout@@Base+0x2e40>
   166d4:	ldr	r2, [sp]
   166d8:	mov	r1, r8
   166dc:	uxth	sl, r4
   166e0:	mov	fp, r0
   166e4:	mov	r0, r2
   166e8:	bl	15e24 <close_stdout@@Base+0x302c>
   166ec:	mul	r0, sl, fp
   166f0:	lsr	r3, r9, #16
   166f4:	orr	r1, r3, r1, lsl #16
   166f8:	cmp	r0, r1
   166fc:	bls	1671c <close_stdout@@Base+0x3924>
   16700:	adds	r1, r1, r4
   16704:	sub	r3, fp, #1
   16708:	bcs	167bc <close_stdout@@Base+0x39c4>
   1670c:	cmp	r0, r1
   16710:	subhi	fp, fp, #2
   16714:	addhi	r1, r1, r4
   16718:	bls	167bc <close_stdout@@Base+0x39c4>
   1671c:	rsb	r5, r0, r1
   16720:	mov	r1, r8
   16724:	uxth	r9, r9
   16728:	mov	r0, r5
   1672c:	bl	15c38 <close_stdout@@Base+0x2e40>
   16730:	mov	r1, r8
   16734:	mov	r6, r0
   16738:	mov	r0, r5
   1673c:	bl	15e24 <close_stdout@@Base+0x302c>
   16740:	mul	r5, sl, r6
   16744:	orr	r1, r9, r1, lsl #16
   16748:	cmp	r5, r1
   1674c:	bls	16770 <close_stdout@@Base+0x3978>
   16750:	adds	r1, r1, r4
   16754:	sub	r3, r6, #1
   16758:	bcs	1676c <close_stdout@@Base+0x3974>
   1675c:	cmp	r5, r1
   16760:	subhi	r6, r6, #2
   16764:	addhi	r1, r1, r4
   16768:	bhi	16770 <close_stdout@@Base+0x3978>
   1676c:	mov	r6, r3
   16770:	rsb	r5, r5, r1
   16774:	orr	r6, r6, fp, lsl #16
   16778:	b	16504 <close_stdout@@Base+0x370c>
   1677c:	mov	r6, r3
   16780:	b	16480 <close_stdout@@Base+0x3688>
   16784:	mov	r9, r2
   16788:	b	16550 <close_stdout@@Base+0x3758>
   1678c:	mov	r5, r3
   16790:	b	1659c <close_stdout@@Base+0x37a4>
   16794:	cmp	sl, r1
   16798:	subhi	fp, fp, #2
   1679c:	addhi	r1, r1, r8
   167a0:	bhi	16660 <close_stdout@@Base+0x3868>
   167a4:	b	1665c <close_stdout@@Base+0x3864>
   167a8:	cmp	r0, r1
   167ac:	subhi	r4, r4, #2
   167b0:	addhi	r1, r1, r8
   167b4:	bhi	16614 <close_stdout@@Base+0x381c>
   167b8:	b	16610 <close_stdout@@Base+0x3818>
   167bc:	mov	fp, r3
   167c0:	b	1671c <close_stdout@@Base+0x3924>
   167c4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   167c8:	mov	r7, r0
   167cc:	ldr	r6, [pc, #76]	; 16820 <close_stdout@@Base+0x3a28>
   167d0:	mov	r8, r1
   167d4:	ldr	r5, [pc, #72]	; 16824 <close_stdout@@Base+0x3a2c>
   167d8:	mov	r9, r2
   167dc:	add	r6, pc, r6
   167e0:	bl	111dc <_init@@Base>
   167e4:	add	r5, pc, r5
   167e8:	rsb	r6, r5, r6
   167ec:	asrs	r6, r6, #2
   167f0:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   167f4:	sub	r5, r5, #4
   167f8:	mov	r4, #0
   167fc:	add	r4, r4, #1
   16800:	ldr	r3, [r5, #4]!
   16804:	mov	r0, r7
   16808:	mov	r1, r8
   1680c:	mov	r2, r9
   16810:	blx	r3
   16814:	cmp	r4, r6
   16818:	bne	167fc <close_stdout@@Base+0x3a04>
   1681c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16820:	andeq	r1, r1, r0, asr #12
   16824:	andeq	r1, r1, r4, lsr r6
   16828:	bx	lr
   1682c:	ldr	r3, [pc, #28]	; 16850 <close_stdout@@Base+0x3a58>
   16830:	mov	r1, #0
   16834:	ldr	r2, [pc, #24]	; 16854 <close_stdout@@Base+0x3a5c>
   16838:	add	r3, pc, r3
   1683c:	ldr	r3, [r3, r2]
   16840:	cmp	r3, #0
   16844:	ldrne	r2, [r3]
   16848:	moveq	r2, r3
   1684c:	b	1128c <__cxa_atexit@plt>
   16850:	andeq	r1, r1, r0, asr #15
   16854:	andeq	r0, r0, ip, lsr #2

Disassembly of section .fini:

00016858 <_fini@@Base>:
   16858:	push	{r3, lr}
   1685c:	pop	{r3, pc}
