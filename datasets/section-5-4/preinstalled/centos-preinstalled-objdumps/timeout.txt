
centos-preinstalled/timeout:     file format elf32-littlearm


Disassembly of section .init:

00011480 <.init>:
   11480:	push	{r3, lr}
   11484:	bl	11eb8 <__assert_fail@plt+0x628>
   11488:	pop	{r3, pc}

Disassembly of section .plt:

0001148c <fdopen@plt-0x14>:
   1148c:	push	{lr}		; (str lr, [sp, #-4]!)
   11490:	ldr	lr, [pc, #4]	; 1149c <fdopen@plt-0x4>
   11494:	add	lr, pc, lr
   11498:	ldr	pc, [lr, #8]!
   1149c:	andeq	r8, r1, r4, ror #22

000114a0 <fdopen@plt>:
   114a0:	add	ip, pc, #0, 12
   114a4:	add	ip, ip, #24, 20	; 0x18000
   114a8:	ldr	pc, [ip, #2916]!	; 0xb64

000114ac <calloc@plt>:
   114ac:	add	ip, pc, #0, 12
   114b0:	add	ip, ip, #24, 20	; 0x18000
   114b4:	ldr	pc, [ip, #2908]!	; 0xb5c

000114b8 <fputs_unlocked@plt>:
   114b8:	add	ip, pc, #0, 12
   114bc:	add	ip, ip, #24, 20	; 0x18000
   114c0:	ldr	pc, [ip, #2900]!	; 0xb54

000114c4 <raise@plt>:
   114c4:	add	ip, pc, #0, 12
   114c8:	add	ip, ip, #24, 20	; 0x18000
   114cc:	ldr	pc, [ip, #2892]!	; 0xb4c

000114d0 <iconv_close@plt>:
   114d0:	add	ip, pc, #0, 12
   114d4:	add	ip, ip, #24, 20	; 0x18000
   114d8:	ldr	pc, [ip, #2884]!	; 0xb44

000114dc <iconv@plt>:
   114dc:	add	ip, pc, #0, 12
   114e0:	add	ip, ip, #24, 20	; 0x18000
   114e4:	ldr	pc, [ip, #2876]!	; 0xb3c

000114e8 <strcmp@plt>:
   114e8:	add	ip, pc, #0, 12
   114ec:	add	ip, ip, #24, 20	; 0x18000
   114f0:	ldr	pc, [ip, #2868]!	; 0xb34

000114f4 <strtol@plt>:
   114f4:	add	ip, pc, #0, 12
   114f8:	add	ip, ip, #24, 20	; 0x18000
   114fc:	ldr	pc, [ip, #2860]!	; 0xb2c

00011500 <fflush@plt>:
   11500:	add	ip, pc, #0, 12
   11504:	add	ip, ip, #24, 20	; 0x18000
   11508:	ldr	pc, [ip, #2852]!	; 0xb24

0001150c <wcwidth@plt>:
   1150c:	add	ip, pc, #0, 12
   11510:	add	ip, ip, #24, 20	; 0x18000
   11514:	ldr	pc, [ip, #2844]!	; 0xb1c

00011518 <sigprocmask@plt>:
   11518:	add	ip, pc, #0, 12
   1151c:	add	ip, ip, #24, 20	; 0x18000
   11520:	ldr	pc, [ip, #2836]!	; 0xb14

00011524 <memmove@plt>:
   11524:	add	ip, pc, #0, 12
   11528:	add	ip, ip, #24, 20	; 0x18000
   1152c:	ldr	pc, [ip, #2828]!	; 0xb0c

00011530 <free@plt>:
   11530:	add	ip, pc, #0, 12
   11534:	add	ip, ip, #24, 20	; 0x18000
   11538:	ldr	pc, [ip, #2820]!	; 0xb04

0001153c <_exit@plt>:
   1153c:	add	ip, pc, #0, 12
   11540:	add	ip, ip, #24, 20	; 0x18000
   11544:	ldr	pc, [ip, #2812]!	; 0xafc

00011548 <memcpy@plt>:
   11548:	add	ip, pc, #0, 12
   1154c:	add	ip, ip, #24, 20	; 0x18000
   11550:	ldr	pc, [ip, #2804]!	; 0xaf4

00011554 <execvp@plt>:
   11554:	add	ip, pc, #0, 12
   11558:	add	ip, ip, #24, 20	; 0x18000
   1155c:	ldr	pc, [ip, #2796]!	; 0xaec

00011560 <mbsinit@plt>:
   11560:	add	ip, pc, #0, 12
   11564:	add	ip, ip, #24, 20	; 0x18000
   11568:	ldr	pc, [ip, #2788]!	; 0xae4

0001156c <signal@plt>:
   1156c:	add	ip, pc, #0, 12
   11570:	add	ip, ip, #24, 20	; 0x18000
   11574:	ldr	pc, [ip, #2780]!	; 0xadc

00011578 <memcmp@plt>:
   11578:	add	ip, pc, #0, 12
   1157c:	add	ip, ip, #24, 20	; 0x18000
   11580:	ldr	pc, [ip, #2772]!	; 0xad4

00011584 <dcgettext@plt>:
   11584:	add	ip, pc, #0, 12
   11588:	add	ip, ip, #24, 20	; 0x18000
   1158c:	ldr	pc, [ip, #2764]!	; 0xacc

00011590 <__stack_chk_fail@plt>:
   11590:	add	ip, pc, #0, 12
   11594:	add	ip, ip, #24, 20	; 0x18000
   11598:	ldr	pc, [ip, #2756]!	; 0xac4

0001159c <alarm@plt>:
   1159c:	add	ip, pc, #0, 12
   115a0:	add	ip, ip, #24, 20	; 0x18000
   115a4:	ldr	pc, [ip, #2748]!	; 0xabc

000115a8 <realloc@plt>:
   115a8:	add	ip, pc, #0, 12
   115ac:	add	ip, ip, #24, 20	; 0x18000
   115b0:	ldr	pc, [ip, #2740]!	; 0xab4

000115b4 <timer_create@plt>:
   115b4:	add	ip, pc, #0, 12
   115b8:	add	ip, ip, #24, 20	; 0x18000
   115bc:	ldr	pc, [ip, #2732]!	; 0xaac

000115c0 <textdomain@plt>:
   115c0:	add	ip, pc, #0, 12
   115c4:	add	ip, ip, #24, 20	; 0x18000
   115c8:	ldr	pc, [ip, #2724]!	; 0xaa4

000115cc <iswcntrl@plt>:
   115cc:	add	ip, pc, #0, 12
   115d0:	add	ip, ip, #24, 20	; 0x18000
   115d4:	ldr	pc, [ip, #2716]!	; 0xa9c

000115d8 <iswprint@plt>:
   115d8:	add	ip, pc, #0, 12
   115dc:	add	ip, ip, #24, 20	; 0x18000
   115e0:	ldr	pc, [ip, #2708]!	; 0xa94

000115e4 <timer_settime@plt>:
   115e4:	add	ip, pc, #0, 12
   115e8:	add	ip, ip, #24, 20	; 0x18000
   115ec:	ldr	pc, [ip, #2700]!	; 0xa8c

000115f0 <sigaction@plt>:
   115f0:	add	ip, pc, #0, 12
   115f4:	add	ip, ip, #24, 20	; 0x18000
   115f8:	ldr	pc, [ip, #2692]!	; 0xa84

000115fc <fwrite@plt>:
   115fc:	add	ip, pc, #0, 12
   11600:	add	ip, ip, #24, 20	; 0x18000
   11604:	ldr	pc, [ip, #2684]!	; 0xa7c

00011608 <lseek64@plt>:
   11608:	add	ip, pc, #0, 12
   1160c:	add	ip, ip, #24, 20	; 0x18000
   11610:	ldr	pc, [ip, #2676]!	; 0xa74

00011614 <waitpid@plt>:
   11614:	add	ip, pc, #0, 12
   11618:	add	ip, ip, #24, 20	; 0x18000
   1161c:	ldr	pc, [ip, #2668]!	; 0xa6c

00011620 <__ctype_get_mb_cur_max@plt>:
   11620:	add	ip, pc, #0, 12
   11624:	add	ip, ip, #24, 20	; 0x18000
   11628:	ldr	pc, [ip, #2660]!	; 0xa64

0001162c <strcpy@plt>:
   1162c:	add	ip, pc, #0, 12
   11630:	add	ip, ip, #24, 20	; 0x18000
   11634:	ldr	pc, [ip, #2652]!	; 0xa5c

00011638 <__fpending@plt>:
   11638:	add	ip, pc, #0, 12
   1163c:	add	ip, ip, #24, 20	; 0x18000
   11640:	ldr	pc, [ip, #2644]!	; 0xa54

00011644 <mbrtowc@plt>:
   11644:	add	ip, pc, #0, 12
   11648:	add	ip, ip, #24, 20	; 0x18000
   1164c:	ldr	pc, [ip, #2636]!	; 0xa4c

00011650 <error@plt>:
   11650:	add	ip, pc, #0, 12
   11654:	add	ip, ip, #24, 20	; 0x18000
   11658:	ldr	pc, [ip, #2628]!	; 0xa44

0001165c <timer_delete@plt>:
   1165c:	add	ip, pc, #0, 12
   11660:	add	ip, ip, #24, 20	; 0x18000
   11664:	ldr	pc, [ip, #2620]!	; 0xa3c

00011668 <open64@plt>:
   11668:	add	ip, pc, #0, 12
   1166c:	add	ip, ip, #24, 20	; 0x18000
   11670:	ldr	pc, [ip, #2612]!	; 0xa34

00011674 <getenv@plt>:
   11674:	add	ip, pc, #0, 12
   11678:	add	ip, ip, #24, 20	; 0x18000
   1167c:	ldr	pc, [ip, #2604]!	; 0xa2c

00011680 <malloc@plt>:
   11680:	add	ip, pc, #0, 12
   11684:	add	ip, ip, #24, 20	; 0x18000
   11688:	ldr	pc, [ip, #2596]!	; 0xa24

0001168c <iconv_open@plt>:
   1168c:	add	ip, pc, #0, 12
   11690:	add	ip, ip, #24, 20	; 0x18000
   11694:	ldr	pc, [ip, #2588]!	; 0xa1c

00011698 <sigaddset@plt>:
   11698:	add	ip, pc, #0, 12
   1169c:	add	ip, ip, #24, 20	; 0x18000
   116a0:	ldr	pc, [ip, #2580]!	; 0xa14

000116a4 <__libc_start_main@plt>:
   116a4:	add	ip, pc, #0, 12
   116a8:	add	ip, ip, #24, 20	; 0x18000
   116ac:	ldr	pc, [ip, #2572]!	; 0xa0c

000116b0 <__freading@plt>:
   116b0:	add	ip, pc, #0, 12
   116b4:	add	ip, ip, #24, 20	; 0x18000
   116b8:	ldr	pc, [ip, #2564]!	; 0xa04

000116bc <__gmon_start__@plt>:
   116bc:	add	ip, pc, #0, 12
   116c0:	add	ip, ip, #24, 20	; 0x18000
   116c4:	ldr	pc, [ip, #2556]!	; 0x9fc

000116c8 <getopt_long@plt>:
   116c8:	add	ip, pc, #0, 12
   116cc:	add	ip, ip, #24, 20	; 0x18000
   116d0:	ldr	pc, [ip, #2548]!	; 0x9f4

000116d4 <kill@plt>:
   116d4:	add	ip, pc, #0, 12
   116d8:	add	ip, ip, #24, 20	; 0x18000
   116dc:	ldr	pc, [ip, #2540]!	; 0x9ec

000116e0 <__ctype_b_loc@plt>:
   116e0:	add	ip, pc, #0, 12
   116e4:	add	ip, ip, #24, 20	; 0x18000
   116e8:	ldr	pc, [ip, #2532]!	; 0x9e4

000116ec <exit@plt>:
   116ec:	add	ip, pc, #0, 12
   116f0:	add	ip, ip, #24, 20	; 0x18000
   116f4:	ldr	pc, [ip, #2524]!	; 0x9dc

000116f8 <iswspace@plt>:
   116f8:	add	ip, pc, #0, 12
   116fc:	add	ip, ip, #24, 20	; 0x18000
   11700:	ldr	pc, [ip, #2516]!	; 0x9d4

00011704 <strlen@plt>:
   11704:	add	ip, pc, #0, 12
   11708:	add	ip, ip, #24, 20	; 0x18000
   1170c:	ldr	pc, [ip, #2508]!	; 0x9cc

00011710 <__libc_current_sigrtmax@plt>:
   11710:	add	ip, pc, #0, 12
   11714:	add	ip, ip, #24, 20	; 0x18000
   11718:	ldr	pc, [ip, #2500]!	; 0x9c4

0001171c <strchr@plt>:
   1171c:	add	ip, pc, #0, 12
   11720:	add	ip, ip, #24, 20	; 0x18000
   11724:	ldr	pc, [ip, #2492]!	; 0x9bc

00011728 <ungetc@plt>:
   11728:	add	ip, pc, #0, 12
   1172c:	add	ip, ip, #24, 20	; 0x18000
   11730:	ldr	pc, [ip, #2484]!	; 0x9b4

00011734 <__errno_location@plt>:
   11734:	add	ip, pc, #0, 12
   11738:	add	ip, ip, #24, 20	; 0x18000
   1173c:	ldr	pc, [ip, #2476]!	; 0x9ac

00011740 <iswalnum@plt>:
   11740:	add	ip, pc, #0, 12
   11744:	add	ip, ip, #24, 20	; 0x18000
   11748:	ldr	pc, [ip, #2468]!	; 0x9a4

0001174c <__sprintf_chk@plt>:
   1174c:	add	ip, pc, #0, 12
   11750:	add	ip, ip, #24, 20	; 0x18000
   11754:	ldr	pc, [ip, #2460]!	; 0x99c

00011758 <__cxa_atexit@plt>:
   11758:	add	ip, pc, #0, 12
   1175c:	add	ip, ip, #24, 20	; 0x18000
   11760:	ldr	pc, [ip, #2452]!	; 0x994

00011764 <__strdup@plt>:
   11764:	add	ip, pc, #0, 12
   11768:	add	ip, ip, #24, 20	; 0x18000
   1176c:	ldr	pc, [ip, #2444]!	; 0x98c

00011770 <memset@plt>:
   11770:	add	ip, pc, #0, 12
   11774:	add	ip, ip, #24, 20	; 0x18000
   11778:	ldr	pc, [ip, #2436]!	; 0x984

0001177c <fscanf@plt>:
   1177c:	add	ip, pc, #0, 12
   11780:	add	ip, ip, #24, 20	; 0x18000
   11784:	ldr	pc, [ip, #2428]!	; 0x97c

00011788 <__printf_chk@plt>:
   11788:	add	ip, pc, #0, 12
   1178c:	add	ip, ip, #24, 20	; 0x18000
   11790:	ldr	pc, [ip, #2420]!	; 0x974

00011794 <prctl@plt>:
   11794:	add	ip, pc, #0, 12
   11798:	add	ip, ip, #24, 20	; 0x18000
   1179c:	ldr	pc, [ip, #2412]!	; 0x96c

000117a0 <fileno@plt>:
   117a0:	add	ip, pc, #0, 12
   117a4:	add	ip, ip, #24, 20	; 0x18000
   117a8:	ldr	pc, [ip, #2404]!	; 0x964

000117ac <__fprintf_chk@plt>:
   117ac:	add	ip, pc, #0, 12
   117b0:	add	ip, ip, #24, 20	; 0x18000
   117b4:	ldr	pc, [ip, #2396]!	; 0x95c

000117b8 <memchr@plt>:
   117b8:	add	ip, pc, #0, 12
   117bc:	add	ip, ip, #24, 20	; 0x18000
   117c0:	ldr	pc, [ip, #2388]!	; 0x954

000117c4 <fclose@plt>:
   117c4:	add	ip, pc, #0, 12
   117c8:	add	ip, ip, #24, 20	; 0x18000
   117cc:	ldr	pc, [ip, #2380]!	; 0x94c

000117d0 <strnlen@plt>:
   117d0:	add	ip, pc, #0, 12
   117d4:	add	ip, ip, #24, 20	; 0x18000
   117d8:	ldr	pc, [ip, #2372]!	; 0x944

000117dc <fseeko64@plt>:
   117dc:	add	ip, pc, #0, 12
   117e0:	add	ip, ip, #24, 20	; 0x18000
   117e4:	ldr	pc, [ip, #2364]!	; 0x93c

000117e8 <strtod_l@plt>:
   117e8:	add	ip, pc, #0, 12
   117ec:	add	ip, ip, #24, 20	; 0x18000
   117f0:	ldr	pc, [ip, #2356]!	; 0x934

000117f4 <__uflow@plt>:
   117f4:	add	ip, pc, #0, 12
   117f8:	add	ip, ip, #24, 20	; 0x18000
   117fc:	ldr	pc, [ip, #2348]!	; 0x92c

00011800 <setlocale@plt>:
   11800:	add	ip, pc, #0, 12
   11804:	add	ip, ip, #24, 20	; 0x18000
   11808:	ldr	pc, [ip, #2340]!	; 0x924

0001180c <sigemptyset@plt>:
   1180c:	add	ip, pc, #0, 12
   11810:	add	ip, ip, #24, 20	; 0x18000
   11814:	ldr	pc, [ip, #2332]!	; 0x91c

00011818 <fork@plt>:
   11818:	add	ip, pc, #0, 12
   1181c:	add	ip, ip, #24, 20	; 0x18000
   11820:	ldr	pc, [ip, #2324]!	; 0x914

00011824 <strrchr@plt>:
   11824:	add	ip, pc, #0, 12
   11828:	add	ip, ip, #24, 20	; 0x18000
   1182c:	ldr	pc, [ip, #2316]!	; 0x90c

00011830 <nl_langinfo@plt>:
   11830:	add	ip, pc, #0, 12
   11834:	add	ip, ip, #24, 20	; 0x18000
   11838:	ldr	pc, [ip, #2308]!	; 0x904

0001183c <newlocale@plt>:
   1183c:	add	ip, pc, #0, 12
   11840:	add	ip, ip, #24, 20	; 0x18000
   11844:	ldr	pc, [ip, #2300]!	; 0x8fc

00011848 <setpgid@plt>:
   11848:	add	ip, pc, #0, 12
   1184c:	add	ip, ip, #24, 20	; 0x18000
   11850:	ldr	pc, [ip, #2292]!	; 0x8f4

00011854 <bindtextdomain@plt>:
   11854:	add	ip, pc, #0, 12
   11858:	add	ip, ip, #24, 20	; 0x18000
   1185c:	ldr	pc, [ip, #2284]!	; 0x8ec

00011860 <__libc_current_sigrtmin@plt>:
   11860:	add	ip, pc, #0, 12
   11864:	add	ip, ip, #24, 20	; 0x18000
   11868:	ldr	pc, [ip, #2276]!	; 0x8e4

0001186c <strncmp@plt>:
   1186c:	add	ip, pc, #0, 12
   11870:	add	ip, ip, #24, 20	; 0x18000
   11874:	ldr	pc, [ip, #2268]!	; 0x8dc

00011878 <abort@plt>:
   11878:	add	ip, pc, #0, 12
   1187c:	add	ip, ip, #24, 20	; 0x18000
   11880:	ldr	pc, [ip, #2260]!	; 0x8d4

00011884 <close@plt>:
   11884:	add	ip, pc, #0, 12
   11888:	add	ip, ip, #24, 20	; 0x18000
   1188c:	ldr	pc, [ip, #2252]!	; 0x8cc

00011890 <__assert_fail@plt>:
   11890:	add	ip, pc, #0, 12
   11894:	add	ip, ip, #24, 20	; 0x18000
   11898:	ldr	pc, [ip, #2244]!	; 0x8c4

Disassembly of section .text:

000118a0 <c_strtod@@Base-0xfd0>:
   118a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118a4:	vpush	{d8}
   118a8:	sub	sp, sp, #196	; 0xc4
   118ac:	ldr	r4, [pc, #1348]	; 11df8 <__assert_fail@plt+0x568>
   118b0:	mov	r7, r0
   118b4:	ldr	r3, [pc, #1344]	; 11dfc <__assert_fail@plt+0x56c>
   118b8:	mov	r6, r1
   118bc:	add	r4, pc, r4
   118c0:	ldr	r0, [r1]
   118c4:	ldr	r5, [pc, #1332]	; 11e00 <__assert_fail@plt+0x570>
   118c8:	ldr	r3, [r4, r3]
   118cc:	add	r5, pc, r5
   118d0:	ldr	r9, [pc, #1324]	; 11e04 <__assert_fail@plt+0x574>
   118d4:	ldr	r8, [pc, #1324]	; 11e08 <__assert_fail@plt+0x578>
   118d8:	str	r3, [sp, #12]
   118dc:	add	r9, pc, r9
   118e0:	ldr	r3, [r3]
   118e4:	add	r8, pc, r8
   118e8:	ldr	fp, [pc, #1308]	; 11e0c <__assert_fail@plt+0x57c>
   118ec:	ldr	sl, [pc, #1308]	; 11e10 <__assert_fail@plt+0x580>
   118f0:	str	r3, [sp, #188]	; 0xbc
   118f4:	bl	12bb8 <close_stdout@@Base+0x2a4>
   118f8:	ldr	r1, [pc, #1300]	; 11e14 <__assert_fail@plt+0x584>
   118fc:	mov	r0, #6
   11900:	add	fp, pc, fp
   11904:	add	sl, pc, sl
   11908:	add	r1, pc, r1
   1190c:	bl	11800 <setlocale@plt>
   11910:	ldr	r1, [pc, #1280]	; 11e18 <__assert_fail@plt+0x588>
   11914:	mov	r0, r5
   11918:	add	r1, pc, r1
   1191c:	bl	11854 <bindtextdomain@plt>
   11920:	mov	r0, r5
   11924:	bl	115c0 <textdomain@plt>
   11928:	ldr	r2, [pc, #1260]	; 11e1c <__assert_fail@plt+0x58c>
   1192c:	ldr	r0, [pc, #1260]	; 11e20 <__assert_fail@plt+0x590>
   11930:	mov	r1, #125	; 0x7d
   11934:	ldr	r3, [pc, #1256]	; 11e24 <__assert_fail@plt+0x594>
   11938:	add	r0, pc, r0
   1193c:	str	r0, [sp, #16]
   11940:	ldr	r2, [r4, r2]
   11944:	ldr	r0, [pc, #1244]	; 11e28 <__assert_fail@plt+0x598>
   11948:	str	r1, [r2]
   1194c:	add	r0, pc, r0
   11950:	str	r0, [sp, #20]
   11954:	ldr	r0, [r4, r3]
   11958:	bl	18ce4 <close_stdout@@Base+0x63d0>
   1195c:	mov	r5, #0
   11960:	mov	r0, r7
   11964:	str	r5, [sp]
   11968:	mov	r1, r6
   1196c:	mov	r2, r9
   11970:	mov	r3, r8
   11974:	bl	116c8 <getopt_long@plt>
   11978:	cmn	r0, #1
   1197c:	beq	11a7c <__assert_fail@plt+0x1ec>
   11980:	cmp	r0, #107	; 0x6b
   11984:	beq	11a64 <__assert_fail@plt+0x1d4>
   11988:	ble	119b0 <__assert_fail@plt+0x120>
   1198c:	cmp	r0, #256	; 0x100
   11990:	beq	11a58 <__assert_fail@plt+0x1c8>
   11994:	movw	r3, #257	; 0x101
   11998:	cmp	r0, r3
   1199c:	beq	11a20 <__assert_fail@plt+0x190>
   119a0:	cmp	r0, #115	; 0x73
   119a4:	beq	11a30 <__assert_fail@plt+0x1a0>
   119a8:	mov	r0, #125	; 0x7d
   119ac:	bl	122e0 <__assert_fail@plt+0xa50>
   119b0:	cmn	r0, #3
   119b4:	beq	119c8 <__assert_fail@plt+0x138>
   119b8:	cmn	r0, #2
   119bc:	bne	119a8 <__assert_fail@plt+0x118>
   119c0:	mov	r0, r5
   119c4:	bl	122e0 <__assert_fail@plt+0xa50>
   119c8:	ldr	r2, [pc, #1116]	; 11e2c <__assert_fail@plt+0x59c>
   119cc:	ldr	r3, [pc, #1116]	; 11e30 <__assert_fail@plt+0x5a0>
   119d0:	ldr	r0, [pc, #1116]	; 11e34 <__assert_fail@plt+0x5a4>
   119d4:	ldr	r2, [r4, r2]
   119d8:	ldr	r3, [r4, r3]
   119dc:	add	r0, pc, r0
   119e0:	ldr	r1, [pc, #1104]	; 11e38 <__assert_fail@plt+0x5a8>
   119e4:	ldr	r4, [r2]
   119e8:	add	r1, pc, r1
   119ec:	ldr	r6, [r3]
   119f0:	bl	135ac <close_stdout@@Base+0xc98>
   119f4:	ldr	r1, [pc, #1088]	; 11e3c <__assert_fail@plt+0x5ac>
   119f8:	ldr	r2, [pc, #1088]	; 11e40 <__assert_fail@plt+0x5b0>
   119fc:	str	r5, [sp, #4]
   11a00:	add	r1, pc, r1
   11a04:	mov	r3, r6
   11a08:	add	r2, pc, r2
   11a0c:	str	r0, [sp]
   11a10:	mov	r0, r4
   11a14:	bl	15a4c <close_stdout@@Base+0x3138>
   11a18:	mov	r0, r5
   11a1c:	bl	116ec <exit@plt>
   11a20:	ldr	r2, [sp, #16]
   11a24:	mov	r3, #1
   11a28:	strb	r3, [r2, #17]
   11a2c:	b	1195c <__assert_fail@plt+0xcc>
   11a30:	ldr	r3, [pc, #1036]	; 11e44 <__assert_fail@plt+0x5b4>
   11a34:	add	r1, sp, #168	; 0xa8
   11a38:	ldr	r3, [r4, r3]
   11a3c:	ldr	r0, [r3]
   11a40:	bl	126a0 <__assert_fail@plt+0xe10>
   11a44:	ldr	r1, [sp, #20]
   11a48:	cmn	r0, #1
   11a4c:	str	r0, [r1]
   11a50:	bne	1195c <__assert_fail@plt+0xcc>
   11a54:	b	119a8 <__assert_fail@plt+0x118>
   11a58:	mov	r3, #1
   11a5c:	strb	r3, [sl, #16]
   11a60:	b	1195c <__assert_fail@plt+0xcc>
   11a64:	ldr	r3, [pc, #984]	; 11e44 <__assert_fail@plt+0x5b4>
   11a68:	ldr	r3, [r4, r3]
   11a6c:	ldr	r0, [r3]
   11a70:	bl	12540 <__assert_fail@plt+0xcb0>
   11a74:	vstr	d0, [fp, #8]
   11a78:	b	1195c <__assert_fail@plt+0xcc>
   11a7c:	ldr	r3, [pc, #964]	; 11e48 <__assert_fail@plt+0x5b8>
   11a80:	ldr	r4, [r4, r3]
   11a84:	ldr	r3, [r4]
   11a88:	rsb	r7, r3, r7
   11a8c:	cmp	r7, #1
   11a90:	ble	119a8 <__assert_fail@plt+0x118>
   11a94:	add	r2, r3, #1
   11a98:	str	r2, [r4]
   11a9c:	ldr	r0, [r6, r3, lsl #2]
   11aa0:	bl	12540 <__assert_fail@plt+0xcb0>
   11aa4:	ldr	r3, [pc, #928]	; 11e4c <__assert_fail@plt+0x5bc>
   11aa8:	ldr	r7, [r4]
   11aac:	add	r3, pc, r3
   11ab0:	ldrb	r0, [r3, #16]
   11ab4:	cmp	r0, r5
   11ab8:	vmov.f64	d8, d0
   11abc:	beq	11cb8 <__assert_fail@plt+0x428>
   11ac0:	ldr	r3, [pc, #904]	; 11e50 <__assert_fail@plt+0x5c0>
   11ac4:	add	r4, sp, #28
   11ac8:	add	r0, sp, #32
   11acc:	ldr	r5, [pc, #896]	; 11e54 <__assert_fail@plt+0x5c4>
   11ad0:	add	r3, pc, r3
   11ad4:	add	r5, pc, r5
   11ad8:	ldr	r8, [r3]
   11adc:	bl	1180c <sigemptyset@plt>
   11ae0:	ldr	r3, [pc, #880]	; 11e58 <__assert_fail@plt+0x5c8>
   11ae4:	mov	r1, r4
   11ae8:	mov	r2, #0
   11aec:	mov	r0, #14
   11af0:	add	r3, pc, r3
   11af4:	mov	ip, #268435456	; 0x10000000
   11af8:	str	r3, [sp, #28]
   11afc:	str	ip, [sp, #160]	; 0xa0
   11b00:	bl	115f0 <sigaction@plt>
   11b04:	mov	r1, r4
   11b08:	mov	r2, #0
   11b0c:	mov	r0, #2
   11b10:	bl	115f0 <sigaction@plt>
   11b14:	mov	r1, r4
   11b18:	mov	r2, #0
   11b1c:	mov	r0, #3
   11b20:	bl	115f0 <sigaction@plt>
   11b24:	mov	r1, r4
   11b28:	mov	r2, #0
   11b2c:	mov	r0, #1
   11b30:	bl	115f0 <sigaction@plt>
   11b34:	mov	r1, r4
   11b38:	mov	r2, #0
   11b3c:	mov	r0, #15
   11b40:	bl	115f0 <sigaction@plt>
   11b44:	mov	r2, #0
   11b48:	mov	r1, r4
   11b4c:	mov	r0, r8
   11b50:	bl	115f0 <sigaction@plt>
   11b54:	mov	r1, #1
   11b58:	mov	r0, #21
   11b5c:	bl	1156c <signal@plt>
   11b60:	mov	r1, #1
   11b64:	mov	r0, #22
   11b68:	bl	1156c <signal@plt>
   11b6c:	mov	r1, #0
   11b70:	mov	r0, #17
   11b74:	bl	1156c <signal@plt>
   11b78:	bl	11818 <fork@plt>
   11b7c:	cmn	r0, #1
   11b80:	mov	r4, r0
   11b84:	str	r0, [r5, #4]
   11b88:	beq	11cc4 <__assert_fail@plt+0x434>
   11b8c:	cmp	r0, #0
   11b90:	bne	11c28 <__assert_fail@plt+0x398>
   11b94:	mov	r1, r4
   11b98:	add	r5, r6, r7, lsl #2
   11b9c:	mov	r0, #21
   11ba0:	bl	1156c <signal@plt>
   11ba4:	mov	r1, r4
   11ba8:	mov	r0, #22
   11bac:	bl	1156c <signal@plt>
   11bb0:	mov	r1, r5
   11bb4:	ldr	r0, [r6, r7, lsl #2]
   11bb8:	bl	11554 <execvp@plt>
   11bbc:	bl	11734 <__errno_location@plt>
   11bc0:	ldr	r1, [pc, #660]	; 11e5c <__assert_fail@plt+0x5cc>
   11bc4:	mov	r2, #5
   11bc8:	add	r1, pc, r1
   11bcc:	ldr	r5, [r0]
   11bd0:	mov	r0, r4
   11bd4:	bl	11584 <dcgettext@plt>
   11bd8:	cmp	r5, #2
   11bdc:	movne	r8, #126	; 0x7e
   11be0:	moveq	r8, #127	; 0x7f
   11be4:	mov	r9, r0
   11be8:	ldr	r0, [r6, r7, lsl #2]
   11bec:	bl	14fd0 <close_stdout@@Base+0x26bc>
   11bf0:	mov	r1, r5
   11bf4:	mov	r2, r9
   11bf8:	mov	r3, r0
   11bfc:	mov	r0, r4
   11c00:	bl	11650 <error@plt>
   11c04:	mov	r0, r8
   11c08:	ldr	r1, [sp, #12]
   11c0c:	ldr	r2, [sp, #188]	; 0xbc
   11c10:	ldr	r3, [r1]
   11c14:	cmp	r2, r3
   11c18:	bne	11df4 <__assert_fail@plt+0x564>
   11c1c:	add	sp, sp, #196	; 0xc4
   11c20:	vpop	{d8}
   11c24:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c28:	vmov.f64	d0, d8
   11c2c:	mov	r0, #1
   11c30:	bl	11fdc <__assert_fail@plt+0x74c>
   11c34:	add	r6, sp, #24
   11c38:	ldr	r0, [r5, #4]
   11c3c:	mov	r1, r6
   11c40:	mov	r2, #0
   11c44:	bl	11614 <waitpid@plt>
   11c48:	cmp	r0, #0
   11c4c:	bge	11cf8 <__assert_fail@plt+0x468>
   11c50:	bl	11734 <__errno_location@plt>
   11c54:	ldr	r4, [r0]
   11c58:	cmp	r4, #4
   11c5c:	beq	11c38 <__assert_fail@plt+0x3a8>
   11c60:	ldr	r1, [pc, #504]	; 11e60 <__assert_fail@plt+0x5d0>
   11c64:	mov	r2, #5
   11c68:	mov	r0, #0
   11c6c:	add	r1, pc, r1
   11c70:	bl	11584 <dcgettext@plt>
   11c74:	mov	r1, r4
   11c78:	mov	r2, r0
   11c7c:	mov	r0, #0
   11c80:	bl	11650 <error@plt>
   11c84:	mov	r3, #125	; 0x7d
   11c88:	str	r3, [sp, #24]
   11c8c:	ldr	r3, [pc, #464]	; 11e64 <__assert_fail@plt+0x5d4>
   11c90:	add	r3, pc, r3
   11c94:	ldr	r2, [r3]
   11c98:	cmp	r2, #0
   11c9c:	beq	11cb0 <__assert_fail@plt+0x420>
   11ca0:	ldrb	r3, [r3, #17]
   11ca4:	cmp	r3, #0
   11ca8:	moveq	r0, #124	; 0x7c
   11cac:	beq	11c08 <__assert_fail@plt+0x378>
   11cb0:	ldr	r0, [sp, #24]
   11cb4:	b	11c08 <__assert_fail@plt+0x378>
   11cb8:	mov	r1, r0
   11cbc:	bl	11848 <setpgid@plt>
   11cc0:	b	11ac0 <__assert_fail@plt+0x230>
   11cc4:	bl	11734 <__errno_location@plt>
   11cc8:	ldr	r1, [pc, #408]	; 11e68 <__assert_fail@plt+0x5d8>
   11ccc:	mov	r2, #5
   11cd0:	add	r1, pc, r1
   11cd4:	ldr	r4, [r0]
   11cd8:	mov	r0, #0
   11cdc:	bl	11584 <dcgettext@plt>
   11ce0:	mov	r1, r4
   11ce4:	mov	r2, r0
   11ce8:	mov	r0, #0
   11cec:	bl	11650 <error@plt>
   11cf0:	mov	r0, #125	; 0x7d
   11cf4:	b	11c08 <__assert_fail@plt+0x378>
   11cf8:	ldr	r3, [sp, #24]
   11cfc:	ands	r4, r3, #127	; 0x7f
   11d00:	ubfxeq	r3, r3, #8, #8
   11d04:	streq	r3, [sp, #24]
   11d08:	beq	11c8c <__assert_fail@plt+0x3fc>
   11d0c:	add	r2, r4, #1
   11d10:	sbfx	r2, r2, #1, #7
   11d14:	cmp	r2, #0
   11d18:	ble	11d90 <__assert_fail@plt+0x500>
   11d1c:	tst	r3, #128	; 0x80
   11d20:	bne	11d40 <__assert_fail@plt+0x4b0>
   11d24:	ldr	r3, [pc, #320]	; 11e6c <__assert_fail@plt+0x5dc>
   11d28:	ldr	r5, [pc, r3]
   11d2c:	cmp	r5, #0
   11d30:	beq	11d68 <__assert_fail@plt+0x4d8>
   11d34:	add	r4, r4, #128	; 0x80
   11d38:	str	r4, [sp, #24]
   11d3c:	b	11c8c <__assert_fail@plt+0x3fc>
   11d40:	ldr	r1, [pc, #296]	; 11e70 <__assert_fail@plt+0x5e0>
   11d44:	mov	r2, #5
   11d48:	mov	r0, #0
   11d4c:	add	r1, pc, r1
   11d50:	bl	11584 <dcgettext@plt>
   11d54:	mov	r2, r0
   11d58:	mov	r0, #0
   11d5c:	mov	r1, r0
   11d60:	bl	11650 <error@plt>
   11d64:	b	11d24 <__assert_fail@plt+0x494>
   11d68:	mov	r1, r5
   11d6c:	mov	r0, #4
   11d70:	bl	11794 <prctl@plt>
   11d74:	subs	r1, r0, #0
   11d78:	bne	11dc4 <__assert_fail@plt+0x534>
   11d7c:	mov	r0, r4
   11d80:	bl	1156c <signal@plt>
   11d84:	mov	r0, r4
   11d88:	bl	114c4 <raise@plt>
   11d8c:	b	11d34 <__assert_fail@plt+0x4a4>
   11d90:	ldr	r1, [pc, #220]	; 11e74 <__assert_fail@plt+0x5e4>
   11d94:	mov	r2, #5
   11d98:	mov	r0, #0
   11d9c:	add	r1, pc, r1
   11da0:	bl	11584 <dcgettext@plt>
   11da4:	ldr	r3, [sp, #24]
   11da8:	mov	r2, r0
   11dac:	mov	r0, #0
   11db0:	mov	r1, r0
   11db4:	bl	11650 <error@plt>
   11db8:	mov	r3, #1
   11dbc:	str	r3, [sp, #24]
   11dc0:	b	11c8c <__assert_fail@plt+0x3fc>
   11dc4:	bl	11734 <__errno_location@plt>
   11dc8:	ldr	r1, [pc, #168]	; 11e78 <__assert_fail@plt+0x5e8>
   11dcc:	mov	r2, #5
   11dd0:	add	r1, pc, r1
   11dd4:	ldr	r6, [r0]
   11dd8:	mov	r0, r5
   11ddc:	bl	11584 <dcgettext@plt>
   11de0:	mov	r1, r6
   11de4:	mov	r2, r0
   11de8:	mov	r0, r5
   11dec:	bl	11650 <error@plt>
   11df0:	b	11d34 <__assert_fail@plt+0x4a4>
   11df4:	bl	11590 <__stack_chk_fail@plt>
   11df8:	andeq	r8, r1, ip, lsr r7
   11dfc:	andeq	r0, r0, r8, ror #2
   11e00:	andeq	r7, r0, ip, lsl fp
   11e04:	andeq	r7, r0, r8, lsr #24
   11e08:	andeq	r8, r1, r8, ror r5
   11e0c:	muleq	r1, r8, sl
   11e10:	muleq	r1, r4, sl
   11e14:	andeq	r7, r0, r0, lsr #23
   11e18:			; <UNDEFINED> instruction: 0x00007bb0
   11e1c:	andeq	r0, r0, r8, lsl #3
   11e20:	andeq	r8, r1, r0, ror #20
   11e24:	andeq	r0, r0, r8, ror r1
   11e28:	andeq	r8, r1, r4, asr r8
   11e2c:	andeq	r0, r0, r4, lsl #3
   11e30:	andeq	r0, r0, r0, ror r1
   11e34:	andeq	r7, r0, r0, lsl #22
   11e38:	andeq	r7, r0, r4, lsl #22
   11e3c:	strdeq	r7, [r0], -ip
   11e40:	ldrdeq	r7, [r0], -ip
   11e44:	andeq	r0, r0, r0, lsr #3
   11e48:	andeq	r0, r0, ip, ror #2
   11e4c:	andeq	r8, r1, ip, ror #17
   11e50:	ldrdeq	r8, [r1], -r0
   11e54:	andeq	r8, r1, r4, asr #17
   11e58:	andeq	r0, r0, r4, asr #13
   11e5c:	andeq	r7, r0, ip, asr r9
   11e60:	andeq	r7, r0, r4, asr #18
   11e64:	andeq	r8, r1, r8, lsl #14
   11e68:	andeq	r7, r0, ip, lsr r8
   11e6c:	andeq	r8, r1, r0, ror r6
   11e70:	strdeq	r7, [r0], -r4
   11e74:	strdeq	r7, [r0], -r0
   11e78:	muleq	r0, r4, r7
   11e7c:	mov	fp, #0
   11e80:	mov	lr, #0
   11e84:	pop	{r1}		; (ldr r1, [sp], #4)
   11e88:	mov	r2, sp
   11e8c:	push	{r2}		; (str r2, [sp, #-4]!)
   11e90:	push	{r0}		; (str r0, [sp, #-4]!)
   11e94:	ldr	ip, [pc, #16]	; 11eac <__assert_fail@plt+0x61c>
   11e98:	push	{ip}		; (str ip, [sp, #-4]!)
   11e9c:	ldr	r0, [pc, #12]	; 11eb0 <__assert_fail@plt+0x620>
   11ea0:	ldr	r3, [pc, #12]	; 11eb4 <__assert_fail@plt+0x624>
   11ea4:	bl	116a4 <__libc_start_main@plt>
   11ea8:	bl	11878 <abort@plt>
   11eac:	andeq	r8, r1, r0, ror #25
   11eb0:	andeq	r1, r1, r0, lsr #17
   11eb4:	andeq	r8, r1, ip, ror ip
   11eb8:	ldr	r3, [pc, #20]	; 11ed4 <__assert_fail@plt+0x644>
   11ebc:	ldr	r2, [pc, #20]	; 11ed8 <__assert_fail@plt+0x648>
   11ec0:	add	r3, pc, r3
   11ec4:	ldr	r2, [r3, r2]
   11ec8:	cmp	r2, #0
   11ecc:	bxeq	lr
   11ed0:	b	116bc <__gmon_start__@plt>
   11ed4:	andeq	r8, r1, r8, lsr r1
   11ed8:	andeq	r0, r0, ip, ror r1
   11edc:	push	{r3, lr}
   11ee0:	movw	r0, #41880	; 0xa398
   11ee4:	ldr	r3, [pc, #36]	; 11f10 <__assert_fail@plt+0x680>
   11ee8:	movt	r0, #2
   11eec:	rsb	r3, r0, r3
   11ef0:	cmp	r3, #6
   11ef4:	popls	{r3, pc}
   11ef8:	movw	r3, #0
   11efc:	movt	r3, #0
   11f00:	cmp	r3, #0
   11f04:	popeq	{r3, pc}
   11f08:	blx	r3
   11f0c:	pop	{r3, pc}
   11f10:	muleq	r2, fp, r3
   11f14:	push	{r3, lr}
   11f18:	movw	r0, #41880	; 0xa398
   11f1c:	movw	r3, #41880	; 0xa398
   11f20:	movt	r0, #2
   11f24:	movt	r3, #2
   11f28:	rsb	r3, r0, r3
   11f2c:	asr	r3, r3, #2
   11f30:	add	r3, r3, r3, lsr #31
   11f34:	asrs	r1, r3, #1
   11f38:	popeq	{r3, pc}
   11f3c:	movw	r2, #0
   11f40:	movt	r2, #0
   11f44:	cmp	r2, #0
   11f48:	popeq	{r3, pc}
   11f4c:	blx	r2
   11f50:	pop	{r3, pc}
   11f54:	push	{r4, lr}
   11f58:	movw	r4, #41880	; 0xa398
   11f5c:	movt	r4, #2
   11f60:	ldrb	r3, [r4]
   11f64:	cmp	r3, #0
   11f68:	popne	{r4, pc}
   11f6c:	bl	11edc <__assert_fail@plt+0x64c>
   11f70:	mov	r3, #1
   11f74:	strb	r3, [r4]
   11f78:	pop	{r4, pc}
   11f7c:	movw	r0, #40544	; 0x9e60
   11f80:	movt	r0, #2
   11f84:	push	{r3, lr}
   11f88:	ldr	r3, [r0]
   11f8c:	cmp	r3, #0
   11f90:	beq	11fa8 <__assert_fail@plt+0x718>
   11f94:	movw	r3, #0
   11f98:	movt	r3, #0
   11f9c:	cmp	r3, #0
   11fa0:	beq	11fa8 <__assert_fail@plt+0x718>
   11fa4:	blx	r3
   11fa8:	pop	{r3, lr}
   11fac:	b	11f14 <__assert_fail@plt+0x684>
   11fb0:	push	{r3, r4, r5, lr}
   11fb4:	subs	r5, r0, #0
   11fb8:	mov	r4, r1
   11fbc:	bne	11fcc <__assert_fail@plt+0x73c>
   11fc0:	mov	r0, r1
   11fc4:	mov	r1, #1
   11fc8:	bl	1156c <signal@plt>
   11fcc:	mov	r0, r5
   11fd0:	mov	r1, r4
   11fd4:	pop	{r3, r4, r5, lr}
   11fd8:	b	116d4 <kill@plt>
   11fdc:	ldr	r3, [pc, #452]	; 121a8 <__assert_fail@plt+0x918>
   11fe0:	ldr	r2, [pc, #452]	; 121ac <__assert_fail@plt+0x91c>
   11fe4:	add	r3, pc, r3
   11fe8:	push	{r4, r5, r6, r7, lr}
   11fec:	vpush	{d8}
   11ff0:	sub	sp, sp, #164	; 0xa4
   11ff4:	ldr	r6, [r3, r2]
   11ff8:	add	r4, sp, #28
   11ffc:	mov	r7, r0
   12000:	vmov.f64	d8, d0
   12004:	mov	r0, r4
   12008:	ldr	r3, [r6]
   1200c:	str	r3, [sp, #156]	; 0x9c
   12010:	bl	1180c <sigemptyset@plt>
   12014:	mov	r1, #14
   12018:	mov	r0, r4
   1201c:	bl	11698 <sigaddset@plt>
   12020:	mov	r1, r4
   12024:	mov	r0, #1
   12028:	mov	r2, #0
   1202c:	bl	11518 <sigprocmask@plt>
   12030:	cmp	r0, #0
   12034:	beq	12064 <__assert_fail@plt+0x7d4>
   12038:	bl	11734 <__errno_location@plt>
   1203c:	ldr	r1, [pc, #364]	; 121b0 <__assert_fail@plt+0x920>
   12040:	mov	r2, #5
   12044:	add	r1, pc, r1
   12048:	ldr	r4, [r0]
   1204c:	mov	r0, #0
   12050:	bl	11584 <dcgettext@plt>
   12054:	mov	r1, r4
   12058:	mov	r2, r0
   1205c:	mov	r0, #0
   12060:	bl	11650 <error@plt>
   12064:	add	r5, sp, #4
   12068:	vmov.f64	d0, d8
   1206c:	mov	r4, #0
   12070:	mov	r0, r5
   12074:	bl	12ad0 <close_stdout@@Base+0x1bc>
   12078:	ldm	r5, {r0, r1}
   1207c:	add	r3, sp, #20
   12080:	mov	r2, sp
   12084:	str	r4, [sp, #12]
   12088:	stm	r3, {r0, r1}
   1208c:	mov	r0, r4
   12090:	mov	r1, r4
   12094:	str	r4, [sp, #16]
   12098:	bl	115b4 <timer_create@plt>
   1209c:	subs	r5, r0, #0
   120a0:	beq	12138 <__assert_fail@plt+0x8a8>
   120a4:	cmp	r7, #0
   120a8:	bne	12100 <__assert_fail@plt+0x870>
   120ac:	vldr	d7, [pc, #236]	; 121a0 <__assert_fail@plt+0x910>
   120b0:	vcmpe.f64	d8, d7
   120b4:	vmrs	APSR_nzcv, fpscr
   120b8:	mvnge	r0, #0
   120bc:	bge	120e0 <__assert_fail@plt+0x850>
   120c0:	vcvt.u32.f64	s13, d8
   120c4:	vmov	r3, s13
   120c8:	vcvt.f64.u32	d7, s13
   120cc:	vcmpe.f64	d7, d8
   120d0:	vmrs	APSR_nzcv, fpscr
   120d4:	movpl	r0, #0
   120d8:	movmi	r0, #1
   120dc:	add	r0, r0, r3
   120e0:	bl	1159c <alarm@plt>
   120e4:	ldr	r2, [sp, #156]	; 0x9c
   120e8:	ldr	r3, [r6]
   120ec:	cmp	r2, r3
   120f0:	bne	12198 <__assert_fail@plt+0x908>
   120f4:	add	sp, sp, #164	; 0xa4
   120f8:	vpop	{d8}
   120fc:	pop	{r4, r5, r6, r7, pc}
   12100:	bl	11734 <__errno_location@plt>
   12104:	ldr	r5, [r0]
   12108:	cmp	r5, #38	; 0x26
   1210c:	beq	120ac <__assert_fail@plt+0x81c>
   12110:	ldr	r1, [pc, #156]	; 121b4 <__assert_fail@plt+0x924>
   12114:	mov	r0, r4
   12118:	mov	r2, #5
   1211c:	add	r1, pc, r1
   12120:	bl	11584 <dcgettext@plt>
   12124:	mov	r1, r5
   12128:	mov	r2, r0
   1212c:	mov	r0, r4
   12130:	bl	11650 <error@plt>
   12134:	b	120ac <__assert_fail@plt+0x81c>
   12138:	ldr	r0, [sp]
   1213c:	mov	r1, r5
   12140:	add	r2, sp, #12
   12144:	mov	r3, r5
   12148:	bl	115e4 <timer_settime@plt>
   1214c:	cmp	r0, r4
   12150:	beq	120e4 <__assert_fail@plt+0x854>
   12154:	cmp	r7, r4
   12158:	bne	12168 <__assert_fail@plt+0x8d8>
   1215c:	ldr	r0, [sp]
   12160:	bl	1165c <timer_delete@plt>
   12164:	b	120ac <__assert_fail@plt+0x81c>
   12168:	bl	11734 <__errno_location@plt>
   1216c:	ldr	r1, [pc, #68]	; 121b8 <__assert_fail@plt+0x928>
   12170:	mov	r2, #5
   12174:	add	r1, pc, r1
   12178:	ldr	r4, [r0]
   1217c:	mov	r0, r5
   12180:	bl	11584 <dcgettext@plt>
   12184:	mov	r1, r4
   12188:	mov	r2, r0
   1218c:	mov	r0, r5
   12190:	bl	11650 <error@plt>
   12194:	b	1215c <__assert_fail@plt+0x8cc>
   12198:	bl	11590 <__stack_chk_fail@plt>
   1219c:	nop	{0}
   121a0:			; <UNDEFINED> instruction: 0xffe00000
   121a4:	strdmi	pc, [pc, #255]	; 122ab <__assert_fail@plt+0xa1b>
   121a8:	andeq	r8, r1, r4, lsl r0
   121ac:	andeq	r0, r0, r8, ror #2
   121b0:	ldrdeq	r6, [r0], -r4
   121b4:	andeq	r6, r0, ip, lsr #24
   121b8:			; <UNDEFINED> instruction: 0x00006bbc
   121bc:	cmp	r0, #14
   121c0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   121c4:	vpush	{d8}
   121c8:	mov	r6, r0
   121cc:	beq	122a4 <__assert_fail@plt+0xa14>
   121d0:	ldr	r7, [pc, #244]	; 122cc <__assert_fail@plt+0xa3c>
   121d4:	add	r7, pc, r7
   121d8:	ldr	r0, [r7, #4]
   121dc:	cmp	r0, #0
   121e0:	beq	122c4 <__assert_fail@plt+0xa34>
   121e4:	vldr	d8, [r7, #8]
   121e8:	vcmp.f64	d8, #0.0
   121ec:	mov	r5, #0
   121f0:	mov	r4, #0
   121f4:	vmrs	APSR_nzcv, fpscr
   121f8:	moveq	r5, r0
   121fc:	bne	1226c <__assert_fail@plt+0x9dc>
   12200:	mov	r0, r5
   12204:	mov	r1, r6
   12208:	bl	11fb0 <__assert_fail@plt+0x720>
   1220c:	ldr	r3, [pc, #188]	; 122d0 <__assert_fail@plt+0xa40>
   12210:	add	r3, pc, r3
   12214:	ldrb	r4, [r3, #16]
   12218:	cmp	r4, #0
   1221c:	beq	1225c <__assert_fail@plt+0x9cc>
   12220:	cmp	r6, #18
   12224:	cmpne	r6, #9
   12228:	bne	12234 <__assert_fail@plt+0x9a4>
   1222c:	vpop	{d8}
   12230:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12234:	mov	r0, r5
   12238:	mov	r1, #18
   1223c:	bl	11fb0 <__assert_fail@plt+0x720>
   12240:	cmp	r4, #0
   12244:	bne	1222c <__assert_fail@plt+0x99c>
   12248:	vpop	{d8}
   1224c:	mov	r0, r4
   12250:	mov	r1, #18
   12254:	pop	{r3, r4, r5, r6, r7, r8, r9, lr}
   12258:	b	11fb0 <__assert_fail@plt+0x720>
   1225c:	mov	r0, r4
   12260:	mov	r1, r6
   12264:	bl	11fb0 <__assert_fail@plt+0x720>
   12268:	b	12220 <__assert_fail@plt+0x990>
   1226c:	bl	11734 <__errno_location@plt>
   12270:	ldr	r3, [pc, #92]	; 122d4 <__assert_fail@plt+0xa44>
   12274:	vmov.f64	d0, d8
   12278:	mov	r2, #9
   1227c:	add	r3, pc, r3
   12280:	str	r2, [r3]
   12284:	ldr	r9, [r0]
   12288:	mov	r8, r0
   1228c:	mov	r0, #0
   12290:	bl	11fdc <__assert_fail@plt+0x74c>
   12294:	strd	r4, [r7, #8]
   12298:	str	r9, [r8]
   1229c:	ldr	r5, [r7, #4]
   122a0:	b	12200 <__assert_fail@plt+0x970>
   122a4:	ldr	r1, [pc, #44]	; 122d8 <__assert_fail@plt+0xa48>
   122a8:	mov	r2, #1
   122ac:	ldr	r3, [pc, #40]	; 122dc <__assert_fail@plt+0xa4c>
   122b0:	add	r1, pc, r1
   122b4:	add	r3, pc, r3
   122b8:	ldr	r6, [r1]
   122bc:	str	r2, [r3]
   122c0:	b	121d0 <__assert_fail@plt+0x940>
   122c4:	add	r0, r6, #128	; 0x80
   122c8:	bl	1153c <_exit@plt>
   122cc:	andeq	r8, r1, r4, asr #3
   122d0:	andeq	r8, r1, r8, lsl #3
   122d4:	andeq	r7, r1, r4, lsr #30
   122d8:	strdeq	r7, [r1], -r0
   122dc:	andeq	r8, r1, r4, ror #1
   122e0:	push	{r4, r5, r6, lr}
   122e4:	subs	r4, r0, #0
   122e8:	ldr	r5, [pc, #516]	; 124f4 <__assert_fail@plt+0xc64>
   122ec:	add	r5, pc, r5
   122f0:	beq	12338 <__assert_fail@plt+0xaa8>
   122f4:	ldr	r3, [pc, #508]	; 124f8 <__assert_fail@plt+0xc68>
   122f8:	mov	r2, #5
   122fc:	ldr	r1, [pc, #504]	; 124fc <__assert_fail@plt+0xc6c>
   12300:	mov	r0, #0
   12304:	ldr	r3, [r5, r3]
   12308:	add	r1, pc, r1
   1230c:	ldr	r6, [r3]
   12310:	bl	11584 <dcgettext@plt>
   12314:	ldr	r3, [pc, #484]	; 12500 <__assert_fail@plt+0xc70>
   12318:	mov	r1, #1
   1231c:	ldr	r3, [r5, r3]
   12320:	ldr	r3, [r3]
   12324:	mov	r2, r0
   12328:	mov	r0, r6
   1232c:	bl	117ac <__fprintf_chk@plt>
   12330:	mov	r0, r4
   12334:	bl	116ec <exit@plt>
   12338:	ldr	r1, [pc, #452]	; 12504 <__assert_fail@plt+0xc74>
   1233c:	mov	r2, #5
   12340:	add	r1, pc, r1
   12344:	bl	11584 <dcgettext@plt>
   12348:	ldr	r3, [pc, #432]	; 12500 <__assert_fail@plt+0xc70>
   1234c:	ldr	r6, [r5, r3]
   12350:	ldr	r2, [r6]
   12354:	mov	r3, r2
   12358:	mov	r1, r0
   1235c:	mov	r0, #1
   12360:	bl	11788 <__printf_chk@plt>
   12364:	ldr	r1, [pc, #412]	; 12508 <__assert_fail@plt+0xc78>
   12368:	mov	r2, #5
   1236c:	mov	r0, r4
   12370:	add	r1, pc, r1
   12374:	bl	11584 <dcgettext@plt>
   12378:	ldr	r3, [pc, #396]	; 1250c <__assert_fail@plt+0xc7c>
   1237c:	ldr	r5, [r5, r3]
   12380:	ldr	r1, [r5]
   12384:	bl	114b8 <fputs_unlocked@plt>
   12388:	ldr	r1, [pc, #384]	; 12510 <__assert_fail@plt+0xc80>
   1238c:	mov	r2, #5
   12390:	mov	r0, r4
   12394:	add	r1, pc, r1
   12398:	bl	11584 <dcgettext@plt>
   1239c:	ldr	r1, [r5]
   123a0:	bl	114b8 <fputs_unlocked@plt>
   123a4:	ldr	r1, [pc, #360]	; 12514 <__assert_fail@plt+0xc84>
   123a8:	mov	r2, #5
   123ac:	mov	r0, r4
   123b0:	add	r1, pc, r1
   123b4:	bl	11584 <dcgettext@plt>
   123b8:	ldr	r1, [r5]
   123bc:	bl	114b8 <fputs_unlocked@plt>
   123c0:	ldr	r1, [pc, #336]	; 12518 <__assert_fail@plt+0xc88>
   123c4:	mov	r2, #5
   123c8:	mov	r0, r4
   123cc:	add	r1, pc, r1
   123d0:	bl	11584 <dcgettext@plt>
   123d4:	ldr	r1, [r5]
   123d8:	bl	114b8 <fputs_unlocked@plt>
   123dc:	ldr	r1, [pc, #312]	; 1251c <__assert_fail@plt+0xc8c>
   123e0:	mov	r2, #5
   123e4:	mov	r0, r4
   123e8:	add	r1, pc, r1
   123ec:	bl	11584 <dcgettext@plt>
   123f0:	ldr	r1, [r5]
   123f4:	bl	114b8 <fputs_unlocked@plt>
   123f8:	ldr	r1, [pc, #288]	; 12520 <__assert_fail@plt+0xc90>
   123fc:	mov	r2, #5
   12400:	mov	r0, r4
   12404:	add	r1, pc, r1
   12408:	bl	11584 <dcgettext@plt>
   1240c:	ldr	r1, [r5]
   12410:	bl	114b8 <fputs_unlocked@plt>
   12414:	ldr	r1, [pc, #264]	; 12524 <__assert_fail@plt+0xc94>
   12418:	mov	r2, #5
   1241c:	mov	r0, r4
   12420:	add	r1, pc, r1
   12424:	bl	11584 <dcgettext@plt>
   12428:	ldr	r1, [r5]
   1242c:	bl	114b8 <fputs_unlocked@plt>
   12430:	ldr	r1, [pc, #240]	; 12528 <__assert_fail@plt+0xc98>
   12434:	mov	r2, #5
   12438:	mov	r0, r4
   1243c:	add	r1, pc, r1
   12440:	bl	11584 <dcgettext@plt>
   12444:	ldr	r2, [pc, #224]	; 1252c <__assert_fail@plt+0xc9c>
   12448:	ldr	r3, [pc, #224]	; 12530 <__assert_fail@plt+0xca0>
   1244c:	add	r2, pc, r2
   12450:	add	r3, pc, r3
   12454:	mov	r1, r0
   12458:	mov	r0, #1
   1245c:	bl	11788 <__printf_chk@plt>
   12460:	mov	r0, #5
   12464:	mov	r1, r4
   12468:	bl	11800 <setlocale@plt>
   1246c:	cmp	r0, #0
   12470:	beq	1248c <__assert_fail@plt+0xbfc>
   12474:	ldr	r1, [pc, #184]	; 12534 <__assert_fail@plt+0xca4>
   12478:	mov	r2, #3
   1247c:	add	r1, pc, r1
   12480:	bl	1186c <strncmp@plt>
   12484:	cmp	r0, #0
   12488:	bne	124c0 <__assert_fail@plt+0xc30>
   1248c:	ldr	r1, [pc, #164]	; 12538 <__assert_fail@plt+0xca8>
   12490:	mov	r2, #5
   12494:	mov	r0, #0
   12498:	add	r1, pc, r1
   1249c:	bl	11584 <dcgettext@plt>
   124a0:	mov	r5, r0
   124a4:	ldr	r0, [r6]
   124a8:	bl	12a2c <close_stdout@@Base+0x118>
   124ac:	mov	r1, r5
   124b0:	mov	r2, r0
   124b4:	mov	r0, #1
   124b8:	bl	11788 <__printf_chk@plt>
   124bc:	b	12330 <__assert_fail@plt+0xaa0>
   124c0:	ldr	r1, [pc, #116]	; 1253c <__assert_fail@plt+0xcac>
   124c4:	mov	r2, #5
   124c8:	mov	r0, r4
   124cc:	add	r1, pc, r1
   124d0:	bl	11584 <dcgettext@plt>
   124d4:	mov	r5, r0
   124d8:	ldr	r0, [r6]
   124dc:	bl	12a2c <close_stdout@@Base+0x118>
   124e0:	mov	r1, r5
   124e4:	mov	r2, r0
   124e8:	mov	r0, #1
   124ec:	bl	11788 <__printf_chk@plt>
   124f0:	b	1248c <__assert_fail@plt+0xbfc>
   124f4:	andeq	r7, r1, ip, lsl #26
   124f8:	andeq	r0, r0, r4, ror r1
   124fc:	andeq	r6, r0, r8, asr sl
   12500:	muleq	r0, r0, r1
   12504:	andeq	r6, r0, r8, asr #20
   12508:	andeq	r6, r0, ip, asr sl
   1250c:	andeq	r0, r0, r4, lsl #3
   12510:	andeq	r6, r0, r8, ror sl
   12514:	andeq	r6, r0, r8, lsr #21
   12518:	andeq	r6, r0, r8, ror #26
   1251c:	andeq	r6, r0, ip, ror sp
   12520:	muleq	r0, r8, sp
   12524:	andeq	r6, r0, ip, lsl #28
   12528:	muleq	r0, r0, pc	; <UNPREDICTABLE>
   1252c:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   12530:	andeq	r6, r0, r4, lsr #31
   12534:	andeq	r6, r0, r0, lsr #31
   12538:	ldrdeq	r6, [r0], -r0
   1253c:	andeq	r6, r0, r4, asr pc
   12540:	ldr	r3, [pc, #328]	; 12690 <__assert_fail@plt+0xe00>
   12544:	push	{r4, r5, lr}
   12548:	add	r3, pc, r3
   1254c:	ldr	lr, [pc, #320]	; 12694 <__assert_fail@plt+0xe04>
   12550:	sub	sp, sp, #28
   12554:	ldr	ip, [pc, #316]	; 12698 <__assert_fail@plt+0xe08>
   12558:	add	r1, sp, #4
   1255c:	add	r2, sp, #8
   12560:	mov	r5, r0
   12564:	ldr	r4, [r3, lr]
   12568:	ldr	lr, [r4]
   1256c:	str	lr, [sp, #20]
   12570:	ldr	r3, [r3, ip]
   12574:	bl	15e5c <close_stdout@@Base+0x3548>
   12578:	cmp	r0, #0
   1257c:	beq	12634 <__assert_fail@plt+0xda4>
   12580:	vldr	d7, [sp, #8]
   12584:	vcmpe.f64	d7, #0.0
   12588:	vmrs	APSR_nzcv, fpscr
   1258c:	blt	12634 <__assert_fail@plt+0xda4>
   12590:	ldr	r2, [sp, #4]
   12594:	ldrb	r3, [r2]
   12598:	cmp	r3, #0
   1259c:	beq	1261c <__assert_fail@plt+0xd8c>
   125a0:	ldrb	r2, [r2, #1]
   125a4:	cmp	r2, #0
   125a8:	bne	12634 <__assert_fail@plt+0xda4>
   125ac:	sub	r3, r3, #100	; 0x64
   125b0:	cmp	r3, #15
   125b4:	addls	pc, pc, r3, lsl #2
   125b8:	b	12634 <__assert_fail@plt+0xda4>
   125bc:	b	1262c <__assert_fail@plt+0xd9c>
   125c0:	b	12634 <__assert_fail@plt+0xda4>
   125c4:	b	12634 <__assert_fail@plt+0xda4>
   125c8:	b	12634 <__assert_fail@plt+0xda4>
   125cc:	b	12624 <__assert_fail@plt+0xd94>
   125d0:	b	12634 <__assert_fail@plt+0xda4>
   125d4:	b	12634 <__assert_fail@plt+0xda4>
   125d8:	b	12634 <__assert_fail@plt+0xda4>
   125dc:	b	12634 <__assert_fail@plt+0xda4>
   125e0:	b	125fc <__assert_fail@plt+0xd6c>
   125e4:	b	12634 <__assert_fail@plt+0xda4>
   125e8:	b	12634 <__assert_fail@plt+0xda4>
   125ec:	b	12634 <__assert_fail@plt+0xda4>
   125f0:	b	12634 <__assert_fail@plt+0xda4>
   125f4:	b	12634 <__assert_fail@plt+0xda4>
   125f8:	b	1261c <__assert_fail@plt+0xd8c>
   125fc:	vldr	d0, [pc, #116]	; 12678 <__assert_fail@plt+0xde8>
   12600:	ldr	r2, [sp, #20]
   12604:	vmul.f64	d0, d7, d0
   12608:	ldr	r3, [r4]
   1260c:	cmp	r2, r3
   12610:	bne	12670 <__assert_fail@plt+0xde0>
   12614:	add	sp, sp, #28
   12618:	pop	{r4, r5, pc}
   1261c:	vmov.f64	d0, #112	; 0x3f800000  1.0
   12620:	b	12600 <__assert_fail@plt+0xd70>
   12624:	vldr	d0, [pc, #84]	; 12680 <__assert_fail@plt+0xdf0>
   12628:	b	12600 <__assert_fail@plt+0xd70>
   1262c:	vldr	d0, [pc, #84]	; 12688 <__assert_fail@plt+0xdf8>
   12630:	b	12600 <__assert_fail@plt+0xd70>
   12634:	ldr	r1, [pc, #96]	; 1269c <__assert_fail@plt+0xe0c>
   12638:	mov	r2, #5
   1263c:	mov	r0, #0
   12640:	add	r1, pc, r1
   12644:	bl	11584 <dcgettext@plt>
   12648:	mov	r4, r0
   1264c:	mov	r0, r5
   12650:	bl	14fd0 <close_stdout@@Base+0x26bc>
   12654:	mov	r2, r4
   12658:	mov	r3, r0
   1265c:	mov	r0, #0
   12660:	mov	r1, r0
   12664:	bl	11650 <error@plt>
   12668:	mov	r0, #125	; 0x7d
   1266c:	bl	122e0 <__assert_fail@plt+0xa50>
   12670:	bl	11590 <__stack_chk_fail@plt>
   12674:	nop	{0}
   12678:	andeq	r0, r0, r0
   1267c:	submi	r0, lr, r0
   12680:	andeq	r0, r0, r0
   12684:	adcmi	r2, ip, r0
   12688:	andeq	r0, r0, r0
   1268c:	rscsmi	r1, r5, r0, lsl #16
   12690:			; <UNDEFINED> instruction: 0x00017ab0
   12694:	andeq	r0, r0, r8, ror #2
   12698:	muleq	r0, r8, r1
   1269c:	andeq	r6, r0, ip, ror #28
   126a0:	ldr	r3, [pc, #440]	; 12860 <__assert_fail@plt+0xfd0>
   126a4:	ldr	r2, [pc, #440]	; 12864 <__assert_fail@plt+0xfd4>
   126a8:	add	r3, pc, r3
   126ac:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   126b0:	mov	r9, r1
   126b4:	ldr	r8, [r3, r2]
   126b8:	sub	sp, sp, #16
   126bc:	ldrb	r1, [r0]
   126c0:	mov	r7, r0
   126c4:	sub	r3, r1, #48	; 0x30
   126c8:	cmp	r3, #9
   126cc:	ldr	r3, [r8]
   126d0:	str	r3, [sp, #12]
   126d4:	bhi	12728 <__assert_fail@plt+0xe98>
   126d8:	bl	11734 <__errno_location@plt>
   126dc:	mov	r3, #0
   126e0:	add	r1, sp, #8
   126e4:	mov	r2, #10
   126e8:	mov	r5, r0
   126ec:	mov	r0, r7
   126f0:	str	r3, [r5]
   126f4:	bl	114f4 <strtol@plt>
   126f8:	ldr	r3, [sp, #8]
   126fc:	cmp	r7, r3
   12700:	beq	1271c <__assert_fail@plt+0xe8c>
   12704:	ldrb	r3, [r3]
   12708:	cmp	r3, #0
   1270c:	bne	1271c <__assert_fail@plt+0xe8c>
   12710:	ldr	r3, [r5]
   12714:	cmp	r3, #0
   12718:	beq	127e0 <__assert_fail@plt+0xf50>
   1271c:	mvn	r4, #0
   12720:	str	r4, [sp, #4]
   12724:	b	12790 <__assert_fail@plt+0xf00>
   12728:	bl	15d54 <close_stdout@@Base+0x3440>
   1272c:	ldr	r6, [pc, #308]	; 12868 <__assert_fail@plt+0xfd8>
   12730:	add	r6, pc, r6
   12734:	ldrb	r4, [r0]
   12738:	mov	sl, r0
   1273c:	add	r5, r0, #1
   12740:	cmp	r4, #0
   12744:	beq	1276c <__assert_fail@plt+0xedc>
   12748:	mov	r1, r4
   1274c:	mov	r0, r6
   12750:	bl	1171c <strchr@plt>
   12754:	cmp	r0, #0
   12758:	subne	r4, r4, #32
   1275c:	strbne	r4, [r5, #-1]
   12760:	ldrb	r4, [r5], #1
   12764:	cmp	r4, #0
   12768:	bne	12748 <__assert_fail@plt+0xeb8>
   1276c:	add	r4, sp, #4
   12770:	mov	r0, sl
   12774:	mov	r1, r4
   12778:	bl	15f2c <close_stdout@@Base+0x3618>
   1277c:	cmp	r0, #0
   12780:	bne	127c8 <__assert_fail@plt+0xf38>
   12784:	ldr	r4, [sp, #4]
   12788:	mov	r0, sl
   1278c:	bl	11530 <free@plt>
   12790:	cmp	r4, #0
   12794:	blt	1282c <__assert_fail@plt+0xf9c>
   12798:	mov	r0, r4
   1279c:	mov	r1, r9
   127a0:	bl	160ec <close_stdout@@Base+0x37d8>
   127a4:	cmp	r0, #0
   127a8:	bne	1282c <__assert_fail@plt+0xf9c>
   127ac:	ldr	r0, [sp, #4]
   127b0:	ldr	r2, [sp, #12]
   127b4:	ldr	r3, [r8]
   127b8:	cmp	r2, r3
   127bc:	bne	1285c <__assert_fail@plt+0xfcc>
   127c0:	add	sp, sp, #16
   127c4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   127c8:	ldrb	r3, [sl]
   127cc:	cmp	r3, #83	; 0x53
   127d0:	beq	127fc <__assert_fail@plt+0xf6c>
   127d4:	mvn	r4, #0
   127d8:	str	r4, [sp, #4]
   127dc:	b	12788 <__assert_fail@plt+0xef8>
   127e0:	and	r3, r0, #127	; 0x7f
   127e4:	add	r4, r3, #1
   127e8:	sbfx	r4, r4, #1, #7
   127ec:	cmp	r4, #0
   127f0:	movle	r4, r0
   127f4:	movgt	r4, r3
   127f8:	b	12720 <__assert_fail@plt+0xe90>
   127fc:	ldrb	r3, [sl, #1]
   12800:	cmp	r3, #73	; 0x49
   12804:	bne	127d4 <__assert_fail@plt+0xf44>
   12808:	ldrb	r3, [sl, #2]
   1280c:	cmp	r3, #71	; 0x47
   12810:	bne	127d4 <__assert_fail@plt+0xf44>
   12814:	mov	r1, r4
   12818:	add	r0, sl, #3
   1281c:	bl	15f2c <close_stdout@@Base+0x3618>
   12820:	cmp	r0, #0
   12824:	bne	127d4 <__assert_fail@plt+0xf44>
   12828:	b	12784 <__assert_fail@plt+0xef4>
   1282c:	ldr	r1, [pc, #56]	; 1286c <__assert_fail@plt+0xfdc>
   12830:	mov	r2, #5
   12834:	mov	r0, #0
   12838:	add	r1, pc, r1
   1283c:	bl	11584 <dcgettext@plt>
   12840:	mov	r3, r7
   12844:	mov	r2, r0
   12848:	mov	r0, #0
   1284c:	mov	r1, r0
   12850:	bl	11650 <error@plt>
   12854:	mvn	r0, #0
   12858:	b	127b0 <__assert_fail@plt+0xf20>
   1285c:	bl	11590 <__stack_chk_fail@plt>
   12860:	andeq	r7, r1, r0, asr r9
   12864:	andeq	r0, r0, r8, ror #2
   12868:	ldrdeq	r6, [r0], -r4
   1286c:	andeq	r6, r0, r8, ror #27

00012870 <c_strtod@@Base>:
   12870:	push	{r4, r5, r6, lr}
   12874:	mov	r6, r0
   12878:	ldr	r5, [pc, #96]	; 128e0 <c_strtod@@Base+0x70>
   1287c:	mov	r4, r1
   12880:	add	r5, pc, r5
   12884:	ldr	r2, [r5]
   12888:	cmp	r2, #0
   1288c:	beq	128c0 <c_strtod@@Base+0x50>
   12890:	ldr	r3, [pc, #76]	; 128e4 <c_strtod@@Base+0x74>
   12894:	ldr	r2, [pc, r3]
   12898:	cmp	r2, #0
   1289c:	beq	128b0 <c_strtod@@Base+0x40>
   128a0:	mov	r0, r6
   128a4:	mov	r1, r4
   128a8:	pop	{r4, r5, r6, lr}
   128ac:	b	117e8 <strtod_l@plt>
   128b0:	cmp	r4, #0
   128b4:	vldr	d0, [pc, #28]	; 128d8 <c_strtod@@Base+0x68>
   128b8:	strne	r6, [r4]
   128bc:	pop	{r4, r5, r6, pc}
   128c0:	ldr	r1, [pc, #32]	; 128e8 <c_strtod@@Base+0x78>
   128c4:	movw	r0, #8127	; 0x1fbf
   128c8:	add	r1, pc, r1
   128cc:	bl	1183c <newlocale@plt>
   128d0:	str	r0, [r5]
   128d4:	b	12890 <c_strtod@@Base+0x20>
	...
   128e0:	andeq	r7, r1, ip, lsr #22
   128e4:	andeq	r7, r1, r8, lsl fp
   128e8:	andeq	r6, r0, r4, ror sp
   128ec:	ldr	r3, [pc, #8]	; 128fc <c_strtod@@Base+0x8c>
   128f0:	add	r3, pc, r3
   128f4:	str	r0, [r3]
   128f8:	bx	lr
   128fc:	andeq	r7, r1, r0, asr #21
   12900:	ldr	r3, [pc, #8]	; 12910 <c_strtod@@Base+0xa0>
   12904:	add	r3, pc, r3
   12908:	strb	r0, [r3, #4]
   1290c:	bx	lr
   12910:	andeq	r7, r1, ip, lsr #21

00012914 <close_stdout@@Base>:
   12914:	push	{r4, r5, r6, r7, lr}
   12918:	sub	sp, sp, #12
   1291c:	ldr	r4, [pc, #228]	; 12a08 <close_stdout@@Base+0xf4>
   12920:	ldr	r3, [pc, #228]	; 12a0c <close_stdout@@Base+0xf8>
   12924:	add	r4, pc, r4
   12928:	ldr	r3, [r4, r3]
   1292c:	ldr	r0, [r3]
   12930:	bl	16268 <close_stdout@@Base+0x3954>
   12934:	cmp	r0, #0
   12938:	beq	12960 <close_stdout@@Base+0x4c>
   1293c:	ldr	r3, [pc, #204]	; 12a10 <close_stdout@@Base+0xfc>
   12940:	add	r3, pc, r3
   12944:	ldrb	r3, [r3, #4]
   12948:	cmp	r3, #0
   1294c:	beq	12980 <close_stdout@@Base+0x6c>
   12950:	bl	11734 <__errno_location@plt>
   12954:	ldr	r3, [r0]
   12958:	cmp	r3, #32
   1295c:	bne	12980 <close_stdout@@Base+0x6c>
   12960:	ldr	r3, [pc, #172]	; 12a14 <close_stdout@@Base+0x100>
   12964:	ldr	r3, [r4, r3]
   12968:	ldr	r0, [r3]
   1296c:	bl	16268 <close_stdout@@Base+0x3954>
   12970:	cmp	r0, #0
   12974:	bne	129d4 <close_stdout@@Base+0xc0>
   12978:	add	sp, sp, #12
   1297c:	pop	{r4, r5, r6, r7, pc}
   12980:	ldr	r1, [pc, #144]	; 12a18 <close_stdout@@Base+0x104>
   12984:	mov	r0, #0
   12988:	mov	r2, #5
   1298c:	add	r1, pc, r1
   12990:	bl	11584 <dcgettext@plt>
   12994:	ldr	r3, [pc, #128]	; 12a1c <close_stdout@@Base+0x108>
   12998:	ldr	r5, [pc, r3]
   1299c:	cmp	r5, #0
   129a0:	mov	r6, r0
   129a4:	beq	129e4 <close_stdout@@Base+0xd0>
   129a8:	bl	11734 <__errno_location@plt>
   129ac:	ldr	r7, [r0]
   129b0:	mov	r0, r5
   129b4:	bl	14e7c <close_stdout@@Base+0x2568>
   129b8:	ldr	r2, [pc, #96]	; 12a20 <close_stdout@@Base+0x10c>
   129bc:	str	r6, [sp]
   129c0:	mov	r1, r7
   129c4:	add	r2, pc, r2
   129c8:	mov	r3, r0
   129cc:	mov	r0, #0
   129d0:	bl	11650 <error@plt>
   129d4:	ldr	r3, [pc, #72]	; 12a24 <close_stdout@@Base+0x110>
   129d8:	ldr	r3, [r4, r3]
   129dc:	ldr	r0, [r3]
   129e0:	bl	1153c <_exit@plt>
   129e4:	bl	11734 <__errno_location@plt>
   129e8:	ldr	r2, [pc, #56]	; 12a28 <close_stdout@@Base+0x114>
   129ec:	add	r2, pc, r2
   129f0:	mov	r3, r0
   129f4:	mov	r0, r5
   129f8:	ldr	r1, [r3]
   129fc:	mov	r3, r6
   12a00:	bl	11650 <error@plt>
   12a04:	b	129d4 <close_stdout@@Base+0xc0>
   12a08:	ldrdeq	r7, [r1], -r4
   12a0c:	andeq	r0, r0, r4, lsl #3
   12a10:	andeq	r7, r1, r0, ror sl
   12a14:	andeq	r0, r0, r4, ror r1
   12a18:			; <UNDEFINED> instruction: 0x00006cb4
   12a1c:	andeq	r7, r1, r8, lsl sl
   12a20:	andeq	r6, r0, r8, lsl #25
   12a24:	andeq	r0, r0, r8, lsl #3
   12a28:	andeq	r6, r0, r4, ror #24
   12a2c:	ldrb	r3, [r0]
   12a30:	cmp	r3, #47	; 0x2f
   12a34:	bne	12a50 <close_stdout@@Base+0x13c>
   12a38:	add	r2, r0, #1
   12a3c:	mov	r0, r2
   12a40:	add	r2, r2, #1
   12a44:	ldrb	r3, [r0]
   12a48:	cmp	r3, #47	; 0x2f
   12a4c:	beq	12a3c <close_stdout@@Base+0x128>
   12a50:	cmp	r3, #0
   12a54:	bxeq	lr
   12a58:	mov	r2, r0
   12a5c:	mov	r1, #0
   12a60:	cmp	r3, #47	; 0x2f
   12a64:	moveq	r1, #1
   12a68:	beq	12a78 <close_stdout@@Base+0x164>
   12a6c:	cmp	r1, #0
   12a70:	movne	r0, r2
   12a74:	movne	r1, #0
   12a78:	ldrb	r3, [r2, #1]!
   12a7c:	cmp	r3, #0
   12a80:	bne	12a60 <close_stdout@@Base+0x14c>
   12a84:	bx	lr
   12a88:	push	{r4, lr}
   12a8c:	mov	r4, r0
   12a90:	bl	11704 <strlen@plt>
   12a94:	cmp	r0, #1
   12a98:	popls	{r4, pc}
   12a9c:	sub	r3, r0, #1
   12aa0:	ldrb	r2, [r4, r3]
   12aa4:	cmp	r2, #47	; 0x2f
   12aa8:	popne	{r4, pc}
   12aac:	mov	r0, r3
   12ab0:	cmp	r0, #1
   12ab4:	sub	r3, r3, #1
   12ab8:	beq	12acc <close_stdout@@Base+0x1b8>
   12abc:	ldrb	r2, [r4, r3]
   12ac0:	cmp	r2, #47	; 0x2f
   12ac4:	popne	{r4, pc}
   12ac8:	b	12aac <close_stdout@@Base+0x198>
   12acc:	pop	{r4, pc}
   12ad0:	vldr	d7, [pc, #200]	; 12ba0 <close_stdout@@Base+0x28c>
   12ad4:	vcmpe.f64	d0, d7
   12ad8:	push	{r4}		; (str r4, [sp, #-4]!)
   12adc:	vmrs	APSR_nzcv, fpscr
   12ae0:	ble	12b8c <close_stdout@@Base+0x278>
   12ae4:	vldr	d7, [pc, #188]	; 12ba8 <close_stdout@@Base+0x294>
   12ae8:	vcmpe.f64	d0, d7
   12aec:	vmrs	APSR_nzcv, fpscr
   12af0:	bpl	12b74 <close_stdout@@Base+0x260>
   12af4:	vcvt.s32.f64	s11, d0
   12af8:	vldr	d7, [pc, #176]	; 12bb0 <close_stdout@@Base+0x29c>
   12afc:	movw	r3, #12193	; 0x2fa1
   12b00:	movt	r3, #17592	; 0x44b8
   12b04:	mov	r1, #51712	; 0xca00
   12b08:	movt	r1, #15258	; 0x3b9a
   12b0c:	vcvt.f64.s32	d6, s11
   12b10:	vsub.f64	d0, d0, d6
   12b14:	vmul.f64	d0, d0, d7
   12b18:	vcvt.s32.f64	s13, d0
   12b1c:	vmov	r4, s13
   12b20:	vcvt.f64.s32	d7, s13
   12b24:	vcmpe.f64	d7, d0
   12b28:	vmrs	APSR_nzcv, fpscr
   12b2c:	movpl	r2, #0
   12b30:	movmi	r2, #1
   12b34:	add	r2, r2, r4
   12b38:	vmov	r4, s11
   12b3c:	smull	ip, r3, r3, r2
   12b40:	asr	ip, r2, #31
   12b44:	rsb	r3, ip, r3, asr #28
   12b48:	add	ip, r3, r4
   12b4c:	mls	r3, r1, r3, r2
   12b50:	cmp	r3, #0
   12b54:	addlt	r3, r3, #998244352	; 0x3b800000
   12b58:	sublt	ip, ip, #1
   12b5c:	addlt	r3, r3, #1753088	; 0x1ac000
   12b60:	str	ip, [r0]
   12b64:	addlt	r3, r3, #2560	; 0xa00
   12b68:	str	r3, [r0, #4]
   12b6c:	pop	{r4}		; (ldr r4, [sp], #4)
   12b70:	bx	lr
   12b74:	movw	r3, #51711	; 0xc9ff
   12b78:	mvn	r2, #-2147483648	; 0x80000000
   12b7c:	movt	r3, #15258	; 0x3b9a
   12b80:	stm	r0, {r2, r3}
   12b84:	pop	{r4}		; (ldr r4, [sp], #4)
   12b88:	bx	lr
   12b8c:	mov	r2, #-2147483648	; 0x80000000
   12b90:	mov	r3, #0
   12b94:	stm	r0, {r2, r3}
   12b98:	pop	{r4}		; (ldr r4, [sp], #4)
   12b9c:	bx	lr
   12ba0:	andeq	r0, r0, r0
   12ba4:	mvngt	r0, r0
   12ba8:	andeq	r0, r0, r0
   12bac:	mvnmi	r0, r0
   12bb0:	andeq	r0, r0, r0
   12bb4:	bicmi	ip, sp, r5, ror #26
   12bb8:	push	{r3, r4, r5, r6, r7, lr}
   12bbc:	subs	r4, r0, #0
   12bc0:	ldr	r5, [pc, #172]	; 12c74 <close_stdout@@Base+0x360>
   12bc4:	add	r5, pc, r5
   12bc8:	beq	12c50 <close_stdout@@Base+0x33c>
   12bcc:	mov	r1, #47	; 0x2f
   12bd0:	bl	11824 <strrchr@plt>
   12bd4:	subs	r6, r0, #0
   12bd8:	beq	12c34 <close_stdout@@Base+0x320>
   12bdc:	add	r7, r6, #1
   12be0:	rsb	r3, r4, r7
   12be4:	cmp	r3, #6
   12be8:	ble	12c34 <close_stdout@@Base+0x320>
   12bec:	ldr	r1, [pc, #132]	; 12c78 <close_stdout@@Base+0x364>
   12bf0:	sub	r0, r6, #6
   12bf4:	mov	r2, #7
   12bf8:	add	r1, pc, r1
   12bfc:	bl	1186c <strncmp@plt>
   12c00:	cmp	r0, #0
   12c04:	bne	12c34 <close_stdout@@Base+0x320>
   12c08:	ldr	r1, [pc, #108]	; 12c7c <close_stdout@@Base+0x368>
   12c0c:	mov	r0, r7
   12c10:	mov	r2, #3
   12c14:	add	r1, pc, r1
   12c18:	bl	1186c <strncmp@plt>
   12c1c:	cmp	r0, #0
   12c20:	movne	r4, r7
   12c24:	ldreq	r3, [pc, #84]	; 12c80 <close_stdout@@Base+0x36c>
   12c28:	addeq	r4, r6, #4
   12c2c:	ldreq	r3, [r5, r3]
   12c30:	streq	r4, [r3]
   12c34:	ldr	r2, [pc, #72]	; 12c84 <close_stdout@@Base+0x370>
   12c38:	ldr	r3, [pc, #72]	; 12c88 <close_stdout@@Base+0x374>
   12c3c:	ldr	r2, [r5, r2]
   12c40:	str	r4, [r2]
   12c44:	ldr	r3, [r5, r3]
   12c48:	str	r4, [r3]
   12c4c:	pop	{r3, r4, r5, r6, r7, pc}
   12c50:	ldr	r3, [pc, #52]	; 12c8c <close_stdout@@Base+0x378>
   12c54:	mov	r1, #1
   12c58:	ldr	r0, [pc, #48]	; 12c90 <close_stdout@@Base+0x37c>
   12c5c:	mov	r2, #55	; 0x37
   12c60:	ldr	r3, [r5, r3]
   12c64:	add	r0, pc, r0
   12c68:	ldr	r3, [r3]
   12c6c:	bl	115fc <fwrite@plt>
   12c70:	bl	11878 <abort@plt>
   12c74:	andeq	r7, r1, r4, lsr r4
   12c78:	muleq	r0, r4, sl
   12c7c:	andeq	r6, r0, r0, lsl #21
   12c80:	muleq	r0, ip, r1
   12c84:	muleq	r0, r0, r1
   12c88:	andeq	r0, r0, ip, lsl #3
   12c8c:	andeq	r0, r0, r4, ror r1
   12c90:	strdeq	r6, [r0], -r0
   12c94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12c98:	sub	sp, sp, #156	; 0x9c
   12c9c:	ldr	r7, [pc, #2116]	; 134e8 <close_stdout@@Base+0xbd4>
   12ca0:	add	r2, sp, #120	; 0x78
   12ca4:	ldr	r3, [pc, #2112]	; 134ec <close_stdout@@Base+0xbd8>
   12ca8:	mov	fp, r0
   12cac:	add	r7, pc, r7
   12cb0:	mov	r0, r1
   12cb4:	mov	r1, #2
   12cb8:	add	r6, sp, #40	; 0x28
   12cbc:	ldr	r3, [r7, r3]
   12cc0:	add	r9, sp, #96	; 0x60
   12cc4:	str	r2, [sp, #16]
   12cc8:	mov	r4, #1
   12ccc:	mov	r5, #0
   12cd0:	str	r3, [sp, #28]
   12cd4:	add	r3, sp, #64	; 0x40
   12cd8:	ldr	r2, [sp, #28]
   12cdc:	str	r3, [sp, #12]
   12ce0:	ldr	r3, [r2]
   12ce4:	str	r3, [sp, #148]	; 0x94
   12ce8:	bl	15008 <close_stdout@@Base+0x26f4>
   12cec:	str	r0, [sp, #20]
   12cf0:	ldrb	r3, [fp]
   12cf4:	cmp	r3, #0
   12cf8:	beq	132f0 <close_stdout@@Base+0x9dc>
   12cfc:	mov	r0, fp
   12d00:	ldr	r1, [sp, #20]
   12d04:	bl	17260 <close_stdout@@Base+0x494c>
   12d08:	subs	r8, r0, #0
   12d0c:	beq	132f0 <close_stdout@@Base+0x9dc>
   12d10:	bl	11620 <__ctype_get_mb_cur_max@plt>
   12d14:	cmp	r0, #1
   12d18:	bls	13270 <close_stdout@@Base+0x95c>
   12d1c:	cmp	fp, r8
   12d20:	str	r5, [r6, #4]
   12d24:	str	fp, [sp, #52]	; 0x34
   12d28:	addcc	sl, sp, #64	; 0x40
   12d2c:	strb	r5, [sp, #36]	; 0x24
   12d30:	str	r5, [r6]
   12d34:	strb	r5, [sp, #48]	; 0x30
   12d38:	strcc	r9, [sp, #24]
   12d3c:	bcs	13310 <close_stdout@@Base+0x9fc>
   12d40:	ldrb	r3, [sp, #36]	; 0x24
   12d44:	cmp	r3, #0
   12d48:	bne	12da8 <close_stdout@@Base+0x494>
   12d4c:	ldr	r2, [pc, #1948]	; 134f0 <close_stdout@@Base+0xbdc>
   12d50:	ldrb	r3, [fp]
   12d54:	ldr	r1, [r7, r2]
   12d58:	and	r2, r3, #31
   12d5c:	lsr	r3, r3, #5
   12d60:	ldr	r3, [r1, r3, lsl #2]
   12d64:	lsr	r3, r3, r2
   12d68:	tst	r3, #1
   12d6c:	beq	12d94 <close_stdout@@Base+0x480>
   12d70:	str	r4, [sp, #56]	; 0x38
   12d74:	ldrb	r2, [fp]
   12d78:	strb	r4, [sp, #60]	; 0x3c
   12d7c:	strb	r4, [sp, #48]	; 0x30
   12d80:	mov	r9, r2
   12d84:	cmp	r9, #0
   12d88:	str	r2, [sp, #64]	; 0x40
   12d8c:	bne	12e2c <close_stdout@@Base+0x518>
   12d90:	bl	11878 <abort@plt>
   12d94:	mov	r0, r6
   12d98:	bl	11560 <mbsinit@plt>
   12d9c:	cmp	r0, #0
   12da0:	beq	134a4 <close_stdout@@Base+0xb90>
   12da4:	strb	r4, [sp, #36]	; 0x24
   12da8:	bl	11620 <__ctype_get_mb_cur_max@plt>
   12dac:	mov	r1, r0
   12db0:	mov	r0, fp
   12db4:	bl	14fdc <close_stdout@@Base+0x26c8>
   12db8:	mov	r1, fp
   12dbc:	mov	r3, r6
   12dc0:	mov	r2, r0
   12dc4:	mov	r0, sl
   12dc8:	bl	11644 <mbrtowc@plt>
   12dcc:	cmn	r0, #1
   12dd0:	str	r0, [sp, #56]	; 0x38
   12dd4:	beq	13218 <close_stdout@@Base+0x904>
   12dd8:	cmn	r0, #2
   12ddc:	beq	13248 <close_stdout@@Base+0x934>
   12de0:	cmp	r0, #0
   12de4:	bne	13240 <close_stdout@@Base+0x92c>
   12de8:	ldr	fp, [sp, #52]	; 0x34
   12dec:	str	r4, [sp, #56]	; 0x38
   12df0:	ldrb	r3, [fp]
   12df4:	cmp	r3, #0
   12df8:	bne	134c8 <close_stdout@@Base+0xbb4>
   12dfc:	ldr	r2, [sp, #64]	; 0x40
   12e00:	cmp	r2, #0
   12e04:	bne	131f8 <close_stdout@@Base+0x8e4>
   12e08:	mov	r9, r2
   12e0c:	mov	r0, r6
   12e10:	strb	r4, [sp, #60]	; 0x3c
   12e14:	bl	11560 <mbsinit@plt>
   12e18:	strb	r4, [sp, #48]	; 0x30
   12e1c:	cmp	r0, #0
   12e20:	strbne	r5, [sp, #36]	; 0x24
   12e24:	cmp	r9, #0
   12e28:	beq	12d90 <close_stdout@@Base+0x47c>
   12e2c:	ldr	fp, [sp, #52]	; 0x34
   12e30:	ldr	r3, [sp, #56]	; 0x38
   12e34:	strb	r5, [sp, #48]	; 0x30
   12e38:	add	fp, fp, r3
   12e3c:	ldrb	r3, [sp, #60]	; 0x3c
   12e40:	cmp	r8, fp
   12e44:	str	fp, [sp, #52]	; 0x34
   12e48:	bhi	12d40 <close_stdout@@Base+0x42c>
   12e4c:	cmp	r3, #0
   12e50:	mov	r2, r9
   12e54:	ldr	r9, [sp, #24]
   12e58:	beq	13310 <close_stdout@@Base+0x9fc>
   12e5c:	mov	r0, r2
   12e60:	bl	11740 <iswalnum@plt>
   12e64:	rsbs	r0, r0, #1
   12e68:	movcc	r0, #0
   12e6c:	str	r0, [sp, #24]
   12e70:	strb	r5, [sp, #92]	; 0x5c
   12e74:	ldrb	r2, [sp, #92]	; 0x5c
   12e78:	ldr	fp, [sp, #20]
   12e7c:	cmp	r2, #0
   12e80:	str	r5, [r6, #4]
   12e84:	str	r5, [r9, #4]
   12e88:	str	r8, [sp, #52]	; 0x34
   12e8c:	strb	r5, [sp, #36]	; 0x24
   12e90:	str	r5, [r6]
   12e94:	strb	r5, [sp, #48]	; 0x30
   12e98:	str	fp, [sp, #108]	; 0x6c
   12e9c:	str	r5, [r9]
   12ea0:	strb	r5, [sp, #104]	; 0x68
   12ea4:	bne	13060 <close_stdout@@Base+0x74c>
   12ea8:	ldr	r1, [pc, #1600]	; 134f0 <close_stdout@@Base+0xbdc>
   12eac:	ldrb	r2, [fp]
   12eb0:	ldr	r0, [r7, r1]
   12eb4:	and	r1, r2, #31
   12eb8:	lsr	r2, r2, #5
   12ebc:	ldr	r2, [r0, r2, lsl #2]
   12ec0:	lsr	r2, r2, r1
   12ec4:	tst	r2, #1
   12ec8:	beq	131c0 <close_stdout@@Base+0x8ac>
   12ecc:	str	r4, [sp, #112]	; 0x70
   12ed0:	ldrb	r3, [fp]
   12ed4:	strb	r4, [sp, #116]	; 0x74
   12ed8:	mov	fp, r3
   12edc:	str	r3, [sp, #120]	; 0x78
   12ee0:	cmp	fp, #0
   12ee4:	strb	r4, [sp, #104]	; 0x68
   12ee8:	mov	r3, #1
   12eec:	bne	13014 <close_stdout@@Base+0x700>
   12ef0:	ldrb	ip, [sp, #48]	; 0x30
   12ef4:	cmp	ip, #0
   12ef8:	bne	13264 <close_stdout@@Base+0x950>
   12efc:	ldrb	r2, [sp, #36]	; 0x24
   12f00:	ldr	sl, [sp, #52]	; 0x34
   12f04:	cmp	r2, #0
   12f08:	bne	133b4 <close_stdout@@Base+0xaa0>
   12f0c:	ldr	r1, [pc, #1500]	; 134f0 <close_stdout@@Base+0xbdc>
   12f10:	ldrb	r2, [sl]
   12f14:	ldr	r0, [r7, r1]
   12f18:	and	r1, r2, #31
   12f1c:	lsr	r2, r2, #5
   12f20:	ldr	r2, [r0, r2, lsl #2]
   12f24:	lsr	r2, r2, r1
   12f28:	tst	r2, #1
   12f2c:	beq	13390 <close_stdout@@Base+0xa7c>
   12f30:	str	r3, [sp, #56]	; 0x38
   12f34:	mov	ip, r3
   12f38:	ldrb	r2, [sl]
   12f3c:	strb	r3, [sp, #60]	; 0x3c
   12f40:	mov	r3, r2
   12f44:	str	r2, [sp, #64]	; 0x40
   12f48:	strb	r4, [sp, #48]	; 0x30
   12f4c:	cmp	ip, #0
   12f50:	beq	12f5c <close_stdout@@Base+0x648>
   12f54:	cmp	r3, #0
   12f58:	beq	12f78 <close_stdout@@Base+0x664>
   12f5c:	ldrb	r2, [sp, #60]	; 0x3c
   12f60:	cmp	r2, #0
   12f64:	beq	12f78 <close_stdout@@Base+0x664>
   12f68:	mov	r0, r3
   12f6c:	bl	11740 <iswalnum@plt>
   12f70:	cmp	r0, #0
   12f74:	bne	12f84 <close_stdout@@Base+0x670>
   12f78:	ldr	r2, [sp, #24]
   12f7c:	cmp	r2, #0
   12f80:	bne	1349c <close_stdout@@Base+0xb88>
   12f84:	ldr	r2, [pc, #1380]	; 134f0 <close_stdout@@Base+0xbdc>
   12f88:	str	r5, [r6, #4]
   12f8c:	str	r8, [sp, #52]	; 0x34
   12f90:	strb	r5, [sp, #36]	; 0x24
   12f94:	str	r5, [r6]
   12f98:	strb	r5, [sp, #48]	; 0x30
   12f9c:	ldrb	r3, [r8]
   12fa0:	ldr	r1, [r7, r2]
   12fa4:	and	r2, r3, #31
   12fa8:	lsr	r3, r3, #5
   12fac:	ldr	r3, [r1, r3, lsl #2]
   12fb0:	lsr	r3, r3, r2
   12fb4:	tst	r3, #1
   12fb8:	beq	1331c <close_stdout@@Base+0xa08>
   12fbc:	str	r4, [sp, #56]	; 0x38
   12fc0:	ldrb	fp, [r8]
   12fc4:	strb	r4, [sp, #60]	; 0x3c
   12fc8:	str	fp, [sp, #64]	; 0x40
   12fcc:	cmp	fp, #0
   12fd0:	strb	r4, [sp, #48]	; 0x30
   12fd4:	bne	13304 <close_stdout@@Base+0x9f0>
   12fd8:	ldr	r0, [sp, #20]
   12fdc:	bl	11530 <free@plt>
   12fe0:	ldr	r1, [sp, #28]
   12fe4:	ldr	r2, [sp, #148]	; 0x94
   12fe8:	mov	r0, fp
   12fec:	ldr	r3, [r1]
   12ff0:	cmp	r2, r3
   12ff4:	bne	134c4 <close_stdout@@Base+0xbb0>
   12ff8:	add	sp, sp, #156	; 0x9c
   12ffc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13000:	ldr	r0, [sp, #108]	; 0x6c
   13004:	bl	11704 <strlen@plt>
   13008:	strb	r5, [sp, #116]	; 0x74
   1300c:	str	r0, [sp, #112]	; 0x70
   13010:	strb	r4, [sp, #104]	; 0x68
   13014:	ldrb	fp, [sp, #48]	; 0x30
   13018:	cmp	fp, #0
   1301c:	beq	130c4 <close_stdout@@Base+0x7b0>
   13020:	ldrb	fp, [sp, #60]	; 0x3c
   13024:	cmp	fp, #0
   13028:	bne	13118 <close_stdout@@Base+0x804>
   1302c:	ldr	r1, [sp, #52]	; 0x34
   13030:	ldr	r2, [sp, #56]	; 0x38
   13034:	ldr	fp, [sp, #108]	; 0x6c
   13038:	add	r1, r1, r2
   1303c:	ldr	r2, [sp, #112]	; 0x70
   13040:	strb	r5, [sp, #48]	; 0x30
   13044:	add	fp, fp, r2
   13048:	ldrb	r2, [sp, #92]	; 0x5c
   1304c:	strb	r5, [sp, #104]	; 0x68
   13050:	cmp	r2, #0
   13054:	str	r1, [sp, #52]	; 0x34
   13058:	str	fp, [sp, #108]	; 0x6c
   1305c:	beq	12ea8 <close_stdout@@Base+0x594>
   13060:	bl	11620 <__ctype_get_mb_cur_max@plt>
   13064:	mov	r1, r0
   13068:	mov	r0, fp
   1306c:	bl	14fdc <close_stdout@@Base+0x26c8>
   13070:	mov	r1, fp
   13074:	mov	r3, r9
   13078:	mov	r2, r0
   1307c:	add	r0, sp, #120	; 0x78
   13080:	bl	11644 <mbrtowc@plt>
   13084:	cmn	r0, #1
   13088:	str	r0, [sp, #112]	; 0x70
   1308c:	strbeq	r5, [sp, #116]	; 0x74
   13090:	streq	r4, [sp, #112]	; 0x70
   13094:	beq	13010 <close_stdout@@Base+0x6fc>
   13098:	cmn	r0, #2
   1309c:	beq	13000 <close_stdout@@Base+0x6ec>
   130a0:	cmp	r0, #0
   130a4:	beq	131d8 <close_stdout@@Base+0x8c4>
   130a8:	ldr	fp, [sp, #120]	; 0x78
   130ac:	mov	r0, r9
   130b0:	strb	r4, [sp, #116]	; 0x74
   130b4:	bl	11560 <mbsinit@plt>
   130b8:	cmp	r0, #0
   130bc:	strbne	r5, [sp, #92]	; 0x5c
   130c0:	b	12ee0 <close_stdout@@Base+0x5cc>
   130c4:	ldrb	r3, [sp, #36]	; 0x24
   130c8:	ldr	sl, [sp, #52]	; 0x34
   130cc:	cmp	r3, #0
   130d0:	bne	1313c <close_stdout@@Base+0x828>
   130d4:	ldr	r1, [pc, #1044]	; 134f0 <close_stdout@@Base+0xbdc>
   130d8:	ldrb	r2, [sl]
   130dc:	ldr	r0, [r7, r1]
   130e0:	and	r1, r2, #31
   130e4:	lsr	r2, r2, #5
   130e8:	ldr	r2, [r0, r2, lsl #2]
   130ec:	lsr	r2, r2, r1
   130f0:	tst	r2, #1
   130f4:	beq	13128 <close_stdout@@Base+0x814>
   130f8:	str	r4, [sp, #56]	; 0x38
   130fc:	mov	fp, #1
   13100:	ldrb	r3, [sl]
   13104:	strb	r4, [sp, #60]	; 0x3c
   13108:	str	r3, [sp, #64]	; 0x40
   1310c:	cmp	fp, #0
   13110:	strb	r4, [sp, #48]	; 0x30
   13114:	beq	1302c <close_stdout@@Base+0x718>
   13118:	ldr	r3, [sp, #64]	; 0x40
   1311c:	cmp	r3, #0
   13120:	bne	1302c <close_stdout@@Base+0x718>
   13124:	b	12d90 <close_stdout@@Base+0x47c>
   13128:	mov	r0, r6
   1312c:	bl	11560 <mbsinit@plt>
   13130:	cmp	r0, #0
   13134:	beq	134a4 <close_stdout@@Base+0xb90>
   13138:	strb	r4, [sp, #36]	; 0x24
   1313c:	bl	11620 <__ctype_get_mb_cur_max@plt>
   13140:	mov	r1, r0
   13144:	mov	r0, sl
   13148:	bl	14fdc <close_stdout@@Base+0x26c8>
   1314c:	mov	r1, sl
   13150:	mov	r3, r6
   13154:	mov	r2, r0
   13158:	add	r0, sp, #64	; 0x40
   1315c:	bl	11644 <mbrtowc@plt>
   13160:	cmn	r0, #1
   13164:	str	r0, [sp, #56]	; 0x38
   13168:	strbeq	r5, [sp, #60]	; 0x3c
   1316c:	streq	r4, [sp, #56]	; 0x38
   13170:	beq	1310c <close_stdout@@Base+0x7f8>
   13174:	cmn	r0, #2
   13178:	beq	1322c <close_stdout@@Base+0x918>
   1317c:	cmp	r0, #0
   13180:	bne	131a4 <close_stdout@@Base+0x890>
   13184:	ldr	r3, [sp, #52]	; 0x34
   13188:	str	r4, [sp, #56]	; 0x38
   1318c:	ldrb	r3, [r3]
   13190:	cmp	r3, #0
   13194:	bne	134c8 <close_stdout@@Base+0xbb4>
   13198:	ldr	r3, [sp, #64]	; 0x40
   1319c:	cmp	r3, #0
   131a0:	bne	131f8 <close_stdout@@Base+0x8e4>
   131a4:	mov	r0, r6
   131a8:	strb	r4, [sp, #60]	; 0x3c
   131ac:	bl	11560 <mbsinit@plt>
   131b0:	mov	fp, #1
   131b4:	cmp	r0, #0
   131b8:	strbne	r5, [sp, #36]	; 0x24
   131bc:	b	1310c <close_stdout@@Base+0x7f8>
   131c0:	mov	r0, r9
   131c4:	bl	11560 <mbsinit@plt>
   131c8:	cmp	r0, #0
   131cc:	beq	134a4 <close_stdout@@Base+0xb90>
   131d0:	strb	r4, [sp, #92]	; 0x5c
   131d4:	b	13060 <close_stdout@@Base+0x74c>
   131d8:	ldr	r3, [sp, #108]	; 0x6c
   131dc:	str	r4, [sp, #112]	; 0x70
   131e0:	ldrb	r3, [r3]
   131e4:	cmp	r3, #0
   131e8:	bne	134c8 <close_stdout@@Base+0xbb4>
   131ec:	ldr	fp, [sp, #120]	; 0x78
   131f0:	cmp	fp, #0
   131f4:	beq	130ac <close_stdout@@Base+0x798>
   131f8:	ldr	r0, [pc, #756]	; 134f4 <close_stdout@@Base+0xbe0>
   131fc:	mov	r2, #179	; 0xb3
   13200:	ldr	r1, [pc, #752]	; 134f8 <close_stdout@@Base+0xbe4>
   13204:	ldr	r3, [pc, #752]	; 134fc <close_stdout@@Base+0xbe8>
   13208:	add	r0, pc, r0
   1320c:	add	r1, pc, r1
   13210:	add	r3, pc, r3
   13214:	bl	11890 <__assert_fail@plt>
   13218:	str	r4, [sp, #56]	; 0x38
   1321c:	strb	r5, [sp, #60]	; 0x3c
   13220:	ldr	r9, [sp, #64]	; 0x40
   13224:	ldr	fp, [sp, #52]	; 0x34
   13228:	b	12e30 <close_stdout@@Base+0x51c>
   1322c:	ldr	r0, [sp, #52]	; 0x34
   13230:	bl	11704 <strlen@plt>
   13234:	strb	r5, [sp, #60]	; 0x3c
   13238:	str	r0, [sp, #56]	; 0x38
   1323c:	b	1310c <close_stdout@@Base+0x7f8>
   13240:	ldr	r9, [sp, #64]	; 0x40
   13244:	b	12e0c <close_stdout@@Base+0x4f8>
   13248:	ldr	fp, [sp, #52]	; 0x34
   1324c:	mov	r0, fp
   13250:	bl	11704 <strlen@plt>
   13254:	strb	r5, [sp, #60]	; 0x3c
   13258:	ldr	r9, [sp, #64]	; 0x40
   1325c:	str	r0, [sp, #56]	; 0x38
   13260:	b	12e30 <close_stdout@@Base+0x51c>
   13264:	ldr	r3, [sp, #64]	; 0x40
   13268:	ldrb	ip, [sp, #60]	; 0x3c
   1326c:	b	12f4c <close_stdout@@Base+0x638>
   13270:	cmp	fp, r8
   13274:	movcs	fp, #1
   13278:	bcs	13298 <close_stdout@@Base+0x984>
   1327c:	bl	116e0 <__ctype_b_loc@plt>
   13280:	ldrb	r3, [r8, #-1]
   13284:	lsl	r3, r3, #1
   13288:	ldr	r2, [r0]
   1328c:	ldrh	fp, [r2, r3]
   13290:	eor	fp, fp, #8
   13294:	ubfx	fp, fp, #3, #1
   13298:	ldr	r0, [sp, #20]
   1329c:	bl	11704 <strlen@plt>
   132a0:	ldrb	r3, [r8, r0]
   132a4:	cmp	r3, #0
   132a8:	beq	132cc <close_stdout@@Base+0x9b8>
   132ac:	str	r3, [sp, #8]
   132b0:	bl	116e0 <__ctype_b_loc@plt>
   132b4:	ldr	r3, [sp, #8]
   132b8:	lsl	r3, r3, #1
   132bc:	ldr	r2, [r0]
   132c0:	ldrh	r3, [r2, r3]
   132c4:	tst	r3, #8
   132c8:	bne	132d4 <close_stdout@@Base+0x9c0>
   132cc:	cmp	fp, #0
   132d0:	bne	1349c <close_stdout@@Base+0xb88>
   132d4:	ldrb	r3, [r8]
   132d8:	cmp	r3, #0
   132dc:	beq	132f0 <close_stdout@@Base+0x9dc>
   132e0:	add	fp, r8, #1
   132e4:	ldrb	r3, [fp]
   132e8:	cmp	r3, #0
   132ec:	bne	12cfc <close_stdout@@Base+0x3e8>
   132f0:	mov	fp, #0
   132f4:	b	12fd8 <close_stdout@@Base+0x6c4>
   132f8:	ldr	r0, [sp, #52]	; 0x34
   132fc:	bl	11704 <strlen@plt>
   13300:	str	r0, [sp, #56]	; 0x38
   13304:	ldr	fp, [sp, #56]	; 0x38
   13308:	add	fp, r8, fp
   1330c:	b	12cf0 <close_stdout@@Base+0x3dc>
   13310:	mov	r3, #1
   13314:	str	r3, [sp, #24]
   13318:	b	12e70 <close_stdout@@Base+0x55c>
   1331c:	mov	r0, r6
   13320:	bl	11560 <mbsinit@plt>
   13324:	cmp	r0, #0
   13328:	beq	134a4 <close_stdout@@Base+0xb90>
   1332c:	strb	r4, [sp, #36]	; 0x24
   13330:	bl	11620 <__ctype_get_mb_cur_max@plt>
   13334:	mov	r1, r0
   13338:	mov	r0, r8
   1333c:	bl	14fdc <close_stdout@@Base+0x26c8>
   13340:	mov	r1, r8
   13344:	mov	r3, r6
   13348:	mov	r2, r0
   1334c:	add	r0, sp, #64	; 0x40
   13350:	bl	11644 <mbrtowc@plt>
   13354:	cmn	r0, #1
   13358:	str	r0, [sp, #56]	; 0x38
   1335c:	streq	r4, [sp, #56]	; 0x38
   13360:	beq	13304 <close_stdout@@Base+0x9f0>
   13364:	cmn	r0, #2
   13368:	beq	132f8 <close_stdout@@Base+0x9e4>
   1336c:	cmp	r0, #0
   13370:	beq	13420 <close_stdout@@Base+0xb0c>
   13374:	ldr	fp, [sp, #64]	; 0x40
   13378:	mov	r0, r6
   1337c:	strb	r4, [sp, #60]	; 0x3c
   13380:	bl	11560 <mbsinit@plt>
   13384:	cmp	r0, #0
   13388:	strbne	r5, [sp, #36]	; 0x24
   1338c:	b	12fcc <close_stdout@@Base+0x6b8>
   13390:	mov	r0, r6
   13394:	str	r3, [sp, #8]
   13398:	str	ip, [sp, #4]
   1339c:	bl	11560 <mbsinit@plt>
   133a0:	ldr	r3, [sp, #8]
   133a4:	ldr	ip, [sp, #4]
   133a8:	cmp	r0, #0
   133ac:	beq	134a4 <close_stdout@@Base+0xb90>
   133b0:	strb	r3, [sp, #36]	; 0x24
   133b4:	str	ip, [sp, #4]
   133b8:	bl	11620 <__ctype_get_mb_cur_max@plt>
   133bc:	mov	r1, r0
   133c0:	mov	r0, sl
   133c4:	bl	14fdc <close_stdout@@Base+0x26c8>
   133c8:	mov	r1, sl
   133cc:	mov	r3, r6
   133d0:	mov	r2, r0
   133d4:	add	r0, sp, #64	; 0x40
   133d8:	bl	11644 <mbrtowc@plt>
   133dc:	ldr	ip, [sp, #4]
   133e0:	cmn	r0, #1
   133e4:	str	r0, [sp, #56]	; 0x38
   133e8:	beq	1346c <close_stdout@@Base+0xb58>
   133ec:	cmn	r0, #2
   133f0:	beq	1347c <close_stdout@@Base+0xb68>
   133f4:	cmp	r0, #0
   133f8:	bne	13444 <close_stdout@@Base+0xb30>
   133fc:	ldr	r3, [sp, #52]	; 0x34
   13400:	str	r4, [sp, #56]	; 0x38
   13404:	ldrb	r3, [r3]
   13408:	cmp	r3, #0
   1340c:	bne	134c8 <close_stdout@@Base+0xbb4>
   13410:	ldr	r3, [sp, #64]	; 0x40
   13414:	cmp	r3, #0
   13418:	beq	13448 <close_stdout@@Base+0xb34>
   1341c:	b	131f8 <close_stdout@@Base+0x8e4>
   13420:	ldr	r3, [sp, #52]	; 0x34
   13424:	str	r4, [sp, #56]	; 0x38
   13428:	ldrb	r3, [r3]
   1342c:	cmp	r3, #0
   13430:	bne	134c8 <close_stdout@@Base+0xbb4>
   13434:	ldr	fp, [sp, #64]	; 0x40
   13438:	cmp	fp, #0
   1343c:	beq	13378 <close_stdout@@Base+0xa64>
   13440:	b	131f8 <close_stdout@@Base+0x8e4>
   13444:	ldr	r3, [sp, #64]	; 0x40
   13448:	mov	r0, r6
   1344c:	str	r3, [sp, #8]
   13450:	strb	r4, [sp, #60]	; 0x3c
   13454:	bl	11560 <mbsinit@plt>
   13458:	ldr	r3, [sp, #8]
   1345c:	mov	ip, #1
   13460:	cmp	r0, #0
   13464:	strbne	r5, [sp, #36]	; 0x24
   13468:	b	12f48 <close_stdout@@Base+0x634>
   1346c:	str	r4, [sp, #56]	; 0x38
   13470:	strb	r5, [sp, #60]	; 0x3c
   13474:	ldr	r3, [sp, #64]	; 0x40
   13478:	b	12f48 <close_stdout@@Base+0x634>
   1347c:	ldr	r0, [sp, #52]	; 0x34
   13480:	str	ip, [sp, #4]
   13484:	bl	11704 <strlen@plt>
   13488:	strb	r5, [sp, #60]	; 0x3c
   1348c:	ldr	r3, [sp, #64]	; 0x40
   13490:	ldr	ip, [sp, #4]
   13494:	str	r0, [sp, #56]	; 0x38
   13498:	b	12f48 <close_stdout@@Base+0x634>
   1349c:	mov	fp, #1
   134a0:	b	12fd8 <close_stdout@@Base+0x6c4>
   134a4:	ldr	r0, [pc, #84]	; 13500 <close_stdout@@Base+0xbec>
   134a8:	mov	r2, #150	; 0x96
   134ac:	ldr	r1, [pc, #80]	; 13504 <close_stdout@@Base+0xbf0>
   134b0:	ldr	r3, [pc, #80]	; 13508 <close_stdout@@Base+0xbf4>
   134b4:	add	r0, pc, r0
   134b8:	add	r1, pc, r1
   134bc:	add	r3, pc, r3
   134c0:	bl	11890 <__assert_fail@plt>
   134c4:	bl	11590 <__stack_chk_fail@plt>
   134c8:	ldr	r0, [pc, #60]	; 1350c <close_stdout@@Base+0xbf8>
   134cc:	mov	r2, #178	; 0xb2
   134d0:	ldr	r1, [pc, #56]	; 13510 <close_stdout@@Base+0xbfc>
   134d4:	ldr	r3, [pc, #56]	; 13514 <close_stdout@@Base+0xc00>
   134d8:	add	r0, pc, r0
   134dc:	add	r1, pc, r1
   134e0:	add	r3, pc, r3
   134e4:	bl	11890 <__assert_fail@plt>
   134e8:	andeq	r7, r1, ip, asr #6
   134ec:	andeq	r0, r0, r8, ror #2
   134f0:	andeq	r0, r0, r4, ror #2
   134f4:	andeq	r6, r0, r4, ror #9
   134f8:			; <UNDEFINED> instruction: 0x000064b8
   134fc:	andeq	r6, r0, r8, lsl #9
   13500:	strdeq	r6, [r0], -r8
   13504:	andeq	r6, r0, ip, lsl #4
   13508:	ldrdeq	r6, [r0], -ip
   1350c:	strdeq	r6, [r0], -ip
   13510:	andeq	r6, r0, r8, ror #3
   13514:			; <UNDEFINED> instruction: 0x000061b8
   13518:	push	{r4, r5, r6, lr}
   1351c:	mov	r1, r0
   13520:	mov	r4, r0
   13524:	sub	sp, sp, #8
   13528:	mov	r2, #5
   1352c:	mov	r0, #0
   13530:	bl	11584 <dcgettext@plt>
   13534:	cmp	r0, r4
   13538:	mov	r5, r0
   1353c:	moveq	r0, r0
   13540:	beq	13558 <close_stdout@@Base+0xc44>
   13544:	mov	r1, r4
   13548:	bl	12c94 <close_stdout@@Base+0x380>
   1354c:	cmp	r0, #0
   13550:	mov	r0, r5
   13554:	beq	13560 <close_stdout@@Base+0xc4c>
   13558:	add	sp, sp, #8
   1355c:	pop	{r4, r5, r6, pc}
   13560:	bl	11704 <strlen@plt>
   13564:	mov	r6, r0
   13568:	mov	r0, r4
   1356c:	bl	11704 <strlen@plt>
   13570:	add	r0, r6, r0
   13574:	add	r0, r0, #4
   13578:	bl	15b5c <close_stdout@@Base+0x3248>
   1357c:	ldr	r3, [pc, #36]	; 135a8 <close_stdout@@Base+0xc94>
   13580:	str	r5, [sp]
   13584:	mov	r1, #1
   13588:	str	r4, [sp, #4]
   1358c:	mvn	r2, #0
   13590:	add	r3, pc, r3
   13594:	mov	r6, r0
   13598:	bl	1174c <__sprintf_chk@plt>
   1359c:	mov	r0, r6
   135a0:	add	sp, sp, #8
   135a4:	pop	{r4, r5, r6, pc}
   135a8:	andeq	r6, r0, r0, ror r1
   135ac:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   135b0:	mov	r6, r0
   135b4:	sub	sp, sp, #12
   135b8:	mov	r2, #5
   135bc:	mov	r4, r1
   135c0:	mov	r0, #0
   135c4:	mov	r1, r6
   135c8:	ldr	r7, [pc, #640]	; 13850 <close_stdout@@Base+0xf3c>
   135cc:	bl	11584 <dcgettext@plt>
   135d0:	add	r7, pc, r7
   135d4:	mov	r8, r0
   135d8:	bl	162e8 <close_stdout@@Base+0x39d4>
   135dc:	mov	r1, r7
   135e0:	mov	r9, r0
   135e4:	bl	161f8 <close_stdout@@Base+0x38e4>
   135e8:	cmp	r0, #0
   135ec:	moveq	r5, r0
   135f0:	moveq	r9, r4
   135f4:	bne	13640 <close_stdout@@Base+0xd2c>
   135f8:	cmp	r4, #0
   135fc:	movne	sl, r4
   13600:	movne	r7, #0
   13604:	beq	136f8 <close_stdout@@Base+0xde4>
   13608:	mov	r0, r8
   1360c:	mov	r1, r6
   13610:	bl	114e8 <strcmp@plt>
   13614:	cmp	r0, #0
   13618:	bne	13710 <close_stdout@@Base+0xdfc>
   1361c:	cmp	r5, r4
   13620:	cmpne	r5, #0
   13624:	bne	137a0 <close_stdout@@Base+0xe8c>
   13628:	cmp	r7, r4
   1362c:	cmpne	r7, #0
   13630:	moveq	r0, r4
   13634:	bne	1378c <close_stdout@@Base+0xe78>
   13638:	add	sp, sp, #12
   1363c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13640:	mov	r2, r9
   13644:	mov	r1, r7
   13648:	mov	r0, r4
   1364c:	bl	15e30 <close_stdout@@Base+0x351c>
   13650:	mov	r5, r0
   13654:	mov	r0, r9
   13658:	bl	11704 <strlen@plt>
   1365c:	mov	fp, r0
   13660:	add	r0, r0, #11
   13664:	bl	15b5c <close_stdout@@Base+0x3248>
   13668:	mov	r1, r9
   1366c:	mov	r2, fp
   13670:	mov	sl, r0
   13674:	bl	11548 <memcpy@plt>
   13678:	ldr	r3, [pc, #468]	; 13854 <close_stdout@@Base+0xf40>
   1367c:	add	ip, sl, fp
   13680:	mov	r2, sl
   13684:	add	r3, pc, r3
   13688:	ldm	r3!, {r0, r1}
   1368c:	ldrh	lr, [r3]
   13690:	ldrb	r3, [r3, #2]
   13694:	str	r0, [sl, fp]
   13698:	mov	r0, r4
   1369c:	str	r1, [ip, #4]
   136a0:	mov	r1, r7
   136a4:	strh	lr, [ip, #8]
   136a8:	strb	r3, [ip, #10]
   136ac:	bl	15e30 <close_stdout@@Base+0x351c>
   136b0:	mov	r9, r0
   136b4:	mov	r0, sl
   136b8:	bl	11530 <free@plt>
   136bc:	cmp	r9, #0
   136c0:	beq	13830 <close_stdout@@Base+0xf1c>
   136c4:	mov	r0, r9
   136c8:	mov	r1, #63	; 0x3f
   136cc:	bl	1171c <strchr@plt>
   136d0:	cmp	r0, #0
   136d4:	beq	13818 <close_stdout@@Base+0xf04>
   136d8:	mov	r0, r9
   136dc:	mov	r4, r5
   136e0:	bl	11530 <free@plt>
   136e4:	cmp	r4, #0
   136e8:	mov	r9, #0
   136ec:	movne	sl, r4
   136f0:	movne	r7, #0
   136f4:	bne	13608 <close_stdout@@Base+0xcf4>
   136f8:	cmp	r9, #0
   136fc:	beq	13838 <close_stdout@@Base+0xf24>
   13700:	mov	r7, r4
   13704:	mov	sl, #0
   13708:	mov	r4, r9
   1370c:	b	13608 <close_stdout@@Base+0xcf4>
   13710:	mov	r1, r6
   13714:	mov	r0, r8
   13718:	bl	12c94 <close_stdout@@Base+0x380>
   1371c:	cmp	r0, #0
   13720:	bne	1375c <close_stdout@@Base+0xe48>
   13724:	cmp	sl, #0
   13728:	beq	13740 <close_stdout@@Base+0xe2c>
   1372c:	mov	r1, sl
   13730:	mov	r0, r8
   13734:	bl	12c94 <close_stdout@@Base+0x380>
   13738:	cmp	r0, #0
   1373c:	bne	1375c <close_stdout@@Base+0xe48>
   13740:	cmp	r9, #0
   13744:	beq	137ac <close_stdout@@Base+0xe98>
   13748:	mov	r1, r9
   1374c:	mov	r0, r8
   13750:	bl	12c94 <close_stdout@@Base+0x380>
   13754:	cmp	r0, #0
   13758:	beq	137ac <close_stdout@@Base+0xe98>
   1375c:	cmp	r5, #0
   13760:	beq	1376c <close_stdout@@Base+0xe58>
   13764:	mov	r0, r5
   13768:	bl	11530 <free@plt>
   1376c:	cmp	r7, #0
   13770:	moveq	r0, r8
   13774:	beq	13638 <close_stdout@@Base+0xd24>
   13778:	mov	r0, r7
   1377c:	bl	11530 <free@plt>
   13780:	mov	r0, r8
   13784:	add	sp, sp, #12
   13788:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1378c:	mov	r0, r7
   13790:	bl	11530 <free@plt>
   13794:	mov	r0, r4
   13798:	add	sp, sp, #12
   1379c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137a0:	mov	r0, r5
   137a4:	bl	11530 <free@plt>
   137a8:	b	13628 <close_stdout@@Base+0xd14>
   137ac:	mov	r0, r8
   137b0:	bl	11704 <strlen@plt>
   137b4:	mov	r6, r0
   137b8:	mov	r0, r4
   137bc:	bl	11704 <strlen@plt>
   137c0:	add	r0, r6, r0
   137c4:	add	r0, r0, #4
   137c8:	bl	15b5c <close_stdout@@Base+0x3248>
   137cc:	ldr	r3, [pc, #132]	; 13858 <close_stdout@@Base+0xf44>
   137d0:	str	r8, [sp]
   137d4:	mov	r1, #1
   137d8:	str	r4, [sp, #4]
   137dc:	mvn	r2, #0
   137e0:	add	r3, pc, r3
   137e4:	mov	r6, r0
   137e8:	bl	1174c <__sprintf_chk@plt>
   137ec:	cmp	r5, #0
   137f0:	beq	137fc <close_stdout@@Base+0xee8>
   137f4:	mov	r0, r5
   137f8:	bl	11530 <free@plt>
   137fc:	cmp	r7, #0
   13800:	moveq	r0, r6
   13804:	beq	13638 <close_stdout@@Base+0xd24>
   13808:	mov	r0, r7
   1380c:	bl	11530 <free@plt>
   13810:	mov	r0, r6
   13814:	b	13638 <close_stdout@@Base+0xd24>
   13818:	cmp	r5, #0
   1381c:	beq	13848 <close_stdout@@Base+0xf34>
   13820:	mov	sl, r5
   13824:	mov	r7, r9
   13828:	mov	r4, r5
   1382c:	b	13608 <close_stdout@@Base+0xcf4>
   13830:	mov	r4, r5
   13834:	b	135f8 <close_stdout@@Base+0xce4>
   13838:	mov	sl, r9
   1383c:	mov	r7, r9
   13840:	mov	r4, r6
   13844:	b	13608 <close_stdout@@Base+0xcf4>
   13848:	mov	r4, r9
   1384c:	b	13700 <close_stdout@@Base+0xdec>
   13850:	andeq	r6, r0, r8, lsr r1
   13854:	andeq	r6, r0, ip, lsl #1
   13858:	andeq	r5, r0, r0, lsr #30
   1385c:	push	{r3, lr}
   13860:	mov	r3, r0
   13864:	mov	r2, #0
   13868:	cmp	r1, #8
   1386c:	str	r2, [r3], #4
   13870:	add	r3, r3, #4
   13874:	str	r2, [r0, #4]
   13878:	str	r2, [r3], #4
   1387c:	str	r2, [r3], #4
   13880:	str	r2, [r3], #4
   13884:	str	r2, [r3], #4
   13888:	str	r2, [r3], #4
   1388c:	str	r2, [r3], #4
   13890:	str	r2, [r3], #4
   13894:	str	r2, [r3], #4
   13898:	str	r2, [r3], #4
   1389c:	str	r2, [r3]
   138a0:	beq	138ac <close_stdout@@Base+0xf98>
   138a4:	str	r1, [r0]
   138a8:	pop	{r3, pc}
   138ac:	bl	11878 <abort@plt>
   138b0:	push	{r4, r5, r6, lr}
   138b4:	mov	r4, r0
   138b8:	mov	r6, r1
   138bc:	mov	r0, #0
   138c0:	mov	r1, r4
   138c4:	mov	r2, #5
   138c8:	bl	11584 <dcgettext@plt>
   138cc:	cmp	r0, r4
   138d0:	mov	r5, r0
   138d4:	beq	138dc <close_stdout@@Base+0xfc8>
   138d8:	pop	{r4, r5, r6, pc}
   138dc:	bl	162e8 <close_stdout@@Base+0x39d4>
   138e0:	ldrb	r3, [r0]
   138e4:	bic	r3, r3, #32
   138e8:	cmp	r3, #85	; 0x55
   138ec:	bne	13960 <close_stdout@@Base+0x104c>
   138f0:	ldrb	r3, [r0, #1]
   138f4:	bic	r3, r3, #32
   138f8:	cmp	r3, #84	; 0x54
   138fc:	bne	1394c <close_stdout@@Base+0x1038>
   13900:	ldrb	r3, [r0, #2]
   13904:	bic	r3, r3, #32
   13908:	cmp	r3, #70	; 0x46
   1390c:	bne	1394c <close_stdout@@Base+0x1038>
   13910:	ldrb	r3, [r0, #3]
   13914:	cmp	r3, #45	; 0x2d
   13918:	bne	1394c <close_stdout@@Base+0x1038>
   1391c:	ldrb	r3, [r0, #4]
   13920:	cmp	r3, #56	; 0x38
   13924:	bne	1394c <close_stdout@@Base+0x1038>
   13928:	ldrb	r3, [r0, #5]
   1392c:	cmp	r3, #0
   13930:	bne	1394c <close_stdout@@Base+0x1038>
   13934:	ldrb	r3, [r5]
   13938:	cmp	r3, #96	; 0x60
   1393c:	beq	139d8 <close_stdout@@Base+0x10c4>
   13940:	ldr	r0, [pc, #180]	; 139fc <close_stdout@@Base+0x10e8>
   13944:	add	r0, pc, r0
   13948:	pop	{r4, r5, r6, pc}
   1394c:	cmp	r6, #7
   13950:	beq	139e4 <close_stdout@@Base+0x10d0>
   13954:	ldr	r0, [pc, #164]	; 13a00 <close_stdout@@Base+0x10ec>
   13958:	add	r0, pc, r0
   1395c:	pop	{r4, r5, r6, pc}
   13960:	cmp	r3, #71	; 0x47
   13964:	bne	1394c <close_stdout@@Base+0x1038>
   13968:	ldrb	r3, [r0, #1]
   1396c:	bic	r3, r3, #32
   13970:	cmp	r3, #66	; 0x42
   13974:	bne	1394c <close_stdout@@Base+0x1038>
   13978:	ldrb	r3, [r0, #2]
   1397c:	cmp	r3, #49	; 0x31
   13980:	bne	1394c <close_stdout@@Base+0x1038>
   13984:	ldrb	r3, [r0, #3]
   13988:	cmp	r3, #56	; 0x38
   1398c:	bne	1394c <close_stdout@@Base+0x1038>
   13990:	ldrb	r3, [r0, #4]
   13994:	cmp	r3, #48	; 0x30
   13998:	bne	1394c <close_stdout@@Base+0x1038>
   1399c:	ldrb	r3, [r0, #5]
   139a0:	cmp	r3, #51	; 0x33
   139a4:	bne	1394c <close_stdout@@Base+0x1038>
   139a8:	ldrb	r3, [r0, #6]
   139ac:	cmp	r3, #48	; 0x30
   139b0:	bne	1394c <close_stdout@@Base+0x1038>
   139b4:	ldrb	r3, [r0, #7]
   139b8:	cmp	r3, #0
   139bc:	bne	1394c <close_stdout@@Base+0x1038>
   139c0:	ldrb	r3, [r5]
   139c4:	cmp	r3, #96	; 0x60
   139c8:	beq	139f0 <close_stdout@@Base+0x10dc>
   139cc:	ldr	r0, [pc, #48]	; 13a04 <close_stdout@@Base+0x10f0>
   139d0:	add	r0, pc, r0
   139d4:	pop	{r4, r5, r6, pc}
   139d8:	ldr	r0, [pc, #40]	; 13a08 <close_stdout@@Base+0x10f4>
   139dc:	add	r0, pc, r0
   139e0:	pop	{r4, r5, r6, pc}
   139e4:	ldr	r0, [pc, #32]	; 13a0c <close_stdout@@Base+0x10f8>
   139e8:	add	r0, pc, r0
   139ec:	pop	{r4, r5, r6, pc}
   139f0:	ldr	r0, [pc, #24]	; 13a10 <close_stdout@@Base+0x10fc>
   139f4:	add	r0, pc, r0
   139f8:	pop	{r4, r5, r6, pc}
   139fc:	strdeq	r5, [r0], -r8
   13a00:	andeq	r5, r0, ip, ror #27
   13a04:	andeq	r5, r0, r0, ror sp
   13a08:	andeq	r5, r0, r4, ror sp
   13a0c:	andeq	r5, r0, r0, ror #26
   13a10:	andeq	r5, r0, r8, asr sp
   13a14:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a18:	sub	sp, sp, #124	; 0x7c
   13a1c:	ldr	ip, [pc, #3304]	; 1470c <close_stdout@@Base+0x1df8>
   13a20:	mov	sl, r1
   13a24:	str	r0, [sp, #40]	; 0x28
   13a28:	mov	r8, r3
   13a2c:	ldr	r0, [pc, #3292]	; 14710 <close_stdout@@Base+0x1dfc>
   13a30:	add	ip, pc, ip
   13a34:	str	r2, [sp, #32]
   13a38:	ldr	r1, [sp, #164]	; 0xa4
   13a3c:	mov	r3, ip
   13a40:	ldr	r0, [ip, r0]
   13a44:	ldr	r2, [sp, #172]	; 0xac
   13a48:	ubfx	r1, r1, #1, #1
   13a4c:	str	r1, [sp, #36]	; 0x24
   13a50:	str	r0, [sp, #56]	; 0x38
   13a54:	ldr	r0, [sp, #168]	; 0xa8
   13a58:	ldr	r1, [sp, #176]	; 0xb0
   13a5c:	str	r2, [sp, #72]	; 0x48
   13a60:	str	r0, [sp, #48]	; 0x30
   13a64:	ldr	r0, [sp, #56]	; 0x38
   13a68:	str	r1, [sp, #68]	; 0x44
   13a6c:	ldr	r3, [r0]
   13a70:	str	r3, [sp, #116]	; 0x74
   13a74:	bl	11620 <__ctype_get_mb_cur_max@plt>
   13a78:	ldr	r2, [sp, #160]	; 0xa0
   13a7c:	str	r0, [sp, #64]	; 0x40
   13a80:	cmp	r2, #8
   13a84:	addls	pc, pc, r2, lsl #2
   13a88:	b	145e8 <close_stdout@@Base+0x1cd4>
   13a8c:	b	13ab0 <close_stdout@@Base+0x119c>
   13a90:	b	14300 <close_stdout@@Base+0x19ec>
   13a94:	b	14330 <close_stdout@@Base+0x1a1c>
   13a98:	b	141e0 <close_stdout@@Base+0x18cc>
   13a9c:	b	14220 <close_stdout@@Base+0x190c>
   13aa0:	b	1424c <close_stdout@@Base+0x1938>
   13aa4:	b	1426c <close_stdout@@Base+0x1958>
   13aa8:	b	1426c <close_stdout@@Base+0x1958>
   13aac:	b	1426c <close_stdout@@Base+0x1958>
   13ab0:	mov	r2, #0
   13ab4:	str	r2, [sp, #36]	; 0x24
   13ab8:	mov	r9, r2
   13abc:	str	r2, [sp, #24]
   13ac0:	str	r2, [sp, #28]
   13ac4:	str	r2, [sp, #52]	; 0x34
   13ac8:	ldr	r0, [sp, #36]	; 0x24
   13acc:	mov	fp, #0
   13ad0:	ldr	r1, [sp, #24]
   13ad4:	eor	r2, r0, #1
   13ad8:	eor	r3, r1, #1
   13adc:	and	r3, r2, r3
   13ae0:	and	r2, r1, r0
   13ae4:	str	r3, [sp, #44]	; 0x2c
   13ae8:	str	r2, [sp, #76]	; 0x4c
   13aec:	cmn	r8, #1
   13af0:	beq	13e70 <close_stdout@@Base+0x155c>
   13af4:	subs	r3, fp, r8
   13af8:	movne	r3, #1
   13afc:	cmp	r3, #0
   13b00:	beq	13e88 <close_stdout@@Base+0x1574>
   13b04:	ldr	r3, [sp, #28]
   13b08:	ldr	r0, [sp, #24]
   13b0c:	adds	r7, r3, #0
   13b10:	movne	r7, #1
   13b14:	ands	r6, r7, r0
   13b18:	bne	14374 <close_stdout@@Base+0x1a60>
   13b1c:	ldr	r1, [sp, #32]
   13b20:	add	r5, r1, fp
   13b24:	ldrb	r4, [r5]
   13b28:	cmp	r4, #126	; 0x7e
   13b2c:	addls	pc, pc, r4, lsl #2
   13b30:	b	140f4 <close_stdout@@Base+0x17e0>
   13b34:	b	14000 <close_stdout@@Base+0x16ec>
   13b38:	b	140f4 <close_stdout@@Base+0x17e0>
   13b3c:	b	140f4 <close_stdout@@Base+0x17e0>
   13b40:	b	140f4 <close_stdout@@Base+0x17e0>
   13b44:	b	140f4 <close_stdout@@Base+0x17e0>
   13b48:	b	140f4 <close_stdout@@Base+0x17e0>
   13b4c:	b	140f4 <close_stdout@@Base+0x17e0>
   13b50:	b	13fe8 <close_stdout@@Base+0x16d4>
   13b54:	b	13fd0 <close_stdout@@Base+0x16bc>
   13b58:	b	13ff8 <close_stdout@@Base+0x16e4>
   13b5c:	b	13ff0 <close_stdout@@Base+0x16dc>
   13b60:	b	13fe0 <close_stdout@@Base+0x16cc>
   13b64:	b	13fd8 <close_stdout@@Base+0x16c4>
   13b68:	b	13f9c <close_stdout@@Base+0x1688>
   13b6c:	b	140f4 <close_stdout@@Base+0x17e0>
   13b70:	b	140f4 <close_stdout@@Base+0x17e0>
   13b74:	b	140f4 <close_stdout@@Base+0x17e0>
   13b78:	b	140f4 <close_stdout@@Base+0x17e0>
   13b7c:	b	140f4 <close_stdout@@Base+0x17e0>
   13b80:	b	140f4 <close_stdout@@Base+0x17e0>
   13b84:	b	140f4 <close_stdout@@Base+0x17e0>
   13b88:	b	140f4 <close_stdout@@Base+0x17e0>
   13b8c:	b	140f4 <close_stdout@@Base+0x17e0>
   13b90:	b	140f4 <close_stdout@@Base+0x17e0>
   13b94:	b	140f4 <close_stdout@@Base+0x17e0>
   13b98:	b	140f4 <close_stdout@@Base+0x17e0>
   13b9c:	b	140f4 <close_stdout@@Base+0x17e0>
   13ba0:	b	140f4 <close_stdout@@Base+0x17e0>
   13ba4:	b	140f4 <close_stdout@@Base+0x17e0>
   13ba8:	b	140f4 <close_stdout@@Base+0x17e0>
   13bac:	b	140f4 <close_stdout@@Base+0x17e0>
   13bb0:	b	140f4 <close_stdout@@Base+0x17e0>
   13bb4:	b	13f28 <close_stdout@@Base+0x1614>
   13bb8:	b	13f28 <close_stdout@@Base+0x1614>
   13bbc:	b	13f28 <close_stdout@@Base+0x1614>
   13bc0:	b	13f20 <close_stdout@@Base+0x160c>
   13bc4:	b	13f28 <close_stdout@@Base+0x1614>
   13bc8:	b	13dfc <close_stdout@@Base+0x14e8>
   13bcc:	b	13f28 <close_stdout@@Base+0x1614>
   13bd0:	b	1409c <close_stdout@@Base+0x1788>
   13bd4:	b	13f28 <close_stdout@@Base+0x1614>
   13bd8:	b	13f28 <close_stdout@@Base+0x1614>
   13bdc:	b	13f28 <close_stdout@@Base+0x1614>
   13be0:	b	13dfc <close_stdout@@Base+0x14e8>
   13be4:	b	13dfc <close_stdout@@Base+0x14e8>
   13be8:	b	13dfc <close_stdout@@Base+0x14e8>
   13bec:	b	13dfc <close_stdout@@Base+0x14e8>
   13bf0:	b	13dfc <close_stdout@@Base+0x14e8>
   13bf4:	b	13dfc <close_stdout@@Base+0x14e8>
   13bf8:	b	13dfc <close_stdout@@Base+0x14e8>
   13bfc:	b	13dfc <close_stdout@@Base+0x14e8>
   13c00:	b	13dfc <close_stdout@@Base+0x14e8>
   13c04:	b	13dfc <close_stdout@@Base+0x14e8>
   13c08:	b	13dfc <close_stdout@@Base+0x14e8>
   13c0c:	b	13dfc <close_stdout@@Base+0x14e8>
   13c10:	b	13dfc <close_stdout@@Base+0x14e8>
   13c14:	b	13dfc <close_stdout@@Base+0x14e8>
   13c18:	b	13dfc <close_stdout@@Base+0x14e8>
   13c1c:	b	13dfc <close_stdout@@Base+0x14e8>
   13c20:	b	13f28 <close_stdout@@Base+0x1614>
   13c24:	b	13f28 <close_stdout@@Base+0x1614>
   13c28:	b	13f28 <close_stdout@@Base+0x1614>
   13c2c:	b	13f28 <close_stdout@@Base+0x1614>
   13c30:	b	13d30 <close_stdout@@Base+0x141c>
   13c34:	b	140f4 <close_stdout@@Base+0x17e0>
   13c38:	b	13dfc <close_stdout@@Base+0x14e8>
   13c3c:	b	13dfc <close_stdout@@Base+0x14e8>
   13c40:	b	13dfc <close_stdout@@Base+0x14e8>
   13c44:	b	13dfc <close_stdout@@Base+0x14e8>
   13c48:	b	13dfc <close_stdout@@Base+0x14e8>
   13c4c:	b	13dfc <close_stdout@@Base+0x14e8>
   13c50:	b	13dfc <close_stdout@@Base+0x14e8>
   13c54:	b	13dfc <close_stdout@@Base+0x14e8>
   13c58:	b	13dfc <close_stdout@@Base+0x14e8>
   13c5c:	b	13dfc <close_stdout@@Base+0x14e8>
   13c60:	b	13dfc <close_stdout@@Base+0x14e8>
   13c64:	b	13dfc <close_stdout@@Base+0x14e8>
   13c68:	b	13dfc <close_stdout@@Base+0x14e8>
   13c6c:	b	13dfc <close_stdout@@Base+0x14e8>
   13c70:	b	13dfc <close_stdout@@Base+0x14e8>
   13c74:	b	13dfc <close_stdout@@Base+0x14e8>
   13c78:	b	13dfc <close_stdout@@Base+0x14e8>
   13c7c:	b	13dfc <close_stdout@@Base+0x14e8>
   13c80:	b	13dfc <close_stdout@@Base+0x14e8>
   13c84:	b	13dfc <close_stdout@@Base+0x14e8>
   13c88:	b	13dfc <close_stdout@@Base+0x14e8>
   13c8c:	b	13dfc <close_stdout@@Base+0x14e8>
   13c90:	b	13dfc <close_stdout@@Base+0x14e8>
   13c94:	b	13dfc <close_stdout@@Base+0x14e8>
   13c98:	b	13dfc <close_stdout@@Base+0x14e8>
   13c9c:	b	13dfc <close_stdout@@Base+0x14e8>
   13ca0:	b	13f28 <close_stdout@@Base+0x1614>
   13ca4:	b	14080 <close_stdout@@Base+0x176c>
   13ca8:	b	13dfc <close_stdout@@Base+0x14e8>
   13cac:	b	13f28 <close_stdout@@Base+0x1614>
   13cb0:	b	13dfc <close_stdout@@Base+0x14e8>
   13cb4:	b	13f28 <close_stdout@@Base+0x1614>
   13cb8:	b	13dfc <close_stdout@@Base+0x14e8>
   13cbc:	b	13dfc <close_stdout@@Base+0x14e8>
   13cc0:	b	13dfc <close_stdout@@Base+0x14e8>
   13cc4:	b	13dfc <close_stdout@@Base+0x14e8>
   13cc8:	b	13dfc <close_stdout@@Base+0x14e8>
   13ccc:	b	13dfc <close_stdout@@Base+0x14e8>
   13cd0:	b	13dfc <close_stdout@@Base+0x14e8>
   13cd4:	b	13dfc <close_stdout@@Base+0x14e8>
   13cd8:	b	13dfc <close_stdout@@Base+0x14e8>
   13cdc:	b	13dfc <close_stdout@@Base+0x14e8>
   13ce0:	b	13dfc <close_stdout@@Base+0x14e8>
   13ce4:	b	13dfc <close_stdout@@Base+0x14e8>
   13ce8:	b	13dfc <close_stdout@@Base+0x14e8>
   13cec:	b	13dfc <close_stdout@@Base+0x14e8>
   13cf0:	b	13dfc <close_stdout@@Base+0x14e8>
   13cf4:	b	13dfc <close_stdout@@Base+0x14e8>
   13cf8:	b	13dfc <close_stdout@@Base+0x14e8>
   13cfc:	b	13dfc <close_stdout@@Base+0x14e8>
   13d00:	b	13dfc <close_stdout@@Base+0x14e8>
   13d04:	b	13dfc <close_stdout@@Base+0x14e8>
   13d08:	b	13dfc <close_stdout@@Base+0x14e8>
   13d0c:	b	13dfc <close_stdout@@Base+0x14e8>
   13d10:	b	13dfc <close_stdout@@Base+0x14e8>
   13d14:	b	13dfc <close_stdout@@Base+0x14e8>
   13d18:	b	13dfc <close_stdout@@Base+0x14e8>
   13d1c:	b	13dfc <close_stdout@@Base+0x14e8>
   13d20:	b	13f08 <close_stdout@@Base+0x15f4>
   13d24:	b	13f28 <close_stdout@@Base+0x1614>
   13d28:	b	13f08 <close_stdout@@Base+0x15f4>
   13d2c:	b	13f20 <close_stdout@@Base+0x160c>
   13d30:	ldr	r3, [sp, #160]	; 0xa0
   13d34:	cmp	r3, #2
   13d38:	beq	145c4 <close_stdout@@Base+0x1cb0>
   13d3c:	cmp	r3, #3
   13d40:	bne	13dfc <close_stdout@@Base+0x14e8>
   13d44:	ldr	r1, [sp, #164]	; 0xa4
   13d48:	tst	r1, #4
   13d4c:	beq	13dfc <close_stdout@@Base+0x14e8>
   13d50:	add	r3, fp, #2
   13d54:	cmp	r8, r3
   13d58:	bls	13dfc <close_stdout@@Base+0x14e8>
   13d5c:	ldrb	r2, [r5, #1]
   13d60:	mov	r1, #1
   13d64:	cmp	r2, #63	; 0x3f
   13d68:	bne	13dfc <close_stdout@@Base+0x14e8>
   13d6c:	ldr	r0, [sp, #32]
   13d70:	ldrb	ip, [r0, r3]
   13d74:	sub	r0, ip, #33	; 0x21
   13d78:	uxtb	r0, r0
   13d7c:	cmp	r0, #29
   13d80:	bhi	13dfc <close_stdout@@Base+0x14e8>
   13d84:	lsl	r1, r1, r0
   13d88:	movw	r0, #20929	; 0x51c1
   13d8c:	movt	r0, #14336	; 0x3800
   13d90:	and	r0, r1, r0
   13d94:	cmp	r0, #0
   13d98:	beq	13dfc <close_stdout@@Base+0x14e8>
   13d9c:	ldr	r1, [sp, #36]	; 0x24
   13da0:	cmp	r1, #0
   13da4:	bne	13f44 <close_stdout@@Base+0x1630>
   13da8:	cmp	r9, sl
   13dac:	mov	r4, ip
   13db0:	mov	fp, r3
   13db4:	ldrcc	r0, [sp, #40]	; 0x28
   13db8:	strbcc	r2, [r0, r9]
   13dbc:	add	r2, r9, #1
   13dc0:	cmp	sl, r2
   13dc4:	ldrhi	r0, [sp, #40]	; 0x28
   13dc8:	movhi	r1, #34	; 0x22
   13dcc:	strbhi	r1, [r0, r2]
   13dd0:	add	r2, r9, #2
   13dd4:	cmp	sl, r2
   13dd8:	ldrhi	r0, [sp, #40]	; 0x28
   13ddc:	movhi	r1, #34	; 0x22
   13de0:	strbhi	r1, [r0, r2]
   13de4:	add	r2, r9, #3
   13de8:	cmp	sl, r2
   13dec:	add	r9, r9, #4
   13df0:	ldrhi	r0, [sp, #40]	; 0x28
   13df4:	movhi	r1, #63	; 0x3f
   13df8:	strbhi	r1, [r0, r2]
   13dfc:	ldr	r0, [sp, #44]	; 0x2c
   13e00:	cmp	r0, #0
   13e04:	bne	13e2c <close_stdout@@Base+0x1518>
   13e08:	ldr	r1, [sp, #48]	; 0x30
   13e0c:	cmp	r1, #0
   13e10:	beq	13e2c <close_stdout@@Base+0x1518>
   13e14:	ubfx	r2, r4, #5, #8
   13e18:	and	r3, r4, #31
   13e1c:	ldr	r2, [r1, r2, lsl #2]
   13e20:	lsr	r3, r2, r3
   13e24:	tst	r3, #1
   13e28:	bne	13e34 <close_stdout@@Base+0x1520>
   13e2c:	cmp	r6, #0
   13e30:	beq	13e54 <close_stdout@@Base+0x1540>
   13e34:	ldr	r2, [sp, #36]	; 0x24
   13e38:	cmp	r2, #0
   13e3c:	bne	13f44 <close_stdout@@Base+0x1630>
   13e40:	cmp	r9, sl
   13e44:	ldrcc	r0, [sp, #40]	; 0x28
   13e48:	movcc	r3, #92	; 0x5c
   13e4c:	strbcc	r3, [r0, r9]
   13e50:	add	r9, r9, #1
   13e54:	add	fp, fp, #1
   13e58:	cmp	r9, sl
   13e5c:	ldrcc	r1, [sp, #40]	; 0x28
   13e60:	strbcc	r4, [r1, r9]
   13e64:	cmn	r8, #1
   13e68:	add	r9, r9, #1
   13e6c:	bne	13af4 <close_stdout@@Base+0x11e0>
   13e70:	ldr	r2, [sp, #32]
   13e74:	ldrb	r3, [r2, fp]
   13e78:	adds	r3, r3, #0
   13e7c:	movne	r3, #1
   13e80:	cmp	r3, #0
   13e84:	bne	13b04 <close_stdout@@Base+0x11f0>
   13e88:	ldr	r3, [sp, #160]	; 0xa0
   13e8c:	cmp	r9, #0
   13e90:	cmpeq	r3, #2
   13e94:	bne	13ea4 <close_stdout@@Base+0x1590>
   13e98:	ldr	r0, [sp, #36]	; 0x24
   13e9c:	cmp	r0, #0
   13ea0:	bne	13f44 <close_stdout@@Base+0x1630>
   13ea4:	ldr	r1, [sp, #36]	; 0x24
   13ea8:	ldr	r2, [sp, #52]	; 0x34
   13eac:	eor	r3, r1, #1
   13eb0:	cmp	r2, #0
   13eb4:	moveq	r3, #0
   13eb8:	andne	r3, r3, #1
   13ebc:	cmp	r3, #0
   13ec0:	beq	13eec <close_stdout@@Base+0x15d8>
   13ec4:	ldrb	r3, [r2]
   13ec8:	cmp	r3, #0
   13ecc:	beq	13eec <close_stdout@@Base+0x15d8>
   13ed0:	ldr	r1, [sp, #40]	; 0x28
   13ed4:	cmp	sl, r9
   13ed8:	strbhi	r3, [r1, r9]
   13edc:	ldrb	r3, [r2, #1]!
   13ee0:	add	r9, r9, #1
   13ee4:	cmp	r3, #0
   13ee8:	bne	13ed4 <close_stdout@@Base+0x15c0>
   13eec:	cmp	r9, sl
   13ef0:	movcs	r0, r9
   13ef4:	ldrcc	r1, [sp, #40]	; 0x28
   13ef8:	movcc	r3, #0
   13efc:	movcc	r0, r9
   13f00:	strbcc	r3, [r1, r9]
   13f04:	b	13f80 <close_stdout@@Base+0x166c>
   13f08:	cmn	r8, #1
   13f0c:	beq	145d4 <close_stdout@@Base+0x1cc0>
   13f10:	subs	r3, r8, #1
   13f14:	movne	r3, #1
   13f18:	cmp	r3, #0
   13f1c:	bne	13dfc <close_stdout@@Base+0x14e8>
   13f20:	cmp	fp, #0
   13f24:	bne	13dfc <close_stdout@@Base+0x14e8>
   13f28:	ldr	r3, [sp, #36]	; 0x24
   13f2c:	ldr	r0, [sp, #160]	; 0xa0
   13f30:	cmp	r0, #2
   13f34:	movne	r3, #0
   13f38:	andeq	r3, r3, #1
   13f3c:	cmp	r3, #0
   13f40:	beq	13dfc <close_stdout@@Base+0x14e8>
   13f44:	ldr	r2, [sp, #164]	; 0xa4
   13f48:	mov	ip, #0
   13f4c:	ldr	r0, [sp, #160]	; 0xa0
   13f50:	bic	r3, r2, #2
   13f54:	ldr	r1, [sp, #72]	; 0x48
   13f58:	ldr	r2, [sp, #68]	; 0x44
   13f5c:	stm	sp, {r0, r3}
   13f60:	mov	r3, r8
   13f64:	str	r1, [sp, #12]
   13f68:	mov	r1, sl
   13f6c:	str	r2, [sp, #16]
   13f70:	ldr	r0, [sp, #40]	; 0x28
   13f74:	ldr	r2, [sp, #32]
   13f78:	str	ip, [sp, #8]
   13f7c:	bl	13a14 <close_stdout@@Base+0x1100>
   13f80:	ldr	r1, [sp, #56]	; 0x38
   13f84:	ldr	r2, [sp, #116]	; 0x74
   13f88:	ldr	r3, [r1]
   13f8c:	cmp	r2, r3
   13f90:	bne	146c4 <close_stdout@@Base+0x1db0>
   13f94:	add	sp, sp, #124	; 0x7c
   13f98:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f9c:	mov	r3, #114	; 0x72
   13fa0:	ldr	r2, [sp, #36]	; 0x24
   13fa4:	ldr	r0, [sp, #160]	; 0xa0
   13fa8:	cmp	r0, #2
   13fac:	movne	r2, #0
   13fb0:	andeq	r2, r2, #1
   13fb4:	cmp	r2, #0
   13fb8:	bne	13f44 <close_stdout@@Base+0x1630>
   13fbc:	ldr	r1, [sp, #24]
   13fc0:	cmp	r1, #0
   13fc4:	beq	13dfc <close_stdout@@Base+0x14e8>
   13fc8:	mov	r4, r3
   13fcc:	b	13e34 <close_stdout@@Base+0x1520>
   13fd0:	mov	r3, #98	; 0x62
   13fd4:	b	13fbc <close_stdout@@Base+0x16a8>
   13fd8:	mov	r3, #102	; 0x66
   13fdc:	b	13fbc <close_stdout@@Base+0x16a8>
   13fe0:	mov	r3, #118	; 0x76
   13fe4:	b	13fbc <close_stdout@@Base+0x16a8>
   13fe8:	mov	r3, #97	; 0x61
   13fec:	b	13fbc <close_stdout@@Base+0x16a8>
   13ff0:	mov	r3, #110	; 0x6e
   13ff4:	b	13fa0 <close_stdout@@Base+0x168c>
   13ff8:	mov	r3, #116	; 0x74
   13ffc:	b	13fa0 <close_stdout@@Base+0x168c>
   14000:	ldr	r2, [sp, #24]
   14004:	cmp	r2, #0
   14008:	beq	145b0 <close_stdout@@Base+0x1c9c>
   1400c:	ldr	r3, [sp, #36]	; 0x24
   14010:	cmp	r3, #0
   14014:	bne	13f44 <close_stdout@@Base+0x1630>
   14018:	cmp	r9, sl
   1401c:	add	r2, r9, #1
   14020:	ldrcc	r0, [sp, #40]	; 0x28
   14024:	movcc	r3, #92	; 0x5c
   14028:	strbcc	r3, [r0, r9]
   1402c:	add	r3, fp, #1
   14030:	cmp	r8, r3
   14034:	bls	14074 <close_stdout@@Base+0x1760>
   14038:	ldr	r1, [sp, #32]
   1403c:	ldrb	r3, [r1, r3]
   14040:	sub	r3, r3, #48	; 0x30
   14044:	cmp	r3, #9
   14048:	bhi	14074 <close_stdout@@Base+0x1760>
   1404c:	cmp	sl, r2
   14050:	ldrhi	r0, [sp, #40]	; 0x28
   14054:	movhi	r3, #48	; 0x30
   14058:	strbhi	r3, [r0, r2]
   1405c:	add	r3, r9, #2
   14060:	cmp	sl, r3
   14064:	ldrhi	r1, [sp, #40]	; 0x28
   14068:	movhi	r2, #48	; 0x30
   1406c:	strbhi	r2, [r1, r3]
   14070:	add	r2, r9, #3
   14074:	mov	r9, r2
   14078:	mov	r4, #48	; 0x30
   1407c:	b	13e08 <close_stdout@@Base+0x14f4>
   14080:	ldr	r1, [sp, #76]	; 0x4c
   14084:	cmp	r1, #0
   14088:	beq	14094 <close_stdout@@Base+0x1780>
   1408c:	cmp	r7, #0
   14090:	bne	13e54 <close_stdout@@Base+0x1540>
   14094:	mov	r3, r4
   14098:	b	13fa0 <close_stdout@@Base+0x168c>
   1409c:	ldr	r1, [sp, #160]	; 0xa0
   140a0:	cmp	r1, #2
   140a4:	bne	13dfc <close_stdout@@Base+0x14e8>
   140a8:	ldr	r2, [sp, #36]	; 0x24
   140ac:	cmp	r2, #0
   140b0:	bne	13f44 <close_stdout@@Base+0x1630>
   140b4:	cmp	r9, sl
   140b8:	ldrcc	r0, [sp, #40]	; 0x28
   140bc:	movcc	r3, #39	; 0x27
   140c0:	strbcc	r3, [r0, r9]
   140c4:	add	r3, r9, #1
   140c8:	cmp	sl, r3
   140cc:	ldrhi	r1, [sp, #40]	; 0x28
   140d0:	movhi	r2, #92	; 0x5c
   140d4:	strbhi	r2, [r1, r3]
   140d8:	add	r3, r9, #2
   140dc:	cmp	sl, r3
   140e0:	add	r9, r9, #3
   140e4:	ldrhi	r0, [sp, #40]	; 0x28
   140e8:	movhi	r2, #39	; 0x27
   140ec:	strbhi	r2, [r0, r3]
   140f0:	b	13dfc <close_stdout@@Base+0x14e8>
   140f4:	ldr	r1, [sp, #64]	; 0x40
   140f8:	cmp	r1, #1
   140fc:	bne	143f4 <close_stdout@@Base+0x1ae0>
   14100:	bl	116e0 <__ctype_b_loc@plt>
   14104:	ldr	r2, [sp, #64]	; 0x40
   14108:	sxth	r3, r4
   1410c:	str	r2, [sp, #60]	; 0x3c
   14110:	lsl	r3, r3, #1
   14114:	ldr	r2, [r0]
   14118:	ldrh	r2, [r2, r3]
   1411c:	eor	r2, r2, #16384	; 0x4000
   14120:	ubfx	r2, r2, #14, #1
   14124:	ldr	r1, [sp, #24]
   14128:	ands	r2, r2, r1
   1412c:	beq	13dfc <close_stdout@@Base+0x14e8>
   14130:	ldr	r3, [sp, #60]	; 0x3c
   14134:	mov	r0, #92	; 0x5c
   14138:	ldr	r7, [sp, #36]	; 0x24
   1413c:	add	r1, r3, fp
   14140:	str	r8, [sp, #60]	; 0x3c
   14144:	ldr	r3, [sp, #40]	; 0x28
   14148:	b	141ac <close_stdout@@Base+0x1898>
   1414c:	cmp	r7, #0
   14150:	bne	145ec <close_stdout@@Base+0x1cd8>
   14154:	add	ip, r9, #1
   14158:	cmp	r9, sl
   1415c:	strbcc	r0, [r3, r9]
   14160:	cmp	sl, ip
   14164:	lsrhi	r8, r4, #6
   14168:	addhi	r8, r8, #48	; 0x30
   1416c:	strbhi	r8, [r3, ip]
   14170:	add	ip, r9, #2
   14174:	add	r9, r9, #3
   14178:	cmp	sl, ip
   1417c:	ubfxhi	r8, r4, #3, #3
   14180:	and	r4, r4, #7
   14184:	add	r4, r4, #48	; 0x30
   14188:	addhi	r8, r8, #48	; 0x30
   1418c:	strbhi	r8, [r3, ip]
   14190:	add	fp, fp, #1
   14194:	cmp	r1, fp
   14198:	bls	141d8 <close_stdout@@Base+0x18c4>
   1419c:	cmp	r9, sl
   141a0:	strbcc	r4, [r3, r9]
   141a4:	ldrb	r4, [r5, #1]!
   141a8:	add	r9, r9, #1
   141ac:	cmp	r2, #0
   141b0:	bne	1414c <close_stdout@@Base+0x1838>
   141b4:	cmp	r6, #0
   141b8:	beq	14190 <close_stdout@@Base+0x187c>
   141bc:	add	fp, fp, #1
   141c0:	cmp	r9, sl
   141c4:	strbcc	r0, [r3, r9]
   141c8:	cmp	r1, fp
   141cc:	add	r9, r9, #1
   141d0:	mov	r6, #0
   141d4:	bhi	1419c <close_stdout@@Base+0x1888>
   141d8:	ldr	r8, [sp, #60]	; 0x3c
   141dc:	b	13e58 <close_stdout@@Base+0x1544>
   141e0:	ldr	r3, [sp, #36]	; 0x24
   141e4:	cmp	r3, #0
   141e8:	bne	146ec <close_stdout@@Base+0x1dd8>
   141ec:	cmp	sl, #0
   141f0:	beq	14604 <close_stdout@@Base+0x1cf0>
   141f4:	ldr	r1, [sp, #40]	; 0x28
   141f8:	mov	r0, #1
   141fc:	ldr	r2, [pc, #1296]	; 14714 <close_stdout@@Base+0x1e00>
   14200:	mov	r3, #34	; 0x22
   14204:	str	r0, [sp, #24]
   14208:	mov	r9, r0
   1420c:	add	r2, pc, r2
   14210:	str	r0, [sp, #28]
   14214:	strb	r3, [r1]
   14218:	str	r2, [sp, #52]	; 0x34
   1421c:	b	13ac8 <close_stdout@@Base+0x11b4>
   14220:	ldr	r3, [pc, #1264]	; 14718 <close_stdout@@Base+0x1e04>
   14224:	mov	r2, #1
   14228:	mov	r0, #3
   1422c:	str	r2, [sp, #36]	; 0x24
   14230:	add	r3, pc, r3
   14234:	str	r2, [sp, #24]
   14238:	str	r3, [sp, #52]	; 0x34
   1423c:	mov	r9, #0
   14240:	str	r2, [sp, #28]
   14244:	str	r0, [sp, #160]	; 0xa0
   14248:	b	13ac8 <close_stdout@@Base+0x11b4>
   1424c:	mov	r0, #0
   14250:	mov	r1, #1
   14254:	str	r0, [sp, #36]	; 0x24
   14258:	mov	r9, r0
   1425c:	str	r1, [sp, #24]
   14260:	str	r0, [sp, #28]
   14264:	str	r0, [sp, #52]	; 0x34
   14268:	b	13ac8 <close_stdout@@Base+0x11b4>
   1426c:	ldr	r3, [sp, #160]	; 0xa0
   14270:	cmp	r3, #8
   14274:	beq	142a0 <close_stdout@@Base+0x198c>
   14278:	ldr	r0, [pc, #1180]	; 1471c <close_stdout@@Base+0x1e08>
   1427c:	mov	r1, r3
   14280:	add	r0, pc, r0
   14284:	bl	138b0 <close_stdout@@Base+0xf9c>
   14288:	ldr	r1, [sp, #160]	; 0xa0
   1428c:	str	r0, [sp, #72]	; 0x48
   14290:	ldr	r0, [pc, #1160]	; 14720 <close_stdout@@Base+0x1e0c>
   14294:	add	r0, pc, r0
   14298:	bl	138b0 <close_stdout@@Base+0xf9c>
   1429c:	str	r0, [sp, #68]	; 0x44
   142a0:	ldr	r0, [sp, #36]	; 0x24
   142a4:	cmp	r0, #0
   142a8:	movne	r9, #0
   142ac:	bne	142e4 <close_stdout@@Base+0x19d0>
   142b0:	ldr	r1, [sp, #72]	; 0x48
   142b4:	ldrb	r3, [r1]
   142b8:	cmp	r3, #0
   142bc:	beq	146bc <close_stdout@@Base+0x1da8>
   142c0:	mov	r2, r1
   142c4:	ldr	r1, [sp, #40]	; 0x28
   142c8:	mov	r9, r0
   142cc:	cmp	r9, sl
   142d0:	strbcc	r3, [r1, r9]
   142d4:	ldrb	r3, [r2, #1]!
   142d8:	add	r9, r9, #1
   142dc:	cmp	r3, #0
   142e0:	bne	142cc <close_stdout@@Base+0x19b8>
   142e4:	ldr	r0, [sp, #68]	; 0x44
   142e8:	str	r0, [sp, #52]	; 0x34
   142ec:	bl	11704 <strlen@plt>
   142f0:	mov	r2, #1
   142f4:	str	r2, [sp, #24]
   142f8:	str	r0, [sp, #28]
   142fc:	b	13ac8 <close_stdout@@Base+0x11b4>
   14300:	ldr	r3, [pc, #1052]	; 14724 <close_stdout@@Base+0x1e10>
   14304:	mov	r2, #0
   14308:	mov	r1, #1
   1430c:	mov	r0, #2
   14310:	add	r3, pc, r3
   14314:	str	r1, [sp, #36]	; 0x24
   14318:	str	r2, [sp, #24]
   1431c:	mov	r9, r2
   14320:	str	r1, [sp, #28]
   14324:	str	r3, [sp, #52]	; 0x34
   14328:	str	r0, [sp, #160]	; 0xa0
   1432c:	b	13ac8 <close_stdout@@Base+0x11b4>
   14330:	ldr	r3, [sp, #36]	; 0x24
   14334:	cmp	r3, #0
   14338:	bne	146c8 <close_stdout@@Base+0x1db4>
   1433c:	cmp	sl, #0
   14340:	beq	14624 <close_stdout@@Base+0x1d10>
   14344:	ldr	r1, [sp, #40]	; 0x28
   14348:	mov	r3, #39	; 0x27
   1434c:	ldr	r2, [sp, #36]	; 0x24
   14350:	mov	r0, #1
   14354:	mov	r9, r0
   14358:	str	r0, [sp, #28]
   1435c:	strb	r3, [r1]
   14360:	ldr	r3, [pc, #960]	; 14728 <close_stdout@@Base+0x1e14>
   14364:	str	r2, [sp, #24]
   14368:	add	r3, pc, r3
   1436c:	str	r3, [sp, #52]	; 0x34
   14370:	b	13ac8 <close_stdout@@Base+0x11b4>
   14374:	ldr	r2, [sp, #28]
   14378:	cmp	r2, #1
   1437c:	add	r4, fp, r2
   14380:	movls	r3, #0
   14384:	movhi	r3, #1
   14388:	cmn	r8, #1
   1438c:	movne	r3, #0
   14390:	cmp	r3, #0
   14394:	beq	143a4 <close_stdout@@Base+0x1a90>
   14398:	ldr	r0, [sp, #32]
   1439c:	bl	11704 <strlen@plt>
   143a0:	mov	r8, r0
   143a4:	cmp	r8, r4
   143a8:	ldrcc	r3, [sp, #32]
   143ac:	movcc	r6, #0
   143b0:	addcc	r5, r3, fp
   143b4:	bcc	13b24 <close_stdout@@Base+0x1210>
   143b8:	ldr	r0, [sp, #32]
   143bc:	ldr	r1, [sp, #52]	; 0x34
   143c0:	add	r5, r0, fp
   143c4:	ldr	r2, [sp, #28]
   143c8:	mov	r0, r5
   143cc:	bl	11578 <memcmp@plt>
   143d0:	cmp	r0, #0
   143d4:	bne	143ec <close_stdout@@Base+0x1ad8>
   143d8:	ldr	r1, [sp, #36]	; 0x24
   143dc:	cmp	r1, #0
   143e0:	bne	13f44 <close_stdout@@Base+0x1630>
   143e4:	mov	r6, #1
   143e8:	b	13b24 <close_stdout@@Base+0x1210>
   143ec:	mov	r6, #0
   143f0:	b	13b24 <close_stdout@@Base+0x1210>
   143f4:	add	r7, sp, #108	; 0x6c
   143f8:	cmn	r8, #1
   143fc:	mov	r3, #0
   14400:	str	r3, [sp, #108]	; 0x6c
   14404:	str	r3, [r7, #4]
   14408:	beq	145f4 <close_stdout@@Base+0x1ce0>
   1440c:	mov	r1, #0
   14410:	ldr	r0, [sp, #32]
   14414:	mov	ip, #1
   14418:	str	r9, [sp, #88]	; 0x58
   1441c:	str	r6, [sp, #96]	; 0x60
   14420:	mov	r9, r1
   14424:	str	r5, [sp, #100]	; 0x64
   14428:	mov	r6, ip
   1442c:	mov	r5, r7
   14430:	add	r3, sp, #104	; 0x68
   14434:	sub	r0, r0, #1
   14438:	str	r3, [sp, #80]	; 0x50
   1443c:	str	r0, [sp, #84]	; 0x54
   14440:	str	r1, [sp, #60]	; 0x3c
   14444:	str	r4, [sp, #92]	; 0x5c
   14448:	ldr	r2, [sp, #32]
   1444c:	add	r7, r9, fp
   14450:	add	r0, sp, #104	; 0x68
   14454:	mov	r3, r5
   14458:	add	r4, r2, r7
   1445c:	rsb	r2, r7, r8
   14460:	mov	r1, r4
   14464:	bl	11644 <mbrtowc@plt>
   14468:	subs	r2, r0, #0
   1446c:	beq	14578 <close_stdout@@Base+0x1c64>
   14470:	cmn	r2, #1
   14474:	beq	146a0 <close_stdout@@Base+0x1d8c>
   14478:	cmn	r2, #2
   1447c:	beq	14644 <close_stdout@@Base+0x1d30>
   14480:	ldr	r3, [sp, #36]	; 0x24
   14484:	ldr	r0, [sp, #160]	; 0xa0
   14488:	cmp	r0, #2
   1448c:	movne	r3, #0
   14490:	andeq	r3, r3, #1
   14494:	cmp	r3, #0
   14498:	beq	14554 <close_stdout@@Base+0x1c40>
   1449c:	cmp	r2, #1
   144a0:	beq	14554 <close_stdout@@Base+0x1c40>
   144a4:	ldr	r1, [sp, #84]	; 0x54
   144a8:	add	r3, r1, r2
   144ac:	add	r7, r3, r7
   144b0:	ldrb	r3, [r4, #1]!
   144b4:	sub	r3, r3, #91	; 0x5b
   144b8:	cmp	r3, #33	; 0x21
   144bc:	addls	pc, pc, r3, lsl #2
   144c0:	b	1454c <close_stdout@@Base+0x1c38>
   144c4:	b	13f44 <close_stdout@@Base+0x1630>
   144c8:	b	13f44 <close_stdout@@Base+0x1630>
   144cc:	b	1454c <close_stdout@@Base+0x1c38>
   144d0:	b	13f44 <close_stdout@@Base+0x1630>
   144d4:	b	1454c <close_stdout@@Base+0x1c38>
   144d8:	b	13f44 <close_stdout@@Base+0x1630>
   144dc:	b	1454c <close_stdout@@Base+0x1c38>
   144e0:	b	1454c <close_stdout@@Base+0x1c38>
   144e4:	b	1454c <close_stdout@@Base+0x1c38>
   144e8:	b	1454c <close_stdout@@Base+0x1c38>
   144ec:	b	1454c <close_stdout@@Base+0x1c38>
   144f0:	b	1454c <close_stdout@@Base+0x1c38>
   144f4:	b	1454c <close_stdout@@Base+0x1c38>
   144f8:	b	1454c <close_stdout@@Base+0x1c38>
   144fc:	b	1454c <close_stdout@@Base+0x1c38>
   14500:	b	1454c <close_stdout@@Base+0x1c38>
   14504:	b	1454c <close_stdout@@Base+0x1c38>
   14508:	b	1454c <close_stdout@@Base+0x1c38>
   1450c:	b	1454c <close_stdout@@Base+0x1c38>
   14510:	b	1454c <close_stdout@@Base+0x1c38>
   14514:	b	1454c <close_stdout@@Base+0x1c38>
   14518:	b	1454c <close_stdout@@Base+0x1c38>
   1451c:	b	1454c <close_stdout@@Base+0x1c38>
   14520:	b	1454c <close_stdout@@Base+0x1c38>
   14524:	b	1454c <close_stdout@@Base+0x1c38>
   14528:	b	1454c <close_stdout@@Base+0x1c38>
   1452c:	b	1454c <close_stdout@@Base+0x1c38>
   14530:	b	1454c <close_stdout@@Base+0x1c38>
   14534:	b	1454c <close_stdout@@Base+0x1c38>
   14538:	b	1454c <close_stdout@@Base+0x1c38>
   1453c:	b	1454c <close_stdout@@Base+0x1c38>
   14540:	b	1454c <close_stdout@@Base+0x1c38>
   14544:	b	1454c <close_stdout@@Base+0x1c38>
   14548:	b	13f44 <close_stdout@@Base+0x1630>
   1454c:	cmp	r4, r7
   14550:	bne	144b0 <close_stdout@@Base+0x1b9c>
   14554:	ldr	r0, [sp, #104]	; 0x68
   14558:	add	r9, r9, r2
   1455c:	bl	115d8 <iswprint@plt>
   14560:	cmp	r0, #0
   14564:	mov	r0, r5
   14568:	moveq	r6, #0
   1456c:	bl	11560 <mbsinit@plt>
   14570:	cmp	r0, #0
   14574:	beq	14448 <close_stdout@@Base+0x1b34>
   14578:	mov	ip, r6
   1457c:	eor	r2, ip, #1
   14580:	str	r9, [sp, #60]	; 0x3c
   14584:	ldr	r4, [sp, #92]	; 0x5c
   14588:	uxtb	r2, r2
   1458c:	ldr	r9, [sp, #88]	; 0x58
   14590:	ldr	r6, [sp, #96]	; 0x60
   14594:	ldr	r5, [sp, #100]	; 0x64
   14598:	ldr	r3, [sp, #60]	; 0x3c
   1459c:	cmp	r3, #1
   145a0:	bls	14124 <close_stdout@@Base+0x1810>
   145a4:	ldr	r0, [sp, #24]
   145a8:	and	r2, r2, r0
   145ac:	b	14130 <close_stdout@@Base+0x181c>
   145b0:	ldr	r2, [sp, #164]	; 0xa4
   145b4:	tst	r2, #1
   145b8:	addne	fp, fp, #1
   145bc:	bne	13aec <close_stdout@@Base+0x11d8>
   145c0:	b	13dfc <close_stdout@@Base+0x14e8>
   145c4:	ldr	r0, [sp, #36]	; 0x24
   145c8:	cmp	r0, #0
   145cc:	beq	13dfc <close_stdout@@Base+0x14e8>
   145d0:	b	13f44 <close_stdout@@Base+0x1630>
   145d4:	ldr	r2, [sp, #32]
   145d8:	ldrb	r3, [r2, #1]
   145dc:	adds	r3, r3, #0
   145e0:	movne	r3, #1
   145e4:	b	13f18 <close_stdout@@Base+0x1604>
   145e8:	bl	11878 <abort@plt>
   145ec:	ldr	r8, [sp, #60]	; 0x3c
   145f0:	b	13f44 <close_stdout@@Base+0x1630>
   145f4:	ldr	r0, [sp, #32]
   145f8:	bl	11704 <strlen@plt>
   145fc:	mov	r8, r0
   14600:	b	1440c <close_stdout@@Base+0x1af8>
   14604:	ldr	r2, [pc, #288]	; 1472c <close_stdout@@Base+0x1e18>
   14608:	mov	r1, #1
   1460c:	mov	r9, r1
   14610:	str	r1, [sp, #24]
   14614:	add	r2, pc, r2
   14618:	str	r1, [sp, #28]
   1461c:	str	r2, [sp, #52]	; 0x34
   14620:	b	13ac8 <close_stdout@@Base+0x11b4>
   14624:	ldr	r2, [pc, #260]	; 14730 <close_stdout@@Base+0x1e1c>
   14628:	mov	r3, #1
   1462c:	mov	r9, r3
   14630:	str	r3, [sp, #28]
   14634:	add	r2, pc, r2
   14638:	str	sl, [sp, #24]
   1463c:	str	r2, [sp, #52]	; 0x34
   14640:	b	13ac8 <close_stdout@@Base+0x11b4>
   14644:	cmp	r8, r7
   14648:	str	r9, [sp, #60]	; 0x3c
   1464c:	mov	ip, r4
   14650:	ldr	r6, [sp, #96]	; 0x60
   14654:	ldr	r9, [sp, #88]	; 0x58
   14658:	ldr	r4, [sp, #92]	; 0x5c
   1465c:	ldr	r5, [sp, #100]	; 0x64
   14660:	bls	14698 <close_stdout@@Base+0x1d84>
   14664:	ldrb	r3, [ip]
   14668:	cmp	r3, #0
   1466c:	beq	14698 <close_stdout@@Base+0x1d84>
   14670:	ldr	r3, [sp, #60]	; 0x3c
   14674:	b	14684 <close_stdout@@Base+0x1d70>
   14678:	ldrb	r2, [r5, r3]
   1467c:	cmp	r2, #0
   14680:	beq	14694 <close_stdout@@Base+0x1d80>
   14684:	add	r3, r3, #1
   14688:	add	r2, fp, r3
   1468c:	cmp	r8, r2
   14690:	bhi	14678 <close_stdout@@Base+0x1d64>
   14694:	str	r3, [sp, #60]	; 0x3c
   14698:	mov	r2, #1
   1469c:	b	14598 <close_stdout@@Base+0x1c84>
   146a0:	str	r9, [sp, #60]	; 0x3c
   146a4:	mov	r2, #1
   146a8:	ldr	r4, [sp, #92]	; 0x5c
   146ac:	ldr	r6, [sp, #96]	; 0x60
   146b0:	ldr	r9, [sp, #88]	; 0x58
   146b4:	ldr	r5, [sp, #100]	; 0x64
   146b8:	b	14598 <close_stdout@@Base+0x1c84>
   146bc:	ldr	r9, [sp, #36]	; 0x24
   146c0:	b	142e4 <close_stdout@@Base+0x19d0>
   146c4:	bl	11590 <__stack_chk_fail@plt>
   146c8:	ldr	r1, [pc, #100]	; 14734 <close_stdout@@Base+0x1e20>
   146cc:	mov	r3, #0
   146d0:	mov	r0, #1
   146d4:	str	r3, [sp, #24]
   146d8:	add	r1, pc, r1
   146dc:	str	r0, [sp, #28]
   146e0:	mov	r9, r3
   146e4:	str	r1, [sp, #52]	; 0x34
   146e8:	b	13ac8 <close_stdout@@Base+0x11b4>
   146ec:	ldr	r0, [pc, #68]	; 14738 <close_stdout@@Base+0x1e24>
   146f0:	mov	r3, #1
   146f4:	mov	r9, #0
   146f8:	str	r3, [sp, #24]
   146fc:	add	r0, pc, r0
   14700:	str	r3, [sp, #28]
   14704:	str	r0, [sp, #52]	; 0x34
   14708:	b	13ac8 <close_stdout@@Base+0x11b4>
   1470c:	andeq	r6, r1, r8, asr #11
   14710:	andeq	r0, r0, r8, ror #2
   14714:	andeq	r5, r0, ip, lsr r5
   14718:	andeq	r5, r0, r8, lsl r5
   1471c:	ldrdeq	r5, [r0], -r4
   14720:			; <UNDEFINED> instruction: 0x000054b0
   14724:	andeq	r5, r0, r4, lsr r4
   14728:	ldrdeq	r5, [r0], -ip
   1472c:	andeq	r5, r0, r4, lsr r1
   14730:	andeq	r5, r0, r0, lsl r1
   14734:	andeq	r5, r0, ip, rrx
   14738:	andeq	r5, r0, ip, asr #32
   1473c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14740:	sub	sp, sp, #44	; 0x2c
   14744:	mov	r6, r0
   14748:	mov	r9, r1
   1474c:	mov	sl, r2
   14750:	mov	r4, r3
   14754:	bl	11734 <__errno_location@plt>
   14758:	ldr	fp, [pc, #412]	; 148fc <close_stdout@@Base+0x1fe8>
   1475c:	cmp	r6, #0
   14760:	add	fp, pc, fp
   14764:	ldr	r5, [fp]
   14768:	ldr	r1, [r0]
   1476c:	mov	r8, r0
   14770:	str	r1, [sp, #36]	; 0x24
   14774:	blt	148f4 <close_stdout@@Base+0x1fe0>
   14778:	ldr	r3, [pc, #384]	; 14900 <close_stdout@@Base+0x1fec>
   1477c:	add	r3, pc, r3
   14780:	ldr	r3, [r3]
   14784:	cmp	r6, r3
   14788:	bcc	147dc <close_stdout@@Base+0x1ec8>
   1478c:	add	r7, r6, #1
   14790:	cmn	r7, #-536870911	; 0xe0000001
   14794:	bhi	148f8 <close_stdout@@Base+0x1fe4>
   14798:	add	r3, fp, #4
   1479c:	cmp	r5, r3
   147a0:	beq	148cc <close_stdout@@Base+0x1fb8>
   147a4:	mov	r0, r5
   147a8:	lsl	r1, r7, #3
   147ac:	bl	15bb4 <close_stdout@@Base+0x32a0>
   147b0:	mov	r5, r0
   147b4:	str	r0, [fp]
   147b8:	ldr	fp, [pc, #324]	; 14904 <close_stdout@@Base+0x1ff0>
   147bc:	mov	r1, #0
   147c0:	add	fp, pc, fp
   147c4:	ldr	r0, [fp]
   147c8:	rsb	r2, r0, r7
   147cc:	add	r0, r5, r0, lsl #3
   147d0:	lsl	r2, r2, #3
   147d4:	bl	11770 <memset@plt>
   147d8:	str	r7, [fp]
   147dc:	add	r2, r4, #8
   147e0:	str	r2, [sp, #32]
   147e4:	ldr	r1, [r4]
   147e8:	add	fp, r5, r6, lsl #3
   147ec:	ldr	lr, [sp, #32]
   147f0:	mov	r2, r9
   147f4:	ldr	r3, [r4, #4]
   147f8:	ldr	ip, [r5, r6, lsl #3]
   147fc:	ldr	r7, [fp, #4]
   14800:	orr	r3, r3, #1
   14804:	str	r1, [sp]
   14808:	str	r3, [sp, #4]
   1480c:	mov	r1, ip
   14810:	str	lr, [sp, #8]
   14814:	mov	r0, r7
   14818:	ldr	lr, [r4, #40]	; 0x28
   1481c:	str	r3, [sp, #28]
   14820:	mov	r3, sl
   14824:	str	lr, [sp, #12]
   14828:	ldr	lr, [r4, #44]	; 0x2c
   1482c:	str	ip, [sp, #24]
   14830:	str	lr, [sp, #16]
   14834:	bl	13a14 <close_stdout@@Base+0x1100>
   14838:	ldr	ip, [sp, #24]
   1483c:	cmp	ip, r0
   14840:	bhi	148b8 <close_stdout@@Base+0x1fa4>
   14844:	ldr	r3, [pc, #188]	; 14908 <close_stdout@@Base+0x1ff4>
   14848:	add	r1, r0, #1
   1484c:	str	r1, [r5, r6, lsl #3]
   14850:	add	r3, pc, r3
   14854:	cmp	r7, r3
   14858:	beq	1486c <close_stdout@@Base+0x1f58>
   1485c:	mov	r0, r7
   14860:	str	r1, [sp, #24]
   14864:	bl	11530 <free@plt>
   14868:	ldr	r1, [sp, #24]
   1486c:	mov	r0, r1
   14870:	str	r1, [sp, #24]
   14874:	bl	15b5c <close_stdout@@Base+0x3248>
   14878:	ldr	r3, [sp, #28]
   1487c:	ldr	lr, [sp, #32]
   14880:	mov	r2, r9
   14884:	str	r0, [fp, #4]
   14888:	mov	r7, r0
   1488c:	ldr	ip, [r4]
   14890:	str	r3, [sp, #4]
   14894:	mov	r3, sl
   14898:	str	lr, [sp, #8]
   1489c:	str	ip, [sp]
   148a0:	ldr	ip, [r4, #40]	; 0x28
   148a4:	ldr	r1, [sp, #24]
   148a8:	str	ip, [sp, #12]
   148ac:	ldr	ip, [r4, #44]	; 0x2c
   148b0:	str	ip, [sp, #16]
   148b4:	bl	13a14 <close_stdout@@Base+0x1100>
   148b8:	ldr	r1, [sp, #36]	; 0x24
   148bc:	mov	r0, r7
   148c0:	str	r1, [r8]
   148c4:	add	sp, sp, #44	; 0x2c
   148c8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   148cc:	lsl	r1, r7, #3
   148d0:	mov	r0, #0
   148d4:	str	r3, [sp, #24]
   148d8:	bl	15bb4 <close_stdout@@Base+0x32a0>
   148dc:	ldr	r3, [sp, #24]
   148e0:	mov	r5, r0
   148e4:	ldm	r3, {r0, r1}
   148e8:	str	r5, [fp]
   148ec:	stm	r5, {r0, r1}
   148f0:	b	147b8 <close_stdout@@Base+0x1ea4>
   148f4:	bl	11878 <abort@plt>
   148f8:	bl	15d70 <close_stdout@@Base+0x345c>
   148fc:	andeq	r5, r1, r0, lsl #21
   14900:	andeq	r5, r1, r0, lsr sl
   14904:	andeq	r5, r1, ip, ror #19
   14908:	andeq	r5, r1, ip, ror #22
   1490c:	push	{r4, r5, r6, lr}
   14910:	mov	r5, r0
   14914:	bl	11734 <__errno_location@plt>
   14918:	cmp	r5, #0
   1491c:	mov	r1, #48	; 0x30
   14920:	mov	r4, r0
   14924:	ldr	r0, [pc, #24]	; 14944 <close_stdout@@Base+0x2030>
   14928:	ldr	r6, [r4]
   1492c:	add	r0, pc, r0
   14930:	add	r0, r0, #256	; 0x100
   14934:	movne	r0, r5
   14938:	bl	15d30 <close_stdout@@Base+0x341c>
   1493c:	str	r6, [r4]
   14940:	pop	{r4, r5, r6, pc}
   14944:	muleq	r1, r0, sl
   14948:	cmp	r0, #0
   1494c:	beq	14958 <close_stdout@@Base+0x2044>
   14950:	ldr	r0, [r0]
   14954:	bx	lr
   14958:	ldr	r0, [pc, #12]	; 1496c <close_stdout@@Base+0x2058>
   1495c:	add	r0, pc, r0
   14960:	add	r0, r0, #256	; 0x100
   14964:	ldr	r0, [r0]
   14968:	bx	lr
   1496c:	andeq	r5, r1, r0, ror #20
   14970:	cmp	r0, #0
   14974:	beq	14980 <close_stdout@@Base+0x206c>
   14978:	str	r1, [r0]
   1497c:	bx	lr
   14980:	ldr	r0, [pc, #12]	; 14994 <close_stdout@@Base+0x2080>
   14984:	add	r0, pc, r0
   14988:	add	r0, r0, #256	; 0x100
   1498c:	str	r1, [r0]
   14990:	bx	lr
   14994:	andeq	r5, r1, r8, lsr sl
   14998:	cmp	r0, #0
   1499c:	movne	r3, r0
   149a0:	beq	149d0 <close_stdout@@Base+0x20bc>
   149a4:	lsr	ip, r1, #5
   149a8:	and	r1, r1, #31
   149ac:	add	r3, r3, ip, lsl #2
   149b0:	ldr	ip, [r3, #8]
   149b4:	lsr	r0, ip, r1
   149b8:	eor	r2, r0, r2
   149bc:	and	r0, r0, #1
   149c0:	and	r2, r2, #1
   149c4:	eor	ip, ip, r2, lsl r1
   149c8:	str	ip, [r3, #8]
   149cc:	bx	lr
   149d0:	ldr	r3, [pc, #8]	; 149e0 <close_stdout@@Base+0x20cc>
   149d4:	add	r3, pc, r3
   149d8:	add	r3, r3, #256	; 0x100
   149dc:	b	149a4 <close_stdout@@Base+0x2090>
   149e0:	andeq	r5, r1, r8, ror #19
   149e4:	subs	r3, r0, #0
   149e8:	beq	149f8 <close_stdout@@Base+0x20e4>
   149ec:	ldr	r0, [r3, #4]
   149f0:	str	r1, [r3, #4]
   149f4:	bx	lr
   149f8:	ldr	r3, [pc, #8]	; 14a08 <close_stdout@@Base+0x20f4>
   149fc:	add	r3, pc, r3
   14a00:	add	r3, r3, #256	; 0x100
   14a04:	b	149ec <close_stdout@@Base+0x20d8>
   14a08:	andeq	r5, r1, r0, asr #19
   14a0c:	cmp	r0, #0
   14a10:	push	{r3, lr}
   14a14:	beq	14a38 <close_stdout@@Base+0x2124>
   14a18:	cmp	r2, #0
   14a1c:	cmpne	r1, #0
   14a20:	mov	r3, #8
   14a24:	strne	r1, [r0, #40]	; 0x28
   14a28:	str	r3, [r0]
   14a2c:	strne	r2, [r0, #44]	; 0x2c
   14a30:	popne	{r3, pc}
   14a34:	bl	11878 <abort@plt>
   14a38:	ldr	r0, [pc, #8]	; 14a48 <close_stdout@@Base+0x2134>
   14a3c:	add	r0, pc, r0
   14a40:	add	r0, r0, #256	; 0x100
   14a44:	b	14a18 <close_stdout@@Base+0x2104>
   14a48:	andeq	r5, r1, r0, lsl #19
   14a4c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14a50:	sub	sp, sp, #24
   14a54:	mov	r7, r0
   14a58:	mov	sl, r1
   14a5c:	ldr	r4, [sp, #56]	; 0x38
   14a60:	mov	r9, r2
   14a64:	mov	r8, r3
   14a68:	cmp	r4, #0
   14a6c:	beq	14ac0 <close_stdout@@Base+0x21ac>
   14a70:	bl	11734 <__errno_location@plt>
   14a74:	ldr	r3, [r4]
   14a78:	add	lr, r4, #8
   14a7c:	mov	r1, sl
   14a80:	mov	r2, r9
   14a84:	ldr	r6, [r0]
   14a88:	mov	r5, r0
   14a8c:	str	r3, [sp]
   14a90:	mov	r0, r7
   14a94:	ldr	ip, [r4, #4]
   14a98:	mov	r3, r8
   14a9c:	stmib	sp, {ip, lr}
   14aa0:	ldr	ip, [r4, #40]	; 0x28
   14aa4:	str	ip, [sp, #12]
   14aa8:	ldr	ip, [r4, #44]	; 0x2c
   14aac:	str	ip, [sp, #16]
   14ab0:	bl	13a14 <close_stdout@@Base+0x1100>
   14ab4:	str	r6, [r5]
   14ab8:	add	sp, sp, #24
   14abc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14ac0:	ldr	r4, [pc, #8]	; 14ad0 <close_stdout@@Base+0x21bc>
   14ac4:	add	r4, pc, r4
   14ac8:	add	r4, r4, #256	; 0x100
   14acc:	b	14a70 <close_stdout@@Base+0x215c>
   14ad0:	strdeq	r5, [r1], -r8
   14ad4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ad8:	subs	r4, r3, #0
   14adc:	sub	sp, sp, #36	; 0x24
   14ae0:	mov	r7, r0
   14ae4:	mov	r6, r1
   14ae8:	mov	r5, r2
   14aec:	beq	14ba8 <close_stdout@@Base+0x2294>
   14af0:	bl	11734 <__errno_location@plt>
   14af4:	ldr	r3, [r4]
   14af8:	ldr	sl, [r4, #4]
   14afc:	add	r9, r4, #8
   14b00:	mov	r8, r0
   14b04:	mov	r0, #0
   14b08:	ldr	r2, [r8]
   14b0c:	cmp	r5, r0
   14b10:	orreq	sl, sl, #1
   14b14:	str	r9, [sp, #8]
   14b18:	mov	r1, r0
   14b1c:	stm	sp, {r3, sl}
   14b20:	mov	r3, r6
   14b24:	ldr	ip, [r4, #40]	; 0x28
   14b28:	str	r2, [sp, #28]
   14b2c:	mov	r2, r7
   14b30:	str	ip, [sp, #12]
   14b34:	ldr	ip, [r4, #44]	; 0x2c
   14b38:	str	ip, [sp, #16]
   14b3c:	bl	13a14 <close_stdout@@Base+0x1100>
   14b40:	add	r1, r0, #1
   14b44:	mov	fp, r0
   14b48:	str	r1, [sp, #24]
   14b4c:	mov	r0, r1
   14b50:	bl	15b5c <close_stdout@@Base+0x3248>
   14b54:	ldr	lr, [r4]
   14b58:	str	sl, [sp, #4]
   14b5c:	mov	r3, r6
   14b60:	str	r9, [sp, #8]
   14b64:	mov	r2, r7
   14b68:	str	lr, [sp]
   14b6c:	ldr	lr, [r4, #40]	; 0x28
   14b70:	ldr	r1, [sp, #24]
   14b74:	str	lr, [sp, #12]
   14b78:	ldr	lr, [r4, #44]	; 0x2c
   14b7c:	str	lr, [sp, #16]
   14b80:	str	r0, [sp, #24]
   14b84:	bl	13a14 <close_stdout@@Base+0x1100>
   14b88:	ldr	r3, [sp, #28]
   14b8c:	cmp	r5, #0
   14b90:	str	r3, [r8]
   14b94:	ldr	ip, [sp, #24]
   14b98:	strne	fp, [r5]
   14b9c:	mov	r0, ip
   14ba0:	add	sp, sp, #36	; 0x24
   14ba4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14ba8:	ldr	r4, [pc, #8]	; 14bb8 <close_stdout@@Base+0x22a4>
   14bac:	add	r4, pc, r4
   14bb0:	add	r4, r4, #256	; 0x100
   14bb4:	b	14af0 <close_stdout@@Base+0x21dc>
   14bb8:	andeq	r5, r1, r0, lsl r8
   14bbc:	mov	r3, r2
   14bc0:	mov	r2, #0
   14bc4:	b	14ad4 <close_stdout@@Base+0x21c0>
   14bc8:	ldr	r2, [pc, #152]	; 14c68 <close_stdout@@Base+0x2354>
   14bcc:	push	{r3, r4, r5, r6, r7, lr}
   14bd0:	add	r2, pc, r2
   14bd4:	ldr	r3, [pc, #144]	; 14c6c <close_stdout@@Base+0x2358>
   14bd8:	ldr	r6, [r2]
   14bdc:	add	r3, pc, r3
   14be0:	cmp	r6, #1
   14be4:	ldr	r7, [r3]
   14be8:	movhi	r4, #1
   14bec:	movhi	r5, r7
   14bf0:	bls	14c0c <close_stdout@@Base+0x22f8>
   14bf4:	ldr	r0, [r5, #12]
   14bf8:	add	r4, r4, #1
   14bfc:	bl	11530 <free@plt>
   14c00:	cmp	r4, r6
   14c04:	add	r5, r5, #8
   14c08:	bne	14bf4 <close_stdout@@Base+0x22e0>
   14c0c:	ldr	r4, [pc, #92]	; 14c70 <close_stdout@@Base+0x235c>
   14c10:	ldr	r0, [r7, #4]
   14c14:	add	r4, pc, r4
   14c18:	cmp	r0, r4
   14c1c:	beq	14c34 <close_stdout@@Base+0x2320>
   14c20:	bl	11530 <free@plt>
   14c24:	ldr	r3, [pc, #72]	; 14c74 <close_stdout@@Base+0x2360>
   14c28:	mov	r2, #256	; 0x100
   14c2c:	add	r3, pc, r3
   14c30:	stmib	r3, {r2, r4}
   14c34:	ldr	r4, [pc, #60]	; 14c78 <close_stdout@@Base+0x2364>
   14c38:	add	r4, pc, r4
   14c3c:	add	r5, r4, #4
   14c40:	cmp	r7, r5
   14c44:	beq	14c54 <close_stdout@@Base+0x2340>
   14c48:	mov	r0, r7
   14c4c:	bl	11530 <free@plt>
   14c50:	str	r5, [r4]
   14c54:	ldr	r3, [pc, #32]	; 14c7c <close_stdout@@Base+0x2368>
   14c58:	mov	r2, #1
   14c5c:	add	r3, pc, r3
   14c60:	str	r2, [r3]
   14c64:	pop	{r3, r4, r5, r6, r7, pc}
   14c68:	ldrdeq	r5, [r1], -ip
   14c6c:	andeq	r5, r1, r4, lsl #12
   14c70:	andeq	r5, r1, r8, lsr #15
   14c74:			; <UNDEFINED> instruction: 0x000155b4
   14c78:	andeq	r5, r1, r8, lsr #11
   14c7c:	andeq	r5, r1, r0, asr r5
   14c80:	ldr	r3, [pc, #12]	; 14c94 <close_stdout@@Base+0x2380>
   14c84:	mvn	r2, #0
   14c88:	add	r3, pc, r3
   14c8c:	add	r3, r3, #256	; 0x100
   14c90:	b	1473c <close_stdout@@Base+0x1e28>
   14c94:	andeq	r5, r1, r4, lsr r7
   14c98:	ldr	r3, [pc, #8]	; 14ca8 <close_stdout@@Base+0x2394>
   14c9c:	add	r3, pc, r3
   14ca0:	add	r3, r3, #256	; 0x100
   14ca4:	b	1473c <close_stdout@@Base+0x1e28>
   14ca8:	andeq	r5, r1, r0, lsr #14
   14cac:	mov	r1, r0
   14cb0:	mov	r0, #0
   14cb4:	b	14c80 <close_stdout@@Base+0x236c>
   14cb8:	mov	r2, r1
   14cbc:	mov	r1, r0
   14cc0:	mov	r0, #0
   14cc4:	b	14c98 <close_stdout@@Base+0x2384>
   14cc8:	ldr	r3, [pc, #92]	; 14d2c <close_stdout@@Base+0x2418>
   14ccc:	ldr	ip, [pc, #92]	; 14d30 <close_stdout@@Base+0x241c>
   14cd0:	add	r3, pc, r3
   14cd4:	push	{r4, r5, r6, r7, lr}
   14cd8:	sub	sp, sp, #60	; 0x3c
   14cdc:	ldr	r4, [r3, ip]
   14ce0:	add	r5, sp, #4
   14ce4:	mov	r7, r2
   14ce8:	mov	r6, r0
   14cec:	mov	r0, r5
   14cf0:	ldr	r3, [r4]
   14cf4:	str	r3, [sp, #52]	; 0x34
   14cf8:	bl	1385c <close_stdout@@Base+0xf48>
   14cfc:	mov	r3, r5
   14d00:	mvn	r2, #0
   14d04:	mov	r0, r6
   14d08:	mov	r1, r7
   14d0c:	bl	1473c <close_stdout@@Base+0x1e28>
   14d10:	ldr	r2, [sp, #52]	; 0x34
   14d14:	ldr	r3, [r4]
   14d18:	cmp	r2, r3
   14d1c:	bne	14d28 <close_stdout@@Base+0x2414>
   14d20:	add	sp, sp, #60	; 0x3c
   14d24:	pop	{r4, r5, r6, r7, pc}
   14d28:	bl	11590 <__stack_chk_fail@plt>
   14d2c:	andeq	r5, r1, r8, lsr #6
   14d30:	andeq	r0, r0, r8, ror #2
   14d34:	ldr	ip, [pc, #96]	; 14d9c <close_stdout@@Base+0x2488>
   14d38:	push	{r4, r5, r6, r7, r8, lr}
   14d3c:	add	ip, pc, ip
   14d40:	ldr	lr, [pc, #88]	; 14da0 <close_stdout@@Base+0x248c>
   14d44:	sub	sp, sp, #56	; 0x38
   14d48:	mov	r8, r3
   14d4c:	add	r5, sp, #4
   14d50:	mov	r7, r2
   14d54:	mov	r6, r0
   14d58:	ldr	r4, [ip, lr]
   14d5c:	mov	r0, r5
   14d60:	ldr	r3, [r4]
   14d64:	str	r3, [sp, #52]	; 0x34
   14d68:	bl	1385c <close_stdout@@Base+0xf48>
   14d6c:	mov	r2, r8
   14d70:	mov	r3, r5
   14d74:	mov	r0, r6
   14d78:	mov	r1, r7
   14d7c:	bl	1473c <close_stdout@@Base+0x1e28>
   14d80:	ldr	r2, [sp, #52]	; 0x34
   14d84:	ldr	r3, [r4]
   14d88:	cmp	r2, r3
   14d8c:	bne	14d98 <close_stdout@@Base+0x2484>
   14d90:	add	sp, sp, #56	; 0x38
   14d94:	pop	{r4, r5, r6, r7, r8, pc}
   14d98:	bl	11590 <__stack_chk_fail@plt>
   14d9c:			; <UNDEFINED> instruction: 0x000152bc
   14da0:	andeq	r0, r0, r8, ror #2
   14da4:	mov	r2, r1
   14da8:	mov	r1, r0
   14dac:	mov	r0, #0
   14db0:	b	14cc8 <close_stdout@@Base+0x23b4>
   14db4:	mov	ip, r1
   14db8:	mov	r3, r2
   14dbc:	mov	r1, r0
   14dc0:	mov	r2, ip
   14dc4:	mov	r0, #0
   14dc8:	b	14d34 <close_stdout@@Base+0x2420>
   14dcc:	push	{r4, r5, r6, r7, r8, lr}
   14dd0:	mov	r5, r2
   14dd4:	ldr	lr, [pc, #136]	; 14e64 <close_stdout@@Base+0x2550>
   14dd8:	mov	r7, r0
   14ddc:	mov	r6, r1
   14de0:	ldr	r4, [pc, #128]	; 14e68 <close_stdout@@Base+0x2554>
   14de4:	add	lr, pc, lr
   14de8:	sub	sp, sp, #56	; 0x38
   14dec:	add	lr, lr, #256	; 0x100
   14df0:	ldr	r8, [pc, #116]	; 14e6c <close_stdout@@Base+0x2558>
   14df4:	add	r4, pc, r4
   14df8:	add	ip, sp, #4
   14dfc:	ldm	lr!, {r0, r1, r2, r3}
   14e00:	ldr	r4, [r4, r8]
   14e04:	stmia	ip!, {r0, r1, r2, r3}
   14e08:	ldm	lr!, {r0, r1, r2, r3}
   14e0c:	ldr	r8, [r4]
   14e10:	stmia	ip!, {r0, r1, r2, r3}
   14e14:	ldm	lr, {r0, r1, r2, r3}
   14e18:	str	r8, [sp, #52]	; 0x34
   14e1c:	stm	ip, {r0, r1, r2, r3}
   14e20:	mov	r1, r5
   14e24:	add	r5, sp, #4
   14e28:	mov	r2, #1
   14e2c:	mov	r0, r5
   14e30:	bl	14998 <close_stdout@@Base+0x2084>
   14e34:	mov	r2, r6
   14e38:	mov	r3, r5
   14e3c:	mov	r1, r7
   14e40:	mov	r0, #0
   14e44:	bl	1473c <close_stdout@@Base+0x1e28>
   14e48:	ldr	r2, [sp, #52]	; 0x34
   14e4c:	ldr	r3, [r4]
   14e50:	cmp	r2, r3
   14e54:	bne	14e60 <close_stdout@@Base+0x254c>
   14e58:	add	sp, sp, #56	; 0x38
   14e5c:	pop	{r4, r5, r6, r7, r8, pc}
   14e60:	bl	11590 <__stack_chk_fail@plt>
   14e64:	ldrdeq	r5, [r1], -r8
   14e68:	andeq	r5, r1, r4, lsl #4
   14e6c:	andeq	r0, r0, r8, ror #2
   14e70:	mov	r2, r1
   14e74:	mvn	r1, #0
   14e78:	b	14dcc <close_stdout@@Base+0x24b8>
   14e7c:	mov	r1, #58	; 0x3a
   14e80:	b	14e70 <close_stdout@@Base+0x255c>
   14e84:	mov	r2, #58	; 0x3a
   14e88:	b	14dcc <close_stdout@@Base+0x24b8>
   14e8c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   14e90:	mov	r5, r2
   14e94:	ldr	lr, [pc, #144]	; 14f2c <close_stdout@@Base+0x2618>
   14e98:	mov	r8, r0
   14e9c:	mov	r9, r1
   14ea0:	mov	r7, r3
   14ea4:	add	lr, pc, lr
   14ea8:	ldr	r4, [pc, #128]	; 14f30 <close_stdout@@Base+0x261c>
   14eac:	add	lr, lr, #256	; 0x100
   14eb0:	sub	sp, sp, #56	; 0x38
   14eb4:	ldr	sl, [pc, #120]	; 14f34 <close_stdout@@Base+0x2620>
   14eb8:	add	r4, pc, r4
   14ebc:	ldm	lr!, {r0, r1, r2, r3}
   14ec0:	add	ip, sp, #4
   14ec4:	ldr	r4, [r4, sl]
   14ec8:	ldr	r6, [sp, #88]	; 0x58
   14ecc:	stmia	ip!, {r0, r1, r2, r3}
   14ed0:	ldm	lr!, {r0, r1, r2, r3}
   14ed4:	ldr	sl, [r4]
   14ed8:	stmia	ip!, {r0, r1, r2, r3}
   14edc:	ldm	lr, {r0, r1, r2, r3}
   14ee0:	str	sl, [sp, #52]	; 0x34
   14ee4:	stm	ip, {r0, r1, r2, r3}
   14ee8:	mov	r2, r5
   14eec:	add	r5, sp, #4
   14ef0:	mov	r1, r9
   14ef4:	mov	r0, r5
   14ef8:	bl	14a0c <close_stdout@@Base+0x20f8>
   14efc:	mov	r2, r6
   14f00:	mov	r3, r5
   14f04:	mov	r0, r8
   14f08:	mov	r1, r7
   14f0c:	bl	1473c <close_stdout@@Base+0x1e28>
   14f10:	ldr	r2, [sp, #52]	; 0x34
   14f14:	ldr	r3, [r4]
   14f18:	cmp	r2, r3
   14f1c:	bne	14f28 <close_stdout@@Base+0x2614>
   14f20:	add	sp, sp, #56	; 0x38
   14f24:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   14f28:	bl	11590 <__stack_chk_fail@plt>
   14f2c:	andeq	r5, r1, r8, lsl r5
   14f30:	andeq	r5, r1, r0, asr #2
   14f34:	andeq	r0, r0, r8, ror #2
   14f38:	push	{lr}		; (str lr, [sp, #-4]!)
   14f3c:	sub	sp, sp, #12
   14f40:	mvn	ip, #0
   14f44:	str	ip, [sp]
   14f48:	bl	14e8c <close_stdout@@Base+0x2578>
   14f4c:	add	sp, sp, #12
   14f50:	pop	{pc}		; (ldr pc, [sp], #4)
   14f54:	mov	ip, r1
   14f58:	mov	r3, r2
   14f5c:	mov	r1, r0
   14f60:	mov	r2, ip
   14f64:	mov	r0, #0
   14f68:	b	14f38 <close_stdout@@Base+0x2624>
   14f6c:	push	{lr}		; (str lr, [sp, #-4]!)
   14f70:	sub	sp, sp, #12
   14f74:	mov	lr, r1
   14f78:	mov	ip, r2
   14f7c:	mov	r1, r0
   14f80:	str	r3, [sp]
   14f84:	mov	r2, lr
   14f88:	mov	r3, ip
   14f8c:	mov	r0, #0
   14f90:	bl	14e8c <close_stdout@@Base+0x2578>
   14f94:	add	sp, sp, #12
   14f98:	pop	{pc}		; (ldr pc, [sp], #4)
   14f9c:	ldr	r3, [pc, #12]	; 14fb0 <close_stdout@@Base+0x269c>
   14fa0:	ldr	ip, [pc, #12]	; 14fb4 <close_stdout@@Base+0x26a0>
   14fa4:	add	r3, pc, r3
   14fa8:	ldr	r3, [r3, ip]
   14fac:	b	1473c <close_stdout@@Base+0x1e28>
   14fb0:	andeq	r5, r1, r4, asr r0
   14fb4:	andeq	r0, r0, r0, ror #2
   14fb8:	mov	r2, r1
   14fbc:	mov	r1, r0
   14fc0:	mov	r0, #0
   14fc4:	b	14f9c <close_stdout@@Base+0x2688>
   14fc8:	mvn	r2, #0
   14fcc:	b	14f9c <close_stdout@@Base+0x2688>
   14fd0:	mov	r1, r0
   14fd4:	mov	r0, #0
   14fd8:	b	14fc8 <close_stdout@@Base+0x26b4>
   14fdc:	push	{r3, r4, r5, lr}
   14fe0:	mov	r4, r1
   14fe4:	mov	r2, r4
   14fe8:	mov	r1, #0
   14fec:	mov	r5, r0
   14ff0:	bl	117b8 <memchr@plt>
   14ff4:	cmp	r0, #0
   14ff8:	rsbne	r0, r5, r0
   14ffc:	addne	r0, r0, #1
   15000:	moveq	r0, r4
   15004:	pop	{r3, r4, r5, pc}
   15008:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1500c:	sub	sp, sp, #84	; 0x54
   15010:	ldr	r5, [pc, #1396]	; 1558c <close_stdout@@Base+0x2c78>
   15014:	mov	sl, r1
   15018:	ldr	r3, [pc, #1392]	; 15590 <close_stdout@@Base+0x2c7c>
   1501c:	add	r5, pc, r5
   15020:	ldr	r3, [r5, r3]
   15024:	str	r3, [sp, #12]
   15028:	ldr	r3, [r3]
   1502c:	str	r3, [sp, #76]	; 0x4c
   15030:	bl	11764 <__strdup@plt>
   15034:	cmp	r0, #0
   15038:	str	r0, [sp]
   1503c:	beq	15568 <close_stdout@@Base+0x2c54>
   15040:	bl	11620 <__ctype_get_mb_cur_max@plt>
   15044:	cmp	r0, #1
   15048:	bls	152ec <close_stdout@@Base+0x29d8>
   1504c:	cmp	sl, #0
   15050:	bne	153ac <close_stdout@@Base+0x2a98>
   15054:	add	r4, sp, #24
   15058:	ldr	r0, [sp]
   1505c:	mov	fp, #0
   15060:	str	r0, [sp, #36]	; 0x24
   15064:	bl	11704 <strlen@plt>
   15068:	ldr	r1, [sp]
   1506c:	str	fp, [sp, #24]
   15070:	strb	fp, [sp, #20]
   15074:	str	fp, [r4, #4]
   15078:	strb	fp, [sp, #32]
   1507c:	add	r9, r1, r0
   15080:	str	r9, [sp, #16]
   15084:	cmp	r1, r9
   15088:	bcs	152bc <close_stdout@@Base+0x29a8>
   1508c:	add	r1, sp, #48	; 0x30
   15090:	str	r1, [sp, #4]
   15094:	ldrb	r1, [sp, #20]
   15098:	mov	r8, fp
   1509c:	ldr	r3, [sp]
   150a0:	mov	r7, #1
   150a4:	cmp	r1, #0
   150a8:	mov	ip, r3
   150ac:	bne	15150 <close_stdout@@Base+0x283c>
   150b0:	ldr	r2, [pc, #1244]	; 15594 <close_stdout@@Base+0x2c80>
   150b4:	ldrb	r3, [ip]
   150b8:	ldr	r1, [r5, r2]
   150bc:	and	r2, r3, #31
   150c0:	lsr	r3, r3, #5
   150c4:	ldr	r3, [r1, r3, lsl #2]
   150c8:	lsr	r3, r3, r2
   150cc:	tst	r3, #1
   150d0:	beq	15200 <close_stdout@@Base+0x28ec>
   150d4:	str	r7, [sp, #40]	; 0x28
   150d8:	mov	r6, #1
   150dc:	ldrb	r2, [ip]
   150e0:	ldr	r9, [sp, #16]
   150e4:	ldr	sl, [sp, #36]	; 0x24
   150e8:	strb	r7, [sp, #44]	; 0x2c
   150ec:	str	r2, [sp, #48]	; 0x30
   150f0:	cmp	fp, #0
   150f4:	strb	r7, [sp, #32]
   150f8:	beq	151d8 <close_stdout@@Base+0x28c4>
   150fc:	cmp	fp, #1
   15100:	beq	15218 <close_stdout@@Base+0x2904>
   15104:	cmp	fp, #2
   15108:	bne	151f8 <close_stdout@@Base+0x28e4>
   1510c:	ldrb	r2, [sp, #44]	; 0x2c
   15110:	cmp	r2, #0
   15114:	beq	151f8 <close_stdout@@Base+0x28e4>
   15118:	ldr	r0, [sp, #48]	; 0x30
   1511c:	bl	116f8 <iswspace@plt>
   15120:	cmp	r0, #0
   15124:	movne	fp, #2
   15128:	moveq	fp, #1
   1512c:	add	ip, sl, r6
   15130:	strb	r8, [sp, #32]
   15134:	cmp	ip, r9
   15138:	str	ip, [sp, #36]	; 0x24
   1513c:	mov	r1, #0
   15140:	bcs	152dc <close_stdout@@Base+0x29c8>
   15144:	ldrb	r1, [sp, #20]
   15148:	cmp	r1, #0
   1514c:	beq	150b0 <close_stdout@@Base+0x279c>
   15150:	ldr	r1, [sp, #36]	; 0x24
   15154:	add	r0, sp, #48	; 0x30
   15158:	mov	r3, r4
   1515c:	rsb	r2, r1, r9
   15160:	bl	11644 <mbrtowc@plt>
   15164:	cmn	r0, #1
   15168:	str	r0, [sp, #40]	; 0x28
   1516c:	beq	15248 <close_stdout@@Base+0x2934>
   15170:	cmn	r0, #2
   15174:	beq	15260 <close_stdout@@Base+0x294c>
   15178:	cmp	r0, #0
   1517c:	ldr	r6, [sp, #36]	; 0x24
   15180:	bne	151a0 <close_stdout@@Base+0x288c>
   15184:	str	r7, [sp, #40]	; 0x28
   15188:	ldrb	r3, [r6]
   1518c:	cmp	r3, #0
   15190:	bne	1556c <close_stdout@@Base+0x2c58>
   15194:	ldr	r3, [sp, #48]	; 0x30
   15198:	cmp	r3, #0
   1519c:	bne	15548 <close_stdout@@Base+0x2c34>
   151a0:	mov	r0, r4
   151a4:	strb	r7, [sp, #44]	; 0x2c
   151a8:	bl	11560 <mbsinit@plt>
   151ac:	strb	r7, [sp, #32]
   151b0:	cmp	r0, #0
   151b4:	strbne	r8, [sp, #20]
   151b8:	moveq	sl, r6
   151bc:	movne	sl, r6
   151c0:	ldreq	r9, [sp, #16]
   151c4:	ldreq	r6, [sp, #40]	; 0x28
   151c8:	ldrne	r9, [sp, #16]
   151cc:	ldrne	r6, [sp, #40]	; 0x28
   151d0:	cmp	fp, #0
   151d4:	bne	150fc <close_stdout@@Base+0x27e8>
   151d8:	ldrb	r2, [sp, #44]	; 0x2c
   151dc:	cmp	r2, #0
   151e0:	beq	151f8 <close_stdout@@Base+0x28e4>
   151e4:	ldr	r0, [sp, #48]	; 0x30
   151e8:	bl	116f8 <iswspace@plt>
   151ec:	rsbs	fp, r0, #1
   151f0:	movcc	fp, #0
   151f4:	b	1512c <close_stdout@@Base+0x2818>
   151f8:	mov	fp, #1
   151fc:	b	1512c <close_stdout@@Base+0x2818>
   15200:	mov	r0, r4
   15204:	bl	11560 <mbsinit@plt>
   15208:	cmp	r0, #0
   1520c:	beq	15524 <close_stdout@@Base+0x2c10>
   15210:	strb	r7, [sp, #20]
   15214:	b	15150 <close_stdout@@Base+0x283c>
   15218:	ldrb	r2, [sp, #44]	; 0x2c
   1521c:	cmp	r2, #0
   15220:	beq	1512c <close_stdout@@Base+0x2818>
   15224:	ldr	r0, [sp, #48]	; 0x30
   15228:	bl	116f8 <iswspace@plt>
   1522c:	ldr	r2, [sp, #8]
   15230:	cmp	r0, #0
   15234:	movne	r2, sl
   15238:	moveq	fp, #1
   1523c:	movne	fp, #2
   15240:	str	r2, [sp, #8]
   15244:	b	1512c <close_stdout@@Base+0x2818>
   15248:	str	r7, [sp, #40]	; 0x28
   1524c:	mov	r6, #1
   15250:	strb	r8, [sp, #44]	; 0x2c
   15254:	ldr	r9, [sp, #16]
   15258:	ldr	sl, [sp, #36]	; 0x24
   1525c:	b	150f0 <close_stdout@@Base+0x27dc>
   15260:	ldr	ip, [sp, #36]	; 0x24
   15264:	ldr	r9, [sp, #16]
   15268:	strb	r8, [sp, #44]	; 0x2c
   1526c:	rsb	r3, ip, r9
   15270:	mov	sl, ip
   15274:	str	r3, [sp, #40]	; 0x28
   15278:	mov	r6, r3
   1527c:	b	150f0 <close_stdout@@Base+0x27dc>
   15280:	ldr	fp, [sp, #36]	; 0x24
   15284:	mov	r2, #1
   15288:	mov	r3, #0
   1528c:	str	r2, [sp, #40]	; 0x28
   15290:	strb	r3, [sp, #44]	; 0x2c
   15294:	mov	r3, #1
   15298:	strb	r3, [sp, #32]
   1529c:	mov	r0, fp
   152a0:	bl	11704 <strlen@plt>
   152a4:	mov	r1, fp
   152a8:	add	r2, r0, #1
   152ac:	ldr	r0, [sp]
   152b0:	bl	11524 <memmove@plt>
   152b4:	cmp	sl, #1
   152b8:	bne	15058 <close_stdout@@Base+0x2744>
   152bc:	ldr	r1, [sp, #12]
   152c0:	ldr	r2, [sp, #76]	; 0x4c
   152c4:	ldr	r0, [sp]
   152c8:	ldr	r3, [r1]
   152cc:	cmp	r2, r3
   152d0:	bne	15544 <close_stdout@@Base+0x2c30>
   152d4:	add	sp, sp, #84	; 0x54
   152d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   152dc:	cmp	fp, #2
   152e0:	ldreq	r3, [sp, #8]
   152e4:	strbeq	r1, [r3]
   152e8:	b	152bc <close_stdout@@Base+0x29a8>
   152ec:	cmp	sl, #0
   152f0:	beq	15358 <close_stdout@@Base+0x2a44>
   152f4:	ldr	r2, [sp]
   152f8:	ldrb	r4, [r2]
   152fc:	cmp	r4, #0
   15300:	beq	15514 <close_stdout@@Base+0x2c00>
   15304:	bl	116e0 <__ctype_b_loc@plt>
   15308:	ldr	r3, [sp]
   1530c:	ldr	r1, [r0]
   15310:	b	15324 <close_stdout@@Base+0x2a10>
   15314:	ldrb	r4, [r3, #1]
   15318:	add	r3, r3, #1
   1531c:	cmp	r4, #0
   15320:	beq	1550c <close_stdout@@Base+0x2bf8>
   15324:	lsl	r4, r4, #1
   15328:	mov	r5, r3
   1532c:	ldrh	r2, [r1, r4]
   15330:	tst	r2, #8192	; 0x2000
   15334:	bne	15314 <close_stdout@@Base+0x2a00>
   15338:	mov	r0, r5
   1533c:	bl	11704 <strlen@plt>
   15340:	mov	r1, r5
   15344:	add	r2, r0, #1
   15348:	ldr	r0, [sp]
   1534c:	bl	11524 <memmove@plt>
   15350:	cmp	sl, #1
   15354:	beq	152bc <close_stdout@@Base+0x29a8>
   15358:	ldr	r0, [sp]
   1535c:	bl	11704 <strlen@plt>
   15360:	ldr	r1, [sp]
   15364:	sub	r0, r0, #1
   15368:	adds	r4, r1, r0
   1536c:	bcs	152bc <close_stdout@@Base+0x29a8>
   15370:	bl	116e0 <__ctype_b_loc@plt>
   15374:	mov	r3, r4
   15378:	mov	ip, #0
   1537c:	ldr	r4, [sp]
   15380:	b	15390 <close_stdout@@Base+0x2a7c>
   15384:	cmp	r4, r3
   15388:	strb	ip, [r3, #1]
   1538c:	bhi	152bc <close_stdout@@Base+0x29a8>
   15390:	ldrb	r2, [r3], #-1
   15394:	ldr	r1, [r0]
   15398:	lsl	r2, r2, #1
   1539c:	ldrh	r2, [r1, r2]
   153a0:	tst	r2, #8192	; 0x2000
   153a4:	bne	15384 <close_stdout@@Base+0x2a70>
   153a8:	b	152bc <close_stdout@@Base+0x29a8>
   153ac:	ldr	r0, [sp]
   153b0:	add	r4, sp, #24
   153b4:	mov	r8, #0
   153b8:	str	r0, [sp, #36]	; 0x24
   153bc:	bl	11704 <strlen@plt>
   153c0:	ldr	r3, [sp]
   153c4:	str	r8, [sp, #24]
   153c8:	strb	r8, [sp, #20]
   153cc:	str	r8, [r4, #4]
   153d0:	strb	r8, [sp, #32]
   153d4:	add	r2, r3, r0
   153d8:	str	r2, [sp, #16]
   153dc:	cmp	r3, r2
   153e0:	bcs	1551c <close_stdout@@Base+0x2c08>
   153e4:	mov	fp, r3
   153e8:	add	r9, sp, #48	; 0x30
   153ec:	mov	r7, #1
   153f0:	mov	r6, r2
   153f4:	b	15460 <close_stdout@@Base+0x2b4c>
   153f8:	ldr	r2, [pc, #404]	; 15594 <close_stdout@@Base+0x2c80>
   153fc:	ldrb	r3, [fp]
   15400:	ldr	r1, [r5, r2]
   15404:	and	r2, r3, #31
   15408:	lsr	r3, r3, #5
   1540c:	ldr	r3, [r1, r3, lsl #2]
   15410:	lsr	r3, r3, r2
   15414:	tst	r3, #1
   15418:	beq	154d4 <close_stdout@@Base+0x2bc0>
   1541c:	str	r7, [sp, #40]	; 0x28
   15420:	ldrb	r6, [fp]
   15424:	ldr	fp, [sp, #36]	; 0x24
   15428:	strb	r7, [sp, #44]	; 0x2c
   1542c:	str	r6, [sp, #48]	; 0x30
   15430:	mov	r0, r6
   15434:	strb	r7, [sp, #32]
   15438:	bl	116f8 <iswspace@plt>
   1543c:	cmp	r0, #0
   15440:	beq	1529c <close_stdout@@Base+0x2988>
   15444:	ldr	r3, [sp, #40]	; 0x28
   15448:	ldr	r6, [sp, #16]
   1544c:	add	fp, fp, r3
   15450:	strb	r8, [sp, #32]
   15454:	cmp	r6, fp
   15458:	str	fp, [sp, #36]	; 0x24
   1545c:	bls	1529c <close_stdout@@Base+0x2988>
   15460:	ldrb	r3, [sp, #20]
   15464:	cmp	r3, #0
   15468:	beq	153f8 <close_stdout@@Base+0x2ae4>
   1546c:	ldr	r1, [sp, #36]	; 0x24
   15470:	mov	r0, r9
   15474:	mov	r3, r4
   15478:	rsb	r2, r1, r6
   1547c:	bl	11644 <mbrtowc@plt>
   15480:	cmn	r0, #1
   15484:	str	r0, [sp, #40]	; 0x28
   15488:	beq	15280 <close_stdout@@Base+0x296c>
   1548c:	cmn	r0, #2
   15490:	ldr	fp, [sp, #36]	; 0x24
   15494:	beq	154f4 <close_stdout@@Base+0x2be0>
   15498:	cmp	r0, #0
   1549c:	bne	154ec <close_stdout@@Base+0x2bd8>
   154a0:	str	r7, [sp, #40]	; 0x28
   154a4:	ldrb	r3, [fp]
   154a8:	cmp	r3, #0
   154ac:	bne	1556c <close_stdout@@Base+0x2c58>
   154b0:	ldr	r6, [sp, #48]	; 0x30
   154b4:	cmp	r6, #0
   154b8:	bne	15548 <close_stdout@@Base+0x2c34>
   154bc:	mov	r0, r4
   154c0:	strb	r7, [sp, #44]	; 0x2c
   154c4:	bl	11560 <mbsinit@plt>
   154c8:	cmp	r0, #0
   154cc:	strbne	r8, [sp, #20]
   154d0:	b	15430 <close_stdout@@Base+0x2b1c>
   154d4:	mov	r0, r4
   154d8:	bl	11560 <mbsinit@plt>
   154dc:	cmp	r0, #0
   154e0:	beq	15524 <close_stdout@@Base+0x2c10>
   154e4:	strb	r7, [sp, #20]
   154e8:	b	1546c <close_stdout@@Base+0x2b58>
   154ec:	ldr	r6, [sp, #48]	; 0x30
   154f0:	b	154bc <close_stdout@@Base+0x2ba8>
   154f4:	ldr	r3, [sp, #16]
   154f8:	mov	r2, #0
   154fc:	strb	r2, [sp, #44]	; 0x2c
   15500:	rsb	r3, fp, r3
   15504:	str	r3, [sp, #40]	; 0x28
   15508:	b	15294 <close_stdout@@Base+0x2980>
   1550c:	mov	r5, r3
   15510:	b	15338 <close_stdout@@Base+0x2a24>
   15514:	ldr	r5, [sp]
   15518:	b	15338 <close_stdout@@Base+0x2a24>
   1551c:	ldr	fp, [sp]
   15520:	b	1529c <close_stdout@@Base+0x2988>
   15524:	ldr	r0, [pc, #108]	; 15598 <close_stdout@@Base+0x2c84>
   15528:	mov	r2, #142	; 0x8e
   1552c:	ldr	r1, [pc, #104]	; 1559c <close_stdout@@Base+0x2c88>
   15530:	ldr	r3, [pc, #104]	; 155a0 <close_stdout@@Base+0x2c8c>
   15534:	add	r0, pc, r0
   15538:	add	r1, pc, r1
   1553c:	add	r3, pc, r3
   15540:	bl	11890 <__assert_fail@plt>
   15544:	bl	11590 <__stack_chk_fail@plt>
   15548:	ldr	r0, [pc, #84]	; 155a4 <close_stdout@@Base+0x2c90>
   1554c:	mov	r2, #170	; 0xaa
   15550:	ldr	r1, [pc, #80]	; 155a8 <close_stdout@@Base+0x2c94>
   15554:	ldr	r3, [pc, #80]	; 155ac <close_stdout@@Base+0x2c98>
   15558:	add	r0, pc, r0
   1555c:	add	r1, pc, r1
   15560:	add	r3, pc, r3
   15564:	bl	11890 <__assert_fail@plt>
   15568:	bl	15d70 <close_stdout@@Base+0x345c>
   1556c:	ldr	r0, [pc, #60]	; 155b0 <close_stdout@@Base+0x2c9c>
   15570:	mov	r2, #169	; 0xa9
   15574:	ldr	r1, [pc, #56]	; 155b4 <close_stdout@@Base+0x2ca0>
   15578:	ldr	r3, [pc, #56]	; 155b8 <close_stdout@@Base+0x2ca4>
   1557c:	add	r0, pc, r0
   15580:	add	r1, pc, r1
   15584:	add	r3, pc, r3
   15588:	bl	11890 <__assert_fail@plt>
   1558c:	ldrdeq	r4, [r1], -ip
   15590:	andeq	r0, r0, r8, ror #2
   15594:	andeq	r0, r0, r4, ror #2
   15598:	andeq	r4, r0, r8, ror r1
   1559c:	andeq	r4, r0, r8, ror r2
   155a0:	andeq	r4, r0, r0, ror #4
   155a4:	muleq	r0, r4, r1
   155a8:	andeq	r4, r0, r4, asr r2
   155ac:	andeq	r4, r0, ip, lsr r2
   155b0:	andeq	r4, r0, r8, asr r1
   155b4:	andeq	r4, r0, r0, lsr r2
   155b8:	andeq	r4, r0, r8, lsl r2
   155bc:	push	{r4, r5, r6, r7, lr}
   155c0:	cmp	r1, #0
   155c4:	sub	sp, sp, #36	; 0x24
   155c8:	ldr	r7, [pc, #896]	; 15950 <close_stdout@@Base+0x303c>
   155cc:	mov	ip, r3
   155d0:	mov	r5, r0
   155d4:	add	r7, pc, r7
   155d8:	ldr	r4, [sp, #56]	; 0x38
   155dc:	ldr	r6, [sp, #60]	; 0x3c
   155e0:	beq	15924 <close_stdout@@Base+0x3010>
   155e4:	str	r2, [sp]
   155e8:	mov	r3, r1
   155ec:	ldr	r2, [pc, #864]	; 15954 <close_stdout@@Base+0x3040>
   155f0:	mov	r1, #1
   155f4:	str	ip, [sp, #4]
   155f8:	add	r2, pc, r2
   155fc:	bl	117ac <__fprintf_chk@plt>
   15600:	ldr	r1, [pc, #848]	; 15958 <close_stdout@@Base+0x3044>
   15604:	mov	r2, #5
   15608:	mov	r0, #0
   1560c:	add	r1, pc, r1
   15610:	bl	11584 <dcgettext@plt>
   15614:	ldr	r2, [pc, #832]	; 1595c <close_stdout@@Base+0x3048>
   15618:	movw	ip, #2013	; 0x7dd
   1561c:	mov	r1, #1
   15620:	ldr	r2, [r7, r2]
   15624:	str	ip, [sp]
   15628:	mov	r3, r0
   1562c:	mov	r0, r5
   15630:	bl	117ac <__fprintf_chk@plt>
   15634:	ldr	r1, [pc, #804]	; 15960 <close_stdout@@Base+0x304c>
   15638:	mov	r0, #0
   1563c:	mov	r2, #5
   15640:	add	r1, pc, r1
   15644:	bl	11584 <dcgettext@plt>
   15648:	mov	r1, r5
   1564c:	bl	114b8 <fputs_unlocked@plt>
   15650:	cmp	r6, #9
   15654:	addls	pc, pc, r6, lsl #2
   15658:	b	15940 <close_stdout@@Base+0x302c>
   1565c:	b	156f0 <close_stdout@@Base+0x2ddc>
   15660:	b	156f4 <close_stdout@@Base+0x2de0>
   15664:	b	15724 <close_stdout@@Base+0x2e10>
   15668:	b	15758 <close_stdout@@Base+0x2e44>
   1566c:	b	15794 <close_stdout@@Base+0x2e80>
   15670:	b	157d4 <close_stdout@@Base+0x2ec0>
   15674:	b	1581c <close_stdout@@Base+0x2f08>
   15678:	b	1586c <close_stdout@@Base+0x2f58>
   1567c:	b	158c4 <close_stdout@@Base+0x2fb0>
   15680:	b	15684 <close_stdout@@Base+0x2d70>
   15684:	ldr	r1, [pc, #728]	; 15964 <close_stdout@@Base+0x3050>
   15688:	mov	r0, #0
   1568c:	add	r1, pc, r1
   15690:	mov	r2, #5
   15694:	bl	11584 <dcgettext@plt>
   15698:	ldm	r4, {r3, ip}
   1569c:	mov	r1, #1
   156a0:	str	ip, [sp]
   156a4:	ldr	ip, [r4, #8]
   156a8:	str	ip, [sp, #4]
   156ac:	ldr	ip, [r4, #12]
   156b0:	str	ip, [sp, #8]
   156b4:	ldr	ip, [r4, #16]
   156b8:	str	ip, [sp, #12]
   156bc:	ldr	ip, [r4, #20]
   156c0:	str	ip, [sp, #16]
   156c4:	ldr	ip, [r4, #24]
   156c8:	str	ip, [sp, #20]
   156cc:	ldr	ip, [r4, #28]
   156d0:	str	ip, [sp, #24]
   156d4:	ldr	ip, [r4, #32]
   156d8:	str	ip, [sp, #28]
   156dc:	mov	r2, r0
   156e0:	mov	r0, r5
   156e4:	bl	117ac <__fprintf_chk@plt>
   156e8:	add	sp, sp, #36	; 0x24
   156ec:	pop	{r4, r5, r6, r7, pc}
   156f0:	bl	11878 <abort@plt>
   156f4:	ldr	r1, [pc, #620]	; 15968 <close_stdout@@Base+0x3054>
   156f8:	mov	r2, #5
   156fc:	mov	r0, #0
   15700:	add	r1, pc, r1
   15704:	bl	11584 <dcgettext@plt>
   15708:	ldr	r3, [r4]
   1570c:	mov	r1, #1
   15710:	mov	r2, r0
   15714:	mov	r0, r5
   15718:	add	sp, sp, #36	; 0x24
   1571c:	pop	{r4, r5, r6, r7, lr}
   15720:	b	117ac <__fprintf_chk@plt>
   15724:	ldr	r1, [pc, #576]	; 1596c <close_stdout@@Base+0x3058>
   15728:	mov	r2, #5
   1572c:	mov	r0, #0
   15730:	add	r1, pc, r1
   15734:	bl	11584 <dcgettext@plt>
   15738:	ldm	r4, {r3, ip}
   1573c:	mov	r1, #1
   15740:	str	ip, [sp, #56]	; 0x38
   15744:	mov	r2, r0
   15748:	mov	r0, r5
   1574c:	add	sp, sp, #36	; 0x24
   15750:	pop	{r4, r5, r6, r7, lr}
   15754:	b	117ac <__fprintf_chk@plt>
   15758:	ldr	r1, [pc, #528]	; 15970 <close_stdout@@Base+0x305c>
   1575c:	mov	r2, #5
   15760:	mov	r0, #0
   15764:	add	r1, pc, r1
   15768:	bl	11584 <dcgettext@plt>
   1576c:	ldm	r4, {r3, ip}
   15770:	mov	r1, #1
   15774:	str	ip, [sp, #56]	; 0x38
   15778:	ldr	ip, [r4, #8]
   1577c:	str	ip, [sp, #60]	; 0x3c
   15780:	mov	r2, r0
   15784:	mov	r0, r5
   15788:	add	sp, sp, #36	; 0x24
   1578c:	pop	{r4, r5, r6, r7, lr}
   15790:	b	117ac <__fprintf_chk@plt>
   15794:	ldr	r1, [pc, #472]	; 15974 <close_stdout@@Base+0x3060>
   15798:	mov	r2, #5
   1579c:	mov	r0, #0
   157a0:	add	r1, pc, r1
   157a4:	bl	11584 <dcgettext@plt>
   157a8:	ldm	r4, {r3, ip}
   157ac:	mov	r1, #1
   157b0:	str	ip, [sp]
   157b4:	ldr	ip, [r4, #8]
   157b8:	str	ip, [sp, #4]
   157bc:	ldr	ip, [r4, #12]
   157c0:	str	ip, [sp, #8]
   157c4:	mov	r2, r0
   157c8:	mov	r0, r5
   157cc:	bl	117ac <__fprintf_chk@plt>
   157d0:	b	156e8 <close_stdout@@Base+0x2dd4>
   157d4:	ldr	r1, [pc, #412]	; 15978 <close_stdout@@Base+0x3064>
   157d8:	mov	r2, #5
   157dc:	mov	r0, #0
   157e0:	add	r1, pc, r1
   157e4:	bl	11584 <dcgettext@plt>
   157e8:	ldm	r4, {r3, ip}
   157ec:	mov	r1, #1
   157f0:	str	ip, [sp]
   157f4:	ldr	ip, [r4, #8]
   157f8:	str	ip, [sp, #4]
   157fc:	ldr	ip, [r4, #12]
   15800:	str	ip, [sp, #8]
   15804:	ldr	ip, [r4, #16]
   15808:	str	ip, [sp, #12]
   1580c:	mov	r2, r0
   15810:	mov	r0, r5
   15814:	bl	117ac <__fprintf_chk@plt>
   15818:	b	156e8 <close_stdout@@Base+0x2dd4>
   1581c:	ldr	r1, [pc, #344]	; 1597c <close_stdout@@Base+0x3068>
   15820:	mov	r2, #5
   15824:	mov	r0, #0
   15828:	add	r1, pc, r1
   1582c:	bl	11584 <dcgettext@plt>
   15830:	ldm	r4, {r3, ip}
   15834:	mov	r1, #1
   15838:	str	ip, [sp]
   1583c:	ldr	ip, [r4, #8]
   15840:	str	ip, [sp, #4]
   15844:	ldr	ip, [r4, #12]
   15848:	str	ip, [sp, #8]
   1584c:	ldr	ip, [r4, #16]
   15850:	str	ip, [sp, #12]
   15854:	ldr	ip, [r4, #20]
   15858:	str	ip, [sp, #16]
   1585c:	mov	r2, r0
   15860:	mov	r0, r5
   15864:	bl	117ac <__fprintf_chk@plt>
   15868:	b	156e8 <close_stdout@@Base+0x2dd4>
   1586c:	ldr	r1, [pc, #268]	; 15980 <close_stdout@@Base+0x306c>
   15870:	mov	r2, #5
   15874:	mov	r0, #0
   15878:	add	r1, pc, r1
   1587c:	bl	11584 <dcgettext@plt>
   15880:	ldm	r4, {r3, ip}
   15884:	mov	r1, #1
   15888:	str	ip, [sp]
   1588c:	ldr	ip, [r4, #8]
   15890:	str	ip, [sp, #4]
   15894:	ldr	ip, [r4, #12]
   15898:	str	ip, [sp, #8]
   1589c:	ldr	ip, [r4, #16]
   158a0:	str	ip, [sp, #12]
   158a4:	ldr	ip, [r4, #20]
   158a8:	str	ip, [sp, #16]
   158ac:	ldr	ip, [r4, #24]
   158b0:	str	ip, [sp, #20]
   158b4:	mov	r2, r0
   158b8:	mov	r0, r5
   158bc:	bl	117ac <__fprintf_chk@plt>
   158c0:	b	156e8 <close_stdout@@Base+0x2dd4>
   158c4:	ldr	r1, [pc, #184]	; 15984 <close_stdout@@Base+0x3070>
   158c8:	mov	r2, #5
   158cc:	mov	r0, #0
   158d0:	add	r1, pc, r1
   158d4:	bl	11584 <dcgettext@plt>
   158d8:	ldm	r4, {r3, ip}
   158dc:	mov	r1, #1
   158e0:	str	ip, [sp]
   158e4:	ldr	ip, [r4, #8]
   158e8:	str	ip, [sp, #4]
   158ec:	ldr	ip, [r4, #12]
   158f0:	str	ip, [sp, #8]
   158f4:	ldr	ip, [r4, #16]
   158f8:	str	ip, [sp, #12]
   158fc:	ldr	ip, [r4, #20]
   15900:	str	ip, [sp, #16]
   15904:	ldr	ip, [r4, #24]
   15908:	str	ip, [sp, #20]
   1590c:	ldr	ip, [r4, #28]
   15910:	str	ip, [sp, #24]
   15914:	mov	r2, r0
   15918:	mov	r0, r5
   1591c:	bl	117ac <__fprintf_chk@plt>
   15920:	b	156e8 <close_stdout@@Base+0x2dd4>
   15924:	str	r3, [sp]
   15928:	mov	r3, r2
   1592c:	ldr	r2, [pc, #84]	; 15988 <close_stdout@@Base+0x3074>
   15930:	mov	r1, #1
   15934:	add	r2, pc, r2
   15938:	bl	117ac <__fprintf_chk@plt>
   1593c:	b	15600 <close_stdout@@Base+0x2cec>
   15940:	ldr	r1, [pc, #68]	; 1598c <close_stdout@@Base+0x3078>
   15944:	mov	r0, #0
   15948:	add	r1, pc, r1
   1594c:	b	15690 <close_stdout@@Base+0x2d7c>
   15950:	andeq	r4, r1, r4, lsr #20
   15954:	andeq	r4, r0, r8, asr #3
   15958:	andeq	r4, r0, r8, asr #3
   1595c:	muleq	r0, r4, r1
   15960:	muleq	r0, r8, r1
   15964:	andeq	r4, r0, r4, lsr #6
   15968:	andeq	r4, r0, r4, lsr #3
   1596c:	andeq	r4, r0, r4, lsl #3
   15970:	andeq	r4, r0, r8, ror #2
   15974:	andeq	r4, r0, r8, asr #2
   15978:	andeq	r4, r0, r8, lsr #2
   1597c:	andeq	r4, r0, r4, lsl #2
   15980:	ldrdeq	r4, [r0], -ip
   15984:	strheq	r4, [r0], -r0
   15988:	muleq	r0, r8, lr
   1598c:	muleq	r0, ip, r0
   15990:	push	{r4, r5, lr}
   15994:	sub	sp, sp, #12
   15998:	ldr	r5, [sp, #24]
   1599c:	ldr	ip, [r5]
   159a0:	cmp	ip, #0
   159a4:	beq	159c0 <close_stdout@@Base+0x30ac>
   159a8:	mov	lr, r5
   159ac:	mov	ip, #0
   159b0:	ldr	r4, [lr, #4]!
   159b4:	add	ip, ip, #1
   159b8:	cmp	r4, #0
   159bc:	bne	159b0 <close_stdout@@Base+0x309c>
   159c0:	stm	sp, {r5, ip}
   159c4:	bl	155bc <close_stdout@@Base+0x2ca8>
   159c8:	add	sp, sp, #12
   159cc:	pop	{r4, r5, pc}
   159d0:	push	{r4, r5, r6, r7, lr}
   159d4:	sub	sp, sp, #60	; 0x3c
   159d8:	ldr	r4, [pc, #100]	; 15a44 <close_stdout@@Base+0x3130>
   159dc:	mov	ip, #0
   159e0:	ldr	r5, [pc, #96]	; 15a48 <close_stdout@@Base+0x3134>
   159e4:	mov	lr, ip
   159e8:	add	r4, pc, r4
   159ec:	ldr	r6, [sp, #80]	; 0x50
   159f0:	ldr	r7, [r4, r5]
   159f4:	add	r5, sp, #12
   159f8:	ldr	r4, [r7]
   159fc:	str	r4, [sp, #52]	; 0x34
   15a00:	ldr	r4, [r6, ip]
   15a04:	cmp	r4, #0
   15a08:	str	r4, [r5, ip]
   15a0c:	beq	15a20 <close_stdout@@Base+0x310c>
   15a10:	add	lr, lr, #1
   15a14:	add	ip, ip, #4
   15a18:	cmp	lr, #10
   15a1c:	bne	15a00 <close_stdout@@Base+0x30ec>
   15a20:	stm	sp, {r5, lr}
   15a24:	bl	155bc <close_stdout@@Base+0x2ca8>
   15a28:	ldr	r2, [sp, #52]	; 0x34
   15a2c:	ldr	r3, [r7]
   15a30:	cmp	r2, r3
   15a34:	bne	15a40 <close_stdout@@Base+0x312c>
   15a38:	add	sp, sp, #60	; 0x3c
   15a3c:	pop	{r4, r5, r6, r7, pc}
   15a40:	bl	11590 <__stack_chk_fail@plt>
   15a44:	andeq	r4, r1, r0, lsl r6
   15a48:	andeq	r0, r0, r8, ror #2
   15a4c:	push	{r3}		; (str r3, [sp, #-4]!)
   15a50:	push	{r4, lr}
   15a54:	sub	sp, sp, #20
   15a58:	ldr	lr, [pc, #72]	; 15aa8 <close_stdout@@Base+0x3194>
   15a5c:	add	ip, sp, #32
   15a60:	ldr	r4, [pc, #68]	; 15aac <close_stdout@@Base+0x3198>
   15a64:	add	lr, pc, lr
   15a68:	ldr	r3, [sp, #28]
   15a6c:	ldr	r4, [lr, r4]
   15a70:	str	ip, [sp]
   15a74:	str	ip, [sp, #8]
   15a78:	ldr	ip, [r4]
   15a7c:	str	ip, [sp, #12]
   15a80:	bl	159d0 <close_stdout@@Base+0x30bc>
   15a84:	ldr	r2, [sp, #12]
   15a88:	ldr	r3, [r4]
   15a8c:	cmp	r2, r3
   15a90:	bne	15aa4 <close_stdout@@Base+0x3190>
   15a94:	add	sp, sp, #20
   15a98:	pop	{r4, lr}
   15a9c:	add	sp, sp, #4
   15aa0:	bx	lr
   15aa4:	bl	11590 <__stack_chk_fail@plt>
   15aa8:	muleq	r1, r4, r5
   15aac:	andeq	r0, r0, r8, ror #2
   15ab0:	ldr	r1, [pc, #132]	; 15b3c <close_stdout@@Base+0x3228>
   15ab4:	mov	r2, #5
   15ab8:	push	{r4, lr}
   15abc:	add	r1, pc, r1
   15ac0:	mov	r0, #0
   15ac4:	ldr	r4, [pc, #116]	; 15b40 <close_stdout@@Base+0x322c>
   15ac8:	bl	11584 <dcgettext@plt>
   15acc:	ldr	r2, [pc, #112]	; 15b44 <close_stdout@@Base+0x3230>
   15ad0:	add	r4, pc, r4
   15ad4:	add	r2, pc, r2
   15ad8:	mov	r1, r0
   15adc:	mov	r0, #1
   15ae0:	bl	11788 <__printf_chk@plt>
   15ae4:	ldr	r1, [pc, #92]	; 15b48 <close_stdout@@Base+0x3234>
   15ae8:	mov	r2, #5
   15aec:	mov	r0, #0
   15af0:	add	r1, pc, r1
   15af4:	bl	11584 <dcgettext@plt>
   15af8:	ldr	r2, [pc, #76]	; 15b4c <close_stdout@@Base+0x3238>
   15afc:	ldr	r3, [pc, #76]	; 15b50 <close_stdout@@Base+0x323c>
   15b00:	add	r2, pc, r2
   15b04:	add	r3, pc, r3
   15b08:	mov	r1, r0
   15b0c:	mov	r0, #1
   15b10:	bl	11788 <__printf_chk@plt>
   15b14:	ldr	r1, [pc, #56]	; 15b54 <close_stdout@@Base+0x3240>
   15b18:	mov	r0, #0
   15b1c:	mov	r2, #5
   15b20:	add	r1, pc, r1
   15b24:	bl	11584 <dcgettext@plt>
   15b28:	ldr	r3, [pc, #40]	; 15b58 <close_stdout@@Base+0x3244>
   15b2c:	ldr	r3, [r4, r3]
   15b30:	pop	{r4, lr}
   15b34:	ldr	r1, [r3]
   15b38:	b	114b8 <fputs_unlocked@plt>
   15b3c:	andeq	r3, r0, r4, ror #30
   15b40:	andeq	r4, r1, r8, lsr #10
   15b44:	andeq	r3, r0, r4, ror #30
   15b48:	andeq	r3, r0, r0, ror #30
   15b4c:	andeq	r3, r0, r4, ror #17
   15b50:	strdeq	r3, [r0], -r0
   15b54:	andeq	r3, r0, r4, asr #30
   15b58:	andeq	r0, r0, r4, lsl #3
   15b5c:	push	{r4, lr}
   15b60:	mov	r4, r0
   15b64:	bl	11680 <malloc@plt>
   15b68:	rsbs	r3, r0, #1
   15b6c:	movcc	r3, #0
   15b70:	cmp	r4, #0
   15b74:	moveq	r3, #0
   15b78:	cmp	r3, #0
   15b7c:	popeq	{r4, pc}
   15b80:	bl	15d70 <close_stdout@@Base+0x345c>
   15b84:	push	{r3, r4, r5, lr}
   15b88:	mov	r4, r0
   15b8c:	mvn	r0, #0
   15b90:	mov	r5, r1
   15b94:	bl	18a60 <close_stdout@@Base+0x614c>
   15b98:	cmp	r0, r4
   15b9c:	bcc	15bac <close_stdout@@Base+0x3298>
   15ba0:	mul	r0, r4, r5
   15ba4:	pop	{r3, r4, r5, lr}
   15ba8:	b	15b5c <close_stdout@@Base+0x3248>
   15bac:	bl	15d70 <close_stdout@@Base+0x345c>
   15bb0:	b	15b5c <close_stdout@@Base+0x3248>
   15bb4:	rsbs	r3, r1, #1
   15bb8:	push	{r4, lr}
   15bbc:	movcc	r3, #0
   15bc0:	cmp	r0, #0
   15bc4:	mov	r4, r1
   15bc8:	moveq	r3, #0
   15bcc:	cmp	r3, #0
   15bd0:	bne	15bf4 <close_stdout@@Base+0x32e0>
   15bd4:	bl	115a8 <realloc@plt>
   15bd8:	rsbs	r3, r0, #1
   15bdc:	movcc	r3, #0
   15be0:	cmp	r4, #0
   15be4:	moveq	r3, #0
   15be8:	cmp	r3, #0
   15bec:	popeq	{r4, pc}
   15bf0:	bl	15d70 <close_stdout@@Base+0x345c>
   15bf4:	bl	11530 <free@plt>
   15bf8:	mov	r0, #0
   15bfc:	pop	{r4, pc}
   15c00:	push	{r4, r5, r6, lr}
   15c04:	mov	r5, r1
   15c08:	mov	r6, r0
   15c0c:	mov	r1, r2
   15c10:	mvn	r0, #0
   15c14:	mov	r4, r2
   15c18:	bl	18a60 <close_stdout@@Base+0x614c>
   15c1c:	cmp	r0, r5
   15c20:	bcc	15c34 <close_stdout@@Base+0x3320>
   15c24:	mov	r0, r6
   15c28:	mul	r1, r5, r4
   15c2c:	pop	{r4, r5, r6, lr}
   15c30:	b	15bb4 <close_stdout@@Base+0x32a0>
   15c34:	bl	15d70 <close_stdout@@Base+0x345c>
   15c38:	push	{r3, r4, r5, r6, r7, lr}
   15c3c:	subs	r7, r0, #0
   15c40:	mov	r5, r1
   15c44:	mov	r6, r2
   15c48:	ldr	r4, [r1]
   15c4c:	beq	15c84 <close_stdout@@Base+0x3370>
   15c50:	movw	r0, #43690	; 0xaaaa
   15c54:	mov	r1, r2
   15c58:	bfi	r0, r0, #16, #16
   15c5c:	bl	18a60 <close_stdout@@Base+0x614c>
   15c60:	cmp	r4, r0
   15c64:	addcc	r3, r4, #1
   15c68:	addcc	r4, r4, r3, lsr #1
   15c6c:	bcs	15ca8 <close_stdout@@Base+0x3394>
   15c70:	str	r4, [r5]
   15c74:	mov	r0, r7
   15c78:	mul	r1, r6, r4
   15c7c:	pop	{r3, r4, r5, r6, r7, lr}
   15c80:	b	15bb4 <close_stdout@@Base+0x32a0>
   15c84:	cmp	r4, #0
   15c88:	bne	15c70 <close_stdout@@Base+0x335c>
   15c8c:	mov	r0, #64	; 0x40
   15c90:	mov	r1, r2
   15c94:	bl	18a60 <close_stdout@@Base+0x614c>
   15c98:	cmp	r0, #0
   15c9c:	movne	r4, r0
   15ca0:	addeq	r4, r0, #1
   15ca4:	b	15c70 <close_stdout@@Base+0x335c>
   15ca8:	bl	15d70 <close_stdout@@Base+0x345c>
   15cac:	cmp	r0, #0
   15cb0:	push	{r3, lr}
   15cb4:	ldr	r3, [r1]
   15cb8:	beq	15ce4 <close_stdout@@Base+0x33d0>
   15cbc:	movw	r2, #43689	; 0xaaa9
   15cc0:	movt	r2, #43690	; 0xaaaa
   15cc4:	cmp	r3, r2
   15cc8:	addls	r2, r3, #1
   15ccc:	addls	r3, r3, r2, lsr #1
   15cd0:	bhi	15cfc <close_stdout@@Base+0x33e8>
   15cd4:	str	r3, [r1]
   15cd8:	mov	r1, r3
   15cdc:	pop	{r3, lr}
   15ce0:	b	15bb4 <close_stdout@@Base+0x32a0>
   15ce4:	cmp	r3, #0
   15ce8:	moveq	r3, #64	; 0x40
   15cec:	str	r3, [r1]
   15cf0:	mov	r1, r3
   15cf4:	pop	{r3, lr}
   15cf8:	b	15bb4 <close_stdout@@Base+0x32a0>
   15cfc:	bl	15d70 <close_stdout@@Base+0x345c>
   15d00:	push	{r4, lr}
   15d04:	mov	r4, r0
   15d08:	bl	15b5c <close_stdout@@Base+0x3248>
   15d0c:	mov	r2, r4
   15d10:	mov	r1, #0
   15d14:	pop	{r4, lr}
   15d18:	b	11770 <memset@plt>
   15d1c:	push	{r3, lr}
   15d20:	bl	114ac <calloc@plt>
   15d24:	cmp	r0, #0
   15d28:	popne	{r3, pc}
   15d2c:	bl	15d70 <close_stdout@@Base+0x345c>
   15d30:	push	{r3, r4, r5, lr}
   15d34:	mov	r4, r1
   15d38:	mov	r5, r0
   15d3c:	mov	r0, r1
   15d40:	bl	15b5c <close_stdout@@Base+0x3248>
   15d44:	mov	r1, r5
   15d48:	mov	r2, r4
   15d4c:	pop	{r3, r4, r5, lr}
   15d50:	b	11548 <memcpy@plt>
   15d54:	push	{r4, lr}
   15d58:	mov	r4, r0
   15d5c:	bl	11704 <strlen@plt>
   15d60:	add	r1, r0, #1
   15d64:	mov	r0, r4
   15d68:	pop	{r4, lr}
   15d6c:	b	15d30 <close_stdout@@Base+0x341c>
   15d70:	ldr	r3, [pc, #64]	; 15db8 <close_stdout@@Base+0x34a4>
   15d74:	mov	r2, #5
   15d78:	ldr	ip, [pc, #60]	; 15dbc <close_stdout@@Base+0x34a8>
   15d7c:	mov	r0, #0
   15d80:	add	r3, pc, r3
   15d84:	ldr	r1, [pc, #52]	; 15dc0 <close_stdout@@Base+0x34ac>
   15d88:	push	{r4, lr}
   15d8c:	add	r1, pc, r1
   15d90:	ldr	r3, [r3, ip]
   15d94:	ldr	r4, [r3]
   15d98:	bl	11584 <dcgettext@plt>
   15d9c:	ldr	r2, [pc, #32]	; 15dc4 <close_stdout@@Base+0x34b0>
   15da0:	mov	r1, #0
   15da4:	add	r2, pc, r2
   15da8:	mov	r3, r0
   15dac:	mov	r0, r4
   15db0:	bl	11650 <error@plt>
   15db4:	bl	11878 <abort@plt>
   15db8:	andeq	r4, r1, r8, ror r2
   15dbc:	andeq	r0, r0, r8, lsl #3
   15dc0:	andeq	r3, r0, r8, asr #26
   15dc4:	andeq	r3, r0, ip, lsr #17
   15dc8:	push	{r4, lr}
   15dcc:	sub	sp, sp, #8
   15dd0:	ldr	ip, [sp, #16]
   15dd4:	str	ip, [sp]
   15dd8:	bl	17f14 <close_stdout@@Base+0x5600>
   15ddc:	subs	r4, r0, #0
   15de0:	blt	15df0 <close_stdout@@Base+0x34dc>
   15de4:	mov	r0, r4
   15de8:	add	sp, sp, #8
   15dec:	pop	{r4, pc}
   15df0:	bl	11734 <__errno_location@plt>
   15df4:	ldr	r3, [r0]
   15df8:	cmp	r3, #12
   15dfc:	bne	15de4 <close_stdout@@Base+0x34d0>
   15e00:	bl	15d70 <close_stdout@@Base+0x345c>
   15e04:	push	{r4, lr}
   15e08:	bl	18278 <close_stdout@@Base+0x5964>
   15e0c:	subs	r4, r0, #0
   15e10:	beq	15e1c <close_stdout@@Base+0x3508>
   15e14:	mov	r0, r4
   15e18:	pop	{r4, pc}
   15e1c:	bl	11734 <__errno_location@plt>
   15e20:	ldr	r3, [r0]
   15e24:	cmp	r3, #12
   15e28:	bne	15e14 <close_stdout@@Base+0x3500>
   15e2c:	bl	15d70 <close_stdout@@Base+0x345c>
   15e30:	push	{r4, lr}
   15e34:	bl	18494 <close_stdout@@Base+0x5b80>
   15e38:	subs	r4, r0, #0
   15e3c:	beq	15e48 <close_stdout@@Base+0x3534>
   15e40:	mov	r0, r4
   15e44:	pop	{r4, pc}
   15e48:	bl	11734 <__errno_location@plt>
   15e4c:	ldr	r3, [r0]
   15e50:	cmp	r3, #12
   15e54:	bne	15e40 <close_stdout@@Base+0x352c>
   15e58:	bl	15d70 <close_stdout@@Base+0x345c>
   15e5c:	ldr	ip, [pc, #192]	; 15f24 <close_stdout@@Base+0x3610>
   15e60:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15e64:	mov	r6, r0
   15e68:	ldr	r0, [pc, #184]	; 15f28 <close_stdout@@Base+0x3614>
   15e6c:	add	ip, pc, ip
   15e70:	mov	sl, r3
   15e74:	sub	sp, sp, #8
   15e78:	mov	r9, r2
   15e7c:	mov	r4, r1
   15e80:	ldr	r5, [ip, r0]
   15e84:	mov	r1, ip
   15e88:	mov	r8, #0
   15e8c:	ldr	r3, [r5]
   15e90:	str	r3, [sp, #4]
   15e94:	bl	11734 <__errno_location@plt>
   15e98:	mov	r1, sp
   15e9c:	mov	r7, r0
   15ea0:	mov	r0, r6
   15ea4:	str	r8, [r7]
   15ea8:	blx	sl
   15eac:	ldr	r3, [sp]
   15eb0:	cmp	r3, r6
   15eb4:	beq	15f04 <close_stdout@@Base+0x35f0>
   15eb8:	cmp	r4, r8
   15ebc:	beq	15f0c <close_stdout@@Base+0x35f8>
   15ec0:	vcmp.f64	d0, #0.0
   15ec4:	vmrs	APSR_nzcv, fpscr
   15ec8:	moveq	r0, #1
   15ecc:	bne	15ef4 <close_stdout@@Base+0x35e0>
   15ed0:	cmp	r4, #0
   15ed4:	strne	r3, [r4]
   15ed8:	ldr	r2, [sp, #4]
   15edc:	vstr	d0, [r9]
   15ee0:	ldr	r3, [r5]
   15ee4:	cmp	r2, r3
   15ee8:	bne	15f20 <close_stdout@@Base+0x360c>
   15eec:	add	sp, sp, #8
   15ef0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15ef4:	ldr	r0, [r7]
   15ef8:	subs	r0, r0, #34	; 0x22
   15efc:	movne	r0, #1
   15f00:	b	15ed0 <close_stdout@@Base+0x35bc>
   15f04:	mov	r0, r8
   15f08:	b	15ed0 <close_stdout@@Base+0x35bc>
   15f0c:	ldrb	r2, [r3]
   15f10:	cmp	r2, r8
   15f14:	movne	r0, r4
   15f18:	bne	15ed8 <close_stdout@@Base+0x35c4>
   15f1c:	b	15ec0 <close_stdout@@Base+0x35ac>
   15f20:	bl	11590 <__stack_chk_fail@plt>
   15f24:	andeq	r4, r1, ip, lsl #3
   15f28:	andeq	r0, r0, r8, ror #2
   15f2c:	ldr	r3, [pc, #416]	; 160d4 <close_stdout@@Base+0x37c0>
   15f30:	ldr	r2, [pc, #416]	; 160d8 <close_stdout@@Base+0x37c4>
   15f34:	add	r3, pc, r3
   15f38:	push	{r4, r5, r6, r7, r8, lr}
   15f3c:	mov	r8, r1
   15f40:	ldr	r7, [r3, r2]
   15f44:	sub	sp, sp, #8
   15f48:	ldrb	r1, [r0]
   15f4c:	mov	r6, r0
   15f50:	sub	r3, r1, #48	; 0x30
   15f54:	cmp	r3, #9
   15f58:	ldr	r3, [r7]
   15f5c:	str	r3, [sp, #4]
   15f60:	bls	15fcc <close_stdout@@Base+0x36b8>
   15f64:	ldr	r5, [pc, #368]	; 160dc <close_stdout@@Base+0x37c8>
   15f68:	mov	r4, #0
   15f6c:	add	r5, pc, r5
   15f70:	add	r5, r5, #4
   15f74:	b	15f88 <close_stdout@@Base+0x3674>
   15f78:	add	r4, r4, #1
   15f7c:	add	r5, r5, #12
   15f80:	cmp	r4, #35	; 0x23
   15f84:	beq	15ff8 <close_stdout@@Base+0x36e4>
   15f88:	mov	r0, r5
   15f8c:	mov	r1, r6
   15f90:	bl	114e8 <strcmp@plt>
   15f94:	cmp	r0, #0
   15f98:	bne	15f78 <close_stdout@@Base+0x3664>
   15f9c:	ldr	r3, [pc, #316]	; 160e0 <close_stdout@@Base+0x37cc>
   15fa0:	add	r4, r4, r4, lsl #1
   15fa4:	add	r3, pc, r3
   15fa8:	ldr	r3, [r3, r4, lsl #2]
   15fac:	asr	r0, r3, #31
   15fb0:	str	r3, [r8]
   15fb4:	ldr	r2, [sp, #4]
   15fb8:	ldr	r3, [r7]
   15fbc:	cmp	r2, r3
   15fc0:	bne	160d0 <close_stdout@@Base+0x37bc>
   15fc4:	add	sp, sp, #8
   15fc8:	pop	{r4, r5, r6, r7, r8, pc}
   15fcc:	mov	r1, sp
   15fd0:	mov	r2, #10
   15fd4:	bl	114f4 <strtol@plt>
   15fd8:	ldr	r3, [sp]
   15fdc:	ldrb	r3, [r3]
   15fe0:	cmp	r3, #0
   15fe4:	bne	160c4 <close_stdout@@Base+0x37b0>
   15fe8:	cmp	r0, #64	; 0x40
   15fec:	bgt	160c4 <close_stdout@@Base+0x37b0>
   15ff0:	mov	r3, r0
   15ff4:	b	15fac <close_stdout@@Base+0x3698>
   15ff8:	bl	11860 <__libc_current_sigrtmin@plt>
   15ffc:	mov	r5, r0
   16000:	bl	11710 <__libc_current_sigrtmax@plt>
   16004:	cmp	r5, #0
   16008:	mov	r4, r0
   1600c:	ble	1602c <close_stdout@@Base+0x3718>
   16010:	ldr	r1, [pc, #204]	; 160e4 <close_stdout@@Base+0x37d0>
   16014:	mov	r0, r6
   16018:	mov	r2, #5
   1601c:	add	r1, pc, r1
   16020:	bl	1186c <strncmp@plt>
   16024:	cmp	r0, #0
   16028:	beq	1608c <close_stdout@@Base+0x3778>
   1602c:	cmp	r4, #0
   16030:	ble	160c4 <close_stdout@@Base+0x37b0>
   16034:	ldr	r1, [pc, #172]	; 160e8 <close_stdout@@Base+0x37d4>
   16038:	mov	r0, r6
   1603c:	mov	r2, #5
   16040:	add	r1, pc, r1
   16044:	bl	1186c <strncmp@plt>
   16048:	cmp	r0, #0
   1604c:	bne	160c4 <close_stdout@@Base+0x37b0>
   16050:	add	r0, r6, #5
   16054:	mov	r1, sp
   16058:	mov	r2, #10
   1605c:	bl	114f4 <strtol@plt>
   16060:	ldr	r3, [sp]
   16064:	ldrb	r3, [r3]
   16068:	cmp	r3, #0
   1606c:	bne	160c4 <close_stdout@@Base+0x37b0>
   16070:	rsb	r5, r4, r5
   16074:	cmp	r0, r5
   16078:	blt	160c4 <close_stdout@@Base+0x37b0>
   1607c:	cmp	r0, #0
   16080:	bgt	160c4 <close_stdout@@Base+0x37b0>
   16084:	add	r3, r4, r0
   16088:	b	15fac <close_stdout@@Base+0x3698>
   1608c:	add	r0, r6, #5
   16090:	mov	r1, sp
   16094:	mov	r2, #10
   16098:	bl	114f4 <strtol@plt>
   1609c:	ldr	r3, [sp]
   160a0:	ldrb	r3, [r3]
   160a4:	cmp	r3, #0
   160a8:	bne	160c4 <close_stdout@@Base+0x37b0>
   160ac:	cmp	r0, #0
   160b0:	blt	160c4 <close_stdout@@Base+0x37b0>
   160b4:	rsb	r4, r5, r4
   160b8:	cmp	r0, r4
   160bc:	addle	r3, r5, r0
   160c0:	ble	15fac <close_stdout@@Base+0x3698>
   160c4:	mvn	r0, #0
   160c8:	str	r0, [r8]
   160cc:	b	15fb4 <close_stdout@@Base+0x36a0>
   160d0:	bl	11590 <__stack_chk_fail@plt>
   160d4:	andeq	r4, r1, r4, asr #1
   160d8:	andeq	r0, r0, r8, ror #2
   160dc:	andeq	r4, r1, r0, lsl #5
   160e0:	andeq	r4, r1, r8, asr #4
   160e4:	andeq	r3, r0, ip, asr #21
   160e8:			; <UNDEFINED> instruction: 0x00003ab0
   160ec:	push	{r4, r5, r6, lr}
   160f0:	mov	r3, #0
   160f4:	ldr	lr, [pc, #236]	; 161e8 <close_stdout@@Base+0x38d4>
   160f8:	sub	sp, sp, #8
   160fc:	mov	r4, r0
   16100:	mov	r5, r1
   16104:	add	lr, pc, lr
   16108:	mov	r2, r3
   1610c:	b	1611c <close_stdout@@Base+0x3808>
   16110:	add	r2, r2, #1
   16114:	cmp	r2, #35	; 0x23
   16118:	beq	1614c <close_stdout@@Base+0x3838>
   1611c:	ldr	ip, [r3, lr]
   16120:	add	r3, r3, #12
   16124:	cmp	ip, r4
   16128:	bne	16110 <close_stdout@@Base+0x37fc>
   1612c:	add	r2, r2, r2, lsl #1
   16130:	mov	r0, r5
   16134:	add	r1, lr, r2, lsl #2
   16138:	add	r1, r1, #4
   1613c:	bl	1162c <strcpy@plt>
   16140:	mov	r0, #0
   16144:	add	sp, sp, #8
   16148:	pop	{r4, r5, r6, pc}
   1614c:	bl	11860 <__libc_current_sigrtmin@plt>
   16150:	mov	r6, r0
   16154:	bl	11710 <__libc_current_sigrtmax@plt>
   16158:	cmp	r6, r4
   1615c:	cmple	r4, r0
   16160:	bgt	161e0 <close_stdout@@Base+0x38cc>
   16164:	rsb	r3, r6, r0
   16168:	add	r3, r3, r3, lsr #31
   1616c:	add	r3, r6, r3, asr #1
   16170:	cmp	r4, r3
   16174:	ble	161c4 <close_stdout@@Base+0x38b0>
   16178:	ldr	r3, [pc, #108]	; 161ec <close_stdout@@Base+0x38d8>
   1617c:	mov	r6, r0
   16180:	add	r3, pc, r3
   16184:	ldr	r0, [r3]
   16188:	ldrh	r3, [r3, #4]
   1618c:	str	r0, [r5]
   16190:	strh	r3, [r5, #4]
   16194:	subs	r0, r4, r6
   16198:	beq	16144 <close_stdout@@Base+0x3830>
   1619c:	ldr	r3, [pc, #76]	; 161f0 <close_stdout@@Base+0x38dc>
   161a0:	mov	r1, #1
   161a4:	str	r0, [sp]
   161a8:	mvn	r2, #0
   161ac:	add	r0, r5, #5
   161b0:	add	r3, pc, r3
   161b4:	bl	1174c <__sprintf_chk@plt>
   161b8:	mov	r0, #0
   161bc:	add	sp, sp, #8
   161c0:	pop	{r4, r5, r6, pc}
   161c4:	ldr	r3, [pc, #40]	; 161f4 <close_stdout@@Base+0x38e0>
   161c8:	add	r3, pc, r3
   161cc:	ldr	r0, [r3]
   161d0:	ldrh	r3, [r3, #4]
   161d4:	str	r0, [r5]
   161d8:	strh	r3, [r5, #4]
   161dc:	b	16194 <close_stdout@@Base+0x3880>
   161e0:	mvn	r0, #0
   161e4:	b	16144 <close_stdout@@Base+0x3830>
   161e8:	andeq	r4, r1, r8, ror #1
   161ec:	andeq	r3, r0, r0, ror r9
   161f0:	andeq	r3, r0, r8, asr #18
   161f4:	andeq	r3, r0, r0, lsr #18
   161f8:	cmp	r0, r1
   161fc:	push	{r4}		; (str r4, [sp, #-4]!)
   16200:	beq	1625c <close_stdout@@Base+0x3948>
   16204:	sub	r4, r0, #1
   16208:	sub	r1, r1, #1
   1620c:	b	16218 <close_stdout@@Base+0x3904>
   16210:	cmp	r2, ip
   16214:	bne	16250 <close_stdout@@Base+0x393c>
   16218:	ldrb	r3, [r4, #1]!
   1621c:	sub	r0, r3, #65	; 0x41
   16220:	add	r2, r3, #32
   16224:	cmp	r0, #25
   16228:	movhi	r2, r3
   1622c:	ldrb	r3, [r1, #1]!
   16230:	uxtb	r2, r2
   16234:	sub	r0, r3, #65	; 0x41
   16238:	add	ip, r3, #32
   1623c:	cmp	r0, #25
   16240:	movhi	ip, r3
   16244:	cmp	r2, #0
   16248:	uxtb	ip, ip
   1624c:	bne	16210 <close_stdout@@Base+0x38fc>
   16250:	rsb	r0, ip, r2
   16254:	pop	{r4}		; (ldr r4, [sp], #4)
   16258:	bx	lr
   1625c:	mov	r0, #0
   16260:	pop	{r4}		; (ldr r4, [sp], #4)
   16264:	bx	lr
   16268:	push	{r4, r5, r6, lr}
   1626c:	mov	r4, r0
   16270:	bl	11638 <__fpending@plt>
   16274:	mov	r6, r0
   16278:	mov	r0, r4
   1627c:	ldr	r4, [r4]
   16280:	bl	1857c <close_stdout@@Base+0x5c68>
   16284:	and	r4, r4, #32
   16288:	adds	r5, r0, #0
   1628c:	movne	r5, #1
   16290:	cmp	r4, #0
   16294:	bne	162b4 <close_stdout@@Base+0x39a0>
   16298:	cmp	r5, #0
   1629c:	beq	162ac <close_stdout@@Base+0x3998>
   162a0:	cmp	r6, #0
   162a4:	beq	162d0 <close_stdout@@Base+0x39bc>
   162a8:	mvn	r4, #0
   162ac:	mov	r0, r4
   162b0:	pop	{r4, r5, r6, pc}
   162b4:	cmp	r5, #0
   162b8:	bne	162a8 <close_stdout@@Base+0x3994>
   162bc:	bl	11734 <__errno_location@plt>
   162c0:	mvn	r4, #0
   162c4:	str	r5, [r0]
   162c8:	mov	r0, r4
   162cc:	pop	{r4, r5, r6, pc}
   162d0:	bl	11734 <__errno_location@plt>
   162d4:	ldr	r4, [r0]
   162d8:	subs	r4, r4, #9
   162dc:	mvnne	r4, #0
   162e0:	mov	r0, r4
   162e4:	pop	{r4, r5, r6, pc}
   162e8:	ldr	r3, [pc, #984]	; 166c8 <close_stdout@@Base+0x3db4>
   162ec:	mov	r0, #14
   162f0:	ldr	r2, [pc, #980]	; 166cc <close_stdout@@Base+0x3db8>
   162f4:	add	r3, pc, r3
   162f8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   162fc:	sub	sp, sp, #132	; 0x84
   16300:	ldr	r6, [r3, r2]
   16304:	ldr	r3, [r6]
   16308:	str	r3, [sp, #124]	; 0x7c
   1630c:	bl	11830 <nl_langinfo@plt>
   16310:	subs	r5, r0, #0
   16314:	beq	163c8 <close_stdout@@Base+0x3ab4>
   16318:	ldr	r3, [pc, #944]	; 166d0 <close_stdout@@Base+0x3dbc>
   1631c:	ldr	r4, [pc, r3]
   16320:	cmp	r4, #0
   16324:	beq	163d4 <close_stdout@@Base+0x3ac0>
   16328:	ldrb	r7, [r4]
   1632c:	cmp	r7, #0
   16330:	bne	16364 <close_stdout@@Base+0x3a50>
   16334:	b	1639c <close_stdout@@Base+0x3a88>
   16338:	mov	r0, r4
   1633c:	bl	11704 <strlen@plt>
   16340:	add	r0, r0, #1
   16344:	add	r7, r4, r0
   16348:	mov	r0, r7
   1634c:	bl	11704 <strlen@plt>
   16350:	add	r0, r0, #1
   16354:	add	r4, r7, r0
   16358:	ldrb	r7, [r7, r0]
   1635c:	cmp	r7, #0
   16360:	beq	1639c <close_stdout@@Base+0x3a88>
   16364:	mov	r0, r5
   16368:	mov	r1, r4
   1636c:	bl	114e8 <strcmp@plt>
   16370:	cmp	r0, #0
   16374:	beq	1638c <close_stdout@@Base+0x3a78>
   16378:	cmp	r7, #42	; 0x2a
   1637c:	bne	16338 <close_stdout@@Base+0x3a24>
   16380:	ldrb	r3, [r4, #1]
   16384:	cmp	r3, #0
   16388:	bne	16338 <close_stdout@@Base+0x3a24>
   1638c:	mov	r0, r4
   16390:	bl	11704 <strlen@plt>
   16394:	add	r0, r0, #1
   16398:	add	r5, r4, r0
   1639c:	ldrb	r3, [r5]
   163a0:	cmp	r3, #0
   163a4:	ldreq	r5, [pc, #808]	; 166d4 <close_stdout@@Base+0x3dc0>
   163a8:	addeq	r5, pc, r5
   163ac:	ldr	r2, [sp, #124]	; 0x7c
   163b0:	mov	r0, r5
   163b4:	ldr	r3, [r6]
   163b8:	cmp	r2, r3
   163bc:	bne	1669c <close_stdout@@Base+0x3d88>
   163c0:	add	sp, sp, #132	; 0x84
   163c4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   163c8:	ldr	r5, [pc, #776]	; 166d8 <close_stdout@@Base+0x3dc4>
   163cc:	add	r5, pc, r5
   163d0:	b	16318 <close_stdout@@Base+0x3a04>
   163d4:	ldr	r0, [pc, #768]	; 166dc <close_stdout@@Base+0x3dc8>
   163d8:	add	r0, pc, r0
   163dc:	bl	11674 <getenv@plt>
   163e0:	subs	r8, r0, #0
   163e4:	beq	16674 <close_stdout@@Base+0x3d60>
   163e8:	ldrb	r3, [r8]
   163ec:	cmp	r3, #0
   163f0:	beq	16608 <close_stdout@@Base+0x3cf4>
   163f4:	bl	11704 <strlen@plt>
   163f8:	subs	sl, r0, #0
   163fc:	subne	r3, sl, #1
   16400:	bne	16618 <close_stdout@@Base+0x3d04>
   16404:	mov	r9, #0
   16408:	mov	fp, r9
   1640c:	add	r9, sl, r9
   16410:	add	r0, r9, #14
   16414:	bl	11680 <malloc@plt>
   16418:	subs	r7, r0, #0
   1641c:	beq	16668 <close_stdout@@Base+0x3d54>
   16420:	mov	r1, r8
   16424:	mov	r2, sl
   16428:	bl	11548 <memcpy@plt>
   1642c:	cmp	fp, #0
   16430:	add	ip, r7, r9
   16434:	movne	r3, #47	; 0x2f
   16438:	strbne	r3, [r7, sl]
   1643c:	ldr	r3, [pc, #668]	; 166e0 <close_stdout@@Base+0x3dcc>
   16440:	add	r3, pc, r3
   16444:	ldm	r3!, {r0, r1, r2}
   16448:	ldrh	r3, [r3]
   1644c:	str	r0, [r7, r9]
   16450:	mov	r0, r7
   16454:	str	r1, [ip, #4]
   16458:	mov	r1, #32768	; 0x8000
   1645c:	strh	r3, [ip, #12]
   16460:	str	r2, [ip, #8]
   16464:	bl	11668 <open64@plt>
   16468:	subs	r8, r0, #0
   1646c:	blt	16630 <close_stdout@@Base+0x3d1c>
   16470:	ldr	r1, [pc, #620]	; 166e4 <close_stdout@@Base+0x3dd0>
   16474:	add	r1, pc, r1
   16478:	bl	114a0 <fdopen@plt>
   1647c:	subs	fp, r0, #0
   16480:	beq	16688 <close_stdout@@Base+0x3d74>
   16484:	ldr	r0, [pc, #604]	; 166e8 <close_stdout@@Base+0x3dd4>
   16488:	add	sl, sp, #20
   1648c:	add	r9, sp, #72	; 0x48
   16490:	mov	r8, #0
   16494:	add	r0, pc, r0
   16498:	str	r0, [sp, #12]
   1649c:	ldr	r3, [fp, #4]
   164a0:	ldr	r2, [fp, #8]
   164a4:	cmp	r3, r2
   164a8:	bcs	16594 <close_stdout@@Base+0x3c80>
   164ac:	add	r2, r3, #1
   164b0:	str	r2, [fp, #4]
   164b4:	ldrb	r0, [r3]
   164b8:	cmp	r0, #32
   164bc:	beq	1649c <close_stdout@@Base+0x3b88>
   164c0:	sub	r3, r0, #9
   164c4:	cmp	r3, #1
   164c8:	bls	1649c <close_stdout@@Base+0x3b88>
   164cc:	cmp	r0, #35	; 0x23
   164d0:	beq	165a8 <close_stdout@@Base+0x3c94>
   164d4:	mov	r1, fp
   164d8:	bl	11728 <ungetc@plt>
   164dc:	mov	r0, fp
   164e0:	ldr	r1, [sp, #12]
   164e4:	mov	r2, sl
   164e8:	mov	r3, r9
   164ec:	bl	1177c <fscanf@plt>
   164f0:	cmp	r0, #1
   164f4:	ble	165d8 <close_stdout@@Base+0x3cc4>
   164f8:	mov	r0, sl
   164fc:	bl	11704 <strlen@plt>
   16500:	str	r0, [sp, #8]
   16504:	mov	r0, r9
   16508:	bl	11704 <strlen@plt>
   1650c:	cmp	r8, #0
   16510:	mov	r2, r0
   16514:	bne	1663c <close_stdout@@Base+0x3d28>
   16518:	ldr	r3, [sp, #8]
   1651c:	str	r2, [sp]
   16520:	add	r8, r0, r3
   16524:	add	r0, r8, #3
   16528:	add	r8, r8, #2
   1652c:	bl	11680 <malloc@plt>
   16530:	ldr	r2, [sp]
   16534:	mov	r3, r0
   16538:	cmp	r3, #0
   1653c:	beq	166a0 <close_stdout@@Base+0x3d8c>
   16540:	ldr	r0, [sp, #8]
   16544:	movw	r1, #65534	; 0xfffe
   16548:	movt	r1, #65535	; 0xffff
   1654c:	rsb	r2, r2, r8
   16550:	rsb	r1, r0, r1
   16554:	stm	sp, {r2, r3}
   16558:	add	r0, r1, r2
   1655c:	mov	r1, sl
   16560:	add	r0, r3, r0
   16564:	mov	r4, r3
   16568:	bl	1162c <strcpy@plt>
   1656c:	ldr	r2, [sp]
   16570:	ldr	r3, [sp, #4]
   16574:	mov	r1, r9
   16578:	sub	r0, r2, #1
   1657c:	add	r0, r3, r0
   16580:	bl	1162c <strcpy@plt>
   16584:	ldr	r3, [fp, #4]
   16588:	ldr	r2, [fp, #8]
   1658c:	cmp	r3, r2
   16590:	bcc	164ac <close_stdout@@Base+0x3b98>
   16594:	mov	r0, fp
   16598:	bl	117f4 <__uflow@plt>
   1659c:	cmn	r0, #1
   165a0:	beq	165d8 <close_stdout@@Base+0x3cc4>
   165a4:	b	164b8 <close_stdout@@Base+0x3ba4>
   165a8:	ldr	r3, [fp, #4]
   165ac:	ldr	r2, [fp, #8]
   165b0:	cmp	r3, r2
   165b4:	bcs	166bc <close_stdout@@Base+0x3da8>
   165b8:	add	r2, r3, #1
   165bc:	str	r2, [fp, #4]
   165c0:	ldrb	r0, [r3]
   165c4:	cmp	r0, #10
   165c8:	cmnne	r0, #1
   165cc:	bne	165a8 <close_stdout@@Base+0x3c94>
   165d0:	cmn	r0, #1
   165d4:	bne	1649c <close_stdout@@Base+0x3b88>
   165d8:	mov	r0, fp
   165dc:	bl	1857c <close_stdout@@Base+0x5c68>
   165e0:	cmp	r8, #0
   165e4:	beq	16630 <close_stdout@@Base+0x3d1c>
   165e8:	mov	r3, #0
   165ec:	strb	r3, [r4, r8]
   165f0:	mov	r0, r7
   165f4:	bl	11530 <free@plt>
   165f8:	ldr	r3, [pc, #236]	; 166ec <close_stdout@@Base+0x3dd8>
   165fc:	add	r3, pc, r3
   16600:	str	r4, [r3]
   16604:	b	16328 <close_stdout@@Base+0x3a14>
   16608:	ldr	r8, [pc, #224]	; 166f0 <close_stdout@@Base+0x3ddc>
   1660c:	mov	r3, #7
   16610:	mov	sl, #8
   16614:	add	r8, pc, r8
   16618:	ldrb	r3, [r8, r3]
   1661c:	cmp	r3, #47	; 0x2f
   16620:	movne	r9, #1
   16624:	movne	fp, r9
   16628:	bne	1640c <close_stdout@@Base+0x3af8>
   1662c:	b	16404 <close_stdout@@Base+0x3af0>
   16630:	ldr	r4, [pc, #188]	; 166f4 <close_stdout@@Base+0x3de0>
   16634:	add	r4, pc, r4
   16638:	b	165f0 <close_stdout@@Base+0x3cdc>
   1663c:	ldr	r0, [sp, #8]
   16640:	str	r2, [sp]
   16644:	add	r3, r0, r2
   16648:	mov	r0, r4
   1664c:	add	r8, r3, r8
   16650:	add	r1, r8, #3
   16654:	add	r8, r8, #2
   16658:	bl	115a8 <realloc@plt>
   1665c:	ldr	r2, [sp]
   16660:	mov	r3, r0
   16664:	b	16538 <close_stdout@@Base+0x3c24>
   16668:	ldr	r4, [pc, #136]	; 166f8 <close_stdout@@Base+0x3de4>
   1666c:	add	r4, pc, r4
   16670:	b	165f8 <close_stdout@@Base+0x3ce4>
   16674:	ldr	r8, [pc, #128]	; 166fc <close_stdout@@Base+0x3de8>
   16678:	mov	r3, #7
   1667c:	mov	sl, #8
   16680:	add	r8, pc, r8
   16684:	b	16618 <close_stdout@@Base+0x3d04>
   16688:	ldr	r4, [pc, #112]	; 16700 <close_stdout@@Base+0x3dec>
   1668c:	mov	r0, r8
   16690:	add	r4, pc, r4
   16694:	bl	11884 <close@plt>
   16698:	b	165f0 <close_stdout@@Base+0x3cdc>
   1669c:	bl	11590 <__stack_chk_fail@plt>
   166a0:	mov	r0, r4
   166a4:	ldr	r4, [pc, #88]	; 16704 <close_stdout@@Base+0x3df0>
   166a8:	bl	11530 <free@plt>
   166ac:	mov	r0, fp
   166b0:	add	r4, pc, r4
   166b4:	bl	1857c <close_stdout@@Base+0x5c68>
   166b8:	b	165f0 <close_stdout@@Base+0x3cdc>
   166bc:	mov	r0, fp
   166c0:	bl	117f4 <__uflow@plt>
   166c4:	b	165c4 <close_stdout@@Base+0x3cb0>
   166c8:	andeq	r3, r1, r4, lsl #26
   166cc:	andeq	r0, r0, r8, ror #2
   166d0:	ldrdeq	r4, [r1], -r0
   166d4:	andeq	r3, r0, r0, ror #14
   166d8:	ldrdeq	r3, [r0], -ip
   166dc:	andeq	r3, r0, r8, lsr r7
   166e0:	andeq	r3, r0, r0, ror #13
   166e4:			; <UNDEFINED> instruction: 0x000036bc
   166e8:	andeq	r3, r0, r0, lsr #13
   166ec:	strdeq	r3, [r1], -r0
   166f0:	andeq	r3, r0, r8, ror #9
   166f4:	andeq	r2, r0, r4, ror lr
   166f8:	andeq	r2, r0, ip, lsr lr
   166fc:	andeq	r3, r0, ip, ror r4
   16700:	andeq	r2, r0, r8, lsl lr
   16704:	strdeq	r2, [r0], -r8
   16708:	push	{r4, lr}
   1670c:	mov	r4, r0
   16710:	bl	1150c <wcwidth@plt>
   16714:	cmp	r0, #0
   16718:	popge	{r4, pc}
   1671c:	mov	r0, r4
   16720:	bl	115cc <iswcntrl@plt>
   16724:	rsbs	r0, r0, #1
   16728:	movcc	r0, #0
   1672c:	pop	{r4, pc}
   16730:	push	{r3, r4, r5, lr}
   16734:	mov	r3, r1
   16738:	mov	r4, r1
   1673c:	ldr	r1, [r3], #16
   16740:	mov	r5, r0
   16744:	cmp	r1, r3
   16748:	strne	r1, [r0]
   1674c:	beq	16770 <close_stdout@@Base+0x3e5c>
   16750:	ldr	r3, [r4, #4]
   16754:	str	r3, [r5, #4]
   16758:	ldrb	r3, [r4, #8]
   1675c:	cmp	r3, #0
   16760:	strb	r3, [r5, #8]
   16764:	ldrne	r3, [r4, #12]
   16768:	strne	r3, [r5, #12]
   1676c:	pop	{r3, r4, r5, pc}
   16770:	add	r3, r0, #16
   16774:	ldr	r2, [r4, #4]
   16778:	mov	r0, r3
   1677c:	bl	11548 <memcpy@plt>
   16780:	str	r0, [r5]
   16784:	b	16750 <close_stdout@@Base+0x3e3c>
   16788:	ldr	r3, [pc, #32]	; 167b0 <close_stdout@@Base+0x3e9c>
   1678c:	lsr	r2, r0, #5
   16790:	ldr	r1, [pc, #28]	; 167b4 <close_stdout@@Base+0x3ea0>
   16794:	and	r0, r0, #31
   16798:	add	r3, pc, r3
   1679c:	ldr	r3, [r3, r1]
   167a0:	ldr	r3, [r3, r2, lsl #2]
   167a4:	lsr	r0, r3, r0
   167a8:	and	r0, r0, #1
   167ac:	bx	lr
   167b0:	andeq	r3, r1, r0, ror #16
   167b4:	andeq	r0, r0, r4, ror #2
   167b8:	ldr	ip, [pc, #380]	; 1693c <close_stdout@@Base+0x4028>
   167bc:	push	{r4, r5, r6, r7, r8, r9, fp, lr}
   167c0:	mov	r7, r2
   167c4:	add	fp, sp, #28
   167c8:	ldr	r2, [pc, #368]	; 16940 <close_stdout@@Base+0x402c>
   167cc:	sub	sp, sp, #8
   167d0:	add	ip, pc, ip
   167d4:	mov	r8, r3
   167d8:	mov	r3, ip
   167dc:	cmn	r7, #-1073741823	; 0xc0000001
   167e0:	ldr	r5, [ip, r2]
   167e4:	mov	r6, r0
   167e8:	mov	r4, r1
   167ec:	ldr	r3, [r5]
   167f0:	str	r3, [fp, #-32]	; 0xffffffe0
   167f4:	bls	16814 <close_stdout@@Base+0x3f00>
   167f8:	mov	r0, #0
   167fc:	ldr	r2, [fp, #-32]	; 0xffffffe0
   16800:	ldr	r3, [r5]
   16804:	cmp	r2, r3
   16808:	bne	16938 <close_stdout@@Base+0x4024>
   1680c:	sub	sp, fp, #28
   16810:	pop	{r4, r5, r6, r7, r8, r9, fp, pc}
   16814:	lsl	r0, r7, #2
   16818:	movw	r3, #4023	; 0xfb7
   1681c:	cmp	r0, r3
   16820:	bls	168ec <close_stdout@@Base+0x3fd8>
   16824:	bl	18724 <close_stdout@@Base+0x5e10>
   16828:	cmp	r0, #0
   1682c:	beq	167f8 <close_stdout@@Base+0x3ee4>
   16830:	cmp	r7, #2
   16834:	mov	r3, #1
   16838:	str	r3, [r0, #4]
   1683c:	movhi	r9, r4
   16840:	movhi	r2, r0
   16844:	movhi	ip, #0
   16848:	movhi	r3, #2
   1684c:	bls	16898 <close_stdout@@Base+0x3f84>
   16850:	ldrb	r1, [r9, #1]!
   16854:	ldrb	lr, [r4, ip]
   16858:	cmp	lr, r1
   1685c:	bne	16878 <close_stdout@@Base+0x3f64>
   16860:	b	16900 <close_stdout@@Base+0x3fec>
   16864:	ldr	lr, [r0, ip, lsl #2]
   16868:	rsb	ip, lr, ip
   1686c:	ldrb	lr, [r4, ip]
   16870:	cmp	lr, r1
   16874:	beq	16900 <close_stdout@@Base+0x3fec>
   16878:	cmp	ip, #0
   1687c:	bne	16864 <close_stdout@@Base+0x3f50>
   16880:	mov	ip, #0
   16884:	str	r3, [r2, #8]
   16888:	add	r3, r3, #1
   1688c:	add	r2, r2, #4
   16890:	cmp	r3, r7
   16894:	bne	16850 <close_stdout@@Base+0x3f3c>
   16898:	mov	r2, #0
   1689c:	str	r2, [r8]
   168a0:	ldrb	r3, [r6]
   168a4:	mov	ip, r6
   168a8:	cmp	r3, #0
   168ac:	beq	168e0 <close_stdout@@Base+0x3fcc>
   168b0:	ldrb	r1, [r4, r2]
   168b4:	cmp	r1, r3
   168b8:	beq	16910 <close_stdout@@Base+0x3ffc>
   168bc:	cmp	r2, #0
   168c0:	addeq	r6, r6, #1
   168c4:	ldrne	r1, [r0, r2, lsl #2]
   168c8:	ldrbeq	r3, [ip, #1]
   168cc:	addeq	ip, ip, #1
   168d0:	addne	r6, r6, r1
   168d4:	rsbne	r2, r1, r2
   168d8:	cmp	r3, #0
   168dc:	bne	168b0 <close_stdout@@Base+0x3f9c>
   168e0:	bl	1878c <close_stdout@@Base+0x5e78>
   168e4:	mov	r0, #1
   168e8:	b	167fc <close_stdout@@Base+0x3ee8>
   168ec:	add	r3, r0, #22
   168f0:	bic	r3, r3, #7
   168f4:	sub	sp, sp, r3
   168f8:	add	r0, sp, #8
   168fc:	b	16828 <close_stdout@@Base+0x3f14>
   16900:	add	ip, ip, #1
   16904:	rsb	r1, ip, r3
   16908:	str	r1, [r2, #8]
   1690c:	b	16888 <close_stdout@@Base+0x3f74>
   16910:	add	r2, r2, #1
   16914:	add	r1, ip, #1
   16918:	cmp	r7, r2
   1691c:	ldrbne	r3, [ip, #1]
   16920:	movne	ip, r1
   16924:	bne	168a8 <close_stdout@@Base+0x3f94>
   16928:	str	r6, [r8]
   1692c:	bl	1878c <close_stdout@@Base+0x5e78>
   16930:	mov	r0, #1
   16934:	b	167fc <close_stdout@@Base+0x3ee8>
   16938:	bl	11590 <__stack_chk_fail@plt>
   1693c:	andeq	r3, r1, r8, lsr #16
   16940:	andeq	r0, r0, r8, ror #2
   16944:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16948:	add	fp, sp, #32
   1694c:	ldr	r8, [pc, #2268]	; 17230 <close_stdout@@Base+0x491c>
   16950:	sub	sp, sp, #220	; 0xdc
   16954:	ldr	r3, [pc, #2264]	; 17234 <close_stdout@@Base+0x4920>
   16958:	add	r8, pc, r8
   1695c:	str	r0, [fp, #-232]	; 0xffffff18
   16960:	str	r2, [fp, #-248]	; 0xffffff08
   16964:	mov	r0, r1
   16968:	ldr	r3, [r8, r3]
   1696c:	mov	r4, r1
   16970:	str	r3, [fp, #-244]	; 0xffffff0c
   16974:	ldr	r3, [r3]
   16978:	str	r3, [fp, #-40]	; 0xffffffd8
   1697c:	bl	18814 <close_stdout@@Base+0x5f00>
   16980:	movw	r3, #29789	; 0x745d
   16984:	movt	r3, #1489	; 0x5d1
   16988:	cmp	r0, r3
   1698c:	str	r0, [fp, #-224]	; 0xffffff20
   16990:	bls	169b4 <close_stdout@@Base+0x40a0>
   16994:	mov	r0, #0
   16998:	ldr	r1, [fp, #-244]	; 0xffffff0c
   1699c:	ldr	r2, [fp, #-40]	; 0xffffffd8
   169a0:	ldr	r3, [r1]
   169a4:	cmp	r2, r3
   169a8:	bne	1720c <close_stdout@@Base+0x48f8>
   169ac:	sub	sp, fp, #32
   169b0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   169b4:	ldr	r1, [fp, #-224]	; 0xffffff20
   169b8:	mov	r0, #44	; 0x2c
   169bc:	movw	r3, #4023	; 0xfb7
   169c0:	mul	r0, r0, r1
   169c4:	cmp	r0, r3
   169c8:	bls	16d94 <close_stdout@@Base+0x4480>
   169cc:	bl	18724 <close_stdout@@Base+0x5e10>
   169d0:	str	r0, [fp, #-236]	; 0xffffff14
   169d4:	ldr	r3, [fp, #-236]	; 0xffffff14
   169d8:	cmp	r3, #0
   169dc:	beq	16994 <close_stdout@@Base+0x4080>
   169e0:	mov	r2, #0
   169e4:	ldr	r0, [fp, #-224]	; 0xffffff20
   169e8:	str	r2, [fp, #-200]	; 0xffffff38
   169ec:	mov	r5, r2
   169f0:	strb	r2, [fp, #-208]	; 0xffffff30
   169f4:	add	sl, r3, #16
   169f8:	str	r2, [fp, #-204]	; 0xffffff34
   169fc:	add	r9, r0, r0, lsl #2
   16a00:	strb	r2, [fp, #-196]	; 0xffffff3c
   16a04:	sub	ip, fp, #204	; 0xcc
   16a08:	ldrb	r2, [fp, #-208]	; 0xffffff30
   16a0c:	mov	r7, r4
   16a10:	add	r9, r3, r9, lsl #3
   16a14:	str	r4, [fp, #-192]	; 0xffffff40
   16a18:	cmp	r2, #0
   16a1c:	sub	r1, fp, #180	; 0xb4
   16a20:	str	r9, [fp, #-220]	; 0xffffff24
   16a24:	mov	r4, #1
   16a28:	mov	r9, sl
   16a2c:	str	r1, [fp, #-216]	; 0xffffff28
   16a30:	mov	sl, r7
   16a34:	sub	r6, fp, #176	; 0xb0
   16a38:	mov	r7, ip
   16a3c:	bne	16e10 <close_stdout@@Base+0x44fc>
   16a40:	ldr	r1, [pc, #2032]	; 17238 <close_stdout@@Base+0x4924>
   16a44:	ldrb	r2, [sl]
   16a48:	ldr	r0, [r8, r1]
   16a4c:	and	r1, r2, #31
   16a50:	lsr	r2, r2, #5
   16a54:	ldr	r2, [r0, r2, lsl #2]
   16a58:	lsr	r2, r2, r1
   16a5c:	tst	r2, #1
   16a60:	beq	16e74 <close_stdout@@Base+0x4560>
   16a64:	str	r4, [fp, #-188]	; 0xffffff44
   16a68:	ldrb	r3, [sl]
   16a6c:	strb	r4, [fp, #-184]	; 0xffffff48
   16a70:	mov	sl, r3
   16a74:	str	r3, [fp, #-180]	; 0xffffff4c
   16a78:	cmp	sl, #0
   16a7c:	strb	r4, [fp, #-196]	; 0xffffff3c
   16a80:	mov	r2, #1
   16a84:	bne	16dc0 <close_stdout@@Base+0x44ac>
   16a88:	ldr	r0, [fp, #-224]	; 0xffffff20
   16a8c:	ldr	r9, [fp, #-220]	; 0xffffff24
   16a90:	cmp	r0, #2
   16a94:	str	r2, [r9, #4]
   16a98:	bls	16b64 <close_stdout@@Base+0x4250>
   16a9c:	ldr	r7, [fp, #-236]	; 0xffffff14
   16aa0:	mov	r6, r9
   16aa4:	str	r8, [fp, #-216]	; 0xffffff28
   16aa8:	mov	r4, sl
   16aac:	mov	r8, r9
   16ab0:	mov	r5, #2
   16ab4:	mov	r9, r7
   16ab8:	ldrb	sl, [r7, #48]	; 0x30
   16abc:	b	16af8 <close_stdout@@Base+0x41e4>
   16ac0:	ldrb	r2, [r3, #8]
   16ac4:	cmp	r2, #0
   16ac8:	beq	16b08 <close_stdout@@Base+0x41f4>
   16acc:	ldr	r0, [r7, #52]	; 0x34
   16ad0:	ldr	r3, [r3, #12]
   16ad4:	subs	r1, r0, r3
   16ad8:	rsbs	r0, r1, #0
   16adc:	adcs	r0, r0, r1
   16ae0:	cmp	r0, #0
   16ae4:	bne	16b38 <close_stdout@@Base+0x4224>
   16ae8:	cmp	r4, #0
   16aec:	beq	1704c <close_stdout@@Base+0x4738>
   16af0:	ldr	r3, [r8, r4, lsl #2]
   16af4:	rsb	r4, r3, r4
   16af8:	add	r3, r4, r4, lsl #2
   16afc:	cmp	sl, #0
   16b00:	add	r3, r9, r3, lsl #3
   16b04:	bne	16ac0 <close_stdout@@Base+0x41ac>
   16b08:	ldr	r2, [r7, #44]	; 0x2c
   16b0c:	ldr	r1, [r3, #4]
   16b10:	cmp	r2, r1
   16b14:	movne	r0, #0
   16b18:	bne	16ae0 <close_stdout@@Base+0x41cc>
   16b1c:	ldr	r1, [r3]
   16b20:	ldr	r0, [r7, #40]	; 0x28
   16b24:	bl	11578 <memcmp@plt>
   16b28:	rsbs	r0, r0, #1
   16b2c:	movcc	r0, #0
   16b30:	cmp	r0, #0
   16b34:	beq	16ae8 <close_stdout@@Base+0x41d4>
   16b38:	add	r4, r4, #1
   16b3c:	rsb	r2, r4, r5
   16b40:	str	r2, [r6, #8]
   16b44:	ldr	r2, [fp, #-224]	; 0xffffff20
   16b48:	add	r5, r5, #1
   16b4c:	add	r7, r7, #40	; 0x28
   16b50:	add	r6, r6, #4
   16b54:	cmp	r5, r2
   16b58:	bne	16ab8 <close_stdout@@Base+0x41a4>
   16b5c:	mov	r9, r8
   16b60:	ldr	r8, [fp, #-216]	; 0xffffff28
   16b64:	ldr	r1, [fp, #-232]	; 0xffffff18
   16b68:	mov	r3, #0
   16b6c:	ldr	r2, [fp, #-248]	; 0xffffff08
   16b70:	sub	r7, fp, #148	; 0x94
   16b74:	mov	r4, r3
   16b78:	mov	r6, r3
   16b7c:	mov	r5, #1
   16b80:	sub	r0, fp, #92	; 0x5c
   16b84:	str	r1, [fp, #-136]	; 0xffffff78
   16b88:	str	r0, [fp, #-228]	; 0xffffff1c
   16b8c:	sub	r0, fp, #68	; 0x44
   16b90:	str	r1, [fp, #-80]	; 0xffffffb0
   16b94:	sub	r1, fp, #124	; 0x7c
   16b98:	str	r3, [fp, #-148]	; 0xffffff6c
   16b9c:	strb	r3, [fp, #-140]	; 0xffffff74
   16ba0:	str	r3, [fp, #-220]	; 0xffffff24
   16ba4:	str	r3, [r2]
   16ba8:	strb	r3, [fp, #-152]	; 0xffffff68
   16bac:	str	r0, [fp, #-232]	; 0xffffff18
   16bb0:	str	r1, [fp, #-216]	; 0xffffff28
   16bb4:	strb	r3, [fp, #-96]	; 0xffffffa0
   16bb8:	str	r3, [fp, #-92]	; 0xffffffa4
   16bbc:	strb	r3, [fp, #-84]	; 0xffffffac
   16bc0:	str	r3, [r7, #4]
   16bc4:	str	r3, [fp, #-88]	; 0xffffffa8
   16bc8:	str	r9, [fp, #-240]	; 0xffffff10
   16bcc:	cmp	r4, #0
   16bd0:	beq	16c40 <close_stdout@@Base+0x432c>
   16bd4:	ldrb	r4, [fp, #-72]	; 0xffffffb8
   16bd8:	cmp	r4, #0
   16bdc:	bne	16c94 <close_stdout@@Base+0x4380>
   16be0:	ldr	r2, [fp, #-220]	; 0xffffff24
   16be4:	ldr	r3, [fp, #-236]	; 0xffffff14
   16be8:	add	r1, r2, r2, lsl #2
   16bec:	add	r1, r3, r1, lsl #3
   16bf0:	ldr	r2, [r1, #4]
   16bf4:	ldr	r3, [fp, #-76]	; 0xffffffb4
   16bf8:	cmp	r2, r3
   16bfc:	movne	r0, #0
   16c00:	beq	17034 <close_stdout@@Base+0x4720>
   16c04:	mov	r3, r0
   16c08:	cmp	r3, #0
   16c0c:	ldr	r2, [fp, #-220]	; 0xffffff24
   16c10:	beq	16cd8 <close_stdout@@Base+0x43c4>
   16c14:	ldr	r0, [fp, #-224]	; 0xffffff20
   16c18:	add	r2, r2, #1
   16c1c:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16c20:	str	r2, [fp, #-220]	; 0xffffff24
   16c24:	cmp	r0, r2
   16c28:	ldr	r2, [fp, #-76]	; 0xffffffb4
   16c2c:	strb	r6, [fp, #-84]	; 0xffffffac
   16c30:	add	r3, r3, r2
   16c34:	str	r3, [fp, #-80]	; 0xffffffb0
   16c38:	beq	171bc <close_stdout@@Base+0x48a8>
   16c3c:	mov	r4, #0
   16c40:	ldrb	r3, [fp, #-96]	; 0xffffffa0
   16c44:	cmp	r3, #0
   16c48:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16c4c:	bne	16f54 <close_stdout@@Base+0x4640>
   16c50:	ldr	r1, [pc, #1504]	; 17238 <close_stdout@@Base+0x4924>
   16c54:	ldrb	r2, [r3]
   16c58:	ldr	r0, [r8, r1]
   16c5c:	and	r1, r2, #31
   16c60:	lsr	r2, r2, #5
   16c64:	ldr	r2, [r0, r2, lsl #2]
   16c68:	lsr	r2, r2, r1
   16c6c:	tst	r2, #1
   16c70:	beq	16f38 <close_stdout@@Base+0x4624>
   16c74:	str	r5, [fp, #-76]	; 0xffffffb4
   16c78:	mov	r4, #1
   16c7c:	ldrb	r3, [r3]
   16c80:	strb	r5, [fp, #-72]	; 0xffffffb8
   16c84:	str	r3, [fp, #-68]	; 0xffffffbc
   16c88:	cmp	r4, #0
   16c8c:	strb	r5, [fp, #-84]	; 0xffffffac
   16c90:	beq	16be0 <close_stdout@@Base+0x42cc>
   16c94:	ldr	r2, [fp, #-68]	; 0xffffffbc
   16c98:	cmp	r2, #0
   16c9c:	beq	171c8 <close_stdout@@Base+0x48b4>
   16ca0:	ldr	r3, [fp, #-220]	; 0xffffff24
   16ca4:	ldr	r0, [fp, #-236]	; 0xffffff14
   16ca8:	add	r1, r3, r3, lsl #2
   16cac:	add	r1, r0, r1, lsl #3
   16cb0:	ldrb	r3, [r1, #8]
   16cb4:	cmp	r3, #0
   16cb8:	beq	16bf0 <close_stdout@@Base+0x42dc>
   16cbc:	ldr	r3, [r1, #12]
   16cc0:	subs	r2, r2, r3
   16cc4:	rsbs	r3, r2, #0
   16cc8:	adcs	r3, r3, r2
   16ccc:	ldr	r2, [fp, #-220]	; 0xffffff24
   16cd0:	cmp	r3, #0
   16cd4:	bne	16c14 <close_stdout@@Base+0x4300>
   16cd8:	cmp	r2, #0
   16cdc:	beq	16fe4 <close_stdout@@Base+0x46d0>
   16ce0:	ldr	r3, [fp, #-240]	; 0xffffff10
   16ce4:	ldr	r4, [r3, r2, lsl #2]
   16ce8:	cmp	r4, #0
   16cec:	rsb	r2, r4, r2
   16cf0:	str	r2, [fp, #-220]	; 0xffffff24
   16cf4:	beq	1702c <close_stdout@@Base+0x4718>
   16cf8:	ldrb	sl, [fp, #-140]	; 0xffffff74
   16cfc:	cmp	sl, #0
   16d00:	beq	16d30 <close_stdout@@Base+0x441c>
   16d04:	ldrb	sl, [fp, #-128]	; 0xffffff80
   16d08:	cmp	sl, #0
   16d0c:	bne	16d84 <close_stdout@@Base+0x4470>
   16d10:	ldr	r2, [fp, #-136]	; 0xffffff78
   16d14:	subs	r4, r4, #1
   16d18:	ldr	r3, [fp, #-132]	; 0xffffff7c
   16d1c:	strb	r6, [fp, #-140]	; 0xffffff74
   16d20:	movne	sl, #0
   16d24:	add	r3, r2, r3
   16d28:	str	r3, [fp, #-136]	; 0xffffff78
   16d2c:	beq	1702c <close_stdout@@Base+0x4718>
   16d30:	ldrb	r3, [fp, #-152]	; 0xffffff68
   16d34:	ldr	r9, [fp, #-136]	; 0xffffff78
   16d38:	cmp	r3, #0
   16d3c:	bne	16ea0 <close_stdout@@Base+0x458c>
   16d40:	ldr	r1, [pc, #1264]	; 17238 <close_stdout@@Base+0x4924>
   16d44:	ldrb	r2, [r9]
   16d48:	ldr	r0, [r8, r1]
   16d4c:	and	r1, r2, #31
   16d50:	lsr	r2, r2, #5
   16d54:	ldr	r2, [r0, r2, lsl #2]
   16d58:	lsr	r2, r2, r1
   16d5c:	tst	r2, #1
   16d60:	beq	16e8c <close_stdout@@Base+0x4578>
   16d64:	str	r5, [fp, #-132]	; 0xffffff7c
   16d68:	mov	sl, #1
   16d6c:	ldrb	r3, [r9]
   16d70:	strb	r5, [fp, #-128]	; 0xffffff80
   16d74:	str	r3, [fp, #-124]	; 0xffffff84
   16d78:	cmp	sl, #0
   16d7c:	strb	r5, [fp, #-140]	; 0xffffff74
   16d80:	beq	16d10 <close_stdout@@Base+0x43fc>
   16d84:	ldr	r3, [fp, #-124]	; 0xffffff84
   16d88:	cmp	r3, #0
   16d8c:	bne	16d10 <close_stdout@@Base+0x43fc>
   16d90:	bl	11878 <abort@plt>
   16d94:	add	r3, r0, #22
   16d98:	bic	r3, r3, #7
   16d9c:	sub	sp, sp, r3
   16da0:	add	r2, sp, #8
   16da4:	str	r2, [fp, #-236]	; 0xffffff14
   16da8:	b	169d4 <close_stdout@@Base+0x40c0>
   16dac:	ldr	r0, [fp, #-192]	; 0xffffff40
   16db0:	bl	11704 <strlen@plt>
   16db4:	strb	r5, [fp, #-184]	; 0xffffff48
   16db8:	str	r0, [fp, #-188]	; 0xffffff44
   16dbc:	strb	r4, [fp, #-196]	; 0xffffff3c
   16dc0:	ldr	r3, [fp, #-192]	; 0xffffff40
   16dc4:	cmp	r3, r6
   16dc8:	strne	r3, [r9, #-16]
   16dcc:	beq	170f8 <close_stdout@@Base+0x47e4>
   16dd0:	ldr	r3, [fp, #-188]	; 0xffffff44
   16dd4:	add	r9, r9, #40	; 0x28
   16dd8:	str	r3, [r9, #-52]	; 0xffffffcc
   16ddc:	ldrb	r3, [fp, #-184]	; 0xffffff48
   16de0:	cmp	r3, #0
   16de4:	strb	r3, [r9, #-48]	; 0xffffffd0
   16de8:	ldrne	r3, [fp, #-180]	; 0xffffff4c
   16dec:	strne	r3, [r9, #-44]	; 0xffffffd4
   16df0:	ldr	sl, [fp, #-192]	; 0xffffff40
   16df4:	ldr	r2, [fp, #-188]	; 0xffffff44
   16df8:	strb	r5, [fp, #-196]	; 0xffffff3c
   16dfc:	add	sl, sl, r2
   16e00:	ldrb	r2, [fp, #-208]	; 0xffffff30
   16e04:	str	sl, [fp, #-192]	; 0xffffff40
   16e08:	cmp	r2, #0
   16e0c:	beq	16a40 <close_stdout@@Base+0x412c>
   16e10:	bl	11620 <__ctype_get_mb_cur_max@plt>
   16e14:	mov	r1, r0
   16e18:	mov	r0, sl
   16e1c:	bl	14fdc <close_stdout@@Base+0x26c8>
   16e20:	mov	r1, sl
   16e24:	mov	r3, r7
   16e28:	mov	r2, r0
   16e2c:	sub	r0, fp, #180	; 0xb4
   16e30:	bl	11644 <mbrtowc@plt>
   16e34:	cmn	r0, #1
   16e38:	str	r0, [fp, #-188]	; 0xffffff44
   16e3c:	strbeq	r5, [fp, #-184]	; 0xffffff48
   16e40:	streq	r4, [fp, #-188]	; 0xffffff44
   16e44:	beq	16dbc <close_stdout@@Base+0x44a8>
   16e48:	cmn	r0, #2
   16e4c:	beq	16dac <close_stdout@@Base+0x4498>
   16e50:	cmp	r0, #0
   16e54:	beq	17054 <close_stdout@@Base+0x4740>
   16e58:	ldr	sl, [fp, #-180]	; 0xffffff4c
   16e5c:	mov	r0, r7
   16e60:	strb	r4, [fp, #-184]	; 0xffffff48
   16e64:	bl	11560 <mbsinit@plt>
   16e68:	cmp	r0, #0
   16e6c:	strbne	r5, [fp, #-208]	; 0xffffff30
   16e70:	b	16a78 <close_stdout@@Base+0x4164>
   16e74:	mov	r0, r7
   16e78:	bl	11560 <mbsinit@plt>
   16e7c:	cmp	r0, #0
   16e80:	beq	171ec <close_stdout@@Base+0x48d8>
   16e84:	strb	r4, [fp, #-208]	; 0xffffff30
   16e88:	b	16e10 <close_stdout@@Base+0x44fc>
   16e8c:	mov	r0, r7
   16e90:	bl	11560 <mbsinit@plt>
   16e94:	cmp	r0, #0
   16e98:	beq	171ec <close_stdout@@Base+0x48d8>
   16e9c:	strb	r5, [fp, #-152]	; 0xffffff68
   16ea0:	bl	11620 <__ctype_get_mb_cur_max@plt>
   16ea4:	mov	r1, r0
   16ea8:	mov	r0, r9
   16eac:	bl	14fdc <close_stdout@@Base+0x26c8>
   16eb0:	mov	r1, r9
   16eb4:	mov	r3, r7
   16eb8:	mov	r2, r0
   16ebc:	sub	r0, fp, #124	; 0x7c
   16ec0:	bl	11644 <mbrtowc@plt>
   16ec4:	cmn	r0, #1
   16ec8:	str	r0, [fp, #-132]	; 0xffffff7c
   16ecc:	strbeq	r6, [fp, #-128]	; 0xffffff80
   16ed0:	streq	r5, [fp, #-132]	; 0xffffff7c
   16ed4:	beq	16d78 <close_stdout@@Base+0x4464>
   16ed8:	cmn	r0, #2
   16edc:	beq	16f24 <close_stdout@@Base+0x4610>
   16ee0:	cmp	r0, #0
   16ee4:	bne	16f08 <close_stdout@@Base+0x45f4>
   16ee8:	ldr	r3, [fp, #-136]	; 0xffffff78
   16eec:	str	r5, [fp, #-132]	; 0xffffff7c
   16ef0:	ldrb	r3, [r3]
   16ef4:	cmp	r3, #0
   16ef8:	bne	17210 <close_stdout@@Base+0x48fc>
   16efc:	ldr	r3, [fp, #-124]	; 0xffffff84
   16f00:	cmp	r3, #0
   16f04:	bne	17074 <close_stdout@@Base+0x4760>
   16f08:	mov	r0, r7
   16f0c:	strb	r5, [fp, #-128]	; 0xffffff80
   16f10:	bl	11560 <mbsinit@plt>
   16f14:	mov	sl, #1
   16f18:	cmp	r0, #0
   16f1c:	strbne	r6, [fp, #-152]	; 0xffffff68
   16f20:	b	16d78 <close_stdout@@Base+0x4464>
   16f24:	ldr	r0, [fp, #-136]	; 0xffffff78
   16f28:	bl	11704 <strlen@plt>
   16f2c:	strb	r6, [fp, #-128]	; 0xffffff80
   16f30:	str	r0, [fp, #-132]	; 0xffffff7c
   16f34:	b	16d78 <close_stdout@@Base+0x4464>
   16f38:	sub	r0, fp, #92	; 0x5c
   16f3c:	str	r3, [fp, #-252]	; 0xffffff04
   16f40:	bl	11560 <mbsinit@plt>
   16f44:	ldr	r3, [fp, #-252]	; 0xffffff04
   16f48:	cmp	r0, #0
   16f4c:	beq	171ec <close_stdout@@Base+0x48d8>
   16f50:	strb	r5, [fp, #-96]	; 0xffffffa0
   16f54:	str	r3, [fp, #-252]	; 0xffffff04
   16f58:	bl	11620 <__ctype_get_mb_cur_max@plt>
   16f5c:	ldr	r3, [fp, #-252]	; 0xffffff04
   16f60:	mov	r1, r0
   16f64:	mov	r0, r3
   16f68:	bl	14fdc <close_stdout@@Base+0x26c8>
   16f6c:	ldr	r3, [fp, #-252]	; 0xffffff04
   16f70:	mov	r1, r3
   16f74:	sub	r3, fp, #92	; 0x5c
   16f78:	mov	r2, r0
   16f7c:	sub	r0, fp, #68	; 0x44
   16f80:	bl	11644 <mbrtowc@plt>
   16f84:	cmn	r0, #1
   16f88:	str	r0, [fp, #-76]	; 0xffffffb4
   16f8c:	strbeq	r6, [fp, #-72]	; 0xffffffb8
   16f90:	streq	r5, [fp, #-76]	; 0xffffffb4
   16f94:	beq	16c88 <close_stdout@@Base+0x4374>
   16f98:	cmn	r0, #2
   16f9c:	beq	171a8 <close_stdout@@Base+0x4894>
   16fa0:	cmp	r0, #0
   16fa4:	bne	16fc8 <close_stdout@@Base+0x46b4>
   16fa8:	ldr	r3, [fp, #-80]	; 0xffffffb0
   16fac:	str	r5, [fp, #-76]	; 0xffffffb4
   16fb0:	ldrb	r3, [r3]
   16fb4:	cmp	r3, #0
   16fb8:	bne	17210 <close_stdout@@Base+0x48fc>
   16fbc:	ldr	r3, [fp, #-68]	; 0xffffffbc
   16fc0:	cmp	r3, #0
   16fc4:	bne	17074 <close_stdout@@Base+0x4760>
   16fc8:	sub	r0, fp, #92	; 0x5c
   16fcc:	strb	r5, [fp, #-72]	; 0xffffffb8
   16fd0:	bl	11560 <mbsinit@plt>
   16fd4:	mov	r4, #1
   16fd8:	cmp	r0, #0
   16fdc:	strbne	r6, [fp, #-96]	; 0xffffffa0
   16fe0:	b	16c88 <close_stdout@@Base+0x4374>
   16fe4:	ldrb	r4, [fp, #-140]	; 0xffffff74
   16fe8:	cmp	r4, #0
   16fec:	beq	17094 <close_stdout@@Base+0x4780>
   16ff0:	ldrb	r4, [fp, #-128]	; 0xffffff80
   16ff4:	cmp	r4, #0
   16ff8:	bne	170e8 <close_stdout@@Base+0x47d4>
   16ffc:	ldr	r1, [fp, #-136]	; 0xffffff78
   17000:	mov	r4, #0
   17004:	ldr	r2, [fp, #-132]	; 0xffffff7c
   17008:	ldr	r3, [fp, #-80]	; 0xffffffb0
   1700c:	add	r2, r1, r2
   17010:	str	r2, [fp, #-136]	; 0xffffff78
   17014:	ldr	r2, [fp, #-76]	; 0xffffffb4
   17018:	strb	r6, [fp, #-140]	; 0xffffff74
   1701c:	add	r3, r3, r2
   17020:	strb	r6, [fp, #-84]	; 0xffffffac
   17024:	str	r3, [fp, #-80]	; 0xffffffb0
   17028:	b	16c40 <close_stdout@@Base+0x432c>
   1702c:	ldrb	r4, [fp, #-84]	; 0xffffffac
   17030:	b	16bcc <close_stdout@@Base+0x42b8>
   17034:	ldr	r0, [r1]
   17038:	ldr	r1, [fp, #-80]	; 0xffffffb0
   1703c:	bl	11578 <memcmp@plt>
   17040:	rsbs	r0, r0, #1
   17044:	movcc	r0, #0
   17048:	b	16c04 <close_stdout@@Base+0x42f0>
   1704c:	str	r5, [r6, #8]
   17050:	b	16b44 <close_stdout@@Base+0x4230>
   17054:	ldr	r3, [fp, #-192]	; 0xffffff40
   17058:	str	r4, [fp, #-188]	; 0xffffff44
   1705c:	ldrb	r3, [r3]
   17060:	cmp	r3, #0
   17064:	bne	17210 <close_stdout@@Base+0x48fc>
   17068:	ldr	sl, [fp, #-180]	; 0xffffff4c
   1706c:	cmp	sl, #0
   17070:	beq	16e5c <close_stdout@@Base+0x4548>
   17074:	ldr	r0, [pc, #448]	; 1723c <close_stdout@@Base+0x4928>
   17078:	mov	r2, #179	; 0xb3
   1707c:	ldr	r1, [pc, #444]	; 17240 <close_stdout@@Base+0x492c>
   17080:	ldr	r3, [pc, #444]	; 17244 <close_stdout@@Base+0x4930>
   17084:	add	r0, pc, r0
   17088:	add	r1, pc, r1
   1708c:	add	r3, pc, r3
   17090:	bl	11890 <__assert_fail@plt>
   17094:	ldrb	r3, [fp, #-152]	; 0xffffff68
   17098:	ldr	sl, [fp, #-136]	; 0xffffff78
   1709c:	cmp	r3, #0
   170a0:	bne	17124 <close_stdout@@Base+0x4810>
   170a4:	ldr	r1, [pc, #396]	; 17238 <close_stdout@@Base+0x4924>
   170a8:	ldrb	r2, [sl]
   170ac:	ldr	r0, [r8, r1]
   170b0:	and	r1, r2, #31
   170b4:	lsr	r2, r2, #5
   170b8:	ldr	r2, [r0, r2, lsl #2]
   170bc:	lsr	r2, r2, r1
   170c0:	tst	r2, #1
   170c4:	beq	17110 <close_stdout@@Base+0x47fc>
   170c8:	str	r5, [fp, #-132]	; 0xffffff7c
   170cc:	mov	r4, #1
   170d0:	ldrb	r3, [sl]
   170d4:	strb	r5, [fp, #-128]	; 0xffffff80
   170d8:	str	r3, [fp, #-124]	; 0xffffff84
   170dc:	cmp	r4, #0
   170e0:	strb	r5, [fp, #-140]	; 0xffffff74
   170e4:	beq	16ffc <close_stdout@@Base+0x46e8>
   170e8:	ldr	r3, [fp, #-124]	; 0xffffff84
   170ec:	cmp	r3, #0
   170f0:	bne	16ffc <close_stdout@@Base+0x46e8>
   170f4:	b	16d90 <close_stdout@@Base+0x447c>
   170f8:	mov	r0, r9
   170fc:	mov	r1, r6
   17100:	ldr	r2, [fp, #-188]	; 0xffffff44
   17104:	bl	11548 <memcpy@plt>
   17108:	str	r9, [r9, #-16]
   1710c:	b	16dd0 <close_stdout@@Base+0x44bc>
   17110:	mov	r0, r7
   17114:	bl	11560 <mbsinit@plt>
   17118:	cmp	r0, #0
   1711c:	beq	171ec <close_stdout@@Base+0x48d8>
   17120:	strb	r5, [fp, #-152]	; 0xffffff68
   17124:	bl	11620 <__ctype_get_mb_cur_max@plt>
   17128:	mov	r1, r0
   1712c:	mov	r0, sl
   17130:	bl	14fdc <close_stdout@@Base+0x26c8>
   17134:	mov	r1, sl
   17138:	mov	r3, r7
   1713c:	mov	r2, r0
   17140:	sub	r0, fp, #124	; 0x7c
   17144:	bl	11644 <mbrtowc@plt>
   17148:	cmn	r0, #1
   1714c:	str	r0, [fp, #-132]	; 0xffffff7c
   17150:	strbeq	r6, [fp, #-128]	; 0xffffff80
   17154:	streq	r5, [fp, #-132]	; 0xffffff7c
   17158:	beq	170dc <close_stdout@@Base+0x47c8>
   1715c:	cmn	r0, #2
   17160:	beq	171d8 <close_stdout@@Base+0x48c4>
   17164:	cmp	r0, #0
   17168:	bne	1718c <close_stdout@@Base+0x4878>
   1716c:	ldr	r3, [fp, #-136]	; 0xffffff78
   17170:	str	r5, [fp, #-132]	; 0xffffff7c
   17174:	ldrb	r3, [r3]
   17178:	cmp	r3, #0
   1717c:	bne	17210 <close_stdout@@Base+0x48fc>
   17180:	ldr	r3, [fp, #-124]	; 0xffffff84
   17184:	cmp	r3, #0
   17188:	bne	17074 <close_stdout@@Base+0x4760>
   1718c:	mov	r0, r7
   17190:	strb	r5, [fp, #-128]	; 0xffffff80
   17194:	bl	11560 <mbsinit@plt>
   17198:	mov	r4, #1
   1719c:	cmp	r0, #0
   171a0:	strbne	r6, [fp, #-152]	; 0xffffff68
   171a4:	b	170dc <close_stdout@@Base+0x47c8>
   171a8:	ldr	r0, [fp, #-80]	; 0xffffffb0
   171ac:	bl	11704 <strlen@plt>
   171b0:	strb	r6, [fp, #-72]	; 0xffffffb8
   171b4:	str	r0, [fp, #-76]	; 0xffffffb4
   171b8:	b	16c88 <close_stdout@@Base+0x4374>
   171bc:	ldr	r3, [fp, #-136]	; 0xffffff78
   171c0:	ldr	r1, [fp, #-248]	; 0xffffff08
   171c4:	str	r3, [r1]
   171c8:	ldr	r0, [fp, #-236]	; 0xffffff14
   171cc:	bl	1878c <close_stdout@@Base+0x5e78>
   171d0:	mov	r0, #1
   171d4:	b	16998 <close_stdout@@Base+0x4084>
   171d8:	ldr	r0, [fp, #-136]	; 0xffffff78
   171dc:	bl	11704 <strlen@plt>
   171e0:	strb	r6, [fp, #-128]	; 0xffffff80
   171e4:	str	r0, [fp, #-132]	; 0xffffff7c
   171e8:	b	170dc <close_stdout@@Base+0x47c8>
   171ec:	ldr	r0, [pc, #84]	; 17248 <close_stdout@@Base+0x4934>
   171f0:	mov	r2, #150	; 0x96
   171f4:	ldr	r1, [pc, #80]	; 1724c <close_stdout@@Base+0x4938>
   171f8:	ldr	r3, [pc, #80]	; 17250 <close_stdout@@Base+0x493c>
   171fc:	add	r0, pc, r0
   17200:	add	r1, pc, r1
   17204:	add	r3, pc, r3
   17208:	bl	11890 <__assert_fail@plt>
   1720c:	bl	11590 <__stack_chk_fail@plt>
   17210:	ldr	r0, [pc, #60]	; 17254 <close_stdout@@Base+0x4940>
   17214:	mov	r2, #178	; 0xb2
   17218:	ldr	r1, [pc, #56]	; 17258 <close_stdout@@Base+0x4944>
   1721c:	ldr	r3, [pc, #56]	; 1725c <close_stdout@@Base+0x4948>
   17220:	add	r0, pc, r0
   17224:	add	r1, pc, r1
   17228:	add	r3, pc, r3
   1722c:	bl	11890 <__assert_fail@plt>
   17230:	andeq	r3, r1, r0, lsr #13
   17234:	andeq	r0, r0, r8, ror #2
   17238:	andeq	r0, r0, r4, ror #2
   1723c:	andeq	r2, r0, r8, ror #12
   17240:	andeq	r2, r0, ip, lsr r6
   17244:	ldrdeq	r2, [r0], -r4
   17248:			; <UNDEFINED> instruction: 0x000024b0
   1724c:	andeq	r2, r0, r4, asr #9
   17250:	andeq	r2, r0, ip, asr r9
   17254:			; <UNDEFINED> instruction: 0x000024b4
   17258:	andeq	r2, r0, r0, lsr #9
   1725c:	andeq	r2, r0, r8, lsr r9
   17260:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17264:	sub	sp, sp, #348	; 0x15c
   17268:	ldr	r4, [pc, #3188]	; 17ee4 <close_stdout@@Base+0x55d0>
   1726c:	ldr	r3, [pc, #3188]	; 17ee8 <close_stdout@@Base+0x55d4>
   17270:	add	r4, pc, r4
   17274:	str	r0, [sp, #16]
   17278:	str	r1, [sp, #4]
   1727c:	ldr	r3, [r4, r3]
   17280:	str	r3, [sp, #20]
   17284:	ldr	r3, [r3]
   17288:	str	r3, [sp, #340]	; 0x154
   1728c:	bl	11620 <__ctype_get_mb_cur_max@plt>
   17290:	cmp	r0, #1
   17294:	bls	17478 <close_stdout@@Base+0x4b64>
   17298:	ldr	r0, [sp, #4]
   1729c:	add	r5, sp, #64	; 0x40
   172a0:	ldr	ip, [pc, #3140]	; 17eec <close_stdout@@Base+0x55d8>
   172a4:	mov	r2, #0
   172a8:	str	r2, [r5, #4]
   172ac:	ldrb	r1, [r0]
   172b0:	str	r0, [sp, #76]	; 0x4c
   172b4:	strb	r2, [sp, #60]	; 0x3c
   172b8:	and	r3, r1, #31
   172bc:	str	r2, [sp, #64]	; 0x40
   172c0:	lsr	r0, r1, #5
   172c4:	strb	r2, [sp, #72]	; 0x48
   172c8:	ldr	r6, [r4, ip]
   172cc:	ldr	r2, [r6, r0, lsl #2]
   172d0:	lsr	r3, r2, r3
   172d4:	ands	r4, r3, #1
   172d8:	beq	173c8 <close_stdout@@Base+0x4ab4>
   172dc:	mov	r4, r1
   172e0:	cmp	r4, #0
   172e4:	mov	r3, #1
   172e8:	str	r1, [sp, #88]	; 0x58
   172ec:	str	r3, [sp, #80]	; 0x50
   172f0:	strb	r3, [sp, #84]	; 0x54
   172f4:	mov	r3, #1
   172f8:	strb	r3, [sp, #72]	; 0x48
   172fc:	beq	17458 <close_stdout@@Base+0x4b44>
   17300:	add	r2, sp, #120	; 0x78
   17304:	add	r0, sp, #176	; 0xb0
   17308:	str	r2, [sp, #8]
   1730c:	mov	r3, #0
   17310:	ldr	r2, [sp, #4]
   17314:	mov	r9, r3
   17318:	str	r0, [sp, #44]	; 0x2c
   1731c:	mov	r5, r3
   17320:	ldr	r0, [sp, #16]
   17324:	mov	r4, #1
   17328:	mov	r1, #1
   1732c:	str	r2, [sp, #132]	; 0x84
   17330:	str	r1, [sp, #32]
   17334:	add	r2, sp, #200	; 0xc8
   17338:	str	r0, [sp, #188]	; 0xbc
   1733c:	mov	r8, r0
   17340:	add	r1, sp, #144	; 0x90
   17344:	add	r0, sp, #56	; 0x38
   17348:	str	r3, [sp, #28]
   1734c:	strb	r3, [sp, #116]	; 0x74
   17350:	str	r3, [sp, #12]
   17354:	str	r3, [sp, #120]	; 0x78
   17358:	strb	r3, [sp, #128]	; 0x80
   1735c:	strb	r3, [sp, #172]	; 0xac
   17360:	str	r3, [sp, #176]	; 0xb0
   17364:	str	r2, [sp, #48]	; 0x30
   17368:	strb	r3, [sp, #184]	; 0xb8
   1736c:	str	r0, [sp, #52]	; 0x34
   17370:	str	r3, [sp, #124]	; 0x7c
   17374:	str	r1, [sp, #24]
   17378:	str	r3, [sp, #180]	; 0xb4
   1737c:	ldrb	r3, [sp, #172]	; 0xac
   17380:	cmp	r3, #0
   17384:	bne	175e0 <close_stdout@@Base+0x4ccc>
   17388:	ldrb	r3, [r8]
   1738c:	and	r2, r3, #31
   17390:	lsr	r3, r3, #5
   17394:	ldr	r3, [r6, r3, lsl #2]
   17398:	lsr	r3, r3, r2
   1739c:	tst	r3, #1
   173a0:	beq	175cc <close_stdout@@Base+0x4cb8>
   173a4:	str	r4, [sp, #192]	; 0xc0
   173a8:	ldrb	r7, [r8]
   173ac:	strb	r4, [sp, #196]	; 0xc4
   173b0:	cmp	r7, #0
   173b4:	strb	r4, [sp, #184]	; 0xb8
   173b8:	str	r7, [sp, #200]	; 0xc8
   173bc:	bne	1764c <close_stdout@@Base+0x4d38>
   173c0:	mov	r0, r7
   173c4:	b	1745c <close_stdout@@Base+0x4b48>
   173c8:	mov	r0, r5
   173cc:	bl	11560 <mbsinit@plt>
   173d0:	cmp	r0, #0
   173d4:	beq	17ea0 <close_stdout@@Base+0x558c>
   173d8:	mov	r7, #1
   173dc:	strb	r7, [sp, #60]	; 0x3c
   173e0:	bl	11620 <__ctype_get_mb_cur_max@plt>
   173e4:	mov	r1, r0
   173e8:	ldr	r0, [sp, #4]
   173ec:	bl	14fdc <close_stdout@@Base+0x26c8>
   173f0:	ldr	r1, [sp, #4]
   173f4:	mov	r3, r5
   173f8:	mov	r2, r0
   173fc:	add	r0, sp, #88	; 0x58
   17400:	bl	11644 <mbrtowc@plt>
   17404:	cmn	r0, #1
   17408:	str	r0, [sp, #80]	; 0x50
   1740c:	strbeq	r4, [sp, #84]	; 0x54
   17410:	streq	r7, [sp, #80]	; 0x50
   17414:	beq	17664 <close_stdout@@Base+0x4d50>
   17418:	cmn	r0, #2
   1741c:	beq	17654 <close_stdout@@Base+0x4d40>
   17420:	cmp	r0, #0
   17424:	beq	17ddc <close_stdout@@Base+0x54c8>
   17428:	ldr	r4, [sp, #88]	; 0x58
   1742c:	mov	r0, r5
   17430:	mov	r3, #1
   17434:	strb	r3, [sp, #84]	; 0x54
   17438:	bl	11560 <mbsinit@plt>
   1743c:	cmp	r0, #0
   17440:	movne	r3, #0
   17444:	strbne	r3, [sp, #60]	; 0x3c
   17448:	cmp	r4, #0
   1744c:	mov	r3, #1
   17450:	strb	r3, [sp, #72]	; 0x48
   17454:	bne	17300 <close_stdout@@Base+0x49ec>
   17458:	ldr	r0, [sp, #16]
   1745c:	ldr	r1, [sp, #20]
   17460:	ldr	r2, [sp, #340]	; 0x154
   17464:	ldr	r3, [r1]
   17468:	cmp	r2, r3
   1746c:	bne	17ec0 <close_stdout@@Base+0x55ac>
   17470:	add	sp, sp, #348	; 0x15c
   17474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17478:	ldr	r2, [sp, #4]
   1747c:	ldrb	r8, [r2]
   17480:	cmp	r8, #0
   17484:	beq	17458 <close_stdout@@Base+0x4b44>
   17488:	ldr	r3, [sp, #16]
   1748c:	ldrb	sl, [r3]
   17490:	cmp	sl, #0
   17494:	beq	17954 <close_stdout@@Base+0x5040>
   17498:	cmp	sl, r8
   1749c:	mov	r4, #0
   174a0:	mov	r5, r4
   174a4:	mov	r9, r4
   174a8:	add	r0, sp, #56	; 0x38
   174ac:	add	r7, r3, #1
   174b0:	mov	r6, r3
   174b4:	mov	fp, r2
   174b8:	mov	r1, #1
   174bc:	str	r0, [sp, #8]
   174c0:	add	r4, r4, #1
   174c4:	beq	17568 <close_stdout@@Base+0x4c54>
   174c8:	ldrb	sl, [r6, #1]
   174cc:	cmp	sl, #0
   174d0:	beq	17954 <close_stdout@@Base+0x5040>
   174d4:	add	r5, r5, #1
   174d8:	cmp	r4, #9
   174dc:	movls	r3, #0
   174e0:	andhi	r3, r1, #1
   174e4:	cmp	r3, #0
   174e8:	beq	17554 <close_stdout@@Base+0x4c40>
   174ec:	add	r3, r4, r4, lsl #2
   174f0:	cmp	r5, r3
   174f4:	bcc	17550 <close_stdout@@Base+0x4c3c>
   174f8:	cmp	fp, #0
   174fc:	beq	1751c <close_stdout@@Base+0x4c08>
   17500:	rsb	r1, r9, r5
   17504:	mov	r0, fp
   17508:	bl	117d0 <strnlen@plt>
   1750c:	mov	r9, r5
   17510:	ldrb	r3, [fp, r0]!
   17514:	cmp	r3, #0
   17518:	bne	17550 <close_stdout@@Base+0x4c3c>
   1751c:	ldr	r0, [sp, #4]
   17520:	bl	11704 <strlen@plt>
   17524:	ldr	r1, [sp, #4]
   17528:	add	r3, sp, #56	; 0x38
   1752c:	mov	r2, r0
   17530:	mov	r0, r7
   17534:	bl	167b8 <close_stdout@@Base+0x3ea4>
   17538:	cmp	r0, #0
   1753c:	bne	17e98 <close_stdout@@Base+0x5584>
   17540:	mov	fp, r0
   17544:	ldrb	sl, [r6, #1]
   17548:	mov	r1, r0
   1754c:	b	17554 <close_stdout@@Base+0x4c40>
   17550:	mov	r1, #1
   17554:	cmp	sl, r8
   17558:	add	r7, r7, #1
   1755c:	add	r6, r6, #1
   17560:	add	r4, r4, #1
   17564:	bne	174c8 <close_stdout@@Base+0x4bb4>
   17568:	ldr	r2, [sp, #4]
   1756c:	ldrb	r3, [r2, #1]
   17570:	cmp	r3, #0
   17574:	beq	175c4 <close_stdout@@Base+0x4cb0>
   17578:	ldrb	sl, [r6, #1]
   1757c:	cmp	sl, #0
   17580:	beq	17954 <close_stdout@@Base+0x5040>
   17584:	cmp	r3, sl
   17588:	add	r3, r5, #2
   1758c:	bne	179f0 <close_stdout@@Base+0x50dc>
   17590:	rsb	r0, r5, #0
   17594:	add	r5, r2, r0
   17598:	add	r0, r6, r0
   1759c:	b	175b8 <close_stdout@@Base+0x4ca4>
   175a0:	ldrb	ip, [r0, r3]
   175a4:	cmp	ip, #0
   175a8:	beq	17954 <close_stdout@@Base+0x5040>
   175ac:	cmp	r2, ip
   175b0:	add	r3, r3, #1
   175b4:	bne	179f0 <close_stdout@@Base+0x50dc>
   175b8:	ldrb	r2, [r5, r3]
   175bc:	cmp	r2, #0
   175c0:	bne	175a0 <close_stdout@@Base+0x4c8c>
   175c4:	mov	r0, r6
   175c8:	b	1745c <close_stdout@@Base+0x4b48>
   175cc:	add	r0, sp, #176	; 0xb0
   175d0:	bl	11560 <mbsinit@plt>
   175d4:	cmp	r0, #0
   175d8:	beq	17ea0 <close_stdout@@Base+0x558c>
   175dc:	strb	r4, [sp, #172]	; 0xac
   175e0:	bl	11620 <__ctype_get_mb_cur_max@plt>
   175e4:	mov	r1, r0
   175e8:	mov	r0, r8
   175ec:	bl	14fdc <close_stdout@@Base+0x26c8>
   175f0:	mov	r1, r8
   175f4:	add	r3, sp, #176	; 0xb0
   175f8:	mov	r2, r0
   175fc:	add	r0, sp, #200	; 0xc8
   17600:	bl	11644 <mbrtowc@plt>
   17604:	cmn	r0, #1
   17608:	str	r0, [sp, #192]	; 0xc0
   1760c:	strbeq	r5, [sp, #196]	; 0xc4
   17610:	streq	r4, [sp, #192]	; 0xc0
   17614:	beq	17680 <close_stdout@@Base+0x4d6c>
   17618:	cmn	r0, #2
   1761c:	beq	17670 <close_stdout@@Base+0x4d5c>
   17620:	cmp	r0, #0
   17624:	beq	17db8 <close_stdout@@Base+0x54a4>
   17628:	ldr	r7, [sp, #200]	; 0xc8
   1762c:	add	r0, sp, #176	; 0xb0
   17630:	strb	r4, [sp, #196]	; 0xc4
   17634:	bl	11560 <mbsinit@plt>
   17638:	strb	r4, [sp, #184]	; 0xb8
   1763c:	cmp	r0, #0
   17640:	strbne	r5, [sp, #172]	; 0xac
   17644:	cmp	r7, #0
   17648:	beq	173c0 <close_stdout@@Base+0x4aac>
   1764c:	mov	r3, #1
   17650:	b	17688 <close_stdout@@Base+0x4d74>
   17654:	ldr	r0, [sp, #76]	; 0x4c
   17658:	bl	11704 <strlen@plt>
   1765c:	strb	r4, [sp, #84]	; 0x54
   17660:	str	r0, [sp, #80]	; 0x50
   17664:	mov	r3, #1
   17668:	strb	r3, [sp, #72]	; 0x48
   1766c:	b	17300 <close_stdout@@Base+0x49ec>
   17670:	ldr	r0, [sp, #188]	; 0xbc
   17674:	bl	11704 <strlen@plt>
   17678:	strb	r5, [sp, #196]	; 0xc4
   1767c:	str	r0, [sp, #192]	; 0xc0
   17680:	mov	r3, #0
   17684:	strb	r4, [sp, #184]	; 0xb8
   17688:	ldr	r8, [sp, #32]
   1768c:	ldr	r2, [sp, #12]
   17690:	cmp	r2, #9
   17694:	movls	r8, #0
   17698:	andhi	r8, r8, #1
   1769c:	cmp	r8, #0
   176a0:	beq	17778 <close_stdout@@Base+0x4e64>
   176a4:	ldr	r1, [sp, #12]
   176a8:	add	r2, r1, r1, lsl #2
   176ac:	cmp	r9, r2
   176b0:	bcc	17948 <close_stdout@@Base+0x5034>
   176b4:	ldr	r2, [sp, #28]
   176b8:	subs	r7, r9, r2
   176bc:	beq	17750 <close_stdout@@Base+0x4e3c>
   176c0:	ldrb	sl, [sp, #128]	; 0x80
   176c4:	cmp	sl, #0
   176c8:	beq	176f8 <close_stdout@@Base+0x4de4>
   176cc:	ldrb	sl, [sp, #140]	; 0x8c
   176d0:	cmp	sl, #0
   176d4:	bne	17744 <close_stdout@@Base+0x4e30>
   176d8:	ldr	sl, [sp, #132]	; 0x84
   176dc:	subs	r7, r7, #1
   176e0:	ldr	r3, [sp, #136]	; 0x88
   176e4:	strb	r5, [sp, #128]	; 0x80
   176e8:	add	sl, sl, r3
   176ec:	str	sl, [sp, #132]	; 0x84
   176f0:	beq	17a1c <close_stdout@@Base+0x5108>
   176f4:	mov	sl, #0
   176f8:	ldrb	r3, [sp, #116]	; 0x74
   176fc:	ldr	fp, [sp, #132]	; 0x84
   17700:	cmp	r3, #0
   17704:	bne	177e8 <close_stdout@@Base+0x4ed4>
   17708:	ldrb	r3, [fp]
   1770c:	and	r2, r3, #31
   17710:	lsr	r3, r3, #5
   17714:	ldr	r3, [r6, r3, lsl #2]
   17718:	lsr	r3, r3, r2
   1771c:	tst	r3, #1
   17720:	beq	177d4 <close_stdout@@Base+0x4ec0>
   17724:	str	r4, [sp, #136]	; 0x88
   17728:	mov	sl, r8
   1772c:	ldrb	r3, [fp]
   17730:	strb	r4, [sp, #140]	; 0x8c
   17734:	str	r3, [sp, #144]	; 0x90
   17738:	cmp	sl, #0
   1773c:	strb	r4, [sp, #128]	; 0x80
   17740:	beq	176d8 <close_stdout@@Base+0x4dc4>
   17744:	ldr	r3, [sp, #144]	; 0x90
   17748:	cmp	r3, #0
   1774c:	bne	176d8 <close_stdout@@Base+0x4dc4>
   17750:	ldrb	r3, [sp, #128]	; 0x80
   17754:	cmp	r3, #0
   17758:	ldrbne	r8, [sp, #140]	; 0x8c
   1775c:	beq	17a18 <close_stdout@@Base+0x5104>
   17760:	cmp	r8, #0
   17764:	bne	179f8 <close_stdout@@Base+0x50e4>
   17768:	ldrb	r3, [sp, #196]	; 0xc4
   1776c:	mov	r0, #1
   17770:	str	r9, [sp, #28]
   17774:	str	r0, [sp, #32]
   17778:	cmp	r3, #0
   1777c:	ldr	r3, [sp, #12]
   17780:	add	r7, r9, #1
   17784:	add	r3, r3, #1
   17788:	str	r3, [sp, #12]
   1778c:	beq	1786c <close_stdout@@Base+0x4f58>
   17790:	ldrb	r3, [sp, #84]	; 0x54
   17794:	cmp	r3, #0
   17798:	beq	1786c <close_stdout@@Base+0x4f58>
   1779c:	ldr	r0, [sp, #200]	; 0xc8
   177a0:	ldr	r3, [sp, #88]	; 0x58
   177a4:	subs	r3, r0, r3
   177a8:	rsbs	r0, r3, #0
   177ac:	adcs	r0, r0, r3
   177b0:	cmp	r0, #0
   177b4:	bne	1789c <close_stdout@@Base+0x4f88>
   177b8:	ldr	r8, [sp, #188]	; 0xbc
   177bc:	mov	r9, r7
   177c0:	ldr	r3, [sp, #192]	; 0xc0
   177c4:	strb	r5, [sp, #184]	; 0xb8
   177c8:	add	r8, r8, r3
   177cc:	str	r8, [sp, #188]	; 0xbc
   177d0:	b	1737c <close_stdout@@Base+0x4a68>
   177d4:	add	r0, sp, #120	; 0x78
   177d8:	bl	11560 <mbsinit@plt>
   177dc:	cmp	r0, #0
   177e0:	beq	17ea0 <close_stdout@@Base+0x558c>
   177e4:	strb	r4, [sp, #116]	; 0x74
   177e8:	bl	11620 <__ctype_get_mb_cur_max@plt>
   177ec:	mov	r1, r0
   177f0:	mov	r0, fp
   177f4:	bl	14fdc <close_stdout@@Base+0x26c8>
   177f8:	mov	r1, fp
   177fc:	add	r3, sp, #120	; 0x78
   17800:	mov	r2, r0
   17804:	add	r0, sp, #144	; 0x90
   17808:	bl	11644 <mbrtowc@plt>
   1780c:	cmn	r0, #1
   17810:	str	r0, [sp, #136]	; 0x88
   17814:	strbeq	r5, [sp, #140]	; 0x8c
   17818:	streq	r4, [sp, #136]	; 0x88
   1781c:	beq	17738 <close_stdout@@Base+0x4e24>
   17820:	cmn	r0, #2
   17824:	beq	17934 <close_stdout@@Base+0x5020>
   17828:	cmp	r0, #0
   1782c:	bne	17850 <close_stdout@@Base+0x4f3c>
   17830:	ldr	r3, [sp, #132]	; 0x84
   17834:	str	r4, [sp, #136]	; 0x88
   17838:	ldrb	r3, [r3]
   1783c:	cmp	r3, #0
   17840:	bne	17ec4 <close_stdout@@Base+0x55b0>
   17844:	ldr	r3, [sp, #144]	; 0x90
   17848:	cmp	r3, #0
   1784c:	bne	179d0 <close_stdout@@Base+0x50bc>
   17850:	add	r0, sp, #120	; 0x78
   17854:	strb	r4, [sp, #140]	; 0x8c
   17858:	bl	11560 <mbsinit@plt>
   1785c:	mov	sl, r8
   17860:	cmp	r0, #0
   17864:	strbne	r5, [sp, #116]	; 0x74
   17868:	b	17738 <close_stdout@@Base+0x4e24>
   1786c:	ldr	r2, [sp, #192]	; 0xc0
   17870:	ldr	r3, [sp, #80]	; 0x50
   17874:	cmp	r2, r3
   17878:	movne	r0, #0
   1787c:	bne	177b0 <close_stdout@@Base+0x4e9c>
   17880:	ldr	r0, [sp, #188]	; 0xbc
   17884:	ldr	r1, [sp, #76]	; 0x4c
   17888:	bl	11578 <memcmp@plt>
   1788c:	rsbs	r0, r0, #1
   17890:	movcc	r0, #0
   17894:	cmp	r0, #0
   17898:	beq	177b8 <close_stdout@@Base+0x4ea4>
   1789c:	ldr	r0, [sp, #4]
   178a0:	add	r7, sp, #172	; 0xac
   178a4:	add	ip, sp, #228	; 0xe4
   178a8:	add	r8, sp, #288	; 0x120
   178ac:	str	r0, [sp, #300]	; 0x12c
   178b0:	ldm	r7!, {r0, r1, r2, r3}
   178b4:	stmia	ip!, {r0, r1, r2, r3}
   178b8:	ldm	r7!, {r0, r1, r2, r3}
   178bc:	strb	r5, [sp, #240]	; 0xf0
   178c0:	stmia	ip!, {r0, r1, r2, r3}
   178c4:	ldm	r7!, {r0, r1, r2, r3}
   178c8:	ldr	sl, [sp, #244]	; 0xf4
   178cc:	stmia	ip!, {r0, r1, r2, r3}
   178d0:	ldm	r7, {r0, r1}
   178d4:	ldr	r3, [sp, #248]	; 0xf8
   178d8:	stm	ip, {r0, r1}
   178dc:	add	r3, sl, r3
   178e0:	str	r3, [sp, #244]	; 0xf4
   178e4:	ldr	r1, [sp, #4]
   178e8:	str	r5, [sp, #288]	; 0x120
   178ec:	strb	r5, [sp, #296]	; 0x128
   178f0:	ldrb	r3, [r1]
   178f4:	strb	r5, [sp, #284]	; 0x11c
   178f8:	and	r2, r3, #31
   178fc:	str	r5, [r8, #4]
   17900:	lsr	r1, r3, #5
   17904:	ldr	r7, [r6, r1, lsl #2]
   17908:	lsr	r7, r7, r2
   1790c:	ands	r7, r7, #1
   17910:	beq	1795c <close_stdout@@Base+0x5048>
   17914:	mov	r7, r3
   17918:	str	r4, [sp, #304]	; 0x130
   1791c:	str	r3, [sp, #312]	; 0x138
   17920:	strb	r4, [sp, #308]	; 0x134
   17924:	cmp	r7, #0
   17928:	strb	r4, [sp, #296]	; 0x128
   1792c:	bne	17ae0 <close_stdout@@Base+0x51cc>
   17930:	bl	11878 <abort@plt>
   17934:	ldr	r0, [sp, #132]	; 0x84
   17938:	bl	11704 <strlen@plt>
   1793c:	strb	r5, [sp, #140]	; 0x8c
   17940:	str	r0, [sp, #136]	; 0x88
   17944:	b	17738 <close_stdout@@Base+0x4e24>
   17948:	mov	r2, #1
   1794c:	str	r2, [sp, #32]
   17950:	b	17778 <close_stdout@@Base+0x4e64>
   17954:	mov	r0, #0
   17958:	b	1745c <close_stdout@@Base+0x4b48>
   1795c:	mov	r0, r8
   17960:	bl	11560 <mbsinit@plt>
   17964:	cmp	r0, #0
   17968:	beq	17ea0 <close_stdout@@Base+0x558c>
   1796c:	strb	r4, [sp, #284]	; 0x11c
   17970:	bl	11620 <__ctype_get_mb_cur_max@plt>
   17974:	mov	r1, r0
   17978:	ldr	r0, [sp, #4]
   1797c:	bl	14fdc <close_stdout@@Base+0x26c8>
   17980:	ldr	r1, [sp, #4]
   17984:	mov	r3, r8
   17988:	mov	r2, r0
   1798c:	add	r0, sp, #312	; 0x138
   17990:	bl	11644 <mbrtowc@plt>
   17994:	cmn	r0, #1
   17998:	str	r0, [sp, #304]	; 0x130
   1799c:	beq	17e70 <close_stdout@@Base+0x555c>
   179a0:	cmn	r0, #2
   179a4:	beq	17e80 <close_stdout@@Base+0x556c>
   179a8:	cmp	r0, #0
   179ac:	bne	17e3c <close_stdout@@Base+0x5528>
   179b0:	ldr	fp, [sp, #300]	; 0x12c
   179b4:	str	r4, [sp, #304]	; 0x130
   179b8:	ldrb	r3, [fp]
   179bc:	cmp	r3, #0
   179c0:	bne	17ec4 <close_stdout@@Base+0x55b0>
   179c4:	ldr	r7, [sp, #312]	; 0x138
   179c8:	cmp	r7, #0
   179cc:	beq	17e40 <close_stdout@@Base+0x552c>
   179d0:	ldr	r0, [pc, #1304]	; 17ef0 <close_stdout@@Base+0x55dc>
   179d4:	mov	r2, #179	; 0xb3
   179d8:	ldr	r1, [pc, #1300]	; 17ef4 <close_stdout@@Base+0x55e0>
   179dc:	ldr	r3, [pc, #1300]	; 17ef8 <close_stdout@@Base+0x55e4>
   179e0:	add	r0, pc, r0
   179e4:	add	r1, pc, r1
   179e8:	add	r3, pc, r3
   179ec:	bl	11890 <__assert_fail@plt>
   179f0:	mov	r5, r3
   179f4:	b	174d8 <close_stdout@@Base+0x4bc4>
   179f8:	ldr	r3, [sp, #144]	; 0x90
   179fc:	cmp	r3, #0
   17a00:	beq	17e00 <close_stdout@@Base+0x54ec>
   17a04:	mov	r1, #1
   17a08:	ldrb	r3, [sp, #196]	; 0xc4
   17a0c:	str	r9, [sp, #28]
   17a10:	str	r1, [sp, #32]
   17a14:	b	17778 <close_stdout@@Base+0x4e64>
   17a18:	ldr	sl, [sp, #132]	; 0x84
   17a1c:	ldrb	r3, [sp, #116]	; 0x74
   17a20:	cmp	r3, #0
   17a24:	bne	17a58 <close_stdout@@Base+0x5144>
   17a28:	ldrb	r3, [sl]
   17a2c:	and	r2, r3, #31
   17a30:	lsr	r3, r3, #5
   17a34:	ldr	r3, [r6, r3, lsl #2]
   17a38:	lsr	r3, r3, r2
   17a3c:	tst	r3, #1
   17a40:	bne	17e28 <close_stdout@@Base+0x5514>
   17a44:	add	r0, sp, #120	; 0x78
   17a48:	bl	11560 <mbsinit@plt>
   17a4c:	cmp	r0, #0
   17a50:	beq	17ea0 <close_stdout@@Base+0x558c>
   17a54:	strb	r4, [sp, #116]	; 0x74
   17a58:	bl	11620 <__ctype_get_mb_cur_max@plt>
   17a5c:	mov	r1, r0
   17a60:	mov	r0, sl
   17a64:	bl	14fdc <close_stdout@@Base+0x26c8>
   17a68:	mov	r1, sl
   17a6c:	add	r3, sp, #120	; 0x78
   17a70:	mov	r2, r0
   17a74:	add	r0, sp, #144	; 0x90
   17a78:	bl	11644 <mbrtowc@plt>
   17a7c:	cmn	r0, #1
   17a80:	str	r0, [sp, #136]	; 0x88
   17a84:	strbeq	r5, [sp, #140]	; 0x8c
   17a88:	streq	r4, [sp, #136]	; 0x88
   17a8c:	moveq	r8, #0
   17a90:	beq	17ad8 <close_stdout@@Base+0x51c4>
   17a94:	cmn	r0, #2
   17a98:	beq	17e58 <close_stdout@@Base+0x5544>
   17a9c:	cmp	r0, #0
   17aa0:	bne	17ac4 <close_stdout@@Base+0x51b0>
   17aa4:	ldr	r3, [sp, #132]	; 0x84
   17aa8:	str	r4, [sp, #136]	; 0x88
   17aac:	ldrb	r3, [r3]
   17ab0:	cmp	r3, #0
   17ab4:	bne	17ec4 <close_stdout@@Base+0x55b0>
   17ab8:	ldr	r3, [sp, #144]	; 0x90
   17abc:	cmp	r3, #0
   17ac0:	bne	179d0 <close_stdout@@Base+0x50bc>
   17ac4:	add	r0, sp, #120	; 0x78
   17ac8:	strb	r4, [sp, #140]	; 0x8c
   17acc:	bl	11560 <mbsinit@plt>
   17ad0:	cmp	r0, #0
   17ad4:	strbne	r5, [sp, #116]	; 0x74
   17ad8:	strb	r4, [sp, #128]	; 0x80
   17adc:	b	17760 <close_stdout@@Base+0x4e4c>
   17ae0:	ldr	fp, [sp, #300]	; 0x12c
   17ae4:	ldr	r2, [sp, #304]	; 0x130
   17ae8:	add	r7, r9, #2
   17aec:	add	r3, sp, #312	; 0x138
   17af0:	add	r0, sp, #256	; 0x100
   17af4:	add	fp, fp, r2
   17af8:	ldrb	r2, [sp, #284]	; 0x11c
   17afc:	strb	r5, [sp, #296]	; 0x128
   17b00:	add	r9, sp, #232	; 0xe8
   17b04:	cmp	r2, #0
   17b08:	str	r3, [sp, #36]	; 0x24
   17b0c:	str	r0, [sp, #40]	; 0x28
   17b10:	str	fp, [sp, #300]	; 0x12c
   17b14:	bne	17be0 <close_stdout@@Base+0x52cc>
   17b18:	ldrb	r2, [fp]
   17b1c:	and	r1, r2, #31
   17b20:	lsr	r2, r2, #5
   17b24:	ldr	r2, [r6, r2, lsl #2]
   17b28:	lsr	r2, r2, r1
   17b2c:	tst	r2, #1
   17b30:	beq	17d68 <close_stdout@@Base+0x5454>
   17b34:	str	r4, [sp, #304]	; 0x130
   17b38:	ldrb	r3, [fp]
   17b3c:	strb	r4, [sp, #308]	; 0x134
   17b40:	mov	fp, r3
   17b44:	str	r3, [sp, #312]	; 0x138
   17b48:	cmp	fp, #0
   17b4c:	strb	r4, [sp, #296]	; 0x128
   17b50:	bne	17b70 <close_stdout@@Base+0x525c>
   17b54:	ldr	r0, [sp, #188]	; 0xbc
   17b58:	b	1745c <close_stdout@@Base+0x4b48>
   17b5c:	ldr	r0, [sp, #300]	; 0x12c
   17b60:	bl	11704 <strlen@plt>
   17b64:	strb	r5, [sp, #308]	; 0x134
   17b68:	str	r0, [sp, #304]	; 0x130
   17b6c:	strb	r4, [sp, #296]	; 0x128
   17b70:	ldrb	fp, [sp, #240]	; 0xf0
   17b74:	cmp	fp, #0
   17b78:	beq	17c44 <close_stdout@@Base+0x5330>
   17b7c:	ldrb	fp, [sp, #252]	; 0xfc
   17b80:	cmp	fp, #0
   17b84:	bne	17c90 <close_stdout@@Base+0x537c>
   17b88:	ldr	r2, [sp, #248]	; 0xf8
   17b8c:	ldr	r3, [sp, #304]	; 0x130
   17b90:	cmp	r2, r3
   17b94:	movne	r0, #1
   17b98:	beq	17d50 <close_stdout@@Base+0x543c>
   17b9c:	cmp	r0, #0
   17ba0:	add	r3, r7, #1
   17ba4:	bne	177b8 <close_stdout@@Base+0x4ea4>
   17ba8:	ldr	r1, [sp, #244]	; 0xf4
   17bac:	mov	r7, r3
   17bb0:	ldr	r2, [sp, #248]	; 0xf8
   17bb4:	ldr	fp, [sp, #300]	; 0x12c
   17bb8:	add	r1, r1, r2
   17bbc:	ldr	r2, [sp, #304]	; 0x130
   17bc0:	strb	r0, [sp, #240]	; 0xf0
   17bc4:	add	fp, fp, r2
   17bc8:	ldrb	r2, [sp, #284]	; 0x11c
   17bcc:	strb	r0, [sp, #296]	; 0x128
   17bd0:	cmp	r2, #0
   17bd4:	str	r1, [sp, #244]	; 0xf4
   17bd8:	str	fp, [sp, #300]	; 0x12c
   17bdc:	beq	17b18 <close_stdout@@Base+0x5204>
   17be0:	bl	11620 <__ctype_get_mb_cur_max@plt>
   17be4:	mov	r1, r0
   17be8:	mov	r0, fp
   17bec:	bl	14fdc <close_stdout@@Base+0x26c8>
   17bf0:	mov	r1, fp
   17bf4:	mov	r3, r8
   17bf8:	mov	r2, r0
   17bfc:	add	r0, sp, #312	; 0x138
   17c00:	bl	11644 <mbrtowc@plt>
   17c04:	cmn	r0, #1
   17c08:	str	r0, [sp, #304]	; 0x130
   17c0c:	strbeq	r5, [sp, #308]	; 0x134
   17c10:	streq	r4, [sp, #304]	; 0x130
   17c14:	beq	17b6c <close_stdout@@Base+0x5258>
   17c18:	cmn	r0, #2
   17c1c:	beq	17b5c <close_stdout@@Base+0x5248>
   17c20:	cmp	r0, #0
   17c24:	beq	17d80 <close_stdout@@Base+0x546c>
   17c28:	ldr	fp, [sp, #312]	; 0x138
   17c2c:	mov	r0, r8
   17c30:	strb	r4, [sp, #308]	; 0x134
   17c34:	bl	11560 <mbsinit@plt>
   17c38:	cmp	r0, #0
   17c3c:	strbne	r5, [sp, #284]	; 0x11c
   17c40:	b	17b48 <close_stdout@@Base+0x5234>
   17c44:	ldrb	r3, [sp, #228]	; 0xe4
   17c48:	ldr	sl, [sp, #244]	; 0xf4
   17c4c:	cmp	r3, #0
   17c50:	bne	17ccc <close_stdout@@Base+0x53b8>
   17c54:	ldrb	r2, [sl]
   17c58:	and	r1, r2, #31
   17c5c:	lsr	r2, r2, #5
   17c60:	ldr	r2, [r6, r2, lsl #2]
   17c64:	lsr	r2, r2, r1
   17c68:	tst	r2, #1
   17c6c:	beq	17cb8 <close_stdout@@Base+0x53a4>
   17c70:	str	r4, [sp, #248]	; 0xf8
   17c74:	mov	fp, #1
   17c78:	ldrb	r3, [sl]
   17c7c:	strb	r4, [sp, #252]	; 0xfc
   17c80:	str	r3, [sp, #256]	; 0x100
   17c84:	cmp	fp, #0
   17c88:	strb	r4, [sp, #240]	; 0xf0
   17c8c:	beq	17b88 <close_stdout@@Base+0x5274>
   17c90:	ldr	r0, [sp, #256]	; 0x100
   17c94:	cmp	r0, #0
   17c98:	beq	1745c <close_stdout@@Base+0x4b48>
   17c9c:	ldrb	r3, [sp, #308]	; 0x134
   17ca0:	cmp	r3, #0
   17ca4:	beq	17b88 <close_stdout@@Base+0x5274>
   17ca8:	ldr	r3, [sp, #312]	; 0x138
   17cac:	subs	r0, r0, r3
   17cb0:	movne	r0, #1
   17cb4:	b	17b9c <close_stdout@@Base+0x5288>
   17cb8:	mov	r0, r9
   17cbc:	bl	11560 <mbsinit@plt>
   17cc0:	cmp	r0, #0
   17cc4:	beq	17ea0 <close_stdout@@Base+0x558c>
   17cc8:	strb	r4, [sp, #228]	; 0xe4
   17ccc:	bl	11620 <__ctype_get_mb_cur_max@plt>
   17cd0:	mov	r1, r0
   17cd4:	mov	r0, sl
   17cd8:	bl	14fdc <close_stdout@@Base+0x26c8>
   17cdc:	mov	r1, sl
   17ce0:	mov	r3, r9
   17ce4:	mov	r2, r0
   17ce8:	add	r0, sp, #256	; 0x100
   17cec:	bl	11644 <mbrtowc@plt>
   17cf0:	cmn	r0, #1
   17cf4:	str	r0, [sp, #248]	; 0xf8
   17cf8:	strbeq	r5, [sp, #252]	; 0xfc
   17cfc:	streq	r4, [sp, #248]	; 0xf8
   17d00:	beq	17c84 <close_stdout@@Base+0x5370>
   17d04:	cmn	r0, #2
   17d08:	beq	17da4 <close_stdout@@Base+0x5490>
   17d0c:	cmp	r0, #0
   17d10:	bne	17d34 <close_stdout@@Base+0x5420>
   17d14:	ldr	r3, [sp, #244]	; 0xf4
   17d18:	str	r4, [sp, #248]	; 0xf8
   17d1c:	ldrb	r3, [r3]
   17d20:	cmp	r3, #0
   17d24:	bne	17ec4 <close_stdout@@Base+0x55b0>
   17d28:	ldr	r3, [sp, #256]	; 0x100
   17d2c:	cmp	r3, #0
   17d30:	bne	179d0 <close_stdout@@Base+0x50bc>
   17d34:	mov	r0, r9
   17d38:	strb	r4, [sp, #252]	; 0xfc
   17d3c:	bl	11560 <mbsinit@plt>
   17d40:	mov	fp, #1
   17d44:	cmp	r0, #0
   17d48:	strbne	r5, [sp, #228]	; 0xe4
   17d4c:	b	17c84 <close_stdout@@Base+0x5370>
   17d50:	ldr	r0, [sp, #244]	; 0xf4
   17d54:	ldr	r1, [sp, #300]	; 0x12c
   17d58:	bl	11578 <memcmp@plt>
   17d5c:	adds	r0, r0, #0
   17d60:	movne	r0, #1
   17d64:	b	17b9c <close_stdout@@Base+0x5288>
   17d68:	mov	r0, r8
   17d6c:	bl	11560 <mbsinit@plt>
   17d70:	cmp	r0, #0
   17d74:	beq	17ea0 <close_stdout@@Base+0x558c>
   17d78:	strb	r4, [sp, #284]	; 0x11c
   17d7c:	b	17be0 <close_stdout@@Base+0x52cc>
   17d80:	ldr	r3, [sp, #300]	; 0x12c
   17d84:	str	r4, [sp, #304]	; 0x130
   17d88:	ldrb	r3, [r3]
   17d8c:	cmp	r3, #0
   17d90:	bne	17ec4 <close_stdout@@Base+0x55b0>
   17d94:	ldr	fp, [sp, #312]	; 0x138
   17d98:	cmp	fp, #0
   17d9c:	beq	17c2c <close_stdout@@Base+0x5318>
   17da0:	b	179d0 <close_stdout@@Base+0x50bc>
   17da4:	ldr	r0, [sp, #244]	; 0xf4
   17da8:	bl	11704 <strlen@plt>
   17dac:	strb	r5, [sp, #252]	; 0xfc
   17db0:	str	r0, [sp, #248]	; 0xf8
   17db4:	b	17c84 <close_stdout@@Base+0x5370>
   17db8:	ldr	r3, [sp, #188]	; 0xbc
   17dbc:	str	r4, [sp, #192]	; 0xc0
   17dc0:	ldrb	r3, [r3]
   17dc4:	cmp	r3, #0
   17dc8:	bne	17ec4 <close_stdout@@Base+0x55b0>
   17dcc:	ldr	r7, [sp, #200]	; 0xc8
   17dd0:	cmp	r7, #0
   17dd4:	beq	1762c <close_stdout@@Base+0x4d18>
   17dd8:	b	179d0 <close_stdout@@Base+0x50bc>
   17ddc:	ldr	r3, [sp, #76]	; 0x4c
   17de0:	str	r7, [sp, #80]	; 0x50
   17de4:	ldrb	r3, [r3]
   17de8:	cmp	r3, #0
   17dec:	bne	17ec4 <close_stdout@@Base+0x55b0>
   17df0:	ldr	r4, [sp, #88]	; 0x58
   17df4:	cmp	r4, #0
   17df8:	beq	1742c <close_stdout@@Base+0x4b18>
   17dfc:	b	179d0 <close_stdout@@Base+0x50bc>
   17e00:	ldr	r0, [sp, #16]
   17e04:	add	r2, sp, #56	; 0x38
   17e08:	ldr	r1, [sp, #4]
   17e0c:	bl	16944 <close_stdout@@Base+0x4030>
   17e10:	cmp	r0, #0
   17e14:	bne	17e98 <close_stdout@@Base+0x5584>
   17e18:	str	r0, [sp, #32]
   17e1c:	ldrb	r3, [sp, #196]	; 0xc4
   17e20:	str	r9, [sp, #28]
   17e24:	b	17778 <close_stdout@@Base+0x4e64>
   17e28:	str	r4, [sp, #136]	; 0x88
   17e2c:	ldrb	r3, [sl]
   17e30:	strb	r4, [sp, #140]	; 0x8c
   17e34:	str	r3, [sp, #144]	; 0x90
   17e38:	b	17ad8 <close_stdout@@Base+0x51c4>
   17e3c:	ldr	r7, [sp, #312]	; 0x138
   17e40:	mov	r0, r8
   17e44:	strb	r4, [sp, #308]	; 0x134
   17e48:	bl	11560 <mbsinit@plt>
   17e4c:	cmp	r0, #0
   17e50:	strbne	r5, [sp, #284]	; 0x11c
   17e54:	b	17924 <close_stdout@@Base+0x5010>
   17e58:	ldr	r0, [sp, #132]	; 0x84
   17e5c:	mov	r8, #0
   17e60:	bl	11704 <strlen@plt>
   17e64:	strb	r5, [sp, #140]	; 0x8c
   17e68:	str	r0, [sp, #136]	; 0x88
   17e6c:	b	17ad8 <close_stdout@@Base+0x51c4>
   17e70:	str	r4, [sp, #304]	; 0x130
   17e74:	strb	r7, [sp, #308]	; 0x134
   17e78:	ldr	fp, [sp, #300]	; 0x12c
   17e7c:	b	17ae4 <close_stdout@@Base+0x51d0>
   17e80:	ldr	fp, [sp, #300]	; 0x12c
   17e84:	mov	r0, fp
   17e88:	bl	11704 <strlen@plt>
   17e8c:	strb	r7, [sp, #308]	; 0x134
   17e90:	str	r0, [sp, #304]	; 0x130
   17e94:	b	17ae4 <close_stdout@@Base+0x51d0>
   17e98:	ldr	r0, [sp, #56]	; 0x38
   17e9c:	b	1745c <close_stdout@@Base+0x4b48>
   17ea0:	ldr	r0, [pc, #84]	; 17efc <close_stdout@@Base+0x55e8>
   17ea4:	mov	r2, #150	; 0x96
   17ea8:	ldr	r1, [pc, #80]	; 17f00 <close_stdout@@Base+0x55ec>
   17eac:	ldr	r3, [pc, #80]	; 17f04 <close_stdout@@Base+0x55f0>
   17eb0:	add	r0, pc, r0
   17eb4:	add	r1, pc, r1
   17eb8:	add	r3, pc, r3
   17ebc:	bl	11890 <__assert_fail@plt>
   17ec0:	bl	11590 <__stack_chk_fail@plt>
   17ec4:	ldr	r0, [pc, #60]	; 17f08 <close_stdout@@Base+0x55f4>
   17ec8:	mov	r2, #178	; 0xb2
   17ecc:	ldr	r1, [pc, #56]	; 17f0c <close_stdout@@Base+0x55f8>
   17ed0:	ldr	r3, [pc, #56]	; 17f10 <close_stdout@@Base+0x55fc>
   17ed4:	add	r0, pc, r0
   17ed8:	add	r1, pc, r1
   17edc:	add	r3, pc, r3
   17ee0:	bl	11890 <__assert_fail@plt>
   17ee4:	andeq	r2, r1, r8, lsl #27
   17ee8:	andeq	r0, r0, r8, ror #2
   17eec:	andeq	r0, r0, r4, ror #2
   17ef0:	andeq	r1, r0, ip, lsl #26
   17ef4:	andeq	r1, r0, r0, ror #25
   17ef8:	andeq	r2, r0, r8, ror r1
   17efc:	strdeq	r1, [r0], -ip
   17f00:	andeq	r1, r0, r0, lsl r8
   17f04:	andeq	r1, r0, r8, lsr #25
   17f08:	andeq	r1, r0, r0, lsl #16
   17f0c:	andeq	r1, r0, ip, ror #15
   17f10:	andeq	r1, r0, r4, lsl #25
   17f14:	ldr	ip, [pc, #852]	; 18270 <close_stdout@@Base+0x595c>
   17f18:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17f1c:	mov	r6, r2
   17f20:	sub	sp, sp, #4160	; 0x1040
   17f24:	ldr	r2, [pc, #840]	; 18274 <close_stdout@@Base+0x5960>
   17f28:	sub	sp, sp, #4
   17f2c:	add	ip, pc, ip
   17f30:	mov	r5, #0
   17f34:	movw	fp, #61424	; 0xeff0
   17f38:	str	r0, [sp, #24]
   17f3c:	mov	r0, r6
   17f40:	str	r1, [sp, #16]
   17f44:	mov	r1, r5
   17f48:	str	r3, [sp, #32]
   17f4c:	mov	r3, r5
   17f50:	ldr	r2, [ip, r2]
   17f54:	add	ip, sp, #8192	; 0x2000
   17f58:	str	r5, [sp]
   17f5c:	movt	fp, #65535	; 0xffff
   17f60:	ldr	ip, [ip, #-3992]	; 0xfffff068
   17f64:	str	r2, [sp, #20]
   17f68:	mov	r2, r5
   17f6c:	ldr	lr, [sp, #20]
   17f70:	str	ip, [sp, #28]
   17f74:	ldr	ip, [lr]
   17f78:	add	lr, sp, #8192	; 0x2000
   17f7c:	str	ip, [lr, #-4036]	; 0xfffff03c
   17f80:	bl	114dc <iconv@plt>
   17f84:	ldr	ip, [sp, #16]
   17f88:	add	lr, sp, #4160	; 0x1040
   17f8c:	movw	r3, #61420	; 0xefec
   17f90:	cmp	ip, r5
   17f94:	ldr	ip, [sp, #24]
   17f98:	movt	r3, #65535	; 0xffff
   17f9c:	str	ip, [lr, r3]
   17fa0:	ldr	ip, [sp, #16]
   17fa4:	str	ip, [lr, fp]
   17fa8:	beq	1824c <close_stdout@@Base+0x5938>
   17fac:	movw	r9, #61432	; 0xeff8
   17fb0:	movt	r9, #65535	; 0xffff
   17fb4:	movw	sl, #61428	; 0xeff4
   17fb8:	movt	sl, #65535	; 0xffff
   17fbc:	mov	r3, r9
   17fc0:	add	ip, sp, #64	; 0x40
   17fc4:	mov	r9, sl
   17fc8:	str	ip, [sp, #36]	; 0x24
   17fcc:	add	r4, sp, #60	; 0x3c
   17fd0:	add	ip, sp, #44	; 0x2c
   17fd4:	add	r7, sp, #52	; 0x34
   17fd8:	str	ip, [sp, #8]
   17fdc:	add	r8, sp, #56	; 0x38
   17fe0:	add	ip, sp, #48	; 0x30
   17fe4:	mov	sl, r3
   17fe8:	str	ip, [sp, #12]
   17fec:	b	1800c <close_stdout@@Base+0x56f8>
   17ff0:	add	lr, sp, #4160	; 0x1040
   17ff4:	ldr	r2, [lr, fp]
   17ff8:	ldr	r3, [lr, r9]
   17ffc:	cmp	r2, #0
   18000:	rsb	r3, r4, r3
   18004:	add	r5, r5, r3
   18008:	beq	18054 <close_stdout@@Base+0x5740>
   1800c:	add	lr, sp, #4160	; 0x1040
   18010:	str	r8, [sp]
   18014:	mov	ip, #4096	; 0x1000
   18018:	mov	r0, r6
   1801c:	add	r1, sp, #44	; 0x2c
   18020:	add	r2, sp, #48	; 0x30
   18024:	mov	r3, r7
   18028:	str	r4, [lr, r9]
   1802c:	str	ip, [lr, sl]
   18030:	bl	114dc <iconv@plt>
   18034:	cmn	r0, #1
   18038:	bne	17ff0 <close_stdout@@Base+0x56dc>
   1803c:	bl	11734 <__errno_location@plt>
   18040:	ldr	r3, [r0]
   18044:	cmp	r3, #7
   18048:	beq	17ff0 <close_stdout@@Base+0x56dc>
   1804c:	cmp	r3, #22
   18050:	bne	18244 <close_stdout@@Base+0x5930>
   18054:	add	lr, sp, #4160	; 0x1040
   18058:	movw	r9, #61428	; 0xeff4
   1805c:	movw	r3, #61432	; 0xeff8
   18060:	movt	r9, #65535	; 0xffff
   18064:	movt	r3, #65535	; 0xffff
   18068:	mov	r1, #0
   1806c:	str	r8, [sp]
   18070:	mov	ip, #4096	; 0x1000
   18074:	mov	r2, r1
   18078:	str	ip, [lr, r3]
   1807c:	mov	r0, r6
   18080:	str	r4, [lr, r9]
   18084:	mov	r3, r7
   18088:	bl	114dc <iconv@plt>
   1808c:	cmn	r0, #1
   18090:	beq	18244 <close_stdout@@Base+0x5930>
   18094:	add	r0, sp, #4160	; 0x1040
   18098:	ldr	r3, [r0, r9]
   1809c:	rsb	r4, r4, r3
   180a0:	adds	r5, r5, r4
   180a4:	beq	181f4 <close_stdout@@Base+0x58e0>
   180a8:	ldr	ip, [sp, #32]
   180ac:	ldr	r4, [ip]
   180b0:	cmp	r4, #0
   180b4:	beq	181d0 <close_stdout@@Base+0x58bc>
   180b8:	ldr	ip, [sp, #28]
   180bc:	ldr	r3, [ip]
   180c0:	cmp	r5, r3
   180c4:	bhi	181d0 <close_stdout@@Base+0x58bc>
   180c8:	mov	r3, #0
   180cc:	mov	r0, r6
   180d0:	mov	r1, r3
   180d4:	mov	r2, r3
   180d8:	str	r3, [sp]
   180dc:	movw	sl, #61424	; 0xeff0
   180e0:	bl	114dc <iconv@plt>
   180e4:	ldr	ip, [sp, #24]
   180e8:	add	lr, sp, #4160	; 0x1040
   180ec:	movw	r3, #61420	; 0xefec
   180f0:	movt	r3, #65535	; 0xffff
   180f4:	movt	sl, #65535	; 0xffff
   180f8:	movw	r1, #61428	; 0xeff4
   180fc:	movw	r2, #61432	; 0xeff8
   18100:	str	ip, [lr, r3]
   18104:	movt	r1, #65535	; 0xffff
   18108:	ldr	ip, [sp, #16]
   1810c:	movt	r2, #65535	; 0xffff
   18110:	str	r4, [lr, r1]
   18114:	str	r5, [lr, r2]
   18118:	str	ip, [lr, sl]
   1811c:	mov	r3, ip
   18120:	ldr	ip, [sp, #36]	; 0x24
   18124:	sub	fp, ip, #20
   18128:	sub	r9, ip, #16
   1812c:	b	18158 <close_stdout@@Base+0x5844>
   18130:	str	r8, [sp]
   18134:	mov	r0, r6
   18138:	mov	r1, fp
   1813c:	mov	r2, r9
   18140:	mov	r3, r7
   18144:	bl	114dc <iconv@plt>
   18148:	cmn	r0, #1
   1814c:	beq	18204 <close_stdout@@Base+0x58f0>
   18150:	add	lr, sp, #4160	; 0x1040
   18154:	ldr	r3, [lr, sl]
   18158:	cmp	r3, #0
   1815c:	bne	18130 <close_stdout@@Base+0x581c>
   18160:	mov	r1, #0
   18164:	str	r8, [sp]
   18168:	mov	r0, r6
   1816c:	mov	r3, r7
   18170:	mov	r2, r1
   18174:	bl	114dc <iconv@plt>
   18178:	cmn	r0, #1
   1817c:	beq	18214 <close_stdout@@Base+0x5900>
   18180:	movw	r3, #61432	; 0xeff8
   18184:	add	r0, sp, #4160	; 0x1040
   18188:	movt	r3, #65535	; 0xffff
   1818c:	ldr	r3, [r0, r3]
   18190:	cmp	r3, #0
   18194:	bne	18268 <close_stdout@@Base+0x5954>
   18198:	ldr	ip, [sp, #32]
   1819c:	str	r4, [ip]
   181a0:	ldr	ip, [sp, #28]
   181a4:	str	r5, [ip]
   181a8:	ldr	ip, [sp, #20]
   181ac:	add	r0, sp, #8192	; 0x2000
   181b0:	ldr	r2, [r0, #-4036]	; 0xfffff03c
   181b4:	mov	r0, r3
   181b8:	ldr	r3, [ip]
   181bc:	cmp	r2, r3
   181c0:	bne	1826c <close_stdout@@Base+0x5958>
   181c4:	add	sp, sp, #4160	; 0x1040
   181c8:	add	sp, sp, #4
   181cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   181d0:	mov	r0, r5
   181d4:	bl	11680 <malloc@plt>
   181d8:	subs	r4, r0, #0
   181dc:	bne	180c8 <close_stdout@@Base+0x57b4>
   181e0:	bl	11734 <__errno_location@plt>
   181e4:	mov	r2, #12
   181e8:	mvn	r3, #0
   181ec:	str	r2, [r0]
   181f0:	b	181a8 <close_stdout@@Base+0x5894>
   181f4:	ldr	ip, [sp, #28]
   181f8:	mov	r3, r5
   181fc:	str	r5, [ip]
   18200:	b	181a8 <close_stdout@@Base+0x5894>
   18204:	bl	11734 <__errno_location@plt>
   18208:	ldr	r3, [r0]
   1820c:	cmp	r3, #22
   18210:	beq	18160 <close_stdout@@Base+0x584c>
   18214:	ldr	ip, [sp, #32]
   18218:	ldr	r3, [ip]
   1821c:	cmp	r3, r4
   18220:	beq	18244 <close_stdout@@Base+0x5930>
   18224:	bl	11734 <__errno_location@plt>
   18228:	ldr	r6, [r0]
   1822c:	mov	r5, r0
   18230:	mov	r0, r4
   18234:	bl	11530 <free@plt>
   18238:	mvn	r3, #0
   1823c:	str	r6, [r5]
   18240:	b	181a8 <close_stdout@@Base+0x5894>
   18244:	mvn	r3, #0
   18248:	b	181a8 <close_stdout@@Base+0x5894>
   1824c:	add	ip, sp, #64	; 0x40
   18250:	add	r4, sp, #60	; 0x3c
   18254:	str	ip, [sp, #36]	; 0x24
   18258:	add	r7, sp, #52	; 0x34
   1825c:	add	r8, sp, #56	; 0x38
   18260:	ldr	r5, [sp, #16]
   18264:	b	18054 <close_stdout@@Base+0x5740>
   18268:	bl	11878 <abort@plt>
   1826c:	bl	11590 <__stack_chk_fail@plt>
   18270:	andeq	r2, r1, ip, asr #1
   18274:	andeq	r0, r0, r8, ror #2
   18278:	ldr	r3, [pc, #524]	; 1848c <close_stdout@@Base+0x5b78>
   1827c:	ldr	r2, [pc, #524]	; 18490 <close_stdout@@Base+0x5b7c>
   18280:	add	r3, pc, r3
   18284:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18288:	sub	sp, sp, #52	; 0x34
   1828c:	ldr	r2, [r3, r2]
   18290:	mov	r6, r1
   18294:	str	r0, [sp, #28]
   18298:	ldr	r3, [r2]
   1829c:	str	r2, [sp, #20]
   182a0:	str	r3, [sp, #44]	; 0x2c
   182a4:	bl	11704 <strlen@plt>
   182a8:	cmp	r0, #4096	; 0x1000
   182ac:	mov	fp, r0
   182b0:	lslcc	fp, r0, #4
   182b4:	str	r0, [sp, #32]
   182b8:	add	r5, fp, #1
   182bc:	mov	r0, r5
   182c0:	bl	11680 <malloc@plt>
   182c4:	subs	r4, r0, #0
   182c8:	beq	18478 <close_stdout@@Base+0x5b64>
   182cc:	mov	r3, #0
   182d0:	add	r2, sp, #32
   182d4:	mov	r1, r3
   182d8:	str	r2, [sp, #16]
   182dc:	str	r3, [sp]
   182e0:	mov	r2, r3
   182e4:	mov	r0, r6
   182e8:	add	sl, sp, #28
   182ec:	bl	114dc <iconv@plt>
   182f0:	add	r8, sp, #36	; 0x24
   182f4:	add	r7, sp, #40	; 0x28
   182f8:	str	r4, [sp, #36]	; 0x24
   182fc:	str	fp, [sp, #40]	; 0x28
   18300:	b	18364 <close_stdout@@Base+0x5a50>
   18304:	bl	11734 <__errno_location@plt>
   18308:	ldr	r3, [r0]
   1830c:	mov	fp, r0
   18310:	cmp	r3, #22
   18314:	beq	183e0 <close_stdout@@Base+0x5acc>
   18318:	cmp	r3, #7
   1831c:	bne	18440 <close_stdout@@Base+0x5b2c>
   18320:	lsl	r9, r5, #1
   18324:	ldr	r1, [sp, #36]	; 0x24
   18328:	cmp	r5, r9
   1832c:	rsb	r5, r4, r1
   18330:	bcs	18438 <close_stdout@@Base+0x5b24>
   18334:	mov	r0, r4
   18338:	mov	r1, r9
   1833c:	bl	115a8 <realloc@plt>
   18340:	cmp	r0, #0
   18344:	beq	18438 <close_stdout@@Base+0x5b24>
   18348:	sub	r1, r9, #1
   1834c:	add	r2, r0, r5
   18350:	mov	r4, r0
   18354:	rsb	r5, r5, r1
   18358:	str	r5, [sp, #40]	; 0x28
   1835c:	mov	r5, r9
   18360:	str	r2, [sp, #36]	; 0x24
   18364:	str	r7, [sp]
   18368:	mov	r0, r6
   1836c:	mov	r1, sl
   18370:	add	r2, sp, #32
   18374:	mov	r3, r8
   18378:	bl	114dc <iconv@plt>
   1837c:	cmn	r0, #1
   18380:	beq	18304 <close_stdout@@Base+0x59f0>
   18384:	b	183e0 <close_stdout@@Base+0x5acc>
   18388:	bl	11734 <__errno_location@plt>
   1838c:	ldr	r3, [r0]
   18390:	mov	fp, r0
   18394:	cmp	r3, #7
   18398:	bne	18440 <close_stdout@@Base+0x5b2c>
   1839c:	lsl	r9, r5, #1
   183a0:	ldr	r3, [sp, #36]	; 0x24
   183a4:	cmp	r5, r9
   183a8:	rsb	r5, r4, r3
   183ac:	bcs	18438 <close_stdout@@Base+0x5b24>
   183b0:	mov	r0, r4
   183b4:	mov	r1, r9
   183b8:	bl	115a8 <realloc@plt>
   183bc:	cmp	r0, #0
   183c0:	beq	18438 <close_stdout@@Base+0x5b24>
   183c4:	sub	r2, r9, #1
   183c8:	add	r3, r0, r5
   183cc:	mov	r4, r0
   183d0:	rsb	r5, r5, r2
   183d4:	str	r5, [sp, #40]	; 0x28
   183d8:	mov	r5, r9
   183dc:	str	r3, [sp, #36]	; 0x24
   183e0:	mov	r1, #0
   183e4:	str	r7, [sp]
   183e8:	mov	r2, r1
   183ec:	mov	r0, r6
   183f0:	mov	r3, r8
   183f4:	bl	114dc <iconv@plt>
   183f8:	cmn	r0, #1
   183fc:	beq	18388 <close_stdout@@Base+0x5a74>
   18400:	ldr	r3, [sp, #36]	; 0x24
   18404:	mov	r2, #0
   18408:	add	r1, r3, #1
   1840c:	str	r1, [sp, #36]	; 0x24
   18410:	strb	r2, [r3]
   18414:	ldr	r1, [sp, #36]	; 0x24
   18418:	rsb	r1, r4, r1
   1841c:	cmp	r1, r5
   18420:	bcs	18458 <close_stdout@@Base+0x5b44>
   18424:	mov	r0, r4
   18428:	bl	115a8 <realloc@plt>
   1842c:	cmp	r0, #0
   18430:	movne	r4, r0
   18434:	b	18458 <close_stdout@@Base+0x5b44>
   18438:	mov	r3, #12
   1843c:	str	r3, [fp]
   18440:	mov	r0, r4
   18444:	str	r3, [sp, #12]
   18448:	bl	11530 <free@plt>
   1844c:	ldr	r3, [sp, #12]
   18450:	mov	r4, #0
   18454:	str	r3, [fp]
   18458:	ldr	r1, [sp, #20]
   1845c:	mov	r0, r4
   18460:	ldr	r2, [sp, #44]	; 0x2c
   18464:	ldr	r3, [r1]
   18468:	cmp	r2, r3
   1846c:	bne	18488 <close_stdout@@Base+0x5b74>
   18470:	add	sp, sp, #52	; 0x34
   18474:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   18478:	bl	11734 <__errno_location@plt>
   1847c:	mov	r3, #12
   18480:	str	r3, [r0]
   18484:	b	18458 <close_stdout@@Base+0x5b44>
   18488:	bl	11590 <__stack_chk_fail@plt>
   1848c:	andeq	r1, r1, r8, ror sp
   18490:	andeq	r0, r0, r8, ror #2
   18494:	push	{r3, r4, r5, r6, r7, lr}
   18498:	mov	r4, r0
   1849c:	ldrb	r3, [r0]
   184a0:	mov	r5, r1
   184a4:	mov	r6, r2
   184a8:	cmp	r3, #0
   184ac:	beq	184c4 <close_stdout@@Base+0x5bb0>
   184b0:	mov	r0, r1
   184b4:	mov	r1, r2
   184b8:	bl	161f8 <close_stdout@@Base+0x38e4>
   184bc:	cmp	r0, #0
   184c0:	bne	184e0 <close_stdout@@Base+0x5bcc>
   184c4:	mov	r0, r4
   184c8:	bl	11764 <__strdup@plt>
   184cc:	subs	r4, r0, #0
   184d0:	beq	1853c <close_stdout@@Base+0x5c28>
   184d4:	mov	r3, r4
   184d8:	mov	r0, r3
   184dc:	pop	{r3, r4, r5, r6, r7, pc}
   184e0:	mov	r1, r5
   184e4:	mov	r0, r6
   184e8:	bl	1168c <iconv_open@plt>
   184ec:	cmn	r0, #1
   184f0:	mov	r5, r0
   184f4:	beq	18554 <close_stdout@@Base+0x5c40>
   184f8:	mov	r0, r4
   184fc:	mov	r1, r5
   18500:	bl	18278 <close_stdout@@Base+0x5964>
   18504:	subs	r4, r0, #0
   18508:	beq	1855c <close_stdout@@Base+0x5c48>
   1850c:	mov	r0, r5
   18510:	bl	114d0 <iconv_close@plt>
   18514:	cmp	r0, #0
   18518:	bge	184d4 <close_stdout@@Base+0x5bc0>
   1851c:	bl	11734 <__errno_location@plt>
   18520:	ldr	r6, [r0]
   18524:	mov	r5, r0
   18528:	mov	r0, r4
   1852c:	bl	11530 <free@plt>
   18530:	mov	r3, #0
   18534:	str	r6, [r5]
   18538:	b	184d8 <close_stdout@@Base+0x5bc4>
   1853c:	bl	11734 <__errno_location@plt>
   18540:	mov	r3, r4
   18544:	mov	r2, #12
   18548:	str	r2, [r0]
   1854c:	mov	r0, r3
   18550:	pop	{r3, r4, r5, r6, r7, pc}
   18554:	mov	r3, #0
   18558:	b	184d8 <close_stdout@@Base+0x5bc4>
   1855c:	bl	11734 <__errno_location@plt>
   18560:	ldr	r7, [r0]
   18564:	mov	r6, r0
   18568:	mov	r0, r5
   1856c:	bl	114d0 <iconv_close@plt>
   18570:	mov	r3, r4
   18574:	str	r7, [r6]
   18578:	b	184d8 <close_stdout@@Base+0x5bc4>
   1857c:	push	{r4, r5, r6, lr}
   18580:	sub	sp, sp, #8
   18584:	mov	r4, r0
   18588:	bl	117a0 <fileno@plt>
   1858c:	cmp	r0, #0
   18590:	mov	r0, r4
   18594:	blt	18610 <close_stdout@@Base+0x5cfc>
   18598:	bl	116b0 <__freading@plt>
   1859c:	cmp	r0, #0
   185a0:	bne	185dc <close_stdout@@Base+0x5cc8>
   185a4:	mov	r0, r4
   185a8:	bl	1861c <close_stdout@@Base+0x5d08>
   185ac:	cmp	r0, #0
   185b0:	beq	1860c <close_stdout@@Base+0x5cf8>
   185b4:	bl	11734 <__errno_location@plt>
   185b8:	ldr	r6, [r0]
   185bc:	mov	r5, r0
   185c0:	mov	r0, r4
   185c4:	bl	117c4 <fclose@plt>
   185c8:	cmp	r6, #0
   185cc:	mvnne	r0, #0
   185d0:	strne	r6, [r5]
   185d4:	add	sp, sp, #8
   185d8:	pop	{r4, r5, r6, pc}
   185dc:	mov	r0, r4
   185e0:	bl	117a0 <fileno@plt>
   185e4:	mov	r1, #1
   185e8:	mov	r2, #0
   185ec:	mov	r3, #0
   185f0:	str	r1, [sp]
   185f4:	bl	11608 <lseek64@plt>
   185f8:	mvn	r2, #0
   185fc:	mvn	r3, #0
   18600:	cmp	r1, r3
   18604:	cmpeq	r0, r2
   18608:	bne	185a4 <close_stdout@@Base+0x5c90>
   1860c:	mov	r0, r4
   18610:	add	sp, sp, #8
   18614:	pop	{r4, r5, r6, lr}
   18618:	b	117c4 <fclose@plt>
   1861c:	push	{r4, lr}
   18620:	subs	r4, r0, #0
   18624:	sub	sp, sp, #8
   18628:	beq	18638 <close_stdout@@Base+0x5d24>
   1862c:	bl	116b0 <__freading@plt>
   18630:	cmp	r0, #0
   18634:	bne	18648 <close_stdout@@Base+0x5d34>
   18638:	mov	r0, r4
   1863c:	add	sp, sp, #8
   18640:	pop	{r4, lr}
   18644:	b	11500 <fflush@plt>
   18648:	ldr	r3, [r4]
   1864c:	tst	r3, #256	; 0x100
   18650:	beq	18638 <close_stdout@@Base+0x5d24>
   18654:	mov	r3, #1
   18658:	mov	r0, r4
   1865c:	str	r3, [sp]
   18660:	mov	r2, #0
   18664:	mov	r3, #0
   18668:	bl	1867c <close_stdout@@Base+0x5d68>
   1866c:	mov	r0, r4
   18670:	add	sp, sp, #8
   18674:	pop	{r4, lr}
   18678:	b	11500 <fflush@plt>
   1867c:	push	{r4, r5, r6, r7, lr}
   18680:	sub	sp, sp, #20
   18684:	ldmib	r0, {r1, ip}
   18688:	mov	r6, r0
   1868c:	ldr	r4, [sp, #40]	; 0x28
   18690:	cmp	ip, r1
   18694:	beq	186ac <close_stdout@@Base+0x5d98>
   18698:	str	r4, [sp, #40]	; 0x28
   1869c:	mov	r0, r6
   186a0:	add	sp, sp, #20
   186a4:	pop	{r4, r5, r6, r7, lr}
   186a8:	b	117dc <fseeko64@plt>
   186ac:	ldr	ip, [r0, #20]
   186b0:	ldr	r1, [r0, #16]
   186b4:	cmp	ip, r1
   186b8:	bne	18698 <close_stdout@@Base+0x5d84>
   186bc:	ldr	r7, [r0, #36]	; 0x24
   186c0:	cmp	r7, #0
   186c4:	bne	18698 <close_stdout@@Base+0x5d84>
   186c8:	str	r2, [sp, #12]
   186cc:	mvn	r5, #0
   186d0:	str	r3, [sp, #8]
   186d4:	bl	117a0 <fileno@plt>
   186d8:	str	r4, [sp]
   186dc:	mvn	r4, #0
   186e0:	ldr	r2, [sp, #12]
   186e4:	ldr	r3, [sp, #8]
   186e8:	bl	11608 <lseek64@plt>
   186ec:	mov	r2, r0
   186f0:	mov	r3, r1
   186f4:	cmp	r3, r5
   186f8:	cmpeq	r2, r4
   186fc:	beq	1871c <close_stdout@@Base+0x5e08>
   18700:	ldr	r1, [r6]
   18704:	mov	r0, r7
   18708:	strd	r2, [r6, #80]	; 0x50
   1870c:	bic	r3, r1, #16
   18710:	str	r3, [r6]
   18714:	add	sp, sp, #20
   18718:	pop	{r4, r5, r6, r7, pc}
   1871c:	mvn	r0, #0
   18720:	b	18714 <close_stdout@@Base+0x5e00>
   18724:	adds	r0, r0, #8
   18728:	push	{r3, r4, r5, lr}
   1872c:	bcs	18780 <close_stdout@@Base+0x5e6c>
   18730:	bl	11680 <malloc@plt>
   18734:	subs	r1, r0, #0
   18738:	beq	18780 <close_stdout@@Base+0x5e6c>
   1873c:	add	r2, r1, #8
   18740:	movw	r3, #65281	; 0xff01
   18744:	movt	r3, #65280	; 0xff00
   18748:	ldr	ip, [pc, #56]	; 18788 <close_stdout@@Base+0x5e74>
   1874c:	movw	r4, #64330	; 0xfb4a
   18750:	movt	r4, #5141	; 0x1415
   18754:	umull	r5, r3, r3, r2
   18758:	add	ip, pc, ip
   1875c:	str	r4, [r1, #4]
   18760:	mov	r0, r2
   18764:	lsr	r3, r3, #8
   18768:	add	r3, r3, r3, lsl #8
   1876c:	rsb	r3, r3, r2
   18770:	ldr	r4, [ip, r3, lsl #2]
   18774:	str	r2, [ip, r3, lsl #2]
   18778:	str	r4, [r1]
   1877c:	pop	{r3, r4, r5, pc}
   18780:	mov	r0, #0
   18784:	pop	{r3, r4, r5, pc}
   18788:	muleq	r1, r8, sp
   1878c:	cmp	r0, #0
   18790:	bxeq	lr
   18794:	ldr	r2, [r0, #-4]
   18798:	movw	r3, #64330	; 0xfb4a
   1879c:	movt	r3, #5141	; 0x1415
   187a0:	cmp	r2, r3
   187a4:	bxne	lr
   187a8:	movw	r3, #65281	; 0xff01
   187ac:	movt	r3, #65280	; 0xff00
   187b0:	ldr	r1, [pc, #88]	; 18810 <close_stdout@@Base+0x5efc>
   187b4:	umull	r2, r3, r3, r0
   187b8:	add	r1, pc, r1
   187bc:	lsr	r3, r3, #8
   187c0:	add	r3, r3, r3, lsl #8
   187c4:	rsb	r3, r3, r0
   187c8:	ldr	r2, [r1, r3, lsl #2]
   187cc:	cmp	r2, #0
   187d0:	bxeq	lr
   187d4:	cmp	r0, r2
   187d8:	addeq	r2, r1, r3, lsl #2
   187dc:	bne	187f0 <close_stdout@@Base+0x5edc>
   187e0:	b	18804 <close_stdout@@Base+0x5ef0>
   187e4:	cmp	r0, r3
   187e8:	beq	18800 <close_stdout@@Base+0x5eec>
   187ec:	mov	r2, r3
   187f0:	ldr	r3, [r2, #-8]
   187f4:	cmp	r3, #0
   187f8:	bne	187e4 <close_stdout@@Base+0x5ed0>
   187fc:	bx	lr
   18800:	sub	r2, r2, #8
   18804:	ldr	ip, [r0, #-8]!
   18808:	str	ip, [r2]
   1880c:	b	11530 <free@plt>
   18810:	andeq	r1, r1, r8, lsr sp
   18814:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   18818:	sub	sp, sp, #76	; 0x4c
   1881c:	ldr	r8, [pc, #524]	; 18a30 <close_stdout@@Base+0x611c>
   18820:	mov	sl, r0
   18824:	ldr	r3, [pc, #520]	; 18a34 <close_stdout@@Base+0x6120>
   18828:	add	r8, pc, r8
   1882c:	ldr	r3, [r8, r3]
   18830:	str	r3, [sp, #4]
   18834:	ldr	r3, [r3]
   18838:	str	r3, [sp, #68]	; 0x44
   1883c:	bl	11620 <__ctype_get_mb_cur_max@plt>
   18840:	cmp	r0, #1
   18844:	bls	189e0 <close_stdout@@Base+0x60cc>
   18848:	mov	r3, #0
   1884c:	add	r7, sp, #16
   18850:	add	r9, sp, #40	; 0x28
   18854:	mov	fp, r3
   18858:	mov	r4, sl
   1885c:	mov	r6, r3
   18860:	mov	r5, #1
   18864:	str	r3, [sp, #16]
   18868:	strb	r3, [sp, #24]
   1886c:	str	sl, [sp, #28]
   18870:	strb	r3, [sp, #12]
   18874:	str	r3, [r7, #4]
   18878:	ldrb	r2, [sp, #12]
   1887c:	cmp	r2, #0
   18880:	bne	188f8 <close_stdout@@Base+0x5fe4>
   18884:	ldr	r2, [pc, #428]	; 18a38 <close_stdout@@Base+0x6124>
   18888:	ldrb	r3, [r4]
   1888c:	ldr	r1, [r8, r2]
   18890:	and	r2, r3, #31
   18894:	lsr	r3, r3, #5
   18898:	ldr	r3, [r1, r3, lsl #2]
   1889c:	lsr	r3, r3, r2
   188a0:	tst	r3, #1
   188a4:	beq	188e4 <close_stdout@@Base+0x5fd0>
   188a8:	str	r5, [sp, #32]
   188ac:	ldrb	r4, [r4]
   188b0:	strb	r5, [sp, #36]	; 0x24
   188b4:	cmp	r4, #0
   188b8:	strb	r5, [sp, #24]
   188bc:	str	r4, [sp, #40]	; 0x28
   188c0:	bne	1895c <close_stdout@@Base+0x6048>
   188c4:	mov	r0, fp
   188c8:	ldr	r1, [sp, #4]
   188cc:	ldr	r2, [sp, #68]	; 0x44
   188d0:	ldr	r3, [r1]
   188d4:	cmp	r2, r3
   188d8:	bne	18a0c <close_stdout@@Base+0x60f8>
   188dc:	add	sp, sp, #76	; 0x4c
   188e0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   188e4:	mov	r0, r7
   188e8:	bl	11560 <mbsinit@plt>
   188ec:	cmp	r0, #0
   188f0:	beq	189ec <close_stdout@@Base+0x60d8>
   188f4:	strb	r5, [sp, #12]
   188f8:	bl	11620 <__ctype_get_mb_cur_max@plt>
   188fc:	mov	r1, r0
   18900:	mov	r0, r4
   18904:	bl	14fdc <close_stdout@@Base+0x26c8>
   18908:	mov	r1, r4
   1890c:	mov	r3, r7
   18910:	mov	r2, r0
   18914:	mov	r0, r9
   18918:	bl	11644 <mbrtowc@plt>
   1891c:	cmn	r0, #1
   18920:	str	r0, [sp, #32]
   18924:	beq	18978 <close_stdout@@Base+0x6064>
   18928:	cmn	r0, #2
   1892c:	beq	189c8 <close_stdout@@Base+0x60b4>
   18930:	cmp	r0, #0
   18934:	beq	18988 <close_stdout@@Base+0x6074>
   18938:	ldr	r4, [sp, #40]	; 0x28
   1893c:	mov	r0, r7
   18940:	strb	r5, [sp, #36]	; 0x24
   18944:	bl	11560 <mbsinit@plt>
   18948:	strb	r5, [sp, #24]
   1894c:	cmp	r0, #0
   18950:	strbne	r6, [sp, #12]
   18954:	cmp	r4, #0
   18958:	beq	188c4 <close_stdout@@Base+0x5fb0>
   1895c:	ldr	r4, [sp, #28]
   18960:	ldr	r3, [sp, #32]
   18964:	add	fp, fp, #1
   18968:	strb	r6, [sp, #24]
   1896c:	add	r4, r4, r3
   18970:	str	r4, [sp, #28]
   18974:	b	18878 <close_stdout@@Base+0x5f64>
   18978:	str	r5, [sp, #32]
   1897c:	strb	r6, [sp, #36]	; 0x24
   18980:	ldr	r4, [sp, #28]
   18984:	b	18960 <close_stdout@@Base+0x604c>
   18988:	ldr	r4, [sp, #28]
   1898c:	str	r5, [sp, #32]
   18990:	ldrb	r3, [r4]
   18994:	cmp	r3, #0
   18998:	bne	18a10 <close_stdout@@Base+0x60fc>
   1899c:	ldr	r4, [sp, #40]	; 0x28
   189a0:	cmp	r4, #0
   189a4:	beq	1893c <close_stdout@@Base+0x6028>
   189a8:	ldr	r0, [pc, #140]	; 18a3c <close_stdout@@Base+0x6128>
   189ac:	mov	r2, #179	; 0xb3
   189b0:	ldr	r1, [pc, #136]	; 18a40 <close_stdout@@Base+0x612c>
   189b4:	ldr	r3, [pc, #136]	; 18a44 <close_stdout@@Base+0x6130>
   189b8:	add	r0, pc, r0
   189bc:	add	r1, pc, r1
   189c0:	add	r3, pc, r3
   189c4:	bl	11890 <__assert_fail@plt>
   189c8:	ldr	r4, [sp, #28]
   189cc:	mov	r0, r4
   189d0:	bl	11704 <strlen@plt>
   189d4:	strb	r6, [sp, #36]	; 0x24
   189d8:	str	r0, [sp, #32]
   189dc:	b	18960 <close_stdout@@Base+0x604c>
   189e0:	mov	r0, sl
   189e4:	bl	11704 <strlen@plt>
   189e8:	b	188c8 <close_stdout@@Base+0x5fb4>
   189ec:	ldr	r0, [pc, #84]	; 18a48 <close_stdout@@Base+0x6134>
   189f0:	mov	r2, #150	; 0x96
   189f4:	ldr	r1, [pc, #80]	; 18a4c <close_stdout@@Base+0x6138>
   189f8:	ldr	r3, [pc, #80]	; 18a50 <close_stdout@@Base+0x613c>
   189fc:	add	r0, pc, r0
   18a00:	add	r1, pc, r1
   18a04:	add	r3, pc, r3
   18a08:	bl	11890 <__assert_fail@plt>
   18a0c:	bl	11590 <__stack_chk_fail@plt>
   18a10:	ldr	r0, [pc, #60]	; 18a54 <close_stdout@@Base+0x6140>
   18a14:	mov	r2, #178	; 0xb2
   18a18:	ldr	r1, [pc, #56]	; 18a58 <close_stdout@@Base+0x6144>
   18a1c:	ldr	r3, [pc, #56]	; 18a5c <close_stdout@@Base+0x6148>
   18a20:	add	r0, pc, r0
   18a24:	add	r1, pc, r1
   18a28:	add	r3, pc, r3
   18a2c:	bl	11890 <__assert_fail@plt>
   18a30:	ldrdeq	r1, [r1], -r0
   18a34:	andeq	r0, r0, r8, ror #2
   18a38:	andeq	r0, r0, r4, ror #2
   18a3c:	andeq	r0, r0, r4, lsr sp
   18a40:	andeq	r0, r0, r8, lsl #26
   18a44:			; <UNDEFINED> instruction: 0x000011b4
   18a48:			; <UNDEFINED> instruction: 0x00000cb0
   18a4c:	andeq	r0, r0, r4, asr #25
   18a50:	andeq	r1, r0, r0, ror r1
   18a54:			; <UNDEFINED> instruction: 0x00000cb4
   18a58:	andeq	r0, r0, r0, lsr #25
   18a5c:	andeq	r1, r0, ip, asr #2
   18a60:	subs	r2, r1, #1
   18a64:	bxeq	lr
   18a68:	bcc	18c40 <close_stdout@@Base+0x632c>
   18a6c:	cmp	r0, r1
   18a70:	bls	18c24 <close_stdout@@Base+0x6310>
   18a74:	tst	r1, r2
   18a78:	beq	18c30 <close_stdout@@Base+0x631c>
   18a7c:	clz	r3, r0
   18a80:	clz	r2, r1
   18a84:	sub	r3, r2, r3
   18a88:	rsbs	r3, r3, #31
   18a8c:	addne	r3, r3, r3, lsl #1
   18a90:	mov	r2, #0
   18a94:	addne	pc, pc, r3, lsl #2
   18a98:	nop	{0}
   18a9c:	cmp	r0, r1, lsl #31
   18aa0:	adc	r2, r2, r2
   18aa4:	subcs	r0, r0, r1, lsl #31
   18aa8:	cmp	r0, r1, lsl #30
   18aac:	adc	r2, r2, r2
   18ab0:	subcs	r0, r0, r1, lsl #30
   18ab4:	cmp	r0, r1, lsl #29
   18ab8:	adc	r2, r2, r2
   18abc:	subcs	r0, r0, r1, lsl #29
   18ac0:	cmp	r0, r1, lsl #28
   18ac4:	adc	r2, r2, r2
   18ac8:	subcs	r0, r0, r1, lsl #28
   18acc:	cmp	r0, r1, lsl #27
   18ad0:	adc	r2, r2, r2
   18ad4:	subcs	r0, r0, r1, lsl #27
   18ad8:	cmp	r0, r1, lsl #26
   18adc:	adc	r2, r2, r2
   18ae0:	subcs	r0, r0, r1, lsl #26
   18ae4:	cmp	r0, r1, lsl #25
   18ae8:	adc	r2, r2, r2
   18aec:	subcs	r0, r0, r1, lsl #25
   18af0:	cmp	r0, r1, lsl #24
   18af4:	adc	r2, r2, r2
   18af8:	subcs	r0, r0, r1, lsl #24
   18afc:	cmp	r0, r1, lsl #23
   18b00:	adc	r2, r2, r2
   18b04:	subcs	r0, r0, r1, lsl #23
   18b08:	cmp	r0, r1, lsl #22
   18b0c:	adc	r2, r2, r2
   18b10:	subcs	r0, r0, r1, lsl #22
   18b14:	cmp	r0, r1, lsl #21
   18b18:	adc	r2, r2, r2
   18b1c:	subcs	r0, r0, r1, lsl #21
   18b20:	cmp	r0, r1, lsl #20
   18b24:	adc	r2, r2, r2
   18b28:	subcs	r0, r0, r1, lsl #20
   18b2c:	cmp	r0, r1, lsl #19
   18b30:	adc	r2, r2, r2
   18b34:	subcs	r0, r0, r1, lsl #19
   18b38:	cmp	r0, r1, lsl #18
   18b3c:	adc	r2, r2, r2
   18b40:	subcs	r0, r0, r1, lsl #18
   18b44:	cmp	r0, r1, lsl #17
   18b48:	adc	r2, r2, r2
   18b4c:	subcs	r0, r0, r1, lsl #17
   18b50:	cmp	r0, r1, lsl #16
   18b54:	adc	r2, r2, r2
   18b58:	subcs	r0, r0, r1, lsl #16
   18b5c:	cmp	r0, r1, lsl #15
   18b60:	adc	r2, r2, r2
   18b64:	subcs	r0, r0, r1, lsl #15
   18b68:	cmp	r0, r1, lsl #14
   18b6c:	adc	r2, r2, r2
   18b70:	subcs	r0, r0, r1, lsl #14
   18b74:	cmp	r0, r1, lsl #13
   18b78:	adc	r2, r2, r2
   18b7c:	subcs	r0, r0, r1, lsl #13
   18b80:	cmp	r0, r1, lsl #12
   18b84:	adc	r2, r2, r2
   18b88:	subcs	r0, r0, r1, lsl #12
   18b8c:	cmp	r0, r1, lsl #11
   18b90:	adc	r2, r2, r2
   18b94:	subcs	r0, r0, r1, lsl #11
   18b98:	cmp	r0, r1, lsl #10
   18b9c:	adc	r2, r2, r2
   18ba0:	subcs	r0, r0, r1, lsl #10
   18ba4:	cmp	r0, r1, lsl #9
   18ba8:	adc	r2, r2, r2
   18bac:	subcs	r0, r0, r1, lsl #9
   18bb0:	cmp	r0, r1, lsl #8
   18bb4:	adc	r2, r2, r2
   18bb8:	subcs	r0, r0, r1, lsl #8
   18bbc:	cmp	r0, r1, lsl #7
   18bc0:	adc	r2, r2, r2
   18bc4:	subcs	r0, r0, r1, lsl #7
   18bc8:	cmp	r0, r1, lsl #6
   18bcc:	adc	r2, r2, r2
   18bd0:	subcs	r0, r0, r1, lsl #6
   18bd4:	cmp	r0, r1, lsl #5
   18bd8:	adc	r2, r2, r2
   18bdc:	subcs	r0, r0, r1, lsl #5
   18be0:	cmp	r0, r1, lsl #4
   18be4:	adc	r2, r2, r2
   18be8:	subcs	r0, r0, r1, lsl #4
   18bec:	cmp	r0, r1, lsl #3
   18bf0:	adc	r2, r2, r2
   18bf4:	subcs	r0, r0, r1, lsl #3
   18bf8:	cmp	r0, r1, lsl #2
   18bfc:	adc	r2, r2, r2
   18c00:	subcs	r0, r0, r1, lsl #2
   18c04:	cmp	r0, r1, lsl #1
   18c08:	adc	r2, r2, r2
   18c0c:	subcs	r0, r0, r1, lsl #1
   18c10:	cmp	r0, r1
   18c14:	adc	r2, r2, r2
   18c18:	subcs	r0, r0, r1
   18c1c:	mov	r0, r2
   18c20:	bx	lr
   18c24:	moveq	r0, #1
   18c28:	movne	r0, #0
   18c2c:	bx	lr
   18c30:	clz	r2, r1
   18c34:	rsb	r2, r2, #31
   18c38:	lsr	r0, r0, r2
   18c3c:	bx	lr
   18c40:	cmp	r0, #0
   18c44:	mvnne	r0, #0
   18c48:	b	18c6c <close_stdout@@Base+0x6358>
   18c4c:	cmp	r1, #0
   18c50:	beq	18c40 <close_stdout@@Base+0x632c>
   18c54:	push	{r0, r1, lr}
   18c58:	bl	18a60 <close_stdout@@Base+0x614c>
   18c5c:	pop	{r1, r2, lr}
   18c60:	mul	r3, r2, r0
   18c64:	sub	r1, r1, r3
   18c68:	bx	lr
   18c6c:	push	{r1, lr}
   18c70:	mov	r0, #8
   18c74:	bl	114c4 <raise@plt>
   18c78:	pop	{r1, pc}
   18c7c:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   18c80:	mov	r7, r0
   18c84:	ldr	r6, [pc, #76]	; 18cd8 <close_stdout@@Base+0x63c4>
   18c88:	mov	r8, r1
   18c8c:	ldr	r5, [pc, #72]	; 18cdc <close_stdout@@Base+0x63c8>
   18c90:	mov	r9, r2
   18c94:	add	r6, pc, r6
   18c98:	bl	11480 <fdopen@plt-0x20>
   18c9c:	add	r5, pc, r5
   18ca0:	rsb	r6, r5, r6
   18ca4:	asrs	r6, r6, #2
   18ca8:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   18cac:	sub	r5, r5, #4
   18cb0:	mov	r4, #0
   18cb4:	add	r4, r4, #1
   18cb8:	ldr	r3, [r5, #4]!
   18cbc:	mov	r0, r7
   18cc0:	mov	r1, r8
   18cc4:	mov	r2, r9
   18cc8:	blx	r3
   18ccc:	cmp	r4, r6
   18cd0:	bne	18cb4 <close_stdout@@Base+0x63a0>
   18cd4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   18cd8:	andeq	r1, r1, r0, asr #3
   18cdc:			; <UNDEFINED> instruction: 0x000111b4
   18ce0:	bx	lr
   18ce4:	ldr	r3, [pc, #28]	; 18d08 <close_stdout@@Base+0x63f4>
   18ce8:	mov	r1, #0
   18cec:	ldr	r2, [pc, #24]	; 18d0c <close_stdout@@Base+0x63f8>
   18cf0:	add	r3, pc, r3
   18cf4:	ldr	r3, [r3, r2]
   18cf8:	cmp	r3, #0
   18cfc:	ldrne	r2, [r3]
   18d00:	moveq	r2, r3
   18d04:	b	11758 <__cxa_atexit@plt>
   18d08:	andeq	r1, r1, r8, lsl #6
   18d0c:	andeq	r0, r0, r0, lsl #3

Disassembly of section .fini:

00018d10 <.fini>:
   18d10:	push	{r3, lr}
   18d14:	pop	{r3, pc}
