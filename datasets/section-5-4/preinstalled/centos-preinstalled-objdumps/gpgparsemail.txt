
centos-preinstalled/gpgparsemail:     file format elf32-littlearm


Disassembly of section .init:

00010b98 <.init>:
   10b98:	push	{r3, lr}
   10b9c:	bl	10ff4 <__assert_fail@plt+0x220>
   10ba0:	pop	{r3, pc}

Disassembly of section .plt:

00010ba4 <fdopen@plt-0x14>:
   10ba4:	push	{lr}		; (str lr, [sp, #-4]!)
   10ba8:	ldr	lr, [pc, #4]	; 10bb4 <fdopen@plt-0x4>
   10bac:	add	lr, pc, lr
   10bb0:	ldr	pc, [lr, #8]!
   10bb4:	andeq	r4, r1, ip, asr #8

00010bb8 <fdopen@plt>:
   10bb8:	add	ip, pc, #0, 12
   10bbc:	add	ip, ip, #20, 20	; 0x14000
   10bc0:	ldr	pc, [ip, #1100]!	; 0x44c

00010bc4 <calloc@plt>:
   10bc4:	add	ip, pc, #0, 12
   10bc8:	add	ip, ip, #20, 20	; 0x14000
   10bcc:	ldr	pc, [ip, #1092]!	; 0x444

00010bd0 <strcmp@plt>:
   10bd0:	add	ip, pc, #0, 12
   10bd4:	add	ip, ip, #20, 20	; 0x14000
   10bd8:	ldr	pc, [ip, #1084]!	; 0x43c

00010bdc <fflush@plt>:
   10bdc:	add	ip, pc, #0, 12
   10be0:	add	ip, ip, #20, 20	; 0x14000
   10be4:	ldr	pc, [ip, #1076]!	; 0x434

00010be8 <free@plt>:
   10be8:	add	ip, pc, #0, 12
   10bec:	add	ip, ip, #20, 20	; 0x14000
   10bf0:	ldr	pc, [ip, #1068]!	; 0x42c

00010bf4 <fgets@plt>:
   10bf4:	add	ip, pc, #0, 12
   10bf8:	add	ip, ip, #20, 20	; 0x14000
   10bfc:	ldr	pc, [ip, #1060]!	; 0x424

00010c00 <ferror@plt>:
   10c00:	add	ip, pc, #0, 12
   10c04:	add	ip, ip, #20, 20	; 0x14000
   10c08:	ldr	pc, [ip, #1052]!	; 0x41c

00010c0c <memcpy@plt>:
   10c0c:	add	ip, pc, #0, 12
   10c10:	add	ip, ip, #20, 20	; 0x14000
   10c14:	ldr	pc, [ip, #1044]!	; 0x414

00010c18 <execlp@plt>:
   10c18:	add	ip, pc, #0, 12
   10c1c:	add	ip, ip, #20, 20	; 0x14000
   10c20:	ldr	pc, [ip, #1036]!	; 0x40c

00010c24 <signal@plt>:
   10c24:	add	ip, pc, #0, 12
   10c28:	add	ip, ip, #20, 20	; 0x14000
   10c2c:	ldr	pc, [ip, #1028]!	; 0x404

00010c30 <_IO_getc@plt>:
   10c30:	add	ip, pc, #0, 12
   10c34:	add	ip, ip, #20, 20	; 0x14000
   10c38:	ldr	pc, [ip, #1020]!	; 0x3fc

00010c3c <memcmp@plt>:
   10c3c:	add	ip, pc, #0, 12
   10c40:	add	ip, ip, #20, 20	; 0x14000
   10c44:	ldr	pc, [ip, #1012]!	; 0x3f4

00010c48 <stpcpy@plt>:
   10c48:	add	ip, pc, #0, 12
   10c4c:	add	ip, ip, #20, 20	; 0x14000
   10c50:	ldr	pc, [ip, #1004]!	; 0x3ec

00010c54 <__stack_chk_fail@plt>:
   10c54:	add	ip, pc, #0, 12
   10c58:	add	ip, ip, #20, 20	; 0x14000
   10c5c:	ldr	pc, [ip, #996]!	; 0x3e4

00010c60 <rewind@plt>:
   10c60:	add	ip, pc, #0, 12
   10c64:	add	ip, ip, #20, 20	; 0x14000
   10c68:	ldr	pc, [ip, #988]!	; 0x3dc

00010c6c <dup2@plt>:
   10c6c:	add	ip, pc, #0, 12
   10c70:	add	ip, ip, #20, 20	; 0x14000
   10c74:	ldr	pc, [ip, #980]!	; 0x3d4

00010c78 <tmpfile64@plt>:
   10c78:	add	ip, pc, #0, 12
   10c7c:	add	ip, ip, #20, 20	; 0x14000
   10c80:	ldr	pc, [ip, #972]!	; 0x3cc

00010c84 <_IO_putc@plt>:
   10c84:	add	ip, pc, #0, 12
   10c88:	add	ip, ip, #20, 20	; 0x14000
   10c8c:	ldr	pc, [ip, #964]!	; 0x3c4

00010c90 <fwrite@plt>:
   10c90:	add	ip, pc, #0, 12
   10c94:	add	ip, ip, #20, 20	; 0x14000
   10c98:	ldr	pc, [ip, #956]!	; 0x3bc

00010c9c <waitpid@plt>:
   10c9c:	add	ip, pc, #0, 12
   10ca0:	add	ip, ip, #20, 20	; 0x14000
   10ca4:	ldr	pc, [ip, #948]!	; 0x3b4

00010ca8 <strcpy@plt>:
   10ca8:	add	ip, pc, #0, 12
   10cac:	add	ip, ip, #20, 20	; 0x14000
   10cb0:	ldr	pc, [ip, #940]!	; 0x3ac

00010cb4 <open64@plt>:
   10cb4:	add	ip, pc, #0, 12
   10cb8:	add	ip, ip, #20, 20	; 0x14000
   10cbc:	ldr	pc, [ip, #932]!	; 0x3a4

00010cc0 <puts@plt>:
   10cc0:	add	ip, pc, #0, 12
   10cc4:	add	ip, ip, #20, 20	; 0x14000
   10cc8:	ldr	pc, [ip, #924]!	; 0x39c

00010ccc <malloc@plt>:
   10ccc:	add	ip, pc, #0, 12
   10cd0:	add	ip, ip, #20, 20	; 0x14000
   10cd4:	ldr	pc, [ip, #916]!	; 0x394

00010cd8 <__libc_start_main@plt>:
   10cd8:	add	ip, pc, #0, 12
   10cdc:	add	ip, ip, #20, 20	; 0x14000
   10ce0:	ldr	pc, [ip, #908]!	; 0x38c

00010ce4 <strerror@plt>:
   10ce4:	add	ip, pc, #0, 12
   10ce8:	add	ip, ip, #20, 20	; 0x14000
   10cec:	ldr	pc, [ip, #900]!	; 0x384

00010cf0 <__vfprintf_chk@plt>:
   10cf0:	add	ip, pc, #0, 12
   10cf4:	add	ip, ip, #20, 20	; 0x14000
   10cf8:	ldr	pc, [ip, #892]!	; 0x37c

00010cfc <__gmon_start__@plt>:
   10cfc:	add	ip, pc, #0, 12
   10d00:	add	ip, ip, #20, 20	; 0x14000
   10d04:	ldr	pc, [ip, #884]!	; 0x374

00010d08 <exit@plt>:
   10d08:	add	ip, pc, #0, 12
   10d0c:	add	ip, ip, #20, 20	; 0x14000
   10d10:	ldr	pc, [ip, #876]!	; 0x36c

00010d14 <strlen@plt>:
   10d14:	add	ip, pc, #0, 12
   10d18:	add	ip, ip, #20, 20	; 0x14000
   10d1c:	ldr	pc, [ip, #868]!	; 0x364

00010d20 <strchr@plt>:
   10d20:	add	ip, pc, #0, 12
   10d24:	add	ip, ip, #20, 20	; 0x14000
   10d28:	ldr	pc, [ip, #860]!	; 0x35c

00010d2c <__errno_location@plt>:
   10d2c:	add	ip, pc, #0, 12
   10d30:	add	ip, ip, #20, 20	; 0x14000
   10d34:	ldr	pc, [ip, #852]!	; 0x354

00010d38 <__sprintf_chk@plt>:
   10d38:	add	ip, pc, #0, 12
   10d3c:	add	ip, ip, #20, 20	; 0x14000
   10d40:	ldr	pc, [ip, #844]!	; 0x34c

00010d44 <memset@plt>:
   10d44:	add	ip, pc, #0, 12
   10d48:	add	ip, ip, #20, 20	; 0x14000
   10d4c:	ldr	pc, [ip, #836]!	; 0x344

00010d50 <__printf_chk@plt>:
   10d50:	add	ip, pc, #0, 12
   10d54:	add	ip, ip, #20, 20	; 0x14000
   10d58:	ldr	pc, [ip, #828]!	; 0x33c

00010d5c <fileno@plt>:
   10d5c:	add	ip, pc, #0, 12
   10d60:	add	ip, ip, #20, 20	; 0x14000
   10d64:	ldr	pc, [ip, #820]!	; 0x334

00010d68 <__fprintf_chk@plt>:
   10d68:	add	ip, pc, #0, 12
   10d6c:	add	ip, ip, #20, 20	; 0x14000
   10d70:	ldr	pc, [ip, #812]!	; 0x32c

00010d74 <fclose@plt>:
   10d74:	add	ip, pc, #0, 12
   10d78:	add	ip, ip, #20, 20	; 0x14000
   10d7c:	ldr	pc, [ip, #804]!	; 0x324

00010d80 <pipe@plt>:
   10d80:	add	ip, pc, #0, 12
   10d84:	add	ip, ip, #20, 20	; 0x14000
   10d88:	ldr	pc, [ip, #796]!	; 0x31c

00010d8c <fork@plt>:
   10d8c:	add	ip, pc, #0, 12
   10d90:	add	ip, ip, #20, 20	; 0x14000
   10d94:	ldr	pc, [ip, #788]!	; 0x314

00010d98 <fopen64@plt>:
   10d98:	add	ip, pc, #0, 12
   10d9c:	add	ip, ip, #20, 20	; 0x14000
   10da0:	ldr	pc, [ip, #780]!	; 0x30c

00010da4 <fputs@plt>:
   10da4:	add	ip, pc, #0, 12
   10da8:	add	ip, ip, #20, 20	; 0x14000
   10dac:	ldr	pc, [ip, #772]!	; 0x304

00010db0 <strncmp@plt>:
   10db0:	add	ip, pc, #0, 12
   10db4:	add	ip, ip, #20, 20	; 0x14000
   10db8:	ldr	pc, [ip, #764]!	; 0x2fc

00010dbc <abort@plt>:
   10dbc:	add	ip, pc, #0, 12
   10dc0:	add	ip, ip, #20, 20	; 0x14000
   10dc4:	ldr	pc, [ip, #756]!	; 0x2f4

00010dc8 <close@plt>:
   10dc8:	add	ip, pc, #0, 12
   10dcc:	add	ip, ip, #20, 20	; 0x14000
   10dd0:	ldr	pc, [ip, #748]!	; 0x2ec

00010dd4 <__assert_fail@plt>:
   10dd4:	add	ip, pc, #0, 12
   10dd8:	add	ip, ip, #20, 20	; 0x14000
   10ddc:	ldr	pc, [ip, #740]!	; 0x2e4

Disassembly of section .text:

00010de0 <.text>:
   10de0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   10de4:	subs	r5, r0, #0
   10de8:	mov	r6, r1
   10dec:	movw	r7, #20716	; 0x50ec
   10df0:	subne	r5, r5, #1
   10df4:	addne	r6, r1, #4
   10df8:	mvn	r3, #0
   10dfc:	movt	r7, #2
   10e00:	mov	r8, #1
   10e04:	b	10e1c <__assert_fail@plt+0x48>
   10e08:	add	r6, r6, #4
   10e0c:	sub	r2, r5, #1
   10e10:	str	r8, [r7]
   10e14:	mov	r3, r5
   10e18:	mov	r5, r2
   10e1c:	cmp	r3, r5
   10e20:	cmpne	r5, #0
   10e24:	beq	10f00 <__assert_fail@plt+0x12c>
   10e28:	ldr	r4, [r6]
   10e2c:	ldrb	r3, [r4]
   10e30:	cmp	r3, #45	; 0x2d
   10e34:	bne	10e50 <__assert_fail@plt+0x7c>
   10e38:	ldrb	r3, [r4, #1]
   10e3c:	cmp	r3, #45	; 0x2d
   10e40:	bne	10e50 <__assert_fail@plt+0x7c>
   10e44:	ldrb	r3, [r4, #2]
   10e48:	cmp	r3, #0
   10e4c:	beq	10ef8 <__assert_fail@plt+0x124>
   10e50:	movw	r1, #15908	; 0x3e24
   10e54:	mov	r0, r4
   10e58:	movt	r1, #1
   10e5c:	bl	10bd0 <strcmp@plt>
   10e60:	subs	r9, r0, #0
   10e64:	beq	10f74 <__assert_fail@plt+0x1a0>
   10e68:	movw	r1, #16404	; 0x4014
   10e6c:	mov	r0, r4
   10e70:	movt	r1, #1
   10e74:	bl	10bd0 <strcmp@plt>
   10e78:	cmp	r0, #0
   10e7c:	beq	10e08 <__assert_fail@plt+0x34>
   10e80:	movw	r1, #16416	; 0x4020
   10e84:	mov	r0, r4
   10e88:	movt	r1, #1
   10e8c:	bl	10bd0 <strcmp@plt>
   10e90:	cmp	r0, #0
   10e94:	bne	10eac <__assert_fail@plt+0xd8>
   10e98:	str	r8, [r7, #4]
   10e9c:	add	r6, r6, #4
   10ea0:	str	r8, [r7]
   10ea4:	sub	r2, r5, #1
   10ea8:	b	10e14 <__assert_fail@plt+0x40>
   10eac:	movw	r1, #16424	; 0x4028
   10eb0:	mov	r0, r4
   10eb4:	movt	r1, #1
   10eb8:	bl	10bd0 <strcmp@plt>
   10ebc:	cmp	r0, #0
   10ec0:	streq	r8, [r7, #8]
   10ec4:	addeq	r6, r6, #4
   10ec8:	subeq	r2, r5, #1
   10ecc:	beq	10e14 <__assert_fail@plt+0x40>
   10ed0:	mov	r0, r4
   10ed4:	movw	r1, #16436	; 0x4034
   10ed8:	movt	r1, #1
   10edc:	bl	10bd0 <strcmp@plt>
   10ee0:	cmp	r0, #0
   10ee4:	streq	r8, [r7, #12]
   10ee8:	addeq	r6, r6, #4
   10eec:	subeq	r2, r5, #1
   10ef0:	movne	r2, r5
   10ef4:	b	10e14 <__assert_fail@plt+0x40>
   10ef8:	sub	r5, r5, #1
   10efc:	add	r6, r6, #4
   10f00:	cmp	r5, #1
   10f04:	bgt	10f88 <__assert_fail@plt+0x1b4>
   10f08:	mov	r0, #13
   10f0c:	mov	r1, #1
   10f10:	bl	10c24 <signal@plt>
   10f14:	cmp	r5, #0
   10f18:	beq	10f5c <__assert_fail@plt+0x188>
   10f1c:	ldr	r0, [r6]
   10f20:	ldrb	r3, [r0]
   10f24:	cmp	r3, #45	; 0x2d
   10f28:	beq	10f50 <__assert_fail@plt+0x17c>
   10f2c:	movw	r1, #16520	; 0x4088
   10f30:	movt	r1, #1
   10f34:	bl	10d98 <fopen64@plt>
   10f38:	subs	r4, r0, #0
   10f3c:	beq	10f94 <__assert_fail@plt+0x1c0>
   10f40:	bl	11ea0 <__assert_fail@plt+0x10cc>
   10f44:	mov	r0, r4
   10f48:	bl	10d74 <fclose@plt>
   10f4c:	b	10f6c <__assert_fail@plt+0x198>
   10f50:	ldrb	r3, [r0, #1]
   10f54:	cmp	r3, #0
   10f58:	bne	10f2c <__assert_fail@plt+0x158>
   10f5c:	movw	r3, #20704	; 0x50e0
   10f60:	movt	r3, #2
   10f64:	ldr	r0, [r3]
   10f68:	bl	11ea0 <__assert_fail@plt+0x10cc>
   10f6c:	mov	r0, #0
   10f70:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   10f74:	movw	r0, #15916	; 0x3e2c
   10f78:	movt	r0, #1
   10f7c:	bl	10cc0 <puts@plt>
   10f80:	mov	r0, r9
   10f84:	bl	10d08 <exit@plt>
   10f88:	movw	r0, #16448	; 0x4040
   10f8c:	movt	r0, #1
   10f90:	bl	110ec <__assert_fail@plt+0x318>
   10f94:	bl	10d2c <__errno_location@plt>
   10f98:	ldr	r4, [r6]
   10f9c:	ldr	r0, [r0]
   10fa0:	bl	10ce4 <strerror@plt>
   10fa4:	mov	r1, r4
   10fa8:	mov	r2, r0
   10fac:	movw	r0, #16524	; 0x408c
   10fb0:	movt	r0, #1
   10fb4:	bl	110ec <__assert_fail@plt+0x318>
   10fb8:	mov	fp, #0
   10fbc:	mov	lr, #0
   10fc0:	pop	{r1}		; (ldr r1, [sp], #4)
   10fc4:	mov	r2, sp
   10fc8:	push	{r2}		; (str r2, [sp, #-4]!)
   10fcc:	push	{r0}		; (str r0, [sp, #-4]!)
   10fd0:	ldr	ip, [pc, #16]	; 10fe8 <__assert_fail@plt+0x214>
   10fd4:	push	{ip}		; (str ip, [sp, #-4]!)
   10fd8:	ldr	r0, [pc, #12]	; 10fec <__assert_fail@plt+0x218>
   10fdc:	ldr	r3, [pc, #12]	; 10ff0 <__assert_fail@plt+0x21c>
   10fe0:	bl	10cd8 <__libc_start_main@plt>
   10fe4:	bl	10dbc <abort@plt>
   10fe8:	andeq	r3, r1, ip, lsl #15
   10fec:	andeq	r0, r1, r0, ror #27
   10ff0:	andeq	r3, r1, r8, lsr #14
   10ff4:	ldr	r3, [pc, #20]	; 11010 <__assert_fail@plt+0x23c>
   10ff8:	ldr	r2, [pc, #20]	; 11014 <__assert_fail@plt+0x240>
   10ffc:	add	r3, pc, r3
   11000:	ldr	r2, [r3, r2]
   11004:	cmp	r2, #0
   11008:	bxeq	lr
   1100c:	b	10cfc <__gmon_start__@plt>
   11010:	strdeq	r3, [r1], -ip
   11014:	andeq	r0, r0, r4, asr #1
   11018:	push	{r3, lr}
   1101c:	movw	r0, #20684	; 0x50cc
   11020:	ldr	r3, [pc, #36]	; 1104c <__assert_fail@plt+0x278>
   11024:	movt	r0, #2
   11028:	rsb	r3, r0, r3
   1102c:	cmp	r3, #6
   11030:	popls	{r3, pc}
   11034:	movw	r3, #0
   11038:	movt	r3, #0
   1103c:	cmp	r3, #0
   11040:	popeq	{r3, pc}
   11044:	blx	r3
   11048:	pop	{r3, pc}
   1104c:	andeq	r5, r2, pc, asr #1
   11050:	push	{r3, lr}
   11054:	movw	r0, #20684	; 0x50cc
   11058:	movw	r3, #20684	; 0x50cc
   1105c:	movt	r0, #2
   11060:	movt	r3, #2
   11064:	rsb	r3, r0, r3
   11068:	asr	r3, r3, #2
   1106c:	add	r3, r3, r3, lsr #31
   11070:	asrs	r1, r3, #1
   11074:	popeq	{r3, pc}
   11078:	movw	r2, #0
   1107c:	movt	r2, #0
   11080:	cmp	r2, #0
   11084:	popeq	{r3, pc}
   11088:	blx	r2
   1108c:	pop	{r3, pc}
   11090:	push	{r4, lr}
   11094:	movw	r4, #20712	; 0x50e8
   11098:	movt	r4, #2
   1109c:	ldrb	r3, [r4]
   110a0:	cmp	r3, #0
   110a4:	popne	{r4, pc}
   110a8:	bl	11018 <__assert_fail@plt+0x244>
   110ac:	mov	r3, #1
   110b0:	strb	r3, [r4]
   110b4:	pop	{r4, pc}
   110b8:	movw	r0, #20228	; 0x4f04
   110bc:	movt	r0, #2
   110c0:	push	{r3, lr}
   110c4:	ldr	r3, [r0]
   110c8:	cmp	r3, #0
   110cc:	beq	110e4 <__assert_fail@plt+0x310>
   110d0:	movw	r3, #0
   110d4:	movt	r3, #0
   110d8:	cmp	r3, #0
   110dc:	beq	110e4 <__assert_fail@plt+0x310>
   110e0:	blx	r3
   110e4:	pop	{r3, lr}
   110e8:	b	11050 <__assert_fail@plt+0x27c>
   110ec:	push	{r0, r1, r2, r3}
   110f0:	movw	r2, #20688	; 0x50d0
   110f4:	movt	r2, #2
   110f8:	movw	r3, #20708	; 0x50e4
   110fc:	movt	r3, #2
   11100:	ldr	r2, [r2]
   11104:	push	{r4, r5, lr}
   11108:	movw	r4, #20696	; 0x50d8
   1110c:	sub	sp, sp, #12
   11110:	movt	r4, #2
   11114:	ldr	r0, [r3]
   11118:	ldr	r5, [sp, #24]
   1111c:	str	r2, [sp, #4]
   11120:	bl	10bdc <fflush@plt>
   11124:	mov	r1, #1
   11128:	ldr	r0, [r4]
   1112c:	movw	r2, #14336	; 0x3800
   11130:	movw	r3, #14344	; 0x3808
   11134:	movt	r2, #1
   11138:	movt	r3, #1
   1113c:	bl	10d68 <__fprintf_chk@plt>
   11140:	add	ip, sp, #28
   11144:	mov	r2, r5
   11148:	mov	r1, #1
   1114c:	mov	r3, ip
   11150:	ldr	r0, [r4]
   11154:	str	ip, [sp]
   11158:	bl	10cf0 <__vfprintf_chk@plt>
   1115c:	ldr	r1, [r4]
   11160:	mov	r0, #10
   11164:	bl	10c84 <_IO_putc@plt>
   11168:	mov	r0, #1
   1116c:	bl	10d08 <exit@plt>
   11170:	push	{r0, r1, r2, r3}
   11174:	movw	r3, #20708	; 0x50e4
   11178:	push	{r4, r5, r6, lr}
   1117c:	movw	r5, #20688	; 0x50d0
   11180:	movt	r5, #2
   11184:	movt	r3, #2
   11188:	sub	sp, sp, #8
   1118c:	movw	r4, #20696	; 0x50d8
   11190:	ldr	r2, [r5]
   11194:	movt	r4, #2
   11198:	ldr	r0, [r3]
   1119c:	ldr	r6, [sp, #24]
   111a0:	str	r2, [sp, #4]
   111a4:	bl	10bdc <fflush@plt>
   111a8:	mov	r1, #1
   111ac:	ldr	r0, [r4]
   111b0:	movw	r2, #14336	; 0x3800
   111b4:	movw	r3, #14344	; 0x3808
   111b8:	movt	r2, #1
   111bc:	movt	r3, #1
   111c0:	bl	10d68 <__fprintf_chk@plt>
   111c4:	add	ip, sp, #28
   111c8:	mov	r2, r6
   111cc:	mov	r1, #1
   111d0:	mov	r3, ip
   111d4:	ldr	r0, [r4]
   111d8:	str	ip, [sp]
   111dc:	bl	10cf0 <__vfprintf_chk@plt>
   111e0:	ldr	r1, [r4]
   111e4:	mov	r0, #10
   111e8:	bl	10c84 <_IO_putc@plt>
   111ec:	ldr	r2, [sp, #4]
   111f0:	ldr	r3, [r5]
   111f4:	cmp	r2, r3
   111f8:	bne	1120c <__assert_fail@plt+0x438>
   111fc:	add	sp, sp, #8
   11200:	pop	{r4, r5, r6, lr}
   11204:	add	sp, sp, #16
   11208:	bx	lr
   1120c:	bl	10c54 <__stack_chk_fail@plt>
   11210:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11214:	movw	r8, #20688	; 0x50d0
   11218:	movt	r8, #2
   1121c:	ldr	r2, [r0, #24]
   11220:	sub	sp, sp, #140	; 0x8c
   11224:	mov	r4, r0
   11228:	ldr	r3, [r8]
   1122c:	cmp	r2, #0
   11230:	str	r3, [sp, #132]	; 0x84
   11234:	beq	113cc <__assert_fail@plt+0x5f8>
   11238:	ldr	r3, [r0, #48]	; 0x30
   1123c:	cmp	r3, #0
   11240:	bne	116e8 <__assert_fail@plt+0x914>
   11244:	ldr	r0, [r0, #52]	; 0x34
   11248:	cmp	r0, #0
   1124c:	beq	11744 <__assert_fail@plt+0x970>
   11250:	bl	10c60 <rewind@plt>
   11254:	ldr	r0, [r4, #52]	; 0x34
   11258:	mvn	r5, #0
   1125c:	ldr	r6, [r4, #32]
   11260:	str	r5, [sp, #40]	; 0x28
   11264:	bl	10d5c <fileno@plt>
   11268:	mov	r9, r0
   1126c:	ldr	r0, [r4, #48]	; 0x30
   11270:	cmp	r0, #0
   11274:	moveq	r4, r5
   11278:	beq	11284 <__assert_fail@plt+0x4b0>
   1127c:	bl	10d5c <fileno@plt>
   11280:	mov	r4, r0
   11284:	add	r0, sp, #32
   11288:	bl	10d80 <pipe@plt>
   1128c:	cmn	r0, #1
   11290:	beq	116ac <__assert_fail@plt+0x8d8>
   11294:	bl	10d8c <fork@plt>
   11298:	cmn	r0, #1
   1129c:	mov	r7, r0
   112a0:	beq	11690 <__assert_fail@plt+0x8bc>
   112a4:	cmp	r0, #0
   112a8:	bne	1142c <__assert_fail@plt+0x658>
   112ac:	cmp	r9, #0
   112b0:	bne	115dc <__assert_fail@plt+0x808>
   112b4:	cmn	r4, #1
   112b8:	moveq	r3, #0
   112bc:	strbeq	r3, [sp, #80]	; 0x50
   112c0:	beq	112e0 <__assert_fail@plt+0x50c>
   112c4:	movw	r3, #14508	; 0x38ac
   112c8:	str	r4, [sp]
   112cc:	add	r0, sp, #80	; 0x50
   112d0:	movt	r3, #1
   112d4:	mov	r1, #1
   112d8:	mov	r2, #50	; 0x32
   112dc:	bl	10d38 <__sprintf_chk@plt>
   112e0:	movw	r0, #14516	; 0x38b4
   112e4:	mov	r1, #1
   112e8:	movt	r0, #1
   112ec:	bl	10cb4 <open64@plt>
   112f0:	cmn	r0, #1
   112f4:	beq	116cc <__assert_fail@plt+0x8f8>
   112f8:	cmp	r0, #1
   112fc:	beq	11310 <__assert_fail@plt+0x53c>
   11300:	mov	r1, #1
   11304:	bl	10c6c <dup2@plt>
   11308:	cmn	r0, #1
   1130c:	beq	11644 <__assert_fail@plt+0x870>
   11310:	ldr	r0, [sp, #36]	; 0x24
   11314:	cmp	r0, #2
   11318:	beq	1132c <__assert_fail@plt+0x558>
   1131c:	mov	r1, #2
   11320:	bl	10c6c <dup2@plt>
   11324:	cmn	r0, #1
   11328:	beq	11644 <__assert_fail@plt+0x870>
   1132c:	bl	10d2c <__errno_location@plt>
   11330:	cmp	r6, #0
   11334:	mov	r3, #0
   11338:	mov	r5, r0
   1133c:	str	r3, [r0]
   11340:	bne	113f0 <__assert_fail@plt+0x61c>
   11344:	movw	r0, #14668	; 0x394c
   11348:	movt	r0, #1
   1134c:	movw	r3, #14628	; 0x3924
   11350:	movt	r3, #1
   11354:	str	r3, [sp]
   11358:	movw	r3, #14672	; 0x3950
   1135c:	movt	r3, #1
   11360:	cmn	r4, #1
   11364:	mov	r1, r0
   11368:	addne	r6, sp, #80	; 0x50
   1136c:	movw	r2, #14648	; 0x3938
   11370:	str	r6, [sp, #20]
   11374:	movt	r2, #1
   11378:	str	r2, [sp, #4]
   1137c:	str	r3, [sp, #8]
   11380:	movw	r2, #14660	; 0x3944
   11384:	movw	r3, #14664	; 0x3948
   11388:	movt	r2, #1
   1138c:	movt	r3, #1
   11390:	str	r2, [sp, #12]
   11394:	str	r3, [sp, #16]
   11398:	mov	r2, #0
   1139c:	movw	r3, #14616	; 0x3918
   113a0:	str	r2, [sp, #24]
   113a4:	movt	r3, #1
   113a8:	movw	r2, #14588	; 0x38fc
   113ac:	movt	r2, #1
   113b0:	bl	10c18 <execlp@plt>
   113b4:	ldr	r0, [r5]
   113b8:	bl	10ce4 <strerror@plt>
   113bc:	mov	r1, r0
   113c0:	movw	r0, #14684	; 0x395c
   113c4:	movt	r0, #1
   113c8:	bl	110ec <__assert_fail@plt+0x318>
   113cc:	ldr	r0, [r0, #48]	; 0x30
   113d0:	cmp	r0, #0
   113d4:	beq	11764 <__assert_fail@plt+0x990>
   113d8:	ldr	r3, [r4, #52]	; 0x34
   113dc:	cmp	r3, #0
   113e0:	beq	11708 <__assert_fail@plt+0x934>
   113e4:	bl	10c60 <rewind@plt>
   113e8:	ldr	r0, [r4, #52]	; 0x34
   113ec:	b	11250 <__assert_fail@plt+0x47c>
   113f0:	movw	r0, #14580	; 0x38f4
   113f4:	movt	r0, #1
   113f8:	cmn	r4, #1
   113fc:	movw	r2, #14632	; 0x3928
   11400:	addne	r3, sp, #80	; 0x50
   11404:	movt	r2, #1
   11408:	str	r3, [sp, #20]
   1140c:	mov	r1, r0
   11410:	movw	r3, #14628	; 0x3924
   11414:	str	r2, [sp, #4]
   11418:	movt	r3, #1
   1141c:	str	r3, [sp]
   11420:	movw	r3, #14648	; 0x3938
   11424:	movt	r3, #1
   11428:	b	1137c <__assert_fail@plt+0x5a8>
   1142c:	ldr	r0, [sp, #36]	; 0x24
   11430:	bl	10dc8 <close@plt>
   11434:	movw	r1, #14724	; 0x3984
   11438:	ldr	r0, [sp, #32]
   1143c:	movt	r1, #1
   11440:	bl	10bb8 <fdopen@plt>
   11444:	subs	r9, r0, #0
   11448:	beq	11728 <__assert_fail@plt+0x954>
   1144c:	movw	sl, #20716	; 0x50ec
   11450:	movw	fp, #20708	; 0x50e4
   11454:	movt	sl, #2
   11458:	movt	fp, #2
   1145c:	mov	r4, #0
   11460:	mov	r0, r9
   11464:	bl	10c30 <_IO_getc@plt>
   11468:	cmn	r0, #1
   1146c:	mov	r5, r0
   11470:	beq	11558 <__assert_fail@plt+0x784>
   11474:	cmp	r4, #8
   11478:	bhi	114e4 <__assert_fail@plt+0x710>
   1147c:	add	r2, sp, #136	; 0x88
   11480:	add	r3, r2, r4
   11484:	strb	r5, [r3, #-56]	; 0xffffffc8
   11488:	cmp	r5, #10
   1148c:	addne	r4, r4, #1
   11490:	bne	11460 <__assert_fail@plt+0x68c>
   11494:	ldr	r3, [sl]
   11498:	cmp	r3, #0
   1149c:	moveq	r4, r3
   114a0:	beq	11460 <__assert_fail@plt+0x68c>
   114a4:	cmp	r4, #8
   114a8:	movhi	r4, #0
   114ac:	bhi	11460 <__assert_fail@plt+0x68c>
   114b0:	ldr	r3, [fp]
   114b4:	mov	r1, #1
   114b8:	mov	r2, #2
   114bc:	movw	r0, #14780	; 0x39bc
   114c0:	movt	r0, #1
   114c4:	bl	10c90 <fwrite@plt>
   114c8:	add	r1, r4, #1
   114cc:	add	r0, sp, #80	; 0x50
   114d0:	mov	r2, #1
   114d4:	ldr	r3, [fp]
   114d8:	mov	r4, #0
   114dc:	bl	10c90 <fwrite@plt>
   114e0:	b	11460 <__assert_fail@plt+0x68c>
   114e4:	cmp	r4, #9
   114e8:	beq	11504 <__assert_fail@plt+0x730>
   114ec:	movw	r6, #20708	; 0x50e4
   114f0:	movt	r6, #2
   114f4:	ldr	r1, [r6]
   114f8:	mov	r0, r5
   114fc:	bl	10c84 <_IO_putc@plt>
   11500:	b	11488 <__assert_fail@plt+0x6b4>
   11504:	movw	r1, #14764	; 0x39ac
   11508:	add	r0, sp, #80	; 0x50
   1150c:	movt	r1, #1
   11510:	mov	r2, r4
   11514:	bl	10c3c <memcmp@plt>
   11518:	cmp	r0, #0
   1151c:	movweq	r0, #14776	; 0x39b8
   11520:	moveq	r1, #1
   11524:	movteq	r0, #1
   11528:	beq	11618 <__assert_fail@plt+0x844>
   1152c:	ldr	r3, [sl]
   11530:	cmp	r3, #0
   11534:	bne	1160c <__assert_fail@plt+0x838>
   11538:	movw	r6, #20708	; 0x50e4
   1153c:	movt	r6, #2
   11540:	add	r0, sp, #80	; 0x50
   11544:	mov	r1, #9
   11548:	mov	r2, #1
   1154c:	ldr	r3, [r6]
   11550:	bl	10c90 <fwrite@plt>
   11554:	b	114f4 <__assert_fail@plt+0x720>
   11558:	cmp	r4, #0
   1155c:	beq	11590 <__assert_fail@plt+0x7bc>
   11560:	movw	r3, #20716	; 0x50ec
   11564:	movt	r3, #2
   11568:	movw	r6, #20708	; 0x50e4
   1156c:	movt	r6, #2
   11570:	ldr	r3, [r3]
   11574:	cmp	r3, #0
   11578:	beq	11584 <__assert_fail@plt+0x7b0>
   1157c:	cmp	r4, #8
   11580:	bls	11660 <__assert_fail@plt+0x88c>
   11584:	ldr	r1, [r6]
   11588:	mov	r0, #10
   1158c:	bl	10c84 <_IO_putc@plt>
   11590:	mov	r0, r9
   11594:	bl	10d74 <fclose@plt>
   11598:	b	115ac <__assert_fail@plt+0x7d8>
   1159c:	bl	10d2c <__errno_location@plt>
   115a0:	ldr	r0, [r0]
   115a4:	cmp	r0, #4
   115a8:	bne	11630 <__assert_fail@plt+0x85c>
   115ac:	mov	r1, #0
   115b0:	mov	r0, r7
   115b4:	mov	r2, r1
   115b8:	bl	10c9c <waitpid@plt>
   115bc:	cmn	r0, #1
   115c0:	beq	1159c <__assert_fail@plt+0x7c8>
   115c4:	ldr	r2, [sp, #132]	; 0x84
   115c8:	ldr	r3, [r8]
   115cc:	cmp	r2, r3
   115d0:	bne	116c8 <__assert_fail@plt+0x8f4>
   115d4:	add	sp, sp, #140	; 0x8c
   115d8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   115dc:	mov	r0, r9
   115e0:	mov	r1, r7
   115e4:	bl	10c6c <dup2@plt>
   115e8:	cmn	r0, #1
   115ec:	bne	112b4 <__assert_fail@plt+0x4e0>
   115f0:	bl	10d2c <__errno_location@plt>
   115f4:	ldr	r0, [r0]
   115f8:	bl	10ce4 <strerror@plt>
   115fc:	mov	r1, r0
   11600:	movw	r0, #14484	; 0x3894
   11604:	movt	r0, #1
   11608:	bl	110ec <__assert_fail@plt+0x318>
   1160c:	movw	r0, #14780	; 0x39bc
   11610:	movt	r0, #1
   11614:	mov	r1, #1
   11618:	mov	r2, #2
   1161c:	ldr	r3, [fp]
   11620:	movw	r6, #20708	; 0x50e4
   11624:	movt	r6, #2
   11628:	bl	10c90 <fwrite@plt>
   1162c:	b	11540 <__assert_fail@plt+0x76c>
   11630:	bl	10ce4 <strerror@plt>
   11634:	mov	r1, r0
   11638:	movw	r0, #14784	; 0x39c0
   1163c:	movt	r0, #1
   11640:	bl	110ec <__assert_fail@plt+0x318>
   11644:	bl	10d2c <__errno_location@plt>
   11648:	ldr	r0, [r0]
   1164c:	bl	10ce4 <strerror@plt>
   11650:	mov	r1, r0
   11654:	movw	r0, #14556	; 0x38dc
   11658:	movt	r0, #1
   1165c:	bl	110ec <__assert_fail@plt+0x318>
   11660:	ldr	r3, [r6]
   11664:	mov	r1, #1
   11668:	mov	r2, #2
   1166c:	movw	r0, #14780	; 0x39bc
   11670:	movt	r0, #1
   11674:	bl	10c90 <fwrite@plt>
   11678:	add	r1, r4, #1
   1167c:	ldr	r3, [r6]
   11680:	add	r0, sp, #80	; 0x50
   11684:	mov	r2, #1
   11688:	bl	10c90 <fwrite@plt>
   1168c:	b	11584 <__assert_fail@plt+0x7b0>
   11690:	bl	10d2c <__errno_location@plt>
   11694:	ldr	r0, [r0]
   11698:	bl	10ce4 <strerror@plt>
   1169c:	mov	r1, r0
   116a0:	movw	r0, #14456	; 0x3878
   116a4:	movt	r0, #1
   116a8:	bl	110ec <__assert_fail@plt+0x318>
   116ac:	bl	10d2c <__errno_location@plt>
   116b0:	ldr	r0, [r0]
   116b4:	bl	10ce4 <strerror@plt>
   116b8:	mov	r1, r0
   116bc:	movw	r0, #14428	; 0x385c
   116c0:	movt	r0, #1
   116c4:	bl	110ec <__assert_fail@plt+0x318>
   116c8:	bl	10c54 <__stack_chk_fail@plt>
   116cc:	bl	10d2c <__errno_location@plt>
   116d0:	ldr	r0, [r0]
   116d4:	bl	10ce4 <strerror@plt>
   116d8:	mov	r1, r0
   116dc:	movw	r0, #14528	; 0x38c0
   116e0:	movt	r0, #1
   116e4:	bl	110ec <__assert_fail@plt+0x318>
   116e8:	movw	r0, #14360	; 0x3818
   116ec:	movw	r1, #14380	; 0x382c
   116f0:	movw	r3, #14240	; 0x37a0
   116f4:	movt	r0, #1
   116f8:	movt	r1, #1
   116fc:	movw	r2, #313	; 0x139
   11700:	movt	r3, #1
   11704:	bl	10dd4 <__assert_fail@plt>
   11708:	movw	r0, #14396	; 0x383c
   1170c:	movw	r1, #14380	; 0x382c
   11710:	movw	r3, #14240	; 0x37a0
   11714:	movt	r0, #1
   11718:	movt	r1, #1
   1171c:	mov	r2, #320	; 0x140
   11720:	movt	r3, #1
   11724:	bl	10dd4 <__assert_fail@plt>
   11728:	bl	10d2c <__errno_location@plt>
   1172c:	ldr	r0, [r0]
   11730:	bl	10ce4 <strerror@plt>
   11734:	mov	r1, r0
   11738:	movw	r0, #14728	; 0x3988
   1173c:	movt	r0, #1
   11740:	bl	110ec <__assert_fail@plt+0x318>
   11744:	movw	r0, #14396	; 0x383c
   11748:	movw	r1, #14380	; 0x382c
   1174c:	movw	r3, #14240	; 0x37a0
   11750:	movt	r0, #1
   11754:	movt	r1, #1
   11758:	movw	r2, #314	; 0x13a
   1175c:	movt	r3, #1
   11760:	bl	10dd4 <__assert_fail@plt>
   11764:	movw	r0, #14412	; 0x384c
   11768:	movw	r1, #14380	; 0x382c
   1176c:	movw	r3, #14240	; 0x37a0
   11770:	movt	r0, #1
   11774:	movt	r1, #1
   11778:	movw	r2, #319	; 0x13f
   1177c:	movt	r3, #1
   11780:	bl	10dd4 <__assert_fail@plt>
   11784:	push	{r4, r5, r6, lr}
   11788:	mov	r5, r0
   1178c:	bl	10d14 <strlen@plt>
   11790:	add	r4, r0, #1
   11794:	mov	r0, r4
   11798:	bl	10ccc <malloc@plt>
   1179c:	subs	r6, r0, #0
   117a0:	beq	117b8 <__assert_fail@plt+0x9e4>
   117a4:	mov	r1, r5
   117a8:	mov	r2, r4
   117ac:	bl	10c0c <memcpy@plt>
   117b0:	mov	r0, r6
   117b4:	pop	{r4, r5, r6, pc}
   117b8:	bl	10d2c <__errno_location@plt>
   117bc:	ldr	r0, [r0]
   117c0:	bl	10ce4 <strerror@plt>
   117c4:	mov	r1, r0
   117c8:	movw	r0, #14816	; 0x39e0
   117cc:	movt	r0, #1
   117d0:	bl	110ec <__assert_fail@plt+0x318>
   117d4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   117d8:	movw	r6, #20716	; 0x50ec
   117dc:	movt	r6, #2
   117e0:	movw	r5, #20688	; 0x50d0
   117e4:	movt	r5, #2
   117e8:	sub	sp, sp, #16
   117ec:	ldr	r3, [r6, #4]
   117f0:	mov	r7, r0
   117f4:	ldr	ip, [r5]
   117f8:	mov	r4, r1
   117fc:	cmp	r3, #0
   11800:	mov	r9, r2
   11804:	str	ip, [sp, #12]
   11808:	bne	1188c <__assert_fail@plt+0xab8>
   1180c:	subs	r3, r4, #4
   11810:	rsbs	r8, r3, #0
   11814:	adcs	r8, r8, r3
   11818:	cmp	r4, #4
   1181c:	cmpne	r4, #11
   11820:	bne	11830 <__assert_fail@plt+0xa5c>
   11824:	ldr	sl, [r7, #28]
   11828:	cmp	sl, #1
   1182c:	beq	1193c <__assert_fail@plt+0xb68>
   11830:	cmp	r4, #1
   11834:	streq	r4, [r7]
   11838:	beq	11870 <__assert_fail@plt+0xa9c>
   1183c:	cmp	r8, #0
   11840:	bne	119a4 <__assert_fail@plt+0xbd0>
   11844:	cmp	r4, #12
   11848:	moveq	r3, #1
   1184c:	streq	r3, [r7, #12]
   11850:	beq	11870 <__assert_fail@plt+0xa9c>
   11854:	cmp	r4, #7
   11858:	beq	11af0 <__assert_fail@plt+0xd1c>
   1185c:	cmp	r4, #8
   11860:	beq	11918 <__assert_fail@plt+0xb44>
   11864:	sub	r3, r4, #9
   11868:	cmp	r3, #1
   1186c:	bls	118c0 <__assert_fail@plt+0xaec>
   11870:	ldr	r2, [sp, #12]
   11874:	mov	r0, #0
   11878:	ldr	r3, [r5]
   1187c:	cmp	r2, r3
   11880:	bne	11e08 <__assert_fail@plt+0x1034>
   11884:	add	sp, sp, #16
   11888:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   1188c:	sub	r3, r1, #1
   11890:	mov	r0, #1
   11894:	cmp	r3, #12
   11898:	movw	r1, #14868	; 0x3a14
   1189c:	movt	r1, #1
   118a0:	movwls	r2, #14240	; 0x37a0
   118a4:	movtls	r2, #1
   118a8:	addls	r3, r2, r3, lsl #2
   118ac:	movwhi	r2, #14832	; 0x39f0
   118b0:	movthi	r2, #1
   118b4:	ldrls	r2, [r3, #20]
   118b8:	bl	10d50 <__printf_chk@plt>
   118bc:	b	1180c <__assert_fail@plt+0xa38>
   118c0:	cmp	r4, #9
   118c4:	mov	r3, #1
   118c8:	str	r8, [r7, #4]
   118cc:	streq	r3, [r7]
   118d0:	movweq	r0, #15612	; 0x3cfc
   118d4:	streq	r3, [r7, #8]
   118d8:	movwne	r0, #15620	; 0x3d04
   118dc:	str	r3, [r7, #16]
   118e0:	movteq	r0, #1
   118e4:	movtne	r0, #1
   118e8:	bl	10cc0 <puts@plt>
   118ec:	ldr	r3, [r7, #28]
   118f0:	cmp	r3, #2
   118f4:	beq	11b7c <__assert_fail@plt+0xda8>
   118f8:	cmp	r3, #4
   118fc:	bne	11870 <__assert_fail@plt+0xa9c>
   11900:	movw	r0, #15640	; 0x3d18
   11904:	movt	r0, #1
   11908:	bl	10cc0 <puts@plt>
   1190c:	mov	r3, #1
   11910:	str	r3, [r7, #56]	; 0x38
   11914:	b	11870 <__assert_fail@plt+0xa9c>
   11918:	movw	r0, #15564	; 0x3ccc
   1191c:	movt	r0, #1
   11920:	bl	10cc0 <puts@plt>
   11924:	ldr	r3, [r7, #20]
   11928:	cmp	r3, #0
   1192c:	beq	11b6c <__assert_fail@plt+0xd98>
   11930:	sub	r3, r3, #1
   11934:	str	r3, [r7, #20]
   11938:	b	11870 <__assert_fail@plt+0xa9c>
   1193c:	movw	r0, #14896	; 0x3a30
   11940:	movt	r0, #1
   11944:	bl	10cc0 <puts@plt>
   11948:	ldr	r1, [r6, #8]
   1194c:	ldr	r2, [r7, #20]
   11950:	ldr	r3, [r7, #28]
   11954:	cmp	r1, #0
   11958:	str	sl, [r7, #44]	; 0x2c
   1195c:	add	r3, r3, #1
   11960:	str	r2, [r7, #40]	; 0x28
   11964:	str	r3, [r7, #28]
   11968:	beq	11830 <__assert_fail@plt+0xa5c>
   1196c:	ldr	r3, [r7, #48]	; 0x30
   11970:	cmp	r3, #0
   11974:	bne	11e0c <__assert_fail@plt+0x1038>
   11978:	bl	10c78 <tmpfile64@plt>
   1197c:	cmp	r0, #0
   11980:	str	r0, [r7, #48]	; 0x30
   11984:	bne	11830 <__assert_fail@plt+0xa5c>
   11988:	bl	10d2c <__errno_location@plt>
   1198c:	ldr	r0, [r0]
   11990:	bl	10ce4 <strerror@plt>
   11994:	mov	r1, r0
   11998:	movw	r0, #14912	; 0x3a40
   1199c:	movt	r0, #1
   119a0:	bl	110ec <__assert_fail@plt+0x318>
   119a4:	mov	r0, r9
   119a8:	movw	r1, #14948	; 0x3a64
   119ac:	mvn	r2, #0
   119b0:	movt	r1, #1
   119b4:	bl	12840 <__assert_fail@plt+0x1a6c>
   119b8:	subs	r8, r0, #0
   119bc:	beq	11bb0 <__assert_fail@plt+0xddc>
   119c0:	add	r1, sp, #8
   119c4:	bl	12f5c <__assert_fail@plt+0x2188>
   119c8:	ldr	r2, [r7, #20]
   119cc:	subs	r4, r0, #0
   119d0:	beq	11bd4 <__assert_fail@plt+0xe00>
   119d4:	ldr	r0, [sp, #8]
   119d8:	movw	r1, #14964	; 0x3a74
   119dc:	str	r4, [sp]
   119e0:	movt	r1, #1
   119e4:	movw	r3, #16988	; 0x425c
   119e8:	lsl	r2, r2, #1
   119ec:	movt	r3, #1
   119f0:	str	r0, [sp, #4]
   119f4:	mov	r0, #1
   119f8:	bl	10d50 <__printf_chk@plt>
   119fc:	ldr	r3, [r7, #28]
   11a00:	cmp	r3, #3
   11a04:	beq	11bf4 <__assert_fail@plt+0xe20>
   11a08:	movw	r1, #15124	; 0x3b14
   11a0c:	mov	r0, r4
   11a10:	movt	r1, #1
   11a14:	bl	10bd0 <strcmp@plt>
   11a18:	cmp	r0, #0
   11a1c:	beq	11b0c <__assert_fail@plt+0xd38>
   11a20:	mov	r0, r4
   11a24:	movw	r1, #15396	; 0x3c24
   11a28:	movt	r1, #1
   11a2c:	bl	10bd0 <strcmp@plt>
   11a30:	cmp	r0, #0
   11a34:	bne	11ad4 <__assert_fail@plt+0xd00>
   11a38:	ldr	r4, [sp, #8]
   11a3c:	movw	r1, #15408	; 0x3c30
   11a40:	movt	r1, #1
   11a44:	mov	r0, r4
   11a48:	bl	10bd0 <strcmp@plt>
   11a4c:	cmp	r0, #0
   11a50:	beq	11a6c <__assert_fail@plt+0xc98>
   11a54:	mov	r0, r4
   11a58:	movw	r1, #15420	; 0x3c3c
   11a5c:	movt	r1, #1
   11a60:	bl	10bd0 <strcmp@plt>
   11a64:	cmp	r0, #0
   11a68:	bne	11ad4 <__assert_fail@plt+0xd00>
   11a6c:	mov	r2, #0
   11a70:	movw	r1, #15436	; 0x3c4c
   11a74:	mov	r0, r8
   11a78:	movt	r1, #1
   11a7c:	bl	12dd8 <__assert_fail@plt+0x2004>
   11a80:	subs	r2, r0, #0
   11a84:	beq	11a98 <__assert_fail@plt+0xcc4>
   11a88:	movw	r1, #15444	; 0x3c54
   11a8c:	mov	r0, #1
   11a90:	movt	r1, #1
   11a94:	bl	10d50 <__printf_chk@plt>
   11a98:	ldr	r3, [r7, #24]
   11a9c:	cmp	r3, #0
   11aa0:	bne	11df8 <__assert_fail@plt+0x1024>
   11aa4:	ldr	r3, [r6, #8]
   11aa8:	mov	r2, #1
   11aac:	str	r2, [r7, #24]
   11ab0:	cmp	r3, #0
   11ab4:	beq	11ad4 <__assert_fail@plt+0xd00>
   11ab8:	ldr	r3, [r7, #52]	; 0x34
   11abc:	cmp	r3, #0
   11ac0:	bne	11e44 <__assert_fail@plt+0x1070>
   11ac4:	bl	10c78 <tmpfile64@plt>
   11ac8:	cmp	r0, #0
   11acc:	str	r0, [r7, #52]	; 0x34
   11ad0:	beq	11dac <__assert_fail@plt+0xfd8>
   11ad4:	mov	r0, r8
   11ad8:	bl	12db4 <__assert_fail@plt+0x1fe0>
   11adc:	mov	r3, #1
   11ae0:	mov	r2, #0
   11ae4:	str	r3, [r7, #8]
   11ae8:	stm	r7, {r2, r3}
   11aec:	b	11870 <__assert_fail@plt+0xa9c>
   11af0:	movw	r0, #15556	; 0x3cc4
   11af4:	movt	r0, #1
   11af8:	bl	10cc0 <puts@plt>
   11afc:	ldr	r3, [r7, #20]
   11b00:	add	r3, r3, #1
   11b04:	str	r3, [r7, #20]
   11b08:	b	11870 <__assert_fail@plt+0xa9c>
   11b0c:	ldr	r4, [sp, #8]
   11b10:	movw	r1, #15136	; 0x3b20
   11b14:	movt	r1, #1
   11b18:	mov	r0, r4
   11b1c:	bl	10bd0 <strcmp@plt>
   11b20:	cmp	r0, #0
   11b24:	beq	11c94 <__assert_fail@plt+0xec0>
   11b28:	mov	r0, r4
   11b2c:	movw	r1, #15356	; 0x3bfc
   11b30:	movt	r1, #1
   11b34:	bl	10bd0 <strcmp@plt>
   11b38:	subs	r2, r0, #0
   11b3c:	bne	11ad4 <__assert_fail@plt+0xd00>
   11b40:	movw	r1, #15144	; 0x3b28
   11b44:	mov	r0, r8
   11b48:	movt	r1, #1
   11b4c:	bl	12dd8 <__assert_fail@plt+0x2004>
   11b50:	subs	r2, r0, #0
   11b54:	beq	11ad4 <__assert_fail@plt+0xd00>
   11b58:	movw	r1, #15368	; 0x3c08
   11b5c:	mov	r0, #1
   11b60:	movt	r1, #1
   11b64:	bl	10d50 <__printf_chk@plt>
   11b68:	b	11ad4 <__assert_fail@plt+0xd00>
   11b6c:	movw	r0, #15572	; 0x3cd4
   11b70:	movt	r0, #1
   11b74:	bl	11170 <__assert_fail@plt+0x39c>
   11b78:	b	11870 <__assert_fail@plt+0xa9c>
   11b7c:	ldr	r2, [r7, #20]
   11b80:	ldr	r3, [r7, #40]	; 0x28
   11b84:	cmp	r2, r3
   11b88:	bne	11870 <__assert_fail@plt+0xa9c>
   11b8c:	movw	r0, #15628	; 0x3d0c
   11b90:	movt	r0, #1
   11b94:	bl	10cc0 <puts@plt>
   11b98:	ldr	r3, [r7, #28]
   11b9c:	mov	r2, #0
   11ba0:	str	r2, [r7, #44]	; 0x2c
   11ba4:	add	r3, r3, #1
   11ba8:	str	r3, [r7, #28]
   11bac:	b	11870 <__assert_fail@plt+0xa9c>
   11bb0:	ldr	r2, [r7, #20]
   11bb4:	movw	r1, #15520	; 0x3ca0
   11bb8:	movw	r3, #16988	; 0x425c
   11bbc:	movt	r1, #1
   11bc0:	movt	r3, #1
   11bc4:	mov	r0, #1
   11bc8:	lsl	r2, r2, r0
   11bcc:	bl	10d50 <__printf_chk@plt>
   11bd0:	b	11adc <__assert_fail@plt+0xd08>
   11bd4:	movw	r1, #15500	; 0x3c8c
   11bd8:	movw	r3, #16988	; 0x425c
   11bdc:	movt	r1, #1
   11be0:	movt	r3, #1
   11be4:	mov	r0, #1
   11be8:	lsl	r2, r2, r0
   11bec:	bl	10d50 <__printf_chk@plt>
   11bf0:	b	11ad4 <__assert_fail@plt+0xd00>
   11bf4:	mov	r0, r4
   11bf8:	bl	10d14 <strlen@plt>
   11bfc:	ldr	sl, [sp, #8]
   11c00:	mov	r9, r0
   11c04:	mov	r0, sl
   11c08:	bl	10d14 <strlen@plt>
   11c0c:	add	r0, r9, r0
   11c10:	add	r0, r0, #2
   11c14:	bl	10ccc <malloc@plt>
   11c18:	subs	r9, r0, #0
   11c1c:	beq	11e7c <__assert_fail@plt+0x10a8>
   11c20:	mov	r1, r4
   11c24:	bl	10c48 <stpcpy@plt>
   11c28:	mov	r3, #47	; 0x2f
   11c2c:	mov	r1, sl
   11c30:	strb	r3, [r0], #1
   11c34:	bl	10ca8 <strcpy@plt>
   11c38:	ldr	r4, [r7, #36]	; 0x24
   11c3c:	cmp	r4, #0
   11c40:	beq	11e60 <__assert_fail@plt+0x108c>
   11c44:	mov	r0, r9
   11c48:	mov	r1, r4
   11c4c:	bl	10bd0 <strcmp@plt>
   11c50:	cmp	r0, #0
   11c54:	beq	11d6c <__assert_fail@plt+0xf98>
   11c58:	ldr	r0, [r7, #32]
   11c5c:	movw	r3, #14848	; 0x3a00
   11c60:	movt	r3, #1
   11c64:	movw	r1, #14856	; 0x3a08
   11c68:	cmp	r0, #0
   11c6c:	movt	r1, #1
   11c70:	movw	r0, #15008	; 0x3aa0
   11c74:	mov	r2, r4
   11c78:	movne	r1, r3
   11c7c:	movt	r0, #1
   11c80:	mov	r3, r9
   11c84:	bl	11170 <__assert_fail@plt+0x39c>
   11c88:	mov	r0, r9
   11c8c:	bl	10be8 <free@plt>
   11c90:	b	11ad4 <__assert_fail@plt+0xd00>
   11c94:	movw	r1, #15144	; 0x3b28
   11c98:	mov	r0, r8
   11c9c:	movt	r1, #1
   11ca0:	mov	r2, #1
   11ca4:	bl	12dd8 <__assert_fail@plt+0x2004>
   11ca8:	subs	r4, r0, #0
   11cac:	beq	11ad4 <__assert_fail@plt+0xd00>
   11cb0:	mov	r2, r4
   11cb4:	movw	r1, #15156	; 0x3b34
   11cb8:	mov	r0, #1
   11cbc:	movt	r1, #1
   11cc0:	bl	10d50 <__printf_chk@plt>
   11cc4:	mov	r0, r4
   11cc8:	movw	r1, #15180	; 0x3b4c
   11ccc:	movt	r1, #1
   11cd0:	bl	10bd0 <strcmp@plt>
   11cd4:	cmp	r0, #0
   11cd8:	bne	11d10 <__assert_fail@plt+0xf3c>
   11cdc:	ldr	r3, [r7, #28]
   11ce0:	cmp	r3, #0
   11ce4:	bne	11d5c <__assert_fail@plt+0xf88>
   11ce8:	mov	r2, #1
   11cec:	mov	r3, #0
   11cf0:	str	r2, [r7, #28]
   11cf4:	str	r3, [r7, #32]
   11cf8:	ldr	r0, [r7, #36]	; 0x24
   11cfc:	bl	10be8 <free@plt>
   11d00:	mov	r0, r4
   11d04:	bl	11784 <__assert_fail@plt+0x9b0>
   11d08:	str	r0, [r7, #36]	; 0x24
   11d0c:	b	11ad4 <__assert_fail@plt+0xd00>
   11d10:	movw	r1, #15260	; 0x3b9c
   11d14:	mov	r0, r4
   11d18:	movt	r1, #1
   11d1c:	bl	10bd0 <strcmp@plt>
   11d20:	cmp	r0, #0
   11d24:	beq	11dc8 <__assert_fail@plt+0xff4>
   11d28:	movw	r1, #15288	; 0x3bb8
   11d2c:	mov	r0, r4
   11d30:	movt	r1, #1
   11d34:	bl	10bd0 <strcmp@plt>
   11d38:	cmp	r0, #0
   11d3c:	beq	11dc8 <__assert_fail@plt+0xff4>
   11d40:	ldr	r3, [r6]
   11d44:	cmp	r3, #0
   11d48:	beq	11ad4 <__assert_fail@plt+0xd00>
   11d4c:	movw	r0, #15320	; 0x3bd8
   11d50:	movt	r0, #1
   11d54:	bl	10cc0 <puts@plt>
   11d58:	b	11ad4 <__assert_fail@plt+0xd00>
   11d5c:	movw	r0, #15208	; 0x3b68
   11d60:	movt	r0, #1
   11d64:	bl	11170 <__assert_fail@plt+0x39c>
   11d68:	b	11ad4 <__assert_fail@plt+0xd00>
   11d6c:	movw	r0, #15056	; 0x3ad0
   11d70:	movt	r0, #1
   11d74:	bl	10cc0 <puts@plt>
   11d78:	ldr	r2, [r6, #8]
   11d7c:	ldr	r3, [r7, #28]
   11d80:	cmp	r2, #0
   11d84:	add	r3, r3, #1
   11d88:	str	r3, [r7, #28]
   11d8c:	beq	11c88 <__assert_fail@plt+0xeb4>
   11d90:	ldr	r3, [r7, #52]	; 0x34
   11d94:	cmp	r3, #0
   11d98:	bne	11e28 <__assert_fail@plt+0x1054>
   11d9c:	bl	10c78 <tmpfile64@plt>
   11da0:	cmp	r0, #0
   11da4:	str	r0, [r7, #52]	; 0x34
   11da8:	bne	11c88 <__assert_fail@plt+0xeb4>
   11dac:	bl	10d2c <__errno_location@plt>
   11db0:	ldr	r0, [r0]
   11db4:	bl	10ce4 <strerror@plt>
   11db8:	mov	r1, r0
   11dbc:	movw	r0, #15092	; 0x3af4
   11dc0:	movt	r0, #1
   11dc4:	bl	110ec <__assert_fail@plt+0x318>
   11dc8:	ldr	r3, [r7, #28]
   11dcc:	cmp	r3, #0
   11dd0:	bne	11d5c <__assert_fail@plt+0xf88>
   11dd4:	mov	r3, #1
   11dd8:	ldr	r0, [r7, #36]	; 0x24
   11ddc:	str	r3, [r7, #28]
   11de0:	str	r3, [r7, #32]
   11de4:	bl	10be8 <free@plt>
   11de8:	mov	r0, r4
   11dec:	bl	11784 <__assert_fail@plt+0x9b0>
   11df0:	str	r0, [r7, #36]	; 0x24
   11df4:	b	11ad4 <__assert_fail@plt+0xd00>
   11df8:	movw	r0, #15464	; 0x3c68
   11dfc:	movt	r0, #1
   11e00:	bl	11170 <__assert_fail@plt+0x39c>
   11e04:	b	11ad4 <__assert_fail@plt+0xd00>
   11e08:	bl	10c54 <__stack_chk_fail@plt>
   11e0c:	movw	r0, #14360	; 0x3818
   11e10:	movw	r1, #14380	; 0x382c
   11e14:	movt	r0, #1
   11e18:	movt	r1, #1
   11e1c:	movw	r2, #487	; 0x1e7
   11e20:	ldr	r3, [pc, #112]	; 11e98 <__assert_fail@plt+0x10c4>
   11e24:	bl	10dd4 <__assert_fail@plt>
   11e28:	movw	r0, #15076	; 0x3ae4
   11e2c:	movw	r1, #14380	; 0x382c
   11e30:	movt	r0, #1
   11e34:	movt	r1, #1
   11e38:	movw	r2, #529	; 0x211
   11e3c:	ldr	r3, [pc, #84]	; 11e98 <__assert_fail@plt+0x10c4>
   11e40:	bl	10dd4 <__assert_fail@plt>
   11e44:	movw	r0, #15076	; 0x3ae4
   11e48:	movw	r1, #14380	; 0x382c
   11e4c:	movt	r0, #1
   11e50:	movt	r1, #1
   11e54:	movw	r2, #426	; 0x1aa
   11e58:	ldr	r3, [pc, #60]	; 11e9c <__assert_fail@plt+0x10c8>
   11e5c:	bl	10dd4 <__assert_fail@plt>
   11e60:	movw	r0, #14984	; 0x3a88
   11e64:	movw	r1, #14380	; 0x382c
   11e68:	movt	r0, #1
   11e6c:	movt	r1, #1
   11e70:	movw	r2, #518	; 0x206
   11e74:	ldr	r3, [pc, #28]	; 11e98 <__assert_fail@plt+0x10c4>
   11e78:	bl	10dd4 <__assert_fail@plt>
   11e7c:	bl	10d2c <__errno_location@plt>
   11e80:	ldr	r0, [r0]
   11e84:	bl	10ce4 <strerror@plt>
   11e88:	mov	r1, r0
   11e8c:	movw	r0, #14816	; 0x39e0
   11e90:	movt	r0, #1
   11e94:	bl	110ec <__assert_fail@plt+0x318>
   11e98:	andeq	r3, r1, r8, ror #15
   11e9c:	strdeq	r3, [r1], -r4
   11ea0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ea4:	movw	fp, #20688	; 0x50d0
   11ea8:	movt	fp, #2
   11eac:	sub	sp, sp, #5056	; 0x13c0
   11eb0:	sub	sp, sp, #12
   11eb4:	mov	r1, #0
   11eb8:	ldr	r3, [fp]
   11ebc:	add	ip, sp, #8192	; 0x2000
   11ec0:	mov	r2, #60	; 0x3c
   11ec4:	mov	r8, r0
   11ec8:	mov	r0, sp
   11ecc:	str	r3, [ip, #-3132]	; 0xfffff3c4
   11ed0:	bl	10d44 <memset@plt>
   11ed4:	mov	r1, sp
   11ed8:	movw	r0, #6100	; 0x17d4
   11edc:	movt	r0, #1
   11ee0:	bl	12534 <__assert_fail@plt+0x1760>
   11ee4:	subs	r9, r0, #0
   11ee8:	beq	122a0 <__assert_fail@plt+0x14cc>
   11eec:	mov	sl, #0
   11ef0:	movw	r7, #20716	; 0x50ec
   11ef4:	add	r4, sp, #60	; 0x3c
   11ef8:	movt	r7, #2
   11efc:	mov	r6, sl
   11f00:	mov	r0, r4
   11f04:	movw	r1, #5000	; 0x1388
   11f08:	mov	r2, r8
   11f0c:	bl	10bf4 <fgets@plt>
   11f10:	subs	r5, r0, #0
   11f14:	beq	12214 <__assert_fail@plt+0x1440>
   11f18:	add	r6, r6, #1
   11f1c:	cmp	r6, #1
   11f20:	beq	120f8 <__assert_fail@plt+0x1324>
   11f24:	mov	r0, r4
   11f28:	bl	10d14 <strlen@plt>
   11f2c:	subs	r5, r0, #0
   11f30:	beq	11f50 <__assert_fail@plt+0x117c>
   11f34:	sub	r3, r5, #1
   11f38:	ldrb	r2, [r4, r3]
   11f3c:	cmp	r2, #10
   11f40:	moveq	r2, #0
   11f44:	moveq	r5, r3
   11f48:	strbeq	r2, [r4, r3]
   11f4c:	beq	11f60 <__assert_fail@plt+0x118c>
   11f50:	movw	r0, #15696	; 0x3d50
   11f54:	mov	r1, r6
   11f58:	movt	r0, #1
   11f5c:	bl	11170 <__assert_fail@plt+0x39c>
   11f60:	cmp	r5, #0
   11f64:	beq	11f84 <__assert_fail@plt+0x11b0>
   11f68:	sub	r3, r5, #1
   11f6c:	ldrb	r2, [r4, r3]
   11f70:	cmp	r2, #13
   11f74:	moveq	r2, #0
   11f78:	moveq	r5, r3
   11f7c:	strbeq	r2, [r4, r3]
   11f80:	beq	11f98 <__assert_fail@plt+0x11c4>
   11f84:	ldr	r3, [r7]
   11f88:	cmp	r3, #0
   11f8c:	beq	11f98 <__assert_fail@plt+0x11c4>
   11f90:	cmp	sl, #0
   11f94:	beq	121b4 <__assert_fail@plt+0x13e0>
   11f98:	mov	r2, r5
   11f9c:	mov	r0, r9
   11fa0:	mov	r1, r4
   11fa4:	bl	13068 <__assert_fail@plt+0x2294>
   11fa8:	cmp	r0, #0
   11fac:	bne	12284 <__assert_fail@plt+0x14b0>
   11fb0:	ldr	r3, [sp, #44]	; 0x2c
   11fb4:	cmp	r3, #0
   11fb8:	beq	12030 <__assert_fail@plt+0x125c>
   11fbc:	ldr	r2, [r7, #4]
   11fc0:	cmp	r2, #0
   11fc4:	beq	11ff4 <__assert_fail@plt+0x1220>
   11fc8:	cmp	r3, #2
   11fcc:	movw	r1, #16988	; 0x425c
   11fd0:	movt	r1, #1
   11fd4:	movw	r2, #15656	; 0x3d28
   11fd8:	mov	r0, #1
   11fdc:	movt	r2, #1
   11fe0:	mov	r3, r4
   11fe4:	movne	r2, r1
   11fe8:	movw	r1, #15812	; 0x3dc4
   11fec:	movt	r1, #1
   11ff0:	bl	10d50 <__printf_chk@plt>
   11ff4:	ldr	r3, [r7, #8]
   11ff8:	cmp	r3, #0
   11ffc:	beq	12028 <__assert_fail@plt+0x1254>
   12000:	ldr	r2, [sp, #44]	; 0x2c
   12004:	cmp	r2, #2
   12008:	beq	121fc <__assert_fail@plt+0x1428>
   1200c:	ldr	r1, [sp, #48]	; 0x30
   12010:	mov	r0, r4
   12014:	bl	10da4 <fputs@plt>
   12018:	ldr	r0, [sp, #48]	; 0x30
   1201c:	bl	10c00 <ferror@plt>
   12020:	cmp	r0, #0
   12024:	bne	12180 <__assert_fail@plt+0x13ac>
   12028:	mov	r3, #2
   1202c:	str	r3, [sp, #44]	; 0x2c
   12030:	ldr	r1, [sp, #52]	; 0x34
   12034:	cmp	r1, #0
   12038:	beq	1208c <__assert_fail@plt+0x12b8>
   1203c:	ldr	r3, [r7, #8]
   12040:	cmp	r3, #0
   12044:	beq	1208c <__assert_fail@plt+0x12b8>
   12048:	ldr	r3, [sp, #56]	; 0x38
   1204c:	cmp	r3, #0
   12050:	beq	12150 <__assert_fail@plt+0x137c>
   12054:	mov	r0, sp
   12058:	bl	11210 <__assert_fail@plt+0x43c>
   1205c:	ldr	r0, [sp, #48]	; 0x30
   12060:	cmp	r0, #0
   12064:	beq	1206c <__assert_fail@plt+0x1298>
   12068:	bl	10d74 <fclose@plt>
   1206c:	ldr	r0, [sp, #52]	; 0x34
   12070:	mov	r5, #0
   12074:	str	r5, [sp, #48]	; 0x30
   12078:	bl	10d74 <fclose@plt>
   1207c:	str	r5, [sp, #52]	; 0x34
   12080:	str	r5, [sp, #28]
   12084:	str	r5, [sp, #32]
   12088:	str	r5, [sp, #24]
   1208c:	ldr	r3, [sp, #16]
   12090:	cmp	r3, #0
   12094:	beq	120ac <__assert_fail@plt+0x12d8>
   12098:	ldr	r3, [r7, #12]
   1209c:	cmp	r3, #0
   120a0:	beq	1219c <__assert_fail@plt+0x13c8>
   120a4:	mov	r3, #0
   120a8:	str	r3, [sp, #16]
   120ac:	ldr	r3, [sp, #8]
   120b0:	movw	r2, #60472	; 0xec38
   120b4:	movt	r2, #65535	; 0xffff
   120b8:	cmp	r3, #0
   120bc:	subne	r3, r3, #1
   120c0:	strne	r3, [sp, #8]
   120c4:	bne	11f00 <__assert_fail@plt+0x112c>
   120c8:	ldr	r3, [sp, #4]
   120cc:	cmp	r3, #0
   120d0:	beq	12118 <__assert_fail@plt+0x1344>
   120d4:	ldr	r3, [sp, #12]
   120d8:	cmp	r3, #0
   120dc:	beq	121cc <__assert_fail@plt+0x13f8>
   120e0:	ldr	r3, [r7]
   120e4:	cmp	r3, #0
   120e8:	bne	121e4 <__assert_fail@plt+0x1410>
   120ec:	mov	r3, #0
   120f0:	str	r3, [sp, #12]
   120f4:	b	11f00 <__assert_fail@plt+0x112c>
   120f8:	movw	r1, #15688	; 0x3d48
   120fc:	mov	r0, r4
   12100:	movt	r1, #1
   12104:	mov	r2, #5
   12108:	bl	10db0 <strncmp@plt>
   1210c:	cmp	r0, #0
   12110:	beq	11f00 <__assert_fail@plt+0x112c>
   12114:	b	11f24 <__assert_fail@plt+0x1150>
   12118:	add	r1, sp, #5056	; 0x13c0
   1211c:	add	r1, r1, #8
   12120:	ldr	r3, [r1, r2]
   12124:	cmp	r3, #0
   12128:	beq	11f00 <__assert_fail@plt+0x112c>
   1212c:	ldr	r3, [r7, #12]
   12130:	cmp	r3, #0
   12134:	bne	11f00 <__assert_fail@plt+0x112c>
   12138:	movw	r1, #15900	; 0x3e1c
   1213c:	mov	r2, r4
   12140:	movt	r1, #1
   12144:	mov	r0, #1
   12148:	bl	10d50 <__printf_chk@plt>
   1214c:	b	11f00 <__assert_fail@plt+0x112c>
   12150:	mov	r0, r4
   12154:	bl	10da4 <fputs@plt>
   12158:	mov	r1, #1
   1215c:	mov	r2, #2
   12160:	ldr	r3, [sp, #52]	; 0x34
   12164:	movw	r0, #15832	; 0x3dd8
   12168:	movt	r0, #1
   1216c:	bl	10c90 <fwrite@plt>
   12170:	ldr	r0, [sp, #52]	; 0x34
   12174:	bl	10c00 <ferror@plt>
   12178:	cmp	r0, #0
   1217c:	beq	1208c <__assert_fail@plt+0x12b8>
   12180:	bl	10d2c <__errno_location@plt>
   12184:	ldr	r0, [r0]
   12188:	bl	10ce4 <strerror@plt>
   1218c:	mov	r1, r0
   12190:	movw	r0, #15836	; 0x3ddc
   12194:	movt	r0, #1
   12198:	bl	110ec <__assert_fail@plt+0x318>
   1219c:	movw	r1, #15872	; 0x3e00
   121a0:	mov	r2, r4
   121a4:	movt	r1, #1
   121a8:	mov	r0, #1
   121ac:	bl	10d50 <__printf_chk@plt>
   121b0:	b	120a4 <__assert_fail@plt+0x12d0>
   121b4:	movw	r0, #15748	; 0x3d84
   121b8:	mov	r1, r6
   121bc:	movt	r0, #1
   121c0:	mov	sl, #1
   121c4:	bl	11170 <__assert_fail@plt+0x39c>
   121c8:	b	11f98 <__assert_fail@plt+0x11c4>
   121cc:	movw	r1, #15892	; 0x3e14
   121d0:	mov	r2, r4
   121d4:	movt	r1, #1
   121d8:	mov	r0, #1
   121dc:	bl	10d50 <__printf_chk@plt>
   121e0:	b	11f00 <__assert_fail@plt+0x112c>
   121e4:	movw	r1, #15880	; 0x3e08
   121e8:	mov	r2, r4
   121ec:	movt	r1, #1
   121f0:	mov	r0, #1
   121f4:	bl	10d50 <__printf_chk@plt>
   121f8:	b	120ec <__assert_fail@plt+0x1318>
   121fc:	movw	r0, #15832	; 0x3dd8
   12200:	mov	r1, #1
   12204:	ldr	r3, [sp, #48]	; 0x30
   12208:	movt	r0, #1
   1220c:	bl	10c90 <fwrite@plt>
   12210:	b	1200c <__assert_fail@plt+0x1238>
   12214:	ldr	r3, [sp, #52]	; 0x34
   12218:	cmp	r3, #0
   1221c:	beq	12240 <__assert_fail@plt+0x146c>
   12220:	movw	r3, #20716	; 0x50ec
   12224:	movt	r3, #2
   12228:	ldr	r3, [r3, #8]
   1222c:	cmp	r3, #0
   12230:	beq	12240 <__assert_fail@plt+0x146c>
   12234:	ldr	r3, [sp, #24]
   12238:	cmp	r3, #0
   1223c:	bne	12268 <__assert_fail@plt+0x1494>
   12240:	mov	r0, r9
   12244:	bl	1262c <__assert_fail@plt+0x1858>
   12248:	add	r3, sp, #8192	; 0x2000
   1224c:	ldr	r2, [r3, #-3132]	; 0xfffff3c4
   12250:	ldr	r3, [fp]
   12254:	cmp	r2, r3
   12258:	bne	122bc <__assert_fail@plt+0x14e8>
   1225c:	add	sp, sp, #5056	; 0x13c0
   12260:	add	sp, sp, #12
   12264:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12268:	mov	r0, sp
   1226c:	bl	11210 <__assert_fail@plt+0x43c>
   12270:	ldr	r0, [sp, #52]	; 0x34
   12274:	bl	10d74 <fclose@plt>
   12278:	str	r5, [sp, #52]	; 0x34
   1227c:	str	r5, [sp, #24]
   12280:	b	12240 <__assert_fail@plt+0x146c>
   12284:	bl	10d2c <__errno_location@plt>
   12288:	ldr	r0, [r0]
   1228c:	bl	10ce4 <strerror@plt>
   12290:	mov	r1, r0
   12294:	movw	r0, #15792	; 0x3db0
   12298:	movt	r0, #1
   1229c:	bl	110ec <__assert_fail@plt+0x318>
   122a0:	bl	10d2c <__errno_location@plt>
   122a4:	ldr	r0, [r0]
   122a8:	bl	10ce4 <strerror@plt>
   122ac:	mov	r1, r0
   122b0:	movw	r0, #15664	; 0x3d30
   122b4:	movt	r0, #1
   122b8:	bl	110ec <__assert_fail@plt+0x318>
   122bc:	bl	10c54 <__stack_chk_fail@plt>
   122c0:	ldr	r3, [r0]
   122c4:	push	{r4, lr}
   122c8:	cmp	r3, #0
   122cc:	mov	r4, r0
   122d0:	beq	12300 <__assert_fail@plt+0x152c>
   122d4:	ldr	r2, [r0, #8]
   122d8:	cmp	r2, #0
   122dc:	beq	122e8 <__assert_fail@plt+0x1514>
   122e0:	mov	r0, #0
   122e4:	pop	{r4, pc}
   122e8:	mov	r2, r4
   122ec:	ldr	r0, [r0, #4]
   122f0:	blx	r3
   122f4:	cmp	r0, #0
   122f8:	strne	r0, [r4, #8]
   122fc:	pop	{r4, pc}
   12300:	mov	r0, r3
   12304:	pop	{r4, pc}
   12308:	push	{r4, r5, r6, lr}
   1230c:	mov	r6, r0
   12310:	ldr	r4, [r0, #4]
   12314:	mov	r5, r1
   12318:	cmp	r4, #0
   1231c:	beq	12360 <__assert_fail@plt+0x158c>
   12320:	cmp	r4, r1
   12324:	bne	12334 <__assert_fail@plt+0x1560>
   12328:	b	12368 <__assert_fail@plt+0x1594>
   1232c:	cmp	r5, r4
   12330:	beq	12368 <__assert_fail@plt+0x1594>
   12334:	ldr	r3, [r4, #4]
   12338:	mov	r0, r4
   1233c:	mov	r1, r5
   12340:	cmp	r3, #0
   12344:	beq	12354 <__assert_fail@plt+0x1580>
   12348:	bl	12308 <__assert_fail@plt+0x1534>
   1234c:	cmp	r0, #0
   12350:	popne	{r4, r5, r6, pc}
   12354:	ldr	r4, [r4]
   12358:	cmp	r4, #0
   1235c:	bne	1232c <__assert_fail@plt+0x1558>
   12360:	mov	r0, r4
   12364:	pop	{r4, r5, r6, pc}
   12368:	mov	r0, r6
   1236c:	pop	{r4, r5, r6, pc}
   12370:	push	{r4, r5, r6, lr}
   12374:	subs	r5, r0, #0
   12378:	popeq	{r4, r5, r6, pc}
   1237c:	ldr	r0, [r5, #4]
   12380:	ldr	r6, [r5]
   12384:	cmp	r0, #0
   12388:	beq	12390 <__assert_fail@plt+0x15bc>
   1238c:	bl	12370 <__assert_fail@plt+0x159c>
   12390:	ldr	r0, [r5, #8]
   12394:	cmp	r0, #0
   12398:	beq	123b0 <__assert_fail@plt+0x15dc>
   1239c:	ldr	r4, [r0]
   123a0:	bl	10be8 <free@plt>
   123a4:	cmp	r4, #0
   123a8:	mov	r0, r4
   123ac:	bne	1239c <__assert_fail@plt+0x15c8>
   123b0:	ldr	r0, [r5, #16]
   123b4:	bl	10be8 <free@plt>
   123b8:	mov	r0, r5
   123bc:	bl	10be8 <free@plt>
   123c0:	cmp	r6, #0
   123c4:	movne	r5, r6
   123c8:	bne	1237c <__assert_fail@plt+0x15a8>
   123cc:	pop	{r4, r5, r6, pc}
   123d0:	push	{r3, r4, r5, r6, r7, lr}
   123d4:	mov	r5, r0
   123d8:	add	r0, r2, #16
   123dc:	mov	r6, r2
   123e0:	mov	r7, r1
   123e4:	bl	10ccc <malloc@plt>
   123e8:	subs	r4, r0, #0
   123ec:	beq	12428 <__assert_fail@plt+0x1654>
   123f0:	cmp	r7, #0
   123f4:	str	r5, [r4, #4]
   123f8:	mov	r5, #0
   123fc:	str	r5, [r4]
   12400:	str	r5, [r4, #8]
   12404:	strb	r5, [r4, #12]
   12408:	beq	12428 <__assert_fail@plt+0x1654>
   1240c:	mov	r2, r6
   12410:	add	r6, r4, r6
   12414:	mov	r1, r7
   12418:	add	r0, r4, #12
   1241c:	bl	10c0c <memcpy@plt>
   12420:	add	r6, r6, #8
   12424:	strb	r5, [r6, #4]
   12428:	mov	r0, r4
   1242c:	pop	{r3, r4, r5, r6, r7, pc}
   12430:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12434:	subs	r4, r0, #0
   12438:	mov	r7, r1
   1243c:	mov	sl, r2
   12440:	beq	1252c <__assert_fail@plt+0x1758>
   12444:	mov	r0, r1
   12448:	bl	10d14 <strlen@plt>
   1244c:	subs	r5, r0, #0
   12450:	moveq	r6, r5
   12454:	bne	12508 <__assert_fail@plt+0x1734>
   12458:	ldr	r4, [r4, #8]
   1245c:	cmp	r4, #0
   12460:	beq	1252c <__assert_fail@plt+0x1758>
   12464:	mov	r9, #0
   12468:	mov	r8, r9
   1246c:	b	124bc <__assert_fail@plt+0x16e8>
   12470:	cmp	r0, r5
   12474:	movcc	r0, #0
   12478:	movcs	r0, #1
   1247c:	cmp	r0, #0
   12480:	beq	124b0 <__assert_fail@plt+0x16dc>
   12484:	mov	r0, fp
   12488:	mov	r1, r7
   1248c:	mov	r2, r5
   12490:	bl	10c3c <memcmp@plt>
   12494:	cmp	r0, #0
   12498:	bne	124b0 <__assert_fail@plt+0x16dc>
   1249c:	cmn	sl, #1
   124a0:	add	r8, r8, #1
   124a4:	beq	12524 <__assert_fail@plt+0x1750>
   124a8:	cmp	r8, sl
   124ac:	beq	1252c <__assert_fail@plt+0x1758>
   124b0:	ldr	r4, [r4]
   124b4:	cmp	r4, #0
   124b8:	beq	12500 <__assert_fail@plt+0x172c>
   124bc:	ldr	r3, [r4, #4]
   124c0:	cmp	r3, #0
   124c4:	bne	124b0 <__assert_fail@plt+0x16dc>
   124c8:	add	fp, r4, #8
   124cc:	mov	r1, #58	; 0x3a
   124d0:	mov	r0, fp
   124d4:	bl	10d20 <strchr@plt>
   124d8:	cmp	r0, #0
   124dc:	beq	124b0 <__assert_fail@plt+0x16dc>
   124e0:	subs	r0, r0, fp
   124e4:	beq	124b0 <__assert_fail@plt+0x16dc>
   124e8:	cmp	r6, #0
   124ec:	bne	12470 <__assert_fail@plt+0x169c>
   124f0:	subs	r3, r0, r5
   124f4:	rsbs	r0, r3, #0
   124f8:	adcs	r0, r0, r3
   124fc:	b	1247c <__assert_fail@plt+0x16a8>
   12500:	mov	r0, r9
   12504:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12508:	sub	r3, r5, #1
   1250c:	ldrb	r2, [r7, r3]
   12510:	cmp	r2, #42	; 0x2a
   12514:	moveq	r5, r3
   12518:	movne	r6, #0
   1251c:	moveq	r6, #1
   12520:	b	12458 <__assert_fail@plt+0x1684>
   12524:	mov	r9, r4
   12528:	b	124b0 <__assert_fail@plt+0x16dc>
   1252c:	mov	r0, r4
   12530:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12534:	push	{r3, r4, r5, r6, r7, lr}
   12538:	mov	r5, r0
   1253c:	mov	r6, r1
   12540:	mov	r0, #1
   12544:	mov	r1, #32
   12548:	bl	10bc4 <calloc@plt>
   1254c:	subs	r4, r0, #0
   12550:	beq	12590 <__assert_fail@plt+0x17bc>
   12554:	mov	r0, #1
   12558:	mov	r1, #20
   1255c:	bl	10bc4 <calloc@plt>
   12560:	subs	r3, r0, #0
   12564:	beq	125d8 <__assert_fail@plt+0x1804>
   12568:	cmp	r5, #0
   1256c:	add	r2, r3, #8
   12570:	str	r3, [r4, #24]
   12574:	str	r3, [r4, #20]
   12578:	stm	r4, {r5, r6}
   1257c:	str	r2, [r3, #12]
   12580:	beq	12590 <__assert_fail@plt+0x17bc>
   12584:	ldr	r7, [r4, #8]
   12588:	cmp	r7, #0
   1258c:	beq	12598 <__assert_fail@plt+0x17c4>
   12590:	mov	r0, r4
   12594:	pop	{r3, r4, r5, r6, r7, pc}
   12598:	mov	r0, r6
   1259c:	mov	r1, #1
   125a0:	mov	r2, r4
   125a4:	blx	r5
   125a8:	cmp	r0, #0
   125ac:	beq	12590 <__assert_fail@plt+0x17bc>
   125b0:	str	r0, [r4, #8]
   125b4:	ldr	r0, [r4, #20]
   125b8:	bl	12370 <__assert_fail@plt+0x159c>
   125bc:	str	r7, [r4, #20]
   125c0:	str	r7, [r4, #24]
   125c4:	mov	r0, r4
   125c8:	str	r7, [r4, #28]
   125cc:	mov	r4, r7
   125d0:	bl	10be8 <free@plt>
   125d4:	b	12590 <__assert_fail@plt+0x17bc>
   125d8:	str	r3, [r4, #24]
   125dc:	mov	r0, r4
   125e0:	str	r3, [r4, #20]
   125e4:	mov	r4, r3
   125e8:	bl	10be8 <free@plt>
   125ec:	mov	r0, r4
   125f0:	pop	{r3, r4, r5, r6, r7, pc}
   125f4:	push	{r4, lr}
   125f8:	subs	r4, r0, #0
   125fc:	popeq	{r4, pc}
   12600:	mov	r1, #3
   12604:	bl	122c0 <__assert_fail@plt+0x14ec>
   12608:	ldr	r0, [r4, #20]
   1260c:	bl	12370 <__assert_fail@plt+0x159c>
   12610:	mov	r3, #0
   12614:	mov	r0, r4
   12618:	str	r3, [r4, #20]
   1261c:	str	r3, [r4, #24]
   12620:	str	r3, [r4, #28]
   12624:	pop	{r4, lr}
   12628:	b	10be8 <free@plt>
   1262c:	push	{r4, lr}
   12630:	subs	r4, r0, #0
   12634:	popeq	{r4, pc}
   12638:	mov	r1, #2
   1263c:	bl	122c0 <__assert_fail@plt+0x14ec>
   12640:	ldr	r0, [r4, #20]
   12644:	bl	12370 <__assert_fail@plt+0x159c>
   12648:	mov	r3, #0
   1264c:	mov	r0, r4
   12650:	str	r3, [r4, #20]
   12654:	str	r3, [r4, #24]
   12658:	str	r3, [r4, #28]
   1265c:	pop	{r4, lr}
   12660:	b	10be8 <free@plt>
   12664:	ldr	r3, [r0]
   12668:	push	{r4, lr}
   1266c:	cmp	r3, #0
   12670:	mov	r4, r0
   12674:	beq	126a8 <__assert_fail@plt+0x18d4>
   12678:	ldr	r2, [r0, #8]
   1267c:	cmp	r2, #0
   12680:	beq	1268c <__assert_fail@plt+0x18b8>
   12684:	mov	r0, #0
   12688:	pop	{r4, pc}
   1268c:	mov	r1, #5
   12690:	mov	r2, r4
   12694:	ldr	r0, [r0, #4]
   12698:	blx	r3
   1269c:	cmp	r0, #0
   126a0:	strne	r0, [r4, #8]
   126a4:	pop	{r4, pc}
   126a8:	mov	r0, r3
   126ac:	pop	{r4, pc}
   126b0:	push	{r4, r5, r6, r7, r8, lr}
   126b4:	mov	r6, r3
   126b8:	ldr	r0, [r0, #24]
   126bc:	bl	12430 <__assert_fail@plt+0x165c>
   126c0:	subs	r8, r0, #0
   126c4:	beq	127c8 <__assert_fail@plt+0x19f4>
   126c8:	add	r7, r8, #8
   126cc:	mov	r0, r7
   126d0:	bl	10d14 <strlen@plt>
   126d4:	ldr	r4, [r8]
   126d8:	cmp	r4, #0
   126dc:	add	r5, r0, #1
   126e0:	bne	12704 <__assert_fail@plt+0x1930>
   126e4:	b	12710 <__assert_fail@plt+0x193c>
   126e8:	add	r0, r4, #8
   126ec:	bl	10d14 <strlen@plt>
   126f0:	ldr	r4, [r4]
   126f4:	cmp	r4, #0
   126f8:	add	r0, r0, #1
   126fc:	add	r5, r5, r0
   12700:	beq	12710 <__assert_fail@plt+0x193c>
   12704:	ldr	r3, [r4, #4]
   12708:	cmp	r3, #0
   1270c:	bne	126e8 <__assert_fail@plt+0x1914>
   12710:	mov	r0, r5
   12714:	bl	10ccc <malloc@plt>
   12718:	subs	r5, r0, #0
   1271c:	beq	12774 <__assert_fail@plt+0x19a0>
   12720:	mov	r1, r7
   12724:	mov	r7, #10
   12728:	bl	10c48 <stpcpy@plt>
   1272c:	strb	r7, [r0]
   12730:	add	r0, r0, #1
   12734:	ldr	r4, [r8]
   12738:	cmp	r4, #0
   1273c:	bne	12760 <__assert_fail@plt+0x198c>
   12740:	b	1276c <__assert_fail@plt+0x1998>
   12744:	add	r1, r4, #8
   12748:	bl	10c48 <stpcpy@plt>
   1274c:	strb	r7, [r0]
   12750:	add	r0, r0, #1
   12754:	ldr	r4, [r4]
   12758:	cmp	r4, #0
   1275c:	beq	1276c <__assert_fail@plt+0x1998>
   12760:	ldr	r3, [r4, #4]
   12764:	cmp	r3, #0
   12768:	bne	12744 <__assert_fail@plt+0x1970>
   1276c:	mov	r3, #0
   12770:	strb	r3, [r0, #-1]
   12774:	cmp	r6, #0
   12778:	beq	127c0 <__assert_fail@plt+0x19ec>
   1277c:	mov	r0, r5
   12780:	mov	r1, #58	; 0x3a
   12784:	bl	10d20 <strchr@plt>
   12788:	cmp	r0, #0
   1278c:	streq	r0, [r6]
   12790:	beq	127c0 <__assert_fail@plt+0x19ec>
   12794:	add	r1, r0, #1
   12798:	mov	r4, r1
   1279c:	ldrb	r2, [r1], #1
   127a0:	sub	ip, r2, #9
   127a4:	cmp	r2, #32
   127a8:	cmpne	ip, #1
   127ac:	bls	12798 <__assert_fail@plt+0x19c4>
   127b0:	cmp	r2, #13
   127b4:	beq	12798 <__assert_fail@plt+0x19c4>
   127b8:	rsb	r4, r5, r4
   127bc:	str	r4, [r6]
   127c0:	mov	r0, r5
   127c4:	pop	{r4, r5, r6, r7, r8, pc}
   127c8:	bl	10d2c <__errno_location@plt>
   127cc:	mov	r5, r8
   127d0:	str	r8, [r0]
   127d4:	b	127c0 <__assert_fail@plt+0x19ec>
   127d8:	subs	r2, r0, #0
   127dc:	beq	12830 <__assert_fail@plt+0x1a5c>
   127e0:	ldr	r3, [r1]
   127e4:	cmp	r3, r2
   127e8:	beq	12838 <__assert_fail@plt+0x1a64>
   127ec:	ldr	r0, [r2, #24]
   127f0:	cmp	r0, #0
   127f4:	bxeq	lr
   127f8:	cmp	r3, #0
   127fc:	beq	12818 <__assert_fail@plt+0x1a44>
   12800:	mov	r0, r3
   12804:	ldr	r3, [r0], #8
   12808:	cmp	r3, #0
   1280c:	moveq	r3, r2
   12810:	str	r3, [r1]
   12814:	bx	lr
   12818:	ldr	r3, [r0, #8]
   1281c:	cmp	r3, #0
   12820:	bne	12800 <__assert_fail@plt+0x1a2c>
   12824:	str	r2, [r1]
   12828:	mov	r0, r3
   1282c:	bx	lr
   12830:	mov	r0, r2
   12834:	bx	lr
   12838:	mov	r0, #0
   1283c:	bx	lr
   12840:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12844:	movw	r3, #20688	; 0x50d0
   12848:	sub	sp, sp, #44	; 0x2c
   1284c:	movt	r3, #2
   12850:	subs	ip, r2, #0
   12854:	str	r3, [sp, #16]
   12858:	ldr	r3, [r3]
   1285c:	moveq	r0, ip
   12860:	str	r3, [sp, #36]	; 0x24
   12864:	beq	1290c <__assert_fail@plt+0x1b38>
   12868:	ldr	r0, [r0, #24]
   1286c:	bl	12430 <__assert_fail@plt+0x165c>
   12870:	subs	fp, r0, #0
   12874:	beq	12908 <__assert_fail@plt+0x1b34>
   12878:	bl	10d2c <__errno_location@plt>
   1287c:	add	r6, fp, #8
   12880:	mov	r2, #0
   12884:	mov	r1, #58	; 0x3a
   12888:	str	r2, [sp, #32]
   1288c:	str	r0, [sp, #24]
   12890:	mov	r0, r6
   12894:	ldr	r4, [sp, #24]
   12898:	str	r2, [r4]
   1289c:	bl	10d20 <strchr@plt>
   128a0:	subs	r5, r0, #0
   128a4:	beq	12da0 <__assert_fail@plt+0x1fcc>
   128a8:	subs	r7, r5, r6
   128ac:	beq	12d98 <__assert_fail@plt+0x1fc4>
   128b0:	movw	r1, #14948	; 0x3a64
   128b4:	ldr	r4, [pc, #1264]	; 12dac <__assert_fail@plt+0x1fd8>
   128b8:	movt	r1, #1
   128bc:	b	128d0 <__assert_fail@plt+0x1afc>
   128c0:	add	r4, r4, #8
   128c4:	ldr	r1, [r4, #-4]
   128c8:	cmp	r1, #0
   128cc:	beq	12928 <__assert_fail@plt+0x1b54>
   128d0:	ldr	r3, [r4]
   128d4:	cmp	r7, r3
   128d8:	bne	128c0 <__assert_fail@plt+0x1aec>
   128dc:	mov	r0, r6
   128e0:	mov	r2, r7
   128e4:	bl	10c3c <memcmp@plt>
   128e8:	cmp	r0, #0
   128ec:	bne	128c0 <__assert_fail@plt+0x1aec>
   128f0:	movw	r3, #16688	; 0x4130
   128f4:	movt	r3, #1
   128f8:	add	r4, r3, #12
   128fc:	str	r3, [sp, #20]
   12900:	str	r4, [sp, #28]
   12904:	b	12938 <__assert_fail@plt+0x1b64>
   12908:	mov	r0, fp
   1290c:	ldr	r4, [sp, #16]
   12910:	ldr	r2, [sp, #36]	; 0x24
   12914:	ldr	r3, [r4]
   12918:	cmp	r2, r3
   1291c:	bne	12da8 <__assert_fail@plt+0x1fd4>
   12920:	add	sp, sp, #44	; 0x2c
   12924:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12928:	ldr	r3, [pc, #1152]	; 12db0 <__assert_fail@plt+0x1fdc>
   1292c:	add	r4, r3, #8
   12930:	str	r4, [sp, #28]
   12934:	str	r3, [sp, #20]
   12938:	ldrb	r8, [r5, #1]
   1293c:	add	r4, r5, #1
   12940:	mov	r6, #0
   12944:	add	r3, sp, #32
   12948:	str	r3, [sp, #12]
   1294c:	cmp	r8, #0
   12950:	bne	12974 <__assert_fail@plt+0x1ba0>
   12954:	ldr	fp, [fp]
   12958:	cmp	fp, #0
   1295c:	beq	12d90 <__assert_fail@plt+0x1fbc>
   12960:	ldr	r3, [fp, #4]
   12964:	cmp	r3, #0
   12968:	beq	12d90 <__assert_fail@plt+0x1fbc>
   1296c:	ldrb	r8, [fp, #8]
   12970:	add	r4, fp, #8
   12974:	cmp	r8, #40	; 0x28
   12978:	beq	12b88 <__assert_fail@plt+0x1db4>
   1297c:	subs	r3, r8, #34	; 0x22
   12980:	rsbs	r5, r3, #0
   12984:	adcs	r5, r5, r3
   12988:	cmp	r8, #91	; 0x5b
   1298c:	movne	r7, r5
   12990:	orreq	r7, r5, #1
   12994:	cmp	r7, #0
   12998:	beq	12b40 <__assert_fail@plt+0x1d6c>
   1299c:	add	r7, r4, #1
   129a0:	cmp	r5, #0
   129a4:	ldrb	r3, [r7]
   129a8:	mov	r6, #0
   129ac:	moveq	r5, #93	; 0x5d
   129b0:	movne	r5, #34	; 0x22
   129b4:	cmp	r3, #0
   129b8:	beq	12ad0 <__assert_fail@plt+0x1cfc>
   129bc:	cmp	r3, r5
   129c0:	mov	r4, r7
   129c4:	bne	129e0 <__assert_fail@plt+0x1c0c>
   129c8:	b	12c80 <__assert_fail@plt+0x1eac>
   129cc:	cmp	r3, #0
   129d0:	add	r4, r4, #1
   129d4:	beq	12a00 <__assert_fail@plt+0x1c2c>
   129d8:	cmp	r3, r5
   129dc:	beq	12a00 <__assert_fail@plt+0x1c2c>
   129e0:	cmp	r3, #92	; 0x5c
   129e4:	ldrb	r3, [r4, #1]
   129e8:	bne	129cc <__assert_fail@plt+0x1bf8>
   129ec:	cmp	r3, #0
   129f0:	ldrbne	r3, [r4, #2]
   129f4:	addne	r4, r4, #1
   129f8:	bne	129cc <__assert_fail@plt+0x1bf8>
   129fc:	add	r4, r4, #1
   12a00:	rsb	r9, r7, r4
   12a04:	cmp	r6, #0
   12a08:	beq	12ae0 <__assert_fail@plt+0x1d0c>
   12a0c:	add	r1, r6, #12
   12a10:	str	r1, [sp, #4]
   12a14:	mov	r0, r1
   12a18:	bl	10d14 <strlen@plt>
   12a1c:	add	r3, r0, r9
   12a20:	mov	sl, r0
   12a24:	add	r0, r3, #16
   12a28:	str	r3, [sp, #8]
   12a2c:	bl	10ccc <malloc@plt>
   12a30:	ldr	r1, [sp, #4]
   12a34:	subs	r8, r0, #0
   12a38:	beq	12a8c <__assert_fail@plt+0x1cb8>
   12a3c:	ldm	r6, {r2, lr}
   12a40:	add	r0, r8, #12
   12a44:	ldr	ip, [r6, #8]
   12a48:	stm	r8, {r2, lr}
   12a4c:	mov	r2, sl
   12a50:	str	ip, [r8, #8]
   12a54:	bl	10c0c <memcpy@plt>
   12a58:	add	r0, r8, sl
   12a5c:	mov	r1, r7
   12a60:	mov	r2, r9
   12a64:	add	r0, r0, #12
   12a68:	bl	10c0c <memcpy@plt>
   12a6c:	ldr	r3, [sp, #8]
   12a70:	mov	r1, #0
   12a74:	mov	r2, #0
   12a78:	add	sl, r8, r3
   12a7c:	mov	r0, r6
   12a80:	strb	r1, [sl, #12]
   12a84:	str	r2, [r6]
   12a88:	bl	10be8 <free@plt>
   12a8c:	mov	r6, r8
   12a90:	cmp	r6, #0
   12a94:	beq	12b04 <__assert_fail@plt+0x1d30>
   12a98:	ldrb	r3, [r4]
   12a9c:	cmp	r3, #0
   12aa0:	bne	12c4c <__assert_fail@plt+0x1e78>
   12aa4:	ldr	r3, [fp]
   12aa8:	cmp	r3, #0
   12aac:	beq	12c4c <__assert_fail@plt+0x1e78>
   12ab0:	ldr	r2, [r3, #4]
   12ab4:	cmp	r2, #0
   12ab8:	beq	12c4c <__assert_fail@plt+0x1e78>
   12abc:	add	r7, r3, #8
   12ac0:	mov	fp, r3
   12ac4:	ldrb	r3, [r7]
   12ac8:	cmp	r3, #0
   12acc:	bne	129bc <__assert_fail@plt+0x1be8>
   12ad0:	cmp	r6, #0
   12ad4:	mov	r9, r3
   12ad8:	mov	r4, r7
   12adc:	bne	12a0c <__assert_fail@plt+0x1c38>
   12ae0:	cmp	r5, #34	; 0x22
   12ae4:	mov	r1, r7
   12ae8:	mov	r2, r9
   12aec:	movne	r0, #3
   12af0:	moveq	r0, #2
   12af4:	bl	123d0 <__assert_fail@plt+0x15fc>
   12af8:	mov	r6, r0
   12afc:	cmp	r6, #0
   12b00:	bne	12a98 <__assert_fail@plt+0x1cc4>
   12b04:	ldr	r0, [sp, #32]
   12b08:	ldr	r4, [sp, #24]
   12b0c:	cmp	r0, #0
   12b10:	ldr	r5, [r4]
   12b14:	bne	12b20 <__assert_fail@plt+0x1d4c>
   12b18:	b	12b30 <__assert_fail@plt+0x1d5c>
   12b1c:	mov	r0, r4
   12b20:	ldr	r4, [r0]
   12b24:	bl	10be8 <free@plt>
   12b28:	cmp	r4, #0
   12b2c:	bne	12b1c <__assert_fail@plt+0x1d48>
   12b30:	ldr	r3, [sp, #24]
   12b34:	mov	r0, #0
   12b38:	str	r5, [r3]
   12b3c:	b	1290c <__assert_fail@plt+0x1b38>
   12b40:	ldr	r0, [sp, #20]
   12b44:	mov	r1, r8
   12b48:	bl	10d20 <strchr@plt>
   12b4c:	cmp	r0, #0
   12b50:	beq	12c88 <__assert_fail@plt+0x1eb4>
   12b54:	mov	r0, #4
   12b58:	mov	r1, r4
   12b5c:	mov	r2, #1
   12b60:	bl	123d0 <__assert_fail@plt+0x15fc>
   12b64:	cmp	r0, #0
   12b68:	beq	12b04 <__assert_fail@plt+0x1d30>
   12b6c:	ldr	r3, [sp, #12]
   12b70:	mov	r6, r7
   12b74:	str	r0, [sp, #12]
   12b78:	add	r4, r4, #1
   12b7c:	str	r0, [r3]
   12b80:	ldrb	r8, [r4]
   12b84:	b	1294c <__assert_fail@plt+0x1b78>
   12b88:	ldrb	r8, [r4, #1]
   12b8c:	mov	r2, #0
   12b90:	add	r4, r4, #1
   12b94:	mov	r0, #1
   12b98:	b	12bb8 <__assert_fail@plt+0x1de4>
   12b9c:	cmp	r8, #34	; 0x22
   12ba0:	beq	12c10 <__assert_fail@plt+0x1e3c>
   12ba4:	cmp	r8, #92	; 0x5c
   12ba8:	ldrb	r8, [r4, #1]
   12bac:	beq	12c2c <__assert_fail@plt+0x1e58>
   12bb0:	mov	r2, #1
   12bb4:	add	r4, r4, #1
   12bb8:	cmp	r8, #0
   12bbc:	bne	12be4 <__assert_fail@plt+0x1e10>
   12bc0:	ldr	r3, [fp]
   12bc4:	cmp	r3, #0
   12bc8:	beq	12c78 <__assert_fail@plt+0x1ea4>
   12bcc:	ldr	r1, [r3, #4]
   12bd0:	cmp	r1, #0
   12bd4:	beq	12c78 <__assert_fail@plt+0x1ea4>
   12bd8:	ldrb	r8, [r3, #8]
   12bdc:	add	r4, r3, #8
   12be0:	mov	fp, r3
   12be4:	cmp	r2, #0
   12be8:	bne	12b9c <__assert_fail@plt+0x1dc8>
   12bec:	cmp	r8, #41	; 0x29
   12bf0:	beq	12c1c <__assert_fail@plt+0x1e48>
   12bf4:	cmp	r8, #40	; 0x28
   12bf8:	beq	12c44 <__assert_fail@plt+0x1e70>
   12bfc:	subs	r1, r8, #34	; 0x22
   12c00:	ldrb	r8, [r4, #1]
   12c04:	rsbs	r2, r1, #0
   12c08:	adcs	r2, r2, r1
   12c0c:	b	12bb4 <__assert_fail@plt+0x1de0>
   12c10:	ldrb	r8, [r4, #1]
   12c14:	mov	r2, #0
   12c18:	b	12bb4 <__assert_fail@plt+0x1de0>
   12c1c:	subs	r0, r0, #1
   12c20:	beq	12d50 <__assert_fail@plt+0x1f7c>
   12c24:	ldrb	r8, [r4, #1]
   12c28:	b	12bb4 <__assert_fail@plt+0x1de0>
   12c2c:	cmp	r8, #0
   12c30:	beq	12bb0 <__assert_fail@plt+0x1ddc>
   12c34:	ldrb	r8, [r4, #2]
   12c38:	mov	r2, #1
   12c3c:	add	r4, r4, r2
   12c40:	b	12bb4 <__assert_fail@plt+0x1de0>
   12c44:	add	r0, r0, #1
   12c48:	b	12c24 <__assert_fail@plt+0x1e50>
   12c4c:	ldr	r1, [sp, #12]
   12c50:	mov	r3, r4
   12c54:	str	r6, [sp, #12]
   12c58:	str	r6, [r1]
   12c5c:	ldrb	r6, [r4]
   12c60:	cmp	r6, #0
   12c64:	beq	12954 <__assert_fail@plt+0x1b80>
   12c68:	add	r4, r4, #1
   12c6c:	ldrb	r8, [r3, #1]
   12c70:	mov	r6, #0
   12c74:	b	1294c <__assert_fail@plt+0x1b78>
   12c78:	mov	r6, r8
   12c7c:	b	12954 <__assert_fail@plt+0x1b80>
   12c80:	mov	r9, #0
   12c84:	b	12a04 <__assert_fail@plt+0x1c30>
   12c88:	sub	r3, r8, #9
   12c8c:	cmp	r8, #32
   12c90:	cmpne	r3, #1
   12c94:	bhi	12ccc <__assert_fail@plt+0x1ef8>
   12c98:	add	r3, r4, #1
   12c9c:	mov	r4, r3
   12ca0:	add	r3, r3, #1
   12ca4:	ldrb	r8, [r4]
   12ca8:	sub	r6, r8, #9
   12cac:	cmp	r8, #32
   12cb0:	cmpne	r6, #1
   12cb4:	movhi	r6, #0
   12cb8:	movls	r6, #1
   12cbc:	bls	12c9c <__assert_fail@plt+0x1ec8>
   12cc0:	cmp	r8, #13
   12cc4:	bne	1294c <__assert_fail@plt+0x1b78>
   12cc8:	b	12c9c <__assert_fail@plt+0x1ec8>
   12ccc:	cmp	r8, #13
   12cd0:	beq	12c98 <__assert_fail@plt+0x1ec4>
   12cd4:	sub	r8, r8, #33	; 0x21
   12cd8:	cmp	r8, #94	; 0x5e
   12cdc:	bhi	12d60 <__assert_fail@plt+0x1f8c>
   12ce0:	ldrb	r1, [r4, #1]
   12ce4:	add	r5, r4, #1
   12ce8:	sub	r3, r1, #33	; 0x21
   12cec:	cmp	r3, #94	; 0x5e
   12cf0:	ldrls	r6, [sp, #28]
   12cf4:	bls	12d0c <__assert_fail@plt+0x1f38>
   12cf8:	b	12d1c <__assert_fail@plt+0x1f48>
   12cfc:	ldrb	r1, [r5, #1]!
   12d00:	sub	r3, r1, #33	; 0x21
   12d04:	cmp	r3, #94	; 0x5e
   12d08:	bhi	12d1c <__assert_fail@plt+0x1f48>
   12d0c:	mov	r0, r6
   12d10:	bl	10d20 <strchr@plt>
   12d14:	cmp	r0, #0
   12d18:	beq	12cfc <__assert_fail@plt+0x1f28>
   12d1c:	mov	r1, r4
   12d20:	mov	r0, #1
   12d24:	rsb	r2, r4, r5
   12d28:	bl	123d0 <__assert_fail@plt+0x15fc>
   12d2c:	cmp	r0, #0
   12d30:	beq	12b04 <__assert_fail@plt+0x1d30>
   12d34:	ldr	r4, [sp, #12]
   12d38:	mov	r6, #0
   12d3c:	str	r0, [sp, #12]
   12d40:	str	r0, [r4]
   12d44:	mov	r4, r5
   12d48:	ldrb	r8, [r5]
   12d4c:	b	1294c <__assert_fail@plt+0x1b78>
   12d50:	mov	r6, r0
   12d54:	ldrb	r8, [r4, #1]
   12d58:	add	r4, r4, #1
   12d5c:	b	1294c <__assert_fail@plt+0x1b78>
   12d60:	cmp	r6, #0
   12d64:	bne	12d54 <__assert_fail@plt+0x1f80>
   12d68:	mov	r1, r6
   12d6c:	mov	r2, r6
   12d70:	bl	123d0 <__assert_fail@plt+0x15fc>
   12d74:	cmp	r0, #0
   12d78:	beq	12b04 <__assert_fail@plt+0x1d30>
   12d7c:	ldr	r3, [sp, #12]
   12d80:	mov	r6, #1
   12d84:	str	r0, [sp, #12]
   12d88:	str	r0, [r3]
   12d8c:	b	12d54 <__assert_fail@plt+0x1f80>
   12d90:	ldr	r0, [sp, #32]
   12d94:	b	1290c <__assert_fail@plt+0x1b38>
   12d98:	mov	r0, r7
   12d9c:	b	1290c <__assert_fail@plt+0x1b38>
   12da0:	mov	r0, r5
   12da4:	b	1290c <__assert_fail@plt+0x1b38>
   12da8:	bl	10c54 <__stack_chk_fail@plt>
   12dac:	andeq	r4, r1, r8, ror #2
   12db0:	andeq	r4, r1, ip, asr #2
   12db4:	cmp	r0, #0
   12db8:	push	{r4, lr}
   12dbc:	popeq	{r4, pc}
   12dc0:	ldr	r4, [r0]
   12dc4:	bl	10be8 <free@plt>
   12dc8:	cmp	r4, #0
   12dcc:	mov	r0, r4
   12dd0:	bne	12dc0 <__assert_fail@plt+0x1fec>
   12dd4:	pop	{r4, pc}
   12dd8:	push	{r3, r4, r5, r6, r7, lr}
   12ddc:	subs	r4, r0, #0
   12de0:	mov	r5, r1
   12de4:	mov	r6, r2
   12de8:	bne	12dfc <__assert_fail@plt+0x2028>
   12dec:	b	12e34 <__assert_fail@plt+0x2060>
   12df0:	ldr	r4, [r4]
   12df4:	cmp	r4, #0
   12df8:	beq	12e34 <__assert_fail@plt+0x2060>
   12dfc:	ldr	r3, [r4, #4]
   12e00:	cmp	r3, #4
   12e04:	bne	12df0 <__assert_fail@plt+0x201c>
   12e08:	ldrb	r3, [r4, #12]
   12e0c:	cmp	r3, #59	; 0x3b
   12e10:	bne	12df0 <__assert_fail@plt+0x201c>
   12e14:	ldr	r7, [r4]
   12e18:	cmp	r7, #0
   12e1c:	beq	12e34 <__assert_fail@plt+0x2060>
   12e20:	ldr	r3, [r7, #4]
   12e24:	cmp	r3, #1
   12e28:	beq	12e3c <__assert_fail@plt+0x2068>
   12e2c:	mov	r4, r7
   12e30:	b	12dfc <__assert_fail@plt+0x2028>
   12e34:	mov	r0, #0
   12e38:	pop	{r3, r4, r5, r6, r7, pc}
   12e3c:	ldr	r3, [r7]
   12e40:	cmp	r3, #0
   12e44:	beq	12e2c <__assert_fail@plt+0x2058>
   12e48:	ldr	r2, [r3, #4]
   12e4c:	cmp	r2, #4
   12e50:	bne	12e2c <__assert_fail@plt+0x2058>
   12e54:	ldrb	r2, [r3, #12]
   12e58:	cmp	r2, #61	; 0x3d
   12e5c:	bne	12e2c <__assert_fail@plt+0x2058>
   12e60:	ldr	r3, [r3]
   12e64:	cmp	r3, #0
   12e68:	beq	12e7c <__assert_fail@plt+0x20a8>
   12e6c:	ldr	r3, [r3, #4]
   12e70:	sub	r3, r3, #1
   12e74:	cmp	r3, #1
   12e78:	bhi	12e2c <__assert_fail@plt+0x2058>
   12e7c:	ldrb	r3, [r7, #8]
   12e80:	tst	r3, #2
   12e84:	addne	r0, r7, #12
   12e88:	bne	12ec8 <__assert_fail@plt+0x20f4>
   12e8c:	ldrb	r3, [r7, #12]
   12e90:	add	r0, r7, #12
   12e94:	cmp	r3, #0
   12e98:	addne	ip, r7, #13
   12e9c:	beq	12ebc <__assert_fail@plt+0x20e8>
   12ea0:	sub	lr, r3, #65	; 0x41
   12ea4:	add	r3, r3, #32
   12ea8:	cmp	lr, #25
   12eac:	strbls	r3, [ip, #-1]
   12eb0:	ldrb	r3, [ip], #1
   12eb4:	cmp	r3, #0
   12eb8:	bne	12ea0 <__assert_fail@plt+0x20cc>
   12ebc:	ldrb	r3, [r7, #8]
   12ec0:	orr	r3, r3, #2
   12ec4:	strb	r3, [r7, #8]
   12ec8:	mov	r1, r5
   12ecc:	bl	10bd0 <strcmp@plt>
   12ed0:	cmp	r0, #0
   12ed4:	bne	12df0 <__assert_fail@plt+0x201c>
   12ed8:	ldr	r3, [r7]
   12edc:	ldr	r3, [r3]
   12ee0:	adds	r2, r3, #0
   12ee4:	movne	r2, #1
   12ee8:	cmp	r6, #0
   12eec:	cmpne	r3, #0
   12ef0:	beq	12f40 <__assert_fail@plt+0x216c>
   12ef4:	ldrb	r2, [r3, #8]
   12ef8:	tst	r2, #2
   12efc:	bne	12f48 <__assert_fail@plt+0x2174>
   12f00:	ldrb	r2, [r3, #12]
   12f04:	add	r0, r3, #12
   12f08:	cmp	r2, #0
   12f0c:	addne	r1, r3, #13
   12f10:	beq	12f30 <__assert_fail@plt+0x215c>
   12f14:	sub	ip, r2, #65	; 0x41
   12f18:	add	r2, r2, #32
   12f1c:	cmp	ip, #25
   12f20:	strbls	r2, [r1, #-1]
   12f24:	ldrb	r2, [r1], #1
   12f28:	cmp	r2, #0
   12f2c:	bne	12f14 <__assert_fail@plt+0x2140>
   12f30:	ldrb	r2, [r3, #8]
   12f34:	orr	r2, r2, #2
   12f38:	strb	r2, [r3, #8]
   12f3c:	pop	{r3, r4, r5, r6, r7, pc}
   12f40:	cmp	r2, #0
   12f44:	beq	12f50 <__assert_fail@plt+0x217c>
   12f48:	add	r0, r3, #12
   12f4c:	pop	{r3, r4, r5, r6, r7, pc}
   12f50:	movw	r0, #16988	; 0x425c
   12f54:	movt	r0, #1
   12f58:	pop	{r3, r4, r5, r6, r7, pc}
   12f5c:	ldr	r3, [r0, #4]
   12f60:	push	{r4, r5}
   12f64:	cmp	r3, #1
   12f68:	bne	12fdc <__assert_fail@plt+0x2208>
   12f6c:	ldrb	r3, [r0, #8]
   12f70:	tst	r3, #2
   12f74:	beq	12fe8 <__assert_fail@plt+0x2214>
   12f78:	ldr	r3, [r0]
   12f7c:	cmp	r3, #0
   12f80:	beq	12fdc <__assert_fail@plt+0x2208>
   12f84:	ldr	r2, [r3, #4]
   12f88:	cmp	r2, #4
   12f8c:	bne	12fdc <__assert_fail@plt+0x2208>
   12f90:	ldrb	r2, [r3, #12]
   12f94:	cmp	r2, #47	; 0x2f
   12f98:	bne	12fdc <__assert_fail@plt+0x2208>
   12f9c:	ldr	r4, [r3]
   12fa0:	cmp	r4, #0
   12fa4:	beq	12fdc <__assert_fail@plt+0x2208>
   12fa8:	ldr	r3, [r4, #4]
   12fac:	cmp	r3, #1
   12fb0:	bne	12fdc <__assert_fail@plt+0x2208>
   12fb4:	cmp	r1, #0
   12fb8:	beq	12fd0 <__assert_fail@plt+0x21fc>
   12fbc:	ldrb	r3, [r4, #8]
   12fc0:	tst	r3, #2
   12fc4:	addne	r3, r4, #12
   12fc8:	beq	13024 <__assert_fail@plt+0x2250>
   12fcc:	str	r3, [r1]
   12fd0:	add	r0, r0, #12
   12fd4:	pop	{r4, r5}
   12fd8:	bx	lr
   12fdc:	mov	r0, #0
   12fe0:	pop	{r4, r5}
   12fe4:	bx	lr
   12fe8:	ldrb	r3, [r0, #12]
   12fec:	cmp	r3, #0
   12ff0:	addne	r2, r0, #13
   12ff4:	beq	13014 <__assert_fail@plt+0x2240>
   12ff8:	sub	ip, r3, #65	; 0x41
   12ffc:	add	r3, r3, #32
   13000:	cmp	ip, #25
   13004:	strbls	r3, [r2, #-1]
   13008:	ldrb	r3, [r2], #1
   1300c:	cmp	r3, #0
   13010:	bne	12ff8 <__assert_fail@plt+0x2224>
   13014:	ldrb	r3, [r0, #8]
   13018:	orr	r3, r3, #2
   1301c:	strb	r3, [r0, #8]
   13020:	b	12f78 <__assert_fail@plt+0x21a4>
   13024:	ldrb	r3, [r4, #12]
   13028:	add	r5, r4, #12
   1302c:	cmp	r3, #0
   13030:	addne	r2, r4, #13
   13034:	beq	13054 <__assert_fail@plt+0x2280>
   13038:	sub	ip, r3, #65	; 0x41
   1303c:	add	r3, r3, #32
   13040:	cmp	ip, #25
   13044:	strbls	r3, [r2, #-1]
   13048:	ldrb	r3, [r2], #1
   1304c:	cmp	r3, #0
   13050:	bne	13038 <__assert_fail@plt+0x2264>
   13054:	ldrb	r2, [r4, #8]
   13058:	mov	r3, r5
   1305c:	orr	r2, r2, #2
   13060:	strb	r2, [r4, #8]
   13064:	b	12fcc <__assert_fail@plt+0x21f8>
   13068:	push	{r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1306c:	mov	r8, r0
   13070:	ldr	sl, [r0, #12]
   13074:	mov	r9, r1
   13078:	mov	fp, r2
   1307c:	cmp	sl, #0
   13080:	bne	13210 <__assert_fail@plt+0x243c>
   13084:	ldr	r3, [r0, #24]
   13088:	cmp	r3, #0
   1308c:	beq	13664 <__assert_fail@plt+0x2890>
   13090:	cmp	r2, #0
   13094:	beq	1327c <__assert_fail@plt+0x24a8>
   13098:	ldr	r3, [r3, #8]
   1309c:	cmp	r3, #0
   130a0:	beq	1345c <__assert_fail@plt+0x2688>
   130a4:	add	r7, fp, r9
   130a8:	mov	r4, r9
   130ac:	mov	r5, #0
   130b0:	ldrb	r1, [r4]
   130b4:	movw	r0, #16984	; 0x4258
   130b8:	movt	r0, #1
   130bc:	mov	r6, r4
   130c0:	bl	10d20 <strchr@plt>
   130c4:	add	r4, r4, #1
   130c8:	cmp	r0, #0
   130cc:	moveq	r5, r0
   130d0:	beq	130dc <__assert_fail@plt+0x2308>
   130d4:	cmp	r5, #0
   130d8:	moveq	r5, r6
   130dc:	cmp	r4, r7
   130e0:	bne	130b0 <__assert_fail@plt+0x22dc>
   130e4:	cmp	r5, #0
   130e8:	rsbne	r5, r9, r5
   130ec:	moveq	r5, fp
   130f0:	add	r0, r5, #12
   130f4:	bl	10ccc <malloc@plt>
   130f8:	subs	r4, r0, #0
   130fc:	beq	1348c <__assert_fail@plt+0x26b8>
   13100:	mov	r6, #0
   13104:	str	r6, [r4]
   13108:	ldrb	r3, [r9]
   1310c:	mov	r2, r5
   13110:	add	r0, r4, #8
   13114:	mov	r1, r9
   13118:	cmp	r3, #32
   1311c:	cmpne	r3, #9
   13120:	movne	r3, #0
   13124:	moveq	r3, #1
   13128:	str	r3, [r4, #4]
   1312c:	bl	10c0c <memcpy@plt>
   13130:	ldr	r2, [r4, #4]
   13134:	add	r3, r4, r5
   13138:	cmp	r2, r6
   1313c:	strb	r6, [r3, #8]
   13140:	bne	131d0 <__assert_fail@plt+0x23fc>
   13144:	mov	r0, r9
   13148:	mov	r1, #58	; 0x3a
   1314c:	bl	10d20 <strchr@plt>
   13150:	cmp	r0, #0
   13154:	beq	131d0 <__assert_fail@plt+0x23fc>
   13158:	ldrb	r3, [r4, #8]
   1315c:	cmp	r3, #58	; 0x3a
   13160:	cmpne	r3, #0
   13164:	beq	131d0 <__assert_fail@plt+0x23fc>
   13168:	add	r1, r4, #9
   1316c:	mov	r0, #1
   13170:	b	1319c <__assert_fail@plt+0x23c8>
   13174:	sub	r2, r3, #97	; 0x61
   13178:	cmp	r2, #25
   1317c:	movhi	r0, #0
   13180:	movls	r0, #0
   13184:	subls	r3, r3, #32
   13188:	strbls	r3, [r1, #-1]
   1318c:	ldrb	r3, [r1], #1
   13190:	cmp	r3, #58	; 0x3a
   13194:	cmpne	r3, #0
   13198:	beq	131d0 <__assert_fail@plt+0x23fc>
   1319c:	cmp	r3, #45	; 0x2d
   131a0:	moveq	r0, #1
   131a4:	beq	1318c <__assert_fail@plt+0x23b8>
   131a8:	cmp	r0, #0
   131ac:	bne	13174 <__assert_fail@plt+0x23a0>
   131b0:	sub	r2, r3, #65	; 0x41
   131b4:	cmp	r2, #25
   131b8:	addls	r3, r3, #32
   131bc:	strbls	r3, [r1, #-1]
   131c0:	ldrb	r3, [r1], #1
   131c4:	cmp	r3, #58	; 0x3a
   131c8:	cmpne	r3, #0
   131cc:	bne	1319c <__assert_fail@plt+0x23c8>
   131d0:	ldr	r3, [r8, #24]
   131d4:	cmp	r5, #8
   131d8:	ldr	r3, [r3, #12]
   131dc:	str	r4, [r3]
   131e0:	ldr	r3, [r8, #24]
   131e4:	str	r4, [r3, #12]
   131e8:	bls	13208 <__assert_fail@plt+0x2434>
   131ec:	mov	r0, r9
   131f0:	movw	r1, #16992	; 0x4260
   131f4:	mov	r2, #9
   131f8:	movt	r1, #1
   131fc:	bl	10c3c <memcmp@plt>
   13200:	subs	r3, r0, #0
   13204:	beq	13300 <__assert_fail@plt+0x252c>
   13208:	mov	r0, sl
   1320c:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13210:	cmp	r2, #2
   13214:	bls	13230 <__assert_fail@plt+0x245c>
   13218:	ldrb	r3, [r1]
   1321c:	cmp	r3, #45	; 0x2d
   13220:	bne	13230 <__assert_fail@plt+0x245c>
   13224:	ldrb	r3, [r1, #1]
   13228:	cmp	r3, #45	; 0x2d
   1322c:	beq	13318 <__assert_fail@plt+0x2544>
   13230:	ldr	r0, [r8, #16]
   13234:	cmp	r0, #0
   13238:	moveq	sl, r0
   1323c:	beq	13208 <__assert_fail@plt+0x2434>
   13240:	ldr	sl, [r8]
   13244:	cmp	sl, #0
   13248:	beq	13208 <__assert_fail@plt+0x2434>
   1324c:	ldr	r3, [r8, #8]
   13250:	cmp	r3, #0
   13254:	movne	sl, #0
   13258:	bne	13208 <__assert_fail@plt+0x2434>
   1325c:	ldr	r0, [r8, #4]
   13260:	mov	r1, #12
   13264:	mov	r2, r8
   13268:	blx	sl
   1326c:	subs	sl, r0, #0
   13270:	beq	13208 <__assert_fail@plt+0x2434>
   13274:	str	sl, [r8, #8]
   13278:	b	13208 <__assert_fail@plt+0x2434>
   1327c:	ldr	r3, [r0]
   13280:	mov	r2, #1
   13284:	str	r2, [r0, #12]
   13288:	cmp	r3, #0
   1328c:	beq	1329c <__assert_fail@plt+0x24c8>
   13290:	ldr	r2, [r0, #8]
   13294:	cmp	r2, #0
   13298:	beq	13468 <__assert_fail@plt+0x2694>
   1329c:	movw	r1, #14948	; 0x3a64
   132a0:	mov	r0, r8
   132a4:	movt	r1, #1
   132a8:	mvn	r2, #0
   132ac:	bl	12840 <__assert_fail@plt+0x1a6c>
   132b0:	subs	r4, r0, #0
   132b4:	beq	13208 <__assert_fail@plt+0x2434>
   132b8:	mov	r1, #0
   132bc:	bl	12f5c <__assert_fail@plt+0x2188>
   132c0:	cmp	r0, #0
   132c4:	beq	132dc <__assert_fail@plt+0x2508>
   132c8:	movw	r1, #15124	; 0x3b14
   132cc:	movt	r1, #1
   132d0:	bl	10bd0 <strcmp@plt>
   132d4:	subs	r2, r0, #0
   132d8:	beq	13494 <__assert_fail@plt+0x26c0>
   132dc:	mov	sl, #0
   132e0:	b	132e8 <__assert_fail@plt+0x2514>
   132e4:	mov	r4, r5
   132e8:	ldr	r5, [r4]
   132ec:	mov	r0, r4
   132f0:	bl	10be8 <free@plt>
   132f4:	cmp	r5, #0
   132f8:	bne	132e4 <__assert_fail@plt+0x2510>
   132fc:	b	13208 <__assert_fail@plt+0x2434>
   13300:	mov	sl, r3
   13304:	mov	r0, r8
   13308:	mov	r1, #6
   1330c:	bl	122c0 <__assert_fail@plt+0x14ec>
   13310:	mov	r0, sl
   13314:	pop	{r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13318:	ldr	r5, [r0, #28]
   1331c:	cmp	r5, #0
   13320:	beq	13230 <__assert_fail@plt+0x245c>
   13324:	mov	r0, r5
   13328:	bl	10d14 <strlen@plt>
   1332c:	add	r3, r0, #2
   13330:	mov	r4, r0
   13334:	cmp	fp, r3
   13338:	beq	13574 <__assert_fail@plt+0x27a0>
   1333c:	add	r3, r4, #4
   13340:	cmp	fp, r3
   13344:	bne	13230 <__assert_fail@plt+0x245c>
   13348:	add	fp, r9, fp
   1334c:	ldrb	r3, [fp, #-2]
   13350:	cmp	r3, #45	; 0x2d
   13354:	bne	13230 <__assert_fail@plt+0x245c>
   13358:	ldrb	r3, [fp, #-1]
   1335c:	cmp	r3, #45	; 0x2d
   13360:	bne	13230 <__assert_fail@plt+0x245c>
   13364:	add	r0, r9, #2
   13368:	mov	r1, r5
   1336c:	mov	r2, r4
   13370:	bl	10c3c <memcmp@plt>
   13374:	cmp	r0, #0
   13378:	bne	13230 <__assert_fail@plt+0x245c>
   1337c:	ldr	r3, [r8]
   13380:	cmp	r3, #0
   13384:	moveq	sl, r3
   13388:	beq	133b4 <__assert_fail@plt+0x25e0>
   1338c:	ldr	r2, [r8, #8]
   13390:	cmp	r2, #0
   13394:	movne	sl, r0
   13398:	bne	133b4 <__assert_fail@plt+0x25e0>
   1339c:	ldr	r0, [r8, #4]
   133a0:	mov	r1, #10
   133a4:	mov	r2, r8
   133a8:	blx	r3
   133ac:	subs	sl, r0, #0
   133b0:	strne	sl, [r8, #8]
   133b4:	ldr	r4, [r8, #24]
   133b8:	mov	r3, #0
   133bc:	str	r3, [r8, #28]
   133c0:	cmp	r4, r3
   133c4:	beq	1369c <__assert_fail@plt+0x28c8>
   133c8:	ldr	r5, [r8, #20]
   133cc:	mov	r1, r4
   133d0:	mov	r0, r5
   133d4:	bl	12308 <__assert_fail@plt+0x1534>
   133d8:	subs	r1, r0, #0
   133dc:	beq	13420 <__assert_fail@plt+0x264c>
   133e0:	ldr	r3, [r1, #4]
   133e4:	cmp	r3, #0
   133e8:	bne	133fc <__assert_fail@plt+0x2628>
   133ec:	b	13680 <__assert_fail@plt+0x28ac>
   133f0:	ldr	r3, [r3]
   133f4:	cmp	r3, #0
   133f8:	beq	13680 <__assert_fail@plt+0x28ac>
   133fc:	cmp	r4, r3
   13400:	bne	133f0 <__assert_fail@plt+0x261c>
   13404:	str	r1, [r8, #24]
   13408:	mov	r0, r5
   1340c:	bl	12308 <__assert_fail@plt+0x1534>
   13410:	cmp	r0, #0
   13414:	moveq	r3, r0
   13418:	ldrne	r3, [r0, #16]
   1341c:	str	r3, [r8, #28]
   13420:	cmp	sl, #0
   13424:	bne	13208 <__assert_fail@plt+0x2434>
   13428:	ldr	r3, [r8]
   1342c:	cmp	r3, #0
   13430:	beq	13230 <__assert_fail@plt+0x245c>
   13434:	ldr	r2, [r8, #8]
   13438:	cmp	r2, #0
   1343c:	bne	13230 <__assert_fail@plt+0x245c>
   13440:	ldr	r0, [r8, #4]
   13444:	mov	r1, #8
   13448:	mov	r2, r8
   1344c:	blx	r3
   13450:	subs	sl, r0, #0
   13454:	beq	13230 <__assert_fail@plt+0x245c>
   13458:	b	13274 <__assert_fail@plt+0x24a0>
   1345c:	mov	r1, #11
   13460:	bl	122c0 <__assert_fail@plt+0x14ec>
   13464:	b	130a4 <__assert_fail@plt+0x22d0>
   13468:	ldr	r0, [r0, #4]
   1346c:	mov	r1, #4
   13470:	mov	r2, r8
   13474:	blx	r3
   13478:	cmp	r0, #0
   1347c:	strne	r0, [r8, #8]
   13480:	movne	sl, r0
   13484:	bne	13208 <__assert_fail@plt+0x2434>
   13488:	b	1329c <__assert_fail@plt+0x24c8>
   1348c:	mvn	sl, #0
   13490:	b	13208 <__assert_fail@plt+0x2434>
   13494:	movw	r1, #16944	; 0x4230
   13498:	mov	r0, r4
   1349c:	movt	r1, #1
   134a0:	bl	12dd8 <__assert_fail@plt+0x2004>
   134a4:	subs	r6, r0, #0
   134a8:	beq	132dc <__assert_fail@plt+0x2508>
   134ac:	ldr	r5, [r8, #24]
   134b0:	ldr	sl, [r5, #16]
   134b4:	cmp	sl, #0
   134b8:	bne	136f0 <__assert_fail@plt+0x291c>
   134bc:	bl	10d14 <strlen@plt>
   134c0:	add	r0, r0, #1
   134c4:	bl	10ccc <malloc@plt>
   134c8:	cmp	r0, #0
   134cc:	str	r0, [r5, #16]
   134d0:	beq	132dc <__assert_fail@plt+0x2508>
   134d4:	mov	r1, r6
   134d8:	bl	10ca8 <strcpy@plt>
   134dc:	ldr	r6, [r8, #24]
   134e0:	mov	r0, #1
   134e4:	mov	r1, #20
   134e8:	ldr	r3, [r6, #16]
   134ec:	str	r3, [r8, #28]
   134f0:	bl	10bc4 <calloc@plt>
   134f4:	subs	r5, r0, #0
   134f8:	beq	1363c <__assert_fail@plt+0x2868>
   134fc:	ldr	ip, [r8]
   13500:	add	r3, r5, #8
   13504:	str	r3, [r5, #12]
   13508:	cmp	ip, #0
   1350c:	beq	13630 <__assert_fail@plt+0x285c>
   13510:	ldr	r3, [r8, #8]
   13514:	cmp	r3, #0
   13518:	movne	r3, r6
   1351c:	bne	1353c <__assert_fail@plt+0x2768>
   13520:	ldr	r0, [r8, #4]
   13524:	mov	r1, #7
   13528:	mov	r2, r8
   1352c:	blx	ip
   13530:	ldr	r3, [r8, #24]
   13534:	subs	sl, r0, #0
   13538:	strne	sl, [r8, #8]
   1353c:	ldr	r2, [r3, #4]
   13540:	cmp	r2, #0
   13544:	streq	r5, [r3, #4]
   13548:	streq	r5, [r8, #24]
   1354c:	moveq	r3, #1
   13550:	streq	r3, [r8, #16]
   13554:	beq	132e8 <__assert_fail@plt+0x2514>
   13558:	movw	r0, #16956	; 0x423c
   1355c:	movw	r1, #16880	; 0x41f0
   13560:	movt	r0, #1
   13564:	movt	r1, #1
   13568:	movw	r2, #374	; 0x176
   1356c:	ldr	r3, [pc, #420]	; 13718 <__assert_fail@plt+0x2944>
   13570:	bl	10dd4 <__assert_fail@plt>
   13574:	add	r0, r9, #2
   13578:	mov	r1, r5
   1357c:	mov	r2, r4
   13580:	bl	10c3c <memcmp@plt>
   13584:	cmp	r0, #0
   13588:	bne	1333c <__assert_fail@plt+0x2568>
   1358c:	ldr	r3, [r8]
   13590:	cmp	r3, #0
   13594:	beq	135a4 <__assert_fail@plt+0x27d0>
   13598:	ldr	r2, [r8, #8]
   1359c:	cmp	r2, #0
   135a0:	beq	13604 <__assert_fail@plt+0x2830>
   135a4:	ldr	r3, [r8, #16]
   135a8:	mov	sl, #0
   135ac:	str	sl, [r8, #12]
   135b0:	cmp	r3, sl
   135b4:	strne	sl, [r8, #16]
   135b8:	bne	13208 <__assert_fail@plt+0x2434>
   135bc:	ldr	r4, [r8, #24]
   135c0:	cmp	r4, #0
   135c4:	beq	136d4 <__assert_fail@plt+0x2900>
   135c8:	ldr	sl, [r4]
   135cc:	cmp	sl, #0
   135d0:	bne	136b8 <__assert_fail@plt+0x28e4>
   135d4:	mov	r0, #1
   135d8:	mov	r1, #20
   135dc:	bl	10bc4 <calloc@plt>
   135e0:	cmp	r0, #0
   135e4:	addne	r3, r0, #8
   135e8:	strne	r3, [r0, #12]
   135ec:	mvneq	sl, #0
   135f0:	strne	r0, [r4]
   135f4:	mov	r3, #0
   135f8:	strne	r0, [r8, #24]
   135fc:	str	r3, [r8, #16]
   13600:	b	13208 <__assert_fail@plt+0x2434>
   13604:	ldr	r0, [r8, #4]
   13608:	mov	r1, #9
   1360c:	mov	r2, r8
   13610:	blx	r3
   13614:	subs	sl, r0, #0
   13618:	beq	135a4 <__assert_fail@plt+0x27d0>
   1361c:	mov	r3, #0
   13620:	str	sl, [r8, #8]
   13624:	str	r3, [r8, #12]
   13628:	str	r3, [r8, #16]
   1362c:	b	13208 <__assert_fail@plt+0x2434>
   13630:	mov	r3, r6
   13634:	mov	sl, ip
   13638:	b	1353c <__assert_fail@plt+0x2768>
   1363c:	bl	10d2c <__errno_location@plt>
   13640:	ldr	r7, [r0]
   13644:	mov	r5, r0
   13648:	ldr	r6, [r4]
   1364c:	mov	r0, r4
   13650:	bl	10be8 <free@plt>
   13654:	cmp	r6, #0
   13658:	beq	1370c <__assert_fail@plt+0x2938>
   1365c:	mov	r4, r6
   13660:	b	13648 <__assert_fail@plt+0x2874>
   13664:	movw	r0, #16860	; 0x41dc
   13668:	movw	r1, #16880	; 0x41f0
   1366c:	movt	r0, #1
   13670:	movt	r1, #1
   13674:	movw	r2, #413	; 0x19d
   13678:	ldr	r3, [pc, #156]	; 1371c <__assert_fail@plt+0x2948>
   1367c:	bl	10dd4 <__assert_fail@plt>
   13680:	movw	r0, #17004	; 0x426c
   13684:	movw	r1, #16880	; 0x41f0
   13688:	movt	r0, #1
   1368c:	movt	r1, #1
   13690:	movw	r2, #319	; 0x13f
   13694:	ldr	r3, [pc, #132]	; 13720 <__assert_fail@plt+0x294c>
   13698:	bl	10dd4 <__assert_fail@plt>
   1369c:	movw	r0, #16860	; 0x41dc
   136a0:	movw	r1, #16880	; 0x41f0
   136a4:	movt	r0, #1
   136a8:	movt	r1, #1
   136ac:	mov	r2, #308	; 0x134
   136b0:	ldr	r3, [pc, #104]	; 13720 <__assert_fail@plt+0x294c>
   136b4:	bl	10dd4 <__assert_fail@plt>
   136b8:	movw	r0, #16896	; 0x4200
   136bc:	movw	r1, #16880	; 0x41f0
   136c0:	movt	r0, #1
   136c4:	movt	r1, #1
   136c8:	mov	r2, #396	; 0x18c
   136cc:	ldr	r3, [pc, #80]	; 13724 <__assert_fail@plt+0x2950>
   136d0:	bl	10dd4 <__assert_fail@plt>
   136d4:	movw	r0, #16860	; 0x41dc
   136d8:	movw	r1, #16880	; 0x41f0
   136dc:	movt	r0, #1
   136e0:	movt	r1, #1
   136e4:	movw	r2, #395	; 0x18b
   136e8:	ldr	r3, [pc, #52]	; 13724 <__assert_fail@plt+0x2950>
   136ec:	bl	10dd4 <__assert_fail@plt>
   136f0:	movw	r0, #16924	; 0x421c
   136f4:	movw	r1, #16880	; 0x41f0
   136f8:	movt	r0, #1
   136fc:	movt	r1, #1
   13700:	movw	r2, #357	; 0x165
   13704:	ldr	r3, [pc, #12]	; 13718 <__assert_fail@plt+0x2944>
   13708:	bl	10dd4 <__assert_fail@plt>
   1370c:	str	r7, [r5]
   13710:	mvn	sl, #0
   13714:	b	13208 <__assert_fail@plt+0x2434>
   13718:	andeq	r4, r1, r8, asr #3
   1371c:			; <UNDEFINED> instruction: 0x000141b8
   13720:	muleq	r1, ip, r1
   13724:	andeq	r4, r1, r4, lsl #3
   13728:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1372c:	mov	r7, r0
   13730:	ldr	r6, [pc, #76]	; 13784 <__assert_fail@plt+0x29b0>
   13734:	mov	r8, r1
   13738:	ldr	r5, [pc, #72]	; 13788 <__assert_fail@plt+0x29b4>
   1373c:	mov	r9, r2
   13740:	add	r6, pc, r6
   13744:	bl	10b98 <fdopen@plt-0x20>
   13748:	add	r5, pc, r5
   1374c:	rsb	r6, r5, r6
   13750:	asrs	r6, r6, #2
   13754:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   13758:	sub	r5, r5, #4
   1375c:	mov	r4, #0
   13760:	add	r4, r4, #1
   13764:	ldr	r3, [r5, #4]!
   13768:	mov	r0, r7
   1376c:	mov	r1, r8
   13770:	mov	r2, r9
   13774:	blx	r3
   13778:	cmp	r4, r6
   1377c:	bne	13760 <__assert_fail@plt+0x298c>
   13780:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13784:			; <UNDEFINED> instruction: 0x000117b8
   13788:	andeq	r1, r1, ip, lsr #15
   1378c:	bx	lr

Disassembly of section .fini:

00013790 <.fini>:
   13790:	push	{r3, lr}
   13794:	pop	{r3, pc}
