
centos-preinstalled/eu-findtextrel:     file format elf32-littlearm


Disassembly of section .init:

00010da4 <_init@@Base>:
   10da4:	push	{r3, lr}
   10da8:	bl	11148 <__assert_fail@plt+0x15c>
   10dac:	pop	{r3, pc}

Disassembly of section .plt:

00010db0 <gelf_getehdr@plt-0x14>:
   10db0:	push	{lr}		; (str lr, [sp, #-4]!)
   10db4:	ldr	lr, [pc, #4]	; 10dc0 <_init@@Base+0x1c>
   10db8:	add	lr, pc, lr
   10dbc:	ldr	pc, [lr, #8]!
   10dc0:	andeq	r3, r1, r0, asr #4

00010dc4 <gelf_getehdr@plt>:
   10dc4:	add	ip, pc, #0, 12
   10dc8:	add	ip, ip, #77824	; 0x13000
   10dcc:	ldr	pc, [ip, #576]!	; 0x240

00010dd0 <raise@plt>:
   10dd0:	add	ip, pc, #0, 12
   10dd4:	add	ip, ip, #77824	; 0x13000
   10dd8:	ldr	pc, [ip, #568]!	; 0x238

00010ddc <gelf_getshdr@plt>:
   10ddc:	add	ip, pc, #0, 12
   10de0:	add	ip, ip, #77824	; 0x13000
   10de4:	ldr	pc, [ip, #560]!	; 0x230

00010de8 <elf_version@plt>:
   10de8:	add	ip, pc, #0, 12
   10dec:	add	ip, ip, #77824	; 0x13000
   10df0:	ldr	pc, [ip, #552]!	; 0x228

00010df4 <free@plt>:
   10df4:	add	ip, pc, #0, 12
   10df8:	add	ip, ip, #77824	; 0x13000
   10dfc:	ldr	pc, [ip, #544]!	; 0x220

00010e00 <tdestroy@plt>:
   10e00:	add	ip, pc, #0, 12
   10e04:	add	ip, ip, #77824	; 0x13000
   10e08:	ldr	pc, [ip, #536]!	; 0x218

00010e0c <dwarf_getsrc_die@plt>:
   10e0c:	add	ip, pc, #0, 12
   10e10:	add	ip, ip, #77824	; 0x13000
   10e14:	ldr	pc, [ip, #528]!	; 0x210

00010e18 <dwarf_addrdie@plt>:
   10e18:	add	ip, pc, #0, 12
   10e1c:	add	ip, ip, #77824	; 0x13000
   10e20:	ldr	pc, [ip, #520]!	; 0x208

00010e24 <dcgettext@plt>:
   10e24:	add	ip, pc, #0, 12
   10e28:	add	ip, ip, #77824	; 0x13000
   10e2c:	ldr	pc, [ip, #512]!	; 0x200

00010e30 <__stack_chk_fail@plt>:
   10e30:	add	ip, pc, #0, 12
   10e34:	add	ip, ip, #77824	; 0x13000
   10e38:	ldr	pc, [ip, #504]!	; 0x1f8

00010e3c <gelf_getphdr@plt>:
   10e3c:	add	ip, pc, #0, 12
   10e40:	add	ip, ip, #77824	; 0x13000
   10e44:	ldr	pc, [ip, #496]!	; 0x1f0

00010e48 <realloc@plt>:
   10e48:	add	ip, pc, #0, 12
   10e4c:	add	ip, ip, #77824	; 0x13000
   10e50:	ldr	pc, [ip, #488]!	; 0x1e8

00010e54 <gelf_getsym@plt>:
   10e54:	add	ip, pc, #0, 12
   10e58:	add	ip, ip, #77824	; 0x13000
   10e5c:	ldr	pc, [ip, #480]!	; 0x1e0

00010e60 <elf_strptr@plt>:
   10e60:	add	ip, pc, #0, 12
   10e64:	add	ip, ip, #77824	; 0x13000
   10e68:	ldr	pc, [ip, #472]!	; 0x1d8

00010e6c <textdomain@plt>:
   10e6c:	add	ip, pc, #0, 12
   10e70:	add	ip, ip, #77824	; 0x13000
   10e74:	ldr	pc, [ip, #464]!	; 0x1d0

00010e78 <elf_getdata@plt>:
   10e78:	add	ip, pc, #0, 12
   10e7c:	add	ip, ip, #77824	; 0x13000
   10e80:	ldr	pc, [ip, #456]!	; 0x1c8

00010e84 <error@plt>:
   10e84:	add	ip, pc, #0, 12
   10e88:	add	ip, ip, #77824	; 0x13000
   10e8c:	ldr	pc, [ip, #448]!	; 0x1c0

00010e90 <open64@plt>:
   10e90:	add	ip, pc, #0, 12
   10e94:	add	ip, ip, #77824	; 0x13000
   10e98:	ldr	pc, [ip, #440]!	; 0x1b8

00010e9c <malloc@plt>:
   10e9c:	add	ip, pc, #0, 12
   10ea0:	add	ip, ip, #77824	; 0x13000
   10ea4:	ldr	pc, [ip, #432]!	; 0x1b0

00010ea8 <__libc_start_main@plt>:
   10ea8:	add	ip, pc, #0, 12
   10eac:	add	ip, ip, #77824	; 0x13000
   10eb0:	ldr	pc, [ip, #424]!	; 0x1a8

00010eb4 <__gmon_start__@plt>:
   10eb4:	add	ip, pc, #0, 12
   10eb8:	add	ip, ip, #77824	; 0x13000
   10ebc:	ldr	pc, [ip, #416]!	; 0x1a0

00010ec0 <mempcpy@plt>:
   10ec0:	add	ip, pc, #0, 12
   10ec4:	add	ip, ip, #77824	; 0x13000
   10ec8:	ldr	pc, [ip, #408]!	; 0x198

00010ecc <elf_end@plt>:
   10ecc:	add	ip, pc, #0, 12
   10ed0:	add	ip, ip, #77824	; 0x13000
   10ed4:	ldr	pc, [ip, #400]!	; 0x190

00010ed8 <strlen@plt>:
   10ed8:	add	ip, pc, #0, 12
   10edc:	add	ip, ip, #77824	; 0x13000
   10ee0:	ldr	pc, [ip, #392]!	; 0x188

00010ee4 <elf_errmsg@plt>:
   10ee4:	add	ip, pc, #0, 12
   10ee8:	add	ip, ip, #77824	; 0x13000
   10eec:	ldr	pc, [ip, #384]!	; 0x180

00010ef0 <gelf_getrela@plt>:
   10ef0:	add	ip, pc, #0, 12
   10ef4:	add	ip, ip, #77824	; 0x13000
   10ef8:	ldr	pc, [ip, #376]!	; 0x178

00010efc <__errno_location@plt>:
   10efc:	add	ip, pc, #0, 12
   10f00:	add	ip, ip, #77824	; 0x13000
   10f04:	ldr	pc, [ip, #368]!	; 0x170

00010f08 <elf_getphdrnum@plt>:
   10f08:	add	ip, pc, #0, 12
   10f0c:	add	ip, ip, #77824	; 0x13000
   10f10:	ldr	pc, [ip, #360]!	; 0x168

00010f14 <tsearch@plt>:
   10f14:	add	ip, pc, #0, 12
   10f18:	add	ip, ip, #77824	; 0x13000
   10f1c:	ldr	pc, [ip, #352]!	; 0x160

00010f20 <argp_parse@plt>:
   10f20:	add	ip, pc, #0, 12
   10f24:	add	ip, ip, #77824	; 0x13000
   10f28:	ldr	pc, [ip, #344]!	; 0x158

00010f2c <__printf_chk@plt>:
   10f2c:	add	ip, pc, #0, 12
   10f30:	add	ip, ip, #77824	; 0x13000
   10f34:	ldr	pc, [ip, #336]!	; 0x150

00010f38 <__fprintf_chk@plt>:
   10f38:	add	ip, pc, #0, 12
   10f3c:	add	ip, ip, #77824	; 0x13000
   10f40:	ldr	pc, [ip, #328]!	; 0x148

00010f44 <elf_begin@plt>:
   10f44:	add	ip, pc, #0, 12
   10f48:	add	ip, ip, #77824	; 0x13000
   10f4c:	ldr	pc, [ip, #320]!	; 0x140

00010f50 <dwarf_begin_elf@plt>:
   10f50:	add	ip, pc, #0, 12
   10f54:	add	ip, ip, #77824	; 0x13000
   10f58:	ldr	pc, [ip, #312]!	; 0x138

00010f5c <tfind@plt>:
   10f5c:	add	ip, pc, #0, 12
   10f60:	add	ip, ip, #77824	; 0x13000
   10f64:	ldr	pc, [ip, #304]!	; 0x130

00010f68 <setlocale@plt>:
   10f68:	add	ip, pc, #0, 12
   10f6c:	add	ip, ip, #77824	; 0x13000
   10f70:	ldr	pc, [ip, #296]!	; 0x128

00010f74 <dwarf_end@plt>:
   10f74:	add	ip, pc, #0, 12
   10f78:	add	ip, ip, #77824	; 0x13000
   10f7c:	ldr	pc, [ip, #288]!	; 0x120

00010f80 <elf_nextscn@plt>:
   10f80:	add	ip, pc, #0, 12
   10f84:	add	ip, ip, #77824	; 0x13000
   10f88:	ldr	pc, [ip, #280]!	; 0x118

00010f8c <gelf_getrel@plt>:
   10f8c:	add	ip, pc, #0, 12
   10f90:	add	ip, ip, #77824	; 0x13000
   10f94:	ldr	pc, [ip, #272]!	; 0x110

00010f98 <gelf_getdyn@plt>:
   10f98:	add	ip, pc, #0, 12
   10f9c:	add	ip, ip, #77824	; 0x13000
   10fa0:	ldr	pc, [ip, #264]!	; 0x108

00010fa4 <dwarf_linesrc@plt>:
   10fa4:	add	ip, pc, #0, 12
   10fa8:	add	ip, ip, #77824	; 0x13000
   10fac:	ldr	pc, [ip, #256]!	; 0x100

00010fb0 <elf_ndxscn@plt>:
   10fb0:	add	ip, pc, #0, 12
   10fb4:	add	ip, ip, #77824	; 0x13000
   10fb8:	ldr	pc, [ip, #248]!	; 0xf8

00010fbc <elf_getscn@plt>:
   10fbc:	add	ip, pc, #0, 12
   10fc0:	add	ip, ip, #77824	; 0x13000
   10fc4:	ldr	pc, [ip, #240]!	; 0xf0

00010fc8 <bindtextdomain@plt>:
   10fc8:	add	ip, pc, #0, 12
   10fcc:	add	ip, ip, #77824	; 0x13000
   10fd0:	ldr	pc, [ip, #232]!	; 0xe8

00010fd4 <abort@plt>:
   10fd4:	add	ip, pc, #0, 12
   10fd8:	add	ip, ip, #77824	; 0x13000
   10fdc:	ldr	pc, [ip, #224]!	; 0xe0

00010fe0 <close@plt>:
   10fe0:	add	ip, pc, #0, 12
   10fe4:	add	ip, ip, #77824	; 0x13000
   10fe8:	ldr	pc, [ip, #216]!	; 0xd8

00010fec <__assert_fail@plt>:
   10fec:	add	ip, pc, #0, 12
   10ff0:	add	ip, ip, #77824	; 0x13000
   10ff4:	ldr	pc, [ip, #208]!	; 0xd0

Disassembly of section .text:

00010ff8 <.text>:
   10ff8:	push	{r4, r5, r6, r7, r8, lr}
   10ffc:	movw	r8, #16624	; 0x40f0
   11000:	movt	r8, #2
   11004:	sub	sp, sp, #16
   11008:	mov	r5, r0
   1100c:	mov	r6, r1
   11010:	ldr	r3, [r8]
   11014:	movw	r1, #11896	; 0x2e78
   11018:	mov	r0, #6
   1101c:	movt	r1, #1
   11020:	str	r3, [sp, #12]
   11024:	bl	10f68 <setlocale@plt>
   11028:	movw	r0, #12776	; 0x31e8
   1102c:	movw	r1, #12788	; 0x31f4
   11030:	movt	r0, #1
   11034:	movt	r1, #1
   11038:	bl	10fc8 <bindtextdomain@plt>
   1103c:	movw	r0, #12776	; 0x31e8
   11040:	movt	r0, #1
   11044:	bl	10e6c <textdomain@plt>
   11048:	mov	r3, #0
   1104c:	mov	r2, r6
   11050:	str	r3, [sp, #4]
   11054:	add	ip, sp, #8
   11058:	mov	r1, r5
   1105c:	str	ip, [sp]
   11060:	ldr	r0, [pc, #160]	; 11108 <__assert_fail@plt+0x11c>
   11064:	bl	10f20 <argp_parse@plt>
   11068:	mov	r0, #1
   1106c:	bl	10de8 <elf_version@plt>
   11070:	movw	r3, #16632	; 0x40f8
   11074:	movt	r3, #2
   11078:	ldr	r2, [r3]
   1107c:	cmp	r2, #0
   11080:	movweq	r2, #12808	; 0x3208
   11084:	movteq	r2, #1
   11088:	streq	r2, [r3]
   1108c:	ldr	r3, [sp, #8]
   11090:	cmp	r3, r5
   11094:	beq	110ec <__assert_fail@plt+0x100>
   11098:	add	r7, r3, #1
   1109c:	mov	r4, #0
   110a0:	cmp	r7, r5
   110a4:	movge	r7, #0
   110a8:	movlt	r7, #1
   110ac:	ldr	r0, [r6, r3, lsl #2]
   110b0:	mov	r1, r7
   110b4:	bl	1169c <__assert_fail@plt+0x6b0>
   110b8:	ldr	r3, [sp, #8]
   110bc:	add	r3, r3, #1
   110c0:	str	r3, [sp, #8]
   110c4:	cmp	r5, r3
   110c8:	orr	r4, r4, r0
   110cc:	bgt	110ac <__assert_fail@plt+0xc0>
   110d0:	ldr	r2, [sp, #12]
   110d4:	mov	r0, r4
   110d8:	ldr	r3, [r8]
   110dc:	cmp	r2, r3
   110e0:	bne	11104 <__assert_fail@plt+0x118>
   110e4:	add	sp, sp, #16
   110e8:	pop	{r4, r5, r6, r7, r8, pc}
   110ec:	movw	r0, #12824	; 0x3218
   110f0:	mov	r1, #0
   110f4:	movt	r0, #1
   110f8:	bl	1169c <__assert_fail@plt+0x6b0>
   110fc:	mov	r4, r0
   11100:	b	110d0 <__assert_fail@plt+0xe4>
   11104:	bl	10e30 <__stack_chk_fail@plt>
   11108:	ldrdeq	r4, [r2], -r4	; <UNPREDICTABLE>
   1110c:	mov	fp, #0
   11110:	mov	lr, #0
   11114:	pop	{r1}		; (ldr r1, [sp], #4)
   11118:	mov	r2, sp
   1111c:	push	{r2}		; (str r2, [sp, #-4]!)
   11120:	push	{r0}		; (str r0, [sp, #-4]!)
   11124:	ldr	ip, [pc, #16]	; 1113c <__assert_fail@plt+0x150>
   11128:	push	{ip}		; (str ip, [sp, #-4]!)
   1112c:	ldr	r0, [pc, #12]	; 11140 <__assert_fail@plt+0x154>
   11130:	ldr	r3, [pc, #12]	; 11144 <__assert_fail@plt+0x158>
   11134:	bl	10ea8 <__libc_start_main@plt>
   11138:	bl	10fd4 <abort@plt>
   1113c:	andeq	r2, r1, r8, lsl #27
   11140:	strdeq	r0, [r1], -r8
   11144:	andeq	r2, r1, r4, lsr #26
   11148:	ldr	r3, [pc, #20]	; 11164 <__assert_fail@plt+0x178>
   1114c:	ldr	r2, [pc, #20]	; 11168 <__assert_fail@plt+0x17c>
   11150:	add	r3, pc, r3
   11154:	ldr	r2, [r3, r2]
   11158:	cmp	r2, #0
   1115c:	bxeq	lr
   11160:	b	10eb4 <__gmon_start__@plt>
   11164:	andeq	r2, r1, r8, lsr #29
   11168:	andeq	r0, r0, r8, asr #1
   1116c:	push	{r3, lr}
   11170:	movw	r0, #16624	; 0x40f0
   11174:	ldr	r3, [pc, #36]	; 111a0 <__assert_fail@plt+0x1b4>
   11178:	movt	r0, #2
   1117c:	rsb	r3, r0, r3
   11180:	cmp	r3, #6
   11184:	popls	{r3, pc}
   11188:	movw	r3, #0
   1118c:	movt	r3, #0
   11190:	cmp	r3, #0
   11194:	popeq	{r3, pc}
   11198:	blx	r3
   1119c:	pop	{r3, pc}
   111a0:	strdeq	r4, [r2], -r3
   111a4:	push	{r3, lr}
   111a8:	movw	r0, #16624	; 0x40f0
   111ac:	movw	r3, #16624	; 0x40f0
   111b0:	movt	r0, #2
   111b4:	movt	r3, #2
   111b8:	rsb	r3, r0, r3
   111bc:	asr	r3, r3, #2
   111c0:	add	r3, r3, r3, lsr #31
   111c4:	asrs	r1, r3, #1
   111c8:	popeq	{r3, pc}
   111cc:	movw	r2, #0
   111d0:	movt	r2, #0
   111d4:	cmp	r2, #0
   111d8:	popeq	{r3, pc}
   111dc:	blx	r2
   111e0:	pop	{r3, pc}
   111e4:	push	{r4, lr}
   111e8:	movw	r4, #16628	; 0x40f4
   111ec:	movt	r4, #2
   111f0:	ldrb	r3, [r4]
   111f4:	cmp	r3, #0
   111f8:	popne	{r4, pc}
   111fc:	bl	1116c <__assert_fail@plt+0x180>
   11200:	mov	r3, #1
   11204:	strb	r3, [r4]
   11208:	pop	{r4, pc}
   1120c:	movw	r0, #16116	; 0x3ef4
   11210:	movt	r0, #2
   11214:	push	{r3, lr}
   11218:	ldr	r3, [r0]
   1121c:	cmp	r3, #0
   11220:	beq	11238 <__assert_fail@plt+0x24c>
   11224:	movw	r3, #0
   11228:	movt	r3, #0
   1122c:	cmp	r3, #0
   11230:	beq	11238 <__assert_fail@plt+0x24c>
   11234:	blx	r3
   11238:	pop	{r3, lr}
   1123c:	b	111a4 <__assert_fail@plt+0x1b8>
   11240:	cmp	r0, #114	; 0x72
   11244:	beq	1126c <__assert_fail@plt+0x280>
   11248:	cmp	r0, #256	; 0x100
   1124c:	bne	11264 <__assert_fail@plt+0x278>
   11250:	movw	r3, #16632	; 0x40f8
   11254:	movt	r3, #2
   11258:	mov	r0, #0
   1125c:	str	r1, [r3]
   11260:	bx	lr
   11264:	mov	r0, #7
   11268:	bx	lr
   1126c:	movw	r3, #16592	; 0x40d0
   11270:	movt	r3, #2
   11274:	mov	r0, #0
   11278:	str	r1, [r3]
   1127c:	bx	lr
   11280:	bx	lr
   11284:	cmp	r0, r1
   11288:	bcc	11298 <__assert_fail@plt+0x2ac>
   1128c:	movls	r0, #0
   11290:	movhi	r0, #1
   11294:	bx	lr
   11298:	mvn	r0, #0
   1129c:	bx	lr
   112a0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   112a4:	sub	sp, sp, #156	; 0x9c
   112a8:	movw	r9, #16624	; 0x40f0
   112ac:	movt	r9, #2
   112b0:	ldrb	ip, [sp, #200]	; 0xc8
   112b4:	mov	r7, r1
   112b8:	ldr	r1, [r9]
   112bc:	mov	r6, r0
   112c0:	cmp	ip, #0
   112c4:	ldr	ip, [sp, #204]	; 0xcc
   112c8:	str	r2, [sp, #32]
   112cc:	mov	r4, r3
   112d0:	ldr	r5, [sp, #192]	; 0xc0
   112d4:	str	r1, [sp, #148]	; 0x94
   112d8:	ldr	r2, [sp, #196]	; 0xc4
   112dc:	str	ip, [sp, #36]	; 0x24
   112e0:	bne	114e8 <__assert_fail@plt+0x4fc>
   112e4:	add	r1, sp, #40	; 0x28
   112e8:	mov	r0, r5
   112ec:	mov	r2, r6
   112f0:	mov	r3, r7
   112f4:	str	r1, [sp]
   112f8:	bl	10e18 <dwarf_addrdie@plt>
   112fc:	cmp	r0, #0
   11300:	beq	1135c <__assert_fail@plt+0x370>
   11304:	mov	r2, r6
   11308:	mov	r3, r7
   1130c:	bl	10e0c <dwarf_getsrc_die@plt>
   11310:	cmp	r0, #0
   11314:	beq	1135c <__assert_fail@plt+0x370>
   11318:	mov	r1, #0
   1131c:	mov	r2, r1
   11320:	bl	10fa4 <dwarf_linesrc@plt>
   11324:	subs	r5, r0, #0
   11328:	beq	1135c <__assert_fail@plt+0x370>
   1132c:	movw	r2, #4740	; 0x1284
   11330:	ldr	r1, [sp, #36]	; 0x24
   11334:	movt	r2, #1
   11338:	bl	10f5c <tfind@plt>
   1133c:	cmp	r0, #0
   11340:	beq	11600 <__assert_fail@plt+0x614>
   11344:	ldr	r2, [sp, #148]	; 0x94
   11348:	ldr	r3, [r9]
   1134c:	cmp	r2, r3
   11350:	bne	11638 <__assert_fail@plt+0x64c>
   11354:	add	sp, sp, #156	; 0x9c
   11358:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1135c:	mov	r1, #0
   11360:	mov	r0, r4
   11364:	bl	10e78 <elf_getdata@plt>
   11368:	add	r1, sp, #80	; 0x50
   1136c:	mov	r8, r0
   11370:	mov	r0, r4
   11374:	bl	10ddc <gelf_getshdr@plt>
   11378:	cmp	r0, #0
   1137c:	str	r0, [sp, #28]
   11380:	beq	1155c <__assert_fail@plt+0x570>
   11384:	ldrd	r2, [r0, #56]	; 0x38
   11388:	orrs	r0, r2, r3
   1138c:	beq	1155c <__assert_fail@plt+0x570>
   11390:	ldr	ip, [sp, #28]
   11394:	ldrd	r0, [ip, #32]
   11398:	bl	12198 <__assert_fail@plt+0x11ac>
   1139c:	subs	r4, r0, #0
   113a0:	beq	1155c <__assert_fail@plt+0x570>
   113a4:	mvn	fp, #0
   113a8:	mov	sl, #0
   113ac:	mov	r5, fp
   113b0:	mvn	r0, #0
   113b4:	mov	r1, #0
   113b8:	mov	r2, #0
   113bc:	mov	r3, #0
   113c0:	strd	r0, [sp, #16]
   113c4:	strd	r2, [sp, #8]
   113c8:	mov	r0, r8
   113cc:	mov	r1, sl
   113d0:	add	r2, sp, #56	; 0x38
   113d4:	bl	10e54 <gelf_getsym@plt>
   113d8:	cmp	r0, #0
   113dc:	beq	11424 <__assert_fail@plt+0x438>
   113e0:	ldrd	r2, [r0, #8]
   113e4:	cmp	r7, r3
   113e8:	cmpeq	r6, r2
   113ec:	bls	11404 <__assert_fail@plt+0x418>
   113f0:	ldrd	r0, [sp, #8]
   113f4:	cmp	r3, r1
   113f8:	cmpeq	r2, r0
   113fc:	strdhi	r2, [sp, #8]
   11400:	movhi	r5, sl
   11404:	cmp	r7, r3
   11408:	cmpeq	r6, r2
   1140c:	bcs	11424 <__assert_fail@plt+0x438>
   11410:	ldrd	r0, [sp, #16]
   11414:	cmp	r3, r1
   11418:	cmpeq	r2, r0
   1141c:	strdcc	r2, [sp, #16]
   11420:	movcc	fp, sl
   11424:	add	sl, sl, #1
   11428:	cmp	r4, sl
   1142c:	bhi	113c8 <__assert_fail@plt+0x3dc>
   11430:	cmn	r5, #1
   11434:	beq	114fc <__assert_fail@plt+0x510>
   11438:	mov	r1, r5
   1143c:	mov	r0, r8
   11440:	add	r2, sp, #56	; 0x38
   11444:	bl	10e54 <gelf_getsym@plt>
   11448:	subs	r4, r0, #0
   1144c:	beq	1167c <__assert_fail@plt+0x690>
   11450:	ldr	ip, [sp, #28]
   11454:	ldr	r2, [r4]
   11458:	ldr	r0, [sp, #32]
   1145c:	ldr	r1, [ip, #40]	; 0x28
   11460:	bl	10e60 <elf_strptr@plt>
   11464:	ldrd	r2, [r4, #16]
   11468:	ldrd	r4, [r4, #8]
   1146c:	adds	r4, r4, r2
   11470:	adc	r5, r5, r3
   11474:	cmp	r7, r5
   11478:	cmpeq	r6, r4
   1147c:	mov	sl, r0
   11480:	bcc	115b0 <__assert_fail@plt+0x5c4>
   11484:	cmn	fp, #1
   11488:	beq	11588 <__assert_fail@plt+0x59c>
   1148c:	mov	r0, r8
   11490:	mov	r1, fp
   11494:	add	r2, sp, #56	; 0x38
   11498:	bl	10e54 <gelf_getsym@plt>
   1149c:	subs	r5, r0, #0
   114a0:	beq	1165c <__assert_fail@plt+0x670>
   114a4:	mov	r2, #5
   114a8:	movw	r1, #12052	; 0x2f14
   114ac:	mov	r0, #0
   114b0:	movt	r1, #1
   114b4:	bl	10e24 <dcgettext@plt>
   114b8:	ldr	ip, [sp, #28]
   114bc:	ldr	r2, [r5]
   114c0:	ldr	r1, [ip, #40]	; 0x28
   114c4:	mov	r4, r0
   114c8:	ldr	r0, [sp, #32]
   114cc:	bl	10e60 <elf_strptr@plt>
   114d0:	mov	r1, r4
   114d4:	mov	r2, sl
   114d8:	mov	r3, r0
   114dc:	mov	r0, #1
   114e0:	bl	10f2c <__printf_chk@plt>
   114e4:	b	11344 <__assert_fail@plt+0x358>
   114e8:	movw	r1, #11892	; 0x2e74
   114ec:	mov	r0, #1
   114f0:	movt	r1, #1
   114f4:	bl	10f2c <__printf_chk@plt>
   114f8:	b	112e4 <__assert_fail@plt+0x2f8>
   114fc:	cmn	fp, #1
   11500:	beq	1155c <__assert_fail@plt+0x570>
   11504:	mov	r0, r8
   11508:	mov	r1, fp
   1150c:	add	r2, sp, #56	; 0x38
   11510:	bl	10e54 <gelf_getsym@plt>
   11514:	subs	r5, r0, #0
   11518:	beq	1163c <__assert_fail@plt+0x650>
   1151c:	mov	r2, #5
   11520:	movw	r1, #11972	; 0x2ec4
   11524:	mov	r0, #0
   11528:	movt	r1, #1
   1152c:	bl	10e24 <dcgettext@plt>
   11530:	ldr	ip, [sp, #28]
   11534:	ldr	r2, [r5]
   11538:	ldr	r1, [ip, #40]	; 0x28
   1153c:	mov	r4, r0
   11540:	ldr	r0, [sp, #32]
   11544:	bl	10e60 <elf_strptr@plt>
   11548:	mov	r1, r4
   1154c:	mov	r2, r0
   11550:	mov	r0, #1
   11554:	bl	10f2c <__printf_chk@plt>
   11558:	b	11344 <__assert_fail@plt+0x358>
   1155c:	mov	r2, #5
   11560:	movw	r1, #12172	; 0x2f8c
   11564:	mov	r0, #0
   11568:	movt	r1, #1
   1156c:	bl	10e24 <dcgettext@plt>
   11570:	mov	r2, r6
   11574:	mov	r3, r7
   11578:	mov	r1, r0
   1157c:	mov	r0, #1
   11580:	bl	10f2c <__printf_chk@plt>
   11584:	b	11344 <__assert_fail@plt+0x358>
   11588:	mov	r2, #5
   1158c:	movw	r1, #11972	; 0x2ec4
   11590:	mov	r0, #0
   11594:	movt	r1, #1
   11598:	bl	10e24 <dcgettext@plt>
   1159c:	mov	r2, sl
   115a0:	mov	r1, r0
   115a4:	mov	r0, #1
   115a8:	bl	10f2c <__printf_chk@plt>
   115ac:	b	11344 <__assert_fail@plt+0x358>
   115b0:	movw	r2, #4740	; 0x1284
   115b4:	ldr	r1, [sp, #36]	; 0x24
   115b8:	movt	r2, #1
   115bc:	bl	10f5c <tfind@plt>
   115c0:	cmp	r0, #0
   115c4:	bne	11344 <__assert_fail@plt+0x358>
   115c8:	mov	r2, #5
   115cc:	movw	r1, #12100	; 0x2f44
   115d0:	movt	r1, #1
   115d4:	bl	10e24 <dcgettext@plt>
   115d8:	mov	r2, sl
   115dc:	mov	r1, r0
   115e0:	mov	r0, #1
   115e4:	bl	10f2c <__printf_chk@plt>
   115e8:	mov	r0, sl
   115ec:	ldr	r1, [sp, #36]	; 0x24
   115f0:	movw	r2, #4740	; 0x1284
   115f4:	movt	r2, #1
   115f8:	bl	10f14 <tsearch@plt>
   115fc:	b	11344 <__assert_fail@plt+0x358>
   11600:	mov	r2, #5
   11604:	movw	r1, #11900	; 0x2e7c
   11608:	movt	r1, #1
   1160c:	bl	10e24 <dcgettext@plt>
   11610:	mov	r2, r5
   11614:	mov	r1, r0
   11618:	mov	r0, #1
   1161c:	bl	10f2c <__printf_chk@plt>
   11620:	mov	r0, r5
   11624:	ldr	r1, [sp, #36]	; 0x24
   11628:	movw	r2, #4740	; 0x1284
   1162c:	movt	r2, #1
   11630:	bl	10f14 <tsearch@plt>
   11634:	b	11344 <__assert_fail@plt+0x358>
   11638:	bl	10e30 <__stack_chk_fail@plt>
   1163c:	movw	r0, #11936	; 0x2ea0
   11640:	movw	r1, #11956	; 0x2eb4
   11644:	movw	r3, #11676	; 0x2d9c
   11648:	movt	r0, #1
   1164c:	movt	r1, #1
   11650:	movw	r2, #595	; 0x253
   11654:	movt	r3, #1
   11658:	bl	10fec <__assert_fail@plt>
   1165c:	movw	r0, #11936	; 0x2ea0
   11660:	movw	r1, #11956	; 0x2eb4
   11664:	movw	r3, #11676	; 0x2d9c
   11668:	movt	r0, #1
   1166c:	movt	r1, #1
   11670:	movw	r2, #583	; 0x247
   11674:	movt	r3, #1
   11678:	bl	10fec <__assert_fail@plt>
   1167c:	movw	r0, #11936	; 0x2ea0
   11680:	movw	r1, #11956	; 0x2eb4
   11684:	movw	r3, #11676	; 0x2d9c
   11688:	movt	r0, #1
   1168c:	movt	r1, #1
   11690:	mov	r2, #560	; 0x230
   11694:	movt	r3, #1
   11698:	bl	10fec <__assert_fail@plt>
   1169c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   116a0:	add	fp, sp, #32
   116a4:	sub	sp, sp, #236	; 0xec
   116a8:	movw	r8, #16624	; 0x40f0
   116ac:	movt	r8, #2
   116b0:	mov	r2, #0
   116b4:	str	r1, [fp, #-228]	; 0xffffff1c
   116b8:	ldr	r3, [r8]
   116bc:	movw	r6, #16592	; 0x40d0
   116c0:	str	r2, [fp, #-204]	; 0xffffff34
   116c4:	movt	r6, #2
   116c8:	str	r0, [fp, #-212]	; 0xffffff2c
   116cc:	str	r3, [fp, #-40]	; 0xffffffd8
   116d0:	bl	10ed8 <strlen@plt>
   116d4:	ldr	r4, [r6]
   116d8:	str	r0, [fp, #-220]	; 0xffffff24
   116dc:	mov	r0, r4
   116e0:	bl	10ed8 <strlen@plt>
   116e4:	ldr	ip, [fp, #-212]	; 0xffffff2c
   116e8:	ldrb	r3, [ip]
   116ec:	cmp	r3, #47	; 0x2f
   116f0:	str	r0, [fp, #-224]	; 0xffffff20
   116f4:	beq	118c4 <__assert_fail@plt+0x8d8>
   116f8:	ldr	r4, [fp, #-212]	; 0xffffff2c
   116fc:	mov	r0, r4
   11700:	mov	r1, #0
   11704:	bl	10e90 <open64@plt>
   11708:	cmn	r0, #1
   1170c:	str	r0, [fp, #-216]	; 0xffffff28
   11710:	beq	1193c <__assert_fail@plt+0x950>
   11714:	mov	r1, #8
   11718:	mov	r2, #0
   1171c:	bl	10f44 <elf_begin@plt>
   11720:	subs	r9, r0, #0
   11724:	beq	119e4 <__assert_fail@plt+0x9f8>
   11728:	sub	r1, fp, #172	; 0xac
   1172c:	bl	10dc4 <gelf_getehdr@plt>
   11730:	subs	r4, r0, #0
   11734:	beq	11b98 <__assert_fail@plt+0xbac>
   11738:	ldrh	r3, [r4, #16]
   1173c:	cmp	r3, #3
   11740:	beq	11798 <__assert_fail@plt+0x7ac>
   11744:	mov	r2, #5
   11748:	movw	r1, #12348	; 0x303c
   1174c:	mov	r0, #0
   11750:	movt	r1, #1
   11754:	bl	10e24 <dcgettext@plt>
   11758:	ldr	r3, [fp, #-212]	; 0xffffff2c
   1175c:	mov	r2, r0
   11760:	mov	r0, #0
   11764:	mov	r1, r0
   11768:	bl	10e84 <error@plt>
   1176c:	mov	r0, r9
   11770:	bl	10ecc <elf_end@plt>
   11774:	ldr	r0, [fp, #-216]	; 0xffffff28
   11778:	bl	10fe0 <close@plt>
   1177c:	mov	r0, #1
   11780:	ldr	r2, [fp, #-40]	; 0xffffffd8
   11784:	ldr	r3, [r8]
   11788:	cmp	r2, r3
   1178c:	bne	1205c <__assert_fail@plt+0x1070>
   11790:	sub	sp, fp, #32
   11794:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11798:	mov	r7, #0
   1179c:	str	r7, [fp, #-208]	; 0xffffff30
   117a0:	mov	r5, r7
   117a4:	mov	r4, r7
   117a8:	mov	r1, r4
   117ac:	mov	r0, r9
   117b0:	bl	10f80 <elf_nextscn@plt>
   117b4:	subs	r4, r0, #0
   117b8:	beq	11974 <__assert_fail@plt+0x988>
   117bc:	ldr	ip, [fp, #-208]	; 0xffffff30
   117c0:	eor	r3, r5, #1
   117c4:	cmp	ip, #0
   117c8:	orreq	r3, r3, #1
   117cc:	cmp	r3, #0
   117d0:	beq	11974 <__assert_fail@plt+0x988>
   117d4:	sub	r1, fp, #108	; 0x6c
   117d8:	bl	10ddc <gelf_getshdr@plt>
   117dc:	subs	ip, r0, #0
   117e0:	beq	11adc <__assert_fail@plt+0xaf0>
   117e4:	ldr	r3, [ip, #4]
   117e8:	cmp	r3, #2
   117ec:	beq	118bc <__assert_fail@plt+0x8d0>
   117f0:	cmp	r3, #6
   117f4:	bne	117a8 <__assert_fail@plt+0x7bc>
   117f8:	cmp	r5, #0
   117fc:	bne	117a8 <__assert_fail@plt+0x7bc>
   11800:	mov	r1, r5
   11804:	mov	r0, r4
   11808:	str	ip, [fp, #-248]	; 0xffffff08
   1180c:	bl	10e78 <elf_getdata@plt>
   11810:	ldr	ip, [fp, #-248]	; 0xffffff08
   11814:	ldrd	r2, [ip, #56]	; 0x38
   11818:	orrs	r1, r2, r3
   1181c:	mov	sl, r0
   11820:	beq	11934 <__assert_fail@plt+0x948>
   11824:	ldrd	r0, [ip, #32]
   11828:	bl	12198 <__assert_fail@plt+0x11ac>
   1182c:	subs	r3, r0, #0
   11830:	beq	11934 <__assert_fail@plt+0x948>
   11834:	str	r4, [fp, #-232]	; 0xffffff18
   11838:	mov	r4, r5
   1183c:	mov	r5, r3
   11840:	b	11850 <__assert_fail@plt+0x864>
   11844:	add	r4, r4, #1
   11848:	cmp	r5, r4
   1184c:	bls	118b0 <__assert_fail@plt+0x8c4>
   11850:	mov	r0, sl
   11854:	mov	r1, r4
   11858:	sub	r2, fp, #196	; 0xc4
   1185c:	bl	10f98 <gelf_getdyn@plt>
   11860:	subs	ip, r0, #0
   11864:	beq	119a8 <__assert_fail@plt+0x9bc>
   11868:	ldrd	r0, [ip]
   1186c:	cmp	r1, #0
   11870:	cmpeq	r0, #22
   11874:	moveq	r7, #1
   11878:	beq	11844 <__assert_fail@plt+0x858>
   1187c:	cmp	r1, #0
   11880:	cmpeq	r0, #30
   11884:	bne	11844 <__assert_fail@plt+0x858>
   11888:	ldrd	r0, [ip, #8]
   1188c:	mov	r3, #0
   11890:	mov	r2, #4
   11894:	add	r4, r4, #1
   11898:	and	r0, r0, r2
   1189c:	and	r1, r1, r3
   118a0:	orrs	r3, r0, r1
   118a4:	movne	r7, #1
   118a8:	cmp	r5, r4
   118ac:	bhi	11850 <__assert_fail@plt+0x864>
   118b0:	ldr	r4, [fp, #-232]	; 0xffffff18
   118b4:	mov	r5, #1
   118b8:	b	117a8 <__assert_fail@plt+0x7bc>
   118bc:	str	r4, [fp, #-208]	; 0xffffff30
   118c0:	b	117a8 <__assert_fail@plt+0x7bc>
   118c4:	ldrb	r3, [r4]
   118c8:	cmp	r3, #47	; 0x2f
   118cc:	beq	11924 <__assert_fail@plt+0x938>
   118d0:	ldr	ip, [fp, #-220]	; 0xffffff24
   118d4:	ldr	r1, [fp, #-224]	; 0xffffff20
   118d8:	ldr	r2, [fp, #-224]	; 0xffffff20
   118dc:	add	r3, ip, r1
   118e0:	mov	r1, r4
   118e4:	add	r3, r3, #16
   118e8:	bic	r3, r3, #7
   118ec:	sub	sp, sp, r3
   118f0:	add	r4, sp, #16
   118f4:	mov	r0, r4
   118f8:	bl	10ec0 <mempcpy@plt>
   118fc:	movw	r3, #12248	; 0x2fd8
   11900:	movt	r3, #1
   11904:	ldr	r1, [fp, #-212]	; 0xffffff2c
   11908:	ldr	r2, [fp, #-220]	; 0xffffff24
   1190c:	ldrh	r3, [r3]
   11910:	strh	r3, [r0], #1
   11914:	bl	10ec0 <mempcpy@plt>
   11918:	mov	r3, #0
   1191c:	strb	r3, [r0]
   11920:	b	116fc <__assert_fail@plt+0x710>
   11924:	ldrb	r3, [r4, #1]
   11928:	cmp	r3, #0
   1192c:	beq	116f8 <__assert_fail@plt+0x70c>
   11930:	b	118d0 <__assert_fail@plt+0x8e4>
   11934:	mov	r5, #1
   11938:	b	117a8 <__assert_fail@plt+0x7bc>
   1193c:	bl	10efc <__errno_location@plt>
   11940:	mov	r2, #5
   11944:	movw	r1, #12252	; 0x2fdc
   11948:	movt	r1, #1
   1194c:	ldr	r4, [r0]
   11950:	mov	r0, #0
   11954:	bl	10e24 <dcgettext@plt>
   11958:	ldr	r3, [fp, #-212]	; 0xffffff2c
   1195c:	mov	r1, r4
   11960:	mov	r2, r0
   11964:	mov	r0, #0
   11968:	bl	10e84 <error@plt>
   1196c:	mov	r0, #1
   11970:	b	11780 <__assert_fail@plt+0x794>
   11974:	cmp	r7, #0
   11978:	bne	11a1c <__assert_fail@plt+0xa30>
   1197c:	mov	r0, r7
   11980:	mov	r2, #5
   11984:	movw	r1, #12456	; 0x30a8
   11988:	movt	r1, #1
   1198c:	bl	10e24 <dcgettext@plt>
   11990:	mov	r1, r7
   11994:	ldr	r3, [fp, #-212]	; 0xffffff2c
   11998:	mov	r2, r0
   1199c:	mov	r0, r7
   119a0:	bl	10e84 <error@plt>
   119a4:	b	1176c <__assert_fail@plt+0x780>
   119a8:	mov	r2, #5
   119ac:	movw	r1, #12424	; 0x3088
   119b0:	movt	r1, #1
   119b4:	str	ip, [fp, #-248]	; 0xffffff08
   119b8:	bl	10e24 <dcgettext@plt>
   119bc:	mov	r4, r0
   119c0:	mvn	r0, #0
   119c4:	bl	10ee4 <elf_errmsg@plt>
   119c8:	ldr	ip, [fp, #-248]	; 0xffffff08
   119cc:	mov	r2, r4
   119d0:	mov	r1, ip
   119d4:	mov	r3, r0
   119d8:	mov	r0, ip
   119dc:	bl	10e84 <error@plt>
   119e0:	b	1176c <__assert_fail@plt+0x780>
   119e4:	mov	r2, #5
   119e8:	movw	r1, #12272	; 0x2ff0
   119ec:	movt	r1, #1
   119f0:	bl	10e24 <dcgettext@plt>
   119f4:	mov	r4, r0
   119f8:	mvn	r0, #0
   119fc:	bl	10ee4 <elf_errmsg@plt>
   11a00:	mov	r2, r4
   11a04:	ldr	r3, [fp, #-212]	; 0xffffff2c
   11a08:	mov	r1, r9
   11a0c:	str	r0, [sp]
   11a10:	mov	r0, r9
   11a14:	bl	10e84 <error@plt>
   11a18:	b	11774 <__assert_fail@plt+0x788>
   11a1c:	mov	r0, #160	; 0xa0
   11a20:	bl	10e9c <malloc@plt>
   11a24:	cmp	r0, #0
   11a28:	str	r0, [fp, #-232]	; 0xffffff18
   11a2c:	beq	12060 <__assert_fail@plt+0x1074>
   11a30:	mov	r0, r9
   11a34:	sub	r1, fp, #200	; 0xc8
   11a38:	bl	10f08 <elf_getphdrnum@plt>
   11a3c:	cmp	r0, #0
   11a40:	bne	1208c <__assert_fail@plt+0x10a0>
   11a44:	ldr	r3, [fp, #-200]	; 0xffffff38
   11a48:	cmp	r3, #0
   11a4c:	moveq	sl, r3
   11a50:	beq	11b60 <__assert_fail@plt+0xb74>
   11a54:	str	r6, [fp, #-236]	; 0xffffff14
   11a58:	mov	r4, r0
   11a5c:	mov	sl, r0
   11a60:	mov	r7, #10
   11a64:	ldr	r6, [fp, #-232]	; 0xffffff18
   11a68:	b	11a7c <__assert_fail@plt+0xa90>
   11a6c:	ldr	r3, [fp, #-200]	; 0xffffff38
   11a70:	add	r4, r4, #1
   11a74:	cmp	r3, r4
   11a78:	bls	11bd0 <__assert_fail@plt+0xbe4>
   11a7c:	mov	r0, r9
   11a80:	mov	r1, r4
   11a84:	sub	r2, fp, #108	; 0x6c
   11a88:	bl	10e3c <gelf_getphdr@plt>
   11a8c:	subs	r5, r0, #0
   11a90:	beq	11b24 <__assert_fail@plt+0xb38>
   11a94:	ldr	r3, [r5]
   11a98:	cmp	r3, #1
   11a9c:	bne	11a6c <__assert_fail@plt+0xa80>
   11aa0:	ldr	r3, [r5, #4]
   11aa4:	tst	r3, #2
   11aa8:	bne	11a6c <__assert_fail@plt+0xa80>
   11aac:	cmp	sl, r7
   11ab0:	beq	11d44 <__assert_fail@plt+0xd58>
   11ab4:	ldrd	r2, [r5, #16]
   11ab8:	lsl	ip, sl, #4
   11abc:	ldrd	r0, [r5, #40]	; 0x28
   11ac0:	add	lr, r6, ip
   11ac4:	add	sl, sl, #1
   11ac8:	strd	r2, [r6, ip]
   11acc:	adds	r2, r2, r0
   11ad0:	adc	r3, r3, r1
   11ad4:	strd	r2, [lr, #8]
   11ad8:	b	11a6c <__assert_fail@plt+0xa80>
   11adc:	mov	r2, #5
   11ae0:	movw	r1, #12376	; 0x3058
   11ae4:	movt	r1, #1
   11ae8:	mov	sl, ip
   11aec:	bl	10e24 <dcgettext@plt>
   11af0:	mov	r5, r0
   11af4:	mov	r0, r4
   11af8:	bl	10fb0 <elf_ndxscn@plt>
   11afc:	mov	r4, r0
   11b00:	mvn	r0, #0
   11b04:	bl	10ee4 <elf_errmsg@plt>
   11b08:	mov	r2, r5
   11b0c:	mov	r3, r4
   11b10:	mov	r1, sl
   11b14:	str	r0, [sp]
   11b18:	mov	r0, sl
   11b1c:	bl	10e84 <error@plt>
   11b20:	b	1176c <__assert_fail@plt+0x780>
   11b24:	mov	r2, #5
   11b28:	movw	r1, #12556	; 0x310c
   11b2c:	movt	r1, #1
   11b30:	str	r6, [fp, #-232]	; 0xffffff18
   11b34:	bl	10e24 <dcgettext@plt>
   11b38:	mov	r6, r0
   11b3c:	mvn	r0, #0
   11b40:	bl	10ee4 <elf_errmsg@plt>
   11b44:	mov	r2, r6
   11b48:	mov	r3, r4
   11b4c:	mov	r1, r5
   11b50:	str	r0, [sp]
   11b54:	mov	r0, r5
   11b58:	bl	10e84 <error@plt>
   11b5c:	mov	sl, #1
   11b60:	mov	r0, r9
   11b64:	bl	10ecc <elf_end@plt>
   11b68:	mov	r0, #0
   11b6c:	bl	10ecc <elf_end@plt>
   11b70:	ldr	r0, [fp, #-216]	; 0xffffff28
   11b74:	bl	10fe0 <close@plt>
   11b78:	ldr	r0, [fp, #-232]	; 0xffffff18
   11b7c:	bl	10df4 <free@plt>
   11b80:	ldr	r0, [fp, #-204]	; 0xffffff34
   11b84:	movw	r1, #4736	; 0x1280
   11b88:	movt	r1, #1
   11b8c:	bl	10e00 <tdestroy@plt>
   11b90:	mov	r0, sl
   11b94:	b	11780 <__assert_fail@plt+0x794>
   11b98:	mov	r2, #5
   11b9c:	movw	r1, #12316	; 0x301c
   11ba0:	movt	r1, #1
   11ba4:	bl	10e24 <dcgettext@plt>
   11ba8:	mov	r5, r0
   11bac:	mvn	r0, #0
   11bb0:	bl	10ee4 <elf_errmsg@plt>
   11bb4:	mov	r2, r5
   11bb8:	ldr	r3, [fp, #-212]	; 0xffffff2c
   11bbc:	mov	r1, r4
   11bc0:	str	r0, [sp]
   11bc4:	mov	r0, r4
   11bc8:	bl	10e84 <error@plt>
   11bcc:	b	1176c <__assert_fail@plt+0x780>
   11bd0:	cmp	sl, #0
   11bd4:	str	r6, [fp, #-232]	; 0xffffff18
   11bd8:	ldr	r6, [fp, #-236]	; 0xffffff14
   11bdc:	beq	11b60 <__assert_fail@plt+0xb74>
   11be0:	mov	r1, #0
   11be4:	mov	r0, r9
   11be8:	mov	r2, r1
   11bec:	bl	10f50 <dwarf_begin_elf@plt>
   11bf0:	cmp	r0, #0
   11bf4:	str	r0, [fp, #-236]	; 0xffffff14
   11bf8:	beq	11f14 <__assert_fail@plt+0xf28>
   11bfc:	mov	ip, #0
   11c00:	str	ip, [fp, #-240]	; 0xffffff10
   11c04:	mvn	ip, #0
   11c08:	str	ip, [fp, #-224]	; 0xffffff20
   11c0c:	mov	r5, r8
   11c10:	mov	ip, #0
   11c14:	str	ip, [fp, #-220]	; 0xffffff24
   11c18:	ldr	r1, [fp, #-220]	; 0xffffff24
   11c1c:	mov	r0, r9
   11c20:	bl	10f80 <elf_nextscn@plt>
   11c24:	subs	ip, r0, #0
   11c28:	str	ip, [fp, #-220]	; 0xffffff24
   11c2c:	beq	12048 <__assert_fail@plt+0x105c>
   11c30:	sub	r1, fp, #108	; 0x6c
   11c34:	bl	10ddc <gelf_getshdr@plt>
   11c38:	subs	r6, r0, #0
   11c3c:	beq	11ffc <__assert_fail@plt+0x1010>
   11c40:	ldr	r3, [r6, #4]
   11c44:	cmp	r3, #9
   11c48:	cmpne	r3, #4
   11c4c:	bne	11c64 <__assert_fail@plt+0xc78>
   11c50:	ldr	ip, [fp, #-208]	; 0xffffff30
   11c54:	cmp	ip, #0
   11c58:	beq	11ef4 <__assert_fail@plt+0xf08>
   11c5c:	cmp	r3, #9
   11c60:	beq	11d98 <__assert_fail@plt+0xdac>
   11c64:	cmp	r3, #4
   11c68:	bne	11c18 <__assert_fail@plt+0xc2c>
   11c6c:	mov	r1, #0
   11c70:	ldr	r0, [fp, #-220]	; 0xffffff24
   11c74:	bl	10e78 <elf_getdata@plt>
   11c78:	ldrd	r2, [r6, #56]	; 0x38
   11c7c:	orrs	r1, r2, r3
   11c80:	mov	r7, r0
   11c84:	beq	11c18 <__assert_fail@plt+0xc2c>
   11c88:	ldrd	r0, [r6, #32]
   11c8c:	bl	12198 <__assert_fail@plt+0x11ac>
   11c90:	cmp	r0, #0
   11c94:	beq	11c18 <__assert_fail@plt+0xc2c>
   11c98:	str	r5, [fp, #-244]	; 0xffffff0c
   11c9c:	add	r8, r0, #1
   11ca0:	ldr	r5, [fp, #-232]	; 0xffffff18
   11ca4:	mov	r6, #1
   11ca8:	sub	r4, r6, #1
   11cac:	sub	r2, fp, #196	; 0xc4
   11cb0:	mov	r0, r7
   11cb4:	mov	r1, r4
   11cb8:	bl	10ef0 <gelf_getrela@plt>
   11cbc:	subs	r2, r0, #0
   11cc0:	beq	11e6c <__assert_fail@plt+0xe80>
   11cc4:	ldrd	r0, [r2]
   11cc8:	mov	ip, r5
   11ccc:	mov	lr, #0
   11cd0:	ldrd	r2, [ip]
   11cd4:	cmp	r1, r3
   11cd8:	cmpeq	r0, r2
   11cdc:	bcc	11cf0 <__assert_fail@plt+0xd04>
   11ce0:	ldrd	r2, [ip, #8]
   11ce4:	cmp	r1, r3
   11ce8:	cmpeq	r0, r2
   11cec:	bcc	11d14 <__assert_fail@plt+0xd28>
   11cf0:	add	lr, lr, #1
   11cf4:	add	ip, ip, #16
   11cf8:	cmp	lr, sl
   11cfc:	bne	11cd0 <__assert_fail@plt+0xce4>
   11d00:	add	r6, r6, #1
   11d04:	cmp	r6, r8
   11d08:	bne	11ca8 <__assert_fail@plt+0xcbc>
   11d0c:	ldr	r5, [fp, #-244]	; 0xffffff0c
   11d10:	b	11c18 <__assert_fail@plt+0xc2c>
   11d14:	ldr	ip, [fp, #-236]	; 0xffffff14
   11d18:	mov	r2, r9
   11d1c:	ldr	r3, [fp, #-208]	; 0xffffff30
   11d20:	str	ip, [sp]
   11d24:	ldr	ip, [fp, #-212]	; 0xffffff2c
   11d28:	str	ip, [sp, #4]
   11d2c:	ldr	ip, [fp, #-228]	; 0xffffff1c
   11d30:	str	ip, [sp, #8]
   11d34:	sub	ip, fp, #204	; 0xcc
   11d38:	str	ip, [sp, #12]
   11d3c:	bl	112a0 <__assert_fail@plt+0x2b4>
   11d40:	b	11d00 <__assert_fail@plt+0xd14>
   11d44:	mov	r0, r6
   11d48:	lsl	r1, sl, #5
   11d4c:	bl	10e48 <realloc@plt>
   11d50:	lsl	r7, sl, #1
   11d54:	subs	r6, r0, #0
   11d58:	bne	11ab4 <__assert_fail@plt+0xac8>
   11d5c:	mov	r2, #5
   11d60:	movw	r1, #12556	; 0x310c
   11d64:	movt	r1, #1
   11d68:	str	r6, [fp, #-232]	; 0xffffff18
   11d6c:	bl	10e24 <dcgettext@plt>
   11d70:	mov	r5, r0
   11d74:	mvn	r0, #0
   11d78:	bl	10ee4 <elf_errmsg@plt>
   11d7c:	ldr	r1, [fp, #-232]	; 0xffffff18
   11d80:	mov	r2, r5
   11d84:	mov	r3, r4
   11d88:	str	r0, [sp]
   11d8c:	mov	r0, r1
   11d90:	bl	10e84 <error@plt>
   11d94:	b	11b5c <__assert_fail@plt+0xb70>
   11d98:	mov	r1, #0
   11d9c:	ldr	r0, [fp, #-220]	; 0xffffff24
   11da0:	bl	10e78 <elf_getdata@plt>
   11da4:	ldrd	r2, [r6, #56]	; 0x38
   11da8:	orrs	r1, r2, r3
   11dac:	mov	r7, r0
   11db0:	beq	11c18 <__assert_fail@plt+0xc2c>
   11db4:	ldrd	r0, [r6, #32]
   11db8:	bl	12198 <__assert_fail@plt+0x11ac>
   11dbc:	cmp	r0, #0
   11dc0:	beq	11c18 <__assert_fail@plt+0xc2c>
   11dc4:	str	r5, [fp, #-244]	; 0xffffff0c
   11dc8:	add	r8, r0, #1
   11dcc:	ldr	r5, [fp, #-232]	; 0xffffff18
   11dd0:	mov	r6, #1
   11dd4:	sub	r4, r6, #1
   11dd8:	sub	r2, fp, #196	; 0xc4
   11ddc:	mov	r0, r7
   11de0:	mov	r1, r4
   11de4:	bl	10f8c <gelf_getrel@plt>
   11de8:	subs	r2, r0, #0
   11dec:	beq	11e6c <__assert_fail@plt+0xe80>
   11df0:	ldrd	r0, [r2]
   11df4:	mov	ip, r5
   11df8:	mov	lr, #0
   11dfc:	ldrd	r2, [ip]
   11e00:	cmp	r1, r3
   11e04:	cmpeq	r0, r2
   11e08:	bcc	11e1c <__assert_fail@plt+0xe30>
   11e0c:	ldrd	r2, [ip, #8]
   11e10:	cmp	r1, r3
   11e14:	cmpeq	r0, r2
   11e18:	bcc	11e3c <__assert_fail@plt+0xe50>
   11e1c:	add	lr, lr, #1
   11e20:	add	ip, ip, #16
   11e24:	cmp	lr, sl
   11e28:	bne	11dfc <__assert_fail@plt+0xe10>
   11e2c:	add	r6, r6, #1
   11e30:	cmp	r6, r8
   11e34:	bne	11dd4 <__assert_fail@plt+0xde8>
   11e38:	b	11d0c <__assert_fail@plt+0xd20>
   11e3c:	ldr	ip, [fp, #-236]	; 0xffffff14
   11e40:	mov	r2, r9
   11e44:	ldr	r3, [fp, #-208]	; 0xffffff30
   11e48:	str	ip, [sp]
   11e4c:	ldr	ip, [fp, #-212]	; 0xffffff2c
   11e50:	str	ip, [sp, #4]
   11e54:	ldr	ip, [fp, #-228]	; 0xffffff1c
   11e58:	str	ip, [sp, #8]
   11e5c:	sub	ip, fp, #204	; 0xcc
   11e60:	str	ip, [sp, #12]
   11e64:	bl	112a0 <__assert_fail@plt+0x2b4>
   11e68:	b	11e2c <__assert_fail@plt+0xe40>
   11e6c:	mov	r5, r2
   11e70:	movw	r1, #12712	; 0x31a8
   11e74:	mov	r2, #5
   11e78:	movt	r1, #1
   11e7c:	ldr	r8, [fp, #-244]	; 0xffffff0c
   11e80:	bl	10e24 <dcgettext@plt>
   11e84:	mov	r6, r0
   11e88:	ldr	r0, [fp, #-220]	; 0xffffff24
   11e8c:	bl	10fb0 <elf_ndxscn@plt>
   11e90:	mov	r7, r0
   11e94:	mvn	r0, #0
   11e98:	bl	10ee4 <elf_errmsg@plt>
   11e9c:	ldr	ip, [fp, #-212]	; 0xffffff2c
   11ea0:	str	r7, [sp]
   11ea4:	mov	r2, r6
   11ea8:	mov	r3, r4
   11eac:	mov	r1, r5
   11eb0:	str	ip, [sp, #4]
   11eb4:	str	r0, [sp, #8]
   11eb8:	mov	r0, r5
   11ebc:	bl	10e84 <error@plt>
   11ec0:	mov	sl, #1
   11ec4:	mov	r0, r9
   11ec8:	bl	10ecc <elf_end@plt>
   11ecc:	ldr	r0, [fp, #-240]	; 0xffffff10
   11ed0:	bl	10ecc <elf_end@plt>
   11ed4:	ldr	r0, [fp, #-216]	; 0xffffff28
   11ed8:	bl	10fe0 <close@plt>
   11edc:	ldr	ip, [fp, #-224]	; 0xffffff20
   11ee0:	cmn	ip, #1
   11ee4:	beq	11b78 <__assert_fail@plt+0xb8c>
   11ee8:	mov	r0, ip
   11eec:	bl	10fe0 <close@plt>
   11ef0:	b	11b78 <__assert_fail@plt+0xb8c>
   11ef4:	mov	r0, r9
   11ef8:	ldr	r1, [r6, #40]	; 0x28
   11efc:	bl	10fbc <elf_getscn@plt>
   11f00:	subs	ip, r0, #0
   11f04:	str	ip, [fp, #-208]	; 0xffffff30
   11f08:	beq	120c0 <__assert_fail@plt+0x10d4>
   11f0c:	ldr	r3, [r6, #4]
   11f10:	b	11c5c <__assert_fail@plt+0xc70>
   11f14:	ldr	ip, [fp, #-212]	; 0xffffff2c
   11f18:	ldrb	r3, [ip]
   11f1c:	cmp	r3, #47	; 0x2f
   11f20:	bne	11bfc <__assert_fail@plt+0xc10>
   11f24:	movw	r3, #16632	; 0x40f8
   11f28:	movt	r3, #2
   11f2c:	ldr	r5, [r3]
   11f30:	mov	r0, r5
   11f34:	bl	10ed8 <strlen@plt>
   11f38:	ldr	ip, [fp, #-220]	; 0xffffff24
   11f3c:	ldr	r1, [fp, #-224]	; 0xffffff20
   11f40:	ldr	r2, [fp, #-224]	; 0xffffff20
   11f44:	add	r3, ip, r1
   11f48:	ldr	r1, [r6]
   11f4c:	add	r3, r0, r3
   11f50:	mov	r7, r0
   11f54:	add	r3, r3, #22
   11f58:	bic	r3, r3, #7
   11f5c:	sub	sp, sp, r3
   11f60:	add	r4, sp, #16
   11f64:	mov	r0, r4
   11f68:	bl	10ec0 <mempcpy@plt>
   11f6c:	mov	r1, r5
   11f70:	mov	r2, r7
   11f74:	bl	10ec0 <mempcpy@plt>
   11f78:	movw	r3, #12248	; 0x2fd8
   11f7c:	movt	r3, #1
   11f80:	ldr	r2, [fp, #-220]	; 0xffffff24
   11f84:	ldr	r1, [fp, #-212]	; 0xffffff2c
   11f88:	ldrh	r3, [r3]
   11f8c:	strh	r3, [r0], #1
   11f90:	bl	10ec0 <mempcpy@plt>
   11f94:	movw	r3, #12608	; 0x3140
   11f98:	movt	r3, #1
   11f9c:	ldr	r1, [fp, #-236]	; 0xffffff14
   11fa0:	ldrh	ip, [r3, #4]
   11fa4:	mov	r2, r0
   11fa8:	ldr	r0, [r3]
   11fac:	ldrb	r3, [r3, #6]
   11fb0:	strh	ip, [r2, #4]
   11fb4:	str	r0, [r2]
   11fb8:	mov	r0, r4
   11fbc:	strb	r3, [r2, #6]
   11fc0:	bl	10e90 <open64@plt>
   11fc4:	cmn	r0, #1
   11fc8:	str	r0, [fp, #-224]	; 0xffffff20
   11fcc:	beq	11bfc <__assert_fail@plt+0xc10>
   11fd0:	mov	r1, #8
   11fd4:	ldr	r2, [fp, #-236]	; 0xffffff14
   11fd8:	bl	10f44 <elf_begin@plt>
   11fdc:	subs	ip, r0, #0
   11fe0:	str	ip, [fp, #-240]	; 0xffffff10
   11fe4:	beq	11c0c <__assert_fail@plt+0xc20>
   11fe8:	ldr	r1, [fp, #-236]	; 0xffffff14
   11fec:	mov	r2, r1
   11ff0:	bl	10f50 <dwarf_begin_elf@plt>
   11ff4:	str	r0, [fp, #-236]	; 0xffffff14
   11ff8:	b	11c0c <__assert_fail@plt+0xc20>
   11ffc:	mov	r2, #5
   12000:	movw	r1, #12616	; 0x3148
   12004:	movt	r1, #1
   12008:	mov	r4, r6
   1200c:	bl	10e24 <dcgettext@plt>
   12010:	mov	r8, r5
   12014:	mov	r6, r0
   12018:	ldr	r0, [fp, #-220]	; 0xffffff24
   1201c:	bl	10fb0 <elf_ndxscn@plt>
   12020:	mov	r5, r0
   12024:	mvn	r0, #0
   12028:	bl	10ee4 <elf_errmsg@plt>
   1202c:	mov	r2, r6
   12030:	mov	r3, r5
   12034:	mov	r1, r4
   12038:	str	r0, [sp]
   1203c:	mov	r0, r4
   12040:	bl	10e84 <error@plt>
   12044:	b	11ec0 <__assert_fail@plt+0xed4>
   12048:	ldr	r0, [fp, #-236]	; 0xffffff14
   1204c:	mov	r8, r5
   12050:	mov	sl, ip
   12054:	bl	10f74 <dwarf_end@plt>
   12058:	b	11ec4 <__assert_fail@plt+0xed8>
   1205c:	bl	10e30 <__stack_chk_fail@plt>
   12060:	bl	10efc <__errno_location@plt>
   12064:	mov	r2, #5
   12068:	movw	r1, #12496	; 0x30d0
   1206c:	movt	r1, #1
   12070:	ldr	r4, [r0]
   12074:	ldr	r0, [fp, #-232]	; 0xffffff18
   12078:	bl	10e24 <dcgettext@plt>
   1207c:	mov	r1, r4
   12080:	mov	r2, r0
   12084:	mov	r0, #1
   12088:	bl	10e84 <error@plt>
   1208c:	mov	r2, #5
   12090:	movw	r1, #12520	; 0x30e8
   12094:	mov	r0, #0
   12098:	movt	r1, #1
   1209c:	bl	10e24 <dcgettext@plt>
   120a0:	mov	r4, r0
   120a4:	mvn	r0, #0
   120a8:	bl	10ee4 <elf_errmsg@plt>
   120ac:	mov	r2, r4
   120b0:	mov	r1, #0
   120b4:	mov	r3, r0
   120b8:	mov	r0, #1
   120bc:	bl	10e84 <error@plt>
   120c0:	mov	r2, #5
   120c4:	movw	r1, #12664	; 0x3178
   120c8:	movt	r1, #1
   120cc:	mov	r8, r5
   120d0:	bl	10e24 <dcgettext@plt>
   120d4:	ldr	r4, [r6, #40]	; 0x28
   120d8:	mov	r5, r0
   120dc:	mvn	r0, #0
   120e0:	bl	10ee4 <elf_errmsg@plt>
   120e4:	ldr	ip, [fp, #-212]	; 0xffffff2c
   120e8:	mov	r2, r5
   120ec:	mov	r3, r4
   120f0:	str	ip, [sp]
   120f4:	str	r0, [sp, #4]
   120f8:	ldr	r0, [fp, #-208]	; 0xffffff30
   120fc:	mov	r1, r0
   12100:	bl	10e84 <error@plt>
   12104:	b	11ec0 <__assert_fail@plt+0xed4>
   12108:	push	{r4, lr}
   1210c:	sub	sp, sp, #8
   12110:	ldr	lr, [pc, #104]	; 12180 <__assert_fail@plt+0x1194>
   12114:	mov	r4, r0
   12118:	ldr	ip, [pc, #100]	; 12184 <__assert_fail@plt+0x1198>
   1211c:	ldr	r2, [pc, #100]	; 12188 <__assert_fail@plt+0x119c>
   12120:	add	lr, pc, lr
   12124:	ldr	r3, [r1, #40]	; 0x28
   12128:	add	ip, pc, ip
   1212c:	str	lr, [sp]
   12130:	mov	r1, #1
   12134:	str	ip, [sp, #4]
   12138:	add	r2, pc, r2
   1213c:	bl	10f38 <__fprintf_chk@plt>
   12140:	ldr	r1, [pc, #68]	; 1218c <__assert_fail@plt+0x11a0>
   12144:	mov	r2, #5
   12148:	mov	r0, #0
   1214c:	add	r1, pc, r1
   12150:	bl	10e24 <dcgettext@plt>
   12154:	ldr	ip, [pc, #52]	; 12190 <__assert_fail@plt+0x11a4>
   12158:	ldr	r3, [pc, #52]	; 12194 <__assert_fail@plt+0x11a8>
   1215c:	mov	r1, #1
   12160:	add	ip, pc, ip
   12164:	str	ip, [sp]
   12168:	add	r3, pc, r3
   1216c:	mov	r2, r0
   12170:	mov	r0, r4
   12174:	bl	10f38 <__fprintf_chk@plt>
   12178:	add	sp, sp, #8
   1217c:	pop	{r4, pc}
   12180:	andeq	r1, r0, r0, asr #1
   12184:	andeq	r1, r0, r4, lsr #3
   12188:	andeq	r1, r0, r8, lsl #3
   1218c:	andeq	r1, r0, r8, lsl #3
   12190:	andeq	r1, r0, r4, asr #4
   12194:	andeq	r1, r0, r4, lsr r2
   12198:	cmp	r3, #0
   1219c:	cmpeq	r2, #0
   121a0:	bne	121b8 <__assert_fail@plt+0x11cc>
   121a4:	cmp	r1, #0
   121a8:	cmpeq	r0, #0
   121ac:	mvnne	r1, #0
   121b0:	mvnne	r0, #0
   121b4:	b	121d4 <__assert_fail@plt+0x11e8>
   121b8:	sub	sp, sp, #8
   121bc:	push	{sp, lr}
   121c0:	bl	12220 <__assert_fail@plt+0x1234>
   121c4:	ldr	lr, [sp, #4]
   121c8:	add	sp, sp, #8
   121cc:	pop	{r2, r3}
   121d0:	bx	lr
   121d4:	push	{r1, lr}
   121d8:	mov	r0, #8
   121dc:	bl	10dd0 <raise@plt>
   121e0:	pop	{r1, pc}
   121e4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   121e8:	mov	r8, r2
   121ec:	mov	r6, r0
   121f0:	mov	r7, r1
   121f4:	mov	sl, r3
   121f8:	ldr	r9, [sp, #32]
   121fc:	bl	1225c <__assert_fail@plt+0x1270>
   12200:	umull	r4, r5, r8, r0
   12204:	mul	r8, r8, r1
   12208:	mla	r2, r0, sl, r8
   1220c:	add	r5, r2, r5
   12210:	subs	r4, r6, r4
   12214:	sbc	r5, r7, r5
   12218:	strd	r4, [r9]
   1221c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12220:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12224:	mov	r8, r2
   12228:	mov	r6, r0
   1222c:	mov	r7, r1
   12230:	mov	r5, r3
   12234:	ldr	r9, [sp, #32]
   12238:	bl	126e8 <__assert_fail@plt+0x16fc>
   1223c:	mul	r3, r0, r5
   12240:	umull	r4, r5, r0, r8
   12244:	mla	r8, r8, r1, r3
   12248:	add	r5, r8, r5
   1224c:	subs	r4, r6, r4
   12250:	sbc	r5, r7, r5
   12254:	strd	r4, [r9]
   12258:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1225c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12260:	rsbs	r4, r0, #0
   12264:	rsc	r5, r1, #0
   12268:	cmp	r1, #0
   1226c:	mvn	r6, #0
   12270:	sub	sp, sp, #12
   12274:	movge	r4, r0
   12278:	movge	r5, r1
   1227c:	movge	r6, #0
   12280:	cmp	r3, #0
   12284:	blt	124bc <__assert_fail@plt+0x14d0>
   12288:	cmp	r3, #0
   1228c:	mov	sl, r4
   12290:	mov	ip, r5
   12294:	mov	r0, r2
   12298:	mov	r1, r3
   1229c:	mov	r8, r2
   122a0:	mov	r7, r4
   122a4:	mov	r9, r5
   122a8:	bne	123a0 <__assert_fail@plt+0x13b4>
   122ac:	cmp	r2, r5
   122b0:	bls	123dc <__assert_fail@plt+0x13f0>
   122b4:	clz	r3, r2
   122b8:	cmp	r3, #0
   122bc:	rsbne	r2, r3, #32
   122c0:	lslne	r8, r0, r3
   122c4:	lsrne	r2, r4, r2
   122c8:	lslne	r7, r4, r3
   122cc:	orrne	r9, r2, r5, lsl r3
   122d0:	lsr	r4, r8, #16
   122d4:	uxth	sl, r8
   122d8:	mov	r1, r4
   122dc:	mov	r0, r9
   122e0:	bl	12b18 <__assert_fail@plt+0x1b2c>
   122e4:	mov	r1, r4
   122e8:	mov	fp, r0
   122ec:	mov	r0, r9
   122f0:	bl	12d04 <__assert_fail@plt+0x1d18>
   122f4:	mul	r0, sl, fp
   122f8:	lsr	r2, r7, #16
   122fc:	orr	r1, r2, r1, lsl #16
   12300:	cmp	r0, r1
   12304:	bls	12328 <__assert_fail@plt+0x133c>
   12308:	adds	r1, r1, r8
   1230c:	sub	r3, fp, #1
   12310:	bcs	12324 <__assert_fail@plt+0x1338>
   12314:	cmp	r0, r1
   12318:	subhi	fp, fp, #2
   1231c:	addhi	r1, r1, r8
   12320:	bhi	12328 <__assert_fail@plt+0x133c>
   12324:	mov	fp, r3
   12328:	rsb	r9, r0, r1
   1232c:	mov	r1, r4
   12330:	uxth	r7, r7
   12334:	mov	r0, r9
   12338:	bl	12b18 <__assert_fail@plt+0x1b2c>
   1233c:	mov	r1, r4
   12340:	mov	r5, r0
   12344:	mov	r0, r9
   12348:	bl	12d04 <__assert_fail@plt+0x1d18>
   1234c:	mul	sl, sl, r5
   12350:	orr	r1, r7, r1, lsl #16
   12354:	cmp	sl, r1
   12358:	bls	12378 <__assert_fail@plt+0x138c>
   1235c:	adds	r8, r1, r8
   12360:	sub	r3, r5, #1
   12364:	bcs	12374 <__assert_fail@plt+0x1388>
   12368:	cmp	sl, r8
   1236c:	subhi	r5, r5, #2
   12370:	bhi	12378 <__assert_fail@plt+0x138c>
   12374:	mov	r5, r3
   12378:	orr	r3, r5, fp, lsl #16
   1237c:	mov	r4, #0
   12380:	cmp	r6, #0
   12384:	mov	r0, r3
   12388:	mov	r1, r4
   1238c:	beq	12398 <__assert_fail@plt+0x13ac>
   12390:	rsbs	r0, r0, #0
   12394:	rsc	r1, r1, #0
   12398:	add	sp, sp, #12
   1239c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   123a0:	cmp	r3, r5
   123a4:	movhi	r4, #0
   123a8:	movhi	r3, r4
   123ac:	bhi	12380 <__assert_fail@plt+0x1394>
   123b0:	clz	r5, r1
   123b4:	cmp	r5, #0
   123b8:	bne	125a8 <__assert_fail@plt+0x15bc>
   123bc:	cmp	r1, ip
   123c0:	cmpcs	r2, sl
   123c4:	movhi	r4, #0
   123c8:	movls	r4, #1
   123cc:	movls	r3, #1
   123d0:	movls	r4, r5
   123d4:	movhi	r3, r4
   123d8:	b	12380 <__assert_fail@plt+0x1394>
   123dc:	cmp	r2, #0
   123e0:	bne	123f4 <__assert_fail@plt+0x1408>
   123e4:	mov	r1, r2
   123e8:	mov	r0, #1
   123ec:	bl	12b18 <__assert_fail@plt+0x1b2c>
   123f0:	mov	r8, r0
   123f4:	clz	r3, r8
   123f8:	cmp	r3, #0
   123fc:	bne	124cc <__assert_fail@plt+0x14e0>
   12400:	rsb	r9, r8, r9
   12404:	lsr	r5, r8, #16
   12408:	uxth	sl, r8
   1240c:	mov	r4, #1
   12410:	mov	r1, r5
   12414:	mov	r0, r9
   12418:	bl	12b18 <__assert_fail@plt+0x1b2c>
   1241c:	mov	r1, r5
   12420:	mov	fp, r0
   12424:	mov	r0, r9
   12428:	bl	12d04 <__assert_fail@plt+0x1d18>
   1242c:	mul	r0, sl, fp
   12430:	lsr	r2, r7, #16
   12434:	orr	r1, r2, r1, lsl #16
   12438:	cmp	r0, r1
   1243c:	bls	1245c <__assert_fail@plt+0x1470>
   12440:	adds	r1, r1, r8
   12444:	sub	r3, fp, #1
   12448:	bcs	126c8 <__assert_fail@plt+0x16dc>
   1244c:	cmp	r0, r1
   12450:	subhi	fp, fp, #2
   12454:	addhi	r1, r1, r8
   12458:	bls	126c8 <__assert_fail@plt+0x16dc>
   1245c:	rsb	r2, r0, r1
   12460:	mov	r1, r5
   12464:	str	r2, [sp]
   12468:	uxth	r7, r7
   1246c:	mov	r0, r2
   12470:	bl	12b18 <__assert_fail@plt+0x1b2c>
   12474:	ldr	r2, [sp]
   12478:	mov	r1, r5
   1247c:	mov	r9, r0
   12480:	mov	r0, r2
   12484:	bl	12d04 <__assert_fail@plt+0x1d18>
   12488:	mul	sl, sl, r9
   1248c:	orr	r1, r7, r1, lsl #16
   12490:	cmp	sl, r1
   12494:	bls	124b4 <__assert_fail@plt+0x14c8>
   12498:	adds	r8, r1, r8
   1249c:	sub	r3, r9, #1
   124a0:	bcs	124b0 <__assert_fail@plt+0x14c4>
   124a4:	cmp	sl, r8
   124a8:	subhi	r9, r9, #2
   124ac:	bhi	124b4 <__assert_fail@plt+0x14c8>
   124b0:	mov	r9, r3
   124b4:	orr	r3, r9, fp, lsl #16
   124b8:	b	12380 <__assert_fail@plt+0x1394>
   124bc:	mvn	r6, r6
   124c0:	rsbs	r2, r2, #0
   124c4:	rsc	r3, r3, #0
   124c8:	b	12288 <__assert_fail@plt+0x129c>
   124cc:	lsl	r8, r8, r3
   124d0:	rsb	fp, r3, #32
   124d4:	lsr	r4, r9, fp
   124d8:	lsr	fp, r7, fp
   124dc:	lsr	r5, r8, #16
   124e0:	orr	fp, fp, r9, lsl r3
   124e4:	mov	r0, r4
   124e8:	lsl	r7, r7, r3
   124ec:	mov	r1, r5
   124f0:	uxth	sl, r8
   124f4:	bl	12b18 <__assert_fail@plt+0x1b2c>
   124f8:	mov	r1, r5
   124fc:	mov	r3, r0
   12500:	mov	r0, r4
   12504:	str	r3, [sp]
   12508:	bl	12d04 <__assert_fail@plt+0x1d18>
   1250c:	ldr	r3, [sp]
   12510:	lsr	r2, fp, #16
   12514:	mul	r0, sl, r3
   12518:	orr	r1, r2, r1, lsl #16
   1251c:	cmp	r0, r1
   12520:	bls	12540 <__assert_fail@plt+0x1554>
   12524:	adds	r1, r1, r8
   12528:	sub	r2, r3, #1
   1252c:	bcs	126e0 <__assert_fail@plt+0x16f4>
   12530:	cmp	r0, r1
   12534:	subhi	r3, r3, #2
   12538:	addhi	r1, r1, r8
   1253c:	bls	126e0 <__assert_fail@plt+0x16f4>
   12540:	rsb	r9, r0, r1
   12544:	mov	r1, r5
   12548:	str	r3, [sp]
   1254c:	uxth	fp, fp
   12550:	mov	r0, r9
   12554:	bl	12b18 <__assert_fail@plt+0x1b2c>
   12558:	mov	r1, r5
   1255c:	mov	r4, r0
   12560:	mov	r0, r9
   12564:	bl	12d04 <__assert_fail@plt+0x1d18>
   12568:	mul	r9, sl, r4
   1256c:	ldr	r3, [sp]
   12570:	orr	r1, fp, r1, lsl #16
   12574:	cmp	r9, r1
   12578:	bls	1259c <__assert_fail@plt+0x15b0>
   1257c:	adds	r1, r1, r8
   12580:	sub	r2, r4, #1
   12584:	bcs	12598 <__assert_fail@plt+0x15ac>
   12588:	cmp	r9, r1
   1258c:	subhi	r4, r4, #2
   12590:	addhi	r1, r1, r8
   12594:	bhi	1259c <__assert_fail@plt+0x15b0>
   12598:	mov	r4, r2
   1259c:	rsb	r9, r9, r1
   125a0:	orr	r4, r4, r3, lsl #16
   125a4:	b	12410 <__assert_fail@plt+0x1424>
   125a8:	rsb	sl, r5, #32
   125ac:	lsl	r3, r2, r5
   125b0:	lsr	r0, r2, sl
   125b4:	lsr	r2, ip, sl
   125b8:	orr	r4, r0, r1, lsl r5
   125bc:	lsr	sl, r7, sl
   125c0:	mov	r0, r2
   125c4:	orr	sl, sl, ip, lsl r5
   125c8:	lsr	r9, r4, #16
   125cc:	str	r3, [sp, #4]
   125d0:	str	r2, [sp]
   125d4:	uxth	fp, r4
   125d8:	mov	r1, r9
   125dc:	bl	12b18 <__assert_fail@plt+0x1b2c>
   125e0:	ldr	r2, [sp]
   125e4:	mov	r1, r9
   125e8:	mov	r8, r0
   125ec:	mov	r0, r2
   125f0:	bl	12d04 <__assert_fail@plt+0x1d18>
   125f4:	mul	r0, fp, r8
   125f8:	lsr	r2, sl, #16
   125fc:	orr	r1, r2, r1, lsl #16
   12600:	cmp	r0, r1
   12604:	bls	12624 <__assert_fail@plt+0x1638>
   12608:	adds	r1, r1, r4
   1260c:	sub	r2, r8, #1
   12610:	bcs	126d8 <__assert_fail@plt+0x16ec>
   12614:	cmp	r0, r1
   12618:	subhi	r8, r8, #2
   1261c:	addhi	r1, r1, r4
   12620:	bls	126d8 <__assert_fail@plt+0x16ec>
   12624:	rsb	ip, r0, r1
   12628:	mov	r1, r9
   1262c:	str	ip, [sp]
   12630:	mov	r0, ip
   12634:	bl	12b18 <__assert_fail@plt+0x1b2c>
   12638:	ldr	ip, [sp]
   1263c:	mov	r1, r9
   12640:	mov	r2, r0
   12644:	mov	r0, ip
   12648:	str	r2, [sp]
   1264c:	bl	12d04 <__assert_fail@plt+0x1d18>
   12650:	ldr	r2, [sp]
   12654:	uxth	ip, sl
   12658:	mul	fp, fp, r2
   1265c:	orr	ip, ip, r1, lsl #16
   12660:	cmp	fp, ip
   12664:	bls	12684 <__assert_fail@plt+0x1698>
   12668:	adds	ip, ip, r4
   1266c:	sub	r1, r2, #1
   12670:	bcs	126d0 <__assert_fail@plt+0x16e4>
   12674:	cmp	fp, ip
   12678:	subhi	r2, r2, #2
   1267c:	addhi	ip, ip, r4
   12680:	bls	126d0 <__assert_fail@plt+0x16e4>
   12684:	ldr	r0, [sp, #4]
   12688:	orr	r1, r2, r8, lsl #16
   1268c:	rsb	fp, fp, ip
   12690:	umull	r2, r3, r1, r0
   12694:	cmp	fp, r3
   12698:	bcc	126bc <__assert_fail@plt+0x16d0>
   1269c:	movne	r4, #0
   126a0:	moveq	r4, #1
   126a4:	cmp	r2, r7, lsl r5
   126a8:	movls	r4, #0
   126ac:	andhi	r4, r4, #1
   126b0:	cmp	r4, #0
   126b4:	moveq	r3, r1
   126b8:	beq	12380 <__assert_fail@plt+0x1394>
   126bc:	sub	r3, r1, #1
   126c0:	mov	r4, #0
   126c4:	b	12380 <__assert_fail@plt+0x1394>
   126c8:	mov	fp, r3
   126cc:	b	1245c <__assert_fail@plt+0x1470>
   126d0:	mov	r2, r1
   126d4:	b	12684 <__assert_fail@plt+0x1698>
   126d8:	mov	r8, r2
   126dc:	b	12624 <__assert_fail@plt+0x1638>
   126e0:	mov	r3, r2
   126e4:	b	12540 <__assert_fail@plt+0x1554>
   126e8:	cmp	r3, #0
   126ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   126f0:	mov	r6, r0
   126f4:	sub	sp, sp, #12
   126f8:	mov	r5, r1
   126fc:	mov	r7, r0
   12700:	mov	r4, r2
   12704:	mov	r8, r1
   12708:	bne	127e8 <__assert_fail@plt+0x17fc>
   1270c:	cmp	r2, r1
   12710:	bls	12824 <__assert_fail@plt+0x1838>
   12714:	clz	r3, r2
   12718:	cmp	r3, #0
   1271c:	rsbne	r8, r3, #32
   12720:	lslne	r4, r2, r3
   12724:	lsrne	r8, r0, r8
   12728:	lslne	r7, r0, r3
   1272c:	orrne	r8, r8, r1, lsl r3
   12730:	lsr	r5, r4, #16
   12734:	uxth	sl, r4
   12738:	mov	r1, r5
   1273c:	mov	r0, r8
   12740:	bl	12b18 <__assert_fail@plt+0x1b2c>
   12744:	mov	r1, r5
   12748:	mov	r9, r0
   1274c:	mov	r0, r8
   12750:	bl	12d04 <__assert_fail@plt+0x1d18>
   12754:	mul	r0, sl, r9
   12758:	lsr	r3, r7, #16
   1275c:	orr	r1, r3, r1, lsl #16
   12760:	cmp	r0, r1
   12764:	bls	12788 <__assert_fail@plt+0x179c>
   12768:	adds	r1, r1, r4
   1276c:	sub	r2, r9, #1
   12770:	bcs	12784 <__assert_fail@plt+0x1798>
   12774:	cmp	r0, r1
   12778:	subhi	r9, r9, #2
   1277c:	addhi	r1, r1, r4
   12780:	bhi	12788 <__assert_fail@plt+0x179c>
   12784:	mov	r9, r2
   12788:	rsb	r8, r0, r1
   1278c:	mov	r1, r5
   12790:	uxth	r7, r7
   12794:	mov	r0, r8
   12798:	bl	12b18 <__assert_fail@plt+0x1b2c>
   1279c:	mov	r1, r5
   127a0:	mov	r6, r0
   127a4:	mov	r0, r8
   127a8:	bl	12d04 <__assert_fail@plt+0x1d18>
   127ac:	mul	sl, sl, r6
   127b0:	orr	r1, r7, r1, lsl #16
   127b4:	cmp	sl, r1
   127b8:	bls	127d4 <__assert_fail@plt+0x17e8>
   127bc:	adds	r4, r1, r4
   127c0:	sub	r3, r6, #1
   127c4:	bcs	12ad0 <__assert_fail@plt+0x1ae4>
   127c8:	cmp	sl, r4
   127cc:	subhi	r6, r6, #2
   127d0:	bls	12ad0 <__assert_fail@plt+0x1ae4>
   127d4:	orr	r0, r6, r9, lsl #16
   127d8:	mov	r6, #0
   127dc:	mov	r1, r6
   127e0:	add	sp, sp, #12
   127e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   127e8:	cmp	r3, r1
   127ec:	movhi	r6, #0
   127f0:	movhi	r0, r6
   127f4:	bhi	127dc <__assert_fail@plt+0x17f0>
   127f8:	clz	r7, r3
   127fc:	cmp	r7, #0
   12800:	bne	12900 <__assert_fail@plt+0x1914>
   12804:	cmp	r3, r1
   12808:	cmpcs	r2, r6
   1280c:	movhi	r6, #0
   12810:	movls	r6, #1
   12814:	movls	r0, #1
   12818:	movls	r6, r7
   1281c:	movhi	r0, r6
   12820:	b	127dc <__assert_fail@plt+0x17f0>
   12824:	cmp	r2, #0
   12828:	bne	1283c <__assert_fail@plt+0x1850>
   1282c:	mov	r1, r2
   12830:	mov	r0, #1
   12834:	bl	12b18 <__assert_fail@plt+0x1b2c>
   12838:	mov	r4, r0
   1283c:	clz	r3, r4
   12840:	cmp	r3, #0
   12844:	bne	129fc <__assert_fail@plt+0x1a10>
   12848:	rsb	r5, r4, r5
   1284c:	lsr	r8, r4, #16
   12850:	uxth	sl, r4
   12854:	mov	r6, #1
   12858:	mov	r1, r8
   1285c:	mov	r0, r5
   12860:	bl	12b18 <__assert_fail@plt+0x1b2c>
   12864:	mov	r1, r8
   12868:	mov	r9, r0
   1286c:	mov	r0, r5
   12870:	bl	12d04 <__assert_fail@plt+0x1d18>
   12874:	mul	r0, sl, r9
   12878:	lsr	r3, r7, #16
   1287c:	orr	r1, r3, r1, lsl #16
   12880:	cmp	r0, r1
   12884:	bls	128a4 <__assert_fail@plt+0x18b8>
   12888:	adds	r1, r1, r4
   1288c:	sub	r2, r9, #1
   12890:	bcs	12ad8 <__assert_fail@plt+0x1aec>
   12894:	cmp	r0, r1
   12898:	subhi	r9, r9, #2
   1289c:	addhi	r1, r1, r4
   128a0:	bls	12ad8 <__assert_fail@plt+0x1aec>
   128a4:	rsb	fp, r0, r1
   128a8:	mov	r1, r8
   128ac:	uxth	r7, r7
   128b0:	mov	r0, fp
   128b4:	bl	12b18 <__assert_fail@plt+0x1b2c>
   128b8:	mov	r1, r8
   128bc:	mov	r5, r0
   128c0:	mov	r0, fp
   128c4:	bl	12d04 <__assert_fail@plt+0x1d18>
   128c8:	mul	sl, sl, r5
   128cc:	orr	r1, r7, r1, lsl #16
   128d0:	cmp	sl, r1
   128d4:	bls	128f0 <__assert_fail@plt+0x1904>
   128d8:	adds	r4, r1, r4
   128dc:	sub	r3, r5, #1
   128e0:	bcs	12ae0 <__assert_fail@plt+0x1af4>
   128e4:	cmp	sl, r4
   128e8:	subhi	r5, r5, #2
   128ec:	bls	12ae0 <__assert_fail@plt+0x1af4>
   128f0:	orr	r0, r5, r9, lsl #16
   128f4:	mov	r1, r6
   128f8:	add	sp, sp, #12
   128fc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12900:	rsb	r1, r7, #32
   12904:	lsl	r0, r2, r7
   12908:	lsr	r2, r2, r1
   1290c:	lsr	fp, r5, r1
   12910:	orr	r8, r2, r3, lsl r7
   12914:	lsr	r1, r6, r1
   12918:	str	r0, [sp, #4]
   1291c:	orr	r5, r1, r5, lsl r7
   12920:	lsr	r9, r8, #16
   12924:	mov	r0, fp
   12928:	uxth	sl, r8
   1292c:	mov	r1, r9
   12930:	bl	12b18 <__assert_fail@plt+0x1b2c>
   12934:	mov	r1, r9
   12938:	mov	r4, r0
   1293c:	mov	r0, fp
   12940:	bl	12d04 <__assert_fail@plt+0x1d18>
   12944:	mul	r0, sl, r4
   12948:	lsr	ip, r5, #16
   1294c:	orr	r1, ip, r1, lsl #16
   12950:	cmp	r0, r1
   12954:	bls	12968 <__assert_fail@plt+0x197c>
   12958:	adds	r1, r1, r8
   1295c:	sub	r2, r4, #1
   12960:	bcc	12afc <__assert_fail@plt+0x1b10>
   12964:	mov	r4, r2
   12968:	rsb	ip, r0, r1
   1296c:	mov	r1, r9
   12970:	str	ip, [sp]
   12974:	uxth	r5, r5
   12978:	mov	r0, ip
   1297c:	bl	12b18 <__assert_fail@plt+0x1b2c>
   12980:	ldr	ip, [sp]
   12984:	mov	r1, r9
   12988:	mov	fp, r0
   1298c:	mov	r0, ip
   12990:	bl	12d04 <__assert_fail@plt+0x1d18>
   12994:	mul	sl, sl, fp
   12998:	orr	r1, r5, r1, lsl #16
   1299c:	cmp	sl, r1
   129a0:	bls	129b4 <__assert_fail@plt+0x19c8>
   129a4:	adds	r1, r1, r8
   129a8:	sub	r2, fp, #1
   129ac:	bcc	12ae8 <__assert_fail@plt+0x1afc>
   129b0:	mov	fp, r2
   129b4:	ldr	r3, [sp, #4]
   129b8:	orr	r0, fp, r4, lsl #16
   129bc:	rsb	sl, sl, r1
   129c0:	umull	r4, r5, r0, r3
   129c4:	cmp	sl, r5
   129c8:	bcc	129e8 <__assert_fail@plt+0x19fc>
   129cc:	movne	r3, #0
   129d0:	moveq	r3, #1
   129d4:	cmp	r4, r6, lsl r7
   129d8:	movls	r6, #0
   129dc:	andhi	r6, r3, #1
   129e0:	cmp	r6, #0
   129e4:	beq	127dc <__assert_fail@plt+0x17f0>
   129e8:	mov	r6, #0
   129ec:	sub	r0, r0, #1
   129f0:	mov	r1, r6
   129f4:	add	sp, sp, #12
   129f8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129fc:	lsl	r4, r4, r3
   12a00:	rsb	r9, r3, #32
   12a04:	lsr	r2, r5, r9
   12a08:	lsr	r9, r6, r9
   12a0c:	lsr	r8, r4, #16
   12a10:	orr	r9, r9, r5, lsl r3
   12a14:	mov	r0, r2
   12a18:	lsl	r7, r6, r3
   12a1c:	mov	r1, r8
   12a20:	str	r2, [sp]
   12a24:	bl	12b18 <__assert_fail@plt+0x1b2c>
   12a28:	ldr	r2, [sp]
   12a2c:	mov	r1, r8
   12a30:	uxth	sl, r4
   12a34:	mov	fp, r0
   12a38:	mov	r0, r2
   12a3c:	bl	12d04 <__assert_fail@plt+0x1d18>
   12a40:	mul	r0, sl, fp
   12a44:	lsr	r3, r9, #16
   12a48:	orr	r1, r3, r1, lsl #16
   12a4c:	cmp	r0, r1
   12a50:	bls	12a70 <__assert_fail@plt+0x1a84>
   12a54:	adds	r1, r1, r4
   12a58:	sub	r3, fp, #1
   12a5c:	bcs	12b10 <__assert_fail@plt+0x1b24>
   12a60:	cmp	r0, r1
   12a64:	subhi	fp, fp, #2
   12a68:	addhi	r1, r1, r4
   12a6c:	bls	12b10 <__assert_fail@plt+0x1b24>
   12a70:	rsb	r5, r0, r1
   12a74:	mov	r1, r8
   12a78:	uxth	r9, r9
   12a7c:	mov	r0, r5
   12a80:	bl	12b18 <__assert_fail@plt+0x1b2c>
   12a84:	mov	r1, r8
   12a88:	mov	r6, r0
   12a8c:	mov	r0, r5
   12a90:	bl	12d04 <__assert_fail@plt+0x1d18>
   12a94:	mul	r5, sl, r6
   12a98:	orr	r1, r9, r1, lsl #16
   12a9c:	cmp	r5, r1
   12aa0:	bls	12ac4 <__assert_fail@plt+0x1ad8>
   12aa4:	adds	r1, r1, r4
   12aa8:	sub	r3, r6, #1
   12aac:	bcs	12ac0 <__assert_fail@plt+0x1ad4>
   12ab0:	cmp	r5, r1
   12ab4:	subhi	r6, r6, #2
   12ab8:	addhi	r1, r1, r4
   12abc:	bhi	12ac4 <__assert_fail@plt+0x1ad8>
   12ac0:	mov	r6, r3
   12ac4:	rsb	r5, r5, r1
   12ac8:	orr	r6, r6, fp, lsl #16
   12acc:	b	12858 <__assert_fail@plt+0x186c>
   12ad0:	mov	r6, r3
   12ad4:	b	127d4 <__assert_fail@plt+0x17e8>
   12ad8:	mov	r9, r2
   12adc:	b	128a4 <__assert_fail@plt+0x18b8>
   12ae0:	mov	r5, r3
   12ae4:	b	128f0 <__assert_fail@plt+0x1904>
   12ae8:	cmp	sl, r1
   12aec:	subhi	fp, fp, #2
   12af0:	addhi	r1, r1, r8
   12af4:	bhi	129b4 <__assert_fail@plt+0x19c8>
   12af8:	b	129b0 <__assert_fail@plt+0x19c4>
   12afc:	cmp	r0, r1
   12b00:	subhi	r4, r4, #2
   12b04:	addhi	r1, r1, r8
   12b08:	bhi	12968 <__assert_fail@plt+0x197c>
   12b0c:	b	12964 <__assert_fail@plt+0x1978>
   12b10:	mov	fp, r3
   12b14:	b	12a70 <__assert_fail@plt+0x1a84>
   12b18:	subs	r2, r1, #1
   12b1c:	bxeq	lr
   12b20:	bcc	12cf8 <__assert_fail@plt+0x1d0c>
   12b24:	cmp	r0, r1
   12b28:	bls	12cdc <__assert_fail@plt+0x1cf0>
   12b2c:	tst	r1, r2
   12b30:	beq	12ce8 <__assert_fail@plt+0x1cfc>
   12b34:	clz	r3, r0
   12b38:	clz	r2, r1
   12b3c:	sub	r3, r2, r3
   12b40:	rsbs	r3, r3, #31
   12b44:	addne	r3, r3, r3, lsl #1
   12b48:	mov	r2, #0
   12b4c:	addne	pc, pc, r3, lsl #2
   12b50:	nop	{0}
   12b54:	cmp	r0, r1, lsl #31
   12b58:	adc	r2, r2, r2
   12b5c:	subcs	r0, r0, r1, lsl #31
   12b60:	cmp	r0, r1, lsl #30
   12b64:	adc	r2, r2, r2
   12b68:	subcs	r0, r0, r1, lsl #30
   12b6c:	cmp	r0, r1, lsl #29
   12b70:	adc	r2, r2, r2
   12b74:	subcs	r0, r0, r1, lsl #29
   12b78:	cmp	r0, r1, lsl #28
   12b7c:	adc	r2, r2, r2
   12b80:	subcs	r0, r0, r1, lsl #28
   12b84:	cmp	r0, r1, lsl #27
   12b88:	adc	r2, r2, r2
   12b8c:	subcs	r0, r0, r1, lsl #27
   12b90:	cmp	r0, r1, lsl #26
   12b94:	adc	r2, r2, r2
   12b98:	subcs	r0, r0, r1, lsl #26
   12b9c:	cmp	r0, r1, lsl #25
   12ba0:	adc	r2, r2, r2
   12ba4:	subcs	r0, r0, r1, lsl #25
   12ba8:	cmp	r0, r1, lsl #24
   12bac:	adc	r2, r2, r2
   12bb0:	subcs	r0, r0, r1, lsl #24
   12bb4:	cmp	r0, r1, lsl #23
   12bb8:	adc	r2, r2, r2
   12bbc:	subcs	r0, r0, r1, lsl #23
   12bc0:	cmp	r0, r1, lsl #22
   12bc4:	adc	r2, r2, r2
   12bc8:	subcs	r0, r0, r1, lsl #22
   12bcc:	cmp	r0, r1, lsl #21
   12bd0:	adc	r2, r2, r2
   12bd4:	subcs	r0, r0, r1, lsl #21
   12bd8:	cmp	r0, r1, lsl #20
   12bdc:	adc	r2, r2, r2
   12be0:	subcs	r0, r0, r1, lsl #20
   12be4:	cmp	r0, r1, lsl #19
   12be8:	adc	r2, r2, r2
   12bec:	subcs	r0, r0, r1, lsl #19
   12bf0:	cmp	r0, r1, lsl #18
   12bf4:	adc	r2, r2, r2
   12bf8:	subcs	r0, r0, r1, lsl #18
   12bfc:	cmp	r0, r1, lsl #17
   12c00:	adc	r2, r2, r2
   12c04:	subcs	r0, r0, r1, lsl #17
   12c08:	cmp	r0, r1, lsl #16
   12c0c:	adc	r2, r2, r2
   12c10:	subcs	r0, r0, r1, lsl #16
   12c14:	cmp	r0, r1, lsl #15
   12c18:	adc	r2, r2, r2
   12c1c:	subcs	r0, r0, r1, lsl #15
   12c20:	cmp	r0, r1, lsl #14
   12c24:	adc	r2, r2, r2
   12c28:	subcs	r0, r0, r1, lsl #14
   12c2c:	cmp	r0, r1, lsl #13
   12c30:	adc	r2, r2, r2
   12c34:	subcs	r0, r0, r1, lsl #13
   12c38:	cmp	r0, r1, lsl #12
   12c3c:	adc	r2, r2, r2
   12c40:	subcs	r0, r0, r1, lsl #12
   12c44:	cmp	r0, r1, lsl #11
   12c48:	adc	r2, r2, r2
   12c4c:	subcs	r0, r0, r1, lsl #11
   12c50:	cmp	r0, r1, lsl #10
   12c54:	adc	r2, r2, r2
   12c58:	subcs	r0, r0, r1, lsl #10
   12c5c:	cmp	r0, r1, lsl #9
   12c60:	adc	r2, r2, r2
   12c64:	subcs	r0, r0, r1, lsl #9
   12c68:	cmp	r0, r1, lsl #8
   12c6c:	adc	r2, r2, r2
   12c70:	subcs	r0, r0, r1, lsl #8
   12c74:	cmp	r0, r1, lsl #7
   12c78:	adc	r2, r2, r2
   12c7c:	subcs	r0, r0, r1, lsl #7
   12c80:	cmp	r0, r1, lsl #6
   12c84:	adc	r2, r2, r2
   12c88:	subcs	r0, r0, r1, lsl #6
   12c8c:	cmp	r0, r1, lsl #5
   12c90:	adc	r2, r2, r2
   12c94:	subcs	r0, r0, r1, lsl #5
   12c98:	cmp	r0, r1, lsl #4
   12c9c:	adc	r2, r2, r2
   12ca0:	subcs	r0, r0, r1, lsl #4
   12ca4:	cmp	r0, r1, lsl #3
   12ca8:	adc	r2, r2, r2
   12cac:	subcs	r0, r0, r1, lsl #3
   12cb0:	cmp	r0, r1, lsl #2
   12cb4:	adc	r2, r2, r2
   12cb8:	subcs	r0, r0, r1, lsl #2
   12cbc:	cmp	r0, r1, lsl #1
   12cc0:	adc	r2, r2, r2
   12cc4:	subcs	r0, r0, r1, lsl #1
   12cc8:	cmp	r0, r1
   12ccc:	adc	r2, r2, r2
   12cd0:	subcs	r0, r0, r1
   12cd4:	mov	r0, r2
   12cd8:	bx	lr
   12cdc:	moveq	r0, #1
   12ce0:	movne	r0, #0
   12ce4:	bx	lr
   12ce8:	clz	r2, r1
   12cec:	rsb	r2, r2, #31
   12cf0:	lsr	r0, r0, r2
   12cf4:	bx	lr
   12cf8:	cmp	r0, #0
   12cfc:	mvnne	r0, #0
   12d00:	b	121d4 <__assert_fail@plt+0x11e8>
   12d04:	cmp	r1, #0
   12d08:	beq	12cf8 <__assert_fail@plt+0x1d0c>
   12d0c:	push	{r0, r1, lr}
   12d10:	bl	12b18 <__assert_fail@plt+0x1b2c>
   12d14:	pop	{r1, r2, lr}
   12d18:	mul	r3, r2, r0
   12d1c:	sub	r1, r1, r3
   12d20:	bx	lr
   12d24:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12d28:	mov	r7, r0
   12d2c:	ldr	r6, [pc, #76]	; 12d80 <__assert_fail@plt+0x1d94>
   12d30:	mov	r8, r1
   12d34:	ldr	r5, [pc, #72]	; 12d84 <__assert_fail@plt+0x1d98>
   12d38:	mov	r9, r2
   12d3c:	add	r6, pc, r6
   12d40:	bl	10da4 <_init@@Base>
   12d44:	add	r5, pc, r5
   12d48:	rsb	r6, r5, r6
   12d4c:	asrs	r6, r6, #2
   12d50:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   12d54:	sub	r5, r5, #4
   12d58:	mov	r4, #0
   12d5c:	add	r4, r4, #1
   12d60:	ldr	r3, [r5, #4]!
   12d64:	mov	r0, r7
   12d68:	mov	r1, r8
   12d6c:	mov	r2, r9
   12d70:	blx	r3
   12d74:	cmp	r4, r6
   12d78:	bne	12d5c <__assert_fail@plt+0x1d70>
   12d7c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12d80:	andeq	r1, r1, ip, lsr #3
   12d84:	andeq	r1, r1, r0, lsr #3
   12d88:	bx	lr

Disassembly of section .fini:

00012d8c <_fini@@Base>:
   12d8c:	push	{r3, lr}
   12d90:	pop	{r3, pc}
