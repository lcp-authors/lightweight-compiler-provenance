
centos-preinstalled/tr:     file format elf32-littlearm


Disassembly of section .init:

00010fd0 <.init>:
   10fd0:	push	{r3, lr}
   10fd4:	bl	1263c <__assert_fail@plt+0x137c>
   10fd8:	pop	{r3, pc}

Disassembly of section .plt:

00010fdc <fdopen@plt-0x14>:
   10fdc:	push	{lr}		; (str lr, [sp, #-4]!)
   10fe0:	ldr	lr, [pc, #4]	; 10fec <fdopen@plt-0x4>
   10fe4:	add	lr, pc, lr
   10fe8:	ldr	pc, [lr, #8]!
   10fec:	andeq	r9, r1, r4, lsl r0

00010ff0 <fdopen@plt>:
   10ff0:	add	ip, pc, #0, 12
   10ff4:	add	ip, ip, #102400	; 0x19000
   10ff8:	ldr	pc, [ip, #20]!

00010ffc <calloc@plt>:
   10ffc:	add	ip, pc, #0, 12
   11000:	add	ip, ip, #102400	; 0x19000
   11004:	ldr	pc, [ip, #12]!

00011008 <fputs_unlocked@plt>:
   11008:	add	ip, pc, #0, 12
   1100c:	add	ip, ip, #102400	; 0x19000
   11010:	ldr	pc, [ip, #4]!

00011014 <raise@plt>:
   11014:	add	ip, pc, #0, 12
   11018:	add	ip, ip, #24, 20	; 0x18000
   1101c:	ldr	pc, [ip, #4092]!	; 0xffc

00011020 <strcmp@plt>:
   11020:	add	ip, pc, #0, 12
   11024:	add	ip, ip, #24, 20	; 0x18000
   11028:	ldr	pc, [ip, #4084]!	; 0xff4

0001102c <posix_fadvise64@plt>:
   1102c:	add	ip, pc, #0, 12
   11030:	add	ip, ip, #24, 20	; 0x18000
   11034:	ldr	pc, [ip, #4076]!	; 0xfec

00011038 <read@plt>:
   11038:	add	ip, pc, #0, 12
   1103c:	add	ip, ip, #24, 20	; 0x18000
   11040:	ldr	pc, [ip, #4068]!	; 0xfe4

00011044 <fflush@plt>:
   11044:	add	ip, pc, #0, 12
   11048:	add	ip, ip, #24, 20	; 0x18000
   1104c:	ldr	pc, [ip, #4060]!	; 0xfdc

00011050 <free@plt>:
   11050:	add	ip, pc, #0, 12
   11054:	add	ip, ip, #24, 20	; 0x18000
   11058:	ldr	pc, [ip, #4052]!	; 0xfd4

0001105c <_exit@plt>:
   1105c:	add	ip, pc, #0, 12
   11060:	add	ip, ip, #24, 20	; 0x18000
   11064:	ldr	pc, [ip, #4044]!	; 0xfcc

00011068 <memcpy@plt>:
   11068:	add	ip, pc, #0, 12
   1106c:	add	ip, ip, #24, 20	; 0x18000
   11070:	ldr	pc, [ip, #4036]!	; 0xfc4

00011074 <__strtoull_internal@plt>:
   11074:	add	ip, pc, #0, 12
   11078:	add	ip, ip, #24, 20	; 0x18000
   1107c:	ldr	pc, [ip, #4028]!	; 0xfbc

00011080 <mbsinit@plt>:
   11080:	add	ip, pc, #0, 12
   11084:	add	ip, ip, #24, 20	; 0x18000
   11088:	ldr	pc, [ip, #4020]!	; 0xfb4

0001108c <fwrite_unlocked@plt>:
   1108c:	add	ip, pc, #0, 12
   11090:	add	ip, ip, #24, 20	; 0x18000
   11094:	ldr	pc, [ip, #4012]!	; 0xfac

00011098 <memcmp@plt>:
   11098:	add	ip, pc, #0, 12
   1109c:	add	ip, ip, #24, 20	; 0x18000
   110a0:	ldr	pc, [ip, #4004]!	; 0xfa4

000110a4 <stpcpy@plt>:
   110a4:	add	ip, pc, #0, 12
   110a8:	add	ip, ip, #24, 20	; 0x18000
   110ac:	ldr	pc, [ip, #3996]!	; 0xf9c

000110b0 <dcgettext@plt>:
   110b0:	add	ip, pc, #0, 12
   110b4:	add	ip, ip, #24, 20	; 0x18000
   110b8:	ldr	pc, [ip, #3988]!	; 0xf94

000110bc <__stack_chk_fail@plt>:
   110bc:	add	ip, pc, #0, 12
   110c0:	add	ip, ip, #24, 20	; 0x18000
   110c4:	ldr	pc, [ip, #3980]!	; 0xf8c

000110c8 <realloc@plt>:
   110c8:	add	ip, pc, #0, 12
   110cc:	add	ip, ip, #24, 20	; 0x18000
   110d0:	ldr	pc, [ip, #3972]!	; 0xf84

000110d4 <textdomain@plt>:
   110d4:	add	ip, pc, #0, 12
   110d8:	add	ip, ip, #24, 20	; 0x18000
   110dc:	ldr	pc, [ip, #3964]!	; 0xf7c

000110e0 <iswprint@plt>:
   110e0:	add	ip, pc, #0, 12
   110e4:	add	ip, ip, #24, 20	; 0x18000
   110e8:	ldr	pc, [ip, #3956]!	; 0xf74

000110ec <fwrite@plt>:
   110ec:	add	ip, pc, #0, 12
   110f0:	add	ip, ip, #24, 20	; 0x18000
   110f4:	ldr	pc, [ip, #3948]!	; 0xf6c

000110f8 <lseek64@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #24, 20	; 0x18000
   11100:	ldr	pc, [ip, #3940]!	; 0xf64

00011104 <__ctype_get_mb_cur_max@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #24, 20	; 0x18000
   1110c:	ldr	pc, [ip, #3932]!	; 0xf5c

00011110 <strcpy@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #24, 20	; 0x18000
   11118:	ldr	pc, [ip, #3924]!	; 0xf54

0001111c <__fpending@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #24, 20	; 0x18000
   11124:	ldr	pc, [ip, #3916]!	; 0xf4c

00011128 <mbrtowc@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #24, 20	; 0x18000
   11130:	ldr	pc, [ip, #3908]!	; 0xf44

00011134 <error@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #24, 20	; 0x18000
   1113c:	ldr	pc, [ip, #3900]!	; 0xf3c

00011140 <open64@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #24, 20	; 0x18000
   11148:	ldr	pc, [ip, #3892]!	; 0xf34

0001114c <getenv@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #24, 20	; 0x18000
   11154:	ldr	pc, [ip, #3884]!	; 0xf2c

00011158 <malloc@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #24, 20	; 0x18000
   11160:	ldr	pc, [ip, #3876]!	; 0xf24

00011164 <__libc_start_main@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #24, 20	; 0x18000
   1116c:	ldr	pc, [ip, #3868]!	; 0xf1c

00011170 <__freading@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #24, 20	; 0x18000
   11178:	ldr	pc, [ip, #3860]!	; 0xf14

0001117c <__ctype_tolower_loc@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #24, 20	; 0x18000
   11184:	ldr	pc, [ip, #3852]!	; 0xf0c

00011188 <__ctype_toupper_loc@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #24, 20	; 0x18000
   11190:	ldr	pc, [ip, #3844]!	; 0xf04

00011194 <__gmon_start__@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #24, 20	; 0x18000
   1119c:	ldr	pc, [ip, #3836]!	; 0xefc

000111a0 <getopt_long@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #24, 20	; 0x18000
   111a8:	ldr	pc, [ip, #3828]!	; 0xef4

000111ac <__ctype_b_loc@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #24, 20	; 0x18000
   111b4:	ldr	pc, [ip, #3820]!	; 0xeec

000111b8 <exit@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #24, 20	; 0x18000
   111c0:	ldr	pc, [ip, #3812]!	; 0xee4

000111c4 <strlen@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #24, 20	; 0x18000
   111cc:	ldr	pc, [ip, #3804]!	; 0xedc

000111d0 <strchr@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #24, 20	; 0x18000
   111d8:	ldr	pc, [ip, #3796]!	; 0xed4

000111dc <ungetc@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #24, 20	; 0x18000
   111e4:	ldr	pc, [ip, #3788]!	; 0xecc

000111e8 <__errno_location@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #24, 20	; 0x18000
   111f0:	ldr	pc, [ip, #3780]!	; 0xec4

000111f4 <__sprintf_chk@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #24, 20	; 0x18000
   111fc:	ldr	pc, [ip, #3772]!	; 0xebc

00011200 <__cxa_atexit@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #24, 20	; 0x18000
   11208:	ldr	pc, [ip, #3764]!	; 0xeb4

0001120c <memset@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #24, 20	; 0x18000
   11214:	ldr	pc, [ip, #3756]!	; 0xeac

00011218 <fscanf@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #24, 20	; 0x18000
   11220:	ldr	pc, [ip, #3748]!	; 0xea4

00011224 <__printf_chk@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #24, 20	; 0x18000
   1122c:	ldr	pc, [ip, #3740]!	; 0xe9c

00011230 <fileno@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #24, 20	; 0x18000
   11238:	ldr	pc, [ip, #3732]!	; 0xe94

0001123c <__fprintf_chk@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #24, 20	; 0x18000
   11244:	ldr	pc, [ip, #3724]!	; 0xe8c

00011248 <fclose@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #24, 20	; 0x18000
   11250:	ldr	pc, [ip, #3716]!	; 0xe84

00011254 <fseeko64@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #24, 20	; 0x18000
   1125c:	ldr	pc, [ip, #3708]!	; 0xe7c

00011260 <__uflow@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #24, 20	; 0x18000
   11268:	ldr	pc, [ip, #3700]!	; 0xe74

0001126c <setlocale@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #24, 20	; 0x18000
   11274:	ldr	pc, [ip, #3692]!	; 0xe6c

00011278 <strrchr@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #24, 20	; 0x18000
   11280:	ldr	pc, [ip, #3684]!	; 0xe64

00011284 <nl_langinfo@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #24, 20	; 0x18000
   1128c:	ldr	pc, [ip, #3676]!	; 0xe5c

00011290 <bindtextdomain@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #24, 20	; 0x18000
   11298:	ldr	pc, [ip, #3668]!	; 0xe54

0001129c <strncmp@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #24, 20	; 0x18000
   112a4:	ldr	pc, [ip, #3660]!	; 0xe4c

000112a8 <abort@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #24, 20	; 0x18000
   112b0:	ldr	pc, [ip, #3652]!	; 0xe44

000112b4 <close@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #24, 20	; 0x18000
   112bc:	ldr	pc, [ip, #3644]!	; 0xe3c

000112c0 <__assert_fail@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #24, 20	; 0x18000
   112c8:	ldr	pc, [ip, #3636]!	; 0xe34

Disassembly of section .text:

000112cc <close_stdout@@Base-0x2b30>:
   112cc:	push	{r3, lr}
   112d0:	movw	r2, #731	; 0x2db
   112d4:	ldr	r3, [pc, #24]	; 112f4 <__assert_fail@plt+0x34>
   112d8:	ldr	r0, [pc, #24]	; 112f8 <__assert_fail@plt+0x38>
   112dc:	ldr	r1, [pc, #24]	; 112fc <__assert_fail@plt+0x3c>
   112e0:	add	r3, pc, r3
   112e4:	add	r0, pc, r0
   112e8:	add	r3, r3, #28
   112ec:	add	r1, pc, r1
   112f0:	bl	112c0 <__assert_fail@plt>
   112f4:	andeq	r6, r0, r8, lsr #15
   112f8:	andeq	r6, r0, r0, lsr #18
   112fc:	andeq	r6, r0, r4, lsr #17
   11300:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   11304:	mov	r7, r0
   11308:	mov	r9, r1
   1130c:	mov	r6, r2
   11310:	mov	r8, #1
   11314:	mvn	r4, #1
   11318:	mvn	r5, #0
   1131c:	strd	r4, [r0, #8]
   11320:	mov	r0, r7
   11324:	mov	r1, #0
   11328:	bl	12da0 <__assert_fail@plt+0x1ae0>
   1132c:	cmn	r0, #1
   11330:	strbne	r8, [r6, r0]
   11334:	bne	11320 <__assert_fail@plt+0x60>
   11338:	cmp	r9, #0
   1133c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   11340:	mov	r3, #0
   11344:	ldrb	r2, [r6, r3]
   11348:	eor	r2, r2, #1
   1134c:	strb	r2, [r6, r3]
   11350:	add	r3, r3, #1
   11354:	cmp	r3, #256	; 0x100
   11358:	bne	11344 <__assert_fail@plt+0x84>
   1135c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   11360:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11364:	mov	r5, #0
   11368:	ldr	r8, [pc, #452]	; 11534 <__assert_fail@plt+0x274>
   1136c:	sub	sp, sp, #12
   11370:	ldr	r7, [pc, #448]	; 11538 <__assert_fail@plt+0x278>
   11374:	mov	r9, r0
   11378:	ldr	sl, [pc, #444]	; 1153c <__assert_fail@plt+0x27c>
   1137c:	add	r8, pc, r8
   11380:	ldr	r3, [pc, #440]	; 11540 <__assert_fail@plt+0x280>
   11384:	add	r8, r8, #512	; 0x200
   11388:	ldr	fp, [pc, #436]	; 11544 <__assert_fail@plt+0x284>
   1138c:	add	r7, pc, r7
   11390:	add	sl, pc, sl
   11394:	add	r3, pc, r3
   11398:	mov	r0, r5
   1139c:	mvn	r6, #-2147483648	; 0x80000000
   113a0:	add	r3, r3, #512	; 0x200
   113a4:	add	fp, pc, fp
   113a8:	str	r3, [sp, #4]
   113ac:	cmp	r0, r5
   113b0:	bcc	113cc <__assert_fail@plt+0x10c>
   113b4:	mov	r0, r8
   113b8:	mov	r1, #8192	; 0x2000
   113bc:	blx	r9
   113c0:	subs	r5, r0, #0
   113c4:	beq	1152c <__assert_fail@plt+0x26c>
   113c8:	mov	r0, #0
   113cc:	cmn	r6, #-2147483647	; 0x80000001
   113d0:	bne	11504 <__assert_fail@plt+0x244>
   113d4:	ldr	r2, [pc, #364]	; 11548 <__assert_fail@plt+0x288>
   113d8:	mov	r4, r0
   113dc:	add	r2, pc, r2
   113e0:	cmp	r4, r5
   113e4:	add	r3, r2, #512	; 0x200
   113e8:	bcc	113f8 <__assert_fail@plt+0x138>
   113ec:	cmp	r4, r5
   113f0:	bne	11444 <__assert_fail@plt+0x184>
   113f4:	b	11414 <__assert_fail@plt+0x154>
   113f8:	ldrb	r3, [r4, r3]
   113fc:	add	r3, sl, r3
   11400:	ldrb	r3, [r3, #520]	; 0x208
   11404:	cmp	r3, #0
   11408:	bne	113ec <__assert_fail@plt+0x12c>
   1140c:	add	r4, r4, #2
   11410:	b	113e0 <__assert_fail@plt+0x120>
   11414:	ldr	r1, [pc, #304]	; 1154c <__assert_fail@plt+0x28c>
   11418:	sub	r3, r4, #1
   1141c:	ldr	r2, [pc, #300]	; 11550 <__assert_fail@plt+0x290>
   11420:	add	r1, pc, r1
   11424:	add	r1, r1, r3
   11428:	add	r2, pc, r2
   1142c:	ldrb	r1, [r1, #512]	; 0x200
   11430:	add	r2, r2, r1
   11434:	ldrb	r2, [r2, #520]	; 0x208
   11438:	cmp	r2, #0
   1143c:	beq	1144c <__assert_fail@plt+0x18c>
   11440:	mov	r4, r3
   11444:	cmp	r4, r5
   11448:	bcc	11454 <__assert_fail@plt+0x194>
   1144c:	rsb	ip, r0, r5
   11450:	b	11484 <__assert_fail@plt+0x1c4>
   11454:	ldr	r2, [pc, #248]	; 11554 <__assert_fail@plt+0x294>
   11458:	cmp	r4, #0
   1145c:	rsb	r3, r0, r4
   11460:	add	r2, pc, r2
   11464:	add	ip, r3, #1
   11468:	add	r2, r2, r4
   1146c:	ldrb	r6, [r2, #512]	; 0x200
   11470:	beq	11480 <__assert_fail@plt+0x1c0>
   11474:	ldrb	r2, [r2, #511]	; 0x1ff
   11478:	cmp	r2, r6
   1147c:	moveq	ip, r3
   11480:	add	r4, r4, #1
   11484:	cmp	ip, #0
   11488:	beq	114f0 <__assert_fail@plt+0x230>
   1148c:	ldr	r3, [pc, #196]	; 11558 <__assert_fail@plt+0x298>
   11490:	mov	r1, #1
   11494:	ldr	r2, [sp, #4]
   11498:	ldr	r3, [fp, r3]
   1149c:	add	r0, r2, r0
   114a0:	mov	r2, ip
   114a4:	ldr	r3, [r3]
   114a8:	str	ip, [sp]
   114ac:	bl	1108c <fwrite_unlocked@plt>
   114b0:	ldr	ip, [sp]
   114b4:	cmp	r0, ip
   114b8:	beq	114f0 <__assert_fail@plt+0x230>
   114bc:	bl	111e8 <__errno_location@plt>
   114c0:	ldr	r1, [pc, #148]	; 1155c <__assert_fail@plt+0x29c>
   114c4:	mov	r2, #5
   114c8:	add	r1, pc, r1
   114cc:	ldr	r3, [r0]
   114d0:	mov	r0, #0
   114d4:	str	r3, [sp]
   114d8:	bl	110b0 <dcgettext@plt>
   114dc:	ldr	r3, [sp]
   114e0:	mov	r1, r3
   114e4:	mov	r2, r0
   114e8:	mov	r0, #1
   114ec:	bl	11134 <error@plt>
   114f0:	cmn	r6, #-2147483647	; 0x80000001
   114f4:	bne	11500 <__assert_fail@plt+0x240>
   114f8:	mov	r0, r4
   114fc:	b	113ac <__assert_fail@plt+0xec>
   11500:	mov	r0, r4
   11504:	mov	r4, r0
   11508:	cmp	r4, r5
   1150c:	add	r3, r7, #512	; 0x200
   11510:	bcs	114f8 <__assert_fail@plt+0x238>
   11514:	ldrb	r3, [r4, r3]
   11518:	cmp	r3, r6
   1151c:	addeq	r4, r4, #1
   11520:	beq	11508 <__assert_fail@plt+0x248>
   11524:	mvn	r6, #-2147483648	; 0x80000000
   11528:	b	114f8 <__assert_fail@plt+0x238>
   1152c:	add	sp, sp, #12
   11530:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11534:	andeq	r8, r1, r8, lsl #28
   11538:	strdeq	r8, [r1], -r8	; <UNPREDICTABLE>
   1153c:	andeq	sl, r1, ip, ror #27
   11540:	strdeq	r8, [r1], -r0
   11544:	andeq	r8, r1, r4, asr ip
   11548:	andeq	r8, r1, r8, lsr #27
   1154c:	andeq	r8, r1, r4, ror #26
   11550:	andeq	sl, r1, r4, asr sp
   11554:	andeq	r8, r1, r4, lsr #26
   11558:	andeq	r0, r0, r4, lsr #2
   1155c:	andeq	r6, r0, r8, lsl #18
   11560:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11564:	sub	sp, sp, #428	; 0x1ac
   11568:	ldr	fp, [pc, #3916]	; 124bc <__assert_fail@plt+0x11fc>
   1156c:	mov	r5, r0
   11570:	ldr	r3, [pc, #3912]	; 124c0 <__assert_fail@plt+0x1200>
   11574:	mov	r4, r1
   11578:	add	fp, pc, fp
   1157c:	ldr	r8, [pc, #3904]	; 124c4 <__assert_fail@plt+0x1204>
   11580:	ldr	r9, [pc, #3904]	; 124c8 <__assert_fail@plt+0x1208>
   11584:	ldr	r3, [fp, r3]
   11588:	add	r8, pc, r8
   1158c:	ldr	r0, [r1]
   11590:	add	r9, pc, r9
   11594:	str	r8, [sp, #16]
   11598:	ldr	r3, [r3]
   1159c:	str	r9, [sp, #28]
   115a0:	ldr	r6, [pc, #3876]	; 124cc <__assert_fail@plt+0x120c>
   115a4:	str	r3, [sp, #420]	; 0x1a4
   115a8:	bl	13ff8 <close_stdout@@Base+0x1fc>
   115ac:	ldr	r1, [pc, #3868]	; 124d0 <__assert_fail@plt+0x1210>
   115b0:	mov	r0, #6
   115b4:	add	r6, pc, r6
   115b8:	ldr	r7, [pc, #3860]	; 124d4 <__assert_fail@plt+0x1214>
   115bc:	add	r1, pc, r1
   115c0:	ldr	sl, [pc, #3856]	; 124d8 <__assert_fail@plt+0x1218>
   115c4:	bl	1126c <setlocale@plt>
   115c8:	ldr	r1, [pc, #3852]	; 124dc <__assert_fail@plt+0x121c>
   115cc:	mov	r0, r6
   115d0:	ldr	r8, [pc, #3848]	; 124e0 <__assert_fail@plt+0x1220>
   115d4:	add	r1, pc, r1
   115d8:	add	r7, pc, r7
   115dc:	bl	11290 <bindtextdomain@plt>
   115e0:	mov	r0, r6
   115e4:	bl	110d4 <textdomain@plt>
   115e8:	ldr	r3, [pc, #3828]	; 124e4 <__assert_fail@plt+0x1224>
   115ec:	ldr	r6, [pc, #3828]	; 124e8 <__assert_fail@plt+0x1228>
   115f0:	add	sl, pc, sl
   115f4:	add	r8, pc, r8
   115f8:	ldr	r0, [fp, r3]
   115fc:	add	r6, pc, r6
   11600:	bl	17a54 <close_stdout@@Base+0x3c58>
   11604:	add	r6, r6, #48	; 0x30
   11608:	mov	r9, #0
   1160c:	mov	r0, r5
   11610:	str	r9, [sp]
   11614:	mov	r1, r4
   11618:	mov	r2, r7
   1161c:	mov	r3, r6
   11620:	bl	111a0 <getopt_long@plt>
   11624:	cmn	r0, #1
   11628:	beq	116f0 <__assert_fail@plt+0x430>
   1162c:	cmp	r0, #99	; 0x63
   11630:	beq	116c0 <__assert_fail@plt+0x400>
   11634:	ble	11658 <__assert_fail@plt+0x398>
   11638:	cmp	r0, #115	; 0x73
   1163c:	beq	116d0 <__assert_fail@plt+0x410>
   11640:	cmp	r0, #116	; 0x74
   11644:	beq	116b0 <__assert_fail@plt+0x3f0>
   11648:	cmp	r0, #100	; 0x64
   1164c:	beq	116e4 <__assert_fail@plt+0x424>
   11650:	mov	r0, #1
   11654:	bl	13b78 <__assert_fail@plt+0x28b8>
   11658:	cmn	r0, #2
   1165c:	beq	116dc <__assert_fail@plt+0x41c>
   11660:	cmp	r0, #67	; 0x43
   11664:	beq	116c0 <__assert_fail@plt+0x400>
   11668:	cmn	r0, #3
   1166c:	bne	11650 <__assert_fail@plt+0x390>
   11670:	ldr	r1, [pc, #3700]	; 124ec <__assert_fail@plt+0x122c>
   11674:	ldr	r3, [pc, #3700]	; 124f0 <__assert_fail@plt+0x1230>
   11678:	ldr	r2, [pc, #3700]	; 124f4 <__assert_fail@plt+0x1234>
   1167c:	ldr	r0, [fp, r1]
   11680:	ldr	r3, [fp, r3]
   11684:	add	r2, pc, r2
   11688:	ldr	r1, [pc, #3688]	; 124f8 <__assert_fail@plt+0x1238>
   1168c:	ldr	r0, [r0]
   11690:	ldr	r3, [r3]
   11694:	add	r1, pc, r1
   11698:	stm	sp, {r2, r9}
   1169c:	ldr	r2, [pc, #3672]	; 124fc <__assert_fail@plt+0x123c>
   116a0:	add	r2, pc, r2
   116a4:	bl	15d44 <close_stdout@@Base+0x1f48>
   116a8:	mov	r0, r9
   116ac:	bl	111b8 <exit@plt>
   116b0:	ldr	r9, [sp, #28]
   116b4:	mov	r3, #1
   116b8:	strb	r3, [r9, #779]	; 0x30b
   116bc:	b	11608 <__assert_fail@plt+0x348>
   116c0:	ldr	ip, [sp, #16]
   116c4:	mov	r3, #1
   116c8:	strb	r3, [ip, #776]	; 0x308
   116cc:	b	11608 <__assert_fail@plt+0x348>
   116d0:	mov	r3, #1
   116d4:	strb	r3, [sl, #778]	; 0x30a
   116d8:	b	11608 <__assert_fail@plt+0x348>
   116dc:	mov	r0, r9
   116e0:	bl	13b78 <__assert_fail@plt+0x28b8>
   116e4:	mov	r3, #1
   116e8:	strb	r3, [r8, #777]	; 0x309
   116ec:	b	11608 <__assert_fail@plt+0x348>
   116f0:	ldr	r3, [pc, #3592]	; 12500 <__assert_fail@plt+0x1240>
   116f4:	ldr	r8, [fp, r3]
   116f8:	ldr	r6, [r8]
   116fc:	rsb	r6, r6, r5
   11700:	cmp	r6, #2
   11704:	movne	ip, r9
   11708:	beq	117f8 <__assert_fail@plt+0x538>
   1170c:	ldr	r7, [pc, #3568]	; 12504 <__assert_fail@plt+0x1244>
   11710:	and	ip, ip, #1
   11714:	add	r7, pc, r7
   11718:	ldrb	r3, [r7, #778]	; 0x30a
   1171c:	ldrb	r2, [r7, #777]	; 0x309
   11720:	strb	ip, [r7, #780]	; 0x30c
   11724:	cmp	r2, r3
   11728:	movne	r3, #1
   1172c:	moveq	r3, #2
   11730:	movgt	r9, #1
   11734:	movle	r9, #2
   11738:	cmp	r3, r6
   1173c:	bgt	117c8 <__assert_fail@plt+0x508>
   11740:	cmp	r9, r6
   11744:	bge	1180c <__assert_fail@plt+0x54c>
   11748:	ldr	r1, [pc, #3512]	; 12508 <__assert_fail@plt+0x1248>
   1174c:	mov	r2, #5
   11750:	mov	r0, #0
   11754:	add	r1, pc, r1
   11758:	bl	110b0 <dcgettext@plt>
   1175c:	ldr	r3, [r8]
   11760:	add	r9, r9, r3
   11764:	mov	r5, r0
   11768:	ldr	r0, [r4, r9, lsl #2]
   1176c:	bl	15848 <close_stdout@@Base+0x1a4c>
   11770:	mov	r2, r5
   11774:	mov	r3, r0
   11778:	mov	r0, #0
   1177c:	mov	r1, r0
   11780:	bl	11134 <error@plt>
   11784:	cmp	r6, #2
   11788:	bne	11650 <__assert_fail@plt+0x390>
   1178c:	ldr	r3, [pc, #3448]	; 1250c <__assert_fail@plt+0x124c>
   11790:	mov	r2, #5
   11794:	ldr	r1, [pc, #3444]	; 12510 <__assert_fail@plt+0x1250>
   11798:	mov	r0, #0
   1179c:	ldr	r3, [fp, r3]
   117a0:	add	r1, pc, r1
   117a4:	ldr	r4, [r3]
   117a8:	bl	110b0 <dcgettext@plt>
   117ac:	ldr	r2, [pc, #3424]	; 12514 <__assert_fail@plt+0x1254>
   117b0:	mov	r1, #1
   117b4:	add	r2, pc, r2
   117b8:	mov	r3, r0
   117bc:	mov	r0, r4
   117c0:	bl	1123c <__fprintf_chk@plt>
   117c4:	b	11650 <__assert_fail@plt+0x390>
   117c8:	cmp	r6, #0
   117cc:	bne	11b00 <__assert_fail@plt+0x840>
   117d0:	ldr	r1, [pc, #3392]	; 12518 <__assert_fail@plt+0x1258>
   117d4:	mov	r0, r6
   117d8:	mov	r2, #5
   117dc:	add	r1, pc, r1
   117e0:	bl	110b0 <dcgettext@plt>
   117e4:	mov	r1, r6
   117e8:	mov	r2, r0
   117ec:	mov	r0, r6
   117f0:	bl	11134 <error@plt>
   117f4:	b	11650 <__assert_fail@plt+0x390>
   117f8:	ldr	r3, [pc, #3356]	; 1251c <__assert_fail@plt+0x125c>
   117fc:	add	r3, pc, r3
   11800:	ldrb	ip, [r3, #777]	; 0x309
   11804:	eor	ip, ip, #1
   11808:	b	1170c <__assert_fail@plt+0x44c>
   1180c:	mov	r0, #24
   11810:	add	r5, sp, #424	; 0x1a8
   11814:	bl	15e54 <close_stdout@@Base+0x2058>
   11818:	ldr	r3, [r8]
   1181c:	mov	r7, #0
   11820:	str	r0, [r5, #-344]!	; 0xfffffea8
   11824:	mov	r1, r5
   11828:	str	r0, [sp, #84]	; 0x54
   1182c:	str	r7, [r0, #4]
   11830:	ldr	r0, [r4, r3, lsl #2]
   11834:	bl	13254 <__assert_fail@plt+0x1f94>
   11838:	cmp	r0, r7
   1183c:	beq	11e88 <__assert_fail@plt+0xbc8>
   11840:	cmp	r6, #2
   11844:	beq	12040 <__assert_fail@plt+0xd80>
   11848:	mov	r0, r5
   1184c:	bl	12b94 <__assert_fail@plt+0x18d4>
   11850:	ldr	r3, [pc, #3272]	; 12520 <__assert_fail@plt+0x1260>
   11854:	add	r3, pc, r3
   11858:	ldrb	r3, [r3, #776]	; 0x308
   1185c:	cmp	r3, #0
   11860:	bne	11fc4 <__assert_fail@plt+0xd04>
   11864:	ldr	r3, [sp, #104]	; 0x68
   11868:	cmp	r3, #0
   1186c:	bne	1207c <__assert_fail@plt+0xdbc>
   11870:	cmp	r7, #0
   11874:	beq	11c40 <__assert_fail@plt+0x980>
   11878:	add	ip, sp, #424	; 0x1a8
   1187c:	movw	r3, #65208	; 0xfeb8
   11880:	movt	r3, #65535	; 0xffff
   11884:	mov	r0, r7
   11888:	ldrd	r8, [ip, r3]
   1188c:	bl	12b94 <__assert_fail@plt+0x18d4>
   11890:	ldrd	r2, [r7, #16]
   11894:	ldr	r1, [r7, #24]
   11898:	cmp	r9, r3
   1189c:	cmpeq	r8, r2
   118a0:	bcc	118c4 <__assert_fail@plt+0x604>
   118a4:	cmp	r1, #1
   118a8:	bne	118c4 <__assert_fail@plt+0x604>
   118ac:	ldr	r1, [r7, #28]
   118b0:	subs	r2, r8, r2
   118b4:	sbc	r3, r9, r3
   118b8:	strd	r2, [r1, #16]
   118bc:	ldr	r1, [r7, #24]
   118c0:	strd	r8, [r7, #16]
   118c4:	cmp	r1, #1
   118c8:	bls	118f0 <__assert_fail@plt+0x630>
   118cc:	ldr	r1, [pc, #3152]	; 12524 <__assert_fail@plt+0x1264>
   118d0:	mov	r2, #5
   118d4:	mov	r0, #0
   118d8:	add	r1, pc, r1
   118dc:	bl	110b0 <dcgettext@plt>
   118e0:	mov	r1, #0
   118e4:	mov	r2, r0
   118e8:	mov	r0, #1
   118ec:	bl	11134 <error@plt>
   118f0:	ldr	r3, [pc, #3120]	; 12528 <__assert_fail@plt+0x1268>
   118f4:	add	r3, pc, r3
   118f8:	ldrb	r4, [r3, #780]	; 0x30c
   118fc:	cmp	r4, #0
   11900:	beq	11eb4 <__assert_fail@plt+0xbf4>
   11904:	ldrb	r3, [r7, #32]
   11908:	cmp	r3, #0
   1190c:	bne	121f0 <__assert_fail@plt+0xf30>
   11910:	ldrb	r3, [r7, #34]	; 0x22
   11914:	cmp	r3, #0
   11918:	bne	122cc <__assert_fail@plt+0x100c>
   1191c:	ldrd	r8, [r7, #16]
   11920:	movw	r3, #65208	; 0xfeb8
   11924:	movt	r3, #65535	; 0xffff
   11928:	ldrb	r2, [r7, #33]	; 0x21
   1192c:	ldr	ip, [r7, #4]
   11930:	strd	r8, [sp, #32]
   11934:	cmp	r2, #0
   11938:	ldr	r9, [sp, #84]	; 0x54
   1193c:	str	ip, [sp, #56]	; 0x38
   11940:	str	r9, [sp, #52]	; 0x34
   11944:	add	r9, sp, #424	; 0x1a8
   11948:	ldrd	r8, [r9, r3]
   1194c:	ldrd	r2, [sp, #32]
   11950:	strd	r8, [sp, #40]	; 0x28
   11954:	beq	11ee8 <__assert_fail@plt+0xc28>
   11958:	bl	111ac <__ctype_b_loc@plt>
   1195c:	mov	r3, #0
   11960:	mov	r9, r3
   11964:	mov	sl, r3
   11968:	ldr	r1, [r0]
   1196c:	ldrh	r2, [r1, r3]
   11970:	add	r3, r3, #2
   11974:	tst	r2, #256	; 0x100
   11978:	addne	sl, sl, #1
   1197c:	tst	r2, #512	; 0x200
   11980:	addne	r9, r9, #1
   11984:	cmp	r3, #512	; 0x200
   11988:	bne	1196c <__assert_fail@plt+0x6ac>
   1198c:	movw	r1, #65200	; 0xfeb0
   11990:	ldr	r3, [pc, #2964]	; 1252c <__assert_fail@plt+0x126c>
   11994:	movt	r1, #65535	; 0xffff
   11998:	add	r0, sp, #424	; 0x1a8
   1199c:	mov	ip, #1
   119a0:	add	r3, pc, r3
   119a4:	add	r4, sp, #72	; 0x48
   119a8:	add	r8, sp, #76	; 0x4c
   119ac:	mvn	r2, #1
   119b0:	str	r3, [sp, #60]	; 0x3c
   119b4:	str	r4, [sp, #16]
   119b8:	mvn	r3, #0
   119bc:	str	r8, [sp, #28]
   119c0:	mov	r4, ip
   119c4:	str	sl, [sp, #48]	; 0x30
   119c8:	add	r8, sp, #92	; 0x5c
   119cc:	mov	sl, r5
   119d0:	strd	r2, [r0, r1]
   119d4:	strd	r2, [r7, #8]
   119d8:	mov	r5, ip
   119dc:	str	r6, [sp, #64]	; 0x40
   119e0:	str	fp, [sp, #68]	; 0x44
   119e4:	b	11ac4 <__assert_fail@plt+0x804>
   119e8:	ldr	r3, [sp, #76]	; 0x4c
   119ec:	cmp	r3, #2
   119f0:	beq	11a88 <__assert_fail@plt+0x7c8>
   119f4:	cmp	r5, #0
   119f8:	beq	11e90 <__assert_fail@plt+0xbd0>
   119fc:	ldr	r2, [sp, #72]	; 0x48
   11a00:	cmp	r2, #2
   11a04:	beq	11e90 <__assert_fail@plt+0xbd0>
   11a08:	ldr	r0, [sp, #84]	; 0x54
   11a0c:	cmp	r2, #1
   11a10:	ldr	r2, [r7, #4]
   11a14:	add	ip, sp, #424	; 0x1a8
   11a18:	movw	r1, #65208	; 0xfeb8
   11a1c:	movt	r1, #65535	; 0xffff
   11a20:	ldr	r0, [r0, #4]
   11a24:	mvn	r4, #0
   11a28:	mvn	r5, #0
   11a2c:	strd	r4, [sp, #88]	; 0x58
   11a30:	str	r0, [sp, #84]	; 0x54
   11a34:	add	r0, sp, #424	; 0x1a8
   11a38:	ldr	r2, [r2, #4]
   11a3c:	strd	r4, [r7, #8]
   11a40:	ldrd	r4, [ip, r1]
   11a44:	movw	r1, #65208	; 0xfeb8
   11a48:	ldreq	ip, [sp, #48]	; 0x30
   11a4c:	movt	r1, #65535	; 0xffff
   11a50:	str	r2, [r7, #4]
   11a54:	subne	r2, r9, #1
   11a58:	subeq	r2, ip, #1
   11a5c:	subs	r4, r4, r2
   11a60:	sbc	r5, r5, #0
   11a64:	cmp	r3, #1
   11a68:	strd	r4, [r0, r1]
   11a6c:	subne	r1, r9, #1
   11a70:	ldreq	r4, [sp, #48]	; 0x30
   11a74:	ldrd	r2, [r7, #16]
   11a78:	subeq	r1, r4, #1
   11a7c:	subs	r2, r2, r1
   11a80:	sbc	r3, r3, #0
   11a84:	strd	r2, [r7, #16]
   11a88:	ldr	r5, [sp, #88]	; 0x58
   11a8c:	ldr	r2, [r8]
   11a90:	ldr	r4, [r7, #8]
   11a94:	and	r5, r5, r2
   11a98:	ldr	r3, [r7, #12]
   11a9c:	cmn	r5, #1
   11aa0:	and	r4, r4, r3
   11aa4:	movne	r5, #0
   11aa8:	moveq	r5, #1
   11aac:	cmn	r4, #1
   11ab0:	movne	r4, #0
   11ab4:	moveq	r4, #1
   11ab8:	cmn	r6, #1
   11abc:	cmnne	fp, #1
   11ac0:	beq	1217c <__assert_fail@plt+0xebc>
   11ac4:	ldr	r1, [sp, #16]
   11ac8:	mov	r0, sl
   11acc:	bl	12da0 <__assert_fail@plt+0x1ae0>
   11ad0:	ldr	r1, [sp, #28]
   11ad4:	mov	r6, r0
   11ad8:	mov	r0, r7
   11adc:	bl	12da0 <__assert_fail@plt+0x1ae0>
   11ae0:	cmp	r4, #0
   11ae4:	mov	fp, r0
   11ae8:	bne	119e8 <__assert_fail@plt+0x728>
   11aec:	ldr	r3, [sp, #76]	; 0x4c
   11af0:	cmp	r3, #2
   11af4:	beq	11a88 <__assert_fail@plt+0x7c8>
   11af8:	ldr	r2, [sp, #72]	; 0x48
   11afc:	b	11a08 <__assert_fail@plt+0x748>
   11b00:	ldr	r1, [pc, #2600]	; 12530 <__assert_fail@plt+0x1270>
   11b04:	mov	r2, #5
   11b08:	mov	r0, #0
   11b0c:	sub	r5, r5, #-1073741823	; 0xc0000001
   11b10:	add	r1, pc, r1
   11b14:	bl	110b0 <dcgettext@plt>
   11b18:	mov	r6, r0
   11b1c:	ldr	r0, [r4, r5, lsl #2]
   11b20:	bl	15848 <close_stdout@@Base+0x1a4c>
   11b24:	mov	r2, r6
   11b28:	mov	r3, r0
   11b2c:	mov	r0, #0
   11b30:	mov	r1, r0
   11b34:	bl	11134 <error@plt>
   11b38:	ldr	r3, [pc, #2508]	; 1250c <__assert_fail@plt+0x124c>
   11b3c:	ldrb	r2, [r7, #778]	; 0x30a
   11b40:	ldr	r3, [fp, r3]
   11b44:	cmp	r2, #0
   11b48:	ldr	r4, [r3]
   11b4c:	beq	11e7c <__assert_fail@plt+0xbbc>
   11b50:	ldr	r1, [pc, #2524]	; 12534 <__assert_fail@plt+0x1274>
   11b54:	add	r1, pc, r1
   11b58:	mov	r2, #5
   11b5c:	mov	r0, #0
   11b60:	bl	110b0 <dcgettext@plt>
   11b64:	ldr	r2, [pc, #2508]	; 12538 <__assert_fail@plt+0x1278>
   11b68:	mov	r1, #1
   11b6c:	add	r2, pc, r2
   11b70:	mov	r3, r0
   11b74:	mov	r0, r4
   11b78:	bl	1123c <__fprintf_chk@plt>
   11b7c:	b	11650 <__assert_fail@plt+0x390>
   11b80:	ldrb	r4, [r1, #8]
   11b84:	ldrd	r2, [sp, #32]
   11b88:	mov	r0, #24
   11b8c:	ldrd	r8, [sp, #16]
   11b90:	subs	r8, r8, r2
   11b94:	sbc	r9, r9, r3
   11b98:	bl	15e54 <close_stdout@@Base+0x2058>
   11b9c:	ldr	ip, [r7, #4]
   11ba0:	mov	r1, #0
   11ba4:	mov	r3, #4
   11ba8:	cmp	ip, r1
   11bac:	strd	r8, [r0, #16]
   11bb0:	strb	r4, [r0, #8]
   11bb4:	str	r1, [r0, #4]
   11bb8:	str	r3, [r0]
   11bbc:	beq	1244c <__assert_fail@plt+0x118c>
   11bc0:	movw	r3, #65208	; 0xfeb8
   11bc4:	add	r4, sp, #424	; 0x1a8
   11bc8:	movt	r3, #65535	; 0xffff
   11bcc:	str	r0, [ip, #4]
   11bd0:	str	r0, [r7, #4]
   11bd4:	ldrd	r2, [r3, r4]
   11bd8:	strd	r2, [r7, #16]
   11bdc:	ldr	r3, [pc, #2392]	; 1253c <__assert_fail@plt+0x127c>
   11be0:	add	r3, pc, r3
   11be4:	ldrb	r3, [r3, #776]	; 0x308
   11be8:	cmp	r3, #0
   11bec:	beq	11c40 <__assert_fail@plt+0x980>
   11bf0:	ldrb	r3, [sp, #113]	; 0x71
   11bf4:	cmp	r3, #0
   11bf8:	beq	11c40 <__assert_fail@plt+0x980>
   11bfc:	movw	r1, #65208	; 0xfeb8
   11c00:	add	r8, sp, #424	; 0x1a8
   11c04:	movt	r1, #65535	; 0xffff
   11c08:	ldrd	r2, [r7, #16]
   11c0c:	ldrd	r0, [r1, r8]
   11c10:	cmp	r3, r1
   11c14:	cmpeq	r2, r0
   11c18:	beq	123dc <__assert_fail@plt+0x111c>
   11c1c:	ldr	r1, [pc, #2332]	; 12540 <__assert_fail@plt+0x1280>
   11c20:	mov	r2, #5
   11c24:	mov	r0, #0
   11c28:	add	r1, pc, r1
   11c2c:	bl	110b0 <dcgettext@plt>
   11c30:	mov	r1, #0
   11c34:	mov	r2, r0
   11c38:	mov	r0, #1
   11c3c:	bl	11134 <error@plt>
   11c40:	ldr	r3, [pc, #2300]	; 12544 <__assert_fail@plt+0x1284>
   11c44:	mov	r1, #2
   11c48:	ldr	r4, [pc, #2296]	; 12548 <__assert_fail@plt+0x1288>
   11c4c:	ldr	r3, [fp, r3]
   11c50:	add	r4, pc, r4
   11c54:	ldr	r0, [r3]
   11c58:	bl	13fbc <close_stdout@@Base+0x1c0>
   11c5c:	ldrb	r3, [r4, #778]	; 0x30a
   11c60:	cmp	r3, #0
   11c64:	beq	11cc4 <__assert_fail@plt+0xa04>
   11c68:	cmp	r6, #1
   11c6c:	beq	12314 <__assert_fail@plt+0x1054>
   11c70:	ldrb	r3, [r4, #777]	; 0x309
   11c74:	cmp	r3, #0
   11c78:	beq	11cd8 <__assert_fail@plt+0xa18>
   11c7c:	ldr	r2, [pc, #2248]	; 1254c <__assert_fail@plt+0x128c>
   11c80:	mov	r0, r5
   11c84:	ldrb	r1, [r4, #776]	; 0x308
   11c88:	add	r2, pc, r2
   11c8c:	bl	11300 <__assert_fail@plt+0x40>
   11c90:	mov	r0, r7
   11c94:	add	r2, r4, #520	; 0x208
   11c98:	mov	r1, #0
   11c9c:	bl	11300 <__assert_fail@plt+0x40>
   11ca0:	ldr	r0, [pc, #2216]	; 12550 <__assert_fail@plt+0x1290>
   11ca4:	add	r0, pc, r0
   11ca8:	bl	11360 <__assert_fail@plt+0xa0>
   11cac:	mov	r0, #0
   11cb0:	bl	112b4 <close@plt>
   11cb4:	cmp	r0, #0
   11cb8:	bne	1214c <__assert_fail@plt+0xe8c>
   11cbc:	mov	r0, #0
   11cc0:	bl	111b8 <exit@plt>
   11cc4:	ldrb	r3, [r4, #777]	; 0x309
   11cc8:	cmp	r3, #0
   11ccc:	beq	11cd8 <__assert_fail@plt+0xa18>
   11cd0:	cmp	r6, #1
   11cd4:	beq	12334 <__assert_fail@plt+0x1074>
   11cd8:	ldr	r3, [pc, #2164]	; 12554 <__assert_fail@plt+0x1294>
   11cdc:	add	r3, pc, r3
   11ce0:	ldrb	r2, [r3, #780]	; 0x30c
   11ce4:	cmp	r2, #0
   11ce8:	beq	11cac <__assert_fail@plt+0x9ec>
   11cec:	ldrb	r3, [r3, #776]	; 0x308
   11cf0:	cmp	r3, #0
   11cf4:	bne	12218 <__assert_fail@plt+0xf58>
   11cf8:	ldr	r1, [pc, #2136]	; 12558 <__assert_fail@plt+0x1298>
   11cfc:	add	r1, pc, r1
   11d00:	add	r2, r1, #256	; 0x100
   11d04:	strb	r3, [r3, r2]
   11d08:	add	r3, r3, #1
   11d0c:	cmp	r3, #256	; 0x100
   11d10:	bne	11d00 <__assert_fail@plt+0xa40>
   11d14:	ldr	r9, [pc, #2112]	; 1255c <__assert_fail@plt+0x129c>
   11d18:	movw	r1, #65200	; 0xfeb0
   11d1c:	ldr	r8, [pc, #2108]	; 12560 <__assert_fail@plt+0x12a0>
   11d20:	movt	r1, #65535	; 0xffff
   11d24:	ldr	r6, [pc, #2104]	; 12564 <__assert_fail@plt+0x12a4>
   11d28:	add	r4, sp, #424	; 0x1a8
   11d2c:	add	r9, pc, r9
   11d30:	add	r8, pc, r8
   11d34:	add	r6, pc, r6
   11d38:	add	r3, sp, #76	; 0x4c
   11d3c:	mvn	r2, #1
   11d40:	add	ip, sp, #72	; 0x48
   11d44:	str	r3, [sp, #28]
   11d48:	mvn	r3, #0
   11d4c:	str	ip, [sp, #16]
   11d50:	strd	r2, [r4, r1]
   11d54:	strd	r2, [r7, #8]
   11d58:	ldr	r1, [sp, #16]
   11d5c:	mov	r0, r5
   11d60:	bl	12da0 <__assert_fail@plt+0x1ae0>
   11d64:	ldr	r1, [sp, #28]
   11d68:	mov	r4, r0
   11d6c:	mov	r0, r7
   11d70:	bl	12da0 <__assert_fail@plt+0x1ae0>
   11d74:	ldr	sl, [sp, #72]	; 0x48
   11d78:	cmp	sl, #0
   11d7c:	bne	11de4 <__assert_fail@plt+0xb24>
   11d80:	ldr	r2, [sp, #76]	; 0x4c
   11d84:	cmp	r2, #1
   11d88:	beq	11e40 <__assert_fail@plt+0xb80>
   11d8c:	cmn	r0, #1
   11d90:	cmnne	r4, #1
   11d94:	beq	120a4 <__assert_fail@plt+0xde4>
   11d98:	ldr	r2, [sp, #76]	; 0x4c
   11d9c:	add	ip, r9, r4
   11da0:	cmp	r2, #2
   11da4:	strb	r0, [ip, #256]	; 0x100
   11da8:	beq	11d58 <__assert_fail@plt+0xa98>
   11dac:	ldr	r1, [sp, #84]	; 0x54
   11db0:	movw	r3, #65200	; 0xfeb0
   11db4:	ldr	r2, [r7, #4]
   11db8:	movt	r3, #65535	; 0xffff
   11dbc:	add	r4, sp, #424	; 0x1a8
   11dc0:	mvn	r0, #0
   11dc4:	ldr	lr, [r1, #4]
   11dc8:	mvn	r1, #0
   11dcc:	strd	r0, [r4, r3]
   11dd0:	str	lr, [sp, #84]	; 0x54
   11dd4:	ldr	r3, [r2, #4]
   11dd8:	strd	r0, [r7, #8]
   11ddc:	str	r3, [r7, #4]
   11de0:	b	11d58 <__assert_fail@plt+0xa98>
   11de4:	cmp	sl, #1
   11de8:	bne	11d8c <__assert_fail@plt+0xacc>
   11dec:	ldr	r2, [sp, #76]	; 0x4c
   11df0:	cmp	r2, #0
   11df4:	bne	11d8c <__assert_fail@plt+0xacc>
   11df8:	str	r2, [sp, #12]
   11dfc:	bl	111ac <__ctype_b_loc@plt>
   11e00:	ldr	r2, [sp, #12]
   11e04:	mov	sl, r2
   11e08:	ldr	r2, [r0]
   11e0c:	sub	r4, r2, #2
   11e10:	ldrh	r1, [r4, #2]!
   11e14:	tst	r1, #256	; 0x100
   11e18:	beq	11e30 <__assert_fail@plt+0xb70>
   11e1c:	bl	1117c <__ctype_tolower_loc@plt>
   11e20:	add	r1, r8, #256	; 0x100
   11e24:	ldr	r0, [r0]
   11e28:	ldr	r0, [r0, sl, lsl #2]
   11e2c:	strb	r0, [sl, r1]
   11e30:	add	sl, sl, #1
   11e34:	cmp	sl, #256	; 0x100
   11e38:	bne	11e10 <__assert_fail@plt+0xb50>
   11e3c:	b	11dac <__assert_fail@plt+0xaec>
   11e40:	bl	111ac <__ctype_b_loc@plt>
   11e44:	ldr	r2, [r0]
   11e48:	sub	r4, r2, #2
   11e4c:	ldrh	r1, [r4, #2]!
   11e50:	tst	r1, #512	; 0x200
   11e54:	beq	11e6c <__assert_fail@plt+0xbac>
   11e58:	bl	11188 <__ctype_toupper_loc@plt>
   11e5c:	add	r1, r6, #256	; 0x100
   11e60:	ldr	r0, [r0]
   11e64:	ldr	r0, [r0, sl, lsl #2]
   11e68:	strb	r0, [sl, r1]
   11e6c:	add	sl, sl, #1
   11e70:	cmp	sl, #256	; 0x100
   11e74:	bne	11e4c <__assert_fail@plt+0xb8c>
   11e78:	b	11dac <__assert_fail@plt+0xaec>
   11e7c:	ldr	r1, [pc, #1764]	; 12568 <__assert_fail@plt+0x12a8>
   11e80:	add	r1, pc, r1
   11e84:	b	11b58 <__assert_fail@plt+0x898>
   11e88:	mov	r0, #1
   11e8c:	bl	111b8 <exit@plt>
   11e90:	ldr	r1, [sp, #60]	; 0x3c
   11e94:	mov	r2, #5
   11e98:	mov	r0, #0
   11e9c:	bl	110b0 <dcgettext@plt>
   11ea0:	mov	r1, #0
   11ea4:	mov	r2, r0
   11ea8:	mov	r0, #1
   11eac:	bl	11134 <error@plt>
   11eb0:	b	11aec <__assert_fail@plt+0x82c>
   11eb4:	ldr	r3, [r7, #24]
   11eb8:	cmp	r3, #0
   11ebc:	beq	11c40 <__assert_fail@plt+0x980>
   11ec0:	ldr	r1, [pc, #1700]	; 1256c <__assert_fail@plt+0x12ac>
   11ec4:	mov	r0, r4
   11ec8:	mov	r2, #5
   11ecc:	add	r1, pc, r1
   11ed0:	bl	110b0 <dcgettext@plt>
   11ed4:	mov	r1, r4
   11ed8:	mov	r2, r0
   11edc:	mov	r0, #1
   11ee0:	bl	11134 <error@plt>
   11ee4:	b	11c40 <__assert_fail@plt+0x980>
   11ee8:	movw	r1, #65208	; 0xfeb8
   11eec:	add	r4, sp, #424	; 0x1a8
   11ef0:	movt	r1, #65535	; 0xffff
   11ef4:	ldrd	r0, [r1, r4]
   11ef8:	cmp	r1, r3
   11efc:	cmpeq	r0, r2
   11f00:	bls	11bdc <__assert_fail@plt+0x91c>
   11f04:	ldr	r1, [pc, #1636]	; 12570 <__assert_fail@plt+0x12b0>
   11f08:	add	r1, pc, r1
   11f0c:	ldrb	r4, [r1, #779]	; 0x30b
   11f10:	cmp	r4, #0
   11f14:	bne	11bdc <__assert_fail@plt+0x91c>
   11f18:	orrs	r8, r2, r3
   11f1c:	beq	12424 <__assert_fail@plt+0x1164>
   11f20:	ldr	r3, [pc, #1612]	; 12574 <__assert_fail@plt+0x12b4>
   11f24:	add	r3, pc, r3
   11f28:	ldrb	r3, [r3, #780]	; 0x30c
   11f2c:	cmp	r3, #0
   11f30:	beq	12450 <__assert_fail@plt+0x1190>
   11f34:	movw	r1, #65208	; 0xfeb8
   11f38:	add	r9, sp, #424	; 0x1a8
   11f3c:	movt	r1, #65535	; 0xffff
   11f40:	ldrd	r2, [r7, #16]
   11f44:	ldrd	r8, [r9, r1]
   11f48:	strd	r2, [sp, #32]
   11f4c:	cmp	r9, r3
   11f50:	cmpeq	r8, r2
   11f54:	strd	r8, [sp, #16]
   11f58:	bls	12498 <__assert_fail@plt+0x11d8>
   11f5c:	ldrd	r2, [sp, #32]
   11f60:	orrs	r3, r2, r3
   11f64:	beq	12474 <__assert_fail@plt+0x11b4>
   11f68:	ldr	r1, [r7, #4]
   11f6c:	ldr	r0, [r1]
   11f70:	cmp	r0, #4
   11f74:	addls	pc, pc, r0, lsl #2
   11f78:	b	11f90 <__assert_fail@plt+0xcd0>
   11f7c:	b	11b80 <__assert_fail@plt+0x8c0>
   11f80:	b	11fbc <__assert_fail@plt+0xcfc>
   11f84:	b	11f94 <__assert_fail@plt+0xcd4>
   11f88:	b	11f90 <__assert_fail@plt+0xcd0>
   11f8c:	b	11b80 <__assert_fail@plt+0x8c0>
   11f90:	bl	112a8 <abort@plt>
   11f94:	ldr	r1, [pc, #1500]	; 12578 <__assert_fail@plt+0x12b8>
   11f98:	mov	r2, #5
   11f9c:	mov	r0, #0
   11fa0:	add	r1, pc, r1
   11fa4:	bl	110b0 <dcgettext@plt>
   11fa8:	mov	r1, #0
   11fac:	mov	r2, r0
   11fb0:	mov	r0, #1
   11fb4:	bl	11134 <error@plt>
   11fb8:	bl	112a8 <abort@plt>
   11fbc:	ldrb	r4, [r1, #9]
   11fc0:	b	11b84 <__assert_fail@plt+0x8c4>
   11fc4:	mov	r1, #0
   11fc8:	mov	r2, #256	; 0x100
   11fcc:	add	r0, sp, #164	; 0xa4
   11fd0:	mov	r4, r2
   11fd4:	bl	1120c <memset@plt>
   11fd8:	movw	r3, #65200	; 0xfeb0
   11fdc:	add	ip, sp, #424	; 0x1a8
   11fe0:	movt	r3, #65535	; 0xffff
   11fe4:	mvn	r0, #1
   11fe8:	mvn	r1, #0
   11fec:	mov	r8, #1
   11ff0:	strd	r0, [ip, r3]
   11ff4:	b	12010 <__assert_fail@plt+0xd50>
   11ff8:	add	r1, sp, #424	; 0x1a8
   11ffc:	add	r3, r1, r0
   12000:	ldrb	r2, [r3, #-260]	; 0xfffffefc
   12004:	strb	r8, [r3, #-260]	; 0xfffffefc
   12008:	eor	r3, r2, #1
   1200c:	rsb	r4, r3, r4
   12010:	mov	r0, r5
   12014:	mov	r1, #0
   12018:	bl	12da0 <__assert_fail@plt+0x1ae0>
   1201c:	cmn	r0, #1
   12020:	bne	11ff8 <__assert_fail@plt+0xd38>
   12024:	mov	r2, r4
   12028:	asr	r3, r4, #31
   1202c:	movw	r1, #65208	; 0xfeb8
   12030:	add	r4, sp, #424	; 0x1a8
   12034:	movt	r1, #65535	; 0xffff
   12038:	strd	r2, [r4, r1]
   1203c:	b	11864 <__assert_fail@plt+0x5a4>
   12040:	mov	r0, #24
   12044:	add	r9, sp, #424	; 0x1a8
   12048:	bl	15e54 <close_stdout@@Base+0x2058>
   1204c:	ldr	r3, [r8]
   12050:	add	r3, r3, #1
   12054:	str	r0, [r9, #-304]!	; 0xfffffed0
   12058:	mov	r1, r9
   1205c:	str	r0, [sp, #124]	; 0x7c
   12060:	str	r7, [r0, #4]
   12064:	ldr	r0, [r4, r3, lsl #2]
   12068:	bl	13254 <__assert_fail@plt+0x1f94>
   1206c:	cmp	r0, #0
   12070:	beq	11e88 <__assert_fail@plt+0xbc8>
   12074:	mov	r7, r9
   12078:	b	11848 <__assert_fail@plt+0x588>
   1207c:	ldr	r1, [pc, #1272]	; 1257c <__assert_fail@plt+0x12bc>
   12080:	mov	r2, #5
   12084:	mov	r0, #0
   12088:	add	r1, pc, r1
   1208c:	bl	110b0 <dcgettext@plt>
   12090:	mov	r1, #0
   12094:	mov	r2, r0
   12098:	mov	r0, #1
   1209c:	bl	11134 <error@plt>
   120a0:	b	11870 <__assert_fail@plt+0x5b0>
   120a4:	cmn	r4, #1
   120a8:	beq	120c0 <__assert_fail@plt+0xe00>
   120ac:	ldr	r3, [pc, #1228]	; 12580 <__assert_fail@plt+0x12c0>
   120b0:	add	r3, pc, r3
   120b4:	ldrb	r3, [r3, #779]	; 0x30b
   120b8:	cmp	r3, #0
   120bc:	beq	123b8 <__assert_fail@plt+0x10f8>
   120c0:	ldr	r2, [pc, #1212]	; 12584 <__assert_fail@plt+0x12c4>
   120c4:	add	r2, pc, r2
   120c8:	ldrb	r3, [r2, #778]	; 0x30a
   120cc:	cmp	r3, #0
   120d0:	bne	122f4 <__assert_fail@plt+0x1034>
   120d4:	ldr	r5, [pc, #1196]	; 12588 <__assert_fail@plt+0x12c8>
   120d8:	ldr	r6, [pc, #1196]	; 1258c <__assert_fail@plt+0x12cc>
   120dc:	add	r5, pc, r5
   120e0:	add	r6, pc, r6
   120e4:	add	r5, r5, #512	; 0x200
   120e8:	mov	r0, r5
   120ec:	mov	r1, #8192	; 0x2000
   120f0:	bl	131a4 <__assert_fail@plt+0x1ee4>
   120f4:	subs	r4, r0, #0
   120f8:	beq	11cac <__assert_fail@plt+0x9ec>
   120fc:	ldr	r3, [pc, #1000]	; 124ec <__assert_fail@plt+0x122c>
   12100:	mov	r0, r5
   12104:	mov	r1, #1
   12108:	mov	r2, r4
   1210c:	ldr	r3, [fp, r3]
   12110:	ldr	r3, [r3]
   12114:	bl	1108c <fwrite_unlocked@plt>
   12118:	cmp	r4, r0
   1211c:	beq	120e8 <__assert_fail@plt+0xe28>
   12120:	bl	111e8 <__errno_location@plt>
   12124:	mov	r1, r6
   12128:	mov	r2, #5
   1212c:	ldr	r4, [r0]
   12130:	mov	r0, #0
   12134:	bl	110b0 <dcgettext@plt>
   12138:	mov	r1, r4
   1213c:	mov	r2, r0
   12140:	mov	r0, #1
   12144:	bl	11134 <error@plt>
   12148:	b	120e8 <__assert_fail@plt+0xe28>
   1214c:	bl	111e8 <__errno_location@plt>
   12150:	ldr	r1, [pc, #1080]	; 12590 <__assert_fail@plt+0x12d0>
   12154:	mov	r2, #5
   12158:	add	r1, pc, r1
   1215c:	ldr	r4, [r0]
   12160:	mov	r0, #0
   12164:	bl	110b0 <dcgettext@plt>
   12168:	mov	r1, r4
   1216c:	mov	r2, r0
   12170:	mov	r0, #1
   12174:	bl	11134 <error@plt>
   12178:	b	11cbc <__assert_fail@plt+0x9fc>
   1217c:	add	r8, sp, #424	; 0x1a8
   12180:	movw	r3, #65208	; 0xfeb8
   12184:	movt	r3, #65535	; 0xffff
   12188:	ldr	r6, [sp, #64]	; 0x40
   1218c:	ldr	fp, [sp, #68]	; 0x44
   12190:	mov	r5, sl
   12194:	ldrd	r2, [r3, r8]
   12198:	ldrd	r8, [sp, #40]	; 0x28
   1219c:	cmp	r9, r3
   121a0:	cmpeq	r8, r2
   121a4:	bcc	121cc <__assert_fail@plt+0xf0c>
   121a8:	ldrd	r8, [sp, #32]
   121ac:	ldrd	r2, [r7, #16]
   121b0:	cmp	r9, r3
   121b4:	cmpeq	r8, r2
   121b8:	ldrcs	r9, [sp, #52]	; 0x34
   121bc:	ldrcs	ip, [sp, #56]	; 0x38
   121c0:	strcs	r9, [sp, #84]	; 0x54
   121c4:	strcs	ip, [r7, #4]
   121c8:	bcs	11ee8 <__assert_fail@plt+0xc28>
   121cc:	ldr	r3, [pc, #960]	; 12594 <__assert_fail@plt+0x12d4>
   121d0:	movw	r2, #1245	; 0x4dd
   121d4:	ldr	r0, [pc, #956]	; 12598 <__assert_fail@plt+0x12d8>
   121d8:	ldr	r1, [pc, #956]	; 1259c <__assert_fail@plt+0x12dc>
   121dc:	add	r3, pc, r3
   121e0:	add	r0, pc, r0
   121e4:	add	r3, r3, #128	; 0x80
   121e8:	add	r1, pc, r1
   121ec:	bl	112c0 <__assert_fail@plt>
   121f0:	ldr	r1, [pc, #936]	; 125a0 <__assert_fail@plt+0x12e0>
   121f4:	mov	r2, #5
   121f8:	mov	r0, #0
   121fc:	add	r1, pc, r1
   12200:	bl	110b0 <dcgettext@plt>
   12204:	mov	r1, #0
   12208:	mov	r2, r0
   1220c:	mov	r0, #1
   12210:	bl	11134 <error@plt>
   12214:	b	11910 <__assert_fail@plt+0x650>
   12218:	ldr	r4, [pc, #900]	; 125a4 <__assert_fail@plt+0x12e4>
   1221c:	mov	r0, r5
   12220:	mov	r1, #0
   12224:	add	r4, pc, r4
   12228:	mov	r2, r4
   1222c:	bl	11300 <__assert_fail@plt+0x40>
   12230:	mov	r0, r4
   12234:	mov	r1, #0
   12238:	mvn	r2, #1
   1223c:	mvn	r3, #0
   12240:	strd	r2, [r7, #8]
   12244:	add	r3, r0, #256	; 0x100
   12248:	strb	r1, [r1, r3]
   1224c:	add	r1, r1, #1
   12250:	cmp	r1, #256	; 0x100
   12254:	bne	12244 <__assert_fail@plt+0xf84>
   12258:	mov	r5, r0
   1225c:	mov	r4, #0
   12260:	b	12270 <__assert_fail@plt+0xfb0>
   12264:	add	r4, r4, #1
   12268:	cmp	r4, #256	; 0x100
   1226c:	beq	120c0 <__assert_fail@plt+0xe00>
   12270:	ldrb	r1, [r4, r5]
   12274:	cmp	r1, #0
   12278:	bne	12264 <__assert_fail@plt+0xfa4>
   1227c:	mov	r0, r7
   12280:	bl	12da0 <__assert_fail@plt+0x1ae0>
   12284:	cmn	r0, #1
   12288:	addne	r3, r5, #256	; 0x100
   1228c:	strbne	r0, [r4, r3]
   12290:	bne	12264 <__assert_fail@plt+0xfa4>
   12294:	ldr	r3, [pc, #780]	; 125a8 <__assert_fail@plt+0x12e8>
   12298:	add	r3, pc, r3
   1229c:	ldrb	r3, [r3, #779]	; 0x30b
   122a0:	cmp	r3, #0
   122a4:	bne	120c0 <__assert_fail@plt+0xe00>
   122a8:	ldr	r3, [pc, #764]	; 125ac <__assert_fail@plt+0x12ec>
   122ac:	movw	r2, #1870	; 0x74e
   122b0:	ldr	r0, [pc, #760]	; 125b0 <__assert_fail@plt+0x12f0>
   122b4:	ldr	r1, [pc, #760]	; 125b4 <__assert_fail@plt+0x12f4>
   122b8:	add	r3, pc, r3
   122bc:	add	r0, pc, r0
   122c0:	add	r3, r3, #168	; 0xa8
   122c4:	add	r1, pc, r1
   122c8:	bl	112c0 <__assert_fail@plt>
   122cc:	ldr	r1, [pc, #740]	; 125b8 <__assert_fail@plt+0x12f8>
   122d0:	mov	r2, #5
   122d4:	mov	r0, #0
   122d8:	add	r1, pc, r1
   122dc:	bl	110b0 <dcgettext@plt>
   122e0:	mov	r1, #0
   122e4:	mov	r2, r0
   122e8:	mov	r0, #1
   122ec:	bl	11134 <error@plt>
   122f0:	b	1191c <__assert_fail@plt+0x65c>
   122f4:	mov	r0, r7
   122f8:	add	r2, r2, #520	; 0x208
   122fc:	mov	r1, #0
   12300:	bl	11300 <__assert_fail@plt+0x40>
   12304:	ldr	r0, [pc, #688]	; 125bc <__assert_fail@plt+0x12fc>
   12308:	add	r0, pc, r0
   1230c:	bl	11360 <__assert_fail@plt+0xa0>
   12310:	b	11cac <__assert_fail@plt+0x9ec>
   12314:	mov	r0, r5
   12318:	ldrb	r1, [r4, #776]	; 0x308
   1231c:	add	r2, r4, #520	; 0x208
   12320:	bl	11300 <__assert_fail@plt+0x40>
   12324:	ldr	r0, [pc, #660]	; 125c0 <__assert_fail@plt+0x1300>
   12328:	add	r0, pc, r0
   1232c:	bl	11360 <__assert_fail@plt+0xa0>
   12330:	b	11cac <__assert_fail@plt+0x9ec>
   12334:	ldr	r2, [pc, #648]	; 125c4 <__assert_fail@plt+0x1304>
   12338:	mov	r0, r5
   1233c:	ldr	r6, [pc, #644]	; 125c8 <__assert_fail@plt+0x1308>
   12340:	add	r2, pc, r2
   12344:	ldrb	r1, [r4, #776]	; 0x308
   12348:	add	r6, pc, r6
   1234c:	add	r5, r2, #512	; 0x200
   12350:	bl	11300 <__assert_fail@plt+0x40>
   12354:	mov	r0, r5
   12358:	mov	r1, #8192	; 0x2000
   1235c:	bl	130e8 <__assert_fail@plt+0x1e28>
   12360:	subs	r4, r0, #0
   12364:	beq	11cac <__assert_fail@plt+0x9ec>
   12368:	ldr	r3, [pc, #380]	; 124ec <__assert_fail@plt+0x122c>
   1236c:	mov	r0, r5
   12370:	mov	r1, #1
   12374:	mov	r2, r4
   12378:	ldr	r3, [fp, r3]
   1237c:	ldr	r3, [r3]
   12380:	bl	1108c <fwrite_unlocked@plt>
   12384:	cmp	r4, r0
   12388:	beq	12354 <__assert_fail@plt+0x1094>
   1238c:	bl	111e8 <__errno_location@plt>
   12390:	mov	r1, r6
   12394:	mov	r2, #5
   12398:	ldr	r4, [r0]
   1239c:	mov	r0, #0
   123a0:	bl	110b0 <dcgettext@plt>
   123a4:	mov	r1, r4
   123a8:	mov	r2, r0
   123ac:	mov	r0, #1
   123b0:	bl	11134 <error@plt>
   123b4:	b	12354 <__assert_fail@plt+0x1094>
   123b8:	ldr	r3, [pc, #524]	; 125cc <__assert_fail@plt+0x130c>
   123bc:	movw	r2, #1924	; 0x784
   123c0:	ldr	r0, [pc, #520]	; 125d0 <__assert_fail@plt+0x1310>
   123c4:	ldr	r1, [pc, #520]	; 125d4 <__assert_fail@plt+0x1314>
   123c8:	add	r3, pc, r3
   123cc:	add	r0, pc, r0
   123d0:	add	r3, r3, #168	; 0xa8
   123d4:	add	r1, pc, r1
   123d8:	bl	112c0 <__assert_fail@plt>
   123dc:	mvn	r2, #1
   123e0:	mvn	r3, #0
   123e4:	mov	r0, r7
   123e8:	strd	r2, [r7, #8]
   123ec:	mov	r1, #0
   123f0:	bl	12da0 <__assert_fail@plt+0x1ae0>
   123f4:	cmn	r0, #1
   123f8:	mov	r4, r0
   123fc:	bne	1240c <__assert_fail@plt+0x114c>
   12400:	b	11c1c <__assert_fail@plt+0x95c>
   12404:	cmp	r4, r0
   12408:	bne	11c1c <__assert_fail@plt+0x95c>
   1240c:	mov	r0, r7
   12410:	mov	r1, #0
   12414:	bl	12da0 <__assert_fail@plt+0x1ae0>
   12418:	cmn	r0, #1
   1241c:	bne	12404 <__assert_fail@plt+0x1144>
   12420:	b	11c40 <__assert_fail@plt+0x980>
   12424:	ldr	r1, [pc, #428]	; 125d8 <__assert_fail@plt+0x1318>
   12428:	mov	r0, r4
   1242c:	mov	r2, #5
   12430:	add	r1, pc, r1
   12434:	bl	110b0 <dcgettext@plt>
   12438:	mov	r1, r4
   1243c:	mov	r2, r0
   12440:	mov	r0, #1
   12444:	bl	11134 <error@plt>
   12448:	b	11f20 <__assert_fail@plt+0xc60>
   1244c:	bl	112cc <__assert_fail@plt+0xc>
   12450:	ldr	r3, [pc, #388]	; 125dc <__assert_fail@plt+0x131c>
   12454:	movw	r2, #1401	; 0x579
   12458:	ldr	r0, [pc, #384]	; 125e0 <__assert_fail@plt+0x1320>
   1245c:	ldr	r1, [pc, #384]	; 125e4 <__assert_fail@plt+0x1324>
   12460:	add	r3, pc, r3
   12464:	add	r0, pc, r0
   12468:	add	r3, r3, #152	; 0x98
   1246c:	add	r1, pc, r1
   12470:	bl	112c0 <__assert_fail@plt>
   12474:	ldr	r3, [pc, #364]	; 125e8 <__assert_fail@plt+0x1328>
   12478:	movw	r2, #1403	; 0x57b
   1247c:	ldr	r0, [pc, #360]	; 125ec <__assert_fail@plt+0x132c>
   12480:	ldr	r1, [pc, #360]	; 125f0 <__assert_fail@plt+0x1330>
   12484:	add	r3, pc, r3
   12488:	add	r0, pc, r0
   1248c:	add	r3, r3, #152	; 0x98
   12490:	add	r1, pc, r1
   12494:	bl	112c0 <__assert_fail@plt>
   12498:	ldr	r3, [pc, #340]	; 125f4 <__assert_fail@plt+0x1334>
   1249c:	movw	r2, #1402	; 0x57a
   124a0:	ldr	r0, [pc, #336]	; 125f8 <__assert_fail@plt+0x1338>
   124a4:	ldr	r1, [pc, #336]	; 125fc <__assert_fail@plt+0x133c>
   124a8:	add	r3, pc, r3
   124ac:	add	r0, pc, r0
   124b0:	add	r3, r3, #152	; 0x98
   124b4:	add	r1, pc, r1
   124b8:	bl	112c0 <__assert_fail@plt>
   124bc:	andeq	r8, r1, r0, lsl #21
   124c0:	andeq	r0, r0, r4, lsl #2
   124c4:	strdeq	sl, [r1], -r4
   124c8:	andeq	sl, r1, ip, ror #23
   124cc:	muleq	r0, ip, r1
   124d0:	andeq	r7, r0, r4, asr r2
   124d4:	ldrdeq	r7, [r0], -r4
   124d8:	andeq	sl, r1, ip, lsl #23
   124dc:			; <UNDEFINED> instruction: 0x000072b0
   124e0:	andeq	sl, r1, r8, lsl #23
   124e4:	andeq	r0, r0, r4, lsl r1
   124e8:	andeq	r8, r1, r0, asr #16
   124ec:	andeq	r0, r0, r4, lsr #2
   124f0:	andeq	r0, r0, ip, lsl #2
   124f4:	andeq	r7, r0, r8, lsl r2
   124f8:	andeq	r7, r0, r4, lsl #4
   124fc:	andeq	r7, r0, ip, lsr #1
   12500:	andeq	r0, r0, r8, lsl #2
   12504:	andeq	sl, r1, r8, ror #20
   12508:	andeq	r7, r0, ip, lsl #3
   1250c:	andeq	r0, r0, r0, lsl r1
   12510:	andeq	r7, r0, r4, asr r1
   12514:	andeq	r7, r0, r0, asr #12
   12518:	ldrdeq	r7, [r0], -r8
   1251c:	andeq	sl, r1, r0, lsl #19
   12520:	andeq	sl, r1, r8, lsr #18
   12524:	muleq	r0, r8, r0
   12528:	andeq	sl, r1, r8, lsl #17
   1252c:	andeq	r7, r0, r8, lsr #1
   12530:			; <UNDEFINED> instruction: 0x00006db4
   12534:	andeq	r6, r0, r0, asr #25
   12538:	andeq	r7, r0, r8, lsl #5
   1253c:	muleq	r1, ip, r5
   12540:	andeq	r6, r0, ip, asr pc
   12544:	andeq	r0, r0, r0, lsr #2
   12548:	andeq	sl, r1, ip, lsr #10
   1254c:	strdeq	r8, [r1], -ip
   12550:	andeq	r1, r0, ip, lsr r4
   12554:	andeq	sl, r1, r0, lsr #9
   12558:	andeq	r8, r1, r8, lsl #9
   1255c:	andeq	r8, r1, r8, asr r4
   12560:	andeq	r8, r1, r4, asr r4
   12564:	andeq	r8, r1, r0, asr r4
   12568:	ldrdeq	r6, [r0], -r8
   1256c:	andeq	r6, r0, r4, lsr #26
   12570:	andeq	sl, r1, r4, ror r2
   12574:	andeq	sl, r1, r8, asr r2
   12578:	andeq	r6, r0, r8, ror fp
   1257c:			; <UNDEFINED> instruction: 0x000068b4
   12580:	andeq	sl, r1, ip, asr #1
   12584:	strheq	sl, [r1], -r8
   12588:	andeq	r8, r1, r8, lsr #1
   1258c:	strdeq	r5, [r0], -r0
   12590:	andeq	r6, r0, r0, lsl fp
   12594:	andeq	r5, r0, ip, lsr #17
   12598:	muleq	r0, r8, r8
   1259c:	andeq	r5, r0, r8, lsr #19
   125a0:	andeq	r6, r0, ip, lsr #15
   125a4:	andeq	r7, r1, r0, ror #30
   125a8:	andeq	r9, r1, r4, ror #29
   125ac:	ldrdeq	r5, [r0], -r0
   125b0:	andeq	r6, r0, r4, ror r9
   125b4:	andeq	r5, r0, ip, asr #17
   125b8:	andeq	r6, r0, r0, lsl r7
   125bc:	muleq	r0, r4, lr
   125c0:	andeq	r0, r0, r8, asr sp
   125c4:	andeq	r7, r1, r4, asr #28
   125c8:	andeq	r5, r0, r8, lsl #21
   125cc:	andeq	r5, r0, r0, asr #13
   125d0:	andeq	r6, r0, r0, lsl #17
   125d4:			; <UNDEFINED> instruction: 0x000057bc
   125d8:	andeq	r6, r0, r0, lsl #13
   125dc:	andeq	r5, r0, r8, lsr #12
   125e0:	andeq	r6, r0, r0, lsl #13
   125e4:	andeq	r5, r0, r4, lsr #14
   125e8:	andeq	r5, r0, r4, lsl #12
   125ec:	andeq	r6, r0, r0, lsl #13
   125f0:	andeq	r5, r0, r0, lsl #14
   125f4:	andeq	r5, r0, r0, ror #11
   125f8:	andeq	r6, r0, r4, asr #12
   125fc:	ldrdeq	r5, [r0], -ip
   12600:	mov	fp, #0
   12604:	mov	lr, #0
   12608:	pop	{r1}		; (ldr r1, [sp], #4)
   1260c:	mov	r2, sp
   12610:	push	{r2}		; (str r2, [sp, #-4]!)
   12614:	push	{r0}		; (str r0, [sp, #-4]!)
   12618:	ldr	ip, [pc, #16]	; 12630 <__assert_fail@plt+0x1370>
   1261c:	push	{ip}		; (str ip, [sp, #-4]!)
   12620:	ldr	r0, [pc, #12]	; 12634 <__assert_fail@plt+0x1374>
   12624:	ldr	r3, [pc, #12]	; 12638 <__assert_fail@plt+0x1378>
   12628:	bl	11164 <__libc_start_main@plt>
   1262c:	bl	112a8 <abort@plt>
   12630:	andeq	r7, r1, r0, asr sl
   12634:	andeq	r1, r1, r0, ror #10
   12638:	andeq	r7, r1, ip, ror #19
   1263c:	ldr	r3, [pc, #20]	; 12658 <__assert_fail@plt+0x1398>
   12640:	ldr	r2, [pc, #20]	; 1265c <__assert_fail@plt+0x139c>
   12644:	add	r3, pc, r3
   12648:	ldr	r2, [r3, r2]
   1264c:	cmp	r2, #0
   12650:	bxeq	lr
   12654:	b	11194 <__gmon_start__@plt>
   12658:			; <UNDEFINED> instruction: 0x000179b4
   1265c:	andeq	r0, r0, r8, lsl r1
   12660:	push	{r3, lr}
   12664:	movw	r0, #41352	; 0xa188
   12668:	ldr	r3, [pc, #36]	; 12694 <__assert_fail@plt+0x13d4>
   1266c:	movt	r0, #2
   12670:	rsb	r3, r0, r3
   12674:	cmp	r3, #6
   12678:	popls	{r3, pc}
   1267c:	movw	r3, #0
   12680:	movt	r3, #0
   12684:	cmp	r3, #0
   12688:	popeq	{r3, pc}
   1268c:	blx	r3
   12690:	pop	{r3, pc}
   12694:	andeq	sl, r2, fp, lsl #3
   12698:	push	{r3, lr}
   1269c:	movw	r0, #41352	; 0xa188
   126a0:	movw	r3, #41352	; 0xa188
   126a4:	movt	r0, #2
   126a8:	movt	r3, #2
   126ac:	rsb	r3, r0, r3
   126b0:	asr	r3, r3, #2
   126b4:	add	r3, r3, r3, lsr #31
   126b8:	asrs	r1, r3, #1
   126bc:	popeq	{r3, pc}
   126c0:	movw	r2, #0
   126c4:	movt	r2, #0
   126c8:	cmp	r2, #0
   126cc:	popeq	{r3, pc}
   126d0:	blx	r2
   126d4:	pop	{r3, pc}
   126d8:	push	{r4, lr}
   126dc:	movw	r4, #41352	; 0xa188
   126e0:	movt	r4, #2
   126e4:	ldrb	r3, [r4]
   126e8:	cmp	r3, #0
   126ec:	popne	{r4, pc}
   126f0:	bl	12660 <__assert_fail@plt+0x13a0>
   126f4:	mov	r3, #1
   126f8:	strb	r3, [r4]
   126fc:	pop	{r4, pc}
   12700:	movw	r0, #40512	; 0x9e40
   12704:	movt	r0, #2
   12708:	push	{r3, lr}
   1270c:	ldr	r3, [r0]
   12710:	cmp	r3, #0
   12714:	beq	1272c <__assert_fail@plt+0x146c>
   12718:	movw	r3, #0
   1271c:	movt	r3, #0
   12720:	cmp	r3, #0
   12724:	beq	1272c <__assert_fail@plt+0x146c>
   12728:	blx	r3
   1272c:	pop	{r3, lr}
   12730:	b	12698 <__assert_fail@plt+0x13d8>
   12734:	push	{r4, r5}
   12738:	mov	r2, r0
   1273c:	ldr	ip, [r0]
   12740:	ldrb	r3, [ip, r1]
   12744:	cmp	r3, #42	; 0x2a
   12748:	beq	12758 <__assert_fail@plt+0x1498>
   1274c:	mov	r0, #0
   12750:	pop	{r4, r5}
   12754:	bx	lr
   12758:	ldr	r4, [r0, #4]
   1275c:	ldrb	r0, [r4, r1]
   12760:	cmp	r0, #0
   12764:	bne	1274c <__assert_fail@plt+0x148c>
   12768:	ldr	r5, [r2, #8]
   1276c:	add	r3, r1, #1
   12770:	cmp	r3, r5
   12774:	bcc	12794 <__assert_fail@plt+0x14d4>
   12778:	b	12750 <__assert_fail@plt+0x1490>
   1277c:	ldrb	r1, [r4, r3]
   12780:	cmp	r1, #0
   12784:	bne	127a4 <__assert_fail@plt+0x14e4>
   12788:	add	r3, r3, #1
   1278c:	cmp	r3, r5
   12790:	bcs	1274c <__assert_fail@plt+0x148c>
   12794:	ldrb	r2, [ip, r3]
   12798:	sub	r1, r2, #48	; 0x30
   1279c:	cmp	r1, #9
   127a0:	bls	1277c <__assert_fail@plt+0x14bc>
   127a4:	cmp	r2, #93	; 0x5d
   127a8:	bne	12750 <__assert_fail@plt+0x1490>
   127ac:	ldrb	r0, [r4, r3]
   127b0:	pop	{r4, r5}
   127b4:	eor	r0, r0, #1
   127b8:	bx	lr
   127bc:	push	{r4, r5, lr}
   127c0:	mov	r5, r0
   127c4:	sub	sp, sp, #12
   127c8:	mov	r0, #5
   127cc:	bl	15e54 <close_stdout@@Base+0x2058>
   127d0:	mov	r4, r0
   127d4:	bl	111ac <__ctype_b_loc@plt>
   127d8:	lsl	r3, r5, #1
   127dc:	ldr	r2, [r0]
   127e0:	ldrh	r3, [r2, r3]
   127e4:	tst	r3, #16384	; 0x4000
   127e8:	beq	12804 <__assert_fail@plt+0x1544>
   127ec:	mov	r3, #0
   127f0:	mov	r0, r4
   127f4:	strb	r5, [r4]
   127f8:	strb	r3, [r4, #1]
   127fc:	add	sp, sp, #12
   12800:	pop	{r4, r5, pc}
   12804:	ldr	r3, [pc, #32]	; 1282c <__assert_fail@plt+0x156c>
   12808:	mov	r0, r4
   1280c:	str	r5, [sp]
   12810:	mov	r1, #1
   12814:	mov	r2, #5
   12818:	add	r3, pc, r3
   1281c:	bl	111f4 <__sprintf_chk@plt>
   12820:	mov	r0, r4
   12824:	add	sp, sp, #12
   12828:	pop	{r4, r5, pc}
   1282c:	andeq	r5, r0, r0, lsr #6
   12830:	ldr	r2, [pc, #404]	; 129cc <__assert_fail@plt+0x170c>
   12834:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12838:	mov	r6, r1
   1283c:	ldr	r1, [pc, #396]	; 129d0 <__assert_fail@plt+0x1710>
   12840:	add	r2, pc, r2
   12844:	add	r3, r6, #1
   12848:	sub	sp, sp, #44	; 0x2c
   1284c:	cmn	r3, #-1073741823	; 0xc0000001
   12850:	mov	r4, r0
   12854:	ldr	r1, [r2, r1]
   12858:	ldr	r2, [r1]
   1285c:	str	r1, [sp, #8]
   12860:	str	r2, [sp, #36]	; 0x24
   12864:	bhi	129c8 <__assert_fail@plt+0x1708>
   12868:	lsl	r0, r3, #2
   1286c:	bl	15e54 <close_stdout@@Base+0x2058>
   12870:	cmp	r6, #0
   12874:	mov	r7, r0
   12878:	beq	12980 <__assert_fail@plt+0x16c0>
   1287c:	ldr	r3, [pc, #336]	; 129d4 <__assert_fail@plt+0x1714>
   12880:	add	r6, r4, r6
   12884:	ldr	fp, [pc, #332]	; 129d8 <__assert_fail@plt+0x1718>
   12888:	mov	r5, r0
   1288c:	add	r3, pc, r3
   12890:	ldr	sl, [pc, #324]	; 129dc <__assert_fail@plt+0x171c>
   12894:	str	r3, [sp, #20]
   12898:	add	fp, pc, fp
   1289c:	ldr	r9, [pc, #316]	; 129e0 <__assert_fail@plt+0x1720>
   128a0:	add	sl, pc, sl
   128a4:	ldr	r1, [pc, #312]	; 129e4 <__assert_fail@plt+0x1724>
   128a8:	ldr	r3, [pc, #312]	; 129e8 <__assert_fail@plt+0x1728>
   128ac:	add	r9, pc, r9
   128b0:	add	r1, pc, r1
   128b4:	str	r1, [sp, #12]
   128b8:	add	r3, pc, r3
   128bc:	str	r3, [sp, #16]
   128c0:	b	12900 <__assert_fail@plt+0x1640>
   128c4:	cmp	r8, #12
   128c8:	moveq	r1, sl
   128cc:	beq	128ec <__assert_fail@plt+0x162c>
   128d0:	movcc	r1, r9
   128d4:	bcc	128ec <__assert_fail@plt+0x162c>
   128d8:	cmp	r8, #13
   128dc:	beq	12970 <__assert_fail@plt+0x16b0>
   128e0:	cmp	r8, #92	; 0x5c
   128e4:	bne	1292c <__assert_fail@plt+0x166c>
   128e8:	ldr	r1, [sp, #16]
   128ec:	mov	r0, r5
   128f0:	bl	110a4 <stpcpy@plt>
   128f4:	cmp	r4, r6
   128f8:	mov	r5, r0
   128fc:	beq	12980 <__assert_fail@plt+0x16c0>
   12900:	ldrb	r8, [r4], #1
   12904:	cmp	r8, #10
   12908:	beq	12978 <__assert_fail@plt+0x16b8>
   1290c:	bhi	128c4 <__assert_fail@plt+0x1604>
   12910:	cmp	r8, #8
   12914:	beq	12964 <__assert_fail@plt+0x16a4>
   12918:	bhi	12958 <__assert_fail@plt+0x1698>
   1291c:	ldr	r1, [pc, #200]	; 129ec <__assert_fail@plt+0x172c>
   12920:	cmp	r8, #7
   12924:	add	r1, pc, r1
   12928:	beq	128ec <__assert_fail@plt+0x162c>
   1292c:	bl	111ac <__ctype_b_loc@plt>
   12930:	lsl	r2, r8, #1
   12934:	ldr	r1, [r0]
   12938:	ldrh	r2, [r1, r2]
   1293c:	tst	r2, #16384	; 0x4000
   12940:	beq	129a0 <__assert_fail@plt+0x16e0>
   12944:	mov	r3, #0
   12948:	strb	r8, [sp, #28]
   1294c:	add	r1, sp, #28
   12950:	strb	r3, [sp, #29]
   12954:	b	128ec <__assert_fail@plt+0x162c>
   12958:	ldr	r1, [pc, #144]	; 129f0 <__assert_fail@plt+0x1730>
   1295c:	add	r1, pc, r1
   12960:	b	128ec <__assert_fail@plt+0x162c>
   12964:	ldr	r1, [pc, #136]	; 129f4 <__assert_fail@plt+0x1734>
   12968:	add	r1, pc, r1
   1296c:	b	128ec <__assert_fail@plt+0x162c>
   12970:	ldr	r1, [sp, #12]
   12974:	b	128ec <__assert_fail@plt+0x162c>
   12978:	mov	r1, fp
   1297c:	b	128ec <__assert_fail@plt+0x162c>
   12980:	ldr	r1, [sp, #8]
   12984:	mov	r0, r7
   12988:	ldr	r2, [sp, #36]	; 0x24
   1298c:	ldr	r3, [r1]
   12990:	cmp	r2, r3
   12994:	bne	129c4 <__assert_fail@plt+0x1704>
   12998:	add	sp, sp, #44	; 0x2c
   1299c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   129a0:	str	r8, [sp]
   129a4:	add	r8, sp, #28
   129a8:	mov	r1, #1
   129ac:	mov	r2, #5
   129b0:	mov	r0, r8
   129b4:	ldr	r3, [sp, #20]
   129b8:	bl	111f4 <__sprintf_chk@plt>
   129bc:	mov	r1, r8
   129c0:	b	128ec <__assert_fail@plt+0x162c>
   129c4:	bl	110bc <__stack_chk_fail@plt>
   129c8:	bl	16068 <close_stdout@@Base+0x226c>
   129cc:			; <UNDEFINED> instruction: 0x000177b8
   129d0:	andeq	r0, r0, r4, lsl #2
   129d4:	andeq	r5, r0, ip, lsr #5
   129d8:			; <UNDEFINED> instruction: 0x000052b8
   129dc:	andeq	r5, r0, ip, lsr #5
   129e0:			; <UNDEFINED> instruction: 0x000052b0
   129e4:	andeq	r5, r0, r4, lsr #5
   129e8:	andeq	r5, r0, r8, lsl #5
   129ec:	andeq	r5, r0, r0, lsr #4
   129f0:	strdeq	r5, [r0], -ip
   129f4:	andeq	r5, r0, r0, ror #3
   129f8:	push	{r4, lr}
   129fc:	mov	r4, r1
   12a00:	cmp	r0, #11
   12a04:	addls	pc, pc, r0, lsl #2
   12a08:	b	12b90 <__assert_fail@plt+0x18d0>
   12a0c:	b	12a60 <__assert_fail@plt+0x17a0>
   12a10:	b	12a7c <__assert_fail@plt+0x17bc>
   12a14:	b	12a98 <__assert_fail@plt+0x17d8>
   12a18:	b	12ab0 <__assert_fail@plt+0x17f0>
   12a1c:	b	12acc <__assert_fail@plt+0x180c>
   12a20:	b	12ae8 <__assert_fail@plt+0x1828>
   12a24:	b	12b04 <__assert_fail@plt+0x1844>
   12a28:	b	12b20 <__assert_fail@plt+0x1860>
   12a2c:	b	12b3c <__assert_fail@plt+0x187c>
   12a30:	b	12b58 <__assert_fail@plt+0x1898>
   12a34:	b	12b74 <__assert_fail@plt+0x18b4>
   12a38:	b	12a3c <__assert_fail@plt+0x177c>
   12a3c:	bl	111ac <__ctype_b_loc@plt>
   12a40:	lsl	r4, r4, #1
   12a44:	ldr	r3, [r0]
   12a48:	ldrh	r0, [r3, r4]
   12a4c:	and	r0, r0, #4096	; 0x1000
   12a50:	uxth	r0, r0
   12a54:	adds	r0, r0, #0
   12a58:	movne	r0, #1
   12a5c:	pop	{r4, pc}
   12a60:	bl	111ac <__ctype_b_loc@plt>
   12a64:	lsl	r4, r4, #1
   12a68:	ldr	r3, [r0]
   12a6c:	ldrh	r0, [r3, r4]
   12a70:	and	r0, r0, #8
   12a74:	uxth	r0, r0
   12a78:	b	12a54 <__assert_fail@plt+0x1794>
   12a7c:	bl	111ac <__ctype_b_loc@plt>
   12a80:	lsl	r4, r4, #1
   12a84:	ldr	r3, [r0]
   12a88:	ldrh	r0, [r3, r4]
   12a8c:	and	r0, r0, #1024	; 0x400
   12a90:	uxth	r0, r0
   12a94:	b	12a54 <__assert_fail@plt+0x1794>
   12a98:	bl	111ac <__ctype_b_loc@plt>
   12a9c:	lsl	r4, r4, #1
   12aa0:	ldr	r3, [r0]
   12aa4:	ldrh	r0, [r3, r4]
   12aa8:	and	r0, r0, #1
   12aac:	b	12a54 <__assert_fail@plt+0x1794>
   12ab0:	bl	111ac <__ctype_b_loc@plt>
   12ab4:	lsl	r4, r4, #1
   12ab8:	ldr	r3, [r0]
   12abc:	ldrh	r0, [r3, r4]
   12ac0:	and	r0, r0, #2
   12ac4:	uxth	r0, r0
   12ac8:	b	12a54 <__assert_fail@plt+0x1794>
   12acc:	bl	111ac <__ctype_b_loc@plt>
   12ad0:	lsl	r4, r4, #1
   12ad4:	ldr	r3, [r0]
   12ad8:	ldrh	r0, [r3, r4]
   12adc:	and	r0, r0, #2048	; 0x800
   12ae0:	uxth	r0, r0
   12ae4:	b	12a54 <__assert_fail@plt+0x1794>
   12ae8:	bl	111ac <__ctype_b_loc@plt>
   12aec:	lsl	r4, r4, #1
   12af0:	ldr	r3, [r0]
   12af4:	ldrh	r0, [r3, r4]
   12af8:	and	r0, r0, #32768	; 0x8000
   12afc:	uxth	r0, r0
   12b00:	b	12a54 <__assert_fail@plt+0x1794>
   12b04:	bl	111ac <__ctype_b_loc@plt>
   12b08:	lsl	r4, r4, #1
   12b0c:	ldr	r3, [r0]
   12b10:	ldrh	r0, [r3, r4]
   12b14:	and	r0, r0, #512	; 0x200
   12b18:	uxth	r0, r0
   12b1c:	b	12a54 <__assert_fail@plt+0x1794>
   12b20:	bl	111ac <__ctype_b_loc@plt>
   12b24:	lsl	r4, r4, #1
   12b28:	ldr	r3, [r0]
   12b2c:	ldrh	r0, [r3, r4]
   12b30:	and	r0, r0, #16384	; 0x4000
   12b34:	uxth	r0, r0
   12b38:	b	12a54 <__assert_fail@plt+0x1794>
   12b3c:	bl	111ac <__ctype_b_loc@plt>
   12b40:	lsl	r4, r4, #1
   12b44:	ldr	r3, [r0]
   12b48:	ldrh	r0, [r3, r4]
   12b4c:	and	r0, r0, #4
   12b50:	uxth	r0, r0
   12b54:	b	12a54 <__assert_fail@plt+0x1794>
   12b58:	bl	111ac <__ctype_b_loc@plt>
   12b5c:	lsl	r4, r4, #1
   12b60:	ldr	r3, [r0]
   12b64:	ldrh	r0, [r3, r4]
   12b68:	and	r0, r0, #8192	; 0x2000
   12b6c:	uxth	r0, r0
   12b70:	b	12a54 <__assert_fail@plt+0x1794>
   12b74:	bl	111ac <__ctype_b_loc@plt>
   12b78:	lsl	r4, r4, #1
   12b7c:	ldr	r3, [r0]
   12b80:	ldrh	r0, [r3, r4]
   12b84:	and	r0, r0, #256	; 0x100
   12b88:	uxth	r0, r0
   12b8c:	b	12a54 <__assert_fail@plt+0x1794>
   12b90:	bl	112a8 <abort@plt>
   12b94:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12b98:	mov	r3, #0
   12b9c:	ldr	r2, [r0]
   12ba0:	sub	sp, sp, #12
   12ba4:	str	r3, [r0, #24]
   12ba8:	mov	r9, r0
   12bac:	strb	r3, [r0, #32]
   12bb0:	strb	r3, [r0, #34]	; 0x22
   12bb4:	strb	r3, [r0, #33]	; 0x21
   12bb8:	ldr	r8, [r2, #4]
   12bbc:	cmp	r8, r3
   12bc0:	beq	12d64 <__assert_fail@plt+0x1aa4>
   12bc4:	ldr	r3, [pc, #452]	; 12d90 <__assert_fail@plt+0x1ad0>
   12bc8:	mov	r6, #0
   12bcc:	mov	r7, #0
   12bd0:	add	r3, pc, r3
   12bd4:	str	r3, [sp, #4]
   12bd8:	ldr	r3, [r8]
   12bdc:	cmp	r3, #4
   12be0:	addls	pc, pc, r3, lsl #2
   12be4:	b	12d60 <__assert_fail@plt+0x1aa0>
   12be8:	b	12bfc <__assert_fail@plt+0x193c>
   12bec:	b	12cbc <__assert_fail@plt+0x19fc>
   12bf0:	b	12c64 <__assert_fail@plt+0x19a4>
   12bf4:	b	12cdc <__assert_fail@plt+0x1a1c>
   12bf8:	b	12c48 <__assert_fail@plt+0x1988>
   12bfc:	mov	r4, #1
   12c00:	mov	r5, #0
   12c04:	adds	r4, r4, r6
   12c08:	adc	r5, r5, r7
   12c0c:	and	r3, r4, r5
   12c10:	cmn	r3, #1
   12c14:	movne	r3, #0
   12c18:	moveq	r3, #1
   12c1c:	cmp	r7, r5
   12c20:	cmpeq	r6, r4
   12c24:	orrhi	r3, r3, #1
   12c28:	cmp	r3, #0
   12c2c:	bne	12d28 <__assert_fail@plt+0x1a68>
   12c30:	ldr	r8, [r8, #4]
   12c34:	cmp	r8, #0
   12c38:	beq	12d54 <__assert_fail@plt+0x1a94>
   12c3c:	mov	r6, r4
   12c40:	mov	r7, r5
   12c44:	b	12bd8 <__assert_fail@plt+0x1918>
   12c48:	ldrd	r4, [r8, #16]
   12c4c:	orrs	r3, r4, r5
   12c50:	ldreq	r3, [r9, #24]
   12c54:	streq	r8, [r9, #28]
   12c58:	addeq	r3, r3, #1
   12c5c:	streq	r3, [r9, #24]
   12c60:	b	12c04 <__assert_fail@plt+0x1944>
   12c64:	mov	r3, #1
   12c68:	strb	r3, [r9, #33]	; 0x21
   12c6c:	ldr	fp, [r8, #8]
   12c70:	mov	r4, #0
   12c74:	mov	r5, #0
   12c78:	mov	sl, #0
   12c7c:	mov	r0, fp
   12c80:	uxtb	r1, sl
   12c84:	bl	129f8 <__assert_fail@plt+0x1738>
   12c88:	cmp	r0, #0
   12c8c:	beq	12c98 <__assert_fail@plt+0x19d8>
   12c90:	adds	r4, r4, #1
   12c94:	adc	r5, r5, #0
   12c98:	add	sl, sl, #1
   12c9c:	cmp	sl, #256	; 0x100
   12ca0:	bne	12c7c <__assert_fail@plt+0x19bc>
   12ca4:	cmp	fp, #6
   12ca8:	beq	12c04 <__assert_fail@plt+0x1944>
   12cac:	cmp	fp, #10
   12cb0:	movne	r3, #1
   12cb4:	strbne	r3, [r9, #34]	; 0x22
   12cb8:	b	12c04 <__assert_fail@plt+0x1944>
   12cbc:	ldrb	r2, [r8, #9]
   12cc0:	ldrb	r3, [r8, #8]
   12cc4:	cmp	r2, r3
   12cc8:	bcc	12d70 <__assert_fail@plt+0x1ab0>
   12ccc:	rsb	r3, r3, r2
   12cd0:	add	r4, r3, #1
   12cd4:	asr	r5, r4, #31
   12cd8:	b	12c04 <__assert_fail@plt+0x1944>
   12cdc:	ldrb	r1, [r8, #8]
   12ce0:	mov	r4, #0
   12ce4:	mov	r5, #0
   12ce8:	mov	r3, #0
   12cec:	b	12cfc <__assert_fail@plt+0x1a3c>
   12cf0:	add	r3, r3, #1
   12cf4:	cmp	r3, #256	; 0x100
   12cf8:	beq	12d1c <__assert_fail@plt+0x1a5c>
   12cfc:	uxtb	r2, r3
   12d00:	cmp	r2, r1
   12d04:	bne	12cf0 <__assert_fail@plt+0x1a30>
   12d08:	adds	r4, r4, #1
   12d0c:	add	r3, r3, #1
   12d10:	adc	r5, r5, #0
   12d14:	cmp	r3, #256	; 0x100
   12d18:	bne	12cfc <__assert_fail@plt+0x1a3c>
   12d1c:	mov	r3, #1
   12d20:	strb	r3, [r9, #32]
   12d24:	b	12c04 <__assert_fail@plt+0x1944>
   12d28:	ldr	r1, [sp, #4]
   12d2c:	mov	r2, #5
   12d30:	mov	r0, #0
   12d34:	bl	110b0 <dcgettext@plt>
   12d38:	mov	r1, #0
   12d3c:	mov	r2, r0
   12d40:	mov	r0, #1
   12d44:	bl	11134 <error@plt>
   12d48:	ldr	r8, [r8, #4]
   12d4c:	cmp	r8, #0
   12d50:	bne	12c3c <__assert_fail@plt+0x197c>
   12d54:	strd	r4, [r9, #16]
   12d58:	add	sp, sp, #12
   12d5c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12d60:	bl	112a8 <abort@plt>
   12d64:	mov	r4, #0
   12d68:	mov	r5, #0
   12d6c:	b	12d54 <__assert_fail@plt+0x1a94>
   12d70:	ldr	r0, [pc, #28]	; 12d94 <__assert_fail@plt+0x1ad4>
   12d74:	movw	r2, #1287	; 0x507
   12d78:	ldr	r1, [pc, #24]	; 12d98 <__assert_fail@plt+0x1ad8>
   12d7c:	ldr	r3, [pc, #24]	; 12d9c <__assert_fail@plt+0x1adc>
   12d80:	add	r0, pc, r0
   12d84:	add	r1, pc, r1
   12d88:	add	r3, pc, r3
   12d8c:	bl	112c0 <__assert_fail@plt>
   12d90:	andeq	r4, r0, ip, asr #31
   12d94:	andeq	r4, r0, r0, ror #27
   12d98:	andeq	r4, r0, ip, lsl #28
   12d9c:	andeq	r4, r0, r0, lsl #26
   12da0:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   12da4:	mov	r8, r0
   12da8:	mvn	r4, #1
   12dac:	mvn	r5, #0
   12db0:	mvn	r6, #0
   12db4:	mvn	r7, #0
   12db8:	mov	r0, #2
   12dbc:	cmp	r1, #0
   12dc0:	strne	r0, [r1]
   12dc4:	ldrd	r2, [r8, #8]
   12dc8:	cmp	r3, r5
   12dcc:	cmpeq	r2, r4
   12dd0:	ldreq	r3, [r8]
   12dd4:	ldrne	r9, [r8, #4]
   12dd8:	ldreq	r3, [r3, #4]
   12ddc:	strdeq	r6, [r8, #8]
   12de0:	moveq	r9, r3
   12de4:	streq	r3, [r8, #4]
   12de8:	cmp	r9, #0
   12dec:	beq	12fb8 <__assert_fail@plt+0x1cf8>
   12df0:	ldr	r3, [r9]
   12df4:	cmp	r3, #4
   12df8:	addls	pc, pc, r3, lsl #2
   12dfc:	b	12f20 <__assert_fail@plt+0x1c60>
   12e00:	b	12e14 <__assert_fail@plt+0x1b54>
   12e04:	b	12ee0 <__assert_fail@plt+0x1c20>
   12e08:	b	12e30 <__assert_fail@plt+0x1b70>
   12e0c:	b	12e14 <__assert_fail@plt+0x1b54>
   12e10:	b	12ec4 <__assert_fail@plt+0x1c04>
   12e14:	ldrb	r0, [r9, #8]
   12e18:	mvn	r4, #0
   12e1c:	mvn	r5, #0
   12e20:	strd	r4, [r8, #8]
   12e24:	ldr	r3, [r9, #4]
   12e28:	str	r3, [r8, #4]
   12e2c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12e30:	cmp	r1, #0
   12e34:	ldr	r6, [r9, #8]
   12e38:	beq	12e54 <__assert_fail@plt+0x1b94>
   12e3c:	cmp	r6, #6
   12e40:	beq	12f40 <__assert_fail@plt+0x1c80>
   12e44:	cmp	r6, #10
   12e48:	moveq	r3, #1
   12e4c:	streq	r3, [r1]
   12e50:	ldreq	r6, [r9, #8]
   12e54:	ldrd	r2, [r8, #8]
   12e58:	mvn	r4, #0
   12e5c:	mvn	r5, #0
   12e60:	cmp	r3, r5
   12e64:	cmpeq	r2, r4
   12e68:	movne	r7, r2
   12e6c:	beq	12f50 <__assert_fail@plt+0x1c90>
   12e70:	mov	r0, r6
   12e74:	uxtb	r1, r7
   12e78:	bl	129f8 <__assert_fail@plt+0x1738>
   12e7c:	cmp	r0, #0
   12e80:	beq	1304c <__assert_fail@plt+0x1d8c>
   12e84:	add	r4, r7, #1
   12e88:	cmp	r4, #255	; 0xff
   12e8c:	ble	12ea0 <__assert_fail@plt+0x1be0>
   12e90:	b	12f24 <__assert_fail@plt+0x1c64>
   12e94:	add	r4, r4, #1
   12e98:	cmp	r4, #256	; 0x100
   12e9c:	beq	12f24 <__assert_fail@plt+0x1c64>
   12ea0:	mov	r0, r6
   12ea4:	uxtb	r1, r4
   12ea8:	bl	129f8 <__assert_fail@plt+0x1738>
   12eac:	cmp	r0, #0
   12eb0:	beq	12e94 <__assert_fail@plt+0x1bd4>
   12eb4:	asr	r5, r4, #31
   12eb8:	mov	r0, r7
   12ebc:	strd	r4, [r8, #8]
   12ec0:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12ec4:	ldrd	r2, [r9, #16]
   12ec8:	orrs	ip, r2, r3
   12ecc:	bne	12fe4 <__assert_fail@plt+0x1d24>
   12ed0:	ldr	r3, [r9, #4]
   12ed4:	strd	r6, [r8, #8]
   12ed8:	str	r3, [r8, #4]
   12edc:	b	12dbc <__assert_fail@plt+0x1afc>
   12ee0:	ldrd	r2, [r8, #8]
   12ee4:	mvn	r0, #0
   12ee8:	mvn	r1, #0
   12eec:	cmp	r3, r1
   12ef0:	cmpeq	r2, r0
   12ef4:	beq	12fa8 <__assert_fail@plt+0x1ce8>
   12ef8:	adds	r2, r2, #1
   12efc:	adc	r3, r3, #0
   12f00:	strd	r2, [r8, #8]
   12f04:	ldrb	r0, [r9, #9]
   12f08:	mov	r1, #0
   12f0c:	cmp	r1, r3
   12f10:	cmpeq	r0, r2
   12f14:	beq	12f8c <__assert_fail@plt+0x1ccc>
   12f18:	mov	r0, r2
   12f1c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12f20:	bl	112a8 <abort@plt>
   12f24:	ldr	r3, [r9, #4]
   12f28:	mvn	r4, #0
   12f2c:	mvn	r5, #0
   12f30:	mov	r0, r7
   12f34:	strd	r4, [r8, #8]
   12f38:	str	r3, [r8, #4]
   12f3c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12f40:	mov	r3, #0
   12f44:	str	r3, [r1]
   12f48:	ldr	r6, [r9, #8]
   12f4c:	b	12e54 <__assert_fail@plt+0x1b94>
   12f50:	mov	r7, #0
   12f54:	b	12f64 <__assert_fail@plt+0x1ca4>
   12f58:	add	r7, r7, #1
   12f5c:	cmp	r7, #256	; 0x100
   12f60:	beq	12fc0 <__assert_fail@plt+0x1d00>
   12f64:	mov	r0, r6
   12f68:	uxtb	r1, r7
   12f6c:	bl	129f8 <__assert_fail@plt+0x1738>
   12f70:	cmp	r0, #0
   12f74:	beq	12f58 <__assert_fail@plt+0x1c98>
   12f78:	mov	r4, r7
   12f7c:	asr	r5, r7, #31
   12f80:	strd	r4, [r8, #8]
   12f84:	ldr	r6, [r9, #8]
   12f88:	b	12e70 <__assert_fail@plt+0x1bb0>
   12f8c:	ldr	r3, [r9, #4]
   12f90:	mvn	r4, #0
   12f94:	mvn	r5, #0
   12f98:	mov	r0, r2
   12f9c:	strd	r4, [r8, #8]
   12fa0:	str	r3, [r8, #4]
   12fa4:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12fa8:	ldrb	r2, [r9, #8]
   12fac:	mov	r3, #0
   12fb0:	strd	r2, [r8, #8]
   12fb4:	b	12f04 <__assert_fail@plt+0x1c44>
   12fb8:	mvn	r0, #0
   12fbc:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   12fc0:	ldr	r3, [pc, #168]	; 13070 <__assert_fail@plt+0x1db0>
   12fc4:	movw	r2, #1098	; 0x44a
   12fc8:	ldr	r0, [pc, #164]	; 13074 <__assert_fail@plt+0x1db4>
   12fcc:	ldr	r1, [pc, #164]	; 13078 <__assert_fail@plt+0x1db8>
   12fd0:	add	r3, pc, r3
   12fd4:	add	r0, pc, r0
   12fd8:	add	r3, r3, #16
   12fdc:	add	r1, pc, r1
   12fe0:	bl	112c0 <__assert_fail@plt>
   12fe4:	ldrd	r0, [r8, #8]
   12fe8:	mvn	r2, #0
   12fec:	mvn	r3, #0
   12ff0:	cmp	r1, r3
   12ff4:	cmpeq	r0, r2
   12ff8:	beq	13024 <__assert_fail@plt+0x1d64>
   12ffc:	adds	r0, r0, #1
   13000:	adc	r1, r1, #0
   13004:	strd	r0, [r8, #8]
   13008:	ldrd	r2, [r9, #16]
   1300c:	ldrb	ip, [r9, #8]
   13010:	cmp	r1, r3
   13014:	cmpeq	r0, r2
   13018:	beq	13030 <__assert_fail@plt+0x1d70>
   1301c:	mov	r0, ip
   13020:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13024:	mov	r0, #1
   13028:	mov	r1, #0
   1302c:	b	13004 <__assert_fail@plt+0x1d44>
   13030:	ldr	r3, [r9, #4]
   13034:	mvn	r4, #0
   13038:	mvn	r5, #0
   1303c:	mov	r0, ip
   13040:	strd	r4, [r8, #8]
   13044:	str	r3, [r8, #4]
   13048:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   1304c:	ldr	r3, [pc, #40]	; 1307c <__assert_fail@plt+0x1dbc>
   13050:	movw	r2, #1101	; 0x44d
   13054:	ldr	r0, [pc, #36]	; 13080 <__assert_fail@plt+0x1dc0>
   13058:	ldr	r1, [pc, #36]	; 13084 <__assert_fail@plt+0x1dc4>
   1305c:	add	r3, pc, r3
   13060:	add	r0, pc, r0
   13064:	add	r3, r3, #16
   13068:	add	r1, pc, r1
   1306c:	bl	112c0 <__assert_fail@plt>
   13070:			; <UNDEFINED> instruction: 0x00004ab8
   13074:	andeq	r4, r0, r8, lsl ip
   13078:			; <UNDEFINED> instruction: 0x00004bb4
   1307c:	andeq	r4, r0, ip, lsr #20
   13080:	andeq	r4, r0, r8, asr fp
   13084:	andeq	r4, r0, r8, lsr #22
   13088:	push	{r3, r4, r5, lr}
   1308c:	mov	r2, r1
   13090:	mov	r1, r0
   13094:	mov	r0, #0
   13098:	bl	15854 <close_stdout@@Base+0x1a58>
   1309c:	cmn	r0, #1
   130a0:	mov	r4, r0
   130a4:	beq	130b0 <__assert_fail@plt+0x1df0>
   130a8:	mov	r0, r4
   130ac:	pop	{r3, r4, r5, pc}
   130b0:	bl	111e8 <__errno_location@plt>
   130b4:	ldr	r1, [pc, #40]	; 130e4 <__assert_fail@plt+0x1e24>
   130b8:	mov	r2, #5
   130bc:	add	r1, pc, r1
   130c0:	ldr	r5, [r0]
   130c4:	mov	r0, #0
   130c8:	bl	110b0 <dcgettext@plt>
   130cc:	mov	r1, r5
   130d0:	mov	r2, r0
   130d4:	mov	r0, #1
   130d8:	bl	11134 <error@plt>
   130dc:	mov	r0, r4
   130e0:	pop	{r3, r4, r5, pc}
   130e4:	andeq	r4, r0, ip, lsr fp
   130e8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   130ec:	mov	sl, r0
   130f0:	ldr	r7, [pc, #160]	; 13198 <__assert_fail@plt+0x1ed8>
   130f4:	mov	r6, r1
   130f8:	ldr	r8, [pc, #156]	; 1319c <__assert_fail@plt+0x1edc>
   130fc:	ldr	r9, [pc, #156]	; 131a0 <__assert_fail@plt+0x1ee0>
   13100:	add	r7, pc, r7
   13104:	add	r8, pc, r8
   13108:	add	r9, pc, r9
   1310c:	mov	r0, sl
   13110:	mov	r1, r6
   13114:	bl	13088 <__assert_fail@plt+0x1dc8>
   13118:	cmp	r0, #0
   1311c:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   13120:	ldrb	r3, [sl]
   13124:	ldrb	ip, [r7, r3]
   13128:	cmp	ip, #0
   1312c:	movne	r3, #1
   13130:	movne	ip, #0
   13134:	bne	1315c <__assert_fail@plt+0x1e9c>
   13138:	mov	r3, sl
   1313c:	add	ip, ip, #1
   13140:	cmp	ip, r0
   13144:	beq	13158 <__assert_fail@plt+0x1e98>
   13148:	ldrb	r2, [r3, #1]!
   1314c:	ldrb	r2, [r8, r2]
   13150:	cmp	r2, #0
   13154:	beq	1313c <__assert_fail@plt+0x1e7c>
   13158:	add	r3, ip, #1
   1315c:	cmp	r3, r0
   13160:	bcs	13188 <__assert_fail@plt+0x1ec8>
   13164:	add	r3, sl, r3
   13168:	add	r5, sl, r0
   1316c:	ldrb	r2, [r3], #1
   13170:	ldrb	r4, [r9, r2]
   13174:	cmp	r4, #0
   13178:	strbeq	r2, [sl, ip]
   1317c:	addeq	ip, ip, #1
   13180:	cmp	r3, r5
   13184:	bne	1316c <__assert_fail@plt+0x1eac>
   13188:	cmp	ip, #0
   1318c:	beq	1310c <__assert_fail@plt+0x1e4c>
   13190:	mov	r0, ip
   13194:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13198:	andeq	r7, r1, r4, lsl #1
   1319c:	andeq	r7, r1, r0, lsl #1
   131a0:	andeq	r7, r1, ip, ror r0
   131a4:	push	{r4, lr}
   131a8:	mov	r4, r0
   131ac:	bl	13088 <__assert_fail@plt+0x1dc8>
   131b0:	cmp	r0, #0
   131b4:	popeq	{r4, pc}
   131b8:	ldr	ip, [pc, #36]	; 131e4 <__assert_fail@plt+0x1f24>
   131bc:	add	r1, r4, r0
   131c0:	mov	r3, r4
   131c4:	add	ip, pc, ip
   131c8:	ldrb	r2, [r3]
   131cc:	add	r2, ip, r2
   131d0:	ldrb	r2, [r2, #256]	; 0x100
   131d4:	strb	r2, [r3], #1
   131d8:	cmp	r3, r1
   131dc:	bne	131c8 <__assert_fail@plt+0x1f08>
   131e0:	pop	{r4, pc}
   131e4:	andeq	r6, r1, r0, asr #31
   131e8:	push	{r3, r4, r5, lr}
   131ec:	mov	r4, r0
   131f0:	mov	r0, #24
   131f4:	mov	r5, r1
   131f8:	bl	15e54 <close_stdout@@Base+0x2058>
   131fc:	mov	r2, #0
   13200:	mov	r3, r0
   13204:	ldr	r0, [r4]
   13208:	strb	r5, [r3, #8]
   1320c:	cmp	r0, r2
   13210:	str	r2, [r3, #4]
   13214:	str	r2, [r3]
   13218:	strne	r3, [r0, #4]
   1321c:	strne	r3, [r4]
   13220:	popne	{r3, r4, r5, pc}
   13224:	ldr	r3, [pc, #28]	; 13248 <__assert_fail@plt+0x1f88>
   13228:	mov	r2, #652	; 0x28c
   1322c:	ldr	r0, [pc, #24]	; 1324c <__assert_fail@plt+0x1f8c>
   13230:	ldr	r1, [pc, #24]	; 13250 <__assert_fail@plt+0x1f90>
   13234:	add	r3, pc, r3
   13238:	add	r0, pc, r0
   1323c:	add	r3, r3, #52	; 0x34
   13240:	add	r1, pc, r1
   13244:	bl	112c0 <__assert_fail@plt>
   13248:	andeq	r4, r0, r4, asr r8
   1324c:	andeq	r4, r0, ip, asr #19
   13250:	andeq	r4, r0, r0, asr r9
   13254:	ldr	r3, [pc, #2252]	; 13b28 <__assert_fail@plt+0x2868>
   13258:	ldr	r2, [pc, #2252]	; 13b2c <__assert_fail@plt+0x286c>
   1325c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13260:	add	r3, pc, r3
   13264:	sub	sp, sp, #124	; 0x7c
   13268:	mov	r6, r0
   1326c:	str	r1, [sp, #36]	; 0x24
   13270:	ldr	r2, [r3, r2]
   13274:	ldr	r3, [r2]
   13278:	str	r2, [sp, #44]	; 0x2c
   1327c:	str	r3, [sp, #116]	; 0x74
   13280:	bl	111c4 <strlen@plt>
   13284:	mov	r4, r0
   13288:	bl	15e54 <close_stdout@@Base+0x2058>
   1328c:	mov	r1, #1
   13290:	str	r0, [sp, #32]
   13294:	mov	r0, r4
   13298:	ldr	ip, [sp, #32]
   1329c:	str	ip, [sp, #104]	; 0x68
   132a0:	bl	16014 <close_stdout@@Base+0x2218>
   132a4:	ldrb	fp, [r6]
   132a8:	cmp	fp, #0
   132ac:	mov	r9, r0
   132b0:	str	r0, [sp, #108]	; 0x6c
   132b4:	beq	133d8 <__assert_fail@plt+0x2118>
   132b8:	ldr	sl, [pc, #2160]	; 13b30 <__assert_fail@plt+0x2870>
   132bc:	mov	r4, #0
   132c0:	ldr	ip, [pc, #2156]	; 13b34 <__assert_fail@plt+0x2874>
   132c4:	mov	r3, fp
   132c8:	add	sl, pc, sl
   132cc:	mov	r7, #1
   132d0:	add	ip, pc, ip
   132d4:	mov	lr, r4
   132d8:	mov	fp, sl
   132dc:	str	ip, [sp, #40]	; 0x28
   132e0:	ldr	sl, [sp, #32]
   132e4:	b	13330 <__assert_fail@plt+0x2070>
   132e8:	cmp	r5, #114	; 0x72
   132ec:	moveq	r5, #13
   132f0:	beq	1330c <__assert_fail@plt+0x204c>
   132f4:	bhi	133ac <__assert_fail@plt+0x20ec>
   132f8:	cmp	r5, #102	; 0x66
   132fc:	moveq	r5, #12
   13300:	beq	1330c <__assert_fail@plt+0x204c>
   13304:	cmp	r5, #110	; 0x6e
   13308:	moveq	r5, #10
   1330c:	mov	lr, r8
   13310:	strb	r5, [sl, r4]
   13314:	add	lr, lr, #1
   13318:	add	r4, r4, #1
   1331c:	add	r2, r7, #1
   13320:	ldrb	r3, [r6, lr]
   13324:	cmp	r3, #0
   13328:	beq	133dc <__assert_fail@plt+0x211c>
   1332c:	mov	r7, r2
   13330:	cmp	r3, #92	; 0x5c
   13334:	strbne	r3, [sl, r4]
   13338:	bne	13314 <__assert_fail@plt+0x2054>
   1333c:	add	r8, lr, #1
   13340:	mov	r2, #1
   13344:	add	ip, r6, r8
   13348:	strb	r2, [r9, r4]
   1334c:	ldrb	r5, [r6, r8]
   13350:	cmp	r5, #98	; 0x62
   13354:	beq	1382c <__assert_fail@plt+0x256c>
   13358:	bhi	132e8 <__assert_fail@plt+0x2028>
   1335c:	cmp	r5, #55	; 0x37
   13360:	bhi	133c4 <__assert_fail@plt+0x2104>
   13364:	cmp	r5, #48	; 0x30
   13368:	bcs	13834 <__assert_fail@plt+0x2574>
   1336c:	cmp	r5, #0
   13370:	bne	1330c <__assert_fail@plt+0x204c>
   13374:	mov	r0, r5
   13378:	mov	r1, fp
   1337c:	mov	r2, #5
   13380:	str	r3, [sp, #24]
   13384:	mov	r8, lr
   13388:	bl	110b0 <dcgettext@plt>
   1338c:	mov	r1, r5
   13390:	mov	r2, r0
   13394:	mov	r0, r5
   13398:	bl	11134 <error@plt>
   1339c:	strb	r5, [r9, r4]
   133a0:	ldr	r3, [sp, #24]
   133a4:	mov	r5, r3
   133a8:	b	1330c <__assert_fail@plt+0x204c>
   133ac:	cmp	r5, #116	; 0x74
   133b0:	moveq	r5, #9
   133b4:	beq	1330c <__assert_fail@plt+0x204c>
   133b8:	cmp	r5, #118	; 0x76
   133bc:	moveq	r5, #11
   133c0:	b	1330c <__assert_fail@plt+0x204c>
   133c4:	cmp	r5, #92	; 0x5c
   133c8:	beq	1330c <__assert_fail@plt+0x204c>
   133cc:	cmp	r5, #97	; 0x61
   133d0:	moveq	r5, #7
   133d4:	b	1330c <__assert_fail@plt+0x204c>
   133d8:	mov	r7, fp
   133dc:	ldr	r5, [sp, #32]
   133e0:	add	ip, sp, #92	; 0x5c
   133e4:	str	ip, [sp, #48]	; 0x30
   133e8:	add	ip, sp, #96	; 0x60
   133ec:	str	ip, [sp, #52]	; 0x34
   133f0:	mov	fp, r9
   133f4:	ldr	ip, [pc, #1852]	; 13b38 <__assert_fail@plt+0x2878>
   133f8:	mov	sl, r7
   133fc:	mov	r6, #0
   13400:	str	r7, [sp, #112]	; 0x70
   13404:	add	ip, pc, ip
   13408:	str	ip, [sp, #60]	; 0x3c
   1340c:	add	r7, r6, #2
   13410:	cmp	r7, sl
   13414:	bcs	13458 <__assert_fail@plt+0x2198>
   13418:	ldrb	r3, [r5, r6]
   1341c:	cmp	r3, #91	; 0x5b
   13420:	beq	1348c <__assert_fail@plt+0x21cc>
   13424:	add	r3, r6, #1
   13428:	ldrb	r8, [r5, r3]
   1342c:	cmp	r8, #45	; 0x2d
   13430:	beq	134c8 <__assert_fail@plt+0x2208>
   13434:	ldr	ip, [sp, #32]
   13438:	ldrb	r1, [ip, r6]
   1343c:	mov	r6, r3
   13440:	ldr	ip, [sp, #36]	; 0x24
   13444:	add	r7, r6, #2
   13448:	add	r0, ip, #4
   1344c:	bl	131e8 <__assert_fail@plt+0x1f28>
   13450:	cmp	r7, sl
   13454:	bcc	13418 <__assert_fail@plt+0x2158>
   13458:	cmp	sl, r6
   1345c:	bls	13484 <__assert_fail@plt+0x21c4>
   13460:	ldr	ip, [sp, #36]	; 0x24
   13464:	ldr	r7, [sp, #32]
   13468:	add	r4, ip, #4
   1346c:	ldrb	r1, [r7, r6]
   13470:	mov	r0, r4
   13474:	add	r6, r6, #1
   13478:	bl	131e8 <__assert_fail@plt+0x1f28>
   1347c:	cmp	sl, r6
   13480:	bhi	1346c <__assert_fail@plt+0x21ac>
   13484:	mov	r4, #1
   13488:	b	13680 <__assert_fail@plt+0x23c0>
   1348c:	ldrb	r3, [fp, r6]
   13490:	cmp	r3, #0
   13494:	bne	13424 <__assert_fail@plt+0x2164>
   13498:	add	r9, r6, #1
   1349c:	ldrb	r8, [r5, r9]
   134a0:	cmp	r8, #58	; 0x3a
   134a4:	beq	13528 <__assert_fail@plt+0x2268>
   134a8:	cmp	r8, #61	; 0x3d
   134ac:	beq	13528 <__assert_fail@plt+0x2268>
   134b0:	ldrb	r3, [r5, r7]
   134b4:	cmp	r3, #42	; 0x2a
   134b8:	beq	136b0 <__assert_fail@plt+0x23f0>
   134bc:	cmp	r8, #45	; 0x2d
   134c0:	mov	r3, r9
   134c4:	bne	13434 <__assert_fail@plt+0x2174>
   134c8:	ldrb	r4, [fp, r3]
   134cc:	cmp	r4, #0
   134d0:	bne	13434 <__assert_fail@plt+0x2174>
   134d4:	ldr	ip, [sp, #32]
   134d8:	ldrb	r7, [ip, r7]
   134dc:	ldrb	r8, [ip, r6]
   134e0:	cmp	r8, r7
   134e4:	bhi	13628 <__assert_fail@plt+0x2368>
   134e8:	mov	r0, #24
   134ec:	bl	15e54 <close_stdout@@Base+0x2058>
   134f0:	ldr	ip, [sp, #36]	; 0x24
   134f4:	mov	r3, #1
   134f8:	str	r4, [r0, #4]
   134fc:	strb	r8, [r0, #8]
   13500:	strb	r7, [r0, #9]
   13504:	str	r3, [r0]
   13508:	ldr	r3, [ip, #4]
   1350c:	cmp	r3, #0
   13510:	beq	13ae0 <__assert_fail@plt+0x2820>
   13514:	ldr	ip, [sp, #36]	; 0x24
   13518:	add	r6, r6, #3
   1351c:	str	r0, [r3, #4]
   13520:	str	r0, [ip, #4]
   13524:	b	1340c <__assert_fail@plt+0x214c>
   13528:	ldrb	r3, [fp, r9]
   1352c:	cmp	r3, #0
   13530:	bne	134b0 <__assert_fail@plt+0x21f0>
   13534:	sub	r3, sl, #1
   13538:	ldr	ip, [sp, #32]
   1353c:	cmp	r7, r3
   13540:	ldrb	r1, [ip, r9]
   13544:	bcs	134b0 <__assert_fail@plt+0x21f0>
   13548:	add	r2, r6, #3
   1354c:	mov	r4, r7
   13550:	b	13564 <__assert_fail@plt+0x22a4>
   13554:	cmp	r2, r3
   13558:	add	r4, r4, #1
   1355c:	add	r2, r2, #1
   13560:	bcs	134b0 <__assert_fail@plt+0x21f0>
   13564:	ldrb	r0, [r5, r4]
   13568:	cmp	r0, r1
   1356c:	bne	13554 <__assert_fail@plt+0x2294>
   13570:	ldrb	r0, [r5, r2]
   13574:	cmp	r0, #93	; 0x5d
   13578:	bne	13554 <__assert_fail@plt+0x2294>
   1357c:	ldrb	r0, [fp, r4]
   13580:	cmp	r0, #0
   13584:	bne	13554 <__assert_fail@plt+0x2294>
   13588:	ldrb	ip, [fp, r2]
   1358c:	cmp	ip, #0
   13590:	bne	13554 <__assert_fail@plt+0x2294>
   13594:	movw	r3, #65534	; 0xfffe
   13598:	movt	r3, #65535	; 0xffff
   1359c:	rsb	r3, r6, r3
   135a0:	ldr	r0, [sp, #32]
   135a4:	adds	r3, r3, r4
   135a8:	str	r3, [sp, #40]	; 0x28
   135ac:	add	r0, r0, r7
   135b0:	str	r0, [sp, #80]	; 0x50
   135b4:	beq	13a1c <__assert_fail@plt+0x275c>
   135b8:	cmp	r1, #58	; 0x3a
   135bc:	beq	13894 <__assert_fail@plt+0x25d4>
   135c0:	ldr	r3, [sp, #40]	; 0x28
   135c4:	cmp	r3, #1
   135c8:	beq	13978 <__assert_fail@plt+0x26b8>
   135cc:	add	r0, sp, #104	; 0x68
   135d0:	mov	r1, r7
   135d4:	bl	12734 <__assert_fail@plt+0x1474>
   135d8:	cmp	r0, #0
   135dc:	bne	134b0 <__assert_fail@plt+0x21f0>
   135e0:	mov	r4, r0
   135e4:	ldr	r1, [sp, #40]	; 0x28
   135e8:	ldr	r0, [sp, #80]	; 0x50
   135ec:	bl	12830 <__assert_fail@plt+0x1570>
   135f0:	ldr	r1, [pc, #1348]	; 13b3c <__assert_fail@plt+0x287c>
   135f4:	mov	r2, #5
   135f8:	add	r1, pc, r1
   135fc:	mov	r6, r0
   13600:	mov	r0, r4
   13604:	bl	110b0 <dcgettext@plt>
   13608:	mov	r1, r4
   1360c:	mov	r3, r6
   13610:	mov	r2, r0
   13614:	mov	r0, r4
   13618:	bl	11134 <error@plt>
   1361c:	mov	r0, r6
   13620:	bl	11050 <free@plt>
   13624:	b	1367c <__assert_fail@plt+0x23bc>
   13628:	mov	r0, r8
   1362c:	bl	127bc <__assert_fail@plt+0x14fc>
   13630:	mov	r8, r0
   13634:	mov	r0, r7
   13638:	bl	127bc <__assert_fail@plt+0x14fc>
   1363c:	ldr	r1, [pc, #1276]	; 13b40 <__assert_fail@plt+0x2880>
   13640:	mov	r2, #5
   13644:	add	r1, pc, r1
   13648:	mov	r6, r0
   1364c:	mov	r0, r4
   13650:	bl	110b0 <dcgettext@plt>
   13654:	mov	r1, r4
   13658:	mov	r3, r8
   1365c:	str	r6, [sp]
   13660:	mov	r2, r0
   13664:	mov	r0, r4
   13668:	bl	11134 <error@plt>
   1366c:	mov	r0, r8
   13670:	bl	11050 <free@plt>
   13674:	mov	r0, r6
   13678:	bl	11050 <free@plt>
   1367c:	mov	r4, #0
   13680:	mov	r0, r5
   13684:	bl	11050 <free@plt>
   13688:	mov	r0, fp
   1368c:	bl	11050 <free@plt>
   13690:	ldr	ip, [sp, #44]	; 0x2c
   13694:	ldr	r2, [sp, #116]	; 0x74
   13698:	mov	r0, r4
   1369c:	ldr	r3, [ip]
   136a0:	cmp	r2, r3
   136a4:	bne	13b24 <__assert_fail@plt+0x2864>
   136a8:	add	sp, sp, #124	; 0x7c
   136ac:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   136b0:	ldrb	r3, [fp, r7]
   136b4:	cmp	r3, #0
   136b8:	bne	134bc <__assert_fail@plt+0x21fc>
   136bc:	add	r4, r6, #3
   136c0:	cmp	sl, r4
   136c4:	bls	134bc <__assert_fail@plt+0x21fc>
   136c8:	ldrb	r3, [fp, r4]
   136cc:	cmp	r3, #0
   136d0:	bne	134bc <__assert_fail@plt+0x21fc>
   136d4:	ldrb	r2, [r5, r4]
   136d8:	add	ip, r5, r4
   136dc:	cmp	r2, #93	; 0x5d
   136e0:	beq	13b08 <__assert_fail@plt+0x2848>
   136e4:	add	r4, r4, #1
   136e8:	cmp	sl, r4
   136ec:	bls	134bc <__assert_fail@plt+0x21fc>
   136f0:	ldrb	r3, [fp, r4]
   136f4:	cmp	r3, #0
   136f8:	bne	134bc <__assert_fail@plt+0x21fc>
   136fc:	ldrb	r3, [r5, r4]
   13700:	cmp	r3, #93	; 0x5d
   13704:	bne	136e4 <__assert_fail@plt+0x2424>
   13708:	movw	r9, #65533	; 0xfffd
   1370c:	movt	r9, #65535	; 0xffff
   13710:	rsb	r9, r6, r9
   13714:	adds	r9, r9, r4
   13718:	bne	13780 <__assert_fail@plt+0x24c0>
   1371c:	mov	r0, #0
   13720:	mov	r1, #0
   13724:	mov	r6, r0
   13728:	mov	r7, r1
   1372c:	strd	r0, [sp, #96]	; 0x60
   13730:	mov	r0, #24
   13734:	bl	15e54 <close_stdout@@Base+0x2058>
   13738:	ldr	ip, [sp, #36]	; 0x24
   1373c:	mov	r2, #0
   13740:	mov	r3, #4
   13744:	strb	r8, [r0, #8]
   13748:	strd	r6, [r0, #16]
   1374c:	str	r2, [r0, #4]
   13750:	str	r3, [r0]
   13754:	ldr	r3, [ip, #4]
   13758:	cmp	r3, r2
   1375c:	beq	13b04 <__assert_fail@plt+0x2844>
   13760:	ldr	ip, [sp, #36]	; 0x24
   13764:	add	r6, r4, #1
   13768:	str	r0, [r3, #4]
   1376c:	ldr	fp, [sp, #108]	; 0x6c
   13770:	str	r0, [ip, #4]
   13774:	ldr	sl, [sp, #112]	; 0x70
   13778:	ldr	r5, [sp, #104]	; 0x68
   1377c:	b	1340c <__assert_fail@plt+0x214c>
   13780:	cmp	r2, #48	; 0x30
   13784:	movne	r2, #10
   13788:	moveq	r2, #8
   1378c:	mov	r3, #0
   13790:	mov	r0, ip
   13794:	str	r3, [sp]
   13798:	add	r1, sp, #92	; 0x5c
   1379c:	add	r3, sp, #96	; 0x60
   137a0:	str	ip, [sp, #28]
   137a4:	bl	160c0 <close_stdout@@Base+0x22c4>
   137a8:	ldr	ip, [sp, #28]
   137ac:	cmp	r0, #0
   137b0:	bne	137dc <__assert_fail@plt+0x251c>
   137b4:	ldrd	r6, [sp, #96]	; 0x60
   137b8:	mvn	r2, #0
   137bc:	mvn	r3, #0
   137c0:	cmp	r7, r3
   137c4:	cmpeq	r6, r2
   137c8:	beq	137dc <__assert_fail@plt+0x251c>
   137cc:	ldr	r2, [sp, #92]	; 0x5c
   137d0:	add	r3, ip, r9
   137d4:	cmp	r2, r3
   137d8:	beq	13730 <__assert_fail@plt+0x2470>
   137dc:	mov	r0, ip
   137e0:	mov	r1, r9
   137e4:	bl	12830 <__assert_fail@plt+0x1570>
   137e8:	ldr	r1, [pc, #852]	; 13b44 <__assert_fail@plt+0x2884>
   137ec:	mov	r2, #5
   137f0:	add	r1, pc, r1
   137f4:	mov	r4, r0
   137f8:	mov	r0, #0
   137fc:	bl	110b0 <dcgettext@plt>
   13800:	mov	r6, r0
   13804:	mov	r0, r4
   13808:	bl	15848 <close_stdout@@Base+0x1a4c>
   1380c:	mov	r2, r6
   13810:	mov	r3, r0
   13814:	mov	r0, #0
   13818:	mov	r1, r0
   1381c:	bl	11134 <error@plt>
   13820:	mov	r0, r4
   13824:	bl	11050 <free@plt>
   13828:	b	1367c <__assert_fail@plt+0x23bc>
   1382c:	mov	r5, #8
   13830:	b	1330c <__assert_fail@plt+0x204c>
   13834:	add	r3, lr, #2
   13838:	sub	r5, r5, #48	; 0x30
   1383c:	ldrb	r2, [r6, r3]
   13840:	uxtb	r5, r5
   13844:	sub	r2, r2, #48	; 0x30
   13848:	cmp	r2, #7
   1384c:	bhi	1330c <__assert_fail@plt+0x204c>
   13850:	add	r0, lr, #3
   13854:	add	r5, r2, r5, lsl #3
   13858:	str	r0, [sp, #48]	; 0x30
   1385c:	and	r5, r5, #255	; 0xff
   13860:	ldrb	r2, [r6, r0]
   13864:	sub	r2, r2, #48	; 0x30
   13868:	cmp	r2, #7
   1386c:	addhi	r8, r8, #1
   13870:	bhi	1330c <__assert_fail@plt+0x204c>
   13874:	mov	r0, #8
   13878:	smlabb	r1, r0, r5, r2
   1387c:	cmp	r1, #255	; 0xff
   13880:	bgt	13a4c <__assert_fail@plt+0x278c>
   13884:	add	r5, r2, r5, lsl #3
   13888:	add	r8, lr, #3
   1388c:	and	r5, r5, #255	; 0xff
   13890:	b	1330c <__assert_fail@plt+0x204c>
   13894:	ldr	r1, [sp, #60]	; 0x3c
   13898:	str	r6, [sp, #64]	; 0x40
   1389c:	sub	r1, r1, #4
   138a0:	str	r7, [sp, #72]	; 0x48
   138a4:	ldr	r6, [sp, #40]	; 0x28
   138a8:	ldr	r7, [sp, #80]	; 0x50
   138ac:	str	r4, [sp, #84]	; 0x54
   138b0:	mov	r4, r1
   138b4:	str	r8, [sp, #76]	; 0x4c
   138b8:	mov	r8, ip
   138bc:	str	r9, [sp, #68]	; 0x44
   138c0:	str	r5, [sp, #56]	; 0x38
   138c4:	ldr	r5, [r4, #4]!
   138c8:	mov	r0, r7
   138cc:	mov	r2, r6
   138d0:	mov	r1, r5
   138d4:	bl	1129c <strncmp@plt>
   138d8:	subs	r9, r0, #0
   138dc:	bne	138f0 <__assert_fail@plt+0x2630>
   138e0:	mov	r0, r5
   138e4:	bl	111c4 <strlen@plt>
   138e8:	cmp	r6, r0
   138ec:	beq	139c0 <__assert_fail@plt+0x2700>
   138f0:	add	r8, r8, #1
   138f4:	cmp	r8, #12
   138f8:	bne	138c4 <__assert_fail@plt+0x2604>
   138fc:	ldr	r7, [sp, #72]	; 0x48
   13900:	add	r0, sp, #104	; 0x68
   13904:	ldr	r6, [sp, #64]	; 0x40
   13908:	ldr	r9, [sp, #68]	; 0x44
   1390c:	mov	r1, r7
   13910:	ldr	r5, [sp, #56]	; 0x38
   13914:	bl	12734 <__assert_fail@plt+0x1474>
   13918:	ldr	r8, [sp, #76]	; 0x4c
   1391c:	cmp	r0, #0
   13920:	bne	134b0 <__assert_fail@plt+0x21f0>
   13924:	mov	r4, r0
   13928:	ldr	r1, [sp, #40]	; 0x28
   1392c:	ldr	r0, [sp, #80]	; 0x50
   13930:	bl	12830 <__assert_fail@plt+0x1570>
   13934:	ldr	r1, [pc, #524]	; 13b48 <__assert_fail@plt+0x2888>
   13938:	mov	r2, #5
   1393c:	add	r1, pc, r1
   13940:	mov	r6, r0
   13944:	mov	r0, r4
   13948:	bl	110b0 <dcgettext@plt>
   1394c:	mov	r7, r0
   13950:	mov	r0, r6
   13954:	bl	15848 <close_stdout@@Base+0x1a4c>
   13958:	mov	r1, r4
   1395c:	mov	r2, r7
   13960:	mov	r3, r0
   13964:	mov	r0, r4
   13968:	bl	11134 <error@plt>
   1396c:	mov	r0, r6
   13970:	bl	11050 <free@plt>
   13974:	b	1367c <__assert_fail@plt+0x23bc>
   13978:	mov	r0, #24
   1397c:	str	ip, [sp, #28]
   13980:	bl	15e54 <close_stdout@@Base+0x2058>
   13984:	ldr	ip, [sp, #28]
   13988:	ldr	r1, [sp, #32]
   1398c:	mov	r2, #3
   13990:	ldrb	r3, [r1, r7]
   13994:	stm	r0, {r2, ip}
   13998:	ldr	ip, [sp, #36]	; 0x24
   1399c:	strb	r3, [r0, #8]
   139a0:	ldr	r3, [ip, #4]
   139a4:	cmp	r3, #0
   139a8:	beq	13abc <__assert_fail@plt+0x27fc>
   139ac:	str	r0, [r3, #4]
   139b0:	add	r6, r4, #2
   139b4:	ldr	ip, [sp, #36]	; 0x24
   139b8:	str	r0, [ip, #4]
   139bc:	b	1340c <__assert_fail@plt+0x214c>
   139c0:	mov	r0, #24
   139c4:	ldr	r4, [sp, #84]	; 0x54
   139c8:	ldr	r5, [sp, #56]	; 0x38
   139cc:	str	r8, [sp, #24]
   139d0:	bl	15e54 <close_stdout@@Base+0x2058>
   139d4:	ldr	ip, [sp, #36]	; 0x24
   139d8:	mov	r2, #2
   139dc:	str	r9, [r0, #4]
   139e0:	ldr	r3, [sp, #24]
   139e4:	str	r2, [r0]
   139e8:	str	r3, [r0, #8]
   139ec:	ldr	r3, [ip, #4]
   139f0:	cmp	r3, #0
   139f4:	bne	139ac <__assert_fail@plt+0x26ec>
   139f8:	ldr	r3, [pc, #332]	; 13b4c <__assert_fail@plt+0x288c>
   139fc:	movw	r2, #709	; 0x2c5
   13a00:	ldr	r0, [pc, #328]	; 13b50 <__assert_fail@plt+0x2890>
   13a04:	ldr	r1, [pc, #328]	; 13b54 <__assert_fail@plt+0x2894>
   13a08:	add	r3, pc, r3
   13a0c:	add	r0, pc, r0
   13a10:	add	r3, r3, #72	; 0x48
   13a14:	add	r1, pc, r1
   13a18:	bl	112c0 <__assert_fail@plt>
   13a1c:	cmp	r1, #58	; 0x3a
   13a20:	ldr	r0, [sp, #40]	; 0x28
   13a24:	beq	13ab0 <__assert_fail@plt+0x27f0>
   13a28:	ldr	r1, [pc, #296]	; 13b58 <__assert_fail@plt+0x2898>
   13a2c:	add	r1, pc, r1
   13a30:	mov	r2, #5
   13a34:	bl	110b0 <dcgettext@plt>
   13a38:	mov	r2, r0
   13a3c:	ldr	r0, [sp, #40]	; 0x28
   13a40:	mov	r1, r0
   13a44:	bl	11134 <error@plt>
   13a48:	b	1367c <__assert_fail@plt+0x23bc>
   13a4c:	ldr	r1, [sp, #40]	; 0x28
   13a50:	mov	r2, #5
   13a54:	mov	r0, #0
   13a58:	str	r3, [sp, #24]
   13a5c:	str	ip, [sp, #28]
   13a60:	bl	110b0 <dcgettext@plt>
   13a64:	ldr	r3, [sp, #24]
   13a68:	add	r8, r8, #1
   13a6c:	ldr	ip, [sp, #28]
   13a70:	ldrb	r3, [r6, r3]
   13a74:	ldrb	ip, [ip]
   13a78:	str	r3, [sp, #52]	; 0x34
   13a7c:	ldr	r3, [sp, #48]	; 0x30
   13a80:	ldrb	lr, [r6, r3]
   13a84:	mov	r3, ip
   13a88:	str	ip, [sp, #8]
   13a8c:	ldr	ip, [sp, #52]	; 0x34
   13a90:	str	lr, [sp, #16]
   13a94:	stm	sp, {ip, lr}
   13a98:	str	ip, [sp, #12]
   13a9c:	mov	r2, r0
   13aa0:	mov	r0, #0
   13aa4:	mov	r1, r0
   13aa8:	bl	11134 <error@plt>
   13aac:	b	1330c <__assert_fail@plt+0x204c>
   13ab0:	ldr	r1, [pc, #164]	; 13b5c <__assert_fail@plt+0x289c>
   13ab4:	add	r1, pc, r1
   13ab8:	b	13a30 <__assert_fail@plt+0x2770>
   13abc:	ldr	r3, [pc, #156]	; 13b60 <__assert_fail@plt+0x28a0>
   13ac0:	movw	r2, #754	; 0x2f2
   13ac4:	ldr	r0, [pc, #152]	; 13b64 <__assert_fail@plt+0x28a4>
   13ac8:	ldr	r1, [pc, #152]	; 13b68 <__assert_fail@plt+0x28a8>
   13acc:	add	r3, pc, r3
   13ad0:	add	r0, pc, r0
   13ad4:	add	r3, r3, #92	; 0x5c
   13ad8:	add	r1, pc, r1
   13adc:	bl	112c0 <__assert_fail@plt>
   13ae0:	ldr	r3, [pc, #132]	; 13b6c <__assert_fail@plt+0x28ac>
   13ae4:	mov	r2, #684	; 0x2ac
   13ae8:	ldr	r0, [pc, #128]	; 13b70 <__assert_fail@plt+0x28b0>
   13aec:	ldr	r1, [pc, #128]	; 13b74 <__assert_fail@plt+0x28b4>
   13af0:	add	r3, pc, r3
   13af4:	add	r0, pc, r0
   13af8:	add	r3, r3, #112	; 0x70
   13afc:	add	r1, pc, r1
   13b00:	bl	112c0 <__assert_fail@plt>
   13b04:	bl	112cc <__assert_fail@plt+0xc>
   13b08:	movw	r9, #65533	; 0xfffd
   13b0c:	movt	r9, #65535	; 0xffff
   13b10:	rsb	r9, r6, r9
   13b14:	adds	r9, r9, r4
   13b18:	movne	r2, #10
   13b1c:	bne	1378c <__assert_fail@plt+0x24cc>
   13b20:	b	1371c <__assert_fail@plt+0x245c>
   13b24:	bl	110bc <__stack_chk_fail@plt>
   13b28:	muleq	r1, r8, sp
   13b2c:	andeq	r0, r0, r4, lsl #2
   13b30:	andeq	r4, r0, ip, lsr #19
   13b34:	andeq	r4, r0, r0, asr #18
   13b38:	andeq	r6, r1, r8, lsr sl
   13b3c:	andeq	r4, r0, ip, lsr #14
   13b40:	andeq	r4, r0, r8, asr #14
   13b44:	andeq	r4, r0, r0, ror r5
   13b48:	andeq	r4, r0, ip, asr #7
   13b4c:	andeq	r4, r0, r0, lsl #1
   13b50:	strdeq	r4, [r0], -r8
   13b54:	andeq	r4, r0, ip, ror r1
   13b58:			; <UNDEFINED> instruction: 0x000042b0
   13b5c:	andeq	r4, r0, r4, lsl #4
   13b60:			; <UNDEFINED> instruction: 0x00003fbc
   13b64:	andeq	r4, r0, r4, lsr r1
   13b68:	strheq	r4, [r0], -r8
   13b6c:	muleq	r0, r8, pc	; <UNPREDICTABLE>
   13b70:	andeq	r4, r0, r0, lsl r1
   13b74:	muleq	r0, r4, r0
   13b78:	push	{r4, r5, r6, lr}
   13b7c:	subs	r4, r0, #0
   13b80:	ldr	r5, [pc, #512]	; 13d88 <__assert_fail@plt+0x2ac8>
   13b84:	add	r5, pc, r5
   13b88:	beq	13bd0 <__assert_fail@plt+0x2910>
   13b8c:	ldr	r3, [pc, #504]	; 13d8c <__assert_fail@plt+0x2acc>
   13b90:	mov	r2, #5
   13b94:	ldr	r1, [pc, #500]	; 13d90 <__assert_fail@plt+0x2ad0>
   13b98:	mov	r0, #0
   13b9c:	ldr	r3, [r5, r3]
   13ba0:	add	r1, pc, r1
   13ba4:	ldr	r6, [r3]
   13ba8:	bl	110b0 <dcgettext@plt>
   13bac:	ldr	r3, [pc, #480]	; 13d94 <__assert_fail@plt+0x2ad4>
   13bb0:	mov	r1, #1
   13bb4:	ldr	r3, [r5, r3]
   13bb8:	ldr	r3, [r3]
   13bbc:	mov	r2, r0
   13bc0:	mov	r0, r6
   13bc4:	bl	1123c <__fprintf_chk@plt>
   13bc8:	mov	r0, r4
   13bcc:	bl	111b8 <exit@plt>
   13bd0:	ldr	r1, [pc, #448]	; 13d98 <__assert_fail@plt+0x2ad8>
   13bd4:	mov	r2, #5
   13bd8:	add	r1, pc, r1
   13bdc:	bl	110b0 <dcgettext@plt>
   13be0:	ldr	r3, [pc, #428]	; 13d94 <__assert_fail@plt+0x2ad4>
   13be4:	ldr	r6, [r5, r3]
   13be8:	ldr	r2, [r6]
   13bec:	mov	r1, r0
   13bf0:	mov	r0, #1
   13bf4:	bl	11224 <__printf_chk@plt>
   13bf8:	ldr	r1, [pc, #412]	; 13d9c <__assert_fail@plt+0x2adc>
   13bfc:	mov	r2, #5
   13c00:	mov	r0, r4
   13c04:	add	r1, pc, r1
   13c08:	bl	110b0 <dcgettext@plt>
   13c0c:	ldr	r3, [pc, #396]	; 13da0 <__assert_fail@plt+0x2ae0>
   13c10:	ldr	r5, [r5, r3]
   13c14:	ldr	r1, [r5]
   13c18:	bl	11008 <fputs_unlocked@plt>
   13c1c:	ldr	r1, [pc, #384]	; 13da4 <__assert_fail@plt+0x2ae4>
   13c20:	mov	r2, #5
   13c24:	mov	r0, r4
   13c28:	add	r1, pc, r1
   13c2c:	bl	110b0 <dcgettext@plt>
   13c30:	ldr	r1, [r5]
   13c34:	bl	11008 <fputs_unlocked@plt>
   13c38:	ldr	r1, [pc, #360]	; 13da8 <__assert_fail@plt+0x2ae8>
   13c3c:	mov	r2, #5
   13c40:	mov	r0, r4
   13c44:	add	r1, pc, r1
   13c48:	bl	110b0 <dcgettext@plt>
   13c4c:	ldr	r1, [r5]
   13c50:	bl	11008 <fputs_unlocked@plt>
   13c54:	ldr	r1, [pc, #336]	; 13dac <__assert_fail@plt+0x2aec>
   13c58:	mov	r2, #5
   13c5c:	mov	r0, r4
   13c60:	add	r1, pc, r1
   13c64:	bl	110b0 <dcgettext@plt>
   13c68:	ldr	r1, [r5]
   13c6c:	bl	11008 <fputs_unlocked@plt>
   13c70:	ldr	r1, [pc, #312]	; 13db0 <__assert_fail@plt+0x2af0>
   13c74:	mov	r2, #5
   13c78:	mov	r0, r4
   13c7c:	add	r1, pc, r1
   13c80:	bl	110b0 <dcgettext@plt>
   13c84:	ldr	r1, [r5]
   13c88:	bl	11008 <fputs_unlocked@plt>
   13c8c:	ldr	r1, [pc, #288]	; 13db4 <__assert_fail@plt+0x2af4>
   13c90:	mov	r2, #5
   13c94:	mov	r0, r4
   13c98:	add	r1, pc, r1
   13c9c:	bl	110b0 <dcgettext@plt>
   13ca0:	ldr	r1, [r5]
   13ca4:	bl	11008 <fputs_unlocked@plt>
   13ca8:	ldr	r1, [pc, #264]	; 13db8 <__assert_fail@plt+0x2af8>
   13cac:	mov	r2, #5
   13cb0:	mov	r0, r4
   13cb4:	add	r1, pc, r1
   13cb8:	bl	110b0 <dcgettext@plt>
   13cbc:	ldr	r1, [r5]
   13cc0:	bl	11008 <fputs_unlocked@plt>
   13cc4:	ldr	r1, [pc, #240]	; 13dbc <__assert_fail@plt+0x2afc>
   13cc8:	mov	r2, #5
   13ccc:	mov	r0, r4
   13cd0:	add	r1, pc, r1
   13cd4:	bl	110b0 <dcgettext@plt>
   13cd8:	ldr	r2, [pc, #224]	; 13dc0 <__assert_fail@plt+0x2b00>
   13cdc:	ldr	r3, [pc, #224]	; 13dc4 <__assert_fail@plt+0x2b04>
   13ce0:	add	r2, pc, r2
   13ce4:	add	r3, pc, r3
   13ce8:	mov	r1, r0
   13cec:	mov	r0, #1
   13cf0:	bl	11224 <__printf_chk@plt>
   13cf4:	mov	r0, #5
   13cf8:	mov	r1, r4
   13cfc:	bl	1126c <setlocale@plt>
   13d00:	cmp	r0, #0
   13d04:	beq	13d20 <__assert_fail@plt+0x2a60>
   13d08:	ldr	r1, [pc, #184]	; 13dc8 <__assert_fail@plt+0x2b08>
   13d0c:	mov	r2, #3
   13d10:	add	r1, pc, r1
   13d14:	bl	1129c <strncmp@plt>
   13d18:	cmp	r0, #0
   13d1c:	bne	13d54 <__assert_fail@plt+0x2a94>
   13d20:	ldr	r1, [pc, #164]	; 13dcc <__assert_fail@plt+0x2b0c>
   13d24:	mov	r2, #5
   13d28:	mov	r0, #0
   13d2c:	add	r1, pc, r1
   13d30:	bl	110b0 <dcgettext@plt>
   13d34:	mov	r5, r0
   13d38:	ldr	r0, [r6]
   13d3c:	bl	13f14 <close_stdout@@Base+0x118>
   13d40:	mov	r1, r5
   13d44:	mov	r2, r0
   13d48:	mov	r0, #1
   13d4c:	bl	11224 <__printf_chk@plt>
   13d50:	b	13bc8 <__assert_fail@plt+0x2908>
   13d54:	ldr	r1, [pc, #116]	; 13dd0 <__assert_fail@plt+0x2b10>
   13d58:	mov	r2, #5
   13d5c:	mov	r0, r4
   13d60:	add	r1, pc, r1
   13d64:	bl	110b0 <dcgettext@plt>
   13d68:	mov	r5, r0
   13d6c:	ldr	r0, [r6]
   13d70:	bl	13f14 <close_stdout@@Base+0x118>
   13d74:	mov	r1, r5
   13d78:	mov	r2, r0
   13d7c:	mov	r0, #1
   13d80:	bl	11224 <__printf_chk@plt>
   13d84:	b	13d20 <__assert_fail@plt+0x2a60>
   13d88:	andeq	r6, r1, r4, ror r4
   13d8c:	andeq	r0, r0, r0, lsl r1
   13d90:	andeq	r4, r0, ip, lsr r2
   13d94:	andeq	r0, r0, r0, lsr r1
   13d98:	andeq	r4, r0, ip, lsr #4
   13d9c:	andeq	r4, r0, r4, lsr #4
   13da0:	andeq	r0, r0, r4, lsr #2
   13da4:	andeq	r4, r0, r4, ror #7
   13da8:	strdeq	r4, [r0], -r8
   13dac:	andeq	r4, r0, r4, lsl r4
   13db0:	andeq	r4, r0, r0, ror r5
   13db4:	andeq	r4, r0, r0, lsl #14
   13db8:	andeq	r4, r0, r0, lsl #17
   13dbc:	andeq	r4, r0, r4, ror #20
   13dc0:	andeq	r4, r0, ip, ror #20
   13dc4:	andeq	r4, r0, r8, ror sl
   13dc8:	andeq	r4, r0, r4, ror sl
   13dcc:	andeq	r4, r0, r4, lsr #21
   13dd0:	andeq	r4, r0, r8, lsr #20
   13dd4:	ldr	r3, [pc, #8]	; 13de4 <__assert_fail@plt+0x2b24>
   13dd8:	add	r3, pc, r3
   13ddc:	str	r0, [r3]
   13de0:	bx	lr
   13de4:			; <UNDEFINED> instruction: 0x000186b4
   13de8:	ldr	r3, [pc, #8]	; 13df8 <__assert_fail@plt+0x2b38>
   13dec:	add	r3, pc, r3
   13df0:	strb	r0, [r3, #4]
   13df4:	bx	lr
   13df8:	andeq	r8, r1, r0, lsr #13

00013dfc <close_stdout@@Base>:
   13dfc:	push	{r4, r5, r6, r7, lr}
   13e00:	sub	sp, sp, #12
   13e04:	ldr	r4, [pc, #228]	; 13ef0 <close_stdout@@Base+0xf4>
   13e08:	ldr	r3, [pc, #228]	; 13ef4 <close_stdout@@Base+0xf8>
   13e0c:	add	r4, pc, r4
   13e10:	ldr	r3, [r4, r3]
   13e14:	ldr	r0, [r3]
   13e18:	bl	16818 <close_stdout@@Base+0x2a1c>
   13e1c:	cmp	r0, #0
   13e20:	beq	13e48 <close_stdout@@Base+0x4c>
   13e24:	ldr	r3, [pc, #204]	; 13ef8 <close_stdout@@Base+0xfc>
   13e28:	add	r3, pc, r3
   13e2c:	ldrb	r3, [r3, #4]
   13e30:	cmp	r3, #0
   13e34:	beq	13e68 <close_stdout@@Base+0x6c>
   13e38:	bl	111e8 <__errno_location@plt>
   13e3c:	ldr	r3, [r0]
   13e40:	cmp	r3, #32
   13e44:	bne	13e68 <close_stdout@@Base+0x6c>
   13e48:	ldr	r3, [pc, #172]	; 13efc <close_stdout@@Base+0x100>
   13e4c:	ldr	r3, [r4, r3]
   13e50:	ldr	r0, [r3]
   13e54:	bl	16818 <close_stdout@@Base+0x2a1c>
   13e58:	cmp	r0, #0
   13e5c:	bne	13ebc <close_stdout@@Base+0xc0>
   13e60:	add	sp, sp, #12
   13e64:	pop	{r4, r5, r6, r7, pc}
   13e68:	ldr	r1, [pc, #144]	; 13f00 <close_stdout@@Base+0x104>
   13e6c:	mov	r0, #0
   13e70:	mov	r2, #5
   13e74:	add	r1, pc, r1
   13e78:	bl	110b0 <dcgettext@plt>
   13e7c:	ldr	r3, [pc, #128]	; 13f04 <close_stdout@@Base+0x108>
   13e80:	ldr	r5, [pc, r3]
   13e84:	cmp	r5, #0
   13e88:	mov	r6, r0
   13e8c:	beq	13ecc <close_stdout@@Base+0xd0>
   13e90:	bl	111e8 <__errno_location@plt>
   13e94:	ldr	r7, [r0]
   13e98:	mov	r0, r5
   13e9c:	bl	156f4 <close_stdout@@Base+0x18f8>
   13ea0:	ldr	r2, [pc, #96]	; 13f08 <close_stdout@@Base+0x10c>
   13ea4:	str	r6, [sp]
   13ea8:	mov	r1, r7
   13eac:	add	r2, pc, r2
   13eb0:	mov	r3, r0
   13eb4:	mov	r0, #0
   13eb8:	bl	11134 <error@plt>
   13ebc:	ldr	r3, [pc, #72]	; 13f0c <close_stdout@@Base+0x110>
   13ec0:	ldr	r3, [r4, r3]
   13ec4:	ldr	r0, [r3]
   13ec8:	bl	1105c <_exit@plt>
   13ecc:	bl	111e8 <__errno_location@plt>
   13ed0:	ldr	r2, [pc, #56]	; 13f10 <close_stdout@@Base+0x114>
   13ed4:	add	r2, pc, r2
   13ed8:	mov	r3, r0
   13edc:	mov	r0, r5
   13ee0:	ldr	r1, [r3]
   13ee4:	mov	r3, r6
   13ee8:	bl	11134 <error@plt>
   13eec:	b	13ebc <close_stdout@@Base+0xc0>
   13ef0:	andeq	r6, r1, ip, ror #3
   13ef4:	andeq	r0, r0, r4, lsr #2
   13ef8:	andeq	r8, r1, r4, ror #12
   13efc:	andeq	r0, r0, r0, lsl r1
   13f00:	andeq	r3, r0, ip, asr pc
   13f04:	andeq	r8, r1, ip, lsl #12
   13f08:	andeq	r4, r0, r8, ror lr
   13f0c:	andeq	r0, r0, r8, lsr #2
   13f10:	andeq	r4, r0, r4, asr lr
   13f14:	ldrb	r3, [r0]
   13f18:	cmp	r3, #47	; 0x2f
   13f1c:	bne	13f38 <close_stdout@@Base+0x13c>
   13f20:	add	r2, r0, #1
   13f24:	mov	r0, r2
   13f28:	add	r2, r2, #1
   13f2c:	ldrb	r3, [r0]
   13f30:	cmp	r3, #47	; 0x2f
   13f34:	beq	13f24 <close_stdout@@Base+0x128>
   13f38:	cmp	r3, #0
   13f3c:	bxeq	lr
   13f40:	mov	r2, r0
   13f44:	mov	r1, #0
   13f48:	cmp	r3, #47	; 0x2f
   13f4c:	moveq	r1, #1
   13f50:	beq	13f60 <close_stdout@@Base+0x164>
   13f54:	cmp	r1, #0
   13f58:	movne	r0, r2
   13f5c:	movne	r1, #0
   13f60:	ldrb	r3, [r2, #1]!
   13f64:	cmp	r3, #0
   13f68:	bne	13f48 <close_stdout@@Base+0x14c>
   13f6c:	bx	lr
   13f70:	push	{r4, lr}
   13f74:	mov	r4, r0
   13f78:	bl	111c4 <strlen@plt>
   13f7c:	cmp	r0, #1
   13f80:	popls	{r4, pc}
   13f84:	sub	r3, r0, #1
   13f88:	ldrb	r2, [r4, r3]
   13f8c:	cmp	r2, #47	; 0x2f
   13f90:	popne	{r4, pc}
   13f94:	mov	r0, r3
   13f98:	cmp	r0, #1
   13f9c:	sub	r3, r3, #1
   13fa0:	beq	13fb4 <close_stdout@@Base+0x1b8>
   13fa4:	ldrb	r2, [r4, r3]
   13fa8:	cmp	r2, #47	; 0x2f
   13fac:	popne	{r4, pc}
   13fb0:	b	13f94 <close_stdout@@Base+0x198>
   13fb4:	pop	{r4, pc}
   13fb8:	b	1102c <posix_fadvise64@plt>
   13fbc:	cmp	r0, #0
   13fc0:	push	{r4, r5, r6, lr}
   13fc4:	mov	r6, r1
   13fc8:	sub	sp, sp, #16
   13fcc:	beq	13ff0 <close_stdout@@Base+0x1f4>
   13fd0:	mov	r4, #0
   13fd4:	mov	r5, #0
   13fd8:	bl	11230 <fileno@plt>
   13fdc:	str	r6, [sp, #8]
   13fe0:	mov	r2, r4
   13fe4:	mov	r3, r5
   13fe8:	strd	r4, [sp]
   13fec:	bl	13fb8 <close_stdout@@Base+0x1bc>
   13ff0:	add	sp, sp, #16
   13ff4:	pop	{r4, r5, r6, pc}
   13ff8:	push	{r3, r4, r5, r6, r7, lr}
   13ffc:	subs	r4, r0, #0
   14000:	ldr	r5, [pc, #172]	; 140b4 <close_stdout@@Base+0x2b8>
   14004:	add	r5, pc, r5
   14008:	beq	14090 <close_stdout@@Base+0x294>
   1400c:	mov	r1, #47	; 0x2f
   14010:	bl	11278 <strrchr@plt>
   14014:	subs	r6, r0, #0
   14018:	beq	14074 <close_stdout@@Base+0x278>
   1401c:	add	r7, r6, #1
   14020:	rsb	r3, r4, r7
   14024:	cmp	r3, #6
   14028:	ble	14074 <close_stdout@@Base+0x278>
   1402c:	ldr	r1, [pc, #132]	; 140b8 <close_stdout@@Base+0x2bc>
   14030:	sub	r0, r6, #6
   14034:	mov	r2, #7
   14038:	add	r1, pc, r1
   1403c:	bl	1129c <strncmp@plt>
   14040:	cmp	r0, #0
   14044:	bne	14074 <close_stdout@@Base+0x278>
   14048:	ldr	r1, [pc, #108]	; 140bc <close_stdout@@Base+0x2c0>
   1404c:	mov	r0, r7
   14050:	mov	r2, #3
   14054:	add	r1, pc, r1
   14058:	bl	1129c <strncmp@plt>
   1405c:	cmp	r0, #0
   14060:	movne	r4, r7
   14064:	ldreq	r3, [pc, #84]	; 140c0 <close_stdout@@Base+0x2c4>
   14068:	addeq	r4, r6, #4
   1406c:	ldreq	r3, [r5, r3]
   14070:	streq	r4, [r3]
   14074:	ldr	r2, [pc, #72]	; 140c4 <close_stdout@@Base+0x2c8>
   14078:	ldr	r3, [pc, #72]	; 140c8 <close_stdout@@Base+0x2cc>
   1407c:	ldr	r2, [r5, r2]
   14080:	str	r4, [r2]
   14084:	ldr	r3, [r5, r3]
   14088:	str	r4, [r3]
   1408c:	pop	{r3, r4, r5, r6, r7, pc}
   14090:	ldr	r3, [pc, #52]	; 140cc <close_stdout@@Base+0x2d0>
   14094:	mov	r1, #1
   14098:	ldr	r0, [pc, #48]	; 140d0 <close_stdout@@Base+0x2d4>
   1409c:	mov	r2, #55	; 0x37
   140a0:	ldr	r3, [r5, r3]
   140a4:	add	r0, pc, r0
   140a8:	ldr	r3, [r3]
   140ac:	bl	110ec <fwrite@plt>
   140b0:	bl	112a8 <abort@plt>
   140b4:	strdeq	r5, [r1], -r4
   140b8:	andeq	r4, r0, ip, lsr #26
   140bc:	andeq	r4, r0, r8, lsl sp
   140c0:	andeq	r0, r0, r8, lsr r1
   140c4:	andeq	r0, r0, r0, lsr r1
   140c8:	andeq	r0, r0, ip, lsr #2
   140cc:	andeq	r0, r0, r0, lsl r1
   140d0:	andeq	r4, r0, r8, lsl #25
   140d4:	push	{r3, lr}
   140d8:	mov	r3, r0
   140dc:	mov	r2, #0
   140e0:	cmp	r1, #8
   140e4:	str	r2, [r3], #4
   140e8:	add	r3, r3, #4
   140ec:	str	r2, [r0, #4]
   140f0:	str	r2, [r3], #4
   140f4:	str	r2, [r3], #4
   140f8:	str	r2, [r3], #4
   140fc:	str	r2, [r3], #4
   14100:	str	r2, [r3], #4
   14104:	str	r2, [r3], #4
   14108:	str	r2, [r3], #4
   1410c:	str	r2, [r3], #4
   14110:	str	r2, [r3], #4
   14114:	str	r2, [r3]
   14118:	beq	14124 <close_stdout@@Base+0x328>
   1411c:	str	r1, [r0]
   14120:	pop	{r3, pc}
   14124:	bl	112a8 <abort@plt>
   14128:	push	{r4, r5, r6, lr}
   1412c:	mov	r4, r0
   14130:	mov	r6, r1
   14134:	mov	r0, #0
   14138:	mov	r1, r4
   1413c:	mov	r2, #5
   14140:	bl	110b0 <dcgettext@plt>
   14144:	cmp	r0, r4
   14148:	mov	r5, r0
   1414c:	beq	14154 <close_stdout@@Base+0x358>
   14150:	pop	{r4, r5, r6, pc}
   14154:	bl	16898 <close_stdout@@Base+0x2a9c>
   14158:	ldrb	r3, [r0]
   1415c:	bic	r3, r3, #32
   14160:	cmp	r3, #85	; 0x55
   14164:	bne	141d8 <close_stdout@@Base+0x3dc>
   14168:	ldrb	r3, [r0, #1]
   1416c:	bic	r3, r3, #32
   14170:	cmp	r3, #84	; 0x54
   14174:	bne	141c4 <close_stdout@@Base+0x3c8>
   14178:	ldrb	r3, [r0, #2]
   1417c:	bic	r3, r3, #32
   14180:	cmp	r3, #70	; 0x46
   14184:	bne	141c4 <close_stdout@@Base+0x3c8>
   14188:	ldrb	r3, [r0, #3]
   1418c:	cmp	r3, #45	; 0x2d
   14190:	bne	141c4 <close_stdout@@Base+0x3c8>
   14194:	ldrb	r3, [r0, #4]
   14198:	cmp	r3, #56	; 0x38
   1419c:	bne	141c4 <close_stdout@@Base+0x3c8>
   141a0:	ldrb	r3, [r0, #5]
   141a4:	cmp	r3, #0
   141a8:	bne	141c4 <close_stdout@@Base+0x3c8>
   141ac:	ldrb	r3, [r5]
   141b0:	cmp	r3, #96	; 0x60
   141b4:	beq	14250 <close_stdout@@Base+0x454>
   141b8:	ldr	r0, [pc, #180]	; 14274 <close_stdout@@Base+0x478>
   141bc:	add	r0, pc, r0
   141c0:	pop	{r4, r5, r6, pc}
   141c4:	cmp	r6, #7
   141c8:	beq	1425c <close_stdout@@Base+0x460>
   141cc:	ldr	r0, [pc, #164]	; 14278 <close_stdout@@Base+0x47c>
   141d0:	add	r0, pc, r0
   141d4:	pop	{r4, r5, r6, pc}
   141d8:	cmp	r3, #71	; 0x47
   141dc:	bne	141c4 <close_stdout@@Base+0x3c8>
   141e0:	ldrb	r3, [r0, #1]
   141e4:	bic	r3, r3, #32
   141e8:	cmp	r3, #66	; 0x42
   141ec:	bne	141c4 <close_stdout@@Base+0x3c8>
   141f0:	ldrb	r3, [r0, #2]
   141f4:	cmp	r3, #49	; 0x31
   141f8:	bne	141c4 <close_stdout@@Base+0x3c8>
   141fc:	ldrb	r3, [r0, #3]
   14200:	cmp	r3, #56	; 0x38
   14204:	bne	141c4 <close_stdout@@Base+0x3c8>
   14208:	ldrb	r3, [r0, #4]
   1420c:	cmp	r3, #48	; 0x30
   14210:	bne	141c4 <close_stdout@@Base+0x3c8>
   14214:	ldrb	r3, [r0, #5]
   14218:	cmp	r3, #51	; 0x33
   1421c:	bne	141c4 <close_stdout@@Base+0x3c8>
   14220:	ldrb	r3, [r0, #6]
   14224:	cmp	r3, #48	; 0x30
   14228:	bne	141c4 <close_stdout@@Base+0x3c8>
   1422c:	ldrb	r3, [r0, #7]
   14230:	cmp	r3, #0
   14234:	bne	141c4 <close_stdout@@Base+0x3c8>
   14238:	ldrb	r3, [r5]
   1423c:	cmp	r3, #96	; 0x60
   14240:	beq	14268 <close_stdout@@Base+0x46c>
   14244:	ldr	r0, [pc, #48]	; 1427c <close_stdout@@Base+0x480>
   14248:	add	r0, pc, r0
   1424c:	pop	{r4, r5, r6, pc}
   14250:	ldr	r0, [pc, #40]	; 14280 <close_stdout@@Base+0x484>
   14254:	add	r0, pc, r0
   14258:	pop	{r4, r5, r6, pc}
   1425c:	ldr	r0, [pc, #32]	; 14284 <close_stdout@@Base+0x488>
   14260:	add	r0, pc, r0
   14264:	pop	{r4, r5, r6, pc}
   14268:	ldr	r0, [pc, #24]	; 14288 <close_stdout@@Base+0x48c>
   1426c:	add	r0, pc, r0
   14270:	pop	{r4, r5, r6, pc}
   14274:	ldrdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   14278:	andeq	r4, r0, r8, asr #23
   1427c:	andeq	r4, r0, ip, asr #22
   14280:	andeq	r4, r0, r0, asr fp
   14284:	andeq	r4, r0, ip, lsr fp
   14288:	andeq	r4, r0, r4, lsr fp
   1428c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14290:	sub	sp, sp, #124	; 0x7c
   14294:	ldr	ip, [pc, #3304]	; 14f84 <close_stdout@@Base+0x1188>
   14298:	mov	sl, r1
   1429c:	str	r0, [sp, #40]	; 0x28
   142a0:	mov	r8, r3
   142a4:	ldr	r0, [pc, #3292]	; 14f88 <close_stdout@@Base+0x118c>
   142a8:	add	ip, pc, ip
   142ac:	str	r2, [sp, #32]
   142b0:	ldr	r1, [sp, #164]	; 0xa4
   142b4:	mov	r3, ip
   142b8:	ldr	r0, [ip, r0]
   142bc:	ldr	r2, [sp, #172]	; 0xac
   142c0:	ubfx	r1, r1, #1, #1
   142c4:	str	r1, [sp, #36]	; 0x24
   142c8:	str	r0, [sp, #56]	; 0x38
   142cc:	ldr	r0, [sp, #168]	; 0xa8
   142d0:	ldr	r1, [sp, #176]	; 0xb0
   142d4:	str	r2, [sp, #72]	; 0x48
   142d8:	str	r0, [sp, #48]	; 0x30
   142dc:	ldr	r0, [sp, #56]	; 0x38
   142e0:	str	r1, [sp, #68]	; 0x44
   142e4:	ldr	r3, [r0]
   142e8:	str	r3, [sp, #116]	; 0x74
   142ec:	bl	11104 <__ctype_get_mb_cur_max@plt>
   142f0:	ldr	r2, [sp, #160]	; 0xa0
   142f4:	str	r0, [sp, #64]	; 0x40
   142f8:	cmp	r2, #8
   142fc:	addls	pc, pc, r2, lsl #2
   14300:	b	14e60 <close_stdout@@Base+0x1064>
   14304:	b	14328 <close_stdout@@Base+0x52c>
   14308:	b	14b78 <close_stdout@@Base+0xd7c>
   1430c:	b	14ba8 <close_stdout@@Base+0xdac>
   14310:	b	14a58 <close_stdout@@Base+0xc5c>
   14314:	b	14a98 <close_stdout@@Base+0xc9c>
   14318:	b	14ac4 <close_stdout@@Base+0xcc8>
   1431c:	b	14ae4 <close_stdout@@Base+0xce8>
   14320:	b	14ae4 <close_stdout@@Base+0xce8>
   14324:	b	14ae4 <close_stdout@@Base+0xce8>
   14328:	mov	r2, #0
   1432c:	str	r2, [sp, #36]	; 0x24
   14330:	mov	r9, r2
   14334:	str	r2, [sp, #24]
   14338:	str	r2, [sp, #28]
   1433c:	str	r2, [sp, #52]	; 0x34
   14340:	ldr	r0, [sp, #36]	; 0x24
   14344:	mov	fp, #0
   14348:	ldr	r1, [sp, #24]
   1434c:	eor	r2, r0, #1
   14350:	eor	r3, r1, #1
   14354:	and	r3, r2, r3
   14358:	and	r2, r1, r0
   1435c:	str	r3, [sp, #44]	; 0x2c
   14360:	str	r2, [sp, #76]	; 0x4c
   14364:	cmn	r8, #1
   14368:	beq	146e8 <close_stdout@@Base+0x8ec>
   1436c:	subs	r3, fp, r8
   14370:	movne	r3, #1
   14374:	cmp	r3, #0
   14378:	beq	14700 <close_stdout@@Base+0x904>
   1437c:	ldr	r3, [sp, #28]
   14380:	ldr	r0, [sp, #24]
   14384:	adds	r7, r3, #0
   14388:	movne	r7, #1
   1438c:	ands	r6, r7, r0
   14390:	bne	14bec <close_stdout@@Base+0xdf0>
   14394:	ldr	r1, [sp, #32]
   14398:	add	r5, r1, fp
   1439c:	ldrb	r4, [r5]
   143a0:	cmp	r4, #126	; 0x7e
   143a4:	addls	pc, pc, r4, lsl #2
   143a8:	b	1496c <close_stdout@@Base+0xb70>
   143ac:	b	14878 <close_stdout@@Base+0xa7c>
   143b0:	b	1496c <close_stdout@@Base+0xb70>
   143b4:	b	1496c <close_stdout@@Base+0xb70>
   143b8:	b	1496c <close_stdout@@Base+0xb70>
   143bc:	b	1496c <close_stdout@@Base+0xb70>
   143c0:	b	1496c <close_stdout@@Base+0xb70>
   143c4:	b	1496c <close_stdout@@Base+0xb70>
   143c8:	b	14860 <close_stdout@@Base+0xa64>
   143cc:	b	14848 <close_stdout@@Base+0xa4c>
   143d0:	b	14870 <close_stdout@@Base+0xa74>
   143d4:	b	14868 <close_stdout@@Base+0xa6c>
   143d8:	b	14858 <close_stdout@@Base+0xa5c>
   143dc:	b	14850 <close_stdout@@Base+0xa54>
   143e0:	b	14814 <close_stdout@@Base+0xa18>
   143e4:	b	1496c <close_stdout@@Base+0xb70>
   143e8:	b	1496c <close_stdout@@Base+0xb70>
   143ec:	b	1496c <close_stdout@@Base+0xb70>
   143f0:	b	1496c <close_stdout@@Base+0xb70>
   143f4:	b	1496c <close_stdout@@Base+0xb70>
   143f8:	b	1496c <close_stdout@@Base+0xb70>
   143fc:	b	1496c <close_stdout@@Base+0xb70>
   14400:	b	1496c <close_stdout@@Base+0xb70>
   14404:	b	1496c <close_stdout@@Base+0xb70>
   14408:	b	1496c <close_stdout@@Base+0xb70>
   1440c:	b	1496c <close_stdout@@Base+0xb70>
   14410:	b	1496c <close_stdout@@Base+0xb70>
   14414:	b	1496c <close_stdout@@Base+0xb70>
   14418:	b	1496c <close_stdout@@Base+0xb70>
   1441c:	b	1496c <close_stdout@@Base+0xb70>
   14420:	b	1496c <close_stdout@@Base+0xb70>
   14424:	b	1496c <close_stdout@@Base+0xb70>
   14428:	b	1496c <close_stdout@@Base+0xb70>
   1442c:	b	147a0 <close_stdout@@Base+0x9a4>
   14430:	b	147a0 <close_stdout@@Base+0x9a4>
   14434:	b	147a0 <close_stdout@@Base+0x9a4>
   14438:	b	14798 <close_stdout@@Base+0x99c>
   1443c:	b	147a0 <close_stdout@@Base+0x9a4>
   14440:	b	14674 <close_stdout@@Base+0x878>
   14444:	b	147a0 <close_stdout@@Base+0x9a4>
   14448:	b	14914 <close_stdout@@Base+0xb18>
   1444c:	b	147a0 <close_stdout@@Base+0x9a4>
   14450:	b	147a0 <close_stdout@@Base+0x9a4>
   14454:	b	147a0 <close_stdout@@Base+0x9a4>
   14458:	b	14674 <close_stdout@@Base+0x878>
   1445c:	b	14674 <close_stdout@@Base+0x878>
   14460:	b	14674 <close_stdout@@Base+0x878>
   14464:	b	14674 <close_stdout@@Base+0x878>
   14468:	b	14674 <close_stdout@@Base+0x878>
   1446c:	b	14674 <close_stdout@@Base+0x878>
   14470:	b	14674 <close_stdout@@Base+0x878>
   14474:	b	14674 <close_stdout@@Base+0x878>
   14478:	b	14674 <close_stdout@@Base+0x878>
   1447c:	b	14674 <close_stdout@@Base+0x878>
   14480:	b	14674 <close_stdout@@Base+0x878>
   14484:	b	14674 <close_stdout@@Base+0x878>
   14488:	b	14674 <close_stdout@@Base+0x878>
   1448c:	b	14674 <close_stdout@@Base+0x878>
   14490:	b	14674 <close_stdout@@Base+0x878>
   14494:	b	14674 <close_stdout@@Base+0x878>
   14498:	b	147a0 <close_stdout@@Base+0x9a4>
   1449c:	b	147a0 <close_stdout@@Base+0x9a4>
   144a0:	b	147a0 <close_stdout@@Base+0x9a4>
   144a4:	b	147a0 <close_stdout@@Base+0x9a4>
   144a8:	b	145a8 <close_stdout@@Base+0x7ac>
   144ac:	b	1496c <close_stdout@@Base+0xb70>
   144b0:	b	14674 <close_stdout@@Base+0x878>
   144b4:	b	14674 <close_stdout@@Base+0x878>
   144b8:	b	14674 <close_stdout@@Base+0x878>
   144bc:	b	14674 <close_stdout@@Base+0x878>
   144c0:	b	14674 <close_stdout@@Base+0x878>
   144c4:	b	14674 <close_stdout@@Base+0x878>
   144c8:	b	14674 <close_stdout@@Base+0x878>
   144cc:	b	14674 <close_stdout@@Base+0x878>
   144d0:	b	14674 <close_stdout@@Base+0x878>
   144d4:	b	14674 <close_stdout@@Base+0x878>
   144d8:	b	14674 <close_stdout@@Base+0x878>
   144dc:	b	14674 <close_stdout@@Base+0x878>
   144e0:	b	14674 <close_stdout@@Base+0x878>
   144e4:	b	14674 <close_stdout@@Base+0x878>
   144e8:	b	14674 <close_stdout@@Base+0x878>
   144ec:	b	14674 <close_stdout@@Base+0x878>
   144f0:	b	14674 <close_stdout@@Base+0x878>
   144f4:	b	14674 <close_stdout@@Base+0x878>
   144f8:	b	14674 <close_stdout@@Base+0x878>
   144fc:	b	14674 <close_stdout@@Base+0x878>
   14500:	b	14674 <close_stdout@@Base+0x878>
   14504:	b	14674 <close_stdout@@Base+0x878>
   14508:	b	14674 <close_stdout@@Base+0x878>
   1450c:	b	14674 <close_stdout@@Base+0x878>
   14510:	b	14674 <close_stdout@@Base+0x878>
   14514:	b	14674 <close_stdout@@Base+0x878>
   14518:	b	147a0 <close_stdout@@Base+0x9a4>
   1451c:	b	148f8 <close_stdout@@Base+0xafc>
   14520:	b	14674 <close_stdout@@Base+0x878>
   14524:	b	147a0 <close_stdout@@Base+0x9a4>
   14528:	b	14674 <close_stdout@@Base+0x878>
   1452c:	b	147a0 <close_stdout@@Base+0x9a4>
   14530:	b	14674 <close_stdout@@Base+0x878>
   14534:	b	14674 <close_stdout@@Base+0x878>
   14538:	b	14674 <close_stdout@@Base+0x878>
   1453c:	b	14674 <close_stdout@@Base+0x878>
   14540:	b	14674 <close_stdout@@Base+0x878>
   14544:	b	14674 <close_stdout@@Base+0x878>
   14548:	b	14674 <close_stdout@@Base+0x878>
   1454c:	b	14674 <close_stdout@@Base+0x878>
   14550:	b	14674 <close_stdout@@Base+0x878>
   14554:	b	14674 <close_stdout@@Base+0x878>
   14558:	b	14674 <close_stdout@@Base+0x878>
   1455c:	b	14674 <close_stdout@@Base+0x878>
   14560:	b	14674 <close_stdout@@Base+0x878>
   14564:	b	14674 <close_stdout@@Base+0x878>
   14568:	b	14674 <close_stdout@@Base+0x878>
   1456c:	b	14674 <close_stdout@@Base+0x878>
   14570:	b	14674 <close_stdout@@Base+0x878>
   14574:	b	14674 <close_stdout@@Base+0x878>
   14578:	b	14674 <close_stdout@@Base+0x878>
   1457c:	b	14674 <close_stdout@@Base+0x878>
   14580:	b	14674 <close_stdout@@Base+0x878>
   14584:	b	14674 <close_stdout@@Base+0x878>
   14588:	b	14674 <close_stdout@@Base+0x878>
   1458c:	b	14674 <close_stdout@@Base+0x878>
   14590:	b	14674 <close_stdout@@Base+0x878>
   14594:	b	14674 <close_stdout@@Base+0x878>
   14598:	b	14780 <close_stdout@@Base+0x984>
   1459c:	b	147a0 <close_stdout@@Base+0x9a4>
   145a0:	b	14780 <close_stdout@@Base+0x984>
   145a4:	b	14798 <close_stdout@@Base+0x99c>
   145a8:	ldr	r3, [sp, #160]	; 0xa0
   145ac:	cmp	r3, #2
   145b0:	beq	14e3c <close_stdout@@Base+0x1040>
   145b4:	cmp	r3, #3
   145b8:	bne	14674 <close_stdout@@Base+0x878>
   145bc:	ldr	r1, [sp, #164]	; 0xa4
   145c0:	tst	r1, #4
   145c4:	beq	14674 <close_stdout@@Base+0x878>
   145c8:	add	r3, fp, #2
   145cc:	cmp	r8, r3
   145d0:	bls	14674 <close_stdout@@Base+0x878>
   145d4:	ldrb	r2, [r5, #1]
   145d8:	mov	r1, #1
   145dc:	cmp	r2, #63	; 0x3f
   145e0:	bne	14674 <close_stdout@@Base+0x878>
   145e4:	ldr	r0, [sp, #32]
   145e8:	ldrb	ip, [r0, r3]
   145ec:	sub	r0, ip, #33	; 0x21
   145f0:	uxtb	r0, r0
   145f4:	cmp	r0, #29
   145f8:	bhi	14674 <close_stdout@@Base+0x878>
   145fc:	lsl	r1, r1, r0
   14600:	movw	r0, #20929	; 0x51c1
   14604:	movt	r0, #14336	; 0x3800
   14608:	and	r0, r1, r0
   1460c:	cmp	r0, #0
   14610:	beq	14674 <close_stdout@@Base+0x878>
   14614:	ldr	r1, [sp, #36]	; 0x24
   14618:	cmp	r1, #0
   1461c:	bne	147bc <close_stdout@@Base+0x9c0>
   14620:	cmp	r9, sl
   14624:	mov	r4, ip
   14628:	mov	fp, r3
   1462c:	ldrcc	r0, [sp, #40]	; 0x28
   14630:	strbcc	r2, [r0, r9]
   14634:	add	r2, r9, #1
   14638:	cmp	sl, r2
   1463c:	ldrhi	r0, [sp, #40]	; 0x28
   14640:	movhi	r1, #34	; 0x22
   14644:	strbhi	r1, [r0, r2]
   14648:	add	r2, r9, #2
   1464c:	cmp	sl, r2
   14650:	ldrhi	r0, [sp, #40]	; 0x28
   14654:	movhi	r1, #34	; 0x22
   14658:	strbhi	r1, [r0, r2]
   1465c:	add	r2, r9, #3
   14660:	cmp	sl, r2
   14664:	add	r9, r9, #4
   14668:	ldrhi	r0, [sp, #40]	; 0x28
   1466c:	movhi	r1, #63	; 0x3f
   14670:	strbhi	r1, [r0, r2]
   14674:	ldr	r0, [sp, #44]	; 0x2c
   14678:	cmp	r0, #0
   1467c:	bne	146a4 <close_stdout@@Base+0x8a8>
   14680:	ldr	r1, [sp, #48]	; 0x30
   14684:	cmp	r1, #0
   14688:	beq	146a4 <close_stdout@@Base+0x8a8>
   1468c:	ubfx	r2, r4, #5, #8
   14690:	and	r3, r4, #31
   14694:	ldr	r2, [r1, r2, lsl #2]
   14698:	lsr	r3, r2, r3
   1469c:	tst	r3, #1
   146a0:	bne	146ac <close_stdout@@Base+0x8b0>
   146a4:	cmp	r6, #0
   146a8:	beq	146cc <close_stdout@@Base+0x8d0>
   146ac:	ldr	r2, [sp, #36]	; 0x24
   146b0:	cmp	r2, #0
   146b4:	bne	147bc <close_stdout@@Base+0x9c0>
   146b8:	cmp	r9, sl
   146bc:	ldrcc	r0, [sp, #40]	; 0x28
   146c0:	movcc	r3, #92	; 0x5c
   146c4:	strbcc	r3, [r0, r9]
   146c8:	add	r9, r9, #1
   146cc:	add	fp, fp, #1
   146d0:	cmp	r9, sl
   146d4:	ldrcc	r1, [sp, #40]	; 0x28
   146d8:	strbcc	r4, [r1, r9]
   146dc:	cmn	r8, #1
   146e0:	add	r9, r9, #1
   146e4:	bne	1436c <close_stdout@@Base+0x570>
   146e8:	ldr	r2, [sp, #32]
   146ec:	ldrb	r3, [r2, fp]
   146f0:	adds	r3, r3, #0
   146f4:	movne	r3, #1
   146f8:	cmp	r3, #0
   146fc:	bne	1437c <close_stdout@@Base+0x580>
   14700:	ldr	r3, [sp, #160]	; 0xa0
   14704:	cmp	r9, #0
   14708:	cmpeq	r3, #2
   1470c:	bne	1471c <close_stdout@@Base+0x920>
   14710:	ldr	r0, [sp, #36]	; 0x24
   14714:	cmp	r0, #0
   14718:	bne	147bc <close_stdout@@Base+0x9c0>
   1471c:	ldr	r1, [sp, #36]	; 0x24
   14720:	ldr	r2, [sp, #52]	; 0x34
   14724:	eor	r3, r1, #1
   14728:	cmp	r2, #0
   1472c:	moveq	r3, #0
   14730:	andne	r3, r3, #1
   14734:	cmp	r3, #0
   14738:	beq	14764 <close_stdout@@Base+0x968>
   1473c:	ldrb	r3, [r2]
   14740:	cmp	r3, #0
   14744:	beq	14764 <close_stdout@@Base+0x968>
   14748:	ldr	r1, [sp, #40]	; 0x28
   1474c:	cmp	sl, r9
   14750:	strbhi	r3, [r1, r9]
   14754:	ldrb	r3, [r2, #1]!
   14758:	add	r9, r9, #1
   1475c:	cmp	r3, #0
   14760:	bne	1474c <close_stdout@@Base+0x950>
   14764:	cmp	r9, sl
   14768:	movcs	r0, r9
   1476c:	ldrcc	r1, [sp, #40]	; 0x28
   14770:	movcc	r3, #0
   14774:	movcc	r0, r9
   14778:	strbcc	r3, [r1, r9]
   1477c:	b	147f8 <close_stdout@@Base+0x9fc>
   14780:	cmn	r8, #1
   14784:	beq	14e4c <close_stdout@@Base+0x1050>
   14788:	subs	r3, r8, #1
   1478c:	movne	r3, #1
   14790:	cmp	r3, #0
   14794:	bne	14674 <close_stdout@@Base+0x878>
   14798:	cmp	fp, #0
   1479c:	bne	14674 <close_stdout@@Base+0x878>
   147a0:	ldr	r3, [sp, #36]	; 0x24
   147a4:	ldr	r0, [sp, #160]	; 0xa0
   147a8:	cmp	r0, #2
   147ac:	movne	r3, #0
   147b0:	andeq	r3, r3, #1
   147b4:	cmp	r3, #0
   147b8:	beq	14674 <close_stdout@@Base+0x878>
   147bc:	ldr	r2, [sp, #164]	; 0xa4
   147c0:	mov	ip, #0
   147c4:	ldr	r0, [sp, #160]	; 0xa0
   147c8:	bic	r3, r2, #2
   147cc:	ldr	r1, [sp, #72]	; 0x48
   147d0:	ldr	r2, [sp, #68]	; 0x44
   147d4:	stm	sp, {r0, r3}
   147d8:	mov	r3, r8
   147dc:	str	r1, [sp, #12]
   147e0:	mov	r1, sl
   147e4:	str	r2, [sp, #16]
   147e8:	ldr	r0, [sp, #40]	; 0x28
   147ec:	ldr	r2, [sp, #32]
   147f0:	str	ip, [sp, #8]
   147f4:	bl	1428c <close_stdout@@Base+0x490>
   147f8:	ldr	r1, [sp, #56]	; 0x38
   147fc:	ldr	r2, [sp, #116]	; 0x74
   14800:	ldr	r3, [r1]
   14804:	cmp	r2, r3
   14808:	bne	14f3c <close_stdout@@Base+0x1140>
   1480c:	add	sp, sp, #124	; 0x7c
   14810:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14814:	mov	r3, #114	; 0x72
   14818:	ldr	r2, [sp, #36]	; 0x24
   1481c:	ldr	r0, [sp, #160]	; 0xa0
   14820:	cmp	r0, #2
   14824:	movne	r2, #0
   14828:	andeq	r2, r2, #1
   1482c:	cmp	r2, #0
   14830:	bne	147bc <close_stdout@@Base+0x9c0>
   14834:	ldr	r1, [sp, #24]
   14838:	cmp	r1, #0
   1483c:	beq	14674 <close_stdout@@Base+0x878>
   14840:	mov	r4, r3
   14844:	b	146ac <close_stdout@@Base+0x8b0>
   14848:	mov	r3, #98	; 0x62
   1484c:	b	14834 <close_stdout@@Base+0xa38>
   14850:	mov	r3, #102	; 0x66
   14854:	b	14834 <close_stdout@@Base+0xa38>
   14858:	mov	r3, #118	; 0x76
   1485c:	b	14834 <close_stdout@@Base+0xa38>
   14860:	mov	r3, #97	; 0x61
   14864:	b	14834 <close_stdout@@Base+0xa38>
   14868:	mov	r3, #110	; 0x6e
   1486c:	b	14818 <close_stdout@@Base+0xa1c>
   14870:	mov	r3, #116	; 0x74
   14874:	b	14818 <close_stdout@@Base+0xa1c>
   14878:	ldr	r2, [sp, #24]
   1487c:	cmp	r2, #0
   14880:	beq	14e28 <close_stdout@@Base+0x102c>
   14884:	ldr	r3, [sp, #36]	; 0x24
   14888:	cmp	r3, #0
   1488c:	bne	147bc <close_stdout@@Base+0x9c0>
   14890:	cmp	r9, sl
   14894:	add	r2, r9, #1
   14898:	ldrcc	r0, [sp, #40]	; 0x28
   1489c:	movcc	r3, #92	; 0x5c
   148a0:	strbcc	r3, [r0, r9]
   148a4:	add	r3, fp, #1
   148a8:	cmp	r8, r3
   148ac:	bls	148ec <close_stdout@@Base+0xaf0>
   148b0:	ldr	r1, [sp, #32]
   148b4:	ldrb	r3, [r1, r3]
   148b8:	sub	r3, r3, #48	; 0x30
   148bc:	cmp	r3, #9
   148c0:	bhi	148ec <close_stdout@@Base+0xaf0>
   148c4:	cmp	sl, r2
   148c8:	ldrhi	r0, [sp, #40]	; 0x28
   148cc:	movhi	r3, #48	; 0x30
   148d0:	strbhi	r3, [r0, r2]
   148d4:	add	r3, r9, #2
   148d8:	cmp	sl, r3
   148dc:	ldrhi	r1, [sp, #40]	; 0x28
   148e0:	movhi	r2, #48	; 0x30
   148e4:	strbhi	r2, [r1, r3]
   148e8:	add	r2, r9, #3
   148ec:	mov	r9, r2
   148f0:	mov	r4, #48	; 0x30
   148f4:	b	14680 <close_stdout@@Base+0x884>
   148f8:	ldr	r1, [sp, #76]	; 0x4c
   148fc:	cmp	r1, #0
   14900:	beq	1490c <close_stdout@@Base+0xb10>
   14904:	cmp	r7, #0
   14908:	bne	146cc <close_stdout@@Base+0x8d0>
   1490c:	mov	r3, r4
   14910:	b	14818 <close_stdout@@Base+0xa1c>
   14914:	ldr	r1, [sp, #160]	; 0xa0
   14918:	cmp	r1, #2
   1491c:	bne	14674 <close_stdout@@Base+0x878>
   14920:	ldr	r2, [sp, #36]	; 0x24
   14924:	cmp	r2, #0
   14928:	bne	147bc <close_stdout@@Base+0x9c0>
   1492c:	cmp	r9, sl
   14930:	ldrcc	r0, [sp, #40]	; 0x28
   14934:	movcc	r3, #39	; 0x27
   14938:	strbcc	r3, [r0, r9]
   1493c:	add	r3, r9, #1
   14940:	cmp	sl, r3
   14944:	ldrhi	r1, [sp, #40]	; 0x28
   14948:	movhi	r2, #92	; 0x5c
   1494c:	strbhi	r2, [r1, r3]
   14950:	add	r3, r9, #2
   14954:	cmp	sl, r3
   14958:	add	r9, r9, #3
   1495c:	ldrhi	r0, [sp, #40]	; 0x28
   14960:	movhi	r2, #39	; 0x27
   14964:	strbhi	r2, [r0, r3]
   14968:	b	14674 <close_stdout@@Base+0x878>
   1496c:	ldr	r1, [sp, #64]	; 0x40
   14970:	cmp	r1, #1
   14974:	bne	14c6c <close_stdout@@Base+0xe70>
   14978:	bl	111ac <__ctype_b_loc@plt>
   1497c:	ldr	r2, [sp, #64]	; 0x40
   14980:	sxth	r3, r4
   14984:	str	r2, [sp, #60]	; 0x3c
   14988:	lsl	r3, r3, #1
   1498c:	ldr	r2, [r0]
   14990:	ldrh	r2, [r2, r3]
   14994:	eor	r2, r2, #16384	; 0x4000
   14998:	ubfx	r2, r2, #14, #1
   1499c:	ldr	r1, [sp, #24]
   149a0:	ands	r2, r2, r1
   149a4:	beq	14674 <close_stdout@@Base+0x878>
   149a8:	ldr	r3, [sp, #60]	; 0x3c
   149ac:	mov	r0, #92	; 0x5c
   149b0:	ldr	r7, [sp, #36]	; 0x24
   149b4:	add	r1, r3, fp
   149b8:	str	r8, [sp, #60]	; 0x3c
   149bc:	ldr	r3, [sp, #40]	; 0x28
   149c0:	b	14a24 <close_stdout@@Base+0xc28>
   149c4:	cmp	r7, #0
   149c8:	bne	14e64 <close_stdout@@Base+0x1068>
   149cc:	add	ip, r9, #1
   149d0:	cmp	r9, sl
   149d4:	strbcc	r0, [r3, r9]
   149d8:	cmp	sl, ip
   149dc:	lsrhi	r8, r4, #6
   149e0:	addhi	r8, r8, #48	; 0x30
   149e4:	strbhi	r8, [r3, ip]
   149e8:	add	ip, r9, #2
   149ec:	add	r9, r9, #3
   149f0:	cmp	sl, ip
   149f4:	ubfxhi	r8, r4, #3, #3
   149f8:	and	r4, r4, #7
   149fc:	add	r4, r4, #48	; 0x30
   14a00:	addhi	r8, r8, #48	; 0x30
   14a04:	strbhi	r8, [r3, ip]
   14a08:	add	fp, fp, #1
   14a0c:	cmp	r1, fp
   14a10:	bls	14a50 <close_stdout@@Base+0xc54>
   14a14:	cmp	r9, sl
   14a18:	strbcc	r4, [r3, r9]
   14a1c:	ldrb	r4, [r5, #1]!
   14a20:	add	r9, r9, #1
   14a24:	cmp	r2, #0
   14a28:	bne	149c4 <close_stdout@@Base+0xbc8>
   14a2c:	cmp	r6, #0
   14a30:	beq	14a08 <close_stdout@@Base+0xc0c>
   14a34:	add	fp, fp, #1
   14a38:	cmp	r9, sl
   14a3c:	strbcc	r0, [r3, r9]
   14a40:	cmp	r1, fp
   14a44:	add	r9, r9, #1
   14a48:	mov	r6, #0
   14a4c:	bhi	14a14 <close_stdout@@Base+0xc18>
   14a50:	ldr	r8, [sp, #60]	; 0x3c
   14a54:	b	146d0 <close_stdout@@Base+0x8d4>
   14a58:	ldr	r3, [sp, #36]	; 0x24
   14a5c:	cmp	r3, #0
   14a60:	bne	14f64 <close_stdout@@Base+0x1168>
   14a64:	cmp	sl, #0
   14a68:	beq	14e7c <close_stdout@@Base+0x1080>
   14a6c:	ldr	r1, [sp, #40]	; 0x28
   14a70:	mov	r0, #1
   14a74:	ldr	r2, [pc, #1296]	; 14f8c <close_stdout@@Base+0x1190>
   14a78:	mov	r3, #34	; 0x22
   14a7c:	str	r0, [sp, #24]
   14a80:	mov	r9, r0
   14a84:	add	r2, pc, r2
   14a88:	str	r0, [sp, #28]
   14a8c:	strb	r3, [r1]
   14a90:	str	r2, [sp, #52]	; 0x34
   14a94:	b	14340 <close_stdout@@Base+0x544>
   14a98:	ldr	r3, [pc, #1264]	; 14f90 <close_stdout@@Base+0x1194>
   14a9c:	mov	r2, #1
   14aa0:	mov	r0, #3
   14aa4:	str	r2, [sp, #36]	; 0x24
   14aa8:	add	r3, pc, r3
   14aac:	str	r2, [sp, #24]
   14ab0:	str	r3, [sp, #52]	; 0x34
   14ab4:	mov	r9, #0
   14ab8:	str	r2, [sp, #28]
   14abc:	str	r0, [sp, #160]	; 0xa0
   14ac0:	b	14340 <close_stdout@@Base+0x544>
   14ac4:	mov	r0, #0
   14ac8:	mov	r1, #1
   14acc:	str	r0, [sp, #36]	; 0x24
   14ad0:	mov	r9, r0
   14ad4:	str	r1, [sp, #24]
   14ad8:	str	r0, [sp, #28]
   14adc:	str	r0, [sp, #52]	; 0x34
   14ae0:	b	14340 <close_stdout@@Base+0x544>
   14ae4:	ldr	r3, [sp, #160]	; 0xa0
   14ae8:	cmp	r3, #8
   14aec:	beq	14b18 <close_stdout@@Base+0xd1c>
   14af0:	ldr	r0, [pc, #1180]	; 14f94 <close_stdout@@Base+0x1198>
   14af4:	mov	r1, r3
   14af8:	add	r0, pc, r0
   14afc:	bl	14128 <close_stdout@@Base+0x32c>
   14b00:	ldr	r1, [sp, #160]	; 0xa0
   14b04:	str	r0, [sp, #72]	; 0x48
   14b08:	ldr	r0, [pc, #1160]	; 14f98 <close_stdout@@Base+0x119c>
   14b0c:	add	r0, pc, r0
   14b10:	bl	14128 <close_stdout@@Base+0x32c>
   14b14:	str	r0, [sp, #68]	; 0x44
   14b18:	ldr	r0, [sp, #36]	; 0x24
   14b1c:	cmp	r0, #0
   14b20:	movne	r9, #0
   14b24:	bne	14b5c <close_stdout@@Base+0xd60>
   14b28:	ldr	r1, [sp, #72]	; 0x48
   14b2c:	ldrb	r3, [r1]
   14b30:	cmp	r3, #0
   14b34:	beq	14f34 <close_stdout@@Base+0x1138>
   14b38:	mov	r2, r1
   14b3c:	ldr	r1, [sp, #40]	; 0x28
   14b40:	mov	r9, r0
   14b44:	cmp	r9, sl
   14b48:	strbcc	r3, [r1, r9]
   14b4c:	ldrb	r3, [r2, #1]!
   14b50:	add	r9, r9, #1
   14b54:	cmp	r3, #0
   14b58:	bne	14b44 <close_stdout@@Base+0xd48>
   14b5c:	ldr	r0, [sp, #68]	; 0x44
   14b60:	str	r0, [sp, #52]	; 0x34
   14b64:	bl	111c4 <strlen@plt>
   14b68:	mov	r2, #1
   14b6c:	str	r2, [sp, #24]
   14b70:	str	r0, [sp, #28]
   14b74:	b	14340 <close_stdout@@Base+0x544>
   14b78:	ldr	r3, [pc, #1052]	; 14f9c <close_stdout@@Base+0x11a0>
   14b7c:	mov	r2, #0
   14b80:	mov	r1, #1
   14b84:	mov	r0, #2
   14b88:	add	r3, pc, r3
   14b8c:	str	r1, [sp, #36]	; 0x24
   14b90:	str	r2, [sp, #24]
   14b94:	mov	r9, r2
   14b98:	str	r1, [sp, #28]
   14b9c:	str	r3, [sp, #52]	; 0x34
   14ba0:	str	r0, [sp, #160]	; 0xa0
   14ba4:	b	14340 <close_stdout@@Base+0x544>
   14ba8:	ldr	r3, [sp, #36]	; 0x24
   14bac:	cmp	r3, #0
   14bb0:	bne	14f40 <close_stdout@@Base+0x1144>
   14bb4:	cmp	sl, #0
   14bb8:	beq	14e9c <close_stdout@@Base+0x10a0>
   14bbc:	ldr	r1, [sp, #40]	; 0x28
   14bc0:	mov	r3, #39	; 0x27
   14bc4:	ldr	r2, [sp, #36]	; 0x24
   14bc8:	mov	r0, #1
   14bcc:	mov	r9, r0
   14bd0:	str	r0, [sp, #28]
   14bd4:	strb	r3, [r1]
   14bd8:	ldr	r3, [pc, #960]	; 14fa0 <close_stdout@@Base+0x11a4>
   14bdc:	str	r2, [sp, #24]
   14be0:	add	r3, pc, r3
   14be4:	str	r3, [sp, #52]	; 0x34
   14be8:	b	14340 <close_stdout@@Base+0x544>
   14bec:	ldr	r2, [sp, #28]
   14bf0:	cmp	r2, #1
   14bf4:	add	r4, fp, r2
   14bf8:	movls	r3, #0
   14bfc:	movhi	r3, #1
   14c00:	cmn	r8, #1
   14c04:	movne	r3, #0
   14c08:	cmp	r3, #0
   14c0c:	beq	14c1c <close_stdout@@Base+0xe20>
   14c10:	ldr	r0, [sp, #32]
   14c14:	bl	111c4 <strlen@plt>
   14c18:	mov	r8, r0
   14c1c:	cmp	r8, r4
   14c20:	ldrcc	r3, [sp, #32]
   14c24:	movcc	r6, #0
   14c28:	addcc	r5, r3, fp
   14c2c:	bcc	1439c <close_stdout@@Base+0x5a0>
   14c30:	ldr	r0, [sp, #32]
   14c34:	ldr	r1, [sp, #52]	; 0x34
   14c38:	add	r5, r0, fp
   14c3c:	ldr	r2, [sp, #28]
   14c40:	mov	r0, r5
   14c44:	bl	11098 <memcmp@plt>
   14c48:	cmp	r0, #0
   14c4c:	bne	14c64 <close_stdout@@Base+0xe68>
   14c50:	ldr	r1, [sp, #36]	; 0x24
   14c54:	cmp	r1, #0
   14c58:	bne	147bc <close_stdout@@Base+0x9c0>
   14c5c:	mov	r6, #1
   14c60:	b	1439c <close_stdout@@Base+0x5a0>
   14c64:	mov	r6, #0
   14c68:	b	1439c <close_stdout@@Base+0x5a0>
   14c6c:	add	r7, sp, #108	; 0x6c
   14c70:	cmn	r8, #1
   14c74:	mov	r3, #0
   14c78:	str	r3, [sp, #108]	; 0x6c
   14c7c:	str	r3, [r7, #4]
   14c80:	beq	14e6c <close_stdout@@Base+0x1070>
   14c84:	mov	r1, #0
   14c88:	ldr	r0, [sp, #32]
   14c8c:	mov	ip, #1
   14c90:	str	r9, [sp, #88]	; 0x58
   14c94:	str	r6, [sp, #96]	; 0x60
   14c98:	mov	r9, r1
   14c9c:	str	r5, [sp, #100]	; 0x64
   14ca0:	mov	r6, ip
   14ca4:	mov	r5, r7
   14ca8:	add	r3, sp, #104	; 0x68
   14cac:	sub	r0, r0, #1
   14cb0:	str	r3, [sp, #80]	; 0x50
   14cb4:	str	r0, [sp, #84]	; 0x54
   14cb8:	str	r1, [sp, #60]	; 0x3c
   14cbc:	str	r4, [sp, #92]	; 0x5c
   14cc0:	ldr	r2, [sp, #32]
   14cc4:	add	r7, r9, fp
   14cc8:	add	r0, sp, #104	; 0x68
   14ccc:	mov	r3, r5
   14cd0:	add	r4, r2, r7
   14cd4:	rsb	r2, r7, r8
   14cd8:	mov	r1, r4
   14cdc:	bl	11128 <mbrtowc@plt>
   14ce0:	subs	r2, r0, #0
   14ce4:	beq	14df0 <close_stdout@@Base+0xff4>
   14ce8:	cmn	r2, #1
   14cec:	beq	14f18 <close_stdout@@Base+0x111c>
   14cf0:	cmn	r2, #2
   14cf4:	beq	14ebc <close_stdout@@Base+0x10c0>
   14cf8:	ldr	r3, [sp, #36]	; 0x24
   14cfc:	ldr	r0, [sp, #160]	; 0xa0
   14d00:	cmp	r0, #2
   14d04:	movne	r3, #0
   14d08:	andeq	r3, r3, #1
   14d0c:	cmp	r3, #0
   14d10:	beq	14dcc <close_stdout@@Base+0xfd0>
   14d14:	cmp	r2, #1
   14d18:	beq	14dcc <close_stdout@@Base+0xfd0>
   14d1c:	ldr	r1, [sp, #84]	; 0x54
   14d20:	add	r3, r1, r2
   14d24:	add	r7, r3, r7
   14d28:	ldrb	r3, [r4, #1]!
   14d2c:	sub	r3, r3, #91	; 0x5b
   14d30:	cmp	r3, #33	; 0x21
   14d34:	addls	pc, pc, r3, lsl #2
   14d38:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d3c:	b	147bc <close_stdout@@Base+0x9c0>
   14d40:	b	147bc <close_stdout@@Base+0x9c0>
   14d44:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d48:	b	147bc <close_stdout@@Base+0x9c0>
   14d4c:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d50:	b	147bc <close_stdout@@Base+0x9c0>
   14d54:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d58:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d5c:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d60:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d64:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d68:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d6c:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d70:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d74:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d78:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d7c:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d80:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d84:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d88:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d8c:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d90:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d94:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d98:	b	14dc4 <close_stdout@@Base+0xfc8>
   14d9c:	b	14dc4 <close_stdout@@Base+0xfc8>
   14da0:	b	14dc4 <close_stdout@@Base+0xfc8>
   14da4:	b	14dc4 <close_stdout@@Base+0xfc8>
   14da8:	b	14dc4 <close_stdout@@Base+0xfc8>
   14dac:	b	14dc4 <close_stdout@@Base+0xfc8>
   14db0:	b	14dc4 <close_stdout@@Base+0xfc8>
   14db4:	b	14dc4 <close_stdout@@Base+0xfc8>
   14db8:	b	14dc4 <close_stdout@@Base+0xfc8>
   14dbc:	b	14dc4 <close_stdout@@Base+0xfc8>
   14dc0:	b	147bc <close_stdout@@Base+0x9c0>
   14dc4:	cmp	r4, r7
   14dc8:	bne	14d28 <close_stdout@@Base+0xf2c>
   14dcc:	ldr	r0, [sp, #104]	; 0x68
   14dd0:	add	r9, r9, r2
   14dd4:	bl	110e0 <iswprint@plt>
   14dd8:	cmp	r0, #0
   14ddc:	mov	r0, r5
   14de0:	moveq	r6, #0
   14de4:	bl	11080 <mbsinit@plt>
   14de8:	cmp	r0, #0
   14dec:	beq	14cc0 <close_stdout@@Base+0xec4>
   14df0:	mov	ip, r6
   14df4:	eor	r2, ip, #1
   14df8:	str	r9, [sp, #60]	; 0x3c
   14dfc:	ldr	r4, [sp, #92]	; 0x5c
   14e00:	uxtb	r2, r2
   14e04:	ldr	r9, [sp, #88]	; 0x58
   14e08:	ldr	r6, [sp, #96]	; 0x60
   14e0c:	ldr	r5, [sp, #100]	; 0x64
   14e10:	ldr	r3, [sp, #60]	; 0x3c
   14e14:	cmp	r3, #1
   14e18:	bls	1499c <close_stdout@@Base+0xba0>
   14e1c:	ldr	r0, [sp, #24]
   14e20:	and	r2, r2, r0
   14e24:	b	149a8 <close_stdout@@Base+0xbac>
   14e28:	ldr	r2, [sp, #164]	; 0xa4
   14e2c:	tst	r2, #1
   14e30:	addne	fp, fp, #1
   14e34:	bne	14364 <close_stdout@@Base+0x568>
   14e38:	b	14674 <close_stdout@@Base+0x878>
   14e3c:	ldr	r0, [sp, #36]	; 0x24
   14e40:	cmp	r0, #0
   14e44:	beq	14674 <close_stdout@@Base+0x878>
   14e48:	b	147bc <close_stdout@@Base+0x9c0>
   14e4c:	ldr	r2, [sp, #32]
   14e50:	ldrb	r3, [r2, #1]
   14e54:	adds	r3, r3, #0
   14e58:	movne	r3, #1
   14e5c:	b	14790 <close_stdout@@Base+0x994>
   14e60:	bl	112a8 <abort@plt>
   14e64:	ldr	r8, [sp, #60]	; 0x3c
   14e68:	b	147bc <close_stdout@@Base+0x9c0>
   14e6c:	ldr	r0, [sp, #32]
   14e70:	bl	111c4 <strlen@plt>
   14e74:	mov	r8, r0
   14e78:	b	14c84 <close_stdout@@Base+0xe88>
   14e7c:	ldr	r2, [pc, #288]	; 14fa4 <close_stdout@@Base+0x11a8>
   14e80:	mov	r1, #1
   14e84:	mov	r9, r1
   14e88:	str	r1, [sp, #24]
   14e8c:	add	r2, pc, r2
   14e90:	str	r1, [sp, #28]
   14e94:	str	r2, [sp, #52]	; 0x34
   14e98:	b	14340 <close_stdout@@Base+0x544>
   14e9c:	ldr	r2, [pc, #260]	; 14fa8 <close_stdout@@Base+0x11ac>
   14ea0:	mov	r3, #1
   14ea4:	mov	r9, r3
   14ea8:	str	r3, [sp, #28]
   14eac:	add	r2, pc, r2
   14eb0:	str	sl, [sp, #24]
   14eb4:	str	r2, [sp, #52]	; 0x34
   14eb8:	b	14340 <close_stdout@@Base+0x544>
   14ebc:	cmp	r8, r7
   14ec0:	str	r9, [sp, #60]	; 0x3c
   14ec4:	mov	ip, r4
   14ec8:	ldr	r6, [sp, #96]	; 0x60
   14ecc:	ldr	r9, [sp, #88]	; 0x58
   14ed0:	ldr	r4, [sp, #92]	; 0x5c
   14ed4:	ldr	r5, [sp, #100]	; 0x64
   14ed8:	bls	14f10 <close_stdout@@Base+0x1114>
   14edc:	ldrb	r3, [ip]
   14ee0:	cmp	r3, #0
   14ee4:	beq	14f10 <close_stdout@@Base+0x1114>
   14ee8:	ldr	r3, [sp, #60]	; 0x3c
   14eec:	b	14efc <close_stdout@@Base+0x1100>
   14ef0:	ldrb	r2, [r5, r3]
   14ef4:	cmp	r2, #0
   14ef8:	beq	14f0c <close_stdout@@Base+0x1110>
   14efc:	add	r3, r3, #1
   14f00:	add	r2, fp, r3
   14f04:	cmp	r8, r2
   14f08:	bhi	14ef0 <close_stdout@@Base+0x10f4>
   14f0c:	str	r3, [sp, #60]	; 0x3c
   14f10:	mov	r2, #1
   14f14:	b	14e10 <close_stdout@@Base+0x1014>
   14f18:	str	r9, [sp, #60]	; 0x3c
   14f1c:	mov	r2, #1
   14f20:	ldr	r4, [sp, #92]	; 0x5c
   14f24:	ldr	r6, [sp, #96]	; 0x60
   14f28:	ldr	r9, [sp, #88]	; 0x58
   14f2c:	ldr	r5, [sp, #100]	; 0x64
   14f30:	b	14e10 <close_stdout@@Base+0x1014>
   14f34:	ldr	r9, [sp, #36]	; 0x24
   14f38:	b	14b5c <close_stdout@@Base+0xd60>
   14f3c:	bl	110bc <__stack_chk_fail@plt>
   14f40:	ldr	r1, [pc, #100]	; 14fac <close_stdout@@Base+0x11b0>
   14f44:	mov	r3, #0
   14f48:	mov	r0, #1
   14f4c:	str	r3, [sp, #24]
   14f50:	add	r1, pc, r1
   14f54:	str	r0, [sp, #28]
   14f58:	mov	r9, r3
   14f5c:	str	r1, [sp, #52]	; 0x34
   14f60:	b	14340 <close_stdout@@Base+0x544>
   14f64:	ldr	r0, [pc, #68]	; 14fb0 <close_stdout@@Base+0x11b4>
   14f68:	mov	r3, #1
   14f6c:	mov	r9, #0
   14f70:	str	r3, [sp, #24]
   14f74:	add	r0, pc, r0
   14f78:	str	r3, [sp, #28]
   14f7c:	str	r0, [sp, #52]	; 0x34
   14f80:	b	14340 <close_stdout@@Base+0x544>
   14f84:	andeq	r5, r1, r0, asr sp
   14f88:	andeq	r0, r0, r4, lsl #2
   14f8c:	andeq	r4, r0, r8, lsl r3
   14f90:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   14f94:			; <UNDEFINED> instruction: 0x000042b0
   14f98:	andeq	r4, r0, ip, lsl #5
   14f9c:	andeq	r4, r0, r0, lsl r2
   14fa0:			; <UNDEFINED> instruction: 0x000041b8
   14fa4:	andeq	r3, r0, r0, lsl pc
   14fa8:	andeq	r3, r0, ip, ror #29
   14fac:	andeq	r3, r0, r8, asr #28
   14fb0:	andeq	r3, r0, r8, lsr #28
   14fb4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14fb8:	sub	sp, sp, #44	; 0x2c
   14fbc:	mov	r6, r0
   14fc0:	mov	r9, r1
   14fc4:	mov	sl, r2
   14fc8:	mov	r4, r3
   14fcc:	bl	111e8 <__errno_location@plt>
   14fd0:	ldr	fp, [pc, #412]	; 15174 <close_stdout@@Base+0x1378>
   14fd4:	cmp	r6, #0
   14fd8:	add	fp, pc, fp
   14fdc:	ldr	r5, [fp]
   14fe0:	ldr	r1, [r0]
   14fe4:	mov	r8, r0
   14fe8:	str	r1, [sp, #36]	; 0x24
   14fec:	blt	1516c <close_stdout@@Base+0x1370>
   14ff0:	ldr	r3, [pc, #384]	; 15178 <close_stdout@@Base+0x137c>
   14ff4:	add	r3, pc, r3
   14ff8:	ldr	r3, [r3]
   14ffc:	cmp	r6, r3
   15000:	bcc	15054 <close_stdout@@Base+0x1258>
   15004:	add	r7, r6, #1
   15008:	cmn	r7, #-536870911	; 0xe0000001
   1500c:	bhi	15170 <close_stdout@@Base+0x1374>
   15010:	add	r3, fp, #4
   15014:	cmp	r5, r3
   15018:	beq	15144 <close_stdout@@Base+0x1348>
   1501c:	mov	r0, r5
   15020:	lsl	r1, r7, #3
   15024:	bl	15eac <close_stdout@@Base+0x20b0>
   15028:	mov	r5, r0
   1502c:	str	r0, [fp]
   15030:	ldr	fp, [pc, #324]	; 1517c <close_stdout@@Base+0x1380>
   15034:	mov	r1, #0
   15038:	add	fp, pc, fp
   1503c:	ldr	r0, [fp]
   15040:	rsb	r2, r0, r7
   15044:	add	r0, r5, r0, lsl #3
   15048:	lsl	r2, r2, #3
   1504c:	bl	1120c <memset@plt>
   15050:	str	r7, [fp]
   15054:	add	r2, r4, #8
   15058:	str	r2, [sp, #32]
   1505c:	ldr	r1, [r4]
   15060:	add	fp, r5, r6, lsl #3
   15064:	ldr	lr, [sp, #32]
   15068:	mov	r2, r9
   1506c:	ldr	r3, [r4, #4]
   15070:	ldr	ip, [r5, r6, lsl #3]
   15074:	ldr	r7, [fp, #4]
   15078:	orr	r3, r3, #1
   1507c:	str	r1, [sp]
   15080:	str	r3, [sp, #4]
   15084:	mov	r1, ip
   15088:	str	lr, [sp, #8]
   1508c:	mov	r0, r7
   15090:	ldr	lr, [r4, #40]	; 0x28
   15094:	str	r3, [sp, #28]
   15098:	mov	r3, sl
   1509c:	str	lr, [sp, #12]
   150a0:	ldr	lr, [r4, #44]	; 0x2c
   150a4:	str	ip, [sp, #24]
   150a8:	str	lr, [sp, #16]
   150ac:	bl	1428c <close_stdout@@Base+0x490>
   150b0:	ldr	ip, [sp, #24]
   150b4:	cmp	ip, r0
   150b8:	bhi	15130 <close_stdout@@Base+0x1334>
   150bc:	ldr	r3, [pc, #188]	; 15180 <close_stdout@@Base+0x1384>
   150c0:	add	r1, r0, #1
   150c4:	str	r1, [r5, r6, lsl #3]
   150c8:	add	r3, pc, r3
   150cc:	cmp	r7, r3
   150d0:	beq	150e4 <close_stdout@@Base+0x12e8>
   150d4:	mov	r0, r7
   150d8:	str	r1, [sp, #24]
   150dc:	bl	11050 <free@plt>
   150e0:	ldr	r1, [sp, #24]
   150e4:	mov	r0, r1
   150e8:	str	r1, [sp, #24]
   150ec:	bl	15e54 <close_stdout@@Base+0x2058>
   150f0:	ldr	r3, [sp, #28]
   150f4:	ldr	lr, [sp, #32]
   150f8:	mov	r2, r9
   150fc:	str	r0, [fp, #4]
   15100:	mov	r7, r0
   15104:	ldr	ip, [r4]
   15108:	str	r3, [sp, #4]
   1510c:	mov	r3, sl
   15110:	str	lr, [sp, #8]
   15114:	str	ip, [sp]
   15118:	ldr	ip, [r4, #40]	; 0x28
   1511c:	ldr	r1, [sp, #24]
   15120:	str	ip, [sp, #12]
   15124:	ldr	ip, [r4, #44]	; 0x2c
   15128:	str	ip, [sp, #16]
   1512c:	bl	1428c <close_stdout@@Base+0x490>
   15130:	ldr	r1, [sp, #36]	; 0x24
   15134:	mov	r0, r7
   15138:	str	r1, [r8]
   1513c:	add	sp, sp, #44	; 0x2c
   15140:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15144:	lsl	r1, r7, #3
   15148:	mov	r0, #0
   1514c:	str	r3, [sp, #24]
   15150:	bl	15eac <close_stdout@@Base+0x20b0>
   15154:	ldr	r3, [sp, #24]
   15158:	mov	r5, r0
   1515c:	ldm	r3, {r0, r1}
   15160:	str	r5, [fp]
   15164:	stm	r5, {r0, r1}
   15168:	b	15030 <close_stdout@@Base+0x1234>
   1516c:	bl	112a8 <abort@plt>
   15170:	bl	16068 <close_stdout@@Base+0x226c>
   15174:	muleq	r1, ip, r1
   15178:	andeq	r5, r1, ip, asr #2
   1517c:	andeq	r5, r1, r8, lsl #2
   15180:	ldrdeq	r7, [r1], -r0
   15184:	push	{r4, r5, r6, lr}
   15188:	mov	r5, r0
   1518c:	bl	111e8 <__errno_location@plt>
   15190:	cmp	r5, #0
   15194:	mov	r1, #48	; 0x30
   15198:	mov	r4, r0
   1519c:	ldr	r0, [pc, #24]	; 151bc <close_stdout@@Base+0x13c0>
   151a0:	ldr	r6, [r4]
   151a4:	add	r0, pc, r0
   151a8:	add	r0, r0, #256	; 0x100
   151ac:	movne	r0, r5
   151b0:	bl	16028 <close_stdout@@Base+0x222c>
   151b4:	str	r6, [r4]
   151b8:	pop	{r4, r5, r6, pc}
   151bc:	strdeq	r7, [r1], -r4
   151c0:	cmp	r0, #0
   151c4:	beq	151d0 <close_stdout@@Base+0x13d4>
   151c8:	ldr	r0, [r0]
   151cc:	bx	lr
   151d0:	ldr	r0, [pc, #12]	; 151e4 <close_stdout@@Base+0x13e8>
   151d4:	add	r0, pc, r0
   151d8:	add	r0, r0, #256	; 0x100
   151dc:	ldr	r0, [r0]
   151e0:	bx	lr
   151e4:	andeq	r7, r1, r4, asr #5
   151e8:	cmp	r0, #0
   151ec:	beq	151f8 <close_stdout@@Base+0x13fc>
   151f0:	str	r1, [r0]
   151f4:	bx	lr
   151f8:	ldr	r0, [pc, #12]	; 1520c <close_stdout@@Base+0x1410>
   151fc:	add	r0, pc, r0
   15200:	add	r0, r0, #256	; 0x100
   15204:	str	r1, [r0]
   15208:	bx	lr
   1520c:	muleq	r1, ip, r2
   15210:	cmp	r0, #0
   15214:	movne	r3, r0
   15218:	beq	15248 <close_stdout@@Base+0x144c>
   1521c:	lsr	ip, r1, #5
   15220:	and	r1, r1, #31
   15224:	add	r3, r3, ip, lsl #2
   15228:	ldr	ip, [r3, #8]
   1522c:	lsr	r0, ip, r1
   15230:	eor	r2, r0, r2
   15234:	and	r0, r0, #1
   15238:	and	r2, r2, #1
   1523c:	eor	ip, ip, r2, lsl r1
   15240:	str	ip, [r3, #8]
   15244:	bx	lr
   15248:	ldr	r3, [pc, #8]	; 15258 <close_stdout@@Base+0x145c>
   1524c:	add	r3, pc, r3
   15250:	add	r3, r3, #256	; 0x100
   15254:	b	1521c <close_stdout@@Base+0x1420>
   15258:	andeq	r7, r1, ip, asr #4
   1525c:	subs	r3, r0, #0
   15260:	beq	15270 <close_stdout@@Base+0x1474>
   15264:	ldr	r0, [r3, #4]
   15268:	str	r1, [r3, #4]
   1526c:	bx	lr
   15270:	ldr	r3, [pc, #8]	; 15280 <close_stdout@@Base+0x1484>
   15274:	add	r3, pc, r3
   15278:	add	r3, r3, #256	; 0x100
   1527c:	b	15264 <close_stdout@@Base+0x1468>
   15280:	andeq	r7, r1, r4, lsr #4
   15284:	cmp	r0, #0
   15288:	push	{r3, lr}
   1528c:	beq	152b0 <close_stdout@@Base+0x14b4>
   15290:	cmp	r2, #0
   15294:	cmpne	r1, #0
   15298:	mov	r3, #8
   1529c:	strne	r1, [r0, #40]	; 0x28
   152a0:	str	r3, [r0]
   152a4:	strne	r2, [r0, #44]	; 0x2c
   152a8:	popne	{r3, pc}
   152ac:	bl	112a8 <abort@plt>
   152b0:	ldr	r0, [pc, #8]	; 152c0 <close_stdout@@Base+0x14c4>
   152b4:	add	r0, pc, r0
   152b8:	add	r0, r0, #256	; 0x100
   152bc:	b	15290 <close_stdout@@Base+0x1494>
   152c0:	andeq	r7, r1, r4, ror #3
   152c4:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   152c8:	sub	sp, sp, #24
   152cc:	mov	r7, r0
   152d0:	mov	sl, r1
   152d4:	ldr	r4, [sp, #56]	; 0x38
   152d8:	mov	r9, r2
   152dc:	mov	r8, r3
   152e0:	cmp	r4, #0
   152e4:	beq	15338 <close_stdout@@Base+0x153c>
   152e8:	bl	111e8 <__errno_location@plt>
   152ec:	ldr	r3, [r4]
   152f0:	add	lr, r4, #8
   152f4:	mov	r1, sl
   152f8:	mov	r2, r9
   152fc:	ldr	r6, [r0]
   15300:	mov	r5, r0
   15304:	str	r3, [sp]
   15308:	mov	r0, r7
   1530c:	ldr	ip, [r4, #4]
   15310:	mov	r3, r8
   15314:	stmib	sp, {ip, lr}
   15318:	ldr	ip, [r4, #40]	; 0x28
   1531c:	str	ip, [sp, #12]
   15320:	ldr	ip, [r4, #44]	; 0x2c
   15324:	str	ip, [sp, #16]
   15328:	bl	1428c <close_stdout@@Base+0x490>
   1532c:	str	r6, [r5]
   15330:	add	sp, sp, #24
   15334:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15338:	ldr	r4, [pc, #8]	; 15348 <close_stdout@@Base+0x154c>
   1533c:	add	r4, pc, r4
   15340:	add	r4, r4, #256	; 0x100
   15344:	b	152e8 <close_stdout@@Base+0x14ec>
   15348:	andeq	r7, r1, ip, asr r1
   1534c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15350:	subs	r4, r3, #0
   15354:	sub	sp, sp, #36	; 0x24
   15358:	mov	r7, r0
   1535c:	mov	r6, r1
   15360:	mov	r5, r2
   15364:	beq	15420 <close_stdout@@Base+0x1624>
   15368:	bl	111e8 <__errno_location@plt>
   1536c:	ldr	r3, [r4]
   15370:	ldr	sl, [r4, #4]
   15374:	add	r9, r4, #8
   15378:	mov	r8, r0
   1537c:	mov	r0, #0
   15380:	ldr	r2, [r8]
   15384:	cmp	r5, r0
   15388:	orreq	sl, sl, #1
   1538c:	str	r9, [sp, #8]
   15390:	mov	r1, r0
   15394:	stm	sp, {r3, sl}
   15398:	mov	r3, r6
   1539c:	ldr	ip, [r4, #40]	; 0x28
   153a0:	str	r2, [sp, #28]
   153a4:	mov	r2, r7
   153a8:	str	ip, [sp, #12]
   153ac:	ldr	ip, [r4, #44]	; 0x2c
   153b0:	str	ip, [sp, #16]
   153b4:	bl	1428c <close_stdout@@Base+0x490>
   153b8:	add	r1, r0, #1
   153bc:	mov	fp, r0
   153c0:	str	r1, [sp, #24]
   153c4:	mov	r0, r1
   153c8:	bl	15e54 <close_stdout@@Base+0x2058>
   153cc:	ldr	lr, [r4]
   153d0:	str	sl, [sp, #4]
   153d4:	mov	r3, r6
   153d8:	str	r9, [sp, #8]
   153dc:	mov	r2, r7
   153e0:	str	lr, [sp]
   153e4:	ldr	lr, [r4, #40]	; 0x28
   153e8:	ldr	r1, [sp, #24]
   153ec:	str	lr, [sp, #12]
   153f0:	ldr	lr, [r4, #44]	; 0x2c
   153f4:	str	lr, [sp, #16]
   153f8:	str	r0, [sp, #24]
   153fc:	bl	1428c <close_stdout@@Base+0x490>
   15400:	ldr	r3, [sp, #28]
   15404:	cmp	r5, #0
   15408:	str	r3, [r8]
   1540c:	ldr	ip, [sp, #24]
   15410:	strne	fp, [r5]
   15414:	mov	r0, ip
   15418:	add	sp, sp, #36	; 0x24
   1541c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15420:	ldr	r4, [pc, #8]	; 15430 <close_stdout@@Base+0x1634>
   15424:	add	r4, pc, r4
   15428:	add	r4, r4, #256	; 0x100
   1542c:	b	15368 <close_stdout@@Base+0x156c>
   15430:	andeq	r7, r1, r4, ror r0
   15434:	mov	r3, r2
   15438:	mov	r2, #0
   1543c:	b	1534c <close_stdout@@Base+0x1550>
   15440:	ldr	r2, [pc, #152]	; 154e0 <close_stdout@@Base+0x16e4>
   15444:	push	{r3, r4, r5, r6, r7, lr}
   15448:	add	r2, pc, r2
   1544c:	ldr	r3, [pc, #144]	; 154e4 <close_stdout@@Base+0x16e8>
   15450:	ldr	r6, [r2]
   15454:	add	r3, pc, r3
   15458:	cmp	r6, #1
   1545c:	ldr	r7, [r3]
   15460:	movhi	r4, #1
   15464:	movhi	r5, r7
   15468:	bls	15484 <close_stdout@@Base+0x1688>
   1546c:	ldr	r0, [r5, #12]
   15470:	add	r4, r4, #1
   15474:	bl	11050 <free@plt>
   15478:	cmp	r4, r6
   1547c:	add	r5, r5, #8
   15480:	bne	1546c <close_stdout@@Base+0x1670>
   15484:	ldr	r4, [pc, #92]	; 154e8 <close_stdout@@Base+0x16ec>
   15488:	ldr	r0, [r7, #4]
   1548c:	add	r4, pc, r4
   15490:	cmp	r0, r4
   15494:	beq	154ac <close_stdout@@Base+0x16b0>
   15498:	bl	11050 <free@plt>
   1549c:	ldr	r3, [pc, #72]	; 154ec <close_stdout@@Base+0x16f0>
   154a0:	mov	r2, #256	; 0x100
   154a4:	add	r3, pc, r3
   154a8:	stmib	r3, {r2, r4}
   154ac:	ldr	r4, [pc, #60]	; 154f0 <close_stdout@@Base+0x16f4>
   154b0:	add	r4, pc, r4
   154b4:	add	r5, r4, #4
   154b8:	cmp	r7, r5
   154bc:	beq	154cc <close_stdout@@Base+0x16d0>
   154c0:	mov	r0, r7
   154c4:	bl	11050 <free@plt>
   154c8:	str	r5, [r4]
   154cc:	ldr	r3, [pc, #32]	; 154f4 <close_stdout@@Base+0x16f8>
   154d0:	mov	r2, #1
   154d4:	add	r3, pc, r3
   154d8:	str	r2, [r3]
   154dc:	pop	{r3, r4, r5, r6, r7, pc}
   154e0:	strdeq	r4, [r1], -r8
   154e4:	andeq	r4, r1, r0, lsr #26
   154e8:	andeq	r7, r1, ip
   154ec:	ldrdeq	r4, [r1], -r0
   154f0:	andeq	r4, r1, r4, asr #25
   154f4:	andeq	r4, r1, ip, ror #24
   154f8:	ldr	r3, [pc, #12]	; 1550c <close_stdout@@Base+0x1710>
   154fc:	mvn	r2, #0
   15500:	add	r3, pc, r3
   15504:	add	r3, r3, #256	; 0x100
   15508:	b	14fb4 <close_stdout@@Base+0x11b8>
   1550c:	muleq	r1, r8, pc	; <UNPREDICTABLE>
   15510:	ldr	r3, [pc, #8]	; 15520 <close_stdout@@Base+0x1724>
   15514:	add	r3, pc, r3
   15518:	add	r3, r3, #256	; 0x100
   1551c:	b	14fb4 <close_stdout@@Base+0x11b8>
   15520:	andeq	r6, r1, r4, lsl #31
   15524:	mov	r1, r0
   15528:	mov	r0, #0
   1552c:	b	154f8 <close_stdout@@Base+0x16fc>
   15530:	mov	r2, r1
   15534:	mov	r1, r0
   15538:	mov	r0, #0
   1553c:	b	15510 <close_stdout@@Base+0x1714>
   15540:	ldr	r3, [pc, #92]	; 155a4 <close_stdout@@Base+0x17a8>
   15544:	ldr	ip, [pc, #92]	; 155a8 <close_stdout@@Base+0x17ac>
   15548:	add	r3, pc, r3
   1554c:	push	{r4, r5, r6, r7, lr}
   15550:	sub	sp, sp, #60	; 0x3c
   15554:	ldr	r4, [r3, ip]
   15558:	add	r5, sp, #4
   1555c:	mov	r7, r2
   15560:	mov	r6, r0
   15564:	mov	r0, r5
   15568:	ldr	r3, [r4]
   1556c:	str	r3, [sp, #52]	; 0x34
   15570:	bl	140d4 <close_stdout@@Base+0x2d8>
   15574:	mov	r3, r5
   15578:	mvn	r2, #0
   1557c:	mov	r0, r6
   15580:	mov	r1, r7
   15584:	bl	14fb4 <close_stdout@@Base+0x11b8>
   15588:	ldr	r2, [sp, #52]	; 0x34
   1558c:	ldr	r3, [r4]
   15590:	cmp	r2, r3
   15594:	bne	155a0 <close_stdout@@Base+0x17a4>
   15598:	add	sp, sp, #60	; 0x3c
   1559c:	pop	{r4, r5, r6, r7, pc}
   155a0:	bl	110bc <__stack_chk_fail@plt>
   155a4:			; <UNDEFINED> instruction: 0x00014ab0
   155a8:	andeq	r0, r0, r4, lsl #2
   155ac:	ldr	ip, [pc, #96]	; 15614 <close_stdout@@Base+0x1818>
   155b0:	push	{r4, r5, r6, r7, r8, lr}
   155b4:	add	ip, pc, ip
   155b8:	ldr	lr, [pc, #88]	; 15618 <close_stdout@@Base+0x181c>
   155bc:	sub	sp, sp, #56	; 0x38
   155c0:	mov	r8, r3
   155c4:	add	r5, sp, #4
   155c8:	mov	r7, r2
   155cc:	mov	r6, r0
   155d0:	ldr	r4, [ip, lr]
   155d4:	mov	r0, r5
   155d8:	ldr	r3, [r4]
   155dc:	str	r3, [sp, #52]	; 0x34
   155e0:	bl	140d4 <close_stdout@@Base+0x2d8>
   155e4:	mov	r2, r8
   155e8:	mov	r3, r5
   155ec:	mov	r0, r6
   155f0:	mov	r1, r7
   155f4:	bl	14fb4 <close_stdout@@Base+0x11b8>
   155f8:	ldr	r2, [sp, #52]	; 0x34
   155fc:	ldr	r3, [r4]
   15600:	cmp	r2, r3
   15604:	bne	15610 <close_stdout@@Base+0x1814>
   15608:	add	sp, sp, #56	; 0x38
   1560c:	pop	{r4, r5, r6, r7, r8, pc}
   15610:	bl	110bc <__stack_chk_fail@plt>
   15614:	andeq	r4, r1, r4, asr #20
   15618:	andeq	r0, r0, r4, lsl #2
   1561c:	mov	r2, r1
   15620:	mov	r1, r0
   15624:	mov	r0, #0
   15628:	b	15540 <close_stdout@@Base+0x1744>
   1562c:	mov	ip, r1
   15630:	mov	r3, r2
   15634:	mov	r1, r0
   15638:	mov	r2, ip
   1563c:	mov	r0, #0
   15640:	b	155ac <close_stdout@@Base+0x17b0>
   15644:	push	{r4, r5, r6, r7, r8, lr}
   15648:	mov	r5, r2
   1564c:	ldr	lr, [pc, #136]	; 156dc <close_stdout@@Base+0x18e0>
   15650:	mov	r7, r0
   15654:	mov	r6, r1
   15658:	ldr	r4, [pc, #128]	; 156e0 <close_stdout@@Base+0x18e4>
   1565c:	add	lr, pc, lr
   15660:	sub	sp, sp, #56	; 0x38
   15664:	add	lr, lr, #256	; 0x100
   15668:	ldr	r8, [pc, #116]	; 156e4 <close_stdout@@Base+0x18e8>
   1566c:	add	r4, pc, r4
   15670:	add	ip, sp, #4
   15674:	ldm	lr!, {r0, r1, r2, r3}
   15678:	ldr	r4, [r4, r8]
   1567c:	stmia	ip!, {r0, r1, r2, r3}
   15680:	ldm	lr!, {r0, r1, r2, r3}
   15684:	ldr	r8, [r4]
   15688:	stmia	ip!, {r0, r1, r2, r3}
   1568c:	ldm	lr, {r0, r1, r2, r3}
   15690:	str	r8, [sp, #52]	; 0x34
   15694:	stm	ip, {r0, r1, r2, r3}
   15698:	mov	r1, r5
   1569c:	add	r5, sp, #4
   156a0:	mov	r2, #1
   156a4:	mov	r0, r5
   156a8:	bl	15210 <close_stdout@@Base+0x1414>
   156ac:	mov	r2, r6
   156b0:	mov	r3, r5
   156b4:	mov	r1, r7
   156b8:	mov	r0, #0
   156bc:	bl	14fb4 <close_stdout@@Base+0x11b8>
   156c0:	ldr	r2, [sp, #52]	; 0x34
   156c4:	ldr	r3, [r4]
   156c8:	cmp	r2, r3
   156cc:	bne	156d8 <close_stdout@@Base+0x18dc>
   156d0:	add	sp, sp, #56	; 0x38
   156d4:	pop	{r4, r5, r6, r7, r8, pc}
   156d8:	bl	110bc <__stack_chk_fail@plt>
   156dc:	andeq	r6, r1, ip, lsr lr
   156e0:	andeq	r4, r1, ip, lsl #19
   156e4:	andeq	r0, r0, r4, lsl #2
   156e8:	mov	r2, r1
   156ec:	mvn	r1, #0
   156f0:	b	15644 <close_stdout@@Base+0x1848>
   156f4:	mov	r1, #58	; 0x3a
   156f8:	b	156e8 <close_stdout@@Base+0x18ec>
   156fc:	mov	r2, #58	; 0x3a
   15700:	b	15644 <close_stdout@@Base+0x1848>
   15704:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   15708:	mov	r5, r2
   1570c:	ldr	lr, [pc, #144]	; 157a4 <close_stdout@@Base+0x19a8>
   15710:	mov	r8, r0
   15714:	mov	r9, r1
   15718:	mov	r7, r3
   1571c:	add	lr, pc, lr
   15720:	ldr	r4, [pc, #128]	; 157a8 <close_stdout@@Base+0x19ac>
   15724:	add	lr, lr, #256	; 0x100
   15728:	sub	sp, sp, #56	; 0x38
   1572c:	ldr	sl, [pc, #120]	; 157ac <close_stdout@@Base+0x19b0>
   15730:	add	r4, pc, r4
   15734:	ldm	lr!, {r0, r1, r2, r3}
   15738:	add	ip, sp, #4
   1573c:	ldr	r4, [r4, sl]
   15740:	ldr	r6, [sp, #88]	; 0x58
   15744:	stmia	ip!, {r0, r1, r2, r3}
   15748:	ldm	lr!, {r0, r1, r2, r3}
   1574c:	ldr	sl, [r4]
   15750:	stmia	ip!, {r0, r1, r2, r3}
   15754:	ldm	lr, {r0, r1, r2, r3}
   15758:	str	sl, [sp, #52]	; 0x34
   1575c:	stm	ip, {r0, r1, r2, r3}
   15760:	mov	r2, r5
   15764:	add	r5, sp, #4
   15768:	mov	r1, r9
   1576c:	mov	r0, r5
   15770:	bl	15284 <close_stdout@@Base+0x1488>
   15774:	mov	r2, r6
   15778:	mov	r3, r5
   1577c:	mov	r0, r8
   15780:	mov	r1, r7
   15784:	bl	14fb4 <close_stdout@@Base+0x11b8>
   15788:	ldr	r2, [sp, #52]	; 0x34
   1578c:	ldr	r3, [r4]
   15790:	cmp	r2, r3
   15794:	bne	157a0 <close_stdout@@Base+0x19a4>
   15798:	add	sp, sp, #56	; 0x38
   1579c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   157a0:	bl	110bc <__stack_chk_fail@plt>
   157a4:	andeq	r6, r1, ip, ror sp
   157a8:	andeq	r4, r1, r8, asr #17
   157ac:	andeq	r0, r0, r4, lsl #2
   157b0:	push	{lr}		; (str lr, [sp, #-4]!)
   157b4:	sub	sp, sp, #12
   157b8:	mvn	ip, #0
   157bc:	str	ip, [sp]
   157c0:	bl	15704 <close_stdout@@Base+0x1908>
   157c4:	add	sp, sp, #12
   157c8:	pop	{pc}		; (ldr pc, [sp], #4)
   157cc:	mov	ip, r1
   157d0:	mov	r3, r2
   157d4:	mov	r1, r0
   157d8:	mov	r2, ip
   157dc:	mov	r0, #0
   157e0:	b	157b0 <close_stdout@@Base+0x19b4>
   157e4:	push	{lr}		; (str lr, [sp, #-4]!)
   157e8:	sub	sp, sp, #12
   157ec:	mov	lr, r1
   157f0:	mov	ip, r2
   157f4:	mov	r1, r0
   157f8:	str	r3, [sp]
   157fc:	mov	r2, lr
   15800:	mov	r3, ip
   15804:	mov	r0, #0
   15808:	bl	15704 <close_stdout@@Base+0x1908>
   1580c:	add	sp, sp, #12
   15810:	pop	{pc}		; (ldr pc, [sp], #4)
   15814:	ldr	r3, [pc, #12]	; 15828 <close_stdout@@Base+0x1a2c>
   15818:	ldr	ip, [pc, #12]	; 1582c <close_stdout@@Base+0x1a30>
   1581c:	add	r3, pc, r3
   15820:	ldr	r3, [r3, ip]
   15824:	b	14fb4 <close_stdout@@Base+0x11b8>
   15828:	ldrdeq	r4, [r1], -ip
   1582c:	andeq	r0, r0, r0, lsl #2
   15830:	mov	r2, r1
   15834:	mov	r1, r0
   15838:	mov	r0, #0
   1583c:	b	15814 <close_stdout@@Base+0x1a18>
   15840:	mvn	r2, #0
   15844:	b	15814 <close_stdout@@Base+0x1a18>
   15848:	mov	r1, r0
   1584c:	mov	r0, #0
   15850:	b	15840 <close_stdout@@Base+0x1a44>
   15854:	push	{r4, r5, r6, r7, r8, lr}
   15858:	mov	r8, #57344	; 0xe000
   1585c:	movt	r8, #32767	; 0x7fff
   15860:	mov	r7, r0
   15864:	mov	r6, r1
   15868:	mov	r4, r2
   1586c:	mov	r0, r7
   15870:	mov	r1, r6
   15874:	mov	r2, r4
   15878:	bl	11038 <read@plt>
   1587c:	subs	r5, r0, #0
   15880:	bge	158ac <close_stdout@@Base+0x1ab0>
   15884:	bl	111e8 <__errno_location@plt>
   15888:	ldr	r3, [r0]
   1588c:	cmp	r3, #4
   15890:	beq	1586c <close_stdout@@Base+0x1a70>
   15894:	cmp	r3, #22
   15898:	bne	158ac <close_stdout@@Base+0x1ab0>
   1589c:	cmp	r4, r8
   158a0:	mov	r4, #57344	; 0xe000
   158a4:	movt	r4, #32767	; 0x7fff
   158a8:	bhi	1586c <close_stdout@@Base+0x1a70>
   158ac:	mov	r0, r5
   158b0:	pop	{r4, r5, r6, r7, r8, pc}
   158b4:	push	{r4, r5, r6, r7, lr}
   158b8:	cmp	r1, #0
   158bc:	sub	sp, sp, #36	; 0x24
   158c0:	ldr	r7, [pc, #896]	; 15c48 <close_stdout@@Base+0x1e4c>
   158c4:	mov	ip, r3
   158c8:	mov	r5, r0
   158cc:	add	r7, pc, r7
   158d0:	ldr	r4, [sp, #56]	; 0x38
   158d4:	ldr	r6, [sp, #60]	; 0x3c
   158d8:	beq	15c1c <close_stdout@@Base+0x1e20>
   158dc:	str	r2, [sp]
   158e0:	mov	r3, r1
   158e4:	ldr	r2, [pc, #864]	; 15c4c <close_stdout@@Base+0x1e50>
   158e8:	mov	r1, #1
   158ec:	str	ip, [sp, #4]
   158f0:	add	r2, pc, r2
   158f4:	bl	1123c <__fprintf_chk@plt>
   158f8:	ldr	r1, [pc, #848]	; 15c50 <close_stdout@@Base+0x1e54>
   158fc:	mov	r2, #5
   15900:	mov	r0, #0
   15904:	add	r1, pc, r1
   15908:	bl	110b0 <dcgettext@plt>
   1590c:	ldr	r2, [pc, #832]	; 15c54 <close_stdout@@Base+0x1e58>
   15910:	movw	ip, #2013	; 0x7dd
   15914:	mov	r1, #1
   15918:	ldr	r2, [r7, r2]
   1591c:	str	ip, [sp]
   15920:	mov	r3, r0
   15924:	mov	r0, r5
   15928:	bl	1123c <__fprintf_chk@plt>
   1592c:	ldr	r1, [pc, #804]	; 15c58 <close_stdout@@Base+0x1e5c>
   15930:	mov	r0, #0
   15934:	mov	r2, #5
   15938:	add	r1, pc, r1
   1593c:	bl	110b0 <dcgettext@plt>
   15940:	mov	r1, r5
   15944:	bl	11008 <fputs_unlocked@plt>
   15948:	cmp	r6, #9
   1594c:	addls	pc, pc, r6, lsl #2
   15950:	b	15c38 <close_stdout@@Base+0x1e3c>
   15954:	b	159e8 <close_stdout@@Base+0x1bec>
   15958:	b	159ec <close_stdout@@Base+0x1bf0>
   1595c:	b	15a1c <close_stdout@@Base+0x1c20>
   15960:	b	15a50 <close_stdout@@Base+0x1c54>
   15964:	b	15a8c <close_stdout@@Base+0x1c90>
   15968:	b	15acc <close_stdout@@Base+0x1cd0>
   1596c:	b	15b14 <close_stdout@@Base+0x1d18>
   15970:	b	15b64 <close_stdout@@Base+0x1d68>
   15974:	b	15bbc <close_stdout@@Base+0x1dc0>
   15978:	b	1597c <close_stdout@@Base+0x1b80>
   1597c:	ldr	r1, [pc, #728]	; 15c5c <close_stdout@@Base+0x1e60>
   15980:	mov	r0, #0
   15984:	add	r1, pc, r1
   15988:	mov	r2, #5
   1598c:	bl	110b0 <dcgettext@plt>
   15990:	ldm	r4, {r3, ip}
   15994:	mov	r1, #1
   15998:	str	ip, [sp]
   1599c:	ldr	ip, [r4, #8]
   159a0:	str	ip, [sp, #4]
   159a4:	ldr	ip, [r4, #12]
   159a8:	str	ip, [sp, #8]
   159ac:	ldr	ip, [r4, #16]
   159b0:	str	ip, [sp, #12]
   159b4:	ldr	ip, [r4, #20]
   159b8:	str	ip, [sp, #16]
   159bc:	ldr	ip, [r4, #24]
   159c0:	str	ip, [sp, #20]
   159c4:	ldr	ip, [r4, #28]
   159c8:	str	ip, [sp, #24]
   159cc:	ldr	ip, [r4, #32]
   159d0:	str	ip, [sp, #28]
   159d4:	mov	r2, r0
   159d8:	mov	r0, r5
   159dc:	bl	1123c <__fprintf_chk@plt>
   159e0:	add	sp, sp, #36	; 0x24
   159e4:	pop	{r4, r5, r6, r7, pc}
   159e8:	bl	112a8 <abort@plt>
   159ec:	ldr	r1, [pc, #620]	; 15c60 <close_stdout@@Base+0x1e64>
   159f0:	mov	r2, #5
   159f4:	mov	r0, #0
   159f8:	add	r1, pc, r1
   159fc:	bl	110b0 <dcgettext@plt>
   15a00:	ldr	r3, [r4]
   15a04:	mov	r1, #1
   15a08:	mov	r2, r0
   15a0c:	mov	r0, r5
   15a10:	add	sp, sp, #36	; 0x24
   15a14:	pop	{r4, r5, r6, r7, lr}
   15a18:	b	1123c <__fprintf_chk@plt>
   15a1c:	ldr	r1, [pc, #576]	; 15c64 <close_stdout@@Base+0x1e68>
   15a20:	mov	r2, #5
   15a24:	mov	r0, #0
   15a28:	add	r1, pc, r1
   15a2c:	bl	110b0 <dcgettext@plt>
   15a30:	ldm	r4, {r3, ip}
   15a34:	mov	r1, #1
   15a38:	str	ip, [sp, #56]	; 0x38
   15a3c:	mov	r2, r0
   15a40:	mov	r0, r5
   15a44:	add	sp, sp, #36	; 0x24
   15a48:	pop	{r4, r5, r6, r7, lr}
   15a4c:	b	1123c <__fprintf_chk@plt>
   15a50:	ldr	r1, [pc, #528]	; 15c68 <close_stdout@@Base+0x1e6c>
   15a54:	mov	r2, #5
   15a58:	mov	r0, #0
   15a5c:	add	r1, pc, r1
   15a60:	bl	110b0 <dcgettext@plt>
   15a64:	ldm	r4, {r3, ip}
   15a68:	mov	r1, #1
   15a6c:	str	ip, [sp, #56]	; 0x38
   15a70:	ldr	ip, [r4, #8]
   15a74:	str	ip, [sp, #60]	; 0x3c
   15a78:	mov	r2, r0
   15a7c:	mov	r0, r5
   15a80:	add	sp, sp, #36	; 0x24
   15a84:	pop	{r4, r5, r6, r7, lr}
   15a88:	b	1123c <__fprintf_chk@plt>
   15a8c:	ldr	r1, [pc, #472]	; 15c6c <close_stdout@@Base+0x1e70>
   15a90:	mov	r2, #5
   15a94:	mov	r0, #0
   15a98:	add	r1, pc, r1
   15a9c:	bl	110b0 <dcgettext@plt>
   15aa0:	ldm	r4, {r3, ip}
   15aa4:	mov	r1, #1
   15aa8:	str	ip, [sp]
   15aac:	ldr	ip, [r4, #8]
   15ab0:	str	ip, [sp, #4]
   15ab4:	ldr	ip, [r4, #12]
   15ab8:	str	ip, [sp, #8]
   15abc:	mov	r2, r0
   15ac0:	mov	r0, r5
   15ac4:	bl	1123c <__fprintf_chk@plt>
   15ac8:	b	159e0 <close_stdout@@Base+0x1be4>
   15acc:	ldr	r1, [pc, #412]	; 15c70 <close_stdout@@Base+0x1e74>
   15ad0:	mov	r2, #5
   15ad4:	mov	r0, #0
   15ad8:	add	r1, pc, r1
   15adc:	bl	110b0 <dcgettext@plt>
   15ae0:	ldm	r4, {r3, ip}
   15ae4:	mov	r1, #1
   15ae8:	str	ip, [sp]
   15aec:	ldr	ip, [r4, #8]
   15af0:	str	ip, [sp, #4]
   15af4:	ldr	ip, [r4, #12]
   15af8:	str	ip, [sp, #8]
   15afc:	ldr	ip, [r4, #16]
   15b00:	str	ip, [sp, #12]
   15b04:	mov	r2, r0
   15b08:	mov	r0, r5
   15b0c:	bl	1123c <__fprintf_chk@plt>
   15b10:	b	159e0 <close_stdout@@Base+0x1be4>
   15b14:	ldr	r1, [pc, #344]	; 15c74 <close_stdout@@Base+0x1e78>
   15b18:	mov	r2, #5
   15b1c:	mov	r0, #0
   15b20:	add	r1, pc, r1
   15b24:	bl	110b0 <dcgettext@plt>
   15b28:	ldm	r4, {r3, ip}
   15b2c:	mov	r1, #1
   15b30:	str	ip, [sp]
   15b34:	ldr	ip, [r4, #8]
   15b38:	str	ip, [sp, #4]
   15b3c:	ldr	ip, [r4, #12]
   15b40:	str	ip, [sp, #8]
   15b44:	ldr	ip, [r4, #16]
   15b48:	str	ip, [sp, #12]
   15b4c:	ldr	ip, [r4, #20]
   15b50:	str	ip, [sp, #16]
   15b54:	mov	r2, r0
   15b58:	mov	r0, r5
   15b5c:	bl	1123c <__fprintf_chk@plt>
   15b60:	b	159e0 <close_stdout@@Base+0x1be4>
   15b64:	ldr	r1, [pc, #268]	; 15c78 <close_stdout@@Base+0x1e7c>
   15b68:	mov	r2, #5
   15b6c:	mov	r0, #0
   15b70:	add	r1, pc, r1
   15b74:	bl	110b0 <dcgettext@plt>
   15b78:	ldm	r4, {r3, ip}
   15b7c:	mov	r1, #1
   15b80:	str	ip, [sp]
   15b84:	ldr	ip, [r4, #8]
   15b88:	str	ip, [sp, #4]
   15b8c:	ldr	ip, [r4, #12]
   15b90:	str	ip, [sp, #8]
   15b94:	ldr	ip, [r4, #16]
   15b98:	str	ip, [sp, #12]
   15b9c:	ldr	ip, [r4, #20]
   15ba0:	str	ip, [sp, #16]
   15ba4:	ldr	ip, [r4, #24]
   15ba8:	str	ip, [sp, #20]
   15bac:	mov	r2, r0
   15bb0:	mov	r0, r5
   15bb4:	bl	1123c <__fprintf_chk@plt>
   15bb8:	b	159e0 <close_stdout@@Base+0x1be4>
   15bbc:	ldr	r1, [pc, #184]	; 15c7c <close_stdout@@Base+0x1e80>
   15bc0:	mov	r2, #5
   15bc4:	mov	r0, #0
   15bc8:	add	r1, pc, r1
   15bcc:	bl	110b0 <dcgettext@plt>
   15bd0:	ldm	r4, {r3, ip}
   15bd4:	mov	r1, #1
   15bd8:	str	ip, [sp]
   15bdc:	ldr	ip, [r4, #8]
   15be0:	str	ip, [sp, #4]
   15be4:	ldr	ip, [r4, #12]
   15be8:	str	ip, [sp, #8]
   15bec:	ldr	ip, [r4, #16]
   15bf0:	str	ip, [sp, #12]
   15bf4:	ldr	ip, [r4, #20]
   15bf8:	str	ip, [sp, #16]
   15bfc:	ldr	ip, [r4, #24]
   15c00:	str	ip, [sp, #20]
   15c04:	ldr	ip, [r4, #28]
   15c08:	str	ip, [sp, #24]
   15c0c:	mov	r2, r0
   15c10:	mov	r0, r5
   15c14:	bl	1123c <__fprintf_chk@plt>
   15c18:	b	159e0 <close_stdout@@Base+0x1be4>
   15c1c:	str	r3, [sp]
   15c20:	mov	r3, r2
   15c24:	ldr	r2, [pc, #84]	; 15c80 <close_stdout@@Base+0x1e84>
   15c28:	mov	r1, #1
   15c2c:	add	r2, pc, r2
   15c30:	bl	1123c <__fprintf_chk@plt>
   15c34:	b	158f8 <close_stdout@@Base+0x1afc>
   15c38:	ldr	r1, [pc, #68]	; 15c84 <close_stdout@@Base+0x1e88>
   15c3c:	mov	r0, #0
   15c40:	add	r1, pc, r1
   15c44:	b	15988 <close_stdout@@Base+0x1b8c>
   15c48:	andeq	r4, r1, ip, lsr #14
   15c4c:	strdeq	r3, [r0], -ip
   15c50:	strdeq	r3, [r0], -ip
   15c54:	andeq	r0, r0, r4, lsr r1
   15c58:	andeq	r3, r0, ip, asr #9
   15c5c:	andeq	r3, r0, r8, asr r6
   15c60:	ldrdeq	r3, [r0], -r8
   15c64:			; <UNDEFINED> instruction: 0x000034b8
   15c68:	muleq	r0, ip, r4
   15c6c:	andeq	r3, r0, ip, ror r4
   15c70:	andeq	r3, r0, ip, asr r4
   15c74:	andeq	r3, r0, r8, lsr r4
   15c78:	andeq	r3, r0, r0, lsl r4
   15c7c:	andeq	r3, r0, r4, ror #7
   15c80:	andeq	r3, r0, ip, asr #3
   15c84:	ldrdeq	r3, [r0], -r0
   15c88:	push	{r4, r5, lr}
   15c8c:	sub	sp, sp, #12
   15c90:	ldr	r5, [sp, #24]
   15c94:	ldr	ip, [r5]
   15c98:	cmp	ip, #0
   15c9c:	beq	15cb8 <close_stdout@@Base+0x1ebc>
   15ca0:	mov	lr, r5
   15ca4:	mov	ip, #0
   15ca8:	ldr	r4, [lr, #4]!
   15cac:	add	ip, ip, #1
   15cb0:	cmp	r4, #0
   15cb4:	bne	15ca8 <close_stdout@@Base+0x1eac>
   15cb8:	stm	sp, {r5, ip}
   15cbc:	bl	158b4 <close_stdout@@Base+0x1ab8>
   15cc0:	add	sp, sp, #12
   15cc4:	pop	{r4, r5, pc}
   15cc8:	push	{r4, r5, r6, r7, lr}
   15ccc:	sub	sp, sp, #60	; 0x3c
   15cd0:	ldr	r4, [pc, #100]	; 15d3c <close_stdout@@Base+0x1f40>
   15cd4:	mov	ip, #0
   15cd8:	ldr	r5, [pc, #96]	; 15d40 <close_stdout@@Base+0x1f44>
   15cdc:	mov	lr, ip
   15ce0:	add	r4, pc, r4
   15ce4:	ldr	r6, [sp, #80]	; 0x50
   15ce8:	ldr	r7, [r4, r5]
   15cec:	add	r5, sp, #12
   15cf0:	ldr	r4, [r7]
   15cf4:	str	r4, [sp, #52]	; 0x34
   15cf8:	ldr	r4, [r6, ip]
   15cfc:	cmp	r4, #0
   15d00:	str	r4, [r5, ip]
   15d04:	beq	15d18 <close_stdout@@Base+0x1f1c>
   15d08:	add	lr, lr, #1
   15d0c:	add	ip, ip, #4
   15d10:	cmp	lr, #10
   15d14:	bne	15cf8 <close_stdout@@Base+0x1efc>
   15d18:	stm	sp, {r5, lr}
   15d1c:	bl	158b4 <close_stdout@@Base+0x1ab8>
   15d20:	ldr	r2, [sp, #52]	; 0x34
   15d24:	ldr	r3, [r7]
   15d28:	cmp	r2, r3
   15d2c:	bne	15d38 <close_stdout@@Base+0x1f3c>
   15d30:	add	sp, sp, #60	; 0x3c
   15d34:	pop	{r4, r5, r6, r7, pc}
   15d38:	bl	110bc <__stack_chk_fail@plt>
   15d3c:	andeq	r4, r1, r8, lsl r3
   15d40:	andeq	r0, r0, r4, lsl #2
   15d44:	push	{r3}		; (str r3, [sp, #-4]!)
   15d48:	push	{r4, lr}
   15d4c:	sub	sp, sp, #20
   15d50:	ldr	lr, [pc, #72]	; 15da0 <close_stdout@@Base+0x1fa4>
   15d54:	add	ip, sp, #32
   15d58:	ldr	r4, [pc, #68]	; 15da4 <close_stdout@@Base+0x1fa8>
   15d5c:	add	lr, pc, lr
   15d60:	ldr	r3, [sp, #28]
   15d64:	ldr	r4, [lr, r4]
   15d68:	str	ip, [sp]
   15d6c:	str	ip, [sp, #8]
   15d70:	ldr	ip, [r4]
   15d74:	str	ip, [sp, #12]
   15d78:	bl	15cc8 <close_stdout@@Base+0x1ecc>
   15d7c:	ldr	r2, [sp, #12]
   15d80:	ldr	r3, [r4]
   15d84:	cmp	r2, r3
   15d88:	bne	15d9c <close_stdout@@Base+0x1fa0>
   15d8c:	add	sp, sp, #20
   15d90:	pop	{r4, lr}
   15d94:	add	sp, sp, #4
   15d98:	bx	lr
   15d9c:	bl	110bc <__stack_chk_fail@plt>
   15da0:	muleq	r1, ip, r2
   15da4:	andeq	r0, r0, r4, lsl #2
   15da8:	ldr	r1, [pc, #132]	; 15e34 <close_stdout@@Base+0x2038>
   15dac:	mov	r2, #5
   15db0:	push	{r4, lr}
   15db4:	add	r1, pc, r1
   15db8:	mov	r0, #0
   15dbc:	ldr	r4, [pc, #116]	; 15e38 <close_stdout@@Base+0x203c>
   15dc0:	bl	110b0 <dcgettext@plt>
   15dc4:	ldr	r2, [pc, #112]	; 15e3c <close_stdout@@Base+0x2040>
   15dc8:	add	r4, pc, r4
   15dcc:	add	r2, pc, r2
   15dd0:	mov	r1, r0
   15dd4:	mov	r0, #1
   15dd8:	bl	11224 <__printf_chk@plt>
   15ddc:	ldr	r1, [pc, #92]	; 15e40 <close_stdout@@Base+0x2044>
   15de0:	mov	r2, #5
   15de4:	mov	r0, #0
   15de8:	add	r1, pc, r1
   15dec:	bl	110b0 <dcgettext@plt>
   15df0:	ldr	r2, [pc, #76]	; 15e44 <close_stdout@@Base+0x2048>
   15df4:	ldr	r3, [pc, #76]	; 15e48 <close_stdout@@Base+0x204c>
   15df8:	add	r2, pc, r2
   15dfc:	add	r3, pc, r3
   15e00:	mov	r1, r0
   15e04:	mov	r0, #1
   15e08:	bl	11224 <__printf_chk@plt>
   15e0c:	ldr	r1, [pc, #56]	; 15e4c <close_stdout@@Base+0x2050>
   15e10:	mov	r0, #0
   15e14:	mov	r2, #5
   15e18:	add	r1, pc, r1
   15e1c:	bl	110b0 <dcgettext@plt>
   15e20:	ldr	r3, [pc, #40]	; 15e50 <close_stdout@@Base+0x2054>
   15e24:	ldr	r3, [r4, r3]
   15e28:	pop	{r4, lr}
   15e2c:	ldr	r1, [r3]
   15e30:	b	11008 <fputs_unlocked@plt>
   15e34:	muleq	r0, r8, r2
   15e38:	andeq	r4, r1, r0, lsr r2
   15e3c:	muleq	r0, r8, r2
   15e40:	muleq	r0, r4, r2
   15e44:	andeq	r2, r0, r4, asr r9
   15e48:	andeq	r2, r0, r0, ror #18
   15e4c:	andeq	r3, r0, r8, ror r2
   15e50:	andeq	r0, r0, r4, lsr #2
   15e54:	push	{r4, lr}
   15e58:	mov	r4, r0
   15e5c:	bl	11158 <malloc@plt>
   15e60:	rsbs	r3, r0, #1
   15e64:	movcc	r3, #0
   15e68:	cmp	r4, #0
   15e6c:	moveq	r3, #0
   15e70:	cmp	r3, #0
   15e74:	popeq	{r4, pc}
   15e78:	bl	16068 <close_stdout@@Base+0x226c>
   15e7c:	push	{r3, r4, r5, lr}
   15e80:	mov	r4, r0
   15e84:	mvn	r0, #0
   15e88:	mov	r5, r1
   15e8c:	bl	16e60 <close_stdout@@Base+0x3064>
   15e90:	cmp	r0, r4
   15e94:	bcc	15ea4 <close_stdout@@Base+0x20a8>
   15e98:	mul	r0, r4, r5
   15e9c:	pop	{r3, r4, r5, lr}
   15ea0:	b	15e54 <close_stdout@@Base+0x2058>
   15ea4:	bl	16068 <close_stdout@@Base+0x226c>
   15ea8:	b	15e54 <close_stdout@@Base+0x2058>
   15eac:	rsbs	r3, r1, #1
   15eb0:	push	{r4, lr}
   15eb4:	movcc	r3, #0
   15eb8:	cmp	r0, #0
   15ebc:	mov	r4, r1
   15ec0:	moveq	r3, #0
   15ec4:	cmp	r3, #0
   15ec8:	bne	15eec <close_stdout@@Base+0x20f0>
   15ecc:	bl	110c8 <realloc@plt>
   15ed0:	rsbs	r3, r0, #1
   15ed4:	movcc	r3, #0
   15ed8:	cmp	r4, #0
   15edc:	moveq	r3, #0
   15ee0:	cmp	r3, #0
   15ee4:	popeq	{r4, pc}
   15ee8:	bl	16068 <close_stdout@@Base+0x226c>
   15eec:	bl	11050 <free@plt>
   15ef0:	mov	r0, #0
   15ef4:	pop	{r4, pc}
   15ef8:	push	{r4, r5, r6, lr}
   15efc:	mov	r5, r1
   15f00:	mov	r6, r0
   15f04:	mov	r1, r2
   15f08:	mvn	r0, #0
   15f0c:	mov	r4, r2
   15f10:	bl	16e60 <close_stdout@@Base+0x3064>
   15f14:	cmp	r0, r5
   15f18:	bcc	15f2c <close_stdout@@Base+0x2130>
   15f1c:	mov	r0, r6
   15f20:	mul	r1, r5, r4
   15f24:	pop	{r4, r5, r6, lr}
   15f28:	b	15eac <close_stdout@@Base+0x20b0>
   15f2c:	bl	16068 <close_stdout@@Base+0x226c>
   15f30:	push	{r3, r4, r5, r6, r7, lr}
   15f34:	subs	r7, r0, #0
   15f38:	mov	r5, r1
   15f3c:	mov	r6, r2
   15f40:	ldr	r4, [r1]
   15f44:	beq	15f7c <close_stdout@@Base+0x2180>
   15f48:	movw	r0, #43690	; 0xaaaa
   15f4c:	mov	r1, r2
   15f50:	bfi	r0, r0, #16, #16
   15f54:	bl	16e60 <close_stdout@@Base+0x3064>
   15f58:	cmp	r4, r0
   15f5c:	addcc	r3, r4, #1
   15f60:	addcc	r4, r4, r3, lsr #1
   15f64:	bcs	15fa0 <close_stdout@@Base+0x21a4>
   15f68:	str	r4, [r5]
   15f6c:	mov	r0, r7
   15f70:	mul	r1, r6, r4
   15f74:	pop	{r3, r4, r5, r6, r7, lr}
   15f78:	b	15eac <close_stdout@@Base+0x20b0>
   15f7c:	cmp	r4, #0
   15f80:	bne	15f68 <close_stdout@@Base+0x216c>
   15f84:	mov	r0, #64	; 0x40
   15f88:	mov	r1, r2
   15f8c:	bl	16e60 <close_stdout@@Base+0x3064>
   15f90:	cmp	r0, #0
   15f94:	movne	r4, r0
   15f98:	addeq	r4, r0, #1
   15f9c:	b	15f68 <close_stdout@@Base+0x216c>
   15fa0:	bl	16068 <close_stdout@@Base+0x226c>
   15fa4:	cmp	r0, #0
   15fa8:	push	{r3, lr}
   15fac:	ldr	r3, [r1]
   15fb0:	beq	15fdc <close_stdout@@Base+0x21e0>
   15fb4:	movw	r2, #43689	; 0xaaa9
   15fb8:	movt	r2, #43690	; 0xaaaa
   15fbc:	cmp	r3, r2
   15fc0:	addls	r2, r3, #1
   15fc4:	addls	r3, r3, r2, lsr #1
   15fc8:	bhi	15ff4 <close_stdout@@Base+0x21f8>
   15fcc:	str	r3, [r1]
   15fd0:	mov	r1, r3
   15fd4:	pop	{r3, lr}
   15fd8:	b	15eac <close_stdout@@Base+0x20b0>
   15fdc:	cmp	r3, #0
   15fe0:	moveq	r3, #64	; 0x40
   15fe4:	str	r3, [r1]
   15fe8:	mov	r1, r3
   15fec:	pop	{r3, lr}
   15ff0:	b	15eac <close_stdout@@Base+0x20b0>
   15ff4:	bl	16068 <close_stdout@@Base+0x226c>
   15ff8:	push	{r4, lr}
   15ffc:	mov	r4, r0
   16000:	bl	15e54 <close_stdout@@Base+0x2058>
   16004:	mov	r2, r4
   16008:	mov	r1, #0
   1600c:	pop	{r4, lr}
   16010:	b	1120c <memset@plt>
   16014:	push	{r3, lr}
   16018:	bl	10ffc <calloc@plt>
   1601c:	cmp	r0, #0
   16020:	popne	{r3, pc}
   16024:	bl	16068 <close_stdout@@Base+0x226c>
   16028:	push	{r3, r4, r5, lr}
   1602c:	mov	r4, r1
   16030:	mov	r5, r0
   16034:	mov	r0, r1
   16038:	bl	15e54 <close_stdout@@Base+0x2058>
   1603c:	mov	r1, r5
   16040:	mov	r2, r4
   16044:	pop	{r3, r4, r5, lr}
   16048:	b	11068 <memcpy@plt>
   1604c:	push	{r4, lr}
   16050:	mov	r4, r0
   16054:	bl	111c4 <strlen@plt>
   16058:	add	r1, r0, #1
   1605c:	mov	r0, r4
   16060:	pop	{r4, lr}
   16064:	b	16028 <close_stdout@@Base+0x222c>
   16068:	ldr	r3, [pc, #64]	; 160b0 <close_stdout@@Base+0x22b4>
   1606c:	mov	r2, #5
   16070:	ldr	ip, [pc, #60]	; 160b4 <close_stdout@@Base+0x22b8>
   16074:	mov	r0, #0
   16078:	add	r3, pc, r3
   1607c:	ldr	r1, [pc, #52]	; 160b8 <close_stdout@@Base+0x22bc>
   16080:	push	{r4, lr}
   16084:	add	r1, pc, r1
   16088:	ldr	r3, [r3, ip]
   1608c:	ldr	r4, [r3]
   16090:	bl	110b0 <dcgettext@plt>
   16094:	ldr	r2, [pc, #32]	; 160bc <close_stdout@@Base+0x22c0>
   16098:	mov	r1, #0
   1609c:	add	r2, pc, r2
   160a0:	mov	r3, r0
   160a4:	mov	r0, r4
   160a8:	bl	11134 <error@plt>
   160ac:	bl	112a8 <abort@plt>
   160b0:	andeq	r3, r1, r0, lsl #31
   160b4:	andeq	r0, r0, r8, lsr #2
   160b8:	andeq	r3, r0, ip, ror r0
   160bc:	andeq	r2, r0, ip, lsl #25
   160c0:	ldr	ip, [pc, #1852]	; 16804 <close_stdout@@Base+0x2a08>
   160c4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   160c8:	mov	fp, r2
   160cc:	ldr	r2, [pc, #1844]	; 16808 <close_stdout@@Base+0x2a0c>
   160d0:	add	ip, pc, ip
   160d4:	mov	r9, r3
   160d8:	sub	sp, sp, #36	; 0x24
   160dc:	mov	r3, ip
   160e0:	cmp	fp, #36	; 0x24
   160e4:	ldr	sl, [ip, r2]
   160e8:	mov	r5, r0
   160ec:	mov	r8, r1
   160f0:	ldr	r6, [sp, #72]	; 0x48
   160f4:	ldr	r3, [sl]
   160f8:	str	r3, [sp, #28]
   160fc:	bhi	167e4 <close_stdout@@Base+0x29e8>
   16100:	cmp	r1, #0
   16104:	addeq	r8, sp, #24
   16108:	bl	111ac <__ctype_b_loc@plt>
   1610c:	ldrb	r3, [r5]
   16110:	mov	r1, r5
   16114:	ldr	r0, [r0]
   16118:	b	16120 <close_stdout@@Base+0x2324>
   1611c:	ldrb	r3, [r1, #1]!
   16120:	lsl	r2, r3, #1
   16124:	ldrh	r4, [r0, r2]
   16128:	and	r4, r4, #8192	; 0x2000
   1612c:	uxth	r4, r4
   16130:	cmp	r4, #0
   16134:	bne	1611c <close_stdout@@Base+0x2320>
   16138:	cmp	r3, #45	; 0x2d
   1613c:	bne	1615c <close_stdout@@Base+0x2360>
   16140:	mov	r0, #4
   16144:	ldr	r2, [sp, #28]
   16148:	ldr	r3, [sl]
   1614c:	cmp	r2, r3
   16150:	bne	167e0 <close_stdout@@Base+0x29e4>
   16154:	add	sp, sp, #36	; 0x24
   16158:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1615c:	bl	111e8 <__errno_location@plt>
   16160:	mov	r2, fp
   16164:	mov	r1, r8
   16168:	mov	r3, r4
   1616c:	str	r4, [r0]
   16170:	mov	r7, r0
   16174:	mov	r0, r5
   16178:	bl	11074 <__strtoull_internal@plt>
   1617c:	ldr	fp, [r8]
   16180:	cmp	fp, r5
   16184:	strd	r0, [sp]
   16188:	beq	16304 <close_stdout@@Base+0x2508>
   1618c:	ldr	ip, [r7]
   16190:	cmp	ip, #0
   16194:	bne	161c0 <close_stdout@@Base+0x23c4>
   16198:	mov	r7, ip
   1619c:	cmp	r6, #0
   161a0:	beq	16770 <close_stdout@@Base+0x2974>
   161a4:	ldrb	r5, [fp]
   161a8:	cmp	r5, #0
   161ac:	bne	161d0 <close_stdout@@Base+0x23d4>
   161b0:	ldrd	r2, [sp]
   161b4:	mov	r0, r7
   161b8:	strd	r2, [r9]
   161bc:	b	16144 <close_stdout@@Base+0x2348>
   161c0:	cmp	ip, #34	; 0x22
   161c4:	moveq	r7, #1
   161c8:	bne	16140 <close_stdout@@Base+0x2344>
   161cc:	b	1619c <close_stdout@@Base+0x23a0>
   161d0:	mov	r0, r6
   161d4:	mov	r1, r5
   161d8:	bl	111d0 <strchr@plt>
   161dc:	cmp	r0, #0
   161e0:	beq	16340 <close_stdout@@Base+0x2544>
   161e4:	mov	r0, r6
   161e8:	mov	r1, #48	; 0x30
   161ec:	bl	111d0 <strchr@plt>
   161f0:	cmp	r0, #0
   161f4:	beq	16214 <close_stdout@@Base+0x2418>
   161f8:	ldrb	r3, [fp, #1]
   161fc:	cmp	r3, #68	; 0x44
   16200:	beq	16798 <close_stdout@@Base+0x299c>
   16204:	cmp	r3, #105	; 0x69
   16208:	beq	16780 <close_stdout@@Base+0x2984>
   1620c:	cmp	r3, #66	; 0x42
   16210:	beq	16798 <close_stdout@@Base+0x299c>
   16214:	mov	r6, #1
   16218:	mov	r4, #1024	; 0x400
   1621c:	sub	r5, r5, #66	; 0x42
   16220:	cmp	r5, #53	; 0x35
   16224:	addls	pc, pc, r5, lsl #2
   16228:	b	16340 <close_stdout@@Base+0x2544>
   1622c:	b	165e8 <close_stdout@@Base+0x27ec>
   16230:	b	16340 <close_stdout@@Base+0x2544>
   16234:	b	16340 <close_stdout@@Base+0x2544>
   16238:	b	1657c <close_stdout@@Base+0x2780>
   1623c:	b	16340 <close_stdout@@Base+0x2544>
   16240:	b	16510 <close_stdout@@Base+0x2714>
   16244:	b	16340 <close_stdout@@Base+0x2544>
   16248:	b	16340 <close_stdout@@Base+0x2544>
   1624c:	b	16340 <close_stdout@@Base+0x2544>
   16250:	b	164b8 <close_stdout@@Base+0x26bc>
   16254:	b	16340 <close_stdout@@Base+0x2544>
   16258:	b	16690 <close_stdout@@Base+0x2894>
   1625c:	b	16340 <close_stdout@@Base+0x2544>
   16260:	b	16340 <close_stdout@@Base+0x2544>
   16264:	b	16624 <close_stdout@@Base+0x2828>
   16268:	b	16340 <close_stdout@@Base+0x2544>
   1626c:	b	16340 <close_stdout@@Base+0x2544>
   16270:	b	16340 <close_stdout@@Base+0x2544>
   16274:	b	16704 <close_stdout@@Base+0x2908>
   16278:	b	16340 <close_stdout@@Base+0x2544>
   1627c:	b	16340 <close_stdout@@Base+0x2544>
   16280:	b	16340 <close_stdout@@Base+0x2544>
   16284:	b	16340 <close_stdout@@Base+0x2544>
   16288:	b	1644c <close_stdout@@Base+0x2650>
   1628c:	b	163d4 <close_stdout@@Base+0x25d8>
   16290:	b	16340 <close_stdout@@Base+0x2544>
   16294:	b	16340 <close_stdout@@Base+0x2544>
   16298:	b	16340 <close_stdout@@Base+0x2544>
   1629c:	b	16340 <close_stdout@@Base+0x2544>
   162a0:	b	16340 <close_stdout@@Base+0x2544>
   162a4:	b	16340 <close_stdout@@Base+0x2544>
   162a8:	b	16340 <close_stdout@@Base+0x2544>
   162ac:	b	16398 <close_stdout@@Base+0x259c>
   162b0:	b	16350 <close_stdout@@Base+0x2554>
   162b4:	b	16340 <close_stdout@@Base+0x2544>
   162b8:	b	16340 <close_stdout@@Base+0x2544>
   162bc:	b	16340 <close_stdout@@Base+0x2544>
   162c0:	b	16510 <close_stdout@@Base+0x2714>
   162c4:	b	16340 <close_stdout@@Base+0x2544>
   162c8:	b	16340 <close_stdout@@Base+0x2544>
   162cc:	b	16340 <close_stdout@@Base+0x2544>
   162d0:	b	164b8 <close_stdout@@Base+0x26bc>
   162d4:	b	16340 <close_stdout@@Base+0x2544>
   162d8:	b	16690 <close_stdout@@Base+0x2894>
   162dc:	b	16340 <close_stdout@@Base+0x2544>
   162e0:	b	16340 <close_stdout@@Base+0x2544>
   162e4:	b	16340 <close_stdout@@Base+0x2544>
   162e8:	b	16340 <close_stdout@@Base+0x2544>
   162ec:	b	16340 <close_stdout@@Base+0x2544>
   162f0:	b	16340 <close_stdout@@Base+0x2544>
   162f4:	b	16704 <close_stdout@@Base+0x2908>
   162f8:	b	16340 <close_stdout@@Base+0x2544>
   162fc:	b	16340 <close_stdout@@Base+0x2544>
   16300:	b	16370 <close_stdout@@Base+0x2574>
   16304:	cmp	r6, #0
   16308:	beq	16140 <close_stdout@@Base+0x2344>
   1630c:	ldrb	r5, [r5]
   16310:	cmp	r5, #0
   16314:	beq	16140 <close_stdout@@Base+0x2344>
   16318:	mov	r0, r6
   1631c:	mov	r1, r5
   16320:	bl	111d0 <strchr@plt>
   16324:	cmp	r0, #0
   16328:	beq	16140 <close_stdout@@Base+0x2344>
   1632c:	mov	r0, #1
   16330:	mov	r1, #0
   16334:	mov	r7, r4
   16338:	strd	r0, [sp]
   1633c:	b	161e4 <close_stdout@@Base+0x23e8>
   16340:	ldrd	r2, [sp]
   16344:	orr	r0, r7, #2
   16348:	strd	r2, [r9]
   1634c:	b	16144 <close_stdout@@Base+0x2348>
   16350:	mov	r3, #0
   16354:	add	r2, fp, r6
   16358:	str	r2, [r8]
   1635c:	ldrb	r2, [fp, r6]
   16360:	orr	r7, r7, r3
   16364:	cmp	r2, #0
   16368:	orrne	r7, r7, #2
   1636c:	b	161b0 <close_stdout@@Base+0x23b4>
   16370:	ldrd	r2, [sp]
   16374:	cmp	r2, #0
   16378:	sbcs	r3, r3, #0
   1637c:	blt	167b8 <close_stdout@@Base+0x29bc>
   16380:	ldrd	r0, [sp]
   16384:	mov	r3, #0
   16388:	adds	r0, r0, r0
   1638c:	adc	r1, r1, r1
   16390:	strd	r0, [sp]
   16394:	b	16354 <close_stdout@@Base+0x2558>
   16398:	ldrd	r0, [sp]
   1639c:	movw	r3, #65535	; 0xffff
   163a0:	movt	r3, #127	; 0x7f
   163a4:	mvn	r2, #0
   163a8:	cmp	r1, r3
   163ac:	cmpeq	r0, r2
   163b0:	bhi	167b8 <close_stdout@@Base+0x29bc>
   163b4:	lsl	r2, r1, #9
   163b8:	ldr	r1, [sp]
   163bc:	lsl	r3, r0, #9
   163c0:	str	r3, [sp]
   163c4:	mov	r3, #0
   163c8:	orr	r2, r2, r1, lsr #23
   163cc:	str	r2, [sp, #4]
   163d0:	b	16354 <close_stdout@@Base+0x2558>
   163d4:	asr	r5, r4, #31
   163d8:	mov	r2, r4
   163dc:	mvn	r0, #0
   163e0:	mvn	r1, #0
   163e4:	mov	r3, r5
   163e8:	bl	1706c <close_stdout@@Base+0x3270>
   163ec:	mov	ip, r7
   163f0:	str	r6, [sp, #20]
   163f4:	mov	r2, #7
   163f8:	ldrd	r6, [sp]
   163fc:	mov	r3, #0
   16400:	strd	r0, [sp, #8]
   16404:	ldrd	r0, [sp, #8]
   16408:	cmp	r1, r7
   1640c:	cmpeq	r0, r6
   16410:	mulcs	r0, r6, r5
   16414:	movcs	r1, #0
   16418:	mlacs	r0, r4, r7, r0
   1641c:	movcc	r1, #1
   16420:	umullcs	r6, r7, r6, r4
   16424:	mvncc	r6, #0
   16428:	mvncc	r7, #0
   1642c:	orr	r3, r3, r1
   16430:	addcs	r7, r0, r7
   16434:	subs	r2, r2, #1
   16438:	bne	16404 <close_stdout@@Base+0x2608>
   1643c:	strd	r6, [sp]
   16440:	mov	r7, ip
   16444:	ldr	r6, [sp, #20]
   16448:	b	16354 <close_stdout@@Base+0x2558>
   1644c:	asr	r5, r4, #31
   16450:	mov	r2, r4
   16454:	mvn	r0, #0
   16458:	mvn	r1, #0
   1645c:	mov	r3, r5
   16460:	bl	1706c <close_stdout@@Base+0x3270>
   16464:	mov	ip, r7
   16468:	str	r6, [sp, #20]
   1646c:	mov	r2, #8
   16470:	ldrd	r6, [sp]
   16474:	mov	r3, #0
   16478:	strd	r0, [sp, #8]
   1647c:	ldrd	r0, [sp, #8]
   16480:	cmp	r1, r7
   16484:	cmpeq	r0, r6
   16488:	mulcs	r0, r6, r5
   1648c:	movcs	r1, #0
   16490:	mlacs	r0, r4, r7, r0
   16494:	movcc	r1, #1
   16498:	umullcs	r6, r7, r6, r4
   1649c:	mvncc	r6, #0
   164a0:	mvncc	r7, #0
   164a4:	orr	r3, r3, r1
   164a8:	addcs	r7, r0, r7
   164ac:	subs	r2, r2, #1
   164b0:	bne	1647c <close_stdout@@Base+0x2680>
   164b4:	b	1643c <close_stdout@@Base+0x2640>
   164b8:	mov	r2, r4
   164bc:	asr	r3, r4, #31
   164c0:	mvn	r0, #0
   164c4:	mvn	r1, #0
   164c8:	strd	r2, [sp, #8]
   164cc:	bl	1706c <close_stdout@@Base+0x3270>
   164d0:	ldrd	r2, [sp]
   164d4:	cmp	r3, r1
   164d8:	cmpeq	r2, r0
   164dc:	bhi	167a4 <close_stdout@@Base+0x29a8>
   164e0:	ldr	r3, [sp]
   164e4:	ldr	ip, [sp, #12]
   164e8:	ldr	r0, [sp, #4]
   164ec:	ldr	r1, [sp]
   164f0:	mul	r2, r3, ip
   164f4:	mov	r3, #0
   164f8:	mla	r2, r4, r0, r2
   164fc:	umull	r0, r1, r1, r4
   16500:	add	r2, r2, r1
   16504:	strd	r0, [sp]
   16508:	str	r2, [sp, #4]
   1650c:	b	16354 <close_stdout@@Base+0x2558>
   16510:	asr	r5, r4, #31
   16514:	mov	r2, r4
   16518:	mvn	r0, #0
   1651c:	mvn	r1, #0
   16520:	mov	r3, r5
   16524:	bl	1706c <close_stdout@@Base+0x3270>
   16528:	mov	ip, r7
   1652c:	str	r6, [sp, #20]
   16530:	mov	r2, #3
   16534:	ldrd	r6, [sp]
   16538:	mov	r3, #0
   1653c:	strd	r0, [sp, #8]
   16540:	ldrd	r0, [sp, #8]
   16544:	cmp	r1, r7
   16548:	cmpeq	r0, r6
   1654c:	mulcs	r0, r6, r5
   16550:	movcs	r1, #0
   16554:	mlacs	r0, r4, r7, r0
   16558:	movcc	r1, #1
   1655c:	umullcs	r6, r7, r6, r4
   16560:	mvncc	r6, #0
   16564:	mvncc	r7, #0
   16568:	orr	r3, r3, r1
   1656c:	addcs	r7, r0, r7
   16570:	subs	r2, r2, #1
   16574:	bne	16540 <close_stdout@@Base+0x2744>
   16578:	b	1643c <close_stdout@@Base+0x2640>
   1657c:	asr	r5, r4, #31
   16580:	mov	r2, r4
   16584:	mvn	r0, #0
   16588:	mvn	r1, #0
   1658c:	mov	r3, r5
   16590:	bl	1706c <close_stdout@@Base+0x3270>
   16594:	mov	ip, r7
   16598:	str	r6, [sp, #20]
   1659c:	mov	r2, #6
   165a0:	ldrd	r6, [sp]
   165a4:	mov	r3, #0
   165a8:	strd	r0, [sp, #8]
   165ac:	ldrd	r0, [sp, #8]
   165b0:	cmp	r1, r7
   165b4:	cmpeq	r0, r6
   165b8:	mulcs	r0, r6, r5
   165bc:	movcs	r1, #0
   165c0:	mlacs	r0, r4, r7, r0
   165c4:	movcc	r1, #1
   165c8:	umullcs	r6, r7, r6, r4
   165cc:	mvncc	r6, #0
   165d0:	mvncc	r7, #0
   165d4:	orr	r3, r3, r1
   165d8:	addcs	r7, r0, r7
   165dc:	subs	r2, r2, #1
   165e0:	bne	165ac <close_stdout@@Base+0x27b0>
   165e4:	b	1643c <close_stdout@@Base+0x2640>
   165e8:	ldrd	r0, [sp]
   165ec:	movw	r3, #65535	; 0xffff
   165f0:	movt	r3, #63	; 0x3f
   165f4:	mvn	r2, #0
   165f8:	cmp	r1, r3
   165fc:	cmpeq	r0, r2
   16600:	bhi	167a4 <close_stdout@@Base+0x29a8>
   16604:	lsl	r2, r1, #10
   16608:	ldr	r1, [sp]
   1660c:	lsl	r3, r0, #10
   16610:	str	r3, [sp]
   16614:	mov	r3, #0
   16618:	orr	r2, r2, r1, lsr #22
   1661c:	str	r2, [sp, #4]
   16620:	b	16354 <close_stdout@@Base+0x2558>
   16624:	asr	r5, r4, #31
   16628:	mov	r2, r4
   1662c:	mvn	r0, #0
   16630:	mvn	r1, #0
   16634:	mov	r3, r5
   16638:	bl	1706c <close_stdout@@Base+0x3270>
   1663c:	mov	ip, r7
   16640:	str	r6, [sp, #20]
   16644:	mov	r2, #5
   16648:	ldrd	r6, [sp]
   1664c:	mov	r3, #0
   16650:	strd	r0, [sp, #8]
   16654:	ldrd	r0, [sp, #8]
   16658:	cmp	r1, r7
   1665c:	cmpeq	r0, r6
   16660:	mulcs	r0, r6, r5
   16664:	movcs	r1, #0
   16668:	mlacs	r0, r4, r7, r0
   1666c:	movcc	r1, #1
   16670:	umullcs	r6, r7, r6, r4
   16674:	mvncc	r6, #0
   16678:	mvncc	r7, #0
   1667c:	orr	r3, r3, r1
   16680:	addcs	r7, r0, r7
   16684:	subs	r2, r2, #1
   16688:	bne	16654 <close_stdout@@Base+0x2858>
   1668c:	b	1643c <close_stdout@@Base+0x2640>
   16690:	mov	r2, r4
   16694:	asr	r3, r4, #31
   16698:	mvn	r0, #0
   1669c:	mvn	r1, #0
   166a0:	strd	r2, [sp, #8]
   166a4:	bl	1706c <close_stdout@@Base+0x3270>
   166a8:	ldrd	r2, [sp]
   166ac:	cmp	r3, r1
   166b0:	cmpeq	r2, r0
   166b4:	bhi	167cc <close_stdout@@Base+0x29d0>
   166b8:	ldr	ip, [sp, #4]
   166bc:	mul	r3, r4, ip
   166c0:	ldr	ip, [sp, #12]
   166c4:	mla	r3, r2, ip, r3
   166c8:	ldr	r2, [sp]
   166cc:	umull	r4, r5, r4, r2
   166d0:	add	r5, r3, r5
   166d4:	cmp	r1, r5
   166d8:	cmpeq	r0, r4
   166dc:	bcc	167cc <close_stdout@@Base+0x29d0>
   166e0:	mul	r2, r4, ip
   166e4:	ldr	ip, [sp, #8]
   166e8:	mov	r3, #0
   166ec:	umull	r0, r1, r4, ip
   166f0:	mla	r2, ip, r5, r2
   166f4:	strd	r0, [sp]
   166f8:	add	r2, r2, r1
   166fc:	str	r2, [sp, #4]
   16700:	b	16354 <close_stdout@@Base+0x2558>
   16704:	asr	r5, r4, #31
   16708:	mov	r2, r4
   1670c:	mvn	r0, #0
   16710:	mvn	r1, #0
   16714:	mov	r3, r5
   16718:	bl	1706c <close_stdout@@Base+0x3270>
   1671c:	mov	ip, r7
   16720:	str	r6, [sp, #20]
   16724:	mov	r2, #4
   16728:	ldrd	r6, [sp]
   1672c:	mov	r3, #0
   16730:	strd	r0, [sp, #8]
   16734:	ldrd	r0, [sp, #8]
   16738:	cmp	r1, r7
   1673c:	cmpeq	r0, r6
   16740:	mulcs	r0, r6, r5
   16744:	movcs	r1, #0
   16748:	mlacs	r0, r4, r7, r0
   1674c:	movcc	r1, #1
   16750:	umullcs	r6, r7, r6, r4
   16754:	mvncc	r6, #0
   16758:	mvncc	r7, #0
   1675c:	orr	r3, r3, r1
   16760:	addcs	r7, r0, r7
   16764:	subs	r2, r2, #1
   16768:	bne	16734 <close_stdout@@Base+0x2938>
   1676c:	b	1643c <close_stdout@@Base+0x2640>
   16770:	ldrd	r0, [sp]
   16774:	strd	r0, [r9]
   16778:	mov	r0, r7
   1677c:	b	16144 <close_stdout@@Base+0x2348>
   16780:	ldrb	r3, [fp, #2]
   16784:	mov	r4, #1024	; 0x400
   16788:	cmp	r3, #66	; 0x42
   1678c:	moveq	r6, #3
   16790:	movne	r6, #1
   16794:	b	1621c <close_stdout@@Base+0x2420>
   16798:	mov	r6, #2
   1679c:	mov	r4, #1000	; 0x3e8
   167a0:	b	1621c <close_stdout@@Base+0x2420>
   167a4:	mvn	r3, #0
   167a8:	mvn	r2, #0
   167ac:	strd	r2, [sp]
   167b0:	mov	r3, #1
   167b4:	b	16354 <close_stdout@@Base+0x2558>
   167b8:	mvn	r0, #0
   167bc:	mvn	r1, #0
   167c0:	mov	r3, #1
   167c4:	strd	r0, [sp]
   167c8:	b	16354 <close_stdout@@Base+0x2558>
   167cc:	mvn	r0, #0
   167d0:	mvn	r1, #0
   167d4:	mov	r3, #1
   167d8:	strd	r0, [sp]
   167dc:	b	16354 <close_stdout@@Base+0x2558>
   167e0:	bl	110bc <__stack_chk_fail@plt>
   167e4:	ldr	r0, [pc, #32]	; 1680c <close_stdout@@Base+0x2a10>
   167e8:	mov	r2, #96	; 0x60
   167ec:	ldr	r1, [pc, #28]	; 16810 <close_stdout@@Base+0x2a14>
   167f0:	ldr	r3, [pc, #28]	; 16814 <close_stdout@@Base+0x2a18>
   167f4:	add	r0, pc, r0
   167f8:	add	r1, pc, r1
   167fc:	add	r3, pc, r3
   16800:	bl	112c0 <__assert_fail@plt>
   16804:	andeq	r3, r1, r8, lsr #30
   16808:	andeq	r0, r0, r4, lsl #2
   1680c:	andeq	r2, r0, ip, lsr #18
   16810:	andeq	r2, r0, r0, asr r9
   16814:	andeq	r2, r0, r8, lsl r9
   16818:	push	{r4, r5, r6, lr}
   1681c:	mov	r4, r0
   16820:	bl	1111c <__fpending@plt>
   16824:	mov	r6, r0
   16828:	mov	r0, r4
   1682c:	ldr	r4, [r4]
   16830:	bl	16cb8 <close_stdout@@Base+0x2ebc>
   16834:	and	r4, r4, #32
   16838:	adds	r5, r0, #0
   1683c:	movne	r5, #1
   16840:	cmp	r4, #0
   16844:	bne	16864 <close_stdout@@Base+0x2a68>
   16848:	cmp	r5, #0
   1684c:	beq	1685c <close_stdout@@Base+0x2a60>
   16850:	cmp	r6, #0
   16854:	beq	16880 <close_stdout@@Base+0x2a84>
   16858:	mvn	r4, #0
   1685c:	mov	r0, r4
   16860:	pop	{r4, r5, r6, pc}
   16864:	cmp	r5, #0
   16868:	bne	16858 <close_stdout@@Base+0x2a5c>
   1686c:	bl	111e8 <__errno_location@plt>
   16870:	mvn	r4, #0
   16874:	str	r5, [r0]
   16878:	mov	r0, r4
   1687c:	pop	{r4, r5, r6, pc}
   16880:	bl	111e8 <__errno_location@plt>
   16884:	ldr	r4, [r0]
   16888:	subs	r4, r4, #9
   1688c:	mvnne	r4, #0
   16890:	mov	r0, r4
   16894:	pop	{r4, r5, r6, pc}
   16898:	ldr	r3, [pc, #984]	; 16c78 <close_stdout@@Base+0x2e7c>
   1689c:	mov	r0, #14
   168a0:	ldr	r2, [pc, #980]	; 16c7c <close_stdout@@Base+0x2e80>
   168a4:	add	r3, pc, r3
   168a8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   168ac:	sub	sp, sp, #132	; 0x84
   168b0:	ldr	r6, [r3, r2]
   168b4:	ldr	r3, [r6]
   168b8:	str	r3, [sp, #124]	; 0x7c
   168bc:	bl	11284 <nl_langinfo@plt>
   168c0:	subs	r5, r0, #0
   168c4:	beq	16978 <close_stdout@@Base+0x2b7c>
   168c8:	ldr	r3, [pc, #944]	; 16c80 <close_stdout@@Base+0x2e84>
   168cc:	ldr	r4, [pc, r3]
   168d0:	cmp	r4, #0
   168d4:	beq	16984 <close_stdout@@Base+0x2b88>
   168d8:	ldrb	r7, [r4]
   168dc:	cmp	r7, #0
   168e0:	bne	16914 <close_stdout@@Base+0x2b18>
   168e4:	b	1694c <close_stdout@@Base+0x2b50>
   168e8:	mov	r0, r4
   168ec:	bl	111c4 <strlen@plt>
   168f0:	add	r0, r0, #1
   168f4:	add	r7, r4, r0
   168f8:	mov	r0, r7
   168fc:	bl	111c4 <strlen@plt>
   16900:	add	r0, r0, #1
   16904:	add	r4, r7, r0
   16908:	ldrb	r7, [r7, r0]
   1690c:	cmp	r7, #0
   16910:	beq	1694c <close_stdout@@Base+0x2b50>
   16914:	mov	r0, r5
   16918:	mov	r1, r4
   1691c:	bl	11020 <strcmp@plt>
   16920:	cmp	r0, #0
   16924:	beq	1693c <close_stdout@@Base+0x2b40>
   16928:	cmp	r7, #42	; 0x2a
   1692c:	bne	168e8 <close_stdout@@Base+0x2aec>
   16930:	ldrb	r3, [r4, #1]
   16934:	cmp	r3, #0
   16938:	bne	168e8 <close_stdout@@Base+0x2aec>
   1693c:	mov	r0, r4
   16940:	bl	111c4 <strlen@plt>
   16944:	add	r0, r0, #1
   16948:	add	r5, r4, r0
   1694c:	ldrb	r3, [r5]
   16950:	cmp	r3, #0
   16954:	ldreq	r5, [pc, #808]	; 16c84 <close_stdout@@Base+0x2e88>
   16958:	addeq	r5, pc, r5
   1695c:	ldr	r2, [sp, #124]	; 0x7c
   16960:	mov	r0, r5
   16964:	ldr	r3, [r6]
   16968:	cmp	r2, r3
   1696c:	bne	16c4c <close_stdout@@Base+0x2e50>
   16970:	add	sp, sp, #132	; 0x84
   16974:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16978:	ldr	r5, [pc, #776]	; 16c88 <close_stdout@@Base+0x2e8c>
   1697c:	add	r5, pc, r5
   16980:	b	168c8 <close_stdout@@Base+0x2acc>
   16984:	ldr	r0, [pc, #768]	; 16c8c <close_stdout@@Base+0x2e90>
   16988:	add	r0, pc, r0
   1698c:	bl	1114c <getenv@plt>
   16990:	subs	r8, r0, #0
   16994:	beq	16c24 <close_stdout@@Base+0x2e28>
   16998:	ldrb	r3, [r8]
   1699c:	cmp	r3, #0
   169a0:	beq	16bb8 <close_stdout@@Base+0x2dbc>
   169a4:	bl	111c4 <strlen@plt>
   169a8:	subs	sl, r0, #0
   169ac:	subne	r3, sl, #1
   169b0:	bne	16bc8 <close_stdout@@Base+0x2dcc>
   169b4:	mov	r9, #0
   169b8:	mov	fp, r9
   169bc:	add	r9, sl, r9
   169c0:	add	r0, r9, #14
   169c4:	bl	11158 <malloc@plt>
   169c8:	subs	r7, r0, #0
   169cc:	beq	16c18 <close_stdout@@Base+0x2e1c>
   169d0:	mov	r1, r8
   169d4:	mov	r2, sl
   169d8:	bl	11068 <memcpy@plt>
   169dc:	cmp	fp, #0
   169e0:	add	ip, r7, r9
   169e4:	movne	r3, #47	; 0x2f
   169e8:	strbne	r3, [r7, sl]
   169ec:	ldr	r3, [pc, #668]	; 16c90 <close_stdout@@Base+0x2e94>
   169f0:	add	r3, pc, r3
   169f4:	ldm	r3!, {r0, r1, r2}
   169f8:	ldrh	r3, [r3]
   169fc:	str	r0, [r7, r9]
   16a00:	mov	r0, r7
   16a04:	str	r1, [ip, #4]
   16a08:	mov	r1, #32768	; 0x8000
   16a0c:	strh	r3, [ip, #12]
   16a10:	str	r2, [ip, #8]
   16a14:	bl	11140 <open64@plt>
   16a18:	subs	r8, r0, #0
   16a1c:	blt	16be0 <close_stdout@@Base+0x2de4>
   16a20:	ldr	r1, [pc, #620]	; 16c94 <close_stdout@@Base+0x2e98>
   16a24:	add	r1, pc, r1
   16a28:	bl	10ff0 <fdopen@plt>
   16a2c:	subs	fp, r0, #0
   16a30:	beq	16c38 <close_stdout@@Base+0x2e3c>
   16a34:	ldr	r0, [pc, #604]	; 16c98 <close_stdout@@Base+0x2e9c>
   16a38:	add	sl, sp, #20
   16a3c:	add	r9, sp, #72	; 0x48
   16a40:	mov	r8, #0
   16a44:	add	r0, pc, r0
   16a48:	str	r0, [sp, #12]
   16a4c:	ldr	r3, [fp, #4]
   16a50:	ldr	r2, [fp, #8]
   16a54:	cmp	r3, r2
   16a58:	bcs	16b44 <close_stdout@@Base+0x2d48>
   16a5c:	add	r2, r3, #1
   16a60:	str	r2, [fp, #4]
   16a64:	ldrb	r0, [r3]
   16a68:	cmp	r0, #32
   16a6c:	beq	16a4c <close_stdout@@Base+0x2c50>
   16a70:	sub	r3, r0, #9
   16a74:	cmp	r3, #1
   16a78:	bls	16a4c <close_stdout@@Base+0x2c50>
   16a7c:	cmp	r0, #35	; 0x23
   16a80:	beq	16b58 <close_stdout@@Base+0x2d5c>
   16a84:	mov	r1, fp
   16a88:	bl	111dc <ungetc@plt>
   16a8c:	mov	r0, fp
   16a90:	ldr	r1, [sp, #12]
   16a94:	mov	r2, sl
   16a98:	mov	r3, r9
   16a9c:	bl	11218 <fscanf@plt>
   16aa0:	cmp	r0, #1
   16aa4:	ble	16b88 <close_stdout@@Base+0x2d8c>
   16aa8:	mov	r0, sl
   16aac:	bl	111c4 <strlen@plt>
   16ab0:	str	r0, [sp, #8]
   16ab4:	mov	r0, r9
   16ab8:	bl	111c4 <strlen@plt>
   16abc:	cmp	r8, #0
   16ac0:	mov	r2, r0
   16ac4:	bne	16bec <close_stdout@@Base+0x2df0>
   16ac8:	ldr	r3, [sp, #8]
   16acc:	str	r2, [sp]
   16ad0:	add	r8, r0, r3
   16ad4:	add	r0, r8, #3
   16ad8:	add	r8, r8, #2
   16adc:	bl	11158 <malloc@plt>
   16ae0:	ldr	r2, [sp]
   16ae4:	mov	r3, r0
   16ae8:	cmp	r3, #0
   16aec:	beq	16c50 <close_stdout@@Base+0x2e54>
   16af0:	ldr	r0, [sp, #8]
   16af4:	movw	r1, #65534	; 0xfffe
   16af8:	movt	r1, #65535	; 0xffff
   16afc:	rsb	r2, r2, r8
   16b00:	rsb	r1, r0, r1
   16b04:	stm	sp, {r2, r3}
   16b08:	add	r0, r1, r2
   16b0c:	mov	r1, sl
   16b10:	add	r0, r3, r0
   16b14:	mov	r4, r3
   16b18:	bl	11110 <strcpy@plt>
   16b1c:	ldr	r2, [sp]
   16b20:	ldr	r3, [sp, #4]
   16b24:	mov	r1, r9
   16b28:	sub	r0, r2, #1
   16b2c:	add	r0, r3, r0
   16b30:	bl	11110 <strcpy@plt>
   16b34:	ldr	r3, [fp, #4]
   16b38:	ldr	r2, [fp, #8]
   16b3c:	cmp	r3, r2
   16b40:	bcc	16a5c <close_stdout@@Base+0x2c60>
   16b44:	mov	r0, fp
   16b48:	bl	11260 <__uflow@plt>
   16b4c:	cmn	r0, #1
   16b50:	beq	16b88 <close_stdout@@Base+0x2d8c>
   16b54:	b	16a68 <close_stdout@@Base+0x2c6c>
   16b58:	ldr	r3, [fp, #4]
   16b5c:	ldr	r2, [fp, #8]
   16b60:	cmp	r3, r2
   16b64:	bcs	16c6c <close_stdout@@Base+0x2e70>
   16b68:	add	r2, r3, #1
   16b6c:	str	r2, [fp, #4]
   16b70:	ldrb	r0, [r3]
   16b74:	cmp	r0, #10
   16b78:	cmnne	r0, #1
   16b7c:	bne	16b58 <close_stdout@@Base+0x2d5c>
   16b80:	cmn	r0, #1
   16b84:	bne	16a4c <close_stdout@@Base+0x2c50>
   16b88:	mov	r0, fp
   16b8c:	bl	16cb8 <close_stdout@@Base+0x2ebc>
   16b90:	cmp	r8, #0
   16b94:	beq	16be0 <close_stdout@@Base+0x2de4>
   16b98:	mov	r3, #0
   16b9c:	strb	r3, [r4, r8]
   16ba0:	mov	r0, r7
   16ba4:	bl	11050 <free@plt>
   16ba8:	ldr	r3, [pc, #236]	; 16c9c <close_stdout@@Base+0x2ea0>
   16bac:	add	r3, pc, r3
   16bb0:	str	r4, [r3]
   16bb4:	b	168d8 <close_stdout@@Base+0x2adc>
   16bb8:	ldr	r8, [pc, #224]	; 16ca0 <close_stdout@@Base+0x2ea4>
   16bbc:	mov	r3, #7
   16bc0:	mov	sl, #8
   16bc4:	add	r8, pc, r8
   16bc8:	ldrb	r3, [r8, r3]
   16bcc:	cmp	r3, #47	; 0x2f
   16bd0:	movne	r9, #1
   16bd4:	movne	fp, r9
   16bd8:	bne	169bc <close_stdout@@Base+0x2bc0>
   16bdc:	b	169b4 <close_stdout@@Base+0x2bb8>
   16be0:	ldr	r4, [pc, #188]	; 16ca4 <close_stdout@@Base+0x2ea8>
   16be4:	add	r4, pc, r4
   16be8:	b	16ba0 <close_stdout@@Base+0x2da4>
   16bec:	ldr	r0, [sp, #8]
   16bf0:	str	r2, [sp]
   16bf4:	add	r3, r0, r2
   16bf8:	mov	r0, r4
   16bfc:	add	r8, r3, r8
   16c00:	add	r1, r8, #3
   16c04:	add	r8, r8, #2
   16c08:	bl	110c8 <realloc@plt>
   16c0c:	ldr	r2, [sp]
   16c10:	mov	r3, r0
   16c14:	b	16ae8 <close_stdout@@Base+0x2cec>
   16c18:	ldr	r4, [pc, #136]	; 16ca8 <close_stdout@@Base+0x2eac>
   16c1c:	add	r4, pc, r4
   16c20:	b	16ba8 <close_stdout@@Base+0x2dac>
   16c24:	ldr	r8, [pc, #128]	; 16cac <close_stdout@@Base+0x2eb0>
   16c28:	mov	r3, #7
   16c2c:	mov	sl, #8
   16c30:	add	r8, pc, r8
   16c34:	b	16bc8 <close_stdout@@Base+0x2dcc>
   16c38:	ldr	r4, [pc, #112]	; 16cb0 <close_stdout@@Base+0x2eb4>
   16c3c:	mov	r0, r8
   16c40:	add	r4, pc, r4
   16c44:	bl	112b4 <close@plt>
   16c48:	b	16ba0 <close_stdout@@Base+0x2da4>
   16c4c:	bl	110bc <__stack_chk_fail@plt>
   16c50:	mov	r0, r4
   16c54:	ldr	r4, [pc, #88]	; 16cb4 <close_stdout@@Base+0x2eb8>
   16c58:	bl	11050 <free@plt>
   16c5c:	mov	r0, fp
   16c60:	add	r4, pc, r4
   16c64:	bl	16cb8 <close_stdout@@Base+0x2ebc>
   16c68:	b	16ba0 <close_stdout@@Base+0x2da4>
   16c6c:	mov	r0, fp
   16c70:	bl	11260 <__uflow@plt>
   16c74:	b	16b74 <close_stdout@@Base+0x2d78>
   16c78:	andeq	r3, r1, r4, asr r7
   16c7c:	andeq	r0, r0, r4, lsl #2
   16c80:	strdeq	r5, [r1], -ip
   16c84:	andeq	r2, r0, ip, lsl #16
   16c88:	muleq	r0, r4, lr
   16c8c:	andeq	r2, r0, r4, ror #15
   16c90:	andeq	r2, r0, ip, lsl #15
   16c94:	andeq	r1, r0, r8, ror #2
   16c98:	andeq	r2, r0, r8, asr #14
   16c9c:	andeq	r5, r1, ip, lsl sl
   16ca0:	muleq	r0, r4, r5
   16ca4:	andeq	r1, r0, ip, lsr #24
   16ca8:	strdeq	r1, [r0], -r4
   16cac:	andeq	r2, r0, r8, lsr #10
   16cb0:	ldrdeq	r1, [r0], -r0
   16cb4:			; <UNDEFINED> instruction: 0x00001bb0
   16cb8:	push	{r4, r5, r6, lr}
   16cbc:	sub	sp, sp, #8
   16cc0:	mov	r4, r0
   16cc4:	bl	11230 <fileno@plt>
   16cc8:	cmp	r0, #0
   16ccc:	mov	r0, r4
   16cd0:	blt	16d4c <close_stdout@@Base+0x2f50>
   16cd4:	bl	11170 <__freading@plt>
   16cd8:	cmp	r0, #0
   16cdc:	bne	16d18 <close_stdout@@Base+0x2f1c>
   16ce0:	mov	r0, r4
   16ce4:	bl	16d58 <close_stdout@@Base+0x2f5c>
   16ce8:	cmp	r0, #0
   16cec:	beq	16d48 <close_stdout@@Base+0x2f4c>
   16cf0:	bl	111e8 <__errno_location@plt>
   16cf4:	ldr	r6, [r0]
   16cf8:	mov	r5, r0
   16cfc:	mov	r0, r4
   16d00:	bl	11248 <fclose@plt>
   16d04:	cmp	r6, #0
   16d08:	mvnne	r0, #0
   16d0c:	strne	r6, [r5]
   16d10:	add	sp, sp, #8
   16d14:	pop	{r4, r5, r6, pc}
   16d18:	mov	r0, r4
   16d1c:	bl	11230 <fileno@plt>
   16d20:	mov	r1, #1
   16d24:	mov	r2, #0
   16d28:	mov	r3, #0
   16d2c:	str	r1, [sp]
   16d30:	bl	110f8 <lseek64@plt>
   16d34:	mvn	r2, #0
   16d38:	mvn	r3, #0
   16d3c:	cmp	r1, r3
   16d40:	cmpeq	r0, r2
   16d44:	bne	16ce0 <close_stdout@@Base+0x2ee4>
   16d48:	mov	r0, r4
   16d4c:	add	sp, sp, #8
   16d50:	pop	{r4, r5, r6, lr}
   16d54:	b	11248 <fclose@plt>
   16d58:	push	{r4, lr}
   16d5c:	subs	r4, r0, #0
   16d60:	sub	sp, sp, #8
   16d64:	beq	16d74 <close_stdout@@Base+0x2f78>
   16d68:	bl	11170 <__freading@plt>
   16d6c:	cmp	r0, #0
   16d70:	bne	16d84 <close_stdout@@Base+0x2f88>
   16d74:	mov	r0, r4
   16d78:	add	sp, sp, #8
   16d7c:	pop	{r4, lr}
   16d80:	b	11044 <fflush@plt>
   16d84:	ldr	r3, [r4]
   16d88:	tst	r3, #256	; 0x100
   16d8c:	beq	16d74 <close_stdout@@Base+0x2f78>
   16d90:	mov	r3, #1
   16d94:	mov	r0, r4
   16d98:	str	r3, [sp]
   16d9c:	mov	r2, #0
   16da0:	mov	r3, #0
   16da4:	bl	16db8 <close_stdout@@Base+0x2fbc>
   16da8:	mov	r0, r4
   16dac:	add	sp, sp, #8
   16db0:	pop	{r4, lr}
   16db4:	b	11044 <fflush@plt>
   16db8:	push	{r4, r5, r6, r7, lr}
   16dbc:	sub	sp, sp, #20
   16dc0:	ldmib	r0, {r1, ip}
   16dc4:	mov	r6, r0
   16dc8:	ldr	r4, [sp, #40]	; 0x28
   16dcc:	cmp	ip, r1
   16dd0:	beq	16de8 <close_stdout@@Base+0x2fec>
   16dd4:	str	r4, [sp, #40]	; 0x28
   16dd8:	mov	r0, r6
   16ddc:	add	sp, sp, #20
   16de0:	pop	{r4, r5, r6, r7, lr}
   16de4:	b	11254 <fseeko64@plt>
   16de8:	ldr	ip, [r0, #20]
   16dec:	ldr	r1, [r0, #16]
   16df0:	cmp	ip, r1
   16df4:	bne	16dd4 <close_stdout@@Base+0x2fd8>
   16df8:	ldr	r7, [r0, #36]	; 0x24
   16dfc:	cmp	r7, #0
   16e00:	bne	16dd4 <close_stdout@@Base+0x2fd8>
   16e04:	str	r2, [sp, #12]
   16e08:	mvn	r5, #0
   16e0c:	str	r3, [sp, #8]
   16e10:	bl	11230 <fileno@plt>
   16e14:	str	r4, [sp]
   16e18:	mvn	r4, #0
   16e1c:	ldr	r2, [sp, #12]
   16e20:	ldr	r3, [sp, #8]
   16e24:	bl	110f8 <lseek64@plt>
   16e28:	mov	r2, r0
   16e2c:	mov	r3, r1
   16e30:	cmp	r3, r5
   16e34:	cmpeq	r2, r4
   16e38:	beq	16e58 <close_stdout@@Base+0x305c>
   16e3c:	ldr	r1, [r6]
   16e40:	mov	r0, r7
   16e44:	strd	r2, [r6, #80]	; 0x50
   16e48:	bic	r3, r1, #16
   16e4c:	str	r3, [r6]
   16e50:	add	sp, sp, #20
   16e54:	pop	{r4, r5, r6, r7, pc}
   16e58:	mvn	r0, #0
   16e5c:	b	16e50 <close_stdout@@Base+0x3054>
   16e60:	subs	r2, r1, #1
   16e64:	bxeq	lr
   16e68:	bcc	17040 <close_stdout@@Base+0x3244>
   16e6c:	cmp	r0, r1
   16e70:	bls	17024 <close_stdout@@Base+0x3228>
   16e74:	tst	r1, r2
   16e78:	beq	17030 <close_stdout@@Base+0x3234>
   16e7c:	clz	r3, r0
   16e80:	clz	r2, r1
   16e84:	sub	r3, r2, r3
   16e88:	rsbs	r3, r3, #31
   16e8c:	addne	r3, r3, r3, lsl #1
   16e90:	mov	r2, #0
   16e94:	addne	pc, pc, r3, lsl #2
   16e98:	nop	{0}
   16e9c:	cmp	r0, r1, lsl #31
   16ea0:	adc	r2, r2, r2
   16ea4:	subcs	r0, r0, r1, lsl #31
   16ea8:	cmp	r0, r1, lsl #30
   16eac:	adc	r2, r2, r2
   16eb0:	subcs	r0, r0, r1, lsl #30
   16eb4:	cmp	r0, r1, lsl #29
   16eb8:	adc	r2, r2, r2
   16ebc:	subcs	r0, r0, r1, lsl #29
   16ec0:	cmp	r0, r1, lsl #28
   16ec4:	adc	r2, r2, r2
   16ec8:	subcs	r0, r0, r1, lsl #28
   16ecc:	cmp	r0, r1, lsl #27
   16ed0:	adc	r2, r2, r2
   16ed4:	subcs	r0, r0, r1, lsl #27
   16ed8:	cmp	r0, r1, lsl #26
   16edc:	adc	r2, r2, r2
   16ee0:	subcs	r0, r0, r1, lsl #26
   16ee4:	cmp	r0, r1, lsl #25
   16ee8:	adc	r2, r2, r2
   16eec:	subcs	r0, r0, r1, lsl #25
   16ef0:	cmp	r0, r1, lsl #24
   16ef4:	adc	r2, r2, r2
   16ef8:	subcs	r0, r0, r1, lsl #24
   16efc:	cmp	r0, r1, lsl #23
   16f00:	adc	r2, r2, r2
   16f04:	subcs	r0, r0, r1, lsl #23
   16f08:	cmp	r0, r1, lsl #22
   16f0c:	adc	r2, r2, r2
   16f10:	subcs	r0, r0, r1, lsl #22
   16f14:	cmp	r0, r1, lsl #21
   16f18:	adc	r2, r2, r2
   16f1c:	subcs	r0, r0, r1, lsl #21
   16f20:	cmp	r0, r1, lsl #20
   16f24:	adc	r2, r2, r2
   16f28:	subcs	r0, r0, r1, lsl #20
   16f2c:	cmp	r0, r1, lsl #19
   16f30:	adc	r2, r2, r2
   16f34:	subcs	r0, r0, r1, lsl #19
   16f38:	cmp	r0, r1, lsl #18
   16f3c:	adc	r2, r2, r2
   16f40:	subcs	r0, r0, r1, lsl #18
   16f44:	cmp	r0, r1, lsl #17
   16f48:	adc	r2, r2, r2
   16f4c:	subcs	r0, r0, r1, lsl #17
   16f50:	cmp	r0, r1, lsl #16
   16f54:	adc	r2, r2, r2
   16f58:	subcs	r0, r0, r1, lsl #16
   16f5c:	cmp	r0, r1, lsl #15
   16f60:	adc	r2, r2, r2
   16f64:	subcs	r0, r0, r1, lsl #15
   16f68:	cmp	r0, r1, lsl #14
   16f6c:	adc	r2, r2, r2
   16f70:	subcs	r0, r0, r1, lsl #14
   16f74:	cmp	r0, r1, lsl #13
   16f78:	adc	r2, r2, r2
   16f7c:	subcs	r0, r0, r1, lsl #13
   16f80:	cmp	r0, r1, lsl #12
   16f84:	adc	r2, r2, r2
   16f88:	subcs	r0, r0, r1, lsl #12
   16f8c:	cmp	r0, r1, lsl #11
   16f90:	adc	r2, r2, r2
   16f94:	subcs	r0, r0, r1, lsl #11
   16f98:	cmp	r0, r1, lsl #10
   16f9c:	adc	r2, r2, r2
   16fa0:	subcs	r0, r0, r1, lsl #10
   16fa4:	cmp	r0, r1, lsl #9
   16fa8:	adc	r2, r2, r2
   16fac:	subcs	r0, r0, r1, lsl #9
   16fb0:	cmp	r0, r1, lsl #8
   16fb4:	adc	r2, r2, r2
   16fb8:	subcs	r0, r0, r1, lsl #8
   16fbc:	cmp	r0, r1, lsl #7
   16fc0:	adc	r2, r2, r2
   16fc4:	subcs	r0, r0, r1, lsl #7
   16fc8:	cmp	r0, r1, lsl #6
   16fcc:	adc	r2, r2, r2
   16fd0:	subcs	r0, r0, r1, lsl #6
   16fd4:	cmp	r0, r1, lsl #5
   16fd8:	adc	r2, r2, r2
   16fdc:	subcs	r0, r0, r1, lsl #5
   16fe0:	cmp	r0, r1, lsl #4
   16fe4:	adc	r2, r2, r2
   16fe8:	subcs	r0, r0, r1, lsl #4
   16fec:	cmp	r0, r1, lsl #3
   16ff0:	adc	r2, r2, r2
   16ff4:	subcs	r0, r0, r1, lsl #3
   16ff8:	cmp	r0, r1, lsl #2
   16ffc:	adc	r2, r2, r2
   17000:	subcs	r0, r0, r1, lsl #2
   17004:	cmp	r0, r1, lsl #1
   17008:	adc	r2, r2, r2
   1700c:	subcs	r0, r0, r1, lsl #1
   17010:	cmp	r0, r1
   17014:	adc	r2, r2, r2
   17018:	subcs	r0, r0, r1
   1701c:	mov	r0, r2
   17020:	bx	lr
   17024:	moveq	r0, #1
   17028:	movne	r0, #0
   1702c:	bx	lr
   17030:	clz	r2, r1
   17034:	rsb	r2, r2, #31
   17038:	lsr	r0, r0, r2
   1703c:	bx	lr
   17040:	cmp	r0, #0
   17044:	mvnne	r0, #0
   17048:	b	170a8 <close_stdout@@Base+0x32ac>
   1704c:	cmp	r1, #0
   17050:	beq	17040 <close_stdout@@Base+0x3244>
   17054:	push	{r0, r1, lr}
   17058:	bl	16e60 <close_stdout@@Base+0x3064>
   1705c:	pop	{r1, r2, lr}
   17060:	mul	r3, r2, r0
   17064:	sub	r1, r1, r3
   17068:	bx	lr
   1706c:	cmp	r3, #0
   17070:	cmpeq	r2, #0
   17074:	bne	1708c <close_stdout@@Base+0x3290>
   17078:	cmp	r1, #0
   1707c:	cmpeq	r0, #0
   17080:	mvnne	r1, #0
   17084:	mvnne	r0, #0
   17088:	b	170a8 <close_stdout@@Base+0x32ac>
   1708c:	sub	sp, sp, #8
   17090:	push	{sp, lr}
   17094:	bl	170f4 <close_stdout@@Base+0x32f8>
   17098:	ldr	lr, [sp, #4]
   1709c:	add	sp, sp, #8
   170a0:	pop	{r2, r3}
   170a4:	bx	lr
   170a8:	push	{r1, lr}
   170ac:	mov	r0, #8
   170b0:	bl	11014 <raise@plt>
   170b4:	pop	{r1, pc}
   170b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   170bc:	mov	r8, r2
   170c0:	mov	r6, r0
   170c4:	mov	r7, r1
   170c8:	mov	sl, r3
   170cc:	ldr	r9, [sp, #32]
   170d0:	bl	17130 <close_stdout@@Base+0x3334>
   170d4:	umull	r4, r5, r8, r0
   170d8:	mul	r8, r8, r1
   170dc:	mla	r2, r0, sl, r8
   170e0:	add	r5, r2, r5
   170e4:	subs	r4, r6, r4
   170e8:	sbc	r5, r7, r5
   170ec:	strd	r4, [r9]
   170f0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   170f4:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   170f8:	mov	r8, r2
   170fc:	mov	r6, r0
   17100:	mov	r7, r1
   17104:	mov	r5, r3
   17108:	ldr	r9, [sp, #32]
   1710c:	bl	175bc <close_stdout@@Base+0x37c0>
   17110:	mul	r3, r0, r5
   17114:	umull	r4, r5, r0, r8
   17118:	mla	r8, r8, r1, r3
   1711c:	add	r5, r8, r5
   17120:	subs	r4, r6, r4
   17124:	sbc	r5, r7, r5
   17128:	strd	r4, [r9]
   1712c:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17130:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17134:	rsbs	r4, r0, #0
   17138:	rsc	r5, r1, #0
   1713c:	cmp	r1, #0
   17140:	mvn	r6, #0
   17144:	sub	sp, sp, #12
   17148:	movge	r4, r0
   1714c:	movge	r5, r1
   17150:	movge	r6, #0
   17154:	cmp	r3, #0
   17158:	blt	17390 <close_stdout@@Base+0x3594>
   1715c:	cmp	r3, #0
   17160:	mov	sl, r4
   17164:	mov	ip, r5
   17168:	mov	r0, r2
   1716c:	mov	r1, r3
   17170:	mov	r8, r2
   17174:	mov	r7, r4
   17178:	mov	r9, r5
   1717c:	bne	17274 <close_stdout@@Base+0x3478>
   17180:	cmp	r2, r5
   17184:	bls	172b0 <close_stdout@@Base+0x34b4>
   17188:	clz	r3, r2
   1718c:	cmp	r3, #0
   17190:	rsbne	r2, r3, #32
   17194:	lslne	r8, r0, r3
   17198:	lsrne	r2, r4, r2
   1719c:	lslne	r7, r4, r3
   171a0:	orrne	r9, r2, r5, lsl r3
   171a4:	lsr	r4, r8, #16
   171a8:	uxth	sl, r8
   171ac:	mov	r1, r4
   171b0:	mov	r0, r9
   171b4:	bl	16e60 <close_stdout@@Base+0x3064>
   171b8:	mov	r1, r4
   171bc:	mov	fp, r0
   171c0:	mov	r0, r9
   171c4:	bl	1704c <close_stdout@@Base+0x3250>
   171c8:	mul	r0, sl, fp
   171cc:	lsr	r2, r7, #16
   171d0:	orr	r1, r2, r1, lsl #16
   171d4:	cmp	r0, r1
   171d8:	bls	171fc <close_stdout@@Base+0x3400>
   171dc:	adds	r1, r1, r8
   171e0:	sub	r3, fp, #1
   171e4:	bcs	171f8 <close_stdout@@Base+0x33fc>
   171e8:	cmp	r0, r1
   171ec:	subhi	fp, fp, #2
   171f0:	addhi	r1, r1, r8
   171f4:	bhi	171fc <close_stdout@@Base+0x3400>
   171f8:	mov	fp, r3
   171fc:	rsb	r9, r0, r1
   17200:	mov	r1, r4
   17204:	uxth	r7, r7
   17208:	mov	r0, r9
   1720c:	bl	16e60 <close_stdout@@Base+0x3064>
   17210:	mov	r1, r4
   17214:	mov	r5, r0
   17218:	mov	r0, r9
   1721c:	bl	1704c <close_stdout@@Base+0x3250>
   17220:	mul	sl, sl, r5
   17224:	orr	r1, r7, r1, lsl #16
   17228:	cmp	sl, r1
   1722c:	bls	1724c <close_stdout@@Base+0x3450>
   17230:	adds	r8, r1, r8
   17234:	sub	r3, r5, #1
   17238:	bcs	17248 <close_stdout@@Base+0x344c>
   1723c:	cmp	sl, r8
   17240:	subhi	r5, r5, #2
   17244:	bhi	1724c <close_stdout@@Base+0x3450>
   17248:	mov	r5, r3
   1724c:	orr	r3, r5, fp, lsl #16
   17250:	mov	r4, #0
   17254:	cmp	r6, #0
   17258:	mov	r0, r3
   1725c:	mov	r1, r4
   17260:	beq	1726c <close_stdout@@Base+0x3470>
   17264:	rsbs	r0, r0, #0
   17268:	rsc	r1, r1, #0
   1726c:	add	sp, sp, #12
   17270:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   17274:	cmp	r3, r5
   17278:	movhi	r4, #0
   1727c:	movhi	r3, r4
   17280:	bhi	17254 <close_stdout@@Base+0x3458>
   17284:	clz	r5, r1
   17288:	cmp	r5, #0
   1728c:	bne	1747c <close_stdout@@Base+0x3680>
   17290:	cmp	r1, ip
   17294:	cmpcs	r2, sl
   17298:	movhi	r4, #0
   1729c:	movls	r4, #1
   172a0:	movls	r3, #1
   172a4:	movls	r4, r5
   172a8:	movhi	r3, r4
   172ac:	b	17254 <close_stdout@@Base+0x3458>
   172b0:	cmp	r2, #0
   172b4:	bne	172c8 <close_stdout@@Base+0x34cc>
   172b8:	mov	r1, r2
   172bc:	mov	r0, #1
   172c0:	bl	16e60 <close_stdout@@Base+0x3064>
   172c4:	mov	r8, r0
   172c8:	clz	r3, r8
   172cc:	cmp	r3, #0
   172d0:	bne	173a0 <close_stdout@@Base+0x35a4>
   172d4:	rsb	r9, r8, r9
   172d8:	lsr	r5, r8, #16
   172dc:	uxth	sl, r8
   172e0:	mov	r4, #1
   172e4:	mov	r1, r5
   172e8:	mov	r0, r9
   172ec:	bl	16e60 <close_stdout@@Base+0x3064>
   172f0:	mov	r1, r5
   172f4:	mov	fp, r0
   172f8:	mov	r0, r9
   172fc:	bl	1704c <close_stdout@@Base+0x3250>
   17300:	mul	r0, sl, fp
   17304:	lsr	r2, r7, #16
   17308:	orr	r1, r2, r1, lsl #16
   1730c:	cmp	r0, r1
   17310:	bls	17330 <close_stdout@@Base+0x3534>
   17314:	adds	r1, r1, r8
   17318:	sub	r3, fp, #1
   1731c:	bcs	1759c <close_stdout@@Base+0x37a0>
   17320:	cmp	r0, r1
   17324:	subhi	fp, fp, #2
   17328:	addhi	r1, r1, r8
   1732c:	bls	1759c <close_stdout@@Base+0x37a0>
   17330:	rsb	r2, r0, r1
   17334:	mov	r1, r5
   17338:	str	r2, [sp]
   1733c:	uxth	r7, r7
   17340:	mov	r0, r2
   17344:	bl	16e60 <close_stdout@@Base+0x3064>
   17348:	ldr	r2, [sp]
   1734c:	mov	r1, r5
   17350:	mov	r9, r0
   17354:	mov	r0, r2
   17358:	bl	1704c <close_stdout@@Base+0x3250>
   1735c:	mul	sl, sl, r9
   17360:	orr	r1, r7, r1, lsl #16
   17364:	cmp	sl, r1
   17368:	bls	17388 <close_stdout@@Base+0x358c>
   1736c:	adds	r8, r1, r8
   17370:	sub	r3, r9, #1
   17374:	bcs	17384 <close_stdout@@Base+0x3588>
   17378:	cmp	sl, r8
   1737c:	subhi	r9, r9, #2
   17380:	bhi	17388 <close_stdout@@Base+0x358c>
   17384:	mov	r9, r3
   17388:	orr	r3, r9, fp, lsl #16
   1738c:	b	17254 <close_stdout@@Base+0x3458>
   17390:	mvn	r6, r6
   17394:	rsbs	r2, r2, #0
   17398:	rsc	r3, r3, #0
   1739c:	b	1715c <close_stdout@@Base+0x3360>
   173a0:	lsl	r8, r8, r3
   173a4:	rsb	fp, r3, #32
   173a8:	lsr	r4, r9, fp
   173ac:	lsr	fp, r7, fp
   173b0:	lsr	r5, r8, #16
   173b4:	orr	fp, fp, r9, lsl r3
   173b8:	mov	r0, r4
   173bc:	lsl	r7, r7, r3
   173c0:	mov	r1, r5
   173c4:	uxth	sl, r8
   173c8:	bl	16e60 <close_stdout@@Base+0x3064>
   173cc:	mov	r1, r5
   173d0:	mov	r3, r0
   173d4:	mov	r0, r4
   173d8:	str	r3, [sp]
   173dc:	bl	1704c <close_stdout@@Base+0x3250>
   173e0:	ldr	r3, [sp]
   173e4:	lsr	r2, fp, #16
   173e8:	mul	r0, sl, r3
   173ec:	orr	r1, r2, r1, lsl #16
   173f0:	cmp	r0, r1
   173f4:	bls	17414 <close_stdout@@Base+0x3618>
   173f8:	adds	r1, r1, r8
   173fc:	sub	r2, r3, #1
   17400:	bcs	175b4 <close_stdout@@Base+0x37b8>
   17404:	cmp	r0, r1
   17408:	subhi	r3, r3, #2
   1740c:	addhi	r1, r1, r8
   17410:	bls	175b4 <close_stdout@@Base+0x37b8>
   17414:	rsb	r9, r0, r1
   17418:	mov	r1, r5
   1741c:	str	r3, [sp]
   17420:	uxth	fp, fp
   17424:	mov	r0, r9
   17428:	bl	16e60 <close_stdout@@Base+0x3064>
   1742c:	mov	r1, r5
   17430:	mov	r4, r0
   17434:	mov	r0, r9
   17438:	bl	1704c <close_stdout@@Base+0x3250>
   1743c:	mul	r9, sl, r4
   17440:	ldr	r3, [sp]
   17444:	orr	r1, fp, r1, lsl #16
   17448:	cmp	r9, r1
   1744c:	bls	17470 <close_stdout@@Base+0x3674>
   17450:	adds	r1, r1, r8
   17454:	sub	r2, r4, #1
   17458:	bcs	1746c <close_stdout@@Base+0x3670>
   1745c:	cmp	r9, r1
   17460:	subhi	r4, r4, #2
   17464:	addhi	r1, r1, r8
   17468:	bhi	17470 <close_stdout@@Base+0x3674>
   1746c:	mov	r4, r2
   17470:	rsb	r9, r9, r1
   17474:	orr	r4, r4, r3, lsl #16
   17478:	b	172e4 <close_stdout@@Base+0x34e8>
   1747c:	rsb	sl, r5, #32
   17480:	lsl	r3, r2, r5
   17484:	lsr	r0, r2, sl
   17488:	lsr	r2, ip, sl
   1748c:	orr	r4, r0, r1, lsl r5
   17490:	lsr	sl, r7, sl
   17494:	mov	r0, r2
   17498:	orr	sl, sl, ip, lsl r5
   1749c:	lsr	r9, r4, #16
   174a0:	str	r3, [sp, #4]
   174a4:	str	r2, [sp]
   174a8:	uxth	fp, r4
   174ac:	mov	r1, r9
   174b0:	bl	16e60 <close_stdout@@Base+0x3064>
   174b4:	ldr	r2, [sp]
   174b8:	mov	r1, r9
   174bc:	mov	r8, r0
   174c0:	mov	r0, r2
   174c4:	bl	1704c <close_stdout@@Base+0x3250>
   174c8:	mul	r0, fp, r8
   174cc:	lsr	r2, sl, #16
   174d0:	orr	r1, r2, r1, lsl #16
   174d4:	cmp	r0, r1
   174d8:	bls	174f8 <close_stdout@@Base+0x36fc>
   174dc:	adds	r1, r1, r4
   174e0:	sub	r2, r8, #1
   174e4:	bcs	175ac <close_stdout@@Base+0x37b0>
   174e8:	cmp	r0, r1
   174ec:	subhi	r8, r8, #2
   174f0:	addhi	r1, r1, r4
   174f4:	bls	175ac <close_stdout@@Base+0x37b0>
   174f8:	rsb	ip, r0, r1
   174fc:	mov	r1, r9
   17500:	str	ip, [sp]
   17504:	mov	r0, ip
   17508:	bl	16e60 <close_stdout@@Base+0x3064>
   1750c:	ldr	ip, [sp]
   17510:	mov	r1, r9
   17514:	mov	r2, r0
   17518:	mov	r0, ip
   1751c:	str	r2, [sp]
   17520:	bl	1704c <close_stdout@@Base+0x3250>
   17524:	ldr	r2, [sp]
   17528:	uxth	ip, sl
   1752c:	mul	fp, fp, r2
   17530:	orr	ip, ip, r1, lsl #16
   17534:	cmp	fp, ip
   17538:	bls	17558 <close_stdout@@Base+0x375c>
   1753c:	adds	ip, ip, r4
   17540:	sub	r1, r2, #1
   17544:	bcs	175a4 <close_stdout@@Base+0x37a8>
   17548:	cmp	fp, ip
   1754c:	subhi	r2, r2, #2
   17550:	addhi	ip, ip, r4
   17554:	bls	175a4 <close_stdout@@Base+0x37a8>
   17558:	ldr	r0, [sp, #4]
   1755c:	orr	r1, r2, r8, lsl #16
   17560:	rsb	fp, fp, ip
   17564:	umull	r2, r3, r1, r0
   17568:	cmp	fp, r3
   1756c:	bcc	17590 <close_stdout@@Base+0x3794>
   17570:	movne	r4, #0
   17574:	moveq	r4, #1
   17578:	cmp	r2, r7, lsl r5
   1757c:	movls	r4, #0
   17580:	andhi	r4, r4, #1
   17584:	cmp	r4, #0
   17588:	moveq	r3, r1
   1758c:	beq	17254 <close_stdout@@Base+0x3458>
   17590:	sub	r3, r1, #1
   17594:	mov	r4, #0
   17598:	b	17254 <close_stdout@@Base+0x3458>
   1759c:	mov	fp, r3
   175a0:	b	17330 <close_stdout@@Base+0x3534>
   175a4:	mov	r2, r1
   175a8:	b	17558 <close_stdout@@Base+0x375c>
   175ac:	mov	r8, r2
   175b0:	b	174f8 <close_stdout@@Base+0x36fc>
   175b4:	mov	r3, r2
   175b8:	b	17414 <close_stdout@@Base+0x3618>
   175bc:	cmp	r3, #0
   175c0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   175c4:	mov	r6, r0
   175c8:	sub	sp, sp, #12
   175cc:	mov	r5, r1
   175d0:	mov	r7, r0
   175d4:	mov	r4, r2
   175d8:	mov	r8, r1
   175dc:	bne	176bc <close_stdout@@Base+0x38c0>
   175e0:	cmp	r2, r1
   175e4:	bls	176f8 <close_stdout@@Base+0x38fc>
   175e8:	clz	r3, r2
   175ec:	cmp	r3, #0
   175f0:	rsbne	r8, r3, #32
   175f4:	lslne	r4, r2, r3
   175f8:	lsrne	r8, r0, r8
   175fc:	lslne	r7, r0, r3
   17600:	orrne	r8, r8, r1, lsl r3
   17604:	lsr	r5, r4, #16
   17608:	uxth	sl, r4
   1760c:	mov	r1, r5
   17610:	mov	r0, r8
   17614:	bl	16e60 <close_stdout@@Base+0x3064>
   17618:	mov	r1, r5
   1761c:	mov	r9, r0
   17620:	mov	r0, r8
   17624:	bl	1704c <close_stdout@@Base+0x3250>
   17628:	mul	r0, sl, r9
   1762c:	lsr	r3, r7, #16
   17630:	orr	r1, r3, r1, lsl #16
   17634:	cmp	r0, r1
   17638:	bls	1765c <close_stdout@@Base+0x3860>
   1763c:	adds	r1, r1, r4
   17640:	sub	r2, r9, #1
   17644:	bcs	17658 <close_stdout@@Base+0x385c>
   17648:	cmp	r0, r1
   1764c:	subhi	r9, r9, #2
   17650:	addhi	r1, r1, r4
   17654:	bhi	1765c <close_stdout@@Base+0x3860>
   17658:	mov	r9, r2
   1765c:	rsb	r8, r0, r1
   17660:	mov	r1, r5
   17664:	uxth	r7, r7
   17668:	mov	r0, r8
   1766c:	bl	16e60 <close_stdout@@Base+0x3064>
   17670:	mov	r1, r5
   17674:	mov	r6, r0
   17678:	mov	r0, r8
   1767c:	bl	1704c <close_stdout@@Base+0x3250>
   17680:	mul	sl, sl, r6
   17684:	orr	r1, r7, r1, lsl #16
   17688:	cmp	sl, r1
   1768c:	bls	176a8 <close_stdout@@Base+0x38ac>
   17690:	adds	r4, r1, r4
   17694:	sub	r3, r6, #1
   17698:	bcs	179a4 <close_stdout@@Base+0x3ba8>
   1769c:	cmp	sl, r4
   176a0:	subhi	r6, r6, #2
   176a4:	bls	179a4 <close_stdout@@Base+0x3ba8>
   176a8:	orr	r0, r6, r9, lsl #16
   176ac:	mov	r6, #0
   176b0:	mov	r1, r6
   176b4:	add	sp, sp, #12
   176b8:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   176bc:	cmp	r3, r1
   176c0:	movhi	r6, #0
   176c4:	movhi	r0, r6
   176c8:	bhi	176b0 <close_stdout@@Base+0x38b4>
   176cc:	clz	r7, r3
   176d0:	cmp	r7, #0
   176d4:	bne	177d4 <close_stdout@@Base+0x39d8>
   176d8:	cmp	r3, r1
   176dc:	cmpcs	r2, r6
   176e0:	movhi	r6, #0
   176e4:	movls	r6, #1
   176e8:	movls	r0, #1
   176ec:	movls	r6, r7
   176f0:	movhi	r0, r6
   176f4:	b	176b0 <close_stdout@@Base+0x38b4>
   176f8:	cmp	r2, #0
   176fc:	bne	17710 <close_stdout@@Base+0x3914>
   17700:	mov	r1, r2
   17704:	mov	r0, #1
   17708:	bl	16e60 <close_stdout@@Base+0x3064>
   1770c:	mov	r4, r0
   17710:	clz	r3, r4
   17714:	cmp	r3, #0
   17718:	bne	178d0 <close_stdout@@Base+0x3ad4>
   1771c:	rsb	r5, r4, r5
   17720:	lsr	r8, r4, #16
   17724:	uxth	sl, r4
   17728:	mov	r6, #1
   1772c:	mov	r1, r8
   17730:	mov	r0, r5
   17734:	bl	16e60 <close_stdout@@Base+0x3064>
   17738:	mov	r1, r8
   1773c:	mov	r9, r0
   17740:	mov	r0, r5
   17744:	bl	1704c <close_stdout@@Base+0x3250>
   17748:	mul	r0, sl, r9
   1774c:	lsr	r3, r7, #16
   17750:	orr	r1, r3, r1, lsl #16
   17754:	cmp	r0, r1
   17758:	bls	17778 <close_stdout@@Base+0x397c>
   1775c:	adds	r1, r1, r4
   17760:	sub	r2, r9, #1
   17764:	bcs	179ac <close_stdout@@Base+0x3bb0>
   17768:	cmp	r0, r1
   1776c:	subhi	r9, r9, #2
   17770:	addhi	r1, r1, r4
   17774:	bls	179ac <close_stdout@@Base+0x3bb0>
   17778:	rsb	fp, r0, r1
   1777c:	mov	r1, r8
   17780:	uxth	r7, r7
   17784:	mov	r0, fp
   17788:	bl	16e60 <close_stdout@@Base+0x3064>
   1778c:	mov	r1, r8
   17790:	mov	r5, r0
   17794:	mov	r0, fp
   17798:	bl	1704c <close_stdout@@Base+0x3250>
   1779c:	mul	sl, sl, r5
   177a0:	orr	r1, r7, r1, lsl #16
   177a4:	cmp	sl, r1
   177a8:	bls	177c4 <close_stdout@@Base+0x39c8>
   177ac:	adds	r4, r1, r4
   177b0:	sub	r3, r5, #1
   177b4:	bcs	179b4 <close_stdout@@Base+0x3bb8>
   177b8:	cmp	sl, r4
   177bc:	subhi	r5, r5, #2
   177c0:	bls	179b4 <close_stdout@@Base+0x3bb8>
   177c4:	orr	r0, r5, r9, lsl #16
   177c8:	mov	r1, r6
   177cc:	add	sp, sp, #12
   177d0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   177d4:	rsb	r1, r7, #32
   177d8:	lsl	r0, r2, r7
   177dc:	lsr	r2, r2, r1
   177e0:	lsr	fp, r5, r1
   177e4:	orr	r8, r2, r3, lsl r7
   177e8:	lsr	r1, r6, r1
   177ec:	str	r0, [sp, #4]
   177f0:	orr	r5, r1, r5, lsl r7
   177f4:	lsr	r9, r8, #16
   177f8:	mov	r0, fp
   177fc:	uxth	sl, r8
   17800:	mov	r1, r9
   17804:	bl	16e60 <close_stdout@@Base+0x3064>
   17808:	mov	r1, r9
   1780c:	mov	r4, r0
   17810:	mov	r0, fp
   17814:	bl	1704c <close_stdout@@Base+0x3250>
   17818:	mul	r0, sl, r4
   1781c:	lsr	ip, r5, #16
   17820:	orr	r1, ip, r1, lsl #16
   17824:	cmp	r0, r1
   17828:	bls	1783c <close_stdout@@Base+0x3a40>
   1782c:	adds	r1, r1, r8
   17830:	sub	r2, r4, #1
   17834:	bcc	179d0 <close_stdout@@Base+0x3bd4>
   17838:	mov	r4, r2
   1783c:	rsb	ip, r0, r1
   17840:	mov	r1, r9
   17844:	str	ip, [sp]
   17848:	uxth	r5, r5
   1784c:	mov	r0, ip
   17850:	bl	16e60 <close_stdout@@Base+0x3064>
   17854:	ldr	ip, [sp]
   17858:	mov	r1, r9
   1785c:	mov	fp, r0
   17860:	mov	r0, ip
   17864:	bl	1704c <close_stdout@@Base+0x3250>
   17868:	mul	sl, sl, fp
   1786c:	orr	r1, r5, r1, lsl #16
   17870:	cmp	sl, r1
   17874:	bls	17888 <close_stdout@@Base+0x3a8c>
   17878:	adds	r1, r1, r8
   1787c:	sub	r2, fp, #1
   17880:	bcc	179bc <close_stdout@@Base+0x3bc0>
   17884:	mov	fp, r2
   17888:	ldr	r3, [sp, #4]
   1788c:	orr	r0, fp, r4, lsl #16
   17890:	rsb	sl, sl, r1
   17894:	umull	r4, r5, r0, r3
   17898:	cmp	sl, r5
   1789c:	bcc	178bc <close_stdout@@Base+0x3ac0>
   178a0:	movne	r3, #0
   178a4:	moveq	r3, #1
   178a8:	cmp	r4, r6, lsl r7
   178ac:	movls	r6, #0
   178b0:	andhi	r6, r3, #1
   178b4:	cmp	r6, #0
   178b8:	beq	176b0 <close_stdout@@Base+0x38b4>
   178bc:	mov	r6, #0
   178c0:	sub	r0, r0, #1
   178c4:	mov	r1, r6
   178c8:	add	sp, sp, #12
   178cc:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   178d0:	lsl	r4, r4, r3
   178d4:	rsb	r9, r3, #32
   178d8:	lsr	r2, r5, r9
   178dc:	lsr	r9, r6, r9
   178e0:	lsr	r8, r4, #16
   178e4:	orr	r9, r9, r5, lsl r3
   178e8:	mov	r0, r2
   178ec:	lsl	r7, r6, r3
   178f0:	mov	r1, r8
   178f4:	str	r2, [sp]
   178f8:	bl	16e60 <close_stdout@@Base+0x3064>
   178fc:	ldr	r2, [sp]
   17900:	mov	r1, r8
   17904:	uxth	sl, r4
   17908:	mov	fp, r0
   1790c:	mov	r0, r2
   17910:	bl	1704c <close_stdout@@Base+0x3250>
   17914:	mul	r0, sl, fp
   17918:	lsr	r3, r9, #16
   1791c:	orr	r1, r3, r1, lsl #16
   17920:	cmp	r0, r1
   17924:	bls	17944 <close_stdout@@Base+0x3b48>
   17928:	adds	r1, r1, r4
   1792c:	sub	r3, fp, #1
   17930:	bcs	179e4 <close_stdout@@Base+0x3be8>
   17934:	cmp	r0, r1
   17938:	subhi	fp, fp, #2
   1793c:	addhi	r1, r1, r4
   17940:	bls	179e4 <close_stdout@@Base+0x3be8>
   17944:	rsb	r5, r0, r1
   17948:	mov	r1, r8
   1794c:	uxth	r9, r9
   17950:	mov	r0, r5
   17954:	bl	16e60 <close_stdout@@Base+0x3064>
   17958:	mov	r1, r8
   1795c:	mov	r6, r0
   17960:	mov	r0, r5
   17964:	bl	1704c <close_stdout@@Base+0x3250>
   17968:	mul	r5, sl, r6
   1796c:	orr	r1, r9, r1, lsl #16
   17970:	cmp	r5, r1
   17974:	bls	17998 <close_stdout@@Base+0x3b9c>
   17978:	adds	r1, r1, r4
   1797c:	sub	r3, r6, #1
   17980:	bcs	17994 <close_stdout@@Base+0x3b98>
   17984:	cmp	r5, r1
   17988:	subhi	r6, r6, #2
   1798c:	addhi	r1, r1, r4
   17990:	bhi	17998 <close_stdout@@Base+0x3b9c>
   17994:	mov	r6, r3
   17998:	rsb	r5, r5, r1
   1799c:	orr	r6, r6, fp, lsl #16
   179a0:	b	1772c <close_stdout@@Base+0x3930>
   179a4:	mov	r6, r3
   179a8:	b	176a8 <close_stdout@@Base+0x38ac>
   179ac:	mov	r9, r2
   179b0:	b	17778 <close_stdout@@Base+0x397c>
   179b4:	mov	r5, r3
   179b8:	b	177c4 <close_stdout@@Base+0x39c8>
   179bc:	cmp	sl, r1
   179c0:	subhi	fp, fp, #2
   179c4:	addhi	r1, r1, r8
   179c8:	bhi	17888 <close_stdout@@Base+0x3a8c>
   179cc:	b	17884 <close_stdout@@Base+0x3a88>
   179d0:	cmp	r0, r1
   179d4:	subhi	r4, r4, #2
   179d8:	addhi	r1, r1, r8
   179dc:	bhi	1783c <close_stdout@@Base+0x3a40>
   179e0:	b	17838 <close_stdout@@Base+0x3a3c>
   179e4:	mov	fp, r3
   179e8:	b	17944 <close_stdout@@Base+0x3b48>
   179ec:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   179f0:	mov	r7, r0
   179f4:	ldr	r6, [pc, #76]	; 17a48 <close_stdout@@Base+0x3c4c>
   179f8:	mov	r8, r1
   179fc:	ldr	r5, [pc, #72]	; 17a4c <close_stdout@@Base+0x3c50>
   17a00:	mov	r9, r2
   17a04:	add	r6, pc, r6
   17a08:	bl	10fd0 <fdopen@plt-0x20>
   17a0c:	add	r5, pc, r5
   17a10:	rsb	r6, r5, r6
   17a14:	asrs	r6, r6, #2
   17a18:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   17a1c:	sub	r5, r5, #4
   17a20:	mov	r4, #0
   17a24:	add	r4, r4, #1
   17a28:	ldr	r3, [r5, #4]!
   17a2c:	mov	r0, r7
   17a30:	mov	r1, r8
   17a34:	mov	r2, r9
   17a38:	blx	r3
   17a3c:	cmp	r4, r6
   17a40:	bne	17a24 <close_stdout@@Base+0x3c28>
   17a44:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17a48:	andeq	r2, r1, r0, lsr r4
   17a4c:	andeq	r2, r1, r4, lsr #8
   17a50:	bx	lr
   17a54:	ldr	r3, [pc, #28]	; 17a78 <close_stdout@@Base+0x3c7c>
   17a58:	mov	r1, #0
   17a5c:	ldr	r2, [pc, #24]	; 17a7c <close_stdout@@Base+0x3c80>
   17a60:	add	r3, pc, r3
   17a64:	ldr	r3, [r3, r2]
   17a68:	cmp	r3, #0
   17a6c:	ldrne	r2, [r3]
   17a70:	moveq	r2, r3
   17a74:	b	11200 <__cxa_atexit@plt>
   17a78:	muleq	r1, r8, r5
   17a7c:	andeq	r0, r0, ip, lsl r1

Disassembly of section .fini:

00017a80 <.fini>:
   17a80:	push	{r3, lr}
   17a84:	pop	{r3, pc}
