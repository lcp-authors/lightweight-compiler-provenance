
centos-preinstalled/true:     file format elf32-littlearm


Disassembly of section .init:

00010dac <.init>:
   10dac:	push	{r3, lr}
   10db0:	bl	11170 <close@plt+0x158>
   10db4:	pop	{r3, pc}

Disassembly of section .plt:

00010db8 <fdopen@plt-0x14>:
   10db8:	push	{lr}		; (str lr, [sp, #-4]!)
   10dbc:	ldr	lr, [pc, #4]	; 10dc8 <fdopen@plt-0x4>
   10dc0:	add	lr, pc, lr
   10dc4:	ldr	pc, [lr, #8]!
   10dc8:	andeq	r4, r1, r8, lsr r2

00010dcc <fdopen@plt>:
   10dcc:	add	ip, pc, #0, 12
   10dd0:	add	ip, ip, #20, 20	; 0x14000
   10dd4:	ldr	pc, [ip, #568]!	; 0x238

00010dd8 <calloc@plt>:
   10dd8:	add	ip, pc, #0, 12
   10ddc:	add	ip, ip, #20, 20	; 0x14000
   10de0:	ldr	pc, [ip, #560]!	; 0x230

00010de4 <fputs_unlocked@plt>:
   10de4:	add	ip, pc, #0, 12
   10de8:	add	ip, ip, #20, 20	; 0x14000
   10dec:	ldr	pc, [ip, #552]!	; 0x228

00010df0 <raise@plt>:
   10df0:	add	ip, pc, #0, 12
   10df4:	add	ip, ip, #20, 20	; 0x14000
   10df8:	ldr	pc, [ip, #544]!	; 0x220

00010dfc <strcmp@plt>:
   10dfc:	add	ip, pc, #0, 12
   10e00:	add	ip, ip, #20, 20	; 0x14000
   10e04:	ldr	pc, [ip, #536]!	; 0x218

00010e08 <fflush@plt>:
   10e08:	add	ip, pc, #0, 12
   10e0c:	add	ip, ip, #20, 20	; 0x14000
   10e10:	ldr	pc, [ip, #528]!	; 0x210

00010e14 <free@plt>:
   10e14:	add	ip, pc, #0, 12
   10e18:	add	ip, ip, #20, 20	; 0x14000
   10e1c:	ldr	pc, [ip, #520]!	; 0x208

00010e20 <_exit@plt>:
   10e20:	add	ip, pc, #0, 12
   10e24:	add	ip, ip, #20, 20	; 0x14000
   10e28:	ldr	pc, [ip, #512]!	; 0x200

00010e2c <memcpy@plt>:
   10e2c:	add	ip, pc, #0, 12
   10e30:	add	ip, ip, #20, 20	; 0x14000
   10e34:	ldr	pc, [ip, #504]!	; 0x1f8

00010e38 <mbsinit@plt>:
   10e38:	add	ip, pc, #0, 12
   10e3c:	add	ip, ip, #20, 20	; 0x14000
   10e40:	ldr	pc, [ip, #496]!	; 0x1f0

00010e44 <memcmp@plt>:
   10e44:	add	ip, pc, #0, 12
   10e48:	add	ip, ip, #20, 20	; 0x14000
   10e4c:	ldr	pc, [ip, #488]!	; 0x1e8

00010e50 <dcgettext@plt>:
   10e50:	add	ip, pc, #0, 12
   10e54:	add	ip, ip, #20, 20	; 0x14000
   10e58:	ldr	pc, [ip, #480]!	; 0x1e0

00010e5c <__stack_chk_fail@plt>:
   10e5c:	add	ip, pc, #0, 12
   10e60:	add	ip, ip, #20, 20	; 0x14000
   10e64:	ldr	pc, [ip, #472]!	; 0x1d8

00010e68 <realloc@plt>:
   10e68:	add	ip, pc, #0, 12
   10e6c:	add	ip, ip, #20, 20	; 0x14000
   10e70:	ldr	pc, [ip, #464]!	; 0x1d0

00010e74 <textdomain@plt>:
   10e74:	add	ip, pc, #0, 12
   10e78:	add	ip, ip, #20, 20	; 0x14000
   10e7c:	ldr	pc, [ip, #456]!	; 0x1c8

00010e80 <iswprint@plt>:
   10e80:	add	ip, pc, #0, 12
   10e84:	add	ip, ip, #20, 20	; 0x14000
   10e88:	ldr	pc, [ip, #448]!	; 0x1c0

00010e8c <fwrite@plt>:
   10e8c:	add	ip, pc, #0, 12
   10e90:	add	ip, ip, #20, 20	; 0x14000
   10e94:	ldr	pc, [ip, #440]!	; 0x1b8

00010e98 <lseek64@plt>:
   10e98:	add	ip, pc, #0, 12
   10e9c:	add	ip, ip, #20, 20	; 0x14000
   10ea0:	ldr	pc, [ip, #432]!	; 0x1b0

00010ea4 <__ctype_get_mb_cur_max@plt>:
   10ea4:	add	ip, pc, #0, 12
   10ea8:	add	ip, ip, #20, 20	; 0x14000
   10eac:	ldr	pc, [ip, #424]!	; 0x1a8

00010eb0 <strcpy@plt>:
   10eb0:	add	ip, pc, #0, 12
   10eb4:	add	ip, ip, #20, 20	; 0x14000
   10eb8:	ldr	pc, [ip, #416]!	; 0x1a0

00010ebc <__fpending@plt>:
   10ebc:	add	ip, pc, #0, 12
   10ec0:	add	ip, ip, #20, 20	; 0x14000
   10ec4:	ldr	pc, [ip, #408]!	; 0x198

00010ec8 <mbrtowc@plt>:
   10ec8:	add	ip, pc, #0, 12
   10ecc:	add	ip, ip, #20, 20	; 0x14000
   10ed0:	ldr	pc, [ip, #400]!	; 0x190

00010ed4 <error@plt>:
   10ed4:	add	ip, pc, #0, 12
   10ed8:	add	ip, ip, #20, 20	; 0x14000
   10edc:	ldr	pc, [ip, #392]!	; 0x188

00010ee0 <open64@plt>:
   10ee0:	add	ip, pc, #0, 12
   10ee4:	add	ip, ip, #20, 20	; 0x14000
   10ee8:	ldr	pc, [ip, #384]!	; 0x180

00010eec <getenv@plt>:
   10eec:	add	ip, pc, #0, 12
   10ef0:	add	ip, ip, #20, 20	; 0x14000
   10ef4:	ldr	pc, [ip, #376]!	; 0x178

00010ef8 <malloc@plt>:
   10ef8:	add	ip, pc, #0, 12
   10efc:	add	ip, ip, #20, 20	; 0x14000
   10f00:	ldr	pc, [ip, #368]!	; 0x170

00010f04 <__libc_start_main@plt>:
   10f04:	add	ip, pc, #0, 12
   10f08:	add	ip, ip, #20, 20	; 0x14000
   10f0c:	ldr	pc, [ip, #360]!	; 0x168

00010f10 <__freading@plt>:
   10f10:	add	ip, pc, #0, 12
   10f14:	add	ip, ip, #20, 20	; 0x14000
   10f18:	ldr	pc, [ip, #352]!	; 0x160

00010f1c <__gmon_start__@plt>:
   10f1c:	add	ip, pc, #0, 12
   10f20:	add	ip, ip, #20, 20	; 0x14000
   10f24:	ldr	pc, [ip, #344]!	; 0x158

00010f28 <__ctype_b_loc@plt>:
   10f28:	add	ip, pc, #0, 12
   10f2c:	add	ip, ip, #20, 20	; 0x14000
   10f30:	ldr	pc, [ip, #336]!	; 0x150

00010f34 <exit@plt>:
   10f34:	add	ip, pc, #0, 12
   10f38:	add	ip, ip, #20, 20	; 0x14000
   10f3c:	ldr	pc, [ip, #328]!	; 0x148

00010f40 <strlen@plt>:
   10f40:	add	ip, pc, #0, 12
   10f44:	add	ip, ip, #20, 20	; 0x14000
   10f48:	ldr	pc, [ip, #320]!	; 0x140

00010f4c <ungetc@plt>:
   10f4c:	add	ip, pc, #0, 12
   10f50:	add	ip, ip, #20, 20	; 0x14000
   10f54:	ldr	pc, [ip, #312]!	; 0x138

00010f58 <__errno_location@plt>:
   10f58:	add	ip, pc, #0, 12
   10f5c:	add	ip, ip, #20, 20	; 0x14000
   10f60:	ldr	pc, [ip, #304]!	; 0x130

00010f64 <__cxa_atexit@plt>:
   10f64:	add	ip, pc, #0, 12
   10f68:	add	ip, ip, #20, 20	; 0x14000
   10f6c:	ldr	pc, [ip, #296]!	; 0x128

00010f70 <memset@plt>:
   10f70:	add	ip, pc, #0, 12
   10f74:	add	ip, ip, #20, 20	; 0x14000
   10f78:	ldr	pc, [ip, #288]!	; 0x120

00010f7c <fscanf@plt>:
   10f7c:	add	ip, pc, #0, 12
   10f80:	add	ip, ip, #20, 20	; 0x14000
   10f84:	ldr	pc, [ip, #280]!	; 0x118

00010f88 <__printf_chk@plt>:
   10f88:	add	ip, pc, #0, 12
   10f8c:	add	ip, ip, #20, 20	; 0x14000
   10f90:	ldr	pc, [ip, #272]!	; 0x110

00010f94 <fileno@plt>:
   10f94:	add	ip, pc, #0, 12
   10f98:	add	ip, ip, #20, 20	; 0x14000
   10f9c:	ldr	pc, [ip, #264]!	; 0x108

00010fa0 <__fprintf_chk@plt>:
   10fa0:	add	ip, pc, #0, 12
   10fa4:	add	ip, ip, #20, 20	; 0x14000
   10fa8:	ldr	pc, [ip, #256]!	; 0x100

00010fac <fclose@plt>:
   10fac:	add	ip, pc, #0, 12
   10fb0:	add	ip, ip, #20, 20	; 0x14000
   10fb4:	ldr	pc, [ip, #248]!	; 0xf8

00010fb8 <fseeko64@plt>:
   10fb8:	add	ip, pc, #0, 12
   10fbc:	add	ip, ip, #20, 20	; 0x14000
   10fc0:	ldr	pc, [ip, #240]!	; 0xf0

00010fc4 <__uflow@plt>:
   10fc4:	add	ip, pc, #0, 12
   10fc8:	add	ip, ip, #20, 20	; 0x14000
   10fcc:	ldr	pc, [ip, #232]!	; 0xe8

00010fd0 <setlocale@plt>:
   10fd0:	add	ip, pc, #0, 12
   10fd4:	add	ip, ip, #20, 20	; 0x14000
   10fd8:	ldr	pc, [ip, #224]!	; 0xe0

00010fdc <strrchr@plt>:
   10fdc:	add	ip, pc, #0, 12
   10fe0:	add	ip, ip, #20, 20	; 0x14000
   10fe4:	ldr	pc, [ip, #216]!	; 0xd8

00010fe8 <nl_langinfo@plt>:
   10fe8:	add	ip, pc, #0, 12
   10fec:	add	ip, ip, #20, 20	; 0x14000
   10ff0:	ldr	pc, [ip, #208]!	; 0xd0

00010ff4 <bindtextdomain@plt>:
   10ff4:	add	ip, pc, #0, 12
   10ff8:	add	ip, ip, #20, 20	; 0x14000
   10ffc:	ldr	pc, [ip, #200]!	; 0xc8

00011000 <strncmp@plt>:
   11000:	add	ip, pc, #0, 12
   11004:	add	ip, ip, #20, 20	; 0x14000
   11008:	ldr	pc, [ip, #192]!	; 0xc0

0001100c <abort@plt>:
   1100c:	add	ip, pc, #0, 12
   11010:	add	ip, ip, #20, 20	; 0x14000
   11014:	ldr	pc, [ip, #184]!	; 0xb8

00011018 <close@plt>:
   11018:	add	ip, pc, #0, 12
   1101c:	add	ip, ip, #20, 20	; 0x14000
   11020:	ldr	pc, [ip, #176]!	; 0xb0

Disassembly of section .text:

00011024 <close_stdout@@Base-0x440>:
   11024:	push	{r4, r5, r6, lr}
   11028:	cmp	r0, #2
   1102c:	ldr	r4, [pc, #208]	; 11104 <close@plt+0xec>
   11030:	sub	sp, sp, #8
   11034:	mov	r5, r1
   11038:	add	r4, pc, r4
   1103c:	beq	11048 <close@plt+0x30>
   11040:	mov	r0, #0
   11044:	bl	10f34 <exit@plt>
   11048:	ldr	r0, [r1]
   1104c:	bl	11620 <close_stdout@@Base+0x1bc>
   11050:	ldr	r1, [pc, #176]	; 11108 <close@plt+0xf0>
   11054:	ldr	r6, [pc, #176]	; 1110c <close@plt+0xf4>
   11058:	mov	r0, #6
   1105c:	add	r1, pc, r1
   11060:	bl	10fd0 <setlocale@plt>
   11064:	add	r6, pc, r6
   11068:	ldr	r1, [pc, #160]	; 11110 <close@plt+0xf8>
   1106c:	mov	r0, r6
   11070:	add	r1, pc, r1
   11074:	bl	10ff4 <bindtextdomain@plt>
   11078:	mov	r0, r6
   1107c:	bl	10e74 <textdomain@plt>
   11080:	ldr	r3, [pc, #140]	; 11114 <close@plt+0xfc>
   11084:	ldr	r0, [r4, r3]
   11088:	bl	13f54 <close_stdout@@Base+0x2af0>
   1108c:	ldr	r5, [r5, #4]
   11090:	ldr	r1, [pc, #128]	; 11118 <close@plt+0x100>
   11094:	mov	r0, r5
   11098:	add	r1, pc, r1
   1109c:	bl	10dfc <strcmp@plt>
   110a0:	cmp	r0, #0
   110a4:	beq	11100 <close@plt+0xe8>
   110a8:	ldr	r1, [pc, #108]	; 1111c <close@plt+0x104>
   110ac:	mov	r0, r5
   110b0:	add	r1, pc, r1
   110b4:	bl	10dfc <strcmp@plt>
   110b8:	subs	r2, r0, #0
   110bc:	bne	11040 <close@plt+0x28>
   110c0:	ldr	r1, [pc, #88]	; 11120 <close@plt+0x108>
   110c4:	ldr	r3, [pc, #88]	; 11124 <close@plt+0x10c>
   110c8:	ldr	ip, [pc, #88]	; 11128 <close@plt+0x110>
   110cc:	ldr	r0, [r4, r1]
   110d0:	ldr	r3, [r4, r3]
   110d4:	add	ip, pc, ip
   110d8:	ldr	r1, [pc, #76]	; 1112c <close@plt+0x114>
   110dc:	ldr	r0, [r0]
   110e0:	ldr	r3, [r3]
   110e4:	add	r1, pc, r1
   110e8:	str	r2, [sp, #4]
   110ec:	ldr	r2, [pc, #60]	; 11130 <close@plt+0x118>
   110f0:	str	ip, [sp]
   110f4:	add	r2, pc, r2
   110f8:	bl	1330c <close_stdout@@Base+0x1ea8>
   110fc:	b	11040 <close@plt+0x28>
   11100:	bl	11268 <close@plt+0x250>
   11104:	andeq	r3, r1, r0, asr #31
   11108:	muleq	r0, ip, pc	; <UNPREDICTABLE>
   1110c:	andeq	r3, r0, r4, ror #1
   11110:	muleq	r0, ip, r1
   11114:	andeq	r0, r0, r4, ror #1
   11118:	andeq	r3, r0, r8, lsl #3
   1111c:	andeq	r3, r0, r8, ror r1
   11120:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11124:	ldrdeq	r0, [r0], -ip
   11128:	andeq	r3, r0, r0, ror #2
   1112c:	andeq	r3, r0, r0, asr #32
   11130:	andeq	r3, r0, r0, asr r0
   11134:	mov	fp, #0
   11138:	mov	lr, #0
   1113c:	pop	{r1}		; (ldr r1, [sp], #4)
   11140:	mov	r2, sp
   11144:	push	{r2}		; (str r2, [sp, #-4]!)
   11148:	push	{r0}		; (str r0, [sp, #-4]!)
   1114c:	ldr	ip, [pc, #16]	; 11164 <close@plt+0x14c>
   11150:	push	{ip}		; (str ip, [sp, #-4]!)
   11154:	ldr	r0, [pc, #12]	; 11168 <close@plt+0x150>
   11158:	ldr	r3, [pc, #12]	; 1116c <close@plt+0x154>
   1115c:	bl	10f04 <__libc_start_main@plt>
   11160:	bl	1100c <abort@plt>
   11164:	andeq	r3, r1, r0, asr pc
   11168:	andeq	r1, r1, r4, lsr #32
   1116c:	andeq	r3, r1, ip, ror #29
   11170:	ldr	r3, [pc, #20]	; 1118c <close@plt+0x174>
   11174:	ldr	r2, [pc, #20]	; 11190 <close@plt+0x178>
   11178:	add	r3, pc, r3
   1117c:	ldr	r2, [r3, r2]
   11180:	cmp	r2, #0
   11184:	bxeq	lr
   11188:	b	10f1c <__gmon_start__@plt>
   1118c:	andeq	r3, r1, r0, lsl #29
   11190:	andeq	r0, r0, r8, ror #1
   11194:	push	{r3, lr}
   11198:	movw	r0, #20820	; 0x5154
   1119c:	ldr	r3, [pc, #36]	; 111c8 <close@plt+0x1b0>
   111a0:	movt	r0, #2
   111a4:	rsb	r3, r0, r3
   111a8:	cmp	r3, #6
   111ac:	popls	{r3, pc}
   111b0:	movw	r3, #0
   111b4:	movt	r3, #0
   111b8:	cmp	r3, #0
   111bc:	popeq	{r3, pc}
   111c0:	blx	r3
   111c4:	pop	{r3, pc}
   111c8:	andeq	r5, r2, r7, asr r1
   111cc:	push	{r3, lr}
   111d0:	movw	r0, #20820	; 0x5154
   111d4:	movw	r3, #20820	; 0x5154
   111d8:	movt	r0, #2
   111dc:	movt	r3, #2
   111e0:	rsb	r3, r0, r3
   111e4:	asr	r3, r3, #2
   111e8:	add	r3, r3, r3, lsr #31
   111ec:	asrs	r1, r3, #1
   111f0:	popeq	{r3, pc}
   111f4:	movw	r2, #0
   111f8:	movt	r2, #0
   111fc:	cmp	r2, #0
   11200:	popeq	{r3, pc}
   11204:	blx	r2
   11208:	pop	{r3, pc}
   1120c:	push	{r4, lr}
   11210:	movw	r4, #20820	; 0x5154
   11214:	movt	r4, #2
   11218:	ldrb	r3, [r4]
   1121c:	cmp	r3, #0
   11220:	popne	{r4, pc}
   11224:	bl	11194 <close@plt+0x17c>
   11228:	mov	r3, #1
   1122c:	strb	r3, [r4]
   11230:	pop	{r4, pc}
   11234:	movw	r0, #20192	; 0x4ee0
   11238:	movt	r0, #2
   1123c:	push	{r3, lr}
   11240:	ldr	r3, [r0]
   11244:	cmp	r3, #0
   11248:	beq	11260 <close@plt+0x248>
   1124c:	movw	r3, #0
   11250:	movt	r3, #0
   11254:	cmp	r3, #0
   11258:	beq	11260 <close@plt+0x248>
   1125c:	blx	r3
   11260:	pop	{r3, lr}
   11264:	b	111cc <close@plt+0x1b4>
   11268:	ldr	r1, [pc, #396]	; 113fc <close@plt+0x3e4>
   1126c:	mov	r2, #5
   11270:	push	{r4, r5, r6, lr}
   11274:	add	r1, pc, r1
   11278:	mov	r6, r0
   1127c:	mov	r0, #0
   11280:	bl	10e50 <dcgettext@plt>
   11284:	ldr	r4, [pc, #372]	; 11400 <close@plt+0x3e8>
   11288:	ldr	r3, [pc, #372]	; 11404 <close@plt+0x3ec>
   1128c:	add	r4, pc, r4
   11290:	ldr	r5, [r4, r3]
   11294:	ldr	r2, [r5]
   11298:	mov	r3, r2
   1129c:	mov	r1, r0
   112a0:	mov	r0, #1
   112a4:	bl	10f88 <__printf_chk@plt>
   112a8:	ldr	r1, [pc, #344]	; 11408 <close@plt+0x3f0>
   112ac:	mov	r2, #5
   112b0:	mov	r0, #0
   112b4:	add	r1, pc, r1
   112b8:	bl	10e50 <dcgettext@plt>
   112bc:	ldr	r1, [pc, #328]	; 1140c <close@plt+0x3f4>
   112c0:	add	r1, pc, r1
   112c4:	mov	r2, r0
   112c8:	mov	r0, #1
   112cc:	bl	10f88 <__printf_chk@plt>
   112d0:	ldr	r1, [pc, #312]	; 11410 <close@plt+0x3f8>
   112d4:	mov	r2, #5
   112d8:	mov	r0, #0
   112dc:	add	r1, pc, r1
   112e0:	bl	10e50 <dcgettext@plt>
   112e4:	ldr	r3, [pc, #296]	; 11414 <close@plt+0x3fc>
   112e8:	ldr	r4, [r4, r3]
   112ec:	ldr	r1, [r4]
   112f0:	bl	10de4 <fputs_unlocked@plt>
   112f4:	ldr	r1, [pc, #284]	; 11418 <close@plt+0x400>
   112f8:	mov	r2, #5
   112fc:	mov	r0, #0
   11300:	add	r1, pc, r1
   11304:	bl	10e50 <dcgettext@plt>
   11308:	ldr	r1, [r4]
   1130c:	bl	10de4 <fputs_unlocked@plt>
   11310:	ldr	r1, [pc, #260]	; 1141c <close@plt+0x404>
   11314:	mov	r2, #5
   11318:	mov	r0, #0
   1131c:	add	r1, pc, r1
   11320:	bl	10e50 <dcgettext@plt>
   11324:	ldr	r2, [pc, #244]	; 11420 <close@plt+0x408>
   11328:	add	r2, pc, r2
   1132c:	mov	r1, r0
   11330:	mov	r0, #1
   11334:	bl	10f88 <__printf_chk@plt>
   11338:	ldr	r1, [pc, #228]	; 11424 <close@plt+0x40c>
   1133c:	mov	r2, #5
   11340:	mov	r0, #0
   11344:	add	r1, pc, r1
   11348:	bl	10e50 <dcgettext@plt>
   1134c:	ldr	r2, [pc, #212]	; 11428 <close@plt+0x410>
   11350:	ldr	r3, [pc, #212]	; 1142c <close@plt+0x414>
   11354:	add	r2, pc, r2
   11358:	add	r3, pc, r3
   1135c:	mov	r1, r0
   11360:	mov	r0, #1
   11364:	bl	10f88 <__printf_chk@plt>
   11368:	mov	r0, #5
   1136c:	mov	r1, #0
   11370:	bl	10fd0 <setlocale@plt>
   11374:	cmp	r0, #0
   11378:	beq	113c4 <close@plt+0x3ac>
   1137c:	ldr	r1, [pc, #172]	; 11430 <close@plt+0x418>
   11380:	mov	r2, #3
   11384:	add	r1, pc, r1
   11388:	bl	11000 <strncmp@plt>
   1138c:	cmp	r0, #0
   11390:	beq	113c4 <close@plt+0x3ac>
   11394:	ldr	r1, [pc, #152]	; 11434 <close@plt+0x41c>
   11398:	mov	r2, #5
   1139c:	mov	r0, #0
   113a0:	add	r1, pc, r1
   113a4:	bl	10e50 <dcgettext@plt>
   113a8:	mov	r4, r0
   113ac:	ldr	r0, [r5]
   113b0:	bl	1157c <close_stdout@@Base+0x118>
   113b4:	mov	r1, r4
   113b8:	mov	r2, r0
   113bc:	mov	r0, #1
   113c0:	bl	10f88 <__printf_chk@plt>
   113c4:	ldr	r1, [pc, #108]	; 11438 <close@plt+0x420>
   113c8:	mov	r2, #5
   113cc:	mov	r0, #0
   113d0:	add	r1, pc, r1
   113d4:	bl	10e50 <dcgettext@plt>
   113d8:	mov	r4, r0
   113dc:	ldr	r0, [r5]
   113e0:	bl	1157c <close_stdout@@Base+0x118>
   113e4:	mov	r1, r4
   113e8:	mov	r2, r0
   113ec:	mov	r0, #1
   113f0:	bl	10f88 <__printf_chk@plt>
   113f4:	mov	r0, r6
   113f8:	bl	10f34 <exit@plt>
   113fc:	andeq	r2, r0, r4, lsl sp
   11400:	andeq	r3, r1, ip, ror #26
   11404:	strdeq	r0, [r0], -ip
   11408:	andeq	r2, r0, r4, lsl sp
   1140c:	andeq	r2, r0, r4, lsr sp
   11410:	andeq	r2, r0, r0, lsr #26
   11414:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11418:	andeq	r2, r0, ip, lsr #26
   1141c:	andeq	r2, r0, r8, asr #26
   11420:	strdeq	r2, [r0], -ip
   11424:	andeq	r2, r0, r8, ror #27
   11428:	strdeq	r2, [r0], -r0
   1142c:	strdeq	r2, [r0], -ip
   11430:	strdeq	r2, [r0], -r8
   11434:	andeq	r2, r0, r0, ror #27
   11438:	strdeq	r2, [r0], -r8
   1143c:	ldr	r3, [pc, #8]	; 1144c <close@plt+0x434>
   11440:	add	r3, pc, r3
   11444:	str	r0, [r3]
   11448:	bx	lr
   1144c:	andeq	r3, r1, r0, lsl sp
   11450:	ldr	r3, [pc, #8]	; 11460 <close@plt+0x448>
   11454:	add	r3, pc, r3
   11458:	strb	r0, [r3, #4]
   1145c:	bx	lr
   11460:	strdeq	r3, [r1], -ip

00011464 <close_stdout@@Base>:
   11464:	push	{r4, r5, r6, r7, lr}
   11468:	sub	sp, sp, #12
   1146c:	ldr	r4, [pc, #228]	; 11558 <close_stdout@@Base+0xf4>
   11470:	ldr	r3, [pc, #228]	; 1155c <close_stdout@@Base+0xf8>
   11474:	add	r4, pc, r4
   11478:	ldr	r3, [r4, r3]
   1147c:	ldr	r0, [r3]
   11480:	bl	13688 <close_stdout@@Base+0x2224>
   11484:	cmp	r0, #0
   11488:	beq	114b0 <close_stdout@@Base+0x4c>
   1148c:	ldr	r3, [pc, #204]	; 11560 <close_stdout@@Base+0xfc>
   11490:	add	r3, pc, r3
   11494:	ldrb	r3, [r3, #4]
   11498:	cmp	r3, #0
   1149c:	beq	114d0 <close_stdout@@Base+0x6c>
   114a0:	bl	10f58 <__errno_location@plt>
   114a4:	ldr	r3, [r0]
   114a8:	cmp	r3, #32
   114ac:	bne	114d0 <close_stdout@@Base+0x6c>
   114b0:	ldr	r3, [pc, #172]	; 11564 <close_stdout@@Base+0x100>
   114b4:	ldr	r3, [r4, r3]
   114b8:	ldr	r0, [r3]
   114bc:	bl	13688 <close_stdout@@Base+0x2224>
   114c0:	cmp	r0, #0
   114c4:	bne	11524 <close_stdout@@Base+0xc0>
   114c8:	add	sp, sp, #12
   114cc:	pop	{r4, r5, r6, r7, pc}
   114d0:	ldr	r1, [pc, #144]	; 11568 <close_stdout@@Base+0x104>
   114d4:	mov	r0, #0
   114d8:	mov	r2, #5
   114dc:	add	r1, pc, r1
   114e0:	bl	10e50 <dcgettext@plt>
   114e4:	ldr	r3, [pc, #128]	; 1156c <close_stdout@@Base+0x108>
   114e8:	ldr	r5, [pc, r3]
   114ec:	cmp	r5, #0
   114f0:	mov	r6, r0
   114f4:	beq	11534 <close_stdout@@Base+0xd0>
   114f8:	bl	10f58 <__errno_location@plt>
   114fc:	ldr	r7, [r0]
   11500:	mov	r0, r5
   11504:	bl	12d1c <close_stdout@@Base+0x18b8>
   11508:	ldr	r2, [pc, #96]	; 11570 <close_stdout@@Base+0x10c>
   1150c:	str	r6, [sp]
   11510:	mov	r1, r7
   11514:	add	r2, pc, r2
   11518:	mov	r3, r0
   1151c:	mov	r0, #0
   11520:	bl	10ed4 <error@plt>
   11524:	ldr	r3, [pc, #72]	; 11574 <close_stdout@@Base+0x110>
   11528:	ldr	r3, [r4, r3]
   1152c:	ldr	r0, [r3]
   11530:	bl	10e20 <_exit@plt>
   11534:	bl	10f58 <__errno_location@plt>
   11538:	ldr	r2, [pc, #56]	; 11578 <close_stdout@@Base+0x114>
   1153c:	add	r2, pc, r2
   11540:	mov	r3, r0
   11544:	mov	r0, r5
   11548:	ldr	r1, [r3]
   1154c:	mov	r3, r6
   11550:	bl	10ed4 <error@plt>
   11554:	b	11524 <close_stdout@@Base+0xc0>
   11558:	andeq	r3, r1, r4, lsl #23
   1155c:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   11560:	andeq	r3, r1, r0, asr #25
   11564:	andeq	r0, r0, r0, ror #1
   11568:	andeq	r2, r0, r0, ror sp
   1156c:	andeq	r3, r1, r8, ror #24
   11570:	andeq	r2, r0, r4, asr #26
   11574:	strdeq	r0, [r0], -r4
   11578:	andeq	r2, r0, r0, lsr #26
   1157c:	ldrb	r3, [r0]
   11580:	cmp	r3, #47	; 0x2f
   11584:	bne	115a0 <close_stdout@@Base+0x13c>
   11588:	add	r2, r0, #1
   1158c:	mov	r0, r2
   11590:	add	r2, r2, #1
   11594:	ldrb	r3, [r0]
   11598:	cmp	r3, #47	; 0x2f
   1159c:	beq	1158c <close_stdout@@Base+0x128>
   115a0:	cmp	r3, #0
   115a4:	bxeq	lr
   115a8:	mov	r2, r0
   115ac:	mov	r1, #0
   115b0:	cmp	r3, #47	; 0x2f
   115b4:	moveq	r1, #1
   115b8:	beq	115c8 <close_stdout@@Base+0x164>
   115bc:	cmp	r1, #0
   115c0:	movne	r0, r2
   115c4:	movne	r1, #0
   115c8:	ldrb	r3, [r2, #1]!
   115cc:	cmp	r3, #0
   115d0:	bne	115b0 <close_stdout@@Base+0x14c>
   115d4:	bx	lr
   115d8:	push	{r4, lr}
   115dc:	mov	r4, r0
   115e0:	bl	10f40 <strlen@plt>
   115e4:	cmp	r0, #1
   115e8:	popls	{r4, pc}
   115ec:	sub	r3, r0, #1
   115f0:	ldrb	r2, [r4, r3]
   115f4:	cmp	r2, #47	; 0x2f
   115f8:	popne	{r4, pc}
   115fc:	mov	r0, r3
   11600:	cmp	r0, #1
   11604:	sub	r3, r3, #1
   11608:	beq	1161c <close_stdout@@Base+0x1b8>
   1160c:	ldrb	r2, [r4, r3]
   11610:	cmp	r2, #47	; 0x2f
   11614:	popne	{r4, pc}
   11618:	b	115fc <close_stdout@@Base+0x198>
   1161c:	pop	{r4, pc}
   11620:	push	{r3, r4, r5, r6, r7, lr}
   11624:	subs	r4, r0, #0
   11628:	ldr	r5, [pc, #172]	; 116dc <close_stdout@@Base+0x278>
   1162c:	add	r5, pc, r5
   11630:	beq	116b8 <close_stdout@@Base+0x254>
   11634:	mov	r1, #47	; 0x2f
   11638:	bl	10fdc <strrchr@plt>
   1163c:	subs	r6, r0, #0
   11640:	beq	1169c <close_stdout@@Base+0x238>
   11644:	add	r7, r6, #1
   11648:	rsb	r3, r4, r7
   1164c:	cmp	r3, #6
   11650:	ble	1169c <close_stdout@@Base+0x238>
   11654:	ldr	r1, [pc, #132]	; 116e0 <close_stdout@@Base+0x27c>
   11658:	sub	r0, r6, #6
   1165c:	mov	r2, #7
   11660:	add	r1, pc, r1
   11664:	bl	11000 <strncmp@plt>
   11668:	cmp	r0, #0
   1166c:	bne	1169c <close_stdout@@Base+0x238>
   11670:	ldr	r1, [pc, #108]	; 116e4 <close_stdout@@Base+0x280>
   11674:	mov	r0, r7
   11678:	mov	r2, #3
   1167c:	add	r1, pc, r1
   11680:	bl	11000 <strncmp@plt>
   11684:	cmp	r0, #0
   11688:	movne	r4, r7
   1168c:	ldreq	r3, [pc, #84]	; 116e8 <close_stdout@@Base+0x284>
   11690:	addeq	r4, r6, #4
   11694:	ldreq	r3, [r5, r3]
   11698:	streq	r4, [r3]
   1169c:	ldr	r2, [pc, #72]	; 116ec <close_stdout@@Base+0x288>
   116a0:	ldr	r3, [pc, #72]	; 116f0 <close_stdout@@Base+0x28c>
   116a4:	ldr	r2, [r5, r2]
   116a8:	str	r4, [r2]
   116ac:	ldr	r3, [r5, r3]
   116b0:	str	r4, [r3]
   116b4:	pop	{r3, r4, r5, r6, r7, pc}
   116b8:	ldr	r3, [pc, #52]	; 116f4 <close_stdout@@Base+0x290>
   116bc:	mov	r1, #1
   116c0:	ldr	r0, [pc, #48]	; 116f8 <close_stdout@@Base+0x294>
   116c4:	mov	r2, #55	; 0x37
   116c8:	ldr	r3, [r5, r3]
   116cc:	add	r0, pc, r0
   116d0:	ldr	r3, [r3]
   116d4:	bl	10e8c <fwrite@plt>
   116d8:	bl	1100c <abort@plt>
   116dc:	andeq	r3, r1, ip, asr #19
   116e0:	andeq	r2, r0, r8, lsr ip
   116e4:	andeq	r2, r0, r4, lsr #24
   116e8:	andeq	r0, r0, r4, lsl #2
   116ec:	strdeq	r0, [r0], -ip
   116f0:	strdeq	r0, [r0], -r8
   116f4:	andeq	r0, r0, r0, ror #1
   116f8:	muleq	r0, r4, fp
   116fc:	push	{r3, lr}
   11700:	mov	r3, r0
   11704:	mov	r2, #0
   11708:	cmp	r1, #8
   1170c:	str	r2, [r3], #4
   11710:	add	r3, r3, #4
   11714:	str	r2, [r0, #4]
   11718:	str	r2, [r3], #4
   1171c:	str	r2, [r3], #4
   11720:	str	r2, [r3], #4
   11724:	str	r2, [r3], #4
   11728:	str	r2, [r3], #4
   1172c:	str	r2, [r3], #4
   11730:	str	r2, [r3], #4
   11734:	str	r2, [r3], #4
   11738:	str	r2, [r3], #4
   1173c:	str	r2, [r3]
   11740:	beq	1174c <close_stdout@@Base+0x2e8>
   11744:	str	r1, [r0]
   11748:	pop	{r3, pc}
   1174c:	bl	1100c <abort@plt>
   11750:	push	{r4, r5, r6, lr}
   11754:	mov	r4, r0
   11758:	mov	r6, r1
   1175c:	mov	r0, #0
   11760:	mov	r1, r4
   11764:	mov	r2, #5
   11768:	bl	10e50 <dcgettext@plt>
   1176c:	cmp	r0, r4
   11770:	mov	r5, r0
   11774:	beq	1177c <close_stdout@@Base+0x318>
   11778:	pop	{r4, r5, r6, pc}
   1177c:	bl	13708 <close_stdout@@Base+0x22a4>
   11780:	ldrb	r3, [r0]
   11784:	bic	r3, r3, #32
   11788:	cmp	r3, #85	; 0x55
   1178c:	bne	11800 <close_stdout@@Base+0x39c>
   11790:	ldrb	r3, [r0, #1]
   11794:	bic	r3, r3, #32
   11798:	cmp	r3, #84	; 0x54
   1179c:	bne	117ec <close_stdout@@Base+0x388>
   117a0:	ldrb	r3, [r0, #2]
   117a4:	bic	r3, r3, #32
   117a8:	cmp	r3, #70	; 0x46
   117ac:	bne	117ec <close_stdout@@Base+0x388>
   117b0:	ldrb	r3, [r0, #3]
   117b4:	cmp	r3, #45	; 0x2d
   117b8:	bne	117ec <close_stdout@@Base+0x388>
   117bc:	ldrb	r3, [r0, #4]
   117c0:	cmp	r3, #56	; 0x38
   117c4:	bne	117ec <close_stdout@@Base+0x388>
   117c8:	ldrb	r3, [r0, #5]
   117cc:	cmp	r3, #0
   117d0:	bne	117ec <close_stdout@@Base+0x388>
   117d4:	ldrb	r3, [r5]
   117d8:	cmp	r3, #96	; 0x60
   117dc:	beq	11878 <close_stdout@@Base+0x414>
   117e0:	ldr	r0, [pc, #180]	; 1189c <close_stdout@@Base+0x438>
   117e4:	add	r0, pc, r0
   117e8:	pop	{r4, r5, r6, pc}
   117ec:	cmp	r6, #7
   117f0:	beq	11884 <close_stdout@@Base+0x420>
   117f4:	ldr	r0, [pc, #164]	; 118a0 <close_stdout@@Base+0x43c>
   117f8:	add	r0, pc, r0
   117fc:	pop	{r4, r5, r6, pc}
   11800:	cmp	r3, #71	; 0x47
   11804:	bne	117ec <close_stdout@@Base+0x388>
   11808:	ldrb	r3, [r0, #1]
   1180c:	bic	r3, r3, #32
   11810:	cmp	r3, #66	; 0x42
   11814:	bne	117ec <close_stdout@@Base+0x388>
   11818:	ldrb	r3, [r0, #2]
   1181c:	cmp	r3, #49	; 0x31
   11820:	bne	117ec <close_stdout@@Base+0x388>
   11824:	ldrb	r3, [r0, #3]
   11828:	cmp	r3, #56	; 0x38
   1182c:	bne	117ec <close_stdout@@Base+0x388>
   11830:	ldrb	r3, [r0, #4]
   11834:	cmp	r3, #48	; 0x30
   11838:	bne	117ec <close_stdout@@Base+0x388>
   1183c:	ldrb	r3, [r0, #5]
   11840:	cmp	r3, #51	; 0x33
   11844:	bne	117ec <close_stdout@@Base+0x388>
   11848:	ldrb	r3, [r0, #6]
   1184c:	cmp	r3, #48	; 0x30
   11850:	bne	117ec <close_stdout@@Base+0x388>
   11854:	ldrb	r3, [r0, #7]
   11858:	cmp	r3, #0
   1185c:	bne	117ec <close_stdout@@Base+0x388>
   11860:	ldrb	r3, [r5]
   11864:	cmp	r3, #96	; 0x60
   11868:	beq	11890 <close_stdout@@Base+0x42c>
   1186c:	ldr	r0, [pc, #48]	; 118a4 <close_stdout@@Base+0x440>
   11870:	add	r0, pc, r0
   11874:	pop	{r4, r5, r6, pc}
   11878:	ldr	r0, [pc, #40]	; 118a8 <close_stdout@@Base+0x444>
   1187c:	add	r0, pc, r0
   11880:	pop	{r4, r5, r6, pc}
   11884:	ldr	r0, [pc, #32]	; 118ac <close_stdout@@Base+0x448>
   11888:	add	r0, pc, r0
   1188c:	pop	{r4, r5, r6, pc}
   11890:	ldr	r0, [pc, #24]	; 118b0 <close_stdout@@Base+0x44c>
   11894:	add	r0, pc, r0
   11898:	pop	{r4, r5, r6, pc}
   1189c:	andeq	r2, r0, r0, ror #21
   118a0:	ldrdeq	r2, [r0], -r4
   118a4:	andeq	r2, r0, r8, asr sl
   118a8:	andeq	r2, r0, ip, asr sl
   118ac:	andeq	r2, r0, r8, asr #20
   118b0:	andeq	r2, r0, r0, asr #20
   118b4:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   118b8:	sub	sp, sp, #124	; 0x7c
   118bc:	ldr	ip, [pc, #3304]	; 125ac <close_stdout@@Base+0x1148>
   118c0:	mov	sl, r1
   118c4:	str	r0, [sp, #40]	; 0x28
   118c8:	mov	r8, r3
   118cc:	ldr	r0, [pc, #3292]	; 125b0 <close_stdout@@Base+0x114c>
   118d0:	add	ip, pc, ip
   118d4:	str	r2, [sp, #32]
   118d8:	ldr	r1, [sp, #164]	; 0xa4
   118dc:	mov	r3, ip
   118e0:	ldr	r0, [ip, r0]
   118e4:	ldr	r2, [sp, #172]	; 0xac
   118e8:	ubfx	r1, r1, #1, #1
   118ec:	str	r1, [sp, #36]	; 0x24
   118f0:	str	r0, [sp, #56]	; 0x38
   118f4:	ldr	r0, [sp, #168]	; 0xa8
   118f8:	ldr	r1, [sp, #176]	; 0xb0
   118fc:	str	r2, [sp, #72]	; 0x48
   11900:	str	r0, [sp, #48]	; 0x30
   11904:	ldr	r0, [sp, #56]	; 0x38
   11908:	str	r1, [sp, #68]	; 0x44
   1190c:	ldr	r3, [r0]
   11910:	str	r3, [sp, #116]	; 0x74
   11914:	bl	10ea4 <__ctype_get_mb_cur_max@plt>
   11918:	ldr	r2, [sp, #160]	; 0xa0
   1191c:	str	r0, [sp, #64]	; 0x40
   11920:	cmp	r2, #8
   11924:	addls	pc, pc, r2, lsl #2
   11928:	b	12488 <close_stdout@@Base+0x1024>
   1192c:	b	11950 <close_stdout@@Base+0x4ec>
   11930:	b	121a0 <close_stdout@@Base+0xd3c>
   11934:	b	121d0 <close_stdout@@Base+0xd6c>
   11938:	b	12080 <close_stdout@@Base+0xc1c>
   1193c:	b	120c0 <close_stdout@@Base+0xc5c>
   11940:	b	120ec <close_stdout@@Base+0xc88>
   11944:	b	1210c <close_stdout@@Base+0xca8>
   11948:	b	1210c <close_stdout@@Base+0xca8>
   1194c:	b	1210c <close_stdout@@Base+0xca8>
   11950:	mov	r2, #0
   11954:	str	r2, [sp, #36]	; 0x24
   11958:	mov	r9, r2
   1195c:	str	r2, [sp, #24]
   11960:	str	r2, [sp, #28]
   11964:	str	r2, [sp, #52]	; 0x34
   11968:	ldr	r0, [sp, #36]	; 0x24
   1196c:	mov	fp, #0
   11970:	ldr	r1, [sp, #24]
   11974:	eor	r2, r0, #1
   11978:	eor	r3, r1, #1
   1197c:	and	r3, r2, r3
   11980:	and	r2, r1, r0
   11984:	str	r3, [sp, #44]	; 0x2c
   11988:	str	r2, [sp, #76]	; 0x4c
   1198c:	cmn	r8, #1
   11990:	beq	11d10 <close_stdout@@Base+0x8ac>
   11994:	subs	r3, fp, r8
   11998:	movne	r3, #1
   1199c:	cmp	r3, #0
   119a0:	beq	11d28 <close_stdout@@Base+0x8c4>
   119a4:	ldr	r3, [sp, #28]
   119a8:	ldr	r0, [sp, #24]
   119ac:	adds	r7, r3, #0
   119b0:	movne	r7, #1
   119b4:	ands	r6, r7, r0
   119b8:	bne	12214 <close_stdout@@Base+0xdb0>
   119bc:	ldr	r1, [sp, #32]
   119c0:	add	r5, r1, fp
   119c4:	ldrb	r4, [r5]
   119c8:	cmp	r4, #126	; 0x7e
   119cc:	addls	pc, pc, r4, lsl #2
   119d0:	b	11f94 <close_stdout@@Base+0xb30>
   119d4:	b	11ea0 <close_stdout@@Base+0xa3c>
   119d8:	b	11f94 <close_stdout@@Base+0xb30>
   119dc:	b	11f94 <close_stdout@@Base+0xb30>
   119e0:	b	11f94 <close_stdout@@Base+0xb30>
   119e4:	b	11f94 <close_stdout@@Base+0xb30>
   119e8:	b	11f94 <close_stdout@@Base+0xb30>
   119ec:	b	11f94 <close_stdout@@Base+0xb30>
   119f0:	b	11e88 <close_stdout@@Base+0xa24>
   119f4:	b	11e70 <close_stdout@@Base+0xa0c>
   119f8:	b	11e98 <close_stdout@@Base+0xa34>
   119fc:	b	11e90 <close_stdout@@Base+0xa2c>
   11a00:	b	11e80 <close_stdout@@Base+0xa1c>
   11a04:	b	11e78 <close_stdout@@Base+0xa14>
   11a08:	b	11e3c <close_stdout@@Base+0x9d8>
   11a0c:	b	11f94 <close_stdout@@Base+0xb30>
   11a10:	b	11f94 <close_stdout@@Base+0xb30>
   11a14:	b	11f94 <close_stdout@@Base+0xb30>
   11a18:	b	11f94 <close_stdout@@Base+0xb30>
   11a1c:	b	11f94 <close_stdout@@Base+0xb30>
   11a20:	b	11f94 <close_stdout@@Base+0xb30>
   11a24:	b	11f94 <close_stdout@@Base+0xb30>
   11a28:	b	11f94 <close_stdout@@Base+0xb30>
   11a2c:	b	11f94 <close_stdout@@Base+0xb30>
   11a30:	b	11f94 <close_stdout@@Base+0xb30>
   11a34:	b	11f94 <close_stdout@@Base+0xb30>
   11a38:	b	11f94 <close_stdout@@Base+0xb30>
   11a3c:	b	11f94 <close_stdout@@Base+0xb30>
   11a40:	b	11f94 <close_stdout@@Base+0xb30>
   11a44:	b	11f94 <close_stdout@@Base+0xb30>
   11a48:	b	11f94 <close_stdout@@Base+0xb30>
   11a4c:	b	11f94 <close_stdout@@Base+0xb30>
   11a50:	b	11f94 <close_stdout@@Base+0xb30>
   11a54:	b	11dc8 <close_stdout@@Base+0x964>
   11a58:	b	11dc8 <close_stdout@@Base+0x964>
   11a5c:	b	11dc8 <close_stdout@@Base+0x964>
   11a60:	b	11dc0 <close_stdout@@Base+0x95c>
   11a64:	b	11dc8 <close_stdout@@Base+0x964>
   11a68:	b	11c9c <close_stdout@@Base+0x838>
   11a6c:	b	11dc8 <close_stdout@@Base+0x964>
   11a70:	b	11f3c <close_stdout@@Base+0xad8>
   11a74:	b	11dc8 <close_stdout@@Base+0x964>
   11a78:	b	11dc8 <close_stdout@@Base+0x964>
   11a7c:	b	11dc8 <close_stdout@@Base+0x964>
   11a80:	b	11c9c <close_stdout@@Base+0x838>
   11a84:	b	11c9c <close_stdout@@Base+0x838>
   11a88:	b	11c9c <close_stdout@@Base+0x838>
   11a8c:	b	11c9c <close_stdout@@Base+0x838>
   11a90:	b	11c9c <close_stdout@@Base+0x838>
   11a94:	b	11c9c <close_stdout@@Base+0x838>
   11a98:	b	11c9c <close_stdout@@Base+0x838>
   11a9c:	b	11c9c <close_stdout@@Base+0x838>
   11aa0:	b	11c9c <close_stdout@@Base+0x838>
   11aa4:	b	11c9c <close_stdout@@Base+0x838>
   11aa8:	b	11c9c <close_stdout@@Base+0x838>
   11aac:	b	11c9c <close_stdout@@Base+0x838>
   11ab0:	b	11c9c <close_stdout@@Base+0x838>
   11ab4:	b	11c9c <close_stdout@@Base+0x838>
   11ab8:	b	11c9c <close_stdout@@Base+0x838>
   11abc:	b	11c9c <close_stdout@@Base+0x838>
   11ac0:	b	11dc8 <close_stdout@@Base+0x964>
   11ac4:	b	11dc8 <close_stdout@@Base+0x964>
   11ac8:	b	11dc8 <close_stdout@@Base+0x964>
   11acc:	b	11dc8 <close_stdout@@Base+0x964>
   11ad0:	b	11bd0 <close_stdout@@Base+0x76c>
   11ad4:	b	11f94 <close_stdout@@Base+0xb30>
   11ad8:	b	11c9c <close_stdout@@Base+0x838>
   11adc:	b	11c9c <close_stdout@@Base+0x838>
   11ae0:	b	11c9c <close_stdout@@Base+0x838>
   11ae4:	b	11c9c <close_stdout@@Base+0x838>
   11ae8:	b	11c9c <close_stdout@@Base+0x838>
   11aec:	b	11c9c <close_stdout@@Base+0x838>
   11af0:	b	11c9c <close_stdout@@Base+0x838>
   11af4:	b	11c9c <close_stdout@@Base+0x838>
   11af8:	b	11c9c <close_stdout@@Base+0x838>
   11afc:	b	11c9c <close_stdout@@Base+0x838>
   11b00:	b	11c9c <close_stdout@@Base+0x838>
   11b04:	b	11c9c <close_stdout@@Base+0x838>
   11b08:	b	11c9c <close_stdout@@Base+0x838>
   11b0c:	b	11c9c <close_stdout@@Base+0x838>
   11b10:	b	11c9c <close_stdout@@Base+0x838>
   11b14:	b	11c9c <close_stdout@@Base+0x838>
   11b18:	b	11c9c <close_stdout@@Base+0x838>
   11b1c:	b	11c9c <close_stdout@@Base+0x838>
   11b20:	b	11c9c <close_stdout@@Base+0x838>
   11b24:	b	11c9c <close_stdout@@Base+0x838>
   11b28:	b	11c9c <close_stdout@@Base+0x838>
   11b2c:	b	11c9c <close_stdout@@Base+0x838>
   11b30:	b	11c9c <close_stdout@@Base+0x838>
   11b34:	b	11c9c <close_stdout@@Base+0x838>
   11b38:	b	11c9c <close_stdout@@Base+0x838>
   11b3c:	b	11c9c <close_stdout@@Base+0x838>
   11b40:	b	11dc8 <close_stdout@@Base+0x964>
   11b44:	b	11f20 <close_stdout@@Base+0xabc>
   11b48:	b	11c9c <close_stdout@@Base+0x838>
   11b4c:	b	11dc8 <close_stdout@@Base+0x964>
   11b50:	b	11c9c <close_stdout@@Base+0x838>
   11b54:	b	11dc8 <close_stdout@@Base+0x964>
   11b58:	b	11c9c <close_stdout@@Base+0x838>
   11b5c:	b	11c9c <close_stdout@@Base+0x838>
   11b60:	b	11c9c <close_stdout@@Base+0x838>
   11b64:	b	11c9c <close_stdout@@Base+0x838>
   11b68:	b	11c9c <close_stdout@@Base+0x838>
   11b6c:	b	11c9c <close_stdout@@Base+0x838>
   11b70:	b	11c9c <close_stdout@@Base+0x838>
   11b74:	b	11c9c <close_stdout@@Base+0x838>
   11b78:	b	11c9c <close_stdout@@Base+0x838>
   11b7c:	b	11c9c <close_stdout@@Base+0x838>
   11b80:	b	11c9c <close_stdout@@Base+0x838>
   11b84:	b	11c9c <close_stdout@@Base+0x838>
   11b88:	b	11c9c <close_stdout@@Base+0x838>
   11b8c:	b	11c9c <close_stdout@@Base+0x838>
   11b90:	b	11c9c <close_stdout@@Base+0x838>
   11b94:	b	11c9c <close_stdout@@Base+0x838>
   11b98:	b	11c9c <close_stdout@@Base+0x838>
   11b9c:	b	11c9c <close_stdout@@Base+0x838>
   11ba0:	b	11c9c <close_stdout@@Base+0x838>
   11ba4:	b	11c9c <close_stdout@@Base+0x838>
   11ba8:	b	11c9c <close_stdout@@Base+0x838>
   11bac:	b	11c9c <close_stdout@@Base+0x838>
   11bb0:	b	11c9c <close_stdout@@Base+0x838>
   11bb4:	b	11c9c <close_stdout@@Base+0x838>
   11bb8:	b	11c9c <close_stdout@@Base+0x838>
   11bbc:	b	11c9c <close_stdout@@Base+0x838>
   11bc0:	b	11da8 <close_stdout@@Base+0x944>
   11bc4:	b	11dc8 <close_stdout@@Base+0x964>
   11bc8:	b	11da8 <close_stdout@@Base+0x944>
   11bcc:	b	11dc0 <close_stdout@@Base+0x95c>
   11bd0:	ldr	r3, [sp, #160]	; 0xa0
   11bd4:	cmp	r3, #2
   11bd8:	beq	12464 <close_stdout@@Base+0x1000>
   11bdc:	cmp	r3, #3
   11be0:	bne	11c9c <close_stdout@@Base+0x838>
   11be4:	ldr	r1, [sp, #164]	; 0xa4
   11be8:	tst	r1, #4
   11bec:	beq	11c9c <close_stdout@@Base+0x838>
   11bf0:	add	r3, fp, #2
   11bf4:	cmp	r8, r3
   11bf8:	bls	11c9c <close_stdout@@Base+0x838>
   11bfc:	ldrb	r2, [r5, #1]
   11c00:	mov	r1, #1
   11c04:	cmp	r2, #63	; 0x3f
   11c08:	bne	11c9c <close_stdout@@Base+0x838>
   11c0c:	ldr	r0, [sp, #32]
   11c10:	ldrb	ip, [r0, r3]
   11c14:	sub	r0, ip, #33	; 0x21
   11c18:	uxtb	r0, r0
   11c1c:	cmp	r0, #29
   11c20:	bhi	11c9c <close_stdout@@Base+0x838>
   11c24:	lsl	r1, r1, r0
   11c28:	movw	r0, #20929	; 0x51c1
   11c2c:	movt	r0, #14336	; 0x3800
   11c30:	and	r0, r1, r0
   11c34:	cmp	r0, #0
   11c38:	beq	11c9c <close_stdout@@Base+0x838>
   11c3c:	ldr	r1, [sp, #36]	; 0x24
   11c40:	cmp	r1, #0
   11c44:	bne	11de4 <close_stdout@@Base+0x980>
   11c48:	cmp	r9, sl
   11c4c:	mov	r4, ip
   11c50:	mov	fp, r3
   11c54:	ldrcc	r0, [sp, #40]	; 0x28
   11c58:	strbcc	r2, [r0, r9]
   11c5c:	add	r2, r9, #1
   11c60:	cmp	sl, r2
   11c64:	ldrhi	r0, [sp, #40]	; 0x28
   11c68:	movhi	r1, #34	; 0x22
   11c6c:	strbhi	r1, [r0, r2]
   11c70:	add	r2, r9, #2
   11c74:	cmp	sl, r2
   11c78:	ldrhi	r0, [sp, #40]	; 0x28
   11c7c:	movhi	r1, #34	; 0x22
   11c80:	strbhi	r1, [r0, r2]
   11c84:	add	r2, r9, #3
   11c88:	cmp	sl, r2
   11c8c:	add	r9, r9, #4
   11c90:	ldrhi	r0, [sp, #40]	; 0x28
   11c94:	movhi	r1, #63	; 0x3f
   11c98:	strbhi	r1, [r0, r2]
   11c9c:	ldr	r0, [sp, #44]	; 0x2c
   11ca0:	cmp	r0, #0
   11ca4:	bne	11ccc <close_stdout@@Base+0x868>
   11ca8:	ldr	r1, [sp, #48]	; 0x30
   11cac:	cmp	r1, #0
   11cb0:	beq	11ccc <close_stdout@@Base+0x868>
   11cb4:	ubfx	r2, r4, #5, #8
   11cb8:	and	r3, r4, #31
   11cbc:	ldr	r2, [r1, r2, lsl #2]
   11cc0:	lsr	r3, r2, r3
   11cc4:	tst	r3, #1
   11cc8:	bne	11cd4 <close_stdout@@Base+0x870>
   11ccc:	cmp	r6, #0
   11cd0:	beq	11cf4 <close_stdout@@Base+0x890>
   11cd4:	ldr	r2, [sp, #36]	; 0x24
   11cd8:	cmp	r2, #0
   11cdc:	bne	11de4 <close_stdout@@Base+0x980>
   11ce0:	cmp	r9, sl
   11ce4:	ldrcc	r0, [sp, #40]	; 0x28
   11ce8:	movcc	r3, #92	; 0x5c
   11cec:	strbcc	r3, [r0, r9]
   11cf0:	add	r9, r9, #1
   11cf4:	add	fp, fp, #1
   11cf8:	cmp	r9, sl
   11cfc:	ldrcc	r1, [sp, #40]	; 0x28
   11d00:	strbcc	r4, [r1, r9]
   11d04:	cmn	r8, #1
   11d08:	add	r9, r9, #1
   11d0c:	bne	11994 <close_stdout@@Base+0x530>
   11d10:	ldr	r2, [sp, #32]
   11d14:	ldrb	r3, [r2, fp]
   11d18:	adds	r3, r3, #0
   11d1c:	movne	r3, #1
   11d20:	cmp	r3, #0
   11d24:	bne	119a4 <close_stdout@@Base+0x540>
   11d28:	ldr	r3, [sp, #160]	; 0xa0
   11d2c:	cmp	r9, #0
   11d30:	cmpeq	r3, #2
   11d34:	bne	11d44 <close_stdout@@Base+0x8e0>
   11d38:	ldr	r0, [sp, #36]	; 0x24
   11d3c:	cmp	r0, #0
   11d40:	bne	11de4 <close_stdout@@Base+0x980>
   11d44:	ldr	r1, [sp, #36]	; 0x24
   11d48:	ldr	r2, [sp, #52]	; 0x34
   11d4c:	eor	r3, r1, #1
   11d50:	cmp	r2, #0
   11d54:	moveq	r3, #0
   11d58:	andne	r3, r3, #1
   11d5c:	cmp	r3, #0
   11d60:	beq	11d8c <close_stdout@@Base+0x928>
   11d64:	ldrb	r3, [r2]
   11d68:	cmp	r3, #0
   11d6c:	beq	11d8c <close_stdout@@Base+0x928>
   11d70:	ldr	r1, [sp, #40]	; 0x28
   11d74:	cmp	sl, r9
   11d78:	strbhi	r3, [r1, r9]
   11d7c:	ldrb	r3, [r2, #1]!
   11d80:	add	r9, r9, #1
   11d84:	cmp	r3, #0
   11d88:	bne	11d74 <close_stdout@@Base+0x910>
   11d8c:	cmp	r9, sl
   11d90:	movcs	r0, r9
   11d94:	ldrcc	r1, [sp, #40]	; 0x28
   11d98:	movcc	r3, #0
   11d9c:	movcc	r0, r9
   11da0:	strbcc	r3, [r1, r9]
   11da4:	b	11e20 <close_stdout@@Base+0x9bc>
   11da8:	cmn	r8, #1
   11dac:	beq	12474 <close_stdout@@Base+0x1010>
   11db0:	subs	r3, r8, #1
   11db4:	movne	r3, #1
   11db8:	cmp	r3, #0
   11dbc:	bne	11c9c <close_stdout@@Base+0x838>
   11dc0:	cmp	fp, #0
   11dc4:	bne	11c9c <close_stdout@@Base+0x838>
   11dc8:	ldr	r3, [sp, #36]	; 0x24
   11dcc:	ldr	r0, [sp, #160]	; 0xa0
   11dd0:	cmp	r0, #2
   11dd4:	movne	r3, #0
   11dd8:	andeq	r3, r3, #1
   11ddc:	cmp	r3, #0
   11de0:	beq	11c9c <close_stdout@@Base+0x838>
   11de4:	ldr	r2, [sp, #164]	; 0xa4
   11de8:	mov	ip, #0
   11dec:	ldr	r0, [sp, #160]	; 0xa0
   11df0:	bic	r3, r2, #2
   11df4:	ldr	r1, [sp, #72]	; 0x48
   11df8:	ldr	r2, [sp, #68]	; 0x44
   11dfc:	stm	sp, {r0, r3}
   11e00:	mov	r3, r8
   11e04:	str	r1, [sp, #12]
   11e08:	mov	r1, sl
   11e0c:	str	r2, [sp, #16]
   11e10:	ldr	r0, [sp, #40]	; 0x28
   11e14:	ldr	r2, [sp, #32]
   11e18:	str	ip, [sp, #8]
   11e1c:	bl	118b4 <close_stdout@@Base+0x450>
   11e20:	ldr	r1, [sp, #56]	; 0x38
   11e24:	ldr	r2, [sp, #116]	; 0x74
   11e28:	ldr	r3, [r1]
   11e2c:	cmp	r2, r3
   11e30:	bne	12564 <close_stdout@@Base+0x1100>
   11e34:	add	sp, sp, #124	; 0x7c
   11e38:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11e3c:	mov	r3, #114	; 0x72
   11e40:	ldr	r2, [sp, #36]	; 0x24
   11e44:	ldr	r0, [sp, #160]	; 0xa0
   11e48:	cmp	r0, #2
   11e4c:	movne	r2, #0
   11e50:	andeq	r2, r2, #1
   11e54:	cmp	r2, #0
   11e58:	bne	11de4 <close_stdout@@Base+0x980>
   11e5c:	ldr	r1, [sp, #24]
   11e60:	cmp	r1, #0
   11e64:	beq	11c9c <close_stdout@@Base+0x838>
   11e68:	mov	r4, r3
   11e6c:	b	11cd4 <close_stdout@@Base+0x870>
   11e70:	mov	r3, #98	; 0x62
   11e74:	b	11e5c <close_stdout@@Base+0x9f8>
   11e78:	mov	r3, #102	; 0x66
   11e7c:	b	11e5c <close_stdout@@Base+0x9f8>
   11e80:	mov	r3, #118	; 0x76
   11e84:	b	11e5c <close_stdout@@Base+0x9f8>
   11e88:	mov	r3, #97	; 0x61
   11e8c:	b	11e5c <close_stdout@@Base+0x9f8>
   11e90:	mov	r3, #110	; 0x6e
   11e94:	b	11e40 <close_stdout@@Base+0x9dc>
   11e98:	mov	r3, #116	; 0x74
   11e9c:	b	11e40 <close_stdout@@Base+0x9dc>
   11ea0:	ldr	r2, [sp, #24]
   11ea4:	cmp	r2, #0
   11ea8:	beq	12450 <close_stdout@@Base+0xfec>
   11eac:	ldr	r3, [sp, #36]	; 0x24
   11eb0:	cmp	r3, #0
   11eb4:	bne	11de4 <close_stdout@@Base+0x980>
   11eb8:	cmp	r9, sl
   11ebc:	add	r2, r9, #1
   11ec0:	ldrcc	r0, [sp, #40]	; 0x28
   11ec4:	movcc	r3, #92	; 0x5c
   11ec8:	strbcc	r3, [r0, r9]
   11ecc:	add	r3, fp, #1
   11ed0:	cmp	r8, r3
   11ed4:	bls	11f14 <close_stdout@@Base+0xab0>
   11ed8:	ldr	r1, [sp, #32]
   11edc:	ldrb	r3, [r1, r3]
   11ee0:	sub	r3, r3, #48	; 0x30
   11ee4:	cmp	r3, #9
   11ee8:	bhi	11f14 <close_stdout@@Base+0xab0>
   11eec:	cmp	sl, r2
   11ef0:	ldrhi	r0, [sp, #40]	; 0x28
   11ef4:	movhi	r3, #48	; 0x30
   11ef8:	strbhi	r3, [r0, r2]
   11efc:	add	r3, r9, #2
   11f00:	cmp	sl, r3
   11f04:	ldrhi	r1, [sp, #40]	; 0x28
   11f08:	movhi	r2, #48	; 0x30
   11f0c:	strbhi	r2, [r1, r3]
   11f10:	add	r2, r9, #3
   11f14:	mov	r9, r2
   11f18:	mov	r4, #48	; 0x30
   11f1c:	b	11ca8 <close_stdout@@Base+0x844>
   11f20:	ldr	r1, [sp, #76]	; 0x4c
   11f24:	cmp	r1, #0
   11f28:	beq	11f34 <close_stdout@@Base+0xad0>
   11f2c:	cmp	r7, #0
   11f30:	bne	11cf4 <close_stdout@@Base+0x890>
   11f34:	mov	r3, r4
   11f38:	b	11e40 <close_stdout@@Base+0x9dc>
   11f3c:	ldr	r1, [sp, #160]	; 0xa0
   11f40:	cmp	r1, #2
   11f44:	bne	11c9c <close_stdout@@Base+0x838>
   11f48:	ldr	r2, [sp, #36]	; 0x24
   11f4c:	cmp	r2, #0
   11f50:	bne	11de4 <close_stdout@@Base+0x980>
   11f54:	cmp	r9, sl
   11f58:	ldrcc	r0, [sp, #40]	; 0x28
   11f5c:	movcc	r3, #39	; 0x27
   11f60:	strbcc	r3, [r0, r9]
   11f64:	add	r3, r9, #1
   11f68:	cmp	sl, r3
   11f6c:	ldrhi	r1, [sp, #40]	; 0x28
   11f70:	movhi	r2, #92	; 0x5c
   11f74:	strbhi	r2, [r1, r3]
   11f78:	add	r3, r9, #2
   11f7c:	cmp	sl, r3
   11f80:	add	r9, r9, #3
   11f84:	ldrhi	r0, [sp, #40]	; 0x28
   11f88:	movhi	r2, #39	; 0x27
   11f8c:	strbhi	r2, [r0, r3]
   11f90:	b	11c9c <close_stdout@@Base+0x838>
   11f94:	ldr	r1, [sp, #64]	; 0x40
   11f98:	cmp	r1, #1
   11f9c:	bne	12294 <close_stdout@@Base+0xe30>
   11fa0:	bl	10f28 <__ctype_b_loc@plt>
   11fa4:	ldr	r2, [sp, #64]	; 0x40
   11fa8:	sxth	r3, r4
   11fac:	str	r2, [sp, #60]	; 0x3c
   11fb0:	lsl	r3, r3, #1
   11fb4:	ldr	r2, [r0]
   11fb8:	ldrh	r2, [r2, r3]
   11fbc:	eor	r2, r2, #16384	; 0x4000
   11fc0:	ubfx	r2, r2, #14, #1
   11fc4:	ldr	r1, [sp, #24]
   11fc8:	ands	r2, r2, r1
   11fcc:	beq	11c9c <close_stdout@@Base+0x838>
   11fd0:	ldr	r3, [sp, #60]	; 0x3c
   11fd4:	mov	r0, #92	; 0x5c
   11fd8:	ldr	r7, [sp, #36]	; 0x24
   11fdc:	add	r1, r3, fp
   11fe0:	str	r8, [sp, #60]	; 0x3c
   11fe4:	ldr	r3, [sp, #40]	; 0x28
   11fe8:	b	1204c <close_stdout@@Base+0xbe8>
   11fec:	cmp	r7, #0
   11ff0:	bne	1248c <close_stdout@@Base+0x1028>
   11ff4:	add	ip, r9, #1
   11ff8:	cmp	r9, sl
   11ffc:	strbcc	r0, [r3, r9]
   12000:	cmp	sl, ip
   12004:	lsrhi	r8, r4, #6
   12008:	addhi	r8, r8, #48	; 0x30
   1200c:	strbhi	r8, [r3, ip]
   12010:	add	ip, r9, #2
   12014:	add	r9, r9, #3
   12018:	cmp	sl, ip
   1201c:	ubfxhi	r8, r4, #3, #3
   12020:	and	r4, r4, #7
   12024:	add	r4, r4, #48	; 0x30
   12028:	addhi	r8, r8, #48	; 0x30
   1202c:	strbhi	r8, [r3, ip]
   12030:	add	fp, fp, #1
   12034:	cmp	r1, fp
   12038:	bls	12078 <close_stdout@@Base+0xc14>
   1203c:	cmp	r9, sl
   12040:	strbcc	r4, [r3, r9]
   12044:	ldrb	r4, [r5, #1]!
   12048:	add	r9, r9, #1
   1204c:	cmp	r2, #0
   12050:	bne	11fec <close_stdout@@Base+0xb88>
   12054:	cmp	r6, #0
   12058:	beq	12030 <close_stdout@@Base+0xbcc>
   1205c:	add	fp, fp, #1
   12060:	cmp	r9, sl
   12064:	strbcc	r0, [r3, r9]
   12068:	cmp	r1, fp
   1206c:	add	r9, r9, #1
   12070:	mov	r6, #0
   12074:	bhi	1203c <close_stdout@@Base+0xbd8>
   12078:	ldr	r8, [sp, #60]	; 0x3c
   1207c:	b	11cf8 <close_stdout@@Base+0x894>
   12080:	ldr	r3, [sp, #36]	; 0x24
   12084:	cmp	r3, #0
   12088:	bne	1258c <close_stdout@@Base+0x1128>
   1208c:	cmp	sl, #0
   12090:	beq	124a4 <close_stdout@@Base+0x1040>
   12094:	ldr	r1, [sp, #40]	; 0x28
   12098:	mov	r0, #1
   1209c:	ldr	r2, [pc, #1296]	; 125b4 <close_stdout@@Base+0x1150>
   120a0:	mov	r3, #34	; 0x22
   120a4:	str	r0, [sp, #24]
   120a8:	mov	r9, r0
   120ac:	add	r2, pc, r2
   120b0:	str	r0, [sp, #28]
   120b4:	strb	r3, [r1]
   120b8:	str	r2, [sp, #52]	; 0x34
   120bc:	b	11968 <close_stdout@@Base+0x504>
   120c0:	ldr	r3, [pc, #1264]	; 125b8 <close_stdout@@Base+0x1154>
   120c4:	mov	r2, #1
   120c8:	mov	r0, #3
   120cc:	str	r2, [sp, #36]	; 0x24
   120d0:	add	r3, pc, r3
   120d4:	str	r2, [sp, #24]
   120d8:	str	r3, [sp, #52]	; 0x34
   120dc:	mov	r9, #0
   120e0:	str	r2, [sp, #28]
   120e4:	str	r0, [sp, #160]	; 0xa0
   120e8:	b	11968 <close_stdout@@Base+0x504>
   120ec:	mov	r0, #0
   120f0:	mov	r1, #1
   120f4:	str	r0, [sp, #36]	; 0x24
   120f8:	mov	r9, r0
   120fc:	str	r1, [sp, #24]
   12100:	str	r0, [sp, #28]
   12104:	str	r0, [sp, #52]	; 0x34
   12108:	b	11968 <close_stdout@@Base+0x504>
   1210c:	ldr	r3, [sp, #160]	; 0xa0
   12110:	cmp	r3, #8
   12114:	beq	12140 <close_stdout@@Base+0xcdc>
   12118:	ldr	r0, [pc, #1180]	; 125bc <close_stdout@@Base+0x1158>
   1211c:	mov	r1, r3
   12120:	add	r0, pc, r0
   12124:	bl	11750 <close_stdout@@Base+0x2ec>
   12128:	ldr	r1, [sp, #160]	; 0xa0
   1212c:	str	r0, [sp, #72]	; 0x48
   12130:	ldr	r0, [pc, #1160]	; 125c0 <close_stdout@@Base+0x115c>
   12134:	add	r0, pc, r0
   12138:	bl	11750 <close_stdout@@Base+0x2ec>
   1213c:	str	r0, [sp, #68]	; 0x44
   12140:	ldr	r0, [sp, #36]	; 0x24
   12144:	cmp	r0, #0
   12148:	movne	r9, #0
   1214c:	bne	12184 <close_stdout@@Base+0xd20>
   12150:	ldr	r1, [sp, #72]	; 0x48
   12154:	ldrb	r3, [r1]
   12158:	cmp	r3, #0
   1215c:	beq	1255c <close_stdout@@Base+0x10f8>
   12160:	mov	r2, r1
   12164:	ldr	r1, [sp, #40]	; 0x28
   12168:	mov	r9, r0
   1216c:	cmp	r9, sl
   12170:	strbcc	r3, [r1, r9]
   12174:	ldrb	r3, [r2, #1]!
   12178:	add	r9, r9, #1
   1217c:	cmp	r3, #0
   12180:	bne	1216c <close_stdout@@Base+0xd08>
   12184:	ldr	r0, [sp, #68]	; 0x44
   12188:	str	r0, [sp, #52]	; 0x34
   1218c:	bl	10f40 <strlen@plt>
   12190:	mov	r2, #1
   12194:	str	r2, [sp, #24]
   12198:	str	r0, [sp, #28]
   1219c:	b	11968 <close_stdout@@Base+0x504>
   121a0:	ldr	r3, [pc, #1052]	; 125c4 <close_stdout@@Base+0x1160>
   121a4:	mov	r2, #0
   121a8:	mov	r1, #1
   121ac:	mov	r0, #2
   121b0:	add	r3, pc, r3
   121b4:	str	r1, [sp, #36]	; 0x24
   121b8:	str	r2, [sp, #24]
   121bc:	mov	r9, r2
   121c0:	str	r1, [sp, #28]
   121c4:	str	r3, [sp, #52]	; 0x34
   121c8:	str	r0, [sp, #160]	; 0xa0
   121cc:	b	11968 <close_stdout@@Base+0x504>
   121d0:	ldr	r3, [sp, #36]	; 0x24
   121d4:	cmp	r3, #0
   121d8:	bne	12568 <close_stdout@@Base+0x1104>
   121dc:	cmp	sl, #0
   121e0:	beq	124c4 <close_stdout@@Base+0x1060>
   121e4:	ldr	r1, [sp, #40]	; 0x28
   121e8:	mov	r3, #39	; 0x27
   121ec:	ldr	r2, [sp, #36]	; 0x24
   121f0:	mov	r0, #1
   121f4:	mov	r9, r0
   121f8:	str	r0, [sp, #28]
   121fc:	strb	r3, [r1]
   12200:	ldr	r3, [pc, #960]	; 125c8 <close_stdout@@Base+0x1164>
   12204:	str	r2, [sp, #24]
   12208:	add	r3, pc, r3
   1220c:	str	r3, [sp, #52]	; 0x34
   12210:	b	11968 <close_stdout@@Base+0x504>
   12214:	ldr	r2, [sp, #28]
   12218:	cmp	r2, #1
   1221c:	add	r4, fp, r2
   12220:	movls	r3, #0
   12224:	movhi	r3, #1
   12228:	cmn	r8, #1
   1222c:	movne	r3, #0
   12230:	cmp	r3, #0
   12234:	beq	12244 <close_stdout@@Base+0xde0>
   12238:	ldr	r0, [sp, #32]
   1223c:	bl	10f40 <strlen@plt>
   12240:	mov	r8, r0
   12244:	cmp	r8, r4
   12248:	ldrcc	r3, [sp, #32]
   1224c:	movcc	r6, #0
   12250:	addcc	r5, r3, fp
   12254:	bcc	119c4 <close_stdout@@Base+0x560>
   12258:	ldr	r0, [sp, #32]
   1225c:	ldr	r1, [sp, #52]	; 0x34
   12260:	add	r5, r0, fp
   12264:	ldr	r2, [sp, #28]
   12268:	mov	r0, r5
   1226c:	bl	10e44 <memcmp@plt>
   12270:	cmp	r0, #0
   12274:	bne	1228c <close_stdout@@Base+0xe28>
   12278:	ldr	r1, [sp, #36]	; 0x24
   1227c:	cmp	r1, #0
   12280:	bne	11de4 <close_stdout@@Base+0x980>
   12284:	mov	r6, #1
   12288:	b	119c4 <close_stdout@@Base+0x560>
   1228c:	mov	r6, #0
   12290:	b	119c4 <close_stdout@@Base+0x560>
   12294:	add	r7, sp, #108	; 0x6c
   12298:	cmn	r8, #1
   1229c:	mov	r3, #0
   122a0:	str	r3, [sp, #108]	; 0x6c
   122a4:	str	r3, [r7, #4]
   122a8:	beq	12494 <close_stdout@@Base+0x1030>
   122ac:	mov	r1, #0
   122b0:	ldr	r0, [sp, #32]
   122b4:	mov	ip, #1
   122b8:	str	r9, [sp, #88]	; 0x58
   122bc:	str	r6, [sp, #96]	; 0x60
   122c0:	mov	r9, r1
   122c4:	str	r5, [sp, #100]	; 0x64
   122c8:	mov	r6, ip
   122cc:	mov	r5, r7
   122d0:	add	r3, sp, #104	; 0x68
   122d4:	sub	r0, r0, #1
   122d8:	str	r3, [sp, #80]	; 0x50
   122dc:	str	r0, [sp, #84]	; 0x54
   122e0:	str	r1, [sp, #60]	; 0x3c
   122e4:	str	r4, [sp, #92]	; 0x5c
   122e8:	ldr	r2, [sp, #32]
   122ec:	add	r7, r9, fp
   122f0:	add	r0, sp, #104	; 0x68
   122f4:	mov	r3, r5
   122f8:	add	r4, r2, r7
   122fc:	rsb	r2, r7, r8
   12300:	mov	r1, r4
   12304:	bl	10ec8 <mbrtowc@plt>
   12308:	subs	r2, r0, #0
   1230c:	beq	12418 <close_stdout@@Base+0xfb4>
   12310:	cmn	r2, #1
   12314:	beq	12540 <close_stdout@@Base+0x10dc>
   12318:	cmn	r2, #2
   1231c:	beq	124e4 <close_stdout@@Base+0x1080>
   12320:	ldr	r3, [sp, #36]	; 0x24
   12324:	ldr	r0, [sp, #160]	; 0xa0
   12328:	cmp	r0, #2
   1232c:	movne	r3, #0
   12330:	andeq	r3, r3, #1
   12334:	cmp	r3, #0
   12338:	beq	123f4 <close_stdout@@Base+0xf90>
   1233c:	cmp	r2, #1
   12340:	beq	123f4 <close_stdout@@Base+0xf90>
   12344:	ldr	r1, [sp, #84]	; 0x54
   12348:	add	r3, r1, r2
   1234c:	add	r7, r3, r7
   12350:	ldrb	r3, [r4, #1]!
   12354:	sub	r3, r3, #91	; 0x5b
   12358:	cmp	r3, #33	; 0x21
   1235c:	addls	pc, pc, r3, lsl #2
   12360:	b	123ec <close_stdout@@Base+0xf88>
   12364:	b	11de4 <close_stdout@@Base+0x980>
   12368:	b	11de4 <close_stdout@@Base+0x980>
   1236c:	b	123ec <close_stdout@@Base+0xf88>
   12370:	b	11de4 <close_stdout@@Base+0x980>
   12374:	b	123ec <close_stdout@@Base+0xf88>
   12378:	b	11de4 <close_stdout@@Base+0x980>
   1237c:	b	123ec <close_stdout@@Base+0xf88>
   12380:	b	123ec <close_stdout@@Base+0xf88>
   12384:	b	123ec <close_stdout@@Base+0xf88>
   12388:	b	123ec <close_stdout@@Base+0xf88>
   1238c:	b	123ec <close_stdout@@Base+0xf88>
   12390:	b	123ec <close_stdout@@Base+0xf88>
   12394:	b	123ec <close_stdout@@Base+0xf88>
   12398:	b	123ec <close_stdout@@Base+0xf88>
   1239c:	b	123ec <close_stdout@@Base+0xf88>
   123a0:	b	123ec <close_stdout@@Base+0xf88>
   123a4:	b	123ec <close_stdout@@Base+0xf88>
   123a8:	b	123ec <close_stdout@@Base+0xf88>
   123ac:	b	123ec <close_stdout@@Base+0xf88>
   123b0:	b	123ec <close_stdout@@Base+0xf88>
   123b4:	b	123ec <close_stdout@@Base+0xf88>
   123b8:	b	123ec <close_stdout@@Base+0xf88>
   123bc:	b	123ec <close_stdout@@Base+0xf88>
   123c0:	b	123ec <close_stdout@@Base+0xf88>
   123c4:	b	123ec <close_stdout@@Base+0xf88>
   123c8:	b	123ec <close_stdout@@Base+0xf88>
   123cc:	b	123ec <close_stdout@@Base+0xf88>
   123d0:	b	123ec <close_stdout@@Base+0xf88>
   123d4:	b	123ec <close_stdout@@Base+0xf88>
   123d8:	b	123ec <close_stdout@@Base+0xf88>
   123dc:	b	123ec <close_stdout@@Base+0xf88>
   123e0:	b	123ec <close_stdout@@Base+0xf88>
   123e4:	b	123ec <close_stdout@@Base+0xf88>
   123e8:	b	11de4 <close_stdout@@Base+0x980>
   123ec:	cmp	r4, r7
   123f0:	bne	12350 <close_stdout@@Base+0xeec>
   123f4:	ldr	r0, [sp, #104]	; 0x68
   123f8:	add	r9, r9, r2
   123fc:	bl	10e80 <iswprint@plt>
   12400:	cmp	r0, #0
   12404:	mov	r0, r5
   12408:	moveq	r6, #0
   1240c:	bl	10e38 <mbsinit@plt>
   12410:	cmp	r0, #0
   12414:	beq	122e8 <close_stdout@@Base+0xe84>
   12418:	mov	ip, r6
   1241c:	eor	r2, ip, #1
   12420:	str	r9, [sp, #60]	; 0x3c
   12424:	ldr	r4, [sp, #92]	; 0x5c
   12428:	uxtb	r2, r2
   1242c:	ldr	r9, [sp, #88]	; 0x58
   12430:	ldr	r6, [sp, #96]	; 0x60
   12434:	ldr	r5, [sp, #100]	; 0x64
   12438:	ldr	r3, [sp, #60]	; 0x3c
   1243c:	cmp	r3, #1
   12440:	bls	11fc4 <close_stdout@@Base+0xb60>
   12444:	ldr	r0, [sp, #24]
   12448:	and	r2, r2, r0
   1244c:	b	11fd0 <close_stdout@@Base+0xb6c>
   12450:	ldr	r2, [sp, #164]	; 0xa4
   12454:	tst	r2, #1
   12458:	addne	fp, fp, #1
   1245c:	bne	1198c <close_stdout@@Base+0x528>
   12460:	b	11c9c <close_stdout@@Base+0x838>
   12464:	ldr	r0, [sp, #36]	; 0x24
   12468:	cmp	r0, #0
   1246c:	beq	11c9c <close_stdout@@Base+0x838>
   12470:	b	11de4 <close_stdout@@Base+0x980>
   12474:	ldr	r2, [sp, #32]
   12478:	ldrb	r3, [r2, #1]
   1247c:	adds	r3, r3, #0
   12480:	movne	r3, #1
   12484:	b	11db8 <close_stdout@@Base+0x954>
   12488:	bl	1100c <abort@plt>
   1248c:	ldr	r8, [sp, #60]	; 0x3c
   12490:	b	11de4 <close_stdout@@Base+0x980>
   12494:	ldr	r0, [sp, #32]
   12498:	bl	10f40 <strlen@plt>
   1249c:	mov	r8, r0
   124a0:	b	122ac <close_stdout@@Base+0xe48>
   124a4:	ldr	r2, [pc, #288]	; 125cc <close_stdout@@Base+0x1168>
   124a8:	mov	r1, #1
   124ac:	mov	r9, r1
   124b0:	str	r1, [sp, #24]
   124b4:	add	r2, pc, r2
   124b8:	str	r1, [sp, #28]
   124bc:	str	r2, [sp, #52]	; 0x34
   124c0:	b	11968 <close_stdout@@Base+0x504>
   124c4:	ldr	r2, [pc, #260]	; 125d0 <close_stdout@@Base+0x116c>
   124c8:	mov	r3, #1
   124cc:	mov	r9, r3
   124d0:	str	r3, [sp, #28]
   124d4:	add	r2, pc, r2
   124d8:	str	sl, [sp, #24]
   124dc:	str	r2, [sp, #52]	; 0x34
   124e0:	b	11968 <close_stdout@@Base+0x504>
   124e4:	cmp	r8, r7
   124e8:	str	r9, [sp, #60]	; 0x3c
   124ec:	mov	ip, r4
   124f0:	ldr	r6, [sp, #96]	; 0x60
   124f4:	ldr	r9, [sp, #88]	; 0x58
   124f8:	ldr	r4, [sp, #92]	; 0x5c
   124fc:	ldr	r5, [sp, #100]	; 0x64
   12500:	bls	12538 <close_stdout@@Base+0x10d4>
   12504:	ldrb	r3, [ip]
   12508:	cmp	r3, #0
   1250c:	beq	12538 <close_stdout@@Base+0x10d4>
   12510:	ldr	r3, [sp, #60]	; 0x3c
   12514:	b	12524 <close_stdout@@Base+0x10c0>
   12518:	ldrb	r2, [r5, r3]
   1251c:	cmp	r2, #0
   12520:	beq	12534 <close_stdout@@Base+0x10d0>
   12524:	add	r3, r3, #1
   12528:	add	r2, fp, r3
   1252c:	cmp	r8, r2
   12530:	bhi	12518 <close_stdout@@Base+0x10b4>
   12534:	str	r3, [sp, #60]	; 0x3c
   12538:	mov	r2, #1
   1253c:	b	12438 <close_stdout@@Base+0xfd4>
   12540:	str	r9, [sp, #60]	; 0x3c
   12544:	mov	r2, #1
   12548:	ldr	r4, [sp, #92]	; 0x5c
   1254c:	ldr	r6, [sp, #96]	; 0x60
   12550:	ldr	r9, [sp, #88]	; 0x58
   12554:	ldr	r5, [sp, #100]	; 0x64
   12558:	b	12438 <close_stdout@@Base+0xfd4>
   1255c:	ldr	r9, [sp, #36]	; 0x24
   12560:	b	12184 <close_stdout@@Base+0xd20>
   12564:	bl	10e5c <__stack_chk_fail@plt>
   12568:	ldr	r1, [pc, #100]	; 125d4 <close_stdout@@Base+0x1170>
   1256c:	mov	r3, #0
   12570:	mov	r0, #1
   12574:	str	r3, [sp, #24]
   12578:	add	r1, pc, r1
   1257c:	str	r0, [sp, #28]
   12580:	mov	r9, r3
   12584:	str	r1, [sp, #52]	; 0x34
   12588:	b	11968 <close_stdout@@Base+0x504>
   1258c:	ldr	r0, [pc, #68]	; 125d8 <close_stdout@@Base+0x1174>
   12590:	mov	r3, #1
   12594:	mov	r9, #0
   12598:	str	r3, [sp, #24]
   1259c:	add	r0, pc, r0
   125a0:	str	r3, [sp, #28]
   125a4:	str	r0, [sp, #52]	; 0x34
   125a8:	b	11968 <close_stdout@@Base+0x504>
   125ac:	andeq	r3, r1, r8, lsr #14
   125b0:	ldrdeq	r0, [r0], -r8
   125b4:	andeq	r2, r0, r4, lsr #4
   125b8:	andeq	r2, r0, r0, lsl #4
   125bc:			; <UNDEFINED> instruction: 0x000021bc
   125c0:	muleq	r0, r8, r1
   125c4:	andeq	r2, r0, ip, lsl r1
   125c8:	andeq	r2, r0, r4, asr #1
   125cc:	andeq	r1, r0, ip, lsl lr
   125d0:	strdeq	r1, [r0], -r8
   125d4:	andeq	r1, r0, r4, asr sp
   125d8:	andeq	r1, r0, r4, lsr sp
   125dc:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   125e0:	sub	sp, sp, #44	; 0x2c
   125e4:	mov	r6, r0
   125e8:	mov	r9, r1
   125ec:	mov	sl, r2
   125f0:	mov	r4, r3
   125f4:	bl	10f58 <__errno_location@plt>
   125f8:	ldr	fp, [pc, #412]	; 1279c <close_stdout@@Base+0x1338>
   125fc:	cmp	r6, #0
   12600:	add	fp, pc, fp
   12604:	ldr	r5, [fp]
   12608:	ldr	r1, [r0]
   1260c:	mov	r8, r0
   12610:	str	r1, [sp, #36]	; 0x24
   12614:	blt	12794 <close_stdout@@Base+0x1330>
   12618:	ldr	r3, [pc, #384]	; 127a0 <close_stdout@@Base+0x133c>
   1261c:	add	r3, pc, r3
   12620:	ldr	r3, [r3]
   12624:	cmp	r6, r3
   12628:	bcc	1267c <close_stdout@@Base+0x1218>
   1262c:	add	r7, r6, #1
   12630:	cmn	r7, #-536870911	; 0xe0000001
   12634:	bhi	12798 <close_stdout@@Base+0x1334>
   12638:	add	r3, fp, #4
   1263c:	cmp	r5, r3
   12640:	beq	1276c <close_stdout@@Base+0x1308>
   12644:	mov	r0, r5
   12648:	lsl	r1, r7, #3
   1264c:	bl	13474 <close_stdout@@Base+0x2010>
   12650:	mov	r5, r0
   12654:	str	r0, [fp]
   12658:	ldr	fp, [pc, #324]	; 127a4 <close_stdout@@Base+0x1340>
   1265c:	mov	r1, #0
   12660:	add	fp, pc, fp
   12664:	ldr	r0, [fp]
   12668:	rsb	r2, r0, r7
   1266c:	add	r0, r5, r0, lsl #3
   12670:	lsl	r2, r2, #3
   12674:	bl	10f70 <memset@plt>
   12678:	str	r7, [fp]
   1267c:	add	r2, r4, #8
   12680:	str	r2, [sp, #32]
   12684:	ldr	r1, [r4]
   12688:	add	fp, r5, r6, lsl #3
   1268c:	ldr	lr, [sp, #32]
   12690:	mov	r2, r9
   12694:	ldr	r3, [r4, #4]
   12698:	ldr	ip, [r5, r6, lsl #3]
   1269c:	ldr	r7, [fp, #4]
   126a0:	orr	r3, r3, #1
   126a4:	str	r1, [sp]
   126a8:	str	r3, [sp, #4]
   126ac:	mov	r1, ip
   126b0:	str	lr, [sp, #8]
   126b4:	mov	r0, r7
   126b8:	ldr	lr, [r4, #40]	; 0x28
   126bc:	str	r3, [sp, #28]
   126c0:	mov	r3, sl
   126c4:	str	lr, [sp, #12]
   126c8:	ldr	lr, [r4, #44]	; 0x2c
   126cc:	str	ip, [sp, #24]
   126d0:	str	lr, [sp, #16]
   126d4:	bl	118b4 <close_stdout@@Base+0x450>
   126d8:	ldr	ip, [sp, #24]
   126dc:	cmp	ip, r0
   126e0:	bhi	12758 <close_stdout@@Base+0x12f4>
   126e4:	ldr	r3, [pc, #188]	; 127a8 <close_stdout@@Base+0x1344>
   126e8:	add	r1, r0, #1
   126ec:	str	r1, [r5, r6, lsl #3]
   126f0:	add	r3, pc, r3
   126f4:	cmp	r7, r3
   126f8:	beq	1270c <close_stdout@@Base+0x12a8>
   126fc:	mov	r0, r7
   12700:	str	r1, [sp, #24]
   12704:	bl	10e14 <free@plt>
   12708:	ldr	r1, [sp, #24]
   1270c:	mov	r0, r1
   12710:	str	r1, [sp, #24]
   12714:	bl	1341c <close_stdout@@Base+0x1fb8>
   12718:	ldr	r3, [sp, #28]
   1271c:	ldr	lr, [sp, #32]
   12720:	mov	r2, r9
   12724:	str	r0, [fp, #4]
   12728:	mov	r7, r0
   1272c:	ldr	ip, [r4]
   12730:	str	r3, [sp, #4]
   12734:	mov	r3, sl
   12738:	str	lr, [sp, #8]
   1273c:	str	ip, [sp]
   12740:	ldr	ip, [r4, #40]	; 0x28
   12744:	ldr	r1, [sp, #24]
   12748:	str	ip, [sp, #12]
   1274c:	ldr	ip, [r4, #44]	; 0x2c
   12750:	str	ip, [sp, #16]
   12754:	bl	118b4 <close_stdout@@Base+0x450>
   12758:	ldr	r1, [sp, #36]	; 0x24
   1275c:	mov	r0, r7
   12760:	str	r1, [r8]
   12764:	add	sp, sp, #44	; 0x2c
   12768:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1276c:	lsl	r1, r7, #3
   12770:	mov	r0, #0
   12774:	str	r3, [sp, #24]
   12778:	bl	13474 <close_stdout@@Base+0x2010>
   1277c:	ldr	r3, [sp, #24]
   12780:	mov	r5, r0
   12784:	ldm	r3, {r0, r1}
   12788:	str	r5, [fp]
   1278c:	stm	r5, {r0, r1}
   12790:	b	12658 <close_stdout@@Base+0x11f4>
   12794:	bl	1100c <abort@plt>
   12798:	bl	13630 <close_stdout@@Base+0x21cc>
   1279c:	andeq	r2, r1, r0, asr #22
   127a0:	strdeq	r2, [r1], -r0
   127a4:	andeq	r2, r1, ip, lsr #21
   127a8:	andeq	r2, r1, ip, ror #20
   127ac:	push	{r4, r5, r6, lr}
   127b0:	mov	r5, r0
   127b4:	bl	10f58 <__errno_location@plt>
   127b8:	cmp	r5, #0
   127bc:	mov	r1, #48	; 0x30
   127c0:	mov	r4, r0
   127c4:	ldr	r0, [pc, #24]	; 127e4 <close_stdout@@Base+0x1380>
   127c8:	ldr	r6, [r4]
   127cc:	add	r0, pc, r0
   127d0:	add	r0, r0, #256	; 0x100
   127d4:	movne	r0, r5
   127d8:	bl	135f0 <close_stdout@@Base+0x218c>
   127dc:	str	r6, [r4]
   127e0:	pop	{r4, r5, r6, pc}
   127e4:	muleq	r1, r0, r9
   127e8:	cmp	r0, #0
   127ec:	beq	127f8 <close_stdout@@Base+0x1394>
   127f0:	ldr	r0, [r0]
   127f4:	bx	lr
   127f8:	ldr	r0, [pc, #12]	; 1280c <close_stdout@@Base+0x13a8>
   127fc:	add	r0, pc, r0
   12800:	add	r0, r0, #256	; 0x100
   12804:	ldr	r0, [r0]
   12808:	bx	lr
   1280c:	andeq	r2, r1, r0, ror #18
   12810:	cmp	r0, #0
   12814:	beq	12820 <close_stdout@@Base+0x13bc>
   12818:	str	r1, [r0]
   1281c:	bx	lr
   12820:	ldr	r0, [pc, #12]	; 12834 <close_stdout@@Base+0x13d0>
   12824:	add	r0, pc, r0
   12828:	add	r0, r0, #256	; 0x100
   1282c:	str	r1, [r0]
   12830:	bx	lr
   12834:	andeq	r2, r1, r8, lsr r9
   12838:	cmp	r0, #0
   1283c:	movne	r3, r0
   12840:	beq	12870 <close_stdout@@Base+0x140c>
   12844:	lsr	ip, r1, #5
   12848:	and	r1, r1, #31
   1284c:	add	r3, r3, ip, lsl #2
   12850:	ldr	ip, [r3, #8]
   12854:	lsr	r0, ip, r1
   12858:	eor	r2, r0, r2
   1285c:	and	r0, r0, #1
   12860:	and	r2, r2, #1
   12864:	eor	ip, ip, r2, lsl r1
   12868:	str	ip, [r3, #8]
   1286c:	bx	lr
   12870:	ldr	r3, [pc, #8]	; 12880 <close_stdout@@Base+0x141c>
   12874:	add	r3, pc, r3
   12878:	add	r3, r3, #256	; 0x100
   1287c:	b	12844 <close_stdout@@Base+0x13e0>
   12880:	andeq	r2, r1, r8, ror #17
   12884:	subs	r3, r0, #0
   12888:	beq	12898 <close_stdout@@Base+0x1434>
   1288c:	ldr	r0, [r3, #4]
   12890:	str	r1, [r3, #4]
   12894:	bx	lr
   12898:	ldr	r3, [pc, #8]	; 128a8 <close_stdout@@Base+0x1444>
   1289c:	add	r3, pc, r3
   128a0:	add	r3, r3, #256	; 0x100
   128a4:	b	1288c <close_stdout@@Base+0x1428>
   128a8:	andeq	r2, r1, r0, asr #17
   128ac:	cmp	r0, #0
   128b0:	push	{r3, lr}
   128b4:	beq	128d8 <close_stdout@@Base+0x1474>
   128b8:	cmp	r2, #0
   128bc:	cmpne	r1, #0
   128c0:	mov	r3, #8
   128c4:	strne	r1, [r0, #40]	; 0x28
   128c8:	str	r3, [r0]
   128cc:	strne	r2, [r0, #44]	; 0x2c
   128d0:	popne	{r3, pc}
   128d4:	bl	1100c <abort@plt>
   128d8:	ldr	r0, [pc, #8]	; 128e8 <close_stdout@@Base+0x1484>
   128dc:	add	r0, pc, r0
   128e0:	add	r0, r0, #256	; 0x100
   128e4:	b	128b8 <close_stdout@@Base+0x1454>
   128e8:	andeq	r2, r1, r0, lsl #17
   128ec:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   128f0:	sub	sp, sp, #24
   128f4:	mov	r7, r0
   128f8:	mov	sl, r1
   128fc:	ldr	r4, [sp, #56]	; 0x38
   12900:	mov	r9, r2
   12904:	mov	r8, r3
   12908:	cmp	r4, #0
   1290c:	beq	12960 <close_stdout@@Base+0x14fc>
   12910:	bl	10f58 <__errno_location@plt>
   12914:	ldr	r3, [r4]
   12918:	add	lr, r4, #8
   1291c:	mov	r1, sl
   12920:	mov	r2, r9
   12924:	ldr	r6, [r0]
   12928:	mov	r5, r0
   1292c:	str	r3, [sp]
   12930:	mov	r0, r7
   12934:	ldr	ip, [r4, #4]
   12938:	mov	r3, r8
   1293c:	stmib	sp, {ip, lr}
   12940:	ldr	ip, [r4, #40]	; 0x28
   12944:	str	ip, [sp, #12]
   12948:	ldr	ip, [r4, #44]	; 0x2c
   1294c:	str	ip, [sp, #16]
   12950:	bl	118b4 <close_stdout@@Base+0x450>
   12954:	str	r6, [r5]
   12958:	add	sp, sp, #24
   1295c:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12960:	ldr	r4, [pc, #8]	; 12970 <close_stdout@@Base+0x150c>
   12964:	add	r4, pc, r4
   12968:	add	r4, r4, #256	; 0x100
   1296c:	b	12910 <close_stdout@@Base+0x14ac>
   12970:	strdeq	r2, [r1], -r8
   12974:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12978:	subs	r4, r3, #0
   1297c:	sub	sp, sp, #36	; 0x24
   12980:	mov	r7, r0
   12984:	mov	r6, r1
   12988:	mov	r5, r2
   1298c:	beq	12a48 <close_stdout@@Base+0x15e4>
   12990:	bl	10f58 <__errno_location@plt>
   12994:	ldr	r3, [r4]
   12998:	ldr	sl, [r4, #4]
   1299c:	add	r9, r4, #8
   129a0:	mov	r8, r0
   129a4:	mov	r0, #0
   129a8:	ldr	r2, [r8]
   129ac:	cmp	r5, r0
   129b0:	orreq	sl, sl, #1
   129b4:	str	r9, [sp, #8]
   129b8:	mov	r1, r0
   129bc:	stm	sp, {r3, sl}
   129c0:	mov	r3, r6
   129c4:	ldr	ip, [r4, #40]	; 0x28
   129c8:	str	r2, [sp, #28]
   129cc:	mov	r2, r7
   129d0:	str	ip, [sp, #12]
   129d4:	ldr	ip, [r4, #44]	; 0x2c
   129d8:	str	ip, [sp, #16]
   129dc:	bl	118b4 <close_stdout@@Base+0x450>
   129e0:	add	r1, r0, #1
   129e4:	mov	fp, r0
   129e8:	str	r1, [sp, #24]
   129ec:	mov	r0, r1
   129f0:	bl	1341c <close_stdout@@Base+0x1fb8>
   129f4:	ldr	lr, [r4]
   129f8:	str	sl, [sp, #4]
   129fc:	mov	r3, r6
   12a00:	str	r9, [sp, #8]
   12a04:	mov	r2, r7
   12a08:	str	lr, [sp]
   12a0c:	ldr	lr, [r4, #40]	; 0x28
   12a10:	ldr	r1, [sp, #24]
   12a14:	str	lr, [sp, #12]
   12a18:	ldr	lr, [r4, #44]	; 0x2c
   12a1c:	str	lr, [sp, #16]
   12a20:	str	r0, [sp, #24]
   12a24:	bl	118b4 <close_stdout@@Base+0x450>
   12a28:	ldr	r3, [sp, #28]
   12a2c:	cmp	r5, #0
   12a30:	str	r3, [r8]
   12a34:	ldr	ip, [sp, #24]
   12a38:	strne	fp, [r5]
   12a3c:	mov	r0, ip
   12a40:	add	sp, sp, #36	; 0x24
   12a44:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12a48:	ldr	r4, [pc, #8]	; 12a58 <close_stdout@@Base+0x15f4>
   12a4c:	add	r4, pc, r4
   12a50:	add	r4, r4, #256	; 0x100
   12a54:	b	12990 <close_stdout@@Base+0x152c>
   12a58:	andeq	r2, r1, r0, lsl r7
   12a5c:	mov	r3, r2
   12a60:	mov	r2, #0
   12a64:	b	12974 <close_stdout@@Base+0x1510>
   12a68:	ldr	r2, [pc, #152]	; 12b08 <close_stdout@@Base+0x16a4>
   12a6c:	push	{r3, r4, r5, r6, r7, lr}
   12a70:	add	r2, pc, r2
   12a74:	ldr	r3, [pc, #144]	; 12b0c <close_stdout@@Base+0x16a8>
   12a78:	ldr	r6, [r2]
   12a7c:	add	r3, pc, r3
   12a80:	cmp	r6, #1
   12a84:	ldr	r7, [r3]
   12a88:	movhi	r4, #1
   12a8c:	movhi	r5, r7
   12a90:	bls	12aac <close_stdout@@Base+0x1648>
   12a94:	ldr	r0, [r5, #12]
   12a98:	add	r4, r4, #1
   12a9c:	bl	10e14 <free@plt>
   12aa0:	cmp	r4, r6
   12aa4:	add	r5, r5, #8
   12aa8:	bne	12a94 <close_stdout@@Base+0x1630>
   12aac:	ldr	r4, [pc, #92]	; 12b10 <close_stdout@@Base+0x16ac>
   12ab0:	ldr	r0, [r7, #4]
   12ab4:	add	r4, pc, r4
   12ab8:	cmp	r0, r4
   12abc:	beq	12ad4 <close_stdout@@Base+0x1670>
   12ac0:	bl	10e14 <free@plt>
   12ac4:	ldr	r3, [pc, #72]	; 12b14 <close_stdout@@Base+0x16b0>
   12ac8:	mov	r2, #256	; 0x100
   12acc:	add	r3, pc, r3
   12ad0:	stmib	r3, {r2, r4}
   12ad4:	ldr	r4, [pc, #60]	; 12b18 <close_stdout@@Base+0x16b4>
   12ad8:	add	r4, pc, r4
   12adc:	add	r5, r4, #4
   12ae0:	cmp	r7, r5
   12ae4:	beq	12af4 <close_stdout@@Base+0x1690>
   12ae8:	mov	r0, r7
   12aec:	bl	10e14 <free@plt>
   12af0:	str	r5, [r4]
   12af4:	ldr	r3, [pc, #32]	; 12b1c <close_stdout@@Base+0x16b8>
   12af8:	mov	r2, #1
   12afc:	add	r3, pc, r3
   12b00:	str	r2, [r3]
   12b04:	pop	{r3, r4, r5, r6, r7, pc}
   12b08:	muleq	r1, ip, r6
   12b0c:	andeq	r2, r1, r4, asr #13
   12b10:	andeq	r2, r1, r8, lsr #13
   12b14:	andeq	r2, r1, r4, ror r6
   12b18:	andeq	r2, r1, r8, ror #12
   12b1c:	andeq	r2, r1, r0, lsl r6
   12b20:	ldr	r3, [pc, #12]	; 12b34 <close_stdout@@Base+0x16d0>
   12b24:	mvn	r2, #0
   12b28:	add	r3, pc, r3
   12b2c:	add	r3, r3, #256	; 0x100
   12b30:	b	125dc <close_stdout@@Base+0x1178>
   12b34:	andeq	r2, r1, r4, lsr r6
   12b38:	ldr	r3, [pc, #8]	; 12b48 <close_stdout@@Base+0x16e4>
   12b3c:	add	r3, pc, r3
   12b40:	add	r3, r3, #256	; 0x100
   12b44:	b	125dc <close_stdout@@Base+0x1178>
   12b48:	andeq	r2, r1, r0, lsr #12
   12b4c:	mov	r1, r0
   12b50:	mov	r0, #0
   12b54:	b	12b20 <close_stdout@@Base+0x16bc>
   12b58:	mov	r2, r1
   12b5c:	mov	r1, r0
   12b60:	mov	r0, #0
   12b64:	b	12b38 <close_stdout@@Base+0x16d4>
   12b68:	ldr	r3, [pc, #92]	; 12bcc <close_stdout@@Base+0x1768>
   12b6c:	ldr	ip, [pc, #92]	; 12bd0 <close_stdout@@Base+0x176c>
   12b70:	add	r3, pc, r3
   12b74:	push	{r4, r5, r6, r7, lr}
   12b78:	sub	sp, sp, #60	; 0x3c
   12b7c:	ldr	r4, [r3, ip]
   12b80:	add	r5, sp, #4
   12b84:	mov	r7, r2
   12b88:	mov	r6, r0
   12b8c:	mov	r0, r5
   12b90:	ldr	r3, [r4]
   12b94:	str	r3, [sp, #52]	; 0x34
   12b98:	bl	116fc <close_stdout@@Base+0x298>
   12b9c:	mov	r3, r5
   12ba0:	mvn	r2, #0
   12ba4:	mov	r0, r6
   12ba8:	mov	r1, r7
   12bac:	bl	125dc <close_stdout@@Base+0x1178>
   12bb0:	ldr	r2, [sp, #52]	; 0x34
   12bb4:	ldr	r3, [r4]
   12bb8:	cmp	r2, r3
   12bbc:	bne	12bc8 <close_stdout@@Base+0x1764>
   12bc0:	add	sp, sp, #60	; 0x3c
   12bc4:	pop	{r4, r5, r6, r7, pc}
   12bc8:	bl	10e5c <__stack_chk_fail@plt>
   12bcc:	andeq	r2, r1, r8, lsl #9
   12bd0:	ldrdeq	r0, [r0], -r8
   12bd4:	ldr	ip, [pc, #96]	; 12c3c <close_stdout@@Base+0x17d8>
   12bd8:	push	{r4, r5, r6, r7, r8, lr}
   12bdc:	add	ip, pc, ip
   12be0:	ldr	lr, [pc, #88]	; 12c40 <close_stdout@@Base+0x17dc>
   12be4:	sub	sp, sp, #56	; 0x38
   12be8:	mov	r8, r3
   12bec:	add	r5, sp, #4
   12bf0:	mov	r7, r2
   12bf4:	mov	r6, r0
   12bf8:	ldr	r4, [ip, lr]
   12bfc:	mov	r0, r5
   12c00:	ldr	r3, [r4]
   12c04:	str	r3, [sp, #52]	; 0x34
   12c08:	bl	116fc <close_stdout@@Base+0x298>
   12c0c:	mov	r2, r8
   12c10:	mov	r3, r5
   12c14:	mov	r0, r6
   12c18:	mov	r1, r7
   12c1c:	bl	125dc <close_stdout@@Base+0x1178>
   12c20:	ldr	r2, [sp, #52]	; 0x34
   12c24:	ldr	r3, [r4]
   12c28:	cmp	r2, r3
   12c2c:	bne	12c38 <close_stdout@@Base+0x17d4>
   12c30:	add	sp, sp, #56	; 0x38
   12c34:	pop	{r4, r5, r6, r7, r8, pc}
   12c38:	bl	10e5c <__stack_chk_fail@plt>
   12c3c:	andeq	r2, r1, ip, lsl r4
   12c40:	ldrdeq	r0, [r0], -r8
   12c44:	mov	r2, r1
   12c48:	mov	r1, r0
   12c4c:	mov	r0, #0
   12c50:	b	12b68 <close_stdout@@Base+0x1704>
   12c54:	mov	ip, r1
   12c58:	mov	r3, r2
   12c5c:	mov	r1, r0
   12c60:	mov	r2, ip
   12c64:	mov	r0, #0
   12c68:	b	12bd4 <close_stdout@@Base+0x1770>
   12c6c:	push	{r4, r5, r6, r7, r8, lr}
   12c70:	mov	r5, r2
   12c74:	ldr	lr, [pc, #136]	; 12d04 <close_stdout@@Base+0x18a0>
   12c78:	mov	r7, r0
   12c7c:	mov	r6, r1
   12c80:	ldr	r4, [pc, #128]	; 12d08 <close_stdout@@Base+0x18a4>
   12c84:	add	lr, pc, lr
   12c88:	sub	sp, sp, #56	; 0x38
   12c8c:	add	lr, lr, #256	; 0x100
   12c90:	ldr	r8, [pc, #116]	; 12d0c <close_stdout@@Base+0x18a8>
   12c94:	add	r4, pc, r4
   12c98:	add	ip, sp, #4
   12c9c:	ldm	lr!, {r0, r1, r2, r3}
   12ca0:	ldr	r4, [r4, r8]
   12ca4:	stmia	ip!, {r0, r1, r2, r3}
   12ca8:	ldm	lr!, {r0, r1, r2, r3}
   12cac:	ldr	r8, [r4]
   12cb0:	stmia	ip!, {r0, r1, r2, r3}
   12cb4:	ldm	lr, {r0, r1, r2, r3}
   12cb8:	str	r8, [sp, #52]	; 0x34
   12cbc:	stm	ip, {r0, r1, r2, r3}
   12cc0:	mov	r1, r5
   12cc4:	add	r5, sp, #4
   12cc8:	mov	r2, #1
   12ccc:	mov	r0, r5
   12cd0:	bl	12838 <close_stdout@@Base+0x13d4>
   12cd4:	mov	r2, r6
   12cd8:	mov	r3, r5
   12cdc:	mov	r1, r7
   12ce0:	mov	r0, #0
   12ce4:	bl	125dc <close_stdout@@Base+0x1178>
   12ce8:	ldr	r2, [sp, #52]	; 0x34
   12cec:	ldr	r3, [r4]
   12cf0:	cmp	r2, r3
   12cf4:	bne	12d00 <close_stdout@@Base+0x189c>
   12cf8:	add	sp, sp, #56	; 0x38
   12cfc:	pop	{r4, r5, r6, r7, r8, pc}
   12d00:	bl	10e5c <__stack_chk_fail@plt>
   12d04:	ldrdeq	r2, [r1], -r8
   12d08:	andeq	r2, r1, r4, ror #6
   12d0c:	ldrdeq	r0, [r0], -r8
   12d10:	mov	r2, r1
   12d14:	mvn	r1, #0
   12d18:	b	12c6c <close_stdout@@Base+0x1808>
   12d1c:	mov	r1, #58	; 0x3a
   12d20:	b	12d10 <close_stdout@@Base+0x18ac>
   12d24:	mov	r2, #58	; 0x3a
   12d28:	b	12c6c <close_stdout@@Base+0x1808>
   12d2c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12d30:	mov	r5, r2
   12d34:	ldr	lr, [pc, #144]	; 12dcc <close_stdout@@Base+0x1968>
   12d38:	mov	r8, r0
   12d3c:	mov	r9, r1
   12d40:	mov	r7, r3
   12d44:	add	lr, pc, lr
   12d48:	ldr	r4, [pc, #128]	; 12dd0 <close_stdout@@Base+0x196c>
   12d4c:	add	lr, lr, #256	; 0x100
   12d50:	sub	sp, sp, #56	; 0x38
   12d54:	ldr	sl, [pc, #120]	; 12dd4 <close_stdout@@Base+0x1970>
   12d58:	add	r4, pc, r4
   12d5c:	ldm	lr!, {r0, r1, r2, r3}
   12d60:	add	ip, sp, #4
   12d64:	ldr	r4, [r4, sl]
   12d68:	ldr	r6, [sp, #88]	; 0x58
   12d6c:	stmia	ip!, {r0, r1, r2, r3}
   12d70:	ldm	lr!, {r0, r1, r2, r3}
   12d74:	ldr	sl, [r4]
   12d78:	stmia	ip!, {r0, r1, r2, r3}
   12d7c:	ldm	lr, {r0, r1, r2, r3}
   12d80:	str	sl, [sp, #52]	; 0x34
   12d84:	stm	ip, {r0, r1, r2, r3}
   12d88:	mov	r2, r5
   12d8c:	add	r5, sp, #4
   12d90:	mov	r1, r9
   12d94:	mov	r0, r5
   12d98:	bl	128ac <close_stdout@@Base+0x1448>
   12d9c:	mov	r2, r6
   12da0:	mov	r3, r5
   12da4:	mov	r0, r8
   12da8:	mov	r1, r7
   12dac:	bl	125dc <close_stdout@@Base+0x1178>
   12db0:	ldr	r2, [sp, #52]	; 0x34
   12db4:	ldr	r3, [r4]
   12db8:	cmp	r2, r3
   12dbc:	bne	12dc8 <close_stdout@@Base+0x1964>
   12dc0:	add	sp, sp, #56	; 0x38
   12dc4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12dc8:	bl	10e5c <__stack_chk_fail@plt>
   12dcc:	andeq	r2, r1, r8, lsl r4
   12dd0:	andeq	r2, r1, r0, lsr #5
   12dd4:	ldrdeq	r0, [r0], -r8
   12dd8:	push	{lr}		; (str lr, [sp, #-4]!)
   12ddc:	sub	sp, sp, #12
   12de0:	mvn	ip, #0
   12de4:	str	ip, [sp]
   12de8:	bl	12d2c <close_stdout@@Base+0x18c8>
   12dec:	add	sp, sp, #12
   12df0:	pop	{pc}		; (ldr pc, [sp], #4)
   12df4:	mov	ip, r1
   12df8:	mov	r3, r2
   12dfc:	mov	r1, r0
   12e00:	mov	r2, ip
   12e04:	mov	r0, #0
   12e08:	b	12dd8 <close_stdout@@Base+0x1974>
   12e0c:	push	{lr}		; (str lr, [sp, #-4]!)
   12e10:	sub	sp, sp, #12
   12e14:	mov	lr, r1
   12e18:	mov	ip, r2
   12e1c:	mov	r1, r0
   12e20:	str	r3, [sp]
   12e24:	mov	r2, lr
   12e28:	mov	r3, ip
   12e2c:	mov	r0, #0
   12e30:	bl	12d2c <close_stdout@@Base+0x18c8>
   12e34:	add	sp, sp, #12
   12e38:	pop	{pc}		; (ldr pc, [sp], #4)
   12e3c:	ldr	r3, [pc, #12]	; 12e50 <close_stdout@@Base+0x19ec>
   12e40:	ldr	ip, [pc, #12]	; 12e54 <close_stdout@@Base+0x19f0>
   12e44:	add	r3, pc, r3
   12e48:	ldr	r3, [r3, ip]
   12e4c:	b	125dc <close_stdout@@Base+0x1178>
   12e50:			; <UNDEFINED> instruction: 0x000121b4
   12e54:	ldrdeq	r0, [r0], -r4
   12e58:	mov	r2, r1
   12e5c:	mov	r1, r0
   12e60:	mov	r0, #0
   12e64:	b	12e3c <close_stdout@@Base+0x19d8>
   12e68:	mvn	r2, #0
   12e6c:	b	12e3c <close_stdout@@Base+0x19d8>
   12e70:	mov	r1, r0
   12e74:	mov	r0, #0
   12e78:	b	12e68 <close_stdout@@Base+0x1a04>
   12e7c:	push	{r4, r5, r6, r7, lr}
   12e80:	cmp	r1, #0
   12e84:	sub	sp, sp, #36	; 0x24
   12e88:	ldr	r7, [pc, #896]	; 13210 <close_stdout@@Base+0x1dac>
   12e8c:	mov	ip, r3
   12e90:	mov	r5, r0
   12e94:	add	r7, pc, r7
   12e98:	ldr	r4, [sp, #56]	; 0x38
   12e9c:	ldr	r6, [sp, #60]	; 0x3c
   12ea0:	beq	131e4 <close_stdout@@Base+0x1d80>
   12ea4:	str	r2, [sp]
   12ea8:	mov	r3, r1
   12eac:	ldr	r2, [pc, #864]	; 13214 <close_stdout@@Base+0x1db0>
   12eb0:	mov	r1, #1
   12eb4:	str	ip, [sp, #4]
   12eb8:	add	r2, pc, r2
   12ebc:	bl	10fa0 <__fprintf_chk@plt>
   12ec0:	ldr	r1, [pc, #848]	; 13218 <close_stdout@@Base+0x1db4>
   12ec4:	mov	r2, #5
   12ec8:	mov	r0, #0
   12ecc:	add	r1, pc, r1
   12ed0:	bl	10e50 <dcgettext@plt>
   12ed4:	ldr	r2, [pc, #832]	; 1321c <close_stdout@@Base+0x1db8>
   12ed8:	movw	ip, #2013	; 0x7dd
   12edc:	mov	r1, #1
   12ee0:	ldr	r2, [r7, r2]
   12ee4:	str	ip, [sp]
   12ee8:	mov	r3, r0
   12eec:	mov	r0, r5
   12ef0:	bl	10fa0 <__fprintf_chk@plt>
   12ef4:	ldr	r1, [pc, #804]	; 13220 <close_stdout@@Base+0x1dbc>
   12ef8:	mov	r0, #0
   12efc:	mov	r2, #5
   12f00:	add	r1, pc, r1
   12f04:	bl	10e50 <dcgettext@plt>
   12f08:	mov	r1, r5
   12f0c:	bl	10de4 <fputs_unlocked@plt>
   12f10:	cmp	r6, #9
   12f14:	addls	pc, pc, r6, lsl #2
   12f18:	b	13200 <close_stdout@@Base+0x1d9c>
   12f1c:	b	12fb0 <close_stdout@@Base+0x1b4c>
   12f20:	b	12fb4 <close_stdout@@Base+0x1b50>
   12f24:	b	12fe4 <close_stdout@@Base+0x1b80>
   12f28:	b	13018 <close_stdout@@Base+0x1bb4>
   12f2c:	b	13054 <close_stdout@@Base+0x1bf0>
   12f30:	b	13094 <close_stdout@@Base+0x1c30>
   12f34:	b	130dc <close_stdout@@Base+0x1c78>
   12f38:	b	1312c <close_stdout@@Base+0x1cc8>
   12f3c:	b	13184 <close_stdout@@Base+0x1d20>
   12f40:	b	12f44 <close_stdout@@Base+0x1ae0>
   12f44:	ldr	r1, [pc, #728]	; 13224 <close_stdout@@Base+0x1dc0>
   12f48:	mov	r0, #0
   12f4c:	add	r1, pc, r1
   12f50:	mov	r2, #5
   12f54:	bl	10e50 <dcgettext@plt>
   12f58:	ldm	r4, {r3, ip}
   12f5c:	mov	r1, #1
   12f60:	str	ip, [sp]
   12f64:	ldr	ip, [r4, #8]
   12f68:	str	ip, [sp, #4]
   12f6c:	ldr	ip, [r4, #12]
   12f70:	str	ip, [sp, #8]
   12f74:	ldr	ip, [r4, #16]
   12f78:	str	ip, [sp, #12]
   12f7c:	ldr	ip, [r4, #20]
   12f80:	str	ip, [sp, #16]
   12f84:	ldr	ip, [r4, #24]
   12f88:	str	ip, [sp, #20]
   12f8c:	ldr	ip, [r4, #28]
   12f90:	str	ip, [sp, #24]
   12f94:	ldr	ip, [r4, #32]
   12f98:	str	ip, [sp, #28]
   12f9c:	mov	r2, r0
   12fa0:	mov	r0, r5
   12fa4:	bl	10fa0 <__fprintf_chk@plt>
   12fa8:	add	sp, sp, #36	; 0x24
   12fac:	pop	{r4, r5, r6, r7, pc}
   12fb0:	bl	1100c <abort@plt>
   12fb4:	ldr	r1, [pc, #620]	; 13228 <close_stdout@@Base+0x1dc4>
   12fb8:	mov	r2, #5
   12fbc:	mov	r0, #0
   12fc0:	add	r1, pc, r1
   12fc4:	bl	10e50 <dcgettext@plt>
   12fc8:	ldr	r3, [r4]
   12fcc:	mov	r1, #1
   12fd0:	mov	r2, r0
   12fd4:	mov	r0, r5
   12fd8:	add	sp, sp, #36	; 0x24
   12fdc:	pop	{r4, r5, r6, r7, lr}
   12fe0:	b	10fa0 <__fprintf_chk@plt>
   12fe4:	ldr	r1, [pc, #576]	; 1322c <close_stdout@@Base+0x1dc8>
   12fe8:	mov	r2, #5
   12fec:	mov	r0, #0
   12ff0:	add	r1, pc, r1
   12ff4:	bl	10e50 <dcgettext@plt>
   12ff8:	ldm	r4, {r3, ip}
   12ffc:	mov	r1, #1
   13000:	str	ip, [sp, #56]	; 0x38
   13004:	mov	r2, r0
   13008:	mov	r0, r5
   1300c:	add	sp, sp, #36	; 0x24
   13010:	pop	{r4, r5, r6, r7, lr}
   13014:	b	10fa0 <__fprintf_chk@plt>
   13018:	ldr	r1, [pc, #528]	; 13230 <close_stdout@@Base+0x1dcc>
   1301c:	mov	r2, #5
   13020:	mov	r0, #0
   13024:	add	r1, pc, r1
   13028:	bl	10e50 <dcgettext@plt>
   1302c:	ldm	r4, {r3, ip}
   13030:	mov	r1, #1
   13034:	str	ip, [sp, #56]	; 0x38
   13038:	ldr	ip, [r4, #8]
   1303c:	str	ip, [sp, #60]	; 0x3c
   13040:	mov	r2, r0
   13044:	mov	r0, r5
   13048:	add	sp, sp, #36	; 0x24
   1304c:	pop	{r4, r5, r6, r7, lr}
   13050:	b	10fa0 <__fprintf_chk@plt>
   13054:	ldr	r1, [pc, #472]	; 13234 <close_stdout@@Base+0x1dd0>
   13058:	mov	r2, #5
   1305c:	mov	r0, #0
   13060:	add	r1, pc, r1
   13064:	bl	10e50 <dcgettext@plt>
   13068:	ldm	r4, {r3, ip}
   1306c:	mov	r1, #1
   13070:	str	ip, [sp]
   13074:	ldr	ip, [r4, #8]
   13078:	str	ip, [sp, #4]
   1307c:	ldr	ip, [r4, #12]
   13080:	str	ip, [sp, #8]
   13084:	mov	r2, r0
   13088:	mov	r0, r5
   1308c:	bl	10fa0 <__fprintf_chk@plt>
   13090:	b	12fa8 <close_stdout@@Base+0x1b44>
   13094:	ldr	r1, [pc, #412]	; 13238 <close_stdout@@Base+0x1dd4>
   13098:	mov	r2, #5
   1309c:	mov	r0, #0
   130a0:	add	r1, pc, r1
   130a4:	bl	10e50 <dcgettext@plt>
   130a8:	ldm	r4, {r3, ip}
   130ac:	mov	r1, #1
   130b0:	str	ip, [sp]
   130b4:	ldr	ip, [r4, #8]
   130b8:	str	ip, [sp, #4]
   130bc:	ldr	ip, [r4, #12]
   130c0:	str	ip, [sp, #8]
   130c4:	ldr	ip, [r4, #16]
   130c8:	str	ip, [sp, #12]
   130cc:	mov	r2, r0
   130d0:	mov	r0, r5
   130d4:	bl	10fa0 <__fprintf_chk@plt>
   130d8:	b	12fa8 <close_stdout@@Base+0x1b44>
   130dc:	ldr	r1, [pc, #344]	; 1323c <close_stdout@@Base+0x1dd8>
   130e0:	mov	r2, #5
   130e4:	mov	r0, #0
   130e8:	add	r1, pc, r1
   130ec:	bl	10e50 <dcgettext@plt>
   130f0:	ldm	r4, {r3, ip}
   130f4:	mov	r1, #1
   130f8:	str	ip, [sp]
   130fc:	ldr	ip, [r4, #8]
   13100:	str	ip, [sp, #4]
   13104:	ldr	ip, [r4, #12]
   13108:	str	ip, [sp, #8]
   1310c:	ldr	ip, [r4, #16]
   13110:	str	ip, [sp, #12]
   13114:	ldr	ip, [r4, #20]
   13118:	str	ip, [sp, #16]
   1311c:	mov	r2, r0
   13120:	mov	r0, r5
   13124:	bl	10fa0 <__fprintf_chk@plt>
   13128:	b	12fa8 <close_stdout@@Base+0x1b44>
   1312c:	ldr	r1, [pc, #268]	; 13240 <close_stdout@@Base+0x1ddc>
   13130:	mov	r2, #5
   13134:	mov	r0, #0
   13138:	add	r1, pc, r1
   1313c:	bl	10e50 <dcgettext@plt>
   13140:	ldm	r4, {r3, ip}
   13144:	mov	r1, #1
   13148:	str	ip, [sp]
   1314c:	ldr	ip, [r4, #8]
   13150:	str	ip, [sp, #4]
   13154:	ldr	ip, [r4, #12]
   13158:	str	ip, [sp, #8]
   1315c:	ldr	ip, [r4, #16]
   13160:	str	ip, [sp, #12]
   13164:	ldr	ip, [r4, #20]
   13168:	str	ip, [sp, #16]
   1316c:	ldr	ip, [r4, #24]
   13170:	str	ip, [sp, #20]
   13174:	mov	r2, r0
   13178:	mov	r0, r5
   1317c:	bl	10fa0 <__fprintf_chk@plt>
   13180:	b	12fa8 <close_stdout@@Base+0x1b44>
   13184:	ldr	r1, [pc, #184]	; 13244 <close_stdout@@Base+0x1de0>
   13188:	mov	r2, #5
   1318c:	mov	r0, #0
   13190:	add	r1, pc, r1
   13194:	bl	10e50 <dcgettext@plt>
   13198:	ldm	r4, {r3, ip}
   1319c:	mov	r1, #1
   131a0:	str	ip, [sp]
   131a4:	ldr	ip, [r4, #8]
   131a8:	str	ip, [sp, #4]
   131ac:	ldr	ip, [r4, #12]
   131b0:	str	ip, [sp, #8]
   131b4:	ldr	ip, [r4, #16]
   131b8:	str	ip, [sp, #12]
   131bc:	ldr	ip, [r4, #20]
   131c0:	str	ip, [sp, #16]
   131c4:	ldr	ip, [r4, #24]
   131c8:	str	ip, [sp, #20]
   131cc:	ldr	ip, [r4, #28]
   131d0:	str	ip, [sp, #24]
   131d4:	mov	r2, r0
   131d8:	mov	r0, r5
   131dc:	bl	10fa0 <__fprintf_chk@plt>
   131e0:	b	12fa8 <close_stdout@@Base+0x1b44>
   131e4:	str	r3, [sp]
   131e8:	mov	r3, r2
   131ec:	ldr	r2, [pc, #84]	; 13248 <close_stdout@@Base+0x1de4>
   131f0:	mov	r1, #1
   131f4:	add	r2, pc, r2
   131f8:	bl	10fa0 <__fprintf_chk@plt>
   131fc:	b	12ec0 <close_stdout@@Base+0x1a5c>
   13200:	ldr	r1, [pc, #68]	; 1324c <close_stdout@@Base+0x1de8>
   13204:	mov	r0, #0
   13208:	add	r1, pc, r1
   1320c:	b	12f50 <close_stdout@@Base+0x1aec>
   13210:	andeq	r2, r1, r4, ror #2
   13214:	andeq	r1, r0, ip, ror #8
   13218:	andeq	r1, r0, ip, ror #8
   1321c:	andeq	r0, r0, r0, lsl #2
   13220:	andeq	r1, r0, ip, lsr r4
   13224:	andeq	r1, r0, r8, asr #11
   13228:	andeq	r1, r0, r8, asr #8
   1322c:	andeq	r1, r0, r8, lsr #8
   13230:	andeq	r1, r0, ip, lsl #8
   13234:	andeq	r1, r0, ip, ror #7
   13238:	andeq	r1, r0, ip, asr #7
   1323c:	andeq	r1, r0, r8, lsr #7
   13240:	andeq	r1, r0, r0, lsl #7
   13244:	andeq	r1, r0, r4, asr r3
   13248:	andeq	r1, r0, ip, lsr r1
   1324c:	andeq	r1, r0, r0, asr #6
   13250:	push	{r4, r5, lr}
   13254:	sub	sp, sp, #12
   13258:	ldr	r5, [sp, #24]
   1325c:	ldr	ip, [r5]
   13260:	cmp	ip, #0
   13264:	beq	13280 <close_stdout@@Base+0x1e1c>
   13268:	mov	lr, r5
   1326c:	mov	ip, #0
   13270:	ldr	r4, [lr, #4]!
   13274:	add	ip, ip, #1
   13278:	cmp	r4, #0
   1327c:	bne	13270 <close_stdout@@Base+0x1e0c>
   13280:	stm	sp, {r5, ip}
   13284:	bl	12e7c <close_stdout@@Base+0x1a18>
   13288:	add	sp, sp, #12
   1328c:	pop	{r4, r5, pc}
   13290:	push	{r4, r5, r6, r7, lr}
   13294:	sub	sp, sp, #60	; 0x3c
   13298:	ldr	r4, [pc, #100]	; 13304 <close_stdout@@Base+0x1ea0>
   1329c:	mov	ip, #0
   132a0:	ldr	r5, [pc, #96]	; 13308 <close_stdout@@Base+0x1ea4>
   132a4:	mov	lr, ip
   132a8:	add	r4, pc, r4
   132ac:	ldr	r6, [sp, #80]	; 0x50
   132b0:	ldr	r7, [r4, r5]
   132b4:	add	r5, sp, #12
   132b8:	ldr	r4, [r7]
   132bc:	str	r4, [sp, #52]	; 0x34
   132c0:	ldr	r4, [r6, ip]
   132c4:	cmp	r4, #0
   132c8:	str	r4, [r5, ip]
   132cc:	beq	132e0 <close_stdout@@Base+0x1e7c>
   132d0:	add	lr, lr, #1
   132d4:	add	ip, ip, #4
   132d8:	cmp	lr, #10
   132dc:	bne	132c0 <close_stdout@@Base+0x1e5c>
   132e0:	stm	sp, {r5, lr}
   132e4:	bl	12e7c <close_stdout@@Base+0x1a18>
   132e8:	ldr	r2, [sp, #52]	; 0x34
   132ec:	ldr	r3, [r7]
   132f0:	cmp	r2, r3
   132f4:	bne	13300 <close_stdout@@Base+0x1e9c>
   132f8:	add	sp, sp, #60	; 0x3c
   132fc:	pop	{r4, r5, r6, r7, pc}
   13300:	bl	10e5c <__stack_chk_fail@plt>
   13304:	andeq	r1, r1, r0, asr sp
   13308:	ldrdeq	r0, [r0], -r8
   1330c:	push	{r3}		; (str r3, [sp, #-4]!)
   13310:	push	{r4, lr}
   13314:	sub	sp, sp, #20
   13318:	ldr	lr, [pc, #72]	; 13368 <close_stdout@@Base+0x1f04>
   1331c:	add	ip, sp, #32
   13320:	ldr	r4, [pc, #68]	; 1336c <close_stdout@@Base+0x1f08>
   13324:	add	lr, pc, lr
   13328:	ldr	r3, [sp, #28]
   1332c:	ldr	r4, [lr, r4]
   13330:	str	ip, [sp]
   13334:	str	ip, [sp, #8]
   13338:	ldr	ip, [r4]
   1333c:	str	ip, [sp, #12]
   13340:	bl	13290 <close_stdout@@Base+0x1e2c>
   13344:	ldr	r2, [sp, #12]
   13348:	ldr	r3, [r4]
   1334c:	cmp	r2, r3
   13350:	bne	13364 <close_stdout@@Base+0x1f00>
   13354:	add	sp, sp, #20
   13358:	pop	{r4, lr}
   1335c:	add	sp, sp, #4
   13360:	bx	lr
   13364:	bl	10e5c <__stack_chk_fail@plt>
   13368:	ldrdeq	r1, [r1], -r4
   1336c:	ldrdeq	r0, [r0], -r8
   13370:	ldr	r1, [pc, #132]	; 133fc <close_stdout@@Base+0x1f98>
   13374:	mov	r2, #5
   13378:	push	{r4, lr}
   1337c:	add	r1, pc, r1
   13380:	mov	r0, #0
   13384:	ldr	r4, [pc, #116]	; 13400 <close_stdout@@Base+0x1f9c>
   13388:	bl	10e50 <dcgettext@plt>
   1338c:	ldr	r2, [pc, #112]	; 13404 <close_stdout@@Base+0x1fa0>
   13390:	add	r4, pc, r4
   13394:	add	r2, pc, r2
   13398:	mov	r1, r0
   1339c:	mov	r0, #1
   133a0:	bl	10f88 <__printf_chk@plt>
   133a4:	ldr	r1, [pc, #92]	; 13408 <close_stdout@@Base+0x1fa4>
   133a8:	mov	r2, #5
   133ac:	mov	r0, #0
   133b0:	add	r1, pc, r1
   133b4:	bl	10e50 <dcgettext@plt>
   133b8:	ldr	r2, [pc, #76]	; 1340c <close_stdout@@Base+0x1fa8>
   133bc:	ldr	r3, [pc, #76]	; 13410 <close_stdout@@Base+0x1fac>
   133c0:	add	r2, pc, r2
   133c4:	add	r3, pc, r3
   133c8:	mov	r1, r0
   133cc:	mov	r0, #1
   133d0:	bl	10f88 <__printf_chk@plt>
   133d4:	ldr	r1, [pc, #56]	; 13414 <close_stdout@@Base+0x1fb0>
   133d8:	mov	r0, #0
   133dc:	mov	r2, #5
   133e0:	add	r1, pc, r1
   133e4:	bl	10e50 <dcgettext@plt>
   133e8:	ldr	r3, [pc, #40]	; 13418 <close_stdout@@Base+0x1fb4>
   133ec:	ldr	r3, [r4, r3]
   133f0:	pop	{r4, lr}
   133f4:	ldr	r1, [r3]
   133f8:	b	10de4 <fputs_unlocked@plt>
   133fc:	andeq	r1, r0, r8, lsl #4
   13400:	andeq	r1, r1, r8, ror #24
   13404:	andeq	r1, r0, r8, lsl #4
   13408:	andeq	r1, r0, r4, lsl #4
   1340c:	andeq	r0, r0, r4, lsl #27
   13410:	muleq	r0, r0, sp
   13414:	andeq	r1, r0, r8, ror #3
   13418:	strdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   1341c:	push	{r4, lr}
   13420:	mov	r4, r0
   13424:	bl	10ef8 <malloc@plt>
   13428:	rsbs	r3, r0, #1
   1342c:	movcc	r3, #0
   13430:	cmp	r4, #0
   13434:	moveq	r3, #0
   13438:	cmp	r3, #0
   1343c:	popeq	{r4, pc}
   13440:	bl	13630 <close_stdout@@Base+0x21cc>
   13444:	push	{r3, r4, r5, lr}
   13448:	mov	r4, r0
   1344c:	mvn	r0, #0
   13450:	mov	r5, r1
   13454:	bl	13cd0 <close_stdout@@Base+0x286c>
   13458:	cmp	r0, r4
   1345c:	bcc	1346c <close_stdout@@Base+0x2008>
   13460:	mul	r0, r4, r5
   13464:	pop	{r3, r4, r5, lr}
   13468:	b	1341c <close_stdout@@Base+0x1fb8>
   1346c:	bl	13630 <close_stdout@@Base+0x21cc>
   13470:	b	1341c <close_stdout@@Base+0x1fb8>
   13474:	rsbs	r3, r1, #1
   13478:	push	{r4, lr}
   1347c:	movcc	r3, #0
   13480:	cmp	r0, #0
   13484:	mov	r4, r1
   13488:	moveq	r3, #0
   1348c:	cmp	r3, #0
   13490:	bne	134b4 <close_stdout@@Base+0x2050>
   13494:	bl	10e68 <realloc@plt>
   13498:	rsbs	r3, r0, #1
   1349c:	movcc	r3, #0
   134a0:	cmp	r4, #0
   134a4:	moveq	r3, #0
   134a8:	cmp	r3, #0
   134ac:	popeq	{r4, pc}
   134b0:	bl	13630 <close_stdout@@Base+0x21cc>
   134b4:	bl	10e14 <free@plt>
   134b8:	mov	r0, #0
   134bc:	pop	{r4, pc}
   134c0:	push	{r4, r5, r6, lr}
   134c4:	mov	r5, r1
   134c8:	mov	r6, r0
   134cc:	mov	r1, r2
   134d0:	mvn	r0, #0
   134d4:	mov	r4, r2
   134d8:	bl	13cd0 <close_stdout@@Base+0x286c>
   134dc:	cmp	r0, r5
   134e0:	bcc	134f4 <close_stdout@@Base+0x2090>
   134e4:	mov	r0, r6
   134e8:	mul	r1, r5, r4
   134ec:	pop	{r4, r5, r6, lr}
   134f0:	b	13474 <close_stdout@@Base+0x2010>
   134f4:	bl	13630 <close_stdout@@Base+0x21cc>
   134f8:	push	{r3, r4, r5, r6, r7, lr}
   134fc:	subs	r7, r0, #0
   13500:	mov	r5, r1
   13504:	mov	r6, r2
   13508:	ldr	r4, [r1]
   1350c:	beq	13544 <close_stdout@@Base+0x20e0>
   13510:	movw	r0, #43690	; 0xaaaa
   13514:	mov	r1, r2
   13518:	bfi	r0, r0, #16, #16
   1351c:	bl	13cd0 <close_stdout@@Base+0x286c>
   13520:	cmp	r4, r0
   13524:	addcc	r3, r4, #1
   13528:	addcc	r4, r4, r3, lsr #1
   1352c:	bcs	13568 <close_stdout@@Base+0x2104>
   13530:	str	r4, [r5]
   13534:	mov	r0, r7
   13538:	mul	r1, r6, r4
   1353c:	pop	{r3, r4, r5, r6, r7, lr}
   13540:	b	13474 <close_stdout@@Base+0x2010>
   13544:	cmp	r4, #0
   13548:	bne	13530 <close_stdout@@Base+0x20cc>
   1354c:	mov	r0, #64	; 0x40
   13550:	mov	r1, r2
   13554:	bl	13cd0 <close_stdout@@Base+0x286c>
   13558:	cmp	r0, #0
   1355c:	movne	r4, r0
   13560:	addeq	r4, r0, #1
   13564:	b	13530 <close_stdout@@Base+0x20cc>
   13568:	bl	13630 <close_stdout@@Base+0x21cc>
   1356c:	cmp	r0, #0
   13570:	push	{r3, lr}
   13574:	ldr	r3, [r1]
   13578:	beq	135a4 <close_stdout@@Base+0x2140>
   1357c:	movw	r2, #43689	; 0xaaa9
   13580:	movt	r2, #43690	; 0xaaaa
   13584:	cmp	r3, r2
   13588:	addls	r2, r3, #1
   1358c:	addls	r3, r3, r2, lsr #1
   13590:	bhi	135bc <close_stdout@@Base+0x2158>
   13594:	str	r3, [r1]
   13598:	mov	r1, r3
   1359c:	pop	{r3, lr}
   135a0:	b	13474 <close_stdout@@Base+0x2010>
   135a4:	cmp	r3, #0
   135a8:	moveq	r3, #64	; 0x40
   135ac:	str	r3, [r1]
   135b0:	mov	r1, r3
   135b4:	pop	{r3, lr}
   135b8:	b	13474 <close_stdout@@Base+0x2010>
   135bc:	bl	13630 <close_stdout@@Base+0x21cc>
   135c0:	push	{r4, lr}
   135c4:	mov	r4, r0
   135c8:	bl	1341c <close_stdout@@Base+0x1fb8>
   135cc:	mov	r2, r4
   135d0:	mov	r1, #0
   135d4:	pop	{r4, lr}
   135d8:	b	10f70 <memset@plt>
   135dc:	push	{r3, lr}
   135e0:	bl	10dd8 <calloc@plt>
   135e4:	cmp	r0, #0
   135e8:	popne	{r3, pc}
   135ec:	bl	13630 <close_stdout@@Base+0x21cc>
   135f0:	push	{r3, r4, r5, lr}
   135f4:	mov	r4, r1
   135f8:	mov	r5, r0
   135fc:	mov	r0, r1
   13600:	bl	1341c <close_stdout@@Base+0x1fb8>
   13604:	mov	r1, r5
   13608:	mov	r2, r4
   1360c:	pop	{r3, r4, r5, lr}
   13610:	b	10e2c <memcpy@plt>
   13614:	push	{r4, lr}
   13618:	mov	r4, r0
   1361c:	bl	10f40 <strlen@plt>
   13620:	add	r1, r0, #1
   13624:	mov	r0, r4
   13628:	pop	{r4, lr}
   1362c:	b	135f0 <close_stdout@@Base+0x218c>
   13630:	ldr	r3, [pc, #64]	; 13678 <close_stdout@@Base+0x2214>
   13634:	mov	r2, #5
   13638:	ldr	ip, [pc, #60]	; 1367c <close_stdout@@Base+0x2218>
   1363c:	mov	r0, #0
   13640:	add	r3, pc, r3
   13644:	ldr	r1, [pc, #52]	; 13680 <close_stdout@@Base+0x221c>
   13648:	push	{r4, lr}
   1364c:	add	r1, pc, r1
   13650:	ldr	r3, [r3, ip]
   13654:	ldr	r4, [r3]
   13658:	bl	10e50 <dcgettext@plt>
   1365c:	ldr	r2, [pc, #32]	; 13684 <close_stdout@@Base+0x2220>
   13660:	mov	r1, #0
   13664:	add	r2, pc, r2
   13668:	mov	r3, r0
   1366c:	mov	r0, r4
   13670:	bl	10ed4 <error@plt>
   13674:	bl	1100c <abort@plt>
   13678:			; <UNDEFINED> instruction: 0x000119b8
   1367c:	strdeq	r0, [r0], -r4
   13680:	andeq	r0, r0, ip, ror #31
   13684:	strdeq	r0, [r0], -r8
   13688:	push	{r4, r5, r6, lr}
   1368c:	mov	r4, r0
   13690:	bl	10ebc <__fpending@plt>
   13694:	mov	r6, r0
   13698:	mov	r0, r4
   1369c:	ldr	r4, [r4]
   136a0:	bl	13b28 <close_stdout@@Base+0x26c4>
   136a4:	and	r4, r4, #32
   136a8:	adds	r5, r0, #0
   136ac:	movne	r5, #1
   136b0:	cmp	r4, #0
   136b4:	bne	136d4 <close_stdout@@Base+0x2270>
   136b8:	cmp	r5, #0
   136bc:	beq	136cc <close_stdout@@Base+0x2268>
   136c0:	cmp	r6, #0
   136c4:	beq	136f0 <close_stdout@@Base+0x228c>
   136c8:	mvn	r4, #0
   136cc:	mov	r0, r4
   136d0:	pop	{r4, r5, r6, pc}
   136d4:	cmp	r5, #0
   136d8:	bne	136c8 <close_stdout@@Base+0x2264>
   136dc:	bl	10f58 <__errno_location@plt>
   136e0:	mvn	r4, #0
   136e4:	str	r5, [r0]
   136e8:	mov	r0, r4
   136ec:	pop	{r4, r5, r6, pc}
   136f0:	bl	10f58 <__errno_location@plt>
   136f4:	ldr	r4, [r0]
   136f8:	subs	r4, r4, #9
   136fc:	mvnne	r4, #0
   13700:	mov	r0, r4
   13704:	pop	{r4, r5, r6, pc}
   13708:	ldr	r3, [pc, #984]	; 13ae8 <close_stdout@@Base+0x2684>
   1370c:	mov	r0, #14
   13710:	ldr	r2, [pc, #980]	; 13aec <close_stdout@@Base+0x2688>
   13714:	add	r3, pc, r3
   13718:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1371c:	sub	sp, sp, #132	; 0x84
   13720:	ldr	r6, [r3, r2]
   13724:	ldr	r3, [r6]
   13728:	str	r3, [sp, #124]	; 0x7c
   1372c:	bl	10fe8 <nl_langinfo@plt>
   13730:	subs	r5, r0, #0
   13734:	beq	137e8 <close_stdout@@Base+0x2384>
   13738:	ldr	r3, [pc, #944]	; 13af0 <close_stdout@@Base+0x268c>
   1373c:	ldr	r4, [pc, r3]
   13740:	cmp	r4, #0
   13744:	beq	137f4 <close_stdout@@Base+0x2390>
   13748:	ldrb	r7, [r4]
   1374c:	cmp	r7, #0
   13750:	bne	13784 <close_stdout@@Base+0x2320>
   13754:	b	137bc <close_stdout@@Base+0x2358>
   13758:	mov	r0, r4
   1375c:	bl	10f40 <strlen@plt>
   13760:	add	r0, r0, #1
   13764:	add	r7, r4, r0
   13768:	mov	r0, r7
   1376c:	bl	10f40 <strlen@plt>
   13770:	add	r0, r0, #1
   13774:	add	r4, r7, r0
   13778:	ldrb	r7, [r7, r0]
   1377c:	cmp	r7, #0
   13780:	beq	137bc <close_stdout@@Base+0x2358>
   13784:	mov	r0, r5
   13788:	mov	r1, r4
   1378c:	bl	10dfc <strcmp@plt>
   13790:	cmp	r0, #0
   13794:	beq	137ac <close_stdout@@Base+0x2348>
   13798:	cmp	r7, #42	; 0x2a
   1379c:	bne	13758 <close_stdout@@Base+0x22f4>
   137a0:	ldrb	r3, [r4, #1]
   137a4:	cmp	r3, #0
   137a8:	bne	13758 <close_stdout@@Base+0x22f4>
   137ac:	mov	r0, r4
   137b0:	bl	10f40 <strlen@plt>
   137b4:	add	r0, r0, #1
   137b8:	add	r5, r4, r0
   137bc:	ldrb	r3, [r5]
   137c0:	cmp	r3, #0
   137c4:	ldreq	r5, [pc, #808]	; 13af4 <close_stdout@@Base+0x2690>
   137c8:	addeq	r5, pc, r5
   137cc:	ldr	r2, [sp, #124]	; 0x7c
   137d0:	mov	r0, r5
   137d4:	ldr	r3, [r6]
   137d8:	cmp	r2, r3
   137dc:	bne	13abc <close_stdout@@Base+0x2658>
   137e0:	add	sp, sp, #132	; 0x84
   137e4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   137e8:	ldr	r5, [pc, #776]	; 13af8 <close_stdout@@Base+0x2694>
   137ec:	add	r5, pc, r5
   137f0:	b	13738 <close_stdout@@Base+0x22d4>
   137f4:	ldr	r0, [pc, #768]	; 13afc <close_stdout@@Base+0x2698>
   137f8:	add	r0, pc, r0
   137fc:	bl	10eec <getenv@plt>
   13800:	subs	r8, r0, #0
   13804:	beq	13a94 <close_stdout@@Base+0x2630>
   13808:	ldrb	r3, [r8]
   1380c:	cmp	r3, #0
   13810:	beq	13a28 <close_stdout@@Base+0x25c4>
   13814:	bl	10f40 <strlen@plt>
   13818:	subs	sl, r0, #0
   1381c:	subne	r3, sl, #1
   13820:	bne	13a38 <close_stdout@@Base+0x25d4>
   13824:	mov	r9, #0
   13828:	mov	fp, r9
   1382c:	add	r9, sl, r9
   13830:	add	r0, r9, #14
   13834:	bl	10ef8 <malloc@plt>
   13838:	subs	r7, r0, #0
   1383c:	beq	13a88 <close_stdout@@Base+0x2624>
   13840:	mov	r1, r8
   13844:	mov	r2, sl
   13848:	bl	10e2c <memcpy@plt>
   1384c:	cmp	fp, #0
   13850:	add	ip, r7, r9
   13854:	movne	r3, #47	; 0x2f
   13858:	strbne	r3, [r7, sl]
   1385c:	ldr	r3, [pc, #668]	; 13b00 <close_stdout@@Base+0x269c>
   13860:	add	r3, pc, r3
   13864:	ldm	r3!, {r0, r1, r2}
   13868:	ldrh	r3, [r3]
   1386c:	str	r0, [r7, r9]
   13870:	mov	r0, r7
   13874:	str	r1, [ip, #4]
   13878:	mov	r1, #32768	; 0x8000
   1387c:	strh	r3, [ip, #12]
   13880:	str	r2, [ip, #8]
   13884:	bl	10ee0 <open64@plt>
   13888:	subs	r8, r0, #0
   1388c:	blt	13a50 <close_stdout@@Base+0x25ec>
   13890:	ldr	r1, [pc, #620]	; 13b04 <close_stdout@@Base+0x26a0>
   13894:	add	r1, pc, r1
   13898:	bl	10dcc <fdopen@plt>
   1389c:	subs	fp, r0, #0
   138a0:	beq	13aa8 <close_stdout@@Base+0x2644>
   138a4:	ldr	r0, [pc, #604]	; 13b08 <close_stdout@@Base+0x26a4>
   138a8:	add	sl, sp, #20
   138ac:	add	r9, sp, #72	; 0x48
   138b0:	mov	r8, #0
   138b4:	add	r0, pc, r0
   138b8:	str	r0, [sp, #12]
   138bc:	ldr	r3, [fp, #4]
   138c0:	ldr	r2, [fp, #8]
   138c4:	cmp	r3, r2
   138c8:	bcs	139b4 <close_stdout@@Base+0x2550>
   138cc:	add	r2, r3, #1
   138d0:	str	r2, [fp, #4]
   138d4:	ldrb	r0, [r3]
   138d8:	cmp	r0, #32
   138dc:	beq	138bc <close_stdout@@Base+0x2458>
   138e0:	sub	r3, r0, #9
   138e4:	cmp	r3, #1
   138e8:	bls	138bc <close_stdout@@Base+0x2458>
   138ec:	cmp	r0, #35	; 0x23
   138f0:	beq	139c8 <close_stdout@@Base+0x2564>
   138f4:	mov	r1, fp
   138f8:	bl	10f4c <ungetc@plt>
   138fc:	mov	r0, fp
   13900:	ldr	r1, [sp, #12]
   13904:	mov	r2, sl
   13908:	mov	r3, r9
   1390c:	bl	10f7c <fscanf@plt>
   13910:	cmp	r0, #1
   13914:	ble	139f8 <close_stdout@@Base+0x2594>
   13918:	mov	r0, sl
   1391c:	bl	10f40 <strlen@plt>
   13920:	str	r0, [sp, #8]
   13924:	mov	r0, r9
   13928:	bl	10f40 <strlen@plt>
   1392c:	cmp	r8, #0
   13930:	mov	r2, r0
   13934:	bne	13a5c <close_stdout@@Base+0x25f8>
   13938:	ldr	r3, [sp, #8]
   1393c:	str	r2, [sp]
   13940:	add	r8, r0, r3
   13944:	add	r0, r8, #3
   13948:	add	r8, r8, #2
   1394c:	bl	10ef8 <malloc@plt>
   13950:	ldr	r2, [sp]
   13954:	mov	r3, r0
   13958:	cmp	r3, #0
   1395c:	beq	13ac0 <close_stdout@@Base+0x265c>
   13960:	ldr	r0, [sp, #8]
   13964:	movw	r1, #65534	; 0xfffe
   13968:	movt	r1, #65535	; 0xffff
   1396c:	rsb	r2, r2, r8
   13970:	rsb	r1, r0, r1
   13974:	stm	sp, {r2, r3}
   13978:	add	r0, r1, r2
   1397c:	mov	r1, sl
   13980:	add	r0, r3, r0
   13984:	mov	r4, r3
   13988:	bl	10eb0 <strcpy@plt>
   1398c:	ldr	r2, [sp]
   13990:	ldr	r3, [sp, #4]
   13994:	mov	r1, r9
   13998:	sub	r0, r2, #1
   1399c:	add	r0, r3, r0
   139a0:	bl	10eb0 <strcpy@plt>
   139a4:	ldr	r3, [fp, #4]
   139a8:	ldr	r2, [fp, #8]
   139ac:	cmp	r3, r2
   139b0:	bcc	138cc <close_stdout@@Base+0x2468>
   139b4:	mov	r0, fp
   139b8:	bl	10fc4 <__uflow@plt>
   139bc:	cmn	r0, #1
   139c0:	beq	139f8 <close_stdout@@Base+0x2594>
   139c4:	b	138d8 <close_stdout@@Base+0x2474>
   139c8:	ldr	r3, [fp, #4]
   139cc:	ldr	r2, [fp, #8]
   139d0:	cmp	r3, r2
   139d4:	bcs	13adc <close_stdout@@Base+0x2678>
   139d8:	add	r2, r3, #1
   139dc:	str	r2, [fp, #4]
   139e0:	ldrb	r0, [r3]
   139e4:	cmp	r0, #10
   139e8:	cmnne	r0, #1
   139ec:	bne	139c8 <close_stdout@@Base+0x2564>
   139f0:	cmn	r0, #1
   139f4:	bne	138bc <close_stdout@@Base+0x2458>
   139f8:	mov	r0, fp
   139fc:	bl	13b28 <close_stdout@@Base+0x26c4>
   13a00:	cmp	r8, #0
   13a04:	beq	13a50 <close_stdout@@Base+0x25ec>
   13a08:	mov	r3, #0
   13a0c:	strb	r3, [r4, r8]
   13a10:	mov	r0, r7
   13a14:	bl	10e14 <free@plt>
   13a18:	ldr	r3, [pc, #236]	; 13b0c <close_stdout@@Base+0x26a8>
   13a1c:	add	r3, pc, r3
   13a20:	str	r4, [r3]
   13a24:	b	13748 <close_stdout@@Base+0x22e4>
   13a28:	ldr	r8, [pc, #224]	; 13b10 <close_stdout@@Base+0x26ac>
   13a2c:	mov	r3, #7
   13a30:	mov	sl, #8
   13a34:	add	r8, pc, r8
   13a38:	ldrb	r3, [r8, r3]
   13a3c:	cmp	r3, #47	; 0x2f
   13a40:	movne	r9, #1
   13a44:	movne	fp, r9
   13a48:	bne	1382c <close_stdout@@Base+0x23c8>
   13a4c:	b	13824 <close_stdout@@Base+0x23c0>
   13a50:	ldr	r4, [pc, #188]	; 13b14 <close_stdout@@Base+0x26b0>
   13a54:	add	r4, pc, r4
   13a58:	b	13a10 <close_stdout@@Base+0x25ac>
   13a5c:	ldr	r0, [sp, #8]
   13a60:	str	r2, [sp]
   13a64:	add	r3, r0, r2
   13a68:	mov	r0, r4
   13a6c:	add	r8, r3, r8
   13a70:	add	r1, r8, #3
   13a74:	add	r8, r8, #2
   13a78:	bl	10e68 <realloc@plt>
   13a7c:	ldr	r2, [sp]
   13a80:	mov	r3, r0
   13a84:	b	13958 <close_stdout@@Base+0x24f4>
   13a88:	ldr	r4, [pc, #136]	; 13b18 <close_stdout@@Base+0x26b4>
   13a8c:	add	r4, pc, r4
   13a90:	b	13a18 <close_stdout@@Base+0x25b4>
   13a94:	ldr	r8, [pc, #128]	; 13b1c <close_stdout@@Base+0x26b8>
   13a98:	mov	r3, #7
   13a9c:	mov	sl, #8
   13aa0:	add	r8, pc, r8
   13aa4:	b	13a38 <close_stdout@@Base+0x25d4>
   13aa8:	ldr	r4, [pc, #112]	; 13b20 <close_stdout@@Base+0x26bc>
   13aac:	mov	r0, r8
   13ab0:	add	r4, pc, r4
   13ab4:	bl	11018 <close@plt>
   13ab8:	b	13a10 <close_stdout@@Base+0x25ac>
   13abc:	bl	10e5c <__stack_chk_fail@plt>
   13ac0:	mov	r0, r4
   13ac4:	ldr	r4, [pc, #88]	; 13b24 <close_stdout@@Base+0x26c0>
   13ac8:	bl	10e14 <free@plt>
   13acc:	mov	r0, fp
   13ad0:	add	r4, pc, r4
   13ad4:	bl	13b28 <close_stdout@@Base+0x26c4>
   13ad8:	b	13a10 <close_stdout@@Base+0x25ac>
   13adc:	mov	r0, fp
   13ae0:	bl	10fc4 <__uflow@plt>
   13ae4:	b	139e4 <close_stdout@@Base+0x2580>
   13ae8:	andeq	r1, r1, r4, ror #17
   13aec:	ldrdeq	r0, [r0], -r8
   13af0:	andeq	r1, r1, r0, asr fp
   13af4:	muleq	r0, r0, lr
   13af8:	andeq	r0, r0, ip, lsl #16
   13afc:	andeq	r0, r0, r8, ror #28
   13b00:	andeq	r0, r0, r0, lsl lr
   13b04:	andeq	r0, r0, ip, ror #27
   13b08:	ldrdeq	r0, [r0], -r0	; <UNPREDICTABLE>
   13b0c:	andeq	r1, r1, r0, ror r8
   13b10:	andeq	r0, r0, r8, lsl ip
   13b14:	andeq	r0, r0, r4, lsr #11
   13b18:	andeq	r0, r0, ip, ror #10
   13b1c:	andeq	r0, r0, ip, lsr #23
   13b20:	andeq	r0, r0, r8, asr #10
   13b24:	andeq	r0, r0, r8, lsr #10
   13b28:	push	{r4, r5, r6, lr}
   13b2c:	sub	sp, sp, #8
   13b30:	mov	r4, r0
   13b34:	bl	10f94 <fileno@plt>
   13b38:	cmp	r0, #0
   13b3c:	mov	r0, r4
   13b40:	blt	13bbc <close_stdout@@Base+0x2758>
   13b44:	bl	10f10 <__freading@plt>
   13b48:	cmp	r0, #0
   13b4c:	bne	13b88 <close_stdout@@Base+0x2724>
   13b50:	mov	r0, r4
   13b54:	bl	13bc8 <close_stdout@@Base+0x2764>
   13b58:	cmp	r0, #0
   13b5c:	beq	13bb8 <close_stdout@@Base+0x2754>
   13b60:	bl	10f58 <__errno_location@plt>
   13b64:	ldr	r6, [r0]
   13b68:	mov	r5, r0
   13b6c:	mov	r0, r4
   13b70:	bl	10fac <fclose@plt>
   13b74:	cmp	r6, #0
   13b78:	mvnne	r0, #0
   13b7c:	strne	r6, [r5]
   13b80:	add	sp, sp, #8
   13b84:	pop	{r4, r5, r6, pc}
   13b88:	mov	r0, r4
   13b8c:	bl	10f94 <fileno@plt>
   13b90:	mov	r1, #1
   13b94:	mov	r2, #0
   13b98:	mov	r3, #0
   13b9c:	str	r1, [sp]
   13ba0:	bl	10e98 <lseek64@plt>
   13ba4:	mvn	r2, #0
   13ba8:	mvn	r3, #0
   13bac:	cmp	r1, r3
   13bb0:	cmpeq	r0, r2
   13bb4:	bne	13b50 <close_stdout@@Base+0x26ec>
   13bb8:	mov	r0, r4
   13bbc:	add	sp, sp, #8
   13bc0:	pop	{r4, r5, r6, lr}
   13bc4:	b	10fac <fclose@plt>
   13bc8:	push	{r4, lr}
   13bcc:	subs	r4, r0, #0
   13bd0:	sub	sp, sp, #8
   13bd4:	beq	13be4 <close_stdout@@Base+0x2780>
   13bd8:	bl	10f10 <__freading@plt>
   13bdc:	cmp	r0, #0
   13be0:	bne	13bf4 <close_stdout@@Base+0x2790>
   13be4:	mov	r0, r4
   13be8:	add	sp, sp, #8
   13bec:	pop	{r4, lr}
   13bf0:	b	10e08 <fflush@plt>
   13bf4:	ldr	r3, [r4]
   13bf8:	tst	r3, #256	; 0x100
   13bfc:	beq	13be4 <close_stdout@@Base+0x2780>
   13c00:	mov	r3, #1
   13c04:	mov	r0, r4
   13c08:	str	r3, [sp]
   13c0c:	mov	r2, #0
   13c10:	mov	r3, #0
   13c14:	bl	13c28 <close_stdout@@Base+0x27c4>
   13c18:	mov	r0, r4
   13c1c:	add	sp, sp, #8
   13c20:	pop	{r4, lr}
   13c24:	b	10e08 <fflush@plt>
   13c28:	push	{r4, r5, r6, r7, lr}
   13c2c:	sub	sp, sp, #20
   13c30:	ldmib	r0, {r1, ip}
   13c34:	mov	r6, r0
   13c38:	ldr	r4, [sp, #40]	; 0x28
   13c3c:	cmp	ip, r1
   13c40:	beq	13c58 <close_stdout@@Base+0x27f4>
   13c44:	str	r4, [sp, #40]	; 0x28
   13c48:	mov	r0, r6
   13c4c:	add	sp, sp, #20
   13c50:	pop	{r4, r5, r6, r7, lr}
   13c54:	b	10fb8 <fseeko64@plt>
   13c58:	ldr	ip, [r0, #20]
   13c5c:	ldr	r1, [r0, #16]
   13c60:	cmp	ip, r1
   13c64:	bne	13c44 <close_stdout@@Base+0x27e0>
   13c68:	ldr	r7, [r0, #36]	; 0x24
   13c6c:	cmp	r7, #0
   13c70:	bne	13c44 <close_stdout@@Base+0x27e0>
   13c74:	str	r2, [sp, #12]
   13c78:	mvn	r5, #0
   13c7c:	str	r3, [sp, #8]
   13c80:	bl	10f94 <fileno@plt>
   13c84:	str	r4, [sp]
   13c88:	mvn	r4, #0
   13c8c:	ldr	r2, [sp, #12]
   13c90:	ldr	r3, [sp, #8]
   13c94:	bl	10e98 <lseek64@plt>
   13c98:	mov	r2, r0
   13c9c:	mov	r3, r1
   13ca0:	cmp	r3, r5
   13ca4:	cmpeq	r2, r4
   13ca8:	beq	13cc8 <close_stdout@@Base+0x2864>
   13cac:	ldr	r1, [r6]
   13cb0:	mov	r0, r7
   13cb4:	strd	r2, [r6, #80]	; 0x50
   13cb8:	bic	r3, r1, #16
   13cbc:	str	r3, [r6]
   13cc0:	add	sp, sp, #20
   13cc4:	pop	{r4, r5, r6, r7, pc}
   13cc8:	mvn	r0, #0
   13ccc:	b	13cc0 <close_stdout@@Base+0x285c>
   13cd0:	subs	r2, r1, #1
   13cd4:	bxeq	lr
   13cd8:	bcc	13eb0 <close_stdout@@Base+0x2a4c>
   13cdc:	cmp	r0, r1
   13ce0:	bls	13e94 <close_stdout@@Base+0x2a30>
   13ce4:	tst	r1, r2
   13ce8:	beq	13ea0 <close_stdout@@Base+0x2a3c>
   13cec:	clz	r3, r0
   13cf0:	clz	r2, r1
   13cf4:	sub	r3, r2, r3
   13cf8:	rsbs	r3, r3, #31
   13cfc:	addne	r3, r3, r3, lsl #1
   13d00:	mov	r2, #0
   13d04:	addne	pc, pc, r3, lsl #2
   13d08:	nop	{0}
   13d0c:	cmp	r0, r1, lsl #31
   13d10:	adc	r2, r2, r2
   13d14:	subcs	r0, r0, r1, lsl #31
   13d18:	cmp	r0, r1, lsl #30
   13d1c:	adc	r2, r2, r2
   13d20:	subcs	r0, r0, r1, lsl #30
   13d24:	cmp	r0, r1, lsl #29
   13d28:	adc	r2, r2, r2
   13d2c:	subcs	r0, r0, r1, lsl #29
   13d30:	cmp	r0, r1, lsl #28
   13d34:	adc	r2, r2, r2
   13d38:	subcs	r0, r0, r1, lsl #28
   13d3c:	cmp	r0, r1, lsl #27
   13d40:	adc	r2, r2, r2
   13d44:	subcs	r0, r0, r1, lsl #27
   13d48:	cmp	r0, r1, lsl #26
   13d4c:	adc	r2, r2, r2
   13d50:	subcs	r0, r0, r1, lsl #26
   13d54:	cmp	r0, r1, lsl #25
   13d58:	adc	r2, r2, r2
   13d5c:	subcs	r0, r0, r1, lsl #25
   13d60:	cmp	r0, r1, lsl #24
   13d64:	adc	r2, r2, r2
   13d68:	subcs	r0, r0, r1, lsl #24
   13d6c:	cmp	r0, r1, lsl #23
   13d70:	adc	r2, r2, r2
   13d74:	subcs	r0, r0, r1, lsl #23
   13d78:	cmp	r0, r1, lsl #22
   13d7c:	adc	r2, r2, r2
   13d80:	subcs	r0, r0, r1, lsl #22
   13d84:	cmp	r0, r1, lsl #21
   13d88:	adc	r2, r2, r2
   13d8c:	subcs	r0, r0, r1, lsl #21
   13d90:	cmp	r0, r1, lsl #20
   13d94:	adc	r2, r2, r2
   13d98:	subcs	r0, r0, r1, lsl #20
   13d9c:	cmp	r0, r1, lsl #19
   13da0:	adc	r2, r2, r2
   13da4:	subcs	r0, r0, r1, lsl #19
   13da8:	cmp	r0, r1, lsl #18
   13dac:	adc	r2, r2, r2
   13db0:	subcs	r0, r0, r1, lsl #18
   13db4:	cmp	r0, r1, lsl #17
   13db8:	adc	r2, r2, r2
   13dbc:	subcs	r0, r0, r1, lsl #17
   13dc0:	cmp	r0, r1, lsl #16
   13dc4:	adc	r2, r2, r2
   13dc8:	subcs	r0, r0, r1, lsl #16
   13dcc:	cmp	r0, r1, lsl #15
   13dd0:	adc	r2, r2, r2
   13dd4:	subcs	r0, r0, r1, lsl #15
   13dd8:	cmp	r0, r1, lsl #14
   13ddc:	adc	r2, r2, r2
   13de0:	subcs	r0, r0, r1, lsl #14
   13de4:	cmp	r0, r1, lsl #13
   13de8:	adc	r2, r2, r2
   13dec:	subcs	r0, r0, r1, lsl #13
   13df0:	cmp	r0, r1, lsl #12
   13df4:	adc	r2, r2, r2
   13df8:	subcs	r0, r0, r1, lsl #12
   13dfc:	cmp	r0, r1, lsl #11
   13e00:	adc	r2, r2, r2
   13e04:	subcs	r0, r0, r1, lsl #11
   13e08:	cmp	r0, r1, lsl #10
   13e0c:	adc	r2, r2, r2
   13e10:	subcs	r0, r0, r1, lsl #10
   13e14:	cmp	r0, r1, lsl #9
   13e18:	adc	r2, r2, r2
   13e1c:	subcs	r0, r0, r1, lsl #9
   13e20:	cmp	r0, r1, lsl #8
   13e24:	adc	r2, r2, r2
   13e28:	subcs	r0, r0, r1, lsl #8
   13e2c:	cmp	r0, r1, lsl #7
   13e30:	adc	r2, r2, r2
   13e34:	subcs	r0, r0, r1, lsl #7
   13e38:	cmp	r0, r1, lsl #6
   13e3c:	adc	r2, r2, r2
   13e40:	subcs	r0, r0, r1, lsl #6
   13e44:	cmp	r0, r1, lsl #5
   13e48:	adc	r2, r2, r2
   13e4c:	subcs	r0, r0, r1, lsl #5
   13e50:	cmp	r0, r1, lsl #4
   13e54:	adc	r2, r2, r2
   13e58:	subcs	r0, r0, r1, lsl #4
   13e5c:	cmp	r0, r1, lsl #3
   13e60:	adc	r2, r2, r2
   13e64:	subcs	r0, r0, r1, lsl #3
   13e68:	cmp	r0, r1, lsl #2
   13e6c:	adc	r2, r2, r2
   13e70:	subcs	r0, r0, r1, lsl #2
   13e74:	cmp	r0, r1, lsl #1
   13e78:	adc	r2, r2, r2
   13e7c:	subcs	r0, r0, r1, lsl #1
   13e80:	cmp	r0, r1
   13e84:	adc	r2, r2, r2
   13e88:	subcs	r0, r0, r1
   13e8c:	mov	r0, r2
   13e90:	bx	lr
   13e94:	moveq	r0, #1
   13e98:	movne	r0, #0
   13e9c:	bx	lr
   13ea0:	clz	r2, r1
   13ea4:	rsb	r2, r2, #31
   13ea8:	lsr	r0, r0, r2
   13eac:	bx	lr
   13eb0:	cmp	r0, #0
   13eb4:	mvnne	r0, #0
   13eb8:	b	13edc <close_stdout@@Base+0x2a78>
   13ebc:	cmp	r1, #0
   13ec0:	beq	13eb0 <close_stdout@@Base+0x2a4c>
   13ec4:	push	{r0, r1, lr}
   13ec8:	bl	13cd0 <close_stdout@@Base+0x286c>
   13ecc:	pop	{r1, r2, lr}
   13ed0:	mul	r3, r2, r0
   13ed4:	sub	r1, r1, r3
   13ed8:	bx	lr
   13edc:	push	{r1, lr}
   13ee0:	mov	r0, #8
   13ee4:	bl	10df0 <raise@plt>
   13ee8:	pop	{r1, pc}
   13eec:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13ef0:	mov	r7, r0
   13ef4:	ldr	r6, [pc, #76]	; 13f48 <close_stdout@@Base+0x2ae4>
   13ef8:	mov	r8, r1
   13efc:	ldr	r5, [pc, #72]	; 13f4c <close_stdout@@Base+0x2ae8>
   13f00:	mov	r9, r2
   13f04:	add	r6, pc, r6
   13f08:	bl	10dac <fdopen@plt-0x20>
   13f0c:	add	r5, pc, r5
   13f10:	rsb	r6, r5, r6
   13f14:	asrs	r6, r6, #2
   13f18:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   13f1c:	sub	r5, r5, #4
   13f20:	mov	r4, #0
   13f24:	add	r4, r4, #1
   13f28:	ldr	r3, [r5, #4]!
   13f2c:	mov	r0, r7
   13f30:	mov	r1, r8
   13f34:	mov	r2, r9
   13f38:	blx	r3
   13f3c:	cmp	r4, r6
   13f40:	bne	13f24 <close_stdout@@Base+0x2ac0>
   13f44:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13f48:	ldrdeq	r0, [r1], -r0	; <UNPREDICTABLE>
   13f4c:	andeq	r0, r1, r4, asr #31
   13f50:	bx	lr
   13f54:	ldr	r3, [pc, #28]	; 13f78 <close_stdout@@Base+0x2b14>
   13f58:	mov	r1, #0
   13f5c:	ldr	r2, [pc, #24]	; 13f7c <close_stdout@@Base+0x2b18>
   13f60:	add	r3, pc, r3
   13f64:	ldr	r3, [r3, r2]
   13f68:	cmp	r3, #0
   13f6c:	ldrne	r2, [r3]
   13f70:	moveq	r2, r3
   13f74:	b	10f64 <__cxa_atexit@plt>
   13f78:	muleq	r1, r8, r0
   13f7c:	andeq	r0, r0, ip, ror #1

Disassembly of section .fini:

00013f80 <.fini>:
   13f80:	push	{r3, lr}
   13f84:	pop	{r3, pc}
