
centos-preinstalled/nl:     file format elf32-littlearm


Disassembly of section .init:

000110d8 <.init>:
   110d8:	push	{r3, lr}
   110dc:	bl	11d70 <__assert_fail@plt+0x990>
   110e0:	pop	{r3, pc}

Disassembly of section .plt:

000110e4 <fdopen@plt-0x14>:
   110e4:	push	{lr}		; (str lr, [sp, #-4]!)
   110e8:	ldr	lr, [pc, #4]	; 110f4 <fdopen@plt-0x4>
   110ec:	add	lr, pc, lr
   110f0:	ldr	pc, [lr, #8]!
   110f4:	andeq	r7, r1, ip, lsl #30

000110f8 <fdopen@plt>:
   110f8:	add	ip, pc, #0, 12
   110fc:	add	ip, ip, #94208	; 0x17000
   11100:	ldr	pc, [ip, #3852]!	; 0xf0c

00011104 <calloc@plt>:
   11104:	add	ip, pc, #0, 12
   11108:	add	ip, ip, #94208	; 0x17000
   1110c:	ldr	pc, [ip, #3844]!	; 0xf04

00011110 <fputs_unlocked@plt>:
   11110:	add	ip, pc, #0, 12
   11114:	add	ip, ip, #94208	; 0x17000
   11118:	ldr	pc, [ip, #3836]!	; 0xefc

0001111c <raise@plt>:
   1111c:	add	ip, pc, #0, 12
   11120:	add	ip, ip, #94208	; 0x17000
   11124:	ldr	pc, [ip, #3828]!	; 0xef4

00011128 <strcmp@plt>:
   11128:	add	ip, pc, #0, 12
   1112c:	add	ip, ip, #94208	; 0x17000
   11130:	ldr	pc, [ip, #3820]!	; 0xeec

00011134 <strtol@plt>:
   11134:	add	ip, pc, #0, 12
   11138:	add	ip, ip, #94208	; 0x17000
   1113c:	ldr	pc, [ip, #3812]!	; 0xee4

00011140 <posix_fadvise64@plt>:
   11140:	add	ip, pc, #0, 12
   11144:	add	ip, ip, #94208	; 0x17000
   11148:	ldr	pc, [ip, #3804]!	; 0xedc

0001114c <fflush@plt>:
   1114c:	add	ip, pc, #0, 12
   11150:	add	ip, ip, #94208	; 0x17000
   11154:	ldr	pc, [ip, #3796]!	; 0xed4

00011158 <free@plt>:
   11158:	add	ip, pc, #0, 12
   1115c:	add	ip, ip, #94208	; 0x17000
   11160:	ldr	pc, [ip, #3788]!	; 0xecc

00011164 <_exit@plt>:
   11164:	add	ip, pc, #0, 12
   11168:	add	ip, ip, #94208	; 0x17000
   1116c:	ldr	pc, [ip, #3780]!	; 0xec4

00011170 <memcpy@plt>:
   11170:	add	ip, pc, #0, 12
   11174:	add	ip, ip, #94208	; 0x17000
   11178:	ldr	pc, [ip, #3772]!	; 0xebc

0001117c <mbsinit@plt>:
   1117c:	add	ip, pc, #0, 12
   11180:	add	ip, ip, #94208	; 0x17000
   11184:	ldr	pc, [ip, #3764]!	; 0xeb4

00011188 <fwrite_unlocked@plt>:
   11188:	add	ip, pc, #0, 12
   1118c:	add	ip, ip, #94208	; 0x17000
   11190:	ldr	pc, [ip, #3756]!	; 0xeac

00011194 <memcmp@plt>:
   11194:	add	ip, pc, #0, 12
   11198:	add	ip, ip, #94208	; 0x17000
   1119c:	ldr	pc, [ip, #3748]!	; 0xea4

000111a0 <stpcpy@plt>:
   111a0:	add	ip, pc, #0, 12
   111a4:	add	ip, ip, #94208	; 0x17000
   111a8:	ldr	pc, [ip, #3740]!	; 0xe9c

000111ac <dcgettext@plt>:
   111ac:	add	ip, pc, #0, 12
   111b0:	add	ip, ip, #94208	; 0x17000
   111b4:	ldr	pc, [ip, #3732]!	; 0xe94

000111b8 <__stack_chk_fail@plt>:
   111b8:	add	ip, pc, #0, 12
   111bc:	add	ip, ip, #94208	; 0x17000
   111c0:	ldr	pc, [ip, #3724]!	; 0xe8c

000111c4 <realloc@plt>:
   111c4:	add	ip, pc, #0, 12
   111c8:	add	ip, ip, #94208	; 0x17000
   111cc:	ldr	pc, [ip, #3716]!	; 0xe84

000111d0 <textdomain@plt>:
   111d0:	add	ip, pc, #0, 12
   111d4:	add	ip, ip, #94208	; 0x17000
   111d8:	ldr	pc, [ip, #3708]!	; 0xe7c

000111dc <iswprint@plt>:
   111dc:	add	ip, pc, #0, 12
   111e0:	add	ip, ip, #94208	; 0x17000
   111e4:	ldr	pc, [ip, #3700]!	; 0xe74

000111e8 <fwrite@plt>:
   111e8:	add	ip, pc, #0, 12
   111ec:	add	ip, ip, #94208	; 0x17000
   111f0:	ldr	pc, [ip, #3692]!	; 0xe6c

000111f4 <lseek64@plt>:
   111f4:	add	ip, pc, #0, 12
   111f8:	add	ip, ip, #94208	; 0x17000
   111fc:	ldr	pc, [ip, #3684]!	; 0xe64

00011200 <__ctype_get_mb_cur_max@plt>:
   11200:	add	ip, pc, #0, 12
   11204:	add	ip, ip, #94208	; 0x17000
   11208:	ldr	pc, [ip, #3676]!	; 0xe5c

0001120c <strcpy@plt>:
   1120c:	add	ip, pc, #0, 12
   11210:	add	ip, ip, #94208	; 0x17000
   11214:	ldr	pc, [ip, #3668]!	; 0xe54

00011218 <__fpending@plt>:
   11218:	add	ip, pc, #0, 12
   1121c:	add	ip, ip, #94208	; 0x17000
   11220:	ldr	pc, [ip, #3660]!	; 0xe4c

00011224 <mbrtowc@plt>:
   11224:	add	ip, pc, #0, 12
   11228:	add	ip, ip, #94208	; 0x17000
   1122c:	ldr	pc, [ip, #3652]!	; 0xe44

00011230 <error@plt>:
   11230:	add	ip, pc, #0, 12
   11234:	add	ip, ip, #94208	; 0x17000
   11238:	ldr	pc, [ip, #3644]!	; 0xe3c

0001123c <open64@plt>:
   1123c:	add	ip, pc, #0, 12
   11240:	add	ip, ip, #94208	; 0x17000
   11244:	ldr	pc, [ip, #3636]!	; 0xe34

00011248 <getenv@plt>:
   11248:	add	ip, pc, #0, 12
   1124c:	add	ip, ip, #94208	; 0x17000
   11250:	ldr	pc, [ip, #3628]!	; 0xe2c

00011254 <malloc@plt>:
   11254:	add	ip, pc, #0, 12
   11258:	add	ip, ip, #94208	; 0x17000
   1125c:	ldr	pc, [ip, #3620]!	; 0xe24

00011260 <__libc_start_main@plt>:
   11260:	add	ip, pc, #0, 12
   11264:	add	ip, ip, #94208	; 0x17000
   11268:	ldr	pc, [ip, #3612]!	; 0xe1c

0001126c <__freading@plt>:
   1126c:	add	ip, pc, #0, 12
   11270:	add	ip, ip, #94208	; 0x17000
   11274:	ldr	pc, [ip, #3604]!	; 0xe14

00011278 <__gmon_start__@plt>:
   11278:	add	ip, pc, #0, 12
   1127c:	add	ip, ip, #94208	; 0x17000
   11280:	ldr	pc, [ip, #3596]!	; 0xe0c

00011284 <getopt_long@plt>:
   11284:	add	ip, pc, #0, 12
   11288:	add	ip, ip, #94208	; 0x17000
   1128c:	ldr	pc, [ip, #3588]!	; 0xe04

00011290 <__ctype_b_loc@plt>:
   11290:	add	ip, pc, #0, 12
   11294:	add	ip, ip, #94208	; 0x17000
   11298:	ldr	pc, [ip, #3580]!	; 0xdfc

0001129c <exit@plt>:
   1129c:	add	ip, pc, #0, 12
   112a0:	add	ip, ip, #94208	; 0x17000
   112a4:	ldr	pc, [ip, #3572]!	; 0xdf4

000112a8 <strlen@plt>:
   112a8:	add	ip, pc, #0, 12
   112ac:	add	ip, ip, #94208	; 0x17000
   112b0:	ldr	pc, [ip, #3564]!	; 0xdec

000112b4 <strchr@plt>:
   112b4:	add	ip, pc, #0, 12
   112b8:	add	ip, ip, #94208	; 0x17000
   112bc:	ldr	pc, [ip, #3556]!	; 0xde4

000112c0 <re_search@plt>:
   112c0:	add	ip, pc, #0, 12
   112c4:	add	ip, ip, #94208	; 0x17000
   112c8:	ldr	pc, [ip, #3548]!	; 0xddc

000112cc <ungetc@plt>:
   112cc:	add	ip, pc, #0, 12
   112d0:	add	ip, ip, #94208	; 0x17000
   112d4:	ldr	pc, [ip, #3540]!	; 0xdd4

000112d8 <__errno_location@plt>:
   112d8:	add	ip, pc, #0, 12
   112dc:	add	ip, ip, #94208	; 0x17000
   112e0:	ldr	pc, [ip, #3532]!	; 0xdcc

000112e4 <__cxa_atexit@plt>:
   112e4:	add	ip, pc, #0, 12
   112e8:	add	ip, ip, #94208	; 0x17000
   112ec:	ldr	pc, [ip, #3524]!	; 0xdc4

000112f0 <memset@plt>:
   112f0:	add	ip, pc, #0, 12
   112f4:	add	ip, ip, #94208	; 0x17000
   112f8:	ldr	pc, [ip, #3516]!	; 0xdbc

000112fc <fscanf@plt>:
   112fc:	add	ip, pc, #0, 12
   11300:	add	ip, ip, #94208	; 0x17000
   11304:	ldr	pc, [ip, #3508]!	; 0xdb4

00011308 <__printf_chk@plt>:
   11308:	add	ip, pc, #0, 12
   1130c:	add	ip, ip, #94208	; 0x17000
   11310:	ldr	pc, [ip, #3500]!	; 0xdac

00011314 <fileno@plt>:
   11314:	add	ip, pc, #0, 12
   11318:	add	ip, ip, #94208	; 0x17000
   1131c:	ldr	pc, [ip, #3492]!	; 0xda4

00011320 <__fprintf_chk@plt>:
   11320:	add	ip, pc, #0, 12
   11324:	add	ip, ip, #94208	; 0x17000
   11328:	ldr	pc, [ip, #3484]!	; 0xd9c

0001132c <fclose@plt>:
   1132c:	add	ip, pc, #0, 12
   11330:	add	ip, ip, #94208	; 0x17000
   11334:	ldr	pc, [ip, #3476]!	; 0xd94

00011338 <fseeko64@plt>:
   11338:	add	ip, pc, #0, 12
   1133c:	add	ip, ip, #94208	; 0x17000
   11340:	ldr	pc, [ip, #3468]!	; 0xd8c

00011344 <__uflow@plt>:
   11344:	add	ip, pc, #0, 12
   11348:	add	ip, ip, #94208	; 0x17000
   1134c:	ldr	pc, [ip, #3460]!	; 0xd84

00011350 <__overflow@plt>:
   11350:	add	ip, pc, #0, 12
   11354:	add	ip, ip, #94208	; 0x17000
   11358:	ldr	pc, [ip, #3452]!	; 0xd7c

0001135c <setlocale@plt>:
   1135c:	add	ip, pc, #0, 12
   11360:	add	ip, ip, #94208	; 0x17000
   11364:	ldr	pc, [ip, #3444]!	; 0xd74

00011368 <strrchr@plt>:
   11368:	add	ip, pc, #0, 12
   1136c:	add	ip, ip, #94208	; 0x17000
   11370:	ldr	pc, [ip, #3436]!	; 0xd6c

00011374 <nl_langinfo@plt>:
   11374:	add	ip, pc, #0, 12
   11378:	add	ip, ip, #94208	; 0x17000
   1137c:	ldr	pc, [ip, #3428]!	; 0xd64

00011380 <clearerr_unlocked@plt>:
   11380:	add	ip, pc, #0, 12
   11384:	add	ip, ip, #94208	; 0x17000
   11388:	ldr	pc, [ip, #3420]!	; 0xd5c

0001138c <__strtoll_internal@plt>:
   1138c:	add	ip, pc, #0, 12
   11390:	add	ip, ip, #94208	; 0x17000
   11394:	ldr	pc, [ip, #3412]!	; 0xd54

00011398 <fopen64@plt>:
   11398:	add	ip, pc, #0, 12
   1139c:	add	ip, ip, #94208	; 0x17000
   113a0:	ldr	pc, [ip, #3404]!	; 0xd4c

000113a4 <bindtextdomain@plt>:
   113a4:	add	ip, pc, #0, 12
   113a8:	add	ip, ip, #94208	; 0x17000
   113ac:	ldr	pc, [ip, #3396]!	; 0xd44

000113b0 <re_compile_pattern@plt>:
   113b0:	add	ip, pc, #0, 12
   113b4:	add	ip, ip, #94208	; 0x17000
   113b8:	ldr	pc, [ip, #3388]!	; 0xd3c

000113bc <strncmp@plt>:
   113bc:	add	ip, pc, #0, 12
   113c0:	add	ip, ip, #94208	; 0x17000
   113c4:	ldr	pc, [ip, #3380]!	; 0xd34

000113c8 <abort@plt>:
   113c8:	add	ip, pc, #0, 12
   113cc:	add	ip, ip, #94208	; 0x17000
   113d0:	ldr	pc, [ip, #3372]!	; 0xd2c

000113d4 <close@plt>:
   113d4:	add	ip, pc, #0, 12
   113d8:	add	ip, ip, #94208	; 0x17000
   113dc:	ldr	pc, [ip, #3364]!	; 0xd24

000113e0 <__assert_fail@plt>:
   113e0:	add	ip, pc, #0, 12
   113e4:	add	ip, ip, #94208	; 0x17000
   113e8:	ldr	pc, [ip, #3356]!	; 0xd1c

Disassembly of section .text:

000113ec <close_stdout@@Base-0x1440>:
   113ec:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   113f0:	mov	r7, r1
   113f4:	ldr	r8, [pc, #2140]	; 11c58 <__assert_fail@plt+0x878>
   113f8:	mov	r9, r0
   113fc:	ldr	r3, [pc, #2136]	; 11c5c <__assert_fail@plt+0x87c>
   11400:	sub	sp, sp, #60	; 0x3c
   11404:	add	r8, pc, r8
   11408:	ldr	r0, [r1]
   1140c:	ldr	r1, [pc, #2124]	; 11c60 <__assert_fail@plt+0x880>
   11410:	mov	fp, #1
   11414:	ldr	r3, [r8, r3]
   11418:	add	r1, pc, r1
   1141c:	str	r1, [sp, #32]
   11420:	add	r2, r1, #24
   11424:	str	r2, [sp, #36]	; 0x24
   11428:	ldr	r3, [r3]
   1142c:	ldr	r4, [pc, #2096]	; 11c64 <__assert_fail@plt+0x884>
   11430:	str	r3, [sp, #52]	; 0x34
   11434:	bl	12b2c <close_stdout@@Base+0x300>
   11438:	ldr	r1, [pc, #2088]	; 11c68 <__assert_fail@plt+0x888>
   1143c:	mov	r0, #6
   11440:	add	r4, pc, r4
   11444:	add	r1, pc, r1
   11448:	bl	1135c <setlocale@plt>
   1144c:	ldr	r1, [pc, #2072]	; 11c6c <__assert_fail@plt+0x88c>
   11450:	mov	r0, r4
   11454:	add	r1, pc, r1
   11458:	bl	113a4 <bindtextdomain@plt>
   1145c:	mov	r0, r4
   11460:	bl	111d0 <textdomain@plt>
   11464:	ldr	r3, [pc, #2052]	; 11c70 <__assert_fail@plt+0x890>
   11468:	ldr	r0, [r8, r3]
   1146c:	bl	170b8 <close_stdout@@Base+0x488c>
   11470:	ldr	r1, [pc, #2044]	; 11c74 <__assert_fail@plt+0x894>
   11474:	ldr	r2, [pc, #2044]	; 11c78 <__assert_fail@plt+0x898>
   11478:	mov	r0, #0
   1147c:	ldr	r3, [pc, #2040]	; 11c7c <__assert_fail@plt+0x89c>
   11480:	add	r1, pc, r1
   11484:	add	r2, pc, r2
   11488:	add	r3, pc, r3
   1148c:	add	r2, r2, #20
   11490:	add	r3, r3, #12
   11494:	strb	r0, [r1, #8]
   11498:	str	r2, [sp, #44]	; 0x2c
   1149c:	str	r3, [sp, #40]	; 0x28
   114a0:	ldr	r6, [pc, #2008]	; 11c80 <__assert_fail@plt+0x8a0>
   114a4:	mov	r5, #0
   114a8:	ldr	r4, [pc, #2004]	; 11c84 <__assert_fail@plt+0x8a4>
   114ac:	add	r6, pc, r6
   114b0:	add	r4, pc, r4
   114b4:	str	r5, [sp]
   114b8:	mov	r0, r9
   114bc:	mov	r1, r7
   114c0:	mov	r2, r6
   114c4:	mov	r3, r4
   114c8:	mov	sl, #0
   114cc:	bl	11284 <getopt_long@plt>
   114d0:	cmn	r0, #1
   114d4:	beq	11a4c <__assert_fail@plt+0x66c>
   114d8:	add	r0, r0, #3
   114dc:	cmp	r0, #122	; 0x7a
   114e0:	addls	pc, pc, r0, lsl #2
   114e4:	b	11a04 <__assert_fail@plt+0x624>
   114e8:	b	11900 <__assert_fail@plt+0x520>
   114ec:	b	118f8 <__assert_fail@plt+0x518>
   114f0:	b	11a04 <__assert_fail@plt+0x624>
   114f4:	b	11a04 <__assert_fail@plt+0x624>
   114f8:	b	11a04 <__assert_fail@plt+0x624>
   114fc:	b	11a04 <__assert_fail@plt+0x624>
   11500:	b	11a04 <__assert_fail@plt+0x624>
   11504:	b	11a04 <__assert_fail@plt+0x624>
   11508:	b	11a04 <__assert_fail@plt+0x624>
   1150c:	b	11a04 <__assert_fail@plt+0x624>
   11510:	b	11a04 <__assert_fail@plt+0x624>
   11514:	b	11a04 <__assert_fail@plt+0x624>
   11518:	b	11a04 <__assert_fail@plt+0x624>
   1151c:	b	11a04 <__assert_fail@plt+0x624>
   11520:	b	11a04 <__assert_fail@plt+0x624>
   11524:	b	11a04 <__assert_fail@plt+0x624>
   11528:	b	11a04 <__assert_fail@plt+0x624>
   1152c:	b	11a04 <__assert_fail@plt+0x624>
   11530:	b	11a04 <__assert_fail@plt+0x624>
   11534:	b	11a04 <__assert_fail@plt+0x624>
   11538:	b	11a04 <__assert_fail@plt+0x624>
   1153c:	b	11a04 <__assert_fail@plt+0x624>
   11540:	b	11a04 <__assert_fail@plt+0x624>
   11544:	b	11a04 <__assert_fail@plt+0x624>
   11548:	b	11a04 <__assert_fail@plt+0x624>
   1154c:	b	11a04 <__assert_fail@plt+0x624>
   11550:	b	11a04 <__assert_fail@plt+0x624>
   11554:	b	11a04 <__assert_fail@plt+0x624>
   11558:	b	11a04 <__assert_fail@plt+0x624>
   1155c:	b	11a04 <__assert_fail@plt+0x624>
   11560:	b	11a04 <__assert_fail@plt+0x624>
   11564:	b	11a04 <__assert_fail@plt+0x624>
   11568:	b	11a04 <__assert_fail@plt+0x624>
   1156c:	b	11a04 <__assert_fail@plt+0x624>
   11570:	b	11a04 <__assert_fail@plt+0x624>
   11574:	b	11a04 <__assert_fail@plt+0x624>
   11578:	b	11a04 <__assert_fail@plt+0x624>
   1157c:	b	11a04 <__assert_fail@plt+0x624>
   11580:	b	11a04 <__assert_fail@plt+0x624>
   11584:	b	11a04 <__assert_fail@plt+0x624>
   11588:	b	11a04 <__assert_fail@plt+0x624>
   1158c:	b	11a04 <__assert_fail@plt+0x624>
   11590:	b	11a04 <__assert_fail@plt+0x624>
   11594:	b	11a04 <__assert_fail@plt+0x624>
   11598:	b	11a04 <__assert_fail@plt+0x624>
   1159c:	b	11a04 <__assert_fail@plt+0x624>
   115a0:	b	11a04 <__assert_fail@plt+0x624>
   115a4:	b	11a04 <__assert_fail@plt+0x624>
   115a8:	b	11a04 <__assert_fail@plt+0x624>
   115ac:	b	11a04 <__assert_fail@plt+0x624>
   115b0:	b	11a04 <__assert_fail@plt+0x624>
   115b4:	b	11a04 <__assert_fail@plt+0x624>
   115b8:	b	11a04 <__assert_fail@plt+0x624>
   115bc:	b	11a04 <__assert_fail@plt+0x624>
   115c0:	b	11a04 <__assert_fail@plt+0x624>
   115c4:	b	11a04 <__assert_fail@plt+0x624>
   115c8:	b	11a04 <__assert_fail@plt+0x624>
   115cc:	b	11a04 <__assert_fail@plt+0x624>
   115d0:	b	11a04 <__assert_fail@plt+0x624>
   115d4:	b	11a04 <__assert_fail@plt+0x624>
   115d8:	b	11a04 <__assert_fail@plt+0x624>
   115dc:	b	11a04 <__assert_fail@plt+0x624>
   115e0:	b	11a04 <__assert_fail@plt+0x624>
   115e4:	b	11a04 <__assert_fail@plt+0x624>
   115e8:	b	11a04 <__assert_fail@plt+0x624>
   115ec:	b	11a04 <__assert_fail@plt+0x624>
   115f0:	b	11a04 <__assert_fail@plt+0x624>
   115f4:	b	11a04 <__assert_fail@plt+0x624>
   115f8:	b	11a04 <__assert_fail@plt+0x624>
   115fc:	b	11a04 <__assert_fail@plt+0x624>
   11600:	b	11a04 <__assert_fail@plt+0x624>
   11604:	b	11a04 <__assert_fail@plt+0x624>
   11608:	b	11a04 <__assert_fail@plt+0x624>
   1160c:	b	11a04 <__assert_fail@plt+0x624>
   11610:	b	11a04 <__assert_fail@plt+0x624>
   11614:	b	11a04 <__assert_fail@plt+0x624>
   11618:	b	11a04 <__assert_fail@plt+0x624>
   1161c:	b	11a04 <__assert_fail@plt+0x624>
   11620:	b	11a04 <__assert_fail@plt+0x624>
   11624:	b	11a04 <__assert_fail@plt+0x624>
   11628:	b	11a04 <__assert_fail@plt+0x624>
   1162c:	b	11a04 <__assert_fail@plt+0x624>
   11630:	b	11a04 <__assert_fail@plt+0x624>
   11634:	b	11a04 <__assert_fail@plt+0x624>
   11638:	b	11a04 <__assert_fail@plt+0x624>
   1163c:	b	11a04 <__assert_fail@plt+0x624>
   11640:	b	11a04 <__assert_fail@plt+0x624>
   11644:	b	11a04 <__assert_fail@plt+0x624>
   11648:	b	11a04 <__assert_fail@plt+0x624>
   1164c:	b	11a04 <__assert_fail@plt+0x624>
   11650:	b	11a04 <__assert_fail@plt+0x624>
   11654:	b	11a04 <__assert_fail@plt+0x624>
   11658:	b	11a04 <__assert_fail@plt+0x624>
   1165c:	b	11a04 <__assert_fail@plt+0x624>
   11660:	b	11a04 <__assert_fail@plt+0x624>
   11664:	b	11a04 <__assert_fail@plt+0x624>
   11668:	b	11a04 <__assert_fail@plt+0x624>
   1166c:	b	11a04 <__assert_fail@plt+0x624>
   11670:	b	11a04 <__assert_fail@plt+0x624>
   11674:	b	11a04 <__assert_fail@plt+0x624>
   11678:	b	11a04 <__assert_fail@plt+0x624>
   1167c:	b	11968 <__assert_fail@plt+0x588>
   11680:	b	11a04 <__assert_fail@plt+0x624>
   11684:	b	1194c <__assert_fail@plt+0x56c>
   11688:	b	11a04 <__assert_fail@plt+0x624>
   1168c:	b	1199c <__assert_fail@plt+0x5bc>
   11690:	b	11a04 <__assert_fail@plt+0x624>
   11694:	b	118c4 <__assert_fail@plt+0x4e4>
   11698:	b	11840 <__assert_fail@plt+0x460>
   1169c:	b	11a04 <__assert_fail@plt+0x624>
   116a0:	b	11a04 <__assert_fail@plt+0x624>
   116a4:	b	117ec <__assert_fail@plt+0x40c>
   116a8:	b	11a04 <__assert_fail@plt+0x624>
   116ac:	b	11798 <__assert_fail@plt+0x3b8>
   116b0:	b	11a04 <__assert_fail@plt+0x624>
   116b4:	b	11784 <__assert_fail@plt+0x3a4>
   116b8:	b	11a04 <__assert_fail@plt+0x624>
   116bc:	b	11a04 <__assert_fail@plt+0x624>
   116c0:	b	11768 <__assert_fail@plt+0x388>
   116c4:	b	11a04 <__assert_fail@plt+0x624>
   116c8:	b	11a04 <__assert_fail@plt+0x624>
   116cc:	b	11720 <__assert_fail@plt+0x340>
   116d0:	b	116d4 <__assert_fail@plt+0x2f4>
   116d4:	ldr	ip, [pc, #1452]	; 11c88 <__assert_fail@plt+0x8a8>
   116d8:	mov	r1, #0
   116dc:	ldr	r0, [pc, #1448]	; 11c8c <__assert_fail@plt+0x8ac>
   116e0:	mov	r2, #10
   116e4:	add	r3, sp, #48	; 0x30
   116e8:	ldr	r4, [r8, ip]
   116ec:	add	r0, pc, r0
   116f0:	str	r0, [sp]
   116f4:	ldr	r0, [r4]
   116f8:	bl	155e4 <close_stdout@@Base+0x2db8>
   116fc:	cmp	r0, #0
   11700:	bne	11a0c <__assert_fail@plt+0x62c>
   11704:	ldr	r3, [sp, #48]	; 0x30
   11708:	cmp	r3, #0
   1170c:	ble	11a0c <__assert_fail@plt+0x62c>
   11710:	ldr	r2, [pc, #1400]	; 11c90 <__assert_fail@plt+0x8b0>
   11714:	add	r2, pc, r2
   11718:	str	r3, [r2]
   1171c:	b	114a0 <__assert_fail@plt+0xc0>
   11720:	ldr	ip, [pc, #1376]	; 11c88 <__assert_fail@plt+0x8a8>
   11724:	mov	r1, #0
   11728:	ldr	r3, [pc, #1380]	; 11c94 <__assert_fail@plt+0x8b4>
   1172c:	mov	r2, #10
   11730:	ldr	r0, [pc, #1376]	; 11c98 <__assert_fail@plt+0x8b8>
   11734:	ldr	r4, [r8, ip]
   11738:	add	r3, pc, r3
   1173c:	add	r0, pc, r0
   11740:	add	r3, r3, #16
   11744:	str	r0, [sp]
   11748:	ldr	r0, [r4]
   1174c:	bl	14b94 <close_stdout@@Base+0x2368>
   11750:	cmp	r0, #0
   11754:	beq	114a0 <__assert_fail@plt+0xc0>
   11758:	ldr	r1, [pc, #1340]	; 11c9c <__assert_fail@plt+0x8bc>
   1175c:	mov	r0, #0
   11760:	add	r1, pc, r1
   11764:	b	11894 <__assert_fail@plt+0x4b4>
   11768:	ldr	r2, [pc, #1304]	; 11c88 <__assert_fail@plt+0x8a8>
   1176c:	ldr	r3, [pc, #1324]	; 11ca0 <__assert_fail@plt+0x8c0>
   11770:	ldr	r2, [r8, r2]
   11774:	add	r3, pc, r3
   11778:	ldr	r2, [r2]
   1177c:	str	r2, [r3, #4]
   11780:	b	114a0 <__assert_fail@plt+0xc0>
   11784:	ldr	r3, [pc, #1304]	; 11ca4 <__assert_fail@plt+0x8c4>
   11788:	mov	r2, #0
   1178c:	add	r3, pc, r3
   11790:	strb	r2, [r3, #32]
   11794:	b	114a0 <__assert_fail@plt+0xc0>
   11798:	ldr	r3, [pc, #1256]	; 11c88 <__assert_fail@plt+0x8a8>
   1179c:	ldr	r4, [r8, r3]
   117a0:	ldr	r3, [r4]
   117a4:	ldrb	r2, [r3]
   117a8:	cmp	r2, #108	; 0x6c
   117ac:	beq	11a1c <__assert_fail@plt+0x63c>
   117b0:	cmp	r2, #114	; 0x72
   117b4:	bne	11c00 <__assert_fail@plt+0x820>
   117b8:	ldrb	r2, [r3, #1]
   117bc:	cmp	r2, #110	; 0x6e
   117c0:	beq	11be0 <__assert_fail@plt+0x800>
   117c4:	cmp	r2, #122	; 0x7a
   117c8:	bne	11c00 <__assert_fail@plt+0x820>
   117cc:	ldrb	r3, [r3, #2]
   117d0:	cmp	r3, #0
   117d4:	bne	11c00 <__assert_fail@plt+0x820>
   117d8:	ldr	r3, [pc, #1224]	; 11ca8 <__assert_fail@plt+0x8c8>
   117dc:	ldr	r1, [sp, #44]	; 0x2c
   117e0:	add	r3, pc, r3
   117e4:	str	r1, [r3]
   117e8:	b	114a0 <__assert_fail@plt+0xc0>
   117ec:	ldr	ip, [pc, #1172]	; 11c88 <__assert_fail@plt+0x8a8>
   117f0:	mov	r1, #0
   117f4:	ldr	r0, [pc, #1200]	; 11cac <__assert_fail@plt+0x8cc>
   117f8:	mov	r2, #10
   117fc:	ldr	r3, [sp, #36]	; 0x24
   11800:	ldr	r4, [r8, ip]
   11804:	add	r0, pc, r0
   11808:	str	r0, [sp]
   1180c:	ldr	r0, [r4]
   11810:	bl	14b94 <close_stdout@@Base+0x2368>
   11814:	cmp	r0, #0
   11818:	bne	11830 <__assert_fail@plt+0x450>
   1181c:	ldr	r1, [sp, #32]
   11820:	ldrd	r2, [r1, #24]
   11824:	cmp	r2, #1
   11828:	sbcs	r1, r3, #0
   1182c:	bge	114a0 <__assert_fail@plt+0xc0>
   11830:	ldr	r1, [pc, #1144]	; 11cb0 <__assert_fail@plt+0x8d0>
   11834:	mov	r0, #0
   11838:	add	r1, pc, r1
   1183c:	b	11894 <__assert_fail@plt+0x4b4>
   11840:	ldr	r3, [pc, #1088]	; 11c88 <__assert_fail@plt+0x8a8>
   11844:	mov	r1, #0
   11848:	ldr	r5, [pc, #1124]	; 11cb4 <__assert_fail@plt+0x8d4>
   1184c:	mov	r2, #10
   11850:	ldr	r0, [pc, #1120]	; 11cb8 <__assert_fail@plt+0x8d8>
   11854:	ldr	r4, [r8, r3]
   11858:	add	r5, pc, r5
   1185c:	add	r0, pc, r0
   11860:	add	r3, r5, #8
   11864:	str	r0, [sp]
   11868:	ldr	r0, [r4]
   1186c:	bl	14b94 <close_stdout@@Base+0x2368>
   11870:	cmp	r0, #0
   11874:	bne	11888 <__assert_fail@plt+0x4a8>
   11878:	ldrd	r2, [r5, #8]
   1187c:	cmp	r2, #1
   11880:	sbcs	r1, r3, #0
   11884:	bge	114a0 <__assert_fail@plt+0xc0>
   11888:	ldr	r1, [pc, #1068]	; 11cbc <__assert_fail@plt+0x8dc>
   1188c:	mov	r0, #0
   11890:	add	r1, pc, r1
   11894:	mov	r2, #5
   11898:	mov	fp, r0
   1189c:	bl	111ac <dcgettext@plt>
   118a0:	mov	r5, r0
   118a4:	ldr	r0, [r4]
   118a8:	bl	1437c <close_stdout@@Base+0x1b50>
   118ac:	mov	r2, r5
   118b0:	mov	r1, fp
   118b4:	mov	r3, r0
   118b8:	mov	r0, fp
   118bc:	bl	11230 <error@plt>
   118c0:	b	114a0 <__assert_fail@plt+0xc0>
   118c4:	ldr	r0, [pc, #1012]	; 11cc0 <__assert_fail@plt+0x8e0>
   118c8:	ldr	r2, [pc, #1012]	; 11cc4 <__assert_fail@plt+0x8e4>
   118cc:	add	r0, pc, r0
   118d0:	add	r2, pc, r2
   118d4:	add	r0, r0, #16
   118d8:	add	r1, r2, #108	; 0x6c
   118dc:	add	r2, r2, #172	; 0xac
   118e0:	bl	11f0c <__assert_fail@plt+0xb2c>
   118e4:	subs	r4, r0, #0
   118e8:	bne	114a0 <__assert_fail@plt+0xc0>
   118ec:	ldr	r1, [pc, #980]	; 11cc8 <__assert_fail@plt+0x8e8>
   118f0:	add	r1, pc, r1
   118f4:	b	119cc <__assert_fail@plt+0x5ec>
   118f8:	mov	r0, #0
   118fc:	bl	12568 <__assert_fail@plt+0x1188>
   11900:	ldr	r2, [pc, #964]	; 11ccc <__assert_fail@plt+0x8ec>
   11904:	mov	r4, #0
   11908:	ldr	r3, [pc, #960]	; 11cd0 <__assert_fail@plt+0x8f0>
   1190c:	ldr	r1, [pc, #960]	; 11cd4 <__assert_fail@plt+0x8f4>
   11910:	ldr	r0, [r8, r2]
   11914:	ldr	r3, [r8, r3]
   11918:	add	r1, pc, r1
   1191c:	ldr	r2, [pc, #948]	; 11cd8 <__assert_fail@plt+0x8f8>
   11920:	ldr	r0, [r0]
   11924:	add	r2, pc, r2
   11928:	ldr	r3, [r3]
   1192c:	stm	sp, {r1, r2, r4}
   11930:	ldr	r1, [pc, #932]	; 11cdc <__assert_fail@plt+0x8fc>
   11934:	ldr	r2, [pc, #932]	; 11ce0 <__assert_fail@plt+0x900>
   11938:	add	r1, pc, r1
   1193c:	add	r2, pc, r2
   11940:	bl	14818 <close_stdout@@Base+0x1fec>
   11944:	mov	r0, r4
   11948:	bl	1129c <exit@plt>
   1194c:	ldr	r2, [pc, #820]	; 11c88 <__assert_fail@plt+0x8a8>
   11950:	ldr	r3, [pc, #908]	; 11ce4 <__assert_fail@plt+0x904>
   11954:	ldr	r2, [r8, r2]
   11958:	add	r3, pc, r3
   1195c:	ldr	r2, [r2]
   11960:	str	r2, [r3, #8]
   11964:	b	114a0 <__assert_fail@plt+0xc0>
   11968:	ldr	r0, [pc, #888]	; 11ce8 <__assert_fail@plt+0x908>
   1196c:	ldr	r2, [pc, #888]	; 11cec <__assert_fail@plt+0x90c>
   11970:	add	r0, pc, r0
   11974:	add	r2, pc, r2
   11978:	add	r0, r0, #12
   1197c:	add	r1, r2, #76	; 0x4c
   11980:	add	r2, r2, #428	; 0x1ac
   11984:	bl	11f0c <__assert_fail@plt+0xb2c>
   11988:	subs	r4, r0, #0
   1198c:	bne	114a0 <__assert_fail@plt+0xc0>
   11990:	ldr	r1, [pc, #856]	; 11cf0 <__assert_fail@plt+0x910>
   11994:	add	r1, pc, r1
   11998:	b	119cc <__assert_fail@plt+0x5ec>
   1199c:	ldr	r0, [pc, #848]	; 11cf4 <__assert_fail@plt+0x914>
   119a0:	ldr	r2, [pc, #848]	; 11cf8 <__assert_fail@plt+0x918>
   119a4:	add	r0, pc, r0
   119a8:	add	r2, pc, r2
   119ac:	add	r0, r0, #20
   119b0:	add	r1, r2, #140	; 0x8c
   119b4:	add	r2, r2, #684	; 0x2ac
   119b8:	bl	11f0c <__assert_fail@plt+0xb2c>
   119bc:	subs	r4, r0, #0
   119c0:	bne	114a0 <__assert_fail@plt+0xc0>
   119c4:	ldr	r1, [pc, #816]	; 11cfc <__assert_fail@plt+0x91c>
   119c8:	add	r1, pc, r1
   119cc:	mov	r2, #5
   119d0:	mov	fp, r4
   119d4:	bl	111ac <dcgettext@plt>
   119d8:	ldr	r3, [pc, #680]	; 11c88 <__assert_fail@plt+0x8a8>
   119dc:	ldr	r3, [r8, r3]
   119e0:	mov	r5, r0
   119e4:	ldr	r0, [r3]
   119e8:	bl	1437c <close_stdout@@Base+0x1b50>
   119ec:	mov	r1, r4
   119f0:	mov	r2, r5
   119f4:	mov	r3, r0
   119f8:	mov	r0, r4
   119fc:	bl	11230 <error@plt>
   11a00:	b	114a0 <__assert_fail@plt+0xc0>
   11a04:	mov	fp, #0
   11a08:	b	114b4 <__assert_fail@plt+0xd4>
   11a0c:	ldr	r1, [pc, #748]	; 11d00 <__assert_fail@plt+0x920>
   11a10:	mov	r0, #0
   11a14:	add	r1, pc, r1
   11a18:	b	11894 <__assert_fail@plt+0x4b4>
   11a1c:	ldrb	r2, [r3, #1]
   11a20:	cmp	r2, #110	; 0x6e
   11a24:	bne	11c00 <__assert_fail@plt+0x820>
   11a28:	ldrb	r3, [r3, #2]
   11a2c:	cmp	r3, #0
   11a30:	bne	11c00 <__assert_fail@plt+0x820>
   11a34:	ldr	r3, [pc, #712]	; 11d04 <__assert_fail@plt+0x924>
   11a38:	ldr	r2, [pc, #712]	; 11d08 <__assert_fail@plt+0x928>
   11a3c:	add	r3, pc, r3
   11a40:	add	r2, pc, r2
   11a44:	str	r2, [r3]
   11a48:	b	114a0 <__assert_fail@plt+0xc0>
   11a4c:	cmp	fp, sl
   11a50:	bne	11a5c <__assert_fail@plt+0x67c>
   11a54:	mov	r0, #1
   11a58:	bl	12568 <__assert_fail@plt+0x1188>
   11a5c:	ldr	r5, [pc, #680]	; 11d0c <__assert_fail@plt+0x92c>
   11a60:	ldr	ip, [pc, #680]	; 11d10 <__assert_fail@plt+0x930>
   11a64:	add	r5, pc, r5
   11a68:	ldr	r4, [pc, #676]	; 11d14 <__assert_fail@plt+0x934>
   11a6c:	add	ip, pc, ip
   11a70:	ldr	r0, [r5, #8]
   11a74:	add	r4, pc, r4
   11a78:	str	ip, [sp, #20]
   11a7c:	bl	112a8 <strlen@plt>
   11a80:	lsl	r3, r0, #1
   11a84:	mov	r6, r0
   11a88:	add	r0, r3, r0
   11a8c:	str	r0, [r4, #32]
   11a90:	add	r0, r0, #1
   11a94:	str	r3, [sp, #24]
   11a98:	bl	14928 <close_stdout@@Base+0x20fc>
   11a9c:	ldr	r2, [r5, #8]
   11aa0:	mov	r1, r2
   11aa4:	str	r0, [r4, #36]	; 0x24
   11aa8:	str	r2, [sp, #28]
   11aac:	bl	111a0 <stpcpy@plt>
   11ab0:	ldr	r2, [sp, #28]
   11ab4:	mov	r1, r2
   11ab8:	bl	111a0 <stpcpy@plt>
   11abc:	ldr	r2, [sp, #28]
   11ac0:	mov	r1, r2
   11ac4:	bl	1120c <strcpy@plt>
   11ac8:	ldr	r3, [sp, #24]
   11acc:	add	r0, r3, #1
   11ad0:	str	r3, [r4, #40]	; 0x28
   11ad4:	bl	14928 <close_stdout@@Base+0x20fc>
   11ad8:	ldr	r3, [r5, #8]
   11adc:	mov	r1, r3
   11ae0:	str	r0, [r4, #44]	; 0x2c
   11ae4:	str	r3, [sp, #24]
   11ae8:	bl	111a0 <stpcpy@plt>
   11aec:	ldr	r3, [sp, #24]
   11af0:	mov	r1, r3
   11af4:	bl	1120c <strcpy@plt>
   11af8:	add	r0, r6, #1
   11afc:	str	r6, [r4, #48]	; 0x30
   11b00:	bl	14928 <close_stdout@@Base+0x20fc>
   11b04:	ldr	r1, [r5, #8]
   11b08:	str	r0, [r4, #52]	; 0x34
   11b0c:	bl	1120c <strcpy@plt>
   11b10:	add	r0, r4, #12
   11b14:	bl	12a28 <close_stdout@@Base+0x1fc>
   11b18:	ldr	r0, [r5, #4]
   11b1c:	bl	112a8 <strlen@plt>
   11b20:	ldr	ip, [sp, #20]
   11b24:	mov	r6, r0
   11b28:	ldr	r0, [ip]
   11b2c:	add	r0, r0, #1
   11b30:	add	r0, r0, r6
   11b34:	bl	14928 <close_stdout@@Base+0x20fc>
   11b38:	ldr	ip, [sp, #20]
   11b3c:	mov	r1, #32
   11b40:	ldr	r2, [ip]
   11b44:	add	r6, r6, r2
   11b48:	mov	r2, r6
   11b4c:	str	r0, [r4, #64]	; 0x40
   11b50:	str	ip, [sp, #20]
   11b54:	bl	112f0 <memset@plt>
   11b58:	ldr	ip, [sp, #20]
   11b5c:	ldr	lr, [r5, #12]
   11b60:	ldr	r2, [pc, #432]	; 11d18 <__assert_fail@plt+0x938>
   11b64:	str	lr, [r4, #72]	; 0x48
   11b68:	mov	r3, r0
   11b6c:	ldrd	r0, [ip, #16]
   11b70:	add	ip, r4, #76	; 0x4c
   11b74:	strb	sl, [r3, r6]
   11b78:	str	ip, [r4, #68]	; 0x44
   11b7c:	strd	r0, [r4]
   11b80:	ldr	r5, [r8, r2]
   11b84:	ldr	r3, [r5]
   11b88:	cmp	r3, r9
   11b8c:	movne	r4, r5
   11b90:	bne	11bb4 <__assert_fail@plt+0x7d4>
   11b94:	b	11c44 <__assert_fail@plt+0x864>
   11b98:	ldr	r0, [r7, r3, lsl #2]
   11b9c:	bl	12028 <__assert_fail@plt+0xc48>
   11ba0:	ldr	r3, [r4]
   11ba4:	add	r3, r3, #1
   11ba8:	str	r3, [r4]
   11bac:	and	r0, r0, fp
   11bb0:	uxtb	fp, r0
   11bb4:	ldr	r3, [r5]
   11bb8:	cmp	r9, r3
   11bbc:	bgt	11b98 <__assert_fail@plt+0x7b8>
   11bc0:	ldr	r3, [pc, #340]	; 11d1c <__assert_fail@plt+0x93c>
   11bc4:	add	r3, pc, r3
   11bc8:	ldrb	r3, [r3, #8]
   11bcc:	cmp	r3, #0
   11bd0:	bne	11c10 <__assert_fail@plt+0x830>
   11bd4:	rsbs	r0, fp, #1
   11bd8:	movcc	r0, #0
   11bdc:	bl	1129c <exit@plt>
   11be0:	ldrb	r3, [r3, #2]
   11be4:	cmp	r3, #0
   11be8:	bne	11c00 <__assert_fail@plt+0x820>
   11bec:	ldr	r3, [pc, #300]	; 11d20 <__assert_fail@plt+0x940>
   11bf0:	ldr	r2, [sp, #40]	; 0x28
   11bf4:	add	r3, pc, r3
   11bf8:	str	r2, [r3]
   11bfc:	b	114a0 <__assert_fail@plt+0xc0>
   11c00:	ldr	r1, [pc, #284]	; 11d24 <__assert_fail@plt+0x944>
   11c04:	mov	r0, #0
   11c08:	add	r1, pc, r1
   11c0c:	b	11894 <__assert_fail@plt+0x4b4>
   11c10:	ldr	r3, [pc, #272]	; 11d28 <__assert_fail@plt+0x948>
   11c14:	ldr	r3, [r8, r3]
   11c18:	ldr	r0, [r3]
   11c1c:	bl	15c30 <close_stdout@@Base+0x3404>
   11c20:	cmn	r0, #1
   11c24:	bne	11bd4 <__assert_fail@plt+0x7f4>
   11c28:	bl	112d8 <__errno_location@plt>
   11c2c:	ldr	r2, [pc, #248]	; 11d2c <__assert_fail@plt+0x94c>
   11c30:	add	r2, pc, r2
   11c34:	ldr	r1, [r0]
   11c38:	mov	r0, #1
   11c3c:	bl	11230 <error@plt>
   11c40:	b	11bd4 <__assert_fail@plt+0x7f4>
   11c44:	ldr	r0, [pc, #228]	; 11d30 <__assert_fail@plt+0x950>
   11c48:	add	r0, pc, r0
   11c4c:	bl	12028 <__assert_fail@plt+0xc48>
   11c50:	mov	fp, r0
   11c54:	b	11bc0 <__assert_fail@plt+0x7e0>
   11c58:	strdeq	r7, [r1], -r4
   11c5c:	andeq	r0, r0, ip, lsl #2
   11c60:	andeq	r7, r1, r8, lsr sp
   11c64:	ldrdeq	r6, [r0], -ip
   11c68:	muleq	r0, r8, r4
   11c6c:	andeq	r6, r0, ip, lsl #9
   11c70:	andeq	r0, r0, r0, lsr #2
   11c74:	andeq	r7, r1, r0, ror #26
   11c78:	andeq	r5, r0, r8, ror #24
   11c7c:	andeq	r5, r0, r4, ror #24
   11c80:	andeq	r6, r0, r8, ror #10
   11c84:	andeq	r7, r1, ip, asr #18
   11c88:	andeq	r0, r0, r8, asr #2
   11c8c:	strdeq	r6, [r0], -r0
   11c90:	andeq	r7, r1, ip, lsr sl
   11c94:	andeq	r7, r1, r8, lsl sl
   11c98:	andeq	r6, r0, r0, lsr #3
   11c9c:	andeq	r6, r0, r0, lsl #4
   11ca0:	andeq	r7, r1, r0, lsl #20
   11ca4:	andeq	r7, r1, r4, asr #19
   11ca8:	muleq	r1, r4, r9
   11cac:	ldrdeq	r6, [r0], -r8
   11cb0:	andeq	r6, r0, r0, ror r1
   11cb4:	strdeq	r7, [r1], -r8
   11cb8:	andeq	r6, r0, r0, lsl #1
   11cbc:	strdeq	r6, [r0], -r4
   11cc0:	andeq	r7, r1, r8, lsr #17
   11cc4:	andeq	r7, r1, r0, lsl r9
   11cc8:	andeq	r6, r0, r4
   11ccc:	andeq	r0, r0, r0, lsr r1
   11cd0:	andeq	r0, r0, r4, lsl r1
   11cd4:	ldrdeq	r6, [r0], -ip
   11cd8:	andeq	r6, r0, r0, ror #1
   11cdc:	strheq	r6, [r0], -r8
   11ce0:	ldrdeq	r5, [r0], -ip
   11ce4:	andeq	r7, r1, ip, lsl r8
   11ce8:	andeq	r7, r1, r4, lsl #16
   11cec:	andeq	r7, r1, ip, ror #16
   11cf0:	andeq	r5, r0, r4, lsl #31
   11cf4:	ldrdeq	r7, [r1], -r0
   11cf8:	andeq	r7, r1, r8, lsr r8
   11cfc:	andeq	r5, r0, r4, ror pc
   11d00:	andeq	r6, r0, ip, lsl r0
   11d04:	andeq	r7, r1, r8, lsr r7
   11d08:	andeq	r5, r0, ip, lsr #13
   11d0c:	andeq	r7, r1, r0, lsl r7
   11d10:	andeq	r7, r1, r4, ror #13
   11d14:	andeq	r7, r1, ip, ror #14
   11d18:	andeq	r0, r0, r0, lsl r1
   11d1c:	andeq	r7, r1, ip, lsl r6
   11d20:	andeq	r7, r1, r0, lsl #11
   11d24:	andeq	r5, r0, r4, asr #27
   11d28:	andeq	r0, r0, ip, lsr #2
   11d2c:	strdeq	r5, [r0], -ip
   11d30:	andeq	r5, r0, r4, ror #27
   11d34:	mov	fp, #0
   11d38:	mov	lr, #0
   11d3c:	pop	{r1}		; (ldr r1, [sp], #4)
   11d40:	mov	r2, sp
   11d44:	push	{r2}		; (str r2, [sp, #-4]!)
   11d48:	push	{r0}		; (str r0, [sp, #-4]!)
   11d4c:	ldr	ip, [pc, #16]	; 11d64 <__assert_fail@plt+0x984>
   11d50:	push	{ip}		; (str ip, [sp, #-4]!)
   11d54:	ldr	r0, [pc, #12]	; 11d68 <__assert_fail@plt+0x988>
   11d58:	ldr	r3, [pc, #12]	; 11d6c <__assert_fail@plt+0x98c>
   11d5c:	bl	11260 <__libc_start_main@plt>
   11d60:	bl	113c8 <abort@plt>
   11d64:	strheq	r7, [r1], -r4
   11d68:	andeq	r1, r1, ip, ror #7
   11d6c:	andeq	r7, r1, r0, asr r0
   11d70:	ldr	r3, [pc, #20]	; 11d8c <__assert_fail@plt+0x9ac>
   11d74:	ldr	r2, [pc, #20]	; 11d90 <__assert_fail@plt+0x9b0>
   11d78:	add	r3, pc, r3
   11d7c:	ldr	r2, [r3, r2]
   11d80:	cmp	r2, #0
   11d84:	bxeq	lr
   11d88:	b	11278 <__gmon_start__@plt>
   11d8c:	andeq	r7, r1, r0, lsl #5
   11d90:	andeq	r0, r0, r4, lsr #2
   11d94:	push	{r3, lr}
   11d98:	movw	r0, #37340	; 0x91dc
   11d9c:	ldr	r3, [pc, #36]	; 11dc8 <__assert_fail@plt+0x9e8>
   11da0:	movt	r0, #2
   11da4:	rsb	r3, r0, r3
   11da8:	cmp	r3, #6
   11dac:	popls	{r3, pc}
   11db0:	movw	r3, #0
   11db4:	movt	r3, #0
   11db8:	cmp	r3, #0
   11dbc:	popeq	{r3, pc}
   11dc0:	blx	r3
   11dc4:	pop	{r3, pc}
   11dc8:	ldrdeq	r9, [r2], -pc	; <UNPREDICTABLE>
   11dcc:	push	{r3, lr}
   11dd0:	movw	r0, #37340	; 0x91dc
   11dd4:	movw	r3, #37340	; 0x91dc
   11dd8:	movt	r0, #2
   11ddc:	movt	r3, #2
   11de0:	rsb	r3, r0, r3
   11de4:	asr	r3, r3, #2
   11de8:	add	r3, r3, r3, lsr #31
   11dec:	asrs	r1, r3, #1
   11df0:	popeq	{r3, pc}
   11df4:	movw	r2, #0
   11df8:	movt	r2, #0
   11dfc:	cmp	r2, #0
   11e00:	popeq	{r3, pc}
   11e04:	blx	r2
   11e08:	pop	{r3, pc}
   11e0c:	push	{r4, lr}
   11e10:	movw	r4, #37344	; 0x91e0
   11e14:	movt	r4, #2
   11e18:	ldrb	r3, [r4]
   11e1c:	cmp	r3, #0
   11e20:	popne	{r4, pc}
   11e24:	bl	11d94 <__assert_fail@plt+0x9b4>
   11e28:	mov	r3, #1
   11e2c:	strb	r3, [r4]
   11e30:	pop	{r4, pc}
   11e34:	movw	r0, #36352	; 0x8e00
   11e38:	movt	r0, #2
   11e3c:	push	{r3, lr}
   11e40:	ldr	r3, [r0]
   11e44:	cmp	r3, #0
   11e48:	beq	11e60 <__assert_fail@plt+0xa80>
   11e4c:	movw	r3, #0
   11e50:	movt	r3, #0
   11e54:	cmp	r3, #0
   11e58:	beq	11e60 <__assert_fail@plt+0xa80>
   11e5c:	blx	r3
   11e60:	pop	{r3, lr}
   11e64:	b	11dcc <__assert_fail@plt+0x9ec>
   11e68:	push	{r4, r5, r6, r7, lr}
   11e6c:	sub	sp, sp, #20
   11e70:	ldr	r3, [pc, #128]	; 11ef8 <__assert_fail@plt+0xb18>
   11e74:	mov	r0, #1
   11e78:	ldr	r7, [pc, #124]	; 11efc <__assert_fail@plt+0xb1c>
   11e7c:	add	r3, pc, r3
   11e80:	ldr	r6, [pc, #120]	; 11f00 <__assert_fail@plt+0xb20>
   11e84:	add	r7, pc, r7
   11e88:	ldm	r3, {r1, r3}
   11e8c:	add	r6, pc, r6
   11e90:	ldrd	r4, [r7]
   11e94:	ldr	r2, [r6]
   11e98:	str	r3, [sp, #8]
   11e9c:	strd	r4, [sp]
   11ea0:	bl	11308 <__printf_chk@plt>
   11ea4:	ldrd	r2, [r7]
   11ea8:	ldrd	r4, [r6, #8]
   11eac:	adds	r4, r4, r2
   11eb0:	adc	r5, r5, r3
   11eb4:	cmp	r4, r2
   11eb8:	sbcs	r1, r5, r3
   11ebc:	bge	11ee4 <__assert_fail@plt+0xb04>
   11ec0:	ldr	r1, [pc, #60]	; 11f04 <__assert_fail@plt+0xb24>
   11ec4:	mov	r2, #5
   11ec8:	mov	r0, #0
   11ecc:	add	r1, pc, r1
   11ed0:	bl	111ac <dcgettext@plt>
   11ed4:	mov	r1, #0
   11ed8:	mov	r2, r0
   11edc:	mov	r0, #1
   11ee0:	bl	11230 <error@plt>
   11ee4:	ldr	r3, [pc, #28]	; 11f08 <__assert_fail@plt+0xb28>
   11ee8:	add	r3, pc, r3
   11eec:	strd	r4, [r3]
   11ef0:	add	sp, sp, #20
   11ef4:	pop	{r4, r5, r6, r7, pc}
   11ef8:	strdeq	r7, [r1], -r8
   11efc:	andeq	r7, r1, ip, asr r3
   11f00:	andeq	r7, r1, r4, asr #5
   11f04:	andeq	r5, r0, r4, asr #4
   11f08:	strdeq	r7, [r1], -r8
   11f0c:	push	{r3, r4, r5, r6, r7, lr}
   11f10:	mov	r6, r1
   11f14:	ldr	r3, [pc, #252]	; 12018 <__assert_fail@plt+0xc38>
   11f18:	ldr	ip, [pc, #252]	; 1201c <__assert_fail@plt+0xc3c>
   11f1c:	add	r3, pc, r3
   11f20:	ldr	r5, [r3, ip]
   11f24:	ldr	r4, [r5]
   11f28:	ldrb	ip, [r4]
   11f2c:	sub	ip, ip, #97	; 0x61
   11f30:	cmp	ip, #19
   11f34:	addls	pc, pc, ip, lsl #2
   11f38:	b	12008 <__assert_fail@plt+0xc28>
   11f3c:	b	11ffc <__assert_fail@plt+0xc1c>
   11f40:	b	12008 <__assert_fail@plt+0xc28>
   11f44:	b	12008 <__assert_fail@plt+0xc28>
   11f48:	b	12008 <__assert_fail@plt+0xc28>
   11f4c:	b	12008 <__assert_fail@plt+0xc28>
   11f50:	b	12008 <__assert_fail@plt+0xc28>
   11f54:	b	12008 <__assert_fail@plt+0xc28>
   11f58:	b	12008 <__assert_fail@plt+0xc28>
   11f5c:	b	12008 <__assert_fail@plt+0xc28>
   11f60:	b	12008 <__assert_fail@plt+0xc28>
   11f64:	b	12008 <__assert_fail@plt+0xc28>
   11f68:	b	12008 <__assert_fail@plt+0xc28>
   11f6c:	b	12008 <__assert_fail@plt+0xc28>
   11f70:	b	11ffc <__assert_fail@plt+0xc1c>
   11f74:	b	12008 <__assert_fail@plt+0xc28>
   11f78:	b	11f8c <__assert_fail@plt+0xbac>
   11f7c:	b	12008 <__assert_fail@plt+0xc28>
   11f80:	b	12008 <__assert_fail@plt+0xc28>
   11f84:	b	12008 <__assert_fail@plt+0xc28>
   11f88:	b	11ffc <__assert_fail@plt+0xc1c>
   11f8c:	ldr	ip, [pc, #140]	; 12020 <__assert_fail@plt+0xc40>
   11f90:	add	r1, r4, #1
   11f94:	mov	r7, #0
   11f98:	str	r1, [r5]
   11f9c:	str	r4, [r0]
   11fa0:	movw	r1, #710	; 0x2c6
   11fa4:	str	r7, [r6]
   11fa8:	ldr	r4, [r5]
   11fac:	str	r2, [r6, #16]
   11fb0:	str	r7, [r6, #4]
   11fb4:	str	r7, [r6, #20]
   11fb8:	mov	r0, r4
   11fbc:	ldr	r3, [r3, ip]
   11fc0:	str	r1, [r3]
   11fc4:	bl	112a8 <strlen@plt>
   11fc8:	mov	r2, r6
   11fcc:	mov	r1, r0
   11fd0:	mov	r0, r4
   11fd4:	bl	113b0 <re_compile_pattern@plt>
   11fd8:	subs	r3, r0, #0
   11fdc:	beq	12010 <__assert_fail@plt+0xc30>
   11fe0:	ldr	r2, [pc, #60]	; 12024 <__assert_fail@plt+0xc44>
   11fe4:	mov	r1, r7
   11fe8:	mov	r0, #1
   11fec:	add	r2, pc, r2
   11ff0:	bl	11230 <error@plt>
   11ff4:	mov	r0, #1
   11ff8:	pop	{r3, r4, r5, r6, r7, pc}
   11ffc:	str	r4, [r0]
   12000:	mov	r0, #1
   12004:	pop	{r3, r4, r5, r6, r7, pc}
   12008:	mov	r0, #0
   1200c:	pop	{r3, r4, r5, r6, r7, pc}
   12010:	mov	r0, #1
   12014:	pop	{r3, r4, r5, r6, r7, pc}
   12018:	ldrdeq	r7, [r1], -ip
   1201c:	andeq	r0, r0, r8, asr #2
   12020:	andeq	r0, r0, ip, lsl r1
   12024:	andeq	r5, r0, r8, lsr #18
   12028:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1202c:	sub	sp, sp, #36	; 0x24
   12030:	ldrb	r3, [r0]
   12034:	ldr	r9, [pc, #1220]	; 12500 <__assert_fail@plt+0x1120>
   12038:	cmp	r3, #45	; 0x2d
   1203c:	str	r0, [sp, #20]
   12040:	add	r9, pc, r9
   12044:	beq	12448 <__assert_fail@plt+0x1068>
   12048:	ldr	r1, [pc, #1204]	; 12504 <__assert_fail@plt+0x1124>
   1204c:	ldr	r0, [sp, #20]
   12050:	add	r1, pc, r1
   12054:	bl	11398 <fopen64@plt>
   12058:	subs	r7, r0, #0
   1205c:	beq	124dc <__assert_fail@plt+0x10fc>
   12060:	ldr	r1, [pc, #1184]	; 12508 <__assert_fail@plt+0x1128>
   12064:	mov	r0, r7
   12068:	ldr	r6, [pc, #1180]	; 1250c <__assert_fail@plt+0x112c>
   1206c:	add	r1, pc, r1
   12070:	str	r1, [sp, #12]
   12074:	ldr	r3, [sp, #12]
   12078:	add	r6, pc, r6
   1207c:	ldr	r2, [pc, #1164]	; 12510 <__assert_fail@plt+0x1130>
   12080:	mov	r1, #2
   12084:	add	r3, r3, #76	; 0x4c
   12088:	add	r8, r6, #12
   1208c:	add	r2, pc, r2
   12090:	str	r3, [sp, #24]
   12094:	str	r2, [sp, #16]
   12098:	bl	129ec <close_stdout@@Base+0x1c0>
   1209c:	ldr	r0, [sp, #16]
   120a0:	add	r0, r0, #140	; 0x8c
   120a4:	str	r0, [sp, #28]
   120a8:	mov	r0, r8
   120ac:	mov	r1, r7
   120b0:	bl	12b1c <close_stdout@@Base+0x2f0>
   120b4:	cmp	r0, #0
   120b8:	beq	12408 <__assert_fail@plt+0x1028>
   120bc:	ldr	r5, [r6, #16]
   120c0:	sub	r4, r5, #1
   120c4:	cmp	r4, #1
   120c8:	bls	120f0 <__assert_fail@plt+0xd10>
   120cc:	ldr	fp, [pc, #1088]	; 12514 <__assert_fail@plt+0x1134>
   120d0:	mov	r2, #2
   120d4:	ldr	sl, [r6, #20]
   120d8:	add	fp, pc, fp
   120dc:	mov	r0, sl
   120e0:	ldr	r1, [fp, #8]
   120e4:	bl	11194 <memcmp@plt>
   120e8:	cmp	r0, #0
   120ec:	beq	122b0 <__assert_fail@plt+0xed0>
   120f0:	ldr	r3, [pc, #1056]	; 12518 <__assert_fail@plt+0x1138>
   120f4:	add	r3, pc, r3
   120f8:	ldr	r3, [r3, #72]	; 0x48
   120fc:	ldrb	r3, [r3]
   12100:	sub	r3, r3, #97	; 0x61
   12104:	cmp	r3, #19
   12108:	addls	pc, pc, r3, lsl #2
   1210c:	b	12278 <__assert_fail@plt+0xe98>
   12110:	b	12218 <__assert_fail@plt+0xe38>
   12114:	b	12278 <__assert_fail@plt+0xe98>
   12118:	b	12278 <__assert_fail@plt+0xe98>
   1211c:	b	12278 <__assert_fail@plt+0xe98>
   12120:	b	12278 <__assert_fail@plt+0xe98>
   12124:	b	12278 <__assert_fail@plt+0xe98>
   12128:	b	12278 <__assert_fail@plt+0xe98>
   1212c:	b	12278 <__assert_fail@plt+0xe98>
   12130:	b	12278 <__assert_fail@plt+0xe98>
   12134:	b	12278 <__assert_fail@plt+0xe98>
   12138:	b	12278 <__assert_fail@plt+0xe98>
   1213c:	b	12278 <__assert_fail@plt+0xe98>
   12140:	b	12278 <__assert_fail@plt+0xe98>
   12144:	b	121f4 <__assert_fail@plt+0xe14>
   12148:	b	12278 <__assert_fail@plt+0xe98>
   1214c:	b	121a8 <__assert_fail@plt+0xdc8>
   12150:	b	12278 <__assert_fail@plt+0xe98>
   12154:	b	12278 <__assert_fail@plt+0xe98>
   12158:	b	12278 <__assert_fail@plt+0xe98>
   1215c:	b	12160 <__assert_fail@plt+0xd80>
   12160:	ldr	r4, [pc, #948]	; 1251c <__assert_fail@plt+0x113c>
   12164:	cmp	r5, #1
   12168:	ldr	r3, [pc, #944]	; 12520 <__assert_fail@plt+0x1140>
   1216c:	add	r4, pc, r4
   12170:	bls	12200 <__assert_fail@plt+0xe20>
   12174:	bl	11e68 <__assert_fail@plt+0xa88>
   12178:	ldr	r2, [pc, #932]	; 12524 <__assert_fail@plt+0x1144>
   1217c:	ldr	r3, [pc, #924]	; 12520 <__assert_fail@plt+0x1140>
   12180:	add	r2, pc, r2
   12184:	ldr	sl, [r9, r3]
   12188:	ldr	r2, [r2, #16]
   1218c:	ldr	r0, [pc, #916]	; 12528 <__assert_fail@plt+0x1148>
   12190:	mov	r1, #1
   12194:	ldr	r3, [sl]
   12198:	add	r0, pc, r0
   1219c:	ldr	r0, [r0, #20]
   121a0:	bl	11188 <fwrite_unlocked@plt>
   121a4:	b	120a8 <__assert_fail@plt+0xcc8>
   121a8:	ldr	r5, [pc, #892]	; 1252c <__assert_fail@plt+0x114c>
   121ac:	mov	sl, #0
   121b0:	str	r4, [sp]
   121b4:	mov	r2, r4
   121b8:	add	r5, pc, r5
   121bc:	str	sl, [sp, #4]
   121c0:	mov	r3, sl
   121c4:	ldr	r0, [r5, #68]	; 0x44
   121c8:	ldr	r1, [r5, #20]
   121cc:	bl	112c0 <re_search@plt>
   121d0:	cmn	r0, #2
   121d4:	beq	123cc <__assert_fail@plt+0xfec>
   121d8:	cmn	r0, #1
   121dc:	beq	123f8 <__assert_fail@plt+0x1018>
   121e0:	bl	11e68 <__assert_fail@plt+0xa88>
   121e4:	ldr	r3, [pc, #820]	; 12520 <__assert_fail@plt+0x1140>
   121e8:	ldr	r2, [r5, #16]
   121ec:	ldr	sl, [r9, r3]
   121f0:	b	1218c <__assert_fail@plt+0xdac>
   121f4:	ldr	r4, [pc, #820]	; 12530 <__assert_fail@plt+0x1150>
   121f8:	ldr	r3, [pc, #800]	; 12520 <__assert_fail@plt+0x1140>
   121fc:	add	r4, pc, r4
   12200:	ldr	sl, [r9, r3]
   12204:	ldr	r0, [r4, #64]	; 0x40
   12208:	ldr	r1, [sl]
   1220c:	bl	11110 <fputs_unlocked@plt>
   12210:	ldr	r2, [r4, #16]
   12214:	b	1218c <__assert_fail@plt+0xdac>
   12218:	ldr	r3, [pc, #788]	; 12534 <__assert_fail@plt+0x1154>
   1221c:	add	r3, pc, r3
   12220:	ldrd	r0, [r3, #24]
   12224:	cmp	r0, #2
   12228:	sbcs	r3, r1, #0
   1222c:	blt	12174 <__assert_fail@plt+0xd94>
   12230:	cmp	r5, #1
   12234:	bhi	12288 <__assert_fail@plt+0xea8>
   12238:	ldr	r4, [pc, #760]	; 12538 <__assert_fail@plt+0x1158>
   1223c:	add	r4, pc, r4
   12240:	ldrd	r2, [r4, #56]	; 0x38
   12244:	adds	r2, r2, #1
   12248:	adc	r3, r3, #0
   1224c:	strd	r2, [r4, #56]	; 0x38
   12250:	cmp	r1, r3
   12254:	cmpeq	r0, r2
   12258:	beq	12288 <__assert_fail@plt+0xea8>
   1225c:	ldr	r3, [pc, #700]	; 12520 <__assert_fail@plt+0x1140>
   12260:	ldr	r0, [r4, #64]	; 0x40
   12264:	ldr	sl, [r9, r3]
   12268:	ldr	r1, [sl]
   1226c:	bl	11110 <fputs_unlocked@plt>
   12270:	ldr	r2, [r4, #16]
   12274:	b	1218c <__assert_fail@plt+0xdac>
   12278:	ldr	r3, [pc, #672]	; 12520 <__assert_fail@plt+0x1140>
   1227c:	mov	r2, r5
   12280:	ldr	sl, [r9, r3]
   12284:	b	1218c <__assert_fail@plt+0xdac>
   12288:	bl	11e68 <__assert_fail@plt+0xa88>
   1228c:	ldr	r1, [pc, #680]	; 1253c <__assert_fail@plt+0x115c>
   12290:	ldr	r0, [pc, #648]	; 12520 <__assert_fail@plt+0x1140>
   12294:	mov	r2, #0
   12298:	add	r1, pc, r1
   1229c:	mov	r3, #0
   122a0:	strd	r2, [r1, #56]	; 0x38
   122a4:	ldr	r2, [r1, #16]
   122a8:	ldr	sl, [r9, r0]
   122ac:	b	1218c <__assert_fail@plt+0xdac>
   122b0:	ldr	r3, [r6, #32]
   122b4:	cmp	r4, r3
   122b8:	beq	12348 <__assert_fail@plt+0xf68>
   122bc:	ldr	r1, [sp, #12]
   122c0:	ldr	r3, [r1, #40]	; 0x28
   122c4:	cmp	r4, r3
   122c8:	beq	12390 <__assert_fail@plt+0xfb0>
   122cc:	ldr	r2, [sp, #16]
   122d0:	ldr	r3, [r2, #48]	; 0x30
   122d4:	cmp	r4, r3
   122d8:	bne	120f0 <__assert_fail@plt+0xd10>
   122dc:	ldr	r1, [r2, #52]	; 0x34
   122e0:	mov	r0, sl
   122e4:	mov	r2, r4
   122e8:	bl	11194 <memcmp@plt>
   122ec:	cmp	r0, #0
   122f0:	bne	120f0 <__assert_fail@plt+0xd10>
   122f4:	ldr	r2, [pc, #580]	; 12540 <__assert_fail@plt+0x1160>
   122f8:	ldr	r0, [sp, #16]
   122fc:	add	r2, pc, r2
   12300:	ldr	r1, [sp, #28]
   12304:	ldr	r3, [pc, #532]	; 12520 <__assert_fail@plt+0x1140>
   12308:	ldr	r2, [r2, #20]
   1230c:	str	r1, [r0, #68]	; 0x44
   12310:	str	r2, [r0, #72]	; 0x48
   12314:	ldr	sl, [r9, r3]
   12318:	ldr	r0, [sl]
   1231c:	ldr	r3, [r0, #20]
   12320:	ldr	r2, [r0, #24]
   12324:	cmp	r3, r2
   12328:	addcc	r1, r3, #1
   1232c:	strcc	r1, [r0, #20]
   12330:	movcc	r2, #10
   12334:	strbcc	r2, [r3]
   12338:	bcc	120a8 <__assert_fail@plt+0xcc8>
   1233c:	mov	r1, #10
   12340:	bl	11350 <__overflow@plt>
   12344:	b	120a8 <__assert_fail@plt+0xcc8>
   12348:	mov	r0, sl
   1234c:	ldr	r1, [r6, #36]	; 0x24
   12350:	mov	r2, r4
   12354:	bl	11194 <memcmp@plt>
   12358:	cmp	r0, #0
   1235c:	bne	122bc <__assert_fail@plt+0xedc>
   12360:	ldr	r3, [pc, #476]	; 12544 <__assert_fail@plt+0x1164>
   12364:	add	r2, r6, #108	; 0x6c
   12368:	str	r2, [r6, #68]	; 0x44
   1236c:	add	r3, pc, r3
   12370:	ldr	r1, [fp, #16]
   12374:	ldrb	r2, [r3, #32]
   12378:	str	r1, [r6, #72]	; 0x48
   1237c:	cmp	r2, #0
   12380:	ldrdne	r2, [r3, #16]
   12384:	strdne	r2, [r6]
   12388:	ldr	r3, [pc, #400]	; 12520 <__assert_fail@plt+0x1140>
   1238c:	b	12314 <__assert_fail@plt+0xf34>
   12390:	mov	r0, sl
   12394:	ldr	r1, [r1, #44]	; 0x2c
   12398:	mov	r2, r4
   1239c:	bl	11194 <memcmp@plt>
   123a0:	cmp	r0, #0
   123a4:	bne	122cc <__assert_fail@plt+0xeec>
   123a8:	ldr	r2, [pc, #408]	; 12548 <__assert_fail@plt+0x1168>
   123ac:	ldr	r0, [sp, #12]
   123b0:	add	r2, pc, r2
   123b4:	ldr	r1, [sp, #24]
   123b8:	ldr	r3, [pc, #352]	; 12520 <__assert_fail@plt+0x1140>
   123bc:	ldr	r2, [r2, #12]
   123c0:	str	r1, [r0, #68]	; 0x44
   123c4:	str	r2, [r0, #72]	; 0x48
   123c8:	b	12314 <__assert_fail@plt+0xf34>
   123cc:	bl	112d8 <__errno_location@plt>
   123d0:	ldr	r1, [pc, #372]	; 1254c <__assert_fail@plt+0x116c>
   123d4:	mov	r2, #5
   123d8:	add	r1, pc, r1
   123dc:	ldr	r4, [r0]
   123e0:	mov	r0, sl
   123e4:	bl	111ac <dcgettext@plt>
   123e8:	mov	r1, r4
   123ec:	mov	r2, r0
   123f0:	mov	r0, #1
   123f4:	bl	11230 <error@plt>
   123f8:	ldr	r4, [pc, #336]	; 12550 <__assert_fail@plt+0x1170>
   123fc:	ldr	r3, [pc, #284]	; 12520 <__assert_fail@plt+0x1140>
   12400:	add	r4, pc, r4
   12404:	b	12200 <__assert_fail@plt+0xe20>
   12408:	ldr	r3, [r7]
   1240c:	mov	r4, r0
   12410:	tst	r3, #32
   12414:	bne	12490 <__assert_fail@plt+0x10b0>
   12418:	ldr	r0, [sp, #20]
   1241c:	ldrb	r3, [r0]
   12420:	cmp	r3, #45	; 0x2d
   12424:	bne	12474 <__assert_fail@plt+0x1094>
   12428:	ldrb	r3, [r0, #1]
   1242c:	cmp	r3, #0
   12430:	bne	12474 <__assert_fail@plt+0x1094>
   12434:	mov	r0, r7
   12438:	bl	11380 <clearerr_unlocked@plt>
   1243c:	mov	r0, #1
   12440:	add	sp, sp, #36	; 0x24
   12444:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12448:	ldrb	r3, [r0, #1]
   1244c:	cmp	r3, #0
   12450:	bne	12048 <__assert_fail@plt+0xc68>
   12454:	ldr	r2, [pc, #248]	; 12554 <__assert_fail@plt+0x1174>
   12458:	mov	r1, #1
   1245c:	ldr	r3, [pc, #244]	; 12558 <__assert_fail@plt+0x1178>
   12460:	add	r2, pc, r2
   12464:	strb	r1, [r2, #8]
   12468:	ldr	r3, [r9, r3]
   1246c:	ldr	r7, [r3]
   12470:	b	12060 <__assert_fail@plt+0xc80>
   12474:	mov	r0, r7
   12478:	bl	15c30 <close_stdout@@Base+0x3404>
   1247c:	cmn	r0, #1
   12480:	movne	r0, #1
   12484:	beq	124b8 <__assert_fail@plt+0x10d8>
   12488:	add	sp, sp, #36	; 0x24
   1248c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12490:	bl	112d8 <__errno_location@plt>
   12494:	ldr	r2, [pc, #192]	; 1255c <__assert_fail@plt+0x117c>
   12498:	ldr	r3, [sp, #20]
   1249c:	add	r2, pc, r2
   124a0:	ldr	r1, [r0]
   124a4:	mov	r0, r4
   124a8:	bl	11230 <error@plt>
   124ac:	mov	r0, r4
   124b0:	add	sp, sp, #36	; 0x24
   124b4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   124b8:	bl	112d8 <__errno_location@plt>
   124bc:	ldr	r2, [pc, #156]	; 12560 <__assert_fail@plt+0x1180>
   124c0:	ldr	r3, [sp, #20]
   124c4:	add	r2, pc, r2
   124c8:	ldr	r1, [r0]
   124cc:	mov	r0, #0
   124d0:	bl	11230 <error@plt>
   124d4:	mov	r0, #0
   124d8:	b	12488 <__assert_fail@plt+0x10a8>
   124dc:	bl	112d8 <__errno_location@plt>
   124e0:	ldr	r2, [pc, #124]	; 12564 <__assert_fail@plt+0x1184>
   124e4:	ldr	r3, [sp, #20]
   124e8:	add	r2, pc, r2
   124ec:	ldr	r1, [r0]
   124f0:	mov	r0, r7
   124f4:	bl	11230 <error@plt>
   124f8:	mov	r0, r7
   124fc:	b	12488 <__assert_fail@plt+0x10a8>
   12500:			; <UNDEFINED> instruction: 0x00016fb8
   12504:	andeq	r5, r0, r8, asr #21
   12508:	andeq	r7, r1, r4, ror r1
   1250c:	andeq	r7, r1, r8, ror #2
   12510:	andeq	r7, r1, r4, asr r1
   12514:	muleq	r1, ip, r0
   12518:	andeq	r7, r1, ip, ror #1
   1251c:	andeq	r7, r1, r4, ror r0
   12520:	andeq	r0, r0, r0, lsr r1
   12524:	andeq	r7, r1, r0, rrx
   12528:	andeq	r7, r1, r8, asr #32
   1252c:	andeq	r7, r1, r8, lsr #32
   12530:	andeq	r6, r1, r4, ror #31
   12534:	andeq	r6, r1, r4, lsr pc
   12538:	andeq	r6, r1, r4, lsr #31
   1253c:	andeq	r6, r1, r8, asr #30
   12540:	andeq	r6, r1, r8, ror lr
   12544:	andeq	r6, r1, r4, ror #27
   12548:	andeq	r6, r1, r4, asr #27
   1254c:	andeq	r4, r0, r0, asr sp
   12550:	andeq	r6, r1, r0, ror #27
   12554:	andeq	r6, r1, r0, lsl #27
   12558:	andeq	r0, r0, ip, lsr #2
   1255c:	andeq	r5, r0, r8, ror r4
   12560:	andeq	r5, r0, r0, asr r4
   12564:	andeq	r5, r0, ip, lsr #8
   12568:	push	{r4, r5, r6, lr}
   1256c:	subs	r4, r0, #0
   12570:	ldr	r5, [pc, #568]	; 127b0 <__assert_fail@plt+0x13d0>
   12574:	add	r5, pc, r5
   12578:	beq	125c0 <__assert_fail@plt+0x11e0>
   1257c:	ldr	r3, [pc, #560]	; 127b4 <__assert_fail@plt+0x13d4>
   12580:	mov	r2, #5
   12584:	ldr	r1, [pc, #556]	; 127b8 <__assert_fail@plt+0x13d8>
   12588:	mov	r0, #0
   1258c:	ldr	r3, [r5, r3]
   12590:	add	r1, pc, r1
   12594:	ldr	r6, [r3]
   12598:	bl	111ac <dcgettext@plt>
   1259c:	ldr	r3, [pc, #536]	; 127bc <__assert_fail@plt+0x13dc>
   125a0:	mov	r1, #1
   125a4:	ldr	r3, [r5, r3]
   125a8:	ldr	r3, [r3]
   125ac:	mov	r2, r0
   125b0:	mov	r0, r6
   125b4:	bl	11320 <__fprintf_chk@plt>
   125b8:	mov	r0, r4
   125bc:	bl	1129c <exit@plt>
   125c0:	ldr	r1, [pc, #504]	; 127c0 <__assert_fail@plt+0x13e0>
   125c4:	mov	r2, #5
   125c8:	add	r1, pc, r1
   125cc:	bl	111ac <dcgettext@plt>
   125d0:	ldr	r3, [pc, #484]	; 127bc <__assert_fail@plt+0x13dc>
   125d4:	ldr	r6, [r5, r3]
   125d8:	ldr	r2, [r6]
   125dc:	mov	r1, r0
   125e0:	mov	r0, #1
   125e4:	bl	11308 <__printf_chk@plt>
   125e8:	ldr	r1, [pc, #468]	; 127c4 <__assert_fail@plt+0x13e4>
   125ec:	mov	r2, #5
   125f0:	mov	r0, r4
   125f4:	add	r1, pc, r1
   125f8:	bl	111ac <dcgettext@plt>
   125fc:	ldr	r3, [pc, #452]	; 127c8 <__assert_fail@plt+0x13e8>
   12600:	ldr	r5, [r5, r3]
   12604:	ldr	r1, [r5]
   12608:	bl	11110 <fputs_unlocked@plt>
   1260c:	ldr	r1, [pc, #440]	; 127cc <__assert_fail@plt+0x13ec>
   12610:	mov	r2, #5
   12614:	mov	r0, r4
   12618:	add	r1, pc, r1
   1261c:	bl	111ac <dcgettext@plt>
   12620:	ldr	r1, [r5]
   12624:	bl	11110 <fputs_unlocked@plt>
   12628:	ldr	r1, [pc, #416]	; 127d0 <__assert_fail@plt+0x13f0>
   1262c:	mov	r2, #5
   12630:	mov	r0, r4
   12634:	add	r1, pc, r1
   12638:	bl	111ac <dcgettext@plt>
   1263c:	ldr	r1, [r5]
   12640:	bl	11110 <fputs_unlocked@plt>
   12644:	ldr	r1, [pc, #392]	; 127d4 <__assert_fail@plt+0x13f4>
   12648:	mov	r2, #5
   1264c:	mov	r0, r4
   12650:	add	r1, pc, r1
   12654:	bl	111ac <dcgettext@plt>
   12658:	ldr	r1, [r5]
   1265c:	bl	11110 <fputs_unlocked@plt>
   12660:	ldr	r1, [pc, #368]	; 127d8 <__assert_fail@plt+0x13f8>
   12664:	mov	r2, #5
   12668:	mov	r0, r4
   1266c:	add	r1, pc, r1
   12670:	bl	111ac <dcgettext@plt>
   12674:	ldr	r1, [r5]
   12678:	bl	11110 <fputs_unlocked@plt>
   1267c:	ldr	r1, [pc, #344]	; 127dc <__assert_fail@plt+0x13fc>
   12680:	mov	r2, #5
   12684:	mov	r0, r4
   12688:	add	r1, pc, r1
   1268c:	bl	111ac <dcgettext@plt>
   12690:	ldr	r1, [r5]
   12694:	bl	11110 <fputs_unlocked@plt>
   12698:	ldr	r1, [pc, #320]	; 127e0 <__assert_fail@plt+0x1400>
   1269c:	mov	r2, #5
   126a0:	mov	r0, r4
   126a4:	add	r1, pc, r1
   126a8:	bl	111ac <dcgettext@plt>
   126ac:	ldr	r1, [r5]
   126b0:	bl	11110 <fputs_unlocked@plt>
   126b4:	ldr	r1, [pc, #296]	; 127e4 <__assert_fail@plt+0x1404>
   126b8:	mov	r2, #5
   126bc:	mov	r0, r4
   126c0:	add	r1, pc, r1
   126c4:	bl	111ac <dcgettext@plt>
   126c8:	ldr	r1, [r5]
   126cc:	bl	11110 <fputs_unlocked@plt>
   126d0:	ldr	r1, [pc, #272]	; 127e8 <__assert_fail@plt+0x1408>
   126d4:	mov	r2, #5
   126d8:	mov	r0, r4
   126dc:	add	r1, pc, r1
   126e0:	bl	111ac <dcgettext@plt>
   126e4:	ldr	r1, [r5]
   126e8:	bl	11110 <fputs_unlocked@plt>
   126ec:	ldr	r1, [pc, #248]	; 127ec <__assert_fail@plt+0x140c>
   126f0:	mov	r2, #5
   126f4:	mov	r0, r4
   126f8:	add	r1, pc, r1
   126fc:	bl	111ac <dcgettext@plt>
   12700:	ldr	r2, [pc, #232]	; 127f0 <__assert_fail@plt+0x1410>
   12704:	ldr	r3, [pc, #232]	; 127f4 <__assert_fail@plt+0x1414>
   12708:	add	r2, pc, r2
   1270c:	add	r3, pc, r3
   12710:	mov	r1, r0
   12714:	mov	r0, #1
   12718:	bl	11308 <__printf_chk@plt>
   1271c:	mov	r0, #5
   12720:	mov	r1, r4
   12724:	bl	1135c <setlocale@plt>
   12728:	cmp	r0, #0
   1272c:	beq	12748 <__assert_fail@plt+0x1368>
   12730:	ldr	r1, [pc, #192]	; 127f8 <__assert_fail@plt+0x1418>
   12734:	mov	r2, #3
   12738:	add	r1, pc, r1
   1273c:	bl	113bc <strncmp@plt>
   12740:	cmp	r0, #0
   12744:	bne	1277c <__assert_fail@plt+0x139c>
   12748:	ldr	r1, [pc, #172]	; 127fc <__assert_fail@plt+0x141c>
   1274c:	mov	r2, #5
   12750:	mov	r0, #0
   12754:	add	r1, pc, r1
   12758:	bl	111ac <dcgettext@plt>
   1275c:	mov	r5, r0
   12760:	ldr	r0, [r6]
   12764:	bl	12944 <close_stdout@@Base+0x118>
   12768:	mov	r1, r5
   1276c:	mov	r2, r0
   12770:	mov	r0, #1
   12774:	bl	11308 <__printf_chk@plt>
   12778:	b	125b8 <__assert_fail@plt+0x11d8>
   1277c:	ldr	r1, [pc, #124]	; 12800 <__assert_fail@plt+0x1420>
   12780:	mov	r2, #5
   12784:	mov	r0, r4
   12788:	add	r1, pc, r1
   1278c:	bl	111ac <dcgettext@plt>
   12790:	mov	r5, r0
   12794:	ldr	r0, [r6]
   12798:	bl	12944 <close_stdout@@Base+0x118>
   1279c:	mov	r1, r5
   127a0:	mov	r2, r0
   127a4:	mov	r0, #1
   127a8:	bl	11308 <__printf_chk@plt>
   127ac:	b	12748 <__assert_fail@plt+0x1368>
   127b0:	andeq	r6, r1, r4, lsl #21
   127b4:	andeq	r0, r0, r8, lsl r1
   127b8:			; <UNDEFINED> instruction: 0x00004bbc
   127bc:	andeq	r0, r0, ip, lsr r1
   127c0:	andeq	r4, r0, ip, lsr #23
   127c4:	andeq	r4, r0, r4, lsr #23
   127c8:	andeq	r0, r0, r0, lsr r1
   127cc:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   127d0:	andeq	r4, r0, r4, lsr #24
   127d4:	ldrdeq	r4, [r0], -ip
   127d8:	andeq	r4, r0, ip, ror lr
   127dc:	strdeq	r4, [r0], -r4	; <UNPREDICTABLE>
   127e0:	andeq	r4, r0, r8, lsl #30
   127e4:	andeq	r4, r0, r4, lsr #30
   127e8:	ldrdeq	r4, [r0], -r0
   127ec:	andeq	r5, r0, r8, lsl #2
   127f0:	andeq	r5, r0, r0, lsl r1
   127f4:	andeq	r5, r0, ip, lsl r1
   127f8:	andeq	r5, r0, r8, lsl r1
   127fc:	andeq	r5, r0, r8, asr #2
   12800:	andeq	r5, r0, ip, asr #1
   12804:	ldr	r3, [pc, #8]	; 12814 <__assert_fail@plt+0x1434>
   12808:	add	r3, pc, r3
   1280c:	str	r0, [r3]
   12810:	bx	lr
   12814:	andeq	r6, r1, r4, lsl #27
   12818:	ldr	r3, [pc, #8]	; 12828 <__assert_fail@plt+0x1448>
   1281c:	add	r3, pc, r3
   12820:	strb	r0, [r3, #4]
   12824:	bx	lr
   12828:	andeq	r6, r1, r0, ror sp

0001282c <close_stdout@@Base>:
   1282c:	push	{r4, r5, r6, r7, lr}
   12830:	sub	sp, sp, #12
   12834:	ldr	r4, [pc, #228]	; 12920 <close_stdout@@Base+0xf4>
   12838:	ldr	r3, [pc, #228]	; 12924 <close_stdout@@Base+0xf8>
   1283c:	add	r4, pc, r4
   12840:	ldr	r3, [r4, r3]
   12844:	ldr	r0, [r3]
   12848:	bl	15dd8 <close_stdout@@Base+0x35ac>
   1284c:	cmp	r0, #0
   12850:	beq	12878 <close_stdout@@Base+0x4c>
   12854:	ldr	r3, [pc, #204]	; 12928 <close_stdout@@Base+0xfc>
   12858:	add	r3, pc, r3
   1285c:	ldrb	r3, [r3, #4]
   12860:	cmp	r3, #0
   12864:	beq	12898 <close_stdout@@Base+0x6c>
   12868:	bl	112d8 <__errno_location@plt>
   1286c:	ldr	r3, [r0]
   12870:	cmp	r3, #32
   12874:	bne	12898 <close_stdout@@Base+0x6c>
   12878:	ldr	r3, [pc, #172]	; 1292c <close_stdout@@Base+0x100>
   1287c:	ldr	r3, [r4, r3]
   12880:	ldr	r0, [r3]
   12884:	bl	15dd8 <close_stdout@@Base+0x35ac>
   12888:	cmp	r0, #0
   1288c:	bne	128ec <close_stdout@@Base+0xc0>
   12890:	add	sp, sp, #12
   12894:	pop	{r4, r5, r6, r7, pc}
   12898:	ldr	r1, [pc, #144]	; 12930 <close_stdout@@Base+0x104>
   1289c:	mov	r0, #0
   128a0:	mov	r2, #5
   128a4:	add	r1, pc, r1
   128a8:	bl	111ac <dcgettext@plt>
   128ac:	ldr	r3, [pc, #128]	; 12934 <close_stdout@@Base+0x108>
   128b0:	ldr	r5, [pc, r3]
   128b4:	cmp	r5, #0
   128b8:	mov	r6, r0
   128bc:	beq	128fc <close_stdout@@Base+0xd0>
   128c0:	bl	112d8 <__errno_location@plt>
   128c4:	ldr	r7, [r0]
   128c8:	mov	r0, r5
   128cc:	bl	14228 <close_stdout@@Base+0x19fc>
   128d0:	ldr	r2, [pc, #96]	; 12938 <close_stdout@@Base+0x10c>
   128d4:	str	r6, [sp]
   128d8:	mov	r1, r7
   128dc:	add	r2, pc, r2
   128e0:	mov	r3, r0
   128e4:	mov	r0, #0
   128e8:	bl	11230 <error@plt>
   128ec:	ldr	r3, [pc, #72]	; 1293c <close_stdout@@Base+0x110>
   128f0:	ldr	r3, [r4, r3]
   128f4:	ldr	r0, [r3]
   128f8:	bl	11164 <_exit@plt>
   128fc:	bl	112d8 <__errno_location@plt>
   12900:	ldr	r2, [pc, #56]	; 12940 <close_stdout@@Base+0x114>
   12904:	add	r2, pc, r2
   12908:	mov	r3, r0
   1290c:	mov	r0, r5
   12910:	ldr	r1, [r3]
   12914:	mov	r3, r6
   12918:	bl	11230 <error@plt>
   1291c:	b	128ec <close_stdout@@Base+0xc0>
   12920:			; <UNDEFINED> instruction: 0x000167bc
   12924:	andeq	r0, r0, r0, lsr r1
   12928:	andeq	r6, r1, r4, lsr sp
   1292c:	andeq	r0, r0, r8, lsl r1
   12930:	muleq	r0, r8, r2
   12934:	ldrdeq	r6, [r1], -ip
   12938:	andeq	r5, r0, ip, ror #4
   1293c:	andeq	r0, r0, r4, lsr r1
   12940:	andeq	r5, r0, r0, lsl r0
   12944:	ldrb	r3, [r0]
   12948:	cmp	r3, #47	; 0x2f
   1294c:	bne	12968 <close_stdout@@Base+0x13c>
   12950:	add	r2, r0, #1
   12954:	mov	r0, r2
   12958:	add	r2, r2, #1
   1295c:	ldrb	r3, [r0]
   12960:	cmp	r3, #47	; 0x2f
   12964:	beq	12954 <close_stdout@@Base+0x128>
   12968:	cmp	r3, #0
   1296c:	bxeq	lr
   12970:	mov	r2, r0
   12974:	mov	r1, #0
   12978:	cmp	r3, #47	; 0x2f
   1297c:	moveq	r1, #1
   12980:	beq	12990 <close_stdout@@Base+0x164>
   12984:	cmp	r1, #0
   12988:	movne	r0, r2
   1298c:	movne	r1, #0
   12990:	ldrb	r3, [r2, #1]!
   12994:	cmp	r3, #0
   12998:	bne	12978 <close_stdout@@Base+0x14c>
   1299c:	bx	lr
   129a0:	push	{r4, lr}
   129a4:	mov	r4, r0
   129a8:	bl	112a8 <strlen@plt>
   129ac:	cmp	r0, #1
   129b0:	popls	{r4, pc}
   129b4:	sub	r3, r0, #1
   129b8:	ldrb	r2, [r4, r3]
   129bc:	cmp	r2, #47	; 0x2f
   129c0:	popne	{r4, pc}
   129c4:	mov	r0, r3
   129c8:	cmp	r0, #1
   129cc:	sub	r3, r3, #1
   129d0:	beq	129e4 <close_stdout@@Base+0x1b8>
   129d4:	ldrb	r2, [r4, r3]
   129d8:	cmp	r2, #47	; 0x2f
   129dc:	popne	{r4, pc}
   129e0:	b	129c4 <close_stdout@@Base+0x198>
   129e4:	pop	{r4, pc}
   129e8:	b	11140 <posix_fadvise64@plt>
   129ec:	cmp	r0, #0
   129f0:	push	{r4, r5, r6, lr}
   129f4:	mov	r6, r1
   129f8:	sub	sp, sp, #16
   129fc:	beq	12a20 <close_stdout@@Base+0x1f4>
   12a00:	mov	r4, #0
   12a04:	mov	r5, #0
   12a08:	bl	11314 <fileno@plt>
   12a0c:	str	r6, [sp, #8]
   12a10:	mov	r2, r4
   12a14:	mov	r3, r5
   12a18:	strd	r4, [sp]
   12a1c:	bl	129e8 <close_stdout@@Base+0x1bc>
   12a20:	add	sp, sp, #16
   12a24:	pop	{r4, r5, r6, pc}
   12a28:	mov	r1, #0
   12a2c:	mov	r2, #20
   12a30:	b	112f0 <memset@plt>
   12a34:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   12a38:	mov	r5, r1
   12a3c:	ldr	r3, [r1]
   12a40:	mov	r9, r0
   12a44:	ldr	sl, [r0, #8]
   12a48:	mov	r7, r2
   12a4c:	tst	r3, #16
   12a50:	ldr	r8, [r0]
   12a54:	moveq	r4, sl
   12a58:	add	r8, sl, r8
   12a5c:	beq	12a74 <close_stdout@@Base+0x248>
   12a60:	b	12ad8 <close_stdout@@Base+0x2ac>
   12a64:	cmp	r6, r7
   12a68:	strb	r6, [r4]
   12a6c:	add	r4, r4, #1
   12a70:	beq	12ac8 <close_stdout@@Base+0x29c>
   12a74:	ldmib	r5, {r3, ip}
   12a78:	cmp	r3, ip
   12a7c:	bcs	12ae0 <close_stdout@@Base+0x2b4>
   12a80:	add	ip, r3, #1
   12a84:	str	ip, [r5, #4]
   12a88:	ldrb	r6, [r3]
   12a8c:	cmp	r4, r8
   12a90:	bne	12a64 <close_stdout@@Base+0x238>
   12a94:	mov	r0, sl
   12a98:	mov	r1, r9
   12a9c:	ldr	r4, [r9]
   12aa0:	bl	14a78 <close_stdout@@Base+0x224c>
   12aa4:	ldr	r8, [r9]
   12aa8:	cmp	r6, r7
   12aac:	add	r4, r0, r4
   12ab0:	str	r0, [r9, #8]
   12ab4:	mov	sl, r0
   12ab8:	add	r8, r0, r8
   12abc:	strb	r6, [r4]
   12ac0:	add	r4, r4, #1
   12ac4:	bne	12a74 <close_stdout@@Base+0x248>
   12ac8:	rsb	r4, sl, r4
   12acc:	mov	r0, r9
   12ad0:	str	r4, [r9, #4]
   12ad4:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ad8:	mov	r0, #0
   12adc:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   12ae0:	mov	r0, r5
   12ae4:	bl	11344 <__uflow@plt>
   12ae8:	cmn	r0, #1
   12aec:	mov	r6, r0
   12af0:	bne	12a8c <close_stdout@@Base+0x260>
   12af4:	cmp	r4, sl
   12af8:	beq	12ad8 <close_stdout@@Base+0x2ac>
   12afc:	ldr	r3, [r5]
   12b00:	tst	r3, #32
   12b04:	bne	12ad8 <close_stdout@@Base+0x2ac>
   12b08:	ldrb	r3, [r4, #-1]
   12b0c:	cmp	r3, r7
   12b10:	beq	12ac8 <close_stdout@@Base+0x29c>
   12b14:	mov	r6, r7
   12b18:	b	12a8c <close_stdout@@Base+0x260>
   12b1c:	mov	r2, #10
   12b20:	b	12a34 <close_stdout@@Base+0x208>
   12b24:	ldr	r0, [r0, #8]
   12b28:	b	11158 <free@plt>
   12b2c:	push	{r3, r4, r5, r6, r7, lr}
   12b30:	subs	r4, r0, #0
   12b34:	ldr	r5, [pc, #172]	; 12be8 <close_stdout@@Base+0x3bc>
   12b38:	add	r5, pc, r5
   12b3c:	beq	12bc4 <close_stdout@@Base+0x398>
   12b40:	mov	r1, #47	; 0x2f
   12b44:	bl	11368 <strrchr@plt>
   12b48:	subs	r6, r0, #0
   12b4c:	beq	12ba8 <close_stdout@@Base+0x37c>
   12b50:	add	r7, r6, #1
   12b54:	rsb	r3, r4, r7
   12b58:	cmp	r3, #6
   12b5c:	ble	12ba8 <close_stdout@@Base+0x37c>
   12b60:	ldr	r1, [pc, #132]	; 12bec <close_stdout@@Base+0x3c0>
   12b64:	sub	r0, r6, #6
   12b68:	mov	r2, #7
   12b6c:	add	r1, pc, r1
   12b70:	bl	113bc <strncmp@plt>
   12b74:	cmp	r0, #0
   12b78:	bne	12ba8 <close_stdout@@Base+0x37c>
   12b7c:	ldr	r1, [pc, #108]	; 12bf0 <close_stdout@@Base+0x3c4>
   12b80:	mov	r0, r7
   12b84:	mov	r2, #3
   12b88:	add	r1, pc, r1
   12b8c:	bl	113bc <strncmp@plt>
   12b90:	cmp	r0, #0
   12b94:	movne	r4, r7
   12b98:	ldreq	r3, [pc, #84]	; 12bf4 <close_stdout@@Base+0x3c8>
   12b9c:	addeq	r4, r6, #4
   12ba0:	ldreq	r3, [r5, r3]
   12ba4:	streq	r4, [r3]
   12ba8:	ldr	r2, [pc, #72]	; 12bf8 <close_stdout@@Base+0x3cc>
   12bac:	ldr	r3, [pc, #72]	; 12bfc <close_stdout@@Base+0x3d0>
   12bb0:	ldr	r2, [r5, r2]
   12bb4:	str	r4, [r2]
   12bb8:	ldr	r3, [r5, r3]
   12bbc:	str	r4, [r3]
   12bc0:	pop	{r3, r4, r5, r6, r7, pc}
   12bc4:	ldr	r3, [pc, #52]	; 12c00 <close_stdout@@Base+0x3d4>
   12bc8:	mov	r1, #1
   12bcc:	ldr	r0, [pc, #48]	; 12c04 <close_stdout@@Base+0x3d8>
   12bd0:	mov	r2, #55	; 0x37
   12bd4:	ldr	r3, [r5, r3]
   12bd8:	add	r0, pc, r0
   12bdc:	ldr	r3, [r3]
   12be0:	bl	111e8 <fwrite@plt>
   12be4:	bl	113c8 <abort@plt>
   12be8:	andeq	r6, r1, r0, asr #9
   12bec:	andeq	r5, r0, ip, lsl r0
   12bf0:	andeq	r5, r0, r8
   12bf4:	andeq	r0, r0, r4, asr #2
   12bf8:	andeq	r0, r0, ip, lsr r1
   12bfc:	andeq	r0, r0, r8, lsr r1
   12c00:	andeq	r0, r0, r8, lsl r1
   12c04:	andeq	r4, r0, r8, ror pc
   12c08:	push	{r3, lr}
   12c0c:	mov	r3, r0
   12c10:	mov	r2, #0
   12c14:	cmp	r1, #8
   12c18:	str	r2, [r3], #4
   12c1c:	add	r3, r3, #4
   12c20:	str	r2, [r0, #4]
   12c24:	str	r2, [r3], #4
   12c28:	str	r2, [r3], #4
   12c2c:	str	r2, [r3], #4
   12c30:	str	r2, [r3], #4
   12c34:	str	r2, [r3], #4
   12c38:	str	r2, [r3], #4
   12c3c:	str	r2, [r3], #4
   12c40:	str	r2, [r3], #4
   12c44:	str	r2, [r3], #4
   12c48:	str	r2, [r3]
   12c4c:	beq	12c58 <close_stdout@@Base+0x42c>
   12c50:	str	r1, [r0]
   12c54:	pop	{r3, pc}
   12c58:	bl	113c8 <abort@plt>
   12c5c:	push	{r4, r5, r6, lr}
   12c60:	mov	r4, r0
   12c64:	mov	r6, r1
   12c68:	mov	r0, #0
   12c6c:	mov	r1, r4
   12c70:	mov	r2, #5
   12c74:	bl	111ac <dcgettext@plt>
   12c78:	cmp	r0, r4
   12c7c:	mov	r5, r0
   12c80:	beq	12c88 <close_stdout@@Base+0x45c>
   12c84:	pop	{r4, r5, r6, pc}
   12c88:	bl	15e58 <close_stdout@@Base+0x362c>
   12c8c:	ldrb	r3, [r0]
   12c90:	bic	r3, r3, #32
   12c94:	cmp	r3, #85	; 0x55
   12c98:	bne	12d0c <close_stdout@@Base+0x4e0>
   12c9c:	ldrb	r3, [r0, #1]
   12ca0:	bic	r3, r3, #32
   12ca4:	cmp	r3, #84	; 0x54
   12ca8:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12cac:	ldrb	r3, [r0, #2]
   12cb0:	bic	r3, r3, #32
   12cb4:	cmp	r3, #70	; 0x46
   12cb8:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12cbc:	ldrb	r3, [r0, #3]
   12cc0:	cmp	r3, #45	; 0x2d
   12cc4:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12cc8:	ldrb	r3, [r0, #4]
   12ccc:	cmp	r3, #56	; 0x38
   12cd0:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12cd4:	ldrb	r3, [r0, #5]
   12cd8:	cmp	r3, #0
   12cdc:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12ce0:	ldrb	r3, [r5]
   12ce4:	cmp	r3, #96	; 0x60
   12ce8:	beq	12d84 <close_stdout@@Base+0x558>
   12cec:	ldr	r0, [pc, #180]	; 12da8 <close_stdout@@Base+0x57c>
   12cf0:	add	r0, pc, r0
   12cf4:	pop	{r4, r5, r6, pc}
   12cf8:	cmp	r6, #7
   12cfc:	beq	12d90 <close_stdout@@Base+0x564>
   12d00:	ldr	r0, [pc, #164]	; 12dac <close_stdout@@Base+0x580>
   12d04:	add	r0, pc, r0
   12d08:	pop	{r4, r5, r6, pc}
   12d0c:	cmp	r3, #71	; 0x47
   12d10:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12d14:	ldrb	r3, [r0, #1]
   12d18:	bic	r3, r3, #32
   12d1c:	cmp	r3, #66	; 0x42
   12d20:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12d24:	ldrb	r3, [r0, #2]
   12d28:	cmp	r3, #49	; 0x31
   12d2c:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12d30:	ldrb	r3, [r0, #3]
   12d34:	cmp	r3, #56	; 0x38
   12d38:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12d3c:	ldrb	r3, [r0, #4]
   12d40:	cmp	r3, #48	; 0x30
   12d44:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12d48:	ldrb	r3, [r0, #5]
   12d4c:	cmp	r3, #51	; 0x33
   12d50:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12d54:	ldrb	r3, [r0, #6]
   12d58:	cmp	r3, #48	; 0x30
   12d5c:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12d60:	ldrb	r3, [r0, #7]
   12d64:	cmp	r3, #0
   12d68:	bne	12cf8 <close_stdout@@Base+0x4cc>
   12d6c:	ldrb	r3, [r5]
   12d70:	cmp	r3, #96	; 0x60
   12d74:	beq	12d9c <close_stdout@@Base+0x570>
   12d78:	ldr	r0, [pc, #48]	; 12db0 <close_stdout@@Base+0x584>
   12d7c:	add	r0, pc, r0
   12d80:	pop	{r4, r5, r6, pc}
   12d84:	ldr	r0, [pc, #40]	; 12db4 <close_stdout@@Base+0x588>
   12d88:	add	r0, pc, r0
   12d8c:	pop	{r4, r5, r6, pc}
   12d90:	ldr	r0, [pc, #32]	; 12db8 <close_stdout@@Base+0x58c>
   12d94:	add	r0, pc, r0
   12d98:	pop	{r4, r5, r6, pc}
   12d9c:	ldr	r0, [pc, #24]	; 12dbc <close_stdout@@Base+0x590>
   12da0:	add	r0, pc, r0
   12da4:	pop	{r4, r5, r6, pc}
   12da8:	andeq	r4, r0, r4, asr #29
   12dac:			; <UNDEFINED> instruction: 0x00004eb8
   12db0:	andeq	r4, r0, ip, lsr lr
   12db4:	andeq	r4, r0, r0, asr #28
   12db8:	andeq	r4, r0, ip, lsr #28
   12dbc:	andeq	r4, r0, r4, lsr #28
   12dc0:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12dc4:	sub	sp, sp, #124	; 0x7c
   12dc8:	ldr	ip, [pc, #3304]	; 13ab8 <close_stdout@@Base+0x128c>
   12dcc:	mov	sl, r1
   12dd0:	str	r0, [sp, #40]	; 0x28
   12dd4:	mov	r8, r3
   12dd8:	ldr	r0, [pc, #3292]	; 13abc <close_stdout@@Base+0x1290>
   12ddc:	add	ip, pc, ip
   12de0:	str	r2, [sp, #32]
   12de4:	ldr	r1, [sp, #164]	; 0xa4
   12de8:	mov	r3, ip
   12dec:	ldr	r0, [ip, r0]
   12df0:	ldr	r2, [sp, #172]	; 0xac
   12df4:	ubfx	r1, r1, #1, #1
   12df8:	str	r1, [sp, #36]	; 0x24
   12dfc:	str	r0, [sp, #56]	; 0x38
   12e00:	ldr	r0, [sp, #168]	; 0xa8
   12e04:	ldr	r1, [sp, #176]	; 0xb0
   12e08:	str	r2, [sp, #72]	; 0x48
   12e0c:	str	r0, [sp, #48]	; 0x30
   12e10:	ldr	r0, [sp, #56]	; 0x38
   12e14:	str	r1, [sp, #68]	; 0x44
   12e18:	ldr	r3, [r0]
   12e1c:	str	r3, [sp, #116]	; 0x74
   12e20:	bl	11200 <__ctype_get_mb_cur_max@plt>
   12e24:	ldr	r2, [sp, #160]	; 0xa0
   12e28:	str	r0, [sp, #64]	; 0x40
   12e2c:	cmp	r2, #8
   12e30:	addls	pc, pc, r2, lsl #2
   12e34:	b	13994 <close_stdout@@Base+0x1168>
   12e38:	b	12e5c <close_stdout@@Base+0x630>
   12e3c:	b	136ac <close_stdout@@Base+0xe80>
   12e40:	b	136dc <close_stdout@@Base+0xeb0>
   12e44:	b	1358c <close_stdout@@Base+0xd60>
   12e48:	b	135cc <close_stdout@@Base+0xda0>
   12e4c:	b	135f8 <close_stdout@@Base+0xdcc>
   12e50:	b	13618 <close_stdout@@Base+0xdec>
   12e54:	b	13618 <close_stdout@@Base+0xdec>
   12e58:	b	13618 <close_stdout@@Base+0xdec>
   12e5c:	mov	r2, #0
   12e60:	str	r2, [sp, #36]	; 0x24
   12e64:	mov	r9, r2
   12e68:	str	r2, [sp, #24]
   12e6c:	str	r2, [sp, #28]
   12e70:	str	r2, [sp, #52]	; 0x34
   12e74:	ldr	r0, [sp, #36]	; 0x24
   12e78:	mov	fp, #0
   12e7c:	ldr	r1, [sp, #24]
   12e80:	eor	r2, r0, #1
   12e84:	eor	r3, r1, #1
   12e88:	and	r3, r2, r3
   12e8c:	and	r2, r1, r0
   12e90:	str	r3, [sp, #44]	; 0x2c
   12e94:	str	r2, [sp, #76]	; 0x4c
   12e98:	cmn	r8, #1
   12e9c:	beq	1321c <close_stdout@@Base+0x9f0>
   12ea0:	subs	r3, fp, r8
   12ea4:	movne	r3, #1
   12ea8:	cmp	r3, #0
   12eac:	beq	13234 <close_stdout@@Base+0xa08>
   12eb0:	ldr	r3, [sp, #28]
   12eb4:	ldr	r0, [sp, #24]
   12eb8:	adds	r7, r3, #0
   12ebc:	movne	r7, #1
   12ec0:	ands	r6, r7, r0
   12ec4:	bne	13720 <close_stdout@@Base+0xef4>
   12ec8:	ldr	r1, [sp, #32]
   12ecc:	add	r5, r1, fp
   12ed0:	ldrb	r4, [r5]
   12ed4:	cmp	r4, #126	; 0x7e
   12ed8:	addls	pc, pc, r4, lsl #2
   12edc:	b	134a0 <close_stdout@@Base+0xc74>
   12ee0:	b	133ac <close_stdout@@Base+0xb80>
   12ee4:	b	134a0 <close_stdout@@Base+0xc74>
   12ee8:	b	134a0 <close_stdout@@Base+0xc74>
   12eec:	b	134a0 <close_stdout@@Base+0xc74>
   12ef0:	b	134a0 <close_stdout@@Base+0xc74>
   12ef4:	b	134a0 <close_stdout@@Base+0xc74>
   12ef8:	b	134a0 <close_stdout@@Base+0xc74>
   12efc:	b	13394 <close_stdout@@Base+0xb68>
   12f00:	b	1337c <close_stdout@@Base+0xb50>
   12f04:	b	133a4 <close_stdout@@Base+0xb78>
   12f08:	b	1339c <close_stdout@@Base+0xb70>
   12f0c:	b	1338c <close_stdout@@Base+0xb60>
   12f10:	b	13384 <close_stdout@@Base+0xb58>
   12f14:	b	13348 <close_stdout@@Base+0xb1c>
   12f18:	b	134a0 <close_stdout@@Base+0xc74>
   12f1c:	b	134a0 <close_stdout@@Base+0xc74>
   12f20:	b	134a0 <close_stdout@@Base+0xc74>
   12f24:	b	134a0 <close_stdout@@Base+0xc74>
   12f28:	b	134a0 <close_stdout@@Base+0xc74>
   12f2c:	b	134a0 <close_stdout@@Base+0xc74>
   12f30:	b	134a0 <close_stdout@@Base+0xc74>
   12f34:	b	134a0 <close_stdout@@Base+0xc74>
   12f38:	b	134a0 <close_stdout@@Base+0xc74>
   12f3c:	b	134a0 <close_stdout@@Base+0xc74>
   12f40:	b	134a0 <close_stdout@@Base+0xc74>
   12f44:	b	134a0 <close_stdout@@Base+0xc74>
   12f48:	b	134a0 <close_stdout@@Base+0xc74>
   12f4c:	b	134a0 <close_stdout@@Base+0xc74>
   12f50:	b	134a0 <close_stdout@@Base+0xc74>
   12f54:	b	134a0 <close_stdout@@Base+0xc74>
   12f58:	b	134a0 <close_stdout@@Base+0xc74>
   12f5c:	b	134a0 <close_stdout@@Base+0xc74>
   12f60:	b	132d4 <close_stdout@@Base+0xaa8>
   12f64:	b	132d4 <close_stdout@@Base+0xaa8>
   12f68:	b	132d4 <close_stdout@@Base+0xaa8>
   12f6c:	b	132cc <close_stdout@@Base+0xaa0>
   12f70:	b	132d4 <close_stdout@@Base+0xaa8>
   12f74:	b	131a8 <close_stdout@@Base+0x97c>
   12f78:	b	132d4 <close_stdout@@Base+0xaa8>
   12f7c:	b	13448 <close_stdout@@Base+0xc1c>
   12f80:	b	132d4 <close_stdout@@Base+0xaa8>
   12f84:	b	132d4 <close_stdout@@Base+0xaa8>
   12f88:	b	132d4 <close_stdout@@Base+0xaa8>
   12f8c:	b	131a8 <close_stdout@@Base+0x97c>
   12f90:	b	131a8 <close_stdout@@Base+0x97c>
   12f94:	b	131a8 <close_stdout@@Base+0x97c>
   12f98:	b	131a8 <close_stdout@@Base+0x97c>
   12f9c:	b	131a8 <close_stdout@@Base+0x97c>
   12fa0:	b	131a8 <close_stdout@@Base+0x97c>
   12fa4:	b	131a8 <close_stdout@@Base+0x97c>
   12fa8:	b	131a8 <close_stdout@@Base+0x97c>
   12fac:	b	131a8 <close_stdout@@Base+0x97c>
   12fb0:	b	131a8 <close_stdout@@Base+0x97c>
   12fb4:	b	131a8 <close_stdout@@Base+0x97c>
   12fb8:	b	131a8 <close_stdout@@Base+0x97c>
   12fbc:	b	131a8 <close_stdout@@Base+0x97c>
   12fc0:	b	131a8 <close_stdout@@Base+0x97c>
   12fc4:	b	131a8 <close_stdout@@Base+0x97c>
   12fc8:	b	131a8 <close_stdout@@Base+0x97c>
   12fcc:	b	132d4 <close_stdout@@Base+0xaa8>
   12fd0:	b	132d4 <close_stdout@@Base+0xaa8>
   12fd4:	b	132d4 <close_stdout@@Base+0xaa8>
   12fd8:	b	132d4 <close_stdout@@Base+0xaa8>
   12fdc:	b	130dc <close_stdout@@Base+0x8b0>
   12fe0:	b	134a0 <close_stdout@@Base+0xc74>
   12fe4:	b	131a8 <close_stdout@@Base+0x97c>
   12fe8:	b	131a8 <close_stdout@@Base+0x97c>
   12fec:	b	131a8 <close_stdout@@Base+0x97c>
   12ff0:	b	131a8 <close_stdout@@Base+0x97c>
   12ff4:	b	131a8 <close_stdout@@Base+0x97c>
   12ff8:	b	131a8 <close_stdout@@Base+0x97c>
   12ffc:	b	131a8 <close_stdout@@Base+0x97c>
   13000:	b	131a8 <close_stdout@@Base+0x97c>
   13004:	b	131a8 <close_stdout@@Base+0x97c>
   13008:	b	131a8 <close_stdout@@Base+0x97c>
   1300c:	b	131a8 <close_stdout@@Base+0x97c>
   13010:	b	131a8 <close_stdout@@Base+0x97c>
   13014:	b	131a8 <close_stdout@@Base+0x97c>
   13018:	b	131a8 <close_stdout@@Base+0x97c>
   1301c:	b	131a8 <close_stdout@@Base+0x97c>
   13020:	b	131a8 <close_stdout@@Base+0x97c>
   13024:	b	131a8 <close_stdout@@Base+0x97c>
   13028:	b	131a8 <close_stdout@@Base+0x97c>
   1302c:	b	131a8 <close_stdout@@Base+0x97c>
   13030:	b	131a8 <close_stdout@@Base+0x97c>
   13034:	b	131a8 <close_stdout@@Base+0x97c>
   13038:	b	131a8 <close_stdout@@Base+0x97c>
   1303c:	b	131a8 <close_stdout@@Base+0x97c>
   13040:	b	131a8 <close_stdout@@Base+0x97c>
   13044:	b	131a8 <close_stdout@@Base+0x97c>
   13048:	b	131a8 <close_stdout@@Base+0x97c>
   1304c:	b	132d4 <close_stdout@@Base+0xaa8>
   13050:	b	1342c <close_stdout@@Base+0xc00>
   13054:	b	131a8 <close_stdout@@Base+0x97c>
   13058:	b	132d4 <close_stdout@@Base+0xaa8>
   1305c:	b	131a8 <close_stdout@@Base+0x97c>
   13060:	b	132d4 <close_stdout@@Base+0xaa8>
   13064:	b	131a8 <close_stdout@@Base+0x97c>
   13068:	b	131a8 <close_stdout@@Base+0x97c>
   1306c:	b	131a8 <close_stdout@@Base+0x97c>
   13070:	b	131a8 <close_stdout@@Base+0x97c>
   13074:	b	131a8 <close_stdout@@Base+0x97c>
   13078:	b	131a8 <close_stdout@@Base+0x97c>
   1307c:	b	131a8 <close_stdout@@Base+0x97c>
   13080:	b	131a8 <close_stdout@@Base+0x97c>
   13084:	b	131a8 <close_stdout@@Base+0x97c>
   13088:	b	131a8 <close_stdout@@Base+0x97c>
   1308c:	b	131a8 <close_stdout@@Base+0x97c>
   13090:	b	131a8 <close_stdout@@Base+0x97c>
   13094:	b	131a8 <close_stdout@@Base+0x97c>
   13098:	b	131a8 <close_stdout@@Base+0x97c>
   1309c:	b	131a8 <close_stdout@@Base+0x97c>
   130a0:	b	131a8 <close_stdout@@Base+0x97c>
   130a4:	b	131a8 <close_stdout@@Base+0x97c>
   130a8:	b	131a8 <close_stdout@@Base+0x97c>
   130ac:	b	131a8 <close_stdout@@Base+0x97c>
   130b0:	b	131a8 <close_stdout@@Base+0x97c>
   130b4:	b	131a8 <close_stdout@@Base+0x97c>
   130b8:	b	131a8 <close_stdout@@Base+0x97c>
   130bc:	b	131a8 <close_stdout@@Base+0x97c>
   130c0:	b	131a8 <close_stdout@@Base+0x97c>
   130c4:	b	131a8 <close_stdout@@Base+0x97c>
   130c8:	b	131a8 <close_stdout@@Base+0x97c>
   130cc:	b	132b4 <close_stdout@@Base+0xa88>
   130d0:	b	132d4 <close_stdout@@Base+0xaa8>
   130d4:	b	132b4 <close_stdout@@Base+0xa88>
   130d8:	b	132cc <close_stdout@@Base+0xaa0>
   130dc:	ldr	r3, [sp, #160]	; 0xa0
   130e0:	cmp	r3, #2
   130e4:	beq	13970 <close_stdout@@Base+0x1144>
   130e8:	cmp	r3, #3
   130ec:	bne	131a8 <close_stdout@@Base+0x97c>
   130f0:	ldr	r1, [sp, #164]	; 0xa4
   130f4:	tst	r1, #4
   130f8:	beq	131a8 <close_stdout@@Base+0x97c>
   130fc:	add	r3, fp, #2
   13100:	cmp	r8, r3
   13104:	bls	131a8 <close_stdout@@Base+0x97c>
   13108:	ldrb	r2, [r5, #1]
   1310c:	mov	r1, #1
   13110:	cmp	r2, #63	; 0x3f
   13114:	bne	131a8 <close_stdout@@Base+0x97c>
   13118:	ldr	r0, [sp, #32]
   1311c:	ldrb	ip, [r0, r3]
   13120:	sub	r0, ip, #33	; 0x21
   13124:	uxtb	r0, r0
   13128:	cmp	r0, #29
   1312c:	bhi	131a8 <close_stdout@@Base+0x97c>
   13130:	lsl	r1, r1, r0
   13134:	movw	r0, #20929	; 0x51c1
   13138:	movt	r0, #14336	; 0x3800
   1313c:	and	r0, r1, r0
   13140:	cmp	r0, #0
   13144:	beq	131a8 <close_stdout@@Base+0x97c>
   13148:	ldr	r1, [sp, #36]	; 0x24
   1314c:	cmp	r1, #0
   13150:	bne	132f0 <close_stdout@@Base+0xac4>
   13154:	cmp	r9, sl
   13158:	mov	r4, ip
   1315c:	mov	fp, r3
   13160:	ldrcc	r0, [sp, #40]	; 0x28
   13164:	strbcc	r2, [r0, r9]
   13168:	add	r2, r9, #1
   1316c:	cmp	sl, r2
   13170:	ldrhi	r0, [sp, #40]	; 0x28
   13174:	movhi	r1, #34	; 0x22
   13178:	strbhi	r1, [r0, r2]
   1317c:	add	r2, r9, #2
   13180:	cmp	sl, r2
   13184:	ldrhi	r0, [sp, #40]	; 0x28
   13188:	movhi	r1, #34	; 0x22
   1318c:	strbhi	r1, [r0, r2]
   13190:	add	r2, r9, #3
   13194:	cmp	sl, r2
   13198:	add	r9, r9, #4
   1319c:	ldrhi	r0, [sp, #40]	; 0x28
   131a0:	movhi	r1, #63	; 0x3f
   131a4:	strbhi	r1, [r0, r2]
   131a8:	ldr	r0, [sp, #44]	; 0x2c
   131ac:	cmp	r0, #0
   131b0:	bne	131d8 <close_stdout@@Base+0x9ac>
   131b4:	ldr	r1, [sp, #48]	; 0x30
   131b8:	cmp	r1, #0
   131bc:	beq	131d8 <close_stdout@@Base+0x9ac>
   131c0:	ubfx	r2, r4, #5, #8
   131c4:	and	r3, r4, #31
   131c8:	ldr	r2, [r1, r2, lsl #2]
   131cc:	lsr	r3, r2, r3
   131d0:	tst	r3, #1
   131d4:	bne	131e0 <close_stdout@@Base+0x9b4>
   131d8:	cmp	r6, #0
   131dc:	beq	13200 <close_stdout@@Base+0x9d4>
   131e0:	ldr	r2, [sp, #36]	; 0x24
   131e4:	cmp	r2, #0
   131e8:	bne	132f0 <close_stdout@@Base+0xac4>
   131ec:	cmp	r9, sl
   131f0:	ldrcc	r0, [sp, #40]	; 0x28
   131f4:	movcc	r3, #92	; 0x5c
   131f8:	strbcc	r3, [r0, r9]
   131fc:	add	r9, r9, #1
   13200:	add	fp, fp, #1
   13204:	cmp	r9, sl
   13208:	ldrcc	r1, [sp, #40]	; 0x28
   1320c:	strbcc	r4, [r1, r9]
   13210:	cmn	r8, #1
   13214:	add	r9, r9, #1
   13218:	bne	12ea0 <close_stdout@@Base+0x674>
   1321c:	ldr	r2, [sp, #32]
   13220:	ldrb	r3, [r2, fp]
   13224:	adds	r3, r3, #0
   13228:	movne	r3, #1
   1322c:	cmp	r3, #0
   13230:	bne	12eb0 <close_stdout@@Base+0x684>
   13234:	ldr	r3, [sp, #160]	; 0xa0
   13238:	cmp	r9, #0
   1323c:	cmpeq	r3, #2
   13240:	bne	13250 <close_stdout@@Base+0xa24>
   13244:	ldr	r0, [sp, #36]	; 0x24
   13248:	cmp	r0, #0
   1324c:	bne	132f0 <close_stdout@@Base+0xac4>
   13250:	ldr	r1, [sp, #36]	; 0x24
   13254:	ldr	r2, [sp, #52]	; 0x34
   13258:	eor	r3, r1, #1
   1325c:	cmp	r2, #0
   13260:	moveq	r3, #0
   13264:	andne	r3, r3, #1
   13268:	cmp	r3, #0
   1326c:	beq	13298 <close_stdout@@Base+0xa6c>
   13270:	ldrb	r3, [r2]
   13274:	cmp	r3, #0
   13278:	beq	13298 <close_stdout@@Base+0xa6c>
   1327c:	ldr	r1, [sp, #40]	; 0x28
   13280:	cmp	sl, r9
   13284:	strbhi	r3, [r1, r9]
   13288:	ldrb	r3, [r2, #1]!
   1328c:	add	r9, r9, #1
   13290:	cmp	r3, #0
   13294:	bne	13280 <close_stdout@@Base+0xa54>
   13298:	cmp	r9, sl
   1329c:	movcs	r0, r9
   132a0:	ldrcc	r1, [sp, #40]	; 0x28
   132a4:	movcc	r3, #0
   132a8:	movcc	r0, r9
   132ac:	strbcc	r3, [r1, r9]
   132b0:	b	1332c <close_stdout@@Base+0xb00>
   132b4:	cmn	r8, #1
   132b8:	beq	13980 <close_stdout@@Base+0x1154>
   132bc:	subs	r3, r8, #1
   132c0:	movne	r3, #1
   132c4:	cmp	r3, #0
   132c8:	bne	131a8 <close_stdout@@Base+0x97c>
   132cc:	cmp	fp, #0
   132d0:	bne	131a8 <close_stdout@@Base+0x97c>
   132d4:	ldr	r3, [sp, #36]	; 0x24
   132d8:	ldr	r0, [sp, #160]	; 0xa0
   132dc:	cmp	r0, #2
   132e0:	movne	r3, #0
   132e4:	andeq	r3, r3, #1
   132e8:	cmp	r3, #0
   132ec:	beq	131a8 <close_stdout@@Base+0x97c>
   132f0:	ldr	r2, [sp, #164]	; 0xa4
   132f4:	mov	ip, #0
   132f8:	ldr	r0, [sp, #160]	; 0xa0
   132fc:	bic	r3, r2, #2
   13300:	ldr	r1, [sp, #72]	; 0x48
   13304:	ldr	r2, [sp, #68]	; 0x44
   13308:	stm	sp, {r0, r3}
   1330c:	mov	r3, r8
   13310:	str	r1, [sp, #12]
   13314:	mov	r1, sl
   13318:	str	r2, [sp, #16]
   1331c:	ldr	r0, [sp, #40]	; 0x28
   13320:	ldr	r2, [sp, #32]
   13324:	str	ip, [sp, #8]
   13328:	bl	12dc0 <close_stdout@@Base+0x594>
   1332c:	ldr	r1, [sp, #56]	; 0x38
   13330:	ldr	r2, [sp, #116]	; 0x74
   13334:	ldr	r3, [r1]
   13338:	cmp	r2, r3
   1333c:	bne	13a70 <close_stdout@@Base+0x1244>
   13340:	add	sp, sp, #124	; 0x7c
   13344:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13348:	mov	r3, #114	; 0x72
   1334c:	ldr	r2, [sp, #36]	; 0x24
   13350:	ldr	r0, [sp, #160]	; 0xa0
   13354:	cmp	r0, #2
   13358:	movne	r2, #0
   1335c:	andeq	r2, r2, #1
   13360:	cmp	r2, #0
   13364:	bne	132f0 <close_stdout@@Base+0xac4>
   13368:	ldr	r1, [sp, #24]
   1336c:	cmp	r1, #0
   13370:	beq	131a8 <close_stdout@@Base+0x97c>
   13374:	mov	r4, r3
   13378:	b	131e0 <close_stdout@@Base+0x9b4>
   1337c:	mov	r3, #98	; 0x62
   13380:	b	13368 <close_stdout@@Base+0xb3c>
   13384:	mov	r3, #102	; 0x66
   13388:	b	13368 <close_stdout@@Base+0xb3c>
   1338c:	mov	r3, #118	; 0x76
   13390:	b	13368 <close_stdout@@Base+0xb3c>
   13394:	mov	r3, #97	; 0x61
   13398:	b	13368 <close_stdout@@Base+0xb3c>
   1339c:	mov	r3, #110	; 0x6e
   133a0:	b	1334c <close_stdout@@Base+0xb20>
   133a4:	mov	r3, #116	; 0x74
   133a8:	b	1334c <close_stdout@@Base+0xb20>
   133ac:	ldr	r2, [sp, #24]
   133b0:	cmp	r2, #0
   133b4:	beq	1395c <close_stdout@@Base+0x1130>
   133b8:	ldr	r3, [sp, #36]	; 0x24
   133bc:	cmp	r3, #0
   133c0:	bne	132f0 <close_stdout@@Base+0xac4>
   133c4:	cmp	r9, sl
   133c8:	add	r2, r9, #1
   133cc:	ldrcc	r0, [sp, #40]	; 0x28
   133d0:	movcc	r3, #92	; 0x5c
   133d4:	strbcc	r3, [r0, r9]
   133d8:	add	r3, fp, #1
   133dc:	cmp	r8, r3
   133e0:	bls	13420 <close_stdout@@Base+0xbf4>
   133e4:	ldr	r1, [sp, #32]
   133e8:	ldrb	r3, [r1, r3]
   133ec:	sub	r3, r3, #48	; 0x30
   133f0:	cmp	r3, #9
   133f4:	bhi	13420 <close_stdout@@Base+0xbf4>
   133f8:	cmp	sl, r2
   133fc:	ldrhi	r0, [sp, #40]	; 0x28
   13400:	movhi	r3, #48	; 0x30
   13404:	strbhi	r3, [r0, r2]
   13408:	add	r3, r9, #2
   1340c:	cmp	sl, r3
   13410:	ldrhi	r1, [sp, #40]	; 0x28
   13414:	movhi	r2, #48	; 0x30
   13418:	strbhi	r2, [r1, r3]
   1341c:	add	r2, r9, #3
   13420:	mov	r9, r2
   13424:	mov	r4, #48	; 0x30
   13428:	b	131b4 <close_stdout@@Base+0x988>
   1342c:	ldr	r1, [sp, #76]	; 0x4c
   13430:	cmp	r1, #0
   13434:	beq	13440 <close_stdout@@Base+0xc14>
   13438:	cmp	r7, #0
   1343c:	bne	13200 <close_stdout@@Base+0x9d4>
   13440:	mov	r3, r4
   13444:	b	1334c <close_stdout@@Base+0xb20>
   13448:	ldr	r1, [sp, #160]	; 0xa0
   1344c:	cmp	r1, #2
   13450:	bne	131a8 <close_stdout@@Base+0x97c>
   13454:	ldr	r2, [sp, #36]	; 0x24
   13458:	cmp	r2, #0
   1345c:	bne	132f0 <close_stdout@@Base+0xac4>
   13460:	cmp	r9, sl
   13464:	ldrcc	r0, [sp, #40]	; 0x28
   13468:	movcc	r3, #39	; 0x27
   1346c:	strbcc	r3, [r0, r9]
   13470:	add	r3, r9, #1
   13474:	cmp	sl, r3
   13478:	ldrhi	r1, [sp, #40]	; 0x28
   1347c:	movhi	r2, #92	; 0x5c
   13480:	strbhi	r2, [r1, r3]
   13484:	add	r3, r9, #2
   13488:	cmp	sl, r3
   1348c:	add	r9, r9, #3
   13490:	ldrhi	r0, [sp, #40]	; 0x28
   13494:	movhi	r2, #39	; 0x27
   13498:	strbhi	r2, [r0, r3]
   1349c:	b	131a8 <close_stdout@@Base+0x97c>
   134a0:	ldr	r1, [sp, #64]	; 0x40
   134a4:	cmp	r1, #1
   134a8:	bne	137a0 <close_stdout@@Base+0xf74>
   134ac:	bl	11290 <__ctype_b_loc@plt>
   134b0:	ldr	r2, [sp, #64]	; 0x40
   134b4:	sxth	r3, r4
   134b8:	str	r2, [sp, #60]	; 0x3c
   134bc:	lsl	r3, r3, #1
   134c0:	ldr	r2, [r0]
   134c4:	ldrh	r2, [r2, r3]
   134c8:	eor	r2, r2, #16384	; 0x4000
   134cc:	ubfx	r2, r2, #14, #1
   134d0:	ldr	r1, [sp, #24]
   134d4:	ands	r2, r2, r1
   134d8:	beq	131a8 <close_stdout@@Base+0x97c>
   134dc:	ldr	r3, [sp, #60]	; 0x3c
   134e0:	mov	r0, #92	; 0x5c
   134e4:	ldr	r7, [sp, #36]	; 0x24
   134e8:	add	r1, r3, fp
   134ec:	str	r8, [sp, #60]	; 0x3c
   134f0:	ldr	r3, [sp, #40]	; 0x28
   134f4:	b	13558 <close_stdout@@Base+0xd2c>
   134f8:	cmp	r7, #0
   134fc:	bne	13998 <close_stdout@@Base+0x116c>
   13500:	add	ip, r9, #1
   13504:	cmp	r9, sl
   13508:	strbcc	r0, [r3, r9]
   1350c:	cmp	sl, ip
   13510:	lsrhi	r8, r4, #6
   13514:	addhi	r8, r8, #48	; 0x30
   13518:	strbhi	r8, [r3, ip]
   1351c:	add	ip, r9, #2
   13520:	add	r9, r9, #3
   13524:	cmp	sl, ip
   13528:	ubfxhi	r8, r4, #3, #3
   1352c:	and	r4, r4, #7
   13530:	add	r4, r4, #48	; 0x30
   13534:	addhi	r8, r8, #48	; 0x30
   13538:	strbhi	r8, [r3, ip]
   1353c:	add	fp, fp, #1
   13540:	cmp	r1, fp
   13544:	bls	13584 <close_stdout@@Base+0xd58>
   13548:	cmp	r9, sl
   1354c:	strbcc	r4, [r3, r9]
   13550:	ldrb	r4, [r5, #1]!
   13554:	add	r9, r9, #1
   13558:	cmp	r2, #0
   1355c:	bne	134f8 <close_stdout@@Base+0xccc>
   13560:	cmp	r6, #0
   13564:	beq	1353c <close_stdout@@Base+0xd10>
   13568:	add	fp, fp, #1
   1356c:	cmp	r9, sl
   13570:	strbcc	r0, [r3, r9]
   13574:	cmp	r1, fp
   13578:	add	r9, r9, #1
   1357c:	mov	r6, #0
   13580:	bhi	13548 <close_stdout@@Base+0xd1c>
   13584:	ldr	r8, [sp, #60]	; 0x3c
   13588:	b	13204 <close_stdout@@Base+0x9d8>
   1358c:	ldr	r3, [sp, #36]	; 0x24
   13590:	cmp	r3, #0
   13594:	bne	13a98 <close_stdout@@Base+0x126c>
   13598:	cmp	sl, #0
   1359c:	beq	139b0 <close_stdout@@Base+0x1184>
   135a0:	ldr	r1, [sp, #40]	; 0x28
   135a4:	mov	r0, #1
   135a8:	ldr	r2, [pc, #1296]	; 13ac0 <close_stdout@@Base+0x1294>
   135ac:	mov	r3, #34	; 0x22
   135b0:	str	r0, [sp, #24]
   135b4:	mov	r9, r0
   135b8:	add	r2, pc, r2
   135bc:	str	r0, [sp, #28]
   135c0:	strb	r3, [r1]
   135c4:	str	r2, [sp, #52]	; 0x34
   135c8:	b	12e74 <close_stdout@@Base+0x648>
   135cc:	ldr	r3, [pc, #1264]	; 13ac4 <close_stdout@@Base+0x1298>
   135d0:	mov	r2, #1
   135d4:	mov	r0, #3
   135d8:	str	r2, [sp, #36]	; 0x24
   135dc:	add	r3, pc, r3
   135e0:	str	r2, [sp, #24]
   135e4:	str	r3, [sp, #52]	; 0x34
   135e8:	mov	r9, #0
   135ec:	str	r2, [sp, #28]
   135f0:	str	r0, [sp, #160]	; 0xa0
   135f4:	b	12e74 <close_stdout@@Base+0x648>
   135f8:	mov	r0, #0
   135fc:	mov	r1, #1
   13600:	str	r0, [sp, #36]	; 0x24
   13604:	mov	r9, r0
   13608:	str	r1, [sp, #24]
   1360c:	str	r0, [sp, #28]
   13610:	str	r0, [sp, #52]	; 0x34
   13614:	b	12e74 <close_stdout@@Base+0x648>
   13618:	ldr	r3, [sp, #160]	; 0xa0
   1361c:	cmp	r3, #8
   13620:	beq	1364c <close_stdout@@Base+0xe20>
   13624:	ldr	r0, [pc, #1180]	; 13ac8 <close_stdout@@Base+0x129c>
   13628:	mov	r1, r3
   1362c:	add	r0, pc, r0
   13630:	bl	12c5c <close_stdout@@Base+0x430>
   13634:	ldr	r1, [sp, #160]	; 0xa0
   13638:	str	r0, [sp, #72]	; 0x48
   1363c:	ldr	r0, [pc, #1160]	; 13acc <close_stdout@@Base+0x12a0>
   13640:	add	r0, pc, r0
   13644:	bl	12c5c <close_stdout@@Base+0x430>
   13648:	str	r0, [sp, #68]	; 0x44
   1364c:	ldr	r0, [sp, #36]	; 0x24
   13650:	cmp	r0, #0
   13654:	movne	r9, #0
   13658:	bne	13690 <close_stdout@@Base+0xe64>
   1365c:	ldr	r1, [sp, #72]	; 0x48
   13660:	ldrb	r3, [r1]
   13664:	cmp	r3, #0
   13668:	beq	13a68 <close_stdout@@Base+0x123c>
   1366c:	mov	r2, r1
   13670:	ldr	r1, [sp, #40]	; 0x28
   13674:	mov	r9, r0
   13678:	cmp	r9, sl
   1367c:	strbcc	r3, [r1, r9]
   13680:	ldrb	r3, [r2, #1]!
   13684:	add	r9, r9, #1
   13688:	cmp	r3, #0
   1368c:	bne	13678 <close_stdout@@Base+0xe4c>
   13690:	ldr	r0, [sp, #68]	; 0x44
   13694:	str	r0, [sp, #52]	; 0x34
   13698:	bl	112a8 <strlen@plt>
   1369c:	mov	r2, #1
   136a0:	str	r2, [sp, #24]
   136a4:	str	r0, [sp, #28]
   136a8:	b	12e74 <close_stdout@@Base+0x648>
   136ac:	ldr	r3, [pc, #1052]	; 13ad0 <close_stdout@@Base+0x12a4>
   136b0:	mov	r2, #0
   136b4:	mov	r1, #1
   136b8:	mov	r0, #2
   136bc:	add	r3, pc, r3
   136c0:	str	r1, [sp, #36]	; 0x24
   136c4:	str	r2, [sp, #24]
   136c8:	mov	r9, r2
   136cc:	str	r1, [sp, #28]
   136d0:	str	r3, [sp, #52]	; 0x34
   136d4:	str	r0, [sp, #160]	; 0xa0
   136d8:	b	12e74 <close_stdout@@Base+0x648>
   136dc:	ldr	r3, [sp, #36]	; 0x24
   136e0:	cmp	r3, #0
   136e4:	bne	13a74 <close_stdout@@Base+0x1248>
   136e8:	cmp	sl, #0
   136ec:	beq	139d0 <close_stdout@@Base+0x11a4>
   136f0:	ldr	r1, [sp, #40]	; 0x28
   136f4:	mov	r3, #39	; 0x27
   136f8:	ldr	r2, [sp, #36]	; 0x24
   136fc:	mov	r0, #1
   13700:	mov	r9, r0
   13704:	str	r0, [sp, #28]
   13708:	strb	r3, [r1]
   1370c:	ldr	r3, [pc, #960]	; 13ad4 <close_stdout@@Base+0x12a8>
   13710:	str	r2, [sp, #24]
   13714:	add	r3, pc, r3
   13718:	str	r3, [sp, #52]	; 0x34
   1371c:	b	12e74 <close_stdout@@Base+0x648>
   13720:	ldr	r2, [sp, #28]
   13724:	cmp	r2, #1
   13728:	add	r4, fp, r2
   1372c:	movls	r3, #0
   13730:	movhi	r3, #1
   13734:	cmn	r8, #1
   13738:	movne	r3, #0
   1373c:	cmp	r3, #0
   13740:	beq	13750 <close_stdout@@Base+0xf24>
   13744:	ldr	r0, [sp, #32]
   13748:	bl	112a8 <strlen@plt>
   1374c:	mov	r8, r0
   13750:	cmp	r8, r4
   13754:	ldrcc	r3, [sp, #32]
   13758:	movcc	r6, #0
   1375c:	addcc	r5, r3, fp
   13760:	bcc	12ed0 <close_stdout@@Base+0x6a4>
   13764:	ldr	r0, [sp, #32]
   13768:	ldr	r1, [sp, #52]	; 0x34
   1376c:	add	r5, r0, fp
   13770:	ldr	r2, [sp, #28]
   13774:	mov	r0, r5
   13778:	bl	11194 <memcmp@plt>
   1377c:	cmp	r0, #0
   13780:	bne	13798 <close_stdout@@Base+0xf6c>
   13784:	ldr	r1, [sp, #36]	; 0x24
   13788:	cmp	r1, #0
   1378c:	bne	132f0 <close_stdout@@Base+0xac4>
   13790:	mov	r6, #1
   13794:	b	12ed0 <close_stdout@@Base+0x6a4>
   13798:	mov	r6, #0
   1379c:	b	12ed0 <close_stdout@@Base+0x6a4>
   137a0:	add	r7, sp, #108	; 0x6c
   137a4:	cmn	r8, #1
   137a8:	mov	r3, #0
   137ac:	str	r3, [sp, #108]	; 0x6c
   137b0:	str	r3, [r7, #4]
   137b4:	beq	139a0 <close_stdout@@Base+0x1174>
   137b8:	mov	r1, #0
   137bc:	ldr	r0, [sp, #32]
   137c0:	mov	ip, #1
   137c4:	str	r9, [sp, #88]	; 0x58
   137c8:	str	r6, [sp, #96]	; 0x60
   137cc:	mov	r9, r1
   137d0:	str	r5, [sp, #100]	; 0x64
   137d4:	mov	r6, ip
   137d8:	mov	r5, r7
   137dc:	add	r3, sp, #104	; 0x68
   137e0:	sub	r0, r0, #1
   137e4:	str	r3, [sp, #80]	; 0x50
   137e8:	str	r0, [sp, #84]	; 0x54
   137ec:	str	r1, [sp, #60]	; 0x3c
   137f0:	str	r4, [sp, #92]	; 0x5c
   137f4:	ldr	r2, [sp, #32]
   137f8:	add	r7, r9, fp
   137fc:	add	r0, sp, #104	; 0x68
   13800:	mov	r3, r5
   13804:	add	r4, r2, r7
   13808:	rsb	r2, r7, r8
   1380c:	mov	r1, r4
   13810:	bl	11224 <mbrtowc@plt>
   13814:	subs	r2, r0, #0
   13818:	beq	13924 <close_stdout@@Base+0x10f8>
   1381c:	cmn	r2, #1
   13820:	beq	13a4c <close_stdout@@Base+0x1220>
   13824:	cmn	r2, #2
   13828:	beq	139f0 <close_stdout@@Base+0x11c4>
   1382c:	ldr	r3, [sp, #36]	; 0x24
   13830:	ldr	r0, [sp, #160]	; 0xa0
   13834:	cmp	r0, #2
   13838:	movne	r3, #0
   1383c:	andeq	r3, r3, #1
   13840:	cmp	r3, #0
   13844:	beq	13900 <close_stdout@@Base+0x10d4>
   13848:	cmp	r2, #1
   1384c:	beq	13900 <close_stdout@@Base+0x10d4>
   13850:	ldr	r1, [sp, #84]	; 0x54
   13854:	add	r3, r1, r2
   13858:	add	r7, r3, r7
   1385c:	ldrb	r3, [r4, #1]!
   13860:	sub	r3, r3, #91	; 0x5b
   13864:	cmp	r3, #33	; 0x21
   13868:	addls	pc, pc, r3, lsl #2
   1386c:	b	138f8 <close_stdout@@Base+0x10cc>
   13870:	b	132f0 <close_stdout@@Base+0xac4>
   13874:	b	132f0 <close_stdout@@Base+0xac4>
   13878:	b	138f8 <close_stdout@@Base+0x10cc>
   1387c:	b	132f0 <close_stdout@@Base+0xac4>
   13880:	b	138f8 <close_stdout@@Base+0x10cc>
   13884:	b	132f0 <close_stdout@@Base+0xac4>
   13888:	b	138f8 <close_stdout@@Base+0x10cc>
   1388c:	b	138f8 <close_stdout@@Base+0x10cc>
   13890:	b	138f8 <close_stdout@@Base+0x10cc>
   13894:	b	138f8 <close_stdout@@Base+0x10cc>
   13898:	b	138f8 <close_stdout@@Base+0x10cc>
   1389c:	b	138f8 <close_stdout@@Base+0x10cc>
   138a0:	b	138f8 <close_stdout@@Base+0x10cc>
   138a4:	b	138f8 <close_stdout@@Base+0x10cc>
   138a8:	b	138f8 <close_stdout@@Base+0x10cc>
   138ac:	b	138f8 <close_stdout@@Base+0x10cc>
   138b0:	b	138f8 <close_stdout@@Base+0x10cc>
   138b4:	b	138f8 <close_stdout@@Base+0x10cc>
   138b8:	b	138f8 <close_stdout@@Base+0x10cc>
   138bc:	b	138f8 <close_stdout@@Base+0x10cc>
   138c0:	b	138f8 <close_stdout@@Base+0x10cc>
   138c4:	b	138f8 <close_stdout@@Base+0x10cc>
   138c8:	b	138f8 <close_stdout@@Base+0x10cc>
   138cc:	b	138f8 <close_stdout@@Base+0x10cc>
   138d0:	b	138f8 <close_stdout@@Base+0x10cc>
   138d4:	b	138f8 <close_stdout@@Base+0x10cc>
   138d8:	b	138f8 <close_stdout@@Base+0x10cc>
   138dc:	b	138f8 <close_stdout@@Base+0x10cc>
   138e0:	b	138f8 <close_stdout@@Base+0x10cc>
   138e4:	b	138f8 <close_stdout@@Base+0x10cc>
   138e8:	b	138f8 <close_stdout@@Base+0x10cc>
   138ec:	b	138f8 <close_stdout@@Base+0x10cc>
   138f0:	b	138f8 <close_stdout@@Base+0x10cc>
   138f4:	b	132f0 <close_stdout@@Base+0xac4>
   138f8:	cmp	r4, r7
   138fc:	bne	1385c <close_stdout@@Base+0x1030>
   13900:	ldr	r0, [sp, #104]	; 0x68
   13904:	add	r9, r9, r2
   13908:	bl	111dc <iswprint@plt>
   1390c:	cmp	r0, #0
   13910:	mov	r0, r5
   13914:	moveq	r6, #0
   13918:	bl	1117c <mbsinit@plt>
   1391c:	cmp	r0, #0
   13920:	beq	137f4 <close_stdout@@Base+0xfc8>
   13924:	mov	ip, r6
   13928:	eor	r2, ip, #1
   1392c:	str	r9, [sp, #60]	; 0x3c
   13930:	ldr	r4, [sp, #92]	; 0x5c
   13934:	uxtb	r2, r2
   13938:	ldr	r9, [sp, #88]	; 0x58
   1393c:	ldr	r6, [sp, #96]	; 0x60
   13940:	ldr	r5, [sp, #100]	; 0x64
   13944:	ldr	r3, [sp, #60]	; 0x3c
   13948:	cmp	r3, #1
   1394c:	bls	134d0 <close_stdout@@Base+0xca4>
   13950:	ldr	r0, [sp, #24]
   13954:	and	r2, r2, r0
   13958:	b	134dc <close_stdout@@Base+0xcb0>
   1395c:	ldr	r2, [sp, #164]	; 0xa4
   13960:	tst	r2, #1
   13964:	addne	fp, fp, #1
   13968:	bne	12e98 <close_stdout@@Base+0x66c>
   1396c:	b	131a8 <close_stdout@@Base+0x97c>
   13970:	ldr	r0, [sp, #36]	; 0x24
   13974:	cmp	r0, #0
   13978:	beq	131a8 <close_stdout@@Base+0x97c>
   1397c:	b	132f0 <close_stdout@@Base+0xac4>
   13980:	ldr	r2, [sp, #32]
   13984:	ldrb	r3, [r2, #1]
   13988:	adds	r3, r3, #0
   1398c:	movne	r3, #1
   13990:	b	132c4 <close_stdout@@Base+0xa98>
   13994:	bl	113c8 <abort@plt>
   13998:	ldr	r8, [sp, #60]	; 0x3c
   1399c:	b	132f0 <close_stdout@@Base+0xac4>
   139a0:	ldr	r0, [sp, #32]
   139a4:	bl	112a8 <strlen@plt>
   139a8:	mov	r8, r0
   139ac:	b	137b8 <close_stdout@@Base+0xf8c>
   139b0:	ldr	r2, [pc, #288]	; 13ad8 <close_stdout@@Base+0x12ac>
   139b4:	mov	r1, #1
   139b8:	mov	r9, r1
   139bc:	str	r1, [sp, #24]
   139c0:	add	r2, pc, r2
   139c4:	str	r1, [sp, #28]
   139c8:	str	r2, [sp, #52]	; 0x34
   139cc:	b	12e74 <close_stdout@@Base+0x648>
   139d0:	ldr	r2, [pc, #260]	; 13adc <close_stdout@@Base+0x12b0>
   139d4:	mov	r3, #1
   139d8:	mov	r9, r3
   139dc:	str	r3, [sp, #28]
   139e0:	add	r2, pc, r2
   139e4:	str	sl, [sp, #24]
   139e8:	str	r2, [sp, #52]	; 0x34
   139ec:	b	12e74 <close_stdout@@Base+0x648>
   139f0:	cmp	r8, r7
   139f4:	str	r9, [sp, #60]	; 0x3c
   139f8:	mov	ip, r4
   139fc:	ldr	r6, [sp, #96]	; 0x60
   13a00:	ldr	r9, [sp, #88]	; 0x58
   13a04:	ldr	r4, [sp, #92]	; 0x5c
   13a08:	ldr	r5, [sp, #100]	; 0x64
   13a0c:	bls	13a44 <close_stdout@@Base+0x1218>
   13a10:	ldrb	r3, [ip]
   13a14:	cmp	r3, #0
   13a18:	beq	13a44 <close_stdout@@Base+0x1218>
   13a1c:	ldr	r3, [sp, #60]	; 0x3c
   13a20:	b	13a30 <close_stdout@@Base+0x1204>
   13a24:	ldrb	r2, [r5, r3]
   13a28:	cmp	r2, #0
   13a2c:	beq	13a40 <close_stdout@@Base+0x1214>
   13a30:	add	r3, r3, #1
   13a34:	add	r2, fp, r3
   13a38:	cmp	r8, r2
   13a3c:	bhi	13a24 <close_stdout@@Base+0x11f8>
   13a40:	str	r3, [sp, #60]	; 0x3c
   13a44:	mov	r2, #1
   13a48:	b	13944 <close_stdout@@Base+0x1118>
   13a4c:	str	r9, [sp, #60]	; 0x3c
   13a50:	mov	r2, #1
   13a54:	ldr	r4, [sp, #92]	; 0x5c
   13a58:	ldr	r6, [sp, #96]	; 0x60
   13a5c:	ldr	r9, [sp, #88]	; 0x58
   13a60:	ldr	r5, [sp, #100]	; 0x64
   13a64:	b	13944 <close_stdout@@Base+0x1118>
   13a68:	ldr	r9, [sp, #36]	; 0x24
   13a6c:	b	13690 <close_stdout@@Base+0xe64>
   13a70:	bl	111b8 <__stack_chk_fail@plt>
   13a74:	ldr	r1, [pc, #100]	; 13ae0 <close_stdout@@Base+0x12b4>
   13a78:	mov	r3, #0
   13a7c:	mov	r0, #1
   13a80:	str	r3, [sp, #24]
   13a84:	add	r1, pc, r1
   13a88:	str	r0, [sp, #28]
   13a8c:	mov	r9, r3
   13a90:	str	r1, [sp, #52]	; 0x34
   13a94:	b	12e74 <close_stdout@@Base+0x648>
   13a98:	ldr	r0, [pc, #68]	; 13ae4 <close_stdout@@Base+0x12b8>
   13a9c:	mov	r3, #1
   13aa0:	mov	r9, #0
   13aa4:	str	r3, [sp, #24]
   13aa8:	add	r0, pc, r0
   13aac:	str	r3, [sp, #28]
   13ab0:	str	r0, [sp, #52]	; 0x34
   13ab4:	b	12e74 <close_stdout@@Base+0x648>
   13ab8:	andeq	r6, r1, ip, lsl r2
   13abc:	andeq	r0, r0, ip, lsl #2
   13ac0:	andeq	r4, r0, r8, lsl #12
   13ac4:	andeq	r4, r0, r4, ror #11
   13ac8:	andeq	r4, r0, r0, lsr #11
   13acc:	andeq	r4, r0, ip, ror r5
   13ad0:	andeq	r4, r0, r0, lsl #10
   13ad4:	andeq	r4, r0, r8, lsr #9
   13ad8:	andeq	r4, r0, r0, lsl #4
   13adc:	ldrdeq	r4, [r0], -ip
   13ae0:	andeq	r4, r0, r8, lsr r1
   13ae4:	andeq	r4, r0, r8, lsl r1
   13ae8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13aec:	sub	sp, sp, #44	; 0x2c
   13af0:	mov	r6, r0
   13af4:	mov	r9, r1
   13af8:	mov	sl, r2
   13afc:	mov	r4, r3
   13b00:	bl	112d8 <__errno_location@plt>
   13b04:	ldr	fp, [pc, #412]	; 13ca8 <close_stdout@@Base+0x147c>
   13b08:	cmp	r6, #0
   13b0c:	add	fp, pc, fp
   13b10:	ldr	r5, [fp]
   13b14:	ldr	r1, [r0]
   13b18:	mov	r8, r0
   13b1c:	str	r1, [sp, #36]	; 0x24
   13b20:	blt	13ca0 <close_stdout@@Base+0x1474>
   13b24:	ldr	r3, [pc, #384]	; 13cac <close_stdout@@Base+0x1480>
   13b28:	add	r3, pc, r3
   13b2c:	ldr	r3, [r3]
   13b30:	cmp	r6, r3
   13b34:	bcc	13b88 <close_stdout@@Base+0x135c>
   13b38:	add	r7, r6, #1
   13b3c:	cmn	r7, #-536870911	; 0xe0000001
   13b40:	bhi	13ca4 <close_stdout@@Base+0x1478>
   13b44:	add	r3, fp, #4
   13b48:	cmp	r5, r3
   13b4c:	beq	13c78 <close_stdout@@Base+0x144c>
   13b50:	mov	r0, r5
   13b54:	lsl	r1, r7, #3
   13b58:	bl	14980 <close_stdout@@Base+0x2154>
   13b5c:	mov	r5, r0
   13b60:	str	r0, [fp]
   13b64:	ldr	fp, [pc, #324]	; 13cb0 <close_stdout@@Base+0x1484>
   13b68:	mov	r1, #0
   13b6c:	add	fp, pc, fp
   13b70:	ldr	r0, [fp]
   13b74:	rsb	r2, r0, r7
   13b78:	add	r0, r5, r0, lsl #3
   13b7c:	lsl	r2, r2, #3
   13b80:	bl	112f0 <memset@plt>
   13b84:	str	r7, [fp]
   13b88:	add	r2, r4, #8
   13b8c:	str	r2, [sp, #32]
   13b90:	ldr	r1, [r4]
   13b94:	add	fp, r5, r6, lsl #3
   13b98:	ldr	lr, [sp, #32]
   13b9c:	mov	r2, r9
   13ba0:	ldr	r3, [r4, #4]
   13ba4:	ldr	ip, [r5, r6, lsl #3]
   13ba8:	ldr	r7, [fp, #4]
   13bac:	orr	r3, r3, #1
   13bb0:	str	r1, [sp]
   13bb4:	str	r3, [sp, #4]
   13bb8:	mov	r1, ip
   13bbc:	str	lr, [sp, #8]
   13bc0:	mov	r0, r7
   13bc4:	ldr	lr, [r4, #40]	; 0x28
   13bc8:	str	r3, [sp, #28]
   13bcc:	mov	r3, sl
   13bd0:	str	lr, [sp, #12]
   13bd4:	ldr	lr, [r4, #44]	; 0x2c
   13bd8:	str	ip, [sp, #24]
   13bdc:	str	lr, [sp, #16]
   13be0:	bl	12dc0 <close_stdout@@Base+0x594>
   13be4:	ldr	ip, [sp, #24]
   13be8:	cmp	ip, r0
   13bec:	bhi	13c64 <close_stdout@@Base+0x1438>
   13bf0:	ldr	r3, [pc, #188]	; 13cb4 <close_stdout@@Base+0x1488>
   13bf4:	add	r1, r0, #1
   13bf8:	str	r1, [r5, r6, lsl #3]
   13bfc:	add	r3, pc, r3
   13c00:	cmp	r7, r3
   13c04:	beq	13c18 <close_stdout@@Base+0x13ec>
   13c08:	mov	r0, r7
   13c0c:	str	r1, [sp, #24]
   13c10:	bl	11158 <free@plt>
   13c14:	ldr	r1, [sp, #24]
   13c18:	mov	r0, r1
   13c1c:	str	r1, [sp, #24]
   13c20:	bl	14928 <close_stdout@@Base+0x20fc>
   13c24:	ldr	r3, [sp, #28]
   13c28:	ldr	lr, [sp, #32]
   13c2c:	mov	r2, r9
   13c30:	str	r0, [fp, #4]
   13c34:	mov	r7, r0
   13c38:	ldr	ip, [r4]
   13c3c:	str	r3, [sp, #4]
   13c40:	mov	r3, sl
   13c44:	str	lr, [sp, #8]
   13c48:	str	ip, [sp]
   13c4c:	ldr	ip, [r4, #40]	; 0x28
   13c50:	ldr	r1, [sp, #24]
   13c54:	str	ip, [sp, #12]
   13c58:	ldr	ip, [r4, #44]	; 0x2c
   13c5c:	str	ip, [sp, #16]
   13c60:	bl	12dc0 <close_stdout@@Base+0x594>
   13c64:	ldr	r1, [sp, #36]	; 0x24
   13c68:	mov	r0, r7
   13c6c:	str	r1, [r8]
   13c70:	add	sp, sp, #44	; 0x2c
   13c74:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13c78:	lsl	r1, r7, #3
   13c7c:	mov	r0, #0
   13c80:	str	r3, [sp, #24]
   13c84:	bl	14980 <close_stdout@@Base+0x2154>
   13c88:	ldr	r3, [sp, #24]
   13c8c:	mov	r5, r0
   13c90:	ldm	r3, {r0, r1}
   13c94:	str	r5, [fp]
   13c98:	stm	r5, {r0, r1}
   13c9c:	b	13b64 <close_stdout@@Base+0x1338>
   13ca0:	bl	113c8 <abort@plt>
   13ca4:	bl	14b3c <close_stdout@@Base+0x2310>
   13ca8:			; <UNDEFINED> instruction: 0x000156bc
   13cac:	andeq	r5, r1, ip, ror #12
   13cb0:	andeq	r5, r1, r8, lsr #12
   13cb4:	muleq	r1, ip, r9
   13cb8:	push	{r4, r5, r6, lr}
   13cbc:	mov	r5, r0
   13cc0:	bl	112d8 <__errno_location@plt>
   13cc4:	cmp	r5, #0
   13cc8:	mov	r1, #48	; 0x30
   13ccc:	mov	r4, r0
   13cd0:	ldr	r0, [pc, #24]	; 13cf0 <close_stdout@@Base+0x14c4>
   13cd4:	ldr	r6, [r4]
   13cd8:	add	r0, pc, r0
   13cdc:	add	r0, r0, #256	; 0x100
   13ce0:	movne	r0, r5
   13ce4:	bl	14afc <close_stdout@@Base+0x22d0>
   13ce8:	str	r6, [r4]
   13cec:	pop	{r4, r5, r6, pc}
   13cf0:	andeq	r5, r1, r0, asr #17
   13cf4:	cmp	r0, #0
   13cf8:	beq	13d04 <close_stdout@@Base+0x14d8>
   13cfc:	ldr	r0, [r0]
   13d00:	bx	lr
   13d04:	ldr	r0, [pc, #12]	; 13d18 <close_stdout@@Base+0x14ec>
   13d08:	add	r0, pc, r0
   13d0c:	add	r0, r0, #256	; 0x100
   13d10:	ldr	r0, [r0]
   13d14:	bx	lr
   13d18:	muleq	r1, r0, r8
   13d1c:	cmp	r0, #0
   13d20:	beq	13d2c <close_stdout@@Base+0x1500>
   13d24:	str	r1, [r0]
   13d28:	bx	lr
   13d2c:	ldr	r0, [pc, #12]	; 13d40 <close_stdout@@Base+0x1514>
   13d30:	add	r0, pc, r0
   13d34:	add	r0, r0, #256	; 0x100
   13d38:	str	r1, [r0]
   13d3c:	bx	lr
   13d40:	andeq	r5, r1, r8, ror #16
   13d44:	cmp	r0, #0
   13d48:	movne	r3, r0
   13d4c:	beq	13d7c <close_stdout@@Base+0x1550>
   13d50:	lsr	ip, r1, #5
   13d54:	and	r1, r1, #31
   13d58:	add	r3, r3, ip, lsl #2
   13d5c:	ldr	ip, [r3, #8]
   13d60:	lsr	r0, ip, r1
   13d64:	eor	r2, r0, r2
   13d68:	and	r0, r0, #1
   13d6c:	and	r2, r2, #1
   13d70:	eor	ip, ip, r2, lsl r1
   13d74:	str	ip, [r3, #8]
   13d78:	bx	lr
   13d7c:	ldr	r3, [pc, #8]	; 13d8c <close_stdout@@Base+0x1560>
   13d80:	add	r3, pc, r3
   13d84:	add	r3, r3, #256	; 0x100
   13d88:	b	13d50 <close_stdout@@Base+0x1524>
   13d8c:	andeq	r5, r1, r8, lsl r8
   13d90:	subs	r3, r0, #0
   13d94:	beq	13da4 <close_stdout@@Base+0x1578>
   13d98:	ldr	r0, [r3, #4]
   13d9c:	str	r1, [r3, #4]
   13da0:	bx	lr
   13da4:	ldr	r3, [pc, #8]	; 13db4 <close_stdout@@Base+0x1588>
   13da8:	add	r3, pc, r3
   13dac:	add	r3, r3, #256	; 0x100
   13db0:	b	13d98 <close_stdout@@Base+0x156c>
   13db4:	strdeq	r5, [r1], -r0
   13db8:	cmp	r0, #0
   13dbc:	push	{r3, lr}
   13dc0:	beq	13de4 <close_stdout@@Base+0x15b8>
   13dc4:	cmp	r2, #0
   13dc8:	cmpne	r1, #0
   13dcc:	mov	r3, #8
   13dd0:	strne	r1, [r0, #40]	; 0x28
   13dd4:	str	r3, [r0]
   13dd8:	strne	r2, [r0, #44]	; 0x2c
   13ddc:	popne	{r3, pc}
   13de0:	bl	113c8 <abort@plt>
   13de4:	ldr	r0, [pc, #8]	; 13df4 <close_stdout@@Base+0x15c8>
   13de8:	add	r0, pc, r0
   13dec:	add	r0, r0, #256	; 0x100
   13df0:	b	13dc4 <close_stdout@@Base+0x1598>
   13df4:			; <UNDEFINED> instruction: 0x000157b0
   13df8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   13dfc:	sub	sp, sp, #24
   13e00:	mov	r7, r0
   13e04:	mov	sl, r1
   13e08:	ldr	r4, [sp, #56]	; 0x38
   13e0c:	mov	r9, r2
   13e10:	mov	r8, r3
   13e14:	cmp	r4, #0
   13e18:	beq	13e6c <close_stdout@@Base+0x1640>
   13e1c:	bl	112d8 <__errno_location@plt>
   13e20:	ldr	r3, [r4]
   13e24:	add	lr, r4, #8
   13e28:	mov	r1, sl
   13e2c:	mov	r2, r9
   13e30:	ldr	r6, [r0]
   13e34:	mov	r5, r0
   13e38:	str	r3, [sp]
   13e3c:	mov	r0, r7
   13e40:	ldr	ip, [r4, #4]
   13e44:	mov	r3, r8
   13e48:	stmib	sp, {ip, lr}
   13e4c:	ldr	ip, [r4, #40]	; 0x28
   13e50:	str	ip, [sp, #12]
   13e54:	ldr	ip, [r4, #44]	; 0x2c
   13e58:	str	ip, [sp, #16]
   13e5c:	bl	12dc0 <close_stdout@@Base+0x594>
   13e60:	str	r6, [r5]
   13e64:	add	sp, sp, #24
   13e68:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   13e6c:	ldr	r4, [pc, #8]	; 13e7c <close_stdout@@Base+0x1650>
   13e70:	add	r4, pc, r4
   13e74:	add	r4, r4, #256	; 0x100
   13e78:	b	13e1c <close_stdout@@Base+0x15f0>
   13e7c:	andeq	r5, r1, r8, lsr #14
   13e80:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e84:	subs	r4, r3, #0
   13e88:	sub	sp, sp, #36	; 0x24
   13e8c:	mov	r7, r0
   13e90:	mov	r6, r1
   13e94:	mov	r5, r2
   13e98:	beq	13f54 <close_stdout@@Base+0x1728>
   13e9c:	bl	112d8 <__errno_location@plt>
   13ea0:	ldr	r3, [r4]
   13ea4:	ldr	sl, [r4, #4]
   13ea8:	add	r9, r4, #8
   13eac:	mov	r8, r0
   13eb0:	mov	r0, #0
   13eb4:	ldr	r2, [r8]
   13eb8:	cmp	r5, r0
   13ebc:	orreq	sl, sl, #1
   13ec0:	str	r9, [sp, #8]
   13ec4:	mov	r1, r0
   13ec8:	stm	sp, {r3, sl}
   13ecc:	mov	r3, r6
   13ed0:	ldr	ip, [r4, #40]	; 0x28
   13ed4:	str	r2, [sp, #28]
   13ed8:	mov	r2, r7
   13edc:	str	ip, [sp, #12]
   13ee0:	ldr	ip, [r4, #44]	; 0x2c
   13ee4:	str	ip, [sp, #16]
   13ee8:	bl	12dc0 <close_stdout@@Base+0x594>
   13eec:	add	r1, r0, #1
   13ef0:	mov	fp, r0
   13ef4:	str	r1, [sp, #24]
   13ef8:	mov	r0, r1
   13efc:	bl	14928 <close_stdout@@Base+0x20fc>
   13f00:	ldr	lr, [r4]
   13f04:	str	sl, [sp, #4]
   13f08:	mov	r3, r6
   13f0c:	str	r9, [sp, #8]
   13f10:	mov	r2, r7
   13f14:	str	lr, [sp]
   13f18:	ldr	lr, [r4, #40]	; 0x28
   13f1c:	ldr	r1, [sp, #24]
   13f20:	str	lr, [sp, #12]
   13f24:	ldr	lr, [r4, #44]	; 0x2c
   13f28:	str	lr, [sp, #16]
   13f2c:	str	r0, [sp, #24]
   13f30:	bl	12dc0 <close_stdout@@Base+0x594>
   13f34:	ldr	r3, [sp, #28]
   13f38:	cmp	r5, #0
   13f3c:	str	r3, [r8]
   13f40:	ldr	ip, [sp, #24]
   13f44:	strne	fp, [r5]
   13f48:	mov	r0, ip
   13f4c:	add	sp, sp, #36	; 0x24
   13f50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13f54:	ldr	r4, [pc, #8]	; 13f64 <close_stdout@@Base+0x1738>
   13f58:	add	r4, pc, r4
   13f5c:	add	r4, r4, #256	; 0x100
   13f60:	b	13e9c <close_stdout@@Base+0x1670>
   13f64:	andeq	r5, r1, r0, asr #12
   13f68:	mov	r3, r2
   13f6c:	mov	r2, #0
   13f70:	b	13e80 <close_stdout@@Base+0x1654>
   13f74:	ldr	r2, [pc, #152]	; 14014 <close_stdout@@Base+0x17e8>
   13f78:	push	{r3, r4, r5, r6, r7, lr}
   13f7c:	add	r2, pc, r2
   13f80:	ldr	r3, [pc, #144]	; 14018 <close_stdout@@Base+0x17ec>
   13f84:	ldr	r6, [r2]
   13f88:	add	r3, pc, r3
   13f8c:	cmp	r6, #1
   13f90:	ldr	r7, [r3]
   13f94:	movhi	r4, #1
   13f98:	movhi	r5, r7
   13f9c:	bls	13fb8 <close_stdout@@Base+0x178c>
   13fa0:	ldr	r0, [r5, #12]
   13fa4:	add	r4, r4, #1
   13fa8:	bl	11158 <free@plt>
   13fac:	cmp	r4, r6
   13fb0:	add	r5, r5, #8
   13fb4:	bne	13fa0 <close_stdout@@Base+0x1774>
   13fb8:	ldr	r4, [pc, #92]	; 1401c <close_stdout@@Base+0x17f0>
   13fbc:	ldr	r0, [r7, #4]
   13fc0:	add	r4, pc, r4
   13fc4:	cmp	r0, r4
   13fc8:	beq	13fe0 <close_stdout@@Base+0x17b4>
   13fcc:	bl	11158 <free@plt>
   13fd0:	ldr	r3, [pc, #72]	; 14020 <close_stdout@@Base+0x17f4>
   13fd4:	mov	r2, #256	; 0x100
   13fd8:	add	r3, pc, r3
   13fdc:	stmib	r3, {r2, r4}
   13fe0:	ldr	r4, [pc, #60]	; 14024 <close_stdout@@Base+0x17f8>
   13fe4:	add	r4, pc, r4
   13fe8:	add	r5, r4, #4
   13fec:	cmp	r7, r5
   13ff0:	beq	14000 <close_stdout@@Base+0x17d4>
   13ff4:	mov	r0, r7
   13ff8:	bl	11158 <free@plt>
   13ffc:	str	r5, [r4]
   14000:	ldr	r3, [pc, #32]	; 14028 <close_stdout@@Base+0x17fc>
   14004:	mov	r2, #1
   14008:	add	r3, pc, r3
   1400c:	str	r2, [r3]
   14010:	pop	{r3, r4, r5, r6, r7, pc}
   14014:	andeq	r5, r1, r8, lsl r2
   14018:	andeq	r5, r1, r0, asr #4
   1401c:	ldrdeq	r5, [r1], -r8
   14020:	strdeq	r5, [r1], -r0
   14024:	andeq	r5, r1, r4, ror #3
   14028:	andeq	r5, r1, ip, lsl #3
   1402c:	ldr	r3, [pc, #12]	; 14040 <close_stdout@@Base+0x1814>
   14030:	mvn	r2, #0
   14034:	add	r3, pc, r3
   14038:	add	r3, r3, #256	; 0x100
   1403c:	b	13ae8 <close_stdout@@Base+0x12bc>
   14040:	andeq	r5, r1, r4, ror #10
   14044:	ldr	r3, [pc, #8]	; 14054 <close_stdout@@Base+0x1828>
   14048:	add	r3, pc, r3
   1404c:	add	r3, r3, #256	; 0x100
   14050:	b	13ae8 <close_stdout@@Base+0x12bc>
   14054:	andeq	r5, r1, r0, asr r5
   14058:	mov	r1, r0
   1405c:	mov	r0, #0
   14060:	b	1402c <close_stdout@@Base+0x1800>
   14064:	mov	r2, r1
   14068:	mov	r1, r0
   1406c:	mov	r0, #0
   14070:	b	14044 <close_stdout@@Base+0x1818>
   14074:	ldr	r3, [pc, #92]	; 140d8 <close_stdout@@Base+0x18ac>
   14078:	ldr	ip, [pc, #92]	; 140dc <close_stdout@@Base+0x18b0>
   1407c:	add	r3, pc, r3
   14080:	push	{r4, r5, r6, r7, lr}
   14084:	sub	sp, sp, #60	; 0x3c
   14088:	ldr	r4, [r3, ip]
   1408c:	add	r5, sp, #4
   14090:	mov	r7, r2
   14094:	mov	r6, r0
   14098:	mov	r0, r5
   1409c:	ldr	r3, [r4]
   140a0:	str	r3, [sp, #52]	; 0x34
   140a4:	bl	12c08 <close_stdout@@Base+0x3dc>
   140a8:	mov	r3, r5
   140ac:	mvn	r2, #0
   140b0:	mov	r0, r6
   140b4:	mov	r1, r7
   140b8:	bl	13ae8 <close_stdout@@Base+0x12bc>
   140bc:	ldr	r2, [sp, #52]	; 0x34
   140c0:	ldr	r3, [r4]
   140c4:	cmp	r2, r3
   140c8:	bne	140d4 <close_stdout@@Base+0x18a8>
   140cc:	add	sp, sp, #60	; 0x3c
   140d0:	pop	{r4, r5, r6, r7, pc}
   140d4:	bl	111b8 <__stack_chk_fail@plt>
   140d8:	andeq	r4, r1, ip, ror pc
   140dc:	andeq	r0, r0, ip, lsl #2
   140e0:	ldr	ip, [pc, #96]	; 14148 <close_stdout@@Base+0x191c>
   140e4:	push	{r4, r5, r6, r7, r8, lr}
   140e8:	add	ip, pc, ip
   140ec:	ldr	lr, [pc, #88]	; 1414c <close_stdout@@Base+0x1920>
   140f0:	sub	sp, sp, #56	; 0x38
   140f4:	mov	r8, r3
   140f8:	add	r5, sp, #4
   140fc:	mov	r7, r2
   14100:	mov	r6, r0
   14104:	ldr	r4, [ip, lr]
   14108:	mov	r0, r5
   1410c:	ldr	r3, [r4]
   14110:	str	r3, [sp, #52]	; 0x34
   14114:	bl	12c08 <close_stdout@@Base+0x3dc>
   14118:	mov	r2, r8
   1411c:	mov	r3, r5
   14120:	mov	r0, r6
   14124:	mov	r1, r7
   14128:	bl	13ae8 <close_stdout@@Base+0x12bc>
   1412c:	ldr	r2, [sp, #52]	; 0x34
   14130:	ldr	r3, [r4]
   14134:	cmp	r2, r3
   14138:	bne	14144 <close_stdout@@Base+0x1918>
   1413c:	add	sp, sp, #56	; 0x38
   14140:	pop	{r4, r5, r6, r7, r8, pc}
   14144:	bl	111b8 <__stack_chk_fail@plt>
   14148:	andeq	r4, r1, r0, lsl pc
   1414c:	andeq	r0, r0, ip, lsl #2
   14150:	mov	r2, r1
   14154:	mov	r1, r0
   14158:	mov	r0, #0
   1415c:	b	14074 <close_stdout@@Base+0x1848>
   14160:	mov	ip, r1
   14164:	mov	r3, r2
   14168:	mov	r1, r0
   1416c:	mov	r2, ip
   14170:	mov	r0, #0
   14174:	b	140e0 <close_stdout@@Base+0x18b4>
   14178:	push	{r4, r5, r6, r7, r8, lr}
   1417c:	mov	r5, r2
   14180:	ldr	lr, [pc, #136]	; 14210 <close_stdout@@Base+0x19e4>
   14184:	mov	r7, r0
   14188:	mov	r6, r1
   1418c:	ldr	r4, [pc, #128]	; 14214 <close_stdout@@Base+0x19e8>
   14190:	add	lr, pc, lr
   14194:	sub	sp, sp, #56	; 0x38
   14198:	add	lr, lr, #256	; 0x100
   1419c:	ldr	r8, [pc, #116]	; 14218 <close_stdout@@Base+0x19ec>
   141a0:	add	r4, pc, r4
   141a4:	add	ip, sp, #4
   141a8:	ldm	lr!, {r0, r1, r2, r3}
   141ac:	ldr	r4, [r4, r8]
   141b0:	stmia	ip!, {r0, r1, r2, r3}
   141b4:	ldm	lr!, {r0, r1, r2, r3}
   141b8:	ldr	r8, [r4]
   141bc:	stmia	ip!, {r0, r1, r2, r3}
   141c0:	ldm	lr, {r0, r1, r2, r3}
   141c4:	str	r8, [sp, #52]	; 0x34
   141c8:	stm	ip, {r0, r1, r2, r3}
   141cc:	mov	r1, r5
   141d0:	add	r5, sp, #4
   141d4:	mov	r2, #1
   141d8:	mov	r0, r5
   141dc:	bl	13d44 <close_stdout@@Base+0x1518>
   141e0:	mov	r2, r6
   141e4:	mov	r3, r5
   141e8:	mov	r1, r7
   141ec:	mov	r0, #0
   141f0:	bl	13ae8 <close_stdout@@Base+0x12bc>
   141f4:	ldr	r2, [sp, #52]	; 0x34
   141f8:	ldr	r3, [r4]
   141fc:	cmp	r2, r3
   14200:	bne	1420c <close_stdout@@Base+0x19e0>
   14204:	add	sp, sp, #56	; 0x38
   14208:	pop	{r4, r5, r6, r7, r8, pc}
   1420c:	bl	111b8 <__stack_chk_fail@plt>
   14210:	andeq	r5, r1, r8, lsl #8
   14214:	andeq	r4, r1, r8, asr lr
   14218:	andeq	r0, r0, ip, lsl #2
   1421c:	mov	r2, r1
   14220:	mvn	r1, #0
   14224:	b	14178 <close_stdout@@Base+0x194c>
   14228:	mov	r1, #58	; 0x3a
   1422c:	b	1421c <close_stdout@@Base+0x19f0>
   14230:	mov	r2, #58	; 0x3a
   14234:	b	14178 <close_stdout@@Base+0x194c>
   14238:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1423c:	mov	r5, r2
   14240:	ldr	lr, [pc, #144]	; 142d8 <close_stdout@@Base+0x1aac>
   14244:	mov	r8, r0
   14248:	mov	r9, r1
   1424c:	mov	r7, r3
   14250:	add	lr, pc, lr
   14254:	ldr	r4, [pc, #128]	; 142dc <close_stdout@@Base+0x1ab0>
   14258:	add	lr, lr, #256	; 0x100
   1425c:	sub	sp, sp, #56	; 0x38
   14260:	ldr	sl, [pc, #120]	; 142e0 <close_stdout@@Base+0x1ab4>
   14264:	add	r4, pc, r4
   14268:	ldm	lr!, {r0, r1, r2, r3}
   1426c:	add	ip, sp, #4
   14270:	ldr	r4, [r4, sl]
   14274:	ldr	r6, [sp, #88]	; 0x58
   14278:	stmia	ip!, {r0, r1, r2, r3}
   1427c:	ldm	lr!, {r0, r1, r2, r3}
   14280:	ldr	sl, [r4]
   14284:	stmia	ip!, {r0, r1, r2, r3}
   14288:	ldm	lr, {r0, r1, r2, r3}
   1428c:	str	sl, [sp, #52]	; 0x34
   14290:	stm	ip, {r0, r1, r2, r3}
   14294:	mov	r2, r5
   14298:	add	r5, sp, #4
   1429c:	mov	r1, r9
   142a0:	mov	r0, r5
   142a4:	bl	13db8 <close_stdout@@Base+0x158c>
   142a8:	mov	r2, r6
   142ac:	mov	r3, r5
   142b0:	mov	r0, r8
   142b4:	mov	r1, r7
   142b8:	bl	13ae8 <close_stdout@@Base+0x12bc>
   142bc:	ldr	r2, [sp, #52]	; 0x34
   142c0:	ldr	r3, [r4]
   142c4:	cmp	r2, r3
   142c8:	bne	142d4 <close_stdout@@Base+0x1aa8>
   142cc:	add	sp, sp, #56	; 0x38
   142d0:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   142d4:	bl	111b8 <__stack_chk_fail@plt>
   142d8:	andeq	r5, r1, r8, asr #6
   142dc:	muleq	r1, r4, sp
   142e0:	andeq	r0, r0, ip, lsl #2
   142e4:	push	{lr}		; (str lr, [sp, #-4]!)
   142e8:	sub	sp, sp, #12
   142ec:	mvn	ip, #0
   142f0:	str	ip, [sp]
   142f4:	bl	14238 <close_stdout@@Base+0x1a0c>
   142f8:	add	sp, sp, #12
   142fc:	pop	{pc}		; (ldr pc, [sp], #4)
   14300:	mov	ip, r1
   14304:	mov	r3, r2
   14308:	mov	r1, r0
   1430c:	mov	r2, ip
   14310:	mov	r0, #0
   14314:	b	142e4 <close_stdout@@Base+0x1ab8>
   14318:	push	{lr}		; (str lr, [sp, #-4]!)
   1431c:	sub	sp, sp, #12
   14320:	mov	lr, r1
   14324:	mov	ip, r2
   14328:	mov	r1, r0
   1432c:	str	r3, [sp]
   14330:	mov	r2, lr
   14334:	mov	r3, ip
   14338:	mov	r0, #0
   1433c:	bl	14238 <close_stdout@@Base+0x1a0c>
   14340:	add	sp, sp, #12
   14344:	pop	{pc}		; (ldr pc, [sp], #4)
   14348:	ldr	r3, [pc, #12]	; 1435c <close_stdout@@Base+0x1b30>
   1434c:	ldr	ip, [pc, #12]	; 14360 <close_stdout@@Base+0x1b34>
   14350:	add	r3, pc, r3
   14354:	ldr	r3, [r3, ip]
   14358:	b	13ae8 <close_stdout@@Base+0x12bc>
   1435c:	andeq	r4, r1, r8, lsr #25
   14360:	andeq	r0, r0, r8, lsl #2
   14364:	mov	r2, r1
   14368:	mov	r1, r0
   1436c:	mov	r0, #0
   14370:	b	14348 <close_stdout@@Base+0x1b1c>
   14374:	mvn	r2, #0
   14378:	b	14348 <close_stdout@@Base+0x1b1c>
   1437c:	mov	r1, r0
   14380:	mov	r0, #0
   14384:	b	14374 <close_stdout@@Base+0x1b48>
   14388:	push	{r4, r5, r6, r7, lr}
   1438c:	cmp	r1, #0
   14390:	sub	sp, sp, #36	; 0x24
   14394:	ldr	r7, [pc, #896]	; 1471c <close_stdout@@Base+0x1ef0>
   14398:	mov	ip, r3
   1439c:	mov	r5, r0
   143a0:	add	r7, pc, r7
   143a4:	ldr	r4, [sp, #56]	; 0x38
   143a8:	ldr	r6, [sp, #60]	; 0x3c
   143ac:	beq	146f0 <close_stdout@@Base+0x1ec4>
   143b0:	str	r2, [sp]
   143b4:	mov	r3, r1
   143b8:	ldr	r2, [pc, #864]	; 14720 <close_stdout@@Base+0x1ef4>
   143bc:	mov	r1, #1
   143c0:	str	ip, [sp, #4]
   143c4:	add	r2, pc, r2
   143c8:	bl	11320 <__fprintf_chk@plt>
   143cc:	ldr	r1, [pc, #848]	; 14724 <close_stdout@@Base+0x1ef8>
   143d0:	mov	r2, #5
   143d4:	mov	r0, #0
   143d8:	add	r1, pc, r1
   143dc:	bl	111ac <dcgettext@plt>
   143e0:	ldr	r2, [pc, #832]	; 14728 <close_stdout@@Base+0x1efc>
   143e4:	movw	ip, #2013	; 0x7dd
   143e8:	mov	r1, #1
   143ec:	ldr	r2, [r7, r2]
   143f0:	str	ip, [sp]
   143f4:	mov	r3, r0
   143f8:	mov	r0, r5
   143fc:	bl	11320 <__fprintf_chk@plt>
   14400:	ldr	r1, [pc, #804]	; 1472c <close_stdout@@Base+0x1f00>
   14404:	mov	r0, #0
   14408:	mov	r2, #5
   1440c:	add	r1, pc, r1
   14410:	bl	111ac <dcgettext@plt>
   14414:	mov	r1, r5
   14418:	bl	11110 <fputs_unlocked@plt>
   1441c:	cmp	r6, #9
   14420:	addls	pc, pc, r6, lsl #2
   14424:	b	1470c <close_stdout@@Base+0x1ee0>
   14428:	b	144bc <close_stdout@@Base+0x1c90>
   1442c:	b	144c0 <close_stdout@@Base+0x1c94>
   14430:	b	144f0 <close_stdout@@Base+0x1cc4>
   14434:	b	14524 <close_stdout@@Base+0x1cf8>
   14438:	b	14560 <close_stdout@@Base+0x1d34>
   1443c:	b	145a0 <close_stdout@@Base+0x1d74>
   14440:	b	145e8 <close_stdout@@Base+0x1dbc>
   14444:	b	14638 <close_stdout@@Base+0x1e0c>
   14448:	b	14690 <close_stdout@@Base+0x1e64>
   1444c:	b	14450 <close_stdout@@Base+0x1c24>
   14450:	ldr	r1, [pc, #728]	; 14730 <close_stdout@@Base+0x1f04>
   14454:	mov	r0, #0
   14458:	add	r1, pc, r1
   1445c:	mov	r2, #5
   14460:	bl	111ac <dcgettext@plt>
   14464:	ldm	r4, {r3, ip}
   14468:	mov	r1, #1
   1446c:	str	ip, [sp]
   14470:	ldr	ip, [r4, #8]
   14474:	str	ip, [sp, #4]
   14478:	ldr	ip, [r4, #12]
   1447c:	str	ip, [sp, #8]
   14480:	ldr	ip, [r4, #16]
   14484:	str	ip, [sp, #12]
   14488:	ldr	ip, [r4, #20]
   1448c:	str	ip, [sp, #16]
   14490:	ldr	ip, [r4, #24]
   14494:	str	ip, [sp, #20]
   14498:	ldr	ip, [r4, #28]
   1449c:	str	ip, [sp, #24]
   144a0:	ldr	ip, [r4, #32]
   144a4:	str	ip, [sp, #28]
   144a8:	mov	r2, r0
   144ac:	mov	r0, r5
   144b0:	bl	11320 <__fprintf_chk@plt>
   144b4:	add	sp, sp, #36	; 0x24
   144b8:	pop	{r4, r5, r6, r7, pc}
   144bc:	bl	113c8 <abort@plt>
   144c0:	ldr	r1, [pc, #620]	; 14734 <close_stdout@@Base+0x1f08>
   144c4:	mov	r2, #5
   144c8:	mov	r0, #0
   144cc:	add	r1, pc, r1
   144d0:	bl	111ac <dcgettext@plt>
   144d4:	ldr	r3, [r4]
   144d8:	mov	r1, #1
   144dc:	mov	r2, r0
   144e0:	mov	r0, r5
   144e4:	add	sp, sp, #36	; 0x24
   144e8:	pop	{r4, r5, r6, r7, lr}
   144ec:	b	11320 <__fprintf_chk@plt>
   144f0:	ldr	r1, [pc, #576]	; 14738 <close_stdout@@Base+0x1f0c>
   144f4:	mov	r2, #5
   144f8:	mov	r0, #0
   144fc:	add	r1, pc, r1
   14500:	bl	111ac <dcgettext@plt>
   14504:	ldm	r4, {r3, ip}
   14508:	mov	r1, #1
   1450c:	str	ip, [sp, #56]	; 0x38
   14510:	mov	r2, r0
   14514:	mov	r0, r5
   14518:	add	sp, sp, #36	; 0x24
   1451c:	pop	{r4, r5, r6, r7, lr}
   14520:	b	11320 <__fprintf_chk@plt>
   14524:	ldr	r1, [pc, #528]	; 1473c <close_stdout@@Base+0x1f10>
   14528:	mov	r2, #5
   1452c:	mov	r0, #0
   14530:	add	r1, pc, r1
   14534:	bl	111ac <dcgettext@plt>
   14538:	ldm	r4, {r3, ip}
   1453c:	mov	r1, #1
   14540:	str	ip, [sp, #56]	; 0x38
   14544:	ldr	ip, [r4, #8]
   14548:	str	ip, [sp, #60]	; 0x3c
   1454c:	mov	r2, r0
   14550:	mov	r0, r5
   14554:	add	sp, sp, #36	; 0x24
   14558:	pop	{r4, r5, r6, r7, lr}
   1455c:	b	11320 <__fprintf_chk@plt>
   14560:	ldr	r1, [pc, #472]	; 14740 <close_stdout@@Base+0x1f14>
   14564:	mov	r2, #5
   14568:	mov	r0, #0
   1456c:	add	r1, pc, r1
   14570:	bl	111ac <dcgettext@plt>
   14574:	ldm	r4, {r3, ip}
   14578:	mov	r1, #1
   1457c:	str	ip, [sp]
   14580:	ldr	ip, [r4, #8]
   14584:	str	ip, [sp, #4]
   14588:	ldr	ip, [r4, #12]
   1458c:	str	ip, [sp, #8]
   14590:	mov	r2, r0
   14594:	mov	r0, r5
   14598:	bl	11320 <__fprintf_chk@plt>
   1459c:	b	144b4 <close_stdout@@Base+0x1c88>
   145a0:	ldr	r1, [pc, #412]	; 14744 <close_stdout@@Base+0x1f18>
   145a4:	mov	r2, #5
   145a8:	mov	r0, #0
   145ac:	add	r1, pc, r1
   145b0:	bl	111ac <dcgettext@plt>
   145b4:	ldm	r4, {r3, ip}
   145b8:	mov	r1, #1
   145bc:	str	ip, [sp]
   145c0:	ldr	ip, [r4, #8]
   145c4:	str	ip, [sp, #4]
   145c8:	ldr	ip, [r4, #12]
   145cc:	str	ip, [sp, #8]
   145d0:	ldr	ip, [r4, #16]
   145d4:	str	ip, [sp, #12]
   145d8:	mov	r2, r0
   145dc:	mov	r0, r5
   145e0:	bl	11320 <__fprintf_chk@plt>
   145e4:	b	144b4 <close_stdout@@Base+0x1c88>
   145e8:	ldr	r1, [pc, #344]	; 14748 <close_stdout@@Base+0x1f1c>
   145ec:	mov	r2, #5
   145f0:	mov	r0, #0
   145f4:	add	r1, pc, r1
   145f8:	bl	111ac <dcgettext@plt>
   145fc:	ldm	r4, {r3, ip}
   14600:	mov	r1, #1
   14604:	str	ip, [sp]
   14608:	ldr	ip, [r4, #8]
   1460c:	str	ip, [sp, #4]
   14610:	ldr	ip, [r4, #12]
   14614:	str	ip, [sp, #8]
   14618:	ldr	ip, [r4, #16]
   1461c:	str	ip, [sp, #12]
   14620:	ldr	ip, [r4, #20]
   14624:	str	ip, [sp, #16]
   14628:	mov	r2, r0
   1462c:	mov	r0, r5
   14630:	bl	11320 <__fprintf_chk@plt>
   14634:	b	144b4 <close_stdout@@Base+0x1c88>
   14638:	ldr	r1, [pc, #268]	; 1474c <close_stdout@@Base+0x1f20>
   1463c:	mov	r2, #5
   14640:	mov	r0, #0
   14644:	add	r1, pc, r1
   14648:	bl	111ac <dcgettext@plt>
   1464c:	ldm	r4, {r3, ip}
   14650:	mov	r1, #1
   14654:	str	ip, [sp]
   14658:	ldr	ip, [r4, #8]
   1465c:	str	ip, [sp, #4]
   14660:	ldr	ip, [r4, #12]
   14664:	str	ip, [sp, #8]
   14668:	ldr	ip, [r4, #16]
   1466c:	str	ip, [sp, #12]
   14670:	ldr	ip, [r4, #20]
   14674:	str	ip, [sp, #16]
   14678:	ldr	ip, [r4, #24]
   1467c:	str	ip, [sp, #20]
   14680:	mov	r2, r0
   14684:	mov	r0, r5
   14688:	bl	11320 <__fprintf_chk@plt>
   1468c:	b	144b4 <close_stdout@@Base+0x1c88>
   14690:	ldr	r1, [pc, #184]	; 14750 <close_stdout@@Base+0x1f24>
   14694:	mov	r2, #5
   14698:	mov	r0, #0
   1469c:	add	r1, pc, r1
   146a0:	bl	111ac <dcgettext@plt>
   146a4:	ldm	r4, {r3, ip}
   146a8:	mov	r1, #1
   146ac:	str	ip, [sp]
   146b0:	ldr	ip, [r4, #8]
   146b4:	str	ip, [sp, #4]
   146b8:	ldr	ip, [r4, #12]
   146bc:	str	ip, [sp, #8]
   146c0:	ldr	ip, [r4, #16]
   146c4:	str	ip, [sp, #12]
   146c8:	ldr	ip, [r4, #20]
   146cc:	str	ip, [sp, #16]
   146d0:	ldr	ip, [r4, #24]
   146d4:	str	ip, [sp, #20]
   146d8:	ldr	ip, [r4, #28]
   146dc:	str	ip, [sp, #24]
   146e0:	mov	r2, r0
   146e4:	mov	r0, r5
   146e8:	bl	11320 <__fprintf_chk@plt>
   146ec:	b	144b4 <close_stdout@@Base+0x1c88>
   146f0:	str	r3, [sp]
   146f4:	mov	r3, r2
   146f8:	ldr	r2, [pc, #84]	; 14754 <close_stdout@@Base+0x1f28>
   146fc:	mov	r1, #1
   14700:	add	r2, pc, r2
   14704:	bl	11320 <__fprintf_chk@plt>
   14708:	b	143cc <close_stdout@@Base+0x1ba0>
   1470c:	ldr	r1, [pc, #68]	; 14758 <close_stdout@@Base+0x1f2c>
   14710:	mov	r0, #0
   14714:	add	r1, pc, r1
   14718:	b	1445c <close_stdout@@Base+0x1c30>
   1471c:	andeq	r4, r1, r8, asr ip
   14720:	andeq	r3, r0, ip, asr #16
   14724:	andeq	r3, r0, ip, asr #16
   14728:	andeq	r0, r0, r0, asr #2
   1472c:	andeq	r3, r0, ip, lsl r8
   14730:	andeq	r3, r0, r8, lsr #19
   14734:	andeq	r3, r0, r8, lsr #16
   14738:	andeq	r3, r0, r8, lsl #16
   1473c:	andeq	r3, r0, ip, ror #15
   14740:	andeq	r3, r0, ip, asr #15
   14744:	andeq	r3, r0, ip, lsr #15
   14748:	andeq	r3, r0, r8, lsl #15
   1474c:	andeq	r3, r0, r0, ror #14
   14750:	andeq	r3, r0, r4, lsr r7
   14754:	andeq	r3, r0, ip, lsl r5
   14758:	andeq	r3, r0, r0, lsr #14
   1475c:	push	{r4, r5, lr}
   14760:	sub	sp, sp, #12
   14764:	ldr	r5, [sp, #24]
   14768:	ldr	ip, [r5]
   1476c:	cmp	ip, #0
   14770:	beq	1478c <close_stdout@@Base+0x1f60>
   14774:	mov	lr, r5
   14778:	mov	ip, #0
   1477c:	ldr	r4, [lr, #4]!
   14780:	add	ip, ip, #1
   14784:	cmp	r4, #0
   14788:	bne	1477c <close_stdout@@Base+0x1f50>
   1478c:	stm	sp, {r5, ip}
   14790:	bl	14388 <close_stdout@@Base+0x1b5c>
   14794:	add	sp, sp, #12
   14798:	pop	{r4, r5, pc}
   1479c:	push	{r4, r5, r6, r7, lr}
   147a0:	sub	sp, sp, #60	; 0x3c
   147a4:	ldr	r4, [pc, #100]	; 14810 <close_stdout@@Base+0x1fe4>
   147a8:	mov	ip, #0
   147ac:	ldr	r5, [pc, #96]	; 14814 <close_stdout@@Base+0x1fe8>
   147b0:	mov	lr, ip
   147b4:	add	r4, pc, r4
   147b8:	ldr	r6, [sp, #80]	; 0x50
   147bc:	ldr	r7, [r4, r5]
   147c0:	add	r5, sp, #12
   147c4:	ldr	r4, [r7]
   147c8:	str	r4, [sp, #52]	; 0x34
   147cc:	ldr	r4, [r6, ip]
   147d0:	cmp	r4, #0
   147d4:	str	r4, [r5, ip]
   147d8:	beq	147ec <close_stdout@@Base+0x1fc0>
   147dc:	add	lr, lr, #1
   147e0:	add	ip, ip, #4
   147e4:	cmp	lr, #10
   147e8:	bne	147cc <close_stdout@@Base+0x1fa0>
   147ec:	stm	sp, {r5, lr}
   147f0:	bl	14388 <close_stdout@@Base+0x1b5c>
   147f4:	ldr	r2, [sp, #52]	; 0x34
   147f8:	ldr	r3, [r7]
   147fc:	cmp	r2, r3
   14800:	bne	1480c <close_stdout@@Base+0x1fe0>
   14804:	add	sp, sp, #60	; 0x3c
   14808:	pop	{r4, r5, r6, r7, pc}
   1480c:	bl	111b8 <__stack_chk_fail@plt>
   14810:	andeq	r4, r1, r4, asr #16
   14814:	andeq	r0, r0, ip, lsl #2
   14818:	push	{r3}		; (str r3, [sp, #-4]!)
   1481c:	push	{r4, lr}
   14820:	sub	sp, sp, #20
   14824:	ldr	lr, [pc, #72]	; 14874 <close_stdout@@Base+0x2048>
   14828:	add	ip, sp, #32
   1482c:	ldr	r4, [pc, #68]	; 14878 <close_stdout@@Base+0x204c>
   14830:	add	lr, pc, lr
   14834:	ldr	r3, [sp, #28]
   14838:	ldr	r4, [lr, r4]
   1483c:	str	ip, [sp]
   14840:	str	ip, [sp, #8]
   14844:	ldr	ip, [r4]
   14848:	str	ip, [sp, #12]
   1484c:	bl	1479c <close_stdout@@Base+0x1f70>
   14850:	ldr	r2, [sp, #12]
   14854:	ldr	r3, [r4]
   14858:	cmp	r2, r3
   1485c:	bne	14870 <close_stdout@@Base+0x2044>
   14860:	add	sp, sp, #20
   14864:	pop	{r4, lr}
   14868:	add	sp, sp, #4
   1486c:	bx	lr
   14870:	bl	111b8 <__stack_chk_fail@plt>
   14874:	andeq	r4, r1, r8, asr #15
   14878:	andeq	r0, r0, ip, lsl #2
   1487c:	ldr	r1, [pc, #132]	; 14908 <close_stdout@@Base+0x20dc>
   14880:	mov	r2, #5
   14884:	push	{r4, lr}
   14888:	add	r1, pc, r1
   1488c:	mov	r0, #0
   14890:	ldr	r4, [pc, #116]	; 1490c <close_stdout@@Base+0x20e0>
   14894:	bl	111ac <dcgettext@plt>
   14898:	ldr	r2, [pc, #112]	; 14910 <close_stdout@@Base+0x20e4>
   1489c:	add	r4, pc, r4
   148a0:	add	r2, pc, r2
   148a4:	mov	r1, r0
   148a8:	mov	r0, #1
   148ac:	bl	11308 <__printf_chk@plt>
   148b0:	ldr	r1, [pc, #92]	; 14914 <close_stdout@@Base+0x20e8>
   148b4:	mov	r2, #5
   148b8:	mov	r0, #0
   148bc:	add	r1, pc, r1
   148c0:	bl	111ac <dcgettext@plt>
   148c4:	ldr	r2, [pc, #76]	; 14918 <close_stdout@@Base+0x20ec>
   148c8:	ldr	r3, [pc, #76]	; 1491c <close_stdout@@Base+0x20f0>
   148cc:	add	r2, pc, r2
   148d0:	add	r3, pc, r3
   148d4:	mov	r1, r0
   148d8:	mov	r0, #1
   148dc:	bl	11308 <__printf_chk@plt>
   148e0:	ldr	r1, [pc, #56]	; 14920 <close_stdout@@Base+0x20f4>
   148e4:	mov	r0, #0
   148e8:	mov	r2, #5
   148ec:	add	r1, pc, r1
   148f0:	bl	111ac <dcgettext@plt>
   148f4:	ldr	r3, [pc, #40]	; 14924 <close_stdout@@Base+0x20f8>
   148f8:	ldr	r3, [r4, r3]
   148fc:	pop	{r4, lr}
   14900:	ldr	r1, [r3]
   14904:	b	11110 <fputs_unlocked@plt>
   14908:	andeq	r3, r0, r8, ror #11
   1490c:	andeq	r4, r1, ip, asr r7
   14910:	andeq	r3, r0, r8, ror #11
   14914:	andeq	r3, r0, r4, ror #11
   14918:	andeq	r2, r0, ip, asr #30
   1491c:	andeq	r2, r0, r8, asr pc
   14920:	andeq	r3, r0, r8, asr #11
   14924:	andeq	r0, r0, r0, lsr r1
   14928:	push	{r4, lr}
   1492c:	mov	r4, r0
   14930:	bl	11254 <malloc@plt>
   14934:	rsbs	r3, r0, #1
   14938:	movcc	r3, #0
   1493c:	cmp	r4, #0
   14940:	moveq	r3, #0
   14944:	cmp	r3, #0
   14948:	popeq	{r4, pc}
   1494c:	bl	14b3c <close_stdout@@Base+0x2310>
   14950:	push	{r3, r4, r5, lr}
   14954:	mov	r4, r0
   14958:	mvn	r0, #0
   1495c:	mov	r5, r1
   14960:	bl	16278 <close_stdout@@Base+0x3a4c>
   14964:	cmp	r0, r4
   14968:	bcc	14978 <close_stdout@@Base+0x214c>
   1496c:	mul	r0, r4, r5
   14970:	pop	{r3, r4, r5, lr}
   14974:	b	14928 <close_stdout@@Base+0x20fc>
   14978:	bl	14b3c <close_stdout@@Base+0x2310>
   1497c:	b	14928 <close_stdout@@Base+0x20fc>
   14980:	rsbs	r3, r1, #1
   14984:	push	{r4, lr}
   14988:	movcc	r3, #0
   1498c:	cmp	r0, #0
   14990:	mov	r4, r1
   14994:	moveq	r3, #0
   14998:	cmp	r3, #0
   1499c:	bne	149c0 <close_stdout@@Base+0x2194>
   149a0:	bl	111c4 <realloc@plt>
   149a4:	rsbs	r3, r0, #1
   149a8:	movcc	r3, #0
   149ac:	cmp	r4, #0
   149b0:	moveq	r3, #0
   149b4:	cmp	r3, #0
   149b8:	popeq	{r4, pc}
   149bc:	bl	14b3c <close_stdout@@Base+0x2310>
   149c0:	bl	11158 <free@plt>
   149c4:	mov	r0, #0
   149c8:	pop	{r4, pc}
   149cc:	push	{r4, r5, r6, lr}
   149d0:	mov	r5, r1
   149d4:	mov	r6, r0
   149d8:	mov	r1, r2
   149dc:	mvn	r0, #0
   149e0:	mov	r4, r2
   149e4:	bl	16278 <close_stdout@@Base+0x3a4c>
   149e8:	cmp	r0, r5
   149ec:	bcc	14a00 <close_stdout@@Base+0x21d4>
   149f0:	mov	r0, r6
   149f4:	mul	r1, r5, r4
   149f8:	pop	{r4, r5, r6, lr}
   149fc:	b	14980 <close_stdout@@Base+0x2154>
   14a00:	bl	14b3c <close_stdout@@Base+0x2310>
   14a04:	push	{r3, r4, r5, r6, r7, lr}
   14a08:	subs	r7, r0, #0
   14a0c:	mov	r5, r1
   14a10:	mov	r6, r2
   14a14:	ldr	r4, [r1]
   14a18:	beq	14a50 <close_stdout@@Base+0x2224>
   14a1c:	movw	r0, #43690	; 0xaaaa
   14a20:	mov	r1, r2
   14a24:	bfi	r0, r0, #16, #16
   14a28:	bl	16278 <close_stdout@@Base+0x3a4c>
   14a2c:	cmp	r4, r0
   14a30:	addcc	r3, r4, #1
   14a34:	addcc	r4, r4, r3, lsr #1
   14a38:	bcs	14a74 <close_stdout@@Base+0x2248>
   14a3c:	str	r4, [r5]
   14a40:	mov	r0, r7
   14a44:	mul	r1, r6, r4
   14a48:	pop	{r3, r4, r5, r6, r7, lr}
   14a4c:	b	14980 <close_stdout@@Base+0x2154>
   14a50:	cmp	r4, #0
   14a54:	bne	14a3c <close_stdout@@Base+0x2210>
   14a58:	mov	r0, #64	; 0x40
   14a5c:	mov	r1, r2
   14a60:	bl	16278 <close_stdout@@Base+0x3a4c>
   14a64:	cmp	r0, #0
   14a68:	movne	r4, r0
   14a6c:	addeq	r4, r0, #1
   14a70:	b	14a3c <close_stdout@@Base+0x2210>
   14a74:	bl	14b3c <close_stdout@@Base+0x2310>
   14a78:	cmp	r0, #0
   14a7c:	push	{r3, lr}
   14a80:	ldr	r3, [r1]
   14a84:	beq	14ab0 <close_stdout@@Base+0x2284>
   14a88:	movw	r2, #43689	; 0xaaa9
   14a8c:	movt	r2, #43690	; 0xaaaa
   14a90:	cmp	r3, r2
   14a94:	addls	r2, r3, #1
   14a98:	addls	r3, r3, r2, lsr #1
   14a9c:	bhi	14ac8 <close_stdout@@Base+0x229c>
   14aa0:	str	r3, [r1]
   14aa4:	mov	r1, r3
   14aa8:	pop	{r3, lr}
   14aac:	b	14980 <close_stdout@@Base+0x2154>
   14ab0:	cmp	r3, #0
   14ab4:	moveq	r3, #64	; 0x40
   14ab8:	str	r3, [r1]
   14abc:	mov	r1, r3
   14ac0:	pop	{r3, lr}
   14ac4:	b	14980 <close_stdout@@Base+0x2154>
   14ac8:	bl	14b3c <close_stdout@@Base+0x2310>
   14acc:	push	{r4, lr}
   14ad0:	mov	r4, r0
   14ad4:	bl	14928 <close_stdout@@Base+0x20fc>
   14ad8:	mov	r2, r4
   14adc:	mov	r1, #0
   14ae0:	pop	{r4, lr}
   14ae4:	b	112f0 <memset@plt>
   14ae8:	push	{r3, lr}
   14aec:	bl	11104 <calloc@plt>
   14af0:	cmp	r0, #0
   14af4:	popne	{r3, pc}
   14af8:	bl	14b3c <close_stdout@@Base+0x2310>
   14afc:	push	{r3, r4, r5, lr}
   14b00:	mov	r4, r1
   14b04:	mov	r5, r0
   14b08:	mov	r0, r1
   14b0c:	bl	14928 <close_stdout@@Base+0x20fc>
   14b10:	mov	r1, r5
   14b14:	mov	r2, r4
   14b18:	pop	{r3, r4, r5, lr}
   14b1c:	b	11170 <memcpy@plt>
   14b20:	push	{r4, lr}
   14b24:	mov	r4, r0
   14b28:	bl	112a8 <strlen@plt>
   14b2c:	add	r1, r0, #1
   14b30:	mov	r0, r4
   14b34:	pop	{r4, lr}
   14b38:	b	14afc <close_stdout@@Base+0x22d0>
   14b3c:	ldr	r3, [pc, #64]	; 14b84 <close_stdout@@Base+0x2358>
   14b40:	mov	r2, #5
   14b44:	ldr	ip, [pc, #60]	; 14b88 <close_stdout@@Base+0x235c>
   14b48:	mov	r0, #0
   14b4c:	add	r3, pc, r3
   14b50:	ldr	r1, [pc, #52]	; 14b8c <close_stdout@@Base+0x2360>
   14b54:	push	{r4, lr}
   14b58:	add	r1, pc, r1
   14b5c:	ldr	r3, [r3, ip]
   14b60:	ldr	r4, [r3]
   14b64:	bl	111ac <dcgettext@plt>
   14b68:	ldr	r2, [pc, #32]	; 14b90 <close_stdout@@Base+0x2364>
   14b6c:	mov	r1, #0
   14b70:	add	r2, pc, r2
   14b74:	mov	r3, r0
   14b78:	mov	r0, r4
   14b7c:	bl	11230 <error@plt>
   14b80:	bl	113c8 <abort@plt>
   14b84:	andeq	r4, r1, ip, lsr #9
   14b88:	andeq	r0, r0, r4, lsr r1
   14b8c:	andeq	r3, r0, ip, asr #7
   14b90:	andeq	r2, r0, r4, lsr #27
   14b94:	ldr	ip, [pc, #2612]	; 155d0 <close_stdout@@Base+0x2da4>
   14b98:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14b9c:	mov	r8, r2
   14ba0:	ldr	r2, [pc, #2604]	; 155d4 <close_stdout@@Base+0x2da8>
   14ba4:	add	ip, pc, ip
   14ba8:	mov	r9, r3
   14bac:	sub	sp, sp, #60	; 0x3c
   14bb0:	mov	r3, ip
   14bb4:	cmp	r8, #36	; 0x24
   14bb8:	ldr	r7, [ip, r2]
   14bbc:	mov	r4, r0
   14bc0:	mov	r6, r1
   14bc4:	ldr	fp, [sp, #96]	; 0x60
   14bc8:	ldr	r3, [r7]
   14bcc:	str	r3, [sp, #52]	; 0x34
   14bd0:	bhi	1559c <close_stdout@@Base+0x2d70>
   14bd4:	cmp	r1, #0
   14bd8:	mov	r5, #0
   14bdc:	addeq	r6, sp, #48	; 0x30
   14be0:	bl	112d8 <__errno_location@plt>
   14be4:	mov	r2, r8
   14be8:	mov	r3, r5
   14bec:	mov	r1, r6
   14bf0:	str	r5, [r0]
   14bf4:	mov	sl, r0
   14bf8:	mov	r0, r4
   14bfc:	bl	1138c <__strtoll_internal@plt>
   14c00:	ldr	r8, [r6]
   14c04:	cmp	r8, r4
   14c08:	strd	r0, [sp]
   14c0c:	beq	14da8 <close_stdout@@Base+0x257c>
   14c10:	ldr	sl, [sl]
   14c14:	cmp	sl, #0
   14c18:	bne	14c54 <close_stdout@@Base+0x2428>
   14c1c:	cmp	fp, #0
   14c20:	beq	14dec <close_stdout@@Base+0x25c0>
   14c24:	ldrb	r4, [r8]
   14c28:	cmp	r4, #0
   14c2c:	bne	14c64 <close_stdout@@Base+0x2438>
   14c30:	ldrd	r2, [sp]
   14c34:	mov	r0, sl
   14c38:	strd	r2, [r9]
   14c3c:	ldr	r2, [sp, #52]	; 0x34
   14c40:	ldr	r3, [r7]
   14c44:	cmp	r2, r3
   14c48:	bne	15598 <close_stdout@@Base+0x2d6c>
   14c4c:	add	sp, sp, #60	; 0x3c
   14c50:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14c54:	cmp	sl, #34	; 0x22
   14c58:	beq	14de4 <close_stdout@@Base+0x25b8>
   14c5c:	mov	r0, #4
   14c60:	b	14c3c <close_stdout@@Base+0x2410>
   14c64:	mov	r0, fp
   14c68:	mov	r1, r4
   14c6c:	bl	112b4 <strchr@plt>
   14c70:	cmp	r0, #0
   14c74:	beq	14d98 <close_stdout@@Base+0x256c>
   14c78:	mov	r0, fp
   14c7c:	mov	r1, #48	; 0x30
   14c80:	bl	112b4 <strchr@plt>
   14c84:	cmp	r0, #0
   14c88:	beq	14ca8 <close_stdout@@Base+0x247c>
   14c8c:	ldrb	r3, [r8, #1]
   14c90:	cmp	r3, #68	; 0x44
   14c94:	beq	14dfc <close_stdout@@Base+0x25d0>
   14c98:	cmp	r3, #105	; 0x69
   14c9c:	beq	15458 <close_stdout@@Base+0x2c2c>
   14ca0:	cmp	r3, #66	; 0x42
   14ca4:	beq	14dfc <close_stdout@@Base+0x25d0>
   14ca8:	mov	fp, #1
   14cac:	mov	r3, #1024	; 0x400
   14cb0:	sub	r4, r4, #66	; 0x42
   14cb4:	cmp	r4, #53	; 0x35
   14cb8:	addls	pc, pc, r4, lsl #2
   14cbc:	b	15448 <close_stdout@@Base+0x2c1c>
   14cc0:	b	15158 <close_stdout@@Base+0x292c>
   14cc4:	b	15448 <close_stdout@@Base+0x2c1c>
   14cc8:	b	15448 <close_stdout@@Base+0x2c1c>
   14ccc:	b	150a8 <close_stdout@@Base+0x287c>
   14cd0:	b	15448 <close_stdout@@Base+0x2c1c>
   14cd4:	b	15010 <close_stdout@@Base+0x27e4>
   14cd8:	b	15448 <close_stdout@@Base+0x2c1c>
   14cdc:	b	15448 <close_stdout@@Base+0x2c1c>
   14ce0:	b	15448 <close_stdout@@Base+0x2c1c>
   14ce4:	b	153d0 <close_stdout@@Base+0x2ba4>
   14ce8:	b	15448 <close_stdout@@Base+0x2c1c>
   14cec:	b	15300 <close_stdout@@Base+0x2ad4>
   14cf0:	b	15448 <close_stdout@@Base+0x2c1c>
   14cf4:	b	15448 <close_stdout@@Base+0x2c1c>
   14cf8:	b	15250 <close_stdout@@Base+0x2a24>
   14cfc:	b	15448 <close_stdout@@Base+0x2c1c>
   14d00:	b	15448 <close_stdout@@Base+0x2c1c>
   14d04:	b	15448 <close_stdout@@Base+0x2c1c>
   14d08:	b	151a8 <close_stdout@@Base+0x297c>
   14d0c:	b	15448 <close_stdout@@Base+0x2c1c>
   14d10:	b	15448 <close_stdout@@Base+0x2c1c>
   14d14:	b	15448 <close_stdout@@Base+0x2c1c>
   14d18:	b	15448 <close_stdout@@Base+0x2c1c>
   14d1c:	b	14f28 <close_stdout@@Base+0x26fc>
   14d20:	b	14e78 <close_stdout@@Base+0x264c>
   14d24:	b	15448 <close_stdout@@Base+0x2c1c>
   14d28:	b	15448 <close_stdout@@Base+0x2c1c>
   14d2c:	b	15448 <close_stdout@@Base+0x2c1c>
   14d30:	b	15448 <close_stdout@@Base+0x2c1c>
   14d34:	b	15448 <close_stdout@@Base+0x2c1c>
   14d38:	b	15448 <close_stdout@@Base+0x2c1c>
   14d3c:	b	15448 <close_stdout@@Base+0x2c1c>
   14d40:	b	14e28 <close_stdout@@Base+0x25fc>
   14d44:	b	14e08 <close_stdout@@Base+0x25dc>
   14d48:	b	15448 <close_stdout@@Base+0x2c1c>
   14d4c:	b	15448 <close_stdout@@Base+0x2c1c>
   14d50:	b	15448 <close_stdout@@Base+0x2c1c>
   14d54:	b	15010 <close_stdout@@Base+0x27e4>
   14d58:	b	15448 <close_stdout@@Base+0x2c1c>
   14d5c:	b	15448 <close_stdout@@Base+0x2c1c>
   14d60:	b	15448 <close_stdout@@Base+0x2c1c>
   14d64:	b	153d0 <close_stdout@@Base+0x2ba4>
   14d68:	b	15448 <close_stdout@@Base+0x2c1c>
   14d6c:	b	15300 <close_stdout@@Base+0x2ad4>
   14d70:	b	15448 <close_stdout@@Base+0x2c1c>
   14d74:	b	15448 <close_stdout@@Base+0x2c1c>
   14d78:	b	15448 <close_stdout@@Base+0x2c1c>
   14d7c:	b	15448 <close_stdout@@Base+0x2c1c>
   14d80:	b	15448 <close_stdout@@Base+0x2c1c>
   14d84:	b	15448 <close_stdout@@Base+0x2c1c>
   14d88:	b	151a8 <close_stdout@@Base+0x297c>
   14d8c:	b	15448 <close_stdout@@Base+0x2c1c>
   14d90:	b	15448 <close_stdout@@Base+0x2c1c>
   14d94:	b	14fd8 <close_stdout@@Base+0x27ac>
   14d98:	ldrd	r2, [sp]
   14d9c:	orr	r0, sl, #2
   14da0:	strd	r2, [r9]
   14da4:	b	14c3c <close_stdout@@Base+0x2410>
   14da8:	cmp	fp, r5
   14dac:	beq	14c5c <close_stdout@@Base+0x2430>
   14db0:	ldrb	r4, [r4]
   14db4:	cmp	r4, r5
   14db8:	beq	14c5c <close_stdout@@Base+0x2430>
   14dbc:	mov	r0, fp
   14dc0:	mov	r1, r4
   14dc4:	bl	112b4 <strchr@plt>
   14dc8:	cmp	r0, r5
   14dcc:	beq	14c5c <close_stdout@@Base+0x2430>
   14dd0:	mov	r0, #1
   14dd4:	mov	r1, #0
   14dd8:	mov	sl, r5
   14ddc:	strd	r0, [sp]
   14de0:	b	14c78 <close_stdout@@Base+0x244c>
   14de4:	mov	sl, #1
   14de8:	b	14c1c <close_stdout@@Base+0x23f0>
   14dec:	ldrd	r0, [sp]
   14df0:	strd	r0, [r9]
   14df4:	mov	r0, sl
   14df8:	b	14c3c <close_stdout@@Base+0x2410>
   14dfc:	mov	fp, #2
   14e00:	mov	r3, #1000	; 0x3e8
   14e04:	b	14cb0 <close_stdout@@Base+0x2484>
   14e08:	mov	r5, #0
   14e0c:	add	r3, r8, fp
   14e10:	str	r3, [r6]
   14e14:	ldrb	r3, [r8, fp]
   14e18:	orr	sl, sl, r5
   14e1c:	cmp	r3, #0
   14e20:	orrne	sl, sl, #2
   14e24:	b	14c30 <close_stdout@@Base+0x2404>
   14e28:	ldrd	r0, [sp]
   14e2c:	mov	r3, #0
   14e30:	movt	r3, #65472	; 0xffc0
   14e34:	mov	r2, #0
   14e38:	cmp	r0, r2
   14e3c:	sbcs	r1, r1, r3
   14e40:	blt	15490 <close_stdout@@Base+0x2c64>
   14e44:	ldrd	r2, [sp]
   14e48:	cmp	r2, #0
   14e4c:	sbcs	r3, r3, #4194304	; 0x400000
   14e50:	bge	15504 <close_stdout@@Base+0x2cd8>
   14e54:	ldr	r0, [sp, #4]
   14e58:	mov	r5, #0
   14e5c:	ldr	r1, [sp]
   14e60:	lsl	r3, r0, #9
   14e64:	lsl	r2, r1, #9
   14e68:	orr	r3, r3, r1, lsr #23
   14e6c:	str	r2, [sp]
   14e70:	str	r3, [sp, #4]
   14e74:	b	14e0c <close_stdout@@Base+0x25e0>
   14e78:	mov	r0, r3
   14e7c:	asr	r1, r3, #31
   14e80:	strd	r0, [sp, #8]
   14e84:	mov	r0, #0
   14e88:	mov	r1, #-2147483648	; 0x80000000
   14e8c:	ldrd	r2, [sp, #8]
   14e90:	bl	166c4 <close_stdout@@Base+0x3e98>
   14e94:	mov	r4, #7
   14e98:	str	sl, [sp, #28]
   14e9c:	mov	r5, #0
   14ea0:	str	fp, [sp, #32]
   14ea4:	str	r8, [sp, #36]	; 0x24
   14ea8:	str	r6, [sp, #40]	; 0x28
   14eac:	str	r9, [sp, #44]	; 0x2c
   14eb0:	ldrd	sl, [sp]
   14eb4:	strd	r0, [sp, #16]
   14eb8:	mov	r8, r0
   14ebc:	str	r7, [sp, #16]
   14ec0:	mov	r9, r1
   14ec4:	ldrd	r6, [sp, #8]
   14ec8:	b	14f0c <close_stdout@@Base+0x26e0>
   14ecc:	mov	r2, r6
   14ed0:	mvn	r0, #0
   14ed4:	mvn	r1, #-2147483648	; 0x80000000
   14ed8:	mov	r3, r7
   14edc:	bl	166c4 <close_stdout@@Base+0x3e98>
   14ee0:	cmp	r0, sl
   14ee4:	sbcs	r2, r1, fp
   14ee8:	blt	154c4 <close_stdout@@Base+0x2c98>
   14eec:	mul	r2, sl, r7
   14ef0:	mov	r3, #0
   14ef4:	mla	r2, r6, fp, r2
   14ef8:	umull	sl, fp, sl, r6
   14efc:	add	fp, r2, fp
   14f00:	subs	r4, r4, #1
   14f04:	orr	r5, r5, r3
   14f08:	beq	15470 <close_stdout@@Base+0x2c44>
   14f0c:	cmp	sl, r8
   14f10:	sbcs	r1, fp, r9
   14f14:	bge	14ecc <close_stdout@@Base+0x26a0>
   14f18:	mov	sl, #0
   14f1c:	mov	fp, #-2147483648	; 0x80000000
   14f20:	mov	r3, #1
   14f24:	b	14f00 <close_stdout@@Base+0x26d4>
   14f28:	mov	r0, r3
   14f2c:	asr	r1, r3, #31
   14f30:	strd	r0, [sp, #8]
   14f34:	mov	r0, #0
   14f38:	mov	r1, #-2147483648	; 0x80000000
   14f3c:	ldrd	r2, [sp, #8]
   14f40:	bl	166c4 <close_stdout@@Base+0x3e98>
   14f44:	mov	r4, #8
   14f48:	str	sl, [sp, #28]
   14f4c:	mov	r5, #0
   14f50:	str	fp, [sp, #32]
   14f54:	str	r8, [sp, #36]	; 0x24
   14f58:	str	r6, [sp, #40]	; 0x28
   14f5c:	str	r9, [sp, #44]	; 0x2c
   14f60:	ldrd	sl, [sp]
   14f64:	strd	r0, [sp, #16]
   14f68:	mov	r8, r0
   14f6c:	str	r7, [sp, #16]
   14f70:	mov	r9, r1
   14f74:	ldrd	r6, [sp, #8]
   14f78:	b	14fbc <close_stdout@@Base+0x2790>
   14f7c:	mov	r2, r6
   14f80:	mvn	r0, #0
   14f84:	mvn	r1, #-2147483648	; 0x80000000
   14f88:	mov	r3, r7
   14f8c:	bl	166c4 <close_stdout@@Base+0x3e98>
   14f90:	cmp	r0, sl
   14f94:	sbcs	r2, r1, fp
   14f98:	blt	154b4 <close_stdout@@Base+0x2c88>
   14f9c:	mul	r2, sl, r7
   14fa0:	mov	r3, #0
   14fa4:	mla	r2, r6, fp, r2
   14fa8:	umull	sl, fp, sl, r6
   14fac:	add	fp, r2, fp
   14fb0:	subs	r4, r4, #1
   14fb4:	orr	r5, r5, r3
   14fb8:	beq	15470 <close_stdout@@Base+0x2c44>
   14fbc:	cmp	sl, r8
   14fc0:	sbcs	r1, fp, r9
   14fc4:	bge	14f7c <close_stdout@@Base+0x2750>
   14fc8:	mov	sl, #0
   14fcc:	mov	fp, #-2147483648	; 0x80000000
   14fd0:	mov	r3, #1
   14fd4:	b	14fb0 <close_stdout@@Base+0x2784>
   14fd8:	ldrd	r0, [sp]
   14fdc:	cmp	r0, #0
   14fe0:	sbcs	r1, r1, #-1073741824	; 0xc0000000
   14fe4:	blt	15490 <close_stdout@@Base+0x2c64>
   14fe8:	ldrd	r2, [sp]
   14fec:	cmp	r2, #0
   14ff0:	sbcs	r3, r3, #1073741824	; 0x40000000
   14ff4:	bge	15504 <close_stdout@@Base+0x2cd8>
   14ff8:	ldrd	r0, [sp]
   14ffc:	mov	r5, #0
   15000:	adds	r0, r0, r0
   15004:	adc	r1, r1, r1
   15008:	strd	r0, [sp]
   1500c:	b	14e0c <close_stdout@@Base+0x25e0>
   15010:	mov	r0, r3
   15014:	asr	r1, r3, #31
   15018:	strd	r0, [sp, #8]
   1501c:	mov	r0, #0
   15020:	mov	r1, #-2147483648	; 0x80000000
   15024:	ldrd	r2, [sp, #8]
   15028:	bl	166c4 <close_stdout@@Base+0x3e98>
   1502c:	str	r6, [sp, #28]
   15030:	str	r7, [sp, #32]
   15034:	mov	r4, #3
   15038:	ldrd	r6, [sp]
   1503c:	mov	r5, #0
   15040:	strd	r0, [sp, #16]
   15044:	ldrd	r2, [sp, #16]
   15048:	cmp	r6, r2
   1504c:	sbcs	r3, r7, r3
   15050:	blt	154d4 <close_stdout@@Base+0x2ca8>
   15054:	ldrd	r2, [sp, #8]
   15058:	mvn	r0, #0
   1505c:	mvn	r1, #-2147483648	; 0x80000000
   15060:	bl	166c4 <close_stdout@@Base+0x3e98>
   15064:	cmp	r0, r6
   15068:	sbcs	r2, r1, r7
   1506c:	blt	15548 <close_stdout@@Base+0x2d1c>
   15070:	ldr	r3, [sp, #12]
   15074:	ldr	r0, [sp, #8]
   15078:	mul	r2, r6, r3
   1507c:	mov	r3, #0
   15080:	mla	r2, r0, r7, r2
   15084:	umull	r6, r7, r6, r0
   15088:	add	r7, r2, r7
   1508c:	subs	r4, r4, #1
   15090:	orr	r5, r5, r3
   15094:	bne	15044 <close_stdout@@Base+0x2818>
   15098:	strd	r6, [sp]
   1509c:	ldr	r6, [sp, #28]
   150a0:	ldr	r7, [sp, #32]
   150a4:	b	14e0c <close_stdout@@Base+0x25e0>
   150a8:	mov	r0, r3
   150ac:	asr	r1, r3, #31
   150b0:	strd	r0, [sp, #8]
   150b4:	mov	r0, #0
   150b8:	mov	r1, #-2147483648	; 0x80000000
   150bc:	ldrd	r2, [sp, #8]
   150c0:	bl	166c4 <close_stdout@@Base+0x3e98>
   150c4:	mov	r4, #6
   150c8:	str	sl, [sp, #28]
   150cc:	mov	r5, #0
   150d0:	str	fp, [sp, #32]
   150d4:	str	r8, [sp, #36]	; 0x24
   150d8:	str	r6, [sp, #40]	; 0x28
   150dc:	str	r9, [sp, #44]	; 0x2c
   150e0:	ldrd	sl, [sp]
   150e4:	strd	r0, [sp, #16]
   150e8:	mov	r8, r0
   150ec:	str	r7, [sp, #16]
   150f0:	mov	r9, r1
   150f4:	ldrd	r6, [sp, #8]
   150f8:	b	1513c <close_stdout@@Base+0x2910>
   150fc:	mov	r2, r6
   15100:	mvn	r0, #0
   15104:	mvn	r1, #-2147483648	; 0x80000000
   15108:	mov	r3, r7
   1510c:	bl	166c4 <close_stdout@@Base+0x3e98>
   15110:	cmp	r0, sl
   15114:	sbcs	r2, r1, fp
   15118:	blt	154e4 <close_stdout@@Base+0x2cb8>
   1511c:	mul	r2, sl, r7
   15120:	mov	r3, #0
   15124:	mla	r2, r6, fp, r2
   15128:	umull	sl, fp, sl, r6
   1512c:	add	fp, r2, fp
   15130:	subs	r4, r4, #1
   15134:	orr	r5, r5, r3
   15138:	beq	15470 <close_stdout@@Base+0x2c44>
   1513c:	cmp	sl, r8
   15140:	sbcs	r1, fp, r9
   15144:	bge	150fc <close_stdout@@Base+0x28d0>
   15148:	mov	sl, #0
   1514c:	mov	fp, #-2147483648	; 0x80000000
   15150:	mov	r3, #1
   15154:	b	15130 <close_stdout@@Base+0x2904>
   15158:	ldrd	r0, [sp]
   1515c:	mov	r3, #0
   15160:	movt	r3, #65504	; 0xffe0
   15164:	mov	r2, #0
   15168:	cmp	r0, r2
   1516c:	sbcs	r1, r1, r3
   15170:	blt	15490 <close_stdout@@Base+0x2c64>
   15174:	ldrd	r2, [sp]
   15178:	cmp	r2, #0
   1517c:	sbcs	r3, r3, #2097152	; 0x200000
   15180:	bge	15504 <close_stdout@@Base+0x2cd8>
   15184:	ldr	r0, [sp, #4]
   15188:	mov	r5, #0
   1518c:	ldr	r1, [sp]
   15190:	lsl	r3, r0, #10
   15194:	lsl	r2, r1, #10
   15198:	orr	r3, r3, r1, lsr #22
   1519c:	str	r2, [sp]
   151a0:	str	r3, [sp, #4]
   151a4:	b	14e0c <close_stdout@@Base+0x25e0>
   151a8:	mov	r0, r3
   151ac:	asr	r1, r3, #31
   151b0:	strd	r0, [sp, #16]
   151b4:	mov	r0, #0
   151b8:	ldrd	r2, [sp, #16]
   151bc:	mov	r1, #-2147483648	; 0x80000000
   151c0:	bl	166c4 <close_stdout@@Base+0x3e98>
   151c4:	str	r8, [sp, #28]
   151c8:	str	r6, [sp, #32]
   151cc:	mov	r4, #4
   151d0:	str	r9, [sp, #36]	; 0x24
   151d4:	mov	r5, #0
   151d8:	ldrd	r8, [sp, #16]
   151dc:	str	r7, [sp, #16]
   151e0:	ldrd	r6, [sp]
   151e4:	strd	r0, [sp, #8]
   151e8:	ldrd	r2, [sp, #8]
   151ec:	cmp	r6, r2
   151f0:	sbcs	r3, r7, r3
   151f4:	blt	154a4 <close_stdout@@Base+0x2c78>
   151f8:	mov	r2, r8
   151fc:	mvn	r0, #0
   15200:	mvn	r1, #-2147483648	; 0x80000000
   15204:	mov	r3, r9
   15208:	bl	166c4 <close_stdout@@Base+0x3e98>
   1520c:	cmp	r0, r6
   15210:	sbcs	r2, r1, r7
   15214:	blt	15518 <close_stdout@@Base+0x2cec>
   15218:	mul	r2, r6, r9
   1521c:	mov	r3, #0
   15220:	mla	r2, r8, r7, r2
   15224:	umull	r6, r7, r6, r8
   15228:	add	r7, r2, r7
   1522c:	subs	r4, r4, #1
   15230:	orr	r5, r5, r3
   15234:	bne	151e8 <close_stdout@@Base+0x29bc>
   15238:	strd	r6, [sp]
   1523c:	ldr	r8, [sp, #28]
   15240:	ldr	r6, [sp, #32]
   15244:	ldr	r9, [sp, #36]	; 0x24
   15248:	ldr	r7, [sp, #16]
   1524c:	b	14e0c <close_stdout@@Base+0x25e0>
   15250:	mov	r0, r3
   15254:	asr	r1, r3, #31
   15258:	strd	r0, [sp, #8]
   1525c:	mov	r0, #0
   15260:	ldrd	r2, [sp, #8]
   15264:	mov	r1, #-2147483648	; 0x80000000
   15268:	bl	166c4 <close_stdout@@Base+0x3e98>
   1526c:	mov	r4, #5
   15270:	str	sl, [sp, #28]
   15274:	mov	r5, #0
   15278:	str	fp, [sp, #32]
   1527c:	str	r8, [sp, #36]	; 0x24
   15280:	str	r9, [sp, #40]	; 0x28
   15284:	ldrd	r8, [sp, #8]
   15288:	str	r7, [sp, #8]
   1528c:	strd	r0, [sp, #16]
   15290:	mov	sl, r0
   15294:	str	r6, [sp, #16]
   15298:	mov	fp, r1
   1529c:	ldrd	r6, [sp]
   152a0:	b	152e4 <close_stdout@@Base+0x2ab8>
   152a4:	mov	r2, r8
   152a8:	mvn	r0, #0
   152ac:	mvn	r1, #-2147483648	; 0x80000000
   152b0:	mov	r3, r9
   152b4:	bl	166c4 <close_stdout@@Base+0x3e98>
   152b8:	cmp	r0, r6
   152bc:	sbcs	r2, r1, r7
   152c0:	blt	154f4 <close_stdout@@Base+0x2cc8>
   152c4:	mul	r2, r6, r9
   152c8:	mov	r3, #0
   152cc:	mla	r2, r8, r7, r2
   152d0:	umull	r6, r7, r6, r8
   152d4:	add	r7, r2, r7
   152d8:	subs	r4, r4, #1
   152dc:	orr	r5, r5, r3
   152e0:	beq	15528 <close_stdout@@Base+0x2cfc>
   152e4:	cmp	r6, sl
   152e8:	sbcs	r1, r7, fp
   152ec:	bge	152a4 <close_stdout@@Base+0x2a78>
   152f0:	mov	r6, #0
   152f4:	mov	r7, #-2147483648	; 0x80000000
   152f8:	mov	r3, #1
   152fc:	b	152d8 <close_stdout@@Base+0x2aac>
   15300:	asr	r5, r3, #31
   15304:	mov	r2, r3
   15308:	mov	r4, r3
   1530c:	mov	r0, #0
   15310:	mov	r3, r5
   15314:	mov	r1, #-2147483648	; 0x80000000
   15318:	bl	166c4 <close_stdout@@Base+0x3e98>
   1531c:	ldrd	r2, [sp]
   15320:	cmp	r2, r0
   15324:	sbcs	r3, r3, r1
   15328:	strd	r0, [sp, #8]
   1532c:	blt	15558 <close_stdout@@Base+0x2d2c>
   15330:	mov	r2, r4
   15334:	mov	r3, r5
   15338:	mvn	r0, #0
   1533c:	mvn	r1, #-2147483648	; 0x80000000
   15340:	bl	166c4 <close_stdout@@Base+0x3e98>
   15344:	ldrd	r2, [sp]
   15348:	cmp	r0, r2
   1534c:	sbcs	r3, r1, r3
   15350:	strd	r0, [sp, #16]
   15354:	blt	15570 <close_stdout@@Base+0x2d44>
   15358:	ldr	r0, [sp]
   1535c:	mov	ip, #0
   15360:	ldr	r2, [sp, #4]
   15364:	mul	r1, r0, r5
   15368:	mla	r1, r4, r2, r1
   1536c:	umull	r2, r3, r0, r4
   15370:	add	r1, r1, r3
   15374:	strd	r2, [sp]
   15378:	str	r1, [sp, #4]
   1537c:	ldrd	r0, [sp]
   15380:	ldrd	r2, [sp, #8]
   15384:	cmp	r0, r2
   15388:	sbcs	r3, r1, r3
   1538c:	blt	155bc <close_stdout@@Base+0x2d90>
   15390:	ldrd	r2, [sp, #16]
   15394:	ldrd	r0, [sp]
   15398:	cmp	r2, r0
   1539c:	sbcs	r1, r3, r1
   153a0:	blt	15584 <close_stdout@@Base+0x2d58>
   153a4:	ldr	r2, [sp]
   153a8:	ldr	r3, [sp, #4]
   153ac:	mul	r0, r2, r5
   153b0:	mov	r5, #0
   153b4:	mla	r0, r4, r3, r0
   153b8:	umull	r2, r3, r2, r4
   153bc:	add	r0, r0, r3
   153c0:	strd	r2, [sp]
   153c4:	str	r0, [sp, #4]
   153c8:	orr	r5, r5, ip
   153cc:	b	14e0c <close_stdout@@Base+0x25e0>
   153d0:	asr	r5, r3, #31
   153d4:	mov	r2, r3
   153d8:	mov	r4, r3
   153dc:	mov	r0, #0
   153e0:	mov	r3, r5
   153e4:	mov	r1, #-2147483648	; 0x80000000
   153e8:	bl	166c4 <close_stdout@@Base+0x3e98>
   153ec:	ldrd	r2, [sp]
   153f0:	cmp	r2, r0
   153f4:	sbcs	r3, r3, r1
   153f8:	blt	15490 <close_stdout@@Base+0x2c64>
   153fc:	mov	r2, r4
   15400:	mov	r3, r5
   15404:	mvn	r0, #0
   15408:	mvn	r1, #-2147483648	; 0x80000000
   1540c:	bl	166c4 <close_stdout@@Base+0x3e98>
   15410:	ldrd	r2, [sp]
   15414:	cmp	r0, r2
   15418:	sbcs	r3, r1, r3
   1541c:	blt	15504 <close_stdout@@Base+0x2cd8>
   15420:	ldr	r0, [sp]
   15424:	ldr	r1, [sp, #4]
   15428:	mul	r3, r0, r5
   1542c:	mov	r5, #0
   15430:	mla	r3, r4, r1, r3
   15434:	umull	r0, r1, r0, r4
   15438:	add	r3, r3, r1
   1543c:	strd	r0, [sp]
   15440:	str	r3, [sp, #4]
   15444:	b	14e0c <close_stdout@@Base+0x25e0>
   15448:	ldrd	r0, [sp]
   1544c:	strd	r0, [r9]
   15450:	orr	r0, sl, #2
   15454:	b	14c3c <close_stdout@@Base+0x2410>
   15458:	ldrb	fp, [r8, #2]
   1545c:	mov	r3, #1024	; 0x400
   15460:	cmp	fp, #66	; 0x42
   15464:	moveq	fp, #3
   15468:	movne	fp, #1
   1546c:	b	14cb0 <close_stdout@@Base+0x2484>
   15470:	strd	sl, [sp]
   15474:	ldr	r8, [sp, #36]	; 0x24
   15478:	ldr	sl, [sp, #28]
   1547c:	ldr	fp, [sp, #32]
   15480:	ldr	r6, [sp, #40]	; 0x28
   15484:	ldr	r9, [sp, #44]	; 0x2c
   15488:	ldr	r7, [sp, #16]
   1548c:	b	14e0c <close_stdout@@Base+0x25e0>
   15490:	mov	r2, #0
   15494:	mov	r3, #-2147483648	; 0x80000000
   15498:	mov	r5, #1
   1549c:	strd	r2, [sp]
   154a0:	b	14e0c <close_stdout@@Base+0x25e0>
   154a4:	mov	r6, #0
   154a8:	mov	r7, #-2147483648	; 0x80000000
   154ac:	mov	r3, #1
   154b0:	b	1522c <close_stdout@@Base+0x2a00>
   154b4:	mvn	sl, #0
   154b8:	mvn	fp, #-2147483648	; 0x80000000
   154bc:	mov	r3, #1
   154c0:	b	14fb0 <close_stdout@@Base+0x2784>
   154c4:	mvn	sl, #0
   154c8:	mvn	fp, #-2147483648	; 0x80000000
   154cc:	mov	r3, #1
   154d0:	b	14f00 <close_stdout@@Base+0x26d4>
   154d4:	mov	r6, #0
   154d8:	mov	r7, #-2147483648	; 0x80000000
   154dc:	mov	r3, #1
   154e0:	b	1508c <close_stdout@@Base+0x2860>
   154e4:	mvn	sl, #0
   154e8:	mvn	fp, #-2147483648	; 0x80000000
   154ec:	mov	r3, #1
   154f0:	b	15130 <close_stdout@@Base+0x2904>
   154f4:	mvn	r6, #0
   154f8:	mvn	r7, #-2147483648	; 0x80000000
   154fc:	mov	r3, #1
   15500:	b	152d8 <close_stdout@@Base+0x2aac>
   15504:	mvn	r0, #0
   15508:	mvn	r1, #-2147483648	; 0x80000000
   1550c:	mov	r5, #1
   15510:	strd	r0, [sp]
   15514:	b	14e0c <close_stdout@@Base+0x25e0>
   15518:	mvn	r6, #0
   1551c:	mvn	r7, #-2147483648	; 0x80000000
   15520:	mov	r3, #1
   15524:	b	1522c <close_stdout@@Base+0x2a00>
   15528:	strd	r6, [sp]
   1552c:	ldr	sl, [sp, #28]
   15530:	ldr	fp, [sp, #32]
   15534:	ldr	r8, [sp, #36]	; 0x24
   15538:	ldr	r6, [sp, #16]
   1553c:	ldr	r9, [sp, #40]	; 0x28
   15540:	ldr	r7, [sp, #8]
   15544:	b	14e0c <close_stdout@@Base+0x25e0>
   15548:	mvn	r6, #0
   1554c:	mvn	r7, #-2147483648	; 0x80000000
   15550:	mov	r3, #1
   15554:	b	1508c <close_stdout@@Base+0x2860>
   15558:	mov	ip, #1
   1555c:	mov	r0, #0
   15560:	mov	r1, #-2147483648	; 0x80000000
   15564:	mov	r5, ip
   15568:	strd	r0, [sp]
   1556c:	b	153c8 <close_stdout@@Base+0x2b9c>
   15570:	mvn	r0, #0
   15574:	mvn	r1, #-2147483648	; 0x80000000
   15578:	mov	ip, #1
   1557c:	strd	r0, [sp]
   15580:	b	15390 <close_stdout@@Base+0x2b64>
   15584:	mvn	r0, #0
   15588:	mvn	r1, #-2147483648	; 0x80000000
   1558c:	mov	r5, #1
   15590:	strd	r0, [sp]
   15594:	b	153c8 <close_stdout@@Base+0x2b9c>
   15598:	bl	111b8 <__stack_chk_fail@plt>
   1559c:	ldr	r0, [pc, #52]	; 155d8 <close_stdout@@Base+0x2dac>
   155a0:	mov	r2, #96	; 0x60
   155a4:	ldr	r1, [pc, #48]	; 155dc <close_stdout@@Base+0x2db0>
   155a8:	ldr	r3, [pc, #48]	; 155e0 <close_stdout@@Base+0x2db4>
   155ac:	add	r0, pc, r0
   155b0:	add	r1, pc, r1
   155b4:	add	r3, pc, r3
   155b8:	bl	113e0 <__assert_fail@plt>
   155bc:	mov	r2, #0
   155c0:	mov	r3, #-2147483648	; 0x80000000
   155c4:	mov	r5, #1
   155c8:	strd	r2, [sp]
   155cc:	b	153c8 <close_stdout@@Base+0x2b9c>
   155d0:	andeq	r4, r1, r4, asr r4
   155d4:	andeq	r0, r0, ip, lsl #2
   155d8:	muleq	r0, r8, r9
   155dc:			; <UNDEFINED> instruction: 0x000029bc
   155e0:	andeq	r2, r0, r4, lsl #19
   155e4:	ldr	ip, [pc, #1584]	; 15c1c <close_stdout@@Base+0x33f0>
   155e8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   155ec:	mov	r7, r2
   155f0:	ldr	r2, [pc, #1576]	; 15c20 <close_stdout@@Base+0x33f4>
   155f4:	add	ip, pc, ip
   155f8:	mov	r9, r3
   155fc:	sub	sp, sp, #28
   15600:	cmp	r7, #36	; 0x24
   15604:	mov	r4, r1
   15608:	ldr	r2, [ip, r2]
   1560c:	mov	r1, ip
   15610:	mov	r5, r0
   15614:	ldr	r8, [sp, #64]	; 0x40
   15618:	ldr	r3, [r2]
   1561c:	str	r2, [sp, #12]
   15620:	str	r3, [sp, #20]
   15624:	bhi	15bfc <close_stdout@@Base+0x33d0>
   15628:	cmp	r4, #0
   1562c:	mov	fp, #0
   15630:	addeq	r4, sp, #16
   15634:	bl	112d8 <__errno_location@plt>
   15638:	mov	r2, r7
   1563c:	mov	r1, r4
   15640:	mov	sl, r0
   15644:	mov	r0, r5
   15648:	str	fp, [sl]
   1564c:	bl	11134 <strtol@plt>
   15650:	ldr	r7, [r4]
   15654:	cmp	r7, r5
   15658:	mov	r6, r0
   1565c:	beq	157f4 <close_stdout@@Base+0x2fc8>
   15660:	ldr	fp, [sl]
   15664:	cmp	fp, #0
   15668:	bne	156a4 <close_stdout@@Base+0x2e78>
   1566c:	cmp	r8, #0
   15670:	beq	15680 <close_stdout@@Base+0x2e54>
   15674:	ldrb	r5, [r7]
   15678:	cmp	r5, #0
   1567c:	bne	156b4 <close_stdout@@Base+0x2e88>
   15680:	mov	r0, fp
   15684:	str	r6, [r9]
   15688:	ldr	r1, [sp, #12]
   1568c:	ldr	r2, [sp, #20]
   15690:	ldr	r3, [r1]
   15694:	cmp	r2, r3
   15698:	bne	15bf8 <close_stdout@@Base+0x33cc>
   1569c:	add	sp, sp, #28
   156a0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   156a4:	cmp	fp, #34	; 0x22
   156a8:	beq	15824 <close_stdout@@Base+0x2ff8>
   156ac:	mov	r0, #4
   156b0:	b	15688 <close_stdout@@Base+0x2e5c>
   156b4:	mov	r0, r8
   156b8:	mov	r1, r5
   156bc:	bl	112b4 <strchr@plt>
   156c0:	cmp	r0, #0
   156c4:	beq	157e8 <close_stdout@@Base+0x2fbc>
   156c8:	mov	r0, r8
   156cc:	mov	r1, #48	; 0x30
   156d0:	bl	112b4 <strchr@plt>
   156d4:	cmp	r0, #0
   156d8:	beq	156f8 <close_stdout@@Base+0x2ecc>
   156dc:	ldrb	r2, [r7, #1]
   156e0:	cmp	r2, #68	; 0x44
   156e4:	beq	1582c <close_stdout@@Base+0x3000>
   156e8:	cmp	r2, #105	; 0x69
   156ec:	beq	15bb8 <close_stdout@@Base+0x338c>
   156f0:	cmp	r2, #66	; 0x42
   156f4:	beq	1582c <close_stdout@@Base+0x3000>
   156f8:	mov	sl, #1
   156fc:	mov	r8, #1024	; 0x400
   15700:	sub	r5, r5, #66	; 0x42
   15704:	cmp	r5, #53	; 0x35
   15708:	addls	pc, pc, r5, lsl #2
   1570c:	b	157e8 <close_stdout@@Base+0x2fbc>
   15710:	b	1595c <close_stdout@@Base+0x3130>
   15714:	b	157e8 <close_stdout@@Base+0x2fbc>
   15718:	b	157e8 <close_stdout@@Base+0x2fbc>
   1571c:	b	158f4 <close_stdout@@Base+0x30c8>
   15720:	b	157e8 <close_stdout@@Base+0x2fbc>
   15724:	b	1588c <close_stdout@@Base+0x3060>
   15728:	b	157e8 <close_stdout@@Base+0x2fbc>
   1572c:	b	157e8 <close_stdout@@Base+0x2fbc>
   15730:	b	157e8 <close_stdout@@Base+0x2fbc>
   15734:	b	15858 <close_stdout@@Base+0x302c>
   15738:	b	157e8 <close_stdout@@Base+0x2fbc>
   1573c:	b	15b58 <close_stdout@@Base+0x332c>
   15740:	b	157e8 <close_stdout@@Base+0x2fbc>
   15744:	b	157e8 <close_stdout@@Base+0x2fbc>
   15748:	b	15af0 <close_stdout@@Base+0x32c4>
   1574c:	b	157e8 <close_stdout@@Base+0x2fbc>
   15750:	b	157e8 <close_stdout@@Base+0x2fbc>
   15754:	b	157e8 <close_stdout@@Base+0x2fbc>
   15758:	b	15a88 <close_stdout@@Base+0x325c>
   1575c:	b	157e8 <close_stdout@@Base+0x2fbc>
   15760:	b	157e8 <close_stdout@@Base+0x2fbc>
   15764:	b	157e8 <close_stdout@@Base+0x2fbc>
   15768:	b	157e8 <close_stdout@@Base+0x2fbc>
   1576c:	b	15a20 <close_stdout@@Base+0x31f4>
   15770:	b	159b8 <close_stdout@@Base+0x318c>
   15774:	b	157e8 <close_stdout@@Base+0x2fbc>
   15778:	b	157e8 <close_stdout@@Base+0x2fbc>
   1577c:	b	157e8 <close_stdout@@Base+0x2fbc>
   15780:	b	157e8 <close_stdout@@Base+0x2fbc>
   15784:	b	157e8 <close_stdout@@Base+0x2fbc>
   15788:	b	157e8 <close_stdout@@Base+0x2fbc>
   1578c:	b	157e8 <close_stdout@@Base+0x2fbc>
   15790:	b	1599c <close_stdout@@Base+0x3170>
   15794:	b	15838 <close_stdout@@Base+0x300c>
   15798:	b	157e8 <close_stdout@@Base+0x2fbc>
   1579c:	b	157e8 <close_stdout@@Base+0x2fbc>
   157a0:	b	157e8 <close_stdout@@Base+0x2fbc>
   157a4:	b	1588c <close_stdout@@Base+0x3060>
   157a8:	b	157e8 <close_stdout@@Base+0x2fbc>
   157ac:	b	157e8 <close_stdout@@Base+0x2fbc>
   157b0:	b	157e8 <close_stdout@@Base+0x2fbc>
   157b4:	b	15858 <close_stdout@@Base+0x302c>
   157b8:	b	157e8 <close_stdout@@Base+0x2fbc>
   157bc:	b	15b58 <close_stdout@@Base+0x332c>
   157c0:	b	157e8 <close_stdout@@Base+0x2fbc>
   157c4:	b	157e8 <close_stdout@@Base+0x2fbc>
   157c8:	b	157e8 <close_stdout@@Base+0x2fbc>
   157cc:	b	157e8 <close_stdout@@Base+0x2fbc>
   157d0:	b	157e8 <close_stdout@@Base+0x2fbc>
   157d4:	b	157e8 <close_stdout@@Base+0x2fbc>
   157d8:	b	15a88 <close_stdout@@Base+0x325c>
   157dc:	b	157e8 <close_stdout@@Base+0x2fbc>
   157e0:	b	157e8 <close_stdout@@Base+0x2fbc>
   157e4:	b	15980 <close_stdout@@Base+0x3154>
   157e8:	str	r6, [r9]
   157ec:	orr	r0, fp, #2
   157f0:	b	15688 <close_stdout@@Base+0x2e5c>
   157f4:	cmp	r8, fp
   157f8:	beq	156ac <close_stdout@@Base+0x2e80>
   157fc:	ldrb	r5, [r5]
   15800:	cmp	r5, fp
   15804:	beq	156ac <close_stdout@@Base+0x2e80>
   15808:	mov	r0, r8
   1580c:	mov	r1, r5
   15810:	bl	112b4 <strchr@plt>
   15814:	cmp	r0, fp
   15818:	movne	r6, #1
   1581c:	bne	156c8 <close_stdout@@Base+0x2e9c>
   15820:	b	156ac <close_stdout@@Base+0x2e80>
   15824:	mov	fp, #1
   15828:	b	1566c <close_stdout@@Base+0x2e40>
   1582c:	mov	sl, #2
   15830:	mov	r8, #1000	; 0x3e8
   15834:	b	15700 <close_stdout@@Base+0x2ed4>
   15838:	mov	r5, #0
   1583c:	add	r2, r7, sl
   15840:	str	r2, [r4]
   15844:	ldrb	r2, [r7, sl]
   15848:	orr	fp, fp, r5
   1584c:	cmp	r2, #0
   15850:	orrne	fp, fp, #2
   15854:	b	15680 <close_stdout@@Base+0x2e54>
   15858:	mov	r0, #-2147483648	; 0x80000000
   1585c:	mov	r1, r8
   15860:	bl	16484 <close_stdout@@Base+0x3c58>
   15864:	cmp	r6, r0
   15868:	blt	15bd0 <close_stdout@@Base+0x33a4>
   1586c:	mvn	r0, #-2147483648	; 0x80000000
   15870:	mov	r1, r8
   15874:	bl	16484 <close_stdout@@Base+0x3c58>
   15878:	cmp	r6, r0
   1587c:	bgt	15974 <close_stdout@@Base+0x3148>
   15880:	mul	r6, r8, r6
   15884:	mov	r5, #0
   15888:	b	1583c <close_stdout@@Base+0x3010>
   1588c:	mov	r0, #-2147483648	; 0x80000000
   15890:	mov	r1, r8
   15894:	bl	16484 <close_stdout@@Base+0x3c58>
   15898:	mov	r5, #0
   1589c:	mov	r2, #3
   158a0:	mov	ip, r0
   158a4:	cmp	ip, r6
   158a8:	movgt	r6, #-2147483648	; 0x80000000
   158ac:	movgt	r1, #1
   158b0:	bgt	158e4 <close_stdout@@Base+0x30b8>
   158b4:	mov	r1, r8
   158b8:	mvn	r0, #-2147483648	; 0x80000000
   158bc:	str	r2, [sp, #8]
   158c0:	str	ip, [sp, #4]
   158c4:	bl	16484 <close_stdout@@Base+0x3c58>
   158c8:	ldr	r2, [sp, #8]
   158cc:	ldr	ip, [sp, #4]
   158d0:	cmp	r0, r6
   158d4:	mulge	r6, r8, r6
   158d8:	movge	r1, #0
   158dc:	mvnlt	r6, #-2147483648	; 0x80000000
   158e0:	movlt	r1, #1
   158e4:	subs	r2, r2, #1
   158e8:	orr	r5, r5, r1
   158ec:	bne	158a4 <close_stdout@@Base+0x3078>
   158f0:	b	1583c <close_stdout@@Base+0x3010>
   158f4:	mov	r0, #-2147483648	; 0x80000000
   158f8:	mov	r1, r8
   158fc:	bl	16484 <close_stdout@@Base+0x3c58>
   15900:	mov	r5, #0
   15904:	mov	r2, #6
   15908:	mov	ip, r0
   1590c:	cmp	ip, r6
   15910:	movgt	r6, #-2147483648	; 0x80000000
   15914:	movgt	r1, #1
   15918:	bgt	1594c <close_stdout@@Base+0x3120>
   1591c:	mov	r1, r8
   15920:	mvn	r0, #-2147483648	; 0x80000000
   15924:	str	r2, [sp, #8]
   15928:	str	ip, [sp, #4]
   1592c:	bl	16484 <close_stdout@@Base+0x3c58>
   15930:	ldr	r2, [sp, #8]
   15934:	ldr	ip, [sp, #4]
   15938:	cmp	r0, r6
   1593c:	mulge	r6, r8, r6
   15940:	movge	r1, #0
   15944:	mvnlt	r6, #-2147483648	; 0x80000000
   15948:	movlt	r1, #1
   1594c:	subs	r2, r2, #1
   15950:	orr	r5, r5, r1
   15954:	bne	1590c <close_stdout@@Base+0x30e0>
   15958:	b	1583c <close_stdout@@Base+0x3010>
   1595c:	cmn	r6, #2097152	; 0x200000
   15960:	blt	15bd0 <close_stdout@@Base+0x33a4>
   15964:	cmp	r6, #2097152	; 0x200000
   15968:	lsllt	r6, r6, #10
   1596c:	movlt	r5, #0
   15970:	blt	1583c <close_stdout@@Base+0x3010>
   15974:	mvn	r6, #-2147483648	; 0x80000000
   15978:	mov	r5, #1
   1597c:	b	1583c <close_stdout@@Base+0x3010>
   15980:	cmp	r6, #-1073741824	; 0xc0000000
   15984:	blt	15bd0 <close_stdout@@Base+0x33a4>
   15988:	cmn	r6, #-1073741823	; 0xc0000001
   1598c:	lslle	r6, r6, #1
   15990:	movle	r5, #0
   15994:	ble	1583c <close_stdout@@Base+0x3010>
   15998:	b	15974 <close_stdout@@Base+0x3148>
   1599c:	cmn	r6, #4194304	; 0x400000
   159a0:	blt	15bd0 <close_stdout@@Base+0x33a4>
   159a4:	cmp	r6, #4194304	; 0x400000
   159a8:	lsllt	r6, r6, #9
   159ac:	movlt	r5, #0
   159b0:	blt	1583c <close_stdout@@Base+0x3010>
   159b4:	b	15974 <close_stdout@@Base+0x3148>
   159b8:	mov	r0, #-2147483648	; 0x80000000
   159bc:	mov	r1, r8
   159c0:	bl	16484 <close_stdout@@Base+0x3c58>
   159c4:	mov	r5, #0
   159c8:	mov	r2, #7
   159cc:	mov	ip, r0
   159d0:	cmp	ip, r6
   159d4:	movgt	r6, #-2147483648	; 0x80000000
   159d8:	movgt	r1, #1
   159dc:	bgt	15a10 <close_stdout@@Base+0x31e4>
   159e0:	mov	r1, r8
   159e4:	mvn	r0, #-2147483648	; 0x80000000
   159e8:	str	r2, [sp, #8]
   159ec:	str	ip, [sp, #4]
   159f0:	bl	16484 <close_stdout@@Base+0x3c58>
   159f4:	ldr	r2, [sp, #8]
   159f8:	ldr	ip, [sp, #4]
   159fc:	cmp	r0, r6
   15a00:	mulge	r6, r8, r6
   15a04:	movge	r1, #0
   15a08:	mvnlt	r6, #-2147483648	; 0x80000000
   15a0c:	movlt	r1, #1
   15a10:	subs	r2, r2, #1
   15a14:	orr	r5, r5, r1
   15a18:	bne	159d0 <close_stdout@@Base+0x31a4>
   15a1c:	b	1583c <close_stdout@@Base+0x3010>
   15a20:	mov	r0, #-2147483648	; 0x80000000
   15a24:	mov	r1, r8
   15a28:	bl	16484 <close_stdout@@Base+0x3c58>
   15a2c:	mov	r5, #0
   15a30:	mov	r2, #8
   15a34:	mov	ip, r0
   15a38:	cmp	ip, r6
   15a3c:	movgt	r6, #-2147483648	; 0x80000000
   15a40:	movgt	r1, #1
   15a44:	bgt	15a78 <close_stdout@@Base+0x324c>
   15a48:	mov	r1, r8
   15a4c:	mvn	r0, #-2147483648	; 0x80000000
   15a50:	str	r2, [sp, #8]
   15a54:	str	ip, [sp, #4]
   15a58:	bl	16484 <close_stdout@@Base+0x3c58>
   15a5c:	ldr	r2, [sp, #8]
   15a60:	ldr	ip, [sp, #4]
   15a64:	cmp	r0, r6
   15a68:	mulge	r6, r8, r6
   15a6c:	movge	r1, #0
   15a70:	mvnlt	r6, #-2147483648	; 0x80000000
   15a74:	movlt	r1, #1
   15a78:	subs	r2, r2, #1
   15a7c:	orr	r5, r5, r1
   15a80:	bne	15a38 <close_stdout@@Base+0x320c>
   15a84:	b	1583c <close_stdout@@Base+0x3010>
   15a88:	mov	r0, #-2147483648	; 0x80000000
   15a8c:	mov	r1, r8
   15a90:	bl	16484 <close_stdout@@Base+0x3c58>
   15a94:	mov	r5, #0
   15a98:	mov	r2, #4
   15a9c:	mov	ip, r0
   15aa0:	cmp	ip, r6
   15aa4:	movgt	r6, #-2147483648	; 0x80000000
   15aa8:	movgt	r1, #1
   15aac:	bgt	15ae0 <close_stdout@@Base+0x32b4>
   15ab0:	mov	r1, r8
   15ab4:	mvn	r0, #-2147483648	; 0x80000000
   15ab8:	str	r2, [sp, #8]
   15abc:	str	ip, [sp, #4]
   15ac0:	bl	16484 <close_stdout@@Base+0x3c58>
   15ac4:	ldr	r2, [sp, #8]
   15ac8:	ldr	ip, [sp, #4]
   15acc:	cmp	r0, r6
   15ad0:	mulge	r6, r8, r6
   15ad4:	movge	r1, #0
   15ad8:	mvnlt	r6, #-2147483648	; 0x80000000
   15adc:	movlt	r1, #1
   15ae0:	subs	r2, r2, #1
   15ae4:	orr	r5, r5, r1
   15ae8:	bne	15aa0 <close_stdout@@Base+0x3274>
   15aec:	b	1583c <close_stdout@@Base+0x3010>
   15af0:	mov	r0, #-2147483648	; 0x80000000
   15af4:	mov	r1, r8
   15af8:	bl	16484 <close_stdout@@Base+0x3c58>
   15afc:	mov	r5, #0
   15b00:	mov	r2, #5
   15b04:	mov	ip, r0
   15b08:	cmp	ip, r6
   15b0c:	movgt	r6, #-2147483648	; 0x80000000
   15b10:	movgt	r1, #1
   15b14:	bgt	15b48 <close_stdout@@Base+0x331c>
   15b18:	mov	r1, r8
   15b1c:	mvn	r0, #-2147483648	; 0x80000000
   15b20:	str	r2, [sp, #8]
   15b24:	str	ip, [sp, #4]
   15b28:	bl	16484 <close_stdout@@Base+0x3c58>
   15b2c:	ldr	r2, [sp, #8]
   15b30:	ldr	ip, [sp, #4]
   15b34:	cmp	r0, r6
   15b38:	mulge	r6, r8, r6
   15b3c:	movge	r1, #0
   15b40:	mvnlt	r6, #-2147483648	; 0x80000000
   15b44:	movlt	r1, #1
   15b48:	subs	r2, r2, #1
   15b4c:	orr	r5, r5, r1
   15b50:	bne	15b08 <close_stdout@@Base+0x32dc>
   15b54:	b	1583c <close_stdout@@Base+0x3010>
   15b58:	mov	r0, #-2147483648	; 0x80000000
   15b5c:	mov	r1, r8
   15b60:	bl	16484 <close_stdout@@Base+0x3c58>
   15b64:	cmp	r6, r0
   15b68:	mov	r5, r0
   15b6c:	blt	15bdc <close_stdout@@Base+0x33b0>
   15b70:	mvn	r0, #-2147483648	; 0x80000000
   15b74:	mov	r1, r8
   15b78:	bl	16484 <close_stdout@@Base+0x3c58>
   15b7c:	cmp	r6, r0
   15b80:	bgt	15bec <close_stdout@@Base+0x33c0>
   15b84:	mul	r3, r6, r8
   15b88:	mov	r2, #0
   15b8c:	cmp	r3, r5
   15b90:	movlt	r6, #-2147483648	; 0x80000000
   15b94:	movlt	r5, #1
   15b98:	blt	15bb0 <close_stdout@@Base+0x3384>
   15b9c:	cmp	r0, r3
   15ba0:	mvnlt	r6, #-2147483648	; 0x80000000
   15ba4:	movlt	r5, #1
   15ba8:	mulge	r6, r3, r8
   15bac:	movge	r5, #0
   15bb0:	orr	r5, r5, r2
   15bb4:	b	1583c <close_stdout@@Base+0x3010>
   15bb8:	ldrb	sl, [r7, #2]
   15bbc:	mov	r8, #1024	; 0x400
   15bc0:	cmp	sl, #66	; 0x42
   15bc4:	moveq	sl, #3
   15bc8:	movne	sl, #1
   15bcc:	b	15700 <close_stdout@@Base+0x2ed4>
   15bd0:	mov	r6, #-2147483648	; 0x80000000
   15bd4:	mov	r5, #1
   15bd8:	b	1583c <close_stdout@@Base+0x3010>
   15bdc:	mov	r2, #1
   15be0:	mov	r6, #-2147483648	; 0x80000000
   15be4:	mov	r5, r2
   15be8:	b	15bb0 <close_stdout@@Base+0x3384>
   15bec:	mov	r2, #1
   15bf0:	mvn	r3, #-2147483648	; 0x80000000
   15bf4:	b	15b9c <close_stdout@@Base+0x3370>
   15bf8:	bl	111b8 <__stack_chk_fail@plt>
   15bfc:	ldr	r0, [pc, #32]	; 15c24 <close_stdout@@Base+0x33f8>
   15c00:	mov	r2, #96	; 0x60
   15c04:	ldr	r1, [pc, #28]	; 15c28 <close_stdout@@Base+0x33fc>
   15c08:	ldr	r3, [pc, #28]	; 15c2c <close_stdout@@Base+0x3400>
   15c0c:	add	r0, pc, r0
   15c10:	add	r1, pc, r1
   15c14:	add	r3, pc, r3
   15c18:	bl	113e0 <__assert_fail@plt>
   15c1c:	andeq	r3, r1, r4, lsl #20
   15c20:	andeq	r0, r0, ip, lsl #2
   15c24:	andeq	r2, r0, r8, lsr r3
   15c28:	andeq	r2, r0, ip, asr r3
   15c2c:	andeq	r2, r0, r8, ror #6
   15c30:	push	{r4, r5, r6, lr}
   15c34:	sub	sp, sp, #8
   15c38:	mov	r4, r0
   15c3c:	bl	11314 <fileno@plt>
   15c40:	cmp	r0, #0
   15c44:	mov	r0, r4
   15c48:	blt	15cc4 <close_stdout@@Base+0x3498>
   15c4c:	bl	1126c <__freading@plt>
   15c50:	cmp	r0, #0
   15c54:	bne	15c90 <close_stdout@@Base+0x3464>
   15c58:	mov	r0, r4
   15c5c:	bl	15cd0 <close_stdout@@Base+0x34a4>
   15c60:	cmp	r0, #0
   15c64:	beq	15cc0 <close_stdout@@Base+0x3494>
   15c68:	bl	112d8 <__errno_location@plt>
   15c6c:	ldr	r6, [r0]
   15c70:	mov	r5, r0
   15c74:	mov	r0, r4
   15c78:	bl	1132c <fclose@plt>
   15c7c:	cmp	r6, #0
   15c80:	mvnne	r0, #0
   15c84:	strne	r6, [r5]
   15c88:	add	sp, sp, #8
   15c8c:	pop	{r4, r5, r6, pc}
   15c90:	mov	r0, r4
   15c94:	bl	11314 <fileno@plt>
   15c98:	mov	r1, #1
   15c9c:	mov	r2, #0
   15ca0:	mov	r3, #0
   15ca4:	str	r1, [sp]
   15ca8:	bl	111f4 <lseek64@plt>
   15cac:	mvn	r2, #0
   15cb0:	mvn	r3, #0
   15cb4:	cmp	r1, r3
   15cb8:	cmpeq	r0, r2
   15cbc:	bne	15c58 <close_stdout@@Base+0x342c>
   15cc0:	mov	r0, r4
   15cc4:	add	sp, sp, #8
   15cc8:	pop	{r4, r5, r6, lr}
   15ccc:	b	1132c <fclose@plt>
   15cd0:	push	{r4, lr}
   15cd4:	subs	r4, r0, #0
   15cd8:	sub	sp, sp, #8
   15cdc:	beq	15cec <close_stdout@@Base+0x34c0>
   15ce0:	bl	1126c <__freading@plt>
   15ce4:	cmp	r0, #0
   15ce8:	bne	15cfc <close_stdout@@Base+0x34d0>
   15cec:	mov	r0, r4
   15cf0:	add	sp, sp, #8
   15cf4:	pop	{r4, lr}
   15cf8:	b	1114c <fflush@plt>
   15cfc:	ldr	r3, [r4]
   15d00:	tst	r3, #256	; 0x100
   15d04:	beq	15cec <close_stdout@@Base+0x34c0>
   15d08:	mov	r3, #1
   15d0c:	mov	r0, r4
   15d10:	str	r3, [sp]
   15d14:	mov	r2, #0
   15d18:	mov	r3, #0
   15d1c:	bl	15d30 <close_stdout@@Base+0x3504>
   15d20:	mov	r0, r4
   15d24:	add	sp, sp, #8
   15d28:	pop	{r4, lr}
   15d2c:	b	1114c <fflush@plt>
   15d30:	push	{r4, r5, r6, r7, lr}
   15d34:	sub	sp, sp, #20
   15d38:	ldmib	r0, {r1, ip}
   15d3c:	mov	r6, r0
   15d40:	ldr	r4, [sp, #40]	; 0x28
   15d44:	cmp	ip, r1
   15d48:	beq	15d60 <close_stdout@@Base+0x3534>
   15d4c:	str	r4, [sp, #40]	; 0x28
   15d50:	mov	r0, r6
   15d54:	add	sp, sp, #20
   15d58:	pop	{r4, r5, r6, r7, lr}
   15d5c:	b	11338 <fseeko64@plt>
   15d60:	ldr	ip, [r0, #20]
   15d64:	ldr	r1, [r0, #16]
   15d68:	cmp	ip, r1
   15d6c:	bne	15d4c <close_stdout@@Base+0x3520>
   15d70:	ldr	r7, [r0, #36]	; 0x24
   15d74:	cmp	r7, #0
   15d78:	bne	15d4c <close_stdout@@Base+0x3520>
   15d7c:	str	r2, [sp, #12]
   15d80:	mvn	r5, #0
   15d84:	str	r3, [sp, #8]
   15d88:	bl	11314 <fileno@plt>
   15d8c:	str	r4, [sp]
   15d90:	mvn	r4, #0
   15d94:	ldr	r2, [sp, #12]
   15d98:	ldr	r3, [sp, #8]
   15d9c:	bl	111f4 <lseek64@plt>
   15da0:	mov	r2, r0
   15da4:	mov	r3, r1
   15da8:	cmp	r3, r5
   15dac:	cmpeq	r2, r4
   15db0:	beq	15dd0 <close_stdout@@Base+0x35a4>
   15db4:	ldr	r1, [r6]
   15db8:	mov	r0, r7
   15dbc:	strd	r2, [r6, #80]	; 0x50
   15dc0:	bic	r3, r1, #16
   15dc4:	str	r3, [r6]
   15dc8:	add	sp, sp, #20
   15dcc:	pop	{r4, r5, r6, r7, pc}
   15dd0:	mvn	r0, #0
   15dd4:	b	15dc8 <close_stdout@@Base+0x359c>
   15dd8:	push	{r4, r5, r6, lr}
   15ddc:	mov	r4, r0
   15de0:	bl	11218 <__fpending@plt>
   15de4:	mov	r6, r0
   15de8:	mov	r0, r4
   15dec:	ldr	r4, [r4]
   15df0:	bl	15c30 <close_stdout@@Base+0x3404>
   15df4:	and	r4, r4, #32
   15df8:	adds	r5, r0, #0
   15dfc:	movne	r5, #1
   15e00:	cmp	r4, #0
   15e04:	bne	15e24 <close_stdout@@Base+0x35f8>
   15e08:	cmp	r5, #0
   15e0c:	beq	15e1c <close_stdout@@Base+0x35f0>
   15e10:	cmp	r6, #0
   15e14:	beq	15e40 <close_stdout@@Base+0x3614>
   15e18:	mvn	r4, #0
   15e1c:	mov	r0, r4
   15e20:	pop	{r4, r5, r6, pc}
   15e24:	cmp	r5, #0
   15e28:	bne	15e18 <close_stdout@@Base+0x35ec>
   15e2c:	bl	112d8 <__errno_location@plt>
   15e30:	mvn	r4, #0
   15e34:	str	r5, [r0]
   15e38:	mov	r0, r4
   15e3c:	pop	{r4, r5, r6, pc}
   15e40:	bl	112d8 <__errno_location@plt>
   15e44:	ldr	r4, [r0]
   15e48:	subs	r4, r4, #9
   15e4c:	mvnne	r4, #0
   15e50:	mov	r0, r4
   15e54:	pop	{r4, r5, r6, pc}
   15e58:	ldr	r3, [pc, #984]	; 16238 <close_stdout@@Base+0x3a0c>
   15e5c:	mov	r0, #14
   15e60:	ldr	r2, [pc, #980]	; 1623c <close_stdout@@Base+0x3a10>
   15e64:	add	r3, pc, r3
   15e68:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15e6c:	sub	sp, sp, #132	; 0x84
   15e70:	ldr	r6, [r3, r2]
   15e74:	ldr	r3, [r6]
   15e78:	str	r3, [sp, #124]	; 0x7c
   15e7c:	bl	11374 <nl_langinfo@plt>
   15e80:	subs	r5, r0, #0
   15e84:	beq	15f38 <close_stdout@@Base+0x370c>
   15e88:	ldr	r3, [pc, #944]	; 16240 <close_stdout@@Base+0x3a14>
   15e8c:	ldr	r4, [pc, r3]
   15e90:	cmp	r4, #0
   15e94:	beq	15f44 <close_stdout@@Base+0x3718>
   15e98:	ldrb	r7, [r4]
   15e9c:	cmp	r7, #0
   15ea0:	bne	15ed4 <close_stdout@@Base+0x36a8>
   15ea4:	b	15f0c <close_stdout@@Base+0x36e0>
   15ea8:	mov	r0, r4
   15eac:	bl	112a8 <strlen@plt>
   15eb0:	add	r0, r0, #1
   15eb4:	add	r7, r4, r0
   15eb8:	mov	r0, r7
   15ebc:	bl	112a8 <strlen@plt>
   15ec0:	add	r0, r0, #1
   15ec4:	add	r4, r7, r0
   15ec8:	ldrb	r7, [r7, r0]
   15ecc:	cmp	r7, #0
   15ed0:	beq	15f0c <close_stdout@@Base+0x36e0>
   15ed4:	mov	r0, r5
   15ed8:	mov	r1, r4
   15edc:	bl	11128 <strcmp@plt>
   15ee0:	cmp	r0, #0
   15ee4:	beq	15efc <close_stdout@@Base+0x36d0>
   15ee8:	cmp	r7, #42	; 0x2a
   15eec:	bne	15ea8 <close_stdout@@Base+0x367c>
   15ef0:	ldrb	r3, [r4, #1]
   15ef4:	cmp	r3, #0
   15ef8:	bne	15ea8 <close_stdout@@Base+0x367c>
   15efc:	mov	r0, r4
   15f00:	bl	112a8 <strlen@plt>
   15f04:	add	r0, r0, #1
   15f08:	add	r5, r4, r0
   15f0c:	ldrb	r3, [r5]
   15f10:	cmp	r3, #0
   15f14:	ldreq	r5, [pc, #808]	; 16244 <close_stdout@@Base+0x3a18>
   15f18:	addeq	r5, pc, r5
   15f1c:	ldr	r2, [sp, #124]	; 0x7c
   15f20:	mov	r0, r5
   15f24:	ldr	r3, [r6]
   15f28:	cmp	r2, r3
   15f2c:	bne	1620c <close_stdout@@Base+0x39e0>
   15f30:	add	sp, sp, #132	; 0x84
   15f34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   15f38:	ldr	r5, [pc, #776]	; 16248 <close_stdout@@Base+0x3a1c>
   15f3c:	add	r5, pc, r5
   15f40:	b	15e88 <close_stdout@@Base+0x365c>
   15f44:	ldr	r0, [pc, #768]	; 1624c <close_stdout@@Base+0x3a20>
   15f48:	add	r0, pc, r0
   15f4c:	bl	11248 <getenv@plt>
   15f50:	subs	r8, r0, #0
   15f54:	beq	161e4 <close_stdout@@Base+0x39b8>
   15f58:	ldrb	r3, [r8]
   15f5c:	cmp	r3, #0
   15f60:	beq	16178 <close_stdout@@Base+0x394c>
   15f64:	bl	112a8 <strlen@plt>
   15f68:	subs	sl, r0, #0
   15f6c:	subne	r3, sl, #1
   15f70:	bne	16188 <close_stdout@@Base+0x395c>
   15f74:	mov	r9, #0
   15f78:	mov	fp, r9
   15f7c:	add	r9, sl, r9
   15f80:	add	r0, r9, #14
   15f84:	bl	11254 <malloc@plt>
   15f88:	subs	r7, r0, #0
   15f8c:	beq	161d8 <close_stdout@@Base+0x39ac>
   15f90:	mov	r1, r8
   15f94:	mov	r2, sl
   15f98:	bl	11170 <memcpy@plt>
   15f9c:	cmp	fp, #0
   15fa0:	add	ip, r7, r9
   15fa4:	movne	r3, #47	; 0x2f
   15fa8:	strbne	r3, [r7, sl]
   15fac:	ldr	r3, [pc, #668]	; 16250 <close_stdout@@Base+0x3a24>
   15fb0:	add	r3, pc, r3
   15fb4:	ldm	r3!, {r0, r1, r2}
   15fb8:	ldrh	r3, [r3]
   15fbc:	str	r0, [r7, r9]
   15fc0:	mov	r0, r7
   15fc4:	str	r1, [ip, #4]
   15fc8:	mov	r1, #32768	; 0x8000
   15fcc:	strh	r3, [ip, #12]
   15fd0:	str	r2, [ip, #8]
   15fd4:	bl	1123c <open64@plt>
   15fd8:	subs	r8, r0, #0
   15fdc:	blt	161a0 <close_stdout@@Base+0x3974>
   15fe0:	ldr	r1, [pc, #620]	; 16254 <close_stdout@@Base+0x3a28>
   15fe4:	add	r1, pc, r1
   15fe8:	bl	110f8 <fdopen@plt>
   15fec:	subs	fp, r0, #0
   15ff0:	beq	161f8 <close_stdout@@Base+0x39cc>
   15ff4:	ldr	r0, [pc, #604]	; 16258 <close_stdout@@Base+0x3a2c>
   15ff8:	add	sl, sp, #20
   15ffc:	add	r9, sp, #72	; 0x48
   16000:	mov	r8, #0
   16004:	add	r0, pc, r0
   16008:	str	r0, [sp, #12]
   1600c:	ldr	r3, [fp, #4]
   16010:	ldr	r2, [fp, #8]
   16014:	cmp	r3, r2
   16018:	bcs	16104 <close_stdout@@Base+0x38d8>
   1601c:	add	r2, r3, #1
   16020:	str	r2, [fp, #4]
   16024:	ldrb	r0, [r3]
   16028:	cmp	r0, #32
   1602c:	beq	1600c <close_stdout@@Base+0x37e0>
   16030:	sub	r3, r0, #9
   16034:	cmp	r3, #1
   16038:	bls	1600c <close_stdout@@Base+0x37e0>
   1603c:	cmp	r0, #35	; 0x23
   16040:	beq	16118 <close_stdout@@Base+0x38ec>
   16044:	mov	r1, fp
   16048:	bl	112cc <ungetc@plt>
   1604c:	mov	r0, fp
   16050:	ldr	r1, [sp, #12]
   16054:	mov	r2, sl
   16058:	mov	r3, r9
   1605c:	bl	112fc <fscanf@plt>
   16060:	cmp	r0, #1
   16064:	ble	16148 <close_stdout@@Base+0x391c>
   16068:	mov	r0, sl
   1606c:	bl	112a8 <strlen@plt>
   16070:	str	r0, [sp, #8]
   16074:	mov	r0, r9
   16078:	bl	112a8 <strlen@plt>
   1607c:	cmp	r8, #0
   16080:	mov	r2, r0
   16084:	bne	161ac <close_stdout@@Base+0x3980>
   16088:	ldr	r3, [sp, #8]
   1608c:	str	r2, [sp]
   16090:	add	r8, r0, r3
   16094:	add	r0, r8, #3
   16098:	add	r8, r8, #2
   1609c:	bl	11254 <malloc@plt>
   160a0:	ldr	r2, [sp]
   160a4:	mov	r3, r0
   160a8:	cmp	r3, #0
   160ac:	beq	16210 <close_stdout@@Base+0x39e4>
   160b0:	ldr	r0, [sp, #8]
   160b4:	movw	r1, #65534	; 0xfffe
   160b8:	movt	r1, #65535	; 0xffff
   160bc:	rsb	r2, r2, r8
   160c0:	rsb	r1, r0, r1
   160c4:	stm	sp, {r2, r3}
   160c8:	add	r0, r1, r2
   160cc:	mov	r1, sl
   160d0:	add	r0, r3, r0
   160d4:	mov	r4, r3
   160d8:	bl	1120c <strcpy@plt>
   160dc:	ldr	r2, [sp]
   160e0:	ldr	r3, [sp, #4]
   160e4:	mov	r1, r9
   160e8:	sub	r0, r2, #1
   160ec:	add	r0, r3, r0
   160f0:	bl	1120c <strcpy@plt>
   160f4:	ldr	r3, [fp, #4]
   160f8:	ldr	r2, [fp, #8]
   160fc:	cmp	r3, r2
   16100:	bcc	1601c <close_stdout@@Base+0x37f0>
   16104:	mov	r0, fp
   16108:	bl	11344 <__uflow@plt>
   1610c:	cmn	r0, #1
   16110:	beq	16148 <close_stdout@@Base+0x391c>
   16114:	b	16028 <close_stdout@@Base+0x37fc>
   16118:	ldr	r3, [fp, #4]
   1611c:	ldr	r2, [fp, #8]
   16120:	cmp	r3, r2
   16124:	bcs	1622c <close_stdout@@Base+0x3a00>
   16128:	add	r2, r3, #1
   1612c:	str	r2, [fp, #4]
   16130:	ldrb	r0, [r3]
   16134:	cmp	r0, #10
   16138:	cmnne	r0, #1
   1613c:	bne	16118 <close_stdout@@Base+0x38ec>
   16140:	cmn	r0, #1
   16144:	bne	1600c <close_stdout@@Base+0x37e0>
   16148:	mov	r0, fp
   1614c:	bl	15c30 <close_stdout@@Base+0x3404>
   16150:	cmp	r8, #0
   16154:	beq	161a0 <close_stdout@@Base+0x3974>
   16158:	mov	r3, #0
   1615c:	strb	r3, [r4, r8]
   16160:	mov	r0, r7
   16164:	bl	11158 <free@plt>
   16168:	ldr	r3, [pc, #236]	; 1625c <close_stdout@@Base+0x3a30>
   1616c:	add	r3, pc, r3
   16170:	str	r4, [r3]
   16174:	b	15e98 <close_stdout@@Base+0x366c>
   16178:	ldr	r8, [pc, #224]	; 16260 <close_stdout@@Base+0x3a34>
   1617c:	mov	r3, #7
   16180:	mov	sl, #8
   16184:	add	r8, pc, r8
   16188:	ldrb	r3, [r8, r3]
   1618c:	cmp	r3, #47	; 0x2f
   16190:	movne	r9, #1
   16194:	movne	fp, r9
   16198:	bne	15f7c <close_stdout@@Base+0x3750>
   1619c:	b	15f74 <close_stdout@@Base+0x3748>
   161a0:	ldr	r4, [pc, #188]	; 16264 <close_stdout@@Base+0x3a38>
   161a4:	add	r4, pc, r4
   161a8:	b	16160 <close_stdout@@Base+0x3934>
   161ac:	ldr	r0, [sp, #8]
   161b0:	str	r2, [sp]
   161b4:	add	r3, r0, r2
   161b8:	mov	r0, r4
   161bc:	add	r8, r3, r8
   161c0:	add	r1, r8, #3
   161c4:	add	r8, r8, #2
   161c8:	bl	111c4 <realloc@plt>
   161cc:	ldr	r2, [sp]
   161d0:	mov	r3, r0
   161d4:	b	160a8 <close_stdout@@Base+0x387c>
   161d8:	ldr	r4, [pc, #136]	; 16268 <close_stdout@@Base+0x3a3c>
   161dc:	add	r4, pc, r4
   161e0:	b	16168 <close_stdout@@Base+0x393c>
   161e4:	ldr	r8, [pc, #128]	; 1626c <close_stdout@@Base+0x3a40>
   161e8:	mov	r3, #7
   161ec:	mov	sl, #8
   161f0:	add	r8, pc, r8
   161f4:	b	16188 <close_stdout@@Base+0x395c>
   161f8:	ldr	r4, [pc, #112]	; 16270 <close_stdout@@Base+0x3a44>
   161fc:	mov	r0, r8
   16200:	add	r4, pc, r4
   16204:	bl	113d4 <close@plt>
   16208:	b	16160 <close_stdout@@Base+0x3934>
   1620c:	bl	111b8 <__stack_chk_fail@plt>
   16210:	mov	r0, r4
   16214:	ldr	r4, [pc, #88]	; 16274 <close_stdout@@Base+0x3a48>
   16218:	bl	11158 <free@plt>
   1621c:	mov	r0, fp
   16220:	add	r4, pc, r4
   16224:	bl	15c30 <close_stdout@@Base+0x3404>
   16228:	b	16160 <close_stdout@@Base+0x3934>
   1622c:	mov	r0, fp
   16230:	bl	11344 <__uflow@plt>
   16234:	b	16134 <close_stdout@@Base+0x3908>
   16238:	muleq	r1, r4, r1
   1623c:	andeq	r0, r0, ip, lsl #2
   16240:	andeq	r3, r1, ip, lsr r8
   16244:	andeq	r2, r0, r8, ror r0
   16248:	andeq	r1, r0, r0, lsr #19
   1624c:	andeq	r2, r0, r0, asr r0
   16250:	strdeq	r1, [r0], -r8
   16254:	andeq	r1, r0, r4, lsr fp
   16258:			; <UNDEFINED> instruction: 0x00001fb4
   1625c:	andeq	r3, r1, ip, asr r5
   16260:	andeq	r1, r0, r0, lsl #28
   16264:	andeq	r1, r0, r8, lsr r7
   16268:	andeq	r1, r0, r0, lsl #14
   1626c:	muleq	r0, r4, sp
   16270:	ldrdeq	r1, [r0], -ip
   16274:			; <UNDEFINED> instruction: 0x000016bc
   16278:	subs	r2, r1, #1
   1627c:	bxeq	lr
   16280:	bcc	16458 <close_stdout@@Base+0x3c2c>
   16284:	cmp	r0, r1
   16288:	bls	1643c <close_stdout@@Base+0x3c10>
   1628c:	tst	r1, r2
   16290:	beq	16448 <close_stdout@@Base+0x3c1c>
   16294:	clz	r3, r0
   16298:	clz	r2, r1
   1629c:	sub	r3, r2, r3
   162a0:	rsbs	r3, r3, #31
   162a4:	addne	r3, r3, r3, lsl #1
   162a8:	mov	r2, #0
   162ac:	addne	pc, pc, r3, lsl #2
   162b0:	nop	{0}
   162b4:	cmp	r0, r1, lsl #31
   162b8:	adc	r2, r2, r2
   162bc:	subcs	r0, r0, r1, lsl #31
   162c0:	cmp	r0, r1, lsl #30
   162c4:	adc	r2, r2, r2
   162c8:	subcs	r0, r0, r1, lsl #30
   162cc:	cmp	r0, r1, lsl #29
   162d0:	adc	r2, r2, r2
   162d4:	subcs	r0, r0, r1, lsl #29
   162d8:	cmp	r0, r1, lsl #28
   162dc:	adc	r2, r2, r2
   162e0:	subcs	r0, r0, r1, lsl #28
   162e4:	cmp	r0, r1, lsl #27
   162e8:	adc	r2, r2, r2
   162ec:	subcs	r0, r0, r1, lsl #27
   162f0:	cmp	r0, r1, lsl #26
   162f4:	adc	r2, r2, r2
   162f8:	subcs	r0, r0, r1, lsl #26
   162fc:	cmp	r0, r1, lsl #25
   16300:	adc	r2, r2, r2
   16304:	subcs	r0, r0, r1, lsl #25
   16308:	cmp	r0, r1, lsl #24
   1630c:	adc	r2, r2, r2
   16310:	subcs	r0, r0, r1, lsl #24
   16314:	cmp	r0, r1, lsl #23
   16318:	adc	r2, r2, r2
   1631c:	subcs	r0, r0, r1, lsl #23
   16320:	cmp	r0, r1, lsl #22
   16324:	adc	r2, r2, r2
   16328:	subcs	r0, r0, r1, lsl #22
   1632c:	cmp	r0, r1, lsl #21
   16330:	adc	r2, r2, r2
   16334:	subcs	r0, r0, r1, lsl #21
   16338:	cmp	r0, r1, lsl #20
   1633c:	adc	r2, r2, r2
   16340:	subcs	r0, r0, r1, lsl #20
   16344:	cmp	r0, r1, lsl #19
   16348:	adc	r2, r2, r2
   1634c:	subcs	r0, r0, r1, lsl #19
   16350:	cmp	r0, r1, lsl #18
   16354:	adc	r2, r2, r2
   16358:	subcs	r0, r0, r1, lsl #18
   1635c:	cmp	r0, r1, lsl #17
   16360:	adc	r2, r2, r2
   16364:	subcs	r0, r0, r1, lsl #17
   16368:	cmp	r0, r1, lsl #16
   1636c:	adc	r2, r2, r2
   16370:	subcs	r0, r0, r1, lsl #16
   16374:	cmp	r0, r1, lsl #15
   16378:	adc	r2, r2, r2
   1637c:	subcs	r0, r0, r1, lsl #15
   16380:	cmp	r0, r1, lsl #14
   16384:	adc	r2, r2, r2
   16388:	subcs	r0, r0, r1, lsl #14
   1638c:	cmp	r0, r1, lsl #13
   16390:	adc	r2, r2, r2
   16394:	subcs	r0, r0, r1, lsl #13
   16398:	cmp	r0, r1, lsl #12
   1639c:	adc	r2, r2, r2
   163a0:	subcs	r0, r0, r1, lsl #12
   163a4:	cmp	r0, r1, lsl #11
   163a8:	adc	r2, r2, r2
   163ac:	subcs	r0, r0, r1, lsl #11
   163b0:	cmp	r0, r1, lsl #10
   163b4:	adc	r2, r2, r2
   163b8:	subcs	r0, r0, r1, lsl #10
   163bc:	cmp	r0, r1, lsl #9
   163c0:	adc	r2, r2, r2
   163c4:	subcs	r0, r0, r1, lsl #9
   163c8:	cmp	r0, r1, lsl #8
   163cc:	adc	r2, r2, r2
   163d0:	subcs	r0, r0, r1, lsl #8
   163d4:	cmp	r0, r1, lsl #7
   163d8:	adc	r2, r2, r2
   163dc:	subcs	r0, r0, r1, lsl #7
   163e0:	cmp	r0, r1, lsl #6
   163e4:	adc	r2, r2, r2
   163e8:	subcs	r0, r0, r1, lsl #6
   163ec:	cmp	r0, r1, lsl #5
   163f0:	adc	r2, r2, r2
   163f4:	subcs	r0, r0, r1, lsl #5
   163f8:	cmp	r0, r1, lsl #4
   163fc:	adc	r2, r2, r2
   16400:	subcs	r0, r0, r1, lsl #4
   16404:	cmp	r0, r1, lsl #3
   16408:	adc	r2, r2, r2
   1640c:	subcs	r0, r0, r1, lsl #3
   16410:	cmp	r0, r1, lsl #2
   16414:	adc	r2, r2, r2
   16418:	subcs	r0, r0, r1, lsl #2
   1641c:	cmp	r0, r1, lsl #1
   16420:	adc	r2, r2, r2
   16424:	subcs	r0, r0, r1, lsl #1
   16428:	cmp	r0, r1
   1642c:	adc	r2, r2, r2
   16430:	subcs	r0, r0, r1
   16434:	mov	r0, r2
   16438:	bx	lr
   1643c:	moveq	r0, #1
   16440:	movne	r0, #0
   16444:	bx	lr
   16448:	clz	r2, r1
   1644c:	rsb	r2, r2, #31
   16450:	lsr	r0, r0, r2
   16454:	bx	lr
   16458:	cmp	r0, #0
   1645c:	mvnne	r0, #0
   16460:	b	1670c <close_stdout@@Base+0x3ee0>
   16464:	cmp	r1, #0
   16468:	beq	16458 <close_stdout@@Base+0x3c2c>
   1646c:	push	{r0, r1, lr}
   16470:	bl	16278 <close_stdout@@Base+0x3a4c>
   16474:	pop	{r1, r2, lr}
   16478:	mul	r3, r2, r0
   1647c:	sub	r1, r1, r3
   16480:	bx	lr
   16484:	cmp	r1, #0
   16488:	beq	16694 <close_stdout@@Base+0x3e68>
   1648c:	eor	ip, r0, r1
   16490:	rsbmi	r1, r1, #0
   16494:	subs	r2, r1, #1
   16498:	beq	16660 <close_stdout@@Base+0x3e34>
   1649c:	movs	r3, r0
   164a0:	rsbmi	r3, r0, #0
   164a4:	cmp	r3, r1
   164a8:	bls	1666c <close_stdout@@Base+0x3e40>
   164ac:	tst	r1, r2
   164b0:	beq	1667c <close_stdout@@Base+0x3e50>
   164b4:	clz	r2, r3
   164b8:	clz	r0, r1
   164bc:	sub	r2, r0, r2
   164c0:	rsbs	r2, r2, #31
   164c4:	addne	r2, r2, r2, lsl #1
   164c8:	mov	r0, #0
   164cc:	addne	pc, pc, r2, lsl #2
   164d0:	nop	{0}
   164d4:	cmp	r3, r1, lsl #31
   164d8:	adc	r0, r0, r0
   164dc:	subcs	r3, r3, r1, lsl #31
   164e0:	cmp	r3, r1, lsl #30
   164e4:	adc	r0, r0, r0
   164e8:	subcs	r3, r3, r1, lsl #30
   164ec:	cmp	r3, r1, lsl #29
   164f0:	adc	r0, r0, r0
   164f4:	subcs	r3, r3, r1, lsl #29
   164f8:	cmp	r3, r1, lsl #28
   164fc:	adc	r0, r0, r0
   16500:	subcs	r3, r3, r1, lsl #28
   16504:	cmp	r3, r1, lsl #27
   16508:	adc	r0, r0, r0
   1650c:	subcs	r3, r3, r1, lsl #27
   16510:	cmp	r3, r1, lsl #26
   16514:	adc	r0, r0, r0
   16518:	subcs	r3, r3, r1, lsl #26
   1651c:	cmp	r3, r1, lsl #25
   16520:	adc	r0, r0, r0
   16524:	subcs	r3, r3, r1, lsl #25
   16528:	cmp	r3, r1, lsl #24
   1652c:	adc	r0, r0, r0
   16530:	subcs	r3, r3, r1, lsl #24
   16534:	cmp	r3, r1, lsl #23
   16538:	adc	r0, r0, r0
   1653c:	subcs	r3, r3, r1, lsl #23
   16540:	cmp	r3, r1, lsl #22
   16544:	adc	r0, r0, r0
   16548:	subcs	r3, r3, r1, lsl #22
   1654c:	cmp	r3, r1, lsl #21
   16550:	adc	r0, r0, r0
   16554:	subcs	r3, r3, r1, lsl #21
   16558:	cmp	r3, r1, lsl #20
   1655c:	adc	r0, r0, r0
   16560:	subcs	r3, r3, r1, lsl #20
   16564:	cmp	r3, r1, lsl #19
   16568:	adc	r0, r0, r0
   1656c:	subcs	r3, r3, r1, lsl #19
   16570:	cmp	r3, r1, lsl #18
   16574:	adc	r0, r0, r0
   16578:	subcs	r3, r3, r1, lsl #18
   1657c:	cmp	r3, r1, lsl #17
   16580:	adc	r0, r0, r0
   16584:	subcs	r3, r3, r1, lsl #17
   16588:	cmp	r3, r1, lsl #16
   1658c:	adc	r0, r0, r0
   16590:	subcs	r3, r3, r1, lsl #16
   16594:	cmp	r3, r1, lsl #15
   16598:	adc	r0, r0, r0
   1659c:	subcs	r3, r3, r1, lsl #15
   165a0:	cmp	r3, r1, lsl #14
   165a4:	adc	r0, r0, r0
   165a8:	subcs	r3, r3, r1, lsl #14
   165ac:	cmp	r3, r1, lsl #13
   165b0:	adc	r0, r0, r0
   165b4:	subcs	r3, r3, r1, lsl #13
   165b8:	cmp	r3, r1, lsl #12
   165bc:	adc	r0, r0, r0
   165c0:	subcs	r3, r3, r1, lsl #12
   165c4:	cmp	r3, r1, lsl #11
   165c8:	adc	r0, r0, r0
   165cc:	subcs	r3, r3, r1, lsl #11
   165d0:	cmp	r3, r1, lsl #10
   165d4:	adc	r0, r0, r0
   165d8:	subcs	r3, r3, r1, lsl #10
   165dc:	cmp	r3, r1, lsl #9
   165e0:	adc	r0, r0, r0
   165e4:	subcs	r3, r3, r1, lsl #9
   165e8:	cmp	r3, r1, lsl #8
   165ec:	adc	r0, r0, r0
   165f0:	subcs	r3, r3, r1, lsl #8
   165f4:	cmp	r3, r1, lsl #7
   165f8:	adc	r0, r0, r0
   165fc:	subcs	r3, r3, r1, lsl #7
   16600:	cmp	r3, r1, lsl #6
   16604:	adc	r0, r0, r0
   16608:	subcs	r3, r3, r1, lsl #6
   1660c:	cmp	r3, r1, lsl #5
   16610:	adc	r0, r0, r0
   16614:	subcs	r3, r3, r1, lsl #5
   16618:	cmp	r3, r1, lsl #4
   1661c:	adc	r0, r0, r0
   16620:	subcs	r3, r3, r1, lsl #4
   16624:	cmp	r3, r1, lsl #3
   16628:	adc	r0, r0, r0
   1662c:	subcs	r3, r3, r1, lsl #3
   16630:	cmp	r3, r1, lsl #2
   16634:	adc	r0, r0, r0
   16638:	subcs	r3, r3, r1, lsl #2
   1663c:	cmp	r3, r1, lsl #1
   16640:	adc	r0, r0, r0
   16644:	subcs	r3, r3, r1, lsl #1
   16648:	cmp	r3, r1
   1664c:	adc	r0, r0, r0
   16650:	subcs	r3, r3, r1
   16654:	cmp	ip, #0
   16658:	rsbmi	r0, r0, #0
   1665c:	bx	lr
   16660:	teq	ip, r0
   16664:	rsbmi	r0, r0, #0
   16668:	bx	lr
   1666c:	movcc	r0, #0
   16670:	asreq	r0, ip, #31
   16674:	orreq	r0, r0, #1
   16678:	bx	lr
   1667c:	clz	r2, r1
   16680:	rsb	r2, r2, #31
   16684:	cmp	ip, #0
   16688:	lsr	r0, r3, r2
   1668c:	rsbmi	r0, r0, #0
   16690:	bx	lr
   16694:	cmp	r0, #0
   16698:	mvngt	r0, #-2147483648	; 0x80000000
   1669c:	movlt	r0, #-2147483648	; 0x80000000
   166a0:	b	1670c <close_stdout@@Base+0x3ee0>
   166a4:	cmp	r1, #0
   166a8:	beq	16694 <close_stdout@@Base+0x3e68>
   166ac:	push	{r0, r1, lr}
   166b0:	bl	1648c <close_stdout@@Base+0x3c60>
   166b4:	pop	{r1, r2, lr}
   166b8:	mul	r3, r2, r0
   166bc:	sub	r1, r1, r3
   166c0:	bx	lr
   166c4:	cmp	r3, #0
   166c8:	cmpeq	r2, #0
   166cc:	bne	166f0 <close_stdout@@Base+0x3ec4>
   166d0:	cmp	r1, #0
   166d4:	movlt	r1, #-2147483648	; 0x80000000
   166d8:	movlt	r0, #0
   166dc:	blt	166ec <close_stdout@@Base+0x3ec0>
   166e0:	cmpeq	r0, #0
   166e4:	mvnne	r1, #-2147483648	; 0x80000000
   166e8:	mvnne	r0, #0
   166ec:	b	1670c <close_stdout@@Base+0x3ee0>
   166f0:	sub	sp, sp, #8
   166f4:	push	{sp, lr}
   166f8:	bl	1671c <close_stdout@@Base+0x3ef0>
   166fc:	ldr	lr, [sp, #4]
   16700:	add	sp, sp, #8
   16704:	pop	{r2, r3}
   16708:	bx	lr
   1670c:	push	{r1, lr}
   16710:	mov	r0, #8
   16714:	bl	1111c <raise@plt>
   16718:	pop	{r1, pc}
   1671c:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   16720:	mov	r8, r2
   16724:	mov	r6, r0
   16728:	mov	r7, r1
   1672c:	mov	sl, r3
   16730:	ldr	r9, [sp, #32]
   16734:	bl	16794 <close_stdout@@Base+0x3f68>
   16738:	umull	r4, r5, r8, r0
   1673c:	mul	r8, r8, r1
   16740:	mla	r2, r0, sl, r8
   16744:	add	r5, r2, r5
   16748:	subs	r4, r6, r4
   1674c:	sbc	r5, r7, r5
   16750:	strd	r4, [r9]
   16754:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   16758:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1675c:	mov	r8, r2
   16760:	mov	r6, r0
   16764:	mov	r7, r1
   16768:	mov	r5, r3
   1676c:	ldr	r9, [sp, #32]
   16770:	bl	16c20 <close_stdout@@Base+0x43f4>
   16774:	mul	r3, r0, r5
   16778:	umull	r4, r5, r0, r8
   1677c:	mla	r8, r8, r1, r3
   16780:	add	r5, r8, r5
   16784:	subs	r4, r6, r4
   16788:	sbc	r5, r7, r5
   1678c:	strd	r4, [r9]
   16790:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   16794:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16798:	rsbs	r4, r0, #0
   1679c:	rsc	r5, r1, #0
   167a0:	cmp	r1, #0
   167a4:	mvn	r6, #0
   167a8:	sub	sp, sp, #12
   167ac:	movge	r4, r0
   167b0:	movge	r5, r1
   167b4:	movge	r6, #0
   167b8:	cmp	r3, #0
   167bc:	blt	169f4 <close_stdout@@Base+0x41c8>
   167c0:	cmp	r3, #0
   167c4:	mov	sl, r4
   167c8:	mov	ip, r5
   167cc:	mov	r0, r2
   167d0:	mov	r1, r3
   167d4:	mov	r8, r2
   167d8:	mov	r7, r4
   167dc:	mov	r9, r5
   167e0:	bne	168d8 <close_stdout@@Base+0x40ac>
   167e4:	cmp	r2, r5
   167e8:	bls	16914 <close_stdout@@Base+0x40e8>
   167ec:	clz	r3, r2
   167f0:	cmp	r3, #0
   167f4:	rsbne	r2, r3, #32
   167f8:	lslne	r8, r0, r3
   167fc:	lsrne	r2, r4, r2
   16800:	lslne	r7, r4, r3
   16804:	orrne	r9, r2, r5, lsl r3
   16808:	lsr	r4, r8, #16
   1680c:	uxth	sl, r8
   16810:	mov	r1, r4
   16814:	mov	r0, r9
   16818:	bl	16278 <close_stdout@@Base+0x3a4c>
   1681c:	mov	r1, r4
   16820:	mov	fp, r0
   16824:	mov	r0, r9
   16828:	bl	16464 <close_stdout@@Base+0x3c38>
   1682c:	mul	r0, sl, fp
   16830:	lsr	r2, r7, #16
   16834:	orr	r1, r2, r1, lsl #16
   16838:	cmp	r0, r1
   1683c:	bls	16860 <close_stdout@@Base+0x4034>
   16840:	adds	r1, r1, r8
   16844:	sub	r3, fp, #1
   16848:	bcs	1685c <close_stdout@@Base+0x4030>
   1684c:	cmp	r0, r1
   16850:	subhi	fp, fp, #2
   16854:	addhi	r1, r1, r8
   16858:	bhi	16860 <close_stdout@@Base+0x4034>
   1685c:	mov	fp, r3
   16860:	rsb	r9, r0, r1
   16864:	mov	r1, r4
   16868:	uxth	r7, r7
   1686c:	mov	r0, r9
   16870:	bl	16278 <close_stdout@@Base+0x3a4c>
   16874:	mov	r1, r4
   16878:	mov	r5, r0
   1687c:	mov	r0, r9
   16880:	bl	16464 <close_stdout@@Base+0x3c38>
   16884:	mul	sl, sl, r5
   16888:	orr	r1, r7, r1, lsl #16
   1688c:	cmp	sl, r1
   16890:	bls	168b0 <close_stdout@@Base+0x4084>
   16894:	adds	r8, r1, r8
   16898:	sub	r3, r5, #1
   1689c:	bcs	168ac <close_stdout@@Base+0x4080>
   168a0:	cmp	sl, r8
   168a4:	subhi	r5, r5, #2
   168a8:	bhi	168b0 <close_stdout@@Base+0x4084>
   168ac:	mov	r5, r3
   168b0:	orr	r3, r5, fp, lsl #16
   168b4:	mov	r4, #0
   168b8:	cmp	r6, #0
   168bc:	mov	r0, r3
   168c0:	mov	r1, r4
   168c4:	beq	168d0 <close_stdout@@Base+0x40a4>
   168c8:	rsbs	r0, r0, #0
   168cc:	rsc	r1, r1, #0
   168d0:	add	sp, sp, #12
   168d4:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   168d8:	cmp	r3, r5
   168dc:	movhi	r4, #0
   168e0:	movhi	r3, r4
   168e4:	bhi	168b8 <close_stdout@@Base+0x408c>
   168e8:	clz	r5, r1
   168ec:	cmp	r5, #0
   168f0:	bne	16ae0 <close_stdout@@Base+0x42b4>
   168f4:	cmp	r1, ip
   168f8:	cmpcs	r2, sl
   168fc:	movhi	r4, #0
   16900:	movls	r4, #1
   16904:	movls	r3, #1
   16908:	movls	r4, r5
   1690c:	movhi	r3, r4
   16910:	b	168b8 <close_stdout@@Base+0x408c>
   16914:	cmp	r2, #0
   16918:	bne	1692c <close_stdout@@Base+0x4100>
   1691c:	mov	r1, r2
   16920:	mov	r0, #1
   16924:	bl	16278 <close_stdout@@Base+0x3a4c>
   16928:	mov	r8, r0
   1692c:	clz	r3, r8
   16930:	cmp	r3, #0
   16934:	bne	16a04 <close_stdout@@Base+0x41d8>
   16938:	rsb	r9, r8, r9
   1693c:	lsr	r5, r8, #16
   16940:	uxth	sl, r8
   16944:	mov	r4, #1
   16948:	mov	r1, r5
   1694c:	mov	r0, r9
   16950:	bl	16278 <close_stdout@@Base+0x3a4c>
   16954:	mov	r1, r5
   16958:	mov	fp, r0
   1695c:	mov	r0, r9
   16960:	bl	16464 <close_stdout@@Base+0x3c38>
   16964:	mul	r0, sl, fp
   16968:	lsr	r2, r7, #16
   1696c:	orr	r1, r2, r1, lsl #16
   16970:	cmp	r0, r1
   16974:	bls	16994 <close_stdout@@Base+0x4168>
   16978:	adds	r1, r1, r8
   1697c:	sub	r3, fp, #1
   16980:	bcs	16c00 <close_stdout@@Base+0x43d4>
   16984:	cmp	r0, r1
   16988:	subhi	fp, fp, #2
   1698c:	addhi	r1, r1, r8
   16990:	bls	16c00 <close_stdout@@Base+0x43d4>
   16994:	rsb	r2, r0, r1
   16998:	mov	r1, r5
   1699c:	str	r2, [sp]
   169a0:	uxth	r7, r7
   169a4:	mov	r0, r2
   169a8:	bl	16278 <close_stdout@@Base+0x3a4c>
   169ac:	ldr	r2, [sp]
   169b0:	mov	r1, r5
   169b4:	mov	r9, r0
   169b8:	mov	r0, r2
   169bc:	bl	16464 <close_stdout@@Base+0x3c38>
   169c0:	mul	sl, sl, r9
   169c4:	orr	r1, r7, r1, lsl #16
   169c8:	cmp	sl, r1
   169cc:	bls	169ec <close_stdout@@Base+0x41c0>
   169d0:	adds	r8, r1, r8
   169d4:	sub	r3, r9, #1
   169d8:	bcs	169e8 <close_stdout@@Base+0x41bc>
   169dc:	cmp	sl, r8
   169e0:	subhi	r9, r9, #2
   169e4:	bhi	169ec <close_stdout@@Base+0x41c0>
   169e8:	mov	r9, r3
   169ec:	orr	r3, r9, fp, lsl #16
   169f0:	b	168b8 <close_stdout@@Base+0x408c>
   169f4:	mvn	r6, r6
   169f8:	rsbs	r2, r2, #0
   169fc:	rsc	r3, r3, #0
   16a00:	b	167c0 <close_stdout@@Base+0x3f94>
   16a04:	lsl	r8, r8, r3
   16a08:	rsb	fp, r3, #32
   16a0c:	lsr	r4, r9, fp
   16a10:	lsr	fp, r7, fp
   16a14:	lsr	r5, r8, #16
   16a18:	orr	fp, fp, r9, lsl r3
   16a1c:	mov	r0, r4
   16a20:	lsl	r7, r7, r3
   16a24:	mov	r1, r5
   16a28:	uxth	sl, r8
   16a2c:	bl	16278 <close_stdout@@Base+0x3a4c>
   16a30:	mov	r1, r5
   16a34:	mov	r3, r0
   16a38:	mov	r0, r4
   16a3c:	str	r3, [sp]
   16a40:	bl	16464 <close_stdout@@Base+0x3c38>
   16a44:	ldr	r3, [sp]
   16a48:	lsr	r2, fp, #16
   16a4c:	mul	r0, sl, r3
   16a50:	orr	r1, r2, r1, lsl #16
   16a54:	cmp	r0, r1
   16a58:	bls	16a78 <close_stdout@@Base+0x424c>
   16a5c:	adds	r1, r1, r8
   16a60:	sub	r2, r3, #1
   16a64:	bcs	16c18 <close_stdout@@Base+0x43ec>
   16a68:	cmp	r0, r1
   16a6c:	subhi	r3, r3, #2
   16a70:	addhi	r1, r1, r8
   16a74:	bls	16c18 <close_stdout@@Base+0x43ec>
   16a78:	rsb	r9, r0, r1
   16a7c:	mov	r1, r5
   16a80:	str	r3, [sp]
   16a84:	uxth	fp, fp
   16a88:	mov	r0, r9
   16a8c:	bl	16278 <close_stdout@@Base+0x3a4c>
   16a90:	mov	r1, r5
   16a94:	mov	r4, r0
   16a98:	mov	r0, r9
   16a9c:	bl	16464 <close_stdout@@Base+0x3c38>
   16aa0:	mul	r9, sl, r4
   16aa4:	ldr	r3, [sp]
   16aa8:	orr	r1, fp, r1, lsl #16
   16aac:	cmp	r9, r1
   16ab0:	bls	16ad4 <close_stdout@@Base+0x42a8>
   16ab4:	adds	r1, r1, r8
   16ab8:	sub	r2, r4, #1
   16abc:	bcs	16ad0 <close_stdout@@Base+0x42a4>
   16ac0:	cmp	r9, r1
   16ac4:	subhi	r4, r4, #2
   16ac8:	addhi	r1, r1, r8
   16acc:	bhi	16ad4 <close_stdout@@Base+0x42a8>
   16ad0:	mov	r4, r2
   16ad4:	rsb	r9, r9, r1
   16ad8:	orr	r4, r4, r3, lsl #16
   16adc:	b	16948 <close_stdout@@Base+0x411c>
   16ae0:	rsb	sl, r5, #32
   16ae4:	lsl	r3, r2, r5
   16ae8:	lsr	r0, r2, sl
   16aec:	lsr	r2, ip, sl
   16af0:	orr	r4, r0, r1, lsl r5
   16af4:	lsr	sl, r7, sl
   16af8:	mov	r0, r2
   16afc:	orr	sl, sl, ip, lsl r5
   16b00:	lsr	r9, r4, #16
   16b04:	str	r3, [sp, #4]
   16b08:	str	r2, [sp]
   16b0c:	uxth	fp, r4
   16b10:	mov	r1, r9
   16b14:	bl	16278 <close_stdout@@Base+0x3a4c>
   16b18:	ldr	r2, [sp]
   16b1c:	mov	r1, r9
   16b20:	mov	r8, r0
   16b24:	mov	r0, r2
   16b28:	bl	16464 <close_stdout@@Base+0x3c38>
   16b2c:	mul	r0, fp, r8
   16b30:	lsr	r2, sl, #16
   16b34:	orr	r1, r2, r1, lsl #16
   16b38:	cmp	r0, r1
   16b3c:	bls	16b5c <close_stdout@@Base+0x4330>
   16b40:	adds	r1, r1, r4
   16b44:	sub	r2, r8, #1
   16b48:	bcs	16c10 <close_stdout@@Base+0x43e4>
   16b4c:	cmp	r0, r1
   16b50:	subhi	r8, r8, #2
   16b54:	addhi	r1, r1, r4
   16b58:	bls	16c10 <close_stdout@@Base+0x43e4>
   16b5c:	rsb	ip, r0, r1
   16b60:	mov	r1, r9
   16b64:	str	ip, [sp]
   16b68:	mov	r0, ip
   16b6c:	bl	16278 <close_stdout@@Base+0x3a4c>
   16b70:	ldr	ip, [sp]
   16b74:	mov	r1, r9
   16b78:	mov	r2, r0
   16b7c:	mov	r0, ip
   16b80:	str	r2, [sp]
   16b84:	bl	16464 <close_stdout@@Base+0x3c38>
   16b88:	ldr	r2, [sp]
   16b8c:	uxth	ip, sl
   16b90:	mul	fp, fp, r2
   16b94:	orr	ip, ip, r1, lsl #16
   16b98:	cmp	fp, ip
   16b9c:	bls	16bbc <close_stdout@@Base+0x4390>
   16ba0:	adds	ip, ip, r4
   16ba4:	sub	r1, r2, #1
   16ba8:	bcs	16c08 <close_stdout@@Base+0x43dc>
   16bac:	cmp	fp, ip
   16bb0:	subhi	r2, r2, #2
   16bb4:	addhi	ip, ip, r4
   16bb8:	bls	16c08 <close_stdout@@Base+0x43dc>
   16bbc:	ldr	r0, [sp, #4]
   16bc0:	orr	r1, r2, r8, lsl #16
   16bc4:	rsb	fp, fp, ip
   16bc8:	umull	r2, r3, r1, r0
   16bcc:	cmp	fp, r3
   16bd0:	bcc	16bf4 <close_stdout@@Base+0x43c8>
   16bd4:	movne	r4, #0
   16bd8:	moveq	r4, #1
   16bdc:	cmp	r2, r7, lsl r5
   16be0:	movls	r4, #0
   16be4:	andhi	r4, r4, #1
   16be8:	cmp	r4, #0
   16bec:	moveq	r3, r1
   16bf0:	beq	168b8 <close_stdout@@Base+0x408c>
   16bf4:	sub	r3, r1, #1
   16bf8:	mov	r4, #0
   16bfc:	b	168b8 <close_stdout@@Base+0x408c>
   16c00:	mov	fp, r3
   16c04:	b	16994 <close_stdout@@Base+0x4168>
   16c08:	mov	r2, r1
   16c0c:	b	16bbc <close_stdout@@Base+0x4390>
   16c10:	mov	r8, r2
   16c14:	b	16b5c <close_stdout@@Base+0x4330>
   16c18:	mov	r3, r2
   16c1c:	b	16a78 <close_stdout@@Base+0x424c>
   16c20:	cmp	r3, #0
   16c24:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16c28:	mov	r6, r0
   16c2c:	sub	sp, sp, #12
   16c30:	mov	r5, r1
   16c34:	mov	r7, r0
   16c38:	mov	r4, r2
   16c3c:	mov	r8, r1
   16c40:	bne	16d20 <close_stdout@@Base+0x44f4>
   16c44:	cmp	r2, r1
   16c48:	bls	16d5c <close_stdout@@Base+0x4530>
   16c4c:	clz	r3, r2
   16c50:	cmp	r3, #0
   16c54:	rsbne	r8, r3, #32
   16c58:	lslne	r4, r2, r3
   16c5c:	lsrne	r8, r0, r8
   16c60:	lslne	r7, r0, r3
   16c64:	orrne	r8, r8, r1, lsl r3
   16c68:	lsr	r5, r4, #16
   16c6c:	uxth	sl, r4
   16c70:	mov	r1, r5
   16c74:	mov	r0, r8
   16c78:	bl	16278 <close_stdout@@Base+0x3a4c>
   16c7c:	mov	r1, r5
   16c80:	mov	r9, r0
   16c84:	mov	r0, r8
   16c88:	bl	16464 <close_stdout@@Base+0x3c38>
   16c8c:	mul	r0, sl, r9
   16c90:	lsr	r3, r7, #16
   16c94:	orr	r1, r3, r1, lsl #16
   16c98:	cmp	r0, r1
   16c9c:	bls	16cc0 <close_stdout@@Base+0x4494>
   16ca0:	adds	r1, r1, r4
   16ca4:	sub	r2, r9, #1
   16ca8:	bcs	16cbc <close_stdout@@Base+0x4490>
   16cac:	cmp	r0, r1
   16cb0:	subhi	r9, r9, #2
   16cb4:	addhi	r1, r1, r4
   16cb8:	bhi	16cc0 <close_stdout@@Base+0x4494>
   16cbc:	mov	r9, r2
   16cc0:	rsb	r8, r0, r1
   16cc4:	mov	r1, r5
   16cc8:	uxth	r7, r7
   16ccc:	mov	r0, r8
   16cd0:	bl	16278 <close_stdout@@Base+0x3a4c>
   16cd4:	mov	r1, r5
   16cd8:	mov	r6, r0
   16cdc:	mov	r0, r8
   16ce0:	bl	16464 <close_stdout@@Base+0x3c38>
   16ce4:	mul	sl, sl, r6
   16ce8:	orr	r1, r7, r1, lsl #16
   16cec:	cmp	sl, r1
   16cf0:	bls	16d0c <close_stdout@@Base+0x44e0>
   16cf4:	adds	r4, r1, r4
   16cf8:	sub	r3, r6, #1
   16cfc:	bcs	17008 <close_stdout@@Base+0x47dc>
   16d00:	cmp	sl, r4
   16d04:	subhi	r6, r6, #2
   16d08:	bls	17008 <close_stdout@@Base+0x47dc>
   16d0c:	orr	r0, r6, r9, lsl #16
   16d10:	mov	r6, #0
   16d14:	mov	r1, r6
   16d18:	add	sp, sp, #12
   16d1c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16d20:	cmp	r3, r1
   16d24:	movhi	r6, #0
   16d28:	movhi	r0, r6
   16d2c:	bhi	16d14 <close_stdout@@Base+0x44e8>
   16d30:	clz	r7, r3
   16d34:	cmp	r7, #0
   16d38:	bne	16e38 <close_stdout@@Base+0x460c>
   16d3c:	cmp	r3, r1
   16d40:	cmpcs	r2, r6
   16d44:	movhi	r6, #0
   16d48:	movls	r6, #1
   16d4c:	movls	r0, #1
   16d50:	movls	r6, r7
   16d54:	movhi	r0, r6
   16d58:	b	16d14 <close_stdout@@Base+0x44e8>
   16d5c:	cmp	r2, #0
   16d60:	bne	16d74 <close_stdout@@Base+0x4548>
   16d64:	mov	r1, r2
   16d68:	mov	r0, #1
   16d6c:	bl	16278 <close_stdout@@Base+0x3a4c>
   16d70:	mov	r4, r0
   16d74:	clz	r3, r4
   16d78:	cmp	r3, #0
   16d7c:	bne	16f34 <close_stdout@@Base+0x4708>
   16d80:	rsb	r5, r4, r5
   16d84:	lsr	r8, r4, #16
   16d88:	uxth	sl, r4
   16d8c:	mov	r6, #1
   16d90:	mov	r1, r8
   16d94:	mov	r0, r5
   16d98:	bl	16278 <close_stdout@@Base+0x3a4c>
   16d9c:	mov	r1, r8
   16da0:	mov	r9, r0
   16da4:	mov	r0, r5
   16da8:	bl	16464 <close_stdout@@Base+0x3c38>
   16dac:	mul	r0, sl, r9
   16db0:	lsr	r3, r7, #16
   16db4:	orr	r1, r3, r1, lsl #16
   16db8:	cmp	r0, r1
   16dbc:	bls	16ddc <close_stdout@@Base+0x45b0>
   16dc0:	adds	r1, r1, r4
   16dc4:	sub	r2, r9, #1
   16dc8:	bcs	17010 <close_stdout@@Base+0x47e4>
   16dcc:	cmp	r0, r1
   16dd0:	subhi	r9, r9, #2
   16dd4:	addhi	r1, r1, r4
   16dd8:	bls	17010 <close_stdout@@Base+0x47e4>
   16ddc:	rsb	fp, r0, r1
   16de0:	mov	r1, r8
   16de4:	uxth	r7, r7
   16de8:	mov	r0, fp
   16dec:	bl	16278 <close_stdout@@Base+0x3a4c>
   16df0:	mov	r1, r8
   16df4:	mov	r5, r0
   16df8:	mov	r0, fp
   16dfc:	bl	16464 <close_stdout@@Base+0x3c38>
   16e00:	mul	sl, sl, r5
   16e04:	orr	r1, r7, r1, lsl #16
   16e08:	cmp	sl, r1
   16e0c:	bls	16e28 <close_stdout@@Base+0x45fc>
   16e10:	adds	r4, r1, r4
   16e14:	sub	r3, r5, #1
   16e18:	bcs	17018 <close_stdout@@Base+0x47ec>
   16e1c:	cmp	sl, r4
   16e20:	subhi	r5, r5, #2
   16e24:	bls	17018 <close_stdout@@Base+0x47ec>
   16e28:	orr	r0, r5, r9, lsl #16
   16e2c:	mov	r1, r6
   16e30:	add	sp, sp, #12
   16e34:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16e38:	rsb	r1, r7, #32
   16e3c:	lsl	r0, r2, r7
   16e40:	lsr	r2, r2, r1
   16e44:	lsr	fp, r5, r1
   16e48:	orr	r8, r2, r3, lsl r7
   16e4c:	lsr	r1, r6, r1
   16e50:	str	r0, [sp, #4]
   16e54:	orr	r5, r1, r5, lsl r7
   16e58:	lsr	r9, r8, #16
   16e5c:	mov	r0, fp
   16e60:	uxth	sl, r8
   16e64:	mov	r1, r9
   16e68:	bl	16278 <close_stdout@@Base+0x3a4c>
   16e6c:	mov	r1, r9
   16e70:	mov	r4, r0
   16e74:	mov	r0, fp
   16e78:	bl	16464 <close_stdout@@Base+0x3c38>
   16e7c:	mul	r0, sl, r4
   16e80:	lsr	ip, r5, #16
   16e84:	orr	r1, ip, r1, lsl #16
   16e88:	cmp	r0, r1
   16e8c:	bls	16ea0 <close_stdout@@Base+0x4674>
   16e90:	adds	r1, r1, r8
   16e94:	sub	r2, r4, #1
   16e98:	bcc	17034 <close_stdout@@Base+0x4808>
   16e9c:	mov	r4, r2
   16ea0:	rsb	ip, r0, r1
   16ea4:	mov	r1, r9
   16ea8:	str	ip, [sp]
   16eac:	uxth	r5, r5
   16eb0:	mov	r0, ip
   16eb4:	bl	16278 <close_stdout@@Base+0x3a4c>
   16eb8:	ldr	ip, [sp]
   16ebc:	mov	r1, r9
   16ec0:	mov	fp, r0
   16ec4:	mov	r0, ip
   16ec8:	bl	16464 <close_stdout@@Base+0x3c38>
   16ecc:	mul	sl, sl, fp
   16ed0:	orr	r1, r5, r1, lsl #16
   16ed4:	cmp	sl, r1
   16ed8:	bls	16eec <close_stdout@@Base+0x46c0>
   16edc:	adds	r1, r1, r8
   16ee0:	sub	r2, fp, #1
   16ee4:	bcc	17020 <close_stdout@@Base+0x47f4>
   16ee8:	mov	fp, r2
   16eec:	ldr	r3, [sp, #4]
   16ef0:	orr	r0, fp, r4, lsl #16
   16ef4:	rsb	sl, sl, r1
   16ef8:	umull	r4, r5, r0, r3
   16efc:	cmp	sl, r5
   16f00:	bcc	16f20 <close_stdout@@Base+0x46f4>
   16f04:	movne	r3, #0
   16f08:	moveq	r3, #1
   16f0c:	cmp	r4, r6, lsl r7
   16f10:	movls	r6, #0
   16f14:	andhi	r6, r3, #1
   16f18:	cmp	r6, #0
   16f1c:	beq	16d14 <close_stdout@@Base+0x44e8>
   16f20:	mov	r6, #0
   16f24:	sub	r0, r0, #1
   16f28:	mov	r1, r6
   16f2c:	add	sp, sp, #12
   16f30:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16f34:	lsl	r4, r4, r3
   16f38:	rsb	r9, r3, #32
   16f3c:	lsr	r2, r5, r9
   16f40:	lsr	r9, r6, r9
   16f44:	lsr	r8, r4, #16
   16f48:	orr	r9, r9, r5, lsl r3
   16f4c:	mov	r0, r2
   16f50:	lsl	r7, r6, r3
   16f54:	mov	r1, r8
   16f58:	str	r2, [sp]
   16f5c:	bl	16278 <close_stdout@@Base+0x3a4c>
   16f60:	ldr	r2, [sp]
   16f64:	mov	r1, r8
   16f68:	uxth	sl, r4
   16f6c:	mov	fp, r0
   16f70:	mov	r0, r2
   16f74:	bl	16464 <close_stdout@@Base+0x3c38>
   16f78:	mul	r0, sl, fp
   16f7c:	lsr	r3, r9, #16
   16f80:	orr	r1, r3, r1, lsl #16
   16f84:	cmp	r0, r1
   16f88:	bls	16fa8 <close_stdout@@Base+0x477c>
   16f8c:	adds	r1, r1, r4
   16f90:	sub	r3, fp, #1
   16f94:	bcs	17048 <close_stdout@@Base+0x481c>
   16f98:	cmp	r0, r1
   16f9c:	subhi	fp, fp, #2
   16fa0:	addhi	r1, r1, r4
   16fa4:	bls	17048 <close_stdout@@Base+0x481c>
   16fa8:	rsb	r5, r0, r1
   16fac:	mov	r1, r8
   16fb0:	uxth	r9, r9
   16fb4:	mov	r0, r5
   16fb8:	bl	16278 <close_stdout@@Base+0x3a4c>
   16fbc:	mov	r1, r8
   16fc0:	mov	r6, r0
   16fc4:	mov	r0, r5
   16fc8:	bl	16464 <close_stdout@@Base+0x3c38>
   16fcc:	mul	r5, sl, r6
   16fd0:	orr	r1, r9, r1, lsl #16
   16fd4:	cmp	r5, r1
   16fd8:	bls	16ffc <close_stdout@@Base+0x47d0>
   16fdc:	adds	r1, r1, r4
   16fe0:	sub	r3, r6, #1
   16fe4:	bcs	16ff8 <close_stdout@@Base+0x47cc>
   16fe8:	cmp	r5, r1
   16fec:	subhi	r6, r6, #2
   16ff0:	addhi	r1, r1, r4
   16ff4:	bhi	16ffc <close_stdout@@Base+0x47d0>
   16ff8:	mov	r6, r3
   16ffc:	rsb	r5, r5, r1
   17000:	orr	r6, r6, fp, lsl #16
   17004:	b	16d90 <close_stdout@@Base+0x4564>
   17008:	mov	r6, r3
   1700c:	b	16d0c <close_stdout@@Base+0x44e0>
   17010:	mov	r9, r2
   17014:	b	16ddc <close_stdout@@Base+0x45b0>
   17018:	mov	r5, r3
   1701c:	b	16e28 <close_stdout@@Base+0x45fc>
   17020:	cmp	sl, r1
   17024:	subhi	fp, fp, #2
   17028:	addhi	r1, r1, r8
   1702c:	bhi	16eec <close_stdout@@Base+0x46c0>
   17030:	b	16ee8 <close_stdout@@Base+0x46bc>
   17034:	cmp	r0, r1
   17038:	subhi	r4, r4, #2
   1703c:	addhi	r1, r1, r8
   17040:	bhi	16ea0 <close_stdout@@Base+0x4674>
   17044:	b	16e9c <close_stdout@@Base+0x4670>
   17048:	mov	fp, r3
   1704c:	b	16fa8 <close_stdout@@Base+0x477c>
   17050:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   17054:	mov	r7, r0
   17058:	ldr	r6, [pc, #76]	; 170ac <close_stdout@@Base+0x4880>
   1705c:	mov	r8, r1
   17060:	ldr	r5, [pc, #72]	; 170b0 <close_stdout@@Base+0x4884>
   17064:	mov	r9, r2
   17068:	add	r6, pc, r6
   1706c:	bl	110d8 <fdopen@plt-0x20>
   17070:	add	r5, pc, r5
   17074:	rsb	r6, r5, r6
   17078:	asrs	r6, r6, #2
   1707c:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   17080:	sub	r5, r5, #4
   17084:	mov	r4, #0
   17088:	add	r4, r4, #1
   1708c:	ldr	r3, [r5, #4]!
   17090:	mov	r0, r7
   17094:	mov	r1, r8
   17098:	mov	r2, r9
   1709c:	blx	r3
   170a0:	cmp	r4, r6
   170a4:	bne	17088 <close_stdout@@Base+0x485c>
   170a8:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   170ac:	andeq	r1, r1, ip, lsl #27
   170b0:	andeq	r1, r1, r0, lsl #27
   170b4:	bx	lr
   170b8:	ldr	r3, [pc, #28]	; 170dc <close_stdout@@Base+0x48b0>
   170bc:	mov	r1, #0
   170c0:	ldr	r2, [pc, #24]	; 170e0 <close_stdout@@Base+0x48b4>
   170c4:	add	r3, pc, r3
   170c8:	ldr	r3, [r3, r2]
   170cc:	cmp	r3, #0
   170d0:	ldrne	r2, [r3]
   170d4:	moveq	r2, r3
   170d8:	b	112e4 <__cxa_atexit@plt>
   170dc:	andeq	r1, r1, r4, lsr pc
   170e0:	andeq	r0, r0, r8, lsr #2

Disassembly of section .fini:

000170e4 <.fini>:
   170e4:	push	{r3, lr}
   170e8:	pop	{r3, pc}
