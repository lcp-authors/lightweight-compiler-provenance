
centos-preinstalled/lexgrog:     file format elf32-littlearm


Disassembly of section .init:

00011770 <_init@@Base>:
   11770:	push	{r3, lr}
   11774:	bl	1211c <__assert_fail@plt+0x524>
   11778:	pop	{r3, pc}

Disassembly of section .plt:

0001177c <strstr@plt-0x14>:
   1177c:	push	{lr}		; (str lr, [sp, #-4]!)
   11780:	ldr	lr, [pc, #4]	; 1178c <_init@@Base+0x1c>
   11784:	add	lr, pc, lr
   11788:	ldr	pc, [lr, #8]!
   1178c:	andeq	r0, r2, r4, ror r8

00011790 <strstr@plt>:
   11790:	add	ip, pc, #0, 12
   11794:	add	ip, ip, #32, 20	; 0x20000
   11798:	ldr	pc, [ip, #2164]!	; 0x874

0001179c <iconv_close@plt>:
   1179c:	add	ip, pc, #0, 12
   117a0:	add	ip, ip, #32, 20	; 0x20000
   117a4:	ldr	pc, [ip, #2156]!	; 0x86c

000117a8 <iconv@plt>:
   117a8:	add	ip, pc, #0, 12
   117ac:	add	ip, ip, #32, 20	; 0x20000
   117b0:	ldr	pc, [ip, #2148]!	; 0x864

000117b4 <strcmp@plt>:
   117b4:	add	ip, pc, #0, 12
   117b8:	add	ip, ip, #32, 20	; 0x20000
   117bc:	ldr	pc, [ip, #2140]!	; 0x85c

000117c0 <strcspn@plt>:
   117c0:	add	ip, pc, #0, 12
   117c4:	add	ip, ip, #32, 20	; 0x20000
   117c8:	ldr	pc, [ip, #2132]!	; 0x854

000117cc <free@plt>:
   117cc:	add	ip, pc, #0, 12
   117d0:	add	ip, ip, #32, 20	; 0x20000
   117d4:	ldr	pc, [ip, #2124]!	; 0x84c

000117d8 <ferror@plt>:
   117d8:	add	ip, pc, #0, 12
   117dc:	add	ip, ip, #32, 20	; 0x20000
   117e0:	ldr	pc, [ip, #2116]!	; 0x844

000117e4 <memcpy@plt>:
   117e4:	add	ip, pc, #0, 12
   117e8:	add	ip, ip, #32, 20	; 0x20000
   117ec:	ldr	pc, [ip, #2108]!	; 0x83c

000117f0 <hashtable_free@plt>:
   117f0:	add	ip, pc, #0, 12
   117f4:	add	ip, ip, #32, 20	; 0x20000
   117f8:	ldr	pc, [ip, #2100]!	; 0x834

000117fc <pipeline_wait@plt>:
   117fc:	add	ip, pc, #0, 12
   11800:	add	ip, ip, #32, 20	; 0x20000
   11804:	ldr	pc, [ip, #2092]!	; 0x82c

00011808 <rpl_globfree@plt>:
   11808:	add	ip, pc, #0, 12
   1180c:	add	ip, ip, #32, 20	; 0x20000
   11810:	ldr	pc, [ip, #2084]!	; 0x824

00011814 <mdir_name@plt>:
   11814:	add	ip, pc, #0, 12
   11818:	add	ip, ip, #32, 20	; 0x20000
   1181c:	ldr	pc, [ip, #2076]!	; 0x81c

00011820 <dcgettext@plt>:
   11820:	add	ip, pc, #0, 12
   11824:	add	ip, ip, #32, 20	; 0x20000
   11828:	ldr	pc, [ip, #2068]!	; 0x814

0001182c <debug@plt>:
   1182c:	add	ip, pc, #0, 12
   11830:	add	ip, ip, #32, 20	; 0x20000
   11834:	ldr	pc, [ip, #2060]!	; 0x80c

00011838 <__stack_chk_fail@plt>:
   11838:	add	ip, pc, #0, 12
   1183c:	add	ip, ip, #32, 20	; 0x20000
   11840:	ldr	pc, [ip, #2052]!	; 0x804

00011844 <realloc@plt>:
   11844:	add	ip, pc, #0, 12
   11848:	add	ip, ip, #32, 20	; 0x20000
   1184c:	ldr	pc, [ip, #2044]!	; 0x7fc

00011850 <pipeline_install_post_fork@plt>:
   11850:	add	ip, pc, #0, 12
   11854:	add	ip, ip, #32, 20	; 0x20000
   11858:	ldr	pc, [ip, #2036]!	; 0x7f4

0001185c <dup@plt>:
   1185c:	add	ip, pc, #0, 12
   11860:	add	ip, ip, #32, 20	; 0x20000
   11864:	ldr	pc, [ip, #2028]!	; 0x7ec

00011868 <xrealloc@plt>:
   11868:	add	ip, pc, #0, 12
   1186c:	add	ip, ip, #32, 20	; 0x20000
   11870:	ldr	pc, [ip, #2020]!	; 0x7e4

00011874 <regexec@plt>:
   11874:	add	ip, pc, #0, 12
   11878:	add	ip, ip, #32, 20	; 0x20000
   1187c:	ldr	pc, [ip, #2012]!	; 0x7dc

00011880 <hashtable_create@plt>:
   11880:	add	ip, pc, #0, 12
   11884:	add	ip, ip, #32, 20	; 0x20000
   11888:	ldr	pc, [ip, #2004]!	; 0x7d4

0001188c <strcasecmp@plt>:
   1188c:	add	ip, pc, #0, 12
   11890:	add	ip, ip, #32, 20	; 0x20000
   11894:	ldr	pc, [ip, #1996]!	; 0x7cc

00011898 <__rawmemchr@plt>:
   11898:	add	ip, pc, #0, 12
   1189c:	add	ip, ip, #32, 20	; 0x20000
   118a0:	ldr	pc, [ip, #1988]!	; 0x7c4

000118a4 <lang_dir@plt>:
   118a4:	add	ip, pc, #0, 12
   118a8:	add	ip, ip, #32, 20	; 0x20000
   118ac:	ldr	pc, [ip, #1980]!	; 0x7bc

000118b0 <decompress_fdopen@plt>:
   118b0:	add	ip, pc, #0, 12
   118b4:	add	ip, ip, #32, 20	; 0x20000
   118b8:	ldr	pc, [ip, #1972]!	; 0x7b4

000118bc <fwrite@plt>:
   118bc:	add	ip, pc, #0, 12
   118c0:	add	ip, ip, #32, 20	; 0x20000
   118c4:	ldr	pc, [ip, #1964]!	; 0x7ac

000118c8 <xmalloc@plt>:
   118c8:	add	ip, pc, #0, 12
   118cc:	add	ip, ip, #32, 20	; 0x20000
   118d0:	ldr	pc, [ip, #1956]!	; 0x7a4

000118d4 <regfree@plt>:
   118d4:	add	ip, pc, #0, 12
   118d8:	add	ip, ip, #32, 20	; 0x20000
   118dc:	ldr	pc, [ip, #1948]!	; 0x79c

000118e0 <xstrdup@plt>:
   118e0:	add	ip, pc, #0, 12
   118e4:	add	ip, ip, #32, 20	; 0x20000
   118e8:	ldr	pc, [ip, #1940]!	; 0x794

000118ec <base_name@plt>:
   118ec:	add	ip, pc, #0, 12
   118f0:	add	ip, ip, #32, 20	; 0x20000
   118f4:	ldr	pc, [ip, #1932]!	; 0x78c

000118f8 <init_debug@plt>:
   118f8:	add	ip, pc, #0, 12
   118fc:	add	ip, ip, #32, 20	; 0x20000
   11900:	ldr	pc, [ip, #1924]!	; 0x784

00011904 <pipeline_read@plt>:
   11904:	add	ip, pc, #0, 12
   11908:	add	ip, ip, #32, 20	; 0x20000
   1190c:	ldr	pc, [ip, #1916]!	; 0x77c

00011910 <error@plt>:
   11910:	add	ip, pc, #0, 12
   11914:	add	ip, ip, #32, 20	; 0x20000
   11918:	ldr	pc, [ip, #1908]!	; 0x774

0001191c <opendir@plt>:
   1191c:	add	ip, pc, #0, 12
   11920:	add	ip, ip, #32, 20	; 0x20000
   11924:	ldr	pc, [ip, #1900]!	; 0x76c

00011928 <fnmatch@plt>:
   11928:	add	ip, pc, #0, 12
   1192c:	add	ip, ip, #32, 20	; 0x20000
   11930:	ldr	pc, [ip, #1892]!	; 0x764

00011934 <malloc@plt>:
   11934:	add	ip, pc, #0, 12
   11938:	add	ip, ip, #32, 20	; 0x20000
   1193c:	ldr	pc, [ip, #1884]!	; 0x75c

00011940 <iconv_open@plt>:
   11940:	add	ip, pc, #0, 12
   11944:	add	ip, ip, #32, 20	; 0x20000
   11948:	ldr	pc, [ip, #1876]!	; 0x754

0001194c <__libc_start_main@plt>:
   1194c:	add	ip, pc, #0, 12
   11950:	add	ip, ip, #32, 20	; 0x20000
   11954:	ldr	pc, [ip, #1868]!	; 0x74c

00011958 <pipeline_start@plt>:
   11958:	add	ip, pc, #0, 12
   1195c:	add	ip, ip, #32, 20	; 0x20000
   11960:	ldr	pc, [ip, #1860]!	; 0x744

00011964 <pipeline_peek_skip@plt>:
   11964:	add	ip, pc, #0, 12
   11968:	add	ip, ip, #32, 20	; 0x20000
   1196c:	ldr	pc, [ip, #1852]!	; 0x73c

00011970 <xalloc_die@plt>:
   11970:	add	ip, pc, #0, 12
   11974:	add	ip, ip, #32, 20	; 0x20000
   11978:	ldr	pc, [ip, #1844]!	; 0x734

0001197c <__ctype_toupper_loc@plt>:
   1197c:	add	ip, pc, #0, 12
   11980:	add	ip, ip, #32, 20	; 0x20000
   11984:	ldr	pc, [ip, #1836]!	; 0x72c

00011988 <__gmon_start__@plt>:
   11988:	add	ip, pc, #0, 12
   1198c:	add	ip, ip, #32, 20	; 0x20000
   11990:	ldr	pc, [ip, #1828]!	; 0x724

00011994 <decompress_open@plt>:
   11994:	add	ip, pc, #0, 12
   11998:	add	ip, ip, #32, 20	; 0x20000
   1199c:	ldr	pc, [ip, #1820]!	; 0x71c

000119a0 <appendstr@plt>:
   119a0:	add	ip, pc, #0, 12
   119a4:	add	ip, ip, #32, 20	; 0x20000
   119a8:	ldr	pc, [ip, #1812]!	; 0x714

000119ac <drop_effective_privs@plt>:
   119ac:	add	ip, pc, #0, 12
   119b0:	add	ip, ip, #32, 20	; 0x20000
   119b4:	ldr	pc, [ip, #1804]!	; 0x70c

000119b8 <__ctype_b_loc@plt>:
   119b8:	add	ip, pc, #0, 12
   119bc:	add	ip, ip, #32, 20	; 0x20000
   119c0:	ldr	pc, [ip, #1796]!	; 0x704

000119c4 <exit@plt>:
   119c4:	add	ip, pc, #0, 12
   119c8:	add	ip, ip, #32, 20	; 0x20000
   119cc:	ldr	pc, [ip, #1788]!	; 0x6fc

000119d0 <strlen@plt>:
   119d0:	add	ip, pc, #0, 12
   119d4:	add	ip, ip, #32, 20	; 0x20000
   119d8:	ldr	pc, [ip, #1780]!	; 0x6f4

000119dc <strchr@plt>:
   119dc:	add	ip, pc, #0, 12
   119e0:	add	ip, ip, #32, 20	; 0x20000
   119e4:	ldr	pc, [ip, #1772]!	; 0x6ec

000119e8 <init_locale@plt>:
   119e8:	add	ip, pc, #0, 12
   119ec:	add	ip, ip, #32, 20	; 0x20000
   119f0:	ldr	pc, [ip, #1764]!	; 0x6e4

000119f4 <get_page_encoding@plt>:
   119f4:	add	ip, pc, #0, 12
   119f8:	add	ip, ip, #32, 20	; 0x20000
   119fc:	ldr	pc, [ip, #1756]!	; 0x6dc

00011a00 <__errno_location@plt>:
   11a00:	add	ip, pc, #0, 12
   11a04:	add	ip, ip, #32, 20	; 0x20000
   11a08:	ldr	pc, [ip, #1748]!	; 0x6d4

00011a0c <strncasecmp@plt>:
   11a0c:	add	ip, pc, #0, 12
   11a10:	add	ip, ip, #32, 20	; 0x20000
   11a14:	ldr	pc, [ip, #1740]!	; 0x6cc

00011a18 <push_cleanup@plt>:
   11a18:	add	ip, pc, #0, 12
   11a1c:	add	ip, ip, #32, 20	; 0x20000
   11a20:	ldr	pc, [ip, #1732]!	; 0x6c4

00011a24 <memset@plt>:
   11a24:	add	ip, pc, #0, 12
   11a28:	add	ip, ip, #32, 20	; 0x20000
   11a2c:	ldr	pc, [ip, #1724]!	; 0x6bc

00011a30 <bsearch@plt>:
   11a30:	add	ip, pc, #0, 12
   11a34:	add	ip, ip, #32, 20	; 0x20000
   11a38:	ldr	pc, [ip, #1716]!	; 0x6b4

00011a3c <putchar@plt>:
   11a3c:	add	ip, pc, #0, 12
   11a40:	add	ip, ip, #32, 20	; 0x20000
   11a44:	ldr	pc, [ip, #1708]!	; 0x6ac

00011a48 <strncpy@plt>:
   11a48:	add	ip, pc, #0, 12
   11a4c:	add	ip, ip, #32, 20	; 0x20000
   11a50:	ldr	pc, [ip, #1700]!	; 0x6a4

00011a54 <hashtable_lookup@plt>:
   11a54:	add	ip, pc, #0, 12
   11a58:	add	ip, ip, #32, 20	; 0x20000
   11a5c:	ldr	pc, [ip, #1692]!	; 0x69c

00011a60 <xasprintf@plt>:
   11a60:	add	ip, pc, #0, 12
   11a64:	add	ip, ip, #32, 20	; 0x20000
   11a68:	ldr	pc, [ip, #1684]!	; 0x694

00011a6c <__printf_chk@plt>:
   11a6c:	add	ip, pc, #0, 12
   11a70:	add	ip, ip, #32, 20	; 0x20000
   11a74:	ldr	pc, [ip, #1676]!	; 0x68c

00011a78 <check_preprocessor_encoding@plt>:
   11a78:	add	ip, pc, #0, 12
   11a7c:	add	ip, ip, #32, 20	; 0x20000
   11a80:	ldr	pc, [ip, #1668]!	; 0x684

00011a84 <__fprintf_chk@plt>:
   11a84:	add	ip, pc, #0, 12
   11a88:	add	ip, ip, #32, 20	; 0x20000
   11a8c:	ldr	pc, [ip, #1660]!	; 0x67c

00011a90 <escape_shell@plt>:
   11a90:	add	ip, pc, #0, 12
   11a94:	add	ip, ip, #32, 20	; 0x20000
   11a98:	ldr	pc, [ip, #1652]!	; 0x674

00011a9c <pop_all_cleanups@plt>:
   11a9c:	add	ip, pc, #0, 12
   11aa0:	add	ip, ip, #32, 20	; 0x20000
   11aa4:	ldr	pc, [ip, #1644]!	; 0x66c

00011aa8 <access@plt>:
   11aa8:	add	ip, pc, #0, 12
   11aac:	add	ip, ip, #32, 20	; 0x20000
   11ab0:	ldr	pc, [ip, #1636]!	; 0x664

00011ab4 <argp_error@plt>:
   11ab4:	add	ip, pc, #0, 12
   11ab8:	add	ip, ip, #32, 20	; 0x20000
   11abc:	ldr	pc, [ip, #1628]!	; 0x65c

00011ac0 <strtok@plt>:
   11ac0:	add	ip, pc, #0, 12
   11ac4:	add	ip, ip, #32, 20	; 0x20000
   11ac8:	ldr	pc, [ip, #1620]!	; 0x654

00011acc <pipeline_command@plt>:
   11acc:	add	ip, pc, #0, 12
   11ad0:	add	ip, ip, #32, 20	; 0x20000
   11ad4:	ldr	pc, [ip, #1612]!	; 0x64c

00011ad8 <rpl_glob@plt>:
   11ad8:	add	ip, pc, #0, 12
   11adc:	add	ip, ip, #32, 20	; 0x20000
   11ae0:	ldr	pc, [ip, #1604]!	; 0x644

00011ae4 <pipecmd_new_function@plt>:
   11ae4:	add	ip, pc, #0, 12
   11ae8:	add	ip, ip, #32, 20	; 0x20000
   11aec:	ldr	pc, [ip, #1596]!	; 0x63c

00011af0 <strrchr@plt>:
   11af0:	add	ip, pc, #0, 12
   11af4:	add	ip, ip, #32, 20	; 0x20000
   11af8:	ldr	pc, [ip, #1588]!	; 0x634

00011afc <pipeline_free@plt>:
   11afc:	add	ip, pc, #0, 12
   11b00:	add	ip, ip, #32, 20	; 0x20000
   11b04:	ldr	pc, [ip, #1580]!	; 0x62c

00011b08 <pipeline_peek@plt>:
   11b08:	add	ip, pc, #0, 12
   11b0c:	add	ip, ip, #32, 20	; 0x20000
   11b10:	ldr	pc, [ip, #1572]!	; 0x624

00011b14 <xstrndup@plt>:
   11b14:	add	ip, pc, #0, 12
   11b18:	add	ip, ip, #32, 20	; 0x20000
   11b1c:	ldr	pc, [ip, #1564]!	; 0x61c

00011b20 <xregcomp@plt>:
   11b20:	add	ip, pc, #0, 12
   11b24:	add	ip, ip, #32, 20	; 0x20000
   11b28:	ldr	pc, [ip, #1556]!	; 0x614

00011b2c <pipeline_readline@plt>:
   11b2c:	add	ip, pc, #0, 12
   11b30:	add	ip, ip, #32, 20	; 0x20000
   11b34:	ldr	pc, [ip, #1548]!	; 0x60c

00011b38 <readdir64@plt>:
   11b38:	add	ip, pc, #0, 12
   11b3c:	add	ip, ip, #32, 20	; 0x20000
   11b40:	ldr	pc, [ip, #1540]!	; 0x604

00011b44 <argp_state_help@plt>:
   11b44:	add	ip, pc, #0, 12
   11b48:	add	ip, ip, #32, 20	; 0x20000
   11b4c:	ldr	pc, [ip, #1532]!	; 0x5fc

00011b50 <canonicalize_file_name@plt>:
   11b50:	add	ip, pc, #0, 12
   11b54:	add	ip, ip, #32, 20	; 0x20000
   11b58:	ldr	pc, [ip, #1524]!	; 0x5f4

00011b5c <qsort@plt>:
   11b5c:	add	ip, pc, #0, 12
   11b60:	add	ip, ip, #32, 20	; 0x20000
   11b64:	ldr	pc, [ip, #1516]!	; 0x5ec

00011b68 <trim_spaces@plt>:
   11b68:	add	ip, pc, #0, 12
   11b6c:	add	ip, ip, #32, 20	; 0x20000
   11b70:	ldr	pc, [ip, #1508]!	; 0x5e4

00011b74 <argp_parse@plt>:
   11b74:	add	ip, pc, #0, 12
   11b78:	add	ip, ip, #32, 20	; 0x20000
   11b7c:	ldr	pc, [ip, #1500]!	; 0x5dc

00011b80 <canonicalize_filename_mode@plt>:
   11b80:	add	ip, pc, #0, 12
   11b84:	add	ip, ip, #32, 20	; 0x20000
   11b88:	ldr	pc, [ip, #1492]!	; 0x5d4

00011b8c <__xstat64@plt>:
   11b8c:	add	ip, pc, #0, 12
   11b90:	add	ip, ip, #32, 20	; 0x20000
   11b94:	ldr	pc, [ip, #1484]!	; 0x5cc

00011b98 <strncmp@plt>:
   11b98:	add	ip, pc, #0, 12
   11b9c:	add	ip, ip, #32, 20	; 0x20000
   11ba0:	ldr	pc, [ip, #1476]!	; 0x5c4

00011ba4 <abort@plt>:
   11ba4:	add	ip, pc, #0, 12
   11ba8:	add	ip, ip, #32, 20	; 0x20000
   11bac:	ldr	pc, [ip, #1468]!	; 0x5bc

00011bb0 <__lxstat64@plt>:
   11bb0:	add	ip, pc, #0, 12
   11bb4:	add	ip, ip, #32, 20	; 0x20000
   11bb8:	ldr	pc, [ip, #1460]!	; 0x5b4

00011bbc <dcngettext@plt>:
   11bbc:	add	ip, pc, #0, 12
   11bc0:	add	ip, ip, #32, 20	; 0x20000
   11bc4:	ldr	pc, [ip, #1452]!	; 0x5ac

00011bc8 <closedir@plt>:
   11bc8:	add	ip, pc, #0, 12
   11bcc:	add	ip, ip, #32, 20	; 0x20000
   11bd0:	ldr	pc, [ip, #1444]!	; 0x5a4

00011bd4 <debug_error@plt>:
   11bd4:	add	ip, pc, #0, 12
   11bd8:	add	ip, ip, #32, 20	; 0x20000
   11bdc:	ldr	pc, [ip, #1436]!	; 0x59c

00011be0 <hashtable_install@plt>:
   11be0:	add	ip, pc, #0, 12
   11be4:	add	ip, ip, #32, 20	; 0x20000
   11be8:	ldr	pc, [ip, #1428]!	; 0x594

00011bec <regain_effective_privs@plt>:
   11bec:	add	ip, pc, #0, 12
   11bf0:	add	ip, ip, #32, 20	; 0x20000
   11bf4:	ldr	pc, [ip, #1420]!	; 0x58c

00011bf8 <__assert_fail@plt>:
   11bf8:	add	ip, pc, #0, 12
   11bfc:	add	ip, ip, #32, 20	; 0x20000
   11c00:	ldr	pc, [ip, #1412]!	; 0x584

Disassembly of section .text:

00011c04 <.text>:
   11c04:	movw	r3, #9024	; 0x2340
   11c08:	movw	r1, #17348	; 0x43c4
   11c0c:	movt	r3, #3
   11c10:	movt	r1, #3
   11c14:	push	{r4, r5, r6, r7, r8, r9, sl, fp}
   11c18:	movw	r2, #37392	; 0x9210
   11c1c:	ldm	r3, {r0, ip}
   11c20:	sub	sp, sp, #8
   11c24:	ldr	sl, [r3, #8]
   11c28:	movw	r6, #29208	; 0x7218
   11c2c:	ldr	r9, [r3, #12]
   11c30:	movw	fp, #53760	; 0xd200
   11c34:	ldr	r8, [r1]
   11c38:	movt	r6, #1
   11c3c:	movt	r2, #1
   11c40:	movt	fp, #1
   11c44:	movw	r7, #1372	; 0x55c
   11c48:	str	ip, [sp, #4]
   11c4c:	ldr	r3, [sp, #4]
   11c50:	mov	ip, r8
   11c54:	cmp	r8, r3
   11c58:	bcs	11cdc <__assert_fail@plt+0xe4>
   11c5c:	ldrb	r3, [r8], #1
   11c60:	cmp	r3, #0
   11c64:	ldrbne	r1, [r6, r3, lsl #2]
   11c68:	add	r3, r6, r0, lsl #1
   11c6c:	add	r3, r3, #1024	; 0x400
   11c70:	moveq	r1, #1
   11c74:	ldrsh	r3, [r3]
   11c78:	cmp	r3, #0
   11c7c:	movne	r9, ip
   11c80:	movne	sl, r0
   11c84:	lsl	r3, r0, #1
   11c88:	add	r4, r2, r1, lsl #2
   11c8c:	add	ip, r2, r3
   11c90:	add	r3, r6, r3
   11c94:	sub	ip, ip, #784	; 0x310
   11c98:	add	r3, r3, #3760	; 0xeb0
   11c9c:	add	r3, r3, #12
   11ca0:	ldrsh	ip, [ip]
   11ca4:	add	ip, ip, r1
   11ca8:	lsl	ip, ip, #1
   11cac:	add	r5, r2, ip
   11cb0:	add	r5, r5, #2336	; 0x920
   11cb4:	ldrsh	r5, [r5]
   11cb8:	cmp	r5, r0
   11cbc:	beq	11cd0 <__assert_fail@plt+0xd8>
   11cc0:	ldrsh	r0, [r3]
   11cc4:	cmp	r0, r7
   11cc8:	ldrbgt	r1, [r4, #-1292]	; 0xfffffaf4
   11ccc:	b	11c84 <__assert_fail@plt+0x8c>
   11cd0:	add	ip, fp, ip
   11cd4:	ldrsh	r0, [ip, #132]	; 0x84
   11cd8:	b	11c4c <__assert_fail@plt+0x54>
   11cdc:	movw	ip, #9024	; 0x2340
   11ce0:	movt	ip, #3
   11ce4:	str	sl, [ip, #8]
   11ce8:	str	r9, [ip, #12]
   11cec:	add	sp, sp, #8
   11cf0:	pop	{r4, r5, r6, r7, r8, r9, sl, fp}
   11cf4:	bx	lr
   11cf8:	movw	ip, #8952	; 0x22f8
   11cfc:	movt	ip, #3
   11d00:	push	{r4, r5, r6, r7, lr}
   11d04:	sub	sp, sp, #36	; 0x24
   11d08:	ldr	r6, [ip]
   11d0c:	mov	r4, r1
   11d10:	mov	r5, r0
   11d14:	mov	r1, r0
   11d18:	movw	r0, #4488	; 0x1188
   11d1c:	movt	r0, #2
   11d20:	mov	lr, #65536	; 0x10000
   11d24:	str	r6, [sp, #28]
   11d28:	str	r4, [sp, #12]
   11d2c:	mov	r7, ip
   11d30:	str	r3, [sp, #16]
   11d34:	str	r2, [sp, #20]
   11d38:	str	lr, [sp, #24]
   11d3c:	bl	11940 <iconv_open@plt>
   11d40:	cmn	r0, #1
   11d44:	mov	r6, r0
   11d48:	bne	11d74 <__assert_fail@plt+0x17c>
   11d4c:	bl	11a00 <__errno_location@plt>
   11d50:	mov	r3, r5
   11d54:	movw	r2, #5780	; 0x1694
   11d58:	movt	r2, #2
   11d5c:	ldr	r1, [r0]
   11d60:	mov	r0, #0
   11d64:	bl	11910 <error@plt>
   11d68:	mov	r0, #0
   11d6c:	mov	r1, r0
   11d70:	b	11db4 <__assert_fail@plt+0x1bc>
   11d74:	add	r1, sp, #12
   11d78:	add	r3, sp, #24
   11d7c:	add	r2, sp, #20
   11d80:	str	r3, [sp]
   11d84:	add	r3, sp, #16
   11d88:	bl	117a8 <iconv@plt>
   11d8c:	cmn	r0, #1
   11d90:	mov	r0, r6
   11d94:	ldreq	r3, [sp, #12]
   11d98:	movne	r4, #0
   11d9c:	movne	r5, #0
   11da0:	rsbeq	r4, r4, r3
   11da4:	asreq	r5, r4, #31
   11da8:	bl	1179c <iconv_close@plt>
   11dac:	mov	r0, r4
   11db0:	mov	r1, r5
   11db4:	ldr	r2, [sp, #28]
   11db8:	ldr	r3, [r7]
   11dbc:	cmp	r2, r3
   11dc0:	beq	11dc8 <__assert_fail@plt+0x1d0>
   11dc4:	bl	11838 <__stack_chk_fail@plt>
   11dc8:	add	sp, sp, #36	; 0x24
   11dcc:	pop	{r4, r5, r6, r7, pc}
   11dd0:	movw	r2, #8952	; 0x22f8
   11dd4:	movt	r2, #3
   11dd8:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11ddc:	sub	sp, sp, #148	; 0x94
   11de0:	ldr	r3, [r2]
   11de4:	mov	r5, r0
   11de8:	ldr	r0, [r1]
   11dec:	mov	r4, r1
   11df0:	str	r2, [sp, #12]
   11df4:	str	r3, [sp, #140]	; 0x8c
   11df8:	bl	118ec <base_name@plt>
   11dfc:	movw	r3, #17356	; 0x43cc
   11e00:	movt	r3, #3
   11e04:	str	r0, [r3]
   11e08:	bl	118f8 <init_debug@plt>
   11e0c:	movw	r0, #6812	; 0x1a9c
   11e10:	movt	r0, #1
   11e14:	bl	11850 <pipeline_install_post_fork@plt>
   11e18:	bl	119e8 <init_locale@plt>
   11e1c:	mov	ip, #0
   11e20:	mov	r1, r5
   11e24:	mov	r2, r4
   11e28:	str	ip, [sp]
   11e2c:	mov	r3, ip
   11e30:	str	ip, [sp, #4]
   11e34:	movw	r0, #8612	; 0x21a4
   11e38:	movt	r0, #3
   11e3c:	bl	11b74 <argp_parse@plt>
   11e40:	cmp	r0, #0
   11e44:	bne	120d8 <__assert_fail@plt+0x4e0>
   11e48:	movw	fp, #17300	; 0x4394
   11e4c:	movt	fp, #3
   11e50:	ldr	r8, [fp]
   11e54:	ldr	r3, [fp, #24]
   11e58:	rsbs	r8, r8, #1
   11e5c:	movcc	r8, #0
   11e60:	cmp	r3, #0
   11e64:	ble	1206c <__assert_fail@plt+0x474>
   11e68:	mov	sl, r0
   11e6c:	mov	r5, r0
   11e70:	b	11f30 <__assert_fail@plt+0x338>
   11e74:	mov	r0, r4
   11e78:	bl	118e0 <xstrdup@plt>
   11e7c:	mov	r1, #47	; 0x2f
   11e80:	mov	r7, r0
   11e84:	bl	11af0 <strrchr@plt>
   11e88:	subs	r3, r0, #0
   11e8c:	beq	12088 <__assert_fail@plt+0x490>
   11e90:	mov	r2, #0
   11e94:	mov	r0, r7
   11e98:	strb	r2, [r3]
   11e9c:	mov	r1, #47	; 0x2f
   11ea0:	bl	11af0 <strrchr@plt>
   11ea4:	subs	r4, r0, #0
   11ea8:	beq	12088 <__assert_fail@plt+0x490>
   11eac:	movw	r1, #29020	; 0x715c
   11eb0:	add	r0, r4, #1
   11eb4:	movt	r1, #1
   11eb8:	mov	r2, #3
   11ebc:	bl	11b98 <strncmp@plt>
   11ec0:	subs	r3, r0, #0
   11ec4:	bne	12088 <__assert_fail@plt+0x490>
   11ec8:	ldr	r2, [fp, #20]
   11ecc:	cmp	r7, #0
   11ed0:	strb	r3, [r4]
   11ed4:	ldr	r0, [r2, r6]
   11ed8:	beq	12098 <__assert_fail@plt+0x4a0>
   11edc:	str	r3, [sp]
   11ee0:	mov	r1, r7
   11ee4:	add	r2, sp, #32
   11ee8:	mov	r3, #1
   11eec:	bl	1670c <__assert_fail@plt+0x4b14>
   11ef0:	mov	r4, r0
   11ef4:	mov	r0, r7
   11ef8:	bl	117cc <free@plt>
   11efc:	cmp	r4, #0
   11f00:	bne	11f58 <__assert_fail@plt+0x360>
   11f04:	ldr	r3, [fp, #20]
   11f08:	mov	r0, #1
   11f0c:	movw	r1, #5520	; 0x1590
   11f10:	movt	r1, #2
   11f14:	mov	sl, r0
   11f18:	add	r5, r5, #1
   11f1c:	ldr	r2, [r3, r6]
   11f20:	bl	11a6c <__printf_chk@plt>
   11f24:	ldr	r3, [fp, #24]
   11f28:	cmp	r3, r5
   11f2c:	ble	12060 <__assert_fail@plt+0x468>
   11f30:	ldr	r3, [fp, #20]
   11f34:	lsl	r6, r5, #2
   11f38:	str	r8, [sp, #20]
   11f3c:	ldr	r4, [r3, r5, lsl #2]
   11f40:	ldrb	r3, [r4]
   11f44:	cmp	r3, #45	; 0x2d
   11f48:	bne	11e74 <__assert_fail@plt+0x27c>
   11f4c:	ldrb	r3, [r4, #1]
   11f50:	cmp	r3, #0
   11f54:	bne	11e74 <__assert_fail@plt+0x27c>
   11f58:	mov	r0, r4
   11f5c:	movw	r1, #4500	; 0x1194
   11f60:	add	r2, sp, #20
   11f64:	movt	r1, #2
   11f68:	ldr	r3, [fp, #16]
   11f6c:	bl	15878 <__assert_fail@plt+0x3c80>
   11f70:	cmp	r0, #0
   11f74:	beq	11f04 <__assert_fail@plt+0x30c>
   11f78:	mov	r0, #0
   11f7c:	ldr	r1, [sp, #24]
   11f80:	bl	13098 <__assert_fail@plt+0x14a0>
   11f84:	subs	r9, r0, #0
   11f88:	beq	120bc <__assert_fail@plt+0x4c4>
   11f8c:	mov	r4, r9
   11f90:	mov	r7, #0
   11f94:	b	11fbc <__assert_fail@plt+0x3c4>
   11f98:	ldr	r3, [fp, #8]
   11f9c:	cmp	r3, #0
   11fa0:	bne	12018 <__assert_fail@plt+0x420>
   11fa4:	mov	r0, #10
   11fa8:	mov	r7, #1
   11fac:	bl	11a3c <putchar@plt>
   11fb0:	ldr	r4, [r4, #8]
   11fb4:	cmp	r4, #0
   11fb8:	beq	12030 <__assert_fail@plt+0x438>
   11fbc:	ldr	r3, [r4]
   11fc0:	cmp	r3, #0
   11fc4:	beq	11fb0 <__assert_fail@plt+0x3b8>
   11fc8:	ldr	r3, [r4, #4]
   11fcc:	cmp	r3, #0
   11fd0:	beq	11fb0 <__assert_fail@plt+0x3b8>
   11fd4:	ldr	r3, [fp, #20]
   11fd8:	movw	r1, #4468	; 0x1174
   11fdc:	mov	r0, #1
   11fe0:	movt	r1, #2
   11fe4:	ldr	r2, [r3, r6]
   11fe8:	bl	11a6c <__printf_chk@plt>
   11fec:	ldr	r3, [fp, #12]
   11ff0:	cmp	r3, #0
   11ff4:	beq	11f98 <__assert_fail@plt+0x3a0>
   11ff8:	movw	r1, #5500	; 0x157c
   11ffc:	mov	r0, #1
   12000:	movt	r1, #2
   12004:	ldr	r2, [sp, #28]
   12008:	bl	11a6c <__printf_chk@plt>
   1200c:	ldr	r3, [fp, #8]
   12010:	cmp	r3, #0
   12014:	beq	11fa4 <__assert_fail@plt+0x3ac>
   12018:	movw	r1, #5508	; 0x1584
   1201c:	ldm	r4, {r2, r3}
   12020:	movt	r1, #2
   12024:	mov	r0, #1
   12028:	bl	11a6c <__printf_chk@plt>
   1202c:	b	11fa4 <__assert_fail@plt+0x3ac>
   12030:	mov	r0, r9
   12034:	bl	13304 <__assert_fail@plt+0x170c>
   12038:	ldr	r0, [sp, #28]
   1203c:	bl	117cc <free@plt>
   12040:	ldr	r0, [sp, #24]
   12044:	bl	117cc <free@plt>
   12048:	cmp	r7, #0
   1204c:	beq	11f04 <__assert_fail@plt+0x30c>
   12050:	ldr	r3, [fp, #24]
   12054:	add	r5, r5, #1
   12058:	cmp	r3, r5
   1205c:	bgt	11f30 <__assert_fail@plt+0x338>
   12060:	cmp	sl, #0
   12064:	movne	r0, #2
   12068:	moveq	r0, #0
   1206c:	ldr	r1, [sp, #12]
   12070:	ldr	r2, [sp, #140]	; 0x8c
   12074:	ldr	r3, [r1]
   12078:	cmp	r2, r3
   1207c:	bne	120d4 <__assert_fail@plt+0x4dc>
   12080:	add	sp, sp, #148	; 0x94
   12084:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12088:	mov	r0, r7
   1208c:	bl	117cc <free@plt>
   12090:	ldr	r3, [fp, #20]
   12094:	ldr	r0, [r3, r6]
   12098:	mov	r3, #0
   1209c:	movw	r1, #28832	; 0x70a0
   120a0:	str	r3, [sp]
   120a4:	movt	r1, #1
   120a8:	add	r2, sp, #32
   120ac:	mov	r3, #1
   120b0:	bl	1670c <__assert_fail@plt+0x4b14>
   120b4:	mov	r4, r0
   120b8:	b	11efc <__assert_fail@plt+0x304>
   120bc:	bl	13304 <__assert_fail@plt+0x170c>
   120c0:	ldr	r0, [sp, #28]
   120c4:	bl	117cc <free@plt>
   120c8:	ldr	r0, [sp, #24]
   120cc:	bl	117cc <free@plt>
   120d0:	b	11f04 <__assert_fail@plt+0x30c>
   120d4:	bl	11838 <__stack_chk_fail@plt>
   120d8:	mov	r0, #1
   120dc:	bl	119c4 <exit@plt>
   120e0:	mov	fp, #0
   120e4:	mov	lr, #0
   120e8:	pop	{r1}		; (ldr r1, [sp], #4)
   120ec:	mov	r2, sp
   120f0:	push	{r2}		; (str r2, [sp, #-4]!)
   120f4:	push	{r0}		; (str r0, [sp, #-4]!)
   120f8:	ldr	ip, [pc, #16]	; 12110 <__assert_fail@plt+0x518>
   120fc:	push	{ip}		; (str ip, [sp, #-4]!)
   12100:	ldr	r0, [pc, #12]	; 12114 <__assert_fail@plt+0x51c>
   12104:	ldr	r3, [pc, #12]	; 12118 <__assert_fail@plt+0x520>
   12108:	bl	1194c <__libc_start_main@plt>
   1210c:	bl	11ba4 <abort@plt>
   12110:	andeq	r7, r1, ip, ror r0
   12114:	ldrdeq	r1, [r1], -r0
   12118:	andeq	r7, r1, r8, lsl r0
   1211c:	ldr	r3, [pc, #20]	; 12138 <__assert_fail@plt+0x540>
   12120:	ldr	r2, [pc, #20]	; 1213c <__assert_fail@plt+0x544>
   12124:	add	r3, pc, r3
   12128:	ldr	r2, [r3, r2]
   1212c:	cmp	r2, #0
   12130:	bxeq	lr
   12134:	b	11988 <__gmon_start__@plt>
   12138:	ldrdeq	pc, [r1], -r4
   1213c:	andeq	r0, r0, r8, lsl #3
   12140:	push	{r3, lr}
   12144:	movw	r0, #8848	; 0x2290
   12148:	ldr	r3, [pc, #36]	; 12174 <__assert_fail@plt+0x57c>
   1214c:	movt	r0, #3
   12150:	rsb	r3, r0, r3
   12154:	cmp	r3, #6
   12158:	popls	{r3, pc}
   1215c:	movw	r3, #0
   12160:	movt	r3, #0
   12164:	cmp	r3, #0
   12168:	popeq	{r3, pc}
   1216c:	blx	r3
   12170:	pop	{r3, pc}
   12174:	muleq	r3, r3, r2
   12178:	push	{r3, lr}
   1217c:	movw	r0, #8848	; 0x2290
   12180:	movw	r3, #8848	; 0x2290
   12184:	movt	r0, #3
   12188:	movt	r3, #3
   1218c:	rsb	r3, r0, r3
   12190:	asr	r3, r3, #2
   12194:	add	r3, r3, r3, lsr #31
   12198:	asrs	r1, r3, #1
   1219c:	popeq	{r3, pc}
   121a0:	movw	r2, #0
   121a4:	movt	r2, #0
   121a8:	cmp	r2, #0
   121ac:	popeq	{r3, pc}
   121b0:	blx	r2
   121b4:	pop	{r3, pc}
   121b8:	push	{r4, lr}
   121bc:	movw	r4, #8972	; 0x230c
   121c0:	movt	r4, #3
   121c4:	ldrb	r3, [r4]
   121c8:	cmp	r3, #0
   121cc:	popne	{r4, pc}
   121d0:	bl	12140 <__assert_fail@plt+0x548>
   121d4:	mov	r3, #1
   121d8:	strb	r3, [r4]
   121dc:	pop	{r4, pc}
   121e0:	movw	r0, #7916	; 0x1eec
   121e4:	movt	r0, #3
   121e8:	push	{r3, lr}
   121ec:	ldr	r3, [r0]
   121f0:	cmp	r3, #0
   121f4:	beq	1220c <__assert_fail@plt+0x614>
   121f8:	movw	r3, #0
   121fc:	movt	r3, #0
   12200:	cmp	r3, #0
   12204:	beq	1220c <__assert_fail@plt+0x614>
   12208:	blx	r3
   1220c:	pop	{r3, lr}
   12210:	b	12178 <__assert_fail@plt+0x580>
   12214:	push	{r4, r5, r6, lr}
   12218:	sub	sp, sp, #8
   1221c:	mov	r4, r2
   12220:	mov	r6, r1
   12224:	bl	118e0 <xstrdup@plt>
   12228:	ands	r4, r4, #2
   1222c:	movw	r3, #17344	; 0x43c0
   12230:	movt	r3, #3
   12234:	mov	r5, r0
   12238:	beq	12290 <__assert_fail@plt+0x698>
   1223c:	ldr	r4, [r3]
   12240:	cmp	r4, #0
   12244:	beq	122d4 <__assert_fail@plt+0x6dc>
   12248:	mov	r0, r4
   1224c:	bl	11a90 <escape_shell@plt>
   12250:	movw	r1, #28816	; 0x7090
   12254:	movt	r1, #1
   12258:	mov	r3, #0
   1225c:	str	r3, [sp]
   12260:	movw	r3, #28824	; 0x7098
   12264:	mov	r6, r0
   12268:	mov	r2, r0
   1226c:	mov	r0, r5
   12270:	movt	r3, #1
   12274:	bl	119a0 <appendstr@plt>
   12278:	mov	r4, r0
   1227c:	mov	r0, r6
   12280:	bl	117cc <free@plt>
   12284:	mov	r0, r4
   12288:	add	sp, sp, #8
   1228c:	pop	{r4, r5, r6, pc}
   12290:	ldr	r2, [r3]
   12294:	cmp	r2, #0
   12298:	strne	r4, [sp]
   1229c:	streq	r2, [sp]
   122a0:	movwne	r1, #28824	; 0x7098
   122a4:	movwne	r3, #29100	; 0x71ac
   122a8:	movweq	r1, #28832	; 0x70a0
   122ac:	movweq	r3, #29100	; 0x71ac
   122b0:	movtne	r1, #1
   122b4:	moveq	r2, r6
   122b8:	movteq	r1, #1
   122bc:	movt	r3, #1
   122c0:	bl	119a0 <appendstr@plt>
   122c4:	mov	r4, r0
   122c8:	mov	r0, r4
   122cc:	add	sp, sp, #8
   122d0:	pop	{r4, r5, r6, pc}
   122d4:	mov	r0, r6
   122d8:	bl	11a90 <escape_shell@plt>
   122dc:	movw	r1, #28828	; 0x709c
   122e0:	str	r4, [sp]
   122e4:	movw	r3, #28824	; 0x7098
   122e8:	movt	r1, #1
   122ec:	mov	r6, r0
   122f0:	mov	r0, r5
   122f4:	mov	r2, r6
   122f8:	b	12270 <__assert_fail@plt+0x678>
   122fc:	push	{r3, r4, r5, lr}
   12300:	mov	r5, r0
   12304:	ldr	r3, [r0, #4]
   12308:	cmp	r3, #0
   1230c:	movne	r4, #0
   12310:	beq	12330 <__assert_fail@plt+0x738>
   12314:	ldr	r3, [r5]
   12318:	ldr	r0, [r3, r4, lsl #2]
   1231c:	add	r4, r4, #1
   12320:	bl	117cc <free@plt>
   12324:	ldr	r3, [r5, #4]
   12328:	cmp	r3, r4
   1232c:	bhi	12314 <__assert_fail@plt+0x71c>
   12330:	ldr	r0, [r5]
   12334:	bl	117cc <free@plt>
   12338:	mov	r0, r5
   1233c:	pop	{r3, r4, r5, lr}
   12340:	b	117cc <free@plt>
   12344:	ldr	r1, [r1]
   12348:	ldm	r0, {r0, r2}
   1234c:	b	11a0c <strncasecmp@plt>
   12350:	ldr	r0, [r0]
   12354:	ldr	r1, [r1]
   12358:	b	1188c <strcasecmp@plt>
   1235c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12360:	sub	sp, sp, #84	; 0x54
   12364:	movw	ip, #8952	; 0x22f8
   12368:	movt	ip, #3
   1236c:	ldr	fp, [sp, #120]	; 0x78
   12370:	mov	r8, r0
   12374:	ldr	r0, [ip]
   12378:	mov	r7, r3
   1237c:	cmp	fp, #0
   12380:	mov	r3, #0
   12384:	str	ip, [sp, #24]
   12388:	mov	r6, r2
   1238c:	str	r1, [sp, #12]
   12390:	str	r0, [sp, #76]	; 0x4c
   12394:	str	r3, [sp, #32]
   12398:	beq	126a8 <__assert_fail@plt+0xab0>
   1239c:	ldr	r3, [fp]
   123a0:	cmp	r3, #0
   123a4:	beq	126ac <__assert_fail@plt+0xab4>
   123a8:	movw	r4, #8976	; 0x2310
   123ac:	movt	r4, #3
   123b0:	ldr	r5, [r4]
   123b4:	cmp	r5, #0
   123b8:	beq	12800 <__assert_fail@plt+0xc08>
   123bc:	mov	r0, r8
   123c0:	bl	119d0 <strlen@plt>
   123c4:	mov	r1, r8
   123c8:	mov	r2, r0
   123cc:	mov	r0, r5
   123d0:	bl	11a54 <hashtable_lookup@plt>
   123d4:	subs	r5, r0, #0
   123d8:	beq	126e4 <__assert_fail@plt+0xaec>
   123dc:	movw	r0, #28836	; 0x70a4
   123e0:	mov	r1, r8
   123e4:	movt	r0, #1
   123e8:	bl	1182c <debug@plt>
   123ec:	movw	r0, #28980	; 0x7134
   123f0:	mov	r1, r8
   123f4:	movt	r0, #1
   123f8:	ldr	r2, [sp, #12]
   123fc:	bl	1182c <debug@plt>
   12400:	ldr	r4, [fp]
   12404:	cmp	r4, #0
   12408:	beq	126c8 <__assert_fail@plt+0xad0>
   1240c:	ands	ip, r6, #2
   12410:	str	ip, [sp, #28]
   12414:	beq	12534 <__assert_fail@plt+0x93c>
   12418:	tst	r6, #1
   1241c:	add	r0, sp, #44	; 0x2c
   12420:	ldr	r1, [sp, #12]
   12424:	mov	r6, #0
   12428:	movne	ip, #9
   1242c:	moveq	ip, #11
   12430:	str	ip, [sp, #16]
   12434:	mov	r2, ip
   12438:	bl	11b20 <xregcomp@plt>
   1243c:	ldr	r9, [r5]
   12440:	ldr	r2, [r5, #4]
   12444:	cmp	r2, r6
   12448:	bls	12610 <__assert_fail@plt+0xa18>
   1244c:	lsl	r4, r6, #2
   12450:	ldr	sl, [sp, #28]
   12454:	str	fp, [sp, #20]
   12458:	b	12508 <__assert_fail@plt+0x910>
   1245c:	ldr	r9, [r9, r4]
   12460:	ldr	fp, [sp, #36]	; 0x24
   12464:	ldr	r2, [sp, #40]	; 0x28
   12468:	mov	r1, r9
   1246c:	mov	r0, fp
   12470:	bl	11a0c <strncasecmp@plt>
   12474:	cmp	r0, #0
   12478:	bne	1265c <__assert_fail@plt+0xa64>
   1247c:	mov	r1, r9
   12480:	ldr	r0, [sp, #12]
   12484:	ldr	r2, [sp, #16]
   12488:	bl	11928 <fnmatch@plt>
   1248c:	cmp	r0, #0
   12490:	bne	124f0 <__assert_fail@plt+0x8f8>
   12494:	ldr	r3, [r5]
   12498:	mov	r1, r8
   1249c:	movw	r0, #28960	; 0x7120
   124a0:	movt	r0, #1
   124a4:	ldr	r2, [r3, r4]
   124a8:	bl	1182c <debug@plt>
   124ac:	ldr	ip, [sp, #20]
   124b0:	ldr	r9, [r7]
   124b4:	ldr	r1, [ip]
   124b8:	cmp	r9, r1
   124bc:	bcs	125dc <__assert_fail@plt+0x9e4>
   124c0:	ldr	fp, [r7, #4]
   124c4:	ldr	r3, [r5]
   124c8:	add	r1, r9, #1
   124cc:	mov	r0, #0
   124d0:	str	r1, [r7]
   124d4:	movw	r2, #28976	; 0x7130
   124d8:	mov	r1, r8
   124dc:	ldr	r3, [r3, r4]
   124e0:	movt	r2, #1
   124e4:	str	r0, [sp]
   124e8:	bl	119a0 <appendstr@plt>
   124ec:	str	r0, [fp, r9, lsl #2]
   124f0:	ldr	r3, [r5, #4]
   124f4:	add	r6, r6, #1
   124f8:	add	r4, r4, #4
   124fc:	cmp	r3, r6
   12500:	bls	1260c <__assert_fail@plt+0xa14>
   12504:	ldr	r9, [r5]
   12508:	cmp	sl, #0
   1250c:	beq	1245c <__assert_fail@plt+0x864>
   12510:	mov	r2, #0
   12514:	ldr	r1, [r9, r4]
   12518:	mov	r3, r2
   1251c:	str	r2, [sp]
   12520:	add	r0, sp, #44	; 0x2c
   12524:	bl	11874 <regexec@plt>
   12528:	cmp	r0, #0
   1252c:	beq	12494 <__assert_fail@plt+0x89c>
   12530:	b	124f0 <__assert_fail@plt+0x8f8>
   12534:	tst	r6, #1
   12538:	ldr	r0, [sp, #12]
   1253c:	movw	r1, #29008	; 0x7150
   12540:	movt	r1, #1
   12544:	moveq	ip, #16
   12548:	movne	ip, #0
   1254c:	str	ip, [sp, #16]
   12550:	bl	117c0 <strcspn@plt>
   12554:	mov	r1, r0
   12558:	ldr	r0, [sp, #12]
   1255c:	bl	11b14 <xstrndup@plt>
   12560:	str	r0, [sp, #36]	; 0x24
   12564:	bl	119d0 <strlen@plt>
   12568:	ldr	r1, [r5]
   1256c:	movw	ip, #9028	; 0x2344
   12570:	ldr	r2, [r5, #4]
   12574:	movt	ip, #1
   12578:	mov	r3, #4
   1257c:	str	ip, [sp]
   12580:	str	r0, [sp, #40]	; 0x28
   12584:	add	r0, sp, #36	; 0x24
   12588:	bl	11a30 <bsearch@plt>
   1258c:	subs	r6, r0, #0
   12590:	beq	12830 <__assert_fail@plt+0xc38>
   12594:	ldr	r9, [r5]
   12598:	cmp	r6, r9
   1259c:	bls	125d0 <__assert_fail@plt+0x9d8>
   125a0:	ldr	sl, [sp, #36]	; 0x24
   125a4:	ldr	r4, [sp, #40]	; 0x28
   125a8:	b	125b8 <__assert_fail@plt+0x9c0>
   125ac:	sub	r6, r6, #4
   125b0:	cmp	r6, r9
   125b4:	bls	125d0 <__assert_fail@plt+0x9d8>
   125b8:	mov	r0, sl
   125bc:	ldr	r1, [r6, #-4]
   125c0:	mov	r2, r4
   125c4:	bl	11a0c <strncasecmp@plt>
   125c8:	cmp	r0, #0
   125cc:	beq	125ac <__assert_fail@plt+0x9b4>
   125d0:	rsb	r6, r9, r6
   125d4:	asr	r6, r6, #2
   125d8:	b	12440 <__assert_fail@plt+0x848>
   125dc:	lsl	r3, r1, #1
   125e0:	ldr	ip, [sp, #20]
   125e4:	cmn	r3, #-1073741823	; 0xc0000001
   125e8:	ldr	r0, [r7, #4]
   125ec:	str	r3, [ip]
   125f0:	bhi	1285c <__assert_fail@plt+0xc64>
   125f4:	lsl	r1, r1, #3
   125f8:	bl	11868 <xrealloc@plt>
   125fc:	ldr	r9, [r7]
   12600:	mov	fp, r0
   12604:	str	r0, [r7, #4]
   12608:	b	124c4 <__assert_fail@plt+0x8cc>
   1260c:	ldr	fp, [sp, #20]
   12610:	ldr	ip, [sp, #28]
   12614:	cmp	ip, #0
   12618:	beq	127f8 <__assert_fail@plt+0xc00>
   1261c:	add	r0, sp, #44	; 0x2c
   12620:	bl	118d4 <regfree@plt>
   12624:	ldr	r3, [r7]
   12628:	ldr	r1, [fp]
   1262c:	cmp	r3, r1
   12630:	bcs	1267c <__assert_fail@plt+0xa84>
   12634:	ldr	r1, [r7, #4]
   12638:	mov	r2, #0
   1263c:	str	r2, [r1, r3, lsl #2]
   12640:	ldr	ip, [sp, #24]
   12644:	ldr	r2, [sp, #76]	; 0x4c
   12648:	ldr	r3, [ip]
   1264c:	cmp	r2, r3
   12650:	bne	12860 <__assert_fail@plt+0xc68>
   12654:	add	sp, sp, #84	; 0x54
   12658:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1265c:	mov	sl, fp
   12660:	ldr	fp, [sp, #20]
   12664:	mov	r0, sl
   12668:	bl	117cc <free@plt>
   1266c:	ldr	r3, [r7]
   12670:	ldr	r1, [fp]
   12674:	cmp	r3, r1
   12678:	bcc	12634 <__assert_fail@plt+0xa3c>
   1267c:	lsl	r3, r1, #1
   12680:	ldr	r0, [r7, #4]
   12684:	cmn	r3, #-1073741823	; 0xc0000001
   12688:	str	r3, [fp]
   1268c:	bhi	1285c <__assert_fail@plt+0xc64>
   12690:	lsl	r1, r1, #3
   12694:	bl	11868 <xrealloc@plt>
   12698:	ldr	r3, [r7]
   1269c:	mov	r1, r0
   126a0:	str	r0, [r7, #4]
   126a4:	b	12638 <__assert_fail@plt+0xa40>
   126a8:	add	fp, sp, #32
   126ac:	mov	r0, r7
   126b0:	bl	11808 <rpl_globfree@plt>
   126b4:	mov	r3, #0
   126b8:	str	r3, [r7]
   126bc:	str	r3, [r7, #4]
   126c0:	str	r3, [r7, #8]
   126c4:	b	123a8 <__assert_fail@plt+0x7b0>
   126c8:	mov	r3, #4
   126cc:	mov	r0, #16
   126d0:	str	r3, [fp]
   126d4:	bl	118c8 <xmalloc@plt>
   126d8:	str	r0, [r7, #4]
   126dc:	str	r4, [r0]
   126e0:	b	1240c <__assert_fail@plt+0x814>
   126e4:	mov	r1, r8
   126e8:	movw	r0, #28868	; 0x70c4
   126ec:	movt	r0, #1
   126f0:	bl	1182c <debug@plt>
   126f4:	mov	r0, r8
   126f8:	bl	1191c <opendir@plt>
   126fc:	cmp	r0, #0
   12700:	str	r0, [sp, #16]
   12704:	beq	1283c <__assert_fail@plt+0xc44>
   12708:	mov	r0, #12
   1270c:	bl	118c8 <xmalloc@plt>
   12710:	mov	r3, #1024	; 0x400
   12714:	mov	sl, r0
   12718:	mov	r0, #4096	; 0x1000
   1271c:	str	r3, [sl, #8]
   12720:	str	r5, [sl, #4]
   12724:	bl	118c8 <xmalloc@plt>
   12728:	str	r0, [sl]
   1272c:	ldr	r0, [sp, #16]
   12730:	bl	11b38 <readdir64@plt>
   12734:	subs	r2, r0, #0
   12738:	beq	127b4 <__assert_fail@plt+0xbbc>
   1273c:	str	r4, [sp, #28]
   12740:	mov	r4, r2
   12744:	ldr	r9, [sp, #16]
   12748:	str	r6, [sp, #20]
   1274c:	b	1277c <__assert_fail@plt+0xb84>
   12750:	ldr	r5, [sl]
   12754:	mov	r6, r3
   12758:	add	r2, r6, #1
   1275c:	add	r0, r4, #19
   12760:	str	r2, [sl, #4]
   12764:	bl	118e0 <xstrdup@plt>
   12768:	str	r0, [r5, r6, lsl #2]
   1276c:	mov	r0, r9
   12770:	bl	11b38 <readdir64@plt>
   12774:	subs	r4, r0, #0
   12778:	beq	127ac <__assert_fail@plt+0xbb4>
   1277c:	ldmib	sl, {r3, ip}
   12780:	cmp	r3, ip
   12784:	bcc	12750 <__assert_fail@plt+0xb58>
   12788:	lsl	r1, ip, #3
   1278c:	ldr	r0, [sl]
   12790:	lsl	ip, ip, #1
   12794:	str	ip, [sl, #8]
   12798:	bl	11868 <xrealloc@plt>
   1279c:	ldr	r6, [sl, #4]
   127a0:	mov	r5, r0
   127a4:	str	r0, [sl]
   127a8:	b	12758 <__assert_fail@plt+0xb60>
   127ac:	ldr	r6, [sp, #20]
   127b0:	ldr	r4, [sp, #28]
   127b4:	ldr	r1, [sl, #4]
   127b8:	mov	r2, #4
   127bc:	ldr	r0, [sl]
   127c0:	movw	r3, #9040	; 0x2350
   127c4:	movt	r3, #1
   127c8:	mov	r5, sl
   127cc:	bl	11b5c <qsort@plt>
   127d0:	mov	r0, r8
   127d4:	bl	119d0 <strlen@plt>
   127d8:	mov	r1, r8
   127dc:	mov	r3, sl
   127e0:	mov	r2, r0
   127e4:	ldr	r0, [r4]
   127e8:	bl	11be0 <hashtable_install@plt>
   127ec:	ldr	r0, [sp, #16]
   127f0:	bl	11bc8 <closedir@plt>
   127f4:	b	123ec <__assert_fail@plt+0x7f4>
   127f8:	ldr	sl, [sp, #36]	; 0x24
   127fc:	b	12664 <__assert_fail@plt+0xa6c>
   12800:	movw	r0, #8956	; 0x22fc
   12804:	movt	r0, #1
   12808:	bl	11880 <hashtable_create@plt>
   1280c:	mov	r2, r5
   12810:	mov	r3, r0
   12814:	mov	r1, r0
   12818:	movw	r0, #6128	; 0x17f0
   1281c:	movt	r0, #1
   12820:	str	r3, [r4]
   12824:	bl	11a18 <push_cleanup@plt>
   12828:	ldr	r5, [r4]
   1282c:	b	123bc <__assert_fail@plt+0x7c4>
   12830:	ldr	r0, [sp, #36]	; 0x24
   12834:	bl	117cc <free@plt>
   12838:	b	12640 <__assert_fail@plt+0xa48>
   1283c:	mov	r1, r8
   12840:	movw	r0, #28904	; 0x70e8
   12844:	movt	r0, #1
   12848:	bl	11bd4 <debug_error@plt>
   1284c:	movw	r0, #28928	; 0x7100
   12850:	movt	r0, #1
   12854:	bl	1182c <debug@plt>
   12858:	b	12640 <__assert_fail@plt+0xa48>
   1285c:	bl	11970 <xalloc_die@plt>
   12860:	bl	11838 <__stack_chk_fail@plt>
   12864:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12868:	movw	r4, #8976	; 0x2310
   1286c:	movt	r4, #3
   12870:	sub	sp, sp, #76	; 0x4c
   12874:	movw	r8, #8952	; 0x22f8
   12878:	movt	r8, #3
   1287c:	ldr	ip, [r4, #4]
   12880:	mov	r7, r2
   12884:	str	r0, [sp, #20]
   12888:	ldr	r0, [r8]
   1288c:	cmp	ip, #0
   12890:	str	r1, [sp, #12]
   12894:	str	r3, [sp, #16]
   12898:	ldr	r5, [sp, #112]	; 0x70
   1289c:	str	r0, [sp, #68]	; 0x44
   128a0:	beq	12ca4 <__assert_fail@plt+0x10ac>
   128a4:	movw	r6, #8592	; 0x2190
   128a8:	movt	r6, #3
   128ac:	ldr	r0, [pc, #1348]	; 12df8 <__assert_fail@plt+0x1200>
   128b0:	bl	11808 <rpl_globfree@plt>
   128b4:	ldr	r2, [r6]
   128b8:	mov	r3, #0
   128bc:	str	r3, [r4, #8]
   128c0:	cmn	r2, #1
   128c4:	str	r3, [r4, #12]
   128c8:	str	r3, [r4, #16]
   128cc:	beq	12d18 <__assert_fail@plt+0x1120>
   128d0:	tst	r5, #6
   128d4:	mov	r0, r7
   128d8:	beq	12980 <__assert_fail@plt+0xd88>
   128dc:	bl	118e0 <xstrdup@plt>
   128e0:	ldr	r3, [r6]
   128e4:	tst	r3, #1
   128e8:	mov	r9, r0
   128ec:	bne	12994 <__assert_fail@plt+0xd9c>
   128f0:	ands	r7, r3, #2
   128f4:	beq	12908 <__assert_fail@plt+0xd10>
   128f8:	ldr	fp, [r4, #8]
   128fc:	cmp	fp, #0
   12900:	movne	r7, #0
   12904:	beq	12c20 <__assert_fail@plt+0x1028>
   12908:	tst	r3, #4
   1290c:	beq	1291c <__assert_fail@plt+0xd24>
   12910:	ldr	r2, [r4, #8]
   12914:	cmp	r2, #0
   12918:	beq	12b88 <__assert_fail@plt+0xf90>
   1291c:	tst	r3, #8
   12920:	beq	12930 <__assert_fail@plt+0xd38>
   12924:	ldr	r2, [r4, #8]
   12928:	cmp	r2, #0
   1292c:	beq	12b04 <__assert_fail@plt+0xf0c>
   12930:	tst	r3, #16
   12934:	beq	12944 <__assert_fail@plt+0xd4c>
   12938:	ldr	r3, [r4, #8]
   1293c:	cmp	r3, #0
   12940:	beq	12a90 <__assert_fail@plt+0xe98>
   12944:	mov	r0, r9
   12948:	bl	117cc <free@plt>
   1294c:	mov	r0, r7
   12950:	bl	117cc <free@plt>
   12954:	ldr	r0, [r4, #8]
   12958:	movw	r3, #8976	; 0x2310
   1295c:	movt	r3, #3
   12960:	cmp	r0, #0
   12964:	ldr	r2, [sp, #68]	; 0x44
   12968:	ldrne	r0, [r3, #12]
   1296c:	ldr	r3, [r8]
   12970:	cmp	r2, r3
   12974:	bne	12df4 <__assert_fail@plt+0x11fc>
   12978:	add	sp, sp, #76	; 0x4c
   1297c:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   12980:	bl	11a90 <escape_shell@plt>
   12984:	ldr	r3, [r6]
   12988:	tst	r3, #1
   1298c:	mov	r9, r0
   12990:	beq	128f0 <__assert_fail@plt+0xcf8>
   12994:	ldr	r2, [sp, #16]
   12998:	mov	sl, #0
   1299c:	movw	r3, #29016	; 0x7158
   129a0:	movt	r3, #1
   129a4:	cmp	r2, sl
   129a8:	movw	r1, #29020	; 0x715c
   129ac:	mov	r0, sl
   129b0:	movt	r1, #1
   129b4:	movw	r2, #29088	; 0x71a0
   129b8:	movne	r1, r3
   129bc:	movt	r2, #1
   129c0:	mov	r3, sl
   129c4:	str	sl, [sp, #28]
   129c8:	str	sl, [sp, #32]
   129cc:	str	sl, [sp, #36]	; 0x24
   129d0:	str	sl, [sp, #40]	; 0x28
   129d4:	str	sl, [sp, #44]	; 0x2c
   129d8:	str	sl, [sp, #48]	; 0x30
   129dc:	str	sl, [sp, #52]	; 0x34
   129e0:	str	sl, [sp, #56]	; 0x38
   129e4:	str	sl, [sp, #60]	; 0x3c
   129e8:	str	sl, [sp, #64]	; 0x40
   129ec:	bl	119a0 <appendstr@plt>
   129f0:	mov	r1, #9
   129f4:	mov	r7, r0
   129f8:	bl	11af0 <strrchr@plt>
   129fc:	ldr	r3, [sp, #12]
   12a00:	mov	r1, r7
   12a04:	mov	r2, #1
   12a08:	ldrb	lr, [r3]
   12a0c:	add	r3, sp, #32
   12a10:	strb	lr, [r0]
   12a14:	ldr	r0, [sp, #20]
   12a18:	str	sl, [sp]
   12a1c:	bl	1235c <__assert_fail@plt+0x764>
   12a20:	mov	r0, r7
   12a24:	bl	117cc <free@plt>
   12a28:	mov	r0, r9
   12a2c:	ldr	r1, [sp, #12]
   12a30:	mov	r2, r5
   12a34:	bl	12214 <__assert_fail@plt+0x61c>
   12a38:	ldr	r3, [sp, #32]
   12a3c:	cmp	r3, sl
   12a40:	addne	fp, sp, #28
   12a44:	mov	r7, r0
   12a48:	beq	12a78 <__assert_fail@plt+0xe80>
   12a4c:	ldr	r0, [sp, #36]	; 0x24
   12a50:	mov	r1, r7
   12a54:	ldr	r3, [pc, #924]	; 12df8 <__assert_fail@plt+0x1200>
   12a58:	mov	r2, r5
   12a5c:	ldr	r0, [r0, sl, lsl #2]
   12a60:	add	sl, sl, #1
   12a64:	str	fp, [sp]
   12a68:	bl	1235c <__assert_fail@plt+0x764>
   12a6c:	ldr	r3, [sp, #32]
   12a70:	cmp	r3, sl
   12a74:	bhi	12a4c <__assert_fail@plt+0xe54>
   12a78:	mov	r0, r7
   12a7c:	bl	117cc <free@plt>
   12a80:	add	r0, sp, #32
   12a84:	bl	11808 <rpl_globfree@plt>
   12a88:	ldr	r3, [r6]
   12a8c:	b	128f0 <__assert_fail@plt+0xcf8>
   12a90:	ldr	r2, [sp, #16]
   12a94:	cmp	r7, #0
   12a98:	strbne	r3, [r7]
   12a9c:	cmp	r2, #0
   12aa0:	bne	12cc4 <__assert_fail@plt+0x10cc>
   12aa4:	ldr	r3, [sp, #16]
   12aa8:	mov	r0, r7
   12aac:	ldr	r1, [sp, #20]
   12ab0:	movw	r2, #29032	; 0x7168
   12ab4:	movt	r2, #1
   12ab8:	str	r3, [sp]
   12abc:	ldr	r3, [sp, #12]
   12ac0:	bl	119a0 <appendstr@plt>
   12ac4:	ldr	r1, [sp, #12]
   12ac8:	mov	r2, r5
   12acc:	mov	r7, r0
   12ad0:	mov	r0, r9
   12ad4:	bl	12214 <__assert_fail@plt+0x61c>
   12ad8:	mov	r6, r0
   12adc:	mov	r0, r7
   12ae0:	mov	r2, r5
   12ae4:	mov	r3, #0
   12ae8:	mov	r1, r6
   12aec:	str	r3, [sp]
   12af0:	ldr	r3, [pc, #768]	; 12df8 <__assert_fail@plt+0x1200>
   12af4:	bl	1235c <__assert_fail@plt+0x764>
   12af8:	mov	r0, r6
   12afc:	bl	117cc <free@plt>
   12b00:	b	12944 <__assert_fail@plt+0xd4c>
   12b04:	ldr	r1, [sp, #16]
   12b08:	cmp	r7, #0
   12b0c:	movw	r3, #29024	; 0x7160
   12b10:	strbne	r2, [r7]
   12b14:	movt	r3, #1
   12b18:	cmp	r1, #0
   12b1c:	mov	ip, #0
   12b20:	mov	r0, r7
   12b24:	str	ip, [sp]
   12b28:	movw	r2, #29032	; 0x7168
   12b2c:	ldr	r1, [sp, #20]
   12b30:	movt	r2, #1
   12b34:	movne	r2, r3
   12b38:	ldr	r3, [sp, #12]
   12b3c:	str	ip, [sp, #8]
   12b40:	bl	119a0 <appendstr@plt>
   12b44:	ldr	r1, [sp, #12]
   12b48:	mov	r2, r5
   12b4c:	mov	r7, r0
   12b50:	mov	r0, r9
   12b54:	bl	12214 <__assert_fail@plt+0x61c>
   12b58:	ldr	ip, [sp, #8]
   12b5c:	ldr	r3, [pc, #660]	; 12df8 <__assert_fail@plt+0x1200>
   12b60:	mov	r2, r5
   12b64:	str	ip, [sp]
   12b68:	mov	fp, r0
   12b6c:	mov	r0, r7
   12b70:	mov	r1, fp
   12b74:	bl	1235c <__assert_fail@plt+0x764>
   12b78:	mov	r0, fp
   12b7c:	bl	117cc <free@plt>
   12b80:	ldr	r3, [r6]
   12b84:	b	12930 <__assert_fail@plt+0xd38>
   12b88:	ldr	r1, [sp, #16]
   12b8c:	cmp	r7, #0
   12b90:	movw	r3, #29024	; 0x7160
   12b94:	strbne	r2, [r7]
   12b98:	movt	r3, #1
   12b9c:	cmp	r1, #0
   12ba0:	mov	fp, #0
   12ba4:	mov	r0, r7
   12ba8:	ldr	r1, [sp, #20]
   12bac:	movw	r2, #29032	; 0x7168
   12bb0:	str	fp, [sp]
   12bb4:	movt	r2, #1
   12bb8:	movne	r2, r3
   12bbc:	ldr	r3, [sp, #12]
   12bc0:	bl	119a0 <appendstr@plt>
   12bc4:	mov	r1, r9
   12bc8:	mov	r7, r0
   12bcc:	ands	r0, r5, #2
   12bd0:	movne	r0, fp
   12bd4:	movwne	r2, #28816	; 0x7090
   12bd8:	movweq	r2, #28824	; 0x7098
   12bdc:	movne	r3, r0
   12be0:	movtne	r2, #1
   12be4:	moveq	r3, r0
   12be8:	movteq	r2, #1
   12bec:	bl	119a0 <appendstr@plt>
   12bf0:	mov	r3, #0
   12bf4:	mov	r2, r5
   12bf8:	str	r3, [sp]
   12bfc:	ldr	r3, [pc, #500]	; 12df8 <__assert_fail@plt+0x1200>
   12c00:	mov	fp, r0
   12c04:	mov	r0, r7
   12c08:	mov	r1, fp
   12c0c:	bl	1235c <__assert_fail@plt+0x764>
   12c10:	mov	r0, fp
   12c14:	bl	117cc <free@plt>
   12c18:	ldr	r3, [r6]
   12c1c:	b	1291c <__assert_fail@plt+0xd24>
   12c20:	ldr	r1, [sp, #16]
   12c24:	movw	r3, #29024	; 0x7160
   12c28:	movt	r3, #1
   12c2c:	movw	r2, #29032	; 0x7168
   12c30:	cmp	r1, #0
   12c34:	movt	r2, #1
   12c38:	ldr	r1, [sp, #20]
   12c3c:	mov	r0, fp
   12c40:	movne	r2, r3
   12c44:	str	fp, [sp, #4]
   12c48:	movw	r3, #29092	; 0x71a4
   12c4c:	movt	r3, #1
   12c50:	str	r3, [sp]
   12c54:	ldr	r3, [sp, #12]
   12c58:	bl	119a0 <appendstr@plt>
   12c5c:	ldr	r1, [sp, #12]
   12c60:	mov	r2, r5
   12c64:	mov	r7, r0
   12c68:	mov	r0, r9
   12c6c:	bl	12214 <__assert_fail@plt+0x61c>
   12c70:	ldr	r3, [pc, #384]	; 12df8 <__assert_fail@plt+0x1200>
   12c74:	mov	r2, r5
   12c78:	str	fp, [sp]
   12c7c:	mov	ip, r0
   12c80:	mov	r0, r7
   12c84:	mov	r1, ip
   12c88:	str	ip, [sp, #8]
   12c8c:	bl	1235c <__assert_fail@plt+0x764>
   12c90:	ldr	ip, [sp, #8]
   12c94:	mov	r0, ip
   12c98:	bl	117cc <free@plt>
   12c9c:	ldr	r3, [r6]
   12ca0:	b	12908 <__assert_fail@plt+0xd10>
   12ca4:	mov	r2, ip
   12ca8:	movw	r0, #6152	; 0x1808
   12cac:	add	r1, r4, #8
   12cb0:	movt	r0, #1
   12cb4:	bl	11a18 <push_cleanup@plt>
   12cb8:	mov	r3, #1
   12cbc:	str	r3, [r4, #4]
   12cc0:	b	128a4 <__assert_fail@plt+0xcac>
   12cc4:	ldr	r3, [sp, #12]
   12cc8:	mov	r6, #0
   12ccc:	mov	r0, r7
   12cd0:	ldr	r1, [sp, #20]
   12cd4:	str	r6, [sp]
   12cd8:	movw	r2, #29024	; 0x7160
   12cdc:	movt	r2, #1
   12ce0:	bl	119a0 <appendstr@plt>
   12ce4:	mov	r1, r9
   12ce8:	mov	r7, r0
   12cec:	ands	r0, r5, #2
   12cf0:	movne	r0, r6
   12cf4:	movwne	r2, #29096	; 0x71a8
   12cf8:	movweq	r2, #29104	; 0x71b0
   12cfc:	movne	r3, r0
   12d00:	movtne	r2, #1
   12d04:	moveq	r3, r0
   12d08:	movteq	r2, #1
   12d0c:	bl	119a0 <appendstr@plt>
   12d10:	mov	r6, r0
   12d14:	b	12adc <__assert_fail@plt+0xee4>
   12d18:	movw	r0, #29040	; 0x7170
   12d1c:	movt	r0, #1
   12d20:	bl	118e0 <xstrdup@plt>
   12d24:	ldrb	r9, [r0]
   12d28:	mov	fp, r0
   12d2c:	cmp	r9, #0
   12d30:	beq	12d54 <__assert_fail@plt+0x115c>
   12d34:	bl	1197c <__ctype_toupper_loc@plt>
   12d38:	sub	r3, fp, #1
   12d3c:	ldr	r1, [r0]
   12d40:	ldr	r2, [r1, r9, lsl #2]
   12d44:	strb	r2, [r3, #1]!
   12d48:	ldrb	r9, [r3, #1]
   12d4c:	cmp	r9, #0
   12d50:	bne	12d40 <__assert_fail@plt+0x1148>
   12d54:	mov	r0, fp
   12d58:	movw	r1, #29040	; 0x7170
   12d5c:	movt	r1, #1
   12d60:	bl	11790 <strstr@plt>
   12d64:	movw	r1, #29044	; 0x7174
   12d68:	movt	r1, #1
   12d6c:	adds	r9, r0, #0
   12d70:	mov	r0, fp
   12d74:	movne	r9, #1
   12d78:	bl	11790 <strstr@plt>
   12d7c:	movw	r1, #29052	; 0x717c
   12d80:	movt	r1, #1
   12d84:	cmp	r0, #0
   12d88:	mov	r0, fp
   12d8c:	orrne	r9, r9, #2
   12d90:	bl	11790 <strstr@plt>
   12d94:	movw	r1, #29060	; 0x7184
   12d98:	movt	r1, #1
   12d9c:	cmp	r0, #0
   12da0:	mov	r0, fp
   12da4:	orrne	r9, r9, #4
   12da8:	bl	11790 <strstr@plt>
   12dac:	movw	r1, #4124	; 0x101c
   12db0:	movt	r1, #2
   12db4:	cmp	r0, #0
   12db8:	mov	r0, fp
   12dbc:	orrne	r9, r9, #8
   12dc0:	bl	11790 <strstr@plt>
   12dc4:	cmp	r0, #0
   12dc8:	mov	r0, fp
   12dcc:	orrne	r9, r9, #16
   12dd0:	bl	117cc <free@plt>
   12dd4:	movw	r0, #29068	; 0x718c
   12dd8:	movw	r1, #29040	; 0x7170
   12ddc:	mov	r2, r9
   12de0:	movt	r0, #1
   12de4:	movt	r1, #1
   12de8:	str	r9, [r6]
   12dec:	bl	1182c <debug@plt>
   12df0:	b	128d0 <__assert_fail@plt+0xcd8>
   12df4:	bl	11838 <__stack_chk_fail@plt>
   12df8:	andeq	r2, r3, r8, lsl r3
   12dfc:	push	{r4, r5, r6, r7, r8, lr}
   12e00:	movw	r8, #8952	; 0x22f8
   12e04:	movt	r8, #3
   12e08:	sub	sp, sp, #40	; 0x28
   12e0c:	mov	r1, #0
   12e10:	mov	r5, r0
   12e14:	ldr	ip, [r8]
   12e18:	mov	r2, r1
   12e1c:	mov	r3, sp
   12e20:	str	ip, [sp, #36]	; 0x24
   12e24:	bl	11ad8 <rpl_glob@plt>
   12e28:	subs	r4, r0, #0
   12e2c:	bne	12eb4 <__assert_fail@plt+0x12bc>
   12e30:	ldr	r0, [sp]
   12e34:	add	r0, r0, #1
   12e38:	lsl	r0, r0, #2
   12e3c:	bl	118c8 <xmalloc@plt>
   12e40:	ldr	r3, [sp]
   12e44:	cmp	r3, #0
   12e48:	mov	r7, r0
   12e4c:	beq	12e88 <__assert_fail@plt+0x1290>
   12e50:	mov	r5, r4
   12e54:	ldr	r3, [sp, #4]
   12e58:	add	r5, r5, #1
   12e5c:	ldr	r6, [r3, r4]
   12e60:	mov	r0, r6
   12e64:	bl	119d0 <strlen@plt>
   12e68:	mov	r1, r0
   12e6c:	mov	r0, r6
   12e70:	bl	11b14 <xstrndup@plt>
   12e74:	ldr	r3, [sp]
   12e78:	cmp	r3, r5
   12e7c:	str	r0, [r7, r4]
   12e80:	add	r4, r4, #4
   12e84:	bhi	12e54 <__assert_fail@plt+0x125c>
   12e88:	mov	r2, #0
   12e8c:	mov	r0, sp
   12e90:	str	r2, [r7, r3, lsl #2]
   12e94:	bl	11808 <rpl_globfree@plt>
   12e98:	ldr	r2, [sp, #36]	; 0x24
   12e9c:	mov	r0, r7
   12ea0:	ldr	r3, [r8]
   12ea4:	cmp	r2, r3
   12ea8:	bne	12ee4 <__assert_fail@plt+0x12ec>
   12eac:	add	sp, sp, #40	; 0x28
   12eb0:	pop	{r4, r5, r6, r7, r8, pc}
   12eb4:	mov	r0, #8
   12eb8:	bl	118c8 <xmalloc@plt>
   12ebc:	mov	r4, r0
   12ec0:	mov	r0, r5
   12ec4:	bl	119d0 <strlen@plt>
   12ec8:	mov	r7, r4
   12ecc:	mov	r1, r0
   12ed0:	mov	r0, r5
   12ed4:	bl	11b14 <xstrndup@plt>
   12ed8:	mov	r3, #0
   12edc:	stm	r4, {r0, r3}
   12ee0:	b	12e98 <__assert_fail@plt+0x12a0>
   12ee4:	bl	11838 <__stack_chk_fail@plt>
   12ee8:	push	{r4, r5, r6, r7, r8, lr}
   12eec:	mov	r6, r1
   12ef0:	mov	r1, #46	; 0x2e
   12ef4:	mov	r8, r0
   12ef8:	bl	11af0 <strrchr@plt>
   12efc:	subs	r7, r0, #0
   12f00:	beq	12f6c <__assert_fail@plt+0x1374>
   12f04:	movw	r4, #8848	; 0x2290
   12f08:	movt	r4, #3
   12f0c:	ldr	r0, [r4, #4]
   12f10:	cmp	r0, #0
   12f14:	beq	12f6c <__assert_fail@plt+0x1374>
   12f18:	add	r5, r7, #1
   12f1c:	b	12f30 <__assert_fail@plt+0x1338>
   12f20:	add	r4, r4, #12
   12f24:	ldr	r0, [r4, #4]
   12f28:	cmp	r0, #0
   12f2c:	beq	12f6c <__assert_fail@plt+0x1374>
   12f30:	mov	r1, r5
   12f34:	bl	117b4 <strcmp@plt>
   12f38:	cmp	r0, #0
   12f3c:	bne	12f20 <__assert_fail@plt+0x1328>
   12f40:	cmp	r6, #0
   12f44:	streq	r6, [r4, #8]
   12f48:	moveq	r3, r4
   12f4c:	beq	12f9c <__assert_fail@plt+0x13a4>
   12f50:	mov	r0, r8
   12f54:	rsb	r1, r8, r7
   12f58:	bl	11b14 <xstrndup@plt>
   12f5c:	mov	r3, r4
   12f60:	str	r0, [r4, #8]
   12f64:	mov	r0, r3
   12f68:	pop	{r4, r5, r6, r7, r8, pc}
   12f6c:	movw	r1, #29108	; 0x71b4
   12f70:	mov	r0, r8
   12f74:	movt	r1, #1
   12f78:	bl	11790 <strstr@plt>
   12f7c:	subs	r1, r0, #0
   12f80:	beq	12fc8 <__assert_fail@plt+0x13d0>
   12f84:	cmp	r6, #0
   12f88:	bne	12fa4 <__assert_fail@plt+0x13ac>
   12f8c:	movw	r0, #8596	; 0x2194
   12f90:	movt	r0, #3
   12f94:	mov	r3, r0
   12f98:	str	r6, [r0, #8]
   12f9c:	mov	r0, r3
   12fa0:	pop	{r4, r5, r6, r7, r8, pc}
   12fa4:	mov	r0, r8
   12fa8:	rsb	r1, r8, r1
   12fac:	bl	11b14 <xstrndup@plt>
   12fb0:	movw	r2, #8596	; 0x2194
   12fb4:	movt	r2, #3
   12fb8:	mov	r3, r2
   12fbc:	str	r0, [r2, #8]
   12fc0:	mov	r0, r3
   12fc4:	pop	{r4, r5, r6, r7, r8, pc}
   12fc8:	mov	r3, r1
   12fcc:	b	12f9c <__assert_fail@plt+0x13a4>
   12fd0:	push	{r4, r5, r6, r7, r8, lr}
   12fd4:	movw	r8, #8952	; 0x22f8
   12fd8:	movt	r8, #3
   12fdc:	mov	r1, r0
   12fe0:	sub	sp, sp, #112	; 0x70
   12fe4:	mov	r0, #0
   12fe8:	ldr	ip, [r8]
   12fec:	mov	r3, r0
   12ff0:	movw	r2, #28832	; 0x70a0
   12ff4:	movt	r2, #1
   12ff8:	movw	r5, #8848	; 0x2290
   12ffc:	movt	r5, #3
   13000:	str	ip, [sp, #108]	; 0x6c
   13004:	bl	119a0 <appendstr@plt>
   13008:	mov	r4, r0
   1300c:	bl	119d0 <strlen@plt>
   13010:	ldr	r1, [r5, #4]
   13014:	cmp	r1, #0
   13018:	mov	r6, r0
   1301c:	beq	13070 <__assert_fail@plt+0x1478>
   13020:	mov	r7, #0
   13024:	b	1303c <__assert_fail@plt+0x1444>
   13028:	add	r5, r5, #12
   1302c:	strb	r7, [r4, r6]
   13030:	ldr	r1, [r5, #4]
   13034:	cmp	r1, #0
   13038:	beq	13070 <__assert_fail@plt+0x1478>
   1303c:	mov	r0, r4
   13040:	mov	r2, #0
   13044:	bl	119a0 <appendstr@plt>
   13048:	mov	r2, sp
   1304c:	mov	r1, r0
   13050:	mov	r4, r0
   13054:	mov	r0, #3
   13058:	bl	11b8c <__xstat64@plt>
   1305c:	cmp	r0, #0
   13060:	bne	13028 <__assert_fail@plt+0x1430>
   13064:	str	r4, [r5, #8]
   13068:	mov	r0, r5
   1306c:	b	1307c <__assert_fail@plt+0x1484>
   13070:	mov	r0, r4
   13074:	bl	117cc <free@plt>
   13078:	mov	r0, #0
   1307c:	ldr	r2, [sp, #108]	; 0x6c
   13080:	ldr	r3, [r8]
   13084:	cmp	r2, r3
   13088:	bne	13094 <__assert_fail@plt+0x149c>
   1308c:	add	sp, sp, #112	; 0x70
   13090:	pop	{r4, r5, r6, r7, r8, pc}
   13094:	bl	11838 <__stack_chk_fail@plt>
   13098:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1309c:	subs	r6, r1, #0
   130a0:	sub	sp, sp, #12
   130a4:	mov	r8, r0
   130a8:	beq	132fc <__assert_fail@plt+0x1704>
   130ac:	mov	r9, #0
   130b0:	mov	sl, r9
   130b4:	mov	r4, r9
   130b8:	ldrb	r3, [r6]
   130bc:	cmp	r3, #32
   130c0:	cmpne	r3, #17
   130c4:	bne	132e0 <__assert_fail@plt+0x16e8>
   130c8:	add	r6, r6, #1
   130cc:	mov	r5, r6
   130d0:	ldrb	r3, [r6], #1
   130d4:	cmp	r3, #17
   130d8:	cmpne	r3, #32
   130dc:	beq	130cc <__assert_fail@plt+0x14d4>
   130e0:	mov	r0, r5
   130e4:	mov	r1, #17
   130e8:	bl	119dc <strchr@plt>
   130ec:	subs	r6, r0, #0
   130f0:	beq	132d0 <__assert_fail@plt+0x16d8>
   130f4:	rsb	r1, r5, r6
   130f8:	cmp	r1, #0
   130fc:	beq	13234 <__assert_fail@plt+0x163c>
   13100:	mov	r0, r5
   13104:	bl	11b14 <xstrndup@plt>
   13108:	mov	r1, r0
   1310c:	mov	r5, r0
   13110:	movw	r0, #29128	; 0x71c8
   13114:	movt	r0, #1
   13118:	bl	1182c <debug@plt>
   1311c:	mov	r0, r5
   13120:	movw	r1, #29144	; 0x71d8
   13124:	movt	r1, #1
   13128:	bl	11790 <strstr@plt>
   1312c:	subs	r7, r0, #0
   13130:	beq	132b8 <__assert_fail@plt+0x16c0>
   13134:	mov	r0, r5
   13138:	rsb	r1, r5, r7
   1313c:	bl	11b14 <xstrndup@plt>
   13140:	str	r0, [sp]
   13144:	movw	r1, #29148	; 0x71dc
   13148:	ldr	r0, [sp]
   1314c:	movt	r1, #1
   13150:	bl	11ac0 <strtok@plt>
   13154:	cmp	r0, #0
   13158:	beq	1321c <__assert_fail@plt+0x1624>
   1315c:	add	r3, r7, #3
   13160:	str	r3, [sp, #4]
   13164:	bl	11b68 <trim_spaces@plt>
   13168:	ldrb	r3, [r0]
   1316c:	mov	fp, r0
   13170:	cmp	r3, #0
   13174:	beq	131ac <__assert_fail@plt+0x15b4>
   13178:	cmp	r3, #32
   1317c:	beq	13298 <__assert_fail@plt+0x16a0>
   13180:	cmp	r3, #9
   13184:	beq	13298 <__assert_fail@plt+0x16a0>
   13188:	mov	r2, r0
   1318c:	b	131a0 <__assert_fail@plt+0x15a8>
   13190:	cmp	r3, #32
   13194:	beq	13298 <__assert_fail@plt+0x16a0>
   13198:	cmp	r3, #9
   1319c:	beq	13298 <__assert_fail@plt+0x16a0>
   131a0:	ldrb	r3, [r2, #1]!
   131a4:	cmp	r3, #0
   131a8:	bne	13190 <__assert_fail@plt+0x1598>
   131ac:	cmp	sl, #0
   131b0:	beq	132a4 <__assert_fail@plt+0x16ac>
   131b4:	mov	r0, #12
   131b8:	bl	118c8 <xmalloc@plt>
   131bc:	str	r0, [r4, #8]
   131c0:	mov	r4, r0
   131c4:	cmp	r7, #0
   131c8:	str	fp, [r4]
   131cc:	moveq	r0, r7
   131d0:	beq	131dc <__assert_fail@plt+0x15e4>
   131d4:	ldr	r0, [sp, #4]
   131d8:	bl	11b68 <trim_spaces@plt>
   131dc:	cmp	r8, #0
   131e0:	mov	r3, #0
   131e4:	str	r0, [r4, #4]
   131e8:	str	r3, [r4, #8]
   131ec:	beq	13204 <__assert_fail@plt+0x160c>
   131f0:	mov	r0, r8
   131f4:	ldr	r1, [r4]
   131f8:	bl	117b4 <strcmp@plt>
   131fc:	cmp	r0, #0
   13200:	moveq	r9, #1
   13204:	movw	r1, #29148	; 0x71dc
   13208:	mov	r0, #0
   1320c:	movt	r1, #1
   13210:	bl	11ac0 <strtok@plt>
   13214:	cmp	r0, #0
   13218:	bne	13164 <__assert_fail@plt+0x156c>
   1321c:	ldr	r0, [sp]
   13220:	bl	117cc <free@plt>
   13224:	mov	r0, r5
   13228:	bl	117cc <free@plt>
   1322c:	cmp	r6, #0
   13230:	bne	130b8 <__assert_fail@plt+0x14c0>
   13234:	rsbs	r9, r9, #1
   13238:	movcc	r9, #0
   1323c:	cmp	r8, #0
   13240:	moveq	r9, #0
   13244:	cmp	r9, #0
   13248:	beq	1328c <__assert_fail@plt+0x1694>
   1324c:	cmp	sl, #0
   13250:	mov	r0, #12
   13254:	beq	132e8 <__assert_fail@plt+0x16f0>
   13258:	bl	118c8 <xmalloc@plt>
   1325c:	mov	r5, r0
   13260:	ldr	r0, [sl, #4]
   13264:	str	r5, [r4, #8]
   13268:	cmp	r0, #0
   1326c:	beq	13274 <__assert_fail@plt+0x167c>
   13270:	bl	118e0 <xstrdup@plt>
   13274:	str	r0, [r5, #4]
   13278:	mov	r0, r8
   1327c:	bl	118e0 <xstrdup@plt>
   13280:	mov	r3, #0
   13284:	str	r3, [r5, #8]
   13288:	str	r0, [r5]
   1328c:	mov	r0, sl
   13290:	add	sp, sp, #12
   13294:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13298:	mov	r0, fp
   1329c:	bl	117cc <free@plt>
   132a0:	b	13204 <__assert_fail@plt+0x160c>
   132a4:	mov	r0, #12
   132a8:	bl	118c8 <xmalloc@plt>
   132ac:	mov	r4, r0
   132b0:	mov	sl, r0
   132b4:	b	131c4 <__assert_fail@plt+0x15cc>
   132b8:	cmp	r4, #0
   132bc:	bne	13224 <__assert_fail@plt+0x162c>
   132c0:	mov	r0, r5
   132c4:	bl	118e0 <xstrdup@plt>
   132c8:	str	r0, [sp]
   132cc:	b	13144 <__assert_fail@plt+0x154c>
   132d0:	mov	r0, r5
   132d4:	bl	119d0 <strlen@plt>
   132d8:	mov	r1, r0
   132dc:	b	130f8 <__assert_fail@plt+0x1500>
   132e0:	mov	r5, r6
   132e4:	b	130e0 <__assert_fail@plt+0x14e8>
   132e8:	bl	118c8 <xmalloc@plt>
   132ec:	str	sl, [r0, #4]
   132f0:	mov	r5, r0
   132f4:	mov	sl, r0
   132f8:	b	13278 <__assert_fail@plt+0x1680>
   132fc:	mov	sl, r6
   13300:	b	1328c <__assert_fail@plt+0x1694>
   13304:	push	{r3, r4, r5, lr}
   13308:	subs	r4, r0, #0
   1330c:	popeq	{r3, r4, r5, pc}
   13310:	ldr	r0, [r4]
   13314:	bl	117cc <free@plt>
   13318:	ldr	r0, [r4, #4]
   1331c:	cmp	r0, #0
   13320:	beq	13328 <__assert_fail@plt+0x1730>
   13324:	bl	117cc <free@plt>
   13328:	ldr	r5, [r4, #8]
   1332c:	mov	r0, r4
   13330:	bl	117cc <free@plt>
   13334:	cmp	r5, #0
   13338:	mov	r4, r5
   1333c:	bne	13310 <__assert_fail@plt+0x1718>
   13340:	pop	{r3, r4, r5, pc}
   13344:	push	{r4, lr}
   13348:	mov	r2, #5
   1334c:	mov	r4, r0
   13350:	movw	r1, #29152	; 0x71e0
   13354:	mov	r0, #0
   13358:	movt	r1, #1
   1335c:	bl	11820 <dcgettext@plt>
   13360:	mov	r3, r4
   13364:	pop	{r4, lr}
   13368:	mov	r2, r0
   1336c:	mov	r0, #0
   13370:	mov	r1, r0
   13374:	b	11910 <error@plt>
   13378:	subs	ip, r1, #0
   1337c:	mov	r1, r0
   13380:	push	{r4, r5, r6, lr}
   13384:	mov	r6, r2
   13388:	ldreq	ip, [r6, #8]
   1338c:	sub	sp, sp, #8
   13390:	mov	r2, r3
   13394:	ldr	r3, [r6, #16]
   13398:	movw	r0, #29192	; 0x7208
   1339c:	movt	r0, #1
   133a0:	str	ip, [sp]
   133a4:	movw	r5, #9020	; 0x233c
   133a8:	ldr	ip, [r6, #12]
   133ac:	movt	r5, #3
   133b0:	str	ip, [sp, #4]
   133b4:	bl	11a60 <xasprintf@plt>
   133b8:	ldr	r2, [r6, #28]
   133bc:	cmp	r2, #0
   133c0:	mov	r4, r0
   133c4:	str	r0, [r5]
   133c8:	beq	133f0 <__assert_fail@plt+0x17f8>
   133cc:	ldrb	r3, [r2]
   133d0:	cmp	r3, #45	; 0x2d
   133d4:	beq	133f0 <__assert_fail@plt+0x17f8>
   133d8:	movw	r1, #28832	; 0x70a0
   133dc:	mov	r3, #0
   133e0:	movt	r1, #1
   133e4:	bl	119a0 <appendstr@plt>
   133e8:	mov	r4, r0
   133ec:	str	r0, [r5]
   133f0:	mov	r0, r4
   133f4:	mov	r1, #4
   133f8:	bl	11aa8 <access@plt>
   133fc:	cmp	r0, #0
   13400:	bne	13410 <__assert_fail@plt+0x1818>
   13404:	mov	r0, r4
   13408:	add	sp, sp, #8
   1340c:	pop	{r4, r5, r6, pc}
   13410:	mov	r0, r4
   13414:	mov	r4, #0
   13418:	bl	117cc <free@plt>
   1341c:	b	13404 <__assert_fail@plt+0x180c>
   13420:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   13424:	mov	r5, r1
   13428:	mov	r8, r2
   1342c:	mov	r9, r0
   13430:	bl	118e0 <xstrdup@plt>
   13434:	mov	r1, #47	; 0x2f
   13438:	mov	r7, r0
   1343c:	bl	11af0 <strrchr@plt>
   13440:	mov	r1, #0
   13444:	mov	r2, #44	; 0x2c
   13448:	mov	r4, r0
   1344c:	mov	r0, r5
   13450:	bl	11a24 <memset@plt>
   13454:	cmp	r4, #0
   13458:	mov	r1, #1
   1345c:	moveq	r4, r7
   13460:	movne	r3, #0
   13464:	strbne	r3, [r4], #1
   13468:	mov	r0, r4
   1346c:	bl	12ee8 <__assert_fail@plt+0x12f0>
   13470:	subs	r6, r0, #0
   13474:	streq	r6, [r5, #28]
   13478:	beq	1349c <__assert_fail@plt+0x18a4>
   1347c:	ldr	r3, [r6, #4]
   13480:	ldr	r0, [r6, #8]
   13484:	str	r3, [r5, #28]
   13488:	bl	119d0 <strlen@plt>
   1348c:	mov	r3, #0
   13490:	strb	r3, [r4, r0]
   13494:	ldr	r0, [r6, #8]
   13498:	bl	117cc <free@plt>
   1349c:	mov	r0, r4
   134a0:	mov	r1, #46	; 0x2e
   134a4:	bl	11af0 <strrchr@plt>
   134a8:	subs	r6, r0, #0
   134ac:	beq	1352c <__assert_fail@plt+0x1934>
   134b0:	mov	r3, r6
   134b4:	mov	r2, #0
   134b8:	strb	r2, [r3], #1
   134bc:	str	r3, [r5, #12]
   134c0:	ldrb	r3, [r6, #1]
   134c4:	cmp	r3, r2
   134c8:	beq	1352c <__assert_fail@plt+0x1934>
   134cc:	mov	r0, r7
   134d0:	mov	r1, #47	; 0x2f
   134d4:	bl	11af0 <strrchr@plt>
   134d8:	add	r3, r0, #4
   134dc:	str	r3, [r5, #16]
   134e0:	ldrb	r3, [r0, #4]
   134e4:	cmp	r3, #0
   134e8:	bne	13518 <__assert_fail@plt+0x1920>
   134ec:	cmp	r8, #0
   134f0:	beq	13508 <__assert_fail@plt+0x1910>
   134f4:	mov	r1, r8
   134f8:	mov	r0, r4
   134fc:	bl	117b4 <strcmp@plt>
   13500:	cmp	r0, #0
   13504:	bne	13554 <__assert_fail@plt+0x195c>
   13508:	mov	r3, #0
   1350c:	mov	r0, r7
   13510:	str	r3, [r5, #8]
   13514:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13518:	ldrb	r2, [r6, #1]
   1351c:	cmp	r2, #0
   13520:	beq	134ec <__assert_fail@plt+0x18f4>
   13524:	cmp	r3, r2
   13528:	beq	134ec <__assert_fail@plt+0x18f4>
   1352c:	movw	r3, #8844	; 0x228c
   13530:	movt	r3, #3
   13534:	ldr	r3, [r3]
   13538:	cmp	r3, #1
   1353c:	ble	13568 <__assert_fail@plt+0x1970>
   13540:	mov	r0, r7
   13544:	mov	r7, #0
   13548:	bl	117cc <free@plt>
   1354c:	mov	r0, r7
   13550:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13554:	mov	r0, r4
   13558:	bl	118e0 <xstrdup@plt>
   1355c:	str	r0, [r5, #8]
   13560:	mov	r0, r7
   13564:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   13568:	mov	r0, r9
   1356c:	bl	13344 <__assert_fail@plt+0x174c>
   13570:	b	13540 <__assert_fail@plt+0x1948>
   13574:	movw	r3, #9024	; 0x2340
   13578:	movt	r3, #3
   1357c:	push	{r4}		; (str r4, [sp, #-4]!)
   13580:	movw	r1, #17348	; 0x43c4
   13584:	ldr	ip, [r3, #20]
   13588:	movt	r1, #3
   1358c:	ldr	r0, [r3, #16]
   13590:	ldr	r4, [r0, ip, lsl #2]
   13594:	ldr	r2, [r4, #8]
   13598:	ldr	r4, [r4, #16]
   1359c:	str	r2, [r1]
   135a0:	ldr	r1, [r0, ip, lsl #2]
   135a4:	str	r2, [r3, #4]
   135a8:	str	r4, [r3, #24]
   135ac:	ldr	r1, [r1]
   135b0:	str	r1, [r3, #28]
   135b4:	ldrb	r2, [r2]
   135b8:	strb	r2, [r3, #32]
   135bc:	pop	{r4}		; (ldr r4, [sp], #4)
   135c0:	bx	lr
   135c4:	push	{r3, r4, r5, lr}
   135c8:	ldm	r0, {r0, r4}
   135cc:	ldr	r5, [r1]
   135d0:	mov	r2, r4
   135d4:	mov	r1, r5
   135d8:	bl	11b98 <strncmp@plt>
   135dc:	cmp	r0, #0
   135e0:	popne	{r3, r4, r5, pc}
   135e4:	ldrb	r0, [r5, r4]
   135e8:	subs	r0, r0, #0
   135ec:	mvnne	r0, #0
   135f0:	pop	{r3, r4, r5, pc}
   135f4:	push	{r4, lr}
   135f8:	sub	sp, sp, #8
   135fc:	mov	r3, #5
   13600:	movw	r1, #3488	; 0xda0
   13604:	str	r3, [sp]
   13608:	movt	r1, #2
   1360c:	mov	r3, #8192	; 0x2000
   13610:	movw	r2, #3540	; 0xdd4
   13614:	mov	r0, #0
   13618:	movt	r2, #2
   1361c:	bl	11bbc <dcngettext@plt>
   13620:	movw	r4, #9024	; 0x2340
   13624:	movt	r4, #3
   13628:	mov	ip, #8192	; 0x2000
   1362c:	str	ip, [sp]
   13630:	ldr	r3, [r4, #36]	; 0x24
   13634:	mov	r2, r0
   13638:	mov	r0, #0
   1363c:	mov	r1, r0
   13640:	bl	11910 <error@plt>
   13644:	mov	r3, #33	; 0x21
   13648:	str	r3, [r4]
   1364c:	add	sp, sp, #8
   13650:	pop	{r4, pc}
   13654:	movw	r3, #9024	; 0x2340
   13658:	movt	r3, #3
   1365c:	ldr	r2, [r3, #40]	; 0x28
   13660:	rsb	r1, r3, r2
   13664:	sub	r1, r1, #43	; 0x2b
   13668:	cmp	r1, #8192	; 0x2000
   1366c:	bge	136a4 <__assert_fail@plt+0x1aac>
   13670:	movw	r1, #17208	; 0x4338
   13674:	movt	r1, #3
   13678:	ldr	ip, [r1, #52]	; 0x34
   1367c:	cmp	ip, #0
   13680:	beq	13694 <__assert_fail@plt+0x1a9c>
   13684:	cmp	r0, #34	; 0x22
   13688:	moveq	r3, #0
   1368c:	streq	r3, [r1, #52]	; 0x34
   13690:	bxeq	lr
   13694:	strb	r0, [r2]
   13698:	add	r2, r2, #1
   1369c:	str	r2, [r3, #40]	; 0x28
   136a0:	bx	lr
   136a4:	b	135f4 <__assert_fail@plt+0x19fc>
   136a8:	movw	r3, #9024	; 0x2340
   136ac:	movt	r3, #3
   136b0:	add	r2, r3, #44	; 0x2c
   136b4:	ldr	r3, [r3, #40]	; 0x28
   136b8:	push	{r4, lr}
   136bc:	cmp	r3, r2
   136c0:	movweq	r4, #17208	; 0x4338
   136c4:	movteq	r4, #3
   136c8:	beq	136f4 <__assert_fail@plt+0x1afc>
   136cc:	ldrb	r3, [r3, #-1]
   136d0:	movw	r4, #17208	; 0x4338
   136d4:	movt	r4, #3
   136d8:	cmp	r3, #32
   136dc:	beq	136f4 <__assert_fail@plt+0x1afc>
   136e0:	ldr	r3, [r4, #56]	; 0x38
   136e4:	cmp	r3, #0
   136e8:	movne	r0, #32
   136ec:	moveq	r0, #17
   136f0:	bl	13654 <__assert_fail@plt+0x1a5c>
   136f4:	mov	r3, #0
   136f8:	str	r3, [r4, #52]	; 0x34
   136fc:	pop	{r4, pc}
   13700:	push	{r4, r5, r6, lr}
   13704:	movw	r4, #9024	; 0x2340
   13708:	movt	r4, #3
   1370c:	mov	r5, r1
   13710:	add	r3, r4, #44	; 0x2c
   13714:	ldr	r6, [r4, #40]	; 0x28
   13718:	rsb	r3, r3, r6
   1371c:	add	r3, r3, r1
   13720:	cmp	r3, #8192	; 0x2000
   13724:	bcs	13744 <__assert_fail@plt+0x1b4c>
   13728:	mov	r1, r0
   1372c:	mov	r2, r5
   13730:	mov	r0, r6
   13734:	add	r5, r6, r5
   13738:	bl	11a48 <strncpy@plt>
   1373c:	str	r5, [r4, #40]	; 0x28
   13740:	pop	{r4, r5, r6, pc}
   13744:	pop	{r4, r5, r6, lr}
   13748:	b	135f4 <__assert_fail@plt+0x19fc>
   1374c:	push	{r4, r5, lr}
   13750:	movw	r4, #8952	; 0x22f8
   13754:	movt	r4, #3
   13758:	sub	sp, sp, #28
   1375c:	mov	r5, r1
   13760:	movw	ip, #13764	; 0x35c4
   13764:	ldr	lr, [r4]
   13768:	mov	r1, r0
   1376c:	str	r2, [sp, #12]
   13770:	movt	ip, #1
   13774:	str	r3, [sp, #16]
   13778:	mov	r2, r5
   1377c:	add	r0, sp, #12
   13780:	str	ip, [sp]
   13784:	mov	r3, #8
   13788:	str	lr, [sp, #20]
   1378c:	bl	11a30 <bsearch@plt>
   13790:	cmp	r0, #0
   13794:	beq	137b0 <__assert_fail@plt+0x1bb8>
   13798:	ldr	r5, [r0, #4]
   1379c:	mov	r0, r5
   137a0:	bl	119d0 <strlen@plt>
   137a4:	mov	r1, r0
   137a8:	mov	r0, r5
   137ac:	bl	13700 <__assert_fail@plt+0x1b08>
   137b0:	ldr	r2, [sp, #20]
   137b4:	ldr	r3, [r4]
   137b8:	cmp	r2, r3
   137bc:	bne	137c8 <__assert_fail@plt+0x1bd0>
   137c0:	add	sp, sp, #28
   137c4:	pop	{r4, r5, pc}
   137c8:	bl	11838 <__stack_chk_fail@plt>
   137cc:	push	{r3, r4, r5, lr}
   137d0:	movw	r3, #9024	; 0x2340
   137d4:	movt	r3, #3
   137d8:	mov	r4, r0
   137dc:	add	r2, r3, #44	; 0x2c
   137e0:	mov	r5, r1
   137e4:	ldr	r3, [r3, #40]	; 0x28
   137e8:	cmp	r3, r2
   137ec:	beq	13804 <__assert_fail@plt+0x1c0c>
   137f0:	ldrb	r3, [r3, #-1]
   137f4:	cmp	r3, #32
   137f8:	beq	13804 <__assert_fail@plt+0x1c0c>
   137fc:	mov	r0, #32
   13800:	bl	13654 <__assert_fail@plt+0x1a5c>
   13804:	cmp	r5, #0
   13808:	popeq	{r3, r4, r5, pc}
   1380c:	sub	r3, r5, #1
   13810:	ldrb	r2, [r4, r3]
   13814:	cmp	r2, #32
   13818:	beq	13830 <__assert_fail@plt+0x1c38>
   1381c:	b	13840 <__assert_fail@plt+0x1c48>
   13820:	ldrb	r1, [r4, r2]
   13824:	cmp	r1, #32
   13828:	bne	13844 <__assert_fail@plt+0x1c4c>
   1382c:	mov	r3, r2
   13830:	cmp	r3, #0
   13834:	sub	r2, r3, #1
   13838:	bne	13820 <__assert_fail@plt+0x1c28>
   1383c:	pop	{r3, r4, r5, pc}
   13840:	mov	r3, r5
   13844:	mov	r0, r4
   13848:	mov	r1, r3
   1384c:	pop	{r3, r4, r5, lr}
   13850:	b	13700 <__assert_fail@plt+0x1b08>
   13854:	push	{r4, lr}
   13858:	mov	r4, r0
   1385c:	bl	119d0 <strlen@plt>
   13860:	mov	r1, r0
   13864:	mov	r0, r4
   13868:	pop	{r4, lr}
   1386c:	b	137cc <__assert_fail@plt+0x1bd4>
   13870:	movw	r1, #8956	; 0x22fc
   13874:	movt	r1, #3
   13878:	push	{r3, lr}
   1387c:	movw	r2, #29004	; 0x714c
   13880:	mov	r3, r0
   13884:	movt	r2, #1
   13888:	ldr	r0, [r1]
   1388c:	mov	r1, #1
   13890:	bl	11a84 <__fprintf_chk@plt>
   13894:	mov	r0, #2
   13898:	bl	119c4 <exit@plt>
   1389c:	push	{r3, r4, r5, r6, r7, lr}
   138a0:	movw	r4, #9024	; 0x2340
   138a4:	movt	r4, #3
   138a8:	ldr	r6, [r4, #16]
   138ac:	cmp	r6, #0
   138b0:	beq	13928 <__assert_fail@plt+0x1d30>
   138b4:	movw	r5, #17208	; 0x4338
   138b8:	movt	r5, #3
   138bc:	ldr	r2, [r4, #20]
   138c0:	ldr	r3, [r5, #60]	; 0x3c
   138c4:	sub	r1, r3, #1
   138c8:	cmp	r1, r2
   138cc:	pophi	{r3, r4, r5, r6, r7, pc}
   138d0:	add	r7, r3, #8
   138d4:	mov	r0, r6
   138d8:	lsl	r6, r7, #2
   138dc:	mov	r1, r6
   138e0:	bl	11844 <realloc@plt>
   138e4:	cmp	r0, #0
   138e8:	str	r0, [r4, #16]
   138ec:	beq	13958 <__assert_fail@plt+0x1d60>
   138f0:	sub	r6, r6, #32
   138f4:	mov	r2, #0
   138f8:	add	r1, r0, r6
   138fc:	str	r7, [r5, #60]	; 0x3c
   13900:	add	r3, r1, #8
   13904:	str	r2, [r0, r6]
   13908:	str	r2, [r1, #4]
   1390c:	str	r2, [r3], #4
   13910:	str	r2, [r3], #4
   13914:	str	r2, [r3], #4
   13918:	str	r2, [r3], #4
   1391c:	str	r2, [r3], #4
   13920:	str	r2, [r3]
   13924:	pop	{r3, r4, r5, r6, r7, pc}
   13928:	mov	r0, #4
   1392c:	bl	11934 <malloc@plt>
   13930:	cmp	r0, #0
   13934:	str	r0, [r4, #16]
   13938:	beq	13958 <__assert_fail@plt+0x1d60>
   1393c:	movw	r3, #17208	; 0x4338
   13940:	movt	r3, #3
   13944:	mov	r2, #1
   13948:	str	r6, [r0]
   1394c:	str	r6, [r4, #20]
   13950:	str	r2, [r3, #60]	; 0x3c
   13954:	pop	{r3, r4, r5, r6, r7, pc}
   13958:	movw	r0, #3596	; 0xe0c
   1395c:	movt	r0, #2
   13960:	bl	13870 <__assert_fail@plt+0x1c78>
   13964:	push	{r3, r4, r5, lr}
   13968:	mov	r4, r0
   1396c:	bl	1389c <__assert_fail@plt+0x1ca4>
   13970:	movw	r3, #9024	; 0x2340
   13974:	movt	r3, #3
   13978:	ldr	r2, [r3, #16]
   1397c:	cmp	r2, #0
   13980:	beq	139dc <__assert_fail@plt+0x1de4>
   13984:	ldr	r1, [r3, #20]
   13988:	ldr	r0, [r2, r1, lsl #2]
   1398c:	add	ip, r2, r1, lsl #2
   13990:	cmp	r0, r4
   13994:	popeq	{r3, r4, r5, pc}
   13998:	cmp	r0, #0
   1399c:	beq	139c0 <__assert_fail@plt+0x1dc8>
   139a0:	ldr	r0, [r3, #4]
   139a4:	ldrb	r5, [r3, #32]
   139a8:	ldr	lr, [r3, #24]
   139ac:	strb	r5, [r0]
   139b0:	ldr	r3, [r2, r1, lsl #2]
   139b4:	str	r0, [r3, #8]
   139b8:	ldr	r3, [r2, r1, lsl #2]
   139bc:	str	lr, [r3, #16]
   139c0:	str	r4, [ip]
   139c4:	bl	13574 <__assert_fail@plt+0x197c>
   139c8:	movw	r3, #17208	; 0x4338
   139cc:	movt	r3, #3
   139d0:	mov	r2, #1
   139d4:	str	r2, [r3, #64]	; 0x40
   139d8:	pop	{r3, r4, r5, pc}
   139dc:	cmp	r4, #0
   139e0:	popeq	{r3, r4, r5, pc}
   139e4:	ldr	ip, [r3, #20]
   139e8:	lsl	ip, ip, #2
   139ec:	b	139c0 <__assert_fail@plt+0x1dc8>
   139f0:	push	{r4, lr}
   139f4:	subs	r4, r0, #0
   139f8:	popeq	{r4, pc}
   139fc:	movw	r3, #9024	; 0x2340
   13a00:	movt	r3, #3
   13a04:	ldr	r2, [r3, #16]
   13a08:	cmp	r2, #0
   13a0c:	beq	13a24 <__assert_fail@plt+0x1e2c>
   13a10:	ldr	r3, [r3, #20]
   13a14:	ldr	r1, [r2, r3, lsl #2]
   13a18:	cmp	r4, r1
   13a1c:	moveq	r1, #0
   13a20:	streq	r1, [r2, r3, lsl #2]
   13a24:	ldr	r3, [r4, #20]
   13a28:	cmp	r3, #0
   13a2c:	bne	13a3c <__assert_fail@plt+0x1e44>
   13a30:	mov	r0, r4
   13a34:	pop	{r4, lr}
   13a38:	b	117cc <free@plt>
   13a3c:	ldr	r0, [r4, #4]
   13a40:	bl	117cc <free@plt>
   13a44:	mov	r0, r4
   13a48:	pop	{r4, lr}
   13a4c:	b	117cc <free@plt>
   13a50:	cmp	r0, #0
   13a54:	push	{r4}		; (str r4, [sp, #-4]!)
   13a58:	beq	13aac <__assert_fail@plt+0x1eb4>
   13a5c:	ldr	r1, [r0, #4]
   13a60:	mov	r3, #0
   13a64:	movw	r2, #9024	; 0x2340
   13a68:	str	r3, [r0, #16]
   13a6c:	movt	r2, #3
   13a70:	mov	r4, #1
   13a74:	strb	r3, [r1]
   13a78:	ldr	ip, [r0, #4]
   13a7c:	ldr	r1, [r2, #16]
   13a80:	strb	r3, [ip, #1]
   13a84:	cmp	r1, r3
   13a88:	ldr	ip, [r0, #4]
   13a8c:	str	r3, [r0, #44]	; 0x2c
   13a90:	str	r4, [r0, #28]
   13a94:	str	ip, [r0, #8]
   13a98:	beq	13aac <__assert_fail@plt+0x1eb4>
   13a9c:	ldr	r3, [r2, #20]
   13aa0:	ldr	r3, [r1, r3, lsl #2]
   13aa4:	cmp	r0, r3
   13aa8:	beq	13ab4 <__assert_fail@plt+0x1ebc>
   13aac:	pop	{r4}		; (ldr r4, [sp], #4)
   13ab0:	bx	lr
   13ab4:	pop	{r4}		; (ldr r4, [sp], #4)
   13ab8:	b	13574 <__assert_fail@plt+0x197c>
   13abc:	push	{r3, r4, r5, r6, r7, lr}
   13ac0:	mov	r4, r0
   13ac4:	mov	r7, r1
   13ac8:	bl	11a00 <__errno_location@plt>
   13acc:	mov	r5, r0
   13ad0:	mov	r0, r4
   13ad4:	ldr	r6, [r5]
   13ad8:	bl	13a50 <__assert_fail@plt+0x1e58>
   13adc:	movw	r3, #9024	; 0x2340
   13ae0:	movt	r3, #3
   13ae4:	mov	r2, #1
   13ae8:	str	r2, [r4, #40]	; 0x28
   13aec:	ldr	r2, [r3, #16]
   13af0:	str	r7, [r4]
   13af4:	cmp	r2, #0
   13af8:	beq	13b0c <__assert_fail@plt+0x1f14>
   13afc:	ldr	r3, [r3, #20]
   13b00:	ldr	r3, [r2, r3, lsl #2]
   13b04:	cmp	r4, r3
   13b08:	beq	13b1c <__assert_fail@plt+0x1f24>
   13b0c:	mov	r2, #1
   13b10:	mov	r3, #0
   13b14:	str	r2, [r4, #32]
   13b18:	str	r3, [r4, #36]	; 0x24
   13b1c:	mov	r3, #0
   13b20:	str	r3, [r4, #24]
   13b24:	str	r6, [r5]
   13b28:	pop	{r3, r4, r5, r6, r7, pc}
   13b2c:	push	{r4, r5, r6, lr}
   13b30:	mov	r6, r0
   13b34:	mov	r0, #48	; 0x30
   13b38:	mov	r5, r1
   13b3c:	bl	11934 <malloc@plt>
   13b40:	subs	r4, r0, #0
   13b44:	beq	13b7c <__assert_fail@plt+0x1f84>
   13b48:	str	r5, [r4, #12]
   13b4c:	add	r0, r5, #2
   13b50:	bl	11934 <malloc@plt>
   13b54:	cmp	r0, #0
   13b58:	str	r0, [r4, #4]
   13b5c:	beq	13b7c <__assert_fail@plt+0x1f84>
   13b60:	mov	r3, #1
   13b64:	mov	r0, r4
   13b68:	mov	r1, r6
   13b6c:	str	r3, [r4, #20]
   13b70:	bl	13abc <__assert_fail@plt+0x1ec4>
   13b74:	mov	r0, r4
   13b78:	pop	{r4, r5, r6, pc}
   13b7c:	movw	r0, #3648	; 0xe40
   13b80:	movt	r0, #2
   13b84:	bl	13870 <__assert_fail@plt+0x1c78>
   13b88:	push	{r3, r4, r5, r6, r7, lr}
   13b8c:	movw	r4, #9024	; 0x2340
   13b90:	movt	r4, #3
   13b94:	mov	r5, r0
   13b98:	ldr	r3, [r4, #16]
   13b9c:	cmp	r3, #0
   13ba0:	beq	13bc8 <__assert_fail@plt+0x1fd0>
   13ba4:	ldr	r2, [r4, #20]
   13ba8:	ldr	r3, [r3, r2, lsl #2]
   13bac:	cmp	r3, #0
   13bb0:	beq	13bc8 <__assert_fail@plt+0x1fd0>
   13bb4:	mov	r0, r3
   13bb8:	mov	r1, r5
   13bbc:	bl	13abc <__assert_fail@plt+0x1ec4>
   13bc0:	pop	{r3, r4, r5, r6, r7, lr}
   13bc4:	b	13574 <__assert_fail@plt+0x197c>
   13bc8:	bl	1389c <__assert_fail@plt+0x1ca4>
   13bcc:	ldr	r0, [r4, #28]
   13bd0:	mov	r1, #16384	; 0x4000
   13bd4:	ldr	r7, [r4, #20]
   13bd8:	ldr	r6, [r4, #16]
   13bdc:	bl	13b2c <__assert_fail@plt+0x1f34>
   13be0:	ldr	r3, [r4, #16]
   13be4:	movw	r2, #9024	; 0x2340
   13be8:	movt	r2, #3
   13bec:	cmp	r3, #0
   13bf0:	str	r0, [r6, r7, lsl #2]
   13bf4:	beq	13bb4 <__assert_fail@plt+0x1fbc>
   13bf8:	ldr	r2, [r2, #20]
   13bfc:	mov	r1, r5
   13c00:	ldr	r0, [r3, r2, lsl #2]
   13c04:	bl	13abc <__assert_fail@plt+0x1ec4>
   13c08:	pop	{r3, r4, r5, r6, r7, lr}
   13c0c:	b	13574 <__assert_fail@plt+0x197c>
   13c10:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13c14:	movw	r4, #17208	; 0x4338
   13c18:	movt	r4, #3
   13c1c:	movw	ip, #8952	; 0x22f8
   13c20:	movt	ip, #3
   13c24:	sub	sp, sp, #68	; 0x44
   13c28:	ldr	r2, [r4, #68]	; 0x44
   13c2c:	movw	r8, #9024	; 0x2340
   13c30:	ldr	r3, [ip]
   13c34:	movt	r8, #3
   13c38:	cmp	r2, #0
   13c3c:	str	r4, [sp, #32]
   13c40:	str	ip, [sp, #40]	; 0x28
   13c44:	str	r3, [sp, #60]	; 0x3c
   13c48:	bne	13cd0 <__assert_fail@plt+0x20d8>
   13c4c:	ldr	r2, [r8]
   13c50:	mov	r3, #1
   13c54:	ldr	r4, [sp, #32]
   13c58:	cmp	r2, #0
   13c5c:	ldr	r2, [r8, #28]
   13c60:	streq	r3, [r8]
   13c64:	cmp	r2, #0
   13c68:	ldr	ip, [sp, #32]
   13c6c:	str	r3, [r4, #68]	; 0x44
   13c70:	movw	r3, #9024	; 0x2340
   13c74:	movweq	r2, #8960	; 0x2300
   13c78:	movteq	r2, #3
   13c7c:	movt	r3, #3
   13c80:	ldreq	r2, [r2]
   13c84:	streq	r2, [r3, #28]
   13c88:	movw	r3, #17208	; 0x4338
   13c8c:	ldr	r2, [ip, #72]	; 0x48
   13c90:	movt	r3, #3
   13c94:	cmp	r2, #0
   13c98:	movweq	r2, #8968	; 0x2308
   13c9c:	movteq	r2, #3
   13ca0:	ldreq	r2, [r2]
   13ca4:	streq	r2, [r3, #72]	; 0x48
   13ca8:	movw	r3, #9024	; 0x2340
   13cac:	ldr	r2, [r8, #16]
   13cb0:	movt	r3, #3
   13cb4:	cmp	r2, #0
   13cb8:	beq	14f0c <__assert_fail@plt+0x3314>
   13cbc:	ldr	r3, [r3, #20]
   13cc0:	ldr	r3, [r2, r3, lsl #2]
   13cc4:	cmp	r3, #0
   13cc8:	beq	14f0c <__assert_fail@plt+0x3314>
   13ccc:	bl	13574 <__assert_fail@plt+0x197c>
   13cd0:	movw	r7, #37392	; 0x9210
   13cd4:	movw	sl, #29208	; 0x7218
   13cd8:	movt	r7, #1
   13cdc:	movt	sl, #1
   13ce0:	ldr	r3, [r8, #4]
   13ce4:	movw	r6, #53760	; 0xd200
   13ce8:	ldrb	r1, [r8, #32]
   13cec:	movt	r6, #1
   13cf0:	ldr	r2, [r8]
   13cf4:	mov	r9, sl
   13cf8:	mov	fp, r7
   13cfc:	mov	sl, r8
   13d00:	movw	r4, #17348	; 0x43c4
   13d04:	movw	ip, #17352	; 0x43c8
   13d08:	movt	r4, #3
   13d0c:	movt	ip, #3
   13d10:	str	r4, [sp, #24]
   13d14:	movw	r4, #9024	; 0x2340
   13d18:	str	ip, [sp, #28]
   13d1c:	movt	r4, #3
   13d20:	str	r4, [sp, #36]	; 0x24
   13d24:	mov	r0, r2
   13d28:	movw	r5, #1372	; 0x55c
   13d2c:	mov	r8, r9
   13d30:	str	r3, [sp, #12]
   13d34:	str	sl, [sp, #20]
   13d38:	ldr	ip, [sp, #12]
   13d3c:	mov	r9, ip
   13d40:	strb	r1, [ip]
   13d44:	ldr	r3, [sp, #20]
   13d48:	ldr	ip, [r3, #12]
   13d4c:	ldr	r4, [r3, #8]
   13d50:	mov	sl, ip
   13d54:	lsl	r3, r0, #1
   13d58:	ldrb	r1, [r8, r1, lsl #2]
   13d5c:	add	r2, r8, r3
   13d60:	add	r2, r2, #1024	; 0x400
   13d64:	ldrsh	r2, [r2]
   13d68:	cmp	r2, #0
   13d6c:	movne	sl, r9
   13d70:	movne	r4, r0
   13d74:	b	13d94 <__assert_fail@plt+0x219c>
   13d78:	add	r3, r8, r3
   13d7c:	add	r3, r3, #3760	; 0xeb0
   13d80:	ldrsh	r0, [r3, #12]
   13d84:	cmp	r0, r5
   13d88:	addgt	r1, fp, r1, lsl #2
   13d8c:	lsl	r3, r0, #1
   13d90:	ldrbgt	r1, [r1, #-1292]	; 0xfffffaf4
   13d94:	add	r2, r7, r3
   13d98:	sub	r2, r2, #784	; 0x310
   13d9c:	ldrsh	r2, [r2]
   13da0:	add	r2, r2, r1
   13da4:	lsl	r2, r2, #1
   13da8:	add	ip, r7, r2
   13dac:	add	ip, ip, #2336	; 0x920
   13db0:	ldrsh	ip, [ip]
   13db4:	cmp	ip, r0
   13db8:	bne	13d78 <__assert_fail@plt+0x2180>
   13dbc:	add	r2, r6, r2
   13dc0:	ldrsh	r0, [r2, #132]	; 0x84
   13dc4:	cmp	r0, r5
   13dc8:	ldrbne	r1, [r9, #1]!
   13dcc:	bne	13d54 <__assert_fail@plt+0x215c>
   13dd0:	ldr	ip, [sp, #20]
   13dd4:	mov	r0, r4
   13dd8:	str	r7, [sp, #8]
   13ddc:	str	r6, [sp, #16]
   13de0:	mov	r7, ip
   13de4:	str	r4, [ip, #8]
   13de8:	str	sl, [ip, #12]
   13dec:	ldr	r4, [sp, #12]
   13df0:	add	r3, r8, r0, lsl #1
   13df4:	ldr	ip, [sp, #24]
   13df8:	add	r3, r3, #1024	; 0x400
   13dfc:	rsb	r2, r4, sl
   13e00:	str	sl, [r7, #4]
   13e04:	ldrsh	r3, [r3]
   13e08:	str	r4, [ip]
   13e0c:	mov	ip, #0
   13e10:	ldr	r4, [sp, #28]
   13e14:	str	r2, [r4]
   13e18:	ldrb	r2, [sl]
   13e1c:	strb	ip, [sl]
   13e20:	strb	r2, [r7, #32]
   13e24:	cmp	r3, #156	; 0x9c
   13e28:	ldrls	pc, [pc, r3, lsl #2]
   13e2c:	b	14ef4 <__assert_fail@plt+0x32fc>
   13e30:	andeq	r4, r1, r0, ror #29
   13e34:			; <UNDEFINED> instruction: 0x00014ebc
   13e38:	muleq	r1, r8, lr
   13e3c:	andeq	r4, r1, r8, ror lr
   13e40:	andeq	r4, r1, r8, ror lr
   13e44:	andeq	r4, r1, r8, ror lr
   13e48:	andeq	r4, r1, r8, ror lr
   13e4c:	andeq	r4, r1, r8, ror lr
   13e50:	andeq	r4, r1, r8, ror lr
   13e54:	andeq	r4, r1, r8, ror lr
   13e58:	andeq	r4, r1, ip, asr #28
   13e5c:	andeq	r4, r1, r0, lsr #28
   13e60:	strdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e64:	andeq	r4, r1, r8, asr #27
   13e68:	muleq	r1, ip, sp
   13e6c:	muleq	r1, ip, sp
   13e70:	andeq	r4, r1, r0, ror sp
   13e74:	andeq	r4, r1, r8, ror lr
   13e78:	andeq	r4, r1, ip, lsr #2
   13e7c:	andeq	r4, r1, r4, lsr #1
   13e80:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e84:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e88:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e8c:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e90:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e94:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13e98:	andeq	r4, r1, r8, ror lr
   13e9c:	andeq	r4, r1, r0, lsr #25
   13ea0:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   13ea4:	andeq	r4, r1, r4, lsr #1
   13ea8:	andeq	r4, r1, r4, lsr #1
   13eac:	andeq	r4, r1, r4, lsr #1
   13eb0:	andeq	r4, r1, r4, lsr #1
   13eb4:	andeq	r4, r1, r4, lsr #1
   13eb8:	andeq	r4, r1, r4, lsr #1
   13ebc:	andeq	r4, r1, r4, lsr #1
   13ec0:	andeq	r4, r1, r4, asr ip
   13ec4:	andeq	r4, r1, r4, asr ip
   13ec8:	andeq	r4, r1, r4, asr ip
   13ecc:	andeq	r4, r1, r4, lsr #24
   13ed0:	andeq	r4, r1, r0, lsl #24
   13ed4:	andeq	r4, r1, r0, lsl #24
   13ed8:	andeq	r4, r1, r0, lsl #24
   13edc:	andeq	r4, r1, r0, lsl #24
   13ee0:	andeq	r4, r1, r0, lsl #24
   13ee4:	andeq	r4, r1, r0, lsl #24
   13ee8:	andeq	r4, r1, r0, lsl #24
   13eec:	andeq	r4, r1, r0, lsl #24
   13ef0:	andeq	r4, r1, r0, lsl #24
   13ef4:	andeq	r4, r1, r0, asr #23
   13ef8:	andeq	r4, r1, r0, ror #22
   13efc:	andeq	r4, r1, r4, lsr fp
   13f00:	andeq	r4, r1, r8, lsl #22
   13f04:	andeq	r4, r1, r8, ror lr
   13f08:	andeq	r4, r1, r4, ror #19
   13f0c:	andeq	r4, r1, r4, ror #19
   13f10:	andeq	r4, r1, r4, ror #19
   13f14:	andeq	r4, r1, r4, ror #19
   13f18:	andeq	r4, r1, r4, ror #19
   13f1c:			; <UNDEFINED> instruction: 0x000149bc
   13f20:	muleq	r1, r4, r9
   13f24:	andeq	r4, r1, ip, ror #18
   13f28:	andeq	r4, r1, r4, asr #18
   13f2c:	andeq	r4, r1, ip, lsl r9
   13f30:	andeq	r4, r1, r8, asr r1
   13f34:	ldrdeq	r4, [r1], -r0
   13f38:	andeq	r4, r1, r8, lsr #17
   13f3c:	andeq	r4, r1, r8, ror lr
   13f40:	andeq	r4, r1, r8, ror lr
   13f44:	andeq	r4, r1, r8, ror lr
   13f48:			; <UNDEFINED> instruction: 0x000147bc
   13f4c:	andeq	r4, r1, r0, lsl #15
   13f50:	andeq	r4, r1, r4, asr #14
   13f54:	andeq	r4, r1, r8, ror lr
   13f58:	andeq	r4, r1, r8, ror lr
   13f5c:	andeq	r4, r1, r8, ror lr
   13f60:	andeq	r4, r1, r8, ror lr
   13f64:	andeq	r4, r1, r8, ror lr
   13f68:	andeq	r4, r1, r8, ror lr
   13f6c:	andeq	r4, r1, r8, ror lr
   13f70:	andeq	r4, r1, r8, ror lr
   13f74:	andeq	r4, r1, r8, ror lr
   13f78:	strdeq	r4, [r1], -ip
   13f7c:	ldrdeq	r4, [r1], -r8
   13f80:			; <UNDEFINED> instruction: 0x000145b4
   13f84:	muleq	r1, r0, r5
   13f88:	andeq	r4, r1, ip, ror #10
   13f8c:	andeq	r4, r1, r8, asr #10
   13f90:	andeq	r4, r1, ip, lsl r5
   13f94:	andeq	r4, r1, r8, ror #9
   13f98:	andeq	r4, r1, ip, asr #9
   13f9c:			; <UNDEFINED> instruction: 0x000144b0
   13fa0:	muleq	r1, r4, r4
   13fa4:	andeq	r4, r1, r8, ror r4
   13fa8:	andeq	r4, r1, ip, asr r4
   13fac:	andeq	r4, r1, r0, asr #8
   13fb0:	andeq	r4, r1, r4, lsr #8
   13fb4:	andeq	r4, r1, r8, lsl #8
   13fb8:	andeq	r4, r1, ip, ror #7
   13fbc:	ldrdeq	r4, [r1], -r0
   13fc0:			; <UNDEFINED> instruction: 0x000143b4
   13fc4:	muleq	r1, r8, r3
   13fc8:	andeq	r4, r1, ip, ror r3
   13fcc:	andeq	r4, r1, ip, asr #6
   13fd0:	andeq	r4, r1, r8, lsl r3
   13fd4:	andeq	r4, r1, r8, ror #5
   13fd8:	andeq	r4, r1, ip, asr #5
   13fdc:			; <UNDEFINED> instruction: 0x000142b0
   13fe0:	muleq	r1, r0, r2
   13fe4:	andeq	r4, r1, r4, asr #4
   13fe8:	ldrdeq	r4, [r1], -ip
   13fec:			; <UNDEFINED> instruction: 0x000141b8
   13ff0:	andeq	r4, r1, r0, lsl #3
   13ff4:	andeq	r4, r1, ip, asr #26
   13ff8:	strdeq	r4, [r1], -r8
   13ffc:	ldrdeq	r4, [r1], -r4	; <UNPREDICTABLE>
   14000:	andeq	r4, r1, r0, ror ip
   14004:	andeq	r4, r1, r0, lsl #26
   14008:	andeq	r4, r1, ip, lsl sp
   1400c:	andeq	r4, r1, r0, lsr #12
   14010:	andeq	r4, r1, ip, lsr r6
   14014:	andeq	r4, r1, ip, ror #12
   14018:	andeq	r4, r1, r8, lsl #13
   1401c:	andeq	r4, r1, r8, asr r1
   14020:			; <UNDEFINED> instruction: 0x000146b8
   14024:			; <UNDEFINED> instruction: 0x000146b8
   14028:			; <UNDEFINED> instruction: 0x000146b8
   1402c:			; <UNDEFINED> instruction: 0x000146b8
   14030:			; <UNDEFINED> instruction: 0x000146b8
   14034:			; <UNDEFINED> instruction: 0x000146b8
   14038:			; <UNDEFINED> instruction: 0x000146b8
   1403c:			; <UNDEFINED> instruction: 0x000146b8
   14040:	andeq	r4, r1, r4, lsr #1
   14044:	andeq	r4, r1, r0, ror #13
   14048:	andeq	r4, r1, r4, lsl r7
   1404c:	andeq	r4, r1, r4, lsl r7
   14050:	strdeq	r4, [r1], -r8
   14054:	andeq	r4, r1, r8, lsr r8
   14058:	andeq	r4, r1, r8, ror #16
   1405c:	andeq	r4, r1, r8, lsr sl
   14060:	strdeq	r4, [r1], -r8
   14064:	andeq	r4, r1, r4, lsr #1
   14068:	andeq	r4, r1, r4, lsr #1
   1406c:	strdeq	r4, [r1], -r8
   14070:	strdeq	r4, [r1], -r8
   14074:	strdeq	r4, [r1], -r8
   14078:	strdeq	r4, [r1], -r8
   1407c:	strdeq	r4, [r1], -r8
   14080:	strdeq	r4, [r1], -r8
   14084:	strdeq	r4, [r1], -r8
   14088:	strdeq	r4, [r1], -r8
   1408c:	strdeq	r4, [r1], -r8
   14090:	strdeq	r4, [r1], -r8
   14094:	strdeq	r4, [r1], -r8
   14098:	strdeq	r4, [r1], -r8
   1409c:	andeq	r4, r1, ip, lsr #2
   140a0:	strdeq	r4, [r1], -r8
   140a4:	mov	sl, r7
   140a8:	ldr	r6, [sp, #16]
   140ac:	ldr	r1, [sl, #40]	; 0x28
   140b0:	mov	r2, #31
   140b4:	ldr	r7, [sp, #8]
   140b8:	mov	r0, #0
   140bc:	str	r2, [sl]
   140c0:	mov	r9, r8
   140c4:	ldr	r3, [sl, #4]
   140c8:	strb	r0, [r1]
   140cc:	ldrb	r1, [sl, #32]
   140d0:	b	13d24 <__assert_fail@plt+0x212c>
   140d4:	mov	r9, r8
   140d8:	mov	r8, sl
   140dc:	mov	sl, r7
   140e0:	ldr	ip, [sp, #12]
   140e4:	ldrb	r1, [sl, #32]
   140e8:	mov	r2, #5
   140ec:	ldr	r7, [sp, #8]
   140f0:	mov	r3, #0
   140f4:	str	ip, [sl, #4]
   140f8:	str	r2, [sl]
   140fc:	ldr	r6, [sp, #16]
   14100:	strb	r1, [r8]
   14104:	ldr	r4, [sp, #24]
   14108:	str	ip, [r4]
   1410c:	ldr	r4, [sp, #12]
   14110:	ldr	ip, [sp, #28]
   14114:	str	r3, [ip]
   14118:	ldrb	r1, [r4]
   1411c:	strb	r3, [r4]
   14120:	mov	r3, r4
   14124:	strb	r1, [sl, #32]
   14128:	b	13d24 <__assert_fail@plt+0x212c>
   1412c:	ldr	r2, [r7, #40]	; 0x28
   14130:	mov	r3, #0
   14134:	mov	r0, r3
   14138:	strb	r3, [r2]
   1413c:	ldr	r4, [sp, #40]	; 0x28
   14140:	ldr	r2, [sp, #60]	; 0x3c
   14144:	ldr	r3, [r4]
   14148:	cmp	r2, r3
   1414c:	bne	14f2c <__assert_fail@plt+0x3334>
   14150:	add	sp, sp, #68	; 0x44
   14154:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   14158:	mov	sl, r7
   1415c:	mov	r0, #32
   14160:	ldr	r7, [sp, #8]
   14164:	mov	r9, r8
   14168:	ldr	r6, [sp, #16]
   1416c:	bl	13654 <__assert_fail@plt+0x1a5c>
   14170:	ldr	r3, [sl, #4]
   14174:	ldrb	r1, [sl, #32]
   14178:	ldr	r2, [sl]
   1417c:	b	13d24 <__assert_fail@plt+0x212c>
   14180:	movw	r0, #4096	; 0x1000
   14184:	mov	r1, #6
   14188:	movt	r0, #2
   1418c:	mov	sl, r7
   14190:	mov	r9, r8
   14194:	ldr	r7, [sp, #8]
   14198:	ldr	r6, [sp, #16]
   1419c:	bl	13700 <__assert_fail@plt+0x1b08>
   141a0:	mov	r3, #5
   141a4:	ldrb	r1, [sl, #32]
   141a8:	mov	r2, r3
   141ac:	str	r3, [sl]
   141b0:	ldr	r3, [sl, #4]
   141b4:	b	13d24 <__assert_fail@plt+0x212c>
   141b8:	movw	r0, #4088	; 0xff8
   141bc:	mov	r1, #5
   141c0:	movt	r0, #2
   141c4:	mov	sl, r7
   141c8:	mov	r9, r8
   141cc:	ldr	r7, [sp, #8]
   141d0:	ldr	r6, [sp, #16]
   141d4:	bl	13700 <__assert_fail@plt+0x1b08>
   141d8:	b	141a0 <__assert_fail@plt+0x25a8>
   141dc:	mov	r9, r8
   141e0:	mov	r8, sl
   141e4:	mov	sl, r7
   141e8:	ldr	ip, [sp, #12]
   141ec:	ldr	r7, [sp, #8]
   141f0:	movw	r0, #4124	; 0x101c
   141f4:	ldr	r6, [sp, #16]
   141f8:	movt	r0, #2
   141fc:	ldrb	r2, [sl, #32]
   14200:	mov	r3, #0
   14204:	str	ip, [sl, #4]
   14208:	strb	r2, [r8]
   1420c:	ldr	r4, [sp, #24]
   14210:	str	ip, [r4]
   14214:	ldr	ip, [sp, #28]
   14218:	ldr	r4, [sp, #12]
   1421c:	str	r3, [ip]
   14220:	ldrb	r2, [r4]
   14224:	strb	r3, [r4]
   14228:	strb	r2, [sl, #32]
   1422c:	bl	13854 <__assert_fail@plt+0x1c5c>
   14230:	mov	r2, #5
   14234:	ldr	r3, [sl, #4]
   14238:	str	r2, [sl]
   1423c:	ldrb	r1, [sl, #32]
   14240:	b	13d24 <__assert_fail@plt+0x212c>
   14244:	ldr	ip, [sp, #24]
   14248:	mov	sl, r7
   1424c:	ldr	r4, [sp, #28]
   14250:	mov	r9, r8
   14254:	ldr	r7, [sp, #8]
   14258:	ldr	r0, [ip]
   1425c:	ldr	r1, [r4]
   14260:	ldr	r6, [sp, #16]
   14264:	bl	137cc <__assert_fail@plt+0x1bd4>
   14268:	mov	r1, #3
   1426c:	movw	r0, #4124	; 0x101c
   14270:	movt	r0, #2
   14274:	bl	13700 <__assert_fail@plt+0x1b08>
   14278:	mov	r3, #13
   1427c:	mov	r2, r3
   14280:	str	r3, [sl]
   14284:	ldrb	r1, [sl, #32]
   14288:	ldr	r3, [sl, #4]
   1428c:	b	13d24 <__assert_fail@plt+0x212c>
   14290:	mov	sl, r7
   14294:	ldr	r6, [sp, #16]
   14298:	ldr	r7, [sp, #8]
   1429c:	movw	r0, #4052	; 0xfd4
   142a0:	movt	r0, #2
   142a4:	mov	r9, r8
   142a8:	bl	13854 <__assert_fail@plt+0x1c5c>
   142ac:	b	141a0 <__assert_fail@plt+0x25a8>
   142b0:	mov	sl, r7
   142b4:	movw	r0, #4020	; 0xfb4
   142b8:	mov	r9, r8
   142bc:	ldr	r7, [sp, #8]
   142c0:	ldr	r6, [sp, #16]
   142c4:	movt	r0, #2
   142c8:	b	142a8 <__assert_fail@plt+0x26b0>
   142cc:	mov	sl, r7
   142d0:	movw	r0, #3988	; 0xf94
   142d4:	mov	r9, r8
   142d8:	ldr	r7, [sp, #8]
   142dc:	ldr	r6, [sp, #16]
   142e0:	movt	r0, #2
   142e4:	b	142a8 <__assert_fail@plt+0x26b0>
   142e8:	ldr	ip, [sp, #12]
   142ec:	mov	r9, r8
   142f0:	mov	r8, sl
   142f4:	mov	sl, r7
   142f8:	movw	r0, #3980	; 0xf8c
   142fc:	ldr	r7, [sp, #8]
   14300:	ldr	r6, [sp, #16]
   14304:	mov	r3, #0
   14308:	ldrb	r2, [sl, #32]
   1430c:	movt	r0, #2
   14310:	str	ip, [sl, #4]
   14314:	b	14208 <__assert_fail@plt+0x2610>
   14318:	mov	sl, r7
   1431c:	ldr	r6, [sp, #16]
   14320:	ldr	r7, [sp, #8]
   14324:	movw	r0, #3980	; 0xf8c
   14328:	movt	r0, #2
   1432c:	mov	r9, r8
   14330:	bl	13854 <__assert_fail@plt+0x1c5c>
   14334:	ldr	ip, [sp, #24]
   14338:	ldr	r4, [sp, #28]
   1433c:	ldr	r0, [ip]
   14340:	ldr	r1, [r4]
   14344:	bl	137cc <__assert_fail@plt+0x1bd4>
   14348:	b	141a0 <__assert_fail@plt+0x25a8>
   1434c:	ldr	ip, [sp, #12]
   14350:	mov	r9, r8
   14354:	mov	r8, sl
   14358:	mov	sl, r7
   1435c:	movw	r0, #3712	; 0xe80
   14360:	ldr	r7, [sp, #8]
   14364:	ldr	r6, [sp, #16]
   14368:	mov	r3, #0
   1436c:	ldrb	r2, [sl, #32]
   14370:	movt	r0, #2
   14374:	str	ip, [sl, #4]
   14378:	b	14208 <__assert_fail@plt+0x2610>
   1437c:	mov	sl, r7
   14380:	movw	r0, #3956	; 0xf74
   14384:	mov	r9, r8
   14388:	ldr	r7, [sp, #8]
   1438c:	ldr	r6, [sp, #16]
   14390:	movt	r0, #2
   14394:	b	142a8 <__assert_fail@plt+0x26b0>
   14398:	mov	sl, r7
   1439c:	movw	r0, #3932	; 0xf5c
   143a0:	mov	r9, r8
   143a4:	ldr	r7, [sp, #8]
   143a8:	ldr	r6, [sp, #16]
   143ac:	movt	r0, #2
   143b0:	b	142a8 <__assert_fail@plt+0x26b0>
   143b4:	mov	sl, r7
   143b8:	movw	r0, #3908	; 0xf44
   143bc:	mov	r9, r8
   143c0:	ldr	r7, [sp, #8]
   143c4:	ldr	r6, [sp, #16]
   143c8:	movt	r0, #2
   143cc:	b	142a8 <__assert_fail@plt+0x26b0>
   143d0:	mov	sl, r7
   143d4:	movw	r0, #3884	; 0xf2c
   143d8:	mov	r9, r8
   143dc:	ldr	r7, [sp, #8]
   143e0:	ldr	r6, [sp, #16]
   143e4:	movt	r0, #2
   143e8:	b	142a8 <__assert_fail@plt+0x26b0>
   143ec:	mov	sl, r7
   143f0:	movw	r0, #3864	; 0xf18
   143f4:	mov	r9, r8
   143f8:	ldr	r7, [sp, #8]
   143fc:	ldr	r6, [sp, #16]
   14400:	movt	r0, #2
   14404:	b	142a8 <__assert_fail@plt+0x26b0>
   14408:	mov	sl, r7
   1440c:	movw	r0, #3844	; 0xf04
   14410:	mov	r9, r8
   14414:	ldr	r7, [sp, #8]
   14418:	ldr	r6, [sp, #16]
   1441c:	movt	r0, #2
   14420:	b	142a8 <__assert_fail@plt+0x26b0>
   14424:	mov	sl, r7
   14428:	movw	r0, #3824	; 0xef0
   1442c:	mov	r9, r8
   14430:	ldr	r7, [sp, #8]
   14434:	ldr	r6, [sp, #16]
   14438:	movt	r0, #2
   1443c:	b	142a8 <__assert_fail@plt+0x26b0>
   14440:	mov	sl, r7
   14444:	movw	r0, #3804	; 0xedc
   14448:	mov	r9, r8
   1444c:	ldr	r7, [sp, #8]
   14450:	ldr	r6, [sp, #16]
   14454:	movt	r0, #2
   14458:	b	142a8 <__assert_fail@plt+0x26b0>
   1445c:	mov	sl, r7
   14460:	movw	r0, #3784	; 0xec8
   14464:	mov	r9, r8
   14468:	ldr	r7, [sp, #8]
   1446c:	ldr	r6, [sp, #16]
   14470:	movt	r0, #2
   14474:	b	142a8 <__assert_fail@plt+0x26b0>
   14478:	mov	sl, r7
   1447c:	movw	r0, #3764	; 0xeb4
   14480:	mov	r9, r8
   14484:	ldr	r7, [sp, #8]
   14488:	ldr	r6, [sp, #16]
   1448c:	movt	r0, #2
   14490:	b	142a8 <__assert_fail@plt+0x26b0>
   14494:	mov	sl, r7
   14498:	movw	r0, #3744	; 0xea0
   1449c:	mov	r9, r8
   144a0:	ldr	r7, [sp, #8]
   144a4:	ldr	r6, [sp, #16]
   144a8:	movt	r0, #2
   144ac:	b	142a8 <__assert_fail@plt+0x26b0>
   144b0:	mov	sl, r7
   144b4:	movw	r0, #3724	; 0xe8c
   144b8:	mov	r9, r8
   144bc:	ldr	r7, [sp, #8]
   144c0:	ldr	r6, [sp, #16]
   144c4:	movt	r0, #2
   144c8:	b	142a8 <__assert_fail@plt+0x26b0>
   144cc:	mov	sl, r7
   144d0:	movw	r0, #3700	; 0xe74
   144d4:	mov	r9, r8
   144d8:	ldr	r7, [sp, #8]
   144dc:	ldr	r6, [sp, #16]
   144e0:	movt	r0, #2
   144e4:	b	142a8 <__assert_fail@plt+0x26b0>
   144e8:	movw	r0, #3696	; 0xe70
   144ec:	movt	r0, #2
   144f0:	mov	sl, r7
   144f4:	ldr	r6, [sp, #16]
   144f8:	ldr	r7, [sp, #8]
   144fc:	bl	13854 <__assert_fail@plt+0x1c5c>
   14500:	mov	r3, #15
   14504:	mov	r9, r8
   14508:	mov	r2, r3
   1450c:	str	r3, [sl]
   14510:	ldrb	r1, [sl, #32]
   14514:	ldr	r3, [sl, #4]
   14518:	b	13d24 <__assert_fail@plt+0x212c>
   1451c:	mov	sl, r7
   14520:	movw	r0, #3900	; 0xf3c
   14524:	movt	r0, #2
   14528:	ldr	r7, [sp, #8]
   1452c:	ldr	r6, [sp, #16]
   14530:	mov	r9, r8
   14534:	bl	13854 <__assert_fail@plt+0x1c5c>
   14538:	ldr	r3, [sl, #4]
   1453c:	ldrb	r1, [sl, #32]
   14540:	ldr	r2, [sl]
   14544:	b	13d24 <__assert_fail@plt+0x212c>
   14548:	mov	sl, r7
   1454c:	mov	r2, #21
   14550:	mov	r9, r8
   14554:	ldr	r7, [sp, #8]
   14558:	ldr	r6, [sp, #16]
   1455c:	ldr	r3, [sl, #4]
   14560:	str	r2, [sl]
   14564:	ldrb	r1, [sl, #32]
   14568:	b	13d24 <__assert_fail@plt+0x212c>
   1456c:	mov	sl, r7
   14570:	mov	r2, #19
   14574:	mov	r9, r8
   14578:	ldr	r7, [sp, #8]
   1457c:	ldr	r6, [sp, #16]
   14580:	ldr	r3, [sl, #4]
   14584:	str	r2, [sl]
   14588:	ldrb	r1, [sl, #32]
   1458c:	b	13d24 <__assert_fail@plt+0x212c>
   14590:	mov	sl, r7
   14594:	mov	r2, #17
   14598:	mov	r9, r8
   1459c:	ldr	r7, [sp, #8]
   145a0:	ldr	r6, [sp, #16]
   145a4:	ldr	r3, [sl, #4]
   145a8:	str	r2, [sl]
   145ac:	ldrb	r1, [sl, #32]
   145b0:	b	13d24 <__assert_fail@plt+0x212c>
   145b4:	mov	sl, r7
   145b8:	mov	r2, #11
   145bc:	mov	r9, r8
   145c0:	ldr	r7, [sp, #8]
   145c4:	ldr	r6, [sp, #16]
   145c8:	ldr	r3, [sl, #4]
   145cc:	str	r2, [sl]
   145d0:	ldrb	r1, [sl, #32]
   145d4:	b	13d24 <__assert_fail@plt+0x212c>
   145d8:	mov	sl, r7
   145dc:	mov	r2, #9
   145e0:	mov	r9, r8
   145e4:	ldr	r7, [sp, #8]
   145e8:	ldr	r6, [sp, #16]
   145ec:	ldr	r3, [sl, #4]
   145f0:	str	r2, [sl]
   145f4:	ldrb	r1, [sl, #32]
   145f8:	b	13d24 <__assert_fail@plt+0x212c>
   145fc:	mov	sl, r7
   14600:	mov	r2, #7
   14604:	mov	r9, r8
   14608:	ldr	r7, [sp, #8]
   1460c:	ldr	r6, [sp, #16]
   14610:	ldr	r3, [sl, #4]
   14614:	str	r2, [sl]
   14618:	ldrb	r1, [sl, #32]
   1461c:	b	13d24 <__assert_fail@plt+0x212c>
   14620:	mov	sl, r7
   14624:	movw	r0, #4128	; 0x1020
   14628:	mov	r9, r8
   1462c:	ldr	r7, [sp, #8]
   14630:	ldr	r6, [sp, #16]
   14634:	movt	r0, #2
   14638:	b	14330 <__assert_fail@plt+0x2738>
   1463c:	ldr	ip, [sp, #12]
   14640:	mov	r9, r8
   14644:	mov	r8, sl
   14648:	mov	sl, r7
   1464c:	movw	r0, #4128	; 0x1020
   14650:	ldr	r7, [sp, #8]
   14654:	ldr	r6, [sp, #16]
   14658:	mov	r3, #0
   1465c:	ldrb	r2, [sl, #32]
   14660:	movt	r0, #2
   14664:	str	ip, [sl, #4]
   14668:	b	14208 <__assert_fail@plt+0x2610>
   1466c:	mov	sl, r7
   14670:	movw	r0, #4136	; 0x1028
   14674:	mov	r9, r8
   14678:	ldr	r7, [sp, #8]
   1467c:	ldr	r6, [sp, #16]
   14680:	movt	r0, #2
   14684:	b	14330 <__assert_fail@plt+0x2738>
   14688:	ldr	ip, [sp, #12]
   1468c:	mov	r9, r8
   14690:	mov	r8, sl
   14694:	mov	sl, r7
   14698:	movw	r0, #4136	; 0x1028
   1469c:	ldr	r7, [sp, #8]
   146a0:	ldr	r6, [sp, #16]
   146a4:	mov	r3, #0
   146a8:	ldrb	r2, [sl, #32]
   146ac:	movt	r0, #2
   146b0:	str	ip, [sl, #4]
   146b4:	b	14208 <__assert_fail@plt+0x2610>
   146b8:	mov	sl, r7
   146bc:	mov	r0, #17
   146c0:	ldr	r7, [sp, #8]
   146c4:	mov	r9, r8
   146c8:	ldr	r6, [sp, #16]
   146cc:	bl	13654 <__assert_fail@plt+0x1a5c>
   146d0:	ldr	r3, [sl, #4]
   146d4:	ldrb	r1, [sl, #32]
   146d8:	ldr	r2, [sl]
   146dc:	b	13d24 <__assert_fail@plt+0x212c>
   146e0:	ldr	ip, [sp, #24]
   146e4:	mov	sl, r7
   146e8:	ldr	r4, [sp, #28]
   146ec:	mov	r9, r8
   146f0:	ldr	r7, [sp, #8]
   146f4:	ldr	r0, [ip]
   146f8:	ldr	r1, [r4]
   146fc:	ldr	r6, [sp, #16]
   14700:	bl	13700 <__assert_fail@plt+0x1b08>
   14704:	ldr	r3, [sl, #4]
   14708:	ldrb	r1, [sl, #32]
   1470c:	ldr	r2, [sl]
   14710:	b	13d24 <__assert_fail@plt+0x212c>
   14714:	mov	sl, r7
   14718:	mov	r1, #2
   1471c:	movw	r0, #4144	; 0x1030
   14720:	movt	r0, #2
   14724:	ldr	r7, [sp, #8]
   14728:	mov	r9, r8
   1472c:	ldr	r6, [sp, #16]
   14730:	bl	13700 <__assert_fail@plt+0x1b08>
   14734:	ldr	r3, [sl, #4]
   14738:	ldrb	r1, [sl, #32]
   1473c:	ldr	r2, [sl]
   14740:	b	13d24 <__assert_fail@plt+0x212c>
   14744:	ldr	r4, [sp, #24]
   14748:	mov	sl, r7
   1474c:	mov	r1, #8
   14750:	mov	r3, #1
   14754:	ldr	r0, [pc, #3036]	; 15338 <__assert_fail@plt+0x3740>
   14758:	mov	r9, r8
   1475c:	ldr	r2, [r4]
   14760:	ldr	r7, [sp, #8]
   14764:	add	r2, r2, #2
   14768:	ldr	r6, [sp, #16]
   1476c:	bl	1374c <__assert_fail@plt+0x1b54>
   14770:	ldr	r3, [sl, #4]
   14774:	ldrb	r1, [sl, #32]
   14778:	ldr	r2, [sl]
   1477c:	b	13d24 <__assert_fail@plt+0x212c>
   14780:	ldr	ip, [sp, #24]
   14784:	mov	sl, r7
   14788:	mov	r1, #8
   1478c:	mov	r3, #2
   14790:	ldr	r0, [pc, #2976]	; 15338 <__assert_fail@plt+0x3740>
   14794:	mov	r9, r8
   14798:	ldr	r2, [ip]
   1479c:	ldr	r7, [sp, #8]
   147a0:	add	r2, r2, #3
   147a4:	ldr	r6, [sp, #16]
   147a8:	bl	1374c <__assert_fail@plt+0x1b54>
   147ac:	ldr	r3, [sl, #4]
   147b0:	ldrb	r1, [sl, #32]
   147b4:	ldr	r2, [sl]
   147b8:	b	13d24 <__assert_fail@plt+0x212c>
   147bc:	ldr	r4, [sp, #24]
   147c0:	mov	sl, r7
   147c4:	mov	r3, #2
   147c8:	mov	r1, #113	; 0x71
   147cc:	ldr	r0, [pc, #2920]	; 1533c <__assert_fail@plt+0x3744>
   147d0:	mov	r9, r8
   147d4:	ldr	r2, [r4]
   147d8:	ldr	r7, [sp, #8]
   147dc:	add	r2, r2, r3
   147e0:	ldr	r6, [sp, #16]
   147e4:	bl	1374c <__assert_fail@plt+0x1b54>
   147e8:	ldr	r3, [sl, #4]
   147ec:	ldrb	r1, [sl, #32]
   147f0:	ldr	r2, [sl]
   147f4:	b	13d24 <__assert_fail@plt+0x212c>
   147f8:	mov	sl, r7
   147fc:	ldr	r6, [sp, #16]
   14800:	ldr	r7, [sp, #8]
   14804:	bl	136a8 <__assert_fail@plt+0x1ab0>
   14808:	ldr	ip, [sp, #24]
   1480c:	mov	r9, r8
   14810:	ldr	r4, [sp, #28]
   14814:	ldr	r2, [ip]
   14818:	ldr	r3, [r4]
   1481c:	add	r3, r2, r3
   14820:	ldrb	r0, [r3, #-1]
   14824:	bl	13654 <__assert_fail@plt+0x1a5c>
   14828:	ldr	r3, [sl, #4]
   1482c:	ldrb	r1, [sl, #32]
   14830:	ldr	r2, [sl]
   14834:	b	13d24 <__assert_fail@plt+0x212c>
   14838:	ldr	ip, [sp, #24]
   1483c:	mov	sl, r7
   14840:	ldr	r6, [sp, #16]
   14844:	mov	r9, r8
   14848:	ldr	r7, [sp, #8]
   1484c:	ldr	r3, [ip]
   14850:	ldrb	r0, [r3]
   14854:	bl	13654 <__assert_fail@plt+0x1a5c>
   14858:	ldr	r3, [sl, #4]
   1485c:	ldrb	r1, [sl, #32]
   14860:	ldr	r2, [sl]
   14864:	b	13d24 <__assert_fail@plt+0x212c>
   14868:	ldr	r4, [sp, #24]
   1486c:	mov	sl, r7
   14870:	ldr	ip, [sp, #28]
   14874:	mov	r2, #1
   14878:	ldr	r7, [sp, #8]
   1487c:	mov	r9, r8
   14880:	ldr	r0, [r4]
   14884:	ldr	r4, [sp, #32]
   14888:	ldr	r1, [ip]
   1488c:	ldr	r6, [sp, #16]
   14890:	ldr	r3, [r4, #72]	; 0x48
   14894:	bl	118bc <fwrite@plt>
   14898:	ldr	r3, [sl, #4]
   1489c:	ldrb	r1, [sl, #32]
   148a0:	ldr	r2, [sl]
   148a4:	b	13d24 <__assert_fail@plt+0x212c>
   148a8:	mov	sl, r7
   148ac:	mov	r0, #9
   148b0:	ldr	r7, [sp, #8]
   148b4:	mov	r9, r8
   148b8:	ldr	r6, [sp, #16]
   148bc:	bl	13654 <__assert_fail@plt+0x1a5c>
   148c0:	ldr	r3, [sl, #4]
   148c4:	ldrb	r1, [sl, #32]
   148c8:	ldr	r2, [sl]
   148cc:	b	13d24 <__assert_fail@plt+0x212c>
   148d0:	mov	sl, r7
   148d4:	mov	r0, #95	; 0x5f
   148d8:	ldr	r7, [sp, #8]
   148dc:	mov	r9, r8
   148e0:	ldr	r6, [sp, #16]
   148e4:	bl	13654 <__assert_fail@plt+0x1a5c>
   148e8:	ldr	r3, [sl, #4]
   148ec:	ldrb	r1, [sl, #32]
   148f0:	ldr	r2, [sl]
   148f4:	b	13d24 <__assert_fail@plt+0x212c>
   148f8:	movw	r0, #4112	; 0x1010
   148fc:	mov	r1, #6
   14900:	movt	r0, #2
   14904:	mov	sl, r7
   14908:	mov	r9, r8
   1490c:	ldr	r7, [sp, #8]
   14910:	ldr	r6, [sp, #16]
   14914:	bl	13700 <__assert_fail@plt+0x1b08>
   14918:	b	141a0 <__assert_fail@plt+0x25a8>
   1491c:	mov	sl, r7
   14920:	mov	r0, #46	; 0x2e
   14924:	ldr	r7, [sp, #8]
   14928:	mov	r9, r8
   1492c:	ldr	r6, [sp, #16]
   14930:	bl	13654 <__assert_fail@plt+0x1a5c>
   14934:	ldr	r3, [sl, #4]
   14938:	ldrb	r1, [sl, #32]
   1493c:	ldr	r2, [sl]
   14940:	b	13d24 <__assert_fail@plt+0x212c>
   14944:	mov	sl, r7
   14948:	mov	r0, #45	; 0x2d
   1494c:	ldr	r7, [sp, #8]
   14950:	mov	r9, r8
   14954:	ldr	r6, [sp, #16]
   14958:	bl	13654 <__assert_fail@plt+0x1a5c>
   1495c:	ldr	r3, [sl, #4]
   14960:	ldrb	r1, [sl, #32]
   14964:	ldr	r2, [sl]
   14968:	b	13d24 <__assert_fail@plt+0x212c>
   1496c:	mov	sl, r7
   14970:	mov	r0, #96	; 0x60
   14974:	ldr	r7, [sp, #8]
   14978:	mov	r9, r8
   1497c:	ldr	r6, [sp, #16]
   14980:	bl	13654 <__assert_fail@plt+0x1a5c>
   14984:	ldr	r3, [sl, #4]
   14988:	ldrb	r1, [sl, #32]
   1498c:	ldr	r2, [sl]
   14990:	b	13d24 <__assert_fail@plt+0x212c>
   14994:	mov	sl, r7
   14998:	mov	r0, #39	; 0x27
   1499c:	ldr	r7, [sp, #8]
   149a0:	mov	r9, r8
   149a4:	ldr	r6, [sp, #16]
   149a8:	bl	13654 <__assert_fail@plt+0x1a5c>
   149ac:	ldr	r3, [sl, #4]
   149b0:	ldrb	r1, [sl, #32]
   149b4:	ldr	r2, [sl]
   149b8:	b	13d24 <__assert_fail@plt+0x212c>
   149bc:	mov	sl, r7
   149c0:	mov	r0, #92	; 0x5c
   149c4:	ldr	r7, [sp, #8]
   149c8:	mov	r9, r8
   149cc:	ldr	r6, [sp, #16]
   149d0:	bl	13654 <__assert_fail@plt+0x1a5c>
   149d4:	ldr	r3, [sl, #4]
   149d8:	ldrb	r1, [sl, #32]
   149dc:	ldr	r2, [sl]
   149e0:	b	13d24 <__assert_fail@plt+0x212c>
   149e4:	mov	sl, r7
   149e8:	ldr	r2, [pc, #2384]	; 15340 <__assert_fail@plt+0x3748>
   149ec:	ldr	r3, [sl, #40]	; 0x28
   149f0:	mov	r9, r8
   149f4:	ldr	r7, [sp, #8]
   149f8:	cmp	r3, r2
   149fc:	ldr	r6, [sp, #16]
   14a00:	beq	14a18 <__assert_fail@plt+0x2e20>
   14a04:	ldrb	r3, [r3, #-1]
   14a08:	cmp	r3, #32
   14a0c:	beq	14a18 <__assert_fail@plt+0x2e20>
   14a10:	mov	r0, #32
   14a14:	bl	13654 <__assert_fail@plt+0x1a5c>
   14a18:	mov	r1, #2
   14a1c:	movw	r0, #3692	; 0xe6c
   14a20:	movt	r0, #2
   14a24:	bl	13700 <__assert_fail@plt+0x1b08>
   14a28:	ldr	r3, [sl, #4]
   14a2c:	ldrb	r1, [sl, #32]
   14a30:	ldr	r2, [sl]
   14a34:	b	13d24 <__assert_fail@plt+0x212c>
   14a38:	ldrb	r3, [r7, #32]
   14a3c:	ldr	r6, [r7, #16]
   14a40:	ldr	r0, [r7, #20]
   14a44:	ldr	ip, [sp, #24]
   14a48:	ldr	r2, [ip]
   14a4c:	strb	r3, [sl]
   14a50:	ldr	r3, [r6, r0, lsl #2]
   14a54:	rsb	r2, r2, sl
   14a58:	sub	r2, r2, #1
   14a5c:	str	r2, [sp, #44]	; 0x2c
   14a60:	add	r2, r6, r0, lsl #2
   14a64:	str	r2, [sp, #48]	; 0x30
   14a68:	ldr	r2, [r3, #44]	; 0x2c
   14a6c:	cmp	r2, #0
   14a70:	bne	14f00 <__assert_fail@plt+0x3308>
   14a74:	ldr	ip, [sp, #36]	; 0x24
   14a78:	ldr	r2, [r3, #16]
   14a7c:	ldr	r1, [ip, #28]
   14a80:	str	r2, [ip, #24]
   14a84:	str	r1, [r3]
   14a88:	mov	r1, r2
   14a8c:	ldr	r3, [r6, r0, lsl #2]
   14a90:	mov	r2, #1
   14a94:	str	r2, [r3, #44]	; 0x2c
   14a98:	ldr	ip, [r3, #4]
   14a9c:	movw	r4, #9024	; 0x2340
   14aa0:	ldr	r2, [r7, #4]
   14aa4:	movt	r4, #3
   14aa8:	add	r9, ip, r1
   14aac:	cmp	r9, r2
   14ab0:	bcs	14f5c <__assert_fail@plt+0x3364>
   14ab4:	ldr	r4, [sp, #24]
   14ab8:	add	r1, r1, #1
   14abc:	str	r1, [sp, #52]	; 0x34
   14ac0:	ldr	r1, [r4]
   14ac4:	ldr	r4, [sp, #52]	; 0x34
   14ac8:	add	r4, ip, r4
   14acc:	cmp	r2, r4
   14ad0:	bhi	15118 <__assert_fail@plt+0x3520>
   14ad4:	ldr	r4, [r3, #40]	; 0x28
   14ad8:	cmp	r4, #0
   14adc:	bne	15024 <__assert_fail@plt+0x342c>
   14ae0:	rsb	r2, r1, r2
   14ae4:	cmp	r2, #1
   14ae8:	beq	14f30 <__assert_fail@plt+0x3338>
   14aec:	mov	sl, r9
   14af0:	str	sl, [r7, #4]
   14af4:	bl	11c04 <__assert_fail@plt+0xc>
   14af8:	ldr	ip, [sp, #24]
   14afc:	ldr	ip, [ip]
   14b00:	str	ip, [sp, #12]
   14b04:	b	13dec <__assert_fail@plt+0x21f4>
   14b08:	ldr	ip, [sp, #32]
   14b0c:	mov	sl, r7
   14b10:	mov	r2, #1
   14b14:	mov	r9, r8
   14b18:	ldr	r7, [sp, #8]
   14b1c:	str	r2, [ip, #56]	; 0x38
   14b20:	ldr	r6, [sp, #16]
   14b24:	ldr	r3, [sl, #4]
   14b28:	ldrb	r1, [sl, #32]
   14b2c:	ldr	r2, [sl]
   14b30:	b	13d24 <__assert_fail@plt+0x212c>
   14b34:	ldr	r4, [sp, #32]
   14b38:	mov	sl, r7
   14b3c:	mov	r2, #0
   14b40:	mov	r9, r8
   14b44:	ldr	r7, [sp, #8]
   14b48:	str	r2, [r4, #56]	; 0x38
   14b4c:	ldr	r6, [sp, #16]
   14b50:	ldr	r3, [sl, #4]
   14b54:	ldrb	r1, [sl, #32]
   14b58:	ldr	r2, [sl]
   14b5c:	b	13d24 <__assert_fail@plt+0x212c>
   14b60:	mov	r9, r8
   14b64:	mov	r8, sl
   14b68:	mov	sl, r7
   14b6c:	ldr	ip, [sp, #12]
   14b70:	ldrb	r2, [sl, #32]
   14b74:	mov	r3, r8
   14b78:	ldr	r4, [sp, #24]
   14b7c:	mov	r1, #0
   14b80:	ldr	r7, [sp, #8]
   14b84:	strb	r2, [r3], #-1
   14b88:	rsb	r2, ip, r3
   14b8c:	str	ip, [r4]
   14b90:	ldr	r6, [sp, #16]
   14b94:	ldr	ip, [sp, #28]
   14b98:	str	r2, [ip]
   14b9c:	ldrb	r2, [r8, #-1]
   14ba0:	strb	r1, [r8, #-1]
   14ba4:	str	r3, [sl, #4]
   14ba8:	strb	r2, [sl, #32]
   14bac:	bl	136a8 <__assert_fail@plt+0x1ab0>
   14bb0:	ldr	r3, [sl, #4]
   14bb4:	ldrb	r1, [sl, #32]
   14bb8:	ldr	r2, [sl]
   14bbc:	b	13d24 <__assert_fail@plt+0x212c>
   14bc0:	mov	r9, r8
   14bc4:	mov	r8, sl
   14bc8:	mov	sl, r7
   14bcc:	ldr	r4, [sp, #12]
   14bd0:	ldrb	r2, [sl, #32]
   14bd4:	mov	r3, r8
   14bd8:	ldr	ip, [sp, #24]
   14bdc:	mov	r1, #0
   14be0:	ldr	r7, [sp, #8]
   14be4:	strb	r2, [r3], #-1
   14be8:	rsb	r2, r4, r3
   14bec:	str	r4, [ip]
   14bf0:	ldr	r4, [sp, #28]
   14bf4:	ldr	r6, [sp, #16]
   14bf8:	str	r2, [r4]
   14bfc:	b	14b9c <__assert_fail@plt+0x2fa4>
   14c00:	mov	sl, r7
   14c04:	ldr	r6, [sp, #16]
   14c08:	ldr	r7, [sp, #8]
   14c0c:	mov	r9, r8
   14c10:	bl	136a8 <__assert_fail@plt+0x1ab0>
   14c14:	ldr	r3, [sl, #4]
   14c18:	ldrb	r1, [sl, #32]
   14c1c:	ldr	r2, [sl]
   14c20:	b	13d24 <__assert_fail@plt+0x212c>
   14c24:	mov	sl, r7
   14c28:	ldr	r6, [sp, #16]
   14c2c:	ldr	r7, [sp, #8]
   14c30:	bl	136a8 <__assert_fail@plt+0x1ab0>
   14c34:	ldr	ip, [sp, #32]
   14c38:	mov	r2, #1
   14c3c:	mov	r9, r8
   14c40:	ldr	r3, [sl, #4]
   14c44:	ldrb	r1, [sl, #32]
   14c48:	str	r2, [ip, #52]	; 0x34
   14c4c:	ldr	r2, [sl]
   14c50:	b	13d24 <__assert_fail@plt+0x212c>
   14c54:	ldr	r2, [r7, #40]	; 0x28
   14c58:	mov	r3, #0
   14c5c:	mov	r1, #29
   14c60:	mov	r0, r3
   14c64:	str	r1, [r7]
   14c68:	strb	r3, [r2]
   14c6c:	b	1413c <__assert_fail@plt+0x2544>
   14c70:	ldr	ip, [sp, #24]
   14c74:	mov	sl, r7
   14c78:	ldr	r4, [sp, #28]
   14c7c:	mov	r9, r8
   14c80:	ldr	r7, [sp, #8]
   14c84:	ldr	r0, [ip]
   14c88:	ldr	r1, [r4]
   14c8c:	ldr	r6, [sp, #16]
   14c90:	bl	13700 <__assert_fail@plt+0x1b08>
   14c94:	mov	r0, #34	; 0x22
   14c98:	bl	13654 <__assert_fail@plt+0x1a5c>
   14c9c:	b	141a0 <__assert_fail@plt+0x25a8>
   14ca0:	mov	r9, r8
   14ca4:	mov	r8, sl
   14ca8:	mov	sl, r7
   14cac:	ldr	ip, [sp, #12]
   14cb0:	ldrb	r1, [sl, #32]
   14cb4:	mov	r0, #0
   14cb8:	ldr	r4, [sp, #24]
   14cbc:	add	r3, ip, #1
   14cc0:	rsb	r2, ip, r3
   14cc4:	ldr	r7, [sp, #8]
   14cc8:	strb	r1, [r8]
   14ccc:	str	ip, [r4]
   14cd0:	ldr	r4, [sp, #12]
   14cd4:	ldr	ip, [sp, #28]
   14cd8:	ldr	r6, [sp, #16]
   14cdc:	str	r3, [sl, #4]
   14ce0:	str	r2, [ip]
   14ce4:	ldrb	r1, [r4, #1]
   14ce8:	ldr	r2, [sl]
   14cec:	strb	r0, [r4, #1]
   14cf0:	strb	r1, [sl, #32]
   14cf4:	b	13d24 <__assert_fail@plt+0x212c>
   14cf8:	mov	r0, #1
   14cfc:	b	1413c <__assert_fail@plt+0x2544>
   14d00:	mov	sl, r7
   14d04:	movw	r0, #4120	; 0x1018
   14d08:	mov	r9, r8
   14d0c:	ldr	r7, [sp, #8]
   14d10:	ldr	r6, [sp, #16]
   14d14:	movt	r0, #2
   14d18:	b	14330 <__assert_fail@plt+0x2738>
   14d1c:	ldr	ip, [sp, #12]
   14d20:	mov	r9, r8
   14d24:	mov	r8, sl
   14d28:	mov	sl, r7
   14d2c:	movw	r0, #4120	; 0x1018
   14d30:	ldr	r7, [sp, #8]
   14d34:	ldr	r6, [sp, #16]
   14d38:	mov	r3, #0
   14d3c:	ldrb	r2, [sl, #32]
   14d40:	movt	r0, #2
   14d44:	str	ip, [sl, #4]
   14d48:	b	14208 <__assert_fail@plt+0x2610>
   14d4c:	movw	r0, #4104	; 0x1008
   14d50:	mov	r1, #5
   14d54:	movt	r0, #2
   14d58:	mov	sl, r7
   14d5c:	mov	r9, r8
   14d60:	ldr	r7, [sp, #8]
   14d64:	ldr	r6, [sp, #16]
   14d68:	bl	13700 <__assert_fail@plt+0x1b08>
   14d6c:	b	141a0 <__assert_fail@plt+0x25a8>
   14d70:	ldr	r4, [sp, #32]
   14d74:	mov	sl, r7
   14d78:	mov	r2, #118	; 0x76
   14d7c:	mov	r9, r8
   14d80:	ldr	r7, [sp, #8]
   14d84:	strb	r2, [r4, #81]	; 0x51
   14d88:	ldr	r6, [sp, #16]
   14d8c:	ldr	r3, [sl, #4]
   14d90:	ldrb	r1, [sl, #32]
   14d94:	ldr	r2, [sl]
   14d98:	b	13d24 <__assert_fail@plt+0x212c>
   14d9c:	ldr	ip, [sp, #32]
   14da0:	mov	sl, r7
   14da4:	mov	r2, #114	; 0x72
   14da8:	mov	r9, r8
   14dac:	ldr	r7, [sp, #8]
   14db0:	strb	r2, [ip, #80]	; 0x50
   14db4:	ldr	r6, [sp, #16]
   14db8:	ldr	r3, [sl, #4]
   14dbc:	ldrb	r1, [sl, #32]
   14dc0:	ldr	r2, [sl]
   14dc4:	b	13d24 <__assert_fail@plt+0x212c>
   14dc8:	ldr	r4, [sp, #32]
   14dcc:	mov	sl, r7
   14dd0:	mov	r2, #103	; 0x67
   14dd4:	mov	r9, r8
   14dd8:	ldr	r7, [sp, #8]
   14ddc:	strb	r2, [r4, #79]	; 0x4f
   14de0:	ldr	r6, [sp, #16]
   14de4:	ldr	r3, [sl, #4]
   14de8:	ldrb	r1, [sl, #32]
   14dec:	ldr	r2, [sl]
   14df0:	b	13d24 <__assert_fail@plt+0x212c>
   14df4:	ldr	ip, [sp, #32]
   14df8:	mov	sl, r7
   14dfc:	mov	r2, #112	; 0x70
   14e00:	mov	r9, r8
   14e04:	ldr	r7, [sp, #8]
   14e08:	strb	r2, [ip, #78]	; 0x4e
   14e0c:	ldr	r6, [sp, #16]
   14e10:	ldr	r3, [sl, #4]
   14e14:	ldrb	r1, [sl, #32]
   14e18:	ldr	r2, [sl]
   14e1c:	b	13d24 <__assert_fail@plt+0x212c>
   14e20:	ldr	r4, [sp, #32]
   14e24:	mov	sl, r7
   14e28:	mov	r2, #101	; 0x65
   14e2c:	mov	r9, r8
   14e30:	ldr	r7, [sp, #8]
   14e34:	strb	r2, [r4, #77]	; 0x4d
   14e38:	ldr	r6, [sp, #16]
   14e3c:	ldr	r3, [sl, #4]
   14e40:	ldrb	r1, [sl, #32]
   14e44:	ldr	r2, [sl]
   14e48:	b	13d24 <__assert_fail@plt+0x212c>
   14e4c:	ldr	ip, [sp, #32]
   14e50:	mov	sl, r7
   14e54:	mov	r2, #116	; 0x74
   14e58:	mov	r9, r8
   14e5c:	ldr	r7, [sp, #8]
   14e60:	strb	r2, [ip, #76]	; 0x4c
   14e64:	ldr	r6, [sp, #16]
   14e68:	ldr	r3, [sl, #4]
   14e6c:	ldrb	r1, [sl, #32]
   14e70:	ldr	r2, [sl]
   14e74:	b	13d24 <__assert_fail@plt+0x212c>
   14e78:	ldr	r3, [sp, #20]
   14e7c:	ldr	r7, [sp, #8]
   14e80:	ldr	r6, [sp, #16]
   14e84:	ldr	r4, [r3, #4]
   14e88:	ldrb	r1, [r3, #32]
   14e8c:	ldr	r0, [r3]
   14e90:	str	r4, [sp, #12]
   14e94:	b	13d38 <__assert_fail@plt+0x2140>
   14e98:	mov	sl, r7
   14e9c:	mov	r2, #23
   14ea0:	mov	r9, r8
   14ea4:	ldr	r7, [sp, #8]
   14ea8:	ldr	r6, [sp, #16]
   14eac:	ldr	r3, [sl, #4]
   14eb0:	str	r2, [sl]
   14eb4:	ldrb	r1, [sl, #32]
   14eb8:	b	13d24 <__assert_fail@plt+0x212c>
   14ebc:	mov	sl, r7
   14ec0:	mov	r2, #3
   14ec4:	mov	r9, r8
   14ec8:	ldr	r7, [sp, #8]
   14ecc:	ldr	r6, [sp, #16]
   14ed0:	ldr	r3, [sl, #4]
   14ed4:	str	r2, [sl]
   14ed8:	ldrb	r1, [sl, #32]
   14edc:	b	13d24 <__assert_fail@plt+0x212c>
   14ee0:	ldrb	r3, [r7, #32]
   14ee4:	ldr	r0, [r7, #8]
   14ee8:	strb	r3, [sl]
   14eec:	ldr	sl, [r7, #12]
   14ef0:	b	13dec <__assert_fail@plt+0x21f4>
   14ef4:	movw	r0, #4296	; 0x10c8
   14ef8:	movt	r0, #2
   14efc:	bl	13870 <__assert_fail@plt+0x1c78>
   14f00:	ldr	r4, [sp, #36]	; 0x24
   14f04:	ldr	r1, [r4, #24]
   14f08:	b	14a98 <__assert_fail@plt+0x2ea0>
   14f0c:	bl	1389c <__assert_fail@plt+0x1ca4>
   14f10:	ldr	r0, [r8, #28]
   14f14:	mov	r1, #16384	; 0x4000
   14f18:	ldr	r5, [r8, #20]
   14f1c:	ldr	r4, [r8, #16]
   14f20:	bl	13b2c <__assert_fail@plt+0x1f34>
   14f24:	str	r0, [r4, r5, lsl #2]
   14f28:	b	13ccc <__assert_fail@plt+0x20d4>
   14f2c:	bl	11838 <__stack_chk_fail@plt>
   14f30:	mov	r2, r1
   14f34:	ldr	r3, [r7]
   14f38:	mov	ip, #0
   14f3c:	ldr	r4, [sp, #32]
   14f40:	sub	r3, r3, #1
   14f44:	str	r2, [r7, #4]
   14f48:	add	r3, r3, r3, lsr #31
   14f4c:	str	ip, [r4, #64]	; 0x40
   14f50:	asr	r3, r3, #1
   14f54:	add	r3, r3, #140	; 0x8c
   14f58:	b	13e24 <__assert_fail@plt+0x222c>
   14f5c:	ldr	ip, [sp, #24]
   14f60:	ldr	r3, [sp, #44]	; 0x2c
   14f64:	ldr	r9, [ip]
   14f68:	add	r9, r9, r3
   14f6c:	str	r9, [r4, #4]
   14f70:	bl	11c04 <__assert_fail@plt+0xc>
   14f74:	lsl	r3, r0, #1
   14f78:	add	r2, r8, r3
   14f7c:	add	r2, r2, #1024	; 0x400
   14f80:	ldrsh	r2, [r2]
   14f84:	cmp	r2, #0
   14f88:	strne	r0, [r4, #8]
   14f8c:	strne	r9, [r4, #12]
   14f90:	ldr	r4, [sp, #8]
   14f94:	add	r2, r4, r3
   14f98:	sub	r2, r2, #784	; 0x310
   14f9c:	ldrsh	r2, [r2]
   14fa0:	add	r1, r4, r2, lsl #1
   14fa4:	add	r1, r1, #2336	; 0x920
   14fa8:	add	r1, r1, #2
   14fac:	ldrsh	r1, [r1]
   14fb0:	cmp	r0, r1
   14fb4:	beq	14ff0 <__assert_fail@plt+0x33f8>
   14fb8:	mov	ip, r4
   14fbc:	add	r3, r8, r3
   14fc0:	add	r3, r3, #3760	; 0xeb0
   14fc4:	ldrsh	r0, [r3, #12]
   14fc8:	lsl	r3, r0, #1
   14fcc:	add	r2, ip, r3
   14fd0:	sub	r2, r2, #784	; 0x310
   14fd4:	ldrsh	r2, [r2]
   14fd8:	add	r1, ip, r2, lsl #1
   14fdc:	add	r1, r1, #2336	; 0x920
   14fe0:	add	r1, r1, #2
   14fe4:	ldrsh	r1, [r1]
   14fe8:	cmp	r0, r1
   14fec:	bne	14fbc <__assert_fail@plt+0x33c4>
   14ff0:	ldr	ip, [sp, #16]
   14ff4:	add	r2, ip, r2, lsl #1
   14ff8:	ldrsh	r0, [r2, #134]	; 0x86
   14ffc:	cmp	r0, r5
   15000:	beq	15328 <__assert_fail@plt+0x3730>
   15004:	ldr	r3, [sp, #24]
   15008:	cmp	r0, #0
   1500c:	ldr	r3, [r3]
   15010:	str	r3, [sp, #12]
   15014:	bne	15310 <__assert_fail@plt+0x3718>
   15018:	ldr	sl, [r7, #12]
   1501c:	ldr	r0, [r7, #8]
   15020:	b	13dec <__assert_fail@plt+0x21f4>
   15024:	rsb	r4, r1, r2
   15028:	sub	r4, r4, #1
   1502c:	cmp	r4, #0
   15030:	ble	15050 <__assert_fail@plt+0x3458>
   15034:	mov	r3, #0
   15038:	ldrb	r9, [r1, r3]
   1503c:	strb	r9, [ip, r3]
   15040:	add	r3, r3, #1
   15044:	cmp	r3, r4
   15048:	bne	15038 <__assert_fail@plt+0x3440>
   1504c:	ldr	r3, [r6, r0, lsl #2]
   15050:	ldr	r1, [r3, #44]	; 0x2c
   15054:	cmp	r1, #2
   15058:	moveq	ip, #0
   1505c:	streq	ip, [r7, #24]
   15060:	streq	ip, [r3, #16]
   15064:	beq	1520c <__assert_fail@plt+0x3614>
   15068:	ldr	ip, [r3, #12]
   1506c:	sub	ip, ip, #1
   15070:	rsb	ip, r4, ip
   15074:	cmp	ip, #0
   15078:	bgt	15130 <__assert_fail@plt+0x3538>
   1507c:	str	r8, [sp, #52]	; 0x34
   15080:	mov	r8, r7
   15084:	mov	r7, r4
   15088:	b	150e8 <__assert_fail@plt+0x34f0>
   1508c:	ldr	r2, [r9, #12]
   15090:	lsl	r3, r2, #1
   15094:	cmp	r3, #0
   15098:	strgt	r3, [r9, #12]
   1509c:	addle	r2, r2, r2, lsr #3
   150a0:	strle	r2, [r9, #12]
   150a4:	movgt	r1, r3
   150a8:	movle	r1, r2
   150ac:	add	r1, r1, #2
   150b0:	bl	11844 <realloc@plt>
   150b4:	cmp	r0, #0
   150b8:	str	r0, [r9, #4]
   150bc:	beq	1510c <__assert_fail@plt+0x3514>
   150c0:	ldr	r2, [sp, #48]	; 0x30
   150c4:	add	r0, r0, r4
   150c8:	str	r0, [r8, #4]
   150cc:	ldr	r3, [r2]
   150d0:	ldr	ip, [r3, #12]
   150d4:	sub	ip, ip, #1
   150d8:	rsb	ip, r7, ip
   150dc:	cmp	ip, #0
   150e0:	bgt	15124 <__assert_fail@plt+0x352c>
   150e4:	mov	r2, r0
   150e8:	cmp	r6, #0
   150ec:	movne	r9, r3
   150f0:	moveq	r9, #0
   150f4:	ldr	r1, [r9, #20]
   150f8:	ldr	r0, [r9, #4]
   150fc:	cmp	r1, #0
   15100:	rsb	r4, r0, r2
   15104:	bne	1508c <__assert_fail@plt+0x3494>
   15108:	str	r1, [r9, #4]
   1510c:	movw	r0, #4204	; 0x106c
   15110:	movt	r0, #2
   15114:	bl	13870 <__assert_fail@plt+0x1c78>
   15118:	movw	r0, #4148	; 0x1034
   1511c:	movt	r0, #2
   15120:	bl	13870 <__assert_fail@plt+0x1c78>
   15124:	mov	r4, r7
   15128:	mov	r7, r8
   1512c:	ldr	r8, [sp, #52]	; 0x34
   15130:	ldr	r3, [sp, #32]
   15134:	add	r1, sp, #56	; 0x38
   15138:	cmp	ip, #1024	; 0x400
   1513c:	movge	ip, #1024	; 0x400
   15140:	str	ip, [sp, #56]	; 0x38
   15144:	ldr	r0, [r3, #84]	; 0x54
   15148:	bl	11904 <pipeline_read@plt>
   1514c:	subs	r1, r0, #0
   15150:	beq	15160 <__assert_fail@plt+0x3568>
   15154:	ldr	r2, [sp, #56]	; 0x38
   15158:	cmp	r2, #0
   1515c:	bne	15238 <__assert_fail@plt+0x3640>
   15160:	ldr	r2, [r7, #20]
   15164:	mov	r1, #0
   15168:	ldr	r3, [r7, #16]
   1516c:	str	r1, [r7, #24]
   15170:	add	r3, r3, r2, lsl #2
   15174:	ldr	r3, [r3]
   15178:	cmp	r1, #0
   1517c:	str	r1, [r3, #16]
   15180:	beq	1520c <__assert_fail@plt+0x3614>
   15184:	ldr	r2, [r7, #20]
   15188:	mov	ip, #0
   1518c:	ldr	r3, [r7, #16]
   15190:	add	r9, r3, r2, lsl #2
   15194:	ldr	r6, [r3, r2, lsl #2]
   15198:	ldr	r3, [r6, #12]
   1519c:	add	r4, r4, r1
   151a0:	cmp	r4, r3
   151a4:	ldrls	r3, [r6, #4]
   151a8:	bhi	152dc <__assert_fail@plt+0x36e4>
   151ac:	mov	r0, #0
   151b0:	strb	r0, [r3, r4]
   151b4:	ldr	r2, [r9]
   151b8:	cmp	ip, #1
   151bc:	movw	r3, #9024	; 0x2340
   151c0:	movw	r1, #17348	; 0x43c4
   151c4:	str	r4, [r7, #24]
   151c8:	movt	r3, #3
   151cc:	ldr	r2, [r2, #4]
   151d0:	movt	r1, #3
   151d4:	add	r2, r2, r4
   151d8:	strb	r0, [r2, #1]
   151dc:	ldr	r2, [r9]
   151e0:	ldr	r0, [sp, #24]
   151e4:	ldr	r2, [r2, #4]
   151e8:	str	r2, [r0]
   151ec:	beq	14f34 <__assert_fail@plt+0x333c>
   151f0:	cmp	ip, #2
   151f4:	mov	r6, r9
   151f8:	bne	152ac <__assert_fail@plt+0x36b4>
   151fc:	ldr	r3, [r6]
   15200:	ldr	sl, [r3, #4]
   15204:	add	sl, sl, r4
   15208:	b	14af0 <__assert_fail@plt+0x2ef8>
   1520c:	cmp	r4, #0
   15210:	beq	15280 <__assert_fail@plt+0x3688>
   15214:	ldr	r9, [r7, #20]
   15218:	mov	ip, #2
   1521c:	ldr	r2, [r7, #16]
   15220:	mov	r1, #0
   15224:	ldr	r3, [r2, r9, lsl #2]
   15228:	add	r9, r2, r9, lsl #2
   1522c:	mov	r6, r3
   15230:	str	ip, [r3, #44]	; 0x2c
   15234:	b	15198 <__assert_fail@plt+0x35a0>
   15238:	ldr	r9, [r7, #20]
   1523c:	ldr	r6, [r7, #16]
   15240:	add	r3, r6, r9, lsl #2
   15244:	ldr	r0, [r6, r9, lsl #2]
   15248:	ldr	r0, [r0, #4]
   1524c:	str	r3, [sp, #4]
   15250:	add	r0, r0, r4
   15254:	bl	117e4 <memcpy@plt>
   15258:	ldr	r1, [r6, r9, lsl #2]
   1525c:	ldr	r2, [sp, #56]	; 0x38
   15260:	mov	ip, #0
   15264:	ldr	r1, [r1, #4]
   15268:	add	r1, r1, r4
   1526c:	strb	ip, [r1, r2]
   15270:	ldr	r1, [sp, #56]	; 0x38
   15274:	ldr	r3, [sp, #4]
   15278:	str	r1, [r7, #24]
   1527c:	b	15174 <__assert_fail@plt+0x357c>
   15280:	ldr	r0, [r7, #28]
   15284:	mov	ip, #1
   15288:	str	ip, [sp, #4]
   1528c:	bl	13b88 <__assert_fail@plt+0x1f90>
   15290:	ldr	r2, [r7, #20]
   15294:	ldr	r3, [r7, #16]
   15298:	ldr	r1, [r7, #24]
   1529c:	add	r9, r3, r2, lsl #2
   152a0:	ldr	ip, [sp, #4]
   152a4:	ldr	r6, [r3, r2, lsl #2]
   152a8:	b	15198 <__assert_fail@plt+0x35a0>
   152ac:	ldr	r4, [sp, #44]	; 0x2c
   152b0:	ldr	r7, [sp, #8]
   152b4:	add	r9, r2, r4
   152b8:	ldr	r6, [sp, #16]
   152bc:	str	r9, [r3, #4]
   152c0:	str	r1, [sp, #4]
   152c4:	bl	11c04 <__assert_fail@plt+0xc>
   152c8:	ldr	r1, [sp, #4]
   152cc:	ldr	r1, [r1]
   152d0:	str	r1, [sp, #12]
   152d4:	ldrb	r1, [r9]
   152d8:	b	13d44 <__assert_fail@plt+0x214c>
   152dc:	ldr	r0, [r6, #4]
   152e0:	add	r1, r4, r1, asr #1
   152e4:	str	ip, [sp, #4]
   152e8:	bl	11844 <realloc@plt>
   152ec:	ldr	ip, [sp, #4]
   152f0:	str	r0, [r6, #4]
   152f4:	ldr	r3, [r9]
   152f8:	ldr	r3, [r3, #4]
   152fc:	cmp	r3, #0
   15300:	bne	151ac <__assert_fail@plt+0x35b4>
   15304:	movw	r0, #4248	; 0x1098
   15308:	movt	r0, #2
   1530c:	bl	13870 <__assert_fail@plt+0x1c78>
   15310:	ldr	r4, [sp, #20]
   15314:	add	r9, r9, #1
   15318:	ldr	r7, [sp, #8]
   1531c:	mov	r6, ip
   15320:	str	r9, [r4, #4]
   15324:	b	152d4 <__assert_fail@plt+0x36dc>
   15328:	ldr	ip, [sp, #24]
   1532c:	ldr	ip, [ip]
   15330:	str	ip, [sp, #12]
   15334:	b	15018 <__assert_fail@plt+0x3420>
   15338:	andeq	r0, r2, r0, ror #26
   1533c:	ldrdeq	r0, [r2], -r8
   15340:	andeq	r2, r3, ip, ror #6
   15344:	push	{r4, r5, r6, lr}
   15348:	subs	r4, r0, #0
   1534c:	popeq	{r4, r5, r6, pc}
   15350:	bl	1389c <__assert_fail@plt+0x1ca4>
   15354:	movw	r3, #9024	; 0x2340
   15358:	movt	r3, #3
   1535c:	ldr	r2, [r3, #16]
   15360:	cmp	r2, #0
   15364:	beq	153cc <__assert_fail@plt+0x37d4>
   15368:	ldr	r1, [r3, #20]
   1536c:	ldr	r0, [r2, r1, lsl #2]
   15370:	lsl	lr, r1, #2
   15374:	add	ip, r2, lr
   15378:	cmp	r0, #0
   1537c:	beq	153b0 <__assert_fail@plt+0x37b8>
   15380:	ldr	r0, [r3, #4]
   15384:	add	ip, lr, #4
   15388:	ldrb	r5, [r3, #32]
   1538c:	add	r6, r1, #1
   15390:	ldr	lr, [r3, #24]
   15394:	add	ip, r2, ip
   15398:	str	r6, [r3, #20]
   1539c:	strb	r5, [r0]
   153a0:	ldr	r3, [r2, r1, lsl #2]
   153a4:	str	r0, [r3, #8]
   153a8:	ldr	r3, [r2, r1, lsl #2]
   153ac:	str	lr, [r3, #16]
   153b0:	str	r4, [ip]
   153b4:	bl	13574 <__assert_fail@plt+0x197c>
   153b8:	movw	r3, #17208	; 0x4338
   153bc:	movt	r3, #3
   153c0:	mov	r2, #1
   153c4:	str	r2, [r3, #64]	; 0x40
   153c8:	pop	{r4, r5, r6, pc}
   153cc:	ldr	ip, [r3, #20]
   153d0:	lsl	ip, ip, #2
   153d4:	b	153b0 <__assert_fail@plt+0x37b8>
   153d8:	push	{r3, r4, r5, r6, r7, lr}
   153dc:	movw	r4, #9024	; 0x2340
   153e0:	movt	r4, #3
   153e4:	ldr	r6, [r4, #16]
   153e8:	cmp	r6, #0
   153ec:	popeq	{r3, r4, r5, r6, r7, pc}
   153f0:	ldr	r5, [r4, #20]
   153f4:	ldr	r0, [r6, r5, lsl #2]
   153f8:	add	r7, r6, r5, lsl #2
   153fc:	cmp	r0, #0
   15400:	popeq	{r3, r4, r5, r6, r7, pc}
   15404:	bl	139f0 <__assert_fail@plt+0x1df8>
   15408:	cmp	r5, #0
   1540c:	mov	r3, #0
   15410:	str	r3, [r6, r5, lsl #2]
   15414:	popeq	{r3, r4, r5, r6, r7, pc}
   15418:	ldr	r3, [r7, #-4]
   1541c:	sub	r5, r5, #1
   15420:	str	r5, [r4, #20]
   15424:	cmp	r3, #0
   15428:	popeq	{r3, r4, r5, r6, r7, pc}
   1542c:	bl	13574 <__assert_fail@plt+0x197c>
   15430:	movw	r3, #17208	; 0x4338
   15434:	movt	r3, #3
   15438:	mov	r2, #1
   1543c:	str	r2, [r3, #64]	; 0x40
   15440:	pop	{r3, r4, r5, r6, r7, pc}
   15444:	cmp	r1, #1
   15448:	push	{r3, r4, r5, r6, r7, lr}
   1544c:	mov	r6, r0
   15450:	bls	154c4 <__assert_fail@plt+0x38cc>
   15454:	sub	r7, r1, #2
   15458:	ldrb	r4, [r0, r7]
   1545c:	cmp	r4, #0
   15460:	bne	154c4 <__assert_fail@plt+0x38cc>
   15464:	add	r1, r0, r1
   15468:	ldrb	r5, [r1, #-1]
   1546c:	cmp	r5, #0
   15470:	bne	154bc <__assert_fail@plt+0x38c4>
   15474:	mov	r0, #48	; 0x30
   15478:	bl	11934 <malloc@plt>
   1547c:	subs	r4, r0, #0
   15480:	beq	154cc <__assert_fail@plt+0x38d4>
   15484:	mov	r3, #1
   15488:	str	r7, [r4, #12]
   1548c:	str	r6, [r4, #4]
   15490:	str	r6, [r4, #8]
   15494:	str	r5, [r4, #20]
   15498:	str	r5, [r4]
   1549c:	str	r7, [r4, #16]
   154a0:	str	r5, [r4, #24]
   154a4:	str	r5, [r4, #40]	; 0x28
   154a8:	str	r5, [r4, #44]	; 0x2c
   154ac:	str	r3, [r4, #28]
   154b0:	bl	13964 <__assert_fail@plt+0x1d6c>
   154b4:	mov	r0, r4
   154b8:	pop	{r3, r4, r5, r6, r7, pc}
   154bc:	mov	r0, r4
   154c0:	pop	{r3, r4, r5, r6, r7, pc}
   154c4:	mov	r0, #0
   154c8:	pop	{r3, r4, r5, r6, r7, pc}
   154cc:	movw	r0, #4348	; 0x10fc
   154d0:	movt	r0, #2
   154d4:	bl	13870 <__assert_fail@plt+0x1c78>
   154d8:	push	{r4, r5, r6, lr}
   154dc:	add	r6, r1, #2
   154e0:	mov	r5, r0
   154e4:	mov	r4, r1
   154e8:	mov	r0, r6
   154ec:	bl	11934 <malloc@plt>
   154f0:	subs	ip, r0, #0
   154f4:	beq	15548 <__assert_fail@plt+0x3950>
   154f8:	cmp	r4, #0
   154fc:	movgt	r3, #0
   15500:	ble	15518 <__assert_fail@plt+0x3920>
   15504:	ldrb	r2, [r5, r3]
   15508:	strb	r2, [ip, r3]
   1550c:	add	r3, r3, #1
   15510:	cmp	r3, r4
   15514:	bne	15504 <__assert_fail@plt+0x390c>
   15518:	add	r2, ip, r4
   1551c:	mov	r3, #0
   15520:	mov	r1, r6
   15524:	mov	r0, ip
   15528:	strb	r3, [r2, #1]
   1552c:	mov	r5, #1
   15530:	strb	r3, [ip, r4]
   15534:	bl	15444 <__assert_fail@plt+0x384c>
   15538:	subs	r3, r0, #0
   1553c:	beq	15554 <__assert_fail@plt+0x395c>
   15540:	str	r5, [r3, #20]
   15544:	pop	{r4, r5, r6, pc}
   15548:	movw	r0, #4392	; 0x1128
   1554c:	movt	r0, #2
   15550:	bl	13870 <__assert_fail@plt+0x1c78>
   15554:	movw	r0, #4436	; 0x1154
   15558:	movt	r0, #2
   1555c:	bl	13870 <__assert_fail@plt+0x1c78>
   15560:	push	{r4, lr}
   15564:	mov	r4, r0
   15568:	bl	119d0 <strlen@plt>
   1556c:	mov	r1, r0
   15570:	mov	r0, r4
   15574:	pop	{r4, lr}
   15578:	b	154d8 <__assert_fail@plt+0x38e0>
   1557c:	movw	r3, #8608	; 0x21a0
   15580:	movt	r3, #3
   15584:	ldr	r0, [r3]
   15588:	bx	lr
   1558c:	movw	r3, #9024	; 0x2340
   15590:	movt	r3, #3
   15594:	ldr	r0, [r3, #28]
   15598:	bx	lr
   1559c:	movw	r3, #17208	; 0x4338
   155a0:	movt	r3, #3
   155a4:	ldr	r0, [r3, #72]	; 0x48
   155a8:	bx	lr
   155ac:	movw	r3, #17352	; 0x43c8
   155b0:	movt	r3, #3
   155b4:	ldr	r0, [r3]
   155b8:	bx	lr
   155bc:	movw	r3, #17348	; 0x43c4
   155c0:	movt	r3, #3
   155c4:	ldr	r0, [r3]
   155c8:	bx	lr
   155cc:	movw	r3, #8608	; 0x21a0
   155d0:	movt	r3, #3
   155d4:	str	r0, [r3]
   155d8:	bx	lr
   155dc:	movw	r3, #9024	; 0x2340
   155e0:	movt	r3, #3
   155e4:	str	r0, [r3, #28]
   155e8:	bx	lr
   155ec:	movw	r3, #17208	; 0x4338
   155f0:	movt	r3, #3
   155f4:	str	r0, [r3, #72]	; 0x48
   155f8:	bx	lr
   155fc:	movw	r3, #17208	; 0x4338
   15600:	movt	r3, #3
   15604:	ldr	r0, [r3, #88]	; 0x58
   15608:	bx	lr
   1560c:	movw	r3, #17208	; 0x4338
   15610:	movt	r3, #3
   15614:	str	r0, [r3, #88]	; 0x58
   15618:	bx	lr
   1561c:	push	{r3, r4, r5, r6, r7, lr}
   15620:	movw	r6, #9024	; 0x2340
   15624:	movt	r6, #3
   15628:	ldr	r4, [r6, #16]
   1562c:	cmp	r4, #0
   15630:	beq	1566c <__assert_fail@plt+0x3a74>
   15634:	ldr	r5, [r6, #20]
   15638:	ldr	r0, [r4, r5, lsl #2]
   1563c:	add	r5, r4, r5, lsl #2
   15640:	cmp	r0, #0
   15644:	beq	1566c <__assert_fail@plt+0x3a74>
   15648:	mov	r7, #0
   1564c:	bl	139f0 <__assert_fail@plt+0x1df8>
   15650:	str	r7, [r5]
   15654:	bl	153d8 <__assert_fail@plt+0x37e0>
   15658:	ldr	r3, [r6, #20]
   1565c:	ldr	r0, [r4, r3, lsl #2]
   15660:	add	r5, r4, r3, lsl #2
   15664:	cmp	r0, #0
   15668:	bne	1564c <__assert_fail@plt+0x3a54>
   1566c:	mov	r0, r4
   15670:	bl	117cc <free@plt>
   15674:	movw	r2, #17208	; 0x4338
   15678:	movt	r2, #3
   1567c:	mov	r3, #0
   15680:	mov	r0, r3
   15684:	str	r3, [r6, #16]
   15688:	str	r3, [r2, #60]	; 0x3c
   1568c:	str	r3, [r2, #68]	; 0x44
   15690:	str	r3, [r2, #72]	; 0x48
   15694:	str	r3, [r6, #20]
   15698:	str	r3, [r6, #4]
   1569c:	str	r3, [r6]
   156a0:	str	r3, [r6, #28]
   156a4:	pop	{r3, r4, r5, r6, r7, pc}
   156a8:	b	11934 <malloc@plt>
   156ac:	b	11844 <realloc@plt>
   156b0:	b	117cc <free@plt>
   156b4:	push	{r4, r5, r6, r7, r8, r9, lr}
   156b8:	movw	r5, #8952	; 0x22f8
   156bc:	movt	r5, #3
   156c0:	movw	r7, #17208	; 0x4338
   156c4:	movw	r4, #9024	; 0x2340
   156c8:	movt	r7, #3
   156cc:	movt	r4, #3
   156d0:	ldr	r3, [r5]
   156d4:	sub	sp, sp, #20
   156d8:	mov	r6, r2
   156dc:	str	r0, [r7, #84]	; 0x54
   156e0:	mov	r2, #6
   156e4:	str	r1, [r4, #36]	; 0x24
   156e8:	add	r0, r7, #76	; 0x4c
   156ec:	mov	r1, #95	; 0x5f
   156f0:	mov	r9, #0
   156f4:	str	r3, [sp, #12]
   156f8:	add	r8, r4, #44	; 0x2c
   156fc:	strb	r9, [r4, #44]	; 0x2c
   15700:	str	r8, [r4, #40]	; 0x28
   15704:	bl	11a24 <memset@plt>
   15708:	ldr	r2, [r6]
   1570c:	mov	r3, #1
   15710:	str	r9, [r7, #52]	; 0x34
   15714:	cmp	r2, r9
   15718:	str	r3, [r7, #56]	; 0x38
   1571c:	movne	r3, #25
   15720:	moveq	r3, #27
   15724:	str	r3, [r4]
   15728:	bl	119ac <drop_effective_privs@plt>
   1572c:	mov	r0, #0
   15730:	bl	13b88 <__assert_fail@plt+0x1f90>
   15734:	bl	13c10 <__assert_fail@plt+0x2018>
   15738:	mov	r9, r0
   1573c:	bl	11bec <regain_effective_privs@plt>
   15740:	ldr	r0, [r7, #84]	; 0x54
   15744:	bl	117fc <pipeline_wait@plt>
   15748:	cmp	r9, #0
   1574c:	bne	157e0 <__assert_fail@plt+0x3be8>
   15750:	ldrb	r3, [r4, #44]	; 0x2c
   15754:	movw	r7, #9024	; 0x2340
   15758:	movt	r7, #3
   1575c:	cmp	r3, #0
   15760:	addeq	r0, r7, #44	; 0x2c
   15764:	streq	r8, [r7, #40]	; 0x28
   15768:	bne	157e8 <__assert_fail@plt+0x3bf0>
   1576c:	bl	118e0 <xstrdup@plt>
   15770:	ldr	r3, [pc, #244]	; 1586c <__assert_fail@plt+0x3c74>
   15774:	mov	r1, #0
   15778:	mov	lr, #45	; 0x2d
   1577c:	add	ip, r3, #6
   15780:	mov	r2, r1
   15784:	str	r1, [sp, #4]
   15788:	strh	r1, [sp, #8]
   1578c:	strb	lr, [sp, #4]
   15790:	str	r0, [r6, #4]
   15794:	ldrb	r1, [r3, #1]!
   15798:	cmp	r1, #95	; 0x5f
   1579c:	addne	lr, sp, #16
   157a0:	addne	r0, lr, r2
   157a4:	addne	r2, r2, #1
   157a8:	strbne	r1, [r0, #-12]
   157ac:	cmp	r3, ip
   157b0:	bne	15794 <__assert_fail@plt+0x3b9c>
   157b4:	add	r0, sp, #4
   157b8:	bl	118e0 <xstrdup@plt>
   157bc:	ldr	r3, [r4, #40]	; 0x28
   157c0:	str	r0, [r6, #8]
   157c4:	ldrb	r0, [r3]
   157c8:	ldr	r2, [sp, #12]
   157cc:	ldr	r3, [r5]
   157d0:	cmp	r2, r3
   157d4:	bne	15868 <__assert_fail@plt+0x3c70>
   157d8:	add	sp, sp, #20
   157dc:	pop	{r4, r5, r6, r7, r8, r9, pc}
   157e0:	mov	r0, #0
   157e4:	b	157c8 <__assert_fail@plt+0x3bd0>
   157e8:	mov	r1, r9
   157ec:	add	r0, r7, #44	; 0x2c
   157f0:	bl	11898 <__rawmemchr@plt>
   157f4:	ldrb	r3, [r0, #-1]
   157f8:	str	r0, [r7, #40]	; 0x28
   157fc:	cmp	r3, #32
   15800:	bne	15860 <__assert_fail@plt+0x3c68>
   15804:	sub	r3, r0, #1
   15808:	mov	r1, r3
   1580c:	ldrb	r2, [r3, #-1]!
   15810:	cmp	r2, #32
   15814:	beq	15808 <__assert_fail@plt+0x3c10>
   15818:	str	r1, [r4, #40]	; 0x28
   1581c:	ldrb	r3, [r1]
   15820:	str	r8, [r4, #40]	; 0x28
   15824:	cmp	r3, #32
   15828:	moveq	r3, #0
   1582c:	strbeq	r3, [r1]
   15830:	ldrb	r3, [r4, #44]	; 0x2c
   15834:	cmp	r3, #32
   15838:	ldrne	r0, [pc, #48]	; 15870 <__assert_fail@plt+0x3c78>
   1583c:	bne	1576c <__assert_fail@plt+0x3b74>
   15840:	ldr	r3, [pc, #44]	; 15874 <__assert_fail@plt+0x3c7c>
   15844:	mov	r0, r3
   15848:	add	r3, r3, #1
   1584c:	ldrb	r1, [r0]
   15850:	cmp	r1, #32
   15854:	beq	15844 <__assert_fail@plt+0x3c4c>
   15858:	str	r0, [r4, #40]	; 0x28
   1585c:	b	1576c <__assert_fail@plt+0x3b74>
   15860:	mov	r1, r0
   15864:	b	1581c <__assert_fail@plt+0x3c24>
   15868:	bl	11838 <__stack_chk_fail@plt>
   1586c:	andeq	r4, r3, r3, lsl #7
   15870:	andeq	r2, r3, ip, ror #6
   15874:	andeq	r2, r3, sp, ror #6
   15878:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   1587c:	movw	r4, #8952	; 0x22f8
   15880:	movt	r4, #3
   15884:	mov	r5, r0
   15888:	ldrb	r0, [r0]
   1588c:	mov	r8, r2
   15890:	ldr	r2, [r4]
   15894:	sub	sp, sp, #112	; 0x70
   15898:	cmp	r0, #45	; 0x2d
   1589c:	mov	r9, r1
   158a0:	mov	r7, r3
   158a4:	str	r2, [sp, #108]	; 0x6c
   158a8:	bne	15948 <__assert_fail@plt+0x3d50>
   158ac:	ldrb	r3, [r5, #1]
   158b0:	cmp	r3, #0
   158b4:	bne	15948 <__assert_fail@plt+0x3d50>
   158b8:	mov	r0, r3
   158bc:	mov	r5, r3
   158c0:	bl	1185c <dup@plt>
   158c4:	bl	118b0 <decompress_fdopen@plt>
   158c8:	mov	r3, #1
   158cc:	mov	r6, r0
   158d0:	cmp	r7, #0
   158d4:	moveq	r3, #0
   158d8:	andne	r3, r3, #1
   158dc:	cmp	r3, #0
   158e0:	bne	159c0 <__assert_fail@plt+0x3dc8>
   158e4:	cmp	r5, #0
   158e8:	beq	15900 <__assert_fail@plt+0x3d08>
   158ec:	movw	r2, #4488	; 0x1188
   158f0:	mov	r0, r6
   158f4:	movt	r2, #2
   158f8:	mov	r1, r5
   158fc:	bl	164b8 <__assert_fail@plt+0x48c0>
   15900:	mov	r0, r5
   15904:	bl	117cc <free@plt>
   15908:	mov	r0, r6
   1590c:	bl	11958 <pipeline_start@plt>
   15910:	mov	r1, r9
   15914:	mov	r2, r8
   15918:	mov	r0, r6
   1591c:	bl	156b4 <__assert_fail@plt+0x3abc>
   15920:	mov	r5, r0
   15924:	mov	r0, r6
   15928:	bl	11afc <pipeline_free@plt>
   1592c:	mov	r0, r5
   15930:	ldr	r2, [sp, #108]	; 0x6c
   15934:	ldr	r3, [r4]
   15938:	cmp	r2, r3
   1593c:	bne	15a44 <__assert_fail@plt+0x3e4c>
   15940:	add	sp, sp, #112	; 0x70
   15944:	pop	{r4, r5, r6, r7, r8, r9, sl, pc}
   15948:	mov	r0, #3
   1594c:	mov	r1, r5
   15950:	mov	r2, sp
   15954:	bl	11b8c <__xstat64@plt>
   15958:	subs	sl, r0, #0
   1595c:	bne	159d0 <__assert_fail@plt+0x3dd8>
   15960:	ldr	r3, [sp, #16]
   15964:	and	r3, r3, #61440	; 0xf000
   15968:	cmp	r3, #16384	; 0x4000
   1596c:	beq	159f4 <__assert_fail@plt+0x3dfc>
   15970:	bl	119ac <drop_effective_privs@plt>
   15974:	mov	r0, r5
   15978:	bl	11994 <decompress_open@plt>
   1597c:	subs	r6, r0, #0
   15980:	beq	15a0c <__assert_fail@plt+0x3e14>
   15984:	bl	11bec <regain_effective_privs@plt>
   15988:	cmp	r7, #0
   1598c:	movne	r5, sl
   15990:	movne	r3, #1
   15994:	bne	158d0 <__assert_fail@plt+0x3cd8>
   15998:	mov	r0, r5
   1599c:	bl	118a4 <lang_dir@plt>
   159a0:	mov	sl, r0
   159a4:	bl	119f4 <get_page_encoding@plt>
   159a8:	mov	r5, r0
   159ac:	mov	r0, sl
   159b0:	bl	117cc <free@plt>
   159b4:	rsbs	r3, r5, #1
   159b8:	movcc	r3, #0
   159bc:	b	158d0 <__assert_fail@plt+0x3cd8>
   159c0:	mov	r0, r7
   159c4:	bl	118e0 <xstrdup@plt>
   159c8:	mov	r5, r0
   159cc:	b	158e4 <__assert_fail@plt+0x3cec>
   159d0:	bl	11a00 <__errno_location@plt>
   159d4:	movw	r2, #4468	; 0x1174
   159d8:	mov	r3, r5
   159dc:	movt	r2, #2
   159e0:	ldr	r1, [r0]
   159e4:	mov	r0, #0
   159e8:	bl	11910 <error@plt>
   159ec:	mov	r0, #0
   159f0:	b	15930 <__assert_fail@plt+0x3d38>
   159f4:	mov	r3, r5
   159f8:	movw	r2, #4468	; 0x1174
   159fc:	mov	r1, #21
   15a00:	movt	r2, #2
   15a04:	bl	11910 <error@plt>
   15a08:	b	159ec <__assert_fail@plt+0x3df4>
   15a0c:	bl	11a00 <__errno_location@plt>
   15a10:	mov	r2, #5
   15a14:	movw	r1, #4472	; 0x1178
   15a18:	movt	r1, #2
   15a1c:	ldr	r7, [r0]
   15a20:	mov	r0, r6
   15a24:	bl	11820 <dcgettext@plt>
   15a28:	mov	r3, r5
   15a2c:	mov	r1, r7
   15a30:	mov	r2, r0
   15a34:	mov	r0, r6
   15a38:	bl	11910 <error@plt>
   15a3c:	bl	11bec <regain_effective_privs@plt>
   15a40:	b	159ec <__assert_fail@plt+0x3df4>
   15a44:	bl	11838 <__stack_chk_fail@plt>
   15a48:	bx	lr
   15a4c:	cmp	r0, #104	; 0x68
   15a50:	push	{r3, r4, r5, lr}
   15a54:	mov	r4, r2
   15a58:	beq	15c00 <__assert_fail@plt+0x4008>
   15a5c:	ble	15a9c <__assert_fail@plt+0x3ea4>
   15a60:	mov	r3, #2
   15a64:	movt	r3, #256	; 0x100
   15a68:	cmp	r0, r3
   15a6c:	beq	15be0 <__assert_fail@plt+0x3fe8>
   15a70:	bgt	15ad0 <__assert_fail@plt+0x3ed8>
   15a74:	cmp	r0, #109	; 0x6d
   15a78:	beq	15b8c <__assert_fail@plt+0x3f94>
   15a7c:	cmp	r0, #119	; 0x77
   15a80:	bne	15bc0 <__assert_fail@plt+0x3fc8>
   15a84:	movw	r3, #17300	; 0x4394
   15a88:	movt	r3, #3
   15a8c:	mov	r2, #1
   15a90:	mov	r0, #0
   15a94:	str	r2, [r3, #8]
   15a98:	pop	{r3, r4, r5, pc}
   15a9c:	cmp	r0, #99	; 0x63
   15aa0:	beq	15bc8 <__assert_fail@plt+0x3fd0>
   15aa4:	ble	15ba4 <__assert_fail@plt+0x3fac>
   15aa8:	cmp	r0, #100	; 0x64
   15aac:	beq	15b1c <__assert_fail@plt+0x3f24>
   15ab0:	cmp	r0, #102	; 0x66
   15ab4:	bne	15bc0 <__assert_fail@plt+0x3fc8>
   15ab8:	movw	r3, #17300	; 0x4394
   15abc:	movt	r3, #3
   15ac0:	mov	r2, #1
   15ac4:	mov	r0, #0
   15ac8:	str	r2, [r3, #12]
   15acc:	pop	{r3, r4, r5, pc}
   15ad0:	mov	r3, #4
   15ad4:	movt	r3, #256	; 0x100
   15ad8:	cmp	r0, r3
   15adc:	beq	15b34 <__assert_fail@plt+0x3f3c>
   15ae0:	mov	r3, #6
   15ae4:	movt	r3, #256	; 0x100
   15ae8:	cmp	r0, r3
   15aec:	bne	15bc0 <__assert_fail@plt+0x3fc8>
   15af0:	ldr	r2, [r2, #12]
   15af4:	movw	r3, #17300	; 0x4394
   15af8:	ldr	ip, [r4, #8]
   15afc:	movt	r3, #3
   15b00:	ldr	r1, [r4, #4]
   15b04:	mov	r0, #0
   15b08:	add	ip, ip, r2, lsl #2
   15b0c:	str	ip, [r3, #20]
   15b10:	rsb	r2, r2, r1
   15b14:	str	r2, [r3, #24]
   15b18:	pop	{r3, r4, r5, pc}
   15b1c:	movw	r3, #8944	; 0x22f0
   15b20:	movt	r3, #3
   15b24:	mov	r2, #1
   15b28:	mov	r0, #0
   15b2c:	str	r2, [r3]
   15b30:	pop	{r3, r4, r5, pc}
   15b34:	movw	r5, #17300	; 0x4394
   15b38:	movt	r5, #3
   15b3c:	ldr	r3, [r5]
   15b40:	cmp	r3, #0
   15b44:	bne	15c18 <__assert_fail@plt+0x4020>
   15b48:	ldr	r2, [r5, #4]
   15b4c:	movw	r3, #17300	; 0x4394
   15b50:	movt	r3, #3
   15b54:	cmp	r2, #0
   15b58:	moveq	r2, #1
   15b5c:	streq	r2, [r3]
   15b60:	ldr	r2, [r5, #8]
   15b64:	movw	r3, #17300	; 0x4394
   15b68:	movt	r3, #3
   15b6c:	cmp	r2, #0
   15b70:	bne	15c5c <__assert_fail@plt+0x4064>
   15b74:	ldr	r0, [r3, #12]
   15b78:	cmp	r0, #0
   15b7c:	bne	15c5c <__assert_fail@plt+0x4064>
   15b80:	mov	r2, #1
   15b84:	str	r2, [r3, #8]
   15b88:	pop	{r3, r4, r5, pc}
   15b8c:	movw	r3, #17300	; 0x4394
   15b90:	movt	r3, #3
   15b94:	mov	r2, #1
   15b98:	mov	r0, #0
   15b9c:	str	r2, [r3]
   15ba0:	pop	{r3, r4, r5, pc}
   15ba4:	cmp	r0, #69	; 0x45
   15ba8:	bne	15bc0 <__assert_fail@plt+0x3fc8>
   15bac:	movw	r3, #17300	; 0x4394
   15bb0:	movt	r3, #3
   15bb4:	mov	r0, #0
   15bb8:	str	r1, [r3, #16]
   15bbc:	pop	{r3, r4, r5, pc}
   15bc0:	mov	r0, #7
   15bc4:	pop	{r3, r4, r5, pc}
   15bc8:	movw	r3, #17300	; 0x4394
   15bcc:	movt	r3, #3
   15bd0:	mov	r2, #1
   15bd4:	mov	r0, #0
   15bd8:	str	r2, [r3, #4]
   15bdc:	pop	{r3, r4, r5, pc}
   15be0:	movw	r3, #8956	; 0x22fc
   15be4:	movt	r3, #3
   15be8:	mov	r0, r2
   15bec:	movw	r2, #262	; 0x106
   15bf0:	ldr	r1, [r3]
   15bf4:	bl	11b44 <argp_state_help@plt>
   15bf8:	mov	r0, #7
   15bfc:	pop	{r3, r4, r5, pc}
   15c00:	mov	r0, r2
   15c04:	ldr	r1, [r4, #48]	; 0x30
   15c08:	movw	r2, #618	; 0x26a
   15c0c:	bl	11b44 <argp_state_help@plt>
   15c10:	mov	r0, #7
   15c14:	pop	{r3, r4, r5, pc}
   15c18:	ldr	r3, [r5, #4]
   15c1c:	cmp	r3, #0
   15c20:	beq	15b60 <__assert_fail@plt+0x3f68>
   15c24:	mov	r2, #5
   15c28:	movw	r1, #5464	; 0x1558
   15c2c:	mov	r0, #0
   15c30:	movt	r1, #2
   15c34:	bl	11820 <dcgettext@plt>
   15c38:	movw	r2, #5492	; 0x1574
   15c3c:	movt	r2, #2
   15c40:	mov	r1, r0
   15c44:	mov	r0, r4
   15c48:	bl	11ab4 <argp_error@plt>
   15c4c:	ldr	r3, [r5]
   15c50:	cmp	r3, #0
   15c54:	bne	15b60 <__assert_fail@plt+0x3f68>
   15c58:	b	15b48 <__assert_fail@plt+0x3f50>
   15c5c:	mov	r0, #0
   15c60:	pop	{r3, r4, r5, pc}
   15c64:	movw	ip, #8952	; 0x22f8
   15c68:	movt	ip, #3
   15c6c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15c70:	mov	r5, r0
   15c74:	mov	r0, r2
   15c78:	ldr	r2, [ip]
   15c7c:	sub	sp, sp, #108	; 0x6c
   15c80:	str	ip, [sp, #60]	; 0x3c
   15c84:	str	r1, [sp, #64]	; 0x40
   15c88:	str	r3, [sp, #52]	; 0x34
   15c8c:	str	r2, [sp, #100]	; 0x64
   15c90:	bl	118e0 <xstrdup@plt>
   15c94:	movw	r1, #4488	; 0x1188
   15c98:	movt	r1, #2
   15c9c:	mov	r2, #65536	; 0x10000
   15ca0:	mov	r3, #0
   15ca4:	str	r2, [sp, #72]	; 0x48
   15ca8:	str	r3, [sp, #76]	; 0x4c
   15cac:	str	r0, [sp, #56]	; 0x38
   15cb0:	bl	117b4 <strcmp@plt>
   15cb4:	cmp	r0, #0
   15cb8:	moveq	ip, #1
   15cbc:	streq	ip, [sp, #32]
   15cc0:	beq	15ce4 <__assert_fail@plt+0x40ec>
   15cc4:	movw	r1, #5824	; 0x16c0
   15cc8:	ldr	r0, [sp, #56]	; 0x38
   15ccc:	movt	r1, #2
   15cd0:	mov	r2, #7
   15cd4:	bl	11b98 <strncmp@plt>
   15cd8:	rsbs	r0, r0, #1
   15cdc:	movcc	r0, #0
   15ce0:	str	r0, [sp, #32]
   15ce4:	ldr	ip, [sp, #52]	; 0x34
   15ce8:	movw	r6, #4488	; 0x1188
   15cec:	movt	r6, #2
   15cf0:	ldr	r0, [sp, #56]	; 0x38
   15cf4:	cmp	ip, #0
   15cf8:	movw	r1, #5832	; 0x16c8
   15cfc:	movt	r1, #2
   15d00:	movw	r4, #5808	; 0x16b0
   15d04:	movt	r4, #2
   15d08:	moveq	r4, r6
   15d0c:	bl	11790 <strstr@plt>
   15d10:	ldr	r1, [sp, #64]	; 0x40
   15d14:	ldr	r2, [sp, #56]	; 0x38
   15d18:	adds	r0, r0, #0
   15d1c:	movne	r0, #1
   15d20:	str	r0, [sp, #68]	; 0x44
   15d24:	movw	r0, #5844	; 0x16d4
   15d28:	movt	r0, #2
   15d2c:	bl	1182c <debug@plt>
   15d30:	mov	r0, r4
   15d34:	ldr	r1, [sp, #64]	; 0x40
   15d38:	bl	11940 <iconv_open@plt>
   15d3c:	cmn	r0, #1
   15d40:	str	r0, [sp, #44]	; 0x2c
   15d44:	beq	162e8 <__assert_fail@plt+0x46f0>
   15d48:	ldr	ip, [sp, #32]
   15d4c:	cmp	ip, #0
   15d50:	bne	1627c <__assert_fail@plt+0x4684>
   15d54:	mov	r1, r6
   15d58:	ldr	r0, [sp, #56]	; 0x38
   15d5c:	bl	11940 <iconv_open@plt>
   15d60:	cmn	r0, #1
   15d64:	str	r0, [sp, #36]	; 0x24
   15d68:	beq	16380 <__assert_fail@plt+0x4788>
   15d6c:	mov	r0, r5
   15d70:	add	r1, sp, #72	; 0x48
   15d74:	bl	11b08 <pipeline_peek@plt>
   15d78:	ldr	r7, [sp, #72]	; 0x48
   15d7c:	cmp	r7, #65536	; 0x10000
   15d80:	mov	r4, r0
   15d84:	bcs	15dbc <__assert_fail@plt+0x41c4>
   15d88:	mov	r6, #65536	; 0x10000
   15d8c:	b	15d94 <__assert_fail@plt+0x419c>
   15d90:	mov	r7, r3
   15d94:	mov	r0, r5
   15d98:	add	r1, sp, #72	; 0x48
   15d9c:	str	r6, [sp, #72]	; 0x48
   15da0:	bl	11b08 <pipeline_peek@plt>
   15da4:	ldr	r3, [sp, #72]	; 0x48
   15da8:	cmp	r7, r3
   15dac:	beq	15db8 <__assert_fail@plt+0x41c0>
   15db0:	cmp	r3, #65536	; 0x10000
   15db4:	bcc	15d90 <__assert_fail@plt+0x4198>
   15db8:	mov	r4, r0
   15dbc:	movw	r7, #17328	; 0x43b0
   15dc0:	movt	r7, #3
   15dc4:	ldr	r3, [r7]
   15dc8:	cmp	r3, #0
   15dcc:	beq	162c8 <__assert_fail@plt+0x46d0>
   15dd0:	ldr	r3, [r7, #4]
   15dd4:	movw	r6, #17328	; 0x43b0
   15dd8:	movt	r6, #3
   15ddc:	cmp	r3, #0
   15de0:	beq	162d8 <__assert_fail@plt+0x46e0>
   15de4:	ldr	r2, [sp, #76]	; 0x4c
   15de8:	ldr	r8, [sp, #72]	; 0x48
   15dec:	orrs	r0, r2, r8
   15df0:	mov	sl, r2
   15df4:	beq	16154 <__assert_fail@plt+0x455c>
   15df8:	movw	ip, #17328	; 0x43b0
   15dfc:	movt	ip, #3
   15e00:	str	ip, [sp, #48]	; 0x30
   15e04:	movw	ip, #8968	; 0x2308
   15e08:	movt	ip, #3
   15e0c:	str	ip, [sp, #28]
   15e10:	ldr	ip, [sp, #68]	; 0x44
   15e14:	mov	r0, #0
   15e18:	mov	r1, #0
   15e1c:	mov	r6, #65536	; 0x10000
   15e20:	eor	ip, ip, #1
   15e24:	strd	r0, [sp, #16]
   15e28:	str	ip, [sp, #40]	; 0x28
   15e2c:	b	15ea0 <__assert_fail@plt+0x42a8>
   15e30:	ldr	ip, [sp, #32]
   15e34:	cmp	ip, #0
   15e38:	bne	161b4 <__assert_fail@plt+0x45bc>
   15e3c:	cmp	r2, #0
   15e40:	streq	fp, [sp, #88]	; 0x58
   15e44:	bne	161e4 <__assert_fail@plt+0x45ec>
   15e48:	ldr	r3, [sp, #80]	; 0x50
   15e4c:	cmp	r3, r4
   15e50:	beq	15e84 <__assert_fail@plt+0x428c>
   15e54:	ldr	r3, [sp, #92]	; 0x5c
   15e58:	mov	r0, r5
   15e5c:	ldr	r1, [sp, #72]	; 0x48
   15e60:	rsb	r1, r3, r1
   15e64:	bl	11964 <pipeline_peek_skip@plt>
   15e68:	ldr	r2, [sp, #72]	; 0x48
   15e6c:	ldr	r3, [sp, #92]	; 0x5c
   15e70:	ldrd	r0, [sp, #16]
   15e74:	rsb	r3, r3, r2
   15e78:	adds	r0, r0, r3
   15e7c:	adc	r1, r1, #0
   15e80:	strd	r0, [sp, #16]
   15e84:	ldr	r2, [sp, #76]	; 0x4c
   15e88:	cmp	r2, #0
   15e8c:	beq	16104 <__assert_fail@plt+0x450c>
   15e90:	ldr	r8, [sp, #72]	; 0x48
   15e94:	orrs	r1, r2, r8
   15e98:	beq	16154 <__assert_fail@plt+0x455c>
   15e9c:	mov	sl, r2
   15ea0:	ldr	r3, [r7]
   15ea4:	cmp	sl, #0
   15ea8:	ldr	fp, [r7, #4]
   15eac:	str	r4, [sp, #80]	; 0x50
   15eb0:	str	r8, [sp, #92]	; 0x5c
   15eb4:	str	r3, [sp, #84]	; 0x54
   15eb8:	str	fp, [sp, #88]	; 0x58
   15ebc:	bne	15e30 <__assert_fail@plt+0x4238>
   15ec0:	add	r3, sp, #76	; 0x4c
   15ec4:	ldr	r0, [sp, #44]	; 0x2c
   15ec8:	str	r3, [sp]
   15ecc:	add	r1, sp, #80	; 0x50
   15ed0:	add	r3, sp, #84	; 0x54
   15ed4:	add	r2, sp, #92	; 0x5c
   15ed8:	str	r6, [sp, #76]	; 0x4c
   15edc:	bl	117a8 <iconv@plt>
   15ee0:	ldr	ip, [sp, #52]	; 0x34
   15ee4:	ldr	r8, [sp, #76]	; 0x4c
   15ee8:	rsb	r8, r8, #65536	; 0x10000
   15eec:	str	r8, [sp, #76]	; 0x4c
   15ef0:	cmn	r0, #1
   15ef4:	movne	r3, #0
   15ef8:	moveq	r3, #1
   15efc:	cmp	ip, #0
   15f00:	cmneq	r0, #1
   15f04:	bne	16194 <__assert_fail@plt+0x459c>
   15f08:	bl	11a00 <__errno_location@plt>
   15f0c:	ldr	r9, [r0]
   15f10:	cmp	r9, #84	; 0x54
   15f14:	beq	162c0 <__assert_fail@plt+0x46c8>
   15f18:	cmp	r9, #22
   15f1c:	beq	1623c <__assert_fail@plt+0x4644>
   15f20:	cmp	r9, #0
   15f24:	beq	163ac <__assert_fail@plt+0x47b4>
   15f28:	ldr	r3, [sp, #88]	; 0x58
   15f2c:	mov	sl, #0
   15f30:	ldr	fp, [r7, #4]
   15f34:	cmp	fp, r3
   15f38:	beq	15fa8 <__assert_fail@plt+0x43b0>
   15f3c:	bl	11a00 <__errno_location@plt>
   15f40:	ldr	ip, [sp, #28]
   15f44:	mov	r1, #1
   15f48:	ldr	r2, [sp, #96]	; 0x60
   15f4c:	ldr	r3, [ip]
   15f50:	mov	r8, r0
   15f54:	mov	r0, fp
   15f58:	ldr	fp, [r8]
   15f5c:	bl	118bc <fwrite@plt>
   15f60:	ldr	r3, [sp, #96]	; 0x60
   15f64:	cmp	r3, r0
   15f68:	bhi	15f80 <__assert_fail@plt+0x4388>
   15f6c:	ldr	ip, [sp, #28]
   15f70:	ldr	r0, [ip]
   15f74:	bl	117d8 <ferror@plt>
   15f78:	cmp	r0, #0
   15f7c:	beq	15fa4 <__assert_fail@plt+0x43ac>
   15f80:	mov	r2, #5
   15f84:	movw	r1, #5924	; 0x1724
   15f88:	mov	r0, #0
   15f8c:	movt	r1, #2
   15f90:	bl	11820 <dcgettext@plt>
   15f94:	mov	r1, #0
   15f98:	mov	r2, r0
   15f9c:	mov	r0, #2
   15fa0:	bl	11910 <error@plt>
   15fa4:	str	fp, [r8]
   15fa8:	cmp	sl, #0
   15fac:	bne	16050 <__assert_fail@plt+0x4458>
   15fb0:	cmp	r9, #0
   15fb4:	beq	15e48 <__assert_fail@plt+0x4250>
   15fb8:	ldr	r3, [sp, #40]	; 0x28
   15fbc:	cmp	r9, #84	; 0x54
   15fc0:	movne	r3, #0
   15fc4:	andeq	r3, r3, #1
   15fc8:	cmp	r3, #0
   15fcc:	bne	1631c <__assert_fail@plt+0x4724>
   15fd0:	cmp	r9, #22
   15fd4:	bne	15e48 <__assert_fail@plt+0x4250>
   15fd8:	ldr	r2, [sp, #72]	; 0x48
   15fdc:	cmp	r2, #65536	; 0x10000
   15fe0:	bcs	15e48 <__assert_fail@plt+0x4250>
   15fe4:	movw	r3, #8844	; 0x228c
   15fe8:	movt	r3, #3
   15fec:	ldr	r3, [r3]
   15ff0:	cmp	r3, #0
   15ff4:	bne	16368 <__assert_fail@plt+0x4770>
   15ff8:	ldr	r3, [r7]
   15ffc:	mov	r1, r4
   16000:	ldr	r0, [sp, #64]	; 0x40
   16004:	bl	11cf8 <__assert_fail@plt+0x100>
   16008:	mov	r2, #5
   1600c:	mov	r4, r0
   16010:	mov	r5, r1
   16014:	mov	r0, sl
   16018:	movw	r1, #5972	; 0x1754
   1601c:	movt	r1, #2
   16020:	bl	11820 <dcgettext@plt>
   16024:	ldrd	r2, [sp, #16]
   16028:	mov	r1, sl
   1602c:	adds	r4, r4, r2
   16030:	movw	r2, #6020	; 0x1784
   16034:	adc	r5, r5, r3
   16038:	movt	r2, #2
   1603c:	strd	r4, [sp]
   16040:	str	r0, [sp, #8]
   16044:	mov	r0, #2
   16048:	bl	11910 <error@plt>
   1604c:	b	16368 <__assert_fail@plt+0x4770>
   16050:	ldr	ip, [r7, #4]
   16054:	add	r3, sp, #104	; 0x68
   16058:	mov	r1, #0
   1605c:	ldr	r0, [sp, #36]	; 0x24
   16060:	str	r6, [r3, #-8]!
   16064:	mov	r2, r1
   16068:	str	r3, [sp]
   1606c:	add	r3, sp, #88	; 0x58
   16070:	str	ip, [sp, #88]	; 0x58
   16074:	bl	117a8 <iconv@plt>
   16078:	ldr	r9, [r7, #4]
   1607c:	ldr	r3, [sp, #88]	; 0x58
   16080:	ldr	sl, [sp, #96]	; 0x60
   16084:	cmp	r3, r9
   16088:	rsb	sl, sl, #65536	; 0x10000
   1608c:	str	sl, [sp, #96]	; 0x60
   16090:	beq	15e48 <__assert_fail@plt+0x4250>
   16094:	bl	11a00 <__errno_location@plt>
   16098:	ldr	ip, [sp, #28]
   1609c:	mov	r2, sl
   160a0:	mov	r1, #1
   160a4:	ldr	r3, [ip]
   160a8:	mov	r8, r0
   160ac:	mov	r0, r9
   160b0:	ldr	r9, [r8]
   160b4:	bl	118bc <fwrite@plt>
   160b8:	ldr	r3, [sp, #96]	; 0x60
   160bc:	cmp	r3, r0
   160c0:	bhi	160d8 <__assert_fail@plt+0x44e0>
   160c4:	ldr	ip, [sp, #28]
   160c8:	ldr	r0, [ip]
   160cc:	bl	117d8 <ferror@plt>
   160d0:	cmp	r0, #0
   160d4:	beq	160fc <__assert_fail@plt+0x4504>
   160d8:	mov	r2, #5
   160dc:	movw	r1, #5924	; 0x1724
   160e0:	mov	r0, #0
   160e4:	movt	r1, #2
   160e8:	bl	11820 <dcgettext@plt>
   160ec:	mov	r1, #0
   160f0:	mov	r2, r0
   160f4:	mov	r0, #2
   160f8:	bl	11910 <error@plt>
   160fc:	str	r9, [r8]
   16100:	b	15e48 <__assert_fail@plt+0x4250>
   16104:	mov	r0, r5
   16108:	add	r1, sp, #72	; 0x48
   1610c:	str	r6, [sp, #72]	; 0x48
   16110:	bl	11b08 <pipeline_peek@plt>
   16114:	ldr	r8, [sp, #72]	; 0x48
   16118:	b	1613c <__assert_fail@plt+0x4544>
   1611c:	mov	r0, r5
   16120:	add	r1, sp, #72	; 0x48
   16124:	str	r6, [sp, #72]	; 0x48
   16128:	bl	11b08 <pipeline_peek@plt>
   1612c:	ldr	r3, [sp, #72]	; 0x48
   16130:	cmp	r3, r8
   16134:	beq	16144 <__assert_fail@plt+0x454c>
   16138:	mov	r8, r3
   1613c:	cmp	r8, #65536	; 0x10000
   16140:	bcc	1611c <__assert_fail@plt+0x4524>
   16144:	ldr	r2, [sp, #76]	; 0x4c
   16148:	mov	r4, r0
   1614c:	orrs	r1, r2, r8
   16150:	bne	15e9c <__assert_fail@plt+0x42a4>
   16154:	mov	r4, #0
   16158:	ldr	ip, [sp, #32]
   1615c:	cmp	ip, #0
   16160:	beq	162b4 <__assert_fail@plt+0x46bc>
   16164:	ldr	r0, [sp, #44]	; 0x2c
   16168:	bl	1179c <iconv_close@plt>
   1616c:	ldr	r0, [sp, #56]	; 0x38
   16170:	bl	117cc <free@plt>
   16174:	mov	r0, r4
   16178:	ldr	ip, [sp, #60]	; 0x3c
   1617c:	ldr	r2, [sp, #100]	; 0x64
   16180:	ldr	r3, [ip]
   16184:	cmp	r2, r3
   16188:	bne	1637c <__assert_fail@plt+0x4784>
   1618c:	add	sp, sp, #108	; 0x6c
   16190:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16194:	cmp	r3, #0
   16198:	bne	16370 <__assert_fail@plt+0x4778>
   1619c:	ldr	ip, [sp, #48]	; 0x30
   161a0:	mov	r2, r8
   161a4:	ldr	fp, [ip, #4]
   161a8:	ldr	ip, [sp, #32]
   161ac:	cmp	ip, #0
   161b0:	beq	15e3c <__assert_fail@plt+0x4244>
   161b4:	mov	r0, fp
   161b8:	ldr	r1, [r7]
   161bc:	bl	117e4 <memcpy@plt>
   161c0:	ldr	r2, [sp, #76]	; 0x4c
   161c4:	ldr	r3, [sp, #88]	; 0x58
   161c8:	mov	sl, #0
   161cc:	mov	r9, sl
   161d0:	str	sl, [sp, #76]	; 0x4c
   161d4:	add	r3, r3, r2
   161d8:	str	r2, [sp, #96]	; 0x60
   161dc:	str	r3, [sp, #88]	; 0x58
   161e0:	b	15f34 <__assert_fail@plt+0x433c>
   161e4:	ldr	r3, [r7]
   161e8:	add	r1, sp, #104	; 0x68
   161ec:	add	r2, sp, #96	; 0x60
   161f0:	ldr	r0, [sp, #36]	; 0x24
   161f4:	str	r2, [sp]
   161f8:	add	r2, sp, #76	; 0x4c
   161fc:	str	r3, [r1, #-20]!	; 0xffffffec
   16200:	add	r3, sp, #88	; 0x58
   16204:	str	fp, [sp, #88]	; 0x58
   16208:	str	r6, [sp, #96]	; 0x60
   1620c:	bl	117a8 <iconv@plt>
   16210:	ldr	r3, [sp, #96]	; 0x60
   16214:	rsb	r3, r3, #65536	; 0x10000
   16218:	str	r3, [sp, #96]	; 0x60
   1621c:	cmn	r0, #1
   16220:	beq	16258 <__assert_fail@plt+0x4660>
   16224:	ldr	ip, [sp, #48]	; 0x30
   16228:	mov	sl, #1
   1622c:	ldr	r3, [sp, #88]	; 0x58
   16230:	ldr	r9, [sp, #32]
   16234:	ldr	fp, [ip, #4]
   16238:	b	15f34 <__assert_fail@plt+0x433c>
   1623c:	ldr	r3, [sp, #72]	; 0x48
   16240:	cmp	r3, #65536	; 0x10000
   16244:	bcc	162c0 <__assert_fail@plt+0x46c8>
   16248:	ldr	ip, [sp, #48]	; 0x30
   1624c:	ldr	r3, [sp, #88]	; 0x58
   16250:	ldr	fp, [ip, #4]
   16254:	b	15f34 <__assert_fail@plt+0x433c>
   16258:	bl	11a00 <__errno_location@plt>
   1625c:	ldr	r9, [r0]
   16260:	cmp	r9, #84	; 0x54
   16264:	beq	16288 <__assert_fail@plt+0x4690>
   16268:	ldr	ip, [sp, #48]	; 0x30
   1626c:	ldr	r3, [sp, #88]	; 0x58
   16270:	ldr	sl, [sp, #32]
   16274:	ldr	fp, [ip, #4]
   16278:	b	15f34 <__assert_fail@plt+0x433c>
   1627c:	mov	ip, #0
   16280:	str	ip, [sp, #36]	; 0x24
   16284:	b	15d6c <__assert_fail@plt+0x4174>
   16288:	ldr	ip, [sp, #68]	; 0x44
   1628c:	cmp	ip, #0
   16290:	ldrne	ip, [sp, #32]
   16294:	moveq	sl, ip
   16298:	ldreq	r3, [sp, #88]	; 0x58
   1629c:	ldrne	r3, [sp, #88]	; 0x58
   162a0:	strne	ip, [r0]
   162a4:	movne	sl, ip
   162a8:	ldr	ip, [sp, #48]	; 0x30
   162ac:	ldr	fp, [ip, #4]
   162b0:	b	15f34 <__assert_fail@plt+0x433c>
   162b4:	ldr	r0, [sp, #36]	; 0x24
   162b8:	bl	1179c <iconv_close@plt>
   162bc:	b	16164 <__assert_fail@plt+0x456c>
   162c0:	mvn	r4, #0
   162c4:	b	16158 <__assert_fail@plt+0x4560>
   162c8:	mov	r0, #65536	; 0x10000
   162cc:	bl	118c8 <xmalloc@plt>
   162d0:	str	r0, [r7]
   162d4:	b	15dd0 <__assert_fail@plt+0x41d8>
   162d8:	mov	r0, #65536	; 0x10000
   162dc:	bl	118c8 <xmalloc@plt>
   162e0:	str	r0, [r6, #4]
   162e4:	b	15de4 <__assert_fail@plt+0x41ec>
   162e8:	bl	11a00 <__errno_location@plt>
   162ec:	ldr	ip, [sp, #64]	; 0x40
   162f0:	mov	r3, r4
   162f4:	movw	r2, #5872	; 0x16f0
   162f8:	movt	r2, #2
   162fc:	ldr	r1, [r0]
   16300:	mov	r0, #0
   16304:	str	ip, [sp]
   16308:	bl	11910 <error@plt>
   1630c:	ldr	r0, [sp, #56]	; 0x38
   16310:	bl	117cc <free@plt>
   16314:	ldr	r0, [sp, #44]	; 0x2c
   16318:	b	16178 <__assert_fail@plt+0x4580>
   1631c:	movw	r3, #8844	; 0x228c
   16320:	movt	r3, #3
   16324:	ldr	r3, [r3]
   16328:	cmp	r3, #0
   1632c:	bne	16368 <__assert_fail@plt+0x4770>
   16330:	mov	r1, r4
   16334:	ldr	r2, [sp, #72]	; 0x48
   16338:	ldr	r0, [sp, #64]	; 0x40
   1633c:	ldr	r3, [r7]
   16340:	bl	11cf8 <__assert_fail@plt+0x100>
   16344:	ldrd	r4, [sp, #16]
   16348:	movw	r2, #5956	; 0x1744
   1634c:	movt	r2, #2
   16350:	adds	r4, r4, r0
   16354:	mov	r0, sl
   16358:	adc	r5, r5, r1
   1635c:	mov	r1, #84	; 0x54
   16360:	strd	r4, [sp]
   16364:	bl	11910 <error@plt>
   16368:	mov	r0, #2
   1636c:	bl	119c4 <exit@plt>
   16370:	bl	11a00 <__errno_location@plt>
   16374:	ldr	r9, [r0]
   16378:	b	15f20 <__assert_fail@plt+0x4328>
   1637c:	bl	11838 <__stack_chk_fail@plt>
   16380:	bl	11a00 <__errno_location@plt>
   16384:	ldr	r3, [sp, #56]	; 0x38
   16388:	movw	r2, #5896	; 0x1708
   1638c:	movt	r2, #2
   16390:	ldr	r1, [r0]
   16394:	ldr	r0, [sp, #32]
   16398:	bl	11910 <error@plt>
   1639c:	ldr	r0, [sp, #56]	; 0x38
   163a0:	bl	117cc <free@plt>
   163a4:	ldr	r0, [sp, #36]	; 0x24
   163a8:	b	16178 <__assert_fail@plt+0x4580>
   163ac:	ldr	fp, [r7, #4]
   163b0:	mov	r2, r8
   163b4:	b	15e30 <__assert_fail@plt+0x4238>
   163b8:	push	{r3, r4, r5, r6, r7, lr}
   163bc:	mov	r4, r1
   163c0:	mov	r6, r2
   163c4:	mov	r5, r0
   163c8:	bl	11a78 <check_preprocessor_encoding@plt>
   163cc:	subs	r7, r0, #0
   163d0:	beq	163f4 <__assert_fail@plt+0x47fc>
   163d4:	mov	r0, r5
   163d8:	mov	r2, r6
   163dc:	mov	r1, r7
   163e0:	mov	r3, #1
   163e4:	bl	15c64 <__assert_fail@plt+0x406c>
   163e8:	mov	r0, r7
   163ec:	pop	{r3, r4, r5, r6, r7, lr}
   163f0:	b	117cc <free@plt>
   163f4:	ldr	r1, [r4]
   163f8:	cmp	r1, #0
   163fc:	popeq	{r3, r4, r5, r6, r7, pc}
   16400:	ldr	r3, [r4, #4]
   16404:	mov	r0, r5
   16408:	mov	r2, r6
   1640c:	rsbs	r3, r3, #1
   16410:	movcc	r3, #0
   16414:	bl	15c64 <__assert_fail@plt+0x406c>
   16418:	cmp	r0, #0
   1641c:	popeq	{r3, r4, r5, r6, r7, pc}
   16420:	ldr	r1, [r4, #4]!
   16424:	cmp	r1, #0
   16428:	bne	16400 <__assert_fail@plt+0x4808>
   1642c:	pop	{r3, r4, r5, r6, r7, pc}
   16430:	push	{r3, r4, r5, lr}
   16434:	mov	r5, r0
   16438:	ldr	r4, [r0]
   1643c:	ldr	r0, [r4]
   16440:	cmp	r0, #0
   16444:	beq	16474 <__assert_fail@plt+0x487c>
   16448:	bl	117cc <free@plt>
   1644c:	ldr	r0, [r4, #4]!
   16450:	cmp	r0, #0
   16454:	bne	16448 <__assert_fail@plt+0x4850>
   16458:	ldr	r0, [r5]
   1645c:	bl	117cc <free@plt>
   16460:	ldr	r0, [r5, #4]
   16464:	bl	117cc <free@plt>
   16468:	mov	r0, r5
   1646c:	pop	{r3, r4, r5, lr}
   16470:	b	117cc <free@plt>
   16474:	mov	r0, r4
   16478:	b	1645c <__assert_fail@plt+0x4864>
   1647c:	push	{r3, r4, r5, lr}
   16480:	mov	r5, r0
   16484:	mov	r0, #0
   16488:	bl	1185c <dup@plt>
   1648c:	bl	118b0 <decompress_fdopen@plt>
   16490:	mov	r4, r0
   16494:	bl	11958 <pipeline_start@plt>
   16498:	mov	r0, r4
   1649c:	ldm	r5, {r1, r2}
   164a0:	bl	163b8 <__assert_fail@plt+0x47c0>
   164a4:	mov	r0, r4
   164a8:	bl	117fc <pipeline_wait@plt>
   164ac:	mov	r0, r4
   164b0:	pop	{r3, r4, r5, lr}
   164b4:	b	11afc <pipeline_free@plt>
   164b8:	push	{r4, r5, r6, r7, r8, r9, sl, lr}
   164bc:	mov	r7, r0
   164c0:	mov	r0, #8
   164c4:	mov	r5, r1
   164c8:	mov	r6, r2
   164cc:	bl	118c8 <xmalloc@plt>
   164d0:	movw	r1, #4488	; 0x1188
   164d4:	movt	r1, #2
   164d8:	mov	r4, r0
   164dc:	mov	r0, r5
   164e0:	bl	117b4 <strcmp@plt>
   164e4:	cmp	r0, #0
   164e8:	bne	16504 <__assert_fail@plt+0x490c>
   164ec:	movw	r1, #4488	; 0x1188
   164f0:	mov	r0, r6
   164f4:	movt	r1, #2
   164f8:	bl	117b4 <strcmp@plt>
   164fc:	cmp	r0, #0
   16500:	popeq	{r4, r5, r6, r7, r8, r9, sl, pc}
   16504:	mov	r0, #0
   16508:	movw	r1, #6036	; 0x1794
   1650c:	mov	r3, r0
   16510:	movt	r1, #2
   16514:	movw	r2, #6064	; 0x17b0
   16518:	movt	r2, #2
   1651c:	bl	119a0 <appendstr@plt>
   16520:	movw	r1, #4488	; 0x1188
   16524:	movt	r1, #2
   16528:	mov	r8, r0
   1652c:	mov	r0, r5
   16530:	bl	117b4 <strcmp@plt>
   16534:	subs	r9, r0, #0
   16538:	beq	16630 <__assert_fail@plt+0x4a38>
   1653c:	mov	r0, #12
   16540:	bl	118c8 <xmalloc@plt>
   16544:	mov	r9, r0
   16548:	movw	r0, #4488	; 0x1188
   1654c:	str	r9, [r4]
   16550:	movt	r0, #2
   16554:	bl	118e0 <xstrdup@plt>
   16558:	ldr	sl, [r4]
   1655c:	str	r0, [r9]
   16560:	mov	r0, r5
   16564:	bl	118e0 <xstrdup@plt>
   16568:	mov	ip, #0
   1656c:	mov	r2, r5
   16570:	mov	r3, ip
   16574:	movw	r1, #6072	; 0x17b8
   16578:	movt	r1, #2
   1657c:	str	r0, [sl, #4]
   16580:	mov	r0, r8
   16584:	ldr	lr, [r4]
   16588:	str	ip, [lr, #8]
   1658c:	bl	119a0 <appendstr@plt>
   16590:	mov	r5, r0
   16594:	mov	r0, #0
   16598:	mov	r1, r6
   1659c:	mov	r3, r0
   165a0:	movw	r2, #5832	; 0x16c8
   165a4:	movt	r2, #2
   165a8:	bl	119a0 <appendstr@plt>
   165ac:	mov	r3, #0
   165b0:	movw	r1, #6080	; 0x17c0
   165b4:	movt	r1, #2
   165b8:	mov	ip, r0
   165bc:	mov	r2, r0
   165c0:	str	ip, [r4, #4]
   165c4:	mov	r0, r5
   165c8:	bl	119a0 <appendstr@plt>
   165cc:	movw	r3, #8844	; 0x228c
   165d0:	movt	r3, #3
   165d4:	ldr	r3, [r3]
   165d8:	cmp	r3, #1
   165dc:	mov	r5, r0
   165e0:	ble	165f8 <__assert_fail@plt+0x4a00>
   165e4:	movw	r1, #6088	; 0x17c8
   165e8:	mov	r2, #0
   165ec:	movt	r1, #2
   165f0:	bl	119a0 <appendstr@plt>
   165f4:	mov	r5, r0
   165f8:	mov	r3, r4
   165fc:	mov	r0, r5
   16600:	movw	r1, #25724	; 0x647c
   16604:	movw	r2, #25648	; 0x6430
   16608:	movt	r1, #1
   1660c:	movt	r2, #1
   16610:	bl	11ae4 <pipecmd_new_function@plt>
   16614:	mov	r4, r0
   16618:	mov	r0, r5
   1661c:	bl	117cc <free@plt>
   16620:	mov	r0, r7
   16624:	mov	r1, r4
   16628:	pop	{r4, r5, r6, r7, r8, r9, sl, lr}
   1662c:	b	11acc <pipeline_command@plt>
   16630:	mov	r0, #8
   16634:	bl	118c8 <xmalloc@plt>
   16638:	mov	sl, r0
   1663c:	mov	r0, r5
   16640:	str	sl, [r4]
   16644:	bl	118e0 <xstrdup@plt>
   16648:	ldr	r3, [r4]
   1664c:	mov	r1, r5
   16650:	mov	r2, r9
   16654:	str	r0, [sl]
   16658:	mov	r0, r8
   1665c:	str	r9, [r3, #4]
   16660:	bl	119a0 <appendstr@plt>
   16664:	mov	r5, r0
   16668:	b	16594 <__assert_fail@plt+0x499c>
   1666c:	push	{r3, r4, r5, r6, r7, lr}
   16670:	subs	r4, r0, #0
   16674:	mov	r6, r1
   16678:	popeq	{r3, r4, r5, r6, r7, pc}
   1667c:	ldr	r5, [r4, #4]
   16680:	ldr	r1, [r4, #8]
   16684:	cmp	r5, r1
   16688:	bcs	166a8 <__assert_fail@plt+0x4ab0>
   1668c:	ldr	r7, [r4]
   16690:	add	r3, r5, #1
   16694:	mov	r0, r6
   16698:	str	r3, [r4, #4]
   1669c:	bl	118e0 <xstrdup@plt>
   166a0:	str	r0, [r7, r5, lsl #2]
   166a4:	pop	{r3, r4, r5, r6, r7, pc}
   166a8:	lsl	r2, r1, #1
   166ac:	ldr	r0, [r4]
   166b0:	lsl	r1, r1, #3
   166b4:	str	r2, [r4, #8]
   166b8:	bl	11868 <xrealloc@plt>
   166bc:	ldr	r5, [r4, #4]
   166c0:	mov	r7, r0
   166c4:	str	r0, [r4]
   166c8:	b	16690 <__assert_fail@plt+0x4a98>
   166cc:	push	{r3, r4, r5, lr}
   166d0:	mov	r5, r0
   166d4:	ldr	r3, [r0, #4]
   166d8:	cmp	r3, #0
   166dc:	movne	r4, #0
   166e0:	beq	16700 <__assert_fail@plt+0x4b08>
   166e4:	ldr	r3, [r5]
   166e8:	ldr	r0, [r3, r4, lsl #2]
   166ec:	add	r4, r4, #1
   166f0:	bl	117cc <free@plt>
   166f4:	ldr	r3, [r5, #4]
   166f8:	cmp	r3, r4
   166fc:	bhi	166e4 <__assert_fail@plt+0x4aec>
   16700:	ldr	r0, [r5]
   16704:	pop	{r3, r4, r5, lr}
   16708:	b	117cc <free@plt>
   1670c:	push	{r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16710:	sub	sp, sp, #156	; 0x9c
   16714:	movw	r6, #8952	; 0x22f8
   16718:	movt	r6, #3
   1671c:	ldr	r5, [sp, #192]	; 0xc0
   16720:	mov	r7, r0
   16724:	ldr	r0, [r6]
   16728:	mov	r9, r2
   1672c:	cmp	r5, #0
   16730:	str	r1, [sp, #24]
   16734:	mov	r8, r3
   16738:	str	r0, [sp, #148]	; 0x94
   1673c:	beq	16758 <__assert_fail@plt+0x4b60>
   16740:	ldr	r3, [r5]
   16744:	cmp	r3, #0
   16748:	beq	16c20 <__assert_fail@plt+0x5028>
   1674c:	mov	r0, r5
   16750:	mov	r1, r7
   16754:	bl	1666c <__assert_fail@plt+0x4a74>
   16758:	movw	r4, #17336	; 0x43b8
   1675c:	movt	r4, #3
   16760:	ldrh	r3, [r4]
   16764:	cmp	r3, #0
   16768:	bne	1691c <__assert_fail@plt+0x4d24>
   1676c:	ldr	r0, [r4, #4]
   16770:	cmp	r0, #0
   16774:	beq	1677c <__assert_fail@plt+0x4b84>
   16778:	bl	117cc <free@plt>
   1677c:	mov	r0, r7
   16780:	movw	sl, #17336	; 0x43b8
   16784:	bl	118e0 <xstrdup@plt>
   16788:	mov	r1, r7
   1678c:	ldr	r2, [sp, #24]
   16790:	movt	sl, #3
   16794:	str	r0, [r4, #4]
   16798:	movw	r0, #6116	; 0x17e4
   1679c:	movt	r0, #2
   167a0:	bl	1182c <debug@plt>
   167a4:	cmp	r9, #0
   167a8:	beq	16a00 <__assert_fail@plt+0x4e08>
   167ac:	tst	r8, #2
   167b0:	beq	16c3c <__assert_fail@plt+0x5044>
   167b4:	ldr	r3, [r9, #16]
   167b8:	ldr	fp, [r4, #4]
   167bc:	and	r3, r3, #61440	; 0xf000
   167c0:	cmp	r3, #40960	; 0xa000
   167c4:	beq	16c6c <__assert_fail@plt+0x5074>
   167c8:	tst	r8, #4
   167cc:	beq	16928 <__assert_fail@plt+0x4d30>
   167d0:	ldr	r3, [r9, #20]
   167d4:	cmp	r3, #1
   167d8:	bls	16924 <__assert_fail@plt+0x4d2c>
   167dc:	ldr	sl, [r4, #4]
   167e0:	mov	r1, #47	; 0x2f
   167e4:	ldrd	r2, [r9, #96]	; 0x60
   167e8:	mov	r0, sl
   167ec:	strd	r2, [sp, #16]
   167f0:	bl	11af0 <strrchr@plt>
   167f4:	subs	r1, r0, #0
   167f8:	beq	16fec <__assert_fail@plt+0x53f4>
   167fc:	add	r3, r1, #1
   16800:	mov	r0, sl
   16804:	rsb	r1, sl, r1
   16808:	str	r3, [sp, #32]
   1680c:	bl	11b14 <xstrndup@plt>
   16810:	str	r0, [sp, #28]
   16814:	ldr	r0, [sp, #32]
   16818:	bl	118e0 <xstrdup@plt>
   1681c:	mov	sl, r0
   16820:	ldr	r0, [sp, #28]
   16824:	bl	1191c <opendir@plt>
   16828:	subs	r9, r0, #0
   1682c:	strne	r5, [sp, #36]	; 0x24
   16830:	strne	r4, [sp, #8]
   16834:	beq	16dc4 <__assert_fail@plt+0x51cc>
   16838:	mov	r0, r9
   1683c:	bl	11b38 <readdir64@plt>
   16840:	cmp	r0, #0
   16844:	beq	168a8 <__assert_fail@plt+0x4cb0>
   16848:	ldrd	r4, [sp, #16]
   1684c:	ldrd	r2, [r0]
   16850:	cmp	r5, r3
   16854:	cmpeq	r4, r2
   16858:	bne	16838 <__assert_fail@plt+0x4c40>
   1685c:	add	fp, r0, #19
   16860:	mov	r0, sl
   16864:	mov	r1, fp
   16868:	bl	117b4 <strcmp@plt>
   1686c:	cmp	r0, #0
   16870:	ble	16838 <__assert_fail@plt+0x4c40>
   16874:	mov	r0, sl
   16878:	bl	117cc <free@plt>
   1687c:	mov	r0, fp
   16880:	bl	118e0 <xstrdup@plt>
   16884:	mov	r1, r0
   16888:	mov	sl, r0
   1688c:	movw	r0, #6280	; 0x1888
   16890:	movt	r0, #2
   16894:	bl	1182c <debug@plt>
   16898:	mov	r0, r9
   1689c:	bl	11b38 <readdir64@plt>
   168a0:	cmp	r0, #0
   168a4:	bne	16848 <__assert_fail@plt+0x4c50>
   168a8:	mov	fp, r0
   168ac:	mov	r0, r9
   168b0:	ldr	r5, [sp, #36]	; 0x24
   168b4:	ldr	r4, [sp, #8]
   168b8:	bl	11bc8 <closedir@plt>
   168bc:	mov	r0, sl
   168c0:	ldr	r1, [sp, #32]
   168c4:	bl	117b4 <strcmp@plt>
   168c8:	cmp	r0, #0
   168cc:	beq	16e08 <__assert_fail@plt+0x5210>
   168d0:	ldr	r1, [sp, #28]
   168d4:	mov	r3, sl
   168d8:	str	fp, [sp]
   168dc:	mov	r0, fp
   168e0:	movw	r2, #28976	; 0x7130
   168e4:	movt	r2, #1
   168e8:	bl	119a0 <appendstr@plt>
   168ec:	mov	r9, r0
   168f0:	ldr	r0, [sp, #28]
   168f4:	bl	117cc <free@plt>
   168f8:	mov	r0, sl
   168fc:	bl	117cc <free@plt>
   16900:	cmp	r9, #0
   16904:	beq	16924 <__assert_fail@plt+0x4d2c>
   16908:	ldr	r0, [r4, #4]
   1690c:	mov	fp, r9
   16910:	bl	117cc <free@plt>
   16914:	str	r9, [r4, #4]
   16918:	b	16928 <__assert_fail@plt+0x4d30>
   1691c:	cmp	r3, #10
   16920:	beq	169e4 <__assert_fail@plt+0x4dec>
   16924:	ldr	fp, [r4, #4]
   16928:	tst	r8, #1
   1692c:	bne	16964 <__assert_fail@plt+0x4d6c>
   16930:	cmp	r5, #0
   16934:	beq	16948 <__assert_fail@plt+0x4d50>
   16938:	mov	r1, fp
   1693c:	mov	r0, r5
   16940:	bl	1666c <__assert_fail@plt+0x4a74>
   16944:	ldr	fp, [r4, #4]
   16948:	mov	r0, fp
   1694c:	ldr	r2, [sp, #148]	; 0x94
   16950:	ldr	r3, [r6]
   16954:	cmp	r2, r3
   16958:	bne	16fe8 <__assert_fail@plt+0x53f0>
   1695c:	add	sp, sp, #156	; 0x9c
   16960:	pop	{r4, r5, r6, r7, r8, r9, sl, fp, pc}
   16964:	mov	r0, #3
   16968:	mov	r1, fp
   1696c:	add	r2, sp, #40	; 0x28
   16970:	bl	11b8c <__xstat64@plt>
   16974:	cmp	r0, #0
   16978:	blt	16a54 <__assert_fail@plt+0x4e5c>
   1697c:	mov	r0, fp
   16980:	bl	118e0 <xstrdup@plt>
   16984:	mov	fp, r0
   16988:	bl	11994 <decompress_open@plt>
   1698c:	subs	r9, r0, #0
   16990:	beq	16a30 <__assert_fail@plt+0x4e38>
   16994:	bl	11958 <pipeline_start@plt>
   16998:	b	169b4 <__assert_fail@plt+0x4dbc>
   1699c:	movw	r1, #6324	; 0x18b4
   169a0:	mov	r2, #3
   169a4:	movt	r1, #2
   169a8:	bl	11b98 <strncmp@plt>
   169ac:	cmp	r0, #0
   169b0:	bne	16a88 <__assert_fail@plt+0x4e90>
   169b4:	mov	r0, r9
   169b8:	bl	11b2c <pipeline_readline@plt>
   169bc:	subs	sl, r0, #0
   169c0:	bne	1699c <__assert_fail@plt+0x4da4>
   169c4:	mov	r0, r9
   169c8:	bl	117fc <pipeline_wait@plt>
   169cc:	mov	r0, r9
   169d0:	bl	11afc <pipeline_free@plt>
   169d4:	mov	r0, fp
   169d8:	bl	117cc <free@plt>
   169dc:	ldr	fp, [r4, #4]
   169e0:	b	16930 <__assert_fail@plt+0x4d38>
   169e4:	movw	r3, #8844	; 0x228c
   169e8:	movt	r3, #3
   169ec:	ldr	r3, [r3]
   169f0:	cmp	r3, #1
   169f4:	ble	16d94 <__assert_fail@plt+0x519c>
   169f8:	mov	r0, #0
   169fc:	b	1694c <__assert_fail@plt+0x4d54>
   16a00:	tst	r8, #6
   16a04:	bne	16d2c <__assert_fail@plt+0x5134>
   16a08:	tst	r8, #2
   16a0c:	beq	17008 <__assert_fail@plt+0x5410>
   16a10:	movw	r0, #6172	; 0x181c
   16a14:	movw	r1, #6176	; 0x1820
   16a18:	movw	r3, #6092	; 0x17cc
   16a1c:	movt	r0, #2
   16a20:	movt	r1, #2
   16a24:	mov	r2, #260	; 0x104
   16a28:	movt	r3, #2
   16a2c:	bl	11bf8 <__assert_fail@plt>
   16a30:	movw	r3, #8844	; 0x228c
   16a34:	movt	r3, #3
   16a38:	ldr	r3, [r3]
   16a3c:	cmp	r3, #1
   16a40:	ble	16f50 <__assert_fail@plt+0x5358>
   16a44:	mov	r0, fp
   16a48:	bl	117cc <free@plt>
   16a4c:	mov	r0, #0
   16a50:	b	1694c <__assert_fail@plt+0x4d54>
   16a54:	mov	r0, fp
   16a58:	bl	12fd0 <__assert_fail@plt+0x13d8>
   16a5c:	subs	r9, r0, #0
   16a60:	beq	16f00 <__assert_fail@plt+0x5308>
   16a64:	ldr	r0, [r4, #4]
   16a68:	cmp	r0, #0
   16a6c:	beq	16a74 <__assert_fail@plt+0x4e7c>
   16a70:	bl	117cc <free@plt>
   16a74:	ldr	fp, [r9, #8]
   16a78:	mov	r3, #0
   16a7c:	str	r3, [r9, #8]
   16a80:	str	fp, [r4, #4]
   16a84:	b	1697c <__assert_fail@plt+0x4d84>
   16a88:	bl	119b8 <__ctype_b_loc@plt>
   16a8c:	mov	r2, sl
   16a90:	ldr	sl, [r0]
   16a94:	mov	r3, r2
   16a98:	ldrb	r1, [r2], #1
   16a9c:	lsl	r1, r1, #1
   16aa0:	ldrh	r1, [sl, r1]
   16aa4:	tst	r1, #8192	; 0x2000
   16aa8:	bne	16a94 <__assert_fail@plt+0x4e9c>
   16aac:	mov	r0, r3
   16ab0:	movw	r1, #6328	; 0x18b8
   16ab4:	mov	r2, #3
   16ab8:	movt	r1, #2
   16abc:	str	r3, [sp, #12]
   16ac0:	bl	11b98 <strncmp@plt>
   16ac4:	ldr	r3, [sp, #12]
   16ac8:	cmp	r0, #0
   16acc:	bne	169c4 <__assert_fail@plt+0x4dcc>
   16ad0:	ldrb	r2, [r3, #3]
   16ad4:	add	r0, r3, #3
   16ad8:	lsl	r1, r2, #1
   16adc:	ldrh	r1, [sl, r1]
   16ae0:	tst	r1, #8192	; 0x2000
   16ae4:	beq	16b04 <__assert_fail@plt+0x4f0c>
   16ae8:	add	r3, r3, #4
   16aec:	mov	r0, r3
   16af0:	ldrb	r2, [r3], #1
   16af4:	lsl	r1, r2, #1
   16af8:	ldrh	r1, [sl, r1]
   16afc:	tst	r1, #8192	; 0x2000
   16b00:	bne	16aec <__assert_fail@plt+0x4ef4>
   16b04:	cmp	r2, #47	; 0x2f
   16b08:	beq	169c4 <__assert_fail@plt+0x4dcc>
   16b0c:	ldrb	r1, [r0]
   16b10:	cmp	r1, #0
   16b14:	beq	16b54 <__assert_fail@plt+0x4f5c>
   16b18:	lsl	r1, r1, #1
   16b1c:	ldrh	r3, [sl, r1]
   16b20:	tst	r3, #8192	; 0x2000
   16b24:	bne	16f84 <__assert_fail@plt+0x538c>
   16b28:	add	r3, r0, #1
   16b2c:	b	16b40 <__assert_fail@plt+0x4f48>
   16b30:	lsl	r2, r2, #1
   16b34:	ldrh	r2, [sl, r2]
   16b38:	tst	r2, #8192	; 0x2000
   16b3c:	bne	16b50 <__assert_fail@plt+0x4f58>
   16b40:	mov	r1, r3
   16b44:	ldrb	r2, [r3], #1
   16b48:	cmp	r2, #0
   16b4c:	bne	16b30 <__assert_fail@plt+0x4f38>
   16b50:	rsb	r1, r0, r1
   16b54:	bl	11b14 <xstrndup@plt>
   16b58:	cmp	r0, #0
   16b5c:	str	r0, [sp, #16]
   16b60:	beq	169c4 <__assert_fail@plt+0x4dcc>
   16b64:	mov	sl, #0
   16b68:	ldr	r0, [r4, #4]
   16b6c:	bl	117cc <free@plt>
   16b70:	ldr	r1, [sp, #24]
   16b74:	ldr	r3, [sp, #16]
   16b78:	mov	r0, sl
   16b7c:	str	sl, [sp]
   16b80:	movw	r2, #28976	; 0x7130
   16b84:	movt	r2, #1
   16b88:	movw	ip, #17336	; 0x43b8
   16b8c:	str	ip, [sp, #12]
   16b90:	bl	119a0 <appendstr@plt>
   16b94:	mov	r1, sl
   16b98:	str	r0, [sp, #28]
   16b9c:	str	r0, [r4, #4]
   16ba0:	bl	11aa8 <access@plt>
   16ba4:	ldr	ip, [sp, #12]
   16ba8:	movt	ip, #3
   16bac:	cmp	r0, sl
   16bb0:	bne	16cb0 <__assert_fail@plt+0x50b8>
   16bb4:	ldr	r0, [sp, #16]
   16bb8:	bl	117cc <free@plt>
   16bbc:	ldr	r1, [sp, #28]
   16bc0:	movw	r0, #6332	; 0x18bc
   16bc4:	movt	r0, #2
   16bc8:	bl	1182c <debug@plt>
   16bcc:	ldrh	ip, [r4]
   16bd0:	ldr	r1, [sp, #24]
   16bd4:	mov	r2, #0
   16bd8:	add	ip, ip, #1
   16bdc:	ldr	r0, [r4, #4]
   16be0:	mov	r3, r8
   16be4:	str	r5, [sp]
   16be8:	strh	ip, [r4]
   16bec:	bl	1670c <__assert_fail@plt+0x4b14>
   16bf0:	ldrh	r3, [r4]
   16bf4:	sub	r3, r3, #1
   16bf8:	strh	r3, [r4]
   16bfc:	mov	r5, r0
   16c00:	mov	r0, r9
   16c04:	bl	117fc <pipeline_wait@plt>
   16c08:	mov	r0, r9
   16c0c:	bl	11afc <pipeline_free@plt>
   16c10:	mov	r0, fp
   16c14:	bl	117cc <free@plt>
   16c18:	mov	r0, r5
   16c1c:	b	1694c <__assert_fail@plt+0x4d54>
   16c20:	str	r3, [r5, #4]
   16c24:	mov	r0, #64	; 0x40
   16c28:	mov	r3, #16
   16c2c:	str	r3, [r5, #8]
   16c30:	bl	118c8 <xmalloc@plt>
   16c34:	str	r0, [r5]
   16c38:	b	1674c <__assert_fail@plt+0x4b54>
   16c3c:	tst	r8, #4
   16c40:	beq	16924 <__assert_fail@plt+0x4d2c>
   16c44:	cmp	r9, #0
   16c48:	bne	167d0 <__assert_fail@plt+0x4bd8>
   16c4c:	movw	r0, #6172	; 0x181c
   16c50:	movw	r1, #6176	; 0x1820
   16c54:	movw	r3, #6092	; 0x17cc
   16c58:	movt	r0, #2
   16c5c:	movt	r1, #2
   16c60:	movw	r2, #274	; 0x112
   16c64:	movt	r3, #2
   16c68:	bl	11bf8 <__assert_fail@plt>
   16c6c:	mov	r0, fp
   16c70:	movw	sl, #17336	; 0x43b8
   16c74:	bl	11b50 <canonicalize_file_name@plt>
   16c78:	movt	sl, #3
   16c7c:	subs	r3, r0, #0
   16c80:	beq	16ea0 <__assert_fail@plt+0x52a8>
   16c84:	mov	r1, r3
   16c88:	movw	r0, #6224	; 0x1850
   16c8c:	movt	r0, #2
   16c90:	mov	fp, r3
   16c94:	str	r3, [sp, #12]
   16c98:	bl	1182c <debug@plt>
   16c9c:	ldr	r0, [sl, #4]
   16ca0:	bl	117cc <free@plt>
   16ca4:	ldr	r3, [sp, #12]
   16ca8:	str	r3, [sl, #4]
   16cac:	b	167c8 <__assert_fail@plt+0x4bd0>
   16cb0:	mov	r0, r7
   16cb4:	str	ip, [sp, #12]
   16cb8:	bl	11814 <mdir_name@plt>
   16cbc:	ldr	r3, [sp, #16]
   16cc0:	str	sl, [sp]
   16cc4:	movw	r2, #28976	; 0x7130
   16cc8:	movt	r2, #1
   16ccc:	mov	r1, r0
   16cd0:	mov	r7, r0
   16cd4:	mov	r0, sl
   16cd8:	bl	119a0 <appendstr@plt>
   16cdc:	str	r0, [sp, #32]
   16ce0:	mov	r0, r7
   16ce4:	bl	117cc <free@plt>
   16ce8:	ldr	r0, [sp, #32]
   16cec:	mov	r1, sl
   16cf0:	bl	11aa8 <access@plt>
   16cf4:	ldr	ip, [sp, #12]
   16cf8:	subs	r7, r0, #0
   16cfc:	bne	16e1c <__assert_fail@plt+0x5224>
   16d00:	ldr	r0, [ip, #4]
   16d04:	bl	117cc <free@plt>
   16d08:	ldr	r0, [sp, #32]
   16d0c:	mov	r1, r7
   16d10:	bl	11b80 <canonicalize_filename_mode@plt>
   16d14:	ldr	ip, [sp, #12]
   16d18:	str	r0, [sp, #28]
   16d1c:	str	r0, [ip, #4]
   16d20:	ldr	r0, [sp, #32]
   16d24:	bl	117cc <free@plt>
   16d28:	b	16bb4 <__assert_fail@plt+0x4fbc>
   16d2c:	ldr	sl, [sl, #4]
   16d30:	mov	r0, #3
   16d34:	add	r2, sp, #40	; 0x28
   16d38:	mov	r1, sl
   16d3c:	bl	11bb0 <__lxstat64@plt>
   16d40:	cmn	r0, #1
   16d44:	addne	r9, sp, #40	; 0x28
   16d48:	bne	167ac <__assert_fail@plt+0x4bb4>
   16d4c:	movw	r3, #8844	; 0x228c
   16d50:	movt	r3, #3
   16d54:	ldr	r3, [r3]
   16d58:	cmp	r3, #1
   16d5c:	bgt	169f8 <__assert_fail@plt+0x4e00>
   16d60:	bl	11a00 <__errno_location@plt>
   16d64:	mov	r2, #5
   16d68:	movw	r1, #6152	; 0x1808
   16d6c:	movt	r1, #2
   16d70:	ldr	r4, [r0]
   16d74:	mov	r0, r9
   16d78:	bl	11820 <dcgettext@plt>
   16d7c:	mov	r3, sl
   16d80:	mov	r1, r4
   16d84:	mov	r2, r0
   16d88:	mov	r0, r9
   16d8c:	bl	11910 <error@plt>
   16d90:	b	169f8 <__assert_fail@plt+0x4e00>
   16d94:	mov	r2, #5
   16d98:	movw	r1, #6300	; 0x189c
   16d9c:	mov	r0, #0
   16da0:	movt	r1, #2
   16da4:	bl	11820 <dcgettext@plt>
   16da8:	mov	r3, r7
   16dac:	mov	r2, r0
   16db0:	mov	r0, #0
   16db4:	mov	r1, r0
   16db8:	bl	11910 <error@plt>
   16dbc:	mov	r0, #0
   16dc0:	b	1694c <__assert_fail@plt+0x4d54>
   16dc4:	movw	r3, #8844	; 0x228c
   16dc8:	movt	r3, #3
   16dcc:	ldr	r3, [r3]
   16dd0:	cmp	r3, #1
   16dd4:	bgt	16e08 <__assert_fail@plt+0x5210>
   16dd8:	bl	11a00 <__errno_location@plt>
   16ddc:	mov	r2, #5
   16de0:	movw	r1, #6252	; 0x186c
   16de4:	movt	r1, #2
   16de8:	ldr	fp, [r0]
   16dec:	mov	r0, r9
   16df0:	bl	11820 <dcgettext@plt>
   16df4:	ldr	r3, [sp, #28]
   16df8:	mov	r1, fp
   16dfc:	mov	r2, r0
   16e00:	mov	r0, r9
   16e04:	bl	11910 <error@plt>
   16e08:	ldr	r0, [sp, #28]
   16e0c:	bl	117cc <free@plt>
   16e10:	mov	r0, sl
   16e14:	bl	117cc <free@plt>
   16e18:	b	16924 <__assert_fail@plt+0x4d2c>
   16e1c:	mov	r3, sl
   16e20:	ldr	r1, [sp, #32]
   16e24:	mov	r0, sl
   16e28:	movw	r2, #29100	; 0x71ac
   16e2c:	movt	r2, #1
   16e30:	str	ip, [sp, #12]
   16e34:	bl	119a0 <appendstr@plt>
   16e38:	mov	r7, r0
   16e3c:	bl	12dfc <__assert_fail@plt+0x1204>
   16e40:	str	r0, [sp, #36]	; 0x24
   16e44:	mov	r0, r7
   16e48:	bl	117cc <free@plt>
   16e4c:	ldr	r3, [sp, #36]	; 0x24
   16e50:	mov	r1, sl
   16e54:	ldr	r0, [r3]
   16e58:	bl	11aa8 <access@plt>
   16e5c:	ldr	ip, [sp, #12]
   16e60:	subs	sl, r0, #0
   16e64:	beq	16f8c <__assert_fail@plt+0x5394>
   16e68:	ldr	ip, [ip, #4]
   16e6c:	str	ip, [sp, #28]
   16e70:	ldr	r3, [sp, #36]	; 0x24
   16e74:	ldr	r0, [r3]
   16e78:	cmp	r0, #0
   16e7c:	ldrne	r7, [sp, #36]	; 0x24
   16e80:	beq	16e94 <__assert_fail@plt+0x529c>
   16e84:	bl	117cc <free@plt>
   16e88:	ldr	r0, [r7, #4]!
   16e8c:	cmp	r0, #0
   16e90:	bne	16e84 <__assert_fail@plt+0x528c>
   16e94:	ldr	r0, [sp, #36]	; 0x24
   16e98:	bl	117cc <free@plt>
   16e9c:	b	16d20 <__assert_fail@plt+0x5128>
   16ea0:	movw	r2, #8844	; 0x228c
   16ea4:	movt	r2, #3
   16ea8:	ldr	r2, [r2]
   16eac:	cmp	r2, #1
   16eb0:	bgt	169f8 <__assert_fail@plt+0x4e00>
   16eb4:	str	r3, [sp, #12]
   16eb8:	bl	11a00 <__errno_location@plt>
   16ebc:	ldr	r3, [sp, #12]
   16ec0:	ldr	r4, [r0]
   16ec4:	cmp	r4, #2
   16ec8:	beq	16fb8 <__assert_fail@plt+0x53c0>
   16ecc:	mov	r0, r3
   16ed0:	mov	r2, #5
   16ed4:	movw	r1, #6152	; 0x1808
   16ed8:	movt	r1, #2
   16edc:	str	r3, [sp, #12]
   16ee0:	bl	11820 <dcgettext@plt>
   16ee4:	ldr	r3, [sp, #12]
   16ee8:	mov	r1, r4
   16eec:	mov	r2, r0
   16ef0:	mov	r0, r3
   16ef4:	mov	r3, fp
   16ef8:	bl	11910 <error@plt>
   16efc:	b	169f8 <__assert_fail@plt+0x4e00>
   16f00:	movw	r3, #8844	; 0x228c
   16f04:	movt	r3, #3
   16f08:	ldr	r3, [r3]
   16f0c:	cmp	r3, #1
   16f10:	movgt	r0, r9
   16f14:	bgt	1694c <__assert_fail@plt+0x4d54>
   16f18:	bl	11a00 <__errno_location@plt>
   16f1c:	mov	r2, #5
   16f20:	movw	r1, #4472	; 0x1178
   16f24:	movt	r1, #2
   16f28:	ldr	r5, [r0]
   16f2c:	mov	r0, r9
   16f30:	bl	11820 <dcgettext@plt>
   16f34:	ldr	r3, [r4, #4]
   16f38:	mov	r1, r5
   16f3c:	mov	r2, r0
   16f40:	mov	r0, r9
   16f44:	bl	11910 <error@plt>
   16f48:	mov	r0, r9
   16f4c:	b	1694c <__assert_fail@plt+0x4d54>
   16f50:	bl	11a00 <__errno_location@plt>
   16f54:	mov	r2, #5
   16f58:	movw	r1, #4472	; 0x1178
   16f5c:	movt	r1, #2
   16f60:	ldr	r5, [r0]
   16f64:	mov	r0, r9
   16f68:	bl	11820 <dcgettext@plt>
   16f6c:	ldr	r3, [r4, #4]
   16f70:	mov	r1, r5
   16f74:	mov	r2, r0
   16f78:	mov	r0, r9
   16f7c:	bl	11910 <error@plt>
   16f80:	b	16a44 <__assert_fail@plt+0x4e4c>
   16f84:	mov	r1, #0
   16f88:	b	16b54 <__assert_fail@plt+0x4f5c>
   16f8c:	ldr	r0, [ip, #4]
   16f90:	str	ip, [sp, #12]
   16f94:	bl	117cc <free@plt>
   16f98:	ldr	r2, [sp, #36]	; 0x24
   16f9c:	mov	r1, sl
   16fa0:	ldr	r0, [r2]
   16fa4:	bl	11b80 <canonicalize_filename_mode@plt>
   16fa8:	ldr	ip, [sp, #12]
   16fac:	str	r0, [sp, #28]
   16fb0:	str	r0, [ip, #4]
   16fb4:	b	16e70 <__assert_fail@plt+0x5278>
   16fb8:	mov	r0, r3
   16fbc:	mov	r2, #5
   16fc0:	movw	r1, #6188	; 0x182c
   16fc4:	movt	r1, #2
   16fc8:	bl	11820 <dcgettext@plt>
   16fcc:	ldr	r3, [sp, #12]
   16fd0:	mov	r1, r3
   16fd4:	mov	r2, r0
   16fd8:	mov	r0, r3
   16fdc:	mov	r3, fp
   16fe0:	bl	11910 <error@plt>
   16fe4:	b	169f8 <__assert_fail@plt+0x4e00>
   16fe8:	bl	11838 <__stack_chk_fail@plt>
   16fec:	movw	r0, #6244	; 0x1864
   16ff0:	movw	r1, #6176	; 0x1820
   16ff4:	movt	r0, #2
   16ff8:	movt	r1, #2
   16ffc:	mov	r2, #87	; 0x57
   17000:	ldr	r3, [pc, #12]	; 17014 <__assert_fail@plt+0x541c>
   17004:	bl	11bf8 <__assert_fail@plt>
   17008:	tst	r8, #4
   1700c:	bne	16c4c <__assert_fail@plt+0x5054>
   17010:	b	16924 <__assert_fail@plt+0x4d2c>
   17014:	ldrdeq	r1, [r2], -r4
   17018:	push	{r3, r4, r5, r6, r7, r8, r9, lr}
   1701c:	mov	r7, r0
   17020:	ldr	r6, [pc, #76]	; 17074 <__assert_fail@plt+0x547c>
   17024:	mov	r8, r1
   17028:	ldr	r5, [pc, #72]	; 17078 <__assert_fail@plt+0x5480>
   1702c:	mov	r9, r2
   17030:	add	r6, pc, r6
   17034:	bl	11770 <_init@@Base>
   17038:	add	r5, pc, r5
   1703c:	rsb	r6, r5, r6
   17040:	asrs	r6, r6, #2
   17044:	popeq	{r3, r4, r5, r6, r7, r8, r9, pc}
   17048:	sub	r5, r5, #4
   1704c:	mov	r4, #0
   17050:	add	r4, r4, #1
   17054:	ldr	r3, [r5, #4]!
   17058:	mov	r0, r7
   1705c:	mov	r1, r8
   17060:	mov	r2, r9
   17064:	blx	r3
   17068:	cmp	r4, r6
   1706c:	bne	17050 <__assert_fail@plt+0x5458>
   17070:	pop	{r3, r4, r5, r6, r7, r8, r9, pc}
   17074:			; <UNDEFINED> instruction: 0x0001aeb0
   17078:	andeq	sl, r1, r4, lsr #29
   1707c:	bx	lr

Disassembly of section .fini:

00017080 <_fini@@Base>:
   17080:	push	{r3, lr}
   17084:	pop	{r3, pc}
